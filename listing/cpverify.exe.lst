mov dword ptr [ecx] offset off_42B9B8 +
sub esp 0Ch +
push esi  +
push esi  +
push ecx  +
push offset unk_42EE8C  +
lea eax [ebp+var_4] +
push eax  +
mov [ebp+var_4] 8007000Eh +
call _CxxThrowException  +
int 3  +
push dword ptr [eax]  +
call SysFreeString  +
retn   +
***
xor eax eax +
and esp 0FFFFFFF8h +
push 0FFFFFFFFh  +
push offset loc_42783E  +
mov eax large fs:0 +
push eax  +
sub esp 0A0h +
mov eax dword_431000 +
xor eax esp +
mov [esp+0ACh+var_14] eax +
push ebx  +
push esi  +
push edi  +
mov eax dword_431000 +
xor eax esp +
push eax  +
lea eax [esp+0BCh+var_C] +
mov large fs:0 eax +
mov eax [ebp+arg_4] +
xor ebx ebx +
mov [esp+0BCh+var_8C] eax +
mov [eax] ebx +
mov esi edx +
xor eax eax +
mov [esp+0BCh+var_9C] ecx +
mov [esp+1Ch] esi +
mov dword ptr [esp+0BCh+var_94] ebx +
mov [esp+0BCh+var_5C] 7 +
mov [esp+0BCh+var_60] ebx +
mov [esp+0BCh+var_70] ax +
mov edi offset off_431410 +
push edi  +
push ecx  +
push dword ptr [ebp+arg_0]  +
mov [esp+0C8h+var_4] ebx +
call sub_41B86B  +
jmp loc_4011A5  +
cmp [esp+0C8h+var_B4] ebx +
jnz loc_4011F9  +
mov ecx lpWideCharStr +
mov eax ecx +
lea esi [eax+2] +
mov dx [eax] +
add eax 2 +
cmp dx bx +
jnz loc_40117B  +
sub eax esi +
sar eax 1 +
push ecx  +
lea esi [esp+0CCh+var_80] +
call sub_401C84  +
push edi  +
push dword ptr [esp+24h]  +
push dword ptr [ebp+arg_0]  +
call sub_41B86B  +
mov esi dword ptr [esp+0D4h+pvarg] +
add esp 0Ch +
mov [esp+0C8h+var_B4] eax +
cmp eax 0FFFFFFFFh +
jnz loc_401166  +
mov eax dword_431770 +
mov ecx dword ptr [ebp+arg_0] +
xor edi edi +
sub ecx eax +
inc edi  +
cmp ecx edi +
jnz loc_4011EB  +
mov ecx [esp+20h] +
mov ecx [ecx+eax*4] +
mov eax ecx +
lea esi [eax+2] +
mov dx [eax] +
add eax 2 +
cmp dx bx +
jnz loc_4011CE  +
sub eax esi +
sar eax 1 +
push ecx  +
lea esi [esp+0CCh+var_80] +
call sub_401C84  +
mov esi dword ptr [esp+0C8h+pvarg] +
cmp [esp+0C8h+var_B4] 0FFFFFFFFh +
jz loc_401204  +
mov [esi] edi +
jmp loc_40153D  +
mov dword ptr [esi] 1 +
jmp loc_40153D  +
cmp [esp+0C8h+var_68] 8 +
mov eax dword ptr [esp+0C8h+var_7C] +
jnb loc_401213  +
lea eax [esp+0C8h+var_7C] +
push ebx  +
push eax  +
call ds:_waccess  +
pop ecx  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jnz loc_401252  +
cmp [esp+0C8h+var_68] 8 +
mov eax dword ptr [esp+0C8h+var_7C] +
jnb loc_401231  +
lea eax [esp+0C8h+var_7C] +
push eax  +
push offset aFileSNotFound  +
call sub_4024F7  +
pop ecx  +
pop ecx  +
mov [esi] edi +
push ebx  +
push edi  +
lea esi [esp+0D0h+var_80] +
call sub_401C39  +
xor eax eax +
jmp loc_40154D  +
mov dword ptr [esp+0C8h+ppv] ebx +
push ebx  +
mov [esp+0CCh+var_10] 1 +
call CoInitialize  +
cmp eax ebx +
jge loc_401291  +
push offset aErrorWhileCoin  +
call sub_4024F7  +
mov [esp+0CCh+var_10] bl +
mov eax dword ptr [esp+0CCh+ppv] +
pop ecx  +
mov dword ptr [esi] 3 +
cmp eax ebx +
jz loc_401240  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_401240  +
lea eax [esp+0C8h+ppv] +
push eax  +
push offset riid  +
push 17h  +
push ebx  +
push offset rclsid  +
call CoCreateInstance  +
cmp eax ebx +
jge loc_4012B4  +
push offset aErrorWhileCocr  +
jmp loc_40126E  +
cmp [esp+0C8h+var_68] 8 +
mov eax dword ptr [esp+0C8h+var_7C] +
mov [esp+0C8h+var_9C] ebx +
jnb loc_4012C7  +
lea eax [esp+0C8h+var_7C] +
push eax  +
lea esi [esp+0CCh+var_94] +
call sub_4010A0  +
lea edx [esp+0C8h+var_9C] +
push edx  +
mov [esp+0CCh+var_10] 2 +
mov eax dword ptr [esp+0CCh+ppv] +
mov ecx [eax] +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
push eax  +
movs   +
call dword ptr [ecx+0E8h]  +
cmp word ptr [esp+0E0h+var_B4] bx +
jnz loc_401349  +
cmp [esp+0E0h+var_80] 8 +
mov eax dword ptr [esp+0E0h+var_94] +
jnb loc_40130A  +
lea eax [esp+0E0h+var_94] +
push eax  +
push offset aErrorWhileLoad  +
call sub_4024F7  +
mov eax [esp+0E8h+var_C4] +
pop ecx  +
pop ecx  +
mov dword ptr [eax] 3 +
lea eax [esp+0E0h+pvarg] +
push eax  +
call VariantClear  +
mov [esp+0E0h+var_28] bl +
mov eax [esp+0E0h+var_C8] +
cmp eax ebx +
jz loc_401341  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push ebx  +
push 1  +
jmp loc_401242  +
mov [esp+0E0h+var_CC] ebx +
push offset off_42B6EC  +
lea esi [esp+0E4h+var_7C] +
mov [esp+0E4h+var_28] 3 +
call sub_401BA2  +
mov [esp+0E0h+var_28] 4 +
cmp [esp+0E0h+var_64] 8 +
mov esi [esp+0E0h+var_C8] +
mov eax [esp+0E0h+var_78] +
jnb loc_40137E  +
lea eax [esp+0E0h+var_78] +
cmp eax ebx +
jnz loc_40140D  +
mov [esp+0E0h+var_C0] ebx +
lea ecx [esp+0E0h+var_CC] +
push ecx  +
mov [esp+0E4h+var_28] 5 +
push [esp+0E4h+var_C0]  +
mov eax [esi] +
push esi  +
call dword ptr [eax+94h]  +
mov [esp+0ECh+var_34] 4 +
push [esp+0ECh+var_CC]  +
mov esi eax +
call SysFreeString  +
cmp esi ebx +
jge loc_401425  +
cmp [esp+0ECh+var_8C] 8 +
mov eax [esp+4Ch] +
jnb loc_4013CB  +
lea eax [esp+4Ch] +
push eax  +
push offset aWrongXmlFileS  +
call sub_4024F7  +
mov eax [esp+0F4h+var_D0] +
pop ecx  +
pop ecx  +
push ebx  +
push 1  +
lea esi [esp+0F4h+var_88] +
mov dword ptr [eax] 3 +
call sub_401C39  +
mov [esp+0ECh+var_34] 2 +
mov eax [esp+0ECh+var_D8] +
cmp eax ebx +
jz loc_401321  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_401321  +
push eax  +
call SysAllocString  +
mov [esp+0E0h+var_C0] eax +
cmp eax ebx +
jnz loc_40138A  +
call sub_401075  +
lea eax [esp+0E0h+var_CC] +
push eax  +
lea esi [esp+0E4h+var_BC] +
call sub_4091F2  +
push 0F003Fh  +
push offset aSystemCurrentc  +
push 80000002h  +
lea edi [esp+0ECh+var_60] +
mov [esp+0ECh+var_28] 6 +
call sub_4072A3  +
mov edi eax +
mov esi offset unk_431F9C +
mov [esp+0E0h+var_28] 7 +
call sub_407604  +
lea eax [esp+0E0h+var_60] +
mov [esp+0E0h+var_28] 6 +
call sub_40731D  +
mov esi dword ptr [esp+0E0h+ppv] +
push ebx  +
lea eax [esp+0E4h+var_BC] +
push offset sub_4019C8  +
push eax  +
call sub_40AA66  +
mov edi eax +
add esp 0Ch +
push edi  +
push offset aCopiedHashForD  +
mov [esp+0E8h+var_B8] edi +
call sub_402498  +
mov eax [esi] +
pop ecx  +
pop ecx  +
cmp eax edi +
jle loc_4014D4  +
sub eax edi +
push eax  +
push offset aCopyHashFailed  +
call sub_4024F7  +
push offset aCopyHashEntrie  +
call sub_4024F7  +
mov eax [esp+0ECh+var_C4] +
add esp 0Ch +
mov dword ptr [eax] 2 +
jmp loc_4014E5  +
push offset aCopyHashEntr_0  +
call sub_402498  +
mov eax [esp+0E4h+var_C4] +
pop ecx  +
mov [eax] ebx +
mov [esp+0E0h+var_28] 4 +
mov eax [esp+0E0h+var_BC] +
cmp eax ebx +
jz loc_4014FB  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push ebx  +
push 1  +
lea esi [esp+0ECh+var_80] +
call sub_401C39  +
mov [esp+0E4h+var_2C] 2 +
mov eax [esp+0E4h+var_D0] +
cmp eax ebx +
jz loc_40151D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea eax [esp+0E8h+var_B4] +
push eax  +
call VariantClear  +
mov [esp+0E8h+var_30] bl +
mov eax [esp+0E8h+var_D0] +
cmp eax ebx +
jz loc_40153D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push ebx  +
push 1  +
lea esi [esp+50h] +
call sub_401C39  +
mov eax [esp+0ECh+var_C4] +
mov ecx [esp+0ECh+var_3C] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [esp+0DCh+var_44] +
xor ecx esp +
call sub_41C200  +
mov esp ebp +
pop ebp  +
retn   +
***
and esp 0FFFFFFF8h +
call __EH_prolog3_GS  +
mov esi [ebp+8] +
cmp dword ptr [esi+18h] 8 +
jb loc_4019E2  +
mov eax [esi+4] +
jmp loc_4019E5  +
lea eax [esi+4] +
push eax  +
lea eax [ebp-44h] +
mov ecx offset unk_431F9C +
call sub_4075CC  +
and dword ptr [ebp-4] 0 +
cmp dword ptr [esi+34h] 8 +
mov eax [esi+30h] +
jb loc_401A05  +
mov esi [esi+20h] +
jmp loc_401A08  +
add esi 20h +
add eax eax +
push eax  +
lea eax [ebp-44h] +
xor edx edx +
push eax  +
inc edx  +
call sub_407978  +
lea esi [ebp-20h] +
call sub_401BCF  +
push 0  +
push 1  +
lea esi [ebp-40h] +
call sub_401C39  +
xor eax eax +
inc eax  +
call sub_426758  +
retn   +
***
and esp 0FFFFFFF8h +
push [ebp+arg_0]  +
and dword ptr [esi+14h] 0 +
xor eax eax +
mov dword ptr [esi+18h] 7 +
push esi  +
mov [esi+4] ax +
call sub_401C10  +
mov eax esi +
pop ebp  +
retn 4  +
***
mov eax [esi+4] +
mov eax [edi] +
mov eax [ebp+arg_4] +
cmp [ebp+arg_0] 0 +
push ebx  +
cmp dword ptr [eax+18h] 8 +
push ebx  +
push esi  +
push esi  +
push ecx  +
call __EH_prolog3_catch  +
mov esi [ebp+8] +
add eax eax +
call __EH_prolog3_catch_GS  +
mov ebx [ebp+0Ch] +
call ds:GetConsoleOutputCP  +
cmp eax 362h +
jz loc_402055  +
cmp eax 4E3h +
jz loc_40204E  +
push offset off_42BADE  +
jmp loc_40205A  +
push offset a_1251  +
jmp loc_40205A  +
push offset a_866  +
push 0  +
call ds:setlocale  +
xor esi esi +
pop ecx  +
xor eax eax +
inc esi  +
pop ecx  +
xor ecx ecx +
mov [ebp-38h] eax +
mov [ebp-40h] esi +
mov dword ptr [ebp-34h] 0Ah +
mov dword ptr [ebp-18h] 7 +
mov [ebp-1Ch] eax +
mov [ebp-2Ch] cx +
mov edi [ebp+8] +
mov [ebp-4] eax +
mov byte ptr [ebp-4] 1 +
mov [ebp-48h] eax +
mov [ebp-44h] eax +
mov [ebp-3Ch] eax +
mov lpWideCharStr eax +
mov dword_431770 eax +
mov dword_431774 eax +
push offset off_431450  +
push ebx  +
push edi  +
call sub_41B86B  +
add esp 0Ch +
mov dword_431774 esi +
cmp eax 0FFFFFFFFh +
jz loc_40228E  +
inc dword ptr [ebp-44h]  +
cmp eax 3Fh +
jg loc_40234C  +
jz loc_402260  +
dec eax  +
cmp eax 11h +
ja loc_40234C  +
jmp ds:off_402450[eax*4]  +
mov ecx lpWideCharStr +
mov eax ecx +
lea esi [eax+2] +
mov dx [eax] +
add eax 2 +
test dx dx +
jnz loc_4020F4  +
sub eax esi +
sar eax 1 +
push ecx  +
lea esi [ebp-30h] +
call sub_401C84  +
cmp dword ptr [ebp-18h] 8 +
mov eax [ebp-2Ch] +
jnb loc_402118  +
lea eax [ebp-2Ch] +
push offset word_4283E4  +
push eax  +
call ds:_wfopen  +
pop ecx  +
pop ecx  +
mov dword_431F7C eax +
test eax eax +
jnz loc_40213E  +
push (offset off_42BADE+2)  +
call sub_4024F7  +
and dword ptr [ebp-38h] 0 +
pop ecx  +
add dword ptr [ebp-3Ch] 2 +
jmp loc_40227F  +
push lpWideCharStr  +
call ds:_wtol  +
mov esi eax +
push esi  +
push offset aSleepingForDMs  +
call sub_402498  +
add esp 0Ch +
push esi  +
call ds:Sleep  +
jmp loc_40213E  +
inc dword ptr [ebp-3Ch]  +
mov dword_431F80 esi +
jmp loc_40227F  +
inc dword ptr [ebp-3Ch]  +
mov dword_431F84 esi +
jmp loc_40227F  +
lea eax [ebp-34h] +
push eax  +
push ebx  +
push edi  +
call sub_4032FA  +
jmp loc_402279  +
lea eax [ebp-34h] +
push eax  +
push ebx  +
push edi  +
call sub_408CF5  +
jmp loc_402279  +
lea eax [ebp-34h] +
push eax  +
push ebx  +
push edi  +
call sub_408AA6  +
jmp loc_402279  +
lea eax [ebp-34h] +
push eax  +
lea eax [ebp-40h] +
push eax  +
push ebx  +
push edi  +
call sub_40A000  +
add esp 10h +
jmp loc_40227C  +
lea eax [ebp-40h] +
push eax  +
push ebx  +
push edi  +
lea ecx [ebp-34h] +
call sub_4098E0  +
jmp loc_402279  +
lea eax [ebp-40h] +
push eax  +
push edi  +
lea edx [ebp-34h] +
mov ecx ebx +
call sub_4010E2  +
pop ecx  +
pop ecx  +
jmp loc_40227C  +
lea eax [ebp-40h] +
push eax  +
push ebx  +
push edi  +
lea ecx [ebp-34h] +
call sub_40157E  +
jmp loc_402279  +
lea eax [ebp-34h] +
push eax  +
lea eax [ebp-40h] +
push eax  +
push ebx  +
push edi  +
call sub_407FE5  +
jmp loc_4021C7  +
lea eax [ebp-40h] +
push eax  +
push edi  +
lea ecx [ebp-34h] +
mov edx ebx +
call sub_407D12  +
jmp loc_4021F1  +
lea eax [ebp-34h] +
push eax  +
push esi  +
push edi  +
mov ecx ebx +
call sub_403D2C  +
jmp loc_402279  +
lea eax [ebp-34h] +
push eax  +
push esi  +
push ebx  +
push edi  +
call sub_4036A3  +
jmp loc_4021C7  +
lea eax [ebp-34h] +
push eax  +
push 0  +
jmp loc_40222F  +
lea eax [ebp-34h] +
push eax  +
push 0  +
jmp loc_40223E  +
and dword ptr [ebp-34h] 0 +
jmp loc_402352  +
mov eax [ebp-3Ch] +
inc eax  +
cmp edi eax +
jle loc_402257  +
dec dword_431770  +
lea eax [ebp-34h] +
push eax  +
push ebx  +
push edi  +
call sub_402CDE  +
add esp 0Ch +
mov [ebp-38h] eax +
and dword_431774 0 +
xor esi esi +
inc esi  +
jmp loc_4020A8  +
mov eax [ebp-44h] +
mov ecx [ebp-3Ch] +
sub eax ecx +
jnz loc_4022B2  +
inc ecx  +
cmp edi ecx +
jle loc_402345  +
lea eax [ebp-34h] +
push eax  +
push ebx  +
push edi  +
call sub_402CDE  +
add esp 0Ch +
mov [ebp-38h] eax +
mov edi [ebp-40h] +
sub edi [ebp-38h] +
xor ebx ebx +
cmp dword ptr [ebp-34h] 1 +
jz loc_4022C6  +
cmp dword ptr [ebp-34h] 0Ah +
jnz loc_4022D1  +
push offset aBadParameters  +
call sub_4024F7  +
pop ecx  +
cmp dword_431F80 ebx +
jnz loc_4022F2  +
cmp dword_431F84 ebx +
jz loc_4023FF  +
cmp edi ebx +
jnz loc_4022F2  +
cmp [ebp-34h] ebx +
jz loc_4023FF  +
xor eax eax +
cmp [ebp-1Ch] ebx +
jz loc_402317  +
cmp dword ptr [ebp-18h] 8 +
mov eax [ebp-2Ch] +
jnb loc_402305  +
lea eax [ebp-2Ch] +
lea edx [eax+2] +
mov cx [eax] +
add eax 2 +
cmp cx bx +
jnz loc_402308  +
sub eax edx +
sar eax 1 +
lea eax [eax+eax+78h] +
push eax  +
call ds:malloc  +
mov esi eax +
pop ecx  +
cmp esi ebx +
jz loc_4023E5  +
cmp edi ebx +
jnz loc_402396  +
push dword ptr [ebp-38h]  +
push offset aSuccessfullyHa  +
push esi  +
call ds:swprintf  +
add esp 0Ch +
jmp loc_4023A4  +
and dword ptr [ebp-34h] 0 +
mov [ebp-48h] esi +
cmp dword ptr [ebp-48h] 0 +
jz loc_402357  +
call sub_402556  +
call ds:__iob_func  +
add eax 20h +
push eax  +
call ds:fflush  +
mov edi [ebp-34h] +
pop ecx  +
test edi edi +
jz loc_402376  +
xor ebx ebx +
jmp loc_40241F  +
push 0  +
push 1  +
lea esi [ebp-30h] +
call sub_401C39  +
xor ecx ecx +
xor eax eax +
setnle cl  +
mov eax ecx +
jmp loc_40244A  +
mov eax offset loc_4022B2 +
retn   +
push offset aIntegrityCheck  +
push esi  +
call ds:swprintf  +
pop ecx  +
pop ecx  +
cmp [ebp-1Ch] ebx +
jz loc_4023DC  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
add eax 2 +
cmp cx bx +
jnz loc_4023AE  +
mov ecx [ebp-2Ch] +
sub eax edx +
sar eax 1 +
cmp dword ptr [ebp-18h] 8 +
lea eax [esi+eax*2] +
jnb loc_4023CC  +
lea ecx [ebp-2Ch] +
push ecx  +
push offset aLogSavedInS  +
push eax  +
call ds:swprintf  +
add esp 0Ch +
push ebx  +
push offset Caption  +
push esi  +
jmp loc_4023F0  +
push ebx  +
push offset Caption  +
push offset Text  +
push ebx  +
call ds:MessageBoxW  +
push esi  +
call ds:free  +
pop ecx  +
push ebx  +
push ebx  +
push offset Name  +
call ds:GetEnvironmentVariableW  +
test eax eax +
jz loc_40242E  +
mov edi [ebp-38h] +
cmp edi [ebp-40h] +
jnz loc_40241D  +
cmp [ebp-34h] ebx +
jz loc_40241F  +
xor edi edi +
push ebx  +
push 1  +
lea esi [ebp-30h] +
call sub_401C39  +
mov eax edi +
jmp loc_40244A  +
cmp [ebp-34h] ebx +
jz loc_402438  +
mov edi [ebp-34h] +
jmp loc_40241F  +
push ebx  +
push 1  +
lea esi [ebp-30h] +
call sub_401C39  +
xor eax eax +
cmp edi ebx +
setnle al  +
call sub_426767  +
retn   +
***
mov eax dword_431F7C +
mov eax dword_431F7C +
push esi  +
call __EH_prolog3  +
push 0  +
sub esp 2Ch +
push esi  +
call __EH_prolog3  +
sub esp 0Ch +
push esi  +
call __EH_prolog3  +
call __EH_prolog3  +
push ecx  +
push ecx  +
push ecx  +
push esi  +
push edi  +
mov edi ecx +
push 0  +
lea ecx [ebp+var_4] +
call sub_41D2CD  +
mov eax [edi+4] +
test eax eax +
jz loc_4028FE  +
cmp eax 0FFFFFFFFh +
jnb loc_4028FE  +
dec eax  +
mov [edi+4] eax +
mov esi [edi+4] +
neg esi  +
sbb esi esi +
not esi  +
lea ecx [ebp+var_4] +
and esi edi +
call ??1_Lockit@std@@QAE@XZ  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov ecx [ecx] +
mov ecx [eax] +
test [ebp+arg_0] 1 +
inc eax  +
retn   +
***
call __EH_prolog3_GS  +
mov eax [esi+14h] +
movzx eax [ebp+arg_0] +
push esi  +
movzx eax [ebp+arg_0] +
push esi  +
mov al [ebp+arg_0] +
mov eax [ebp+arg_4] +
mov al [ebp+arg_0] +
mov eax [ebp+arg_4] +
push esi  +
mov dword ptr [ecx] offset off_42DEC4 +
sub esp 2Ch +
and esp 0FFFFFFF8h +
mov eax [eax+24h] +
push esi  +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_40273E  +
mov dword ptr [esi] offset off_42DEC4 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3_GS  +
mov eax [ebp+0Ch] +
mov [ebp-0DCh] eax +
mov eax [ebp+10h] +
push 7  +
mov [ebp-0D8h] eax +
xor edi edi +
pop ebx  +
xor eax eax +
mov [ebp-0E8h] edi +
mov [ebp-14h] ebx +
mov [ebp-18h] edi +
mov [ebp-28h] ax +
push offset aGr3411  +
lea esi [ebp-0B8h] +
mov [ebp-4] edi +
call sub_401BA2  +
xor eax eax +
mov [ebp-30h] ebx +
mov [ebp-34h] edi +
mov [ebp-44h] ax +
mov [ebp-84h] ebx +
mov [ebp-88h] edi +
mov [ebp-98h] ax +
mov [ebp-0E4h] edi +
mov edi offset off_4315F0 +
push edi  +
push dword ptr [ebp-0DCh]  +
mov byte ptr [ebp-4] 3 +
push dword ptr [ebp+8]  +
call sub_41B86B  +
add esp 0Ch +
mov [ebp-0E0h] eax +
cmp eax 0FFFFFFFFh +
jz loc_402EC9  +
mov eax [ebp-0E0h] +
sub eax 0 +
jz loc_402DFF  +
dec eax  +
jz loc_402DDF  +
dec eax  +
jz loc_402DC2  +
dec eax  +
jz loc_402DA2  +
dec eax  +
jnz loc_403295  +
mov dword ptr [ebp-0E4h] 1 +
jmp loc_402E22  +
mov ecx lpWideCharStr +
mov eax ecx +
lea esi [eax+2] +
mov dx [eax] +
add eax 2 +
test dx dx +
jnz loc_402DAD  +
sub eax esi +
lea esi [ebp-9Ch] +
jmp loc_402E1A  +
mov ecx lpWideCharStr +
mov eax ecx +
lea esi [eax+2] +
mov dx [eax] +
add eax 2 +
test dx dx +
jnz loc_402DCD  +
sub eax esi +
lea esi [ebp-48h] +
jmp loc_402E1A  +
mov ecx lpWideCharStr +
mov eax ecx +
lea esi [eax+2] +
mov dx [eax] +
add eax 2 +
test dx dx +
jnz loc_402DEA  +
sub eax esi +
lea esi [ebp-0B8h] +
jmp loc_402E1A  +
mov ecx lpWideCharStr +
mov eax ecx +
lea esi [eax+2] +
mov dx [eax] +
add eax 2 +
test dx dx +
jnz loc_402E0A  +
sub eax esi +
lea esi [ebp-2Ch] +
push ecx  +
sar eax 1 +
call sub_401C84  +
push edi  +
push dword ptr [ebp-0DCh]  +
push dword ptr [ebp+8]  +
call sub_41B86B  +
add esp 0Ch +
mov [ebp-0E0h] eax +
cmp eax 0FFFFFFFFh +
jnz loc_402D78  +
cmp dword ptr [ebp-0E4h] 0 +
jz loc_402EC9  +
cmp dword ptr [ebp-18h] 0 +
jz loc_402E61  +
push offset aBothFilePathAn  +
call sub_4024F7  +
jmp loc_403294  +
mov ecx [ebp+8] +
mov eax dword_431770 +
sub ecx eax +
mov edx [ebp-34h] +
jnz loc_402E7B  +
test edx edx +
jnz loc_402E7B  +
push offset aHashValueMustB  +
jmp loc_402E57  +
test ecx ecx +
jz loc_402E83  +
test edx edx +
jnz loc_402E8C  +
cmp ecx 1 +
jz loc_402E93  +
test edx edx +
jnz loc_402EBD  +
push offset aGotExtraParame  +
jmp loc_402E57  +
test edx edx +
jnz loc_402EBD  +
mov ecx [ebp-0DCh] +
mov ecx [ecx+eax*4] +
mov eax ecx +
lea esi [eax+2] +
mov dx [eax] +
add eax 2 +
test dx dx +
jnz loc_402EA5  +
sub eax esi +
sar eax 1 +
push ecx  +
lea esi [ebp-48h] +
call sub_401C84  +
and dword ptr [ebp-0DCh] 0 +
jmp loc_402F92  +
mov ecx [ebp+8] +
mov eax dword_431770 +
sub ecx eax +
cmp ecx 2 +
jg loc_403295  +
mov edi eax +
jmp loc_402F31  +
cmp dword ptr [ebp-18h] 0 +
jnz loc_402F04  +
mov eax [ebp-0DCh] +
mov ecx [eax+edi*4] +
mov eax ecx +
lea edx [eax+2] +
mov si [eax] +
add eax 2 +
test si si +
jnz loc_402EF4  +
lea esi [ebp-2Ch] +
jmp loc_402F26  +
cmp dword ptr [ebp-34h] 0 +
jnz loc_402F30  +
mov eax [ebp-0DCh] +
mov ecx [eax+edi*4] +
mov eax ecx +
lea edx [eax+2] +
mov si [eax] +
add eax 2 +
test si si +
jnz loc_402F18  +
lea esi [ebp-48h] +
sub eax edx +
push ecx  +
sar eax 1 +
call sub_401C84  +
inc edi  +
cmp edi [ebp+8] +
jnz loc_402EE0  +
cmp dword ptr [ebp-0E0h] 0FFFFFFFFh +
jnz loc_403295  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_402F4F  +
lea eax [ebp-28h] +
push offset word_4283A4  +
push eax  +
call ds:_wfopen  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_402F78  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_402F6D  +
lea eax [ebp-28h] +
push eax  +
push offset aFileSNotFound  +
jmp loc_40328E  +
push eax  +
call ds:fclose  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
pop ecx  +
jnb loc_402F8C  +
lea eax [ebp-28h] +
mov [ebp-0DCh] eax +
push offset aGr3411  +
lea ecx [ebp-0B8h] +
call sub_404696  +
mov esi 801Eh +
test eax eax +
jnz loc_402FB3  +
mov [ebp-0E0h] esi +
jmp loc_402FF5  +
push offset aGr3411_2012_25  +
lea ecx [ebp-0B8h] +
call sub_404696  +
test eax eax +
jnz loc_402FD3  +
mov dword ptr [ebp-0E0h] 8021h +
jmp loc_402FF5  +
push offset aGr3411_2012_51  +
lea ecx [ebp-0B8h] +
call sub_404696  +
test eax eax +
jnz loc_403273  +
mov dword ptr [ebp-0E0h] 8022h +
xor edi edi +
cmp [ebp-88h] edi +
jz loc_40305B  +
push offset a0  +
lea ecx [ebp-9Ch] +
call sub_404696  +
test eax eax +
jnz loc_40301B  +
mov [ebp-0ECh] edi +
jmp loc_40306C  +
push offset a1  +
lea ecx [ebp-9Ch] +
call sub_404696  +
test eax eax +
jnz loc_40303B  +
mov dword ptr [ebp-0ECh] 1 +
jmp loc_40306C  +
cmp dword ptr [ebp-84h] 8 +
mov eax [ebp-98h] +
jnb loc_403050  +
lea eax [ebp-98h] +
push eax  +
push offset aWrongValueInve  +
jmp loc_40328E  +
xor eax eax +
cmp [ebp-0E0h] esi +
setz al  +
mov [ebp-0ECh] eax +
cmp [ebp-34h] edi +
jnz loc_4031D8  +
xor eax eax +
mov [ebp-4Ch] ebx +
mov [ebp-50h] edi +
mov [ebp-60h] ax +
push offset a_hsh  +
lea eax [ebp-2Ch] +
push eax  +
lea eax [ebp-0D4h] +
push eax  +
mov byte ptr [ebp-4] 4 +
call sub_4058C8  +
add esp 0Ch +
push 0FFFFFFFFh  +
push edi  +
lea ecx [ebp-64h] +
push ecx  +
mov byte ptr [ebp-4] 5 +
call sub_401D0F  +
push edi  +
push 1  +
lea esi [ebp-0D4h] +
mov byte ptr [ebp-4] 4 +
call sub_401C39  +
lea eax [ebp-178h] +
push eax  +
call sub_404715  +
mov byte ptr [ebp-4] 6 +
cmp dword ptr [ebp-4Ch] 8 +
mov eax [ebp-60h] +
jnb loc_4030DB  +
lea eax [ebp-60h] +
push eax  +
lea eax [ebp-178h] +
push eax  +
call sub_4047EC  +
cmp [ebp-124h] edi +
jnz loc_403149  +
cmp dword ptr [ebp-4Ch] 8 +
mov eax [ebp-60h] +
jnb loc_4030FC  +
lea eax [ebp-60h] +
push eax  +
push offset aReadHashFromSF  +
call sub_4024F7  +
mov eax [ebp-0D8h] +
pop ecx  +
xor esi esi +
pop ecx  +
inc esi  +
lea ecx [ebp-120h] +
mov [eax] esi +
mov byte ptr [ebp-4] 4 +
call sub_404890  +
lea eax [ebp-120h] +
push eax  +
mov dword ptr [ebp-120h] offset off_42DE08 +
call sub_41D487  +
pop ecx  +
push edi  +
push esi  +
lea esi [ebp-64h] +
call sub_401C39  +
jmp loc_4032A1  +
mov dword ptr [ebp-68h] 0Fh +
mov [ebp-6Ch] edi +
mov byte ptr [ebp-7Ch] 0 +
lea eax [ebp-80h] +
push eax  +
lea eax [ebp-178h] +
push eax  +
mov [ebp-4] bl +
call sub_40592A  +
cmp dword ptr [ebp-68h] 10h +
pop ecx  +
pop ecx  +
mov ecx [ebp-7Ch] +
mov eax ecx +
jnb loc_40317A  +
lea eax [ebp-7Ch] +
add eax [ebp-6Ch] +
cmp dword ptr [ebp-68h] 10h +
jnb loc_403186  +
lea ecx [ebp-7Ch] +
push dword ptr [ebp-0E8h]  +
lea edi [ebp-48h] +
push eax  +
push ecx  +
call sub_405CFE  +
push 0  +
push 1  +
lea ecx [ebp-80h] +
call sub_40515F  +
lea ecx [ebp-120h] +
mov byte ptr [ebp-4] 4 +
call sub_404890  +
lea eax [ebp-120h] +
push eax  +
mov dword ptr [ebp-120h] offset off_42DE08 +
call sub_41D487  +
pop ecx  +
push 0  +
push 1  +
lea esi [ebp-64h] +
mov byte ptr [ebp-4] 3 +
call sub_401C39  +
cmp dword ptr [ebp-30h] 8 +
mov eax [ebp-44h] +
jnb loc_4031E4  +
lea eax [ebp-44h] +
push dword ptr [ebp-0ECh]  +
mov ecx [ebp-0E0h] +
push eax  +
push dword ptr [ebp-0DCh]  +
call sub_406112  +
add esp 0Ch +
test eax eax +
jnz loc_403237  +
cmp [ebp-0E4h] eax +
jz loc_403217  +
push offset aFileIsCorrupte  +
call sub_4024F7  +
jmp loc_403228  +
push dword ptr [ebp-0DCh]  +
push offset aFileSIsCorrupt  +
call sub_4024F7  +
pop ecx  +
mov eax [ebp-0D8h] +
pop ecx  +
mov dword ptr [eax] 2 +
jmp loc_4032A1  +
cmp dword ptr [ebp-0E4h] 0 +
jz loc_40324C  +
push offset aFileHasBeenVer  +
call sub_402498  +
jmp loc_40325D  +
push dword ptr [ebp-0DCh]  +
push offset aFileSHasBeenVe  +
call sub_402498  +
pop ecx  +
mov eax [ebp-0D8h] +
and dword ptr [eax] 0 +
pop ecx  +
mov dword ptr [ebp-0E8h] 1 +
jmp loc_4032A1  +
cmp dword ptr [ebp-0A0h] 8 +
mov eax [ebp-0B4h] +
jnb loc_403288  +
lea eax [ebp-0B4h] +
push eax  +
push offset aWrongValueAlgS  +
call sub_4024F7  +
pop ecx  +
pop ecx  +
mov eax [ebp-0D8h] +
mov dword ptr [eax] 1 +
xor edi edi +
xor ebx ebx +
push edi  +
inc ebx  +
push ebx  +
lea esi [ebp-9Ch] +
call sub_401C39  +
push edi  +
push ebx  +
lea esi [ebp-48h] +
call sub_401C39  +
push edi  +
push ebx  +
lea esi [ebp-0B8h] +
call sub_401C39  +
push edi  +
push ebx  +
lea esi [ebp-2Ch] +
call sub_401C39  +
mov eax [ebp-0E8h] +
call sub_426758  +
retn   +
***
call __EH_prolog3_GS  +
call __EH_prolog3_GS  +
call __EH_prolog3_GS  +
push ebx  +
mov edx [ecx] +
sub esp 24h +
sub esp 38h +
push esi  +
push esi  +
mov esi ecx +
push 0  +
mov dword ptr [esi+18h] 0Fh +
call sub_405535  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_4050CF  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax [esi] +
mov eax [eax+4] +
push edi  +
xor edi edi +
test byte ptr [eax+esi+8] 6 +
jnz loc_404423  +
mov eax [eax+esi+28h] +
mov edx [eax] +
mov ecx eax +
call dword ptr [edx+2Ch]  +
cmp eax 0FFFFFFFFh +
jnz loc_404423  +
push 4  +
pop edi  +
mov eax [esi] +
mov edx [eax+4] +
add edx esi +
test edi edi +
jz loc_404446  +
mov eax [edx+8] +
or eax edi +
cmp dword ptr [edx+28h] 0 +
jnz loc_40443C  +
or eax 4 +
push 0  +
push edx  +
mov ecx eax +
call sub_402B54  +
mov eax esi +
pop edi  +
retn   +
***
push ecx  +
mov dword ptr [ecx] offset off_42DE08 +
call sub_41D487  +
pop ecx  +
retn   +
***
mov eax [ecx-8] +
mov eax [eax+4] +
mov dword ptr [eax+ecx-8] offset off_42DE40 +
retn   +
***
push edi  +
mov eax [ecx+20h] +
mov eax [esi+20h] +
mov eax [esi] +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
call __EH_prolog3  +
call __EH_prolog3  +
call __EH_prolog3  +
call __EH_prolog3  +
call __EH_prolog3_GS  +
push ebx  +
mov eax [esi+20h] +
call __EH_prolog3_GS  +
push ecx  +
push ecx  +
push esi  +
cmp dword ptr [esi+4Ch] 0 +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [esi+18h] 0Fh +
or eax 0FFFFFFFFh +
mov eax [ebp+arg_4] +
mov eax [ebp+arg_0] +
push esi  +
cmp [ebp+arg_0] 0 +
call __EH_prolog3_catch  +
push edi  +
cmp [ebp+arg_0] 1 +
call __EH_prolog3_GS  +
mov eax [ebp+arg_C] +
mov eax [ebp+arg_C] +
mov eax [ebp+arg_8] +
push esi  +
cmp [ebp+arg_4] 1 +
cmp dword ptr [ecx+18h] 10h +
push esi  +
call __EH_prolog3  +
mov eax [eax+38h] +
lea edx [eax+18h] +
call __EH_prolog3_catch  +
mov ecx [ebp-18h] +
push esi  +
call __EH_prolog3  +
call __EH_prolog3_GS  +
call __EH_prolog3_catch  +
call __EH_prolog3  +
and dword ptr [esi+14h] 0 +
call __EH_prolog3_GS  +
push ebx  +
push ebx  +
call __EH_prolog3_GS  +
push ecx  +
call __EH_prolog3_catch  +
or eax 0FFFFFFFFh +
push ecx  +
cmp [ebp+arg_0] 0 +
sub esp 8Ch +
and esp 0FFFFFFF8h +
sub esp 174h +
sub esp 48h +
mov eax ds:CryptAcquireContextW +
sub esp 114h +
call sub_40D43C  +
sub esp 34h +
push esi  +
sub esp 10h +
push ecx  +
push ebx  +
push [ebp+arg_C]  +
push ebx  +
call __EH_prolog3  +
push 0  +
cmp dword ptr [ecx+24h] 10h +
sub esp 2Ch +
push esi  +
call __EH_prolog3  +
push esi  +
mov dword ptr [ecx] offset off_42E0D4 +
sub esp 2Ch +
push esi  +
push esi  +
and dword ptr [eax+4] 0 +
call __EH_prolog3_GS  +
mov eax [esi+4] +
call __EH_prolog3_GS  +
call __EH_prolog3_GS  +
call __EH_prolog3_GS  +
call __EH_prolog3_GS  +
push ecx  +
push ecx  +
mov eax [edi] +
call __EH_prolog3_GS  +
call __EH_prolog3  +
call __EH_prolog3_GS  +
call __EH_prolog3_GS  +
push ecx  +
mov ecx [eax+28h] +
call __EH_prolog3_GS  +
push ecx  +
or eax 0FFFFFFFFh +
sub esp 18h +
call __EH_prolog3_GS  +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
sub esp 11Ch +
push esi  +
call __EH_prolog3_GS  +
mov eax [ebp+8] +
mov ebx [ebp+10h] +
mov [ebp-0DCh] eax +
mov eax [ebp+0Ch] +
xor edi edi +
push 7  +
mov [ebp-0E4h] eax +
pop esi  +
xor eax eax +
mov [ebp-0D8h] edi +
mov [ebp-50h] esi +
mov [ebp-54h] edi +
mov [ebp-64h] ax +
mov [ebp-34h] esi +
mov [ebp-38h] edi +
mov [ebp-48h] ax +
lea eax [ebp-9Ch] +
push eax  +
mov [ebp-4] edi +
call sub_407694  +
xor eax eax +
mov [ebp-14h] esi +
mov [ebp-18h] edi +
mov [ebp-28h] ax +
push dword ptr [ebp-0DCh]  +
mov byte ptr [ebp-4] 2 +
call sub_407567  +
mov [ebp-0E0h] eax +
mov [ebx] edi +
mov [ebp-0D4h] edi +
cmp eax edi +
jbe loc_408680  +
push dword ptr [ebp-0D4h]  +
lea eax [ebp-0D0h] +
push eax  +
push dword ptr [ebp-0DCh]  +
call sub_4075E7  +
lea esi [ebp-9Ch] +
mov byte ptr [ebp-4] 3 +
call sub_4086DD  +
lea esi [ebp-0ACh] +
mov byte ptr [ebp-4] 2 +
call sub_401BCF  +
push edi  +
push 1  +
lea esi [ebp-0CCh] +
call sub_401C39  +
lea eax [ebp-9Ch] +
call sub_407947  +
cmp eax 1 +
jnz loc_408668  +
lea ecx [ebp-0B8h] +
lea eax [ebp-9Ch] +
call sub_40794B  +
push 0FFFFFFFFh  +
push edi  +
lea ecx [ebp-2Ch] +
push ecx  +
mov byte ptr [ebp-4] 4 +
call sub_401D0F  +
push edi  +
push 1  +
lea esi [ebp-0B8h] +
mov byte ptr [ebp-4] 2 +
call sub_401C39  +
cmp dword ptr [ebp-14h] 8 +
mov esi [ebp-28h] +
jnb loc_4085FF  +
lea esi [ebp-28h] +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
add eax 2 +
cmp cx di +
jnz loc_408604  +
sub eax edx +
push esi  +
sar eax 1 +
lea esi [ebp-68h] +
call sub_401C84  +
lea eax [ebp-9Ch] +
call sub_407974  +
mov ecx eax +
lea edx [ecx+2] +
mov si [ecx] +
add ecx 2 +
cmp si di +
jnz loc_40862C  +
sub ecx edx +
sar ecx 1 +
push eax  +
mov eax ecx +
lea esi [ebp-4Ch] +
call sub_401C84  +
lea eax [ebp-9Ch] +
push eax  +
lea eax [ebp-68h] +
push eax  +
mov dword ptr [ebp-30h] 8021h +
call dword ptr [ebp-0E4h]  +
add [ebp-0D8h] eax +
inc dword ptr [ebx]  +
pop ecx  +
pop ecx  +
inc dword ptr [ebp-0D4h]  +
mov eax [ebp-0D4h] +
cmp eax [ebp-0E0h] +
jb loc_408568  +
push edi  +
push 1  +
lea esi [ebp-2Ch] +
call sub_401C39  +
lea esi [ebp-78h] +
call sub_401BCF  +
push edi  +
push 1  +
lea esi [ebp-98h] +
call sub_401C39  +
push edi  +
push 1  +
lea esi [ebp-4Ch] +
call sub_401C39  +
push edi  +
push 1  +
lea esi [ebp-68h] +
call sub_401C39  +
mov eax [ebp-0D8h] +
call sub_426758  +
retn   +
***
mov eax [edi] +
call __EH_prolog3_GS  +
call __EH_prolog3_GS  +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
push ebx  +
call __EH_prolog3_GS  +
call __EH_prolog3_GS  +
call __EH_prolog3_GS  +
call __EH_prolog3_GS  +
call __EH_prolog3_GS  +
and esp 0FFFFFFF8h +
call __EH_prolog3  +
call __EH_prolog3_GS  +
call __EH_prolog3_GS  +
xor eax eax +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
push ebx  +
sub esp 11Ch +
call __EH_prolog3  +
call __EH_prolog3_GS  +
sub esp 14h +
sub esp 14h +
sub esp 280h +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
sub esp 18h +
sub esp 14h +
sub esp 94h +
sub esp 40h +
sub esp 84h +
sub esp 50h +
push [ebp+arg_14]  +
xor eax eax +
mov eax [ebp+arg_4] +
sub esp 0Ch +
sub esp 0Ch +
mov edx [ebp+arg_0] +
sub esp 40h +
push ecx  +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF0h +
and esp 0FFFFFFF0h +
push ebx  +
cmp dword ptr [eax+308h] 0 +
push ecx  +
cmp [ebp+arg_0] 0 +
test edi edi +
sub esp 10h +
sub esp 0Ch +
sub esp 0Ch +
push ebx  +
sub esp 10h +
sub esp 10h +
sub esp 10h +
sub esp 10h +
sub esp 1Ch +
sub esp 10h +
push ecx  +
jmp loc_40EDA4  +
mov ecx [ebp+arg_0] +
sub esp 2Ch +
jmp loc_40EE78  +
xor ecx ecx +
xor ecx ecx +
sub esp 18h +
sub esp 10h +
mov ecx [ebp+arg_0] +
push ecx  +
sub esp 28h +
sub esp 24h +
sub esp 50h +
sub esp 0Ch +
sub esp 0Ch +
sub esp 60h +
sub esp 30h +
test edx edx +
push ecx  +
test al 1 +
push ecx  +
push ebx  +
mov eax ebx +
mov eax [ebp+arg_0] +
cmp dword ptr [esi+14h] 3 +
test edi edi +
mov eax [ebp+arg_C] +
sub esp 134h +
push ebx  +
sub esp 0Ch +
push ecx  +
push esi  +
mov ecx [ebp+arg_10] +
sub esp 18h +
sub esp 18h +
sub esp 20h +
sub esp 18h +
sub esp 14h +
sub esp 0Ch +
sub esp 14h +
sub esp 24h +
sub esp 0Ch +
sub esp 0Ch +
push ecx  +
push ecx  +
sub esp 0Ch +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
sub esp 18h +
sub esp 14h +
push ecx  +
push ecx  +
sub esp 24h +
push ecx  +
sub esp 0Ch +
sub esp 14h +
sub esp 24h +
sub esp 24h +
sub esp 14h +
sub esp 28h +
sub esp 10h +
mov ecx [eax+14h] +
push ebx  +
push ebx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
sub esp 9Ch +
push ebx  +
sub esp 54h +
sub esp 0FCh +
sub esp 94h +
cmp [ebp+arg_0] 0 +
sub esp 0Ch +
sub esp 1Ch +
sub esp 34h +
sub esp 14h +
push ecx  +
sub esp 80h +
push ecx  +
sub esp 90h +
sub esp 0F8h +
sub esp 5Ch +
sub esp 14h +
sub esp 0ACh +
sub esp 58h +
push ecx  +
sub esp 178h +
sub esp 20h +
sub esp 24h +
sub esp 24h +
push [ebp+arg_4]  +
cmp [ebp+arg_4] 0 +
push ecx  +
cmp [ebp+arg_0] 0 +
cmp eax 8009000Dh +
jmp loc_41B7A9  +
sub esp 10h +
mov eax dword_431F58 +
mov ecx dword_431F5C +
push ebx  +
mov ebx dword_431770 +
mov [ebp+var_8] ebx +
cmp ebx eax +
jle loc_41B84F  +
push esi  +
cmp eax ecx +
jle loc_41B84E  +
mov edx eax +
sub ebx eax +
sub edx ecx +
mov [ebp+var_C] ebx +
mov [ebp+var_10] edx +
cmp ebx edx +
jle loc_41B81C  +
test edx edx +
jle loc_41B814  +
add ebx ecx +
lea esi [edi+ebx*4] +
mov ebx [ebp+var_10] +
lea edx [edi+ecx*4] +
mov [ebp+var_C] ebx +
mov ebx [edx] +
mov [ebp+var_4] ebx +
mov ebx [esi] +
mov [edx] ebx +
mov ebx [ebp+var_4] +
mov [esi] ebx +
add edx 4 +
add esi 4 +
dec [ebp+var_C]  +
jnz loc_41B7FB  +
mov edx [ebp+var_10] +
sub [ebp+var_8] edx +
jmp loc_41B847  +
test ebx ebx +
jle loc_41B845  +
lea esi [edi+eax*4] +
lea edx [edi+ecx*4] +
mov [ebp+var_10] ebx +
mov ebx [edx] +
mov [ebp+var_4] ebx +
mov ebx [esi] +
mov [edx] ebx +
mov ebx [ebp+var_4] +
mov [esi] ebx +
add edx 4 +
add esi 4 +
dec [ebp+var_10]  +
jnz loc_41B829  +
mov ebx [ebp+var_C] +
add ecx ebx +
mov ebx [ebp+var_8] +
cmp ebx eax +
jg loc_41B7D5  +
pop esi  +
mov ecx dword_431770 +
mov edx ecx +
sub edx eax +
add dword_431F5C edx +
mov dword_431F58 ecx +
pop ebx  +
leave   +
retn   +
***
sub esp 10h +
cmp [ebp+arg_0] 1 +
mov eax dword_431774 +
push ebx  +
mov ebx [ebp+arg_4] +
mov [ebp+var_4] eax +
jge loc_41B88B  +
or eax 0FFFFFFFFh +
jmp loc_41C0EE  +
push esi  +
mov esi dword_431770 +
xor edx edx +
mov lpWideCharStr edx +
cmp esi edx +
jz loc_41B8FB  +
cmp dword_431F90 edx +
jz loc_41B904  +
mov edx dword_431F64 +
mov eax dword_431F58 +
push edi  +
test edx edx +
jz loc_41B8C0  +
cmp word ptr [edx] 0 +
jnz loc_41BA5F  +
cmp eax esi +
jle loc_41B8CB  +
mov eax esi +
mov dword_431F58 eax +
cmp dword_431F5C esi +
jle loc_41B8D9  +
mov dword_431F5C esi +
cmp dword_431F60 1 +
jnz loc_41B971  +
cmp dword_431F5C eax +
jz loc_41B936  +
cmp eax esi +
jz loc_41B965  +
mov edi ebx +
call sub_41B7B5  +
jmp loc_41B965  +
xor esi esi +
inc esi  +
mov dword_431770 esi +
xor ecx ecx +
cmp dword_431F94 ecx +
mov eax esi +
setz cl  +
mov dword_431F58 eax +
mov dword_431F5C eax +
mov dword_431F64 edx +
mov dword_431F90 1 +
mov dword_431F60 ecx +
jmp loc_41B8B1  +
cmp eax esi +
jz loc_41B965  +
mov dword_431F5C esi +
jmp loc_41B965  +
mov eax [ebx+esi*4] +
movzx ecx word ptr [eax] +
cmp ecx 2Dh +
jz loc_41B957  +
mov edx 2013h +
cmp cx dx +
jnz loc_41B95E  +
cmp word ptr [eax+2] 0 +
jnz loc_41B96A  +
inc esi  +
mov dword_431770 esi +
cmp esi [ebp+arg_0] +
jl loc_41B942  +
mov eax esi +
mov dword_431F58 eax +
cmp esi [ebp+arg_0] +
jz loc_41B9E4  +
mov ecx [ebx+esi*4] +
mov edx offset asc_42E770 +
mov di [ecx] +
cmp di [edx] +
jnz loc_41B9A4  +
test di di +
jz loc_41B9A0  +
mov di [ecx+2] +
cmp di [edx+2] +
jnz loc_41B9A4  +
add ecx 4 +
add edx 4 +
test di di +
jnz loc_41B97E  +
xor ecx ecx +
jmp loc_41B9A9  +
sbb ecx ecx +
sbb ecx 0FFFFFFFFh +
test ecx ecx +
jnz loc_41B9DF  +
inc esi  +
mov dword_431770 esi +
cmp dword_431F5C eax +
jz loc_41B9C9  +
cmp eax esi +
jz loc_41B9CF  +
mov edi ebx +
call sub_41B7B5  +
jmp loc_41B9CF  +
mov dword_431F5C esi +
mov esi [ebp+arg_0] +
mov eax esi +
mov dword_431F58 eax +
mov dword_431770 esi +
cmp esi [ebp+arg_0] +
jnz loc_41B9F6  +
mov ecx dword_431F5C +
cmp ecx eax +
jz loc_41BA1D  +
mov dword_431770 ecx +
jmp loc_41BA1D  +
mov eax [ebx+esi*4] +
movzx ecx word ptr [eax] +
cmp ecx 2Dh +
jz loc_41BA0B  +
mov edx 2013h +
cmp cx dx +
jnz loc_41BA14  +
movzx ecx word ptr [eax+2] +
test cx cx +
jnz loc_41BA39  +
cmp dword_431F60 0 +
jnz loc_41BA25  +
or eax 0FFFFFFFFh +
jmp loc_41C0EC  +
mov lpWideCharStr eax +
inc esi  +
xor eax eax +
mov dword_431770 esi +
inc eax  +
jmp loc_41C0EC  +
cmp [ebp+arg_8] 0 +
jz loc_41BA53  +
cmp ecx 2Dh +
jz loc_41BA4E  +
mov edx 2013h +
cmp cx dx +
jnz loc_41BA53  +
xor ecx ecx +
inc ecx  +
jmp loc_41BA55  +
xor ecx ecx +
lea edx [eax+ecx*2+2] +
mov dword_431F64 edx +
cmp [ebp+arg_8] 0 +
jz loc_41BD95  +
mov eax ebx +
mov eax [eax+esi*4] +
movzx ecx word ptr [eax+2] +
cmp ecx 2Dh +
jz loc_41BA9C  +
mov edi 2013h +
cmp cx di +
jz loc_41BA9C  +
cmp word ptr [eax+4] 0 +
jnz loc_41BA9C  +
push ecx  +
mov eax offset unk_4284A4 +
call sub_41B799  +
pop ecx  +
test eax eax +
jnz loc_41BD95  +
movzx eax word ptr [edx] +
xor edi edi +
mov [ebp+var_10] edi +
mov [ebp+var_C] edi +
mov [ebp+var_8] edx +
jmp loc_41BABC  +
cmp ax 3Dh +
jz loc_41BAC1  +
add [ebp+var_8] 2 +
mov eax [ebp+var_8] +
movzx eax word ptr [eax] +
cmp ax di +
jnz loc_41BAAC  +
mov ebx [ebp+arg_8] +
cmp [ebx] edi +
jz loc_41BCF1  +
mov eax [ebp+var_8] +
sub eax edx +
sar eax 1 +
push eax  +
push edx  +
push dword ptr [ebx]  +
call ds:wcsncmp  +
mov edx dword_431F64 +
add esp 0Ch +
test eax eax +
jnz loc_41BB1A  +
mov eax [ebx] +
lea esi [eax+2] +
mov cx [eax] +
add eax 2 +
test cx cx +
jnz loc_41BAEF  +
mov ecx [ebp+var_8] +
sub eax esi +
mov esi ecx +
sub esi edx +
sar eax 1 +
sar esi 1 +
cmp esi eax +
jz loc_41BB27  +
test edi edi +
jnz loc_41BB13  +
mov edi ebx +
jmp loc_41BB1A  +
mov [ebp+var_C] 1 +
add ebx 10h +
cmp dword ptr [ebx] 0 +
jnz loc_41BACC  +
mov ecx [ebp+var_8] +
jmp loc_41BB30  +
mov edi ebx +
mov [ebp+var_10] 1 +
xor esi esi +
cmp [ebp+var_C] esi +
jz loc_41BB9A  +
cmp [ebp+var_10] esi +
jnz loc_41BB9A  +
cmp [ebp+var_4] esi +
jz loc_41BB6D  +
mov eax [ebp+arg_4] +
mov ecx dword_431770 +
push dword ptr [eax+ecx*4]  +
push dword ptr [eax]  +
push offset aSOptionSIsAmbi  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call ds:fwprintf  +
mov edx dword_431F64 +
add esp 10h +
mov eax edx +
lea edi [eax+2] +
mov cx [eax] +
add eax 2 +
test cx cx +
jnz loc_41BB72  +
sub eax edi +
sar eax 1 +
inc dword_431770  +
and dword_431778 esi +
lea eax [edx+eax*2] +
mov dword_431F64 eax +
jmp loc_41C0E9  +
cmp edi esi +
jz loc_41BCEB  +
mov eax dword_431770 +
inc eax  +
mov dword_431770 eax +
cmp [ecx] si +
jz loc_41BC7F  +
cmp [edi+4] esi +
jz loc_41BBF3  +
add ecx 2 +
mov lpWideCharStr ecx +
mov eax edx +
lea ebx [eax+2] +
mov cx [eax] +
add eax 2 +
test cx cx +
jnz loc_41BBC9  +
sub eax ebx +
sar eax 1 +
lea eax [edx+eax*2] +
mov dword_431F64 eax +
mov eax [edi+8] +
test eax eax +
jz loc_41BCE3  +
mov ecx [edi+0Ch] +
jmp loc_41BF5E  +
cmp [ebp+var_4] esi +
jz loc_41BC56  +
mov ecx [ebp+arg_4] +
mov eax [ecx+eax*4-4] +
movzx edx word ptr [eax+2] +
cmp edx 2Dh +
jz loc_41BC34  +
mov esi 2013h +
cmp dx si +
jz loc_41BC34  +
push dword ptr [edi]  +
movzx eax word ptr [eax] +
push eax  +
push dword ptr [ecx]  +
push offset aSOptionCSDoesn  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call ds:fwprintf  +
add esp 14h +
jmp loc_41BC50  +
push dword ptr [edi]  +
push dword ptr [ecx]  +
push offset aSOptionSDoesnT  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call ds:fwprintf  +
add esp 10h +
mov edx dword_431F64 +
mov eax edx +
lea ebx [eax+2] +
mov cx [eax] +
add eax 2 +
test cx cx +
jnz loc_41BC5B  +
sub eax ebx +
sar eax 1 +
lea eax [edx+eax*2] +
mov dword_431F64 eax +
mov eax [edi+0Ch] +
mov dword_431778 eax +
jmp loc_41C0E9  +
cmp dword ptr [edi+4] 1 +
jnz loc_41BBC4  +
cmp eax [ebp+arg_0] +
jge loc_41BCA5  +
mov ecx [ebp+arg_4] +
mov ecx [ecx+eax*4] +
inc eax  +
mov lpWideCharStr ecx +
mov dword_431770 eax +
jmp loc_41BBC4  +
cmp [ebp+var_4] esi +
jz loc_41BCD1  +
mov ecx [ebp+arg_4] +
push dword ptr [ecx+eax*4-4]  +
push dword ptr [ecx]  +
push offset aSOptionSRequir  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call ds:fwprintf  +
mov edx dword_431F64 +
add esp 10h +
mov eax edx +
lea ebx [eax+2] +
mov cx [eax] +
add eax 2 +
test cx cx +
jnz loc_41BCD6  +
jmp loc_41BC66  +
mov eax [edi+0Ch] +
jmp loc_41C0EC  +
mov esi dword_431770 +
mov ebx [ebp+arg_4] +
mov edi [ebx+esi*4] +
movzx eax word ptr [edi+2] +
cmp eax 2Dh +
jz loc_41BD1D  +
mov ecx 2013h +
cmp ax cx +
jz loc_41BD1D  +
movzx eax word ptr [edx] +
push eax  +
mov eax offset unk_4284A4 +
call sub_41B799  +
pop ecx  +
test eax eax +
jnz loc_41BD95  +
cmp [ebp+var_4] 0 +
jz loc_41BD78  +
movzx eax word ptr [edi+2] +
cmp eax 2Dh +
jz loc_41BD57  +
mov ecx 2013h +
cmp ax cx +
jz loc_41BD57  +
movzx eax word ptr [edi] +
push edx  +
push eax  +
push dword ptr [ebx]  +
push offset aSUnrecognizedO  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call ds:fwprintf  +
add esp 14h +
jmp loc_41BD72  +
push edx  +
push dword ptr [ebx]  +
push offset aSUnrecognize_0  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call ds:fwprintf  +
add esp 10h +
mov esi dword_431770 +
inc esi  +
and dword_431778 0 +
mov dword_431F64 offset unk_4284A4 +
mov dword_431770 esi +
jmp loc_41C0E9  +
movzx ebx word ptr [edx] +
mov edi ebx +
add edx 2 +
push edi  +
mov eax offset unk_4284A4 +
mov dword_431F64 edx +
call sub_41B799  +
pop ecx  +
movzx ecx word ptr [edx] +
test cx cx +
jnz loc_41BDBE  +
inc esi  +
mov dword_431770 esi +
test eax eax +
jz loc_41C0AF  +
cmp ebx 3Ah +
jz loc_41C0AF  +
cmp word ptr [eax] 57h +
jnz loc_41C034  +
cmp word ptr [eax+2] 3Bh +
jnz loc_41C034  +
xor ebx ebx +
mov [ebp+var_8] ebx +
mov [ebp+var_C] ebx +
mov [ebp+var_10] ebx +
cmp cx bx +
jnz loc_41BE18  +
cmp esi [ebp+arg_0] +
jnz loc_41BE12  +
cmp [ebp+var_4] ebx +
jz loc_41C0E3  +
mov eax [ebp+arg_4] +
push edi  +
push dword ptr [eax]  +
push offset aSOptionRequire  +
jmp loc_41C0D0  +
mov eax [ebp+arg_4] +
mov edx [eax+esi*4] +
mov edi edx +
inc esi  +
mov eax edi +
mov dword_431770 esi +
mov lpWideCharStr edx +
mov dword_431F64 eax +
jmp loc_41BE39  +
cmp cx 3Dh +
jz loc_41BE41  +
add edi 2 +
movzx ecx word ptr [edi] +
cmp cx bx +
jnz loc_41BE30  +
mov esi [ebp+arg_8] +
cmp [esi] ebx +
jz loc_41C026  +
mov ecx edi +
sub ecx eax +
sar ecx 1 +
push ecx  +
push eax  +
push dword ptr [esi]  +
call ds:wcsncmp  +
add esp 0Ch +
test eax eax +
mov eax dword_431F64 +
jnz loc_41BE98  +
mov ecx [esi] +
lea ebx [ecx+2] +
mov dx [ecx] +
add ecx 2 +
test dx dx +
jnz loc_41BE6D  +
mov edx edi +
sub ecx ebx +
sub edx eax +
sar ecx 1 +
sar edx 1 +
cmp edx ecx +
jz loc_41BEA5  +
cmp [ebp+var_8] 0 +
jnz loc_41BE91  +
mov [ebp+var_8] esi +
jmp loc_41BE98  +
mov [ebp+var_10] 1 +
add esi 10h +
cmp dword ptr [esi] 0 +
jnz loc_41BE4C  +
mov esi [ebp+var_8] +
jmp loc_41BEAF  +
mov [ebp+var_8] esi +
mov [ebp+var_C] 1 +
xor edx edx +
cmp [ebp+var_10] edx +
jz loc_41BF12  +
cmp [ebp+var_C] edx +
jnz loc_41BF12  +
cmp [ebp+var_4] edx +
jz loc_41BEEB  +
mov eax [ebp+arg_4] +
mov ecx dword_431770 +
push dword ptr [eax+ecx*4]  +
push dword ptr [eax]  +
push offset aSOptionWSIsAmb  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call ds:fwprintf  +
mov eax dword_431F64 +
add esp 10h +
mov ecx eax +
lea esi [ecx+2] +
mov dx [ecx] +
add ecx 2 +
test dx dx +
jnz loc_41BEF0  +
sub ecx esi +
sar ecx 1 +
inc dword_431770  +
lea eax [eax+ecx*2] +
mov dword_431F64 eax +
jmp loc_41C0E9  +
cmp esi edx +
jz loc_41C026  +
cmp [edi] dx +
jz loc_41BFB4  +
cmp [esi+4] edx +
jz loc_41BF67  +
add edi 2 +
mov lpWideCharStr edi +
mov ecx eax +
lea esi [ecx+2] +
mov dx [ecx] +
add ecx 2 +
test dx dx +
jnz loc_41BF36  +
sub ecx esi +
sar ecx 1 +
lea eax [eax+ecx*2] +
mov ecx [ebp+var_8] +
mov dword_431F64 eax +
mov eax [ecx+8] +
test eax eax +
jz loc_41C01E  +
mov ecx [ecx+0Ch] +
mov [eax] ecx +
xor eax eax +
jmp loc_41C0EC  +
cmp [ebp+var_4] edx +
jz loc_41BF93  +
mov eax [ebp+var_8] +
push dword ptr [eax]  +
mov eax [ebp+arg_4] +
push dword ptr [eax]  +
push offset aSOptionWSDoesn  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call ds:fwprintf  +
mov eax dword_431F64 +
add esp 10h +
mov ecx eax +
lea esi [ecx+2] +
mov dx [ecx] +
add ecx 2 +
test dx dx +
jnz loc_41BF98  +
sub ecx esi +
sar ecx 1 +
lea eax [eax+ecx*2] +
mov dword_431F64 eax +
jmp loc_41C0E9  +
cmp dword ptr [esi+4] 1 +
jnz loc_41BF31  +
mov ecx dword_431770 +
cmp ecx [ebp+arg_0] +
jge loc_41BFE1  +
mov edx [ebp+arg_4] +
mov edx [edx+ecx*4] +
inc ecx  +
mov lpWideCharStr edx +
mov dword_431770 ecx +
jmp loc_41BF31  +
cmp [ebp+var_4] edx +
jz loc_41C00C  +
mov eax [ebp+arg_4] +
push dword ptr [eax+ecx*4-4]  +
push dword ptr [eax]  +
push offset aSOptionSRequir  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call ds:fwprintf  +
mov eax dword_431F64 +
add esp 10h +
mov ecx eax +
lea esi [ecx+2] +
mov dx [ecx] +
add ecx 2 +
test dx dx +
jnz loc_41C011  +
jmp loc_41BFA3  +
mov eax [ecx+0Ch] +
jmp loc_41C0EC  +
and dword_431F64 0 +
push 57h  +
jmp loc_41C0EB  +
cmp word ptr [eax+2] 3Ah +
jnz loc_41C0AA  +
cmp word ptr [eax+4] 3Ah +
jnz loc_41C050  +
test cx cx +
jnz loc_41C055  +
and lpWideCharStr 0 +
jmp loc_41C0A3  +
test cx cx +
jz loc_41C05D  +
mov lpWideCharStr edx +
jmp loc_41C09C  +
cmp esi [ebp+arg_0] +
jnz loc_41C091  +
cmp [ebp+var_4] 0 +
jz loc_41C086  +
mov eax [ebp+arg_4] +
push edi  +
push dword ptr [eax]  +
push offset aSOptionRequire  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call ds:fwprintf  +
add esp 10h +
push 3Fh  +
mov dword_431778 edi +
pop ebx  +
jmp loc_41C0A3  +
mov eax [ebp+arg_4] +
mov eax [eax+esi*4] +
mov lpWideCharStr eax +
inc esi  +
mov dword_431770 esi +
and dword_431F64 0 +
movzx eax bx +
jmp loc_41C0EC  +
cmp [ebp+var_4] 0 +
jz loc_41C0E3  +
cmp dword_431F94 0 +
mov eax [ebp+arg_4] +
push edi  +
push dword ptr [eax]  +
jz loc_41C0CB  +
push offset aSIllegalOption  +
jmp loc_41C0D0  +
push offset aSInvalidOption  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call ds:fwprintf  +
add esp 10h +
mov dword_431778 edi +
push 3Fh  +
pop eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
push esi  +
push edi  +
cld   +
mov [ebp-4] eax +
mov esi [ebp-4] +
push 9  +
pop ecx  +
lea edi [ebp-28h] +
movs   +
mov eax [ebp-28h] +
and eax 0F9930520h +
or eax 19930520h +
mov [ebp-28h] eax +
lea eax [ebp-28h] +
mov [ebp-4] eax +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
mov eax [ebp-4] +
call ds:__CxxFrameHandler  +
add esp 10h +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_41C13E  +
***
cmp ecx dword_431000 +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
push esi  +
push edi  +
xor edi edi +
cmp eax edi +
jz loc_41C2E4  +
cmp [ebp+arg_0] edi +
jnz loc_41C2BD  +
call _errno  +
push 16h  +
pop esi  +
mov [eax] esi +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
call sub_41C1E4  +
add esp 14h +
mov eax esi +
jmp loc_41C2E6  +
cmp [ebp+arg_8] edi +
jz loc_41C2A2  +
cmp [ebp+arg_4] eax +
jnb loc_41C2D5  +
call _errno  +
push 22h  +
pop ecx  +
mov [eax] ecx +
mov esi ecx +
jmp loc_41C2AC  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call memmove  +
add esp 0Ch +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
push edi  +
mov ebp [ecx] +
push edi  +
mov ebp edx +
push ebx  +
push edx  +
push ecx  +
push [esp+8+arg_4]  +
call __local_unwind4  +
add esp 0Ch +
pop ebp  +
retn 8  +
***
mov edi edi +
call __SEH_prolog4  +
pop ecx  +
mov edi edi +
mov edi edi +
mov edi edi +
mov eax dword_431DC0 +
call __SEH_prolog4  +
mov eax 5A4Dh +
call sub_41CD84  +
jmp sub_41C6FB  +
***
or eax eax +
jnz loc_41CA41  +
mov ecx [esp+arg_8] +
mov eax [esp+arg_4] +
xor edx edx +
div  ecx +
mov ebx eax +
mov eax [esp+arg_0] +
div  ecx +
mov esi eax +
mov eax ebx +
mul  [esp+arg_8] +
mov ecx eax +
mov eax esi +
mul  [esp+arg_8] +
add edx ecx +
jmp loc_41CA88  +
mov ecx eax +
mov ebx [esp+arg_8] +
mov edx [esp+arg_4] +
mov eax [esp+arg_0] +
shr ecx 1 +
rcr ebx 1 +
shr edx 1 +
rcr eax 1 +
or ecx ecx +
jnz loc_41CA4F  +
div  ebx +
mov esi eax +
mul  [esp+arg_C] +
mov ecx eax +
mov eax [esp+arg_8] +
mul  esi +
add edx ecx +
jb loc_41CA7D  +
cmp edx [esp+arg_4] +
ja loc_41CA7D  +
jb loc_41CA86  +
cmp eax [esp+arg_0] +
jbe loc_41CA86  +
dec esi  +
sub eax [esp+arg_8] +
sbb edx [esp+arg_C] +
xor ebx ebx +
sub eax [esp+arg_0] +
sbb edx [esp+arg_4] +
neg edx  +
neg eax  +
sbb edx 0 +
mov ecx edx +
mov edx ebx +
mov ebx ecx +
mov ecx eax +
mov eax esi +
pop esi  +
retn 10h  +
***
mov ebx offset unk_431010 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_41CB06  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_41CB02  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
call __SEH_prolog4  +
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov edi edi +
mov edi edi +
xor eax eax +
retn   +
***
call ds:_controlfp  +
call __SEH_prolog4  +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_431000 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_41CDB6  +
test eax ebx +
jz loc_41CDB6  +
not eax  +
mov dword_431004 eax +
jmp loc_41CE11  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_41CDFD  +
test dword_431000 ebx +
jnz loc_41CE02  +
mov esi 0BB40E64Fh +
mov dword_431000 esi +
not esi  +
mov dword_431004 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov eax [esp+arg_4] +
mov dword ptr [ecx] offset off_428318 +
mov edi edi +
mov edi edi +
call __EH_prolog3  +
call __EH_prolog3  +
mov ecx [ecx+4] +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
call __EH_prolog3  +
mov edi edi +
mov edi edi +
mov edi edi +
call __EH_prolog3  +
call __EH_prolog3  +
mov edi edi +
call __EH_prolog3  +
mov edi edi +
mov edi ecx +
call ds:InterlockedIncrement  +
test eax eax +
jnz loc_41D2A0  +
push esi  +
mov esi offset CriticalSection +
push esi  +
call sub_41D73F  +
add esi 18h +
cmp esi offset unk_431E58 +
pop ecx  +
jl loc_41D28D  +
pop esi  +
mov eax edi +
pop edi  +
retn   +
***
mov edi edi +
mov eax [ecx] +
mov edi edi +
push esi  +
push 18h  +
mov esi ecx +
call ??2@YAPAXI@Z  +
push eax  +
mov [esi] eax +
call sub_41D73F  +
pop ecx  +
pop ecx  +
mov eax esi +
pop esi  +
retn   +
***
pop ecx  +
pop ecx  +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_431EA0 +
cmp eax 0Ah +
jnz loc_41D709  +
pop ebp  +
jmp ds:abort  +
mov ecx [ebp+arg_0] +
mov dword_431EA4[eax*4] ecx +
inc eax  +
mov dword_431EA0 eax +
pop ebp  +
retn   +
***
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpCriticalSection]  +
call ds:LeaveCriticalSection  +
pop ebp  +
retn   +
***
mov eax offset CoCreateInstance +
jmp $+5  +
push ecx  +
push edx  +
push eax  +
push offset ole32_dll_import_table  +
call sub_41D7DA  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov eax offset CoInitialize +
jmp loc_41D790  +
***
mov eax offset SysAllocString +
jmp $+5  +
push ecx  +
push edx  +
push eax  +
push offset OLEAUT32_dll_import_table  +
call sub_41D7DA  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov eax offset VariantClear +
jmp loc_41D7B5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
push ebx  +
mov eax offset __ImageBase +
push esi  +
mov esi [ebp+arg_0] +
mov edx [esi+8] +
mov ecx [esi+4] +
mov ebx [esi+0Ch] +
add edx eax +
push edi  +
mov edi [esi+14h] +
add edi eax +
add ecx eax +
mov [ebp+Target] edx +
mov edx [esi+10h] +
add ebx eax +
add edx eax +
mov eax [esi+1Ch] +
mov [ebp+var_4] eax +
mov eax [ebp+Arguments] +
mov [ebp+lpLibFileName] ecx +
xor ecx ecx +
mov [ebp+var_C] edi +
mov [ebp+var_3C] eax +
xor eax eax +
test dword ptr [esi] 1 +
lea edi [ebp+lpProcName] +
mov [ebp+var_44] 24h +
mov [ebp+var_40] esi +
mov [ebp+var_34] ecx +
stos   +
mov [ebp+var_2C] ecx +
mov [ebp+var_28] ecx +
mov [ebp+var_24] ecx +
jnz loc_41D860  +
lea eax [ebp+var_44] +
mov [ebp+Arguments] eax +
lea eax [ebp+Arguments] +
push eax  +
push 1  +
push ecx  +
push 0C06D0057h  +
call ds:RaiseException  +
xor eax eax +
jmp loc_41DA10  +
mov eax [ebp+Target] +
mov edi [eax] +
mov eax [ebp+Arguments] +
sub eax ebx +
sar eax 2 +
shl eax 2 +
add edx eax +
mov edx [edx] +
mov [ebp+arg_0] eax +
mov eax edx +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+var_34] eax +
lea eax (__ImageBase+2)[edx] +
jnz loc_41D88F  +
movzx eax dx +
mov [ebp+lpProcName] eax +
mov eax dword_431F00 +
xor ebx ebx +
cmp eax ecx +
jz loc_41D8AE  +
lea edx [ebp+var_44] +
push edx  +
push ecx  +
call eax  +
mov ebx eax +
test ebx ebx +
jnz loc_41D9F3  +
test edi edi +
jnz loc_41D958  +
mov eax dword_431F00 +
test eax eax +
jz loc_41D8CD  +
lea ecx [ebp+var_44] +
push ecx  +
push 1  +
call eax  +
mov edi eax +
test edi edi +
jnz loc_41D91D  +
push [ebp+lpLibFileName]  +
call ds:LoadLibraryA  +
mov edi eax +
test edi edi +
jnz loc_41D91D  +
call ds:GetLastError  +
mov [ebp+var_24] eax +
mov eax dword_431EFC +
test eax eax +
jz loc_41D8FC  +
lea ecx [ebp+var_44] +
push ecx  +
push 3  +
call eax  +
mov edi eax +
test edi edi +
jnz loc_41D91D  +
lea eax [ebp+var_44] +
mov [ebp+Arguments] eax +
lea eax [ebp+Arguments] +
push eax  +
push 1  +
push 0  +
push 0C06D007Eh  +
call ds:RaiseException  +
mov eax [ebp+var_28] +
jmp loc_41DA10  +
push edi  +
push [ebp+Target]  +
call ds:InterlockedExchange  +
cmp eax edi +
jz loc_41D951  +
cmp dword ptr [esi+18h] 0 +
jz loc_41D958  +
push 8  +
push 40h  +
call ds:LocalAlloc  +
test eax eax +
jz loc_41D958  +
mov [eax+4] esi +
mov ecx dword_431EF8 +
mov [eax] ecx +
mov dword_431EF8 eax +
jmp loc_41D958  +
push edi  +
call ds:FreeLibrary  +
mov eax dword_431F00 +
mov [ebp+var_2C] edi +
test eax eax +
jz loc_41D96E  +
lea ecx [ebp+var_44] +
push ecx  +
push 2  +
call eax  +
mov ebx eax +
test ebx ebx +
jnz loc_41D9EE  +
cmp [esi+14h] ebx +
jz loc_41D9A3  +
cmp [esi+1Ch] ebx +
jz loc_41D9A3  +
mov eax [edi+3Ch] +
add eax edi +
cmp dword ptr [eax] 4550h +
jnz loc_41D9A3  +
mov ecx [ebp+var_4] +
cmp [eax+8] ecx +
jnz loc_41D9A3  +
cmp edi [eax+34h] +
jnz loc_41D9A3  +
mov eax [ebp+var_C] +
mov ecx [ebp+arg_0] +
mov ebx [ecx+eax] +
test ebx ebx +
jnz loc_41D9EE  +
push [ebp+lpProcName]  +
push edi  +
call ds:GetProcAddress  +
mov ebx eax +
test ebx ebx +
jnz loc_41D9EE  +
call ds:GetLastError  +
mov [ebp+var_24] eax +
mov eax dword_431EFC +
test eax eax +
jz loc_41D9CF  +
lea ecx [ebp+var_44] +
push ecx  +
push 4  +
call eax  +
mov ebx eax +
test ebx ebx +
jnz loc_41D9EE  +
lea eax [ebp+var_44] +
mov [ebp+arg_0] eax +
lea eax [ebp+arg_0] +
push eax  +
push 1  +
push ebx  +
push 0C06D007Fh  +
call ds:RaiseException  +
mov ebx [ebp+var_28] +
mov eax [ebp+Arguments] +
mov [eax] ebx +
mov eax dword_431F00 +
test eax eax +
jz loc_41DA0E  +
and [ebp+var_24] 0 +
lea ecx [ebp+var_44] +
push ecx  +
push 5  +
mov [ebp+var_2C] edi +
mov [ebp+var_28] ebx +
call eax  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
push ecx  +
push ebx  +
push esi  +
push edi  +
pushf   +
push ecx  +
clc   +
cld   +
mov edi [ebp+arg_0] +
mov esi [ebp+arg_4] +
mov ecx 8 +
lods   +
adc eax [edi] +
stos   +
loop loc_41DA46  +
pop ecx  +
popf   +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
leave   +
retn   +
***
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_8] +
mov edx [esi+4] +
mov ecx [esi] +
mov edi [ebp+arg_4] +
mov esi [ebp+arg_0] +
mov ebx [esi] +
add ebx ecx +
movzx eax bl +
xor edx [edi+eax*4] +
movzx eax bh +
xor edx [edi+eax*4+400h] +
shr ebx 10h +
movzx eax bh +
xor edx [edi+eax*4+0C00h] +
and ebx 0FFh +
xor edx [edi+ebx*4+800h] +
mov ebx [esi+4] +
add ebx edx +
movzx eax bl +
xor ecx [edi+eax*4] +
movzx eax bh +
xor ecx [edi+eax*4+400h] +
shr ebx 10h +
movzx eax bh +
xor ecx [edi+eax*4+0C00h] +
and ebx 0FFh +
xor ecx [edi+ebx*4+800h] +
mov ebx [esi+8] +
add ebx ecx +
movzx eax bl +
xor edx [edi+eax*4] +
movzx eax bh +
xor edx [edi+eax*4+400h] +
shr ebx 10h +
movzx eax bh +
xor edx [edi+eax*4+0C00h] +
and ebx 0FFh +
xor edx [edi+ebx*4+800h] +
mov ebx [esi+0Ch] +
add ebx edx +
movzx eax bl +
xor ecx [edi+eax*4] +
movzx eax bh +
xor ecx [edi+eax*4+400h] +
shr ebx 10h +
movzx eax bh +
xor ecx [edi+eax*4+0C00h] +
and ebx 0FFh +
xor ecx [edi+ebx*4+800h] +
mov ebx [esi+10h] +
add ebx ecx +
movzx eax bl +
xor edx [edi+eax*4] +
movzx eax bh +
xor edx [edi+eax*4+400h] +
shr ebx 10h +
movzx eax bh +
xor edx [edi+eax*4+0C00h] +
and ebx 0FFh +
xor edx [edi+ebx*4+800h] +
mov ebx [esi+14h] +
add ebx edx +
movzx eax bl +
xor ecx [edi+eax*4] +
movzx eax bh +
xor ecx [edi+eax*4+400h] +
shr ebx 10h +
movzx eax bh +
xor ecx [edi+eax*4+0C00h] +
and ebx 0FFh +
xor ecx [edi+ebx*4+800h] +
mov ebx [esi+18h] +
add ebx ecx +
movzx eax bl +
xor edx [edi+eax*4] +
movzx eax bh +
xor edx [edi+eax*4+400h] +
shr ebx 10h +
movzx eax bh +
xor edx [edi+eax*4+0C00h] +
and ebx 0FFh +
xor edx [edi+ebx*4+800h] +
mov ebx [esi+1Ch] +
add ebx edx +
movzx eax bl +
xor ecx [edi+eax*4] +
movzx eax bh +
xor ecx [edi+eax*4+400h] +
shr ebx 10h +
movzx eax bh +
xor ecx [edi+eax*4+0C00h] +
and ebx 0FFh +
xor ecx [edi+ebx*4+800h] +
mov ebx [esi] +
add ebx ecx +
movzx eax bl +
xor edx [edi+eax*4] +
movzx eax bh +
xor edx [edi+eax*4+400h] +
shr ebx 10h +
movzx eax bh +
xor edx [edi+eax*4+0C00h] +
and ebx 0FFh +
xor edx [edi+ebx*4+800h] +
mov ebx [esi+4] +
add ebx edx +
movzx eax bl +
xor ecx [edi+eax*4] +
movzx eax bh +
xor ecx [edi+eax*4+400h] +
shr ebx 10h +
movzx eax bh +
xor ecx [edi+eax*4+0C00h] +
and ebx 0FFh +
xor ecx [edi+ebx*4+800h] +
mov ebx [esi+8] +
add ebx ecx +
movzx eax bl +
xor edx [edi+eax*4] +
movzx eax bh +
xor edx [edi+eax*4+400h] +
shr ebx 10h +
movzx eax bh +
xor edx [edi+eax*4+0C00h] +
and ebx 0FFh +
xor edx [edi+ebx*4+800h] +
mov ebx [esi+0Ch] +
add ebx edx +
movzx eax bl +
xor ecx [edi+eax*4] +
movzx eax bh +
xor ecx [edi+eax*4+400h] +
shr ebx 10h +
movzx eax bh +
xor ecx [edi+eax*4+0C00h] +
and ebx 0FFh +
xor ecx [edi+ebx*4+800h] +
mov ebx [esi+10h] +
add ebx ecx +
movzx eax bl +
xor edx [edi+eax*4] +
movzx eax bh +
xor edx [edi+eax*4+400h] +
shr ebx 10h +
movzx eax bh +
xor edx [edi+eax*4+0C00h] +
and ebx 0FFh +
xor edx [edi+ebx*4+800h] +
mov ebx [esi+14h] +
add ebx edx +
movzx eax bl +
xor ecx [edi+eax*4] +
movzx eax bh +
xor ecx [edi+eax*4+400h] +
shr ebx 10h +
movzx eax bh +
xor ecx [edi+eax*4+0C00h] +
and ebx 0FFh +
xor ecx [edi+ebx*4+800h] +
mov ebx [esi+18h] +
add ebx ecx +
movzx eax bl +
xor edx [edi+eax*4] +
movzx eax bh +
xor edx [edi+eax*4+400h] +
shr ebx 10h +
movzx eax bh +
xor edx [edi+eax*4+0C00h] +
and ebx 0FFh +
xor edx [edi+ebx*4+800h] +
mov ebx [esi+1Ch] +
add ebx edx +
movzx eax bl +
xor ecx [edi+eax*4] +
movzx eax bh +
xor ecx [edi+eax*4+400h] +
shr ebx 10h +
movzx eax bh +
xor ecx [edi+eax*4+0C00h] +
and ebx 0FFh +
xor ecx [edi+ebx*4+800h] +
mov ebx [esi] +
add ebx ecx +
movzx eax bl +
xor edx [edi+eax*4] +
movzx eax bh +
xor edx [edi+eax*4+400h] +
shr ebx 10h +
movzx eax bh +
xor edx [edi+eax*4+0C00h] +
and ebx 0FFh +
xor edx [edi+ebx*4+800h] +
mov ebx [esi+4] +
add ebx edx +
movzx eax bl +
xor ecx [edi+eax*4] +
movzx eax bh +
xor ecx [edi+eax*4+400h] +
shr ebx 10h +
movzx eax bh +
xor ecx [edi+eax*4+0C00h] +
and ebx 0FFh +
xor ecx [edi+ebx*4+800h] +
mov ebx [esi+8] +
add ebx ecx +
movzx eax bl +
xor edx [edi+eax*4] +
movzx eax bh +
xor edx [edi+eax*4+400h] +
shr ebx 10h +
movzx eax bh +
xor edx [edi+eax*4+0C00h] +
and ebx 0FFh +
xor edx [edi+ebx*4+800h] +
mov ebx [esi+0Ch] +
add ebx edx +
movzx eax bl +
xor ecx [edi+eax*4] +
movzx eax bh +
xor ecx [edi+eax*4+400h] +
shr ebx 10h +
movzx eax bh +
xor ecx [edi+eax*4+0C00h] +
and ebx 0FFh +
xor ecx [edi+ebx*4+800h] +
mov ebx [esi+10h] +
add ebx ecx +
movzx eax bl +
xor edx [edi+eax*4] +
movzx eax bh +
xor edx [edi+eax*4+400h] +
shr ebx 10h +
movzx eax bh +
xor edx [edi+eax*4+0C00h] +
and ebx 0FFh +
xor edx [edi+ebx*4+800h] +
mov ebx [esi+14h] +
add ebx edx +
movzx eax bl +
xor ecx [edi+eax*4] +
movzx eax bh +
xor ecx [edi+eax*4+400h] +
shr ebx 10h +
movzx eax bh +
xor ecx [edi+eax*4+0C00h] +
and ebx 0FFh +
xor ecx [edi+ebx*4+800h] +
mov ebx [esi+18h] +
add ebx ecx +
movzx eax bl +
xor edx [edi+eax*4] +
movzx eax bh +
xor edx [edi+eax*4+400h] +
shr ebx 10h +
movzx eax bh +
xor edx [edi+eax*4+0C00h] +
and ebx 0FFh +
xor edx [edi+ebx*4+800h] +
mov ebx [esi+1Ch] +
add ebx edx +
movzx eax bl +
xor ecx [edi+eax*4] +
movzx eax bh +
xor ecx [edi+eax*4+400h] +
shr ebx 10h +
movzx eax bh +
xor ecx [edi+eax*4+0C00h] +
and ebx 0FFh +
xor ecx [edi+ebx*4+800h] +
mov ebx [esi+1Ch] +
add ebx ecx +
movzx eax bl +
xor edx [edi+eax*4] +
movzx eax bh +
xor edx [edi+eax*4+400h] +
shr ebx 10h +
movzx eax bh +
xor edx [edi+eax*4+0C00h] +
and ebx 0FFh +
xor edx [edi+ebx*4+800h] +
mov ebx [esi+18h] +
add ebx edx +
movzx eax bl +
xor ecx [edi+eax*4] +
movzx eax bh +
xor ecx [edi+eax*4+400h] +
shr ebx 10h +
movzx eax bh +
xor ecx [edi+eax*4+0C00h] +
and ebx 0FFh +
xor ecx [edi+ebx*4+800h] +
mov ebx [esi+14h] +
add ebx ecx +
movzx eax bl +
xor edx [edi+eax*4] +
movzx eax bh +
xor edx [edi+eax*4+400h] +
shr ebx 10h +
movzx eax bh +
xor edx [edi+eax*4+0C00h] +
and ebx 0FFh +
xor edx [edi+ebx*4+800h] +
mov ebx [esi+10h] +
add ebx edx +
movzx eax bl +
xor ecx [edi+eax*4] +
movzx eax bh +
xor ecx [edi+eax*4+400h] +
shr ebx 10h +
movzx eax bh +
xor ecx [edi+eax*4+0C00h] +
and ebx 0FFh +
xor ecx [edi+ebx*4+800h] +
mov ebx [esi+0Ch] +
add ebx ecx +
movzx eax bl +
xor edx [edi+eax*4] +
movzx eax bh +
xor edx [edi+eax*4+400h] +
shr ebx 10h +
movzx eax bh +
xor edx [edi+eax*4+0C00h] +
and ebx 0FFh +
xor edx [edi+ebx*4+800h] +
mov ebx [esi+8] +
add ebx edx +
movzx eax bl +
xor ecx [edi+eax*4] +
movzx eax bh +
xor ecx [edi+eax*4+400h] +
shr ebx 10h +
movzx eax bh +
xor ecx [edi+eax*4+0C00h] +
and ebx 0FFh +
xor ecx [edi+ebx*4+800h] +
mov ebx [esi+4] +
add ebx ecx +
movzx eax bl +
xor edx [edi+eax*4] +
movzx eax bh +
xor edx [edi+eax*4+400h] +
shr ebx 10h +
movzx eax bh +
xor edx [edi+eax*4+0C00h] +
and ebx 0FFh +
xor edx [edi+ebx*4+800h] +
mov ebx [esi] +
add ebx edx +
movzx eax bl +
xor ecx [edi+eax*4] +
movzx eax bh +
xor ecx [edi+eax*4+400h] +
shr ebx 10h +
movzx eax bh +
xor ecx [edi+eax*4+0C00h] +
and ebx 0FFh +
xor ecx [edi+ebx*4+800h] +
mov esi [ebp+arg_8] +
mov [esi] edx +
mov [esi+4] ecx +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
leave   +
retn   +
***
push ebx  +
push esi  +
push edi  +
push ebp  +
mov ecx [ebp+arg_0] +
mov edx [ebp+arg_4] +
mov ebx dword ptr [ebp+arg_8] +
mov ebp dword ptr [ebp+arg_8+4] +
mov eax esp +
sub esp 4 +
and esp 0FFFFFFF0h +
mov [esp+14h+var_14] eax +
sub esp 44h +
add ebp 0Fh +
and ebp 0FFFFFFF0h +
movdqu xmm0 qword ptr [ecx] +
movdqu xmm1 qword ptr [ecx+10h] +
movdqu xmm2 qword ptr [edx] +
movdqu xmm3 qword ptr [edx+10h] +
mov dword ptr [ebp+arg_38] 0FF00FF00h +
mov dword ptr [ebp+arg_38+4] 0FF00FF00h +
mov dword ptr [ebp+arg_40] 0FF00FFh +
mov dword ptr [ebp+arg_40+4] 0FF00FFh +
mov dword ptr [ebp+arg_48] 0FFFF00h +
mov dword ptr [ebp+arg_48+4] 0FF0000FFh +
mov dword ptr [ebp+arg_48+8] 0FFh +
mov dword ptr [ebp+arg_48+0Ch] 0FF00FFFFh +
movq mm0 qword ptr [ecx+18h] +
movq mm1 qword ptr [ecx] +
pxor mm1 qword ptr [ecx+8] +
movq mm2 qword ptr [edx+18h] +
movq mm3 qword ptr [edx] +
pxor mm3 qword ptr [edx+8] +
mov [ebp+arg_98] ecx +
mov dword ptr [ebp+arg_58] 0FF00FFh +
mov dword ptr [ebp+arg_58+4] 0FF00FFh +
mov dword ptr [ebp+arg_58+8] 0FFFF00h +
mov dword ptr [ebp+arg_58+0Ch] 0FF0000FFh +
mov dword ptr [ebp+arg_68] 0FFh +
mov dword ptr [ebp+arg_68+4] 0FF00FFFFh +
mov dword ptr [ebp+arg_70] 0FFFFFFFFh +
mov [ebp+arg_74] 0FFFFFFFFh +
mov [ebp+arg_9C] edx +
movdqu xmm4 qword ptr [ecx+8] +
movdqu xmm5 qword ptr [edx+8] +
movq qword ptr [ebp+arg_28] mm0 +
movq qword ptr [ebp+arg_28+8] mm1 +
movq mm4 qword ptr [ebp+arg_48] +
movq mm5 qword ptr [ebp+arg_48+8] +
pxor mm4 mm2 +
pxor mm5 mm3 +
movq qword ptr [ebp+arg_48] mm4 +
movq qword ptr [ebp+arg_48+8] mm5 +
pxor mm0 mm2 +
pxor mm1 mm3 +
movdqa xmm6 xmm0 +
movdqa xmm7 xmm4 +
pxor mm0 qword ptr [ebp+arg_58] +
pxor mm1 qword ptr [ebp+arg_58+8] +
movq qword ptr [ebp+arg_58] mm0 +
movq qword ptr [ebp+arg_58+8] mm1 +
pxor xmm6 xmm2 +
pxor xmm7 xmm3 +
mov [ebp+arg_A0] ebx +
movdqa oword ptr [ebp+0] xmm6 +
movdqa oword ptr [ebp+arg_18] xmm7 +
movdqa xmm6 xmm2 +
pxor xmm7 xmm0 +
pxor xmm6 xmm5 +
movdqa xmm5 xmm6 +
pxor xmm5 oword ptr [ebp+arg_28] +
movdqa oword ptr [ebp+arg_28] xmm5 +
pxor xmm7 oword ptr [ebp+arg_48] +
pxor xmm6 xmm1 +
pxor xmm6 oword ptr [ebp+arg_38] +
movdqa oword ptr [ebp+arg_48] xmm7 +
movdqa oword ptr [ebp+arg_38] xmm6 +
movdqa xmm7 xmm3 +
pxor xmm1 xmm3 +
mov [esp+58h+var_58] ebp +
pxor xmm2 xmm4 +
pxor xmm7 oword ptr [ebp+arg_58] +
pxor xmm2 xmm1 +
pxor xmm2 oword ptr [ebp+arg_68] +
movdqa oword ptr [ebp+arg_8] xmm1 +
movdqa oword ptr [ebp+arg_58] xmm7 +
movdqa oword ptr [ebp+arg_68] xmm2 +
mov al byte ptr [ebp+arg_8] +
mov bl byte ptr [ebp+arg_8+1] +
mov cl byte ptr [ebp+arg_8+2] +
mov dl byte ptr [ebp+arg_8+3] +
mov ah byte ptr [ebp+arg_8+8] +
mov bh byte ptr [ebp+arg_8+9] +
shl eax 10h +
mov ch byte ptr [ebp+arg_8+0Ah] +
mov dh byte ptr [ebp+arg_8+0Bh] +
shl ebx 10h +
mov al [ebp+0] +
shl ecx 10h +
mov bl [ebp+1] +
shl edx 10h +
mov cl [ebp+2] +
mov dl [ebp+3] +
mov ah byte ptr [ebp+arg_0] +
mov bh byte ptr [ebp+arg_0+1] +
mov ch byte ptr [ebp+arg_0+2] +
mov dh byte ptr [ebp+arg_0+3] +
mov dword ptr [esp+58h+var_54] eax +
mov dword ptr [esp+58h+var_54+4] ebx +
mov dword ptr [esp+58h+var_54+8] ecx +
mov dword ptr [esp+58h+var_54+0Ch] edx +
mov al byte ptr [ebp+arg_8+4] +
mov bl byte ptr [ebp+arg_8+5] +
mov cl byte ptr [ebp+arg_8+6] +
mov dl byte ptr [ebp+arg_8+7] +
mov ah byte ptr [ebp+arg_8+0Ch] +
mov bh byte ptr [ebp+arg_8+0Dh] +
shl eax 10h +
mov ch byte ptr [ebp+arg_8+0Eh] +
mov dh byte ptr [ebp+arg_8+0Fh] +
shl ebx 10h +
mov al [ebp+4] +
shl ecx 10h +
mov bl [ebp+5] +
shl edx 10h +
mov cl [ebp+6] +
mov dl [ebp+7] +
mov ah byte ptr [ebp+arg_4] +
mov bh byte ptr [ebp+arg_4+1] +
mov ch byte ptr [ebp+arg_4+2] +
mov dh byte ptr [ebp+arg_4+3] +
mov dword ptr [esp+58h+var_44] eax +
mov dword ptr [esp+58h+var_44+4] ebx +
mov dword ptr [esp+58h+var_44+8] ecx +
mov dword ptr [esp+58h+var_44+0Ch] edx +
mov al byte ptr [ebp+arg_28] +
mov bl byte ptr [ebp+arg_28+1] +
mov cl byte ptr [ebp+arg_28+2] +
mov dl byte ptr [ebp+arg_28+3] +
mov ah byte ptr [ebp+arg_28+8] +
mov bh byte ptr [ebp+arg_28+9] +
shl eax 10h +
mov ch byte ptr [ebp+arg_28+0Ah] +
mov dh byte ptr [ebp+arg_28+0Bh] +
shl ebx 10h +
mov al byte ptr [ebp+arg_18] +
shl ecx 10h +
mov bl byte ptr [ebp+arg_18+1] +
shl edx 10h +
mov cl byte ptr [ebp+arg_18+2] +
mov dl byte ptr [ebp+arg_18+3] +
mov ah byte ptr [ebp+arg_18+8] +
mov bh byte ptr [ebp+arg_18+9] +
mov ch byte ptr [ebp+arg_18+0Ah] +
mov dh byte ptr [ebp+arg_18+0Bh] +
mov [esp+58h+var_34] eax +
mov [esp+28h] ebx +
mov [esp+58h+var_2C] ecx +
mov [esp+58h+var_28] edx +
mov al byte ptr [ebp+arg_28+4] +
mov bl byte ptr [ebp+arg_28+5] +
mov cl byte ptr [ebp+arg_28+6] +
mov dl byte ptr [ebp+arg_28+7] +
mov ah byte ptr [ebp+arg_28+0Ch] +
mov bh byte ptr [ebp+arg_28+0Dh] +
shl eax 10h +
mov ch byte ptr [ebp+arg_28+0Eh] +
mov dh byte ptr [ebp+arg_28+0Fh] +
shl ebx 10h +
mov al byte ptr [ebp+arg_18+4] +
shl ecx 10h +
mov bl byte ptr [ebp+arg_18+5] +
shl edx 10h +
mov cl byte ptr [ebp+arg_18+6] +
mov dl byte ptr [ebp+arg_18+7] +
mov ah byte ptr [ebp+arg_18+0Ch] +
mov bh byte ptr [ebp+arg_18+0Dh] +
mov ch byte ptr [ebp+arg_18+0Eh] +
mov dh byte ptr [ebp+arg_18+0Fh] +
mov [esp+58h+var_24] eax +
mov [esp+38h] ebx +
mov [esp+58h+var_1C] ecx +
mov [esp+58h+var_18] edx +
mov eax [ebp+arg_98] +
mov ecx [eax] +
mov edx [eax+4] +
mov esi [eax+8] +
mov edi [eax+0Ch] +
mov ebp [ebp+arg_A0] +
mov ebx dword ptr [esp+58h+var_54] +
add ebx ecx +
movzx eax bl +
xor edx [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor edx [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor edx [ebp+ebx*4+arg_7F8] +
mov ebx [esp+58h+var_34] +
add ebx esi +
xor edx [ebp+eax*4+arg_BF8] +
movzx eax bl +
xor edi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor edi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor edi [ebp+ebx*4+arg_7F8] +
mov ebx dword ptr [esp+58h+var_54+4] +
xor edi [ebp+eax*4+arg_BF8] +
add ebx edx +
movzx eax bl +
xor ecx [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor ecx [ebp+eax*4+arg_3F8] +
movzx eax bh +
xor ecx [ebp+eax*4+arg_BF8] +
and ebx 0FFh +
xor ecx [ebp+ebx*4+arg_7F8] +
mov ebx [esp+28h] +
add ebx edi +
movzx eax bl +
xor esi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor esi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor esi [ebp+eax*4+arg_BF8] +
mov eax dword ptr [esp+58h+var_54+8] +
xor esi [ebp+ebx*4+arg_7F8] +
add eax ecx +
movzx ebx al +
xor edx [ebp+ebx*4+0] +
movzx ebx ah +
shr eax 10h +
xor edx [ebp+ebx*4+arg_3F8] +
movzx ebx ah +
and eax 0FFh +
xor edx [ebp+ebx*4+arg_BF8] +
mov ebx [esp+58h+var_2C] +
xor edx [ebp+eax*4+arg_7F8] +
add ebx esi +
movzx eax bl +
xor edi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor edi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor edi [ebp+ebx*4+arg_7F8] +
mov ebx dword ptr [esp+58h+var_54+0Ch] +
xor edi [ebp+eax*4+arg_BF8] +
add ebx edx +
movzx eax bl +
xor ecx [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor ecx [ebp+eax*4+arg_3F8] +
movzx eax bh +
xor ecx [ebp+eax*4+arg_BF8] +
and ebx 0FFh +
xor ecx [ebp+ebx*4+arg_7F8] +
mov ebx [esp+58h+var_28] +
add ebx edi +
movzx eax bl +
xor esi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor esi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor esi [ebp+eax*4+arg_BF8] +
xor esi [ebp+ebx*4+arg_7F8] +
mov ebx dword ptr [esp+58h+var_44] +
add ebx ecx +
movzx eax bl +
xor edx [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor edx [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor edx [ebp+ebx*4+arg_7F8] +
mov ebx [esp+58h+var_24] +
add ebx esi +
xor edx [ebp+eax*4+arg_BF8] +
movzx eax bl +
xor edi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor edi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor edi [ebp+ebx*4+arg_7F8] +
mov ebx dword ptr [esp+58h+var_44+4] +
xor edi [ebp+eax*4+arg_BF8] +
add ebx edx +
movzx eax bl +
xor ecx [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor ecx [ebp+eax*4+arg_3F8] +
movzx eax bh +
xor ecx [ebp+eax*4+arg_BF8] +
and ebx 0FFh +
xor ecx [ebp+ebx*4+arg_7F8] +
mov ebx [esp+38h] +
add ebx edi +
movzx eax bl +
xor esi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor esi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor esi [ebp+eax*4+arg_BF8] +
mov eax dword ptr [esp+58h+var_44+8] +
xor esi [ebp+ebx*4+arg_7F8] +
add eax ecx +
movzx ebx al +
xor edx [ebp+ebx*4+0] +
movzx ebx ah +
shr eax 10h +
xor edx [ebp+ebx*4+arg_3F8] +
movzx ebx ah +
and eax 0FFh +
xor edx [ebp+ebx*4+arg_BF8] +
mov ebx [esp+58h+var_1C] +
xor edx [ebp+eax*4+arg_7F8] +
add ebx esi +
movzx eax bl +
xor edi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor edi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor edi [ebp+ebx*4+arg_7F8] +
mov ebx dword ptr [esp+58h+var_44+0Ch] +
xor edi [ebp+eax*4+arg_BF8] +
add ebx edx +
movzx eax bl +
xor ecx [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor ecx [ebp+eax*4+arg_3F8] +
movzx eax bh +
xor ecx [ebp+eax*4+arg_BF8] +
and ebx 0FFh +
xor ecx [ebp+ebx*4+arg_7F8] +
mov ebx [esp+58h+var_18] +
add ebx edi +
movzx eax bl +
xor esi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor esi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor esi [ebp+eax*4+arg_BF8] +
xor esi [ebp+ebx*4+arg_7F8] +
mov ebx dword ptr [esp+58h+var_54] +
add ebx ecx +
movzx eax bl +
xor edx [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor edx [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor edx [ebp+ebx*4+arg_7F8] +
mov ebx [esp+58h+var_34] +
add ebx esi +
xor edx [ebp+eax*4+arg_BF8] +
movzx eax bl +
xor edi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor edi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor edi [ebp+ebx*4+arg_7F8] +
mov ebx dword ptr [esp+58h+var_54+4] +
xor edi [ebp+eax*4+arg_BF8] +
add ebx edx +
movzx eax bl +
xor ecx [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor ecx [ebp+eax*4+arg_3F8] +
movzx eax bh +
xor ecx [ebp+eax*4+arg_BF8] +
and ebx 0FFh +
xor ecx [ebp+ebx*4+arg_7F8] +
mov ebx [esp+28h] +
add ebx edi +
movzx eax bl +
xor esi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor esi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor esi [ebp+eax*4+arg_BF8] +
mov eax dword ptr [esp+58h+var_54+8] +
xor esi [ebp+ebx*4+arg_7F8] +
add eax ecx +
movzx ebx al +
xor edx [ebp+ebx*4+0] +
movzx ebx ah +
shr eax 10h +
xor edx [ebp+ebx*4+arg_3F8] +
movzx ebx ah +
and eax 0FFh +
xor edx [ebp+ebx*4+arg_BF8] +
mov ebx [esp+58h+var_2C] +
xor edx [ebp+eax*4+arg_7F8] +
add ebx esi +
movzx eax bl +
xor edi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor edi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor edi [ebp+ebx*4+arg_7F8] +
mov ebx dword ptr [esp+58h+var_54+0Ch] +
xor edi [ebp+eax*4+arg_BF8] +
add ebx edx +
movzx eax bl +
xor ecx [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor ecx [ebp+eax*4+arg_3F8] +
movzx eax bh +
xor ecx [ebp+eax*4+arg_BF8] +
and ebx 0FFh +
xor ecx [ebp+ebx*4+arg_7F8] +
mov ebx [esp+58h+var_28] +
add ebx edi +
movzx eax bl +
xor esi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor esi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor esi [ebp+eax*4+arg_BF8] +
xor esi [ebp+ebx*4+arg_7F8] +
mov ebx dword ptr [esp+58h+var_44] +
add ebx ecx +
movzx eax bl +
xor edx [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor edx [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor edx [ebp+ebx*4+arg_7F8] +
mov ebx [esp+58h+var_24] +
add ebx esi +
xor edx [ebp+eax*4+arg_BF8] +
movzx eax bl +
xor edi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor edi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor edi [ebp+ebx*4+arg_7F8] +
mov ebx dword ptr [esp+58h+var_44+4] +
xor edi [ebp+eax*4+arg_BF8] +
add ebx edx +
movzx eax bl +
xor ecx [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor ecx [ebp+eax*4+arg_3F8] +
movzx eax bh +
xor ecx [ebp+eax*4+arg_BF8] +
and ebx 0FFh +
xor ecx [ebp+ebx*4+arg_7F8] +
mov ebx [esp+38h] +
add ebx edi +
movzx eax bl +
xor esi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor esi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor esi [ebp+eax*4+arg_BF8] +
mov eax dword ptr [esp+58h+var_44+8] +
xor esi [ebp+ebx*4+arg_7F8] +
add eax ecx +
movzx ebx al +
xor edx [ebp+ebx*4+0] +
movzx ebx ah +
shr eax 10h +
xor edx [ebp+ebx*4+arg_3F8] +
movzx ebx ah +
and eax 0FFh +
xor edx [ebp+ebx*4+arg_BF8] +
mov ebx [esp+58h+var_1C] +
xor edx [ebp+eax*4+arg_7F8] +
add ebx esi +
movzx eax bl +
xor edi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor edi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor edi [ebp+ebx*4+arg_7F8] +
mov ebx dword ptr [esp+58h+var_44+0Ch] +
xor edi [ebp+eax*4+arg_BF8] +
add ebx edx +
movzx eax bl +
xor ecx [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor ecx [ebp+eax*4+arg_3F8] +
movzx eax bh +
xor ecx [ebp+eax*4+arg_BF8] +
and ebx 0FFh +
xor ecx [ebp+ebx*4+arg_7F8] +
mov ebx [esp+58h+var_18] +
add ebx edi +
movzx eax bl +
xor esi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor esi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor esi [ebp+eax*4+arg_BF8] +
xor esi [ebp+ebx*4+arg_7F8] +
mov ebx dword ptr [esp+58h+var_54] +
add ebx ecx +
movzx eax bl +
xor edx [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor edx [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor edx [ebp+ebx*4+arg_7F8] +
mov ebx [esp+58h+var_34] +
add ebx esi +
xor edx [ebp+eax*4+arg_BF8] +
movzx eax bl +
xor edi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor edi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor edi [ebp+ebx*4+arg_7F8] +
mov ebx dword ptr [esp+58h+var_54+4] +
xor edi [ebp+eax*4+arg_BF8] +
add ebx edx +
movzx eax bl +
xor ecx [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor ecx [ebp+eax*4+arg_3F8] +
movzx eax bh +
xor ecx [ebp+eax*4+arg_BF8] +
and ebx 0FFh +
xor ecx [ebp+ebx*4+arg_7F8] +
mov ebx [esp+28h] +
add ebx edi +
movzx eax bl +
xor esi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor esi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor esi [ebp+eax*4+arg_BF8] +
mov eax dword ptr [esp+58h+var_54+8] +
xor esi [ebp+ebx*4+arg_7F8] +
add eax ecx +
movzx ebx al +
xor edx [ebp+ebx*4+0] +
movzx ebx ah +
shr eax 10h +
xor edx [ebp+ebx*4+arg_3F8] +
movzx ebx ah +
and eax 0FFh +
xor edx [ebp+ebx*4+arg_BF8] +
mov ebx [esp+58h+var_2C] +
xor edx [ebp+eax*4+arg_7F8] +
add ebx esi +
movzx eax bl +
xor edi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor edi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor edi [ebp+ebx*4+arg_7F8] +
mov ebx dword ptr [esp+58h+var_54+0Ch] +
xor edi [ebp+eax*4+arg_BF8] +
add ebx edx +
movzx eax bl +
xor ecx [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor ecx [ebp+eax*4+arg_3F8] +
movzx eax bh +
xor ecx [ebp+eax*4+arg_BF8] +
and ebx 0FFh +
xor ecx [ebp+ebx*4+arg_7F8] +
mov ebx [esp+58h+var_28] +
add ebx edi +
movzx eax bl +
xor esi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor esi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor esi [ebp+eax*4+arg_BF8] +
xor esi [ebp+ebx*4+arg_7F8] +
mov ebx dword ptr [esp+58h+var_44] +
add ebx ecx +
movzx eax bl +
xor edx [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor edx [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor edx [ebp+ebx*4+arg_7F8] +
mov ebx [esp+58h+var_24] +
add ebx esi +
xor edx [ebp+eax*4+arg_BF8] +
movzx eax bl +
xor edi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor edi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor edi [ebp+ebx*4+arg_7F8] +
mov ebx dword ptr [esp+58h+var_44+4] +
xor edi [ebp+eax*4+arg_BF8] +
add ebx edx +
movzx eax bl +
xor ecx [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor ecx [ebp+eax*4+arg_3F8] +
movzx eax bh +
xor ecx [ebp+eax*4+arg_BF8] +
and ebx 0FFh +
xor ecx [ebp+ebx*4+arg_7F8] +
mov ebx [esp+38h] +
add ebx edi +
movzx eax bl +
xor esi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor esi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor esi [ebp+eax*4+arg_BF8] +
mov eax dword ptr [esp+58h+var_44+8] +
xor esi [ebp+ebx*4+arg_7F8] +
add eax ecx +
movzx ebx al +
xor edx [ebp+ebx*4+0] +
movzx ebx ah +
shr eax 10h +
xor edx [ebp+ebx*4+arg_3F8] +
movzx ebx ah +
and eax 0FFh +
xor edx [ebp+ebx*4+arg_BF8] +
mov ebx [esp+58h+var_1C] +
xor edx [ebp+eax*4+arg_7F8] +
add ebx esi +
movzx eax bl +
xor edi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor edi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor edi [ebp+ebx*4+arg_7F8] +
mov ebx dword ptr [esp+58h+var_44+0Ch] +
xor edi [ebp+eax*4+arg_BF8] +
add ebx edx +
movzx eax bl +
xor ecx [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor ecx [ebp+eax*4+arg_3F8] +
movzx eax bh +
xor ecx [ebp+eax*4+arg_BF8] +
and ebx 0FFh +
xor ecx [ebp+ebx*4+arg_7F8] +
mov ebx [esp+58h+var_18] +
add ebx edi +
movzx eax bl +
xor esi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor esi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor esi [ebp+eax*4+arg_BF8] +
xor esi [ebp+ebx*4+arg_7F8] +
mov ebx dword ptr [esp+58h+var_44+0Ch] +
add ebx ecx +
movzx eax bl +
xor edx [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor edx [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor edx [ebp+ebx*4+arg_7F8] +
mov ebx [esp+58h+var_18] +
add ebx esi +
xor edx [ebp+eax*4+arg_BF8] +
movzx eax bl +
xor edi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor edi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor edi [ebp+ebx*4+arg_7F8] +
mov ebx dword ptr [esp+58h+var_44+8] +
xor edi [ebp+eax*4+arg_BF8] +
add ebx edx +
movzx eax bl +
xor ecx [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor ecx [ebp+eax*4+arg_3F8] +
movzx eax bh +
xor ecx [ebp+eax*4+arg_BF8] +
and ebx 0FFh +
xor ecx [ebp+ebx*4+arg_7F8] +
mov ebx [esp+58h+var_1C] +
add ebx edi +
movzx eax bl +
xor esi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor esi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor esi [ebp+eax*4+arg_BF8] +
mov eax dword ptr [esp+58h+var_44+4] +
xor esi [ebp+ebx*4+arg_7F8] +
add eax ecx +
movzx ebx al +
xor edx [ebp+ebx*4+0] +
movzx ebx ah +
shr eax 10h +
xor edx [ebp+ebx*4+arg_3F8] +
movzx ebx ah +
and eax 0FFh +
xor edx [ebp+ebx*4+arg_BF8] +
mov ebx [esp+38h] +
xor edx [ebp+eax*4+arg_7F8] +
add ebx esi +
movzx eax bl +
xor edi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor edi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor edi [ebp+ebx*4+arg_7F8] +
mov ebx dword ptr [esp+58h+var_44] +
xor edi [ebp+eax*4+arg_BF8] +
add ebx edx +
movzx eax bl +
xor ecx [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor ecx [ebp+eax*4+arg_3F8] +
movzx eax bh +
xor ecx [ebp+eax*4+arg_BF8] +
and ebx 0FFh +
xor ecx [ebp+ebx*4+arg_7F8] +
mov ebx [esp+58h+var_24] +
add ebx edi +
movzx eax bl +
xor esi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor esi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor esi [ebp+eax*4+arg_BF8] +
xor esi [ebp+ebx*4+arg_7F8] +
mov ebx dword ptr [esp+58h+var_54+0Ch] +
add ebx ecx +
movzx eax bl +
xor edx [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor edx [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor edx [ebp+ebx*4+arg_7F8] +
mov ebx [esp+58h+var_28] +
add ebx esi +
xor edx [ebp+eax*4+arg_BF8] +
movzx eax bl +
xor edi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor edi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor edi [ebp+ebx*4+arg_7F8] +
mov ebx dword ptr [esp+58h+var_54+8] +
xor edi [ebp+eax*4+arg_BF8] +
add ebx edx +
movzx eax bl +
xor ecx [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor ecx [ebp+eax*4+arg_3F8] +
movzx eax bh +
xor ecx [ebp+eax*4+arg_BF8] +
and ebx 0FFh +
xor ecx [ebp+ebx*4+arg_7F8] +
mov ebx [esp+58h+var_2C] +
add ebx edi +
movzx eax bl +
xor esi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor esi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor esi [ebp+eax*4+arg_BF8] +
mov eax dword ptr [esp+58h+var_54+4] +
xor esi [ebp+ebx*4+arg_7F8] +
add eax ecx +
movzx ebx al +
xor edx [ebp+ebx*4+0] +
movzx ebx ah +
shr eax 10h +
xor edx [ebp+ebx*4+arg_3F8] +
movzx ebx ah +
and eax 0FFh +
xor edx [ebp+ebx*4+arg_BF8] +
mov ebx [esp+28h] +
xor edx [ebp+eax*4+arg_7F8] +
add ebx esi +
movzx eax bl +
xor edi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor edi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor edi [ebp+ebx*4+arg_7F8] +
mov ebx dword ptr [esp+58h+var_54] +
xor edi [ebp+eax*4+arg_BF8] +
add ebx edx +
movzx eax bl +
xor ecx [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor ecx [ebp+eax*4+arg_3F8] +
movzx eax bh +
xor ecx [ebp+eax*4+arg_BF8] +
and ebx 0FFh +
xor ecx [ebp+ebx*4+arg_7F8] +
mov ebx [esp+58h+var_34] +
add ebx edi +
movzx eax bl +
xor esi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor esi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor esi [ebp+eax*4+arg_BF8] +
xor esi [ebp+ebx*4+arg_7F8] +
mov ebp [esp+58h+var_58] +
mov [ebp+arg_78] edx +
mov [ebp+84h] ecx +
mov [ebp+88h] edi +
mov dword ptr [ebp+arg_84] esi +
mov al byte ptr [ebp+arg_48] +
mov bl byte ptr [ebp+arg_48+1] +
mov cl byte ptr [ebp+arg_48+2] +
mov dl byte ptr [ebp+arg_48+3] +
mov ah byte ptr [ebp+arg_48+8] +
mov bh byte ptr [ebp+arg_48+9] +
shl eax 10h +
mov ch byte ptr [ebp+arg_48+0Ah] +
mov dh byte ptr [ebp+arg_48+0Bh] +
shl ebx 10h +
mov al byte ptr [ebp+arg_38] +
shl ecx 10h +
mov bl byte ptr [ebp+arg_38+1] +
shl edx 10h +
mov cl byte ptr [ebp+arg_38+2] +
mov dl byte ptr [ebp+arg_38+3] +
mov ah byte ptr [ebp+arg_40] +
mov bh byte ptr [ebp+arg_40+1] +
mov ch byte ptr [ebp+arg_40+2] +
mov dh byte ptr [ebp+arg_40+3] +
mov dword ptr [esp+58h+var_54] eax +
mov dword ptr [esp+58h+var_54+4] ebx +
mov dword ptr [esp+58h+var_54+8] ecx +
mov dword ptr [esp+58h+var_54+0Ch] edx +
mov al byte ptr [ebp+arg_48+4] +
mov bl byte ptr [ebp+arg_48+5] +
mov cl byte ptr [ebp+arg_48+6] +
mov dl byte ptr [ebp+arg_48+7] +
mov ah byte ptr [ebp+arg_48+0Ch] +
mov bh byte ptr [ebp+arg_48+0Dh] +
shl eax 10h +
mov ch byte ptr [ebp+arg_48+0Eh] +
mov dh byte ptr [ebp+arg_48+0Fh] +
shl ebx 10h +
mov al byte ptr [ebp+arg_38+4] +
shl ecx 10h +
mov bl byte ptr [ebp+arg_38+5] +
shl edx 10h +
mov cl byte ptr [ebp+arg_38+6] +
mov dl byte ptr [ebp+arg_38+7] +
mov ah byte ptr [ebp+arg_40+4] +
mov bh byte ptr [ebp+arg_40+5] +
mov ch byte ptr [ebp+arg_40+6] +
mov dh byte ptr [ebp+arg_40+7] +
mov dword ptr [esp+58h+var_44] eax +
mov dword ptr [esp+58h+var_44+4] ebx +
mov dword ptr [esp+58h+var_44+8] ecx +
mov dword ptr [esp+58h+var_44+0Ch] edx +
mov al byte ptr [ebp+arg_68] +
mov bl byte ptr [ebp+arg_68+1] +
mov cl byte ptr [ebp+arg_68+2] +
mov dl byte ptr [ebp+arg_68+3] +
mov ah [ebp+arg_70] +
mov bh [ebp+arg_71] +
shl eax 10h +
mov ch [ebp+arg_72] +
mov dh [ebp+arg_73] +
shl ebx 10h +
mov al byte ptr [ebp+arg_58] +
shl ecx 10h +
mov bl byte ptr [ebp+arg_58+1] +
shl edx 10h +
mov cl byte ptr [ebp+arg_58+2] +
mov dl byte ptr [ebp+arg_58+3] +
mov ah byte ptr [ebp+arg_58+8] +
mov bh byte ptr [ebp+arg_58+9] +
mov ch byte ptr [ebp+arg_58+0Ah] +
mov dh byte ptr [ebp+arg_58+0Bh] +
mov [esp+58h+var_34] eax +
mov [esp+28h] ebx +
mov [esp+58h+var_2C] ecx +
mov [esp+58h+var_28] edx +
mov al byte ptr [ebp+arg_68+4] +
mov bl byte ptr [ebp+arg_68+5] +
mov cl byte ptr [ebp+arg_68+6] +
mov dl byte ptr [ebp+arg_68+7] +
mov ah byte ptr [ebp+arg_74] +
mov bh byte ptr [ebp+arg_74+1] +
shl eax 10h +
mov ch byte ptr [ebp+arg_74+2] +
mov dh byte ptr [ebp+arg_74+3] +
shl ebx 10h +
mov al byte ptr [ebp+arg_58+4] +
shl ecx 10h +
mov bl byte ptr [ebp+arg_58+5] +
shl edx 10h +
mov cl byte ptr [ebp+arg_58+6] +
mov dl byte ptr [ebp+arg_58+7] +
mov ah byte ptr [ebp+arg_58+0Ch] +
mov bh byte ptr [ebp+arg_58+0Dh] +
mov ch byte ptr [ebp+arg_58+0Eh] +
mov dh byte ptr [ebp+arg_58+0Fh] +
mov [esp+58h+var_24] eax +
mov [esp+38h] ebx +
mov [esp+58h+var_1C] ecx +
mov [esp+58h+var_18] edx +
mov ebx [ebp+arg_98] +
mov ecx [ebx+10h] +
mov edx [ebx+14h] +
mov esi [ebx+18h] +
mov edi [ebx+1Ch] +
mov ebp [ebp+arg_A0] +
mov ebx dword ptr [esp+58h+var_54] +
add ebx ecx +
movzx eax bl +
xor edx [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor edx [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor edx [ebp+ebx*4+arg_7F8] +
mov ebx [esp+58h+var_34] +
add ebx esi +
xor edx [ebp+eax*4+arg_BF8] +
movzx eax bl +
xor edi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor edi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor edi [ebp+ebx*4+arg_7F8] +
mov ebx dword ptr [esp+58h+var_54+4] +
xor edi [ebp+eax*4+arg_BF8] +
add ebx edx +
movzx eax bl +
xor ecx [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor ecx [ebp+eax*4+arg_3F8] +
movzx eax bh +
xor ecx [ebp+eax*4+arg_BF8] +
and ebx 0FFh +
xor ecx [ebp+ebx*4+arg_7F8] +
mov ebx [esp+28h] +
add ebx edi +
movzx eax bl +
xor esi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor esi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor esi [ebp+eax*4+arg_BF8] +
mov eax dword ptr [esp+58h+var_54+8] +
xor esi [ebp+ebx*4+arg_7F8] +
add eax ecx +
movzx ebx al +
xor edx [ebp+ebx*4+0] +
movzx ebx ah +
shr eax 10h +
xor edx [ebp+ebx*4+arg_3F8] +
movzx ebx ah +
and eax 0FFh +
xor edx [ebp+ebx*4+arg_BF8] +
mov ebx [esp+58h+var_2C] +
xor edx [ebp+eax*4+arg_7F8] +
add ebx esi +
movzx eax bl +
xor edi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor edi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor edi [ebp+ebx*4+arg_7F8] +
mov ebx dword ptr [esp+58h+var_54+0Ch] +
xor edi [ebp+eax*4+arg_BF8] +
add ebx edx +
movzx eax bl +
xor ecx [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor ecx [ebp+eax*4+arg_3F8] +
movzx eax bh +
xor ecx [ebp+eax*4+arg_BF8] +
and ebx 0FFh +
xor ecx [ebp+ebx*4+arg_7F8] +
mov ebx [esp+58h+var_28] +
add ebx edi +
movzx eax bl +
xor esi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor esi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor esi [ebp+eax*4+arg_BF8] +
xor esi [ebp+ebx*4+arg_7F8] +
mov ebx dword ptr [esp+58h+var_44] +
add ebx ecx +
movzx eax bl +
xor edx [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor edx [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor edx [ebp+ebx*4+arg_7F8] +
mov ebx [esp+58h+var_24] +
add ebx esi +
xor edx [ebp+eax*4+arg_BF8] +
movzx eax bl +
xor edi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor edi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor edi [ebp+ebx*4+arg_7F8] +
mov ebx dword ptr [esp+58h+var_44+4] +
xor edi [ebp+eax*4+arg_BF8] +
add ebx edx +
movzx eax bl +
xor ecx [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor ecx [ebp+eax*4+arg_3F8] +
movzx eax bh +
xor ecx [ebp+eax*4+arg_BF8] +
and ebx 0FFh +
xor ecx [ebp+ebx*4+arg_7F8] +
mov ebx [esp+38h] +
add ebx edi +
movzx eax bl +
xor esi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor esi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor esi [ebp+eax*4+arg_BF8] +
mov eax dword ptr [esp+58h+var_44+8] +
xor esi [ebp+ebx*4+arg_7F8] +
add eax ecx +
movzx ebx al +
xor edx [ebp+ebx*4+0] +
movzx ebx ah +
shr eax 10h +
xor edx [ebp+ebx*4+arg_3F8] +
movzx ebx ah +
and eax 0FFh +
xor edx [ebp+ebx*4+arg_BF8] +
mov ebx [esp+58h+var_1C] +
xor edx [ebp+eax*4+arg_7F8] +
add ebx esi +
movzx eax bl +
xor edi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor edi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor edi [ebp+ebx*4+arg_7F8] +
mov ebx dword ptr [esp+58h+var_44+0Ch] +
xor edi [ebp+eax*4+arg_BF8] +
add ebx edx +
movzx eax bl +
xor ecx [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor ecx [ebp+eax*4+arg_3F8] +
movzx eax bh +
xor ecx [ebp+eax*4+arg_BF8] +
and ebx 0FFh +
xor ecx [ebp+ebx*4+arg_7F8] +
mov ebx [esp+58h+var_18] +
add ebx edi +
movzx eax bl +
xor esi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor esi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor esi [ebp+eax*4+arg_BF8] +
xor esi [ebp+ebx*4+arg_7F8] +
mov ebx dword ptr [esp+58h+var_54] +
add ebx ecx +
movzx eax bl +
xor edx [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor edx [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor edx [ebp+ebx*4+arg_7F8] +
mov ebx [esp+58h+var_34] +
add ebx esi +
xor edx [ebp+eax*4+arg_BF8] +
movzx eax bl +
xor edi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor edi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor edi [ebp+ebx*4+arg_7F8] +
mov ebx dword ptr [esp+58h+var_54+4] +
xor edi [ebp+eax*4+arg_BF8] +
add ebx edx +
movzx eax bl +
xor ecx [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor ecx [ebp+eax*4+arg_3F8] +
movzx eax bh +
xor ecx [ebp+eax*4+arg_BF8] +
and ebx 0FFh +
xor ecx [ebp+ebx*4+arg_7F8] +
mov ebx [esp+28h] +
add ebx edi +
movzx eax bl +
xor esi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor esi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor esi [ebp+eax*4+arg_BF8] +
mov eax dword ptr [esp+58h+var_54+8] +
xor esi [ebp+ebx*4+arg_7F8] +
add eax ecx +
movzx ebx al +
xor edx [ebp+ebx*4+0] +
movzx ebx ah +
shr eax 10h +
xor edx [ebp+ebx*4+arg_3F8] +
movzx ebx ah +
and eax 0FFh +
xor edx [ebp+ebx*4+arg_BF8] +
mov ebx [esp+58h+var_2C] +
xor edx [ebp+eax*4+arg_7F8] +
add ebx esi +
movzx eax bl +
xor edi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor edi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor edi [ebp+ebx*4+arg_7F8] +
mov ebx dword ptr [esp+58h+var_54+0Ch] +
xor edi [ebp+eax*4+arg_BF8] +
add ebx edx +
movzx eax bl +
xor ecx [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor ecx [ebp+eax*4+arg_3F8] +
movzx eax bh +
xor ecx [ebp+eax*4+arg_BF8] +
and ebx 0FFh +
xor ecx [ebp+ebx*4+arg_7F8] +
mov ebx [esp+58h+var_28] +
add ebx edi +
movzx eax bl +
xor esi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor esi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor esi [ebp+eax*4+arg_BF8] +
xor esi [ebp+ebx*4+arg_7F8] +
mov ebx dword ptr [esp+58h+var_44] +
add ebx ecx +
movzx eax bl +
xor edx [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor edx [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor edx [ebp+ebx*4+arg_7F8] +
mov ebx [esp+58h+var_24] +
add ebx esi +
xor edx [ebp+eax*4+arg_BF8] +
movzx eax bl +
xor edi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor edi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor edi [ebp+ebx*4+arg_7F8] +
mov ebx dword ptr [esp+58h+var_44+4] +
xor edi [ebp+eax*4+arg_BF8] +
add ebx edx +
movzx eax bl +
xor ecx [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor ecx [ebp+eax*4+arg_3F8] +
movzx eax bh +
xor ecx [ebp+eax*4+arg_BF8] +
and ebx 0FFh +
xor ecx [ebp+ebx*4+arg_7F8] +
mov ebx [esp+38h] +
add ebx edi +
movzx eax bl +
xor esi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor esi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor esi [ebp+eax*4+arg_BF8] +
mov eax dword ptr [esp+58h+var_44+8] +
xor esi [ebp+ebx*4+arg_7F8] +
add eax ecx +
movzx ebx al +
xor edx [ebp+ebx*4+0] +
movzx ebx ah +
shr eax 10h +
xor edx [ebp+ebx*4+arg_3F8] +
movzx ebx ah +
and eax 0FFh +
xor edx [ebp+ebx*4+arg_BF8] +
mov ebx [esp+58h+var_1C] +
xor edx [ebp+eax*4+arg_7F8] +
add ebx esi +
movzx eax bl +
xor edi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor edi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor edi [ebp+ebx*4+arg_7F8] +
mov ebx dword ptr [esp+58h+var_44+0Ch] +
xor edi [ebp+eax*4+arg_BF8] +
add ebx edx +
movzx eax bl +
xor ecx [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor ecx [ebp+eax*4+arg_3F8] +
movzx eax bh +
xor ecx [ebp+eax*4+arg_BF8] +
and ebx 0FFh +
xor ecx [ebp+ebx*4+arg_7F8] +
mov ebx [esp+58h+var_18] +
add ebx edi +
movzx eax bl +
xor esi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor esi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor esi [ebp+eax*4+arg_BF8] +
xor esi [ebp+ebx*4+arg_7F8] +
mov ebx dword ptr [esp+58h+var_54] +
add ebx ecx +
movzx eax bl +
xor edx [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor edx [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor edx [ebp+ebx*4+arg_7F8] +
mov ebx [esp+58h+var_34] +
add ebx esi +
xor edx [ebp+eax*4+arg_BF8] +
movzx eax bl +
xor edi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor edi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor edi [ebp+ebx*4+arg_7F8] +
mov ebx dword ptr [esp+58h+var_54+4] +
xor edi [ebp+eax*4+arg_BF8] +
add ebx edx +
movzx eax bl +
xor ecx [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor ecx [ebp+eax*4+arg_3F8] +
movzx eax bh +
xor ecx [ebp+eax*4+arg_BF8] +
and ebx 0FFh +
xor ecx [ebp+ebx*4+arg_7F8] +
mov ebx [esp+28h] +
add ebx edi +
movzx eax bl +
xor esi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor esi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor esi [ebp+eax*4+arg_BF8] +
mov eax dword ptr [esp+58h+var_54+8] +
xor esi [ebp+ebx*4+arg_7F8] +
add eax ecx +
movzx ebx al +
xor edx [ebp+ebx*4+0] +
movzx ebx ah +
shr eax 10h +
xor edx [ebp+ebx*4+arg_3F8] +
movzx ebx ah +
and eax 0FFh +
xor edx [ebp+ebx*4+arg_BF8] +
mov ebx [esp+58h+var_2C] +
xor edx [ebp+eax*4+arg_7F8] +
add ebx esi +
movzx eax bl +
xor edi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor edi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor edi [ebp+ebx*4+arg_7F8] +
mov ebx dword ptr [esp+58h+var_54+0Ch] +
xor edi [ebp+eax*4+arg_BF8] +
add ebx edx +
movzx eax bl +
xor ecx [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor ecx [ebp+eax*4+arg_3F8] +
movzx eax bh +
xor ecx [ebp+eax*4+arg_BF8] +
and ebx 0FFh +
xor ecx [ebp+ebx*4+arg_7F8] +
mov ebx [esp+58h+var_28] +
add ebx edi +
movzx eax bl +
xor esi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor esi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor esi [ebp+eax*4+arg_BF8] +
xor esi [ebp+ebx*4+arg_7F8] +
mov ebx dword ptr [esp+58h+var_44] +
add ebx ecx +
movzx eax bl +
xor edx [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor edx [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor edx [ebp+ebx*4+arg_7F8] +
mov ebx [esp+58h+var_24] +
add ebx esi +
xor edx [ebp+eax*4+arg_BF8] +
movzx eax bl +
xor edi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor edi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor edi [ebp+ebx*4+arg_7F8] +
mov ebx dword ptr [esp+58h+var_44+4] +
xor edi [ebp+eax*4+arg_BF8] +
add ebx edx +
movzx eax bl +
xor ecx [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor ecx [ebp+eax*4+arg_3F8] +
movzx eax bh +
xor ecx [ebp+eax*4+arg_BF8] +
and ebx 0FFh +
xor ecx [ebp+ebx*4+arg_7F8] +
mov ebx [esp+38h] +
add ebx edi +
movzx eax bl +
xor esi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor esi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor esi [ebp+eax*4+arg_BF8] +
mov eax dword ptr [esp+58h+var_44+8] +
xor esi [ebp+ebx*4+arg_7F8] +
add eax ecx +
movzx ebx al +
xor edx [ebp+ebx*4+0] +
movzx ebx ah +
shr eax 10h +
xor edx [ebp+ebx*4+arg_3F8] +
movzx ebx ah +
and eax 0FFh +
xor edx [ebp+ebx*4+arg_BF8] +
mov ebx [esp+58h+var_1C] +
xor edx [ebp+eax*4+arg_7F8] +
add ebx esi +
movzx eax bl +
xor edi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor edi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor edi [ebp+ebx*4+arg_7F8] +
mov ebx dword ptr [esp+58h+var_44+0Ch] +
xor edi [ebp+eax*4+arg_BF8] +
add ebx edx +
movzx eax bl +
xor ecx [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor ecx [ebp+eax*4+arg_3F8] +
movzx eax bh +
xor ecx [ebp+eax*4+arg_BF8] +
and ebx 0FFh +
xor ecx [ebp+ebx*4+arg_7F8] +
mov ebx [esp+58h+var_18] +
add ebx edi +
movzx eax bl +
xor esi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor esi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor esi [ebp+eax*4+arg_BF8] +
xor esi [ebp+ebx*4+arg_7F8] +
mov ebx dword ptr [esp+58h+var_44+0Ch] +
add ebx ecx +
movzx eax bl +
xor edx [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor edx [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor edx [ebp+ebx*4+arg_7F8] +
mov ebx [esp+58h+var_18] +
add ebx esi +
xor edx [ebp+eax*4+arg_BF8] +
movzx eax bl +
xor edi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor edi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor edi [ebp+ebx*4+arg_7F8] +
mov ebx dword ptr [esp+58h+var_44+8] +
xor edi [ebp+eax*4+arg_BF8] +
add ebx edx +
movzx eax bl +
xor ecx [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor ecx [ebp+eax*4+arg_3F8] +
movzx eax bh +
xor ecx [ebp+eax*4+arg_BF8] +
and ebx 0FFh +
xor ecx [ebp+ebx*4+arg_7F8] +
mov ebx [esp+58h+var_1C] +
add ebx edi +
movzx eax bl +
xor esi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor esi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor esi [ebp+eax*4+arg_BF8] +
mov eax dword ptr [esp+58h+var_44+4] +
xor esi [ebp+ebx*4+arg_7F8] +
add eax ecx +
movzx ebx al +
xor edx [ebp+ebx*4+0] +
movzx ebx ah +
shr eax 10h +
xor edx [ebp+ebx*4+arg_3F8] +
movzx ebx ah +
and eax 0FFh +
xor edx [ebp+ebx*4+arg_BF8] +
mov ebx [esp+38h] +
xor edx [ebp+eax*4+arg_7F8] +
add ebx esi +
movzx eax bl +
xor edi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor edi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor edi [ebp+ebx*4+arg_7F8] +
mov ebx dword ptr [esp+58h+var_44] +
xor edi [ebp+eax*4+arg_BF8] +
add ebx edx +
movzx eax bl +
xor ecx [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor ecx [ebp+eax*4+arg_3F8] +
movzx eax bh +
xor ecx [ebp+eax*4+arg_BF8] +
and ebx 0FFh +
xor ecx [ebp+ebx*4+arg_7F8] +
mov ebx [esp+58h+var_24] +
add ebx edi +
movzx eax bl +
xor esi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor esi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor esi [ebp+eax*4+arg_BF8] +
xor esi [ebp+ebx*4+arg_7F8] +
mov ebx dword ptr [esp+58h+var_54+0Ch] +
add ebx ecx +
movzx eax bl +
xor edx [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor edx [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor edx [ebp+ebx*4+arg_7F8] +
mov ebx [esp+58h+var_28] +
add ebx esi +
xor edx [ebp+eax*4+arg_BF8] +
movzx eax bl +
xor edi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor edi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor edi [ebp+ebx*4+arg_7F8] +
mov ebx dword ptr [esp+58h+var_54+8] +
xor edi [ebp+eax*4+arg_BF8] +
add ebx edx +
movzx eax bl +
xor ecx [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor ecx [ebp+eax*4+arg_3F8] +
movzx eax bh +
xor ecx [ebp+eax*4+arg_BF8] +
and ebx 0FFh +
xor ecx [ebp+ebx*4+arg_7F8] +
mov ebx [esp+58h+var_2C] +
add ebx edi +
movzx eax bl +
xor esi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor esi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor esi [ebp+eax*4+arg_BF8] +
mov eax dword ptr [esp+58h+var_54+4] +
xor esi [ebp+ebx*4+arg_7F8] +
add eax ecx +
movzx ebx al +
xor edx [ebp+ebx*4+0] +
movzx ebx ah +
shr eax 10h +
xor edx [ebp+ebx*4+arg_3F8] +
movzx ebx ah +
and eax 0FFh +
xor edx [ebp+ebx*4+arg_BF8] +
mov ebx [esp+28h] +
xor edx [ebp+eax*4+arg_7F8] +
add ebx esi +
movzx eax bl +
xor edi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor edi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor edi [ebp+ebx*4+arg_7F8] +
mov ebx dword ptr [esp+58h+var_54] +
xor edi [ebp+eax*4+arg_BF8] +
add ebx edx +
movzx eax bl +
xor ecx [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor ecx [ebp+eax*4+arg_3F8] +
movzx eax bh +
xor ecx [ebp+eax*4+arg_BF8] +
and ebx 0FFh +
xor ecx [ebp+ebx*4+arg_7F8] +
mov ebx [esp+58h+var_34] +
add ebx edi +
movzx eax bl +
xor esi [ebp+eax*4+0] +
movzx eax bh +
shr ebx 10h +
xor esi [ebp+eax*4+arg_3F8] +
movzx eax bh +
and ebx 0FFh +
xor esi [ebp+eax*4+arg_BF8] +
xor esi [ebp+ebx*4+arg_7F8] +
mov ebp [esp+58h+var_58] +
mov dword ptr [ebp+arg_84+8] ecx +
mov dword ptr [ebp+arg_84+4] edx +
mov [ebp+arg_94] esi +
mov dword ptr [ebp+arg_84+0Ch] edi +
mov eax [ebp+arg_98] +
mov ecx [ebp+arg_9C] +
movq mm0 qword ptr [eax+0Eh] +
movq mm1 qword ptr [ebp+86h] +
pxor mm0 qword ptr [ecx+6] +
movq qword ptr [ebp+arg_8] mm0 +
pxor mm1 qword ptr [eax+16h] +
pxor mm0 qword ptr [eax+6] +
movq mm6 mm0 +
movq qword ptr [ebp+arg_18] mm1 +
movq mm7 mm0 +
pxor mm0 qword ptr [ebp+arg_84+2] +
movq mm5 mm0 +
pxor mm1 qword ptr [ecx+0Eh] +
movq qword ptr [ebp+arg_18+8] mm0 +
movq mm2 mm1 +
pxor mm2 qword ptr [ebp+arg_8] +
movq qword ptr [ebp+arg_8+8] mm1 +
pxor mm0 mm1 +
pxor mm0 qword ptr [ebp+arg_84+0Ah] +
movq mm3 qword ptr [eax+6] +
movq mm4 qword ptr [ecx+16h] +
movq qword ptr [ebp+arg_28] mm0 +
pxor mm3 mm4 +
movq [ebp+arg_68] mm3 +
pxor mm5 mm4 +
pxor mm2 mm4 +
movq qword ptr [esp+58h+var_54] mm5 +
movq qword ptr [esp+58h+var_44] mm2 +
movq mm0 qword ptr [ecx+0Eh] +
movq mm1 mm6 +
movq mm2 mm7 +
pxor mm3 mm0 +
pxor mm2 mm0 +
pxor mm1 mm0 +
movq qword ptr [ebp+arg_58+8] mm3 +
movq mm6 qword ptr [ecx+6] +
movq qword ptr [ebp+arg_48] mm1 +
pxor mm6 mm0 +
pxor mm2 qword ptr [ebp+arg_84+0Ah] +
movq qword ptr [ebp+arg_58] mm6 +
movq qword ptr [esp+58h+var_54+8] mm2 +
movq mm0 qword ptr [ebp+arg_84+2] +
movq mm3 qword ptr [ebp+arg_18+8] +
movq mm1 qword ptr [ebp+arg_8+8] +
movq mm5 [ebp+arg_68] +
pxor mm1 mm0 +
movq mm4 qword ptr [eax+6] +
movq [ebp+arg_38] mm0 +
pxor mm3 qword ptr [ebp+86h] +
pxor mm5 qword ptr [ebp+86h] +
pxor mm0 qword ptr [ebp+arg_84+0Ah] +
pxor mm4 qword ptr [ecx+6] +
movq mm2 qword ptr [ebp+arg_18] +
pxor mm5 qword ptr [eax+0Eh] +
pxor mm0 qword ptr [eax+6] +
movq qword ptr [ebp+arg_18+8] mm3 +
pxor mm0 mm2 +
movq qword ptr [ebp+arg_18] mm0 +
movq [ebp+arg_40] mm4 +
movq [ebp+arg_68] mm5 +
movq mm0 qword ptr [esp+58h+var_44] +
pxor mm1 qword ptr [ebp+arg_84+0Ch] +
movq mm2 qword ptr [esp+58h+var_54] +
pxor mm0 qword ptr [ebp+arg_84+0Ch] +
pxor mm1 qword ptr [eax+18h] +
movq qword ptr [esp+58h+var_44+8] mm1 +
pxor mm2 qword ptr [ecx+10h] +
movq qword ptr [esp+58h+var_54] mm2 +
movq qword ptr [esp+58h+var_44] mm0 +
movq mm3 qword ptr [ebp+arg_58] +
movq mm6 [ebp+arg_38] +
movq mm4 qword ptr [ebp+arg_58+8] +
movq mm5 [ebp+arg_68] +
pxor mm3 qword ptr [eax+18h] +
movq mm7 [ebp+arg_40] +
pxor mm4 qword ptr [eax+18h] +
pxor mm5 qword ptr [ecx+18h] +
movq qword ptr [ebp+arg_58] mm3 +
pxor mm6 qword ptr [ecx+18h] +
movq qword ptr [ebp+arg_58+8] mm4 +
pxor mm7 qword ptr [ecx+18h] +
movq [ebp+arg_68] mm5 +
movq [ebp+arg_38] mm6 +
movq [ebp+arg_40] mm7 +
movq mm0 qword ptr [ebp+arg_18] +
movq mm1 qword ptr [ebp+arg_18+8] +
movq mm2 qword ptr [ebp+arg_28] +
pxor mm0 qword ptr [esp+58h+var_54+2] +
pxor mm1 qword ptr [esp+58h+var_54+0Ah] +
pxor mm2 qword ptr [esp+58h+var_44+2] +
movq qword ptr [esp+58h+var_54+2] mm0 +
movq qword ptr [esp+58h+var_54+0Ah] mm1 +
movq qword ptr [esp+58h+var_44+2] mm2 +
movq mm3 [ebp+arg_38] +
movq mm4 [ebp+arg_40] +
movq mm5 qword ptr [ebp+arg_48] +
pxor mm3 qword ptr [esp+58h+var_54+4] +
pxor mm4 qword ptr [esp+58h+var_54+0Ch] +
pxor mm5 qword ptr [esp+58h+var_44+4] +
movq qword ptr [esp+58h+var_54+4] mm3 +
movq qword ptr [esp+58h+var_54+0Ch] mm4 +
movq qword ptr [esp+58h+var_44+4] mm5 +
movq mm0 qword ptr [ebp+arg_58] +
movq mm1 qword ptr [ebp+arg_58+8] +
movq mm2 [ebp+arg_68] +
pxor mm0 qword ptr [esp+58h+var_54+6] +
pxor mm1 qword ptr [esp+58h+var_54+0Eh] +
pxor mm2 qword ptr [esp+58h+var_44+6] +
movq qword ptr [esp+58h+var_54+6] mm0 +
movq qword ptr [esp+58h+var_54+0Eh] mm1 +
movq qword ptr [esp+58h+var_44+6] mm2 +
mov dx word ptr [ebp+arg_78+2] +
mov si word ptr [ebp+arg_78] +
xor dx [ebp+8Ah] +
xor si word ptr [ebp+arg_78+2] +
xor dx word ptr [ebp+arg_84] +
xor si word ptr [ebp+arg_84] +
xor dx word ptr [ebp+arg_84+6] +
xor si word ptr [ebp+arg_84+8] +
xor dx word ptr [ebp+arg_84+8] +
xor si word ptr [ebp+arg_84+0Eh] +
xor dx word ptr [ebp+arg_84+0Ah] +
xor si word ptr [ebp+arg_94] +
xor dx word ptr [ebp+arg_84+0Ch] +
xor si [eax] +
xor dx word ptr [ebp+arg_84+0Eh] +
xor si [eax+2] +
xor dx word ptr [ebp+arg_94] +
xor si [eax+1Ch] +
xor dx word ptr [ebp+arg_94+2] +
xor si [ecx+2] +
xor dx [eax+2] +
xor si [ecx+4] +
xor dx [eax+14h] +
xor si [ecx+0Ah] +
xor dx [eax+16h] +
xor si [ecx+1Eh] +
xor dx [eax+1Ah] +
xor word ptr [esp+58h+var_54+2] si +
xor dx [eax+1Ch] +
xor dx [eax+1Eh] +
mov si word ptr [ebp+arg_78+2] +
xor dx [ecx] +
xor si [ebp+84h] +
xor dx [ecx+2] +
xor si word ptr [ebp+arg_84+0Ah] +
xor dx [ecx+8] +
xor si word ptr [ebp+arg_94] +
xor dx [ecx+1Ch] +
xor si word ptr [ebp+arg_94+2] +
xor word ptr [esp+58h+var_54] dx +
xor si [eax+2] +
mov dx word ptr [ebp+arg_78] +
xor si [eax+4] +
xor dx word ptr [ebp+arg_78+2] +
xor si [eax+1Eh] +
xor dx [eax] +
xor si [ecx] +
xor dx [eax+2] +
xor si [ecx+2] +
xor dx [eax+1Eh] +
xor si [ecx+0Ch] +
xor dx [ecx] +
xor si [ecx+1Eh] +
xor dx [ecx+18h] +
xor word ptr [esp+58h+var_54+4] si +
xor dx [ecx+1Eh] +
mov si word ptr [ebp+arg_78+2] +
xor word ptr [esp+58h+var_54+6] dx +
xor si [ebp+84h] +
mov dx [ebp+84h] +
xor si [eax] +
xor dx word ptr [ebp+arg_84+0Ah] +
xor si [eax+16h] +
xor dx word ptr [ebp+arg_94+2] +
xor si [eax+18h] +
xor dx [eax] +
xor si [eax+1Eh] +
xor dx [eax+4] +
xor si [ecx] +
xor dx [eax+1Ah] +
xor si [ecx+4] +
xor dx [ecx+2] +
xor si [ecx+1Ah] +
xor dx [ecx+1Ch] +
xor word ptr [esp+58h+var_54+8] si +
xor word ptr [esp+58h+var_54+0Ah] dx +
mov si word ptr [ebp+arg_78] +
mov dx word ptr [ebp+arg_78] +
xor si word ptr [ebp+arg_78+2] +
xor dx word ptr [ebp+arg_94+2] +
xor si [ebp+84h] +
xor dx [eax] +
xor si word ptr [ebp+arg_84+0Ah] +
xor dx [eax+2] +
xor si word ptr [ebp+arg_94+2] +
xor dx [ecx+2] +
xor si [eax+2] +
xor dx [ecx+4] +
xor si [eax+1Ch] +
xor word ptr [esp+58h+var_54+0Eh] dx +
xor si [ecx] +
mov dx word ptr [ebp+arg_78] +
xor si [ecx+2] +
xor dx [ebp+84h] +
xor word ptr [esp+58h+var_54+0Ch] si +
xor dx [eax+2] +
mov si word ptr [ebp+arg_78+2] +
xor dx [eax+4] +
xor si [eax+4] +
xor dx [ecx+4] +
xor word ptr [esp+58h+var_44+2] si +
xor word ptr [esp+58h+var_44] dx +
mov si [ebp+84h] +
mov dx [eax] +
xor si [ecx] +
xor dx [eax+2] +
xor si [ecx+2] +
xor dx [eax+4] +
xor si [ecx+4] +
xor dx [eax+18h] +
xor si [ecx+18h] +
xor dx [eax+1Eh] +
xor si [ecx+1Eh] +
xor dx [ecx] +
xor word ptr [esp+58h+var_44+4] si +
xor dx [ecx+1Ah] +
mov si word ptr [ebp+arg_78] +
xor word ptr [esp+58h+var_44+6] dx +
xor si word ptr [ebp+arg_78+2] +
mov dx word ptr [ebp+arg_78] +
xor si [ebp+84h] +
xor dx word ptr [ebp+arg_84+2] +
xor si word ptr [ebp+arg_94+2] +
xor dx word ptr [ebp+arg_84+0Ah] +
xor si [eax] +
xor dx word ptr [ebp+arg_84+0Ch] +
xor si [eax+1Ah] +
xor dx [eax+2] +
xor si [ecx+2] +
xor dx [eax+0Eh] +
xor si [ecx+16h] +
xor dx [eax+16h] +
xor si [ecx+1Ch] +
xor dx [eax+1Ch] +
xor si [ecx+1Eh] +
xor dx [eax+1Eh] +
xor word ptr [esp+58h+var_44+8] si +
xor dx [ecx] +
mov si word ptr [ebp+arg_78+2] +
xor dx [ecx+2] +
xor si word ptr [ebp+arg_84+4] +
xor dx [ecx+6] +
xor si word ptr [ebp+arg_84+0Ch] +
xor dx [ecx+0Eh] +
xor si word ptr [ebp+arg_84+0Eh] +
xor dx [ecx+16h] +
xor si [eax] +
xor word ptr [esp+58h+var_44+0Ah] dx +
xor si [eax+2] +
mov dx [ebp+84h] +
xor si [eax+6] +
xor dx word ptr [ebp+arg_84+2] +
xor si [eax+0Eh] +
xor dx word ptr [ebp+arg_84+6] +
xor si [eax+10h] +
xor dx word ptr [ebp+arg_84+0Eh] +
xor si [eax+16h] +
xor dx word ptr [ebp+arg_94] +
xor si [ecx+2] +
xor dx [eax+2] +
xor si [ecx+4] +
xor dx [eax+4] +
xor si [ecx+8] +
xor dx [eax+8] +
xor si [ecx+0Eh] +
xor dx [eax+0Eh] +
xor si [ecx+10h] +
xor dx [eax+10h] +
xor si [ecx+16h] +
xor dx [eax+12h] +
xor si [ecx+18h] +
xor dx [eax+16h] +
xor word ptr [esp+58h+var_44+0Ch] si +
xor dx [eax+18h] +
xor dx [ecx] +
xor dx [ecx+2] +
xor dx [ecx+0Ah] +
xor dx [ecx+10h] +
xor dx [ecx+12h] +
xor dx [ecx+1Ah] +
xor word ptr [esp+58h+var_44+0Eh] dx +
mov ebx [ebp+arg_98] +
movdqa xmm0 oword ptr [esp+58h+var_54] +
movdqu qword ptr [ebx] xmm0 +
movdqa xmm1 oword ptr [esp+58h+var_44] +
movdqu qword ptr [ebx+10h] xmm1 +
movdqa oword ptr [esp+58h+var_34] xmm2 +
movdqa oword ptr [esp+58h+var_24] xmm2 +
pxor xmm2 xmm2 +
movq xmm3 xmm2 +
pxor xmm4 xmm4 +
movdqa oword ptr [ebp+arg_78] xmm2 +
movq xmm0 xmm3 +
pxor xmm1 xmm1 +
movdqa oword ptr [ebp+arg_84+4] xmm2 +
pxor xmm5 xmm5 +
movq xmm6 xmm2 +
pxor xmm7 xmm7 +
emms   +
add esp 44h +
mov esp [esp+14h+var_14] +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push esi  +
mov ebp esi +
sub esp 90h +
mov esi [ebp+arg_D0] +
mov [esp+98h+var_98] ebp +
mov [esp+98h+var_94] esi +
mov eax [ebp+arg_DC] +
movups xmm0 oword ptr [eax] +
movups xmm1 oword ptr [eax+10h] +
movups xmm2 oword ptr [eax+20h] +
movups xmm3 oword ptr [eax+30h] +
mov edi [ebp+arg_E4] +
mov eax [esi] +
mov ebx [esi+4] +
mov ecx [esi+8] +
mov edx [esi+0Ch] +
add [edi] eax +
adc [edi+4] ebx +
adc [edi+8] ecx +
adc [edi+0Ch] edx +
mov eax [esi+10h] +
mov ebx [esi+14h] +
mov ecx [esi+18h] +
mov edx [esi+1Ch] +
adc [edi+10h] eax +
adc [edi+14h] ebx +
adc [edi+18h] ecx +
adc [edi+1Ch] edx +
mov eax [esi+20h] +
mov ebx [esi+24h] +
mov ecx [esi+28h] +
mov edx [esi+2Ch] +
adc [edi+20h] eax +
adc [edi+24h] ebx +
adc [edi+28h] ecx +
adc [edi+2Ch] edx +
mov eax [esi+30h] +
mov ebx [esi+34h] +
mov ecx [esi+38h] +
mov edx [esi+3Ch] +
adc [edi+30h] eax +
adc [edi+34h] ebx +
adc [edi+38h] ecx +
adc [edi+3Ch] edx +
mov edi [ebp+arg_E0] +
mov eax [ebp+arg_D4] +
movups xmm4 oword ptr [edi] +
movups xmm5 oword ptr [edi+10h] +
movups xmm6 oword ptr [edi+20h] +
movups xmm7 oword ptr [edi+30h] +
add [edi] eax +
jnb loc_4210E8  +
mov esi 1 +
add dword ptr [edi+esi*4] 1 +
jnb loc_4210E8  +
inc esi  +
cmp esi 10h +
jnz loc_4210DC  +
pxor xmm0 xmm4 +
pxor xmm1 xmm5 +
pxor xmm2 xmm6 +
pxor xmm3 xmm7 +
mov edi [ebp+arg_E8] +
mov [esp+98h+var_8C] edi +
mov ebp [ebp+arg_D8] +
movd eax xmm0 +
movd ebx xmm1 +
movd ecx xmm2 +
movd edx xmm3 +
pshufd xmm0 xmm0 +
pshufd xmm1 xmm1 +
pshufd xmm2 xmm2 +
pshufd xmm3 xmm3 +
movzx esi al +
movzx edi ah +
movq mm0 [ebp+esi*8+arg_37F8] +
movq mm1 [ebp+edi*8+arg_37F8] +
movzx esi bl +
movzx edi bh +
pxor mm0 [ebp+esi*8+arg_27F8] +
pxor mm1 [ebp+edi*8+arg_27F8] +
movzx esi cl +
movzx edi ch +
pxor mm0 [ebp+esi*8+arg_17F8] +
pxor mm1 [ebp+edi*8+arg_17F8] +
movzx esi dl +
movzx edi dh +
pxor mm0 [ebp+esi*8+arg_7F8] +
pxor mm1 [ebp+edi*8+arg_7F8] +
shr eax 10h +
shr ebx 10h +
shr ecx 10h +
shr edx 10h +
movzx esi al +
movzx edi ah +
movq mm2 [ebp+esi*8+arg_37F8] +
movq mm3 [ebp+edi*8+arg_37F8] +
movzx esi bl +
movzx edi bh +
pxor mm2 [ebp+esi*8+arg_27F8] +
pxor mm3 [ebp+edi*8+arg_27F8] +
movzx esi cl +
movzx edi ch +
pxor mm2 [ebp+esi*8+arg_17F8] +
pxor mm3 [ebp+edi*8+arg_17F8] +
movzx esi dl +
movzx edi dh +
pxor mm2 [ebp+esi*8+arg_7F8] +
pxor mm3 [ebp+edi*8+arg_7F8] +
movd eax xmm0 +
movd ebx xmm1 +
movd ecx xmm2 +
movd edx xmm3 +
pshufd xmm0 xmm0 +
pshufd xmm1 xmm1 +
pshufd xmm2 xmm2 +
pshufd xmm3 xmm3 +
movzx esi al +
movzx edi ah +
movq mm4 [ebp+esi*8+arg_37F8] +
movq mm5 [ebp+edi*8+arg_37F8] +
movzx esi bl +
movzx edi bh +
pxor mm4 [ebp+esi*8+arg_27F8] +
pxor mm5 [ebp+edi*8+arg_27F8] +
movzx esi cl +
movzx edi ch +
pxor mm4 [ebp+esi*8+arg_17F8] +
pxor mm5 [ebp+edi*8+arg_17F8] +
movzx esi dl +
movzx edi dh +
pxor mm4 [ebp+esi*8+arg_7F8] +
pxor mm5 [ebp+edi*8+arg_7F8] +
shr eax 10h +
shr ebx 10h +
shr ecx 10h +
shr edx 10h +
movzx esi al +
movzx edi ah +
movq mm6 [ebp+esi*8+arg_37F8] +
movq mm7 [ebp+edi*8+arg_37F8] +
movzx esi bl +
movzx edi bh +
pxor mm6 [ebp+esi*8+arg_27F8] +
pxor mm7 [ebp+edi*8+arg_27F8] +
movzx esi cl +
movzx edi ch +
pxor mm6 [ebp+esi*8+arg_17F8] +
pxor mm7 [ebp+edi*8+arg_17F8] +
movzx esi dl +
movzx edi dh +
pxor mm6 [ebp+esi*8+arg_7F8] +
pxor mm7 [ebp+edi*8+arg_7F8] +
movd eax xmm0 +
movd ebx xmm1 +
movd ecx xmm2 +
movd edx xmm3 +
pshufd xmm0 xmm0 +
pshufd xmm1 xmm1 +
pshufd xmm2 xmm2 +
pshufd xmm3 xmm3 +
movzx esi al +
movzx edi ah +
pxor mm0 [ebp+esi*8+arg_2FF8] +
pxor mm1 [ebp+edi*8+arg_2FF8] +
movzx esi bl +
movzx edi bh +
pxor mm0 [ebp+esi*8+arg_1FF8] +
pxor mm1 [ebp+edi*8+arg_1FF8] +
movzx esi cl +
movzx edi ch +
pxor mm0 [ebp+esi*8+arg_FF8] +
pxor mm1 [ebp+edi*8+arg_FF8] +
movzx esi dl +
movzx edi dh +
pxor mm0 qword ptr [ebp+esi*8+0] +
pxor mm1 qword ptr [ebp+edi*8+0] +
shr eax 10h +
shr ebx 10h +
shr ecx 10h +
shr edx 10h +
movzx esi al +
movzx edi ah +
pxor mm2 [ebp+esi*8+arg_2FF8] +
pxor mm3 [ebp+edi*8+arg_2FF8] +
movzx esi bl +
movzx edi bh +
pxor mm2 [ebp+esi*8+arg_1FF8] +
pxor mm3 [ebp+edi*8+arg_1FF8] +
movzx esi cl +
movzx edi ch +
pxor mm2 [ebp+esi*8+arg_FF8] +
pxor mm3 [ebp+edi*8+arg_FF8] +
movzx esi dl +
movzx edi dh +
pxor mm2 qword ptr [ebp+esi*8+0] +
pxor mm3 qword ptr [ebp+edi*8+0] +
movd eax xmm0 +
movd ebx xmm1 +
movd ecx xmm2 +
movd edx xmm3 +
movzx esi al +
movzx edi ah +
pxor mm4 [ebp+esi*8+arg_2FF8] +
pxor mm5 [ebp+edi*8+arg_2FF8] +
movzx esi bl +
movzx edi bh +
pxor mm4 [ebp+esi*8+arg_1FF8] +
pxor mm5 [ebp+edi*8+arg_1FF8] +
movzx esi cl +
movzx edi ch +
pxor mm4 [ebp+esi*8+arg_FF8] +
pxor mm5 [ebp+edi*8+arg_FF8] +
movzx esi dl +
movzx edi dh +
pxor mm4 qword ptr [ebp+esi*8+0] +
pxor mm5 qword ptr [ebp+edi*8+0] +
shr eax 10h +
shr ebx 10h +
shr ecx 10h +
shr edx 10h +
movzx esi al +
movzx edi ah +
pxor mm6 [ebp+esi*8+arg_2FF8] +
pxor mm7 [ebp+edi*8+arg_2FF8] +
movzx esi bl +
movzx edi bh +
pxor mm6 [ebp+esi*8+arg_1FF8] +
pxor mm7 [ebp+edi*8+arg_1FF8] +
movzx esi cl +
movzx edi ch +
pxor mm6 [ebp+esi*8+arg_FF8] +
pxor mm7 [ebp+edi*8+arg_FF8] +
movzx esi dl +
movzx edi dh +
pxor mm6 qword ptr [ebp+esi*8+0] +
pxor mm7 qword ptr [ebp+edi*8+0] +
movq2dq xmm0 mm0 +
movq2dq xmm4 mm1 +
movq2dq xmm1 mm2 +
movq2dq xmm5 mm3 +
movq2dq xmm2 mm4 +
movq2dq xmm6 mm5 +
movq2dq xmm3 mm6 +
movq2dq xmm7 mm7 +
movlhps xmm0 xmm4 +
movlhps xmm1 xmm5 +
movlhps xmm2 xmm6 +
movlhps xmm3 xmm7 +
mov eax [esp+98h+var_94] +
movups xmm4 oword ptr [eax] +
movups xmm5 oword ptr [eax+10h] +
movups xmm6 oword ptr [eax+20h] +
movups xmm7 oword ptr [eax+30h] +
mov esi 0Ch +
mov [esp+98h+var_90] esi +
movups oword ptr [esp+98h+var_88] xmm0 +
movups oword ptr [esp+98h+var_78] xmm1 +
movups oword ptr [esp+98h+var_68] xmm2 +
movups oword ptr [esp+98h+var_58] xmm3 +
pxor xmm0 xmm4 +
pxor xmm1 xmm5 +
pxor xmm2 xmm6 +
pxor xmm3 xmm7 +
movd eax xmm0 +
movd ebx xmm1 +
movd ecx xmm2 +
movd edx xmm3 +
pshufd xmm0 xmm0 +
pshufd xmm1 xmm1 +
pshufd xmm2 xmm2 +
pshufd xmm3 xmm3 +
movzx esi al +
movzx edi ah +
movq mm0 [ebp+esi*8+arg_37F8] +
movq mm1 [ebp+edi*8+arg_37F8] +
movzx esi bl +
movzx edi bh +
pxor mm0 [ebp+esi*8+arg_27F8] +
pxor mm1 [ebp+edi*8+arg_27F8] +
movzx esi cl +
movzx edi ch +
pxor mm0 [ebp+esi*8+arg_17F8] +
pxor mm1 [ebp+edi*8+arg_17F8] +
movzx esi dl +
movzx edi dh +
pxor mm0 [ebp+esi*8+arg_7F8] +
pxor mm1 [ebp+edi*8+arg_7F8] +
shr eax 10h +
shr ebx 10h +
shr ecx 10h +
shr edx 10h +
movzx esi al +
movzx edi ah +
movq mm2 [ebp+esi*8+arg_37F8] +
movq mm3 [ebp+edi*8+arg_37F8] +
movzx esi bl +
movzx edi bh +
pxor mm2 [ebp+esi*8+arg_27F8] +
pxor mm3 [ebp+edi*8+arg_27F8] +
movzx esi cl +
movzx edi ch +
pxor mm2 [ebp+esi*8+arg_17F8] +
pxor mm3 [ebp+edi*8+arg_17F8] +
movzx esi dl +
movzx edi dh +
pxor mm2 [ebp+esi*8+arg_7F8] +
pxor mm3 [ebp+edi*8+arg_7F8] +
movd eax xmm0 +
movd ebx xmm1 +
movd ecx xmm2 +
movd edx xmm3 +
pshufd xmm0 xmm0 +
pshufd xmm1 xmm1 +
pshufd xmm2 xmm2 +
pshufd xmm3 xmm3 +
movzx esi al +
movzx edi ah +
movq mm4 [ebp+esi*8+arg_37F8] +
movq mm5 [ebp+edi*8+arg_37F8] +
movzx esi bl +
movzx edi bh +
pxor mm4 [ebp+esi*8+arg_27F8] +
pxor mm5 [ebp+edi*8+arg_27F8] +
movzx esi cl +
movzx edi ch +
pxor mm4 [ebp+esi*8+arg_17F8] +
pxor mm5 [ebp+edi*8+arg_17F8] +
movzx esi dl +
movzx edi dh +
pxor mm4 [ebp+esi*8+arg_7F8] +
pxor mm5 [ebp+edi*8+arg_7F8] +
shr eax 10h +
shr ebx 10h +
shr ecx 10h +
shr edx 10h +
movzx esi al +
movzx edi ah +
movq mm6 [ebp+esi*8+arg_37F8] +
movq mm7 [ebp+edi*8+arg_37F8] +
movzx esi bl +
movzx edi bh +
pxor mm6 [ebp+esi*8+arg_27F8] +
pxor mm7 [ebp+edi*8+arg_27F8] +
movzx esi cl +
movzx edi ch +
pxor mm6 [ebp+esi*8+arg_17F8] +
pxor mm7 [ebp+edi*8+arg_17F8] +
movzx esi dl +
movzx edi dh +
pxor mm6 [ebp+esi*8+arg_7F8] +
pxor mm7 [ebp+edi*8+arg_7F8] +
movd eax xmm0 +
movd ebx xmm1 +
movd ecx xmm2 +
movd edx xmm3 +
pshufd xmm0 xmm0 +
pshufd xmm1 xmm1 +
pshufd xmm2 xmm2 +
pshufd xmm3 xmm3 +
movzx esi al +
movzx edi ah +
pxor mm0 [ebp+esi*8+arg_2FF8] +
pxor mm1 [ebp+edi*8+arg_2FF8] +
movzx esi bl +
movzx edi bh +
pxor mm0 [ebp+esi*8+arg_1FF8] +
pxor mm1 [ebp+edi*8+arg_1FF8] +
movzx esi cl +
movzx edi ch +
pxor mm0 [ebp+esi*8+arg_FF8] +
pxor mm1 [ebp+edi*8+arg_FF8] +
movzx esi dl +
movzx edi dh +
pxor mm0 qword ptr [ebp+esi*8+0] +
pxor mm1 qword ptr [ebp+edi*8+0] +
shr eax 10h +
shr ebx 10h +
shr ecx 10h +
shr edx 10h +
movzx esi al +
movzx edi ah +
pxor mm2 [ebp+esi*8+arg_2FF8] +
pxor mm3 [ebp+edi*8+arg_2FF8] +
movzx esi bl +
movzx edi bh +
pxor mm2 [ebp+esi*8+arg_1FF8] +
pxor mm3 [ebp+edi*8+arg_1FF8] +
movzx esi cl +
movzx edi ch +
pxor mm2 [ebp+esi*8+arg_FF8] +
pxor mm3 [ebp+edi*8+arg_FF8] +
movzx esi dl +
movzx edi dh +
pxor mm2 qword ptr [ebp+esi*8+0] +
pxor mm3 qword ptr [ebp+edi*8+0] +
movd eax xmm0 +
movd ebx xmm1 +
movd ecx xmm2 +
movd edx xmm3 +
movzx esi al +
movzx edi ah +
pxor mm4 [ebp+esi*8+arg_2FF8] +
pxor mm5 [ebp+edi*8+arg_2FF8] +
movzx esi bl +
movzx edi bh +
pxor mm4 [ebp+esi*8+arg_1FF8] +
pxor mm5 [ebp+edi*8+arg_1FF8] +
movzx esi cl +
movzx edi ch +
pxor mm4 [ebp+esi*8+arg_FF8] +
pxor mm5 [ebp+edi*8+arg_FF8] +
movzx esi dl +
movzx edi dh +
pxor mm4 qword ptr [ebp+esi*8+0] +
pxor mm5 qword ptr [ebp+edi*8+0] +
shr eax 10h +
shr ebx 10h +
shr ecx 10h +
shr edx 10h +
movzx esi al +
movzx edi ah +
pxor mm6 [ebp+esi*8+arg_2FF8] +
pxor mm7 [ebp+edi*8+arg_2FF8] +
movzx esi bl +
movzx edi bh +
pxor mm6 [ebp+esi*8+arg_1FF8] +
pxor mm7 [ebp+edi*8+arg_1FF8] +
movzx esi cl +
movzx edi ch +
pxor mm6 [ebp+esi*8+arg_FF8] +
pxor mm7 [ebp+edi*8+arg_FF8] +
movzx esi dl +
movzx edi dh +
pxor mm6 qword ptr [ebp+esi*8+0] +
pxor mm7 qword ptr [ebp+edi*8+0] +
movq2dq xmm0 mm0 +
movq2dq xmm4 mm1 +
movq2dq xmm1 mm2 +
movq2dq xmm5 mm3 +
movq2dq xmm2 mm4 +
movq2dq xmm6 mm5 +
movq2dq xmm3 mm6 +
movq2dq xmm7 mm7 +
movlhps xmm0 xmm4 +
movlhps xmm1 xmm5 +
movlhps xmm2 xmm6 +
movlhps xmm3 xmm7 +
movups oword ptr [esp+98h+var_48] xmm0 +
movups oword ptr [esp+98h+var_38] xmm1 +
movups oword ptr [esp+98h+var_28] xmm2 +
movups oword ptr [esp+98h+var_18] xmm3 +
mov edi [esp+98h+var_8C] +
movups xmm0 oword ptr [esp+98h+var_88] +
movups xmm1 oword ptr [esp+98h+var_78] +
movups xmm2 oword ptr [esp+98h+var_68] +
movups xmm3 oword ptr [esp+98h+var_58] +
movups xmm4 oword ptr [edi] +
movups xmm5 oword ptr [edi+10h] +
movups xmm6 oword ptr [edi+20h] +
movups xmm7 oword ptr [edi+30h] +
add edi 40h +
mov [esp+98h+var_8C] edi +
pxor xmm0 xmm4 +
pxor xmm1 xmm5 +
pxor xmm2 xmm6 +
pxor xmm3 xmm7 +
movd eax xmm0 +
movd ebx xmm1 +
movd ecx xmm2 +
movd edx xmm3 +
pshufd xmm0 xmm0 +
pshufd xmm1 xmm1 +
pshufd xmm2 xmm2 +
pshufd xmm3 xmm3 +
movzx esi al +
movzx edi ah +
movq mm0 [ebp+esi*8+arg_37F8] +
movq mm1 [ebp+edi*8+arg_37F8] +
movzx esi bl +
movzx edi bh +
pxor mm0 [ebp+esi*8+arg_27F8] +
pxor mm1 [ebp+edi*8+arg_27F8] +
movzx esi cl +
movzx edi ch +
pxor mm0 [ebp+esi*8+arg_17F8] +
pxor mm1 [ebp+edi*8+arg_17F8] +
movzx esi dl +
movzx edi dh +
pxor mm0 [ebp+esi*8+arg_7F8] +
pxor mm1 [ebp+edi*8+arg_7F8] +
shr eax 10h +
shr ebx 10h +
shr ecx 10h +
shr edx 10h +
movzx esi al +
movzx edi ah +
movq mm2 [ebp+esi*8+arg_37F8] +
movq mm3 [ebp+edi*8+arg_37F8] +
movzx esi bl +
movzx edi bh +
pxor mm2 [ebp+esi*8+arg_27F8] +
pxor mm3 [ebp+edi*8+arg_27F8] +
movzx esi cl +
movzx edi ch +
pxor mm2 [ebp+esi*8+arg_17F8] +
pxor mm3 [ebp+edi*8+arg_17F8] +
movzx esi dl +
movzx edi dh +
pxor mm2 [ebp+esi*8+arg_7F8] +
pxor mm3 [ebp+edi*8+arg_7F8] +
movd eax xmm0 +
movd ebx xmm1 +
movd ecx xmm2 +
movd edx xmm3 +
pshufd xmm0 xmm0 +
pshufd xmm1 xmm1 +
pshufd xmm2 xmm2 +
pshufd xmm3 xmm3 +
movzx esi al +
movzx edi ah +
movq mm4 [ebp+esi*8+arg_37F8] +
movq mm5 [ebp+edi*8+arg_37F8] +
movzx esi bl +
movzx edi bh +
pxor mm4 [ebp+esi*8+arg_27F8] +
pxor mm5 [ebp+edi*8+arg_27F8] +
movzx esi cl +
movzx edi ch +
pxor mm4 [ebp+esi*8+arg_17F8] +
pxor mm5 [ebp+edi*8+arg_17F8] +
movzx esi dl +
movzx edi dh +
pxor mm4 [ebp+esi*8+arg_7F8] +
pxor mm5 [ebp+edi*8+arg_7F8] +
shr eax 10h +
shr ebx 10h +
shr ecx 10h +
shr edx 10h +
movzx esi al +
movzx edi ah +
movq mm6 [ebp+esi*8+arg_37F8] +
movq mm7 [ebp+edi*8+arg_37F8] +
movzx esi bl +
movzx edi bh +
pxor mm6 [ebp+esi*8+arg_27F8] +
pxor mm7 [ebp+edi*8+arg_27F8] +
movzx esi cl +
movzx edi ch +
pxor mm6 [ebp+esi*8+arg_17F8] +
pxor mm7 [ebp+edi*8+arg_17F8] +
movzx esi dl +
movzx edi dh +
pxor mm6 [ebp+esi*8+arg_7F8] +
pxor mm7 [ebp+edi*8+arg_7F8] +
movd eax xmm0 +
movd ebx xmm1 +
movd ecx xmm2 +
movd edx xmm3 +
pshufd xmm0 xmm0 +
pshufd xmm1 xmm1 +
pshufd xmm2 xmm2 +
pshufd xmm3 xmm3 +
movzx esi al +
movzx edi ah +
pxor mm0 [ebp+esi*8+arg_2FF8] +
pxor mm1 [ebp+edi*8+arg_2FF8] +
movzx esi bl +
movzx edi bh +
pxor mm0 [ebp+esi*8+arg_1FF8] +
pxor mm1 [ebp+edi*8+arg_1FF8] +
movzx esi cl +
movzx edi ch +
pxor mm0 [ebp+esi*8+arg_FF8] +
pxor mm1 [ebp+edi*8+arg_FF8] +
movzx esi dl +
movzx edi dh +
pxor mm0 qword ptr [ebp+esi*8+0] +
pxor mm1 qword ptr [ebp+edi*8+0] +
shr eax 10h +
shr ebx 10h +
shr ecx 10h +
shr edx 10h +
movzx esi al +
movzx edi ah +
pxor mm2 [ebp+esi*8+arg_2FF8] +
pxor mm3 [ebp+edi*8+arg_2FF8] +
movzx esi bl +
movzx edi bh +
pxor mm2 [ebp+esi*8+arg_1FF8] +
pxor mm3 [ebp+edi*8+arg_1FF8] +
movzx esi cl +
movzx edi ch +
pxor mm2 [ebp+esi*8+arg_FF8] +
pxor mm3 [ebp+edi*8+arg_FF8] +
movzx esi dl +
movzx edi dh +
pxor mm2 qword ptr [ebp+esi*8+0] +
pxor mm3 qword ptr [ebp+edi*8+0] +
movd eax xmm0 +
movd ebx xmm1 +
movd ecx xmm2 +
movd edx xmm3 +
movzx esi al +
movzx edi ah +
pxor mm4 [ebp+esi*8+arg_2FF8] +
pxor mm5 [ebp+edi*8+arg_2FF8] +
movzx esi bl +
movzx edi bh +
pxor mm4 [ebp+esi*8+arg_1FF8] +
pxor mm5 [ebp+edi*8+arg_1FF8] +
movzx esi cl +
movzx edi ch +
pxor mm4 [ebp+esi*8+arg_FF8] +
pxor mm5 [ebp+edi*8+arg_FF8] +
movzx esi dl +
movzx edi dh +
pxor mm4 qword ptr [ebp+esi*8+0] +
pxor mm5 qword ptr [ebp+edi*8+0] +
shr eax 10h +
shr ebx 10h +
shr ecx 10h +
shr edx 10h +
movzx esi al +
movzx edi ah +
pxor mm6 [ebp+esi*8+arg_2FF8] +
pxor mm7 [ebp+edi*8+arg_2FF8] +
movzx esi bl +
movzx edi bh +
pxor mm6 [ebp+esi*8+arg_1FF8] +
pxor mm7 [ebp+edi*8+arg_1FF8] +
movzx esi cl +
movzx edi ch +
pxor mm6 [ebp+esi*8+arg_FF8] +
pxor mm7 [ebp+edi*8+arg_FF8] +
movzx esi dl +
movzx edi dh +
pxor mm6 qword ptr [ebp+esi*8+0] +
pxor mm7 qword ptr [ebp+edi*8+0] +
movq2dq xmm0 mm0 +
movq2dq xmm4 mm1 +
movq2dq xmm1 mm2 +
movq2dq xmm5 mm3 +
movq2dq xmm2 mm4 +
movq2dq xmm6 mm5 +
movq2dq xmm3 mm6 +
movq2dq xmm7 mm7 +
movlhps xmm0 xmm4 +
movlhps xmm1 xmm5 +
movlhps xmm2 xmm6 +
movlhps xmm3 xmm7 +
movups xmm4 oword ptr [esp+98h+var_48] +
movups xmm5 oword ptr [esp+98h+var_38] +
movups xmm6 oword ptr [esp+98h+var_28] +
movups xmm7 oword ptr [esp+98h+var_18] +
mov esi [esp+98h+var_90] +
dec esi  +
jnz loc_4214A0  +
pxor xmm0 xmm4 +
pxor xmm1 xmm5 +
pxor xmm2 xmm6 +
pxor xmm3 xmm7 +
mov ebp [esp+98h+var_98] +
mov esi [ebp+arg_DC] +
mov edi [esp+98h+var_94] +
movups xmm4 oword ptr [esi] +
movups xmm5 oword ptr [esi+10h] +
movups xmm6 oword ptr [esi+20h] +
movups xmm7 oword ptr [esi+30h] +
pxor xmm0 xmm4 +
pxor xmm1 xmm5 +
pxor xmm2 xmm6 +
pxor xmm3 xmm7 +
movups xmm4 oword ptr [edi] +
movups xmm5 oword ptr [edi+10h] +
movups xmm6 oword ptr [edi+20h] +
movups xmm7 oword ptr [edi+30h] +
pxor xmm0 xmm4 +
pxor xmm1 xmm5 +
pxor xmm2 xmm6 +
pxor xmm3 xmm7 +
movups oword ptr [esi] xmm0 +
movups oword ptr [esi+10h] xmm1 +
movups oword ptr [esi+20h] xmm2 +
movups oword ptr [esi+30h] xmm3 +
mov esi [ebp+arg_E0] +
mov edi [ebp+arg_E8] +
mov [esp+98h+var_94] esi +
mov [esp+98h+var_8C] edi +
mov ebp [ebp+arg_D8] +
movd eax xmm0 +
movd ebx xmm1 +
movd ecx xmm2 +
movd edx xmm3 +
pshufd xmm0 xmm0 +
pshufd xmm1 xmm1 +
pshufd xmm2 xmm2 +
pshufd xmm3 xmm3 +
movzx esi al +
movzx edi ah +
movq mm0 [ebp+esi*8+arg_37F8] +
movq mm1 [ebp+edi*8+arg_37F8] +
movzx esi bl +
movzx edi bh +
pxor mm0 [ebp+esi*8+arg_27F8] +
pxor mm1 [ebp+edi*8+arg_27F8] +
movzx esi cl +
movzx edi ch +
pxor mm0 [ebp+esi*8+arg_17F8] +
pxor mm1 [ebp+edi*8+arg_17F8] +
movzx esi dl +
movzx edi dh +
pxor mm0 [ebp+esi*8+arg_7F8] +
pxor mm1 [ebp+edi*8+arg_7F8] +
shr eax 10h +
shr ebx 10h +
shr ecx 10h +
shr edx 10h +
movzx esi al +
movzx edi ah +
movq mm2 [ebp+esi*8+arg_37F8] +
movq mm3 [ebp+edi*8+arg_37F8] +
movzx esi bl +
movzx edi bh +
pxor mm2 [ebp+esi*8+arg_27F8] +
pxor mm3 [ebp+edi*8+arg_27F8] +
movzx esi cl +
movzx edi ch +
pxor mm2 [ebp+esi*8+arg_17F8] +
pxor mm3 [ebp+edi*8+arg_17F8] +
movzx esi dl +
movzx edi dh +
pxor mm2 [ebp+esi*8+arg_7F8] +
pxor mm3 [ebp+edi*8+arg_7F8] +
movd eax xmm0 +
movd ebx xmm1 +
movd ecx xmm2 +
movd edx xmm3 +
pshufd xmm0 xmm0 +
pshufd xmm1 xmm1 +
pshufd xmm2 xmm2 +
pshufd xmm3 xmm3 +
movzx esi al +
movzx edi ah +
movq mm4 [ebp+esi*8+arg_37F8] +
movq mm5 [ebp+edi*8+arg_37F8] +
movzx esi bl +
movzx edi bh +
pxor mm4 [ebp+esi*8+arg_27F8] +
pxor mm5 [ebp+edi*8+arg_27F8] +
movzx esi cl +
movzx edi ch +
pxor mm4 [ebp+esi*8+arg_17F8] +
pxor mm5 [ebp+edi*8+arg_17F8] +
movzx esi dl +
movzx edi dh +
pxor mm4 [ebp+esi*8+arg_7F8] +
pxor mm5 [ebp+edi*8+arg_7F8] +
shr eax 10h +
shr ebx 10h +
shr ecx 10h +
shr edx 10h +
movzx esi al +
movzx edi ah +
movq mm6 [ebp+esi*8+arg_37F8] +
movq mm7 [ebp+edi*8+arg_37F8] +
movzx esi bl +
movzx edi bh +
pxor mm6 [ebp+esi*8+arg_27F8] +
pxor mm7 [ebp+edi*8+arg_27F8] +
movzx esi cl +
movzx edi ch +
pxor mm6 [ebp+esi*8+arg_17F8] +
pxor mm7 [ebp+edi*8+arg_17F8] +
movzx esi dl +
movzx edi dh +
pxor mm6 [ebp+esi*8+arg_7F8] +
pxor mm7 [ebp+edi*8+arg_7F8] +
movd eax xmm0 +
movd ebx xmm1 +
movd ecx xmm2 +
movd edx xmm3 +
pshufd xmm0 xmm0 +
pshufd xmm1 xmm1 +
pshufd xmm2 xmm2 +
pshufd xmm3 xmm3 +
movzx esi al +
movzx edi ah +
pxor mm0 [ebp+esi*8+arg_2FF8] +
pxor mm1 [ebp+edi*8+arg_2FF8] +
movzx esi bl +
movzx edi bh +
pxor mm0 [ebp+esi*8+arg_1FF8] +
pxor mm1 [ebp+edi*8+arg_1FF8] +
movzx esi cl +
movzx edi ch +
pxor mm0 [ebp+esi*8+arg_FF8] +
pxor mm1 [ebp+edi*8+arg_FF8] +
movzx esi dl +
movzx edi dh +
pxor mm0 qword ptr [ebp+esi*8+0] +
pxor mm1 qword ptr [ebp+edi*8+0] +
shr eax 10h +
shr ebx 10h +
shr ecx 10h +
shr edx 10h +
movzx esi al +
movzx edi ah +
pxor mm2 [ebp+esi*8+arg_2FF8] +
pxor mm3 [ebp+edi*8+arg_2FF8] +
movzx esi bl +
movzx edi bh +
pxor mm2 [ebp+esi*8+arg_1FF8] +
pxor mm3 [ebp+edi*8+arg_1FF8] +
movzx esi cl +
movzx edi ch +
pxor mm2 [ebp+esi*8+arg_FF8] +
pxor mm3 [ebp+edi*8+arg_FF8] +
movzx esi dl +
movzx edi dh +
pxor mm2 qword ptr [ebp+esi*8+0] +
pxor mm3 qword ptr [ebp+edi*8+0] +
movd eax xmm0 +
movd ebx xmm1 +
movd ecx xmm2 +
movd edx xmm3 +
movzx esi al +
movzx edi ah +
pxor mm4 [ebp+esi*8+arg_2FF8] +
pxor mm5 [ebp+edi*8+arg_2FF8] +
movzx esi bl +
movzx edi bh +
pxor mm4 [ebp+esi*8+arg_1FF8] +
pxor mm5 [ebp+edi*8+arg_1FF8] +
movzx esi cl +
movzx edi ch +
pxor mm4 [ebp+esi*8+arg_FF8] +
pxor mm5 [ebp+edi*8+arg_FF8] +
movzx esi dl +
movzx edi dh +
pxor mm4 qword ptr [ebp+esi*8+0] +
pxor mm5 qword ptr [ebp+edi*8+0] +
shr eax 10h +
shr ebx 10h +
shr ecx 10h +
shr edx 10h +
movzx esi al +
movzx edi ah +
pxor mm6 [ebp+esi*8+arg_2FF8] +
pxor mm7 [ebp+edi*8+arg_2FF8] +
movzx esi bl +
movzx edi bh +
pxor mm6 [ebp+esi*8+arg_1FF8] +
pxor mm7 [ebp+edi*8+arg_1FF8] +
movzx esi cl +
movzx edi ch +
pxor mm6 [ebp+esi*8+arg_FF8] +
pxor mm7 [ebp+edi*8+arg_FF8] +
movzx esi dl +
movzx edi dh +
pxor mm6 qword ptr [ebp+esi*8+0] +
pxor mm7 qword ptr [ebp+edi*8+0] +
movq2dq xmm0 mm0 +
movq2dq xmm4 mm1 +
movq2dq xmm1 mm2 +
movq2dq xmm5 mm3 +
movq2dq xmm2 mm4 +
movq2dq xmm6 mm5 +
movq2dq xmm3 mm6 +
movq2dq xmm7 mm7 +
movlhps xmm0 xmm4 +
movlhps xmm1 xmm5 +
movlhps xmm2 xmm6 +
movlhps xmm3 xmm7 +
mov eax [esp+98h+var_94] +
movups xmm4 oword ptr [eax] +
movups xmm5 oword ptr [eax+10h] +
movups xmm6 oword ptr [eax+20h] +
movups xmm7 oword ptr [eax+30h] +
mov esi 0Ch +
mov [esp+98h+var_90] esi +
movups oword ptr [esp+98h+var_88] xmm0 +
movups oword ptr [esp+98h+var_78] xmm1 +
movups oword ptr [esp+98h+var_68] xmm2 +
movups oword ptr [esp+98h+var_58] xmm3 +
pxor xmm0 xmm4 +
pxor xmm1 xmm5 +
pxor xmm2 xmm6 +
pxor xmm3 xmm7 +
movd eax xmm0 +
movd ebx xmm1 +
movd ecx xmm2 +
movd edx xmm3 +
pshufd xmm0 xmm0 +
pshufd xmm1 xmm1 +
pshufd xmm2 xmm2 +
pshufd xmm3 xmm3 +
movzx esi al +
movzx edi ah +
movq mm0 [ebp+esi*8+arg_37F8] +
movq mm1 [ebp+edi*8+arg_37F8] +
movzx esi bl +
movzx edi bh +
pxor mm0 [ebp+esi*8+arg_27F8] +
pxor mm1 [ebp+edi*8+arg_27F8] +
movzx esi cl +
movzx edi ch +
pxor mm0 [ebp+esi*8+arg_17F8] +
pxor mm1 [ebp+edi*8+arg_17F8] +
movzx esi dl +
movzx edi dh +
pxor mm0 [ebp+esi*8+arg_7F8] +
pxor mm1 [ebp+edi*8+arg_7F8] +
shr eax 10h +
shr ebx 10h +
shr ecx 10h +
shr edx 10h +
movzx esi al +
movzx edi ah +
movq mm2 [ebp+esi*8+arg_37F8] +
movq mm3 [ebp+edi*8+arg_37F8] +
movzx esi bl +
movzx edi bh +
pxor mm2 [ebp+esi*8+arg_27F8] +
pxor mm3 [ebp+edi*8+arg_27F8] +
movzx esi cl +
movzx edi ch +
pxor mm2 [ebp+esi*8+arg_17F8] +
pxor mm3 [ebp+edi*8+arg_17F8] +
movzx esi dl +
movzx edi dh +
pxor mm2 [ebp+esi*8+arg_7F8] +
pxor mm3 [ebp+edi*8+arg_7F8] +
movd eax xmm0 +
movd ebx xmm1 +
movd ecx xmm2 +
movd edx xmm3 +
pshufd xmm0 xmm0 +
pshufd xmm1 xmm1 +
pshufd xmm2 xmm2 +
pshufd xmm3 xmm3 +
movzx esi al +
movzx edi ah +
movq mm4 [ebp+esi*8+arg_37F8] +
movq mm5 [ebp+edi*8+arg_37F8] +
movzx esi bl +
movzx edi bh +
pxor mm4 [ebp+esi*8+arg_27F8] +
pxor mm5 [ebp+edi*8+arg_27F8] +
movzx esi cl +
movzx edi ch +
pxor mm4 [ebp+esi*8+arg_17F8] +
pxor mm5 [ebp+edi*8+arg_17F8] +
movzx esi dl +
movzx edi dh +
pxor mm4 [ebp+esi*8+arg_7F8] +
pxor mm5 [ebp+edi*8+arg_7F8] +
shr eax 10h +
shr ebx 10h +
shr ecx 10h +
shr edx 10h +
movzx esi al +
movzx edi ah +
movq mm6 [ebp+esi*8+arg_37F8] +
movq mm7 [ebp+edi*8+arg_37F8] +
movzx esi bl +
movzx edi bh +
pxor mm6 [ebp+esi*8+arg_27F8] +
pxor mm7 [ebp+edi*8+arg_27F8] +
movzx esi cl +
movzx edi ch +
pxor mm6 [ebp+esi*8+arg_17F8] +
pxor mm7 [ebp+edi*8+arg_17F8] +
movzx esi dl +
movzx edi dh +
pxor mm6 [ebp+esi*8+arg_7F8] +
pxor mm7 [ebp+edi*8+arg_7F8] +
movd eax xmm0 +
movd ebx xmm1 +
movd ecx xmm2 +
movd edx xmm3 +
pshufd xmm0 xmm0 +
pshufd xmm1 xmm1 +
pshufd xmm2 xmm2 +
pshufd xmm3 xmm3 +
movzx esi al +
movzx edi ah +
pxor mm0 [ebp+esi*8+arg_2FF8] +
pxor mm1 [ebp+edi*8+arg_2FF8] +
movzx esi bl +
movzx edi bh +
pxor mm0 [ebp+esi*8+arg_1FF8] +
pxor mm1 [ebp+edi*8+arg_1FF8] +
movzx esi cl +
movzx edi ch +
pxor mm0 [ebp+esi*8+arg_FF8] +
pxor mm1 [ebp+edi*8+arg_FF8] +
movzx esi dl +
movzx edi dh +
pxor mm0 qword ptr [ebp+esi*8+0] +
pxor mm1 qword ptr [ebp+edi*8+0] +
shr eax 10h +
shr ebx 10h +
shr ecx 10h +
shr edx 10h +
movzx esi al +
movzx edi ah +
pxor mm2 [ebp+esi*8+arg_2FF8] +
pxor mm3 [ebp+edi*8+arg_2FF8] +
movzx esi bl +
movzx edi bh +
pxor mm2 [ebp+esi*8+arg_1FF8] +
pxor mm3 [ebp+edi*8+arg_1FF8] +
movzx esi cl +
movzx edi ch +
pxor mm2 [ebp+esi*8+arg_FF8] +
pxor mm3 [ebp+edi*8+arg_FF8] +
movzx esi dl +
movzx edi dh +
pxor mm2 qword ptr [ebp+esi*8+0] +
pxor mm3 qword ptr [ebp+edi*8+0] +
movd eax xmm0 +
movd ebx xmm1 +
movd ecx xmm2 +
movd edx xmm3 +
movzx esi al +
movzx edi ah +
pxor mm4 [ebp+esi*8+arg_2FF8] +
pxor mm5 [ebp+edi*8+arg_2FF8] +
movzx esi bl +
movzx edi bh +
pxor mm4 [ebp+esi*8+arg_1FF8] +
pxor mm5 [ebp+edi*8+arg_1FF8] +
movzx esi cl +
movzx edi ch +
pxor mm4 [ebp+esi*8+arg_FF8] +
pxor mm5 [ebp+edi*8+arg_FF8] +
movzx esi dl +
movzx edi dh +
pxor mm4 qword ptr [ebp+esi*8+0] +
pxor mm5 qword ptr [ebp+edi*8+0] +
shr eax 10h +
shr ebx 10h +
shr ecx 10h +
shr edx 10h +
movzx esi al +
movzx edi ah +
pxor mm6 [ebp+esi*8+arg_2FF8] +
pxor mm7 [ebp+edi*8+arg_2FF8] +
movzx esi bl +
movzx edi bh +
pxor mm6 [ebp+esi*8+arg_1FF8] +
pxor mm7 [ebp+edi*8+arg_1FF8] +
movzx esi cl +
movzx edi ch +
pxor mm6 [ebp+esi*8+arg_FF8] +
pxor mm7 [ebp+edi*8+arg_FF8] +
movzx esi dl +
movzx edi dh +
pxor mm6 qword ptr [ebp+esi*8+0] +
pxor mm7 qword ptr [ebp+edi*8+0] +
movq2dq xmm0 mm0 +
movq2dq xmm4 mm1 +
movq2dq xmm1 mm2 +
movq2dq xmm5 mm3 +
movq2dq xmm2 mm4 +
movq2dq xmm6 mm5 +
movq2dq xmm3 mm6 +
movq2dq xmm7 mm7 +
movlhps xmm0 xmm4 +
movlhps xmm1 xmm5 +
movlhps xmm2 xmm6 +
movlhps xmm3 xmm7 +
movups oword ptr [esp+98h+var_48] xmm0 +
movups oword ptr [esp+98h+var_38] xmm1 +
movups oword ptr [esp+98h+var_28] xmm2 +
movups oword ptr [esp+98h+var_18] xmm3 +
mov edi [esp+98h+var_8C] +
movups xmm0 oword ptr [esp+98h+var_88] +
movups xmm1 oword ptr [esp+98h+var_78] +
movups xmm2 oword ptr [esp+98h+var_68] +
movups xmm3 oword ptr [esp+98h+var_58] +
movups xmm4 oword ptr [edi] +
movups xmm5 oword ptr [edi+10h] +
movups xmm6 oword ptr [edi+20h] +
movups xmm7 oword ptr [edi+30h] +
add edi 40h +
mov [esp+98h+var_8C] edi +
pxor xmm0 xmm4 +
pxor xmm1 xmm5 +
pxor xmm2 xmm6 +
pxor xmm3 xmm7 +
movd eax xmm0 +
movd ebx xmm1 +
movd ecx xmm2 +
movd edx xmm3 +
pshufd xmm0 xmm0 +
pshufd xmm1 xmm1 +
pshufd xmm2 xmm2 +
pshufd xmm3 xmm3 +
movzx esi al +
movzx edi ah +
movq mm0 [ebp+esi*8+arg_37F8] +
movq mm1 [ebp+edi*8+arg_37F8] +
movzx esi bl +
movzx edi bh +
pxor mm0 [ebp+esi*8+arg_27F8] +
pxor mm1 [ebp+edi*8+arg_27F8] +
movzx esi cl +
movzx edi ch +
pxor mm0 [ebp+esi*8+arg_17F8] +
pxor mm1 [ebp+edi*8+arg_17F8] +
movzx esi dl +
movzx edi dh +
pxor mm0 [ebp+esi*8+arg_7F8] +
pxor mm1 [ebp+edi*8+arg_7F8] +
shr eax 10h +
shr ebx 10h +
shr ecx 10h +
shr edx 10h +
movzx esi al +
movzx edi ah +
movq mm2 [ebp+esi*8+arg_37F8] +
movq mm3 [ebp+edi*8+arg_37F8] +
movzx esi bl +
movzx edi bh +
pxor mm2 [ebp+esi*8+arg_27F8] +
pxor mm3 [ebp+edi*8+arg_27F8] +
movzx esi cl +
movzx edi ch +
pxor mm2 [ebp+esi*8+arg_17F8] +
pxor mm3 [ebp+edi*8+arg_17F8] +
movzx esi dl +
movzx edi dh +
pxor mm2 [ebp+esi*8+arg_7F8] +
pxor mm3 [ebp+edi*8+arg_7F8] +
movd eax xmm0 +
movd ebx xmm1 +
movd ecx xmm2 +
movd edx xmm3 +
pshufd xmm0 xmm0 +
pshufd xmm1 xmm1 +
pshufd xmm2 xmm2 +
pshufd xmm3 xmm3 +
movzx esi al +
movzx edi ah +
movq mm4 [ebp+esi*8+arg_37F8] +
movq mm5 [ebp+edi*8+arg_37F8] +
movzx esi bl +
movzx edi bh +
pxor mm4 [ebp+esi*8+arg_27F8] +
pxor mm5 [ebp+edi*8+arg_27F8] +
movzx esi cl +
movzx edi ch +
pxor mm4 [ebp+esi*8+arg_17F8] +
pxor mm5 [ebp+edi*8+arg_17F8] +
movzx esi dl +
movzx edi dh +
pxor mm4 [ebp+esi*8+arg_7F8] +
pxor mm5 [ebp+edi*8+arg_7F8] +
shr eax 10h +
shr ebx 10h +
shr ecx 10h +
shr edx 10h +
movzx esi al +
movzx edi ah +
movq mm6 [ebp+esi*8+arg_37F8] +
movq mm7 [ebp+edi*8+arg_37F8] +
movzx esi bl +
movzx edi bh +
pxor mm6 [ebp+esi*8+arg_27F8] +
pxor mm7 [ebp+edi*8+arg_27F8] +
movzx esi cl +
movzx edi ch +
pxor mm6 [ebp+esi*8+arg_17F8] +
pxor mm7 [ebp+edi*8+arg_17F8] +
movzx esi dl +
movzx edi dh +
pxor mm6 [ebp+esi*8+arg_7F8] +
pxor mm7 [ebp+edi*8+arg_7F8] +
movd eax xmm0 +
movd ebx xmm1 +
movd ecx xmm2 +
movd edx xmm3 +
pshufd xmm0 xmm0 +
pshufd xmm1 xmm1 +
pshufd xmm2 xmm2 +
pshufd xmm3 xmm3 +
movzx esi al +
movzx edi ah +
pxor mm0 [ebp+esi*8+arg_2FF8] +
pxor mm1 [ebp+edi*8+arg_2FF8] +
movzx esi bl +
movzx edi bh +
pxor mm0 [ebp+esi*8+arg_1FF8] +
pxor mm1 [ebp+edi*8+arg_1FF8] +
movzx esi cl +
movzx edi ch +
pxor mm0 [ebp+esi*8+arg_FF8] +
pxor mm1 [ebp+edi*8+arg_FF8] +
movzx esi dl +
movzx edi dh +
pxor mm0 qword ptr [ebp+esi*8+0] +
pxor mm1 qword ptr [ebp+edi*8+0] +
shr eax 10h +
shr ebx 10h +
shr ecx 10h +
shr edx 10h +
movzx esi al +
movzx edi ah +
pxor mm2 [ebp+esi*8+arg_2FF8] +
pxor mm3 [ebp+edi*8+arg_2FF8] +
movzx esi bl +
movzx edi bh +
pxor mm2 [ebp+esi*8+arg_1FF8] +
pxor mm3 [ebp+edi*8+arg_1FF8] +
movzx esi cl +
movzx edi ch +
pxor mm2 [ebp+esi*8+arg_FF8] +
pxor mm3 [ebp+edi*8+arg_FF8] +
movzx esi dl +
movzx edi dh +
pxor mm2 qword ptr [ebp+esi*8+0] +
pxor mm3 qword ptr [ebp+edi*8+0] +
movd eax xmm0 +
movd ebx xmm1 +
movd ecx xmm2 +
movd edx xmm3 +
movzx esi al +
movzx edi ah +
pxor mm4 [ebp+esi*8+arg_2FF8] +
pxor mm5 [ebp+edi*8+arg_2FF8] +
movzx esi bl +
movzx edi bh +
pxor mm4 [ebp+esi*8+arg_1FF8] +
pxor mm5 [ebp+edi*8+arg_1FF8] +
movzx esi cl +
movzx edi ch +
pxor mm4 [ebp+esi*8+arg_FF8] +
pxor mm5 [ebp+edi*8+arg_FF8] +
movzx esi dl +
movzx edi dh +
pxor mm4 qword ptr [ebp+esi*8+0] +
pxor mm5 qword ptr [ebp+edi*8+0] +
shr eax 10h +
shr ebx 10h +
shr ecx 10h +
shr edx 10h +
movzx esi al +
movzx edi ah +
pxor mm6 [ebp+esi*8+arg_2FF8] +
pxor mm7 [ebp+edi*8+arg_2FF8] +
movzx esi bl +
movzx edi bh +
pxor mm6 [ebp+esi*8+arg_1FF8] +
pxor mm7 [ebp+edi*8+arg_1FF8] +
movzx esi cl +
movzx edi ch +
pxor mm6 [ebp+esi*8+arg_FF8] +
pxor mm7 [ebp+edi*8+arg_FF8] +
movzx esi dl +
movzx edi dh +
pxor mm6 qword ptr [ebp+esi*8+0] +
pxor mm7 qword ptr [ebp+edi*8+0] +
movq2dq xmm0 mm0 +
movq2dq xmm4 mm1 +
movq2dq xmm1 mm2 +
movq2dq xmm5 mm3 +
movq2dq xmm2 mm4 +
movq2dq xmm6 mm5 +
movq2dq xmm3 mm6 +
movq2dq xmm7 mm7 +
movlhps xmm0 xmm4 +
movlhps xmm1 xmm5 +
movlhps xmm2 xmm6 +
movlhps xmm3 xmm7 +
movups xmm4 oword ptr [esp+98h+var_48] +
movups xmm5 oword ptr [esp+98h+var_38] +
movups xmm6 oword ptr [esp+98h+var_28] +
movups xmm7 oword ptr [esp+98h+var_18] +
mov esi [esp+98h+var_90] +
dec esi  +
jnz loc_42205B  +
pxor xmm0 xmm4 +
pxor xmm1 xmm5 +
pxor xmm2 xmm6 +
pxor xmm3 xmm7 +
mov ebp [esp+98h+var_98] +
mov esi [ebp+arg_DC] +
mov edi [esp+98h+var_94] +
movups xmm4 oword ptr [esi] +
movups xmm5 oword ptr [esi+10h] +
movups xmm6 oword ptr [esi+20h] +
movups xmm7 oword ptr [esi+30h] +
pxor xmm0 xmm4 +
pxor xmm1 xmm5 +
pxor xmm2 xmm6 +
pxor xmm3 xmm7 +
movups xmm4 oword ptr [edi] +
movups xmm5 oword ptr [edi+10h] +
movups xmm6 oword ptr [edi+20h] +
movups xmm7 oword ptr [edi+30h] +
pxor xmm0 xmm4 +
pxor xmm1 xmm5 +
pxor xmm2 xmm6 +
pxor xmm3 xmm7 +
movups oword ptr [esi] xmm0 +
movups oword ptr [esi+10h] xmm1 +
movups oword ptr [esi+20h] xmm2 +
movups oword ptr [esi+30h] xmm3 +
mov esi [ebp+arg_E4] +
mov edi [ebp+arg_E8] +
mov [esp+98h+var_94] esi +
mov [esp+98h+var_8C] edi +
mov ebp [ebp+arg_D8] +
movd eax xmm0 +
movd ebx xmm1 +
movd ecx xmm2 +
movd edx xmm3 +
pshufd xmm0 xmm0 +
pshufd xmm1 xmm1 +
pshufd xmm2 xmm2 +
pshufd xmm3 xmm3 +
movzx esi al +
movzx edi ah +
movq mm0 [ebp+esi*8+arg_37F8] +
movq mm1 [ebp+edi*8+arg_37F8] +
movzx esi bl +
movzx edi bh +
pxor mm0 [ebp+esi*8+arg_27F8] +
pxor mm1 [ebp+edi*8+arg_27F8] +
movzx esi cl +
movzx edi ch +
pxor mm0 [ebp+esi*8+arg_17F8] +
pxor mm1 [ebp+edi*8+arg_17F8] +
movzx esi dl +
movzx edi dh +
pxor mm0 [ebp+esi*8+arg_7F8] +
pxor mm1 [ebp+edi*8+arg_7F8] +
shr eax 10h +
shr ebx 10h +
shr ecx 10h +
shr edx 10h +
movzx esi al +
movzx edi ah +
movq mm2 [ebp+esi*8+arg_37F8] +
movq mm3 [ebp+edi*8+arg_37F8] +
movzx esi bl +
movzx edi bh +
pxor mm2 [ebp+esi*8+arg_27F8] +
pxor mm3 [ebp+edi*8+arg_27F8] +
movzx esi cl +
movzx edi ch +
pxor mm2 [ebp+esi*8+arg_17F8] +
pxor mm3 [ebp+edi*8+arg_17F8] +
movzx esi dl +
movzx edi dh +
pxor mm2 [ebp+esi*8+arg_7F8] +
pxor mm3 [ebp+edi*8+arg_7F8] +
movd eax xmm0 +
movd ebx xmm1 +
movd ecx xmm2 +
movd edx xmm3 +
pshufd xmm0 xmm0 +
pshufd xmm1 xmm1 +
pshufd xmm2 xmm2 +
pshufd xmm3 xmm3 +
movzx esi al +
movzx edi ah +
movq mm4 [ebp+esi*8+arg_37F8] +
movq mm5 [ebp+edi*8+arg_37F8] +
movzx esi bl +
movzx edi bh +
pxor mm4 [ebp+esi*8+arg_27F8] +
pxor mm5 [ebp+edi*8+arg_27F8] +
movzx esi cl +
movzx edi ch +
pxor mm4 [ebp+esi*8+arg_17F8] +
pxor mm5 [ebp+edi*8+arg_17F8] +
movzx esi dl +
movzx edi dh +
pxor mm4 [ebp+esi*8+arg_7F8] +
pxor mm5 [ebp+edi*8+arg_7F8] +
shr eax 10h +
shr ebx 10h +
shr ecx 10h +
shr edx 10h +
movzx esi al +
movzx edi ah +
movq mm6 [ebp+esi*8+arg_37F8] +
movq mm7 [ebp+edi*8+arg_37F8] +
movzx esi bl +
movzx edi bh +
pxor mm6 [ebp+esi*8+arg_27F8] +
pxor mm7 [ebp+edi*8+arg_27F8] +
movzx esi cl +
movzx edi ch +
pxor mm6 [ebp+esi*8+arg_17F8] +
pxor mm7 [ebp+edi*8+arg_17F8] +
movzx esi dl +
movzx edi dh +
pxor mm6 [ebp+esi*8+arg_7F8] +
pxor mm7 [ebp+edi*8+arg_7F8] +
movd eax xmm0 +
movd ebx xmm1 +
movd ecx xmm2 +
movd edx xmm3 +
pshufd xmm0 xmm0 +
pshufd xmm1 xmm1 +
pshufd xmm2 xmm2 +
pshufd xmm3 xmm3 +
movzx esi al +
movzx edi ah +
pxor mm0 [ebp+esi*8+arg_2FF8] +
pxor mm1 [ebp+edi*8+arg_2FF8] +
movzx esi bl +
movzx edi bh +
pxor mm0 [ebp+esi*8+arg_1FF8] +
pxor mm1 [ebp+edi*8+arg_1FF8] +
movzx esi cl +
movzx edi ch +
pxor mm0 [ebp+esi*8+arg_FF8] +
pxor mm1 [ebp+edi*8+arg_FF8] +
movzx esi dl +
movzx edi dh +
pxor mm0 qword ptr [ebp+esi*8+0] +
pxor mm1 qword ptr [ebp+edi*8+0] +
shr eax 10h +
shr ebx 10h +
shr ecx 10h +
shr edx 10h +
movzx esi al +
movzx edi ah +
pxor mm2 [ebp+esi*8+arg_2FF8] +
pxor mm3 [ebp+edi*8+arg_2FF8] +
movzx esi bl +
movzx edi bh +
pxor mm2 [ebp+esi*8+arg_1FF8] +
pxor mm3 [ebp+edi*8+arg_1FF8] +
movzx esi cl +
movzx edi ch +
pxor mm2 [ebp+esi*8+arg_FF8] +
pxor mm3 [ebp+edi*8+arg_FF8] +
movzx esi dl +
movzx edi dh +
pxor mm2 qword ptr [ebp+esi*8+0] +
pxor mm3 qword ptr [ebp+edi*8+0] +
movd eax xmm0 +
movd ebx xmm1 +
movd ecx xmm2 +
movd edx xmm3 +
movzx esi al +
movzx edi ah +
pxor mm4 [ebp+esi*8+arg_2FF8] +
pxor mm5 [ebp+edi*8+arg_2FF8] +
movzx esi bl +
movzx edi bh +
pxor mm4 [ebp+esi*8+arg_1FF8] +
pxor mm5 [ebp+edi*8+arg_1FF8] +
movzx esi cl +
movzx edi ch +
pxor mm4 [ebp+esi*8+arg_FF8] +
pxor mm5 [ebp+edi*8+arg_FF8] +
movzx esi dl +
movzx edi dh +
pxor mm4 qword ptr [ebp+esi*8+0] +
pxor mm5 qword ptr [ebp+edi*8+0] +
shr eax 10h +
shr ebx 10h +
shr ecx 10h +
shr edx 10h +
movzx esi al +
movzx edi ah +
pxor mm6 [ebp+esi*8+arg_2FF8] +
pxor mm7 [ebp+edi*8+arg_2FF8] +
movzx esi bl +
movzx edi bh +
pxor mm6 [ebp+esi*8+arg_1FF8] +
pxor mm7 [ebp+edi*8+arg_1FF8] +
movzx esi cl +
movzx edi ch +
pxor mm6 [ebp+esi*8+arg_FF8] +
pxor mm7 [ebp+edi*8+arg_FF8] +
movzx esi dl +
movzx edi dh +
pxor mm6 qword ptr [ebp+esi*8+0] +
pxor mm7 qword ptr [ebp+edi*8+0] +
movq2dq xmm0 mm0 +
movq2dq xmm4 mm1 +
movq2dq xmm1 mm2 +
movq2dq xmm5 mm3 +
movq2dq xmm2 mm4 +
movq2dq xmm6 mm5 +
movq2dq xmm3 mm6 +
movq2dq xmm7 mm7 +
movlhps xmm0 xmm4 +
movlhps xmm1 xmm5 +
movlhps xmm2 xmm6 +
movlhps xmm3 xmm7 +
mov eax [esp+98h+var_94] +
movups xmm4 oword ptr [eax] +
movups xmm5 oword ptr [eax+10h] +
movups xmm6 oword ptr [eax+20h] +
movups xmm7 oword ptr [eax+30h] +
mov esi 0Ch +
mov [esp+98h+var_90] esi +
movups oword ptr [esp+98h+var_88] xmm0 +
movups oword ptr [esp+98h+var_78] xmm1 +
movups oword ptr [esp+98h+var_68] xmm2 +
movups oword ptr [esp+98h+var_58] xmm3 +
pxor xmm0 xmm4 +
pxor xmm1 xmm5 +
pxor xmm2 xmm6 +
pxor xmm3 xmm7 +
movd eax xmm0 +
movd ebx xmm1 +
movd ecx xmm2 +
movd edx xmm3 +
pshufd xmm0 xmm0 +
pshufd xmm1 xmm1 +
pshufd xmm2 xmm2 +
pshufd xmm3 xmm3 +
movzx esi al +
movzx edi ah +
movq mm0 [ebp+esi*8+arg_37F8] +
movq mm1 [ebp+edi*8+arg_37F8] +
movzx esi bl +
movzx edi bh +
pxor mm0 [ebp+esi*8+arg_27F8] +
pxor mm1 [ebp+edi*8+arg_27F8] +
movzx esi cl +
movzx edi ch +
pxor mm0 [ebp+esi*8+arg_17F8] +
pxor mm1 [ebp+edi*8+arg_17F8] +
movzx esi dl +
movzx edi dh +
pxor mm0 [ebp+esi*8+arg_7F8] +
pxor mm1 [ebp+edi*8+arg_7F8] +
shr eax 10h +
shr ebx 10h +
shr ecx 10h +
shr edx 10h +
movzx esi al +
movzx edi ah +
movq mm2 [ebp+esi*8+arg_37F8] +
movq mm3 [ebp+edi*8+arg_37F8] +
movzx esi bl +
movzx edi bh +
pxor mm2 [ebp+esi*8+arg_27F8] +
pxor mm3 [ebp+edi*8+arg_27F8] +
movzx esi cl +
movzx edi ch +
pxor mm2 [ebp+esi*8+arg_17F8] +
pxor mm3 [ebp+edi*8+arg_17F8] +
movzx esi dl +
movzx edi dh +
pxor mm2 [ebp+esi*8+arg_7F8] +
pxor mm3 [ebp+edi*8+arg_7F8] +
movd eax xmm0 +
movd ebx xmm1 +
movd ecx xmm2 +
movd edx xmm3 +
pshufd xmm0 xmm0 +
pshufd xmm1 xmm1 +
pshufd xmm2 xmm2 +
pshufd xmm3 xmm3 +
movzx esi al +
movzx edi ah +
movq mm4 [ebp+esi*8+arg_37F8] +
movq mm5 [ebp+edi*8+arg_37F8] +
movzx esi bl +
movzx edi bh +
pxor mm4 [ebp+esi*8+arg_27F8] +
pxor mm5 [ebp+edi*8+arg_27F8] +
movzx esi cl +
movzx edi ch +
pxor mm4 [ebp+esi*8+arg_17F8] +
pxor mm5 [ebp+edi*8+arg_17F8] +
movzx esi dl +
movzx edi dh +
pxor mm4 [ebp+esi*8+arg_7F8] +
pxor mm5 [ebp+edi*8+arg_7F8] +
shr eax 10h +
shr ebx 10h +
shr ecx 10h +
shr edx 10h +
movzx esi al +
movzx edi ah +
movq mm6 [ebp+esi*8+arg_37F8] +
movq mm7 [ebp+edi*8+arg_37F8] +
movzx esi bl +
movzx edi bh +
pxor mm6 [ebp+esi*8+arg_27F8] +
pxor mm7 [ebp+edi*8+arg_27F8] +
movzx esi cl +
movzx edi ch +
pxor mm6 [ebp+esi*8+arg_17F8] +
pxor mm7 [ebp+edi*8+arg_17F8] +
movzx esi dl +
movzx edi dh +
pxor mm6 [ebp+esi*8+arg_7F8] +
pxor mm7 [ebp+edi*8+arg_7F8] +
movd eax xmm0 +
movd ebx xmm1 +
movd ecx xmm2 +
movd edx xmm3 +
pshufd xmm0 xmm0 +
pshufd xmm1 xmm1 +
pshufd xmm2 xmm2 +
pshufd xmm3 xmm3 +
movzx esi al +
movzx edi ah +
pxor mm0 [ebp+esi*8+arg_2FF8] +
pxor mm1 [ebp+edi*8+arg_2FF8] +
movzx esi bl +
movzx edi bh +
pxor mm0 [ebp+esi*8+arg_1FF8] +
pxor mm1 [ebp+edi*8+arg_1FF8] +
movzx esi cl +
movzx edi ch +
pxor mm0 [ebp+esi*8+arg_FF8] +
pxor mm1 [ebp+edi*8+arg_FF8] +
movzx esi dl +
movzx edi dh +
pxor mm0 qword ptr [ebp+esi*8+0] +
pxor mm1 qword ptr [ebp+edi*8+0] +
shr eax 10h +
shr ebx 10h +
shr ecx 10h +
shr edx 10h +
movzx esi al +
movzx edi ah +
pxor mm2 [ebp+esi*8+arg_2FF8] +
pxor mm3 [ebp+edi*8+arg_2FF8] +
movzx esi bl +
movzx edi bh +
pxor mm2 [ebp+esi*8+arg_1FF8] +
pxor mm3 [ebp+edi*8+arg_1FF8] +
movzx esi cl +
movzx edi ch +
pxor mm2 [ebp+esi*8+arg_FF8] +
pxor mm3 [ebp+edi*8+arg_FF8] +
movzx esi dl +
movzx edi dh +
pxor mm2 qword ptr [ebp+esi*8+0] +
pxor mm3 qword ptr [ebp+edi*8+0] +
movd eax xmm0 +
movd ebx xmm1 +
movd ecx xmm2 +
movd edx xmm3 +
movzx esi al +
movzx edi ah +
pxor mm4 [ebp+esi*8+arg_2FF8] +
pxor mm5 [ebp+edi*8+arg_2FF8] +
movzx esi bl +
movzx edi bh +
pxor mm4 [ebp+esi*8+arg_1FF8] +
pxor mm5 [ebp+edi*8+arg_1FF8] +
movzx esi cl +
movzx edi ch +
pxor mm4 [ebp+esi*8+arg_FF8] +
pxor mm5 [ebp+edi*8+arg_FF8] +
movzx esi dl +
movzx edi dh +
pxor mm4 qword ptr [ebp+esi*8+0] +
pxor mm5 qword ptr [ebp+edi*8+0] +
shr eax 10h +
shr ebx 10h +
shr ecx 10h +
shr edx 10h +
movzx esi al +
movzx edi ah +
pxor mm6 [ebp+esi*8+arg_2FF8] +
pxor mm7 [ebp+edi*8+arg_2FF8] +
movzx esi bl +
movzx edi bh +
pxor mm6 [ebp+esi*8+arg_1FF8] +
pxor mm7 [ebp+edi*8+arg_1FF8] +
movzx esi cl +
movzx edi ch +
pxor mm6 [ebp+esi*8+arg_FF8] +
pxor mm7 [ebp+edi*8+arg_FF8] +
movzx esi dl +
movzx edi dh +
pxor mm6 qword ptr [ebp+esi*8+0] +
pxor mm7 qword ptr [ebp+edi*8+0] +
movq2dq xmm0 mm0 +
movq2dq xmm4 mm1 +
movq2dq xmm1 mm2 +
movq2dq xmm5 mm3 +
movq2dq xmm2 mm4 +
movq2dq xmm6 mm5 +
movq2dq xmm3 mm6 +
movq2dq xmm7 mm7 +
movlhps xmm0 xmm4 +
movlhps xmm1 xmm5 +
movlhps xmm2 xmm6 +
movlhps xmm3 xmm7 +
movups oword ptr [esp+98h+var_48] xmm0 +
movups oword ptr [esp+98h+var_38] xmm1 +
movups oword ptr [esp+98h+var_28] xmm2 +
movups oword ptr [esp+98h+var_18] xmm3 +
mov edi [esp+98h+var_8C] +
movups xmm0 oword ptr [esp+98h+var_88] +
movups xmm1 oword ptr [esp+98h+var_78] +
movups xmm2 oword ptr [esp+98h+var_68] +
movups xmm3 oword ptr [esp+98h+var_58] +
movups xmm4 oword ptr [edi] +
movups xmm5 oword ptr [edi+10h] +
movups xmm6 oword ptr [edi+20h] +
movups xmm7 oword ptr [edi+30h] +
add edi 40h +
mov [esp+98h+var_8C] edi +
pxor xmm0 xmm4 +
pxor xmm1 xmm5 +
pxor xmm2 xmm6 +
pxor xmm3 xmm7 +
movd eax xmm0 +
movd ebx xmm1 +
movd ecx xmm2 +
movd edx xmm3 +
pshufd xmm0 xmm0 +
pshufd xmm1 xmm1 +
pshufd xmm2 xmm2 +
pshufd xmm3 xmm3 +
movzx esi al +
movzx edi ah +
movq mm0 [ebp+esi*8+arg_37F8] +
movq mm1 [ebp+edi*8+arg_37F8] +
movzx esi bl +
movzx edi bh +
pxor mm0 [ebp+esi*8+arg_27F8] +
pxor mm1 [ebp+edi*8+arg_27F8] +
movzx esi cl +
movzx edi ch +
pxor mm0 [ebp+esi*8+arg_17F8] +
pxor mm1 [ebp+edi*8+arg_17F8] +
movzx esi dl +
movzx edi dh +
pxor mm0 [ebp+esi*8+arg_7F8] +
pxor mm1 [ebp+edi*8+arg_7F8] +
shr eax 10h +
shr ebx 10h +
shr ecx 10h +
shr edx 10h +
movzx esi al +
movzx edi ah +
movq mm2 [ebp+esi*8+arg_37F8] +
movq mm3 [ebp+edi*8+arg_37F8] +
movzx esi bl +
movzx edi bh +
pxor mm2 [ebp+esi*8+arg_27F8] +
pxor mm3 [ebp+edi*8+arg_27F8] +
movzx esi cl +
movzx edi ch +
pxor mm2 [ebp+esi*8+arg_17F8] +
pxor mm3 [ebp+edi*8+arg_17F8] +
movzx esi dl +
movzx edi dh +
pxor mm2 [ebp+esi*8+arg_7F8] +
pxor mm3 [ebp+edi*8+arg_7F8] +
movd eax xmm0 +
movd ebx xmm1 +
movd ecx xmm2 +
movd edx xmm3 +
pshufd xmm0 xmm0 +
pshufd xmm1 xmm1 +
pshufd xmm2 xmm2 +
pshufd xmm3 xmm3 +
movzx esi al +
movzx edi ah +
movq mm4 [ebp+esi*8+arg_37F8] +
movq mm5 [ebp+edi*8+arg_37F8] +
movzx esi bl +
movzx edi bh +
pxor mm4 [ebp+esi*8+arg_27F8] +
pxor mm5 [ebp+edi*8+arg_27F8] +
movzx esi cl +
movzx edi ch +
pxor mm4 [ebp+esi*8+arg_17F8] +
pxor mm5 [ebp+edi*8+arg_17F8] +
movzx esi dl +
movzx edi dh +
pxor mm4 [ebp+esi*8+arg_7F8] +
pxor mm5 [ebp+edi*8+arg_7F8] +
shr eax 10h +
shr ebx 10h +
shr ecx 10h +
shr edx 10h +
movzx esi al +
movzx edi ah +
movq mm6 [ebp+esi*8+arg_37F8] +
movq mm7 [ebp+edi*8+arg_37F8] +
movzx esi bl +
movzx edi bh +
pxor mm6 [ebp+esi*8+arg_27F8] +
pxor mm7 [ebp+edi*8+arg_27F8] +
movzx esi cl +
movzx edi ch +
pxor mm6 [ebp+esi*8+arg_17F8] +
pxor mm7 [ebp+edi*8+arg_17F8] +
movzx esi dl +
movzx edi dh +
pxor mm6 [ebp+esi*8+arg_7F8] +
pxor mm7 [ebp+edi*8+arg_7F8] +
movd eax xmm0 +
movd ebx xmm1 +
movd ecx xmm2 +
movd edx xmm3 +
pshufd xmm0 xmm0 +
pshufd xmm1 xmm1 +
pshufd xmm2 xmm2 +
pshufd xmm3 xmm3 +
movzx esi al +
movzx edi ah +
pxor mm0 [ebp+esi*8+arg_2FF8] +
pxor mm1 [ebp+edi*8+arg_2FF8] +
movzx esi bl +
movzx edi bh +
pxor mm0 [ebp+esi*8+arg_1FF8] +
pxor mm1 [ebp+edi*8+arg_1FF8] +
movzx esi cl +
movzx edi ch +
pxor mm0 [ebp+esi*8+arg_FF8] +
pxor mm1 [ebp+edi*8+arg_FF8] +
movzx esi dl +
movzx edi dh +
pxor mm0 qword ptr [ebp+esi*8+0] +
pxor mm1 qword ptr [ebp+edi*8+0] +
shr eax 10h +
shr ebx 10h +
shr ecx 10h +
shr edx 10h +
movzx esi al +
movzx edi ah +
pxor mm2 [ebp+esi*8+arg_2FF8] +
pxor mm3 [ebp+edi*8+arg_2FF8] +
movzx esi bl +
movzx edi bh +
pxor mm2 [ebp+esi*8+arg_1FF8] +
pxor mm3 [ebp+edi*8+arg_1FF8] +
movzx esi cl +
movzx edi ch +
pxor mm2 [ebp+esi*8+arg_FF8] +
pxor mm3 [ebp+edi*8+arg_FF8] +
movzx esi dl +
movzx edi dh +
pxor mm2 qword ptr [ebp+esi*8+0] +
pxor mm3 qword ptr [ebp+edi*8+0] +
movd eax xmm0 +
movd ebx xmm1 +
movd ecx xmm2 +
movd edx xmm3 +
movzx esi al +
movzx edi ah +
pxor mm4 [ebp+esi*8+arg_2FF8] +
pxor mm5 [ebp+edi*8+arg_2FF8] +
movzx esi bl +
movzx edi bh +
pxor mm4 [ebp+esi*8+arg_1FF8] +
pxor mm5 [ebp+edi*8+arg_1FF8] +
movzx esi cl +
movzx edi ch +
pxor mm4 [ebp+esi*8+arg_FF8] +
pxor mm5 [ebp+edi*8+arg_FF8] +
movzx esi dl +
movzx edi dh +
pxor mm4 qword ptr [ebp+esi*8+0] +
pxor mm5 qword ptr [ebp+edi*8+0] +
shr eax 10h +
shr ebx 10h +
shr ecx 10h +
shr edx 10h +
movzx esi al +
movzx edi ah +
pxor mm6 [ebp+esi*8+arg_2FF8] +
pxor mm7 [ebp+edi*8+arg_2FF8] +
movzx esi bl +
movzx edi bh +
pxor mm6 [ebp+esi*8+arg_1FF8] +
pxor mm7 [ebp+edi*8+arg_1FF8] +
movzx esi cl +
movzx edi ch +
pxor mm6 [ebp+esi*8+arg_FF8] +
pxor mm7 [ebp+edi*8+arg_FF8] +
movzx esi dl +
movzx edi dh +
pxor mm6 qword ptr [ebp+esi*8+0] +
pxor mm7 qword ptr [ebp+edi*8+0] +
movq2dq xmm0 mm0 +
movq2dq xmm4 mm1 +
movq2dq xmm1 mm2 +
movq2dq xmm5 mm3 +
movq2dq xmm2 mm4 +
movq2dq xmm6 mm5 +
movq2dq xmm3 mm6 +
movq2dq xmm7 mm7 +
movlhps xmm0 xmm4 +
movlhps xmm1 xmm5 +
movlhps xmm2 xmm6 +
movlhps xmm3 xmm7 +
movups xmm4 oword ptr [esp+98h+var_48] +
movups xmm5 oword ptr [esp+98h+var_38] +
movups xmm6 oword ptr [esp+98h+var_28] +
movups xmm7 oword ptr [esp+98h+var_18] +
mov esi [esp+98h+var_90] +
dec esi  +
jnz loc_422C16  +
pxor xmm0 xmm4 +
pxor xmm1 xmm5 +
pxor xmm2 xmm6 +
pxor xmm3 xmm7 +
mov ebp [esp+98h+var_98] +
mov esi [ebp+arg_DC] +
mov edi [esp+98h+var_94] +
movups xmm4 oword ptr [esi] +
movups xmm5 oword ptr [esi+10h] +
movups xmm6 oword ptr [esi+20h] +
movups xmm7 oword ptr [esi+30h] +
pxor xmm0 xmm4 +
pxor xmm1 xmm5 +
pxor xmm2 xmm6 +
pxor xmm3 xmm7 +
movups xmm4 oword ptr [edi] +
movups xmm5 oword ptr [edi+10h] +
movups xmm6 oword ptr [edi+20h] +
movups xmm7 oword ptr [edi+30h] +
pxor xmm0 xmm4 +
pxor xmm1 xmm5 +
pxor xmm2 xmm6 +
pxor xmm3 xmm7 +
movups oword ptr [esi] xmm0 +
movups oword ptr [esi+10h] xmm1 +
movups oword ptr [esi+20h] xmm2 +
movups oword ptr [esi+30h] xmm3 +
add esp 90h +
pop esi  +
pop ebx  +
pop ebp  +
emms   +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_4] +
mov edi [ebp+arg_8] +
mov ebx [ebp+arg_0] +
xor edx edx +
xor ecx ecx +
add edx [esi] +
adc ecx 0 +
add edx [edi] +
adc ecx 0 +
mov [ebx] edx +
xor edx edx +
add ecx [esi+4] +
adc edx 0 +
add ecx [edi+4] +
adc edx 0 +
mov [ebx+4] ecx +
xor ecx ecx +
add edx [esi+8] +
adc ecx 0 +
add edx [edi+8] +
adc ecx 0 +
mov [ebx+8] edx +
xor edx edx +
add ecx [esi+0Ch] +
adc edx 0 +
add ecx [edi+0Ch] +
adc edx 0 +
mov [ebx+0Ch] ecx +
xor ecx ecx +
add edx [esi+10h] +
adc ecx 0 +
add edx [edi+10h] +
adc ecx 0 +
mov [ebx+10h] edx +
xor edx edx +
add ecx [esi+14h] +
adc edx 0 +
add ecx [edi+14h] +
adc edx 0 +
mov [ebx+14h] ecx +
xor ecx ecx +
add edx [esi+18h] +
adc ecx 0 +
add edx [edi+18h] +
adc ecx 0 +
mov [ebx+18h] edx +
xor edx edx +
add ecx [esi+1Ch] +
adc edx 0 +
add ecx [edi+1Ch] +
adc edx 0 +
mov [ebx+1Ch] ecx +
mov esi [ebp+arg_C] +
mov [esi] edx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_4] +
mov edi [ebp+arg_8] +
mov ebx [ebp+arg_0] +
xor edx edx +
xor eax eax +
add edx [esi] +
adc eax 0 +
add edx [edi] +
adc eax 0 +
mov [ebx] edx +
xor edx edx +
add eax [esi+4] +
adc edx 0 +
add eax [edi+4] +
adc edx 0 +
mov [ebx+4] eax +
mov esi [ebp+arg_C] +
mov [esi] edx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_4] +
mov edi [ebp+arg_8] +
mov ebx [ebp+arg_C] +
mov edx [ebx] +
mov ebx [ebp+arg_0] +
xor eax eax +
add edx [esi] +
adc eax 0 +
add edx [edi] +
adc eax 0 +
mov [ebx] edx +
xor edx edx +
add eax [esi+4] +
adc edx 0 +
add eax [edi+4] +
adc edx 0 +
mov [ebx+4] eax +
mov esi [ebp+arg_C] +
mov [esi] edx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_4] +
mov edi [ebp+arg_8] +
mov ebx [ebp+arg_0] +
xor edx edx +
mov eax [esi] +
xor ecx ecx +
sub eax [edi] +
adc ecx 0 +
sub eax edx +
adc ecx 0 +
mov [ebx] eax +
mov eax [esi+4] +
xor edx edx +
sub eax [edi+4] +
adc edx 0 +
sub eax ecx +
adc edx 0 +
mov [ebx+4] eax +
mov eax [esi+8] +
xor ecx ecx +
sub eax [edi+8] +
adc ecx 0 +
sub eax edx +
adc ecx 0 +
mov [ebx+8] eax +
mov eax [esi+0Ch] +
xor edx edx +
sub eax [edi+0Ch] +
adc edx 0 +
sub eax ecx +
adc edx 0 +
mov [ebx+0Ch] eax +
mov eax [esi+10h] +
xor ecx ecx +
sub eax [edi+10h] +
adc ecx 0 +
sub eax edx +
adc ecx 0 +
mov [ebx+10h] eax +
mov eax [esi+14h] +
xor edx edx +
sub eax [edi+14h] +
adc edx 0 +
sub eax ecx +
adc edx 0 +
mov [ebx+14h] eax +
mov eax [esi+18h] +
xor ecx ecx +
sub eax [edi+18h] +
adc ecx 0 +
sub eax edx +
adc ecx 0 +
mov [ebx+18h] eax +
mov eax [esi+1Ch] +
xor edx edx +
sub eax [edi+1Ch] +
adc edx 0 +
sub eax ecx +
adc edx 0 +
mov [ebx+1Ch] eax +
mov esi [ebp+arg_C] +
mov [esi] edx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_4] +
mov edi [ebp+arg_8] +
mov ebx [ebp+arg_0] +
xor edx edx +
mov eax [esi] +
xor ecx ecx +
sub eax [edi] +
adc ecx 0 +
sub eax edx +
adc ecx 0 +
mov [ebx] eax +
mov eax [esi+4] +
xor edx edx +
sub eax [edi+4] +
adc edx 0 +
sub eax ecx +
adc edx 0 +
mov [ebx+4] eax +
mov eax [esi+8] +
xor ecx ecx +
sub eax [edi+8] +
adc ecx 0 +
sub eax edx +
adc ecx 0 +
mov [ebx+8] eax +
mov eax [esi+0Ch] +
xor edx edx +
sub eax [edi+0Ch] +
adc edx 0 +
sub eax ecx +
adc edx 0 +
mov [ebx+0Ch] eax +
mov eax [esi+10h] +
xor ecx ecx +
sub eax [edi+10h] +
adc ecx 0 +
sub eax edx +
adc ecx 0 +
mov [ebx+10h] eax +
mov eax [esi+14h] +
xor edx edx +
sub eax [edi+14h] +
adc edx 0 +
sub eax ecx +
adc edx 0 +
mov [ebx+14h] eax +
mov eax [esi+18h] +
xor ecx ecx +
sub eax [edi+18h] +
adc ecx 0 +
sub eax edx +
adc ecx 0 +
mov [ebx+18h] eax +
mov eax [esi+1Ch] +
xor edx edx +
sub eax [edi+1Ch] +
adc edx 0 +
sub eax ecx +
adc edx 0 +
mov [ebx+1Ch] eax +
mov eax [esi+20h] +
xor ecx ecx +
sub eax [edi+20h] +
adc ecx 0 +
sub eax edx +
adc ecx 0 +
mov [ebx+20h] eax +
mov eax [esi+24h] +
xor edx edx +
sub eax [edi+24h] +
adc edx 0 +
sub eax ecx +
adc edx 0 +
mov [ebx+24h] eax +
mov esi [ebp+arg_C] +
mov [esi] edx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_4] +
mov edi [ebp+arg_8] +
mov ebx [ebp+arg_0] +
xor edx edx +
mov eax [esi] +
xor ecx ecx +
sub eax [edi] +
adc ecx 0 +
sub eax edx +
adc ecx 0 +
mov [ebx] eax +
mov eax [esi+4] +
xor edx edx +
sub eax [edi+4] +
adc edx 0 +
sub eax ecx +
adc edx 0 +
mov [ebx+4] eax +
mov esi [ebp+arg_C] +
mov [esi] edx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_4] +
mov edi [ebp+arg_8] +
mov ebx [ebp+arg_C] +
mov edx [ebx] +
mov ebx [ebp+arg_0] +
mov eax [esi] +
xor ecx ecx +
sub eax [edi] +
adc ecx 0 +
sub eax edx +
adc ecx 0 +
mov [ebx] eax +
mov eax [esi+4] +
xor edx edx +
sub eax [edi+4] +
adc edx 0 +
sub eax ecx +
adc edx 0 +
mov [ebx+4] eax +
mov esi [ebp+arg_C] +
mov [esi] edx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
jmp sub_4237A0  +
***
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_4] +
mov edi [ebp+arg_8] +
mov ebx [ebp+arg_0] +
push ebp  +
mov ebp ebx +
xor ecx ecx +
mov eax [esi] +
mul  dword ptr [edi] +
mov [ebp+0] eax +
mov ebx edx +
mov eax [esi] +
mul  dword ptr [edi+4] +
add ebx eax +
adc ecx 0 +
mov [ebp+4] ebx +
xor ebx ebx +
add ecx edx +
adc ebx 0 +
mov eax [esi+4] +
mul  dword ptr [edi] +
add [ebp+4] eax +
adc ecx edx +
adc ebx 0 +
mov eax [esi] +
mul  dword ptr [edi+8] +
add ecx eax +
adc ebx 0 +
mov [ebp+arg_0] ecx +
xor ecx ecx +
add ebx edx +
adc ecx 0 +
mov eax [esi+4] +
mul  dword ptr [edi+4] +
add [ebp+arg_0] eax +
adc ebx edx +
adc ecx 0 +
mov eax [esi+8] +
mul  dword ptr [edi] +
add [ebp+arg_0] eax +
adc ebx edx +
adc ecx 0 +
mov eax [esi] +
mul  dword ptr [edi+0Ch] +
add ebx eax +
adc ecx 0 +
mov [ebp+arg_4] ebx +
xor ebx ebx +
add ecx edx +
adc ebx 0 +
mov eax [esi+4] +
mul  dword ptr [edi+8] +
add [ebp+arg_4] eax +
adc ecx edx +
adc ebx 0 +
mov eax [esi+8] +
mul  dword ptr [edi+4] +
add [ebp+arg_4] eax +
adc ecx edx +
adc ebx 0 +
mov eax [esi+0Ch] +
mul  dword ptr [edi] +
add [ebp+arg_4] eax +
adc ecx edx +
adc ebx 0 +
mov eax [esi] +
mul  dword ptr [edi+10h] +
add ecx eax +
adc ebx 0 +
mov [ebp+arg_8] ecx +
xor ecx ecx +
add ebx edx +
adc ecx 0 +
mov eax [esi+4] +
mul  dword ptr [edi+0Ch] +
add [ebp+arg_8] eax +
adc ebx edx +
adc ecx 0 +
mov eax [esi+8] +
mul  dword ptr [edi+8] +
add [ebp+arg_8] eax +
adc ebx edx +
adc ecx 0 +
mov eax [esi+0Ch] +
mul  dword ptr [edi+4] +
add [ebp+arg_8] eax +
adc ebx edx +
adc ecx 0 +
mov eax [esi+10h] +
mul  dword ptr [edi] +
add [ebp+arg_8] eax +
adc ebx edx +
adc ecx 0 +
mov eax [esi] +
mul  dword ptr [edi+14h] +
add ebx eax +
adc ecx 0 +
mov [ebp+arg_C] ebx +
xor ebx ebx +
add ecx edx +
adc ebx 0 +
mov eax [esi+4] +
mul  dword ptr [edi+10h] +
add [ebp+arg_C] eax +
adc ecx edx +
adc ebx 0 +
mov eax [esi+8] +
mul  dword ptr [edi+0Ch] +
add [ebp+arg_C] eax +
adc ecx edx +
adc ebx 0 +
mov eax [esi+0Ch] +
mul  dword ptr [edi+8] +
add [ebp+arg_C] eax +
adc ecx edx +
adc ebx 0 +
mov eax [esi+10h] +
mul  dword ptr [edi+4] +
add [ebp+arg_C] eax +
adc ecx edx +
adc ebx 0 +
mov eax [esi+14h] +
mul  dword ptr [edi] +
add [ebp+arg_C] eax +
adc ecx edx +
adc ebx 0 +
mov eax [esi] +
mul  dword ptr [edi+18h] +
add ecx eax +
adc ebx 0 +
mov [ebp+arg_10] ecx +
xor ecx ecx +
add ebx edx +
adc ecx 0 +
mov eax [esi+4] +
mul  dword ptr [edi+14h] +
add [ebp+arg_10] eax +
adc ebx edx +
adc ecx 0 +
mov eax [esi+8] +
mul  dword ptr [edi+10h] +
add [ebp+arg_10] eax +
adc ebx edx +
adc ecx 0 +
mov eax [esi+0Ch] +
mul  dword ptr [edi+0Ch] +
add [ebp+arg_10] eax +
adc ebx edx +
adc ecx 0 +
mov eax [esi+10h] +
mul  dword ptr [edi+8] +
add [ebp+arg_10] eax +
adc ebx edx +
adc ecx 0 +
mov eax [esi+14h] +
mul  dword ptr [edi+4] +
add [ebp+arg_10] eax +
adc ebx edx +
adc ecx 0 +
mov eax [esi+18h] +
mul  dword ptr [edi] +
add [ebp+arg_10] eax +
adc ebx edx +
adc ecx 0 +
mov eax [esi] +
mul  dword ptr [edi+1Ch] +
add ebx eax +
adc ecx 0 +
mov [ebp+arg_14] ebx +
xor ebx ebx +
add ecx edx +
adc ebx 0 +
mov eax [esi+4] +
mul  dword ptr [edi+18h] +
add [ebp+arg_14] eax +
adc ecx edx +
adc ebx 0 +
mov eax [esi+8] +
mul  dword ptr [edi+14h] +
add [ebp+arg_14] eax +
adc ecx edx +
adc ebx 0 +
mov eax [esi+0Ch] +
mul  dword ptr [edi+10h] +
add [ebp+arg_14] eax +
adc ecx edx +
adc ebx 0 +
mov eax [esi+10h] +
mul  dword ptr [edi+0Ch] +
add [ebp+arg_14] eax +
adc ecx edx +
adc ebx 0 +
mov eax [esi+14h] +
mul  dword ptr [edi+8] +
add [ebp+arg_14] eax +
adc ecx edx +
adc ebx 0 +
mov eax [esi+18h] +
mul  dword ptr [edi+4] +
add [ebp+arg_14] eax +
adc ecx edx +
adc ebx 0 +
mov eax [esi+1Ch] +
mul  dword ptr [edi] +
add [ebp+arg_14] eax +
adc ecx edx +
adc ebx 0 +
mov eax [esi+4] +
mul  dword ptr [edi+1Ch] +
add ecx eax +
adc ebx 0 +
mov [ebp+arg_18] ecx +
xor ecx ecx +
add ebx edx +
adc ecx 0 +
mov eax [esi+8] +
mul  dword ptr [edi+18h] +
add [ebp+arg_18] eax +
adc ebx edx +
adc ecx 0 +
mov eax [esi+0Ch] +
mul  dword ptr [edi+14h] +
add [ebp+arg_18] eax +
adc ebx edx +
adc ecx 0 +
mov eax [esi+10h] +
mul  dword ptr [edi+10h] +
add [ebp+arg_18] eax +
adc ebx edx +
adc ecx 0 +
mov eax [esi+14h] +
mul  dword ptr [edi+0Ch] +
add [ebp+arg_18] eax +
adc ebx edx +
adc ecx 0 +
mov eax [esi+18h] +
mul  dword ptr [edi+8] +
add [ebp+arg_18] eax +
adc ebx edx +
adc ecx 0 +
mov eax [esi+1Ch] +
mul  dword ptr [edi+4] +
add [ebp+arg_18] eax +
adc ebx edx +
adc ecx 0 +
mov eax [esi+8] +
mul  dword ptr [edi+1Ch] +
add ebx eax +
adc ecx 0 +
mov [ebp+arg_1C] ebx +
xor ebx ebx +
add ecx edx +
adc ebx 0 +
mov eax [esi+0Ch] +
mul  dword ptr [edi+18h] +
add [ebp+arg_1C] eax +
adc ecx edx +
adc ebx 0 +
mov eax [esi+10h] +
mul  dword ptr [edi+14h] +
add [ebp+arg_1C] eax +
adc ecx edx +
adc ebx 0 +
mov eax [esi+14h] +
mul  dword ptr [edi+10h] +
add [ebp+arg_1C] eax +
adc ecx edx +
adc ebx 0 +
mov eax [esi+18h] +
mul  dword ptr [edi+0Ch] +
add [ebp+arg_1C] eax +
adc ecx edx +
adc ebx 0 +
mov eax [esi+1Ch] +
mul  dword ptr [edi+8] +
add [ebp+arg_1C] eax +
adc ecx edx +
adc ebx 0 +
mov eax [esi+0Ch] +
mul  dword ptr [edi+1Ch] +
add ecx eax +
adc ebx 0 +
mov [ebp+arg_20] ecx +
xor ecx ecx +
add ebx edx +
adc ecx 0 +
mov eax [esi+10h] +
mul  dword ptr [edi+18h] +
add [ebp+arg_20] eax +
adc ebx edx +
adc ecx 0 +
mov eax [esi+14h] +
mul  dword ptr [edi+14h] +
add [ebp+arg_20] eax +
adc ebx edx +
adc ecx 0 +
mov eax [esi+18h] +
mul  dword ptr [edi+10h] +
add [ebp+arg_20] eax +
adc ebx edx +
adc ecx 0 +
mov eax [esi+1Ch] +
mul  dword ptr [edi+0Ch] +
add [ebp+arg_20] eax +
adc ebx edx +
adc ecx 0 +
mov eax [esi+10h] +
mul  dword ptr [edi+1Ch] +
add ebx eax +
adc ecx 0 +
mov [ebp+arg_24] ebx +
xor ebx ebx +
add ecx edx +
adc ebx 0 +
mov eax [esi+14h] +
mul  dword ptr [edi+18h] +
add [ebp+arg_24] eax +
adc ecx edx +
adc ebx 0 +
mov eax [esi+18h] +
mul  dword ptr [edi+14h] +
add [ebp+arg_24] eax +
adc ecx edx +
adc ebx 0 +
mov eax [esi+1Ch] +
mul  dword ptr [edi+10h] +
add [ebp+arg_24] eax +
adc ecx edx +
adc ebx 0 +
mov eax [esi+14h] +
mul  dword ptr [edi+1Ch] +
add ecx eax +
adc ebx 0 +
mov [ebp+arg_28] ecx +
xor ecx ecx +
add ebx edx +
adc ecx 0 +
mov eax [esi+18h] +
mul  dword ptr [edi+18h] +
add [ebp+arg_28] eax +
adc ebx edx +
adc ecx 0 +
mov eax [esi+1Ch] +
mul  dword ptr [edi+14h] +
add [ebp+arg_28] eax +
adc ebx edx +
adc ecx 0 +
mov eax [esi+18h] +
mul  dword ptr [edi+1Ch] +
add ebx eax +
adc ecx 0 +
mov [ebp+arg_2C] ebx +
xor ebx ebx +
add ecx edx +
adc ebx 0 +
mov eax [esi+1Ch] +
mul  dword ptr [edi+18h] +
add [ebp+arg_2C] eax +
adc ecx edx +
adc ebx 0 +
mov eax [esi+1Ch] +
mul  dword ptr [edi+1Ch] +
add ecx eax +
adc ebx 0 +
mov [ebp+arg_30] ecx +
add ebx edx +
mov [ebp+arg_34] ebx +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
leave   +
retn   +
***
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_4] +
mov ebx [ebp+arg_0] +
push ebp  +
mov ebp ebx +
xor ecx ecx +
mov eax [esi] +
mul  dword ptr [esi] +
mov [ebp+0] eax +
mov ebx edx +
mov eax [esi] +
mul  dword ptr [esi+4] +
xor edi edi +
shld edx eax +
adc edi 0 +
shl eax 1 +
add ebx eax +
adc ecx 0 +
mov [ebp+4] ebx +
xor ebx ebx +
add ecx edx +
adc ebx edi +
mov eax [esi] +
mul  dword ptr [esi+8] +
xor edi edi +
shld edx eax +
adc edi 0 +
shl eax 1 +
add ecx eax +
adc ebx 0 +
mov [ebp+arg_0] ecx +
xor ecx ecx +
add ebx edx +
adc ecx edi +
mov eax [esi+4] +
mul  eax +
add [ebp+arg_0] eax +
adc ebx edx +
adc ecx 0 +
mov eax [esi] +
mul  dword ptr [esi+0Ch] +
xor edi edi +
shld edx eax +
adc edi 0 +
shl eax 1 +
add ebx eax +
adc ecx 0 +
mov [ebp+arg_4] ebx +
xor ebx ebx +
add ecx edx +
adc ebx edi +
mov eax [esi+4] +
mul  dword ptr [esi+8] +
xor edi edi +
shld edx eax +
adc edi 0 +
shl eax 1 +
add [ebp+arg_4] eax +
adc ecx edx +
adc ebx edi +
mov eax [esi] +
mul  dword ptr [esi+10h] +
xor edi edi +
shld edx eax +
adc edi 0 +
shl eax 1 +
add ecx eax +
adc ebx 0 +
mov [ebp+arg_8] ecx +
xor ecx ecx +
add ebx edx +
adc ecx edi +
mov eax [esi+4] +
mul  dword ptr [esi+0Ch] +
xor edi edi +
shld edx eax +
adc edi 0 +
shl eax 1 +
add [ebp+arg_8] eax +
adc ebx edx +
adc ecx edi +
mov eax [esi+8] +
mul  eax +
add [ebp+arg_8] eax +
adc ebx edx +
adc ecx 0 +
mov eax [esi] +
mul  dword ptr [esi+14h] +
xor edi edi +
shld edx eax +
adc edi 0 +
shl eax 1 +
add ebx eax +
adc ecx 0 +
mov [ebp+arg_C] ebx +
xor ebx ebx +
add ecx edx +
adc ebx edi +
mov eax [esi+4] +
mul  dword ptr [esi+10h] +
xor edi edi +
shld edx eax +
adc edi 0 +
shl eax 1 +
add [ebp+arg_C] eax +
adc ecx edx +
adc ebx edi +
mov eax [esi+8] +
mul  dword ptr [esi+0Ch] +
xor edi edi +
shld edx eax +
adc edi 0 +
shl eax 1 +
add [ebp+arg_C] eax +
adc ecx edx +
adc ebx edi +
mov eax [esi] +
mul  dword ptr [esi+18h] +
xor edi edi +
shld edx eax +
adc edi 0 +
shl eax 1 +
add ecx eax +
adc ebx 0 +
mov [ebp+arg_10] ecx +
xor ecx ecx +
add ebx edx +
adc ecx edi +
mov eax [esi+4] +
mul  dword ptr [esi+14h] +
xor edi edi +
shld edx eax +
adc edi 0 +
shl eax 1 +
add [ebp+arg_10] eax +
adc ebx edx +
adc ecx edi +
mov eax [esi+8] +
mul  dword ptr [esi+10h] +
xor edi edi +
shld edx eax +
adc edi 0 +
shl eax 1 +
add [ebp+arg_10] eax +
adc ebx edx +
adc ecx edi +
mov eax [esi+0Ch] +
mul  eax +
add [ebp+arg_10] eax +
adc ebx edx +
adc ecx 0 +
mov eax [esi] +
mul  dword ptr [esi+1Ch] +
xor edi edi +
shld edx eax +
adc edi 0 +
shl eax 1 +
add ebx eax +
adc ecx 0 +
mov [ebp+arg_14] ebx +
xor ebx ebx +
add ecx edx +
adc ebx edi +
mov eax [esi+4] +
mul  dword ptr [esi+18h] +
xor edi edi +
shld edx eax +
adc edi 0 +
shl eax 1 +
add [ebp+arg_14] eax +
adc ecx edx +
adc ebx edi +
mov eax [esi+8] +
mul  dword ptr [esi+14h] +
xor edi edi +
shld edx eax +
adc edi 0 +
shl eax 1 +
add [ebp+arg_14] eax +
adc ecx edx +
adc ebx edi +
mov eax [esi+0Ch] +
mul  dword ptr [esi+10h] +
xor edi edi +
shld edx eax +
adc edi 0 +
shl eax 1 +
add [ebp+arg_14] eax +
adc ecx edx +
adc ebx edi +
mov eax [esi+4] +
mul  dword ptr [esi+1Ch] +
xor edi edi +
shld edx eax +
adc edi 0 +
shl eax 1 +
add ecx eax +
adc ebx 0 +
mov [ebp+arg_18] ecx +
xor ecx ecx +
add ebx edx +
adc ecx edi +
mov eax [esi+8] +
mul  dword ptr [esi+18h] +
xor edi edi +
shld edx eax +
adc edi 0 +
shl eax 1 +
add [ebp+arg_18] eax +
adc ebx edx +
adc ecx edi +
mov eax [esi+0Ch] +
mul  dword ptr [esi+14h] +
xor edi edi +
shld edx eax +
adc edi 0 +
shl eax 1 +
add [ebp+arg_18] eax +
adc ebx edx +
adc ecx edi +
mov eax [esi+10h] +
mul  eax +
add [ebp+arg_18] eax +
adc ebx edx +
adc ecx 0 +
mov eax [esi+8] +
mul  dword ptr [esi+1Ch] +
xor edi edi +
shld edx eax +
adc edi 0 +
shl eax 1 +
add ebx eax +
adc ecx 0 +
mov [ebp+arg_1C] ebx +
xor ebx ebx +
add ecx edx +
adc ebx edi +
mov eax [esi+0Ch] +
mul  dword ptr [esi+18h] +
xor edi edi +
shld edx eax +
adc edi 0 +
shl eax 1 +
add [ebp+arg_1C] eax +
adc ecx edx +
adc ebx edi +
mov eax [esi+10h] +
mul  dword ptr [esi+14h] +
xor edi edi +
shld edx eax +
adc edi 0 +
shl eax 1 +
add [ebp+arg_1C] eax +
adc ecx edx +
adc ebx edi +
mov eax [esi+0Ch] +
mul  dword ptr [esi+1Ch] +
xor edi edi +
shld edx eax +
adc edi 0 +
shl eax 1 +
add ecx eax +
adc ebx 0 +
mov [ebp+arg_20] ecx +
xor ecx ecx +
add ebx edx +
adc ecx edi +
mov eax [esi+10h] +
mul  dword ptr [esi+18h] +
xor edi edi +
shld edx eax +
adc edi 0 +
shl eax 1 +
add [ebp+arg_20] eax +
adc ebx edx +
adc ecx edi +
mov eax [esi+14h] +
mul  eax +
add [ebp+arg_20] eax +
adc ebx edx +
adc ecx 0 +
mov eax [esi+10h] +
mul  dword ptr [esi+1Ch] +
xor edi edi +
shld edx eax +
adc edi 0 +
shl eax 1 +
add ebx eax +
adc ecx 0 +
mov [ebp+arg_24] ebx +
xor ebx ebx +
add ecx edx +
adc ebx edi +
mov eax [esi+14h] +
mul  dword ptr [esi+18h] +
xor edi edi +
shld edx eax +
adc edi 0 +
shl eax 1 +
add [ebp+arg_24] eax +
adc ecx edx +
adc ebx edi +
mov eax [esi+14h] +
mul  dword ptr [esi+1Ch] +
xor edi edi +
shld edx eax +
adc edi 0 +
shl eax 1 +
add ecx eax +
adc ebx 0 +
mov [ebp+arg_28] ecx +
xor ecx ecx +
add ebx edx +
adc ecx edi +
mov eax [esi+18h] +
mul  eax +
add [ebp+arg_28] eax +
adc ebx edx +
adc ecx 0 +
mov eax [esi+18h] +
mul  dword ptr [esi+1Ch] +
xor edi edi +
shld edx eax +
adc edi 0 +
shl eax 1 +
add ebx eax +
adc ecx 0 +
mov [ebp+arg_2C] ebx +
xor ebx ebx +
add ecx edx +
adc ebx edi +
mov eax [esi+1Ch] +
mul  dword ptr [esi+1Ch] +
add ecx eax +
adc ebx 0 +
mov [ebp+arg_30] ecx +
add ebx edx +
mov [ebp+arg_34] ebx +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
leave   +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor ebx ebx +
mov eax [edi] +
mov edx [edi+4] +
shld edx eax +
adc ebx 0 +
shl eax 1 +
mov [edi] eax +
mov [edi+4] edx +
xor ecx ecx +
mov eax [edi+8] +
mov edx [edi+0Ch] +
shld edx eax +
adc ecx 0 +
shl eax 1 +
add eax ebx +
mov [edi+8] eax +
mov [edi+0Ch] edx +
xor ebx ebx +
mov eax [edi+10h] +
mov edx [edi+14h] +
shld edx eax +
adc ebx 0 +
shl eax 1 +
add eax ecx +
mov [edi+10h] eax +
mov [edi+14h] edx +
xor ecx ecx +
mov eax [edi+18h] +
mov edx [edi+1Ch] +
shld edx eax +
adc ecx 0 +
shl eax 1 +
add eax ebx +
mov [edi+18h] eax +
mov [edi+1Ch] edx +
xor ebx ebx +
mov eax [edi+20h] +
mov edx [edi+24h] +
shld edx eax +
adc ebx 0 +
shl eax 1 +
add eax ecx +
mov [edi+20h] eax +
mov [edi+24h] edx +
xor ecx ecx +
mov eax [edi+28h] +
mov edx [edi+2Ch] +
shld edx eax +
adc ecx 0 +
shl eax 1 +
add eax ebx +
mov [edi+28h] eax +
mov [edi+2Ch] edx +
xor ebx ebx +
mov eax [edi+30h] +
mov edx [edi+34h] +
shld edx eax +
adc ebx 0 +
shl eax 1 +
add eax ecx +
mov [edi+30h] eax +
mov [edi+34h] edx +
xor ecx ecx +
mov eax [edi+38h] +
mov edx [edi+3Ch] +
shld edx eax +
adc ecx 0 +
shl eax 1 +
add eax ebx +
mov [edi+38h] eax +
mov [edi+3Ch] edx +
mov eax ecx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_4] +
mov edi [ebp+arg_8] +
mov ebx [ebp+arg_0] +
push ebp  +
mov ebp ebx +
xor ecx ecx +
mov eax [esi] +
mul  dword ptr [edi] +
add [ebp+0] eax +
adc edx 0 +
mov ebx edx +
mov eax [esi] +
mul  dword ptr [edi+4] +
add ebx eax +
adc ecx 0 +
add [ebp+4] ebx +
adc ecx 0 +
mov ebx 0 +
adc ebx 0 +
add ecx edx +
adc ebx 0 +
mov eax [esi+4] +
mul  dword ptr [edi] +
add [ebp+4] eax +
adc ecx edx +
adc ebx 0 +
mov eax [esi] +
mul  dword ptr [edi+8] +
add ecx eax +
adc ebx 0 +
add [ebp+arg_0] ecx +
adc ebx 0 +
mov ecx 0 +
adc ecx 0 +
add ebx edx +
adc ecx 0 +
mov eax [esi+4] +
mul  dword ptr [edi+4] +
add [ebp+arg_0] eax +
adc ebx edx +
adc ecx 0 +
mov eax [esi+8] +
mul  dword ptr [edi] +
add [ebp+arg_0] eax +
adc ebx edx +
adc ecx 0 +
mov eax [esi] +
mul  dword ptr [edi+0Ch] +
add ebx eax +
adc ecx 0 +
add [ebp+arg_4] ebx +
adc ecx 0 +
mov ebx 0 +
adc ebx 0 +
add ecx edx +
adc ebx 0 +
mov eax [esi+4] +
mul  dword ptr [edi+8] +
add [ebp+arg_4] eax +
adc ecx edx +
adc ebx 0 +
mov eax [esi+8] +
mul  dword ptr [edi+4] +
add [ebp+arg_4] eax +
adc ecx edx +
adc ebx 0 +
mov eax [esi+0Ch] +
mul  dword ptr [edi] +
add [ebp+arg_4] eax +
adc ecx edx +
adc ebx 0 +
mov eax [esi] +
mul  dword ptr [edi+10h] +
add ecx eax +
adc ebx 0 +
add [ebp+arg_8] ecx +
adc ebx 0 +
mov ecx 0 +
adc ecx 0 +
add ebx edx +
adc ecx 0 +
mov eax [esi+4] +
mul  dword ptr [edi+0Ch] +
add [ebp+arg_8] eax +
adc ebx edx +
adc ecx 0 +
mov eax [esi+8] +
mul  dword ptr [edi+8] +
add [ebp+arg_8] eax +
adc ebx edx +
adc ecx 0 +
mov eax [esi+0Ch] +
mul  dword ptr [edi+4] +
add [ebp+arg_8] eax +
adc ebx edx +
adc ecx 0 +
mov eax [esi] +
mul  dword ptr [edi+14h] +
add ebx eax +
adc ecx 0 +
add [ebp+arg_C] ebx +
adc ecx 0 +
mov ebx 0 +
adc ebx 0 +
add ecx edx +
adc ebx 0 +
mov eax [esi+4] +
mul  dword ptr [edi+10h] +
add [ebp+arg_C] eax +
adc ecx edx +
adc ebx 0 +
mov eax [esi+8] +
mul  dword ptr [edi+0Ch] +
add [ebp+arg_C] eax +
adc ecx edx +
adc ebx 0 +
mov eax [esi+0Ch] +
mul  dword ptr [edi+8] +
add [ebp+arg_C] eax +
adc ecx edx +
adc ebx 0 +
mov eax [esi] +
mul  dword ptr [edi+18h] +
add ecx eax +
adc ebx 0 +
add [ebp+arg_10] ecx +
adc ebx 0 +
mov ecx 0 +
adc ecx 0 +
add ebx edx +
adc ecx 0 +
mov eax [esi+4] +
mul  dword ptr [edi+14h] +
add [ebp+arg_10] eax +
adc ebx edx +
adc ecx 0 +
mov eax [esi+8] +
mul  dword ptr [edi+10h] +
add [ebp+arg_10] eax +
adc ebx edx +
adc ecx 0 +
mov eax [esi+0Ch] +
mul  dword ptr [edi+0Ch] +
add [ebp+arg_10] eax +
adc ebx edx +
adc ecx 0 +
mov eax [esi] +
mul  dword ptr [edi+1Ch] +
add ebx eax +
adc ecx 0 +
add [ebp+arg_14] ebx +
adc ecx 0 +
mov ebx 0 +
adc ebx 0 +
add ecx edx +
adc ebx 0 +
mov eax [esi+4] +
mul  dword ptr [edi+18h] +
add [ebp+arg_14] eax +
adc ecx edx +
adc ebx 0 +
mov eax [esi+8] +
mul  dword ptr [edi+14h] +
add [ebp+arg_14] eax +
adc ecx edx +
adc ebx 0 +
mov eax [esi+0Ch] +
mul  dword ptr [edi+10h] +
add [ebp+arg_14] eax +
adc ecx edx +
adc ebx 0 +
mov eax [esi+4] +
mul  dword ptr [edi+1Ch] +
add ecx eax +
adc ebx 0 +
add [ebp+arg_18] ecx +
adc ebx 0 +
mov ecx 0 +
adc ecx 0 +
add ebx edx +
adc ecx 0 +
mov eax [esi+8] +
mul  dword ptr [edi+18h] +
add [ebp+arg_18] eax +
adc ebx edx +
adc ecx 0 +
mov eax [esi+0Ch] +
mul  dword ptr [edi+14h] +
add [ebp+arg_18] eax +
adc ebx edx +
adc ecx 0 +
mov eax [esi+8] +
mul  dword ptr [edi+1Ch] +
add ebx eax +
adc ecx 0 +
add [ebp+arg_1C] ebx +
adc ecx 0 +
mov ebx 0 +
adc ebx 0 +
add ecx edx +
adc ebx 0 +
mov eax [esi+0Ch] +
mul  dword ptr [edi+18h] +
add [ebp+arg_1C] eax +
adc ecx edx +
adc ebx 0 +
mov eax [esi+0Ch] +
mul  dword ptr [edi+1Ch] +
add ecx eax +
adc ebx 0 +
add [ebp+arg_20] ecx +
adc ebx 0 +
xor eax eax +
add ebx edx +
adc eax 0 +
add [ebp+arg_24] ebx +
adc eax 0 +
pop ebp  +
mov esi [ebp+arg_C] +
mov [esi] eax +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
leave   +
retn   +
***
jmp sub_424270  +
***
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_4] +
mov edi [ebp+arg_8] +
mov ebx [ebp+arg_0] +
push ebp  +
mov ebp ebx +
xor ecx ecx +
mov eax [esi] +
mul  dword ptr [edi] +
add [ebp+0] eax +
adc edx 0 +
mov ebx edx +
mov eax [esi] +
mul  dword ptr [edi+4] +
add ebx eax +
adc ecx 0 +
add [ebp+4] ebx +
adc ecx 0 +
mov ebx 0 +
adc ebx 0 +
add ecx edx +
adc ebx 0 +
mov eax [esi+4] +
mul  dword ptr [edi] +
add [ebp+4] eax +
adc ecx edx +
adc ebx 0 +
mov eax [esi] +
mul  dword ptr [edi+8] +
add ecx eax +
adc ebx 0 +
add [ebp+arg_0] ecx +
adc ebx 0 +
mov ecx 0 +
adc ecx 0 +
add ebx edx +
adc ecx 0 +
mov eax [esi+4] +
mul  dword ptr [edi+4] +
add [ebp+arg_0] eax +
adc ebx edx +
adc ecx 0 +
mov eax [esi] +
mul  dword ptr [edi+0Ch] +
add ebx eax +
adc ecx 0 +
add [ebp+arg_4] ebx +
adc ecx 0 +
mov ebx 0 +
adc ebx 0 +
add ecx edx +
adc ebx 0 +
mov eax [esi+4] +
mul  dword ptr [edi+8] +
add [ebp+arg_4] eax +
adc ecx edx +
adc ebx 0 +
mov eax [esi] +
mul  dword ptr [edi+10h] +
add ecx eax +
adc ebx 0 +
add [ebp+arg_8] ecx +
adc ebx 0 +
mov ecx 0 +
adc ecx 0 +
add ebx edx +
adc ecx 0 +
mov eax [esi+4] +
mul  dword ptr [edi+0Ch] +
add [ebp+arg_8] eax +
adc ebx edx +
adc ecx 0 +
mov eax [esi] +
mul  dword ptr [edi+14h] +
add ebx eax +
adc ecx 0 +
add [ebp+arg_C] ebx +
adc ecx 0 +
mov ebx 0 +
adc ebx 0 +
add ecx edx +
adc ebx 0 +
mov eax [esi+4] +
mul  dword ptr [edi+10h] +
add [ebp+arg_C] eax +
adc ecx edx +
adc ebx 0 +
mov eax [esi] +
mul  dword ptr [edi+18h] +
add ecx eax +
adc ebx 0 +
add [ebp+arg_10] ecx +
adc ebx 0 +
mov ecx 0 +
adc ecx 0 +
add ebx edx +
adc ecx 0 +
mov eax [esi+4] +
mul  dword ptr [edi+14h] +
add [ebp+arg_10] eax +
adc ebx edx +
adc ecx 0 +
mov eax [esi] +
mul  dword ptr [edi+1Ch] +
add ebx eax +
adc ecx 0 +
add [ebp+arg_14] ebx +
adc ecx 0 +
mov ebx 0 +
adc ebx 0 +
add ecx edx +
adc ebx 0 +
mov eax [esi+4] +
mul  dword ptr [edi+18h] +
add [ebp+arg_14] eax +
adc ecx edx +
adc ebx 0 +
mov eax [esi+4] +
mul  dword ptr [edi+1Ch] +
add ecx eax +
adc ebx 0 +
add [ebp+arg_18] ecx +
adc ebx 0 +
xor eax eax +
add ebx edx +
adc eax 0 +
add [ebp+arg_1C] ebx +
adc eax 0 +
pop ebp  +
mov esi [ebp+arg_C] +
mov [esi] eax +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
leave   +
retn   +
***
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_4] +
mov edi [ebp+arg_8] +
mov ebx [ebp+arg_0] +
push ebp  +
mov ebp ebx +
xor ecx ecx +
mov eax [esi] +
mul  dword ptr [edi] +
mov [ebp+0] eax +
mov ebx edx +
mov eax [esi] +
mul  dword ptr [edi+4] +
add ebx eax +
adc ecx 0 +
mov [ebp+4] ebx +
xor ebx ebx +
add ecx edx +
adc ebx 0 +
mov eax [esi+4] +
mul  dword ptr [edi] +
add [ebp+4] eax +
adc ecx edx +
adc ebx 0 +
mov eax [esi] +
mul  dword ptr [edi+8] +
add ecx eax +
adc ebx 0 +
mov [ebp+arg_0] ecx +
xor ecx ecx +
add ebx edx +
adc ecx 0 +
mov eax [esi+4] +
mul  dword ptr [edi+4] +
add [ebp+arg_0] eax +
adc ebx edx +
adc ecx 0 +
mov eax [esi] +
mul  dword ptr [edi+0Ch] +
add ebx eax +
adc ecx 0 +
mov [ebp+arg_4] ebx +
xor ebx ebx +
add ecx edx +
adc ebx 0 +
mov eax [esi+4] +
mul  dword ptr [edi+8] +
add [ebp+arg_4] eax +
adc ecx edx +
adc ebx 0 +
mov eax [esi] +
mul  dword ptr [edi+10h] +
add ecx eax +
adc ebx 0 +
mov [ebp+arg_8] ecx +
xor ecx ecx +
add ebx edx +
adc ecx 0 +
mov eax [esi+4] +
mul  dword ptr [edi+0Ch] +
add [ebp+arg_8] eax +
adc ebx edx +
adc ecx 0 +
mov eax [esi] +
mul  dword ptr [edi+14h] +
add ebx eax +
adc ecx 0 +
mov [ebp+arg_C] ebx +
xor ebx ebx +
add ecx edx +
adc ebx 0 +
mov eax [esi+4] +
mul  dword ptr [edi+10h] +
add [ebp+arg_C] eax +
adc ecx edx +
adc ebx 0 +
mov eax [esi] +
mul  dword ptr [edi+18h] +
add ecx eax +
adc ebx 0 +
mov [ebp+arg_10] ecx +
xor ecx ecx +
add ebx edx +
adc ecx 0 +
mov eax [esi+4] +
mul  dword ptr [edi+14h] +
add [ebp+arg_10] eax +
adc ebx edx +
adc ecx 0 +
mov eax [esi] +
mul  dword ptr [edi+1Ch] +
add ebx eax +
adc ecx 0 +
mov [ebp+arg_14] ebx +
xor ebx ebx +
add ecx edx +
adc ebx 0 +
mov eax [esi+4] +
mul  dword ptr [edi+18h] +
add [ebp+arg_14] eax +
adc ecx edx +
adc ebx 0 +
mov eax [esi+4] +
mul  dword ptr [edi+1Ch] +
add ecx eax +
adc ebx 0 +
mov [ebp+arg_18] ecx +
add ebx edx +
mov [ebp+arg_1C] ebx +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
leave   +
retn   +
***
jmp loc_424520  +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi [ebp+0Ch] +
mov edi [ebp+10h] +
mov ebx [ebp+8] +
push ebp  +
mov ebp ebx +
xor ecx ecx +
mov eax esi +
mul  dword ptr [edi] +
add [ebp+0] eax +
adc edx 0 +
mov ebx edx +
mov eax esi +
mul  dword ptr [edi+4] +
add ebx eax +
adc ecx 0 +
add [ebp+4] ebx +
adc ecx 0 +
mov ebx 0 +
adc ebx 0 +
add ecx edx +
adc ebx 0 +
mov eax esi +
mul  dword ptr [edi+8] +
add ecx eax +
adc ebx 0 +
add [ebp+8] ecx +
adc ebx 0 +
mov ecx 0 +
adc ecx 0 +
add ebx edx +
adc ecx 0 +
mov eax esi +
mul  dword ptr [edi+0Ch] +
add ebx eax +
adc ecx 0 +
add [ebp+0Ch] ebx +
adc ecx 0 +
mov ebx 0 +
adc ebx 0 +
add ecx edx +
adc ebx 0 +
mov eax esi +
mul  dword ptr [edi+10h] +
add ecx eax +
adc ebx 0 +
add [ebp+10h] ecx +
adc ebx 0 +
mov ecx 0 +
adc ecx 0 +
add ebx edx +
adc ecx 0 +
mov eax esi +
mul  dword ptr [edi+14h] +
add ebx eax +
adc ecx 0 +
add [ebp+14h] ebx +
adc ecx 0 +
mov ebx 0 +
adc ebx 0 +
add ecx edx +
adc ebx 0 +
mov eax esi +
mul  dword ptr [edi+18h] +
add ecx eax +
adc ebx 0 +
add [ebp+18h] ecx +
adc ebx 0 +
mov ecx 0 +
adc ecx 0 +
add ebx edx +
adc ecx 0 +
mov eax esi +
mul  dword ptr [edi+1Ch] +
add ebx eax +
adc ecx 0 +
add [ebp+1Ch] ebx +
adc ecx 0 +
xor eax eax +
add ecx edx +
adc eax 0 +
add [ebp+20h] ecx +
adc eax 0 +
pop ebp  +
mov esi [ebp+14h] +
mov [esi] eax +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
leave   +
retn   +
***
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi [ebp+0Ch] +
mov edi [ebp+10h] +
mov ebx [ebp+8] +
push ebp  +
mov ebp ebx +
xor ecx ecx +
mov eax esi +
mul  dword ptr [edi] +
sub [ebp+0] eax +
pushf   +
xor ecx ecx +
mov ebx edx +
mov eax esi +
mul  dword ptr [edi+4] +
add ebx eax +
adc ecx 0 +
popf   +
sbb [ebp+4] ebx +
pushf   +
xor ebx ebx +
add ecx edx +
adc ebx 0 +
mov eax esi +
mul  dword ptr [edi+8] +
add ecx eax +
adc ebx 0 +
popf   +
sbb [ebp+8] ecx +
pushf   +
xor ecx ecx +
add ebx edx +
adc ecx 0 +
mov eax esi +
mul  dword ptr [edi+0Ch] +
add ebx eax +
adc ecx 0 +
popf   +
sbb [ebp+0Ch] ebx +
pushf   +
xor ebx ebx +
add ecx edx +
adc ebx 0 +
mov eax esi +
mul  dword ptr [edi+10h] +
add ecx eax +
adc ebx 0 +
popf   +
sbb [ebp+10h] ecx +
pushf   +
xor ecx ecx +
add ebx edx +
adc ecx 0 +
mov eax esi +
mul  dword ptr [edi+14h] +
add ebx eax +
adc ecx 0 +
popf   +
sbb [ebp+14h] ebx +
pushf   +
xor ebx ebx +
add ecx edx +
adc ebx 0 +
mov eax esi +
mul  dword ptr [edi+18h] +
add ecx eax +
adc ebx 0 +
popf   +
sbb [ebp+18h] ecx +
pushf   +
xor ecx ecx +
add ebx edx +
adc ecx 0 +
mov eax esi +
mul  dword ptr [edi+1Ch] +
add ebx eax +
adc ecx 0 +
popf   +
sbb [ebp+1Ch] ebx +
pushf   +
xor ebx ebx +
add ecx edx +
adc ebx 0 +
mov eax esi +
mul  dword ptr [edi+20h] +
add ecx eax +
adc ebx 0 +
popf   +
sbb [ebp+20h] ecx +
adc ebx 0 +
pop ebp  +
mov esi [ebp+14h] +
mov [esi] ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
leave   +
retn   +
***
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
push ebp  +
mov esi [ebp+0Ch] +
mov edi [ebp+10h] +
mov ebx [ebp+8] +
mov ebp ebx +
xor ecx ecx +
mov eax esi +
mul  dword ptr [edi] +
mov [ebp+0] eax +
mov ebx edx +
mov eax esi +
mul  dword ptr [edi+4] +
add ebx eax +
adc ecx 0 +
mov [ebp+4] ebx +
xor ebx ebx +
add ecx edx +
adc ebx 0 +
mov eax esi +
mul  dword ptr [edi+8] +
add ecx eax +
adc ebx 0 +
mov [ebp+8] ecx +
xor ecx ecx +
add ebx edx +
adc ecx 0 +
mov eax esi +
mul  dword ptr [edi+0Ch] +
add ebx eax +
adc ecx 0 +
mov [ebp+0Ch] ebx +
xor ebx ebx +
add ecx edx +
adc ebx 0 +
mov eax esi +
mul  dword ptr [edi+10h] +
add ecx eax +
adc ebx 0 +
mov [ebp+10h] ecx +
xor ecx ecx +
add ebx edx +
adc ecx 0 +
mov eax esi +
mul  dword ptr [edi+14h] +
add ebx eax +
adc ecx 0 +
mov [ebp+14h] ebx +
xor ebx ebx +
add ecx edx +
adc ebx 0 +
mov eax esi +
mul  dword ptr [edi+18h] +
add ecx eax +
adc ebx 0 +
mov [ebp+18h] ecx +
xor ecx ecx +
add ebx edx +
adc ecx 0 +
mov eax esi +
mul  dword ptr [edi+1Ch] +
add ebx eax +
adc ecx 0 +
mov [ebp+1Ch] ebx +
add ecx edx +
mov [ebp+20h] ecx +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
leave   +
retn   +
***
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_4] +
mov edi [ebp+arg_8] +
mov ebx [ebp+arg_0] +
push ebp  +
mov ebp ebx +
xor ecx ecx +
mov eax [esi] +
mul  dword ptr [edi] +
add [ebp+0] eax +
adc edx 0 +
mov ebx edx +
mov eax [esi] +
mul  dword ptr [edi+4] +
add ebx eax +
adc ecx 0 +
add [ebp+4] ebx +
adc ecx 0 +
mov ebx 0 +
adc ebx 0 +
add ecx edx +
adc ebx 0 +
mov eax [esi+4] +
mul  dword ptr [edi] +
add [ebp+4] eax +
adc ecx edx +
adc ebx 0 +
mov eax [esi+4] +
mul  dword ptr [edi+4] +
add ecx eax +
adc ebx 0 +
add [ebp+arg_0] ecx +
adc ebx 0 +
xor eax eax +
add ebx edx +
adc eax 0 +
add [ebp+arg_4] ebx +
adc eax 0 +
pop ebp  +
mov esi [ebp+arg_C] +
mov [esi] eax +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
leave   +
retn   +
***
jmp sub_424830  +
***
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_0] +
mov edi [ebp+arg_4] +
mov ebx [ebp+arg_8] +
push ebp  +
mov ebp ebx +
xor ecx ecx +
mov eax [esi] +
mul  dword ptr [edi] +
mov [ebp+0] eax +
mov ebx edx +
mov eax [esi] +
mul  dword ptr [edi+4] +
add ebx eax +
adc ecx 0 +
mov [ebp+4] ebx +
xor ebx ebx +
add ecx edx +
adc ebx 0 +
mov eax [esi+4] +
mul  dword ptr [edi] +
add [ebp+4] eax +
adc ecx edx +
adc ebx 0 +
mov eax [esi+4] +
mul  dword ptr [edi+4] +
add ecx eax +
adc ebx 0 +
mov [ebp+arg_0] ecx +
add ebx edx +
mov [ebp+arg_4] ebx +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
leave   +
retn   +
***
push esi  +
push edi  +
mov esi [ebp+arg_0] +
mov edi [ebp+arg_4] +
mov eax [esi+1Ch] +
cmp eax [edi+1Ch] +
ja loc_4248F0  +
jb loc_4248F7  +
mov eax [esi+18h] +
cmp eax [edi+18h] +
ja loc_4248F0  +
jb loc_4248F7  +
mov eax [esi+14h] +
cmp eax [edi+14h] +
ja loc_4248F0  +
jb loc_4248F7  +
mov eax [esi+10h] +
cmp eax [edi+10h] +
ja loc_4248F0  +
jb loc_4248F7  +
mov eax [esi+0Ch] +
cmp eax [edi+0Ch] +
ja loc_4248F0  +
jb loc_4248F7  +
mov eax [esi+8] +
cmp eax [edi+8] +
ja loc_4248F0  +
jb loc_4248F7  +
mov eax [esi+4] +
cmp eax [edi+4] +
ja loc_4248F0  +
jb loc_4248F7  +
mov eax [esi] +
cmp eax [edi] +
ja loc_4248F0  +
jb loc_4248F7  +
mov eax 0 +
jmp loc_4248FE  +
mov eax 1 +
jmp loc_4248FE  +
mov eax 0FFFFFFFFh +
jmp $+2  +
pop edi  +
pop esi  +
leave   +
retn   +
***
push esi  +
push edi  +
mov esi [ebp+arg_0] +
mov edi [ebp+arg_4] +
mov eax [esi+24h] +
cmp eax [edi+24h] +
ja loc_424984  +
jb loc_42498B  +
mov eax [esi+20h] +
cmp eax [edi+20h] +
ja loc_424984  +
jb loc_42498B  +
mov eax [esi+1Ch] +
cmp eax [edi+1Ch] +
ja loc_424984  +
jb loc_42498B  +
mov eax [esi+18h] +
cmp eax [edi+18h] +
ja loc_424984  +
jb loc_42498B  +
mov eax [esi+14h] +
cmp eax [edi+14h] +
ja loc_424984  +
jb loc_42498B  +
mov eax [esi+10h] +
cmp eax [edi+10h] +
ja loc_424984  +
jb loc_42498B  +
mov eax [esi+0Ch] +
cmp eax [edi+0Ch] +
ja loc_424984  +
jb loc_42498B  +
mov eax [esi+8] +
cmp eax [edi+8] +
ja loc_424984  +
jb loc_42498B  +
mov eax [esi+4] +
cmp eax [edi+4] +
ja loc_424984  +
jb loc_42498B  +
mov eax [esi] +
cmp eax [edi] +
ja loc_424984  +
jb loc_42498B  +
mov eax 0 +
jmp loc_424992  +
mov eax 1 +
jmp loc_424992  +
mov eax 0FFFFFFFFh +
jmp $+2  +
pop edi  +
pop esi  +
leave   +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_0] +
mov edi [ebp+arg_4] +
mov edx [ebp+arg_8] +
xor ecx ecx +
mov eax [edi] +
mov ebx [edi+4] +
add [esi] eax +
adc [esi+4] ebx +
jnb loc_4249DE  +
adc [esi+8] ecx +
jnb loc_4249DE  +
adc [esi+0Ch] ecx +
jnb loc_4249DE  +
adc [esi+10h] ecx +
jnb loc_4249DE  +
adc [esi+14h] ecx +
jnb loc_4249DE  +
adc [esi+18h] ecx +
jnb loc_4249DE  +
adc [esi+1Ch] ecx +
jnb loc_4249DE  +
adc ecx 0 +
mov [edx] ecx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
jmp sub_4249F0  +
***
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_0] +
mov edi [ebp+arg_4] +
mov edx [ebp+arg_8] +
xor ecx ecx +
mov eax [edi] +
mov ebx [edi+4] +
add [esi] eax +
adc [esi+4] ebx +
jnb loc_424A56  +
adc [esi+8] ecx +
jnb loc_424A56  +
adc [esi+0Ch] ecx +
jnb loc_424A56  +
adc [esi+10h] ecx +
jnb loc_424A56  +
adc [esi+14h] ecx +
jnb loc_424A56  +
adc [esi+18h] ecx +
jnb loc_424A56  +
adc [esi+1Ch] ecx +
jnb loc_424A56  +
adc [esi+20h] ecx +
jnb loc_424A56  +
adc [esi+24h] ecx +
jnb loc_424A56  +
adc [esi+28h] ecx +
jnb loc_424A56  +
adc [esi+2Ch] ecx +
jnb loc_424A56  +
adc [esi+30h] ecx +
jnb loc_424A56  +
adc [esi+34h] ecx +
jnb loc_424A56  +
adc [esi+38h] ecx +
jnb loc_424A56  +
adc [esi+3Ch] ecx +
jnb loc_424A56  +
adc ecx 0 +
mov [edx] ecx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+0Ch] +
xor ecx ecx +
mov edx [ebp+10h] +
xor esi esi +
add edi edx +
mov edx [ebp+8] +
adc ecx esi +
mov ebx [edx] +
add edi ebx +
adc ecx esi +
mov [edx] ecx +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
pop es  +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov eax [ebp+0Ch] +
xor ecx ecx +
mov edx [ebp+10h] +
xor esi esi +
sub eax edx +
adc ecx esi +
mov edx [ebp+8] +
mov ebx [edx] +
sub eax ebx +
adc ecx esi +
mov [edx] ecx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov eax [ebp+arg_8] +
xor ecx ecx +
mov edx [ebp+arg_4] +
xor esi esi +
mov ecx [ebp+arg_C] +
div  ecx +
mov esi [ebp+arg_0] +
mov [esi] edx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ecx 0 +
mov edi [ebp+8] +
mov ebx 0 +
mov edx 0 +
mov esi [ebp+0Ch] +
shr dword ptr [ebp+14h] 1 +
mov eax [esi+ecx*4] +
mul  dword ptr [ebp+10h] +
add eax ebx +
adc edx 0 +
mov [edi+ecx*4] eax +
mov ebx edx +
inc ecx  +
cmp ecx [ebp+14h] +
jnz loc_424B0E  +
mov [edi+ecx*4] ebx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
jmp loc_424B50  +
mov edx [ebp+0Ch] +
mov edi [ebp+10h] +
mov ecx [ebp+8] +
push ebp  +
mov ebp ecx +
mov esi 0 +
pxor mm4 mm4 +
movd mm0 dword ptr [edi] +
movd mm1 dword ptr [edi+4] +
movq mm2 mm0 +
pmuludq mm0 qword ptr [edx] +
movq mm3 mm1 +
pmuludq mm1 qword ptr [edx] +
movq qword ptr [ebp+0] mm4 +
pmuludq mm2 qword ptr [edx+4] +
pmuludq mm3 qword ptr [edx+4] +
movd eax mm0 +
mov ebx 0 +
add [ebp+0] eax +
adc ebx 0 +
movd ecx mm1 +
psrlq mm0 20h +
mov eax 0 +
add ecx ebx +
adc eax 0 +
psrlq mm1 20h +
movd ebx mm2 +
add ecx ebx +
adc eax 0 +
movd mm4 dword ptr [edi+8] +
movd ebx mm0 +
psrlq mm2 20h +
add ecx ebx +
adc eax 0 +
movd mm5 dword ptr [edi+0Ch] +
add [ebp+4] ecx +
adc eax 0 +
movq mm6 mm4 +
movq mm0 qword ptr [edx] +
mov ebx 0 +
movd ecx mm3 +
add eax ecx +
adc ebx 0 +
pmuludq mm4 mm0 +
movd ecx mm1 +
add eax ecx +
adc ebx 0 +
psrlq mm3 20h +
movq mm7 mm5 +
add eax esi +
adc ebx 0 +
pmuludq mm5 mm0 +
movd ecx mm2 +
add eax ecx +
adc ebx 0 +
psrlq mm0 20h +
mov [ebp+8] eax +
movd ecx mm3 +
mov esi 0 +
add ebx ecx +
adc esi 0 +
pmuludq mm6 mm0 +
mov [ebp+0Ch] ebx +
pmuludq mm7 mm0 +
movd eax mm4 +
mov ebx 0 +
add [ebp+8] eax +
adc ebx 0 +
movd ecx mm5 +
psrlq mm4 20h +
mov eax 0 +
add ecx ebx +
adc eax 0 +
psrlq mm5 20h +
movd ebx mm6 +
add ecx ebx +
adc eax 0 +
movd mm0 dword ptr [edi] +
movd ebx mm4 +
psrlq mm6 20h +
add ecx ebx +
adc eax 0 +
movd mm1 dword ptr [edi+4] +
add [ebp+0Ch] ecx +
adc eax 0 +
movq mm2 mm0 +
movq mm4 qword ptr [edx+8] +
mov ebx 0 +
movd ecx mm7 +
add eax ecx +
adc ebx 0 +
pmuludq mm0 mm4 +
movd ecx mm5 +
add eax ecx +
adc ebx 0 +
psrlq mm7 20h +
movq mm3 mm1 +
add eax esi +
adc ebx 0 +
pmuludq mm1 mm4 +
movd ecx mm6 +
add eax ecx +
adc ebx 0 +
psrlq mm4 20h +
mov [ebp+10h] eax +
movd ecx mm7 +
mov esi 0 +
add ebx ecx +
adc esi 0 +
pmuludq mm2 mm4 +
mov [ebp+14h] ebx +
pmuludq mm3 mm4 +
movd eax mm0 +
mov ebx 0 +
add [ebp+8] eax +
adc ebx 0 +
movd ecx mm1 +
psrlq mm0 20h +
mov eax 0 +
add ecx ebx +
adc eax 0 +
psrlq mm1 20h +
movd ebx mm2 +
add ecx ebx +
adc eax 0 +
movd mm4 dword ptr [edi+10h] +
movd ebx mm0 +
psrlq mm2 20h +
add ecx ebx +
adc eax 0 +
movd mm5 dword ptr [edi+14h] +
add [ebp+0Ch] ecx +
adc eax 0 +
movq mm6 mm4 +
mov ebx 0 +
movd ecx mm3 +
movq mm0 qword ptr [edx] +
add eax ecx +
adc ebx 0 +
pmuludq mm4 mm0 +
movd ecx mm1 +
add eax ecx +
adc ebx 0 +
psrlq mm3 20h +
movd ecx mm2 +
movq mm7 mm5 +
add eax ecx +
adc ebx 0 +
pmuludq mm5 mm0 +
add [ebp+10h] eax +
adc ebx 0 +
psrlq mm0 20h +
movd ecx mm3 +
add ebx ecx +
adc esi 0 +
pmuludq mm6 mm0 +
add [ebp+14h] ebx +
adc esi 0 +
pmuludq mm7 mm0 +
movd eax mm4 +
mov ebx 0 +
add [ebp+10h] eax +
adc ebx 0 +
movd ecx mm5 +
psrlq mm4 20h +
mov eax 0 +
add ecx ebx +
adc eax 0 +
psrlq mm5 20h +
movd ebx mm6 +
add ecx ebx +
adc eax 0 +
movd mm0 dword ptr [edi+8] +
movd ebx mm4 +
psrlq mm6 20h +
add ecx ebx +
adc eax 0 +
movd mm1 dword ptr [edi+0Ch] +
add [ebp+14h] ecx +
adc eax 0 +
movq mm2 mm0 +
movq mm4 qword ptr [edx+8] +
mov ebx 0 +
movd ecx mm7 +
add eax ecx +
adc ebx 0 +
pmuludq mm0 mm4 +
movd ecx mm5 +
add eax ecx +
adc ebx 0 +
psrlq mm7 20h +
movq mm3 mm1 +
add eax esi +
adc ebx 0 +
pmuludq mm1 mm4 +
movd ecx mm6 +
add eax ecx +
adc ebx 0 +
psrlq mm4 20h +
mov [ebp+18h] eax +
movd ecx mm7 +
mov esi 0 +
add ebx ecx +
adc esi 0 +
pmuludq mm2 mm4 +
mov [ebp+1Ch] ebx +
pmuludq mm3 mm4 +
movd eax mm0 +
mov ebx 0 +
add [ebp+10h] eax +
adc ebx 0 +
movd ecx mm1 +
psrlq mm0 20h +
mov eax 0 +
add ecx ebx +
adc eax 0 +
psrlq mm1 20h +
movd ebx mm2 +
add ecx ebx +
adc eax 0 +
movd mm4 dword ptr [edi] +
movd ebx mm0 +
psrlq mm2 20h +
add ecx ebx +
adc eax 0 +
movd mm5 dword ptr [edi+4] +
add [ebp+14h] ecx +
adc eax 0 +
movq mm6 mm4 +
mov ebx 0 +
movd ecx mm3 +
movq mm0 qword ptr [edx+10h] +
add eax ecx +
adc ebx 0 +
pmuludq mm4 mm0 +
movd ecx mm1 +
add eax ecx +
adc ebx 0 +
psrlq mm3 20h +
movd ecx mm2 +
movq mm7 mm5 +
add eax ecx +
adc ebx 0 +
pmuludq mm5 mm0 +
add [ebp+18h] eax +
adc ebx 0 +
psrlq mm0 20h +
movd ecx mm3 +
add ebx ecx +
adc esi 0 +
pmuludq mm6 mm0 +
add [ebp+1Ch] ebx +
adc esi 0 +
pmuludq mm7 mm0 +
movd eax mm4 +
mov ebx 0 +
add [ebp+10h] eax +
adc ebx 0 +
movd ecx mm5 +
psrlq mm4 20h +
mov eax 0 +
add ecx ebx +
adc eax 0 +
psrlq mm5 20h +
movd ebx mm6 +
add ecx ebx +
adc eax 0 +
movd mm0 dword ptr [edi+18h] +
movd ebx mm4 +
psrlq mm6 20h +
add ecx ebx +
adc eax 0 +
movd mm1 dword ptr [edi+1Ch] +
add [ebp+14h] ecx +
adc eax 0 +
movq mm2 mm0 +
mov ebx 0 +
movd ecx mm7 +
movq mm4 qword ptr [edx] +
add eax ecx +
adc ebx 0 +
pmuludq mm0 mm4 +
movd ecx mm5 +
add eax ecx +
adc ebx 0 +
psrlq mm7 20h +
movd ecx mm6 +
movq mm3 mm1 +
add eax ecx +
adc ebx 0 +
pmuludq mm1 mm4 +
add [ebp+18h] eax +
adc ebx 0 +
psrlq mm4 20h +
movd ecx mm7 +
add ebx ecx +
adc esi 0 +
pmuludq mm2 mm4 +
add [ebp+1Ch] ebx +
adc esi 0 +
pmuludq mm3 mm4 +
movd eax mm0 +
mov ebx 0 +
add [ebp+18h] eax +
adc ebx 0 +
movd ecx mm1 +
psrlq mm0 20h +
mov eax 0 +
add ecx ebx +
adc eax 0 +
psrlq mm1 20h +
movd ebx mm2 +
add ecx ebx +
adc eax 0 +
movd mm4 dword ptr [edi+10h] +
movd ebx mm0 +
psrlq mm2 20h +
add ecx ebx +
adc eax 0 +
movd mm5 dword ptr [edi+14h] +
add [ebp+1Ch] ecx +
adc eax 0 +
movq mm6 mm4 +
movq mm0 qword ptr [edx+8] +
mov ebx 0 +
movd ecx mm3 +
add eax ecx +
adc ebx 0 +
pmuludq mm4 mm0 +
movd ecx mm1 +
add eax ecx +
adc ebx 0 +
psrlq mm3 20h +
movq mm7 mm5 +
add eax esi +
adc ebx 0 +
pmuludq mm5 mm0 +
movd ecx mm2 +
add eax ecx +
adc ebx 0 +
psrlq mm0 20h +
mov [ebp+20h] eax +
movd ecx mm3 +
mov esi 0 +
add ebx ecx +
adc esi 0 +
pmuludq mm6 mm0 +
mov [ebp+24h] ebx +
pmuludq mm7 mm0 +
movd eax mm4 +
mov ebx 0 +
add [ebp+18h] eax +
adc ebx 0 +
movd ecx mm5 +
psrlq mm4 20h +
mov eax 0 +
add ecx ebx +
adc eax 0 +
psrlq mm5 20h +
movd ebx mm6 +
add ecx ebx +
adc eax 0 +
movd mm0 dword ptr [edi+8] +
movd ebx mm4 +
psrlq mm6 20h +
add ecx ebx +
adc eax 0 +
movd mm1 dword ptr [edi+0Ch] +
add [ebp+1Ch] ecx +
adc eax 0 +
movq mm2 mm0 +
mov ebx 0 +
movd ecx mm7 +
movq mm4 qword ptr [edx+10h] +
add eax ecx +
adc ebx 0 +
pmuludq mm0 mm4 +
movd ecx mm5 +
add eax ecx +
adc ebx 0 +
psrlq mm7 20h +
movd ecx mm6 +
movq mm3 mm1 +
add eax ecx +
adc ebx 0 +
pmuludq mm1 mm4 +
add [ebp+20h] eax +
adc ebx 0 +
psrlq mm4 20h +
movd ecx mm7 +
add ebx ecx +
adc esi 0 +
pmuludq mm2 mm4 +
add [ebp+24h] ebx +
adc esi 0 +
pmuludq mm3 mm4 +
movd eax mm0 +
mov ebx 0 +
add [ebp+18h] eax +
adc ebx 0 +
movd ecx mm1 +
psrlq mm0 20h +
mov eax 0 +
add ecx ebx +
adc eax 0 +
psrlq mm1 20h +
movd ebx mm2 +
add ecx ebx +
adc eax 0 +
movd mm4 dword ptr [edi] +
movd ebx mm0 +
psrlq mm2 20h +
add ecx ebx +
adc eax 0 +
movd mm5 dword ptr [edi+4] +
add [ebp+1Ch] ecx +
adc eax 0 +
movq mm6 mm4 +
mov ebx 0 +
movd ecx mm3 +
movq mm0 qword ptr [edx+18h] +
add eax ecx +
adc ebx 0 +
pmuludq mm4 mm0 +
movd ecx mm1 +
add eax ecx +
adc ebx 0 +
psrlq mm3 20h +
movd ecx mm2 +
movq mm7 mm5 +
add eax ecx +
adc ebx 0 +
pmuludq mm5 mm0 +
add [ebp+20h] eax +
adc ebx 0 +
psrlq mm0 20h +
movd ecx mm3 +
add ebx ecx +
adc esi 0 +
pmuludq mm6 mm0 +
add [ebp+24h] ebx +
adc esi 0 +
pmuludq mm7 mm0 +
movd eax mm4 +
mov ebx 0 +
add [ebp+18h] eax +
adc ebx 0 +
movd ecx mm5 +
psrlq mm4 20h +
mov eax 0 +
add ecx ebx +
adc eax 0 +
psrlq mm5 20h +
movd ebx mm6 +
add ecx ebx +
adc eax 0 +
movd mm0 dword ptr [edi+18h] +
movd ebx mm4 +
psrlq mm6 20h +
add ecx ebx +
adc eax 0 +
movd mm1 dword ptr [edi+1Ch] +
add [ebp+1Ch] ecx +
adc eax 0 +
movq mm2 mm0 +
mov ebx 0 +
movd ecx mm7 +
movq mm4 qword ptr [edx+8] +
add eax ecx +
adc ebx 0 +
pmuludq mm0 mm4 +
movd ecx mm5 +
add eax ecx +
adc ebx 0 +
psrlq mm7 20h +
movd ecx mm6 +
movq mm3 mm1 +
add eax ecx +
adc ebx 0 +
pmuludq mm1 mm4 +
add [ebp+20h] eax +
adc ebx 0 +
psrlq mm4 20h +
movd ecx mm7 +
add ebx ecx +
adc esi 0 +
pmuludq mm2 mm4 +
add [ebp+24h] ebx +
adc esi 0 +
pmuludq mm3 mm4 +
movd eax mm0 +
mov ebx 0 +
add [ebp+20h] eax +
adc ebx 0 +
movd ecx mm1 +
psrlq mm0 20h +
mov eax 0 +
add ecx ebx +
adc eax 0 +
psrlq mm1 20h +
movd ebx mm2 +
add ecx ebx +
adc eax 0 +
movd mm4 dword ptr [edi+10h] +
movd ebx mm0 +
psrlq mm2 20h +
add ecx ebx +
adc eax 0 +
movd mm5 dword ptr [edi+14h] +
add [ebp+24h] ecx +
adc eax 0 +
movq mm6 mm4 +
movq mm0 qword ptr [edx+10h] +
mov ebx 0 +
movd ecx mm3 +
add eax ecx +
adc ebx 0 +
pmuludq mm4 mm0 +
movd ecx mm1 +
add eax ecx +
adc ebx 0 +
psrlq mm3 20h +
movq mm7 mm5 +
add eax esi +
adc ebx 0 +
pmuludq mm5 mm0 +
movd ecx mm2 +
add eax ecx +
adc ebx 0 +
psrlq mm0 20h +
mov [ebp+28h] eax +
movd ecx mm3 +
mov esi 0 +
add ebx ecx +
adc esi 0 +
pmuludq mm6 mm0 +
mov [ebp+2Ch] ebx +
pmuludq mm7 mm0 +
movd eax mm4 +
mov ebx 0 +
add [ebp+20h] eax +
adc ebx 0 +
movd ecx mm5 +
psrlq mm4 20h +
mov eax 0 +
add ecx ebx +
adc eax 0 +
psrlq mm5 20h +
movd ebx mm6 +
add ecx ebx +
adc eax 0 +
movd mm0 dword ptr [edi+8] +
movd ebx mm4 +
psrlq mm6 20h +
add ecx ebx +
adc eax 0 +
movd mm1 dword ptr [edi+0Ch] +
add [ebp+24h] ecx +
adc eax 0 +
movq mm2 mm0 +
mov ebx 0 +
movd ecx mm7 +
movq mm4 qword ptr [edx+18h] +
add eax ecx +
adc ebx 0 +
pmuludq mm0 mm4 +
movd ecx mm5 +
add eax ecx +
adc ebx 0 +
psrlq mm7 20h +
movd ecx mm6 +
movq mm3 mm1 +
add eax ecx +
adc ebx 0 +
pmuludq mm1 mm4 +
add [ebp+28h] eax +
adc ebx 0 +
psrlq mm4 20h +
movd ecx mm7 +
add ebx ecx +
adc esi 0 +
pmuludq mm2 mm4 +
add [ebp+2Ch] ebx +
adc esi 0 +
pmuludq mm3 mm4 +
movd eax mm0 +
mov ebx 0 +
add [ebp+20h] eax +
adc ebx 0 +
movd ecx mm1 +
psrlq mm0 20h +
mov eax 0 +
add ecx ebx +
adc eax 0 +
psrlq mm1 20h +
movd ebx mm2 +
add ecx ebx +
adc eax 0 +
movd mm4 dword ptr [edi+18h] +
movd ebx mm0 +
psrlq mm2 20h +
add ecx ebx +
adc eax 0 +
movd mm5 dword ptr [edi+1Ch] +
add [ebp+24h] ecx +
adc eax 0 +
movq mm6 mm4 +
mov ebx 0 +
movd ecx mm3 +
movq mm0 qword ptr [edx+10h] +
add eax ecx +
adc ebx 0 +
pmuludq mm4 mm0 +
movd ecx mm1 +
add eax ecx +
adc ebx 0 +
psrlq mm3 20h +
movd ecx mm2 +
movq mm7 mm5 +
add eax ecx +
adc ebx 0 +
pmuludq mm5 mm0 +
add [ebp+28h] eax +
adc ebx 0 +
psrlq mm0 20h +
movd ecx mm3 +
add ebx ecx +
adc esi 0 +
pmuludq mm6 mm0 +
add [ebp+2Ch] ebx +
adc esi 0 +
pmuludq mm7 mm0 +
movd eax mm4 +
mov ebx 0 +
add [ebp+28h] eax +
adc ebx 0 +
movd ecx mm5 +
psrlq mm4 20h +
mov eax 0 +
add ecx ebx +
adc eax 0 +
psrlq mm5 20h +
movd ebx mm6 +
add ecx ebx +
adc eax 0 +
movd mm0 dword ptr [edi+10h] +
movd ebx mm4 +
psrlq mm6 20h +
add ecx ebx +
adc eax 0 +
movd mm1 dword ptr [edi+14h] +
add [ebp+2Ch] ecx +
adc eax 0 +
movq mm2 mm0 +
movq mm4 qword ptr [edx+18h] +
mov ebx 0 +
movd ecx mm7 +
add eax ecx +
adc ebx 0 +
pmuludq mm0 mm4 +
movd ecx mm5 +
add eax ecx +
adc ebx 0 +
psrlq mm7 20h +
movq mm3 mm1 +
add eax esi +
adc ebx 0 +
pmuludq mm1 mm4 +
movd ecx mm6 +
add eax ecx +
adc ebx 0 +
psrlq mm4 20h +
mov [ebp+30h] eax +
movd ecx mm7 +
mov esi 0 +
add ebx ecx +
adc esi 0 +
pmuludq mm2 mm4 +
mov [ebp+34h] ebx +
pmuludq mm3 mm4 +
movd eax mm0 +
mov ebx 0 +
add [ebp+28h] eax +
adc ebx 0 +
movd ecx mm1 +
psrlq mm0 20h +
mov eax 0 +
add ecx ebx +
adc eax 0 +
psrlq mm1 20h +
movd ebx mm2 +
add ecx ebx +
adc eax 0 +
movd mm4 dword ptr [edi+18h] +
movd ebx mm0 +
psrlq mm2 20h +
add ecx ebx +
adc eax 0 +
movd mm5 dword ptr [edi+1Ch] +
add [ebp+2Ch] ecx +
adc eax 0 +
movq mm6 mm4 +
mov ebx 0 +
movd ecx mm3 +
movq mm0 qword ptr [edx+18h] +
add eax ecx +
adc ebx 0 +
pmuludq mm4 mm0 +
movd ecx mm1 +
add eax ecx +
adc ebx 0 +
psrlq mm3 20h +
movd ecx mm2 +
movq mm7 mm5 +
add eax ecx +
adc ebx 0 +
pmuludq mm5 mm0 +
add [ebp+30h] eax +
adc ebx 0 +
psrlq mm0 20h +
movd ecx mm3 +
add ebx ecx +
adc esi 0 +
pmuludq mm6 mm0 +
add [ebp+34h] ebx +
adc esi 0 +
pmuludq mm7 mm0 +
movd eax mm4 +
mov ebx 0 +
add [ebp+30h] eax +
adc ebx 0 +
movd ecx mm5 +
psrlq mm4 20h +
mov eax 0 +
add ecx ebx +
adc eax 0 +
psrlq mm5 20h +
movd ebx mm6 +
add ecx ebx +
adc eax 0 +
movd ebx mm4 +
psrlq mm6 20h +
add ecx ebx +
adc eax 0 +
add [ebp+34h] ecx +
adc eax 0 +
mov ebx 0 +
movd ecx mm7 +
add eax ecx +
adc ebx 0 +
movd ecx mm5 +
add eax ecx +
adc ebx 0 +
psrlq mm7 20h +
add eax esi +
adc ebx 0 +
movd ecx mm6 +
add eax ecx +
adc ebx 0 +
mov [ebp+38h] eax +
movd ecx mm7 +
add ebx ecx +
mov [ebp+3Ch] ebx +
emms   +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
leave   +
retn   +
***
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
jmp loc_4254D0  +
mov edx [ebp+10h] +
mov edi [ebp+0Ch] +
mov ecx [ebp+8] +
push ebp  +
mov ebp ecx +
mov esi 0 +
movd mm0 dword ptr [edi] +
movd mm1 dword ptr [edi+4] +
movq mm2 mm0 +
pmuludq mm0 qword ptr [edx] +
movq mm3 mm1 +
pmuludq mm1 qword ptr [edx] +
pmuludq mm2 qword ptr [edx+4] +
pmuludq mm3 qword ptr [edx+4] +
movd eax mm0 +
mov ebx 0 +
add [ebp+0] eax +
adc ebx 0 +
movd ecx mm1 +
psrlq mm0 20h +
mov eax 0 +
add ecx ebx +
adc eax 0 +
psrlq mm1 20h +
movd ebx mm2 +
add ecx ebx +
adc eax 0 +
movd mm4 dword ptr [edi+8] +
movd ebx mm0 +
psrlq mm2 20h +
add ecx ebx +
adc eax 0 +
movd mm5 dword ptr [edi+0Ch] +
add [ebp+4] ecx +
adc eax 0 +
movq mm6 mm4 +
movq mm0 qword ptr [edx] +
mov ebx 0 +
movd ecx mm3 +
add eax ecx +
adc ebx 0 +
pmuludq mm4 mm0 +
movd ecx mm1 +
add eax ecx +
adc ebx 0 +
psrlq mm3 20h +
add eax esi +
adc ebx 0 +
movq mm7 mm5 +
movd ecx mm2 +
add eax ecx +
adc ebx 0 +
pmuludq mm5 mm0 +
add [ebp+8] eax +
adc ebx 0 +
movd ecx mm3 +
psrlq mm0 20h +
mov esi 0 +
add ebx ecx +
adc esi 0 +
pmuludq mm6 mm0 +
add [ebp+0Ch] ebx +
adc esi 0 +
pmuludq mm7 mm0 +
movd eax mm4 +
mov ebx 0 +
add [ebp+8] eax +
adc ebx 0 +
movd ecx mm5 +
psrlq mm4 20h +
mov eax 0 +
add ecx ebx +
adc eax 0 +
psrlq mm5 20h +
movd ebx mm6 +
add ecx ebx +
adc eax 0 +
movd mm0 dword ptr [edi] +
movd ebx mm4 +
psrlq mm6 20h +
add ecx ebx +
adc eax 0 +
movd mm1 dword ptr [edi+4] +
add [ebp+0Ch] ecx +
adc eax 0 +
movq mm2 mm0 +
movq mm4 qword ptr [edx+8] +
mov ebx 0 +
movd ecx mm7 +
add eax ecx +
adc ebx 0 +
pmuludq mm0 mm4 +
movd ecx mm5 +
add eax ecx +
adc ebx 0 +
psrlq mm7 20h +
add eax esi +
adc ebx 0 +
movq mm3 mm1 +
movd ecx mm6 +
add eax ecx +
adc ebx 0 +
pmuludq mm1 mm4 +
add [ebp+10h] eax +
adc ebx 0 +
movd ecx mm7 +
psrlq mm4 20h +
mov esi 0 +
add ebx ecx +
adc esi 0 +
pmuludq mm2 mm4 +
add [ebp+14h] ebx +
adc esi 0 +
pmuludq mm3 mm4 +
movd eax mm0 +
mov ebx 0 +
add [ebp+8] eax +
adc ebx 0 +
movd ecx mm1 +
psrlq mm0 20h +
mov eax 0 +
add ecx ebx +
adc eax 0 +
psrlq mm1 20h +
movd ebx mm2 +
add ecx ebx +
adc eax 0 +
movd mm4 dword ptr [edi+8] +
movd ebx mm0 +
psrlq mm2 20h +
add ecx ebx +
adc eax 0 +
movd mm5 dword ptr [edi+0Ch] +
add [ebp+0Ch] ecx +
adc eax 0 +
movq mm6 mm4 +
mov ebx 0 +
movd ecx mm3 +
movq mm0 qword ptr [edx+8] +
add eax ecx +
adc ebx 0 +
pmuludq mm4 mm0 +
movd ecx mm1 +
add eax ecx +
adc ebx 0 +
psrlq mm3 20h +
movd ecx mm2 +
movq mm7 mm5 +
add eax ecx +
adc ebx 0 +
pmuludq mm5 mm0 +
add [ebp+10h] eax +
adc ebx 0 +
psrlq mm0 20h +
movd ecx mm3 +
add ebx ecx +
adc esi 0 +
pmuludq mm6 mm0 +
add [ebp+14h] ebx +
adc esi 0 +
pmuludq mm7 mm0 +
movd eax mm4 +
mov ebx 0 +
add [ebp+10h] eax +
adc ebx 0 +
movd ecx mm5 +
psrlq mm4 20h +
mov eax 0 +
add ecx ebx +
adc eax 0 +
psrlq mm5 20h +
movd ebx mm6 +
add ecx ebx +
adc eax 0 +
movd mm0 dword ptr [edi] +
movd ebx mm4 +
psrlq mm6 20h +
add ecx ebx +
adc eax 0 +
movd mm1 dword ptr [edi+4] +
add [ebp+14h] ecx +
adc eax 0 +
movq mm2 mm0 +
movq mm4 qword ptr [edx+10h] +
mov ebx 0 +
movd ecx mm7 +
add eax ecx +
adc ebx 0 +
pmuludq mm0 mm4 +
movd ecx mm5 +
add eax ecx +
adc ebx 0 +
psrlq mm7 20h +
add eax esi +
adc ebx 0 +
movq mm3 mm1 +
movd ecx mm6 +
add eax ecx +
adc ebx 0 +
pmuludq mm1 mm4 +
add [ebp+18h] eax +
adc ebx 0 +
movd ecx mm7 +
psrlq mm4 20h +
mov esi 0 +
add ebx ecx +
adc esi 0 +
pmuludq mm2 mm4 +
add [ebp+1Ch] ebx +
adc esi 0 +
pmuludq mm3 mm4 +
movd eax mm0 +
mov ebx 0 +
add [ebp+10h] eax +
adc ebx 0 +
movd ecx mm1 +
psrlq mm0 20h +
mov eax 0 +
add ecx ebx +
adc eax 0 +
psrlq mm1 20h +
movd ebx mm2 +
add ecx ebx +
adc eax 0 +
movd mm4 dword ptr [edi+8] +
movd ebx mm0 +
psrlq mm2 20h +
add ecx ebx +
adc eax 0 +
movd mm5 dword ptr [edi+0Ch] +
add [ebp+14h] ecx +
adc eax 0 +
movq mm6 mm4 +
mov ebx 0 +
movd ecx mm3 +
movq mm0 qword ptr [edx+10h] +
add eax ecx +
adc ebx 0 +
pmuludq mm4 mm0 +
movd ecx mm1 +
add eax ecx +
adc ebx 0 +
psrlq mm3 20h +
movd ecx mm2 +
movq mm7 mm5 +
add eax ecx +
adc ebx 0 +
pmuludq mm5 mm0 +
add [ebp+18h] eax +
adc ebx 0 +
psrlq mm0 20h +
movd ecx mm3 +
add ebx ecx +
adc esi 0 +
pmuludq mm6 mm0 +
add [ebp+1Ch] ebx +
adc esi 0 +
pmuludq mm7 mm0 +
movd eax mm4 +
mov ebx 0 +
add [ebp+18h] eax +
adc ebx 0 +
movd ecx mm5 +
psrlq mm4 20h +
mov eax 0 +
add ecx ebx +
adc eax 0 +
psrlq mm5 20h +
movd ebx mm6 +
add ecx ebx +
adc eax 0 +
movd mm0 dword ptr [edi] +
movd ebx mm4 +
psrlq mm6 20h +
add ecx ebx +
adc eax 0 +
movd mm1 dword ptr [edi+4] +
add [ebp+1Ch] ecx +
adc eax 0 +
movq mm2 mm0 +
movq mm4 qword ptr [edx+18h] +
mov ebx 0 +
movd ecx mm7 +
add eax ecx +
adc ebx 0 +
pmuludq mm0 mm4 +
movd ecx mm5 +
add eax ecx +
adc ebx 0 +
psrlq mm7 20h +
add eax esi +
adc ebx 0 +
movq mm3 mm1 +
movd ecx mm6 +
add eax ecx +
adc ebx 0 +
pmuludq mm1 mm4 +
add [ebp+20h] eax +
adc ebx 0 +
movd ecx mm7 +
psrlq mm4 20h +
mov esi 0 +
add ebx ecx +
adc esi 0 +
pmuludq mm2 mm4 +
add [ebp+24h] ebx +
adc esi 0 +
pmuludq mm3 mm4 +
movd eax mm0 +
mov ebx 0 +
add [ebp+18h] eax +
adc ebx 0 +
movd ecx mm1 +
psrlq mm0 20h +
mov eax 0 +
add ecx ebx +
adc eax 0 +
psrlq mm1 20h +
movd ebx mm2 +
add ecx ebx +
adc eax 0 +
movd mm4 dword ptr [edi+8] +
movd ebx mm0 +
psrlq mm2 20h +
add ecx ebx +
adc eax 0 +
movd mm5 dword ptr [edi+0Ch] +
add [ebp+1Ch] ecx +
adc eax 0 +
movq mm6 mm4 +
mov ebx 0 +
movd ecx mm3 +
movq mm0 qword ptr [edx+18h] +
add eax ecx +
adc ebx 0 +
pmuludq mm4 mm0 +
movd ecx mm1 +
add eax ecx +
adc ebx 0 +
psrlq mm3 20h +
movd ecx mm2 +
movq mm7 mm5 +
add eax ecx +
adc ebx 0 +
pmuludq mm5 mm0 +
add [ebp+20h] eax +
adc ebx 0 +
psrlq mm0 20h +
movd ecx mm3 +
add ebx ecx +
adc esi 0 +
pmuludq mm6 mm0 +
add [ebp+24h] ebx +
adc esi 0 +
pmuludq mm7 mm0 +
movd eax mm4 +
mov ebx 0 +
add [ebp+20h] eax +
adc ebx 0 +
movd ecx mm5 +
psrlq mm4 20h +
mov eax 0 +
add ecx ebx +
adc eax 0 +
psrlq mm5 20h +
movd ebx mm6 +
add ecx ebx +
adc eax 0 +
movd ebx mm4 +
psrlq mm6 20h +
add ecx ebx +
adc eax 0 +
add [ebp+24h] ecx +
adc eax 0 +
mov ebx 0 +
movd ecx mm7 +
add eax ecx +
adc ebx 0 +
movd ecx mm5 +
add eax ecx +
adc ebx 0 +
psrlq mm7 20h +
add eax esi +
adc ebx 0 +
movd ecx mm6 +
add eax ecx +
adc ebx 0 +
add [ebp+28h] eax +
adc ebx 0 +
movd ecx mm7 +
mov esi 0 +
add ebx ecx +
adc esi 0 +
add [ebp+2Ch] ebx +
adc esi 0 +
emms   +
pop ebp  +
mov edi [ebp+14h] +
mov [edi] esi +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
leave   +
retn   +
***
pop es  +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
jmp loc_4259D0  +
mov edx [ebp+10h] +
mov edi [ebp+0Ch] +
mov ecx [ebp+8] +
push ebp  +
mov ebp ecx +
mov esi 0 +
movd mm0 dword ptr [edi] +
movd mm1 dword ptr [edi+4] +
movq mm2 mm0 +
pmuludq mm0 qword ptr [edx] +
movq mm3 mm1 +
pmuludq mm1 qword ptr [edx] +
pmuludq mm2 qword ptr [edx+4] +
pmuludq mm3 qword ptr [edx+4] +
movd eax mm0 +
mov ebx 0 +
add [ebp+0] eax +
adc ebx 0 +
movd ecx mm1 +
psrlq mm0 20h +
mov eax 0 +
add ecx ebx +
adc eax 0 +
psrlq mm1 20h +
movd ebx mm2 +
add ecx ebx +
adc eax 0 +
movd mm4 dword ptr [edi] +
movd ebx mm0 +
psrlq mm2 20h +
add ecx ebx +
adc eax 0 +
movd mm5 dword ptr [edi+4] +
add [ebp+4] ecx +
adc eax 0 +
movq mm6 mm4 +
movq mm0 qword ptr [edx+8] +
mov ebx 0 +
movd ecx mm3 +
add eax ecx +
adc ebx 0 +
pmuludq mm4 mm0 +
movd ecx mm1 +
add eax ecx +
adc ebx 0 +
psrlq mm3 20h +
add eax esi +
adc ebx 0 +
movq mm7 mm5 +
movd ecx mm2 +
add eax ecx +
adc ebx 0 +
pmuludq mm5 mm0 +
add [ebp+8] eax +
adc ebx 0 +
movd ecx mm3 +
psrlq mm0 20h +
mov esi 0 +
add ebx ecx +
adc esi 0 +
pmuludq mm6 mm0 +
add [ebp+0Ch] ebx +
adc esi 0 +
pmuludq mm7 mm0 +
movd eax mm4 +
mov ebx 0 +
add [ebp+8] eax +
adc ebx 0 +
movd ecx mm5 +
psrlq mm4 20h +
mov eax 0 +
add ecx ebx +
adc eax 0 +
psrlq mm5 20h +
movd ebx mm6 +
add ecx ebx +
adc eax 0 +
movd mm0 dword ptr [edi] +
movd ebx mm4 +
psrlq mm6 20h +
add ecx ebx +
adc eax 0 +
movd mm1 dword ptr [edi+4] +
add [ebp+0Ch] ecx +
adc eax 0 +
movq mm2 mm0 +
movq mm4 qword ptr [edx+10h] +
mov ebx 0 +
movd ecx mm7 +
add eax ecx +
adc ebx 0 +
pmuludq mm0 mm4 +
movd ecx mm5 +
add eax ecx +
adc ebx 0 +
psrlq mm7 20h +
add eax esi +
adc ebx 0 +
movq mm3 mm1 +
movd ecx mm6 +
add eax ecx +
adc ebx 0 +
pmuludq mm1 mm4 +
add [ebp+10h] eax +
adc ebx 0 +
movd ecx mm7 +
psrlq mm4 20h +
mov esi 0 +
add ebx ecx +
adc esi 0 +
pmuludq mm2 mm4 +
add [ebp+14h] ebx +
adc esi 0 +
pmuludq mm3 mm4 +
movd eax mm0 +
mov ebx 0 +
add [ebp+10h] eax +
adc ebx 0 +
movd ecx mm1 +
psrlq mm0 20h +
mov eax 0 +
add ecx ebx +
adc eax 0 +
psrlq mm1 20h +
movd ebx mm2 +
add ecx ebx +
adc eax 0 +
movd mm4 dword ptr [edi] +
movd ebx mm0 +
psrlq mm2 20h +
add ecx ebx +
adc eax 0 +
movd mm5 dword ptr [edi+4] +
add [ebp+14h] ecx +
adc eax 0 +
movq mm6 mm4 +
movq mm0 qword ptr [edx+18h] +
mov ebx 0 +
movd ecx mm3 +
add eax ecx +
adc ebx 0 +
pmuludq mm4 mm0 +
movd ecx mm1 +
add eax ecx +
adc ebx 0 +
psrlq mm3 20h +
add eax esi +
adc ebx 0 +
movq mm7 mm5 +
movd ecx mm2 +
add eax ecx +
adc ebx 0 +
pmuludq mm5 mm0 +
add [ebp+18h] eax +
adc ebx 0 +
movd ecx mm3 +
psrlq mm0 20h +
mov esi 0 +
add ebx ecx +
adc esi 0 +
pmuludq mm6 mm0 +
add [ebp+1Ch] ebx +
adc esi 0 +
pmuludq mm7 mm0 +
movd eax mm4 +
mov ebx 0 +
add [ebp+18h] eax +
adc ebx 0 +
movd ecx mm5 +
psrlq mm4 20h +
mov eax 0 +
add ecx ebx +
adc eax 0 +
psrlq mm5 20h +
movd ebx mm6 +
add ecx ebx +
adc eax 0 +
movd ebx mm4 +
psrlq mm6 20h +
add ecx ebx +
adc eax 0 +
add [ebp+1Ch] ecx +
adc eax 0 +
mov ebx 0 +
movd ecx mm7 +
add eax ecx +
adc ebx 0 +
movd ecx mm5 +
add eax ecx +
adc ebx 0 +
psrlq mm7 20h +
add eax esi +
adc ebx 0 +
movd ecx mm6 +
add eax ecx +
adc ebx 0 +
add [ebp+20h] eax +
adc ebx 0 +
movd ecx mm7 +
mov esi 0 +
add ebx ecx +
adc esi 0 +
add [ebp+24h] ebx +
adc esi 0 +
emms   +
pop ebp  +
mov edi [ebp+14h] +
mov [edi] esi +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
leave   +
retn   +
***
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi [ebp+0Ch] +
mov edi [ebp+10h] +
movd mm0 dword ptr [edi] +
movd mm1 dword ptr [edi+4] +
movd mm2 dword ptr [edi+8] +
movd mm7 esi +
movd mm3 dword ptr [edi+0Ch] +
movd mm4 dword ptr [edi+10h] +
mov ecx 0 +
movd mm5 dword ptr [edi+14h] +
pmuludq mm0 mm7 +
movd mm6 dword ptr [edi+18h] +
pmuludq mm1 mm7 +
mov esi edi +
mov edi [ebp+8] +
movd eax mm0 +
mov [edi] eax +
psrlq mm0 20h +
mov edx 0 +
movd eax mm0 +
movd ebx mm1 +
add ecx eax +
adc edx 0 +
pmuludq mm2 mm7 +
add ecx ebx +
adc edx 0 +
psrlq mm1 20h +
mov [edi+4] ecx +
mov ecx 0 +
movd eax mm1 +
movd ebx mm2 +
add edx eax +
adc ecx 0 +
pmuludq mm3 mm7 +
add edx ebx +
adc ecx 0 +
psrlq mm2 20h +
mov [edi+8] edx +
movq mm0 mm7 +
movd mm7 dword ptr [esi+1Ch] +
mov edx 0 +
movd eax mm2 +
movd ebx mm3 +
add ecx eax +
adc edx 0 +
pmuludq mm4 mm0 +
add ecx ebx +
adc edx 0 +
psrlq mm3 20h +
mov [edi+0Ch] ecx +
mov ecx 0 +
movd eax mm3 +
movd ebx mm4 +
add edx eax +
adc ecx 0 +
pmuludq mm5 mm0 +
add edx ebx +
adc ecx 0 +
psrlq mm4 20h +
mov [edi+10h] edx +
mov edx 0 +
movd eax mm4 +
movd ebx mm5 +
add ecx eax +
adc edx 0 +
pmuludq mm6 mm0 +
add ecx ebx +
adc edx 0 +
psrlq mm5 20h +
mov [edi+14h] ecx +
mov ecx 0 +
movd eax mm5 +
movd ebx mm6 +
add edx eax +
adc ecx 0 +
pmuludq mm7 mm0 +
add edx ebx +
adc ecx 0 +
psrlq mm6 20h +
mov [edi+18h] edx +
mov edx 0 +
movd eax mm6 +
movd ebx mm7 +
add ecx eax +
adc edx 0 +
add ecx ebx +
adc edx 0 +
psrlq mm7 20h +
mov [edi+1Ch] ecx +
movd eax mm7 +
mov ecx 0 +
add edx eax +
adc ecx 0 +
emms   +
mov [edi+20h] edx +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
leave   +
retn   +
***
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi [ebp+0Ch] +
mov edi [ebp+10h] +
movd mm0 dword ptr [edi] +
movd mm1 dword ptr [edi+4] +
movd mm2 dword ptr [edi+8] +
movd mm7 esi +
movd mm3 dword ptr [edi+0Ch] +
movd mm4 dword ptr [edi+10h] +
mov ecx 0 +
movd mm5 dword ptr [edi+14h] +
pmuludq mm0 mm7 +
movd mm6 dword ptr [edi+18h] +
pmuludq mm1 mm7 +
mov esi edi +
mov edi [ebp+8] +
movd eax mm0 +
add [edi] eax +
adc ecx 0 +
psrlq mm0 20h +
mov edx 0 +
movd eax mm0 +
movd ebx mm1 +
add ecx eax +
adc edx 0 +
add ecx ebx +
adc edx 0 +
pmuludq mm2 mm7 +
add [edi+4] ecx +
adc edx 0 +
psrlq mm1 20h +
mov ecx 0 +
movd eax mm1 +
movd ebx mm2 +
add edx eax +
adc ecx 0 +
add edx ebx +
adc ecx 0 +
pmuludq mm3 mm7 +
add [edi+8] edx +
adc ecx 0 +
psrlq mm2 20h +
movq mm0 mm7 +
movd mm7 dword ptr [esi+1Ch] +
mov edx 0 +
movd eax mm2 +
movd ebx mm3 +
add ecx eax +
adc edx 0 +
add ecx ebx +
adc edx 0 +
pmuludq mm4 mm0 +
add [edi+0Ch] ecx +
adc edx 0 +
psrlq mm3 20h +
mov ecx 0 +
movd eax mm3 +
movd ebx mm4 +
add edx eax +
adc ecx 0 +
add edx ebx +
adc ecx 0 +
pmuludq mm5 mm0 +
add [edi+10h] edx +
adc ecx 0 +
psrlq mm4 20h +
mov edx 0 +
movd eax mm4 +
movd ebx mm5 +
add ecx eax +
adc edx 0 +
add ecx ebx +
adc edx 0 +
pmuludq mm6 mm0 +
add [edi+14h] ecx +
adc edx 0 +
psrlq mm5 20h +
mov ecx 0 +
movd eax mm5 +
movd ebx mm6 +
add edx eax +
adc ecx 0 +
add edx ebx +
adc ecx 0 +
pmuludq mm7 mm0 +
add [edi+18h] edx +
adc ecx 0 +
psrlq mm6 20h +
mov edx 0 +
movd eax mm6 +
movd ebx mm7 +
add ecx eax +
adc edx 0 +
add ecx ebx +
adc edx 0 +
psrlq mm7 20h +
add [edi+1Ch] ecx +
adc edx 0 +
movd eax mm7 +
mov ecx 0 +
add edx eax +
adc ecx 0 +
emms   +
add [edi+20h] edx +
adc ecx 0 +
mov edi [ebp+14h] +
mov [edi] ecx +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
leave   +
retn   +
***
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi [ebp+0Ch] +
mov edi [ebp+10h] +
movd mm0 dword ptr [edi] +
movd mm1 dword ptr [edi+4] +
movd mm2 dword ptr [edi+8] +
movd mm7 esi +
movd mm3 dword ptr [edi+0Ch] +
movd mm4 dword ptr [edi+10h] +
mov ecx 0 +
movd mm5 dword ptr [edi+14h] +
pmuludq mm0 mm7 +
movd mm6 dword ptr [edi+18h] +
pmuludq mm1 mm7 +
mov esi edi +
mov edi [ebp+8] +
movd eax mm0 +
sub [edi] eax +
adc ecx 0 +
psrlq mm0 20h +
mov edx 0 +
movd eax mm0 +
movd ebx mm1 +
add ecx eax +
adc edx 0 +
add ecx ebx +
adc edx 0 +
pmuludq mm2 mm7 +
sub [edi+4] ecx +
adc edx 0 +
psrlq mm1 20h +
mov ecx 0 +
movd eax mm1 +
movd ebx mm2 +
add edx eax +
adc ecx 0 +
add edx ebx +
adc ecx 0 +
pmuludq mm3 mm7 +
sub [edi+8] edx +
adc ecx 0 +
psrlq mm2 20h +
movd mm1 dword ptr [esi+20h] +
movq mm0 mm7 +
movd mm7 dword ptr [esi+1Ch] +
mov edx 0 +
movd eax mm2 +
movd ebx mm3 +
add ecx eax +
adc edx 0 +
add ecx ebx +
adc edx 0 +
pmuludq mm4 mm0 +
sub [edi+0Ch] ecx +
adc edx 0 +
psrlq mm3 20h +
mov ecx 0 +
movd eax mm3 +
movd ebx mm4 +
add edx eax +
adc ecx 0 +
add edx ebx +
adc ecx 0 +
pmuludq mm5 mm0 +
sub [edi+10h] edx +
adc ecx 0 +
psrlq mm4 20h +
mov edx 0 +
movd eax mm4 +
movd ebx mm5 +
add ecx eax +
adc edx 0 +
add ecx ebx +
adc edx 0 +
pmuludq mm6 mm0 +
sub [edi+14h] ecx +
adc edx 0 +
psrlq mm5 20h +
mov ecx 0 +
movd eax mm5 +
movd ebx mm6 +
add edx eax +
adc ecx 0 +
add edx ebx +
adc ecx 0 +
pmuludq mm7 mm0 +
sub [edi+18h] edx +
adc ecx 0 +
psrlq mm6 20h +
mov edx 0 +
movd eax mm6 +
movd ebx mm7 +
add ecx eax +
adc edx 0 +
add ecx ebx +
adc edx 0 +
pmuludq mm1 mm0 +
sub [edi+1Ch] ecx +
adc edx 0 +
psrlq mm7 20h +
mov ecx 0 +
movd eax mm7 +
movd ebx mm1 +
add edx eax +
adc ecx 0 +
add edx ebx +
adc ecx 0 +
psrlq mm1 20h +
sub [edi+20h] edx +
adc ecx 0 +
mov edi [ebp+14h] +
mov [edi] ecx +
emms   +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
leave   +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_4] +
mov edi [ebp+arg_8] +
mov ebx [ebp+arg_0] +
xor edx edx +
xor ecx ecx +
add edx [esi] +
adc ecx 0 +
add edx [edi] +
adc ecx 0 +
mov [ebx] edx +
xor edx edx +
add ecx [esi+4] +
adc edx 0 +
add ecx [edi+4] +
adc edx 0 +
mov [ebx+4] ecx +
xor ecx ecx +
add edx [esi+8] +
adc ecx 0 +
add edx [edi+8] +
adc ecx 0 +
mov [ebx+8] edx +
xor edx edx +
add ecx [esi+0Ch] +
adc edx 0 +
add ecx [edi+0Ch] +
adc edx 0 +
mov [ebx+0Ch] ecx +
xor ecx ecx +
add edx [esi+10h] +
adc ecx 0 +
add edx [edi+10h] +
adc ecx 0 +
mov [ebx+10h] edx +
xor edx edx +
add ecx [esi+14h] +
adc edx 0 +
add ecx [edi+14h] +
adc edx 0 +
mov [ebx+14h] ecx +
xor ecx ecx +
add edx [esi+18h] +
adc ecx 0 +
add edx [edi+18h] +
adc ecx 0 +
mov [ebx+18h] edx +
xor edx edx +
add ecx [esi+1Ch] +
adc edx 0 +
add ecx [edi+1Ch] +
adc edx 0 +
mov [ebx+1Ch] ecx +
xor ecx ecx +
add edx [esi+20h] +
adc ecx 0 +
add edx [edi+20h] +
adc ecx 0 +
mov [ebx+20h] edx +
xor edx edx +
add ecx [esi+24h] +
adc edx 0 +
add ecx [edi+24h] +
adc edx 0 +
mov [ebx+24h] ecx +
xor ecx ecx +
add edx [esi+28h] +
adc ecx 0 +
add edx [edi+28h] +
adc ecx 0 +
mov [ebx+28h] edx +
xor edx edx +
add ecx [esi+2Ch] +
adc edx 0 +
add ecx [edi+2Ch] +
adc edx 0 +
mov [ebx+2Ch] ecx +
xor ecx ecx +
add edx [esi+30h] +
adc ecx 0 +
add edx [edi+30h] +
adc ecx 0 +
mov [ebx+30h] edx +
xor edx edx +
add ecx [esi+34h] +
adc edx 0 +
add ecx [edi+34h] +
adc edx 0 +
mov [ebx+34h] ecx +
xor ecx ecx +
add edx [esi+38h] +
adc ecx 0 +
add edx [edi+38h] +
adc ecx 0 +
mov [ebx+38h] edx +
xor edx edx +
add ecx [esi+3Ch] +
adc edx 0 +
add ecx [edi+3Ch] +
adc edx 0 +
mov [ebx+3Ch] ecx +
mov esi [ebp+arg_C] +
mov [esi] edx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
mov ebx [ebp+arg_0] +
mov esi [ebp+arg_C] +
mov edx [esi] +
mov esi [ebp+arg_4] +
xor ecx ecx +
add edx [esi] +
adc ecx 0 +
add edx [edi] +
adc ecx 0 +
mov [ebx] edx +
xor edx edx +
add ecx [esi+4] +
adc edx 0 +
add ecx [edi+4] +
adc edx 0 +
mov [ebx+4] ecx +
xor ecx ecx +
add edx [esi+8] +
adc ecx 0 +
add edx [edi+8] +
adc ecx 0 +
mov [ebx+8] edx +
xor edx edx +
add ecx [esi+0Ch] +
adc edx 0 +
add ecx [edi+0Ch] +
adc edx 0 +
mov [ebx+0Ch] ecx +
xor ecx ecx +
add edx [esi+10h] +
adc ecx 0 +
add edx [edi+10h] +
adc ecx 0 +
mov [ebx+10h] edx +
xor edx edx +
add ecx [esi+14h] +
adc edx 0 +
add ecx [edi+14h] +
adc edx 0 +
mov [ebx+14h] ecx +
xor ecx ecx +
add edx [esi+18h] +
adc ecx 0 +
add edx [edi+18h] +
adc ecx 0 +
mov [ebx+18h] edx +
xor edx edx +
add ecx [esi+1Ch] +
adc edx 0 +
add ecx [edi+1Ch] +
adc edx 0 +
mov [ebx+1Ch] ecx +
xor ecx ecx +
add edx [esi+20h] +
adc ecx 0 +
add edx [edi+20h] +
adc ecx 0 +
mov [ebx+20h] edx +
xor edx edx +
add ecx [esi+24h] +
adc edx 0 +
add ecx [edi+24h] +
adc edx 0 +
mov [ebx+24h] ecx +
xor ecx ecx +
add edx [esi+28h] +
adc ecx 0 +
add edx [edi+28h] +
adc ecx 0 +
mov [ebx+28h] edx +
xor edx edx +
add ecx [esi+2Ch] +
adc edx 0 +
add ecx [edi+2Ch] +
adc edx 0 +
mov [ebx+2Ch] ecx +
xor ecx ecx +
add edx [esi+30h] +
adc ecx 0 +
add edx [edi+30h] +
adc ecx 0 +
mov [ebx+30h] edx +
xor edx edx +
add ecx [esi+34h] +
adc edx 0 +
add ecx [edi+34h] +
adc edx 0 +
mov [ebx+34h] ecx +
xor ecx ecx +
add edx [esi+38h] +
adc ecx 0 +
add edx [edi+38h] +
adc ecx 0 +
mov [ebx+38h] edx +
xor edx edx +
add ecx [esi+3Ch] +
adc edx 0 +
add ecx [edi+3Ch] +
adc edx 0 +
mov [ebx+3Ch] ecx +
mov esi [ebp+arg_C] +
mov [esi] edx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_4] +
mov edi [ebp+arg_8] +
mov ebx [ebp+arg_0] +
xor edx edx +
mov eax [esi] +
xor ecx ecx +
sub eax [edi] +
adc ecx 0 +
sub eax edx +
adc ecx 0 +
mov [ebx] eax +
mov eax [esi+4] +
xor edx edx +
sub eax [edi+4] +
adc edx 0 +
sub eax ecx +
adc edx 0 +
mov [ebx+4] eax +
mov eax [esi+8] +
xor ecx ecx +
sub eax [edi+8] +
adc ecx 0 +
sub eax edx +
adc ecx 0 +
mov [ebx+8] eax +
mov eax [esi+0Ch] +
xor edx edx +
sub eax [edi+0Ch] +
adc edx 0 +
sub eax ecx +
adc edx 0 +
mov [ebx+0Ch] eax +
mov eax [esi+10h] +
xor ecx ecx +
sub eax [edi+10h] +
adc ecx 0 +
sub eax edx +
adc ecx 0 +
mov [ebx+10h] eax +
mov eax [esi+14h] +
xor edx edx +
sub eax [edi+14h] +
adc edx 0 +
sub eax ecx +
adc edx 0 +
mov [ebx+14h] eax +
mov eax [esi+18h] +
xor ecx ecx +
sub eax [edi+18h] +
adc ecx 0 +
sub eax edx +
adc ecx 0 +
mov [ebx+18h] eax +
mov eax [esi+1Ch] +
xor edx edx +
sub eax [edi+1Ch] +
adc edx 0 +
sub eax ecx +
adc edx 0 +
mov [ebx+1Ch] eax +
mov eax [esi+20h] +
xor ecx ecx +
sub eax [edi+20h] +
adc ecx 0 +
sub eax edx +
adc ecx 0 +
mov [ebx+20h] eax +
mov eax [esi+24h] +
xor edx edx +
sub eax [edi+24h] +
adc edx 0 +
sub eax ecx +
adc edx 0 +
mov [ebx+24h] eax +
mov eax [esi+28h] +
xor ecx ecx +
sub eax [edi+28h] +
adc ecx 0 +
sub eax edx +
adc ecx 0 +
mov [ebx+28h] eax +
mov eax [esi+2Ch] +
xor edx edx +
sub eax [edi+2Ch] +
adc edx 0 +
sub eax ecx +
adc edx 0 +
mov [ebx+2Ch] eax +
mov eax [esi+30h] +
xor ecx ecx +
sub eax [edi+30h] +
adc ecx 0 +
sub eax edx +
adc ecx 0 +
mov [ebx+30h] eax +
mov eax [esi+34h] +
xor edx edx +
sub eax [edi+34h] +
adc edx 0 +
sub eax ecx +
adc edx 0 +
mov [ebx+34h] eax +
mov eax [esi+38h] +
xor ecx ecx +
sub eax [edi+38h] +
adc ecx 0 +
sub eax edx +
adc ecx 0 +
mov [ebx+38h] eax +
mov eax [esi+3Ch] +
xor edx edx +
sub eax [edi+3Ch] +
adc edx 0 +
sub eax ecx +
adc edx 0 +
mov [ebx+3Ch] eax +
mov esi [ebp+arg_C] +
mov [esi] edx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_4] +
mov edi [ebp+arg_8] +
mov ebx [ebp+arg_0] +
xor edx edx +
mov eax [esi] +
xor ecx ecx +
sub eax [edi] +
adc ecx 0 +
sub eax edx +
adc ecx 0 +
mov [ebx] eax +
mov eax [esi+4] +
xor edx edx +
sub eax [edi+4] +
adc edx 0 +
sub eax ecx +
adc edx 0 +
mov [ebx+4] eax +
mov eax [esi+8] +
xor ecx ecx +
sub eax [edi+8] +
adc ecx 0 +
sub eax edx +
adc ecx 0 +
mov [ebx+8] eax +
mov eax [esi+0Ch] +
xor edx edx +
sub eax [edi+0Ch] +
adc edx 0 +
sub eax ecx +
adc edx 0 +
mov [ebx+0Ch] eax +
mov eax [esi+10h] +
xor ecx ecx +
sub eax [edi+10h] +
adc ecx 0 +
sub eax edx +
adc ecx 0 +
mov [ebx+10h] eax +
mov eax [esi+14h] +
xor edx edx +
sub eax [edi+14h] +
adc edx 0 +
sub eax ecx +
adc edx 0 +
mov [ebx+14h] eax +
mov eax [esi+18h] +
xor ecx ecx +
sub eax [edi+18h] +
adc ecx 0 +
sub eax edx +
adc ecx 0 +
mov [ebx+18h] eax +
mov eax [esi+1Ch] +
xor edx edx +
sub eax [edi+1Ch] +
adc edx 0 +
sub eax ecx +
adc edx 0 +
mov [ebx+1Ch] eax +
mov eax [esi+20h] +
xor ecx ecx +
sub eax [edi+20h] +
adc ecx 0 +
sub eax edx +
adc ecx 0 +
mov [ebx+20h] eax +
mov eax [esi+24h] +
xor edx edx +
sub eax [edi+24h] +
adc edx 0 +
sub eax ecx +
adc edx 0 +
mov [ebx+24h] eax +
mov eax [esi+28h] +
xor ecx ecx +
sub eax [edi+28h] +
adc ecx 0 +
sub eax edx +
adc ecx 0 +
mov [ebx+28h] eax +
mov eax [esi+2Ch] +
xor edx edx +
sub eax [edi+2Ch] +
adc edx 0 +
sub eax ecx +
adc edx 0 +
mov [ebx+2Ch] eax +
mov eax [esi+30h] +
xor ecx ecx +
sub eax [edi+30h] +
adc ecx 0 +
sub eax edx +
adc ecx 0 +
mov [ebx+30h] eax +
mov eax [esi+34h] +
xor edx edx +
sub eax [edi+34h] +
adc edx 0 +
sub eax ecx +
adc edx 0 +
mov [ebx+34h] eax +
mov eax [esi+38h] +
xor ecx ecx +
sub eax [edi+38h] +
adc ecx 0 +
sub eax edx +
adc ecx 0 +
mov [ebx+38h] eax +
mov eax [esi+3Ch] +
xor edx edx +
sub eax [edi+3Ch] +
adc edx 0 +
sub eax ecx +
adc edx 0 +
mov [ebx+3Ch] eax +
mov eax [esi+40h] +
xor ecx ecx +
sub eax [edi+40h] +
adc ecx 0 +
sub eax edx +
adc ecx 0 +
mov [ebx+40h] eax +
mov eax [esi+44h] +
xor edx edx +
sub eax [edi+44h] +
adc edx 0 +
sub eax ecx +
adc edx 0 +
mov [ebx+44h] eax +
mov esi [ebp+arg_C] +
mov [esi] edx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
push ecx  +
push ebx  +
push edi  +
mov edi [ebp+arg_0] +
mov eax [edi] +
mov ecx [edi+8] +
cpuid   +
mov [edi] eax +
mov [edi+4] ebx +
mov [edi+8] ecx +
mov [edi+0Ch] edx +
pop edi  +
pop ebx  +
pop ecx  +
leave   +
retn   +
***
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi 0 +
pushf   +
pop eax  +
mov ecx eax +
xor eax 200000h +
push eax  +
popf   +
pushf   +
pop eax  +
push ecx  +
popf   +
xor eax ecx +
jz loc_426606  +
mov eax 0FFFFFFFFh +
jmp loc_42660B  +
mov eax 0 +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
leave   +
retn   +
***
jmp loc_426620  +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
mov edi [ebp+8] +
mov ecx [edi+8] +
add eax edx +
mov [edi] eax +
mov [edi+0Ch] edx +
pop edi  +
pop ecx  +
leave   +
retn   +
***
push ebp  +
mov ebp esp +
push edi  +
mov eax cr0 +
and eax 4 +
jnz loc_42665D  +
mov eax cr4 +
and eax 200h +
jz loc_42665D  +
mov eax 0FFFFFFFFh +
jmp loc_426662  +
mov eax 0 +
pop edi  +
leave   +
retn   +
***
lea eax [esp+4+arg_0] +
lea eax [esp+4+arg_0] +
lea eax [esp+4+arg_0] +
lea eax [esp+4+arg_0] +
mov ecx [ebp-0Ch] +
mov ecx [ebp-10h] +
mov ecx [ebp-14h] +
cmp cl 40h +
jnb loc_42679A  +
cmp cl 20h +
jnb loc_426790  +
shld edx eax +
shl eax cl +
retn   +
mov edx eax +
xor eax eax +
and cl 1Fh +
shl edx cl +
retn   +
xor eax eax +
xor edx edx +
retn   +
***
cmp cl 40h +
jnb loc_4267BA  +
cmp cl 20h +
jnb loc_4267B0  +
shrd eax edx +
shr edx cl +
retn   +
mov eax edx +
xor edx edx +
and cl 1Fh +
shr eax cl +
retn   +
xor eax eax +
xor edx edx +
retn   +
***
mov eax [esp+arg_C] +
or eax eax +
jnz loc_4267E2  +
mov ecx [esp+arg_8] +
mov eax [esp+arg_4] +
xor edx edx +
div  ecx +
mov ebx eax +
mov eax [esp+arg_0] +
div  ecx +
mov edx ebx +
jmp loc_426823  +
mov ecx eax +
mov ebx [esp+arg_8] +
mov edx [esp+arg_4] +
mov eax [esp+arg_0] +
shr ecx 1 +
rcr ebx 1 +
shr edx 1 +
rcr eax 1 +
or ecx ecx +
jnz loc_4267F0  +
div  ebx +
mov esi eax +
mul  [esp+arg_C] +
mov ecx eax +
mov eax [esp+arg_8] +
mul  esi +
add edx ecx +
jb loc_42681E  +
cmp edx [esp+arg_4] +
ja loc_42681E  +
jb loc_42681F  +
cmp eax [esp+arg_0] +
jbe loc_42681F  +
dec esi  +
xor edx edx +
mov eax esi +
pop esi  +
pop ebx  +
retn 10h  +
***
sub ecx eax +
lea ecx [ebp-28h] +
jmp loc_4043F7  +
***
lea ecx [ebp-10h] +
jmp ??1_Lockit@std@@QAE@XZ  +
***
mov ecx [ebp-10h] +
jmp loc_402917  +
***
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
add ecx 18h +
jmp loc_4043F7  +
***
lea ecx [ebp-10h] +
pop ecx  +
retn   +
***
mov ecx [ebp+8] +
mov ecx [ebp+8] +
mov ecx [ebp+8] +
mov ecx [ebp+8] +
mov ecx [ebp+8] +
add ecx 58h +
jmp loc_4043F7  +
***
pop ecx  +
mov eax [ebp-88h] +
jmp loc_40298C  +
***
lea ecx [ebp-14h] +
jmp ??1_Lockit@std@@QAE@XZ  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_41C200  +
mov eax offset unk_42F044 +
jmp loc_41C0F1  +
***
lea ecx [ebp-2Ch] +
jmp loc_4043F7  +
***
mov eax [ebp-88h] +
jmp loc_40298C  +
***
mov ecx [ebp+8] +
jmp ds:??1exception@@UAE@XZ  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10h] +
xor ecx eax +
call sub_41C200  +
mov eax offset unk_42F154 +
jmp loc_41C0F1  +
***
lea ecx [ebp-30h] +
lea eax [ebp+0Ch] +
jmp loc_40108F  +
***
mov ecx [ebp-10h] +
jmp ds:??1exception@@UAE@XZ  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_41C200  +
mov eax offset unk_42F240 +
jmp loc_41C0F1  +
***
lea esi [ebp-2Ch] +
jmp loc_401BC5  +
***
lea esi [ebp-2Ch] +
jmp loc_401BC5  +
***
lea ecx [ebp-2Ch] +
jmp loc_4043F7  +
***
mov ecx [ebp-10h] +
jmp sub_40447F  +
***
mov ecx [ebp-10h] +
sub ecx 50h +
jmp loc_404458  +
***
lea eax [ebp-5Ch] +
lea ecx [ebp-30h] +
jmp loc_4043F7  +
***
lea eax [ebp-58h] +
lea ecx [ebp-2Ch] +
lea ecx [ebp-2Ch] +
jmp loc_4043F7  +
***
lea ecx [ebp-68h] +
lea ecx [ebp-2Ch] +
jmp loc_4043F7  +
***
mov eax [ebp-5Ch] +
lea eax [ebp-58h] +
lea ecx [ebp-2Ch] +
jmp loc_4043F7  +
***
lea ecx [ebp-30h] +
jmp loc_4043F7  +
***
lea ecx [ebp-2Ch] +
jmp loc_4043F7  +
***
lea ecx [ebp-30h] +
jmp loc_4043F7  +
***
mov esi [ebp-5Ch] +
lea ecx [ebp-2Ch] +
jmp loc_4043F7  +
***
lea ecx [ebp-10h] +
pop ecx  +
retn   +
***
lea esi [ebp-248h] +
lea esi [ebp-2B8h] +
lea esi [ebp-29Ch] +
lea esi [ebp-280h] +
lea ecx [ebp-264h] +
jmp loc_4043F7  +
***
lea esi [ebp-130h] +
lea esi [ebp-168h] +
lea esi [ebp-14Ch] +
jmp loc_401BC5  +
***
lea ecx [ebp-74h] +
lea ecx [ebp-74h] +
lea ecx [ebp-30h] +
jmp loc_4043F7  +
***
lea eax [ebp-68h] +
lea eax [ebp-5Ch] +
lea ecx [ebp-58h] +
lea ecx [ebp-58h] +
lea eax [ebp-64h] +
jmp loc_401571  +
***
lea eax [ebp-5Ch] +
lea ecx [ebp-30h] +
lea eax [ebp-60h] +
lea ecx [ebp-30h] +
jmp loc_4043F7  +
***
lea esi [ebp-58h] +
lea eax [ebp-3Ch] +
jmp sub_40731D  +
***
lea ecx [ebp-58h] +
jmp loc_4043F7  +
***
mov esi [ebp-64h] +
mov esi [ebp-64h] +
lea ecx [ebp-30h] +
lea ecx [ebp-30h] +
lea ecx [ebp-30h] +
lea ecx [ebp-30h] +
jmp loc_4043F7  +
***
mov esi [ebp-64h] +
mov esi [ebp-64h] +
lea ecx [ebp-30h] +
lea ecx [ebp-30h] +
jmp loc_4043F7  +
***
mov esi [ebp+8] +
add esi 4 +
jmp loc_401BC5  +
***
lea esi [ebp-48h] +
lea esi [ebp-2Ch] +
jmp loc_401BC5  +
***
lea edi [ebp-44h] +
jmp loc_401A34  +
***
mov eax [ebp-78h] +
lea eax [ebp-74h] +
lea ecx [ebp-34h] +
lea eax [ebp-68h] +
lea ecx [ebp-94h] +
lea eax [ebp-60h] +
lea ecx [ebp-34h] +
lea eax [ebp-70h] +
lea ecx [ebp-34h] +
jmp loc_4043F7  +
***
lea esi [ebp-198h] +
lea eax [ebp-148h] +
lea edi [ebp-17Ch] +
jmp loc_401A34  +
***
lea edi [ebp-68h] +
lea edi [ebp-9Ch] +
lea esi [ebp-2Ch] +
lea edi [ebp-0D0h] +
lea esi [ebp-0B8h] +
jmp loc_401BC5  +
***
lea ecx [ebp-48h] +
lea esi [ebp-2Ch] +
lea ecx [ebp-64h] +
jmp loc_4043F7  +
***
lea ecx [ebp-14h] +
jmp ??1locale@std@@QAE@XZ  +
***
lea ecx [ebp+0Ch] +
jmp ??1locale@std@@QAE@XZ  +
***
lea eax [ebp-30h] +
jmp loc_401571  +
***
lea esi [ebp-74h] +
lea eax [ebp-98h] +
lea eax [ebp-0A0h] +
lea eax [ebp-9Ch] +
lea esi [ebp-58h] +
lea eax [ebp-0A0h] +
lea eax [ebp-3Ch] +
lea ecx [ebp-88h] +
jmp loc_401098  +
***
lea eax [ebp-80h] +
lea eax [ebp-98h] +
lea eax [ebp-90h] +
lea eax [ebp-84h] +
lea edi [ebp-7Ch] +
lea esi [ebp-40h] +
lea esi [ebp-40h] +
jmp loc_401BC5  +
***
lea eax [ebp-10h] +
jmp loc_401571  +
***
lea esi [ebp-0BCh] +
lea esi [ebp-84h] +
lea esi [ebp-0A0h] +
lea esi [ebp-68h] +
lea eax [ebp-104h] +
lea ecx [ebp-0E0h] +
lea eax [ebp-100h] +
lea esi [ebp-4Ch] +
lea eax [ebp-0F4h] +
lea eax [ebp-0E4h] +
lea eax [ebp-0F4h] +
lea esi [ebp-4Ch] +
lea esi [ebp-30h] +
lea eax [ebp-100h] +
lea eax [ebp-0ECh] +
lea ecx [ebp-0D0h] +
jmp loc_401098  +
***
lea esi [ebp-0BCh] +
lea esi [ebp-68h] +
lea esi [ebp-0A0h] +
lea esi [ebp-84h] +
lea eax [ebp-0E4h] +
lea ecx [ebp-0D0h] +
lea eax [ebp-0F0h] +
lea esi [ebp-4Ch] +
lea eax [ebp-0F4h] +
lea eax [ebp-0DCh] +
lea eax [ebp-0F4h] +
lea esi [ebp-4Ch] +
lea esi [ebp-30h] +
lea eax [ebp-0F0h] +
lea eax [ebp-0D8h] +
jmp loc_401571  +
***
lea eax [ebp-0E0h] +
lea edi [ebp-148h] +
lea edi [ebp-114h] +
lea edi [ebp-0B8h] +
lea edi [ebp-50h] +
lea eax [ebp-78h] +
lea edi [ebp-84h] +
lea edi [ebp-84h] +
lea edi [ebp-84h] +
jmp loc_401A34  +
***
lea eax [ebp-3Ch] +
lea eax [ebp-64h] +
jmp sub_40731D  +
***
lea esi [ebp-9Ch] +
lea esi [ebp-0B8h] +
lea eax [ebp-64h] +
lea esi [ebp-80h] +
lea esi [ebp-64h] +
lea eax [ebp-3Ch] +
jmp sub_40731D  +
***
lea esi [ebp-9Ch] +
lea eax [ebp-64h] +
lea esi [ebp-80h] +
lea esi [ebp-64h] +
lea eax [ebp-3Ch] +
jmp sub_40731D  +
***
lea eax [ebp-28h] +
lea eax [ebp-28h] +
lea ecx [ebp-1Ch] +
jmp ??1locale@std@@QAE@XZ  +
***
lea ecx [ebp+8] +
jmp ??1locale@std@@QAE@XZ  +
***
mov eax [ebp-14h] +
mov ecx [ebp+8] +
mov ecx [ebp-18h] +
add ecx 4 +
jmp loc_41D31F  +
***
lea esi [ebp-2Ch] +
lea esi [ebp-0B8h] +
lea esi [ebp-48h] +
lea esi [ebp-9Ch] +
lea esi [ebp-64h] +
lea esi [ebp-0D4h] +
lea eax [ebp-178h] +
lea ecx [ebp-80h] +
jmp loc_4043F7  +
***
lea esi [ebp-74h] +
lea eax [ebp-0A4h] +
lea ecx [ebp-88h] +
lea eax [ebp-0A8h] +
lea esi [ebp-58h] +
lea eax [ebp-9Ch] +
lea eax [ebp-98h] +
lea eax [ebp-3Ch] +
jmp sub_40731D  +
***
lea esi [ebp-2Ch] +
lea esi [ebp-64h] +
lea esi [ebp-0D4h] +
lea esi [ebp-0B8h] +
lea esi [ebp-48h] +
lea esi [ebp-80h] +
lea esi [ebp-0F0h] +
lea eax [ebp-1A4h] +
lea ecx [ebp-9Ch] +
jmp loc_4043F7  +
***
lea esi [ebp-30h] +
jmp loc_401BC5  +
***
mov eax offset unk_431F9C +
mov eax offset dword_431F98 +
pop ecx  +
mov ecx offset unk_431E58 +
call sub_41D273  +
push offset loc_4279AC  +
call sub_41C64D  +
pop ecx  +
retn   +
mov ecx offset unk_431EEC +
call sub_41D273  +
push offset loc_4279B6  +
call sub_41C64D  +
pop ecx  +
retn   +
push offset loc_4279C0  +
call sub_41C64D  +
pop ecx  +
retn   +
mov eax offset unk_431F9C +
jmp sub_40731D  +
mov eax dword_431F98 +
test eax eax +
jz locret_4279A1  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
retn   +
mov ecx offset dword_431DEC +
jmp ??1locale@std@@QAE@XZ  +
mov ecx offset unk_431E58 +
jmp unknown_libname_2  +
mov ecx offset unk_431EEC +
jmp unknown_libname_2  +
mov ecx offset unk_431EED +
jmp loc_41D71B  +
***
