push 0  +
push 0  +
push offset Destination  +
call ds:__imp_InterlockedCompareExchange  +
neg eax  +
sbb eax eax +
neg eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+lpCriticalSection] +
push esi  +
mov esi ecx +
push eax  +
mov [esi] eax +
call ds:EnterCriticalSection  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
test eax eax +
jz loc_1002BCA  +
retn   +
***
mov eax eax +
push eax  +
push large dword ptr fs:0  +
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_10220C8 +
xor eax ebp +
push eax  +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100149E  +
mov eax [ebp+arg_0] +
mov [esi] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jnz loc_10014AE  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
push eax  +
call sub_10014BB  +
jmp loc_10014A9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call sub_10014D2  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp sub_10014DF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpMem] 0 +
jz loc_10014FB  +
push [ebp+lpMem]  +
push 0  +
push hHeap  +
call ds:HeapFree  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp sub_100150F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push [ebp+dwBytes]  +
push 0  +
push hHeap  +
call ds:HeapAlloc  +
test eax eax +
jz loc_100C163  +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push 0  +
push esi  +
call ds:InterlockedExchange  +
call sub_10013E9  +
movzx eax al +
push eax  +
mov ecx esi +
call sub_100155E  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_0] al +
push esi  +
setnz al  +
mov esi ecx +
push eax  +
push esi  +
call ds:InterlockedExchange  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10015AA  +
mov eax [ebp+arg_0] +
mov [esi] eax +
test eax eax +
jz loc_100159E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_10015BB  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
call sub_1001448  +
mov esi ecx +
lea ecx [ebp-14h] +
mov edi 8000FFFFh +
call sub_1001537  +
xor ebx ebx +
push ebx  +
push ebx  +
lea eax [ebp-14h] +
push eax  +
mov [ebp-4] ebx +
call ds:__imp_InterlockedCompareExchange  +
test eax eax +
jz loc_1001640  +
mov [ebp-10h] ebx +
lea eax [esi+44h] +
push eax  +
lea ecx [ebp-18h] +
call sub_100140F  +
push dword ptr [esi+40h]  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 2 +
call sub_1001582  +
push dword ptr [ebp-18h]  +
mov byte ptr [ebp-4] 1 +
call ds:LeaveCriticalSection  +
mov eax [ebp-10h] +
cmp eax ebx +
jz loc_1001635  +
push dword ptr [ebp+0Ch]  +
mov ecx [eax] +
push dword ptr [ebp+8]  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov edi eax +
lea ecx [ebp-10h] +
mov [ebp-4] bl +
call sub_10015AA  +
push ebx  +
lea eax [ebp-14h] +
push eax  +
call ds:InterlockedExchange  +
call sub_100142F  +
mov eax edi +
call sub_100165F  +
retn 8  +
***
mov ecx [ebp-0Ch] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub esp 20h +
cmp eax 0FFFFFFF7h +
ja loc_1010E01  +
push esi  +
push edi  +
lea edi [eax+8] +
push edi  +
call sub_1001502  +
push edi  +
mov esi eax +
push 0  +
push esi  +
call memset  +
mov eax [ebp+arg_0] +
push 0  +
mov [esi] edi +
mov [esi+4] eax +
call sub_10014D2  +
add esp 14h +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
call sub_1001448  +
mov esi ecx +
mov eax [esi+14h] +
xor ebx ebx +
push ebx  +
push ebx  +
push ebx  +
push 6DDD0h  +
lea ecx [ebp-24h] +
push ecx  +
push eax  +
mov dword ptr [ebp-24h] 0F3C77300h +
mov dword ptr [ebp-20h] 0FFFFFFFEh +
call ds:SetWaitableTimer  +
mov eax [esi+18h] +
mov [ebp-30h] eax +
mov eax [esi+10h] +
mov [ebp-2Ch] eax +
mov eax [esi+14h] +
mov [ebp-28h] eax +
mov dword ptr [ebp-10h] 2 +
mov eax off_10220C4 +
mov edi offset off_10220C4 +
cmp eax edi +
jz loc_1001731  +
test byte ptr [eax+1Ch] 80h +
jnz loc_100C7C2  +
lea eax [ebp-30h] +
cmp [ebp+8] bl +
jnz loc_100C7D9  +
push 0FFFFFFFFh  +
push ebx  +
push eax  +
push 3  +
call ds:WaitForMultipleObjects  +
sub eax ebx +
jz loc_1002C8C  +
dec eax  +
jz loc_1002C3D  +
dec eax  +
jnz loc_100C7EF  +
mov eax off_10220C4 +
cmp eax edi +
jz loc_1001772  +
test byte ptr [eax+1Ch] 80h +
jnz loc_100C84D  +
mov [ebp-14h] ebx +
push ebx  +
lea ecx [ebp-14h] +
mov [ebp-4] ebx +
call sub_10017DA  +
mov eax [ebp-14h] +
mov ecx [eax] +
push eax  +
push ecx  +
mov ecx esi +
call sub_10015C5  +
cmp eax ebx +
jl loc_100C864  +
mov byte_10220C0 1 +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call sub_100149E  +
cmp dword ptr [ebp-10h] 4 +
jnz loc_1001719  +
lea edi [esi+88h] +
movzx eax word ptr [edi] +
cmp ax bx +
jnz loc_100C8CF  +
mov ecx esi +
call sub_10031BD  +
call sub_100165F  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100149E  +
push [ebp+arg_0]  +
push 0Ah  +
call sub_1001678  +
push eax  +
mov ecx esi +
call sub_1001482  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
test edx edx +
jz loc_100EF85  +
mov eax edx +
push edi  +
lea edi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1001823  +
mov ecx [ebp+arg_0] +
and dword ptr [ecx+4] 0 +
sub eax edi +
sar eax 1 +
and dword ptr [ecx+0Ch] 0 +
lea eax [eax+eax+2] +
mov [ecx] edx +
mov [ecx+8] eax +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [ebp+arg_4] +
cmp ecx [eax] +
jnz loc_100187D  +
cmp [ebp+arg_8] eax +
jnz loc_100187D  +
mov ecx esi +
call sub_100188C  +
mov eax [esi+4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
cmp ecx [ebp+arg_8] +
jz loc_1001873  +
jmp loc_100CA4F  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+4] +
mov eax [esi] +
push dword ptr [eax+4]  +
call sub_10018B9  +
mov eax [esi] +
mov [eax+4] eax +
mov eax [esi] +
and dword ptr [edi+8] 0 +
mov [eax] eax +
mov esi [esi] +
pop edi  +
mov [esi+8] esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
cmp byte ptr [edi+21h] 0 +
mov ebx ecx +
mov esi edi +
jz loc_1002646  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
mov eax [esp+8+arg_4] +
mov [esp+8+arg_4] ebp +
lea ebp [esp+8+arg_4] +
sub esp eax +
push ebx  +
push esi  +
push edi  +
mov eax dword_10220C8 +
xor [ebp-4] eax +
xor eax ebp +
push eax  +
mov [ebp-18h] esp +
push dword ptr [ebp-8]  +
mov eax [ebp-4] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov [ebp-8] eax +
lea eax [ebp-10h] +
mov large fs:0 eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
and dword ptr [eax+4] 0 +
and dword ptr [eax+0Ch] 0 +
mov [eax] ecx +
mov dword ptr [eax+8] 10h +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
and dword ptr [eax+4] 0 +
and dword ptr [eax+0Ch] 0 +
mov [eax] ecx +
mov dword ptr [eax+8] 4 +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
test ecx ecx +
jnz loc_10019F5  +
pop esi  +
retn   +
call sub_1001A04  +
and dword ptr [esi] 0 +
jmp loc_10019F3  +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea eax [esi+8] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_1001A27  +
test esi esi +
jz loc_1001A27  +
push 1  +
mov ecx esi +
call sub_1001A31  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1001A57  +
test [ebp+arg_0] 1 +
jz loc_1001A4B  +
push esi  +
call sub_10014DF  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_1001A69  +
push eax  +
call ds:SysFreeString  +
mov esi [esi+4] +
test esi esi +
jnz loc_100C19F  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
test ecx ecx +
jnz loc_1001A8B  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
call sub_1001AA5  +
jmp loc_1001A86  +
***
test esi esi +
jz loc_1001ABB  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
jmp loc_1001ABB  +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jz loc_1001A92  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+0Ch] +
mov ecx edi +
call sub_1001B0E  +
test eax eax +
jnz loc_100FF2C  +
mov eax [esi+18h] +
test eax eax +
jz loc_1001B05  +
mov eax [eax] +
pop edi  +
pop esi  +
retn   +
***
xor eax eax +
jmp loc_1001B02  +
***
mov eax [ecx] +
test eax eax +
jnz loc_100453B  +
xor eax eax +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
test ecx ecx +
jz loc_1001B30  +
call sub_1001B3A  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea eax [esi+8] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jz loc_1002154  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
mov [esi] ecx +
call sub_1001B7C  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001954  +
and dword ptr [ebp-4] 0 +
push ecx  +
call ds:EnterCriticalSection  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1001BBC  +
retn   +
***
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [eax] +
push eax  +
push ecx  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_1001C09  +
push dword ptr [esi+4]  +
call sub_10014DF  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
pop ecx  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [ebp+arg_4] +
cmp ecx [eax] +
jnz loc_1001C37  +
cmp [ebp+arg_8] eax +
jnz loc_1001C37  +
mov ecx esi +
call sub_1001C46  +
mov eax [esi+4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
cmp ecx [ebp+arg_8] +
jz loc_1001C2D  +
jmp loc_100CAC1  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+4] +
mov eax [esi] +
push dword ptr [eax+4]  +
call sub_1001C73  +
mov eax [esi] +
mov [eax+4] eax +
mov eax [esi] +
and dword ptr [edi+8] 0 +
mov [eax] eax +
mov esi [esi] +
pop edi  +
mov [esi+8] esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
cmp byte ptr [edi+15h] 0 +
mov ebx ecx +
mov esi edi +
jz loc_100CA74  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
push 20h  +
mov eax offset byte_101E169 +
call sub_1002917  +
and dword ptr [ebp-4] 0 +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_1001CBE  +
test byte ptr [eax+1Ch] 4 +
jnz loc_100F709  +
mov ecx [ebp+8] +
call sub_1001CD5  +
xor eax eax +
call sub_100165F  +
retn 4  +
***
call sub_100AADB  +
mov esi ecx +
mov [ebp-20h] esi +
mov eax off_10220C4 +
xor ebx ebx +
cmp eax offset off_10220C4 +
jz loc_1001CFE  +
test byte ptr [eax+1Ch] 4 +
jnz loc_100F200  +
mov eax [esi+3Ch] +
mov [ebp-30h] eax +
mov eax [esi+0DCh] +
mov [ebp-3Ch] eax +
mov eax [esi+0E0h] +
mov [ebp-18h] ebx +
mov [ebp-1Ch] ebx +
mov [ebp-4] ebx +
mov dword ptr [ebp-2Ch] 3 +
mov [ebp-40h] ebx +
mov [ebp-38h] eax +
mov [ebp-34h] ebx +
mov [ebp-24h] ebx +
cmp [esi+0E8h] ebx +
jz loc_1001D52  +
mov ecx esi +
call sub_100B4A7  +
cmp al bl +
jz loc_1001D52  +
mov eax [esi+0E4h] +
mov dword ptr [ebp-2Ch] 4 +
mov [ebp-34h] eax +
mov [esi+0D0h] ebx +
mov eax [esi+0D0h] +
cmp eax [esi+0D4h] +
jnb loc_1002169  +
cmp [ebp-18h] ebx +
jl loc_1002169  +
cmp dword ptr [ebp-18h] 41306h +
jz loc_1002169  +
mov edi [esi+eax*4+50h] +
mov eax [edi] +
lea ecx [esi+40h] +
push ecx  +
mov ecx edi +
call dword ptr [eax+4]  +
mov [ebp-18h] eax +
mov eax [esi+4] +
cmp eax ebx +
jz loc_100221C  +
mov eax [eax] +
mov [ebp-28h] eax +
mov eax [esi+0D0h] +
mov ecx [esi+eax*4+50h] +
mov eax [ecx] +
call dword ptr [eax+18h]  +
push ebx  +
push ebx  +
lea ecx [esi+2Ch] +
push ecx  +
mov ecx dword_1022110 +
push eax  +
push dword ptr [ebp-28h]  +
push offset dword_1001EA8  +
call sub_1001ECD  +
push dword ptr [esi+0DCh]  +
movzx ecx word ptr [esi+0ECh] +
mov eax [edi] +
push ecx  +
movzx ecx byte ptr [esi+0EEh] +
push ecx  +
lea ecx [ebp-24h] +
push ecx  +
mov ecx edi +
call dword ptr [eax+8]  +
cmp eax ebx +
mov [ebp-18h] eax +
jl loc_100F37D  +
mov eax [esi+0D0h] +
mov ecx [esi+eax*4+50h] +
mov eax [ecx] +
call dword ptr [eax+18h]  +
mov ecx [esi+3Ch] +
mov edx [ecx] +
mov edi eax +
push edi  +
lea eax [esi+2Ch] +
push eax  +
call dword ptr [edx]  +
mov eax [ebp-24h] +
push 0FFFFFFFFh  +
mov [ebp-40h] eax +
push ebx  +
lea eax [ebp-40h] +
push eax  +
push dword ptr [ebp-2Ch]  +
call ds:WaitForMultipleObjects  +
cmp eax ebx +
jnz loc_100F26D  +
mov eax [esi+0D0h] +
mov ecx [esi+eax*4+50h] +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
mov eax [esi+0D0h] +
mov eax [esi+eax*4+50h] +
mov ecx [eax+4] +
mov [esi+24h] ecx +
mov al [eax+14h] +
mov [esi+28h] al +
cmp al bl +
mov eax [esi+4] +
jz loc_100F226  +
cmp eax ebx +
jz loc_1002224  +
mov eax [eax] +
push ebx  +
push ebx  +
push ecx  +
push edi  +
lea ecx [esi+2Ch] +
push ecx  +
push eax  +
push offset dword_1001EB8  +
mov ecx dword_1022110 +
call sub_1002049  +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_1001E9B  +
test byte ptr [eax+1Ch] 4 +
jnz loc_100F243  +
inc dword ptr [esi+0D0h]  +
jmp loc_1001D58  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 50h +
mov eax dword_10220C8 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov [ebp+var_20] eax +
mov eax [ebp+arg_8] +
push ebx  +
mov ebx [ebp+arg_4] +
mov [ebp+lpCriticalSection] eax +
mov eax [ebp+arg_14] +
push esi  +
mov esi ecx +
mov ecx [esi+4] +
mov [ebp+var_18] eax +
mov eax [esi] +
mov edx eax +
or edx ecx +
push edi  +
mov edi [ebp+arg_C] +
jz loc_100F072  +
push [ebp+var_20]  +
push ecx  +
push eax  +
call ds:EtwEventEnabled  +
test al al +
jz loc_1001FB8  +
push ebx  +
lea eax [ebp+var_50] +
push eax  +
call sub_100180D  +
push [ebp+lpCriticalSection]  +
lea eax [ebp+var_40] +
push eax  +
call sub_100180D  +
push edi  +
lea eax [ebp+var_30] +
push eax  +
call sub_100199E  +
lea eax [esi+8] +
push eax  +
lea ecx [ebp+lpCriticalSection] +
call sub_1001B5E  +
push edi  +
mov edi ds:EtwEventActivityIdControl +
push 2  +
call edi  +
lea eax [ebp+var_50] +
xor ebx ebx +
push eax  +
push 3  +
cmp [ebp+var_18] ebx +
jnz loc_100F07A  +
push [ebp+var_20]  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
call ds:EtwEventWrite  +
mov [ebp+var_18] eax +
xor eax eax +
mov [ebp+var_10] ax +
mov [ebp+var_E] ax +
lea eax [ebp+var_14] +
push eax  +
push 2  +
mov [ebp+var_14] ebx +
mov [ebp+var_C] bl +
mov [ebp+var_B] bl +
mov [ebp+var_A] bl +
mov [ebp+var_9] bl +
mov [ebp+var_8] bl +
mov [ebp+var_7] bl +
mov [ebp+var_6] bl +
mov [ebp+var_5] bl +
call edi  +
push [ebp+lpCriticalSection]  +
call ds:LeaveCriticalSection  +
mov edi [ebp+var_18] +
cmp edi ebx +
jnz loc_100F091  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001FD0  +
leave   +
retn 18h  +
***
cmp ecx dword_10220C8 +
jnz loc_1014C52  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
push 10h  +
pop ecx  +
xor eax eax +
cmps   +
pop edi  +
pop esi  +
jnz loc_100C6BE  +
xor ecx ecx +
test eax eax +
setl cl  +
mov al cl +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
mov esi ecx +
call sub_100149E  +
mov eax [ebp+arg_0] +
add eax 18h +
cmp eax 18h +
jb loc_100C6E9  +
push eax  +
push 5  +
call sub_1001678  +
push eax  +
mov ecx esi +
call sub_1001482  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 60h +
mov eax dword_10220C8 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov [ebp+var_20] eax +
mov eax [ebp+arg_C] +
push ebx  +
mov ebx [ebp+arg_4] +
mov [ebp+lpCriticalSection] eax +
mov eax [ebp+arg_18] +
push esi  +
mov esi ecx +
mov ecx [esi+4] +
mov [ebp+var_18] eax +
mov eax [esi] +
mov edx eax +
or edx ecx +
push edi  +
mov edi [ebp+arg_8] +
jz loc_100F0B5  +
push [ebp+var_20]  +
push ecx  +
push eax  +
call ds:EtwEventEnabled  +
test al al +
jz loc_1002141  +
push ebx  +
lea eax [ebp+var_60] +
push eax  +
call sub_100180D  +
push edi  +
lea eax [ebp+var_50] +
push eax  +
call sub_100199E  +
push [ebp+lpCriticalSection]  +
lea eax [ebp+var_40] +
push eax  +
call sub_100180D  +
lea eax [ebp+arg_10] +
push eax  +
lea eax [ebp+var_30] +
push eax  +
call sub_10019C3  +
lea eax [esi+8] +
push eax  +
lea ecx [ebp+lpCriticalSection] +
call sub_1001B5E  +
push edi  +
mov edi ds:EtwEventActivityIdControl +
push 2  +
call edi  +
lea eax [ebp+var_60] +
xor ebx ebx +
push eax  +
push 4  +
cmp [ebp+var_18] ebx +
jnz loc_100F0BD  +
push [ebp+var_20]  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
call ds:EtwEventWrite  +
mov [ebp+var_18] eax +
xor eax eax +
mov [ebp+var_10] ax +
mov [ebp+var_E] ax +
lea eax [ebp+var_14] +
push eax  +
push 2  +
mov [ebp+var_14] ebx +
mov [ebp+var_C] bl +
mov [ebp+var_B] bl +
mov [ebp+var_A] bl +
mov [ebp+var_9] bl +
mov [ebp+var_8] bl +
mov [ebp+var_7] bl +
mov [ebp+var_6] bl +
mov [ebp+var_5] bl +
call edi  +
push [ebp+lpCriticalSection]  +
call ds:LeaveCriticalSection  +
mov edi [ebp+var_18] +
cmp edi ebx +
jnz loc_100F0D4  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001FD0  +
leave   +
retn 1Ch  +
***
test esi esi +
jz loc_1001B54  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
jmp loc_1001B54  +
***
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp [ebp-1Ch] ebx +
jl loc_100F59E  +
lea edi [esi+0E4h] +
mov eax [edi] +
cmp eax ebx +
jz loc_1002193  +
push eax  +
call ds:CancelWaitableTimer  +
push dword ptr [edi]  +
call ds:CloseHandle  +
mov [edi] ebx +
mov eax [esi+0D0h] +
cmp eax ebx +
jz loc_100222B  +
dec eax  +
mov ecx [esi+eax*4+50h] +
mov eax [ecx] +
call dword ptr [eax+18h]  +
cmp [ebp-18h] ebx +
mov [ebp-20h] eax +
mov eax [esi+4] +
jl loc_100F62D  +
cmp dword ptr [ebp-18h] 41306h +
jz loc_100F5AC  +
mov ecx [esi+4Ch] +
cmp eax ebx +
jz loc_1002232  +
mov eax [eax] +
push ebx  +
push ebx  +
lea edi [esi+2Ch] +
push edi  +
push ecx  +
mov ecx dword_1022110 +
push eax  +
push offset dword_1002238  +
call sub_1001ECD  +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_10021FE  +
test byte ptr [eax+1Ch] 4 +
jnz loc_100F603  +
mov ecx esi +
call sub_1001B3A  +
push dword ptr [esi+24h]  +
movzx edx byte ptr [esi+28h] +
mov ecx [ebp-30h] +
mov eax [ecx] +
push edx  +
push edi  +
call dword ptr [eax+4]  +
call sub_10075FB  +
retn   +
mov [ebp-28h] ebx +
jmp loc_1001DA2  +
xor eax eax +
jmp loc_1001E6C  +
xor eax eax +
jmp loc_10021A2  +
xor eax eax +
jmp loc_10021D0  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+24h] +
push edi  +
xor edi edi +
test eax eax +
jz loc_1002288  +
lea ecx [esi+4] +
push ecx  +
push eax  +
call ds:GetExitCodeProcess  +
test eax eax +
jz loc_100FEE6  +
mov dword ptr [esi+8] 4 +
push dword ptr [esi+24h]  +
call ds:CloseHandle  +
and dword ptr [esi+24h] 0 +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov dword ptr [esi+8] 5 +
jmp loc_1002283  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+arg_4]  +
mov edi ecx +
call sub_100230A  +
push [ebp+arg_4]  +
mov ecx edi +
mov esi eax +
call sub_10022C8  +
mov ecx [ebp+arg_0] +
pop edi  +
mov [ecx] eax +
mov [ecx+4] esi +
mov eax ecx +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+4] +
mov esi [eax+4] +
mov ebx eax +
cmp byte ptr [esi+21h] 0 +
jnz loc_10022FC  +
push [ebp+arg_0]  +
lea eax [esi+0Ch] +
push eax  +
mov ecx edi +
call sub_1001FE2  +
test al al +
jnz loc_100C704  +
mov ebx esi +
mov esi [esi] +
jmp loc_10022DA  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+4] +
mov esi [eax+4] +
mov ebx eax +
cmp byte ptr [esi+21h] 0 +
jnz loc_100233D  +
lea eax [esi+0Ch] +
push eax  +
push [ebp+arg_0]  +
mov ecx edi +
call sub_1001FE2  +
test al al +
jnz loc_100C70C  +
mov esi [esi+8] +
jmp loc_100231C  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1002371  +
test byte ptr [ebp+8] 1 +
jz loc_1002365  +
push esi  +
call sub_10014DF  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+10h] +
mov dword ptr [esi] offset off_10018E4 +
call sub_10019E8  +
lea ecx [esi+0Ch] +
pop esi  +
jmp sub_10019E8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10023EE  +
test byte ptr [ebp+8] 1 +
jz loc_10023E2  +
push esi  +
call sub_10014DF  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001448  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_10018E0 +
lea ecx [esi+38h] +
mov dword ptr [ebp-4] 1 +
call sub_1001B20  +
lea eax [esi+0Ch] +
push eax  +
call ds:DeleteCriticalSection  +
mov dword ptr [esi] offset off_10018DC +
call sub_100165F  +
retn   +
***
push 4  +
mov eax offset dword_101D6DC +
call sub_1001448  +
mov [ebp-10h] ecx +
mov eax off_10220C4 +
mov ebx [ebp+10h] +
cmp eax offset off_10220C4 +
jz loc_1002457  +
test byte ptr [eax+1Ch] 80h +
jnz loc_100CD42  +
xor eax eax +
mov [ebp+10h] eax +
push eax  +
lea ecx [ebp+10h] +
mov [ebp-4] eax +
call sub_1002010  +
mov eax [ebp+10h] +
mov esi [ebp+8] +
mov ecx [ebp+0Ch] +
lea edi [eax+8] +
movs   +
movs   +
movs   +
movs   +
mov [eax+18h] ecx +
mov ecx [eax] +
push eax  +
push ecx  +
mov ecx [ebp-10h] +
mov [eax+1Ch] ebx +
call sub_10015C5  +
mov ecx [ebp-10h] +
push 1  +
push dword ptr [ebp+8]  +
call sub_10024B0  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+10h] +
call sub_100149E  +
call sub_100165F  +
retn 0Ch  +
***
call sub_1001448  +
mov ebx ecx +
mov eax off_10220C4 +
mov esi [ebp+8] +
cmp eax offset off_10220C4 +
jz loc_10024D7  +
test byte ptr [eax+1Ch] 80h +
jnz loc_100CA9B  +
lea eax [ebx+5Ch] +
push eax  +
lea ecx [ebp+8] +
call sub_100140F  +
and dword ptr [ebp-4] 0 +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
lea ecx [ebx+78h] +
movs   +
call sub_1002533  +
cmp dword ptr [ebx+80h] 0 +
mov esi eax +
jnz loc_100251B  +
cmp dword ptr [ebx+74h] 4 +
jz loc_100CAB3  +
mov ecx ebx +
mov dword ptr [ebx+74h] 3 +
call sub_100192D  +
push dword ptr [ebp+8]  +
call ds:LeaveCriticalSection  +
mov eax esi +
call sub_100165F  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_10220C8 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
lea esi [ebp+arg_0] +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
lea eax [ebp+var_14] +
push eax  +
movs   +
call sub_1002579  +
mov ecx [ebp+var_4] +
dec eax  +
neg eax  +
sbb eax eax +
pop edi  +
xor ecx ebp +
and eax 80070490h +
pop esi  +
call sub_1001FD0  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
push [ebp+arg_0]  +
lea eax [ebp+var_8] +
push eax  +
mov esi ecx +
call sub_1002296  +
and [ebp+arg_0] 0 +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+var_4]  +
push [ebp+var_8]  +
call sub_10025C3  +
add esp 0Ch +
push [ebp+var_4]  +
lea eax [ebp+var_4] +
push [ebp+var_8]  +
mov ecx esi +
push eax  +
call sub_100184F  +
mov eax [ebp+arg_0] +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10025E4  +
add esp 10h +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax [ebp+arg_4] +
jz loc_1002608  +
push esi  +
mov esi [ebp+arg_8] +
inc dword ptr [esi]  +
lea ecx [ebp+arg_0] +
call sub_100260F  +
mov eax [ebp+arg_0] +
cmp eax [ebp+arg_4] +
jnz loc_10025F5  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
xor edx edx +
cmp [eax+21h] dl +
jnz loc_100C6C8  +
mov ecx [eax+8] +
cmp [ecx+21h] dl +
jz loc_100C6D7  +
mov eax [eax+4] +
cmp [eax+21h] dl +
jz loc_1002639  +
mov [esi] eax +
pop esi  +
retn   +
mov ecx [esi] +
cmp ecx [eax+8] +
jz loc_100C6E2  +
jmp loc_1002635  +
***
push dword ptr [esi+8]  +
mov ecx ebx +
call sub_10018B9  +
mov esi [esi] +
push edi  +
call sub_1002672  +
push edi  +
call sub_10014DF  +
cmp byte ptr [esi+21h] 0 +
pop ecx  +
mov edi esi +
jnz loc_10018D2  +
jmp loc_1002646  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push 0  +
call sub_100268A  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
lea ecx [esi+1Ch] +
call sub_1001A7B  +
test [ebp+arg_0] 1 +
jnz loc_100C792  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10026D6  +
test byte ptr [ebp+8] 1 +
jz loc_10026CA  +
push esi  +
call sub_10014DF  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001448  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1001914 +
and dword ptr [ebp-4] 0 +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_1002707  +
test byte ptr [eax+1Ch] 4 +
jnz loc_100F9F2  +
xor ebx ebx +
cmp [esi+0D4h] ebx +
jbe loc_100272F  +
lea edi [esi+50h] +
mov ecx [edi] +
test ecx ecx +
jz loc_1002720  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
and dword ptr [edi] 0 +
inc ebx  +
add edi 4 +
cmp ebx [esi+0D4h] +
jb loc_1002714  +
mov eax [esi+0DCh] +
mov ebx ds:CloseHandle +
test eax eax +
jz loc_1002742  +
push eax  +
call ebx  +
mov eax [esi+0E0h] +
test eax eax +
jz loc_100274F  +
push eax  +
call ebx  +
lea edi [esi+0E4h] +
mov eax [edi] +
test eax eax +
jnz loc_100FA18  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_1002775  +
call sub_100165F  +
retn   +
***
call sub_1001448  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1001900 +
push dword ptr [esi+4Ch]  +
mov dword ptr [ebp-4] 1 +
call sub_10014D2  +
pop ecx  +
lea ecx [esi+40h] +
call sub_1001BD5  +
lea eax [esi+0Ch] +
push eax  +
call ds:DeleteCriticalSection  +
lea ecx [esi+4] +
call sub_10019E8  +
call sub_100165F  +
retn   +
***
call sub_1001448  +
push dword ptr [ebp+14h]  +
lea ecx [ebp-0A0h] +
push dword ptr [ebp+0Ch]  +
call sub_10079D2  +
push dword ptr [ebp+8]  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-0A0h] +
call sub_100A1F8  +
test eax eax +
jl loc_1002883  +
cmp byte ptr [ebp+14h] 0 +
mov byte ptr [ebp+0Ch] 0 +
jnz loc_100C35F  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-0A0h] +
call sub_10016CC  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-0A0h] +
call sub_10032E9  +
call sub_100165F  +
retn 10h  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 18h +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+18h] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jz loc_1002D1A  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
test byte ptr [ebp-40h] 1 +
jnz loc_100D8CC  +
push 0Ah  +
pop ecx  +
push ecx  +
push eax  +
push ebx  +
push offset __ImageBase  +
call sub_1009CBA  +
mov dword_10220EC eax +
cmp dword_10220E0 ebx +
jnz loc_100D915  +
push eax  +
call ds:exit  +
***
mov eax eax +
push eax  +
push large dword ptr fs:0  +
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_10220C8 +
xor eax ebp +
push eax  +
mov [ebp-10h] esp +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
cmp eax 0FFFFFFFFh +
jz loc_1002970  +
push eax  +
call ds:CloseHandle  +
and dword ptr [esi] 0 +
jmp loc_1002970  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jnz loc_100294F  +
pop esi  +
retn   +
***
push 20h  +
mov eax offset byte_101D8B5 +
call sub_1002917  +
mov eax [ebp+10h] +
test eax eax +
jz loc_100D3F3  +
and dword ptr [ebp-4] 0 +
and dword ptr [eax] 0 +
mov edi [ebp+0Ch] +
push 4  +
pop ecx  +
mov esi offset dword_10027F0 +
xor edx edx +
cmps   +
jz loc_10029DA  +
mov edi [ebp+0Ch] +
push 4  +
pop ecx  +
mov esi offset riid +
xor edx edx +
cmps   +
jz loc_10029DA  +
mov eax 80004002h +
call sub_100165F  +
retn 0Ch  +
***
mov ecx [ebp+8] +
mov [eax] ecx +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+4]  +
xor eax eax +
jmp loc_10029D2  +
***
push 0Bh  +
push offset aInteractive  +
push eax  +
call ds:wcsncmp  +
add esp 0Ch +
neg eax  +
sbb al al +
inc al  +
mov [ebp-1Ch] al +
mov eax [ebp+10h] +
lea edx [eax+2] +
mov cx [eax] +
add eax ebx +
cmp cx di +
jnz loc_1002A09  +
sub eax edx +
sar eax 1 +
cmp eax 26h +
jnz loc_1009D94  +
mov ecx dword_1022110 +
push edi  +
push edi  +
push dword ptr [ebp-14h]  +
push offset dword_1002AD8  +
call sub_1002B15  +
push dword ptr [ebp-1Ch]  +
mov [ebp-4] ebx +
push dword ptr [ebp+8]  +
push dword ptr [ebp-14h]  +
push dword ptr [ebp+10h]  +
call sub_1002831  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx dword_1022110 +
push edi  +
push edi  +
push dword ptr [ebp-14h]  +
push offset dword_1002AC8  +
call sub_1002B15  +
mov dword ptr [ebp-4] 4 +
call sub_1002EF9  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx dword_1022110 +
push edi  +
push edi  +
push dword ptr [ebp-14h]  +
push offset dword_1002AE8  +
call sub_1002B15  +
mov ecx dword_1022110 +
cmp ecx edi +
jz loc_1002A98  +
push 1  +
call sub_1003167  +
mov dword_1022110 edi +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_1002AB4  +
test byte ptr [eax+1Ch] 80h +
jnz loc_100C633  +
call sub_1002EB5  +
mov eax [ebp-18h] +
call sub_100165F  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi ecx +
mov eax [esi] +
mov ecx [esi+4] +
mov edx eax +
or edx ecx +
jz loc_100EFA2  +
push edi  +
push [ebp+arg_0]  +
push ecx  +
push eax  +
call ds:EtwEventEnabled  +
test al al +
jz loc_1002B73  +
push [ebp+arg_4]  +
lea eax [ebp+var_10] +
push eax  +
call sub_100180D  +
cmp [ebp+arg_C] 0 +
lea eax [ebp+var_10] +
push eax  +
push 1  +
jnz loc_100EFAA  +
push [ebp+arg_0]  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
call ds:EtwEventWrite  +
mov edi eax +
test edi edi +
jnz loc_100EFC2  +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+Value]  +
mov edi ecx +
push edi  +
call ds:InterlockedExchange  +
mov esi eax +
push esi  +
call sub_1002BB3  +
test eax eax +
jz loc_1002BA6  +
push esi  +
call ds:CloseHandle  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_0] 0FFFFFFFFh +
jz loc_1002BC6  +
cmp [ebp+arg_0] eax +
jz loc_1002BC6  +
inc eax  +
pop ebp  +
retn 4  +
***
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push offset dword_102214C  +
call ds:__imp_InterlockedCompareExchange  +
push eax  +
call ds:SetEvent  +
jmp locret_1001442  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100149E  +
push [ebp+arg_0]  +
push 7  +
call sub_1001678  +
push eax  +
mov ecx esi +
call sub_1001482  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ds:__imp_InterlockedCompareExchange +
push 1  +
push 0  +
push offset Destination  +
call esi  +
test eax eax +
jz loc_1002C30  +
call sub_100142F  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push offset dword_102214C  +
call esi  +
pop esi  +
retn   +
***
lea eax [esi+5Ch] +
push eax  +
lea ecx [ebp-18h] +
call sub_100140F  +
mov eax off_10220C4 +
cmp eax edi +
jz loc_1002C5C  +
test byte ptr [eax+1Ch] 80h +
jnz loc_100C893  +
cmp dword ptr [esi+74h] 3 +
jnz loc_1002C73  +
cmp [esi+80h] ebx +
jnz loc_1002C81  +
push dword ptr [esi+18h]  +
call ds:SetEvent  +
push dword ptr [ebp-18h]  +
call ds:LeaveCriticalSection  +
jmp loc_10017AA  +
push 2  +
pop eax  +
mov [esi+74h] eax +
mov [ebp-10h] eax +
jmp loc_1002C73  +
mov eax off_10220C4 +
cmp eax edi +
jz loc_1002C9F  +
test byte ptr [eax+1Ch] 40h +
jnz loc_100C8AA  +
lea edi [esi+84h] +
mov eax [edi] +
cmp eax ebx +
jnz loc_100C8C1  +
lea eax [esi+5Ch] +
push eax  +
lea ecx [ebp-1Ch] +
call sub_100140F  +
push 4  +
pop eax  +
push dword ptr [ebp-1Ch]  +
mov [esi+74h] eax +
mov [ebp-10h] eax +
call ds:LeaveCriticalSection  +
push 1  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp-68h] +
push eax  +
call ds:PeekMessageW  +
test eax eax +
jz loc_10017AA  +
jmp loc_1002CCD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [eax] +
push eax  +
push ecx  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_100184F  +
push dword ptr [esi+4]  +
call sub_10014DF  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
pop ecx  +
pop esi  +
leave   +
retn   +
***
mov esi [esi+14h] +
test esi esi +
jz loc_10028D8  +
push esi  +
call ds:SetEvent  +
jmp loc_10028D8  +
***
xor eax eax +
cmp [ecx+8] al +
jz locret_1002D48  +
push eax  +
push ecx  +
mov [ecx+8] al +
call ds:CoDisconnectObject  +
retn   +
***
retn   +
***
jz locret_1002D76  +
push hHeap  +
call ds:HeapDestroy  +
retn   +
***
push dword_10221A4  +
call sub_10014D2  +
pop ecx  +
retn   +
***
call ds:DeleteCriticalSection  +
retn   +
***
or eax offset dword_102CC9C +
test ecx ecx +
jnz loc_101101C  +
retn   +
***
or eax offset dword_10220F0 +
test ecx ecx +
jnz loc_101102D  +
and dword_10220F0 0 +
retn   +
***
test ecx ecx +
jnz loc_1011037  +
and dword_10220F4 0 +
retn   +
***
test ecx ecx +
jnz loc_1011041  +
and dword_10220F8 0 +
retn   +
***
mov ecx dword_10220FC +
test ecx ecx +
jnz loc_101104B  +
and dword_10220FC 0 +
retn   +
***
or eax offset dword_1022100 +
test ecx ecx +
jnz loc_1011055  +
and dword_1022100 0 +
retn   +
***
test ecx ecx +
jnz loc_101105F  +
and dword_1022104 0 +
retn   +
***
test ecx ecx +
jnz loc_1011069  +
and dword_1022108 0 +
retn   +
***
mov ecx dword_102210C +
test ecx ecx +
jnz loc_1011073  +
and dword_102210C 0 +
retn   +
***
add byte ptr dword_102214C[ecx] bh +
call sub_1002B80  +
retn   +
***
retn   +
***
mov edi edi +
push esi  +
mov esi off_10220C4 +
push edi  +
mov edi offset off_10220C4 +
cmp esi edi +
jz loc_1002EF1  +
test esi esi +
jz loc_1002EEB  +
mov eax [esi+8] +
mov ecx [esi+0Ch] +
mov edx eax +
or edx ecx +
jz loc_1002EE7  +
push ecx  +
push eax  +
call EtwUnregisterTraceGuids  +
and dword ptr [esi+8] 0 +
and dword ptr [esi+0Ch] 0 +
mov esi [esi] +
jmp loc_1002EC8  +
mov off_10220C4 edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_1002F11  +
test byte ptr [eax+1Ch] 80h +
jnz loc_100C348  +
call sub_1002D59  +
call sub_1002F26  +
jmp ds:CoUninitialize  +
***
mov ecx dword_1022114 +
test ecx ecx +
jz locret_1002F3E  +
push 1  +
call sub_1002F44  +
and dword_1022114 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1002F6A  +
test [ebp+arg_0] 1 +
jz loc_1002F5E  +
push esi  +
call sub_10014DF  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001448  +
mov esi ecx +
mov [ebp-10h] esi +
mov eax [esi+0Ch] +
mov dword ptr [ebp-4] 3 +
test eax eax +
jz loc_1002FA8  +
push eax  +
call ds:UnregisterWait  +
mov ecx off_10220C4 +
cmp ecx offset off_10220C4 +
jz loc_1002FA8  +
test byte ptr [ecx+1Ch] 8 +
jnz loc_1010D4C  +
mov eax [esi+8] +
test eax eax +
jz loc_1002FB6  +
push eax  +
call ds:CloseHandle  +
mov eax [esi+4] +
test eax eax +
jz loc_1002FF2  +
push eax  +
call RegCloseKey  +
jmp loc_1002FF2  +
push dword ptr [esi+20h]  +
call sub_10014D2  +
pop ecx  +
lea ecx [esi+14h] +
mov byte ptr [ebp-4] 1 +
call sub_1003001  +
push dword ptr [esi+10h]  +
call ds:SysFreeString  +
push dword ptr [esi]  +
call sub_10014D2  +
pop ecx  +
call sub_100165F  +
retn   +
lea ecx [esi+30h] +
call sub_101B469  +
jmp loc_1002FC6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [eax] +
push eax  +
push ecx  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_1003035  +
push dword ptr [esi+4]  +
call sub_10014DF  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
pop ecx  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [ebp+arg_4] +
cmp ecx [eax] +
jnz loc_1003063  +
cmp [ebp+arg_8] eax +
jnz loc_1003063  +
mov ecx esi +
call sub_1003072  +
mov eax [esi+4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
cmp ecx [ebp+arg_8] +
jz loc_1003059  +
jmp loc_1010D27  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+4] +
mov eax [esi] +
push dword ptr [eax+4]  +
call sub_100309F  +
mov eax [esi] +
mov [eax+4] eax +
mov eax [esi] +
and dword ptr [edi+8] 0 +
mov [eax] eax +
mov esi [esi] +
pop edi  +
mov [esi+8] esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
cmp byte ptr [edi+4Dh] 0 +
mov ebx ecx +
mov esi edi +
jz loc_1010D00  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov ecx offset unk_10221C8 +
jmp loc_10030D0  +
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
test eax eax +
jnz loc_100EF6D  +
***
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
and dword ptr [esi+0Ch] 0 +
pop esi  +
retn   +
***
jmp loc_10030FF  +
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
cmp eax 0FFFFFFFFh +
jnz loc_1010F21  +
pop esi  +
retn   +
***
jmp sub_1003122  +
***
cmp byte ptr [ecx+8] 0 +
mov dword ptr [ecx] offset off_1002800 +
jnz loc_1010FCE  +
retn   +
***
mov ecx offset unk_10221D8 +
jmp loc_1003144  +
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+24h] +
call sub_1002965  +
lea ecx [esi+20h] +
call sub_1002965  +
lea ecx [esi+18h] +
pop esi  +
jmp sub_1002965  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100318D  +
test [ebp+arg_0] 1 +
jz loc_1003181  +
push esi  +
call sub_10014DF  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
mov ecx [esi+4] +
mov edx eax +
or edx ecx +
jz loc_10031AC  +
push ecx  +
push eax  +
call ds:EtwEventUnregister  +
and dword ptr [esi] 0 +
and dword ptr [esi+4] 0 +
add esi 8 +
push esi  +
call ds:DeleteCriticalSection  +
pop esi  +
retn   +
***
call sub_1001448  +
mov esi ecx +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_10031E1  +
test byte ptr [eax+1Ch] 80h +
jnz loc_100C79E  +
lea ecx [esi+24h] +
call sub_1002D36  +
lea eax [esi+40h] +
mov [ebp-18h] eax +
mov eax [eax] +
xor ecx ecx +
cmp eax ecx +
jz loc_1003220  +
mov [ebp-10h] ecx +
mov [ebp-4] ecx +
push ecx  +
lea ecx [ebp-10h] +
call sub_1002BEA  +
mov eax [ebp-10h] +
mov ecx [eax] +
push eax  +
push ecx  +
mov ecx esi +
call sub_10015C5  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_100149E  +
call sub_1002C13  +
mov edi ds:WaitForSingleObject +
push 0FFFFFFFFh  +
push eax  +
call edi  +
lea eax [esi+5Ch] +
push eax  +
lea ecx [ebp-10h] +
call sub_100140F  +
lea ecx [esi+78h] +
mov dword ptr [ebp-4] 1 +
call sub_1003293  +
push dword ptr [ebp-10h]  +
mov ebx ds:LeaveCriticalSection +
mov [ebp-14h] eax +
call ebx  +
cmp dword ptr [ebp-14h] 0 +
jz loc_100C7B5  +
add esi 44h +
push esi  +
lea ecx [ebp-14h] +
call sub_100140F  +
mov ecx [ebp-18h] +
cmp dword ptr [ecx] 0 +
mov dword ptr [ebp-4] 2 +
jz loc_1003283  +
call sub_10015AA  +
push dword ptr [ebp-14h]  +
call ebx  +
call sub_100165F  +
retn   +
***
call sub_1001448  +
mov edi ecx +
mov eax off_10220C4 +
mov esi offset off_10220C4 +
mov ebx offset dword_10032D4 +
cmp eax esi +
jz loc_10032BE  +
test byte ptr [eax+1Ch] 80h +
jnz sub_100D785  +
mov ecx [edi+8] +
test ecx ecx +
jnz loc_100D79D  +
xor eax eax +
inc eax  +
call sub_100165F  +
retn   +
***
call sub_1001448  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1001800 +
mov dword ptr [esi+4] offset off_10027BC +
and dword_10220DC 0 +
lea edi [esi+24h] +
mov eax [edi] +
push edi  +
mov dword ptr [ebp-4] 9 +
call dword ptr [eax+8]  +
mov ebx ds:GetCurrentThread +
push 0FFFFFFFFh  +
call ebx  +
push eax  +
call ds:SetThreadPriority  +
mov eax [esi+20h] +
push 0FFFFFFFFh  +
push eax  +
call ds:WaitForSingleObject  +
push 2Ah  +
call ds:Sleep  +
push 0  +
call ebx  +
push eax  +
call ds:SetThreadPriority  +
lea ecx [esi+78h] +
call sub_100188C  +
mov ebx ds:DeleteCriticalSection +
lea eax [esi+5Ch] +
push eax  +
call ebx  +
lea eax [esi+44h] +
push eax  +
call ebx  +
lea ecx [esi+78h] +
mov byte ptr [ebp-4] 8 +
call sub_1002CEB  +
lea ecx [esi+40h] +
mov byte ptr [ebp-4] 7 +
call sub_10015AA  +
mov ecx edi +
mov byte ptr [ebp-4] 6 +
call sub_10033D0  +
lea ecx [esi+20h] +
call sub_1002965  +
lea ecx [esi+1Ch] +
call sub_1002965  +
lea ecx [esi+18h] +
call sub_1002965  +
lea ecx [esi+14h] +
call sub_1002965  +
lea ecx [esi+10h] +
call sub_1002965  +
push dword ptr [esi+0Ch]  +
call sub_10014D2  +
push dword ptr [esi+8]  +
call sub_10014D2  +
pop ecx  +
pop ecx  +
call sub_100165F  +
retn   +
***
mov dword ptr [ecx] offset off_1002974 +
add ecx 10h +
jmp sub_1002965  +
***
call ds:VariantClear  +
push eax  +
call sub_10033FA  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jl loc_100FEB5  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
dec [ebp+arg_8]  +
js loc_10041E5  +
push esi  +
mov esi [ebp+arg_0] +
mov ecx esi +
call [ebp+arg_C]  +
add esi [ebp+arg_4] +
dec [ebp+arg_8]  +
jns loc_10041D7  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor ecx ecx +
xor edx edx +
mov [eax+10h] ecx +
mov [eax] ecx +
mov byte ptr [eax+18h] 1 +
mov [eax+19h] cl +
mov [eax+1Ah] dx +
mov [eax+1Ch] ecx +
pop ebp  +
retn 4  +
***
call sub_1001448  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
lea ecx [esi+18h] +
call sub_1001A7B  +
lea ecx [esi+10h] +
call sub_10019E8  +
call sub_100165F  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx+4] eax +
mov eax [ebp+arg_4] +
mov [ecx+14h] eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax ecx +
xor ecx ecx +
mov dword ptr [eax] offset off_1002974 +
mov [eax+8] cl +
mov [eax+0Ch] edx +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
mov dword ptr [eax+18h] 1 +
pop ebp  +
retn 4  +
***
push 24h  +
mov eax offset byte_101D971 +
call sub_1002917  +
mov esi [ebp+8] +
xor eax eax +
mov [ebp-14h] eax +
mov [ebp-4] eax +
cmp [esi+8] al +
jnz loc_10042CE  +
push dword ptr [ebp+0Ch]  +
mov ecx [esi+0Ch] +
mov byte ptr [esi+8] 1 +
call sub_1001582  +
push dword ptr [esi+14h]  +
call ds:ResetEvent  +
push dword ptr [esi+10h]  +
call ds:SetEvent  +
***
mov eax [ebp-14h] +
call sub_100165F  +
retn 8  +
***
push offset dword_10220E8  +
push dword_102CC84  +
mov dword_10220E8 eax +
push offset unk_102219C  +
push offset unk_10221A0  +
push offset unk_1022198  +
call ds:__wgetmainargs  +
add esp 14h +
mov dword_10220E4 eax +
retn   +
***
mov eax eax +
push eax  +
push large dword ptr fs:0  +
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_10220C8 +
xor eax ebp +
push eax  +
mov [ebp-10h] eax +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_10220C8 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jnz loc_100DA05  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_10043FC  +
test dword_10220C8 ebx +
jz loc_10043FC  +
mov dword_10220C8 esi +
not esi  +
mov dword_10220CC esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
mov esi 0BB40E64Fh +
jmp loc_10043E9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov al [ebp+arg_4] +
and [ebp+FileTime.dwLowDateTime] 0 +
push esi  +
mov esi ecx +
mov [esi] al +
push edi  +
xor eax eax +
lea edi [ebp+FileTime.dwHighDateTime] +
stos   +
mov eax [ebp+lpSystemTime] +
xor ecx ecx +
cmp cx [eax] +
jz loc_1004437  +
lea ecx [ebp+FileTime] +
push ecx  +
push eax  +
call ds:SystemTimeToFileTime  +
mov eax [ebp+FileTime.dwLowDateTime] +
mov [esi+8] eax +
mov eax [ebp+FileTime.dwHighDateTime] +
mov [esi+0Ch] eax +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
mov edi [ebp+arg_0] +
cmp eax edi +
jz loc_100446B  +
push eax  +
call ds:SysFreeString  +
mov [esi] edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov [esi] eax +
test eax eax +
jz loc_100448D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
mov ecx 80070057h +
test edx edx +
jz loc_10044D9  +
cmp edx 7FFFFFFFh +
ja loc_10044D9  +
test eax eax +
jl loc_10044D5  +
cmp [ebp+arg_C] 7FFFFFFEh +
ja loc_100DB4C  +
push [ebp+arg_C]  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 0  +
call sub_100891E  +
pop ebp  +
retn 10h  +
mov eax ecx +
jmp loc_10044B4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_1004515  +
cmp dword ptr [esi+4] 0 +
jz loc_1004515  +
test eax eax +
jbe loc_1004515  +
push ebx  +
push edi  +
mov edi [esi] +
mov ebx [esi+4] +
movzx eax word ptr [ebx+edi*2-2] +
push eax  +
mov ecx esi +
call sub_100B03C  +
test al al +
jnz loc_100DC59  +
pop edi  +
pop ebx  +
xor eax eax +
pop esi  +
retn   +
***
test eax eax +
jl loc_100E85B  +
cmp byte ptr [esi+15h] 0 +
jnz loc_100E885  +
xor eax eax +
jmp loc_1006812  +
test eax eax +
jge loc_100452B  +
jmp loc_1006812  +
***
mov eax [eax] +
test eax eax +
jz loc_1001B18  +
push eax  +
call ds:SysStringLen  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
lea ecx [esi+0Ch] +
mov dword ptr [esi] offset off_10018E4 +
call sub_1008E84  +
push [ebp+arg_4]  +
lea ecx [esi+10h] +
call sub_1008E84  +
mov byte ptr [esi+14h] 1 +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov ecx [ebp+10h] +
mov eax [edi+4] +
mov cx [ecx+10h] +
mov [eax+0ECh] cx +
jmp loc_1006296  +
***
mov ecx [ebp+10h] +
mov eax [edi+4] +
mov cl [ecx+10h] +
mov [eax+0D8h] cl +
jmp loc_1006296  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
ja loc_100EE18  +
mov eax [ebp+arg_0] +
jb loc_10045D5  +
cmp eax 0FFFFFFFFh +
ja loc_100EE18  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_4] +
add eax ecx +
cmp eax ecx +
jb loc_100EE28  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
lea esi [ecx+10h] +
mov ecx esi +
call sub_1001B0E  +
test eax eax +
jz loc_100EE95  +
mov eax [esi] +
test eax eax +
jz loc_100462C  +
mov eax [eax] +
add eax 0Eh +
pop esi  +
retn   +
xor eax eax +
jmp loc_1004627  +
***
call sub_1001448  +
mov esi ecx +
call sub_10019E8  +
push 0Ch  +
call sub_100150F  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_1004666  +
push dword ptr [ebp+8]  +
call sub_10099CA  +
mov [esi] eax +
mov eax esi +
call sub_100165F  +
retn 4  +
***
call sub_100165F  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
mov esi ecx +
jz loc_100EF4F  +
push [ebp+arg_0]  +
push 0  +
call ds:SysAllocStringLen  +
mov [esi] eax +
test eax eax +
jz loc_100EF57  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
mov esi ecx +
mov eax [esi] +
mov ecx [esi+4] +
mov edx eax +
or edx ecx +
jz loc_100EFEA  +
push edi  +
push [ebp+arg_0]  +
push ecx  +
push eax  +
call ds:EtwEventEnabled  +
test al al +
jz loc_100471C  +
push [ebp+arg_4]  +
lea eax [ebp+var_20] +
push eax  +
call sub_100180D  +
push [ebp+arg_8]  +
lea eax [ebp+var_10] +
push eax  +
call sub_100180D  +
cmp [ebp+arg_10] 0 +
lea eax [ebp+var_20] +
push eax  +
push 2  +
jnz loc_100EFF2  +
push [ebp+arg_0]  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
call ds:EtwEventWrite  +
mov edi eax +
test edi edi +
jnz loc_100F00A  +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
push esi  +
mov esi ecx +
mov eax [esi] +
mov ecx [esi+4] +
mov edx eax +
or edx ecx +
jz loc_100F02E  +
push edi  +
push [ebp+arg_0]  +
push ecx  +
push eax  +
call ds:EtwEventEnabled  +
test al al +
jz loc_10047AD  +
push [ebp+arg_4]  +
lea eax [ebp+var_40] +
push eax  +
call sub_100180D  +
push [ebp+arg_8]  +
lea eax [ebp+var_30] +
push eax  +
call sub_100180D  +
lea eax [ebp+arg_C] +
push eax  +
lea eax [ebp+var_20] +
push eax  +
call sub_10019C3  +
lea eax [ebp+arg_10] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
call sub_10019C3  +
cmp [ebp+arg_18] 0 +
lea eax [ebp+var_40] +
push eax  +
push 4  +
jnz loc_100F036  +
push [ebp+arg_0]  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
call ds:EtwEventWrite  +
mov edi eax +
test edi edi +
jnz loc_100F04E  +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn 1Ch  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
push esi  +
push 0  +
push 0  +
push offset dword_10047EC  +
call ds:EtwEventRegister  +
mov edi eax +
mov eax [esi] +
or eax [esi+4] +
jz loc_100F0F8  +
test edi edi +
jnz loc_100F0F8  +
xor eax eax +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax dword_10220C8 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
push edi  +
lea esi [ebp+8] +
lea edi [ebp-14h] +
movs   +
movs   +
movs   +
mov ebx ecx +
movs   +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_1004838  +
test byte ptr [eax+1Ch] 4 +
jnz loc_100F8E9  +
cmp dword ptr [ebx+0D4h] 0 +
jz loc_10048BF  +
cmp dword ptr [ebx+50h] 0 +
jz loc_10048BF  +
lea eax [ebx+8] +
push eax  +
call ds:InterlockedIncrement  +
lea edi [ebx+2Ch] +
mov [ebp-1Ch] edi +
lea esi [ebp-14h] +
movs   +
movs   +
movs   +
movs   +
xor esi esi +
push esi  +
push esi  +
push ebx  +
push offset loc_1001C98  +
push esi  +
push esi  +
call ds:CreateThread  +
mov edi eax +
cmp edi esi +
jz loc_100F913  +
mov [ebp-18h] esi +
push edi  +
call ds:CloseHandle  +
mov eax [ebx+4Ch] +
mov ebx [ebx+4] +
cmp ebx esi +
jz loc_10048BB  +
mov ebx [ebx] +
mov ecx dword_1022110 +
push esi  +
push esi  +
push dword ptr [ebp-1Ch]  +
push eax  +
push ebx  +
push offset dword_10048C8  +
call sub_1001ECD  +
mov eax [ebp-18h] +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001FD0  +
leave   +
retn 10h  +
***
xor ebx ebx +
jmp loc_1004890  +
***
mov eax 8000FFFFh +
jmp loc_10048AA  +
***
cmp byte ptr [ecx+8] 0 +
jnz loc_10048F0  +
mov eax [ecx] +
call dword ptr [eax+4]  +
test eax eax +
jz loc_100FAD3  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+pSourceSid]  +
mov esi ecx +
call ds:IsValidSid  +
test eax eax +
jz loc_100FC66  +
push [ebp+pSourceSid]  +
call ds:GetLengthSid  +
cmp eax 44h +
ja loc_100FC66  +
push [ebp+pSourceSid]  +
lea ecx [esi+4] +
push ecx  +
push eax  +
mov byte ptr [esi+48h] 1 +
call ds:CopySid  +
test eax eax +
jz loc_100FC70  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push 220h  +
push 20h  +
push 2  +
push offset dword_100B9FC  +
push [ebp+arg_0]  +
call sub_1008533  +
mov eax [ebp+arg_0] +
add esp 14h +
leave   +
retn 4  +
***
call ds:GetLengthSid  +
add eax 8 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_0] +
mov al [edi+68h] +
shr al 4 +
and al 1 +
jnz loc_100FE06  +
test al al +
jnz loc_10049BC  +
test byte ptr [esi+68h] 10h +
jnz loc_1004A01  +
mov al [edi+70h] +
test al al +
jz loc_1004A06  +
cmp byte ptr [esi+70h] 0 +
jz loc_10049FA  +
test al al +
jz loc_1004A06  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+10h]  +
test al al +
jnz loc_100FE15  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+10h]  +
test al al +
jnz loc_10049F2  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+10h]  +
test al al +
jnz loc_1004A01  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
mov eax 0FFFFFFFFh +
jmp loc_10049F4  +
xor eax eax +
inc eax  +
jmp loc_10049F4  +
cmp byte ptr [esi+70h] 0 +
jz loc_10049CD  +
jmp loc_1004A01  +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
add ecx 10h +
call sub_1008A40  +
mov eax [eax] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ecx +
mov eax [edi] +
cmp eax [esi] +
jz loc_100FE37  +
call sub_1006446  +
mov eax [esi] +
and dword ptr [esi] 0 +
mov [edi] eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
push offset Src  +
call ds:ExpandEnvironmentStringsW  +
test eax eax +
jz loc_100FEBB  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 2  +
push offset off_102C7E0  +
push [ebp+arg_0]  +
call sub_1006181  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset aLnk  +
push [ebp+arg_0]  +
call ds:_wcsicmp  +
neg eax  +
pop ecx  +
sbb eax eax +
pop ecx  +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 1  +
push offset off_102C7F4  +
push [ebp+arg_0]  +
call sub_1006181  +
xor ecx ecx +
test al al +
setz cl  +
mov al cl +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 210h +
mov eax dword_10220C8 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax ecx +
push esi  +
lea esi [eax+18h] +
mov ecx esi +
call sub_1001B0E  +
cmp eax 104h +
ja loc_1004B73  +
mov eax [esi] +
test eax eax +
jz loc_1004B80  +
mov eax [eax] +
push 22h  +
push eax  +
call ds:wcschr  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100FFFE  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1001FD0  +
leave   +
retn   +
xor eax eax +
jmp loc_1004B60  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp eax [ebp+arg_0] +
sbb eax eax +
and eax [ebp+arg_0] +
cmp eax 0Ah +
jnb loc_1010674  +
mov eax dword_102C7F8[eax*4] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp eax [ebp+arg_0] +
sbb eax eax +
and eax [ebp+arg_0] +
cmp eax 0Ah +
jnb loc_101067C  +
mov eax dword_102C850[eax*4] +
pop ebp  +
retn 4  +
***
mov eax ecx +
xor ecx ecx +
mov [eax] ecx +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
mov esi ecx +
jz loc_10108A0  +
push [ebp+arg_0]  +
call ds:SysAllocString  +
mov [esi] eax +
test eax eax +
jz loc_10108A8  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
mov edi 20Ah +
push edi  +
mov esi ecx +
call sub_1001502  +
pop ecx  +
push eax  +
mov ecx esi +
call sub_100BF79  +
push edi  +
push 0  +
push dword ptr [esi]  +
call memset  +
mov esi [esi] +
add esp 0Ch +
push 105h  +
push esi  +
push offset aSystemrootSyst  +
call ds:ExpandEnvironmentStringsW  +
pop edi  +
pop esi  +
test eax eax +
jz loc_10108B3  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov [esi] eax +
test eax eax +
jz loc_1004CCC  +
add eax 4 +
push eax  +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push edi  +
xor eax eax +
xor esi esi +
mov [ebp+var_10] esi +
lea edi [ebp+var_C] +
stos   +
lea eax [ebp+var_10] +
push eax  +
push [ebp+hFile]  +
call ds:GetFileSizeEx  +
test eax eax +
jz loc_1010D9C  +
cmp [ebp+var_C] esi +
jnz loc_1010DB9  +
cmp [ebp+var_10] esi +
jz loc_1010DC3  +
test byte ptr [ebp+var_10] 1 +
jnz loc_1010DC3  +
mov edi ds:ReadFile +
push esi  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push 2  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+hFile]  +
mov [ebp+NumberOfBytesRead] esi +
mov [ebp+Buffer] esi +
call edi  +
test eax eax +
jz loc_1010D9C  +
cmp [ebp+NumberOfBytesRead] 2 +
jnz loc_1010DC3  +
mov eax 0FEFFh +
cmp word ptr [ebp+Buffer] ax +
jnz loc_1010DC3  +
mov esi [ebp+var_10] +
push ebx  +
shr esi 1 +
xor ecx ecx +
push 2  +
pop edx  +
mov eax esi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_1001502  +
pop ecx  +
push 0  +
lea ecx [ebp+NumberOfBytesRead] +
push ecx  +
lea ebx [esi+esi] +
push ebx  +
push eax  +
push [ebp+hFile]  +
mov [ebp+Buffer] eax +
call edi  +
test eax eax +
jz loc_1010DCD  +
lea eax [esi+esi-2] +
cmp [ebp+NumberOfBytesRead] eax +
jnz loc_1010DF2  +
mov eax [ebp+Buffer] +
xor ecx ecx +
mov [ebx+eax-2] cx +
mov ecx [ebp+arg_4] +
push eax  +
call sub_100BF79  +
push 0  +
call sub_10014D2  +
xor eax eax +
pop ecx  +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
mov esi ecx +
call sub_100149E  +
mov eax [ebp+arg_0] +
add eax 14h +
cmp eax 14h +
jb loc_1010E1C  +
push eax  +
push 9  +
call sub_1001678  +
push eax  +
mov ecx esi +
call sub_1001482  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+arg_14] +
push esi  +
xor esi esi +
and ecx 100h +
push edi  +
mov edi [ebp+arg_4] +
mov eax 80070057h +
jnz loc_1010E37  +
xor esi esi +
test edi edi +
jz loc_1004EFF  +
cmp edi 7FFFFFFFh +
ja loc_1004EFF  +
test esi esi +
jl loc_1004EF7  +
mov edx [ebp+arg_0] +
push ebx  +
xor esi esi +
mov ebx edi +
mov [ebp+arg_4] edx +
mov [ebp+var_4] ebx +
cmp ecx esi +
jnz loc_1010E4D  +
test [ebp+arg_14] 0FFFFE000h +
jnz loc_1010E62  +
xor ecx ecx +
cmp edi ecx +
jz loc_1010EA2  +
mov esi [ebp+arg_8] +
mov [ebp+arg_4] 7FFFFFFEh +
sub [ebp+arg_4] edi +
mov ebx edi +
mov eax edx +
mov [ebp+var_4] ecx +
sub esi edx +
mov edx [ebp+arg_4] +
add edx ebx +
jz loc_1004EAA  +
movzx edx word ptr [esi+eax] +
test dx dx +
jz loc_1004EAA  +
mov [eax] dx +
inc eax  +
inc eax  +
dec ebx  +
inc ecx  +
test ebx ebx +
jnz loc_1004E8F  +
test ebx ebx +
jz loc_1010EBC  +
mov esi [ebp+var_4] +
xor edx edx +
mov [eax] dx +
mov eax [ebp+arg_0] +
mov ebx edi +
sub ebx ecx +
lea eax [eax+ecx*2] +
mov [ebp+arg_4] eax +
mov [ebp+var_4] ebx +
test esi esi +
jl loc_1010E6D  +
mov ecx [ebp+arg_14] +
test ecx 200h +
jnz loc_1010ECB  +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_1004EED  +
mov ecx [ebp+arg_4] +
mov [eax] ecx +
mov eax [ebp+arg_10] +
test eax eax +
jz loc_1004EF6  +
mov [eax] ebx +
pop ebx  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 18h  +
mov esi eax +
jmp loc_1004E44  +
***
cmp esi 8007007Ah +
jz loc_1004EE1  +
jmp loc_1004EF6  +
***
mov eax offset RegSetValueExW +
jmp loc_1007872  +
***
mov eax offset RegOpenKeyExW +
jmp loc_1007872  +
***
mov eax offset RegQueryValueExW +
jmp loc_1007872  +
***
mov eax offset RegNotifyChangeKeyValue +
jmp loc_1007872  +
***
mov eax offset RegCreateKeyExW +
jmp loc_1007872  +
***
mov eax offset PathIsPrefixW +
jmp loc_100788A  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
test ecx ecx +
jz loc_1010F71  +
cmp ecx 0FFFFFFFFh +
jz loc_1010F71  +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_1004FA0  +
test byte ptr [eax+1Ch] 8 +
jnz loc_1010F56  +
push dword ptr [esi]  +
call ds:CloseHandle  +
and dword ptr [esi] 0 +
and dword ptr [esi+4] 0 +
pop esi  +
retn   +
***
mov eax ecx +
retn   +
***
call sub_100AC0A  +
pop ecx  +
retn   +
***
push 0  +
mov ecx offset unk_102215C +
call sub_1009EFA  +
push (offset byte_1002D8C+2)  +
call sub_100AC0A  +
pop ecx  +
retn   +
***
call sub_100AC0A  +
pop ecx  +
retn   +
***
call sub_100AC0A  +
pop ecx  +
retn   +
***
call sub_100AC0A  +
pop ecx  +
retn   +
***
push (offset dword_1002DCC+2)  +
call sub_100AC0A  +
pop ecx  +
retn   +
***
call sub_100AC0A  +
pop ecx  +
retn   +
***
call sub_100AC0A  +
pop ecx  +
retn   +
***
call sub_100AC0A  +
pop ecx  +
retn   +
***
push (offset dword_1002E38+2)  +
call sub_100AC0A  +
pop ecx  +
retn   +
***
call sub_100AC0A  +
pop ecx  +
retn   +
***
call sub_100AC0A  +
pop ecx  +
retn   +
***
add [eax+4Ch] ch +
and [edx] eax +
add edi edi +
adc eax offset InterlockedExchange +
push (offset dword_1002E88+3)  +
call sub_100AC0A  +
pop ecx  +
retn   +
***
call sub_100AC0A  +
pop ecx  +
retn   +
***
call sub_100AC0A  +
pop ecx  +
retn   +
***
lea eax [ebp-28h] +
push eax  +
mov ecx esi +
call sub_1005135  +
mov edi eax +
test edi edi +
jl loc_1008166  +
cmp byte ptr [esi+15h] 0 +
lea eax [esi+20h] +
mov [ebp-18h] eax +
jz loc_1005AC4  +
jmp loc_100817A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_1005157  +
test dword ptr [eax+1Ch] 100h +
jnz loc_100DD7C  +
lea esi [edi+20h] +
push esi  +
mov ecx edi +
call sub_1007C4E  +
test eax eax +
jl loc_10051BB  +
cmp dword ptr [esi] 0 +
jz loc_10051C1  +
mov edi [ebp+arg_0] +
and dword ptr [edi] 0 +
push 3  +
push offset aS4u  +
mov ecx esi +
call sub_10051CD  +
test al al +
jnz loc_100DD93  +
push 8  +
push offset aPassword  +
mov ecx esi +
call sub_10051CD  +
test al al +
jnz loc_100DD9E  +
push 10h  +
push offset aInteractivetok  +
mov ecx esi +
call sub_10051CD  +
test al al +
jz loc_100DDA9  +
mov dword ptr [edi] 10000h +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
mov eax 80041318h +
jmp loc_10051BB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
cmp [ecx] eax +
jz loc_10051DF  +
xor al al +
pop ebp  +
retn 8  +
push eax  +
push [ebp+arg_0]  +
push dword ptr [ecx+4]  +
call ds:wcsncmp  +
add esp 0Ch +
neg eax  +
sbb eax eax +
inc eax  +
jmp loc_10051DB  +
***
xor eax eax +
cmp [ebp+var_8] eax +
jbe loc_100E7C1  +
cmp [ebp+eax*8+var_D4] edi +
jz loc_10052F5  +
inc eax  +
cmp eax [ebp+var_8] +
jb loc_1005201  +
jmp loc_100E7C1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0D4h +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_100524B  +
test dword ptr [eax+1Ch] 100h +
jnz loc_100E5B3  +
cmp [ebp+arg_8] 0 +
jnz loc_100E5E0  +
and [ebp+var_8] 0 +
lea edi [esi+1Ch] +
mov ecx edi +
call sub_1007E2E  +
mov ecx [eax] +
lea edx [ebp+var_C] +
push edx  +
push eax  +
call dword ptr [ecx+18h]  +
mov ebx eax +
test ebx ebx +
jnz loc_10052BB  +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_100528C  +
test dword ptr [eax+1Ch] 100h +
jnz loc_100E638  +
mov eax [ebp+var_C] +
cmp eax 1 +
jz loc_1005306  +
cmp eax 3 +
jz loc_100E684  +
cmp eax 6 +
jle loc_100E66F  +
cmp eax 8 +
jle loc_1005259  +
cmp eax 0Dh +
jz loc_1005259  +
cmp eax 0Fh +
jnz loc_100E66F  +
test ebx ebx +
jl loc_100E7BE  +
push 1Ch  +
pop ebx  +
push [ebp+arg_4]  +
lea ecx [esi+430h] +
call sub_10055C6  +
mov edi [eax+ebx] +
test edi edi +
jz loc_10052FD  +
push edi  +
lea ecx [esi+430h] +
call sub_10055C6  +
cmp dword ptr [eax+0Ch] 2 +
jz loc_10052F5  +
cmp dword ptr [eax+14h] 0 +
jnz loc_10051F6  +
add ebx 4 +
cmp ebx 6Ch +
jb loc_10052C4  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
mov ecx edi +
call sub_1007E2E  +
lea edi [esi+20h] +
mov ecx edi +
mov ebx eax +
call sub_10095CF  +
mov eax [ebx] +
push edi  +
lea ecx [edi+4] +
push ecx  +
push ebx  +
call dword ptr [eax+38h]  +
test eax eax +
jl loc_100E771  +
and dword ptr [ebp+arg_8] 0 +
push dword ptr [ebp+arg_8]  +
lea ecx [esi+430h] +
push [ebp+arg_4]  +
call sub_1006A2C  +
mov ebx eax +
test ebx ebx +
jz loc_100E66F  +
push ebx  +
lea ecx [esi+430h] +
call sub_10055C6  +
cmp dword ptr [eax+0Ch] 1 +
mov [ebp+var_4] eax +
jnz loc_100536F  +
add eax 4 +
push eax  +
mov ecx edi +
call sub_100681E  +
test al al +
jnz loc_100537D  +
inc dword ptr [ebp+arg_8]  +
cmp dword ptr [ebp+arg_8] 14h +
jb loc_1005330  +
jmp loc_100E66F  +
lea ecx [esi+1Ch] +
mov [ebp+arg_B] 0 +
call sub_1007E2E  +
lea ecx [ebp+arg_B] +
push ecx  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+50h]  +
test eax eax +
setnz al  +
movzx eax al +
push eax  +
push ebx  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1005958  +
test eax eax +
jl loc_10052FF  +
mov eax [ebp+var_8] +
xor ecx ecx +
test eax eax +
jbe loc_10053C6  +
cmp [ebp+ecx*8+var_D4] ebx +
jz loc_10053C6  +
inc ecx  +
cmp ecx eax +
jb loc_10053B8  +
cmp ecx eax +
jnz loc_100E748  +
mov [ebp+eax*8+var_D4] ebx +
mov [ebp+eax*8+var_D0] 1 +
inc eax  +
mov [ebp+var_8] eax +
jmp loc_1005259  +
***
push edi  +
lea ecx [esi+430h] +
call sub_10055C6  +
cmp dword ptr [eax+0Ch] 2 +
jnz loc_100548C  +
cmp dword ptr [eax+14h] 0 +
jnz loc_100E4B2  +
add ebx 4 +
cmp ebx 6Ch +
jb loc_1005473  +
jmp loc_100548C  +
push eax  +
mov ecx esi +
call sub_1014E93  +
jmp loc_100E4DB  +
test eax eax +
jge loc_1005496  +
jmp loc_1005498  +
***
call sub_1001448  +
mov esi ecx +
and dword ptr [ebp-14h] 0 +
and dword ptr [ebp-18h] 0 +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_100545A  +
test dword ptr [eax+1Ch] 100h +
jnz loc_100E3D0  +
lea ecx [esi+1Ch] +
call sub_1007E2E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+24h]  +
test eax eax +
jz loc_10054A0  +
test eax eax +
jl loc_1005413  +
push 1Ch  +
pop ebx  +
push dword ptr [ebp+0Ch]  +
lea ecx [esi+430h] +
call sub_10055C6  +
mov edi [eax+ebx] +
test edi edi +
jnz loc_10053E9  +
cmp byte ptr [esi+15h] 0 +
jnz loc_100E510  +
xor eax eax +
call sub_100165F  +
retn 0Ch  +
lea ecx [esi+1Ch] +
call sub_1007E2E  +
lea ebx [esi+20h] +
mov ecx ebx +
mov edi eax +
call sub_10095CF  +
mov eax [edi] +
push ebx  +
lea ecx [ebx+4] +
push ecx  +
push edi  +
call dword ptr [eax+38h]  +
test eax eax +
jl loc_1005413  +
cmp dword ptr [ebx] 0 +
jz loc_100545A  +
push 5  +
mov edi offset aXmlns +
push edi  +
mov ecx ebx +
call sub_10051CD  +
test al al +
jnz loc_100545A  +
lea ecx [esi+1Ch] +
call sub_1007E2E  +
mov ecx [eax] +
push 0  +
lea edx [ebp-18h] +
push edx  +
push eax  +
call dword ptr [ecx+3Ch]  +
test eax eax +
jl loc_1005413  +
mov eax [ebp-18h] +
mov ecx edi +
mov dx [eax] +
cmp dx [ecx] +
jz loc_100E3FD  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_100545A  +
and dword ptr [ebp-10h] 0 +
lea edi [esi+430h] +
push dword ptr [ebp-10h]  +
mov ecx edi +
push dword ptr [ebp+0Ch]  +
call sub_1006A2C  +
mov ebx eax +
test ebx ebx +
jz loc_100E433  +
push ebx  +
mov ecx edi +
call sub_10055C6  +
cmp dword ptr [eax+0Ch] 2 +
jnz loc_100E433  +
push ebx  +
mov ecx edi +
call sub_10055C6  +
add eax 4 +
push eax  +
lea ecx [esi+20h] +
call sub_100681E  +
test al al +
jz loc_100E426  +
push ebx  +
mov ecx esi +
call sub_1005EAA  +
test eax eax +
jl loc_1005498  +
cmp byte ptr [esi+15h] 0 +
jnz loc_100E441  +
push dword ptr [ebp+10h]  +
mov ecx esi +
push 0  +
push ebx  +
push dword ptr [ebp+8]  +
call sub_10059FF  +
test eax eax +
jl loc_1005498  +
mov eax [ebp-14h] +
xor ecx ecx +
test eax eax +
ja loc_100E4A1  +
cmp eax 14h +
jnb loc_100E4FB  +
mov [ebp+eax*4-68h] ebx +
inc eax  +
mov [ebp-14h] eax +
jmp loc_100545A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx] +
cmp ecx 10000h +
push esi  +
push edi  +
jl loc_1005604  +
cmp ecx 10001h +
jle loc_100E8F3  +
cmp ecx 10003h +
jg loc_1005604  +
mov eax [ebp+arg_0] +
imul eax eax +
and ecx 0FFFFh +
add eax off_102C7C0[ecx*4] +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
mov eax off_102C7CC +
jmp loc_10055FE  +
***
lea eax [ebp-38h] +
push eax  +
mov ecx esi +
call sub_1005620  +
jmp loc_10059DB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
push ebx  +
push esi  +
mov esi ecx +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_1005645  +
test dword ptr [eax+1Ch] 100h +
jnz loc_100DE31  +
lea ebx [esi+20h] +
push ebx  +
mov ecx esi +
mov [ebp+var_14] ebx +
call sub_1007C4E  +
test eax eax +
jl loc_100582A  +
and [ebp+var_8] 0 +
xor eax eax +
push edi  +
mov [ebp+SystemTime.wYear] ax +
lea edi [ebp+SystemTime.wMonth] +
stos   +
stos   +
stos   +
stos   +
mov eax [esi+24h] +
movzx eax word ptr [eax] +
mov [ebp+var_1] 0 +
cmp ax 2Dh +
jz loc_1005830  +
cmp ax 2Bh +
jz loc_100DE48  +
push 0  +
push 4  +
lea eax [ebp+SystemTime] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
call sub_100583C  +
test eax eax +
jl loc_1005829  +
mov eax [ebp+var_8] +
cmp eax [ebx] +
jnb loc_1005830  +
mov ecx [esi+24h] +
inc [ebp+var_8]  +
cmp word ptr [ecx+eax*2] 2Dh +
jnz loc_1005830  +
push 0  +
push 2  +
pop edi  +
push edi  +
lea eax [ebp+SystemTime.wMonth] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
call sub_100583C  +
test eax eax +
jl loc_1005829  +
cmp [ebp+SystemTime.wMonth] 0Ch +
ja loc_1005830  +
mov eax [ebp+var_8] +
cmp eax [ebx] +
jnb loc_1005830  +
mov ecx [esi+24h] +
inc [ebp+var_8]  +
cmp word ptr [ecx+eax*2] 2Dh +
jnz loc_1005830  +
push 0  +
push edi  +
lea eax [ebp+SystemTime.wDay] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
call sub_100583C  +
test eax eax +
jl loc_1005829  +
cmp [ebp+SystemTime.wDay] 1Fh +
ja loc_1005830  +
mov eax [ebp+var_8] +
cmp eax [ebx] +
jnb loc_1005830  +
mov ecx [esi+24h] +
inc [ebp+var_8]  +
cmp word ptr [ecx+eax*2] 54h +
jnz loc_1005830  +
push 0  +
push edi  +
lea eax [ebp+SystemTime.wHour] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
call sub_100583C  +
test eax eax +
jl loc_1005829  +
cmp [ebp+SystemTime.wHour] 18h +
ja loc_1005830  +
mov eax [ebp+var_8] +
cmp eax [ebx] +
jnb loc_1005830  +
mov ecx [esi+24h] +
inc [ebp+var_8]  +
cmp word ptr [ecx+eax*2] 3Ah +
jnz loc_1005830  +
push 0  +
push edi  +
lea eax [ebp+SystemTime.wMinute] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
call sub_100583C  +
test eax eax +
jl loc_1005829  +
cmp [ebp+SystemTime.wMinute] 3Bh +
ja loc_1005830  +
mov eax [ebp+var_8] +
cmp eax [ebx] +
jnb loc_1005830  +
mov ecx [esi+24h] +
inc [ebp+var_8]  +
cmp word ptr [ecx+eax*2] 3Ah +
jnz loc_1005830  +
push 0  +
push edi  +
lea eax [ebp+SystemTime.wSecond] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
call sub_100583C  +
test eax eax +
jl loc_1005829  +
cmp [ebp+SystemTime.wSecond] 3Bh +
ja loc_1005830  +
cmp [ebp+SystemTime.wHour] 18h +
jz loc_100DE54  +
mov eax [ebx] +
mov edi [ebp+var_8] +
cmp edi eax +
jb loc_100DE79  +
push 0  +
lea eax [ebp+SystemTime] +
push eax  +
lea ecx [ebp+var_34] +
call sub_1004408  +
cmp [ebp+var_1] 0 +
jnz loc_100DEB2  +
mov eax [ebx] +
cmp edi eax +
jnz loc_100DEC6  +
mov byte ptr [ebp+var_34] 1 +
mov edi [ebp+arg_0] +
lea esi [ebp+var_34] +
movs   +
movs   +
movs   +
movs   +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
mov eax 80041318h +
jmp loc_1005829  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov ebx ecx +
push edi  +
mov [ebp+var_4] ebx +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_1005863  +
test dword ptr [eax+1Ch] 100h +
jnz loc_100DB35  +
mov cl [ebp+arg_C] +
mov edi [ebp+arg_4] +
xor eax eax +
mov [edi] ax +
test cl cl +
jnz loc_1005875  +
mov cl [ebp+arg_8] +
mov eax [ebp+arg_0] +
mov esi [eax] +
movzx edx [ebp+arg_8] +
movzx ecx cl +
add ecx esi +
add edx esi +
cmp esi ecx +
jnb loc_10058BF  +
mov esi [eax] +
cmp esi [ebx+20h] +
jnb loc_10058BF  +
mov ebx [ebx+24h] +
movzx esi word ptr [ebx+esi*2] +
cmp si 30h +
jb loc_10058BF  +
cmp si 39h +
ja loc_10058BF  +
mov bx [edi] +
imul bx bx +
add bx si +
sub bx 30h +
mov [edi] bx +
inc dword ptr [eax]  +
cmp [eax] ecx +
jnb loc_10058BF  +
mov ebx [ebp+var_4] +
jmp loc_1005889  +
cmp [eax] edx +
pop edi  +
sbb eax eax +
pop esi  +
and eax 80041318h +
pop ebx  +
leave   +
retn 10h  +
***
mov esi [ebp+arg_0] +
mov byte ptr [edi+42Ch] 0 +
test esi esi +
jz loc_10058FC  +
mov edx [esi] +
push ebx  +
lea eax [edi+430h] +
push eax  +
mov ecx esi +
call dword ptr [edx]  +
mov ecx [ebp+arg_C] +
mov [ebp+arg_0] eax +
mov byte ptr [ecx] 1 +
test eax eax +
jl loc_100E577  +
push [ebp+arg_C]  +
mov ecx edi +
push ebx  +
push esi  +
call sub_100542B  +
test eax eax +
jl loc_10059C9  +
push [ebp+arg_C]  +
mov ecx edi +
push [ebp+arg_8]  +
push ebx  +
push esi  +
call sub_100521E  +
mov [ebp+arg_0] eax +
test eax eax +
jl loc_10059C9  +
test esi esi +
jz loc_1005948  +
mov edx [esi] +
push ebx  +
lea eax [edi+430h] +
push eax  +
mov ecx esi +
call dword ptr [edx+8]  +
mov [ebp+arg_0] eax +
test eax eax +
jl loc_100E577  +
cmp byte ptr [edi+15h] 0 +
jz loc_10059C6  +
jmp loc_100E59C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push edi  +
mov edi ecx +
mov eax off_10220C4 +
mov ebx [ebp+arg_4] +
cmp eax offset off_10220C4 +
jz loc_100597D  +
test dword ptr [eax+1Ch] 100h +
jnz sub_100E54C  +
push ebx  +
mov ecx edi +
call sub_1005EAA  +
test eax eax +
jl loc_10059CA  +
push esi  +
lea ecx [edi+430h] +
push ebx  +
call sub_10055C6  +
cmp dword ptr [eax+10h] 0 +
jz loc_10058CF  +
push [ebp+arg_C]  +
mov ecx edi +
push ebx  +
push [ebp+arg_0]  +
call sub_100542B  +
test eax eax +
jl loc_10059C9  +
push [ebp+arg_C]  +
mov ecx edi +
push [ebp+arg_8]  +
push ebx  +
push [ebp+arg_0]  +
call sub_10059FF  +
mov [ebp+arg_0] eax +
mov eax [ebp+arg_0] +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
lea eax [ebp-28h] +
push eax  +
mov ecx esi +
call sub_1006463  +
mov edi eax +
test edi edi +
jl loc_1007FE3  +
cmp byte ptr [esi+15h] 0 +
lea eax [esi+20h] +
mov [ebp-18h] eax +
jz loc_1005AC4  +
jmp loc_1007F42  +
***
call sub_1001448  +
mov esi ecx +
mov eax off_10220C4 +
mov ebx [ebp+0Ch] +
cmp eax offset off_10220C4 +
jz loc_1005A29  +
test dword ptr [eax+1Ch] 100h +
jnz sub_1007E65  +
lea eax [ebp-30h] +
push eax  +
xor edi edi +
mov byte ptr [ebp-38h] 0 +
call ds:GetSystemTimeAsFileTime  +
lea ecx [esi+430h] +
push ebx  +
mov byte ptr [esi+42Ch] 1 +
call sub_10055C6  +
mov ecx eax +
call sub_100654F  +
test al al +
jz loc_1005A61  +
cmp byte ptr [ebp+10h] 0 +
jnz sub_1007E90  +
push ebx  +
lea ecx [esi+430h] +
call sub_10055C6  +
mov eax [eax+10h] +
mov [ebp-10h] eax +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_1005A8C  +
test dword ptr [eax+1Ch] 100h +
jnz sub_1007EA2  +
mov eax [ebp-10h] +
cmp eax 16h +
ja sub_1008370  +
jmp ds:off_10083AD[eax*4]  +
lea eax [ebp-28h] +
push eax  +
mov ecx esi +
call sub_1005C58  +
mov edi eax +
test edi edi +
jl loc_100801E  +
cmp byte ptr [esi+15h] 0 +
lea eax [esi+20h] +
mov [ebp-18h] eax +
jnz loc_1008032  +
mov byte ptr [esi+42Ch] 0 +
test edi edi +
jl loc_1005B02  +
mov ebx [ebp+8] +
test ebx ebx +
jz loc_1005B02  +
mov eax [ebp+14h] +
movzx eax byte ptr [eax] +
mov edx [ebx] +
push eax  +
lea eax [ebp-38h] +
push eax  +
push dword ptr [ebp+0Ch]  +
lea eax [esi+430h] +
push eax  +
mov ecx ebx +
call dword ptr [edx+4]  +
mov edi eax +
mov eax [ebp+14h] +
mov byte ptr [eax] 1 +
test edi edi +
jl loc_1008384  +
mov eax edi +
call sub_100165F  +
retn 10h  +
lea ecx [esi+20h] +
call sub_10095CF  +
cmp byte ptr [ebp+10h] 0 +
jnz loc_1005B2F  +
lea eax [esi+20h] +
push eax  +
mov ecx esi +
call sub_1007C4E  +
mov edi eax +
test edi edi +
jl sub_1007ED7  +
cmp dword ptr [ebp-10h] 2 +
jz loc_1005B62  +
cmp dword ptr [ebp-10h] 7 +
jz loc_1005B62  +
cmp dword ptr [ebp-10h] 6 +
jnz loc_1005B4B  +
cmp dword ptr [esi+20h] 0 +
jz loc_1007EDE  +
cmp byte ptr [esi+15h] 0 +
lea eax [esi+20h] +
mov ecx eax +
mov [ebp-18h] ecx +
jz loc_1005AC4  +
jmp loc_1007EF4  +
cmp dword ptr [esi+20h] 0 +
jnz loc_1005B3B  +
jmp loc_1007EDE  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_8]  +
mov esi ecx +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1008EAD  +
mov al [ebp+arg_C] +
mov [esi+70h] al +
mov dword ptr [esi] offset off_1005B9C +
mov eax esi +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1005B9C +
call sub_1005BE9  +
test byte ptr [ebp+8] 1 +
jz loc_1005BDD  +
push esi  +
call sub_10014DF  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
mov edi edi +
lea eax [ecx+0Ch] +
or edx 0FFFFFFFFh +
xadd [eax] edx +
dec edx  +
test edx edx +
jle loc_100EF40  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_1005C7A  +
test dword ptr [eax+1Ch] 100h +
jnz loc_100DD29  +
lea esi [edi+20h] +
push esi  +
mov ecx edi +
call sub_1007C4E  +
test eax eax +
jl loc_1005CB9  +
push 5  +
push offset aFalse  +
mov ecx esi +
call sub_10051CD  +
test al al +
jnz loc_1005CBF  +
push 4  +
push offset aTrue  +
mov ecx esi +
call sub_10051CD  +
test al al +
jz loc_100DD40  +
mov eax [ebp+arg_0] +
mov byte ptr [eax] 1 +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
mov eax [ebp+arg_0] +
mov byte ptr [eax] 0 +
jmp loc_1005CB7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov ebx ecx +
push edi  +
mov [ebp+var_4] ebx +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_1005CF3  +
test dword ptr [eax+1Ch] 100h +
jnz loc_100DB01  +
mov edi [ebp+arg_4] +
mov cl [ebp+arg_C] +
and dword ptr [edi] 0 +
test cl cl +
jz loc_100DB18  +
mov eax [ebp+arg_0] +
mov esi [eax] +
movzx edx [ebp+arg_8] +
movzx ecx cl +
add ecx esi +
add edx esi +
cmp esi ecx +
jnb loc_100DB20  +
mov esi [eax] +
cmp esi [ebx+20h] +
jnb loc_100DB27  +
mov ebx [ebx+24h] +
movzx esi word ptr [ebx+esi*2] +
cmp si 30h +
jb loc_1005D57  +
cmp si 39h +
ja loc_1005D57  +
mov ebx [edi] +
imul ebx ebx +
movzx esi si +
lea esi [ebx+esi-30h] +
mov [edi] esi +
inc dword ptr [eax]  +
cmp [eax] ecx +
jnb loc_100DB27  +
mov ebx [ebp+var_4] +
jmp loc_1005D1C  +
cmp [eax] edx +
sbb eax eax +
and eax 80041318h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
push edx  +
push edx  +
push ebx  +
call LoadLibraryExA  +
mov edi eax +
mov [ebp+hModule] edi +
test edi edi +
jz loc_100D82B  +
push 0  +
push edi  +
push esi  +
call InterlockedCompareExchange  +
mov esi eax +
test esi esi +
jnz loc_100D81D  +
push 8  +
pop ecx  +
lea edi [ebp+var_28] +
stos   +
mov eax [ebp+hModule] +
mov [ebp+var_14] eax +
mov eax ds:dword_1005DC8 +
mov [ebp+var_2C] 24h +
mov [ebp+var_20] ebx +
test eax eax +
jz loc_1005E27  +
jmp loc_100D810  +
cmp eax 0B6h +
jnz loc_1005E57  +
jmp loc_1005E50  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
mov eax [ebp+hModule] +
and [ebp+var_4] 0 +
push ebx  +
mov ebx [eax+4] +
push esi  +
mov esi [eax+8] +
push edi  +
mov edi [ebp+arg_4] +
sub edi [eax+0Ch] +
mov eax [eax+10h] +
mov ecx offset __ImageBase +
sub edi ecx +
sar edi 2 +
add esi ecx +
mov edx [esi] +
lea eax __ImageBase[eax+edi*4] +
add ebx ecx +
mov ecx [eax] +
mov [ebp+hModule] edx +
lea eax (__ImageBase+2)[ecx] +
test ecx ecx +
js loc_100D808  +
mov [ebp+lpProcName] eax +
test edx edx +
jz loc_1005D67  +
cmp [ebp+hModule] 0FFFFFFFFh +
jz loc_100D852  +
cmp [ebp+hModule] 0 +
jz loc_100D86E  +
push [ebp+lpProcName]  +
push [ebp+hModule]  +
call GetProcAddress  +
mov esi eax +
test esi esi +
jz loc_100D85B  +
mov [ebp+var_4] 1 +
test esi esi +
jz loc_100D86E  +
cmp [ebp+var_4] 0 +
jz loc_1005E6A  +
mov eax [ebp+arg_4] +
mov [eax] esi +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
cmp dword ptr [edi] 0 +
jnz loc_1005EF3  +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_1005F27  +
test dword ptr [eax+1Ch] 100h +
jz loc_1005F27  +
jmp loc_100E0F4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
lea ecx [esi+1Ch] +
call sub_1007E2E  +
lea edi [esi+20h] +
mov ecx edi +
mov ebx eax +
call sub_10095CF  +
mov eax [ebx] +
push edi  +
lea ecx [edi+4] +
push ecx  +
push ebx  +
call dword ptr [eax+34h]  +
mov ebx eax +
test ebx ebx +
jl loc_100E0A1  +
push [ebp+arg_0]  +
lea ebx [esi+430h] +
mov ecx ebx +
call sub_10055C6  +
cmp dword ptr [eax+0Ch] 2 +
jz loc_1005E7E  +
push dword_102C7D4  +
mov ecx edi +
push off_102C7D0  +
call sub_10051CD  +
test al al +
jz loc_100E133  +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_1005F27  +
test dword ptr [eax+1Ch] 100h +
jnz loc_100E11D  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
call sub_1001448  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+8]  +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_1005F70 +
call sub_1009926  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+8] +
call sub_1008A5F  +
mov eax esi +
call sub_100165F  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_1005FA6  +
test dword ptr [eax+1Ch] 200h +
jnz loc_100E96C  +
mov eax [ebp+0Ch] +
sub eax 67h +
jz loc_1005FC4  +
sub eax 4 +
jz loc_1005FC4  +
sub eax 6 +
jz loc_1005FC4  +
sub eax 0Fh +
jz loc_1005FC4  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
lea ecx [esi+8] +
call sub_1005FD3  +
jmp loc_1005FBD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
lea eax [ebp+var_4] +
xor edi edi +
push eax  +
mov esi ecx +
mov [ebp+var_4] edi +
call sub_10060E1  +
lea eax [ebp+var_4] +
push eax  +
lea ecx [esi+4] +
mov [ebp+var_4] edi +
call sub_10060E1  +
lea eax [ebp+var_4] +
push eax  +
lea ecx [esi+8] +
mov [ebp+var_4] edi +
call sub_10060E1  +
lea eax [ebp+var_4] +
push eax  +
lea ecx [esi+0Ch] +
mov [ebp+var_4] edi +
call sub_10060E1  +
lea eax [ebp+var_4] +
push eax  +
lea ecx [esi+10h] +
mov [ebp+var_4] edi +
call sub_10060E1  +
lea eax [ebp+var_4] +
push eax  +
lea ecx [esi+24h] +
mov [ebp+var_4] edi +
call sub_10060E1  +
lea eax [ebp+var_4] +
push eax  +
lea ecx [esi+28h] +
mov [ebp+var_4] edi +
call sub_10060E1  +
lea eax [ebp+var_4] +
push eax  +
lea ecx [esi+2Ch] +
mov [ebp+var_4] edi +
call sub_10060E1  +
lea eax [ebp+var_4] +
push eax  +
lea ecx [esi+30h] +
mov [ebp+var_4] edi +
call sub_10060E1  +
lea eax [ebp+var_4] +
push eax  +
lea ecx [esi+34h] +
mov [ebp+var_4] edi +
call sub_10060E1  +
lea eax [ebp+var_4] +
push eax  +
lea ecx [esi+38h] +
mov [ebp+var_4] edi +
call sub_10060E1  +
lea eax [ebp+var_4] +
push eax  +
lea ecx [esi+3Ch] +
mov [ebp+var_4] edi +
call sub_10060E1  +
lea eax [ebp+var_4] +
push eax  +
lea ecx [esi+40h] +
mov [ebp+var_4] edi +
call sub_10060E1  +
lea ecx [esi+4Ch] +
call sub_100B300  +
lea ecx [esi+5Ch] +
call sub_100B300  +
lea ecx [esi+6Ch] +
call sub_100B300  +
lea eax [ebp+var_4] +
push eax  +
lea ecx [esi+7Ch] +
mov [ebp+var_4] edi +
call sub_10060E1  +
mov [ebp+var_4] edi +
lea eax [ebp+var_4] +
push eax  +
lea ecx [esi+80h] +
call sub_10060E1  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
push edi  +
mov edi ecx +
test eax eax +
jnz loc_1006106  +
mov ecx edi +
call sub_10019E8  +
mov eax [esi] +
mov [edi] eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
add eax 8 +
push eax  +
call ds:InterlockedIncrement  +
jmp loc_10060F3  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+18h] +
xor bl bl +
test eax eax +
jz loc_100615B  +
mov eax [eax] +
push 2Eh  +
push eax  +
call ds:wcsrchr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1006156  +
add eax 2 +
push eax  +
call sub_1006164  +
test al al +
jz loc_1006156  +
add esi 1Ch +
mov ecx esi +
call sub_1001B0E  +
test eax eax +
jnz loc_100FF33  +
pop esi  +
mov al bl +
pop ebx  +
retn   +
xor eax eax +
jmp loc_1006128  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 3  +
push offset off_102C7E8  +
push [ebp+arg_0]  +
call sub_1006181  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push edi  +
mov edi [ebp+arg_0] +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1006190  +
sub eax edx +
sar eax 1 +
mov ebx eax +
jz loc_100FED4  +
push esi  +
mov esi ds:wcschr +
push 22h  +
push edi  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_10061F2  +
push 2Ch  +
push edi  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_10061F2  +
xor esi esi +
cmp [ebp+arg_8] esi +
jle loc_10061E5  +
mov eax [ebp+arg_4] +
push ebx  +
push edi  +
push dword ptr [eax+esi*4]  +
call ds:_wcsnicmp  +
add esp 0Ch +
test eax eax +
jz loc_10061EE  +
inc esi  +
cmp esi [ebp+arg_8] +
jl loc_10061CA  +
xor al al +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
mov al 1 +
jmp loc_10061E7  +
cmp eax edi +
jnz loc_100FEDB  +
jmp loc_10061E5  +
***
lea eax [ebp+0Ch] +
push eax  +
mov eax [ebp+10h] +
mov ecx [eax+20h] +
call sub_10062E2  +
push eax  +
lea ecx [edi+0Ch] +
call sub_10060E1  +
mov ecx [ebp+0Ch] +
test ecx ecx +
jz loc_1006296  +
call sub_1001A04  +
jmp loc_1006296  +
push 3Ch  +
mov eax offset dword_101DEB0 +
call sub_1001448  +
mov edi ecx +
mov eax off_10220C4 +
mov esi [ebp+0Ch] +
cmp eax offset off_10220C4 +
jz loc_1006251  +
test dword ptr [eax+1Ch] 200h +
jnz loc_100E996  +
cmp esi 74h +
jg loc_100EA90  +
jz loc_100EA70  +
cmp esi 6Ah +
jg loc_10062A0  +
jz loc_100E9FE  +
sub esi 4Ch +
jz loc_100459F  +
sub esi 7 +
jz loc_1004589  +
sub esi 0Dh +
jz loc_100E9DE  +
sub esi 8 +
jz loc_10061FC  +
dec esi  +
jz loc_100E9BE  +
xor eax eax +
call sub_100165F  +
retn 10h  +
***
sub esi 6Ch +
jz loc_100EA5E  +
dec esi  +
jz loc_10062BD  +
sub esi 5 +
jz loc_100EA3E  +
dec esi  +
jnz loc_1006296  +
jmp loc_100EA1E  +
***
lea eax [ebp-1Ch] +
push eax  +
mov eax [ebp+10h] +
mov ecx [eax+20h] +
call sub_10062E2  +
push eax  +
lea ecx [edi+8] +
call sub_10060E1  +
mov ecx [ebp-1Ch] +
jmp loc_1006217  +
***
call sub_1001448  +
xor esi esi +
mov [ebp-10h] esi +
mov [ebp-10h] esi +
mov [ebp-4] esi +
call sub_100AEA1  +
push eax  +
lea ecx [ebp-10h] +
call sub_1004450  +
mov ecx [ebp+8] +
push esi  +
push dword ptr [ebp-10h]  +
call sub_100632A  +
push esi  +
call ds:SysFreeString  +
mov eax [ebp+8] +
call sub_100165F  +
retn 4  +
***
call sub_1001448  +
mov esi ecx +
push 0Ch  +
call sub_100150F  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_1006370  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1006379  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [esi] eax +
test eax eax +
jz loc_100DB65  +
mov eax esi +
call sub_100165F  +
retn 8  +
xor eax eax +
jmp loc_1006358  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
and dword ptr [esi+4] 0 +
cmp [ebp+arg_4] 0 +
push edi  +
mov edi [ebp+arg_0] +
mov dword ptr [esi+8] 1 +
jnz loc_100DA42  +
mov [esi] edi +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
push edi  +
mov esi ecx +
cmp eax 0FFFFFFFFh +
jnz loc_100FD9A  +
mov edi [ebp+arg_0] +
test edi edi +
jnz loc_100FDA2  +
mov eax [esi] +
test eax eax +
jz loc_10063E3  +
push dword ptr [esi+4]  +
push eax  +
call sub_10063F8  +
push dword ptr [esi]  +
call ds:free  +
and [esi] edi +
pop ecx  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
mov al 1 +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jbe loc_1006419  +
push esi  +
mov esi [ebp+arg_0] +
push 0  +
mov ecx esi +
call sub_1006423  +
add esi 4 +
dec edi  +
jnz loc_1006409  +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1006446  +
test [ebp+arg_0] 1 +
jnz loc_100FD67  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
test ecx ecx +
jnz loc_1006456  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
jmp loc_1006451  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov esi ecx +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_1006486  +
test dword ptr [eax+1Ch] 100h +
jnz loc_100DFB2  +
lea edi [esi+20h] +
push edi  +
mov ecx esi +
call sub_1007C4E  +
test eax eax +
jl loc_100652C  +
cmp dword ptr [edi] 0 +
jz loc_100DFC9  +
push ebx  +
mov ebx [ebp+arg_0] +
and dword ptr [ebx] 0 +
mov ecx [esi+24h] +
xor eax eax +
inc eax  +
cmp word ptr [ecx] 50h +
mov [ebp+arg_0] eax +
jnz loc_1006543  +
cmp eax [edi] +
jnb loc_1006529  +
mov ecx [esi+24h] +
cmp word ptr [ecx+eax*2] 54h +
jnz loc_100DFD3  +
cmp eax [edi] +
jnb loc_1006529  +
mov edx [esi+24h] +
mov ecx eax +
inc eax  +
cmp word ptr [edx+ecx*2] 54h +
mov [ebp+arg_0] eax +
jnz loc_1006543  +
cmp eax [edi] +
jnb loc_1006543  +
and [ebp+var_4] 0 +
push 8  +
push 1  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
mov ecx esi +
call sub_1005CCC  +
test eax eax +
jl loc_100652B  +
mov ecx [ebp+arg_0] +
cmp ecx [edi] +
jnb loc_1006543  +
mov edx [esi+24h] +
mov eax ecx +
movzx eax word ptr [edx+eax*2] +
inc ecx  +
mov [ebp+arg_0] ecx +
cmp eax 48h +
jnz loc_1006532  +
mov eax [ebp+var_4] +
imul eax eax +
add [ebx] eax +
cmp ecx [edi] +
jb loc_10064E6  +
xor eax eax +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 4  +
cmp eax 4Dh +
jnz loc_100E023  +
mov eax [ebp+var_4] +
imul eax eax +
jmp loc_1006523  +
mov eax 80041318h +
jmp loc_100652B  +
***
mov eax [ecx+10h] +
test eax eax +
jl loc_1006565  +
cmp eax 1 +
jle loc_1006568  +
cmp eax 9 +
jz loc_1006568  +
cmp eax 0Bh +
jz loc_1006568  +
mov al 1 +
retn   +
xor al al +
retn   +
***
push 2Ch  +
call sub_100150F  +
pop ecx  +
mov [ebp-24h] eax +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_1006697  +
mov eax [esi+4] +
mov eax [eax+4] +
cmp eax ebx +
jz loc_1006690  +
mov eax [eax] +
push eax  +
lea ecx [ebp-18h] +
call sub_100997E  +
mov ecx [ebp-24h] +
lea eax [esi+14h] +
push eax  +
lea eax [esi+10h] +
push eax  +
lea eax [esi+0Ch] +
push eax  +
lea eax [ebp-18h] +
push eax  +
lea eax [esi+8] +
push eax  +
mov byte ptr [ebp-4] 2 +
mov dword ptr [ebp-10h] 1 +
call sub_1008E0E  +
test byte ptr [ebp-10h] 1 +
mov [ebp-14h] eax +
mov [ebp-4] ebx +
jz loc_100665D  +
mov ecx [ebp-18h] +
cmp ecx ebx +
jz loc_100665D  +
call sub_1001A04  +
mov [ebp-18h] ebx +
jmp loc_100665D  +
push 20h  +
mov eax offset dword_101DF64 +
call sub_1001448  +
mov esi ecx +
xor ebx ebx +
mov [ebp-10h] ebx +
lea eax [ebp-14h] +
mov [ebp-20h] ebx +
mov [ebp-14h] ebx +
mov [ebp-2Ch] eax +
mov byte ptr [ebp-28h] 1 +
mov [ebp-4] ebx +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_100662B  +
test dword ptr [eax+1Ch] 200h +
jnz loc_100EC25  +
mov eax [ebp+0Ch] +
sub eax 67h +
jz loc_100656B  +
push 4  +
pop edi  +
sub eax edi +
jz loc_100ED9D  +
sub eax 6 +
jz loc_100ED02  +
sub eax 0Ch +
jz loc_100ECC3  +
sub eax 3 +
jz loc_100EC4F  +
cmp [ebp-14h] ebx +
jnz loc_1006679  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-2Ch] +
call near ptr dword_1004FD8+4  +
mov eax [ebp-20h] +
call sub_100165F  +
retn 8  +
***
push dword ptr [ebp-14h]  +
mov ecx [esi+4] +
call sub_10066A3  +
cmp eax ebx +
mov [ebp-20h] eax +
jl loc_1006662  +
mov [ebp-28h] bl +
jmp loc_1006662  +
***
xor eax eax +
jmp loc_1006592  +
***
xor eax eax +
jmp loc_10065C2  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
mov eax off_10220C4 +
mov ebx [ebp+lpCriticalSection] +
cmp eax offset off_10220C4 +
jz loc_10066C6  +
test byte ptr [eax+1Ch] 4 +
jnz loc_100F14C  +
lea eax [esi+0Ch] +
push eax  +
lea ecx [ebp+lpCriticalSection] +
call sub_1001B5E  +
lea eax [esi+0D4h] +
mov ecx [eax] +
xor edi edi +
cmp ecx 20h +
jnb loc_100F173  +
mov [esi+ecx*4+50h] ebx +
inc dword ptr [eax]  +
push [ebp+lpCriticalSection]  +
call ds:LeaveCriticalSection  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi ecx +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_1006725  +
test dword ptr [eax+1Ch] 100h +
jnz loc_100E7C9  +
mov ecx esi +
call sub_100B1F1  +
test eax eax +
jl loc_1006814  +
push ebx  +
push edi  +
lea edi [esi+1Ch] +
mov ecx edi +
call sub_1007E2E  +
mov ecx [eax] +
lea edx [ebp+var_8] +
push edx  +
push eax  +
call dword ptr [ecx+18h]  +
test eax eax +
jnz loc_1004519  +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_100676B  +
test dword ptr [eax+1Ch] 100h +
jnz loc_100E7E0  +
mov eax [ebp+var_8] +
cmp eax 1 +
jz loc_1006799  +
cmp eax 3 +
jz loc_100E80E  +
cmp eax 6 +
jle loc_100E801  +
cmp eax 8 +
jle loc_1006736  +
cmp eax 0Dh +
jz loc_1006736  +
cmp eax 11h +
jz loc_1006736  +
jmp loc_100E801  +
mov ecx edi +
call sub_1007E2E  +
lea edi [esi+20h] +
mov ecx edi +
mov ebx eax +
call sub_10095CF  +
mov eax [ebx] +
push edi  +
lea ecx [edi+4] +
push ecx  +
push ebx  +
call dword ptr [eax+38h]  +
test eax eax +
jl loc_100E85B  +
push 1  +
lea ecx [esi+430h] +
call sub_10055C6  +
add eax 4 +
push eax  +
mov ecx edi +
call sub_100681E  +
test al al +
jz loc_100E870  +
lea ecx [esi+1Ch] +
mov byte ptr [ebp+var_1] 0 +
call sub_1007E2E  +
lea ecx [ebp+var_1] +
push ecx  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+50h]  +
test eax eax +
setnz al  +
movzx eax al +
push eax  +
push 1  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1005958  +
test eax eax +
jge loc_1006736  +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
call sub_10051CD  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
cmp esi [ebp+arg_4] +
jnb loc_100685A  +
test eax eax +
jnz loc_100685A  +
mov ecx [esi] +
test ecx ecx +
jz loc_1006855  +
call ecx  +
add esi 4 +
jmp loc_1006844  +
pop esi  +
pop ebp  +
retn   +
***
call sub_1004379  +
push 5Ch  +
push offset dword_10069C8  +
call sub_1001954  +
xor ebx ebx +
mov [ebp-1Ch] ebx +
mov [ebp-4] ebx +
lea eax [ebp-6Ch] +
push eax  +
call ds:GetStartupInfoW  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov dword ptr [ebp-4] 1 +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp-20h] ebx +
mov edi offset dword_1022150 +
push ebx  +
push esi  +
push edi  +
call ds:__imp_InterlockedCompareExchange  +
cmp eax ebx +
jnz loc_100D87E  +
xor esi esi +
inc esi  +
mov eax dword_1022118 +
cmp eax esi +
jz loc_100D89D  +
mov eax dword_1022118 +
test eax eax +
jnz loc_10069FF  +
mov dword_1022118 esi +
push offset dword_10069C4  +
push offset dword_10069B8  +
call sub_1006839  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100D938  +
mov eax dword_1022118 +
cmp eax esi +
jnz loc_1006915  +
push offset dword_10069B4  +
push offset dword_100695C  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_1022118 2 +
cmp [ebp-20h] ebx +
jnz loc_1006922  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_102CC98 ebx +
jnz loc_100D8AA  +
mov eax ds:_wcmdln +
cmp [eax] ebx +
jz loc_100D938  +
mov eax [eax] +
mov [ebp-24h] eax +
movzx ecx word ptr [eax] +
cmp cx 20h +
jbe loc_10069F0  +
cmp cx 22h +
jz loc_100D8D5  +
inc eax  +
inc eax  +
jmp loc_100693D  +
cmp cx bx +
jz loc_1006A0A  +
cmp [ebp-1Ch] ebx +
jz loc_1006A0A  +
jmp loc_100694D  +
mov dword_102CEF0 esi +
jmp loc_10068F1  +
movzx ecx word ptr [eax] +
cmp cx bx +
jz loc_10028E0  +
cmp cx 20h +
ja loc_10028E0  +
inc eax  +
inc eax  +
mov [ebp-24h] eax +
jmp loc_1006A0A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push edi  +
mov edi ecx +
jz loc_1006A65  +
call sub_1006A6E  +
cmp [ebp+arg_0] eax +
jge loc_1006A65  +
push esi  +
mov esi [ebp+arg_4] +
cmp esi 14h +
jnb loc_100DB74  +
push [ebp+arg_0]  +
mov ecx edi +
call sub_10055C6  +
mov eax [eax+esi*4+1Ch] +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
xor eax eax +
jmp loc_1006A60  +
***
mov eax [ecx] +
cmp eax 10000h +
jl loc_1006A91  +
cmp eax 10002h +
jg loc_1006A84  +
mov eax 83h +
retn   +
cmp eax 10003h +
jnz loc_1006A91  +
mov eax 88h +
retn   +
xor eax eax +
retn   +
***
mov [ebx] edx +
xor eax eax +
inc eax  +
jmp loc_1006B0F  +
xor edx edx +
jmp loc_1006AE1  +
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+14h] +
xor edx edx +
cmp ebx edx +
jz loc_100E892  +
mov [ebx] edx +
cmp [ebp+0Ch] edx +
jz loc_100E89A  +
push esi  +
mov esi [ebp+8] +
mov eax [esi+10h] +
cmp eax edx +
jz loc_100E8A4  +
cmp [ebp+10h] edx +
jz loc_100E8AC  +
cmp dword ptr [esi+8] 0FFFFFFFFh +
push edi  +
jz loc_1006B16  +
lea ecx [eax+eax] +
mov eax [esi+8] +
cmp eax ecx +
jnb loc_1006A94  +
mov edi [ebp+10h] +
sub ecx eax +
cmp ecx edi +
jnb loc_1006AF6  +
mov edi ecx +
mov ecx [esi+0Ch] +
push edi  +
add ecx eax +
push ecx  +
push dword ptr [ebp+0Ch]  +
call memcpy  +
add esp 0Ch +
mov [ebx] edi +
add [esi+8] edi +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
cmp eax 2 +
jb loc_1006A96  +
mov [esi+8] edx +
mov edx [esi+0Ch] +
mov ecx 0FEFFh +
mov edi ecx +
cmp [edx] di +
jz loc_1006A9B  +
push 2  +
pop eax  +
cmp [ebp+10h] eax +
jb loc_100E8B3  +
mov edx [ebp+0Ch] +
mov [edx] cx +
mov [ebx] eax +
jmp loc_1006B0D  +
***
call sub_1001448  +
mov ebx ecx +
mov edi [ebp+8] +
test edi edi +
jz loc_100EE97  +
movzx eax word ptr [edi] +
cmp ax 5Ch +
jnz loc_100EEAE  +
push offset aNtTask  +
lea esi [ebx+10h] +
mov ecx esi +
call sub_1004635  +
push edi  +
lea ecx [ebp+8] +
call sub_100997E  +
lea eax [ebp+8] +
xor edi edi +
push eax  +
mov ecx esi +
mov [ebp-4] edi +
call sub_100921E  +
mov ecx [ebp+8] +
cmp ecx edi +
jz loc_1006BAA  +
call sub_1001A04  +
mov esi [esi] +
cmp esi edi +
jz loc_1006BE8  +
mov eax [esi] +
cmp [eax] di +
jz loc_1004672  +
cmp word ptr [eax] 2Fh +
jz loc_100EEC2  +
cmp word ptr [eax] 5Ch +
jz loc_1006BE0  +
inc eax  +
inc eax  +
jmp loc_1006BB2  +
lea ecx [eax+2] +
mov [ebx+14h] ecx +
jmp loc_1006BCB  +
xor eax eax +
jmp loc_1006BB2  +
***
call sub_1001448  +
mov edi offset off_1009704 +
xor ebx ebx +
mov [ebp-14h] edi +
mov [ebp-10h] ebx +
lea eax [ebp-94h] +
push eax  +
mov [ebp-4] ebx +
call sub_1008509  +
push ebx  +
push eax  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 1 +
call sub_100B727  +
lea ecx [ebp-94h] +
mov [ebp-4] bl +
call sub_1005C07  +
lea eax [ebp-94h] +
push eax  +
call sub_1004947  +
push ebx  +
push eax  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 2 +
call sub_100B7E6  +
lea ecx [ebp-94h] +
call sub_1005C07  +
lea ecx [ebp-34h] +
call sub_10098D9  +
lea eax [ebp-94h] +
push eax  +
mov byte ptr [ebp-4] 3 +
call sub_1008509  +
push ebx  +
mov esi 200FFFFh +
push esi  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 4 +
call sub_1006D05  +
lea ecx [ebp-94h] +
mov byte ptr [ebp-4] 3 +
call sub_1005C07  +
lea eax [ebp-94h] +
push eax  +
call sub_100B9D5  +
push ebx  +
push esi  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 5 +
call sub_1006D05  +
lea ecx [ebp-94h] +
mov byte ptr [ebp-4] 3 +
call sub_1005C07  +
push ebx  +
lea eax [ebp-34h] +
push eax  +
lea ecx [ebp-14h] +
call sub_100B8CF  +
push ebx  +
push ebx  +
push ebx  +
push 2  +
push 6  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push dword ptr [ebp-10h]  +
call ds:CoInitializeSecurity  +
lea ecx [ebp-34h] +
mov esi eax +
call sub_100BA07  +
lea ecx [ebp-14h] +
mov [ebp-14h] edi +
call sub_1009711  +
mov eax esi +
call sub_100165F  +
retn   +
***
call sub_1002917  +
mov esi ecx +
mov [ebp-18h] esi +
mov ecx [ebp+8] +
call sub_100B7C6  +
test al al +
jz loc_1006D8A  +
mov al [esi+8] +
xor ebx ebx +
cmp al bl +
jnz loc_100FE87  +
mov [ebp-14h] ebx +
mov [ebp-4] ebx +
push 74h  +
mov byte ptr [ebp-4] 1 +
call sub_100150F  +
pop ecx  +
mov ecx eax +
mov [ebp-1Ch] ecx +
mov byte ptr [ebp-4] 2 +
cmp ecx ebx +
jz loc_1006D92  +
push 1  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1005B72  +
mov [ebp-14h] eax +
mov [ebp-4] ebx +
cmp [ebp-14h] ebx +
jz loc_100FEAA  +
lea eax [ebp-14h] +
push eax  +
lea ecx [esi+10h] +
call sub_1006D9B  +
mov ecx esi +
call sub_100730A  +
lea ecx [ebp-14h] +
call sub_1006446  +
mov al 1 +
call sub_100165F  +
retn 0Ch  +
xor eax eax +
jmp loc_1006D5E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push edi  +
mov edi [esi+4] +
cmp edi [esi+8] +
jb loc_1006DBD  +
lea eax [edi+1] +
push eax  +
call sub_1006DE0  +
test al al +
jz loc_100FD5C  +
mov eax [esi] +
lea eax [eax+edi*4] +
test eax eax +
jz loc_1006DD0  +
mov ecx [ebp+arg_0] +
mov edx [ecx] +
and dword ptr [ecx] 0 +
mov [eax] edx +
inc dword ptr [esi+4]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
mov edx [esi+8] +
push edi  +
mov edi [ebp+arg_0] +
cmp edi edx +
jbe loc_1006E18  +
cmp dword ptr [esi] 0 +
mov eax [esi+0Ch] +
jnz loc_1006E21  +
cmp eax edi +
ja loc_100FC4E  +
push 4  +
push edi  +
call ds:calloc  +
pop ecx  +
pop ecx  +
mov [esi] eax +
test eax eax +
jz loc_1006E6B  +
mov [esi+8] edi +
mov al 1 +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
test eax eax +
jnz loc_1006E33  +
mov eax [esi+4] +
shr eax 3 +
cmp eax 4 +
jnb loc_1006E6F  +
push 4  +
pop eax  +
add eax edx +
mov ebx eax +
cmp edi eax +
jnb loc_100FC5C  +
push 4  +
push ebx  +
call ds:calloc  +
mov edi eax +
pop ecx  +
pop ecx  +
test edi edi +
jz loc_1006E6B  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
push edi  +
call sub_1006E83  +
push dword ptr [esi]  +
call ds:free  +
pop ecx  +
mov [esi] edi +
mov [esi+8] ebx +
jmp loc_1006E18  +
xor al al +
jmp loc_1006E1A  +
mov ecx 400h +
cmp eax ecx +
ja loc_100FC55  +
jmp loc_1006E33  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
shl eax 2 +
push eax  +
push [ebp+arg_4]  +
push eax  +
push [ebp+arg_0]  +
call sub_1006EA7  +
add esp 10h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call memmove_s  +
add esp 10h +
push eax  +
call sub_10098C0  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
mov ecx esi +
call sub_1006F1E  +
mov eax [esi+8] +
mov esi [esi+4] +
push 1  +
push eax  +
push 4  +
push 1  +
push esi  +
call RegNotifyChangeKeyValue  +
mov ecx off_10220C4 +
pop esi  +
cmp ecx offset off_10220C4 +
jz loc_1006F15  +
test byte ptr [ecx+1Ch] 8 +
jnz loc_1010915  +
***
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
mov esi ecx +
xor ecx ecx +
mov [ebp+var_C] ecx +
cmp [esi+24h] ecx +
jbe loc_1006FBB  +
push ebx  +
push edi  +
xor ebx ebx +
mov eax [esi+20h] +
lea edx [ebp+cbData] +
push edx  +
lea edx [ebp+Data] +
push edx  +
lea edx [ebp+Type] +
push edx  +
mov [ebp+Type] ecx +
mov dword ptr [ebp+Data] ecx +
mov [ebp+cbData] 4 +
mov edi [ebx+eax+4] +
mov eax [esi+4] +
push ecx  +
push edi  +
push eax  +
call RegQueryValueExW  +
mov [ebp+var_10] eax +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_1006F80  +
test byte ptr [eax+1Ch] 8 +
jnz loc_10108CC  +
cmp [ebp+var_10] 0 +
jnz loc_1006FA7  +
cmp [ebp+Type] 4 +
jnz loc_1006FA7  +
mov eax [esi+20h] +
add eax ebx +
mov ecx [eax+0Ch] +
test ecx ecx +
jz loc_1006FA1  +
cmp dword ptr [ebp+Data] ecx +
ja loc_10108ED  +
mov ecx dword ptr [ebp+Data] +
mov [eax+8] ecx +
inc [ebp+var_C]  +
mov eax [ebp+var_C] +
add ebx 10h +
cmp eax [esi+24h] +
jnb loc_1006FB9  +
xor ecx ecx +
jmp loc_1006F3B  +
pop edi  +
pop ebx  +
mov byte ptr [esi+28h] 1 +
pop esi  +
leave   +
retn   +
***
call sub_1001448  +
push 54h  +
call sub_100150F  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_1010D85  +
call sub_1007915  +
jmp loc_1010D87  +
***
mov ecx dword_1022114 +
call sub_1007012  +
call sub_100165F  +
retn   +
test eax eax +
jge loc_1006FF6  +
jmp loc_1007001  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
call sub_100BD00  +
lea edi [esi+4] +
xor ebx ebx +
mov [edi] ebx +
mov [ebp+SecurityAttributes.nLength] 0Ch +
call sub_1004CD8  +
mov [ebp+SecurityAttributes.lpSecurityDescriptor] eax +
lea eax [ebp+dwDisposition] +
push eax  +
push edi  +
lea eax [ebp+SecurityAttributes] +
push eax  +
push 20019h  +
push ebx  +
push ebx  +
push ebx  +
push offset SubKey  +
push 80000002h  +
mov [ebp+SecurityAttributes.bInheritHandle] ebx +
call RegCreateKeyExW  +
cmp eax ebx +
jnz loc_101092D  +
mov ecx esi +
call sub_1004C2A  +
cmp eax ebx +
jl loc_1007172  +
push dword ptr [esi]  +
call PathIsDirectoryW  +
test eax eax +
jz loc_1010942  +
push ebx  +
push 1  +
push ebx  +
push ebx  +
call ds:CreateEventW  +
mov [esi+8] eax +
cmp eax ebx +
jz loc_1010954  +
push 80h  +
push 0FFFFFFFFh  +
push esi  +
push offset loc_1006ED8  +
push eax  +
lea eax [esi+0Ch] +
push eax  +
call ds:RegisterWaitForSingleObject  +
mov edi eax +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_10070CB  +
test byte ptr [eax+1Ch] 8 +
jnz loc_101095E  +
cmp edi ebx +
jz loc_1010976  +
cmp [esi+28h] bl +
jnz loc_1007170  +
push 64h  +
call ds:Sleep  +
jmp loc_10070D3  +
***
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_10071A0 +
jz loc_1007197  +
push esi  +
call sub_10014DF  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
push 4  +
pop ecx  +
mov edi offset dword_10027F0 +
xor eax eax +
cmps   +
jz loc_100721B  +
mov esi [ebp+0Ch] +
push 4  +
pop ecx  +
mov edi offset dword_1007234 +
xor eax eax +
cmps   +
jz loc_100721B  +
mov esi [ebp+0Ch] +
push 4  +
pop ecx  +
mov edi offset dword_1007244 +
xor eax eax +
cmps   +
jnz loc_1007254  +
mov eax [ebp+8] +
mov ecx [ebp+10h] +
mov [ecx] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov eax [ebp+10h] +
and dword ptr [eax] 0 +
mov eax 80004002h +
jmp loc_100722B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
and dword ptr [eax+4] 0 +
or dword ptr [eax+8] 0FFFFFFFFh +
mov [eax+0Ch] ecx +
mov ecx [ebp+arg_4] +
mov dword ptr [eax] offset off_100728C +
mov [eax+10h] ecx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
dec dword ptr [ecx+4]  +
mov eax [ecx+4] +
jz loc_10072E1  +
pop ebp  +
retn 4  +
***
mov eax [ecx] +
push 1  +
call dword ptr [eax+38h]  +
xor eax eax +
jmp loc_10072DD  +
***
mov edi edi +
mov edi edi +
push esi  +
mov esi ecx +
push dword ptr [esi+4]  +
call ds:free  +
and dword ptr [esi+4] 0 +
pop ecx  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi off_10220C4 +
push edi  +
mov edi offset dword_10220D4 +
test esi esi +
jz loc_1007366  +
mov eax [edi] +
and [ebp+var_4] 0 +
lea ecx [esi+8] +
push ecx  +
push 0  +
push 0  +
lea ecx [ebp+var_8] +
push ecx  +
push 1  +
push eax  +
push esi  +
push offset loc_101339B  +
add edi 4 +
mov [ebp+var_8] eax +
call EtwRegisterTraceGuidsW  +
mov esi [esi] +
jmp loc_1007338  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
call sub_1002917  +
mov ebx ecx +
mov edi [ebp+8] +
mov ecx [edi+4] +
mov [ebp-20h] ecx +
test ecx ecx +
jl loc_1007454  +
cmp ecx dword_102CC80 +
jnb loc_1007454  +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_10073B2  +
test byte ptr [eax+1Ch] 80h +
jnz loc_100CE04  +
mov eax [edi+4] +
and dword ptr [ebp+8] 0 +
and dword ptr [ebp-4] 0 +
sub eax 3 +
jnz loc_100CE26  +
cmp dword ptr [edi] 44h +
jbe loc_1007449  +
push dword ptr [edi+3Ch]  +
mov ecx edi +
call sub_100A182  +
mov [ebp-28h] eax +
test eax eax +
jz loc_1007449  +
lea eax [ebx+58h] +
push eax  +
lea ecx [ebp-24h] +
call sub_100140F  +
cmp dword ptr [ebx+70h] 3 +
jnz loc_10073F7  +
push dword ptr [ebx+0Ch]  +
call ds:CancelWaitableTimer  +
push dword ptr [ebp-24h]  +
mov esi [ebx+70h] +
call ds:LeaveCriticalSection  +
cmp esi 4 +
jz loc_100CEC4  +
lea ecx [ebp-58h] +
call sub_100A965  +
mov esi [edi+40h] +
mov byte ptr [ebp-4] 2 +
test esi esi +
jnz loc_100CF24  +
lea eax [ebp-58h] +
push eax  +
push dword ptr [ebp-28h]  +
lea eax [edi+1Ch] +
push eax  +
push dword ptr [edi+18h]  +
add edi 8 +
push edi  +
lea ecx [ebx-4] +
call sub_1007463  +
lea ecx [ebp-58h] +
mov byte ptr [ebp-4] 0 +
call sub_1001BD5  +
mov eax [ebp+8] +
call sub_100165F  +
retn 4  +
xor ecx ecx +
mov [ebp-20h] ecx +
jmp loc_100739C  +
***
call sub_100AADB  +
mov eax [ebp+8] +
mov ebx [ebp+18h] +
mov [ebp-64h] eax +
mov eax [ebp+14h] +
mov [ebp-60h] ecx +
lea ecx [ebp-6Ch] +
mov [ebp-5Ch] eax +
call sub_1001537  +
xor eax eax +
push eax  +
push eax  +
mov [ebp-4] eax +
lea eax [ebp-6Ch] +
push eax  +
call ds:__imp_InterlockedCompareExchange  +
test eax eax +
jz loc_10075DD  +
mov byte ptr [ebp-4] 1 +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_10074BF  +
test byte ptr [eax+1Ch] 80h +
jnz loc_100CAE6  +
mov eax [ebp-60h] +
mov eax [eax+8] +
mov ecx dword_1022110 +
push 0  +
push 0  +
push dword ptr [ebp-5Ch]  +
push eax  +
push offset dword_1007530  +
call sub_10046B2  +
push 40h  +
call sub_100150F  +
pop ecx  +
mov ecx eax +
mov [ebp-70h] ecx +
mov byte ptr [ebp-4] 2 +
test ecx ecx +
jz loc_1007525  +
push dword ptr [ebp-60h]  +
mov esi [ebp-64h] +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
call sub_1009A8F  +
push eax  +
lea ecx [ebp-68h] +
call sub_1004CB1  +
push 0  +
push dword ptr [ebp-5Ch]  +
lea ecx [ebp-54h] +
mov byte ptr [ebp-4] 3 +
call sub_100A8A9  +
jmp loc_100CB06  +
xor eax eax +
jmp loc_1007506  +
mov edi [ebp-60h] +
movzx eax byte ptr [edi+90h] +
mov esi [ebp-68h] +
push eax  +
push ebx  +
lea eax [ebp-54h] +
push eax  +
mov ecx esi +
call sub_1008B0A  +
mov [ebp-58h] eax +
test eax eax +
jl loc_10075B4  +
test esi esi +
jz loc_100CB1A  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
call sub_1009B08  +
mov [ebp-58h] eax +
test eax eax +
jl loc_10075B4  +
lea eax [edi+5Ch] +
push eax  +
lea ecx [ebp-70h] +
call sub_100140F  +
push ecx  +
lea eax [ebp-68h] +
mov ecx esp +
mov [ebp-58h] esp +
push eax  +
mov byte ptr [ebp-4] 5 +
call sub_100A565  +
lea ecx [edi+78h] +
call sub_100A647  +
push dword ptr [ebp-70h]  +
mov [ebp-58h] eax +
mov dword ptr [edi+74h] 2 +
call ds:LeaveCriticalSection  +
lea ecx [ebp-54h] +
mov byte ptr [ebp-4] 3 +
call sub_1004216  +
mov byte ptr [ebp-4] 1 +
test esi esi +
jz loc_10075CF  +
mov ecx esi +
call sub_1001AA5  +
and dword ptr [ebp-4] 0 +
cmp dword ptr [ebp-58h] 0 +
jl loc_100CB26  +
push 0  +
lea eax [ebp-6Ch] +
push eax  +
call ds:InterlockedExchange  +
call sub_100142F  +
call sub_10075FB  +
retn 14h  +
***
mov ecx [ebp-14h] +
xor ecx ebp +
call sub_1001FD0  +
jmp sub_100165F  +
***
xor eax eax +
mov [ebp-28h] ax +
lea eax [ebp-28h] +
push eax  +
mov ecx esi +
call sub_1007BC3  +
mov edi eax +
test edi edi +
jge loc_1007633  +
jmp loc_1007FF7  +
test edi edi +
jl loc_1005B02  +
jmp loc_1005AC4  +
cmp byte ptr [esi+15h] 0 +
lea eax [esi+20h] +
mov [ebp-18h] eax +
jz loc_1005AC4  +
jmp loc_100800B  +
***
mov edi edi +
push esi  +
call sub_1004A5D  +
mov esi eax +
test esi esi +
jl loc_1007660  +
call sub_1007669  +
mov eax esi +
pop esi  +
retn   +
***
call sub_1001448  +
xor eax eax +
mov [ebp-10h] eax +
mov esi ds:ExpandEnvironmentStringsW +
push eax  +
push eax  +
mov edi offset aPathext +
push edi  +
mov [ebp-4] eax +
call esi  +
mov ebx eax +
test ebx ebx +
jz loc_100FF0C  +
xor ecx ecx +
push 2  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_1001502  +
pop ecx  +
push eax  +
lea ecx [ebp-10h] +
call sub_100BF79  +
push ebx  +
push dword ptr [ebp-10h]  +
push edi  +
call esi  +
test eax eax +
jz loc_1007779  +
mov ebx ds:wcschr +
push 25h  +
push dword ptr [ebp-10h]  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1007779  +
mov esi [ebp-10h] +
cmp word ptr [esi] 2Eh +
jnz loc_100FF12  +
and dword_10220D0 0 +
push 3Bh  +
push esi  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100779C  +
sub eax esi +
sar eax 1 +
mov [ebp-14h] eax +
lea eax [ebp-18h] +
push eax  +
push 1  +
push dword ptr [ebp-14h]  +
call sub_10045E5  +
test eax eax +
jl loc_1007779  +
mov eax [ebp-18h] +
xor ecx ecx +
push 2  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_1001502  +
mov edi eax +
pop ecx  +
test edi edi +
jz loc_1007779  +
push dword ptr [ebp-14h]  +
push esi  +
push dword ptr [ebp-18h]  +
push edi  +
call sub_1004499  +
test eax eax +
jl loc_100FF18  +
mov eax dword_10220D0 +
inc dword_10220D0  +
push 2Eh  +
add esi 2 +
push esi  +
mov off_1022570[eax*4] edi +
call ebx  +
mov esi eax +
pop ecx  +
pop ecx  +
test esi esi +
jz loc_1007779  +
cmp dword_10220D0 64h +
jb loc_10076EF  +
push dword ptr [ebp-10h]  +
call sub_10014D2  +
pop ecx  +
call sub_100165F  +
retn   +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10077A1  +
sub eax edx +
jmp loc_1007700  +
***
call sub_100431E  +
mov eax offset RegCloseKey +
jmp $+2  +
push ecx  +
push edx  +
push eax  +
push offset ADVAPI32_dll_import_table  +
call sub_1005DD1  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov eax offset PathIsDirectoryW +
jmp $+2  +
push ecx  +
push edx  +
push eax  +
push offset SHLWAPI_dll_import_table  +
call sub_1005DD1  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov eax offset __imp_GetUserNameExW +
jmp $+2  +
push ecx  +
push edx  +
push eax  +
push offset SspiCli_dll_import_table  +
call sub_1005DD1  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov eax offset __imp_CreateXmlReader +
jmp $+2  +
push ecx  +
push edx  +
push eax  +
push offset XmlLite_dll_import_table  +
call sub_1005DD1  +
pop edx  +
pop ecx  +
jmp eax  +
***
push 8  +
pop ecx  +
push dword ptr [ebx]  +
lea esi [ebp-50h] +
lea edi [ebp-30h] +
movs   +
call sub_100BF9A  +
mov esi [ebp-64h] +
mov ecx [esi+18h] +
cmp [ecx+0Ch] eax +
jnz loc_1010A86  +
jmp loc_1010A91  +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_1007860  +
test byte ptr [eax+1Ch] 8 +
jnz loc_1010CDA  +
jmp loc_1007860  +
***
call sub_1001448  +
mov esi ecx +
mov [ebp-10h] esi +
xor edi edi +
mov [esi] edi +
push offset aSoftwareMicr_0  +
lea ecx [esi+10h] +
mov [ebp-4] edi +
mov [esi+4] edi +
mov [esi+8] edi +
mov [esi+0Ch] edi +
call sub_1004BF9  +
lea ecx [esi+14h] +
mov byte ptr [ebp-4] 1 +
call sub_100C01C  +
jmp loc_1010D64  +
***
pop ecx  +
mov eax esi +
call sub_100165F  +
retn   +
***
call sub_1001448  +
mov esi ecx +
mov [ebp-14h] esi +
mov dword ptr [esi+4] offset off_1007B94 +
xor edi edi +
mov dword ptr [esi] offset off_1001800 +
mov dword ptr [esi+4] offset off_10027BC +
mov [esi+8] edi +
mov [ebp-4] edi +
mov [esi+0Ch] edi +
mov [esi+10h] edi +
mov [esi+14h] edi +
lea ebx [esi+18h] +
mov [ebx] edi +
mov [esi+1Ch] edi +
mov [esi+20h] edi +
lea eax [esi+40h] +
push eax  +
lea ecx [esi+24h] +
mov byte ptr [ebp-4] 6 +
call sub_1004260  +
mov [esi+40h] edi +
lea ecx [esi+78h] +
mov byte ptr [ebp-4] 8 +
mov [esi+74h] edi +
call sub_100A5B2  +
push edi  +
xor eax eax +
push edi  +
mov [esi+88h] ax +
mov al [ebp+0Ch] +
push edi  +
push edi  +
mov byte ptr [ebp-4] 9 +
mov [esi+84h] edi +
mov [esi+8Ch] edi +
mov [esi+90h] al +
call ds:CreateEventW  +
push eax  +
mov ecx ebx +
call sub_1007BA5  +
cmp [ebx] edi +
jz loc_100CD60  +
mov ebx ds:CreateEventW +
push edi  +
push edi  +
push 1  +
push edi  +
call ebx  +
push eax  +
lea ecx [esi+1Ch] +
call sub_1007BA5  +
cmp [esi+1Ch] edi +
jz loc_100CD78  +
push edi  +
push 1  +
push 1  +
push edi  +
call ebx  +
lea ebx [esi+20h] +
push eax  +
mov ecx ebx +
call sub_1007BA5  +
cmp [ebx] edi +
jz loc_100CD7C  +
push edi  +
push edi  +
push edi  +
call ds:CreateWaitableTimerW  +
lea ebx [esi+10h] +
push eax  +
mov ecx ebx +
call sub_1007BA5  +
cmp [ebx] edi +
jz loc_100CD80  +
push edi  +
push edi  +
push edi  +
call ds:CreateWaitableTimerW  +
lea ebx [esi+14h] +
push eax  +
mov ecx ebx +
call sub_1007BA5  +
cmp [ebx] edi +
jz loc_100CD95  +
mov ebx ds:InitializeCriticalSection +
lea eax [esi+5Ch] +
push eax  +
call ebx  +
lea eax [esi+44h] +
push eax  +
call ebx  +
push 105h  +
push dword ptr [ebp+8]  +
call sub_100A047  +
mov ebx eax +
inc ebx  +
xor ecx ecx +
push 2  +
pop edx  +
mov eax ebx +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_1001502  +
pop ecx  +
push eax  +
lea ecx [esi+8] +
call sub_100BF79  +
push dword ptr [ebp+8]  +
push ebx  +
push dword ptr [esi+8]  +
call sub_100A0E8  +
lea eax [ebp-10h] +
push eax  +
push edi  +
push 2  +
mov [ebp-10h] edi +
call GetUserNameExW  +
test al al +
jnz loc_100CD99  +
mov eax [ebp-10h] +
xor ecx ecx +
push 2  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_1001502  +
pop ecx  +
lea edi [esi+0Ch] +
push eax  +
mov ecx edi +
call sub_100BF79  +
mov edi [edi] +
lea eax [ebp-10h] +
push eax  +
push edi  +
push 2  +
call GetUserNameExW  +
test al al +
jz loc_100CDAE  +
mov dword_10220DC esi +
mov eax esi +
call sub_100165F  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1002965  +
mov eax [ebp+arg_0] +
mov [esi] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov [ebp+var_4] edi +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_1007BEA  +
test dword ptr [eax+1Ch] 100h +
jnz loc_100DE1A  +
lea esi [edi+20h] +
push esi  +
mov ecx edi +
call sub_1007C4E  +
xor ebx ebx +
cmp eax ebx +
jl loc_1007C36  +
mov ecx [ebp+arg_0] +
xor eax eax +
mov [ecx] ax +
cmp [esi] ebx +
jbe loc_1007C34  +
mov eax [edi+24h] +
movzx edx word ptr [eax+ebx*2] +
cmp dx 30h +
jb loc_1007C42  +
cmp dx 39h +
ja loc_1007C42  +
movzx eax word ptr [ecx] +
movzx edi ax +
imul eax eax +
lea eax [eax+edx-30h] +
mov [ecx] ax +
cmp ax di +
jb loc_1007C42  +
inc ebx  +
cmp ebx [esi] +
jb loc_1007C3D  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
mov edi [ebp+var_4] +
jmp loc_1007C07  +
mov eax 80041318h +
jmp loc_1007C36  +
***
call sub_100431E  +
mov edi [ebp+8] +
mov esi ecx +
mov [ebp-42Ch] esi +
mov [ebp-428h] edi +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_1007C87  +
test dword ptr [eax+1Ch] 100h +
jnz loc_100DC71  +
mov ecx edi +
call sub_10095CF  +
lea edi [esi+1Ch] +
xor ebx ebx +
mov ecx edi +
mov [ebp-41Dh] bl +
call sub_1007E2E  +
mov ecx [eax] +
lea edx [ebp-424h] +
push edx  +
push eax  +
call dword ptr [ecx+1Ch]  +
cmp eax ebx +
jl loc_100DC88  +
mov eax [ebp-424h] +
sub eax ebx +
jz loc_100DC95  +
dec eax  +
jnz loc_1007CE2  +
mov ecx edi +
call sub_1007E2E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+50h]  +
test eax eax +
jnz loc_1007E14  +
mov byte ptr [ebp-41Dh] 1 +
mov [esi+42Ch] bl +
cmp [ebp-41Dh] bl +
jz loc_1007D1B  +
mov ecx edi +
call sub_1007E2E  +
mov ecx [eax] +
lea edx [ebp-424h] +
push edx  +
push eax  +
call dword ptr [ecx+18h]  +
cmp eax ebx +
jl loc_100DC88  +
mov eax [ebp-424h] +
cmp eax 3 +
jnz loc_100DCA6  +
mov byte ptr [ebp-41Eh] 1 +
and byte ptr [ebp-12h] 0FCh +
xor eax eax +
mov [ebp-41Ch] ebx +
mov [ebp-418h] ebx +
mov [ebp-414h] ax +
mov ecx edi +
mov [ebp-4] ebx +
call sub_1007E2E  +
lea ecx [ebp-41Ch] +
mov esi eax +
call sub_10095CF  +
mov eax [esi] +
lea ecx [ebp-41Ch] +
push ecx  +
lea ecx [ebp-418h] +
push ecx  +
push esi  +
call dword ptr [eax+40h]  +
mov esi eax +
cmp esi ebx +
jl loc_100DCEC  +
cmp [ebp-41Eh] bl +
jz loc_1007D8B  +
lea ecx [ebp-41Ch] +
call sub_100AFDE  +
cmp eax ebx +
jl loc_100DD00  +
cmp [ebp-41Ch] ebx +
jz loc_1007DB3  +
mov ecx [ebp-428h] +
lea eax [ebp-41Ch] +
push eax  +
call sub_100AF00  +
cmp eax ebx +
jl loc_100DD00  +
mov [ebp-41Eh] bl +
cmp [ebp-41Dh] bl +
jz loc_1007DEA  +
mov ecx edi +
call sub_1007E2E  +
mov ecx [eax] +
lea edx [ebp-424h] +
push edx  +
push eax  +
call dword ptr [ecx+18h]  +
mov esi eax +
cmp esi ebx +
jl loc_100DCEC  +
mov eax [ebp-424h] +
cmp eax 0Fh +
jnz loc_1007E1E  +
mov [ebp-41Dh] bl +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-41Ch] +
call sub_10095CF  +
cmp [ebp-41Dh] bl +
jnz loc_1007D22  +
mov ecx [ebp-428h] +
call sub_10044E2  +
cmp eax ebx +
jl loc_1007E16  +
xor eax eax +
call sub_1009AF4  +
retn 4  +
cmp eax 3 +
jnz loc_100DCD8  +
jmp loc_1007DEA  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jz loc_100DA19  +
mov eax [esi] +
pop esi  +
retn   +
***
call sub_10055C6  +
mov ecx esi +
call sub_10055C6  +
jmp loc_1008376  +
***
mov ecx esi +
call sub_1015B84  +
mov edi eax +
jmp loc_1005AC4  +
***
mov eax [ebx] +
mov ecx ebx +
call dword ptr [eax+0Ch]  +
test eax eax +
lea eax [esi+20h] +
push eax  +
jz loc_10083A8  +
mov eax [ebx] +
mov ecx ebx +
call dword ptr [eax+0Ch]  +
push eax  +
push edi  +
mov ecx esi +
call sub_1015B11  +
jmp loc_1005B04  +
push dword ptr [ebp+0Ch]  +
jmp loc_100839B  +
***
lea eax [ebp+10h] +
push eax  +
mov ecx esi +
mov dword ptr [ebp+10h] 10003h +
call sub_1008441  +
mov edi eax +
test edi edi +
jl loc_1008143  +
mov eax [ebp+10h] +
mov [esi+430h] eax +
mov [ebp-28h] eax +
lea eax [esi+20h] +
mov [ebp-18h] eax +
jmp loc_1005AC4  +
***
call sub_1001448  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_100846C  +
test dword ptr [eax+1Ch] 100h +
jnz loc_100E181  +
lea ebx [esi+20h] +
push ebx  +
mov ecx esi +
call sub_1007C4E  +
test eax eax +
jl loc_10084DE  +
push dword ptr [ebx]  +
mov eax [esi+24h] +
mov edi ds:wcsncmp +
push offset a1_0  +
push eax  +
call edi  +
add esp 0Ch +
test eax eax +
jz loc_100E198  +
push dword ptr [ebx]  +
mov eax [esi+24h] +
push offset a1_1  +
push eax  +
call edi  +
add esp 0Ch +
test eax eax +
jz loc_100E1A6  +
push dword ptr [ebx]  +
mov eax [esi+24h] +
push offset a1_2  +
push eax  +
call edi  +
add esp 0Ch +
test eax eax +
jnz loc_100E1B4  +
mov eax [ebp+8] +
mov dword ptr [eax] 10002h +
cmp byte ptr [esi+15h] 0 +
jnz loc_100E1DA  +
xor eax eax +
call sub_100165F  +
retn 4  +
***
test eax eax +
jl loc_10084DE  +
jmp loc_10084DC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push 0Ah  +
push 1  +
push offset dword_100B9FC  +
push [ebp+arg_0]  +
call sub_1008533  +
mov eax [ebp+arg_0] +
add esp 10h +
leave   +
retn 4  +
***
call sub_100431E  +
mov esi [ebp+8] +
mov edi [ebp+0Ch] +
lea ecx [esi+50h] +
mov [ebp-5Ch] esi +
mov dword ptr [esi] offset off_10040F4 +
mov byte ptr [esi+48h] 0 +
mov dword ptr [esi+4Ch] 7 +
call sub_10085F9  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+54h] +
call sub_10085F9  +
lea ecx [esi+58h] +
call sub_10085F9  +
lea ecx [esi+5Ch] +
call sub_10085F9  +
mov ebx [ebp+10h] +
mov byte ptr [ebp-4] 3 +
test bl bl +
jz loc_100FD78  +
push ebx  +
call ds:GetSidLengthRequired  +
cmp eax 44h +
ja loc_100FD78  +
push ebx  +
push edi  +
lea eax [ebp-54h] +
push eax  +
call ds:InitializeSid  +
test eax eax +
jz loc_100FD73  +
and dword ptr [ebp-58h] 0 +
movzx ebx bl +
test ebx ebx +
jbe loc_10085DA  +
lea edi [ebp+10h] +
push dword ptr [ebp-58h]  +
lea eax [ebp-54h] +
push eax  +
add edi 4 +
call ds:GetSidSubAuthority  +
inc dword ptr [ebp-58h]  +
mov ecx [edi] +
mov [eax] ecx +
cmp [ebp-58h] ebx +
jb loc_10085BE  +
lea eax [ebp-54h] +
push eax  +
mov ecx esi +
call sub_10048F8  +
mov dword ptr [esi+4Ch] 8 +
mov eax esi +
call sub_1009AF4  +
retn   +
***
mov edi edi +
push esi  +
push offset unk_1022130  +
mov esi ecx +
call sub_1008611  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100EF62  +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
add eax 10h +
mov [esi] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 23Ch +
mov eax dword_10220C8 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi ecx +
mov eax [esi+18h] +
push edi  +
mov [ebp+var_218] esi +
test eax eax +
jz loc_1008716  +
mov eax [eax] +
push 2Eh  +
push eax  +
call ds:wcsrchr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10100F2  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100867C  +
sub eax edx +
sar eax 1 +
cmp eax 1 +
jz loc_100871D  +
mov eax [esi+18h] +
test eax eax +
jz loc_1008722  +
mov eax [eax] +
push 2Eh  +
push eax  +
call ds:wcsrchr  +
mov edi eax +
pop ecx  +
pop ecx  +
test edi edi +
jz loc_100871D  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10086B4  +
sub eax edx +
sar eax 1 +
cmp eax 1 +
jz loc_100871D  +
inc edi  +
inc edi  +
push edi  +
mov [ebp+var_214] edi +
call sub_1004ADE  +
test al al +
jnz loc_10101C1  +
push edi  +
call sub_1004AC1  +
test al al +
jnz loc_1008706  +
push edi  +
call sub_1006164  +
test al al +
jz loc_10101F9  +
push offset aC  +
push offset Dst  +
mov ecx esi +
call sub_1008737  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1001FD0  +
leave   +
retn   +
xor eax eax +
jmp loc_1008666  +
xor eax eax +
inc eax  +
jmp loc_1008708  +
xor eax eax +
jmp loc_10086A0  +
***
call sub_1001448  +
mov esi ecx +
call sub_1006117  +
lea ecx [esi+18h] +
lea edi [esi+1Ch] +
mov [ebp-0Dh] al +
mov [ebp-14h] edi +
mov [ebp-18h] ecx +
call sub_1001B0E  +
mov ecx edi +
mov esi eax +
call sub_1001B0E  +
mov ebx [ebp+0Ch] +
lea edi [esi+eax+3] +
xor esi esi +
cmp ebx esi +
jz loc_100878B  +
mov eax ebx +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx si +
jnz loc_1008779  +
sub eax edx +
sar eax 1 +
lea edi [edi+eax+1] +
cmp byte ptr [ebp-0Dh] 0 +
jnz loc_101003D  +
push edi  +
lea ecx [ebp-1Ch] +
call sub_100467F  +
push esi  +
push dword ptr [ebp-1Ch]  +
lea ecx [ebp+0Ch] +
mov [ebp-4] esi +
call sub_100632A  +
inc edi  +
mov [ebp-1Ch] esi +
cmp ebx esi +
mov esi [ebp+0Ch] +
mov byte ptr [ebp-4] 1 +
jz loc_1010044  +
test esi esi +
jz loc_1008896  +
mov eax [esi] +
push ebx  +
push edi  +
push eax  +
call sub_100A10F  +
test esi esi +
jz loc_100889D  +
mov eax [esi] +
push offset dword_10041C0  +
push edi  +
push eax  +
call sub_10088C2  +
test ebx ebx +
jz loc_10087FA  +
push ebx  +
call sub_1004B09  +
test al al +
jz loc_1010058  +
cmp byte ptr [ebp-0Dh] 0 +
jnz loc_1010083  +
mov ebx offset dword_10041BC +
test esi esi +
jz loc_10088A4  +
mov eax [esi] +
push ebx  +
push edi  +
push eax  +
call sub_10088C2  +
mov eax [ebp-18h] +
mov eax [eax] +
test eax eax +
jz loc_10088AB  +
mov eax [eax] +
test esi esi +
jz loc_10088B2  +
mov ecx [esi] +
push eax  +
push edi  +
push ecx  +
call sub_10088C2  +
test esi esi +
jz loc_10088B9  +
mov eax [esi] +
push ebx  +
push edi  +
push eax  +
call sub_10088C2  +
mov ecx [ebp-14h] +
call sub_1001B0E  +
test eax eax +
jnz loc_101009F  +
cmp byte ptr [ebp-0Dh] 0 +
jnz loc_10100DB  +
mov ecx [ebp-14h] +
lea eax [ebp+0Ch] +
push eax  +
call sub_10060E1  +
push dword ptr [ebp+8]  +
mov ecx [ebp-18h] +
call sub_1004635  +
test esi esi +
jz loc_1008886  +
mov ecx esi +
call sub_1001A04  +
push 0  +
call ds:SysFreeString  +
call sub_100165F  +
retn 8  +
xor eax eax +
jmp loc_10087CA  +
xor eax eax +
jmp loc_10087DC  +
xor eax eax +
jmp loc_1008813  +
xor eax eax +
jmp loc_100882A  +
xor ecx ecx +
jmp loc_1008834  +
xor eax eax +
jmp loc_1008842  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
push ebx  +
xor eax eax +
push esi  +
mov esi 7FFFFFFFh +
test edx edx +
jz loc_100890E  +
cmp edx esi +
ja loc_100890E  +
mov ebx [ebp+arg_0] +
test eax eax +
jl loc_1008915  +
push edi  +
lea edi [ebp+arg_0] +
mov eax ebx +
call sub_100A0AB  +
mov ecx [ebp+arg_0] +
pop edi  +
test eax eax +
jl loc_1008908  +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_8] +
push esi  +
sub edx ecx +
push 0  +
lea ecx [ebx+ecx*2] +
call sub_100891E  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
mov eax 80070057h +
jmp loc_10088DB  +
xor ecx ecx +
jmp loc_10088F1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_100896A  +
cmp [ebp+arg_4] eax +
jz loc_100894F  +
movzx edx word ptr [ebx] +
test dx dx +
jz loc_100894F  +
mov [ecx] dx +
inc ecx  +
inc ecx  +
inc ebx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_1008932  +
test esi esi +
jz loc_100896A  +
xor edx edx +
mov [ecx] dx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jnz loc_1010899  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
dec ecx  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
jmp loc_1008953  +
***
push ebp  +
mov ebp esp +
sub esp 18h +
mov edx [ecx+14h] +
and dword ptr [ebp-10h] 0 +
push esi  +
xor esi esi +
push 4  +
pop eax  +
inc esi  +
mov [ebp-18h] ecx +
mov [ebp-14h] edx +
cmp edx eax +
ja loc_100FE47  +
push ebx  +
push edi  +
lea ebx [esi-1] +
mov [ebp-8] ebx +
cmp ebx [ebp-14h] +
jnb loc_1008A11  +
lea edi [ecx+10h] +
sub ebx esi +
push dword ptr [ebp-8]  +
mov ecx edi +
call sub_1008A40  +
push eax  +
lea ecx [ebp-10h] +
call sub_1004A2E  +
mov eax [ebp-8] +
mov [ebp-4] eax +
cmp eax esi +
jb loc_10089ED  +
mov [ebp-0Ch] ebx +
push dword ptr [ebp-0Ch]  +
mov ecx edi +
call sub_1008A40  +
push dword ptr [ebp-10h]  +
mov eax [eax] +
push eax  +
call sub_1004997  +
cmp eax 0FFFFFFFFh +
jz loc_100FE57  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp-4]  +
mov ecx edi +
call sub_1008A40  +
mov ecx eax +
call sub_1004A2E  +
inc dword ptr [ebp-8]  +
mov eax [ebp-8] +
inc ebx  +
cmp eax [ebp-14h] +
jb loc_10089AF  +
mov ecx [ebp-18h] +
mov eax esi +
push 3  +
xor edx edx +
pop esi  +
div  esi +
mov esi eax +
test esi esi +
ja loc_100899F  +
pop edi  +
pop ebx  +
lea ecx [ebp-10h] +
call sub_1006446  +
pop esi  +
leave   +
retn   +
***
test esi esi +
ja loc_100899D  +
jmp loc_1008A26  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax [ecx+4] +
jnb loc_100FE2C  +
mov ecx [ecx] +
lea eax [ecx+eax*4] +
pop ebp  +
retn 4  +
***
call sub_1001448  +
mov esi ecx +
mov [ebp-10h] esi +
xor edi edi +
mov [esi] edi +
mov [ebp-4] edi +
mov [esi+4] edi +
mov [esi+8] edi +
mov [esi+0Ch] edi +
mov [esi+10h] edi +
mov [esi+24h] edi +
mov [esi+28h] edi +
mov [esi+2Ch] edi +
mov [esi+30h] edi +
mov [esi+34h] edi +
mov [esi+38h] edi +
mov [esi+3Ch] edi +
mov [esi+40h] edi +
mov [esi+44h] edi +
mov [esi+48h] edi +
lea ecx [esi+4Ch] +
push edi  +
mov byte ptr [ebp-4] 0Eh +
call sub_1008ADE  +
lea ecx [esi+5Ch] +
push edi  +
mov byte ptr [ebp-4] 0Fh +
call sub_1008ADE  +
push edi  +
lea ecx [esi+6Ch] +
mov byte ptr [ebp-4] 10h +
call sub_1008ADE  +
mov [esi+7Ch] edi +
mov [esi+80h] edi +
mov eax esi +
call sub_100165F  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor eax eax +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] eax +
cmp edi eax +
jnz loc_1010F2F  +
xor al al +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100431E  +
mov eax [ebp+8] +
mov edi [ebp+0Ch] +
mov esi ecx +
mov [ebp-0B0h] eax +
lea eax [esi+0Ch] +
xor ebx ebx +
push eax  +
lea ecx [ebp-0B8h] +
mov [ebp-0A8h] ebx +
call sub_1001B5E  +
push 0F0h  +
mov [ebp-4] ebx +
mov dword ptr [esi+24h] 2 +
call sub_100150F  +
pop ecx  +
mov [ebp-0B4h] eax +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_1008D10  +
mov ecx [ebp-0B0h] +
call sub_100460A  +
push eax  +
lea ecx [ebp-0A4h] +
call sub_100997E  +
push dword ptr [ebp+10h]  +
mov ecx [ebp-0B4h] +
push edi  +
push dword ptr [esi+3Ch]  +
lea eax [ebp-0A4h] +
push eax  +
mov byte ptr [ebp-4] 2 +
mov dword ptr [ebp-0A8h] 1 +
call sub_1009338  +
lea edi [esi+38h] +
push eax  +
mov ecx edi +
mov dword ptr [ebp-4] 3 +
call sub_1009947  +
test byte ptr [ebp-0A8h] 1 +
mov [ebp-4] ebx +
jz loc_1008BD0  +
mov ecx [ebp-0A4h] +
cmp ecx ebx +
jz loc_1008BD0  +
call sub_1001A04  +
cmp [edi] ebx +
jz loc_100C2B9  +
mov [ebp-0A0h] ebx +
push ebx  +
push ebx  +
lea eax [ebp-0A0h] +
push eax  +
push ebx  +
push ebx  +
push dword ptr [ebp-0B0h]  +
mov byte ptr [ebp-4] 4 +
call sub_1004BEE  +
mov ecx eax +
call sub_10077B7  +
cmp eax ebx +
mov [ebp-0A4h] eax +
jl loc_100C2C3  +
cmp [edi] ebx +
jz loc_100C2DA  +
mov [ebp-0ACh] ebx +
lea eax [ebp-0ACh] +
push eax  +
push dword ptr [ebp-0A0h]  +
mov byte ptr [ebp-4] 5 +
call sub_1009BB5  +
cmp eax ebx +
mov [ebp-0A4h] eax +
jl loc_100C2E8  +
cmp [edi] ebx +
jz loc_100C2FE  +
push 434h  +
call sub_100150F  +
pop ecx  +
cmp eax ebx +
jz loc_1008D17  +
push ebx  +
lea ecx [ebp-0ACh] +
push ecx  +
mov ecx eax +
call sub_10099FC  +
push eax  +
lea ecx [ebp-0A8h] +
call sub_1004CB1  +
push edi  +
lea ecx [ebp-9Ch] +
mov byte ptr [ebp-4] 6 +
call sub_1005F35  +
mov ecx [ebp-0A8h] +
lea eax [ebp-9Ch] +
push eax  +
mov byte ptr [ebp-4] 7 +
call sub_1006702  +
cmp eax ebx +
mov [ebp-0A4h] eax +
mov byte ptr [ebp-4] 6 +
lea ecx [ebp-9Ch] +
jl loc_100C314  +
cmp [edi] ebx +
jz loc_100C32E  +
mov dword ptr [esi+24h] 3 +
call sub_1008D23  +
mov ecx [ebp-0A8h] +
mov byte ptr [ebp-4] 5 +
cmp ecx ebx +
jz loc_1008CDA  +
call sub_1001AA5  +
mov eax [ebp-0ACh] +
mov byte ptr [ebp-4] 4 +
cmp eax ebx +
jz loc_1008CEE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push dword ptr [ebp-0A0h]  +
call sub_10014D2  +
pop ecx  +
push dword ptr [ebp-0B8h]  +
call ds:LeaveCriticalSection  +
mov eax ebx +
call sub_1009AF4  +
retn 0Ch  +
xor eax eax +
jmp loc_1008BA3  +
xor eax eax +
jmp loc_1008C69  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+8] +
call sub_1008D3E  +
lea ecx [esi+4] +
pop esi  +
jmp sub_1001B20  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+80h] +
call sub_10019E8  +
lea ecx [esi+7Ch] +
call sub_10019E8  +
lea ecx [esi+6Ch] +
call sub_1008DEB  +
lea ecx [esi+5Ch] +
call sub_1008DEB  +
lea ecx [esi+4Ch] +
call sub_1008DEB  +
lea ecx [esi+48h] +
call sub_10019E8  +
lea ecx [esi+44h] +
call sub_10019E8  +
lea ecx [esi+40h] +
call sub_10019E8  +
lea ecx [esi+3Ch] +
call sub_10019E8  +
lea ecx [esi+38h] +
call sub_10019E8  +
lea ecx [esi+34h] +
call sub_10019E8  +
lea ecx [esi+30h] +
call sub_10019E8  +
lea ecx [esi+2Ch] +
call sub_10019E8  +
lea ecx [esi+28h] +
call sub_10019E8  +
lea ecx [esi+24h] +
call sub_10019E8  +
lea ecx [esi+10h] +
call sub_10019E8  +
lea ecx [esi+0Ch] +
call sub_10019E8  +
lea ecx [esi+8] +
call sub_10019E8  +
lea ecx [esi+4] +
call sub_10019E8  +
mov ecx esi +
pop esi  +
jmp sub_10019E8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
test eax eax +
jnz loc_100C2A1  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
and dword ptr [esi+0Ch] 0 +
pop esi  +
retn   +
***
call sub_1001448  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1004552  +
push dword ptr [ebp+10h]  +
and dword ptr [ebp-4] 0 +
lea edi [esi+18h] +
mov ecx edi +
mov dword ptr [esi] offset off_1001AC0 +
call sub_1008E84  +
push dword ptr [ebp+14h]  +
lea ecx [esi+1Ch] +
call sub_1008E84  +
push dword ptr [ebp+18h]  +
lea ecx [esi+20h] +
call sub_1008E84  +
and dword ptr [esi+24h] 0 +
and dword ptr [esi+28h] 0 +
mov ecx edi +
mov byte ptr [ebp-4] 3 +
call sub_1001B0E  +
cmp eax 104h +
ja loc_100FFD7  +
mov eax esi +
call sub_100165F  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push esi  +
mov esi ecx +
mov [esi] eax +
test eax eax +
jz loc_1008EA1  +
add eax 8 +
push eax  +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_10097F8 +
call sub_1008EE2  +
mov eax [ebp+arg_4] +
and dword ptr [esi+6Ch] 0 +
mov [esi+64h] eax +
mov al [ebp+arg_8] +
mov [esi+68h] al +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
call sub_1001448  +
mov esi ecx +
mov [ebp-10h] esi +
mov edi [ebp+8] +
mov dword ptr [esi] offset off_10040F4 +
mov al [edi+48h] +
mov [esi+48h] al +
mov eax [edi+4Ch] +
mov [esi+4Ch] eax +
lea eax [edi+50h] +
push eax  +
lea ecx [esi+50h] +
call sub_1008F82  +
and dword ptr [ebp-4] 0 +
lea eax [edi+54h] +
push eax  +
lea ecx [esi+54h] +
call sub_1008F82  +
lea eax [edi+58h] +
push eax  +
lea ecx [esi+58h] +
mov byte ptr [ebp-4] 1 +
call sub_1008F82  +
lea ecx [esi+5Ch] +
call sub_10085F9  +
cmp byte ptr [edi+48h] 0 +
mov byte ptr [ebp-4] 3 +
jz loc_1008F73  +
mov ecx edi +
call sub_100B7C6  +
test al al +
jz loc_100FDE9  +
add edi 4 +
push edi  +
call ds:GetLengthSid  +
push edi  +
lea ecx [esi+4] +
push ecx  +
push eax  +
call ds:CopySid  +
test eax eax +
jz loc_100FDF3  +
mov eax esi +
call sub_100165F  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1008F9E  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push esi  +
sub eax 10h +
push eax  +
mov esi ecx +
call sub_1008FC6  +
add eax 10h +
mov [esi] eax +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov ecx [esi] +
mov eax [ecx] +
push edi  +
call dword ptr [eax+10h]  +
lea edx [esi+0Ch] +
cmp dword ptr [edx] 0 +
jl loc_100FD25  +
cmp eax [esi] +
jnz loc_100FD25  +
xor eax eax +
mov edi esi +
inc eax  +
xadd [edx] eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 81Ch +
mov eax dword_10220C8 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+20h] +
mov ecx edi +
mov [ebp+var_814] edi +
call sub_1001B0E  +
mov ebx 105h +
test eax eax +
jnz loc_1010271  +
lea edi [esi+18h] +
mov eax [edi] +
mov [ebp+var_810] edi +
test eax eax +
jz loc_100919B  +
mov eax [eax] +
push 25h  +
push eax  +
call ds:wcschr  +
pop ecx  +
pop ecx  +
test eax eax +
jnz sub_10102A5  +
lea edi [esi+1Ch] +
mov ecx edi +
mov [ebp+var_818] edi +
call sub_1001B0E  +
test eax eax +
jnz loc_10102BA  +
mov ecx esi +
call sub_1004B2F  +
mov ecx esi +
call sub_100863A  +
test eax eax +
jl loc_1009182  +
xor eax eax +
and [ebp+var_C] eax +
lea edi [ebp+var_8] +
stos   +
mov [ebp+Dst] ax +
mov eax [ebp+var_810] +
mov eax [eax] +
xor edi edi +
cmp eax edi +
jz loc_10091B6  +
mov eax [eax] +
push edi  +
push edi  +
push edi  +
push edi  +
mov esi 400h +
push esi  +
lea ecx [ebp+Dst] +
push ecx  +
push 4  +
lea ecx [ebp+var_C] +
push ecx  +
push eax  +
call _wsplitpath_s  +
add esp 24h +
cmp eax edi +
jnz loc_10102F2  +
lea eax [ebp+Dst] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx di +
jnz loc_10090E1  +
sub eax edx +
sar eax 1 +
jz loc_1010307  +
mov edi [ebp+var_810] +
mov eax [edi] +
test eax eax +
jz loc_10091BD  +
mov eax [eax] +
push 20h  +
push eax  +
call ds:wcschr  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_10103E9  +
mov eax [edi] +
test eax eax +
jz loc_10091CD  +
mov eax [eax] +
push eax  +
push esi  +
lea eax [ebp+Dst] +
push eax  +
call sub_100A10F  +
push offset dword_10041C0  +
push esi  +
lea eax [ebp+Dst] +
push eax  +
call sub_10088C2  +
mov esi eax +
test esi esi +
jl loc_1009180  +
push [ebp+var_818]  +
lea eax [ebp+Dst] +
push eax  +
lea eax [ebp+var_814] +
push eax  +
call sub_10091D9  +
mov ecx [ebp+var_818] +
push eax  +
call sub_10060E1  +
mov ecx [ebp+var_814] +
test ecx ecx +
jz loc_1009180  +
call sub_1001A04  +
mov eax esi +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001FD0  +
leave   +
retn   +
test eax eax +
jge loc_1009036  +
jmp loc_1009182  +
xor eax eax +
jmp loc_100904B  +
test eax eax +
jge loc_100905E  +
jmp loc_1009182  +
test eax eax +
jge loc_1009076  +
jmp loc_1009182  +
xor eax eax +
jmp loc_10090B0  +
xor eax eax +
jmp loc_1009107  +
test eax eax +
jl loc_1009182  +
jmp loc_1009134  +
xor eax eax +
jmp loc_1009126  +
***
call sub_1001448  +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-10h] 0 +
push dword ptr [ebp+0Ch]  +
mov ecx [ebp+8] +
call sub_100997E  +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
and dword ptr [ebp-4] 0 +
mov dword ptr [ebp-10h] 1 +
call sub_100921E  +
mov eax [ebp+8] +
call sub_100165F  +
retn 0Ch  +
***
call sub_1001448  +
mov esi ecx +
push 0Ch  +
call sub_100150F  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor edi edi +
mov [ebp-4] edi +
cmp ecx edi +
jz loc_100924D  +
push dword ptr [ebp+8]  +
push esi  +
call sub_1009265  +
mov edi eax +
mov ecx esi +
call sub_10019E8  +
mov [esi] edi +
mov eax esi +
call sub_100165F  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx [ebp+len] +
push esi  +
mov esi ecx +
and dword ptr [esi+4] 0 +
push edi  +
mov ecx ebx +
mov dword ptr [esi+8] 1 +
call sub_1001B0E  +
mov ecx [ebp+arg_4] +
mov edi eax +
call sub_1001B0E  +
lea ecx [ebp+len] +
push ecx  +
push eax  +
push edi  +
mov [ebp+var_4] eax +
call sub_10045E5  +
test eax eax +
jl loc_100EE6C  +
mov eax [ebp+len] +
push 2  +
pop ecx  +
mul  ecx +
lea ecx [ebp+len] +
push ecx  +
push edx  +
push eax  +
call sub_10045B8  +
test eax eax +
jl loc_100EE6C  +
push [ebp+len]  +
push 0  +
call ds:SysAllocStringByteLen  +
mov [esi] eax +
test eax eax +
jz loc_100EE7B  +
mov eax [ebx] +
test eax eax +
jz loc_1009320  +
mov eax [eax] +
test eax eax +
jz loc_10092F1  +
lea ecx [edi+edi+2] +
push ecx  +
push eax  +
push dword ptr [esi]  +
call memcpy  +
add esp 0Ch +
mov eax [ebp+arg_4] +
mov eax [eax] +
test eax eax +
jz loc_1009324  +
mov eax [eax] +
test eax eax +
jz loc_1009317  +
mov ecx [ebp+var_4] +
lea ecx [ecx+ecx+2] +
push ecx  +
push eax  +
mov eax [esi] +
lea eax [eax+edi*2] +
push eax  +
call memcpy  +
add esp 0Ch +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
xor eax eax +
jmp loc_10092DD  +
xor eax eax +
jmp loc_10092FC  +
***
call sub_1001448  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1009405  +
push 7  +
pop eax  +
xor edi edi +
mov [esi+0ECh] ax +
mov al [ebp+14h] +
push 80h  +
mov [esi+0EEh] al +
lea eax [esi+50h] +
push edi  +
push eax  +
mov [ebp-4] edi +
mov dword ptr [esi] offset off_1001914 +
mov [esi+0D0h] edi +
mov [esi+0D4h] edi +
mov byte ptr [esi+0D8h] 1 +
mov [esi+0DCh] edi +
mov [esi+0E0h] edi +
mov [esi+0E4h] edi +
mov [esi+0E8h] edi +
call memset  +
add esp 0Ch +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_10093C8  +
test byte ptr [eax+1Ch] 4 +
jnz loc_100FA55  +
mov ebx ds:CreateEventW +
push edi  +
push edi  +
push edi  +
push edi  +
call ebx  +
mov [esi+0DCh] eax +
cmp eax edi +
jz loc_100FA7B  +
push edi  +
push edi  +
push edi  +
push edi  +
call ebx  +
mov [esi+0E0h] eax +
cmp eax edi +
jz loc_100FA91  +
mov eax esi +
call sub_100165F  +
retn 10h  +
***
call sub_1001448  +
mov ebx ecx +
mov [ebp-10h] ebx +
push dword ptr [ebp+8]  +
lea ecx [ebx+4] +
mov dword ptr [ebx] offset off_1001900 +
call sub_1008E84  +
xor eax eax +
push eax  +
lea ecx [ebx+0Ch] +
mov [ebp-4] eax +
mov [ebx+8] eax +
call sub_1009EFA  +
mov eax [ebp+0Ch] +
push dword ptr [ebp+10h]  +
mov dword ptr [ebx+24h] 1 +
mov byte ptr [ebx+28h] 0 +
lea edi [ebx+2Ch] +
mov esi offset dword_100A950 +
movs   +
movs   +
movs   +
movs   +
lea ecx [ebx+40h] +
mov byte ptr [ebp-4] 1 +
mov [ebx+3Ch] eax +
call sub_100B556  +
lea esi [ebx+4Ch] +
xor eax eax +
mov [esi] eax +
lea ecx [ebp+8] +
push ecx  +
push eax  +
push 2  +
mov byte ptr [ebp-4] 3 +
mov [ebp+8] eax +
call GetUserNameExW  +
test al al +
jnz loc_100FA28  +
mov eax [ebp+8] +
xor ecx ecx +
push 2  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_1001502  +
pop ecx  +
push eax  +
mov ecx esi +
call sub_100BF79  +
mov esi [esi] +
lea eax [ebp+8] +
push eax  +
push esi  +
push 2  +
call GetUserNameExW  +
test al al +
jz loc_100FA40  +
mov eax ebx +
call sub_100165F  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+8]  +
mov esi ecx +
lea eax [esi+1Ch] +
push eax  +
call sub_1009502  +
push dword ptr [ebp+8]  +
add esi 20h +
push esi  +
call sub_1009502  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001448  +
mov esi [ebp+8] +
mov ecx esi +
call sub_1001B0E  +
xor edi edi +
mov [ebp-3Ch] eax +
cmp eax edi +
jnz loc_101068C  +
xor eax eax +
call sub_100165F  +
retn 8  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100957F  +
test byte ptr [ebp+8] 1 +
jz loc_1009573  +
push esi  +
call sub_10014DF  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+8] +
mov dword ptr [esi] offset off_1009550 +
test ecx ecx +
jnz loc_100C28A  +
lea ecx [esi+20h] +
call sub_10095CF  +
mov eax [esi+1Ch] +
test eax eax +
jz loc_10095AA  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+10h] +
test eax eax +
jz loc_10095B7  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+0Ch] +
test eax eax +
jnz loc_100C296  +
mov dword ptr [esi] offset off_10018DC +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+40Ah] +
test byte ptr [edi] 1 +
jnz loc_100C179  +
and byte ptr [edi] 0FCh +
and dword ptr [esi] 0 +
and dword ptr [esi+4] 0 +
xor eax eax +
pop edi  +
mov [esi+8] ax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
inc dword ptr [eax+4]  +
mov eax [eax+4] +
pop ebp  +
retn 4  +
***
mov eax ecx +
xor ecx ecx +
mov dword ptr [eax] offset off_10018DC +
mov [eax+4] ecx +
mov dword ptr [eax] offset off_1009680 +
mov dword ptr [eax+8] 412110h +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov dword ptr [eax+18h] 15h +
mov [eax+1Ch] ecx +
mov [eax+20h] ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10096AF  +
test byte ptr [ebp+8] 1 +
jz loc_10096A3  +
push esi  +
call sub_10014DF  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001448  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1009680 +
mov eax [esi+20h] +
and dword ptr [ebp-4] 0 +
test eax eax +
jnz loc_100EF79  +
lea ecx [esi+10h] +
call sub_10096EE  +
mov dword ptr [esi] offset off_10018DC +
call sub_100165F  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
test ecx ecx +
jnz loc_100EE38  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push esi  +
mov esi ecx +
cmp dword ptr [esi+4] 0 +
jz loc_10097BC  +
push edi  +
lea eax [ebp+dwRevision] +
push eax  +
call sub_10097C4  +
mov edi ds:free +
test al al +
jz loc_10097B1  +
test [ebp+dwRevision] 8000h +
jnz loc_10097B1  +
lea eax [ebp+bSaclDefaulted] +
push eax  +
lea eax [ebp+pOwner] +
push eax  +
push dword ptr [esi+4]  +
call ds:GetSecurityDescriptorOwner  +
push [ebp+pOwner]  +
call edi  +
pop ecx  +
lea eax [ebp+bSaclDefaulted] +
push eax  +
lea eax [ebp+pGroup] +
push eax  +
push dword ptr [esi+4]  +
call ds:GetSecurityDescriptorGroup  +
push [ebp+pGroup]  +
call edi  +
pop ecx  +
lea eax [ebp+bSaclDefaulted] +
push eax  +
lea eax [ebp+pDacl] +
push eax  +
lea eax [ebp+bSaclPresent] +
push eax  +
push dword ptr [esi+4]  +
call ds:GetSecurityDescriptorDacl  +
cmp [ebp+bSaclPresent] 0 +
jz loc_1009792  +
push [ebp+pDacl]  +
call edi  +
pop ecx  +
lea eax [ebp+bSaclDefaulted] +
push eax  +
lea eax [ebp+pSacl] +
push eax  +
lea eax [ebp+bSaclPresent] +
push eax  +
push dword ptr [esi+4]  +
call ds:GetSecurityDescriptorSacl  +
cmp [ebp+bSaclPresent] 0 +
jnz loc_100FC21  +
push dword ptr [esi+4]  +
call edi  +
and dword ptr [esi+4] 0 +
pop ecx  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+dwRevision] +
test edx edx +
jz loc_10097F2  +
xor eax eax +
mov [edx] ax +
mov eax [ecx+4] +
test eax eax +
jz loc_10097F2  +
lea ecx [ebp+dwRevision] +
push ecx  +
push edx  +
push eax  +
call ds:GetSecurityDescriptorControl  +
test eax eax +
jz loc_10097F2  +
mov al 1 +
pop ebp  +
retn 4  +
xor al al +
jmp loc_10097EE  +
***
xor al al +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+6Ch] 0 +
jnz loc_1009890  +
mov eax [esi] +
push ebx  +
push edi  +
call dword ptr [eax+8]  +
mov ebx eax +
push ebx  +
call ds:malloc  +
mov edi eax +
pop ecx  +
test edi edi +
jz loc_100FDFB  +
push ebx  +
push 0  +
push edi  +
call memset  +
mov [edi+2] bx +
mov al [esi+68h] +
mov [edi+1] al +
mov eax [esi] +
add esp 0Ch +
mov ecx esi +
call dword ptr [eax+0Ch]  +
mov [edi] al +
mov eax [esi+64h] +
mov [edi+4] eax +
lea eax [esi+8] +
push eax  +
call ds:GetLengthSid  +
push eax  +
lea eax [esi+8] +
push eax  +
add ebx 0FFFFFFF8h +
lea eax [edi+8] +
push ebx  +
push eax  +
call sub_100989A  +
add esp 10h +
mov [esi+6Ch] edi +
pop edi  +
pop ebx  +
mov eax [esi+6Ch] +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call memcpy_s  +
add esp 10h +
push eax  +
call sub_10098C0  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_100EF10  +
pop ebp  +
retn 4  +
***
mov eax ecx +
xor ecx ecx +
mov [eax+4] ecx +
mov [eax+8] cl +
mov dword ptr [eax+0Ch] 2 +
mov dword ptr [eax] offset off_1009900 +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
mov [eax+18h] ecx +
mov [eax+1Ch] ecx +
retn   +
***
mov eax [ecx+14h] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
push dword ptr [eax]  +
call sub_1009947  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1001B20  +
mov ecx [ebp+arg_0] +
mov [esi] ecx +
test ecx ecx +
jz loc_1009962  +
call sub_100996E  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
add ecx 8 +
push ecx  +
call ds:InterlockedIncrement  +
retn   +
***
call sub_1001448  +
mov esi ecx +
push 0Ch  +
call sub_100150F  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_10099C1  +
push dword ptr [ebp+8]  +
call sub_10099CA  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [esi] eax +
test eax eax +
jz loc_100C1AB  +
mov eax esi +
call sub_100165F  +
retn 4  +
xor eax eax +
jmp loc_10099A9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
and dword ptr [esi+4] 0 +
mov dword ptr [esi+8] 1 +
call ds:SysAllocString  +
mov [esi] eax +
test eax eax +
jz loc_100C187  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
mov dword ptr [esi] offset off_10018DC +
xor ebx ebx +
mov [esi+4] ebx +
mov dword ptr [esi] offset off_1009550 +
mov [esi+8] ebx +
lea ecx [esi+10h] +
mov [esi+0Ch] ebx +
call sub_1009A6A  +
mov al [ebp+arg_4] +
mov [esi+15h] al +
mov [esi+14h] bl +
mov dword ptr [esi+18h] offset dword_10221A4 +
mov [esi+1Ch] ebx +
and byte ptr [esi+42Ah] 0FCh +
mov [esi+20h] ebx +
mov [esi+24h] ebx +
xor eax eax +
mov [esi+28h] ax +
mov [esi+42Ch] bl +
mov dword ptr [esi+430h] 10003h +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push esi  +
mov esi ecx +
mov [esi] eax +
test eax eax +
jz loc_1009A83  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100431E  +
lea esi [ebp+8] +
lea edi [ebp-20h] +
movs   +
movs   +
movs   +
mov ebx ecx +
xor eax eax +
movs   +
mov dword ptr [ebx] offset off_10018DC +
mov [ebp-24h] ebx +
mov [ebx+4] eax +
push eax  +
lea ecx [ebx+0Ch] +
mov [ebp-4] eax +
mov dword ptr [ebx] offset off_10018E0 +
mov [ebx+8] eax +
call sub_1009EFA  +
mov eax [ebp+18h] +
lea edi [ebx+28h] +
lea esi [ebp-20h] +
movs   +
movs   +
movs   +
mov dword ptr [ebx+24h] 1 +
movs   +
and dword ptr [ebx+38h] 0 +
mov [ebx+3Ch] eax +
mov eax ebx +
call sub_1009AF4  +
retn 14h  +
***
mov ecx [ebp-10h] +
xor ecx ebp +
call sub_1001FD0  +
jmp sub_100165F  +
***
call sub_1001448  +
mov ebx ecx +
lea eax [ebx+0Ch] +
push eax  +
lea ecx [ebp-14h] +
call sub_1001B5E  +
and dword ptr [ebp-4] 0 +
mov ecx ebx +
call sub_1009B9C  +
test eax eax +
jnz loc_100C1BA  +
mov ecx [ebp+8] +
test ecx ecx +
jz loc_1009B45  +
mov eax [ebx+38h] +
mov [eax+0E8h] ecx +
mov ecx [ebx+38h] +
mov eax [ecx] +
sub esp 10h +
mov edi esp +
lea esi [ebx+28h] +
movs   +
movs   +
movs   +
movs   +
call dword ptr [eax+4]  +
mov edi eax +
xor esi esi +
cmp edi esi +
jl loc_100C1C2  +
mov dword ptr [ebx+24h] 4 +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_1009B82  +
test byte ptr [eax+1Ch] 80h +
jnz loc_100C26E  +
mov esi edi +
push dword ptr [ebp-14h]  +
call ds:LeaveCriticalSection  +
mov eax esi +
call sub_100165F  +
retn 4  +
***
mov eax [ecx+24h] +
cmp eax 5 +
jz loc_1009BAC  +
cmp eax 6 +
jz loc_1009BAC  +
xor eax eax +
retn   +
xor eax eax +
inc eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
cmp [ebp+arg_0] 0 +
jz loc_100E8D3  +
mov eax [ebp+arg_0] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1009BCD  +
sub eax edx +
push esi  +
sar eax 1 +
push 14h  +
mov esi eax +
call sub_100150F  +
pop ecx  +
test eax eax +
jz loc_1009C16  +
push esi  +
push [ebp+arg_0]  +
mov ecx eax +
call sub_1007266  +
mov esi [ebp+arg_4] +
mov [ebp+arg_0] eax +
lea eax [ebp+arg_0] +
push eax  +
mov ecx esi +
call sub_1009C1F  +
cmp dword ptr [esi] 0 +
pop esi  +
jz loc_100E8DD  +
xor eax eax +
leave   +
retn 8  +
xor eax eax +
jmp loc_1009BF5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1009C43  +
test eax eax +
jl loc_100E8BD  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push esi  +
push edi  +
mov edi ecx +
test eax eax +
jz loc_100DE09  +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push offset dword_1009C84  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
mov ecx edi +
test esi esi +
jl loc_100DE02  +
push [ebp+arg_0]  +
call sub_1009C99  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jnz loc_100DA33  +
mov eax [ebp+arg_0] +
mov [esi] eax +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1002917  +
mov eax [ebp+8] +
mov esi ds:HeapSetInformation +
xor edi edi +
push edi  +
push edi  +
push 1  +
push edi  +
mov dword_10220D8 eax +
call esi  +
push edi  +
push edi  +
push 1  +
push hHeap  +
call esi  +
mov esi offset unk_1022178 +
push esi  +
call sub_10041EE  +
push offset aMicrosoftTasks  +
mov dword_10220D4 offset dword_1009DA8 +
mov off_10220C4 esi +
call sub_1007324  +
mov [ebp-18h] edi +
mov eax off_10220C4 +
mov esi offset off_10220C4 +
cmp eax esi +
jz loc_1009D29  +
test byte ptr [eax+1Ch] 80h +
jnz loc_100C5AC  +
mov ebx [ebp+10h] +
cmp ebx edi +
jz loc_1009D9B  +
cmp [ebx] di +
jz loc_1009D9B  +
cmp eax esi +
jz loc_1009D43  +
test byte ptr [eax+1Ch] 80h +
jnz loc_100C5C8  +
mov [ebp-14h] edi +
mov [ebp-4] edi +
call sub_1009DED  +
mov esi ds:wcschr +
push 20h  +
push ebx  +
call esi  +
pop ecx  +
pop ecx  +
cmp eax edi +
jz loc_1009D94  +
lea ecx [eax+2] +
xor edx edx +
push 2  +
mov [eax] dx +
mov [ebp-14h] ecx +
mov eax ecx +
mov [ebp-1Ch] edi +
pop ebx  +
cmp [ebp-1Ch] ebx +
jge loc_10029E9  +
push 3Ah  +
push eax  +
call esi  +
pop ecx  +
pop ecx  +
cmp eax edi +
jz loc_1009D94  +
add eax ebx +
xor ecx ecx +
cmp cx [eax] +
jz loc_1009D94  +
inc dword ptr [ebp-1Ch]  +
jmp loc_1009D72  +
xor eax eax +
jmp loc_1002ABC  +
mov eax 667h +
jmp loc_1002ABC  +
***
call sub_1001448  +
push 20h  +
call sub_100150F  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_1009E81  +
call sub_1009EDC  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx eax +
mov dword_1022110 eax +
call sub_10047BA  +
test eax eax +
jl loc_100C38E  +
push 0  +
push 0  +
call ds:CoInitializeEx  +
test eax eax +
jl loc_100C3A0  +
call sub_1006BF1  +
test eax eax +
jl loc_100C3B2  +
call sub_1006FC7  +
test eax eax +
jl loc_100C3C1  +
call sub_100764D  +
test eax eax +
jl loc_100C3D0  +
call sub_1009E8A  +
test eax eax +
jl loc_100C3DF  +
push 1  +
push 7Fh  +
call ds:SetProcessShutdownParameters  +
call sub_100165F  +
retn   +
xor eax eax +
jmp loc_1009E13  +
***
mov edi edi +
push esi  +
mov esi ds:InterlockedExchange +
push 1  +
push offset Addend  +
call esi  +
push 1  +
push offset Destination  +
call esi  +
push 0  +
push 0  +
push 1  +
push 0  +
call ds:CreateEventW  +
mov esi offset dword_102214C +
push eax  +
mov ecx esi +
call sub_1002B80  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push esi  +
call ds:__imp_InterlockedCompareExchange  +
pop esi  +
test eax eax +
jz loc_100C375  +
xor eax eax +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
xor eax eax +
push eax  +
lea ecx [esi+8] +
mov [esi] eax +
mov [esi+4] eax +
call sub_1009EFA  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push [ebp+dwSpinCount]  +
mov esi ecx +
push esi  +
call ds:InitializeCriticalSectionAndSpinCount  +
test eax eax +
jz loc_1010F9A  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
push 0  +
mov eax offset dword_101D344 +
call sub_1001448  +
mov ebx ecx +
push dword ptr [ebp+0Ch]  +
mov esi [ebp+8] +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
lea ecx [ebp+0Ch] +
movs   +
call sub_1009F73  +
mov eax [ebp+0Ch] +
mov ecx [eax] +
and dword ptr [ebp-4] 0 +
push eax  +
push ecx  +
mov ecx ebx +
call sub_10015C5  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+0Ch] +
call sub_100149E  +
call sub_100165F  +
retn 8  +
***
call sub_100431E  +
mov eax [ebp+18h] +
lea esi [ebp+8] +
lea edi [ebp-20h] +
movs   +
movs   +
movs   +
mov ebx ecx +
and dword ptr [ebx] 0 +
mov [ebp-28h] ebx +
movs   +
mov [ebp-24h] eax +
and dword ptr [ebp-4] 0 +
push 104h  +
push eax  +
call sub_100A047  +
lea eax [eax+eax+2] +
add eax eax +
push eax  +
mov ecx ebx +
call sub_1004DD4  +
mov eax [ebx] +
push dword ptr [ebp-24h]  +
mov dword ptr [eax+18h] 1Ch +
mov edi [ebx] +
add edi 8 +
lea esi [ebp-20h] +
movs   +
movs   +
movs   +
movs   +
mov eax [ebx] +
push dword ptr [eax+18h]  +
mov ecx ebx +
call sub_1009FE7  +
mov eax ebx +
call sub_1009AF4  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx] +
mov eax [ecx] +
sub esp 24h +
push esi  +
mov esi [ebp+arg_0] +
sub eax esi +
cmp eax 2 +
jb loc_1010EFF  +
cmp [ebp+arg_4] 0 +
jz loc_1010F1A  +
push 0  +
lea edx [ebp+arg_0] +
push edx  +
lea edx [ebp+var_4] +
push edx  +
push [ebp+arg_4]  +
shr eax 1 +
push eax  +
add ecx esi +
push ecx  +
call sub_1004E0D  +
test eax eax +
jl loc_1010F1E  +
push 104h  +
push [ebp+arg_4]  +
call sub_100A047  +
lea eax [esi+eax*2+2] +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
lea eax [ebp+arg_4] +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100A072  +
test eax eax +
jl loc_100C75D  +
mov eax [ebp+arg_4] +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_8] +
test eax eax +
jz loc_100A09F  +
mov edx [ebp+arg_4] +
cmp edx 7FFFFFFFh +
ja loc_100A09F  +
call sub_100A0AB  +
test eax eax +
jl loc_100C735  +
pop edi  +
pop ebp  +
retn 0Ch  +
mov eax 80070057h +
jmp loc_100A092  +
***
mov edi edi +
push esi  +
mov esi eax +
xor eax eax +
mov ecx edx +
test edx edx +
jz loc_100A0DC  +
cmp [esi] ax +
jz loc_100A0C2  +
inc esi  +
inc esi  +
dec edx  +
jnz loc_100A0B8  +
test edx edx +
jz loc_100A0DC  +
pop esi  +
test edi edi +
jz nullsub_1  +
test eax eax +
jl loc_100DA3E  +
sub ecx edx +
mov [edi] ecx +
retn   +
mov eax 80070057h +
jmp loc_100A0C6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100A10F  +
test eax eax +
jl loc_100C774  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_100A16D  +
cmp ecx 7FFFFFFFh +
ja loc_100A16D  +
test eax eax +
jl loc_100A169  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_100A174  +
mov edx [ebp+arg_8] +
push edi  +
mov edi 7FFFFFFEh +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_100A15B  +
movzx ecx word ptr [edx+eax] +
test cx cx +
jz loc_100A15B  +
mov [eax] cx +
inc eax  +
inc eax  +
dec esi  +
jnz loc_100A143  +
pop edi  +
test esi esi +
jz loc_100A174  +
xor ecx ecx +
mov [eax] cx +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
mov eax 80070057h +
jmp loc_100A125  +
dec eax  +
dec eax  +
mov ebx 8007007Ah +
jmp loc_100A160  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [ecx] +
add ecx edx +
cmp edx eax +
push esi  +
sbb esi esi +
and esi ecx +
jz loc_100A1AA  +
push 0  +
sub eax edx +
push eax  +
push esi  +
call sub_100A1B6  +
test eax eax +
jnz loc_100C78B  +
***
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_0] +
and [ebp+arg_4] 0 +
shr edx 1 +
test eax eax +
jz loc_100A1EC  +
cmp edx 7FFFFFFFh +
ja loc_100A1EC  +
push edi  +
lea edi [ebp+arg_4] +
call sub_100A0AB  +
pop edi  +
mov ecx [ebp+arg_8] +
test ecx ecx +
jnz loc_100C745  +
pop ebp  +
retn 0Ch  +
mov eax 80070057h +
jmp loc_100A1DD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
push dword ptr [esi+20h]  +
lea eax [esi+4] +
lea edi [esi+24h] +
push eax  +
mov ecx edi +
call sub_1004246  +
push [ebp+lpCriticalSection]  +
mov ecx edi +
mov dword ptr [esi+74h] 1 +
call sub_100A2AB  +
mov ebx eax +
test ebx ebx +
jl loc_100A269  +
mov ecx edi +
call sub_100A277  +
mov ebx eax +
test ebx ebx +
jl loc_100A269  +
lea eax [esi+5Ch] +
push eax  +
lea ecx [ebp+lpCriticalSection] +
call sub_100140F  +
cmp dword ptr [esi+74h] 2 +
jz loc_100A257  +
mov ecx esi +
mov dword ptr [esi+74h] 3 +
call sub_100192D  +
push [ebp+lpCriticalSection]  +
call ds:LeaveCriticalSection  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
mov dword ptr [esi+74h] 4 +
jmp loc_100A260  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+10h] +
mov eax [esi] +
push 0EA60h  +
push eax  +
call ds:WaitForSingleObject  +
xor ebx ebx +
test eax eax +
jnz loc_100D220  +
mov ecx esi +
call sub_1002965  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
retn   +
***
call sub_100431E  +
mov eax [ebp+8] +
mov edi ecx +
xor ebx ebx +
mov [ebp-74h] edi +
mov [ebp-6Ch] eax +
mov [ebp-5Ch] ebx +
mov [ebp-4] ebx +
mov [ebp-64h] ebx +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov byte ptr [ebp-4] 1 +
lea esi [edi+10h] +
call ds:CreateEventW  +
push eax  +
mov ecx esi +
call sub_1007BA5  +
cmp [esi] ebx +
jz loc_100D59B  +
mov eax [edi] +
lea ecx [ebp-64h] +
push ecx  +
push offset riid  +
push edi  +
call dword ptr [eax]  +
mov esi eax +
cmp esi ebx +
jl loc_100A459  +
lea eax [ebp-5Ch] +
push eax  +
xor edi edi +
inc edi  +
push edi  +
push ebx  +
call ds:CreateStreamOnHGlobal  +
mov esi eax +
cmp esi ebx +
jl loc_100A459  +
push edi  +
push ebx  +
push edi  +
push dword ptr [ebp-64h]  +
push offset riid  +
push dword ptr [ebp-5Ch]  +
call ds:CoMarshalInterface  +
mov esi eax +
cmp esi ebx +
jl loc_100A459  +
mov eax [ebp-5Ch] +
mov ecx [eax] +
push edi  +
lea edx [ebp-58h] +
push edx  +
push eax  +
call dword ptr [ecx+30h]  +
cmp eax ebx +
jl loc_100A47A  +
mov [ebp-60h] ebx +
mov eax [ebp-50h] +
mov byte ptr [ebp-4] 2 +
mov [ebp-70h] eax +
cmp [ebp-4Ch] ebx +
jnz loc_100D5B8  +
push eax  +
call sub_1001502  +
pop ecx  +
mov [ebp-68h] eax +
mov eax [ebp-6Ch] +
mov byte ptr [ebp-4] 3 +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx bx +
jnz loc_100A37D  +
sub eax ecx +
sar eax 1 +
lea esi [eax+42h] +
xor ecx ecx +
push 2  +
pop edx  +
mov eax esi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_1001502  +
mov edi eax +
mov [ebp-78h] edi +
mov [esp+20h+var_20] offset aSoftwareMicr_1 +
push esi  +
push edi  +
mov byte ptr [ebp-4] 4 +
call sub_100A10F  +
push offset dword_1003410  +
push esi  +
push edi  +
call sub_10088C2  +
push dword ptr [ebp-6Ch]  +
push esi  +
push edi  +
call sub_10088C2  +
mov eax [ebp-5Ch] +
mov ecx [eax] +
push ebx  +
push ebx  +
push ds:dword_100A484  +
push ds:dword_100A480  +
push eax  +
call dword ptr [ecx+14h]  +
mov eax [ebp-5Ch] +
mov ecx [eax] +
lea edx [ebp-7Ch] +
push edx  +
push dword ptr [ebp-70h]  +
push dword ptr [ebp-68h]  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
cmp esi ebx +
jl loc_100A441  +
lea eax [ebp-60h] +
push eax  +
push 2  +
push ebx  +
push edi  +
push 80000002h  +
call RegOpenKeyExW  +
cmp eax ebx +
jnz loc_100A431  +
push dword ptr [ebp-70h]  +
push dword ptr [ebp-68h]  +
push 3  +
push ebx  +
push offset ValueName  +
push dword ptr [ebp-60h]  +
call RegSetValueExW  +
cmp eax ebx +
jg loc_100D5CA  +
mov esi eax +
cmp esi ebx +
jl loc_100D5D9  +
push edi  +
call sub_10014D2  +
push dword ptr [ebp-68h]  +
call sub_10014D2  +
pop ecx  +
pop ecx  +
lea ecx [ebp-60h] +
call sub_100A51D  +
lea ecx [ebp-64h] +
mov [ebp-4] bl +
call sub_10015AA  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-5Ch] +
call sub_10015AA  +
mov eax esi +
call sub_1009AF4  +
retn 4  +
mov esi eax +
jmp loc_100A459  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_100A532  +
push eax  +
call RegCloseKey  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push [ebp+arg_4]  +
mov ebx ecx +
mov edi ebx +
movs   +
movs   +
movs   +
lea ecx [ebx+10h] +
movs   +
call sub_100A565  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
push dword ptr [eax]  +
call sub_100A586  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1001A7B  +
mov eax [ebp+arg_0] +
mov [esi] eax +
test eax eax +
jz loc_100A5A6  +
add eax 4 +
push eax  +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100A5DE  +
lea ecx [esi+4] +
mov [ecx] eax +
mov byte ptr [eax+21h] 1 +
mov eax [ecx] +
mov [eax+4] eax +
mov eax [ecx] +
mov [eax] eax +
mov ecx [ecx] +
mov [ecx+8] ecx +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebx  +
xor ebx ebx +
push ebx  +
push 1  +
call sub_100A611  +
cmp eax ebx +
jz loc_100A5F1  +
mov [eax] ebx +
lea ecx [eax+4] +
cmp ecx ebx +
jz loc_100A5FA  +
mov [ecx] ebx +
lea ecx [eax+8] +
cmp ecx ebx +
jz loc_100A603  +
mov [ecx] ebx +
mov [eax+21h] bl +
mov byte ptr [eax+20h] 1 +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
sub esp 0Ch +
test ecx ecx +
jbe loc_100C715  +
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 24h +
jb loc_100C71C  +
imul ecx ecx +
push ecx  +
call sub_100150F  +
pop ecx  +
leave   +
retn 8  +
***
call sub_1001448  +
mov ebx ecx +
mov esi [ebp+8] +
and dword ptr [ebp-4] 0 +
add esi 28h +
lea edi [ebp-24h] +
movs   +
movs   +
lea eax [ebp+8] +
movs   +
push eax  +
lea eax [ebp-24h] +
push eax  +
lea ecx [ebp-4Ch] +
movs   +
call sub_100A539  +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
call sub_100A87A  +
lea eax [ebp-38h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
mov ecx ebx +
mov byte ptr [ebp-4] 2 +
call sub_100A6E4  +
mov ecx [eax] +
mov ebx [eax+4] +
mov [ebp-1Ch] ecx +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 1 +
call sub_1001A7B  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 0 +
call sub_1001A7B  +
mov ecx [ebp+8] +
xor eax eax +
test bl bl +
setnz al  +
or dword ptr [ebp-4] 0FFFFFFFFh +
dec eax  +
and eax 8007000Eh +
mov esi eax +
test ecx ecx +
jz loc_100A6D5  +
call sub_1001AA5  +
mov eax esi +
call sub_100165F  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+4] +
mov esi [eax+4] +
mov ebx eax +
mov al 1 +
mov byte ptr [ebp+var_8] al +
cmp byte ptr [esi+21h] 0 +
jz loc_100C9F2  +
mov esi ebx +
mov [ebp+var_4] esi +
test al al +
jz loc_100CA23  +
mov eax [edi+4] +
cmp ebx [eax] +
jnz loc_100CA18  +
push [ebp+arg_4]  +
push ebx  +
push 1  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx edi +
call sub_100A747  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
mov byte ptr [eax+4] 1 +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
call sub_1001448  +
mov edi ecx +
cmp dword ptr [edi+8] 0CCCCCCBh +
jnb loc_100C904  +
mov eax [edi+4] +
mov esi [ebp+10h] +
push 0  +
push dword ptr [ebp+14h]  +
push eax  +
push esi  +
push eax  +
call sub_100A7C0  +
inc dword ptr [edi+8]  +
mov ebx eax +
mov eax [edi+4] +
cmp esi eax +
jnz loc_100C92F  +
mov [eax+4] ebx +
mov eax [edi+4] +
mov [eax] ebx +
mov eax [edi+4] +
mov [eax+8] ebx +
mov esi ebx +
lea eax [ebx+4] +
mov ecx [eax] +
cmp byte ptr [ecx+20h] 0 +
jz loc_100C95D  +
mov eax [edi+4] +
mov eax [eax+4] +
mov byte ptr [eax+20h] 1 +
mov eax [ebp+8] +
mov [eax] ebx +
call sub_100165F  +
retn 10h  +
***
call sub_1002917  +
mov esi ecx +
push 0  +
push 1  +
call sub_100A611  +
push dword ptr [ebp+18h]  +
and dword ptr [ebp-4] 0 +
push dword ptr [ebp+14h]  +
mov ecx esi +
push dword ptr [ebp+10h]  +
mov [ebp-14h] eax +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push eax  +
call sub_100A805  +
mov eax [ebp-14h] +
call sub_100165F  +
retn 14h  +
***
call sub_1001448  +
mov ecx [ebp+8] +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_100A833  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_100A840  +
call sub_100165F  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push [ebp+arg_C]  +
mov esi ecx +
mov [esi] eax +
mov eax [ebp+arg_4] +
mov [esi+4] eax +
mov eax [ebp+arg_8] +
lea ecx [esi+0Ch] +
mov [esi+8] eax +
call sub_100A87A  +
mov al [ebp+arg_10] +
mov [esi+20h] al +
mov byte ptr [esi+21h] 0 +
mov eax esi +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
mov esi eax +
mov edi ebx +
movs   +
movs   +
movs   +
add eax 10h +
push eax  +
lea ecx [ebx+10h] +
movs   +
call sub_100A565  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
call sub_1001448  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [esi+10h] 0 +
and dword ptr [ebp-4] 0 +
lea edi [esi+18h] +
and dword ptr [edi] 0 +
mov byte ptr [ebp-4] 1 +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_100A8E5  +
test dword ptr [eax+1Ch] 800h +
jnz loc_100EEE2  +
push 28h  +
call sub_100150F  +
pop ecx  +
test eax eax +
jz loc_100A922  +
mov ecx eax +
call sub_1009650  +
push eax  +
mov ecx edi +
call sub_100A586  +
push dword ptr [ebp+8]  +
mov ecx esi +
call sub_1006B50  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
call sub_100A92B  +
and dword ptr [esi+3Ch] 0 +
mov eax esi +
call sub_100165F  +
retn 8  +
xor eax eax +
jmp loc_100A8F8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
cmp [ebp+lpsz] 0 +
jnz loc_100EE42  +
push esi  +
push edi  +
mov esi offset dword_100A950 +
mov edi ecx +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100A991  +
lea ecx [esi+4] +
mov [ecx] eax +
mov byte ptr [eax+15h] 1 +
mov eax [ecx] +
mov [eax+4] eax +
mov eax [ecx] +
mov [eax] eax +
mov ecx [ecx] +
mov [ecx+8] ecx +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebx  +
xor ebx ebx +
push ebx  +
push 1  +
call sub_100A9C4  +
cmp eax ebx +
jz loc_100A9A4  +
mov [eax] ebx +
lea ecx [eax+4] +
cmp ecx ebx +
jz loc_100A9AD  +
mov [ecx] ebx +
lea ecx [eax+8] +
cmp ecx ebx +
jz loc_100A9B6  +
mov [ecx] ebx +
mov [eax+15h] bl +
mov byte ptr [eax+14h] 1 +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
sub esp 0Ch +
test ecx ecx +
jbe loc_1010FE5  +
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 18h +
jb loc_1010FEC  +
imul ecx ecx +
push ecx  +
call sub_100150F  +
pop ecx  +
leave   +
retn 8  +
***
push 40h  +
mov eax offset dword_101D864 +
call sub_100AADB  +
mov esi [ebp+8] +
mov edi [ebp+10h] +
xor ebx ebx +
mov [ebp-24h] ebx +
mov [ebp-2Ch] ebx +
mov [ebp-4] ebx +
call ds:CoImpersonateClient  +
test eax eax +
jl loc_100AA7C  +
lea eax [ebp-30h] +
push eax  +
push 1  +
push 8  +
mov byte ptr [ebp-20h] 1 +
mov byte ptr [ebp-1Fh] 1 +
mov [ebp-1Eh] bl +
mov [ebp-1Dh] bl +
mov [ebp-1Ch] bl +
mov [ebp-1Bh] bl +
mov [ebp-1Ah] bl +
mov byte ptr [ebp-19h] 5 +
mov dword ptr [ebp-18h] 12h +
call ds:GetCurrentThread  +
push eax  +
call ds:OpenThreadToken  +
test eax eax +
jz loc_100AA76  +
lea eax [ebp-2Ch] +
push eax  +
lea eax [ebp-20h] +
push eax  +
push dword ptr [ebp-30h]  +
call ds:CheckTokenMembership  +
push dword ptr [ebp-30h]  +
call ds:CloseHandle  +
call ds:CoRevertToSelf  +
cmp [esi+8] bl +
jz loc_100AAD2  +
cmp [ebp-2Ch] ebx +
jz loc_100AAD2  +
mov eax [ebp+0Ch] +
cmp eax 8 +
jb loc_100AAD2  +
cmp eax [edi] +
jnz loc_100AAD2  +
lea ecx [ebp-28h] +
call sub_1001537  +
push ebx  +
push ebx  +
lea eax [ebp-28h] +
push eax  +
mov byte ptr [ebp-4] 1 +
call ds:__imp_InterlockedCompareExchange  +
test eax eax +
jz loc_100AAB7  +
mov ecx [esi+4] +
mov eax [ecx] +
push edi  +
call dword ptr [eax+4]  +
push ebx  +
lea eax [ebp-28h] +
push eax  +
call ds:InterlockedExchange  +
call sub_100142F  +
***
mov eax [ebp-24h] +
call sub_10075FB  +
retn 0Ch  +
***
xor eax eax +
jmp loc_100AACA  +
***
mov eax eax +
push eax  +
push large dword ptr fs:0  +
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_10220C8 +
xor eax ebp +
push eax  +
mov [ebp-14h] eax +
mov [ebp-10h] esp +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
mov eax 5A4Dh +
cmp word ptr ds:__ImageBase ax +
jnz loc_100ABBC  +
mov eax ds:dword_100003C +
lea eax __ImageBase[eax] +
cmp dword ptr [eax] 4550h +
jnz loc_100ABBC  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jnz loc_100D94A  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_100ABBC  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 2  +
mov dword_10220E0 eax +
call sub_100ADEC  +
push eax  +
call ds:__set_app_type  +
or dword_102211C 0FFFFFFFFh +
or dword_1022120 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_102CC90 +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_102CC8C +
mov [eax] ecx +
call sub_100954D  +
cmp dword_102C7B8 0 +
jz loc_100D970  +
call sub_100ABC5  +
xor eax eax +
retn   +
***
xor eax eax +
jmp loc_100AB63  +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
call ds:GetProcessHeap  +
push (offset byte_1003114+2)  +
mov dword_1022124 offset off_1002800 +
mov dword_1022128 eax +
mov byte_102212C 0 +
call sub_100AC0A  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call sub_100AC26  +
neg eax  +
sbb eax eax +
neg eax  +
pop ecx  +
dec eax  +
pop ebp  +
retn   +
***
call sub_1001954  +
mov eax dword_1022120 +
mov [ebp-1Ch] eax +
cmp eax 0FFFFFFFFh +
jnz loc_100D981  +
push dword ptr [ebp+8]  +
call ds:_onexit  +
pop ecx  +
call sub_1001BBC  +
retn   +
***
push offset dword_1022124  +
mov ecx offset unk_1022130 +
call sub_100AC99  +
push (offset byte_1002EA4+1)  +
call sub_100AC0A  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov [eax+4] ecx +
mov dword ptr [eax] offset off_1002814 +
xor ecx ecx +
mov dword ptr [eax+14h] 2 +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov [eax+18h] cx +
mov [eax+1Ah] cx +
mov [eax+8] eax +
pop ebp  +
retn 4  +
***
mov ecx offset hHeap +
call sub_100ACEA  +
push (offset byte_1002D60+1)  +
call sub_100AC0A  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
xor edi edi +
push edi  +
push edi  +
mov esi ecx +
push edi  +
mov [esi+4] edi +
call ds:HeapCreate  +
mov [esi] eax +
cmp eax edi +
jz loc_100C156  +
mov dword ptr [esi+4] 1 +
push 4  +
lea eax [ebp+var_4] +
push eax  +
push edi  +
push dword ptr [esi]  +
mov [ebp+var_4] 2 +
call ds:HeapSetInformation  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov ecx offset Addend +
call sub_100AD4F  +
push (offset dword_1002E98+5)  +
call sub_100AC0A  +
pop ecx  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push 0  +
lea eax [esi+4] +
push eax  +
mov dword ptr [esi] 0 +
call ds:InterlockedExchange  +
mov eax esi +
pop esi  +
retn   +
***
mov ecx offset unk_10221D8 +
call sub_100AD8A  +
push offset sub_1003138  +
call sub_100AC0A  +
pop ecx  +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
xor ebx ebx +
push ebx  +
mov esi ecx +
call sub_100ADBA  +
mov [esi+14h] bl +
mov [esi+18h] ebx +
mov [esi+1Ch] ebx +
mov [esi+20h] ebx +
mov [esi+24h] ebx +
mov [esi+40h] bl +
mov [esi+48h] ebx +
mov [esi+4Ch] ebx +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
mov bl [ebp+arg_0] +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+8] +
push edi  +
mov [esi] bl +
call ds:GetSystemTimeAsFileTime  +
test bl bl +
jnz loc_100DACD  +
***
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_100AE1A  +
push eax  +
call sub_100AE24  +
test eax eax +
jz loc_100AE1A  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_100D9F6  +
push 2  +
pop eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
call sub_1001954  +
xor eax eax +
mov ecx [ebp+8] +
test ecx ecx +
jz loc_100AE73  +
cmp ecx 0FFFFFFFFh +
jz loc_100AE73  +
and [ebp-4] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_100AE6C  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_100AE6C  +
cmp edx 10000000h +
jnb loc_100AE6C  +
lea eax [edx+ecx] +
mov [ebp-1Ch] eax +
cmp dword ptr [eax] 4550h +
jnz loc_100D9EC  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1001BBC  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
mov esi ecx +
call sub_100AEDC  +
test byte ptr [esi+40Ah] 1 +
jnz loc_100AECD  +
push dword ptr [esi]  +
push dword ptr [esi+4]  +
call ds:SysAllocStringLen  +
test eax eax +
jz loc_100DAB7  +
and byte ptr [esi+40Ah] 0FEh +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
mov esi ecx +
mov al [esi+40Ah] +
test al 2 +
jz loc_100DA72  +
mov eax [esi+4] +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
mov ecx [edi] +
test ecx ecx +
jz loc_100DB7B  +
test byte ptr [esi+40Ah] 1 +
push ebx  +
jnz loc_100DBB0  +
mov eax [esi] +
lea edx [eax+ecx] +
mov ebx 200h +
cmp edx ebx +
jnb loc_100DBB0  +
test eax eax +
jnz loc_100DB82  +
push dword ptr [edi]  +
lea eax [esi+8] +
push dword ptr [edi+4]  +
push ebx  +
push eax  +
call sub_100AF73  +
test eax eax +
jl loc_100AF67  +
lea eax [esi+8] +
mov [esi+4] eax +
mov eax [edi] +
add [esi] eax +
or byte ptr [esi+40Ah] 2 +
xor eax eax +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
xor eax eax +
push esi  +
test ebx ebx +
jz loc_100AFCE  +
cmp ebx 7FFFFFFFh +
ja loc_100AFCE  +
mov esi [ebp+arg_0] +
test eax eax +
jl loc_100AFD5  +
push edi  +
lea edi [ebp+arg_4] +
mov edx ebx +
mov eax esi +
call sub_100A0AB  +
mov ecx [ebp+arg_4] +
pop edi  +
test eax eax +
jl loc_100AFC8  +
cmp [ebp+arg_C] 7FFFFFFEh +
ja loc_100DB5B  +
push [ebp+arg_C]  +
mov eax [ebp+arg_8] +
mov edx ebx +
sub edx ecx +
push 0  +
lea ecx [esi+ecx*2] +
call sub_100891E  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
mov eax 80070057h +
jmp loc_100AF8B  +
xor ecx ecx +
jmp loc_100AFA3  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi] edi +
jz loc_100B01B  +
mov ebx [esi+4] +
cmp ebx edi +
jz loc_100B01B  +
test byte ptr [esi+40Ah] 3 +
jnz loc_100B030  +
cmp [esi] edi +
jbe loc_100B00E  +
movzx eax word ptr [ebx] +
push eax  +
mov ecx esi +
call sub_100B03C  +
test al al +
jnz loc_100B021  +
sub [esi] edi +
jz loc_100B02A  +
mov eax [esi+4] +
lea eax [eax+edi*2] +
mov [esi+4] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
retn   +
inc edi  +
inc ebx  +
inc ebx  +
cmp edi [esi] +
jnb loc_100B00E  +
jmp loc_100AFFF  +
and dword ptr [esi+4] 0 +
jmp loc_100B01B  +
mov eax 8000FFFFh +
jmp loc_100B01D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ax [ebp+arg_0] +
cmp ax 20h +
jz loc_100B063  +
cmp ax 9 +
jz loc_100B063  +
cmp ax 0Dh +
jz loc_100B063  +
cmp ax 0Ah +
jz loc_100B063  +
xor eax eax +
pop ebp  +
retn 4  +
xor eax eax +
inc eax  +
jmp loc_100B05F  +
***
lea eax [ebp-28h] +
push eax  +
mov ecx esi +
call sub_100B097  +
mov edi eax +
test edi edi +
jl loc_100818B  +
cmp byte ptr [esi+15h] 0 +
lea eax [esi+20h] +
mov [ebp-18h] eax +
jz loc_1005AC4  +
jmp loc_100819F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_100B0BA  +
test dword ptr [eax+1Ch] 100h +
jnz loc_100DDCA  +
mov edi [ebp+arg_0] +
and dword ptr [edi] 0 +
lea esi [ebx+20h] +
push esi  +
mov ecx ebx +
call sub_1007C4E  +
test eax eax +
jl loc_100B0EF  +
cmp dword ptr [esi] 0 +
jz loc_100B0F6  +
push 0Eh  +
push offset aLeastprivilege  +
mov ecx esi +
call sub_10051CD  +
test al al +
jz loc_100DDE1  +
and dword ptr [edi] 0 +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
mov eax 80041318h +
jmp loc_100B0EF  +
***
lea eax [ebp-28h] +
push eax  +
mov ecx esi +
call sub_100B14D  +
mov edi eax +
test edi edi +
jl loc_100829C  +
cmp byte ptr [esi+15h] 0 +
lea eax [esi+20h] +
mov [ebp-18h] eax +
jz loc_1005AC4  +
jmp loc_10082B0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_100B170  +
test dword ptr [eax+1Ch] 100h +
jnz loc_100E04D  +
mov edi [ebp+arg_0] +
and dword ptr [edi] 0 +
lea esi [ebx+20h] +
push esi  +
mov ecx ebx +
call sub_1007C4E  +
test eax eax +
jl loc_100B1CF  +
push 8  +
push offset aParallel  +
mov ecx esi +
call sub_10051CD  +
test al al +
jnz loc_100E064  +
push 5  +
push offset aQueue  +
mov ecx esi +
call sub_10051CD  +
test al al +
jnz loc_100E06F  +
push 9  +
push offset aIgnorenew  +
mov ecx esi +
call sub_10051CD  +
test al al +
jz loc_100E07A  +
mov dword ptr [edi] 2000h +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
call sub_1001448  +
mov esi ecx +
xor ebx ebx +
mov [ebp-18h] ebx +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_100B21D  +
test dword ptr [eax+1Ch] 100h +
jnz loc_100E2B8  +
lea eax [ebp-14h] +
push eax  +
mov [ebp-14h] ebx +
call sub_100B2C7  +
cmp eax ebx +
jl loc_100E2CF  +
push dword ptr [ebp-14h]  +
lea ecx [ebp-10h] +
call sub_1004476  +
mov eax [ebp-14h] +
mov ecx [eax] +
push eax  +
mov [ebp-4] ebx +
call dword ptr [ecx+8]  +
lea ecx [ebp-10h] +
call sub_1007E2E  +
mov ecx [esi+10h] +
mov edx [eax] +
push ecx  +
push eax  +
call dword ptr [edx+0Ch]  +
cmp eax ebx +
jl loc_100E2DC  +
push dword ptr [ebp-10h]  +
lea ecx [esi+1Ch] +
call sub_100B294  +
cmp [esi+15h] bl +
jnz loc_100E2FE  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_100B287  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor eax eax +
call sub_100165F  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
push edi  +
mov edi [esi] +
cmp edi eax +
jz loc_100B2BA  +
mov [esi] eax +
test eax eax +
jz loc_100B2B2  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
test edi edi +
jnz loc_100DA28  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_0]  +
push offset loc_100B2E0  +
call CreateXmlReader  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ecx+8] +
mov edx [ecx+4] +
push eax  +
push edx  +
lea eax [ebp+var_4] +
push eax  +
call sub_100B31E  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jnz loc_100E940  +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
mov ecx [ebp+arg_0] +
call sub_100460A  +
push eax  +
mov ecx esi +
call sub_100B367  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
xor ecx ecx +
push 2  +
mov esi 105h +
pop edx  +
mov eax esi +
mul  edx +
seto cl  +
mov [ebp+var_4] ebx +
neg ecx  +
or ecx eax +
push ecx  +
call sub_1001502  +
mov edi [ebp+arg_4] +
pop ecx  +
push eax  +
mov ecx edi +
call sub_100BF79  +
mov eax [edi] +
push offset a?  +
push esi  +
push eax  +
call sub_100A10F  +
test eax eax +
jl loc_100B40E  +
mov eax [ebx] +
mov ecx [edi] +
push eax  +
push esi  +
push ecx  +
call sub_10088C2  +
test eax eax +
jl loc_100B40E  +
mov ebx [ebp+arg_0] +
test ebx ebx +
jz loc_100B3EC  +
movzx eax word ptr [ebx] +
test ax ax +
jz loc_100B3EC  +
cmp word ptr [ebx+2] 0 +
jz loc_100B415  +
cmp ax 5Ch +
jnz loc_1010980  +
mov eax [edi] +
push ebx  +
push esi  +
push eax  +
call sub_10088C2  +
test eax eax +
jl loc_100B40E  +
push dword ptr [edi]  +
mov ecx [ebp+var_4] +
call sub_100B422  +
movzx eax al +
neg eax  +
sbb eax eax +
and eax 7FF8FF5Fh +
add eax 800700A1h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
mov eax 800700A1h +
jmp loc_100B407  +
cmp ax 5Ch +
jnz loc_100B3D4  +
jmp loc_100B3EC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 210h +
mov eax dword_10220C8 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
push offset a?  +
mov esi 105h +
push esi  +
lea eax [ebp+pszPrefix] +
push eax  +
mov edi ecx +
call sub_100A10F  +
test eax eax +
jl loc_100B492  +
push dword ptr [edi]  +
lea eax [ebp+pszPrefix] +
push esi  +
push eax  +
call sub_10088C2  +
test eax eax +
jl loc_100B492  +
push ebx  +
lea eax [ebp+pszPrefix] +
push eax  +
call PathIsPrefixW  +
dec eax  +
neg eax  +
sbb eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001FD0  +
leave   +
retn 4  +
xor al al +
jmp loc_100B481  +
***
mov edi edi +
mov eax [esp+arg_4] +
mov ecx [esp+arg_C] +
or ecx eax +
mov ecx [esp+arg_8] +
jz loc_100C0D7  +
push ebx  +
mul  ecx +
mov ebx eax +
mov eax [esp+4+arg_0] +
mul  [esp+4+arg_C] +
add ebx eax +
mov eax [esp+4+arg_0] +
mul  ecx +
add edx ebx +
pop ebx  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100B572  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1002917  +
mov esi ecx +
mov [ebp-14h] esi +
call sub_100A965  +
push dword ptr [ebp+8]  +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_100B5A5  +
mov eax esi +
call sub_100165F  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
mov eax [ebx+4] +
push esi  +
push edi  +
mov esi ecx +
mov edi [esi+4] +
add eax 4 +
push edi  +
push dword ptr [eax]  +
call sub_100B5F0  +
mov [edi+4] eax +
mov eax [ebx+8] +
mov edi [esi+4] +
mov [esi+8] eax +
mov eax [edi+4] +
cmp byte ptr [eax+15h] 0 +
jz loc_100F9C5  +
mov [edi] edi +
mov esi [esi+4] +
mov [esi+8] esi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
call sub_1002917  +
mov edi ecx +
mov [ebp-18h] edi +
mov esi [ebp+8] +
cmp byte ptr [esi+15h] 0 +
mov eax [edi+4] +
mov [ebp-14h] eax +
jz loc_100F96A  +
mov eax [ebp-14h] +
call sub_100165F  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
mov esi ecx +
call sub_100B660  +
cmp byte ptr [esi+8] 0 +
pop esi  +
jnz loc_100FC7C  +
push 2  +
push 0Ch  +
lea ecx [ebp+pAclInformation] +
push ecx  +
push eax  +
call ds:GetAclInformation  +
test eax eax +
jz loc_100FC80  +
mov eax [ebp+var_8] +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+4] edi +
jnz loc_100B711  +
cmp byte ptr [esi+8] 0 +
jnz loc_100B711  +
mov eax [esi] +
push ebx  +
push 8  +
pop ebx  +
call dword ptr [eax+4]  +
mov [ebp+var_4] eax +
test eax eax +
jbe loc_100B6AA  +
mov eax [esi] +
push edi  +
mov ecx esi +
call dword ptr [eax+10h]  +
test eax eax +
jz loc_100B6A4  +
mov edx [eax] +
mov ecx eax +
call dword ptr [edx+8]  +
add ebx eax +
inc edi  +
cmp edi [ebp+var_4] +
jb loc_100B68F  +
push ebx  +
call ds:malloc  +
pop ecx  +
mov [esi+4] eax +
test eax eax +
jz loc_100FAB6  +
push dword ptr [esi+0Ch]  +
push ebx  +
push eax  +
call ds:InitializeAcl  +
test eax eax +
jz loc_100B718  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+14h]  +
xor ebx ebx +
cmp [ebp+var_4] ebx +
jbe loc_100B710  +
mov eax [esi] +
push ebx  +
mov ecx esi +
call dword ptr [eax+10h]  +
mov edi eax +
test edi edi +
jz loc_100B718  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+8]  +
push eax  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+4]  +
push eax  +
push 0FFFFFFFFh  +
push dword ptr [esi+0Ch]  +
push dword ptr [esi+4]  +
call ds:AddAce  +
test eax eax +
jz loc_100B718  +
inc ebx  +
cmp ebx [ebp+var_4] +
jb loc_100B6DA  +
pop ebx  +
mov eax [esi+4] +
pop edi  +
pop esi  +
leave   +
retn   +
call sub_1017B60  +
jmp loc_100FAC0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx ecx +
cmp dword ptr [ebx+4] 0 +
push esi  +
push edi  +
jnz loc_100FC86  +
mov eax [ebx+4] +
test eax eax +
jnz loc_100FC90  +
mov ecx ebx +
call sub_100B9A4  +
and [ebp+pOwner] 0 +
mov esi [ebp+nDestinationSidLength] +
mov ecx esi +
call sub_100B7C6  +
test al al +
jz loc_100FCAC  +
add esi 4 +
push esi  +
call ds:GetLengthSid  +
push eax  +
mov [ebp+nDestinationSidLength] eax +
call ds:malloc  +
mov edi eax +
pop ecx  +
test edi edi +
jz loc_100FCB6  +
push esi  +
push edi  +
push [ebp+nDestinationSidLength]  +
call ds:CopySid  +
test eax eax +
jz loc_100B7B7  +
movzx eax [ebp+arg_4] +
push eax  +
push edi  +
push dword ptr [ebx+4]  +
call ds:SetSecurityDescriptorOwner  +
test eax eax +
jz loc_100B7B7  +
push [ebp+pOwner]  +
call ds:free  +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
call sub_1017B60  +
jmp loc_100FCBD  +
***
cmp byte ptr [ecx+48h] 0 +
jz loc_100FC63  +
add ecx 4 +
push ecx  +
call ds:IsValidSid  +
neg eax  +
sbb eax eax +
neg eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx ecx +
cmp dword ptr [ebx+4] 0 +
push esi  +
push edi  +
jz loc_100B7FD  +
call sub_100B892  +
mov eax [ebx+4] +
test eax eax +
jz loc_100FCCF  +
lea ecx [ebp+bGroupDefaulted] +
push ecx  +
lea ecx [ebp+pGroup] +
push ecx  +
push eax  +
call ds:GetSecurityDescriptorGroup  +
test eax eax +
jz loc_100FCCA  +
mov esi [ebp+nDestinationSidLength] +
mov ecx esi +
call sub_100B7C6  +
test al al +
jz loc_100FCDF  +
add esi 4 +
push esi  +
call ds:GetLengthSid  +
push eax  +
mov [ebp+nDestinationSidLength] eax +
call ds:malloc  +
mov edi eax +
pop ecx  +
test edi edi +
jz loc_100FCE9  +
push esi  +
push edi  +
push [ebp+nDestinationSidLength]  +
call ds:CopySid  +
test eax eax +
jz loc_100B883  +
movzx eax [ebp+arg_4] +
push eax  +
push edi  +
push dword ptr [ebx+4]  +
call ds:SetSecurityDescriptorGroup  +
test eax eax +
jz loc_100B883  +
push [ebp+pGroup]  +
call ds:free  +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
call sub_1017B60  +
jmp loc_100FCF0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
mov [ebp+var_2C] esi +
cmp [esi+4] ebx +
jz loc_100B8C6  +
lea eax [ebp+dwRevision] +
push eax  +
call sub_10097C4  +
test al al +
jz loc_100FAD5  +
test [ebp+dwRevision] 8000h +
jnz loc_100FADF  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
xor edi edi +
mov [ebp+var_8] ebx +
cmp [ebx+4] edi +
jz loc_100B8EB  +
call sub_100B892  +
mov eax [ebx+4] +
mov [ebp+pDacl] edi +
cmp eax edi +
jz loc_100B993  +
lea ecx [ebp+bDaclDefaulted] +
push ecx  +
lea ecx [ebp+pDacl] +
push ecx  +
lea ecx [ebp+bDaclPresent] +
push ecx  +
push eax  +
call ds:GetSecurityDescriptorDacl  +
test eax eax +
jz loc_100FCFD  +
mov esi [ebp+arg_0] +
cmp byte ptr [esi+8] 0 +
jnz loc_100B967  +
mov ecx esi +
call sub_10048DD  +
test al al +
jnz loc_100B959  +
mov ecx esi +
call sub_100B624  +
mov ebx eax +
push ebx  +
call ds:malloc  +
mov edi eax +
pop ecx  +
test edi edi +
jz loc_100FD02  +
push ebx  +
mov ecx esi +
call sub_100B660  +
push eax  +
push ebx  +
push edi  +
call sub_100989A  +
mov ebx [ebp+var_8] +
add esp 10h +
cmp byte ptr [esi+8] 0 +
jnz loc_100B967  +
test edi edi +
jz loc_100FD0C  +
xor eax eax +
inc eax  +
movzx ecx [ebp+arg_4] +
push ecx  +
push edi  +
push eax  +
push dword ptr [ebx+4]  +
call ds:SetSecurityDescriptorDacl  +
test eax eax +
jz loc_100FD13  +
push [ebp+pDacl]  +
call ds:free  +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
mov ecx ebx +
call sub_100B9A4  +
jmp loc_100B914  +
***
mov edi edi +
push esi  +
push 14h  +
mov esi ecx +
call ds:malloc  +
pop ecx  +
mov [esi+4] eax +
test eax eax +
jz loc_100FC2C  +
push 1  +
push eax  +
call ds:InitializeSecurityDescriptor  +
test eax eax +
jz loc_100FC36  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push 12h  +
push 1  +
push offset dword_100B9FC  +
push [ebp+arg_0]  +
call sub_1008533  +
mov eax [ebp+arg_0] +
add esp 10h +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1009900 +
call sub_10072F1  +
lea ecx [esi+10h] +
call sub_100BA36  +
push dword ptr [esi+4]  +
mov dword ptr [esi] offset off_10027D8 +
call ds:free  +
pop ecx  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jnz loc_100FD83  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 280h +
mov eax dword_10220C8 +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+8] +
push ebx  +
push esi  +
mov esi ecx +
mov [ebp-238h] eax +
call sub_1008FFF  +
xor ebx ebx +
cmp eax ebx +
mov [ebp-220h] eax +
jl loc_100BC1F  +
push edi  +
push dword ptr [ebp+10h]  +
call sub_1004B89  +
or eax 0C14h +
mov [ebp-21Ch] eax +
xor eax eax +
lea edi [ebp-230h] +
stos   +
stos   +
stos   +
push 44h  +
stos   +
pop edi  +
push edi  +
lea eax [ebp-280h] +
push ebx  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp-280h] +
push eax  +
mov [ebp-280h] edi +
call ds:GetStartupInfoW  +
push 4  +
pop eax  +
mov [ebp-250h] ax +
mov eax [esi+20h] +
mov dword ptr [ebp-254h] 81h +
cmp eax ebx +
jnz loc_1010435  +
xor eax eax +
mov ecx [esi+1Ch] +
cmp ecx ebx +
jz loc_100BC2F  +
mov edx [ecx] +
mov ecx [esi+18h] +
cmp ecx ebx +
jz loc_100BC36  +
mov ecx [ecx] +
lea edi [ebp-230h] +
push edi  +
lea edi [ebp-280h] +
push edi  +
mov edi ds:CreateProcessW +
push eax  +
push ebx  +
push dword ptr [ebp-21Ch]  +
push ebx  +
push ebx  +
push ebx  +
push edx  +
push ecx  +
call edi  +
test eax eax +
setnz byte ptr [ebp-211h]  +
call ds:__imp_GetLastError  +
xor ecx ecx +
cmp eax 2E4h +
setz cl  +
mov [ebp-218h] eax +
mov [ebp-234h] ecx +
cmp [ebp-211h] bl +
jz loc_100BC3D  +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_100BB6F  +
test byte ptr [eax+1Ch] 80h +
jnz loc_101043C  +
cmp [ebp-234h] ebx +
jnz loc_1010581  +
cmp [ebp-211h] bl +
jz loc_101064E  +
cmp [ebp-230h] ebx +
jz loc_1010637  +
mov eax [esi+18h] +
cmp eax ebx +
jz loc_100BC4B  +
mov ecx [eax] +
mov eax [esi+10h] +
cmp eax ebx +
jz loc_100BC52  +
mov eax [eax] +
push ebx  +
push ebx  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp-228h]  +
push ecx  +
mov ecx dword_1022110 +
push eax  +
push offset dword_100BC60  +
call sub_1004729  +
mov eax [ebp-230h] +
mov ecx [ebp-238h] +
push dword ptr [ebp+10h]  +
mov [esi+24h] eax +
mov dword ptr [esi+8] 1 +
mov [ecx] eax +
mov eax [ebp-228h] +
push dword ptr [esi+24h]  +
mov ecx esi +
mov [esi+28h] eax +
call sub_100BC75  +
push dword ptr [ebp-22Ch]  +
call ds:ResumeThread  +
push dword ptr [ebp-22Ch]  +
call ds:CloseHandle  +
mov eax [ebp-220h] +
cmp eax ebx +
setnl cl  +
mov [esi+14h] cl +
pop edi  +
mov ecx [ebp-4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001FD0  +
leave   +
retn 10h  +
***
xor edx edx +
jmp loc_100BAF8  +
***
xor ecx ecx +
jmp loc_100BB05  +
***
cmp eax 2 +
jz loc_1010471  +
jmp loc_100BB6F  +
***
xor ecx ecx +
jmp loc_100BBA0  +
***
xor eax eax +
jmp loc_100BBAD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_4]  +
mov edi ecx +
call sub_1004BB1  +
mov esi ds:NtSetInformationProcess +
push 4  +
mov [ebp+var_4] eax +
lea eax [ebp+var_4] +
push eax  +
push 21h  +
push [ebp+arg_0]  +
call esi  +
mov ebx offset dword_10041AC +
test eax eax +
jnz loc_100FF59  +
push [ebp+arg_4]  +
call sub_100BCD8  +
push 4  +
mov [ebp+var_8] eax +
lea eax [ebp+var_8] +
push eax  +
push 27h  +
push [ebp+arg_0]  +
call esi  +
test eax eax +
jnz loc_100FF98  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp eax [ebp+arg_0] +
sbb eax eax +
and eax [ebp+arg_0] +
cmp eax 0Ah +
jnb loc_1010684  +
mov eax dword_102C824[eax*4] +
pop ebp  +
retn 4  +
***
call sub_1001448  +
mov ebx ecx +
xor eax eax +
inc eax  +
xor ecx ecx +
push 8  +
pop esi  +
mov [ebp-7Ch] eax +
mov [ebp-74h] eax +
mov eax 3E8h +
mov edx 0E10h +
mov [ebp-60h] edx +
mov [ebp-50h] eax +
mov [ebp-40h] eax +
mov [ebp-30h] eax +
mov [ebp-14h] edx +
push 10h  +
pop edx  +
mov eax esi +
mul  edx +
mov [ebp-8Ch] ecx +
mov [ebp-84h] ecx +
mov [ebp-80h] ecx +
mov [ebp-70h] ecx +
mov [ebp-24h] ecx +
mov [ebp-20h] ecx +
mov [ebp-10h] ecx +
seto cl  +
mov byte ptr [ebx+28h] 0 +
mov dword ptr [ebp-88h] offset aDataversion +
mov dword ptr [ebp-78h] offset aEnablebackcomp +
mov dword ptr [ebp-6Ch] 2 +
mov dword ptr [ebp-68h] offset aMissedtaskssta +
mov dword ptr [ebp-64h] 258h +
neg ecx  +
or ecx eax +
push ecx  +
mov dword ptr [ebp-5Ch] 3 +
mov dword ptr [ebp-58h] offset aTasksinmemoryq +
mov dword ptr [ebp-54h] 4Bh +
mov dword ptr [ebp-4Ch] 4 +
mov dword ptr [ebp-48h] offset aTasksperhighes +
mov dword ptr [ebp-44h] 64h +
mov dword ptr [ebp-3Ch] 5 +
mov dword ptr [ebp-38h] offset aTasksperleastp +
mov dword ptr [ebp-34h] 32h +
mov dword ptr [ebp-2Ch] 6 +
mov dword ptr [ebp-28h] offset aTracinglevel +
mov dword ptr [ebp-1Ch] 7 +
mov dword ptr [ebp-18h] offset aWindowseconds +
mov [ebx+24h] esi +
call sub_1001502  +
mov edi eax +
pop ecx  +
mov [ebp-90h] edi +
and dword ptr [ebp-4] 0 +
test edi edi +
jz loc_100BE3F  +
push offset loc_1004BD9  +
push esi  +
push 10h  +
push edi  +
call sub_10041C9  +
lea ecx [ebx+20h] +
push edi  +
call sub_100BF79  +
xor ecx ecx +
cmp [ebx+24h] ecx +
jbe loc_100BE39  +
xor eax eax +
mov edi [ebx+20h] +
add edi eax +
lea esi [ebp+eax-8Ch] +
movs   +
movs   +
movs   +
inc ecx  +
movs   +
add eax 10h +
cmp ecx [ebx+24h] +
jb loc_100BE20  +
call sub_100165F  +
retn   +
xor edi edi +
jmp loc_100BE0E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push dword ptr [esi]  +
call sub_10014D2  +
mov eax [ebp+arg_0] +
mov [esi] eax +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_100BFA5  +
sub eax ecx +
sar eax 1 +
push 0FFFFFFFFh  +
add eax eax +
push eax  +
push [ebp+arg_0]  +
call sub_100BFC9  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor ecx ecx +
cmp [ebp+arg_4] ecx +
jz loc_1010DF9  +
xor eax eax +
cmp [ebp+arg_4] ecx +
jle loc_100C013  +
push esi  +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
mov eax [ebp+arg_0] +
movzx edx byte ptr [ecx+eax] +
mov eax [ebp+arg_8] +
movzx esi al +
xor edx esi +
shr eax 8 +
xor eax dword_102C880[edx*4] +
inc ecx  +
cmp ecx [ebp+arg_4] +
mov [ebp+arg_8] eax +
jl loc_100BFF0  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100C048  +
lea ecx [esi+4] +
mov [ecx] eax +
mov byte ptr [eax+4Dh] 1 +
mov eax [ecx] +
mov [eax+4] eax +
mov eax [ecx] +
mov [eax] eax +
mov ecx [ecx] +
mov [ecx+8] ecx +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebx  +
xor ebx ebx +
push ebx  +
push 1  +
call sub_100C07B  +
cmp eax ebx +
jz loc_100C05B  +
mov [eax] ebx +
lea ecx [eax+4] +
cmp ecx ebx +
jz loc_100C064  +
mov [ecx] ebx +
lea ecx [eax+8] +
cmp ecx ebx +
jz loc_100C06D  +
mov [ecx] ebx +
mov [eax+4Dh] bl +
mov byte ptr [eax+4Ch] 1 +
pop ebx  +
retn   +
***
mov edi edi +
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb loc_100C0CE  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp+0] eax +
retn   +
sub eax 1000h +
test [eax] eax +
jmp loc_100C0C0  +
***
cmp cl 40h +
mov eax [esp+8+arg_4] +
mov ecx [ebp-1Ch] +
xor ecx ebp +
call sub_1001FD0  +
jmp sub_1001BBC  +
***
call ds:GetProcessHeap  +
mov [esi] eax +
jmp loc_100AD13  +
***
lea ecx [ebp+var_20] +
call sub_1012828  +
push offset dword_101F024  +
lea eax [ebp+var_20] +
push eax  +
call _CxxThrowException  +
push dword ptr [esi+4]  +
call ds:SysFreeString  +
jmp loc_10095E4  +
***
cmp [ebp+arg_0] eax +
jz loc_10099F0  +
push 8007000Eh  +
call sub_1014768  +
jmp loc_10099F0  +
***
push esi  +
call sub_10014D2  +
pop ecx  +
jmp loc_1001A74  +
***
push 8007000Eh  +
call sub_1014768  +
jmp loc_10099B7  +
***
xor esi esi +
inc esi  +
jmp loc_1009B84  +
mov [ebp-10h] esi +
mov [ebp+8] esi +
lea eax [ebp-10h] +
push eax  +
push esi  +
push 2  +
mov byte ptr [ebp-4] 1 +
call GetUserNameExW  +
test al al +
jnz loc_100C20B  +
mov eax [ebp-10h] +
xor ecx ecx +
push 2  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_1001502  +
pop ecx  +
push eax  +
lea ecx [ebp+8] +
call sub_100BF79  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+8]  +
push 2  +
call GetUserNameExW  +
mov eax [ebx+38h] +
add eax 4 +
mov eax [eax] +
cmp eax esi +
jz loc_100C21B  +
mov eax [eax] +
jmp loc_100C21D  +
xor eax eax +
mov ecx dword_1022110 +
push esi  +
push esi  +
push edi  +
push dword ptr [ebp+8]  +
push eax  +
push offset dword_1011080  +
call sub_1017234  +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_100C25D  +
test byte ptr [eax+1Ch] 80h +
jz loc_100C25D  +
lea ecx [ebx+28h] +
push ecx  +
push ebx  +
push offset dword_10110AC  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1012929  +
push dword ptr [ebp+8]  +
mov [ebx+24h] esi +
call sub_10014D2  +
pop ecx  +
jmp loc_1009B82  +
lea ecx [ebx+28h] +
push ecx  +
push ebx  +
push offset dword_10110AC  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1012929  +
jmp loc_1009B82  +
***
push 1  +
call sub_1012E8D  +
jmp loc_1009595  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_10095C2  +
***
push esi  +
push dword ptr [esi+8]  +
push eax  +
call sub_10132E9  +
push dword ptr [esi+4]  +
call sub_10014DF  +
pop ecx  +
jmp loc_1008DFB  +
***
mov ebx 8000FFFFh +
jmp loc_1008CFA  +
push dword ptr [ebp-0A0h]  +
call sub_10014D2  +
mov ebx [ebp-0A4h] +
pop ecx  +
jmp loc_1008CFA  +
push dword ptr [ebp-0A0h]  +
call sub_10014D2  +
pop ecx  +
jmp loc_100C2B9  +
mov eax [ebp-0ACh] +
mov byte ptr [ebp-4] 4 +
cmp eax ebx +
jz loc_100C2C3  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_100C2C3  +
mov eax [ebp-0ACh] +
mov byte ptr [ebp-4] 4 +
cmp eax ebx +
jz loc_100C2DA  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_100C2DA  +
call sub_1008D23  +
mov ecx [ebp-0A8h] +
mov byte ptr [ebp-4] 5 +
cmp ecx ebx +
jz loc_100C2E8  +
call sub_1001AA5  +
jmp loc_100C2E8  +
call sub_1008D23  +
mov ecx [ebp-0A8h] +
mov byte ptr [ebp-4] 5 +
cmp ecx ebx +
jz loc_100C2FE  +
call sub_1001AA5  +
jmp loc_100C2FE  +
***
push offset dword_10110E0  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1013308  +
jmp loc_1002F11  +
***
push dword ptr [ebp+10h]  +
lea ecx [ebp-0A0h] +
call sub_1013C7B  +
mov [ebp+0Ch] al +
jmp loc_1002875  +
***
call ds:__imp_GetLastError  +
test eax eax +
jle locret_1009ED6  +
and eax 0FFFFh +
or eax 80070000h +
retn   +
***
push eax  +
push offset aCrimsonProvide  +
call sub_101C9A8  +
pop ecx  +
pop ecx  +
jmp loc_1009E2B  +
push 50h  +
push offset aDW7rtmAdminWmi  +
push eax  +
push offset aCoinitializeex  +
call sub_10137B7  +
push 54h  +
push offset aDW7rtmAdminWmi  +
push eax  +
push offset aHr  +
jmp loc_100C3AD  +
push 58h  +
push offset aDW7rtmAdminWmi  +
push eax  +
push offset aJobstoreCreate  +
jmp loc_100C3AD  +
push 5Ch  +
push offset aDW7rtmAdminWmi  +
push eax  +
push offset aInitializecmdl  +
jmp loc_100C3AD  +
push 5Eh  +
push offset aDW7rtmAdminWmi  +
push eax  +
push offset aShutdownguardI  +
jmp loc_100C3AD  +
***
mov ecx [ebp-20h] +
mov eax [ecx] +
call dword ptr [eax]  +
mov ecx dword_1022110 +
xor edi edi +
push edi  +
push edi  +
push eax  +
push offset aRunsession  +
push dword ptr [ebp-14h]  +
mov [ebp-18h] eax +
push offset dword_100C680  +
call sub_1017234  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_100C611 +
retn   +
xor edi edi +
jmp loc_1002A4D  +
***
mov ecx [ebp-24h] +
mov eax [ecx] +
call dword ptr [eax]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [ebp-18h] eax +
mov eax offset loc_100C62C +
retn   +
***
xor edi edi +
jmp loc_1002A72  +
***
mov ecx [ebp-28h] +
mov eax [ecx] +
call dword ptr [eax]  +
mov ecx dword_1022110 +
xor edi edi +
mov [ebp-18h] eax +
cmp ecx edi +
jz loc_100C675  +
push edi  +
push edi  +
push eax  +
push offset aInitprocess  +
push dword ptr [ebp-14h]  +
push offset dword_100C680  +
call sub_1017234  +
mov eax offset loc_1002AB9 +
retn   +
***
sbb eax eax +
sbb eax 0FFFFFFFFh +
jmp loc_1001FFE  +
***
push edx  +
push edx  +
push edx  +
push edx  +
push edx  +
call sub_1014A8A  +
add esp 14h +
pop esi  +
retn   +
push ecx  +
call sub_1013693  +
jmp loc_1002635  +
mov [esi] eax +
jmp loc_100262D  +
***
push 8007000Eh  +
lea ecx [ebp+var_20] +
call sub_10127D1  +
push offset dword_101F214  +
lea eax [ebp+var_20] +
push eax  +
call _CxxThrowException  +
***
mov esi [esi+8] +
jmp loc_10022DA  +
***
mov ebx esi +
mov esi [esi] +
jmp loc_100231C  +
***
xor ecx ecx +
jmp loc_100A634  +
push 0  +
lea ecx [ebp+var_C] +
call sub_1012A0D  +
push offset dword_101F044  +
lea eax [ebp+var_C] +
push eax  +
call _CxxThrowException  +
int 3  +
***
test edi edi +
jz loc_100A09A  +
and dword ptr [edi] 0 +
jmp loc_100A09A  +
***
test eax eax +
jl loc_100C755  +
mov edx [ebp+arg_4] +
add edx edx +
mov [ecx] edx +
jmp loc_100A1E8  +
and dword ptr [ecx] 0 +
jmp loc_100A1E8  +
***
push eax  +
lea ecx [ebp+var_20] +
call sub_10127D1  +
push offset dword_101F214  +
lea eax [ebp+var_20] +
push eax  +
call _CxxThrowException  +
push eax  +
lea ecx [ebp+var_20] +
call sub_10127D1  +
push offset dword_101F214  +
lea eax [ebp+var_20] +
push eax  +
call _CxxThrowException  +
xor esi esi +
jmp loc_100A1AA  +
***
push esi  +
call sub_10014DF  +
pop ecx  +
jmp loc_10026A4  +
***
push offset loc_101110C  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1013308  +
jmp loc_10031E1  +
mov eax [esi+1Ch] +
push 0FFFFFFFFh  +
push eax  +
call edi  +
jmp loc_1003263  +
***
pop ecx  +
push 0  +
push 0  +
call _CxxThrowException  +
int 3  +
***
push offset aMapSetTTooLong  +
lea ecx [ebp-28h] +
call sub_1013225  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_1013189  +
push offset dword_101F0E8  +
lea eax [ebp-50h] +
push eax  +
call _CxxThrowException  +
cmp byte ptr [ebp+0Ch] 0 +
jz loc_100C949  +
mov [esi] ebx +
mov eax [edi+4] +
cmp esi [eax] +
jnz loc_100A793  +
mov [eax] ebx +
jmp loc_100A793  +
mov [esi+8] ebx +
mov eax [edi+4] +
cmp esi [eax+8] +
jz loc_100A790  +
jmp loc_100A793  +
mov ecx [eax] +
mov edx [ecx+4] +
cmp ecx [edx] +
jnz loc_100C99E  +
mov edx [edx+8] +
cmp byte ptr [edx+20h] 0 +
jz loc_100C9A6  +
cmp esi [ecx+8] +
jnz loc_100C97E  +
mov esi ecx +
push esi  +
mov ecx edi +
call sub_1013949  +
mov eax [esi+4] +
mov byte ptr [eax+20h] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
mov byte ptr [eax+20h] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_1013995  +
jmp loc_100C9EA  +
mov edx [edx] +
cmp byte ptr [edx+20h] 0 +
jnz loc_100C9BE  +
mov byte ptr [ecx+20h] 1 +
mov byte ptr [edx+20h] 1 +
mov ecx [eax] +
mov ecx [ecx+4] +
mov byte ptr [ecx+20h] 0 +
mov eax [eax] +
mov esi [eax+4] +
jmp loc_100C9EA  +
cmp esi [ecx] +
jnz loc_100C9CC  +
mov esi ecx +
push esi  +
mov ecx edi +
call sub_1013995  +
mov eax [esi+4] +
mov byte ptr [eax+20h] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
mov byte ptr [eax+20h] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_1013949  +
lea eax [esi+4] +
jmp loc_100A798  +
***
lea eax [esi+0Ch] +
push eax  +
push [ebp+arg_4]  +
mov ecx edi +
mov ebx esi +
call sub_1001FE2  +
mov byte ptr [ebp+var_8] al +
test al al +
jz loc_100CA10  +
mov esi [esi] +
jmp loc_100A6FD  +
mov esi [esi+8] +
jmp loc_100A6FD  +
lea ecx [ebp+var_4] +
call sub_10136B0  +
mov esi [ebp+var_4] +
push [ebp+arg_4]  +
lea eax [esi+0Ch] +
push eax  +
mov ecx edi +
call sub_1001FE2  +
test al al +
jz loc_100CA41  +
push [ebp+arg_4]  +
push ebx  +
push [ebp+var_8]  +
jmp loc_100A725  +
mov eax [ebp+arg_0] +
mov [eax] esi +
mov byte ptr [eax+4] 0 +
jmp loc_100A73B  +
***
push edi  +
mov edi ecx +
lea ecx [ebp+arg_4] +
call sub_100260F  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_1013FDC  +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jnz loc_100CA50  +
pop edi  +
jmp loc_1001873  +
***
push dword ptr [esi+8]  +
mov ecx ebx +
call sub_1001C73  +
mov esi [esi] +
push edi  +
call sub_10142A0  +
push edi  +
call sub_10014DF  +
cmp byte ptr [esi+15h] 0 +
pop ecx  +
mov edi esi +
jnz loc_1001C8C  +
jmp loc_100CA74  +
***
push esi  +
push offset loc_101110C  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101295A  +
jmp loc_10024D7  +
push dword ptr [ebx+1Ch]  +
call ds:SetEvent  +
jmp loc_100251B  +
***
push edi  +
mov edi ecx +
lea ecx [ebp+arg_4] +
call sub_101CD1A  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_1014441  +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jnz loc_100CAC2  +
pop edi  +
jmp loc_1001C2D  +
***
mov ecx [ebp-74h] +
mov eax 8007000Eh +
mov eax 80070057h +
mov eax 80070057h +
mov eax 80070057h +
mov eax 80004005h +
mov eax [ebp-78h] +
mov eax [eax+4] +
push offset aDW7rtmAdminW_0  +
push 322h  +
push offset aSessionStartjo  +
push eax  +
push offset a_com_error  +
push offset aCatch_knownSHr  +
mov [ebp-58h] eax +
call sub_101C9A8  +
and dword ptr [ebp-4] 0 +
add esp 18h +
mov eax offset loc_10075D3 +
retn   +
***
push ebx  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset loc_101110C  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101346D  +
jmp loc_1002457  +
***
push 44h  +
push offset aDW7rtmAdminW_0  +
call ds:__imp_GetLastError  +
push eax  +
push offset aCreateevent  +
call sub_10137B7  +
push 48h  +
jmp loc_100CD62  +
push 4Eh  +
jmp loc_100CD62  +
push 53h  +
push offset aDW7rtmAdminW_0  +
call ds:__imp_GetLastError  +
push eax  +
push offset aCreatewaitable  +
jmp loc_100CD73  +
push 57h  +
jmp loc_100CD82  +
push 62h  +
push offset aDW7rtmAdminW_0  +
call ds:__imp_GetLastError  +
push eax  +
push offset aGetusernameexN  +
jmp loc_100CD73  +
push 64h  +
push offset aDW7rtmAdminW_0  +
call ds:__imp_GetLastError  +
push eax  +
push offset aGetusernamee_0  +
jmp loc_100CD73  +
***
mov ecx [ebp-30h] +
mov eax 8007000Eh +
mov eax 80070057h +
mov eax 80070057h +
mov eax 80070057h +
mov eax 80004005h +
mov eax [ebp-34h] +
mov eax [eax+4] +
push offset aDW7rtmAdminW_0  +
push 2E0h  +
push offset aSessionChannel  +
push eax  +
push offset a_com_error  +
push offset aCatch_knownSHr  +
mov [ebp+8] eax +
call sub_101C9A8  +
add esp 18h +
mov eax offset loc_1007449 +
retn   +
***
mov ecx [ebp-34h] +
mov eax 8007000Eh +
mov eax 80070057h +
mov eax 80070057h +
mov eax 80070057h +
mov eax 80004005h +
mov eax [ebp-38h] +
mov eax [eax+4] +
push offset aDW7rtmAdminW_2  +
push 0E9h  +
push offset aClientchannel2  +
push eax  +
push offset a_com_error  +
push offset aCatch_knownSHr  +
mov [ebp-24h] eax +
call sub_101C9A8  +
add esp 18h +
mov eax offset loc_100D3D1 +
retn   +
jmp loc_100AAC7  +
***
mov eax 80004003h +
jmp loc_10029D2  +
***
mov ecx [ebp-14h] +
mov eax [ecx] +
call dword ptr [eax]  +
test eax eax +
jle loc_100D412  +
and eax 0FFFFh +
or eax 80070000h +
push offset aDW7rtmAdminW_2  +
push 13Fh  +
push offset aClientchanne_0  +
push eax  +
push offset dword_101124C  +
push offset aCatch_knownSHr  +
mov [ebp+0Ch] eax +
call sub_101C9A8  +
add esp 18h +
mov eax offset loc_100D43D +
retn   +
***
mov eax [ebp+0Ch] +
jmp loc_10029D2  +
***
push offset aDW7rtmAdminW_2  +
push 13Fh  +
mov eax 8007000Eh +
push offset aClientchanne_0  +
push eax  +
push offset dword_10111E8  +
push offset aCatch_knownSHr  +
mov [ebp+0Ch] eax +
call sub_101C9A8  +
add esp 18h +
mov eax offset loc_100D475 +
retn   +
***
jmp loc_100D43D  +
***
push offset aDW7rtmAdminW_2  +
push 13Fh  +
mov eax 80070057h +
push offset aClientchanne_0  +
push eax  +
push offset aStdInvalid_arg  +
push offset aCatch_knownSHr  +
mov [ebp+0Ch] eax +
call sub_101C9A8  +
add esp 18h +
mov eax offset loc_100D4A7 +
retn   +
***
jmp loc_100D43D  +
***
push offset aDW7rtmAdminW_2  +
push 13Fh  +
mov eax 80070057h +
push offset aClientchanne_0  +
push eax  +
push offset aStdLength_erro  +
push offset aCatch_knownSHr  +
mov [ebp+0Ch] eax +
call sub_101C9A8  +
add esp 18h +
mov eax offset loc_100D4D9 +
retn   +
***
jmp loc_100D43D  +
***
push offset aDW7rtmAdminW_2  +
push 13Fh  +
mov eax 80070057h +
push offset aClientchanne_0  +
push eax  +
push offset aStdOut_of_rang  +
push offset aCatch_knownSHr  +
mov [ebp+0Ch] eax +
call sub_101C9A8  +
add esp 18h +
mov eax offset loc_100D50E +
retn   +
***
jmp loc_100D43D  +
***
push offset aDW7rtmAdminW_2  +
push 13Fh  +
mov eax 80004005h +
push offset aClientchanne_0  +
push eax  +
push offset dword_1011198  +
push offset aCatch_knownSHr  +
mov [ebp+0Ch] eax +
call sub_101C9A8  +
add esp 18h +
mov eax offset loc_100D543 +
retn   +
***
jmp loc_100D43D  +
***
mov eax [ebp-18h] +
mov eax [eax+4] +
push offset aDW7rtmAdminW_2  +
push 13Fh  +
push offset aClientchanne_0  +
push eax  +
push offset a_com_error  +
push offset aCatch_knownSHr  +
mov [ebp+0Ch] eax +
call sub_101C9A8  +
add esp 18h +
mov eax offset loc_100D43D +
retn   +
***
mov ecx [ebp-18h] +
mov eax 8007000Eh +
mov eax 80070057h +
mov eax 80070057h +
mov eax 80070057h +
mov eax 80004005h +
mov eax [ebp-1Ch] +
mov eax [eax+4] +
push offset aDW7rtmAdminW_2  +
push 105h  +
push offset aClientchanne_1  +
push eax  +
push offset a_com_error  +
push offset aCatch_knownSHr  +
mov [ebp-14h] eax +
call sub_101C9A8  +
add esp 18h +
mov eax offset loc_10042CB +
retn   +
***
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1013308  +
mov eax off_10220C4 +
jmp loc_10032BE  +
***
cmp eax esi +
jz loc_100D7B5  +
test byte ptr [eax+1Ch] 80h +
jz loc_100D7B5  +
push ebx  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1013308  +
mov ecx [edi+4] +
mov eax [ecx] +
mov [ebp-14h] eax +
cmp eax ecx +
jz loc_100D801  +
add eax 1Ch +
push eax  +
lea ecx [ebp-10h] +
call sub_100A565  +
mov esi [ebp-10h] +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_1012C3A  +
or dword ptr [esi+8] 100h +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_1001AA5  +
and dword ptr [ebp-10h] 0 +
lea ecx [ebp-14h] +
call sub_100260F  +
mov eax [ebp-14h] +
cmp eax [edi+4] +
jnz loc_100D7C1  +
xor eax eax +
jmp loc_10032CC  +
***
movzx eax cx +
jmp loc_1005E1C  +
lea ecx [ebp+var_2C] +
push ecx  +
push 5  +
call eax  +
jmp loc_1005E27  +
push edi  +
call FreeLibrary  +
mov [ebp+hModule] esi +
jmp loc_1005E27  +
call GetLastError  +
cmp eax 7Eh +
jz loc_100D83C  +
cmp eax 0C1h +
jnz loc_100D86E  +
push 0  +
push 0FFFFFFFFh  +
push esi  +
call InterlockedCompareExchange  +
test eax eax +
jz loc_100D852  +
mov [ebp+hModule] eax +
jmp loc_1005E27  +
mov [ebp+var_4] 1 +
jmp loc_100D86E  +
call GetLastError  +
cmp eax 7Fh +
jnz loc_1005DB5  +
jmp loc_1005E50  +
push [ebp+lpProcName]  +
push ebx  +
call DelayLoadFailureHook  +
mov esi eax +
jmp loc_1005E5F  +
***
mov eax [ebp-14h] +
mov esp [ebp-18h] +
mov eax [ebp-28h] +
mov dword_10220EC eax +
xor ebx ebx +
cmp dword_10220E0 ebx +
jnz loc_100D915  +
push eax  +
call ds:_exit  +
***
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov eax 0FFh +
call sub_1001BBC  +
retn   +
***
cmp ecx 20Bh +
jnz loc_100ABBC  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_100ABBC  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_100AB5E  +
***
push offset sub_100954D  +
call ds:__setusermatherr  +
pop ecx  +
jmp loc_100ABB4  +
***
push 8  +
call _lock  +
pop ecx  +
and dword ptr [ebp-4] 0 +
mov eax dword_1022120 +
mov [ebp-1Ch] eax +
mov eax dword_102211C +
mov [ebp-20h] eax +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
push dword ptr [ebp+8]  +
call __dllonexit  +
add esp 0Ch +
mov [ebp-24h] eax +
mov eax [ebp-1Ch] +
mov dword_1022120 eax +
mov eax [ebp-20h] +
mov dword_102211C eax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_100D9DC  +
mov eax [ebp-24h] +
jmp loc_100AC4D  +
***
pop ecx  +
xor eax eax +
mov [ebp-1Ch] eax +
jmp loc_100AE6C  +
***
cmp ax 3 +
jnz loc_100AE1A  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
***
test eax ebx +
jz loc_10043A2  +
not eax  +
mov dword_10220CC eax +
jmp loc_10043F8  +
***
push 80004003h  +
call sub_1014768  +
jmp loc_1007E3C  +
***
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
jmp loc_100B2BA  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1009CAB  +
***
test edi edi +
jz loc_100639A  +
push edi  +
call ds:SysStringByteLen  +
push eax  +
push edi  +
call ds:SysAllocStringByteLen  +
mov [esi] eax +
test eax eax +
jnz loc_100639C  +
push 8007000Eh  +
call sub_1014768  +
jmp loc_100639C  +
***
test al 1 +
jnz loc_100AEF5  +
mov eax [esi+4] +
test eax eax +
jz loc_100AEF5  +
push dword ptr [esi]  +
push eax  +
call ds:SysAllocStringLen  +
test eax eax +
jnz loc_100DAA8  +
lea ecx [ebp+var_20] +
call sub_1012828  +
push offset dword_101F024  +
lea eax [ebp+var_20] +
push eax  +
call _CxxThrowException  +
or byte ptr [esi+40Ah] 1 +
mov [esi+4] eax +
jmp loc_100AEF8  +
***
lea ecx [ebp+var_20] +
call sub_1012828  +
push offset dword_101F024  +
lea eax [ebp+var_20] +
push eax  +
call _CxxThrowException  +
mov eax [edi] +
mov [ebp+FileTime.dwLowDateTime] eax +
mov eax [edi+4] +
mov [ebp+FileTime.dwHighDateTime] eax +
push edi  +
lea eax [ebp+FileTime] +
push eax  +
call ds:FileTimeToLocalFileTime  +
test eax eax +
jnz loc_100ADDE  +
lea ecx [ebp+var_28] +
call sub_1014EB7  +
push offset dword_101F214  +
lea eax [ebp+var_28] +
push eax  +
call _CxxThrowException  +
***
push offset dword_10113D8  +
push 1Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1013308  +
jmp loc_1005CF3  +
mov cl [ebp+arg_8] +
jmp loc_1005D04  +
xor eax eax +
jmp loc_1005D60  +
cmp [eax] ecx +
jnb loc_100DB20  +
mov eax 80041318h +
jmp loc_1005D60  +
***
push offset dword_10113D8  +
push 1Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1013308  +
jmp loc_1005863  +
***
mov edx [ebp+arg_0] +
mov eax ecx +
xor ecx ecx +
mov [edx] cx +
jmp loc_10044D5  +
***
mov eax 80070057h +
jmp loc_100AFC8  +
***
push 8007000Eh  +
call sub_1014768  +
jmp loc_1006366  +
***
xor eax eax +
jmp loc_1006A5F  +
***
xor eax eax +
jmp loc_100AF68  +
test byte ptr [esi+40Ah] 2 +
jnz loc_100AF41  +
push eax  +
push dword ptr [esi+4]  +
lea ecx [esi+8] +
push ebx  +
push ecx  +
call sub_1004499  +
test eax eax +
jl loc_100AF67  +
lea eax [esi+8] +
mov [esi+4] eax +
jmp loc_100AF41  +
mov eax [esi] +
add eax ecx +
push eax  +
push 0  +
call ds:SysAllocStringLen  +
mov ebx eax +
test ebx ebx +
jnz loc_100DBD9  +
lea ecx [ebp+var_20] +
call sub_1012828  +
push offset dword_101F024  +
lea eax [ebp+var_20] +
push eax  +
call _CxxThrowException  +
mov eax [esi] +
test eax eax +
jz loc_100DBF7  +
mov ecx [edi] +
push eax  +
push dword ptr [esi+4]  +
lea eax [ecx+eax+1] +
push eax  +
push ebx  +
call sub_1004499  +
mov [ebp+arg_0] eax +
test eax eax +
jl loc_100DC11  +
mov eax [edi] +
push eax  +
push dword ptr [edi+4]  +
inc eax  +
push eax  +
mov eax [esi] +
lea eax [ebx+eax*2] +
push eax  +
call sub_1004499  +
mov [ebp+arg_0] eax +
test eax eax +
jge loc_100DC20  +
push ebx  +
call ds:SysFreeString  +
mov eax [ebp+arg_0] +
jmp loc_100AF67  +
test byte ptr [esi+40Ah] 1 +
jz loc_100DC32  +
push dword ptr [esi+4]  +
call ds:SysFreeString  +
and byte ptr [esi+40Ah] 0FDh +
mov al [esi+40Ah] +
xor ecx ecx +
mov [esi+8] cx +
mov [esi+4] ebx +
mov ecx [edi] +
add [esi] ecx +
or al 1 +
mov [esi+40Ah] al +
jmp loc_100AF65  +
***
lea eax [edi-1] +
xor ecx ecx +
mov [esi] eax +
mov [ebx+eax*2] cx +
cmp [esi] ecx +
jbe loc_1004513  +
jmp loc_10044F9  +
***
push offset dword_10113D8  +
push 24h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1013308  +
jmp loc_1007C87  +
push eax  +
mov ecx esi +
call sub_1014E93  +
jmp loc_1007E16  +
mov al [esi+42Ch] +
mov [ebp-41Dh] al +
jmp loc_1007CE2  +
cmp eax 4 +
jz loc_1007D1B  +
cmp eax 0Fh +
jz loc_1007E14  +
cmp eax 1 +
jnz loc_1007CF0  +
mov ecx edi +
call sub_1007E2E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+50h]  +
test eax eax +
jnz loc_1007CF0  +
jmp loc_100DD1F  +
cmp eax 4 +
jz loc_1007DEA  +
cmp eax 0Dh +
jz loc_1007DEA  +
jmp loc_100DD14  +
lea ecx [ebp-41Ch] +
call sub_10095CF  +
mov ecx [ebp-42Ch] +
push esi  +
jmp loc_100DC8B  +
lea ecx [ebp-41Ch] +
mov esi eax +
call sub_10095CF  +
mov eax esi +
jmp loc_1007E16  +
lea ecx [ebp-41Ch] +
call sub_10095CF  +
mov eax 80041316h +
jmp loc_1007E16  +
***
push offset dword_10113D8  +
push 27h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1013308  +
jmp loc_1005C7A  +
push 1  +
push offset dword_100DD78  +
mov ecx esi +
call sub_10051CD  +
test al al +
jnz loc_1005CBF  +
push 1  +
push offset dword_10113E8  +
mov ecx esi +
call sub_10051CD  +
test al al +
jnz loc_1005CB1  +
mov eax 80041318h +
jmp loc_1005CB9  +
***
push offset dword_10113D8  +
push 2Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1013308  +
jmp loc_1005157  +
mov dword ptr [edi] 4000h +
jmp loc_10051B9  +
mov dword ptr [edi] 40000h +
jmp loc_10051B9  +
push 1Ah  +
push offset aInteractivet_0  +
mov ecx esi +
call sub_10051CD  +
test al al +
jz loc_10051C1  +
mov dword ptr [edi] 80000h +
jmp loc_10051B9  +
***
push offset dword_10113D8  +
push 2Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1013308  +
jmp loc_100B0BA  +
push 10h  +
push offset aHighestavailab  +
mov ecx esi +
call sub_10051CD  +
test al al +
jz loc_100B0F6  +
mov dword ptr [edi] offset __ImageBase +
jmp loc_100B0ED  +
***
push 0  +
jmp loc_1009C76  +
push 0  +
call sub_100B294  +
mov esi 80004002h +
jmp loc_1009C7B  +
***
push offset dword_10113D8  +
push 1Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1013308  +
jmp loc_1007BEA  +
***
push offset dword_10113D8  +
push 1Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1013308  +
jmp loc_1005645  +
mov [ebp+var_8] 1 +
jmp loc_100568C  +
cmp [ebp+SystemTime.wMinute] 0 +
jnz loc_1005830  +
cmp [ebp+SystemTime.wSecond] 0 +
jnz loc_1005830  +
xor eax eax +
mov [ebp+SystemTime.wHour] ax +
mov [ebp+var_1] 1 +
jmp loc_10057EA  +
mov ecx [esi+24h] +
cmp word ptr [ecx+edi*2] 2Eh +
jnz loc_10057F7  +
inc edi  +
cmp edi eax +
jnb loc_10057F7  +
mov eax [esi+24h] +
movzx eax word ptr [eax+edi*2] +
push eax  +
call ds:iswdigit  +
pop ecx  +
test eax eax +
jz loc_10057F7  +
inc edi  +
cmp edi [ebx] +
jnb loc_10057F7  +
jmp loc_100DE90  +
push 0  +
push 15180h  +
lea ecx [ebp+var_34] +
call sub_101500D  +
jmp loc_100580F  +
sub eax edi +
cmp eax 1 +
mov eax [esi+24h] +
jnz loc_100DEE0  +
cmp word ptr [eax+edi*2] 5Ah +
jz loc_100581D  +
jmp loc_1005830  +
and [ebp+var_C] 0 +
and [ebp+var_10] 0 +
xor bl bl +
cmp word ptr [eax+edi*2] 2Bh +
jnz loc_100DEF7  +
inc edi  +
mov [ebp+var_8] edi +
jmp loc_100DF0A  +
mov ecx edi +
inc edi  +
cmp word ptr [eax+ecx*2] 2Dh +
mov [ebp+var_8] edi +
jnz loc_1005830  +
mov bl 1 +
push 0  +
push 2  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
call sub_100583C  +
test eax eax +
jl loc_1005829  +
cmp word ptr [ebp+var_C] 0Eh +
ja loc_1005830  +
movzx edi word ptr [ebp+var_C] +
cmp edi 0FFFFFFF2h +
jl loc_1005830  +
mov eax [ebp+var_14] +
mov ecx [ebp+var_8] +
cmp ecx [eax] +
jnb loc_1005830  +
inc [ebp+var_8]  +
mov eax ecx +
mov ecx [esi+24h] +
cmp word ptr [ecx+eax*2] 3Ah +
jnz loc_1005830  +
push 0  +
push 2  +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
call sub_100583C  +
test eax eax +
jl loc_1005829  +
cmp word ptr [ebp+var_10] 3Bh +
ja loc_1005830  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_14] +
cmp eax [ecx] +
jnz loc_1005830  +
movzx eax word ptr [ebp+var_10] +
imul edi edi +
add edi eax +
imul edi edi +
test bl bl +
jz loc_100DFA4  +
neg edi  +
push edi  +
lea ecx [ebp+var_34] +
call sub_1014DC2  +
jmp loc_100581D  +
***
push offset dword_10113D8  +
push 1Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1013308  +
jmp loc_1006486  +
mov eax 80041318h +
jmp loc_100652C  +
push 4  +
push 1  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
mov ecx esi +
call sub_1005CCC  +
test eax eax +
jl loc_100652B  +
mov eax [ebp+arg_0] +
cmp eax [edi] +
jnb loc_1006543  +
mov edx [esi+24h] +
mov ecx eax +
movzx ecx word ptr [edx+ecx*2] +
inc eax  +
sub ecx 44h +
mov [ebp+arg_0] eax +
jnz loc_100E034  +
mov ecx [ebp+var_4] +
imul ecx ecx +
add [ebx] ecx +
cmp eax [edi] +
jnb loc_10064CE  +
jmp loc_10064C0  +
cmp eax 53h +
jnz loc_1006543  +
mov eax [ebp+var_4] +
jmp loc_1006523  +
sub ecx 9 +
jz loc_1006543  +
sub ecx 0Ah +
jz loc_1006543  +
dec ecx  +
dec ecx  +
jmp loc_1006543  +
***
push offset dword_10113D8  +
push 21h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1013308  +
jmp loc_100B170  +
mov dword ptr [edi] 400h +
jmp loc_100B1CD  +
mov dword ptr [edi] 1000h +
jmp loc_100B1CD  +
push 0Ch  +
push offset aStopexisting  +
mov ecx esi +
call sub_10051CD  +
test al al +
jz loc_100E097  +
mov dword ptr [edi] 800h +
jmp loc_100B1CD  +
mov eax 80041318h +
jmp loc_100B1CF  +
***
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_100E0DF  +
test dword ptr [eax+1Ch] 100h +
jz loc_100E0DF  +
push [ebp+arg_0]  +
lea ecx [esi+430h] +
call sub_10055C6  +
push ebx  +
push dword ptr [eax+4]  +
mov eax off_10220C4 +
push offset dword_10113D8  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101ABE7  +
push ebx  +
mov ecx esi +
call sub_1014E93  +
push eax  +
mov ecx esi +
call sub_1015BDF  +
jmp loc_1005F29  +
push [ebp+arg_0]  +
mov ecx ebx +
call sub_10055C6  +
push dword ptr [eax+4]  +
push offset dword_10113D8  +
push 0Eh  +
mov eax off_10220C4 +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101332E  +
jmp loc_1005F27  +
push [ebp+arg_0]  +
mov ecx ebx +
call sub_10055C6  +
push dword ptr [eax+4]  +
push offset dword_10113D8  +
push 0Fh  +
jmp loc_100E108  +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_100E16C  +
test dword ptr [eax+1Ch] 100h +
jz loc_100E16C  +
push [ebp+arg_0]  +
mov ecx ebx +
call sub_10055C6  +
push dword ptr [eax+4]  +
mov eax off_10220C4 +
push offset dword_10113D8  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101332E  +
push edi  +
push [ebp+arg_0]  +
mov ecx esi +
push 80041317h  +
call sub_1015B11  +
jmp loc_1005F29  +
***
push offset dword_10113D8  +
push 29h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1013308  +
jmp loc_100846C  +
mov eax [ebp+8] +
mov dword ptr [eax] 10000h +
jmp loc_10084D2  +
mov eax [ebp+8] +
mov dword ptr [eax] 10001h +
jmp loc_10084D2  +
push dword ptr [ebx]  +
mov eax [esi+24h] +
push offset a1_3  +
push eax  +
call edi  +
add esp 0Ch +
test eax eax +
jnz loc_100E2A5  +
mov eax [ebp+8] +
mov dword ptr [eax] 10003h +
jmp loc_10084D2  +
lea edi [esi+0Ch] +
xor ebx ebx +
cmp [edi] ebx +
jz loc_100E1F1  +
mov eax [edi] +
cmp eax ebx +
jz loc_100E1F1  +
mov [edi] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push 14h  +
call sub_100150F  +
pop ecx  +
mov [ebp-18h] eax +
mov [ebp-4] ebx +
cmp eax ebx +
jz loc_100E20C  +
mov ecx eax +
call sub_10159FD  +
jmp loc_100E20E  +
xor eax eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
push eax  +
mov ecx edi +
call sub_10164A5  +
cmp [edi] ebx +
jnz loc_100E228  +
mov eax 8007000Eh +
jmp loc_10084DE  +
mov ecx [esi+8] +
xor ebx ebx +
inc ebx  +
test ecx ecx +
jz loc_100E23C  +
push ebx  +
call sub_1012E8D  +
and dword ptr [esi+8] 0 +
push 90h  +
call sub_100150F  +
pop ecx  +
mov [ebp-18h] eax +
mov [ebp-4] ebx +
test eax eax +
jz loc_100E277  +
mov eax [ebp+8] +
mov eax [eax] +
push edi  +
lea ecx [ebp+8] +
mov [ebp-14h] eax +
call sub_1015E43  +
mov ecx [ebp-18h] +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp+8] +
push eax  +
mov [ebp-10h] ebx +
call sub_1015116  +
jmp loc_100E279  +
xor eax eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [esi+8] eax +
test [ebp-10h] bl +
jz loc_100E292  +
mov eax [ebp+8] +
test eax eax +
jz loc_100E292  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov esi [esi+8] +
test esi esi +
jz loc_100E21E  +
mov ecx esi +
call sub_10164C3  +
jmp loc_10084E6  +
mov eax 80041318h +
jmp loc_10084DE  +
***
push offset dword_10113D8  +
push 2Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1013308  +
jmp loc_100B21D  +
push eax  +
mov ecx esi +
call sub_1014E93  +
jmp loc_100B289  +
push eax  +
mov ecx esi +
call sub_1014E93  +
mov esi eax +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_100E2F7  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
jmp loc_100B289  +
push 14h  +
call sub_100150F  +
pop ecx  +
mov ecx eax +
mov [ebp-24h] ecx +
mov byte ptr [ebp-4] 1 +
cmp ecx ebx +
jz loc_100E31A  +
call sub_10159FD  +
jmp loc_100E31C  +
xor eax eax +
lea edi [esi+0Ch] +
push eax  +
mov ecx edi +
mov [ebp-4] bl +
call sub_10164A5  +
cmp [edi] ebx +
jnz loc_100E349  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_100E33F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax 8007000Eh +
jmp loc_100B289  +
mov ecx [esi+8] +
cmp ecx ebx +
jz loc_100E357  +
push 1  +
call sub_1012E8D  +
push 90h  +
call sub_100150F  +
pop ecx  +
mov [ebp-24h] eax +
mov byte ptr [ebp-4] 2 +
cmp eax ebx +
jz loc_100E396  +
push edi  +
lea ecx [ebp-1Ch] +
mov dword ptr [ebp-20h] 10003h +
call sub_1015E43  +
mov ecx [ebp-24h] +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
mov dword ptr [ebp-18h] 1 +
call sub_1015116  +
jmp loc_100E398  +
xor eax eax +
test byte ptr [ebp-18h] 1 +
mov [ebp-4] bl +
mov [esi+8] eax +
jz loc_100E3B1  +
mov eax [ebp-1Ch] +
cmp eax ebx +
jz loc_100E3B1  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [esi+8] +
cmp ecx ebx +
jz loc_100E32E  +
call sub_10164C3  +
mov esi eax +
cmp esi ebx +
jge loc_100B276  +
jmp loc_100E2E6  +
***
call sub_10055C6  +
push dword ptr [eax+4]  +
mov eax off_10220C4 +
push offset dword_10113D8  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101332E  +
jmp loc_100597D  +
***
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+0Ch]  +
test eax eax +
jz loc_100E58C  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+0Ch]  +
push eax  +
jmp loc_100E58D  +
push ebx  +
push [ebp+arg_0]  +
mov ecx edi +
call sub_1015B84  +
jmp loc_10059C9  +
cmp ebx 1 +
jz loc_10059C6  +
mov ecx [edi+8] +
push ebx  +
call sub_10161A6  +
jmp loc_10059C3  +
***
push [ebp+arg_4]  +
lea ecx [esi+430h] +
call sub_10055C6  +
push dword ptr [eax+4]  +
mov eax off_10220C4 +
push offset dword_10113D8  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101332E  +
jmp loc_100524B  +
push 1Ch  +
pop ebx  +
push [ebp+arg_4]  +
lea ecx [esi+430h] +
call sub_10055C6  +
mov edi [eax+ebx] +
test edi edi +
jz loc_100E630  +
push edi  +
lea ecx [esi+430h] +
call sub_10055C6  +
cmp dword ptr [eax+0Ch] 2 +
jnz loc_100E610  +
cmp dword ptr [eax+14h] 0 +
jz loc_100E616  +
cmp dword ptr [eax+14h] 0 +
jnz loc_100E620  +
add ebx 4 +
cmp ebx 6Ch +
jnb loc_100E630  +
jmp loc_100E5E3  +
push edi  +
push 80041319h  +
mov ecx esi +
call sub_1015B84  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
jmp loc_10052FF  +
push [ebp+arg_4]  +
lea ecx [esi+430h] +
call sub_10055C6  +
mov ecx [ebp+var_C] +
push off_102CE40[ecx*4]  +
push dword ptr [eax+4]  +
mov eax off_10220C4 +
push offset dword_10113D8  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1014EEB  +
jmp loc_100528C  +
lea eax [esi+20h] +
push eax  +
push 80041316h  +
mov ecx esi +
call sub_1015BFB  +
jmp loc_10052FF  +
mov ecx edi +
call sub_1007E2E  +
lea edi [esi+20h] +
mov ecx edi +
mov ebx eax +
call sub_10095CF  +
mov eax [ebx] +
push edi  +
lea ecx [edi+4] +
push ecx  +
push ebx  +
call dword ptr [eax+40h]  +
test eax eax +
jl loc_100E771  +
mov ecx edi +
call sub_10150E9  +
test eax eax +
jl loc_100E786  +
cmp dword ptr [edi] 0 +
jz loc_1005259  +
cmp [ebp+arg_4] 21h +
jnz loc_100E786  +
mov ecx edi +
call sub_10095CF  +
push edi  +
mov ecx esi +
call sub_1007C4E  +
test eax eax +
jge loc_100E6EE  +
push 21h  +
push eax  +
mov ecx esi +
call sub_1015B84  +
jmp loc_1005259  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
mov byte ptr [ebp+var_34] 0 +
call ds:GetSystemTimeAsFileTime  +
mov [ebp+var_14] edi +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_100E72B  +
mov ebx [ebp+arg_C] +
movzx ecx byte ptr [ebx] +
mov eax [edi] +
push ecx  +
lea ecx [ebp+var_34] +
push ecx  +
push 21h  +
lea ecx [esi+430h] +
push ecx  +
mov ecx edi +
call dword ptr [eax+4]  +
mov [ebp+var_4] eax +
mov byte ptr [ebx] 1 +
test eax eax +
jl loc_100E79E  +
cmp byte ptr [esi+15h] 0 +
jz loc_1005259  +
mov eax [ebp+var_14] +
push dword ptr [eax+4]  +
mov ecx [esi+8] +
call sub_101620B  +
jmp loc_1005259  +
lea eax [ebp+ecx*8+var_D0] +
inc dword ptr [eax]  +
mov eax [eax] +
mov ecx [ebp+var_4] +
cmp eax [ecx+18h] +
jbe loc_1005259  +
push ebx  +
push 8004131Dh  +
mov ecx esi +
call sub_1015B84  +
jmp loc_10052FF  +
push eax  +
mov ecx esi +
call sub_1014E93  +
push eax  +
mov ecx esi +
call sub_1015BDF  +
jmp loc_10052FF  +
lea eax [esi+20h] +
push eax  +
push [ebp+arg_4]  +
push 80041318h  +
mov ecx esi +
call sub_1015B11  +
jmp loc_10052FF  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+0Ch]  +
test eax eax +
lea eax [esi+20h] +
push eax  +
jz loc_100E7BA  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+0Ch]  +
push eax  +
push [ebp+var_4]  +
jmp loc_100E792  +
push 21h  +
jmp loc_100E7B5  +
push ebx  +
jmp loc_100E772  +
push edi  +
push 80041319h  +
jmp loc_100E765  +
***
push offset dword_10113D8  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1013308  +
jmp loc_1006725  +
mov ecx [ebp+var_8] +
push off_102CE40[ecx*4]  +
push offset dword_10113D8  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101332E  +
jmp loc_100676B  +
lea edi [esi+20h] +
mov ecx edi +
call sub_10095CF  +
push edi  +
jmp loc_100E874  +
mov ecx edi +
call sub_1007E2E  +
lea edi [esi+20h] +
mov ecx edi +
mov ebx eax +
call sub_10095CF  +
mov eax [ebx] +
push edi  +
lea ecx [edi+4] +
push ecx  +
push ebx  +
call dword ptr [eax+40h]  +
xor ebx ebx +
cmp eax ebx +
jl loc_100E85B  +
mov ecx edi +
call sub_10150E9  +
test eax eax +
jl loc_100E845  +
cmp [edi] ebx +
jz loc_1006736  +
lea eax [esi+20h] +
push eax  +
push ebx  +
push 80041318h  +
mov ecx esi +
call sub_1015B11  +
jmp loc_1006812  +
push eax  +
mov ecx esi +
call sub_1014E93  +
push eax  +
mov ecx esi +
call sub_1015BDF  +
jmp loc_1006812  +
lea eax [esi+20h] +
push eax  +
push 80041316h  +
mov ecx esi +
call sub_1015BFB  +
jmp loc_1006812  +
mov ecx [esi+8] +
call sub_10163CB  +
jmp loc_1004532  +
***
lea ebx [ebp+14h] +
jmp loc_1006AB7  +
***
mov eax 80030009h +
jmp loc_1006B11  +
***
xor eax eax +
inc eax  +
jmp loc_1006B10  +
***
xor eax eax +
jmp loc_1006B10  +
***
mov eax 8007007Ah +
jmp loc_1006B0F  +
***
cmp eax 80004002h +
jz loc_1009C37  +
push eax  +
call sub_1014768  +
jmp loc_1009C37  +
***
mov eax 80070057h +
jmp locret_1009C12  +
lea ecx [ebp+var_20] +
call sub_1012828  +
push offset dword_101F024  +
lea eax [ebp+var_20] +
push eax  +
call _CxxThrowException  +
***
movzx ecx cx +
shl ecx 2 +
mov edx ds:dword_100E930[ecx] +
xor eax eax +
test edx edx +
jbe loc_1005604  +
mov ecx off_102C7C0[ecx] +
mov esi ecx +
mov edi [esi] +
cmp edi [ebp+arg_0] +
jz loc_100E926  +
inc eax  +
add esi 6Ch +
cmp eax edx +
jnb loc_1005604  +
jmp loc_100E911  +
imul eax eax +
add eax ecx +
jmp loc_10055FE  +
***
push edi  +
push ecx  +
push dword ptr [esi+8]  +
lea eax [ebp+var_4] +
push [ebp+arg_8]  +
push eax  +
call sub_1016873  +
mov edi [eax] +
add esp 10h +
push esi  +
push dword ptr [esi+8]  +
push edi  +
call sub_10132E9  +
mov ecx [ebp+arg_4] +
mov [esi+8] edi +
pop edi  +
jmp loc_100B333  +
***
push dword ptr [ebp+0Ch]  +
mov ecx [ebp+8] +
call sub_10055C6  +
push dword ptr [eax+4]  +
mov eax off_10220C4 +
push offset dword_1011C3C  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101332E  +
jmp loc_1005FA6  +
***
mov ecx [ebp+8] +
push esi  +
call sub_10055C6  +
push dword ptr [eax+4]  +
mov eax off_10220C4 +
push offset dword_1011C3C  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101332E  +
jmp loc_1006251  +
***
lea eax [ebp+10h] +
push eax  +
mov eax [ebp+10h] +
mov ecx [eax+20h] +
call sub_10062E2  +
push eax  +
lea ecx [edi+10h] +
call sub_10060E1  +
mov ecx [ebp+10h] +
jmp loc_1006217  +
***
lea eax [ebp+8] +
push eax  +
mov eax [ebp+10h] +
mov ecx [eax+20h] +
call sub_10062E2  +
push eax  +
lea ecx [edi+10h] +
call sub_10060E1  +
mov ecx [ebp+8] +
jmp loc_1006217  +
***
lea eax [ebp-10h] +
push eax  +
mov eax [ebp+10h] +
mov ecx [eax+20h] +
call sub_10062E2  +
push eax  +
lea ecx [edi+14h] +
call sub_10060E1  +
mov ecx [ebp-10h] +
jmp loc_1006217  +
***
lea eax [ebp-14h] +
push eax  +
mov eax [ebp+10h] +
mov ecx [eax+20h] +
call sub_10062E2  +
push eax  +
lea ecx [edi+30h] +
call sub_10060E1  +
mov ecx [ebp-14h] +
jmp loc_1006217  +
***
lea eax [ebp-18h] +
push eax  +
mov eax [ebp+10h] +
mov ecx [eax+20h] +
call sub_10062E2  +
push eax  +
lea ecx [edi+2Ch] +
call sub_10060E1  +
mov ecx [ebp-18h] +
jmp loc_1006217  +
***
mov esi [ebp+10h] +
add esi 10h +
add edi 1Ch +
movs   +
movs   +
movs   +
movs   +
jmp loc_1006296  +
***
lea eax [ebp-20h] +
push eax  +
mov eax [ebp+10h] +
mov ecx [eax+20h] +
call sub_10062E2  +
push eax  +
lea ecx [edi+34h] +
call sub_10060E1  +
mov ecx [ebp-20h] +
jmp loc_1006217  +
***
lea eax [esi-75h] +
cmp eax 0Dh +
ja loc_1006296  +
jmp ds:off_100EBED[eax*4]  +
lea eax [ebp-24h] +
push eax  +
mov eax [ebp+10h] +
mov ecx [eax+20h] +
call sub_10062E2  +
push eax  +
lea ecx [edi+38h] +
call sub_10060E1  +
mov ecx [ebp-24h] +
jmp loc_1006217  +
***
lea eax [ebp-28h] +
push eax  +
mov eax [ebp+10h] +
mov ecx [eax+20h] +
call sub_10062E2  +
push eax  +
lea ecx [edi+3Ch] +
call sub_10060E1  +
mov ecx [ebp-28h] +
jmp loc_1006217  +
***
lea eax [ebp-2Ch] +
push eax  +
mov eax [ebp+10h] +
mov ecx [eax+20h] +
call sub_10062E2  +
push eax  +
lea ecx [edi+40h] +
call sub_10060E1  +
mov ecx [ebp-2Ch] +
jmp loc_1006217  +
***
lea eax [ebp-30h] +
push eax  +
mov eax [ebp+10h] +
mov ecx [eax+20h] +
call sub_10062E2  +
push eax  +
lea ecx [edi+44h] +
call sub_10060E1  +
mov ecx [ebp-30h] +
jmp loc_1006217  +
***
lea eax [ebp-34h] +
push eax  +
mov eax [ebp+10h] +
mov ecx [eax+20h] +
call sub_10062E2  +
push eax  +
lea ecx [edi+48h] +
call sub_10060E1  +
mov ecx [ebp-34h] +
jmp loc_1006217  +
***
lea eax [ebp-38h] +
push eax  +
mov eax [ebp+10h] +
mov ecx [eax+20h] +
call sub_10062E2  +
and dword ptr [ebp-4] 0 +
push eax  +
lea ecx [edi+54h] +
call sub_1016BD0  +
mov ecx [ebp-38h] +
jmp loc_1006217  +
***
lea eax [ebp-3Ch] +
push eax  +
mov eax [ebp+10h] +
mov ecx [eax+20h] +
call sub_10062E2  +
push eax  +
lea ecx [edi+84h] +
call sub_10060E1  +
mov ecx [ebp-3Ch] +
jmp loc_1006217  +
***
lea eax [ebp-40h] +
push eax  +
mov eax [ebp+10h] +
mov ecx [eax+20h] +
call sub_10062E2  +
push eax  +
lea ecx [edi+88h] +
call sub_10060E1  +
mov ecx [ebp-40h] +
jmp loc_1006217  +
***
lea eax [ebp-44h] +
push eax  +
mov eax [ebp+10h] +
mov ecx [eax+20h] +
call sub_10062E2  +
push eax  +
lea ecx [edi+4Ch] +
call sub_10060E1  +
mov ecx [ebp-44h] +
jmp loc_1006217  +
***
lea eax [ebp-48h] +
push eax  +
mov eax [ebp+10h] +
mov ecx [eax+20h] +
call sub_10062E2  +
push eax  +
lea ecx [edi+50h] +
call sub_10060E1  +
mov ecx [ebp-48h] +
jmp loc_1006217  +
***
push dword ptr [ebp+0Ch]  +
mov ecx [ebp+8] +
call sub_10055C6  +
push dword ptr [eax+4]  +
mov eax off_10220C4 +
push offset dword_1011C3C  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101332E  +
jmp loc_100662B  +
***
push 30h  +
call sub_100150F  +
pop ecx  +
mov [ebp-24h] eax +
mov byte ptr [ebp-4] 0Ah +
cmp eax ebx +
jz loc_100EC9C  +
mov eax [esi+4] +
mov eax [eax+4] +
cmp eax ebx +
jz loc_100EC70  +
mov eax [eax] +
jmp loc_100EC72  +
xor eax eax +
push eax  +
lea ecx [ebp-1Ch] +
call sub_100997E  +
mov ecx [ebp-24h] +
lea eax [esi+50h] +
push eax  +
lea eax [esi+4Ch] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
lea eax [esi+8] +
push eax  +
mov dword ptr [ebp-10h] 8 +
call sub_1016748  +
jmp loc_100EC9E  +
xor eax eax +
test byte ptr [ebp-10h] 8 +
mov [ebp-4] bl +
mov [ebp-14h] eax +
jz loc_100665D  +
mov ecx [ebp-1Ch] +
cmp ecx ebx +
jz loc_100665D  +
call sub_1001A04  +
jmp loc_100665D  +
***
lea edi [esi+84h] +
push edi  +
lea ecx [esi+64h] +
call sub_1016BD0  +
lea eax [ebp-24h] +
push eax  +
mov ecx edi +
mov [ebp-24h] ebx +
call sub_10060E1  +
lea edi [esi+88h] +
push edi  +
lea ecx [esi+74h] +
call sub_1016BD0  +
lea eax [ebp-24h] +
push eax  +
mov ecx edi +
mov [ebp-24h] ebx +
call sub_10060E1  +
jmp loc_100665D  +
***
push 70h  +
call sub_100150F  +
pop ecx  +
mov [ebp-24h] eax +
mov byte ptr [ebp-4] 7 +
cmp eax ebx +
jz loc_100ED73  +
mov eax [esi+4] +
mov eax [eax+4] +
cmp eax ebx +
jz loc_100ED23  +
mov eax [eax] +
jmp loc_100ED25  +
xor eax eax +
push eax  +
lea ecx [ebp+0Ch] +
call sub_100997E  +
lea eax [esi+74h] +
push eax  +
lea eax [esi+64h] +
push eax  +
lea eax [esi+54h] +
push eax  +
mov ecx [ebp-24h] +
lea eax [esi+48h] +
push eax  +
lea eax [esi+44h] +
push eax  +
lea eax [esi+40h] +
push eax  +
lea eax [esi+3Ch] +
push eax  +
lea eax [esi+38h] +
push eax  +
lea eax [esi+34h] +
push eax  +
lea eax [esi+30h] +
push eax  +
lea eax [esi+2Ch] +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
lea eax [esi+8] +
push eax  +
mov byte ptr [ebp-4] 8 +
mov [ebp-10h] edi +
call sub_101A1A2  +
jmp loc_100ED75  +
xor eax eax +
test byte ptr [ebp-10h] 4 +
mov [ebp-14h] eax +
mov [ebp-4] ebx +
jz loc_100665D  +
mov ecx [ebp+0Ch] +
cmp ecx ebx +
jz loc_100665D  +
call sub_1001A04  +
mov [ebp+0Ch] ebx +
jmp loc_100665D  +
***
push 3Ch  +
call sub_100150F  +
pop ecx  +
mov [ebp-24h] eax +
mov byte ptr [ebp-4] 4 +
cmp eax ebx +
jz loc_100EDEE  +
mov eax [esi+4] +
mov eax [eax+4] +
cmp eax ebx +
jz loc_100EDBE  +
mov eax [eax] +
jmp loc_100EDC0  +
xor eax eax +
push eax  +
lea ecx [ebp+8] +
call sub_100997E  +
mov ecx [ebp-24h] +
lea eax [esi+10h] +
push eax  +
lea eax [esi+1Ch] +
push eax  +
lea eax [ebp+8] +
push eax  +
lea eax [esi+8] +
push eax  +
mov byte ptr [ebp-4] 5 +
mov dword ptr [ebp-10h] 2 +
call sub_1016671  +
jmp loc_100EDF0  +
xor eax eax +
test byte ptr [ebp-10h] 2 +
mov [ebp-14h] eax +
mov [ebp-4] ebx +
jz loc_100665D  +
mov ecx [ebp+8] +
cmp ecx ebx +
jz loc_100665D  +
call sub_1001A04  +
mov [ebp+8] ebx +
jmp loc_100665D  +
***
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
jmp loc_10045DC  +
***
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
jmp loc_1004601  +
***
call sub_10170F0  +
jmp loc_10096FD  +
***
push ecx  +
push [ebp+lpsz]  +
call ds:IIDFromString  +
test eax eax +
jge locret_100A94C  +
push eax  +
lea ecx [ebp+var_20] +
call sub_10127D1  +
push offset dword_101F214  +
lea eax [ebp+var_20] +
push eax  +
call _CxxThrowException  +
int 3  +
***
push 8007000Eh  +
call sub_1014768  +
jmp loc_10092C0  +
mov eax [ebp+var_4] +
add eax edi +
jz loc_1009317  +
push 8007000Eh  +
call sub_1014768  +
jmp loc_10092D5  +
***
pop esi  +
retn   +
***
and [ebp+8] edi +
lea eax [ebp+8] +
push eax  +
lea ecx [ebx+10h] +
call sub_10060E1  +
and [ebx+14h] edi +
jmp loc_1004672  +
cmp ax 2Fh +
jz loc_1006B76  +
push offset aNtTask_0  +
jmp loc_1006B7B  +
push 5Ch  +
pop ecx  +
mov [eax] cx +
jmp loc_1006BC5  +
***
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push esi  +
push offset dword_100EF00  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1016C15  +
jmp loc_100A8E5  +
***
cmp eax 0Ch +
jz loc_100EF39  +
cmp eax 16h +
jz loc_100EF32  +
cmp eax 22h +
jz loc_100EF32  +
cmp eax 50h +
jz loc_10098D0  +
push 80004005h  +
call sub_1016FA4  +
push 80070057h  +
jmp loc_100EF2D  +
push 8007000Eh  +
jmp loc_100EF2D  +
***
mov eax [ecx] +
mov edx [eax] +
push ecx  +
mov ecx eax +
call dword ptr [edx+4]  +
jmp locret_1005C52  +
***
and dword ptr [esi] 0 +
jmp loc_10046A6  +
push 8007000Eh  +
call sub_1016FA4  +
int 3  +
push 80004005h  +
call sub_1016FA4  +
int 3  +
push eax  +
call sub_10014DF  +
pop ecx  +
jmp loc_10030E0  +
***
push eax  +
call sub_10014DF  +
pop ecx  +
jmp loc_10096D5  +
***
mov eax [ebp+arg_0] +
and dword ptr [eax+4] 0 +
and dword ptr [eax+0Ch] 0 +
mov dword ptr [eax] offset dword_100348C +
mov dword ptr [eax+8] 2 +
jmp loc_1001846  +
***
xor eax eax +
inc eax  +
jmp loc_1002B76  +
push [ebp+arg_C]  +
push 0  +
push [ebp+arg_0]  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
call ds:EtwEventWriteTransfer  +
jmp loc_1002B69  +
push edi  +
push offset aEventwriteErro  +
mov ecx esi +
call sub_1017154  +
test edi edi +
jle loc_100EFDF  +
and edi 0FFFFh +
or edi 80070000h +
mov eax edi +
jmp loc_1002B75  +
***
xor eax eax +
inc eax  +
jmp loc_100471F  +
push [ebp+arg_10]  +
push 0  +
push [ebp+arg_0]  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
call ds:EtwEventWriteTransfer  +
jmp loc_1004712  +
push edi  +
push offset aEventwriteErro  +
mov ecx esi +
call sub_1017154  +
test edi edi +
jle loc_100F027  +
and edi 0FFFFh +
or edi 80070000h +
mov eax edi +
jmp loc_100471E  +
***
xor eax eax +
inc eax  +
jmp loc_10047B0  +
push [ebp+arg_18]  +
push 0  +
push [ebp+arg_0]  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
call ds:EtwEventWriteTransfer  +
jmp loc_10047A3  +
push edi  +
push offset aEventwriteErro  +
mov ecx esi +
call sub_1017154  +
test edi edi +
jle loc_100F06B  +
and edi 0FFFFh +
or edi 80070000h +
mov eax edi +
jmp loc_10047AF  +
***
xor eax eax +
inc eax  +
jmp loc_1001FBA  +
push [ebp+var_18]  +
push ebx  +
push [ebp+var_20]  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
call ds:EtwEventWriteTransfer  +
jmp loc_1001F74  +
push edi  +
push offset aEventwriteErro  +
mov ecx esi +
call sub_1017154  +
cmp edi ebx +
jle loc_100F0AE  +
and edi 0FFFFh +
or edi 80070000h +
mov eax edi +
jmp loc_1001FBA  +
***
xor eax eax +
inc eax  +
jmp loc_1002143  +
push [ebp+var_18]  +
push ebx  +
push [ebp+var_20]  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
call ds:EtwEventWriteTransfer  +
jmp loc_10020FD  +
push edi  +
push offset aEventwriteErro  +
mov ecx esi +
call sub_1017154  +
cmp edi ebx +
jle loc_100F0F1  +
and edi 0FFFFh +
or edi 80070000h +
mov eax edi +
jmp loc_1002143  +
***
push edi  +
push offset aEventregisterE  +
mov ecx esi +
call sub_1017154  +
and dword ptr [esi] 0 +
and dword ptr [esi+4] 0 +
test edi edi +
jle loc_100F11C  +
and edi 0FFFFh +
or edi 80070000h +
mov eax edi +
jmp loc_10047E7  +
***
mov ecx [esi+4] +
test ecx ecx +
jz loc_100F157  +
mov ecx [ecx] +
jmp loc_100F159  +
xor ecx ecx +
push ebx  +
push ecx  +
push esi  +
push offset dword_101231C  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101B7A3  +
jmp loc_10066C6  +
mov edi 80070057h +
jmp loc_10066EB  +
***
mov [ebp+var_5C] eax +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_100F1B5  +
test byte ptr [eax+1Ch] 1 +
jz loc_100F1B5  +
mov ecx [esi+4] +
cmp ecx ebx +
jz loc_100F19D  +
mov ecx [ecx] +
jmp loc_100F19F  +
xor ecx ecx +
push [ebp+var_5C]  +
push ecx  +
push offset dword_101231C  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101ABE7  +
push edi  +
push 28h  +
lea eax [ebp+sz] +
push eax  +
lea edi [esi+2Ch] +
push edi  +
call ds:StringFromGUID2  +
mov esi [esi+4] +
cmp esi ebx +
jz loc_100F1D1  +
mov esi [esi] +
jmp loc_100F1D3  +
xor esi esi +
mov ecx dword_1022110 +
push ebx  +
push ebx  +
push [ebp+var_5C]  +
push edi  +
push esi  +
push offset dword_100F1F0  +
call sub_1017409  +
pop edi  +
jmp loc_100B503  +
***
mov ecx [ebp-48h] +
mov eax 8007000Eh +
mov eax 80070057h +
mov eax 80070057h +
mov eax 80070057h +
mov eax 80004005h +
mov eax [ebp-44h] +
mov eax [eax+4] +
push offset aDW7rtmAdminW_1  +
push 20Dh  +
push offset dword_100F700  +
push eax  +
push offset a_com_error  +
push offset aCatch_knownSHr  +
mov [ebp-1Ch] eax +
call sub_101C9A8  +
or dword ptr [ebp-4] 0FFFFFFFFh +
add esp 18h +
mov eax offset loc_100F451 +
retn   +
***
mov eax [ebp-1Ch] +
mov [esi+24h] eax +
mov [esi+28h] bl +
jmp loc_1002176  +
cmp eax ebx +
jz loc_100F5B4  +
mov eax [eax] +
jmp loc_100F5B6  +
xor eax eax +
mov ecx dword_1022110 +
push ebx  +
push ebx  +
lea edi [esi+2Ch] +
push edi  +
push eax  +
push offset dword_100F6B0  +
call sub_10172EA  +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_10021FE  +
test byte ptr [eax+1Ch] 4 +
jz loc_10021FE  +
mov ecx [esi+4] +
cmp ecx ebx +
jz loc_100F5F2  +
mov ecx [ecx] +
jmp loc_100F5F4  +
xor ecx ecx +
push dword ptr [ebp-20h]  +
push edi  +
push ecx  +
push esi  +
push offset dword_101231C  +
push 1Ch  +
jmp loc_100F61D  +
mov ecx [esi+4] +
cmp ecx ebx +
jz loc_100F60E  +
mov ecx [ecx] +
jmp loc_100F610  +
xor ecx ecx +
push dword ptr [ebp-20h]  +
push edi  +
push ecx  +
push esi  +
push offset dword_101231C  +
push 1Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101787E  +
jmp loc_10021FE  +
mov ecx [esi+4Ch] +
cmp eax ebx +
jz loc_100F638  +
mov eax [eax] +
jmp loc_100F63A  +
xor eax eax +
push ebx  +
push ebx  +
push dword ptr [ebp-18h]  +
lea edi [esi+2Ch] +
push ecx  +
mov ecx dword_1022110 +
push edi  +
push eax  +
push offset dword_100F6A0  +
call sub_1002049  +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_10021FE  +
test byte ptr [eax+1Ch] 4 +
jz loc_10021FE  +
mov ecx [esi+4] +
cmp ecx ebx +
jz loc_100F67A  +
mov ecx [ecx] +
jmp loc_100F67C  +
xor ecx ecx +
push dword ptr [ebp-18h]  +
push dword ptr [ebp-20h]  +
push edi  +
push ecx  +
push esi  +
push offset dword_101231C  +
push 1Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017950  +
jmp loc_10021FE  +
***
adc [edx] al +
retf 0  +
***
push dword ptr [ebp+8]  +
push offset dword_101231C  +
push 1Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1013441  +
jmp loc_1001CBE  +
***
mov ecx [ebp-14h] +
mov eax [ecx] +
call dword ptr [eax]  +
test eax eax +
jle loc_100F738  +
and eax 0FFFFh +
or eax 80070000h +
push offset aDW7rtmAdminW_1  +
push 24Dh  +
push offset aJobRuncallback  +
push eax  +
push offset dword_101124C  +
push offset aCatch_knownSHr  +
mov [ebp+8] eax +
call sub_101C9A8  +
add esp 18h +
mov eax offset loc_100F763 +
retn   +
***
cmp dword ptr [ebp+8] 0 +
jge loc_1001CC6  +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_1001CC6  +
test byte ptr [eax+1Ch] 1 +
jz loc_1001CC6  +
push dword ptr [ebp+8]  +
push offset dword_101231C  +
push 20h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1013441  +
jmp loc_1001CC6  +
***
push offset aDW7rtmAdminW_1  +
push 24Dh  +
mov eax 8007000Eh +
push offset aJobRuncallback  +
push eax  +
push offset dword_10111E8  +
push offset aCatch_knownSHr  +
mov [ebp+8] eax +
call sub_101C9A8  +
add esp 18h +
mov eax offset loc_100F7D1 +
retn   +
***
jmp loc_100F76D  +
***
push offset aDW7rtmAdminW_1  +
push 24Dh  +
mov eax 80070057h +
push offset aJobRuncallback  +
push eax  +
push offset aStdInvalid_arg  +
push offset aCatch_knownSHr  +
mov [ebp+8] eax +
call sub_101C9A8  +
add esp 18h +
mov eax offset loc_100F803 +
retn   +
***
jmp loc_100F76D  +
***
push offset aDW7rtmAdminW_1  +
push 24Dh  +
mov eax 80070057h +
push offset aJobRuncallback  +
push eax  +
push offset aStdLength_erro  +
push offset aCatch_knownSHr  +
mov [ebp+8] eax +
call sub_101C9A8  +
add esp 18h +
mov eax offset loc_100F838 +
retn   +
***
jmp loc_100F76D  +
***
push offset aDW7rtmAdminW_1  +
push 24Dh  +
mov eax 80070057h +
push offset aJobRuncallback  +
push eax  +
push offset aStdOut_of_rang  +
push offset aCatch_knownSHr  +
mov [ebp+8] eax +
call sub_101C9A8  +
add esp 18h +
mov eax offset loc_100F86D +
retn   +
***
jmp loc_100F76D  +
***
push offset aDW7rtmAdminW_1  +
push 24Dh  +
mov eax 80004005h +
push offset aJobRuncallback  +
push eax  +
push offset dword_1011198  +
push offset aCatch_knownSHr  +
mov [ebp+8] eax +
call sub_101C9A8  +
add esp 18h +
mov eax offset loc_100F8A2 +
retn   +
***
jmp loc_100F76D  +
***
mov eax [ebp-18h] +
mov eax [eax+4] +
push offset aDW7rtmAdminW_1  +
push 24Dh  +
push offset aJobRuncallback  +
push eax  +
push offset a_com_error  +
push offset aCatch_knownSHr  +
mov [ebp+8] eax +
call sub_101C9A8  +
add esp 18h +
mov eax offset loc_100F763 +
retn   +
***
mov ecx [ebx+4] +
test ecx ecx +
jz loc_100F8F4  +
mov ecx [ecx] +
jmp loc_100F8F6  +
xor ecx ecx +
lea edx [ebp-14h] +
push edx  +
push ecx  +
push ebx  +
push offset dword_101231C  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017806  +
jmp loc_1004838  +
***
call ds:__imp_GetLastError  +
cmp eax esi +
jle loc_100F927  +
and eax 0FFFFh +
or eax 80070000h +
cmp eax esi +
mov [ebp-18h] eax +
jge loc_100487D  +
mov eax [ebx+4Ch] +
mov ebx [ebx+4] +
cmp ebx esi +
jz loc_100F940  +
mov ebx [ebx] +
jmp loc_100F942  +
xor ebx ebx +
mov ecx dword_1022110 +
push esi  +
push esi  +
push dword ptr [ebp-18h]  +
push eax  +
push ebx  +
push offset dword_1011080  +
call sub_1017234  +
mov edi [ebp-1Ch] +
mov esi offset dword_100A950 +
movs   +
movs   +
movs   +
movs   +
jmp loc_10048A7  +
***
call sub_1001C73  +
push 0  +
push 0  +
call _CxxThrowException  +
int 3  +
***
mov ecx [ebp-14h] +
call sub_1001BD5  +
push 0  +
push 0  +
call _CxxThrowException  +
int 3  +
***
mov ecx [esi+4] +
test ecx ecx +
jz loc_100F9FD  +
mov ecx [ecx] +
jmp loc_100F9FF  +
xor ecx ecx +
push ecx  +
push esi  +
push offset dword_101231C  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017793  +
jmp loc_1002707  +
push eax  +
call ds:CancelWaitableTimer  +
push dword ptr [edi]  +
call ebx  +
jmp loc_100275F  +
***
push 67h  +
push offset aDW7rtmAdminW_1  +
call ds:__imp_GetLastError  +
push eax  +
push offset aGetusernameexN  +
call sub_10137B7  +
push 69h  +
push offset aDW7rtmAdminW_1  +
call ds:__imp_GetLastError  +
push eax  +
push offset aGetusernamee_0  +
jmp loc_100FA3B  +
***
mov ecx [esi+4] +
cmp ecx edi +
jz loc_100FA60  +
mov ecx [ecx] +
jmp loc_100FA62  +
xor ecx ecx +
push ecx  +
push esi  +
push offset dword_101231C  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017793  +
jmp loc_10093C8  +
lea ecx [ebp-30h] +
call sub_1014EB7  +
push offset dword_101F214  +
lea eax [ebp-30h] +
push eax  +
call _CxxThrowException  +
call ds:__imp_GetLastError  +
push dword ptr [esi+0DCh]  +
mov ebx eax +
call ds:CloseHandle  +
push ebx  +
lea ecx [ebp-30h] +
mov [esi+0DCh] edi +
call sub_10127D1  +
jmp loc_100FA83  +
***
push 8007000Eh  +
call sub_1016FA4  +
push dword ptr [esi+4]  +
mov edi eax +
call ds:free  +
and dword ptr [esi+4] 0 +
pop ecx  +
push edi  +
jmp loc_100FABB  +
***
inc eax  +
retn   +
***
push 80004005h  +
call sub_1016FA4  +
lea eax [ebp+dwPrimaryGroupSize] +
push eax  +
push ebx  +
lea eax [ebp+dwOwnerSize] +
push eax  +
push ebx  +
lea eax [ebp+dwSaclSize] +
push eax  +
push ebx  +
lea eax [ebp+dwDaclSize] +
push eax  +
push ebx  +
lea eax [ebp+dwAbsoluteSecurityDescriptorSize] +
push eax  +
push ebx  +
push dword ptr [esi+4]  +
mov [ebp+dwSaclSize] ebx +
mov [ebp+dwDaclSize] ebx +
mov [ebp+dwPrimaryGroupSize] ebx +
mov [ebp+dwOwnerSize] ebx +
mov [ebp+dwAbsoluteSecurityDescriptorSize] ebx +
call ds:MakeAbsoluteSD  +
call ds:__imp_GetLastError  +
cmp eax 7Ah +
jz loc_100FB20  +
call sub_1017B40  +
push [ebp+dwAbsoluteSecurityDescriptorSize]  +
mov esi ds:malloc +
call esi  +
pop ecx  +
mov [ebp+pAbsoluteSecurityDescriptor] eax +
cmp eax ebx +
jz loc_100FAD5  +
cmp [ebp+dwOwnerSize] ebx +
jz loc_100FB43  +
push [ebp+dwOwnerSize]  +
call esi  +
pop ecx  +
mov [ebp+pOwner] eax +
jmp loc_100FB46  +
mov [ebp+pOwner] ebx +
cmp [ebp+dwOwnerSize] ebx +
jz loc_100FB50  +
cmp [ebp+pOwner] ebx +
jz loc_100FAD5  +
cmp [ebp+dwPrimaryGroupSize] ebx +
jz loc_100FB60  +
push [ebp+dwPrimaryGroupSize]  +
call esi  +
pop ecx  +
mov [ebp+pPrimaryGroup] eax +
jmp loc_100FB63  +
mov [ebp+pPrimaryGroup] ebx +
cmp [ebp+dwPrimaryGroupSize] ebx +
jz loc_100FB71  +
cmp [ebp+pPrimaryGroup] ebx +
jz loc_100FAD5  +
cmp [ebp+dwDaclSize] ebx +
jz loc_100FB81  +
push [ebp+dwDaclSize]  +
call esi  +
pop ecx  +
mov [ebp+pDacl] eax +
jmp loc_100FB84  +
mov [ebp+pDacl] ebx +
cmp [ebp+dwDaclSize] ebx +
jz loc_100FB92  +
cmp [ebp+pDacl] ebx +
jz loc_100FAD5  +
push edi  +
cmp [ebp+dwSaclSize] ebx +
jz loc_100FBA2  +
push [ebp+dwSaclSize]  +
call esi  +
pop ecx  +
mov edi eax +
jmp loc_100FBA4  +
xor edi edi +
cmp [ebp+dwSaclSize] ebx +
jz loc_100FBB1  +
cmp edi ebx +
jz loc_100FAD5  +
mov ebx [ebp+pAbsoluteSecurityDescriptor] +
mov esi [ebp+var_2C] +
lea eax [ebp+dwPrimaryGroupSize] +
push eax  +
push [ebp+pPrimaryGroup]  +
lea eax [ebp+dwOwnerSize] +
push eax  +
push [ebp+pOwner]  +
lea eax [ebp+dwSaclSize] +
push eax  +
push edi  +
lea eax [ebp+dwDaclSize] +
push eax  +
push [ebp+pDacl]  +
lea eax [ebp+dwAbsoluteSecurityDescriptorSize] +
push eax  +
push ebx  +
push dword ptr [esi+4]  +
call ds:MakeAbsoluteSD  +
test eax eax +
jnz loc_100FC11  +
call sub_1017B60  +
mov esi ds:free +
push ebx  +
mov [ebp+var_2C] eax +
call esi  +
push [ebp+pOwner]  +
call esi  +
push [ebp+pPrimaryGroup]  +
call esi  +
push [ebp+pDacl]  +
call esi  +
push edi  +
call esi  +
add esp 14h +
push [ebp+var_2C]  +
jmp loc_100FADA  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+4]  +
mov [esi+4] ebx +
pop edi  +
jmp loc_100B8C6  +
***
push [ebp+pSacl]  +
call edi  +
pop ecx  +
jmp loc_10097B1  +
***
push 8007000Eh  +
call sub_1016FA4  +
call sub_1017B60  +
push dword ptr [esi+4]  +
mov edi eax +
call ds:free  +
and dword ptr [esi+4] 0 +
pop ecx  +
push edi  +
jmp loc_100FC31  +
***
mov edi eax +
jmp loc_1006E04  +
mov eax ecx +
jmp loc_1006E33  +
mov ebx edi +
jmp loc_1006E3F  +
***
xor al al +
retn   +
***
push 80070057h  +
call sub_1016FA4  +
call sub_1017B60  +
mov byte ptr [esi+48h] 0 +
push eax  +
jmp loc_100FC6B  +
***
xor eax eax +
leave   +
retn   +
call sub_1017B40  +
int 3  +
call sub_100B892  +
jmp loc_100B73D  +
***
lea ecx [ebp+bOwnerDefaulted] +
push ecx  +
lea ecx [ebp+pOwner] +
push ecx  +
push eax  +
call ds:GetSecurityDescriptorOwner  +
test eax eax +
jnz loc_100B753  +
call sub_1017B40  +
push 80004005h  +
call sub_1016FA4  +
push 8007000Eh  +
jmp loc_100FCB1  +
push edi  +
mov esi eax +
call ds:free  +
pop ecx  +
push esi  +
jmp loc_100FCB1  +
***
call sub_1017B40  +
mov ecx ebx +
call sub_100B9A4  +
and [ebp+pGroup] 0 +
jmp loc_100B81F  +
push 80004005h  +
call sub_1016FA4  +
push 8007000Eh  +
jmp loc_100FCE4  +
push edi  +
mov esi eax +
call ds:free  +
pop ecx  +
push esi  +
jmp loc_100FCE4  +
***
call sub_1017B40  +
push 8007000Eh  +
call sub_1016FA4  +
xor eax eax +
jmp loc_100B96A  +
call sub_1017B60  +
push edi  +
mov esi eax +
call ds:free  +
pop ecx  +
push esi  +
jmp loc_100FD07  +
***
mov edx [eax] +
push 2  +
push dword ptr [esi+4]  +
mov ecx eax +
call dword ptr [edx]  +
mov edi eax +
test edi edi +
jnz loc_100FD3B  +
call sub_1016FF1  +
mov eax [esi+4] +
mov [edi+4] eax +
mov eax [esi+4] +
inc eax  +
push eax  +
add esi 10h +
push esi  +
push eax  +
lea eax [edi+10h] +
push eax  +
call sub_1016FCB  +
add esp 10h +
jmp loc_1008FF4  +
***
push 8007000Eh  +
call sub_1016FA4  +
int 3  +
***
push esi  +
call sub_10014DF  +
pop ecx  +
jmp loc_100643A  +
***
call sub_1017B40  +
push 80070057h  +
call sub_1016FA4  +
int 3  +
push dword ptr [esi+4]  +
push eax  +
call sub_10063F8  +
push dword ptr [esi]  +
call ds:free  +
pop ecx  +
jmp loc_100BA45  +
***
mov [esi+0Ch] eax +
jmp loc_10063BE  +
cmp edi [esi+8] +
ja loc_100FDC0  +
mov eax [esi+4] +
cmp eax edi +
jb loc_100FDD1  +
jbe loc_100FDE1  +
sub eax edi +
push eax  +
mov eax [esi] +
lea eax [eax+edi*4] +
push eax  +
call sub_10063F8  +
jmp loc_100FDE1  +
push edi  +
call sub_1006DE0  +
test al al +
jz loc_10063ED  +
mov eax [esi+4] +
mov ecx edi +
sub ecx eax +
push ecx  +
mov ecx [esi] +
lea eax [ecx+eax*4] +
push eax  +
call sub_1017E2E  +
mov [esi+4] edi +
jmp loc_10063EB  +
***
push 80070057h  +
call sub_1016FA4  +
call sub_1017B60  +
push eax  +
jmp loc_100FDEE  +
***
push 8007000Eh  +
call sub_1016FA4  +
int 3  +
***
test byte ptr [esi+68h] 10h +
jz loc_10049FA  +
jmp loc_10049B2  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+10h]  +
test al al +
jnz loc_10049DC  +
or eax 0FFFFFFFFh +
jmp loc_10049F4  +
***
push 80070057h  +
call sub_1016FA4  +
int 3  +
***
cmp edi esi +
jz loc_1004A50  +
and dword ptr [esi] 0 +
jmp loc_1004A50  +
***
mov esi eax +
imul eax eax +
inc eax  +
cmp eax edx +
jnb loc_1008A31  +
jmp loc_100FE47  +
***
push dword ptr [ebp-0Ch]  +
mov ecx edi +
call sub_1008A40  +
push eax  +
push dword ptr [ebp-4]  +
mov ecx edi +
call sub_1008A40  +
mov ecx eax +
call sub_1004A2E  +
sub [ebp-4] esi +
sub [ebp-0Ch] esi +
cmp [ebp-4] esi +
jb loc_10089ED  +
jmp loc_10089CF  +
***
and dword ptr [ebp-4] 0 +
mov eax offset loc_100FEA0 +
retn   +
mov esi [ebp-18h] +
xor ebx ebx +
jmp loc_1006D64  +
***
push 8007000Eh  +
call sub_1016FA4  +
int 3  +
pop ebp  +
jmp sub_1014768  +
***
call ds:__imp_GetLastError  +
test eax eax +
jle locret_1004A7C  +
and eax 0FFFFh +
or eax 80070000h +
retn   +
***
xor al al +
jmp loc_10061E8  +
sub eax edi +
sar eax 1 +
mov ebx eax +
jmp loc_10061C3  +
***
call ds:__imp_GetLastError  +
test eax eax +
jle loc_100FEFA  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
mov dword ptr [esi+8] 5 +
mov byte ptr [esi+14h] 0 +
jmp loc_1002276  +
***
push eax  +
jmp loc_100777C  +
push esi  +
jmp loc_100777C  +
push edi  +
call sub_10014D2  +
push dword ptr [ebp-10h]  +
call sub_10014D2  +
pop ecx  +
jmp loc_1007781  +
***
mov eax [edi] +
jmp loc_1001AFC  +
***
mov eax [esi] +
test eax eax +
jz loc_100FF3D  +
mov eax [eax] +
jmp loc_100FF3F  +
xor eax eax +
push 22h  +
push eax  +
call ds:wcschr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1006156  +
mov bl 1 +
jmp loc_1006156  +
***
mov ecx off_10220C4 +
cmp ecx offset off_10220C4 +
jz loc_100BCAC  +
test byte ptr [ecx+1Ch] 80h +
jz loc_100BCAC  +
mov edx [edi+18h] +
test edx edx +
jz loc_100FF80  +
mov edx [edx] +
jmp loc_100FF82  +
xor edx edx +
push eax  +
push edx  +
push edi  +
push ebx  +
push 0Fh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_101B7A3  +
jmp loc_100BCAC  +
mov ecx off_10220C4 +
cmp ecx offset off_10220C4 +
jz loc_100BCCC  +
test byte ptr [ecx+1Ch] 80h +
jz loc_100BCCC  +
mov edx [edi+18h] +
test edx edx +
jz loc_100FFBF  +
mov edx [edx] +
jmp loc_100FFC1  +
xor edx edx +
push eax  +
push edx  +
push edi  +
push ebx  +
push 10h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_101B7A3  +
jmp loc_100BCCC  +
***
push 80070057h  +
lea ecx [ebp-30h] +
call sub_10127D1  +
push offset dword_101F214  +
lea eax [ebp-30h] +
push eax  +
call _CxxThrowException  +
***
push eax  +
call ds:CloseHandle  +
jmp loc_1002387  +
***
mov eax [esi] +
test eax eax +
jz loc_1010008  +
mov eax [eax] +
jmp loc_101000A  +
xor eax eax +
mov ecx eax +
lea edx [ebp+var_210] +
movzx eax word ptr [ecx] +
cmp ax 22h +
jz loc_1010020  +
mov [edx] ax +
inc edx  +
inc edx  +
mov ax [ecx] +
inc ecx  +
inc ecx  +
test ax ax +
jnz loc_1010012  +
lea eax [ebp+var_210] +
push eax  +
mov ecx esi +
call sub_1004635  +
jmp loc_1004B73  +
***
inc edi  +
inc edi  +
jmp loc_1008795  +
test esi esi +
jz loc_101004C  +
mov eax [esi] +
jmp loc_101004E  +
xor eax eax +
xor ecx ecx +
mov [eax] cx +
jmp loc_10087E8  +
mov eax [ebp-18h] +
mov eax [eax] +
test eax eax +
jz loc_1010065  +
mov eax [eax] +
jmp loc_1010067  +
xor eax eax +
test esi esi +
jz loc_101006F  +
mov ecx [esi] +
jmp loc_1010071  +
xor ecx ecx +
push eax  +
push edi  +
push ecx  +
call sub_10088C2  +
mov ebx offset dword_10041BC +
jmp loc_100884A  +
test esi esi +
jz loc_101008B  +
mov eax [esi] +
jmp loc_101008D  +
xor eax eax +
mov ebx offset dword_10041BC +
push ebx  +
push edi  +
push eax  +
call sub_10088C2  +
jmp loc_1008809  +
test esi esi +
jz loc_10100A7  +
mov eax [esi] +
jmp loc_10100A9  +
xor eax eax +
push offset dword_10041C0  +
push edi  +
push eax  +
call sub_10088C2  +
mov eax [ebp-14h] +
mov eax [eax] +
test eax eax +
jz loc_10100C2  +
mov eax [eax] +
jmp loc_10100C4  +
xor eax eax +
test esi esi +
jz loc_10100CC  +
mov ecx [esi] +
jmp loc_10100CE  +
xor ecx ecx +
push eax  +
push edi  +
push ecx  +
call sub_10088C2  +
jmp loc_100885A  +
test esi esi +
jz loc_10100E3  +
mov eax [esi] +
jmp loc_10100E5  +
xor eax eax +
push ebx  +
push edi  +
push eax  +
call sub_10088C2  +
jmp loc_1008864  +
***
push eax  +
push edi  +
mov ecx esi +
call sub_10192D0  +
jmp loc_10091A2  +
***
mov eax [edi] +
test eax eax +
jz loc_10102C4  +
mov eax [eax] +
jmp loc_10102C6  +
xor eax eax +
push 25h  +
push eax  +
call ds:wcschr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1009076  +
push 400h  +
lea eax [ebp+Dst] +
push eax  +
push edi  +
mov ecx esi +
call sub_10192D0  +
jmp loc_10091AC  +
jle loc_1009182  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1009182  +
lea eax [ebp+var_C] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx di +
jnz loc_101030D  +
sub eax edx +
sar eax 1 +
jnz loc_10090F5  +
mov edi [ebp+var_814] +
mov ecx edi +
call sub_1001B0E  +
test eax eax +
jbe loc_10090F5  +
mov eax [edi] +
test eax eax +
jz loc_1010340  +
mov eax [eax] +
jmp loc_1010342  +
xor eax eax +
push eax  +
push ebx  +
lea eax [ebp+Dst] +
push eax  +
call sub_100A10F  +
test eax eax +
jl loc_1009182  +
mov eax [edi] +
test eax eax +
jz loc_1010362  +
mov esi [eax] +
jmp loc_1010364  +
xor esi esi +
mov ecx edi +
call sub_1001B0E  +
push 5Ch  +
pop ecx  +
cmp cx [esi+eax*2-2] +
jz loc_101038F  +
push offset dword_1003410  +
push ebx  +
lea eax [ebp+Dst] +
push eax  +
call sub_10088C2  +
test eax eax +
jl loc_1009182  +
mov eax [ebp+var_810] +
mov eax [eax] +
test eax eax +
jz loc_101039F  +
mov eax [eax] +
jmp loc_10103A1  +
xor eax eax +
push eax  +
push ebx  +
lea eax [ebp+Dst] +
push eax  +
call sub_10088C2  +
test eax eax +
jl loc_1009182  +
lea eax [ebp+Dst] +
push eax  +
call ds:GetFileAttributesW  +
cmp eax 0FFFFFFFFh +
jz loc_10103DF  +
test al 10h +
jnz loc_10103DF  +
mov ecx [ebp+var_810] +
lea eax [ebp+Dst] +
push eax  +
call sub_1004635  +
mov esi 400h +
jmp loc_10090F5  +
push 22h  +
pop eax  +
mov [ebp+Dst] ax +
xor eax eax +
mov [ebp-80Ah] ax +
mov eax [edi] +
test eax eax +
jz loc_1010406  +
mov eax [eax] +
jmp loc_1010408  +
xor eax eax +
push eax  +
push esi  +
lea eax [ebp+Dst] +
push eax  +
call sub_10088C2  +
test eax eax +
jl loc_1009182  +
push offset dword_10041BC  +
push esi  +
lea eax [ebp+Dst] +
push eax  +
call sub_10088C2  +
jmp loc_10091C4  +
***
mov eax [eax] +
jmp loc_100BAEB  +
***
mov ecx [esi+1Ch] +
cmp ecx ebx +
jz loc_1010447  +
mov edx [ecx] +
jmp loc_1010449  +
xor edx edx +
mov ecx [esi+18h] +
cmp ecx ebx +
jz loc_1010454  +
mov ecx [ecx] +
jmp loc_1010456  +
xor ecx ecx +
push dword ptr [ebp-224h]  +
push dword ptr [ebp-228h]  +
push edx  +
push ecx  +
push esi  +
push offset dword_10041AC  +
push 11h  +
jmp loc_1010571  +
mov eax [esi+18h] +
cmp eax ebx +
jz loc_101047C  +
mov eax [eax] +
jmp loc_101047E  +
xor eax eax +
push 5Ch  +
push eax  +
call ds:wcschr  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100BB6F  +
mov eax [esi+18h] +
cmp eax ebx +
jz loc_101049C  +
mov eax [eax] +
jmp loc_101049E  +
xor eax eax +
lea ecx [ebp-23Ch] +
push ecx  +
lea ecx [ebp-210h] +
push ecx  +
push 105h  +
push ebx  +
push eax  +
push ebx  +
call ds:SearchPathW  +
cmp eax ebx +
jz loc_100BB6F  +
cmp eax 104h +
ja loc_100BB6F  +
mov eax [esi+1Ch] +
cmp eax ebx +
jz loc_10104D8  +
mov eax [eax] +
jmp loc_10104DA  +
xor eax eax +
lea ecx [ebp-230h] +
push ecx  +
lea ecx [ebp-280h] +
push ecx  +
push ebx  +
push ebx  +
push dword ptr [ebp-21Ch]  +
push ebx  +
push ebx  +
push ebx  +
push eax  +
lea eax [ebp-210h] +
push eax  +
call edi  +
test eax eax +
setnz byte ptr [ebp-211h]  +
call ds:__imp_GetLastError  +
xor ecx ecx +
cmp eax 2E4h +
setz cl  +
mov [ebp-218h] eax +
mov [ebp-234h] ecx +
cmp [ebp-211h] bl +
jz loc_100BB6F  +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_100BB6F  +
test byte ptr [eax+1Ch] 80h +
jz loc_100BB6F  +
mov ecx [esi+1Ch] +
cmp ecx ebx +
jz loc_1010553  +
mov ecx [ecx] +
jmp loc_1010555  +
xor ecx ecx +
push dword ptr [ebp-224h]  +
push dword ptr [ebp-228h]  +
push ecx  +
lea ecx [ebp-210h] +
push ecx  +
push esi  +
push offset dword_10041AC  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018905  +
jmp loc_100BB6F  +
***
mov eax [esi+20h] +
cmp eax ebx +
jz loc_101058C  +
mov edx [eax] +
jmp loc_101058E  +
xor edx edx +
mov eax [esi+1Ch] +
cmp eax ebx +
jz loc_1010599  +
mov ecx [eax] +
jmp loc_101059B  +
xor ecx ecx +
mov eax [esi+18h] +
cmp eax ebx +
jz loc_10105A6  +
mov eax [eax] +
jmp loc_10105A8  +
xor eax eax +
push ebx  +
lea edi [ebp-230h] +
push edi  +
lea edi [ebp-280h] +
push edi  +
push ebx  +
push edx  +
push dword ptr [ebp-21Ch]  +
push 4  +
push ecx  +
push eax  +
call sub_101C14D  +
mov [ebp-218h] eax +
cmp eax ebx +
jnz loc_100BB7B  +
mov byte ptr [ebp-211h] 1 +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_100BB87  +
test byte ptr [eax+1Ch] 80h +
jz loc_100BB87  +
mov ecx [esi+1Ch] +
cmp ecx ebx +
jz loc_1010602  +
mov edx [ecx] +
jmp loc_1010604  +
xor edx edx +
mov ecx [esi+18h] +
cmp ecx ebx +
jz loc_101060F  +
mov ecx [ecx] +
jmp loc_1010611  +
xor ecx ecx +
push dword ptr [ebp-224h]  +
push dword ptr [ebp-228h]  +
push edx  +
push ecx  +
push esi  +
push offset dword_10041AC  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018905  +
jmp loc_100BB7B  +
***
mov eax [ebp-238h] +
mov dword ptr [esi+8] 5 +
mov [esi+24h] ebx +
mov [eax] ebx +
jmp loc_100BC10  +
***
mov eax [ebp-218h] +
cmp eax ebx +
jle loc_1010662  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp-220h] eax +
mov dword ptr [esi+8] 6 +
jmp loc_100BC10  +
***
push 0Ah  +
pop eax  +
jmp loc_1004BA1  +
***
push 0Ah  +
pop eax  +
jmp loc_1004BC9  +
***
push 0Ah  +
pop eax  +
jmp loc_100BCF0  +
***
mov eax [esi] +
cmp eax edi +
jz loc_1010696  +
mov esi [eax] +
jmp loc_1010698  +
xor esi esi +
cmp eax edi +
jz loc_10106A0  +
mov eax [eax] +
jmp loc_10106A2  +
xor eax eax +
mov [ebp-1Ch] eax +
mov [ebp-18h] edi +
mov [ebp-4] edi +
mov [ebp-14h] edi +
mov byte ptr [ebp-0Dh] 0 +
mov [ebp-34h] edi +
mov [ebp-30h] edi +
mov [ebp-20h] edi +
cmp [ebp-3Ch] edi +
jbe loc_1010833  +
lea ebx [esi+4] +
movzx eax word ptr [esi] +
push 24h  +
pop ecx  +
mov edi esi +
cmp cx ax +
jnz loc_1010732  +
cmp cx [esi+2] +
jnz loc_1010732  +
cmp byte ptr [ebp-0Dh] 0 +
jz loc_10106E4  +
mov byte ptr [ebp-0Dh] 0 +
push dword ptr [ebp-1Ch]  +
xor eax eax +
lea ecx [ebp-24h] +
mov [esi+2] ax +
call sub_100997E  +
lea eax [ebp-24h] +
push eax  +
lea ecx [ebp-18h] +
mov byte ptr [ebp-4] 1 +
call sub_100921E  +
mov ecx [ebp-24h] +
mov byte ptr [ebp-4] 0 +
test ecx ecx +
jz loc_1010719  +
call sub_1001A04  +
and dword ptr [ebp-24h] 0 +
add dword ptr [ebp-14h] 2 +
push 24h  +
pop eax  +
mov [esi+2] ax +
mov [ebp-1Ch] ebx +
add esi 4 +
add ebx 4 +
jmp loc_1010825  +
push 24h  +
pop ecx  +
cmp cx ax +
jnz loc_1010760  +
push 28h  +
pop ecx  +
cmp cx [esi+2] +
jnz loc_1010760  +
add dword ptr [ebp-14h] 2 +
mov [ebp-30h] esi +
add esi 4 +
add ebx 4 +
and dword ptr [ebp-20h] 0 +
mov [ebp-34h] esi +
mov byte ptr [ebp-0Dh] 1 +
jmp loc_1010825  +
push 29h  +
pop ecx  +
cmp cx ax +
jnz loc_101088D  +
cmp byte ptr [ebp-0Dh] 0 +
jz loc_101088D  +
inc dword ptr [ebp-14h]  +
inc esi  +
inc esi  +
inc ebx  +
inc ebx  +
cmp dword ptr [ebp-20h] 0 +
mov byte ptr [ebp-0Dh] 0 +
mov [ebp-38h] ebx +
jz loc_1010825  +
push dword ptr [ebp-34h]  +
xor eax eax +
lea ecx [ebp-28h] +
mov [edi] ax +
call sub_100997E  +
mov ebx [ebp+0Ch] +
lea eax [ebp-28h] +
push eax  +
lea eax [ebp-40h] +
push eax  +
mov ecx ebx +
call sub_101A3D4  +
mov ecx [ebp-28h] +
test ecx ecx +
jz loc_10107C0  +
call sub_1001A04  +
and dword ptr [ebp-28h] 0 +
push 29h  +
pop eax  +
mov [edi] ax +
mov eax [ebx+4] +
mov ebx [ebp-40h] +
cmp eax ebx +
jz loc_1010822  +
mov ecx [ebp-30h] +
push dword ptr [ebp-1Ch]  +
xor eax eax +
mov [ecx] ax +
lea ecx [ebp-2Ch] +
call sub_100997E  +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [ebp-18h] +
mov byte ptr [ebp-4] 2 +
call sub_100921E  +
mov ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
test ecx ecx +
jz loc_1010807  +
call sub_1001A04  +
and dword ptr [ebp-2Ch] 0 +
mov ecx [ebp-30h] +
push 24h  +
pop eax  +
mov [ecx] ax +
add ebx 10h +
push ebx  +
lea ecx [ebp-18h] +
call sub_100921E  +
add edi 2 +
mov [ebp-1Ch] edi +
mov ebx [ebp-38h] +
mov eax [ebp-14h] +
cmp eax [ebp-3Ch] +
jb loc_10106C7  +
xor edi edi +
lea ecx [ebp-18h] +
call sub_1001B0E  +
test eax eax +
jz loc_1010878  +
mov eax [ebp-1Ch] +
cmp [eax] di +
jz loc_101086C  +
push eax  +
lea ecx [ebp+0Ch] +
call sub_100997E  +
lea eax [ebp+0Ch] +
push eax  +
lea ecx [ebp-18h] +
mov byte ptr [ebp-4] 3 +
call sub_100921E  +
mov ecx [ebp+0Ch] +
cmp ecx edi +
jz loc_101086C  +
call sub_1001A04  +
mov ecx [ebp+8] +
lea eax [ebp-18h] +
push eax  +
call sub_10060E1  +
mov ecx [ebp-18h] +
cmp ecx edi +
jz loc_1009525  +
call sub_1001A04  +
jmp loc_1009525  +
inc dword ptr [ebp-14h]  +
inc esi  +
inc esi  +
inc ebx  +
inc ebx  +
inc dword ptr [ebp-20h]  +
jmp loc_1010825  +
***
mov [ecx] edi +
jmp loc_1008963  +
***
and dword ptr [esi] 0 +
jmp loc_1004C1E  +
push 8007000Eh  +
call sub_1016FA4  +
int 3  +
call ds:__imp_GetLastError  +
test eax eax +
jle locret_1004C70  +
and eax 0FFFFh +
or eax 80070000h +
retn   +
***
push [ebp+var_10]  +
push dword ptr [ebp+Data]  +
push [ebp+Type]  +
push edi  +
push offset dword_1012420  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101AC5A  +
jmp loc_1006F80  +
mov dword ptr [ebp+Data] ecx +
jmp loc_1006FA1  +
***
xor ecx ecx +
jmp loc_100C09E  +
push 0  +
lea ecx [ebp+var_C] +
call sub_1012A0D  +
push offset dword_101F044  +
lea eax [ebp+var_C] +
push eax  +
call _CxxThrowException  +
int 3  +
push eax  +
push offset dword_1012420  +
push 0Ah  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1013441  +
jmp loc_1006F15  +
***
jle loc_1007172  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1007172  +
mov eax [esi] +
push ebx  +
push eax  +
call ds:CreateDirectoryW  +
test eax eax +
jnz loc_1007085  +
call ds:__imp_GetLastError  +
cmp eax ebx +
jmp loc_101092D  +
push edi  +
push offset dword_1012420  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1013441  +
jmp loc_10070CB  +
mov eax 80004005h +
jmp loc_1007172  +
***
mov eax [edi] +
push offset dword_1003410  +
push esi  +
push eax  +
call sub_10088C2  +
test eax eax +
jge loc_100B3DE  +
jmp loc_100B40E  +
***
pop ecx  +
mov eax edi +
call sub_1009AF4  +
jmp nullsub_5  +
push dword ptr [ebp-74h]  +
mov edi offset dword_1012420 +
push esi  +
push edi  +
push 24h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101ABE7  +
jmp loc_100782C  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_10109D8  +
and eax 0FFFFh +
or eax 80070000h +
mov ebx eax +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_10109FC  +
test byte ptr [eax+1Ch] 1 +
jz loc_10109FC  +
push ebx  +
push esi  +
push edi  +
push 25h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101ABE7  +
mov esi ebx +
lea ecx [ebp-74h] +
mov byte ptr [ebp-4] 0 +
call sub_1004F72  +
push dword ptr [ebp-68h]  +
call sub_10014D2  +
pop ecx  +
mov eax esi +
jmp loc_101099E  +
mov eax [ebx] +
mov ecx dword_1022114 +
lea edx [ebp-7Ch] +
push edx  +
lea edx [ebp-50h] +
push edx  +
push eax  +
mov dword ptr [ebp-7Ch] 20h +
call sub_101B601  +
mov esi eax +
test esi esi +
jz loc_1010A7A  +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_1010A68  +
test byte ptr [eax+1Ch] 8 +
jz loc_1010A68  +
mov ecx [ebp-64h] +
call sub_100460A  +
push eax  +
mov eax off_10220C4 +
push edi  +
push 26h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101332E  +
test esi esi +
jle loc_10109FE  +
and esi 0FFFFh +
or esi 80070000h +
jmp loc_10109FE  +
cmp byte ptr [ebp+1Ch] 1 +
jz loc_10078CB  +
jmp loc_1010A9C  +
push 20h  +
lea eax [ebp-30h] +
push eax  +
call sub_101AD7C  +
lea eax [ebp-30h] +
push eax  +
mov ecx esi +
call sub_1013779  +
mov eax [ebp-64h] +
mov edx [eax+3Ch] +
test edx edx +
jz loc_1010AAB  +
lea ecx [eax+1Ch] +
jmp loc_1010AAD  +
xor ecx ecx +
test ecx ecx +
jnz loc_1010ABB  +
mov esi 80041321h +
jmp loc_10109FE  +
test edx edx +
jz loc_1010AC4  +
lea edi [eax+1Ch] +
jmp loc_1010AC6  +
xor edi edi +
push 8  +
pop ecx  +
lea esi [ebp-50h] +
xor eax eax +
cmps   +
jz loc_1010AE5  +
call sub_101B5A4  +
mov ecx [ebp-64h] +
mov ecx [ecx+18h] +
mov [ecx+18h] eax +
mov [ecx+1Ch] edx +
jmp loc_1010AB1  +
mov eax [ebp-58h] +
test eax eax +
jz loc_10078F1  +
cmp dword ptr [eax] 0 +
jz loc_10078F1  +
mov eax [ebp-54h] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1010AFF  +
sub eax edx +
sar eax 1 +
lea esi [eax+1] +
xor ecx ecx +
push 2  +
pop edx  +
lea eax [esi+1] +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_1001502  +
mov edi eax +
pop ecx  +
mov [ebp-78h] edi +
mov byte ptr [ebp-4] 2 +
test esi esi +
jbe loc_1010B53  +
mov edx [ebp-54h] +
sub edx edi +
mov [ebp-54h] esi +
movzx ecx word ptr [edx+eax] +
cmp cx 5Ch +
jnz loc_1010B49  +
xor ecx ecx +
mov [eax] cx +
inc eax  +
inc eax  +
dec dword ptr [ebp-54h]  +
jnz loc_1010B3D  +
push dword ptr [ebp-58h]  +
xor eax eax +
push edi  +
lea ecx [ebp-6Ch] +
mov [edi+esi*2] ax +
call sub_101B4BB  +
xor esi esi +
mov [ebp-60h] esi +
mov eax [ebx] +
lea ecx [ebp-60h] +
push ecx  +
push eax  +
mov byte ptr [ebp-4] 4 +
call sub_1009BB5  +
cmp eax esi +
mov [ebp-5Ch] eax +
jge loc_1010BAA  +
mov eax [ebp-60h] +
mov byte ptr [ebp-4] 3 +
cmp eax esi +
jz loc_1010B92  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-6Ch] +
mov byte ptr [ebp-4] 2 +
call sub_101B574  +
push edi  +
call sub_10014D2  +
pop ecx  +
jmp loc_1007860  +
push 434h  +
call sub_100150F  +
pop ecx  +
cmp eax esi +
jz loc_1010BC8  +
push 1  +
lea ecx [ebp-60h] +
push ecx  +
mov ecx eax +
call sub_10099FC  +
jmp loc_1010BCA  +
xor eax eax +
push eax  +
lea ecx [ebp-54h] +
call sub_1004CB1  +
mov ecx [ebp-54h] +
push esi  +
mov byte ptr [ebp-4] 5 +
call sub_1006702  +
cmp eax esi +
mov [ebp-5Ch] eax +
jge loc_1010BF9  +
mov ecx [ebp-54h] +
mov byte ptr [ebp-4] 4 +
cmp ecx esi +
jz loc_1010B81  +
call sub_1001AA5  +
jmp loc_1010B81  +
push dword ptr [ebx]  +
call sub_10014D2  +
pop ecx  +
mov [ebx] esi +
mov [ebp-58h] esi +
mov ecx [ebp-54h] +
mov byte ptr [ebp-4] 6 +
call sub_101ADA5  +
push eax  +
lea ecx [ebp-58h] +
call sub_1004450  +
push dword ptr [ebp-58h]  +
call ds:SysStringLen  +
mov esi eax +
xor ecx ecx +
push 2  +
lea edi [esi+1] +
pop edx  +
mov eax edi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_1001502  +
pop ecx  +
push eax  +
mov ecx ebx +
call sub_100BF79  +
mov ebx [ebx] +
push esi  +
push dword ptr [ebp-58h]  +
push edi  +
push ebx  +
call sub_1004499  +
push dword ptr [ebp-58h]  +
mov esi eax +
mov [ebp-5Ch] esi +
call ds:SysFreeString  +
mov ecx [ebp-54h] +
mov byte ptr [ebp-4] 4 +
test esi esi +
jge loc_1010CA2  +
test ecx ecx +
jz loc_1010C77  +
call sub_1001AA5  +
mov eax [ebp-60h] +
mov byte ptr [ebp-4] 3 +
test eax eax +
jz loc_1010C88  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-6Ch] +
mov byte ptr [ebp-4] 2 +
call sub_101B574  +
push dword ptr [ebp-78h]  +
call sub_10014D2  +
pop ecx  +
jmp loc_10109FE  +
test ecx ecx +
jz loc_1010CAB  +
call sub_1001AA5  +
mov eax [ebp-60h] +
mov byte ptr [ebp-4] 3 +
test eax eax +
jz loc_1010CBC  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-6Ch] +
mov byte ptr [ebp-4] 2 +
call sub_101B574  +
push dword ptr [ebp-78h]  +
mov byte ptr [ebp-4] 1 +
call sub_10014D2  +
pop ecx  +
jmp loc_10078F1  +
mov ecx [ebp-64h] +
push ecx  +
call sub_100460A  +
push eax  +
mov eax off_10220C4 +
push offset dword_1012420  +
push 27h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101AB75  +
jmp loc_1007860  +
***
push dword ptr [esi+8]  +
mov ecx ebx +
call sub_100309F  +
mov esi [esi] +
push edi  +
call sub_101AE8C  +
push edi  +
call sub_10014DF  +
cmp byte ptr [esi+4Dh] 0 +
pop ecx  +
mov edi esi +
jnz loc_10030B8  +
jmp loc_1010D00  +
***
push edi  +
mov edi ecx +
lea ecx [ebp+arg_4] +
call sub_101AD35  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_101AEA4  +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jnz loc_1010D28  +
pop edi  +
jmp loc_1003059  +
***
push eax  +
push offset dword_1012420  +
push 0Bh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1013441  +
jmp loc_1002FA8  +
***
mov [esi+20h] edi +
lea ecx [esi+30h] +
mov byte ptr [ebp-4] 3 +
call sub_101B11A  +
call ds:GetTickCount  +
push eax  +
call ds:srand  +
jmp loc_10079C4  +
***
xor eax eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx eax +
mov dword_1022114 eax +
call sub_101ACD9  +
jmp loc_1007007  +
***
call ds:__imp_GetLastError  +
cmp eax esi +
jle loc_1004DC9  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1004DC9  +
mov eax 8007000Eh +
jmp loc_1004DC9  +
mov eax 80070057h +
jmp loc_1004DC9  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_1010DE1  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
push [ebp+Buffer]  +
call sub_10014D2  +
mov eax esi +
jmp loc_1004DC7  +
mov esi 80004005h +
jmp loc_1010DE3  +
***
mov eax [ebp+arg_8] +
jmp loc_100C013  +
***
push 8007000Eh  +
lea ecx [ebp+var_20] +
call sub_10127D1  +
push offset dword_101F214  +
lea eax [ebp+var_20] +
push eax  +
call _CxxThrowException  +
push 8007000Eh  +
lea ecx [ebp+var_20] +
call sub_10127D1  +
push offset dword_101F214  +
lea eax [ebp+var_20] +
push eax  +
call _CxxThrowException  +
cmp [ebp+arg_0] esi +
jnz loc_1004E38  +
test edi edi +
jz loc_1004E38  +
jmp loc_1004EFF  +
***
cmp [ebp+arg_8] esi +
jnz loc_1004E62  +
mov [ebp+arg_8] offset dword_100348C +
jmp loc_1004E62  +
mov esi eax +
test edi edi +
jz loc_1010E6D  +
xor eax eax +
mov [edx] ax +
test [ebp+arg_14] 1C00h +
jz loc_1010E95  +
test edi edi +
jz loc_1010E95  +
push [ebp+arg_14]  +
lea eax [ebp+arg_4] +
push eax  +
lea eax [edi+edi] +
mov edi [ebp+arg_0] +
push eax  +
lea ebx [ebp+var_4] +
xor ecx ecx +
call sub_101B70C  +
mov ebx [ebp+var_4] +
test esi esi +
jl loc_1004F06  +
jmp loc_1004EE1  +
mov ecx [ebp+arg_8] +
cmp word ptr [ecx] 0 +
jz loc_1004EE1  +
mov esi edx +
neg esi  +
sbb esi esi +
and esi 23h +
add esi eax +
jmp loc_1010E6D  +
dec eax  +
dec eax  +
dec ecx  +
mov [ebp+var_4] 8007007Ah +
jmp loc_1004EB2  +
cmp ebx 1 +
jbe loc_1004EE1  +
lea eax [ebx+ebx] +
cmp eax 2 +
jbe loc_1004EE1  +
add eax 0FFFFFFFEh +
push eax  +
mov eax [ebp+arg_4] +
and ecx 0FFh +
push ecx  +
add eax 2 +
push eax  +
call memset  +
add esp 0Ch +
jmp loc_1004EE1  +
***
push 8000FFFFh  +
lea ecx [ebp+var_24] +
call sub_10127D1  +
push offset dword_101F214  +
lea eax [ebp+var_24] +
push eax  +
call _CxxThrowException  +
push 57h  +
jmp loc_1010F04  +
push eax  +
jmp loc_1010F04  +
***
push eax  +
call LsaDeregisterLogonProcess  +
or dword ptr [esi] 0FFFFFFFFh +
jmp loc_100310F  +
***
cmp edi 3FFFFFFFh +
jbe loc_1010F3C  +
call loc_101B8C3  +
push eax  +
push edi  +
call sub_101B81C  +
mov [esi+4] eax +
mov [esi+8] eax +
lea eax [eax+edi*4] +
mov [esi+0Ch] eax +
mov al 1 +
jmp loc_1008AFF  +
***
push dword ptr [esi+4]  +
push ecx  +
push offset dword_10125C8  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017793  +
jmp loc_1004FA0  +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_1010F98  +
test byte ptr [eax+1Ch] 8 +
jz loc_1010F98  +
push dword ptr [esi+4]  +
push offset dword_10125C8  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101332E  +
pop esi  +
retn   +
***
mov esp [ebp-18h] +
jmp loc_1001B93  +
***
mov ecx [ecx+4] +
test ecx ecx +
jz locret_1003132  +
push ecx  +
call ds:HeapDestroy  +
jmp locret_1003132  +
***
xor ecx ecx +
jmp loc_100A9E7  +
push 0  +
lea ecx [ebp+var_C] +
call sub_1012A0D  +
push offset dword_101F044  +
lea eax [ebp+var_C] +
push eax  +
call _CxxThrowException  +
int 3  +
mov eax [eax] +
test eax eax +
jz nullsub_2  +
mov edx [eax] +
push 1  +
mov ecx eax +
call dword ptr [edx]  +
jmp nullsub_2  +
***
call sub_1001A04  +
and dword_102CC9C 0 +
jmp locret_1002DAD  +
***
call sub_10170F0  +
jmp loc_1002DC1  +
***
call sub_10170F0  +
jmp loc_1002DDC  +
***
call sub_10170F0  +
jmp loc_1002DF7  +
***
call sub_10170F0  +
jmp loc_1002E12  +
***
call sub_10170F0  +
jmp loc_1002E2D  +
***
call sub_10170F0  +
jmp loc_1002E48  +
***
call sub_10170F0  +
jmp loc_1002E63  +
***
call sub_10170F0  +
jmp loc_1002E7E  +
***
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 0  +
push hHeap  +
call ds:HeapAlloc  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
jz loc_10127C8  +
push dword ptr [ebp+8]  +
push 0  +
push hHeap  +
call ds:HeapFree  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
or dword ptr [eax+0Ch] 0FFFFFFFFh +
or dword ptr [eax+10h] 0FFFFFFFFh +
or dword ptr [eax+18h] 0FFFFFFFFh +
mov byte ptr [eax+4] 0 +
mov dword ptr [eax] offset off_1009530 +
mov [eax+8] ecx +
mov dword ptr [eax+1Ch] offset dword_10110A8 +
pop ebp  +
retn 4  +
***
mov eax [ecx+0Ch] +
retn   +
***
mov eax [ecx+10h] +
retn   +
***
mov eax [ecx+18h] +
retn   +
***
mov eax [ecx+1Ch] +
retn   +
***
mov edi edi +
push esi  +
push 0Eh  +
mov esi ecx +
call sub_10127D1  +
mov dword ptr [esi] offset off_1009530 +
mov eax esi +
pop esi  +
retn   +
***
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+8] +
mov dword ptr [eax] offset off_1011090 +
mov cl [ecx+4] +
mov [eax+4] cl +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov dword ptr [eax] offset off_1011090 +
mov dl [ecx+4] +
mov [eax+4] dl +
mov dword ptr [eax] offset off_1009530 +
mov edx [ecx+8] +
mov [eax+8] edx +
mov edx [ecx+0Ch] +
mov [eax+0Ch] edx +
mov edx [ecx+10h] +
mov [eax+10h] edx +
mov dl [ecx+14h] +
mov [eax+14h] dl +
mov edx [ecx+18h] +
mov [eax+18h] edx +
mov ecx [ecx+1Ch] +
mov [eax+1Ch] ecx +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+8]  +
mov esi ecx +
call sub_1012881  +
mov dword ptr [esi] offset off_1009530 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 10h  +
push [ebp+arg_14]  +
lea eax [ebp+arg_10] +
push 4  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 28h +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 10h  +
push [ebp+arg_10]  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 20h +
pop ebp  +
retn 14h  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_10018DC +
jz loc_10129AC  +
push esi  +
call sub_10014DF  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
adc eax offset DeleteCriticalSection +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call memcpy_s  +
mov eax [ebp+arg_0] +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call memmove_s  +
mov eax [ebp+arg_0] +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
lea eax [ebp+arg_0] +
push eax  +
mov esi ecx +
call ??0exception@@QAE@ABQBD@Z  +
mov dword ptr [esi] offset off_10110BC +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov dword ptr [ecx] offset off_10110BC +
jmp ??1exception@@UAE@XZ  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_10110BC +
call ??1exception@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_1012A60  +
push esi  +
call sub_10014DF  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call ??0exception@@QAE@ABV0@@Z  +
mov dword ptr [esi] offset off_10110BC +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ecx+18h] +
lea eax [ecx+4] +
cmp esi 10h +
jb loc_1012AC2  +
mov edx [eax] +
jmp loc_1012AC4  +
mov edx eax +
cmp [ebp+arg_0] edx +
jb loc_1012ADE  +
cmp esi 10h +
jb loc_1012AD0  +
mov eax [eax] +
mov ecx [ecx+14h] +
add ecx eax +
cmp ecx [ebp+arg_0] +
jbe loc_1012ADE  +
mov al 1 +
jmp loc_1012AE0  +
xor al al +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10129C7  +
add esp 10h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10129EA  +
add esp 10h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+18h] 10h +
mov eax [ebp+arg_0] +
mov [ecx+14h] eax +
jb loc_1012BC1  +
mov ecx [ecx+4] +
jmp loc_1012BC4  +
add ecx 4 +
mov byte ptr [ecx+eax] 0 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1012B30  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1012B52  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+8] +
test eax eax +
jz loc_1012C27  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov esi [esi] +
test esi esi +
jz loc_1012C33  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
pop esi  +
retn   +
***
call sub_1001448  +
mov esi ecx +
lea ebx [esi+0Ch] +
push ebx  +
lea ecx [ebp-10h] +
call sub_1001B5E  +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_1009B9C  +
test eax eax +
jz loc_1012C6E  +
push dword ptr [ebp-10h]  +
call ds:LeaveCriticalSection  +
jmp loc_1012CE0  +
mov edi ds:LeaveCriticalSection +
mov eax [esi+24h] +
cmp eax 1 +
jz loc_1012C81  +
cmp eax 2 +
jnz loc_1012C95  +
push ebx  +
call edi  +
push 64h  +
call ds:Sleep  +
mov ecx ebx +
call sub_1001B7C  +
jmp loc_1012C74  +
mov ecx esi +
call sub_1009B9C  +
test eax eax +
jnz loc_1012CDB  +
mov ecx [esi+38h] +
or dword ptr [esi+8] 1 +
mov dword ptr [esi+24h] 5 +
mov eax [ecx] +
call dword ptr [eax+8]  +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_1012CDB  +
test byte ptr [eax+1Ch] 80h +
jz loc_1012CDB  +
add esi 28h +
push esi  +
push offset dword_10110AC  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101295A  +
push dword ptr [ebp-10h]  +
call edi  +
call sub_100165F  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
mov esi ecx +
jz loc_1012D1F  +
cmp dword ptr [esi+18h] 10h +
jb loc_1012D1F  +
cmp [ebp+arg_4] 0 +
lea eax [esi+4] +
push edi  +
mov edi [eax] +
jbe loc_1012D17  +
push [ebp+arg_4]  +
push edi  +
push 10h  +
push eax  +
call sub_1012BD1  +
push edi  +
call sub_10014DF  +
pop ecx  +
pop edi  +
push [ebp+arg_4]  +
mov ecx esi +
mov dword ptr [esi+18h] 0Fh +
call sub_1012BAB  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp [esi+14h] edi +
jnb loc_1012D50  +
call loc_10148D1  +
mov eax [esi+14h] +
sub eax edi +
cmp eax [ebp+arg_4] +
jnb loc_1012D5D  +
mov [ebp+arg_4] eax +
cmp [ebp+arg_4] 0 +
jbe loc_1012DA0  +
mov ecx [esi+18h] +
push ebx  +
lea edx [esi+4] +
cmp ecx 10h +
jb loc_1012D73  +
mov ebx [edx] +
jmp loc_1012D75  +
mov ebx edx +
cmp ecx 10h +
jb loc_1012D7C  +
mov edx [edx] +
sub eax [ebp+arg_4] +
add ebx edi +
add ebx [ebp+arg_4] +
push eax  +
push ebx  +
sub ecx edi +
push ecx  +
add edx edi +
push edx  +
call sub_1012BF3  +
mov eax [esi+14h] +
sub eax [ebp+arg_4] +
mov ecx esi +
push eax  +
call sub_1012BAB  +
pop ebx  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
call sub_1002917  +
mov ecx [ebp-18h] +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1012C15  +
test [ebp+arg_0] 1 +
jz loc_1012EA7  +
push esi  +
call sub_10014DF  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp edi 0FFFFFFFEh +
jbe loc_1012ED8  +
call loc_1014882  +
cmp [esi+18h] edi +
jnb loc_1012EEA  +
push dword ptr [esi+14h]  +
mov ecx esi +
push edi  +
call sub_1012DAD  +
jmp loc_1012F16  +
cmp [ebp+arg_4] 0 +
jz loc_1012F0A  +
cmp edi 10h +
jnb loc_1012F0A  +
mov eax [esi+14h] +
cmp edi eax +
jnb loc_1012EFE  +
mov eax edi +
push eax  +
push 1  +
mov ecx esi +
call sub_1012CEB  +
jmp loc_1012F16  +
test edi edi +
jnz loc_1012F16  +
push edi  +
mov ecx esi +
call sub_1012BAB  +
xor eax eax +
cmp eax edi +
sbb eax eax +
pop edi  +
neg eax  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
push 0  +
push 1  +
lea ecx [esi+0Ch] +
mov dword ptr [esi] offset off_10110C8 +
call sub_1012CEB  +
mov ecx esi +
pop esi  +
jmp ??1exception@@UAE@XZ  +
***
cmp dword ptr [ecx+24h] 10h +
jb loc_1012F57  +
mov eax [ecx+10h] +
retn   +
***
lea eax [ecx+10h] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1012F29  +
test byte ptr [ebp+8] 1 +
jz loc_1012F7A  +
push esi  +
call sub_10014DF  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov ebx ecx +
cmp [edi+14h] eax +
jnb loc_1012FA0  +
call loc_10148D1  +
mov esi [edi+14h] +
mov eax [ebp+arg_4] +
sub esi eax +
cmp [ebp+arg_8] esi +
jnb loc_1012FB0  +
mov esi [ebp+arg_8] +
mov ecx ebx +
cmp ebx edi +
jnz loc_1012FCE  +
push 0FFFFFFFFh  +
add esi eax +
push esi  +
call sub_1012D3A  +
push [ebp+arg_4]  +
mov ecx ebx +
push 0  +
call sub_1012D3A  +
jmp loc_101300E  +
push 0  +
push esi  +
call sub_1012EC2  +
test al al +
jz loc_101300E  +
cmp dword ptr [edi+18h] 10h +
jb loc_1012FE5  +
mov edi [edi+4] +
jmp loc_1012FE8  +
add edi 4 +
mov ecx [ebx+18h] +
cmp ecx 10h +
jb loc_1012FF5  +
mov eax [ebx+4] +
jmp loc_1012FF8  +
lea eax [ebx+4] +
mov edx [ebp+arg_4] +
push esi  +
add edi edx +
push edi  +
push ecx  +
push eax  +
call sub_1012BD1  +
push esi  +
mov ecx ebx +
call sub_1012BAB  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_1012AAD  +
test al al +
jz loc_1013050  +
cmp dword ptr [esi+18h] 10h +
jb loc_101303D  +
mov eax [esi+4] +
jmp loc_1013040  +
lea eax [esi+4] +
push [ebp+arg_4]  +
sub edi eax +
push edi  +
push esi  +
mov ecx esi +
call sub_1012F86  +
jmp loc_1013087  +
push 0  +
push [ebp+arg_4]  +
mov ecx esi +
call sub_1012EC2  +
test al al +
jz loc_1013085  +
mov ecx [esi+18h] +
cmp ecx 10h +
jb loc_101306D  +
mov eax [esi+4] +
jmp loc_1013070  +
lea eax [esi+4] +
push [ebp+arg_4]  +
push edi  +
push ecx  +
push eax  +
call sub_1012BD1  +
push [ebp+arg_4]  +
mov ecx esi +
call sub_1012BAB  +
mov eax esi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0  +
mov dword ptr [esi+18h] 0Fh +
call sub_1012BAB  +
push 0FFFFFFFFh  +
push 0  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1012F86  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
lea edx [eax+1] +
push ebx  +
mov bl [eax] +
inc eax  +
test bl bl +
jnz loc_10130CE  +
sub eax edx +
push eax  +
push [ebp+arg_0]  +
call sub_101301C  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10019E8  +
test [ebp+arg_0] 1 +
jz loc_1013104  +
push esi  +
call sub_10014DF  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001448  +
mov esi ecx +
mov [ebp-10h] esi +
call ??0exception@@QAE@XZ  +
push dword ptr [ebp+8]  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+0Ch] +
mov dword ptr [esi] offset off_10110C8 +
call sub_1013092  +
mov eax esi +
call sub_100165F  +
retn 4  +
***
call sub_1001448  +
mov esi ecx +
mov [ebp-10h] esi +
mov edi [ebp+8] +
push edi  +
call ??0exception@@QAE@ABV0@@Z  +
and dword ptr [ebp-4] 0 +
add edi 0Ch +
push edi  +
lea ecx [esi+0Ch] +
mov dword ptr [esi] offset off_10110C8 +
call sub_1013092  +
mov eax esi +
call sub_100165F  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1013110  +
mov dword ptr [esi] offset off_10110D4 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
jmp sub_1012F29  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_10110D4 +
call sub_1012F29  +
test byte ptr [ebp+8] 1 +
jz loc_10131DB  +
push esi  +
call sub_10014DF  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_101314A  +
mov dword ptr [esi] offset off_10110D4 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0  +
mov dword ptr [esi+18h] 0Fh +
call sub_1012BAB  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_10130C2  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push 0  +
call sub_10130EA  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ecx  +
lea ecx [ebp-28h] +
call sub_101314A  +
push offset dword_101328C  +
lea eax [ebp-28h] +
push eax  +
call _CxxThrowException  +
int 3  +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
jmp loc_10132DA  +
push esi  +
call sub_1013251  +
add esi 4 +
cmp esi [ebp+arg_4] +
jnz loc_10132D1  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10132C6  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 18h +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_10] +
test edx edx +
jz loc_101335F  +
cmp word ptr [edx] 0 +
jnz loc_1013344  +
push 0Eh  +
jmp loc_1013361  +
mov eax edx +
push esi  +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_101334A  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_1013362  +
push 0Ah  +
pop eax  +
test edx edx +
jz loc_1013373  +
cmp word ptr [edx] 0 +
jnz loc_1013378  +
mov edx offset aNull +
jmp loc_1013378  +
mov edx offset aNull_0 +
push 0  +
push eax  +
push edx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 20h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+10h] +
xor edx edx +
push ebx  +
mov [eax] edx +
mov eax [ebp+8] +
sub eax 4 +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
mov edi esi +
jz loc_10133CA  +
dec eax  +
jz loc_10133C1  +
push 57h  +
pop eax  +
jmp loc_1013435  +
xor ebx ebx +
xor eax eax +
mov [ebp+0Fh] al +
jmp loc_10133ED  +
push dword ptr [ebp+14h]  +
call EtwGetTraceLoggerHandle  +
mov ebx eax +
push edx  +
push ebx  +
mov [ebp-4] edx +
call EtwGetTraceEnableLevel  +
push dword ptr [ebp-4]  +
mov [ebp+0Fh] al +
push ebx  +
call EtwGetTraceEnableFlags  +
mov edx [ebp-4] +
movzx ecx word ptr [esi+1Ah] +
test cl 1 +
jz loc_1013416  +
cmp dword ptr [esi+10h] 0 +
jz loc_1013416  +
mov ecx [esi+10h] +
mov [ecx] ebx +
mov [ecx+4] edx +
movzx ecx byte ptr [ebp+0Fh] +
mov edx [esi+10h] +
mov [edx+0Ch] ecx +
mov ecx [esi+10h] +
mov [ecx+8] eax +
jmp loc_1013433  +
test cl 2 +
jz loc_1013424  +
mov esi [esi+10h] +
test esi esi +
jz loc_1013424  +
mov edi esi +
mov cl [ebp+0Fh] +
mov [edi+10h] ebx +
mov [edi+14h] edx +
mov [edi+19h] cl +
mov [edi+1Ch] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 20h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
lea eax [ebp+arg_18] +
push eax  +
push 4  +
lea eax [ebp+arg_14] +
push eax  +
push 10h  +
push [ebp+arg_10]  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 30h +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_18] +
test edx edx +
jz loc_10134D5  +
cmp word ptr [edx] 0 +
jnz loc_10134BA  +
push 0Eh  +
jmp loc_10134D7  +
mov eax edx +
push esi  +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10134C0  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_10134D8  +
push 0Ah  +
pop eax  +
test edx edx +
jz loc_10134E9  +
cmp word ptr [edx] 0 +
jnz loc_10134EE  +
mov edx offset aNull +
jmp loc_10134EE  +
mov edx offset aNull_0 +
push 0  +
push eax  +
push edx  +
push 10h  +
push [ebp+arg_14]  +
lea eax [ebp+arg_10] +
push 4  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 30h +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_14] +
test esi esi +
jz loc_101353A  +
mov eax esi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_101352E  +
sub eax edx +
inc eax  +
jmp loc_101353D  +
push 5  +
pop eax  +
mov ecx esi +
test esi esi +
jnz loc_1013548  +
mov ecx offset aNull_1 +
push 0  +
push eax  +
push ecx  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 28h +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov edx [ebp+arg_1C] +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
cmp edx ebx +
jz loc_10135AE  +
cmp [edx] bx +
jnz loc_1013592  +
mov [ebp+arg_1C] 0Eh +
jmp loc_10135B5  +
mov eax edx +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_1013597  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
mov [ebp+arg_1C] eax +
jmp loc_10135B5  +
mov [ebp+arg_1C] 0Ah +
cmp edx ebx +
jz loc_10135CC  +
cmp [edx] bx +
jnz loc_10135C7  +
mov [ebp+var_4] offset aNull +
jmp loc_10135D3  +
mov [ebp+var_4] edx +
jmp loc_10135D3  +
mov [ebp+var_4] offset aNull_0 +
mov edi [ebp+arg_18] +
cmp edi ebx +
jz loc_10135FC  +
cmp [edi] bx +
jnz loc_10135E3  +
push 0Eh  +
jmp loc_10135FE  +
mov eax edi +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_10135E8  +
sub eax esi +
sar eax 1 +
lea ebx [eax+eax+2] +
jmp loc_10135FF  +
push 0Ah  +
pop ebx  +
test edi edi +
jz loc_1013610  +
cmp word ptr [edi] 0 +
jnz loc_1013615  +
mov edi offset aNull +
jmp loc_1013615  +
mov edi offset aNull_0 +
mov edx [ebp+arg_14] +
test edx edx +
jz loc_101362D  +
mov eax edx +
lea esi [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1013621  +
sub eax esi +
inc eax  +
jmp loc_1013630  +
push 5  +
pop eax  +
mov ecx edx +
test edx edx +
jnz loc_101363B  +
mov ecx offset aNull_1 +
push 0  +
push 4  +
lea edx [ebp+arg_20] +
push edx  +
push [ebp+arg_1C]  +
push [ebp+var_4]  +
push ebx  +
push edi  +
push eax  +
push ecx  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 40h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
jmp loc_1013681  +
mov eax ecx +
mov ecx [eax+8] +
cmp byte ptr [ecx+21h] 0 +
jz loc_101367F  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
jmp loc_101369F  +
mov eax ecx +
mov ecx [eax] +
cmp byte ptr [ecx+21h] 0 +
jz loc_101369D  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
xor dl dl +
cmp [eax+21h] dl +
jz loc_10136C3  +
mov eax [eax+8] +
jmp loc_10136E9  +
mov ecx [eax] +
cmp [ecx+21h] dl +
jnz loc_10136DA  +
push ecx  +
call sub_1013675  +
jmp loc_10136E9  +
mov ecx [esi] +
cmp ecx [eax] +
jnz loc_10136E2  +
mov [esi] eax +
mov eax [eax+4] +
cmp [eax+21h] dl +
jz loc_10136D2  +
mov ecx [esi] +
cmp [ecx+21h] dl +
jnz loc_10136EB  +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx ecx +
mov eax [ebx] +
test eax eax +
jnz loc_101370B  +
mov eax [ebp+arg_0] +
mov eax [eax] +
neg eax  +
sbb eax eax +
jmp loc_101376F  +
push edi  +
mov edi [ebp+arg_0] +
cmp dword ptr [edi] 0 +
jnz loc_1013719  +
xor eax eax +
inc eax  +
jmp loc_101376E  +
push esi  +
mov esi ds:SysStringLen +
push eax  +
call esi  +
push dword ptr [edi]  +
mov [ebp+arg_0] eax +
call esi  +
mov edx [ebp+arg_0] +
cmp edx eax +
jbe loc_1013733  +
mov edx eax +
mov ecx [ebx] +
mov edi [edi] +
jmp loc_1013749  +
mov bx [edi] +
mov si [ecx] +
dec edx  +
inc edi  +
inc edi  +
inc ecx  +
inc ecx  +
cmp si bx +
jnz loc_1013757  +
test edx edx +
ja loc_1013739  +
cmp [ebp+arg_0] eax +
jnb loc_1013763  +
or eax 0FFFFFFFFh +
jmp loc_101376D  +
movzx edx word ptr [edi-2] +
movzx eax word ptr [ecx-2] +
sub eax edx +
jmp loc_101376D  +
xor ecx ecx +
cmp [ebp+arg_0] eax +
setnz cl  +
mov eax ecx +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax ecx +
test esi esi +
jz loc_101379B  +
push edi  +
push 8  +
pop ecx  +
lea edi [eax+1Ch] +
movs   +
mov dword ptr [eax+3Ch] 1 +
pop edi  +
jmp loc_101379F  +
and dword ptr [eax+3Ch] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
adc eax offset LeaveCriticalSection +
retn   +
***
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
jmp loc_1013801  +
mov eax ecx +
mov ecx [eax] +
cmp byte ptr [ecx+15h] 0 +
jz loc_10137FF  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx+8] +
push esi  +
mov esi [eax] +
mov [edx+8] esi +
mov esi [eax] +
cmp byte ptr [esi+15h] 0 +
jnz loc_101382E  +
mov [esi+4] edx +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
pop esi  +
cmp edx [ecx+4] +
jnz loc_1013842  +
mov [ecx+4] eax +
jmp loc_1013850  +
mov ecx [edx+4] +
cmp edx [ecx] +
jnz loc_101384D  +
mov [ecx] eax +
jmp loc_1013850  +
mov [ecx+8] eax +
mov [eax] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
push ecx  +
call ds:InterlockedExchange  +
jmp sub_100142F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_10138A4  +
test byte ptr [eax+1Ch] 80h +
jz loc_10138A4  +
push [ebp+arg_0]  +
lea ecx [esi-4] +
push ecx  +
push offset loc_101110C  +
push 1Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1016CE2  +
push dword ptr [esi+14h]  +
call ds:SetEvent  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
mov esi ecx +
call sub_100149E  +
mov eax [ebp+arg_0] +
add eax 10h +
cmp eax 10h +
jnb loc_10138ED  +
push 8007000Eh  +
lea ecx [ebp+var_20] +
call sub_10127D1  +
push offset dword_101F214  +
lea eax [ebp+var_20] +
push eax  +
call _CxxThrowException  +
push eax  +
push 8  +
call sub_1001678  +
push eax  +
mov ecx esi +
call sub_1001482  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
xor dl dl +
cmp [eax+15h] dl +
jz loc_101391A  +
mov eax [eax+8] +
jmp loc_1013940  +
mov ecx [eax] +
cmp [ecx+15h] dl +
jnz loc_1013931  +
push ecx  +
call sub_101CCFC  +
jmp loc_1013940  +
mov ecx [esi] +
cmp ecx [eax] +
jnz loc_1013939  +
mov [esi] eax +
mov eax [eax+4] +
cmp [eax+15h] dl +
jz loc_1013929  +
mov ecx [esi] +
cmp [ecx+15h] dl +
jnz loc_1013942  +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx+8] +
push esi  +
mov esi [eax] +
mov [edx+8] esi +
mov esi [eax] +
cmp byte ptr [esi+21h] 0 +
jnz loc_1013965  +
mov [esi+4] edx +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
pop esi  +
cmp edx [ecx+4] +
jnz loc_1013979  +
mov [ecx+4] eax +
jmp loc_1013987  +
mov ecx [edx+4] +
cmp edx [ecx] +
jnz loc_1013984  +
mov [ecx] eax +
jmp loc_1013987  +
mov [ecx+8] eax +
mov [eax] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx] +
push esi  +
mov esi [eax+8] +
mov [edx] esi +
mov esi [eax+8] +
cmp byte ptr [esi+21h] 0 +
jnz loc_10139B1  +
mov [esi+4] edx +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
pop esi  +
cmp edx [ecx+4] +
jnz loc_10139C5  +
mov [ecx+4] eax +
jmp loc_10139D4  +
mov ecx [edx+4] +
cmp edx [ecx+8] +
jnz loc_10139D2  +
mov [ecx+8] eax +
jmp loc_10139D4  +
mov [ecx] eax +
mov [eax+8] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [ecx] +
mov eax [eax] +
cmp ecx eax +
jnz loc_10139F7  +
xor eax eax +
jmp loc_1013A0D  +
test ecx ecx +
jnz loc_1013A00  +
or eax 0FFFFFFFFh +
jmp loc_1013A0D  +
test eax eax +
jnz loc_1013A07  +
inc eax  +
jmp loc_1013A0D  +
push eax  +
call sub_10136F2  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call sub_10139E3  +
xor ecx ecx +
test eax eax +
setl cl  +
mov al cl +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
push [ebp+arg_4]  +
mov esi ecx +
call sub_10022C8  +
mov edi [esi+4] +
mov [ebp+var_4] eax +
cmp eax edi +
jz loc_1013A75  +
add eax 0Ch +
push eax  +
push [ebp+arg_4]  +
mov ecx esi +
call sub_1001FE2  +
test al al +
jnz loc_1013A75  +
lea eax [ebp+var_4] +
jmp loc_1013A7B  +
mov [ebp+arg_4] edi +
lea eax [ebp+arg_4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] ecx +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_10220C8 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
lea esi [ebp+arg_0] +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+var_18] +
movs   +
mov esi [ebp+arg_10] +
push eax  +
mov ebx ecx +
call sub_1013A42  +
mov eax [ebp+var_18] +
cmp [ebx+4] eax +
jnz loc_1013ACD  +
mov eax 80070490h +
jmp loc_1013AD9  +
push dword ptr [eax+1Ch]  +
mov ecx esi +
call sub_100A586  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001FD0  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 408h +
mov eax dword_10220C8 +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+0Ch] +
dec eax  +
push edi  +
mov edi [ebp+8] +
jz loc_1013C65  +
dec eax  +
jz loc_1013C5D  +
sub eax 0Ah +
jz loc_1013C65  +
sub eax 5 +
jz loc_1013B30  +
sub eax 5 +
jnz loc_1013C42  +
cmp byte_102CEEC 0 +
jnz loc_1013C1E  +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_1013B61  +
test byte ptr [eax+1Ch] 80h +
jz loc_1013B61  +
push offset loc_101110C  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1013308  +
mov eax dword_102CEE8 +
mov byte_102CEEC 1 +
test eax eax +
jz loc_1013C65  +
push esi  +
add eax 5Ch +
push eax  +
lea ecx [ebp-408h] +
call sub_100140F  +
mov eax dword_102CEE8 +
push dword ptr [ebp-408h]  +
mov dword ptr [eax+74h] 4 +
mov eax dword_102CEE8 +
mov esi [eax+80h] +
call ds:LeaveCriticalSection  +
test esi esi +
pop esi  +
jz loc_1013C03  +
xor eax eax +
push 3FEh  +
push eax  +
mov [ebp-404h] ax +
lea eax [ebp-402h] +
push eax  +
call memset  +
add esp 0Ch +
push 200h  +
lea eax [ebp-404h] +
push eax  +
push 0C9h  +
push 0  +
call ds:GetModuleHandleW  +
push eax  +
call ds:LoadStringW  +
lea eax [ebp-404h] +
push eax  +
mov eax dword_102CEE8 +
push dword ptr [eax+84h]  +
call ds:ShutdownBlockReasonCreate  +
mov ecx dword_102CEE8 +
call sub_10031BD  +
mov eax dword_102CEE8 +
push dword ptr [eax+18h]  +
call ds:SetEvent  +
jmp loc_1013C42  +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_1013C42  +
test byte ptr [eax+1Ch] 80h +
jz loc_1013C42  +
push offset loc_101110C  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1013308  +
cmp dword_102CEE8 0 +
jz loc_1013C65  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push edi  +
call ds:DefWindowProcW  +
jmp loc_1013C67  +
push 0  +
call ds:PostQuitMessage  +
xor eax eax +
mov ecx [ebp-4] +
xor ecx ebp +
pop edi  +
call sub_1001FD0  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 42Ch +
mov eax dword_10220C8 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov esi ecx +
mov dword_102CEE8 esi +
push edi  +
xor edi edi +
mov [esi+8Ch] eax +
mov [ebp+WndClass.hInstance] eax +
lea eax [ebp+WndClass] +
mov ebx offset ClassName +
push eax  +
mov [ebp+WndClass.style] 3 +
mov [ebp+WndClass.lpfnWndProc] offset loc_1013AEF +
mov [ebp+WndClass.cbClsExtra] edi +
mov [ebp+WndClass.cbWndExtra] edi +
mov [ebp+WndClass.hIcon] edi +
mov [ebp+WndClass.hCursor] edi +
mov [ebp+WndClass.hbrBackground] edi +
mov [ebp+WndClass.lpszMenuName] edi +
mov [ebp+WndClass.lpszClassName] ebx +
call ds:RegisterClassW  +
mov [esi+88h] ax +
cmp ax di +
jnz loc_1013D3C  +
call ds:__imp_GetLastError  +
mov ecx off_10220C4 +
cmp ecx offset off_10220C4 +
jz loc_1013D35  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1013D35  +
push eax  +
push offset loc_101110C  +
push 0Ch  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1013441  +
xor al al +
jmp loc_1013DEB  +
xor eax eax +
push 3FEh  +
mov [ebp+WindowName] ax +
lea eax [ebp-402h] +
push edi  +
push eax  +
call memset  +
add esp 0Ch +
push 200h  +
lea eax [ebp+WindowName] +
push eax  +
push 65h  +
push edi  +
call ds:GetModuleHandleW  +
push eax  +
call ds:LoadStringW  +
push edi  +
push dword ptr [esi+8Ch]  +
mov eax 80000000h +
push edi  +
push edi  +
push eax  +
push eax  +
push eax  +
push eax  +
push 0CF0000h  +
lea eax [ebp+WindowName] +
push eax  +
push ebx  +
push edi  +
call ds:CreateWindowExW  +
mov [esi+84h] eax +
cmp eax edi +
jnz loc_1013DD5  +
call ds:__imp_GetLastError  +
mov ecx off_10220C4 +
cmp ecx offset off_10220C4 +
jz loc_1013D35  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1013D35  +
push eax  +
push offset loc_101110C  +
push 0Dh  +
jmp loc_1013D2A  +
push edi  +
push eax  +
call ds:ShowWindow  +
push dword ptr [esi+84h]  +
call ds:UpdateWindow  +
mov al 1 +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001FD0  +
leave   +
retn 4  +
***
call sub_100431E  +
lea esi [ebp+8] +
lea edi [ebp-20h] +
movs   +
movs   +
movs   +
mov ebx ecx +
movs   +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_1013E41  +
test byte ptr [eax+1Ch] 80h +
jz loc_1013E41  +
lea ecx [ebp-20h] +
push ecx  +
push offset loc_101110C  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101295A  +
mov eax [ebx+8] +
xor esi esi +
push esi  +
push esi  +
lea ecx [ebp-20h] +
push ecx  +
mov ecx dword_1022110 +
push eax  +
push offset dword_1013ED0  +
call sub_10172EA  +
mov [ebp-24h] esi +
lea eax [ebx+5Ch] +
push eax  +
lea ecx [ebp-28h] +
mov [ebp-4] esi +
call sub_100140F  +
lea eax [ebp-24h] +
push eax  +
sub esp 10h +
mov edi esp +
lea esi [ebp-20h] +
movs   +
movs   +
movs   +
lea ecx [ebx+78h] +
mov byte ptr [ebp-4] 1 +
movs   +
call sub_1013A8D  +
test eax eax +
jge loc_1013EA5  +
push dword ptr [ebp-28h]  +
call ds:LeaveCriticalSection  +
mov ecx [ebp-24h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test ecx ecx +
jnz loc_1013EC3  +
jmp loc_1013EC8  +
mov ecx [ebp-24h] +
call sub_1012C3A  +
push dword ptr [ebp-28h]  +
call ds:LeaveCriticalSection  +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp dword ptr [ebp-24h] 0 +
jz loc_1013EC8  +
mov ecx [ebp-24h] +
call sub_1001AA5  +
call sub_1009AF4  +
retn 10h  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
call sub_10019E8  +
mov ecx esi +
pop esi  +
jmp sub_10019E8  +
***
add [eax+11h] edx +
add [ecx] eax +
jmp sub_1012F29  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1011150 +
call sub_1012F29  +
test byte ptr [ebp+8] 1 +
jz loc_1013F2F  +
push esi  +
call sub_10014DF  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_101314A  +
mov dword ptr [esi] offset off_1011150 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push [ebp+arg_C]  +
mov esi ecx +
mov [esi] eax +
mov eax [ebp+arg_4] +
mov [esi+4] eax +
mov eax [ebp+arg_8] +
lea ecx [esi+0Ch] +
mov [esi+8] eax +
call sub_101B5D6  +
mov al [ebp+arg_10] +
mov [esi+14h] al +
mov byte ptr [esi+15h] 0 +
mov eax esi +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
lea ecx [esi+0Ch] +
call sub_1013EE5  +
test [ebp+arg_0] 1 +
jz loc_1013FD0  +
push esi  +
call sub_10014DF  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001448  +
mov [ebp-10h] ecx +
mov edi [ebp+0Ch] +
cmp byte ptr [edi+21h] 0 +
jz loc_1014026  +
push offset aInvalidMapSetT  +
lea ecx [ebp-2Ch] +
call sub_1013225  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [ebp-54h] +
call sub_1013110  +
push offset dword_101F340  +
lea eax [ebp-54h] +
push eax  +
mov dword ptr [ebp-54h] offset off_1011150 +
call _CxxThrowException  +
lea ecx [ebp+0Ch] +
call sub_100260F  +
mov edx [edi] +
cmp byte ptr [edx+21h] 0 +
jz loc_101403B  +
mov ebx [edi+8] +
jmp loc_1014054  +
mov eax [edi+8] +
cmp byte ptr [eax+21h] 0 +
jz loc_1014048  +
mov ebx edx +
jmp loc_1014054  +
mov eax [ebp+0Ch] +
lea ecx [eax+8] +
mov ebx [ecx] +
cmp eax edi +
jnz loc_10140BD  +
cmp byte ptr [ebx+21h] 0 +
mov esi [edi+4] +
jnz loc_1014060  +
mov [ebx+4] esi +
mov ecx [ebp-10h] +
mov eax [ecx+4] +
cmp [eax+4] edi +
jnz loc_1014070  +
mov [eax+4] ebx +
jmp loc_101407B  +
cmp [esi] edi +
jnz loc_1014078  +
mov [esi] ebx +
jmp loc_101407B  +
mov [esi+8] ebx +
mov eax [ecx+4] +
cmp [eax] edi +
jnz loc_101409A  +
cmp byte ptr [ebx+21h] 0 +
jz loc_101408C  +
mov eax esi +
jmp loc_1014095  +
push ebx  +
call sub_1013693  +
mov ecx [ebp-10h] +
mov edx [ecx+4] +
mov [edx] eax +
mov eax [ecx+4] +
cmp [eax+8] edi +
jnz loc_1014119  +
cmp byte ptr [ebx+21h] 0 +
jz loc_10140AC  +
mov eax esi +
jmp loc_10140B5  +
push ebx  +
call sub_1013675  +
mov ecx [ebp-10h] +
mov edx [ecx+4] +
mov [edx+8] eax +
jmp loc_1014119  +
mov [edx+4] eax +
mov edx [edi] +
mov [eax] edx +
cmp eax [edi+8] +
jnz loc_10140CD  +
mov esi eax +
jmp loc_10140E6  +
cmp byte ptr [ebx+21h] 0 +
mov esi [eax+4] +
jnz loc_10140D9  +
mov [ebx+4] esi +
mov [esi] ebx +
mov edx [edi+8] +
mov [ecx] edx +
mov ecx [edi+8] +
mov [ecx+4] eax +
mov ecx [ebp-10h] +
mov ecx [ecx+4] +
cmp [ecx+4] edi +
jnz loc_10140F6  +
mov [ecx+4] eax +
jmp loc_1014104  +
mov ecx [edi+4] +
cmp [ecx] edi +
jnz loc_1014101  +
mov [ecx] eax +
jmp loc_1014104  +
mov [ecx+8] eax +
mov ecx [edi+4] +
mov [eax+4] ecx +
mov cl [eax+20h] +
mov dl [edi+20h] +
mov [eax+20h] dl +
mov [edi+20h] cl +
mov ecx [ebp-10h] +
cmp byte ptr [edi+20h] 1 +
jz loc_10141DD  +
jmp loc_1014222  +
cmp byte ptr [ebx+20h] 1 +
jnz loc_101421E  +
mov eax [esi] +
cmp ebx eax +
jnz loc_10141A4  +
mov eax [esi+8] +
cmp byte ptr [eax+20h] 0 +
jnz loc_1014155  +
mov byte ptr [eax+20h] 1 +
push esi  +
mov byte ptr [esi+20h] 0 +
call sub_1013949  +
mov eax [esi+8] +
mov ecx [ebp-10h] +
cmp byte ptr [eax+21h] 0 +
jnz loc_10141D8  +
mov edx [eax] +
cmp byte ptr [edx+20h] 1 +
jnz loc_101416C  +
mov edx [eax+8] +
cmp byte ptr [edx+20h] 1 +
jz loc_10141D4  +
mov edx [eax+8] +
cmp byte ptr [edx+20h] 1 +
jnz loc_101418B  +
mov edx [eax] +
mov byte ptr [edx+20h] 1 +
push eax  +
mov byte ptr [eax+20h] 0 +
call sub_1013995  +
mov eax [esi+8] +
mov ecx [ebp-10h] +
mov dl [esi+20h] +
mov [eax+20h] dl +
mov byte ptr [esi+20h] 1 +
mov eax [eax+8] +
push esi  +
mov byte ptr [eax+20h] 1 +
call sub_1013949  +
jmp loc_101421E  +
cmp byte ptr [eax+20h] 0 +
jnz loc_10141BD  +
mov byte ptr [eax+20h] 1 +
push esi  +
mov byte ptr [esi+20h] 0 +
call sub_1013995  +
mov eax [esi] +
mov ecx [ebp-10h] +
cmp byte ptr [eax+21h] 0 +
jnz loc_10141D8  +
mov edx [eax+8] +
cmp byte ptr [edx+20h] 1 +
jnz loc_10141EA  +
mov edx [eax] +
cmp byte ptr [edx+20h] 1 +
jnz loc_10141EA  +
mov byte ptr [eax+20h] 0 +
mov ebx esi +
mov esi [esi+4] +
mov eax [ecx+4] +
cmp ebx [eax+4] +
jz loc_101421E  +
jmp loc_1014128  +
mov edx [eax] +
cmp byte ptr [edx+20h] 1 +
jnz loc_1014208  +
mov edx [eax+8] +
mov byte ptr [edx+20h] 1 +
push eax  +
mov byte ptr [eax+20h] 0 +
call sub_1013949  +
mov eax [esi] +
mov ecx [ebp-10h] +
mov dl [esi+20h] +
mov [eax+20h] dl +
mov byte ptr [esi+20h] 1 +
mov eax [eax] +
push esi  +
mov byte ptr [eax+20h] 1 +
call sub_1013995  +
mov byte ptr [ebx+20h] 1 +
push edi  +
call sub_1002672  +
push edi  +
call sub_10014DF  +
pop ecx  +
mov ecx [ebp-10h] +
mov eax [ecx+8] +
test eax eax +
jbe loc_101423D  +
dec eax  +
mov [ecx+8] eax +
mov eax [ebp+8] +
mov ecx [ebp+0Ch] +
mov [eax] ecx +
call sub_100165F  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1014297  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1013F79  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push 0  +
call sub_1013FB3  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push 0  +
push 1  +
mov edi ecx +
call sub_100A9C4  +
push [ebp+arg_10]  +
mov esi eax +
push [ebp+arg_C]  +
mov ecx edi +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push esi  +
call sub_1014277  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 14h  +
***
call sub_1001448  +
mov edi ecx +
cmp dword ptr [edi+8] 1FFFFFFEh +
jb loc_1014332  +
push offset aMapSetTTooLong  +
lea ecx [ebp-28h] +
call sub_1013225  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_1013189  +
push offset dword_101F0E8  +
lea eax [ebp-50h] +
push eax  +
call _CxxThrowException  +
mov eax [edi+4] +
mov esi [ebp+10h] +
push 0  +
push dword ptr [ebp+14h]  +
push eax  +
push esi  +
push eax  +
call sub_10142B8  +
inc dword ptr [edi+8]  +
mov ebx eax +
mov eax [edi+4] +
cmp esi eax +
jnz loc_101435E  +
mov [eax+4] ebx +
mov eax [edi+4] +
mov [eax] ebx +
mov eax [edi+4] +
jmp loc_101437C  +
cmp byte ptr [ebp+0Ch] 0 +
jz loc_1014371  +
mov [esi] ebx +
mov eax [edi+4] +
cmp esi [eax] +
jnz loc_101437F  +
mov [eax] ebx +
jmp loc_101437F  +
mov [esi+8] ebx +
mov eax [edi+4] +
cmp esi [eax+8] +
jnz loc_101437F  +
mov [eax+8] ebx +
mov esi ebx +
lea eax [ebx+4] +
jmp loc_1014419  +
mov ecx [eax] +
mov edx [ecx+4] +
cmp ecx [edx] +
jnz loc_10143CA  +
mov edx [edx+8] +
cmp byte ptr [edx+14h] 0 +
jz loc_10143D2  +
cmp esi [ecx+8] +
jnz loc_10143AA  +
mov esi ecx +
push esi  +
mov ecx edi +
call sub_1013812  +
mov eax [esi+4] +
mov byte ptr [eax+14h] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
mov byte ptr [eax+14h] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_101CD61  +
jmp loc_1014416  +
mov edx [edx] +
cmp byte ptr [edx+14h] 0 +
jnz loc_10143EA  +
mov byte ptr [ecx+14h] 1 +
mov byte ptr [edx+14h] 1 +
mov ecx [eax] +
mov ecx [ecx+4] +
mov byte ptr [ecx+14h] 0 +
mov eax [eax] +
mov esi [eax+4] +
jmp loc_1014416  +
cmp esi [ecx] +
jnz loc_10143F8  +
mov esi ecx +
push esi  +
mov ecx edi +
call sub_101CD61  +
mov eax [esi+4] +
mov byte ptr [eax+14h] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
mov byte ptr [eax+14h] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_1013812  +
lea eax [esi+4] +
mov ecx [eax] +
cmp byte ptr [ecx+14h] 0 +
jz loc_1014389  +
mov eax [edi+4] +
mov eax [eax+4] +
mov byte ptr [eax+14h] 1 +
mov eax [ebp+8] +
mov [eax] ebx +
call sub_100165F  +
retn 10h  +
***
call sub_1001448  +
mov [ebp-10h] ecx +
mov edi [ebp+0Ch] +
cmp byte ptr [edi+15h] 0 +
jz loc_101448B  +
push offset aInvalidMapSetT  +
lea ecx [ebp-2Ch] +
call sub_1013225  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [ebp-54h] +
call sub_1013110  +
push offset dword_101F340  +
lea eax [ebp-54h] +
push eax  +
mov dword ptr [ebp-54h] offset off_1011150 +
call _CxxThrowException  +
lea ecx [ebp+0Ch] +
call sub_101CD1A  +
mov edx [edi] +
cmp byte ptr [edx+15h] 0 +
jz loc_10144A0  +
mov ebx [edi+8] +
jmp loc_10144B9  +
mov eax [edi+8] +
cmp byte ptr [eax+15h] 0 +
jz loc_10144AD  +
mov ebx edx +
jmp loc_10144B9  +
mov eax [ebp+0Ch] +
lea ecx [eax+8] +
mov ebx [ecx] +
cmp eax edi +
jnz loc_1014522  +
cmp byte ptr [ebx+15h] 0 +
mov esi [edi+4] +
jnz loc_10144C5  +
mov [ebx+4] esi +
mov ecx [ebp-10h] +
mov eax [ecx+4] +
cmp [eax+4] edi +
jnz loc_10144D5  +
mov [eax+4] ebx +
jmp loc_10144E0  +
cmp [esi] edi +
jnz loc_10144DD  +
mov [esi] ebx +
jmp loc_10144E0  +
mov [esi+8] ebx +
mov eax [ecx+4] +
cmp [eax] edi +
jnz loc_10144FF  +
cmp byte ptr [ebx+15h] 0 +
jz loc_10144F1  +
mov eax esi +
jmp loc_10144FA  +
push ebx  +
call sub_10137F5  +
mov ecx [ebp-10h] +
mov edx [ecx+4] +
mov [edx] eax +
mov eax [ecx+4] +
cmp [eax+8] edi +
jnz loc_101457E  +
cmp byte ptr [ebx+15h] 0 +
jz loc_1014511  +
mov eax esi +
jmp loc_101451A  +
push ebx  +
call sub_101CCFC  +
mov ecx [ebp-10h] +
mov edx [ecx+4] +
mov [edx+8] eax +
jmp loc_101457E  +
mov [edx+4] eax +
mov edx [edi] +
mov [eax] edx +
cmp eax [edi+8] +
jnz loc_1014532  +
mov esi eax +
jmp loc_101454B  +
cmp byte ptr [ebx+15h] 0 +
mov esi [eax+4] +
jnz loc_101453E  +
mov [ebx+4] esi +
mov [esi] ebx +
mov edx [edi+8] +
mov [ecx] edx +
mov ecx [edi+8] +
mov [ecx+4] eax +
mov ecx [ebp-10h] +
mov ecx [ecx+4] +
cmp [ecx+4] edi +
jnz loc_101455B  +
mov [ecx+4] eax +
jmp loc_1014569  +
mov ecx [edi+4] +
cmp [ecx] edi +
jnz loc_1014566  +
mov [ecx] eax +
jmp loc_1014569  +
mov [ecx+8] eax +
mov ecx [edi+4] +
mov [eax+4] ecx +
mov cl [eax+14h] +
mov dl [edi+14h] +
mov [eax+14h] dl +
mov [edi+14h] cl +
mov ecx [ebp-10h] +
cmp byte ptr [edi+14h] 1 +
jz loc_1014642  +
jmp loc_1014687  +
cmp byte ptr [ebx+14h] 1 +
jnz loc_1014683  +
mov eax [esi] +
cmp ebx eax +
jnz loc_1014609  +
mov eax [esi+8] +
cmp byte ptr [eax+14h] 0 +
jnz loc_10145BA  +
mov byte ptr [eax+14h] 1 +
push esi  +
mov byte ptr [esi+14h] 0 +
call sub_1013812  +
mov eax [esi+8] +
mov ecx [ebp-10h] +
cmp byte ptr [eax+15h] 0 +
jnz loc_101463D  +
mov edx [eax] +
cmp byte ptr [edx+14h] 1 +
jnz loc_10145D1  +
mov edx [eax+8] +
cmp byte ptr [edx+14h] 1 +
jz loc_1014639  +
mov edx [eax+8] +
cmp byte ptr [edx+14h] 1 +
jnz loc_10145F0  +
mov edx [eax] +
mov byte ptr [edx+14h] 1 +
push eax  +
mov byte ptr [eax+14h] 0 +
call sub_101CD61  +
mov eax [esi+8] +
mov ecx [ebp-10h] +
mov dl [esi+14h] +
mov [eax+14h] dl +
mov byte ptr [esi+14h] 1 +
mov eax [eax+8] +
push esi  +
mov byte ptr [eax+14h] 1 +
call sub_1013812  +
jmp loc_1014683  +
cmp byte ptr [eax+14h] 0 +
jnz loc_1014622  +
mov byte ptr [eax+14h] 1 +
push esi  +
mov byte ptr [esi+14h] 0 +
call sub_101CD61  +
mov eax [esi] +
mov ecx [ebp-10h] +
cmp byte ptr [eax+15h] 0 +
jnz loc_101463D  +
mov edx [eax+8] +
cmp byte ptr [edx+14h] 1 +
jnz loc_101464F  +
mov edx [eax] +
cmp byte ptr [edx+14h] 1 +
jnz loc_101464F  +
mov byte ptr [eax+14h] 0 +
mov ebx esi +
mov esi [esi+4] +
mov eax [ecx+4] +
cmp ebx [eax+4] +
jz loc_1014683  +
jmp loc_101458D  +
mov edx [eax] +
cmp byte ptr [edx+14h] 1 +
jnz loc_101466D  +
mov edx [eax+8] +
mov byte ptr [edx+14h] 1 +
push eax  +
mov byte ptr [eax+14h] 0 +
call sub_1013812  +
mov eax [esi] +
mov ecx [ebp-10h] +
mov dl [esi+14h] +
mov [eax+14h] dl +
mov byte ptr [esi+14h] 1 +
mov eax [eax] +
push esi  +
mov byte ptr [eax+14h] 1 +
call sub_101CD61  +
mov byte ptr [ebx+14h] 1 +
push edi  +
call sub_10142A0  +
push edi  +
call sub_10014DF  +
pop ecx  +
mov ecx [ebp-10h] +
mov eax [ecx+8] +
test eax eax +
jbe loc_10146A2  +
dec eax  +
mov [ecx+8] eax +
mov eax [ebp+8] +
mov ecx [ebp+0Ch] +
mov [eax] ecx +
call sub_100165F  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+4] +
mov esi [eax+4] +
mov ebx eax +
mov al 1 +
mov byte ptr [ebp+var_8] al +
jmp loc_10146EE  +
mov ecx [ebp+arg_4] +
lea eax [esi+0Ch] +
push eax  +
mov ebx esi +
call sub_1013A23  +
mov byte ptr [ebp+var_8] al +
test al al +
jz loc_10146EB  +
mov esi [esi] +
jmp loc_10146EE  +
mov esi [esi+8] +
cmp byte ptr [esi+15h] 0 +
jz loc_10146D2  +
mov esi ebx +
mov [ebp+var_4] esi +
test al al +
jz loc_101472D  +
mov eax [edi+4] +
cmp ebx [eax] +
jnz loc_1014722  +
push [ebp+arg_4]  +
push ebx  +
push 1  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx edi +
call sub_10142F0  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
mov byte ptr [eax+4] 1 +
jmp loc_101474E  +
lea ecx [ebp+var_4] +
call sub_1013907  +
mov esi [ebp+var_4] +
push [ebp+arg_4]  +
lea ecx [esi+0Ch] +
call sub_1013A23  +
test al al +
jz loc_1014745  +
push [ebp+arg_4]  +
push ebx  +
push [ebp+var_8]  +
jmp loc_101470A  +
mov eax [ebp+arg_0] +
mov [eax] esi +
mov byte ptr [eax+4] 0 +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_0]  +
call loc_10147E9  +
jmp $+2  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi+0Ch] 0 +
mov [esi+4] eax +
mov eax [ebp+arg_4] +
mov dword ptr [esi] offset off_10113D4 +
mov [esi+8] eax +
test eax eax +
jz loc_10147B0  +
cmp [ebp+arg_8] 0 +
jz loc_10147B0  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+8] +
mov dword ptr [esi] offset off_10113D4 +
test eax eax +
jz loc_10147D4  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov esi [esi+0Ch] +
test esi esi +
jz loc_10147E2  +
push esi  +
call ds:LocalFree  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push 0  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-10h] +
push dword ptr [ebp+8]  +
call sub_1014782  +
push offset dword_1014810  +
lea eax [ebp-10h] +
push eax  +
call _CxxThrowException  +
int 3  +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_10113D4 +
mov ecx [eax+4] +
mov [esi+4] ecx +
mov eax [eax+8] +
and dword ptr [esi+0Ch] 0 +
mov [esi+8] eax +
test eax eax +
jz loc_1014850  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10147BC  +
test byte ptr [ebp+8] 1 +
jz loc_1014876  +
push esi  +
call sub_10014DF  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push 44h  +
mov eax offset dword_101EFE4 +
call sub_1001448  +
push offset aStringTooLong  +
lea ecx [ebp-28h] +
call sub_1013225  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_1013189  +
push offset dword_101F0E8  +
lea eax [ebp-50h] +
push eax  +
call _CxxThrowException  +
int 3  +
nop   +
nop   +
push 44h  +
mov eax offset dword_101EFE4 +
call sub_1001448  +
push offset aInvalidStringP  +
lea ecx [ebp-28h] +
call sub_1013225  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_1013110  +
push offset dword_101F340  +
lea eax [ebp-50h] +
push eax  +
mov dword ptr [ebp-50h] offset off_1011150 +
call _CxxThrowException  +
int 3  +
jmp ds:_purecall  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ds:??1type_info@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_101495E  +
push esi  +
call sub_10014DF  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
jmp ds:?what@exception@@UBEPBDXZ  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2D0h +
mov eax dword_10220C8 +
xor eax ebp +
mov [ebp+var_4] eax +
mov [ebp+var_220] eax +
mov [ebp+var_224] ecx +
mov [ebp+var_228] edx +
mov [ebp+var_22C] ebx +
mov [ebp+var_230] esi +
mov [ebp+var_234] edi +
mov [ebp+var_208] ss +
mov [ebp+var_214] cs +
mov [ebp+var_238] ds +
mov [ebp+var_23C] es +
mov [ebp+var_240] fs +
mov [ebp+var_244] gs +
pushf   +
pop [ebp+var_210]  +
mov eax [ebp+4] +
mov [ebp+var_218] eax +
lea eax [ebp+4] +
mov [ebp+var_2D0] 10001h +
mov [ebp+var_20C] eax +
mov eax [eax-4] +
push offset OutputString  +
mov [ebp+var_21C] eax +
call ds:OutputDebugStringA  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001FD0  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_10149B3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_1014AD7  +
cmp dword ptr [eax+10h] 3 +
jnz loc_1014AD7  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_1014AD1  +
cmp eax 19930521h +
jz loc_1014AD1  +
cmp eax 19930522h +
jz loc_1014AD1  +
cmp eax 1994000h +
jnz loc_1014AD7  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_1014B03  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_1014AFF  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_1014B64  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1014B5C  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_1014B66  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_1014B4C  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call sub_1001954  +
and dword ptr [ebp-4] 0 +
mov esi offset __ImageBase +
push esi  +
call sub_1014AED  +
pop ecx  +
test eax eax +
jz loc_1014BCD  +
mov eax [ebp+8] +
sub eax esi +
push eax  +
push esi  +
call sub_1014B27  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1014BCD  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
jmp loc_1014BD6  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
xor eax eax +
call sub_1001BBC  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_1001FD0  +
push offset dword_10220C8  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_1022350 eax +
mov dword_102234C ecx +
mov dword_1022348 edx +
mov dword_1022344 ebx +
mov dword_1022340 esi +
mov dword_102233C edi +
mov word_1022368 ss +
mov word_102235C cs +
mov word_1022338 ds +
mov word_1022334 es +
mov word_1022330 fs +
mov word_102232C gs +
pushf   +
pop dword_1022360  +
mov eax [ebp+0] +
mov dword_1022354 eax +
mov eax [ebp+4] +
mov dword_1022358 eax +
lea eax [ebp+8] +
mov dword_1022364 eax +
mov eax [ebp-320h] +
mov dword_10222A0 10001h +
mov eax dword_1022358 +
mov dword_102225C eax +
mov dword_1022250 0C0000409h +
mov dword_1022254 1 +
mov eax dword_10220C8 +
mov [ebp-328h] eax +
mov eax dword_10220CC +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov eax ecx +
jl loc_1014D85  +
jg loc_1014D61  +
test ebx ebx +
jb loc_1014D85  +
mov ecx [eax+0Ch] +
mov edx [eax+8] +
or esi 0FFFFFFFFh +
mov edi esi +
sub edi ebx +
sbb esi [ebp+arg_4] +
cmp ecx esi +
jb loc_1014DAB  +
ja loc_1014D7B  +
cmp edx edi +
jbe loc_1014DAB  +
or dword ptr [eax+8] 0FFFFFFFFh +
or dword ptr [eax+0Ch] 0FFFFFFFFh +
jmp loc_1014DB6  +
mov edx [eax+8] +
mov ecx [eax+0Ch] +
mov edi edx +
neg edi  +
mov esi ecx +
adc esi 0 +
neg esi  +
cmp [ebp+arg_4] esi +
jg loc_1014DAB  +
jl loc_1014DA1  +
cmp ebx edi +
jnb loc_1014DAB  +
and dword ptr [eax+8] 0 +
and dword ptr [eax+0Ch] 0 +
jmp loc_1014DB6  +
add edx ebx +
adc ecx [ebp+arg_4] +
mov [eax+8] edx +
mov [eax+0Ch] ecx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
push ebx  +
cdq   +
push 989680h  +
push edx  +
push eax  +
mov esi ecx +
call sub_100B522  +
cmp [ebp+arg_0] ebx +
mov edi [esi+8] +
mov ecx [esi+0Ch] +
mov [ebp+var_8] eax +
mov eax edx +
jl loc_1014E04  +
cmp eax ecx +
jl loc_1014E23  +
jg loc_1014DFC  +
cmp [ebp+var_8] edi +
jbe loc_1014E23  +
mov [esi+8] ebx +
mov [esi+0Ch] ebx +
jmp loc_1014E2E  +
mov edx [ebp+var_8] +
add edx 0FFFFFFFFh +
mov ebx eax +
adc ebx 0FFFFFFFFh +
cmp ecx ebx +
jb loc_1014E23  +
ja loc_1014E19  +
cmp edi edx +
jbe loc_1014E23  +
or dword ptr [esi+8] 0FFFFFFFFh +
or dword ptr [esi+0Ch] 0FFFFFFFFh +
jmp loc_1014E2E  +
sub edi [ebp+var_8] +
sbb ecx eax +
mov [esi+8] edi +
mov [esi+0Ch] ecx +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov dword ptr [ecx] offset off_10071A0 +
retn   +
***
mov eax 80004001h +
retn 14h  +
***
xor eax eax +
retn 8  +
***
mov eax 80004001h +
retn 0Ch  +
***
mov eax 80004001h +
retn 4  +
***
mov eax 80004001h +
retn 18h  +
***
mov eax 80004001h +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
lea ecx [eax+3FF31200h] +
cmp ecx 1FFh +
ja loc_1014EAE  +
mov eax 8004131Ah +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov byte ptr [esi+4] 0 +
mov dword ptr [esi] offset off_1009530 +
call ds:__imp_GetLastError  +
or dword ptr [esi+0Ch] 0FFFFFFFFh +
or dword ptr [esi+10h] 0FFFFFFFFh +
or dword ptr [esi+18h] 0FFFFFFFFh +
mov [esi+8] eax +
mov dword ptr [esi+1Ch] offset dword_10110A8 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_14] +
push ebx  +
push esi  +
push edi  +
test edx edx +
jz loc_1014F25  +
cmp word ptr [edx] 0 +
jnz loc_1014F09  +
mov [ebp+arg_14] 0Eh +
jmp loc_1014F2C  +
mov eax edx +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1014F0E  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
mov [ebp+arg_14] eax +
jmp loc_1014F2C  +
mov [ebp+arg_14] 0Ah +
mov ebx offset aNull_0 +
test edx edx +
jz loc_1014F42  +
cmp word ptr [edx] 0 +
jnz loc_1014F44  +
mov edx offset aNull +
jmp loc_1014F44  +
mov edx ebx +
mov edi [ebp+arg_10] +
test edi edi +
jz loc_1014F6E  +
cmp word ptr [edi] 0 +
jnz loc_1014F55  +
push 0Eh  +
jmp loc_1014F70  +
mov eax edi +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1014F5A  +
sub eax esi +
sar eax 1 +
lea ecx [eax+eax+2] +
jmp loc_1014F71  +
push 0Ah  +
pop ecx  +
test edi edi +
jz loc_1014F86  +
cmp word ptr [edi] 0 +
jnz loc_1014F82  +
mov eax offset aNull +
jmp loc_1014F88  +
mov eax edi +
jmp loc_1014F88  +
mov eax ebx +
push 0  +
push [ebp+arg_14]  +
push edx  +
push ecx  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 28h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_1014FC3  +
xor eax eax +
jmp loc_1014FE2  +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jz loc_1014FD1  +
mov eax [edi] +
push edi  +
call dword ptr [eax+4]  +
mov eax [esi] +
test eax eax +
jz loc_1014FDD  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [esi] edi +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
retn   +
***
push eax  +
call ds:__imp_FreeLibrary  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push ecx  +
push ecx  +
mov esi esp +
push 0  +
push 989680h  +
push [ebp+arg_4]  +
mov edi ecx +
push [ebp+arg_0]  +
call sub_100B522  +
mov ecx edi +
mov [esi] eax +
mov [esi+4] edx +
call sub_1014D48  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
push 802h  +
call sub_1001502  +
pop ecx  +
mov [esi] eax +
test eax eax +
jnz loc_1015080  +
lea ecx [ebp+var_20] +
call sub_1012828  +
push offset dword_101F024  +
lea eax [ebp+var_20] +
push eax  +
call _CxxThrowException  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_10150A0  +
cmp ecx 7FFFFFFFh +
jbe loc_10150A5  +
mov eax 80070057h +
test eax eax +
jl loc_10150E2  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_10150D2  +
cmp eax esi +
ja loc_10150D2  +
jz loc_10150D7  +
jmp loc_10150DD  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jz loc_101510D  +
cmp dword ptr [esi+4] 0 +
jz loc_101510D  +
call sub_100AFDE  +
test eax eax +
jl loc_101510F  +
mov ecx esi +
call sub_10044E2  +
test eax eax +
jl loc_101510F  +
xor eax eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1009A6A  +
mov eax [ebp+arg_4] +
mov eax [eax] +
mov [esi+4] eax +
and dword ptr [esi+8] 0 +
and dword ptr [esi+8Ch] 0 +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
call sub_1002917  +
mov ecx [ebp-24h] +
mov eax 8007000Eh +
mov eax 80070057h +
mov eax 80070057h +
mov eax 80070057h +
mov eax 80004005h +
mov eax [ebp-28h] +
mov eax [eax+4] +
push offset aDW7rtmAdminW_4  +
push 4BCh  +
push offset aTaskxmlreaderS  +
push eax  +
push offset a_com_error  +
push offset aCatch_knownSHr  +
mov [ebp-14h] eax +
call sub_101C9A8  +
add esp 18h +
mov eax offset loc_10152F7 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 58h +
mov eax dword_10220C8 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov edi ecx +
mov [ebp+pclsid] ebx +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_1015546  +
test dword ptr [eax+1Ch] 100h +
jz loc_1015546  +
push offset dword_10113D8  +
push 28h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1013308  +
lea esi [edi+20h] +
push esi  +
mov ecx edi +
call sub_1007C4E  +
test eax eax +
jl loc_10155AF  +
push ebx  +
mov ecx esi +
call sub_100AEDC  +
mov edi ds:CLSIDFromString +
push eax  +
call edi  +
mov ebx eax +
test ebx ebx +
jge loc_10155AD  +
mov ecx esi +
call sub_100AEDC  +
cmp word ptr [eax] 7Bh +
jz loc_10155A5  +
mov ecx esi +
call sub_100AEDC  +
push eax  +
push offset aS  +
lea eax [ebp+sz] +
push 28h  +
push eax  +
call sub_101508A  +
mov ebx eax +
add esp 10h +
test ebx ebx +
jl loc_10155A9  +
push [ebp+pclsid]  +
lea eax [ebp+sz] +
push eax  +
call edi  +
mov ebx eax +
test ebx ebx +
jge loc_10155AD  +
mov eax ebx +
jmp loc_10155AF  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001FD0  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_10155FF  +
test dword ptr [eax+1Ch] 100h +
jz loc_10155FF  +
push offset dword_10113D8  +
push 2Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1013308  +
lea esi [edi+20h] +
push esi  +
mov ecx edi +
call sub_1007C4E  +
test eax eax +
jl loc_10156CA  +
push 0Eh  +
push offset aConsoleconnect  +
mov ecx esi +
call sub_10051CD  +
test al al +
jz loc_1015632  +
mov eax [ebp+arg_0] +
mov dword ptr [eax] 1 +
jmp loc_10156C1  +
push 11h  +
push offset aConsoledisconn  +
mov ecx esi +
call sub_10051CD  +
test al al +
jz loc_101564F  +
mov eax [ebp+arg_0] +
mov dword ptr [eax] 2 +
jmp loc_10156C1  +
push 0Dh  +
push offset aRemoteconnect  +
mov ecx esi +
call sub_10051CD  +
test al al +
jz loc_101566C  +
mov eax [ebp+arg_0] +
mov dword ptr [eax] 3 +
jmp loc_10156C1  +
push 10h  +
push offset aRemotedisconne  +
mov ecx esi +
call sub_10051CD  +
test al al +
jz loc_1015689  +
mov eax [ebp+arg_0] +
mov dword ptr [eax] 4 +
jmp loc_10156C1  +
push 0Bh  +
push offset aSessionlock  +
mov ecx esi +
call sub_10051CD  +
test al al +
jz loc_10156A6  +
mov eax [ebp+arg_0] +
mov dword ptr [eax] 7 +
jmp loc_10156C1  +
push 0Dh  +
push offset aSessionunlock  +
mov ecx esi +
call sub_10051CD  +
test al al +
jz loc_10156C5  +
mov eax [ebp+arg_0] +
mov dword ptr [eax] 8 +
xor eax eax +
jmp loc_10156CA  +
mov eax 80041318h +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_1015706  +
test dword ptr [eax+1Ch] 100h +
jz loc_1015706  +
push offset dword_10113D8  +
push 2Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1013308  +
mov ebx [ebp+arg_0] +
and dword ptr [ebx] 0 +
lea esi [edi+20h] +
push esi  +
mov ecx edi +
call sub_1007C4E  +
test eax eax +
jl loc_101575B  +
cmp dword ptr [esi] 0 +
jz loc_1015756  +
push 4  +
push offset aNone  +
mov ecx esi +
call sub_10051CD  +
test al al +
jz loc_101573A  +
mov dword ptr [ebx] 8000000h +
jmp loc_1015752  +
push 0Ch  +
push offset aUnrestricted  +
mov ecx esi +
call sub_10051CD  +
test al al +
jz loc_1015756  +
mov dword ptr [ebx] 10000000h +
xor eax eax +
jmp loc_101575B  +
mov eax 80041318h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_1015798  +
test dword ptr [eax+1Ch] 100h +
jz loc_1015798  +
push offset dword_10113D8  +
push 2Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1013308  +
mov esi [ebp+arg_0] +
and dword ptr [esi] 0 +
and dword ptr [esi+4] 0 +
lea ebx [edi+20h] +
push ebx  +
mov ecx edi +
call sub_1007C4E  +
test eax eax +
jl loc_10157D5  +
cmp dword ptr [ebx] 0 +
jnz loc_10157BD  +
mov eax 80041318h +
jmp loc_10157D5  +
mov edi [edi+24h] +
push esi  +
push edi  +
call sub_1016F5D  +
neg eax  +
sbb eax eax +
and eax 7FFBECE8h +
add eax 80041318h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
call sub_1001448  +
mov edi [ebp+8] +
mov ecx [edi] +
mov eax ecx +
lea esi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_10157F7  +
sub eax esi +
sar eax 1 +
mov [ebp-10h] eax +
jz loc_1015888  +
cmp eax 8 +
jb loc_1015888  +
push 24h  +
pop eax  +
cmp ax [ecx] +
jnz loc_1015888  +
push 28h  +
pop eax  +
cmp ax [ecx+2] +
jnz loc_1015888  +
push 40h  +
pop eax  +
cmp ax [ecx+4] +
jnz loc_1015888  +
mov ebx ds:wcschr +
push 2Ch  +
push ecx  +
call ebx  +
mov esi eax +
mov eax [edi] +
push 2Dh  +
push eax  +
call ebx  +
add esp 10h +
mov [ebp-14h] eax +
test esi esi +
jz loc_1015888  +
test eax eax +
jz loc_1015888  +
sub eax esi +
and eax 0FFFFFFFEh +
cmp eax 2 +
jnz loc_1015888  +
sub esi [edi] +
xor ecx ecx +
sar esi 1 +
sub esi 3 +
push 2  +
lea ebx [esi+1] +
pop edx  +
mov eax ebx +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_1001502  +
pop ecx  +
mov [ebp+8] eax +
and dword ptr [ebp-4] 0 +
test eax eax +
jnz loc_1015893  +
push eax  +
call sub_10014D2  +
pop ecx  +
xor eax eax +
inc eax  +
call sub_100165F  +
retn 4  +
mov eax [edi] +
push esi  +
add eax 6 +
push eax  +
push ebx  +
push dword ptr [ebp+8]  +
call sub_1004499  +
test eax eax +
jge loc_10158AC  +
push dword ptr [ebp+8]  +
jmp loc_1015882  +
mov eax [edi] +
mov ecx [ebp-14h] +
sub ecx eax +
mov eax [ebp-10h] +
sar ecx 1 +
sub eax ecx +
mov esi eax +
xor ecx ecx +
push 2  +
lea ebx [esi+1] +
pop edx  +
mov eax ebx +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_1001502  +
pop ecx  +
mov [ebp-10h] eax +
mov ecx [ebp-14h] +
push esi  +
add ecx 2 +
push ecx  +
push ebx  +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_1004499  +
mov [ebp-1Ch] eax +
test eax eax +
jge loc_1015906  +
push dword ptr [ebp-10h]  +
call sub_10014D2  +
push dword ptr [ebp+8]  +
call sub_10014D2  +
pop ecx  +
jmp loc_1015887  +
mov esi [ebp-10h] +
push esi  +
call ds:_wtol  +
pop ecx  +
mov [ebp-18h] eax +
test eax eax +
jnz loc_101591B  +
push esi  +
jmp loc_10158F6  +
push 208h  +
call sub_1001502  +
mov ebx eax +
pop ecx  +
mov [ebp-14h] ebx +
mov byte ptr [ebp-4] 2 +
test ebx ebx +
jnz loc_101594F  +
push eax  +
call sub_10014D2  +
push esi  +
call sub_10014D2  +
push dword ptr [ebp+8]  +
call sub_10014D2  +
add esp 0Ch +
jmp loc_1015888  +
push 103h  +
push ebx  +
push dword ptr [ebp+8]  +
call ds:ExpandEnvironmentStringsW  +
test eax eax +
jnz loc_1015965  +
push ebx  +
jmp loc_1015934  +
push 2  +
push 0  +
push ebx  +
call ds:LoadLibraryExW  +
mov esi eax +
test esi esi +
jnz loc_1015981  +
push ebx  +
call sub_10014D2  +
push dword ptr [ebp-10h]  +
jmp loc_101593A  +
mov [ebp-20h] esi +
push 0A000h  +
mov byte ptr [ebp-4] 3 +
call sub_1001502  +
pop ecx  +
mov [ebp-14h] eax +
test eax eax +
jnz loc_10159AA  +
push eax  +
call sub_10014D2  +
pop ecx  +
push esi  +
call ds:__imp_FreeLibrary  +
jmp loc_1015976  +
push 4FFFh  +
push eax  +
push dword ptr [ebp-18h]  +
push esi  +
call ds:LoadStringW  +
push dword ptr [ebp-14h]  +
test eax eax +
jz loc_101599B  +
mov ecx edi +
call sub_100BF79  +
push 0  +
call sub_10014D2  +
pop ecx  +
push esi  +
call ds:__imp_FreeLibrary  +
push ebx  +
call sub_10014D2  +
push dword ptr [ebp-10h]  +
call sub_10014D2  +
push dword ptr [ebp+8]  +
call sub_10014D2  +
mov eax [ebp-1Ch] +
add esp 0Ch +
jmp loc_101588B  +
***
call sub_1001448  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [esi+4] 0 +
and dword ptr [ebp-4] 0 +
and dword ptr [esi+8] 0 +
and dword ptr [esi+10h] 0 +
push 0Ch  +
mov dword ptr [esi] offset off_10095F8 +
call sub_100150F  +
pop ecx  +
mov ecx eax +
mov [ebp-14h] ecx +
mov byte ptr [ebp-4] 1 +
test ecx ecx +
jz loc_1015A40  +
call sub_1015043  +
jmp loc_1015A42  +
xor eax eax +
mov [esi+0Ch] eax +
mov [esi+10h] eax +
mov eax esi +
call sub_100165F  +
retn   +
***
mov eax 80004001h +
retn 10h  +
***
mov edi edi +
push esi  +
mov esi ecx +
push dword ptr [esi]  +
call sub_10014DF  +
mov esi [esi+8] +
pop ecx  +
test esi esi +
jz loc_1015A84  +
mov ecx esi +
call sub_1015A62  +
push esi  +
call sub_10014DF  +
pop ecx  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1015A62  +
test [ebp+arg_0] 1 +
jz loc_1015AA5  +
push esi  +
call sub_10014DF  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001448  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_10095F8 +
mov ecx [esi+0Ch] +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_1015ADA  +
push 1  +
call sub_1015A8B  +
mov dword ptr [esi] offset off_10071A0 +
call sub_100165F  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1015AB1  +
test byte ptr [ebp+8] 1 +
jz loc_1015B05  +
push esi  +
call sub_10014DF  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
xor edx edx +
push ebx  +
mov ebx ecx +
cmp [ebp+arg_4] edx +
jnz loc_1015B38  +
mov eax [ebp+arg_8] +
push dword ptr [eax]  +
mov ecx [eax+4] +
push ecx  +
push edx  +
push edx  +
push [ebp+arg_0]  +
mov ecx ebx +
call sub_1015145  +
jmp loc_1015B7A  +
push esi  +
mov esi [ebp+arg_8] +
mov eax [esi+4] +
push edi  +
push [ebp+arg_4]  +
lea edi [ebx+430h] +
mov ecx edi +
mov [ebp+arg_8] eax +
call sub_10055C6  +
push [ebp+arg_4]  +
mov ecx edi +
mov [ebp+var_4] eax +
call sub_10055C6  +
push dword ptr [esi]  +
mov ecx [ebp+var_4] +
push [ebp+arg_8]  +
push dword ptr [ecx+8]  +
mov ecx ebx +
push dword ptr [eax+4]  +
push [ebp+arg_0]  +
call sub_1015145  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
push edi  +
mov edi ecx +
cmp [ebp+arg_4] eax +
jnz loc_1015BA1  +
push eax  +
push eax  +
push eax  +
push eax  +
push [ebp+arg_0]  +
call sub_1015145  +
jmp loc_1015BD5  +
push ebx  +
push esi  +
push [ebp+arg_4]  +
lea esi [edi+430h] +
mov ecx esi +
call sub_10055C6  +
push [ebp+arg_4]  +
mov ecx esi +
mov ebx eax +
call sub_10055C6  +
push 0  +
push 0  +
push dword ptr [ebx+8]  +
mov ecx edi +
push dword ptr [eax+4]  +
push [ebp+arg_0]  +
call sub_1015145  +
pop esi  +
pop ebx  +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push [ebp+arg_0]  +
call sub_1015145  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov edx [eax+4] +
push 0  +
push 0  +
push dword ptr [eax]  +
push edx  +
push [ebp+arg_0]  +
call sub_1015145  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_1015C4E  +
test dword ptr [eax+1Ch] 100h +
jz loc_1015C4E  +
push offset dword_10113D8  +
push 20h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1013308  +
lea esi [edi+20h] +
push esi  +
mov ecx edi +
call sub_1007C4E  +
test eax eax +
jl loc_1015CD8  +
xor edi edi +
inc edi  +
push edi  +
push offset dword_10113E8  +
mov ecx esi +
call sub_10051CD  +
test al al +
jz loc_1015C79  +
mov eax [ebp+arg_0] +
mov [eax] di +
jmp loc_1015CCF  +
push edi  +
push offset dword_1015CE8  +
mov ecx esi +
call sub_10051CD  +
test al al +
jz loc_1015C8E  +
push 2  +
jmp loc_1015CC8  +
push edi  +
push offset dword_1015CE4  +
mov ecx esi +
call sub_10051CD  +
test al al +
jz loc_1015CA3  +
push 3  +
jmp loc_1015CC8  +
push edi  +
push offset dword_1015CE0  +
mov ecx esi +
call sub_10051CD  +
push 4  +
test al al +
jnz loc_1015CC8  +
push offset aLast  +
mov ecx esi +
call sub_10051CD  +
test al al +
jz loc_1015CD3  +
push 5  +
mov ecx [ebp+arg_0] +
pop eax  +
mov [ecx] ax +
xor eax eax +
jmp loc_1015CD8  +
mov eax 80041318h +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_1015D21  +
test dword ptr [eax+1Ch] 100h +
jz loc_1015D21  +
push offset dword_10113D8  +
push 22h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1013308  +
lea ebx [esi+20h] +
push ebx  +
mov ecx esi +
call sub_1007C4E  +
test eax eax +
jl loc_1015D4F  +
push edi  +
push 4  +
push offset aLast  +
mov ecx ebx +
call sub_10051CD  +
test al al +
jz loc_1015D55  +
mov ecx [ebp+arg_0] +
push 20h  +
pop eax  +
mov [ecx] ax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
mov edi [ebp+arg_0] +
xor eax eax +
and [ebp+arg_0] eax +
mov [edi] ax +
cmp [ebx] eax +
jbe loc_1015DA8  +
mov eax [esi+24h] +
mov ecx [ebp+arg_0] +
movzx eax word ptr [eax+ecx*2] +
push eax  +
call ds:iswdigit  +
pop ecx  +
test eax eax +
jz loc_1015DA8  +
mov ax [edi] +
mov ecx [esi+24h] +
imul ax ax +
mov edx [ebp+arg_0] +
add ax [ecx+edx*2] +
sub ax 30h +
mov [edi] ax +
cmp ax 1Fh +
ja loc_1015DA8  +
inc [ebp+arg_0]  +
mov eax [ebp+arg_0] +
cmp eax [ebx] +
jb loc_1015D64  +
cmp word ptr [edi] 0 +
jnz loc_1015D4C  +
mov eax 80041318h +
jmp loc_1015D4E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_1015DE6  +
test dword ptr [eax+1Ch] 100h +
jz loc_1015DE6  +
push offset dword_10113D8  +
push 23h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1013308  +
xor ebx ebx +
inc ebx  +
lea esi [edi+1Ch] +
jmp loc_1015E15  +
mov eax [ebp+var_4] +
dec eax  +
jz loc_1015E03  +
sub eax 0Eh +
jnz loc_1015E15  +
dec ebx  +
jnz loc_1015E15  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
mov ecx esi +
call sub_1007E2E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+50h]  +
test eax eax +
jnz loc_1015E15  +
inc ebx  +
mov ecx esi +
call sub_1007E2E  +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push eax  +
call dword ptr [ecx+18h]  +
test eax eax +
jz loc_1015DEE  +
jge loc_1015DFC  +
push eax  +
mov ecx edi +
call sub_1014E93  +
push eax  +
mov ecx edi +
call sub_1015BDF  +
jmp loc_1015DFE  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
cmp dword ptr [eax] 0 +
jz loc_1015E6D  +
push eax  +
call sub_1009C43  +
test eax eax +
jge loc_1015E6D  +
cmp eax 80004002h +
jz loc_1015E6D  +
push eax  +
call sub_1014768  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi ecx +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_1015EAA  +
test dword ptr [eax+1Ch] 100h +
jz loc_1015EAA  +
push offset dword_10113D8  +
push 25h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1013308  +
lea esi [edi+20h] +
push esi  +
mov ecx edi +
call sub_1007C4E  +
test eax eax +
jl loc_1015EDB  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_10062E2  +
mov ecx [ebp+arg_0] +
push eax  +
call sub_10060E1  +
mov ecx [ebp+var_4] +
test ecx ecx +
jz loc_1015ED9  +
call sub_1001A04  +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor ecx ecx +
cmp [ebp+14h] ecx +
jnz loc_1015F11  +
mov eax [ebp+0Ch] +
or eax [ebp+10h] +
jnz loc_1015F11  +
mov eax [ebp+8] +
or dword ptr [eax+8] 0FFFFFFFFh +
mov eax [ebp+18h] +
cmp eax ecx +
jz loc_1015F0D  +
mov [eax] ecx +
mov [eax+4] ecx +
xor eax eax +
jmp loc_1015F16  +
mov eax 80004001h +
pop ebp  +
retn 14h  +
***
call sub_1001448  +
mov esi ecx +
cmp dword ptr [esi+8] 0 +
jnz loc_1015F58  +
push 0Ch  +
call sub_100150F  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_1015F4F  +
call sub_1015043  +
jmp loc_1015F51  +
xor eax eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [esi+8] eax +
mov eax [esi+8] +
test eax eax +
jnz loc_1015F75  +
lea ecx [ebp-30h] +
call sub_1012828  +
push offset dword_101F024  +
lea eax [ebp-30h] +
push eax  +
call _CxxThrowException  +
call sub_100165F  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov esi ecx +
push dword ptr [esi+8]  +
xor edi edi +
push edi  +
mov [ebp-4] edi +
call ds:SysAllocStringLen  +
cmp eax edi +
jnz loc_1015FA3  +
push edi  +
call ds:SysFreeString  +
xor eax eax +
jmp loc_1015FE3  +
push ebx  +
push eax  +
lea ecx [ebp-4] +
call sub_1004450  +
mov edi [esi+8] +
mov ebx [ebp-4] +
mov esi [esi+0Ch] +
inc edi  +
jmp loc_1015FD4  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
push edi  +
push ebx  +
call sub_1004499  +
test eax eax +
jl loc_1015FE7  +
mov eax [esi+4] +
mov esi [esi+8] +
lea ebx [ebx+eax*2] +
sub edi eax +
test esi esi +
jnz loc_1015FB9  +
push esi  +
call ds:SysFreeString  +
mov eax [ebp-4] +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn   +
push dword ptr [ebp-4]  +
call ds:SysFreeString  +
xor eax eax +
jmp loc_1015FE2  +
***
add ds:byte_10160A7[eax] bh +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+8Ch] +
test eax eax +
jz loc_10160D1  +
inc eax  +
mov [esi+8Ch] eax +
xor eax eax +
inc eax  +
jmp loc_1016103  +
push [ebp+arg_0]  +
lea ecx [esi+4] +
call sub_10055C6  +
cmp dword ptr [eax] 0 +
jnz loc_10160EC  +
xor eax eax +
inc eax  +
mov [esi+8Ch] eax +
jmp loc_1016103  +
push off_102C7D0  +
mov esi [esi+8] +
push dword ptr [eax+4]  +
mov ecx [esi] +
push offset dword_100348C  +
push esi  +
call dword ptr [ecx+6Ch]  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+8Ch] +
test eax eax +
jz loc_101612B  +
inc eax  +
mov [esi+8Ch] eax +
xor eax eax +
inc eax  +
jmp loc_101619C  +
push ebx  +
push [ebp+arg_0]  +
lea ebx [esi+4] +
mov ecx ebx +
call sub_10055C6  +
cmp dword ptr [eax] 0 +
jnz loc_1016149  +
xor eax eax +
inc eax  +
mov [esi+8Ch] eax +
jmp loc_101619B  +
mov ecx [esi+8] +
mov edx [ecx] +
push edi  +
push off_102C7D0  +
mov edi offset dword_100348C +
push dword ptr [eax+4]  +
push edi  +
push ecx  +
call dword ptr [edx+6Ch]  +
mov [ebp+arg_0] eax +
test eax eax +
jl loc_101619A  +
push [ebp+arg_4]  +
mov ecx ebx +
call sub_10055C6  +
cmp dword ptr [eax] 0 +
jz loc_1016197  +
push [ebp+arg_4]  +
mov esi [esi+8] +
mov ecx ebx +
call sub_10055C6  +
push [ebp+arg_8]  +
mov ecx [esi] +
push 0  +
push dword ptr [eax+4]  +
push edi  +
push esi  +
call dword ptr [ecx+1Ch]  +
mov [ebp+arg_0] eax +
mov eax [ebp+arg_0] +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
lea eax [ecx+8Ch] +
mov edx [eax] +
test edx edx +
jz loc_10161BA  +
dec edx  +
mov [eax] edx +
xor eax eax +
inc eax  +
jmp locret_10161C3  +
mov ecx [ecx+8] +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+3Ch]  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10160B3  +
test eax eax +
jl loc_1016201  +
jnz loc_10161F7  +
cmp [ebp+arg_4] 0 +
jz loc_10161F7  +
mov eax [esi+8] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+70h]  +
test eax eax +
jl loc_1016201  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_10161A6  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+8] +
push [ebp+arg_0]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+70h]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
jz loc_1016237  +
push offset aTrue  +
jmp loc_101623C  +
push offset aFalse  +
push [ebp+arg_0]  +
call sub_10161CB  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
and eax 0FC000h +
cmp eax 4000h +
jz loc_1016292  +
cmp eax 10000h +
jz loc_101628B  +
cmp eax 40000h +
jz loc_1016284  +
cmp eax 80000h +
jz loc_101627D  +
mov eax 80070057h +
jmp loc_101629F  +
push offset aInteractivet_0  +
jmp loc_1016297  +
push offset aPassword  +
jmp loc_1016297  +
push offset aInteractivetok  +
jmp loc_1016297  +
push offset aS4u  +
push [ebp+arg_0]  +
call sub_10161CB  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub eax 0 +
jz loc_10162C6  +
dec eax  +
jz loc_10162BF  +
mov eax 80070057h +
jmp loc_10162D3  +
push offset aHighestavailab  +
jmp loc_10162CB  +
push offset aLeastprivilege  +
push [ebp+arg_0]  +
call sub_10161CB  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub eax 0 +
jz loc_10162FA  +
dec eax  +
jz loc_10162F3  +
mov eax 80070057h +
jmp loc_1016307  +
push offset aUnrestricted  +
jmp loc_10162FF  +
push offset aNone  +
push [ebp+arg_0]  +
call sub_10161CB  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
dec eax  +
jz loc_101634F  +
dec eax  +
jz loc_1016348  +
dec eax  +
jz loc_1016341  +
dec eax  +
jz loc_101633A  +
sub eax 3 +
jz loc_1016333  +
dec eax  +
jnz loc_101634F  +
push offset aSessionunlock  +
jmp loc_1016354  +
push offset aSessionlock  +
jmp loc_1016354  +
push offset aRemotedisconne  +
jmp loc_1016354  +
push offset aRemoteconnect  +
jmp loc_1016354  +
push offset aConsoledisconn  +
jmp loc_1016354  +
push offset aConsoleconnect  +
push 26h  +
call sub_10161CB  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
and eax 3C00h +
cmp eax 400h +
jz loc_101639B  +
cmp eax 800h +
jz loc_1016394  +
cmp eax 1000h +
jz loc_101638D  +
push offset aIgnorenew  +
jmp loc_10163A0  +
push offset aQueue  +
jmp loc_10163A0  +
push offset aStopexisting  +
jmp loc_10163A0  +
push offset aParallel  +
push 49h  +
call sub_10161CB  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
push 87h  +
call sub_10161CB  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+8] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+7Ch]  +
test eax eax +
jl loc_1016400  +
push 1  +
mov ecx esi +
call sub_10161A6  +
test eax eax +
jl loc_1016400  +
mov eax [esi+8] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+38h]  +
test eax eax +
jl loc_1016400  +
mov esi [esi+8] +
mov eax [esi] +
push esi  +
call dword ptr [eax+7Ch]  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push dword ptr [ebp+arg_4]  +
mov esi ecx +
push offset aD  +
lea edi [esi+0Ch] +
push 40h  +
push edi  +
call sub_101508A  +
add esp 10h +
test eax eax +
jl loc_1016435  +
push edi  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_10161CB  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 20h +
jnz loc_1016461  +
push offset aLast  +
push 44h  +
call sub_10161CB  +
jmp loc_101646D  +
movzx eax [ebp+arg_0] +
push eax  +
push 44h  +
call sub_1016407  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 5 +
jnz loc_1016490  +
push offset aLast  +
push 46h  +
call sub_10161CB  +
jmp loc_101649C  +
movzx eax [ebp+arg_0] +
push eax  +
push 46h  +
call sub_1016407  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
cmp eax [ebp+arg_0] +
jz loc_10164BA  +
push [ebp+arg_0]  +
push ecx  +
call sub_1014FB2  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 110h +
mov eax dword_10220C8 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push edi  +
xor edi edi +
push edi  +
lea eax [ebp+var_110] +
push eax  +
push offset loc_101665C  +
mov ebx ecx +
mov [ebp+var_110] edi +
call CreateXmlWriter  +
cmp eax edi +
jl loc_1016631  +
push esi  +
push [ebp+var_110]  +
lea esi [ebx+8] +
mov ecx esi +
call sub_10164A5  +
mov eax [ebp+var_110] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebx] +
lea ecx [ebp+var_10C] +
push ecx  +
push offset aUtf16  +
push edi  +
push eax  +
mov [ebp+var_10C] edi +
call CreateXmlWriterOutputWithEncodingName  +
cmp eax edi +
jl loc_1016630  +
mov eax [esi] +
push [ebp+var_10C]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
mov [ebp+var_108] eax +
mov eax [ebp+var_10C] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_108] +
cmp eax edi +
jl loc_1016630  +
mov eax [esi] +
mov ecx [eax] +
push 1  +
push 1  +
push eax  +
call dword ptr [ecx+14h]  +
cmp eax edi +
jl loc_1016630  +
mov eax [esi] +
mov ecx [eax] +
push edi  +
push eax  +
call dword ptr [ecx+68h]  +
cmp eax edi +
jl loc_1016630  +
mov edi [esi] +
add ebx 4 +
push 1  +
mov ecx ebx +
mov [ebp+var_108] edi +
call sub_10055C6  +
push off_102C7D0  +
mov ecx [edi] +
push dword ptr [eax+4]  +
mov edi offset dword_100348C +
push edi  +
push [ebp+var_108]  +
call dword ptr [ecx+6Ch]  +
test eax eax +
jl loc_1016630  +
mov eax [ebx] +
movzx ecx ax +
push ecx  +
shr eax 10h +
push eax  +
push offset aD_D  +
lea eax [ebp+var_104] +
push 80h  +
push eax  +
call sub_101508A  +
xor eax eax +
add esp 14h +
mov [ebp+var_6] ax +
mov eax [esi] +
push 2  +
mov ecx ebx +
mov [ebp+var_108] eax +
call sub_10055C6  +
mov ecx [ebp+var_108] +
mov edx [ecx] +
lea ebx [ebp+var_104] +
push ebx  +
push 0  +
push dword ptr [eax+4]  +
push edi  +
push ecx  +
call dword ptr [edx+1Ch]  +
test eax eax +
jl loc_1016630  +
push off_102C7D0  +
mov esi [esi] +
mov eax [esi] +
push 0  +
push offset aXmlns  +
push edi  +
push esi  +
call dword ptr [eax+1Ch]  +
pop esi  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_1001FD0  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_C]  +
mov esi ecx +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10185F5  +
mov dword ptr [esi] offset off_1011C4C +
mov eax esi +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1011C4C +
call sub_1018717  +
test byte ptr [ebp+8] 1 +
jz loc_10166BC  +
push esi  +
call sub_10014DF  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
or al 8Bh +
into   +
call sub_1001B0E  +
test eax eax +
jnz loc_10166F1  +
lea esi [edi+34h] +
mov ecx esi +
call sub_1001B0E  +
test eax eax +
jnz loc_10166F1  +
mov ecx edi +
call sub_101865A  +
mov eax [esi] +
test eax eax +
jz loc_10166FB  +
mov eax [eax] +
jmp loc_10166FD  +
xor eax eax +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1016719  +
push [ebp+arg_4]  +
call sub_1008E84  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10023A7  +
test byte ptr [ebp+8] 1 +
jz loc_101673C  +
push esi  +
call sub_10014DF  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
call sub_1004552  +
push [ebp+arg_8]  +
lea ecx [esi+18h] +
mov dword ptr [esi] offset off_1011C6C +
call sub_1008E84  +
push [ebp+arg_C]  +
lea ecx [esi+1Ch] +
call sub_1008E84  +
mov byte ptr [esi+20h] 0 +
and dword ptr [esi+24h] 0 +
mov eax esi +
pop esi  +
pop ebp  +
retn 10h  +
***
cmp dword ptr [ecx+4] 1 +
setz al  +
mov [ecx+14h] al +
xor eax eax +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+24h] +
mov dword ptr [esi] offset off_1011C6C +
call sub_1002965  +
lea ecx [esi+1Ch] +
call sub_10019E8  +
lea ecx [esi+18h] +
call sub_10019E8  +
mov ecx esi +
pop esi  +
jmp sub_10023A7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101679D  +
test byte ptr [ebp+8] 1 +
jz loc_10167E7  +
push esi  +
call sub_10014DF  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
jmp loc_101680B  +
push [ebp+arg_8]  +
mov ecx esi +
call sub_10060E1  +
add esi 4 +
cmp esi [ebp+arg_4] +
jnz loc_10167FE  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
jmp loc_1016830  +
push esi  +
call sub_10060E1  +
add [ebp+arg_C] 4 +
add esi 4 +
mov ecx [ebp+arg_C] +
cmp esi [ebp+arg_8] +
jnz loc_1016823  +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
cmp [ebp+arg_0] esi +
jz loc_1016868  +
sub [ebp+arg_8] 4 +
mov ecx [ebp+arg_8] +
sub esi 4 +
push esi  +
call sub_10060E1  +
cmp esi [ebp+arg_0] +
jnz loc_1016853  +
mov eax [ebp+arg_8] +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_0]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1016818  +
mov eax [ebp+arg_0] +
add esp 18h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1016845  +
add esp 14h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
jmp loc_10168EC  +
push esi  +
push [ebp+arg_8]  +
call sub_1016705  +
add [ebp+arg_8] 4 +
add esi 4 +
cmp esi [ebp+arg_4] +
jnz loc_10168DC  +
mov eax [ebp+arg_8] +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
jmp loc_1016917  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call sub_1016705  +
dec [ebp+arg_4]  +
add [ebp+arg_0] 4 +
cmp [ebp+arg_4] 0 +
ja loc_1016905  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10168D1  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10168FE  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_0] +
push ecx  +
push [ebp+arg_8]  +
push esi  +
push edi  +
call sub_1016954  +
lea eax [edi+esi*4] +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
call sub_1002917  +
mov esi ecx +
mov [ebp-1Ch] esi +
push dword ptr [ebp+10h]  +
lea ecx [ebp-14h] +
call sub_1008E84  +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_101B87F  +
mov edi [ebp+0Ch] +
mov [ebp+10h] eax +
test edi edi +
jz loc_1016B73  +
mov ecx esi +
call sub_101B867  +
mov ecx 3FFFFFFFh +
mov edx ecx +
sub edx eax +
cmp edx edi +
jnb loc_10169F6  +
call loc_101B8C3  +
add eax edi +
cmp [ebp+10h] eax +
jnb loc_1016ABF  +
mov edx [ebp+10h] +
shr edx 1 +
sub ecx edx +
cmp ecx [ebp+10h] +
jnb loc_1016A13  +
and dword ptr [ebp+10h] 0 +
jmp loc_1016A16  +
add [ebp+10h] edx +
cmp [ebp+10h] eax +
jnb loc_1016A1E  +
mov [ebp+10h] eax +
push 0  +
push dword ptr [ebp+10h]  +
call sub_101B81C  +
mov ebx eax +
mov eax [esi+4] +
push esi  +
push ebx  +
push dword ptr [ebp+8]  +
mov [ebp-18h] ebx +
push eax  +
mov [ebp+0Ch] ebx +
mov byte ptr [ebp-4] 1 +
call sub_1016926  +
lea ecx [ebp-14h] +
push ecx  +
push edi  +
push eax  +
mov ecx esi +
mov [ebp+0Ch] eax +
call sub_1016982  +
push esi  +
mov [ebp+0Ch] eax +
push dword ptr [ebp+0Ch]  +
mov eax [esi+8] +
push eax  +
push dword ptr [ebp+8]  +
call sub_1016926  +
mov ecx esi +
call sub_101B867  +
add edi eax +
mov eax [esi+4] +
test eax eax +
jz loc_1016A88  +
push esi  +
push dword ptr [esi+8]  +
push eax  +
call sub_10132E9  +
push dword ptr [esi+4]  +
call sub_10014DF  +
pop ecx  +
mov eax [ebp+10h] +
lea eax [ebx+eax*4] +
mov [esi+0Ch] eax +
lea eax [ebx+edi*4] +
mov [esi+8] eax +
mov [esi+4] ebx +
jmp loc_1016B73  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp-18h]  +
call sub_10132E9  +
push dword ptr [ebp-18h]  +
call sub_10014DF  +
pop ecx  +
push 0  +
push 0  +
call _CxxThrowException  +
mov ebx [esi+8] +
mov ecx [ebp+8] +
mov eax ebx +
sub eax ecx +
sar eax 2 +
push esi  +
cmp eax edi +
jnb loc_1016B3E  +
mov eax edi +
shl eax 2 +
mov [ebp+10h] eax +
add eax ecx +
push eax  +
push ebx  +
push ecx  +
call sub_1016926  +
mov eax [esi+8] +
lea ecx [ebp-14h] +
push ecx  +
mov ecx eax +
sub ecx [ebp+8] +
mov byte ptr [ebp-4] 3 +
sar ecx 2 +
sub edi ecx +
push edi  +
push eax  +
mov ecx esi +
call sub_1016982  +
mov eax [ebp+10h] +
add [esi+8] eax +
mov esi [esi+8] +
lea ecx [ebp-14h] +
push ecx  +
sub esi eax +
push esi  +
push dword ptr [ebp+8]  +
call sub_10167F3  +
add esp 0Ch +
jmp loc_1016B73  +
mov ecx [ebp-1Ch] +
mov eax [ebp+0Ch] +
push ecx  +
mov ecx [ecx+8] +
shl eax 2 +
add ecx eax +
push ecx  +
mov ecx [ebp+8] +
add eax ecx +
push eax  +
call sub_10132E9  +
jmp loc_1016AB6  +
push ebx  +
shl edi 2 +
mov [ebp+0Ch] ebx +
sub [ebp+0Ch] edi +
push ebx  +
push dword ptr [ebp+0Ch]  +
call sub_1016926  +
push ebx  +
push dword ptr [ebp+0Ch]  +
mov [esi+8] eax +
push dword ptr [ebp+8]  +
call sub_10168A5  +
lea eax [ebp-14h] +
push eax  +
mov eax [ebp+8] +
add edi eax +
push edi  +
push eax  +
call sub_10167F3  +
add esp 18h +
mov ecx [ebp-14h] +
test ecx ecx +
jz loc_1016B7F  +
call sub_1001A04  +
call sub_100165F  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
call sub_101B867  +
test eax eax +
jnz loc_1016BA2  +
xor esi esi +
jmp loc_1016BAB  +
mov esi [ebp+arg_4] +
sub esi [edi+4] +
sar esi 2 +
push [ebp+arg_8]  +
mov ecx edi +
push 1  +
push [ebp+arg_4]  +
call sub_10169A8  +
mov eax [edi+4] +
lea ecx [eax+esi*4] +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] ecx +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
call sub_101B867  +
mov ecx esi +
mov edi eax +
call sub_101B87F  +
push [ebp+arg_0]  +
cmp edi eax +
mov eax [esi+8] +
mov ecx esi +
jnb loc_1016C00  +
push 1  +
push eax  +
call sub_1016982  +
mov [esi+8] eax +
jmp loc_1016C0A  +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
call sub_1016B8C  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_18] +
push ebx  +
push esi  +
push edi  +
test edx edx +
jz loc_1016C4F  +
cmp word ptr [edx] 0 +
jnz loc_1016C33  +
mov [ebp+arg_18] 0Eh +
jmp loc_1016C56  +
mov eax edx +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1016C38  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
mov [ebp+arg_18] eax +
jmp loc_1016C56  +
mov [ebp+arg_18] 0Ah +
mov ebx offset aNull_0 +
test edx edx +
jz loc_1016C6C  +
cmp word ptr [edx] 0 +
jnz loc_1016C6E  +
mov edx offset aNull +
jmp loc_1016C6E  +
mov edx ebx +
mov edi [ebp+arg_14] +
test edi edi +
jz loc_1016C98  +
cmp word ptr [edi] 0 +
jnz loc_1016C7F  +
push 0Eh  +
jmp loc_1016C9A  +
mov eax edi +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1016C84  +
sub eax esi +
sar eax 1 +
lea ecx [eax+eax+2] +
jmp loc_1016C9B  +
push 0Ah  +
pop ecx  +
test edi edi +
jz loc_1016CB0  +
cmp word ptr [edi] 0 +
jnz loc_1016CAC  +
mov eax offset aNull +
jmp loc_1016CB2  +
mov eax edi +
jmp loc_1016CB2  +
mov eax ebx +
push 0  +
push [ebp+arg_18]  +
push edx  +
push ecx  +
push eax  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 30h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
lea eax [ebp+arg_14] +
push eax  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 28h +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
xor edi edi +
xor esi esi +
push [ebp+lpName]  +
push ds:off_1016DC0[esi]  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1016D58  +
add esi 0Ch +
inc edi  +
cmp esi 198h +
jb loc_1016D1F  +
push [ebp+lpLuid]  +
push [ebp+lpName]  +
push 0  +
call LookupPrivilegeValueW  +
mov esi eax +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
mov edx [ebp+lpName] +
mov eax edi +
imul eax eax +
mov ecx ds:off_1016DC0[eax] +
mov si [ecx] +
cmp si [edx] +
jnz loc_1016D8C  +
test si si +
jz loc_1016D88  +
mov si [ecx+2] +
cmp si [edx+2] +
jnz loc_1016D8C  +
add ecx 4 +
add edx 4 +
test si si +
jnz loc_1016D66  +
xor ecx ecx +
jmp loc_1016D91  +
sbb ecx ecx +
sbb ecx 0FFFFFFFFh +
xor esi esi +
test ecx ecx +
jnz loc_1016DAE  +
mov edx ds:dword_1016DC4[eax] +
mov ecx [ebp+lpLuid] +
mov [ecx] edx +
mov eax ds:dword_1016DC8[eax] +
mov [ecx+4] eax +
inc esi  +
jmp loc_1016D50  +
push 521h  +
call ds:SetLastError  +
jmp loc_1016D50  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+Luid.LowPart] 0 +
push esi  +
push edi  +
xor eax eax +
lea edi [ebp+Luid.HighPart] +
stos   +
lea eax [ebp+Luid] +
push eax  +
push [ebp+lpName]  +
call sub_1016D14  +
mov esi eax +
test esi esi +
jz loc_1016F97  +
mov ecx [ebp+Luid.LowPart] +
xor eax eax +
inc eax  +
xor edx edx +
call sub_100C0E0  +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
mov [ecx+4] edx +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
add eax eax +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
add eax eax +
push eax  +
push [ebp+arg_0]  +
call memcpy_s  +
add esp 10h +
pop ebp  +
retn   +
***
int 3  +
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_0]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101B897  +
mov eax [ebp+arg_0] +
add esp 18h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_4] +
push esi  +
push eax  +
mov esi ecx +
push dword ptr [esi+8]  +
add eax 4 +
push eax  +
lea eax [ebp+var_4] +
push eax  +
call sub_1017001  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
add esp 10h +
add dword ptr [esi+8] 0FFFFFFFCh +
mov [eax] ecx +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1005C07  +
test byte ptr [ebp+8] 1 +
jz loc_1017092  +
push esi  +
call sub_10014DF  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push dword ptr [esi+10h]  +
call sub_10014D2  +
pop ecx  +
lea ecx [esi+0Ch] +
call sub_10019E8  +
lea ecx [esi+8] +
call sub_10019E8  +
lea ecx [esi+4] +
pop esi  +
jmp sub_10019E8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101709E  +
test [ebp+arg_0] 1 +
jz loc_10170E4  +
push esi  +
call sub_10014DF  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
mov edi offset unk_102215C +
mov ecx edi +
call sub_1001B7C  +
dec dword ptr [esi+18h]  +
mov ebx [esi+18h] +
jnz loc_1017141  +
mov eax dword_10221CC +
mov ecx dword_10221D0 +
jmp loc_1017123  +
cmp [eax] esi +
jz loc_1017129  +
add eax 4 +
cmp eax ecx +
jz loc_1017138  +
jmp loc_101711C  +
push eax  +
lea eax [ebp+var_4] +
push eax  +
mov ecx offset unk_10221C8 +
call sub_1017042  +
push 1  +
mov ecx esi +
call sub_10170CA  +
push edi  +
call ds:LeaveCriticalSection  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 808h +
mov eax dword_10220C8 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
push offset loc_101722C  +
lea eax [ebp+var_808] +
push offset aTaskscheduler_  +
push eax  +
call ds:fopen_s  +
add esp 0Ch +
test eax eax +
jnz loc_10171F4  +
push 7FEh  +
push eax  +
mov [ebp+var_804] ax +
lea eax [ebp-802h] +
push eax  +
call memset  +
push [ebp+arg_4]  +
lea eax [ebp+var_804] +
push esi  +
push offset aSD  +
push 400h  +
push eax  +
call sub_101508A  +
push [ebp+var_808]  +
xor eax eax +
mov [ebp+var_6] ax +
lea eax [ebp+var_804] +
push eax  +
call ds:fputws  +
push [ebp+var_808]  +
call ds:fflush  +
push [ebp+var_808]  +
call ds:fclose  +
add esp 30h +
xor eax eax +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1001FD0  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push esi  +
mov esi ecx +
mov eax [esi] +
mov ecx [esi+4] +
mov edx eax +
or edx ecx +
jnz loc_1017252  +
xor eax eax +
inc eax  +
jmp loc_10172E0  +
push edi  +
push [ebp+arg_0]  +
push ecx  +
push eax  +
call ds:EtwEventEnabled  +
test al al +
jz loc_10172DD  +
push [ebp+arg_4]  +
lea eax [ebp+var_30] +
push eax  +
call sub_100180D  +
push [ebp+arg_8]  +
lea eax [ebp+var_20] +
push eax  +
call sub_100180D  +
lea eax [ebp+arg_C] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
call sub_10019C3  +
cmp [ebp+arg_14] 0 +
lea eax [ebp+var_30] +
push eax  +
push 3  +
jz loc_10172A8  +
push [ebp+arg_14]  +
push 0  +
push [ebp+arg_0]  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
call ds:EtwEventWriteTransfer  +
jmp loc_10172B6  +
push [ebp+arg_0]  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
call ds:EtwEventWrite  +
mov edi eax +
test edi edi +
jz loc_10172DD  +
push edi  +
push offset aEventwriteErro  +
mov ecx esi +
call sub_1017154  +
test edi edi +
jle loc_10172D9  +
and edi 0FFFFh +
or edi 80070000h +
mov eax edi +
jmp loc_10172DF  +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
mov eax dword_10220C8 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_8] +
mov [ebp+var_1C] eax +
mov eax [ebp+arg_4] +
push esi  +
mov esi ecx +
mov ecx [esi+4] +
mov [ebp+lpCriticalSection] eax +
mov eax [esi] +
mov edx eax +
or edx ecx +
push edi  +
mov edi [ebp+arg_10] +
jnz loc_1017326  +
xor eax eax +
inc eax  +
jmp loc_10173F3  +
push [ebp+var_1C]  +
push ecx  +
push eax  +
call ds:EtwEventEnabled  +
test al al +
jz loc_10173F1  +
push [ebp+lpCriticalSection]  +
lea eax [ebp+var_3C] +
push eax  +
call sub_100180D  +
push ebx  +
lea eax [ebp+var_2C] +
push eax  +
call sub_100199E  +
lea eax [esi+8] +
push eax  +
lea ecx [ebp+lpCriticalSection] +
call sub_1001B5E  +
push ebx  +
push 2  +
call ds:EtwEventActivityIdControl  +
lea eax [ebp+var_3C] +
xor ebx ebx +
push eax  +
push 2  +
cmp edi ebx +
jz loc_1017382  +
push edi  +
push ebx  +
push [ebp+var_1C]  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
call ds:EtwEventWriteTransfer  +
jmp loc_1017390  +
push [ebp+var_1C]  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
call ds:EtwEventWrite  +
mov edi eax +
xor eax eax +
mov [ebp+var_10] ax +
mov [ebp+var_E] ax +
lea eax [ebp+var_14] +
push eax  +
push 2  +
mov [ebp+var_14] ebx +
mov [ebp+var_C] bl +
mov [ebp+var_B] bl +
mov [ebp+var_A] bl +
mov [ebp+var_9] bl +
mov [ebp+var_8] bl +
mov [ebp+var_7] bl +
mov [ebp+var_6] bl +
mov [ebp+var_5] bl +
call ds:EtwEventActivityIdControl  +
push [ebp+lpCriticalSection]  +
call ds:LeaveCriticalSection  +
cmp edi ebx +
jz loc_10173F1  +
push edi  +
push offset aEventwriteErro  +
mov ecx esi +
call sub_1017154  +
cmp edi ebx +
jle loc_10173ED  +
and edi 0FFFFh +
or edi 80070000h +
mov eax edi +
jmp loc_10173F3  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001FD0  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 4Ch +
mov eax dword_10220C8 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_8] +
mov [ebp+var_1C] eax +
mov eax [ebp+arg_4] +
push esi  +
mov esi ecx +
mov ecx [esi+4] +
mov [ebp+lpCriticalSection] eax +
mov eax [esi] +
mov edx eax +
or edx ecx +
push edi  +
mov edi [ebp+arg_14] +
jnz loc_1017445  +
xor eax eax +
inc eax  +
jmp loc_101751F  +
push [ebp+var_1C]  +
push ecx  +
push eax  +
call ds:EtwEventEnabled  +
test al al +
jz loc_101751D  +
push [ebp+lpCriticalSection]  +
lea eax [ebp+var_4C] +
push eax  +
call sub_100180D  +
push ebx  +
lea eax [ebp+var_3C] +
push eax  +
call sub_100199E  +
lea eax [ebp+arg_C] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
call sub_10019C3  +
lea eax [esi+8] +
push eax  +
lea ecx [ebp+lpCriticalSection] +
call sub_1001B5E  +
push ebx  +
push 2  +
call ds:EtwEventActivityIdControl  +
lea eax [ebp+var_4C] +
xor ebx ebx +
push eax  +
push 3  +
cmp edi ebx +
jz loc_10174AE  +
push edi  +
push ebx  +
push [ebp+var_1C]  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
call ds:EtwEventWriteTransfer  +
jmp loc_10174BC  +
push [ebp+var_1C]  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
call ds:EtwEventWrite  +
mov edi eax +
xor eax eax +
mov [ebp+var_10] ax +
mov [ebp+var_E] ax +
lea eax [ebp+var_14] +
push eax  +
push 2  +
mov [ebp+var_14] ebx +
mov [ebp+var_C] bl +
mov [ebp+var_B] bl +
mov [ebp+var_A] bl +
mov [ebp+var_9] bl +
mov [ebp+var_8] bl +
mov [ebp+var_7] bl +
mov [ebp+var_6] bl +
mov [ebp+var_5] bl +
call ds:EtwEventActivityIdControl  +
push [ebp+lpCriticalSection]  +
call ds:LeaveCriticalSection  +
cmp edi ebx +
jz loc_101751D  +
push edi  +
push offset aEventwriteErro  +
mov ecx esi +
call sub_1017154  +
cmp edi ebx +
jle loc_1017519  +
and edi 0FFFFh +
or edi 80070000h +
mov eax edi +
jmp loc_101751F  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001FD0  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 50h +
mov eax dword_10220C8 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov [ebp+var_20] eax +
mov eax [ebp+arg_C] +
push ebx  +
mov ebx [ebp+arg_4] +
mov [ebp+lpCriticalSection] eax +
mov eax [ebp+arg_14] +
push esi  +
mov esi ecx +
mov ecx [esi+4] +
mov [ebp+var_18] eax +
mov eax [esi] +
mov edx eax +
or edx ecx +
push edi  +
mov edi [ebp+arg_8] +
jnz loc_1017577  +
xor eax eax +
inc eax  +
jmp loc_1017653  +
push [ebp+var_20]  +
push ecx  +
push eax  +
call ds:EtwEventEnabled  +
test al al +
jz loc_1017651  +
push ebx  +
lea eax [ebp+var_50] +
push eax  +
call sub_100180D  +
push edi  +
lea eax [ebp+var_40] +
push eax  +
call sub_100199E  +
push [ebp+lpCriticalSection]  +
lea eax [ebp+var_30] +
push eax  +
call sub_100180D  +
lea eax [esi+8] +
push eax  +
lea ecx [ebp+lpCriticalSection] +
call sub_1001B5E  +
push edi  +
mov edi ds:EtwEventActivityIdControl +
push 2  +
call edi  +
lea eax [ebp+var_50] +
xor ebx ebx +
push eax  +
push 3  +
cmp [ebp+var_18] ebx +
jz loc_10175E2  +
push [ebp+var_18]  +
push ebx  +
push [ebp+var_20]  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
call ds:EtwEventWriteTransfer  +
jmp loc_10175F0  +
push [ebp+var_20]  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
call ds:EtwEventWrite  +
mov [ebp+var_18] eax +
xor eax eax +
mov [ebp+var_10] ax +
mov [ebp+var_E] ax +
lea eax [ebp+var_14] +
push eax  +
push 2  +
mov [ebp+var_14] ebx +
mov [ebp+var_C] bl +
mov [ebp+var_B] bl +
mov [ebp+var_A] bl +
mov [ebp+var_9] bl +
mov [ebp+var_8] bl +
mov [ebp+var_7] bl +
mov [ebp+var_6] bl +
mov [ebp+var_5] bl +
call edi  +
push [ebp+lpCriticalSection]  +
call ds:LeaveCriticalSection  +
mov edi [ebp+var_18] +
cmp edi ebx +
jz loc_1017651  +
push edi  +
push offset aEventwriteErro  +
mov ecx esi +
call sub_1017154  +
cmp edi ebx +
jle loc_101764D  +
and edi 0FFFFh +
or edi 80070000h +
mov eax edi +
jmp loc_1017653  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001FD0  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 250h +
mov eax dword_10220C8 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
push 20Ah  +
lea eax [ebp+var_210] +
push 0  +
push eax  +
mov esi ecx +
call memset  +
push edi  +
push offset aS_0  +
lea eax [ebp+var_210] +
push 105h  +
push eax  +
call sub_101508A  +
add esp 1Ch +
test eax eax +
jge loc_10176C3  +
xor eax eax +
mov [ebp+var_210] ax +
mov eax [esi] +
mov ecx [esi+4] +
mov edx eax +
or edx ecx +
jz loc_1017760  +
mov edi offset dword_1017778 +
push edi  +
push ecx  +
push eax  +
call ds:EtwEventEnabled  +
test al al +
jz loc_1017760  +
push ebx  +
lea eax [ebp+var_250] +
push eax  +
call sub_100180D  +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebp+var_240] +
push eax  +
call sub_10019C3  +
lea eax [ebp+var_210] +
push eax  +
lea eax [ebp+var_230] +
push eax  +
call sub_100180D  +
lea eax [ebp+arg_C] +
push eax  +
lea eax [ebp+var_220] +
push eax  +
call sub_10019C3  +
lea eax [ebp+var_250] +
push eax  +
push 4  +
push edi  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
call ds:EtwEventWrite  +
mov edi eax +
test edi edi +
jz loc_1017760  +
push edi  +
push offset aEventwriteErro  +
mov ecx esi +
call sub_1017154  +
test edi edi +
jle loc_101775C  +
and edi 0FFFFh +
or edi 80070000h +
mov eax edi +
jmp loc_1017762  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001FD0  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_14] +
test edx edx +
jz loc_10177C4  +
cmp word ptr [edx] 0 +
jnz loc_10177A9  +
push 0Eh  +
jmp loc_10177C6  +
mov eax edx +
push esi  +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10177AF  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_10177C7  +
push 0Ah  +
pop eax  +
test edx edx +
jz loc_10177D8  +
cmp word ptr [edx] 0 +
jnz loc_10177DD  +
mov edx offset aNull +
jmp loc_10177DD  +
mov edx offset aNull_0 +
push 0  +
push eax  +
push edx  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 28h +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_14] +
test edx edx +
jz loc_1017837  +
cmp word ptr [edx] 0 +
jnz loc_101781C  +
push 0Eh  +
jmp loc_1017839  +
mov eax edx +
push esi  +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1017822  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_101783A  +
push 0Ah  +
pop eax  +
test edx edx +
jz loc_101784B  +
cmp word ptr [edx] 0 +
jnz loc_1017850  +
mov edx offset aNull +
jmp loc_1017850  +
mov edx offset aNull_0 +
push 0  +
push 10h  +
push [ebp+arg_18]  +
push eax  +
push edx  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 30h +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_1C] +
push ebx  +
push esi  +
push edi  +
test edx edx +
jz loc_10178B8  +
cmp word ptr [edx] 0 +
jnz loc_101789C  +
mov [ebp+arg_1C] 0Eh +
jmp loc_10178BF  +
mov eax edx +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10178A1  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
mov [ebp+arg_1C] eax +
jmp loc_10178BF  +
mov [ebp+arg_1C] 0Ah +
mov ebx offset aNull_0 +
test edx edx +
jz loc_10178D5  +
cmp word ptr [edx] 0 +
jnz loc_10178D7  +
mov edx offset aNull +
jmp loc_10178D7  +
mov edx ebx +
mov edi [ebp+arg_14] +
test edi edi +
jz loc_1017901  +
cmp word ptr [edi] 0 +
jnz loc_10178E8  +
push 0Eh  +
jmp loc_1017903  +
mov eax edi +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10178ED  +
sub eax esi +
sar eax 1 +
lea ecx [eax+eax+2] +
jmp loc_1017904  +
push 0Ah  +
pop ecx  +
test edi edi +
jz loc_1017919  +
cmp word ptr [edi] 0 +
jnz loc_1017915  +
mov eax offset aNull +
jmp loc_101791B  +
mov eax edi +
jmp loc_101791B  +
mov eax ebx +
push 0  +
push [ebp+arg_1C]  +
push edx  +
push 10h  +
push [ebp+arg_18]  +
push ecx  +
push eax  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 38h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_1C] +
push ebx  +
push esi  +
push edi  +
test edx edx +
jz loc_101798A  +
cmp word ptr [edx] 0 +
jnz loc_101796E  +
mov [ebp+arg_1C] 0Eh +
jmp loc_1017991  +
mov eax edx +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1017973  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
mov [ebp+arg_1C] eax +
jmp loc_1017991  +
mov [ebp+arg_1C] 0Ah +
mov ebx offset aNull_0 +
test edx edx +
jz loc_10179A7  +
cmp word ptr [edx] 0 +
jnz loc_10179A9  +
mov edx offset aNull +
jmp loc_10179A9  +
mov edx ebx +
mov edi [ebp+arg_14] +
test edi edi +
jz loc_10179D3  +
cmp word ptr [edi] 0 +
jnz loc_10179BA  +
push 0Eh  +
jmp loc_10179D5  +
mov eax edi +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10179BF  +
sub eax esi +
sar eax 1 +
lea ecx [eax+eax+2] +
jmp loc_10179D6  +
push 0Ah  +
pop ecx  +
test edi edi +
jz loc_10179EB  +
cmp word ptr [edi] 0 +
jnz loc_10179E7  +
mov eax offset aNull +
jmp loc_10179ED  +
mov eax edi +
jmp loc_10179ED  +
mov eax ebx +
push 0  +
push 4  +
lea esi [ebp+arg_20] +
push esi  +
push [ebp+arg_1C]  +
push edx  +
push 10h  +
push [ebp+arg_18]  +
push ecx  +
push eax  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 40h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 24h  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_1017A60  +
test byte ptr [eax+1Ch] 4 +
jz loc_1017A60  +
mov ecx [esi+4] +
test ecx ecx +
jz loc_1017A4A  +
mov ecx [ecx] +
jmp loc_1017A4C  +
xor ecx ecx +
push ecx  +
push esi  +
push offset dword_101231C  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017793  +
push dword ptr [esi+0DCh]  +
call ds:SetEvent  +
neg eax  +
sbb eax eax +
and eax 7FFFBFFBh +
add eax 80004005h +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_1017AB9  +
test byte ptr [eax+1Ch] 4 +
jz loc_1017AB9  +
mov ecx [esi+4] +
test ecx ecx +
jz loc_1017AA3  +
mov ecx [ecx] +
jmp loc_1017AA5  +
xor ecx ecx +
push ecx  +
push esi  +
push offset dword_101231C  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017793  +
push dword ptr [esi+0E0h]  +
call ds:SetEvent  +
neg eax  +
sbb eax eax +
and eax 7FFFBFFBh +
add eax 80004005h +
pop esi  +
retn   +
***
mov edi edi +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_1017B0F  +
test byte ptr [eax+1Ch] 4 +
jz loc_1017B0F  +
mov edx [ecx+4] +
test edx edx +
jz loc_1017AF9  +
mov edx [edx] +
jmp loc_1017AFB  +
xor edx edx +
push edx  +
push ecx  +
push offset dword_101231C  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017793  +
mov eax 80004001h +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1002775  +
test byte ptr [ebp+8] 1 +
jz loc_1017B34  +
push esi  +
call sub_10014DF  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call ds:__imp_GetLastError  +
call ds:__imp_GetLastError  +
test eax eax +
jle locret_1017B74  +
and eax 0FFFFh +
or eax 80070000h +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
add ecx 38h +
push ecx  +
call sub_1009502  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov eax 80004001h +
retn   +
***
cmp dword ptr [ecx+4] 0 +
jl loc_1017BBC  +
mov eax [ecx+30h] +
test eax eax +
jz loc_1017BBC  +
mov eax [eax+10h] +
test eax eax +
mov [ecx+4] eax +
setnl al  +
mov [ecx+14h] al +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push dword ptr [esi+4]  +
mov dword ptr [esi] offset off_10027D8 +
call ds:free  +
test byte ptr [ebp+8] 1 +
pop ecx  +
jz loc_1017BE9  +
push esi  +
call sub_10014DF  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
jmp sub_1009711  +
***
push 34h  +
mov eax offset dword_101E3D4 +
call sub_1002917  +
mov esi ecx +
mov [ebp-1Ch] esi +
xor ebx ebx +
cmp [esi+2Ch] ebx +
jz loc_1017E01  +
lea ecx [ebp-2Ch] +
mov [ebp-4] ebx +
call sub_101A457  +
mov eax [esi+2Ch] +
mov ecx [eax] +
lea edx [ebp-18h] +
push edx  +
push eax  +
mov byte ptr [ebp-4] 1 +
call dword ptr [ecx+10h]  +
cmp eax ebx +
mov [ebp-14h] eax +
jl loc_1017C4A  +
mov eax [ebp-18h] +
mov [ebp-14h] eax +
lea ecx [ebp-2Ch] +
mov [ebp-4] bl +
call sub_101A41C  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax [ebp-1Ch] +
mov ecx [eax+18h] +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
jmp loc_1017E08  +
mov ecx [ebp-20h] +
mov eax [ecx] +
call dword ptr [eax]  +
test eax eax +
jle loc_1017C7E  +
and eax 0FFFFh +
or eax 80070000h +
push offset aDW7rtmAdminW_3  +
push 0F6h  +
push offset aComhandlerbase  +
push eax  +
push offset dword_101124C  +
push offset aCatch_knownSHr  +
mov [ebp-14h] eax +
call sub_101C9A8  +
or dword ptr [ebp-4] 0FFFFFFFFh +
add esp 18h +
mov eax offset loc_1017CAD +
retn   +
***
jmp loc_1017C59  +
***
push offset aDW7rtmAdminW_3  +
push 0F6h  +
mov eax 8007000Eh +
push offset aComhandlerbase  +
push eax  +
push offset dword_10111E8  +
push offset aCatch_knownSHr  +
mov [ebp-14h] eax +
call sub_101C9A8  +
or dword ptr [ebp-4] 0FFFFFFFFh +
add esp 18h +
mov eax offset loc_1017CE3 +
retn   +
***
jmp loc_1017C59  +
***
push offset aDW7rtmAdminW_3  +
push 0F6h  +
mov eax 80070057h +
push offset aComhandlerbase  +
push eax  +
push offset aStdInvalid_arg  +
push offset aCatch_knownSHr  +
mov [ebp-14h] eax +
call sub_101C9A8  +
or dword ptr [ebp-4] 0FFFFFFFFh +
add esp 18h +
mov eax offset loc_1017D1C +
retn   +
***
jmp loc_1017C59  +
***
push offset aDW7rtmAdminW_3  +
push 0F6h  +
mov eax 80070057h +
push offset aComhandlerbase  +
push eax  +
push offset aStdLength_erro  +
push offset aCatch_knownSHr  +
mov [ebp-14h] eax +
call sub_101C9A8  +
or dword ptr [ebp-4] 0FFFFFFFFh +
add esp 18h +
mov eax offset loc_1017D55 +
retn   +
***
jmp loc_1017C59  +
***
push offset aDW7rtmAdminW_3  +
push 0F6h  +
mov eax 80070057h +
push offset aComhandlerbase  +
push eax  +
push offset aStdOut_of_rang  +
push offset aCatch_knownSHr  +
mov [ebp-14h] eax +
call sub_101C9A8  +
or dword ptr [ebp-4] 0FFFFFFFFh +
add esp 18h +
mov eax offset loc_1017D8E +
retn   +
***
jmp loc_1017C59  +
***
push offset aDW7rtmAdminW_3  +
push 0F6h  +
mov eax 80004005h +
push offset aComhandlerbase  +
push eax  +
push offset dword_1011198  +
push offset aCatch_knownSHr  +
mov [ebp-14h] eax +
call sub_101C9A8  +
or dword ptr [ebp-4] 0FFFFFFFFh +
add esp 18h +
mov eax offset loc_1017DC7 +
retn   +
***
jmp loc_1017C59  +
***
mov eax [ebp-24h] +
mov eax [eax+4] +
push offset aDW7rtmAdminW_3  +
push 0F6h  +
push offset aComhandlerbase  +
push eax  +
push offset a_com_error  +
push offset aCatch_knownSHr  +
mov [ebp-14h] eax +
call sub_101C9A8  +
or dword ptr [ebp-4] 0FFFFFFFFh +
add esp 18h +
mov eax offset loc_1017C59 +
retn   +
***
mov dword ptr [ebp-14h] 8000FFFFh +
mov eax [ebp-14h] +
call sub_100165F  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
test ecx ecx +
jbe loc_1017E4A  +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1017E44  +
and dword ptr [eax] 0 +
add eax 4 +
dec ecx  +
jnz loc_1017E3D  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1009704 +
call sub_1009711  +
test byte ptr [ebp+8] 1 +
jz loc_1017E73  +
push esi  +
call sub_10014DF  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push 6Ch  +
mov eax offset byte_101E42B +
call sub_1002917  +
mov esi ecx +
mov [ebp-18h] esi +
mov eax [esi] +
and dword ptr [ebp-1Ch] 0 +
and dword ptr [ebp-4] 0 +
call dword ptr [eax+1Ch]  +
push eax  +
lea ecx [esi+18h] +
call sub_100A586  +
or dword ptr [ebp-4] 0FFFFFFFFh +
jmp loc_1017EFA  +
mov ecx [ebp-20h] +
mov eax [ecx] +
call dword ptr [eax]  +
test eax eax +
jle loc_1017EC1  +
and eax 0FFFFh +
or eax 80070000h +
push offset aDW7rtmAdminW_3  +
push 90h  +
push offset aComhandlerba_0  +
push eax  +
push offset dword_101124C  +
push offset aCatch_knownSHr  +
mov [ebp-14h] eax +
call sub_101C9A8  +
or dword ptr [ebp-4] 0FFFFFFFFh +
add esp 18h +
mov eax offset loc_1017EF0 +
retn   +
***
cmp dword ptr [ebp-14h] 0 +
jl loc_1018322  +
mov ebx [ebp-18h] +
add ebx 18h +
mov ecx [ebx] +
test ecx ecx +
jnz loc_1018068  +
mov dword ptr [ebp-14h] 8007000Eh +
jmp loc_1018322  +
push offset aDW7rtmAdminW_3  +
push 90h  +
mov eax 8007000Eh +
push offset aComhandlerba_0  +
push eax  +
push offset dword_10111E8  +
push offset aCatch_knownSHr  +
mov [ebp-14h] eax +
call sub_101C9A8  +
or dword ptr [ebp-4] 0FFFFFFFFh +
add esp 18h +
mov eax offset loc_1017F4A +
retn   +
***
jmp loc_1018322  +
push offset aDW7rtmAdminW_3  +
push 90h  +
mov eax 80070057h +
push offset aComhandlerba_0  +
push eax  +
push offset aStdInvalid_arg  +
push offset aCatch_knownSHr  +
mov [ebp-14h] eax +
call sub_101C9A8  +
or dword ptr [ebp-4] 0FFFFFFFFh +
add esp 18h +
mov eax offset loc_1017F83 +
retn   +
***
jmp loc_1018322  +
push offset aDW7rtmAdminW_3  +
push 90h  +
mov eax 80070057h +
push offset aComhandlerba_0  +
push eax  +
push offset aStdLength_erro  +
push offset aCatch_knownSHr  +
mov [ebp-14h] eax +
call sub_101C9A8  +
or dword ptr [ebp-4] 0FFFFFFFFh +
add esp 18h +
mov eax offset loc_1017FBC +
retn   +
***
jmp loc_1018322  +
push offset aDW7rtmAdminW_3  +
push 90h  +
mov eax 80070057h +
push offset aComhandlerba_0  +
push eax  +
push offset aStdOut_of_rang  +
push offset aCatch_knownSHr  +
mov [ebp-14h] eax +
call sub_101C9A8  +
or dword ptr [ebp-4] 0FFFFFFFFh +
add esp 18h +
mov eax offset loc_1017FF5 +
retn   +
***
jmp loc_1018322  +
push offset aDW7rtmAdminW_3  +
push 90h  +
mov eax 80004005h +
push offset aComhandlerba_0  +
push eax  +
push offset dword_1011198  +
push offset aCatch_knownSHr  +
mov [ebp-14h] eax +
call sub_101C9A8  +
or dword ptr [ebp-4] 0FFFFFFFFh +
add esp 18h +
mov eax offset loc_101802E +
retn   +
***
jmp loc_1018322  +
mov eax [ebp-24h] +
mov eax [eax+4] +
push offset aDW7rtmAdminW_3  +
push 90h  +
push offset aComhandlerba_0  +
push eax  +
push offset a_com_error  +
push offset aCatch_knownSHr  +
mov [ebp-14h] eax +
call sub_101C9A8  +
or dword ptr [ebp-4] 0FFFFFFFFh +
add esp 18h +
mov eax offset loc_1017EF0 +
retn   +
***
push dword ptr [ebp+8]  +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov [ebp-14h] eax +
test eax eax +
jl loc_1018322  +
mov esi [ebp-18h] +
add esi 1Ch +
push esi  +
call sub_101A852  +
xor ecx ecx +
test al al +
setnz cl  +
push 4  +
pop edi  +
add ecx edi +
mov eax ecx +
mov ecx [ebp-18h] +
add ecx 2Ch +
push ecx  +
push offset dword_1018514  +
push eax  +
push 0  +
push esi  +
call ds:CoCreateInstance  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [ebp-14h] eax +
test eax eax +
jl loc_1018322  +
push 34h  +
mov [ebp-4] edi +
call sub_100150F  +
pop ecx  +
mov ecx eax +
mov [ebp+8] ecx +
mov byte ptr [ebp-4] 5 +
test ecx ecx +
jz loc_10180DA  +
push ebx  +
call sub_101A78C  +
jmp loc_10180DC  +
xor eax eax +
mov ecx [ebp-18h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [ecx+30h] eax +
cmp dword ptr [ebp-14h] 0 +
jl loc_1018322  +
mov eax [ebp-18h] +
mov eax [eax+30h] +
mov ecx [eax] +
lea edx [ebp-1Ch] +
push edx  +
push offset dword_10027F0  +
push eax  +
call dword ptr [ecx]  +
mov [ebp-14h] eax +
test eax eax +
jl loc_1018322  +
mov esi ds:GetCurrentThread +
mov dword ptr [ebp-4] 7 +
call esi  +
push eax  +
call ds:GetThreadPriority  +
push dword ptr [ebp+10h]  +
mov ebx eax +
call sub_101A308  +
push eax  +
call esi  +
mov edi ds:SetThreadPriority +
push eax  +
call edi  +
lea ecx [ebp-3Ch] +
call sub_101A457  +
mov edx [ebp-18h] +
mov eax [edx+38h] +
mov byte ptr [ebp-4] 8 +
test eax eax +
jz loc_10182F4  +
mov ecx [eax] +
jmp loc_10182F6  +
mov ecx [ebp-28h] +
mov eax [ecx] +
call dword ptr [eax]  +
test eax eax +
jle loc_1018171  +
and eax 0FFFFh +
or eax 80070000h +
push offset aDW7rtmAdminW_3  +
push 0BCh  +
push offset aComhandlerba_0  +
push eax  +
push offset dword_101124C  +
push offset aCatch_knownSHr  +
mov [ebp-14h] eax +
call sub_101C9A8  +
or dword ptr [ebp-4] 0FFFFFFFFh +
add esp 18h +
mov eax offset loc_10181A0 +
retn   +
***
jmp loc_10180E6  +
***
push offset aDW7rtmAdminW_3  +
push 0BCh  +
mov eax 8007000Eh +
push offset aComhandlerba_0  +
push eax  +
push offset dword_10111E8  +
push offset aCatch_knownSHr  +
mov [ebp-14h] eax +
call sub_101C9A8  +
or dword ptr [ebp-4] 0FFFFFFFFh +
add esp 18h +
mov eax offset loc_10181D9 +
retn   +
***
jmp loc_1018322  +
push offset aDW7rtmAdminW_3  +
push 0BCh  +
mov eax 80070057h +
push offset aComhandlerba_0  +
push eax  +
push offset aStdInvalid_arg  +
push offset aCatch_knownSHr  +
mov [ebp-14h] eax +
call sub_101C9A8  +
or dword ptr [ebp-4] 0FFFFFFFFh +
add esp 18h +
mov eax offset loc_1018212 +
retn   +
***
jmp loc_1018322  +
push offset aDW7rtmAdminW_3  +
push 0BCh  +
mov eax 80070057h +
push offset aComhandlerba_0  +
push eax  +
push offset aStdLength_erro  +
push offset aCatch_knownSHr  +
mov [ebp-14h] eax +
call sub_101C9A8  +
or dword ptr [ebp-4] 0FFFFFFFFh +
add esp 18h +
mov eax offset loc_101824B +
retn   +
***
jmp loc_1018322  +
push offset aDW7rtmAdminW_3  +
push 0BCh  +
mov eax 80070057h +
push offset aComhandlerba_0  +
push eax  +
push offset aStdOut_of_rang  +
push offset aCatch_knownSHr  +
mov [ebp-14h] eax +
call sub_101C9A8  +
or dword ptr [ebp-4] 0FFFFFFFFh +
add esp 18h +
mov eax offset loc_1018284 +
retn   +
***
jmp loc_1018322  +
push offset aDW7rtmAdminW_3  +
push 0BCh  +
mov eax 80004005h +
push offset aComhandlerba_0  +
push eax  +
push offset dword_1011198  +
push offset aCatch_knownSHr  +
mov [ebp-14h] eax +
call sub_101C9A8  +
or dword ptr [ebp-4] 0FFFFFFFFh +
add esp 18h +
mov eax offset loc_10182BD +
retn   +
***
jmp loc_1018322  +
mov eax [ebp-2Ch] +
mov eax [eax+4] +
push offset aDW7rtmAdminW_3  +
push 0BCh  +
push offset aComhandlerba_0  +
push eax  +
push offset a_com_error  +
push offset aCatch_knownSHr  +
mov [ebp-14h] eax +
call sub_101C9A8  +
or dword ptr [ebp-4] 0FFFFFFFFh +
add esp 18h +
mov eax offset loc_10180E6 +
retn   +
***
xor ecx ecx +
mov eax [edx+2Ch] +
mov edx [eax] +
push ecx  +
push dword ptr [ebp-1Ch]  +
push eax  +
call dword ptr [edx+0Ch]  +
push ebx  +
mov [ebp-14h] eax +
call esi  +
push eax  +
call edi  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 7 +
call sub_101A41C  +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp dword ptr [ebp-14h] 0 +
jge loc_1018339  +
mov eax [ebp-18h] +
mov eax [eax+2Ch] +
test eax eax +
jz loc_1018339  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-18h] +
and dword ptr [eax+2Ch] 0 +
mov eax [ebp-1Ch] +
test eax eax +
jz loc_1018346  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-14h] +
mov ecx [ebp-18h] +
test eax eax +
setnl dl  +
mov [ecx+14h] dl +
mov [ecx+4] eax +
call sub_100165F  +
retn 10h  +
***
mov ecx [ebp-30h] +
mov eax [ecx] +
call dword ptr [eax]  +
test eax eax +
jle loc_1018374  +
and eax 0FFFFh +
or eax 80070000h +
push offset aDW7rtmAdminW_3  +
push 0CBh  +
push offset aComhandlerba_0  +
push eax  +
push offset dword_101124C  +
push offset aCatch_knownSHr  +
mov [ebp-14h] eax +
call sub_101C9A8  +
or dword ptr [ebp-4] 0FFFFFFFFh +
add esp 18h +
mov eax offset loc_10183A3 +
retn   +
***
jmp loc_101831C  +
***
push offset aDW7rtmAdminW_3  +
push 0CBh  +
mov eax 8007000Eh +
push offset aComhandlerba_0  +
push eax  +
push offset dword_10111E8  +
push offset aCatch_knownSHr  +
mov [ebp-14h] eax +
call sub_101C9A8  +
or dword ptr [ebp-4] 0FFFFFFFFh +
add esp 18h +
mov eax offset loc_10183DC +
retn   +
***
jmp loc_1018322  +
***
push offset aDW7rtmAdminW_3  +
push 0CBh  +
mov eax 80070057h +
push offset aComhandlerba_0  +
push eax  +
push offset aStdInvalid_arg  +
push offset aCatch_knownSHr  +
mov [ebp-14h] eax +
call sub_101C9A8  +
or dword ptr [ebp-4] 0FFFFFFFFh +
add esp 18h +
mov eax offset loc_1018415 +
retn   +
***
jmp loc_1018322  +
***
push offset aDW7rtmAdminW_3  +
push 0CBh  +
mov eax 80070057h +
push offset aComhandlerba_0  +
push eax  +
push offset aStdLength_erro  +
push offset aCatch_knownSHr  +
mov [ebp-14h] eax +
call sub_101C9A8  +
or dword ptr [ebp-4] 0FFFFFFFFh +
add esp 18h +
mov eax offset loc_101844E +
retn   +
***
jmp loc_1018322  +
***
push offset aDW7rtmAdminW_3  +
push 0CBh  +
mov eax 80070057h +
push offset aComhandlerba_0  +
push eax  +
push offset aStdOut_of_rang  +
push offset aCatch_knownSHr  +
mov [ebp-14h] eax +
call sub_101C9A8  +
or dword ptr [ebp-4] 0FFFFFFFFh +
add esp 18h +
mov eax offset loc_1018487 +
retn   +
***
jmp loc_1018322  +
***
push offset aDW7rtmAdminW_3  +
push 0CBh  +
mov eax 80004005h +
push offset aComhandlerba_0  +
push eax  +
push offset dword_1011198  +
push offset aCatch_knownSHr  +
mov [ebp-14h] eax +
call sub_101C9A8  +
or dword ptr [ebp-4] 0FFFFFFFFh +
add esp 18h +
mov eax offset loc_10184C0 +
retn   +
***
jmp loc_1018322  +
***
mov eax [ebp-34h] +
mov eax [eax+4] +
push offset aDW7rtmAdminW_3  +
push 0CBh  +
push offset aComhandlerba_0  +
push eax  +
push offset a_com_error  +
push offset aCatch_knownSHr  +
mov [ebp-14h] eax +
call sub_101C9A8  +
or dword ptr [ebp-4] 0FFFFFFFFh +
add esp 18h +
mov eax offset loc_101831C +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push esi  +
push edi  +
mov esi offset dword_100A950 +
mov edi eax +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1005BE9  +
test byte ptr [ebp+8] 1 +
jz loc_1018563  +
push esi  +
call sub_10014DF  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
push ebx  +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
lea ebx [ecx+edx] +
push edi  +
cmp ebx ecx +
jb loc_10185CA  +
cmp ebx edx +
jb loc_10185CA  +
mov eax [esi+4] +
cmp ebx eax +
ja loc_10185CA  +
sub eax ebx +
mov [ebp+arg_0] eax +
mov eax [esi] +
mov edi ecx +
shl edi 2 +
push edx  +
add eax edi +
push eax  +
call sub_10063F8  +
cmp [ebp+arg_0] 0 +
jbe loc_10185BD  +
mov eax [esi] +
push [ebp+arg_0]  +
lea ecx [eax+ebx*4] +
push ecx  +
add eax edi +
push eax  +
call sub_1006E83  +
mov eax [ebp+arg_4] +
sub [esi+4] eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
push 80070057h  +
call sub_1016FA4  +
int 3  +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
push 1  +
push [ebp+arg_0]  +
add ecx 10h +
call sub_101856F  +
pop ebp  +
retn 4  +
***
call sub_1001448  +
mov ebx ecx +
mov [ebp-10h] ebx +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1004552  +
xor eax eax +
mov dword ptr [ebx] offset off_1012398 +
mov [ebp-4] eax +
mov [ebx+18h] eax +
mov esi [ebp+10h] +
lea edi [ebx+1Ch] +
movs   +
movs   +
movs   +
movs   +
push offset dword_100348C  +
lea ecx [ebx+34h] +
mov byte ptr [ebp-4] 1 +
mov [ebx+2Ch] eax +
mov [ebx+30h] eax +
call sub_100997E  +
push dword ptr [ebp+14h]  +
lea ecx [ebx+38h] +
call sub_1008E84  +
mov eax ebx +
call sub_100165F  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2BCh +
mov eax dword_10220C8 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov esi offset aClsid +
lea edi [ebp+SubKey] +
movs   +
movs   +
movs   +
push 56h  +
lea eax [ebp+var_5A] +
push 0  +
push eax  +
mov ebx ecx +
movs   +
call memset  +
add esp 0Ch +
push 28h  +
lea eax [ebp+sz] +
push eax  +
lea eax [ebx+1Ch] +
push eax  +
call ds:StringFromGUID2  +
test eax eax +
jz loc_10186F4  +
lea eax [ebp+sz] +
push eax  +
push 32h  +
lea eax [ebp+SubKey] +
push eax  +
mov [ebp+cbValue] 1FEh +
call sub_10088C2  +
lea eax [ebp+cbValue] +
push eax  +
lea eax [ebp+Value] +
push eax  +
lea eax [ebp+SubKey] +
push eax  +
push 80000000h  +
call RegQueryValueW  +
test eax eax +
jnz loc_10186F4  +
lea eax [ebp+Value] +
push eax  +
lea ecx [ebx+34h] +
call sub_1004635  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001FD0  +
leave   +
retn   +
***
call sub_1001448  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1012398 +
mov eax [esi+2Ch] +
mov dword ptr [ebp-4] 3 +
test eax eax +
jz loc_1018742  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+30h] +
test eax eax +
jz loc_101874F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [esi+38h] +
call sub_10019E8  +
lea ecx [esi+34h] +
call sub_10019E8  +
lea ecx [esi+18h] +
mov byte ptr [ebp-4] 0 +
call sub_1001A7B  +
mov ecx esi +
call sub_10023A7  +
call sub_100165F  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1018717  +
test byte ptr [ebp+8] 1 +
jz loc_1018797  +
push esi  +
call sub_10014DF  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100BA07  +
test byte ptr [ebp+8] 1 +
jz loc_10187BD  +
push esi  +
call sub_10014DF  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+8] +
mov dword ptr [esi] offset off_10123B8 +
test eax eax +
jz loc_10187E6  +
push eax  +
call ds:CloseHandle  +
or dword ptr [esi+8] 0FFFFFFFFh +
mov dword ptr [esi] offset off_10018DC +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
xor edi edi +
push edi  +
push edi  +
push 1  +
push edi  +
mov esi ecx +
call ds:CreateEventW  +
mov [esi+8] eax +
cmp eax edi +
jnz loc_1018828  +
call ds:__imp_GetLastError  +
cmp eax edi +
jle loc_1018824  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
jmp loc_101882D  +
mov ecx [ebp+8] +
mov [ecx] eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
push dword ptr [ecx+8]  +
call ds:SetEvent  +
xor eax eax +
retn   +
***
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
retn 4  +
***
mov eax ecx +
and dword ptr [eax+8] 0 +
mov dword ptr [eax] offset off_10018DC +
mov dword ptr [eax+4] 0 +
mov dword ptr [eax] offset off_10123B8 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10187C9  +
test byte ptr [ebp+8] 1 +
jz loc_1018891  +
push esi  +
call sub_10014DF  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push 0Ch  +
call sub_100150F  +
pop ecx  +
test eax eax +
jz loc_10188AD  +
mov ecx eax +
jmp loc_1018858  +
***
xor eax eax +
retn   +
***
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+8]  +
mov esi ecx +
call ds:SysAllocString  +
test eax eax +
jnz loc_10188DB  +
cmp [ebp+8] eax +
jz loc_10188DB  +
push 8007000Eh  +
call sub_1014768  +
jmp loc_10188E4  +
push 8  +
pop ecx  +
mov [esi] cx +
mov [esi+8] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
adc eax offset VariantClear +
push eax  +
call sub_10033FA  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_18] +
push ebx  +
push esi  +
push edi  +
test edx edx +
jz loc_101893F  +
cmp word ptr [edx] 0 +
jnz loc_1018923  +
mov [ebp+arg_18] 0Eh +
jmp loc_1018946  +
mov eax edx +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1018928  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
mov [ebp+arg_18] eax +
jmp loc_1018946  +
mov [ebp+arg_18] 0Ah +
mov ebx offset aNull_0 +
test edx edx +
jz loc_101895C  +
cmp word ptr [edx] 0 +
jnz loc_101895E  +
mov edx offset aNull +
jmp loc_101895E  +
mov edx ebx +
mov edi [ebp+arg_14] +
test edi edi +
jz loc_1018988  +
cmp word ptr [edi] 0 +
jnz loc_101896F  +
push 0Eh  +
jmp loc_101898A  +
mov eax edi +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1018974  +
sub eax esi +
sar eax 1 +
lea ecx [eax+eax+2] +
jmp loc_101898B  +
push 0Ah  +
pop ecx  +
test edi edi +
jz loc_10189A0  +
cmp word ptr [edi] 0 +
jnz loc_101899C  +
mov eax offset aNull +
jmp loc_10189A2  +
mov eax edi +
jmp loc_10189A2  +
mov eax ebx +
push 0  +
push 4  +
lea esi [ebp+arg_20] +
push esi  +
push 4  +
lea esi [ebp+arg_1C] +
push esi  +
push [ebp+arg_18]  +
push edx  +
push ecx  +
push eax  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 40h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 1  +
push offset off_102CE8C  +
push [ebp+arg_0]  +
call sub_1006181  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ds:PostMessageW +
push 1  +
push 0  +
push 111h  +
push dword ptr [ebp+8]  +
call esi  +
test eax eax +
jz loc_1018A32  +
push 0  +
push 0  +
push 10h  +
push dword ptr [ebp+8]  +
call esi  +
test eax eax +
jz loc_1018A32  +
mov ecx [ebp+0Ch] +
mov eax [ecx] +
and dword ptr [eax] 0 +
jmp loc_1018A4D  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_1018A46  +
and eax 0FFFFh +
or eax 80070000h +
mov ecx [ebp+0Ch] +
mov edx [ecx] +
mov [edx] eax +
xor eax eax +
mov byte ptr [ecx+8] 1 +
inc eax  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
push edi  +
mov dword ptr [ebp-8] 80004005h +
cmp [esi+20h] bl +
jz loc_1018AD3  +
lea eax [ebp-8] +
mov [ebp-14h] eax +
mov [ebp-10h] ebx +
mov [ebp-0Ch] bl +
mov [ebp-1] bl +
xor edi edi +
cmp [ebp-1] bl +
jnz loc_1018AD6  +
lea eax [ebp-14h] +
push eax  +
push offset loc_10189FB  +
push dword ptr [esi+28h]  +
call ds:EnumThreadWindows  +
test eax eax +
jz loc_1018AAD  +
mov eax [ebp-14h] +
mov eax [eax] +
mov [ebp-8] eax +
mov eax [esi+24h] +
cmp eax ebx +
jz loc_1018ACB  +
push 4E20h  +
push eax  +
call ds:WaitForSingleObject  +
test eax eax +
jnz loc_1018ACB  +
mov [ebp-8] ebx +
mov byte ptr [ebp-1] 1 +
inc edi  +
cmp edi 2 +
jge loc_1018AD6  +
jmp loc_1018A8A  +
***
mov [ebp-8] ebx +
mov eax [ebp-8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
movzx eax byte ptr [ecx+20h] +
neg eax  +
sbb eax eax +
and eax 80004001h +
retn   +
***
mov edi edi +
push esi  +
push 0FFFFFFFFh  +
push dword ptr [ecx+24h]  +
xor esi esi +
call ds:TerminateProcess  +
test eax eax +
jnz loc_1018B22  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_1018B20  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
mov eax esi +
pop esi  +
retn   +
***
xor eax eax +
inc eax  +
retn   +
***
push 3A980h  +
push dword ptr [ecx+68h]  +
mov byte ptr [ecx+6Ch] 1 +
call ds:WaitForSingleObject  +
neg eax  +
sbb eax eax +
and eax 80070102h +
retn 4  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
push esi  +
push edi  +
mov edi ecx +
test eax eax +
jz loc_1018B6D  +
mov esi [eax] +
jmp loc_1018B6F  +
xor esi esi +
push esi  +
call ds:SysStringByteLen  +
push eax  +
push esi  +
call ds:SysAllocStringByteLen  +
test eax eax +
jnz loc_1018B8E  +
push 8007000Eh  +
call sub_1014768  +
jmp loc_1018B97  +
push 8  +
pop ecx  +
mov [edi] cx +
mov [edi+8] eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
xor ecx ecx +
cmp [esi+20h] cl +
jz loc_1018BDD  +
mov eax [esi+1Ch] +
cmp eax ecx +
jz loc_1018BBF  +
mov edx [eax] +
jmp loc_1018BC1  +
xor edx edx +
mov eax [esi+18h] +
cmp eax ecx +
jz loc_1018BCC  +
mov eax [eax] +
jmp loc_1018BCE  +
xor eax eax +
push ecx  +
push eax  +
push edx  +
push ecx  +
call ds:MessageBoxW  +
mov [esi+4] eax +
jmp loc_1018BE4  +
mov dword ptr [esi+4] 1 +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+0Ch] +
mov ecx edi +
call sub_1001B0E  +
test eax eax +
jz loc_1018C12  +
mov eax [edi] +
test eax eax +
jz loc_1018C0E  +
mov eax [eax] +
jmp loc_1018C37  +
xor eax eax +
jmp loc_1018C37  +
lea edi [esi+18h] +
mov ecx edi +
call sub_1001B0E  +
test eax eax +
jnz loc_1018C04  +
add esi 1Ch +
mov ecx esi +
call sub_1001B0E  +
test eax eax +
jz loc_1018C32  +
mov eax [esi] +
jmp loc_1018C06  +
***
mov eax offset asc_10123D4 +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov al [ebp+0Ch] +
push ebx  +
push esi  +
xor ebx ebx +
mov esi ecx +
mov [esi+20h] al +
cmp al bl +
jz loc_1018C77  +
push edi  +
lea eax [esi+28h] +
push eax  +
lea edi [esi+24h] +
push edi  +
push dword ptr [ebp+10h]  +
push esi  +
push offset loc_1018BA4  +
call sub_101A32F  +
mov ecx [ebp+8] +
mov ebx eax +
mov eax [edi] +
mov [ecx] eax +
pop edi  +
jmp loc_1018CB1  +
xor eax eax +
push ebx  +
inc eax  +
push eax  +
push ebx  +
push ebx  +
mov [esi+4] eax +
call ds:CreateEventW  +
push eax  +
lea ecx [esi+24h] +
call sub_1007BA5  +
mov eax [eax] +
mov ecx [ebp+8] +
mov [ecx] eax +
cmp eax ebx +
jnz loc_1018CB1  +
call ds:__imp_GetLastError  +
cmp eax ebx +
jle loc_1018CAF  +
and eax 0FFFFh +
or eax 80070000h +
mov ebx eax +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+28h] +
push edi  +
xor edi edi +
test eax eax +
jz loc_1018CE7  +
push eax  +
lea ecx [ebp-1] +
call sub_101AB2E  +
mov edi eax +
test edi edi +
jl loc_1018CE7  +
jz loc_1018CE7  +
mov edi 80004005h +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_1018D1B  +
test byte ptr [eax+1Ch] 4 +
jz loc_1018D1B  +
mov ecx [esi+0Ch] +
test ecx ecx +
jz loc_1018D04  +
mov ecx [ecx] +
jmp loc_1018D06  +
xor ecx ecx +
push edi  +
push ecx  +
push esi  +
push offset dword_10041AC  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101B7A3  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+0Ch] +
mov ecx edi +
call sub_1001B0E  +
test eax eax +
jz loc_1018D4A  +
mov eax [edi] +
test eax eax +
jz loc_1018D46  +
mov eax [eax] +
jmp loc_1018D6F  +
xor eax eax +
jmp loc_1018D6F  +
lea edi [esi+1Ch] +
mov ecx edi +
call sub_1001B0E  +
test eax eax +
jnz loc_1018D3C  +
add esi 34h +
mov ecx esi +
call sub_1001B0E  +
test eax eax +
jz loc_1018D6A  +
mov eax [esi] +
jmp loc_1018D3E  +
***
mov eax offset asc_10123D4 +
pop edi  +
pop esi  +
retn   +
***
call ds:VariantClear  +
push eax  +
call sub_10033FA  +
test esi esi +
jge loc_1018DE2  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_10015AA  +
mov eax esi +
call sub_100165F  +
retn 18h  +
***
mov eax [ebp-10h] +
mov ecx [eax] +
sub esp 10h +
mov edi esp +
lea esi [ebp+10h] +
movs   +
movs   +
movs   +
push eax  +
movs   +
call dword ptr [ecx+38h]  +
mov esi eax +
jmp loc_1018DCC  +
***
call sub_1001448  +
mov ebx ecx +
mov [ebp-10h] ebx +
mov esi [ebp+8] +
mov eax [esi] +
push 0  +
push 0FFFFFFFFh  +
push esi  +
call dword ptr [eax+20h]  +
mov edi eax +
test edi edi +
jl loc_1018F87  +
and dword ptr [ebp+8] 0 +
mov eax [esi] +
and dword ptr [ebp-4] 0 +
lea ecx [ebp+8] +
push ecx  +
push esi  +
call dword ptr [eax+1Ch]  +
mov esi eax +
test esi esi +
jge loc_1018E53  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_10015AA  +
mov eax esi +
jmp loc_1018F89  +
lea eax [ebx+18h] +
push eax  +
lea ecx [ebp-20h] +
call near ptr dword_1018B54+3  +
sub esp 10h +
mov edi esp +
mov esi eax +
movs   +
movs   +
movs   +
push offset aHttpSchemas__0  +
push dword ptr [ebp+8]  +
mov ecx ebx +
mov byte ptr [ebp-4] 1 +
movs   +
call near ptr dword_1018D74+3  +
mov ebx ds:VariantClear +
mov esi eax +
lea eax [ebp-20h] +
push eax  +
mov byte ptr [ebp-4] 0 +
call ebx  +
push eax  +
call sub_10033FA  +
test esi esi +
jl loc_1018E40  +
push 3  +
pop eax  +
mov [ebp-20h] ax +
mov dword ptr [ebp-18h] 2 +
mov ecx [ebp-10h] +
sub esp 10h +
mov edi esp +
lea esi [ebp-20h] +
movs   +
movs   +
movs   +
push offset aHttpSchemas__1  +
push dword ptr [ebp+8]  +
mov byte ptr [ebp-4] 2 +
movs   +
call near ptr dword_1018D74+3  +
mov esi eax +
lea eax [ebp-20h] +
push eax  +
mov byte ptr [ebp-4] 0 +
call ebx  +
push eax  +
call sub_10033FA  +
test esi esi +
jl loc_1018E40  +
push 3  +
pop eax  +
mov [ebp-20h] ax +
mov dword ptr [ebp-18h] 2 +
mov ecx [ebp-10h] +
sub esp 10h +
mov edi esp +
lea esi [ebp-20h] +
movs   +
movs   +
movs   +
push offset aHttpSchemas__2  +
push dword ptr [ebp+8]  +
mov [ebp-4] al +
movs   +
call near ptr dword_1018D74+3  +
mov esi eax +
lea eax [ebp-20h] +
push eax  +
mov byte ptr [ebp-4] 0 +
call ebx  +
push eax  +
call sub_10033FA  +
test esi esi +
jl loc_1018E40  +
push 3  +
pop eax  +
mov [ebp-20h] ax +
mov dword ptr [ebp-18h] 78h +
mov ecx [ebp-10h] +
sub esp 10h +
mov edi esp +
lea esi [ebp-20h] +
movs   +
movs   +
movs   +
push offset aHttpSchemas__3  +
push dword ptr [ebp+8]  +
mov byte ptr [ebp-4] 4 +
movs   +
call near ptr dword_1018D74+3  +
mov esi eax +
lea eax [ebp-20h] +
push eax  +
mov byte ptr [ebp-4] 0 +
call ebx  +
push eax  +
call sub_10033FA  +
test esi esi +
jl loc_1018E40  +
mov eax [ebp+8] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+38h]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
mov edi eax +
call sub_10015AA  +
mov eax edi +
call sub_100165F  +
retn 4  +
***
call sub_1001448  +
and dword ptr [ebp-10h] 0 +
push ecx  +
mov ecx [ebp+8] +
call sub_1008E84  +
push dword ptr [ebp+0Ch]  +
mov ecx [ebp+8] +
and dword ptr [ebp-4] 0 +
mov dword ptr [ebp-10h] 1 +
call sub_100921E  +
mov eax [ebp+8] +
call sub_100165F  +
retn 8  +
***
push 8  +
mov eax offset byte_101E9B1 +
call sub_1001448  +
mov [ebp-14h] ecx +
lea esi [ecx+18h] +
mov ecx esi +
xor ebx ebx +
call sub_1001B0E  +
mov edi 208h +
test eax eax +
jbe loc_101925A  +
push edi  +
call sub_1001502  +
pop ecx  +
mov [ebp-10h] eax +
mov eax [esi] +
and [ebp-4] ebx +
test eax eax +
jz loc_1019213  +
mov eax [eax] +
jmp loc_1019215  +
xor eax eax +
push eax  +
push 104h  +
push dword ptr [ebp-10h]  +
call sub_100A10F  +
mov ebx eax +
test ebx ebx +
jge loc_1019231  +
push dword ptr [ebp-10h]  +
jmp loc_10192BB  +
lea eax [ebp-10h] +
push eax  +
call sub_10157E1  +
push dword ptr [ebp-10h]  +
mov ecx esi +
call sub_1004635  +
push dword ptr [ebp+8]  +
push esi  +
call sub_1009502  +
push dword ptr [ebp-10h]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
call sub_10014D2  +
pop ecx  +
mov esi [ebp-14h] +
add esi 1Ch +
mov ecx esi +
call sub_1001B0E  +
test eax eax +
jbe loc_10192C1  +
push edi  +
call sub_1001502  +
pop ecx  +
mov [ebp-14h] eax +
mov eax [esi] +
mov dword ptr [ebp-4] 1 +
test eax eax +
jz loc_1019286  +
mov eax [eax] +
jmp loc_1019288  +
xor eax eax +
push eax  +
push 104h  +
push dword ptr [ebp-14h]  +
call sub_100A10F  +
mov ebx eax +
test ebx ebx +
jl loc_10192B8  +
lea eax [ebp-14h] +
push eax  +
call sub_10157E1  +
push dword ptr [ebp-14h]  +
mov ecx esi +
call sub_1004635  +
push dword ptr [ebp+8]  +
push esi  +
call sub_1009502  +
push dword ptr [ebp-14h]  +
call sub_10014D2  +
pop ecx  +
mov eax ebx +
call sub_100165F  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
test eax eax +
jz loc_10192E3  +
mov eax [eax] +
jmp loc_10192E5  +
xor eax eax +
push [ebp+nSize]  +
push [ebp+lpDst]  +
push eax  +
call ds:ExpandEnvironmentStringsW  +
test eax eax +
jnz loc_101930C  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_1019324  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1019324  +
cmp eax [ebp+nSize] +
jbe loc_1019318  +
mov eax 80070057h +
jmp loc_1019324  +
push [ebp+lpDst]  +
mov ecx esi +
call sub_1004635  +
xor eax eax +
pop esi  +
pop ebp  +
retn 0Ch  +
***
call sub_100431E  +
mov eax [ebp+8] +
mov [ebp-22Ch] eax +
mov eax [ebp+0Ch] +
xor ebx ebx +
mov esi ecx +
mov [ebp-230h] eax +
mov [ebp-220h] ebx +
lea eax [ebp-220h] +
push eax  +
push offset stru_10195CC  +
push 1  +
push ebx  +
push offset rclsid  +
mov [ebp-4] ebx +
call ds:CoCreateInstance  +
mov edi eax +
cmp edi ebx +
jl loc_10195B4  +
lea edi [esi+18h] +
mov eax [edi] +
mov [ebp-228h] edi +
cmp eax ebx +
jz loc_1019393  +
mov eax [eax] +
jmp loc_1019395  +
xor eax eax +
push 5Ch  +
push eax  +
call ds:wcsrchr  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_101945A  +
add esi 20h +
mov ecx esi +
call sub_1001B0E  +
test eax eax +
jz loc_101945A  +
mov eax [esi] +
cmp eax ebx +
jz loc_10193C4  +
mov eax [eax] +
jmp loc_10193C6  +
xor eax eax +
push eax  +
mov esi 105h +
push esi  +
lea eax [ebp-21Ch] +
push eax  +
call sub_100A10F  +
mov edi eax +
cmp edi ebx +
jge loc_10193F8  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-220h] +
call sub_10015AA  +
mov eax edi +
call sub_1009AF4  +
retn 8  +
lea eax [ebp-21Ch] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_1019401  +
sub eax edx +
sar eax 1 +
cmp word ptr [ebp+eax*2-21Ch] 5Ch +
jz loc_1019432  +
push offset dword_1003410  +
push esi  +
lea eax [ebp-21Ch] +
push eax  +
call sub_10088C2  +
mov edi eax +
cmp edi ebx +
jl loc_10193DF  +
mov eax [ebp-228h] +
mov eax [eax] +
cmp eax ebx +
jz loc_1019442  +
mov eax [eax] +
jmp loc_1019444  +
xor eax eax +
push eax  +
push esi  +
lea eax [ebp-21Ch] +
push eax  +
call sub_10088C2  +
cmp eax ebx +
jge loc_1019494  +
mov esi eax +
jmp loc_101947E  +
mov eax [edi] +
cmp eax ebx +
jz loc_1019464  +
mov eax [eax] +
jmp loc_1019466  +
xor eax eax +
push eax  +
push 105h  +
lea eax [ebp-21Ch] +
push eax  +
call sub_100A10F  +
mov esi eax +
cmp esi ebx +
jge loc_1019494  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-220h] +
call sub_10015AA  +
mov eax esi +
jmp loc_10193F0  +
mov [ebp-224h] ebx +
mov eax [ebp-220h] +
mov ecx [eax] +
lea edx [ebp-224h] +
push edx  +
push offset dword_10195BC  +
push eax  +
mov byte ptr [ebp-4] 1 +
call dword ptr [ecx]  +
mov edi eax +
cmp edi ebx +
jl loc_10195A6  +
mov eax [ebp-224h] +
mov ecx [eax] +
push ebx  +
lea edx [ebp-21Ch] +
push edx  +
push eax  +
call dword ptr [ecx+14h]  +
mov edi eax +
cmp edi ebx +
jl loc_10195A6  +
mov eax [ebp-220h] +
mov ecx [eax] +
push ebx  +
push ebx  +
push 104h  +
lea edx [ebp-21Ch] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov edi eax +
cmp edi ebx +
jl loc_10195A6  +
lea eax [ebp-21Ch] +
push eax  +
call ds:lstrlenW  +
test eax eax +
jle loc_10195A1  +
mov esi [ebp-228h] +
lea eax [ebp-21Ch] +
push eax  +
mov ecx esi +
call sub_1004635  +
mov eax [esi] +
cmp eax ebx +
jz loc_1019534  +
mov eax [eax] +
jmp loc_1019536  +
xor eax eax +
push 2Eh  +
push eax  +
call ds:wcsrchr  +
pop ecx  +
pop ecx  +
mov ecx [ebp-22Ch] +
mov [ecx] eax +
cmp eax ebx +
jz loc_101958B  +
mov ecx eax +
lea esi [ecx+2] +
mov dx [ecx] +
inc ecx  +
inc ecx  +
cmp dx bx +
jnz loc_1019552  +
sub ecx esi +
sar ecx 1 +
cmp ecx 1 +
jz loc_101958B  +
mov ecx [ebp-22Ch] +
add eax 2 +
mov [ecx] eax +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_1019573  +
mov ecx [ebp-230h] +
sub eax edx +
sar eax 1 +
mov [ecx] eax +
jmp loc_10195A6  +
lea ecx [ebp-224h] +
mov [ebp-4] bl +
call sub_10015AA  +
xor esi esi +
inc esi  +
jmp loc_101947E  +
mov edi 8000FFFFh +
lea ecx [ebp-224h] +
mov [ebp-4] bl +
call sub_10015AA  +
mov esi edi +
jmp loc_101947E  +
***
call sub_1001448  +
mov [ebp-10h] ecx +
mov edi [ebp+10h] +
mov esi [ebp+8] +
xor eax eax +
xor edx edx +
mov [edi] ax +
cmp [esi] ax +
jz loc_101964B  +
xor ebx ebx +
mov eax ebx +
sar eax 1 +
cmp eax [ebp+0Ch] +
ja loc_101964B  +
test edx edx +
jnz loc_1019637  +
movzx eax word ptr [esi] +
push 20h  +
pop ecx  +
cmp cx ax +
jz loc_101964B  +
push 22h  +
pop ecx  +
cmp cx ax +
jnz loc_1019641  +
inc edx  +
jmp loc_1019641  +
push 22h  +
pop eax  +
cmp ax [esi] +
jnz loc_1019641  +
xor edx edx +
inc esi  +
inc esi  +
inc ebx  +
inc ebx  +
cmp word ptr [esi] 0 +
jnz loc_1019614  +
xor eax eax +
cmp [esi] ax +
jz loc_10197D1  +
xor ecx ecx +
mov [esi] cx +
push 2  +
pop ecx  +
add esi ecx +
and [ebp+8] eax +
jmp loc_101968F  +
push 25h  +
pop ebx  +
cmp bx dx +
jz loc_1019697  +
mov ebx [ebp+14h] +
dec ebx  +
cmp eax ebx +
jnb loc_1019697  +
push 22h  +
pop ebx  +
mov [edi+eax*2] dx +
cmp bx dx +
jnz loc_101968C  +
xor edx edx +
cmp [ebp+8] edx +
setz dl  +
mov [ebp+8] edx +
add esi ecx +
inc eax  +
movzx edx word ptr [esi] +
test dx dx +
jnz loc_1019665  +
xor edx edx +
mov [edi+eax*2] dx +
dec eax  +
js loc_10196D6  +
push 20h  +
pop edx  +
cmp dx [edi+eax*2] +
jnz loc_10196B2  +
xor edx edx +
mov [edi+eax*2] dx +
dec eax  +
jns loc_10196A0  +
test eax eax +
jl loc_10196D6  +
push 22h  +
pop edx  +
cmp dx [edi+eax*2] +
jnz loc_10196D6  +
cmp dword ptr [ebp+8] 0 +
jnz loc_10196D0  +
jmp loc_10196D6  +
push 20h  +
pop edx  +
cmp dx [edi+eax*2] +
jnz loc_10196D9  +
xor edx edx +
mov [edi+eax*2] dx +
dec eax  +
jns loc_10196C7  +
push 25h  +
pop eax  +
cmp ax [esi] +
jnz loc_10197D1  +
add esi ecx +
cmp word ptr [esi] 0 +
jz loc_10197D1  +
add esi ecx +
movzx eax word ptr [esi] +
test ax ax +
jz loc_10197D1  +
cmp dword ptr [ebp+8] 0 +
jz loc_1019733  +
push 20h  +
pop edx  +
cmp dx ax +
jnz loc_1019717  +
add esi ecx +
movzx eax word ptr [esi] +
test ax ax +
jnz loc_1019705  +
push 22h  +
pop eax  +
cmp ax [esi] +
jz loc_1019729  +
jmp loc_101972B  +
push 20h  +
pop edx  +
cmp dx ax +
jnz loc_1019733  +
add esi ecx +
movzx eax word ptr [esi] +
test ax ax +
jnz loc_1019721  +
mov edi [ebp-10h] +
add edi 1Ch +
mov ecx edi +
call sub_1001B0E  +
test eax eax +
jz loc_10197C9  +
push offset dword_10041C0  +
lea ecx [ebp+14h] +
call sub_100997E  +
mov ebx eax +
and dword ptr [ebp-4] 0 +
push esi  +
lea ecx [ebp+0Ch] +
call sub_100997E  +
push ebx  +
lea ecx [ebp+10h] +
push ecx  +
mov ecx eax +
mov byte ptr [ebp-4] 1 +
call sub_1019199  +
push edi  +
lea ecx [ebp+8] +
push ecx  +
mov ecx eax +
mov byte ptr [ebp-4] 2 +
call sub_1019199  +
push eax  +
mov ecx edi +
call sub_10060E1  +
mov ecx [ebp+8] +
xor esi esi +
cmp ecx esi +
jz loc_101979D  +
call sub_1001A04  +
mov [ebp+8] esi +
mov ecx [ebp+10h] +
cmp ecx esi +
jz loc_10197AC  +
call sub_1001A04  +
mov [ebp+10h] esi +
mov ecx [ebp+0Ch] +
cmp ecx esi +
jz loc_10197BB  +
call sub_1001A04  +
mov [ebp+0Ch] esi +
mov ecx [ebp+14h] +
cmp ecx esi +
jz loc_10197D1  +
call sub_1001A04  +
jmp loc_10197D1  +
push esi  +
mov ecx edi +
call sub_1004635  +
xor eax eax +
call sub_100165F  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 420h +
mov eax dword_10220C8 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
xor eax eax +
mov edi 208h +
push edi  +
push eax  +
mov word ptr [ebp+var_210] ax +
lea eax [ebp+var_210+2] +
push eax  +
mov ebx ecx +
call memset  +
xor eax eax +
push edi  +
push eax  +
mov word ptr [ebp+var_41C] ax +
lea eax [ebp+var_41C+2] +
mov esi 105h +
push eax  +
mov [ebp+var_420] esi +
call memset  +
mov eax [ebx+18h] +
add esp 18h +
test eax eax +
jz loc_1019846  +
mov eax [eax] +
jmp loc_1019848  +
xor eax eax +
lea ecx [ebp+var_420] +
push ecx  +
lea ecx [ebp+var_210] +
push ecx  +
push offset aOpen  +
push eax  +
push 1  +
push 400h  +
call AssocQueryStringW  +
mov edi eax +
test edi edi +
jl loc_10198A7  +
push esi  +
lea eax [ebp+var_41C] +
push eax  +
push esi  +
lea eax [ebp+var_210] +
push eax  +
mov ecx ebx +
mov [ebp+var_420] esi +
call sub_10195F1  +
mov edi eax +
test edi edi +
jl loc_10198A7  +
lea eax [ebp+var_41C] +
push eax  +
lea eax [ebp+var_210] +
push eax  +
mov ecx ebx +
call sub_1008737  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001FD0  +
leave   +
retn   +
***
push 8  +
mov eax offset byte_101E9B1 +
call sub_1001448  +
mov esi ecx +
lea edi [esi+1Ch] +
mov ecx edi +
xor ebx ebx +
call sub_1001B0E  +
test eax eax +
jbe loc_1019944  +
push 208h  +
call sub_1001502  +
pop ecx  +
mov [ebp-10h] eax +
mov eax [edi] +
and [ebp-4] ebx +
test eax eax +
jz loc_1019900  +
mov eax [eax] +
jmp loc_1019902  +
xor eax eax +
push eax  +
push 104h  +
push dword ptr [ebp-10h]  +
call sub_100A10F  +
mov ebx eax +
test ebx ebx +
jge loc_1019924  +
push dword ptr [ebp-10h]  +
call sub_10014D2  +
pop ecx  +
jmp loc_1019A01  +
lea eax [ebp-10h] +
push eax  +
call sub_10157E1  +
push dword ptr [ebp-10h]  +
mov ecx edi +
call sub_1004635  +
push dword ptr [ebp-10h]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
call sub_10014D2  +
pop ecx  +
lea edi [esi+34h] +
mov ecx edi +
mov [ebp-10h] edi +
call sub_1001B0E  +
test eax eax +
jbe loc_10199AF  +
push 208h  +
call sub_1001502  +
pop ecx  +
mov [ebp-14h] eax +
mov eax [edi] +
mov dword ptr [ebp-4] 1 +
test eax eax +
jz loc_1019974  +
mov eax [eax] +
jmp loc_1019976  +
xor eax eax +
push eax  +
push 104h  +
push dword ptr [ebp-14h]  +
call sub_100A10F  +
mov ebx eax +
test ebx ebx +
jge loc_101998F  +
push dword ptr [ebp-14h]  +
jmp loc_1019919  +
***
lea eax [ebp-14h] +
push eax  +
call sub_10157E1  +
push dword ptr [ebp-14h]  +
mov ecx edi +
call sub_1004635  +
push dword ptr [ebp-14h]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
call sub_10014D2  +
pop ecx  +
mov edi [ebp+8] +
push edi  +
lea eax [esi+18h] +
push eax  +
call sub_1009502  +
push edi  +
lea eax [esi+1Ch] +
push eax  +
call sub_1009502  +
push edi  +
lea eax [esi+20h] +
push eax  +
call sub_1009502  +
push edi  +
lea eax [esi+24h] +
push eax  +
call sub_1009502  +
push edi  +
lea eax [esi+28h] +
push eax  +
call sub_1009502  +
push edi  +
lea eax [esi+2Ch] +
push eax  +
call sub_1009502  +
push edi  +
add esi 30h +
push esi  +
call sub_1009502  +
push edi  +
push dword ptr [ebp-10h]  +
call sub_1009502  +
mov eax ebx +
call sub_100165F  +
retn 4  +
***
call sub_1001448  +
mov ebx ecx +
mov [ebp-20h] ebx +
lea ecx [ebx+1Ch] +
xor esi esi +
call sub_1001B0E  +
mov edi [ebp+8] +
test eax eax +
jz loc_1019A50  +
mov eax [ebx+1Ch] +
test eax eax +
jz loc_1019A3D  +
mov eax [eax] +
jmp loc_1019A3F  +
xor eax eax +
mov ecx [edi] +
push eax  +
push edi  +
call dword ptr [ecx+78h]  +
mov esi eax +
test esi esi +
jl loc_1019C35  +
lea ecx [ebx+20h] +
call sub_1001B0E  +
test eax eax +
jz loc_1019A7D  +
mov eax [ebx+20h] +
test eax eax +
jz loc_1019A67  +
mov eax [eax] +
jmp loc_1019A69  +
xor eax eax +
mov ecx [edi] +
push eax  +
push edi  +
call dword ptr [ecx+80h]  +
mov esi eax +
test esi esi +
jl loc_1019C35  +
lea ecx [ebx+34h] +
call sub_1001B0E  +
test eax eax +
jz loc_1019AAA  +
mov eax [ebx+34h] +
test eax eax +
jz loc_1019A94  +
mov eax [eax] +
jmp loc_1019A96  +
xor eax eax +
mov ecx [edi] +
push eax  +
push edi  +
call dword ptr [ecx+88h]  +
mov esi eax +
test esi esi +
jl loc_1019C35  +
lea ecx [ebx+2Ch] +
call sub_1001B0E  +
test eax eax +
jz loc_1019AD4  +
mov eax [ebx+2Ch] +
test eax eax +
jz loc_1019AC1  +
mov eax [eax] +
jmp loc_1019AC3  +
xor eax eax +
mov ecx [edi] +
push eax  +
push edi  +
call dword ptr [ecx+64h]  +
mov esi eax +
test esi esi +
jl loc_1019C35  +
lea ecx [ebx+30h] +
call sub_1001B0E  +
test eax eax +
jz loc_1019AFE  +
mov eax [ebx+30h] +
test eax eax +
jz loc_1019AEB  +
mov eax [eax] +
jmp loc_1019AED  +
xor eax eax +
mov ecx [edi] +
push eax  +
push edi  +
call dword ptr [ecx+38h]  +
mov esi eax +
test esi esi +
jl loc_1019C35  +
lea ecx [ebx+24h] +
call sub_1001B0E  +
test eax eax +
jz loc_1019B28  +
mov eax [ebx+24h] +
test eax eax +
jz loc_1019B15  +
mov eax [eax] +
jmp loc_1019B17  +
xor eax eax +
mov ecx [edi] +
push eax  +
push edi  +
call dword ptr [ecx+28h]  +
mov esi eax +
test esi esi +
jl loc_1019C35  +
lea ecx [ebx+28h] +
call sub_1001B0E  +
test eax eax +
jz loc_1019B52  +
mov eax [ebx+28h] +
test eax eax +
jz loc_1019B3F  +
mov eax [eax] +
jmp loc_1019B41  +
xor eax eax +
mov ecx [edi] +
push eax  +
push edi  +
call dword ptr [ecx+20h]  +
mov esi eax +
test esi esi +
jl loc_1019C35  +
lea ecx [ebx+38h] +
call sub_101B867  +
test eax eax +
jz loc_1019BE5  +
and dword ptr [ebp+8] 0 +
lea ecx [ebx+38h] +
call sub_101B867  +
test eax eax +
jbe loc_1019BE5  +
mov ecx [ebp+8] +
mov eax [ebx+3Ch] +
shl ecx 2 +
add eax ecx +
mov eax [eax] +
test eax eax +
jz loc_1019B87  +
mov eax [eax] +
jmp loc_1019B89  +
xor eax eax +
push eax  +
call PathFileExistsW  +
test eax eax +
jz loc_1019BD5  +
xor edx edx +
mov [ebp-18h] edx +
mov ecx [ebp+8] +
mov eax [ebx+3Ch] +
shl ecx 2 +
add eax ecx +
mov eax [eax] +
mov [ebp-4] edx +
cmp eax edx +
jz loc_1019BB1  +
mov eax [eax] +
jmp loc_1019BB3  +
xor eax eax +
mov ecx [edi] +
lea esi [ebp-18h] +
push esi  +
push edx  +
push edx  +
push eax  +
push edi  +
call dword ptr [ecx+0D8h]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-18h] +
mov esi eax +
call sub_10015AA  +
test esi esi +
jl loc_1019C35  +
inc dword ptr [ebp+8]  +
lea ecx [ebx+38h] +
call sub_101B867  +
cmp [ebp+8] eax +
jb loc_1019B72  +
lea ecx [ebx+48h] +
call sub_101B867  +
test eax eax +
jz loc_1019C35  +
and dword ptr [ebp+8] 0 +
mov eax [edi] +
lea ecx [ebp+8] +
push ecx  +
push edi  +
mov dword ptr [ebp-4] 1 +
call dword ptr [eax+0C8h]  +
mov esi eax +
test esi esi +
jl loc_1019C29  +
xor edi edi +
lea ecx [ebx+48h] +
mov [ebp-18h] edi +
call sub_101B867  +
test eax eax +
ja loc_1019C45  +
mov eax [ebp+8] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+38h]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_10015AA  +
mov eax esi +
call sub_100165F  +
retn 4  +
mov edi [ebp-18h] +
mov ebx [ebp-20h] +
and dword ptr [ebp-14h] 0 +
lea ecx [ebx+58h] +
mov byte ptr [ebp-4] 2 +
call sub_101B867  +
cmp edi eax +
jnb loc_1019C68  +
mov eax [ebx+5Ch] +
lea eax [eax+edi*4] +
push eax  +
lea ecx [ebp-14h] +
call sub_10060E1  +
mov eax [ebx+4Ch] +
lea eax [eax+edi*4] +
push eax  +
push offset aUrnSchemasMail  +
lea eax [ebp-10h] +
push eax  +
call sub_10091D9  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 3 +
call near ptr dword_1018B54+3  +
mov edx [ebp-10h] +
mov ecx [ebp+8] +
mov byte ptr [ebp-4] 4 +
mov [ebp-24h] ecx +
test edx edx +
jz loc_1019CA5  +
mov edx [edx] +
mov [ebp-1Ch] edx +
jmp loc_1019CA9  +
and dword ptr [ebp-1Ch] 0 +
mov ebx [ecx] +
sub esp 10h +
mov edi esp +
mov esi eax +
movs   +
movs   +
movs   +
push 40h  +
lea ecx [ebp-14h] +
add ebx 34h +
movs   +
call sub_1001B0E  +
add eax eax +
push eax  +
push 8  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp-24h]  +
call dword ptr [ebx]  +
mov esi eax +
lea eax [ebp-34h] +
push eax  +
mov byte ptr [ebp-4] 3 +
call ds:VariantClear  +
push eax  +
call sub_10033FA  +
mov ecx [ebp-10h] +
test esi esi +
jl loc_1019D26  +
test ecx ecx +
jz loc_1019CFA  +
call sub_1001A04  +
and dword ptr [ebp-10h] 0 +
mov ecx [ebp-14h] +
mov byte ptr [ebp-4] 1 +
test ecx ecx +
jz loc_1019D0A  +
call sub_1001A04  +
mov ecx [ebp-20h] +
inc dword ptr [ebp-18h]  +
add ecx 48h +
call sub_101B867  +
cmp [ebp-18h] eax +
jnb loc_1019C20  +
jmp loc_1019C3F  +
test ecx ecx +
jz loc_1019D33  +
call sub_1001A04  +
and dword ptr [ebp-10h] 0 +
mov ecx [ebp-14h] +
test ecx ecx +
jz loc_1019C29  +
call sub_1001A04  +
jmp loc_1019C29  +
***
call sub_1001448  +
mov edi ecx +
mov [ebp-18h] edi +
xor ebx ebx +
push ebx  +
push ebx  +
call ds:CoInitializeEx  +
mov esi eax +
cmp esi ebx +
jl loc_1019E59  +
mov [ebp-10h] ebx +
mov [ebp-4] ebx +
mov [ebp-14h] ebx +
mov edi ds:CoCreateInstance +
lea eax [ebp-10h] +
push eax  +
push offset dword_1019E6C  +
push 1  +
push ebx  +
push offset dword_1019E8C  +
mov byte ptr [ebp-4] 1 +
call edi  +
mov esi eax +
cmp esi ebx +
jl loc_1019E39  +
lea eax [ebp-14h] +
push eax  +
push offset dword_1019E7C  +
push 1  +
push ebx  +
push offset dword_1019E9C  +
call edi  +
mov esi eax +
cmp esi ebx +
jl loc_1019E39  +
mov edi [ebp-18h] +
push dword ptr [ebp-10h]  +
mov ecx edi +
call sub_1019A10  +
mov esi eax +
cmp esi ebx +
jl loc_1019E39  +
push dword ptr [ebp-14h]  +
mov ecx edi +
call sub_1018E00  +
mov esi eax +
cmp esi ebx +
jl loc_1019E39  +
mov eax [ebp-10h] +
push dword ptr [ebp-14h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0A8h]  +
mov esi eax +
cmp esi ebx +
jl loc_1019E39  +
cmp [edi+6Ch] bl +
jz loc_1019E2B  +
mov esi 41306h +
jmp loc_1019E39  +
mov eax [ebp-10h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0F4h]  +
mov esi eax +
call ds:CoUninitialize  +
lea ecx [ebp-14h] +
mov [ebp-4] bl +
call sub_10015AA  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_10015AA  +
mov edi [ebp-18h] +
cmp esi ebx +
setnl al  +
mov [edi+4] esi +
mov [edi+14h] al +
call sub_100165F  +
retn   +
***
push offset aDW7rtmAdminW_5  +
push 684h  +
push offset aEmailtaskSendm  +
push eax  +
push offset dword_101124C  +
push offset aCatch_knownSHr  +
mov [ebp-14h] eax +
call sub_101C9A8  +
add esp 18h +
mov eax offset loc_1019F0B +
retn   +
***
cmp dword ptr [ebp-14h] 0 +
jge loc_1019F24  +
mov eax [ebp+8] +
mov ecx [ebp-14h] +
mov [eax+4] ecx +
mov byte ptr [eax+14h] 0 +
call ds:CoUninitialize  +
xor eax eax +
call sub_100165F  +
retn 4  +
***
push offset aDW7rtmAdminW_5  +
push 684h  +
mov eax 8007000Eh +
push offset aEmailtaskSendm  +
push eax  +
push offset dword_10111E8  +
push offset aCatch_knownSHr  +
mov [ebp-14h] eax +
call sub_101C9A8  +
add esp 18h +
mov eax offset loc_1019F5E +
retn   +
***
jmp loc_1019F11  +
***
push offset aDW7rtmAdminW_5  +
push 684h  +
mov eax 80070057h +
push offset aEmailtaskSendm  +
push eax  +
push offset aStdInvalid_arg  +
push offset aCatch_knownSHr  +
mov [ebp-14h] eax +
call sub_101C9A8  +
add esp 18h +
mov eax offset loc_1019F90 +
retn   +
***
jmp loc_1019F11  +
***
push offset aDW7rtmAdminW_5  +
push 684h  +
mov eax 80070057h +
push offset aEmailtaskSendm  +
push eax  +
push offset aStdLength_erro  +
push offset aCatch_knownSHr  +
mov [ebp-14h] eax +
call sub_101C9A8  +
add esp 18h +
mov eax offset loc_1019FC5 +
retn   +
***
jmp loc_1019F11  +
***
push offset aDW7rtmAdminW_5  +
push 684h  +
mov eax 80070057h +
push offset aEmailtaskSendm  +
push eax  +
push offset aStdOut_of_rang  +
push offset aCatch_knownSHr  +
mov [ebp-14h] eax +
call sub_101C9A8  +
add esp 18h +
mov eax offset loc_1019FFA +
retn   +
***
jmp loc_1019F11  +
***
push offset aDW7rtmAdminW_5  +
push 684h  +
mov eax 80004005h +
push offset aEmailtaskSendm  +
push eax  +
push offset dword_1011198  +
push offset aCatch_knownSHr  +
mov [ebp-14h] eax +
call sub_101C9A8  +
add esp 18h +
mov eax offset loc_101A02F +
retn   +
***
jmp loc_1019F11  +
***
mov eax [ebp-1Ch] +
mov eax [eax+4] +
push offset aDW7rtmAdminW_5  +
push 684h  +
push offset aEmailtaskSendm  +
push eax  +
push offset a_com_error  +
push offset aCatch_knownSHr  +
mov [ebp-14h] eax +
call sub_101C9A8  +
add esp 18h +
mov eax offset loc_1019F0B +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
jmp loc_101A0D4  +
push [ebp+arg_0]  +
push [ebp+arg_8]  +
call sub_1016705  +
add [ebp+arg_8] 4 +
add [ebp+arg_0] 4 +
mov eax [ebp+arg_0] +
cmp eax [ebp+arg_4] +
jnz loc_101A0C1  +
mov eax [ebp+arg_8] +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0  +
lea esi [ecx+68h] +
push esi  +
push dword ptr [ebp+10h]  +
push ecx  +
push offset byte_1019EB1  +
call sub_101A32F  +
mov ecx [esi] +
mov edx [ebp+8] +
mov [edx] ecx +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101A0BA  +
pop edi  +
leave   +
retn 10h  +
***
call sub_1002917  +
mov ecx [ebp-14h] +
call sub_1001448  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1004552  +
push dword ptr [ebp+10h]  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+18h] +
mov dword ptr [esi] offset off_10123D8 +
call sub_1008E84  +
push dword ptr [ebp+14h]  +
lea ecx [esi+1Ch] +
call sub_1008E84  +
push dword ptr [ebp+18h]  +
lea ecx [esi+20h] +
call sub_1008E84  +
push dword ptr [ebp+1Ch]  +
lea ecx [esi+24h] +
call sub_1008E84  +
push dword ptr [ebp+20h]  +
lea ecx [esi+28h] +
call sub_1008E84  +
push dword ptr [ebp+24h]  +
lea ecx [esi+2Ch] +
call sub_1008E84  +
push dword ptr [ebp+28h]  +
lea ecx [esi+30h] +
call sub_1008E84  +
push dword ptr [ebp+2Ch]  +
lea ecx [esi+34h] +
call sub_1008E84  +
push dword ptr [ebp+30h]  +
lea ecx [esi+38h] +
mov byte ptr [ebp-4] 8 +
call sub_101A141  +
push dword ptr [ebp+34h]  +
lea ecx [esi+48h] +
mov byte ptr [ebp-4] 9 +
call sub_101A141  +
push dword ptr [ebp+38h]  +
lea ecx [esi+58h] +
mov byte ptr [ebp-4] 0Ah +
call sub_101A141  +
and dword ptr [esi+68h] 0 +
mov byte ptr [esi+6Ch] 0 +
mov eax esi +
call sub_100165F  +
retn 34h  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+68h] +
mov dword ptr [esi] offset off_10123D8 +
test eax eax +
jz loc_101A27D  +
push eax  +
call ds:CloseHandle  +
lea ecx [esi+58h] +
call sub_1008DEB  +
lea ecx [esi+48h] +
call sub_1008DEB  +
lea ecx [esi+38h] +
call sub_1008DEB  +
lea ecx [esi+34h] +
call sub_10019E8  +
lea ecx [esi+30h] +
call sub_10019E8  +
lea ecx [esi+2Ch] +
call sub_10019E8  +
lea ecx [esi+28h] +
call sub_10019E8  +
lea ecx [esi+24h] +
call sub_10019E8  +
lea ecx [esi+20h] +
call sub_10019E8  +
lea ecx [esi+1Ch] +
call sub_10019E8  +
lea ecx [esi+18h] +
call sub_10019E8  +
mov ecx esi +
pop esi  +
jmp sub_10023A7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101A264  +
test byte ptr [ebp+8] 1 +
jz loc_101A2FC  +
push esi  +
call sub_10014DF  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp eax [ebp+arg_0] +
sbb eax eax +
and eax [ebp+arg_0] +
cmp eax 0Ah +
jb loc_101A31F  +
push 0Ah  +
pop eax  +
mov eax nPriority[eax*4] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+lpThreadId]  +
xor esi esi +
push 4  +
push [ebp+lpParameter]  +
push [ebp+lpStartAddress]  +
push esi  +
push esi  +
call ds:CreateThread  +
mov edi [ebp+arg_C] +
mov [edi] eax +
cmp eax esi +
jz loc_101A375  +
mov ecx [ebp+arg_8] +
push nPriority[ecx*4]  +
push eax  +
call ds:SetThreadPriority  +
test eax eax +
jz loc_101A375  +
push dword ptr [edi]  +
call ds:ResumeThread  +
test eax eax +
jnz loc_101A38B  +
call ds:__imp_GetLastError  +
cmp eax esi +
jle loc_101A389  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
push esi  +
mov esi [eax+4] +
push edi  +
mov edi eax +
jmp loc_101A3C1  +
push [ebp+arg_0]  +
lea ecx [esi+0Ch] +
call sub_1013A23  +
test al al +
jz loc_101A3BD  +
mov esi [esi+8] +
jmp loc_101A3C1  +
mov edi esi +
mov esi [esi] +
cmp byte ptr [esi+15h] 0 +
jz loc_101A3A9  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
call sub_101A398  +
mov [ebp+var_4] eax +
cmp eax [esi+4] +
jz loc_101A402  +
mov ecx [ebp+arg_4] +
add eax 0Ch +
push eax  +
call sub_1013A23  +
test al al +
jnz loc_101A402  +
lea eax [ebp+var_4] +
jmp loc_101A40B  +
mov eax [esi+4] +
mov [ebp+arg_4] eax +
lea eax [ebp+arg_4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 8  +
***
mov eax [ecx] +
test eax eax +
jz locret_101A435  +
push 0FFFFFFFFh  +
push eax  +
push 0  +
call ds:DeleteTimerQueueTimer  +
push 0  +
call ds:CoDisableCallCancellation  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push 1  +
push dword ptr [eax+4]  +
call ds:CoCancelCall  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
push edi  +
xor edi edi +
mov esi ecx +
push edi  +
mov [esi] edi +
mov [esi+4] edi +
call ds:CoEnableCallCancellation  +
test eax eax +
jl loc_101A4C2  +
call ds:GetCurrentThreadId  +
push 8  +
push edi  +
push 2710h  +
push esi  +
push offset loc_101A43B  +
push edi  +
push esi  +
mov [esi+4] eax +
call ds:CreateTimerQueueTimer  +
test eax eax +
jnz loc_101A4C2  +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_101A4C2  +
test byte ptr [eax+1Ch] 1 +
jz loc_101A4C2  +
call ds:__imp_GetLastError  +
push eax  +
mov eax off_10220C4 +
push offset loc_101A4C8  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1013441  +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
xchg eax ebp +
daa   +
pop ebp  +
inc edi  +
aad  26h +
retf   +
***
sbb bl dl +
aaa   +
lds esp [ebx+473CCC6Ch] +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+1Ch] +
push eax  +
lea ecx [ebp+8] +
xor edi edi +
call sub_100140F  +
mov ax [ebp+0Ch] +
mov [esi+18h] ax +
mov eax [ebp+10h] +
cmp eax edi +
jz loc_101A51F  +
cmp [eax] di +
jz loc_101A51F  +
push eax  +
add esi 14h +
push esi  +
call ds:SysReAllocString  +
test eax eax +
jnz loc_101A52B  +
mov edi 8007000Eh +
jmp loc_101A52B  +
push dword ptr [esi+14h]  +
call ds:SysFreeString  +
mov [esi+14h] edi +
push dword ptr [ebp+8]  +
call ds:LeaveCriticalSection  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
test eax eax +
jnz loc_101A554  +
mov eax 80004003h +
jmp loc_101A5B8  +
and dword ptr [eax] 0 +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+0Ch] +
push 4  +
xor edx edx +
mov edx [ebp+8] +
pop ecx  +
mov esi offset dword_101A5BC +
cmps   +
jz loc_101A59F  +
mov edi [ebp+0Ch] +
push 4  +
pop ecx  +
mov esi offset dword_10027F0 +
xor ebx ebx +
cmps   +
jz loc_101A59F  +
mov edi [ebp+0Ch] +
push 4  +
pop ecx  +
mov esi offset dword_101A5CC +
xor ebx ebx +
cmps   +
jnz loc_101A5A1  +
mov ecx edx +
neg ecx  +
lea esi [edx+4] +
sbb ecx ecx +
and ecx esi +
mov [eax] ecx +
jmp loc_101A5A1  +
mov [eax] edx +
cmp dword ptr [eax] 0 +
pop edi  +
pop esi  +
pop ebx  +
jz loc_101A5B3  +
mov eax [edx] +
push edx  +
call dword ptr [eax+4]  +
xor eax eax +
jmp loc_101A5B8  +
mov eax 80004002h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 8 +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
xor edi edi +
test esi esi +
jnz loc_101A613  +
mov edi 80070057h +
jmp loc_101A629  +
push offset aPutInInput  +
call ds:SysAllocString  +
mov [esi] eax +
test eax eax +
jnz loc_101A629  +
mov edi 8007000Eh +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push offset aConnedText  +
xor esi esi +
call ds:SysAllocString  +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
test eax eax +
jnz loc_101A674  +
mov esi 8007000Eh +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+1Ch] +
push eax  +
mov dword ptr [esi] offset off_101240C +
mov dword ptr [esi+4] offset off_10123F4 +
call ds:DeleteCriticalSection  +
mov eax [esi+14h] +
test eax eax +
jz loc_101A6C7  +
push eax  +
call ds:SysFreeString  +
and dword ptr [esi+14h] 0 +
lea ecx [esi+0Ch] +
pop esi  +
jmp sub_1001A7B  +
***
sub dword ptr [esp+4] 4 +
jmp loc_101A5E1  +
***
sub dword ptr [esp+4] 4 +
jmp loc_101A541  +
***
push 4  +
mov eax offset byte_101EC6D +
call sub_1001448  +
mov esi [ebp+8] +
push esi  +
lea ecx [ebp-10h] +
call sub_1004476  +
and dword ptr [ebp-4] 0 +
lea eax [esi+1Ch] +
push eax  +
lea ecx [ebp+8] +
call sub_100140F  +
mov edi [ebp+0Ch] +
push 64h  +
pop eax  +
push dword ptr [esi+14h]  +
mov byte ptr [ebp-4] 1 +
mov [esi+18h] ax +
mov [esi+10h] edi +
call ds:SysFreeString  +
mov ecx [esi+0Ch] +
and dword ptr [esi+14h] 0 +
mov eax [ecx] +
push edi  +
call dword ptr [eax+10h]  +
push dword ptr [ebp+8]  +
call ds:LeaveCriticalSection  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_10015AA  +
xor eax eax +
call sub_100165F  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101A699  +
test [ebp+arg_0] 1 +
jz loc_101A780  +
push esi  +
call sub_10014DF  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
lea ecx [esi+0Ch] +
mov dword ptr [esi] offset off_101240C +
mov dword ptr [esi+4] offset off_10123F4 +
mov dword ptr [esi+8] 1 +
call sub_100A565  +
and dword ptr [esi+10h] 0 +
and dword ptr [esi+14h] 0 +
xor eax eax +
mov [esi+18h] ax +
lea eax [esi+1Ch] +
push eax  +
call ds:InitializeCriticalSection  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+8] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_101A7FE  +
test esi esi +
jz loc_101A7FE  +
push 1  +
mov ecx esi +
call sub_101A766  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
sub dword ptr [esp+4] 4 +
jmp loc_101A7D7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
xor edx edx +
cmp [ebp+arg_8] edx +
push esi  +
push edi  +
jle loc_101A840  +
mov eax [ebp+arg_4] +
mov esi [ebp+arg_0] +
push 4  +
pop ecx  +
mov edi eax +
xor ebx ebx +
cmps   +
jz loc_101A849  +
inc edx  +
add eax 10h +
cmp edx [ebp+arg_8] +
jl loc_101A829  +
xor al al +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
mov al 1 +
jmp loc_101A842  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 1Eh  +
push offset dword_101A878  +
push [ebp+arg_0]  +
call sub_101A817  +
test al al +
jz loc_101A86E  +
mov al 1 +
jmp loc_101A870  +
xor al al +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
lea eax [ebp+dwProcessId] +
push eax  +
push [ebp+hWnd]  +
call ds:GetWindowThreadProcessId  +
mov eax [ebp+dwProcessId] +
mov ecx [ebp+arg_4] +
cmp eax [ecx+4] +
jnz loc_101AAB0  +
push ebx  +
push esi  +
mov esi ds:PostMessageW +
push edi  +
push 7  +
xor ebx ebx +
push ebx  +
mov edi 111h +
push edi  +
push [ebp+hWnd]  +
call esi  +
push 2  +
push ebx  +
push edi  +
push [ebp+hWnd]  +
call esi  +
push ebx  +
push ebx  +
push 10h  +
push [ebp+hWnd]  +
call esi  +
mov eax [ebp+arg_4] +
mov eax [eax] +
pop edi  +
pop esi  +
mov [eax] ebx +
pop ebx  +
xor eax eax +
inc eax  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+dwProcessId] +
lea eax [ebp+dwProcessId] +
push eax  +
push [ebp+hWnd]  +
mov byte ptr [esi+8] 1 +
call ds:GetWindowThreadProcessId  +
mov ecx [ebp+dwProcessId] +
cmp ecx [esi+4] +
jnz loc_101AB21  +
push esi  +
push offset fn  +
push eax  +
call ds:EnumThreadWindows  +
test eax eax +
jnz loc_101AAF5  +
call ds:__imp_GetLastError  +
mov eax [esi] +
cmp dword ptr [eax] 0 +
jz loc_101AB1D  +
push [ebp+hWnd]  +
call ds:IsWindow  +
test eax eax +
jz loc_101AB1D  +
push 0  +
push 0  +
push 10h  +
push [ebp+hWnd]  +
call ds:PostMessageW  +
mov eax [esi] +
and dword ptr [eax] 0 +
xor eax eax +
jmp loc_101AB24  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
lea eax [ebp+var_4] +
mov [ebp+lParam] eax +
mov eax [ebp+arg_0] +
mov [ebp+var_C] eax +
lea eax [ebp+lParam] +
push eax  +
push offset EnumFunc  +
mov [ebp+var_4] 1 +
mov [ebp+var_8] 0 +
call ds:EnumWindows  +
cmp [ebp+var_8] 0 +
jnz loc_101AB69  +
mov [ebp+var_4] 80004005h +
mov eax [ebp+var_4] +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_10] +
test edx edx +
jz loc_101ABA6  +
cmp word ptr [edx] 0 +
jnz loc_101AB8B  +
push 0Eh  +
jmp loc_101ABA8  +
mov eax edx +
push esi  +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_101AB91  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_101ABA9  +
push 0Ah  +
pop eax  +
test edx edx +
jz loc_101ABBA  +
cmp word ptr [edx] 0 +
jnz loc_101ABBF  +
mov edx offset aNull +
jmp loc_101ABBF  +
mov edx offset aNull_0 +
push 0  +
push 10h  +
push [ebp+arg_14]  +
push eax  +
push edx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 28h +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_10] +
test edx edx +
jz loc_101AC18  +
cmp word ptr [edx] 0 +
jnz loc_101ABFD  +
push 0Eh  +
jmp loc_101AC1A  +
mov eax edx +
push esi  +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_101AC03  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_101AC1B  +
push 0Ah  +
pop eax  +
test edx edx +
jz loc_101AC2C  +
cmp word ptr [edx] 0 +
jnz loc_101AC31  +
mov edx offset aNull +
jmp loc_101AC31  +
mov edx offset aNull_0 +
push 0  +
push 4  +
lea ecx [ebp+arg_14] +
push ecx  +
push eax  +
push edx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 28h +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_10] +
test edx edx +
jz loc_101AC8B  +
cmp word ptr [edx] 0 +
jnz loc_101AC70  +
push 0Eh  +
jmp loc_101AC8D  +
mov eax edx +
push esi  +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_101AC76  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_101AC8E  +
push 0Ah  +
pop eax  +
test edx edx +
jz loc_101AC9F  +
cmp word ptr [edx] 0 +
jnz loc_101ACA4  +
mov edx offset aNull +
jmp loc_101ACA4  +
mov edx offset aNull_0 +
push 0  +
push 4  +
lea ecx [ebp+arg_1C] +
push ecx  +
push 4  +
lea ecx [ebp+arg_18] +
push ecx  +
push 4  +
lea ecx [ebp+arg_14] +
push ecx  +
push eax  +
push edx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 38h +
pop ebp  +
retn 20h  +
***
add ecx 30h +
call sub_101B140  +
test eax eax +
jz loc_101ACF2  +
jle locret_101ACF4  +
and eax 0FFFFh +
or eax 80070000h +
retn   +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
jmp loc_101AD06  +
mov eax ecx +
mov ecx [eax+8] +
cmp byte ptr [ecx+4Dh] 0 +
jz loc_101AD04  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
jmp loc_101AD24  +
mov eax ecx +
mov ecx [eax] +
cmp byte ptr [ecx+4Dh] 0 +
jz loc_101AD22  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
xor edx edx +
cmp [eax+4Dh] dl +
jz loc_101AD52  +
push edx  +
push edx  +
push edx  +
push edx  +
push edx  +
call sub_1014A8A  +
add esp 14h +
pop esi  +
retn   +
mov ecx [eax+8] +
cmp [ecx+4Dh] dl +
jnz loc_101AD6B  +
push ecx  +
call sub_101AD18  +
jmp loc_101AD73  +
mov ecx [esi] +
cmp ecx [eax+8] +
jnz loc_101AD73  +
mov [esi] eax +
mov eax [eax+4] +
cmp [eax+4Dh] dl +
jz loc_101AD62  +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
cmp [ebp+arg_4] esi +
jbe loc_101AD9B  +
call ds:rand  +
mov ecx [ebp+arg_0] +
mov [esi+ecx] al +
inc esi  +
cmp esi [ebp+arg_4] +
jb loc_101AD89  +
pop esi  +
pop ebp  +
retn 8  +
***
mov ecx [ecx+0Ch] +
test ecx ecx +
jnz loc_1015F7B  +
push 80004005h  +
call sub_1016FA4  +
int 3  +
nop   +
nop   +
nop   +
nop   +
nop   +
mov eax [ecx+8] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx+8] +
push esi  +
mov esi [eax] +
mov [edx+8] esi +
mov esi [eax] +
cmp byte ptr [esi+4Dh] 0 +
jnz loc_101ADE5  +
mov [esi+4] edx +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
pop esi  +
cmp edx [ecx+4] +
jnz loc_101ADF9  +
mov [ecx+4] eax +
jmp loc_101AE07  +
mov ecx [edx+4] +
cmp edx [ecx] +
jnz loc_101AE04  +
mov [ecx] eax +
jmp loc_101AE07  +
mov [ecx+8] eax +
mov [eax] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx] +
push esi  +
mov esi [eax+8] +
mov [edx] esi +
mov esi [eax+8] +
cmp byte ptr [esi+4Dh] 0 +
jnz loc_101AE31  +
mov [esi+4] edx +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
pop esi  +
cmp edx [ecx+4] +
jnz loc_101AE45  +
mov [ecx+4] eax +
jmp loc_101AE54  +
mov ecx [edx+4] +
cmp edx [ecx+8] +
jnz loc_101AE52  +
mov [ecx+8] eax +
jmp loc_101AE54  +
mov [ecx] eax +
mov [eax+8] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
lea ecx [esi+0Ch] +
call sub_1004216  +
test [ebp+arg_0] 1 +
jz loc_101AE80  +
push esi  +
call sub_10014DF  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push 0  +
call sub_101AE63  +
pop ebp  +
retn 4  +
***
call sub_1001448  +
mov [ebp-10h] ecx +
mov edi [ebp+0Ch] +
cmp byte ptr [edi+4Dh] 0 +
jz loc_101AEEE  +
push offset aInvalidMapSetT  +
lea ecx [ebp-2Ch] +
call sub_1013225  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [ebp-54h] +
call sub_1013110  +
push offset dword_101F340  +
lea eax [ebp-54h] +
push eax  +
mov dword ptr [ebp-54h] offset off_1011150 +
call _CxxThrowException  +
lea ecx [ebp+0Ch] +
call sub_101AD35  +
mov edx [edi] +
cmp byte ptr [edx+4Dh] 0 +
jz loc_101AF03  +
mov ebx [edi+8] +
jmp loc_101AF1C  +
mov eax [edi+8] +
cmp byte ptr [eax+4Dh] 0 +
jz loc_101AF10  +
mov ebx edx +
jmp loc_101AF1C  +
mov eax [ebp+0Ch] +
lea ecx [eax+8] +
mov ebx [ecx] +
cmp eax edi +
jnz loc_101AF85  +
cmp byte ptr [ebx+4Dh] 0 +
mov esi [edi+4] +
jnz loc_101AF28  +
mov [ebx+4] esi +
mov ecx [ebp-10h] +
mov eax [ecx+4] +
cmp [eax+4] edi +
jnz loc_101AF38  +
mov [eax+4] ebx +
jmp loc_101AF43  +
cmp [esi] edi +
jnz loc_101AF40  +
mov [esi] ebx +
jmp loc_101AF43  +
mov [esi+8] ebx +
mov eax [ecx+4] +
cmp [eax] edi +
jnz loc_101AF62  +
cmp byte ptr [ebx+4Dh] 0 +
jz loc_101AF54  +
mov eax esi +
jmp loc_101AF5D  +
push ebx  +
call sub_101AD18  +
mov ecx [ebp-10h] +
mov edx [ecx+4] +
mov [edx] eax +
mov eax [ecx+4] +
cmp [eax+8] edi +
jnz loc_101AFE1  +
cmp byte ptr [ebx+4Dh] 0 +
jz loc_101AF74  +
mov eax esi +
jmp loc_101AF7D  +
push ebx  +
call sub_101ACFA  +
mov ecx [ebp-10h] +
mov edx [ecx+4] +
mov [edx+8] eax +
jmp loc_101AFE1  +
mov [edx+4] eax +
mov edx [edi] +
mov [eax] edx +
cmp eax [edi+8] +
jnz loc_101AF95  +
mov esi eax +
jmp loc_101AFAE  +
cmp byte ptr [ebx+4Dh] 0 +
mov esi [eax+4] +
jnz loc_101AFA1  +
mov [ebx+4] esi +
mov [esi] ebx +
mov edx [edi+8] +
mov [ecx] edx +
mov ecx [edi+8] +
mov [ecx+4] eax +
mov ecx [ebp-10h] +
mov ecx [ecx+4] +
cmp [ecx+4] edi +
jnz loc_101AFBE  +
mov [ecx+4] eax +
jmp loc_101AFCC  +
mov ecx [edi+4] +
cmp [ecx] edi +
jnz loc_101AFC9  +
mov [ecx] eax +
jmp loc_101AFCC  +
mov [ecx+8] eax +
mov ecx [edi+4] +
mov [eax+4] ecx +
mov cl [eax+4Ch] +
mov dl [edi+4Ch] +
mov [eax+4Ch] dl +
mov [edi+4Ch] cl +
mov ecx [ebp-10h] +
cmp byte ptr [edi+4Ch] 1 +
jz loc_101B0A5  +
jmp loc_101B0EA  +
cmp byte ptr [ebx+4Ch] 1 +
jnz loc_101B0E6  +
mov eax [esi] +
cmp ebx eax +
jnz loc_101B06C  +
mov eax [esi+8] +
cmp byte ptr [eax+4Ch] 0 +
jnz loc_101B01D  +
mov byte ptr [eax+4Ch] 1 +
push esi  +
mov byte ptr [esi+4Ch] 0 +
call sub_101ADC9  +
mov eax [esi+8] +
mov ecx [ebp-10h] +
cmp byte ptr [eax+4Dh] 0 +
jnz loc_101B0A0  +
mov edx [eax] +
cmp byte ptr [edx+4Ch] 1 +
jnz loc_101B034  +
mov edx [eax+8] +
cmp byte ptr [edx+4Ch] 1 +
jz loc_101B09C  +
mov edx [eax+8] +
cmp byte ptr [edx+4Ch] 1 +
jnz loc_101B053  +
mov edx [eax] +
mov byte ptr [edx+4Ch] 1 +
push eax  +
mov byte ptr [eax+4Ch] 0 +
call sub_101AE15  +
mov eax [esi+8] +
mov ecx [ebp-10h] +
mov dl [esi+4Ch] +
mov [eax+4Ch] dl +
mov byte ptr [esi+4Ch] 1 +
mov eax [eax+8] +
push esi  +
mov byte ptr [eax+4Ch] 1 +
call sub_101ADC9  +
jmp loc_101B0E6  +
cmp byte ptr [eax+4Ch] 0 +
jnz loc_101B085  +
mov byte ptr [eax+4Ch] 1 +
push esi  +
mov byte ptr [esi+4Ch] 0 +
call sub_101AE15  +
mov eax [esi] +
mov ecx [ebp-10h] +
cmp byte ptr [eax+4Dh] 0 +
jnz loc_101B0A0  +
mov edx [eax+8] +
cmp byte ptr [edx+4Ch] 1 +
jnz loc_101B0B2  +
mov edx [eax] +
cmp byte ptr [edx+4Ch] 1 +
jnz loc_101B0B2  +
mov byte ptr [eax+4Ch] 0 +
mov ebx esi +
mov esi [esi+4] +
mov eax [ecx+4] +
cmp ebx [eax+4] +
jz loc_101B0E6  +
jmp loc_101AFF0  +
mov edx [eax] +
cmp byte ptr [edx+4Ch] 1 +
jnz loc_101B0D0  +
mov edx [eax+8] +
mov byte ptr [edx+4Ch] 1 +
push eax  +
mov byte ptr [eax+4Ch] 0 +
call sub_101ADC9  +
mov eax [esi] +
mov ecx [ebp-10h] +
mov dl [esi+4Ch] +
mov [eax+4Ch] dl +
mov byte ptr [esi+4Ch] 1 +
mov eax [eax] +
push esi  +
mov byte ptr [eax+4Ch] 1 +
call sub_101AE15  +
mov byte ptr [ebx+4Ch] 1 +
push edi  +
call sub_101AE8C  +
push edi  +
call sub_10014DF  +
pop ecx  +
mov ecx [ebp-10h] +
mov eax [ecx+8] +
test eax eax +
jbe loc_101B105  +
dec eax  +
mov [ecx+8] eax +
mov eax [ebp+8] +
mov ecx [ebp+0Ch] +
mov [eax] ecx +
call sub_100165F  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
lea eax [esi+0Ch] +
push eax  +
mov dword ptr [esi] offset off_1012440 +
call ds:InitializeCriticalSection  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi CryptAcquireContextW +
push edi  +
mov edi 0F0000000h +
push edi  +
push 18h  +
push offset pszProvider  +
lea ebx [ecx+4] +
push 0  +
push ebx  +
mov [ebp+var_4] ecx +
call esi  +
test eax eax +
jnz loc_101B1BB  +
push edi  +
push 18h  +
push offset aMicrosoftEnh_0  +
push eax  +
push ebx  +
call esi  +
test eax eax +
jnz loc_101B1BB  +
call ds:__imp_GetLastError  +
mov esi eax +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_101B1A8  +
test byte ptr [eax+1Ch] 8 +
jz loc_101B1A8  +
push esi  +
push offset dword_1012430  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1013441  +
mov ebx [ebx] +
test ebx ebx +
jz loc_101B1B7  +
push 0  +
push ebx  +
call CryptReleaseContext  +
mov eax esi +
jmp loc_101B1CA  +
mov eax [ebp+var_4] +
add eax 8 +
push eax  +
call ds:InterlockedIncrement  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
xor ebx ebx +
push ebx  +
mov esi ecx +
push ebx  +
lea eax [esi+8] +
push eax  +
mov [ebp+var_4] ebx +
call ds:__imp_InterlockedCompareExchange  +
test eax eax +
jnz loc_101B2F2  +
push 1Fh  +
pop eax  +
jmp loc_101B45E  +
cmp [ebp+arg_0] ebx +
jnz loc_101B2FB  +
push 57h  +
jmp loc_101B2EC  +
cmp [ebp+arg_8] ebx +
jz loc_101B2F7  +
push edi  +
mov edi [ebp+lpCriticalSection] +
cmp edi ebx +
jnz loc_101B310  +
push 57h  +
pop eax  +
jmp loc_101B45D  +
lea eax [esi+0Ch] +
push eax  +
mov [ebp+lpCriticalSection] eax +
call ds:EnterCriticalSection  +
lea eax [ebp+hHash] +
push eax  +
push ebx  +
push ebx  +
push 800Ch  +
push dword ptr [esi+4]  +
call CryptCreateHash  +
test eax eax +
jnz loc_101B367  +
call ds:__imp_GetLastError  +
mov [ebp+var_4] eax +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_101B443  +
test byte ptr [eax+1Ch] 8 +
jz loc_101B443  +
push [ebp+var_4]  +
push offset dword_1012430  +
push 0Bh  +
jmp loc_101B438  +
mov esi CryptGetHashParam +
push 4  +
pop eax  +
push ebx  +
lea ecx [ebp+pdwDataLen] +
push ecx  +
lea ecx [ebp+pbData] +
push ecx  +
push eax  +
push [ebp+hHash]  +
mov [ebp+pdwDataLen] eax +
call esi  +
test eax eax +
jnz loc_101B3B8  +
call ds:__imp_GetLastError  +
mov [ebp+var_4] eax +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_101B443  +
test byte ptr [eax+1Ch] 8 +
jz loc_101B443  +
push [ebp+var_4]  +
push offset dword_1012430  +
push 0Ch  +
jmp loc_101B438  +
mov eax [edi] +
cmp eax dword ptr [ebp+pbData] +
jnb loc_101B3C8  +
mov [ebp+var_4] 57h +
jmp loc_101B443  +
push ebx  +
push [ebp+dwDataLen]  +
push [ebp+arg_0]  +
push [ebp+hHash]  +
call CryptHashData  +
test eax eax +
jnz loc_101B403  +
call ds:__imp_GetLastError  +
mov [ebp+var_4] eax +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_101B443  +
test byte ptr [eax+1Ch] 8 +
jz loc_101B443  +
push [ebp+var_4]  +
push offset dword_1012430  +
push 0Dh  +
jmp loc_101B438  +
push ebx  +
push edi  +
push [ebp+arg_8]  +
push 2  +
push [ebp+hHash]  +
call esi  +
test eax eax +
jnz loc_101B443  +
call ds:__imp_GetLastError  +
mov [ebp+var_4] eax +
mov eax off_10220C4 +
cmp eax offset off_10220C4 +
jz loc_101B443  +
test byte ptr [eax+1Ch] 8 +
jz loc_101B443  +
push [ebp+var_4]  +
push offset dword_1012430  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1013441  +
cmp [ebp+hHash] ebx +
jz loc_101B451  +
push [ebp+hHash]  +
call CryptDestroyHash  +
push [ebp+lpCriticalSection]  +
call ds:LeaveCriticalSection  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov dword ptr [esi] offset off_1012440 +
test eax eax +
jz loc_101B484  +
push 0  +
push eax  +
call CryptReleaseContext  +
add esi 0Ch +
push esi  +
call ds:DeleteCriticalSection  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101B469  +
test byte ptr [ebp+8] 1 +
jz loc_101B4AF  +
push esi  +
call sub_10014DF  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001448  +
mov esi ecx +
mov [ebp-18h] esi +
xor ebx ebx +
mov [esi] ebx +
mov edi ds:GetThreadPreferredUILanguages +
lea eax [ebp-10h] +
push eax  +
push ebx  +
lea eax [ebp-14h] +
push eax  +
push 48h  +
mov [ebp-4] ebx +
mov [ebp-14h] ebx +
mov [ebp-10h] ebx +
call edi  +
test eax eax +
jnz loc_101B50D  +
call ds:__imp_GetLastError  +
push eax  +
lea ecx [ebp-38h] +
call sub_10127D1  +
push offset dword_101F214  +
lea eax [ebp-38h] +
push eax  +
call _CxxThrowException  +
mov eax [ebp-10h] +
xor ecx ecx +
push 2  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_1001502  +
pop ecx  +
push eax  +
mov ecx esi +
call sub_100BF79  +
mov eax [esi] +
lea ecx [ebp-10h] +
push ecx  +
push eax  +
lea eax [ebp-14h] +
push eax  +
push 48h  +
call edi  +
test eax eax +
jnz loc_101B553  +
call ds:__imp_GetLastError  +
push ebx  +
mov ecx esi +
mov edi eax +
call sub_100BF79  +
push edi  +
jmp loc_101B4F7  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push 8  +
call ds:SetThreadPreferredUILanguages  +
test eax eax +
jz loc_101B4F0  +
mov eax esi +
call sub_100165F  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_101B594  +
and [ebp+var_4] 0 +
lea ecx [ebp+var_4] +
push ecx  +
push eax  +
push 8  +
call ds:SetThreadPreferredUILanguages  +
push dword ptr [esi]  +
call sub_10014D2  +
pop ecx  +
pop esi  +
leave   +
retn   +
***
mov eax edx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1008E84  +
push [ebp+arg_4]  +
lea ecx [esi+4] +
call sub_1008E84  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_1008E84  +
add edi 4 +
push edi  +
lea ecx [esi+4] +
call sub_1008E84  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
lea edx [eax+2] +
push esi  +
mov si [eax] +
inc eax  +
inc eax  +
test si si +
jnz loc_101B60D  +
push [ebp+lpCriticalSection]  +
sub eax edx +
push [ebp+arg_4]  +
sar eax 1 +
add eax eax +
push eax  +
push [ebp+arg_0]  +
add ecx 30h +
call sub_101B2C9  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_18] +
push ebx  +
push esi  +
push edi  +
test edx edx +
jz loc_101B673  +
cmp word ptr [edx] 0 +
jnz loc_101B657  +
mov [ebp+arg_18] 0Eh +
jmp loc_101B67A  +
mov eax edx +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_101B65C  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
mov [ebp+arg_18] eax +
jmp loc_101B67A  +
mov [ebp+arg_18] 0Ah +
mov ebx offset aNull_0 +
test edx edx +
jz loc_101B690  +
cmp word ptr [edx] 0 +
jnz loc_101B692  +
mov edx offset aNull +
jmp loc_101B692  +
mov edx ebx +
mov edi [ebp+arg_14] +
test edi edi +
jz loc_101B6BC  +
cmp word ptr [edi] 0 +
jnz loc_101B6A3  +
push 0Eh  +
jmp loc_101B6BE  +
mov eax edi +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_101B6A8  +
sub eax esi +
sar eax 1 +
lea ecx [eax+eax+2] +
jmp loc_101B6BF  +
push 0Ah  +
pop ecx  +
test edi edi +
jz loc_101B6D4  +
cmp word ptr [edi] 0 +
jnz loc_101B6D0  +
mov eax offset aNull +
jmp loc_101B6D6  +
mov eax edi +
jmp loc_101B6D6  +
mov eax ebx +
push 0  +
push 4  +
lea esi [ebp+arg_1C] +
push esi  +
push [ebp+arg_18]  +
push edx  +
push ecx  +
push eax  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 38h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
shr esi 1 +
jz loc_101B736  +
test [ebp+arg_8] 1000h +
jz loc_101B736  +
mov edx [ebp+arg_4] +
lea eax [edi+ecx*2] +
mov [edx] eax +
mov edx esi +
sub edx ecx +
xor ecx ecx +
mov [ebx] edx +
mov [eax] cx +
test [ebp+arg_8] 400h +
jz loc_101B77E  +
mov eax [ebp+arg_8] +
push [ebp+arg_0]  +
and eax 0FFh +
push eax  +
push edi  +
mov [ebp+var_4] eax +
call memset  +
add esp 0Ch +
cmp [ebp+var_4] 0 +
jnz loc_101B766  +
mov eax [ebp+arg_4] +
mov [eax] edi +
mov [ebx] esi +
jmp loc_101B77E  +
test esi esi +
jbe loc_101B797  +
mov ecx [ebp+arg_4] +
lea eax [edi+esi*2-2] +
mov [ecx] eax +
xor ecx ecx +
mov dword ptr [ebx] 1 +
mov [eax] cx +
test esi esi +
jbe loc_101B797  +
test [ebp+arg_8] 800h +
jz loc_101B797  +
mov eax [ebp+arg_4] +
mov [eax] edi +
xor eax eax +
mov [ebx] esi +
mov [edi] ax +
xor eax eax +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_14] +
test edx edx +
jz loc_101B7D4  +
cmp word ptr [edx] 0 +
jnz loc_101B7B9  +
push 0Eh  +
jmp loc_101B7D6  +
mov eax edx +
push esi  +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_101B7BF  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_101B7D7  +
push 0Ah  +
pop eax  +
test edx edx +
jz loc_101B7E8  +
cmp word ptr [edx] 0 +
jnz loc_101B7ED  +
mov edx offset aNull +
jmp loc_101B7ED  +
mov edx offset aNull_0 +
push 0  +
push 4  +
lea ecx [ebp+arg_18] +
push ecx  +
push eax  +
push edx  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 30h +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
mov edx [ecx+4] +
test edx edx +
jnz loc_101B871  +
xor eax eax +
retn   +
mov eax [ecx+8] +
sub eax edx +
sar eax 2 +
retn   +
***
mov edx [ecx+4] +
test edx edx +
jnz loc_101B889  +
xor eax eax +
retn   +
mov eax [ecx+0Ch] +
sub eax edx +
sar eax 2 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
jmp loc_101B8AF  +
mov ecx [eax] +
mov edx [ebp+arg_C] +
mov [edx] ecx +
add [ebp+arg_C] 4 +
add eax 4 +
cmp eax [ebp+arg_8] +
jnz loc_101B8A1  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_C] +
mov [eax] ecx +
pop ebp  +
retn   +
***
push 44h  +
mov eax offset dword_101EFE4 +
call sub_1001448  +
push offset aVectorTTooLong  +
lea ecx [ebp-28h] +
call sub_1013225  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_1013189  +
push offset dword_101F0E8  +
lea eax [ebp-50h] +
push eax  +
call _CxxThrowException  +
int 3  +
nop   +
mov eax offset CloseServiceHandle +
jmp $+2  +
push ecx  +
push edx  +
push eax  +
push offset dword_10200E4  +
call sub_1005DD1  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov eax offset OpenServiceW +
jmp loc_101B958  +
***
mov eax offset OpenSCManagerW +
jmp loc_101B958  +
***
mov eax offset QueryServiceStatus +
jmp $+2  +
push ecx  +
push edx  +
push eax  +
push offset dword_1020104  +
call sub_1005DD1  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov eax offset LookupPrivilegeValueW +
jmp loc_1007872  +
***
mov eax offset RegQueryValueW +
jmp loc_1007872  +
***
mov eax offset RegOpenKeyTransactedW +
jmp loc_1007872  +
***
mov eax offset CryptReleaseContext +
jmp loc_1007872  +
***
mov eax offset CryptAcquireContextW +
jmp loc_1007872  +
***
mov eax offset CryptDestroyHash +
jmp loc_1007872  +
***
mov eax offset CryptHashData +
jmp loc_1007872  +
***
mov eax offset CryptGetHashParam +
jmp loc_1007872  +
***
mov eax offset CryptCreateHash +
jmp loc_1007872  +
***
mov eax offset FindExecutableW +
jmp $+2  +
push ecx  +
push edx  +
push eax  +
push offset SHELL32_dll_import_table  +
call sub_1005DD1  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov eax offset AssocQueryStringW +
jmp loc_100788A  +
***
mov eax offset PathFileExistsW +
jmp loc_100788A  +
***
mov eax offset __imp_LsaDeregisterLogonProcess +
jmp loc_10078A2  +
***
mov eax offset __imp_CreateXmlWriterOutputWithEncodingName +
jmp loc_10078BA  +
***
mov eax offset __imp_CreateXmlWriter +
jmp loc_10078BA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_10220C8 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov esi offset asc_101BB90 +
lea edi [ebp+LocalName] +
movs   +
xor ecx ecx +
movs   +
xor esi esi +
xor edi edi +
mov [ebp+var_18] eax +
mov [ebp+var_14] ecx +
mov [ebp+nLength] ecx +
mov [eax] ebx +
cmp ebx ecx +
jz loc_101BB75  +
movzx eax word ptr [ebx] +
cmp ax cx +
jz loc_101BB75  +
cmp ax 22h +
jnz loc_101BABA  +
cmp [ebx+2] cx +
jz loc_101BABA  +
cmp word ptr [ebx+4] 3Ah +
jnz loc_101BABA  +
inc edi  +
jmp loc_101BAC5  +
cmp word ptr [ebx+2] 3Ah +
jnz loc_101BB75  +
mov ax [ebx+edi*2] +
mov [ebp+LocalName] ax +
lea eax [ebp+nLength] +
push eax  +
push ecx  +
lea eax [ebp+LocalName] +
push eax  +
call WNetGetConnectionW  +
mov [ebp+var_14] eax +
test eax eax +
jz loc_101BB72  +
cmp eax 8CAh +
jz loc_101BB72  +
cmp eax 0EAh +
jnz loc_101BB75  +
mov eax ebx +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_101BAFD  +
sub eax ecx +
mov ecx [ebp+nLength] +
sar eax 1 +
lea eax [ecx+eax-2] +
mov [ebp+nLength] eax +
add eax eax +
push eax  +
push 0  +
call ds:LocalAlloc  +
mov esi eax +
test esi esi +
jnz loc_101BB2F  +
mov [ebp+var_14] 8 +
jmp loc_101BB75  +
cmp edi 1 +
jnz loc_101BB3A  +
push 22h  +
pop eax  +
mov [esi] ax +
sub [ebp+nLength] edi +
lea eax [ebp+nLength] +
push eax  +
lea eax [esi+edi*2] +
push eax  +
lea eax [ebp+LocalName] +
push eax  +
call WNetGetConnectionW  +
mov [ebp+var_14] eax +
test eax eax +
jnz loc_101BB75  +
add [ebp+nLength] edi +
lea eax [ebx+edi*2+4] +
push eax  +
push [ebp+nLength]  +
push esi  +
call wcscat_s  +
mov eax [ebp+var_18] +
add esp 0Ch +
mov [eax] esi +
xor esi esi +
jmp loc_101BB75  +
and [ebp+var_14] esi +
push esi  +
call ds:LocalFree  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_14] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001FD0  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+hObj] +
mov ecx [ebp+arg_4] +
push ebx  +
xor ebx ebx +
push edi  +
xor edi edi +
mov [ebp+var_C] ebx +
mov [ebp+nLengthNeeded] ebx +
mov [ebp+nLength] ebx +
mov [ecx] eax +
cmp eax ebx +
jz loc_101BBC7  +
cmp [eax] bx +
jnz loc_101BC6F  +
push esi  +
call ds:GetProcessWindowStation  +
mov [ebp+hObj] eax +
call ds:GetCurrentThreadId  +
push eax  +
call ds:GetThreadDesktop  +
mov esi ds:GetUserObjectInformationW +
mov [ebp+var_10] eax +
lea eax [ebp+nLengthNeeded] +
push eax  +
push ebx  +
push ebx  +
push 2  +
push [ebp+hObj]  +
call esi  +
lea eax [ebp+nLength] +
push eax  +
push ebx  +
push ebx  +
push 2  +
push [ebp+var_10]  +
call esi  +
mov eax [ebp+nLengthNeeded] +
mov ecx [ebp+nLength] +
add ecx eax +
push ecx  +
push 40h  +
call ds:LocalAlloc  +
mov edi eax +
cmp edi ebx +
jnz loc_101BC21  +
mov [ebp+var_C] 8 +
jmp loc_101BC6E  +
lea eax [ebp+nLengthNeeded] +
push eax  +
push [ebp+nLengthNeeded]  +
push edi  +
push 2  +
push [ebp+hObj]  +
call esi  +
test eax eax +
jz loc_101BC5C  +
mov eax [ebp+nLengthNeeded] +
push 5Ch  +
pop ecx  +
shr eax 1 +
mov [edi+eax*2-2] cx +
lea eax [ebp+nLength] +
push eax  +
mov eax [ebp+nLengthNeeded] +
push [ebp+nLength]  +
shr eax 1 +
lea eax [edi+eax*2] +
push eax  +
push 2  +
push [ebp+var_10]  +
call esi  +
test eax eax +
jnz loc_101BC67  +
call ds:__imp_GetLastError  +
mov [ebp+var_C] eax +
jmp loc_101BC6E  +
mov eax [ebp+arg_4] +
mov [eax] edi +
xor edi edi +
pop esi  +
push edi  +
call ds:LocalFree  +
mov eax [ebp+var_C] +
pop edi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
push esi  +
xor esi esi +
push 1  +
push esi  +
push esi  +
mov [ebp+var_4] esi +
call OpenSCManagerW  +
mov [ebp+hSCObject] eax +
cmp eax esi +
jnz loc_101BCB1  +
call ds:__imp_GetLastError  +
mov ebx eax +
jmp loc_101BD45  +
push edi  +
push 14h  +
push offset ServiceName  +
push eax  +
call OpenServiceW  +
mov edi eax +
cmp edi esi +
jnz loc_101BCCE  +
call ds:__imp_GetLastError  +
jmp loc_101BD27  +
push esi  +
push esi  +
push edi  +
call StartServiceW  +
mov esi ds:__imp_GetLastError +
test eax eax +
jnz loc_101BCED  +
call esi  +
mov ebx eax +
cmp ebx 420h +
jnz loc_101BD32  +
mov ebx 5B4h +
lea eax [ebp+ServiceStatus] +
push eax  +
push edi  +
call QueryServiceStatus  +
test eax eax +
jz loc_101BD25  +
cmp [ebp+ServiceStatus.dwCurrentState] 4 +
jz loc_101BD2B  +
cmp [ebp+ServiceStatus.dwCurrentState] 1 +
jz loc_101BD2F  +
push 1F4h  +
call ds:Sleep  +
inc [ebp+var_4]  +
mov eax [ebp+var_4] +
cmp eax [ebp+arg_0] +
ja loc_101BD32  +
jmp loc_101BCF2  +
call esi  +
mov ebx eax +
jmp loc_101BD32  +
xor ebx ebx +
jmp loc_101BD32  +
mov ebx [ebp+ServiceStatus.dwWin32ExitCode] +
mov esi CloseServiceHandle +
test edi edi +
jz loc_101BD3F  +
push edi  +
call esi  +
push [ebp+hSCObject]  +
call esi  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
push esi  +
push edi  +
push 6  +
pop ecx  +
xor esi esi +
xor eax eax +
mov [ebp+SecurityQOS.Version] esi +
lea edi [ebp+SecurityQOS.Capabilities] +
stos   +
lea eax [ebp+String] +
push eax  +
push esi  +
push esi  +
push esi  +
push offset Protseq  +
push [ebp+ObjUuid]  +
mov [ebp+String] esi +
mov [ebp+Binding] esi +
xor edi edi +
call ds:RpcStringBindingComposeW  +
mov ebx eax +
cmp ebx esi +
jnz loc_101BE3C  +
lea eax [ebp+Binding] +
push eax  +
push [ebp+String]  +
call ds:RpcBindingFromStringBindingW  +
mov ebx eax +
lea eax [ebp+String] +
push eax  +
call ds:RpcStringFreeW  +
cmp ebx esi +
jnz loc_101BE3C  +
push 44h  +
pop eax  +
push eax  +
push 40h  +
mov [ebp+ObjUuid] eax +
call ds:LocalAlloc  +
mov edi eax +
cmp edi esi +
jnz loc_101BDDD  +
push 8  +
pop ebx  +
jmp loc_101BE3C  +
lea eax [ebp+ObjUuid] +
push eax  +
push edi  +
push esi  +
push 16h  +
call ds:CreateWellKnownSid  +
test eax eax +
jnz loc_101BDF9  +
call ds:__imp_GetLastError  +
mov ebx eax +
jmp loc_101BE3C  +
push 3  +
pop eax  +
mov [ebp+SecurityQOS.Version] eax +
mov [ebp+SecurityQOS.ImpersonationType] eax +
lea eax [ebp+SecurityQOS] +
push eax  +
push esi  +
xor ecx ecx +
cmp [ebp+arg_4] esi +
push esi  +
push 0Ah  +
setnz cl  +
push 6  +
push esi  +
push [ebp+Binding]  +
mov [ebp+SecurityQOS.Capabilities] 1 +
mov [ebp+var_C] edi +
mov [ebp+SecurityQOS.IdentityTracking] ecx +
call ds:RpcBindingSetAuthInfoExW  +
mov ebx eax +
cmp ebx esi +
jnz loc_101BE3C  +
mov eax [ebp+Binding] +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
mov [ebp+Binding] esi +
push edi  +
call ds:LocalFree  +
cmp [ebp+Binding] esi +
jz loc_101BE52  +
lea eax [ebp+Binding] +
push eax  +
call ds:RpcBindingFree  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+Size]  +
mov esi [ebp+pAsync] +
push esi  +
call ds:RpcAsyncInitializeHandle  +
mov ebx eax +
test ebx ebx +
jnz loc_101BEAB  +
push eax  +
push eax  +
push eax  +
push eax  +
mov dword ptr [esi+20h] 1 +
call ds:CreateEventW  +
mov [esi+24h] eax +
test eax eax +
jnz loc_101BEAB  +
call ds:__imp_GetLastError  +
mov ebx eax +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+24h] +
test eax eax +
jz loc_101BED3  +
push eax  +
call ds:CloseHandle  +
and dword ptr [esi+24h] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
xor edi edi +
inc edi  +
cmp dword ptr [esi] 0FFFFFFFFh +
jz loc_101BF0A  +
call ds:GetTickCount  +
mov edx [ebp+arg_0] +
sub eax [edx] +
mov ecx [esi] +
cmp eax ecx +
jbe loc_101BF04  +
xor edi edi +
jmp loc_101BF0A  +
sub ecx eax +
mov [esi] ecx +
add [edx] eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
xor esi esi +
push esi  +
push dword ptr [eax+24h]  +
call ds:WaitForSingleObject  +
cmp eax 102h +
jz loc_101BF39  +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
inc esi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push ebx  +
push esi  +
push edi  +
call ds:GetTickCount  +
mov edi ds:PeekMessageW +
xor ebx ebx +
xor esi esi +
mov [ebp+var_8] eax +
mov [ebp+var_C] ebx +
mov [ebp+nExitCode] ebx +
inc esi  +
mov eax [ebp+arg_0] +
push 4FFh  +
push [ebp+dwMilliseconds]  +
add eax 24h +
push ebx  +
push eax  +
push esi  +
call ds:MsgWaitForMultipleObjects  +
mov [ebp+var_4] eax +
lea eax [ebp+dwMilliseconds] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
call sub_101BEDD  +
test eax eax +
jnz loc_101BF9C  +
mov [ebp+var_4] 102h +
cmp [ebp+var_4] esi +
jnz loc_101C03D  +
push esi  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+Msg] +
push eax  +
call edi  +
test eax eax +
jz loc_101BF6A  +
cmp [ebp+Msg.message] 12h +
jz loc_101C022  +
lea eax [ebp+Msg] +
push eax  +
call ds:TranslateMessage  +
cmp [ebp+Msg.message] 20h +
jnz loc_101BFE7  +
movzx eax word ptr [ebp+Msg.lParam] +
cmp eax 0FFFFFFFEh +
jz loc_101BFE7  +
push 7F02h  +
push ebx  +
call ds:LoadCursorW  +
push eax  +
call ds:SetCursor  +
jmp loc_101BFF1  +
lea eax [ebp+Msg] +
push eax  +
call ds:DispatchMessageW  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
call sub_101BF17  +
test eax eax +
jnz loc_101C034  +
lea eax [ebp+dwMilliseconds] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
call sub_101BEDD  +
test eax eax +
jz loc_101C02D  +
push esi  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+Msg] +
push eax  +
call edi  +
test eax eax +
jz loc_101C034  +
jmp loc_101BFB3  +
mov eax [ebp+Msg.wParam] +
mov [ebp+var_C] esi +
mov [ebp+nExitCode] eax +
jmp loc_101C034  +
mov [ebp+var_4] 102h +
cmp [ebp+var_4] esi +
jz loc_101BF6A  +
cmp [ebp+var_4] 102h +
jnz loc_101C052  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
call sub_101BF17  +
cmp [ebp+var_C] ebx +
pop edi  +
pop esi  +
pop ebx  +
jz loc_101C063  +
push [ebp+nExitCode]  +
call ds:PostQuitMessage  +
mov eax [ebp+var_4] +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
xor esi esi +
mov [ebp+var_4] esi +
cmp dword_102CEF4 esi +
jnz loc_101C0AE  +
lea eax [ebp+var_4] +
push eax  +
call ds:GetCurrentProcess  +
push eax  +
call ds:IsWow64Process  +
test eax eax +
jz loc_101C0AE  +
xor eax eax +
cmp [ebp+var_4] esi +
push esi  +
setz al  +
inc eax  +
push eax  +
push offset dword_102CEF4  +
call ds:__imp_InterlockedCompareExchange  +
cmp dword_102CEF4 1 +
jnz loc_101C0D0  +
mov eax large fs:18h +
mov eax [eax+0F70h] +
xor ecx ecx +
cmp [eax+14C0h] esi +
setz cl  +
mov esi ecx +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+Reply] 0 +
push ebx  +
mov ebx ds:WaitForSingleObject +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_C] +
test edi edi +
jnz loc_101C10F  +
cmp [ebp+arg_4] 0 +
push [ebp+dwMilliseconds]  +
jz loc_101C108  +
push esi  +
call sub_101BF45  +
jmp loc_101C10D  +
push dword ptr [esi+24h]  +
call ebx  +
mov edi eax +
cmp edi 102h +
jnz loc_101C127  +
push 1  +
push esi  +
call ds:RpcAsyncCancelCall  +
push 0FFFFFFFFh  +
push dword ptr [esi+24h]  +
call ebx  +
lea eax [ebp+Reply] +
push eax  +
push esi  +
call ds:RpcAsyncCompleteCall  +
test edi edi +
jnz loc_101C13F  +
mov edi eax +
test eax eax +
jnz loc_101C13F  +
mov edi [ebp+Reply] +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
call sub_100C0FF  +
mov eax [ebp+8] +
mov [ebp-258h] eax +
mov eax [ebp+0Ch] +
mov [ebp-254h] eax +
mov eax [ebp+18h] +
mov [ebp-228h] eax +
mov eax [ebp+1Ch] +
mov [ebp-248h] eax +
mov eax [ebp+20h] +
mov [ebp-240h] eax +
mov ebx [ebp+24h] +
mov [ebp-264h] ebx +
mov eax [ebp+28h] +
mov [ebp-26Ch] eax +
xor eax eax +
mov [ebp-224h] ax +
push 206h  +
xor esi esi +
push esi  +
lea eax [ebp-222h] +
push eax  +
call memset  +
mov [ebp-244h] esi +
mov [ebp-23Ch] esi +
mov [ebp-234h] esi +
mov [ebp-230h] esi +
mov dword ptr [ebp-250h] 6 +
mov [ebp-29Ch] esi +
push 2Ch  +
push esi  +
lea eax [ebp-298h] +
push eax  +
call memset  +
mov [ebp-238h] esi +
mov [ebp-22Ch] esi +
mov [ebp-308h] esi +
push 40h  +
push esi  +
lea eax [ebp-304h] +
push eax  +
call memset  +
add esp 24h +
mov [ebp-24Ch] esi +
mov [ebp-260h] esi +
mov [ebp-25Ch] esi +
mov [ebp-2C4h] esi +
push 9  +
pop ecx  +
xor eax eax +
lea edi [ebp-2C0h] +
stos   +
mov [ebx] esi +
mov [ebx+4] esi +
cmp dword_102CEF8 esi +
jnz loc_101C28A  +
lea eax [ebp-22Ch] +
push eax  +
push esi  +
push offset ObjUuid  +
call sub_101BD65  +
mov edi eax +
cmp edi esi +
jnz loc_101C4D0  +
push esi  +
push dword ptr [ebp-22Ch]  +
push offset dword_102CEF8  +
call ds:__imp_InterlockedCompareExchange  +
test eax eax +
jz loc_101C28A  +
lea eax [ebp-22Ch] +
push eax  +
call ds:RpcBindingFree  +
mov [ebp-22Ch] esi +
mov edi [ebp-240h] +
mov eax [edi+0Ch] +
mov [ebp-29Ch] eax +
mov eax [edi+10h] +
mov [ebp-298h] eax +
mov eax [edi+14h] +
mov [ebp-294h] eax +
mov eax [edi+18h] +
mov [ebp-290h] eax +
mov eax [edi+1Ch] +
mov [ebp-28Ch] eax +
mov eax [edi+20h] +
mov [ebp-288h] eax +
mov eax [edi+24h] +
mov [ebp-284h] eax +
mov eax [edi+28h] +
mov [ebp-280h] eax +
mov eax [edi+2Ch] +
mov [ebp-27Ch] eax +
mov cx [edi+30h] +
mov [ebp-278h] cx +
test eax 400h +
jz loc_101C32B  +
mov dword ptr [ebp-2C4h] 28h +
lea eax [ebp-2C4h] +
push eax  +
push dword ptr [edi+3Ch]  +
call ds:GetMonitorInfoW  +
test eax eax +
jz loc_101C32B  +
mov eax [ebp-2C0h] +
inc eax  +
mov [ebp-274h] eax +
mov eax [ebp-2BCh] +
inc eax  +
mov [ebp-270h] eax +
cmp [ebp-228h] esi +
jnz loc_101C36D  +
lea eax [ebp-224h] +
push eax  +
push 104h  +
call ds:GetCurrentDirectoryW  +
test eax eax +
jnz loc_101C361  +
call ds:__imp_GetLastError  +
mov edi eax +
cmp edi esi +
jnz loc_101C4D0  +
mov edi [ebp-240h] +
jmp loc_101C36D  +
lea eax [ebp-224h] +
mov [ebp-228h] eax +
lea eax [ebp-230h] +
push eax  +
push dword ptr [edi+8]  +
call sub_101BB9B  +
mov edi eax +
cmp edi esi +
jnz loc_101C4D0  +
lea eax [ebp-244h] +
push eax  +
push dword ptr [ebp-258h]  +
call sub_101BA59  +
mov edi eax +
cmp edi esi +
jnz loc_101C4D0  +
lea eax [ebp-23Ch] +
push eax  +
push dword ptr [ebp-254h]  +
call sub_101BA59  +
mov edi eax +
cmp edi esi +
jnz loc_101C4D0  +
lea eax [ebp-234h] +
push eax  +
push dword ptr [ebp-228h]  +
call sub_101BA59  +
mov edi eax +
cmp edi esi +
jnz loc_101C4D0  +
call sub_101C06F  +
test eax eax +
jz loc_101C3E7  +
or dword ptr [ebp+10h] 8 +
call ds:GetCurrentProcessId  +
push eax  +
call ds:AllowSetForegroundWindow  +
test eax eax +
jz loc_101C3FC  +
or dword ptr [ebp+10h] 10h +
cmp [ebp-248h] esi +
jz loc_101C42F  +
push 2  +
push dword ptr [ebp-248h]  +
call ds:GetAncestor  +
mov [ebp-260h] eax +
cmp eax esi +
jz loc_101C42F  +
push esi  +
push eax  +
call ds:EnableWindow  +
neg eax  +
sbb eax eax +
inc eax  +
mov [ebp-25Ch] eax +
push 44h  +
lea eax [ebp-308h] +
push eax  +
call sub_101BE71  +
mov edi eax +
cmp edi esi +
jnz loc_101C4D0  +
mov [ebp-4] esi +
lea eax [ebp-250h] +
push eax  +
push ebx  +
push 0FFFFFFFFh  +
push dword ptr [ebp-248h]  +
lea eax [ebp-29Ch] +
push eax  +
push dword ptr [ebp-230h]  +
push dword ptr [ebp-234h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp-23Ch]  +
push dword ptr [ebp-244h]  +
push dword_102CEF8  +
lea eax [ebp-308h] +
push eax  +
call sub_101C661  +
mov dword ptr [ebp-24Ch] 1 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
jmp loc_101C4D0  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
mov [ebp-268h] eax +
push eax  +
call I_RpcExceptionFilter  +
retn   +
mov esp [ebp-18h] +
mov edi [ebp-268h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
xor esi esi +
mov ebx [ebp-264h] +
cmp [ebp-24Ch] esi +
jz loc_101C4F1  +
push edi  +
push 0FFFFFFFFh  +
push 1  +
lea eax [ebp-308h] +
push eax  +
call sub_101C0DA  +
mov edi eax +
mov [ebp-24Ch] esi +
lea eax [ebp-308h] +
push eax  +
call sub_101BEB8  +
mov eax [ebp-26Ch] +
cmp eax esi +
jz loc_101C50F  +
mov ecx [ebp-250h] +
mov [eax] ecx +
cmp edi esi +
jz loc_101C57D  +
mov eax [ebx] +
cmp eax esi +
jz loc_101C522  +
push eax  +
call ds:CloseHandle  +
mov [ebx] esi +
mov eax [ebx+4] +
cmp eax esi +
jz loc_101C533  +
push eax  +
call ds:CloseHandle  +
mov [ebx+4] esi +
cmp edi 6BAh +
jz loc_101C553  +
cmp edi 6ACh +
jz loc_101C553  +
cmp edi 6B5h +
jz loc_101C553  +
cmp edi 6D9h +
jnz loc_101C57D  +
cmp dword ptr [ebp-238h] 1 +
ja loc_101C578  +
inc dword ptr [ebp-238h]  +
push 0Ah  +
call sub_101BC84  +
mov edi eax +
cmp edi esi +
jnz loc_101C4D0  +
jmp loc_101C42F  +
mov edi 425h +
cmp [ebp-25Ch] esi +
jz loc_101C593  +
push 1  +
push dword ptr [ebp-260h]  +
call ds:EnableWindow  +
mov eax [ebp-230h] +
mov ecx [ebp-240h] +
mov esi ds:LocalFree +
cmp eax [ecx+8] +
jz loc_101C5AD  +
push eax  +
call esi  +
mov eax [ebp-234h] +
cmp [ebp-228h] eax +
jz loc_101C5BE  +
push eax  +
call esi  +
mov eax [ebp-23Ch] +
cmp eax [ebp-254h] +
jz loc_101C5CF  +
push eax  +
call esi  +
mov eax [ebp-244h] +
cmp eax [ebp-258h] +
jz loc_101C5E0  +
push eax  +
call esi  +
mov eax edi +
call sub_100C147  +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+arg_0] +
push eax  +
push offset pFormat  +
push offset pStubDescriptor  +
call NdrAsyncClientCall  +
add esp 0Ch +
pop ebp  +
retn 34h  +
***
mov eax offset __imp_WNetGetConnectionW +
jmp $+2  +
push ecx  +
push edx  +
push eax  +
push offset MPR_dll_import_table  +
call sub_1005DD1  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_8]  +
mov esi eax +
push [ebp+arg_4]  +
xor ebx ebx +
dec esi  +
push esi  +
push edi  +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_101C949  +
cmp eax esi +
ja loc_101C949  +
jnz loc_101C956  +
jmp loc_101C94E  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
mov eax esi +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_101C95F  +
mov [ecx] eax +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_101C981  +
cmp [ebp+arg_4] 7FFFFFFFh +
jbe loc_101C986  +
mov eax 80070057h +
test eax eax +
jl loc_101C99F  +
mov eax [ebp+arg_4] +
push edi  +
push [ebp+arg_C]  +
mov edi [ebp+arg_0] +
push [ebp+arg_8]  +
push 0  +
call sub_101C920  +
pop edi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 1004h +
call sub_100C0AC  +
mov eax dword_10220C8 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax off_10220C4 +
push esi  +
mov esi offset off_10220C4 +
cmp eax esi +
jz loc_101CA34  +
test byte ptr [eax+1Ch] 4 +
jz loc_101CA34  +
xor eax eax +
push 0FFEh  +
push eax  +
mov word ptr [ebp+var_1004] ax +
lea eax [ebp+var_1004+2] +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+arg_4] +
push eax  +
push [ebp+arg_0]  +
lea eax [ebp+var_1004] +
push 800h  +
push eax  +
call sub_101C96C  +
mov eax off_10220C4 +
cmp eax esi +
jz loc_101CA34  +
test byte ptr [eax+1Ch] 4 +
jz loc_101CA34  +
lea ecx [ebp+var_1004] +
push ecx  +
push offset dword_10125C8  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101332E  +
mov ecx [ebp+var_4] +
xor ecx ebp +
xor eax eax +
pop esi  +
call sub_1001FD0  +
leave   +
retn   +
***
call sub_1001954  +
and dword ptr [ebp-4] 0 +
call ds:DebugBreak  +
jmp loc_101CA67  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
or eax 0FFFFFFFFh +
call sub_1001BBC  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 0  +
push dword ptr [ecx+4]  +
call ds:HeapAlloc  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
jz loc_101CAD9  +
push dword ptr [ebp+8]  +
push 0  +
push dword ptr [ecx+4]  +
call ds:HeapFree  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+8] eax +
jnz loc_101CAF7  +
push dword ptr [ebp+0Ch]  +
mov eax [ecx] +
call dword ptr [eax]  +
jmp loc_101CB18  +
cmp [ebp+0Ch] eax +
jnz loc_101CB08  +
push dword ptr [ebp+8]  +
mov eax [ecx] +
call dword ptr [eax+4]  +
xor eax eax +
jmp loc_101CB18  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push eax  +
push dword ptr [ecx+4]  +
call ds:HeapReAlloc  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 0  +
push dword ptr [ecx+4]  +
call ds:HeapSize  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1003122  +
test byte ptr [ebp+8] 1 +
jz loc_101CB57  +
push esi  +
call sub_10014DF  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mul  [ebp+arg_8] +
test edx edx +
ja loc_101CB77  +
cmp eax 0FFFFFFFFh +
jbe loc_101CB7E  +
mov eax 80070057h +
jmp loc_101CB85  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+4] +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+4]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1002814 +
jz loc_101CBBC  +
push esi  +
call sub_10014DF  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [ebp+arg_4] +
push esi  +
lea ecx [edx+eax] +
lea esi [ecx-1] +
cmp esi edx +
pop esi  +
jge loc_101CBE4  +
mov eax [ebp+arg_8] +
jmp loc_101CBEA  +
dec eax  +
not eax  +
dec ecx  +
and eax ecx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_8] +
or edx 0FFFFFFFFh +
sub edx eax +
cmp edx ecx +
jnb loc_101CC0E  +
mov eax 80070057h +
jmp loc_101CC17  +
add eax ecx +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push esi  +
push edi  +
push 7FFFFFFFh  +
push 8  +
inc eax  +
push eax  +
mov esi ecx +
call sub_101CBC8  +
push dword ptr [ebp+0Ch]  +
mov edi eax +
push edi  +
lea eax [ebp+8] +
push eax  +
call sub_101CB63  +
test eax eax +
jl loc_101CC80  +
push dword ptr [ebp+8]  +
lea eax [ebp+8] +
push 10h  +
push eax  +
call sub_101CBF3  +
test eax eax +
jl loc_101CC80  +
mov ecx [esi+4] +
push dword ptr [ebp+8]  +
mov eax [ecx] +
call dword ptr [eax]  +
test eax eax +
jz loc_101CC80  +
dec edi  +
and dword ptr [eax+4] 0 +
mov [eax] esi +
mov dword ptr [eax+0Ch] 1 +
mov [eax+8] edi +
jmp loc_101CC82  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
push esi  +
push edi  +
push 7FFFFFFFh  +
push 8  +
inc eax  +
push eax  +
mov esi ecx +
call sub_101CBC8  +
push dword ptr [ebp+10h]  +
mov edi eax +
push edi  +
lea eax [ebp+0Ch] +
push eax  +
call sub_101CB63  +
test eax eax +
jl loc_101CCE4  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp+0Ch] +
push 10h  +
push eax  +
call sub_101CBF3  +
test eax eax +
jl loc_101CCE4  +
push dword ptr [ebp+0Ch]  +
mov ecx [esi+4] +
push dword ptr [ebp+8]  +
mov eax [ecx] +
call dword ptr [eax+8]  +
test eax eax +
jz loc_101CCE4  +
dec edi  +
mov [eax+8] edi +
jmp loc_101CCE6  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
jmp loc_101CD08  +
mov eax ecx +
mov ecx [eax+8] +
cmp byte ptr [ecx+15h] 0 +
jz loc_101CD06  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
xor edx edx +
cmp [eax+15h] dl +
jz loc_101CD37  +
push edx  +
push edx  +
push edx  +
push edx  +
push edx  +
call sub_1014A8A  +
add esp 14h +
pop esi  +
retn   +
mov ecx [eax+8] +
cmp [ecx+15h] dl +
jnz loc_101CD50  +
push ecx  +
call sub_10137F5  +
jmp loc_101CD58  +
mov ecx [esi] +
cmp ecx [eax+8] +
jnz loc_101CD58  +
mov [esi] eax +
mov eax [eax+4] +
cmp [eax+15h] dl +
jz loc_101CD47  +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx] +
push esi  +
mov esi [eax+8] +
mov [edx] esi +
mov esi [eax+8] +
cmp byte ptr [esi+15h] 0 +
jnz loc_101CD7D  +
mov [esi+4] edx +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
pop esi  +
cmp edx [ecx+4] +
jnz loc_101CD91  +
mov [ecx+4] eax +
jmp loc_101CDA0  +
mov ecx [edx+4] +
cmp edx [ecx+8] +
jnz loc_101CD9E  +
mov [ecx+8] eax +
jmp loc_101CDA0  +
mov [ecx] eax +
mov [eax+8] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov eax offset StartServiceW +
jmp loc_101B958  +
***
test [ecx-1] esi +
jmp dword ptr [edx]  +
***
adc [eax-1] esi +
jmp dword ptr [edx]  +
***
adc [edi-1] ebp +
jmp dword ptr [edx]  +
***
retn   +
***
retn   +
***
sbb [eax-1] ebp +
jmp dword ptr [edx]  +
***
sbb [edx-1] esp +
jmp dword ptr [edx]  +
***
rcr dword ptr [edi-1] 1 +
jmp dword ptr [edx]  +
***
adc [edi-1] ebx +
jmp dword ptr [edx]  +
***
mov [esi-1] ebx +
jmp dword ptr [edx]  +
***
add al [eax] +
jle loc_1020B43  +
add al [eax] +
mov [ecx] dl +
add al [eax] +
xchg eax esi +
adc [edx] eax +
add [esi-55FFFDEFh] bl +
adc [edx] eax +
add [ecx+edx+11C00002h] dh +
add al [eax] +
retf 211h  +
***
