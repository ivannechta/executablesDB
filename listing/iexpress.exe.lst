retf 0  +
***
retn   +
***
retn 0  +
***
retf   +
***
mov edi edi +
push esi  +
mov esi eax +
xor eax eax +
mov ecx edx +
test edx edx +
jz loc_10063CE  +
cmp [esi] al +
jz loc_10063CA  +
inc esi  +
dec edx  +
jnz loc_10063C2  +
test edx edx +
jnz loc_10063D3  +
mov eax 80070057h +
pop esi  +
test edi edi +
jz locret_10063E4  +
test eax eax +
jl loc_10063E1  +
sub ecx edx +
mov [edi] ecx +
retn   +
and dword ptr [edi] 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
test ecx ecx +
jz loc_10063FA  +
cmp ecx [ebp+arg_0] +
jbe loc_10063FF  +
mov eax 80070057h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
push [ebp+arg_4]  +
mov ecx edx +
mov edi eax +
call sub_10063EA  +
test eax eax +
jl loc_1006428  +
mov eax [ebp+arg_0] +
call sub_10063B5  +
jmp loc_100642B  +
and dword ptr [edi] 0 +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
test [ebp+arg_8] 100h +
jz loc_100645A  +
cmp [ebp+arg_0] eax +
jnz loc_100644E  +
cmp ecx eax +
jnz loc_1006453  +
cmp ecx [ebp+arg_4] +
jbe loc_1006462  +
mov eax 80070057h +
jmp loc_1006462  +
push [ebp+arg_4]  +
call sub_10063EA  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_100649B  +
cmp [ebp+arg_4] eax +
jz loc_1006497  +
mov dl [ebx] +
test dl dl +
jz loc_1006497  +
mov [ecx] dl +
inc ecx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_100647F  +
test esi esi +
jnz loc_10064A2  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
mov byte ptr [ecx] 0 +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_10064AE  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_8]  +
mov esi eax +
push [ebp+arg_4]  +
xor ebx ebx +
dec esi  +
push esi  +
push edi  +
call sub_1010B13  +
add esp 10h +
test eax eax +
jl loc_10064E5  +
cmp eax esi +
ja loc_10064E5  +
jnz loc_10064EF  +
mov [esi+edi] bl +
jmp loc_10064ED  +
mov [esi+edi] bl +
mov ebx 8007007Ah +
mov eax esi +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_10064F8  +
mov [ecx] eax +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
test edi edi +
jbe loc_1006529  +
test [ebp+arg_4] 1000h +
jz loc_1006529  +
mov edx [ebp+arg_0] +
lea eax [esi+ecx] +
mov [edx] eax +
mov edx edi +
sub edx ecx +
mov [ebx] edx +
mov byte ptr [eax] 0 +
test [ebp+arg_4] 400h +
jz loc_100656D  +
mov eax [ebp+arg_4] +
and eax 0FFh +
push edi  +
push eax  +
push esi  +
mov [ebp+var_4] eax +
call sub_1010B40  +
add esp 0Ch +
cmp [ebp+var_4] 0 +
jnz loc_1006557  +
mov eax [ebp+arg_0] +
mov [eax] esi +
mov [ebx] edi +
jmp loc_100656D  +
test edi edi +
jbe loc_1006584  +
mov ecx [ebp+arg_0] +
lea eax [esi+edi-1] +
mov [ecx] eax +
mov dword ptr [ebx] 1 +
mov byte ptr [eax] 0 +
test edi edi +
jbe loc_1006584  +
test [ebp+arg_4] 800h +
jz loc_1006584  +
mov eax [ebp+arg_0] +
mov [eax] esi +
mov [ebx] edi +
mov byte ptr [esi] 0 +
xor eax eax +
leave   +
retn 8  +
***
call ds:GetVersion  +
test eax eax +
jns loc_100659C  +
xor eax eax +
retn   +
movzx eax al +
retn   +
***
call sub_100658F  +
cmp eax 6 +
jb locret_10065D8  +
push offset ModuleName  +
call ds:GetModuleHandleW  +
test eax eax +
jz locret_10065D8  +
push offset ProcName  +
push eax  +
call ds:GetProcAddress  +
test eax eax +
jz locret_10065D8  +
push 0  +
push 0  +
push 1  +
push 0  +
call eax  +
retn   +
***
mov eax hMem +
push esi  +
mov esi ds:LocalFree +
test eax eax +
jz loc_10065F1  +
push eax  +
call esi  +
mov eax dword_10225A0 +
test eax eax +
jz loc_10065FD  +
push eax  +
call esi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push 4Ch  +
push 0  +
push esi  +
call sub_1010B40  +
add esp 0Ch +
and dword ptr [esi] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFFCh  +
push [ebp+hWnd]  +
call ds:GetWindowLongA  +
push [ebp+dwNewLong]  +
mov dword_1023324 eax +
push 0FFFFFFFCh  +
push [ebp+hWnd]  +
call ds:SetWindowLongA  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+0Ch] 0B1h +
jnz loc_1006665  +
xor eax eax +
jmp loc_100667D  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push dword_1023324  +
call ds:CallWindowProcA  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
push esi  +
mov esi ds:MsgWaitForMultipleObjects +
push edi  +
mov edi 0FFh +
xor ebx ebx +
jmp loc_10066C9  +
cmp eax 1 +
jz loc_10066B6  +
cmp eax 0FFFFFFFFh +
jz loc_10066D9  +
jmp loc_10066C9  +
lea eax [ebp+Msg] +
push eax  +
call ds:DispatchMessageA  +
push 1  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+Msg] +
push eax  +
call ds:PeekMessageA  +
test eax eax +
jnz loc_10066AC  +
push edi  +
push 0FFFFFFFFh  +
push ebx  +
lea eax [ebp+arg_0] +
push eax  +
push 1  +
call esi  +
cmp eax ebx +
jnz loc_10066A0  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
push eax  +
push 80h  +
push 3  +
push eax  +
push eax  +
push 80000000h  +
push [ebp+lpFileName]  +
call ds:CreateFileA  +
cmp eax 0FFFFFFFFh +
jnz loc_100670D  +
xor eax eax +
jmp loc_1006717  +
push eax  +
call ds:CloseHandle  +
xor eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+hDlg] +
push edi  +
push [ebp+nIDDlgItem]  +
push eax  +
call ds:GetDlgItem  +
xor edi edi +
mov [ebp+hWnd] eax +
cmp eax edi +
jz loc_10067F5  +
push esi  +
push edi  +
call ds:GetDC  +
mov esi eax +
cmp esi edi +
jz loc_10067F4  +
push ebx  +
push 5Ah  +
push esi  +
call ds:GetDeviceCaps  +
push esi  +
push edi  +
mov ebx eax +
call ds:ReleaseDC  +
mov esi ds:SendMessageA +
cmp wParam edi +
jnz loc_10067E5  +
push edi  +
push edi  +
push 31h  +
push [ebp+hWnd]  +
call esi  +
movzx eax ax +
cmp eax edi +
jz loc_10067DD  +
lea ecx [ebp+var_40] +
push ecx  +
push 3Ch  +
push eax  +
call ds:GetObjectA  +
test eax eax +
jz loc_10067DD  +
push 1Fh  +
lea eax [ebp+var_40.lfFaceName] +
push eax  +
push 3E9h  +
push hInstance  +
mov [ebp+var_40.lfWeight] 2BCh +
call ds:LoadStringA  +
mov eax ebx +
imul eax eax +
push 48h  +
cdq   +
pop ecx  +
idiv  ecx +
mov [ebp+var_40.lfHeight] eax +
lea eax [ebp+var_40] +
push eax  +
call ds:CreateFontIndirectA  +
mov wParam eax +
cmp wParam edi +
jz loc_10067F3  +
push edi  +
push wParam  +
push 30h  +
push [ebp+hWnd]  +
call esi  +
pop ebx  +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_1010BBF  +
leave   +
retn 8  +
***
mov eax wParam +
test eax eax +
jz locret_1006820  +
push eax  +
call ds:DeleteObject  +
and wParam 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+bEnable]  +
push [ebp+nIDDlgItem]  +
push [ebp+hDlg]  +
call ds:GetDlgItem  +
push eax  +
call ds:EnableWindow  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+lpBuffer] +
test esi esi +
jz loc_100686D  +
push [ebp+nBufferMax]  +
mov byte ptr [esi] 0 +
push esi  +
push [ebp+uID]  +
push hInstance  +
call ds:LoadStringA  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push [ebp+lpFileName]  +
mov edi [ebp+nSize] +
push edi  +
push [ebp+lpString1]  +
mov esi offset Default +
push esi  +
push [ebp+lpKeyName]  +
push [ebp+lpAppName]  +
call ds:GetPrivateProfileStringA  +
mov ebx eax +
xor eax eax +
cmp [ebp+lpAppName] eax +
jz loc_10068B2  +
cmp [ebp+lpKeyName] eax +
jz loc_10068B7  +
lea ecx [edi-1] +
cmp ebx ecx +
jz loc_10068BE  +
cmp [ebp+lpKeyName] eax +
jnz loc_10068C3  +
add edi 0FFFFFFFEh +
cmp ebx edi +
jnz loc_10068C3  +
push 0FFFFFFFEh  +
pop ebx  +
jmp loc_10068D4  +
push esi  +
push [ebp+lpString1]  +
call ds:lstrcmpA  +
test eax eax +
jnz loc_10068D4  +
or ebx 0FFFFFFFFh +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 144h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
cmp byte ptr [eax] 0 +
jnz loc_1006903  +
xor eax eax +
jmp loc_1006928  +
push esi  +
lea ecx [ebp+FindFileData] +
push ecx  +
push eax  +
call ds:FindFirstFileA  +
mov esi [ebp+FindFileData.nFileSizeLow] +
sub esi [ebp+FindFileData.nFileSizeHigh] +
push eax  +
call ds:FindClose  +
mov eax esi +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1010BBF  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp FileName 0 +
push edi  +
mov edi ds:GetPrivateProfileIntA +
jz loc_100696F  +
mov eax [ebp+lpAppName] +
cmp byte ptr [eax] 0 +
jz loc_100696F  +
push esi  +
push offset FileName  +
mov esi 3E7h +
push esi  +
push [ebp+lpKeyName]  +
push eax  +
call edi  +
cmp eax esi +
pop esi  +
jnz loc_100697F  +
push offset byte_1020B74  +
push [ebp+nDefault]  +
push [ebp+lpKeyName]  +
push [ebp+arg_0]  +
call edi  +
pop edi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_10069DC  +
mov al [edi] +
test al al +
jz loc_10069DC  +
push esi  +
inc edi  +
cmp al 25h +
jnz loc_10069D5  +
cmp [edi] al +
jnz loc_10069A9  +
inc edi  +
jmp loc_10069D5  +
push 25h  +
push edi  +
call sub_1010BE0  +
mov esi eax +
pop ecx  +
pop ecx  +
test esi esi +
jz loc_10069DB  +
push offset byte_1020B74  +
push 0  +
push edi  +
push offset AppName  +
mov byte ptr [esi] 0 +
call ds:WritePrivateProfileStringA  +
mov byte ptr [esi] 25h +
lea edi [esi+1] +
mov al [edi] +
test al al +
jnz loc_100699D  +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_1006A34  +
mov eax [esi] +
test eax eax +
jz loc_1006A34  +
cmp byte ptr [eax] 0 +
jz loc_1006A34  +
movsx ecx [ebp+arg_4] +
push ebx  +
push edi  +
push ecx  +
push eax  +
call sub_1010BE0  +
mov ebx [esi] +
mov edi eax +
pop ecx  +
pop ecx  +
test edi edi +
jz loc_1006A23  +
push edi  +
call ds:CharNextA  +
mov [esi] eax +
mov byte ptr [edi] 0 +
jmp loc_1006A2E  +
push ebx  +
call ds:lstrlenA  +
add eax ebx +
mov [esi] eax +
pop edi  +
mov eax ebx +
pop ebx  +
jmp loc_1006A36  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
or dword ptr [eax+0Ch] 0FFFFFFFFh +
or dword ptr [eax+10h] 0FFFFFFFFh +
or dword ptr [eax+14h] 0FFFFFFFFh +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
push 2Dh  +
push eax  +
mov [ebp+var_4] eax +
call sub_1010BE0  +
mov edi [ebp+arg_0] +
mov esi eax +
neg esi  +
sbb esi esi +
pop ecx  +
inc esi  +
and [ebp+arg_4] 0 +
pop ecx  +
push 2Dh  +
lea eax [ebp+var_4] +
push eax  +
call sub_10069E6  +
xor ebx ebx +
cmp eax ebx +
jnz loc_1006AB1  +
cmp esi ebx +
jnz loc_1006AAA  +
cmp [ebp+arg_4] ebx +
jz loc_1006B2F  +
push edi  +
call sub_1006A40  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
push 0Ah  +
lea ecx [ebp+lpsz] +
push ecx  +
push eax  +
call sub_1010FE1  +
add esp 0Ch +
push [ebp+lpsz]  +
mov [ebp+ebx*4+var_18] eax +
call ds:CharNextA  +
inc ebx  +
cmp ebx 4 +
jl loc_1006AB1  +
xor edx edx +
cmp [ebp+arg_8] edx +
jz loc_1006B08  +
movzx eax word ptr [ebp+var_18] +
movzx ecx word ptr [ebp+var_14] +
movzx ebx [ebp+var_C] +
shl eax 10h +
or eax ecx +
movzx ecx word ptr [ebp+var_10] +
shl ecx 10h +
or ecx ebx +
cmp [ebp+arg_4] edx +
jnz loc_1006B00  +
mov [edi] eax +
mov [edi+4] ecx +
jmp loc_1006B2F  +
mov [edi+0Ch] eax +
mov [edi+10h] ecx +
jmp loc_1006B2F  +
mov eax [ebp+var_18] +
cmp [ebp+arg_4] edx +
jnz loc_1006B20  +
mov [edi] eax +
mov eax [ebp+var_14] +
mov [edi+4] eax +
mov eax [ebp+var_10] +
mov [edi+8] eax +
jmp loc_1006B2F  +
mov [edi+0Ch] eax +
mov eax [ebp+var_14] +
mov [edi+10h] eax +
mov eax [ebp+var_10] +
mov [edi+14h] eax +
inc [ebp+arg_4]  +
cmp [ebp+arg_4] 2 +
jl loc_1006A86  +
jmp loc_1006AAA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 108h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+lpFileName] +
mov eax [ebp+lpAppName] +
push esi  +
push edi  +
push ecx  +
push 104h  +
lea ecx [ebp+String] +
push ecx  +
push offset ValueName  +
xor esi esi +
push esi  +
push eax  +
xor edi edi +
call ds:GetPrivateProfileStringA  +
cmp [ebp+String] 0 +
jz loc_1006BA8  +
lea eax [ebp+String] +
push eax  +
inc edi  +
call ds:lstrlenA  +
lea esi [esi+eax+1] +
lea eax [ebp+esi+String] +
cmp byte ptr [eax] 0 +
jnz loc_1006B90  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1010BBF  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+hDlg] +
push edi  +
xor edi edi +
cmp ebx edi +
jz loc_1006C0A  +
push esi  +
mov esi ds:SendDlgItemMessageA +
push edi  +
push edi  +
push 0Eh  +
push [ebp+nIDDlgItem]  +
push ebx  +
call esi  +
push eax  +
push eax  +
push 0B1h  +
push [ebp+nIDDlgItem]  +
push ebx  +
call esi  +
push [ebp+lParam]  +
push edi  +
push 0C2h  +
push [ebp+nIDDlgItem]  +
push ebx  +
call esi  +
push edi  +
push edi  +
push 0B7h  +
push [ebp+nIDDlgItem]  +
push ebx  +
call esi  +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+0Ch] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ds:LocalFree +
push edi  +
mov edi [ebp+arg_0] +
mov eax [edi] +
push dword ptr [eax]  +
call esi  +
mov eax [edi] +
push dword ptr [eax+4]  +
call esi  +
push dword ptr [edi]  +
call esi  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_0] +
mov eax [ecx+eax*4] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_0] eax +
setz al  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax dword_10225A4 +
mov [ebp+var_4] eax +
cmp [ebp+arg_0] eax +
jnz loc_1006CAF  +
mov eax [eax+0Ch] +
mov dword_10225A4 eax +
jmp loc_1006CC3  +
cmp eax [ebp+arg_0] +
jz loc_1006CBD  +
mov ecx eax +
mov eax [eax+0Ch] +
mov [ebp+var_4] eax +
test eax eax +
jnz loc_1006CAA  +
jmp locret_1006CCC  +
mov eax [eax+0Ch] +
mov [ecx+0Ch] eax +
lea eax [ebp+var_4] +
push eax  +
call sub_1006C34  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 98h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 94h +
call ds:GetVersionExA  +
test eax eax +
jnz loc_1006D0A  +
xor eax eax +
inc eax  +
jmp loc_1006D1E  +
cmp [ebp+VersionInformation.dwPlatformId] 2 +
jnz loc_1006D1C  +
cmp [ebp+VersionInformation.dwMajorVersion] 3 +
jbe loc_1006D05  +
xor eax eax +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1010BBF  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
push 2Ah  +
call ds:GetSystemMetrics  +
test eax eax +
jz loc_1006D75  +
lea eax [ebp+var_40] +
push eax  +
push 3Ch  +
push 11h  +
call ds:GetStockObject  +
push eax  +
call ds:GetObjectA  +
test eax eax +
jle loc_1006D75  +
lea eax [ebp+var_40] +
push eax  +
call ds:CreateFontIndirectA  +
mov dword_1020B5C eax +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1010BBF  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+nSize]  +
mov esi [ebp+lpFilename] +
push esi  +
mov byte ptr [esi] 0 +
push hInstance  +
call ds:GetModuleFileNameA  +
test eax eax +
jz loc_1006DBC  +
push 5Ch  +
push esi  +
call sub_1019ED9  +
test eax eax +
jz loc_1006DBC  +
push eax  +
call ds:CharNextA  +
mov byte ptr [eax] 0 +
xor eax eax +
cmp [esi] al +
pop esi  +
setnz al  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
test edx edx +
jz loc_1006DE3  +
cmp edx 7FFFFFFFh +
jbe loc_1006DE8  +
mov eax 80070057h +
test eax eax +
jl loc_1006DFE  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_100646B  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
mov ecx 80070057h +
test edx edx +
jz loc_1006E22  +
cmp edx 7FFFFFFFh +
jbe loc_1006E24  +
mov eax ecx +
test eax eax +
jl loc_1006E4B  +
cmp [ebp+arg_C] 7FFFFFFEh +
jbe loc_1006E3B  +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov byte ptr [ecx] 0 +
jmp loc_1006E4B  +
push [ebp+arg_C]  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 0  +
call sub_100646B  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi 7FFFFFFFh +
push esi  +
push edi  +
lea eax [ebp+arg_0] +
call sub_1006408  +
test eax eax +
jl loc_1006E8A  +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_4] +
push esi  +
sub edx eax +
lea ecx [eax+edi] +
mov eax [ebp+arg_8] +
push 0  +
call sub_100646B  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_1006EAA  +
cmp [ebp+arg_4] 7FFFFFFFh +
jbe loc_1006EAF  +
mov eax 80070057h +
test eax eax +
jl loc_1006EC9  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
push 0  +
call sub_10064BA  +
pop edi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push [ebp+arg_10]  +
mov esi [ebp+arg_0] +
push 7FFFFFFFh  +
push esi  +
mov ecx ebx +
call sub_1006435  +
xor ecx ecx +
cmp eax ecx +
mov [ebp+var_4] eax +
jl loc_1006F7D  +
test [ebp+arg_10] 100h +
push edi  +
mov edi ebx +
mov [ebp+var_8] esi +
mov [ebp+var_C] edi +
jz loc_1006F1B  +
cmp [ebp+arg_14] ecx +
jnz loc_1006F1B  +
mov [ebp+arg_14] offset ValueName +
test [ebp+arg_10] 0FFFFE000h +
mov [ebp+var_4] ecx +
jz loc_1006F84  +
mov [ebp+var_4] 80070057h +
cmp ebx ecx +
jz loc_1006F34  +
mov [esi] cl +
test [ebp+arg_10] 1C00h +
jz loc_1006F58  +
test ebx ebx +
jz loc_1006F58  +
push [ebp+arg_10]  +
mov edi [ebp+arg_4] +
lea eax [ebp+var_8] +
push eax  +
lea ebx [ebp+var_C] +
xor ecx ecx +
call sub_1006505  +
mov edi [ebp+var_C] +
cmp [ebp+var_4] 0 +
jge loc_1006F67  +
cmp [ebp+var_4] 8007007Ah +
jnz loc_1006F7C  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_1006F73  +
mov ecx [ebp+var_8] +
mov [eax] ecx +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_1006F7C  +
mov [eax] edi +
pop edi  +
mov eax [ebp+var_4] +
pop esi  +
pop ebx  +
leave   +
retn   +
cmp ebx ecx +
jnz loc_1006FA2  +
mov eax [ebp+arg_14] +
cmp [eax] cl +
jz loc_1006F67  +
mov eax esi +
neg eax  +
sbb eax eax +
and eax 23h +
add eax 80070057h +
mov [ebp+var_4] eax +
jmp loc_1006F34  +
lea eax [ebp+arg_18] +
push eax  +
push [ebp+arg_14]  +
lea eax [ebp+var_C] +
push eax  +
mov eax ebx +
mov edi esi +
mov [ebp+var_C] ecx +
call sub_10064BA  +
mov [ebp+var_4] eax +
mov eax [ebp+var_C] +
mov edi ebx +
sub edi eax +
cmp [ebp+var_4] 0 +
lea ecx [eax+esi] +
mov [ebp+var_8] ecx +
mov [ebp+var_C] edi +
jl loc_1006F34  +
mov eax [ebp+arg_10] +
test eax 200h +
jz loc_1006F67  +
cmp edi 1 +
jbe loc_1006F67  +
lea ecx [edi-1] +
and eax 0FFh +
push ecx  +
push eax  +
mov eax [ebp+var_8] +
inc eax  +
push eax  +
call sub_1010B40  +
add esp 0Ch +
jmp loc_1006F67  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 23Ch +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
cmp word_1020B50 1 +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_C] +
push edi  +
mov [ebp+hWnd] eax +
mov [ebp+var_23C] esi +
jz loc_1007188  +
push 30h  +
lea eax [ebp+Buffer] +
push eax  +
push 3E8h  +
call sub_100684A  +
push 200h  +
lea eax [ebp+String] +
push eax  +
push [ebp+uID]  +
call sub_100684A  +
test esi esi +
jz loc_10070B6  +
push esi  +
mov esi ds:lstrlenA +
call esi  +
push ebx  +
mov edi eax +
call esi  +
add edi eax +
lea eax [ebp+String] +
push eax  +
call esi  +
lea edi [eax+edi+64h] +
push edi  +
push 40h  +
call ds:LocalAlloc  +
mov esi eax +
test esi esi +
jnz loc_100709D  +
or eax 0FFFFFFFFh +
jmp loc_100718A  +
push [ebp+var_23C]  +
lea eax [ebp+String] +
push ebx  +
push eax  +
push 100h  +
push 0  +
push 0  +
jmp loc_10070F3  +
test ebx ebx +
jz loc_10070FF  +
mov esi ds:lstrlenA +
push ebx  +
call esi  +
mov edi eax +
lea eax [ebp+String] +
push eax  +
call esi  +
lea edi [edi+eax+64h] +
push edi  +
push 40h  +
call ds:LocalAlloc  +
mov esi eax +
xor eax eax +
cmp esi eax +
jz loc_1007095  +
push eax  +
push ebx  +
lea ecx [ebp+String] +
push ecx  +
push 100h  +
push eax  +
push eax  +
push edi  +
push esi  +
call sub_1006ED0  +
add esp 20h +
jmp loc_1007130  +
lea eax [ebp+String] +
push eax  +
call ds:lstrlenA  +
mov edi eax +
inc edi  +
push edi  +
push 40h  +
call ds:LocalAlloc  +
mov esi eax +
test esi esi +
jz loc_1007095  +
lea eax [ebp+String] +
push eax  +
push edi  +
push esi  +
call sub_1006DCD  +
push [ebp+uType]  +
call ds:MessageBeep  +
call sub_101A037  +
test eax eax +
jz loc_100715C  +
push 1  +
push 10h  +
push hInstance  +
call sub_1019FE2  +
test eax eax +
jz loc_100715C  +
mov eax 180000h +
jmp loc_100715E  +
xor eax eax +
or eax [ebp+uType] +
or eax [ebp+arg_14] +
or eax 10000h +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
push esi  +
push [ebp+hWnd]  +
call ds:MessageBoxA  +
push esi  +
mov edi eax +
call ds:LocalFree  +
mov eax edi +
jmp loc_100718A  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010BBF  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 10h  +
push 0  +
push 0  +
push [ebp+uID]  +
push [ebp+hDlg]  +
call sub_1007006  +
push [ebp+nIDDlgItem]  +
push [ebp+hDlg]  +
call ds:GetDlgItem  +
push eax  +
call ds:SetFocus  +
push 0FFFFFFFFh  +
push 0  +
push 0B1h  +
push [ebp+nIDDlgItem]  +
push [ebp+hDlg]  +
call ds:SendDlgItemMessageA  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
cmp [ebp+hWnd] ebx +
jz loc_1007261  +
push [ebp+nIDDlgItem]  +
push [ebp+hDlg]  +
call ds:GetDlgItem  +
mov esi ds:SendMessageA +
push ebx  +
push ebx  +
push 1004h  +
push eax  +
mov [ebp+hWnd] eax +
call esi  +
xor edi edi +
cmp eax ebx +
mov [ebp+nIDDlgItem] eax +
jle loc_100727F  +
lea eax [ebp+lParam] +
push eax  +
push ebx  +
push 1005h  +
push [ebp+hWnd]  +
mov [ebp+lParam] 4 +
mov [ebp+var_24] edi +
mov [ebp+var_20] ebx +
mov [ebp+var_8] ebx +
call esi  +
push [ebp+lpString1]  +
mov eax [ebp+var_8] +
push dword ptr [eax]  +
call ds:lstrcmpiA  +
test eax eax +
jz loc_100725C  +
inc edi  +
cmp edi [ebp+nIDDlgItem] +
jl loc_1007223  +
jmp loc_100727F  +
xor eax eax +
inc eax  +
jmp loc_1007281  +
mov esi dword_10225A4 +
jmp loc_100727B  +
push dword ptr [esi]  +
push [ebp+lpString1]  +
call ds:lstrcmpiA  +
test eax eax +
jz loc_100725C  +
mov esi [esi+0Ch] +
cmp esi ebx +
jnz loc_1007269  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
push 0Ah  +
push 14h  +
lea eax [ebp+var_18] +
push eax  +
push [ebp+arg_4]  +
call sub_10110EE  +
add esp 10h +
push 0  +
push 10h  +
lea eax [ebp+var_18] +
push eax  +
push esi  +
push 482h  +
push 0  +
call sub_1007006  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1010BBF  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+lpString1] +
push edi  +
mov [ebp+var_4] edi +
call ds:lstrlenA  +
inc eax  +
cmp eax [ebp+arg_8] +
jnb loc_100741E  +
mov esi [ebp+arg_4] +
mov al [esi] +
mov ecx [ebp+lpString1] +
inc [ebp+lpString1]  +
mov [ecx] al +
test al al +
jz loc_100741E  +
mov al [esi] +
inc esi  +
cmp al 25h +
jnz loc_100740A  +
cmp [esi] al +
jnz loc_1007329  +
inc esi  +
jmp loc_100740A  +
push 25h  +
push esi  +
call sub_1010BE0  +
mov ebx eax +
pop ecx  +
pop ecx  +
test ebx ebx +
jz loc_10073EF  +
dec [ebp+lpString1]  +
sub edi [ebp+lpString1] +
mov byte ptr [ebx] 0 +
add edi [ebp+arg_8] +
cmp FileName 0 +
mov [ebp+arg_4] edi +
jz loc_1007377  +
cmp ReturnedString 0 +
jz loc_1007377  +
push offset FileName  +
push edi  +
push [ebp+lpString1]  +
push esi  +
push offset ReturnedString  +
call sub_1006879  +
cmp eax 0FFFFFFFFh +
jnz loc_10073D4  +
push offset byte_1020B74  +
push edi  +
push [ebp+lpString1]  +
push esi  +
push offset AppName  +
call sub_1006879  +
cmp eax 0FFFFFFFFh +
jnz loc_10073D4  +
push 4  +
push 20h  +
push 0  +
push esi  +
push 474h  +
push 0  +
call sub_1007006  +
cmp eax 7 +
jz loc_100742C  +
dec esi  +
mov edi ebx +
sub edi esi +
inc edi  +
push edi  +
push esi  +
push [ebp+arg_4]  +
mov byte ptr [ebx] 25h +
push [ebp+lpString1]  +
call sub_1006E07  +
test eax eax +
jz loc_10073E4  +
push [ebp+arg_8]  +
push esi  +
call sub_100728D  +
push 0FFFFFFFEh  +
pop eax  +
jmp loc_1007425  +
cmp eax 0FFFFFFFEh +
jz loc_10073C6  +
push [ebp+lpString1]  +
call ds:lstrlenA  +
mov edi eax +
add [ebp+lpString1] edi +
mov byte ptr [ebx] 25h +
lea esi [ebx+1] +
jmp loc_100740A  +
push 4  +
push 20h  +
push 0  +
lea eax [esi-1] +
push eax  +
push 461h  +
push 0  +
call sub_1007006  +
cmp eax 7 +
jz loc_100742C  +
mov edi [ebp+var_4] +
push edi  +
call ds:lstrlenA  +
inc eax  +
cmp eax [ebp+arg_8] +
jb loc_1007302  +
push edi  +
call ds:lstrlenA  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
or eax 0FFFFFFFFh +
jmp loc_1007425  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp FileName 0 +
push esi  +
push edi  +
mov edi [ebp+nSize] +
jz loc_100746A  +
mov eax [ebp+arg_14] +
cmp byte ptr [eax] 0 +
jz loc_100746A  +
push offset FileName  +
push edi  +
push [ebp+lpString1]  +
push [ebp+lpKeyName]  +
push eax  +
call sub_1006879  +
mov esi eax +
cmp esi 0FFFFFFFFh +
jnz loc_1007484  +
push offset byte_1020B74  +
push edi  +
push [ebp+lpString1]  +
push [ebp+lpDefault]  +
push [ebp+lpKeyName]  +
push [ebp+lpAppName]  +
call ds:GetPrivateProfileStringA  +
mov esi eax +
cmp [ebp+lpKeyName] 0 +
jz loc_10074BC  +
push ebx  +
push edi  +
push 40h  +
call ds:LocalAlloc  +
mov ebx eax +
test ebx ebx +
jz loc_10074BB  +
push edi  +
push [ebp+lpString1]  +
push ebx  +
call sub_10072DF  +
mov esi eax +
test esi esi +
jl loc_10074B4  +
push ebx  +
push edi  +
push [ebp+lpString1]  +
call sub_1006DCD  +
push ebx  +
call ds:LocalFree  +
pop ebx  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 11Ch +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov [ebp+lpAppName] eax +
mov eax [ebp+arg_8] +
push edi  +
mov edi [ebp+arg_4] +
mov [ebp+var_118] eax +
lea eax [ebp+uBytes] +
push eax  +
push 20h  +
push [ebp+arg_C]  +
mov [ebp+lpKeyName] edi +
call sub_100FFCD  +
test eax eax +
jl loc_100766F  +
push [ebp+uBytes]  +
push 40h  +
call ds:LocalAlloc  +
mov [ebp+hMem] eax +
test eax eax +
jz loc_100766F  +
push ebx  +
push esi  +
mov ebx offset byte_1020B74 +
push ebx  +
mov esi 104h +
push esi  +
lea eax [ebp+String] +
push eax  +
push offset ValueName  +
push edi  +
push [ebp+lpAppName]  +
call ds:GetPrivateProfileStringA  +
cmp [ebp+String] 25h +
jnz loc_100758E  +
lea eax [ebp+String] +
lea edi [ebp+String] +
push eax  +
dec edi  +
call ds:lstrlenA  +
cmp byte ptr [eax+edi] 25h +
jnz loc_100758E  +
lea eax [ebp+String] +
push eax  +
call ds:lstrlenA  +
mov byte ptr [eax+edi] 0 +
xor edi edi +
jmp loc_10075DF  +
mov edi offset asc_1001510 +
push edi  +
push esi  +
lea eax [ebp+String] +
push eax  +
call sub_1006DCD  +
push [ebp+lpKeyName]  +
lea eax [ebp+String] +
push esi  +
push eax  +
call sub_1006E54  +
push edi  +
push esi  +
lea eax [ebp+String] +
push eax  +
call sub_1006E54  +
push ebx  +
lea eax [ebp+String] +
push eax  +
push [ebp+lpKeyName]  +
push [ebp+lpAppName]  +
call ds:WritePrivateProfileStringA  +
xor edi edi +
inc edi  +
cmp [ebp+arg_10] 0 +
jz loc_1007627  +
mov esi offset asc_100150C +
push esi  +
push [ebp+uBytes]  +
push [ebp+hMem]  +
call sub_1006DCD  +
push [ebp+var_118]  +
push [ebp+uBytes]  +
push [ebp+hMem]  +
call sub_1006E54  +
push esi  +
push [ebp+uBytes]  +
push [ebp+hMem]  +
call sub_1006E54  +
jmp loc_100763E  +
push [ebp+var_118]  +
push [ebp+uBytes]  +
push [ebp+hMem]  +
call sub_1006DCD  +
mov eax [ebp+lpKeyName] +
test edi edi +
jnz loc_100764E  +
lea eax [ebp-107h] +
push ebx  +
push [ebp+hMem]  +
push eax  +
push offset AppName  +
call ds:WritePrivateProfileStringA  +
push [ebp+hMem]  +
call ds:LocalFree  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_1010BBF  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 114h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_10C] eax +
mov eax [ebp+arg_4] +
mov edi offset FileName +
push edi  +
mov [ebp+lpAppName] eax +
call sub_10068E2  +
mov esi offset byte_1020B74 +
push esi  +
mov ebx eax +
call sub_10068E2  +
cmp eax ebx +
jbe loc_10076CC  +
push esi  +
jmp loc_10076CD  +
push edi  +
call sub_10068E2  +
mov ebx eax +
push ebx  +
push 40h  +
call ds:LocalAlloc  +
mov esi eax +
xor eax eax +
cmp esi eax +
jnz loc_1007708  +
push eax  +
push 10h  +
push eax  +
push eax  +
push 44Ch  +
push eax  +
call sub_1007006  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010BBF  +
leave   +
retn 8  +
push edi  +
push ebx  +
push esi  +
mov edi offset ValueName +
push edi  +
push eax  +
push [ebp+lpAppName]  +
mov [ebp+hMem] esi +
call ds:GetPrivateProfileStringA  +
cmp byte ptr [esi] 0 +
jz loc_1007774  +
mov ebx 104h +
push [ebp+lpAppName]  +
lea eax [ebp+lpString1] +
push ebx  +
push eax  +
push edi  +
push esi  +
push [ebp+var_10C]  +
call sub_1007436  +
cmp eax 0FFFFFFFFh +
jz loc_1007779  +
push 0  +
push ebx  +
lea eax [ebp+lpString1] +
push eax  +
push esi  +
push [ebp+var_10C]  +
call sub_10074C9  +
push esi  +
call ds:lstrlenA  +
lea esi [esi+eax+1] +
cmp byte ptr [esi] 0 +
jnz loc_100772E  +
xor esi esi +
inc esi  +
jmp loc_100777B  +
xor esi esi +
push [ebp+hMem]  +
call ds:LocalFree  +
mov eax esi +
jmp loc_10076F7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_8] +
mov byte ptr [eax] 0 +
mov eax [ebp+arg_0] +
cmp byte ptr [eax] 0 +
jnz loc_10077B5  +
push [ebp+arg_4]  +
call sub_1006A40  +
xor eax eax +
inc eax  +
jmp locret_100781D  +
and [ebp+arg_0] 0 +
push esi  +
mov esi ds:CompareStringA +
push ebx  +
mov [ebp+var_4] eax +
push edi  +
push 3Ah  +
lea eax [ebp+var_4] +
push eax  +
call sub_10069E6  +
mov edi eax +
xor ebx ebx +
mov [ebp+var_8] edi +
cmp edi ebx +
jz loc_10077F0  +
cmp [edi] bl +
jnz loc_1007821  +
cmp [ebp+arg_0] ebx +
jnz loc_10078B4  +
push [ebp+arg_4]  +
call sub_1006A40  +
mov eax [ebp+arg_4] +
push 2  +
add eax 0Ch +
pop ecx  +
xor edx edx +
cmp [eax] edx +
jnz loc_1007811  +
cmp [eax+4] edx +
jnz loc_1007811  +
cmp [eax+8] edx +
jnz loc_1007811  +
lea esi [eax-0Ch] +
mov edi eax +
movs   +
movs   +
movs   +
add eax 18h +
dec ecx  +
jnz loc_10077FB  +
xor eax eax +
inc eax  +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 14h  +
cmp [ebp+arg_0] ebx +
jnz loc_1007852  +
mov edi [ebp+arg_4] +
push 2Ch  +
lea eax [ebp+var_8] +
push eax  +
call sub_10069E6  +
test eax eax +
jz loc_10078B4  +
cmp byte ptr [eax] 0 +
jz loc_1007847  +
push [ebp+arg_10]  +
push eax  +
push edi  +
call sub_1006A5D  +
inc ebx  +
add edi 18h +
cmp ebx 2 +
jl loc_1007829  +
jmp loc_10078B4  +
cmp [ebp+arg_0] 1 +
jnz loc_100786B  +
mov eax [ebp+arg_C] +
lea ecx [eax-1] +
push ecx  +
push edi  +
push eax  +
push [ebp+arg_8]  +
call sub_1006E07  +
jmp loc_10078B4  +
or ebx 0FFFFFFFFh +
push ebx  +
push offset String2  +
push ebx  +
push edi  +
push 1  +
push 7Fh  +
call esi  +
dec eax  +
dec eax  +
jz loc_10078B4  +
push ebx  +
push offset aYesno  +
push ebx  +
push edi  +
push 1  +
push 7Fh  +
call esi  +
dec eax  +
dec eax  +
jnz loc_100789B  +
mov eax [ebp+arg_4] +
or dword ptr [eax+30h] 1 +
jmp loc_10078B4  +
push ebx  +
push offset aOkcancel  +
push ebx  +
push edi  +
push 1  +
push 7Fh  +
call esi  +
dec eax  +
dec eax  +
jnz loc_10078C6  +
mov eax [ebp+arg_4] +
or dword ptr [eax+30h] 2 +
inc [ebp+arg_0]  +
cmp [ebp+arg_0] 3 +
jl loc_10077C5  +
jmp loc_10077F0  +
xor eax eax +
push eax  +
push 10h  +
push eax  +
push edi  +
push 480h  +
push eax  +
call sub_1007006  +
xor eax eax +
jmp loc_100781A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2CCh +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
lea eax [ebp+uBytes] +
push eax  +
mov eax dword_1022598 +
push 14h  +
pop ecx  +
mul  ecx +
push edx  +
xor esi esi +
push eax  +
mov [ebp+var_2C4] esi +
mov [ebp+var_2CC] esi +
call sub_100FF9B  +
test eax eax +
jge loc_100793B  +
push esi  +
push 10h  +
push esi  +
push esi  +
push 44Ch  +
push esi  +
call sub_1007006  +
xor eax eax +
jmp loc_1007AFC  +
push [ebp+uBytes]  +
push 40h  +
call ds:LocalAlloc  +
mov [ebp+hMem] eax +
cmp eax esi +
jz loc_1007924  +
push ebx  +
push edi  +
mov ebx 10Eh +
mov esi dword_10225A4 +
mov edi [ebp+hMem] +
xor eax eax +
mov [ebp+AppName] 0 +
mov [ebp+var_2C8] 1 +
mov byte ptr [edi] 0 +
cmp esi eax +
jz loc_1007AEB  +
cmp [esi+8] eax +
jnz loc_1007ABA  +
cmp [ebp+var_2C8] eax +
jz loc_1007998  +
mov [ebp+var_2C8] eax +
cmp [esi+4] eax +
jz loc_1007A0F  +
cmp [ebp+AppName] 0 +
jnz loc_1007A0F  +
push offset aSourcefiles  +
push 50h  +
lea eax [ebp+AppName] +
push eax  +
call sub_1006DCD  +
push 0Ah  +
push 50h  +
lea eax [ebp+var_A4] +
push eax  +
push [ebp+var_2C4]  +
call sub_10110EE  +
add esp 10h +
inc [ebp+var_2C4]  +
lea eax [ebp+var_A4] +
push eax  +
push 50h  +
lea eax [ebp+AppName] +
push eax  +
call sub_1006E54  +
push offset byte_1020B74  +
push dword ptr [esi+4]  +
lea eax [ebp+AppName] +
push eax  +
push offset byte_1021FC0  +
call ds:WritePrivateProfileStringA  +
push dword ptr [esi+4]  +
lea eax [ebp+String1] +
push 104h  +
push eax  +
call sub_1006DCD  +
push dword ptr [esi+4]  +
lea eax [ebp+String1] +
push eax  +
call ds:lstrcmpiA  +
test eax eax +
jnz loc_1007ABA  +
push [ebp+var_2CC]  +
lea eax [ebp+var_A4] +
push offset aFileD  +
push 50h  +
push eax  +
mov dword ptr [esi+8] 1 +
call sub_1006E95  +
add esp 10h +
push dword ptr [esi]  +
inc [ebp+var_2CC]  +
push ebx  +
lea eax [ebp+var_1B4] +
push eax  +
call sub_1006DCD  +
push 1  +
push ebx  +
lea eax [ebp+var_1B4] +
push eax  +
lea eax [ebp+var_A4] +
push eax  +
push offset AppName  +
call sub_10074C9  +
push offset asc_1001510  +
push [ebp+uBytes]  +
push edi  +
call sub_1006DCD  +
lea eax [ebp+var_A4] +
push eax  +
push [ebp+uBytes]  +
push edi  +
call sub_1006E54  +
push offset asc_100152C  +
push [ebp+uBytes]  +
push edi  +
call sub_1006E54  +
push edi  +
call ds:lstrlenA  +
lea edi [edi+eax+1] +
mov esi [esi+0Ch] +
xor eax eax +
cmp esi eax +
jnz loc_1007981  +
cmp [ebp+var_2C8] eax +
jnz loc_1007AEB  +
push offset byte_1020B74  +
push [ebp+hMem]  +
mov [edi] al +
lea eax [ebp+AppName] +
push eax  +
call ds:WritePrivateProfileSectionA  +
jmp loc_100795A  +
push [ebp+hMem]  +
call ds:LocalFree  +
xor eax eax +
pop edi  +
inc eax  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1010BBF  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 110h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_10C] 0 +
push ebx  +
mov ebx [ebp+lpFileName] +
push esi  +
push edi  +
push ebx  +
mov edi 104h +
push edi  +
lea eax [ebp+String1] +
push eax  +
push offset aTargetfilevers  +
mov esi offset aOptions +
push esi  +
mov [ebp+var_110] 1 +
call sub_1006879  +
cmp eax 0FFFFFFFFh +
jz loc_1007B8E  +
cmp [ebp+String1] 40h +
jnz loc_1007B7B  +
push ebx  +
lea eax [ebp-107h] +
push eax  +
call sub_1006B46  +
mov [ebp+var_10C] eax +
jmp loc_1007B85  +
mov [ebp+var_10C] 1 +
cmp [ebp+var_10C] 0 +
jnz loc_1007BC0  +
push ebx  +
push edi  +
lea eax [ebp+String1] +
push eax  +
push offset aTargetntversio  +
push esi  +
call sub_1006879  +
cmp eax 0FFFFFFFFh +
jnz loc_1007BC0  +
push ebx  +
push edi  +
lea eax [ebp+String1] +
push eax  +
push offset aTargetwin9xver  +
push esi  +
call sub_1006879  +
cmp eax 0FFFFFFFFh +
jz loc_1007C06  +
mov eax [ebp+var_10C] +
imul eax eax +
add eax 394h +
push eax  +
push 40h  +
call ds:LocalAlloc  +
xor esi esi +
mov dword_10225A0 eax +
cmp eax esi +
jz loc_1007BF0  +
mov ecx [ebp+var_10C] +
mov [eax+7Ch] ecx +
jmp loc_1007C06  +
push esi  +
push 10h  +
push esi  +
push esi  +
push 44Ch  +
push esi  +
call sub_1007006  +
mov [ebp+var_110] esi +
mov ecx [ebp+var_4] +
mov eax [ebp+var_110] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010BBF  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push edi  +
mov edi [ebp+lpString2] +
cmp byte ptr [edi] 0 +
jz loc_1007CAD  +
push esi  +
mov esi dword_10225A0 +
add esi 85h +
jz loc_1007CAC  +
push ebx  +
mov ebx ds:lstrlenA +
cmp byte ptr [esi] 0 +
jz loc_1007C70  +
push edi  +
push esi  +
call ds:lstrcmpiA  +
test eax eax +
jz loc_1007C69  +
push esi  +
call ebx  +
lea esi [esi+eax+1] +
test esi esi +
jnz loc_1007C4B  +
jmp loc_1007CAB  +
mov [ebp+var_4] 1 +
mov edi [ebp+arg_4] +
mov eax esi +
sub eax dword_10225A0 +
sub eax 84h +
cmp [ebp+var_4] 0 +
mov [edi] eax +
jnz loc_1007CAB  +
push [ebp+lpString2]  +
push 104h  +
push esi  +
call sub_1006DCD  +
push esi  +
call ebx  +
mov ecx [edi] +
lea eax [eax+ecx+1] +
mov ecx dword_10225A0 +
mov [ecx+80h] eax +
pop ebx  +
pop esi  +
pop edi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 110h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_110] 0 +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
push 3Ah  +
push esi  +
call sub_1010BE0  +
mov ebx eax +
pop ecx  +
pop ecx  +
test ebx ebx +
jz loc_1007D62  +
movsx eax byte ptr [esi+1] +
push eax  +
call sub_101123A  +
pop ecx  +
push ebx  +
mov [ebp+var_109] al +
call ds:CharNextA  +
mov byte ptr [ebx] 0 +
cmp byte ptr [esi] 23h +
jnz loc_1007D62  +
cmp [ebp+var_109] 53h +
jz loc_1007D27  +
cmp [ebp+var_109] 57h +
jz loc_1007D27  +
cmp [ebp+var_109] 41h +
jnz loc_1007D62  +
xor ebx ebx +
inc ebx  +
push ebx  +
push 104h  +
lea ecx [ebp+String2] +
push ecx  +
push edi  +
push eax  +
call sub_1007793  +
test eax eax +
jz loc_1007D62  +
lea eax [edi+34h] +
push eax  +
lea eax [ebp+String2] +
push eax  +
call sub_1007C22  +
add edi 38h +
push edi  +
push esi  +
call sub_1007C22  +
mov [ebp+var_110] ebx +
mov ecx [ebp+var_4] +
mov eax [ebp+var_110] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010BBF  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 58h +
push ebx  +
push esi  +
push edi  +
mov edi 200h +
push edi  +
push 40h  +
call ds:LocalAlloc  +
mov ebx eax +
xor esi esi +
cmp ebx esi +
jnz loc_1007DB8  +
push esi  +
push 10h  +
push esi  +
push esi  +
push 44Ch  +
push [ebp+arg_0]  +
call sub_1007006  +
xor eax eax +
jmp loc_1007E57  +
push edi  +
push ebx  +
push [ebp+uID]  +
call sub_100684A  +
mov eax [ebp+arg_0] +
mov [ebp+var_58.hwndOwner] eax +
mov eax [ebp+arg_8] +
mov [ebp+var_58.lpstrFile] eax +
mov eax [ebp+arg_C] +
mov [ebp+var_58.nMaxFile] eax +
mov eax [ebp+arg_10] +
or eax 38180Ch +
mov [ebp+var_58.lStructSize] 58h +
mov [ebp+var_58.hInstance] esi +
mov [ebp+var_58.lpstrFilter] ebx +
mov [ebp+var_58.lpstrCustomFilter] esi +
mov [ebp+var_58.nMaxCustFilter] esi +
mov [ebp+var_58.nFilterIndex] 1 +
mov [ebp+var_58.lpstrFileTitle] esi +
mov [ebp+var_58.nMaxFileTitle] esi +
mov [ebp+var_58.lpstrInitialDir] offset Buffer +
mov [ebp+var_58.lpstrTitle] esi +
mov [ebp+var_58.Flags] eax +
call sub_1006CD5  +
test eax eax +
jz loc_1007E19  +
and [ebp+var_58.Flags] 0FFFFFDFFh +
mov eax [ebp+arg_1C] +
mov [ebp+var_58.lpstrDefExt] eax +
lea eax [ebp+var_58] +
push eax  +
mov [ebp+var_58.lCustData] esi +
mov [ebp+var_58.lpfnHook] esi +
mov [ebp+var_58.lpTemplateName] esi +
call ds:GetOpenFileNameA  +
mov edi eax +
mov eax [ebp+arg_14] +
cmp eax esi +
jz loc_1007E41  +
movzx ecx [ebp+var_58.nFileOffset] +
mov [eax] ecx +
mov eax [ebp+arg_18] +
cmp eax esi +
jz loc_1007E4E  +
movzx ecx [ebp+var_58.nFileExtension] +
mov [eax] ecx +
push ebx  +
call ds:LocalFree  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 58h +
push ebx  +
push esi  +
push edi  +
mov edi 200h +
push edi  +
push 40h  +
call ds:LocalAlloc  +
mov ebx eax +
xor esi esi +
cmp ebx esi +
jnz loc_1007E9D  +
push esi  +
push 10h  +
push esi  +
push esi  +
push 44Ch  +
push [ebp+arg_0]  +
call sub_1007006  +
xor eax eax +
jmp loc_1007F28  +
push edi  +
push ebx  +
push [ebp+uID]  +
call sub_100684A  +
mov eax [ebp+arg_0] +
mov [ebp+var_58.hwndOwner] eax +
mov eax [ebp+arg_8] +
mov [ebp+var_58.lpstrFile] eax +
mov eax [ebp+arg_C] +
mov [ebp+var_58.nMaxFile] eax +
mov eax [ebp+arg_10] +
or eax 20080Ch +
mov [ebp+var_58.Flags] eax +
mov eax [ebp+arg_1C] +
mov [ebp+var_58.lpstrDefExt] eax +
lea eax [ebp+var_58] +
push eax  +
mov [ebp+var_58.lStructSize] 58h +
mov [ebp+var_58.hInstance] esi +
mov [ebp+var_58.lpstrFilter] ebx +
mov [ebp+var_58.lpstrCustomFilter] esi +
mov [ebp+var_58.nMaxCustFilter] esi +
mov [ebp+var_58.nFilterIndex] 1 +
mov [ebp+var_58.lpstrFileTitle] esi +
mov [ebp+var_58.nMaxFileTitle] esi +
mov [ebp+var_58.lpstrInitialDir] esi +
mov [ebp+var_58.lpstrTitle] esi +
mov [ebp+var_58.lCustData] esi +
mov [ebp+var_58.lpfnHook] esi +
mov [ebp+var_58.lpTemplateName] esi +
call ds:GetSaveFileNameA  +
mov edi eax +
mov eax [ebp+arg_14] +
cmp eax esi +
jz loc_1007F12  +
movzx ecx [ebp+var_58.nFileOffset] +
mov [eax] ecx +
mov eax [ebp+arg_18] +
cmp eax esi +
jz loc_1007F1F  +
movzx ecx [ebp+var_58.nFileExtension] +
mov [eax] ecx +
push ebx  +
call ds:LocalFree  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi dword_10225A4 +
jmp loc_1007F52  +
lea eax [ebp+var_4] +
mov [ebp+var_4] esi +
mov esi [esi+0Ch] +
push eax  +
call sub_1006C34  +
test esi esi +
jnz loc_1007F43  +
and dword_10225A4 esi +
and dword_1022598 esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
push edi  +
mov edi ds:LocalAlloc +
push 10h  +
push 0  +
call edi  +
mov esi eax +
mov [ebp+var_8] esi +
test esi esi +
jz loc_1008010  +
push ebx  +
push [ebp+lpString]  +
call ds:lstrlenA  +
mov ebx eax +
inc ebx  +
push ebx  +
push 40h  +
call edi  +
push [ebp+arg_4]  +
mov [esi] eax +
call ds:lstrlenA  +
inc eax  +
push eax  +
push 40h  +
mov [ebp+var_4] eax +
call edi  +
xor edi edi +
mov [esi+4] eax +
cmp [esi] edi +
jz loc_1008004  +
cmp eax edi +
jz loc_1008004  +
push [ebp+lpString]  +
push ebx  +
push dword ptr [esi]  +
call sub_1006DCD  +
push [ebp+arg_4]  +
push [ebp+var_4]  +
push dword ptr [esi+4]  +
call sub_1006DCD  +
mov [esi+8] edi +
mov [esi+0Ch] edi +
mov eax dword_10225A4 +
cmp eax edi +
jnz loc_1007FF2  +
mov dword_10225A4 esi +
jmp loc_1007FFA  +
mov eax [eax+0Ch] +
cmp [eax+0Ch] edi +
jnz loc_1007FEF  +
mov [eax+0Ch] esi +
inc dword_1022598  +
mov eax esi +
jmp loc_100800F  +
lea eax [ebp+var_8] +
push eax  +
call sub_1006C34  +
xor eax eax +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 110h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
test eax eax +
jz loc_1008205  +
cmp byte ptr [eax] 0 +
jz loc_1008205  +
push offset asc_100158C  +
push eax  +
call sub_101126B  +
mov esi eax +
pop ecx  +
pop ecx  +
test esi esi +
jz loc_10081E1  +
mov ebx ds:CompareStringA +
mov edi 104h +
push 0FFFFFFFFh  +
push offset aN_0  +
push 0FFFFFFFFh  +
push esi  +
push 1  +
push 7Fh  +
call ebx  +
dec eax  +
dec eax  +
jnz loc_100808C  +
mov dword_10231C4 1 +
jmp loc_10081C9  +
cmp byte ptr [esi] 2Fh +
jz loc_10080A8  +
push 103h  +
push esi  +
push edi  +
mov esi offset byte_1020B74 +
push esi  +
call sub_1006E07  +
jmp loc_10081B9  +
movsx eax byte ptr [esi+1] +
push eax  +
call sub_101123A  +
pop ecx  +
cmp eax 4Fh +
jnz loc_1008137  +
cmp byte ptr [esi+2] 3Ah +
jnz loc_1008137  +
add esi 3 +
push esi  +
push edi  +
lea eax [ebp+var_108] +
push eax  +
call sub_1006DCD  +
lea eax [ebp+var_108] +
push 2Ch  +
push eax  +
call sub_1010BE0  +
pop ecx  +
pop ecx  +
mov [ebp+var_110] eax +
test eax eax +
jz loc_10081C9  +
mov byte ptr [eax] 0 +
lea eax [ebp+var_108] +
push eax  +
push edi  +
mov esi offset FileName +
push esi  +
call sub_1006DCD  +
lea eax [ebp+FilePart] +
push eax  +
push esi  +
push edi  +
push esi  +
call ds:GetFullPathNameA  +
mov eax [ebp+var_110] +
inc eax  +
cmp byte ptr [eax] 0 +
jz loc_10081C9  +
push 2Fh  +
push eax  +
push 30h  +
push offset byte_10231E0  +
call sub_1006E07  +
jmp loc_10081C9  +
push 0FFFFFFFFh  +
push offset aQ  +
push 0FFFFFFFFh  +
push esi  +
push 1  +
push 7Fh  +
call ebx  +
dec eax  +
dec eax  +
jnz loc_1008154  +
inc eax  +
mov word_1020B50 ax +
jmp loc_10081C9  +
push 0FFFFFFFFh  +
push offset aS  +
push 0FFFFFFFFh  +
push esi  +
push 1  +
push 7Fh  +
call ebx  +
dec eax  +
dec eax  +
jnz loc_1008171  +
inc eax  +
mov word_1020B54 ax +
jmp loc_10081C9  +
push 0FFFFFFFFh  +
push offset aM  +
push 0FFFFFFFFh  +
push esi  +
push 1  +
push 7Fh  +
call ebx  +
dec eax  +
dec eax  +
jnz loc_100818E  +
inc eax  +
mov word_1020B58 ax +
jmp loc_10081C9  +
cmp byte ptr [esi] 2Fh +
jnz loc_1008201  +
movsx eax byte ptr [esi+1] +
push eax  +
call sub_101123A  +
pop ecx  +
cmp eax 44h +
jnz loc_1008201  +
cmp byte ptr [esi+2] 3Ah +
jnz loc_1008201  +
add esi 3 +
push esi  +
push edi  +
mov esi offset byte_1023220 +
push esi  +
call sub_1006DCD  +
lea eax [ebp+FilePart] +
push eax  +
push esi  +
push edi  +
push esi  +
call ds:GetFullPathNameA  +
push offset asc_100158C  +
push 0  +
call sub_101126B  +
mov esi eax +
pop ecx  +
pop ecx  +
test esi esi +
jnz loc_1008069  +
xor eax eax +
inc eax  +
cmp word_1020B50 ax +
jnz loc_1008208  +
cmp dword_10231C4 0 +
jnz loc_1008208  +
xor ecx ecx +
mov word_1020B50 cx +
jmp loc_1008208  +
xor eax eax +
jmp loc_1008208  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010BBF  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+dwFileAttributes] +
push esi  +
push edi  +
push ebx  +
call ds:GetFileAttributesA  +
mov [ebp+dwFileAttributes] eax +
cmp eax 0FFFFFFFFh +
jz loc_100825C  +
test al 1 +
jz loc_100825C  +
push 80h  +
push ebx  +
call ds:SetFileAttributesA  +
test eax eax +
jnz loc_100825C  +
push eax  +
push 10h  +
push eax  +
push ebx  +
push 47Bh  +
push eax  +
call sub_1007006  +
mov esi ds:GetPrivateProfileIntA +
push ebx  +
push 0FFFFFFFFh  +
push offset KeyName  +
mov edi offset aVersion +
push edi  +
call esi  +
cmp eax 0FFFFFFFFh +
jnz loc_100828A  +
push ebx  +
push eax  +
push offset aSedversion  +
push edi  +
call esi  +
cmp eax 0FFFFFFFFh +
jnz loc_100828A  +
or eax eax +
jmp loc_10082D1  +
cmp [ebp+arg_10] 0 +
push ebx  +
push [ebp+nSize]  +
push [ebp+lpReturnedString]  +
jnz loc_10082A2  +
push [ebp+lpAppName]  +
call ds:GetPrivateProfileSectionA  +
jmp loc_10082B7  +
cmp eax 3 +
jl loc_1008297  +
push offset ValueName  +
push 0  +
push [ebp+lpAppName]  +
call ds:GetPrivateProfileStringA  +
cmp [ebp+dwFileAttributes] 0FFFFFFFFh +
mov esi eax +
jz loc_10082CF  +
test byte ptr [ebp+dwFileAttributes] 1 +
jz loc_10082CF  +
push [ebp+dwFileAttributes]  +
push ebx  +
call ds:SetFileAttributesA  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp byte_1023220 0 +
push esi  +
jnz loc_10082FB  +
push [ebp+nSize]  +
push [ebp+lpString]  +
call sub_1006D86  +
mov esi eax +
jmp loc_100830E  +
push offset byte_1023220  +
push [ebp+nSize]  +
push [ebp+lpString]  +
call sub_1006DCD  +
xor esi esi +
inc esi  +
push [ebp+arg_0]  +
push [ebp+nSize]  +
push [ebp+lpString]  +
call sub_101A172  +
test esi esi +
jz loc_1008332  +
push [ebp+lpString]  +
call ds:GetFileAttributesA  +
cmp eax 0FFFFFFFFh +
jnz loc_1008332  +
xor eax eax +
jmp loc_1008334  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
xor eax eax +
xor ebx ebx +
cmp [edi] al +
jz loc_100841F  +
push 5Ch  +
push edi  +
mov [ebp+var_4] ebx +
call sub_1019ED9  +
mov esi eax +
cmp esi ebx +
jz loc_100836E  +
mov al [esi] +
mov byte ptr [ebp+arg_4+3] al +
mov [esi] bl +
push edi  +
call ds:GetFileAttributesA  +
cmp [ebp+arg_8] ebx +
jz loc_10083B7  +
cmp eax 0FFFFFFFFh +
jnz loc_1008389  +
push 4  +
mov eax 483h +
pop ebx  +
jmp loc_1008392  +
test al 10h +
jnz loc_10083B7  +
mov eax 484h +
push ebx  +
push 20h  +
push 0  +
push edi  +
push eax  +
push [ebp+arg_0]  +
call sub_1007006  +
cmp eax 7 +
jz loc_10083AA  +
test ebx ebx +
jnz loc_10083B7  +
test esi esi +
jz loc_10083B3  +
mov al byte ptr [ebp+arg_4+3] +
mov [esi] al +
xor eax eax +
jmp loc_100841F  +
test esi esi +
jz loc_10083C0  +
mov al byte ptr [ebp+arg_4+3] +
mov [esi] al +
lea esi [edi+1] +
mov al [esi] +
cmp al 3Ah +
jnz loc_10083D4  +
cmp byte ptr [edi+2] 5Ch +
jnz loc_10083D4  +
lea esi [edi+3] +
jmp loc_1008417  +
cmp byte ptr [edi] 5Ch +
jnz loc_1008417  +
cmp al 5Ch +
jnz loc_1008417  +
lea esi [edi+2] +
mov [ebp+var_4] 2 +
jmp loc_1008417  +
cmp byte ptr [esi] 5Ch +
jnz loc_100840E  +
cmp byte ptr [esi-1] 3Ah +
jz loc_100840E  +
cmp [ebp+var_4] 0 +
jz loc_10083FF  +
dec [ebp+var_4]  +
jmp loc_100840E  +
push 0  +
push edi  +
mov byte ptr [esi] 0 +
call ds:CreateDirectoryA  +
mov byte ptr [esi] 5Ch +
push esi  +
call ds:CharNextA  +
mov esi eax +
cmp byte ptr [esi] 0 +
jnz loc_10083E9  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+0Ch] +
sub eax 4Eh +
push ebx  +
push esi  +
push edi  +
jz loc_1008532  +
sub eax 0C2h +
jz loc_10084EB  +
dec eax  +
jnz loc_1008669  +
mov ebx [ebp+8] +
push 8  +
xor esi esi +
push ebx  +
mov [ebp+14h] esi +
mov [ebp+0Ch] esi +
mov dword ptr [ebp-4] 1 +
call ds:GetWindowLongA  +
mov eax [eax+8] +
cmp eax esi +
jz loc_1008669  +
lea ecx [ebp-4] +
push ecx  +
lea ecx [ebp+14h] +
push ecx  +
lea ecx [ebp+0Ch] +
push ecx  +
movzx ecx word ptr [ebp+10h] +
push ecx  +
push ebx  +
call eax  +
cmp [ebp+0Ch] esi +
jz loc_1008669  +
push dword ptr [ebp+14h]  +
mov edi ds:SetWindowLongA +
push esi  +
push ebx  +
call edi  +
mov eax [ebp+14h] +
mov ecx dword_1020B44 +
mov [ecx] eax +
cmp [ebp-4] esi +
jz loc_10084C8  +
mov eax dword_1020B44 +
mov ecx [eax+44h] +
mov edx [eax] +
mov [eax+ecx*4+4] edx +
mov eax dword_1020B44 +
inc dword ptr [eax+44h]  +
mov eax [ebp+14h] +
mov ecx dword_1020B44 +
mov [ecx] eax +
mov eax [ebp+14h] +
imul eax eax +
push dword_101F000[eax]  +
push esi  +
push ebx  +
call edi  +
xor eax eax +
inc eax  +
jmp loc_10086B8  +
mov eax [ebp+14h] +
mov edi [eax+1Ch] +
mov ebx [ebp+8] +
push edi  +
push 8  +
push ebx  +
call ds:SetWindowLongA  +
push 835h  +
push ebx  +
call sub_1006720  +
push 3  +
xor esi esi +
push esi  +
push 470h  +
push ebx  +
call ds:GetParent  +
push eax  +
call ds:PostMessageA  +
mov edi [edi+4] +
cmp edi esi +
jz loc_10084E3  +
push 1  +
push ebx  +
call edi  +
jmp loc_10086B8  +
push 8  +
push dword ptr [ebp+8]  +
xor ebx ebx +
inc ebx  +
xor esi esi +
mov [ebp-4] ebx +
mov [ebp+0Ch] esi +
call ds:GetWindowLongA  +
mov edx [ebp+14h] +
mov ecx [edx+8] +
mov edi eax +
mov eax 0FFFFFF2Fh +
cmp ecx eax +
jz loc_100866D  +
jbe loc_1008659  +
lea ebx [eax+3] +
cmp ecx ebx +
jbe loc_100859F  +
cmp ecx 0FFFFFF38h +
jnz loc_1008659  +
push 3  +
push esi  +
push 470h  +
push dword ptr [ebp+8]  +
call ds:GetParent  +
push eax  +
call ds:PostMessageA  +
mov edi [edi+4] +
cmp edi esi +
jz loc_10084E3  +
push esi  +
push dword ptr [ebp+8]  +
jmp loc_100852B  +
***
mov edi [edi+10h] +
cmp edi esi +
jz loc_10085D3  +
lea eax [ebp-4] +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
xor eax eax +
cmp ecx ebx +
setnz al  +
push eax  +
push dword ptr [ebp+8]  +
call edi  +
test eax eax +
jnz loc_10085D0  +
push 0FFFFFFFFh  +
push esi  +
push dword ptr [ebp+8]  +
call ds:SetWindowLongA  +
jmp loc_10084E3  +
***
mov edx [ebp+14h] +
cmp [edx+8] ebx +
jz loc_1008604  +
cmp [ebp-4] esi +
jz loc_10085F3  +
mov eax dword_1020B44 +
mov ecx [eax+44h] +
mov edi [eax] +
mov [eax+ecx*4+4] edi +
mov eax dword_1020B44 +
inc dword ptr [eax+44h]  +
mov ecx [ebp+0Ch] +
mov eax dword_1020B44 +
cmp ecx esi +
jnz loc_100861B  +
mov ecx [eax] +
inc ecx  +
jmp loc_1008618  +
mov eax dword_1020B44 +
dec dword ptr [eax+44h]  +
mov eax dword_1020B44 +
mov ecx [eax+44h] +
mov ecx [eax+ecx*4+4] +
mov [ebp+0Ch] ecx +
cmp dword_1020B48 esi +
jz loc_100863D  +
push esi  +
push 5  +
push 471h  +
push dword ptr [ebp+8]  +
call ds:GetParent  +
push eax  +
call ds:PostMessageA  +
jmp loc_10085BF  +
***
cmp dword ptr [edx+8] 0FFFFFF30h +
jz loc_1008669  +
mov [eax] ecx +
mov eax [ebp+0Ch] +
imul eax eax +
push dword_101F000[eax]  +
jmp loc_10085C1  +
***
mov edi [edi+0Ch] +
cmp edi esi +
jz loc_1008669  +
push edx  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
call edi  +
xor eax eax +
jmp loc_10086B8  +
cmp dword_1020B48 esi +
jz loc_1008678  +
push esi  +
jmp loc_10086AC  +
mov edi [edi+14h] +
cmp edi esi +
jz loc_1008686  +
push dword ptr [ebp+8]  +
call edi  +
jmp loc_10086A4  +
push 104h  +
push 20h  +
push esi  +
push esi  +
push 3EAh  +
push dword ptr [ebp+8]  +
call sub_1007006  +
sub eax 6 +
neg eax  +
sbb eax eax +
inc eax  +
xor ecx ecx +
cmp eax esi +
setz cl  +
push ecx  +
push esi  +
push dword ptr [ebp+8]  +
call ds:SetWindowLongA  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp FileName 0 +
jz loc_10086EC  +
push [ebp+arg_C]  +
push offset FileName  +
push [ebp+nSize]  +
push [ebp+lpReturnedString]  +
push [ebp+lpAppName]  +
call sub_100821E  +
test eax eax +
jnz loc_1008702  +
push [ebp+arg_C]  +
push offset byte_1020B74  +
push [ebp+nSize]  +
push [ebp+lpReturnedString]  +
push [ebp+lpAppName]  +
call sub_100821E  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push esi  +
push edi  +
mov esi offset byte_1020B74 +
push esi  +
mov [ebp+lpAppName] eax +
call sub_10068E2  +
push eax  +
push 40h  +
mov [ebp+nSize] eax +
call ds:LocalAlloc  +
mov edi eax +
xor eax eax +
cmp edi eax +
jnz loc_100875B  +
push eax  +
push 10h  +
push eax  +
push eax  +
push 44Ch  +
push eax  +
call sub_1007006  +
xor eax eax +
jmp loc_10087DD  +
push ebx  +
mov ebx ds:GetPrivateProfileStringA +
mov [ebp+hMem] edi +
cmp [ebp+arg_4] eax +
jz loc_100877B  +
push 1  +
push esi  +
push [ebp+nSize]  +
push edi  +
push [ebp+lpAppName]  +
call sub_100821E  +
jmp loc_10087BD  +
push esi  +
push [ebp+nSize]  +
push edi  +
push offset ValueName  +
push 0  +
push [ebp+lpAppName]  +
call ebx  +
jmp loc_10087BD  +
cmp [ebp+arg_4] 0 +
jz loc_1008797  +
push edi  +
jmp loc_10087AD  +
push esi  +
push 30h  +
lea eax [ebp+ReturnedString] +
push eax  +
push offset ValueName  +
push edi  +
push [ebp+lpAppName]  +
call ebx  +
lea eax [ebp+ReturnedString] +
push eax  +
call sub_1006989  +
push edi  +
call ds:lstrlenA  +
lea edi [edi+eax+1] +
cmp byte ptr [edi] 0 +
jnz loc_100878E  +
push esi  +
push 0  +
push 0  +
push [ebp+lpAppName]  +
call ds:WritePrivateProfileStringA  +
push [ebp+hMem]  +
call ds:LocalFree  +
xor eax eax +
inc eax  +
pop ebx  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1010BBF  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi offset byte_1020B74 +
push edi  +
call sub_10068E2  +
push eax  +
push 40h  +
mov [ebp+nSize] eax +
call ds:LocalAlloc  +
mov esi eax +
xor ebx ebx +
cmp esi ebx +
jnz loc_1008834  +
push ebx  +
push 10h  +
push ebx  +
push ebx  +
push 44Ch  +
push ebx  +
call sub_1007006  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
push edi  +
push [ebp+nSize]  +
mov [ebp+hMem] esi +
push esi  +
push offset ValueName  +
push ebx  +
push [ebp+lpAppName]  +
call ds:GetPrivateProfileStringA  +
jmp loc_1008864  +
push 1  +
push esi  +
call sub_100870B  +
test eax eax +
jz loc_1008877  +
push esi  +
call ds:lstrlenA  +
lea esi [esi+eax+1] +
cmp [esi] bl +
jnz loc_100884D  +
push edi  +
push ebx  +
push ebx  +
push [ebp+lpAppName]  +
call ds:WritePrivateProfileStringA  +
xor ebx ebx +
inc ebx  +
push [ebp+hMem]  +
call ds:LocalFree  +
mov eax ebx +
jmp loc_100882D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 210h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx ds:WritePrivateProfileStringA +
push esi  +
push edi  +
mov esi offset byte_1020B74 +
push esi  +
push offset String  +
push offset aClass  +
mov edi offset aVersion +
push edi  +
call ebx  +
push esi  +
push 0  +
push offset KeyName  +
push edi  +
call ebx  +
push esi  +
push offset a3  +
push offset aSedversion  +
push edi  +
call ebx  +
push esi  +
push 0  +
push offset aExtractonly  +
mov edi offset aOptions +
push edi  +
call ebx  +
mov eax dword_1022584 +
sub eax 865h +
jz loc_100890B  +
dec eax  +
lea eax [ebp+AppName] +
jz loc_1008904  +
push offset aInstallapp  +
jmp loc_1008916  +
push offset aCreatecab  +
jmp loc_1008916  +
push offset aExtractonly  +
lea eax [ebp+AppName] +
push 208h  +
push eax  +
call sub_1006DCD  +
push esi  +
lea eax [ebp+AppName] +
push eax  +
push offset aPackagepurpose  +
push edi  +
call ebx  +
push esi  +
push 0Ah  +
lea eax [ebp+AppName] +
push eax  +
push dword_1022588  +
call sub_101137A  +
add esp 0Ch +
push eax  +
push offset aShowinstallpro  +
push edi  +
call ebx  +
push esi  +
push 0Ah  +
lea eax [ebp+AppName] +
push eax  +
mov eax dword_102258C +
and eax 1 +
push eax  +
call sub_101137A  +
add esp 0Ch +
push eax  +
push offset aHideextractani  +
push edi  +
call ebx  +
push esi  +
push 0Ah  +
lea eax [ebp+AppName] +
push eax  +
mov eax dword_102258C +
shr eax 1 +
and eax 1 +
push eax  +
call sub_101137A  +
add esp 0Ch +
push eax  +
push offset aUselongfilenam  +
push edi  +
call ebx  +
push esi  +
push 0Ah  +
lea eax [ebp+AppName] +
push eax  +
mov eax dword_102258C +
shr eax 3 +
and eax 1 +
push eax  +
call sub_101137A  +
add esp 0Ch +
push eax  +
push offset aInsidecompress  +
push edi  +
call ebx  +
push esi  +
push 0Ah  +
lea eax [ebp+AppName] +
push eax  +
mov eax dword_102258C+2 +
and eax 1 +
push eax  +
call sub_101137A  +
add esp 0Ch +
push eax  +
push offset aCab_fixedsize  +
push edi  +
call ebx  +
mov eax dword_102258C +
test eax 20000h +
jz loc_10089F8  +
xor eax eax +
inc eax  +
jmp loc_1008A10  +
test eax 40000h +
jz loc_1008A04  +
push 2  +
pop eax  +
jmp loc_1008A10  +
and eax 80000h +
neg eax  +
sbb eax eax +
and eax 3 +
push off_101F2C8[eax*4]  +
lea eax [ebp+AppName] +
push 208h  +
push eax  +
call sub_1006DCD  +
push esi  +
lea eax [ebp+AppName] +
push eax  +
push offset aCab_resvcodesi  +
push edi  +
call ebx  +
mov al byte ptr dword_1022594 +
mov [ebp+AppName] 0 +
test al 1 +
jz loc_1008A8A  +
test al 2 +
lea eax [ebp+AppName] +
jz loc_1008A59  +
push offset aA  +
jmp loc_1008A5E  +
push offset aI  +
push 208h  +
push eax  +
call sub_1006DCD  +
test byte ptr dword_1022594 4 +
jz loc_1008AA0  +
push offset aS_0  +
push 208h  +
lea eax [ebp+AppName] +
push eax  +
call sub_1006E54  +
jmp loc_1008AA0  +
push offset aN  +
push 208h  +
lea eax [ebp+AppName] +
push eax  +
call sub_1006DCD  +
push esi  +
lea eax [ebp+AppName] +
push eax  +
push offset aRebootmode  +
push edi  +
call ebx  +
mov eax offset unk_101F190 +
mov [ebp+var_210] eax +
jmp loc_1008AC3  +
mov eax [ebp+var_210] +
mov ecx [eax+8] +
xor edx edx +
push edx  +
push dword ptr [eax]  +
cmp ecx edx +
jz loc_1008AD8  +
cmp [ecx] edx +
jnz loc_1008AD8  +
push dword ptr [eax-8]  +
jmp loc_1008ADB  +
push dword ptr [eax-4]  +
push dword ptr [eax-0Ch]  +
push dword ptr [eax-10h]  +
call sub_10074C9  +
add [ebp+var_210] 1Ch +
cmp [ebp+var_210] offset unk_101F28C +
jl loc_1008ABD  +
test dword_102258C 10000h +
jz loc_1008B33  +
push 0  +
push 104h  +
push offset byte_1021710  +
push offset aIexp_layoutinf  +
push edi  +
call sub_10074C9  +
push 0  +
push 104h  +
push offset unk_1022060  +
push offset aSourcemedialab  +
push edi  +
call sub_10074C9  +
call sub_101010D  +
push esi  +
push 208h  +
lea eax [ebp+AppName] +
push eax  +
push offset ValueName  +
push offset aVersioninfo  +
push edi  +
call ds:GetPrivateProfileStringA  +
test eax eax +
jz loc_1008B86  +
push offset byte_1022010  +
lea eax [ebp+AppName] +
push eax  +
call ds:lstrcmpiA  +
test eax eax +
jz loc_1008B86  +
push 0  +
lea eax [ebp+AppName] +
push eax  +
call sub_100870B  +
test eax eax +
jnz loc_1008B86  +
xor eax eax +
jmp loc_1008BF2  +
cmp byte_1022010 0 +
jz loc_1008BAD  +
push esi  +
push offset byte_1022010  +
push offset aVersioninfo  +
push edi  +
call ebx  +
mov eax offset byte_1022010 +
push eax  +
push eax  +
call sub_1007683  +
test eax eax +
jz loc_1008B82  +
push esi  +
push 208h  +
lea eax [ebp+AppName] +
push eax  +
push offset ValueName  +
push offset aSourcefiles  +
push edi  +
call ds:GetPrivateProfileStringA  +
test eax eax +
jz loc_1008BDF  +
lea eax [ebp+AppName] +
push eax  +
call sub_10087F2  +
test eax eax +
jz loc_1008B82  +
push esi  +
push offset byte_1021FC0  +
push offset aSourcefiles  +
push edi  +
call ebx  +
call sub_10078E4  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010BBF  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 430h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
and [ebp+var_42C] 0 +
push ebx  +
push esi  +
push edi  +
push offset byte_1020B74  +
mov [ebp+hDlg] eax +
mov [ebp+AppName] 0 +
mov byte ptr [ebp+lpString1] 0 +
call sub_10066E5  +
test eax eax +
jnz loc_1008C57  +
mov edi 45Fh +
jmp loc_100967A  +
mov esi offset byte_10231E0 +
push esi  +
push 208h  +
lea eax [ebp+AppName] +
push eax  +
push offset ValueName  +
push offset aClass  +
push offset aVersion  +
call sub_1007436  +
test eax eax +
jl loc_100968D  +
mov ebx ds:CompareStringA +
push 0FFFFFFFFh  +
push offset String  +
push 0FFFFFFFFh  +
lea eax [ebp+AppName] +
push eax  +
push 1  +
push 7Fh  +
call ebx  +
dec eax  +
dec eax  +
jz loc_1008CAF  +
mov edi 475h +
jmp loc_100967A  +
push offset byte_1020B74  +
call sub_1007B0E  +
test eax eax +
jz loc_100968D  +
cmp FileName 0 +
jz loc_1008CFF  +
cmp byte_10231E0 0 +
jz loc_1008CFF  +
push offset FileName  +
call sub_1007B0E  +
test eax eax +
jz loc_100968D  +
push offset FileName  +
push 50h  +
push offset ReturnedString  +
mov eax offset AppName +
push eax  +
push eax  +
push esi  +
call ds:GetPrivateProfileStringA  +
push esi  +
push 0  +
push offset aExtractonly  +
mov edi offset aOptions +
push edi  +
call sub_100693B  +
test eax eax +
jz loc_1008D22  +
mov dword_1022584 865h +
jmp loc_1008D8D  +
push esi  +
push 208h  +
lea eax [ebp+AppName] +
push eax  +
push offset aInstallapp  +
push offset aPackagepurpose  +
push edi  +
call sub_1007436  +
push 0FFFFFFFFh  +
push offset aInstallapp  +
push 0FFFFFFFFh  +
lea eax [ebp+AppName] +
push eax  +
push 1  +
push 7Fh  +
call ebx  +
dec eax  +
dec eax  +
jnz loc_1008D65  +
mov dword_1022584 864h +
jmp loc_1008D8D  +
push 0FFFFFFFFh  +
push offset aExtractonly  +
push 0FFFFFFFFh  +
lea eax [ebp+AppName] +
push eax  +
push 1  +
push 7Fh  +
call ebx  +
dec eax  +
dec eax  +
neg eax  +
sbb eax eax +
neg eax  +
add eax 865h +
mov dword_1022584 eax +
push esi  +
push 0  +
push offset aShowinstallpro  +
push edi  +
call sub_100693B  +
and dword_102258C 0 +
mov dword_1022588 eax +
mov [ebp+lpReturnedString] offset unk_101F284 +
mov eax [ebp+lpReturnedString] +
push esi  +
push 0  +
push dword ptr [eax-4]  +
push edi  +
call sub_100693B  +
test eax eax +
jz loc_1008DD5  +
mov eax [ebp+lpReturnedString] +
mov eax [eax] +
or dword_102258C eax +
add [ebp+lpReturnedString] 8 +
cmp [ebp+lpReturnedString] offset lpString2 +
jl loc_1008DB1  +
push esi  +
push 208h  +
lea eax [ebp+AppName] +
push eax  +
push offset ValueName  +
push offset aMultiinstancec  +
push edi  +
call sub_1007436  +
movsx eax [ebp+AppName] +
push eax  +
call sub_101123A  +
pop ecx  +
cmp eax 42h +
jz loc_1008E26  +
cmp eax 50h +
jnz loc_1008E30  +
or dword_102258C 40h +
jmp loc_1008E30  +
or dword_102258C 80h +
test byte ptr dword_102258C 0C0h +
jz loc_1008EB2  +
lea eax [ebp+AppName] +
push 22h  +
push eax  +
call sub_1010BE0  +
pop ecx  +
pop ecx  +
mov [ebp+hMem] eax +
test eax eax +
jz loc_1009675  +
inc [ebp+hMem]  +
push 22h  +
push [ebp+hMem]  +
call sub_1010BE0  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1009675  +
push [ebp+hMem]  +
mov byte ptr [eax] 0 +
call ds:lstrlenA  +
inc eax  +
push eax  +
push 40h  +
mov [ebp+var_41C] eax +
call ds:LocalAlloc  +
mov hMem eax +
test eax eax +
jz loc_100946F  +
push [ebp+hMem]  +
push [ebp+var_41C]  +
push eax  +
call sub_1006DCD  +
push esi  +
push 0  +
push offset aCab_fixedsize  +
push edi  +
call sub_100693B  +
test eax eax +
jz loc_1008ECE  +
or dword_102258C 10000h +
push esi  +
push 104h  +
push offset byte_1021710  +
push offset ValueName  +
push offset aIexp_layoutinf  +
push edi  +
call sub_1007436  +
push esi  +
push 104h  +
push offset unk_1022060  +
push offset aApplicationSou  +
push offset aSourcemedialab  +
push edi  +
call sub_1007436  +
push esi  +
push 208h  +
lea eax [ebp+AppName] +
push eax  +
push offset a6144  +
push offset aCab_resvcodesi  +
push edi  +
call sub_1007436  +
push 0FFFFFFFFh  +
push lpString2  +
lea eax [ebp+AppName] +
push 0FFFFFFFFh  +
push eax  +
push 1  +
push 7Fh  +
call ebx  +
dec eax  +
dec eax  +
jnz loc_1008F48  +
or dword_102258C 20000h +
jmp loc_1008F94  +
push 0FFFFFFFFh  +
push off_101F2D0  +
lea eax [ebp+AppName] +
push 0FFFFFFFFh  +
push eax  +
push 1  +
push 7Fh  +
call ebx  +
dec eax  +
dec eax  +
jnz loc_1008F6F  +
or dword_102258C 40000h +
jmp loc_1008F94  +
push 0FFFFFFFFh  +
push off_101F2D4  +
lea eax [ebp+AppName] +
push 0FFFFFFFFh  +
push eax  +
push 1  +
push 7Fh  +
call ebx  +
dec eax  +
dec eax  +
jnz loc_1008F94  +
or dword_102258C 80000h +
push esi  +
push 208h  +
lea eax [ebp+AppName] +
push eax  +
push offset ValueName  +
push offset aCompressiontyp  +
push edi  +
call sub_1007436  +
cmp [ebp+AppName] 0 +
jnz loc_1008FE4  +
push esi  +
mov ebx 3E7h +
push ebx  +
push offset aQuantum  +
push edi  +
call sub_100693B  +
mov dword_102257C eax +
cmp eax ebx +
jz loc_1009054  +
mov lpString1 offset aQuantum_0 +
jmp loc_1009068  +
push 0FFFFFFFFh  +
push offset aLzx  +
push 0FFFFFFFFh  +
lea eax [ebp+AppName] +
push eax  +
push 1  +
push 7Fh  +
call ebx  +
dec eax  +
dec eax  +
jnz loc_100900A  +
mov lpString1 offset aLzx +
jmp loc_100905E  +
push 0FFFFFFFFh  +
push offset aQuantum_0  +
push 0FFFFFFFFh  +
lea eax [ebp+AppName] +
push eax  +
push 1  +
push 7Fh  +
call ebx  +
dec eax  +
dec eax  +
jnz loc_1009030  +
mov lpString1 offset aQuantum_0 +
jmp loc_100905E  +
push 0FFFFFFFFh  +
push offset aNone  +
push 0FFFFFFFFh  +
lea eax [ebp+AppName] +
push eax  +
push 1  +
push 7Fh  +
call ebx  +
dec eax  +
dec eax  +
mov lpString1 offset aNone +
jz loc_100905E  +
mov lpString1 offset aMszip +
mov dword_102257C 7 +
and dword_1022594 0 +
push esi  +
push 208h  +
lea eax [ebp+AppName] +
push eax  +
push offset aI  +
push offset aRebootmode  +
push edi  +
call sub_1007436  +
cmp [ebp+AppName] 0 +
jz loc_10090EA  +
lea ebx [ebp+AppName] +
movsx eax byte ptr [ebx] +
push eax  +
call sub_101123A  +
inc ebx  +
pop ecx  +
cmp eax 41h +
jz loc_10090DE  +
cmp eax 49h +
jz loc_10090CC  +
cmp eax 4Eh +
jz loc_10090C3  +
cmp eax 53h +
jnz loc_10090E5  +
or dword_1022594 4 +
jmp loc_10090E5  +
and dword_1022594 0FFFFFFFEh +
jmp loc_10090E5  +
mov eax dword_1022594 +
and eax 0FFFFFFFDh +
or eax 1 +
mov dword_1022594 eax +
jmp loc_10090E5  +
or dword_1022594 3 +
cmp byte ptr [ebx] 0 +
jnz loc_100909B  +
push esi  +
push 0  +
push offset aPackageinstall  +
push edi  +
call sub_100693B  +
mov dword_102259C eax +
mov ebx offset unk_101F190 +
push dword ptr [ebx+4]  +
push dword ptr [ebx]  +
push dword ptr [ebx-4]  +
push dword ptr [ebx-8]  +
push dword ptr [ebx-0Ch]  +
push dword ptr [ebx-10h]  +
call sub_1007436  +
test eax eax +
jl loc_100968D  +
mov eax [ebx+8] +
test eax eax +
jz loc_1009133  +
mov ecx [ebx-4] +
xor edx edx +
cmp [ecx] dl +
setnz dl  +
mov [eax] edx +
add ebx 1Ch +
cmp ebx offset unk_101F28C +
jl loc_1009102  +
cmp dword_1022584 866h +
jnz loc_100916C  +
push 104h  +
push offset byte_102160C  +
push offset NewFileName  +
push [ebp+hDlg]  +
call sub_100FAA7  +
test eax eax +
jz loc_100968D  +
push esi  +
push 50h  +
push offset byte_1021FC0  +
push offset ValueName  +
push offset aSourcefiles  +
push edi  +
call sub_1007436  +
test eax eax +
jg loc_1009192  +
mov edi 476h +
jmp loc_100967A  +
push offset FileName  +
call sub_10068E2  +
push offset byte_1020B74  +
mov ebx eax +
call sub_10068E2  +
cmp eax ebx +
jbe loc_10091B3  +
push offset byte_1020B74  +
jmp loc_10091B8  +
push offset FileName  +
call sub_10068E2  +
mov ebx ds:LocalAlloc +
push eax  +
push 40h  +
mov [ebp+lpKeyName] eax +
call ebx  +
push [ebp+lpKeyName]  +
mov [ebp+lpReturnedString] eax +
push 40h  +
call ebx  +
mov ebx eax +
mov eax [ebp+lpReturnedString] +
mov [ebp+var_424] ebx +
test eax eax +
jz loc_100946F  +
test ebx ebx +
jz loc_100946F  +
mov ecx [ebp+lpKeyName] +
mov [ebp+hMem] eax +
mov eax offset byte_1021FC0 +
push eax  +
shr ecx 1 +
push ecx  +
push ebx  +
push offset ValueName  +
push 0  +
push eax  +
mov [ebp+var_41C] ebx +
call sub_1007436  +
cmp byte ptr [ebx] 0 +
mov ebx 104h +
jz loc_100932E  +
push [ebp+var_424]  +
lea eax [ebp+AppName] +
push 208h  +
push eax  +
call sub_1006DCD  +
push [ebp+var_424]  +
call ds:lstrlenA  +
mov ecx [ebp+var_424] +
lea eax [ecx+eax+1] +
mov [ebp+var_424] eax +
mov eax offset byte_1021FC0 +
push eax  +
push ebx  +
lea ecx [ebp+lpString1] +
push ecx  +
push offset ValueName  +
lea ecx [ebp+AppName] +
push ecx  +
push eax  +
call sub_1007436  +
push 1  +
push [ebp+lpKeyName]  +
lea eax [ebp+AppName] +
push [ebp+lpReturnedString]  +
push eax  +
call sub_10086C4  +
test eax eax +
jz loc_1009479  +
jl loc_1009499  +
push offset ValueName  +
push ebx  +
lea eax [ebp+lpString1] +
push eax  +
call sub_101A172  +
mov eax [ebp+lpReturnedString] +
jmp loc_100930E  +
push 208h  +
push [ebp+lpReturnedString]  +
lea eax [ebp+AppName] +
push eax  +
call sub_10072DF  +
lea eax [ebp+lpString1] +
push eax  +
lea eax [ebp+AppName] +
push eax  +
call sub_1007F6A  +
push [ebp+lpReturnedString]  +
call ds:lstrlenA  +
mov ecx [ebp+lpReturnedString] +
lea eax [ecx+eax+1] +
mov [ebp+lpReturnedString] eax +
cmp byte ptr [eax] 0 +
jnz loc_10092C8  +
mov eax [ebp+hMem] +
mov [ebp+lpReturnedString] eax +
mov eax [ebp+var_424] +
cmp byte ptr [eax] 0 +
jnz loc_1009233  +
push [ebp+hMem]  +
call ds:LocalFree  +
push [ebp+var_41C]  +
call ds:LocalFree  +
cmp dword_10225A0 0 +
jz loc_10095B1  +
push esi  +
push 208h  +
lea eax [ebp+AppName] +
push eax  +
push offset ValueName  +
push offset aTargetntversio  +
push edi  +
call sub_1007436  +
test eax eax +
jl loc_100968D  +
push 0  +
push ebx  +
lea eax [ebp+lpString1] +
push eax  +
mov eax dword_10225A0 +
add eax 4 +
push eax  +
lea eax [ebp+AppName] +
push eax  +
call sub_1007793  +
test eax eax +
jz loc_100968D  +
mov eax dword_10225A0 +
add eax 38h +
push eax  +
lea eax [ebp+lpString1] +
push eax  +
call sub_1007C22  +
push esi  +
push 208h  +
lea eax [ebp+AppName] +
push eax  +
push offset ValueName  +
push offset aTargetwin9xver  +
push edi  +
call sub_1007436  +
test eax eax +
jl loc_100968D  +
push 0  +
push ebx  +
lea eax [ebp+lpString1] +
push eax  +
mov eax dword_10225A0 +
add eax 40h +
push eax  +
lea eax [ebp+AppName] +
push eax  +
call sub_1007793  +
test eax eax +
jz loc_100968D  +
mov eax dword_10225A0 +
add eax 74h +
push eax  +
lea eax [ebp+lpString1] +
push eax  +
call sub_1007C22  +
push esi  +
push 208h  +
lea eax [ebp+AppName] +
push eax  +
push offset ValueName  +
push offset aTargetfilevers  +
push edi  +
call sub_1007436  +
test eax eax +
jl loc_100968D  +
cmp [ebp+AppName] 0 +
mov ecx dword_10225A0 +
jz loc_100959C  +
mov eax [ecx+7Ch] +
test eax eax +
jz loc_100959C  +
lea ecx [ebp+var_41C] +
push ecx  +
push 3Ch  +
pop ecx  +
mul  ecx +
push edx  +
push eax  +
call sub_100FF9B  +
test eax eax +
jge loc_10094A0  +
mov edi 44Ch +
jmp loc_100967A  +
mov edi 47Dh +
push [ebp+hMem]  +
mov esi ds:LocalFree +
call esi  +
push [ebp+var_41C]  +
call esi  +
jmp loc_100967A  +
mov edi 47Ch +
jmp loc_100947E  +
push [ebp+var_41C]  +
push 40h  +
call ds:LocalAlloc  +
mov edi eax +
mov [ebp+var_424] edi +
test edi edi +
jz loc_100946F  +
cmp [ebp+AppName] 40h +
jnz loc_100965D  +
push esi  +
push ebx  +
mov [ebp+var_41C] eax +
lea eax [ebp+lpString1] +
push eax  +
push offset ValueName  +
xor edi edi +
push edi  +
lea eax [ebp-20Bh] +
push eax  +
call sub_1007436  +
cmp byte ptr [ebp+lpString1] 0 +
jz loc_1009562  +
lea eax [ebp+lpString1] +
mov [ebp+lpKeyName] eax +
push esi  +
push ebx  +
lea eax [ebp+var_414] +
push eax  +
push offset ValueName  +
push [ebp+lpKeyName]  +
lea eax [ebp-20Bh] +
push eax  +
call sub_1007436  +
push [ebp+var_41C]  +
lea eax [ebp+var_414] +
push eax  +
call sub_1007CB7  +
test eax eax +
jz loc_100964A  +
push [ebp+lpKeyName]  +
add [ebp+var_41C] 3Ch +
call ds:lstrlenA  +
lea edi [edi+eax+1] +
lea eax [ebp+edi+lpString1] +
cmp byte ptr [eax] 0 +
mov [ebp+lpKeyName] eax +
jnz loc_10094FF  +
mov eax dword_10225A0 +
mov ecx [eax+7Ch] +
imul ecx ecx +
push ecx  +
mov ecx [eax+80h] +
push [ebp+var_424]  +
lea eax [ecx+eax+84h] +
push eax  +
call loc_10113B0  +
add esp 0Ch +
push [ebp+var_424]  +
call ds:LocalFree  +
mov ecx dword_10225A0 +
mov eax [ecx+7Ch] +
mov edx [ecx+80h] +
imul eax eax +
lea eax [eax+edx+88h] +
mov [ecx] eax +
push 0  +
push offset NewFileName  +
push 0  +
call sub_100833E  +
push ebx  +
push offset byte_1021B18  +
mov esi offset unk_1021E1C +
push esi  +
call sub_100F910  +
push 200h  +
push offset byte_1021918  +
mov edi offset unk_1021C1C +
push edi  +
call sub_100F910  +
push ebx  +
push offset byte_1022164  +
push offset unk_1022268  +
call sub_100F910  +
push ebx  +
push offset byte_102236C  +
mov ebx offset unk_1022470 +
push ebx  +
call sub_100F910  +
cmp dword_1022584 864h +
jnz loc_100963E  +
push esi  +
call sub_100F9FC  +
test eax eax +
jz loc_100968D  +
push edi  +
call sub_100F9FC  +
test eax eax +
jz loc_100968D  +
push offset unk_1022268  +
call sub_100F9FC  +
test eax eax +
jz loc_100968D  +
push ebx  +
call sub_100F9FC  +
test eax eax +
jz loc_100968D  +
mov [ebp+var_42C] 1 +
jmp loc_100968D  +
push [ebp+var_424]  +
call ds:LocalFree  +
mov edi 481h +
jmp loc_100967A  +
push edi  +
lea eax [ebp+AppName] +
push eax  +
call sub_1007CB7  +
test eax eax +
jnz loc_1009562  +
push edi  +
jmp loc_1009650  +
mov edi 47Fh +
xor eax eax +
push eax  +
push 10h  +
push eax  +
push eax  +
push edi  +
push [ebp+hDlg]  +
call sub_1007006  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_42C] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010BBF  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 370h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
push 7  +
pop ecx  +
push 6  +
mov esi offset a_setCabinetnam +
lea edi [ebp+var_D4] +
movs   +
movs   +
pop ecx  +
mov esi offset a_setCompressio +
lea edi [ebp+var_7C] +
movs   +
movs   +
push 6  +
pop ecx  +
mov esi offset a_setCompress_0 +
lea edi [ebp+var_98] +
movs   +
movs   +
movs   +
push 5  +
pop ecx  +
mov esi offset a_setInffilenam +
lea edi [ebp+var_60] +
movs   +
movs   +
push 5  +
pop ecx  +
mov esi offset a_setRptfilenam +
lea edi [ebp+var_30] +
movs   +
movs   +
push 5  +
pop ecx  +
mov esi offset a_setMaxdisksiz +
lea edi [ebp+var_48] +
movs   +
movs   +
push 8  +
pop ecx  +
push 0Ch  +
mov esi offset a_setReserveper +
lea edi [ebp+var_F4] +
movs   +
pop ecx  +
mov esi offset a_setInfcabinet +
lea edi [ebp+var_22C] +
movs   +
movs   +
mov esi offset a_setCompressS +
lea edi [ebp+var_18] +
movs   +
movs   +
mov ebx [ebp+arg_0] +
movs   +
movs   +
movs   +
push 7  +
movs   +
pop ecx  +
mov esi offset a_setCompress_1 +
lea edi [ebp+var_B4] +
movs   +
xor esi esi +
push esi  +
push 80h  +
mov [ebp+var_344] ebx +
mov [ebp+var_340] 1 +
mov [ebp+var_370] offset a_setDiskdirect +
mov dword ptr [ebp+SystemInfo.anonymous_0] offset a_setCabinetOn +
mov [ebp+SystemInfo.dwPageSize] offset a_setMaxcabinet +
mov [ebp+SystemInfo.lpMinimumApplicationAddress] offset a_setInfdiskhea +
mov [ebp+SystemInfo.lpMaximumApplicationAddress] offset a_setInfdisklin +
mov [ebp+SystemInfo.dwActiveProcessorMask] offset a_setInfcabin_0 +
mov [ebp+SystemInfo.dwNumberOfProcessors] offset a_setInffilehea +
mov [ebp+SystemInfo.dwProcessorType] offset a_setInffileh_0 +
mov [ebp+SystemInfo.dwAllocationGranularity] offset a_setInffilelin +
mov dword ptr [ebp+SystemInfo.wProcessorLevel] esi +
push 2  +
push esi  +
push esi  +
push 40000000h  +
push offset byte_1021508  +
call ds:CreateFileA  +
mov [ebp+hObject] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1009814  +
push esi  +
push 10h  +
push esi  +
push esi  +
push 462h  +
push ebx  +
call sub_1007006  +
xor eax eax +
jmp loc_1009E7B  +
mov edi 200h +
push edi  +
push 40h  +
call ds:LocalAlloc  +
mov [ebp+hMem] eax +
cmp eax esi +
jnz loc_100984A  +
push esi  +
push 10h  +
push esi  +
push esi  +
push 44Ch  +
push ebx  +
call sub_1007006  +
push [ebp+hObject]  +
call ds:CloseHandle  +
jmp loc_100980D  +
push 100h  +
lea eax [ebp+Buffer] +
push eax  +
push 41Ch  +
call sub_100684A  +
mov ebx ds:lstrlenA +
push esi  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
call ebx  +
mov esi ds:WriteFile +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+hObject]  +
call esi  +
push offset byte_102160C  +
lea eax [ebp+var_D4] +
push eax  +
push edi  +
push [ebp+hMem]  +
call sub_1006E95  +
add esp 10h +
push 0  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push [ebp+hMem]  +
call ebx  +
push eax  +
push [ebp+hMem]  +
push [ebp+hObject]  +
call esi  +
push lpString1  +
lea eax [ebp+var_7C] +
push eax  +
push edi  +
push [ebp+hMem]  +
call sub_1006E95  +
add esp 10h +
push 0  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push [ebp+hMem]  +
call ebx  +
push eax  +
push [ebp+hMem]  +
push [ebp+hObject]  +
call esi  +
push dword_102257C  +
lea eax [ebp+var_98] +
push eax  +
push edi  +
push [ebp+hMem]  +
call sub_1006E95  +
add esp 10h +
push 0  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push [ebp+hMem]  +
call ebx  +
push eax  +
push [ebp+hMem]  +
push [ebp+hObject]  +
call esi  +
push offset byte_1021710  +
lea eax [ebp+var_60] +
push eax  +
push edi  +
push [ebp+hMem]  +
call sub_1006E95  +
add esp 10h +
push 0  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push [ebp+hMem]  +
call ebx  +
push eax  +
push [ebp+hMem]  +
push [ebp+hObject]  +
call esi  +
push offset byte_1021814  +
lea eax [ebp+var_30] +
push eax  +
push edi  +
push [ebp+hMem]  +
call sub_1006E95  +
add esp 10h +
push 0  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push [ebp+hMem]  +
call ebx  +
push eax  +
push [ebp+hMem]  +
push [ebp+hObject]  +
call esi  +
test dword_102258C 10000h +
mov eax offset a1_44m +
jnz loc_10099C3  +
mov eax offset aCdrom +
push eax  +
lea eax [ebp+var_48] +
push eax  +
push edi  +
push [ebp+hMem]  +
call sub_1006E95  +
add esp 10h +
push 0  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push [ebp+hMem]  +
call ebx  +
push eax  +
push [ebp+hMem]  +
push [ebp+hObject]  +
call esi  +
mov eax dword_102258C +
test eax 20000h +
jz loc_1009A08  +
xor eax eax +
inc eax  +
jmp loc_1009A20  +
test eax 40000h +
jz loc_1009A14  +
push 2  +
pop eax  +
jmp loc_1009A20  +
and eax 80000h +
neg eax  +
sbb eax eax +
and eax 3 +
push off_101F2C8[eax*4]  +
lea eax [ebp+var_F4] +
push eax  +
push edi  +
push [ebp+hMem]  +
call sub_1006E95  +
add esp 10h +
push 0  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push [ebp+hMem]  +
call ebx  +
push eax  +
push [ebp+hMem]  +
push [ebp+hObject]  +
call esi  +
push offset unk_1022060  +
lea eax [ebp+var_22C] +
push eax  +
push edi  +
push [ebp+hMem]  +
call sub_1006E95  +
add esp 10h +
push 0  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push [ebp+hMem]  +
call ebx  +
push eax  +
push [ebp+hMem]  +
push [ebp+hObject]  +
call esi  +
push offset byte_10231E0  +
push 104h  +
lea eax [ebp+Filename] +
push eax  +
push offset aOn  +
push offset aCompress  +
push offset aOptions  +
call sub_1007436  +
lea eax [ebp+Filename] +
push eax  +
lea eax [ebp+var_18] +
push eax  +
push edi  +
push [ebp+hMem]  +
call sub_1006E95  +
add esp 10h +
push 0  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push [ebp+hMem]  +
call ebx  +
push eax  +
push [ebp+hMem]  +
push [ebp+hObject]  +
call esi  +
push offset byte_10231E0  +
push 15h  +
push offset aCompressionmem  +
push offset aOptions  +
call sub_100693B  +
test eax eax +
jg loc_1009B14  +
push 15h  +
pop eax  +
push eax  +
lea eax [ebp+var_B4] +
push eax  +
push edi  +
push [ebp+hMem]  +
call sub_1006E95  +
add esp 10h +
push 0  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push [ebp+hMem]  +
call ebx  +
push eax  +
push [ebp+hMem]  +
push [ebp+hObject]  +
call esi  +
and [ebp+var_33C] 0 +
mov [ebp+lpString] offset a_setDiskdirect +
push 0  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push [ebp+lpString]  +
call ebx  +
push eax  +
push [ebp+lpString]  +
push [ebp+hObject]  +
call esi  +
inc [ebp+var_33C]  +
mov eax [ebp+var_33C] +
mov eax [ebp+eax*4+var_370] +
mov [ebp+lpString] eax +
test eax eax +
jnz loc_1009B5C  +
mov eax dword_10225A4 +
mov [ebp+var_33C] eax +
jmp loc_1009BAC  +
mov eax [ebp+var_33C] +
test eax eax +
jz loc_1009D47  +
push dword ptr [eax+4]  +
push edi  +
push [ebp+hMem]  +
call sub_1006DCD  +
mov eax [ebp+var_33C] +
push dword ptr [eax]  +
push edi  +
push [ebp+hMem]  +
call sub_1006E54  +
push [ebp+hMem]  +
call ds:GetFileAttributesA  +
cmp eax 0FFFFFFFFh +
jz loc_1009D1A  +
test al 10h +
jnz loc_1009D1A  +
test byte ptr dword_102258C 2 +
lea eax [ebp+Filename] +
jz loc_1009C5A  +
push offset asc_100150C  +
push 104h  +
push eax  +
call sub_1006DCD  +
test eax eax +
jl loc_100980D  +
push [ebp+hMem]  +
lea eax [ebp+Filename] +
push 104h  +
push eax  +
call sub_1006E54  +
test eax eax +
jl loc_100980D  +
push offset asc_100150C  +
push 104h  +
lea eax [ebp+Filename] +
push eax  +
call sub_1006E54  +
test eax eax +
jl loc_100980D  +
jmp loc_1009C74  +
push 104h  +
push eax  +
push [ebp+hMem]  +
call ds:GetShortPathNameA  +
test eax eax +
jz loc_1009D0C  +
push 0  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
lea eax [ebp+Filename] +
push eax  +
call ebx  +
push eax  +
lea eax [ebp+Filename] +
push eax  +
push [ebp+hObject]  +
call esi  +
push 0  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push offset asc_1001714  +
call ebx  +
push eax  +
push offset asc_1001714  +
push [ebp+hObject]  +
call esi  +
mov ecx [ebp+var_33C] +
mov ecx [ecx+0Ch] +
mov [ebp+var_340] eax +
mov [ebp+var_33C] ecx +
test eax eax +
jnz loc_1009BA6  +
push [ebp+hMem]  +
call ds:LocalFree  +
push [ebp+hObject]  +
call ds:CloseHandle  +
xor eax eax +
cmp [ebp+var_340] eax +
jnz loc_1009E78  +
push eax  +
push 10h  +
push eax  +
push eax  +
push 463h  +
push [ebp+var_344]  +
jmp loc_1009808  +
xor eax eax +
push eax  +
push 10h  +
push eax  +
push eax  +
push 46Fh  +
jmp loc_1009D2B  +
push 0  +
push 10h  +
push 0  +
push [ebp+hMem]  +
push 46Eh  +
push [ebp+var_344]  +
call sub_1007006  +
push [ebp+hMem]  +
call ds:LocalFree  +
jmp loc_100983C  +
cmp [ebp+var_340] 0 +
jz loc_1009CD1  +
test byte ptr dword_102258C 4 +
jz loc_1009CD1  +
lea eax [ebp+SystemInfo] +
push eax  +
call ds:GetSystemInfo  +
push offset byte_10231E0  +
push 0FFFFFFFFh  +
push offset aPackageforx86  +
push offset aOptions  +
call sub_100693B  +
mov [ebp+var_33C] offset off_101F27C +
cmp [ebp+var_340] 0 +
jz loc_1009CD1  +
mov ecx [ebp+var_33C] +
xor eax eax +
push eax  +
push dword ptr [ecx]  +
push eax  +
push eax  +
call sub_10071E9  +
test eax eax +
jnz loc_1009E45  +
push 104h  +
lea eax [ebp+Filename] +
push eax  +
mov eax [ebp+var_33C] +
push dword ptr [eax]  +
call sub_10082DD  +
test eax eax +
jz loc_1009E61  +
push offset asc_100150C  +
push edi  +
push [ebp+hMem]  +
call sub_1006DCD  +
lea eax [ebp+Filename] +
push eax  +
push edi  +
push [ebp+hMem]  +
call sub_1006E54  +
push offset asc_100150C  +
push edi  +
push [ebp+hMem]  +
call sub_1006E54  +
push 0  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push [ebp+hMem]  +
call ebx  +
push eax  +
push [ebp+hMem]  +
push [ebp+hObject]  +
call esi  +
push 0  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push 2  +
push offset asc_1001714  +
push [ebp+hObject]  +
call esi  +
mov [ebp+var_340] eax +
add [ebp+var_33C] 4 +
cmp [ebp+var_33C] offset off_101F280 +
jl loc_1009D8A  +
jmp loc_1009CD1  +
push 0  +
push 10h  +
push 0  +
lea eax [ebp+Filename] +
push eax  +
push 46Dh  +
jmp loc_1009D2B  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010BBF  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 6B0h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
push 200h  +
lea eax [ebp+lParam] +
push eax  +
push 41Dh  +
mov [ebp+hDlg] esi +
call sub_100684A  +
lea eax [ebp+lParam] +
push eax  +
push 856h  +
push esi  +
call sub_1006BBF  +
push esi  +
call sub_10096A9  +
test eax eax +
jz loc_100A21B  +
push ebx  +
push 0FFFFFFFFh  +
push offset aQuantum_0  +
push 0FFFFFFFFh  +
push lpString1  +
push 1  +
push 7Fh  +
call ds:CompareStringA  +
dec eax  +
dec eax  +
mov ebx offset aDiamond_exe +
jz loc_1009F0E  +
mov ebx offset aMakecab_exe +
push edi  +
mov esi 104h +
push esi  +
lea eax [ebp+String] +
push eax  +
call sub_1006D86  +
mov edi eax +
push ebx  +
neg edi  +
push esi  +
lea eax [ebp+String] +
sbb edi edi +
push eax  +
inc edi  +
call sub_101A172  +
xor esi esi +
cmp edi esi +
jnz loc_100A1FC  +
lea eax [ebp+String] +
push eax  +
call ds:GetFileAttributesA  +
cmp eax 0FFFFFFFFh +
jz loc_100A1FC  +
mov edi ds:lstrlenA +
mov ebx offset byte_1021508 +
push ebx  +
call edi  +
lea ecx [ebp+String] +
push ecx  +
mov [ebp+hMem] eax +
call edi  +
mov ecx [ebp+hMem] +
lea edi [ecx+eax+0Ah] +
push edi  +
push 40h  +
call ds:LocalAlloc  +
mov [ebp+hFile] eax +
cmp eax esi +
jnz loc_1009F9F  +
push esi  +
push 10h  +
push esi  +
push esi  +
push 44Ch  +
jmp loc_100A20C  +
push ebx  +
lea ecx [ebp+String] +
push ecx  +
push offset aSFS  +
push edi  +
push eax  +
call sub_1006E95  +
push 44h  +
pop edi  +
push edi  +
lea eax [ebp+StartupInfo] +
push esi  +
push eax  +
call sub_1010B40  +
mov ax word_1020B50 +
add esp 20h +
mov [ebp+StartupInfo.cb] edi +
cmp word_1020B58 si +
jz loc_1009FE1  +
push 6  +
pop ecx  +
jmp loc_1009FF1  +
cmp ax si +
jnz loc_1009FEF  +
cmp word_1020B54 si +
jz loc_100A007  +
xor ecx ecx +
mov [ebp+StartupInfo.wShowWindow] cx +
mov [ebp+StartupInfo.dwFlags] 1 +
cmp ax si +
jnz loc_100A00B  +
xor eax eax +
jmp loc_100A010  +
mov eax 8000000h +
lea ecx [ebp+hObject] +
push ecx  +
lea ecx [ebp+StartupInfo] +
push ecx  +
push esi  +
push esi  +
push eax  +
push esi  +
push esi  +
push esi  +
push [ebp+hFile]  +
push esi  +
call ds:CreateProcessA  +
test eax eax +
jz loc_100A06B  +
push dword ptr [ebp-660h]  +
mov edi ds:CloseHandle +
call edi  +
push [ebp+hObject]  +
call sub_1006686  +
lea eax [ebp+ExitCode] +
push eax  +
push [ebp+hObject]  +
call ds:GetExitCodeProcess  +
push [ebp+hObject]  +
call edi  +
jmp loc_100A0AC  +
call ds:GetLastError  +
push esi  +
push 200h  +
lea ecx [ebp+Buffer] +
push ecx  +
push esi  +
push eax  +
push esi  +
push 1000h  +
call ds:FormatMessageA  +
push esi  +
push 10h  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+hFile]  +
push 46Ch  +
push [ebp+hDlg]  +
call sub_1007006  +
push [ebp+hFile]  +
call ds:LocalFree  +
push offset asc_10019AC  +
push 856h  +
push [ebp+hDlg]  +
call sub_1006BBF  +
lea eax [ebp+FindFileData] +
push eax  +
mov edi offset byte_1021814 +
push edi  +
call ds:FindFirstFileA  +
mov ebx [ebp+FindFileData.nFileSizeLow] +
sub ebx [ebp+FindFileData.nFileSizeHigh] +
push eax  +
call ds:FindClose  +
push esi  +
push esi  +
push 3  +
push esi  +
push esi  +
push 80000000h  +
push edi  +
call ds:CreateFileA  +
mov [ebp+hFile] eax +
cmp eax 0FFFFFFFFh +
jnz loc_100A11F  +
push esi  +
push 10h  +
push esi  +
push edi  +
push 466h  +
jmp loc_100A20C  +
lea eax [ebp+hMem] +
push eax  +
push 1  +
push ebx  +
call sub_100FFCD  +
test eax eax +
jl loc_1009F90  +
push [ebp+hMem]  +
push 40h  +
call ds:LocalAlloc  +
mov [ebp+hMem] eax +
push esi  +
cmp eax esi +
jz loc_1009F91  +
lea ecx [ebp+NumberOfBytesRead] +
push ecx  +
push ebx  +
push eax  +
push [ebp+hFile]  +
call ds:ReadFile  +
test eax eax +
jnz loc_100A17B  +
push esi  +
push 10h  +
push esi  +
push edi  +
push 467h  +
jmp loc_100A20C  +
push [ebp+hFile]  +
call ds:CloseHandle  +
push [ebp+hMem]  +
mov ebx 856h +
push ebx  +
push [ebp+hDlg]  +
call sub_1006BBF  +
push [ebp+hMem]  +
call ds:LocalFree  +
push offset asc_10019AC  +
push ebx  +
push [ebp+hDlg]  +
call sub_1006BBF  +
push offset byte_10231E0  +
push esi  +
push offset aKeepcabinet  +
push offset aOptions  +
call sub_100693B  +
mov esi ds:DeleteFileA +
test eax eax +
jnz loc_100A1E1  +
push offset byte_1021508  +
call esi  +
test dword_102258C 10000h +
jnz loc_100A1F4  +
push offset byte_1021710  +
call esi  +
push edi  +
call esi  +
xor eax eax +
inc eax  +
jmp loc_100A219  +
push esi  +
push 10h  +
push esi  +
lea eax [ebp+String] +
push eax  +
push 46Dh  +
push [ebp+hDlg]  +
call sub_1007006  +
xor eax eax +
pop edi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1010BBF  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 688h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov esi 200h +
push esi  +
lea eax [ebp+lpString1] +
push eax  +
push 41Eh  +
mov [ebp+var_654] ebx +
mov [ebp+var_65C] 45Dh +
call sub_100684A  +
lea eax [ebp+lpString1] +
push eax  +
push 856h  +
push ebx  +
call sub_1006BBF  +
push offset byte_10231E0  +
push esi  +
lea eax [ebp+lpString1] +
push eax  +
mov edi offset aWextract_exe +
push edi  +
push offset aExtractorstub  +
push offset aOptions  +
call sub_1007436  +
test eax eax +
jnz loc_100A2B7  +
push edi  +
push esi  +
lea eax [ebp+lpString1] +
push eax  +
call sub_1006DCD  +
push 104h  +
lea eax [ebp+LibFileName] +
push eax  +
lea eax [ebp+lpString1] +
push eax  +
call sub_10082DD  +
test eax eax +
lea eax [ebp+LibFileName] +
jnz loc_100A2F2  +
push 0  +
push 10h  +
push 0  +
push eax  +
push 46Dh  +
push ebx  +
call sub_1007006  +
xor eax eax +
jmp loc_100A9C6  +
xor ebx ebx +
push ebx  +
mov edi offset NewFileName +
push edi  +
push eax  +
call ds:CopyFileA  +
test eax eax +
jnz loc_100A33B  +
call ds:GetLastError  +
push ebx  +
push esi  +
lea ecx [ebp+Buffer] +
push ecx  +
push ebx  +
push eax  +
push ebx  +
push 1000h  +
call ds:FormatMessageA  +
push ebx  +
push 10h  +
lea eax [ebp+Buffer] +
push eax  +
push edi  +
push 45Bh  +
push [ebp+var_654]  +
jmp loc_100A2E6  +
push 80h  +
push edi  +
call ds:SetFileAttributesA  +
push ebx  +
lea eax [ebp+LibFileName] +
push eax  +
call sub_100D545  +
mov [ebp+var_64C] eax +
cmp eax ebx +
jnz loc_100A370  +
push ebx  +
push 10h  +
push ebx  +
lea eax [ebp+LibFileName] +
push eax  +
push 45Ch  +
jmp loc_100A333  +
call ds:GetUserDefaultUILanguage  +
mov esi ds:lstrlenA +
movzx ebx ax +
mov edi offset Caption +
push edi  +
mov [ebp+var_660] ebx +
call esi  +
inc eax  +
push eax  +
push edi  +
push ebx  +
push offset aTitle  +
push 0Ah  +
push [ebp+var_64C]  +
call sub_100BDC2  +
test eax eax +
jz loc_100A9B1  +
cmp dword_1020B64 0 +
jz loc_100A3E1  +
mov edi offset byte_1020CF8 +
push edi  +
call esi  +
inc eax  +
push eax  +
push edi  +
push ebx  +
push offset aUprompt  +
push 0Ah  +
push [ebp+var_64C]  +
call sub_100BDC2  +
test eax eax +
jz loc_100A9B1  +
mov edi offset aNone_0 +
jmp loc_100A407  +
mov edi offset aNone_0 +
push edi  +
call esi  +
inc eax  +
push eax  +
push edi  +
push ebx  +
push offset aUprompt  +
push 0Ah  +
push [ebp+var_64C]  +
call sub_100BDC2  +
test eax eax +
jz loc_100A9B1  +
cmp dword_1020B68 0 +
jz loc_100A54A  +
lea eax [ebp+FindFileData] +
push eax  +
mov ebx offset byte_1020EF8 +
push ebx  +
call ds:FindFirstFileA  +
mov edi [ebp+FindFileData.nFileSizeLow] +
sub edi [ebp+FindFileData.nFileSizeHigh] +
push eax  +
call ds:FindClose  +
xor eax eax +
push eax  +
push eax  +
push 3  +
push eax  +
push eax  +
push 80000000h  +
push ebx  +
call ds:CreateFileA  +
mov [ebp+lpFileName] eax +
cmp eax 0FFFFFFFFh +
jnz loc_100A480  +
push 0  +
push 10h  +
push 0  +
push ebx  +
push 468h  +
push [ebp+var_654]  +
call sub_1007006  +
push offset NewFileName  +
call ds:DeleteFileA  +
jmp loc_100A2EB  +
lea eax [ebp+hMem] +
push eax  +
push 1  +
push edi  +
call sub_100FFCD  +
test eax eax +
jge loc_100A4A1  +
xor eax eax +
push eax  +
push 10h  +
push eax  +
push eax  +
push 44Ch  +
jmp loc_100A465  +
push [ebp+hMem]  +
push 40h  +
call ds:LocalAlloc  +
xor ecx ecx +
mov [ebp+hMem] eax +
push ecx  +
cmp eax ecx +
jnz loc_100A4C2  +
push 10h  +
push ecx  +
push ecx  +
jmp loc_100A49A  +
lea ecx [ebp+NumberOfBytesRead] +
push ecx  +
push edi  +
push eax  +
push [ebp+lpFileName]  +
call ds:ReadFile  +
test eax eax +
jnz loc_100A4EA  +
push eax  +
push 10h  +
push eax  +
push ebx  +
push 469h  +
jmp loc_100A465  +
push [ebp+lpFileName]  +
call ds:CloseHandle  +
lea eax [edi+1] +
cmp eax edi +
jb loc_100A539  +
push eax  +
push [ebp+hMem]  +
push [ebp+var_660]  +
push offset aLicense  +
push 0Ah  +
push [ebp+var_64C]  +
call sub_100BDC2  +
test eax eax +
jz loc_100A539  +
push [ebp+hMem]  +
call ds:LocalFree  +
mov ebx [ebp+var_660] +
mov edi offset aNone_0 +
jmp loc_100A56B  +
push [ebp+hMem]  +
call ds:LocalFree  +
jmp loc_100A9B1  +
push edi  +
call esi  +
inc eax  +
push eax  +
push edi  +
push ebx  +
push offset aLicense  +
push 0Ah  +
push [ebp+var_64C]  +
call sub_100BDC2  +
test eax eax +
jz loc_100A9B1  +
cmp dword_1022584 865h +
jz loc_100A659  +
mov ebx offset byte_1021B18 +
push ebx  +
call esi  +
inc eax  +
push eax  +
push ebx  +
mov ebx 409h +
push ebx  +
push offset aRunprogram  +
push 0Ah  +
push [ebp+var_64C]  +
call sub_100BDC2  +
test eax eax +
jz loc_100A9B1  +
push offset byte_1021918  +
call esi  +
inc eax  +
push eax  +
push offset byte_1021918  +
push ebx  +
push offset aPostrunprogram  +
push 0Ah  +
push [ebp+var_64C]  +
call sub_100BDC2  +
test eax eax +
jz loc_100A9B1  +
cmp byte_1022164 0 +
jz loc_100A5DF  +
push offset byte_1022164  +
jmp loc_100A5E0  +
push edi  +
call esi  +
inc eax  +
cmp byte_1022164 0 +
mov ecx offset byte_1022164 +
jnz loc_100A5F3  +
mov ecx edi +
push eax  +
push ecx  +
push ebx  +
push offset aAdmqcmd  +
push 0Ah  +
push [ebp+var_64C]  +
call sub_100BDC2  +
test eax eax +
jz loc_100A9B1  +
cmp byte_102236C 0 +
jz loc_100A620  +
push offset byte_102236C  +
jmp loc_100A621  +
push edi  +
call esi  +
inc eax  +
cmp byte_102236C 0 +
mov ecx offset byte_102236C +
jnz loc_100A634  +
mov ecx edi +
push eax  +
push ecx  +
push ebx  +
push offset aUsrqcmd  +
push 0Ah  +
push [ebp+var_64C]  +
call sub_100BDC2  +
test eax eax +
jz loc_100A9B1  +
mov ebx [ebp+var_660] +
jmp loc_100A67A  +
push edi  +
call esi  +
inc eax  +
push eax  +
push edi  +
push ebx  +
push offset aRunprogram  +
push 0Ah  +
push [ebp+var_64C]  +
call sub_100BDC2  +
test eax eax +
jz loc_100A9B1  +
push 4  +
push offset dword_1022588  +
push ebx  +
push offset aShowwindow  +
push 0Ah  +
push [ebp+var_64C]  +
call sub_100BDC2  +
test eax eax +
jz loc_100A9B1  +
cmp dword_1020B6C 0 +
jz loc_100A6AA  +
mov edi offset byte_1021100 +
push edi  +
call esi  +
inc eax  +
push eax  +
push edi  +
push ebx  +
push offset aFinishmsg  +
push 0Ah  +
push [ebp+var_64C]  +
call sub_100BDC2  +
test eax eax +
jz loc_100A9B1  +
lea eax [ebp+FindFileData] +
push eax  +
mov ebx offset byte_102160C +
push ebx  +
call ds:FindFirstFileA  +
mov edi [ebp+FindFileData.nFileSizeLow] +
sub edi [ebp+FindFileData.nFileSizeHigh] +
push eax  +
call ds:FindClose  +
xor eax eax +
push eax  +
push eax  +
push 3  +
push eax  +
push eax  +
push 80000000h  +
push ebx  +
call ds:CreateFileA  +
mov [ebp+lpFileName] eax +
cmp eax 0FFFFFFFFh +
jnz loc_100A721  +
push 0  +
push 10h  +
push 0  +
push ebx  +
push 46Ah  +
jmp loc_100A465  +
lea eax [edi+1] +
push eax  +
push 40h  +
call ds:LocalAlloc  +
mov [ebp+hMem] eax +
test eax eax +
jnz loc_100A746  +
mov [ebp+var_65C] 44Ch +
jmp loc_100A9B1  +
push 0  +
lea ecx [ebp+NumberOfBytesRead] +
push ecx  +
push edi  +
push eax  +
push [ebp+lpFileName]  +
call ds:ReadFile  +
test eax eax +
jnz loc_100A770  +
push eax  +
push 10h  +
push eax  +
push ebx  +
push 46Bh  +
jmp loc_100A465  +
push [ebp+lpFileName]  +
call ds:CloseHandle  +
push edi  +
push [ebp+hMem]  +
push [ebp+var_660]  +
push offset aCabinet  +
push 0Ah  +
push [ebp+var_64C]  +
call sub_100BDC2  +
push [ebp+hMem]  +
test eax eax +
jz loc_100A53F  +
call ds:LocalFree  +
mov ebx dword_10225A4 +
push 9  +
pop ecx  +
xor eax eax +
lea edi [ebp+var_688] +
stos   +
jmp loc_100A883  +
push dword ptr [ebx+4]  +
mov edi [ebx] +
call esi  +
push edi  +
mov [ebp+lpFileName] eax +
call esi  +
mov ecx [ebp+lpFileName] +
lea edi [ecx+eax+1] +
push edi  +
push 40h  +
call ds:LocalAlloc  +
mov [ebp+lpFileName] eax +
test eax eax +
jz loc_100A737  +
push dword ptr [ebx+4]  +
push edi  +
push eax  +
call sub_1006DCD  +
push dword ptr [ebx]  +
push edi  +
push [ebp+lpFileName]  +
call sub_1006E54  +
lea eax [ebp+FindFileData] +
push eax  +
push [ebp+lpFileName]  +
call ds:FindFirstFileA  +
mov edi [ebp+FindFileData.nFileSizeLow] +
sub edi [ebp+FindFileData.nFileSizeHigh] +
push eax  +
call ds:FindClose  +
push [ebp+lpFileName]  +
call ds:LocalFree  +
and [ebp+lpFileName] 0 +
mov ecx 200h +
xor edx edx +
mov eax edi +
div  ecx +
neg edx  +
sbb edx edx +
imul eax ecx +
and edx ecx +
add edx eax +
mov eax [ebp+lpFileName] +
add [ebp+eax*4+var_688] edx +
add ecx ecx +
inc eax  +
cmp eax 8 +
mov [ebp+lpFileName] eax +
jl loc_100A84E  +
add [ebp+var_668] edi +
mov ebx [ebx+0Ch] +
test ebx ebx +
jnz loc_100A7C7  +
xor ecx ecx +
lea eax [ebp+ecx*4+var_688] +
mov edx [eax] +
add edx 3FFh +
shr edx 0Ah +
inc ecx  +
cmp ecx 8 +
mov [eax] edx +
jl loc_100A88D  +
mov ebx [ebp+var_660] +
mov edi [ebp+var_64C] +
push 24h  +
lea eax [ebp+var_688] +
push eax  +
push ebx  +
push offset aFilesizes  +
push 0Ah  +
push edi  +
call sub_100BDC2  +
test eax eax +
jz loc_100A9B1  +
push 4  +
push offset dword_1022594  +
push ebx  +
push offset aReboot  +
push 0Ah  +
push edi  +
call sub_100BDC2  +
test eax eax +
jz loc_100A9B1  +
push 4  +
push offset dword_102258C  +
push ebx  +
push offset aExtractopt  +
push 0Ah  +
push edi  +
call sub_100BDC2  +
test eax eax +
jz loc_100A9B1  +
mov eax hMem +
test eax eax +
jz loc_100A932  +
push eax  +
call esi  +
inc eax  +
push eax  +
push hMem  +
push ebx  +
push offset aInstancecheck  +
push 0Ah  +
push edi  +
call sub_100BDC2  +
test eax eax +
jz loc_100A9B1  +
push 4  +
push offset dword_102259C  +
push ebx  +
push offset aPackinstspace  +
push 0Ah  +
push edi  +
call sub_100BDC2  +
test eax eax +
jz loc_100A9B1  +
push edi  +
lea eax [ebp+LibFileName] +
push eax  +
push [ebp+var_654]  +
call sub_101071C  +
test eax eax +
jnz loc_100A96E  +
mov [ebp+var_65C] 471h +
jmp loc_100A9B1  +
mov eax dword_10225A0 +
test eax eax +
jz loc_100A98C  +
push dword ptr [eax]  +
push eax  +
push ebx  +
push offset aVercheck  +
push 0Ah  +
push edi  +
call sub_100BDC2  +
test eax eax +
jz loc_100A9B1  +
push offset NewFileName  +
push edi  +
call sub_100B48C  +
test eax eax +
jz loc_100A9B1  +
push 0  +
push edi  +
call sub_100D351  +
test eax eax +
jnz loc_100A9C3  +
mov [ebp+var_65C] 45Eh +
xor eax eax +
push eax  +
push 10h  +
push eax  +
push eax  +
push [ebp+var_65C]  +
jmp loc_100A465  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010BBF  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A8h +
push ebx  +
push esi  +
push edi  +
push dword_1020B44  +
call sub_1006604  +
push 40h  +
xor esi esi +
lea eax [ebp+var_A8] +
push esi  +
push eax  +
call sub_1010B40  +
push 30h  +
pop edi  +
push edi  +
lea eax [ebp+var_68] +
push esi  +
push eax  +
call sub_1010B40  +
push 34h  +
lea eax [ebp+var_38] +
push esi  +
push eax  +
call sub_1010B40  +
mov eax hInstance +
add esp 24h +
mov [ebp+var_68.dwSize] edi +
mov [ebp+var_68.dwFlags] esi +
mov [ebp+var_68.hInstance] eax +
mov [ebp+var_68.pfnDlgProc] offset loc_100842B +
xor ebx ebx +
mov edi offset dword_101F000 +
mov [ebp+var_4] esi +
movzx eax word ptr [edi] +
mov dword ptr [ebp+var_68.anonymous_0] eax +
lea eax [ebp+var_68] +
push eax  +
mov [ebp+var_68.lParam] edi +
call ds:CreatePropertySheetPageA  +
mov [ebp+ebx*4+var_A8] eax +
cmp eax esi +
jz loc_100AAD0  +
add [ebp+var_4] 18h +
inc ebx  +
add edi 18h +
cmp [ebp+var_4] 180h +
jb loc_100AA42  +
mov eax hInstance +
mov [ebp+var_38.hInstance] eax +
push 10h  +
lea eax [ebp+var_A8] +
pop edi  +
mov dword ptr [ebp+var_38.anonymous_2] eax +
lea eax [ebp+var_38] +
push eax  +
mov [ebp+var_38.dwSize] 34h +
mov [ebp+var_38.dwFlags] 24h +
mov [ebp+var_38.hwndParent] esi +
mov [ebp+var_38.nPages] edi +
mov dword ptr [ebp+var_38.anonymous_0] 899h +
call ds:PropertySheetA  +
mov ebx eax +
cmp ebx esi +
jge loc_100AABF  +
push esi  +
push edi  +
push esi  +
push esi  +
push 44Ch  +
push esi  +
call sub_1007006  +
call sub_1007F34  +
xor eax eax +
cmp ebx esi +
setnle al  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
push esi  +
push 10h  +
push esi  +
push esi  +
push 44Ch  +
push esi  +
call sub_1007006  +
cmp ebx esi +
jbe loc_100AAF6  +
push [ebp+esi*4+var_A8]  +
call ds:DestroyPropertySheetPage  +
inc esi  +
cmp esi ebx +
jb loc_100AAE4  +
xor eax eax +
jmp loc_100AACB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 318h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
push 6  +
mov [ebp+var_314] eax +
lea eax [ebp+var_C] +
push eax  +
mov esi 104h +
push esi  +
mov ebx offset unk_1021404 +
push ebx  +
push 100h  +
lea eax [ebp+var_30C] +
push eax  +
push 3  +
lea eax [ebp+var_318] +
push eax  +
push offset NewFileName  +
mov [ebp+var_310] 1 +
call sub_101171A  +
add esp 24h +
lea eax [ebp+var_318] +
push eax  +
push esi  +
mov edi offset unk_1021300 +
push edi  +
call sub_1006DCD  +
lea eax [ebp+var_30C] +
push eax  +
push esi  +
push edi  +
call sub_1006E54  +
push edi  +
push esi  +
push offset byte_1021508  +
call sub_1006DCD  +
push offset a_ddf  +
push ebx  +
push offset aSS_0  +
mov ebx 200h +
lea eax [ebp+lParam] +
push ebx  +
push eax  +
call sub_1006E95  +
add esp 14h +
lea eax [ebp+lParam] +
push eax  +
push esi  +
push offset byte_1021508  +
call sub_101A172  +
cmp byte_1021710 0 +
jnz loc_100ABFE  +
push edi  +
push esi  +
push offset byte_1021710  +
call sub_1006DCD  +
push offset unk_1021404  +
push offset aS_layout_inf  +
lea eax [ebp+lParam] +
push ebx  +
push eax  +
call sub_1006E95  +
add esp 10h +
lea eax [ebp+lParam] +
push eax  +
push esi  +
push offset byte_1021710  +
call sub_101A172  +
push edi  +
push esi  +
push offset byte_1021814  +
call sub_1006DCD  +
push offset a_rpt  +
push offset unk_1021404  +
push offset aSS_0  +
lea eax [ebp+lParam] +
push ebx  +
push eax  +
call sub_1006E95  +
add esp 14h +
lea eax [ebp+lParam] +
push eax  +
push esi  +
push offset byte_1021814  +
call sub_101A172  +
cmp dword_1022584 866h +
jz loc_100AC97  +
push offset a_cab  +
push offset unk_1021404  +
push offset aSS_0  +
lea eax [ebp+lParam] +
push ebx  +
push eax  +
call sub_1006E95  +
add esp 14h +
push edi  +
push esi  +
mov edi offset byte_102160C +
push edi  +
call sub_1006DCD  +
lea eax [ebp+lParam] +
push eax  +
push esi  +
push edi  +
call sub_101A172  +
mov lpString1 offset aLzx +
mov dword_102257C 7 +
jmp loc_100AC9C  +
mov edi offset byte_102160C +
cmp dword_1020B60 0 +
mov esi [ebp+var_314] +
jz loc_100ACFC  +
push esi  +
call sub_1008889  +
test eax eax +
jnz loc_100ACFC  +
push ebx  +
lea eax [ebp+lParam] +
push eax  +
push 421h  +
call sub_100684A  +
lea eax [ebp+lParam] +
push eax  +
push 856h  +
push esi  +
call sub_1006BBF  +
and [ebp+var_310] 0 +
call sub_100E539  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_310] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010BBF  +
leave   +
retn 4  +
push esi  +
call sub_1009E91  +
test eax eax +
jnz loc_100AD15  +
push ebx  +
lea eax [ebp+lParam] +
push eax  +
push 41Fh  +
jmp loc_100ACC2  +
cmp dword_1022584 866h +
jz loc_100AD5B  +
push esi  +
call sub_100A22F  +
test eax eax +
jnz loc_100AD3A  +
push ebx  +
lea eax [ebp+lParam] +
push eax  +
push 420h  +
jmp loc_100ACC2  +
push offset byte_10231E0  +
push 0  +
push offset aKeepcabinet  +
push offset aOptions  +
call sub_100693B  +
test eax eax +
jnz loc_100AD5B  +
push edi  +
call ds:DeleteFileA  +
push ebx  +
lea eax [ebp+lParam] +
push eax  +
push 422h  +
call sub_100684A  +
lea eax [ebp+lParam] +
push eax  +
push 856h  +
push esi  +
call sub_1006BBF  +
jmp loc_100ACE5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
mov hInstance eax +
mov dword_10231C4 ebx +
mov FileName bl +
mov byte_1023220 bl +
mov byte_10231E0 bl +
mov byte_1020B74 bl +
mov byte_1022010 bl +
mov hMem ebx +
call sub_10065A5  +
push [ebp+arg_8]  +
mov dword_10225A4 ebx +
mov dword_1022598 ebx +
call sub_100801B  +
test eax eax +
jnz loc_100ADF8  +
push ebx  +
push 10h  +
push ebx  +
push ebx  +
push 472h  +
push ebx  +
call sub_1007006  +
xor eax eax +
inc eax  +
jmp loc_100AE7E  +
cmp dword_10231C4 ebx +
jz loc_100AE25  +
push offset byte_1020B74  +
call ds:lstrlenA  +
test eax eax +
jle loc_100AE25  +
push ebx  +
call sub_1008C09  +
test eax eax +
jz loc_100ADF0  +
push ebx  +
call sub_100AAFF  +
test eax eax +
jnz loc_100AE7C  +
jmp loc_100ADF0  +
push 4Ch  +
call sub_1011A29  +
pop ecx  +
mov dword_1020B44 eax +
cmp eax ebx +
jnz loc_100AE48  +
push ebx  +
push 10h  +
push ebx  +
push ebx  +
push 44Ch  +
push ebx  +
call sub_1007006  +
jmp loc_100AE62  +
call sub_1006D2F  +
call sub_100A9DC  +
mov eax dword_1020B5C +
cmp eax ebx +
jz loc_100AE62  +
push eax  +
call ds:DeleteObject  +
call sub_1006809  +
call sub_10065DE  +
mov eax dword_1020B44 +
cmp eax ebx +
jz loc_100AE7C  +
push eax  +
call sub_1011942  +
pop ecx  +
xor eax eax +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+lpString] +
test edi 0FFFF0000h +
jz loc_100AEC6  +
push ebx  +
push esi  +
mov esi ds:lstrlenA +
push edi  +
call esi  +
lea eax [eax+eax+2] +
push eax  +
call sub_1011A29  +
pop ecx  +
push edi  +
mov ebx eax +
call esi  +
inc eax  +
push eax  +
push edi  +
push ebx  +
call sub_1011CAE  +
add esp 0Ch +
pop esi  +
mov eax ebx +
pop ebx  +
jmp loc_100AEC8  +
mov eax edi +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push dword ptr [esi+18h]  +
call sub_1011942  +
push esi  +
call sub_1011942  +
pop ecx  +
pop ecx  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor ebx ebx +
jmp loc_100AF38  +
mov eax [esi] +
mov [edi+0Ch] eax +
jmp loc_100AF16  +
mov ecx [eax] +
push eax  +
mov [esi+0Ch] ecx +
call sub_100AED2  +
mov eax [esi+0Ch] +
cmp eax ebx +
jnz loc_100AF0B  +
jmp loc_100AF2A  +
mov ecx [eax] +
push eax  +
mov [esi+10h] ecx +
call sub_100AED2  +
mov eax [esi+10h] +
cmp eax ebx +
jnz loc_100AF1F  +
push esi  +
call sub_1011942  +
pop ecx  +
mov esi [edi+0Ch] +
cmp esi ebx +
jnz loc_100AF04  +
jmp loc_100AF6E  +
mov eax [esi] +
mov [edi+10h] eax +
jmp loc_100AF53  +
mov ecx [eax] +
push eax  +
mov [esi+0Ch] ecx +
call sub_100AED2  +
mov eax [esi+0Ch] +
cmp eax ebx +
jnz loc_100AF48  +
jmp loc_100AF67  +
mov ecx [eax] +
push eax  +
mov [esi+10h] ecx +
call sub_100AED2  +
mov eax [esi+10h] +
cmp eax ebx +
jnz loc_100AF5C  +
mov esi [edi+10h] +
cmp esi ebx +
jnz loc_100AF41  +
mov edi [edi+4] +
cmp edi ebx +
jz loc_100AF9A  +
cmp dword ptr [edi] 1 +
mov esi [edi+4] +
jnz loc_100AF8D  +
push dword ptr [edi+10h]  +
call sub_1011942  +
pop ecx  +
push edi  +
call sub_1011942  +
pop ecx  +
mov edi esi +
cmp esi ebx +
jnz loc_100AF7C  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
test ebx 0FFFF0000h +
jnz loc_100AFE4  +
push 14h  +
call sub_1011A29  +
mov esi eax +
xor eax eax +
pop ecx  +
test esi esi +
jz loc_100B0A2  +
mov edi esi +
stos   +
stos   +
stos   +
stos   +
stos   +
mov dword ptr [esi] 2 +
mov [esi+4] bx +
jmp loc_100B0A0  +
mov eax ebx +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100AFE9  +
mov ebx [ebp+arg_4] +
sub eax edx +
sar eax 1 +
inc eax  +
movzx ecx ax +
lea eax [ebx+4] +
mov esi [eax] +
mov [ebp+var_4] ecx +
mov [ebp+arg_4] eax +
test esi esi +
jz loc_100B033  +
movzx edi cx +
push edi  +
push [ebp+arg_0]  +
push dword ptr [esi+10h]  +
call sub_1011CDD  +
add esp 0Ch +
test eax eax +
jz loc_100B02F  +
add esi 4 +
mov [ebp+arg_4] esi +
mov esi [esi] +
test esi esi +
jnz loc_100B010  +
test esi esi +
jnz loc_100B0A0  +
push 14h  +
call sub_1011A29  +
mov esi eax +
xor eax eax +
pop ecx  +
test esi esi +
jz loc_100B0A2  +
mov edi esi +
stos   +
stos   +
stos   +
stos   +
stos   +
movzx edi word ptr [ebp+var_4] +
add edi edi +
push edi  +
call sub_1011A29  +
pop ecx  +
mov [esi+10h] eax +
test eax eax +
jnz loc_100B069  +
push esi  +
call sub_1011942  +
pop ecx  +
xor eax eax +
jmp loc_100B0A2  +
mov dword ptr [esi] 1 +
mov ecx [ebx] +
mov [esi+8] ecx +
mov ecx [ebp+var_4] +
push edi  +
push [ebp+arg_0]  +
lea edx [ecx+ecx+2] +
dec ecx  +
push eax  +
mov [esi+0Ch] dx +
mov [esi+0Eh] cx +
call loc_10113B0  +
movzx eax word ptr [esi+0Ch] +
add [ebx] eax +
mov eax [ebp+arg_4] +
add esp 0Ch +
and dword ptr [esi+4] 0 +
mov [eax] esi +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_10] 0 +
mov eax [ebp+arg_0] +
jz loc_100B0C1  +
add eax 0Ch +
jmp loc_100B0C4  +
add eax 10h +
mov ecx [ebp+arg_4] +
mov [ebp+arg_0] eax +
jmp loc_100B0D4  +
mov eax [ebp+arg_0] +
mov eax [eax] +
mov [ebp+arg_0] eax +
cmp [eax] ecx +
jnz loc_100B0CC  +
cmp [ebp+arg_14] 0 +
push ebx  +
push esi  +
push edi  +
lea ebx [ecx+0Ch] +
jnz loc_100B0E7  +
lea ebx [ecx+10h] +
mov esi [ebp+arg_8] +
xor edi edi +
cmp [ebx] esi +
jz loc_100B13E  +
test edi edi +
jnz loc_100B134  +
mov eax [ebx] +
cmp [ebp+arg_14] edi +
jz loc_100B112  +
mov ecx [eax+4] +
mov cx [ecx+4] +
mov edx [esi+4] +
cmp cx [edx+4] +
mov ecx [ebp+arg_4] +
jnz loc_100B134  +
mov edi eax +
jmp loc_100B134  +
mov eax [eax+4] +
movzx ecx word ptr [eax+0Eh] +
push ecx  +
mov ecx [esi+4] +
push dword ptr [ecx+10h]  +
push dword ptr [eax+10h]  +
call sub_1011CDD  +
mov ecx [ebp+arg_4] +
add esp 0Ch +
test eax eax +
jnz loc_100B134  +
mov edi [ebx] +
mov ebx [ebx] +
cmp [ebx] esi +
jnz loc_100B0F0  +
test edi edi +
jnz loc_100B183  +
mov edi [esi] +
test edi edi +
jz loc_100B1A1  +
cmp [ebp+arg_14] 0 +
mov eax [edi+4] +
jz loc_100B15A  +
mov edx [esi+4] +
mov ax [eax+4] +
cmp ax [edx+4] +
jmp loc_100B175  +
movzx ecx word ptr [eax+0Eh] +
push ecx  +
mov ecx [esi+4] +
push dword ptr [ecx+10h]  +
push dword ptr [eax+10h]  +
call sub_1011CDD  +
mov ecx [ebp+arg_4] +
add esp 0Ch +
test eax eax +
jnz loc_100B18C  +
mov ax [esi+1Eh] +
dec ax  +
mov [edi+1Eh] ax +
jmp loc_100B18C  +
mov eax 0FFFFh +
add [edi+1Eh] ax +
cmp word ptr [edi+1Eh] 0 +
jnz loc_100B1A1  +
cmp [ebp+arg_14] 0 +
jz loc_100B19E  +
dec dword ptr [ecx+14h]  +
jmp loc_100B1A1  +
dec dword ptr [ecx+18h]  +
mov eax [esi] +
mov [ebx] eax +
push dword ptr [esi+18h]  +
call sub_1011942  +
push esi  +
call sub_1011942  +
cmp dword ptr [ebx] 0 +
pop ecx  +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
jnz loc_100B1CE  +
mov eax [ebp+arg_4] +
mov ecx [eax] +
mov edx [ebp+arg_0] +
push eax  +
mov [edx] ecx +
call sub_1011942  +
pop ecx  +
xor eax eax +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 24h  +
call sub_1011A29  +
mov edx eax +
pop ecx  +
test edx edx +
jnz loc_100B1F4  +
push 8  +
pop eax  +
jmp loc_100B27B  +
push esi  +
mov esi [ebp+arg_14] +
push edi  +
xor eax eax +
push 9  +
pop ecx  +
mov edi edx +
stos   +
mov eax [ebp+arg_8] +
mov [edx+4] eax +
mov eax [ebp+arg_4] +
mov [edx+0Ch] eax +
mov eax [ebp+arg_1C] +
mov [edx+14h] eax +
mov eax [ebp+arg_20] +
mov [edx+18h] eax +
mov eax [ebp+arg_10] +
mov [edx+20h] si +
movzx ecx word ptr [eax+20h] +
cmp esi ecx +
jge loc_100B25B  +
mov cx [eax+1Eh] +
inc cx  +
mov [edx+1Eh] cx +
xor ecx ecx +
inc ecx  +
cmp [ebp+arg_18] 0 +
mov [eax+1Eh] cx +
mov ecx [ebp+arg_C] +
jz loc_100B248  +
add ecx 0Ch +
jmp loc_100B24F  +
add ecx 10h +
jmp loc_100B24F  +
mov ecx [ecx] +
cmp eax [ecx] +
jnz loc_100B24D  +
mov eax [ecx] +
mov [edx] eax +
mov [ecx] edx +
jmp loc_100B277  +
inc word ptr [eax+1Eh]  +
mov ecx eax +
movzx edi word ptr [eax+20h] +
cmp esi edi +
jle loc_100B271  +
mov ecx eax +
mov eax [eax] +
test eax eax +
jnz loc_100B261  +
mov eax [ecx] +
mov [ecx] edx +
mov [edx] eax +
pop edi  +
xor eax eax +
pop esi  +
pop ebp  +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 1  +
push 0  +
push [ebp+hFile]  +
call ds:_llseek  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+lOffset]  +
push [ebp+hFile]  +
call ds:_llseek  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+uBytes]  +
push [ebp+lpBuffer]  +
push [ebp+hFile]  +
call ds:_lread  +
mov ecx eax +
sub eax [ebp+uBytes] +
neg eax  +
sbb eax eax +
and eax ecx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
and dword ptr [eax+0Ch] 0 +
mov [eax] ecx +
mov ecx [ebp+arg_8] +
mov [eax+4] ecx +
mov dword ptr [eax+8] 4E4h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
and dword ptr [eax] 0 +
mov [eax+4] ecx +
push 4  +
pop ecx  +
mov [eax+8] cx +
xor ecx ecx +
mov [eax+0Ah] cx +
mov cx [ebp+arg_8] +
mov [eax+0Ch] cx +
mov cx [ebp+arg_C] +
mov [eax+0Eh] cx +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
imul esi esi +
add esi eax +
jmp loc_100B384  +
mov edx [ebp+arg_8] +
mov ecx eax +
mov bl [ecx] +
cmp bl [edx] +
jnz loc_100B378  +
test bl bl +
jz loc_100B374  +
mov bl [ecx+1] +
cmp bl [edx+1] +
jnz loc_100B378  +
inc ecx  +
inc ecx  +
inc edx  +
inc edx  +
test bl bl +
jnz loc_100B35A  +
xor ecx ecx +
jmp loc_100B37D  +
sbb ecx ecx +
sbb ecx 0FFFFFFFFh +
test ecx ecx +
jz loc_100B38A  +
add eax 28h +
cmp eax esi +
jb loc_100B355  +
xor eax eax +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx] +
mov eax [eax+14h] +
mov ecx [ebp+arg_8] +
add eax 3 +
and eax 0FFFFFFFCh +
push esi  +
cmp ecx [ebp+arg_4] +
jnb loc_100B3C1  +
lea esi [eax+ecx] +
cmp esi [ebp+arg_C] +
jbe loc_100B3C1  +
mov esi [ebp+arg_10] +
mov [esi] ecx +
mov ecx [ebp+arg_4] +
mov esi [edx] +
mov [esi+8] ecx +
mov esi [edx] +
mov esi [esi] +
mov [edx] esi +
add eax ecx +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
push esi  +
push edi  +
xor esi esi +
push esi  +
push 80h  +
push 3  +
push esi  +
push esi  +
push 0C0000000h  +
push [ebp+CheckSum]  +
mov [ebp+var_4] esi +
call ds:CreateFileA  +
mov edi eax +
mov [ebp+hObject] edi +
cmp edi 0FFFFFFFFh +
jz loc_100B47E  +
lea eax [ebp+FileLength] +
push eax  +
push edi  +
call ds:GetFileInformationByHandle  +
test eax eax +
jz loc_100B475  +
cmp [ebp-20h] esi +
jnz loc_100B475  +
push ebx  +
push esi  +
push esi  +
push esi  +
push 4  +
push esi  +
push edi  +
call ds:CreateFileMappingA  +
mov ebx eax +
cmp ebx esi +
jz loc_100B474  +
push esi  +
push esi  +
push esi  +
push 2  +
push ebx  +
call ds:MapViewOfFile  +
mov edi eax +
cmp edi esi +
jz loc_100B46D  +
lea eax [ebp+CheckSum] +
push eax  +
lea eax [ebp+HeaderSum] +
push eax  +
push dword ptr [ebp-1Ch]  +
push edi  +
call ds:CheckSumMappedFile  +
cmp eax esi +
jz loc_100B466  +
mov ecx [ebp+CheckSum] +
mov [eax+58h] ecx +
mov [ebp+var_4] 1 +
push edi  +
call ds:UnmapViewOfFile  +
push ebx  +
call ds:CloseHandle  +
pop ebx  +
push [ebp+hObject]  +
call ds:CloseHandle  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ds:SetLastError +
push edi  +
push 0  +
call esi  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_100B546  +
cmp byte ptr [eax] 0 +
jz loc_100B546  +
push [ebp+hMem]  +
mov ebx ds:GlobalLock +
call ebx  +
mov edi eax +
test edi edi +
jnz loc_100B4D9  +
push [ebp+hMem]  +
call ds:GlobalUnlock  +
push [ebp+hMem]  +
call ds:GlobalFree  +
push 8  +
jmp loc_100B548  +
push dword ptr [edi+18h]  +
call ebx  +
mov esi ds:GlobalUnlock +
test eax eax +
jz loc_100B4F6  +
push dword ptr [edi+18h]  +
call esi  +
push dword ptr [edi+18h]  +
call ds:GlobalFree  +
push 104h  +
push 42h  +
call ds:GlobalAlloc  +
mov [edi+18h] eax +
test eax eax +
jnz loc_100B522  +
push [ebp+hMem]  +
call esi  +
push [ebp+hMem]  +
call ds:GlobalFree  +
push 8  +
call ds:SetLastError  +
jmp loc_100B54A  +
push eax  +
call ebx  +
test eax eax +
jz loc_100B50A  +
push [ebp+arg_4]  +
push 104h  +
push eax  +
call sub_1006DCD  +
push dword ptr [edi+18h]  +
call esi  +
push [ebp+hMem]  +
call esi  +
xor eax eax +
inc eax  +
jmp loc_100B54C  +
push 57h  +
call esi  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov ecx [ebp+arg_4] +
xor eax eax +
push ebx  +
mov ebx [ebp+arg_0] +
cmp dword ptr [ebx] 2 +
push esi  +
setz al  +
push edi  +
mov [ebp+var_C] eax +
xor eax eax +
cmp dword ptr [ecx] 2 +
setz al  +
cmp [ebp+var_C] 0 +
mov [ebp+var_4] eax +
mov eax [ebp+arg_C] +
jz loc_100B58D  +
add eax 0Ch +
jmp loc_100B590  +
add eax 10h +
mov esi [eax] +
mov [ebp+var_8] eax +
jmp loc_100B5D0  +
mov eax [esi+4] +
movzx ecx word ptr [eax+4] +
movzx edx word ptr [ebx+4] +
cmp cx dx +
jz loc_100B5D6  +
cmp [ebp+var_C] 0 +
jz loc_100B5B4  +
cmp dx cx +
jb loc_100B5E9  +
jmp loc_100B5CB  +
movzx ecx word ptr [ebx+0Eh] +
push ecx  +
push dword ptr [eax+10h]  +
push dword ptr [ebx+10h]  +
call sub_1011CDD  +
add esp 0Ch +
test eax eax +
jl loc_100B5E9  +
mov [ebp+var_8] esi +
mov esi [esi] +
test esi esi +
jnz loc_100B597  +
jmp loc_100B5E9  +
cmp [ebp+var_4] 0 +
lea ebx [esi+0Ch] +
jnz loc_100B5E2  +
lea ebx [esi+10h] +
test ebx ebx +
jnz loc_100B620  +
mov ebx [ebp+arg_0] +
push 1Ch  +
call sub_1011A29  +
mov esi eax +
pop ecx  +
test esi esi +
jnz loc_100B5FF  +
push 8  +
pop eax  +
jmp loc_100B7A0  +
push 7  +
xor eax eax +
cmp [ebp+var_4] 0 +
pop ecx  +
mov edi esi +
stos   +
mov eax [ebp+var_8] +
mov ecx [eax] +
mov [esi] ecx +
mov [eax] esi +
mov [esi+4] ebx +
lea ebx [esi+0Ch] +
jnz loc_100B620  +
lea ebx [esi+10h] +
mov edi [ebx] +
jmp loc_100B696  +
cmp [ebp+var_4] 0 +
mov eax [ebp+arg_4] +
jz loc_100B65B  +
mov ecx [edi+4] +
movzx eax word ptr [eax+4] +
movzx ecx word ptr [ecx+4] +
cmp ax cx +
jz loc_100B69C  +
jnb loc_100B692  +
cmp [ebp+arg_10] 0 +
jz loc_100B6D9  +
cmp [ebp+var_4] 0 +
jz loc_100B753  +
inc dword ptr [esi+14h]  +
jmp loc_100B756  +
movzx ecx word ptr [eax+0Eh] +
push ecx  +
mov ecx [edi+4] +
push dword ptr [ecx+10h]  +
push dword ptr [eax+10h]  +
call sub_1011CDD  +
add esp 0Ch +
test eax eax +
jz loc_100B69C  +
mov eax [ebp+arg_4] +
movzx ecx word ptr [eax+0Eh] +
push ecx  +
mov ecx [edi+4] +
push dword ptr [ecx+10h]  +
push dword ptr [eax+10h]  +
call sub_1011CDD  +
add esp 0Ch +
test eax eax +
jl loc_100B63F  +
mov ebx edi +
mov edi [edi] +
test edi edi +
jnz loc_100B624  +
jmp loc_100B63F  +
cmp word ptr [edi+1Eh] 1 +
mov ax [ebp+arg_8] +
jnz loc_100B702  +
cmp ax [edi+20h] +
jnz loc_100B6D3  +
mov ebx [ebp+arg_10] +
mov ecx [ebp+arg_14] +
mov [edi+14h] ecx +
test ebx ebx +
jnz loc_100B735  +
push [ebp+var_4]  +
movzx eax ax +
push [ebp+var_C]  +
push eax  +
push edi  +
push esi  +
push [ebp+arg_C]  +
call sub_100B0AE  +
jmp loc_100B7A0  +
cmp [ebp+arg_10] 0 +
jnz loc_100B6E0  +
push 57h  +
jmp loc_100B5F9  +
push [ebp+arg_10]  +
movzx eax ax +
push [ebp+arg_14]  +
push [ebp+var_4]  +
push eax  +
push edi  +
push esi  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push [ebp+arg_C]  +
call sub_100B1D9  +
jmp loc_100B7A0  +
mov ecx edi +
mov edi [ebx] +
test edi edi +
jz loc_100B743  +
mov edx [ecx+4] +
cmp [edi+4] edx +
jnz loc_100B71E  +
cmp ax [edi+20h] +
jbe loc_100B71E  +
mov edi [edi] +
test edi edi +
jnz loc_100B70D  +
test edi edi +
jz loc_100B743  +
cmp ax [edi+20h] +
jnz loc_100B743  +
mov ebx [ebp+arg_10] +
test ebx ebx +
jz loc_100B6BA  +
mov eax [ebp+arg_14] +
mov [edi+14h] eax +
push dword ptr [edi+18h]  +
call sub_1011942  +
pop ecx  +
mov [edi+18h] ebx +
jmp loc_100B79E  +
push [ebp+arg_10]  +
movzx eax ax +
push [ebp+arg_14]  +
push [ebp+var_4]  +
push eax  +
push ecx  +
jmp loc_100B6EE  +
inc dword ptr [esi+18h]  +
push 24h  +
call sub_1011A29  +
mov edx eax +
pop ecx  +
test edx edx +
jz loc_100B5F7  +
xor eax eax +
push 9  +
pop ecx  +
mov edi edx +
stos   +
mov eax [ebx] +
mov [edx] eax +
mov eax [ebp+arg_4] +
mov [ebx] edx +
mov [edx+4] eax +
mov eax [ebp+arg_0] +
mov [edx+0Ch] eax +
xor eax eax +
inc eax  +
mov [edx+1Eh] ax +
mov ax [ebp+arg_8] +
mov [edx+20h] ax +
mov eax [ebp+arg_14] +
mov [edx+14h] eax +
mov eax [ebp+arg_10] +
mov [edx+18h] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 408h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi ds:_lwrite +
push edi  +
push [ebp+uBytes]  +
mov edi [ebp+lpBuffer] +
push edi  +
push [ebp+hFile]  +
call esi  +
mov ecx eax +
cmp ecx 0FFFFFFFFh +
jnz loc_100B8B9  +
mov ebx edi +
mov edi [ebp+uBytes] +
jmp loc_100B803  +
mov eax 1000h +
cmp edi eax +
ja loc_100B7F3  +
mov eax edi +
push eax  +
push ebx  +
push [ebp+hFile]  +
call esi  +
cmp eax 0FFFFFFFFh +
jz loc_100B80E  +
sub edi eax +
add ebx eax +
test edi edi +
jnz loc_100B7E8  +
xor eax eax +
jmp loc_100B8C2  +
xor edi edi +
push edi  +
push edi  +
lea eax [ebp+hMem] +
push eax  +
push 400h  +
call ds:GetLastError  +
push eax  +
push edi  +
push 1100h  +
call ds:FormatMessageA  +
test eax eax +
jz loc_100B8B4  +
mov esi 200h +
push esi  +
lea eax [ebp+Buffer] +
push eax  +
push 478h  +
call sub_100684A  +
push [ebp+hMem]  +
lea eax [ebp+Buffer] +
push [ebp+uBytes]  +
push eax  +
lea eax [ebp+Text] +
push esi  +
push eax  +
call sub_1006E95  +
add esp 14h +
call sub_101A037  +
test eax eax +
jz loc_100B88F  +
push 1  +
push 10h  +
push hInstance  +
call sub_1019FE2  +
test eax eax +
jz loc_100B88F  +
mov eax 180000h +
jmp loc_100B891  +
xor eax eax +
or eax 10h +
push eax  +
push offset Caption  +
lea eax [ebp+Text] +
push eax  +
push edi  +
call ds:MessageBoxA  +
push [ebp+hMem]  +
call ds:LocalFree  +
or eax 0FFFFFFFFh +
jmp loc_100B8C2  +
sub eax [ebp+uBytes] +
neg eax  +
sbb eax eax +
and eax ecx +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010BBF  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi 1000h +
xor edi edi +
push esi  +
mov [ebp+var_4] edi +
call sub_1011A29  +
mov ebx eax +
pop ecx  +
cmp ebx edi +
jnz loc_100B8FC  +
xor eax eax +
jmp loc_100B944  +
push esi  +
push edi  +
push ebx  +
call sub_1010B40  +
add esp 0Ch +
cmp [ebp+arg_8] edi +
jz loc_100B93A  +
mov edi [ebp+arg_8] +
cmp [ebp+arg_8] esi +
jbe loc_100B916  +
mov edi esi +
sub [ebp+arg_8] edi +
push edi  +
push ebx  +
push [ebp+hFile]  +
call sub_100B2BB  +
test eax eax +
jnz loc_100B93A  +
add [ebp+var_4] edi +
push edi  +
push ebx  +
push [ebp+arg_4]  +
call sub_100B7AC  +
cmp [ebp+arg_8] 0 +
jnz loc_100B90C  +
push ebx  +
call sub_1011942  +
mov eax [ebp+var_4] +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov eax [ebp+arg_0] +
mov eax [eax+10h] +
push ebx  +
xor ecx ecx +
push esi  +
push edi  +
mov [ebp+var_C] ecx +
mov [ebp+var_4] eax +
cmp eax ecx +
jz loc_100B9F2  +
jmp loc_100B976  +
mov eax [ebp+var_4] +
mov esi [eax+10h] +
mov [ebp+var_8] 1 +
jmp loc_100B9D8  +
cmp [ebp+arg_10] ecx +
jz loc_100B98C  +
cmp esi [ebp+arg_10] +
jnz loc_100B9D6  +
mov ebx [esi+14h] +
mov [ebp+arg_10] ecx +
cmp [ebp+arg_C] ecx +
jz loc_100BA7B  +
cmp [ebp+arg_C] ebx +
jb loc_100BA7B  +
push ebx  +
push dword ptr [esi+18h]  +
push [ebp+hFile]  +
call sub_100B7AC  +
mov edi ebx +
neg edi  +
and edi 3 +
push edi  +
push off_101F2D8  +
push [ebp+hFile]  +
call sub_100B7AC  +
lea eax [edi+ebx] +
add [ebp+var_C] eax +
mov eax [ebp+var_4] +
add edi ebx +
sub [ebp+arg_C] edi +
xor ecx ecx +
mov esi [esi] +
cmp esi ecx +
jnz loc_100B982  +
cmp [ebp+var_8] ecx +
jz loc_100B9E9  +
mov esi [eax+0Ch] +
mov [ebp+var_8] ecx +
jmp loc_100B9D8  +
mov eax [eax] +
mov [ebp+var_4] eax +
cmp eax ecx +
jnz loc_100B973  +
mov eax [ebp+arg_0] +
mov eax [eax+0Ch] +
mov [ebp+var_4] eax +
cmp eax ecx +
jz loc_100BA79  +
jmp loc_100BA04  +
mov eax [ebp+var_4] +
mov esi [eax+10h] +
mov [ebp+var_8] 1 +
jmp loc_100BA5F  +
cmp [ebp+arg_10] ecx +
jz loc_100BA1A  +
cmp esi [ebp+arg_10] +
jnz loc_100BA5D  +
cmp [ebp+arg_C] 0 +
mov ebx [esi+14h] +
mov [ebp+arg_10] ecx +
jz loc_100BA7B  +
cmp [ebp+arg_C] ebx +
jb loc_100BA7B  +
push ebx  +
push dword ptr [esi+18h]  +
push [ebp+hFile]  +
call sub_100B7AC  +
mov edi ebx +
neg edi  +
and edi 3 +
push edi  +
push off_101F2D8  +
push [ebp+hFile]  +
call sub_100B7AC  +
lea eax [edi+ebx] +
add [ebp+var_C] eax +
mov eax [ebp+var_4] +
add edi ebx +
sub [ebp+arg_C] edi +
xor ecx ecx +
mov esi [esi] +
cmp esi ecx +
jnz loc_100BA10  +
cmp [ebp+var_8] ecx +
jz loc_100BA70  +
mov esi [eax+0Ch] +
mov [ebp+var_8] ecx +
jmp loc_100BA5F  +
mov eax [eax] +
mov [ebp+var_4] eax +
cmp eax ecx +
jnz loc_100BA01  +
xor esi esi +
push [ebp+hFile]  +
call sub_100B284  +
mov ecx [ebp+arg_8] +
lea edi [eax+ecx-1] +
dec ecx  +
not ecx  +
and edi ecx +
sub edi eax +
jz loc_100BAC2  +
cmp edi 10h +
jb loc_100BAB3  +
mov ebx edi +
shr ebx 4 +
push 10h  +
push off_101F2D8  +
push [ebp+hFile]  +
call sub_100B7AC  +
sub edi 10h +
dec ebx  +
jnz loc_100BA9D  +
push edi  +
push off_101F2D8  +
push [ebp+hFile]  +
call sub_100B7AC  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+lpBuffer] +
push edi  +
test esi esi +
jz loc_100BC15  +
mov eax [ebp+arg_1C] +
mov eax [eax+0ACh] +
test eax eax +
jz loc_100BC15  +
push eax  +
call sub_1011A29  +
mov edi eax +
pop ecx  +
mov [ebp+lpBuffer] edi +
test edi edi +
jnz loc_100BB0C  +
push 8  +
pop eax  +
jmp loc_100BC17  +
cmp [ebp+arg_8] 0 +
jnz loc_100BB1A  +
mov eax [ebp+arg_24] +
mov eax [eax] +
mov [ebp+var_4] eax +
mov eax [ebp+arg_18] +
push ebx  +
mov ebx [eax+0A8h] +
sub ebx [esi+0Ch] +
mov eax [esi+14h] +
add eax ebx +
push eax  +
push [ebp+hFile]  +
call sub_100B29F  +
mov eax [ebp+arg_1C] +
mov ecx [eax+0ACh] +
push 1Ch  +
pop esi  +
mov eax ecx +
xor edx edx +
div  esi +
push ecx  +
push edi  +
push [ebp+hFile]  +
mov esi eax +
imul esi esi +
add esi edi +
call sub_100B2BB  +
mov ecx [ebp+arg_8] +
test ecx ecx +
jnz loc_100BBC6  +
or [ebp+arg_8] 0FFFFFFFFh +
cmp edi esi +
jnb loc_100BB86  +
mov eax [edi+18h] +
cmp eax [ebp+arg_20] +
jb loc_100BB77  +
cmp eax [ebp+arg_8] +
jnb loc_100BB77  +
mov [ebp+arg_8] eax +
add edi 1Ch +
cmp edi esi +
jb loc_100BB67  +
mov eax [ebp+arg_8] +
cmp eax 0FFFFFFFFh +
jnz loc_100BB93  +
push 2  +
push 0  +
push [ebp+hFile]  +
call ds:_llseek  +
mov ecx [ebp+arg_24] +
mov [ecx] eax +
mov ecx [ebp+lpBuffer] +
cmp ecx esi +
jnb loc_100BBE6  +
mov eax esi +
sub eax ecx +
push 1Ch  +
lea edi [ecx+18h] +
dec eax  +
xor edx edx +
pop ecx  +
div  ecx +
inc eax  +
mov ecx [edi] +
cmp ecx [ebp+arg_20] +
jb loc_100BBBE  +
sub ecx [ebp+arg_8] +
add ecx [ebp+var_4] +
mov [edi] ecx +
add edi 1Ch +
dec eax  +
jnz loc_100BBAF  +
jmp loc_100BBE6  +
cmp edi esi +
jnb loc_100BBE6  +
mov eax [ebp+arg_C] +
mov edx [eax+0Ch] +
sub edx [ecx+0Ch] +
add edi 1Ch +
add [edi-8] edx +
mov edx [eax+14h] +
sub edx [ecx+14h] +
add [edi-4] edx +
cmp edi esi +
jb loc_100BBCD  +
mov eax [ebp+arg_14] +
mov eax [eax+14h] +
add eax ebx +
push eax  +
push [ebp+arg_4]  +
call sub_100B29F  +
mov eax [ebp+arg_1C] +
push dword ptr [eax+0ACh]  +
push [ebp+lpBuffer]  +
push [ebp+arg_4]  +
call sub_100B7AC  +
push [ebp+lpBuffer]  +
call sub_1011942  +
pop ecx  +
pop ebx  +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn 28h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_10] +
mov ecx [eax+54h] +
sub esp 44h +
push edi  +
mov edi ecx +
sub edi [ebp+arg_14] +
jnz loc_100BC3F  +
xor eax eax +
jmp loc_100BDB8  +
push esi  +
mov esi [eax+78h] +
test esi esi +
jz loc_100BC8C  +
cmp esi ecx +
jnb loc_100BC8C  +
mov eax esi +
sub eax edi +
push eax  +
push [ebp+hFile]  +
call sub_100B29F  +
push 28h  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+hFile]  +
call sub_100B2BB  +
add [ebp+var_38] edi +
add [ebp+var_28] edi +
add [ebp+var_24] edi +
add [ebp+var_20] edi +
push esi  +
push [ebp+arg_4]  +
call sub_100B29F  +
push 28h  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+arg_4]  +
call sub_100B7AC  +
mov eax [ebp+arg_10] +
push ebx  +
mov ebx [eax+80h] +
test ebx ebx +
jz loc_100BDAF  +
cmp ebx [eax+54h] +
jnb loc_100BDAF  +
and [ebp+var_4] 0 +
and [ebp+var_8] 0 +
mov eax ebx +
sub eax edi +
push eax  +
push [ebp+hFile]  +
call sub_100B29F  +
push 14h  +
lea eax [ebp+var_1C] +
push eax  +
push [ebp+hFile]  +
call sub_100B2BB  +
xor esi esi +
cmp [ebp+var_C] esi +
jz loc_100BDAF  +
add [ebp+var_10] edi +
add esi ebx +
push esi  +
push [ebp+arg_4]  +
call sub_100B29F  +
push 14h  +
lea eax [ebp+var_1C] +
push eax  +
push [ebp+arg_4]  +
call sub_100B7AC  +
mov ecx [ebp+arg_8] +
xor eax eax +
add ecx 0Ch +
mov edx [ebp+arg_10] +
movzx edx word ptr [edx+6] +
cmp eax edx +
jnb loc_100BDB3  +
mov edx [ecx] +
cmp [ebp+var_C] edx +
jb loc_100BD16  +
mov esi [ecx+4] +
add esi edx +
cmp [ebp+var_C] esi +
jb loc_100BD1C  +
inc eax  +
add ecx 28h +
jmp loc_100BCF6  +
mov ecx [ebp+arg_8] +
imul eax eax +
add eax ecx +
mov esi [eax+14h] +
sub esi [eax+0Ch] +
add esi [ebp+var_C] +
mov eax esi +
sub eax [ebp+arg_C] +
push eax  +
push [ebp+hFile]  +
call sub_100B29F  +
push esi  +
push [ebp+arg_4]  +
call sub_100B29F  +
xor esi esi +
jmp loc_100BD6A  +
cmp [ebp+arg_14] esi +
jz loc_100BD7F  +
test [ebp+arg_14] 80000000h +
jnz loc_100BD5C  +
add [ebp+arg_14] edi +
inc [ebp+var_8]  +
push 4  +
lea eax [ebp+arg_14] +
push eax  +
push [ebp+arg_4]  +
call sub_100B7AC  +
push 4  +
lea eax [ebp+arg_14] +
push eax  +
push [ebp+hFile]  +
mov [ebp+arg_14] esi +
call sub_100B2BB  +
test eax eax +
jnz loc_100BD48  +
inc [ebp+var_4]  +
mov esi [ebp+var_4] +
imul esi esi +
mov eax esi +
sub eax edi +
add eax ebx +
push eax  +
push [ebp+hFile]  +
call sub_100B29F  +
push 14h  +
lea eax [ebp+var_1C] +
push eax  +
push [ebp+hFile]  +
call sub_100B2BB  +
cmp [ebp+var_C] 0 +
jnz loc_100BCD2  +
xor eax eax +
jmp loc_100BDB6  +
push 0Dh  +
pop eax  +
pop ebx  +
pop esi  +
pop edi  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
push edi  +
mov edi ds:SetLastError +
push 0  +
call edi  +
push [ebp+hMem]  +
call ds:GlobalLock  +
push [ebp+lpString]  +
mov ebx eax +
call sub_100AE88  +
push [ebp+arg_8]  +
mov esi eax +
call sub_100AE88  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_100BEB2  +
test esi esi +
jz loc_100BEC5  +
push ebx  +
push eax  +
call sub_100AFA6  +
mov [ebp+var_8] eax +
test eax eax +
jnz loc_100BE29  +
cmp esi [ebp+lpString] +
jz loc_100BE21  +
push esi  +
call sub_1011942  +
pop ecx  +
mov eax [ebp+var_4] +
jmp loc_100BEC9  +
push ebx  +
push esi  +
call sub_100AFA6  +
mov [ebp+var_C] eax +
test eax eax +
jz loc_100BE15  +
cmp esi [ebp+lpString] +
jz loc_100BE43  +
push esi  +
call sub_1011942  +
pop ecx  +
mov eax [ebp+var_4] +
cmp eax [ebp+arg_8] +
jz loc_100BE52  +
push eax  +
call sub_1011942  +
pop ecx  +
xor esi esi +
cmp [ebp+arg_14] esi +
jz loc_100BE77  +
push [ebp+arg_14]  +
call sub_1011A29  +
mov esi eax +
pop ecx  +
test esi esi +
jz loc_100BED5  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push esi  +
call loc_10113B0  +
add esp 0Ch +
push [ebp+arg_14]  +
push esi  +
push ebx  +
push [ebp+arg_C]  +
push [ebp+var_8]  +
push [ebp+var_C]  +
call sub_100B558  +
push [ebp+hMem]  +
mov esi eax +
call ds:GlobalUnlock  +
test esi esi +
jnz loc_100BE9E  +
xor eax eax +
inc eax  +
jmp loc_100BEE9  +
push esi  +
call edi  +
cmp [ebp+arg_10] 0 +
jz loc_100BEE7  +
push [ebp+arg_10]  +
call sub_1011942  +
pop ecx  +
jmp loc_100BEE7  +
test esi esi +
jz loc_100BED5  +
cmp esi [ebp+lpString] +
jz loc_100BED5  +
push esi  +
call sub_1011942  +
mov eax [ebp+var_4] +
pop ecx  +
test eax eax +
jz loc_100BED5  +
cmp eax [ebp+arg_8] +
jz loc_100BED5  +
push eax  +
call sub_1011942  +
pop ecx  +
push 8  +
pop esi  +
push [ebp+hMem]  +
mov [ebx+14h] esi +
call ds:GlobalUnlock  +
push esi  +
call edi  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi [ebp+hResInfo] +
test esi 0FFFF0000h +
jz loc_100BF2C  +
push 0FFFFFFFFh  +
push offset aMui_0  +
push 0FFFFFFFFh  +
push esi  +
push 1  +
push 7Fh  +
call ds:CompareStringA  +
cmp eax 2 +
jnz loc_100BF2C  +
xor eax eax +
inc eax  +
jmp loc_100C047  +
push dword ptr [ebp+wLanguage]  +
push [ebp+lpString]  +
push esi  +
push [ebp+hModule]  +
call ds:FindResourceExA  +
mov [ebp+hResInfo] eax +
test eax eax +
jz loc_100C047  +
push ebx  +
push edi  +
push esi  +
call sub_100AE88  +
push [ebp+lpString]  +
mov edi eax +
call sub_100AE88  +
mov ebx eax +
test edi edi +
jz loc_100C039  +
test ebx ebx +
jz loc_100C039  +
push [ebp+arg_10]  +
push edi  +
call sub_100AFA6  +
mov [ebp+var_8] eax +
cmp esi edi +
jz loc_100BF82  +
push edi  +
call sub_1011942  +
pop ecx  +
cmp [ebp+var_8] 0 +
jz loc_100C039  +
mov esi [ebp+arg_10] +
push esi  +
push ebx  +
call sub_100AFA6  +
mov [ebp+var_4] eax +
cmp [ebp+lpString] ebx +
jz loc_100BFA5  +
push ebx  +
call sub_1011942  +
pop ecx  +
cmp [ebp+var_4] 0 +
jnz loc_100BFB7  +
mov dword ptr [esi+14h] 8 +
jmp loc_100C043  +
push [ebp+hResInfo]  +
push [ebp+hModule]  +
call ds:SizeofResource  +
mov esi eax +
test esi esi +
jz loc_100C043  +
push esi  +
call sub_1011A29  +
mov edi eax +
pop ecx  +
test edi edi +
jz loc_100C043  +
push esi  +
push 0  +
push edi  +
call sub_1010B40  +
add esp 0Ch +
push [ebp+hResInfo]  +
push [ebp+hModule]  +
call ds:LoadResource  +
mov ebx eax +
test ebx ebx +
jnz loc_100BFFD  +
push edi  +
call sub_1011942  +
pop ecx  +
jmp loc_100C043  +
push ebx  +
call ds:LockResource  +
test eax eax +
jz loc_100BFF4  +
push esi  +
push eax  +
push edi  +
call loc_10113B0  +
add esp 0Ch +
push ebx  +
call ds:FreeResource  +
push esi  +
mov esi [ebp+arg_10] +
push edi  +
push esi  +
push dword ptr [ebp+wLanguage]  +
push [ebp+var_4]  +
push [ebp+var_8]  +
call sub_100B558  +
test eax eax +
jnz loc_100BFAB  +
inc eax  +
jmp loc_100C045  +
mov eax [ebp+arg_10] +
mov dword ptr [eax+14h] 8 +
xor eax eax +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 25Ch +
push ebx  +
push esi  +
call ds:GetTickCount  +
mov esi [ebp+lOffset] +
or [ebp+var_1C] 0FFFFFFFFh +
or [ebp+var_34] 0FFFFFFFFh +
push esi  +
push [ebp+hFile]  +
mov [ebp+var_48] eax +
xor eax eax +
mov [ebp+var_C] eax +
mov [ebp+var_44] eax +
mov [ebp+var_14] eax +
mov [ebp+var_30] eax +
mov [ebp+var_18] eax +
mov [ebp+var_24] eax +
mov [ebp+var_4] eax +
mov [ebp+var_50] eax +
call sub_100B29F  +
push 0F8h  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+hFile]  +
call sub_100B2BB  +
movzx eax [ebp+var_248] +
lea ebx [eax+esi+18h] +
movzx eax [ebp+var_256] +
imul eax eax +
lea ecx [eax+ebx] +
mov [ebp+var_54] ecx +
mov ecx 4550h +
mov [ebp+var_6C] ebx +
cmp word ptr [ebp+Buffer] cx +
jz loc_100C0DF  +
mov eax 0BFh +
jmp loc_100D224  +
test byte ptr [ebp+var_246] 2 +
jnz loc_100C0FE  +
test [ebp+var_246] 2000h +
jnz loc_100C0FE  +
mov eax 0C0h +
jmp loc_100D224  +
push edi  +
push 3Eh  +
pop ecx  +
lea esi [ebp+Buffer] +
lea edi [ebp+var_164] +
push eax  +
movs   +
call sub_1011A29  +
pop ecx  +
mov [ebp+var_28] eax +
test eax eax +
jnz loc_100C12A  +
mov [ebp+var_8] 8 +
jmp loc_100D211  +
movzx eax [ebp+var_256] +
mov esi [ebp+var_28] +
imul eax eax +
push eax  +
push 0  +
push esi  +
call sub_1010B40  +
add esp 0Ch +
push ebx  +
push [ebp+hFile]  +
call sub_100B29F  +
movzx eax [ebp+var_256] +
imul eax eax +
push eax  +
push esi  +
push [ebp+hFile]  +
call sub_100B2BB  +
movzx eax [ebp+var_256] +
imul eax eax +
add eax esi +
xor ebx ebx +
mov [ebp+var_3C] eax +
mov [ebp+var_68] ebx +
cmp esi eax +
jnb loc_100C19A  +
sub eax esi +
push 28h  +
lea ecx [esi+14h] +
dec eax  +
xor edx edx +
pop esi  +
div  esi +
inc eax  +
mov edx [ecx] +
cmp edx ebx +
jbe loc_100C191  +
mov ebx [ecx-4] +
add ebx edx +
add ecx 28h +
dec eax  +
jnz loc_100C186  +
mov [ebp+var_68] ebx +
mov eax [ebp+arg_C] +
and [ebp+var_20] 0 +
mov ebx [eax+10h] +
push 3  +
pop edi  +
jmp loc_100C254  +
mov esi [ebx+10h] +
test esi esi +
jnz loc_100C1BC  +
cmp [ebx+0Ch] esi +
jz loc_100C252  +
mov eax [ebx+4] +
movzx eax word ptr [eax+0Eh] +
mov ecx [ebp+var_44] +
inc [ebp+var_30]  +
inc [ebp+var_14]  +
lea eax [ecx+eax*2+2] +
mov [ebp+var_44] eax +
xor eax eax +
jmp loc_100C21C  +
inc [ebp+var_24]  +
test eax eax +
jz loc_100C1F8  +
mov ecx [esi+4] +
movzx edx word ptr [ecx+0Eh] +
push edx  +
push dword ptr [ecx+10h]  +
push dword ptr [eax+10h]  +
call sub_1011CDD  +
add esp 0Ch +
test eax eax +
jz loc_100C20C  +
mov eax [esi+4] +
movzx eax word ptr [eax+0Eh] +
mov ecx [ebp+var_C] +
inc [ebp+var_18]  +
lea eax [ecx+eax*2+2] +
mov [ebp+var_C] eax +
mov eax [esi+14h] +
add eax edi +
and eax 0FFFFFFFCh +
add [ebp+var_20] eax +
mov eax [esi+4] +
mov esi [esi] +
test esi esi +
jnz loc_100C1D7  +
mov eax [ebx+0Ch] +
xor ecx ecx +
jmp loc_100C24E  +
inc [ebp+var_24]  +
test ecx ecx +
jz loc_100C23B  +
mov edx [eax+4] +
mov cx [ecx+4] +
cmp cx [edx+4] +
jz loc_100C23E  +
inc [ebp+var_18]  +
mov ecx [eax+14h] +
add ecx edi +
and ecx 0FFFFFFFCh +
add [ebp+var_20] ecx +
mov ecx [eax+4] +
mov eax [eax] +
test eax eax +
jnz loc_100C227  +
mov ebx [ebx] +
test ebx ebx +
jnz loc_100C1AC  +
mov eax [ebp+arg_C] +
mov ebx [eax+0Ch] +
jmp loc_100C2FB  +
mov esi [ebx+10h] +
test esi esi +
jnz loc_100C277  +
cmp [ebx+0Ch] esi +
jz loc_100C2F9  +
inc [ebp+var_30]  +
xor eax eax +
jmp loc_100C2C3  +
inc [ebp+var_24]  +
test eax eax +
jz loc_100C29F  +
mov ecx [esi+4] +
movzx edx word ptr [ecx+0Eh] +
push edx  +
push dword ptr [ecx+10h]  +
push dword ptr [eax+10h]  +
call sub_1011CDD  +
add esp 0Ch +
test eax eax +
jz loc_100C2B3  +
mov eax [esi+4] +
movzx eax word ptr [eax+0Eh] +
mov ecx [ebp+var_C] +
inc [ebp+var_18]  +
lea eax [ecx+eax*2+2] +
mov [ebp+var_C] eax +
mov eax [esi+14h] +
add eax edi +
and eax 0FFFFFFFCh +
add [ebp+var_20] eax +
mov eax [esi+4] +
mov esi [esi] +
test esi esi +
jnz loc_100C27E  +
mov eax [ebx+0Ch] +
xor ecx ecx +
jmp loc_100C2F5  +
inc [ebp+var_24]  +
test ecx ecx +
jz loc_100C2E2  +
mov edx [eax+4] +
mov cx [ecx+4] +
cmp cx [edx+4] +
jz loc_100C2E5  +
inc [ebp+var_18]  +
mov ecx [eax+14h] +
add ecx edi +
and ecx 0FFFFFFFCh +
add [ebp+var_20] ecx +
mov ecx [eax+4] +
mov eax [eax] +
test eax eax +
jnz loc_100C2CE  +
mov ebx [ebx] +
test ebx ebx +
jnz loc_100C267  +
mov eax [ebp+var_24] +
mov ecx [ebp+var_18] +
lea edx [eax+ecx] +
add edx [ebp+var_30] +
push 28h  +
lea edx [eax+edx*2+2] +
mov eax [ebp+var_C] +
add edx ecx +
mov ecx [ebp+var_44] +
add edx [ebp+var_30] +
lea esi [ecx+eax] +
neg esi  +
and esi edi +
add esi ecx +
lea esi [esi+edx*8] +
add esi eax +
mov eax [ebp+var_3C] +
sub eax [ebp+var_28] +
pop ebx  +
cdq   +
mov ecx ebx +
idiv  ecx +
add [ebp+var_20] esi +
push offset a_rsrc  +
mov [ebp+uBytes] esi +
push eax  +
push [ebp+var_28]  +
mov [ebp+var_2C] eax +
call sub_100B341  +
push offset a_rsrc1  +
push [ebp+var_2C]  +
mov edi eax +
push [ebp+var_28]  +
mov [ebp+var_58] edi +
call sub_100B341  +
mov [ebp+var_40] eax +
test edi edi +
jz loc_100C38F  +
lea ecx [edi+28h] +
cmp ecx eax +
mov eax edi +
jnz loc_100C381  +
sub eax [ebp+var_28] +
cdq   +
idiv  ebx +
mov [ebp+var_1C] eax +
jmp loc_100C38F  +
sub eax [ebp+var_28] +
cdq   +
idiv  ebx +
mov [ebp+var_1C] eax +
cmp ecx [ebp+var_3C] +
jb loc_100C399  +
mov ebx 7FFFFFFFh +
mov [ebp+var_8] ebx +
jmp loc_100C3AA  +
mov ebx [edi+34h] +
sub ebx [edi+0Ch] +
mov [ebp+var_8] ebx +
cmp esi ebx +
ja loc_100C4FD  +
push offset a_reloc  +
push [ebp+var_2C]  +
push [ebp+var_28]  +
call sub_100B341  +
mov ecx eax +
test edi edi +
jz loc_100C3D3  +
cmp [ebp+var_20] ebx +
jbe loc_100C3D3  +
lea eax [edi+28h] +
cmp ecx eax +
jnz loc_100C3E5  +
mov [ebp+var_8] 7FFFFFFFh +
mov ebx [ebp+var_4] +
and [ebp+lpBuffer] 0 +
mov [ebp+var_20] esi +
mov esi [ebp+arg_C] +
mov edi [esi+10h] +
jmp loc_100C45F  +
cmp [ebp+var_40] 0 +
push 28h  +
pop ebx  +
jnz loc_100C401  +
mov eax ecx +
sub eax [ebp+var_28] +
cdq   +
idiv  ebx +
mov ebx [ecx+0Ch] +
sub ebx [edi+0Ch] +
mov [ebp+var_34] eax +
jmp loc_100C3D6  +
mov ecx [ebp+var_40] +
jmp loc_100C3EE  +
mov eax [edi+10h] +
test eax eax +
jnz loc_100C412  +
cmp [edi+0Ch] eax +
jz loc_100C45D  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_100C436  +
lea eax [ebp+lpBuffer] +
push eax  +
push [ebp+var_8]  +
lea eax [ebp+var_4] +
push [ebp+var_20]  +
push ebx  +
push eax  +
call sub_100B395  +
cmp [ebp+var_4] 0 +
mov [ebp+var_20] eax +
jnz loc_100C419  +
mov eax [edi+0Ch] +
mov [ebp+var_4] eax +
test eax eax +
jz loc_100C45D  +
lea eax [ebp+lpBuffer] +
push eax  +
push [ebp+var_8]  +
lea eax [ebp+var_4] +
push [ebp+var_20]  +
push ebx  +
push eax  +
call sub_100B395  +
cmp [ebp+var_4] 0 +
mov [ebp+var_20] eax +
jnz loc_100C440  +
mov edi [edi] +
test edi edi +
jnz loc_100C406  +
mov edi [esi+0Ch] +
jmp loc_100C4C1  +
mov eax [edi+10h] +
test eax eax +
jnz loc_100C474  +
cmp [edi+0Ch] eax +
jz loc_100C4BF  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_100C498  +
lea eax [ebp+lpBuffer] +
push eax  +
push [ebp+var_8]  +
lea eax [ebp+var_4] +
push [ebp+var_20]  +
push ebx  +
push eax  +
call sub_100B395  +
cmp [ebp+var_4] 0 +
mov [ebp+var_20] eax +
jnz loc_100C47B  +
mov eax [edi+0Ch] +
mov [ebp+var_4] eax +
test eax eax +
jz loc_100C4BF  +
lea eax [ebp+lpBuffer] +
push eax  +
push [ebp+var_8]  +
lea eax [ebp+var_4] +
push [ebp+var_20]  +
push ebx  +
push eax  +
call sub_100B395  +
cmp [ebp+var_4] 0 +
mov [ebp+var_20] eax +
jnz loc_100C4A2  +
mov edi [edi] +
test edi edi +
jnz loc_100C468  +
cmp [ebp+lpBuffer] edi +
jnz loc_100C4D0  +
mov eax [ebp+var_20] +
mov [ebp+lpBuffer] eax +
mov esi [ebp+var_28] +
push offset a_debug  +
push [ebp+var_2C]  +
push esi  +
call sub_100B341  +
mov edi eax +
mov [ebp+var_64] edi +
test edi edi +
jz loc_100C505  +
cmp [ebp+var_1B4] 0 +
jz loc_100C4FD  +
mov eax [ebp+var_3C] +
add eax 0FFFFFFD8h +
cmp edi eax +
jz loc_100C505  +
push 0Dh  +
pop eax  +
jmp loc_100D223  +
and [ebp+var_60] 0 +
mov eax esi +
cmp esi [ebp+var_3C] +
jnb loc_100C535  +
mov ecx [eax+0Ch] +
cmp [ebp+var_1B4] ecx +
jb loc_100C528  +
mov edx [eax+10h] +
add edx ecx +
cmp [ebp+var_1B4] edx +
jb loc_100C532  +
add eax 28h +
cmp eax [ebp+var_3C] +
jb loc_100C510  +
jmp loc_100C535  +
mov [ebp+var_60] eax +
push offset a_reloc  +
push [ebp+var_2C]  +
push esi  +
call sub_100B341  +
cmp [ebp+var_1C] 0FFFFFFFFh +
mov ecx eax +
jnz loc_100C572  +
test ecx ecx +
jz loc_100C559  +
sub eax esi +
push 28h  +
cdq   +
pop ebx  +
idiv  ebx +
jmp loc_100C568  +
test edi edi +
jz loc_100C561  +
mov eax edi +
jmp loc_100C54F  +
movzx eax [ebp+var_15E] +
inc [ebp+var_15E]  +
mov [ebp+var_1C] eax +
cmp [ebp+var_34] 0FFFFFFFFh +
jz loc_100C5C3  +
mov eax [ebp+var_40] +
test eax eax +
jz loc_100C598  +
sub eax esi +
cdq   +
push 28h  +
pop ecx  +
idiv  ecx +
mov [ebp+var_34] eax +
mov eax 0FFFFh +
add [ebp+var_15E] ax +
jmp loc_100C5BA  +
test ecx ecx +
jz loc_100C5A8  +
mov eax ecx +
sub eax esi +
push 28h  +
cdq   +
pop ecx  +
idiv  ecx +
jmp loc_100C5B7  +
test edi edi +
jz loc_100C5B0  +
mov eax edi +
jmp loc_100C59E  +
movzx eax [ebp+var_15E] +
mov [ebp+var_34] eax +
inc [ebp+var_15E]  +
jmp loc_100C5D5  +
cmp [ebp+var_40] 0 +
jz loc_100C5D5  +
mov eax 0FFFFh +
add [ebp+var_15E] ax +
movzx edx [ebp+var_256] +
movzx ecx [ebp+var_15E] +
mov eax [ebp+var_208] +
sub ecx edx +
imul edx edx +
imul ecx ecx +
sub eax edx +
sub eax [ebp+lOffset] +
sub eax 0F8h +
cmp ecx eax +
jbe loc_100C628  +
sub ecx eax +
xor edi edi +
lea eax [ebp+edi*8+var_EC] +
mov edx [eax] +
test edx edx +
jz loc_100C61C  +
cmp edx [ebp+var_110] +
jnb loc_100C61C  +
add edx ecx +
mov [eax] edx +
inc edi  +
cmp edi 10h +
jl loc_100C603  +
add [ebp+var_110] ecx +
movzx edi [ebp+var_15E] +
imul edi edi +
movsx eax di +
push eax  +
call sub_1011A29  +
pop ecx  +
mov [ebp+var_38] eax +
test eax eax +
jnz loc_100C64F  +
mov [ebp+var_8] 8 +
jmp loc_100D220  +
mov ebx [ebp+var_38] +
push edi  +
push 0  +
push ebx  +
call sub_1010B40  +
mov eax [ebp+var_1C] +
and [ebp+var_4] 0 +
imul eax eax +
add eax ebx +
add esp 0Ch +
mov [ebp+var_1C] eax +
cmp esi [ebp+var_3C] +
jnb loc_100C7EB  +
mov eax ebx +
add eax edi +
add esi 0Ch +
mov [ebp+var_5C] eax +
mov [ebp+var_2C] esi +
cmp ebx [ebp+var_5C] +
jnb loc_100C11E  +
lea eax [esi-0Ch] +
cmp eax [ebp+var_40] +
jnz loc_100C6B7  +
cmp [ebp+var_34] 0FFFFFFFFh +
jnz loc_100C7D6  +
lea eax [esi+1Ch] +
cmp eax [ebp+var_3C] +
jnb loc_100C7D6  +
mov eax [esi] +
sub eax [esi+28h] +
add [ebp+var_4] eax +
jmp loc_100C7D6  +
cmp ebx [ebp+var_1C] +
jnz loc_100CAF1  +
mov edx [ebp+var_128] +
mov eax [ebp+lpBuffer] +
lea ecx [edx+eax-1] +
dec edx  +
not edx  +
and ecx edx +
cmp [ebp+var_58] 0 +
mov [ebp+var_8] ecx +
push 0Ah  +
mov edi ebx +
jnz loc_100C72F  +
mov ecx [ebp+var_12C] +
lea eax [ecx+eax-1] +
dec ecx  +
not ecx  +
and eax ecx +
pop ecx  +
push offset a_rsrc  +
mov [ebp+var_4] eax +
push 8  +
xor eax eax +
push ebx  +
stos   +
call sub_1006DCD  +
mov eax [esi] +
mov ecx [ebp+var_8] +
mov [ebx+0Ch] eax +
mov eax [esi+8] +
mov [ebx+14h] eax +
mov [ebx+10h] ecx +
mov dword ptr [ebx+24h] 0C0000040h +
mov eax [ebp+var_12C] +
lea ecx [eax+ecx-1] +
dec eax  +
not eax  +
and ecx eax +
mov [ebx+8] ecx +
jmp loc_100C7AB  +
mov eax [ebp+var_2C] +
lea esi [eax-0Ch] +
pop ecx  +
movs   +
mov ecx [ebp+var_8] +
mov [ebx+10h] ecx +
mov edx [ebp+var_12C] +
lea esi [edx+ecx-1] +
dec edx  +
not edx  +
and esi edx +
mov [ebx+8] esi +
mov edx [eax+4] +
cmp ecx edx +
jnz loc_100C75D  +
and [ebp+var_4] 0 +
jmp loc_100C7AB  +
jbe loc_100C786  +
mov ecx [ebp+var_12C] +
mov edx [ebp+lpBuffer] +
lea edx [ecx+edx-1] +
dec ecx  +
not ecx  +
and edx ecx +
add [ebp+var_4] edx +
lea ecx [eax+1Ch] +
cmp ecx [ebp+var_3C] +
jnb loc_100C7AB  +
mov ecx [eax] +
sub ecx [eax+28h] +
add [ebp+var_4] ecx +
jmp loc_100C7AB  +
mov edx [ebp+var_58] +
mov eax [edx+10h] +
and [ebp+var_4] 0 +
mov [ebx+10h] eax +
mov ecx [ebp+var_12C] +
lea eax [eax+ecx-1] +
dec ecx  +
not ecx  +
and eax ecx +
mov [ebx+8] eax +
mov eax [edx+10h] +
mov [ebp+var_50] eax +
add ebx 28h +
cmp [ebp+var_58] 0 +
jnz loc_100C7D3  +
cmp ebx [ebp+var_5C] +
jnb loc_100C11E  +
mov esi [ebp+var_2C] +
mov eax [ebp+var_4] +
push 0Ah  +
add esi 0FFFFFFF4h +
mov edi ebx +
pop ecx  +
add ebx 28h +
movs   +
add [ebx-1Ch] eax +
mov esi [ebp+var_2C] +
add esi 28h +
lea eax [esi-0Ch] +
mov [ebp+var_2C] esi +
cmp eax [ebp+var_3C] +
jb loc_100C683  +
mov ebx [ebp+var_38] +
movzx eax [ebp+var_15E] +
mov esi [ebp+uBytes] +
imul eax eax +
lea eax [eax+ebx-28h] +
mov ecx [eax+10h] +
add ecx [eax+0Ch] +
mov eax [ebp+var_12C] +
lea ecx [ecx+eax-1] +
dec eax  +
not eax  +
and ecx eax +
add esi 2 +
push esi  +
mov [ebp+var_114] ecx +
call sub_1011A29  +
pop ecx  +
mov [ebp+lpBuffer] eax +
test eax eax +
jz loc_100C11E  +
push esi  +
mov esi eax +
push 0  +
push esi  +
call sub_1010B40  +
mov eax [ebp+var_48] +
mov ecx [ebp+var_14] +
and dword ptr [esi] 0 +
mov edi [ebp+var_24] +
mov [esi+4] eax +
add esp 0Ch +
push 4  +
pop eax  +
mov [esi+8] ax +
xor eax eax +
mov [esi+0Ah] ax +
mov eax [ebp+var_30] +
mov edx eax +
lea ebx [esi+10h] +
mov [esi+0Ch] cx +
sub edx ecx +
mov ecx [ebp+var_18] +
mov [ebp+var_30] ebx +
lea ebx [ebx+eax*8] +
lea eax [ecx+eax*2] +
mov [esi+0Eh] dx +
lea esi [ebx+eax*8] +
lea eax [edi+ecx*2] +
lea eax [esi+eax*8] +
mov [ebp+var_8] eax +
shl edi 4 +
add edi eax +
mov eax [ebp+var_44] +
add eax edi +
add eax [ebp+var_C] +
mov [ebp+var_44] eax +
mov eax [ebp+arg_C] +
mov eax [eax+10h] +
mov [ebp+var_24] eax +
test eax eax +
jz loc_100CAD0  +
mov eax [ebp+lpBuffer] +
mov ecx [ebp+uBytes] +
add eax ecx +
mov [ebp+var_2C] eax +
mov eax [ebp+var_30] +
add eax 8 +
mov [ebp+var_14] eax +
cmp eax [ebp+var_2C] +
jnb loc_100C11E  +
mov ecx [ebp+var_30] +
mov edx edi +
sub edx [ebp+lpBuffer] +
mov eax 80000000h +
or edx eax +
mov [ecx] edx +
mov edx ebx +
sub edx [ebp+lpBuffer] +
or edx eax +
mov eax [ebp+var_14] +
mov [ebp+var_30] eax +
mov eax [ebp+var_24] +
mov [ecx+4] edx +
mov ecx [eax+4] +
mov cx [ecx+0Eh] +
mov [edi] cx +
mov eax [eax+4] +
movzx ecx word ptr [eax+0Eh] +
push ecx  +
push dword ptr [eax+10h]  +
mov eax [ebp+var_44] +
sub eax edi +
sar eax 1 +
push eax  +
lea eax [edi+2] +
push eax  +
call sub_101B182  +
mov edx [ebp+var_24] +
mov eax [edx+4] +
movzx eax word ptr [eax+0Eh] +
lea edi [edi+eax*2+2] +
movzx eax word ptr [edx+14h] +
push eax  +
movzx eax word ptr [edx+18h] +
push eax  +
push [ebp+var_48]  +
push ebx  +
call sub_100B30A  +
mov edx [edx+10h] +
and [ebp+var_18] 0 +
add ebx 10h +
mov [ebp+var_4] edx +
test edx edx +
jz loc_100CA1F  +
mov eax [ebp+var_8] +
sub eax [ebp+lpBuffer] +
mov [ebp+var_14] eax +
mov eax esi +
sub eax [ebp+lpBuffer] +
mov [ebp+var_C] eax +
cmp [ebp+var_18] 0 +
jz loc_100C975  +
mov eax [ebp+var_4] +
mov eax [eax+4] +
movzx ecx word ptr [eax+0Eh] +
push ecx  +
push dword ptr [eax+10h]  +
mov eax [ebp+var_18] +
push dword ptr [eax+10h]  +
call sub_1011CDD  +
add esp 0Ch +
test eax eax +
jz loc_100C9DF  +
mov ecx edi +
sub ecx [ebp+lpBuffer] +
mov eax 80000000h +
or ecx eax +
mov [ebx] ecx +
mov ecx [ebp+var_C] +
or ecx eax +
mov eax [ebp+var_4] +
mov [ebx+4] ecx +
mov ecx [eax+4] +
mov cx [ecx+0Eh] +
mov [edi] cx +
mov eax [eax+4] +
movzx ecx word ptr [eax+0Eh] +
push ecx  +
push dword ptr [eax+10h]  +
mov eax [ebp+var_44] +
sub eax edi +
sar eax 1 +
push eax  +
lea eax [edi+2] +
push eax  +
add ebx 8 +
call sub_101B182  +
mov ecx [ebp+var_4] +
mov eax [ecx+4] +
movzx edx word ptr [eax+0Eh] +
mov [ebp+var_18] eax +
movzx eax word ptr [ecx+1Eh] +
push eax  +
push 0  +
push [ebp+var_48]  +
lea edi [edi+edx*2+2] +
push esi  +
call sub_100B30A  +
add esi 10h +
add [ebp+var_C] 10h +
mov edx [ebp+var_4] +
movzx eax word ptr [edx+20h] +
mov ecx [ebp+var_1C] +
add [ebp+var_C] 8 +
mov [esi] eax +
mov eax [ebp+var_14] +
mov [esi+4] eax +
mov eax [edx+8] +
push dword ptr [edx+14h]  +
add eax [ecx+0Ch] +
add esi 8 +
push eax  +
push [ebp+var_8]  +
call sub_100B2E3  +
mov edx [edx] +
add [ebp+var_8] 10h +
add [ebp+var_14] 10h +
mov [ebp+var_4] edx +
test edx edx +
jnz loc_100C94F  +
mov eax [ebp+var_24] +
mov edx [eax+0Ch] +
and [ebp+var_18] 0 +
test edx edx +
jz loc_100CAC0  +
mov eax [ebp+var_8] +
sub eax [ebp+lpBuffer] +
mov [ebp+var_14] eax +
mov eax esi +
sub eax [ebp+lpBuffer] +
mov [ebp+var_C] eax +
mov eax [ebp+var_18] +
test eax eax +
jz loc_100CA56  +
mov ecx [edx+4] +
mov ax [eax+4] +
cmp ax [ecx+4] +
jz loc_100CA8A  +
mov eax [edx+4] +
movzx eax word ptr [eax+4] +
mov [ebx] eax +
mov eax [ebp+var_C] +
or eax 80000000h +
mov [ebx+4] eax +
mov eax [edx+4] +
mov [ebp+var_18] eax +
movzx eax word ptr [edx+1Eh] +
push eax  +
push 0  +
push [ebp+var_48]  +
add ebx 8 +
push esi  +
call sub_100B30A  +
add esi 10h +
add [ebp+var_C] 10h +
movzx eax word ptr [edx+20h] +
mov ecx [ebp+var_1C] +
add [ebp+var_C] 8 +
mov [esi] eax +
mov eax [ebp+var_14] +
mov [esi+4] eax +
mov eax [edx+8] +
push dword ptr [edx+14h]  +
add eax [ecx+0Ch] +
add esi 8 +
push eax  +
push [ebp+var_8]  +
call sub_100B2E3  +
mov edx [edx] +
add [ebp+var_8] 10h +
add [ebp+var_14] 10h +
test edx edx +
jnz loc_100CA42  +
mov eax [ebp+var_24] +
mov eax [eax] +
mov [ebp+var_24] eax +
test eax eax +
jnz loc_100C8AC  +
mov eax [ebp+arg_C] +
mov edx [eax+0Ch] +
mov [ebp+var_24] edx +
test edx edx +
jz loc_100CDA7  +
mov eax [ebp+uBytes] +
mov ecx [ebp+lpBuffer] +
add ecx eax +
mov [ebp+var_2C] ecx +
jmp loc_100CBBB  +
cmp [ebp+var_34] 0FFFFFFFFh +
jz loc_100CB9A  +
mov eax [ebp+var_34] +
imul eax eax +
add eax [ebp+var_38] +
cmp ebx eax +
jnz loc_100CB9A  +
push 0Ah  +
pop ecx  +
push offset a_rsrc1  +
push 8  +
xor eax eax +
mov edi ebx +
push ebx  +
stos   +
call sub_1006DCD  +
cmp [ebp+var_40] 0 +
jnz loc_100CB51  +
mov eax [esi] +
mov [ebx+0Ch] eax +
mov eax [ebp+var_20] +
mov dword ptr [ebx+24h] 0C0000040h +
mov ecx [ebp+var_12C] +
lea eax [ecx+eax-1] +
dec ecx  +
not ecx  +
and eax ecx +
mov ecx [ebp+var_1C] +
add eax [ecx+0Ch] +
sub eax [ebx+0Ch] +
jmp loc_100CB8F  +
mov eax [ebp+var_40] +
mov ecx [eax+0Ch] +
mov [ebx+0Ch] ecx +
mov ecx [ebp+var_58] +
mov dword ptr [ebx+24h] 0C0000040h +
mov ecx [ecx+0Ch] +
sub ecx [eax+0Ch] +
mov esi [esi] +
mov eax [ebp+var_20] +
add ecx eax +
mov edx esi +
sub edx [ebx+0Ch] +
cmp ecx edx +
mov ecx [ebp+var_12C] +
lea eax [ecx+eax-1] +
dec ecx  +
not ecx  +
and eax ecx +
mov ecx [ebp+var_1C] +
add eax [ecx+0Ch] +
sub eax esi +
mov [ebp+var_4] eax +
add ebx 28h +
jmp loc_100C7B4  +
cmp ebx [ebp+var_1C] +
jnb loc_100C7B4  +
mov esi [ebp+var_2C] +
push 0Ah  +
add esi 0FFFFFFF4h +
mov edi ebx +
pop ecx  +
movs   +
add ebx 28h +
jmp loc_100C7D3  +
mov edx [ebp+var_24] +
mov eax [ebp+var_30] +
add eax 8 +
mov [ebp+var_14] eax +
cmp eax [ebp+var_2C] +
jnb loc_100C11E  +
mov eax [edx+4] +
movzx ecx word ptr [eax+4] +
mov eax [ebp+var_30] +
mov [eax] ecx +
mov ecx ebx +
sub ecx [ebp+lpBuffer] +
or ecx 80000000h +
mov [eax+4] ecx +
mov eax [ebp+var_14] +
mov [ebp+var_30] eax +
movzx eax word ptr [edx+14h] +
push eax  +
movzx eax word ptr [edx+18h] +
push eax  +
push [ebp+var_48]  +
push ebx  +
call sub_100B30A  +
mov edx [edx+10h] +
and [ebp+var_18] 0 +
add ebx 10h +
mov [ebp+var_4] edx +
test edx edx +
jz loc_100CCF6  +
mov eax [ebp+var_8] +
sub eax [ebp+lpBuffer] +
mov [ebp+var_14] eax +
mov eax esi +
sub eax [ebp+lpBuffer] +
mov [ebp+var_C] eax +
cmp [ebp+var_18] 0 +
jz loc_100CC4C  +
mov eax [ebp+var_4] +
mov eax [eax+4] +
movzx ecx word ptr [eax+0Eh] +
push ecx  +
push dword ptr [eax+10h]  +
mov eax [ebp+var_18] +
push dword ptr [eax+10h]  +
call sub_1011CDD  +
add esp 0Ch +
test eax eax +
jz loc_100CCB6  +
mov ecx edi +
sub ecx [ebp+lpBuffer] +
mov eax 80000000h +
or ecx eax +
mov [ebx] ecx +
mov ecx [ebp+var_C] +
or ecx eax +
mov eax [ebp+var_4] +
mov [ebx+4] ecx +
mov ecx [eax+4] +
mov cx [ecx+0Eh] +
mov [edi] cx +
mov eax [eax+4] +
movzx ecx word ptr [eax+0Eh] +
push ecx  +
push dword ptr [eax+10h]  +
mov eax [ebp+var_44] +
sub eax edi +
sar eax 1 +
push eax  +
lea eax [edi+2] +
push eax  +
add ebx 8 +
call sub_101B182  +
mov ecx [ebp+var_4] +
mov eax [ecx+4] +
movzx edx word ptr [eax+0Eh] +
mov [ebp+var_18] eax +
movzx eax word ptr [ecx+1Eh] +
push eax  +
push 0  +
push [ebp+var_48]  +
lea edi [edi+edx*2+2] +
push esi  +
call sub_100B30A  +
add esi 10h +
add [ebp+var_C] 10h +
mov edx [ebp+var_4] +
movzx eax word ptr [edx+20h] +
mov ecx [ebp+var_1C] +
add [ebp+var_C] 8 +
mov [esi] eax +
mov eax [ebp+var_14] +
mov [esi+4] eax +
mov eax [edx+8] +
push dword ptr [edx+14h]  +
add eax [ecx+0Ch] +
add esi 8 +
push eax  +
push [ebp+var_8]  +
call sub_100B2E3  +
mov edx [edx] +
add [ebp+var_8] 10h +
add [ebp+var_14] 10h +
mov [ebp+var_4] edx +
test edx edx +
jnz loc_100CC26  +
mov eax [ebp+var_24] +
mov edx [eax+0Ch] +
and [ebp+var_18] 0 +
test edx edx +
jz loc_100CD97  +
mov eax [ebp+var_8] +
sub eax [ebp+lpBuffer] +
mov [ebp+var_14] eax +
mov eax esi +
sub eax [ebp+lpBuffer] +
mov [ebp+var_C] eax +
mov eax [ebp+var_18] +
test eax eax +
jz loc_100CD2D  +
mov ecx [edx+4] +
mov ax [eax+4] +
cmp ax [ecx+4] +
jz loc_100CD61  +
mov eax [edx+4] +
movzx eax word ptr [eax+4] +
mov [ebx] eax +
mov eax [ebp+var_C] +
or eax 80000000h +
mov [ebx+4] eax +
mov eax [edx+4] +
mov [ebp+var_18] eax +
movzx eax word ptr [edx+1Eh] +
push eax  +
push 0  +
push [ebp+var_48]  +
add ebx 8 +
push esi  +
call sub_100B30A  +
add esi 10h +
add [ebp+var_C] 10h +
movzx eax word ptr [edx+20h] +
mov ecx [ebp+var_1C] +
add [ebp+var_C] 8 +
mov [esi] eax +
mov eax [ebp+var_14] +
mov [esi+4] eax +
mov eax [edx+8] +
push dword ptr [edx+14h]  +
add eax [ecx+0Ch] +
add esi 8 +
push eax  +
push [ebp+var_8]  +
call sub_100B2E3  +
mov edx [edx] +
add [ebp+var_8] 10h +
add [ebp+var_14] 10h +
test edx edx +
jnz loc_100CD19  +
mov eax [ebp+var_24] +
mov eax [eax] +
mov [ebp+var_24] eax +
test eax eax +
jnz loc_100CBB8  +
mov ecx [ebp+var_44] +
cmp edi ecx +
jnb loc_100CDC9  +
xor eax eax +
sub ecx edi +
dec ecx  +
movzx edx ax +
shr ecx 1 +
inc ecx  +
mov eax edx +
shl edx 10h +
or eax edx +
shr ecx 1 +
stos   +
adc ecx ecx +
stos   +
mov esi [ebp+hFile] +
xor ebx ebx +
push ebx  +
push esi  +
call sub_100B29F  +
mov eax [ebp+lOffset] +
mov edi [ebp+arg_4] +
add eax 0F8h +
push eax  +
push edi  +
push esi  +
call sub_100B8D8  +
mov eax [ebp+var_110] +
sub eax [ebp+var_208] +
add eax [ebp+var_54] +
push eax  +
push edi  +
call sub_100B29F  +
push [ebp+var_54]  +
push esi  +
call sub_100B29F  +
mov eax [ebp+var_208] +
sub eax [ebp+var_54] +
push eax  +
push edi  +
push esi  +
call sub_100B8D8  +
mov eax [ebp+var_128] +
mov edx [ebp+var_110] +
lea ecx [eax-1] +
and edx ecx +
sub eax edx +
and eax ecx +
add [ebp+var_110] eax +
push edi  +
mov [ebp+var_94] ebx +
mov [ebp+var_90] ebx +
call sub_100B284  +
mov ecx [ebp+var_28] +
mov esi [ecx+14h] +
sub esi eax +
cmp esi 10h +
jl loc_100CE6F  +
mov ebx esi +
shr ebx 4 +
mov eax ebx +
imul eax eax +
add esi eax +
push 10h  +
push off_101F2DC  +
push edi  +
call sub_100B7AC  +
dec ebx  +
jnz loc_100CE5E  +
push esi  +
push off_101F2DC  +
push edi  +
call sub_100B7AC  +
mov eax [ebp+var_220] +
mov ecx [ebp+var_208] +
lea ecx [eax+ecx-1] +
dec eax  +
not eax  +
and ecx eax +
push ecx  +
push [ebp+hFile]  +
call sub_100B29F  +
mov ebx [ebp+var_28] +
mov eax [ebp+var_3C] +
and [ebp+var_144] 0 +
mov esi [ebp+var_38] +
cmp ebx eax +
jmp loc_100D0AD  +
cmp ebx [ebp+var_40] +
jnz loc_100CEBC  +
add ebx 28h +
mov [ebp+arg_4] ebx +
movzx eax [ebp+var_256] +
imul eax eax +
add eax [ebp+var_28] +
cmp ebx eax +
jnb loc_100C11E  +
cmp esi [ebp+var_1C] +
jnz loc_100CFC5  +
push edi  +
call sub_100B284  +
mov [esi+14h] eax +
mov eax [ebp+var_1C] +
mov eax [eax+0Ch] +
mov [ebp+var_DC] eax +
mov eax [ebp+var_20] +
push edi  +
mov [ebp+var_D8] eax +
call sub_100B284  +
push [ebp+uBytes]  +
mov [ebp+var_54] eax +
push [ebp+lpBuffer]  +
push edi  +
call sub_100B7AC  +
mov eax [ebp+var_1C] +
mov eax [eax+10h] +
sub eax [ebp+uBytes] +
push 0  +
push eax  +
push [ebp+var_128]  +
push edi  +
push [ebp+arg_C]  +
call sub_100B950  +
push edi  +
mov [ebp+var_5C] eax +
call sub_100B284  +
cmp [ebp+var_50] 0 +
mov [ebp+var_8] eax +
jz loc_100CF70  +
mov eax [ebp+var_54] +
sub eax [ebp+var_8] +
add [ebp+var_50] eax +
jz loc_100CF67  +
mov eax [ebp+var_50] +
dec eax  +
shr eax 4 +
inc eax  +
mov [ebp+arg_4] eax +
push 10h  +
push off_101F2D8  +
push edi  +
call sub_100B7AC  +
sub [ebp+var_50] 10h +
dec [ebp+arg_4]  +
jnz loc_100CF50  +
push edi  +
call sub_100B284  +
mov [ebp+var_8] eax +
cmp [ebp+var_34] 0FFFFFFFFh +
jnz loc_100CFAA  +
push [ebp+var_54]  +
push edi  +
call sub_100B29F  +
push [ebp+uBytes]  +
push [ebp+lpBuffer]  +
push edi  +
call sub_100B7AC  +
push [ebp+var_8]  +
push edi  +
call sub_100B29F  +
push [ebp+hFile]  +
call sub_100B284  +
mov ecx [ebx+10h] +
add ecx eax +
push ecx  +
push [ebp+hFile]  +
call sub_100B29F  +
mov eax [esi+10h] +
add [ebp+var_144] eax +
cmp [ebp+var_58] 0 +
jnz loc_100D0A4  +
add esi 28h +
jmp loc_100D067  +
cmp [ebp+var_34] 0FFFFFFFFh +
jz loc_100D042  +
mov eax [ebp+var_34] +
imul eax eax +
add eax [ebp+var_38] +
cmp esi eax +
jnz loc_100D042  +
push edi  +
call sub_100B284  +
push [ebp+var_5C]  +
mov [esi+14h] eax +
push 0FFFFFFFFh  +
push [ebp+var_128]  +
push edi  +
push [ebp+arg_C]  +
call sub_100B950  +
push edi  +
call sub_100B284  +
push [ebp+var_54]  +
mov ebx eax +
sub eax [esi+14h] +
push edi  +
mov [esi+10h] eax +
mov ecx [ebp+var_12C] +
lea eax [eax+ecx-1] +
dec ecx  +
not ecx  +
and eax ecx +
mov [esi+8] eax +
call sub_100B29F  +
push [ebp+uBytes]  +
push [ebp+lpBuffer]  +
push edi  +
call sub_100B7AC  +
push ebx  +
push edi  +
call sub_100B29F  +
mov eax [esi+10h] +
add [ebp+var_144] eax +
mov ebx [ebp+arg_4] +
add esi 28h +
jmp loc_100D067  +
cmp esi [ebp+var_1C] +
jnb loc_100D067  +
cmp dword ptr [ebx+14h] 0 +
jz loc_100D08D  +
mov eax [ebx+14h] +
push edi  +
mov [ebp+arg_4] eax +
call sub_100B284  +
cmp [ebp+arg_4] eax +
jz loc_100D067  +
push [ebp+arg_4]  +
push edi  +
call sub_100B29F  +
cmp dword ptr [ebx+14h] 0 +
jz loc_100D08D  +
push edi  +
call sub_100B284  +
mov [esi+14h] eax +
push dword ptr [ebx+14h]  +
push [ebp+hFile]  +
call sub_100B29F  +
push dword ptr [ebx+10h]  +
push edi  +
push [ebp+hFile]  +
call sub_100B8D8  +
cmp ebx [ebp+var_60] +
jnz loc_100D095  +
mov [ebp+var_14] esi +
test byte ptr [esi+24h] 40h +
jz loc_100D0A4  +
mov eax [esi+10h] +
add [ebp+var_144] eax +
add ebx 28h +
add esi 28h +
cmp ebx [ebp+var_3C] +
mov [ebp+arg_4] ebx +
jb loc_100CEB1  +
mov eax [ebp+var_40] +
xor ebx ebx +
cmp eax ebx +
jz loc_100D0C8  +
mov eax [eax+10h] +
sub [ebp+var_144] eax +
movzx eax [ebp+var_15E] +
push offset a_reloc  +
push eax  +
push [ebp+var_38]  +
call sub_100B341  +
cmp eax ebx +
jz loc_100D0EA  +
mov eax [eax+0Ch] +
mov [ebp+var_C4] eax +
push [ebp+var_6C]  +
push edi  +
call sub_100B29F  +
movzx eax [ebp+var_15E] +
imul eax eax +
push eax  +
push [ebp+var_38]  +
push edi  +
call sub_100B7AC  +
mov esi ds:_llseek +
push 2  +
push ebx  +
push edi  +
call esi  +
push ebx  +
push ebx  +
push edi  +
mov [ebp+var_4] eax +
call sub_100B7AC  +
movzx eax [ebp+var_15E] +
push offset a_debug  +
push eax  +
push [ebp+var_38]  +
call sub_100B341  +
lea ecx [ebp+var_4] +
push ecx  +
push [ebp+var_68]  +
lea ecx [ebp+var_164] +
push ecx  +
lea ecx [ebp+Buffer] +
push ecx  +
push [ebp+var_14]  +
push [ebp+var_60]  +
push eax  +
push [ebp+var_64]  +
push edi  +
push [ebp+hFile]  +
call sub_100BAD0  +
mov [ebp+var_8] eax +
cmp eax ebx +
jnz loc_100D197  +
mov eax [ebp+var_58] +
cmp eax ebx +
jnz loc_100D171  +
mov eax [ebp+var_1C] +
mov eax [eax+10h] +
jmp loc_100D17A  +
mov eax [eax+10h] +
mov ecx [ebp+var_1C] +
sub eax [ecx+10h] +
push [ebp+var_208]  +
lea ecx [ebp+var_164] +
push ecx  +
push eax  +
push [ebp+var_38]  +
push edi  +
push [ebp+hFile]  +
call sub_100BC22  +
mov [ebp+var_8] eax +
cmp [ebp+var_60] ebx +
jz loc_100D1E4  +
cmp [ebp+var_64] ebx +
jnz loc_100D1E4  +
cmp [ebp+var_B8] ebx +
jz loc_100D1E4  +
cmp [ebp+var_158] ebx +
jz loc_100D1BA  +
mov eax [ebp+var_4] +
mov [ebp+var_158] eax +
push 2  +
push 0  +
push [ebp+hFile]  +
call esi  +
push 2  +
push 0  +
push edi  +
mov ebx eax +
call esi  +
push [ebp+var_4]  +
push [ebp+hFile]  +
call sub_100B29F  +
sub ebx [ebp+var_4] +
push ebx  +
push edi  +
push [ebp+hFile]  +
call sub_100B8D8  +
push [ebp+lOffset]  +
push edi  +
call sub_100B29F  +
push 0F8h  +
lea eax [ebp+var_164] +
push eax  +
push edi  +
call sub_100B7AC  +
push [ebp+var_28]  +
call sub_1011942  +
push [ebp+lpBuffer]  +
call sub_1011942  +
pop ecx  +
pop ecx  +
cmp [ebp+var_38] 0 +
jz loc_100D220  +
push [ebp+var_38]  +
call sub_1011942  +
pop ecx  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 58h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+hMem] +
mov ecx [ebp+arg_4] +
push ebx  +
push esi  +
mov esi ds:GlobalLock +
push edi  +
push eax  +
mov [ebp+var_58] eax +
mov [ebp+CheckSum] ecx +
call esi  +
mov edi eax +
push dword ptr [edi+18h]  +
call esi  +
mov esi ds:CreateFileA +
xor ecx ecx +
push ecx  +
mov ebx 80h +
push ebx  +
push 3  +
push ecx  +
push ecx  +
push 80000000h  +
push eax  +
call esi  +
push dword ptr [edi+18h]  +
mov [ebp+hFile] eax +
call ds:GlobalUnlock  +
cmp [ebp+hFile] 0FFFFFFFFh +
jnz loc_100D2AC  +
push 6Eh  +
pop esi  +
push [ebp+var_58]  +
call ds:GlobalUnlock  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010BBF  +
leave   +
retn 8  +
push 40h  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+hFile]  +
call ds:_lread  +
mov [ebp+var_4C] eax +
cmp eax 40h +
jz loc_100D2D0  +
push [ebp+hFile]  +
call ds:_lclose  +
push 1Eh  +
jmp loc_100D28F  +
mov eax 5A4Dh +
cmp word ptr [ebp+Buffer] ax +
jz loc_100D2EB  +
push [ebp+hFile]  +
call ds:_lclose  +
mov esi 0BFh +
jmp loc_100D290  +
mov ecx [ebp+var_8] +
xor eax eax +
mov [ebp+lOffset] ecx +
cmp ecx eax +
jnz loc_100D307  +
push [ebp+hFile]  +
call ds:_lclose  +
mov esi 0C1h +
jmp loc_100D290  +
push eax  +
push ebx  +
push 2  +
push eax  +
push eax  +
push 0C0000000h  +
push [ebp+CheckSum]  +
call esi  +
mov esi ds:_lclose +
mov ebx eax +
cmp ebx 0FFFFFFFFh +
jz loc_100D337  +
push edi  +
push [ebp+lOffset]  +
push ebx  +
push [ebp+hFile]  +
call sub_100C051  +
push ebx  +
mov [ebp+var_4C] eax +
call esi  +
push [ebp+hFile]  +
call esi  +
push [ebp+CheckSum]  +
call sub_100B3D8  +
mov esi [ebp+var_4C] +
jmp loc_100D290  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 110h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor ebx ebx +
push ebx  +
mov [ebp+hMem] esi +
call ds:SetLastError  +
mov edi ds:GlobalLock +
push esi  +
call edi  +
mov esi eax +
cmp [ebp+arg_4] ebx +
jz loc_100D392  +
xor edi edi +
jmp loc_100D4BD  +
push dword ptr [esi+18h]  +
call edi  +
mov [ebp+lpNewFileName] eax +
cmp eax ebx +
jnz loc_100D3C3  +
call ds:GetLastError  +
push dword ptr [esi+18h]  +
mov edi eax +
call ds:GlobalUnlock  +
push dword ptr [esi+18h]  +
call ds:GlobalFree  +
mov [esi+18h] ebx +
jmp loc_100D4BD  +
push eax  +
push 104h  +
lea eax [ebp+FileName] +
push eax  +
call sub_1006DCD  +
lea eax [ebp+FileName] +
push eax  +
call ds:lstrlenA  +
lea eax [ebp+eax+FileName] +
jmp loc_100D3F6  +
lea ecx [ebp+FileName] +
cmp eax ecx +
jb loc_100D3FB  +
dec eax  +
cmp byte ptr [eax] 5Ch +
jnz loc_100D3EB  +
mov edi ds:GetTempFileNameA +
mov [eax+1] bl +
lea eax [ebp+FileName] +
push eax  +
push ebx  +
mov ebx offset PrefixString +
push ebx  +
push eax  +
call edi  +
test eax eax +
lea eax [ebp+FileName] +
push eax  +
jnz loc_100D465  +
push 104h  +
call ds:GetTempPathA  +
test eax eax +
jnz loc_100D443  +
mov byte ptr [ebp+FileName] 2Eh +
mov byte ptr [ebp+FileName+1] 5Ch +
mov byte ptr [ebp+FileName+2] al +
lea eax [ebp+FileName] +
push eax  +
push 0  +
push ebx  +
push eax  +
call edi  +
test eax eax +
jnz loc_100D45E  +
call ds:GetLastError  +
mov edi eax +
jmp loc_100D4AB  +
lea eax [ebp+FileName] +
push eax  +
push [ebp+hMem]  +
call sub_100D22F  +
mov edi eax +
test edi edi +
jnz loc_100D497  +
push [ebp+lpNewFileName]  +
call ds:DeleteFileA  +
push [ebp+lpNewFileName]  +
lea eax [ebp+FileName] +
push eax  +
call ds:MoveFileA  +
jmp loc_100D4AB  +
push edi  +
call ds:SetLastError  +
lea eax [ebp+FileName] +
push eax  +
call ds:DeleteFileA  +
push dword ptr [esi+18h]  +
call ds:GlobalUnlock  +
push dword ptr [esi+18h]  +
call ds:GlobalFree  +
push esi  +
call sub_100AEF5  +
push [ebp+hMem]  +
call ds:GlobalUnlock  +
push [ebp+hMem]  +
call ds:GlobalFree  +
mov ecx [ebp+var_4] +
xor eax eax +
test edi edi +
pop edi  +
setz al  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010BBF  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push offset sub_100BEF8  +
push [ebp+lpName]  +
push [ebp+lpType]  +
push [ebp+hModule]  +
call ds:EnumResourceLanguagesA  +
xor eax eax +
inc eax  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push offset sub_100D4F8  +
push [ebp+lpType]  +
push [ebp+hModule]  +
call ds:EnumResourceNamesA  +
xor eax eax +
inc eax  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
mov edi ds:SetLastError +
push 0  +
call edi  +
cmp [ebp+lpLibFileName] 0 +
jnz loc_100D567  +
push 57h  +
call edi  +
xor eax eax +
jmp loc_100D6C0  +
push ebx  +
mov ebx ds:GlobalAlloc +
push 1Ch  +
push 42h  +
call ebx  +
mov [ebp+hMem] eax +
test eax eax +
jnz loc_100D586  +
push 8  +
call edi  +
xor eax eax +
jmp loc_100D6BF  +
push esi  +
push eax  +
call ds:GlobalLock  +
mov esi eax +
test esi esi +
jnz loc_100D59D  +
push 8  +
call edi  +
jmp loc_100D6B5  +
and dword ptr [esi+14h] 0 +
mov edi 104h +
push edi  +
push 42h  +
call ebx  +
mov [esi+18h] eax +
test eax eax +
jz loc_100D5BF  +
push eax  +
call ds:GlobalLock  +
mov ebx eax +
test ebx ebx +
jnz loc_100D5D8  +
push [ebp+hMem]  +
call ds:GlobalUnlock  +
push [ebp+hMem]  +
call ds:GlobalFree  +
push 8  +
jmp loc_100D688  +
push [ebp+lpLibFileName]  +
push edi  +
push ebx  +
call sub_1006DCD  +
push dword ptr [esi+18h]  +
mov edi ds:GlobalUnlock +
call edi  +
push ebx  +
call ds:GetFileAttributesA  +
cmp eax 0FFFFFFFFh +
jnz loc_100D601  +
push [ebp+hMem]  +
jmp loc_100D6AA  +
test al 17h +
jz loc_100D617  +
push [ebp+hMem]  +
call edi  +
push [ebp+hMem]  +
call ds:GlobalFree  +
push 13h  +
jmp loc_100D688  +
cmp [ebp+hLibModule] 0 +
jnz loc_100D6A1  +
push 3  +
push 0  +
push [ebp+lpLibFileName]  +
call ds:LoadLibraryExA  +
mov [ebp+hLibModule] eax +
test eax eax +
jz loc_100D66B  +
mov ebx ds:EnumResourceTypesA +
push esi  +
push offset EnumFunc  +
push eax  +
call ebx  +
push [ebp+hLibModule]  +
call ds:FreeLibrary  +
push 25h  +
call ds:off_1006198  +
test eax eax +
jnz loc_100D6A1  +
push eax  +
push 8  +
push [ebp+lpLibFileName]  +
call sub_101B052  +
mov [ebp+hLibModule] eax +
test eax eax +
jnz loc_100D690  +
push [ebp+hMem]  +
call edi  +
push [ebp+hMem]  +
call ds:GlobalFree  +
call ds:GetLastError  +
test eax eax +
jnz loc_100D6B5  +
push 0C1h  +
call ds:SetLastError  +
jmp loc_100D6B5  +
push esi  +
push offset EnumFunc  +
push eax  +
call ebx  +
push [ebp+hLibModule]  +
call sub_101A725  +
cmp dword ptr [esi+14h] 0 +
push [ebp+hMem]  +
jz loc_100D6B9  +
call edi  +
push [ebp+hMem]  +
call ds:GlobalFree  +
xor eax eax +
jmp loc_100D6BE  +
call edi  +
mov eax [ebp+hMem] +
pop esi  +
pop ebx  +
pop edi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] eax +
jb loc_100D6E6  +
mov ecx [ebp+arg_4] +
sub ecx eax +
cmp [ebp+arg_0] ecx +
jb loc_100D6E6  +
sub eax [ebp+arg_4] +
add eax [ebp+arg_0] +
jmp loc_100D6E8  +
xor eax eax +
pop ebp  +
retn 8  +
***
push ebp  +
mov ebp esp +
sub esp 108h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+8] +
xor ebx ebx +
push 103h  +
lea eax [ebp-107h] +
push ebx  +
push eax  +
mov [ebp-108h] bl +
call sub_1010B40  +
mov eax [ebp+0Ch] +
mov esi 836h +
add esp 0Ch +
sub eax esi +
jz loc_100D762  +
dec eax  +
jz loc_100D753  +
dec eax  +
jnz loc_100D798  +
push 1  +
push 839h  +
push edi  +
call sub_1006826  +
push 1  +
push esi  +
push edi  +
call sub_1006826  +
jmp loc_100D798  +
push ebx  +
push 839h  +
push edi  +
call sub_1006826  +
push ebx  +
jmp loc_100D74A  +
***
push offset aSed  +
push ebx  +
push ebx  +
push ebx  +
push 104h  +
lea eax [ebp-108h] +
push eax  +
push 423h  +
push edi  +
call sub_1007D7E  +
test eax eax +
jz loc_100D798  +
lea eax [ebp-108h] +
push eax  +
push 839h  +
push edi  +
call ds:SetDlgItemTextA  +
mov ecx [ebp-4] +
pop edi  +
xor eax eax +
pop esi  +
xor ecx ebp +
inc eax  +
pop ebx  +
call sub_1010BBF  +
leave   +
retn 14h  +
***
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+0Ch] 0 +
push ebx  +
jz loc_100D84D  +
push 838h  +
push dword ptr [ebp+8]  +
call ds:IsDlgButtonChecked  +
test eax eax +
jz loc_100D83D  +
push esi  +
push edi  +
mov edi 104h +
push edi  +
mov esi offset byte_1020B74 +
push esi  +
mov ebx 839h +
push ebx  +
push dword ptr [ebp+8]  +
call ds:GetDlgItemTextA  +
push esi  +
call ds:lstrlenA  +
test eax eax +
jz loc_100D808  +
lea eax [ebp+0Ch] +
push eax  +
push esi  +
push edi  +
push esi  +
call ds:GetFullPathNameA  +
push esi  +
call sub_10066E5  +
pop edi  +
pop esi  +
test eax eax +
jnz loc_100D826  +
push 44Dh  +
push ebx  +
push dword ptr [ebp+8]  +
call sub_10071A0  +
xor eax eax +
jmp loc_100D850  +
push dword ptr [ebp+8]  +
call sub_1008C09  +
test eax eax +
jz loc_100D822  +
mov eax [ebp+10h] +
mov dword ptr [eax] 1 +
jmp loc_100D84D  +
mov eax [ebp+10h] +
mov byte_1020B74 0 +
mov dword ptr [eax] 2 +
xor eax eax +
inc eax  +
pop ebx  +
pop ebp  +
retn 10h  +
***
push ebp  +
mov ebp esp +
push esi  +
mov esi ds:CheckDlgButton +
push 1  +
push 858h  +
push dword ptr [ebp+8]  +
call esi  +
push 0  +
push 857h  +
push dword ptr [ebp+8]  +
call esi  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 8  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+14h] +
and dword ptr [eax] 0 +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_100D8B7  +
push 858h  +
push dword ptr [ebp+8]  +
call ds:IsDlgButtonChecked  +
test eax eax +
jz loc_100D8B7  +
mov eax [ebp+10h] +
mov dword ptr [eax] 0Fh +
xor eax eax +
inc eax  +
pop ebp  +
retn 10h  +
***
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push 80h  +
mov edi offset Caption +
push edi  +
mov esi 83Ah +
push esi  +
push dword ptr [ebp+8]  +
call ds:GetDlgItemTextA  +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_100D907  +
push edi  +
call ds:lstrlenA  +
test eax eax +
jnz loc_100D907  +
push 44Eh  +
push esi  +
push dword ptr [ebp+8]  +
call sub_10071A0  +
xor eax eax +
jmp loc_100D90A  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
sub eax 83Bh +
jz loc_100D92B  +
dec eax  +
jnz loc_100D93A  +
push 1  +
jmp loc_100D92D  +
push 0  +
push 83Dh  +
push dword ptr [ebp+8]  +
call sub_1006826  +
xor eax eax +
inc eax  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push 200h  +
push offset byte_1020CF8  +
mov ebx 83Dh +
push ebx  +
push [ebp+hDlg]  +
call ds:GetDlgItemTextA  +
mov esi ds:IsDlgButtonChecked +
lea edi [ebx-1] +
push edi  +
push [ebp+hDlg]  +
call esi  +
neg eax  +
sbb eax eax +
neg eax  +
cmp [ebp+arg_4] 0 +
mov dword_1020B64 eax +
jz loc_100D9B2  +
push edi  +
push [ebp+hDlg]  +
call esi  +
test eax eax +
jz loc_100D9B2  +
push offset byte_1020CF8  +
call ds:lstrlenA  +
test eax eax +
jnz loc_100D9B2  +
push 44Fh  +
push ebx  +
push [ebp+hDlg]  +
call sub_10071A0  +
xor eax eax +
jmp loc_100D9B5  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
push ebp  +
mov ebp esp +
sub esp 108h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+8] +
xor ebx ebx +
push 103h  +
lea eax [ebp-107h] +
push ebx  +
push eax  +
mov [ebp-108h] bl +
call sub_1010B40  +
mov eax [ebp+0Ch] +
mov esi 836h +
add esp 0Ch +
sub eax esi +
jz loc_100DA34  +
sub eax 8 +
jz loc_100DA25  +
dec eax  +
jnz loc_100DA6A  +
push 1  +
push 840h  +
push edi  +
call sub_1006826  +
push 1  +
push esi  +
push edi  +
call sub_1006826  +
jmp loc_100DA6A  +
push ebx  +
push 840h  +
push edi  +
call sub_1006826  +
push ebx  +
jmp loc_100DA1C  +
***
push offset aTxt  +
push ebx  +
push ebx  +
push ebx  +
push 104h  +
lea eax [ebp-108h] +
push eax  +
push 424h  +
push edi  +
call sub_1007D7E  +
test eax eax +
jz loc_100DA6A  +
lea eax [ebp-108h] +
push eax  +
push 840h  +
push edi  +
call ds:SetDlgItemTextA  +
mov ecx [ebp-4] +
pop edi  +
xor eax eax +
pop esi  +
xor ecx ebp +
inc eax  +
pop ebx  +
call sub_1010BBF  +
leave   +
retn 14h  +
***
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi 104h +
push edi  +
mov esi offset byte_1020EF8 +
push esi  +
mov ebx 840h +
push ebx  +
push dword ptr [ebp+8]  +
call ds:GetDlgItemTextA  +
push esi  +
call ds:lstrlenA  +
test eax eax +
jz loc_100DABF  +
lea eax [ebp-4] +
push eax  +
push esi  +
push edi  +
push esi  +
call ds:GetFullPathNameA  +
mov edi ds:IsDlgButtonChecked +
push 83Fh  +
push dword ptr [ebp+8]  +
call edi  +
neg eax  +
sbb eax eax +
neg eax  +
cmp dword ptr [ebp+0Ch] 0 +
mov dword_1020B68 eax +
jz loc_100DB1C  +
push 83Fh  +
push dword ptr [ebp+8]  +
call edi  +
test eax eax +
jz loc_100DB1C  +
push esi  +
call ds:lstrlenA  +
test eax eax +
jnz loc_100DB0B  +
push 450h  +
push ebx  +
push dword ptr [ebp+8]  +
call sub_10071A0  +
xor eax eax +
jmp loc_100DB1F  +
push esi  +
call sub_10066E5  +
test eax eax +
jnz loc_100DB1C  +
push 451h  +
jmp loc_100DAFE  +
***
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
cmp [ebp+0Ch] esi +
jz loc_100DB95  +
push esi  +
push esi  +
push 1004h  +
push 841h  +
push dword ptr [ebp+8]  +
call ds:GetDlgItem  +
push eax  +
call ds:SendMessageA  +
test eax eax +
jnz loc_100DB6E  +
push esi  +
push 10h  +
push esi  +
push esi  +
push 453h  +
push dword ptr [ebp+8]  +
call sub_1007006  +
xor eax eax +
jmp loc_100DB98  +
mov eax dword_1022584 +
cmp eax 865h +
jnz loc_100DB85  +
mov eax [ebp+10h] +
mov dword ptr [eax] 8 +
jmp loc_100DB95  +
cmp eax 866h +
jnz loc_100DB95  +
mov eax [ebp+10h] +
mov dword ptr [eax] 0Bh +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 10h  +
***
push ebp  +
mov ebp esp +
sub esp 208h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp-4] eax +
mov ecx [ebp+0Ch] +
mov eax 864h +
sub ecx eax +
push esi  +
mov esi [ebp+8] +
jz loc_100DBFB  +
dec ecx  +
jz loc_100DBE4  +
dec ecx  +
jnz loc_100DC0C  +
push 866h  +
push esi  +
call ds:IsDlgButtonChecked  +
test eax eax +
jz loc_100DC0C  +
mov eax 434h +
jmp loc_100DC12  +
push 865h  +
push esi  +
call ds:IsDlgButtonChecked  +
test eax eax +
jz loc_100DC0C  +
mov eax 433h +
jmp loc_100DC12  +
push eax  +
push esi  +
call ds:IsDlgButtonChecked  +
test eax eax +
mov eax 432h +
jnz loc_100DC12  +
mov eax [ebp-208h] +
push 200h  +
lea ecx [ebp-204h] +
push ecx  +
push eax  +
call sub_100684A  +
lea eax [ebp-204h] +
push eax  +
push 0  +
push 0Ch  +
push 85Fh  +
push esi  +
call ds:GetDlgItem  +
push eax  +
call ds:SendMessageA  +
mov ecx [ebp-4] +
xor eax eax +
xor ecx ebp +
inc eax  +
pop esi  +
call sub_1010BBF  +
leave   +
retn 14h  +
***
push ebp  +
mov ebp esp +
push esi  +
mov esi ds:IsDlgButtonChecked +
push edi  +
mov edi 864h +
push edi  +
push dword ptr [ebp+8]  +
call esi  +
test eax eax +
jz loc_100DC7D  +
mov dword_1022584 edi +
jmp loc_100DCB9  +
mov edi 865h +
push edi  +
push dword ptr [ebp+8]  +
call esi  +
test eax eax +
jz loc_100DC9B  +
or dword_102258C 2 +
mov dword_1022584 edi +
jmp loc_100DCB9  +
push 80h  +
push offset Caption  +
push 3E8h  +
mov dword_1022584 866h +
call sub_100684A  +
xor eax eax +
pop edi  +
pop esi  +
cmp [ebp+0Ch] eax +
jz loc_100DCE8  +
cmp dword_1022584 866h +
jnz loc_100DCE1  +
mov eax [ebp+10h] +
or dword_102258C 80000h +
mov dword ptr [eax] 6 +
xor eax eax +
inc eax  +
pop ebp  +
retn 10h  +
***
push 4  +
push 20h  +
push eax  +
push eax  +
push 41Ah  +
push dword ptr [ebp+8]  +
call sub_1007006  +
cmp eax 7 +
jnz loc_100DCE1  +
xor eax eax +
jmp loc_100DCE4  +
***
push ebp  +
mov ebp esp +
mov eax dword_1022588 +
push ebx  +
mov ebx [ebp+8] +
push esi  +
mov esi ds:CheckDlgButton +
push edi  +
xor edi edi +
cmp eax edi +
jnz loc_100DD44  +
push 1  +
push 848h  +
push ebx  +
call esi  +
push edi  +
push 849h  +
push ebx  +
call esi  +
push edi  +
push 84Ah  +
push ebx  +
call esi  +
push edi  +
jmp loc_100DD80  +
push edi  +
push 848h  +
push ebx  +
cmp eax 1 +
jnz loc_100DD56  +
call esi  +
push 1  +
jmp loc_100DD30  +
***
cmp eax 2 +
jnz loc_100DD6A  +
call esi  +
push edi  +
push 849h  +
push ebx  +
call esi  +
push 1  +
jmp loc_100DD39  +
***
call esi  +
push edi  +
push 849h  +
push ebx  +
call esi  +
push edi  +
push 84Ah  +
push ebx  +
call esi  +
push 1  +
push 84Bh  +
push ebx  +
call esi  +
pop edi  +
xor eax eax +
pop esi  +
inc eax  +
pop ebx  +
pop ebp  +
retn 8  +
***
push ebp  +
mov ebp esp +
push esi  +
mov esi ds:IsDlgButtonChecked +
push 848h  +
push dword ptr [ebp+8]  +
call esi  +
test eax eax +
jz loc_100DDBA  +
and dword_1022588 0 +
jmp loc_100DDEA  +
push 849h  +
push dword ptr [ebp+8]  +
call esi  +
test eax eax +
jz loc_100DDD4  +
mov dword_1022588 1 +
jmp loc_100DDEA  +
push 84Ah  +
push dword ptr [ebp+8]  +
call esi  +
neg eax  +
sbb eax eax +
add eax 3 +
mov dword_1022588 eax +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 10h  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
sub eax 84Ch +
jz loc_100DE0D  +
dec eax  +
jnz loc_100DE1C  +
push 1  +
jmp loc_100DE0F  +
push 0  +
push 84Eh  +
push dword ptr [ebp+8]  +
call sub_1006826  +
xor eax eax +
inc eax  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push 200h  +
push offset byte_1021100  +
mov ebx 84Eh +
push ebx  +
push [ebp+hDlg]  +
call ds:GetDlgItemTextA  +
mov esi ds:IsDlgButtonChecked +
lea edi [ebx-1] +
push edi  +
push [ebp+hDlg]  +
call esi  +
neg eax  +
sbb eax eax +
neg eax  +
cmp [ebp+arg_4] 0 +
mov dword_1020B6C eax +
jz loc_100DE94  +
push edi  +
push [ebp+hDlg]  +
call esi  +
test eax eax +
jz loc_100DE94  +
push offset byte_1021100  +
call ds:lstrlenA  +
test eax eax +
jnz loc_100DE94  +
push 456h  +
push ebx  +
push [ebp+hDlg]  +
call sub_10071A0  +
xor eax eax +
jmp loc_100DE97  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
push ebp  +
mov ebp esp +
sub esp 108h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
xor ebx ebx +
push 103h  +
lea eax [ebp-107h] +
push ebx  +
push eax  +
mov [ebp-108h] bl +
call sub_1010B40  +
mov eax [ebp+0Ch] +
add esp 0Ch +
sub eax 836h +
jz loc_100DF28  +
sub eax 2Dh +
jnz loc_100DF5E  +
mov edi 863h +
push edi  +
push esi  +
call ds:IsDlgButtonChecked  +
test eax eax +
jz loc_100DF5E  +
cmp dword_1022584 865h +
jz loc_100DF5E  +
push 4  +
push 20h  +
push ebx  +
push ebx  +
push 477h  +
push esi  +
call sub_1007006  +
cmp eax 7 +
jnz loc_100DF5E  +
push ebx  +
push edi  +
push esi  +
call ds:CheckDlgButton  +
jmp loc_100DF5E  +
push offset aExe  +
push ebx  +
push ebx  +
push ebx  +
push 104h  +
lea eax [ebp-108h] +
push eax  +
push 426h  +
push esi  +
call sub_1007E63  +
test eax eax +
jz loc_100DF5E  +
lea eax [ebp-108h] +
push eax  +
push 84Fh  +
push esi  +
call ds:SetDlgItemTextA  +
mov ecx [ebp-4] +
pop edi  +
xor eax eax +
pop esi  +
xor ecx ebp +
inc eax  +
pop ebx  +
call sub_1010BBF  +
leave   +
retn 14h  +
***
push ebp  +
mov ebp esp +
sub esp 108h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
mov esi [ebp+8] +
xor ebx ebx +
push 103h  +
lea eax [ebp-107h] +
push ebx  +
push eax  +
mov [ebp-108h] bl +
call sub_1010B40  +
add esp 0Ch +
cmp dword ptr [ebp+0Ch] 836h +
jnz loc_100DFED  +
push offset aCab  +
push ebx  +
push ebx  +
push ebx  +
push 104h  +
lea eax [ebp-108h] +
push eax  +
push 435h  +
push esi  +
call sub_1007E63  +
test eax eax +
jz loc_100DFED  +
lea eax [ebp-108h] +
push eax  +
push 84Fh  +
push esi  +
call ds:SetDlgItemTextA  +
mov ecx [ebp-4] +
xor eax eax +
pop esi  +
xor ecx ebp +
inc eax  +
pop ebx  +
call sub_1010BBF  +
leave   +
retn 14h  +
***
push ebp  +
mov ebp esp +
sub esp 108h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
mov esi [ebp+8] +
xor ebx ebx +
push 103h  +
lea eax [ebp-107h] +
push ebx  +
push eax  +
mov [ebp-108h] bl +
call sub_1010B40  +
add esp 0Ch +
cmp dword ptr [ebp+0Ch] 836h +
jnz loc_100E07B  +
push offset aInf  +
push ebx  +
push ebx  +
push ebx  +
push 104h  +
lea eax [ebp-108h] +
push eax  +
push 436h  +
push esi  +
call sub_1007E63  +
test eax eax +
jz loc_100E07B  +
lea eax [ebp-108h] +
push eax  +
push 869h  +
push esi  +
call ds:SetDlgItemTextA  +
mov ecx [ebp-4] +
xor eax eax +
pop esi  +
xor ecx ebp +
inc eax  +
pop ebx  +
call sub_1010BBF  +
leave   +
retn 14h  +
***
push ebp  +
mov ebp esp +
test byte ptr dword_1022594 1 +
push ebx  +
mov ebx [ebp+8] +
push esi  +
mov esi ds:CheckDlgButton +
push edi  +
jnz loc_100E0C5  +
push 1  +
push 85Bh  +
push ebx  +
call esi  +
xor edi edi +
push edi  +
push 85Ch  +
push ebx  +
call esi  +
push edi  +
jmp loc_100E0EF  +
push 0  +
push 85Bh  +
push ebx  +
call esi  +
mov eax dword_1022594 +
and eax 2 +
push eax  +
push 85Ch  +
push ebx  +
call esi  +
mov eax dword_1022594 +
shr eax 1 +
xor edi edi +
not eax  +
inc edi  +
and eax edi +
push eax  +
push 85Dh  +
push ebx  +
call esi  +
mov eax dword_1022594 +
and eax 4 +
push eax  +
mov [ebp+8] edi +
mov edi 85Eh +
push edi  +
push ebx  +
call esi  +
push dword ptr [ebp+8]  +
push edi  +
push ebx  +
call ds:GetDlgItem  +
push eax  +
call ds:EnableWindow  +
pop edi  +
xor eax eax +
pop esi  +
inc eax  +
pop ebx  +
pop ebp  +
retn 8  +
***
push ebp  +
mov ebp esp +
push 85Bh  +
push dword ptr [ebp+8]  +
call ds:IsDlgButtonChecked  +
xor ecx ecx +
test eax eax +
setz cl  +
push ecx  +
push 85Eh  +
push dword ptr [ebp+8]  +
call ds:GetDlgItem  +
push eax  +
call ds:EnableWindow  +
xor eax eax +
inc eax  +
pop ebp  +
retn 14h  +
***
push ebp  +
mov ebp esp +
and dword_1022594 0 +
push esi  +
mov esi ds:IsDlgButtonChecked +
push 85Bh  +
push dword ptr [ebp+8]  +
call esi  +
test eax eax +
jnz loc_100E1A6  +
or dword_1022594 1 +
push 85Ch  +
push dword ptr [ebp+8]  +
call esi  +
test eax eax +
jz loc_100E1A6  +
or dword_1022594 2 +
push 85Eh  +
push dword ptr [ebp+8]  +
call esi  +
pop esi  +
test eax eax +
jz loc_100E1BC  +
or dword_1022594 4 +
xor eax eax +
inc eax  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 108h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor ebx ebx +
push 103h  +
lea eax [ebp+String+1] +
push ebx  +
push eax  +
mov byte ptr [ebp+String] bl +
call sub_1010B40  +
mov eax [ebp+arg_4] +
mov esi 836h +
add esp 0Ch +
sub eax esi +
jz loc_100E23B  +
sub eax 1Ah +
jz loc_100E223  +
dec eax  +
jnz loc_100E271  +
push ebx  +
push 852h  +
push edi  +
call sub_1006826  +
push ebx  +
jmp loc_100E232  +
push 1  +
push 852h  +
push edi  +
call sub_1006826  +
push 1  +
push esi  +
push edi  +
call sub_1006826  +
jmp loc_100E271  +
push offset aSed  +
push ebx  +
push ebx  +
push ebx  +
push 104h  +
lea eax [ebp+String] +
push eax  +
push 423h  +
push edi  +
call sub_1007E63  +
test eax eax +
jz loc_100E271  +
lea eax [ebp+String] +
push eax  +
push 852h  +
push edi  +
call ds:SetDlgItemTextA  +
mov ecx [ebp+var_4] +
pop edi  +
xor eax eax +
pop esi  +
xor ecx ebp +
inc eax  +
pop ebx  +
call sub_1010BBF  +
leave   +
retn 14h  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+14h] +
push ebx  +
push esi  +
xor esi esi +
push edi  +
mov [eax] esi +
cmp [ebp+0Ch] esi +
jz loc_100E2AB  +
cmp dword_10225A8 esi +
jz loc_100E2B5  +
call sub_1007F34  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov ebx [ebp+8] +
mov edi ds:GetParent +
push esi  +
push esi  +
push 470h  +
push ebx  +
call edi  +
push eax  +
call ds:PostMessageA  +
push esi  +
push 2  +
push ebx  +
call edi  +
mov esi ds:GetDlgItem +
push eax  +
call esi  +
push eax  +
call ds:EnableWindow  +
push offset ValueName  +
push 856h  +
push ebx  +
call ds:SetDlgItemTextA  +
push 5  +
push 855h  +
push ebx  +
call esi  +
mov ebx ds:ShowWindow +
push eax  +
call ebx  +
push 5  +
push 856h  +
push dword ptr [ebp+8]  +
call esi  +
push eax  +
call ebx  +
push dword ptr [ebp+8]  +
call sub_100AAFF  +
push 1  +
push 2  +
push dword ptr [ebp+8]  +
test eax eax +
jnz loc_100E353  +
call edi  +
push eax  +
call esi  +
push eax  +
call ds:EnableWindow  +
push 3  +
push 0  +
push 470h  +
push dword ptr [ebp+8]  +
call edi  +
push eax  +
call ds:PostMessageA  +
xor eax eax +
jmp loc_100E2AE  +
***
call edi  +
push eax  +
call esi  +
push eax  +
call ds:EnableWindow  +
cmp dword_10225A8 0 +
jnz loc_100E2AB  +
push 0  +
push 853h  +
push dword ptr [ebp+8]  +
mov dword_10225A8 1 +
call esi  +
push eax  +
call ebx  +
push 5  +
push 854h  +
push dword ptr [ebp+8]  +
call esi  +
push eax  +
call ebx  +
push 5  +
jmp loc_100E339  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+lParam] +
xor eax eax +
cmp [edi] al +
jz loc_100E3EB  +
push esi  +
mov esi ds:SendDlgItemMessageA +
push edi  +
push 0FFFFFFFFh  +
push 158h  +
push [ebp+nIDDlgItem]  +
push [ebp+hDlg]  +
call esi  +
cmp eax 0FFFFFFFFh +
jz loc_100E3DD  +
push 0  +
push eax  +
push 14Eh  +
push [ebp+nIDDlgItem]  +
push [ebp+hDlg]  +
call esi  +
xor eax eax +
inc eax  +
jmp loc_100E3EA  +
push edi  +
push [ebp+nIDDlgItem]  +
push [ebp+hDlg]  +
call ds:SetDlgItemTextA  +
pop esi  +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi [ebx] +
push edi  +
xor edi edi +
jmp loc_100E40C  +
cmp byte ptr [esi] 0 +
jz loc_100E425  +
inc esi  +
movsx eax byte ptr [esi] +
push eax  +
push [ebp+arg_4]  +
call sub_1010BE0  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100E406  +
mov [ebx] esi +
movsx eax byte ptr [esi] +
jmp loc_100E434  +
xor eax eax +
jmp loc_100E44F  +
cmp byte ptr [edi+esi] 0 +
jz loc_100E443  +
inc edi  +
movsx eax byte ptr [edi+esi] +
push eax  +
push [ebp+arg_4]  +
call sub_1010BE0  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100E429  +
lea eax [edi+esi] +
cmp byte ptr [eax] 0 +
jz loc_100E44F  +
mov byte ptr [eax] 0 +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
call ds:GetLastError  +
xor esi esi +
push esi  +
push esi  +
mov ebx eax +
lea eax [ebp+hMem] +
push eax  +
push 400h  +
push ebx  +
push esi  +
push 1100h  +
call ds:FormatMessageA  +
test eax eax +
jz loc_100E4DC  +
call sub_101A037  +
test eax eax +
jz loc_100E4BC  +
push 1  +
push 10h  +
push hInstance  +
call sub_1019FE2  +
test eax eax +
jz loc_100E4BC  +
mov eax 180000h +
jmp loc_100E4BE  +
xor eax eax +
or eax 10h +
push eax  +
push offset Caption  +
push [ebp+hMem]  +
push edi  +
call ds:MessageBoxA  +
push [ebp+hMem]  +
call ds:LocalFree  +
jmp loc_100E4FB  +
push esi  +
push 10h  +
push esi  +
push 0Ah  +
lea eax [ebp+var_34] +
push eax  +
push ebx  +
call sub_101137A  +
add esp 0Ch +
push eax  +
push 479h  +
push edi  +
call sub_1007006  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010BBF  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_1020B5C +
test eax eax +
jz loc_100E530  +
push 0  +
push eax  +
push 30h  +
push [ebp+nIDDlgItem]  +
push [ebp+hDlg]  +
call ds:SendDlgItemMessageA  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
call sub_1006C15  +
jmp loc_100E54D  +
and dword ptr [esi+8] 0 +
push esi  +
call sub_1006C20  +
mov esi eax +
push esi  +
call sub_1006C77  +
test eax eax +
jz loc_100E543  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+hWnd] +
push esi  +
push edi  +
push 2  +
xor edi edi +
push edi  +
push 470h  +
push ebx  +
call ds:GetParent  +
push eax  +
call ds:PostMessageA  +
mov esi 839h +
push esi  +
push ebx  +
call sub_100E511  +
cmp [ebp+arg_4] edi +
jz loc_100E5FB  +
push offset byte_1020B74  +
call ds:lstrlenA  +
test eax eax +
jle loc_100E5CB  +
push edi  +
mov edi ds:CheckDlgButton +
push 837h  +
push ebx  +
call edi  +
push 1  +
push 838h  +
push ebx  +
call edi  +
push offset byte_1020B74  +
push esi  +
push ebx  +
call ds:SetDlgItemTextA  +
jmp loc_100E5FB  +
mov edi ds:CheckDlgButton +
push 1  +
push 837h  +
push ebx  +
call edi  +
push 0  +
push 838h  +
push ebx  +
call edi  +
push 0  +
push esi  +
push ebx  +
call sub_1006826  +
push 0  +
push 836h  +
push ebx  +
call sub_1006826  +
and dword_1022588 0 +
push offset aApplicationSou  +
mov esi 104h +
xor edi edi +
push esi  +
inc edi  +
or dword_1022594 edi +
push offset unk_1022060  +
mov dword_1020B60 edi +
mov dword_1022584 864h +
mov lpString1 offset aMszip +
mov dword_102257C 7 +
call sub_1006DCD  +
push offset aSourcefiles  +
push 50h  +
push offset byte_1021FC0  +
call sub_1006DCD  +
push offset Buffer  +
push esi  +
call ds:GetCurrentDirectoryA  +
call sub_1007F34  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi 83Ah +
push esi  +
push [ebp+hDlg]  +
call sub_100E511  +
push 0  +
push 7Eh  +
push 0C5h  +
push esi  +
push [ebp+hDlg]  +
call ds:SendDlgItemMessageA  +
push offset Caption  +
push esi  +
push [ebp+hDlg]  +
call ds:SetDlgItemTextA  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 8  +
***
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+8] +
push esi  +
push edi  +
mov esi 83Dh +
push esi  +
push ebx  +
call sub_100E511  +
xor edi edi +
push edi  +
push 1FEh  +
push 0C5h  +
push esi  +
push ebx  +
call ds:SendDlgItemMessageA  +
push offset byte_1020CF8  +
push esi  +
push ebx  +
call ds:SetDlgItemTextA  +
cmp dword_1020B64 edi +
jz loc_100E715  +
push edi  +
mov edi ds:CheckDlgButton +
push 83Bh  +
push ebx  +
call edi  +
push 1  +
push 83Ch  +
push ebx  +
call edi  +
push 1  +
jmp loc_100E731  +
mov edi ds:CheckDlgButton +
push 1  +
push 83Bh  +
push ebx  +
call edi  +
push 0  +
push 83Ch  +
push ebx  +
call edi  +
push 0  +
push esi  +
push ebx  +
call sub_1006826  +
pop edi  +
xor eax eax +
pop esi  +
inc eax  +
pop ebx  +
pop ebp  +
retn 8  +
***
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+8] +
mov esi 840h +
push esi  +
push edi  +
call sub_100E511  +
push offset byte_1020EF8  +
push esi  +
push edi  +
call ds:SetDlgItemTextA  +
cmp dword_1020B68 0 +
mov ebx ds:CheckDlgButton +
jz loc_100E79B  +
push 0  +
push 83Eh  +
push edi  +
call ebx  +
push 1  +
push 83Fh  +
push edi  +
call ebx  +
push 1  +
push esi  +
push edi  +
call sub_1006826  +
push 1  +
jmp loc_100E7BA  +
push 1  +
push 83Eh  +
push edi  +
call ebx  +
push 0  +
push 83Fh  +
push edi  +
call ebx  +
push 0  +
push esi  +
push edi  +
call sub_1006826  +
push 0  +
push 836h  +
push edi  +
call sub_1006826  +
pop edi  +
xor eax eax +
pop esi  +
inc eax  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 264h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+hDlg] +
push ebx  +
push esi  +
mov esi ds:GetDlgItem +
push edi  +
push 0  +
push 0  +
push 1009h  +
mov edi 841h +
push edi  +
push eax  +
mov [ebp+var_208] eax +
call esi  +
mov ebx ds:SendMessageA +
push eax  +
call ebx  +
or [ebp+var_240] 0FFFFFFFFh +
xor eax eax +
mov [ebp+lParam] 0Dh +
mov [ebp+var_248] eax +
mov [ebp+var_244] eax +
mov [ebp+var_250] eax +
mov [ebp+var_24C] eax +
call sub_1006C15  +
jmp loc_100E87F  +
mov eax [ebp+var_20C] +
mov [ebp+var_234] eax +
lea eax [ebp+lParam] +
push eax  +
push 0  +
push 1007h  +
push edi  +
push [ebp+var_208]  +
call esi  +
push eax  +
call ebx  +
push [ebp+var_20C]  +
inc [ebp+var_250]  +
call sub_1006C20  +
push eax  +
mov [ebp+var_20C] eax +
call sub_1006C77  +
test eax eax +
jz loc_100E848  +
cmp [ebp+arg_4] 0 +
jz loc_100EA02  +
lea eax [ebp+Rect] +
push eax  +
push edi  +
push [ebp+var_208]  +
call esi  +
push eax  +
call ds:GetWindowRect  +
and [ebp+var_228] 0 +
push 200h  +
lea eax [ebp+Buffer] +
push eax  +
push 42Eh  +
mov [ebp+var_22C] 7 +
mov [ebp+var_224] 50h +
call sub_100684A  +
lea eax [ebp+Buffer] +
push eax  +
call ds:lstrlenA  +
inc eax  +
push eax  +
push 40h  +
mov [ebp+var_20C] eax +
call ds:LocalAlloc  +
xor ecx ecx +
mov [ebp+hMem] eax +
cmp eax ecx +
jnz loc_100E926  +
push ecx  +
push 10h  +
push ecx  +
push ecx  +
push 44Ch  +
push [ebp+var_208]  +
call sub_1007006  +
xor eax eax +
jmp loc_100EA05  +
lea ecx [ebp+Buffer] +
push ecx  +
push [ebp+var_20C]  +
push eax  +
call sub_1006DCD  +
lea eax [ebp+var_22C] +
push eax  +
push 0  +
push 101Bh  +
push edi  +
push [ebp+var_208]  +
call esi  +
push eax  +
call ebx  +
push [ebp+hMem]  +
call ds:LocalFree  +
mov eax [ebp+Rect.right] +
sub eax [ebp+Rect.left] +
push 200h  +
sub eax 50h +
mov [ebp+var_224] eax +
lea eax [ebp+Buffer] +
push eax  +
push 42Fh  +
call sub_100684A  +
lea eax [ebp+Buffer] +
push eax  +
call ds:lstrlenA  +
inc eax  +
push eax  +
push 40h  +
mov [ebp+var_20C] eax +
call ds:LocalAlloc  +
xor ecx ecx +
mov [ebp+hMem] eax +
cmp eax ecx +
jz loc_100E90A  +
lea ecx [ebp+Buffer] +
push ecx  +
push [ebp+var_20C]  +
push eax  +
call sub_1006DCD  +
lea eax [ebp+var_22C] +
push eax  +
push 1  +
push 101Bh  +
push edi  +
push [ebp+var_208]  +
call esi  +
push eax  +
call ebx  +
push [ebp+hMem]  +
call ds:LocalFree  +
push 0  +
push 843h  +
push [ebp+var_208]  +
call sub_1006826  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010BBF  +
leave   +
retn 8  +
***
push ebp  +
mov ebp esp +
sub esp 158h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp-4] eax +
or dword ptr [ebp-134h] 0FFFFFFFFh +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+8] +
xor ebx ebx +
push 841h  +
push edi  +
mov [ebp-110h] edi +
mov [ebp-118h] ebx +
mov [ebp-120h] ebx +
mov dword ptr [ebp-11Ch] 1 +
mov dword ptr [ebp-148h] 0Dh +
mov [ebp-13Ch] ebx +
mov [ebp-138h] ebx +
call ds:GetDlgItem  +
mov [ebp-114h] eax +
mov eax [ebp+0Ch] +
sub eax 842h +
jz loc_100EB21  +
dec eax  +
jnz loc_100EB0A  +
mov esi ds:SendMessageA +
jmp loc_100EAE1  +
lea eax [ebp-148h] +
push eax  +
push ebx  +
push 1005h  +
push dword ptr [ebp-114h]  +
mov dword ptr [ebp-148h] 4 +
mov [ebp-144h] edi +
mov [ebp-140h] ebx +
call esi  +
push dword ptr [ebp-128h]  +
call sub_1006C8D  +
push ebx  +
push edi  +
push 1008h  +
push dword ptr [ebp-114h]  +
call esi  +
push 2  +
push 0FFFFFFFFh  +
push 100Ch  +
push dword ptr [ebp-114h]  +
call esi  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jnz loc_100EA9C  +
push ebx  +
push 843h  +
push dword ptr [ebp-110h]  +
call sub_1006826  +
mov eax [ebp-11Ch] +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010BBF  +
leave   +
retn 14h  +
***
mov esi 2000h +
push esi  +
push 40h  +
call ds:LocalAlloc  +
mov [ebp-10Ch] eax +
push ebx  +
cmp eax ebx +
jnz loc_100EB4D  +
push 10h  +
push ebx  +
push ebx  +
push 44Ch  +
push edi  +
call sub_1007006  +
xor eax eax +
jmp loc_100EB10  +
***
lea ecx [ebp-120h] +
push ecx  +
lea ecx [ebp-118h] +
push ecx  +
push 200h  +
push esi  +
push eax  +
push 425h  +
push edi  +
call sub_1007D7E  +
mov [ebp-11Ch] eax +
cmp eax ebx +
jz loc_100ED99  +
push ebx  +
push ebx  +
push 1004h  +
push dword ptr [ebp-114h]  +
call ds:SendMessageA  +
push dword ptr [ebp-10Ch]  +
mov [ebp-144h] eax +
mov esi 104h +
push esi  +
lea eax [ebp-108h] +
push eax  +
call sub_1006DCD  +
lea eax [ebp-108h] +
push eax  +
push esi  +
push offset Buffer  +
call sub_1006DCD  +
push offset ValueName  +
push esi  +
lea eax [ebp-108h] +
push eax  +
call sub_101A172  +
push dword ptr [ebp-10Ch]  +
call ds:lstrlenA  +
mov edi eax +
inc edi  +
jmp loc_100EC8A  +
mov eax [ebp-10Ch] +
push 1  +
add eax edi +
push eax  +
push 841h  +
push dword ptr [ebp-110h]  +
call sub_10071E9  +
test eax eax +
jnz loc_100EC5A  +
lea eax [ebp-108h] +
push eax  +
mov eax [ebp-10Ch] +
add eax edi +
push eax  +
call sub_1007F6A  +
mov [ebp-128h] eax +
cmp eax ebx +
jz loc_100ED3B  +
lea eax [ebp-158h] +
push eax  +
call ds:GetSystemTime  +
inc dword ptr [ebp-144h]  +
lea eax [ebp-148h] +
push eax  +
push ebx  +
push 1007h  +
push dword ptr [ebp-114h]  +
mov [ebp-140h] ebx +
call ds:SendMessageA  +
jmp loc_100EC77  +
mov eax [ebp-10Ch] +
push ebx  +
push 10h  +
push ebx  +
add eax edi +
push eax  +
push 452h  +
push dword ptr [ebp-110h]  +
call sub_1007006  +
mov eax [ebp-10Ch] +
add eax edi +
push eax  +
call ds:lstrlenA  +
lea edi [edi+eax+1] +
mov eax [ebp-10Ch] +
add eax edi +
cmp [eax] bl +
jnz loc_100EBE4  +
push dword ptr [ebp-10Ch]  +
call ds:lstrlenA  +
inc eax  +
cmp edi eax +
jnz loc_100ED99  +
mov eax [ebp-118h] +
mov edi [ebp-10Ch] +
push 1  +
add eax edi +
push eax  +
push 841h  +
push dword ptr [ebp-110h]  +
call sub_10071E9  +
test eax eax +
jnz loc_100ED7C  +
push dword ptr [ebp-118h]  +
lea eax [ebp-108h] +
push edi  +
push esi  +
push eax  +
call sub_1006E07  +
lea eax [ebp-108h] +
push eax  +
push esi  +
push offset Buffer  +
call sub_1006DCD  +
lea eax [ebp-108h] +
push eax  +
mov eax [ebp-118h] +
add eax edi +
push eax  +
mov [ebp-140h] ebx +
call sub_1007F6A  +
mov [ebp-128h] eax +
cmp eax ebx +
jnz loc_100ED61  +
push ebx  +
push 10h  +
push ebx  +
push ebx  +
push 44Ch  +
push dword ptr [ebp-110h]  +
call sub_1007006  +
push edi  +
jmp loc_100ED56  +
push ebx  +
push 10h  +
push ebx  +
push ebx  +
push 44Ch  +
push dword ptr [ebp-110h]  +
call sub_1007006  +
push dword ptr [ebp-10Ch]  +
call ds:LocalFree  +
jmp loc_100EB49  +
***
lea eax [ebp-148h] +
push eax  +
push ebx  +
push 1007h  +
push dword ptr [ebp-114h]  +
call ds:SendMessageA  +
jmp loc_100ED99  +
mov eax [ebp-118h] +
push ebx  +
push 10h  +
push ebx  +
add edi eax +
push edi  +
push 452h  +
push dword ptr [ebp-110h]  +
call sub_1007006  +
push dword ptr [ebp-10Ch]  +
call ds:LocalFree  +
push ebx  +
push ebx  +
push 1032h  +
push dword ptr [ebp-114h]  +
call ds:SendMessageA  +
test eax eax +
jz loc_100EAF9  +
push 1  +
jmp loc_100EAFA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_8] +
mov eax [esi+8] +
cmp eax 0FFFFFF6Ah +
jz loc_100EE1A  +
cmp eax 0FFFFFF9Bh +
jnz loc_100EE38  +
xor esi esi +
push esi  +
push esi  +
push 1032h  +
push 841h  +
push [ebp+hDlg]  +
call ds:GetDlgItem  +
push eax  +
call ds:SendMessageA  +
test eax eax +
jz loc_100EE0A  +
push 1  +
jmp loc_100EE0B  +
push esi  +
push 843h  +
push [ebp+hDlg]  +
call sub_1006826  +
jmp loc_100EE38  +
test byte ptr [esi+0Ch] 1 +
jz loc_100EE38  +
push dword ptr [esi+14h]  +
mov eax [esi+2Ch] +
push eax  +
call sub_1006C60  +
push eax  +
push dword ptr [esi+24h]  +
push dword ptr [esi+20h]  +
call sub_1006DCD  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
sub esp 204h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp-4] eax +
push esi  +
push edi  +
push dword_1022584  +
mov edi [ebp+8] +
push 866h  +
mov esi 864h +
push esi  +
push edi  +
call ds:CheckRadioButton  +
test eax eax +
jz loc_100EECF  +
mov eax dword_1022584 +
cmp eax esi +
jnz loc_100EE8B  +
mov eax 432h +
jmp loc_100EE9D  +
xor ecx ecx +
cmp eax 865h +
setnz cl  +
add ecx 433h +
mov eax ecx +
push 200h  +
lea ecx [ebp-204h] +
push ecx  +
push eax  +
call sub_100684A  +
lea eax [ebp-204h] +
push eax  +
push 0  +
push 0Ch  +
push 85Fh  +
push edi  +
call ds:GetDlgItem  +
push eax  +
call ds:SendMessageA  +
jmp loc_100EED5  +
push edi  +
call sub_100E45B  +
mov ecx [ebp-4] +
xor eax eax +
pop edi  +
xor ecx ebp +
inc eax  +
pop esi  +
call sub_1010BBF  +
leave   +
retn 8  +
***
push ebp  +
mov ebp esp +
sub esp 110h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
mov ebx [ebp+8] +
push esi  +
push edi  +
mov esi 861h +
push esi  +
push ebx  +
mov [ebp-108h] ebx +
call sub_100E511  +
lea edi [esi+1] +
push edi  +
push ebx  +
call sub_100E511  +
xor ebx ebx +
cmp [ebp+0Ch] ebx +
jnz loc_100F0BB  +
push ebx  +
push ebx  +
push 14Bh  +
push esi  +
push dword ptr [ebp-108h]  +
mov esi ds:SendDlgItemMessageA +
call esi  +
push ebx  +
push ebx  +
push 14Bh  +
push edi  +
push dword ptr [ebp-108h]  +
call esi  +
and dword_102258C 0FFFFFFFBh +
call sub_1006C15  +
jmp loc_100F044  +
push ebx  +
push dword ptr [ebp-10Ch]  +
call sub_1006C60  +
push 100h  +
lea ecx [ebp-104h] +
push ecx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push eax  +
mov [ebp-110h] eax +
call sub_101171A  +
add esp 24h +
push 0FFFFFFFFh  +
push offset a_exe  +
push 0FFFFFFFFh  +
lea eax [ebp-104h] +
push eax  +
push 1  +
push 7Fh  +
call ds:CompareStringA  +
dec eax  +
dec eax  +
jz loc_100F00B  +
push 0FFFFFFFFh  +
push offset a_bat  +
push 0FFFFFFFFh  +
lea eax [ebp-104h] +
push eax  +
push 1  +
push 7Fh  +
call ds:CompareStringA  +
dec eax  +
dec eax  +
jz loc_100F00B  +
push 0FFFFFFFFh  +
push offset a_com  +
push 0FFFFFFFFh  +
lea eax [ebp-104h] +
push eax  +
push 1  +
push 7Fh  +
call ds:CompareStringA  +
dec eax  +
dec eax  +
jz loc_100F00B  +
push 0FFFFFFFFh  +
push offset a_inf  +
push 0FFFFFFFFh  +
lea eax [ebp-104h] +
push eax  +
push 1  +
push 7Fh  +
call ds:CompareStringA  +
dec eax  +
dec eax  +
jnz loc_100F039  +
push dword ptr [ebp-110h]  +
push ebx  +
push 143h  +
push 861h  +
push dword ptr [ebp-108h]  +
call esi  +
push dword ptr [ebp-110h]  +
push ebx  +
push 143h  +
push edi  +
push dword ptr [ebp-108h]  +
call esi  +
push dword ptr [ebp-10Ch]  +
call sub_1006C20  +
push eax  +
mov [ebp-10Ch] eax +
call sub_1006C77  +
test eax eax +
jz loc_100EF66  +
push offset unk_1021E1C  +
push 861h  +
push dword ptr [ebp-108h]  +
call sub_100E39D  +
push offset aNone_0  +
push ebx  +
push 143h  +
push edi  +
push dword ptr [ebp-108h]  +
call esi  +
push offset unk_1021C1C  +
push edi  +
push dword ptr [ebp-108h]  +
call sub_100E39D  +
test eax eax +
jnz loc_100F0BB  +
push offset aNone_0  +
push 0FFFFFFFFh  +
push 158h  +
push edi  +
push dword ptr [ebp-108h]  +
call esi  +
push ebx  +
push eax  +
push 14Eh  +
push edi  +
push dword ptr [ebp-108h]  +
call esi  +
mov ecx [ebp-4] +
pop edi  +
xor eax eax +
pop esi  +
xor ecx ebp +
inc eax  +
pop ebx  +
call sub_1010BBF  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+hDlg] +
push esi  +
push edi  +
mov esi 84Eh +
push esi  +
push ebx  +
call sub_100E511  +
xor edi edi +
push edi  +
push 1FEh  +
push 0C5h  +
push esi  +
push ebx  +
call ds:SendDlgItemMessageA  +
push offset byte_1021100  +
push esi  +
push ebx  +
call ds:SetDlgItemTextA  +
cmp dword_1020B6C edi +
jz loc_100F132  +
push edi  +
mov edi ds:CheckDlgButton +
push 84Ch  +
push ebx  +
call edi  +
push 1  +
push 84Dh  +
push ebx  +
call edi  +
push 1  +
jmp loc_100F14E  +
mov edi ds:CheckDlgButton +
push 1  +
push 84Ch  +
push ebx  +
call edi  +
push 0  +
push 84Dh  +
push ebx  +
call edi  +
push 0  +
push esi  +
push ebx  +
call sub_1006826  +
pop edi  +
xor eax eax +
pop esi  +
inc eax  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+hDlg] +
mov esi 84Fh +
push esi  +
push edi  +
call sub_100E511  +
push offset NewFileName  +
push esi  +
push edi  +
call ds:SetDlgItemTextA  +
test byte ptr dword_102258C 1 +
mov esi ds:CheckDlgButton +
jnz loc_100F19A  +
push 0  +
jmp loc_100F19C  +
push 1  +
push 860h  +
push edi  +
call esi  +
test byte ptr dword_102258C 2 +
jz loc_100F1B1  +
push 1  +
jmp loc_100F1B3  +
push 0  +
push 863h  +
push edi  +
call esi  +
xor eax eax +
pop edi  +
inc eax  +
pop esi  +
pop ebp  +
retn 8  +
***
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov esi 84Fh +
push esi  +
push dword ptr [ebp+8]  +
call sub_100E511  +
push offset NewFileName  +
push esi  +
push dword ptr [ebp+8]  +
call ds:SetDlgItemTextA  +
xor eax eax +
cmp [ebp+0Ch] eax +
jnz loc_100F298  +
push eax  +
push eax  +
push 14Bh  +
lea edi [esi+18h] +
mov esi ds:SendDlgItemMessageA +
push edi  +
push dword ptr [ebp+8]  +
call esi  +
mov ebx offset off_101F2C8 +
push dword ptr [ebx]  +
push 0  +
push 143h  +
push edi  +
push dword ptr [ebp+8]  +
call esi  +
cmp eax 0FFFFFFFFh +
jz loc_100F249  +
cmp eax 0FFFFFFFEh +
jz loc_100F249  +
add ebx 4 +
cmp ebx offset off_101F2D8 +
jl loc_100F214  +
mov eax dword_102258C +
test eax 20000h +
jz loc_100F261  +
xor eax eax +
inc eax  +
jmp loc_100F279  +
xor eax eax +
push eax  +
push 10h  +
push eax  +
push eax  +
push 44Ch  +
push dword ptr [ebp+8]  +
call sub_1007006  +
xor eax eax +
jmp loc_100F2D6  +
test eax 40000h +
jz loc_100F26D  +
push 2  +
pop eax  +
jmp loc_100F279  +
and eax 80000h +
neg eax  +
sbb eax eax +
and eax 3 +
push 0  +
push eax  +
mov ebx 14Eh +
push ebx  +
push edi  +
push dword ptr [ebp+8]  +
call esi  +
cmp eax 0FFFFFFFFh +
jnz loc_100F298  +
push 0  +
push 0  +
push ebx  +
push edi  +
push dword ptr [ebp+8]  +
call esi  +
test dword_102258C 10000h +
mov esi ds:CheckDlgButton +
jz loc_100F2AE  +
push 1  +
jmp loc_100F2B0  +
push 0  +
push 868h  +
push dword ptr [ebp+8]  +
call esi  +
test byte ptr dword_102258C 2 +
jz loc_100F2C7  +
push 1  +
jmp loc_100F2C9  +
push 0  +
push 863h  +
push dword ptr [ebp+8]  +
call esi  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi 869h +
push edi  +
push dword ptr [ebp+8]  +
call sub_100E511  +
lea esi [edi+1] +
push esi  +
push dword ptr [ebp+8]  +
call sub_100E511  +
mov ebx ds:SendDlgItemMessageA +
push 0  +
push 103h  +
push 0C5h  +
push edi  +
push dword ptr [ebp+8]  +
call ebx  +
push 0  +
push 103h  +
push 0C5h  +
push esi  +
push dword ptr [ebp+8]  +
call ebx  +
push offset byte_1021710  +
push edi  +
push dword ptr [ebp+8]  +
mov edi ds:SetDlgItemTextA +
call edi  +
push offset unk_1022060  +
push esi  +
push dword ptr [ebp+8]  +
call edi  +
pop edi  +
xor eax eax +
pop esi  +
inc eax  +
pop ebx  +
pop ebp  +
retn 8  +
***
push ebp  +
mov ebp esp +
sub esp 110h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
mov edi 852h +
push edi  +
push esi  +
mov [ebp-110h] esi +
call sub_100E511  +
cmp byte_1020B74 0 +
push 2Eh  +
jnz loc_100F3E8  +
mov ebx offset NewFileName +
push ebx  +
call sub_1019ED9  +
mov esi eax +
test esi esi +
jz loc_100F3E0  +
mov al [esi] +
push ebx  +
mov [ebp-109h] al +
mov ebx 104h +
push ebx  +
lea eax [ebp-108h] +
push eax  +
mov byte ptr [esi] 0 +
call sub_1006DCD  +
mov al [ebp-109h] +
push offset a_sed  +
mov [esi] al +
push ebx  +
lea eax [ebp-108h] +
push eax  +
call sub_1006E54  +
lea ebx [ebp-108h] +
mov esi [ebp-110h] +
jmp loc_100F431  +
mov ebx offset byte_1020B74 +
push ebx  +
call sub_1019ED9  +
mov [ebp-110h] eax +
test eax eax +
jz loc_100F431  +
push 0FFFFFFFFh  +
push offset a_cdf  +
push 0FFFFFFFFh  +
push eax  +
push 1  +
push 7Fh  +
call ds:CompareStringA  +
dec eax  +
dec eax  +
jnz loc_100F431  +
mov eax offset Caption +
sub eax [ebp-110h] +
push offset a_sed  +
push eax  +
push dword ptr [ebp-110h]  +
call sub_1006DCD  +
push ebx  +
push edi  +
push esi  +
call ds:SetDlgItemTextA  +
cmp dword_1020B60 0 +
mov ebx ds:CheckDlgButton +
jz loc_100F46A  +
push 1  +
push 850h  +
push esi  +
call ebx  +
push 0  +
push 851h  +
push esi  +
call ebx  +
push 1  +
push edi  +
push esi  +
call sub_1006826  +
push 1  +
jmp loc_100F489  +
push 0  +
push 850h  +
push esi  +
call ebx  +
push 1  +
push 851h  +
push esi  +
call ebx  +
push 0  +
push edi  +
push esi  +
call sub_1006826  +
push 0  +
push 836h  +
push esi  +
call sub_1006826  +
mov ecx [ebp-4] +
pop edi  +
xor eax eax +
pop esi  +
xor ecx ebp +
inc eax  +
pop ebx  +
call sub_1010BBF  +
leave   +
retn 8  +
***
push ebp  +
mov ebp esp +
sub esp 10Ch +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
mov ebx [ebp+8] +
push esi  +
push edi  +
mov edi 104h +
push edi  +
lea eax [ebp-108h] +
push eax  +
mov esi 852h +
push esi  +
push ebx  +
call ds:GetDlgItemTextA  +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_100F614  +
push 850h  +
push ebx  +
call ds:IsDlgButtonChecked  +
test eax eax +
jz loc_100F60B  +
lea eax [ebp-108h] +
push eax  +
call ds:lstrlenA  +
test eax eax +
jnz loc_100F524  +
push 45Ah  +
push esi  +
push ebx  +
call sub_10071A0  +
xor eax eax +
jmp loc_100F61C  +
push 2Eh  +
lea eax [ebp-108h] +
push eax  +
call sub_1019ED9  +
test eax eax +
jz loc_100F54C  +
push 0FFFFFFFFh  +
push offset a_sed  +
push 0FFFFFFFFh  +
push eax  +
push 1  +
push 7Fh  +
call ds:CompareStringA  +
jmp loc_100F55E  +
push offset a_sed  +
push edi  +
lea eax [ebp-108h] +
push eax  +
call sub_1006E54  +
lea eax [ebp-10Ch] +
push eax  +
lea eax [ebp-108h] +
push eax  +
push edi  +
push eax  +
call ds:GetFullPathNameA  +
test eax eax +
jnz loc_100F580  +
push ebx  +
call sub_100E45B  +
jmp loc_100F51D  +
***
mov esi offset byte_1020B74 +
push esi  +
call ds:lstrlenA  +
test eax eax +
jz loc_100F5E4  +
push esi  +
lea eax [ebp-108h] +
push eax  +
call ds:lstrcmpiA  +
test eax eax +
jz loc_100F5E4  +
lea eax [ebp-108h] +
push eax  +
call sub_10066E5  +
test eax eax +
jz loc_100F5D4  +
push 4  +
push 20h  +
push 0  +
lea eax [ebp-108h] +
push eax  +
push 473h  +
push 0  +
call sub_1007006  +
cmp eax 7 +
jz loc_100F51D  +
push 0  +
lea eax [ebp-108h] +
push eax  +
push esi  +
call ds:CopyFileA  +
lea eax [ebp-108h] +
push eax  +
push edi  +
push esi  +
call sub_1006DCD  +
xor eax eax +
inc eax  +
push eax  +
push esi  +
push ebx  +
mov dword_1020B60 eax +
call sub_100833E  +
test eax eax +
jnz loc_100F619  +
jmp loc_100F51D  +
***
and dword_1020B60 0 +
jmp loc_100F619  +
call sub_100E539  +
xor eax eax +
inc eax  +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010BBF  +
leave   +
retn 10h  +
***
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+8] +
push 3  +
push 0  +
push 470h  +
push edi  +
call ds:GetParent  +
push eax  +
call ds:PostMessageA  +
mov ebx 856h +
push ebx  +
push edi  +
call sub_100E511  +
push offset ValueName  +
push ebx  +
push edi  +
call ds:SetDlgItemTextA  +
cmp dword ptr [ebp+0Ch] 0 +
mov esi ds:GetDlgItem +
jz loc_100F688  +
push offset loc_1006653  +
push ebx  +
push edi  +
call esi  +
push eax  +
call sub_1006627  +
push 5  +
push 853h  +
push edi  +
call esi  +
mov edi ds:ShowWindow +
push eax  +
call edi  +
push 0  +
push 854h  +
push dword ptr [ebp+8]  +
call esi  +
push eax  +
call edi  +
push 0  +
push 855h  +
push dword ptr [ebp+8]  +
call esi  +
push eax  +
call edi  +
push 0  +
push ebx  +
push dword ptr [ebp+8]  +
call esi  +
push eax  +
call edi  +
and dword_10225A8 0 +
pop edi  +
xor eax eax +
pop esi  +
inc eax  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 108h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
test esi esi +
jz loc_100F73A  +
cmp byte ptr [esi] 0 +
jz loc_100F73A  +
push esi  +
push 104h  +
lea eax [ebp+var_108] +
push eax  +
call sub_1006DCD  +
mov al byte ptr [ebp+var_108] +
jmp loc_100F725  +
cmp al 20h +
jnz loc_100F729  +
mov al byte ptr [ebp+edi+var_108+1] +
inc edi  +
test al al +
jnz loc_100F719  +
lea eax [ebp+edi+var_108] +
push eax  +
push [ebp+arg_4]  +
push esi  +
call sub_1006DCD  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1010BBF  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
call sub_1006C15  +
jmp loc_100F778  +
push 0  +
push esi  +
call sub_1006C60  +
push eax  +
push [ebp+lpString1]  +
call ds:lstrcmpiA  +
test eax eax +
jz loc_100F78B  +
push esi  +
call sub_1006C20  +
mov esi eax +
push esi  +
call sub_1006C77  +
test eax eax +
jz loc_100F75C  +
xor eax eax +
pop esi  +
pop ebp  +
retn 0Ch  +
push 1  +
push esi  +
call sub_1006C60  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1006DCD  +
push 0  +
push esi  +
call sub_1006C60  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1006E54  +
xor eax eax +
inc eax  +
jmp loc_100F786  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 138h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+lpString1] +
push ebx  +
push 104h  +
lea ecx [ebp+FileName] +
push ecx  +
xor ebx ebx +
push eax  +
mov byte ptr [ebp+FileName] bl +
call sub_100F74F  +
test eax eax +
jnz loc_100F808  +
push ebx  +
push 10h  +
push ebx  +
push ebx  +
push 455h  +
push ebx  +
call sub_1007006  +
xor eax eax +
jmp loc_100F838  +
lea eax [ebp+FileName] +
push eax  +
push 30h  +
lea eax [ebp+ReturnedString] +
push eax  +
push offset ValueName  +
push offset aAdvancedinf  +
push offset aVersion  +
call ds:GetPrivateProfileStringA  +
test eax eax +
jbe loc_100F835  +
or dword_102258C 4 +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop ebx  +
call sub_1010BBF  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10Ch +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+lpString1] +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov esi 104h +
push esi  +
lea eax [ebp+szShortPath] +
push eax  +
push ebx  +
mov [ebp+var_10C] edi +
call sub_100F74F  +
test eax eax +
jz loc_100F8F8  +
test byte ptr dword_102258C 2 +
lea eax [ebp+szShortPath] +
jnz loc_100F8B5  +
push esi  +
push eax  +
push eax  +
call ds:GetShortPathNameA  +
push 5Ch  +
lea eax [ebp+szShortPath] +
push eax  +
call sub_1019ED9  +
inc eax  +
push eax  +
push [ebp+arg_8]  +
push edi  +
jmp loc_100F8EE  +
mov edi offset asc_100150C +
push edi  +
push esi  +
push eax  +
call sub_1006DCD  +
push ebx  +
push esi  +
lea eax [ebp+szShortPath] +
push eax  +
call sub_1006E54  +
push edi  +
push esi  +
lea eax [ebp+szShortPath] +
push eax  +
call sub_1006E54  +
lea eax [ebp+szShortPath] +
push eax  +
push [ebp+arg_8]  +
push [ebp+var_10C]  +
call sub_1006DCD  +
xor eax eax +
inc eax  +
jmp loc_100F8FA  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010BBF  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10Ch +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
push esi  +
push [ebp+arg_8]  +
push ebx  +
call sub_1006DCD  +
push [ebp+arg_8]  +
push ebx  +
push esi  +
call sub_100F84C  +
test eax eax +
jnz loc_100F9E7  +
push edi  +
push esi  +
push 104h  +
lea eax [ebp+var_108] +
push eax  +
call sub_1006DCD  +
cmp byte ptr [ebp+var_108] 22h +
mov edi offset asc_100158C +
jnz loc_100F99B  +
lea eax [ebp+var_108+1] +
mov [ebp+lpString1] eax +
push offset asc_100150C  +
lea eax [ebp+lpString1] +
push eax  +
call sub_100E3F5  +
mov esi eax +
test esi esi +
jz loc_100F9B6  +
cmp byte ptr [esi] 22h +
jnz loc_100F9B6  +
push esi  +
call ds:CharNextA  +
jmp loc_100F9B4  +
lea eax [ebp+var_108] +
mov [ebp+lpString1] eax +
push edi  +
lea eax [ebp+lpString1] +
push eax  +
call sub_100E3F5  +
mov esi eax +
push [ebp+arg_8]  +
push ebx  +
push [ebp+lpString1]  +
call sub_100F84C  +
test eax eax +
jz loc_100F9E6  +
test esi esi +
jz loc_100F9E6  +
cmp byte ptr [esi] 0 +
jz loc_100F9E6  +
push edi  +
push [ebp+arg_8]  +
push ebx  +
call sub_1006E54  +
push esi  +
push [ebp+arg_8]  +
push ebx  +
call sub_1006E54  +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010BBF  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 208h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push eax  +
push 200h  +
lea eax [ebp+var_204] +
push eax  +
call sub_1006DCD  +
cmp byte ptr [ebp+var_204] 22h +
jnz loc_100FA3C  +
lea eax [ebp+var_204+1] +
push offset asc_100150C  +
jmp loc_100FA47  +
lea eax [ebp+var_204] +
push offset asc_100158C  +
mov [ebp+lpString1] eax +
lea eax [ebp+lpString1] +
push eax  +
call sub_100E3F5  +
push 2Eh  +
push [ebp+lpString1]  +
call sub_1019ED9  +
test eax eax +
jz loc_100FA91  +
push 0FFFFFFFFh  +
push offset a_inf  +
push 0FFFFFFFFh  +
push eax  +
push 1  +
push 7Fh  +
call ds:CompareStringA  +
dec eax  +
dec eax  +
jnz loc_100FA91  +
push [ebp+lpString1]  +
call sub_100F7BD  +
test eax eax +
jz loc_100FA94  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1010BBF  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+lpBuffer] +
lea eax [ebp+lpString] +
push eax  +
push esi  +
push 104h  +
push esi  +
call ds:GetFullPathNameA  +
test eax eax +
jnz loc_100FAD5  +
push [ebp+hDlg]  +
call sub_100E45B  +
xor eax eax +
jmp loc_100FB99  +
push 1  +
push esi  +
push [ebp+hDlg]  +
call sub_100833E  +
test eax eax +
jz loc_100FACE  +
push ebx  +
mov ebx [ebp+arg_8] +
push edi  +
push esi  +
push [ebp+arg_C]  +
push ebx  +
call sub_1006DCD  +
push [ebp+lpString]  +
mov edi ds:lstrlenA +
call edi  +
mov [ebp+lpBuffer] ebx +
sub [ebp+lpBuffer] eax +
push ebx  +
call edi  +
mov esi eax +
add esi [ebp+lpBuffer] +
push 2Eh  +
push esi  +
call sub_1010BE0  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100FB1D  +
mov byte ptr [eax] 0 +
test dword_102258C 10000h +
push esi  +
jz loc_100FBB0  +
call edi  +
cmp eax 8 +
push 2Ah  +
push esi  +
jle loc_100FB50  +
mov byte ptr [esi+8] 0 +
call sub_1010BE0  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100FB7D  +
push offset a_  +
mov eax ebx +
jmp loc_100FB6A  +
call sub_1010BE0  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100FB7D  +
push esi  +
call edi  +
cmp eax 5 +
push offset a_  +
mov eax ebx +
jle loc_100FB9E  +
lea edx [esi+5] +
push edx  +
push [ebp+arg_C]  +
call sub_100D6CA  +
push eax  +
push edx  +
call sub_1006DCD  +
push offset a_cab  +
push esi  +
push [ebp+arg_C]  +
mov eax ebx +
call sub_100D6CA  +
push eax  +
push esi  +
call sub_1006E54  +
xor eax eax +
inc eax  +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 10h  +
push esi  +
push [ebp+arg_C]  +
call sub_100D6CA  +
push eax  +
push esi  +
call sub_1006E54  +
jmp loc_100FB7D  +
call edi  +
cmp eax 8 +
jle loc_100FB7D  +
push 47Ah  +
push 84Fh  +
push [ebp+hDlg]  +
call sub_10071A0  +
xor eax eax +
jmp loc_100FB97  +
***
push ebp  +
mov ebp esp +
push ebx  +
mov ebx ds:GetDlgItem +
push esi  +
push edi  +
mov esi offset unk_1021E1C +
push esi  +
mov edi 104h +
push edi  +
push 0Dh  +
push 861h  +
push dword ptr [ebp+8]  +
call ebx  +
push eax  +
call ds:SendMessageA  +
push edi  +
push esi  +
call sub_100F6DA  +
xor edi edi +
cmp [ebp+0Ch] edi +
jz loc_100FC2E  +
push esi  +
call ds:lstrlenA  +
test eax eax +
jnz loc_100FC2E  +
push edi  +
push 10h  +
push edi  +
push edi  +
push 454h  +
push dword ptr [ebp+8]  +
call sub_1007006  +
xor eax eax +
jmp loc_100FC80  +
push esi  +
call sub_100F9FC  +
test eax eax +
jz loc_100FC2A  +
mov esi offset unk_1021C1C +
push esi  +
mov edi 200h +
push edi  +
push 0Dh  +
push 862h  +
push dword ptr [ebp+8]  +
call ebx  +
push eax  +
call ds:SendMessageA  +
push edi  +
push esi  +
call sub_100F6DA  +
push esi  +
call ds:lstrlenA  +
test eax eax +
jz loc_100FC7D  +
push 0FFFFFFFFh  +
push offset aNone_0  +
push 0FFFFFFFFh  +
push esi  +
push 1  +
push 7Fh  +
call ds:CompareStringA  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi 104h +
push edi  +
mov esi offset NewFileName +
push esi  +
mov ebx 84Fh +
push ebx  +
push [ebp+hDlg]  +
call ds:GetDlgItemTextA  +
push edi  +
push esi  +
call sub_100F6DA  +
cmp [ebp+arg_4] 0 +
jz loc_100FDAF  +
push esi  +
call ds:lstrlenA  +
test eax eax +
jnz loc_100FCE1  +
push 457h  +
push ebx  +
push [ebp+hDlg]  +
call sub_10071A0  +
xor eax eax +
jmp loc_100FDB2  +
lea eax [ebp+FilePart] +
push eax  +
push esi  +
push edi  +
push esi  +
call ds:GetFullPathNameA  +
test eax eax +
jnz loc_100FCFC  +
push [ebp+hDlg]  +
call sub_100E45B  +
jmp loc_100FCDA  +
push 1  +
push esi  +
push [ebp+hDlg]  +
call sub_100833E  +
test eax eax +
jz loc_100FCDA  +
push 2Eh  +
push esi  +
call sub_1019ED9  +
mov ebx offset a_exe +
test eax eax +
jz loc_100FD35  +
push 0FFFFFFFFh  +
push ebx  +
push 0FFFFFFFFh  +
push eax  +
push 1  +
push 7Fh  +
call ds:CompareStringA  +
dec eax  +
dec eax  +
jz loc_100FD3D  +
cmp eax 0FFFFFFFEh +
jz loc_100FD3D  +
push ebx  +
push edi  +
push esi  +
call sub_1006E54  +
mov ecx [ebp+arg_8] +
mov esi ds:IsDlgButtonChecked +
xor eax eax +
cmp dword_1022584 865h +
push 860h  +
push [ebp+hDlg]  +
setz al  +
add eax 0Dh +
mov [ecx] eax +
and dword_102258C 0FFFFFFFCh +
call esi  +
test eax eax +
jz loc_100FD76  +
or dword_102258C 1 +
push 863h  +
push [ebp+hDlg]  +
call esi  +
test eax eax +
jz loc_100FD8B  +
or dword_102258C 2 +
push edi  +
push offset byte_1021B18  +
push offset unk_1021E1C  +
call sub_100F910  +
push 200h  +
push offset byte_1021918  +
push offset unk_1021C1C  +
call sub_100F910  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi 104h +
push edi  +
mov esi offset NewFileName +
push esi  +
mov ebx 84Fh +
push ebx  +
push [ebp+hDlg]  +
call ds:GetDlgItemTextA  +
push edi  +
push esi  +
call sub_100F6DA  +
cmp [ebp+arg_4] 0 +
jz loc_100FEC2  +
push esi  +
call ds:lstrlenA  +
test eax eax +
jnz loc_100FE12  +
push 457h  +
push ebx  +
push [ebp+hDlg]  +
call sub_10071A0  +
xor eax eax +
jmp loc_100FEC5  +
and dword_102258C 0FFF0FFFDh +
push 0  +
push 0  +
push 147h  +
push 867h  +
push [ebp+hDlg]  +
call ds:SendDlgItemMessageA  +
cmp eax 0FFFFFFFFh +
jz loc_100FE63  +
dec eax  +
jz loc_100FE59  +
dec eax  +
jz loc_100FE4D  +
dec eax  +
jnz loc_100FE63  +
or dword_102258C 80000h +
jmp loc_100FE63  +
or dword_102258C 40000h +
jmp loc_100FE63  +
or dword_102258C 20000h +
mov ebx ds:IsDlgButtonChecked +
push 868h  +
push [ebp+hDlg]  +
call ebx  +
test eax eax +
jz loc_100FE81  +
or dword_102258C 10000h +
push 863h  +
push [ebp+hDlg]  +
call ebx  +
test eax eax +
jz loc_100FE96  +
or dword_102258C 2 +
push edi  +
push offset byte_102160C  +
push esi  +
push [ebp+hDlg]  +
call sub_100FAA7  +
test eax eax +
jz loc_100FE0B  +
mov eax dword_102258C +
mov ecx [ebp+arg_8] +
shr eax 0Fh +
not eax  +
and eax 2 +
or eax 0Ch +
mov [ecx] eax +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx ds:GetDlgItemTextA +
push esi  +
push edi  +
mov esi 104h +
push esi  +
mov edi offset byte_1021710 +
push edi  +
push 869h  +
push dword ptr [ebp+8]  +
call ebx  +
push esi  +
push offset unk_1022060  +
push 86Ah  +
push dword ptr [ebp+8]  +
call ebx  +
push esi  +
push edi  +
call sub_100F6DA  +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_100FF8C  +
push edi  +
call ds:lstrlenA  +
test eax eax +
jnz loc_100FF2A  +
push offset aS_layout_inf  +
push esi  +
push edi  +
call sub_1006DCD  +
lea eax [ebp-4] +
push eax  +
push edi  +
push esi  +
push edi  +
call ds:GetFullPathNameA  +
test eax eax +
jnz loc_100FF47  +
push dword ptr [ebp+8]  +
call sub_100E45B  +
xor eax eax +
jmp loc_100FF8F  +
push 2Eh  +
push dword ptr [ebp-4]  +
call sub_1010BE0  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100FF6F  +
mov eax offset byte_1021814 +
sub eax [ebp-4] +
push offset a_inf  +
push eax  +
push dword ptr [ebp-4]  +
call sub_1006E54  +
jmp loc_100FF83  +
push 0FFFFFFFFh  +
push offset a_inf  +
push 0FFFFFFFFh  +
push eax  +
push 1  +
push 7Fh  +
call ds:CompareStringA  +
mov eax [ebp+10h] +
mov dword ptr [eax] 0Eh +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
ja loc_100FFB9  +
mov eax [ebp+arg_0] +
jb loc_100FFB0  +
cmp eax 0FFFFFFFFh +
ja loc_100FFB9  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_100FFC4  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_4] +
add eax ecx +
cmp eax ecx +
jb loc_100FFE7  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_100FFF2  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+lpWideCharStr] +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_8] +
xor ebx ebx +
push ebx  +
push ebx  +
push 200h  +
lea ecx [ebp+String2] +
push ecx  +
push 0FFFFFFFFh  +
push eax  +
push ebx  +
push ebx  +
mov [ebp+var_20C] esi +
mov [ebp+lpMultiByteStr] ebx +
call ds:WideCharToMultiByte  +
movzx eax word ptr [edi] +
push eax  +
push ebx  +
push esi  +
call sub_1010B40  +
add esp 0Ch +
cmp dword_101FB00 ebx +
jbe loc_10100EF  +
mov esi [ebp+lpMultiByteStr] +
imul esi esi +
push 0FFFFFFFFh  +
lea eax [ebp+String2] +
push eax  +
push 0FFFFFFFFh  +
push off_101F2E0[esi]  +
push 1  +
push 7Fh  +
call ds:CompareStringA  +
dec eax  +
dec eax  +
jnz loc_10100D1  +
lea eax dword_101F2E4[esi] +
mov [ebp+lpMultiByteStr] eax +
cmp [eax] bl +
jz loc_10100C6  +
movzx esi word ptr [edi] +
push eax  +
call ds:lstrlenA  +
lea eax [eax+eax+2] +
cmp esi eax +
jl loc_10100C6  +
shr esi 1 +
push esi  +
push [ebp+var_20C]  +
push 0FFFFFFFFh  +
push [ebp+lpMultiByteStr]  +
push ebx  +
push ebx  +
call ds:MultiByteToWideChar  +
mov [edi] ax +
mov eax dword_101FB00 +
mov [ebp+lpMultiByteStr] eax +
inc [ebp+lpMultiByteStr]  +
mov eax [ebp+lpMultiByteStr] +
cmp eax dword_101FB00 +
jb loc_101005D  +
mov esi [ebp+var_20C] +
mov ecx [ebp+var_4] +
xor eax eax +
cmp [esi] bx +
pop edi  +
setnz al  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010BBF  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 29Ch +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
push offset byte_10231E0  +
push 50h  +
mov edi offset byte_1022010 +
push edi  +
mov esi offset ValueName +
push esi  +
push offset aVersioninfo  +
push offset aOptions  +
call sub_1007436  +
test eax eax +
jbe loc_101031A  +
mov eax dword_101FB00 +
push ebx  +
xor ebx ebx +
cmp eax ebx +
jbe loc_101016A  +
mov ecx offset dword_101F2E4 +
mov [ecx] bl +
add ecx 104h +
dec eax  +
jnz loc_101015F  +
push edi  +
push 200h  +
lea eax [ebp+lpString1] +
push eax  +
push esi  +
push offset aFromfile  +
push edi  +
call sub_1007436  +
test eax eax +
jbe loc_10102B4  +
lea eax [ebp+dwHandle] +
push eax  +
lea eax [ebp+lpString1] +
push eax  +
call GetFileVersionInfoSizeA  +
mov esi eax +
cmp esi ebx +
jz loc_10102B4  +
push esi  +
push ebx  +
call ds:LocalAlloc  +
mov [ebp+hMem] eax +
cmp eax ebx +
jz loc_10102B4  +
push eax  +
push esi  +
push ebx  +
lea eax [ebp+lpString1] +
push eax  +
call GetFileVersionInfoA  +
test eax eax +
jz loc_10102A8  +
lea eax [ebp+puLen] +
push eax  +
lea eax [ebp+lpBuffer] +
push eax  +
push offset SubBlock  +
push [ebp+hMem]  +
call VerQueryValueA  +
test eax eax +
jz loc_1010201  +
mov eax [ebp+lpBuffer] +
mov eax [eax] +
jmp loc_1010206  +
mov eax 4E40409h +
mov [ebp+var_288] ebx +
cmp dword_101FB00 ebx +
jbe loc_10102A8  +
mov [ebp+var_294] eax +
shr [ebp+var_294] 10h +
movzx ebx ax +
mov esi offset dword_101F2E4 +
push dword ptr [esi-4]  +
movzx eax word ptr [ebp+var_294] +
push eax  +
push ebx  +
push offset aStringfileinfo  +
lea eax [ebp+SubBlock] +
push 80h  +
push eax  +
call sub_1006E95  +
add esp 18h +
lea eax [ebp+puLen] +
push eax  +
lea eax [ebp+lpBuffer] +
push eax  +
lea eax [ebp+SubBlock] +
push eax  +
push [ebp+hMem]  +
call VerQueryValueA  +
test eax eax +
jz loc_101028C  +
push 0FEh  +
push [ebp+lpBuffer]  +
push 100h  +
push esi  +
call sub_1006E07  +
inc [ebp+var_288]  +
mov eax [ebp+var_288] +
add esi 104h +
cmp eax dword_101FB00 +
jb loc_101022D  +
xor ebx ebx +
push [ebp+hMem]  +
call ds:LocalFree  +
mov [ebp+var_288] ebx +
cmp dword_101FB00 ebx +
jbe loc_1010314  +
mov esi offset dword_101F2E4 +
push edi  +
mov ebx 100h +
push ebx  +
lea eax [ebp+lpString1] +
push eax  +
push offset ValueName  +
push dword ptr [esi-4]  +
push edi  +
call sub_1007436  +
test eax eax +
jbe loc_10102FA  +
push 0FEh  +
lea eax [ebp+lpString1] +
push eax  +
push ebx  +
push esi  +
call sub_1006E07  +
inc [ebp+var_288]  +
mov eax [ebp+var_288] +
add esi 104h +
cmp eax dword_101FB00 +
jb loc_10102C7  +
xor eax eax +
inc eax  +
pop ebx  +
jmp loc_101031C  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1010BBF  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 428h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
and dword ptr [eax] 0 +
mov ecx [ebp+arg_8] +
and [ebp+var_408] 0 +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov [ebp+var_428] eax +
xor eax eax +
push offset aVs_fixedfilein  +
mov [ebp+var_414] esi +
mov [ebp+var_41C] ecx +
mov [ecx] ax +
call ds:lstrlenA  +
movzx ebx word ptr [esi] +
lea edi [eax+eax+3Fh] +
and edi 0FFFCh +
mov [ebp+var_40C] ebx +
test bx bx +
jz loc_1010704  +
mov eax 0FFFFh +
cmp bx ax +
jz loc_1010704  +
lea eax [ebp+var_408] +
push eax  +
push 1  +
push dword_101FB00  +
call sub_100FFCD  +
test eax eax +
jnz loc_1010704  +
mov eax [ebp+var_408] +
push 2  +
pop ecx  +
mul  ecx +
lea ecx [ebp+var_408] +
push ecx  +
push edx  +
push eax  +
call sub_100FF9B  +
test eax eax +
jnz loc_1010704  +
mov eax [ebp+var_408] +
mov ecx 100h +
mul  ecx +
lea ecx [ebp+var_408] +
push ecx  +
push edx  +
push eax  +
call sub_100FF9B  +
test eax eax +
jnz loc_1010704  +
lea eax [ebp+var_408] +
push eax  +
push [ebp+var_408]  +
movzx eax bx +
push eax  +
call sub_100FFCD  +
test eax eax +
jnz loc_1010704  +
push [ebp+var_408]  +
movzx ebx di +
lea eax [ebx+esi] +
mov [ebp+var_410] eax +
call sub_1011A29  +
push [ebp+var_408]  +
mov esi eax +
push 0  +
push esi  +
mov [ebp+var_420] esi +
call sub_1010B40  +
push ebx  +
push [ebp+var_414]  +
push esi  +
call loc_10113B0  +
sub [ebp+var_40C] edi +
add esp 1Ch +
add ebx esi +
cmp word ptr [ebp+var_40C] 0 +
mov [esi] di +
jbe loc_10106EC  +
mov edi [ebp+var_410] +
movzx eax word ptr [edi] +
push 24h  +
push edi  +
push ebx  +
mov [ebp+var_418] ebx +
mov [ebp+var_408] eax +
call loc_10113B0  +
add esp 0Ch +
xor eax eax +
push 24h  +
pop ecx  +
mov [ebx] ax +
add edi ecx +
add ebx ecx +
mov [ebp+var_410] edi +
mov eax 0FFDCh +
cmp word ptr [ebp+var_40C] cx +
jbe loc_10104C3  +
add [ebp+var_40C] eax +
jmp loc_10104CA  +
and [ebp+var_40C] 0 +
cmp word ptr [ebp+var_408] cx +
jbe loc_10104DB  +
add [ebp+var_408] eax +
jmp loc_10104E2  +
and [ebp+var_408] 0 +
add [esi] cx +
mov eax [ebp+var_418] +
add [eax] cx +
cmp word ptr [ebp+var_408] 0 +
jbe loc_10106EC  +
movzx eax word ptr [edi] +
push 6  +
mov esi edi +
pop ecx  +
mov edi ebx +
movs   +
mov edi [ebp+var_410] +
xor ecx ecx +
mov [ebx] cx +
push 18h  +
pop ecx  +
mov edx ebx +
add edi ecx +
add ebx ecx +
mov [ebp+var_424] edx +
cmp word ptr [ebp+var_40C] cx +
jbe loc_1010537  +
add [ebp+var_40C] 0FFE8h +
jmp loc_101053E  +
and [ebp+var_40C] 0 +
cmp word ptr [ebp+var_408] cx +
jbe loc_1010553  +
add [ebp+var_408] 0FFE8h +
jmp loc_101055A  +
and [ebp+var_408] 0 +
cmp ax cx +
jbe loc_101056C  +
add eax 0FFE8h +
mov [ebp+var_410] eax +
jmp loc_1010573  +
and [ebp+var_410] 0 +
mov esi [ebp+var_420] +
add [esi] cx +
mov eax [ebp+var_418] +
add [eax] cx +
add [edx] cx +
jmp loc_10106AE  +
movzx eax word ptr [edi] +
add eax 3 +
and eax 0FFFFFFFCh +
push eax  +
push edi  +
push ebx  +
call loc_10113B0  +
add esp 0Ch +
cmp word ptr [edi+4] 1 +
jnz loc_1010620  +
lea eax [ebp+var_414] +
push eax  +
lea eax [ebp+var_404] +
push eax  +
lea eax [edi+6] +
push eax  +
mov [ebp+var_414] 400h +
call sub_100FFFB  +
test eax eax +
jz loc_1010620  +
mov eax [ebp+var_414] +
mov [ebx+2] ax +
movzx ecx word ptr [edi] +
lea eax [eax+eax+3] +
and eax 0FFFCh +
push eax  +
lea eax [ebp+var_404] +
push eax  +
movzx eax word ptr [edi+2] +
add ecx 3 +
lea eax [eax+eax+3] +
and ecx 0FFFFFFFCh +
and eax 0FFFFFFFCh +
sub ecx eax +
add ecx ebx +
push ecx  +
call loc_10113B0  +
mov ax [ebx+2] +
mov cx [edi+2] +
add ax ax +
movzx eax ax +
add cx cx +
sub ax cx +
add esp 0Ch +
add [ebx] ax +
mov ax [ebx] +
add ax 3 +
mov edx 0FFFCh +
mov ecx edx +
and ax cx +
mov ecx [ebp+var_418] +
movzx eax ax +
add [esi] ax +
add [ecx] ax +
mov ecx [ebp+var_424] +
add [ecx] ax +
mov ax [edi] +
add ax 3 +
and ax dx +
movzx eax ax +
movzx ecx ax +
add edi ecx +
cmp word ptr [ebp+var_40C] ax +
jbe loc_101066C  +
sub [ebp+var_40C] ecx +
jmp loc_1010673  +
and [ebp+var_40C] 0 +
cmp word ptr [ebp+var_408] ax +
jbe loc_1010684  +
sub [ebp+var_408] ecx +
jmp loc_101068B  +
and [ebp+var_408] 0 +
cmp word ptr [ebp+var_410] ax +
jbe loc_101069C  +
sub [ebp+var_410] ecx +
jmp loc_10106A3  +
and [ebp+var_410] 0 +
movzx eax word ptr [ebx] +
add eax 3 +
and eax 0FFFFFFFCh +
add ebx eax +
cmp word ptr [ebp+var_410] 0 +
ja loc_101058D  +
mov eax [ebp+var_40C] +
test ax ax +
jbe loc_10106D8  +
add [esi] ax +
movzx eax ax +
push eax  +
push edi  +
push ebx  +
call loc_10113B0  +
add esp 0Ch +
mov ax [esi] +
mov ecx [ebp+var_41C] +
mov [ecx] ax +
mov eax [ebp+var_428] +
mov [eax] esi +
mov eax [ebp+var_41C] +
cmp word ptr [eax] 0 +
jnz loc_10106FF  +
push esi  +
call sub_1011942  +
pop ecx  +
xor eax eax +
inc eax  +
jmp loc_1010706  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010BBF  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
call sub_101010D  +
test eax eax +
jz loc_10107E6  +
push 3  +
xor ebx ebx +
push ebx  +
push [ebp+lpLibFileName]  +
call ds:LoadLibraryExA  +
mov edi eax +
cmp edi ebx +
jnz loc_101074D  +
xor eax eax +
jmp loc_10107E9  +
push ebx  +
push 1  +
push 10h  +
push edi  +
call ds:FindResourceExA  +
mov esi eax +
cmp esi ebx +
jnz loc_1010768  +
push edi  +
call ds:FreeLibrary  +
jmp loc_1010746  +
push esi  +
push edi  +
call ds:LoadResource  +
cmp eax ebx +
jnz loc_101077D  +
push esi  +
call ds:FreeResource  +
jmp loc_101075F  +
push eax  +
call ds:LockResource  +
cmp eax ebx +
jz loc_1010774  +
lea ecx [ebp+lpLibFileName] +
push ecx  +
lea ecx [ebp+var_4] +
push ecx  +
push eax  +
call sub_101032F  +
push esi  +
call ds:FreeResource  +
push edi  +
call ds:FreeLibrary  +
mov esi [ebp+var_4] +
cmp esi ebx +
jz loc_10107E6  +
movzx eax word ptr [ebp+lpLibFileName] +
push eax  +
push esi  +
push ebx  +
push 1  +
push 10h  +
push [ebp+hMem]  +
call sub_100BDC2  +
push esi  +
test eax eax +
jnz loc_10107E0  +
call sub_1011942  +
pop ecx  +
push ebx  +
push 10h  +
push ebx  +
push ebx  +
push 45Dh  +
push [ebp+arg_0]  +
call sub_1007006  +
jmp loc_1010746  +
call sub_1011942  +
pop ecx  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_10225B4 1 +
jnz loc_1010808  +
call sub_101224F  +
push [ebp+arg_0]  +
call sub_10120C5  +
push 0FFh  +
call loc_1011DFA  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jnz loc_1010867  +
mov eax ds:100003Ch +
cmp dword ptr [eax+1000000h] 4550h +
jnz loc_1010867  +
mov ecx 10Bh +
cmp [eax+1000018h] cx +
jnz loc_1010867  +
cmp dword ptr [eax+1000074h] 0Eh +
jbe loc_1010867  +
xor ecx ecx +
cmp [eax+10000E8h] ecx +
setnz cl  +
mov eax ecx +
retn   +
xor eax eax +
retn   +
***
mov eax [ebp-14h] +
mov esp [ebp-18h] +
mov eax [ebp-0BCh] +
mov [ebp-0B4h] eax +
cmp dword ptr [ebp-0B8h] 0 +
jnz loc_1010A1A  +
push eax  +
call sub_101203B  +
call sub_101206A  +
***
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
***
mov eax 0FFh +
call sub_1013388  +
retn   +
***
call sub_1013531  +
jmp loc_101086F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
xor ebx ebx +
cmp [ebp+arg_8] ebx +
jnz loc_1010A8B  +
call sub_1014511  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov dword ptr [eax] 16h +
call sub_10144BA  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_1010B0B  +
mov ecx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
cmp ecx ebx +
jz loc_1010AB7  +
cmp esi ebx +
jnz loc_1010AB7  +
call sub_1014511  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov dword ptr [eax] 16h +
call sub_10144BA  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_1010B0A  +
mov eax 7FFFFFFFh +
mov [ebp+var_1C] eax +
cmp ecx eax +
ja loc_1010AC6  +
mov [ebp+var_1C] ecx +
push edi  +
push [ebp+arg_10]  +
lea eax [ebp+var_20] +
push [ebp+arg_C]  +
mov [ebp+var_14] 42h +
push [ebp+arg_8]  +
mov [ebp+var_18] esi +
push eax  +
mov [ebp+var_20] esi +
call sub_10137CE  +
add esp 10h +
mov edi eax +
cmp esi ebx +
jz loc_1010B09  +
dec [ebp+var_1C]  +
js loc_1010AFB  +
mov eax [ebp+var_20] +
mov [eax] bl +
jmp loc_1010B07  +
lea eax [ebp+var_20] +
push eax  +
push ebx  +
call sub_10135C7  +
pop ecx  +
pop ecx  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1010A5B  +
add esp 14h +
pop ebp  +
retn   +
***
mov edx [esp+arg_8] +
mov ecx [esp+arg_0] +
test edx edx +
jz loc_1010BB5  +
xor eax eax +
mov al [esp+arg_4] +
test al al +
jnz loc_1010B6C  +
cmp edx 100h +
jb loc_1010B6C  +
cmp dword_102447C 0 +
jz loc_1010B6C  +
jmp sub_10145C5  +
push edi  +
mov edi ecx +
cmp edx 4 +
jb loc_1010BA5  +
neg ecx  +
and ecx 3 +
jz loc_1010B87  +
sub edx ecx +
mov [edi] al +
add edi 1 +
sub ecx 1 +
jnz loc_1010B7D  +
mov ecx eax +
shl eax 8 +
add eax ecx +
mov ecx eax +
shl eax 10h +
add eax ecx +
mov ecx edx +
and edx 3 +
shr ecx 2 +
jz loc_1010BA5  +
stos   +
test edx edx +
jz loc_1010BAF  +
mov [edi] al +
add edi 1 +
sub edx 1 +
jnz loc_1010BA5  +
mov eax [esp+4+arg_0] +
pop edi  +
retn   +
mov eax [esp+arg_0] +
retn   +
***
cmp ecx dword_101FB10 +
jnz loc_1010BCA  +
retn 0  +
jmp loc_1014727  +
***
lea eax [edx-1] +
pop ebx  +
retn   +
***
xor eax eax +
mov al [esp+8] +
push ebx  +
mov ebx eax +
shl eax 8 +
mov edx dword ptr [esp+arg_4] +
test edx 3 +
jz loc_1010C0D  +
mov cl [edx] +
add edx 1 +
cmp cl bl +
jz loc_1010BD0  +
test cl cl +
jz loc_1010C56  +
test edx 3 +
jnz loc_1010BF8  +
or ebx eax +
push edi  +
mov eax ebx +
shl ebx 10h +
push esi  +
or ebx eax +
mov ecx [edx] +
mov edi 7EFEFEFFh +
mov eax ecx +
mov esi edi +
xor ecx ebx +
add esi eax +
add edi ecx +
xor ecx 0FFFFFFFFh +
xor eax 0FFFFFFFFh +
xor ecx edi +
xor eax esi +
add edx 4 +
and ecx 81010100h +
jnz loc_1010C5A  +
and eax 81010100h +
jz loc_1010C18  +
and eax 1010100h +
jnz loc_1010C54  +
and esi 80000000h +
jnz loc_1010C18  +
pop esi  +
pop edi  +
pop ebx  +
xor eax eax +
retn   +
mov eax [edx-4] +
cmp al bl +
jz loc_1010C97  +
test al al +
jz loc_1010C54  +
cmp ah bl +
jz loc_1010C90  +
test ah ah +
jz loc_1010C54  +
shr eax 10h +
cmp al bl +
jz loc_1010C89  +
test al al +
jz loc_1010C54  +
cmp ah bl +
jz loc_1010C82  +
test ah ah +
jz loc_1010C54  +
jmp loc_1010C18  +
pop esi  +
pop edi  +
lea eax [edx-1] +
pop ebx  +
retn   +
lea eax [edx-2] +
pop esi  +
pop edi  +
pop ebx  +
retn   +
lea eax [edx-3] +
pop esi  +
pop edi  +
pop ebx  +
retn   +
lea eax [edx-4] +
pop esi  +
pop edi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov byte ptr [esi+0Ch] 0 +
test eax eax +
jnz loc_1010D33  +
call sub_1012E63  +
mov [esi+8] eax +
test eax eax +
jz loc_1010D25  +
mov ecx [eax+6Ch] +
mov [esi] ecx +
mov ecx [eax+68h] +
mov [esi+4] ecx +
mov ecx [esi] +
cmp ecx off_1020418 +
jz loc_1010CED  +
test byte ptr [eax+70h] 2 +
jnz loc_1010CED  +
test byte_1020334 1 +
jz loc_1010CED  +
call sub_10151B5  +
mov [esi] eax +
mov eax [esi+4] +
cmp eax lpAddend +
jz loc_1010D12  +
mov eax [esi+8] +
test byte ptr [eax+70h] 2 +
jnz loc_1010D12  +
test byte_1020334 1 +
jz loc_1010D12  +
call sub_1014A43  +
mov [esi+4] eax +
mov eax [esi+8] +
test byte ptr [eax+70h] 2 +
jnz loc_1010D3D  +
or dword ptr [eax+70h] 2 +
mov byte ptr [esi+0Ch] 1 +
jmp loc_1010D3D  +
mov eax off_1020418 +
mov [esi] eax +
mov eax lpAddend +
jmp loc_1010D3A  +
mov ecx [eax] +
mov [esi] ecx +
mov eax [eax+4] +
mov [esi+4] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
push edi  +
push [ebp+arg_0]  +
lea ecx [ebp+var_14] +
call sub_1010CA3  +
mov eax [ebp+arg_8] +
mov esi [ebp+arg_4] +
xor edi edi +
cmp eax edi +
jz loc_1010D6C  +
mov [eax] esi +
cmp esi edi +
jnz loc_1010D9C  +
call sub_1014511  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
mov dword ptr [eax] 16h +
call sub_10144BA  +
add esp 14h +
cmp [ebp+var_8] 0 +
jz loc_1010D95  +
mov eax [ebp+var_C] +
and dword ptr [eax+70h] 0FFFFFFFDh +
xor eax eax +
jmp loc_1010F80  +
cmp [ebp+arg_C] edi +
jz loc_1010DAD  +
cmp [ebp+arg_C] 2 +
jl loc_1010D70  +
cmp [ebp+arg_C] 24h +
jg loc_1010D70  +
mov ecx [ebp+var_14] +
push ebx  +
mov bl [esi] +
mov [ebp+var_4] edi +
lea edi [esi+1] +
cmp dword ptr [ecx+0ACh] 1 +
jle loc_1010DD9  +
lea eax [ebp+var_14] +
push eax  +
movzx eax bl +
push 8  +
push eax  +
call sub_1015235  +
mov ecx [ebp+var_14] +
add esp 0Ch +
jmp loc_1010DE9  +
mov edx [ecx+0C8h] +
movzx eax bl +
movzx eax word ptr [edx+eax*2] +
and eax 8 +
test eax eax +
jz loc_1010DF2  +
mov bl [edi] +
inc edi  +
jmp loc_1010DB9  +
cmp bl 2Dh +
jnz loc_1010DFD  +
or [ebp+arg_10] 2 +
jmp loc_1010E02  +
cmp bl 2Bh +
jnz loc_1010E05  +
mov bl [edi] +
inc edi  +
mov eax [ebp+arg_C] +
test eax eax +
jl loc_1010F67  +
cmp eax 1 +
jz loc_1010F67  +
cmp eax 24h +
jg loc_1010F67  +
test eax eax +
jnz loc_1010E50  +
cmp bl 30h +
jz loc_1010E34  +
mov [ebp+arg_C] 0Ah +
jmp loc_1010E68  +
mov al [edi] +
cmp al 78h +
jz loc_1010E47  +
cmp al 58h +
jz loc_1010E47  +
mov [ebp+arg_C] 8 +
jmp loc_1010E68  +
mov [ebp+arg_C] 10h +
jmp loc_1010E5A  +
cmp eax 10h +
jnz loc_1010E68  +
cmp bl 30h +
jnz loc_1010E68  +
mov al [edi] +
cmp al 78h +
jz loc_1010E64  +
cmp al 58h +
jnz loc_1010E68  +
inc edi  +
mov bl [edi] +
inc edi  +
mov esi [ecx+0C8h] +
mov eax 0FFFFFFFFh +
xor edx edx +
div  [ebp+arg_C] +
movzx ecx bl +
movzx ecx word ptr [esi+ecx*2] +
test cl 4 +
jz loc_1010E8C  +
movsx ecx bl +
sub ecx 30h +
jmp loc_1010EA7  +
test ecx 103h +
jz loc_1010ECB  +
mov cl bl +
sub cl 61h +
cmp cl 19h +
movsx ecx bl +
ja loc_1010EA4  +
sub ecx 20h +
add ecx 0FFFFFFC9h +
cmp ecx [ebp+arg_C] +
jnb loc_1010ECB  +
or [ebp+arg_10] 8 +
cmp [ebp+arg_14] 0 +
jnz loc_1010EE2  +
cmp [ebp+var_4] eax +
jb loc_1010EE2  +
jnz loc_1010EC1  +
cmp ecx edx +
jbe loc_1010EE2  +
or [ebp+arg_10] 4 +
cmp [ebp+arg_8] 0 +
jnz loc_1010EEE  +
mov eax [ebp+arg_10] +
dec edi  +
test al 8 +
jnz loc_1010EF3  +
cmp [ebp+arg_8] 0 +
jz loc_1010EDC  +
mov edi [ebp+arg_4] +
and [ebp+var_4] 0 +
jmp loc_1010F43  +
mov ebx [ebp+var_4] +
imul ebx [ebp+arg_C] +
add ebx ecx +
mov [ebp+var_4] ebx +
mov bl [edi] +
inc edi  +
jmp loc_1010E78  +
mov esi 7FFFFFFFh +
test al 4 +
jnz loc_1010F17  +
test al 1 +
jnz loc_1010F43  +
and eax 2 +
jz loc_1010F0E  +
cmp [ebp+var_4] 80000000h +
ja loc_1010F17  +
test eax eax +
jnz loc_1010F43  +
cmp [ebp+var_4] esi +
jbe loc_1010F43  +
cmp [ebp+arg_14] 0 +
jnz loc_1010F43  +
call sub_1014511  +
test byte ptr [ebp+arg_10] 1 +
mov dword ptr [eax] 22h +
jz loc_1010F34  +
or [ebp+var_4] 0FFFFFFFFh +
jmp loc_1010F43  +
test byte ptr [ebp+arg_10] 2 +
push 0  +
pop eax  +
setnz al  +
add eax esi +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_1010F4C  +
mov [eax] edi +
test byte ptr [ebp+arg_10] 2 +
jz loc_1010F55  +
neg [ebp+var_4]  +
cmp [ebp+var_8] 0 +
jz loc_1010F62  +
mov eax [ebp+var_C] +
and dword ptr [eax+70h] 0FFFFFFFDh +
mov eax [ebp+var_4] +
jmp loc_1010F7F  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_1010F70  +
mov [eax] esi +
cmp [ebp+var_8] 0 +
jz loc_1010F7D  +
mov eax [ebp+var_C] +
and dword ptr [eax+70h] 0FFFFFFFDh +
xor eax eax +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
xor eax eax +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
cmp dword_1022D70 eax +
jnz loc_1010FAC  +
push offset off_1020420  +
jmp loc_1010FAD  +
push eax  +
call sub_1010D49  +
add esp 18h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1010D49  +
add esp 18h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_1022D70 0 +
push 1  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
jnz loc_1011001  +
push offset off_1020420  +
jmp loc_1011003  +
push 0  +
call sub_1010FBC  +
add esp 14h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi eax +
xor ebx ebx +
push edi  +
cmp esi ebx +
jz loc_10110C9  +
cmp [ebp+arg_4] ebx +
jbe loc_10110C9  +
xor eax eax +
cmp [ebp+arg_C] ebx +
mov [esi] bl +
setnz al  +
inc eax  +
cmp [ebp+arg_4] eax +
ja loc_101104C  +
call sub_1014511  +
push 22h  +
jmp loc_10110D0  +
mov eax [ebp+arg_8] +
add eax 0FFFFFFFEh +
cmp eax 22h +
ja loc_10110C9  +
mov [ebp+var_4] ebx +
mov ecx esi +
cmp [ebp+arg_C] ebx +
jz loc_1011071  +
neg [ebp+arg_0]  +
mov byte ptr [esi] 2Dh +
lea ecx [esi+1] +
mov [ebp+var_4] 1 +
mov edi ecx +
mov eax [ebp+arg_0] +
xor edx edx +
div  [ebp+arg_8] +
mov [ebp+arg_0] eax +
cmp edx 9 +
jbe loc_1011088  +
add dl 57h +
jmp loc_101108B  +
add dl 30h +
mov eax [ebp+var_4] +
mov [ecx] dl +
inc ecx  +
inc eax  +
mov [ebp+var_4] eax +
cmp [ebp+arg_0] ebx +
jbe loc_101109F  +
cmp eax [ebp+arg_4] +
jb loc_1011073  +
cmp eax [ebp+arg_4] +
jb loc_10110B4  +
mov [esi] bl +
call sub_1014511  +
push 22h  +
pop ecx  +
mov [eax] ecx +
mov esi ecx +
jmp loc_10110D3  +
mov [ecx] bl +
dec ecx  +
mov dl [edi] +
mov al [ecx] +
mov [ecx] dl +
dec ecx  +
mov [edi] al +
inc edi  +
cmp edi ecx +
jb loc_10110B7  +
xor eax eax +
jmp loc_10110E2  +
call sub_1014511  +
push 16h  +
pop esi  +
mov [eax] esi +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call sub_10144BA  +
add esp 14h +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_C] 0Ah +
jnz loc_1011105  +
cmp [ebp+arg_0] 0 +
jge loc_1011105  +
push 1  +
push 0Ah  +
jmp loc_101110A  +
push 0  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
push [ebp+arg_0]  +
call sub_1011012  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push [ebp+arg_4]  +
lea ecx [ebp+var_18] +
call sub_1010CA3  +
mov ebx [ebp+arg_0] +
cmp ebx 100h +
jnb loc_1011192  +
mov ecx [ebp+var_18] +
cmp dword ptr [ecx+0ACh] 1 +
jle loc_101115E  +
lea eax [ebp+var_18] +
push eax  +
push 2  +
push ebx  +
call sub_1015235  +
mov ecx [ebp+var_18] +
add esp 0Ch +
jmp loc_101116B  +
mov eax [ecx+0C8h] +
movzx eax word ptr [eax+ebx*2] +
and eax 2 +
test eax eax +
jz loc_101117E  +
mov eax [ecx+0D0h] +
movzx eax byte ptr [eax+ebx] +
jmp loc_1011225  +
cmp [ebp+var_C] 0 +
jz loc_101118B  +
mov eax [ebp+var_10] +
and dword ptr [eax+70h] 0FFFFFFFDh +
mov eax ebx +
jmp loc_1011232  +
mov eax [ebp+var_18] +
cmp dword ptr [eax+0ACh] 1 +
jle loc_10111CF  +
mov [ebp+arg_0] ebx +
sar [ebp+arg_0] 8 +
lea eax [ebp+var_18] +
push eax  +
mov eax [ebp+arg_0] +
and eax 0FFh +
push eax  +
call sub_10158DE  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10111CF  +
mov al byte ptr [ebp+arg_0] +
push 2  +
mov [ebp+var_4] al +
mov [ebp-3] bl +
mov [ebp+var_2] 0 +
pop ecx  +
jmp loc_10111E4  +
call sub_1014511  +
mov dword ptr [eax] 2Ah +
xor ecx ecx +
mov [ebp+var_4] bl +
mov byte ptr [ebp-3] 0 +
inc ecx  +
mov eax [ebp+var_18] +
push 1  +
push dword ptr [eax+4]  +
lea edx [ebp+var_8] +
push 3  +
push edx  +
push ecx  +
lea ecx [ebp+var_4] +
push ecx  +
push 200h  +
push dword ptr [eax+14h]  +
lea eax [ebp+var_18] +
push eax  +
call sub_1015893  +
add esp 24h +
test eax eax +
jz loc_101117E  +
cmp eax 1 +
movzx eax byte ptr [ebp+var_8] +
jz loc_1011225  +
movzx ecx byte ptr [ebp+var_8+1] +
shl eax 8 +
or eax ecx +
cmp [ebp+var_C] 0 +
jz loc_1011232  +
mov ecx [ebp+var_10] +
and dword ptr [ecx+70h] 0FFFFFFFDh +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_1022D70 0 +
jnz loc_1011258  +
mov eax [ebp+arg_0] +
lea ecx [eax-61h] +
cmp ecx 19h +
ja loc_1011264  +
add eax 0FFFFFFE0h +
pop ebp  +
retn   +
push 0  +
push [ebp+arg_0]  +
call sub_101111F  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov [ebp+var_2C] eax +
call sub_1012EE4  +
push 8  +
pop ecx  +
mov [ebp+var_28] eax +
xor eax eax +
lea edi [ebp+var_24] +
push 7  +
stos   +
pop edi  +
mov dl [esi] +
movzx ecx dl +
mov eax ecx +
and ecx edi +
mov bl 1 +
shl bl cl +
shr eax 3 +
lea eax [ebp+eax+var_24] +
or [eax] bl +
inc esi  +
test dl dl +
jnz loc_101129E  +
mov edx [ebp+var_2C] +
test edx edx +
jnz loc_10112CD  +
mov eax [ebp+var_28] +
mov edx [eax+18h] +
jmp loc_10112CD  +
test al al +
jz loc_10112E6  +
inc edx  +
mov al [edx] +
movzx esi al +
xor ebx ebx +
mov ecx esi +
and ecx edi +
inc ebx  +
shl ebx cl +
shr esi 3 +
mov cl byte ptr [ebp+esi+var_24] +
test bl cl +
jnz loc_10112C8  +
mov ebx edx +
jmp loc_1011302  +
movzx esi byte ptr [edx] +
xor eax eax +
mov ecx esi +
and ecx edi +
inc eax  +
shl eax cl +
shr esi 3 +
mov cl byte ptr [ebp+esi+var_24] +
test al cl +
jnz loc_1011309  +
inc edx  +
cmp byte ptr [edx] 0 +
jnz loc_10112EA  +
jmp loc_101130D  +
mov byte ptr [edx] 0 +
inc edx  +
mov eax [ebp+var_28] +
mov ecx [ebp+var_4] +
mov [eax+18h] edx +
mov eax ebx +
sub eax edx +
neg eax  +
sbb eax eax +
pop edi  +
and eax ebx +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010BBF  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
jz loc_1011342  +
mov byte ptr [ecx] 2Dh +
inc ecx  +
neg eax  +
push esi  +
mov esi ecx +
xor edx edx +
div  [ebp+arg_0] +
cmp edx 9 +
jbe loc_1011354  +
add dl 57h +
jmp loc_1011357  +
add dl 30h +
mov [ecx] dl +
inc ecx  +
test eax eax +
ja loc_1011345  +
mov byte ptr [ecx] 0 +
dec ecx  +
mov dl [esi] +
mov al [ecx] +
mov [ecx] dl +
dec ecx  +
mov [esi] al +
inc esi  +
cmp esi ecx +
jb loc_1011362  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 0Ah +
mov eax [ebp+arg_0] +
jnz loc_1011392  +
test eax eax +
jge loc_1011392  +
push 1  +
push 0Ah  +
jmp loc_1011397  +
push 0  +
push [ebp+arg_8]  +
mov ecx [ebp+arg_4] +
call sub_1011331  +
mov eax [ebp+arg_4] +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
push edi  +
push esi  +
mov esi [ebp+0Ch] +
mov ecx [ebp+10h] +
mov edi [ebp+8] +
mov eax ecx +
mov edx ecx +
add eax esi +
cmp edi esi +
jbe loc_10113D0  +
cmp edi eax +
jb loc_1011574  +
cmp ecx 100h +
jb loc_10113F7  +
cmp dword_102447C 0 +
jz loc_10113F7  +
push edi  +
push esi  +
and edi 0Fh +
and esi 0Fh +
cmp edi esi +
pop esi  +
pop edi  +
jnz loc_10113F7  +
pop esi  +
pop edi  +
pop ebp  +
jmp sub_10159BF  +
***
test edi 3 +
jnz loc_1011414  +
shr ecx 2 +
and edx 3 +
cmp ecx 8 +
jb loc_1011434  +
movs   +
jmp ds:off_1011524[edx*4]  +
mov eax edi +
mov edx 3 +
sub ecx 4 +
jb loc_101142C  +
and eax 3 +
add ecx eax +
jmp dword ptr ds:(loc_1011434+4)[eax*4]  +
***
jmp ds:dword_1011534[ecx*4]  +
***
jmp ds:off_10114B8[ecx*4]  +
and edx ecx +
mov al [esi] +
mov [edi] al +
mov al [esi+1] +
mov [edi+1] al +
mov al [esi+2] +
shr ecx 2 +
mov [edi+2] al +
add esi 3 +
add edi 3 +
cmp ecx 8 +
jb loc_1011434  +
movs   +
jmp ds:off_1011524[edx*4]  +
***
and edx ecx +
mov al [esi] +
mov [edi] al +
mov al [esi+1] +
shr ecx 2 +
mov [edi+1] al +
add esi 2 +
add edi 2 +
cmp ecx 8 +
jb loc_1011434  +
movs   +
jmp ds:off_1011524[edx*4]  +
***
and edx ecx +
mov al [esi] +
mov [edi] al +
add esi 1 +
shr ecx 2 +
add edi 1 +
cmp ecx 8 +
jb loc_1011434  +
movs   +
jmp ds:off_1011524[edx*4]  +
***
mov eax [esi+ecx*4-1Ch] +
mov [edi+ecx*4-1Ch] eax +
mov eax [esi+ecx*4-18h] +
mov [edi+ecx*4-18h] eax +
mov eax [esi+ecx*4-14h] +
mov [edi+ecx*4-14h] eax +
mov eax [esi+ecx*4-10h] +
mov [edi+ecx*4-10h] eax +
mov eax [esi+ecx*4-0Ch] +
mov [edi+ecx*4-0Ch] eax +
mov eax [esi+ecx*4-8] +
mov [edi+ecx*4-8] eax +
mov eax [esi+ecx*4-4] +
mov [edi+ecx*4-4] eax +
lea eax ds:0[ecx*4] +
add esi eax +
add edi eax +
jmp ds:off_1011524[edx*4]  +
***
pop edi  +
leave   +
retn   +
***
mov al [esi] +
mov [edi] al +
mov eax [ebp+8] +
pop esi  +
pop edi  +
leave   +
retn   +
***
mov al [esi] +
mov [edi] al +
mov al [esi+1] +
mov [edi+1] al +
mov eax [ebp+8] +
pop esi  +
pop edi  +
leave   +
retn   +
***
mov al [esi] +
mov [edi] al +
mov al [esi+1] +
mov [edi+1] al +
mov al [esi+2] +
mov [edi+2] al +
mov eax [ebp+8] +
pop esi  +
pop edi  +
leave   +
retn   +
***
lea esi [ecx+esi-4] +
lea edi [ecx+edi-4] +
test edi 3 +
jnz loc_10115A8  +
shr ecx 2 +
and edx 3 +
cmp ecx 8 +
jb loc_101159C  +
std   +
movs   +
cld   +
jmp ds:off_10116C0[edx*4]  +
neg ecx  +
jmp ds:off_1011670[ecx*4]  +
mov eax edi +
mov edx 3 +
cmp ecx 4 +
jb loc_10115C0  +
and eax 3 +
sub ecx eax +
jmp dword ptr ds:(loc_10115C0+4)[eax*4]  +
***
jmp ds:off_10116C0[ecx*4]  +
mov al [esi+3] +
and edx ecx +
mov [edi+3] al +
sub esi 1 +
shr ecx 2 +
sub edi 1 +
cmp ecx 8 +
jb loc_101159C  +
std   +
movs   +
cld   +
jmp ds:off_10116C0[edx*4]  +
mov al [esi+3] +
and edx ecx +
mov [edi+3] al +
mov al [esi+2] +
shr ecx 2 +
mov [edi+2] al +
sub esi 2 +
sub edi 2 +
cmp ecx 8 +
jb loc_101159C  +
std   +
movs   +
cld   +
jmp ds:off_10116C0[edx*4]  +
mov al [esi+3] +
and edx ecx +
mov [edi+3] al +
mov al [esi+2] +
mov [edi+2] al +
mov al [esi+1] +
shr ecx 2 +
mov [edi+1] al +
sub esi 3 +
sub edi 3 +
cmp ecx 8 +
jb loc_101159C  +
std   +
movs   +
cld   +
jmp ds:off_10116C0[edx*4]  +
mov eax [esi+ecx*4+1Ch] +
mov [edi+ecx*4+1Ch] eax +
mov eax [esi+ecx*4+18h] +
mov [edi+ecx*4+18h] eax +
mov eax [esi+ecx*4+14h] +
mov [edi+ecx*4+14h] eax +
mov eax [esi+ecx*4+10h] +
mov [edi+ecx*4+10h] eax +
mov eax [esi+ecx*4+0Ch] +
mov [edi+ecx*4+0Ch] eax +
mov eax [esi+ecx*4+8] +
mov [edi+ecx*4+8] eax +
mov eax [esi+ecx*4+4] +
mov [edi+ecx*4+4] eax +
lea eax ds:0[ecx*4] +
add esi eax +
add edi eax +
jmp ds:off_10116C0[edx*4]  +
mov eax [ebp+8] +
pop esi  +
pop edi  +
leave   +
retn   +
***
mov al [esi+3] +
mov [edi+3] al +
mov eax [ebp+8] +
pop esi  +
pop edi  +
leave   +
retn   +
***
mov al [esi+3] +
mov [edi+3] al +
mov al [esi+2] +
mov [edi+2] al +
mov eax [ebp+8] +
pop esi  +
pop edi  +
leave   +
retn   +
***
mov al [esi+3] +
mov [edi+3] al +
mov al [esi+2] +
mov [edi+2] al +
mov al [esi+1] +
mov [edi+1] al +
mov eax [ebp+8] +
pop esi  +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
xor edi edi +
mov [ebp+var_4] edi +
cmp ebx edi +
jz loc_10117D0  +
mov ecx [ebp+arg_4] +
cmp ecx edi +
jnz loc_1011745  +
cmp [ebp+arg_8] edi +
jnz loc_10117D0  +
jmp loc_101174E  +
cmp [ebp+arg_8] edi +
jz loc_10117D0  +
cmp [ebp+arg_C] edi +
jnz loc_101175A  +
cmp [ebp+arg_10] edi +
jnz loc_10117D0  +
jmp loc_101175F  +
cmp [ebp+arg_10] edi +
jz loc_10117D0  +
cmp [ebp+arg_14] edi +
jnz loc_101176B  +
cmp [ebp+arg_18] edi +
jnz loc_10117D0  +
jmp loc_1011770  +
cmp [ebp+arg_18] edi +
jz loc_10117D0  +
cmp [ebp+arg_1C] edi +
jnz loc_10117CB  +
cmp [ebp+arg_20] edi +
jnz loc_10117D0  +
cmp byte ptr [ebx] 5Ch +
jnz loc_1011794  +
cmp byte ptr [ebx+1] 5Ch +
jnz loc_1011794  +
cmp byte ptr [ebx+2] 3Fh +
jnz loc_1011794  +
cmp byte ptr [ebx+3] 5Ch +
jnz loc_1011794  +
add ebx 4 +
xor eax eax +
inc eax  +
mov esi ebx +
cmp byte ptr [esi] 0 +
jz loc_10117A4  +
dec eax  +
inc esi  +
cmp eax edi +
ja loc_1011799  +
cmp byte ptr [esi] 3Ah +
jnz loc_10117DC  +
cmp ecx edi +
jz loc_10117C6  +
cmp [ebp+arg_8] 3 +
jb loc_10118B3  +
push 2  +
push ebx  +
push [ebp+arg_8]  +
push ecx  +
call sub_1015B1C  +
add esp 10h +
lea ebx [esi+1] +
jmp loc_10117E3  +
cmp [ebp+arg_20] edi +
jnz loc_101177A  +
mov [ebp+var_4] 1 +
jmp loc_10118B3  +
cmp ecx edi +
jz loc_10117E3  +
mov byte ptr [ecx] 0 +
and [ebp+arg_0] edi +
cmp byte ptr [ebx] 0 +
mov esi ebx +
jz loc_1011845  +
movsx eax byte ptr [esi] +
push eax  +
call sub_1015AFF  +
pop ecx  +
test eax eax +
jz loc_10117FE  +
inc esi  +
jmp loc_1011814  +
mov al [esi] +
cmp al 2Fh +
jz loc_1011811  +
cmp al 5Ch +
jz loc_1011811  +
cmp al 2Eh +
jnz loc_1011814  +
mov [ebp+arg_0] esi +
jmp loc_1011814  +
lea edi [esi+1] +
inc esi  +
cmp byte ptr [esi] 0 +
jnz loc_10117ED  +
test edi edi +
jz loc_1011845  +
cmp [ebp+arg_C] 0 +
jz loc_1011841  +
mov eax edi +
sub eax ebx +
cmp [ebp+arg_10] eax +
jbe loc_10118B1  +
push eax  +
push ebx  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
call sub_1015B1C  +
add esp 10h +
mov ebx edi +
jmp loc_101184F  +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_101184F  +
mov byte ptr [eax] 0 +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_10118A0  +
cmp eax ebx +
jb loc_10118A0  +
cmp [ebp+arg_14] 0 +
jz loc_1011877  +
sub eax ebx +
cmp [ebp+arg_18] eax +
jbe loc_10118B1  +
push eax  +
push ebx  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
call sub_1015B1C  +
add esp 10h +
cmp [ebp+arg_1C] 0 +
jz loc_1011936  +
sub esi [ebp+arg_0] +
cmp [ebp+arg_20] esi +
jbe loc_10118B1  +
push esi  +
push [ebp+arg_0]  +
push [ebp+arg_20]  +
push [ebp+arg_1C]  +
call sub_1015B1C  +
add esp 10h +
jmp loc_1011936  +
cmp [ebp+arg_14] 0 +
jz loc_101192C  +
sub esi ebx +
cmp [ebp+arg_18] esi +
ja loc_101191C  +
xor edi edi +
mov eax [ebp+arg_4] +
cmp eax edi +
jz loc_10118C2  +
cmp [ebp+arg_8] edi +
jbe loc_10118C2  +
mov byte ptr [eax] 0 +
mov eax [ebp+arg_C] +
cmp eax edi +
jz loc_10118D1  +
cmp [ebp+arg_10] edi +
jbe loc_10118D1  +
mov byte ptr [eax] 0 +
mov eax [ebp+arg_14] +
cmp eax edi +
jz loc_10118E0  +
cmp [ebp+arg_18] edi +
jbe loc_10118E0  +
mov byte ptr [eax] 0 +
mov eax [ebp+arg_1C] +
cmp eax edi +
jz loc_10118EF  +
cmp [ebp+arg_20] edi +
jbe loc_10118EF  +
mov byte ptr [eax] 0 +
call sub_1014511  +
cmp ebx edi +
jnz loc_101190E  +
push 16h  +
pop esi  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
mov [eax] esi +
call sub_10144BA  +
add esp 14h +
mov eax esi +
jmp loc_1011938  +
cmp [ebp+var_4] edi +
jnz loc_10118F8  +
push 22h  +
pop ecx  +
mov [eax] ecx +
mov eax ecx +
jmp loc_1011938  +
push esi  +
push ebx  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
call sub_1015B1C  +
add esp 10h +
mov eax [ebp+arg_1C] +
test eax eax +
jz loc_1011936  +
mov byte ptr [eax] 0 +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
call sub_10165F4  +
pop ecx  +
retn   +
***
push esi  +
push 0  +
push hHeap  +
call ds:HeapFree  +
test eax eax +
jnz loc_10119CA  +
call sub_1014511  +
mov esi eax +
call ds:GetLastError  +
push eax  +
call sub_10144CA  +
mov [esi] eax +
pop ecx  +
call sub_1016639  +
retn   +
***
call sub_10165F4  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp esi 0FFFFFFE0h +
ja loc_1011ADC  +
push ebx  +
push edi  +
mov edi ds:HeapAlloc +
cmp hHeap 0 +
jnz loc_1011A64  +
call sub_101224F  +
push 1Eh  +
call sub_10120C5  +
push 0FFh  +
call loc_1011DFA  +
pop ecx  +
pop ecx  +
mov eax dword_1024484 +
cmp eax 1 +
jnz loc_1011A7C  +
test esi esi +
jz loc_1011A76  +
mov eax esi +
jmp loc_1011A79  +
xor eax eax +
inc eax  +
push eax  +
jmp loc_1011A98  +
cmp eax 3 +
jnz loc_1011A8C  +
push esi  +
call sub_10119D5  +
pop ecx  +
test eax eax +
jnz loc_1011AA2  +
test esi esi +
jnz loc_1011A91  +
inc esi  +
add esi 0Fh +
and esi 0FFFFFFF0h +
push esi  +
push 0  +
push hHeap  +
call edi  +
mov ebx eax +
test ebx ebx +
jnz loc_1011AD6  +
push 0Ch  +
pop esi  +
cmp dword_1022EF0 eax +
jz loc_1011AC8  +
push [ebp+arg_0]  +
call sub_1016666  +
pop ecx  +
test eax eax +
jz loc_1011ACF  +
mov esi [ebp+arg_0] +
jmp loc_1011A43  +
call sub_1014511  +
mov [eax] esi +
call sub_1014511  +
mov [eax] esi +
pop edi  +
mov eax ebx +
pop ebx  +
jmp loc_1011AF0  +
push esi  +
call sub_1016666  +
pop ecx  +
call sub_1014511  +
mov dword ptr [eax] 0Ch +
xor eax eax +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
mov esi [ebp+lpWideCharStr] +
xor ebx ebx +
mov [ebp+var_4] ebx +
cmp esi ebx +
jz loc_1011B21  +
cmp [ebp+cchWideChar] ebx +
jnz loc_1011B1A  +
xor eax eax +
jmp loc_1011CA5  +
jbe loc_1011B21  +
xor eax eax +
mov [esi] ax +
push edi  +
mov edi [ebp+lpMultiByteStr] +
cmp edi ebx +
jz loc_1011B32  +
cmp [ebp+cchWideChar] 7FFFFFFFh +
jbe loc_1011B4F  +
call sub_1014511  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov dword ptr [eax] 16h +
call sub_10144BA  +
add esp 14h +
jmp loc_1011C92  +
push [ebp+arg_C]  +
lea ecx [ebp+var_14] +
call sub_1010CA3  +
mov eax [ebp+var_14] +
cmp esi ebx +
jz loc_1011C52  +
cmp [eax+14h] ebx +
jnz loc_1011BB2  +
cmp [ebp+cchWideChar] ebx +
jbe loc_1011B8B  +
mov ecx [ebp+var_4] +
lea eax [ecx+edi] +
movzx dx byte ptr [eax] +
mov [esi] dx +
cmp [eax] bl +
jz loc_1011B9F  +
inc ecx  +
inc esi  +
inc esi  +
mov [ebp+var_4] ecx +
cmp ecx [ebp+cchWideChar] +
jb loc_1011B6F  +
cmp [ebp+var_8] bl +
jz loc_1011B97  +
mov eax [ebp+var_C] +
and dword ptr [eax+70h] 0FFFFFFFDh +
mov eax [ebp+var_4] +
jmp loc_1011CA4  +
cmp [ebp+var_8] bl +
jz loc_1011BAB  +
mov eax [ebp+var_C] +
and dword ptr [eax+70h] 0FFFFFFFDh +
mov eax ecx +
jmp loc_1011CA4  +
push [ebp+cchWideChar]  +
push esi  +
push 0FFFFFFFFh  +
push edi  +
mov edi ds:MultiByteToWideChar +
push 9  +
push dword ptr [eax+4]  +
call edi  +
cmp eax ebx +
jnz loc_1011C97  +
call ds:GetLastError  +
cmp eax 7Ah +
jz loc_1011BEE  +
call sub_1014511  +
mov dword ptr [eax] 2Ah +
xor eax eax +
mov [esi] ax +
jmp loc_1011C86  +
mov eax [ebp+cchWideChar] +
mov esi [ebp+lpMultiByteStr] +
mov [ebp+var_4] eax +
cmp eax ebx +
jz loc_1011C22  +
mov al [esi] +
dec [ebp+var_4]  +
cmp al bl +
jz loc_1011C22  +
lea ecx [ebp+var_14] +
movzx eax al +
push ecx  +
push eax  +
call sub_10158DE  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1011C1C  +
inc esi  +
cmp [esi] bl +
jz loc_1011C3D  +
inc esi  +
cmp [ebp+var_4] ebx +
jnz loc_1011BFB  +
push [ebp+cchWideChar]  +
sub esi [ebp+lpMultiByteStr] +
push [ebp+lpWideCharStr]  +
mov eax [ebp+var_14] +
push esi  +
push [ebp+lpMultiByteStr]  +
push 1  +
push dword ptr [eax+4]  +
call edi  +
cmp eax ebx +
jnz loc_1011C98  +
call sub_1014511  +
mov ecx [ebp+lpWideCharStr] +
mov dword ptr [eax] 2Ah +
xor eax eax +
mov [ecx] ax +
jmp loc_1011C86  +
cmp [eax+14h] ebx +
jnz loc_1011C67  +
mov eax edi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
cmp cl bl +
jnz loc_1011C5C  +
sub eax edx +
jmp loc_1011C98  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push edi  +
push 9  +
push dword ptr [eax+4]  +
call ds:MultiByteToWideChar  +
cmp eax ebx +
jnz loc_1011C97  +
call sub_1014511  +
mov dword ptr [eax] 2Ah +
cmp [ebp+var_8] bl +
jz loc_1011C92  +
mov eax [ebp+var_C] +
and dword ptr [eax+70h] 0FFFFFFFDh +
or eax 0FFFFFFFFh +
jmp loc_1011CA4  +
dec eax  +
cmp [ebp+var_8] bl +
jz loc_1011CA4  +
mov ecx [ebp+var_C] +
and dword ptr [ecx+70h] 0FFFFFFFDh +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_1022D70 0 +
jnz loc_1011CC3  +
push offset off_1020420  +
jmp loc_1011CC5  +
push 0  +
push [ebp+cchWideChar]  +
push [ebp+lpMultiByteStr]  +
push [ebp+lpWideCharStr]  +
call sub_1011AF8  +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 0 +
jnz loc_1011CEC  +
xor eax eax +
pop ebp  +
retn   +
mov edx [ebp+arg_4] +
mov ecx [ebp+arg_0] +
dec [ebp+arg_8]  +
jz loc_1011D0A  +
movzx eax word ptr [ecx] +
test ax ax +
jz loc_1011D0A  +
cmp ax [edx] +
jnz loc_1011D0A  +
inc ecx  +
inc ecx  +
inc edx  +
inc edx  +
jmp loc_1011CF2  +
movzx eax word ptr [ecx] +
movzx ecx word ptr [edx] +
sub eax ecx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_1011D55  +
cmp dword ptr [eax+10h] 3 +
jnz loc_1011D55  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_1011D50  +
cmp eax 19930521h +
jz loc_1011D50  +
cmp eax 19930522h +
jz loc_1011D50  +
cmp eax 1994000h +
jnz loc_1011D55  +
call sub_1016693  +
xor eax eax +
pop ebp  +
retn 4  +
***
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_1011D8F  +
test eax eax +
jnz loc_1011D94  +
mov ecx [esi] +
test ecx ecx +
jz loc_1011D8C  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_1011D80  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
call sub_101224F  +
push [ebp+arg_0]  +
call sub_10120C5  +
push off_101FB20  +
call sub_1012C9F  +
push 0FFh  +
call eax  +
add esp 0Ch +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset aMscoree_dll  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_1011DF3  +
push offset aCorexitprocess  +
push eax  +
call ds:GetProcAddress  +
test eax eax +
jz loc_1011DF3  +
push [ebp+arg_0]  +
call eax  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
call sub_1011DCA  +
pop ecx  +
push dword ptr [ebp+8]  +
call ds:ExitProcess  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi eax +
jmp loc_1011E2C  +
mov eax [esi] +
test eax eax +
jz loc_1011E29  +
call eax  +
add esi 4 +
cmp esi [ebp+arg_0] +
jb loc_1011E21  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push esi  +
xor esi esi +
cmp ecx esi +
jnz loc_1011E65  +
call sub_1014511  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_10144BA  +
add esp 14h +
push 16h  +
pop eax  +
jmp loc_1011E72  +
mov eax dword_10225BC +
cmp eax esi +
jz loc_1011E48  +
mov [ecx] eax +
xor eax eax +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
xor esi esi +
cmp eax esi +
jnz loc_1011EA6  +
call sub_1014511  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_10144BA  +
add esp 14h +
push 16h  +
pop eax  +
jmp loc_1011EB8  +
cmp dword_10225BC esi +
jz loc_1011E89  +
mov ecx dword_10225C8 +
mov [eax] ecx +
xor eax eax +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_10245B0 0 +
jz loc_1011EE7  +
push offset dword_10245B0  +
call sub_1016799  +
pop ecx  +
test eax eax +
jz loc_1011EE7  +
push [ebp+arg_0]  +
call dword_10245B0  +
pop ecx  +
call sub_10166E7  +
call sub_1012C91  +
push offset dword_1001318  +
push offset dword_1001304  +
mov dword_10245A4 eax +
mov dword_10245A8 eax +
call sub_1011D73  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1011F46  +
push offset dword_1001300  +
mov eax offset dword_10012FC +
call sub_1011E17  +
cmp dword_10245B8 0 +
pop ecx  +
jz loc_1011F44  +
push offset dword_10245B8  +
call sub_1016799  +
pop ecx  +
test eax eax +
jz loc_1011F44  +
push 0  +
push 2  +
push 0  +
call dword_10245B8  +
xor eax eax +
pop ebp  +
retn   +
***
call sub_10165F4  +
cmp dword ptr [ebp+10h] 0 +
jz locret_1012014  +
push 8  +
call sub_1015C88  +
pop ecx  +
retn   +
***
call sub_1016639  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 0  +
push [ebp+arg_0]  +
call sub_1011F4D  +
add esp 0Ch +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 1  +
push [ebp+arg_0]  +
call sub_1011F4D  +
add esp 0Ch +
pop ebp  +
retn   +
***
push 0  +
call sub_1011F4D  +
add esp 0Ch +
retn   +
***
push 0  +
call sub_1011F4D  +
add esp 0Ch +
retn   +
***
mov edi edi +
push esi  +
call sub_1012C91  +
mov esi eax +
push esi  +
call sub_1016652  +
push esi  +
call sub_1016A44  +
push esi  +
call sub_1016A30  +
push esi  +
call sub_101680A  +
push esi  +
call nullsub_1  +
push esi  +
call sub_10166D1  +
push offset sub_101203B  +
call sub_1012C19  +
add esp 1Ch +
mov off_101FB20 eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
xor ebx ebx +
xor esi esi +
push edi  +
mov edi [ebp+arg_0] +
mov [ebp+var_4] esi +
cmp edi dword_101FB28[esi*8] +
jz loc_10120EB  +
inc esi  +
mov [ebp+var_4] esi +
cmp esi 17h +
jb loc_10120D9  +
cmp esi 17h +
jnb loc_1012245  +
push 3  +
call sub_1016DF1  +
pop ecx  +
cmp eax 1 +
jz loc_101220F  +
push 3  +
call sub_1016DF1  +
pop ecx  +
test eax eax +
jnz loc_101211E  +
cmp dword_101FB04 1 +
jz loc_101220F  +
cmp edi 0FCh +
jz loc_1012245  +
push offset aRuntimeErrorPr  +
mov edi 314h +
push edi  +
mov esi offset unk_1022600 +
push esi  +
call sub_1016D84  +
add esp 0Ch +
test eax eax +
jz loc_1012154  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call sub_101440F  +
add esp 14h +
mov byte_102271D bl +
push 104h  +
mov ebx offset Filename +
push ebx  +
push 0  +
call ds:GetModuleFileNameA  +
test eax eax +
jnz loc_1012197  +
push offset aProgramNameUnk  +
push 2FBh  +
push ebx  +
call sub_1016D84  +
add esp 0Ch +
test eax eax +
jz loc_1012197  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
call sub_101440F  +
add esp 14h +
push ebx  +
push edi  +
push esi  +
call sub_1016D0B  +
add esp 0Ch +
xor ebx ebx +
test eax eax +
jz loc_10121B5  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call sub_101440F  +
add esp 14h +
push offset asc_10021F8  +
push edi  +
push esi  +
call sub_1016D0B  +
add esp 0Ch +
test eax eax +
jz loc_10121D5  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call sub_101440F  +
add esp 14h +
mov eax [ebp+var_4] +
push lpBuffer[eax*8]  +
push edi  +
push esi  +
call sub_1016D0B  +
add esp 0Ch +
test eax eax +
jz loc_10121FA  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call sub_101440F  +
add esp 14h +
push 12010h  +
push offset aMicrosoftVisua  +
push esi  +
call sub_1016B64  +
add esp 0Ch +
jmp loc_1012245  +
push 0FFFFFFF4h  +
call ds:GetStdHandle  +
mov edi eax +
cmp edi ebx +
jz loc_1012245  +
cmp edi 0FFFFFFFFh +
jz loc_1012245  +
mov edx lpBuffer[esi*8] +
mov ecx edx +
lea esi [ecx+1] +
mov al [ecx] +
inc ecx  +
test al al +
jnz loc_101222E  +
push ebx  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
sub ecx esi +
push ecx  +
push edx  +
push edi  +
call ds:WriteFile  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
pop ecx  +
cmp eax 1 +
jz loc_1012271  +
push 3  +
call sub_1016DF1  +
pop ecx  +
test eax eax +
jnz locret_1012287  +
cmp dword_101FB04 1 +
jnz locret_1012287  +
push 0FCh  +
call sub_10120C5  +
push 0FFh  +
call sub_10120C5  +
pop ecx  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
call sub_1012E63  +
mov esi eax +
test esi esi +
jz loc_10123F0  +
mov edx [esi+5Ch] +
mov eax dword_101FC64 +
push edi  +
mov edi [ebp+arg_0] +
mov ecx edx +
push ebx  +
cmp [ecx] edi +
jz loc_10122CB  +
mov ebx eax +
imul ebx ebx +
add ecx 0Ch +
add ebx edx +
cmp ecx ebx +
jb loc_10122B9  +
imul eax eax +
add eax edx +
cmp ecx eax +
jnb loc_10122DC  +
cmp [ecx] edi +
jnz loc_10122DC  +
mov eax ecx +
jmp loc_10122DE  +
xor eax eax +
test eax eax +
jz loc_10122EC  +
mov ebx [eax+8] +
mov [ebp+var_4] ebx +
test ebx ebx +
jnz loc_10122F3  +
xor eax eax +
jmp loc_10123EE  +
cmp ebx 5 +
jnz loc_1012304  +
and dword ptr [eax+8] 0 +
xor eax eax +
inc eax  +
jmp loc_10123EE  +
cmp ebx 1 +
jz loc_10123EB  +
mov ecx [esi+60h] +
mov [ebp+var_8] ecx +
mov ecx [ebp+arg_4] +
mov [esi+60h] ecx +
mov ecx [eax+4] +
cmp ecx 8 +
jnz loc_10123DD  +
mov ecx dword_101FC58 +
mov edi dword_101FC5C +
mov edx ecx +
add edi ecx +
cmp edx edi +
jge loc_101235D  +
imul ecx ecx +
mov edi [esi+5Ch] +
and dword ptr [ecx+edi+8] 0 +
mov edi dword_101FC58 +
mov ebx dword_101FC5C +
inc edx  +
add ebx edi +
add ecx 0Ch +
cmp edx ebx +
jl loc_101233C  +
mov ebx [ebp+var_4] +
mov eax [eax] +
mov edi [esi+64h] +
cmp eax 0C000008Eh +
jnz loc_1012372  +
mov dword ptr [esi+64h] 83h +
jmp loc_10123D0  +
cmp eax 0C0000090h +
jnz loc_1012382  +
mov dword ptr [esi+64h] 81h +
jmp loc_10123D0  +
cmp eax 0C0000091h +
jnz loc_1012392  +
mov dword ptr [esi+64h] 84h +
jmp loc_10123D0  +
cmp eax 0C0000093h +
jnz loc_10123A2  +
mov dword ptr [esi+64h] 85h +
jmp loc_10123D0  +
cmp eax 0C000008Dh +
jnz loc_10123B2  +
mov dword ptr [esi+64h] 82h +
jmp loc_10123D0  +
cmp eax 0C000008Fh +
jnz loc_10123C2  +
mov dword ptr [esi+64h] 86h +
jmp loc_10123D0  +
cmp eax 0C0000092h +
jnz loc_10123D0  +
mov dword ptr [esi+64h] 8Ah +
push dword ptr [esi+64h]  +
push 8  +
call ebx  +
pop ecx  +
mov [esi+64h] edi +
jmp loc_10123E4  +
and dword ptr [eax+8] 0 +
push ecx  +
call ebx  +
mov eax [ebp+var_8] +
pop ecx  +
mov [esi+60h] eax +
or eax 0FFFFFFFFh +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push esi  +
push edi  +
xor edi edi +
cmp dword_10245AC edi +
jnz loc_101240B  +
call sub_1014ECF  +
mov esi dword_10245BC +
test esi esi +
jnz loc_101241A  +
mov esi offset ValueName +
mov al [esi] +
cmp al 20h +
ja loc_1012428  +
test al al +
jz loc_1012452  +
test edi edi +
jz loc_101244C  +
cmp al 22h +
jnz loc_1012435  +
xor ecx ecx +
test edi edi +
setz cl  +
mov edi ecx +
movzx eax al +
push eax  +
call sub_1015AFF  +
pop ecx  +
test eax eax +
jz loc_1012444  +
inc esi  +
inc esi  +
jmp loc_101241A  +
cmp al 20h +
ja loc_1012452  +
inc esi  +
mov al [esi] +
test al al +
jnz loc_1012447  +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
push edi  +
xor edi edi +
cmp dword_10245AC edi +
jnz loc_1012474  +
call sub_1014ECF  +
mov esi dword_10225AC +
cmp esi edi +
jnz loc_1012486  +
or eax 0FFFFFFFFh +
jmp loc_101255E  +
push ebx  +
xor edx edx +
jmp loc_10124A8  +
mov eax esi +
lea ebx [eax+1] +
mov [ebp+var_4] ebx +
mov bl [eax] +
inc eax  +
test bl bl +
jnz loc_1012493  +
sub eax [ebp+var_4] +
inc eax  +
cmp cl 3Dh +
jz loc_10124A6  +
inc edi  +
add edx eax +
add esi eax +
mov cl [esi] +
test cl cl +
jnz loc_101248B  +
shl edi 2 +
lea ebx [edi+edx+4] +
push 1  +
push ebx  +
call sub_1016F64  +
mov esi eax +
pop ecx  +
pop ecx  +
test esi esi +
jnz loc_10124CD  +
or eax 0FFFFFFFFh +
jmp loc_101255D  +
lea edx [edi+esi+4] +
mov edi dword_10225AC +
lea eax [esi+ebx] +
mov dword_10225E0 esi +
mov dword_10245B4 eax +
mov dword_10225DC esi +
mov [ebp+var_4] edx +
jmp loc_1012535  +
mov eax edi +
lea ebx [eax+1] +
mov [ebp+var_8] ebx +
mov bl [eax] +
inc eax  +
test bl bl +
jnz loc_10124F8  +
sub eax [ebp+var_8] +
lea ebx [eax+1] +
cmp cl 3Dh +
jz loc_1012533  +
push edi  +
push ebx  +
push edx  +
mov [esi] edx +
call sub_1016D84  +
add esp 0Ch +
test eax eax +
jz loc_101252A  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
call sub_101440F  +
add esp 14h +
add [ebp+var_4] ebx +
mov edx [ebp+var_4] +
add esi 4 +
add edi ebx +
mov cl [edi] +
test cl cl +
jnz loc_10124F0  +
push dword_10225AC  +
call sub_1011942  +
and dword_10225AC 0 +
and dword ptr [esi] 0 +
pop ecx  +
mov dword_10245A0 1 +
xor eax eax +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
ja loc_1012585  +
mov eax [ebp+arg_0] +
jb loc_101257C  +
cmp eax 0FFFFFFFFh +
ja loc_1012585  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn   +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_4] +
add eax ecx +
cmp eax ecx +
jb loc_10125B1  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn   +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [esi] +
mov ecx [ebp+arg_C] +
mov edx [ecx] +
and dword ptr [esi] 0 +
mov [ebp+var_4] eax +
xor eax eax +
push ebx  +
inc eax  +
cmp [ebp+arg_4] 0 +
push edi  +
mov edi [ebp+arg_0] +
mov [ebp+var_8] edx +
mov [ecx] eax +
jz loc_10125FA  +
cmp edx eax +
jl loc_10125FA  +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_8] +
add [ebp+arg_4] 4 +
mov [edx] eax +
and [ebp+arg_0] 0 +
cmp byte ptr [edi] 22h +
jnz loc_1012613  +
xor eax eax +
cmp [ebp+arg_0] eax +
mov bl 22h +
setz al  +
inc edi  +
mov [ebp+arg_0] eax +
jmp loc_101265E  +
inc dword ptr [esi]  +
cmp [ebp+arg_8] 0 +
mov eax [esi] +
jz loc_101262C  +
cmp eax [ebp+var_4] +
jg loc_101262C  +
mov ecx [ebp+arg_8] +
mov al [edi] +
inc [ebp+arg_8]  +
mov [ecx] al +
mov bl [edi] +
movzx eax bl +
push eax  +
inc edi  +
call sub_1015AFF  +
pop ecx  +
test eax eax +
jz loc_1012657  +
inc dword ptr [esi]  +
cmp [ebp+arg_8] 0 +
mov eax [esi] +
jz loc_1012656  +
cmp eax [ebp+var_4] +
jg loc_1012656  +
mov ecx [ebp+arg_8] +
mov al [edi] +
inc [ebp+arg_8]  +
mov [ecx] al +
inc edi  +
mov ecx [ebp+arg_C] +
test bl bl +
jz loc_1012691  +
cmp [ebp+arg_0] 0 +
jnz loc_10125FE  +
cmp bl 20h +
jz loc_101266E  +
cmp bl 9 +
jnz loc_10125FE  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_1012679  +
mov byte ptr [eax-1] 0 +
xor ebx ebx +
cmp byte ptr [edi] 0 +
jz loc_101278E  +
mov al [edi] +
cmp al 20h +
jz loc_101268E  +
cmp al 9 +
jnz loc_1012694  +
inc edi  +
jmp loc_1012684  +
dec edi  +
jmp loc_1012679  +
cmp byte ptr [edi] 0 +
jz loc_101278E  +
inc dword ptr [ecx]  +
cmp [ebp+arg_4] 0 +
mov eax [ecx] +
jz loc_10126B8  +
cmp eax [ebp+var_8] +
jg loc_10126B8  +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_8] +
add [ebp+arg_4] 4 +
mov [edx] eax +
mov [ebp+arg_0] 1 +
xor edx edx +
jmp loc_10126C5  +
inc edi  +
inc edx  +
cmp byte ptr [edi] 5Ch +
jz loc_10126C3  +
cmp byte ptr [edi] 22h +
jnz loc_101270E  +
test dl 1 +
jnz loc_10126F1  +
test ebx ebx +
jz loc_10126E4  +
lea eax [edi+1] +
cmp byte ptr [eax] 22h +
jnz loc_10126E4  +
mov edi eax +
jmp loc_10126E8  +
and [ebp+arg_0] 0 +
xor eax eax +
test ebx ebx +
setz al  +
mov ebx eax +
shr edx 1 +
jmp loc_101270E  +
dec edx  +
inc dword ptr [esi]  +
cmp [ebp+arg_8] 0 +
mov eax [esi] +
jz loc_101270E  +
cmp eax [ebp+var_4] +
jg loc_101270E  +
mov eax [ebp+arg_8] +
inc [ebp+arg_8]  +
mov byte ptr [eax] 5Ch +
test edx edx +
jnz loc_10126F5  +
mov al [edi] +
test al al +
jz loc_1012769  +
test ebx ebx +
jnz loc_1012724  +
cmp al 20h +
jz loc_1012769  +
cmp al 9 +
jz loc_1012769  +
cmp [ebp+arg_0] 0 +
jz loc_1012763  +
inc dword ptr [esi]  +
movsx eax byte ptr [edi] +
push eax  +
call sub_1015AFF  +
cmp [ebp+arg_8] 0 +
pop ecx  +
jz loc_1012759  +
test eax eax +
jz loc_101274D  +
mov al [edi] +
mov ecx [ebp+arg_8] +
inc [ebp+arg_8]  +
mov [ecx] al +
inc edi  +
inc dword ptr [esi]  +
mov ecx [ebp+arg_8] +
mov al [edi] +
inc [ebp+arg_8]  +
mov [ecx] al +
jmp loc_1012760  +
test eax eax +
jz loc_1012760  +
inc edi  +
inc dword ptr [esi]  +
mov ecx [ebp+arg_C] +
inc edi  +
jmp loc_10126B8  +
inc dword ptr [esi]  +
cmp [ebp+arg_8] 0 +
mov eax [esi] +
jz loc_101267B  +
cmp eax [ebp+var_4] +
jg loc_101267B  +
mov eax [ebp+arg_8] +
inc [ebp+arg_8]  +
mov byte ptr [eax] 0 +
jmp loc_101267B  +
inc dword ptr [ecx]  +
mov eax [ecx] +
mov ecx [ebp+arg_4] +
pop edi  +
pop ebx  +
test ecx ecx +
jz locret_10127A3  +
cmp eax [ebp+var_8] +
jg locret_10127A3  +
and dword ptr [ecx] 0 +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
mov [ebp+var_4] ebx +
mov [ebp+var_C] ebx +
cmp dword_10245AC ebx +
jnz loc_10127CA  +
call sub_1014ECF  +
push 104h  +
mov esi offset byte_1022918 +
push esi  +
push ebx  +
mov byte_1022A1C bl +
call ds:GetModuleFileNameA  +
mov eax dword_10245BC +
mov dword_10225EC esi +
cmp eax ebx +
jz loc_10127F8  +
mov [ebp+var_8] eax +
cmp [eax] bl +
jnz loc_10127FB  +
mov [ebp+var_8] esi +
lea eax [ebp+var_4] +
push eax  +
push ebx  +
push ebx  +
push [ebp+var_8]  +
lea esi [ebp+var_C] +
call sub_10125C3  +
mov esi [ebp+var_4] +
lea eax [ebp+var_14] +
push eax  +
push 4  +
pop ecx  +
mov eax esi +
mul  ecx +
push edx  +
push eax  +
call sub_1012567  +
add esp 1Ch +
test eax eax +
jl loc_1012891  +
lea eax [ebp+var_10] +
push eax  +
mov eax [ebp+var_C] +
push 4  +
pop ecx  +
mul  ecx +
push edx  +
push eax  +
call sub_1012567  +
add esp 0Ch +
test eax eax +
jl loc_1012891  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+var_10]  +
push [ebp+var_14]  +
call sub_1012597  +
add esp 0Ch +
test eax eax +
jl loc_1012891  +
push [ebp+var_14]  +
call sub_1011A29  +
mov edi eax +
pop ecx  +
cmp edi ebx +
jz loc_1012891  +
lea eax [ebp+var_4] +
push eax  +
lea eax [edi+esi*4] +
push eax  +
push edi  +
push [ebp+var_8]  +
lea esi [ebp+var_C] +
call sub_10125C3  +
mov eax [ebp+var_4] +
add esp 10h +
dec eax  +
mov dword_10225D0 eax +
mov dword_10225D4 edi +
xor eax eax +
jmp loc_1012894  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_1022A20 +
sub esp 0Ch +
push ebx  +
push esi  +
mov esi ds:GetEnvironmentStringsW +
push edi  +
xor ebx ebx +
xor edi edi +
cmp eax ebx +
jnz loc_10128EA  +
call esi  +
mov edi eax +
cmp edi ebx +
jz loc_10128D0  +
mov dword_1022A20 1 +
jmp loc_10128F3  +
call ds:GetLastError  +
cmp eax 78h +
jnz loc_10128E5  +
push 2  +
pop eax  +
mov dword_1022A20 eax +
jmp loc_10128EA  +
mov eax dword_1022A20 +
cmp eax 1 +
jnz loc_1012974  +
cmp edi ebx +
jnz loc_1012906  +
call esi  +
mov edi eax +
cmp edi ebx +
jnz loc_1012906  +
xor eax eax +
jmp loc_10129D0  +
mov eax edi +
cmp [edi] bx +
jz loc_101291B  +
inc eax  +
inc eax  +
cmp [eax] bx +
jnz loc_101290D  +
inc eax  +
inc eax  +
cmp [eax] bx +
jnz loc_101290D  +
mov esi ds:WideCharToMultiByte +
push ebx  +
push ebx  +
push ebx  +
sub eax edi +
push ebx  +
sar eax 1 +
inc eax  +
push eax  +
push edi  +
push ebx  +
push ebx  +
mov [ebp+cchWideChar] eax +
call esi  +
mov [ebp+cchMultiByte] eax +
cmp eax ebx +
jz loc_1012969  +
push eax  +
call sub_1011A29  +
pop ecx  +
mov [ebp+var_4] eax +
cmp eax ebx +
jz loc_1012969  +
push ebx  +
push ebx  +
push [ebp+cchMultiByte]  +
push eax  +
push [ebp+cchWideChar]  +
push edi  +
push ebx  +
push ebx  +
call esi  +
test eax eax +
jnz loc_1012966  +
push [ebp+var_4]  +
call sub_1011942  +
pop ecx  +
mov [ebp+var_4] ebx +
mov ebx [ebp+var_4] +
push edi  +
call ds:FreeEnvironmentStringsW  +
mov eax ebx +
jmp loc_10129D0  +
cmp eax 2 +
jz loc_101297D  +
cmp eax ebx +
jnz loc_10128FF  +
call ds:GetEnvironmentStrings  +
mov esi eax +
cmp esi ebx +
jz loc_10128FF  +
cmp [esi] bl +
jz loc_101299B  +
inc eax  +
cmp [eax] bl +
jnz loc_1012991  +
inc eax  +
cmp [eax] bl +
jnz loc_1012991  +
sub eax esi +
inc eax  +
push eax  +
mov [ebp+cchMultiByte] eax +
call sub_1011A29  +
mov edi eax +
pop ecx  +
cmp edi ebx +
jnz loc_10129BA  +
push esi  +
call ds:FreeEnvironmentStringsA  +
jmp loc_10128FF  +
push [ebp+cchMultiByte]  +
push esi  +
push edi  +
call loc_10113B0  +
add esp 0Ch +
push esi  +
call ds:FreeEnvironmentStringsA  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
call sub_10165F4  +
xor esi esi +
mov [ebp-4] esi +
lea eax [ebp-64h] +
push eax  +
call ds:GetStartupInfoA  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
push 24h  +
push 20h  +
pop edi  +
push edi  +
call sub_1016F64  +
pop ecx  +
pop ecx  +
cmp eax esi +
jz loc_1012C0B  +
mov dword_10244A0 eax +
mov uNumber edi +
lea ecx [eax+480h] +
jmp loc_1012A49  +
mov byte ptr [eax+4] 0 +
or dword ptr [eax] 0FFFFFFFFh +
mov byte ptr [eax+5] 0Ah +
mov [eax+8] esi +
mov byte ptr [eax+6] 0Ah +
mov byte ptr [eax+7] 0Ah +
add eax 24h +
mov ecx dword_10244A0 +
add ecx 480h +
cmp eax ecx +
jb loc_1012A24  +
cmp [ebp-32h] si +
jz loc_1012B51  +
mov eax [ebp-30h] +
cmp eax esi +
jz loc_1012B51  +
mov edi [eax] +
lea ebx [eax+4] +
lea eax [ebx+edi] +
mov [ebp-1Ch] eax +
mov eax 800h +
cmp edi eax +
jl loc_1012A78  +
mov edi eax +
xor esi esi +
inc esi  +
jmp loc_1012ACB  +
push 24h  +
push 20h  +
call sub_1016F64  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1012AD5  +
lea ecx dword_10244A0[esi*4] +
mov [ecx] eax +
add uNumber 20h +
lea edx [eax+480h] +
jmp loc_1012AC6  +
mov byte ptr [eax+4] 0 +
or dword ptr [eax] 0FFFFFFFFh +
mov byte ptr [eax+5] 0Ah +
and dword ptr [eax+8] 0 +
mov byte ptr [eax+6] 0Ah +
mov byte ptr [eax+7] 0Ah +
add eax 24h +
mov edx [ecx] +
add edx 480h +
cmp eax edx +
jb loc_1012AA4  +
inc esi  +
cmp uNumber edi +
jl loc_1012A7D  +
jmp loc_1012ADB  +
mov edi uNumber +
and dword ptr [ebp-20h] 0 +
test edi edi +
jle loc_1012B51  +
mov eax [ebp-1Ch] +
mov ecx [eax] +
cmp ecx 0FFFFFFFFh +
jz loc_1012B44  +
cmp ecx 0FFFFFFFEh +
jz loc_1012B44  +
mov al [ebx] +
test al 1 +
jz loc_1012B44  +
test al 8 +
jnz loc_1012B07  +
push ecx  +
call ds:GetFileType  +
test eax eax +
jz loc_1012B44  +
mov esi [ebp-20h] +
mov eax esi +
sar eax 5 +
and esi 1Fh +
imul esi esi +
add esi dword_10244A0[eax*4] +
mov eax [ebp-1Ch] +
mov eax [eax] +
mov [esi] eax +
mov al [ebx] +
mov [esi+4] al +
push 0FA0h  +
lea eax [esi+0Ch] +
push eax  +
call sub_1016A72  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1012C0B  +
or dword ptr [esi+8] 4 +
inc dword ptr [ebp-20h]  +
inc ebx  +
add dword ptr [ebp-1Ch] 4 +
cmp [ebp-20h] edi +
jl loc_1012AE3  +
xor ebx ebx +
mov esi ebx +
imul esi esi +
add esi dword_10244A0 +
mov eax [esi] +
cmp eax 0FFFFFFFFh +
jz loc_1012B70  +
cmp eax 0FFFFFFFEh +
jz loc_1012B70  +
or byte ptr [esi+4] 80h +
jmp loc_1012BE3  +
mov byte ptr [esi+4] 81h +
test ebx ebx +
jnz loc_1012B7D  +
push 0FFFFFFF6h  +
pop eax  +
jmp loc_1012B87  +
mov eax ebx +
dec eax  +
neg eax  +
sbb eax eax +
add eax 0FFFFFFF5h +
push eax  +
call ds:GetStdHandle  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jz loc_1012BD9  +
test edi edi +
jz loc_1012BD9  +
push edi  +
call ds:GetFileType  +
test eax eax +
jz loc_1012BD9  +
mov [esi] edi +
and eax 0FFh +
cmp eax 2 +
jnz loc_1012BB6  +
or byte ptr [esi+4] 40h +
jmp loc_1012BBF  +
cmp eax 3 +
jnz loc_1012BBF  +
or byte ptr [esi+4] 8 +
push 0FA0h  +
lea eax [esi+0Ch] +
push eax  +
call sub_1016A72  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1012C0B  +
or dword ptr [esi+8] 4 +
jmp loc_1012BE3  +
or byte ptr [esi+4] 40h +
mov dword ptr [esi] 0FFFFFFFEh +
inc ebx  +
cmp ebx 3 +
jl loc_1012B53  +
push uNumber  +
call ds:SetHandleCount  +
xor eax eax +
jmp loc_1012C0E  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
or eax 0FFFFFFFFh +
call sub_1016639  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dwTlsIndex  +
mov esi ds:TlsGetValue +
call esi  +
test eax eax +
jz loc_1012C52  +
mov eax dword_101FC90 +
cmp eax 0FFFFFFFFh +
jz loc_1012C52  +
push eax  +
push dwTlsIndex  +
call esi  +
call eax  +
test eax eax +
jz loc_1012C52  +
mov eax [eax+1F8h] +
jmp loc_1012C7A  +
mov esi ds:GetModuleHandleW +
push offset aKernelbase_dll  +
call esi  +
test eax eax +
jnz loc_1012C6E  +
push offset aKernel32_dll_0  +
call esi  +
test eax eax +
jz loc_1012C86  +
push offset aEncodepointer  +
push eax  +
call ds:GetProcAddress  +
test eax eax +
jz loc_1012C86  +
push [ebp+arg_0]  +
call eax  +
mov [ebp+arg_0] eax +
mov eax [ebp+arg_0] +
pop esi  +
pop ebp  +
retn   +
***
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dwTlsIndex  +
mov esi ds:TlsGetValue +
call esi  +
test eax eax +
jz loc_1012CD8  +
mov eax dword_101FC90 +
cmp eax 0FFFFFFFFh +
jz loc_1012CD8  +
push eax  +
push dwTlsIndex  +
call esi  +
call eax  +
test eax eax +
jz loc_1012CD8  +
mov eax [eax+1FCh] +
jmp loc_1012D00  +
mov esi ds:GetModuleHandleW +
push offset aKernelbase_dll  +
call esi  +
test eax eax +
jnz loc_1012CF4  +
push offset aKernel32_dll_0  +
call esi  +
test eax eax +
jz loc_1012D0C  +
push offset aDecodepointer  +
push eax  +
call ds:GetProcAddress  +
test eax eax +
jz loc_1012D0C  +
push [ebp+arg_0]  +
call eax  +
mov [ebp+arg_0] eax +
mov eax [ebp+arg_0] +
pop esi  +
pop ebp  +
retn   +
***
call ds:TlsAlloc  +
retn 4  +
***
test eax eax +
jnz locret_1012D4E  +
push lpTlsValue  +
call sub_1012C9F  +
pop ecx  +
push eax  +
push dwTlsIndex  +
call ds:TlsSetValue  +
retn   +
***
mov eax dword_101FC90 +
cmp eax 0FFFFFFFFh +
jz loc_1012D74  +
push eax  +
push dword_1022A30  +
call sub_1012C9F  +
pop ecx  +
call eax  +
or dword_101FC90 0FFFFFFFFh +
mov eax dwTlsIndex +
cmp eax 0FFFFFFFFh +
jz loc_1012D8C  +
push eax  +
call ds:TlsFree  +
or dwTlsIndex 0FFFFFFFFh +
jmp loc_1015C2C  +
***
call sub_10165F4  +
pop ecx  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
call ds:GetLastError  +
mov edi eax +
call sub_1012D25  +
push dword_101FC90  +
push dwTlsIndex  +
call ds:TlsGetValue  +
call eax  +
mov esi eax +
test esi esi +
jnz loc_1012ED3  +
push 214h  +
push 1  +
call sub_1016FAA  +
mov esi eax +
pop ecx  +
pop ecx  +
test esi esi +
jz loc_1012ED3  +
push esi  +
push dword_101FC90  +
push dword_1022A2C  +
call sub_1012C9F  +
pop ecx  +
call eax  +
test eax eax +
jz loc_1012ECA  +
push 0  +
push esi  +
call sub_1012D96  +
or dword ptr [esi+4] 0FFFFFFFFh +
pop ecx  +
jmp loc_1012ED2  +
push esi  +
call sub_1011942  +
xor esi esi +
pop ecx  +
push edi  +
call ds:SetLastError  +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
call sub_1012E63  +
mov esi eax +
test esi esi +
jnz loc_1012EFA  +
push 10h  +
call sub_1011D9C  +
pop ecx  +
mov eax esi +
pop esi  +
retn   +
***
push 8  +
push offset dword_101D5C0  +
call sub_10165F4  +
mov esi [ebp+8] +
test esi esi +
jz loc_101302E  +
mov eax [esi+24h] +
test eax eax +
jz loc_1012F28  +
push eax  +
call sub_1011942  +
pop ecx  +
mov eax [esi+28h] +
test eax eax +
jz loc_1012F36  +
push eax  +
call sub_1011942  +
pop ecx  +
mov eax [esi+2Ch] +
test eax eax +
jz loc_1012F44  +
push eax  +
call sub_1011942  +
pop ecx  +
mov eax [esi+30h] +
test eax eax +
jz loc_1012F52  +
push eax  +
call sub_1011942  +
pop ecx  +
mov eax [esi+34h] +
test eax eax +
jz loc_1012F60  +
push eax  +
call sub_1011942  +
pop ecx  +
mov eax [esi+3Ch] +
test eax eax +
jz loc_1012F6E  +
push eax  +
call sub_1011942  +
pop ecx  +
mov eax [esi+40h] +
test eax eax +
jz loc_1012F7C  +
push eax  +
call sub_1011942  +
pop ecx  +
mov eax [esi+44h] +
test eax eax +
jz loc_1012F8A  +
push eax  +
call sub_1011942  +
pop ecx  +
mov eax [esi+48h] +
test eax eax +
jz loc_1012F98  +
push eax  +
call sub_1011942  +
pop ecx  +
mov eax [esi+5Ch] +
cmp eax offset unk_101FBE0 +
jz loc_1012FA9  +
push eax  +
call sub_1011942  +
pop ecx  +
push 0Dh  +
call sub_1015D6C  +
pop ecx  +
and dword ptr [ebp-4] 0 +
mov edi [esi+68h] +
test edi edi +
jz loc_1012FD6  +
push edi  +
call ds:InterlockedDecrement  +
test eax eax +
jnz loc_1012FD6  +
cmp edi offset Addend +
jz loc_1012FD6  +
push edi  +
call sub_1011942  +
pop ecx  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1013039  +
push 0Ch  +
call sub_1015D6C  +
pop ecx  +
mov dword ptr [ebp-4] 1 +
mov edi [esi+6Ch] +
test edi edi +
jz loc_101301B  +
push edi  +
call sub_10150D4  +
pop ecx  +
cmp edi off_1020418 +
jz loc_101301B  +
cmp edi offset unk_1020340 +
jz loc_101301B  +
cmp dword ptr [edi] 0 +
jnz loc_101301B  +
push edi  +
call sub_1014EF2  +
pop ecx  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1013045  +
push esi  +
call sub_1011942  +
pop ecx  +
call sub_1016639  +
retn 4  +
***
pop ecx  +
pop ecx  +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
push offset aKernel32_dll_0  +
call ds:GetModuleHandleW  +
mov edi eax +
xor ebx ebx +
cmp edi ebx +
jz loc_10130A5  +
mov esi ds:GetProcAddress +
push offset aFlsalloc  +
push edi  +
call esi  +
push offset aFlsgetvalue  +
push edi  +
mov dword_1022A24 eax +
call esi  +
push offset aFlssetvalue  +
push edi  +
mov lpTlsValue eax +
call esi  +
push offset aFlsfree  +
push edi  +
mov dword_1022A2C eax +
call esi  +
mov dword_1022A30 eax +
mov esi ds:TlsSetValue +
cmp dword_1022A24 ebx +
jz loc_10130CB  +
cmp lpTlsValue ebx +
jz loc_10130CB  +
cmp dword_1022A2C ebx +
jz loc_10130CB  +
cmp dword_1022A30 ebx +
jnz loc_10130EF  +
mov eax ds:TlsGetValue +
mov lpTlsValue eax +
mov eax ds:TlsFree +
mov dword_1022A24 offset loc_1012D17 +
mov dword_1022A2C esi +
mov dword_1022A30 eax +
call ds:TlsAlloc  +
mov dwTlsIndex eax +
cmp eax 0FFFFFFFFh +
jz loc_1013162  +
push lpTlsValue  +
push eax  +
call esi  +
test eax eax +
jz loc_1013162  +
call sub_101207E  +
push dword_1022A24  +
call sub_1012C19  +
push lpTlsValue  +
mov dword_1022A24 eax +
call sub_1012C19  +
push dword_1022A2C  +
mov lpTlsValue eax +
call sub_1012C19  +
push dword_1022A30  +
mov dword_1022A2C eax +
call sub_1012C19  +
add esp 10h +
mov dword_1022A30 eax +
call sub_1015BD6  +
test eax eax +
jnz loc_1013168  +
call sub_1012D54  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
retn   +
push offset loc_1012F03  +
push dword_1022A24  +
call sub_1012C9F  +
pop ecx  +
call eax  +
mov dword_101FC90 eax +
cmp eax 0FFFFFFFFh +
jz loc_101315D  +
push 214h  +
push 1  +
call sub_1016FAA  +
mov esi eax +
pop ecx  +
pop ecx  +
cmp esi ebx +
jz loc_101315D  +
push esi  +
push dword_101FC90  +
push dword_1022A2C  +
call sub_1012C9F  +
pop ecx  +
call eax  +
test eax eax +
jnz loc_10131BB  +
push esi  +
call sub_1011942  +
pop ecx  +
jmp loc_101315D  +
push ebx  +
push esi  +
call sub_1012D96  +
or dword ptr [esi+4] 0FFFFFFFFh +
pop ecx  +
xor eax eax +
pop ecx  +
inc eax  +
jmp loc_1013164  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
lea eax [ebp+var_4] +
xor esi esi +
push eax  +
mov [ebp+var_4] esi +
mov [ebp+var_8] esi +
call sub_1011E39  +
pop ecx  +
test eax eax +
jz loc_10131FD  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
call sub_101440F  +
add esp 14h +
lea eax [ebp+var_8] +
push eax  +
call sub_1011E7A  +
pop ecx  +
test eax eax +
jz loc_1013218  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
call sub_101440F  +
add esp 14h +
cmp [ebp+var_4] 2 +
pop esi  +
jnz loc_101322A  +
cmp [ebp+var_8] 5 +
jb loc_101322A  +
xor eax eax +
inc eax  +
leave   +
retn   +
push 3  +
pop eax  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_0] eax +
push 0  +
setz al  +
push 1000h  +
push eax  +
call ds:HeapCreate  +
mov hHeap eax +
test eax eax +
jnz loc_101325C  +
xor eax eax +
pop ebp  +
retn   +
call sub_10131D2  +
mov dword_1024484 eax +
cmp eax 3 +
jnz loc_101328F  +
push 3F8h  +
call sub_1015DA4  +
pop ecx  +
test eax eax +
jnz loc_101328F  +
push hHeap  +
call ds:HeapDestroy  +
and hHeap 0 +
jmp loc_1013258  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
***
call sub_10165F4  +
xor eax eax +
mov ecx [ebp+8] +
test ecx ecx +
jz loc_10132F2  +
cmp ecx 0FFFFFFFFh +
jz loc_10132F2  +
and [ebp-4] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_10132EB  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_10132EB  +
cmp edx 10000000h +
jnb loc_10132EB  +
lea eax [edx+ecx] +
mov [ebp-1Ch] eax +
cmp dword ptr [eax] 4550h +
jz loc_10132EB  +
jmp loc_10132E6  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp-1Ch] eax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1016639  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_1013334  +
push eax  +
call sub_1013299  +
test eax eax +
jz loc_1013334  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_1013329  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_1013334  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-1Ch] +
xor ecx ebp +
call sub_1010BBF  +
jmp sub_1016639  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
mov ebx [ebp+0Ch] +
push esi  +
mov esi [ebx+8] +
xor esi dword_101FB10 +
push edi  +
mov eax [esi] +
mov byte ptr [ebp-1] 0 +
mov dword ptr [ebp-0Ch] 1 +
lea edi [ebx+10h] +
cmp eax 0FFFFFFFEh +
jz loc_10133D9  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call sub_1010BBF  +
mov ecx [esi+0Ch] +
mov eax [esi+8] +
add ecx edi +
xor ecx [eax+edi] +
call sub_1010BBF  +
mov eax [ebp+8] +
test byte ptr [eax+4] 66h +
jnz loc_101350C  +
mov ecx [ebp+10h] +
lea edx [ebp-18h] +
mov [ebx-4] edx +
mov ebx [ebx+0Ch] +
mov [ebp-18h] eax +
mov [ebp-14h] ecx +
cmp ebx 0FFFFFFFEh +
jz loc_101346C  +
lea ecx [ecx+0] +
lea eax [ebx+ebx*2] +
mov ecx [esi+eax*4+14h] +
lea eax [esi+eax*4+10h] +
mov [ebp-10h] eax +
mov eax [eax] +
mov [ebp-8] eax +
test ecx ecx +
jz loc_101343B  +
mov edx edi +
call sub_10170EE  +
mov byte ptr [ebp-1] 1 +
test eax eax +
jl loc_1013476  +
jg loc_101347F  +
mov eax [ebp-8] +
mov ebx eax +
cmp eax 0FFFFFFFEh +
jnz loc_1013410  +
cmp byte ptr [ebp-1] 0 +
jz loc_101346C  +
mov eax [esi] +
cmp eax 0FFFFFFFEh +
jz loc_101345C  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call sub_1010BBF  +
mov ecx [esi+0Ch] +
mov edx [esi+8] +
add ecx edi +
xor ecx [edx+edi] +
call sub_1010BBF  +
mov eax [ebp-0Ch] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov dword ptr [ebp-0Ch] 0 +
jmp loc_1013448  +
***
mov ecx [ebp+8] +
cmp dword ptr [ecx] 0E06D7363h +
jnz loc_10134B3  +
cmp dword_1024480 0 +
jz loc_10134B3  +
push offset dword_1024480  +
call sub_1016799  +
add esp 4 +
test eax eax +
jz loc_10134B3  +
mov edx [ebp+8] +
push 1  +
push edx  +
call dword_1024480  +
add esp 8 +
mov ecx [ebp+0Ch] +
call sub_101711E  +
mov eax [ebp+0Ch] +
cmp [eax+0Ch] ebx +
jz loc_10134D5  +
push offset dword_101FB10  +
push edi  +
mov edx ebx +
mov ecx eax +
call sub_1017138  +
mov eax [ebp+0Ch] +
mov ecx [ebp-8] +
mov [eax+0Ch] ecx +
mov eax [esi] +
cmp eax 0FFFFFFFEh +
jz loc_10134EF  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call sub_1010BBF  +
mov ecx [esi+0Ch] +
mov edx [esi+8] +
add ecx edi +
xor ecx [edx+edi] +
call sub_1010BBF  +
mov eax [ebp-10h] +
mov ecx [eax+8] +
mov edx edi +
call sub_1017105  +
mov edx 0FFFFFFFEh +
cmp [ebx+0Ch] edx +
jz loc_101346C  +
push offset dword_101FB10  +
push edi  +
mov ecx ebx +
call sub_1017138  +
jmp loc_1013448  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_101FB10 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_1013563  +
test eax ebx +
jz loc_1013563  +
not eax  +
mov dword_101FB14 eax +
jmp loc_10135BE  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_10135AA  +
test dword_101FB10 ebx +
jnz loc_10135AF  +
mov esi 0BB40E64Fh +
mov dword_101FB10 esi +
not esi  +
mov dword_101FB14 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
push esi  +
call sub_1017D24  +
mov [ebp+arg_4] eax +
mov eax [esi+0Ch] +
pop ecx  +
test al 82h +
jnz loc_10135F8  +
call sub_1014511  +
mov dword ptr [eax] 9 +
or dword ptr [esi+0Ch] 20h +
or eax 0FFFFFFFFh +
jmp loc_1013711  +
test al 40h +
jz loc_1013609  +
call sub_1014511  +
mov dword ptr [eax] 22h +
jmp loc_10135EC  +
push ebx  +
xor ebx ebx +
test al 1 +
jz loc_1013622  +
mov [esi+4] ebx +
test al 10h +
jz loc_101368E  +
mov ecx [esi+8] +
and eax 0FFFFFFFEh +
mov [esi] ecx +
mov [esi+0Ch] eax +
mov eax [esi+0Ch] +
and eax 0FFFFFFEFh +
or eax 2 +
mov [esi+0Ch] eax +
mov [esi+4] ebx +
test eax 10Ch +
jnz loc_101365C  +
cmp esi offset unk_1020598 +
jz loc_1013648  +
cmp esi offset unk_10205B8 +
jnz loc_1013655  +
push [ebp+arg_4]  +
call sub_1017B12  +
pop ecx  +
test eax eax +
jnz loc_101365C  +
push esi  +
call sub_1017ABE  +
pop ecx  +
test dword ptr [esi+0Ch] 108h +
push edi  +
jz loc_10136E5  +
mov eax [esi+8] +
mov edi [esi] +
lea ecx [eax+1] +
mov [esi] ecx +
mov ecx [esi+18h] +
sub edi eax +
dec ecx  +
cmp edi ebx +
mov [esi+4] ecx +
jle loc_1013699  +
push edi  +
push eax  +
push [ebp+arg_4]  +
call sub_10179DD  +
add esp 0Ch +
mov ebx eax +
jmp loc_10136DB  +
or eax 20h +
mov [esi+0Ch] eax +
or eax 0FFFFFFFFh +
jmp loc_1013710  +
mov eax [ebp+arg_4] +
cmp eax 0FFFFFFFFh +
jz loc_10136BA  +
cmp eax 0FFFFFFFEh +
jz loc_10136BA  +
mov ecx eax +
and eax 1Fh +
imul eax eax +
sar ecx 5 +
add eax dword_10244A0[ecx*4] +
jmp loc_10136BF  +
mov eax offset unk_101FC68 +
test byte ptr [eax+4] 20h +
jz loc_10136DB  +
push 2  +
push ebx  +
push ebx  +
push [ebp+arg_4]  +
call sub_10171DE  +
and eax edx +
add esp 10h +
cmp eax 0FFFFFFFFh +
jz loc_10136FE  +
mov eax [esi+8] +
mov cl byte ptr [ebp+arg_0] +
mov [eax] cl +
jmp loc_10136FA  +
xor edi edi +
inc edi  +
push edi  +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+arg_4]  +
call sub_10179DD  +
add esp 0Ch +
mov ebx eax +
cmp ebx edi +
jz loc_1013707  +
or dword ptr [esi+0Ch] 20h +
or eax 0FFFFFFFFh +
jmp loc_101370F  +
mov eax [ebp+arg_0] +
and eax 0FFh +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn   +
***
test byte ptr [ecx+0Ch] 40h +
jz loc_1013725  +
cmp dword ptr [ecx+8] 0 +
jz loc_1013749  +
dec dword ptr [ecx+4]  +
js loc_1013735  +
mov edx [ecx] +
mov [edx] al +
inc dword ptr [ecx]  +
movzx eax al +
jmp loc_1013741  +
movsx eax al +
push ecx  +
push eax  +
call sub_10135C7  +
pop ecx  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jnz loc_1013749  +
or [esi] eax +
retn   +
inc dword ptr [esi]  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi eax +
jmp loc_101376E  +
mov ecx [ebp+arg_8] +
mov al [ebp+arg_0] +
dec [ebp+arg_4]  +
call sub_1013719  +
cmp dword ptr [esi] 0FFFFFFFFh +
jz loc_1013774  +
cmp [ebp+arg_4] 0 +
jg loc_101375B  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [edi+0Ch] 40h +
push ebx  +
push esi  +
mov esi eax +
mov ebx ecx +
jz loc_10137BF  +
cmp dword ptr [edi+8] 0 +
jnz loc_10137BF  +
mov eax [ebp+arg_0] +
add [esi] eax +
jmp loc_10137C5  +
mov al [ebx] +
dec [ebp+arg_0]  +
mov ecx edi +
call sub_1013719  +
inc ebx  +
cmp dword ptr [esi] 0FFFFFFFFh +
jnz loc_10137BF  +
call sub_1014511  +
cmp dword ptr [eax] 2Ah +
jnz loc_10137C5  +
mov ecx edi +
mov al 3Fh +
call sub_1013719  +
cmp [ebp+arg_0] 0 +
jg loc_101379A  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 278h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
xor eax eax +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_C] +
push [ebp+arg_8]  +
lea ecx [ebp+var_24C] +
mov [ebp+var_25C] ebx +
mov [ebp+var_230] esi +
mov [ebp+var_224] edi +
mov [ebp+var_258] eax +
mov [ebp+var_210] eax +
mov [ebp+var_238] eax +
mov [ebp+var_218] eax +
mov [ebp+var_234] eax +
mov [ebp+var_260] eax +
mov [ebp+var_250] eax +
mov [ebp+var_23C] eax +
call sub_1010CA3  +
test ebx ebx +
jnz loc_101387A  +
call sub_1014511  +
mov dword ptr [eax] 16h +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
call sub_10144BA  +
add esp 14h +
cmp [ebp+var_240] 0 +
jz loc_1013872  +
mov eax [ebp+var_244] +
and dword ptr [eax+70h] 0FFFFFFFDh +
or eax 0FFFFFFFFh +
jmp loc_10143DA  +
test byte ptr [ebx+0Ch] 40h +
jnz loc_1013922  +
push ebx  +
call sub_1017D24  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_10138C4  +
push ebx  +
call sub_1017D24  +
pop ecx  +
cmp eax 0FFFFFFFEh +
jz loc_10138C4  +
push ebx  +
call sub_1017D24  +
sar eax 5 +
push ebx  +
lea esi dword_10244A0[eax*4] +
call sub_1017D24  +
and eax 1Fh +
imul eax eax +
add eax [esi] +
mov esi [ebp+var_230] +
pop ecx  +
pop ecx  +
jmp loc_10138C9  +
mov eax offset unk_101FC68 +
test byte ptr [eax+8] 3 +
jnz loc_1013845  +
push ebx  +
call sub_1017D24  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_1013913  +
push ebx  +
call sub_1017D24  +
pop ecx  +
cmp eax 0FFFFFFFEh +
jz loc_1013913  +
push ebx  +
call sub_1017D24  +
sar eax 5 +
push ebx  +
lea esi dword_10244A0[eax*4] +
call sub_1017D24  +
and eax 1Fh +
imul eax eax +
add eax [esi] +
mov esi [ebp+var_230] +
pop ecx  +
pop ecx  +
jmp loc_1013918  +
mov eax offset unk_101FC68 +
test byte ptr [eax+8] 8 +
jnz loc_1013845  +
test esi esi +
jz loc_1013845  +
mov cl [esi] +
xor edx edx +
mov [ebp+var_228] edx +
mov [ebp+var_220] edx +
mov [ebp+var_254] edx +
mov [ebp+var_211] cl +
test cl cl +
jz loc_10143C1  +
inc esi  +
cmp [ebp+var_228] 0 +
mov [ebp+var_230] esi +
jl loc_10143C1  +
mov al cl +
sub al 20h +
cmp al 58h +
ja loc_1013979  +
movsx eax cl +
movsx eax byte ptr ds:(aFlsalloc+4)[eax] +
and eax 0Fh +
jmp loc_101397B  +
xor eax eax +
movsx eax ds:byte_10022D0[edx+eax*8] +
push 7  +
sar eax 4 +
pop edx  +
mov [ebp+var_270] eax +
cmp eax edx +
ja loc_1014381  +
jmp ds:off_10143EA[eax*4]  +
xor eax eax +
or [ebp+var_218] 0FFFFFFFFh +
mov [ebp+var_260] eax +
mov [ebp+var_250] eax +
mov [ebp+var_238] eax +
mov [ebp+var_234] eax +
mov [ebp+var_210] eax +
mov [ebp+var_23C] eax +
jmp loc_1014381  +
movsx eax cl +
sub eax 20h +
jz loc_1013A22  +
sub eax 3 +
jz loc_1013A13  +
sub eax 8 +
jz loc_1013A07  +
dec eax  +
dec eax  +
jz loc_10139FB  +
sub eax 3 +
jnz loc_1014381  +
or [ebp+var_210] 8 +
jmp loc_1014381  +
or [ebp+var_210] 4 +
jmp loc_1014381  +
or [ebp+var_210] 1 +
jmp loc_1014381  +
or [ebp+var_210] 80h +
jmp loc_1014381  +
or [ebp+var_210] 2 +
jmp loc_1014381  +
cmp cl 2Ah +
jnz loc_1013A5F  +
add edi 4 +
mov [ebp+var_224] edi +
mov edi [edi-4] +
mov [ebp+var_238] edi +
test edi edi +
jge loc_1014381  +
or [ebp+var_210] 4 +
neg [ebp+var_238]  +
jmp loc_1014381  +
mov eax [ebp+var_238] +
imul eax eax +
movsx ecx cl +
lea eax [eax+ecx-30h] +
mov [ebp+var_238] eax +
jmp loc_1014381  +
and [ebp+var_218] 0 +
jmp loc_1014381  +
cmp cl 2Ah +
jnz loc_1013AB1  +
add edi 4 +
mov [ebp+var_224] edi +
mov edi [edi-4] +
mov [ebp+var_218] edi +
test edi edi +
jge loc_1014381  +
or [ebp+var_218] 0FFFFFFFFh +
jmp loc_1014381  +
mov eax [ebp+var_218] +
imul eax eax +
movsx ecx cl +
lea eax [eax+ecx-30h] +
mov [ebp+var_218] eax +
jmp loc_1014381  +
cmp cl 49h +
jz loc_1013B26  +
cmp cl 68h +
jz loc_1013B1A  +
cmp cl 6Ch +
jz loc_1013AF3  +
cmp cl 77h +
jnz loc_1014381  +
or [ebp+var_210] 800h +
jmp loc_1014381  +
cmp byte ptr [esi] 6Ch +
jnz loc_1013B0E  +
inc esi  +
or [ebp+var_210] 1000h +
mov [ebp+var_230] esi +
jmp loc_1014381  +
or [ebp+var_210] 10h +
jmp loc_1014381  +
or [ebp+var_210] 20h +
jmp loc_1014381  +
mov al [esi] +
cmp al 36h +
jnz loc_1013B49  +
cmp byte ptr [esi+1] 34h +
jnz loc_1013B49  +
inc esi  +
inc esi  +
or [ebp+var_210] 8000h +
mov [ebp+var_230] esi +
jmp loc_1014381  +
cmp al 33h +
jnz loc_1013B6A  +
cmp byte ptr [esi+1] 32h +
jnz loc_1013B6A  +
inc esi  +
inc esi  +
and [ebp+var_210] 0FFFF7FFFh +
mov [ebp+var_230] esi +
jmp loc_1014381  +
cmp al 64h +
jz loc_1014381  +
cmp al 69h +
jz loc_1014381  +
cmp al 6Fh +
jz loc_1014381  +
cmp al 75h +
jz loc_1014381  +
cmp al 78h +
jz loc_1014381  +
cmp al 58h +
jz loc_1014381  +
and [ebp+var_270] 0 +
and [ebp+var_23C] 0 +
lea eax [ebp+var_24C] +
push eax  +
movzx eax cl +
push eax  +
call sub_10158DE  +
pop ecx  +
test eax eax +
mov al [ebp+var_211] +
pop ecx  +
jz loc_1013BE7  +
lea esi [ebp+var_228] +
mov ecx ebx +
call sub_1013719  +
mov eax [ebp+var_230] +
mov al [eax] +
inc [ebp+var_230]  +
test al al +
jz loc_1013845  +
lea esi [ebp+var_228] +
mov ecx ebx +
call sub_1013719  +
jmp loc_1014381  +
movsx eax cl +
cmp eax 64h +
jg loc_1013E1C  +
jz loc_1013EB3  +
cmp eax 53h +
jg loc_1013D07  +
jz loc_1013C9B  +
sub eax 41h +
jz loc_1013C2F  +
dec eax  +
dec eax  +
jz loc_1013C7C  +
dec eax  +
dec eax  +
jz loc_1013C2F  +
dec eax  +
dec eax  +
jnz loc_10141FC  +
add cl 20h +
mov [ebp+var_260] 1 +
mov [ebp+var_211] cl +
or [ebp+var_210] 40h +
cmp [ebp+var_218] 0 +
lea eax [ebp+UsedDefaultChar] +
mov [ebp+var_21C] eax +
mov eax 200h +
mov [ebp+var_264] eax +
jge loc_1013EE3  +
mov [ebp+var_218] 6 +
jmp loc_1013F48  +
test [ebp+var_210] 830h +
jnz loc_1013D24  +
or [ebp+var_210] 800h +
jmp loc_1013D24  +
test [ebp+var_210] 830h +
jnz loc_1013CB1  +
or [ebp+var_210] 800h +
mov edx [ebp+var_218] +
cmp edx 0FFFFFFFFh +
jnz loc_1013CC1  +
mov edx 7FFFFFFFh +
add edi 4 +
test [ebp+var_210] 810h +
mov [ebp+var_224] edi +
mov edi [edi-4] +
mov [ebp+var_21C] edi +
jz loc_10141CE  +
test edi edi +
jnz loc_1013CF2  +
mov eax off_101FC9C +
mov [ebp+var_21C] eax +
mov eax [ebp+var_21C] +
mov [ebp+var_23C] 1 +
jmp loc_10141C0  +
sub eax 58h +
jz loc_1014023  +
dec eax  +
dec eax  +
jz loc_1013D8D  +
sub eax edx +
jz loc_1013C42  +
dec eax  +
dec eax  +
jnz loc_10141FC  +
add edi 4 +
test [ebp+var_210] 810h +
mov [ebp+var_224] edi +
jz loc_1013D69  +
movzx eax word ptr [edi-4] +
push eax  +
push 200h  +
lea eax [ebp+UsedDefaultChar] +
push eax  +
lea eax [ebp+var_220] +
push eax  +
call sub_1017EE7  +
add esp 10h +
test eax eax +
jz loc_1013D7C  +
mov [ebp+var_250] 1 +
jmp loc_1013D7C  +
mov al [edi-4] +
mov byte ptr [ebp+UsedDefaultChar] al +
mov [ebp+var_220] 1 +
lea eax [ebp+UsedDefaultChar] +
mov [ebp+var_21C] eax +
jmp loc_10141FC  +
mov eax [edi] +
add edi 4 +
mov [ebp+var_224] edi +
test eax eax +
jz loc_1013E00  +
mov esi [eax+4] +
xor edi edi +
cmp esi edi +
jz loc_1013E00  +
movzx ecx word ptr [eax] +
cmp [eax+2] cx +
jb loc_10143AC  +
test [ebp+var_210] 800h +
movzx eax cx +
jz loc_1013DEF  +
xor ecx ecx +
mov edx eax +
not edx  +
inc ecx  +
test dl cl +
jz loc_10143AC  +
mov edx esi +
not edx  +
test dl cl +
jz loc_10143AC  +
mov [ebp+var_21C] esi +
shr eax 1 +
mov [ebp+var_23C] ecx +
jmp loc_10141F6  +
mov [ebp+var_23C] edi +
mov [ebp+var_21C] esi +
jmp loc_10141F6  +
mov eax off_101FC98 +
mov [ebp+var_21C] eax +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1013E0E  +
sub eax edx +
jmp loc_10141F6  +
cmp eax 70h +
jg loc_101402B  +
jz loc_1014019  +
cmp eax 65h +
jl loc_10141FC  +
cmp eax 67h +
jle loc_1013C42  +
cmp eax 69h +
jz loc_1013EB3  +
cmp eax 6Eh +
jz loc_1013E6F  +
cmp eax 6Fh +
jnz loc_10141FC  +
test byte ptr [ebp+var_210] 80h +
mov [ebp+var_220] 8 +
jz loc_1013EC4  +
or [ebp+var_210] 200h +
jmp loc_1013EC4  +
mov esi [edi] +
add edi 4 +
mov [ebp+var_224] edi +
call sub_1017D5B  +
test eax eax +
jz loc_1013845  +
test byte ptr [ebp+var_210] 20h +
jz loc_1013E9C  +
mov ax word ptr [ebp+var_228] +
mov [esi] ax +
jmp loc_1013EA4  +
mov eax [ebp+var_228] +
mov [esi] eax +
mov [ebp+var_250] 1 +
jmp loc_1014365  +
or [ebp+var_210] 40h +
mov [ebp+var_220] 0Ah +
mov ecx [ebp+var_210] +
test ecx 8000h +
jz loc_101408A  +
mov eax [edi] +
mov edx [edi+4] +
add edi 8 +
jmp loc_10140C3  +
jnz loc_1013EF6  +
cmp cl 67h +
jnz loc_1013F48  +
mov [ebp+var_218] 1 +
jmp loc_1013F48  +
cmp [ebp+var_218] eax +
jle loc_1013F04  +
mov [ebp+var_218] eax +
mov ebx 0A3h +
cmp [ebp+var_218] ebx +
jle loc_1013F48  +
mov esi [ebp+var_218] +
add esi 15Dh +
push esi  +
call sub_1011A29  +
pop ecx  +
mov cl [ebp+var_211] +
mov [ebp+var_254] eax +
test eax eax +
jz loc_1013F42  +
mov [ebp+var_21C] eax +
mov [ebp+var_264] esi +
jmp loc_1013F48  +
mov [ebp+var_218] ebx +
mov eax [edi] +
add edi 8 +
mov [ebp+var_278] eax +
mov eax [edi-4] +
mov [ebp+var_274] eax +
lea eax [ebp+var_24C] +
push eax  +
push [ebp+var_260]  +
movsx eax cl +
push [ebp+var_218]  +
mov [ebp+var_224] edi +
mov edi [ebp+var_21C] +
push eax  +
push [ebp+var_264]  +
lea eax [ebp+var_278] +
push edi  +
push eax  +
push off_1020568  +
call sub_1012C9F  +
pop ecx  +
call eax  +
mov esi [ebp+var_210] +
add esp 1Ch +
and esi 80h +
jz loc_1013FCD  +
cmp [ebp+var_218] 0 +
jnz loc_1013FCD  +
lea eax [ebp+var_24C] +
push eax  +
push edi  +
push off_1020574  +
call sub_1012C9F  +
pop ecx  +
call eax  +
pop ecx  +
pop ecx  +
cmp [ebp+var_211] 67h +
jnz loc_1013FF2  +
test esi esi +
jnz loc_1013FF2  +
lea eax [ebp+var_24C] +
push eax  +
push edi  +
push off_1020570  +
call sub_1012C9F  +
pop ecx  +
call eax  +
pop ecx  +
pop ecx  +
cmp byte ptr [edi] 2Dh +
jnz loc_1014008  +
or [ebp+var_210] 100h +
inc edi  +
mov [ebp+var_21C] edi +
mov eax edi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_101400D  +
jmp loc_1013E15  +
mov [ebp+var_218] 8 +
mov [ebp+var_258] edx +
jmp loc_101404F  +
sub eax 73h +
jz loc_1013CB1  +
dec eax  +
dec eax  +
jz loc_1013EBA  +
sub eax 3 +
jnz loc_10141FC  +
mov [ebp+var_258] 27h +
test byte ptr [ebp+var_210] 80h +
mov [ebp+var_220] 10h +
jz loc_1013EC4  +
mov al byte ptr [ebp+var_258] +
add al 51h +
mov byte ptr [ebp+var_22C] 30h +
mov byte ptr [ebp+var_22C+1] al +
mov [ebp+var_234] 2 +
jmp loc_1013EC4  +
test ecx 1000h +
jnz loc_1013ED6  +
add edi 4 +
test cl 20h +
jz loc_10140B6  +
mov [ebp+var_224] edi +
test cl 40h +
jz loc_10140AF  +
movsx eax word ptr [edi-4] +
jmp loc_10140B3  +
movzx eax word ptr [edi-4] +
cdq   +
jmp loc_10140C9  +
mov eax [edi-4] +
test cl 40h +
jz loc_10140C1  +
cdq   +
jmp loc_10140C3  +
xor edx edx +
mov [ebp+var_224] edi +
test cl 40h +
jz loc_10140E9  +
test edx edx +
jg loc_10140E9  +
jl loc_10140D8  +
test eax eax +
jnb loc_10140E9  +
neg eax  +
adc edx 0 +
neg edx  +
or [ebp+var_210] 100h +
test [ebp+var_210] 9000h +
mov ebx edx +
mov edi eax +
jnz loc_10140FB  +
xor ebx ebx +
cmp [ebp+var_218] 0 +
jge loc_1014110  +
mov [ebp+var_218] 1 +
jmp loc_101412A  +
and [ebp+var_210] 0FFFFFFF7h +
mov eax 200h +
cmp [ebp+var_218] eax +
jle loc_101412A  +
mov [ebp+var_218] eax +
mov eax edi +
or eax ebx +
jnz loc_1014136  +
and [ebp+var_234] eax +
lea esi [ebp+var_D] +
mov eax [ebp+var_218] +
dec [ebp+var_218]  +
test eax eax +
jg loc_101414F  +
mov eax edi +
or eax ebx +
jz loc_101417C  +
mov eax [ebp+var_220] +
cdq   +
push edx  +
push eax  +
push ebx  +
push edi  +
call sub_1015300  +
add ecx 30h +
cmp ecx 39h +
mov [ebp+var_264] ebx +
mov edi eax +
mov ebx edx +
jle loc_1014177  +
add ecx [ebp+var_258] +
mov [esi] cl +
dec esi  +
jmp loc_1014139  +
lea eax [ebp+var_D] +
sub eax esi +
inc esi  +
test [ebp+var_210] 200h +
mov [ebp+var_220] eax +
mov [ebp+var_21C] esi +
jz loc_10141FC  +
test eax eax +
jz loc_10141A5  +
mov ecx esi +
cmp byte ptr [ecx] 30h +
jz loc_10141FC  +
dec [ebp+var_21C]  +
mov ecx [ebp+var_21C] +
mov byte ptr [ecx] 30h +
inc eax  +
jmp loc_10141F6  +
dec edx  +
cmp word ptr [eax] 0 +
jz loc_10141C4  +
inc eax  +
inc eax  +
test edx edx +
jnz loc_10141B7  +
sub eax [ebp+var_21C] +
sar eax 1 +
jmp loc_10141F6  +
test edi edi +
jnz loc_10141DD  +
mov eax off_101FC98 +
mov [ebp+var_21C] eax +
mov eax [ebp+var_21C] +
jmp loc_10141EC  +
dec edx  +
cmp byte ptr [eax] 0 +
jz loc_10141F0  +
inc eax  +
test edx edx +
jnz loc_10141E5  +
sub eax [ebp+var_21C] +
mov [ebp+var_220] eax +
cmp [ebp+var_250] 0 +
jnz loc_1014365  +
mov eax [ebp+var_210] +
test al 40h +
jz loc_1014245  +
test eax 100h +
jz loc_1014223  +
mov byte ptr [ebp+var_22C] 2Dh +
jmp loc_101423B  +
test al 1 +
jz loc_1014230  +
mov byte ptr [ebp+var_22C] 2Bh +
jmp loc_101423B  +
test al 2 +
jz loc_1014245  +
mov byte ptr [ebp+var_22C] 20h +
mov [ebp+var_234] 1 +
mov ebx [ebp+var_238] +
sub ebx [ebp+var_220] +
sub ebx [ebp+var_234] +
test byte ptr [ebp+var_210] 0Ch +
jnz loc_1014277  +
push [ebp+var_25C]  +
lea eax [ebp+var_228] +
push ebx  +
push 20h  +
call sub_1013751  +
add esp 0Ch +
push [ebp+var_234]  +
mov edi [ebp+var_25C] +
lea eax [ebp+var_228] +
lea ecx [ebp+var_22C] +
call sub_101377C  +
test byte ptr [ebp+var_210] 8 +
pop ecx  +
jz loc_10142B9  +
test byte ptr [ebp+var_210] 4 +
jnz loc_10142B9  +
push edi  +
push ebx  +
push 30h  +
lea eax [ebp+var_228] +
call sub_1013751  +
add esp 0Ch +
cmp [ebp+var_23C] 0 +
mov eax [ebp+var_220] +
jz loc_101432E  +
test eax eax +
jle loc_101432E  +
mov esi [ebp+var_21C] +
mov [ebp+var_264] eax +
movzx eax word ptr [esi] +
dec [ebp+var_264]  +
push eax  +
push 6  +
lea eax [ebp+var_D+1] +
push eax  +
lea eax [ebp+var_26C] +
inc esi  +
push eax  +
inc esi  +
call sub_1017EE7  +
add esp 10h +
test eax eax +
jnz loc_1014325  +
cmp [ebp+var_26C] eax +
jz loc_1014325  +
push [ebp+var_26C]  +
lea eax [ebp+var_228] +
lea ecx [ebp+var_D+1] +
call sub_101377C  +
cmp [ebp+var_264] 0 +
pop ecx  +
jnz loc_10142D8  +
jmp loc_1014341  +
or [ebp+var_228] 0FFFFFFFFh +
jmp loc_1014341  +
mov ecx [ebp+var_21C] +
push eax  +
lea eax [ebp+var_228] +
call sub_101377C  +
pop ecx  +
cmp [ebp+var_228] 0 +
jl loc_1014365  +
test byte ptr [ebp+var_210] 4 +
jz loc_1014365  +
push edi  +
push ebx  +
push 20h  +
lea eax [ebp+var_228] +
call sub_1013751  +
add esp 0Ch +
cmp [ebp+var_254] 0 +
jz loc_1014381  +
push [ebp+var_254]  +
call sub_1011942  +
and [ebp+var_254] 0 +
pop ecx  +
mov esi [ebp+var_230] +
mov al [esi] +
mov [ebp+var_211] al +
test al al +
jz loc_10143C1  +
mov edx [ebp+var_270] +
mov ebx [ebp+var_25C] +
mov edi [ebp+var_224] +
mov cl al +
jmp loc_101394E  +
call sub_1014511  +
push edi  +
push edi  +
push edi  +
push edi  +
mov dword ptr [eax] 16h +
push edi  +
jmp loc_1013857  +
cmp [ebp+var_240] 0 +
jz loc_10143D4  +
mov eax [ebp+var_244] +
and dword ptr [eax+70h] 0FFFFFFFDh +
mov eax [ebp+var_228] +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010BBF  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2D0h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
mov [ebp+var_220] eax +
mov [ebp+var_224] ecx +
mov [ebp+var_228] edx +
mov [ebp+var_22C] ebx +
mov [ebp+var_230] esi +
mov [ebp+var_234] edi +
mov [ebp+var_208] ss +
mov [ebp+var_214] cs +
mov [ebp+var_238] ds +
mov [ebp+var_23C] es +
mov [ebp+var_240] fs +
mov [ebp+var_244] gs +
pushf   +
pop [ebp+var_210]  +
mov eax [ebp+4] +
mov [ebp+var_218] eax +
lea eax [ebp+4] +
mov [ebp+var_2D0] 10001h +
mov [ebp+var_20C] eax +
mov eax [eax-4] +
push offset OutputString  +
mov [ebp+var_21C] eax +
call ds:OutputDebugStringA  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1010BBF  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp sub_101440F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor ecx ecx +
cmp eax dword_101FCA0[ecx*8] +
jz loc_10144F0  +
inc ecx  +
cmp ecx 2Dh +
jb loc_10144D4  +
lea ecx [eax-13h] +
cmp ecx 11h +
ja loc_10144F9  +
push 0Dh  +
pop eax  +
pop ebp  +
retn   +
mov eax dword_101FCA4[ecx*8] +
pop ebp  +
retn   +
add eax 0FFFFFF44h +
push 0Eh  +
pop ecx  +
cmp ecx eax +
sbb eax eax +
and eax ecx +
add eax 8 +
pop ebp  +
retn   +
***
call sub_1012E63  +
test eax eax +
jnz loc_1014520  +
mov eax offset unk_101FE08 +
retn   +
add eax 8 +
retn   +
***
call sub_1012E63  +
test eax eax +
jnz loc_1014538  +
mov eax offset unk_101FE0C +
retn   +
add eax 0Ch +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
call sub_1014529  +
mov ecx [ebp+arg_0] +
push ecx  +
mov [eax] ecx +
call sub_10144CA  +
pop ecx  +
mov esi eax +
call sub_1014511  +
mov [eax] esi +
pop esi  +
pop ebp  +
retn   +
***
sub esp 4 +
mov [ebp+var_4] edi +
mov edi [ebp+arg_0] +
mov ecx [ebp+arg_4] +
shr ecx 7 +
pxor xmm0 xmm0 +
jmp loc_1014589  +
lea esp [esp+0] +
nop   +
movdqa oword ptr [edi] xmm0 +
movdqa oword ptr [edi+10h] xmm0 +
movdqa oword ptr [edi+20h] xmm0 +
movdqa oword ptr [edi+30h] xmm0 +
movdqa oword ptr [edi+40h] xmm0 +
movdqa oword ptr [edi+50h] xmm0 +
movdqa oword ptr [edi+60h] xmm0 +
movdqa oword ptr [edi+70h] xmm0 +
lea edi [edi+80h] +
dec ecx  +
jnz loc_1014589  +
mov edi [ebp+var_4] +
mov esp ebp +
pop ebp  +
retn   +
***
sub esp 10h +
mov [ebp+var_4] edi +
mov eax [ebp+arg_0] +
cdq   +
mov edi eax +
xor edi edx +
sub edi edx +
and edi 0Fh +
xor edi edx +
sub edi edx +
test edi edi +
jnz loc_101461F  +
mov ecx [ebp+arg_8] +
mov edx ecx +
and edx 7Fh +
mov [ebp+var_C] edx +
cmp ecx edx +
jz loc_1014604  +
sub ecx edx +
push ecx  +
push eax  +
call sub_1014569  +
add esp 8 +
mov eax [ebp+arg_0] +
mov edx [ebp+var_C] +
test edx edx +
jz loc_101464D  +
add eax [ebp+arg_8] +
sub eax edx +
mov [ebp+var_8] eax +
xor eax eax +
mov edi [ebp+var_8] +
mov ecx [ebp+var_C] +
stos   +
mov eax [ebp+arg_0] +
jmp loc_101464D  +
neg edi  +
add edi 10h +
mov [ebp+var_10] edi +
xor eax eax +
mov edi [ebp+arg_0] +
mov ecx [ebp+var_10] +
stos   +
mov eax [ebp+var_10] +
mov ecx [ebp+arg_0] +
mov edx [ebp+arg_8] +
add ecx eax +
sub edx eax +
push edx  +
push 0  +
push ecx  +
call sub_10145C5  +
add esp 0Ch +
mov eax [ebp+arg_0] +
mov edi [ebp+var_4] +
mov esp ebp +
pop ebp  +
retn   +
***
call sub_10165F4  +
and dword ptr [ebp-4] 0 +
movapd xmm0 xmm1 +
mov dword ptr [ebp-1Ch] 1 +
jmp loc_1014699  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
cmp eax 0C0000005h +
jz loc_101468E  +
cmp eax 0C000001Dh +
jz loc_101468E  +
xor eax eax +
retn   +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
and dword ptr [ebp-1Ch] 0 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov eax [ebp-1Ch] +
call sub_1016639  +
retn   +
***
push ebp  +
mov ebp esp +
sub esp 18h +
xor eax eax +
push ebx  +
mov [ebp-4] eax +
mov [ebp-0Ch] eax +
mov [ebp-8] eax +
push ebx  +
pushf   +
pop eax  +
mov ecx eax +
xor eax 200000h +
push eax  +
popf   +
pushf   +
pop edx  +
sub edx ecx +
jz loc_10146F3  +
push ecx  +
popf   +
xor eax eax +
cpuid   +
mov [ebp-0Ch] eax +
mov [ebp-18h] ebx +
mov [ebp-14h] edx +
mov [ebp-10h] ecx +
mov eax 1 +
cpuid   +
mov [ebp-4] edx +
mov [ebp-8] eax +
pop ebx  +
test dword ptr [ebp-4] 4000000h +
jz loc_101470B  +
call sub_1014659  +
test eax eax +
jz loc_101470B  +
xor eax eax +
inc eax  +
jmp loc_101470D  +
xor eax eax +
pop ebx  +
leave   +
retn   +
***
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_1022B38 eax +
mov dword_1022B34 ecx +
mov dword_1022B30 edx +
mov dword_1022B2C ebx +
mov dword_1022B28 esi +
mov dword_1022B24 edi +
mov word_1022B50 ss +
mov word_1022B44 cs +
mov word_1022B20 ds +
mov word_1022B1C es +
mov word_1022B18 fs +
mov word_1022B14 gs +
pushf   +
pop dword_1022B48  +
mov eax [ebp+0] +
mov dword_1022B3C eax +
mov eax [ebp+4] +
mov dword_1022B40 eax +
lea eax [ebp+8] +
mov dword_1022B4C eax +
mov eax [ebp-320h] +
mov dword_1022A88 10001h +
mov eax dword_1022B40 +
mov dword_1022A44 eax +
mov dword_1022A38 0C0000409h +
mov dword_1022A3C 1 +
mov eax dword_101FB10 +
mov [ebp-328h] eax +
mov eax dword_101FB14 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
sub eax 3A4h +
jz loc_1014837  +
sub eax 4 +
jz loc_1014831  +
sub eax 0Dh +
jz loc_101482B  +
dec eax  +
jz loc_1014825  +
xor eax eax +
retn   +
mov eax 404h +
retn   +
mov eax 412h +
retn   +
mov eax 804h +
retn   +
mov eax 411h +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov esi eax +
push 101h  +
xor edi edi +
lea eax [esi+1Ch] +
push edi  +
push eax  +
call sub_1010B40  +
xor eax eax +
movzx ecx ax +
mov eax ecx +
mov [esi+4] edi +
mov [esi+8] edi +
mov [esi+0Ch] edi +
shl ecx 10h +
or eax ecx +
lea edi [esi+10h] +
stos   +
stos   +
stos   +
mov ecx offset Addend +
add esp 0Ch +
lea eax [esi+1Ch] +
sub ecx esi +
mov edi 101h +
mov dl [ecx+eax] +
mov [eax] dl +
inc eax  +
dec edi  +
jnz loc_1014886  +
lea eax [esi+11Dh] +
mov esi 100h +
mov dl [eax+ecx] +
mov [eax] dl +
inc eax  +
dec esi  +
jnz loc_101489A  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 51Ch +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push edi  +
lea eax [ebp+CPInfo] +
push eax  +
push dword ptr [esi+4]  +
call ds:GetCPInfo  +
mov edi 100h +
test eax eax +
jz loc_10149DA  +
xor eax eax +
mov [ebp+eax+SrcStr] al +
inc eax  +
cmp eax edi +
jb loc_10148E1  +
mov al [ebp+CPInfo.LeadByte] +
mov [ebp+SrcStr] 20h +
test al al +
jz loc_101492C  +
lea ebx [ebp+CPInfo.LeadByte+1] +
movzx ecx al +
movzx eax byte ptr [ebx] +
cmp ecx eax +
ja loc_1014924  +
sub eax ecx +
inc eax  +
push eax  +
lea edx [ebp+ecx+SrcStr] +
push 20h  +
push edx  +
call sub_1010B40  +
add esp 0Ch +
inc ebx  +
mov al [ebx] +
inc ebx  +
test al al +
jnz loc_1014904  +
push 0  +
push dword ptr [esi+0Ch]  +
lea eax [ebp+CharType] +
push dword ptr [esi+4]  +
push eax  +
push edi  +
lea eax [ebp+SrcStr] +
push eax  +
push 1  +
push 0  +
call sub_10180C8  +
xor ebx ebx +
push ebx  +
push dword ptr [esi+4]  +
lea eax [ebp+var_204] +
push edi  +
push eax  +
push edi  +
lea eax [ebp+SrcStr] +
push eax  +
push edi  +
push dword ptr [esi+0Ch]  +
push ebx  +
call sub_1015893  +
add esp 44h +
push ebx  +
push dword ptr [esi+4]  +
lea eax [ebp+var_304] +
push edi  +
push eax  +
push edi  +
lea eax [ebp+SrcStr] +
push eax  +
push 200h  +
push dword ptr [esi+0Ch]  +
push ebx  +
call sub_1015893  +
add esp 24h +
xor eax eax +
movzx ecx [ebp+eax*2+CharType] +
test cl 1 +
jz loc_10149B1  +
or byte ptr [esi+eax+1Dh] 10h +
mov cl byte ptr [ebp+eax+var_204] +
jmp loc_10149C2  +
test cl 2 +
jz loc_10149CB  +
or byte ptr [esi+eax+1Dh] 20h +
mov cl byte ptr [ebp+eax+var_304] +
mov [esi+eax+11Dh] cl +
jmp loc_10149D3  +
mov byte ptr [esi+eax+11Dh] 0 +
inc eax  +
cmp eax edi +
jb loc_1014996  +
jmp loc_1014A30  +
lea eax [esi+11Dh] +
mov [ebp+var_51C] 0FFFFFF9Fh +
xor ecx ecx +
sub [ebp+var_51C] eax +
mov edx [ebp+var_51C] +
lea eax [esi+ecx+11Dh] +
add edx eax +
lea ebx [edx+20h] +
cmp ebx 19h +
ja loc_1014A15  +
or byte ptr [esi+ecx+1Dh] 10h +
mov dl cl +
add dl 20h +
jmp loc_1014A24  +
cmp edx 19h +
ja loc_1014A28  +
or byte ptr [esi+ecx+1Dh] 20h +
mov dl cl +
sub dl 20h +
mov [eax] dl +
jmp loc_1014A2B  +
mov byte ptr [eax] 0 +
inc ecx  +
cmp ecx edi +
jb loc_10149F2  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_1010BBF  +
leave   +
retn   +
***
call sub_10165F4  +
pop ecx  +
retn   +
***
jmp loc_1014ADA  +
***
mov esi [edi+68h] +
test esi esi +
jnz loc_1014AE6  +
push 20h  +
call sub_1011D9C  +
pop ecx  +
mov eax esi +
call sub_1016639  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
xor ebx ebx +
push ebx  +
lea ecx [ebp+var_10] +
call sub_1010CA3  +
mov dword_1022D54 ebx +
cmp esi 0FFFFFFFEh +
jnz loc_1014B30  +
mov dword_1022D54 1 +
call ds:GetOEMCP  +
cmp [ebp+var_4] bl +
jz loc_1014B6C  +
mov ecx [ebp+var_8] +
and dword ptr [ecx+70h] 0FFFFFFFDh +
jmp loc_1014B6C  +
cmp esi 0FFFFFFFDh +
jnz loc_1014B47  +
mov dword_1022D54 1 +
call ds:GetACP  +
jmp loc_1014B22  +
cmp esi 0FFFFFFFCh +
jnz loc_1014B5E  +
mov eax [ebp+var_10] +
mov eax [eax+4] +
mov dword_1022D54 1 +
jmp loc_1014B22  +
cmp [ebp+var_4] bl +
jz loc_1014B6A  +
mov eax [ebp+var_8] +
and dword ptr [eax+70h] 0FFFFFFFDh +
mov eax esi +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
call sub_1014AF3  +
mov edi eax +
xor esi esi +
mov [ebp+arg_0] edi +
cmp edi esi +
jnz loc_1014BAD  +
mov eax ebx +
call sub_1014842  +
xor eax eax +
jmp loc_1014D1C  +
mov [ebp+var_1C] esi +
xor eax eax +
cmp dword_1020240[eax] edi +
jz loc_1014C21  +
inc [ebp+var_1C]  +
add eax 30h +
cmp eax 0F0h +
jb loc_1014BB2  +
lea eax [ebp+CPInfo] +
push eax  +
push edi  +
call ds:GetCPInfo  +
test eax eax +
jz loc_1014D0D  +
push 101h  +
lea eax [ebx+1Ch] +
push esi  +
push eax  +
call sub_1010B40  +
xor edx edx +
inc edx  +
add esp 0Ch +
mov [ebx+4] edi +
mov [ebx+0Ch] esi +
cmp [ebp+CPInfo.MaxCharSize] edx +
jbe loc_1014CF6  +
cmp [ebp+CPInfo.LeadByte] 0 +
jz loc_1014CD7  +
lea esi [ebp+CPInfo.LeadByte+1] +
mov cl [esi] +
test cl cl +
jz loc_1014CD7  +
movzx eax byte ptr [esi-1] +
movzx ecx cl +
jmp loc_1014CC7  +
push 101h  +
lea eax [ebx+1Ch] +
push esi  +
push eax  +
call sub_1010B40  +
mov ecx [ebp+var_1C] +
add esp 0Ch +
imul ecx ecx +
mov [ebp+var_20] esi +
lea esi dword_1020250[ecx] +
mov [ebp+var_1C] esi +
jmp loc_1014C71  +
mov al [esi+1] +
test al al +
jz loc_1014C76  +
movzx edi byte ptr [esi] +
movzx eax al +
jmp loc_1014C68  +
mov eax [ebp+var_20] +
mov al byte_102023C[eax] +
or [ebx+edi+1Dh] al +
movzx eax byte ptr [esi+1] +
inc edi  +
cmp edi eax +
jbe loc_1014C56  +
mov edi [ebp+arg_0] +
inc esi  +
inc esi  +
cmp byte ptr [esi] 0 +
jnz loc_1014C47  +
mov esi [ebp+var_1C] +
inc [ebp+var_20]  +
add esi 8 +
cmp [ebp+var_20] 4 +
mov [ebp+var_1C] esi +
jb loc_1014C71  +
mov eax edi +
mov [ebx+4] edi +
mov dword ptr [ebx+8] 1 +
call sub_101480E  +
push 6  +
mov [ebx+0Ch] eax +
lea eax [ebx+10h] +
lea ecx dword_1020244[ecx] +
pop edx  +
mov si [ecx] +
inc ecx  +
mov [eax] si +
inc ecx  +
inc eax  +
inc eax  +
dec edx  +
jnz loc_1014CA8  +
mov esi ebx +
call sub_10148AB  +
jmp loc_1014BA6  +
or byte ptr [ebx+eax+1Dh] 4 +
inc eax  +
cmp eax ecx +
jbe loc_1014CC1  +
inc esi  +
inc esi  +
cmp byte ptr [esi-1] 0 +
jnz loc_1014C0B  +
lea eax [ebx+1Eh] +
mov ecx 0FEh +
or byte ptr [eax] 8 +
inc eax  +
dec ecx  +
jnz loc_1014CDF  +
mov eax [ebx+4] +
call sub_101480E  +
mov [ebx+0Ch] eax +
mov [ebx+8] edx +
jmp loc_1014CF9  +
mov [ebx+8] esi +
xor eax eax +
movzx ecx ax +
mov eax ecx +
shl ecx 10h +
or eax ecx +
lea edi [ebx+10h] +
stos   +
stos   +
stos   +
jmp loc_1014CB5  +
cmp dword_1022D54 esi +
jnz loc_1014B9F  +
or eax 0FFFFFFFFh +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010BBF  +
leave   +
retn   +
***
call sub_10165F4  +
pop ecx  +
retn   +
***
jmp loc_1014EC1  +
***
cmp eax 0FFFFFFFFh +
jnz loc_1014EC1  +
cmp ebx offset Addend +
jz loc_1014EB0  +
push ebx  +
call sub_1011942  +
pop ecx  +
call sub_1014511  +
mov dword ptr [eax] 16h +
jmp loc_1014EC1  +
and dword ptr [ebp-20h] 0 +
mov eax [ebp-20h] +
call sub_1016639  +
retn   +
***
cmp dword_10245AC 0 +
jnz loc_1014EEA  +
push 0FFFFFFFDh  +
call sub_1014D30  +
pop ecx  +
mov dword_10245AC 1 +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+0BCh] +
xor ebx ebx +
push edi  +
cmp eax ebx +
jz loc_1014F78  +
cmp eax offset off_1020970 +
jz loc_1014F78  +
mov eax [esi+0B0h] +
cmp eax ebx +
jz loc_1014F78  +
cmp [eax] ebx +
jnz loc_1014F78  +
mov eax [esi+0B8h] +
cmp eax ebx +
jz loc_1014F3F  +
cmp [eax] ebx +
jnz loc_1014F3F  +
push eax  +
call sub_1011942  +
push dword ptr [esi+0BCh]  +
call sub_10184F9  +
pop ecx  +
pop ecx  +
mov eax [esi+0B4h] +
cmp eax ebx +
jz loc_1014F60  +
cmp [eax] ebx +
jnz loc_1014F60  +
push eax  +
call sub_1011942  +
push dword ptr [esi+0BCh]  +
call sub_101848B  +
pop ecx  +
pop ecx  +
push dword ptr [esi+0B0h]  +
call sub_1011942  +
push dword ptr [esi+0BCh]  +
call sub_1011942  +
pop ecx  +
pop ecx  +
mov eax [esi+0C0h] +
cmp eax ebx +
jz loc_1014FC6  +
cmp [eax] ebx +
jnz loc_1014FC6  +
mov eax [esi+0C4h] +
sub eax 0FEh +
push eax  +
call sub_1011942  +
mov eax [esi+0CCh] +
mov edi 80h +
sub eax edi +
push eax  +
call sub_1011942  +
mov eax [esi+0D0h] +
sub eax edi +
push eax  +
call sub_1011942  +
push dword ptr [esi+0C0h]  +
call sub_1011942  +
add esp 10h +
lea edi [esi+0D4h] +
mov eax [edi] +
cmp eax offset off_1020800 +
jz loc_1014FEC  +
cmp [eax+0B4h] ebx +
jnz loc_1014FEC  +
push eax  +
call sub_101810F  +
push dword ptr [edi]  +
call sub_1011942  +
pop ecx  +
pop ecx  +
lea edi [esi+50h] +
mov [ebp+arg_0] 6 +
cmp dword ptr [edi-8] offset unk_1020338 +
jz loc_1015010  +
mov eax [edi] +
cmp eax ebx +
jz loc_1015010  +
cmp [eax] ebx +
jnz loc_1015010  +
push eax  +
call sub_1011942  +
pop ecx  +
cmp [edi-4] ebx +
jz loc_1015027  +
mov eax [edi+4] +
cmp eax ebx +
jz loc_1015027  +
cmp [eax] ebx +
jnz loc_1015027  +
push eax  +
call sub_1011942  +
pop ecx  +
add edi 10h +
dec [ebp+arg_0]  +
jnz loc_1014FF6  +
push esi  +
call sub_1011942  +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ds:InterlockedIncrement +
push edi  +
mov edi [ebp+lpAddend] +
push edi  +
call esi  +
mov eax [edi+0B0h] +
test eax eax +
jz loc_1015061  +
push eax  +
call esi  +
mov eax [edi+0B8h] +
test eax eax +
jz loc_101506E  +
push eax  +
call esi  +
mov eax [edi+0B4h] +
test eax eax +
jz loc_101507B  +
push eax  +
call esi  +
mov eax [edi+0C0h] +
test eax eax +
jz loc_1015088  +
push eax  +
call esi  +
lea ebx [edi+50h] +
mov [ebp+lpAddend] 6 +
cmp dword ptr [ebx-8] offset unk_1020338 +
jz loc_10150A4  +
mov eax [ebx] +
test eax eax +
jz loc_10150A4  +
push eax  +
call esi  +
cmp dword ptr [ebx-4] 0 +
jz loc_10150B4  +
mov eax [ebx+4] +
test eax eax +
jz loc_10150B4  +
push eax  +
call esi  +
add ebx 10h +
dec [ebp+lpAddend]  +
jnz loc_1015092  +
mov eax [edi+0D4h] +
add eax 0B4h +
push eax  +
call esi  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+lpAddend] +
test edi edi +
jz loc_1015168  +
push ebx  +
push esi  +
mov esi ds:InterlockedDecrement +
push edi  +
call esi  +
mov eax [edi+0B0h] +
test eax eax +
jz loc_10150FD  +
push eax  +
call esi  +
mov eax [edi+0B8h] +
test eax eax +
jz loc_101510A  +
push eax  +
call esi  +
mov eax [edi+0B4h] +
test eax eax +
jz loc_1015117  +
push eax  +
call esi  +
mov eax [edi+0C0h] +
test eax eax +
jz loc_1015124  +
push eax  +
call esi  +
lea ebx [edi+50h] +
mov [ebp+lpAddend] 6 +
cmp dword ptr [ebx-8] offset unk_1020338 +
jz loc_1015140  +
mov eax [ebx] +
test eax eax +
jz loc_1015140  +
push eax  +
call esi  +
cmp dword ptr [ebx-4] 0 +
jz loc_1015150  +
mov eax [ebx+4] +
test eax eax +
jz loc_1015150  +
push eax  +
call esi  +
add ebx 10h +
dec [ebp+lpAddend]  +
jnz loc_101512E  +
mov eax [edi+0D4h] +
add eax 0B4h +
push eax  +
call esi  +
pop esi  +
pop ebx  +
mov eax edi +
pop edi  +
pop ebp  +
retn   +
***
test edi edi +
jz loc_10151AD  +
test eax eax +
jz loc_10151AD  +
push esi  +
mov esi [eax] +
cmp esi edi +
jz loc_10151A9  +
push edi  +
mov [eax] edi +
call sub_1015040  +
pop ecx  +
test esi esi +
jz loc_10151A9  +
push esi  +
call sub_10150D4  +
cmp dword ptr [esi] 0 +
pop ecx  +
jnz loc_10151A9  +
cmp esi offset unk_1020340 +
jz loc_10151A9  +
push esi  +
call sub_1014EF2  +
pop ecx  +
mov eax edi +
pop esi  +
retn   +
xor eax eax +
retn   +
***
call sub_10165F4  +
pop ecx  +
retn   +
***
call sub_1012EE4  +
mov esi [eax+6Ch] +
test esi esi +
jnz loc_1015228  +
push 20h  +
call sub_1011D9C  +
pop ecx  +
mov eax esi +
call sub_1016639  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push [ebp+arg_8]  +
lea ecx [ebp+var_18] +
call sub_1010CA3  +
mov ebx [ebp+arg_0] +
lea eax [ebx+1] +
cmp eax 100h +
ja loc_1015265  +
mov eax [ebp+var_18] +
mov eax [eax+0C8h] +
movzx eax word ptr [eax+ebx*2] +
jmp loc_10152DA  +
mov [ebp+arg_0] ebx +
sar [ebp+arg_0] 8 +
lea eax [ebp+var_18] +
push eax  +
mov eax [ebp+arg_0] +
and eax 0FFh +
push eax  +
call sub_10158DE  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1015296  +
mov al byte ptr [ebp+arg_0] +
push 2  +
mov [ebp+SrcStr] al +
mov [ebp-7] bl +
mov [ebp+var_6] 0 +
pop ecx  +
jmp loc_10152A0  +
xor ecx ecx +
mov [ebp+SrcStr] bl +
mov byte ptr [ebp-7] 0 +
inc ecx  +
mov eax [ebp+var_18] +
push 1  +
push dword ptr [eax+14h]  +
push dword ptr [eax+4]  +
lea eax [ebp+CharType] +
push eax  +
push ecx  +
lea eax [ebp+SrcStr] +
push eax  +
lea eax [ebp+var_18] +
push 1  +
push eax  +
call sub_10180C8  +
add esp 20h +
test eax eax +
jnz loc_10152D6  +
cmp [ebp+var_C] al +
jz loc_10152D2  +
mov eax [ebp+var_10] +
and dword ptr [eax+70h] 0FFFFFFFDh +
xor eax eax +
jmp loc_10152EA  +
movzx eax [ebp+CharType] +
and eax [ebp+arg_4] +
cmp [ebp+var_C] 0 +
jz loc_10152EA  +
mov ecx [ebp+var_10] +
and dword ptr [ecx+70h] 0FFFFFFFDh +
pop ebx  +
leave   +
retn   +
***
or eax eax +
jnz loc_1015331  +
mov ecx [esp+arg_8] +
mov eax [esp+arg_4] +
xor edx edx +
div  ecx +
mov ebx eax +
mov eax [esp+arg_0] +
div  ecx +
mov esi eax +
mov eax ebx +
mul  [esp+arg_8] +
mov ecx eax +
mov eax esi +
mul  [esp+arg_8] +
add edx ecx +
jmp loc_1015378  +
mov ecx eax +
mov ebx [esp+arg_8] +
mov edx [esp+arg_4] +
mov eax [esp+arg_0] +
shr ecx 1 +
rcr ebx 1 +
shr edx 1 +
rcr eax 1 +
or ecx ecx +
jnz loc_101533F  +
div  ebx +
mov esi eax +
mul  [esp+arg_C] +
mov ecx eax +
mov eax [esp+arg_8] +
mul  esi +
add edx ecx +
jb loc_101536D  +
cmp edx [esp+arg_4] +
ja loc_101536D  +
jb loc_1015376  +
cmp eax [esp+arg_0] +
jbe loc_1015376  +
dec esi  +
sub eax [esp+arg_8] +
sbb edx [esp+arg_C] +
xor ebx ebx +
sub eax [esp+arg_0] +
sbb edx [esp+arg_4] +
neg edx  +
neg eax  +
sbb edx 0 +
mov ecx edx +
mov edx ebx +
mov ebx ecx +
mov ecx eax +
mov eax esi +
pop esi  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_10153AE  +
mov ecx [ebp+arg_4] +
mov [eax] ecx +
add eax 8 +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_10153D3  +
sub eax 8 +
cmp dword ptr [eax] 0DDDDh +
jnz loc_10153D3  +
push eax  +
call sub_1011942  +
pop ecx  +
pop ebp  +
retn   +
***
call sub_1013340  +
mov esi [ebp+24h] +
xor ebx ebx +
cmp dword_1022D94 ebx +
jnz loc_101542B  +
push ebx  +
push ebx  +
xor edi edi +
inc edi  +
push edi  +
push offset SrcStr  +
push 100h  +
push ebx  +
call ds:LCMapStringW  +
test eax eax +
jz loc_1015416  +
mov dword_1022D94 edi +
jmp loc_101542B  +
call ds:GetLastError  +
cmp eax 78h +
jnz loc_101542B  +
mov dword_1022D94 2 +
cmp [ebp+18h] ebx +
jle loc_1015452  +
mov ecx [ebp+18h] +
mov eax [ebp+14h] +
dec ecx  +
cmp [eax] bl +
jz loc_1015443  +
inc eax  +
cmp ecx ebx +
jnz loc_1015436  +
or ecx 0FFFFFFFFh +
mov eax [ebp+18h] +
sub eax ecx +
dec eax  +
cmp eax [ebp+18h] +
jge loc_101544F  +
inc eax  +
mov [ebp+18h] eax +
mov eax dword_1022D94 +
cmp eax 2 +
jz loc_10156CD  +
cmp eax ebx +
jz loc_10156CD  +
cmp eax 1 +
jnz loc_1015708  +
mov [ebp-2Ch] ebx +
mov [ebp-24h] ebx +
mov [ebp-34h] ebx +
mov [ebp-28h] ebx +
cmp esi ebx +
jnz loc_101548C  +
mov eax [ebp+8] +
mov eax [eax] +
mov esi [eax+4] +
mov [ebp+24h] esi +
push ebx  +
push ebx  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
xor eax eax +
cmp [ebp+28h] ebx +
setnz al  +
lea eax ds:1[eax*8] +
push eax  +
push esi  +
call ds:MultiByteToWideChar  +
mov edi eax +
mov [ebp-30h] edi +
cmp edi ebx +
jz loc_1015708  +
mov dword ptr [ebp-4] 1 +
jle loc_10154FF  +
push 0FFFFFFE0h  +
pop eax  +
xor edx edx +
div  edi +
cmp eax 2 +
jb loc_10154FF  +
lea eax [edi+edi+8] +
cmp eax 400h +
ja loc_10154E9  +
call sub_1018A10  +
mov [ebp-18h] esp +
mov eax esp +
push 0CCCCh  +
jmp loc_10154F5  +
push 0DDDDh  +
push eax  +
call sub_1011A29  +
pop ecx  +
push eax  +
call sub_101539A  +
pop ecx  +
pop ecx  +
jmp loc_1015501  +
xor eax eax +
mov [ebp-20h] eax +
push 0FFFFFFFEh  +
pop esi  +
mov [ebp-4] esi +
jmp loc_1015528  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
call sub_10188A2  +
and dword ptr [ebp-20h] 0 +
push 0FFFFFFFEh  +
pop esi  +
mov [ebp-4] esi +
mov ebx [ebp-2Ch] +
mov edi [ebp-30h] +
cmp dword ptr [ebp-20h] 0 +
jnz loc_101554A  +
lea eax [edi+edi] +
push eax  +
call sub_1011A29  +
pop ecx  +
mov [ebp-20h] eax +
test eax eax +
jz loc_1015708  +
mov dword ptr [ebp-34h] 1 +
push edi  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push 1  +
push dword ptr [ebp+24h]  +
call ds:MultiByteToWideChar  +
test eax eax +
jz loc_101568A  +
push 0  +
push 0  +
push edi  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call ds:LCMapStringW  +
mov ebx eax +
mov [ebp-2Ch] ebx +
test ebx ebx +
jz loc_101568A  +
mov ecx 400h +
test [ebp+10h] ecx +
jz loc_10155C0  +
cmp dword ptr [ebp+20h] 0 +
jz loc_101568A  +
cmp ebx [ebp+20h] +
jg loc_101568A  +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push edi  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call ds:LCMapStringW  +
jmp loc_101568A  +
mov dword ptr [ebp-4] 2 +
test ebx ebx +
jle loc_1015606  +
push 0FFFFFFE0h  +
pop eax  +
xor edx edx +
div  ebx +
cmp eax 2 +
jb loc_1015606  +
lea eax [ebx+ebx+8] +
cmp eax ecx +
ja loc_10155F0  +
call sub_1018A10  +
mov [ebp-18h] esp +
mov eax esp +
push 0CCCCh  +
jmp loc_10155FC  +
push 0DDDDh  +
push eax  +
call sub_1011A29  +
pop ecx  +
push eax  +
call sub_101539A  +
pop ecx  +
pop ecx  +
jmp loc_1015608  +
xor eax eax +
mov [ebp-24h] eax +
mov [ebp-4] esi +
jmp loc_101562D  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
call sub_10188A2  +
and dword ptr [ebp-24h] 0 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov ebx [ebp-2Ch] +
mov edi [ebp-30h] +
cmp dword ptr [ebp-24h] 0 +
jnz loc_101564F  +
lea eax [ebx+ebx] +
push eax  +
call sub_1011A29  +
pop ecx  +
mov [ebp-24h] eax +
xor esi esi +
cmp eax esi +
jz loc_101568A  +
mov dword ptr [ebp-28h] 1 +
jmp loc_1015651  +
xor esi esi +
push ebx  +
push dword ptr [ebp-24h]  +
push edi  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call ds:LCMapStringW  +
test eax eax +
jz loc_101568A  +
push esi  +
push esi  +
cmp [ebp+20h] esi +
jnz loc_1015674  +
push esi  +
push esi  +
jmp loc_101567A  +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push ebx  +
push dword ptr [ebp-24h]  +
push esi  +
push dword ptr [ebp+24h]  +
call ds:WideCharToMultiByte  +
mov ebx eax +
xor esi esi +
cmp [ebp-28h] esi +
jz loc_101569B  +
push dword ptr [ebp-24h]  +
call sub_1011942  +
jmp loc_10156A8  +
cmp [ebp-24h] esi +
jz loc_10156A9  +
push dword ptr [ebp-24h]  +
call sub_10153B5  +
pop ecx  +
cmp [ebp-34h] esi +
jz loc_10156B8  +
push dword ptr [ebp-20h]  +
call sub_1011942  +
jmp loc_10156C5  +
cmp [ebp-20h] esi +
jz loc_10156C6  +
push dword ptr [ebp-20h]  +
call sub_10153B5  +
pop ecx  +
mov eax ebx +
jmp loc_1015885  +
mov [ebp-2Ch] ebx +
xor edi edi +
mov [ebp-38h] ebx +
mov [ebp-34h] ebx +
cmp [ebp+0Ch] ebx +
jnz loc_10156E8  +
mov eax [ebp+8] +
mov eax [eax] +
mov eax [eax+14h] +
mov [ebp+0Ch] eax +
cmp esi ebx +
jnz loc_10156F7  +
mov eax [ebp+8] +
mov eax [eax] +
mov esi [eax+4] +
mov [ebp+24h] esi +
push dword ptr [ebp+0Ch]  +
call sub_1018695  +
pop ecx  +
mov [ebp-30h] eax +
cmp eax 0FFFFFFFFh +
jnz loc_101570F  +
xor eax eax +
jmp loc_1015885  +
cmp [ebp-30h] esi +
jz loc_1015847  +
push ebx  +
push ebx  +
lea eax [ebp+18h] +
push eax  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp-30h]  +
push esi  +
call sub_10186E3  +
add esp 18h +
mov [ebp-2Ch] eax +
cmp eax ebx +
jz loc_1015708  +
push ebx  +
push ebx  +
push dword ptr [ebp+18h]  +
push eax  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call ds:LCMapStringA  +
mov [ebp-28h] eax +
cmp eax ebx +
jnz loc_1015754  +
xor esi esi +
jmp loc_101582C  +
mov [ebp-4] ebx +
cmp eax ebx +
jle loc_1015791  +
cmp eax 0FFFFFFE0h +
ja loc_1015791  +
add eax 8 +
cmp eax 400h +
ja loc_101577B  +
call sub_1018A10  +
mov [ebp-18h] esp +
mov eax esp +
push 0CCCCh  +
jmp loc_1015787  +
push 0DDDDh  +
push eax  +
call sub_1011A29  +
pop ecx  +
push eax  +
call sub_101539A  +
pop ecx  +
pop ecx  +
jmp loc_1015793  +
xor eax eax +
mov edi eax +
mov [ebp-3Ch] edi +
mov dword ptr [ebp-4] 0FFFFFFFEh +
jmp loc_10157BB  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
call sub_10188A2  +
xor edi edi +
mov [ebp-3Ch] edi +
mov dword ptr [ebp-4] 0FFFFFFFEh +
xor ebx ebx +
cmp edi ebx +
jnz loc_10157E6  +
push dword ptr [ebp-28h]  +
call sub_1011A29  +
pop ecx  +
mov edi eax +
cmp edi ebx +
jz loc_101574D  +
push dword ptr [ebp-28h]  +
push ebx  +
push edi  +
call sub_1010B40  +
add esp 0Ch +
mov dword ptr [ebp-34h] 1 +
push dword ptr [ebp-28h]  +
push edi  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp-2Ch]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call ds:LCMapStringA  +
mov [ebp-28h] eax +
cmp eax ebx +
jz loc_101574D  +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
lea eax [ebp-28h] +
push eax  +
push edi  +
push dword ptr [ebp+24h]  +
push dword ptr [ebp-30h]  +
call sub_10186E3  +
add esp 18h +
mov esi eax +
mov [ebp-38h] esi +
neg esi  +
sbb esi esi +
and esi [ebp-28h] +
cmp dword ptr [ebp-34h] 0 +
jz loc_101583A  +
push edi  +
call sub_1011942  +
jmp loc_1015844  +
test edi edi +
jz loc_1015861  +
push edi  +
call sub_10153B5  +
pop ecx  +
jmp loc_1015861  +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call ds:LCMapStringA  +
mov esi eax +
cmp dword ptr [ebp-2Ch] 0 +
jz loc_1015870  +
push dword ptr [ebp-2Ch]  +
call sub_1011942  +
pop ecx  +
mov eax [ebp-38h] +
test eax eax +
jz loc_1015883  +
cmp [ebp+1Ch] eax +
jz loc_1015883  +
push eax  +
call sub_1011942  +
pop ecx  +
mov eax esi +
lea esp [ebp-4Ch] +
call sub_1013388  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push [ebp+arg_0]  +
lea ecx [ebp+var_10] +
call sub_1010CA3  +
push [ebp+arg_20]  +
lea eax [ebp+var_10] +
push [ebp+arg_1C]  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push eax  +
call sub_10153DA  +
add esp 24h +
cmp [ebp+var_4] 0 +
jz locret_10158D7  +
mov ecx [ebp+var_8] +
and dword ptr [ecx+70h] 0FFFFFFFDh +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push [ebp+arg_4]  +
lea ecx [ebp+var_10] +
call sub_1010CA3  +
movzx eax [ebp+arg_0] +
mov ecx [ebp+var_10] +
mov ecx [ecx+0C8h] +
movzx eax word ptr [ecx+eax*2] +
and eax 8000h +
cmp [ebp+var_4] 0 +
jz locret_1015914  +
mov ecx [ebp+var_8] +
and dword ptr [ecx+70h] 0FFFFFFFDh +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_0]  +
call sub_10158DE  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
sub esp 8 +
mov [ebp+var_4] edi +
mov [ebp+var_8] esi +
mov esi [ebp+arg_4] +
mov edi [ebp+arg_0] +
mov ecx [ebp+arg_8] +
shr ecx 7 +
jmp loc_1015953  +
lea ebx [ebx+0] +
movdqa xmm0 oword ptr [esi] +
movdqa xmm1 oword ptr [esi+10h] +
movdqa xmm2 oword ptr [esi+20h] +
movdqa xmm3 oword ptr [esi+30h] +
movdqa oword ptr [edi] xmm0 +
movdqa oword ptr [edi+10h] xmm1 +
movdqa oword ptr [edi+20h] xmm2 +
movdqa oword ptr [edi+30h] xmm3 +
movdqa xmm4 oword ptr [esi+40h] +
movdqa xmm5 oword ptr [esi+50h] +
movdqa xmm6 oword ptr [esi+60h] +
movdqa xmm7 oword ptr [esi+70h] +
movdqa oword ptr [edi+40h] xmm4 +
movdqa oword ptr [edi+50h] xmm5 +
movdqa oword ptr [edi+60h] xmm6 +
movdqa oword ptr [edi+70h] xmm7 +
lea esi [esi+80h] +
lea edi [edi+80h] +
dec ecx  +
jnz loc_1015953  +
mov esi [ebp+var_8] +
mov edi [ebp+var_4] +
mov esp ebp +
pop ebp  +
retn   +
***
sub esp 1Ch +
mov [ebp+var_C] edi +
mov [ebp+var_8] esi +
mov [ebp+var_4] ebx +
mov ebx [ebp+arg_4] +
mov eax ebx +
cdq   +
mov ecx eax +
mov eax [ebp+arg_0] +
xor ecx edx +
sub ecx edx +
and ecx 0Fh +
xor ecx edx +
sub ecx edx +
cdq   +
mov edi eax +
xor edi edx +
sub edi edx +
and edi 0Fh +
xor edi edx +
sub edi edx +
mov edx ecx +
or edx edi +
jnz loc_1015A42  +
mov esi [ebp+arg_8] +
mov ecx esi +
and ecx 7Fh +
mov [ebp+var_18] ecx +
cmp esi ecx +
jz loc_1015A1A  +
sub esi ecx +
push esi  +
push ebx  +
push eax  +
call sub_1015933  +
add esp 0Ch +
mov eax [ebp+arg_0] +
mov ecx [ebp+var_18] +
test ecx ecx +
jz loc_1015A95  +
mov ebx [ebp+arg_8] +
mov edx [ebp+arg_4] +
add edx ebx +
sub edx ecx +
mov [ebp+var_14] edx +
add ebx eax +
sub ebx ecx +
mov [ebp+var_10] ebx +
mov esi [ebp+var_14] +
mov edi [ebp+var_10] +
mov ecx [ebp+var_18] +
movs   +
mov eax [ebp+arg_0] +
jmp loc_1015A95  +
cmp ecx edi +
jnz loc_1015A7B  +
neg ecx  +
add ecx 10h +
mov [ebp+var_1C] ecx +
mov esi [ebp+arg_4] +
mov edi [ebp+arg_0] +
mov ecx [ebp+var_1C] +
movs   +
mov ecx [ebp+arg_0] +
add ecx [ebp+var_1C] +
mov edx [ebp+arg_4] +
add edx [ebp+var_1C] +
mov eax [ebp+arg_8] +
sub eax [ebp+var_1C] +
push eax  +
push edx  +
push ecx  +
call sub_10159BF  +
add esp 0Ch +
mov eax [ebp+arg_0] +
jmp loc_1015A95  +
mov esi [ebp+arg_4] +
mov edi [ebp+arg_0] +
mov ecx [ebp+arg_8] +
mov edx ecx +
shr ecx 2 +
movs   +
mov ecx edx +
and ecx 3 +
movs   +
mov eax [ebp+arg_0] +
mov ebx [ebp+var_4] +
mov esi [ebp+var_8] +
mov edi [ebp+var_C] +
mov esp ebp +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push [ebp+arg_0]  +
lea ecx [ebp+var_10] +
call sub_1010CA3  +
movzx eax [ebp+arg_4] +
mov ecx [ebp+var_C] +
mov dl [ebp+arg_C] +
test [ecx+eax+1Dh] dl +
jnz loc_1015AE8  +
cmp [ebp+arg_8] 0 +
jz loc_1015AE2  +
mov ecx [ebp+var_10] +
mov ecx [ecx+0C8h] +
movzx eax word ptr [ecx+eax*2] +
and eax [ebp+arg_8] +
jmp loc_1015AE4  +
xor eax eax +
test eax eax +
jz loc_1015AEB  +
xor eax eax +
inc eax  +
cmp [ebp+var_4] 0 +
jz locret_1015AF8  +
mov ecx [ebp+var_8] +
and dword ptr [ecx+70h] 0FFFFFFFDh +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 4  +
push 0  +
push [ebp+arg_0]  +
push 0  +
call sub_1015AA7  +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
push edi  +
cmp [ebp+arg_C] ebx +
jnz loc_1015B3E  +
cmp esi ebx +
jnz loc_1015B42  +
cmp [ebp+arg_4] ebx +
jnz loc_1015B49  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
cmp esi ebx +
jz loc_1015B49  +
mov edi [ebp+arg_4] +
cmp edi ebx +
ja loc_1015B64  +
call sub_1014511  +
push 16h  +
pop esi  +
mov [eax] esi +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call sub_10144BA  +
add esp 14h +
mov eax esi +
jmp loc_1015B39  +
cmp [ebp+arg_C] ebx +
jnz loc_1015B6D  +
mov [esi] bl +
jmp loc_1015B37  +
mov edx [ebp+arg_8] +
cmp edx ebx +
jnz loc_1015B78  +
mov [esi] bl +
jmp loc_1015B49  +
cmp [ebp+arg_C] 0FFFFFFFFh +
mov eax esi +
jnz loc_1015B8F  +
mov cl [edx] +
mov [eax] cl +
inc eax  +
inc edx  +
cmp cl bl +
jz loc_1015BA8  +
dec edi  +
jnz loc_1015B80  +
jmp loc_1015BA8  +
mov cl [edx] +
mov [eax] cl +
inc eax  +
inc edx  +
cmp cl bl +
jz loc_1015BA1  +
dec edi  +
jz loc_1015BA1  +
dec [ebp+arg_C]  +
jnz loc_1015B8F  +
cmp [ebp+arg_C] ebx +
jnz loc_1015BA8  +
mov [eax] bl +
cmp edi ebx +
jnz loc_1015B37  +
cmp [ebp+arg_C] 0FFFFFFFFh +
jnz loc_1015BC1  +
mov eax [ebp+arg_4] +
push 50h  +
mov [esi+eax-1] bl +
pop eax  +
jmp loc_1015B39  +
mov [esi] bl +
call sub_1014511  +
push 22h  +
pop ecx  +
mov [eax] ecx +
mov esi ecx +
jmp loc_1015B53  +
***
mov edi edi +
push esi  +
push edi  +
xor esi esi +
mov edi offset unk_1022D98 +
cmp dword_1020434[esi*8] 1 +
jnz loc_1015C0F  +
lea eax lpCriticalSection[esi*8] +
push 4000000h  +
mov [eax] edi +
push 0FA0h  +
push dword ptr [eax]  +
add edi 18h +
call sub_1016B4B  +
add esp 0Ch +
test eax eax +
jz loc_1015C1B  +
inc esi  +
cmp esi 24h +
jl loc_1015BE1  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
retn   +
and lpCriticalSection[esi*8] 0 +
xor eax eax +
jmp loc_1015C18  +
***
mov edi edi +
push ebx  +
mov ebx ds:DeleteCriticalSection +
push esi  +
mov esi offset lpCriticalSection +
push edi  +
mov edi [esi] +
test edi edi +
jz loc_1015C55  +
cmp dword ptr [esi+4] 1 +
jz loc_1015C55  +
push edi  +
call ebx  +
push edi  +
call sub_1011942  +
and dword ptr [esi] 0 +
pop ecx  +
add esi 8 +
cmp esi offset off_1020550 +
jl loc_1015C3C  +
mov esi offset lpCriticalSection +
pop edi  +
mov eax [esi] +
test eax eax +
jz loc_1015C75  +
cmp dword ptr [esi+4] 1 +
jnz loc_1015C75  +
push eax  +
call ebx  +
add esi 8 +
cmp esi offset off_1020550 +
jl loc_1015C66  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push lpCriticalSection[eax*8]  +
call ds:LeaveCriticalSection  +
pop ebp  +
retn   +
***
call sub_10165F4  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
lea esi lpCriticalSection[eax*8] +
cmp dword ptr [esi] 0 +
jnz loc_1015D94  +
push eax  +
call sub_1015CA4  +
pop ecx  +
test eax eax +
jnz loc_1015D94  +
push 11h  +
call sub_1011D9C  +
pop ecx  +
push dword ptr [esi]  +
call ds:EnterCriticalSection  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 140h  +
push 0  +
push hHeap  +
call ds:HeapAlloc  +
mov lpMem eax +
test eax eax +
jnz loc_1015DC7  +
pop ebp  +
retn   +
mov ecx [ebp+arg_0] +
and dword_1022EE8 0 +
and dword_1024464 0 +
mov dword_1024470 eax +
xor eax eax +
mov dword_102446C ecx +
mov dword_1024474 10h +
inc eax  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx dword_1024464 +
mov eax lpMem +
imul ecx ecx +
add ecx eax +
jmp loc_1015E1F  +
mov edx [ebp+arg_0] +
sub edx [eax+0Ch] +
cmp edx 100000h +
jb loc_1015E25  +
add eax 14h +
cmp eax ecx +
jb loc_1015E0E  +
xor eax eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov ecx [ebp+arg_0] +
mov eax [ecx+10h] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi esi +
sub edi [ecx+0Ch] +
add esi 0FFFFFFFCh +
shr edi 0Fh +
mov ecx edi +
imul ecx ecx +
lea ecx [ecx+eax+144h] +
mov [ebp+var_10] ecx +
mov ecx [esi] +
dec ecx  +
mov [ebp+var_4] ecx +
test cl 1 +
jnz loc_101613E  +
push ebx  +
lea ebx [ecx+esi] +
mov edx [ebx] +
mov [ebp+var_C] edx +
mov edx [esi-4] +
mov [ebp+var_8] edx +
mov edx [ebp+var_C] +
mov [ebp+arg_4] ebx +
test dl 1 +
jnz loc_1015EF9  +
sar edx 4 +
dec edx  +
cmp edx 3Fh +
jbe loc_1015E91  +
push 3Fh  +
pop edx  +
mov ecx [ebx+4] +
cmp ecx [ebx+8] +
jnz loc_1015EDB  +
mov ebx 80000000h +
cmp edx 20h +
jnb loc_1015EBC  +
mov ecx edx +
shr ebx cl +
lea ecx [edx+eax+4] +
not ebx  +
and [eax+edi*4+44h] ebx +
dec byte ptr [ecx]  +
jnz loc_1015ED8  +
mov ecx [ebp+arg_0] +
and [ecx] ebx +
jmp loc_1015ED8  +
lea ecx [edx-20h] +
shr ebx cl +
lea ecx [edx+eax+4] +
not ebx  +
and [eax+edi*4+0C4h] ebx +
dec byte ptr [ecx]  +
jnz loc_1015ED8  +
mov ecx [ebp+arg_0] +
and [ecx+4] ebx +
mov ebx [ebp+arg_4] +
mov edx [ebx+8] +
mov ebx [ebx+4] +
mov ecx [ebp+var_4] +
add ecx [ebp+var_C] +
mov [edx+4] ebx +
mov edx [ebp+arg_4] +
mov ebx [edx+4] +
mov edx [edx+8] +
mov [ebx+8] edx +
mov [ebp+var_4] ecx +
mov edx ecx +
sar edx 4 +
dec edx  +
cmp edx 3Fh +
jbe loc_1015F07  +
push 3Fh  +
pop edx  +
mov ebx [ebp+var_8] +
and ebx 1 +
mov [ebp+var_C] ebx +
jnz loc_1015FA5  +
sub esi [ebp+var_8] +
mov ebx [ebp+var_8] +
sar ebx 4 +
push 3Fh  +
mov [ebp+arg_4] esi +
dec ebx  +
pop esi  +
cmp ebx esi +
jbe loc_1015F2C  +
mov ebx esi +
add ecx [ebp+var_8] +
mov edx ecx +
sar edx 4 +
dec edx  +
mov [ebp+var_4] ecx +
cmp edx esi +
jbe loc_1015F3E  +
mov edx esi +
cmp ebx edx +
jz loc_1015FA0  +
mov ecx [ebp+arg_4] +
mov esi [ecx+4] +
cmp esi [ecx+8] +
jnz loc_1015F88  +
mov esi 80000000h +
cmp ebx 20h +
jnb loc_1015F6E  +
mov ecx ebx +
shr esi cl +
not esi  +
and [eax+edi*4+44h] esi +
dec byte ptr [ebx+eax+4]  +
jnz loc_1015F88  +
mov ecx [ebp+arg_0] +
and [ecx] esi +
jmp loc_1015F88  +
lea ecx [ebx-20h] +
shr esi cl +
not esi  +
and [eax+edi*4+0C4h] esi +
dec byte ptr [ebx+eax+4]  +
jnz loc_1015F88  +
mov ecx [ebp+arg_0] +
and [ecx+4] esi +
mov ecx [ebp+arg_4] +
mov esi [ecx+8] +
mov ecx [ecx+4] +
mov [esi+4] ecx +
mov ecx [ebp+arg_4] +
mov esi [ecx+4] +
mov ecx [ecx+8] +
mov [esi+8] ecx +
mov esi [ebp+arg_4] +
jmp loc_1015FA8  +
mov ebx [ebp+arg_0] +
cmp [ebp+var_C] 0 +
jnz loc_1015FB6  +
cmp ebx edx +
jz loc_1016036  +
mov ecx [ebp+var_10] +
lea ecx [ecx+edx*8] +
mov ebx [ecx+4] +
mov [esi+8] ecx +
mov [esi+4] ebx +
mov [ecx+4] esi +
mov ecx [esi+4] +
mov [ecx+8] esi +
mov ecx [esi+4] +
cmp ecx [esi+8] +
jnz loc_1016036  +
mov cl [edx+eax+4] +
mov byte ptr [ebp+arg_4+3] cl +
inc cl  +
mov [edx+eax+4] cl +
cmp edx 20h +
jnb loc_101600D  +
cmp byte ptr [ebp+arg_4+3] 0 +
jnz loc_1015FFC  +
mov ecx edx +
mov ebx 80000000h +
shr ebx cl +
mov ecx [ebp+arg_0] +
or [ecx] ebx +
mov ebx 80000000h +
mov ecx edx +
shr ebx cl +
lea eax [eax+edi*4+44h] +
or [eax] ebx +
jmp loc_1016036  +
cmp byte ptr [ebp+arg_4+3] 0 +
jnz loc_1016023  +
lea ecx [edx-20h] +
mov ebx 80000000h +
shr ebx cl +
mov ecx [ebp+arg_0] +
or [ecx+4] ebx +
lea ecx [edx-20h] +
mov edx 80000000h +
shr edx cl +
lea eax [eax+edi*4+0C4h] +
or [eax] edx +
mov eax [ebp+var_4] +
mov [esi] eax +
mov [eax+esi-4] eax +
mov eax [ebp+var_10] +
dec dword ptr [eax]  +
jnz loc_101613D  +
mov eax dword_1022EE8 +
test eax eax +
jz loc_101612F  +
mov ecx dword_1024478 +
mov esi ds:VirtualFree +
push 4000h  +
shl ecx 0Fh +
add ecx [eax+0Ch] +
mov ebx 8000h +
push ebx  +
push ecx  +
call esi  +
mov ecx dword_1024478 +
mov eax dword_1022EE8 +
mov edx 80000000h +
shr edx cl +
or [eax+8] edx +
mov eax dword_1022EE8 +
mov eax [eax+10h] +
mov ecx dword_1024478 +
and dword ptr [eax+ecx*4+0C4h] 0 +
mov eax dword_1022EE8 +
mov eax [eax+10h] +
dec byte ptr [eax+43h]  +
mov eax dword_1022EE8 +
mov ecx [eax+10h] +
cmp byte ptr [ecx+43h] 0 +
jnz loc_10160C4  +
and dword ptr [eax+4] 0FFFFFFFEh +
mov eax dword_1022EE8 +
cmp dword ptr [eax+8] 0FFFFFFFFh +
jnz loc_101612F  +
push ebx  +
push 0  +
push dword ptr [eax+0Ch]  +
call esi  +
mov eax dword_1022EE8 +
push dword ptr [eax+10h]  +
push 0  +
push hHeap  +
call ds:HeapFree  +
mov ecx dword_1024464 +
mov eax dword_1022EE8 +
imul ecx ecx +
mov edx lpMem +
sub ecx eax +
lea ecx [ecx+edx-14h] +
push ecx  +
lea ecx [eax+14h] +
push ecx  +
push eax  +
call loc_1018AD0  +
mov eax [ebp+arg_0] +
add esp 0Ch +
dec dword_1024464  +
cmp eax dword_1022EE8 +
jbe loc_1016125  +
sub [ebp+arg_0] 14h +
mov eax lpMem +
mov dword_1024470 eax +
mov eax [ebp+arg_0] +
mov dword_1022EE8 eax +
mov dword_1024478 edi +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov eax dword_1024474 +
push esi  +
mov esi dword_1024464 +
push edi  +
xor edi edi +
cmp esi eax +
jnz loc_101618E  +
add eax 10h +
imul eax eax +
push eax  +
push lpMem  +
push edi  +
push hHeap  +
call ds:HeapReAlloc  +
cmp eax edi +
jnz loc_101617C  +
xor eax eax +
jmp loc_10161F4  +
add dword_1024474 10h +
mov esi dword_1024464 +
mov lpMem eax +
imul esi esi +
add esi lpMem +
push 41C4h  +
push 8  +
push hHeap  +
call ds:HeapAlloc  +
mov [esi+10h] eax +
cmp eax edi +
jz loc_1016178  +
push 4  +
push 2000h  +
push 100000h  +
push edi  +
call ds:VirtualAlloc  +
mov [esi+0Ch] eax +
cmp eax edi +
jnz loc_10161DD  +
push dword ptr [esi+10h]  +
push edi  +
push hHeap  +
call ds:HeapFree  +
jmp loc_1016178  +
or dword ptr [esi+8] 0FFFFFFFFh +
mov [esi] edi +
mov [esi+4] edi +
inc dword_1024464  +
mov eax [esi+10h] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax esi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov ecx [ebp+arg_0] +
mov eax [ecx+8] +
push ebx  +
push esi  +
mov esi [ecx+10h] +
push edi  +
xor ebx ebx +
jmp loc_1016216  +
add eax eax +
inc ebx  +
test eax eax +
jge loc_1016213  +
mov eax ebx +
imul eax eax +
lea eax [eax+esi+144h] +
push 3Fh  +
mov [ebp+var_8] eax +
pop edx  +
mov [eax+8] eax +
mov [eax+4] eax +
add eax 8 +
dec edx  +
jnz loc_101622F  +
push 4  +
mov edi ebx +
push 1000h  +
shl edi 0Fh +
add edi [ecx+0Ch] +
push 8000h  +
push edi  +
call ds:VirtualAlloc  +
test eax eax +
jnz loc_1016262  +
or eax 0FFFFFFFFh +
jmp loc_10162FF  +
lea edx [edi+7000h] +
mov [ebp+var_4] edx +
cmp edi edx +
ja loc_10162B2  +
mov ecx edx +
sub ecx edi +
shr ecx 0Ch +
lea eax [edi+10h] +
inc ecx  +
or dword ptr [eax-8] 0FFFFFFFFh +
or dword ptr [eax+0FECh] 0FFFFFFFFh +
lea edx [eax+0FFCh] +
mov [eax] edx +
lea edx [eax-1004h] +
mov dword ptr [eax-4] 0FF0h +
mov [eax+4] edx +
mov dword ptr [eax+0FE8h] 0FF0h +
add eax 1000h +
dec ecx  +
jnz loc_101627A  +
mov edx [ebp+var_4] +
mov eax [ebp+var_8] +
add eax 1F8h +
lea ecx [edi+0Ch] +
mov [eax+4] ecx +
mov [ecx+8] eax +
lea ecx [edx+0Ch] +
mov [eax+8] ecx +
mov [ecx+4] eax +
and dword ptr [esi+ebx*4+44h] 0 +
xor edi edi +
inc edi  +
mov [esi+ebx*4+0C4h] edi +
mov al [esi+43h] +
mov cl al +
inc cl  +
test al al +
mov eax [ebp+arg_0] +
mov [esi+43h] cl +
jnz loc_10162EF  +
or [eax+4] edi +
mov edx 80000000h +
mov ecx ebx +
shr edx cl +
not edx  +
and [eax+8] edx +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_1024464 +
mov ecx [ebp+arg_0] +
imul eax eax +
add eax lpMem +
add ecx 17h +
and ecx 0FFFFFFF0h +
mov [ebp+var_10] ecx +
sar ecx 4 +
push ebx  +
dec ecx  +
cmp ecx 20h +
push esi  +
push edi  +
jge loc_1016342  +
or esi 0FFFFFFFFh +
shr esi cl +
or [ebp+var_8] 0FFFFFFFFh +
jmp loc_101634F  +
add ecx 0FFFFFFE0h +
or edx 0FFFFFFFFh +
xor esi esi +
shr edx cl +
mov [ebp+var_8] edx +
mov ecx dword_1024470 +
mov ebx ecx +
jmp loc_101636A  +
mov edx [ebx+4] +
mov edi [ebx] +
and edx [ebp+var_8] +
and edi esi +
or edx edi +
jnz loc_1016371  +
add ebx 14h +
mov [ebp+arg_0] ebx +
cmp ebx eax +
jb loc_1016359  +
cmp ebx eax +
jnz loc_10163F4  +
mov ebx lpMem +
jmp loc_101638E  +
mov edx [ebx+4] +
mov edi [ebx] +
and edx [ebp+var_8] +
and edi esi +
or edx edi +
jnz loc_1016395  +
add ebx 14h +
mov [ebp+arg_0] ebx +
cmp ebx ecx +
jb loc_101637D  +
cmp ebx ecx +
jnz loc_10163F4  +
jmp loc_10163A7  +
cmp dword ptr [ebx+8] 0 +
jnz loc_10163AB  +
add ebx 14h +
mov [ebp+arg_0] ebx +
cmp ebx eax +
jb loc_101639B  +
cmp ebx eax +
jnz loc_10163E0  +
mov ebx lpMem +
jmp loc_10163C0  +
cmp dword ptr [ebx+8] 0 +
jnz loc_10163C7  +
add ebx 14h +
mov [ebp+arg_0] ebx +
cmp ebx ecx +
jb loc_10163B7  +
cmp ebx ecx +
jnz loc_10163E0  +
call sub_1016147  +
mov ebx eax +
mov [ebp+arg_0] ebx +
test ebx ebx +
jnz loc_10163E0  +
xor eax eax +
jmp loc_10165E9  +
push ebx  +
call sub_10161FC  +
pop ecx  +
mov ecx [ebx+10h] +
mov [ecx] eax +
mov eax [ebx+10h] +
cmp dword ptr [eax] 0FFFFFFFFh +
jz loc_10163D9  +
mov dword_1024470 ebx +
mov eax [ebx+10h] +
mov edx [eax] +
mov [ebp+var_4] edx +
cmp edx 0FFFFFFFFh +
jz loc_101641B  +
mov ecx [eax+edx*4+0C4h] +
mov edi [eax+edx*4+44h] +
and ecx [ebp+var_8] +
and edi esi +
or ecx edi +
jnz loc_1016444  +
and [ebp+var_4] 0 +
mov edx [eax+0C4h] +
lea ecx [eax+44h] +
mov edi [ecx] +
and edx [ebp+var_8] +
and edi esi +
or edx edi +
jnz loc_1016441  +
inc [ebp+var_4]  +
mov edx [ecx+84h] +
add ecx 4 +
jmp loc_1016428  +
mov edx [ebp+var_4] +
mov ecx edx +
imul ecx ecx +
lea ecx [ecx+eax+144h] +
mov [ebp+var_C] ecx +
mov ecx [eax+edx*4+44h] +
xor edi edi +
and ecx esi +
jnz loc_1016472  +
mov ecx [eax+edx*4+0C4h] +
and ecx [ebp+var_8] +
push 20h  +
pop edi  +
jmp loc_1016472  +
add ecx ecx +
inc edi  +
test ecx ecx +
jge loc_101646F  +
mov ecx [ebp+var_C] +
mov edx [ecx+edi*8+4] +
mov ecx [edx] +
sub ecx [ebp+var_10] +
mov esi ecx +
sar esi 4 +
dec esi  +
cmp esi 3Fh +
mov [ebp+var_8] ecx +
jle loc_1016493  +
push 3Fh  +
pop esi  +
cmp esi edi +
jz loc_101659C  +
mov ecx [edx+4] +
cmp ecx [edx+8] +
jnz loc_10164FF  +
cmp edi 20h +
mov ebx 80000000h +
jge loc_10164D3  +
mov ecx edi +
shr ebx cl +
mov ecx [ebp+var_4] +
lea edi [eax+edi+4] +
not ebx  +
mov [ebp+var_14] ebx +
and ebx [eax+ecx*4+44h] +
mov [eax+ecx*4+44h] ebx +
dec byte ptr [edi]  +
jnz loc_10164FC  +
mov ecx [ebp+var_14] +
mov ebx [ebp+arg_0] +
and [ebx] ecx +
jmp loc_10164FF  +
lea ecx [edi-20h] +
shr ebx cl +
mov ecx [ebp+var_4] +
lea ecx [eax+ecx*4+0C4h] +
lea edi [eax+edi+4] +
not ebx  +
and [ecx] ebx +
dec byte ptr [edi]  +
mov [ebp+var_14] ebx +
jnz loc_10164FC  +
mov ebx [ebp+arg_0] +
mov ecx [ebp+var_14] +
and [ebx+4] ecx +
jmp loc_10164FF  +
mov ebx [ebp+arg_0] +
cmp [ebp+var_8] 0 +
mov ecx [edx+8] +
mov edi [edx+4] +
mov [ecx+4] edi +
mov ecx [edx+4] +
mov edi [edx+8] +
mov [ecx+8] edi +
jz loc_10165A8  +
mov ecx [ebp+var_C] +
lea ecx [ecx+esi*8] +
mov edi [ecx+4] +
mov [edx+8] ecx +
mov [edx+4] edi +
mov [ecx+4] edx +
mov ecx [edx+4] +
mov [ecx+8] edx +
mov ecx [edx+4] +
cmp ecx [edx+8] +
jnz loc_1016599  +
mov cl [esi+eax+4] +
mov byte ptr [ebp+arg_0+3] cl +
inc cl  +
cmp esi 20h +
mov [esi+eax+4] cl +
jge loc_1016570  +
cmp byte ptr [ebp+arg_0+3] 0 +
jnz loc_101655E  +
mov edi 80000000h +
mov ecx esi +
shr edi cl +
or [ebx] edi +
mov ecx esi +
mov edi 80000000h +
shr edi cl +
mov ecx [ebp+var_4] +
or [eax+ecx*4+44h] edi +
jmp loc_1016599  +
cmp byte ptr [ebp+arg_0+3] 0 +
jnz loc_1016583  +
lea ecx [esi-20h] +
mov edi 80000000h +
shr edi cl +
or [ebx+4] edi +
mov ecx [ebp+var_4] +
lea edi [eax+ecx*4+0C4h] +
lea ecx [esi-20h] +
mov esi 80000000h +
shr esi cl +
or [edi] esi +
mov ecx [ebp+var_8] +
test ecx ecx +
jz loc_10165AB  +
mov [edx] ecx +
mov [ecx+edx-4] ecx +
jmp loc_10165AB  +
mov ecx [ebp+var_8] +
mov esi [ebp+var_10] +
add edx ecx +
lea ecx [esi+1] +
mov [edx] ecx +
mov [edx+esi-4] ecx +
mov esi [ebp+var_C] +
mov ecx [esi] +
lea edi [ecx+1] +
mov [esi] edi +
test ecx ecx +
jnz loc_10165E1  +
cmp ebx dword_1022EE8 +
jnz loc_10165E1  +
mov ecx [ebp+var_4] +
cmp ecx dword_1024478 +
jnz loc_10165E1  +
and dword_1022EE8 0 +
mov ecx [ebp+var_4] +
mov [eax] ecx +
lea eax [edx+4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov dword_1022EEC eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword_1022EEC  +
call sub_1012C9F  +
pop ecx  +
test eax eax +
jz loc_101668A  +
push [ebp+arg_0]  +
call eax  +
pop ecx  +
test eax eax +
jz loc_101668A  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
xor eax eax +
pop ebp  +
retn   +
***
call sub_10165F4  +
call sub_1012EE4  +
mov eax [eax+78h] +
test eax eax +
jz loc_10166C1  +
and dword ptr [ebp-4] 0 +
call eax  +
jmp loc_10166BA  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call loc_1018E3A  +
call sub_1016639  +
retn   +
***
pop ecx  +
mov dword_1022EF4 eax +
retn   +
***
mov edi edi +
push esi  +
push edi  +
xor edi edi +
lea esi off_1020550[edi] +
push dword ptr [esi]  +
call sub_1012C19  +
add edi 4 +
pop ecx  +
mov [esi] eax +
cmp edi 28h +
jb loc_10166ED  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_1016726  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_1016722  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_101678D  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1016785  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_101678F  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_1016775  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call sub_10165F4  +
and dword ptr [ebp-4] 0 +
mov esi 1000000h +
push esi  +
call sub_1016710  +
pop ecx  +
test eax eax +
jz loc_10167F6  +
mov eax [ebp+8] +
sub eax esi +
push eax  +
push esi  +
call sub_1016750  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10167F6  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
jmp loc_10167FF  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
xor eax eax +
call sub_1016639  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov dword_1022EF8 eax +
mov dword_1022EFC eax +
mov dword_1022F00 eax +
mov dword_1022F04 eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx dword_101FC64 +
push esi  +
cmp [eax+4] edx +
jz loc_1016850  +
mov esi ecx +
imul esi esi +
add esi [ebp+arg_0] +
add eax 0Ch +
cmp eax esi +
jb loc_101683C  +
imul ecx ecx +
add ecx [ebp+arg_0] +
pop esi  +
cmp eax ecx +
jnb loc_1016860  +
cmp [eax+4] edx +
jz loc_1016862  +
xor eax eax +
pop ebp  +
retn   +
***
pop ecx  +
retn   +
***
call sub_10165F4  +
cmp dword ptr [ebp-1Ch] 0 +
pop ecx  +
cmp ebx 8 +
jz loc_1016A12  +
cmp ebx 0Bh +
jz loc_1016A12  +
cmp ebx 4 +
jnz loc_1016A23  +
mov eax [ebp-2Ch] +
mov [edi+60h] eax +
cmp ebx 8 +
jnz loc_1016A23  +
mov eax [ebp-30h] +
mov [edi+64h] eax +
xor eax eax +
***
call sub_1016639  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov dword_1022F0C eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov dword_1022F10 eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpCriticalSection]  +
call ds:InitializeCriticalSection  +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
call sub_10165F4  +
xor ebx ebx +
mov [ebp-1Ch] ebx +
push dword_1022F10  +
call sub_1012C9F  +
pop ecx  +
mov esi eax +
cmp esi ebx +
jnz loc_1016AF7  +
lea eax [ebp-1Ch] +
push eax  +
call sub_1011E39  +
pop ecx  +
cmp eax ebx +
jz loc_1016AB0  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call sub_101440F  +
add esp 14h +
cmp dword ptr [ebp-1Ch] 1 +
jz loc_1016AE6  +
push offset aKernelbase_d_0  +
mov esi ds:GetModuleHandleW +
call esi  +
mov edi eax +
cmp edi ebx +
jnz loc_1016AD4  +
push offset aKernel32_dll_1  +
call esi  +
cmp edi ebx +
jz loc_1016AE6  +
push offset aInitializecrit  +
push edi  +
call ds:GetProcAddress  +
mov esi eax +
cmp esi ebx +
jnz loc_1016AEB  +
mov esi offset sub_1016A58 +
push esi  +
call sub_1012C19  +
pop ecx  +
mov dword_1022F10 eax +
mov [ebp-4] ebx +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call esi  +
mov [ebp-20h] eax +
jmp loc_1016B36  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
mov [ebp-24h] eax +
xor ecx ecx +
cmp eax 0C0000017h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
cmp dword ptr [ebp-24h] 0C0000017h +
jnz loc_1016B32  +
push 8  +
call ds:SetLastError  +
and dword ptr [ebp-20h] 0 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov eax [ebp-20h] +
call sub_1016639  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1016A72  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
push edi  +
call sub_1012C91  +
xor ebx ebx +
mov [ebp+var_10] eax +
mov [ebp+var_4] ebx +
mov [ebp+var_8] ebx +
mov [ebp+var_C] ebx +
cmp dword_1022F14 ebx +
jnz loc_1016C3D  +
push ebx  +
push ebx  +
push offset LibFileName  +
call ds:LoadLibraryExA  +
mov edi eax +
cmp edi ebx +
jnz loc_1016BA8  +
xor eax eax +
jmp loc_1016D01  +
mov esi ds:GetProcAddress +
push offset aMessageboxa  +
push edi  +
call esi  +
cmp eax ebx +
jz loc_1016BA1  +
push eax  +
call sub_1012C19  +
mov [esp+30h+var_30] offset aGetactivewindo +
push edi  +
mov dword_1022F14 eax +
call esi  +
push eax  +
call sub_1012C19  +
mov [esp+30h+var_30] offset aGetlastactivep +
push edi  +
mov dword_1022F18 eax +
call esi  +
push eax  +
call sub_1012C19  +
mov dword_1022F1C eax +
lea eax [ebp+var_8] +
push eax  +
call sub_1011E39  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1016C0B  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call sub_101440F  +
add esp 14h +
cmp [ebp+var_8] 2 +
jnz loc_1016C3D  +
push offset aGetuserobjecti  +
push edi  +
call esi  +
push eax  +
call sub_1012C19  +
pop ecx  +
mov dword_1022F24 eax +
cmp eax ebx +
jz loc_1016C3D  +
push offset aGetprocesswind  +
push edi  +
call esi  +
push eax  +
call sub_1012C19  +
pop ecx  +
mov dword_1022F20 eax +
mov eax dword_1022F20 +
mov esi [ebp+var_10] +
cmp eax esi +
jz loc_1016CB6  +
cmp dword_1022F24 esi +
jz loc_1016CB6  +
push eax  +
call sub_1012C9F  +
pop ecx  +
call eax  +
cmp eax ebx +
jz loc_1016C83  +
lea ecx [ebp+var_14] +
push ecx  +
push 0Ch  +
lea ecx [ebp+var_20] +
push ecx  +
push 1  +
push eax  +
push dword_1022F24  +
call sub_1012C9F  +
pop ecx  +
call eax  +
test eax eax +
jz loc_1016C83  +
test [ebp+var_18] 1 +
jnz loc_1016CB6  +
lea eax [ebp+var_C] +
push eax  +
call sub_1011E7A  +
pop ecx  +
test eax eax +
jz loc_1016C9E  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call sub_101440F  +
add esp 14h +
cmp [ebp+var_C] 4 +
jb loc_1016CAD  +
or [ebp+arg_8] 200000h +
jmp loc_1016CE7  +
or [ebp+arg_8] 40000h +
jmp loc_1016CE7  +
mov eax dword_1022F18 +
cmp eax esi +
jz loc_1016CE7  +
push eax  +
call sub_1012C9F  +
pop ecx  +
call eax  +
mov [ebp+var_4] eax +
cmp eax ebx +
jz loc_1016CE7  +
mov eax dword_1022F1C +
cmp eax esi +
jz loc_1016CE7  +
push [ebp+var_4]  +
push eax  +
call sub_1012C9F  +
pop ecx  +
call eax  +
mov [ebp+var_4] eax +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push [ebp+var_4]  +
push dword_1022F14  +
call sub_1012C9F  +
pop ecx  +
call eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
cmp eax ebx +
jz loc_1016D23  +
mov edi [ebp+arg_4] +
cmp edi ebx +
ja loc_1016D3E  +
call sub_1014511  +
push 16h  +
pop esi  +
mov [eax] esi +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call sub_10144BA  +
add esp 14h +
mov eax esi +
jmp loc_1016D7A  +
mov esi [ebp+arg_8] +
cmp esi ebx +
jnz loc_1016D49  +
mov [eax] bl +
jmp loc_1016D23  +
mov edx eax +
cmp [edx] bl +
jz loc_1016D53  +
inc edx  +
dec edi  +
jnz loc_1016D4B  +
cmp edi ebx +
jz loc_1016D45  +
mov cl [esi] +
mov [edx] cl +
inc edx  +
inc esi  +
cmp cl bl +
jz loc_1016D64  +
dec edi  +
jnz loc_1016D57  +
cmp edi ebx +
jnz loc_1016D78  +
mov [eax] bl +
call sub_1014511  +
push 22h  +
pop ecx  +
mov [eax] ecx +
mov esi ecx +
jmp loc_1016D2D  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
cmp ecx ebx +
jz loc_1016D9C  +
mov edi [ebp+arg_4] +
cmp edi ebx +
ja loc_1016DB7  +
call sub_1014511  +
push 16h  +
pop esi  +
mov [eax] esi +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call sub_10144BA  +
add esp 14h +
mov eax esi +
jmp loc_1016DE7  +
mov esi [ebp+arg_8] +
cmp esi ebx +
jnz loc_1016DC2  +
mov [ecx] bl +
jmp loc_1016D9C  +
mov edx ecx +
mov al [esi] +
mov [edx] al +
inc edx  +
inc esi  +
cmp al bl +
jz loc_1016DD1  +
dec edi  +
jnz loc_1016DC4  +
cmp edi ebx +
jnz loc_1016DE5  +
mov [ecx] bl +
call sub_1014511  +
push 22h  +
pop ecx  +
mov [eax] ecx +
mov esi ecx +
jmp loc_1016DA6  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push esi  +
xor esi esi +
cmp ecx esi +
jl loc_1016E1E  +
cmp ecx 2 +
jle loc_1016E11  +
cmp ecx 3 +
jnz loc_1016E1E  +
mov eax dword_10225B4 +
jmp loc_1016E39  +
mov eax dword_10225B4 +
mov dword_10225B4 ecx +
jmp loc_1016E39  +
call sub_1014511  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_10144BA  +
add esp 14h +
or eax 0FFFFFFFFh +
pop esi  +
pop ebp  +
retn   +
***
call sub_10165F4  +
pop ecx  +
retn   +
***
cmp ebx edi +
jnz loc_1016F57  +
mov eax [ebp+10h] +
cmp eax edi +
jz loc_1016F57  +
mov dword ptr [eax] 0Ch +
mov eax ebx +
call sub_1016639  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push edi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1016E41  +
mov edi eax +
add esp 0Ch +
test edi edi +
jnz loc_1016FA0  +
push esi  +
mov esi [ebp+var_4] +
test esi esi +
jz loc_1016F9F  +
call sub_1014511  +
test eax eax +
jz loc_1016F9F  +
call sub_1014511  +
mov [eax] esi +
pop esi  +
mov eax edi +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
xor esi esi +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1016E41  +
mov edi eax +
add esp 0Ch +
test edi edi +
jnz loc_1016FF0  +
cmp dword_1022F28 eax +
jbe loc_1016FF0  +
push esi  +
call ds:Sleep  +
lea eax [esi+3E8h] +
cmp eax dword_1022F28 +
jbe loc_1016FE9  +
or eax 0FFFFFFFFh +
mov esi eax +
cmp eax 0FFFFFFFFh +
jnz loc_1016FB3  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
push edi  +
mov ecx [esp+arg_0] +
test dword ptr [ecx+4] 6 +
mov eax 1 +
jz locret_10170D1  +
mov eax [esp+arg_4] +
mov ecx [eax+8] +
xor ecx eax +
call sub_1010BBF  +
push ebp  +
mov ebp [eax+18h] +
push dword ptr [eax+0Ch]  +
push dword ptr [eax+10h]  +
push dword ptr [eax+14h]  +
call sub_1016FFC  +
add esp 0Ch +
pop ebp  +
mov eax [esp+arg_4] +
mov edx [esp+arg_C] +
mov [edx] eax +
mov eax 3 +
retn   +
***
push edi  +
mov ebp edx +
push ebx  +
push edx  +
push ecx  +
push [esp+8+arg_4]  +
call sub_1016FFC  +
add esp 0Ch +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
mov [ebp+lDistanceToMove] eax +
mov eax [ebp+arg_8] +
push edi  +
push esi  +
mov [ebp+DistanceToMoveHigh] eax +
call sub_101912B  +
or edi 0FFFFFFFFh +
pop ecx  +
cmp eax edi +
jnz loc_101718B  +
call sub_1014511  +
mov dword ptr [eax] 9 +
mov eax edi +
mov edx edi +
jmp loc_10171D5  +
push [ebp+dwMoveMethod]  +
lea ecx [ebp+DistanceToMoveHigh] +
push ecx  +
push [ebp+lDistanceToMove]  +
push eax  +
call ds:SetFilePointer  +
mov [ebp+lDistanceToMove] eax +
cmp eax edi +
jnz loc_10171B6  +
call ds:GetLastError  +
test eax eax +
jz loc_10171B6  +
push eax  +
call sub_1014541  +
pop ecx  +
jmp loc_1017185  +
mov eax esi +
and esi 1Fh +
imul esi esi +
sar eax 5 +
mov eax dword_10244A0[eax*4] +
lea eax [eax+esi+4] +
and byte ptr [eax] 0FDh +
mov eax [ebp+lDistanceToMove] +
mov edx [ebp+DistanceToMoveHigh] +
pop edi  +
pop esi  +
leave   +
retn   +
***
call sub_10165F4  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 594h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push esi  +
xor esi esi +
mov [ebp+lpBuffer] eax +
mov [ebp+var_570] esi +
mov [ebp+var_578] esi +
cmp [ebp+nNumberOfBytesToWrite] esi +
jnz loc_1017335  +
xor eax eax +
jmp loc_10179CB  +
cmp eax esi +
jnz loc_1017360  +
call sub_1014529  +
mov [eax] esi +
call sub_1014511  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_10144BA  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_10179CB  +
mov esi [ebp+arg_0] +
push ebx  +
mov ebx esi +
and ebx 1Fh +
imul ebx ebx +
mov eax esi +
sar eax 5 +
push edi  +
lea edi dword_10244A0[eax*4] +
mov eax [edi] +
add eax ebx +
mov ecx [eax+8] +
and ecx 3 +
mov [ebp+var_580] edi +
mov [ebp+CodePage] ebx +
mov [ebp+var_588] ecx +
cmp ecx 2 +
jz loc_101739F  +
cmp ecx 1 +
jnz loc_10173CF  +
mov ecx [ebp+nNumberOfBytesToWrite] +
not ecx  +
test cl 1 +
jnz loc_10173CF  +
call sub_1014529  +
xor esi esi +
mov [eax] esi +
call sub_1014511  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_10144BA  +
add esp 14h +
jmp loc_10179BE  +
test byte ptr [eax+4] 20h +
jz loc_10173E4  +
push 2  +
push 0  +
push 0  +
push esi  +
call sub_1017154  +
add esp 10h +
push esi  +
call sub_1017B12  +
pop ecx  +
test eax eax +
jz loc_1017650  +
mov eax [edi] +
test byte ptr [ebx+eax+4] 80h +
jz loc_1017650  +
call sub_1012EE4  +
mov eax [eax+6Ch] +
xor ecx ecx +
cmp [eax+14h] ecx +
lea eax [ebp+Mode] +
setz cl  +
push eax  +
mov eax [edi] +
push dword ptr [ebx+eax]  +
mov esi ecx +
call ds:GetConsoleMode  +
test eax eax +
jz loc_1017650  +
test esi esi +
jz loc_101743D  +
cmp [ebp+var_588] 0 +
jz loc_1017650  +
call ds:GetConsoleCP  +
and [ebp+NumberOfBytesWritten] 0 +
cmp [ebp+nNumberOfBytesToWrite] 0 +
mov esi [ebp+lpBuffer] +
mov [ebp+CodePage] eax +
mov [ebp+var_590] esi +
jbe loc_1017957  +
and [ebp+var_568] 0 +
jmp loc_1017475  +
mov esi [ebp+var_590] +
mov eax [ebp+var_588] +
test eax eax +
jnz loc_10175B0  +
mov al [esi] +
xor ecx ecx +
cmp al 0Ah +
setz cl  +
movsx eax al +
push eax  +
mov [ebp+Mode] ecx +
call sub_101591B  +
pop ecx  +
test eax eax +
jnz loc_10174BD  +
push 1  +
lea eax [ebp+WideCharStr] +
push esi  +
push eax  +
call sub_101947A  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jz loc_101794D  +
jmp loc_10174F3  +
mov eax [ebp+lpBuffer] +
sub eax esi +
add eax [ebp+nNumberOfBytesToWrite] +
cmp eax 1 +
jbe loc_101794D  +
push 2  +
lea eax [ebp+WideCharStr] +
push esi  +
push eax  +
call sub_101947A  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jz loc_101794D  +
inc esi  +
inc [ebp+var_568]  +
xor eax eax +
push eax  +
push eax  +
push 5  +
lea ecx [ebp+Buffer] +
push ecx  +
push 1  +
lea ecx [ebp+WideCharStr] +
push ecx  +
push eax  +
push [ebp+CodePage]  +
inc esi  +
inc [ebp+var_568]  +
mov [ebp+var_590] esi +
call ds:WideCharToMultiByte  +
mov esi eax +
test esi esi +
jz loc_101794D  +
push 0  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push esi  +
lea eax [ebp+Buffer] +
push eax  +
mov eax [edi] +
push dword ptr [ebx+eax]  +
call ds:WriteFile  +
test eax eax +
jz loc_1017941  +
mov eax [ebp+NumberOfBytesWritten] +
add [ebp+var_570] eax +
cmp eax esi +
jl loc_101794D  +
cmp [ebp+Mode] 0 +
jz loc_101763C  +
push 0  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push 1  +
lea eax [ebp+Buffer] +
push eax  +
mov eax [edi] +
mov [ebp+Buffer] 0Dh +
push dword ptr [ebx+eax]  +
call ds:WriteFile  +
test eax eax +
jz loc_1017941  +
cmp [ebp+NumberOfBytesWritten] 1 +
jl loc_101794D  +
inc [ebp+var_578]  +
inc [ebp+var_570]  +
jmp loc_101763C  +
cmp eax 1 +
jz loc_10175BA  +
cmp eax 2 +
jnz loc_10175E1  +
movzx ecx word ptr [esi] +
xor edx edx +
cmp cx 0Ah +
setz dl  +
inc esi  +
inc esi  +
add [ebp+var_568] 2 +
mov dword ptr [ebp+WideCharStr] ecx +
mov [ebp+var_590] esi +
mov [ebp+Mode] edx +
cmp eax 1 +
jz loc_10175EB  +
cmp eax 2 +
jnz loc_101763C  +
push dword ptr [ebp+WideCharStr]  +
call sub_1019294  +
pop ecx  +
cmp ax [ebp+WideCharStr] +
jnz loc_1017941  +
inc [ebp+var_570]  +
cmp [ebp+Mode] 0 +
jz loc_101763C  +
push 0Dh  +
pop eax  +
push eax  +
mov dword ptr [ebp+WideCharStr] eax +
call sub_1019294  +
pop ecx  +
cmp ax [ebp+WideCharStr] +
jnz loc_1017941  +
inc [ebp+var_570]  +
inc [ebp+var_578]  +
mov eax [ebp+nNumberOfBytesToWrite] +
cmp [ebp+var_568] eax +
jb loc_101746F  +
jmp loc_101794D  +
mov eax [edi] +
add eax ebx +
test byte ptr [eax+4] 80h +
jz loc_101790E  +
xor eax eax +
mov dword ptr [ebp+WideCharStr] eax +
cmp [ebp+var_588] eax +
jnz loc_101772D  +
mov ecx [ebp+lpBuffer] +
mov [ebp+var_568] ecx +
cmp [ebp+nNumberOfBytesToWrite] eax +
jbe loc_101798D  +
mov ecx [ebp+var_568] +
xor esi esi +
sub ecx [ebp+lpBuffer] +
lea eax [ebp+var_564] +
cmp ecx [ebp+nNumberOfBytesToWrite] +
jnb loc_10176D1  +
mov edx [ebp+var_568] +
inc [ebp+var_568]  +
mov dl [edx] +
inc ecx  +
cmp dl 0Ah +
jnz loc_10176BF  +
inc [ebp+var_578]  +
mov byte ptr [eax] 0Dh +
inc eax  +
inc esi  +
mov edi [ebp+var_580] +
mov [eax] dl +
inc eax  +
inc esi  +
cmp esi 400h +
jb loc_101769B  +
mov esi eax +
lea eax [ebp+var_564] +
sub esi eax +
push 0  +
lea eax [ebp+var_57C] +
push eax  +
push esi  +
lea eax [ebp+var_564] +
push eax  +
mov eax [edi] +
push dword ptr [ebx+eax]  +
call ds:WriteFile  +
test eax eax +
jz loc_1017941  +
mov eax [ebp+var_57C] +
add [ebp+var_570] eax +
cmp eax esi +
jl loc_101794D  +
mov eax [ebp+var_568] +
sub eax [ebp+lpBuffer] +
cmp eax [ebp+nNumberOfBytesToWrite] +
jb loc_1017687  +
jmp loc_101794D  +
cmp [ebp+var_588] 2 +
jnz loc_1017803  +
mov edi [ebp+lpBuffer] +
cmp [ebp+nNumberOfBytesToWrite] eax +
jbe loc_101798D  +
mov ecx edi +
xor esi esi +
sub ecx [ebp+lpBuffer] +
lea eax [ebp+var_564] +
cmp ecx [ebp+nNumberOfBytesToWrite] +
jnb loc_101779D  +
movzx edx word ptr [edi] +
inc edi  +
inc edi  +
inc ecx  +
inc ecx  +
cmp dx 0Ah +
jnz loc_101778A  +
cmp esi 3FDh +
ja loc_101779B  +
add [ebp+var_578] 2 +
push 0Dh  +
pop ebx  +
mov [eax] bx +
mov ebx [ebp+CodePage] +
inc eax  +
inc eax  +
inc esi  +
inc esi  +
mov [eax] dx +
inc eax  +
inc eax  +
inc esi  +
inc esi  +
cmp esi 3FFh +
jb loc_1017759  +
jmp loc_101779D  +
dec edi  +
dec edi  +
mov esi eax +
lea eax [ebp+var_564] +
sub esi eax +
push 0  +
lea eax [ebp+var_57C] +
push eax  +
push esi  +
lea eax [ebp+var_564] +
push eax  +
mov eax [ebp+var_580] +
mov eax [eax] +
push dword ptr [ebx+eax]  +
call ds:WriteFile  +
test eax eax +
jz loc_1017941  +
mov eax [ebp+var_57C] +
add [ebp+var_570] eax +
cmp eax esi +
jl loc_101794D  +
test eax eax +
jz loc_101794D  +
mov eax edi +
sub eax [ebp+lpBuffer] +
cmp eax [ebp+nNumberOfBytesToWrite] +
jb loc_1017749  +
jmp loc_101794D  +
mov ecx [ebp+lpBuffer] +
mov [ebp+var_568] ecx +
cmp [ebp+nNumberOfBytesToWrite] eax +
jbe loc_101798D  +
mov ecx [ebp+var_568] +
xor esi esi +
sub ecx [ebp+lpBuffer] +
lea eax [ebp+var_160] +
cmp ecx [ebp+nNumberOfBytesToWrite] +
jnb loc_1017873  +
mov edx [ebp+var_568] +
add [ebp+var_568] 2 +
movzx edx word ptr [edx] +
inc ecx  +
inc ecx  +
cmp dx 0Ah +
jnz loc_101785B  +
cmp esi 150h +
ja loc_101786C  +
push 0Dh  +
pop edi  +
mov [eax] di +
inc eax  +
inc eax  +
inc esi  +
inc esi  +
mov [eax] dx +
inc eax  +
inc eax  +
inc esi  +
inc esi  +
cmp esi 152h +
jb loc_101782C  +
jmp loc_1017873  +
sub [ebp+var_568] 2 +
xor esi esi +
push esi  +
push esi  +
push 2ABh  +
lea ecx [ebp+MultiByteStr] +
push ecx  +
lea ecx [ebp+var_160] +
sub eax ecx +
cdq   +
sub eax edx +
sar eax 1 +
push eax  +
mov eax ecx +
push eax  +
push esi  +
push 0FDE9h  +
call ds:WideCharToMultiByte  +
mov edi eax +
cmp edi esi +
jz loc_1017941  +
push 0  +
lea eax [ebp+var_57C] +
push eax  +
mov eax edi +
sub eax esi +
push eax  +
lea eax [ebp+esi+MultiByteStr] +
push eax  +
mov eax [ebp+var_580] +
mov eax [eax] +
push dword ptr [ebx+eax]  +
call ds:WriteFile  +
test eax eax +
jz loc_10178E1  +
add esi [ebp+var_57C] +
cmp edi esi +
jg loc_10178AA  +
jmp loc_10178ED  +
call ds:GetLastError  +
mov dword ptr [ebp+WideCharStr] eax +
cmp edi esi +
jg loc_101794D  +
mov eax [ebp+var_568] +
sub eax [ebp+lpBuffer] +
mov [ebp+var_570] eax +
cmp eax [ebp+nNumberOfBytesToWrite] +
jb loc_1017818  +
jmp loc_101794D  +
push 0  +
lea ecx [ebp+var_57C] +
push ecx  +
push [ebp+nNumberOfBytesToWrite]  +
push [ebp+lpBuffer]  +
push dword ptr [eax]  +
call ds:WriteFile  +
test eax eax +
jz loc_1017941  +
mov eax [ebp+var_57C] +
and dword ptr [ebp+WideCharStr] 0 +
mov [ebp+var_570] eax +
jmp loc_101794D  +
call ds:GetLastError  +
mov dword ptr [ebp+WideCharStr] eax +
mov eax [ebp+var_570] +
test eax eax +
jnz loc_10179C3  +
cmp dword ptr [ebp+WideCharStr] 0 +
jz loc_101798D  +
push 5  +
pop esi  +
cmp dword ptr [ebp+WideCharStr] esi +
jnz loc_101797F  +
call sub_1014511  +
mov dword ptr [eax] 9 +
call sub_1014529  +
mov [eax] esi +
jmp loc_10179BE  +
push dword ptr [ebp+WideCharStr]  +
call sub_1014541  +
pop ecx  +
jmp loc_10179BE  +
mov eax [ebp+var_580] +
mov eax [eax] +
test byte ptr [ebx+eax+4] 40h +
jz loc_10179AB  +
mov eax [ebp+lpBuffer] +
cmp byte ptr [eax] 1Ah +
jnz loc_10179AB  +
xor eax eax +
jmp loc_10179C9  +
call sub_1014511  +
mov dword ptr [eax] 1Ch +
call sub_1014529  +
and dword ptr [eax] 0 +
or eax 0FFFFFFFFh +
jmp loc_10179C9  +
sub eax [ebp+var_578] +
pop edi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1010BBF  +
leave   +
retn   +
***
call sub_10165F4  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
inc dword_1022F2C  +
push 1000h  +
push 1  +
call sub_1016F64  +
pop ecx  +
pop ecx  +
mov ecx [ebp+arg_0] +
mov [ecx+8] eax +
test eax eax +
jz loc_1017AEE  +
or dword ptr [ecx+0Ch] 8 +
mov dword ptr [ecx+18h] 1000h +
jmp loc_1017B02  +
or dword ptr [ecx+0Ch] 4 +
lea eax [ecx+14h] +
and dword ptr [eax] 0 +
mov [ecx+8] eax +
mov dword ptr [ecx+18h] 2 +
mov eax [ecx+8] +
and dword ptr [ecx+4] 0 +
mov [ecx] eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 0FFFFFFFEh +
jnz loc_1017B2E  +
call sub_1014511  +
mov dword ptr [eax] 9 +
xor eax eax +
pop ebp  +
retn   +
push esi  +
xor esi esi +
cmp eax esi +
jl loc_1017B3D  +
cmp eax uNumber +
jb loc_1017B59  +
call sub_1014511  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 9 +
call sub_10144BA  +
add esp 14h +
xor eax eax +
jmp loc_1017B73  +
mov ecx eax +
and eax 1Fh +
imul eax eax +
sar ecx 5 +
mov ecx dword_10244A0[ecx*4] +
movsx eax byte ptr [ecx+eax+4] +
and eax 40h +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_1024460 +
push esi  +
push 14h  +
pop esi  +
test eax eax +
jnz loc_1017B8F  +
mov eax 200h +
jmp loc_1017B95  +
cmp eax esi +
jge loc_1017B9A  +
mov eax esi +
mov dword_1024460 eax +
push 4  +
push eax  +
call sub_1016F64  +
pop ecx  +
pop ecx  +
mov dword_1023444 eax +
test eax eax +
jnz loc_1017BCB  +
push 4  +
push esi  +
mov dword_1024460 esi +
call sub_1016F64  +
pop ecx  +
pop ecx  +
mov dword_1023444 eax +
test eax eax +
jnz loc_1017BCB  +
push 1Ah  +
pop eax  +
pop esi  +
retn   +
xor edx edx +
mov ecx offset off_1020578 +
jmp loc_1017BD9  +
mov eax dword_1023444 +
mov [edx+eax] ecx +
add ecx 20h +
add edx 4 +
cmp ecx offset off_10207F8 +
jl loc_1017BD4  +
push 0FFFFFFFEh  +
pop esi  +
xor edx edx +
mov ecx offset unk_1020588 +
push edi  +
mov edi edx +
and edi 1Fh +
imul edi edi +
mov eax edx +
sar eax 5 +
mov eax dword_10244A0[eax*4] +
mov eax [edi+eax] +
cmp eax 0FFFFFFFFh +
jz loc_1017C19  +
cmp eax esi +
jz loc_1017C19  +
test eax eax +
jnz loc_1017C1B  +
mov [ecx] esi +
add ecx 20h +
inc edx  +
cmp ecx offset unk_10205E8 +
jl loc_1017BF5  +
pop edi  +
xor eax eax +
pop esi  +
retn   +
***
call sub_10196D6  +
cmp byte_10225F4 0 +
jz loc_1017C44  +
call sub_1019499  +
push dword_1023444  +
call sub_1011942  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx offset off_1020578 +
cmp eax ecx +
jb loc_1017C7F  +
cmp eax offset unk_10207D8 +
ja loc_1017C7F  +
sub eax ecx +
sar eax 5 +
add eax 10h +
push eax  +
call sub_1015D6C  +
pop ecx  +
pop ebp  +
retn   +
add eax 20h +
push eax  +
call ds:EnterCriticalSection  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 14h +
jge loc_1017CA9  +
add eax 10h +
push eax  +
call sub_1015D6C  +
pop ecx  +
pop ebp  +
retn   +
mov eax [ebp+arg_4] +
add eax 20h +
push eax  +
call ds:EnterCriticalSection  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx offset off_1020578 +
cmp eax ecx +
jb loc_1017CE6  +
cmp eax offset unk_10207D8 +
ja loc_1017CE6  +
sub eax ecx +
sar eax 5 +
add eax 10h +
push eax  +
call sub_1015C88  +
pop ecx  +
pop ebp  +
retn   +
add eax 20h +
push eax  +
call ds:LeaveCriticalSection  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 14h +
jge loc_1017D10  +
add eax 10h +
push eax  +
call sub_1015C88  +
pop ecx  +
pop ebp  +
retn   +
mov eax [ebp+arg_4] +
add eax 20h +
push eax  +
call ds:LeaveCriticalSection  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
xor esi esi +
cmp eax esi +
jnz loc_1017D50  +
call sub_1014511  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_10144BA  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_1017D53  +
mov eax [eax+10h] +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_101FB10 +
or eax 1 +
xor ecx ecx +
cmp dword_1022F30 eax +
setz cl  +
mov eax ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov esi [ebp+UsedDefaultChar] +
xor ebx ebx +
push edi  +
mov edi [ebp+arg_8] +
cmp esi ebx +
jnz loc_1017DA1  +
cmp edi ebx +
jbe loc_1017DA1  +
mov eax [ebp+arg_0] +
cmp eax ebx +
jz loc_1017D9A  +
mov [eax] ebx +
xor eax eax +
jmp loc_1017E24  +
mov eax [ebp+arg_0] +
cmp eax ebx +
jz loc_1017DAB  +
or dword ptr [eax] 0FFFFFFFFh +
cmp edi 7FFFFFFFh +
jbe loc_1017DCE  +
call sub_1014511  +
push 16h  +
pop esi  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov [eax] esi +
call sub_10144BA  +
add esp 14h +
mov eax esi +
jmp loc_1017E24  +
push [ebp+arg_10]  +
lea ecx [ebp+var_10] +
call sub_1010CA3  +
mov eax [ebp+var_10] +
cmp [eax+14h] ebx +
jnz loc_1017E81  +
mov ax [ebp+WideCharStr] +
mov ecx 0FFh +
cmp ax cx +
jbe loc_1017E29  +
cmp esi ebx +
jz loc_1017E06  +
cmp edi ebx +
jbe loc_1017E06  +
push edi  +
push ebx  +
push esi  +
call sub_1010B40  +
add esp 0Ch +
call sub_1014511  +
mov dword ptr [eax] 2Ah +
call sub_1014511  +
mov eax [eax] +
cmp [ebp+var_4] bl +
jz loc_1017E24  +
mov ecx [ebp+var_8] +
and dword ptr [ecx+70h] 0FFFFFFFDh +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
cmp esi ebx +
jz loc_1017E5F  +
cmp edi ebx +
ja loc_1017E5D  +
call sub_1014511  +
push 22h  +
pop esi  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov [eax] esi +
call sub_10144BA  +
add esp 14h +
cmp [ebp+var_4] bl +
jz loc_1017DCA  +
mov eax [ebp+var_8] +
and dword ptr [eax+70h] 0FFFFFFFDh +
jmp loc_1017DCA  +
mov [esi] al +
mov eax [ebp+arg_0] +
cmp eax ebx +
jz loc_1017E6C  +
mov dword ptr [eax] 1 +
cmp [ebp+var_4] bl +
jz loc_1017D9A  +
mov eax [ebp+var_8] +
and dword ptr [eax+70h] 0FFFFFFFDh +
jmp loc_1017D9A  +
lea ecx [ebp+UsedDefaultChar] +
push ecx  +
push ebx  +
push edi  +
push esi  +
push 1  +
lea ecx [ebp+WideCharStr] +
push ecx  +
push ebx  +
mov [ebp+UsedDefaultChar] ebx +
push dword ptr [eax+4]  +
call ds:WideCharToMultiByte  +
cmp eax ebx +
jz loc_1017EB3  +
cmp [ebp+UsedDefaultChar] ebx +
jnz loc_1017E06  +
mov ecx [ebp+arg_0] +
cmp ecx ebx +
jz loc_1017E6C  +
mov [ecx] eax +
jmp loc_1017E6C  +
call ds:GetLastError  +
cmp eax 7Ah +
jnz loc_1017E06  +
cmp esi ebx +
jz loc_1017E31  +
cmp edi ebx +
jbe loc_1017E31  +
push edi  +
push ebx  +
push esi  +
call sub_1010B40  +
add esp 0Ch +
jmp loc_1017E31  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push dword ptr [ebp+WideCharStr]  +
push [ebp+arg_8]  +
push [ebp+UsedDefaultChar]  +
push [ebp+arg_0]  +
call sub_1017D76  +
add esp 14h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax dword_1022F34 +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
mov edi ecx +
cmp eax ebx +
jnz loc_1017F64  +
lea eax [ebp+CharType] +
push eax  +
xor esi esi +
inc esi  +
push esi  +
push offset SrcStr  +
push esi  +
call ds:GetStringTypeW  +
test eax eax +
jz loc_1017F4A  +
mov dword_1022F34 esi +
jmp loc_1017F7E  +
call ds:GetLastError  +
cmp eax 78h +
jnz loc_1017F5F  +
push 2  +
pop eax  +
mov dword_1022F34 eax +
jmp loc_1017F64  +
mov eax dword_1022F34 +
cmp eax 2 +
jz loc_101803C  +
cmp eax ebx +
jz loc_101803C  +
cmp eax 1 +
jnz loc_1018066  +
mov dword ptr [ebp+CharType] ebx +
cmp [ebp+CodePage] ebx +
jnz loc_1017F8E  +
mov eax [edi] +
mov eax [eax+4] +
mov [ebp+CodePage] eax +
mov esi ds:MultiByteToWideChar +
xor eax eax +
cmp [ebp+arg_18] ebx +
push ebx  +
push ebx  +
push [ebp+cchSrc]  +
setnz al  +
push [ebp+lpSrcStr]  +
lea eax ds:1[eax*8] +
push eax  +
push [ebp+CodePage]  +
call esi  +
mov edi eax +
cmp edi ebx +
jz loc_1018066  +
jle loc_1017FF9  +
cmp edi 7FFFFFF0h +
ja loc_1017FF9  +
lea eax [edi+edi+8] +
cmp eax 400h +
ja loc_1017FE3  +
call sub_1018A10  +
mov eax esp +
cmp eax ebx +
jz loc_1017FF7  +
mov dword ptr [eax] 0CCCCh +
jmp loc_1017FF4  +
push eax  +
call sub_1011A29  +
pop ecx  +
cmp eax ebx +
jz loc_1017FF7  +
mov dword ptr [eax] 0DDDDh +
add eax 8 +
mov ebx eax +
test ebx ebx +
jz loc_1018066  +
lea eax [edi+edi] +
push eax  +
push 0  +
push ebx  +
call sub_1010B40  +
add esp 0Ch +
push edi  +
push ebx  +
push [ebp+cchSrc]  +
push [ebp+lpSrcStr]  +
push 1  +
push [ebp+CodePage]  +
call esi  +
test eax eax +
jz loc_1018030  +
push [ebp+lpCharType]  +
push eax  +
push ebx  +
push [ebp+dwInfoType]  +
call ds:GetStringTypeW  +
mov dword ptr [ebp+CharType] eax +
push ebx  +
call sub_10153B5  +
mov eax dword ptr [ebp+CharType] +
pop ecx  +
jmp loc_10180B1  +
xor esi esi +
cmp [ebp+Locale] ebx +
jnz loc_101804B  +
mov eax [edi] +
mov eax [eax+14h] +
mov [ebp+Locale] eax +
cmp [ebp+CodePage] ebx +
jnz loc_1018058  +
mov eax [edi] +
mov eax [eax+4] +
mov [ebp+CodePage] eax +
push [ebp+Locale]  +
call sub_1018695  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jnz loc_101806A  +
xor eax eax +
jmp loc_10180B1  +
cmp eax [ebp+CodePage] +
jz loc_101808D  +
push ebx  +
push ebx  +
lea ecx [ebp+cchSrc] +
push ecx  +
push [ebp+lpSrcStr]  +
push eax  +
push [ebp+CodePage]  +
call sub_10186E3  +
mov esi eax +
add esp 18h +
cmp esi ebx +
jz loc_1018066  +
mov [ebp+lpSrcStr] esi +
push [ebp+lpCharType]  +
push [ebp+cchSrc]  +
push [ebp+lpSrcStr]  +
push [ebp+dwInfoType]  +
push [ebp+Locale]  +
call ds:GetStringTypeA  +
mov edi eax +
cmp esi ebx +
jz loc_10180AF  +
push esi  +
call sub_1011942  +
pop ecx  +
mov eax edi +
lea esp [ebp-14h] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1010BBF  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push [ebp+arg_0]  +
lea ecx [ebp+var_10] +
call sub_1010CA3  +
push [ebp+arg_1C]  +
lea ecx [ebp+var_10] +
push [ebp+Locale]  +
push [ebp+CodePage]  +
push [ebp+lpCharType]  +
push [ebp+cchSrc]  +
push [ebp+lpSrcStr]  +
push [ebp+dwInfoType]  +
call sub_1017F09  +
add esp 1Ch +
cmp [ebp+var_4] 0 +
jz locret_1018108  +
mov ecx [ebp+var_8] +
and dword ptr [ecx+70h] 0FFFFFFFDh +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_1018483  +
push dword ptr [esi+4]  +
call sub_1011942  +
push dword ptr [esi+8]  +
call sub_1011942  +
push dword ptr [esi+0Ch]  +
call sub_1011942  +
push dword ptr [esi+10h]  +
call sub_1011942  +
push dword ptr [esi+14h]  +
call sub_1011942  +
push dword ptr [esi+18h]  +
call sub_1011942  +
push dword ptr [esi]  +
call sub_1011942  +
push dword ptr [esi+20h]  +
call sub_1011942  +
push dword ptr [esi+24h]  +
call sub_1011942  +
push dword ptr [esi+28h]  +
call sub_1011942  +
push dword ptr [esi+2Ch]  +
call sub_1011942  +
push dword ptr [esi+30h]  +
call sub_1011942  +
push dword ptr [esi+34h]  +
call sub_1011942  +
push dword ptr [esi+1Ch]  +
call sub_1011942  +
push dword ptr [esi+38h]  +
call sub_1011942  +
push dword ptr [esi+3Ch]  +
call sub_1011942  +
add esp 40h +
push dword ptr [esi+40h]  +
call sub_1011942  +
push dword ptr [esi+44h]  +
call sub_1011942  +
push dword ptr [esi+48h]  +
call sub_1011942  +
push dword ptr [esi+4Ch]  +
call sub_1011942  +
push dword ptr [esi+50h]  +
call sub_1011942  +
push dword ptr [esi+54h]  +
call sub_1011942  +
push dword ptr [esi+58h]  +
call sub_1011942  +
push dword ptr [esi+5Ch]  +
call sub_1011942  +
push dword ptr [esi+60h]  +
call sub_1011942  +
push dword ptr [esi+64h]  +
call sub_1011942  +
push dword ptr [esi+68h]  +
call sub_1011942  +
push dword ptr [esi+6Ch]  +
call sub_1011942  +
push dword ptr [esi+70h]  +
call sub_1011942  +
push dword ptr [esi+74h]  +
call sub_1011942  +
push dword ptr [esi+78h]  +
call sub_1011942  +
push dword ptr [esi+7Ch]  +
call sub_1011942  +
add esp 40h +
push dword ptr [esi+80h]  +
call sub_1011942  +
push dword ptr [esi+84h]  +
call sub_1011942  +
push dword ptr [esi+88h]  +
call sub_1011942  +
push dword ptr [esi+8Ch]  +
call sub_1011942  +
push dword ptr [esi+90h]  +
call sub_1011942  +
push dword ptr [esi+94h]  +
call sub_1011942  +
push dword ptr [esi+98h]  +
call sub_1011942  +
push dword ptr [esi+9Ch]  +
call sub_1011942  +
push dword ptr [esi+0A0h]  +
call sub_1011942  +
push dword ptr [esi+0A4h]  +
call sub_1011942  +
push dword ptr [esi+0A8h]  +
call sub_1011942  +
push dword ptr [esi+0BCh]  +
call sub_1011942  +
push dword ptr [esi+0C0h]  +
call sub_1011942  +
push dword ptr [esi+0C4h]  +
call sub_1011942  +
push dword ptr [esi+0C8h]  +
call sub_1011942  +
push dword ptr [esi+0CCh]  +
call sub_1011942  +
add esp 40h +
push dword ptr [esi+0D0h]  +
call sub_1011942  +
push dword ptr [esi+0B8h]  +
call sub_1011942  +
push dword ptr [esi+0D8h]  +
call sub_1011942  +
push dword ptr [esi+0DCh]  +
call sub_1011942  +
push dword ptr [esi+0E0h]  +
call sub_1011942  +
push dword ptr [esi+0E4h]  +
call sub_1011942  +
push dword ptr [esi+0E8h]  +
call sub_1011942  +
push dword ptr [esi+0ECh]  +
call sub_1011942  +
push dword ptr [esi+0D4h]  +
call sub_1011942  +
push dword ptr [esi+0F0h]  +
call sub_1011942  +
push dword ptr [esi+0F4h]  +
call sub_1011942  +
push dword ptr [esi+0F8h]  +
call sub_1011942  +
push dword ptr [esi+0FCh]  +
call sub_1011942  +
push dword ptr [esi+100h]  +
call sub_1011942  +
push dword ptr [esi+104h]  +
call sub_1011942  +
push dword ptr [esi+108h]  +
call sub_1011942  +
add esp 40h +
push dword ptr [esi+10Ch]  +
call sub_1011942  +
push dword ptr [esi+110h]  +
call sub_1011942  +
push dword ptr [esi+114h]  +
call sub_1011942  +
push dword ptr [esi+118h]  +
call sub_1011942  +
push dword ptr [esi+11Ch]  +
call sub_1011942  +
push dword ptr [esi+120h]  +
call sub_1011942  +
push dword ptr [esi+124h]  +
call sub_1011942  +
push dword ptr [esi+128h]  +
call sub_1011942  +
push dword ptr [esi+12Ch]  +
call sub_1011942  +
push dword ptr [esi+130h]  +
call sub_1011942  +
push dword ptr [esi+134h]  +
call sub_1011942  +
push dword ptr [esi+138h]  +
call sub_1011942  +
push dword ptr [esi+13Ch]  +
call sub_1011942  +
push dword ptr [esi+140h]  +
call sub_1011942  +
push dword ptr [esi+144h]  +
call sub_1011942  +
push dword ptr [esi+148h]  +
call sub_1011942  +
add esp 40h +
push dword ptr [esi+14Ch]  +
call sub_1011942  +
push dword ptr [esi+150h]  +
call sub_1011942  +
push dword ptr [esi+154h]  +
call sub_1011942  +
push dword ptr [esi+158h]  +
call sub_1011942  +
push dword ptr [esi+15Ch]  +
call sub_1011942  +
push dword ptr [esi+160h]  +
call sub_1011942  +
add esp 18h +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_10184F1  +
mov eax [esi] +
cmp eax off_1020970 +
jz loc_10184A9  +
push eax  +
call sub_1011942  +
pop ecx  +
mov eax [esi+4] +
cmp eax off_1020974 +
jz loc_10184BB  +
push eax  +
call sub_1011942  +
pop ecx  +
mov eax [esi+8] +
cmp eax off_1020978 +
jz loc_10184CD  +
push eax  +
call sub_1011942  +
pop ecx  +
mov eax [esi+30h] +
cmp eax off_10209A0 +
jz loc_10184DF  +
push eax  +
call sub_1011942  +
pop ecx  +
mov esi [esi+34h] +
cmp esi off_10209A4 +
jz loc_10184F1  +
push esi  +
call sub_1011942  +
pop ecx  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_10185F4  +
mov eax [esi+0Ch] +
cmp eax off_102097C +
jz loc_101851C  +
push eax  +
call sub_1011942  +
pop ecx  +
mov eax [esi+10h] +
cmp eax off_1020980 +
jz loc_101852E  +
push eax  +
call sub_1011942  +
pop ecx  +
mov eax [esi+14h] +
cmp eax off_1020984 +
jz loc_1018540  +
push eax  +
call sub_1011942  +
pop ecx  +
mov eax [esi+18h] +
cmp eax off_1020988 +
jz loc_1018552  +
push eax  +
call sub_1011942  +
pop ecx  +
mov eax [esi+1Ch] +
cmp eax off_102098C +
jz loc_1018564  +
push eax  +
call sub_1011942  +
pop ecx  +
mov eax [esi+20h] +
cmp eax off_1020990 +
jz loc_1018576  +
push eax  +
call sub_1011942  +
pop ecx  +
mov eax [esi+24h] +
cmp eax off_1020994 +
jz loc_1018588  +
push eax  +
call sub_1011942  +
pop ecx  +
mov eax [esi+38h] +
cmp eax off_10209A8 +
jz loc_101859A  +
push eax  +
call sub_1011942  +
pop ecx  +
mov eax [esi+3Ch] +
cmp eax off_10209AC +
jz loc_10185AC  +
push eax  +
call sub_1011942  +
pop ecx  +
mov eax [esi+40h] +
cmp eax off_10209B0 +
jz loc_10185BE  +
push eax  +
call sub_1011942  +
pop ecx  +
mov eax [esi+44h] +
cmp eax off_10209B4 +
jz loc_10185D0  +
push eax  +
call sub_1011942  +
pop ecx  +
mov eax [esi+48h] +
cmp eax off_10209B8 +
jz loc_10185E2  +
push eax  +
call sub_1011942  +
pop ecx  +
mov esi [esi+4Ch] +
cmp esi off_10209BC +
jz loc_10185F4  +
push esi  +
call sub_1011942  +
pop ecx  +
pop esi  +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
push esi  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
mov edx [ebp+0Ch] +
lea ecx [ecx+0] +
mov al [edx] +
or al al +
jz loc_1018623  +
add edx 1 +
bts [esp] eax +
jmp loc_1018614  +
***
mov esi [ebp+8] +
or ecx 0FFFFFFFFh +
lea ecx [ecx+0] +
add ecx 1 +
mov al [esi] +
or al al +
jz loc_101863E  +
add esi 1 +
bt [esp] eax +
jnb loc_101862C  +
mov eax ecx +
add esp 20h +
pop esi  +
leave   +
retn   +
***
push ebp  +
mov ebp esp +
push esi  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
mov edx [ebp+0Ch] +
lea ecx [ecx+0] +
mov al [edx] +
or al al +
jz loc_1018673  +
add edx 1 +
bts [esp] eax +
jmp loc_1018664  +
***
mov esi [ebp+8] +
mov edi edi +
mov al [esi] +
or al al +
jz loc_101868A  +
add esi 1 +
bt [esp] eax +
jnb loc_1018678  +
lea eax [esi-1] +
add esp 20h +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
push 6  +
lea eax [ebp+LCData] +
push eax  +
push 1004h  +
push [ebp+Locale]  +
mov [ebp+var_6] 0 +
call ds:GetLocaleInfoA  +
test eax eax +
jnz loc_10186C8  +
or eax 0FFFFFFFFh +
jmp loc_10186D2  +
lea eax [ebp+LCData] +
push eax  +
call sub_1019743  +
pop ecx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1010BBF  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_10] +
mov [ebp+lpMultiByteStr] eax +
mov eax [ebp+arg_C] +
mov [ebp+var_30] eax +
mov eax [eax] +
push ebx  +
xor ebx ebx +
mov [ebp+cchMultiByte] eax +
mov eax [ebp+CodePage] +
push esi  +
push edi  +
mov [ebp+var_34] ecx +
mov [ebp+var_20] ebx +
mov [ebp+var_2C] ebx +
cmp eax [ebp+arg_4] +
jz loc_1018888  +
mov esi ds:GetCPInfo +
lea ecx [ebp+CPInfo] +
push ecx  +
push eax  +
call esi  +
mov edi ds:MultiByteToWideChar +
test eax eax +
jz loc_101879E  +
cmp [ebp+CPInfo.MaxCharSize] 1 +
jnz loc_101879E  +
lea eax [ebp+CPInfo] +
push eax  +
push [ebp+arg_4]  +
call esi  +
test eax eax +
jz loc_101879E  +
cmp [ebp+CPInfo.MaxCharSize] 1 +
jnz loc_101879E  +
mov esi [ebp+cchMultiByte] +
mov [ebp+var_2C] 1 +
cmp esi 0FFFFFFFFh +
jnz loc_1018774  +
mov eax [ebp+lpMultiByteStr] +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
cmp cl bl +
jnz loc_1018768  +
sub eax edx +
lea esi [eax+1] +
cmp esi ebx +
jle loc_10187D3  +
cmp esi 7FFFFFF0h +
ja loc_10187D3  +
lea eax [esi+esi+8] +
cmp eax 400h +
ja loc_10187BA  +
call sub_1018A10  +
mov eax esp +
cmp eax ebx +
jz loc_10187CE  +
mov dword ptr [eax] 0CCCCh +
jmp loc_10187CB  +
push ebx  +
push ebx  +
push [ebp+cchMultiByte]  +
push [ebp+lpMultiByteStr]  +
push 1  +
push [ebp+CodePage]  +
call edi  +
mov esi eax +
cmp esi ebx +
jnz loc_1018776  +
xor eax eax +
jmp loc_101888B  +
push eax  +
call sub_1011A29  +
pop ecx  +
cmp eax ebx +
jz loc_10187CE  +
mov dword ptr [eax] 0DDDDh +
add eax 8 +
mov [ebp+lpWideCharStr] eax +
jmp loc_10187D6  +
mov [ebp+lpWideCharStr] ebx +
cmp [ebp+lpWideCharStr] ebx +
jz loc_10187B3  +
lea eax [esi+esi] +
push eax  +
push ebx  +
push [ebp+lpWideCharStr]  +
call sub_1010B40  +
add esp 0Ch +
push esi  +
push [ebp+lpWideCharStr]  +
push [ebp+cchMultiByte]  +
push [ebp+lpMultiByteStr]  +
push 1  +
push [ebp+CodePage]  +
call edi  +
test eax eax +
jz loc_101887F  +
mov edi [ebp+var_34] +
cmp edi ebx +
jz loc_1018824  +
push ebx  +
push ebx  +
push [ebp+arg_14]  +
push edi  +
push esi  +
push [ebp+lpWideCharStr]  +
push ebx  +
push [ebp+arg_4]  +
call ds:WideCharToMultiByte  +
test eax eax +
jz loc_101887F  +
mov [ebp+var_20] edi +
jmp loc_101887F  +
mov edi ds:WideCharToMultiByte +
cmp [ebp+var_2C] ebx +
jnz loc_1018843  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push esi  +
push [ebp+lpWideCharStr]  +
push ebx  +
push [ebp+arg_4]  +
call edi  +
mov esi eax +
cmp esi ebx +
jz loc_101887F  +
push esi  +
push 1  +
call sub_1016F64  +
pop ecx  +
pop ecx  +
mov [ebp+var_20] eax +
cmp eax ebx +
jz loc_101887F  +
push ebx  +
push ebx  +
push esi  +
push eax  +
push esi  +
push [ebp+lpWideCharStr]  +
push ebx  +
push [ebp+arg_4]  +
call edi  +
cmp eax ebx +
jnz loc_1018874  +
push [ebp+var_20]  +
call sub_1011942  +
pop ecx  +
mov [ebp+var_20] ebx +
jmp loc_101887F  +
cmp [ebp+cchMultiByte] 0FFFFFFFFh +
jz loc_101887F  +
mov ecx [ebp+var_30] +
mov [ecx] eax +
push [ebp+lpWideCharStr]  +
call sub_10153B5  +
pop ecx  +
mov eax [ebp+var_20] +
lea esp [ebp-40h] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1010BBF  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 5Ch +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
lea eax [ebp+var_C] +
push edi  +
xor esi esi +
push eax  +
mov [ebp+var_C] esi +
call sub_1011E39  +
pop ecx  +
test eax eax +
jz loc_10188D7  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
call sub_101440F  +
add esp 14h +
push 4  +
pop eax  +
call sub_1019770  +
mov [ebp+lpAddress] esp +
push 1Ch  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+lpAddress]  +
call ds:VirtualQuery  +
test eax eax +
jz loc_10189F3  +
mov eax [ebp+Buffer.AllocationBase] +
mov [ebp+var_18] eax +
lea eax [ebp+SystemInfo] +
push eax  +
call ds:GetSystemInfo  +
mov edi [ebp+var_C] +
mov ebx [ebp+SystemInfo.dwPageSize] +
dec edi  +
neg edi  +
sbb edi edi +
and edi 103h +
inc edi  +
cmp [ebp+var_C] 2 +
mov [ebp+dwSize] esi +
jnz loc_101896C  +
mov [ebp+var_10] esi +
mov esi ds:GetModuleHandleW +
push offset aKernelbase_d_0  +
call esi  +
test eax eax +
jnz loc_1018943  +
push offset aKernel32_dll_1  +
call esi  +
test eax eax +
jz loc_101896C  +
push offset aSetthreadstack  +
push eax  +
call ds:GetProcAddress  +
test eax eax +
jz loc_101896C  +
and [ebp+var_10] 0 +
lea ecx [ebp+var_10] +
push ecx  +
call eax  +
cmp eax 1 +
jnz loc_101896C  +
mov eax [ebp+var_10] +
test eax eax +
jbe loc_101896C  +
mov [ebp+dwSize] eax +
lea eax [ebp+dwSize] +
push eax  +
lea esi [ebx-1] +
push esi  +
push [ebp+dwSize]  +
call sub_1012597  +
add esp 0Ch +
test eax eax +
jl loc_10189F3  +
not esi  +
and [ebp+dwSize] esi +
jz loc_101899E  +
lea eax [ebp+dwSize] +
push eax  +
push ebx  +
push [ebp+dwSize]  +
call sub_1012597  +
add esp 0Ch +
test eax eax +
jl loc_10189F3  +
lea eax [ebx+ebx] +
cmp [ebp+dwSize] eax +
jnb loc_10189A9  +
mov [ebp+dwSize] eax +
lea esi [ebx-1] +
not esi  +
and esi [ebp+lpAddress] +
sub esi [ebp+dwSize] +
cmp [ebp+var_C] 1 +
jnz loc_10189BD  +
push 11h  +
pop ebx  +
mov eax [ebp+var_18] +
add ebx eax +
cmp esi ebx +
jb loc_10189F3  +
push 4  +
push 1000h  +
push [ebp+dwSize]  +
push esi  +
call ds:VirtualAlloc  +
test eax eax +
jz loc_10189F3  +
lea eax [ebp+flOldProtect] +
push eax  +
push edi  +
push [ebp+dwSize]  +
push esi  +
call ds:VirtualProtect  +
test eax eax +
jz loc_10189F3  +
xor eax eax +
inc eax  +
jmp loc_10189F5  +
xor eax eax +
lea esp [ebp-68h] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1010BBF  +
leave   +
retn   +
***
sub ecx eax +
and ecx 0Fh +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp sub_1019770  +
***
push ecx  +
lea ecx [esp+8] +
sub ecx eax +
and ecx 7 +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp sub_1019770  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 0FFFFh +
sub esp 14h +
cmp [ebp+WideCharStr] ax +
jnz loc_1018A5A  +
and dword ptr [ebp+CharType] 0 +
jmp loc_1018ABF  +
mov eax 100h +
cmp [ebp+WideCharStr] ax +
jnb loc_1018A7F  +
movzx eax [ebp+WideCharStr] +
mov ecx off_10207FC +
mov ax [ecx+eax*2] +
and ax [ebp+arg_4] +
movzx eax ax +
mov dword ptr [ebp+CharType] eax +
jmp loc_1018ABF  +
push [ebp+arg_8]  +
lea ecx [ebp+var_14] +
call sub_1010CA3  +
mov eax [ebp+var_14] +
push dword ptr [eax+14h]  +
push dword ptr [eax+4]  +
lea eax [ebp+CharType] +
push eax  +
push 1  +
lea eax [ebp+WideCharStr] +
push eax  +
lea eax [ebp+var_14] +
push 1  +
push eax  +
call sub_10199CE  +
add esp 1Ch +
test eax eax +
jnz loc_1018AB2  +
and dword ptr [ebp+CharType] eax +
cmp [ebp+var_8] 0 +
jz loc_1018ABF  +
mov eax [ebp+var_C] +
and dword ptr [eax+70h] 0FFFFFFFDh +
movzx eax [ebp+CharType] +
movzx ecx [ebp+arg_4] +
and eax ecx +
leave   +
retn   +
***
push ebp  +
mov ebp esp +
push edi  +
push esi  +
mov esi [ebp+0Ch] +
mov ecx [ebp+10h] +
mov edi [ebp+8] +
mov eax ecx +
mov edx ecx +
add eax esi +
cmp edi esi +
jbe loc_1018AF0  +
cmp edi eax +
jb loc_1018C94  +
cmp ecx 100h +
jb loc_1018B17  +
cmp dword_102447C 0 +
jz loc_1018B17  +
push edi  +
push esi  +
and edi 0Fh +
and esi 0Fh +
cmp edi esi +
pop esi  +
pop edi  +
jnz loc_1018B17  +
pop esi  +
pop edi  +
pop ebp  +
jmp sub_10159BF  +
***
test edi 3 +
jnz loc_1018B34  +
shr ecx 2 +
and edx 3 +
cmp ecx 8 +
jb loc_1018B54  +
movs   +
jmp ds:off_1018C44[edx*4]  +
mov eax edi +
mov edx 3 +
sub ecx 4 +
jb loc_1018B4C  +
and eax 3 +
add ecx eax +
jmp dword ptr ds:(loc_1018B54+4)[eax*4]  +
***
jmp ds:dword_1018C54[ecx*4]  +
***
jmp ds:off_1018BD8[ecx*4]  +
and edx ecx +
mov al [esi] +
mov [edi] al +
mov al [esi+1] +
mov [edi+1] al +
mov al [esi+2] +
shr ecx 2 +
mov [edi+2] al +
add esi 3 +
add edi 3 +
cmp ecx 8 +
jb loc_1018B54  +
movs   +
jmp ds:off_1018C44[edx*4]  +
***
and edx ecx +
mov al [esi] +
mov [edi] al +
mov al [esi+1] +
shr ecx 2 +
mov [edi+1] al +
add esi 2 +
add edi 2 +
cmp ecx 8 +
jb loc_1018B54  +
movs   +
jmp ds:off_1018C44[edx*4]  +
***
and edx ecx +
mov al [esi] +
mov [edi] al +
add esi 1 +
shr ecx 2 +
add edi 1 +
cmp ecx 8 +
jb loc_1018B54  +
movs   +
jmp ds:off_1018C44[edx*4]  +
***
mov eax [esi+ecx*4-1Ch] +
mov [edi+ecx*4-1Ch] eax +
mov eax [esi+ecx*4-18h] +
mov [edi+ecx*4-18h] eax +
mov eax [esi+ecx*4-14h] +
mov [edi+ecx*4-14h] eax +
mov eax [esi+ecx*4-10h] +
mov [edi+ecx*4-10h] eax +
mov eax [esi+ecx*4-0Ch] +
mov [edi+ecx*4-0Ch] eax +
mov eax [esi+ecx*4-8] +
mov [edi+ecx*4-8] eax +
mov eax [esi+ecx*4-4] +
mov [edi+ecx*4-4] eax +
lea eax ds:0[ecx*4] +
add esi eax +
add edi eax +
jmp ds:off_1018C44[edx*4]  +
***
pop edi  +
leave   +
retn   +
***
mov al [esi] +
mov [edi] al +
mov eax [ebp+8] +
pop esi  +
pop edi  +
leave   +
retn   +
***
mov al [esi] +
mov [edi] al +
mov al [esi+1] +
mov [edi+1] al +
mov eax [ebp+8] +
pop esi  +
pop edi  +
leave   +
retn   +
***
mov al [esi] +
mov [edi] al +
mov al [esi+1] +
mov [edi+1] al +
mov al [esi+2] +
mov [edi+2] al +
mov eax [ebp+8] +
pop esi  +
pop edi  +
leave   +
retn   +
***
lea esi [ecx+esi-4] +
lea edi [ecx+edi-4] +
test edi 3 +
jnz loc_1018CC8  +
shr ecx 2 +
and edx 3 +
cmp ecx 8 +
jb loc_1018CBC  +
std   +
movs   +
cld   +
jmp ds:off_1018DE0[edx*4]  +
neg ecx  +
jmp ds:off_1018D90[ecx*4]  +
mov eax edi +
mov edx 3 +
cmp ecx 4 +
jb loc_1018CE0  +
and eax 3 +
sub ecx eax +
jmp dword ptr ds:(loc_1018CE0+4)[eax*4]  +
***
jmp ds:off_1018DE0[ecx*4]  +
mov al [esi+3] +
and edx ecx +
mov [edi+3] al +
sub esi 1 +
shr ecx 2 +
sub edi 1 +
cmp ecx 8 +
jb loc_1018CBC  +
std   +
movs   +
cld   +
jmp ds:off_1018DE0[edx*4]  +
mov al [esi+3] +
and edx ecx +
mov [edi+3] al +
mov al [esi+2] +
shr ecx 2 +
mov [edi+2] al +
sub esi 2 +
sub edi 2 +
cmp ecx 8 +
jb loc_1018CBC  +
std   +
movs   +
cld   +
jmp ds:off_1018DE0[edx*4]  +
mov al [esi+3] +
and edx ecx +
mov [edi+3] al +
mov al [esi+2] +
mov [edi+2] al +
mov al [esi+1] +
shr ecx 2 +
mov [edi+1] al +
sub esi 3 +
sub edi 3 +
cmp ecx 8 +
jb loc_1018CBC  +
std   +
movs   +
cld   +
jmp ds:off_1018DE0[edx*4]  +
mov eax [esi+ecx*4+1Ch] +
mov [edi+ecx*4+1Ch] eax +
mov eax [esi+ecx*4+18h] +
mov [edi+ecx*4+18h] eax +
mov eax [esi+ecx*4+14h] +
mov [edi+ecx*4+14h] eax +
mov eax [esi+ecx*4+10h] +
mov [edi+ecx*4+10h] eax +
mov eax [esi+ecx*4+0Ch] +
mov [edi+ecx*4+0Ch] eax +
mov eax [esi+ecx*4+8] +
mov [edi+ecx*4+8] eax +
mov eax [esi+ecx*4+4] +
mov [edi+ecx*4+4] eax +
lea eax ds:0[ecx*4] +
add esi eax +
add edi eax +
jmp ds:off_1018DE0[edx*4]  +
mov eax [ebp+8] +
pop esi  +
pop edi  +
leave   +
retn   +
***
mov al [esi+3] +
mov [edi+3] al +
mov eax [ebp+8] +
pop esi  +
pop edi  +
leave   +
retn   +
***
mov al [esi+3] +
mov [edi+3] al +
mov al [esi+2] +
mov [edi+2] al +
mov eax [ebp+8] +
pop esi  +
pop edi  +
leave   +
retn   +
***
mov al [esi+3] +
mov [edi+3] al +
mov al [esi+2] +
mov [edi+2] al +
mov al [esi+1] +
mov [edi+1] al +
mov eax [ebp+8] +
pop esi  +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp-4] eax +
test byte_10209D0 1 +
push esi  +
jz loc_1018E61  +
push 0Ah  +
call sub_10120C5  +
pop ecx  +
call sub_1016869  +
test eax eax +
jz loc_1018E72  +
push 16h  +
call sub_101687B  +
pop ecx  +
test byte_10209D0 2 +
jz loc_1018F49  +
mov [ebp-220h] eax +
mov [ebp-224h] ecx +
mov [ebp-228h] edx +
mov [ebp-22Ch] ebx +
mov [ebp-230h] esi +
mov [ebp-234h] edi +
mov word ptr [ebp-208h] ss +
mov word ptr [ebp-214h] cs +
mov word ptr [ebp-238h] ds +
mov word ptr [ebp-23Ch] es +
mov word ptr [ebp-240h] fs +
mov [ebp-244h] gs +
pushf   +
pop dword ptr [ebp-210h]  +
mov esi [ebp+4] +
lea eax [ebp+4] +
mov [ebp-20Ch] eax +
mov dword ptr [ebp-2D0h] 10001h +
mov [ebp-218h] esi +
mov eax [eax-4] +
push 50h  +
mov [ebp-21Ch] eax +
lea eax [ebp-328h] +
push 0  +
push eax  +
call sub_1010B40  +
lea eax [ebp-328h] +
add esp 0Ch +
mov [ebp-2D8h] eax +
lea eax [ebp-2D0h] +
push 0  +
mov dword ptr [ebp-328h] 40000015h +
mov [ebp-31Ch] esi +
mov [ebp-2D4h] eax +
call ds:SetUnhandledExceptionFilter  +
lea eax [ebp-2D8h] +
push eax  +
call ds:UnhandledExceptionFilter  +
push 3  +
call sub_101203B  +
pop ecx  +
retn   +
***
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push ebp  +
push 0  +
push 0  +
push offset loc_1018F7C  +
push dword ptr [ebp+8]  +
call RtlUnwind  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push edi  +
mov eax [esp+arg_0] +
push ebp  +
push eax  +
push 0FFFFFFFEh  +
push offset loc_1018F84  +
push large dword ptr fs:0  +
mov eax dword_101FB10 +
xor eax esp +
push eax  +
lea eax [esp+18h+var_14] +
mov large fs:0 eax +
mov eax [esp+18h+arg_0] +
mov ebx [eax+8] +
mov esi [eax+0Ch] +
cmp esi 0FFFFFFFFh +
jz loc_101903B  +
cmp [esp+18h+arg_4] 0FFFFFFFFh +
jz loc_101900E  +
cmp esi [esp+18h+arg_4] +
jbe loc_101903B  +
lea esi [esi+esi*2] +
mov ecx [ebx+esi*4] +
mov [esp+18h+var_C] ecx +
mov [eax+0Ch] ecx +
cmp dword ptr [ebx+esi*4+4] 0 +
jnz loc_1019039  +
push 101h  +
mov eax [ebx+esi*4+8] +
call sub_1019079  +
mov eax [ebx+esi*4+8] +
call sub_1019098  +
jmp loc_1018FF2  +
mov ecx [esp+18h+var_14] +
mov large fs:0 ecx +
add esp 18h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
xor eax eax +
mov ecx large fs:0 +
cmp dword ptr [ecx+4] offset loc_1018F84 +
jnz locret_101906F  +
mov edx [ecx+0Ch] +
mov edx [edx+0Ch] +
cmp [ecx+8] edx +
jnz locret_101906F  +
mov eax 1 +
retn   +
***
mov ebx offset unk_10209D4 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push ebx  +
xor ebx ebx +
cmp ecx ebx +
push esi  +
push edi  +
jl loc_101910C  +
cmp ecx uNumber +
jnb loc_101910C  +
mov esi ecx +
and esi 1Fh +
imul esi esi +
mov eax ecx +
sar eax 5 +
lea edi dword_10244A0[eax*4] +
mov eax [edi] +
add eax esi +
test byte ptr [eax+4] 1 +
jz loc_101910C  +
cmp dword ptr [eax] 0FFFFFFFFh +
jz loc_101910C  +
cmp dword_101FB04 1 +
jnz loc_1019102  +
sub ecx ebx +
jz loc_10190F9  +
dec ecx  +
jz loc_10190F4  +
dec ecx  +
jnz loc_1019102  +
push ebx  +
push 0FFFFFFF4h  +
jmp loc_10190FC  +
push ebx  +
push 0FFFFFFF5h  +
jmp loc_10190FC  +
push ebx  +
push 0FFFFFFF6h  +
call ds:SetStdHandle  +
mov eax [edi] +
or dword ptr [esi+eax] 0FFFFFFFFh +
xor eax eax +
jmp loc_1019121  +
call sub_1014511  +
mov dword ptr [eax] 9 +
call sub_1014529  +
mov [eax] ebx +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 0FFFFFFFFh +
jnz loc_1019148  +
call sub_1014511  +
mov dword ptr [eax] 9 +
or eax 0FFFFFFFFh +
pop ebp  +
retn   +
cmp eax 0FFFFFFFEh +
jnz loc_1019157  +
call sub_1014529  +
and dword ptr [eax] 0 +
jmp loc_1019138  +
push esi  +
xor esi esi +
cmp eax esi +
jl loc_10191A5  +
cmp eax uNumber +
jnb loc_10191A5  +
mov ecx eax +
and eax 1Fh +
imul eax eax +
sar ecx 5 +
mov ecx dword_10244A0[ecx*4] +
add eax ecx +
test byte ptr [eax+4] 1 +
jnz loc_10191A1  +
call sub_1014529  +
mov [eax] esi +
call sub_1014511  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 9 +
call sub_10144BA  +
add esp 14h +
jmp loc_10191B7  +
mov eax [eax] +
jmp loc_10191BA  +
call sub_1014529  +
mov [eax] esi +
call sub_1014511  +
mov dword ptr [eax] 9 +
or eax 0FFFFFFFFh +
pop esi  +
pop ebp  +
retn   +
***
call sub_10165F4  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx eax +
and eax 1Fh +
imul eax eax +
sar ecx 5 +
mov ecx dword_10244A0[ecx*4] +
lea eax [ecx+eax+0Ch] +
push eax  +
call ds:LeaveCriticalSection  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
xor esi esi +
cmp dword_10209E4 esi +
jz loc_1019300  +
cmp hConsoleOutput 0FFFFFFFEh +
jnz loc_10192BF  +
call sub_1019A13  +
mov eax hConsoleOutput +
cmp eax 0FFFFFFFFh +
jnz loc_10192D0  +
mov eax 0FFFFh +
jmp loc_1019340  +
push esi  +
lea ecx [ebp+NumberOfCharsWritten] +
push ecx  +
push 1  +
lea ecx [ebp+WideCharStr] +
push ecx  +
push eax  +
call ds:WriteConsoleW  +
test eax eax +
jnz loc_101934D  +
cmp dword_10209E4 2 +
jnz loc_10192C9  +
call ds:GetLastError  +
cmp eax 78h +
jnz loc_10192C9  +
mov dword_10209E4 esi +
push esi  +
push esi  +
push 5  +
lea eax [ebp+Buffer] +
push eax  +
push 1  +
lea eax [ebp+WideCharStr] +
push eax  +
push esi  +
call ds:GetConsoleOutputCP  +
push eax  +
call ds:WideCharToMultiByte  +
mov ecx hConsoleOutput +
cmp ecx 0FFFFFFFFh +
jz loc_10192C9  +
push esi  +
lea edx [ebp+NumberOfCharsWritten] +
push edx  +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
push ecx  +
call ds:WriteConsoleA  +
test eax eax +
jz loc_10192C9  +
mov ax [ebp+WideCharStr] +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1010BBF  +
leave   +
retn   +
mov dword_10209E4 1 +
jmp loc_101933C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
xor ebx ebx +
cmp esi ebx +
jz loc_1019386  +
cmp [ebp+arg_8] ebx +
jz loc_1019386  +
cmp [esi] bl +
jnz loc_101938C  +
mov eax [ebp+lpWideCharStr] +
cmp eax ebx +
jz loc_1019386  +
xor ecx ecx +
mov [eax] cx +
xor eax eax +
pop esi  +
pop ebx  +
leave   +
retn   +
push [ebp+arg_C]  +
lea ecx [ebp+var_10] +
call sub_1010CA3  +
mov eax [ebp+var_10] +
cmp [eax+14h] ebx +
jnz loc_10193BE  +
mov eax [ebp+lpWideCharStr] +
cmp eax ebx +
jz loc_10193AD  +
movzx cx byte ptr [esi] +
mov [eax] cx +
cmp [ebp+var_4] bl +
jz loc_10193B9  +
mov eax [ebp+var_8] +
and dword ptr [eax+70h] 0FFFFFFFDh +
xor eax eax +
inc eax  +
jmp loc_1019388  +
lea eax [ebp+var_10] +
push eax  +
movzx eax byte ptr [esi] +
push eax  +
call sub_10158DE  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_101944E  +
mov eax [ebp+var_10] +
mov ecx [eax+0ACh] +
cmp ecx 1 +
jle loc_1019404  +
cmp [ebp+arg_8] ecx +
jl loc_1019404  +
xor edx edx +
cmp [ebp+lpWideCharStr] ebx +
setnz dl  +
push edx  +
push [ebp+lpWideCharStr]  +
push ecx  +
push esi  +
push 9  +
push dword ptr [eax+4]  +
call ds:MultiByteToWideChar  +
test eax eax +
mov eax [ebp+var_10] +
jnz loc_1019414  +
mov ecx [ebp+arg_8] +
cmp ecx [eax+0ACh] +
jb loc_101942F  +
cmp [esi+1] bl +
jz loc_101942F  +
mov eax [eax+0ACh] +
cmp [ebp+var_4] bl +
jz loc_1019388  +
mov ecx [ebp+var_8] +
and dword ptr [ecx+70h] 0FFFFFFFDh +
jmp loc_1019388  +
call sub_1014511  +
mov dword ptr [eax] 2Ah +
cmp [ebp+var_4] bl +
jz loc_1019446  +
mov eax [ebp+var_8] +
and dword ptr [eax+70h] 0FFFFFFFDh +
or eax 0FFFFFFFFh +
jmp loc_1019388  +
xor eax eax +
cmp [ebp+lpWideCharStr] ebx +
setnz al  +
push eax  +
push [ebp+lpWideCharStr]  +
mov eax [ebp+var_10] +
push 1  +
push esi  +
push 9  +
push dword ptr [eax+4]  +
call ds:MultiByteToWideChar  +
test eax eax +
jnz loc_10193AD  +
jmp loc_101942F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+lpWideCharStr]  +
call sub_101935E  +
add esp 10h +
pop ebp  +
retn   +
***
call sub_10165F4  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+0Ch] +
mov ecx eax +
and cl 3 +
xor ebx ebx +
cmp cl 2 +
jnz loc_1019596  +
test eax 108h +
jz loc_1019596  +
mov eax [esi+8] +
push edi  +
mov edi [esi] +
sub edi eax +
test edi edi +
jle loc_1019595  +
push edi  +
push eax  +
push esi  +
call sub_1017D24  +
pop ecx  +
push eax  +
call sub_10179DD  +
add esp 0Ch +
cmp eax edi +
jnz loc_101958E  +
mov eax [esi+0Ch] +
test al al +
jns loc_1019595  +
and eax 0FFFFFFFDh +
mov [esi+0Ch] eax +
jmp loc_1019595  +
or dword ptr [esi+0Ch] 20h +
or ebx 0FFFFFFFFh +
pop edi  +
mov eax [esi+8] +
and dword ptr [esi+4] 0 +
mov [esi] eax +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_10195C0  +
push esi  +
call sub_10195F7  +
pop ecx  +
jmp loc_10195EF  +
push esi  +
call sub_101953D  +
pop ecx  +
test eax eax +
jz loc_10195D0  +
or eax 0FFFFFFFFh +
jmp loc_10195EF  +
test dword ptr [esi+0Ch] 4000h +
jz loc_10195ED  +
push esi  +
call sub_1017D24  +
push eax  +
call sub_1019B66  +
pop ecx  +
neg eax  +
pop ecx  +
sbb eax eax +
jmp loc_10195EF  +
xor eax eax +
pop esi  +
pop ebp  +
retn   +
***
call sub_10165F4  +
mov eax dword_1023444 +
push dword ptr [eax+esi*4]  +
push esi  +
call sub_1017CF7  +
pop ecx  +
pop ecx  +
retn   +
***
pop ecx  +
retn   +
***
pop ecx  +
retn   +
***
push ebp  +
mov ebp esp +
push edi  +
push esi  +
push ebx  +
mov esi [ebp+0Ch] +
mov edi [ebp+8] +
mov al 0FFh +
mov edi edi +
or al al +
jz loc_1019736  +
mov al [esi] +
add esi 1 +
mov ah [edi] +
add edi 1 +
cmp ah al +
jz loc_1019700  +
sub al 41h +
cmp al 1Ah +
sbb cl cl +
and cl 20h +
add al cl +
add al 41h +
xchg ah al +
sub al 41h +
cmp al 1Ah +
sbb cl cl +
and cl 20h +
add al cl +
add al 41h +
cmp al ah +
jz loc_1019700  +
sbb al al +
sbb al 0FFh +
movsx eax al +
pop ebx  +
pop esi  +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jnz loc_1019752  +
xor eax eax +
pop ebp  +
retn   +
push 1  +
push 0Ah  +
push 0  +
push [ebp+arg_0]  +
call sub_1010F89  +
add esp 10h +
pop ebp  +
retn   +
***
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb loc_1019792  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp+0] eax +
retn   +
sub eax 1000h +
test [eax] eax +
jmp loc_1019784  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
cmp [ebp+cchWideChar] 0FFFFFFFFh +
push ebx  +
push esi  +
push edi  +
jge loc_10197C2  +
xor eax eax +
jmp loc_10199B7  +
mov eax dword_1022FF8 +
mov esi ds:GetStringTypeW +
xor edi edi +
xor ebx ebx +
inc edi  +
cmp eax ebx +
jnz loc_1019809  +
lea eax [ebp+lpSrcStr] +
push eax  +
push edi  +
push offset SrcStr  +
push edi  +
call esi  +
test eax eax +
jz loc_10197EF  +
mov dword_1022FF8 edi +
jmp loc_101980D  +
call ds:GetLastError  +
cmp eax 78h +
jnz loc_1019804  +
push 2  +
pop eax  +
mov dword_1022FF8 eax +
jmp loc_1019809  +
mov eax dword_1022FF8 +
cmp eax edi +
jnz loc_1019820  +
push [ebp+lpCharType]  +
push [ebp+cchWideChar]  +
push [ebp+lpWideCharStr]  +
push [ebp+dwInfoType]  +
call esi  +
jmp loc_10199B7  +
cmp eax 2 +
jz loc_1019829  +
cmp eax ebx +
jnz loc_10197BB  +
mov [ebp+var_10] ebx +
cmp [ebp+Locale] ebx +
jnz loc_101983C  +
mov eax [ebp+arg_0] +
mov eax [eax] +
mov eax [eax+14h] +
mov [ebp+Locale] eax +
cmp [ebp+CodePage] ebx +
jnz loc_101984C  +
mov eax [ebp+arg_0] +
mov eax [eax] +
mov eax [eax+4] +
mov [ebp+CodePage] eax +
push [ebp+Locale]  +
call sub_1018695  +
pop ecx  +
cmp [ebp+CodePage] eax +
jz loc_1019862  +
cmp eax 0FFFFFFFFh +
jz loc_1019862  +
mov [ebp+CodePage] eax +
mov edi ds:WideCharToMultiByte +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+cchWideChar]  +
push [ebp+lpWideCharStr]  +
push ebx  +
push [ebp+CodePage]  +
call edi  +
mov esi eax +
mov [ebp+cchSrc] esi +
cmp esi ebx +
jz loc_10197BB  +
jle loc_10198C2  +
cmp esi 0FFFFFFE0h +
ja loc_10198C2  +
lea eax [esi+8] +
cmp eax 400h +
ja loc_10198A9  +
call sub_1018A10  +
mov eax esp +
cmp eax ebx +
jz loc_10198BD  +
mov dword ptr [eax] 0CCCCh +
jmp loc_10198BA  +
push eax  +
call sub_1011A29  +
pop ecx  +
cmp eax ebx +
jz loc_10198BD  +
mov dword ptr [eax] 0DDDDh +
add eax 8 +
mov [ebp+lpSrcStr] eax +
jmp loc_10198C5  +
mov [ebp+lpSrcStr] ebx +
cmp [ebp+lpSrcStr] ebx +
jz loc_10197BB  +
push esi  +
push ebx  +
push [ebp+lpSrcStr]  +
call sub_1010B40  +
add esp 0Ch +
push ebx  +
push ebx  +
push esi  +
push [ebp+lpSrcStr]  +
push [ebp+cchWideChar]  +
push [ebp+lpWideCharStr]  +
push ebx  +
push [ebp+CodePage]  +
call edi  +
test eax eax +
jz loc_10199AB  +
lea eax [esi+1] +
cmp eax ebx +
jle loc_101993A  +
cmp eax 7FFFFFF0h +
ja loc_101993A  +
lea eax [esi+esi+0Ah] +
cmp eax 400h +
ja loc_1019921  +
call sub_1018A10  +
mov eax esp +
cmp eax ebx +
jz loc_1019935  +
mov dword ptr [eax] 0CCCCh +
jmp loc_1019932  +
push eax  +
call sub_1011A29  +
pop ecx  +
cmp eax ebx +
jz loc_1019935  +
mov dword ptr [eax] 0DDDDh +
add eax 8 +
mov [ebp+var_C] eax +
jmp loc_101993D  +
mov [ebp+var_C] ebx +
mov eax [ebp+var_C] +
cmp eax ebx +
jz loc_10199AB  +
cmp [ebp+Locale] ebx +
jnz loc_1019954  +
mov ecx [ebp+arg_0] +
mov ecx [ecx] +
mov ecx [ecx+14h] +
mov [ebp+Locale] ecx +
mov ebx [ebp+cchWideChar] +
push eax  +
push [ebp+cchSrc]  +
add ebx ebx +
push [ebp+lpSrcStr]  +
lea esi [ebx+eax] +
push [ebp+dwInfoType]  +
mov edi 0FFFFh +
push [ebp+Locale]  +
mov ecx edi +
mov [esi] cx +
mov [esi-2] cx +
call ds:GetStringTypeA  +
mov [ebp+var_10] eax +
mov eax edi +
cmp [esi-2] ax +
jz loc_101999E  +
cmp [esi] di +
jnz loc_101999E  +
push ebx  +
push [ebp+var_C]  +
push [ebp+lpCharType]  +
call loc_1018AD0  +
add esp 0Ch +
jmp loc_10199A2  +
and [ebp+var_10] 0 +
push [ebp+var_C]  +
call sub_10153B5  +
pop ecx  +
push [ebp+lpSrcStr]  +
call sub_10153B5  +
mov eax [ebp+var_10] +
pop ecx  +
lea esp [ebp-20h] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1010BBF  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push [ebp+arg_0]  +
lea ecx [ebp+var_10] +
call sub_1010CA3  +
push [ebp+Locale]  +
lea eax [ebp+var_10] +
push [ebp+CodePage]  +
push [ebp+lpCharType]  +
push [ebp+cchWideChar]  +
push [ebp+lpWideCharStr]  +
push [ebp+dwInfoType]  +
push eax  +
call sub_10197A0  +
add esp 1Ch +
cmp [ebp+var_4] 0 +
jz locret_1019A0C  +
mov ecx [ebp+var_8] +
and dword ptr [ecx+70h] 0FFFFFFFDh +
leave   +
retn   +
***
xor eax eax +
push eax  +
push eax  +
push 3  +
push eax  +
push 3  +
push 40000000h  +
push offset aConout  +
call ds:CreateFileA  +
mov hConsoleOutput eax +
retn   +
***
mov eax hConsoleOutput +
push esi  +
mov esi ds:CloseHandle +
cmp eax 0FFFFFFFFh +
jz loc_1019A50  +
cmp eax 0FFFFFFFEh +
jz loc_1019A50  +
push eax  +
call esi  +
mov eax dword_1020AA0 +
cmp eax 0FFFFFFFFh +
jz loc_1019A62  +
cmp eax 0FFFFFFFEh +
jz loc_1019A62  +
push eax  +
call esi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
or ebx 0FFFFFFFFh +
cmp esi edi +
jnz loc_1019A99  +
call sub_1014511  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
mov dword ptr [eax] 16h +
call sub_10144BA  +
add esp 14h +
or eax ebx +
jmp loc_1019ADB  +
test byte ptr [esi+0Ch] 83h +
jz loc_1019AD6  +
push esi  +
call sub_101953D  +
push esi  +
mov ebx eax +
call sub_1019E65  +
push esi  +
call sub_1017D24  +
push eax  +
call sub_1019D54  +
add esp 10h +
test eax eax +
jge loc_1019AC5  +
or ebx 0FFFFFFFFh +
jmp loc_1019AD6  +
mov eax [esi+1Ch] +
cmp eax edi +
jz loc_1019AD6  +
push eax  +
call sub_1011942  +
pop ecx  +
mov [esi+1Ch] edi +
mov [esi+0Ch] edi +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call sub_10165F4  +
pop ecx  +
retn   +
***
call sub_10165F4  +
pop ecx  +
retn   +
***
push ebp  +
mov ebp esp +
push edi  +
push esi  +
push ebx  +
mov ecx [ebp+10h] +
or ecx ecx +
jz loc_1019CAA  +
mov esi [ebp+8] +
mov edi [ebp+0Ch] +
mov bh 41h +
mov bl 5Ah +
mov dh 20h +
lea ecx [ecx+0] +
mov ah [esi] +
or ah ah +
mov al [edi] +
jz loc_1019C9B  +
or al al +
jz loc_1019C9B  +
add esi 1 +
add edi 1 +
cmp ah bh +
jb loc_1019C88  +
cmp ah bl +
ja loc_1019C88  +
add ah dh +
cmp al bh +
jb loc_1019C92  +
cmp al bl +
ja loc_1019C92  +
add al dh +
cmp ah al +
jnz loc_1019CA1  +
sub ecx 1 +
jnz loc_1019C6C  +
xor ecx ecx +
cmp ah al +
jz loc_1019CAA  +
mov ecx 0FFFFFFFFh +
jb loc_1019CAA  +
neg ecx  +
mov eax ecx +
pop ebx  +
pop esi  +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push esi  +
call sub_101912B  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_1019D19  +
mov eax dword_10244A0 +
cmp esi 1 +
jnz loc_1019CDC  +
test byte ptr [eax+4Ch] 1 +
jnz loc_1019CE7  +
cmp esi 2 +
jnz loc_1019CFD  +
test byte ptr [eax+28h] 1 +
jz loc_1019CFD  +
push 2  +
call sub_101912B  +
push 1  +
mov edi eax +
call sub_101912B  +
pop ecx  +
pop ecx  +
cmp eax edi +
jz loc_1019D19  +
push esi  +
call sub_101912B  +
pop ecx  +
push eax  +
call ds:CloseHandle  +
test eax eax +
jnz loc_1019D19  +
call ds:GetLastError  +
mov edi eax +
jmp loc_1019D1B  +
xor edi edi +
push esi  +
call sub_10190A0  +
mov eax esi +
and esi 1Fh +
imul esi esi +
sar eax 5 +
mov eax dword_10244A0[eax*4] +
pop ecx  +
mov byte ptr [eax+esi+4] 0 +
test edi edi +
jz loc_1019D49  +
push edi  +
call sub_1014541  +
pop ecx  +
or eax 0FFFFFFFFh +
jmp loc_1019D4B  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
call sub_10165F4  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+0Ch] +
test al 83h +
jz loc_1019E93  +
test al 8 +
jz loc_1019E93  +
push dword ptr [esi+8]  +
call sub_1011942  +
and dword ptr [esi+0Ch] 0FFFFFBF7h +
xor eax eax +
pop ecx  +
mov [esi] eax +
mov [esi+8] eax +
mov [esi+4] eax +
pop esi  +
pop ebp  +
retn   +
***
mov eax [esp+8] +
mov ecx [esp+10h] +
or ecx eax +
mov ecx [esp+0Ch] +
jnz loc_1019EB9  +
mov eax [esp+4] +
mul  ecx +
retn 10h  +
***
push ebx  +
mul  ecx +
mov ebx eax +
mov eax [esp+8] +
mul  dword ptr [esp+14h] +
add ebx eax +
mov eax [esp+8] +
mul  ecx +
add edx ebx +
pop ebx  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
jmp loc_1019F02  +
movzx eax word ptr [esi] +
push dword ptr [ebp+arg_4]  +
push eax  +
call sub_101A1CD  +
test eax eax +
jnz loc_1019EF9  +
mov edi esi +
push esi  +
call ds:CharNextA  +
mov esi eax +
cmp byte ptr [esi] 0 +
jnz loc_1019EE7  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+lpsz] +
push esi  +
xor esi esi +
mov cl [eax] +
cmp cl 30h +
jl loc_1019F33  +
cmp cl 39h +
jg loc_1019F33  +
add esi 0FFFFFFFDh +
movsx ecx cl +
jmp loc_1019F49  +
cmp cl 61h +
jl loc_1019F3B  +
add cl 0E0h +
movsx ecx cl +
sub ecx 37h +
lea edx [ecx-0Ah] +
cmp edx 5 +
ja loc_1019F57  +
shl esi 4 +
push eax  +
add esi ecx +
call ds:CharNextA  +
jmp loc_1019F1F  +
mov ecx [ebp+arg_4] +
mov [ecx] esi +
xor ecx ecx +
cmp eax [ebp+lpsz] +
pop esi  +
setnz cl  +
mov eax ecx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_10] +
mov edx [ebp+arg_4] +
xor eax eax +
inc eax  +
cmp edx [ecx+8] +
jnz loc_1019F9D  +
mov edx [ebp+arg_C] +
push esi  +
mov esi edx +
and esi 3FFh +
cmp [ecx] si +
pop esi  +
jnz loc_1019F9D  +
mov [ecx+4] eax +
mov [ecx] dx +
xor eax eax +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov ax [ebp+arg_C] +
and [ebp+var_8] 0 +
lea ecx [ebp+lParam] +
push ecx  +
push offset sub_1019F70  +
push [ebp+lpName]  +
mov word ptr [ebp+lParam] ax +
mov eax [ebp+lpType] +
push eax  +
push [ebp+hModule]  +
mov [ebp+var_4] eax +
call ds:EnumResourceLanguagesA  +
mov eax [ebp+var_8] +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_1020B14 0FFFFFFFEh +
jnz loc_101A029  +
and dword_1020B14 0 +
push 1  +
push [ebp+lpName]  +
push [ebp+lpType]  +
push [ebp+hModule]  +
call sub_1019FA6  +
test eax eax +
jnz loc_101A01F  +
push 0Dh  +
push [ebp+lpName]  +
push [ebp+lpType]  +
push [ebp+hModule]  +
call sub_1019FA6  +
test eax eax +
jz loc_101A029  +
mov dword_1020B14 1 +
mov eax dword_1020B14 +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0B4h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_A8] 0 +
cmp dword_1020B18 0FFFFFFFEh +
mov [ebp+cbData] 0Ch +
jnz loc_101A15C  +
and dword_1020B18 0 +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 94h +
call ds:GetVersionExA  +
test eax eax +
jz loc_101A15C  +
cmp [ebp+VersionInformation.dwPlatformId] 1 +
jnz loc_101A15C  +
cmp [ebp+VersionInformation.dwMajorVersion] 4 +
jnz loc_101A15C  +
cmp [ebp+VersionInformation.dwMinorVersion] 0Ah +
jnb loc_101A15C  +
push 4Ah  +
call ds:GetSystemMetrics  +
test eax eax +
jz loc_101A15C  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push 0  +
push offset SubKey  +
push 80000001h  +
call ds:RegOpenKeyExA  +
test eax eax +
jnz loc_101A15C  +
push edi  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+sz] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push 0  +
push offset ValueName  +
push [ebp+hKey]  +
call ds:RegQueryValueExA  +
push [ebp+hKey]  +
mov edi eax +
call ds:RegCloseKey  +
test edi edi +
pop edi  +
jnz loc_101A15C  +
lea eax [ebp+var_A8] +
push eax  +
lea eax [ebp+sz] +
push eax  +
call sub_1019F14  +
test eax eax +
jz loc_101A15C  +
and [ebp+var_A8] 3FFh +
cmp [ebp+var_A8] 1 +
jz loc_101A152  +
cmp [ebp+var_A8] 0Dh +
jnz loc_101A15C  +
mov dword_1020B18 1 +
mov ecx [ebp+var_4] +
mov eax dword_1020B18 +
xor ecx ebp +
call sub_1010BBF  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+lpString] +
push edi  +
call ds:lstrlenA  +
lea ecx [eax+1] +
cmp ecx [ebp+arg_4] +
jb loc_101A191  +
mov eax 8007007Ah +
jmp loc_101A1C3  +
push esi  +
lea esi [eax+edi] +
cmp esi edi +
jbe loc_101A1AA  +
push esi  +
push edi  +
call ds:CharPrevA  +
cmp byte ptr [eax] 5Ch +
jz loc_101A1AA  +
mov byte ptr [esi] 5Ch +
inc esi  +
mov eax [ebp+arg_8] +
mov byte ptr [esi] 0 +
pop esi  +
jmp loc_101A1B4  +
inc eax  +
cmp byte ptr [eax] 20h +
jz loc_101A1B3  +
push eax  +
push [ebp+arg_4]  +
push edi  +
call sub_1006E54  +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx dword ptr [ebp+TestChar] +
cmp bl [ebp+arg_4] +
jnz loc_101A1F5  +
push ebx  +
call ds:IsDBCSLeadByte  +
test eax eax +
jz loc_101A1F1  +
xor eax eax +
cmp bx word ptr [ebp+arg_4] +
setnz al  +
jmp loc_101A1F8  +
xor eax eax +
jmp loc_101A1F8  +
xor eax eax +
inc eax  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_8]  +
mov esi eax +
push [ebp+arg_4]  +
xor ebx ebx +
dec esi  +
push esi  +
push edi  +
call sub_101BCF5  +
add esp 10h +
test eax eax +
jl loc_101A259  +
cmp eax esi +
ja loc_101A259  +
jz loc_101A25E  +
jmp loc_101A266  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
mov eax esi +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_101A26F  +
mov [ecx] eax +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+wLanguage]  +
push 1  +
push offset Type  +
push [ebp+hModule]  +
call ds:FindResourceExW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+hModule]  +
call sub_101A27C  +
test eax eax +
jz loc_101A2BA  +
push eax  +
push [ebp+hModule]  +
call ds:LoadResource  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+hModule] 0 +
push esi  +
jz loc_101A318  +
cmp [ebp+arg_4] 0 +
jz loc_101A318  +
push [ebp+hModule]  +
call sub_101A29D  +
push [ebp+arg_4]  +
mov esi eax +
call sub_101A29D  +
test esi esi +
jz loc_101A310  +
test eax eax +
jz loc_101A310  +
mov ecx 0FECDFECDh +
cmp [esi] ecx +
jnz loc_101A318  +
cmp [eax] ecx +
jnz loc_101A318  +
push edi  +
push 4  +
lea edi [eax+1Ch] +
add esi 1Ch +
pop ecx  +
xor eax eax +
cmps   +
pop edi  +
jnz loc_101A318  +
inc eax  +
jmp loc_101A31A  +
push 0Dh  +
call ds:SetLastError  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
xor esi esi +
push edi  +
cmp [ebp+lpLibFileName] esi +
jnz loc_101A337  +
xor eax eax +
jmp loc_101A3A5  +
cmp [ebp+arg_4] esi +
jz loc_101A392  +
push esi  +
push esi  +
push 3  +
push esi  +
push 5  +
push 80000000h  +
push [ebp+lpLibFileName]  +
call ds:CreateFileW  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jz loc_101A333  +
push esi  +
push esi  +
push esi  +
push 8  +
push esi  +
push edi  +
call ds:CreateFileMappingW  +
push edi  +
mov edi ds:CloseHandle +
mov ebx eax +
call edi  +
cmp ebx esi +
jz loc_101A333  +
push esi  +
push esi  +
push esi  +
push 1  +
push ebx  +
call ds:MapViewOfFile  +
push ebx  +
mov [ebp+lpLibFileName] eax +
call edi  +
mov eax [ebp+lpLibFileName] +
cmp eax esi +
jz loc_101A333  +
or eax 1 +
jmp loc_101A3A5  +
xor eax eax +
cmp [ebp+arg_8] esi +
setnz al  +
push eax  +
push esi  +
push [ebp+lpLibFileName]  +
call ds:LoadLibraryExW  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 120h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
push edi  +
xor edi edi +
cmp dword_1022FFC edi +
jnz loc_101A4CD  +
push esi  +
mov esi 11Ch +
push esi  +
lea eax [ebp+VersionInformation] +
push edi  +
push eax  +
call sub_1010B40  +
add esp 0Ch +
lea eax [ebp+VersionInformation] +
mov [ebp+VersionInformation.dwOSVersionInfoSize] esi +
mov esi ds:GetVersionExW +
push eax  +
call esi  +
test eax eax +
jnz loc_101A418  +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 114h +
call esi  +
mov eax [ebp+VersionInformation.dwPlatformId] +
dec eax  +
mov dword_1022FFC edi +
pop esi  +
jz loc_101A4A0  +
dec eax  +
jnz loc_101A4CD  +
cmp [ebp+VersionInformation.dwMajorVersion] 5 +
jnz loc_101A48D  +
mov eax [ebp+VersionInformation.dwMinorVersion] +
sub eax edi +
jz loc_101A481  +
dec eax  +
jz loc_101A46E  +
dec eax  +
jz loc_101A454  +
mov dword_1022FFC 14h +
jmp loc_101A4CD  +
cmp [ebp+var_C] 1 +
jb loc_101A465  +
mov dword_1022FFC 10h +
or dword_1022FFC 4 +
jmp loc_101A4CD  +
cmp [ebp+var_C] 2 +
jb loc_101A465  +
mov dword_1022FFC 8 +
jmp loc_101A465  +
mov dword_1022FFC 4 +
jmp loc_101A4CD  +
cmp [ebp+VersionInformation.dwMajorVersion] 4 +
ja loc_101A4DF  +
mov dword_1022FFC 2 +
cmp [ebp+VersionInformation.dwMajorVersion] 4 +
jnz loc_101A4CD  +
cmp [ebp+VersionInformation.dwMinorVersion] edi +
jz loc_101A4C3  +
cmp [ebp+VersionInformation.dwMinorVersion] 0Ah +
jz loc_101A4C3  +
cmp [ebp+VersionInformation.dwMinorVersion] 5Ah +
jnz loc_101A4CD  +
mov dword_1022FFC 1 +
mov ecx [ebp+var_4] +
mov eax dword_1022FFC +
xor ecx ebp +
pop edi  +
call sub_1010BBF  +
leave   +
retn   +
mov dword_1022FFC 20h +
jmp loc_101A4CD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push 20h  +
lea eax [ebp+LCData] +
push eax  +
push 8  +
push 404h  +
mov esi 0C04h +
call ds:GetLocaleInfoW  +
test eax eax +
jz loc_101A544  +
push 3  +
lea eax [ebp+LCData] +
push offset dword_1003590  +
push eax  +
call sub_1011CDD  +
add esp 0Ch +
mov esi eax +
neg esi  +
sbb esi esi +
and esi 0FFFFF800h +
add esi 0C04h +
mov ecx [ebp+var_4] +
mov ax si +
xor ecx ebp +
pop esi  +
call sub_1010BBF  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
xor eax eax +
cmp ax word_1023000 +
jnz loc_101A5F4  +
push esi  +
lea eax [ebp+hKey] +
push eax  +
push 1  +
xor esi esi +
push esi  +
push offset aSoftwareMicr_1  +
push 80000002h  +
mov [ebp+cbData] 6 +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_101A5F3  +
push edi  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
push esi  +
push esi  +
push offset aLocale  +
push [ebp+hKey]  +
call ds:RegQueryValueExW  +
push [ebp+hKey]  +
mov edi eax +
call ds:RegCloseKey  +
cmp edi esi +
pop edi  +
jnz loc_101A5F3  +
push 3  +
push ds:off_1003310[esi*8]  +
lea eax [ebp+Data] +
push eax  +
call sub_101BE06  +
add esp 0Ch +
test eax eax +
jz loc_101A5E5  +
inc esi  +
cmp esi 1Ch +
jb loc_101A5C4  +
jmp loc_101A5F3  +
mov ax ds:word_1003314[esi*8] +
mov word_1023000 ax +
pop esi  +
mov ecx [ebp+var_4] +
mov ax word_1023000 +
xor ecx ebp +
call sub_1010BBF  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push edi  +
mov edi eax +
xor ebx ebx +
cmp edi ebx +
jz loc_101A6C9  +
cmp [ebp+arg_0] ebx +
jz loc_101A6C9  +
cmp [ebp+arg_4] ebx +
jz loc_101A6C9  +
push esi  +
movzx eax word ptr [edi] +
lea ecx [eax-61h] +
cmp cx 19h +
ja loc_101A645  +
movzx eax ax +
sub eax 61h +
jmp loc_101A654  +
lea ecx [eax-41h] +
cmp cx 19h +
ja loc_101A67E  +
movzx eax ax +
sub eax 41h +
cmp eax 1Ah +
jnb loc_101A67E  +
mov esi ds:dword_1003458[eax*4] +
test esi esi +
jz loc_101A67E  +
jmp loc_101A676  +
push eax  +
push edi  +
call sub_101BFC7  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_101A689  +
add esi 8 +
mov eax [esi] +
cmp word ptr [eax] 0 +
jnz loc_101A666  +
mov edi [ebp+arg_0] +
inc ebx  +
cmp ebx 2 +
jl loc_101A631  +
jmp loc_101A6C8  +
mov esi [esi+4] +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_101A691  +
sub eax edx +
sar eax 1 +
cmp eax 55h +
jnb loc_101A6C8  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_101A6A9  +
sub eax edx +
sar eax 1 +
lea eax [eax+eax+2] +
push eax  +
push esi  +
push [ebp+arg_4]  +
call loc_10113B0  +
add esp 0Ch +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test esi esi +
jz loc_101A71A  +
cmp [ebp+arg_4] 0 +
jz loc_101A71A  +
push 2  +
push 55h  +
push esi  +
push [ebp+arg_0]  +
call sub_101B205  +
test eax eax +
jz loc_101A71A  +
push 2  +
push 55h  +
push [ebp+arg_4]  +
push esi  +
call sub_101B2AB  +
test edi edi +
jz loc_101A715  +
xor eax eax +
push edi  +
push [ebp+arg_4]  +
mov [edi] ax +
mov eax esi +
call sub_101A60B  +
xor eax eax +
inc eax  +
jmp loc_101A71C  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:FreeLibrary  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_101A74B  +
cmp [ebp+arg_4] 7FFFFFFFh +
jbe loc_101A750  +
mov eax 80070057h +
test eax eax +
jl loc_101A769  +
mov eax [ebp+arg_4] +
push edi  +
push [ebp+arg_C]  +
mov edi [ebp+arg_0] +
push [ebp+arg_8]  +
push 0  +
call sub_101A231  +
pop edi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_101A787  +
cmp [ebp+arg_4] 7FFFFFFFh +
jbe loc_101A78C  +
mov eax 80070057h +
test eax eax +
jl loc_101A7A6  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
push 0  +
call sub_101A231  +
pop edi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jnz loc_101A7CE  +
xor eax eax +
jmp loc_101A839  +
push ebx  +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
lea eax [ebp+LibFileName] +
push 104h  +
push eax  +
xor ebx ebx +
call sub_101A736  +
test eax eax +
jl loc_101A836  +
push esi  +
call sub_101A3B1  +
mov esi eax +
and esi 26h +
call sub_101A3B1  +
and eax 38h +
push esi  +
push eax  +
lea eax [ebp+LibFileName] +
push eax  +
call sub_101A324  +
mov ebx eax +
pop esi  +
test ebx ebx +
jz loc_101A836  +
push ebx  +
push edi  +
call sub_101A2C3  +
test eax eax +
jnz loc_101A836  +
push ebx  +
test bl 1 +
jz loc_101A82E  +
call ds:UnmapViewOfFile  +
jmp loc_101A834  +
call ds:FreeLibrary  +
xor ebx ebx +
mov eax ebx +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_1010BBF  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test eax eax +
jz loc_101A8A6  +
test ecx ecx +
jz loc_101A8A6  +
cmp [ebp+arg_0] 0 +
push eax  +
jz loc_101A88A  +
test edx edx +
jz loc_101A877  +
push edx  +
push [ebp+arg_0]  +
push offset aSSS_mui  +
push ecx  +
call sub_101A7AD  +
add esp 14h +
jmp loc_101A8A8  +
push [ebp+arg_0]  +
push offset aSS_mui  +
push ecx  +
call sub_101A7AD  +
add esp 10h +
jmp loc_101A8A8  +
test edx edx +
jz loc_101A896  +
push edx  +
push offset a_SS_mui  +
jmp loc_101A87F  +
push offset a_S_mui  +
push ecx  +
call sub_101A7AD  +
add esp 0Ch +
jmp loc_101A8A8  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 428h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
mov [ebp+lpLibFileName] esi +
mov [ebp+FilePart] ebx +
cmp esi ebx +
jnz loc_101A8E4  +
xor eax eax +
jmp loc_101B03D  +
test [ebp+arg_4] 0FFFFFFE3h +
jnz loc_101A8DD  +
push edi  +
mov edi dword ptr [ebp+wLanguage] +
cmp di bx +
jnz loc_101A900  +
test byte ptr [ebp+arg_4] 10h +
jnz loc_101AF6A  +
call sub_101A3B1  +
mov dword_1023004 eax +
movzx eax al +
and eax 20h +
or eax 2 +
push eax  +
push 0  +
push esi  +
call ds:LoadLibraryExW  +
mov [ebp+hModule] eax +
test eax eax +
jz loc_101AF6A  +
test byte ptr dword_1023004 20h +
jnz loc_101B03C  +
lea eax [ebp+FilePart] +
push eax  +
lea eax [ebp+LibFileName] +
push eax  +
push 104h  +
push 0  +
push esi  +
push 0  +
call ds:SearchPathW  +
test eax eax +
jz loc_101AF5E  +
mov eax [ebp+FilePart] +
test eax eax +
jnz loc_101A97C  +
and [ebp+var_41C] ebx +
lea eax [ebp+LibFileName] +
mov [ebp+FilePart] eax +
jmp loc_101A98E  +
lea ecx [ebp+LibFileName] +
mov [ebp+var_41C] ecx +
xor ecx ecx +
mov [eax-2] cx +
push 0  +
push [ebp+hModule]  +
call sub_101A27C  +
test eax eax +
jz loc_101AF46  +
test di di +
jnz loc_101AF1E  +
mov al byte ptr dword_1023004 +
test al 4 +
jz loc_101AD2D  +
call ds:GetUserDefaultUILanguage  +
movzx eax ax +
mov ecx 404h +
mov [ebp+var_420] eax +
cmp ax cx +
jnz loc_101A9E0  +
call sub_101A4F0  +
movzx eax ax +
mov [ebp+var_420] eax +
mov eax [ebp+arg_4] +
and eax 8 +
mov [ebp+var_424] eax +
cmp [ebp+var_424] 0 +
jz loc_101AAB6  +
lea eax [ebp+var_15C] +
push eax  +
push [ebp+var_420]  +
lea edi [ebp+var_208] +
lea esi [ebp+var_B0] +
call sub_101A6D4  +
test eax eax +
jz loc_101AFAA  +
push [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx esi +
call sub_101A84B  +
mov ebx eax +
test ebx ebx +
jnz loc_101AFAE  +
push [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
lea edx [ebp+var_15C] +
call sub_101A84B  +
mov ebx eax +
test ebx ebx +
jnz loc_101AFAE  +
cmp word ptr [ebp+var_208] ax +
jz loc_101AA95  +
push [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx edi +
call sub_101A84B  +
mov ebx eax +
test ebx ebx +
jnz loc_101AFAE  +
mov eax 0C04h +
cmp word ptr [ebp+var_420] ax +
jnz loc_101AC61  +
mov [ebp+var_420] 404h +
jmp loc_101A9EC  +
movzx eax word ptr [ebp+var_420] +
push eax  +
push offset aMui04hx  +
lea eax [ebp+var_B0] +
push 55h  +
push eax  +
call sub_101A772  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push [ebp+var_41C]  +
lea edx [ebp+var_B0] +
call sub_101A84B  +
mov ebx eax +
test ebx ebx +
jnz loc_101AFAE  +
lea eax [ebp+var_15C] +
push eax  +
push [ebp+var_420]  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_101A6D4  +
test eax eax +
jz loc_101AB68  +
push 2  +
lea eax [ebp+var_15C] +
push eax  +
call sub_101B11A  +
movzx eax ax +
test ax ax +
jz loc_101AB68  +
movzx eax ax +
push eax  +
push offset aMui04hx  +
mov eax esi +
push 55h  +
push eax  +
call sub_101A772  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push [ebp+var_41C]  +
mov edx esi +
call sub_101A84B  +
mov ebx eax +
test ebx ebx +
jnz loc_101AFAE  +
mov eax 0C04h +
cmp word ptr [ebp+var_420] ax +
jz loc_101AAA7  +
call ds:GetSystemDefaultUILanguage  +
movzx esi ax +
mov [ebp+var_424] esi +
cmp si word ptr [ebp+var_420] +
jz loc_101AC45  +
movzx eax si +
push eax  +
push offset aMui04hx  +
lea eax [ebp+var_B0] +
push 55h  +
push eax  +
call sub_101A772  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push [ebp+var_41C]  +
lea edx [ebp+var_B0] +
call sub_101A84B  +
mov ebx eax +
test ebx ebx +
jnz loc_101AFAE  +
lea eax [ebp+var_15C] +
push eax  +
push esi  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_101A6D4  +
test eax eax +
jz loc_101AC3F  +
push 2  +
lea eax [ebp+var_15C] +
push eax  +
call sub_101B11A  +
movzx eax ax +
test ax ax +
jz loc_101AC3F  +
movzx eax ax +
push eax  +
push offset aMui04hx  +
mov eax esi +
push 55h  +
push eax  +
call sub_101A772  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push [ebp+var_41C]  +
mov edx esi +
call sub_101A84B  +
mov ebx eax +
test ebx ebx +
jnz loc_101AFAE  +
mov esi [ebp+var_424] +
mov eax 409h +
mov ecx eax +
cmp cx word ptr [ebp+var_420] +
jz loc_101AEF6  +
cmp ax si +
jmp loc_101AECE  +
call ds:GetSystemDefaultUILanguage  +
movzx eax ax +
mov [ebp+var_424] eax +
cmp ax word ptr [ebp+var_420] +
jz loc_101AD14  +
lea ecx [ebp+var_15C] +
push ecx  +
push eax  +
lea edi [ebp+var_208] +
lea esi [ebp+var_B0] +
call sub_101A6D4  +
test eax eax +
jz loc_101AF46  +
push [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx esi +
call sub_101A84B  +
mov ebx eax +
test ebx ebx +
jnz loc_101AFAE  +
push [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
lea edx [ebp+var_15C] +
call sub_101A84B  +
mov ebx eax +
test ebx ebx +
jnz loc_101AFAE  +
cmp word ptr [ebp+var_208] ax +
jz loc_101AD14  +
push [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx edi +
call sub_101A84B  +
mov ebx eax +
test ebx ebx +
jnz loc_101AFAE  +
mov eax 409h +
mov ecx eax +
cmp cx word ptr [ebp+var_420] +
jz loc_101AEF6  +
jmp loc_101ADEB  +
test al 3 +
jz loc_101AF46  +
call sub_101A559  +
test byte ptr [ebp+arg_4] 8 +
movzx eax ax +
mov [ebp+var_424] eax +
jz loc_101AE14  +
lea ecx [ebp+var_15C] +
push ecx  +
push eax  +
lea edi [ebp+var_208] +
lea esi [ebp+var_B0] +
call sub_101A6D4  +
test eax eax +
jz loc_101AF46  +
push [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx esi +
call sub_101A84B  +
mov ebx eax +
test ebx ebx +
jnz loc_101AFAE  +
push [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
lea edx [ebp+var_15C] +
call sub_101A84B  +
mov ebx eax +
test ebx ebx +
jnz loc_101AFAE  +
cmp word ptr [ebp+var_208] ax +
jz loc_101ADE4  +
push [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx edi +
call sub_101A84B  +
mov ebx eax +
test ebx ebx +
jnz loc_101AFAE  +
mov eax 409h +
mov ecx eax +
cmp cx word ptr [ebp+var_424] +
jz loc_101AEF6  +
lea ecx [ebp+var_15C] +
push ecx  +
push eax  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_101A6D4  +
mov edx esi +
jmp loc_101AED5  +
movzx eax ax +
push eax  +
push offset aMui04hx  +
lea eax [ebp+var_B0] +
push 55h  +
push eax  +
call sub_101A772  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push [ebp+var_41C]  +
lea edx [ebp+var_B0] +
call sub_101A84B  +
mov ebx eax +
test ebx ebx +
jnz loc_101AFAE  +
lea eax [ebp+var_15C] +
push eax  +
push [ebp+var_424]  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_101A6D4  +
test eax eax +
jz loc_101AEC2  +
push 2  +
lea eax [ebp+var_15C] +
push eax  +
call sub_101B11A  +
movzx eax ax +
test ax ax +
jz loc_101AEC2  +
movzx eax ax +
push eax  +
push offset aMui04hx  +
mov eax esi +
push 55h  +
push eax  +
call sub_101A772  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push [ebp+var_41C]  +
mov edx esi +
call sub_101A84B  +
mov ebx eax +
test ebx ebx +
jnz loc_101AFAE  +
mov eax 409h +
cmp ax word ptr [ebp+var_424] +
jz loc_101AEF6  +
mov edx offset aMui0409 +
push [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
call sub_101A84B  +
mov ebx eax +
test ebx ebx +
jnz loc_101AFAE  +
push [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
xor edx edx +
call sub_101A84B  +
mov ebx eax +
test ebx ebx +
jnz loc_101AFAE  +
jmp loc_101AFAA  +
test byte ptr dword_1023004 7 +
jz loc_101AF46  +
test byte ptr [ebp+arg_4] 8 +
jz loc_101AF71  +
lea eax [ebp+var_15C] +
push eax  +
push edi  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_101A6D4  +
test eax eax +
jnz loc_101AF8B  +
test byte ptr [ebp+arg_4] 10h +
jz loc_101AFBE  +
push dword ptr [ebp+wLanguage]  +
push [ebp+hModule]  +
call sub_101A27C  +
test eax eax +
jnz loc_101AFBE  +
push [ebp+hModule]  +
call ds:FreeLibrary  +
xor eax eax +
jmp loc_101B03C  +
movzx eax di +
push eax  +
push offset aMui04hx  +
lea eax [ebp+var_B0] +
push 55h  +
push eax  +
call sub_101A772  +
add esp 10h +
push [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
lea edx [ebp+var_B0] +
call sub_101A84B  +
mov ebx eax +
test ebx ebx +
jz loc_101AF46  +
push [ebp+hModule]  +
call ds:FreeLibrary  +
mov eax ebx +
jmp loc_101B03C  +
test byte ptr [ebp+hModule] 1 +
jz loc_101B036  +
push [ebp+hModule]  +
call ds:FreeLibrary  +
call sub_101A3B1  +
test al 38h +
jz loc_101B013  +
push [ebp+FilePart]  +
lea eax [ebp+LibFileName] +
push [ebp+var_41C]  +
push offset aSS  +
push 104h  +
push eax  +
call sub_101A772  +
add esp 14h +
push 0  +
push 1  +
lea eax [ebp+LibFileName] +
push eax  +
call sub_101A324  +
jmp loc_101B030  +
call sub_101A3B1  +
push 0  +
and eax 26h +
pop eax  +
setnz al  +
push eax  +
push 0  +
push [ebp+lpLibFileName]  +
call ds:LoadLibraryExW  +
mov [ebp+hModule] eax +
mov eax [ebp+hModule] +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010BBF  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_101B072  +
xor eax eax +
jmp loc_101B0A1  +
push 104h  +
lea ecx [ebp+WideCharStr] +
push ecx  +
push 0FFFFFFFFh  +
push eax  +
push 0  +
push 0  +
call ds:MultiByteToWideChar  +
test eax eax +
jz loc_101B06E  +
push dword ptr [ebp+wLanguage]  +
lea eax [ebp+WideCharStr] +
push [ebp+arg_4]  +
push eax  +
call sub_101A8B1  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1010BBF  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov ecx [ebp+0Ch] +
movzx eax word ptr [eax] +
movzx ecx word ptr [ecx] +
cmp cx ax +
jnz loc_101B0CE  +
xor eax eax +
pop ebp  +
retn   +
***
sbb eax eax +
and eax 2 +
dec eax  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
push dword ptr [eax]  +
push dword ptr [ebp+8]  +
call sub_101BFC7  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax+8] 68h +
jnz loc_101B10F  +
cmp word ptr [eax] 7Fh +
jz loc_101B10F  +
xor eax eax +
inc eax  +
jmp loc_101B111  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_101B16F  +
test [ebp+arg_4] 0FFFFFFFDh +
jnz loc_101B16F  +
push offset loc_101B0DB  +
push 8  +
push 163h  +
push offset off_1005680  +
push [ebp+arg_0]  +
call sub_101C05F  +
add esp 14h +
test eax eax +
jz loc_101B16F  +
mov ecx [eax+4] +
imul ecx ecx +
add ecx offset dword_10045D0 +
test byte ptr [ebp+arg_4] 2 +
jnz loc_101B16A  +
push ecx  +
call sub_101B0F6  +
test eax eax +
jnz loc_101B16F  +
mov ax [ecx] +
jmp loc_101B179  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
mov edx 80070057h +
test ecx ecx +
jz loc_101B19D  +
cmp ecx 7FFFFFFFh +
jbe loc_101B19F  +
mov eax edx +
test eax eax +
jl loc_101B1FC  +
push edi  +
mov edi [ebp+arg_C] +
cmp edi 7FFFFFFEh +
jbe loc_101B1BB  +
mov eax edx +
mov edx [ebp+arg_0] +
xor ecx ecx +
mov [edx] cx +
jmp loc_101B1FB  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_101B1EB  +
mov edx [ebp+arg_8] +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_101B1E7  +
movzx ecx word ptr [edx+eax] +
test cx cx +
jz loc_101B1E7  +
mov [eax] cx +
inc eax  +
inc eax  +
dec esi  +
jnz loc_101B1CF  +
test esi esi +
jnz loc_101B1F2  +
dec eax  +
dec eax  +
mov ebx 8007007Ah +
xor ecx ecx +
mov [eax] cx +
pop esi  +
mov eax ebx +
pop ebx  +
pop edi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 0 +
push esi  +
push edi  +
jl loc_101B296  +
cmp [ebp+arg_4] 0 +
jnz loc_101B222  +
cmp [ebp+arg_8] 0 +
jnz loc_101B296  +
test [ebp+arg_C] 0FFFFFFFDh +
jnz loc_101B296  +
push offset loc_101B0B4  +
push 0Ch  +
push 164h  +
lea eax [ebp+arg_0] +
push offset dword_10045D0  +
push eax  +
call sub_101C05F  +
mov ecx eax +
add esp 14h +
test ecx ecx +
jz loc_101B296  +
test byte ptr [ebp+arg_C] 2 +
jnz loc_101B25E  +
push ecx  +
call sub_101B0F6  +
test eax eax +
jnz loc_101B296  +
mov edi [ecx+4] +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_101B266  +
sub eax edx +
sar eax 1 +
cmp [ebp+arg_4] 0 +
lea esi [eax+1] +
jz loc_101B292  +
push esi  +
push edi  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_101B182  +
test eax eax +
jge loc_101B292  +
push 7Ah  +
jmp loc_101B298  +
mov eax esi +
jmp loc_101B2A0  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
xor edi edi +
cmp [ebp+arg_0] edi +
jz loc_101B359  +
cmp [ebp+arg_8] edi +
jle loc_101B2CE  +
cmp [ebp+arg_4] edi +
jz loc_101B359  +
cmp [ebp+arg_8] edi +
jl loc_101B359  +
test [ebp+arg_C] 0FFFFFFFDh +
jnz loc_101B359  +
push offset loc_101B0DB  +
push 8  +
push 163h  +
push offset off_1005680  +
push [ebp+arg_0]  +
call sub_101C05F  +
add esp 14h +
cmp eax edi +
jz loc_101B359  +
mov ecx [eax+4] +
imul ecx ecx +
mov edx offset dword_10045D0 +
add ecx edx +
test byte ptr [ebp+arg_C] 2 +
jnz loc_101B31A  +
push ecx  +
call sub_101B0F6  +
test eax eax +
jnz loc_101B359  +
mov eax [ecx+8] +
imul eax eax +
add eax edx +
mov eax [eax+4] +
mov ecx eax +
lea edx [ecx+2] +
mov si [ecx] +
inc ecx  +
inc ecx  +
cmp si di +
jnz loc_101B32A  +
sub ecx edx +
sar ecx 1 +
lea esi [ecx+1] +
cmp [ebp+arg_4] edi +
jz loc_101B355  +
push esi  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_101B182  +
test eax eax +
jge loc_101B355  +
push 7Ah  +
jmp loc_101B35B  +
mov eax esi +
jmp loc_101B363  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
mov esi ds:RegOpenKeyExA +
push edi  +
lea eax [ebp+phkResult] +
push eax  +
push 1  +
xor edi edi +
push edi  +
push [ebp+phkResult]  +
mov dword ptr [ebp+Data] edi +
push [ebp+hKey]  +
call esi  +
mov ebx ds:RegQueryValueExA +
test eax eax +
jnz loc_101B3CF  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push edi  +
push [ebp+lpValueName]  +
mov [ebp+cbData] 4 +
push [ebp+phkResult]  +
call ebx  +
test eax eax +
jnz loc_101B3C6  +
cmp [ebp+Type] 4 +
jz loc_101B3C6  +
mov dword ptr [ebp+Data] edi +
push [ebp+phkResult]  +
call ds:RegCloseKey  +
lea eax [ebp+phkResult] +
push eax  +
push 1  +
push edi  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call esi  +
test eax eax +
jnz loc_101B412  +
push 4  +
pop esi  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push edi  +
push [ebp+lpValueName]  +
mov [ebp+cbData] esi +
push [ebp+phkResult]  +
call ebx  +
test eax eax +
jnz loc_101B409  +
cmp [ebp+Type] esi +
jz loc_101B409  +
mov dword ptr [ebp+Data] edi +
push [ebp+phkResult]  +
call ds:RegCloseKey  +
mov eax dword ptr [ebp+Data] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 114h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+lpSubKey] +
mov eax [ebp+hKey] +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
lea edx [ebp+phkResult] +
push edx  +
push 1  +
xor esi esi +
push esi  +
push ecx  +
push eax  +
call ds:RegOpenKeyExA  +
test eax eax +
jnz loc_101B499  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push esi  +
push edi  +
push [ebp+phkResult]  +
mov [ebp+cbData] 104h +
call ds:RegQueryValueExA  +
push [ebp+phkResult]  +
mov esi eax +
neg esi  +
sbb esi esi +
inc esi  +
call ds:RegCloseKey  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_1010BBF  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_1020B1C +
cmp eax 0FFFFFFFFh +
jnz loc_101B4EA  +
push 7  +
call sub_101B72B  +
test eax eax +
jz loc_101B4E3  +
push offset aNetgetjoininfo  +
push offset aNetapi32  +
call ds:LoadLibraryA  +
push eax  +
call ds:GetProcAddress  +
jmp loc_101B4E5  +
xor eax eax +
mov dword_1020B1C eax +
test eax eax +
jz loc_101B4F1  +
pop ebp  +
jmp eax  +
push 7Fh  +
pop eax  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_1020B20 +
cmp eax 0FFFFFFFFh +
jnz loc_101B537  +
push 7  +
call sub_101B72B  +
test eax eax +
jz loc_101B530  +
push offset aNetapibufferfr  +
push offset aNetapi32  +
call ds:GetModuleHandleA  +
push eax  +
call ds:GetProcAddress  +
jmp loc_101B532  +
xor eax eax +
mov dword_1020B20 eax +
test eax eax +
jz loc_101B53E  +
pop ebp  +
jmp eax  +
push 7Fh  +
pop eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push 7  +
call sub_101B72B  +
test eax eax +
jz loc_101B59C  +
cmp dword_102300C 0 +
jnz loc_101B59C  +
push esi  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
push 0  +
call sub_101B4B0  +
xor esi esi +
inc esi  +
test eax eax +
jnz loc_101B595  +
cmp [ebp+var_4] eax +
jz loc_101B589  +
push [ebp+var_4]  +
call sub_101B4FD  +
cmp [ebp+var_8] 3 +
jnz loc_101B595  +
mov dword_1023008 esi +
mov dword_102300C esi +
pop esi  +
mov eax dword_1023008 +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax dword_1020B24 +
cmp eax 0FFFFFFFFh +
jnz locret_101B600  +
push esi  +
push offset aNtqueryinforma  +
push offset aNtdll_dll  +
call ds:GetModuleHandleA  +
push eax  +
call ds:GetProcAddress  +
mov esi eax +
test esi esi +
jz loc_101B5F8  +
push 0  +
push 4  +
lea eax [ebp+var_4] +
push eax  +
push 1Ah  +
call ds:GetCurrentProcess  +
push eax  +
call esi  +
test eax eax +
jl loc_101B5F8  +
cmp [ebp+var_4] 0 +
jz loc_101B5F8  +
xor eax eax +
inc eax  +
jmp loc_101B5FA  +
xor eax eax +
mov dword_1020B24 eax +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
and dword ptr [ebp+Data] 0 +
lea eax [ebp+hKey] +
push eax  +
push 1  +
push 0  +
push offset aSoftwareMicr_2  +
push 80000001h  +
call ds:RegOpenKeyExA  +
test eax eax +
jnz loc_101B659  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
push 0  +
push 0  +
push offset aServeradminui  +
push [ebp+hKey]  +
mov [ebp+cbData] 4 +
call ds:RegQueryValueExA  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov eax dword ptr [ebp+Data] +
leave   +
retn   +
***
mov edi edi +
push esi  +
push edi  +
push offset Name  +
xor esi esi +
push esi  +
push 100000h  +
call ds:OpenEventA  +
mov edi eax +
cmp edi esi +
jz loc_101B696  +
push esi  +
push edi  +
call ds:WaitForSingleObject  +
mov esi eax +
neg esi  +
sbb esi esi +
push edi  +
inc esi  +
call ds:CloseHandle  +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_1020B28 +
sub esp 10h +
cmp eax 0FFFFFFFFh +
jnz locret_101B724  +
lea eax [ebp+hKey] +
push eax  +
push 1  +
push 0  +
push offset aSystemWpaAppli  +
push 80000002h  +
call ds:RegOpenKeyExA  +
test eax eax +
jnz loc_101B713  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push 0  +
push offset aInstalled  +
push [ebp+hKey]  +
mov [ebp+cbData] 4 +
call ds:RegQueryValueExA  +
test eax eax +
jnz loc_101B70A  +
cmp [ebp+Type] 4 +
jnz loc_101B70A  +
cmp dword ptr [ebp+Data] eax +
jz loc_101B70A  +
mov dword_1020B28 1 +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov eax dword_1020B28 +
cmp eax 0FFFFFFFFh +
jnz locret_101B724  +
xor eax eax +
mov dword_1020B28 eax +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
xor ebx ebx +
push esi  +
inc ebx  +
cmp dword_10230AC 0 +
push edi  +
jnz loc_101B76E  +
mov esi ds:GetVersionExA +
mov edi offset VersionInformation +
push edi  +
mov dword_10230AC ebx +
mov VersionInformation.dwOSVersionInfoSize 9Ch +
call esi  +
test eax eax +
jnz loc_101B76E  +
push edi  +
mov VersionInformation.dwOSVersionInfoSize 94h +
call esi  +
mov eax [ebp+arg_0] +
cmp eax 29h +
ja loc_101BB65  +
jmp ds:off_101BB6F[eax*4]  +
push 1000h  +
call ds:GetSystemMetrics  +
jmp loc_101BB67  +
test byte ptr dword_10230A8 10h +
jz loc_101BB65  +
cmp VersionInformation.dwMajorVersion 5 +
jb loc_101BB65  +
jmp loc_101BAED  +
mov eax dword_10230A8 +
test al 10h +
jz loc_101BB65  +
test eax 100h +
jmp loc_101BAEB  +
mov eax dword_10230A8 +
test al 10h +
jz loc_101BB65  +
test eax 100h +
jz loc_101BB65  +
jmp loc_101BAED  +
mov eax dword_10230A8 +
test eax 100h +
jz loc_101BB65  +
test al 10h +
jmp loc_101BAEB  +
test dword_10230A8 110h +
jz loc_101BB65  +
push offset aAllowmultiplet  +
push offset aSoftwareMicr_0  +
push offset phkResult  +
push 80000002h  +
call sub_101B36E  +
test eax eax +
jmp loc_101B7D9  +
push 25h  +
call sub_101B72B  +
test eax eax +
jnz loc_101BB65  +
cmp byte ptr dword_10230A8+2 bl +
jnz loc_101BB65  +
push offset aGinadll  +
mov edi offset phkResult +
push edi  +
mov esi 80000002h +
push esi  +
call sub_101B421  +
test eax eax +
jnz loc_101BB65  +
push offset aLogontype  +
push offset aSoftwareMicr_0  +
push edi  +
push esi  +
jmp loc_101B81F  +
call sub_101B54A  +
jmp loc_101BB67  +
cmp VersionInformation.dwPlatformId 2 +
jnz loc_101BB65  +
jmp loc_101B79E  +
cmp byte ptr dword_10230A8+2 bl +
jnz loc_101BB65  +
cmp VersionInformation.dwMajorVersion 5 +
jmp loc_101BAEB  +
mov al byte ptr dword_10230A8+2 +
cmp al 3 +
jz loc_101B8B4  +
cmp al 2 +
jnz loc_101BB65  +
cmp VersionInformation.dwMajorVersion 5 +
jnz loc_101BB65  +
mov al byte ptr dword_10230A8 +
test al 2 +
jz loc_101BB65  +
test al al +
js loc_101BB65  +
jmp loc_101BAED  +
mov al byte ptr dword_10230A8+2 +
cmp al 3 +
jz loc_101B8EC  +
cmp al 2 +
jnz loc_101BB65  +
cmp VersionInformation.dwMajorVersion 5 +
jnz loc_101BB65  +
test byte ptr dword_10230A8 80h +
jmp loc_101B7D9  +
mov al byte ptr dword_10230A8+2 +
cmp al 3 +
jz loc_101B916  +
cmp al 2 +
jnz loc_101BB65  +
test byte ptr dword_10230A8 82h +
jmp loc_101B891  +
mov eax dword_10230A8 +
and eax 40h +
jmp loc_101BB67  +
xor eax eax +
cmp VersionInformation.dwPlatformId ebx +
setz al  +
jmp loc_101BB67  +
xor eax eax +
cmp VersionInformation.dwPlatformId 2 +
jmp loc_101B937  +
cmp VersionInformation.dwPlatformId ebx +
jnz loc_101BB65  +
cmp VersionInformation.dwMajorVersion 4 +
jmp loc_101B7A5  +
cmp VersionInformation.dwPlatformId ebx +
jnz loc_101BB65  +
cmp VersionInformation.dwMajorVersion 4 +
jnz loc_101BB65  +
cmp VersionInformation.dwMinorVersion 0 +
jnz loc_101BB65  +
mov eax 3B6h +
cmp word ptr VersionInformation.dwBuildNumber ax +
jmp loc_101BAEB  +
cmp VersionInformation.dwPlatformId ebx +
jnz loc_101BB65  +
mov eax VersionInformation.dwMajorVersion +
cmp eax 4 +
ja loc_101BAED  +
jnz loc_101BB65  +
cmp VersionInformation.dwMinorVersion 0Ah +
jmp loc_101B7A5  +
cmp VersionInformation.dwPlatformId ebx +
jnz loc_101BB65  +
cmp VersionInformation.dwMajorVersion 4 +
jnz loc_101BB65  +
cmp VersionInformation.dwMinorVersion 0Ah +
jnz loc_101BB65  +
mov eax 7CEh +
jmp loc_101B98D  +
cmp VersionInformation.dwPlatformId ebx +
jnz loc_101BB65  +
mov eax VersionInformation.dwMajorVersion +
cmp eax 4 +
jnz loc_101BB63  +
cmp VersionInformation.dwMinorVersion 5Ah +
jnb loc_101BAED  +
cmp eax eax +
jmp loc_101BB63  +
cmp VersionInformation.dwPlatformId 2 +
jmp loc_101B950  +
cmp VersionInformation.dwPlatformId 2 +
jnz loc_101BB65  +
mov eax VersionInformation.dwMajorVersion +
cmp eax 5 +
jmp loc_101BB58  +
cmp VersionInformation.dwPlatformId 2 +
jnz loc_101BB65  +
test dword_10230A8 200h +
jmp loc_101B7D9  +
cmp VersionInformation.dwPlatformId 2 +
jnz loc_101BB65  +
cmp byte ptr dword_10230A8+2 bl +
jmp loc_101BAEB  +
mov al byte ptr dword_10230A8+2 +
cmp al 3 +
jz loc_101B8F9  +
cmp al 2 +
jmp loc_101B8F3  +
mov al byte ptr dword_10230A8+2 +
cmp al 3 +
jz loc_101B8C1  +
cmp al 2 +
jmp loc_101B8BB  +
mov al byte ptr dword_10230A8+2 +
cmp al 3 +
jz loc_101BAB0  +
cmp al 2 +
jnz loc_101BB65  +
mov eax dword_10230A8 +
test al 0A3h +
jnz loc_101BB65  +
test eax 400h +
jmp loc_101BAEB  +
mov eax dword_10230A8 +
and eax 400h +
jmp loc_101BB67  +
mov eax dword_10230A8 +
and eax 20h +
jmp loc_101BB67  +
mov al byte ptr dword_10230A8+2 +
cmp al 3 +
jz loc_101BAED  +
cmp al 2 +
jnz loc_101BB65  +
mov eax ebx +
jmp loc_101BB67  +
xor eax eax +
cmp byte ptr dword_10230A8+2 2 +
jmp loc_101B937  +
call sub_101B5A8  +
jmp loc_101BB67  +
call sub_101B663  +
jmp loc_101BB67  +
push 57h  +
jmp loc_101B786  +
push 58h  +
jmp loc_101B786  +
call sub_101B6A0  +
jmp loc_101BB67  +
call sub_101B607  +
jmp loc_101BB67  +
cmp VersionInformation.dwPlatformId 2 +
jnz loc_101BB65  +
cmp VersionInformation.dwMajorVersion 6 +
jmp loc_101B7A5  +
push 1Eh  +
call sub_101B72B  +
jmp loc_101BB67  +
cmp VersionInformation.dwPlatformId 2 +
jnz loc_101BB65  +
mov eax VersionInformation.dwMajorVersion +
cmp eax 6 +
ja loc_101BAED  +
jnz loc_101BB65  +
cmp VersionInformation.dwMinorVersion 0 +
ja loc_101BAED  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
xor ebx ebx +
cmp [ebp+arg_8] ebx +
jnz loc_101BC4C  +
call sub_1014511  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov dword ptr [eax] 16h +
call sub_10144BA  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_101BCED  +
mov eax [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
cmp eax ebx +
jz loc_101BC78  +
cmp esi ebx +
jnz loc_101BC78  +
call sub_1014511  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov dword ptr [eax] 16h +
call sub_10144BA  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_101BCEC  +
mov [ebp+var_14] 42h +
mov [ebp+var_18] esi +
mov [ebp+var_20] esi +
cmp eax 3FFFFFFFh +
jbe loc_101BC95  +
mov [ebp+var_1C] 7FFFFFFFh +
jmp loc_101BC9A  +
add eax eax +
mov [ebp+var_1C] eax +
push edi  +
push [ebp+arg_10]  +
lea eax [ebp+var_20] +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push eax  +
call sub_101C1EE  +
add esp 10h +
mov edi eax +
cmp esi ebx +
jz loc_101BCEB  +
dec [ebp+var_1C]  +
js loc_101BCC5  +
mov eax [ebp+var_20] +
mov [eax] bl +
inc [ebp+var_20]  +
jmp loc_101BCD1  +
lea eax [ebp+var_20] +
push eax  +
push ebx  +
call sub_10135C7  +
pop ecx  +
pop ecx  +
dec [ebp+var_1C]  +
js loc_101BCDD  +
mov eax [ebp+var_20] +
mov [eax] bl +
jmp loc_101BCE9  +
lea eax [ebp+var_20] +
push eax  +
push ebx  +
call sub_10135C7  +
pop ecx  +
pop ecx  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101BC1C  +
add esp 14h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
xor esi esi +
xor eax eax +
push edi  +
cmp [ebp+arg_8] esi +
jz loc_101BDFC  +
mov ebx [ebp+arg_0] +
cmp ebx esi +
jnz loc_101BD58  +
call sub_1014511  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_10144BA  +
add esp 14h +
mov eax 7FFFFFFFh +
jmp loc_101BDFC  +
mov edi [ebp+arg_4] +
cmp edi esi +
jz loc_101BD36  +
push [ebp+arg_C]  +
lea ecx [ebp+var_10] +
call sub_1010CA3  +
mov eax [ebp+var_10] +
cmp [eax+14h] esi +
jnz loc_101BDB1  +
movzx eax word ptr [ebx] +
cmp ax 41h +
jb loc_101BD84  +
cmp ax 5Ah +
ja loc_101BD84  +
add eax 20h +
movzx esi ax +
movzx eax word ptr [edi] +
cmp ax 41h +
jb loc_101BD99  +
cmp ax 5Ah +
ja loc_101BD99  +
add eax 20h +
inc ebx  +
inc ebx  +
inc edi  +
inc edi  +
dec [ebp+arg_8]  +
movzx eax ax +
jz loc_101BDE7  +
test si si +
jz loc_101BDE7  +
cmp si ax +
jz loc_101BD72  +
jmp loc_101BDE7  +
lea eax [ebp+var_10] +
push eax  +
movzx eax word ptr [ebx] +
push eax  +
call sub_101CDEB  +
movzx esi ax +
lea eax [ebp+var_10] +
push eax  +
movzx eax word ptr [edi] +
push eax  +
call sub_101CDEB  +
add esp 10h +
inc ebx  +
inc ebx  +
inc edi  +
inc edi  +
dec [ebp+arg_8]  +
movzx eax ax +
jz loc_101BDE7  +
test si si +
jz loc_101BDE7  +
cmp si ax +
jz loc_101BDB1  +
movzx ecx ax +
movzx eax si +
sub eax ecx +
cmp [ebp+var_4] 0 +
jz loc_101BDFC  +
mov ecx [ebp+var_8] +
and dword ptr [ecx+70h] 0FFFFFFFDh +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
push edi  +
cmp dword_1022D70 esi +
jnz loc_101BE96  +
xor eax eax +
cmp [ebp+arg_8] esi +
jz loc_101BEA8  +
mov edi [ebp+arg_0] +
cmp edi esi +
jnz loc_101BE48  +
call sub_1014511  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_10144BA  +
add esp 14h +
mov eax 7FFFFFFFh +
jmp loc_101BEA8  +
mov edx [ebp+arg_4] +
cmp edx esi +
jz loc_101BE29  +
movzx eax word ptr [edi] +
cmp ax 41h +
jb loc_101BE61  +
cmp ax 5Ah +
ja loc_101BE61  +
add eax 20h +
movzx ecx ax +
movzx eax word ptr [edx] +
cmp ax 41h +
jb loc_101BE76  +
cmp ax 5Ah +
ja loc_101BE76  +
add eax 20h +
inc edi  +
inc edi  +
inc edx  +
inc edx  +
dec [ebp+arg_8]  +
movzx eax ax +
jz loc_101BE8C  +
cmp cx si +
jz loc_101BE8C  +
cmp cx ax +
jz loc_101BE4F  +
movzx edx ax +
movzx eax cx +
sub eax edx +
jmp loc_101BEA8  +
push esi  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101BD17  +
add esp 10h +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
push [ebp+arg_8]  +
lea ecx [ebp+var_10] +
call sub_1010CA3  +
mov ebx [ebp+arg_0] +
xor esi esi +
cmp ebx esi +
jnz loc_101BEFE  +
call sub_1014511  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_10144BA  +
add esp 14h +
cmp [ebp+var_4] 0 +
jz loc_101BEF4  +
mov eax [ebp+var_8] +
and dword ptr [eax+70h] 0FFFFFFFDh +
mov eax 7FFFFFFFh +
jmp loc_101BFBE  +
push edi  +
mov edi [ebp+arg_4] +
cmp edi esi +
jnz loc_101BF35  +
call sub_1014511  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_10144BA  +
add esp 14h +
cmp [ebp+var_4] 0 +
jz loc_101BF2B  +
mov eax [ebp+var_8] +
and dword ptr [eax+70h] 0FFFFFFFDh +
mov eax 7FFFFFFFh +
jmp loc_101BFBD  +
mov eax [ebp+var_10] +
cmp [eax+14h] esi +
jnz loc_101BF77  +
movzx eax word ptr [ebx] +
cmp ax 41h +
jb loc_101BF4F  +
cmp ax 5Ah +
ja loc_101BF4F  +
add eax 20h +
movzx esi ax +
movzx eax word ptr [edi] +
cmp ax 41h +
jb loc_101BF64  +
cmp ax 5Ah +
ja loc_101BF64  +
add eax 20h +
inc ebx  +
inc ebx  +
inc edi  +
inc edi  +
movzx eax ax +
test si si +
jz loc_101BFA8  +
cmp si ax +
jz loc_101BF3D  +
jmp loc_101BFA8  +
movzx eax word ptr [ebx] +
lea ecx [ebp+var_10] +
push ecx  +
push eax  +
call sub_101CDEB  +
movzx esi ax +
movzx eax word ptr [edi] +
lea ecx [ebp+var_10] +
push ecx  +
inc ebx  +
push eax  +
inc ebx  +
call sub_101CDEB  +
add esp 10h +
inc edi  +
inc edi  +
movzx eax ax +
test si si +
jz loc_101BFA8  +
cmp si ax +
jz loc_101BF77  +
movzx ecx ax +
movzx eax si +
sub eax ecx +
cmp [ebp+var_4] 0 +
jz loc_101BFBD  +
mov ecx [ebp+var_8] +
and dword ptr [ecx+70h] 0FFFFFFFDh +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
push edi  +
cmp dword_1022D70 esi +
jnz loc_101C047  +
mov edi [ebp+arg_0] +
cmp edi esi +
jnz loc_101BFFE  +
call sub_1014511  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_10144BA  +
add esp 14h +
mov eax 7FFFFFFFh +
jmp loc_101C056  +
mov edx [ebp+arg_4] +
cmp edx esi +
jz loc_101BFDF  +
movzx eax word ptr [edi] +
cmp ax 41h +
jb loc_101C017  +
cmp ax 5Ah +
ja loc_101C017  +
add eax 20h +
movzx ecx ax +
movzx eax word ptr [edx] +
cmp ax 41h +
jb loc_101C02C  +
cmp ax 5Ah +
ja loc_101C02C  +
add eax 20h +
inc edi  +
inc edi  +
inc edx  +
inc edx  +
movzx eax ax +
cmp cx si +
jz loc_101C03D  +
cmp cx ax +
jz loc_101C005  +
movzx edx ax +
movzx eax cx +
sub eax edx +
jmp loc_101C056  +
push esi  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101BEB1  +
add esp 0Ch +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_4] +
push esi  +
lea esi [eax-1] +
imul esi [ebp+arg_C] +
push edi  +
xor edi edi +
add esi ecx +
mov [ebp+arg_4] ecx +
cmp ecx edi +
jnz loc_101C09E  +
cmp eax edi +
jz loc_101C09E  +
call sub_1014511  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
mov dword ptr [eax] 16h +
call sub_10144BA  +
add esp 14h +
xor eax eax +
jmp loc_101C0B0  +
cmp [ebp+arg_C] edi +
jbe loc_101C082  +
cmp [ebp+arg_10] edi +
jz loc_101C082  +
push ebx  +
cmp ecx esi +
jbe loc_101C0B6  +
xor eax eax +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn   +
xor edi edi +
mov ebx eax +
shr ebx 1 +
jz loc_101C107  +
mov [ebp+arg_8] eax +
and [ebp+arg_8] 1 +
mov eax ebx +
jnz loc_101C0CA  +
lea eax [ebx-1] +
imul eax [ebp+arg_C] +
add eax [ebp+arg_4] +
mov edi eax +
push edi  +
push [ebp+arg_0]  +
call [ebp+arg_10]  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_101C103  +
jge loc_101C0F2  +
sub edi [ebp+arg_C] +
cmp [ebp+arg_8] 0 +
mov esi edi +
jnz loc_101C0FA  +
lea eax [ebx-1] +
jmp loc_101C0FC  +
mov eax [ebp+arg_C] +
add edi eax +
mov [ebp+arg_4] edi +
mov eax ebx +
cmp [ebp+arg_4] esi +
jbe loc_101C0B4  +
jmp loc_101C0AD  +
mov eax edi +
jmp loc_101C0AF  +
cmp eax edi +
jz loc_101C0AD  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call [ebp+arg_10]  +
neg eax  +
sbb eax eax +
pop ecx  +
not eax  +
and eax [ebp+arg_4] +
pop ecx  +
jmp loc_101C0AF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [esi+0Ch] 40h +
jz loc_101C137  +
cmp dword ptr [esi+8] 0 +
jz loc_101C15C  +
push esi  +
push dword ptr [ebp+WideCharStr]  +
call sub_101CEDE  +
pop ecx  +
pop ecx  +
mov ecx 0FFFFh +
cmp ax cx +
jnz loc_101C15C  +
push esi  +
call sub_101CEA5  +
pop ecx  +
test eax eax +
jz loc_101C15C  +
or dword ptr [edi] 0FFFFFFFFh +
pop ebp  +
retn   +
inc dword ptr [edi]  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
push edi  +
mov edi eax +
jle loc_101C18F  +
push esi  +
push [ebp+arg_0]  +
mov esi [ebp+arg_8] +
dec [ebp+arg_4]  +
call sub_101C126  +
cmp dword ptr [edi] 0FFFFFFFFh +
pop ecx  +
jz loc_101C18E  +
cmp [ebp+arg_4] 0 +
jg loc_101C174  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
test byte ptr [esi+0Ch] 40h +
push edi  +
mov edi eax +
mov ebx edx +
jz loc_101C1DE  +
cmp dword ptr [esi+8] 0 +
jnz loc_101C1DE  +
mov eax [ebp+arg_0] +
add [edi] eax +
jmp loc_101C1E4  +
movzx eax word ptr [ebx] +
dec [ebp+arg_0]  +
push eax  +
call sub_101C126  +
inc ebx  +
inc ebx  +
cmp dword ptr [edi] 0FFFFFFFFh +
pop ecx  +
jnz loc_101C1DE  +
call sub_1014511  +
cmp dword ptr [eax] 2Ah +
jnz loc_101C1E4  +
push 3Fh  +
call sub_101C126  +
pop ecx  +
cmp [ebp+arg_0] 0 +
jg loc_101C1B8  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 478h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
xor esi esi +
push edi  +
push [ebp+arg_8]  +
mov edi [ebp+arg_4] +
lea ecx [ebp+var_44C] +
mov [ebp+var_424] eax +
mov [ebp+var_418] ebx +
mov [ebp+var_458] esi +
mov [ebp+var_408] esi +
mov [ebp+var_42C] esi +
mov [ebp+var_40C] esi +
mov [ebp+var_428] esi +
mov [ebp+var_460] esi +
mov [ebp+var_45C] esi +
mov [ebp+var_430] esi +
call sub_1010CA3  +
cmp [ebp+var_424] esi +
jnz loc_101C296  +
call sub_1014511  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
push esi  +
call sub_10144BA  +
add esp 14h +
cmp [ebp+var_440] 0 +
jz loc_101C28E  +
mov eax [ebp+var_444] +
and dword ptr [eax+70h] 0FFFFFFFDh +
or eax 0FFFFFFFFh +
jmp loc_101CDB7  +
cmp edi esi +
jz loc_101C263  +
movzx edx word ptr [edi] +
xor ecx ecx +
mov [ebp+var_41C] esi +
mov [ebp+var_420] esi +
mov [ebp+var_454] esi +
mov [ebp+var_414] edx +
cmp dx si +
jz loc_101CD9E  +
push 2  +
pop esi  +
add edi esi +
cmp [ebp+var_41C] 0 +
mov [ebp+var_450] edi +
jl loc_101CD9E  +
lea eax [edx-20h] +
cmp ax 58h +
ja loc_101C2F0  +
movzx eax dx +
movsx eax byte ptr ds:(aFlsalloc+4)[eax] +
and eax 0Fh +
jmp loc_101C2F2  +
xor eax eax +
movsx eax ds:byte_10022D0[ecx+eax*8] +
push 7  +
sar eax 4 +
pop ecx  +
mov [ebp+var_468] eax +
cmp eax ecx +
ja loc_101CD60  +
jmp ds:off_101CDC6[eax*4]  +
xor eax eax +
or [ebp+var_40C] 0FFFFFFFFh +
mov [ebp+var_460] eax +
mov [ebp+var_45C] eax +
mov [ebp+var_42C] eax +
mov [ebp+var_428] eax +
mov [ebp+var_408] eax +
mov [ebp+var_430] eax +
jmp loc_101CD60  +
movzx eax dx +
sub eax 20h +
jz loc_101C399  +
sub eax 3 +
jz loc_101C38A  +
sub eax 8 +
jz loc_101C37E  +
sub eax esi +
jz loc_101C372  +
sub eax 3 +
jnz loc_101CD60  +
or [ebp+var_408] 8 +
jmp loc_101CD60  +
or [ebp+var_408] 4 +
jmp loc_101CD60  +
or [ebp+var_408] 1 +
jmp loc_101CD60  +
or [ebp+var_408] 80h +
jmp loc_101CD60  +
or [ebp+var_408] esi +
jmp loc_101CD60  +
cmp dx 2Ah +
jnz loc_101C3D6  +
add ebx 4 +
mov [ebp+var_418] ebx +
mov ebx [ebx-4] +
mov [ebp+var_42C] ebx +
test ebx ebx +
jge loc_101CD60  +
or [ebp+var_408] 4 +
neg [ebp+var_42C]  +
jmp loc_101CD60  +
mov eax [ebp+var_42C] +
imul eax eax +
movzx ecx dx +
lea eax [eax+ecx-30h] +
mov [ebp+var_42C] eax +
jmp loc_101CD60  +
and [ebp+var_40C] 0 +
jmp loc_101CD60  +
cmp dx 2Ah +
jnz loc_101C429  +
add ebx 4 +
mov [ebp+var_418] ebx +
mov ebx [ebx-4] +
mov [ebp+var_40C] ebx +
test ebx ebx +
jge loc_101CD60  +
or [ebp+var_40C] 0FFFFFFFFh +
jmp loc_101CD60  +
mov eax [ebp+var_40C] +
imul eax eax +
movzx ecx dx +
lea eax [eax+ecx-30h] +
mov [ebp+var_40C] eax +
jmp loc_101CD60  +
movzx eax dx +
cmp eax 49h +
jz loc_101C4A3  +
cmp eax 68h +
jz loc_101C497  +
cmp eax 6Ch +
jz loc_101C46E  +
cmp eax 77h +
jnz loc_101CD60  +
or [ebp+var_408] 800h +
jmp loc_101CD60  +
cmp word ptr [edi] 6Ch +
jnz loc_101C48B  +
add edi esi +
or [ebp+var_408] 1000h +
mov [ebp+var_450] edi +
jmp loc_101CD60  +
or [ebp+var_408] 10h +
jmp loc_101CD60  +
or [ebp+var_408] 20h +
jmp loc_101CD60  +
movzx eax word ptr [edi] +
cmp ax 36h +
jnz loc_101C4CB  +
cmp word ptr [edi+2] 34h +
jnz loc_101C4CB  +
add edi 4 +
or [ebp+var_408] 8000h +
mov [ebp+var_450] edi +
jmp loc_101CD60  +
cmp ax 33h +
jnz loc_101C4F0  +
cmp word ptr [edi+2] 32h +
jnz loc_101C4F0  +
add edi 4 +
and [ebp+var_408] 0FFFF7FFFh +
mov [ebp+var_450] edi +
jmp loc_101CD60  +
cmp ax 64h +
jz loc_101CD60  +
cmp ax 69h +
jz loc_101CD60  +
cmp ax 6Fh +
jz loc_101CD60  +
cmp ax 75h +
jz loc_101CD60  +
cmp ax 78h +
jz loc_101CD60  +
cmp ax 58h +
jz loc_101CD60  +
and [ebp+var_468] 0 +
mov esi [ebp+var_424] +
push edx  +
lea edi [ebp+var_41C] +
mov [ebp+var_430] 1 +
call sub_101C126  +
jmp loc_101CD5F  +
movzx eax dx +
cmp eax 64h +
jg loc_101C7BD  +
jz loc_101C854  +
cmp eax 53h +
jg loc_101C68A  +
jz loc_101C5EF  +
sub eax 41h +
jz loc_101C586  +
sub eax esi +
jz loc_101C5D3  +
sub eax esi +
jz loc_101C586  +
sub eax esi +
jnz loc_101CBAE  +
add edx 20h +
mov [ebp+var_460] 1 +
mov [ebp+var_414] edx +
or [ebp+var_408] 40h +
cmp [ebp+var_40C] 0 +
lea edi [ebp+WideCharStr] +
mov eax 200h +
mov [ebp+var_410] edi +
mov [ebp+var_434] eax +
jge loc_101C882  +
mov [ebp+var_40C] 6 +
jmp loc_101C8ED  +
test [ebp+var_408] 830h +
jnz loc_101C6AB  +
or [ebp+var_408] 20h +
jmp loc_101C6AB  +
test [ebp+var_408] 830h +
jnz loc_101C602  +
or [ebp+var_408] 20h +
mov esi [ebp+var_40C] +
cmp esi 0FFFFFFFFh +
jnz loc_101C612  +
mov esi 7FFFFFFFh +
add ebx 4 +
test byte ptr [ebp+var_408] 20h +
mov [ebp+var_418] ebx +
mov ebx [ebx-4] +
mov [ebp+var_410] ebx +
jz loc_101CB72  +
test ebx ebx +
jnz loc_101C640  +
mov eax off_101FC98 +
mov [ebp+var_410] eax +
and [ebp+var_420] 0 +
mov edi [ebp+var_410] +
test esi esi +
jle loc_101CBAE  +
mov al [edi] +
test al al +
jz loc_101CBAE  +
lea ecx [ebp+var_44C] +
movzx eax al +
push ecx  +
push eax  +
call sub_10158DE  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_101C676  +
inc edi  +
inc edi  +
inc [ebp+var_420]  +
cmp [ebp+var_420] esi +
jl loc_101C655  +
jmp loc_101CBAE  +
sub eax 58h +
jz loc_101C9C3  +
sub eax esi +
jz loc_101C72F  +
sub eax ecx +
jz loc_101C599  +
sub eax esi +
jnz loc_101CBAE  +
movzx eax word ptr [ebx] +
add ebx 4 +
xor edi edi +
inc edi  +
test byte ptr [ebp+var_408] 20h +
mov [ebp+var_430] edi +
mov [ebp+var_418] ebx +
mov [ebp+var_464] eax +
jz loc_101C711  +
mov byte ptr [ebp+var_43C] al +
lea eax [ebp+var_44C] +
push eax  +
mov eax [ebp+var_44C] +
mov byte ptr [ebp+var_43C+1] 0 +
push dword ptr [eax+0ACh]  +
lea eax [ebp+var_43C] +
push eax  +
lea eax [ebp+WideCharStr] +
push eax  +
call sub_101935E  +
add esp 10h +
test eax eax +
jge loc_101C718  +
mov [ebp+var_45C] edi +
jmp loc_101C718  +
mov [ebp+WideCharStr] ax +
lea eax [ebp+WideCharStr] +
mov [ebp+var_410] eax +
mov [ebp+var_420] edi +
jmp loc_101CBAE  +
mov eax [ebx] +
add ebx 4 +
mov [ebp+var_418] ebx +
test eax eax +
jz loc_101C7A1  +
mov esi [eax+4] +
test esi esi +
jz loc_101C7A1  +
movzx ecx word ptr [eax] +
cmp [eax+2] cx +
jb loc_101CD87  +
test [ebp+var_408] 800h +
movzx eax cx +
jz loc_101C78F  +
xor ecx ecx +
mov edx eax +
not edx  +
inc ecx  +
test dl cl +
jz loc_101CD87  +
mov edx esi +
not edx  +
test dl cl +
jz loc_101CD87  +
mov [ebp+var_410] esi +
shr eax 1 +
mov [ebp+var_430] ecx +
jmp loc_101CBA8  +
and [ebp+var_430] 0 +
mov [ebp+var_410] esi +
jmp loc_101CBA8  +
mov eax off_101FC98 +
mov [ebp+var_410] eax +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_101C7AF  +
sub eax edx +
jmp loc_101CBA8  +
cmp eax 70h +
jg loc_101C9CB  +
jz loc_101C9B9  +
cmp eax 65h +
jl loc_101CBAE  +
cmp eax 67h +
jle loc_101C599  +
cmp eax 69h +
jz loc_101C854  +
cmp eax 6Eh +
jz loc_101C810  +
cmp eax 6Fh +
jnz loc_101CBAE  +
test byte ptr [ebp+var_408] 80h +
mov [ebp+var_414] 8 +
jz loc_101C865  +
or [ebp+var_408] 200h +
jmp loc_101C865  +
mov esi [ebx] +
add ebx 4 +
mov [ebp+var_418] ebx +
call sub_1017D5B  +
test eax eax +
jz loc_101CD87  +
test byte ptr [ebp+var_408] 20h +
jz loc_101C83D  +
mov ax word ptr [ebp+var_41C] +
mov [esi] ax +
jmp loc_101C845  +
mov eax [ebp+var_41C] +
mov [esi] eax +
mov [ebp+var_45C] 1 +
jmp loc_101CD44  +
or [ebp+var_408] 40h +
mov [ebp+var_414] 0Ah +
test [ebp+var_408] 8000h +
jz loc_101CA2B  +
mov eax [ebx] +
mov edx [ebx+4] +
add ebx 8 +
jmp loc_101CA74  +
jnz loc_101C896  +
cmp dx 67h +
jnz loc_101C8ED  +
mov [ebp+var_40C] 1 +
jmp loc_101C8ED  +
cmp [ebp+var_40C] eax +
jle loc_101C8A4  +
mov [ebp+var_40C] eax +
cmp [ebp+var_40C] 0A3h +
jle loc_101C8ED  +
mov esi [ebp+var_40C] +
add esi 15Dh +
push esi  +
call sub_1011A29  +
mov edx [ebp+var_414] +
pop ecx  +
mov [ebp+var_454] eax +
test eax eax +
jz loc_101C8E3  +
mov [ebp+var_410] eax +
mov [ebp+var_434] esi +
mov edi eax +
jmp loc_101C8ED  +
mov [ebp+var_40C] 0A3h +
mov eax [ebx] +
add ebx 8 +
mov [ebp+var_470] eax +
mov eax [ebx-4] +
mov [ebp+var_46C] eax +
lea eax [ebp+var_44C] +
push eax  +
push [ebp+var_460]  +
movsx eax dl +
push [ebp+var_40C]  +
mov [ebp+var_418] ebx +
push eax  +
push [ebp+var_434]  +
lea eax [ebp+var_470] +
push edi  +
push eax  +
push off_1020568  +
call sub_1012C9F  +
pop ecx  +
call eax  +
mov esi [ebp+var_408] +
add esp 1Ch +
and esi 80h +
jz loc_101C96C  +
cmp [ebp+var_40C] 0 +
jnz loc_101C96C  +
lea eax [ebp+var_44C] +
push eax  +
push edi  +
push off_1020574  +
call sub_1012C9F  +
pop ecx  +
call eax  +
pop ecx  +
pop ecx  +
cmp word ptr [ebp+var_414] 67h +
jnz loc_101C992  +
test esi esi +
jnz loc_101C992  +
lea eax [ebp+var_44C] +
push eax  +
push edi  +
push off_1020570  +
call sub_1012C9F  +
pop ecx  +
call eax  +
pop ecx  +
pop ecx  +
cmp byte ptr [edi] 2Dh +
jnz loc_101C9A8  +
or [ebp+var_408] 100h +
inc edi  +
mov [ebp+var_410] edi +
mov eax edi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_101C9AD  +
jmp loc_101C7B6  +
mov [ebp+var_40C] 8 +
mov [ebp+var_458] ecx +
jmp loc_101C9EF  +
sub eax 73h +
jz loc_101C602  +
sub eax esi +
jz loc_101C85B  +
sub eax 3 +
jnz loc_101CBAE  +
mov [ebp+var_458] 27h +
test byte ptr [ebp+var_408] 80h +
mov [ebp+var_414] 10h +
jz loc_101C865  +
push 30h  +
pop eax  +
mov word ptr [ebp+var_438] ax +
mov eax [ebp+var_458] +
add eax 51h +
mov word ptr [ebp+var_438+2] ax +
mov [ebp+var_428] esi +
jmp loc_101C865  +
test [ebp+var_408] 1000h +
jnz loc_101C875  +
add ebx 4 +
test byte ptr [ebp+var_408] 20h +
jz loc_101CA63  +
test byte ptr [ebp+var_408] 40h +
mov [ebp+var_418] ebx +
jz loc_101CA5C  +
movsx eax word ptr [ebx-4] +
jmp loc_101CA60  +
movzx eax word ptr [ebx-4] +
cdq   +
jmp loc_101CA7A  +
test byte ptr [ebp+var_408] 40h +
mov eax [ebx-4] +
jz loc_101CA72  +
cdq   +
jmp loc_101CA74  +
xor edx edx +
mov [ebp+var_418] ebx +
test byte ptr [ebp+var_408] 40h +
jz loc_101CA9E  +
test edx edx +
jg loc_101CA9E  +
jl loc_101CA8D  +
test eax eax +
jnb loc_101CA9E  +
neg eax  +
adc edx 0 +
neg edx  +
or [ebp+var_408] 100h +
test [ebp+var_408] 9000h +
mov ebx edx +
mov esi eax +
jnz loc_101CAB0  +
xor ebx ebx +
cmp [ebp+var_40C] 0 +
jge loc_101CAC5  +
mov [ebp+var_40C] 1 +
jmp loc_101CADF  +
and [ebp+var_408] 0FFFFFFF7h +
mov eax 200h +
cmp [ebp+var_40C] eax +
jle loc_101CADF  +
mov [ebp+var_40C] eax +
mov eax esi +
or eax ebx +
jnz loc_101CAEB  +
and [ebp+var_428] eax +
lea edi [ebp+var_205] +
mov eax [ebp+var_40C] +
dec [ebp+var_40C]  +
test eax eax +
jg loc_101CB07  +
mov eax esi +
or eax ebx +
jz loc_101CB34  +
mov eax [ebp+var_414] +
cdq   +
push edx  +
push eax  +
push ebx  +
push esi  +
call sub_1015300  +
add ecx 30h +
cmp ecx 39h +
mov [ebp+var_474] ebx +
mov esi eax +
mov ebx edx +
jle loc_101CB2F  +
add ecx [ebp+var_458] +
mov [edi] cl +
dec edi  +
jmp loc_101CAF1  +
lea eax [ebp+var_205] +
sub eax edi +
inc edi  +
test [ebp+var_408] 200h +
mov [ebp+var_420] eax +
mov [ebp+var_410] edi +
jz loc_101CBAE  +
test eax eax +
jz loc_101CB60  +
mov ecx edi +
cmp byte ptr [ecx] 30h +
jz loc_101CBAE  +
dec [ebp+var_410]  +
mov ecx [ebp+var_410] +
mov byte ptr [ecx] 30h +
inc eax  +
jmp loc_101CBA8  +
test ebx ebx +
jnz loc_101CB81  +
mov eax off_101FC9C +
mov [ebp+var_410] eax +
mov eax [ebp+var_410] +
mov [ebp+var_430] 1 +
jmp loc_101CB9C  +
dec esi  +
cmp word ptr [eax] 0 +
jz loc_101CBA0  +
inc eax  +
inc eax  +
test esi esi +
jnz loc_101CB93  +
sub eax [ebp+var_410] +
sar eax 1 +
mov [ebp+var_420] eax +
cmp [ebp+var_45C] 0 +
jnz loc_101CD44  +
mov eax [ebp+var_408] +
test al 40h +
jz loc_101CBF0  +
test eax 100h +
jz loc_101CBD0  +
push 2Dh  +
jmp loc_101CBDE  +
test al 1 +
jz loc_101CBD8  +
push 2Bh  +
jmp loc_101CBDE  +
test al 2 +
jz loc_101CBF0  +
push 20h  +
pop eax  +
mov word ptr [ebp+var_438] ax +
mov [ebp+var_428] 1 +
mov ebx [ebp+var_42C] +
mov esi [ebp+var_420] +
sub ebx esi +
sub ebx [ebp+var_428] +
test byte ptr [ebp+var_408] 0Ch +
jnz loc_101CC24  +
push [ebp+var_424]  +
lea eax [ebp+var_41C] +
push ebx  +
push 20h  +
call sub_101C165  +
add esp 0Ch +
push [ebp+var_428]  +
mov ecx [ebp+var_424] +
lea eax [ebp+var_41C] +
lea edx [ebp+var_438] +
call sub_101C197  +
test byte ptr [ebp+var_408] 8 +
pop ecx  +
jz loc_101CC6B  +
test byte ptr [ebp+var_408] 4 +
jnz loc_101CC6B  +
push [ebp+var_424]  +
lea eax [ebp+var_41C] +
push ebx  +
push 30h  +
call sub_101C165  +
add esp 0Ch +
cmp [ebp+var_430] 0 +
jnz loc_101CD02  +
test esi esi +
jle loc_101CD02  +
mov eax [ebp+var_410] +
mov [ebp+var_414] eax +
mov [ebp+var_434] esi +
dec [ebp+var_434]  +
lea eax [ebp+var_44C] +
push eax  +
mov eax [ebp+var_44C] +
push dword ptr [eax+0ACh]  +
lea eax [ebp+var_464] +
push [ebp+var_414]  +
push eax  +
call sub_101935E  +
add esp 10h +
mov [ebp+var_474] eax +
test eax eax +
jle loc_101CCF9  +
push [ebp+var_464]  +
mov esi [ebp+var_424] +
lea edi [ebp+var_41C] +
call sub_101C126  +
mov eax [ebp+var_474] +
add [ebp+var_414] eax +
cmp [ebp+var_434] 0 +
pop ecx  +
jg loc_101CC92  +
jmp loc_101CD1B  +
or [ebp+var_41C] 0FFFFFFFFh +
jmp loc_101CD1B  +
mov ecx [ebp+var_424] +
mov edx [ebp+var_410] +
push esi  +
lea eax [ebp+var_41C] +
call sub_101C197  +
pop ecx  +
cmp [ebp+var_41C] 0 +
jl loc_101CD44  +
test byte ptr [ebp+var_408] 4 +
jz loc_101CD44  +
push [ebp+var_424]  +
lea eax [ebp+var_41C] +
push ebx  +
push 20h  +
call sub_101C165  +
add esp 0Ch +
cmp [ebp+var_454] 0 +
jz loc_101CD60  +
push [ebp+var_454]  +
call sub_1011942  +
and [ebp+var_454] 0 +
pop ecx  +
mov edi [ebp+var_450] +
movzx eax word ptr [edi] +
mov [ebp+var_414] eax +
test ax ax +
jz loc_101CD9E  +
mov ecx [ebp+var_468] +
mov ebx [ebp+var_418] +
mov edx eax +
jmp loc_101C2C0  +
call sub_1014511  +
mov dword ptr [eax] 16h +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
jmp loc_101C273  +
cmp [ebp+var_440] 0 +
jz loc_101CDB1  +
mov eax [ebp+var_444] +
and dword ptr [eax+70h] 0FFFFFFFDh +
mov eax [ebp+var_41C] +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010BBF  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 0FFFFh +
mov ecx eax +
sub esp 14h +
cmp [ebp+WideCharStr] cx +
jz locret_101CE9E  +
push ebx  +
push [ebp+arg_4]  +
lea ecx [ebp+var_14] +
call sub_1010CA3  +
mov ecx [ebp+var_14] +
mov edx [ecx+14h] +
xor ebx ebx +
cmp edx ebx +
jnz loc_101CE30  +
mov eax dword ptr [ebp+WideCharStr] +
lea ecx [eax-41h] +
cmp cx 19h +
ja loc_101CE2B  +
add eax 20h +
movzx eax ax +
jmp loc_101CE91  +
push esi  +
mov eax 100h +
mov esi eax +
cmp [ebp+WideCharStr] si +
pop esi  +
jnb loc_101CE68  +
lea eax [ebp+var_14] +
push eax  +
push 1  +
push dword ptr [ebp+WideCharStr]  +
call sub_1018A41  +
add esp 0Ch +
test eax eax +
movzx eax [ebp+WideCharStr] +
jz loc_101CE91  +
mov ecx [ebp+var_14] +
mov ecx [ecx+0CCh] +
movzx ax byte ptr [ecx+eax] +
jmp loc_101CE2B  +
push dword ptr [ecx+4]  +
lea ecx [ebp+DestStr] +
push 1  +
push ecx  +
push 1  +
lea ecx [ebp+WideCharStr] +
push ecx  +
push eax  +
push edx  +
lea eax [ebp+var_14] +
push eax  +
call sub_101D320  +
add esp 20h +
test eax eax +
movzx eax [ebp+WideCharStr] +
jz loc_101CE91  +
movzx eax [ebp+DestStr] +
cmp [ebp+var_8] bl +
jz loc_101CE9D  +
mov ecx [ebp+var_C] +
and dword ptr [ecx+70h] 0FFFFFFFDh +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
xor esi esi +
cmp eax esi +
jnz loc_101CED0  +
call sub_1014511  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_10144BA  +
add esp 14h +
xor eax eax +
jmp loc_101CED6  +
mov eax [eax+0Ch] +
and eax 20h +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
test byte ptr [esi+0Ch] 40h +
push edi  +
jnz loc_101D090  +
push esi  +
call sub_1017D24  +
pop ecx  +
mov edi offset unk_101FC68 +
cmp eax 0FFFFFFFFh +
jz loc_101CF3F  +
push esi  +
call sub_1017D24  +
pop ecx  +
cmp eax 0FFFFFFFEh +
jz loc_101CF3F  +
push esi  +
call sub_1017D24  +
sar eax 5 +
push esi  +
lea ebx dword_10244A0[eax*4] +
call sub_1017D24  +
and eax 1Fh +
imul eax eax +
add eax [ebx] +
pop ecx  +
pop ecx  +
jmp loc_101CF41  +
mov eax edi +
mov eax [eax+8] +
and al 3 +
cmp al 2 +
jz loc_101D090  +
push esi  +
call sub_1017D24  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_101CF88  +
push esi  +
call sub_1017D24  +
pop ecx  +
cmp eax 0FFFFFFFEh +
jz loc_101CF88  +
push esi  +
call sub_1017D24  +
sar eax 5 +
push esi  +
lea ebx dword_10244A0[eax*4] +
call sub_1017D24  +
and eax 1Fh +
imul eax eax +
add eax [ebx] +
pop ecx  +
pop ecx  +
jmp loc_101CF8A  +
mov eax edi +
mov eax [eax+8] +
and al 3 +
cmp al 1 +
jnz loc_101CFF0  +
dec dword ptr [esi+4]  +
mov ebx dword ptr [ebp+WideCharStr] +
js loc_101CFA9  +
mov eax [esi] +
mov [eax] bl +
mov ecx [esi] +
movzx eax byte ptr [ecx] +
inc ecx  +
mov [esi] ecx +
jmp loc_101CFB5  +
movsx eax bl +
push esi  +
push eax  +
call sub_10135C7  +
pop ecx  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jnz loc_101CFC4  +
mov eax 0FFFFh +
jmp loc_101D0B0  +
dec dword ptr [esi+4]  +
js loc_101CFD7  +
mov eax [esi] +
mov [eax] bh +
mov ecx [esi] +
movzx eax byte ptr [ecx] +
inc ecx  +
mov [esi] ecx +
jmp loc_101CFE3  +
movsx eax bh +
push esi  +
push eax  +
call sub_10135C7  +
pop ecx  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_101CFBA  +
mov ax bx +
jmp loc_101D0B0  +
push esi  +
call sub_1017D24  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_101D02A  +
push esi  +
call sub_1017D24  +
pop ecx  +
cmp eax 0FFFFFFFEh +
jz loc_101D02A  +
push esi  +
call sub_1017D24  +
sar eax 5 +
push esi  +
lea ebx dword_10244A0[eax*4] +
call sub_1017D24  +
and eax 1Fh +
imul eax eax +
add eax [ebx] +
pop ecx  +
pop ecx  +
jmp loc_101D02C  +
mov eax edi +
test byte ptr [eax+4] 80h +
jz loc_101D090  +
push dword ptr [ebp+WideCharStr]  +
lea eax [ebp+UsedDefaultChar] +
push 5  +
push eax  +
lea eax [ebp+var_10] +
push eax  +
call sub_1017EE7  +
add esp 10h +
test eax eax +
jnz loc_101CFBA  +
xor ebx ebx +
cmp [ebp+var_10] ebx +
jle loc_101D08A  +
dec dword ptr [esi+4]  +
js loc_101D06D  +
mov eax [esi] +
mov cl byte ptr [ebp+ebx+UsedDefaultChar] +
mov [eax] cl +
mov ecx [esi] +
movzx eax byte ptr [ecx] +
inc ecx  +
mov [esi] ecx +
jmp loc_101D07B  +
movsx eax byte ptr [ebp+ebx+UsedDefaultChar] +
push esi  +
push eax  +
call sub_10135C7  +
pop ecx  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_101CFBA  +
inc ebx  +
cmp ebx [ebp+var_10] +
jl loc_101D056  +
mov ax [ebp+WideCharStr] +
jmp loc_101D0B0  +
add dword ptr [esi+4] 0FFFFFFFEh +
js loc_101D0A3  +
mov ecx [esi] +
mov eax dword ptr [ebp+WideCharStr] +
mov [ecx] ax +
add dword ptr [esi] 2 +
jmp loc_101D0B0  +
movzx eax [ebp+WideCharStr] +
push esi  +
push eax  +
call sub_101D367  +
pop ecx  +
pop ecx  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010BBF  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_101FB10 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi ds:LCMapStringW +
xor ebx ebx +
push edi  +
mov edi ecx +
cmp dword_10230B0 ebx +
jnz loc_101D121  +
push ebx  +
push ebx  +
push 1  +
push offset SrcStr  +
push 100h  +
push ebx  +
call esi  +
test eax eax +
jz loc_101D10C  +
mov dword_10230B0 1 +
jmp loc_101D121  +
call ds:GetLastError  +
cmp eax 78h +
jnz loc_101D121  +
mov dword_10230B0 2 +
cmp [ebp+cchWideChar] ebx +
jle loc_101D136  +
push [ebp+cchWideChar]  +
push [ebp+lpWideCharStr]  +
call sub_101D4D9  +
pop ecx  +
pop ecx  +
mov [ebp+cchWideChar] eax +
mov eax dword_10230B0 +
cmp eax 1 +
jnz loc_101D159  +
push [ebp+cchDest]  +
push [ebp+lpDestStr]  +
push [ebp+cchWideChar]  +
push [ebp+lpWideCharStr]  +
push [ebp+dwMapFlags]  +
push [ebp+Locale]  +
call esi  +
jmp loc_101D309  +
cmp eax 2 +
jz loc_101D162  +
cmp eax ebx +
jnz loc_101D1B4  +
mov [ebp+var_C] ebx +
cmp [ebp+Locale] ebx +
jnz loc_101D172  +
mov eax [edi] +
mov eax [eax+14h] +
mov [ebp+Locale] eax +
cmp [ebp+CodePage] ebx +
jnz loc_101D17F  +
mov eax [edi] +
mov eax [eax+4] +
mov [ebp+CodePage] eax +
push [ebp+Locale]  +
call sub_1018695  +
pop ecx  +
cmp [ebp+CodePage] eax +
jz loc_101D195  +
cmp eax 0FFFFFFFFh +
jz loc_101D195  +
mov [ebp+CodePage] eax +
mov esi ds:WideCharToMultiByte +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+cchWideChar]  +
push [ebp+lpWideCharStr]  +
push ebx  +
push [ebp+CodePage]  +
call esi  +
mov edi eax +
mov [ebp+cchSrc] edi +
cmp edi ebx +
jnz loc_101D1BB  +
xor eax eax +
jmp loc_101D309  +
jle loc_101D1FF  +
push 0FFFFFFE0h  +
xor edx edx +
pop eax  +
div  edi +
cmp eax 1 +
jb loc_101D1FF  +
lea eax [edi+8] +
cmp eax 400h +
ja loc_101D1E6  +
call sub_1018A10  +
mov eax esp +
cmp eax ebx +
jz loc_101D1FA  +
mov dword ptr [eax] 0CCCCh +
jmp loc_101D1F7  +
push eax  +
call sub_1011A29  +
pop ecx  +
cmp eax ebx +
jz loc_101D1FA  +
mov dword ptr [eax] 0DDDDh +
add eax 8 +
mov [ebp+lpSrcStr] eax +
jmp loc_101D202  +
mov [ebp+lpSrcStr] ebx +
cmp [ebp+lpSrcStr] ebx +
jz loc_101D1B4  +
push ebx  +
push ebx  +
push edi  +
push [ebp+lpSrcStr]  +
push [ebp+cchWideChar]  +
push [ebp+lpWideCharStr]  +
push ebx  +
push [ebp+CodePage]  +
call esi  +
test eax eax +
jz loc_101D2FD  +
push ebx  +
push ebx  +
push edi  +
push [ebp+lpSrcStr]  +
mov edi ds:LCMapStringA +
push [ebp+dwMapFlags]  +
push [ebp+Locale]  +
call edi  +
mov esi eax +
cmp esi ebx +
jz loc_101D2FD  +
jle loc_101D280  +
push 0FFFFFFE0h  +
xor edx edx +
pop eax  +
div  esi +
cmp eax 1 +
jb loc_101D280  +
lea eax [esi+8] +
cmp eax 400h +
ja loc_101D26A  +
call sub_1018A10  +
mov eax esp +
cmp eax ebx +
jz loc_101D27E  +
mov dword ptr [eax] 0CCCCh +
jmp loc_101D27B  +
push eax  +
call sub_1011A29  +
pop ecx  +
cmp eax ebx +
jz loc_101D27E  +
mov dword ptr [eax] 0DDDDh +
add eax 8 +
mov ebx eax +
test ebx ebx +
jz loc_101D2FD  +
push esi  +
push ebx  +
push [ebp+cchSrc]  +
push [ebp+lpSrcStr]  +
push [ebp+dwMapFlags]  +
push [ebp+Locale]  +
call edi  +
test eax eax +
jz loc_101D2F6  +
test [ebp+dwMapFlags] 400h +
jz loc_101D2D5  +
mov eax [ebp+cchDest] +
xor edi edi +
mov [ebp+var_C] esi +
cmp eax edi +
jz loc_101D2F6  +
cmp eax esi +
jg loc_101D2B4  +
lea esi [eax-1] +
push esi  +
push ebx  +
push eax  +
push [ebp+lpDestStr]  +
call sub_1015B1C  +
add esp 10h +
test eax eax +
jz loc_101D2F6  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
call sub_101440F  +
add esp 14h +
jmp loc_101D2F6  +
xor eax eax +
cmp [ebp+cchDest] eax +
jnz loc_101D2E0  +
push eax  +
push eax  +
jmp loc_101D2E6  +
push [ebp+cchDest]  +
push [ebp+lpDestStr]  +
push esi  +
push ebx  +
push 1  +
push [ebp+CodePage]  +
call ds:MultiByteToWideChar  +
mov [ebp+var_C] eax +
push ebx  +
call sub_10153B5  +
pop ecx  +
push [ebp+lpSrcStr]  +
call sub_10153B5  +
mov eax [ebp+var_C] +
pop ecx  +
lea esp [ebp-1Ch] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1010BBF  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push [ebp+arg_0]  +
lea ecx [ebp+var_10] +
call sub_1010CA3  +
push [ebp+CodePage]  +
lea ecx [ebp+var_10] +
push [ebp+cchDest]  +
push [ebp+lpDestStr]  +
push [ebp+cchWideChar]  +
push [ebp+lpWideCharStr]  +
push [ebp+dwMapFlags]  +
push [ebp+Locale]  +
call sub_101D0C4  +
add esp 1Ch +
cmp [ebp+var_4] 0 +
jz locret_101D360  +
mov ecx [ebp+var_8] +
and dword ptr [ecx+70h] 0FFFFFFFDh +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_4] +
push esi  +
call sub_1017D24  +
mov [ebp+arg_4] eax +
mov eax [esi+0Ch] +
pop ecx  +
test al 82h +
jnz loc_101D39B  +
call sub_1014511  +
mov dword ptr [eax] 9 +
or dword ptr [esi+0Ch] 20h +
mov eax 0FFFFh +
jmp loc_101D4D1  +
test al 40h +
jz loc_101D3AC  +
call sub_1014511  +
mov dword ptr [eax] 22h +
jmp loc_101D38D  +
push ebx  +
xor ebx ebx +
test al 1 +
jz loc_101D3C9  +
mov [esi+4] ebx +
test al 10h +
jz loc_101D43E  +
mov ecx [esi+8] +
and eax 0FFFFFFFEh +
mov [esi] ecx +
mov [esi+0Ch] eax +
mov eax [esi+0Ch] +
and eax 0FFFFFFEFh +
or eax 2 +
mov [esi+0Ch] eax +
mov [esi+4] ebx +
mov [ebp+var_4] ebx +
test eax 10Ch +
jnz loc_101D406  +
cmp esi offset unk_1020598 +
jz loc_101D3F2  +
cmp esi offset unk_10205B8 +
jnz loc_101D3FF  +
push [ebp+arg_4]  +
call sub_1017B12  +
pop ecx  +
test eax eax +
jnz loc_101D406  +
push esi  +
call sub_1017ABE  +
pop ecx  +
test dword ptr [esi+0Ch] 108h +
push edi  +
jz loc_101D49B  +
mov eax [esi+8] +
mov edi [esi] +
lea ecx [eax+2] +
mov [esi] ecx +
mov ecx [esi+18h] +
sub edi eax +
dec ecx  +
dec ecx  +
cmp edi ebx +
mov [esi+4] ecx +
jle loc_101D44E  +
push edi  +
push eax  +
push [ebp+arg_4]  +
call sub_10179DD  +
add esp 0Ch +
mov [ebp+var_4] eax +
jmp loc_101D490  +
or eax 20h +
mov [esi+0Ch] eax +
mov eax 0FFFFh +
jmp loc_101D4D0  +
mov ecx [ebp+arg_4] +
cmp ecx 0FFFFFFFFh +
jz loc_101D471  +
cmp ecx 0FFFFFFFEh +
jz loc_101D471  +
mov eax ecx +
and eax 1Fh +
imul eax eax +
mov edx ecx +
sar edx 5 +
add eax dword_10244A0[edx*4] +
jmp loc_101D476  +
mov eax offset unk_101FC68 +
test byte ptr [eax+4] 20h +
jz loc_101D490  +
push 2  +
push ebx  +
push ebx  +
push ecx  +
call sub_10171DE  +
and eax edx +
add esp 10h +
cmp eax 0FFFFFFFFh +
jz loc_101D4BD  +
mov eax [esi+8] +
mov ebx [ebp+arg_0] +
mov [eax] bx +
jmp loc_101D4B8  +
mov ebx [ebp+arg_0] +
push 2  +
pop edi  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_4]  +
mov word ptr [ebp+var_4] bx +
call sub_10179DD  +
add esp 0Ch +
mov [ebp+var_4] eax +
cmp [ebp+var_4] edi +
jz loc_101D4C8  +
or dword ptr [esi+0Ch] 20h +
mov eax 0FFFFh +
jmp loc_101D4CF  +
mov eax ebx +
and eax 0FFFFh +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jbe loc_101D4F6  +
mov ecx [ebp+arg_0] +
cmp word ptr [ecx] 0 +
jz loc_101D4F6  +
inc eax  +
inc ecx  +
inc ecx  +
cmp eax [ebp+arg_4] +
jb loc_101D4E8  +
pop ebp  +
retn   +
***
retf   +
***
retn   +
***
add gs:[eax] al +
retf   +
***
