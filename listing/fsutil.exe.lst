push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
mov edi ds:RegOpenKeyExW +
lea ecx [ebp-4] +
push ecx  +
xor eax eax +
push 20019h  +
push eax  +
mov esi offset aSoftwarePolici +
push esi  +
mov ebx 80000002h +
push ebx  +
mov [ebp-4] eax +
mov [ebp-0Ch] eax +
mov [ebp-8] esi +
call edi  +
cmp eax 2 +
jnz loc_100258A  +
lea ecx [ebp-4] +
push ecx  +
push 20019h  +
mov eax offset aSystemCurrentc +
push 0  +
push eax  +
push ebx  +
mov [ebp-8] eax +
call edi  +
test eax eax +
jz loc_10025A3  +
push dword ptr [ebp-8]  +
push eax  +
call sub_100E412  +
mov dword ptr [ebp-0Ch] 1 +
jmp loc_100264C  +
mov eax [ebp-8] +
push 4  +
pop edi  +
mov cx [eax] +
cmp cx [esi] +
jnz loc_10025CD  +
test cx cx +
jz loc_10025C9  +
mov cx [eax+2] +
cmp cx [esi+2] +
jnz loc_10025CD  +
add eax edi +
add esi edi +
test cx cx +
jnz loc_10025A9  +
xor eax eax +
jmp loc_10025D2  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_10025F6  +
push offset aSymlinkevaluat  +
cmp byte_1011130 al +
jz loc_10025EA  +
push 4000285Dh  +
jmp loc_10025EF  +
push 4000285Eh  +
call sub_100E4FD  +
pop ecx  +
pop ecx  +
xor ebx ebx +
xor esi esi +
inc ebx  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
push 0  +
push 0  +
push off_10110F8[esi]  +
mov [ebp-10h] edi +
push dword ptr [ebp-4]  +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_1002640  +
cmp [ebp-14h] ebx +
jnz loc_100262A  +
push dword_10110F0[esi]  +
jmp loc_1002630  +
push dword_10110F4[esi]  +
call sub_100E4FD  +
add esi 10h +
pop ecx  +
cmp esi 40h +
jb loc_10025FB  +
jmp loc_100264E  +
push dword ptr [ebp-8]  +
push eax  +
call sub_100E412  +
mov [ebp-0Ch] ebx +
pop ecx  +
pop ecx  +
cmp dword ptr [ebp-4] 0 +
pop edi  +
pop esi  +
pop ebx  +
jz loc_1002660  +
push dword ptr [ebp-4]  +
call ds:RegCloseKey  +
mov eax [ebp-0Ch] +
leave   +
retn   +
***
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
mov esi ds:RegOpenKeyExW +
push edi  +
lea eax [ebp-4] +
push eax  +
push 2  +
xor ebx ebx +
push ebx  +
push offset aSoftwarePolici  +
mov edi 80000002h +
push edi  +
mov [ebp-4] ebx +
mov [ebp-8] ebx +
call esi  +
test eax eax +
jnz loc_10026C0  +
push dword ptr [ebp-4]  +
call ds:RegCloseKey  +
mov [ebp-4] ebx +
push offset aSymlinkevaluat  +
cmp byte_1011130 bl +
jz loc_10026E0  +
push 4000285Dh  +
call sub_100E4FD  +
pop ecx  +
pop ecx  +
lea eax [ebp-4] +
push eax  +
push 2  +
push ebx  +
push offset aSystemCurrentc  +
push edi  +
call esi  +
cmp eax ebx +
jz loc_10026F0  +
push offset aSystemCurrentc  +
push eax  +
call sub_100E412  +
jmp loc_10026EA  +
push 4000285Eh  +
call sub_100E4FD  +
pop ecx  +
jmp loc_10027E1  +
xor esi esi +
inc esi  +
cmp [ebp+8] esi +
mov [ebp-0Ch] esi +
jle loc_10027E9  +
mov edi [ebp+0Ch] +
add edi 4 +
jmp loc_100270A  +
xor esi esi +
inc esi  +
mov eax [edi] +
mov [ebp+0Ch] ebx +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_1002712  +
sub eax edx +
sar eax 1 +
cmp eax 5 +
jnz loc_10027C8  +
mov esi ds:_errno +
call esi  +
mov [eax] ebx +
push ebx  +
lea eax [ebp-14h] +
push eax  +
mov eax [edi] +
add eax 8 +
push eax  +
call sub_100E2C2  +
mov ecx [ebp-14h] +
add esp 0Ch +
mov [ebp-10h] eax +
cmp [ecx] bx +
jnz loc_10027D7  +
cmp eax 0FFFFFFFFh +
jnz loc_1002761  +
call esi  +
cmp dword ptr [eax] 22h +
jz loc_10027D7  +
cmp dword ptr [ebp-10h] 1 +
ja loc_10027D7  +
xor esi esi +
push 4  +
push dword ptr [edi]  +
push off_10110FC[esi]  +
call ds:_wcsnicmp  +
add esp 0Ch +
test eax eax +
jnz loc_10027A7  +
push 4  +
lea eax [ebp-10h] +
push eax  +
push 4  +
push ebx  +
push off_10110F8[esi]  +
mov dword ptr [ebp+0Ch] 1 +
push dword ptr [ebp-4]  +
call ds:RegSetValueExW  +
cmp eax ebx +
jnz loc_10026D3  +
add esi 10h +
cmp esi 40h +
jb loc_1002769  +
cmp [ebp+0Ch] ebx +
jz loc_10027D7  +
inc dword ptr [ebp-0Ch]  +
mov eax [ebp-0Ch] +
add edi 4 +
cmp eax [ebp+8] +
jl loc_1002707  +
jmp loc_10027E9  +
push 4000281Bh  +
call sub_100E4FD  +
mov [ebp-8] esi +
jmp loc_10027E8  +
push 4000281Bh  +
call sub_100E4FD  +
mov dword ptr [ebp-8] 1 +
pop ecx  +
cmp [ebp-4] ebx +
pop edi  +
pop esi  +
pop ebx  +
jz loc_10027FA  +
push dword ptr [ebp-4]  +
call ds:RegCloseKey  +
mov eax [ebp-8] +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
mov esi ds:RegOpenKeyExW +
push edi  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
xor ebx ebx +
push ebx  +
push offset SubKey  +
mov edi 80000002h +
push edi  +
mov [ebp+hKey] ebx +
call esi  +
test eax eax +
jnz loc_1002862  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
push ebx  +
push ebx  +
push offset ValueName  +
push [ebp+hKey]  +
mov [ebp+cbData] 4 +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_1002865  +
mov eax [ebp+arg_0] +
mov byte ptr [eax] 1 +
jmp loc_10028BB  +
mov [ebp+hKey] ebx +
mov eax [ebp+arg_0] +
mov [eax] bl +
cmp [ebp+hKey] ebx +
jz loc_100287B  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov [ebp+hKey] ebx +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push ebx  +
push offset aSystemCurren_1  +
push edi  +
call esi  +
test eax eax +
jnz loc_10028B4  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
push ebx  +
push ebx  +
push offset ValueName  +
push [ebp+hKey]  +
mov [ebp+cbData] 4 +
call ds:RegQueryValueExW  +
test eax eax +
jz loc_10028BB  +
mov dword ptr [ebp+Data] 2 +
cmp [ebp+hKey] ebx +
pop edi  +
pop esi  +
pop ebx  +
jz loc_10028CC  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov eax dword ptr [ebp+Data] +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
lea eax [ebp+hKey] +
push eax  +
push 2  +
xor edi edi +
push edi  +
mov esi offset aSystemCurrentc +
push esi  +
push 80000002h  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_100291A  +
push 4  +
lea eax [ebp+Data] +
push eax  +
push 4  +
push edi  +
mov esi offset ValueName +
push esi  +
push [ebp+hKey]  +
call ds:RegSetValueExW  +
test eax eax +
jz loc_1002926  +
push esi  +
push eax  +
call sub_100E412  +
xor edi edi +
pop ecx  +
inc edi  +
pop ecx  +
cmp [ebp+hKey] 0 +
jz loc_1002935  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jnz loc_1002954  +
push 40002824h  +
jmp loc_1002973  +
cmp [ebp+arg_0] 1 +
jnz loc_1002961  +
push 40002825h  +
jmp loc_1002973  +
cmp [ebp+arg_0] 3 +
jnz loc_100296E  +
push 40002827h  +
jmp loc_1002973  +
push 40002826h  +
call sub_100E4FD  +
pop ecx  +
pop ebp  +
retn 4  +
***
jmp loc_1002A16  +
***
cmp dword ptr [ebp-23Ch] 0FFFFFFFFh +
jz locret_1002A93  +
push dword ptr [ebp-23Ch]  +
call ds:CloseHandle  +
retn   +
***
jmp loc_1002B2A  +
***
cmp dword ptr [ebp-23Ch] 0FFFFFFFFh +
jz locret_1002BD3  +
push dword ptr [ebp-23Ch]  +
call ds:CloseHandle  +
retn   +
***
jmp loc_1002C6A  +
***
cmp dword ptr [ebp-23Ch] 0FFFFFFFFh +
jz locret_1002D13  +
push dword ptr [ebp-23Ch]  +
call ds:CloseHandle  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 238h +
mov eax dword_1011584 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov [ebp+var_224] eax +
mov eax ebx +
push edi  +
xor edi edi +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx di +
jnz loc_1002D44  +
sub eax ecx +
sar eax 1 +
add eax 4 +
cmp eax 104h +
jbe loc_1002D6F  +
push 400027EAh  +
call sub_100E4FD  +
xor esi esi +
pop ecx  +
inc esi  +
jmp loc_1002E85  +
push offset a_  +
mov esi 108h +
lea eax [ebp+FileName] +
push esi  +
push eax  +
call wcscpy_s  +
push ebx  +
lea eax [ebp+FileName] +
push esi  +
push eax  +
call wcscat_s  +
add esp 18h +
push edi  +
push edi  +
push 3  +
push edi  +
push 3  +
push 80000000h  +
lea eax [ebp+FileName] +
push eax  +
call ds:CreateFileW  +
mov [ebp+hObject] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1002DC9  +
call ds:GetLastError  +
push eax  +
call sub_100E412  +
jmp loc_1002D66  +
push edi  +
lea eax [ebp+var_220] +
push eax  +
push [ebp+var_224]  +
call sub_100E2C2  +
xor esi esi +
mov ebx eax +
mov eax [ebp+var_220] +
add esp 0Ch +
inc esi  +
cmp [eax] di +
jnz loc_1002E6E  +
cmp ebx 0FFFFFFFFh +
jnz loc_1002DFF  +
call ds:_errno  +
cmp dword ptr [eax] 22h +
jz loc_1002E6E  +
cmp ebx esi +
ja loc_1002E6E  +
xor eax eax +
cmp ebx esi +
setz al  +
push edi  +
mov [ebp+var_234] esi +
mov [ebp+var_230] esi +
mov [ebp+InBuffer] eax +
lea eax [ebp+BytesReturned] +
push eax  +
push edi  +
push edi  +
push 10h  +
lea eax [ebp+InBuffer] +
push eax  +
push 90238h  +
push [ebp+hObject]  +
call ds:DeviceIoControl  +
test eax eax +
jnz loc_1002E60  +
call ds:GetLastError  +
cmp eax edi +
jle loc_1002E58  +
and eax 0FFFFh +
or eax 80070000h +
push eax  +
call sub_100E412  +
jmp loc_1002E78  +
push 40002821h  +
call sub_100E4FD  +
mov esi edi +
jmp loc_1002E78  +
push 4000281Bh  +
call sub_100E4FD  +
pop ecx  +
push [ebp+hObject]  +
call ds:CloseHandle  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100F411  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 664h +
mov eax dword_1011584 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push edi  +
mov edi [ebp+arg_0] +
xor ebx ebx +
mov eax edi +
mov [ebp+var_638] edi +
mov [ebp+var_634] ebx +
mov [ebp+var_62D] bl +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_1002ED0  +
sub eax edx +
sar eax 1 +
add eax 4 +
cmp eax 104h +
jbe loc_1002F02  +
push 400027EAh  +
call sub_100E4FD  +
pop ecx  +
mov [ebp+var_634] 1 +
jmp loc_10030FC  +
push esi  +
push offset a_  +
mov esi 108h +
lea eax [ebp+FileName] +
push esi  +
push eax  +
call wcscpy_s  +
push edi  +
lea eax [ebp+FileName] +
push esi  +
push eax  +
call wcscat_s  +
add esp 18h +
push ebx  +
push ebx  +
push 3  +
push ebx  +
push 3  +
push 80000000h  +
lea eax [ebp+FileName] +
push eax  +
call ds:CreateFileW  +
mov [ebp+hObject] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1002F6B  +
call ds:GetLastError  +
push eax  +
call sub_100E412  +
pop ecx  +
mov [ebp+var_634] 1 +
jmp loc_10030FB  +
push ebx  +
lea ecx [ebp+BytesReturned] +
push ecx  +
push 10h  +
lea ecx [ebp+OutBuffer] +
push ecx  +
push 10h  +
lea ecx [ebp+InBuffer] +
push ecx  +
xor edi edi +
push 9023Ch  +
inc edi  +
push eax  +
mov [ebp+var_660] edi +
mov [ebp+var_65C] edi +
call ds:DeviceIoControl  +
test eax eax +
jnz loc_1002FC1  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_10030E2  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_10030E2  +
push 105h  +
lea eax [ebp+Buffer] +
push eax  +
call ds:GetWindowsDirectoryW  +
test eax eax +
jz loc_10030DC  +
lea eax [ebp+Buffer] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_1002FE4  +
sub eax edx +
sar eax 1 +
cmp eax 2 +
jb loc_10030DC  +
mov ax [ebp+Buffer] +
mov word ptr [ebp+var_41C] ax +
mov ax [ebp-20Eh] +
mov word ptr [ebp+var_41C+2] ax +
xor eax eax +
mov [ebp+var_418] ax +
lea eax [ebp-639h] +
push eax  +
call sub_1002806  +
mov esi eax +
cmp [ebp+OutBuffer] edi +
jnz loc_100303D  +
push 40002822h  +
jmp loc_1003042  +
push 40002823h  +
call sub_100E4FD  +
pop ecx  +
push esi  +
call sub_1002942  +
mov ecx [ebp+var_638] +
lea eax [ebp+var_41C] +
mov dx [ecx] +
cmp dx [eax] +
jnz loc_1003080  +
cmp dx bx +
jz loc_100307C  +
mov dx [ecx+2] +
cmp dx [eax+2] +
jnz loc_1003080  +
add ecx 4 +
add eax 4 +
cmp dx bx +
jnz loc_100305A  +
xor eax eax +
jmp loc_1003085  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax ebx +
jnz loc_1003090  +
mov [ebp+var_62D] 1 +
cmp esi ebx +
jz loc_10030CF  +
cmp esi 2 +
jnz loc_10030A1  +
cmp [ebp+OutBuffer] edi +
jnz loc_10030CF  +
push [ebp+var_638]  +
cmp esi 3 +
jnz loc_10030C8  +
cmp [ebp+var_62D] bl +
jz loc_10030C1  +
push 4000282Ah  +
call sub_100E4FD  +
pop ecx  +
jmp loc_10030EE  +
push 4000282Bh  +
jmp loc_10030B9  +
push 40002829h  +
jmp loc_10030B9  +
push [ebp+var_638]  +
push 40002828h  +
jmp loc_10030B9  +
call ds:GetLastError  +
push eax  +
call sub_100E412  +
mov [ebp+var_634] edi +
pop ecx  +
push [ebp+hObject]  +
call ds:CloseHandle  +
pop esi  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_634] +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_100F411  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
push esi  +
jz loc_100313D  +
xor esi esi +
inc esi  +
cmp [ebp+arg_4] esi +
jz loc_100313D  +
push 40002851h  +
call sub_100E4FD  +
pop ecx  +
mov eax esi +
jmp loc_10031C2  +
cmp [ebp+arg_0] 0 +
jz loc_1003188  +
mov eax [ebp+arg_0] +
mov ecx offset a? +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1003171  +
test dx dx +
jz loc_100316D  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1003171  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_100314B  +
xor eax eax +
jmp loc_1003176  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_100317E  +
xor esi esi +
jmp loc_100312B  +
push [ebp+arg_0]  +
call sub_1002E9D  +
jmp loc_10031C2  +
lea eax [ebp+arg_0+3] +
push eax  +
call sub_1002806  +
cmp byte ptr [ebp+arg_0+3] 0 +
mov esi eax +
jz loc_10031BA  +
cmp byte_1011130 0 +
push offset aDisable8dot3  +
jz loc_10031AE  +
push 4000285Dh  +
jmp loc_10031B3  +
push 4000285Eh  +
call sub_100E4FD  +
pop ecx  +
pop ecx  +
push esi  +
call sub_1002942  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 1 +
jz loc_1003200  +
cmp [ebp+arg_8] 2 +
jz loc_10031F0  +
push 4000281Ch  +
call sub_100E4FD  +
xor eax eax +
pop ecx  +
inc eax  +
jmp loc_10032CB  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1002D19  +
jmp loc_10032CB  +
mov ecx [ebp+arg_4] +
mov edx offset a? +
mov ax [ecx] +
cmp ax [edx] +
jnz loc_100322E  +
test ax ax +
jz loc_100322A  +
mov ax [ecx+2] +
cmp ax [edx+2] +
jnz loc_100322E  +
add ecx 4 +
add edx 4 +
test ax ax +
jnz loc_1003208  +
xor eax eax +
jmp loc_1003233  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_1003249  +
push 4000281Ch  +
call sub_100E4FD  +
pop ecx  +
xor eax eax +
jmp loc_10032CB  +
lea eax [ebp+arg_8+3] +
push eax  +
call sub_1002806  +
cmp byte ptr [ebp+arg_8+3] 0 +
jz loc_1003272  +
cmp byte_1011130 0 +
push offset aDisable8dot3  +
jz loc_10032AC  +
push 4000285Dh  +
call sub_100E4FD  +
pop ecx  +
pop ecx  +
push esi  +
push 0  +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+arg_4]  +
call sub_100E2C2  +
mov esi eax +
mov eax [ebp+arg_0] +
add esp 0Ch +
cmp word ptr [eax] 0 +
jnz loc_10032BC  +
cmp esi 0FFFFFFFFh +
jnz loc_100329F  +
call ds:_errno  +
cmp dword ptr [eax] 22h +
jz loc_10032BC  +
cmp esi 3 +
ja loc_10032BC  +
push esi  +
call sub_10028D8  +
jmp loc_10032CA  +
push 4000285Eh  +
call sub_100E4FD  +
pop ecx  +
jmp loc_10031E7  +
push 4000281Ch  +
call sub_100E4FD  +
xor eax eax +
pop ecx  +
inc eax  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+hKey] ebx +
mov [ebp+var_28] ebx +
mov [ebp+var_20] ebx +
mov [ebp+ms_exc.disabled] ebx +
mov edi [ebp+cbData] +
mov eax [edi] +
cmp eax ebx +
jz loc_1003328  +
push offset aDisable8dot3  +
push eax  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1003328  +
mov ecx [ebp+arg_0] +
cmp ecx 1 +
jle loc_1003316  +
mov eax [edi+4] +
jmp loc_1003318  +
xor eax eax +
dec ecx  +
push ecx  +
push eax  +
call sub_1003117  +
mov [ebp+var_20] eax +
jmp loc_10034BD  +
xor esi esi +
inc esi  +
cmp [ebp+arg_0] esi +
jz loc_100334C  +
push 4000281Ah  +
call sub_100E4FD  +
pop ecx  +
cmp [ebp+arg_0] ebx +
jz loc_10034BD  +
mov [ebp+var_20] esi +
jmp loc_10034BD  +
xor esi esi +
mov [ebp+var_30] esi +
cmp esi 0Ch +
jnb loc_1003377  +
mov eax esi +
imul eax eax +
push off_1011000[eax]  +
push dword ptr [edi]  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1003372  +
inc esi  +
jmp loc_100334E  +
cmp esi 0Ch +
jb loc_100338E  +
push 4000281Ah  +
call sub_100E4FD  +
pop ecx  +
mov [ebp+var_20] 1 +
jmp loc_10034BD  +
imul esi esi +
push offset aSymlinkevaluat  +
push off_1011000[esi]  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_10033B2  +
call near ptr dword_1002524+16h  +
jmp loc_1003320  +
cmp byte_1011010[esi] bl +
jz loc_1003437  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push ebx  +
push offset SubKey  +
push 80000002h  +
call ds:RegOpenKeyExW  +
mov [ebp+var_24] eax +
cmp eax ebx +
jnz loc_1003437  +
mov [ebp+cbData] 4 +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
push ebx  +
push ebx  +
push off_1011004[esi]  +
push [ebp+hKey]  +
call ds:RegQueryValueExW  +
mov [ebp+var_24] eax +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov [ebp+hKey] ebx +
cmp [ebp+var_24] ebx +
jnz loc_1003437  +
mov [ebp+var_28] 1 +
push off_1011000[esi]  +
cmp byte_1011130 bl +
jz loc_100342B  +
push 4000285Dh  +
jmp loc_1003430  +
push 4000285Eh  +
call sub_100E4FD  +
pop ecx  +
pop ecx  +
cmp [ebp+var_28] ebx +
jnz loc_100348E  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push ebx  +
mov edi offset aSystemCurrentc +
push edi  +
push 80000002h  +
call ds:RegOpenKeyExW  +
mov [ebp+var_24] eax +
cmp eax ebx +
jz loc_100346B  +
push edi  +
push eax  +
call sub_100E412  +
pop ecx  +
jmp loc_1003381  +
mov [ebp+cbData] 4 +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
push ebx  +
push ebx  +
push off_1011004[esi]  +
push [ebp+hKey]  +
call ds:RegQueryValueExW  +
mov [ebp+var_24] eax +
cmp [ebp+var_24] ebx +
jz loc_10034A7  +
push off_1011000[esi]  +
push 40002776h  +
call sub_100E4FD  +
pop ecx  +
pop ecx  +
jmp loc_10034BD  +
push dword ptr [ebp+Data]  +
push off_1011000[esi]  +
push 40002775h  +
call sub_100E4FD  +
add esp 0Ch +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call sub_10034D6  +
mov eax [ebp+var_20] +
call __SEH_epilog4  +
retn 8  +
***
cmp [ebp-1Ch] ebx +
jz locret_10034E4  +
push dword ptr [ebp-1Ch]  +
call ds:RegCloseKey  +
retn   +
***
push offset dword_100FAF8  +
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp-20h] ebx +
mov [ebp-1Ch] ebx +
mov [ebp-4] ebx +
mov esi [ebp+0Ch] +
mov eax [esi] +
cmp eax ebx +
jz loc_100354C  +
push offset aSymlinkevaluat  +
push eax  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100354C  +
cmp dword ptr [ebp+8] 2 +
jge loc_100353B  +
push 4000281Bh  +
call sub_100E4FD  +
pop ecx  +
cmp [ebp+8] ebx +
jz loc_1003732  +
jmp loc_100372B  +
push esi  +
push dword ptr [ebp+8]  +
call near ptr dword_1002668+2  +
mov [ebp-1Ch] eax +
jmp loc_1003732  +
mov eax [esi] +
cmp eax ebx +
jz loc_1003596  +
push offset aDisable8dot3  +
push eax  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1003596  +
mov eax [ebp+8] +
cmp eax 3 +
jnz loc_1003576  +
push 2  +
push dword ptr [esi+8]  +
push dword ptr [esi+4]  +
jmp loc_1003581  +
cmp eax 2 +
jnz loc_1003588  +
push 1  +
push dword ptr [esi+4]  +
push ebx  +
call sub_10031CC  +
jmp loc_1003544  +
***
dec eax  +
push eax  +
push ebx  +
push ebx  +
call sub_10031CC  +
jmp loc_1003732  +
cmp dword ptr [ebp+8] 2 +
jnz loc_1003522  +
mov [ebp-24h] ebx +
cmp dword ptr [ebp-24h] 0Ch +
jnb loc_10035CD  +
mov eax [esi] +
cmp eax ebx +
jz loc_10035C4  +
mov ecx [ebp-24h] +
imul ecx ecx +
push off_1011000[ecx]  +
push eax  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10035C9  +
inc dword ptr [ebp-24h]  +
jmp loc_100359F  +
***
cmp dword ptr [ebp-24h] 0Ch +
jz loc_1003720  +
mov edi ds:_errno +
call edi  +
mov [eax] ebx +
push ebx  +
lea eax [ebp-28h] +
push eax  +
push dword ptr [esi+4]  +
call sub_100E2C2  +
add esp 0Ch +
mov [ebp+0Ch] eax +
mov ecx [ebp-28h] +
cmp [ecx] bx +
jnz loc_1003720  +
cmp eax 0FFFFFFFFh +
jnz loc_100360F  +
call edi  +
cmp dword ptr [eax] 22h +
jz loc_1003720  +
mov eax [ebp+0Ch] +
mov esi [ebp-24h] +
imul esi esi +
cmp eax dword_101100C[esi] +
ja loc_1003720  +
cmp eax dword_1011008[esi] +
jb loc_1003720  +
cmp byte_1011010[esi] bl +
jz loc_100369F  +
lea eax [ebp-20h] +
push eax  +
push 20019h  +
push ebx  +
push offset SubKey  +
push 80000002h  +
call ds:RegOpenKeyExW  +
cmp eax ebx +
jnz loc_100369F  +
mov dword ptr [ebp-2Ch] 4 +
lea eax [ebp-2Ch] +
push eax  +
lea eax [ebp-30h] +
push eax  +
push ebx  +
push ebx  +
push off_1011004[esi]  +
push dword ptr [ebp-20h]  +
call ds:RegQueryValueExW  +
mov edi eax +
push dword ptr [ebp-20h]  +
call ds:RegCloseKey  +
mov [ebp-20h] ebx +
cmp edi ebx +
jnz loc_100369F  +
push off_1011000[esi]  +
cmp byte_1011130 bl +
jz loc_10036C4  +
push 4000285Dh  +
call sub_100E4FD  +
pop ecx  +
pop ecx  +
lea eax [ebp-20h] +
push eax  +
push 2  +
push ebx  +
mov edi offset aSystemCurrentc +
push edi  +
push 80000002h  +
call ds:RegOpenKeyExW  +
cmp eax ebx +
jz loc_10036D1  +
push edi  +
push eax  +
call sub_100E412  +
jmp loc_10036CE  +
push 4000285Eh  +
call sub_100E4FD  +
pop ecx  +
jmp loc_100372A  +
push 4  +
lea eax [ebp+0Ch] +
push eax  +
push 4  +
push ebx  +
push off_1011004[esi]  +
push dword ptr [ebp-20h]  +
call ds:RegSetValueExW  +
cmp eax ebx +
jz loc_10036F5  +
push off_1011004[esi]  +
jmp loc_10036BC  +
***
cmp byte_1011011[esi] bl +
jz loc_1003708  +
push 40002853h  +
call sub_100E4FD  +
pop ecx  +
push dword ptr [ebp+0Ch]  +
push off_1011000[esi]  +
push 40002775h  +
call sub_100E4FD  +
add esp 0Ch +
jmp loc_1003732  +
push 4000281Bh  +
call sub_100E4FD  +
pop ecx  +
mov dword ptr [ebp-1Ch] 1 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_100374B  +
mov eax [ebp-1Ch] +
call __SEH_epilog4  +
retn 8  +
***
cmp [ebp-20h] ebx +
jz locret_1003759  +
push dword ptr [ebp-20h]  +
call ds:RegCloseKey  +
retn   +
***
cmp dword ptr [ebp-23Ch] 0FFFFFFFFh +
jz locret_10038FA  +
push dword ptr [ebp-23Ch]  +
call ds:CloseHandle  +
retn   +
***
call __SEH_prolog4_GS  +
cmp dword ptr [ebp-23Ch] 0FFFFFFFFh +
jz locret_10039F2  +
push dword ptr [ebp-23Ch]  +
call ds:CloseHandle  +
retn   +
***
pop ecx  +
xor eax eax +
retn 8  +
***
call sub_100E5AC  +
jmp loc_1003A71  +
***
push 8  +
call sub_100E412  +
jmp loc_1003AAF  +
***
mov edi [esi] +
mov eax edi +
shr eax 1 +
push eax  +
lea eax [esi+4] +
push eax  +
call sub_100DA40  +
push offset WideCharStr  +
call sub_100E3E7  +
add edi 0Dh +
and edi 0FFFFFFF8h +
add esi edi +
mov [ebp-28Ch] esi +
inc dword ptr [ebp-27Ch]  +
jmp loc_1003BA3  +
***
cmp dword ptr [ebp-278h] 0FFFFFFFFh +
jz loc_1003C37  +
push dword ptr [ebp-278h]  +
call ds:CloseHandle  +
push dword ptr [ebp-274h]  +
mov esi ds:free +
call esi  +
push dword ptr [ebp-280h]  +
call esi  +
pop ecx  +
pop ecx  +
retn   +
***
cmp dword ptr [ebp-20h] 0FFFFFFFFh +
jz loc_1003E2C  +
push dword ptr [ebp-20h]  +
call ds:CloseHandle  +
cmp dword ptr [ebp-24h] 0 +
jz locret_1003E3C  +
push dword ptr [ebp-24h]  +
call ds:free  +
pop ecx  +
retn   +
***
push offset dword_100FB98  +
call __SEH_prolog4  +
or dword ptr [ebp-24h] 0FFFFFFFFh +
xor esi esi +
mov [ebp-28h] esi +
mov [ebp-30h] esi +
mov [ebp-2Ch] esi +
mov [ebp-1Ch] esi +
mov [ebp-4] esi +
cmp dword ptr [ebp+8] 3 +
jz loc_1003E82  +
push 4000274Dh  +
call sub_100E4FD  +
pop ecx  +
cmp [ebp+8] esi +
jz loc_100405A  +
jmp loc_1004053  +
mov ebx [ebp+0Ch] +
push dword ptr [ebx+8]  +
call sub_100DDAF  +
mov [ebp-28h] eax +
cmp eax esi +
jnz loc_1003E9E  +
call sub_100E5AC  +
jmp loc_1004053  +
push eax  +
call sub_100E5BF  +
test eax eax +
jnz loc_1003EB2  +
push 4000274Ch  +
jmp loc_100404D  +
push 7  +
push offset aOffset  +
push dword ptr [ebx]  +
call ds:_wcsnicmp  +
add esp 0Ch +
test eax eax +
jnz loc_1004048  +
mov edi ds:_errno +
call edi  +
and dword ptr [eax] 0 +
push 0  +
lea eax [ebp+0Ch] +
push eax  +
mov eax [ebx] +
add eax 0Eh +
push eax  +
call sub_100E0D7  +
add esp 0Ch +
mov [ebp-3Ch] eax +
mov [ebp-38h] edx +
mov ecx [ebp+0Ch] +
cmp word ptr [ecx] 0 +
jnz loc_1004048  +
and eax edx +
cmp eax 0FFFFFFFFh +
jnz loc_1003F10  +
call edi  +
cmp dword ptr [eax] 22h +
jz loc_1004048  +
push 7  +
push offset aLength  +
push dword ptr [ebx+4]  +
call ds:_wcsnicmp  +
add esp 0Ch +
test eax eax +
jnz loc_1004048  +
call edi  +
and dword ptr [eax] 0 +
push 0  +
lea eax [ebp+0Ch] +
push eax  +
mov eax [ebx+4] +
add eax 0Eh +
push eax  +
call sub_100E0D7  +
add esp 0Ch +
mov ebx eax +
mov [ebp-40h] edx +
mov eax [ebp+0Ch] +
cmp word ptr [eax] 0 +
jnz loc_1004048  +
mov eax ebx +
and eax edx +
cmp eax 0FFFFFFFFh +
jnz loc_1003F6B  +
call edi  +
cmp dword ptr [eax] 22h +
jz loc_1004048  +
push 0  +
push 80h  +
push 3  +
push 0  +
push 3  +
push 80000000h  +
push dword ptr [ebp-28h]  +
call ds:CreateFileW  +
mov [ebp-24h] eax +
cmp eax 0FFFFFFFFh +
jz loc_1003E94  +
push 10h  +
call ds:malloc  +
mov esi eax +
mov [ebp-30h] esi +
push 10h  +
push 20h  +
call ds:calloc  +
add esp 0Ch +
mov [ebp-2Ch] eax +
test esi esi +
jz loc_100403F  +
test eax eax +
jz loc_100403F  +
mov ecx [ebp-3Ch] +
mov [esi] ecx +
mov ecx [ebp-38h] +
mov [esi+4] ecx +
mov [esi+8] ebx +
mov ecx [ebp-40h] +
mov [esi+0Ch] ecx +
push 0  +
lea ecx [ebp-34h] +
push ecx  +
push 200h  +
push eax  +
push 10h  +
push esi  +
push 940CFh  +
push dword ptr [ebp-24h]  +
call ds:DeviceIoControl  +
test eax eax +
jz loc_1003E94  +
mov ebx [ebp-34h] +
shr ebx 4 +
and dword ptr [ebp-20h] 0 +
cmp [ebp-20h] ebx +
jge loc_100405A  +
mov eax [ebp-20h] +
shl eax 4 +
mov ecx [ebp-2Ch] +
lea edi [eax+ecx] +
push dword ptr [edi+0Ch]  +
push dword ptr [edi+8]  +
call sub_100DE45  +
push eax  +
push dword ptr [edi+4]  +
push dword ptr [edi]  +
call sub_100DE45  +
push eax  +
push dword ptr [ebp-20h]  +
push 4000274Eh  +
call sub_100E4FD  +
add esp 10h +
inc dword ptr [ebp-20h]  +
jmp loc_1004002  +
***
push 8  +
call sub_100E412  +
jmp loc_1004052  +
push 4000274Dh  +
call sub_100E4FD  +
pop ecx  +
mov dword ptr [ebp-1Ch] 1 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1004074  +
mov eax [ebp-1Ch] +
call __SEH_epilog4  +
retn 8  +
***
cmp dword ptr [ebp-24h] 0FFFFFFFFh +
jz loc_1004083  +
push dword ptr [ebp-24h]  +
call ds:CloseHandle  +
push dword ptr [ebp-28h]  +
mov edi ds:free +
call edi  +
push esi  +
call edi  +
push dword ptr [ebp-2Ch]  +
call edi  +
add esp 0Ch +
retn   +
***
cmp dword ptr [ebp-20h] 0FFFFFFFFh +
jz loc_1004214  +
push dword ptr [ebp-20h]  +
call ds:CloseHandle  +
push dword ptr [ebp-24h]  +
call ds:free  +
pop ecx  +
retn   +
***
xor eax eax +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset ModuleName  +
call ds:GetModuleHandleW  +
cmp eax 0FFFFFFFFh +
jz loc_1004253  +
push offset ProcName  +
push eax  +
call ds:GetProcAddress  +
test eax eax +
jnz loc_1004258  +
mov eax offset loc_1004224 +
mov off_1011134 eax +
pop ebp  +
jmp eax  +
***
cmp dword ptr [ebp-20h] 0FFFFFFFFh +
jz loc_1004337  +
push dword ptr [ebp-20h]  +
call ds:CloseHandle  +
push dword ptr [ebp-24h]  +
call ds:free  +
pop ecx  +
retn   +
***
and (byte_1010FFF-1011007h)[eax] ch +
sti   +
add [ecx] al +
call __SEH_prolog4  +
or dword ptr [ebp-24h] 0FFFFFFFFh +
xor ebx ebx +
mov [ebp-20h] ebx +
xor edi edi +
inc edi  +
mov [ebp-28h] edi +
mov [ebp-1Ch] ebx +
mov [ebp-4] ebx +
cmp dword ptr [ebp+8] 2 +
jz loc_100438A  +
push 400027B4h  +
call sub_100E4FD  +
pop ecx  +
cmp [ebp+8] ebx +
jz loc_100444F  +
mov [ebp-1Ch] edi +
jmp loc_100444F  +
mov esi [ebp+0Ch] +
push dword ptr [esi]  +
call sub_100DDAF  +
mov [ebp-20h] eax +
cmp eax ebx +
jnz loc_10043A2  +
call sub_100E5AC  +
jmp loc_1004382  +
***
mov edi ds:_errno +
call edi  +
mov [eax] ebx +
push ebx  +
lea eax [ebp+0Ch] +
push eax  +
push dword ptr [esi+4]  +
call sub_100E0D7  +
add esp 0Ch +
mov [ebp-30h] eax +
mov [ebp-2Ch] edx +
mov ecx [ebp+0Ch] +
cmp [ecx] bx +
jnz loc_1004439  +
and eax edx +
cmp eax 0FFFFFFFFh +
jnz loc_10043D8  +
call edi  +
cmp dword ptr [eax] 22h +
jz loc_1004439  +
push ebx  +
push 80h  +
xor esi esi +
inc esi  +
push esi  +
push ebx  +
push ebx  +
push 0D0000000h  +
push dword ptr [ebp-20h]  +
call ds:CreateFileW  +
mov edi eax +
mov [ebp-24h] edi +
cmp edi 0FFFFFFFFh +
jnz loc_1004406  +
call sub_100E5AC  +
mov [ebp-1Ch] esi +
jmp loc_100444F  +
mov [ebp-28h] ebx +
push ebx  +
push ebx  +
push dword ptr [ebp-2Ch]  +
push dword ptr [ebp-30h]  +
push edi  +
call ds:SetFilePointerEx  +
test eax eax +
jz loc_10043FC  +
push edi  +
call ds:SetEndOfFile  +
test eax eax +
jz loc_10043FC  +
mov [ebp-28h] esi +
push dword ptr [ebp-20h]  +
push 400027BBh  +
call sub_100E4FD  +
jmp loc_100444D  +
push dword ptr [esi+4]  +
push 400027B4h  +
call sub_100E4FD  +
mov dword ptr [ebp-1Ch] 1 +
pop ecx  +
pop ecx  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1004468  +
mov eax [ebp-1Ch] +
call __SEH_epilog4  +
retn 8  +
***
cmp dword ptr [ebp-24h] 0FFFFFFFFh +
jz loc_1004477  +
push dword ptr [ebp-24h]  +
call ds:CloseHandle  +
cmp [ebp-28h] ebx +
jnz loc_1004485  +
push dword ptr [ebp-20h]  +
call ds:DeleteFileW  +
push dword ptr [ebp-20h]  +
call ds:free  +
pop ecx  +
retn   +
***
call sub_100E5AC  +
jmp loc_10044C5  +
***
push eax  +
call ds:RtlNtStatusToDosError  +
push eax  +
call ds:SetLastError  +
jmp loc_10044EC  +
***
cmp dword ptr [ebp-20h] 0FFFFFFFFh +
jz locret_1004553  +
push dword ptr [ebp-20h]  +
call ds:CloseHandle  +
retn   +
***
call __SEH_prolog4  +
or dword ptr [ebp-28h] 0FFFFFFFFh +
or dword ptr [ebp-24h] 0FFFFFFFFh +
xor ebx ebx +
mov [ebp-20h] ebx +
mov dword ptr [ebp-2Ch] 104h +
mov [ebp-1Ch] ebx +
mov [ebp-4] ebx +
cmp dword ptr [ebp+8] 2 +
jz loc_100459E  +
push 40002859h  +
call sub_100E4FD  +
pop ecx  +
cmp [ebp+8] ebx +
jz loc_1004686  +
jmp loc_100467F  +
mov dword ptr [ebp-48h] 18h +
mov [ebp-44h] ebx +
mov esi ds:_errno +
call esi  +
mov [eax] ebx +
mov edi [ebp+0Ch] +
push ebx  +
lea eax [ebp-30h] +
push eax  +
push dword ptr [edi+4]  +
call sub_100E0D7  +
add esp 0Ch +
mov [ebp-40h] eax +
mov [ebp-3Ch] edx +
mov ecx [ebp-30h] +
cmp [ecx] bx +
jnz loc_1004670  +
and eax edx +
cmp eax 0FFFFFFFFh +
jnz loc_10045E9  +
call esi  +
cmp dword ptr [eax] 22h +
jz loc_1004670  +
push ebx  +
push 2000080h  +
push 3  +
push ebx  +
push ebx  +
mov esi 80h +
push esi  +
push dword ptr [edi]  +
call ds:CreateFileW  +
mov [ebp-28h] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1004610  +
call sub_100E5AC  +
jmp loc_100467F  +
push esi  +
push ebx  +
push ebx  +
push esi  +
lea ecx [ebp-48h] +
push ecx  +
push eax  +
call ds:OpenFileById  +
mov [ebp-24h] eax +
cmp eax 0FFFFFFFFh +
jz loc_1004609  +
mov esi [ebp-2Ch] +
inc esi  +
cmp [ebp-1Ch] ebx +
jz loc_100463A  +
push dword ptr [ebp-1Ch]  +
call ds:free  +
pop ecx  +
lea eax [esi+esi] +
push eax  +
call ds:malloc  +
pop ecx  +
mov [ebp-1Ch] eax +
push ebx  +
push esi  +
push eax  +
push dword ptr [ebp-24h]  +
call ds:GetFinalPathNameByHandleW  +
mov [ebp-2Ch] eax +
cmp eax ebx +
jz loc_1004609  +
cmp eax esi +
jnb loc_1004627  +
push dword ptr [ebp-1Ch]  +
push 4000285Ch  +
call sub_100E4FD  +
pop ecx  +
pop ecx  +
jmp loc_1004686  +
push dword ptr [edi+4]  +
push 40002859h  +
call sub_100E4FD  +
pop ecx  +
pop ecx  +
mov dword ptr [ebp-20h] 1 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_100469F  +
mov eax [ebp-20h] +
call __SEH_epilog4  +
retn 8  +
***
cmp dword ptr [ebp-28h] 0FFFFFFFFh +
jz loc_10046AE  +
push dword ptr [ebp-28h]  +
call ds:CloseHandle  +
cmp dword ptr [ebp-24h] 0FFFFFFFFh +
jz loc_10046BD  +
push dword ptr [ebp-24h]  +
call ds:CloseHandle  +
cmp [ebp-1Ch] ebx +
jz locret_10046CC  +
push dword ptr [ebp-1Ch]  +
call ds:free  +
pop ecx  +
retn   +
***
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+14h] +
xor eax eax +
xor edx edx +
test esi esi +
jbe loc_100470F  +
mov ecx [ebp+10h] +
push edi  +
mov edi [ebp+8] +
add ecx edi +
mov edi [ecx] +
add eax edi +
adc edx 0 +
add ecx [ebp+0Ch] +
dec esi  +
jnz loc_1004701  +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
push 8  +
call sub_100E412  +
jmp loc_100473F  +
***
call sub_100E5AC  +
jmp loc_1004740  +
***
push edi  +
push ecx  +
call sub_100DA40  +
push offset asc_10019EC  +
call sub_100E3E7  +
lea esi [esi+edi+1] +
jmp loc_1004795  +
***
cmp dword ptr [ebp-1Ch] 0 +
jz locret_10047F6  +
push dword ptr [ebp-1Ch]  +
call ds:free  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 1 +
jz loc_100481C  +
push 40002713h  +
call sub_100E4FD  +
xor eax eax +
cmp [ebp+arg_0] eax +
pop ecx  +
setnz al  +
jmp loc_1004875  +
push esi  +
mov esi [ebp+arg_4] +
push dword ptr [esi]  +
call ds:GetDriveTypeW  +
dec eax  +
push dword ptr [esi]  +
jz loc_1004866  +
dec eax  +
jz loc_100485F  +
dec eax  +
jz loc_1004858  +
dec eax  +
jz loc_1004851  +
dec eax  +
jz loc_100484A  +
dec eax  +
jz loc_1004843  +
push 40002714h  +
jmp loc_100486B  +
push 4000271Ah  +
jmp loc_100486B  +
push 40002719h  +
jmp loc_100486B  +
push 40002718h  +
jmp loc_100486B  +
push 40002717h  +
jmp loc_100486B  +
push 40002716h  +
jmp loc_100486B  +
push 40002715h  +
call sub_100E4FD  +
pop ecx  +
pop ecx  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
push 4000271Bh  +
call sub_100E4FD  +
pop ecx  +
cmp [ebp+8] ebx +
jz loc_10048BF  +
mov [ebp-28h] esi +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1004B2B  +
mov eax [ebp-28h] +
call __SEH_epilog4_GS  +
retn 8  +
***
push 8  +
call sub_100E412  +
pop ecx  +
mov dword ptr [ebp-28h] 1 +
jmp loc_10048BF  +
***
call sub_100E5AC  +
jmp loc_10048F4  +
***
call esi  +
push dword ptr [ebp-34h]  +
call esi  +
push dword ptr [ebp-38h]  +
call esi  +
push dword ptr [ebp-2Ch]  +
call esi  +
push dword ptr [ebp-44h]  +
call esi  +
add esp 14h +
retn   +
***
push 40002751h  +
call sub_100E4FD  +
pop ecx  +
cmp [ebp+8] esi +
jz loc_1004C09  +
jmp loc_1004C03  +
call sub_100E5AC  +
mov [ebp-2A0h] ebx +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1004CF8  +
mov eax [ebp-2A0h] +
call __SEH_epilog4_GS  +
retn 8  +
***
cmp dword ptr [ebp-2A4h] 0FFFFFFFFh +
jz locret_1004D0D  +
push dword ptr [ebp-2A4h]  +
call ds:CloseHandle  +
retn   +
***
push offset dword_100FCB8  +
call __SEH_prolog4_GS  +
mov eax [ebp+0Ch] +
or dword ptr [ebp-260h] 0FFFFFFFFh +
xor edi edi +
xor ebx ebx +
mov [ebp-264h] ebx +
mov [ebp-268h] edi +
mov [ebp-238h] edi +
mov [ebp-4] edi +
xor esi esi +
inc esi  +
cmp [ebp+8] esi +
jz loc_1004D6C  +
push 40002744h  +
call sub_100E4FD  +
pop ecx  +
cmp [ebp+8] edi +
jz loc_1005332  +
mov [ebp-238h] esi +
jmp loc_1005332  +
lea ecx [ebp-238h] +
push ecx  +
push 4000274Ch  +
push offset sub_100E5BF  +
push 10Ch  +
lea ecx [ebp-234h] +
push ecx  +
push dword ptr [eax]  +
call sub_100E771  +
cmp eax edi +
jz loc_1005332  +
push edi  +
push 80h  +
push 3  +
push edi  +
push 3  +
push 80000000h  +
push eax  +
call ds:CreateFileW  +
mov [ebp-260h] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1004DCE  +
call sub_100E5AC  +
mov dword ptr [ebp-238h] 1 +
jmp loc_1005332  +
lea eax [ebp-25Ch] +
push eax  +
call ds:GetSystemInfo  +
mov esi [ebp-248h] +
imul esi esi +
cmp esi [ebp-248h] +
jb loc_1004DBA  +
push esi  +
call ds:malloc  +
pop ecx  +
mov ebx eax +
mov [ebp-264h] ebx +
cmp ebx edi +
jnz loc_1004E0D  +
push 8  +
call sub_100E412  +
pop ecx  +
jmp loc_1004DBF  +
***
push edi  +
lea eax [ebp-26Ch] +
push eax  +
push esi  +
push ebx  +
push edi  +
push edi  +
push 90060h  +
push dword ptr [ebp-260h]  +
call ds:DeviceIoControl  +
cmp eax edi +
jz loc_1004DBA  +
movzx eax word ptr [ebx] +
dec eax  +
jz loc_1004E4F  +
dec eax  +
jnz loc_1004E63  +
push 40002748h  +
call sub_100E4FD  +
pop ecx  +
mov [ebp-268h] ebx +
mov esi 90h +
jmp loc_1004E69  +
push 40002749h  +
call sub_100E4FD  +
pop ecx  +
mov edi ebx +
mov esi 140h +
jmp loc_1004E69  +
mov esi [ebp-26Ch] +
push dword ptr [ebp-248h]  +
push 34h  +
push esi  +
push ebx  +
call near ptr dword_10046D0+17h  +
push edx  +
push eax  +
call sub_100DE06  +
push eax  +
push dword ptr [ebp-248h]  +
push 30h  +
push esi  +
push ebx  +
call near ptr dword_10046D0+17h  +
push edx  +
push eax  +
call sub_100DE06  +
push eax  +
push dword ptr [ebp-248h]  +
push 2Ch  +
push esi  +
push ebx  +
call near ptr dword_10046D0+17h  +
push edx  +
push eax  +
call sub_100DE06  +
push eax  +
push dword ptr [ebp-248h]  +
push 28h  +
push esi  +
push ebx  +
call near ptr dword_10046D0+17h  +
push edx  +
push eax  +
call sub_100DE06  +
push eax  +
push dword ptr [ebp-248h]  +
push 24h  +
push esi  +
push ebx  +
call near ptr dword_10046D0+17h  +
push edx  +
push eax  +
call sub_100DE06  +
push eax  +
push dword ptr [ebp-248h]  +
push 20h  +
push esi  +
push ebx  +
call near ptr dword_10046D0+17h  +
push edx  +
push eax  +
call sub_100DE06  +
push eax  +
push dword ptr [ebp-248h]  +
push 1Ch  +
push esi  +
push ebx  +
call near ptr dword_10046D0+17h  +
push edx  +
push eax  +
call sub_100DE06  +
push eax  +
push dword ptr [ebp-248h]  +
push 18h  +
push esi  +
push ebx  +
call near ptr dword_10046D0+17h  +
push edx  +
push eax  +
call sub_100DE06  +
push eax  +
push dword ptr [ebp-248h]  +
push 14h  +
push esi  +
push ebx  +
call near ptr dword_10046D0+17h  +
push edx  +
push eax  +
call sub_100DE06  +
push eax  +
push dword ptr [ebp-248h]  +
push 10h  +
push esi  +
push ebx  +
call near ptr dword_10046D0+17h  +
push edx  +
push eax  +
call sub_100DE06  +
push eax  +
push dword ptr [ebp-248h]  +
push 0Ch  +
push esi  +
push ebx  +
call near ptr dword_10046D0+17h  +
push edx  +
push eax  +
call sub_100DE06  +
push eax  +
push dword ptr [ebp-248h]  +
push 8  +
push esi  +
push ebx  +
call near ptr dword_10046D0+17h  +
push edx  +
push eax  +
call sub_100DE06  +
push eax  +
push 40002745h  +
call sub_100E4FD  +
add esp 34h +
movzx eax word ptr [ebx] +
dec eax  +
jz loc_1005082  +
dec eax  +
jnz loc_1005332  +
push dword ptr [ebp-248h]  +
push 58h  +
push esi  +
mov edi [ebp-268h] +
push edi  +
call near ptr dword_10046D0+17h  +
push edx  +
push eax  +
call sub_100DE06  +
push eax  +
push dword ptr [ebp-248h]  +
push 54h  +
push esi  +
push edi  +
call near ptr dword_10046D0+17h  +
push edx  +
push eax  +
call sub_100DE06  +
push eax  +
push dword ptr [ebp-248h]  +
push 50h  +
push esi  +
push edi  +
call near ptr dword_10046D0+17h  +
push edx  +
push eax  +
call sub_100DE06  +
push eax  +
push dword ptr [ebp-248h]  +
push 4Ch  +
push esi  +
push edi  +
call near ptr dword_10046D0+17h  +
push edx  +
push eax  +
call sub_100DE06  +
push eax  +
push dword ptr [ebp-248h]  +
push 48h  +
push esi  +
push edi  +
call near ptr dword_10046D0+17h  +
push edx  +
push eax  +
call sub_100DE06  +
push eax  +
push dword ptr [ebp-248h]  +
push 44h  +
push esi  +
push edi  +
call near ptr dword_10046D0+17h  +
push edx  +
push eax  +
call sub_100DE06  +
push eax  +
push dword ptr [ebp-248h]  +
push 40h  +
push esi  +
push edi  +
call near ptr dword_10046D0+17h  +
push edx  +
push eax  +
call sub_100DE06  +
push eax  +
push dword ptr [ebp-248h]  +
push 3Ch  +
push esi  +
push edi  +
call near ptr dword_10046D0+17h  +
push edx  +
push eax  +
call sub_100DE06  +
push eax  +
push dword ptr [ebp-248h]  +
push 38h  +
push esi  +
push edi  +
call near ptr dword_10046D0+17h  +
push edx  +
push eax  +
call sub_100DE06  +
push eax  +
push 40002746h  +
call sub_100E4FD  +
add esp 28h +
jmp loc_1005332  +
push dword ptr [ebp-248h]  +
push 38h  +
push esi  +
push edi  +
call near ptr dword_10046D0+17h  +
push edx  +
push eax  +
call sub_100DE06  +
push eax  +
push dword ptr [ebp-248h]  +
push 0E0h  +
push esi  +
push edi  +
call near ptr dword_10046D0+17h  +
push edx  +
push eax  +
call sub_100DE06  +
push eax  +
push dword ptr [ebp-248h]  +
push 0DCh  +
push esi  +
push edi  +
call near ptr dword_10046D0+17h  +
push edx  +
push eax  +
call sub_100DE06  +
push eax  +
push dword ptr [ebp-248h]  +
push 0D8h  +
push esi  +
push edi  +
call near ptr dword_10046D0+17h  +
push edx  +
push eax  +
call sub_100DE06  +
push eax  +
push dword ptr [ebp-248h]  +
push 0D4h  +
push esi  +
push edi  +
call near ptr dword_10046D0+17h  +
push edx  +
push eax  +
call sub_100DE06  +
push eax  +
push dword ptr [ebp-248h]  +
push 0D0h  +
push esi  +
push edi  +
call near ptr dword_10046D0+17h  +
push edx  +
push eax  +
call sub_100DE06  +
push eax  +
push dword ptr [ebp-248h]  +
push 0CCh  +
push esi  +
push edi  +
call near ptr dword_10046D0+17h  +
push edx  +
push eax  +
call sub_100DE06  +
push eax  +
push dword ptr [ebp-248h]  +
push 0C8h  +
push esi  +
push edi  +
call near ptr dword_10046D0+17h  +
push edx  +
push eax  +
call sub_100DE06  +
push eax  +
push dword ptr [ebp-248h]  +
push 0C4h  +
push esi  +
push edi  +
call near ptr dword_10046D0+17h  +
push edx  +
push eax  +
call sub_100DE06  +
push eax  +
push dword ptr [ebp-248h]  +
push 0B0h  +
push esi  +
push edi  +
call near ptr dword_10046D0+17h  +
push edx  +
push eax  +
call sub_100DE06  +
push eax  +
push dword ptr [ebp-248h]  +
push 0ACh  +
push esi  +
push edi  +
call near ptr dword_10046D0+17h  +
push edx  +
push eax  +
call sub_100DE06  +
push eax  +
push dword ptr [ebp-248h]  +
push 0A8h  +
push esi  +
push edi  +
call near ptr dword_10046D0+17h  +
push edx  +
push eax  +
call sub_100DE06  +
push eax  +
push dword ptr [ebp-248h]  +
push 0A4h  +
push esi  +
push edi  +
call near ptr dword_10046D0+17h  +
push edx  +
push eax  +
call sub_100DE06  +
push eax  +
push dword ptr [ebp-248h]  +
push 94h  +
push esi  +
push edi  +
call near ptr dword_10046D0+17h  +
push edx  +
push eax  +
call sub_100DE06  +
push eax  +
push dword ptr [ebp-248h]  +
push 90h  +
push esi  +
push edi  +
call near ptr dword_10046D0+17h  +
push edx  +
push eax  +
call sub_100DE06  +
push eax  +
push dword ptr [ebp-248h]  +
push 8Ch  +
push esi  +
push edi  +
call near ptr dword_10046D0+17h  +
push edx  +
push eax  +
call sub_100DE06  +
push eax  +
push dword ptr [ebp-248h]  +
push 88h  +
push esi  +
push edi  +
call near ptr dword_10046D0+17h  +
push edx  +
push eax  +
call sub_100DE06  +
push eax  +
push dword ptr [ebp-248h]  +
push 84h  +
push esi  +
push edi  +
call near ptr dword_10046D0+17h  +
push edx  +
push eax  +
call sub_100DE06  +
push eax  +
push dword ptr [ebp-248h]  +
push 80h  +
push esi  +
push edi  +
call near ptr dword_10046D0+17h  +
push edx  +
push eax  +
call sub_100DE06  +
push eax  +
push dword ptr [ebp-248h]  +
push 7Ch  +
push esi  +
push edi  +
call near ptr dword_10046D0+17h  +
push edx  +
push eax  +
call sub_100DE06  +
push eax  +
push dword ptr [ebp-248h]  +
push 78h  +
push esi  +
push edi  +
call near ptr dword_10046D0+17h  +
push edx  +
push eax  +
call sub_100DE06  +
push eax  +
push dword ptr [ebp-248h]  +
push 64h  +
push esi  +
push edi  +
call near ptr dword_10046D0+17h  +
push edx  +
push eax  +
call sub_100DE06  +
push eax  +
push dword ptr [ebp-248h]  +
push 60h  +
push esi  +
push edi  +
call near ptr dword_10046D0+17h  +
push edx  +
push eax  +
call sub_100DE06  +
push eax  +
push dword ptr [ebp-248h]  +
push 4Ch  +
push esi  +
push edi  +
call near ptr dword_10046D0+17h  +
push edx  +
push eax  +
call sub_100DE06  +
push eax  +
push dword ptr [ebp-248h]  +
push 48h  +
push esi  +
push edi  +
call near ptr dword_10046D0+17h  +
push edx  +
push eax  +
call sub_100DE06  +
push eax  +
push dword ptr [ebp-248h]  +
push 44h  +
push esi  +
push edi  +
call near ptr dword_10046D0+17h  +
push edx  +
push eax  +
call sub_100DE06  +
push eax  +
push dword ptr [ebp-248h]  +
push 40h  +
push esi  +
push edi  +
call near ptr dword_10046D0+17h  +
push edx  +
push eax  +
call sub_100DE06  +
push eax  +
push 40002747h  +
call sub_100E4FD  +
add esp 70h +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1005352  +
mov eax [ebp-238h] +
call __SEH_epilog4_GS  +
retn 8  +
***
cmp dword ptr [ebp-260h] 0FFFFFFFFh +
jz loc_1005367  +
push dword ptr [ebp-260h]  +
call ds:CloseHandle  +
test ebx ebx +
jz locret_1005373  +
push ebx  +
call ds:free  +
pop ecx  +
retn   +
***
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor edi edi +
xor ebx ebx +
cmp dword ptr [ebp+8] 2 +
mov [ebp-4] edi +
jz loc_10053B6  +
push 400027B8h  +
call sub_100E4FD  +
pop ecx  +
cmp [ebp+8] edi +
jz loc_1005432  +
jmp loc_100542B  +
mov esi [ebp+0Ch] +
push dword ptr [esi]  +
call sub_100DDAF  +
mov ebx eax +
test ebx ebx +
jnz loc_10053CD  +
call sub_100E5AC  +
jmp loc_100542B  +
push dword ptr [esi+4]  +
call sub_100DDAF  +
mov edi eax +
test edi edi +
jz loc_10053C6  +
push ebx  +
call sub_100E5BF  +
test eax eax +
jz loc_1005420  +
push edi  +
call sub_100E5BF  +
test eax eax +
jz loc_1005420  +
push 0  +
push edi  +
push ebx  +
call ds:CreateHardLinkW  +
test eax eax +
jz loc_100540E  +
push edi  +
push ebx  +
push 400027B9h  +
call sub_100E4FD  +
add esp 0Ch +
jmp loc_1005432  +
call ds:GetLastError  +
cmp eax 11h +
jnz loc_10053C6  +
push 400027E3h  +
jmp loc_1005425  +
push 4000274Ch  +
call sub_100E4FD  +
pop ecx  +
mov dword ptr [ebp-4] 1 +
mov esi ds:free +
push ebx  +
call esi  +
push edi  +
call esi  +
mov eax [ebp-4] +
pop ecx  +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
mov esi ds:free +
xor ebx ebx +
push edi  +
xor edi edi +
inc ebx  +
mov [ebp-0Ch] edi +
mov [ebp-4] edi +
mov [ebp-8] edi +
cmp [ebp+8] ebx +
jz loc_100548F  +
push 4000285Ah  +
call sub_100E4FD  +
pop ecx  +
cmp [ebp+8] edi +
jz loc_100558A  +
mov [ebp-4] ebx +
jmp loc_100558A  +
mov eax [ebp+0Ch] +
push dword ptr [eax]  +
call sub_100DDAF  +
mov [ebp-0Ch] eax +
test eax eax +
jnz loc_10054A7  +
call sub_100E5AC  +
jmp loc_1005487  +
***
push eax  +
call sub_100E5BF  +
test eax eax +
jnz loc_10054BE  +
push 4000274Ch  +
call sub_100E4FD  +
pop ecx  +
jmp loc_1005487  +
***
mov ebx ds:malloc +
push edi  +
lea eax [ebp-8] +
push eax  +
push 0  +
push dword ptr [ebp-0Ch]  +
call ds:FindFirstFileNameW  +
mov [ebp+8] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1005546  +
call ds:GetLastError  +
cmp eax 0EAh +
jnz loc_100550D  +
push edi  +
call esi  +
mov eax [ebp-8] +
add eax eax +
push eax  +
call ebx  +
mov edi eax +
pop ecx  +
pop ecx  +
test edi edi +
jnz loc_10054C4  +
push 8  +
call sub_100E412  +
pop ecx  +
mov dword ptr [ebp-4] 1 +
jmp loc_100558A  +
call sub_100E5AC  +
jmp loc_1005504  +
***
call ds:GetLastError  +
cmp eax 0EAh +
jnz loc_1005562  +
push edi  +
call esi  +
mov eax [ebp-8] +
add eax eax +
push eax  +
call ebx  +
mov edi eax +
pop ecx  +
pop ecx  +
test edi edi +
jz loc_1005558  +
push edi  +
lea eax [ebp-8] +
push eax  +
push dword ptr [ebp+8]  +
call ds:FindNextFileNameW  +
test eax eax +
jz loc_1005514  +
push edi  +
call sub_100E3E7  +
push offset WideCharStr  +
call sub_100E3E7  +
jmp loc_1005534  +
***
push 8  +
call sub_100E412  +
pop ecx  +
jmp loc_100557A  +
mov ebx ds:GetLastError +
call ebx  +
test eax eax +
jz loc_1005581  +
call ebx  +
cmp eax 26h +
jz loc_1005581  +
call sub_100E5AC  +
mov dword ptr [ebp-4] 1 +
push dword ptr [ebp+8]  +
call ds:FindClose  +
push edi  +
call esi  +
push dword ptr [ebp-0Ch]  +
call esi  +
mov eax [ebp-4] +
pop ecx  +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
jmp loc_10055C1  +
push [ebp+arg_4]  +
push eax  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10055CC  +
add esi 8 +
mov eax [esi] +
test eax eax +
jnz loc_10055AE  +
pop esi  +
pop ebp  +
retn 8  +
mov eax esi +
jmp loc_10055C7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 120h +
mov eax dword_1011584 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
xor edi edi +
push edi  +
push edi  +
push 1  +
push edi  +
call ds:HeapSetInformation  +
push edi  +
call ds:SetThreadUILanguage  +
push offset a_ocp  +
push edi  +
call ds:setlocale  +
mov ebx [ebp+arg_0] +
pop ecx  +
pop ecx  +
lea eax [ebp+VersionInformation] +
push eax  +
dec ebx  +
add esi 4 +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 11Ch +
call ds:GetVersionExW  +
test eax eax +
jz loc_100564F  +
cmp [ebp+VersionInformation.dwMajorVersion] 5 +
jnz loc_100564F  +
cmp [ebp+VersionInformation.dwMinorVersion] edi +
jnz loc_100564F  +
mov dword_1011910 1 +
call sub_100DD2A  +
test eax eax +
jnz loc_100566B  +
push 400027B7h  +
call sub_100E4FD  +
pop ecx  +
xor eax eax +
inc eax  +
jmp loc_1005702  +
cmp ebx edi +
jnz loc_100567F  +
xor esi esi +
push edi  +
push edi  +
call sub_100E958  +
mov eax esi +
jmp loc_1005702  +
push dword ptr [esi]  +
push offset off_10114B0  +
call sub_10055A3  +
mov edi eax +
test edi edi +
jnz loc_10056A4  +
push dword ptr [esi]  +
push 400027E7h  +
call sub_100E4FD  +
pop ecx  +
xor esi esi +
pop ecx  +
inc esi  +
jmp loc_1005671  +
dec ebx  +
add esi 4 +
test ebx ebx +
jnz loc_10056C2  +
push offset a?_0  +
push dword ptr [edi+4]  +
call sub_10055A3  +
push esi  +
push ebx  +
call dword ptr [eax+4]  +
xor eax eax +
jmp loc_1005702  +
push dword ptr [esi]  +
push dword ptr [edi+4]  +
call sub_10055A3  +
test eax eax +
jnz loc_10056F9  +
push dword ptr [esi]  +
push 400027E7h  +
call sub_100E4FD  +
pop ecx  +
pop ecx  +
push offset a?_0  +
push dword ptr [edi+4]  +
call sub_10055A3  +
add esi 4 +
push esi  +
dec ebx  +
push ebx  +
call dword ptr [eax+4]  +
jmp loc_1005663  +
add esi 4 +
push esi  +
dec ebx  +
push ebx  +
call dword ptr [eax+4]  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100F411  +
leave   +
retn   +
***
push ebp  +
mov ebp esp +
sub esp 50h +
mov eax dword_1011584 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+8] +
push 40002767h  +
call sub_100E4FD  +
xor ebx ebx +
pop ecx  +
mov [ebp-4Ch] ebx +
mov esi offset a02x +
mov eax [ebp-4Ch] +
movzx eax byte ptr [edi+eax] +
push eax  +
push esi  +
push 21h  +
pop eax  +
sub eax ebx +
push eax  +
lea eax [ebp+ebx*2-48h] +
push eax  +
call swprintf_s  +
add esp 10h +
add ebx eax +
inc dword ptr [ebp-4Ch]  +
cmp dword ptr [ebp-4Ch] 10h +
jl loc_1005758  +
lea eax [ebp-48h] +
push eax  +
call sub_100E3E7  +
mov ebx offset WideCharStr +
push ebx  +
call sub_100E3E7  +
push 40002768h  +
call sub_100E4FD  +
and dword ptr [ebp-50h] 0 +
and dword ptr [ebp-4Ch] 0 +
pop ecx  +
mov eax [ebp-4Ch] +
movzx eax byte ptr [edi+eax+10h] +
push eax  +
mov eax [ebp-50h] +
push esi  +
push 21h  +
pop ecx  +
sub ecx eax +
push ecx  +
lea eax [ebp+eax*2-48h] +
push eax  +
call swprintf_s  +
add [ebp-50h] eax +
add esp 10h +
inc dword ptr [ebp-4Ch]  +
cmp dword ptr [ebp-4Ch] 10h +
jl loc_10057A6  +
lea eax [ebp-48h] +
push eax  +
call sub_100E3E7  +
push ebx  +
call sub_100E3E7  +
push 40002769h  +
call sub_100E4FD  +
and dword ptr [ebp-50h] 0 +
and dword ptr [ebp-4Ch] 0 +
pop ecx  +
mov eax [ebp-4Ch] +
movzx eax byte ptr [edi+eax+20h] +
push eax  +
mov eax [ebp-50h] +
push esi  +
push 21h  +
pop ecx  +
sub ecx eax +
push ecx  +
lea eax [ebp+eax*2-48h] +
push eax  +
call swprintf_s  +
add [ebp-50h] eax +
add esp 10h +
inc dword ptr [ebp-4Ch]  +
cmp dword ptr [ebp-4Ch] 10h +
jl loc_10057F4  +
lea eax [ebp-48h] +
push eax  +
call sub_100E3E7  +
push ebx  +
call sub_100E3E7  +
push 4000276Ah  +
call sub_100E4FD  +
xor ebx ebx +
pop ecx  +
mov [ebp-4Ch] ebx +
mov eax [ebp-4Ch] +
movzx eax byte ptr [edi+eax+30h] +
push eax  +
push esi  +
push 21h  +
pop eax  +
sub eax ebx +
push eax  +
lea eax [ebp+ebx*2-48h] +
push eax  +
call swprintf_s  +
add esp 10h +
add ebx eax +
inc dword ptr [ebp-4Ch]  +
cmp dword ptr [ebp-4Ch] 10h +
jl loc_100583F  +
lea eax [ebp-48h] +
push eax  +
call sub_100E3E7  +
push offset WideCharStr  +
call sub_100E3E7  +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100F411  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
movzx ecx word ptr [eax] +
add eax 2 +
mov [esi] eax +
movzx eax cx +
push edi  +
push eax  +
call ds:toupper  +
movzx ax al +
movzx ebx ax +
movzx edi bx +
push edi  +
call ds:isdigit  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10058CB  +
sub bl 30h +
jmp loc_10058E0  +
push edi  +
call ds:isalpha  +
pop ecx  +
test eax eax +
jz loc_10058E4  +
cmp bx 46h +
ja loc_10058E4  +
sub bl 37h +
mov al bl +
jmp loc_10058E9  +
add dword ptr [esi] 0FFFFFFFEh +
xor al al +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push [ebp+arg_0]  +
call sub_1005890  +
push [ebp+arg_0]  +
mov bl al +
shl bl 4 +
call sub_1005890  +
add al bl +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
lea eax [ebp+arg_0] +
push eax  +
call sub_10058F5  +
mov ecx [ebp+arg_4] +
mov [esi+ecx] al +
inc esi  +
cmp esi 10h +
jl loc_1005924  +
mov ecx [ebp+arg_0] +
xor eax eax +
cmp [ecx] ax +
pop esi  +
setz al  +
pop ebp  +
retn 8  +
***
push offset dword_100FCD8  +
call __SEH_prolog4  +
xor edi edi +
mov [ebp-24h] edi +
or dword ptr [ebp-20h] 0FFFFFFFFh +
xor ebx ebx +
mov [ebp-28h] ebx +
mov [ebp-1Ch] edi +
mov [ebp-4] edi +
cmp dword ptr [ebp+8] 5 +
jz loc_100598D  +
push 40002763h  +
call sub_100E4FD  +
pop ecx  +
cmp [ebp+8] edi +
jz loc_1005A83  +
jmp loc_1005A7C  +
mov esi [ebp+0Ch] +
push dword ptr [esi+10h]  +
call sub_100DDAF  +
mov [ebp-24h] eax +
cmp eax edi +
jnz loc_10059A9  +
call sub_100E5AC  +
jmp loc_1005A7C  +
push eax  +
call sub_100E5BF  +
test eax eax +
jnz loc_10059BD  +
push 4000274Ch  +
jmp loc_1005A76  +
push 40h  +
call ds:malloc  +
pop ecx  +
mov ebx eax +
mov [ebp-28h] ebx +
cmp ebx edi +
jnz loc_10059DB  +
push 8  +
call sub_100E412  +
jmp loc_1005A7B  +
push ebx  +
push dword ptr [esi]  +
call sub_100591C  +
test eax eax +
jz loc_1005A71  +
lea eax [ebx+10h] +
push eax  +
push dword ptr [esi+4]  +
call sub_100591C  +
test eax eax +
jz loc_1005A71  +
lea eax [ebx+20h] +
push eax  +
push dword ptr [esi+8]  +
call sub_100591C  +
test eax eax +
jz loc_1005A71  +
lea eax [ebx+30h] +
push eax  +
push dword ptr [esi+0Ch]  +
call sub_100591C  +
test eax eax +
jz loc_1005A71  +
push offset Name  +
call sub_100DBAD  +
test eax eax +
jz loc_100599F  +
push edi  +
push 2000080h  +
push 3  +
push edi  +
push 3  +
push 40000000h  +
push dword ptr [ebp-24h]  +
call ds:CreateFileW  +
mov [ebp-20h] eax +
cmp eax 0FFFFFFFFh +
jz loc_100599F  +
push edi  +
lea ecx [ebp+0Ch] +
push ecx  +
push edi  +
push edi  +
push 40h  +
push ebx  +
push 90098h  +
push eax  +
call ds:DeviceIoControl  +
cmp eax edi +
jnz loc_1005A83  +
jmp loc_100599F  +
***
push 40002763h  +
call sub_100E4FD  +
pop ecx  +
mov dword ptr [ebp-1Ch] 1 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1005A9D  +
mov eax [ebp-1Ch] +
call __SEH_epilog4  +
retn 8  +
***
cmp dword ptr [ebp-20h] 0FFFFFFFFh +
jz loc_1005AAC  +
push dword ptr [ebp-20h]  +
call ds:CloseHandle  +
push ebx  +
mov esi ds:free +
call esi  +
push dword ptr [ebp-24h]  +
call esi  +
pop ecx  +
pop ecx  +
retn   +
***
call sub_100E5AC  +
jmp loc_1005AFC  +
***
push 4000274Ch  +
call sub_100E4FD  +
pop ecx  +
jmp loc_1005AFC  +
***
push 8  +
call sub_100E412  +
jmp loc_1005B32  +
***
cmp dword ptr [ebp-24h] 0FFFFFFFFh +
jz loc_1005BCF  +
push dword ptr [ebp-24h]  +
call ds:CloseHandle  +
push dword ptr [ebp-20h]  +
mov esi ds:free +
call esi  +
push dword ptr [ebp-28h]  +
call esi  +
pop ecx  +
pop ecx  +
retn   +
***
sbb [eax+18h] ch +
std   +
add [ecx] al +
call __SEH_prolog4  +
xor esi esi +
mov [ebp-28h] esi +
or dword ptr [ebp-24h] 0FFFFFFFFh +
mov [ebp-20h] esi +
mov [ebp-1Ch] esi +
mov [ebp-4] esi +
xor edi edi +
inc edi  +
cmp [ebp+8] edi +
jz loc_1005C29  +
push 40002765h  +
call sub_100E4FD  +
pop ecx  +
cmp [ebp+8] esi +
jz loc_1005CB6  +
mov [ebp-1Ch] edi +
jmp loc_1005CB6  +
mov eax [ebp+0Ch] +
push dword ptr [eax]  +
call sub_100DDAF  +
mov ebx eax +
mov [ebp-28h] ebx +
cmp ebx esi +
jnz loc_1005C43  +
call sub_100E5AC  +
jmp loc_1005C21  +
***
push ebx  +
call sub_100E5BF  +
test eax eax +
jnz loc_1005C5A  +
push 4000274Ch  +
call sub_100E4FD  +
pop ecx  +
jmp loc_1005C21  +
***
push 40h  +
call ds:malloc  +
pop ecx  +
mov [ebp-20h] eax +
cmp eax esi +
jnz loc_1005C73  +
push 8  +
call sub_100E412  +
jmp loc_1005C57  +
***
push esi  +
push 80h  +
push 3  +
push esi  +
push 3  +
push 0C0000000h  +
push ebx  +
call ds:CreateFileW  +
mov [ebp-24h] eax +
cmp eax 0FFFFFFFFh +
jz loc_1005C3C  +
push esi  +
lea ecx [ebp+0Ch] +
push ecx  +
push 40h  +
push dword ptr [ebp-20h]  +
push esi  +
push esi  +
push 900C0h  +
push eax  +
call ds:DeviceIoControl  +
cmp eax esi +
jz loc_1005C3C  +
push dword ptr [ebp-20h]  +
call near ptr dword_1005714+17h  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1005CCF  +
mov eax [ebp-1Ch] +
call __SEH_epilog4  +
retn 8  +
***
cmp dword ptr [ebp-24h] 0FFFFFFFFh +
jz loc_1005CDE  +
push dword ptr [ebp-24h]  +
call ds:CloseHandle  +
cmp [ebp-20h] esi +
jz loc_1005CED  +
push dword ptr [ebp-20h]  +
call ds:free  +
pop ecx  +
cmp [ebp-28h] esi +
jz locret_1005CFC  +
push dword ptr [ebp-28h]  +
call ds:free  +
pop ecx  +
retn   +
***
cmp dword ptr [ebp-20h] 0FFFFFFFFh +
jz loc_1005DC7  +
push dword ptr [ebp-20h]  +
call ds:CloseHandle  +
push dword ptr [ebp-24h]  +
call ds:free  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 238h +
mov eax dword_1011584 +
xor eax ebp +
mov [ebp+var_4] eax +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
push offset aDosdevicesSExt  +
lea eax [ebp+var_20C] +
push 104h  +
push eax  +
call swprintf_s  +
add esp 10h +
test eax eax +
jge loc_1005E36  +
push 400027EAh  +
call sub_100E4FD  +
pop ecx  +
or eax 0FFFFFFFFh +
jmp loc_1005EC4  +
lea eax [ebp+var_20C] +
push eax  +
lea eax [ebp+var_230] +
push eax  +
call ds:RtlInitUnicodeString  +
and [ebp+var_224] 0 +
and [ebp+var_218] 0 +
and [ebp+var_214] 0 +
push 4010h  +
lea eax [ebp+var_230] +
mov [ebp+var_220] eax +
push 3  +
lea eax [ebp+var_238] +
push eax  +
lea eax [ebp+var_228] +
push eax  +
push 100003h  +
lea eax [ebp+var_210] +
push eax  +
mov [ebp+var_228] 18h +
mov [ebp+var_21C] 40h +
call ds:NtOpenFile  +
test eax eax +
jge loc_1005EBE  +
push edi  +
push eax  +
call ds:RtlNtStatusToDosError  +
push eax  +
call sub_100E412  +
pop ecx  +
jmp loc_1005E2D  +
mov eax [ebp+var_210] +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_100F411  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
push edi  +
push [ebp+arg_0]  +
xor edi edi +
call sub_100E5BF  +
test eax eax +
jnz loc_1005EFD  +
push 4000274Ch  +
call sub_100E4FD  +
pop ecx  +
inc edi  +
jmp loc_1005F65  +
push esi  +
push [ebp+arg_0]  +
call sub_1005DEC  +
mov esi eax +
cmp esi 0FFFFFFFFh +
jnz loc_1005F12  +
xor edi edi +
inc edi  +
jmp loc_1005F64  +
push 6  +
push 30h  +
lea eax [ebp+var_38] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push esi  +
call ds:NtQueryVolumeInformationFile  +
test eax eax +
jl loc_1005F4C  +
mov eax [ebp+var_10] +
and eax 0FFFFFFFCh +
or eax [ebp+arg_4] +
push 6  +
mov [ebp+var_10] eax +
push 30h  +
lea eax [ebp+var_38] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push esi  +
call ds:NtSetVolumeInformationFile  +
test eax eax +
jge loc_1005F5D  +
push eax  +
call ds:RtlNtStatusToDosError  +
push eax  +
call sub_100E412  +
xor edi edi +
inc edi  +
pop ecx  +
push esi  +
call ds:CloseHandle  +
pop esi  +
mov eax edi +
pop edi  +
leave   +
retn 8  +
***
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 1 +
jz loc_1005F91  +
push 400027E4h  +
call sub_100E4FD  +
xor eax eax +
cmp [ebp+8] eax +
pop ecx  +
setnz al  +
jmp loc_1005F9D  +
mov eax [ebp+0Ch] +
push 0  +
push dword ptr [eax]  +
call sub_1005ED8  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 1 +
jz loc_1005FC6  +
push 400027E5h  +
call sub_100E4FD  +
xor eax eax +
cmp [ebp+arg_0] eax +
pop ecx  +
setnz al  +
jmp loc_1005FD2  +
mov eax [ebp+arg_4] +
push 1  +
push dword ptr [eax]  +
call sub_1005ED8  +
pop ebp  +
retn 8  +
***
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 1 +
jz loc_1005FFB  +
push 400027E6h  +
call sub_100E4FD  +
xor eax eax +
cmp [ebp+8] eax +
pop ecx  +
setnz al  +
jmp loc_1006007  +
mov eax [ebp+0Ch] +
push 2  +
push dword ptr [eax]  +
call sub_1005ED8  +
pop ebp  +
retn 8  +
***
call __SEH_prolog4_GS  +
xor ebx ebx +
mov [ebp+hEventLog] ebx +
mov [ebp+var_46D] 1 +
mov esi offset aSystem +
lea edi [ebp+SourceName] +
movs   +
movs   +
movs   +
movs   +
xor eax eax +
lea edi [ebp+var_4E] +
stos   +
stos   +
stos   +
stos   +
stos   +
push 6  +
pop ecx  +
mov esi offset aApplication +
lea edi [ebp+var_3C] +
movs   +
xor eax eax +
lea edi [ebp+var_24] +
stos   +
stos   +
mov [ebp+var_478] ebx +
mov [ebp+ms_exc.disabled] ebx +
cmp [ebp+arg_0] ebx +
jz loc_1006081  +
push 400027CAh  +
call sub_100E4FD  +
mov [ebp+var_478] 1 +
jmp loc_10062D0  +
mov [ebp+var_47C] ebx +
cmp word ptr [ebp+var_47C] 2 +
jnb loc_10062BE  +
movzx edi word ptr [ebp+var_47C] +
shl edi 5 +
lea edi [ebp+edi+SourceName] +
push edi  +
push ebx  +
call ds:OpenEventLogW  +
mov [ebp+hEventLog] eax +
cmp eax ebx +
jnz loc_10060D4  +
push 40002730h  +
call sub_100E4FD  +
pop ecx  +
call sub_100E5AC  +
mov [ebp+var_478] 1 +
jmp loc_10062D1  +
push 400h  +
call ds:malloc  +
pop ecx  +
mov esi eax +
mov [ebp+var_484] esi +
mov [ebp+var_490] esi +
cmp esi ebx +
jnz loc_10060FE  +
push 8  +
call sub_100E412  +
jmp loc_1006072  +
push edi  +
push 40002731h  +
call sub_100E4FD  +
pop ecx  +
pop ecx  +
lea eax [ebp+pnMinNumberOfBytesNeeded] +
push eax  +
lea eax [ebp+pnBytesRead] +
push eax  +
push 400h  +
push esi  +
push ebx  +
push 5  +
push [ebp+hEventLog]  +
call ds:ReadEventLogW  +
test eax eax +
jz loc_10062A1  +
cmp [ebp+pnBytesRead] ebx +
jbe loc_1006290  +
mov eax [esi+14h] +
mov ecx 40040024h +
cmp eax ecx +
jz loc_1006159  +
cmp eax 40040025h +
jnz loc_100627B  +
mov [ebp+var_46D] bl +
sub eax ecx +
jz loc_100616D  +
dec eax  +
jnz loc_1006178  +
push 40002733h  +
jmp loc_1006172  +
push 40002732h  +
call sub_100E4FD  +
pop ecx  +
push dword ptr [esi+14h]  +
push 40002734h  +
call sub_100E4FD  +
pop ecx  +
pop ecx  +
movzx eax word ptr [esi+18h] +
dec eax  +
jz loc_10061BB  +
dec eax  +
jz loc_10061B4  +
dec eax  +
dec eax  +
jz loc_10061AD  +
sub eax 4 +
jz loc_10061A6  +
sub eax 8 +
jnz loc_10061C6  +
push 40002739h  +
jmp loc_10061C0  +
push 40002738h  +
jmp loc_10061C0  +
push 40002737h  +
jmp loc_10061C0  +
push 40002736h  +
jmp loc_10061C0  +
push 40002735h  +
call sub_100E4FD  +
pop ecx  +
movzx eax word ptr [esi+1Ch] +
push eax  +
push 4000273Ah  +
call sub_100E4FD  +
lea eax [esi+38h] +
push eax  +
push 4000273Bh  +
call sub_100E4FD  +
add esp 10h +
cmp [esi+2Ch] ebx +
jbe loc_100624B  +
mov eax [esi+2Ch] +
add eax esi +
mov ecx 104h +
mov [ebp+cbName] ecx +
mov [ebp+cbReferencedDomainName] ecx +
lea ecx [ebp+peUse] +
push ecx  +
lea ecx [ebp+cbReferencedDomainName] +
push ecx  +
lea ecx [ebp+ReferencedDomainName] +
push ecx  +
lea ecx [ebp+cbName] +
push ecx  +
lea ecx [ebp+Name] +
push ecx  +
push eax  +
push ebx  +
call ds:LookupAccountSidW  +
cmp eax ebx +
jz loc_100624B  +
lea eax [ebp+Name] +
push eax  +
lea eax [ebp+ReferencedDomainName] +
push eax  +
push 4000273Eh  +
call sub_100E4FD  +
add esp 0Ch +
cmp word ptr [esi+1Ah] 2 +
jnz loc_100627B  +
mov ecx [esi+24h] +
add ecx esi +
mov eax ecx +
lea edi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx bx +
jnz loc_100625C  +
sub eax edi +
sar eax 1 +
lea eax [ecx+eax*2+2] +
push eax  +
push 4000273Ch  +
call sub_100E4FD  +
pop ecx  +
pop ecx  +
mov eax [esi] +
sub [ebp+pnBytesRead] eax +
add esi [esi] +
mov [ebp+var_484] esi +
jmp loc_1006136  +
mov esi [ebp+var_490] +
mov [ebp+var_484] esi +
jmp loc_100610B  +
push [ebp+hEventLog]  +
call ds:CloseEventLog  +
mov [ebp+hEventLog] ebx +
inc [ebp+var_47C]  +
jmp loc_1006087  +
cmp [ebp+var_46D] bl +
jz loc_10062D1  +
push 4000273Dh  +
call sub_100E4FD  +
pop ecx  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call sub_10062ED  +
mov eax [ebp+var_478] +
call __SEH_epilog4_GS  +
retn 8  +
***
cmp [ebp-474h] ebx +
jz locret_1006301  +
push dword ptr [ebp-474h]  +
call ds:CloseHandle  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 21Ch +
mov eax dword_1011584 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov ecx [eax] +
mov eax [eax+4] +
push edi  +
mov edi [ebp+arg_4] +
mov [ebp+FileTime.dwHighDateTime] eax +
lea eax [ebp+Date] +
push eax  +
lea eax [ebp+FileTime] +
push eax  +
mov [ebp+FileTime.dwLowDateTime] ecx +
call ds:FileTimeToSystemTime  +
test eax eax +
jz loc_10063B0  +
push esi  +
push 100h  +
lea eax [ebp+TimeStr] +
push eax  +
push 0  +
lea eax [ebp+Date] +
push eax  +
push 8  +
mov esi 400h +
push esi  +
call ds:GetTimeFormatW  +
test eax eax +
jz loc_10063AF  +
push [ebp+cchDate]  +
lea eax [ebp+Date] +
push edi  +
push 0  +
push eax  +
push 2  +
push esi  +
call ds:GetDateFormatW  +
test eax eax +
jz loc_10063AF  +
push offset asc_1001FF0  +
push [ebp+cchDate]  +
push edi  +
call wcscat_s  +
lea eax [ebp+TimeStr] +
push eax  +
push [ebp+cchDate]  +
push edi  +
call wcscat_s  +
add esp 18h +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_100F411  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10Ch +
mov eax dword_1011584 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+lpAccountName] +
push esi  +
mov esi [ebp+arg_4] +
mov eax [esi] +
push edi  +
mov edi [ebp+arg_8] +
lea edx [ebp+peUse] +
push edx  +
lea edx [ebp+cbReferencedDomainName] +
push edx  +
mov dword ptr [eax+4] 44h +
mov eax [esi] +
lea edx [ebp+ReferencedDomainName] +
push edx  +
lea edx [eax+4] +
push edx  +
add eax 28h +
push eax  +
push ecx  +
push 0  +
mov [ebp+cbReferencedDomainName] 80h +
call ds:LookupAccountNameW  +
test eax eax +
jnz loc_100642D  +
call ds:GetLastError  +
xor eax eax +
jmp loc_1006495  +
mov eax [esi] +
or ecx 0FFFFFFFFh +
mov [eax+18h] ecx +
mov [eax+1Ch] ecx +
mov eax [esi] +
mov [eax+20h] ecx +
mov [eax+24h] ecx +
mov eax [esi] +
add eax 28h +
push eax  +
call ds:RtlLengthSid  +
mov ecx [esi] +
mov [ecx+4] eax +
mov eax [esi] +
mov ecx [eax+4] +
add ecx 7 +
and ecx 0FFFFFFF8h +
add ecx 28h +
mov [eax] ecx +
mov eax [esi] +
push dword ptr [eax+4]  +
add eax 28h +
push eax  +
mov eax [edi] +
add eax 8 +
push eax  +
call memcpy  +
mov eax [esi] +
mov eax [eax+4] +
mov ecx [edi] +
mov [ecx+4] eax +
mov edi [edi] +
mov eax [edi+4] +
add eax 7 +
and eax 0FFFFFFF8h +
add eax 8 +
mov [edi] eax +
xor eax eax +
add esp 0Ch +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100F411  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
push esi  +
push edi  +
xor esi esi +
push 2Ch  +
lea eax [ebp+var_34] +
push esi  +
push eax  +
mov [ebp+var_38] esi +
call memset  +
add esp 0Ch +
push 6  +
push 30h  +
lea eax [ebp+var_38] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_0]  +
call ds:NtQueryVolumeInformationFile  +
mov edx [ebp+var_10] +
mov ecx edx +
and ecx 3 +
mov eax 400027CCh +
jnz loc_10064F0  +
mov edi eax +
jmp loc_10064FD  +
mov edi ecx +
dec edi  +
neg edi  +
sbb edi edi +
add edi 400027CEh +
cmp [ebp+arg_4] esi +
jnz loc_1006510  +
xor ecx ecx +
cmp edi eax +
setnz cl  +
mov eax ecx +
jmp loc_10065AC  +
mov eax edx +
and eax 30h +
push ebx  +
jz loc_100653C  +
cmp eax 10h +
jz loc_1006535  +
cmp eax 20h +
jz loc_100652E  +
cmp eax 30h +
jnz loc_1006543  +
mov ebx 400027D1h +
jmp loc_1006546  +
mov ebx 400027CFh +
jmp loc_1006546  +
mov ebx 400027D0h +
jmp loc_1006546  +
mov ebx 400027D2h +
jmp loc_1006546  +
mov ebx [ebp+arg_0] +
cmp ecx esi +
jz loc_100655E  +
mov esi edx +
and esi 100h +
neg esi  +
sbb esi esi +
add esi 400027D4h +
jmp loc_1006563  +
mov esi 400027D4h +
push edx  +
push 400027CBh  +
call sub_100E4FD  +
push edi  +
call sub_100E4FD  +
push ebx  +
call sub_100E4FD  +
push esi  +
call sub_100E4FD  +
add esp 14h +
push [ebp+var_14]  +
push [ebp+var_18]  +
call sub_100DE84  +
push eax  +
push [ebp+var_1C]  +
push [ebp+var_20]  +
call sub_100DE84  +
push eax  +
push 400027D5h  +
call sub_100E4FD  +
add esp 0Ch +
xor eax eax +
inc eax  +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 410h +
mov eax dword_1011584 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi+4] 0 +
mov eax 80h +
mov [ebp+cbName] eax +
mov [ebp+cbReferencedDomainName] eax +
jnz loc_10065FA  +
push 400027BEh  +
call sub_100E4FD  +
pop ecx  +
jmp loc_10066EF  +
lea eax [ebp+peUse] +
push eax  +
lea eax [ebp+cbReferencedDomainName] +
push eax  +
lea eax [ebp+ReferencedDomainName] +
push eax  +
lea eax [ebp+cbName] +
push eax  +
lea eax [ebp+Name] +
push eax  +
lea eax [esi+28h] +
push eax  +
push ecx  +
call ds:LookupAccountSidW  +
test eax eax +
jz loc_10066EA  +
mov eax [ebp+peUse] +
dec eax  +
jz loc_10066CD  +
dec eax  +
jz loc_10066B8  +
dec eax  +
jz loc_10066A3  +
dec eax  +
jz loc_100668E  +
dec eax  +
jz loc_1006679  +
dec eax  +
jz loc_1006664  +
dec eax  +
lea eax [ebp+Name] +
push eax  +
lea eax [ebp+ReferencedDomainName] +
push eax  +
jnz loc_10066DB  +
push 400027C5h  +
jmp loc_10066E0  +
lea eax [ebp+Name] +
push eax  +
lea eax [ebp+ReferencedDomainName] +
push eax  +
push 400027C4h  +
jmp loc_10066E0  +
lea eax [ebp+Name] +
push eax  +
lea eax [ebp+ReferencedDomainName] +
push eax  +
push 400027C3h  +
jmp loc_10066E0  +
lea eax [ebp+Name] +
push eax  +
lea eax [ebp+ReferencedDomainName] +
push eax  +
push 400027C2h  +
jmp loc_10066E0  +
lea eax [ebp+Name] +
push eax  +
lea eax [ebp+ReferencedDomainName] +
push eax  +
push 400027C1h  +
jmp loc_10066E0  +
lea eax [ebp+Name] +
push eax  +
lea eax [ebp+ReferencedDomainName] +
push eax  +
push 400027C0h  +
jmp loc_10066E0  +
lea eax [ebp+Name] +
push eax  +
lea eax [ebp+ReferencedDomainName] +
push eax  +
push 400027BFh  +
call sub_100E4FD  +
add esp 0Ch +
jmp loc_10066EF  +
call sub_100E5AC  +
push 100h  +
lea eax [ebp+var_404] +
push eax  +
lea eax [esi+8] +
push eax  +
call sub_1006307  +
push dword ptr [esi+24h]  +
push dword ptr [esi+20h]  +
call sub_100DE06  +
push eax  +
push dword ptr [esi+1Ch]  +
push dword ptr [esi+18h]  +
call sub_100DE06  +
push eax  +
push dword ptr [esi+14h]  +
push dword ptr [esi+10h]  +
call sub_100DE06  +
push eax  +
lea eax [ebp+var_404] +
push eax  +
push 400027C7h  +
call sub_100E4FD  +
mov ecx [ebp+var_4] +
add esp 14h +
xor ecx ebp +
pop esi  +
call sub_100F411  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
xor esi esi +
cmp [ebp+hObject] 1 +
mov [ebp+var_4] esi +
jz loc_1006783  +
mov eax [ebp+arg_4] +
push dword ptr [eax+4]  +
push 400027C8h  +
call sub_100E4FD  +
xor eax eax +
cmp [ebp+hObject] esi +
pop ecx  +
pop ecx  +
setnz al  +
jmp loc_1006861  +
push ebx  +
mov ebx [ebp+arg_4] +
push dword ptr [ebx]  +
call sub_100E5BF  +
test eax eax +
jnz loc_10067A5  +
push 4000274Ch  +
call sub_100E4FD  +
xor eax eax +
pop ecx  +
inc eax  +
jmp loc_1006860  +
push edi  +
push dword ptr [ebx]  +
call sub_1005DEC  +
mov edi eax +
mov [ebp+hObject] edi +
cmp edi 0FFFFFFFFh +
jz loc_10067F7  +
push esi  +
push edi  +
call sub_10064AA  +
test eax eax +
jnz loc_10067D1  +
push dword ptr [ebx]  +
push 400027D6h  +
call sub_100E4FD  +
pop ecx  +
jmp loc_10067EF  +
push 1  +
push edi  +
call sub_10064AA  +
push 7Ch  +
call ds:malloc  +
mov ebx eax +
pop ecx  +
cmp ebx esi +
jnz loc_10067FC  +
push 8  +
call sub_100E412  +
pop ecx  +
push edi  +
call ds:CloseHandle  +
xor eax eax +
inc eax  +
jmp loc_100685F  +
push esi  +
push esi  +
push esi  +
push esi  +
push 1  +
push 7Ch  +
push ebx  +
lea eax [ebp+var_C] +
push eax  +
push edi  +
mov edi ds:NtQueryQuotaInformationFile +
jmp loc_1006829  +
push esi  +
push ebx  +
call sub_10065B7  +
push esi  +
push esi  +
push esi  +
push esi  +
push 1  +
push 7Ch  +
push ebx  +
lea eax [ebp+var_C] +
push eax  +
push [ebp+hObject]  +
call edi  +
cmp eax esi +
jge loc_1006812  +
cmp eax 8000001Ah +
jz loc_100684B  +
push eax  +
call ds:RtlNtStatusToDosError  +
push eax  +
call sub_100E412  +
pop ecx  +
mov [ebp+var_4] 1 +
push [ebp+hObject]  +
call ds:CloseHandle  +
push ebx  +
call ds:free  +
mov eax [ebp+var_4] +
pop ecx  +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 8  +
***
cmp dword ptr [ebp-20h] 0FFFFFFFFh +
jz loc_1006A22  +
push dword ptr [ebp-20h]  +
call ds:CloseHandle  +
push dword ptr [ebp+8]  +
mov esi ds:free +
call esi  +
push dword ptr [ebp-2Ch]  +
call esi  +
pop ecx  +
pop ecx  +
retn   +
***
call sub_100E5AC  +
jmp loc_1006A8F  +
***
cmp dword ptr [ebp-23Ch] 0FFFFFFFFh +
jz locret_1006B6A  +
push dword ptr [ebp-23Ch]  +
call ds:CloseHandle  +
retn   +
***
call __SEH_prolog4_GS  +
cmp dword ptr [ebp-23Ch] 0FFFFFFFFh +
jz locret_1006CD7  +
push dword ptr [ebp-23Ch]  +
call ds:CloseHandle  +
retn   +
***
cmp dword ptr [ebp-23Ch] 0FFFFFFFFh +
jz locret_1006E38  +
push dword ptr [ebp-23Ch]  +
call ds:CloseHandle  +
retn   +
***
cmp dword ptr [ebp-23Ch] 0FFFFFFFFh +
jz locret_1006F73  +
push dword ptr [ebp-23Ch]  +
call ds:CloseHandle  +
retn   +
***
push ebp  +
mov ebp esp +
sub esp 54h +
mov eax dword_1011584 +
xor eax ebp +
mov [ebp-4] eax +
push esi  +
mov esi [ebp+8] +
push dword ptr [esi+40h]  +
lea eax [ebp-54h] +
push dword ptr [esi+44h]  +
push dword ptr [esi+38h]  +
push dword ptr [esi+3Ch]  +
push dword ptr [esi+30h]  +
push dword ptr [esi+34h]  +
push dword ptr [esi+28h]  +
push dword ptr [esi+2Ch]  +
push dword ptr [esi+20h]  +
push dword ptr [esi+24h]  +
push 50h  +
push eax  +
lea eax [esi+10h] +
push eax  +
call sub_100EA29  +
push eax  +
push dword ptr [esi+8]  +
push 400027ECh  +
call sub_100E4FD  +
mov ecx [ebp-4] +
add esp 34h +
xor ecx ebp +
xor eax eax +
pop esi  +
call sub_100F411  +
leave   +
retn 4  +
***
call __SEH_prolog4  +
test ebx ebx +
jz loc_10070FB  +
push ebx  +
call ds:free  +
pop ecx  +
test edi edi +
jz locret_1007107  +
push edi  +
call ds:free  +
pop ecx  +
retn   +
***
push ebp  +
mov ebp esp +
sub esp 1C4h +
mov eax dword_1011584 +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+8] +
push esi  +
lea esi [eax+8] +
push dword ptr [esi+0E8h]  +
lea eax [ebp-44h] +
push dword ptr [esi+0ECh]  +
push dword ptr [esi+0E4h]  +
push dword ptr [esi+0E0h]  +
push dword ptr [esi+0D8h]  +
push dword ptr [esi+0DCh]  +
push dword ptr [esi+0D0h]  +
push dword ptr [esi+0D4h]  +
push 40h  +
push eax  +
lea eax [esi+0C8h] +
push eax  +
call sub_100E96D  +
push eax  +
push dword ptr [esi+0C4h]  +
lea eax [ebp-0D4h] +
push dword ptr [esi+0C0h]  +
push dword ptr [esi+0B8h]  +
push dword ptr [esi+0BCh]  +
push dword ptr [esi+0B0h]  +
push dword ptr [esi+0B4h]  +
push dword ptr [esi+0A8h]  +
push dword ptr [esi+0ACh]  +
push dword ptr [esi+0A0h]  +
push dword ptr [esi+0A4h]  +
push dword ptr [esi+98h]  +
push dword ptr [esi+9Ch]  +
push dword ptr [esi+90h]  +
push dword ptr [esi+94h]  +
push 50h  +
push eax  +
lea eax [esi+80h] +
push eax  +
call sub_100EA29  +
push eax  +
push 50h  +
lea eax [ebp-174h] +
push eax  +
lea eax [esi+70h] +
push eax  +
call sub_100EA29  +
push eax  +
push 40h  +
lea eax [ebp-84h] +
push eax  +
lea eax [esi+68h] +
push eax  +
call sub_100E96D  +
push eax  +
push dword ptr [esi+64h]  +
lea eax [ebp-124h] +
push 50h  +
push eax  +
lea eax [esi+20h] +
push eax  +
call sub_100EA29  +
push eax  +
push dword ptr [esi+1Ch]  +
lea eax [ebp-1C4h] +
push dword ptr [esi+18h]  +
push dword ptr [esi+14h]  +
push dword ptr [esi+10h]  +
push 50h  +
push eax  +
push esi  +
call sub_100EA29  +
push eax  +
push 400027F1h  +
call sub_100E4FD  +
mov ecx [ebp-4] +
add esp 88h +
xor ecx ebp +
xor eax eax +
pop esi  +
call sub_100F411  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
movzx eax word ptr [esi+0Eh] +
push eax  +
movzx eax word ptr [esi+0Ch] +
push eax  +
movzx eax word ptr [esi+0Ah] +
push eax  +
movzx eax word ptr [esi+8] +
push eax  +
push 400027EDh  +
call sub_100E4FD  +
movzx eax word ptr [esi+0Ah] +
add esp 14h +
test ax ax +
jbe loc_10072A5  +
movzx ecx word ptr [esi+8] +
shr ecx 1 +
movzx eax ax +
lea ecx [esi+ecx*2+10h] +
push ecx  +
shr eax 1 +
push eax  +
push 400027EEh  +
call sub_100E4FD  +
add esp 0Ch +
movzx eax word ptr [esi+0Eh] +
test ax ax +
jbe loc_10072CC  +
movzx ecx word ptr [esi+0Ch] +
shr ecx 1 +
movzx eax ax +
lea ecx [esi+ecx*2+10h] +
push ecx  +
shr eax 1 +
push eax  +
push 400027EFh  +
call sub_100E4FD  +
add esp 0Ch +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
mov eax dword_1011584 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push edi  +
mov ebx offset WideCharStr +
push ebx  +
mov [ebp+var_34] eax +
call sub_100E3E7  +
push [ebp+arg_4]  +
push 400027F0h  +
call sub_100E4FD  +
xor edi edi +
pop ecx  +
pop ecx  +
cmp [ebp+arg_4] edi +
jbe loc_10073F6  +
push 40002761h  +
call sub_100E4FD  +
pop ecx  +
cmp [ebp+arg_4] edi +
jbe loc_10073F6  +
push esi  +
push edi  +
push offset a04x  +
lea eax [ebp+WideCharStr] +
push 11h  +
push eax  +
call swprintf_s  +
add esp 10h +
lea eax [ebp+WideCharStr] +
push eax  +
call sub_100E3E7  +
xor esi esi +
lea eax [esi+edi] +
cmp eax [ebp+arg_4] +
jnb loc_10073A8  +
mov eax [ebp+var_34] +
add eax esi +
mov al [eax+edi] +
mov cl al +
sub cl 20h +
cmp cl 5Fh +
ja loc_100736B  +
movzx cx al +
jmp loc_100736E  +
push 2Eh  +
pop ecx  +
movzx eax al +
push eax  +
push offset a02x_0  +
lea eax [ebp+var_C] +
push 4  +
push eax  +
mov [ebp+esi*2+WideCharStr] cx +
call swprintf_s  +
add esp 10h +
lea eax [ebp+var_C] +
push eax  +
call sub_100E3E7  +
cmp esi 7 +
jnz loc_10073A2  +
push offset asc_10019EC  +
call sub_100E3E7  +
inc esi  +
cmp esi 10h +
jb loc_100734B  +
xor eax eax +
mov [ebp+esi*2+WideCharStr] ax +
jmp loc_10073CB  +
push offset asc_1001FF0  +
call sub_100E3E7  +
cmp esi 7 +
jnz loc_10073CA  +
push offset asc_10019EC  +
call sub_100E3E7  +
inc esi  +
cmp esi 10h +
jb loc_10073B1  +
push offset asc_1001FF8  +
call sub_100E3E7  +
lea eax [ebp+WideCharStr] +
push eax  +
call sub_100E3E7  +
push ebx  +
call sub_100E3E7  +
add edi 10h +
cmp edi [ebp+arg_4] +
jb loc_100732C  +
pop esi  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_100F411  +
leave   +
retn 8  +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp-24h] ebx +
or dword ptr [ebp-20h] 0FFFFFFFFh +
xor esi esi +
mov [ebp-28h] esi +
mov [ebp-1Ch] ebx +
mov [ebp-4] ebx +
xor edi edi +
inc edi  +
cmp [ebp+8] edi +
jz loc_100744F  +
push 40002756h  +
call sub_100E4FD  +
pop ecx  +
cmp [ebp+8] ebx +
jz loc_1007604  +
mov [ebp-1Ch] edi +
jmp loc_1007604  +
mov eax [ebp+0Ch] +
push dword ptr [eax]  +
call sub_100DDAF  +
mov [ebp-24h] eax +
cmp eax ebx +
jnz loc_1007467  +
call sub_100E5AC  +
jmp loc_1007447  +
***
mov edi 4000h +
push edi  +
call ds:malloc  +
pop ecx  +
mov esi eax +
mov [ebp-28h] esi +
cmp esi ebx +
jnz loc_1007491  +
push 8  +
call sub_100E412  +
pop ecx  +
mov dword ptr [ebp-1Ch] 1 +
jmp loc_1007604  +
push ebx  +
push 2200000h  +
push 3  +
push ebx  +
push 3  +
mov ebx 80000000h +
push ebx  +
push dword ptr [ebp-24h]  +
call ds:CreateFileW  +
mov [ebp-20h] eax +
cmp eax 0FFFFFFFFh +
jnz loc_10074BA  +
call sub_100E5AC  +
jmp loc_1007485  +
***
xor eax eax +
push eax  +
lea ecx [ebp-2Ch] +
push ecx  +
push edi  +
push esi  +
push eax  +
push eax  +
push 900A8h  +
push dword ptr [ebp-20h]  +
call ds:DeviceIoControl  +
test eax eax +
jz loc_10074B3  +
push dword ptr [esi]  +
push 40002757h  +
call sub_100E4FD  +
pop ecx  +
pop ecx  +
test [esi] ebx +
jz loc_10074F4  +
push 40002758h  +
call sub_100E4FD  +
pop ecx  +
test dword ptr [esi] 20000000h +
jz loc_1007507  +
push 40002759h  +
call sub_100E4FD  +
pop ecx  +
cmp dword ptr [esi] 0A000000Ch +
jnz loc_100751A  +
push 4000275Ah  +
call sub_100E4FD  +
pop ecx  +
cmp dword ptr [esi] 0A0000003h +
jnz loc_1007536  +
push 4000275Bh  +
call sub_100E4FD  +
pop ecx  +
push esi  +
call sub_1007254  +
mov [ebp-1Ch] eax +
cmp dword ptr [esi] 0C0000004h +
jnz loc_1007552  +
push 4000275Ch  +
call sub_100E4FD  +
pop ecx  +
push esi  +
call near ptr byte_100710C+1  +
mov [ebp-1Ch] eax +
cmp dword ptr [esi] 80000007h +
jnz loc_100756E  +
push 4000275Dh  +
call sub_100E4FD  +
pop ecx  +
push esi  +
call near ptr dword_1006F74+1Ah  +
mov [ebp-1Ch] eax +
mov eax [esi] +
cmp eax 0A0000010h +
jnz loc_100758D  +
push 400027FFh  +
call sub_100E4FD  +
pop ecx  +
push esi  +
call sub_1006FF8  +
mov [ebp-1Ch] eax +
jmp loc_1007604  +
cmp eax 8000000Bh +
jnz loc_100759F  +
push 4000275Eh  +
call sub_100E4FD  +
pop ecx  +
cmp dword ptr [esi] 8000000Ah +
jnz loc_10075B2  +
push 4000275Fh  +
call sub_100E4FD  +
pop ecx  +
test [esi] ebx +
jz loc_10075C6  +
movzx eax word ptr [esi+4] +
push eax  +
lea eax [esi+8] +
push eax  +
call sub_10072D8  +
jmp loc_1007604  +
lea eax [ebp+0Ch] +
push eax  +
lea eax [esi+8] +
push eax  +
call ds:StringFromIID  +
test eax eax +
jz loc_10075DE  +
push eax  +
jmp loc_100747F  +
***
push dword ptr [ebp+0Ch]  +
push 40002760h  +
call sub_100E4FD  +
pop ecx  +
pop ecx  +
movzx eax word ptr [esi+4] +
push eax  +
lea eax [esi+18h] +
push eax  +
call sub_10072D8  +
push dword ptr [ebp+0Ch]  +
call ds:CoTaskMemFree  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_100761E  +
mov eax [ebp-1Ch] +
call __SEH_epilog4  +
retn 8  +
***
cmp dword ptr [ebp-20h] 0FFFFFFFFh +
jz loc_100762D  +
push dword ptr [ebp-20h]  +
call ds:CloseHandle  +
push esi  +
mov esi ds:free +
call esi  +
push dword ptr [ebp-24h]  +
call esi  +
pop ecx  +
pop ecx  +
retn   +
***
push 8  +
call sub_100E412  +
jmp loc_10076AB  +
***
cmp dword ptr [ebp-20h] 0FFFFFFFFh +
jz loc_100775B  +
push dword ptr [ebp-20h]  +
call ds:CloseHandle  +
push dword ptr [ebp-24h]  +
mov esi ds:free +
call esi  +
push dword ptr [ebp-28h]  +
call esi  +
pop ecx  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
call RtlGetCurrentTransaction  +
xor esi esi +
push esi  +
mov edi eax +
call RtlSetCurrentTransaction  +
push esi  +
push 2000000h  +
push 3  +
push esi  +
push 3  +
push [ebp+dwDesiredAccess]  +
push [ebp+lpFileName]  +
call ds:CreateFileW  +
push edi  +
mov esi eax +
call RtlSetCurrentTransaction  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
mov esi ds:CreateFileW +
push edi  +
xor ebx ebx +
push ebx  +
mov edi 2000000h +
push edi  +
push 3  +
push ebx  +
push 3  +
push 80h  +
push [ebp+lpFileName]  +
mov [ebp+var_4] ebx +
call esi  +
mov [ebp+hObject] eax +
cmp eax 0FFFFFFFFh +
jz loc_10077FE  +
push 50h  +
call sub_100E412  +
pop ecx  +
push [ebp+hObject]  +
call ds:CloseHandle  +
xor eax eax +
jmp loc_100786C  +
push ebx  +
push [ebp+lpFileName]  +
call ds:CreateDirectoryW  +
test eax eax +
jnz loc_100781B  +
call ds:GetLastError  +
push eax  +
call sub_100E412  +
pop ecx  +
jmp loc_10077FA  +
push ebx  +
push edi  +
push 3  +
push ebx  +
push 3  +
push 0C0000000h  +
push [ebp+lpFileName]  +
call esi  +
mov esi eax +
cmp esi 0FFFFFFFFh +
jz loc_100780C  +
push ebx  +
lea eax [ebp+BytesReturned] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 98168h  +
push esi  +
call ds:DeviceIoControl  +
test eax eax +
jnz loc_100785B  +
call ds:GetLastError  +
push eax  +
call sub_100E412  +
pop ecx  +
jmp loc_1007862  +
mov [ebp+var_4] 1 +
push esi  +
call ds:CloseHandle  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+lpFileName]  +
xor esi esi +
push 40000000h  +
call sub_1007773  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jnz loc_10078A4  +
call ds:GetLastError  +
push eax  +
call sub_100E412  +
pop ecx  +
jmp loc_10078D6  +
push esi  +
lea eax [ebp+lpFileName] +
push eax  +
push esi  +
push esi  +
push esi  +
push esi  +
push 9815Ch  +
push edi  +
call ds:DeviceIoControl  +
test eax eax +
jnz loc_10078CC  +
call ds:GetLastError  +
push eax  +
call sub_100E412  +
pop ecx  +
jmp loc_10078CF  +
xor esi esi +
inc esi  +
push edi  +
call ds:CloseHandle  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
inc eax  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 414h +
mov eax dword_1011584 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+lpFileName] +
push esi  +
push 0  +
lea ecx [ebp+Buffer] +
push ecx  +
mov esi 104h +
push esi  +
push eax  +
call ds:GetFullPathNameW  +
test eax eax +
jz loc_1007978  +
push esi  +
lea eax [ebp+var_414] +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
call ds:GetVolumePathNameW  +
test eax eax +
jz loc_1007978  +
lea ecx [ebp+Buffer] +
lea eax [ebp+var_414] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100796C  +
test dx dx +
jz loc_1007968  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100796C  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_1007946  +
xor eax eax +
jmp loc_1007971  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_1007978  +
inc eax  +
jmp loc_100797A  +
xor eax eax +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_100F411  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpFileName]  +
call sub_10078EE  +
test eax eax +
mov eax offset aExtendRmmetada +
jnz loc_10079A9  +
mov eax offset aTxflogTxflogTx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpFileName]  +
call sub_10078EE  +
test eax eax +
mov eax offset aExtendRmmeta_0 +
jnz loc_10079CD  +
mov eax offset aTxflogTxflogKt +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 1 +
jz loc_1007A08  +
push 40002789h  +
call sub_100E4FD  +
pop ecx  +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov eax [ebp+0Ch] +
push dword ptr [eax]  +
call sub_10077B5  +
test eax eax +
jz loc_1007A01  +
push 40002797h  +
call sub_100E4FD  +
pop ecx  +
xor eax eax +
jmp loc_1007A04  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
cmp ebx 1 +
jge loc_1007A5E  +
push 4000277Fh  +
call sub_100E4FD  +
xor eax eax +
pop ecx  +
inc eax  +
jmp loc_1007AA6  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
push dword ptr [esi]  +
mov edi offset off_1011530 +
push edi  +
call sub_10055A3  +
test eax eax +
jnz loc_1007A9B  +
push dword ptr [esi]  +
push 400027E7h  +
call sub_100E4FD  +
pop ecx  +
pop ecx  +
push offset a?_0  +
push edi  +
call sub_10055A3  +
add esi 4 +
push esi  +
dec ebx  +
push ebx  +
call dword ptr [eax+4]  +
xor eax eax +
inc eax  +
jmp loc_1007AA4  +
add esi 4 +
push esi  +
dec ebx  +
push ebx  +
call dword ptr [eax+4]  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 1 +
jz loc_1007ACD  +
push 4000278Bh  +
call sub_100E4FD  +
pop ecx  +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
mov eax [ebp+arg_4] +
push dword ptr [eax]  +
call sub_1007878  +
test eax eax +
jz loc_1007AC6  +
push 40002797h  +
call sub_100E4FD  +
pop ecx  +
xor eax eax +
jmp loc_1007AC9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
test ecx ecx +
jz loc_1007AFF  +
cmp ecx [ebp+arg_4] +
jbe loc_1007B04  +
mov eax 80070057h +
test eax eax +
jl loc_1007B3D  +
mov eax [ebp+arg_0] +
push edi  +
xor edi edi +
mov edx ecx +
test ecx ecx +
jz loc_1007B22  +
cmp [eax] di +
jz loc_1007B1E  +
inc eax  +
inc eax  +
dec edx  +
jnz loc_1007B14  +
test edx edx +
jnz loc_1007B27  +
mov edi 80070057h +
test esi esi +
jz loc_1007B38  +
test edi edi +
jl loc_1007B35  +
sub ecx edx +
mov [esi] ecx +
jmp loc_1007B38  +
and dword ptr [esi] 0 +
mov eax edi +
pop edi  +
jmp loc_1007B40  +
and dword ptr [esi] 0 +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_1007B7E  +
cmp [ebp+arg_4] eax +
jz loc_1007B7A  +
movzx edx word ptr [ebx] +
test dx dx +
jz loc_1007B7A  +
mov [ecx] dx +
inc ecx  +
inc ecx  +
inc ebx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_1007B5D  +
test esi esi +
jnz loc_1007B86  +
dec ecx  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
xor edx edx +
mov [ecx] dx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1007B94  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
shr edx 1 +
push 0  +
pop eax  +
jz loc_1007BB7  +
cmp edx 7FFFFFFFh +
jbe loc_1007BBC  +
mov eax 80070057h +
test eax eax +
jl loc_1007BD2  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_1007B49  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov ebx 7FFFFFFFh +
push ebx  +
push [ebp+arg_0]  +
shr edi 1 +
lea esi [ebp+arg_4] +
mov ecx edi +
call sub_1007AEF  +
test eax eax +
jl loc_1007C17  +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_0] +
push ebx  +
mov edx edi +
sub edx eax +
lea ecx [ecx+eax*2] +
mov eax [ebp+arg_8] +
push 0  +
call sub_1007B49  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
push 7FFFFFFFh  +
shr edi 1 +
push ebx  +
lea esi [ebp+arg_4] +
mov ecx edi +
call sub_1007AEF  +
test eax eax +
jl loc_1007C6F  +
mov eax [ebp+arg_C] +
shr eax 1 +
cmp eax 7FFFFFFEh +
jbe loc_1007C5A  +
mov eax 80070057h +
jmp loc_1007C6F  +
push eax  +
mov eax [ebp+arg_4] +
mov edx edi +
sub edx eax +
lea ecx [ebx+eax*2] +
mov eax [ebp+arg_8] +
push 0  +
call sub_1007B49  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
shr ecx 1 +
push 0  +
pop eax  +
jz loc_1007C92  +
cmp ecx 7FFFFFFFh +
jbe loc_1007C97  +
mov eax 80070057h +
test eax eax +
jl loc_1007CD4  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_1007CC4  +
cmp eax esi +
ja loc_1007CC4  +
jnz loc_1007CCF  +
jmp loc_1007CC9  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 320h +
mov eax dword_1011584 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
movzx eax word ptr [esi] +
xor ebx ebx +
push eax  +
mov [ebp+var_314] ebx +
call ds:isalpha  +
pop ecx  +
test eax eax +
jz loc_1007D3A  +
cmp word ptr [esi+2] 3Ah +
jnz loc_1007D3A  +
cmp [esi+4] bx +
jnz loc_1007D3A  +
mov ax [esi] +
push 3Ah  +
mov word ptr [ebp+var_C] ax +
pop eax  +
mov word ptr [ebp+var_C+2] ax +
push 5Ch  +
pop eax  +
mov [ebp+var_8] ax +
xor eax eax +
mov [ebp+var_6] ax +
lea eax [ebp+var_C] +
push eax  +
jmp loc_1007D3B  +
push esi  +
push 80000000h  +
call sub_1007773  +
mov [ebp+hObject] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1007D62  +
call ds:GetLastError  +
push eax  +
call sub_100E412  +
pop ecx  +
jmp loc_100821F  +
push edi  +
mov edi 1000h +
push edi  +
call ds:malloc  +
mov esi eax +
pop ecx  +
cmp esi ebx +
jz loc_1008212  +
push ebx  +
lea eax [ebp+BytesReturned] +
push eax  +
push edi  +
mov edi ds:DeviceIoControl +
push esi  +
push ebx  +
push ebx  +
push 94148h  +
push [ebp+hObject]  +
call edi  +
test eax eax +
jnz loc_1007E04  +
call ds:GetLastError  +
cmp eax 0EAh +
jnz loc_1007DF3  +
mov eax [esi] +
push esi  +
mov [ebp+nOutBufferSize] eax +
call ds:free  +
push [ebp+nOutBufferSize]  +
call ds:malloc  +
mov esi eax +
pop ecx  +
pop ecx  +
cmp esi ebx +
jz loc_1008212  +
push ebx  +
lea eax [ebp+BytesReturned] +
push eax  +
push [ebp+nOutBufferSize]  +
push esi  +
push ebx  +
push ebx  +
push 94148h  +
push [ebp+hObject]  +
call edi  +
test eax eax +
jnz loc_1007E04  +
call ds:GetLastError  +
push eax  +
call sub_100E412  +
jmp loc_1008209  +
push 64h  +
lea eax [ebp+var_304] +
push eax  +
lea eax [esi+98h] +
push eax  +
mov [ebp+var_314] 1 +
call sub_100EA29  +
lea eax [ebp+var_304] +
push eax  +
push 400027A3h  +
call sub_100E4FD  +
pop ecx  +
pop ecx  +
cmp [ebp+arg_4] ebx +
jz loc_100820A  +
mov eax [esi+0A8h] +
cmp eax ebx +
jbe loc_1007E58  +
add eax esi +
push eax  +
push 400027A4h  +
call sub_100E4FD  +
pop ecx  +
pop ecx  +
mov eax [esi+60h] +
mov ecx [esi+64h] +
shrd eax ecx +
shr ecx 14h +
push ecx  +
push eax  +
mov edi offset aD +
push edi  +
lea eax [ebp+var_124] +
push 28h  +
push eax  +
call sub_1007C7B  +
add esp 14h +
push ebx  +
push 64h  +
push dword ptr [esi+6Ch]  +
push dword ptr [esi+68h]  +
call __allmul  +
push dword ptr [esi+64h]  +
push dword ptr [esi+60h]  +
push edx  +
push eax  +
call __aulldiv  +
push 64h  +
pop ecx  +
push 0  +
sub ecx eax +
pop eax  +
sbb eax edx +
push eax  +
push ecx  +
push edi  +
lea eax [ebp+var_214] +
push 28h  +
push eax  +
call sub_1007C7B  +
lea eax [ebp+var_214] +
push eax  +
lea eax [ebp+var_124] +
push eax  +
push 400027A5h  +
call sub_100E4FD  +
mov eax [esi+4Ch] +
add esp 20h +
sub eax ebx +
jz loc_1007EFB  +
dec eax  +
jz loc_1007EF4  +
dec eax  +
jz loc_1007EED  +
dec eax  +
jz loc_1007EE6  +
push 40002815h  +
jmp loc_1007F00  +
push 40002814h  +
jmp loc_1007F00  +
push 40002813h  +
jmp loc_1007F00  +
push 40002812h  +
jmp loc_1007F00  +
push 40002811h  +
call sub_100E4FD  +
pop ecx  +
push dword ptr [esi+74h]  +
lea eax [ebp+var_84] +
push dword ptr [esi+70h]  +
push edi  +
push 28h  +
push eax  +
call sub_1007C7B  +
push dword ptr [esi+7Ch]  +
lea eax [ebp+var_174] +
push dword ptr [esi+78h]  +
push edi  +
push 28h  +
push eax  +
call sub_1007C7B  +
push dword ptr [esi+84h]  +
lea eax [ebp+var_5C] +
push dword ptr [esi+80h]  +
push edi  +
push 28h  +
push eax  +
call sub_1007C7B  +
push dword ptr [esi+8Ch]  +
lea eax [ebp+var_1C4] +
push dword ptr [esi+88h]  +
push edi  +
push 28h  +
push eax  +
call sub_1007C7B  +
add esp 50h +
lea eax [ebp+var_1C4] +
push eax  +
lea eax [ebp+var_5C] +
push eax  +
lea eax [ebp+var_174] +
push eax  +
lea eax [ebp+var_84] +
push eax  +
push 400027A6h  +
call sub_100E4FD  +
mov ecx [esi+94h] +
mov eax [esi+90h] +
add esp 14h +
push ebx  +
push 36EE80h  +
push ecx  +
push eax  +
call __aulldiv  +
push ebx  +
push 3Ch  +
push edx  +
push eax  +
mov dword ptr [ebp+var_320] eax +
mov [ebp+var_31C] edx +
call __allmul  +
push 0  +
push 0EA60h  +
push dword ptr [esi+94h]  +
mov edi eax +
push dword ptr [esi+90h]  +
mov ebx edx +
call __aulldiv  +
sub eax edi +
sbb edx ebx +
push 0  +
add edi eax +
push 3Ch  +
adc ebx edx +
push ebx  +
push edi  +
mov [ebp+var_310] eax +
mov [ebp+nOutBufferSize] edx +
call __allmul  +
push 0  +
push 3E8h  +
push dword ptr [esi+94h]  +
mov edi eax +
push dword ptr [esi+90h]  +
mov ebx edx +
call __aulldiv  +
sub eax edi +
sbb edx ebx +
push edx  +
push eax  +
push [ebp+nOutBufferSize]  +
lea eax [ebp+var_2A0] +
push [ebp+var_310]  +
push [ebp+var_31C]  +
push dword ptr [ebp+var_320]  +
push offset a02lld02lld02ll  +
push 64h  +
push eax  +
call sub_1007C7B  +
lea eax [ebp+var_2A0] +
push eax  +
push 400027A7h  +
call sub_100E4FD  +
add esp 2Ch +
test byte ptr [esi+48h] 2 +
jz loc_1008064  +
push 400027A8h  +
jmp loc_1008069  +
push 400027A9h  +
call sub_100E4FD  +
pop ecx  +
push dword ptr [esi+30h]  +
mov edi offset aD +
push edi  +
push 28h  +
pop ebx  +
lea eax [ebp+var_19C] +
push ebx  +
push eax  +
call sub_1007C7B  +
mov eax [esi+20h] +
mov ecx [esi+24h] +
shrd eax ecx +
shr ecx 14h +
push ecx  +
push eax  +
push edi  +
lea eax [ebp+var_14C] +
push ebx  +
push eax  +
call sub_1007C7B  +
mov eax [esi+50h] +
mov ecx [esi+54h] +
shrd eax ecx +
shr ecx 14h +
push ecx  +
push eax  +
push edi  +
lea eax [ebp+var_FC] +
push ebx  +
push eax  +
call sub_1007C7B  +
mov eax [esi+58h] +
mov ecx [esi+5Ch] +
shrd eax ecx +
shr ecx 14h +
push ecx  +
push eax  +
push edi  +
lea eax [ebp+var_AC] +
push ebx  +
push eax  +
call sub_1007C7B  +
add esp 4Ch +
push dword ptr [esi+3Ch]  +
lea eax [ebp+var_34] +
push edi  +
push ebx  +
push eax  +
call sub_1007C7B  +
lea eax [ebp+var_AC] +
push eax  +
lea eax [ebp+var_FC] +
push eax  +
lea eax [ebp+var_14C] +
push eax  +
lea eax [ebp+var_19C] +
push eax  +
push 400027AAh  +
call sub_100E4FD  +
mov eax [esi+38h] +
add esp 24h +
test eax eax +
jnz loc_100812D  +
push 400027ADh  +
call sub_100E4FD  +
pop ecx  +
jmp loc_1008150  +
push eax  +
push edi  +
lea eax [ebp+var_1EC] +
push ebx  +
push eax  +
call sub_1007C7B  +
lea eax [ebp+var_1EC] +
push eax  +
push 400027AEh  +
call sub_100E4FD  +
add esp 18h +
mov eax [esi+34h] +
test eax eax +
jnz loc_1008164  +
push 400027ABh  +
call sub_100E4FD  +
pop ecx  +
jmp loc_1008187  +
push eax  +
push edi  +
lea eax [ebp+var_23C] +
push ebx  +
push eax  +
call sub_1007C7B  +
lea eax [ebp+var_23C] +
push eax  +
push 400027ACh  +
call sub_100E4FD  +
add esp 18h +
test byte ptr [esi+44h] 20h +
lea eax [ebp+var_34] +
push eax  +
jz loc_1008198  +
push 400027AFh  +
jmp loc_100819D  +
push 400027B0h  +
call sub_100E4FD  +
mov eax [esi+40h] +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_10081B8  +
push 400027B1h  +
call sub_100E4FD  +
pop ecx  +
jmp loc_10081DB  +
push eax  +
push edi  +
lea eax [ebp+var_D4] +
push ebx  +
push eax  +
call sub_1007C7B  +
lea eax [ebp+var_D4] +
push eax  +
push 400027B2h  +
call sub_100E4FD  +
add esp 18h +
test dword ptr [esi+44h] 10000h +
jz loc_10081EB  +
push 4000281Fh  +
jmp loc_10081F0  +
push 40002820h  +
call sub_100E4FD  +
test dword ptr [esi+44h] 4000h +
pop ecx  +
jz loc_100820A  +
push 40002816h  +
call sub_100E4FD  +
pop ecx  +
push esi  +
call ds:free  +
pop ecx  +
push [ebp+hObject]  +
call ds:CloseHandle  +
pop edi  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_314] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100F411  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A4h +
mov eax dword_1011584 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+lpFileName] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push eax  +
xor edi edi +
push 0C0000000h  +
mov [ebp+var_A4] esi +
mov [ebp+var_94] edi +
call sub_1007773  +
mov [ebp+hObject] eax +
cmp eax 0FFFFFFFFh +
jnz loc_100828D  +
call ds:GetLastError  +
push eax  +
call sub_100E412  +
pop ecx  +
jmp loc_1008523  +
push edi  +
lea ecx [ebp+BytesReturned] +
push ecx  +
push edi  +
push edi  +
mov edi ds:DeviceIoControl +
push 28h  +
push esi  +
push 98144h  +
push eax  +
call edi  +
test eax eax +
jnz loc_10082BE  +
call ds:GetLastError  +
push eax  +
call sub_100E412  +
pop ecx  +
jmp loc_1008517  +
push ebx  +
mov ebx 1000h +
push ebx  +
call ds:malloc  +
mov esi eax +
xor eax eax +
pop ecx  +
cmp esi eax +
jz loc_1008516  +
push eax  +
lea ecx [ebp+BytesReturned] +
push ecx  +
push ebx  +
push esi  +
push eax  +
push eax  +
mov ebx 94148h +
push ebx  +
push [ebp+hObject]  +
call edi  +
test eax eax +
jnz loc_1008398  +
call ds:GetLastError  +
cmp eax 0EAh +
jnz loc_1008360  +
mov eax [esi] +
push esi  +
mov [ebp+nOutBufferSize] eax +
call ds:free  +
push [ebp+nOutBufferSize]  +
call ds:malloc  +
mov esi eax +
xor eax eax +
pop ecx  +
pop ecx  +
cmp esi eax +
jz loc_1008516  +
push eax  +
lea ecx [ebp+BytesReturned] +
push ecx  +
push [ebp+nOutBufferSize]  +
push esi  +
push eax  +
push eax  +
push ebx  +
push [ebp+hObject]  +
call edi  +
test eax eax +
jnz loc_1008398  +
call ds:GetLastError  +
push eax  +
call sub_100E412  +
pop ecx  +
jmp loc_100850E  +
mov edi ds:GetLastError +
call edi  +
cmp eax 1A91h +
jnz loc_1008394  +
mov eax [ebp+var_A4] +
test dword ptr [eax] 0C000h +
jz loc_1008394  +
push 0  +
mov [ebp+var_94] 1 +
call ds:SetLastError  +
jmp loc_100850E  +
call edi  +
jmp loc_1008354  +
mov ebx [ebp+var_A4] +
test byte ptr [ebx] 2 +
mov [ebp+var_94] 1 +
jz loc_10083D5  +
push 64h  +
lea eax [ebp+var_90] +
push eax  +
lea eax [esi+98h] +
push eax  +
call sub_100EA29  +
lea eax [ebp+var_90] +
push eax  +
push 400027A3h  +
call sub_100E4FD  +
pop ecx  +
pop ecx  +
test dword ptr [ebx] 0C00h +
mov edi offset aD +
jz loc_1008402  +
push dword ptr [esi+30h]  +
lea eax [ebp+var_2C] +
push edi  +
push 28h  +
push eax  +
call sub_1007C7B  +
lea eax [ebp+var_2C] +
push eax  +
push 400027B3h  +
call sub_100E4FD  +
add esp 18h +
test byte ptr [ebx] 1 +
jz loc_1008425  +
movzx eax word ptr [esi+48h] +
test al 1 +
jz loc_1008416  +
push 400027A9h  +
jmp loc_100841F  +
test al 2 +
jz loc_1008425  +
push 400027A8h  +
call sub_100E4FD  +
pop ecx  +
test byte ptr [ebx] 4 +
jz loc_100845C  +
mov eax [esi+34h] +
test eax eax +
jnz loc_100843E  +
push 400027ABh  +
call sub_100E4FD  +
pop ecx  +
jmp loc_100845C  +
push eax  +
push edi  +
lea eax [ebp+var_2C] +
push 28h  +
push eax  +
call sub_1007C7B  +
lea eax [ebp+var_2C] +
push eax  +
push 400027ACh  +
call sub_100E4FD  +
add esp 18h +
test byte ptr [ebx] 8 +
jz loc_1008493  +
mov eax [esi+38h] +
test eax eax +
jnz loc_1008475  +
push 400027ADh  +
call sub_100E4FD  +
pop ecx  +
jmp loc_1008493  +
push eax  +
push edi  +
lea eax [ebp+var_2C] +
push 28h  +
push eax  +
call sub_1007C7B  +
lea eax [ebp+var_2C] +
push eax  +
push 400027AEh  +
call sub_100E4FD  +
add esp 18h +
test byte ptr [ebx] 40h +
jz loc_10084CA  +
mov eax [esi+40h] +
test eax eax +
jnz loc_10084AC  +
push 400027B1h  +
call sub_100E4FD  +
pop ecx  +
jmp loc_10084CA  +
push eax  +
push edi  +
lea eax [ebp+var_2C] +
push 28h  +
push eax  +
call sub_1007C7B  +
lea eax [ebp+var_2C] +
push eax  +
push 400027B2h  +
call sub_100E4FD  +
add esp 18h +
mov eax [ebx] +
test al 20h +
jz loc_10084EA  +
push dword ptr [esi+3Ch]  +
lea eax [ebp+var_2C] +
push edi  +
push 28h  +
push eax  +
call sub_1007C7B  +
lea eax [ebp+var_2C] +
push eax  +
push 400027AFh  +
jmp loc_1008506  +
test al 10h +
jz loc_100850E  +
push dword ptr [esi+3Ch]  +
lea eax [ebp+var_2C] +
push edi  +
push 28h  +
push eax  +
call sub_1007C7B  +
lea eax [ebp+var_2C] +
push eax  +
push 400027B0h  +
call sub_100E4FD  +
add esp 18h +
push esi  +
call ds:free  +
pop ecx  +
pop ebx  +
push [ebp+hObject]  +
call ds:CloseHandle  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_94] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100F411  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 1088h +
call __alloca_probe  +
mov eax dword_1011584 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
mov edx [ebp+arg_4] +
push ebx  +
push esi  +
mov [ebp+hObject] eax +
xor eax eax +
push edi  +
mov edi [ebp+arg_0] +
mov word ptr [ebp+var_101C] ax +
mov word ptr [ebp+var_101C+2] ax +
xor ebx ebx +
mov word ptr [ebp+var_1024] ax +
mov word ptr [ebp+var_1024+2] ax +
mov eax edi +
mov [ebp+lpFileName] edi +
mov [ebp+var_1008] edx +
mov [ebp+var_1018] ebx +
mov [ebp+var_1020] ebx +
lea ecx [eax+2] +
mov si [eax] +
inc eax  +
inc eax  +
cmp si bx +
jnz loc_10085A6  +
sub eax ecx +
sar eax 1 +
mov ecx eax +
mov eax edx +
lea edx [eax+2] +
mov si [eax] +
inc eax  +
inc eax  +
cmp si bx +
jnz loc_10085BB  +
sub eax edx +
sar eax 1 +
lea esi [ecx+eax*2] +
lea esi [esi+esi+6] +
mov eax edi +
mov [ebp+var_102C] esi +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx bx +
jnz loc_10085DB  +
sub eax ecx +
sar eax 1 +
mov ecx eax +
mov eax [ebp+hObject] +
lea edx [eax+2] +
mov di [eax] +
inc eax  +
inc eax  +
cmp di bx +
jnz loc_10085F4  +
sub eax edx +
sar eax 1 +
lea eax [ecx+eax*2] +
lea eax [eax+eax+6] +
push esi  +
mov [ebp+var_1014] eax +
call ds:malloc  +
mov edi eax +
pop ecx  +
mov [ebp+lpPathName] edi +
cmp edi ebx +
jnz loc_100862A  +
xor eax eax +
jmp loc_1008B8C  +
push esi  +
push ebx  +
push edi  +
call memset  +
add esp 0Ch +
cmp [ebp+arg_C] bl +
jz loc_1008647  +
push [ebp+lpFileName]  +
push esi  +
push edi  +
call sub_1007BA0  +
push 5Ch  +
push [ebp+var_1008]  +
call ds:wcsrchr  +
mov esi ds:CreateFileW +
pop ecx  +
pop ecx  +
mov [ebp+var_1030] eax +
mov edi 2000000h +
cmp eax ebx +
jz loc_10086F8  +
sub eax [ebp+var_1008] +
push eax  +
push [ebp+var_1008]  +
push [ebp+var_102C]  +
push [ebp+lpPathName]  +
call sub_1007C23  +
push ebx  +
push edi  +
push 3  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+lpPathName]  +
call esi  +
cmp eax 0FFFFFFFFh +
jnz loc_10086C5  +
push ebx  +
push [ebp+lpPathName]  +
call ds:CreateDirectoryW  +
test eax eax +
jnz loc_10086CC  +
call ds:GetLastError  +
push eax  +
call sub_100E412  +
pop ecx  +
jmp loc_1008623  +
push eax  +
call ds:CloseHandle  +
push [ebp+lpPathName]  +
call ds:GetFileAttributesW  +
test eax 4000h +
jz loc_10086F0  +
push ebx  +
push [ebp+lpPathName]  +
call ds:DecryptFileW  +
test eax eax +
jz loc_10086B3  +
push [ebp+var_1030]  +
jmp loc_10086FE  +
push [ebp+var_1008]  +
push [ebp+var_102C]  +
push [ebp+lpPathName]  +
call sub_1007BDB  +
push [ebp+var_1014]  +
call ds:malloc  +
pop ecx  +
mov [ebp+var_1008] eax +
cmp eax ebx +
jz loc_1008623  +
push [ebp+var_1014]  +
push ebx  +
push eax  +
call memset  +
add esp 0Ch +
cmp [ebp+arg_C] bl +
jz loc_1008756  +
push [ebp+lpFileName]  +
push [ebp+var_1014]  +
push [ebp+var_1008]  +
call sub_1007BA0  +
push 5Ch  +
push [ebp+hObject]  +
call ds:wcsrchr  +
pop ecx  +
pop ecx  +
mov [ebp+var_1030] eax +
cmp eax ebx +
jz loc_10087ED  +
sub eax [ebp+hObject] +
push eax  +
push [ebp+hObject]  +
push [ebp+var_1014]  +
push [ebp+var_1008]  +
call sub_1007C23  +
push ebx  +
push edi  +
mov edi [ebp+var_1008] +
push 3  +
push ebx  +
push ebx  +
push ebx  +
push edi  +
call esi  +
cmp eax 0FFFFFFFFh +
jnz loc_10087B9  +
push ebx  +
push [ebp+lpPathName]  +
call ds:CreateDirectoryW  +
test eax eax +
jnz loc_10087C0  +
jmp loc_10086B3  +
push eax  +
call ds:CloseHandle  +
push edi  +
call ds:GetFileAttributesW  +
test eax 4000h +
jz loc_10087DE  +
push ebx  +
push edi  +
call ds:DecryptFileW  +
test eax eax +
jz loc_10086B3  +
push [ebp+var_1030]  +
push [ebp+var_1014]  +
push edi  +
jmp loc_10087FF  +
push [ebp+hObject]  +
push [ebp+var_1014]  +
push [ebp+var_1008]  +
call sub_1007BDB  +
push [ebp+lpPathName]  +
mov edi ds:RtlInitUnicodeString +
push offset unk_1011908  +
call edi  +
mov esi ds:RtlDosPathNameToNtPathName_U +
push ebx  +
push ebx  +
lea eax [ebp+var_101C] +
push eax  +
push dword_101190C  +
call esi  +
test al al +
jnz loc_100883E  +
push 3  +
call sub_100E412  +
jmp loc_1008AA3  +
push [ebp+var_1008]  +
push offset unk_1011908  +
call edi  +
push ebx  +
push ebx  +
lea eax [ebp+var_1024] +
push eax  +
push dword_101190C  +
call esi  +
test al al +
jz loc_1008832  +
push [ebp+lpPathName]  +
mov edi ds:free +
call edi  +
push [ebp+var_1008]  +
mov [ebp+lpPathName] ebx +
call edi  +
movzx eax word ptr [ebp+var_101C] +
movzx ecx word ptr [ebp+var_1024] +
add eax 33h +
and eax 0FFFFFFFEh +
lea edi [eax+ecx+2] +
push edi  +
mov [ebp+var_1008] ebx +
call ds:malloc  +
mov esi eax +
add esp 0Ch +
cmp esi ebx +
jz loc_1008AA4  +
push edi  +
push ebx  +
push esi  +
call memset  +
mov ax word ptr [ebp+var_101C] +
mov [esi+28h] ax +
movzx eax word ptr [ebp+var_101C] +
add esp 0Ch +
push [ebp+var_1018]  +
inc eax  +
inc eax  +
push eax  +
lea eax [esi+2Ch] +
push eax  +
call sub_1007BA0  +
push [ebp+var_1018]  +
mov eax large fs:18h +
mov eax [eax+30h] +
push ebx  +
push dword ptr [eax+18h]  +
call ds:RtlFreeHeap  +
mov [ebp+var_1018] ebx +
movzx eax word ptr [esi+28h] +
add eax 33h +
and eax 0FFFFFFFEh +
mov [esi+20h] eax +
mov ax word ptr [ebp+var_1024] +
mov [esi+24h] ax +
movzx eax word ptr [ebp+var_1024] +
push [ebp+var_1020]  +
inc eax  +
inc eax  +
push eax  +
mov eax [esi+20h] +
add eax esi +
push eax  +
call sub_1007BA0  +
push [ebp+var_1020]  +
mov eax large fs:18h +
mov eax [eax+30h] +
push ebx  +
push dword ptr [eax+18h]  +
call ds:RtlFreeHeap  +
push [ebp+lpFileName]  +
mov [ebp+var_1020] ebx +
push 40000000h  +
call sub_1007773  +
mov [ebp+hObject] eax +
cmp eax 0FFFFFFFFh +
jnz loc_100897B  +
call ds:GetLastError  +
push eax  +
call sub_100E412  +
pop ecx  +
jmp loc_1008A98  +
push ebx  +
lea ecx [ebp+BytesReturned] +
push ecx  +
push ebx  +
push ebx  +
push edi  +
push esi  +
push 98158h  +
push eax  +
call ds:DeviceIoControl  +
test eax eax +
jnz loc_10089C7  +
mov edi ds:GetLastError +
call edi  +
cmp eax 1AA6h +
jnz loc_10089C0  +
call edi  +
push eax  +
call sub_100E412  +
pop ecx  +
push [ebp+hObject]  +
call ds:CloseHandle  +
jmp loc_1008623  +
call edi  +
jmp loc_1008A85  +
push esi  +
call ds:free  +
mov edi 1000h +
push edi  +
lea eax [ebp+CommandLine] +
push ebx  +
push eax  +
xor esi esi +
call memset  +
add esp 10h +
push ebx  +
lea eax [ebp+BytesReturned] +
push eax  +
push edi  +
lea eax [ebp+CommandLine] +
push eax  +
push edi  +
push eax  +
push 98150h  +
push [ebp+hObject]  +
call ds:DeviceIoControl  +
test eax eax +
jnz loc_1008A1C  +
call ds:GetLastError  +
cmp eax 1AA5h +
jz loc_1008A3D  +
jmp loc_1008A7F  +
push ebx  +
lea eax [ebp+BytesReturned] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 98154h  +
push [ebp+hObject]  +
call ds:DeviceIoControl  +
test eax eax +
jz loc_1008A7F  +
push 44h  +
lea eax [ebp+StartupInfo] +
push ebx  +
push eax  +
call memset  +
add esp 0Ch +
push 800h  +
lea eax [ebp+CommandLine] +
push eax  +
call ds:GetSystemDirectoryW  +
test eax eax +
jz loc_1008A7F  +
push offset aCmd_exe  +
push edi  +
lea eax [ebp+CommandLine] +
push eax  +
call sub_1007BDB  +
test eax eax +
jz loc_1008B18  +
call ds:GetLastError  +
push eax  +
call sub_100E412  +
pop ecx  +
push [ebp+hObject]  +
call ds:CloseHandle  +
cmp esi ebx +
jz loc_1008AA4  +
push esi  +
call ds:free  +
pop ecx  +
cmp [ebp+var_1018] ebx +
jz loc_1008AC5  +
push [ebp+var_1018]  +
mov eax large fs:18h +
mov eax [eax+30h] +
push ebx  +
push dword ptr [eax+18h]  +
call ds:RtlFreeHeap  +
cmp [ebp+var_1020] ebx +
jz loc_1008AE6  +
push [ebp+var_1020]  +
mov eax large fs:18h +
mov eax [eax+30h] +
push ebx  +
push dword ptr [eax+18h]  +
call ds:RtlFreeHeap  +
cmp [ebp+lpPathName] ebx +
jz loc_1008AFB  +
push [ebp+lpPathName]  +
call ds:free  +
pop ecx  +
cmp [ebp+var_1008] ebx +
jz loc_1008623  +
push [ebp+var_1008]  +
call ds:free  +
jmp loc_10086BF  +
lea eax [ebp+hHandle] +
push eax  +
lea eax [ebp+StartupInfo] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push 1  +
push ebx  +
push ebx  +
lea eax [ebp+CommandLine] +
push eax  +
push eax  +
call ds:CreateProcessW  +
test eax eax +
jz loc_1008B7D  +
mov esi ds:SetConsoleCtrlHandler +
push 1  +
mov edi offset HandlerRoutine +
push edi  +
call esi  +
push 0FFFFFFFFh  +
push [ebp+hHandle]  +
call ds:WaitForSingleObject  +
test eax eax +
jnz loc_1008B4F  +
push [ebp+hHandle]  +
call ds:CloseHandle  +
push dword ptr [ebp-1040h]  +
call ds:CloseHandle  +
push ebx  +
push edi  +
call esi  +
push [ebp+hObject]  +
call ds:CloseHandle  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100F411  +
leave   +
retn 10h  +
***
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 1 +
jz loc_1008BBD  +
push 4000278Ch  +
call sub_100E4FD  +
xor eax eax +
pop ecx  +
inc eax  +
jmp loc_1008BCE  +
mov eax [ebp+0Ch] +
push 1  +
push dword ptr [eax]  +
call sub_1007CDB  +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
push ebp  +
mov ebp esp +
sub esp 28h +
cmp dword ptr [ebp+8] 2 +
push ebx  +
push esi  +
jnz loc_1008C27  +
mov esi [ebp+0Ch] +
push dword ptr [esi]  +
mov ebx ds:_wtoi +
call ebx  +
pop ecx  +
test eax eax +
jz loc_1008C27  +
push edi  +
push 0Ah  +
pop ecx  +
push dword ptr [esi]  +
xor eax eax +
lea edi [ebp-28h] +
stos   +
call ebx  +
pop ecx  +
push dword ptr [esi+4]  +
mov [ebp-1Ch] eax +
lea eax [ebp-28h] +
push eax  +
mov dword ptr [ebp-28h] 800h +
call sub_100823A  +
neg eax  +
sbb eax eax +
inc eax  +
pop edi  +
jmp loc_1008C35  +
push 4000278Fh  +
call sub_100E4FD  +
xor eax eax +
pop ecx  +
inc eax  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
cmp [ebp+arg_0] 2 +
push ebx  +
push esi  +
jnz loc_1008CB8  +
mov ebx [ebp+arg_4] +
mov esi ds:_wcsicmp +
push offset aFull  +
push dword ptr [ebx]  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1008C77  +
push offset aUndo  +
push dword ptr [ebx]  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1008CB8  +
push edi  +
push 0Ah  +
pop ecx  +
push offset aFull  +
push dword ptr [ebx]  +
xor eax eax +
lea edi [ebp+var_28] +
stos   +
call esi  +
pop ecx  +
pop ecx  +
pop edi  +
test eax eax +
jnz loc_1008C97  +
push 2  +
pop eax  +
jmp loc_1008C9A  +
xor eax eax +
inc eax  +
push dword ptr [ebx+4]  +
mov [ebp+var_8] ax +
lea eax [ebp+var_28] +
push eax  +
mov [ebp+var_28] 2001h +
call sub_100823A  +
neg eax  +
sbb eax eax +
inc eax  +
jmp loc_1008CC6  +
push 40002790h  +
call sub_100E4FD  +
xor eax eax +
pop ecx  +
inc eax  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
push ebp  +
mov ebp esp +
sub esp 28h +
cmp dword ptr [ebp+8] 1 +
jz loc_1008CEF  +
push 40002792h  +
call sub_100E4FD  +
xor eax eax +
pop ecx  +
inc eax  +
jmp locret_1008D15  +
push edi  +
push 0Ah  +
pop ecx  +
xor eax eax +
lea edi [ebp-28h] +
stos   +
mov eax [ebp+0Ch] +
push dword ptr [eax]  +
lea eax [ebp-28h] +
push eax  +
mov dword ptr [ebp-28h] 2 +
call sub_100823A  +
neg eax  +
sbb eax eax +
inc eax  +
pop edi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
cmp [ebp+arg_0] 2 +
push ebx  +
push esi  +
jnz loc_1008D6E  +
mov esi [ebp+arg_4] +
push dword ptr [esi]  +
mov ebx ds:_wtoi +
call ebx  +
pop ecx  +
test eax eax +
jz loc_1008D6E  +
push edi  +
push 0Ah  +
pop ecx  +
push dword ptr [esi]  +
xor eax eax +
lea edi [ebp+var_28] +
stos   +
mov [ebp+var_28] 2004h +
call ebx  +
pop ecx  +
push dword ptr [esi+4]  +
mov [ebp+var_24] eax +
lea eax [ebp+var_28] +
push eax  +
call sub_100823A  +
neg eax  +
sbb eax eax +
inc eax  +
pop edi  +
jmp loc_1008D7C  +
push 40002793h  +
call sub_100E4FD  +
xor eax eax +
pop ecx  +
inc eax  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
push ebp  +
mov ebp esp +
sub esp 28h +
cmp dword ptr [ebp+8] 2 +
push ebx  +
push esi  +
jnz loc_1008DD7  +
mov esi [ebp+0Ch] +
push dword ptr [esi]  +
mov ebx ds:_wtoi +
call ebx  +
pop ecx  +
test eax eax +
jz loc_1008DD7  +
push edi  +
push 0Ah  +
pop ecx  +
push dword ptr [esi]  +
xor eax eax +
lea edi [ebp-28h] +
stos   +
mov dword ptr [ebp-28h] 2008h +
call ebx  +
pop ecx  +
push dword ptr [esi+4]  +
mov [ebp-20h] eax +
lea eax [ebp-28h] +
push eax  +
call sub_100823A  +
neg eax  +
sbb eax eax +
inc eax  +
pop edi  +
jmp loc_1008DE5  +
push 40002794h  +
call sub_100E4FD  +
xor eax eax +
pop ecx  +
inc eax  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
cmp [ebp+arg_0] 2 +
push ebx  +
push esi  +
jnz loc_1008E53  +
mov ebx [ebp+arg_4] +
push dword ptr [ebx]  +
mov esi ds:_wtoi +
call esi  +
pop ecx  +
test eax eax +
jz loc_1008E53  +
push dword ptr [ebx]  +
call esi  +
cmp eax 64h +
pop ecx  +
jg loc_1008E53  +
push dword ptr [ebx]  +
call esi  +
pop ecx  +
test eax eax +
jl loc_1008E53  +
push edi  +
push 0Ah  +
pop ecx  +
push dword ptr [ebx]  +
xor eax eax +
lea edi [ebp+var_28] +
stos   +
mov [ebp+var_28] 2040h +
call esi  +
pop ecx  +
push dword ptr [ebx+4]  +
mov [ebp+var_14] eax +
lea eax [ebp+var_28] +
push eax  +
call sub_100823A  +
neg eax  +
sbb eax eax +
inc eax  +
pop edi  +
jmp loc_1008E61  +
push 40002796h  +
call sub_100E4FD  +
xor eax eax +
pop ecx  +
inc eax  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
cmp [ebp+arg_0] 3 +
push ebx  +
push esi  +
push edi  +
jnz loc_1008F01  +
mov esi [ebp+arg_4] +
push dword ptr [esi]  +
mov ebx ds:_wtoi +
call ebx  +
pop ecx  +
test eax eax +
jz loc_1008F01  +
push 0Ah  +
pop ecx  +
xor eax eax +
lea edi [ebp+var_28] +
push offset aPercent  +
push dword ptr [esi+4]  +
stos   +
mov edi ds:_wcsicmp +
call edi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1008ECF  +
push dword ptr [esi]  +
call ebx  +
pop ecx  +
test eax eax +
jle loc_1008F01  +
push dword ptr [esi]  +
call ebx  +
cmp eax 64h +
pop ecx  +
jg loc_1008F01  +
mov [ebp+var_28] 2020h +
jmp loc_1008EE6  +
push offset aContainers  +
push dword ptr [esi+4]  +
call edi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1008F01  +
mov [ebp+var_28] 2010h +
push dword ptr [esi]  +
call ebx  +
pop ecx  +
push dword ptr [esi+8]  +
mov [ebp+var_18] eax +
lea eax [ebp+var_28] +
push eax  +
call sub_100823A  +
neg eax  +
sbb eax eax +
inc eax  +
jmp loc_1008F0F  +
push 40002795h  +
call sub_100E4FD  +
xor eax eax +
pop ecx  +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+8] +
cmp eax 1 +
mov byte ptr [ebp-4] 0 +
jge loc_1008F3D  +
push 4000278Ah  +
call sub_100E4FD  +
xor eax eax +
pop ecx  +
inc eax  +
jmp locret_1008F56  +
dec eax  +
push esi  +
push edi  +
jz loc_1008F65  +
dec eax  +
dec eax  +
jz loc_1008F5A  +
push 4000278Ah  +
call sub_100E4FD  +
pop ecx  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov esi [ebp+0Ch] +
mov edi [esi+4] +
mov eax [esi+8] +
jmp loc_1008F7C  +
mov esi [ebp+0Ch] +
push dword ptr [esi]  +
call sub_100798E  +
push dword ptr [esi]  +
mov edi eax +
call sub_10079B2  +
mov byte ptr [ebp-4] 1 +
push dword ptr [ebp-4]  +
push eax  +
push edi  +
push dword ptr [esi]  +
call sub_100853E  +
test eax eax +
jz loc_1008F51  +
push 40002797h  +
call sub_100E4FD  +
pop ecx  +
xor eax eax +
jmp loc_1008F54  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
cmp [ebp+arg_0] 2 +
push ebx  +
push esi  +
jnz loc_1009023  +
mov esi [ebp+arg_4] +
mov ebx ds:_wcsicmp +
push offset aTrue  +
push dword ptr [esi]  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1008FD7  +
push offset aFalse  +
push dword ptr [esi]  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1009023  +
push edi  +
push 0Ah  +
pop ecx  +
push offset aTrue  +
push dword ptr [esi]  +
xor eax eax +
lea edi [ebp+var_28] +
stos   +
call ebx  +
pop ecx  +
pop ecx  +
push dword ptr [esi+4]  +
mov ecx eax +
neg ecx  +
sbb ecx ecx +
mov eax 4000h +
and ecx eax +
add ecx eax +
lea eax [ebp+var_28] +
push eax  +
mov [ebp+var_28] ecx +
call sub_100823A  +
pop edi  +
test eax eax +
jz loc_100901E  +
push 40002797h  +
call sub_100E4FD  +
xor eax eax +
jmp loc_1009030  +
xor eax eax +
inc eax  +
jmp loc_1009031  +
push 4000278Eh  +
call sub_100E4FD  +
xor eax eax +
inc eax  +
pop ecx  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
cmp [ebp+arg_0] 1 +
jz loc_100905C  +
push 4000281Dh  +
call sub_100E4FD  +
pop ecx  +
xor eax eax +
inc eax  +
leave   +
retn 8  +
push edi  +
push 0Ah  +
pop ecx  +
xor eax eax +
lea edi [ebp+var_28] +
stos   +
mov eax [ebp+arg_4] +
push dword ptr [eax]  +
lea eax [ebp+var_28] +
push eax  +
mov [ebp+var_28] 10000h +
call sub_100823A  +
pop edi  +
test eax eax +
jz loc_1009055  +
push 40002797h  +
call sub_100E4FD  +
pop ecx  +
xor eax eax +
jmp locret_1009058  +
***
push ebp  +
mov ebp esp +
sub esp 28h +
cmp dword ptr [ebp+8] 1 +
jz loc_10090B5  +
push 4000281Eh  +
call sub_100E4FD  +
pop ecx  +
xor eax eax +
inc eax  +
leave   +
retn 8  +
***
push edi  +
push 0Ah  +
pop ecx  +
xor eax eax +
lea edi [ebp-28h] +
stos   +
mov eax [ebp+0Ch] +
push dword ptr [eax]  +
lea eax [ebp-28h] +
push eax  +
mov dword ptr [ebp-28h] 20000h +
call sub_100823A  +
pop edi  +
test eax eax +
jz loc_10090AE  +
push 40002797h  +
call sub_100E4FD  +
pop ecx  +
xor eax eax +
jmp locret_10090B1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+arg_4] +
mov eax [ebp+arg_0] +
xor edx edx +
mov [ebp+arg_0] eax +
cmp [ecx] dx +
jz locret_1009165  +
push ebx  +
push esi  +
push edi  +
cmp [eax] dx +
jz loc_1009160  +
mov ebx ds:towupper +
sub eax ecx +
mov edi eax +
mov eax [ebp+arg_0] +
mov esi [ebp+arg_4] +
cmp [eax] dx +
jz loc_100914B  +
movzx eax word ptr [esi] +
test ax ax +
jz loc_1009167  +
push eax  +
call ebx  +
movzx eax ax +
mov [ebp+var_4] eax +
movzx eax word ptr [edi+esi] +
push eax  +
call ebx  +
movzx eax ax +
sub eax [ebp+var_4] +
pop ecx  +
pop ecx  +
jnz loc_100914B  +
inc esi  +
inc esi  +
cmp [edi+esi] ax +
jnz loc_1009121  +
xor edx edx +
cmp [esi] dx +
jz loc_1009167  +
add [ebp+arg_0] 2 +
mov eax [ebp+arg_0] +
inc edi  +
inc edi  +
cmp [eax] dx +
jnz loc_1009116  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
mov eax [ebp+arg_0] +
jmp loc_1009162  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ds:wcsrchr +
push 5Ch  +
push [ebp+arg_0]  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100919C  +
push 3Ah  +
push [ebp+arg_0]  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100919C  +
mov eax [ebp+arg_0] +
jmp loc_100919E  +
inc eax  +
inc eax  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
cmp eax 7FFFFFFFh +
jbe loc_10091BB  +
xor eax eax +
jmp loc_10091D3  +
push esi  +
mov esi [ebp+arg_0] +
add eax eax +
push eax  +
push dword ptr [esi]  +
call ds:realloc  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10091D2  +
mov [esi] eax +
pop esi  +
xor ecx ecx +
test eax eax +
setnz cl  +
mov al cl +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
mov eax ebx +
push esi  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10091F4  +
sub eax edx +
sar eax 1 +
cmp eax 2 +
jb loc_100926F  +
cmp word ptr [ebx+2] 3Ah +
jnz loc_100926F  +
mov esi [ebp+lpBuffer] +
push ebx  +
push [ebp+nBufferLength]  +
push esi  +
call wcscpy_s  +
add esp 0Ch +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1009223  +
sub eax edx +
sar eax 1 +
cmp word ptr [esi+eax*2-2] 5Ch +
jz loc_100924A  +
push offset dword_10012DC  +
push [ebp+nBufferLength]  +
push esi  +
call wcscat_s  +
add esp 0Ch +
push esi  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
call wcscpy_s  +
push offset asc_1002254  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
call wcscat_s  +
add esp 18h +
pop esi  +
pop ebx  +
pop ebp  +
retn 14h  +
mov esi [ebp+lpBuffer] +
push esi  +
push [ebp+nBufferLength]  +
call ds:GetCurrentDirectoryW  +
test eax eax +
jz loc_1009211  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1009285  +
sub eax edx +
sar eax 1 +
cmp word ptr [esi+eax*2-2] 5Ch +
jz loc_10092AC  +
push offset dword_10012DC  +
push [ebp+nBufferLength]  +
push esi  +
call wcscat_s  +
add esp 0Ch +
cmp word ptr [ebx] 2Eh +
jz loc_100921E  +
push ebx  +
push [ebp+nBufferLength]  +
push esi  +
call wcscat_s  +
jmp loc_100921B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 248h +
mov eax dword_1011584 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_8] +
mov [ebp+var_220] eax +
xor ebx ebx +
mov eax esi +
mov [edi] bl +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx bx +
jnz loc_10092FA  +
sub eax ecx +
sar eax 1 +
cmp eax 2 +
jb loc_100946C  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_1009316  +
sub eax edx +
sar eax 1 +
cmp eax 104h +
ja loc_100946C  +
cmp word ptr [esi+2] 3Ah +
jnz loc_100946C  +
push 105h  +
lea eax [ebp+Buffer] +
push eax  +
call ds:GetWindowsDirectoryW  +
cmp eax ebx +
jz loc_100945E  +
lea eax [ebp+Buffer] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_100935D  +
sub eax edx +
sar eax 1 +
cmp eax 2 +
jb loc_1009477  +
mov ax [ebp+Buffer] +
mov word ptr [ebp+var_C] ax +
mov ax [ebp-216h] +
mov word ptr [ebp+var_C+2] ax +
xor eax eax +
mov [ebp+var_8] ax +
lea eax [ebp+var_C] +
push eax  +
push esi  +
call sub_10090EE  +
pop ecx  +
pop ecx  +
cmp esi eax +
jnz loc_10093A3  +
mov byte ptr [edi] 1 +
push ebx  +
push ebx  +
lea eax [ebp+var_240] +
push eax  +
push esi  +
call ds:RtlDosPathNameToNtPathName_U  +
lea eax [ebp+var_240] +
mov [ebp+var_230] eax +
mov eax esi +
mov [ebp+var_238] 18h +
mov [ebp+var_234] ebx +
mov [ebp+var_22C] 42h +
mov [ebp+var_228] ebx +
mov [ebp+var_224] ebx +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_10093EA  +
sub eax edx +
sar eax 1 +
cmp eax 3 +
jnz loc_1009409  +
cmp word ptr [esi+4] 5Ch +
jnz loc_1009409  +
push ebx  +
push ebx  +
push ebx  +
jmp loc_100940D  +
push ebx  +
push ebx  +
push 1  +
push 1  +
push 7  +
push ebx  +
push ebx  +
lea eax [ebp+var_248] +
push eax  +
lea eax [ebp+var_238] +
push eax  +
push 80h  +
lea eax [ebp+var_21C] +
push eax  +
call ds:NtCreateFile  +
mov esi eax +
cmp esi ebx +
jge loc_100944C  +
push 4000284Ah  +
call sub_100E4FD  +
push esi  +
call sub_100E412  +
pop ecx  +
jmp loc_1009476  +
mov eax [ebp+var_21C] +
mov ecx [ebp+var_220] +
mov [ecx] eax +
mov al 1 +
jmp loc_1009479  +
call ds:GetLastError  +
push eax  +
call sub_100E412  +
jmp loc_1009476  +
push 4000283Eh  +
call sub_100E4FD  +
pop ecx  +
xor al al +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100F411  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 214h +
mov eax dword_1011584 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+lpTargetPath] +
push esi  +
mov esi [ebp+lpDeviceName] +
push edi  +
push [ebp+ucchMax]  +
mov edi [ebp+arg_4] +
push eax  +
push esi  +
call ds:QueryDosDeviceW  +
test eax eax +
jnz loc_10094D2  +
push 40002841h  +
call sub_100E4FD  +
pop ecx  +
call sub_100E5AC  +
xor eax eax +
jmp loc_1009541  +
push esi  +
mov esi 105h +
lea eax [ebp+var_210] +
push esi  +
push eax  +
call wcscpy_s  +
push offset dword_10012DC  +
lea eax [ebp+var_210] +
push esi  +
push eax  +
call wcscat_s  +
add esp 18h +
push [ebp+arg_8]  +
lea eax [ebp+var_210] +
push edi  +
push eax  +
call ds:GetVolumeNameForVolumeMountPointW  +
test eax eax +
jz loc_10094BE  +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1009514  +
sub eax edx +
sar eax 1 +
jz loc_100953E  +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1009529  +
sub eax edx +
sar eax 1 +
xor ecx ecx +
mov [edi+eax*2-2] cx +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100F411  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
push ebx  +
push esi  +
mov esi ds:malloc +
push edi  +
xor edi edi +
push 10Dh  +
mov [ebp+var_C] edi +
mov [ebp+var_18] edi +
mov [ebp+var_8] 1 +
call esi  +
mov [ebp+var_4] eax +
mov [esp+50h+var_50] 125h +
call esi  +
pop ecx  +
mov [ebp+var_14] eax +
cmp [ebp+var_4] edi +
jz loc_100993F  +
cmp eax edi +
jz loc_100993F  +
mov eax [ebp+arg_8] +
mov esi [ebp+arg_0] +
mov [eax] edi +
cmp word ptr [esi+4] 5Ch +
push 3  +
mov eax esi +
pop ebx  +
lea edx [eax+2] +
jnz loc_10095E9  +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx di +
jnz loc_10095B5  +
sub eax edx +
sar eax 1 +
cmp eax 3 +
jbe loc_100961B  +
cmp word ptr [esi+ebx*2] 5Ch +
jnz loc_100961B  +
mov eax esi +
inc ebx  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx di +
jnz loc_10095D5  +
sub eax edx +
sar eax 1 +
cmp ebx eax +
jb loc_10095C8  +
jmp loc_100961B  +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx di +
jnz loc_10095E9  +
sub eax edx +
sar eax 1 +
cmp eax 3 +
jbe loc_100961B  +
cmp word ptr [esi+ebx*2] 2Fh +
jnz loc_100961B  +
mov eax esi +
inc ebx  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx di +
jnz loc_1009609  +
sub eax edx +
sar eax 1 +
cmp ebx eax +
jb loc_10095FC  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx di +
jnz loc_1009620  +
sub eax edx +
sar eax 1 +
cmp ebx eax +
jnb loc_1009969  +
movzx eax word ptr [esi+ebx*2] +
cmp ax 5Ch +
jz loc_100964A  +
cmp ax 2Fh +
jnz loc_10098D2  +
push 10Dh  +
push 0  +
push [ebp+var_4]  +
call memset  +
push 125h  +
push 0  +
push [ebp+var_14]  +
call memset  +
xor eax eax +
lea edi [ebp+var_20] +
stos   +
add esp 18h +
cmp [ebp+var_C] 0 +
stos   +
jz loc_1009682  +
push [ebp+var_C]  +
call ds:free  +
pop ecx  +
lea eax [ebx+ebx+2] +
push eax  +
call ds:malloc  +
pop ecx  +
mov [ebp+var_C] eax +
test eax eax +
jz loc_10098F3  +
test ebx ebx +
jbe loc_10096AF  +
mov ecx esi +
sub ecx eax +
mov edx ebx +
mov si [ecx+eax] +
mov [eax] si +
inc eax  +
inc eax  +
dec edx  +
jnz loc_10096A3  +
mov eax [ebp+var_C] +
xor ecx ecx +
xor edi edi +
push edi  +
mov [eax+ebx*2] cx +
push edi  +
lea ecx [ebp+var_20] +
push ecx  +
push eax  +
call ds:RtlDosPathNameToNtPathName_U  +
push edi  +
push edi  +
push edi  +
push 1  +
push 7  +
push edi  +
lea eax [ebp+var_20] +
mov [ebp+var_38] eax +
push edi  +
lea eax [ebp+var_28] +
push eax  +
lea eax [ebp+var_40] +
push eax  +
push 80h  +
lea eax [ebp+hObject] +
push eax  +
mov [ebp+var_40] 18h +
mov [ebp+var_3C] edi +
mov [ebp+var_34] 42h +
mov [ebp+var_30] edi +
mov [ebp+var_2C] edi +
call ds:NtCreateFile  +
mov esi eax +
cmp esi edi +
jl loc_100992C  +
mov edi [ebp+var_14] +
push 2Eh  +
push 125h  +
push edi  +
lea eax [ebp+var_28] +
push eax  +
push [ebp+hObject]  +
mov [ebp+var_18] 1 +
call ds:NtQueryInformationFile  +
mov esi eax +
test esi esi +
jl loc_100991F  +
mov eax [edi+18h] +
lea eax [eax+eax+2] +
push eax  +
call ds:malloc  +
mov esi eax +
xor eax eax +
pop ecx  +
cmp esi eax +
jz loc_1009900  +
cmp [edi+18h] eax +
jbe loc_1009769  +
lea ecx [edi+1Ch] +
mov dx [ecx] +
mov [esi+eax*2] dx +
inc eax  +
inc ecx  +
inc ecx  +
cmp eax [edi+18h] +
jb loc_100975A  +
mov eax [edi+18h] +
mov edi [ebp+arg_4] +
xor ecx ecx +
mov [esi+eax*2] cx +
mov eax [ebp+arg_8] +
mov eax [eax] +
push 15h  +
push 10Dh  +
push [ebp+var_4]  +
mov [edi+eax*8] esi +
lea eax [ebp+var_28] +
push eax  +
push [ebp+hObject]  +
call ds:NtQueryInformationFile  +
test eax eax +
jl loc_100982C  +
mov edi [ebp+var_4] +
add edi 4 +
mov ecx esi +
mov eax edi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_10097CC  +
test dx dx +
jz loc_10097C8  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_10097CC  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_10097A6  +
xor eax eax +
jmp loc_10097D1  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_100981D  +
mov eax [ebp+var_4] +
mov eax [eax] +
lea eax [eax+eax+2] +
push eax  +
call ds:malloc  +
pop ecx  +
test eax eax +
jz loc_100990E  +
mov esi [ebp+var_4] +
xor ecx ecx +
cmp [esi] ecx +
jbe loc_1009807  +
mov edx edi +
mov di [edx] +
mov [eax+ecx*2] di +
inc ecx  +
inc edx  +
inc edx  +
cmp ecx [esi] +
jb loc_10097F9  +
mov ecx [esi] +
xor edx edx +
mov [eax+ecx*2] dx +
mov ecx [ebp+arg_8] +
mov ecx [ecx] +
mov edx [ebp+arg_4] +
mov [edx+ecx*8+4] eax +
jmp loc_1009836  +
mov eax [ebp+arg_8] +
mov eax [eax] +
mov ecx [ebp+arg_4] +
and dword ptr [ecx+eax*8+4] 0 +
jmp loc_1009836  +
mov eax [ebp+arg_8] +
mov eax [eax] +
and dword ptr [edi+eax*8+4] 0 +
mov eax [ebp+arg_8] +
inc dword ptr [eax]  +
mov ecx [ebp+arg_0] +
movzx eax word ptr [ecx+ebx*2] +
cmp ax 5Ch +
jnz loc_100987B  +
mov eax ecx +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100984D  +
jmp loc_1009871  +
mov eax [ebp+arg_0] +
cmp word ptr [eax+ebx*2] 5Ch +
jnz loc_10098BA  +
inc ebx  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1009867  +
sub eax edx +
sar eax 1 +
cmp ebx eax +
jb loc_1009859  +
jmp loc_10098BA  +
cmp ax 2Fh +
jnz loc_10098BA  +
mov eax ecx +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1009886  +
sub eax edx +
sar eax 1 +
cmp ebx eax +
jnb loc_10098BA  +
mov esi [ebp+arg_0] +
cmp word ptr [esi+ebx*2] 2Fh +
jnz loc_10098BA  +
mov eax esi +
inc ebx  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10098A8  +
sub eax edx +
sar eax 1 +
cmp ebx eax +
jb loc_100989B  +
mov eax [ebp+arg_0] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10098C0  +
sub eax edx +
sar eax 1 +
cmp ebx eax +
jz loc_1009950  +
mov esi [ebp+arg_0] +
mov eax esi +
inc ebx  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10098DB  +
sub eax edx +
sar eax 1 +
cmp ebx eax +
jb loc_1009636  +
jmp loc_100994A  +
push 8  +
call sub_100E412  +
and [ebp+var_8] 0 +
jmp loc_1009949  +
push 8  +
call sub_100E412  +
and [ebp+var_8] 0 +
pop ecx  +
jmp loc_1009950  +
push esi  +
call ds:free  +
push 8  +
call sub_100E412  +
pop ecx  +
jmp loc_1009907  +
push 40002848h  +
call sub_100E4FD  +
push esi  +
jmp loc_1009917  +
push 40002848h  +
call sub_100E4FD  +
push esi  +
call sub_100E412  +
pop ecx  +
jmp loc_1009946  +
push 8  +
call sub_100E412  +
mov [ebp+var_8] edi +
pop ecx  +
cmp [ebp+var_18] 0 +
jz loc_1009959  +
push [ebp+hObject]  +
call ds:CloseHandle  +
cmp [ebp+var_C] 0 +
jz loc_1009969  +
push [ebp+var_C]  +
call ds:free  +
pop ecx  +
push [ebp+var_4]  +
mov esi ds:free +
call esi  +
push [ebp+var_14]  +
call esi  +
mov eax [ebp+var_8] +
pop ecx  +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+nSize] 0 +
push ebx  +
push esi  +
mov esi ds:GetComputerNameW +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+nSize] +
push eax  +
push dword ptr [edi]  +
call esi  +
mov ebx ds:GetLastError +
call ebx  +
mov eax [ebp+nSize] +
add eax eax +
push eax  +
call ds:malloc  +
pop ecx  +
lea ecx [ebp+nSize] +
push ecx  +
push eax  +
mov [edi] eax +
call esi  +
test eax eax +
jnz loc_10099DC  +
call ebx  +
cmp eax 6Fh +
jnz loc_10099E0  +
push dword ptr [edi]  +
call ds:free  +
pop ecx  +
jmp loc_10099B0  +
mov al 1 +
jmp loc_10099E2  +
xor al al +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
push edi  +
xor esi esi +
push esi  +
lea eax [ebp+totalentries] +
push eax  +
lea eax [ebp+entriesread] +
push eax  +
push 0FFFFFFFFh  +
lea eax [ebp+Buffer] +
push eax  +
push 1F6h  +
push esi  +
mov [ebp+entriesread] esi +
mov [ebp+totalentries] esi +
call NetShareEnum  +
cmp eax esi +
jnz loc_1009B5C  +
mov eax [ebp+entriesread] +
mov esi [ebp+Buffer] +
mov edi ds:malloc +
shl eax 2 +
push eax  +
mov [ebp+var_4] esi +
call edi  +
mov ebx [ebp+arg_0] +
mov [ebx] eax +
mov eax [ebp+entriesread] +
shl eax 2 +
push eax  +
call edi  +
mov edx [ebp+arg_8] +
pop ecx  +
pop ecx  +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
mov eax [ebp+entriesread] +
mov [edx] eax +
xor edx edx +
cmp [ebx] edx +
jz loc_1009B59  +
cmp [ecx] edx +
jz loc_1009B59  +
mov [ebp+arg_8] edx +
cmp eax edx +
jbe loc_1009B4D  +
jmp loc_1009A77  +
mov esi [ebp+var_4] +
mov eax [esi] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1009A7C  +
sub eax edx +
sar eax 1 +
lea ecx [eax+1] +
mov eax [esi+18h] +
mov [ebp+var_C] ecx +
lea edx [eax+2] +
mov si [eax] +
inc eax  +
inc eax  +
test si si +
jnz loc_1009A96  +
mov esi [ebp+arg_8] +
sub eax edx +
sar eax 1 +
lea ebx [eax+1] +
lea eax [ecx+ecx] +
push eax  +
shl esi 2 +
call edi  +
mov ecx [ebp+arg_0] +
mov ecx [ecx] +
mov [esi+ecx] eax +
lea eax [ebx+ebx] +
push eax  +
mov [ebp+var_18] eax +
call edi  +
pop ecx  +
pop ecx  +
mov ecx [ebp+arg_4] +
mov edx [ecx] +
mov [esi+edx] eax +
mov eax [ebp+arg_0] +
mov eax [eax] +
add eax esi +
cmp dword ptr [eax] 0 +
jz loc_1009B59  +
mov ecx [ecx] +
cmp dword ptr [esi+ecx] 0 +
jz loc_1009B59  +
push [ebp+var_C]  +
mov ecx [ebp+var_4] +
push dword ptr [ecx]  +
push [ebp+var_C]  +
push dword ptr [eax]  +
call wcsncpy_s  +
mov eax [ebp+var_4] +
push ebx  +
push dword ptr [eax+18h]  +
mov eax [ebp+arg_4] +
mov eax [eax] +
push ebx  +
push dword ptr [esi+eax]  +
call wcsncpy_s  +
add esp 20h +
cmp ebx 2 +
jb loc_1009B28  +
mov eax [ebp+arg_4] +
mov eax [eax] +
mov eax [esi+eax] +
lea ebx [eax+ebx*2-4] +
cmp word ptr [ebx] 5Ch +
jnz loc_1009B28  +
xor eax eax +
mov [ebx] ax +
mov eax [ebp+arg_4] +
mov eax [eax] +
mov eax [esi+eax] +
add [ebp+var_4] 28h +
mov edx [ebp+var_18] +
xor ecx ecx +
inc [ebp+arg_8]  +
mov [eax+edx-2] cx +
mov eax [ebp+arg_8] +
cmp eax [ebp+entriesread] +
jb loc_1009A74  +
push [ebp+Buffer]  +
call NetApiBufferFree  +
xor eax eax +
jmp loc_1009B5C  +
push 8  +
pop eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
push edi  +
lea eax [ebp+arg_C] +
mov [ebp+Arguments] eax +
lea eax [ebp+Arguments] +
push eax  +
xor edi edi +
push edi  +
lea eax [ebp+lpWideCharStr] +
push eax  +
push edi  +
push [ebp+dwMessageId]  +
push edi  +
push 900h  +
call ds:FormatMessageW  +
test eax eax +
jz loc_1009C11  +
mov eax [ebp+lpWideCharStr] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx di +
jnz loc_1009B9D  +
sub eax edx +
push edi  +
sar eax 1 +
lea ecx [ebp+NumberOfBytesWritten] +
push ecx  +
add eax eax +
push eax  +
push [ebp+lpWideCharStr]  +
push [ebp+hFile]  +
call ds:WriteFile  +
mov esi eax +
cmp esi edi +
jnz loc_1009BD4  +
call ds:GetLastError  +
push eax  +
call sub_100E412  +
pop ecx  +
jmp loc_1009C1A  +
mov eax [ebp+lpWideCharStr] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx di +
jnz loc_1009BDA  +
sub eax edx +
sar eax 1 +
add eax eax +
cmp [ebp+NumberOfBytesWritten] eax +
jz loc_1009BF9  +
push 8  +
xor esi esi +
call ds:SetLastError  +
cmp [ebp+arg_4] edi +
jz loc_1009C06  +
push [ebp+lpWideCharStr]  +
call sub_100E3E7  +
push [ebp+lpWideCharStr]  +
call ds:LocalFree  +
jmp loc_1009C13  +
xor esi esi +
mov [ebp+Arguments] edi +
cmp esi edi +
jnz loc_1009C25  +
push 4000283Ah  +
call sub_100E4FD  +
pop ecx  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_4]  +
mov [ebp+var_4] 1 +
push [ebp+arg_0]  +
call sub_10090EE  +
pop ecx  +
pop ecx  +
test eax eax +
jz locret_1009DF2  +
push ebx  +
push esi  +
mov ecx eax +
push 2  +
lea esi [ecx+2] +
pop ebx  +
mov dx [ecx] +
add ecx ebx +
test dx dx +
jnz loc_1009C5C  +
mov edx [ebp+arg_4] +
sub ecx esi +
sar ecx 1 +
lea esi [edx+2] +
push edi  +
mov di [edx] +
add edx ebx +
test di di +
jnz loc_1009C71  +
sub edx esi +
sar edx 1 +
inc edx  +
cmp ecx edx +
jbe loc_1009DED  +
mov edi [ebp+arg_4] +
mov ecx edi +
lea esi [ecx+2] +
mov dx [ecx] +
add ecx ebx +
test dx dx +
jnz loc_1009C90  +
sub ecx esi +
sar ecx 1 +
cmp word ptr [eax+ecx*2] 5Ch +
mov ecx edi +
lea esi [ecx+2] +
jnz loc_1009D36  +
mov dx [ecx] +
add ecx ebx +
test dx dx +
jnz loc_1009CAE  +
sub ecx esi +
mov edx eax +
sar ecx 1 +
lea esi [edx+2] +
mov di [edx] +
add edx ebx +
test di di +
jnz loc_1009CC1  +
sub edx esi +
sar edx 1 +
inc ecx  +
cmp ecx edx +
jnb loc_1009DCF  +
mov ecx [ebp+arg_4] +
lea esi [ecx+2] +
mov dx [ecx] +
add ecx ebx +
test dx dx +
jnz loc_1009CDE  +
mov edx [ebp+var_4] +
sub ecx esi +
sar ecx 1 +
add ecx edx +
cmp word ptr [eax+ecx*2] 5Ch +
jnz loc_1009DCF  +
mov ecx [ebp+arg_4] +
inc [ebp+var_4]  +
lea esi [ecx+2] +
mov dx [ecx] +
add ecx ebx +
test dx dx +
jnz loc_1009D05  +
sub ecx esi +
sar ecx 1 +
mov esi ecx +
mov ecx eax +
lea edx [ecx+2] +
mov di [ecx] +
add ecx ebx +
test di di +
jnz loc_1009D1A  +
sub ecx edx +
mov edx [ebp+var_4] +
sar ecx 1 +
add esi edx +
cmp esi ecx +
jb loc_1009CD8  +
jmp loc_1009DCF  +
mov dx [ecx] +
add ecx ebx +
test dx dx +
jnz loc_1009D36  +
sub ecx esi +
sar ecx 1 +
cmp word ptr [eax+ecx*2] 2Fh +
jnz loc_1009DED  +
mov ecx edi +
lea esi [ecx+2] +
mov dx [ecx] +
add ecx ebx +
test dx dx +
jnz loc_1009D54  +
sub ecx esi +
mov edx eax +
sar ecx 1 +
lea esi [edx+2] +
mov di [edx] +
add edx ebx +
test di di +
jnz loc_1009D67  +
sub edx esi +
sar edx 1 +
inc ecx  +
cmp ecx edx +
jnb loc_1009DCF  +
mov ecx [ebp+arg_4] +
lea esi [ecx+2] +
mov dx [ecx] +
add ecx ebx +
test dx dx +
jnz loc_1009D80  +
mov edx [ebp+var_4] +
sub ecx esi +
sar ecx 1 +
add ecx edx +
cmp word ptr [eax+ecx*2] 2Fh +
jnz loc_1009DCF  +
mov ecx [ebp+arg_4] +
inc [ebp+var_4]  +
lea esi [ecx+2] +
mov dx [ecx] +
add ecx ebx +
test dx dx +
jnz loc_1009DA3  +
sub ecx esi +
sar ecx 1 +
mov esi ecx +
mov ecx eax +
lea edx [ecx+2] +
mov di [ecx] +
add ecx ebx +
test di di +
jnz loc_1009DB8  +
sub ecx edx +
mov edx [ebp+var_4] +
sar ecx 1 +
add esi edx +
cmp esi ecx +
jb loc_1009D7A  +
mov ecx [ebp+arg_4] +
lea esi [ecx+2] +
mov dx [ecx] +
add ecx ebx +
test dx dx +
jnz loc_1009DD5  +
mov edx [ebp+var_4] +
sub ecx esi +
sar ecx 1 +
add ecx edx +
lea eax [eax+ecx*2] +
jmp loc_1009DEF  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi [ebp+arg_0] +
mov eax esi +
mov [ebp+var_1] 0 +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1009E10  +
sub eax edx +
sar eax 1 +
cmp eax 2 +
jbe loc_1009FCC  +
cmp word ptr [esi] 5Ch +
jnz loc_1009FCC  +
cmp word ptr [esi+2] 5Ch +
jnz loc_1009FCC  +
mov eax [ebp+arg_8] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1009E42  +
push edi  +
push [ebp+arg_8]  +
sub eax edx +
sar eax 1 +
push esi  +
mov edi eax +
call sub_10090EE  +
add esi 4 +
pop ecx  +
pop ecx  +
cmp eax esi +
jnz loc_1009FCB  +
mov ecx eax +
lea esi [ecx+2] +
mov dx [ecx] +
inc ecx  +
inc ecx  +
test dx dx +
jnz loc_1009E6E  +
sub ecx esi +
sar ecx 1 +
lea edx [edi+1] +
cmp ecx edx +
jb loc_1009FCB  +
lea eax [eax+edi*2] +
cmp word ptr [eax] 5Ch +
jnz loc_1009FCB  +
and [ebp+var_8] 0 +
add eax 2 +
cmp [ebp+arg_14] 0 +
mov [ebp+arg_8] eax +
jbe loc_1009FCB  +
mov esi [ebp+arg_C] +
push ebx  +
mov ebx [ebp+arg_10] +
sub esi ebx +
mov [ebp+arg_0] ebx +
mov [ebp+var_C] esi +
jmp loc_1009EBC  +
mov ebx [ebp+arg_0] +
mov edi [esi+ebx] +
mov eax edi +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_1009EC4  +
sub eax ecx +
sar eax 1 +
mov [ebp+arg_C] eax +
mov eax [ebx] +
mov [ebp+var_10] eax +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_1009EDD  +
sub eax ecx +
sar eax 1 +
push edi  +
push [ebp+arg_8]  +
mov ebx eax +
mov [ebp+arg_10] ebx +
call sub_10090EE  +
pop ecx  +
pop ecx  +
cmp [ebp+arg_8] eax +
jnz loc_1009F6A  +
mov eax [ebp+arg_8] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1009F06  +
sub eax edx +
mov ecx edi +
sar eax 1 +
lea edx [ecx+2] +
mov si [ecx] +
inc ecx  +
inc ecx  +
test si si +
jnz loc_1009F19  +
sub ecx edx +
sar ecx 1 +
inc ecx  +
cmp eax ecx +
jbe loc_1009F67  +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1009F31  +
mov ecx [ebp+arg_8] +
sub eax edx +
sar eax 1 +
cmp word ptr [ecx+eax*2] 5Ch +
jnz loc_1009F67  +
mov eax ecx +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1009F4E  +
sub eax edx +
sar eax 1 +
sub eax [ebp+arg_C] +
lea edi [eax+ebx+1] +
test edi edi +
ja loc_1009F7F  +
mov esi [ebp+var_C] +
inc [ebp+var_8]  +
mov eax [ebp+var_8] +
add [ebp+arg_0] 4 +
cmp eax [ebp+arg_14] +
jb loc_1009EB9  +
jmp loc_1009FCA  +
lea ebx [edi+edi] +
push ebx  +
call ds:malloc  +
push [ebp+arg_10]  +
mov esi [ebp+arg_4] +
push [ebp+var_10]  +
mov [esi] eax +
push edi  +
push eax  +
mov [ebp+var_1] 1 +
call wcsncpy_s  +
mov eax [ebp+arg_10] +
mov edx [ebp+arg_C] +
sub edi eax +
lea ecx [edi-1] +
push ecx  +
mov ecx [ebp+arg_8] +
lea ecx [ecx+edx*2] +
push ecx  +
mov ecx [esi] +
lea eax [ecx+eax*2] +
push edi  +
push eax  +
call wcsncpy_s  +
mov eax [esi] +
add esp 24h +
xor ecx ecx +
mov [eax+ebx-2] cx +
pop ebx  +
pop edi  +
mov al [ebp+var_1] +
pop esi  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
xor esi esi +
mov eax ebx +
push edi  +
mov [ebp+var_1] 0 +
mov [ebp+var_8] esi +
mov [ebp+var_2] 0 +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx si +
jnz loc_1009FF9  +
sub eax ecx +
push 2  +
sar eax 1 +
pop edi  +
cmp eax edi +
jbe loc_100A040  +
cmp word ptr [ebx] 5Ch +
jnz loc_100A040  +
cmp word ptr [ebx+2] 5Ch +
jnz loc_100A040  +
push [ebp+arg_24]  +
lea eax [ebp+var_8] +
push [ebp+arg_20]  +
push [ebp+arg_1C]  +
push [ebp+arg_18]  +
push eax  +
push ebx  +
call sub_1009DFB  +
mov [ebp+var_2] al +
test al al +
jz loc_100A040  +
mov eax [ebp+var_8] +
mov [ebp+arg_0] eax +
mov ebx eax +
mov eax ebx +
mov [ebp+arg_24] esi +
lea edx [eax+2] +
mov cx [eax] +
add eax edi +
cmp cx si +
jnz loc_100A048  +
sub eax edx +
sar eax 1 +
jz loc_100A1F8  +
mov eax [ebp+arg_24] +
cmp word ptr [ebx+eax*2] 7Eh +
mov eax ebx +
lea edx [eax+2] +
jz loc_100A086  +
inc [ebp+arg_24]  +
mov cx [eax] +
add eax edi +
cmp cx si +
jnz loc_100A06E  +
sub eax edx +
sar eax 1 +
cmp [ebp+arg_24] eax +
jb loc_100A05C  +
jmp loc_100A1F8  +
mov [ebp+arg_18] esi +
mov cx [eax] +
add eax edi +
cmp cx si +
jnz loc_100A089  +
sub eax edx +
sar eax 1 +
jz loc_100A1F8  +
mov [ebp+arg_20] ebx +
push [ebp+arg_C]  +
push [ebp+arg_20]  +
call sub_1009C30  +
mov edi eax +
cmp edi esi +
jnz loc_100A0D7  +
push [ebp+arg_10]  +
push [ebp+arg_20]  +
call sub_1009C30  +
mov edi eax +
cmp edi esi +
jnz loc_100A0D7  +
push [ebp+arg_14]  +
push [ebp+arg_20]  +
call sub_1009C30  +
mov edi eax +
cmp edi esi +
jz loc_100A1F8  +
mov [ebp+arg_1C] esi +
cmp [ebp+arg_8] esi +
jbe loc_100A130  +
mov esi [ebp+arg_4] +
add esi 4 +
jmp loc_100A0EA  +
mov ebx [ebp+arg_0] +
push dword ptr [esi-4]  +
push edi  +
call sub_1009C30  +
test eax eax +
jnz loc_100A108  +
mov eax [esi] +
test eax eax +
jz loc_100A130  +
push eax  +
push edi  +
call sub_1009C30  +
test eax eax +
jz loc_100A130  +
mov ecx eax +
lea ebx [ecx+2] +
mov dx [ecx] +
inc ecx  +
inc ecx  +
test dx dx +
jnz loc_100A10D  +
sub ecx ebx +
sar ecx 1 +
jz loc_100A12D  +
inc [ebp+arg_1C]  +
mov edi eax +
mov eax [ebp+arg_1C] +
add esi 8 +
cmp eax [ebp+arg_8] +
jb loc_100A0E7  +
mov ebx [ebp+arg_0] +
mov eax [ebp+arg_8] +
cmp [ebp+arg_1C] eax +
jnz loc_100A1CD  +
mov eax ebx +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100A141  +
sub eax edx +
sar eax 1 +
mov ecx eax +
mov eax edi +
lea edx [eax+2] +
mov si [eax] +
inc eax  +
inc eax  +
test si si +
jnz loc_100A156  +
sub eax edx +
sar eax 1 +
sub ecx eax +
dec ecx  +
cmp [ebp+arg_24] ecx +
ja loc_100A1F4  +
mov eax ebx +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100A175  +
sub eax edx +
sar eax 1 +
mov ecx eax +
mov eax edi +
lea edx [eax+2] +
mov si [eax] +
inc eax  +
inc eax  +
test si si +
jnz loc_100A18A  +
sub eax edx +
sar eax 1 +
sub ecx eax +
mov eax ebx +
dec ecx  +
lea edx [eax+2] +
mov si [eax] +
inc eax  +
inc eax  +
test si si +
jnz loc_100A1A0  +
sub eax edx +
jmp loc_100A1C7  +
cmp word ptr [ebx+ecx*2] 7Eh +
jz loc_100A1F4  +
mov eax ebx +
inc ecx  +
lea esi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_100A1BB  +
sub eax esi +
sar eax 1 +
cmp ecx eax +
jb loc_100A1AE  +
inc [ebp+arg_18]  +
add [ebp+arg_20] 2 +
mov eax ebx +
lea ecx [eax+2] +
xor esi esi +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx si +
jnz loc_100A1DB  +
sub eax ecx +
sar eax 1 +
cmp [ebp+arg_18] eax +
jb loc_100A0A0  +
jmp loc_100A1F8  +
mov [ebp+var_1] 1 +
cmp [ebp+var_2] 0 +
pop edi  +
pop esi  +
pop ebx  +
jz loc_100A20B  +
push [ebp+var_8]  +
call ds:free  +
pop ecx  +
mov al [ebp+var_1] +
leave   +
retn 28h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_2C]  +
push [ebp+arg_28]  +
push [ebp+arg_24]  +
push [ebp+arg_20]  +
push [ebp+arg_1C]  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_34]  +
call sub_1009FD9  +
test al al +
jz loc_100A2C8  +
mov eax [ebp+arg_4] +
inc dword_1011900  +
cmp eax 80000001h +
jnz loc_100A25E  +
mov eax 4000282Eh +
jmp loc_100A2A2  +
cmp eax 80000003h +
jnz loc_100A26C  +
mov eax 4000282Fh +
jmp loc_100A2A2  +
cmp eax 80000000h +
jnz loc_100A27A  +
mov eax 40002830h +
jmp loc_100A2A2  +
cmp eax 80000002h +
jnz loc_100A288  +
mov eax 40002831h +
jmp loc_100A2A2  +
cmp eax 80000005h +
jnz loc_100A296  +
mov eax 40002832h +
jmp loc_100A2A2  +
cmp eax 80000004h +
jnz loc_100A2B9  +
mov eax 40002833h +
push [ebp+arg_8]  +
push [ebp+arg_38]  +
push eax  +
push [ebp+arg_30]  +
push [ebp+hFile]  +
call sub_1009B68  +
add esp 14h +
jmp loc_100A2CB  +
push 4000284Bh  +
call sub_100E4FD  +
pop ecx  +
xor eax eax +
jmp loc_100A2CB  +
xor eax eax +
inc eax  +
pop ebp  +
retn 3Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 684h +
mov eax dword_1011584 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov eax [ebp+arg_0] +
mov [ebp+hFile] eax +
mov eax [ebp+arg_4] +
mov [ebp+hKey] eax +
mov eax [ebp+arg_8] +
mov [ebp+lpSubKey] eax +
mov eax [ebp+arg_C] +
mov [ebp+var_674] eax +
mov eax [ebp+arg_14] +
mov [ebp+var_664] eax +
mov eax [ebp+arg_18] +
mov [ebp+var_668] eax +
mov eax [ebp+arg_1C] +
mov [ebp+var_66C] eax +
mov eax [ebp+arg_20] +
mov [ebp+var_678] eax +
mov eax [ebp+arg_24] +
mov ebx [ebp+arg_30] +
mov [ebp+var_658] eax +
mov eax [ebp+arg_28] +
mov [ebp+var_670] eax +
xor eax eax +
mov esi 208h +
push esi  +
mov word ptr [ebp+ValueName] ax +
xor edi edi +
lea eax [ebp+ValueName+2] +
push edi  +
push eax  +
mov [ebp+var_684] ebx +
call memset  +
xor eax eax +
push esi  +
mov [ebp+Dst] ax +
lea eax [ebp-41Ah] +
push edi  +
push eax  +
mov [ebp+lpName] edi +
call memset  +
add esp 18h +
inc [ebp+arg_34]  +
cmp [ebp+arg_34] 200h +
mov [ebp+lpSrc] edi +
mov [ebp+lpDst] edi +
mov [ebp+var_634] edi +
mov [ebp+var_640] 1 +
mov [ebp+var_62C] edi +
jbe loc_100A3D8  +
cmp [ebx] edi +
jnz loc_100A3D0  +
push 40002843h  +
call sub_100E4FD  +
pop ecx  +
mov dword ptr [ebx] 1 +
xor eax eax +
inc eax  +
jmp loc_100A9C7  +
lea eax [ebp+phkResult] +
push eax  +
push 9  +
push edi  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_100A9B5  +
mov ebx ds:free +
mov [ebp+dwIndex] edi +
xor esi esi +
cmp [ebp+var_62C] edi +
jnz loc_100A50A  +
mov [ebp+nSize] 20Ah +
mov [ebp+cbValueName] 105h +
lea ecx [ebp+Src] +
mov eax [ebp+var_634] +
cmp [ebp+var_62C] edi +
jnz loc_100A444  +
lea eax [ebp+ValueName] +
lea edx [ebp+nSize] +
push edx  +
push ecx  +
lea ecx [ebp+Type] +
push ecx  +
push edi  +
lea ecx [ebp+cbValueName] +
push ecx  +
push eax  +
push [ebp+dwIndex]  +
push [ebp+phkResult]  +
call ds:RegEnumValueW  +
cmp eax edi +
jnz loc_100A6AC  +
cmp [ebp+Type] 1 +
jz loc_100A495  +
cmp [ebp+Type] 2 +
jz loc_100A495  +
cmp [ebp+Type] 7 +
jnz loc_100A5DD  +
mov eax [ebp+nSize] +
cmp eax edi +
jbe loc_100A5DD  +
mov ecx [ebp+lpSrc] +
cmp [ebp+var_62C] edi +
jnz loc_100A4B7  +
lea ecx [ebp+Src] +
mov edx 4E20h +
cmp eax edx +
jbe loc_100A4C8  +
mov eax edx +
mov [ebp+nSize] eax +
shr eax 1 +
xor edx edx +
mov [ecx+eax*2-2] dx +
cmp [ebp+Type] 2 +
jnz loc_100A53C  +
cmp [ebp+var_62C] edi +
jnz loc_100A515  +
push 104h  +
lea eax [ebp+Dst] +
push eax  +
lea eax [ebp+Src] +
push eax  +
call ds:ExpandEnvironmentStringsW  +
test eax eax +
jnz loc_100A502  +
xor esi esi +
inc esi  +
lea ecx [ebp+Dst] +
jmp loc_100A56D  +
mov ecx [ebp+lpSrc] +
jmp loc_100A430  +
push [ebp+nSize]  +
push [ebp+lpDst]  +
push [ebp+lpSrc]  +
call ds:ExpandEnvironmentStringsW  +
test eax eax +
jnz loc_100A534  +
xor esi esi +
inc esi  +
mov ecx [ebp+lpDst] +
jmp loc_100A56D  +
cmp [ebp+Type] 7 +
jnz loc_100A575  +
mov edx [ebp+nSize] +
shr edx 1 +
xor eax eax +
dec edx  +
jz loc_100A575  +
cmp [ecx+eax*2] di +
jnz loc_100A55F  +
push 3Bh  +
pop edx  +
mov [ecx+eax*2] dx +
mov edx [ebp+nSize] +
shr edx 1 +
inc eax  +
dec edx  +
cmp eax edx +
jb loc_100A552  +
cmp esi edi +
jnz loc_100A64B  +
mov eax [ebp+lpSrc] +
cmp [ebp+var_62C] edi +
jnz loc_100A589  +
lea eax [ebp+Src] +
push eax  +
push ecx  +
push [ebp+arg_38]  +
push [ebp+arg_2C]  +
push [ebp+var_670]  +
push [ebp+var_658]  +
push [ebp+var_678]  +
push [ebp+var_66C]  +
push [ebp+var_668]  +
push [ebp+var_664]  +
push [ebp+arg_10]  +
push [ebp+var_674]  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
push [ebp+hFile]  +
call sub_100A217  +
test eax eax +
jz loc_100A762  +
mov ecx [ebp+var_634] +
cmp [ebp+var_62C] edi +
jnz loc_100A6A1  +
lea ecx [ebp+ValueName] +
mov eax ecx +
push ecx  +
push eax  +
push [ebp+arg_38]  +
push [ebp+arg_2C]  +
push [ebp+var_670]  +
push [ebp+var_658]  +
push [ebp+var_678]  +
push [ebp+var_66C]  +
push [ebp+var_668]  +
push [ebp+var_664]  +
push [ebp+arg_10]  +
push [ebp+var_674]  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
push [ebp+hFile]  +
call sub_100A217  +
test eax eax +
jz loc_100A762  +
cmp [ebp+lpSrc] edi +
jz loc_100A662  +
push [ebp+lpSrc]  +
call ebx  +
pop ecx  +
mov [ebp+lpSrc] edi +
cmp [ebp+lpDst] edi +
jz loc_100A679  +
push [ebp+lpDst]  +
call ebx  +
pop ecx  +
mov [ebp+lpDst] edi +
cmp [ebp+var_634] edi +
jz loc_100A690  +
push [ebp+var_634]  +
call ebx  +
pop ecx  +
mov [ebp+var_634] edi +
inc [ebp+dwIndex]  +
mov [ebp+var_62C] edi +
jmp loc_100A408  +
mov eax [ebp+var_634] +
jmp loc_100A5F7  +
cmp eax 103h +
jz loc_100A76D  +
cmp eax 0EAh +
jnz loc_100A64B  +
cmp [ebp+var_62C] edi +
jnz loc_100A64B  +
mov [ebp+var_62C] 1 +
cmp [ebp+lpSrc] edi +
jz loc_100A6E1  +
push [ebp+lpSrc]  +
call ebx  +
pop ecx  +
cmp [ebp+lpDst] edi +
jz loc_100A6F8  +
push [ebp+lpDst]  +
call ebx  +
pop ecx  +
mov [ebp+lpDst] edi +
cmp [ebp+var_634] edi +
jz loc_100A70F  +
push [ebp+var_634]  +
call ebx  +
pop ecx  +
mov [ebp+var_634] edi +
push [ebp+nSize]  +
mov esi ds:malloc +
call esi  +
pop ecx  +
mov [ebp+lpSrc] eax +
cmp eax edi +
jz loc_100A95E  +
push [ebp+nSize]  +
call esi  +
pop ecx  +
mov [ebp+lpDst] eax +
cmp eax edi +
jz loc_100A95E  +
mov eax [ebp+cbValueName] +
add eax eax +
push eax  +
call esi  +
pop ecx  +
mov [ebp+var_634] eax +
cmp eax edi +
jnz loc_100A408  +
jmp loc_100A93F  +
mov [ebp+var_640] edi +
jmp loc_100A982  +
push 20Ah  +
mov [ebp+dwIndex] edi +
mov [ebp+cbName] 105h +
call ds:malloc  +
cmp eax edi +
jmp loc_100A932  +
push edi  +
push edi  +
push edi  +
push edi  +
lea eax [ebp+cbName] +
push eax  +
push [ebp+lpName]  +
push [ebp+dwIndex]  +
push [ebp+phkResult]  +
call ds:RegEnumKeyExW  +
cmp eax edi +
jnz loc_100A8FA  +
mov eax [ebp+lpName] +
mov [ebp+var_62C] edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx di +
jnz loc_100A7C9  +
sub eax edx +
sar eax 1 +
lea esi [eax+1] +
mov eax [ebp+lpSubKey] +
cmp eax edi +
jz loc_100A7F9  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx di +
jnz loc_100A7E7  +
sub eax edx +
sar eax 1 +
lea esi [esi+eax+1] +
push esi  +
lea eax [ebp+var_62C] +
push eax  +
call sub_10091A8  +
test al al +
jz loc_100A901  +
mov eax [ebp+lpSubKey] +
test eax eax +
jz loc_100A87A  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100A81B  +
mov edi [ebp+var_62C] +
sub eax edx +
sar eax 1 +
push eax  +
push [ebp+lpSubKey]  +
push esi  +
push edi  +
call wcsncpy_s  +
mov eax [ebp+lpSubKey] +
add esp 10h +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_100A849  +
sub eax ecx +
sar eax 1 +
jz loc_100A868  +
push offset dword_10012DC  +
push esi  +
push edi  +
call wcscat_s  +
add esp 0Ch +
push [ebp+lpName]  +
push esi  +
push edi  +
call wcscat_s  +
add esp 0Ch +
jmp loc_100A892  +
mov edi [ebp+var_62C] +
push 0  +
push [ebp+lpName]  +
push esi  +
push edi  +
call wcsncpy_s  +
add esp 10h +
push [ebp+lpName]  +
call ebx  +
pop ecx  +
push [ebp+arg_38]  +
and [ebp+lpName] 0 +
push [ebp+arg_34]  +
push [ebp+var_684]  +
push [ebp+arg_2C]  +
push [ebp+var_670]  +
push [ebp+var_658]  +
push [ebp+var_678]  +
push [ebp+var_66C]  +
push [ebp+var_668]  +
push [ebp+var_664]  +
push [ebp+arg_10]  +
push [ebp+var_674]  +
push edi  +
push [ebp+hKey]  +
push [ebp+hFile]  +
call sub_100A2D4  +
push edi  +
test eax eax +
jz loc_100A951  +
call ebx  +
pop ecx  +
jmp loc_100A901  +
cmp eax 103h +
jz loc_100A96F  +
cmp [ebp+lpName] 0 +
jz loc_100A913  +
push [ebp+lpName]  +
call ebx  +
pop ecx  +
inc [ebp+dwIndex]  +
push 20Ah  +
mov [ebp+cbName] 105h +
call ds:malloc  +
xor edi edi +
test eax eax +
mov [ebp+lpName] eax +
pop ecx  +
jnz loc_100A78F  +
push 8  +
pop esi  +
push esi  +
call sub_100E412  +
pop ecx  +
mov [ebp+var_640] esi +
jmp loc_100A971  +
call ebx  +
and [ebp+var_640] 0 +
xor edi edi +
jmp loc_100A981  +
push 8  +
pop esi  +
push esi  +
call sub_100E412  +
mov [ebp+var_640] esi +
jmp loc_100A981  +
xor edi edi +
cmp [ebp+lpName] edi +
jz loc_100A982  +
push [ebp+lpName]  +
call ebx  +
pop ecx  +
cmp [ebp+lpSrc] edi +
jz loc_100A993  +
push [ebp+lpSrc]  +
call ebx  +
pop ecx  +
cmp [ebp+lpDst] edi +
jz loc_100A9A4  +
push [ebp+lpDst]  +
call ebx  +
pop ecx  +
cmp [ebp+var_634] edi +
jz loc_100A9B5  +
push [ebp+var_634]  +
call ebx  +
pop ecx  +
push [ebp+phkResult]  +
call ds:RegCloseKey  +
mov eax [ebp+var_640] +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100F411  +
leave   +
retn 3Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28Ch +
mov eax dword_1011584 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
and [ebp+var_258] 0 +
mov [ebp+var_28C] eax +
mov eax [ebp+arg_C] +
mov [ebp+var_280] eax +
mov eax [ebp+arg_10] +
push ebx  +
mov ebx [ebp+arg_4] +
mov [ebp+var_268] eax +
mov eax [ebp+arg_20] +
push esi  +
push edi  +
mov [ebp+var_274] eax +
mov eax [ebp+arg_24] +
push ebx  +
mov [ebp+var_278] ebx +
mov [ebp+var_270] eax +
call sub_1009171  +
and [ebp+var_25C] 0 +
mov edi eax +
mov [ebp+var_264] edi +
sub edi ebx +
sar edi 1 +
lea esi [edi+2] +
push esi  +
lea eax [ebp+var_25C] +
push eax  +
mov [ebp+var_288] edi +
mov [ebp+var_27C] 1 +
call sub_10091A8  +
test al al +
jnz loc_100AA7D  +
push 8  +
pop esi  +
push esi  +
call sub_100E412  +
jmp loc_100AE4D  +
push edi  +
push ebx  +
push esi  +
push [ebp+var_25C]  +
call wcsncpy_s  +
push offset asc_1002254  +
sub esi edi +
push esi  +
mov esi [ebp+var_25C] +
lea eax [esi+edi*2] +
push eax  +
call wcscpy_s  +
add esp 1Ch +
push esi  +
call sub_1009171  +
mov [ebp+var_284] eax +
lea eax [ebp+FindFileData] +
push eax  +
push ebx  +
call ds:FindFirstFileW  +
mov [ebp+hFindFile] eax +
cmp eax 0FFFFFFFFh +
jnz loc_100AAFC  +
call ds:GetLastError  +
mov esi eax +
cmp esi 2 +
jz loc_100AAF5  +
cmp esi 5 +
jz loc_100AE38  +
cmp esi 20h +
jz loc_100AE38  +
push esi  +
call sub_100E412  +
pop ecx  +
jmp loc_100AE38  +
xor esi esi +
jmp loc_100AE38  +
push 4  +
mov ebx offset FileName +
pop esi  +
mov ecx ebx +
lea eax [ebp+FindFileData.cFileName] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100AB30  +
test dx dx +
jz loc_100AB2C  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100AB30  +
add eax esi +
add ecx esi +
test dx dx +
jnz loc_100AB0C  +
xor eax eax +
jmp loc_100AB35  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_100ADE6  +
mov ecx offset a__ +
lea eax [ebp+FindFileData.cFileName] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100AB6C  +
test dx dx +
jz loc_100AB68  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100AB6C  +
add eax esi +
add ecx esi +
test dx dx +
jnz loc_100AB48  +
xor eax eax +
jmp loc_100AB71  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_100ADE6  +
and [ebp+var_260] 0 +
mov eax [ebp+var_264] +
mov ecx ebx +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100ABAC  +
test dx dx +
jz loc_100ABA8  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100ABAC  +
add eax esi +
add ecx esi +
test dx dx +
jnz loc_100AB88  +
xor eax eax +
jmp loc_100ABB1  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_100AC4D  +
mov eax [ebp+var_264] +
mov ecx offset a__ +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100ABE8  +
test dx dx +
jz loc_100ABE4  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100ABE8  +
add eax esi +
add ecx esi +
test dx dx +
jnz loc_100ABC4  +
xor eax eax +
jmp loc_100ABED  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_100AC4D  +
lea eax [ebp+FindFileData.cFileName] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100ABFA  +
sub eax edx +
sar eax 1 +
lea esi [edi+eax+1] +
push esi  +
lea eax [ebp+var_260] +
push eax  +
call sub_10091A8  +
test al al +
jz loc_100AE61  +
mov ebx [ebp+var_260] +
push edi  +
push [ebp+var_278]  +
push esi  +
push ebx  +
call wcsncpy_s  +
lea eax [ebp+FindFileData.cFileName] +
push eax  +
sub esi edi +
lea eax [ebx+edi*2] +
push esi  +
push eax  +
call wcscpy_s  +
add esp 1Ch +
jmp loc_100AC64  +
push [ebp+var_278]  +
call ds:_wcsdup  +
mov ebx eax +
pop ecx  +
test ebx ebx +
jz loc_100AE61  +
mov eax ebx +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100AC69  +
sub eax edx +
sar eax 1 +
cmp eax 104h +
ja loc_100AE73  +
inc dword_10118FC  +
lea eax [ebp+FindFileData.cAlternateFileName] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100AC8E  +
sub eax edx +
sar eax 1 +
jz loc_100ACC1  +
push [ebp+var_270]  +
push [ebp+var_268]  +
push [ebp+arg_8]  +
push [ebp+arg_1C]  +
push [ebp+arg_18]  +
push ebx  +
push ebx  +
call [ebp+var_280]  +
mov [ebp+var_27C] eax +
push ebx  +
call ds:free  +
cmp [ebp+var_27C] 0 +
pop ecx  +
jz loc_100AE91  +
test byte ptr [ebp+FindFileData.dwFileAttributes] 10h +
jz loc_100ADE6  +
test [ebp+FindFileData.dwFileAttributes] 400h +
jnz loc_100ADE6  +
cmp [ebp+arg_14] 0 +
jz loc_100ADE6  +
and [ebp+var_260] 0 +
lea eax [ebp+FindFileData.cFileName] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100AD0D  +
sub eax edx +
sar eax 1 +
mov ecx eax +
mov eax [ebp+var_264] +
lea edx [eax+2] +
mov si [eax] +
inc eax  +
inc eax  +
test si si +
jnz loc_100AD26  +
mov esi [ebp+var_284] +
sub esi [ebp+var_25C] +
sub eax edx +
sar eax 1 +
sar esi 1 +
add eax esi +
lea ebx [eax+ecx+2] +
push ebx  +
lea eax [ebp+var_260] +
push eax  +
call sub_10091A8  +
test al al +
jz loc_100AE61  +
mov edi [ebp+var_260] +
push esi  +
push [ebp+var_25C]  +
push ebx  +
push edi  +
call wcsncpy_s  +
lea eax [ebp+FindFileData.cFileName] +
push eax  +
mov eax ebx +
sub eax esi +
push eax  +
lea eax [edi+esi*2] +
push eax  +
call wcscpy_s  +
push offset dword_10012DC  +
push ebx  +
push edi  +
call wcscat_s  +
push [ebp+var_264]  +
push ebx  +
push edi  +
call wcscat_s  +
add esp 34h +
push [ebp+var_270]  +
push [ebp+var_274]  +
push [ebp+arg_1C]  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+var_268]  +
push [ebp+var_280]  +
push [ebp+arg_8]  +
push edi  +
push [ebp+var_28C]  +
call sub_100A9DD  +
push edi  +
mov [ebp+var_258] eax +
call ds:free  +
mov edi [ebp+var_288] +
pop ecx  +
mov esi [ebp+var_258] +
test esi esi +
jz loc_100ADFA  +
cmp esi 5 +
jz loc_100ADFA  +
cmp esi 20h +
jnz loc_100AE15  +
lea eax [ebp+FindFileData] +
push eax  +
push [ebp+hFindFile]  +
call ds:FindNextFileW  +
test eax eax +
jnz loc_100AAFC  +
cmp esi 5 +
jz loc_100AE1F  +
cmp esi 20h +
jnz loc_100AE26  +
and [ebp+var_258] 0 +
push [ebp+hFindFile]  +
call ds:FindClose  +
mov esi [ebp+var_258] +
cmp [ebp+var_25C] 0 +
jz loc_100AE4E  +
push [ebp+var_25C]  +
call ds:free  +
pop ecx  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100F411  +
leave   +
retn 28h  +
push 8  +
pop esi  +
push esi  +
call sub_100E412  +
pop ecx  +
mov [ebp+var_258] esi +
jmp loc_100AE26  +
mov esi [ebp+var_274] +
cmp dword ptr [esi] 0 +
jnz loc_100AE1F  +
push 40002842h  +
call sub_100E4FD  +
pop ecx  +
mov dword ptr [esi] 1 +
jmp loc_100AE1F  +
call ds:GetLastError  +
mov [ebp+var_258] eax +
jmp loc_100AE26  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0C4h +
mov eax dword_1011584 +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+1Ch] +
or dword ptr [ebp-8Ch] 0FFFFFFFFh +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+8] +
xor ebx ebx +
push ebx  +
mov [ebp-84h] eax +
push ebx  +
lea eax [ebp-0C4h] +
xor esi esi +
push eax  +
inc esi  +
push edi  +
mov [ebp-80h] edi +
mov [ebp-7Ch] esi +
mov [ebp-98h] ebx +
mov [ebp-90h] ebx +
call ds:RtlDosPathNameToNtPathName_U  +
push ebx  +
push ebx  +
push 204000h  +
push esi  +
push 7  +
push ebx  +
lea eax [ebp-0C4h] +
mov [ebp-0B4h] eax +
push ebx  +
lea eax [ebp-0A0h] +
push eax  +
lea eax [ebp-0BCh] +
push eax  +
push 10180h  +
lea eax [ebp-8Ch] +
push eax  +
mov dword ptr [ebp-0BCh] 18h +
mov [ebp-0B8h] ebx +
mov dword ptr [ebp-0B0h] 42h +
mov [ebp-0ACh] ebx +
mov [ebp-0A8h] ebx +
call ds:NtCreateFile  +
cmp eax ebx +
mov [ebp-88h] eax +
jge loc_100AFB6  +
lea ecx [ebp-78h] +
push ecx  +
push eax  +
call ds:RtlNtStatusToDosError  +
push eax  +
call sub_100DB00  +
mov esi eax +
mov eax [ebp-78h] +
pop ecx  +
pop ecx  +
cmp esi ebx +
jnz loc_100AF7F  +
mov eax offset dword_1002264 +
push eax  +
push edi  +
push dword ptr [ebp-88h]  +
push 40002839h  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp-84h]  +
call sub_1009B68  +
add esp 18h +
mov [ebp-7Ch] eax +
cmp esi ebx +
jz loc_100B249  +
push dword ptr [ebp-78h]  +
call ds:LocalFree  +
jmp loc_100B249  +
push 22h  +
call ds:malloc  +
mov edi eax +
pop ecx  +
mov [ebp-94h] edi +
push 8  +
cmp edi ebx +
jnz loc_100AFE3  +
call sub_100E412  +
pop ecx  +
push 8  +
mov [ebp-7Ch] ebx +
call ds:SetLastError  +
jmp loc_100B220  +
pop ecx  +
xor eax eax +
stos   +
push 15h  +
push 22h  +
push dword ptr [ebp-94h]  +
stos   +
lea eax [ebp-0A0h] +
push eax  +
push dword ptr [ebp-8Ch]  +
mov [ebp-98h] esi +
mov esi ds:NtQueryInformationFile +
call esi  +
mov edi eax +
cmp edi 0C0000034h +
jnz loc_100B02A  +
xor eax eax +
inc eax  +
mov [ebp-7Ch] eax +
mov [ebp-90h] eax +
jmp loc_100B220  +
cmp edi ebx +
jge loc_100B08B  +
cmp edi 80000005h +
jz loc_100B08B  +
lea eax [ebp-78h] +
push eax  +
push edi  +
call ds:RtlNtStatusToDosError  +
push eax  +
call sub_100DB00  +
mov esi eax +
mov eax [ebp-78h] +
pop ecx  +
pop ecx  +
cmp esi ebx +
jnz loc_100B057  +
mov eax offset dword_1002264 +
push eax  +
push dword ptr [ebp-80h]  +
push edi  +
push 40002839h  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp-84h]  +
call sub_1009B68  +
add esp 18h +
cmp esi ebx +
mov [ebp-7Ch] eax +
jz loc_100B220  +
push dword ptr [ebp-78h]  +
call ds:LocalFree  +
jmp loc_100B220  +
push 12h  +
push 68h  +
lea eax [ebp-74h] +
push eax  +
lea eax [ebp-0A0h] +
push eax  +
push dword ptr [ebp-8Ch]  +
call esi  +
mov esi eax +
cmp esi 80000005h +
jz loc_100B0EC  +
push esi  +
call ds:RtlNtStatusToDosError  +
lea ecx [ebp-78h] +
push ecx  +
push eax  +
call sub_100DB00  +
mov edi eax +
mov eax [ebp-78h] +
pop ecx  +
pop ecx  +
cmp edi ebx +
jnz loc_100B0CD  +
mov eax offset dword_1002264 +
push eax  +
push dword ptr [ebp-80h]  +
push esi  +
push 40002839h  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp-84h]  +
call sub_1009B68  +
add esp 18h +
cmp edi ebx +
jmp loc_100B074  +
***
cmp [ebp+10h] ebx +
jnz loc_100B1D3  +
mov esi offset dword_1002264 +
push esi  +
lea eax [ebp-8] +
push 1  +
push eax  +
mov [ebp-0Ch] ebx +
call wcscpy_s  +
add esp 0Ch +
push 28h  +
push 0Ah  +
lea eax [ebp-0Ch] +
push eax  +
lea eax [ebp-0A0h] +
push eax  +
push dword ptr [ebp-8Ch]  +
call ds:NtSetInformationFile  +
mov edi eax +
cmp edi ebx +
jge loc_100B1A9  +
push edi  +
call ds:RtlNtStatusToDosError  +
lea ecx [ebp-78h] +
push ecx  +
push eax  +
mov [ebp-88h] eax +
call sub_100DB00  +
pop ecx  +
pop ecx  +
mov [ebp-0A4h] eax +
cmp eax ebx +
jz loc_100B153  +
mov esi [ebp-78h] +
push esi  +
push dword ptr [ebp-80h]  +
push edi  +
push 40002838h  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp-84h]  +
call sub_1009B68  +
add esp 18h +
mov [ebp-7Ch] eax +
cmp [ebp-0A4h] ebx +
jz loc_100B182  +
push dword ptr [ebp-78h]  +
call ds:LocalFree  +
cmp dword ptr [ebp-88h] 13h +
jz loc_100B198  +
cmp dword ptr [ebp-88h] 15h +
jnz loc_100B220  +
push dword ptr [ebp-88h]  +
call sub_100E412  +
pop ecx  +
mov [ebp-7Ch] ebx +
jmp loc_100B220  +
cmp dword ptr [ebp-9Ch] 2 +
jnz loc_100B216  +
push dword ptr [ebp-80h]  +
inc dword_10118F4  +
push dword ptr [ebp-30h]  +
push dword ptr [ebp-34h]  +
call sub_100DE45  +
push eax  +
mov eax [ebp-94h] +
add eax 4 +
push eax  +
jmp loc_100B1FB  +
mov esi [ebp-94h] +
add esi 4 +
push esi  +
push dword ptr [ebp-80h]  +
call sub_10090EE  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100B216  +
push dword ptr [ebp-80h]  +
push dword ptr [ebp-30h]  +
push dword ptr [ebp-34h]  +
call sub_100DE45  +
push eax  +
push esi  +
push 40002837h  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp-84h]  +
call sub_1009B68  +
mov [ebp-7Ch] eax +
add esp 18h +
jmp loc_100B220  +
mov dword ptr [ebp-90h] 1 +
push dword ptr [ebp-8Ch]  +
call ds:CloseHandle  +
cmp [ebp-98h] ebx +
jz loc_100B241  +
push dword ptr [ebp-94h]  +
call ds:free  +
pop ecx  +
cmp [ebp-90h] ebx +
jnz loc_100B24F  +
inc dword_10118F8  +
mov ecx [ebp-4] +
mov eax [ebp-7Ch] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100F411  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 41Ch +
mov eax dword_1011584 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push edi  +
push 20Ah  +
xor ebx ebx +
call ds:malloc  +
mov edi eax +
pop ecx  +
test edi edi +
jz loc_100B2EC  +
push esi  +
lea eax [ebp+Buffer] +
push eax  +
push 0D4h  +
call ds:GetTempPathW  +
test eax eax +
jz loc_100B2E3  +
lea eax [ebp+Buffer] +
push eax  +
mov esi 105h +
lea eax [ebp+PathName] +
push esi  +
push eax  +
call wcscpy_s  +
add esp 0Ch +
lea eax [ebp+PathName] +
cmp [ebp+arg_0] ebx +
jz loc_100B2FE  +
push edi  +
push ebx  +
push offset PrefixString  +
push eax  +
call ds:GetTempFileNameW  +
test eax eax +
jnz loc_100B34B  +
push edi  +
call ds:free  +
pop ecx  +
pop esi  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_100F411  +
leave   +
retn 8  +
push offset PrefixString  +
push esi  +
push eax  +
call wcscat_s  +
add esp 0Ch +
push [ebp+arg_4]  +
lea eax [ebp+PathName] +
push esi  +
push edi  +
push eax  +
call sub_100EA98  +
test eax eax +
jnz loc_100B2E3  +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100B327  +
sub eax edx +
sar eax 1 +
add eax 4 +
cmp eax esi +
ja loc_100B2E3  +
push offset a_log  +
push esi  +
push edi  +
call wcscat_s  +
add esp 0Ch +
mov ebx edi +
jmp loc_100B2EB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 2 +
jnz loc_100B36B  +
mov eax [ebp+arg_4] +
push 2  +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
jmp loc_100B37A  +
cmp [ebp+arg_0] 1 +
jnz loc_100B381  +
mov eax [ebp+arg_4] +
push 1  +
push dword ptr [eax]  +
push 0  +
call sub_10031CC  +
jmp loc_100B390  +
push 4000281Ch  +
call sub_100E4FD  +
and [ebp+arg_0] 0 +
pop ecx  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 1 +
jnz loc_100B3B0  +
mov eax [ebp+arg_4] +
push 1  +
push dword ptr [eax]  +
jmp loc_100B3BA  +
cmp [ebp+arg_0] 0 +
jnz loc_100B3C1  +
push 0  +
push 0  +
call sub_1003117  +
jmp loc_100B3D0  +
push 40002851h  +
call sub_100E4FD  +
and [ebp+arg_0] 0 +
pop ecx  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 8  +
***
adc eax offset GetLastError +
push eax  +
call sub_100E412  +
pop ecx  +
inc edi  +
jmp loc_100B420  +
push esi  +
push 40002857h  +
call sub_100E4FD  +
push esi  +
call ds:free  +
add esp 0Ch +
mov eax edi +
pop edi  +
pop esi  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0E80h +
mov eax dword_1011584 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
or [ebp+hFile] 0FFFFFFFFh +
or [ebp+hObject] 0FFFFFFFFh +
mov ecx [ebp+arg_8] +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
xor edi edi +
inc ebx  +
mov [ebp+lpFileName] eax +
mov [ebp+var_A4C] edi +
mov [ebp+var_A54] edi +
mov [ebp+var_A60] edi +
mov [ebp+var_A50] edi +
mov [ebp+var_A58] edi +
mov [ebp+var_A45+1] edi +
mov [ebp+var_A70] edi +
mov [ebp+var_A64] edi +
mov byte ptr [ebp+var_A45] 0 +
test byte ptr [ebp+arg_0] bl +
jz loc_100B4A3  +
and [ebp+arg_0] 0FFFFFFFDh +
mov eax ecx +
lea esi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx di +
jnz loc_100B4A8  +
sub eax esi +
sar eax 1 +
cmp eax 104h +
jbe loc_100B4D3  +
push 400027EAh  +
call sub_100E4FD  +
pop ecx  +
mov [ebp+var_A45+1] ebx +
jmp loc_100BA96  +
push 106h  +
lea eax [ebp+var_A40] +
push eax  +
mov esi 105h +
push esi  +
lea eax [ebp+RootPathName] +
push eax  +
push ecx  +
call sub_10091E5  +
lea eax [ebp+var_A45] +
push eax  +
lea eax [ebp+hObject] +
push eax  +
lea eax [ebp+RootPathName] +
push eax  +
call sub_10092CA  +
test al al +
jnz loc_100B51B  +
mov [ebp+var_A45+1] ebx +
jmp loc_100BA81  +
mov ax word ptr [ebp+RootPathName] +
mov word ptr [ebp+DeviceName] ax +
mov ax word ptr [ebp+RootPathName+2] +
mov word ptr [ebp+DeviceName+2] ax +
xor eax eax +
mov [ebp+var_20C] ax +
push esi  +
lea eax [ebp+TargetPath] +
push eax  +
push esi  +
lea eax [ebp+var_628] +
push eax  +
lea eax [ebp+DeviceName] +
push eax  +
call sub_100948F  +
test eax eax +
jz loc_100B510  +
lea eax [ebp+var_A4C] +
push eax  +
lea eax [ebp+var_E80] +
push eax  +
lea eax [ebp+RootPathName] +
push eax  +
call sub_1009556  +
test eax eax +
jz loc_100B510  +
lea eax [ebp+RootPathName] +
push eax  +
call sub_100E662  +
test eax eax +
jnz loc_100B59E  +
push 4000274Ch  +
call sub_100E4FD  +
pop ecx  +
jmp loc_100B510  +
test byte ptr [ebp+arg_0] bl +
jnz loc_100B5B9  +
push ebx  +
push offset Name  +
call sub_100E300  +
test eax eax +
jz loc_100B5B9  +
push 4000282Ch  +
jmp loc_100B593  +
test byte ptr [ebp+arg_0] 8 +
jnz loc_100B5E9  +
push edi  +
push edi  +
call sub_100B268  +
mov [ebp+lpFileName] eax +
cmp eax edi +
jnz loc_100B5E9  +
push 40002847h  +
call sub_100E4FD  +
pop ecx  +
call ds:GetLastError  +
push eax  +
call sub_100E412  +
jmp loc_100B598  +
mov esi ds:CreateFileW +
push edi  +
push edi  +
push ebx  +
push edi  +
push ebx  +
mov edi 40000000h +
push edi  +
push [ebp+lpFileName]  +
call esi  +
mov [ebp+hFile] eax +
cmp eax 0FFFFFFFFh +
jnz loc_100B66E  +
test byte ptr [ebp+arg_0] 8 +
jnz loc_100B667  +
push 0  +
push ebx  +
call sub_100B268  +
mov [ebp+lpFileName] eax +
xor eax eax +
cmp [ebp+lpFileName] eax +
jnz loc_100B64D  +
push 40002847h  +
call sub_100E4FD  +
pop ecx  +
call ds:GetLastError  +
push eax  +
call sub_100E412  +
mov [ebp+var_A45+1] ebx +
jmp loc_100BA7E  +
push eax  +
push eax  +
push 3  +
push eax  +
push ebx  +
push edi  +
push [ebp+lpFileName]  +
call esi  +
mov [ebp+hFile] eax +
cmp eax 0FFFFFFFFh +
jnz loc_100B66E  +
push 40002840h  +
jmp loc_100B630  +
lea eax [ebp+var_A54] +
push eax  +
call sub_100998A  +
test al al +
jnz loc_100B696  +
call ds:GetLastError  +
push eax  +
call sub_100E412  +
pop ecx  +
mov [ebp+var_A45+1] ebx +
jmp loc_100BA69  +
lea eax [ebp+var_A58] +
push eax  +
lea eax [ebp+var_A50] +
push eax  +
lea eax [ebp+var_A60] +
push eax  +
call sub_10099EE  +
test eax eax +
jnz loc_100B684  +
push 40002844h  +
call sub_100E4FD  +
mov eax [ebp+arg_0] +
mov edi [ebp+hFile] +
shr eax 4 +
and eax ebx +
mov [esp+0E90h+var_E90] 4000282Dh +
push eax  +
push edi  +
call sub_1009B68  +
add esp 0Ch +
test eax eax +
jnz loc_100B6ED  +
push 40002849h  +
call sub_100E4FD  +
jmp loc_100B68A  +
mov eax [ebp+arg_0] +
shr eax 4 +
and eax ebx +
push eax  +
push 0  +
lea eax [ebp+var_A64] +
push eax  +
push [ebp+var_A58]  +
and dword_1011900 0 +
push [ebp+var_A50]  +
lea eax [ebp+TargetPath] +
push [ebp+var_A60]  +
mov esi offset dword_1002264 +
push [ebp+var_A54]  +
push eax  +
lea eax [ebp+var_628] +
push eax  +
lea eax [ebp+DeviceName] +
push eax  +
push [ebp+var_A4C]  +
lea eax [ebp+var_E80] +
push eax  +
push esi  +
push 80000000h  +
push edi  +
call sub_100A2D4  +
test eax eax +
jz loc_100B6E1  +
mov eax [ebp+arg_0] +
shr eax 4 +
and eax ebx +
push eax  +
push 0  +
lea eax [ebp+var_A64] +
push eax  +
push [ebp+var_A58]  +
lea eax [ebp+TargetPath] +
push [ebp+var_A50]  +
push [ebp+var_A60]  +
push [ebp+var_A54]  +
push eax  +
lea eax [ebp+var_628] +
push eax  +
lea eax [ebp+DeviceName] +
push eax  +
push [ebp+var_A4C]  +
lea eax [ebp+var_E80] +
push eax  +
push esi  +
push 80000001h  +
push edi  +
call sub_100A2D4  +
test eax eax +
jz loc_100B6E1  +
mov eax [ebp+arg_0] +
shr eax 4 +
and eax ebx +
push eax  +
push 0  +
lea eax [ebp+var_A64] +
push eax  +
push [ebp+var_A58]  +
lea eax [ebp+TargetPath] +
push [ebp+var_A50]  +
push [ebp+var_A60]  +
push [ebp+var_A54]  +
push eax  +
lea eax [ebp+var_628] +
push eax  +
lea eax [ebp+DeviceName] +
push eax  +
push [ebp+var_A4C]  +
lea eax [ebp+var_E80] +
push eax  +
push esi  +
push 80000002h  +
push edi  +
call sub_100A2D4  +
test eax eax +
jz loc_100B6E1  +
mov eax [ebp+arg_0] +
shr eax 4 +
and eax ebx +
push eax  +
push 0  +
lea eax [ebp+var_A64] +
push eax  +
push [ebp+var_A58]  +
lea eax [ebp+TargetPath] +
push [ebp+var_A50]  +
push [ebp+var_A60]  +
push [ebp+var_A54]  +
push eax  +
lea eax [ebp+var_628] +
push eax  +
lea eax [ebp+DeviceName] +
push eax  +
push [ebp+var_A4C]  +
lea eax [ebp+var_E80] +
push eax  +
push esi  +
push 80000003h  +
push edi  +
call sub_100A2D4  +
test eax eax +
jz loc_100B6E1  +
mov eax [ebp+arg_0] +
shr eax 4 +
and eax ebx +
push eax  +
push 0  +
lea eax [ebp+var_A64] +
push eax  +
push [ebp+var_A58]  +
lea eax [ebp+TargetPath] +
push [ebp+var_A50]  +
push [ebp+var_A60]  +
push [ebp+var_A54]  +
push eax  +
lea eax [ebp+var_628] +
push eax  +
lea eax [ebp+DeviceName] +
push eax  +
push [ebp+var_A4C]  +
lea eax [ebp+var_E80] +
push eax  +
push esi  +
push 80000005h  +
push edi  +
call sub_100A2D4  +
test eax eax +
jz loc_100B6E1  +
mov eax [ebp+arg_0] +
shr eax 4 +
and eax ebx +
push eax  +
push 0  +
lea eax [ebp+var_A64] +
push eax  +
push [ebp+var_A58]  +
lea eax [ebp+TargetPath] +
push [ebp+var_A50]  +
push [ebp+var_A60]  +
push [ebp+var_A54]  +
push eax  +
lea eax [ebp+var_628] +
push eax  +
lea eax [ebp+DeviceName] +
push eax  +
push [ebp+var_A4C]  +
lea eax [ebp+var_E80] +
push eax  +
push esi  +
push 80000004h  +
push edi  +
call sub_100A2D4  +
test eax eax +
jz loc_100B6E1  +
push dword_1011900  +
push 40002834h  +
push ebx  +
push edi  +
call sub_1009B68  +
add esp 10h +
test eax eax +
jz loc_100B6E1  +
mov eax dword_1011900 +
xor esi esi +
cmp eax esi +
jz loc_100B97A  +
test byte ptr [ebp+arg_0] 3 +
jnz loc_100B97A  +
push [ebp+lpFileName]  +
push 4000283Ch  +
call sub_100E4FD  +
pop ecx  +
pop ecx  +
jmp loc_100BA69  +
cmp byte ptr [ebp+var_A45] 0 +
mov dword_10118FC esi +
mov dword_10118F8 esi +
mov dword_10118F4 esi +
jz loc_100B9AA  +
test byte ptr [ebp+arg_0] 2 +
jz loc_100B9AA  +
cmp eax esi +
jz loc_100B9AA  +
push 40002850h  +
call sub_100E4FD  +
pop ecx  +
test byte ptr [ebp+arg_0] bl +
jz loc_100B9B6  +
push 40002845h  +
jmp loc_100B9BB  +
push 40002846h  +
call sub_100E4FD  +
mov eax [ebp+arg_0] +
pop ecx  +
shr eax 4 +
push 40002836h  +
and eax ebx +
push eax  +
push edi  +
call sub_1009B68  +
add esp 0Ch +
test eax eax +
jz loc_100B6E1  +
push esi  +
lea eax [ebp+var_A70] +
push eax  +
mov eax [ebp+arg_0] +
mov ecx eax +
shr ecx 4 +
and ecx ebx +
push ecx  +
mov ecx eax +
shr eax 2 +
and ecx ebx +
push ecx  +
and eax ebx +
push eax  +
push edi  +
push offset loc_100AEA4  +
push esi  +
lea eax [ebp+var_A40] +
push eax  +
lea eax [ebp+RootPathName] +
push eax  +
call sub_100A9DD  +
mov esi 4000283Dh +
test eax eax +
jz loc_100BA3C  +
push [ebp+lpFileName]  +
push esi  +
call sub_100E4FD  +
push 40002849h  +
push ebx  +
push edi  +
call sub_1009B68  +
add esp 14h +
push dword_10118F4  +
push dword_10118F8  +
push dword_10118FC  +
push 40002835h  +
push ebx  +
push edi  +
call sub_1009B68  +
push [ebp+lpFileName]  +
push esi  +
call sub_100E4FD  +
add esp 20h +
cmp [ebp+var_A54] 0 +
jz loc_100BA7F  +
push [ebp+var_A54]  +
call ds:free  +
pop ecx  +
xor edi edi +
cmp [ebp+hObject] 0FFFFFFFFh +
jz loc_100BA96  +
push [ebp+hObject]  +
call ds:CloseHandle  +
cmp [ebp+var_A58] edi +
jbe loc_100BADF  +
mov esi [ebp+var_A50] +
mov ebx [ebp+var_A60] +
mov eax [ebp+var_A58] +
sub ebx esi +
mov [ebp+hObject] eax +
cmp [ebx+esi] edi +
jz loc_100BAC7  +
push dword ptr [ebx+esi]  +
call ds:free  +
pop ecx  +
cmp [esi] edi +
jnz loc_100BAD4  +
push dword ptr [esi]  +
call ds:free  +
pop ecx  +
add esi 4 +
dec [ebp+hObject]  +
jnz loc_100BAB8  +
xor esi esi +
cmp [ebp+var_A4C] edi +
jbe loc_100BB11  +
mov ebx ds:free +
push [ebp+esi*8+var_E80]  +
call ebx  +
mov eax [ebp+esi*8+var_E7C] +
pop ecx  +
cmp eax edi +
jz loc_100BB08  +
push eax  +
call ebx  +
pop ecx  +
inc esi  +
cmp esi [ebp+var_A4C] +
jb loc_100BAEF  +
cmp [ebp+hFile] 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
jz loc_100BB29  +
push [ebp+hFile]  +
call ds:CloseHandle  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_A45+1] +
xor ecx ebp +
call sub_100F411  +
leave   +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
sub esp 10h +
and dword ptr [ebp-4] 0FFFFFFE0h +
push ebx  +
xor ebx ebx +
cmp dword ptr [ebp+8] 7 +
push esi  +
push edi  +
mov [ebp-0Ch] ebx +
mov [ebp-10h] ebx +
jg loc_100BD65  +
cmp [ebp+8] ebx +
jz loc_100BD65  +
mov eax [ebp+0Ch] +
mov eax [eax] +
push 4  +
mov ecx offset a? +
pop edi  +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100BB9D  +
cmp dx bx +
jz loc_100BB99  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100BB9D  +
add eax edi +
add ecx edi +
cmp dx bx +
jnz loc_100BB79  +
xor eax eax +
jmp loc_100BBA2  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax ebx +
jz loc_100BD65  +
cmp [ebp+8] ebx +
jle loc_100BD3B  +
mov dword ptr [ebp-8] 1 +
mov eax [ebp+0Ch] +
mov esi [eax+ebx*4] +
mov ecx offset aT +
mov eax esi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100BBEB  +
test dx dx +
jz loc_100BBE7  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100BBEB  +
add eax edi +
add ecx edi +
test dx dx +
jnz loc_100BBC7  +
xor eax eax +
jmp loc_100BBF0  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_100BBFD  +
or dword ptr [ebp-4] 1 +
jmp loc_100BD2E  +
mov ecx offset aS +
mov eax esi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100BC28  +
test dx dx +
jz loc_100BC24  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100BC28  +
add eax edi +
add ecx edi +
test dx dx +
jnz loc_100BC04  +
xor eax eax +
jmp loc_100BC2D  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_100BC39  +
or [ebp-4] edi +
jmp loc_100BD2E  +
mov ecx offset aF +
mov eax esi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100BC64  +
test dx dx +
jz loc_100BC60  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100BC64  +
add eax edi +
add ecx edi +
test dx dx +
jnz loc_100BC40  +
xor eax eax +
jmp loc_100BC69  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_100BC76  +
or dword ptr [ebp-4] 2 +
jmp loc_100BD2E  +
mov ecx offset aV +
mov eax esi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100BCA1  +
test dx dx +
jz loc_100BC9D  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100BCA1  +
add eax edi +
add ecx edi +
test dx dx +
jnz loc_100BC7D  +
xor eax eax +
jmp loc_100BCA6  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_100BCB0  +
or dword ptr [ebp-4] 10h +
jmp loc_100BD2E  +
mov ecx offset asc_1002298 +
mov eax esi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100BCDB  +
test dx dx +
jz loc_100BCD7  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100BCDB  +
add eax edi +
add ecx edi +
test dx dx +
jnz loc_100BCB7  +
xor eax eax +
jmp loc_100BCE0  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_100BD28  +
mov eax [ebp+8] +
cmp [ebp-8] eax +
jge loc_100BD65  +
mov eax [ebp+0Ch] +
lea esi [eax+ebx*4+4] +
mov eax [esi] +
cmp word ptr [eax] 2Fh +
jz loc_100BD65  +
push 20Ah  +
call ds:malloc  +
pop ecx  +
mov [ebp-0Ch] eax +
test eax eax +
jz loc_100BD55  +
push dword ptr [esi]  +
push 105h  +
push eax  +
call wcscpy_s  +
or dword ptr [ebp-4] 8 +
add esp 0Ch +
inc ebx  +
inc dword ptr [ebp-8]  +
jmp loc_100BD2E  +
cmp word ptr [esi] 2Fh +
jz loc_100BD65  +
inc ebx  +
inc dword ptr [ebp-8]  +
cmp ebx [ebp+8] +
jl loc_100BBBA  +
mov eax [ebp+0Ch] +
mov ecx [ebp+8] +
push dword ptr [eax+ecx*4-4]  +
push dword ptr [ebp-0Ch]  +
push dword ptr [ebp-4]  +
call sub_100B42C  +
mov [ebp-10h] eax +
jmp loc_100BD70  +
push 8  +
call sub_100E412  +
mov dword ptr [ebp-10h] 1 +
jmp loc_100BD6F  +
push 40002852h  +
call sub_100E4FD  +
pop ecx  +
cmp dword ptr [ebp-0Ch] 0 +
pop edi  +
pop esi  +
pop ebx  +
jz loc_100BD83  +
push dword ptr [ebp-0Ch]  +
call ds:free  +
pop ecx  +
mov eax [ebp-10h] +
leave   +
retn 8  +
***
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+8] +
xor esi esi +
and edi 0FFFFFFE1h +
inc esi  +
xor ebx ebx +
or edi esi +
cmp dword ptr [ebp+8] 5 +
mov [ebp-8] ebx +
mov [ebp-0Ch] ebx +
jg loc_100BF3C  +
cmp [ebp+8] ebx +
jz loc_100BF3C  +
mov eax [ebp+0Ch] +
mov eax [eax] +
mov ecx offset a? +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100BDF0  +
cmp dx bx +
jz loc_100BDEC  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100BDF0  +
add eax 4 +
add ecx 4 +
cmp dx bx +
jnz loc_100BDCA  +
xor eax eax +
jmp loc_100BDF5  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax ebx +
jz loc_100BF3C  +
cmp [ebp+8] ebx +
jle loc_100BF14  +
mov [ebp-4] esi +
mov eax [ebp+0Ch] +
mov esi [eax+ebx*4] +
mov ecx offset aS +
mov eax esi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100BE3C  +
test dx dx +
jz loc_100BE38  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100BE3C  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_100BE16  +
xor eax eax +
jmp loc_100BE41  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_100BE4D  +
or edi 4 +
jmp loc_100BF07  +
mov ecx offset aV +
mov eax esi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100BE7A  +
test dx dx +
jz loc_100BE76  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100BE7A  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_100BE54  +
xor eax eax +
jmp loc_100BE7F  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_100BE88  +
or edi 10h +
jmp loc_100BF07  +
mov ecx offset asc_1002298 +
mov eax esi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100BEB5  +
test dx dx +
jz loc_100BEB1  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100BEB5  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_100BE8F  +
xor eax eax +
jmp loc_100BEBA  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_100BF01  +
mov eax [ebp+8] +
cmp [ebp-4] eax +
jge loc_100BF3C  +
mov eax [ebp+0Ch] +
lea esi [eax+ebx*4+4] +
mov eax [esi] +
cmp word ptr [eax] 2Fh +
jz loc_100BF3C  +
push 20Ah  +
call ds:malloc  +
pop ecx  +
mov [ebp-8] eax +
test eax eax +
jz loc_100BF2C  +
push dword ptr [esi]  +
push 105h  +
push eax  +
call wcscpy_s  +
add esp 0Ch +
or edi 8 +
inc ebx  +
inc dword ptr [ebp-4]  +
jmp loc_100BF07  +
cmp word ptr [esi] 2Fh +
jz loc_100BF3C  +
inc ebx  +
inc dword ptr [ebp-4]  +
cmp ebx [ebp+8] +
jl loc_100BE09  +
mov eax [ebp+0Ch] +
mov ecx [ebp+8] +
push dword ptr [eax+ecx*4-4]  +
push dword ptr [ebp-8]  +
push edi  +
call sub_100B42C  +
mov [ebp-0Ch] eax +
jmp loc_100BF47  +
push 8  +
call sub_100E412  +
mov dword ptr [ebp-0Ch] 1 +
jmp loc_100BF46  +
push 4000285Fh  +
call sub_100E4FD  +
pop ecx  +
cmp dword ptr [ebp-8] 0 +
pop edi  +
pop esi  +
pop ebx  +
jz loc_100BF5A  +
push dword ptr [ebp-8]  +
call ds:free  +
pop ecx  +
mov eax [ebp-0Ch] +
leave   +
retn 8  +
***
push ebp  +
mov ebp esp +
sub esp 10h +
push 23h  +
push 8  +
lea eax [ebp-8] +
push eax  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+8]  +
call ds:NtQueryInformationFile  +
test eax eax +
jl loc_100BFAA  +
test dword ptr [ebp-8] 200h +
jz loc_100BFAA  +
xor eax eax +
inc eax  +
jmp locret_100BFAC  +
xor eax eax +
leave   +
retn 4  +
***
cmp dword ptr [ebp-20h] 0FFFFFFFFh +
jz loc_100C07A  +
push dword ptr [ebp-20h]  +
call ds:CloseHandle  +
push dword ptr [ebp-24h]  +
call ds:free  +
pop ecx  +
retn   +
***
call sub_100E5AC  +
jmp loc_100C0BD  +
***
cmp dword ptr [ebp-20h] 0FFFFFFFFh +
jz loc_100C15C  +
push dword ptr [ebp-20h]  +
call ds:CloseHandle  +
push dword ptr [ebp-24h]  +
call ds:free  +
pop ecx  +
retn   +
***
call __SEH_prolog4  +
cmp dword ptr [ebp-20h] 0FFFFFFFFh +
jz loc_100C2F4  +
push dword ptr [ebp-20h]  +
call ds:CloseHandle  +
push dword ptr [ebp-24h]  +
call ds:free  +
pop ecx  +
retn   +
***
call sub_100E5AC  +
jmp loc_100C344  +
***
push 4000274Ch  +
call sub_100E4FD  +
pop ecx  +
jmp loc_100C344  +
***
push 400027E0h  +
jmp loc_100C372  +
***
jmp loc_100C35C  +
***
mov eax edi +
shl eax 4 +
mov ecx [ebp-64h] +
add eax ecx +
push dword ptr [eax+0Ch]  +
push dword ptr [eax+8]  +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
push offset aI64dI64d  +
push 20h  +
lea eax [ebp-5Ch] +
push eax  +
call swprintf_s  +
lea eax [ebp-5Ch] +
push eax  +
push 400027E1h  +
call sub_100E4FD  +
add esp 24h +
inc edi  +
mov [ebp-80h] edi +
mov eax [ebp-7Ch] +
jmp loc_100C49E  +
***
cmp dword ptr [ebp-68h] 0FFFFFFFFh +
jz loc_100C535  +
push dword ptr [ebp-68h]  +
call ds:CloseHandle  +
push dword ptr [ebp-64h]  +
mov esi ds:free +
call esi  +
push dword ptr [ebp-70h]  +
call esi  +
pop ecx  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push esi  +
lea eax [ebp+PolicyHandle] +
push eax  +
xor esi esi +
push 800h  +
lea eax [ebp+ObjectAttributes] +
push eax  +
push esi  +
mov [ebp+ObjectAttributes.Length] 18h +
mov [ebp+ObjectAttributes.RootDirectory] esi +
mov [ebp+ObjectAttributes.Attributes] esi +
mov [ebp+ObjectAttributes.ObjectName] esi +
mov [ebp+ObjectAttributes.SecurityDescriptor] esi +
mov [ebp+ObjectAttributes.SecurityQualityOfService] esi +
mov [ebp+PolicyHandle] esi +
call LsaOpenPolicy  +
cmp eax esi +
pop esi  +
jge loc_100C5AC  +
push eax  +
call ds:RtlNtStatusToDosError  +
push eax  +
call sub_100E412  +
pop ecx  +
mov eax [ebp+PolicyHandle] +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
lea eax [ebp+Names] +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
lea eax [ebp+Sids] +
push eax  +
push 1  +
push [ebp+Names]  +
call LsaLookupSids  +
test eax eax +
jge loc_100C603  +
push 1  +
push [ebp+Sids]  +
lea eax [ebp+var_C] +
push eax  +
call ds:RtlConvertSidToUnicodeString  +
push [ebp+var_8]  +
push [ebp+dwMessageId]  +
call sub_100E4FD  +
pop ecx  +
pop ecx  +
lea eax [ebp+var_C] +
push eax  +
call ds:RtlFreeUnicodeString  +
jmp locret_100C702  +
mov eax [ebp+Names] +
push esi  +
mov esi [eax+0Ch] +
push edi  +
test esi esi +
jl loc_100C6A9  +
mov ecx [ebp+Buffer] +
imul esi esi +
mov ecx [ecx+4] +
movzx ecx word ptr [esi+ecx] +
test cx cx +
jz loc_100C6A9  +
movzx eax word ptr [eax+4] +
movzx ecx cx +
lea eax [eax+ecx+4] +
push eax  +
call ds:malloc  +
mov edi eax +
pop ecx  +
test edi edi +
jz loc_100C6F0  +
mov eax [ebp+Buffer] +
mov eax [eax+4] +
add eax esi +
movzx ecx word ptr [eax] +
push ecx  +
push dword ptr [eax+4]  +
push edi  +
call memcpy  +
mov eax [ebp+Buffer] +
mov eax [eax+4] +
movzx esi word ptr [eax+esi] +
push 5Ch  +
pop eax  +
shr esi 1 +
mov [edi+esi*2] ax +
mov eax [ebp+Names] +
movzx ecx word ptr [eax+4] +
push ecx  +
push dword ptr [eax+8]  +
inc esi  +
lea eax [edi+esi*2] +
push eax  +
call memcpy  +
mov eax [ebp+Names] +
movzx eax word ptr [eax+4] +
shr eax 1 +
push edi  +
push [ebp+dwMessageId]  +
add eax esi +
xor ecx ecx +
mov [edi+eax*2] cx +
call sub_100E4FD  +
push edi  +
call ds:free  +
add esp 24h +
jmp loc_100C6F0  +
movzx eax word ptr [eax+4] +
inc eax  +
inc eax  +
push eax  +
call ds:malloc  +
mov esi eax +
pop ecx  +
test esi esi +
jz loc_100C6F0  +
mov eax [ebp+Names] +
movzx ecx word ptr [eax+4] +
push ecx  +
push dword ptr [eax+8]  +
push esi  +
call memcpy  +
mov eax [ebp+Names] +
movzx eax word ptr [eax+4] +
push esi  +
push [ebp+dwMessageId]  +
shr eax 1 +
xor ecx ecx +
mov [esi+eax*2] cx +
call sub_100E4FD  +
push esi  +
call ds:free  +
add esp 18h +
push [ebp+Buffer]  +
call LsaFreeMemory  +
push [ebp+Names]  +
call LsaFreeMemory  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
sub esp 34h +
mov eax dword_1011584 +
xor eax ebp +
mov [ebp-4] eax +
push esi  +
push edi  +
push 9  +
pop ecx  +
xor eax eax +
lea edi [ebp-28h] +
stos   +
mov esi 8000001Ah +
lea eax [ebp-34h] +
push eax  +
push 24h  +
lea eax [ebp-28h] +
push eax  +
push 0  +
push 0  +
call ds:NtEnumerateTransactionObject  +
mov edi eax +
cmp edi esi +
jz loc_100C772  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
call ds:RtlStringFromGUID  +
push dword ptr [ebp-2Ch]  +
call sub_100E3E7  +
push offset WideCharStr  +
call sub_100E3E7  +
lea eax [ebp-30h] +
push eax  +
call ds:RtlFreeUnicodeString  +
test edi edi +
jz loc_100C72E  +
cmp edi esi +
jnz loc_100C77C  +
xor edi edi +
test edi edi +
jge loc_100C793  +
push edi  +
call ds:RtlNtStatusToDosError  +
push eax  +
call sub_100E412  +
xor eax eax +
pop ecx  +
inc eax  +
jmp loc_100C795  +
xor eax eax +
mov ecx [ebp-4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100F411  +
leave   +
retn 8  +
***
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_1011584 +
xor eax ebp +
mov [ebp-4] eax +
cmp dword ptr [ebp+8] 1 +
mov eax [ebp+0Ch] +
jz loc_100C7D5  +
push 40002785h  +
call sub_100E4FD  +
xor eax eax +
pop ecx  +
inc eax  +
jmp loc_100C824  +
lea ecx [ebp-14h] +
push ecx  +
push dword ptr [eax]  +
call sub_100E2E1  +
test eax eax +
jz loc_100C7C5  +
push esi  +
lea eax [ebp-14h] +
push eax  +
push 0C0000000h  +
call OpenTransaction  +
mov esi eax +
test esi esi +
jz loc_100C813  +
cmp esi 0FFFFFFFFh +
jz loc_100C813  +
push esi  +
call RollbackTransaction  +
test eax eax +
jz loc_100C813  +
push esi  +
call ds:CloseHandle  +
xor eax eax +
jmp loc_100C823  +
call ds:GetLastError  +
push eax  +
call sub_100E412  +
xor eax eax +
inc eax  +
pop ecx  +
pop esi  +
mov ecx [ebp-4] +
xor ecx ebp +
call sub_100F411  +
leave   +
retn 8  +
***
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_1011584 +
xor eax ebp +
mov [ebp-4] eax +
cmp dword ptr [ebp+8] 1 +
mov eax [ebp+0Ch] +
jz loc_100C862  +
push 40002786h  +
call sub_100E4FD  +
xor eax eax +
pop ecx  +
inc eax  +
jmp loc_100C8B1  +
lea ecx [ebp-14h] +
push ecx  +
push dword ptr [eax]  +
call sub_100E2E1  +
test eax eax +
jz loc_100C852  +
push esi  +
lea eax [ebp-14h] +
push eax  +
push 0C0000000h  +
call OpenTransaction  +
mov esi eax +
test esi esi +
jz loc_100C8A0  +
cmp esi 0FFFFFFFFh +
jz loc_100C8A0  +
push esi  +
call CommitTransaction  +
test eax eax +
jz loc_100C8A0  +
push esi  +
call ds:CloseHandle  +
xor eax eax +
jmp loc_100C8B0  +
call ds:GetLastError  +
push eax  +
call sub_100E412  +
xor eax eax +
inc eax  +
pop ecx  +
pop esi  +
mov ecx [ebp-4] +
xor ecx ebp +
call sub_100F411  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
mov eax dword_1011584 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+hDevice] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_8] +
push 0  +
lea ecx [ebp+BytesReturned] +
push ecx  +
push 30h  +
lea ecx [ebp+OutBuffer] +
push ecx  +
push 0  +
push 0  +
push 9416Ch  +
push eax  +
call ds:DeviceIoControl  +
test eax eax +
jnz loc_100C903  +
jmp loc_100C916  +
mov eax [ebp+var_C] +
mov [esi] eax +
test eax eax +
jz loc_100C913  +
lea esi [ebp+var_24] +
movs   +
movs   +
movs   +
movs   +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100F411  +
leave   +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
sub esp 98h +
mov eax dword_1011584 +
xor eax ebp +
mov [ebp-4] eax +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
xor edi edi +
cmp dword ptr [ebp+8] 1 +
mov [ebp-98h] edi +
jz loc_100C963  +
push 40002788h  +
call sub_100E4FD  +
xor eax eax +
pop ecx  +
inc eax  +
jmp loc_100C9DA  +
push ebx  +
push edi  +
push edi  +
push 3  +
push edi  +
push 7  +
push 80000000h  +
push dword ptr [esi]  +
call ds:CreateFileW  +
mov ebx eax +
cmp ebx 0FFFFFFFFh +
jnz loc_100C987  +
call ds:GetLastError  +
jmp loc_100C9B7  +
lea eax [ebp-94h] +
push eax  +
lea eax [ebp-98h] +
push eax  +
push ebx  +
call sub_100C8C4  +
test eax eax +
jnz loc_100C9EA  +
mov edi ds:GetLastError +
call edi  +
push ebx  +
cmp eax 1AA0h +
jz loc_100C9C3  +
call ds:CloseHandle  +
call edi  +
push eax  +
call sub_100E412  +
xor eax eax +
pop ecx  +
inc eax  +
jmp loc_100C9D9  +
call ds:CloseHandle  +
push dword ptr [esi]  +
push 4000279Bh  +
call sub_100E4FD  +
pop ecx  +
pop ecx  +
xor eax eax +
pop ebx  +
mov ecx [ebp-4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100F411  +
leave   +
retn 8  +
***
push ebx  +
call ds:CloseHandle  +
cmp [ebp-98h] edi +
jz loc_100C9C9  +
push 80h  +
lea eax [ebp-84h] +
push eax  +
lea eax [ebp-94h] +
push eax  +
call sub_100EA29  +
lea eax [ebp-84h] +
push eax  +
push dword ptr [esi]  +
push 4000279Ch  +
call sub_100E4FD  +
add esp 0Ch +
jmp loc_100C9D7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
mov esi ds:NtQuerySecurityObject +
lea eax [ebp+var_8] +
push eax  +
push 0  +
push 0  +
push 1  +
push [ebp+arg_4]  +
call esi  +
cmp eax 0C0000023h +
jnz loc_100CABD  +
mov eax large fs:18h +
mov eax [eax+30h] +
push edi  +
push [ebp+var_8]  +
push 0  +
push dword ptr [eax+18h]  +
call ds:RtlAllocateHeap  +
mov edi eax +
test edi edi +
jz loc_100CABC  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+var_8]  +
push edi  +
push 1  +
push [ebp+arg_4]  +
call esi  +
test eax eax +
jl loc_100CAA7  +
lea eax [ebp-1] +
push eax  +
lea eax [ebp+Sids] +
push eax  +
push edi  +
call ds:RtlGetOwnerSecurityDescriptor  +
test eax eax +
jl loc_100CAA7  +
push [ebp+Sids]  +
push [ebp+Names]  +
push 40002799h  +
call sub_100C5B6  +
mov eax large fs:18h +
mov eax [eax+30h] +
push edi  +
push 0  +
push dword ptr [eax+18h]  +
call ds:RtlFreeHeap  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_100CADD  +
cmp ecx 7FFFFFFFh +
jbe loc_100CAE2  +
mov eax 80070057h +
test eax eax +
jl loc_100CB1F  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_100CB0F  +
cmp eax esi +
ja loc_100CB0F  +
jnz loc_100CB1A  +
jmp loc_100CB14  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 300h +
mov eax dword_1011584 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
xor esi esi +
inc esi  +
push edi  +
xor edi edi +
mov [ebp+hDevice] esi +
cmp [ebp+arg_0] esi +
jz loc_100CBEE  +
cmp [ebp+arg_0] 2 +
jz loc_100CB6A  +
push 40002787h  +
call sub_100E4FD  +
jmp loc_100CEF1  +
mov eax [ebx] +
mov edx offset aFiles +
mov ecx eax +
mov si [ecx] +
cmp si [edx] +
jnz loc_100CB99  +
test si si +
jz loc_100CB95  +
mov si [ecx+2] +
cmp si [edx+2] +
jnz loc_100CB99  +
add ecx 4 +
add edx 4 +
test si si +
jnz loc_100CB73  +
xor ecx ecx +
jmp loc_100CB9E  +
sbb ecx ecx +
sbb ecx 0FFFFFFFFh +
test ecx ecx +
jnz loc_100CBAD  +
xor edi edi +
inc edi  +
and [ebp+hDevice] ecx +
jmp loc_100CBE8  +
mov ecx offset aAll +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100CBD8  +
test dx dx +
jz loc_100CBD4  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100CBD8  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_100CBB2  +
xor eax eax +
jmp loc_100CBDD  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_100CD89  +
xor edi edi +
inc edi  +
xor esi esi +
add ebx 4 +
inc esi  +
lea eax [ebp+iid] +
push eax  +
push dword ptr [ebx]  +
call sub_100E2E1  +
test eax eax +
jz loc_100CB5B  +
lea eax [ebp+iid] +
push eax  +
push 0C0000000h  +
call OpenTransaction  +
mov [ebp+hObject] eax +
test eax eax +
jz loc_100CEE5  +
cmp eax 0FFFFFFFFh +
jz loc_100CEE5  +
cmp [ebp+hDevice] 0 +
jz loc_100CCFC  +
lea ecx [ebp+var_2D4] +
push ecx  +
push 100h  +
lea ecx [ebp+var_2FC] +
push ecx  +
lea ecx [ebp+var_2F4] +
push ecx  +
lea ecx [ebp+var_2F8] +
push ecx  +
lea ecx [ebp+var_300] +
push ecx  +
push eax  +
call GetTransactionInformation  +
test eax eax +
jz loc_100CEE5  +
push dword ptr [ebp+var_300]  +
mov esi offset aI +
push esi  +
push 14h  +
pop ebx  +
lea eax [ebp+var_D4] +
push ebx  +
push eax  +
call sub_100CAC7  +
push dword ptr [ebp+var_2F8]  +
lea eax [ebp+var_84] +
push esi  +
push ebx  +
push eax  +
call sub_100CAC7  +
push dword ptr [ebp+var_2F4]  +
lea eax [ebp+var_34] +
push esi  +
push ebx  +
push eax  +
call sub_100CAC7  +
push dword ptr [ebp+var_2FC]  +
lea eax [ebp+var_5C] +
push esi  +
push ebx  +
push eax  +
call sub_100CAC7  +
add esp 40h +
lea eax [ebp+var_5C] +
push eax  +
lea eax [ebp+var_34] +
push eax  +
lea eax [ebp+var_84] +
push eax  +
lea eax [ebp+var_D4] +
push eax  +
push 40002798h  +
call sub_100E4FD  +
add esp 14h +
call sub_100C562  +
test eax eax +
jz loc_100CCFC  +
push [ebp+hObject]  +
push eax  +
call sub_100CA2E  +
xor esi esi +
cmp edi esi +
jz loc_100CED5  +
push esi  +
push 2000000h  +
push 3  +
push esi  +
push 7  +
push 80000000h  +
push offset FileName  +
call ds:CreateFileW  +
mov [ebp+hDevice] eax +
cmp eax 0FFFFFFFFh +
jz loc_100CEC8  +
push 28h  +
mov [ebp+BytesReturned] esi +
call ds:malloc  +
mov ebx eax +
pop ecx  +
test ebx ebx +
jz loc_100CDB2  +
push 0  +
lea esi [ebp+iid] +
mov edi ebx +
movs   +
lea eax [ebp+BytesReturned] +
push eax  +
push 28h  +
push ebx  +
movs   +
push 28h  +
push ebx  +
movs   +
push 941E0h  +
push [ebp+hDevice]  +
movs   +
call ds:DeviceIoControl  +
test eax eax +
jnz loc_100CD9B  +
mov esi ds:GetLastError +
call esi  +
cmp eax 0EAh +
jz loc_100CD9B  +
call esi  +
push eax  +
jmp loc_100CDB4  +
push 40002787h  +
call sub_100E4FD  +
xor eax eax +
inc eax  +
jmp loc_100CEF3  +
cmp dword ptr [ebx+1Ch] 0 +
ja loc_100CDAA  +
cmp dword ptr [ebx+18h] 7FFFEFFFh +
jbe loc_100CDCB  +
push ebx  +
call ds:free  +
pop ecx  +
push 0Eh  +
call sub_100E412  +
pop ecx  +
push [ebp+hDevice]  +
call ds:CloseHandle  +
jmp loc_100CED5  +
mov esi [ebx+18h] +
lea esi [esi+esi+1000h] +
push ebx  +
mov [ebp+nOutBufferSize] esi +
call ds:free  +
push esi  +
call ds:malloc  +
mov ebx eax +
pop ecx  +
pop ecx  +
test ebx ebx +
jz loc_100CDB2  +
push 0  +
lea eax [ebp+BytesReturned] +
push eax  +
push [ebp+nOutBufferSize]  +
lea esi [ebp+iid] +
mov edi ebx +
movs   +
push ebx  +
movs   +
push 28h  +
push ebx  +
movs   +
push 941E0h  +
push [ebp+hDevice]  +
movs   +
call ds:DeviceIoControl  +
test eax eax +
jz loc_100CEBC  +
push dword ptr [ebx+14h]  +
lea eax [ebp+var_AC] +
push dword ptr [ebx+10h]  +
push offset aI  +
push 14h  +
push eax  +
call sub_100CAC7  +
lea eax [ebp+var_AC] +
push eax  +
push 4000279Ah  +
call sub_100E4FD  +
add esp 1Ch +
cmp dword ptr [ebx+24h] 0 +
ja loc_100CE5C  +
cmp dword ptr [ebx+20h] 0 +
jbe loc_100CEBC  +
mov esi [ebx+20h] +
add esi ebx +
cmp word ptr [esi+28h] 0 +
jz loc_100CEB4  +
xor eax eax +
lea edi [ebp+WideCharStr] +
stos   +
stos   +
test byte ptr [esi+8] 1 +
jz loc_100CE79  +
push 43h  +
jmp loc_100CE7B  +
push 2Dh  +
pop eax  +
mov [ebp+WideCharStr] ax +
test byte ptr [esi+8] 2 +
jz loc_100CE8A  +
push 44h  +
jmp loc_100CE8C  +
push 2Dh  +
pop eax  +
push 20h  +
mov [ebp-0Ah] ax +
pop eax  +
mov word ptr [ebp+nOutBufferSize] ax +
lea eax [ebp+WideCharStr] +
push eax  +
call sub_100E3E7  +
lea eax [esi+28h] +
push eax  +
call sub_100E3E7  +
push offset WideCharStr  +
call sub_100E3E7  +
mov esi [esi] +
add esi ebx +
cmp esi ebx +
jnz loc_100CE61  +
push ebx  +
call ds:free  +
jmp loc_100CDB9  +
call ds:GetLastError  +
push eax  +
call sub_100E412  +
pop ecx  +
push [ebp+hObject]  +
call ds:CloseHandle  +
xor eax eax +
jmp loc_100CEF4  +
call ds:GetLastError  +
push eax  +
call sub_100E412  +
mov eax esi +
pop ecx  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100F411  +
leave   +
retn 8  +
***
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+8] +
mov ecx [eax] +
mov edx [ebp-4] +
push esi  +
add eax ecx +
push 0  +
pop esi  +
adc edx esi +
mov ecx eax +
and ecx 7 +
or ecx esi +
jz loc_100CF4A  +
and eax 0FFFFFFF8h +
add eax 8 +
adc edx esi +
mov [ebp-4] edx +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 224h +
mov eax dword_1011584 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea eax [ebp+var_224] +
push eax  +
lea edi [esi+20h] +
push edi  +
call ds:RtlTimeToTimeFields  +
mov ax word ptr [ebp+var_224] +
mov [ebp+Time.wYear] ax +
mov ax word ptr [ebp+var_224+2] +
mov [ebp+Time.wMonth] ax +
mov ax [ebp+var_216] +
mov [ebp+Time.wDayOfWeek] ax +
mov ax [ebp+var_220] +
mov [ebp+Time.wDay] ax +
mov ax [ebp+var_21E] +
mov [ebp+Time.wHour] ax +
mov ax [ebp+var_21C] +
mov [ebp+Time.wMinute] ax +
mov ax [ebp+var_21A] +
mov [ebp+Time.wSecond] ax +
mov ax [ebp+var_218] +
push 80h  +
mov [ebp+Time.wMilliseconds] ax +
lea eax [ebp+DateStr] +
push eax  +
push 0  +
lea eax [ebp+Time] +
push eax  +
push 1  +
mov ebx 400h +
push ebx  +
call ds:GetDateFormatW  +
push 80h  +
lea eax [ebp+TimeStr] +
push eax  +
push 0  +
lea eax [ebp+Time] +
push eax  +
push 0  +
push ebx  +
call ds:GetTimeFormatW  +
movzx eax word ptr [esi+38h] +
lea ecx [esi+3Ch] +
push ecx  +
mov ecx eax +
shr ecx 1 +
push ecx  +
movzx ecx word ptr [esi+3Ah] +
push ecx  +
push eax  +
push dword ptr [esi+34h]  +
lea eax [ebp+DateStr] +
push dword ptr [esi+30h]  +
push dword ptr [esi+2Ch]  +
push dword ptr [esi+28h]  +
push eax  +
lea eax [ebp+TimeStr] +
push eax  +
push dword ptr [edi+4]  +
push dword ptr [edi]  +
call sub_100DE84  +
push eax  +
push dword ptr [esi+1Ch]  +
push dword ptr [esi+18h]  +
call sub_100DE84  +
push eax  +
push dword ptr [esi+14h]  +
push dword ptr [esi+10h]  +
call sub_100DE84  +
push eax  +
push dword ptr [esi+0Ch]  +
push dword ptr [esi+8]  +
call sub_100DE84  +
push eax  +
movzx eax word ptr [esi+6] +
push eax  +
movzx eax word ptr [esi+4] +
push eax  +
push 4000276Ch  +
call sub_100E4FD  +
mov ecx [ebp+var_4] +
add esp 44h +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100F411  +
leave   +
retn 4  +
***
jmp loc_100D14C  +
***
cmp dword ptr [ebp-23Ch] 0FFFFFFFFh +
jz locret_100D304  +
push dword ptr [ebp-23Ch]  +
call ds:CloseHandle  +
retn   +
***
call sub_100E5AC  +
jmp loc_100D34A  +
***
cmp dword ptr [ebp-23Ch] 0FFFFFFFFh +
jz locret_100D487  +
push dword ptr [ebp-23Ch]  +
call ds:CloseHandle  +
retn   +
***
or dword ptr [ebp-250h] 2 +
jmp loc_100D5B6  +
or dword ptr [ebp-250h] 1 +
inc edi  +
mov ebx [ebp-240h] +
jmp loc_100D55E  +
***
cmp dword ptr [ebp-23Ch] 0FFFFFFFFh +
jz locret_100D65F  +
push dword ptr [ebp-23Ch]  +
call ds:CloseHandle  +
retn   +
***
call __SEH_prolog4_GS  +
mov edi [ebp+0Ch] +
or dword ptr [ebp-244h] 0FFFFFFFFh +
xor ebx ebx +
mov [ebp-240h] ebx +
mov [ebp-238h] ebx +
mov [ebp-4] ebx +
cmp dword ptr [ebp+8] 4 +
jz loc_100D6AE  +
push 40002770h  +
call sub_100E4FD  +
pop ecx  +
cmp [ebp+8] ebx +
jz loc_100D8DA  +
jmp loc_100D8D0  +
lea eax [ebp-238h] +
push eax  +
push 4000274Ch  +
push offset sub_100E5BF  +
push 10Ch  +
lea eax [ebp-234h] +
push eax  +
push dword ptr [edi+0Ch]  +
call sub_100E771  +
cmp eax ebx +
jz loc_100D8DA  +
push ebx  +
push 80h  +
push 3  +
push ebx  +
push 3  +
push 80000000h  +
push eax  +
call ds:CreateFileW  +
mov [ebp-244h] eax +
cmp eax 0FFFFFFFFh +
jnz loc_100D707  +
call sub_100E5AC  +
jmp loc_100D8D0  +
push 1000h  +
call ds:malloc  +
pop ecx  +
mov [ebp-240h] eax +
cmp eax ebx +
jnz loc_100D727  +
push 0Eh  +
call ds:SetLastError  +
jmp loc_100D6FD  +
***
mov esi ds:_errno +
call esi  +
mov [eax] ebx +
push ebx  +
lea eax [ebp-23Ch] +
push eax  +
push dword ptr [edi]  +
call sub_100E0D7  +
add esp 0Ch +
mov [ebp-260h] eax +
mov [ebp-25Ch] edx +
mov ecx [ebp-23Ch] +
cmp [ecx] bx +
jnz loc_100D8C5  +
and eax edx +
cmp eax 0FFFFFFFFh +
jnz loc_100D770  +
call esi  +
cmp dword ptr [eax] 22h +
jz loc_100D8C5  +
call esi  +
mov [eax] ebx +
push ebx  +
lea eax [ebp-23Ch] +
push eax  +
push dword ptr [edi+4]  +
call sub_100E0D7  +
add esp 0Ch +
mov [ebp-258h] eax +
mov [ebp-254h] edx +
mov ecx [ebp-23Ch] +
cmp [ecx] bx +
jnz loc_100D8C5  +
and eax edx +
cmp eax 0FFFFFFFFh +
jnz loc_100D7B4  +
call esi  +
cmp dword ptr [eax] 22h +
jz loc_100D8C5  +
call esi  +
mov [eax] ebx +
push ebx  +
lea eax [ebp-23Ch] +
push eax  +
push dword ptr [edi+8]  +
call sub_100E0D7  +
add esp 0Ch +
mov [ebp-250h] eax +
mov [ebp-24Ch] edx +
mov ecx [ebp-23Ch] +
cmp [ecx] bx +
jnz loc_100D8C5  +
and eax edx +
cmp eax 0FFFFFFFFh +
jnz loc_100D7F8  +
call esi  +
cmp dword ptr [eax] 22h +
jz loc_100D8C5  +
push ebx  +
lea eax [ebp-248h] +
push eax  +
mov eax 1000h +
push eax  +
push dword ptr [ebp-240h]  +
push 18h  +
lea eax [ebp-260h] +
push eax  +
push 900B3h  +
push dword ptr [ebp-244h]  +
call ds:DeviceIoControl  +
cmp eax ebx +
jnz loc_100D83E  +
call ds:GetLastError  +
cmp eax 26h +
jz loc_100D8DA  +
jmp loc_100D6FD  +
***
cmp dword ptr [ebp-248h] 48h +
jb loc_100D8DA  +
mov edi [ebp-240h] +
lea esi [edi+8] +
mov eax [ebp-248h] +
add eax edi +
cmp esi eax +
jnb loc_100D8AF  +
movzx eax word ptr [esi+38h] +
lea ecx [esi+3Ch] +
push ecx  +
mov ecx eax +
shr ecx 1 +
push ecx  +
push eax  +
push dword ptr [esi+28h]  +
push dword ptr [esi+30h]  +
push dword ptr [esi+1Ch]  +
push dword ptr [esi+18h]  +
call sub_100DE84  +
push eax  +
push dword ptr [esi+14h]  +
push dword ptr [esi+10h]  +
call sub_100DE84  +
push eax  +
push dword ptr [esi+0Ch]  +
push dword ptr [esi+8]  +
call sub_100DE84  +
push eax  +
push 40002771h  +
call sub_100E4FD  +
add esp 24h +
push esi  +
call near ptr dword_100CF08+17h  +
mov esi eax +
jmp loc_100D854  +
***
mov eax [edi] +
mov [ebp-260h] eax +
mov eax [edi+4] +
mov [ebp-25Ch] eax +
jmp loc_100D7F8  +
***
push 40002770h  +
call sub_100E4FD  +
pop ecx  +
mov dword ptr [ebp-238h] 1 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_100D8F6  +
mov eax [ebp-238h] +
call __SEH_epilog4_GS  +
retn 8  +
***
cmp dword ptr [ebp-244h] 0FFFFFFFFh +
jz loc_100D90B  +
push dword ptr [ebp-244h]  +
call ds:CloseHandle  +
cmp [ebp-240h] ebx +
jz locret_100D920  +
push dword ptr [ebp-240h]  +
call ds:free  +
pop ecx  +
retn   +
***
push offset dword_100FF78  +
call __SEH_prolog4  +
or dword ptr [ebp-20h] 0FFFFFFFFh +
xor edi edi +
mov [ebp-24h] edi +
mov [ebp-28h] edi +
mov [ebp-1Ch] edi +
mov [ebp-4] edi +
xor ebx ebx +
inc ebx  +
cmp [ebp+8] ebx +
jz loc_100D968  +
push 40002772h  +
call sub_100E4FD  +
pop ecx  +
cmp [ebp+8] edi +
jz loc_100D9F9  +
mov [ebp-1Ch] ebx +
jmp loc_100D9F9  +
mov eax [ebp+0Ch] +
push dword ptr [eax]  +
call sub_100DDAF  +
mov esi eax +
mov [ebp-28h] esi +
cmp esi edi +
jnz loc_100D982  +
call sub_100E5AC  +
jmp loc_100D960  +
***
push esi  +
call sub_100E5BF  +
test eax eax +
jnz loc_100D999  +
push 4000274Ch  +
call sub_100E4FD  +
pop ecx  +
jmp loc_100D960  +
***
push edi  +
push 2000080h  +
push 3  +
push edi  +
push 3  +
push 80000000h  +
push esi  +
call ds:CreateFileW  +
mov [ebp-20h] eax +
cmp eax 0FFFFFFFFh +
jz loc_100D97B  +
mov esi 1000h +
push esi  +
call ds:malloc  +
pop ecx  +
mov [ebp-24h] eax +
cmp eax edi +
jnz loc_100D9D6  +
push 0Eh  +
call ds:SetLastError  +
jmp loc_100D97B  +
***
push edi  +
lea ecx [ebp+0Ch] +
push ecx  +
push esi  +
push eax  +
push edi  +
push edi  +
push 900EBh  +
push dword ptr [ebp-20h]  +
call ds:DeviceIoControl  +
cmp eax edi +
jz loc_100D97B  +
push dword ptr [ebp-24h]  +
call sub_100CF54  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_100DA12  +
mov eax [ebp-1Ch] +
call __SEH_epilog4  +
retn 8  +
***
cmp dword ptr [ebp-20h] 0FFFFFFFFh +
jz loc_100DA21  +
push dword ptr [ebp-20h]  +
call ds:CloseHandle  +
cmp [ebp-24h] edi +
jz loc_100DA30  +
push dword ptr [ebp-24h]  +
call ds:free  +
pop ecx  +
push dword ptr [ebp-28h]  +
call ds:free  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
push edi  +
push 0FFFFFFF5h  +
call ds:GetStdHandle  +
mov edi eax +
xor esi esi +
mov [ebp+hFile] edi +
cmp edi esi +
jz loc_100DAF5  +
push edi  +
call ds:GetFileType  +
cmp eax 2 +
jnz loc_100DA90  +
lea eax [ebp+Mode] +
push eax  +
push edi  +
call ds:GetConsoleMode  +
test eax eax +
jz loc_100DA90  +
push esi  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push [ebp+cchWideChar]  +
push [ebp+lpWideCharStr]  +
push edi  +
call ds:WriteConsoleW  +
jmp loc_100DAF5  +
mov edi ds:GetConsoleOutputCP +
push ebx  +
push esi  +
push esi  +
push esi  +
push esi  +
push [ebp+cchWideChar]  +
push [ebp+lpWideCharStr]  +
push esi  +
call edi  +
mov ebx ds:WideCharToMultiByte +
push eax  +
call ebx  +
mov [ebp+nNumberOfBytesToWrite] eax +
inc eax  +
push eax  +
call ds:malloc  +
pop ecx  +
mov [ebp+lpBuffer] eax +
cmp eax esi +
jz loc_100DAF4  +
mov eax [ebp+nNumberOfBytesToWrite] +
push esi  +
push esi  +
inc eax  +
push eax  +
push [ebp+lpBuffer]  +
push [ebp+cchWideChar]  +
push [ebp+lpWideCharStr]  +
push esi  +
call edi  +
push eax  +
call ebx  +
push esi  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push [ebp+nNumberOfBytesToWrite]  +
push [ebp+lpBuffer]  +
push [ebp+hFile]  +
call ds:WriteFile  +
push [ebp+lpBuffer]  +
call ds:free  +
pop ecx  +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx [ebp+lpBuffer] +
push esi  +
mov esi ds:FormatMessageW +
push edi  +
lea eax [ebp+lpBuffer] +
mov [ebp+Arguments] eax +
lea eax [ebp+Arguments] +
push eax  +
xor edi edi +
cmp [ebp+dwMessageId] 40002710h +
push edi  +
push ebx  +
sbb ecx ecx +
push edi  +
push [ebp+dwMessageId]  +
mov eax 800h +
and ecx eax +
add ecx eax +
push edi  +
or ecx 100h +
push ecx  +
call esi  +
cmp eax edi +
jnz loc_100DB74  +
mov eax dword_1011580 +
cmp eax 0FFFFFFFFh +
jnz loc_100DB5E  +
push offset aNtdll  +
call ds:GetModuleHandleW  +
mov dword_1011580 eax +
lea ecx [ebp+Arguments] +
push ecx  +
push edi  +
push ebx  +
push edi  +
push [ebp+dwMessageId]  +
push eax  +
push 900h  +
call esi  +
cmp eax edi +
jz loc_100DBA3  +
mov edx [ebx] +
mov ecx edx +
lea ebx [ecx+2] +
mov si [ecx] +
inc ecx  +
inc ecx  +
cmp si di +
jnz loc_100DB7B  +
sub ecx ebx +
sar ecx 1 +
jz loc_100DBA3  +
lea ecx [edx+ecx*2-2] +
movzx edx word ptr [ecx] +
cmp dx 0Ah +
jz loc_100DB9E  +
cmp dx 0Dh +
jnz loc_100DBA3  +
xor edx edx +
mov [ecx] dx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
call __SEH_prolog4_GS  +
push esi  +
mov esi ds:free +
call esi  +
push dword ptr [ebp-430h]  +
call esi  +
pop ecx  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_1011584 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
lea eax [ebp+pSid] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 220h  +
push 20h  +
push 2  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
mov [ebp+var_10] ebx +
mov [ebp+pIdentifierAuthority.Value] bl +
mov [ebp+pIdentifierAuthority.Value+1] bl +
mov [ebp+pIdentifierAuthority.Value+2] bl +
mov [ebp+pIdentifierAuthority.Value+3] bl +
mov [ebp+pIdentifierAuthority.Value+4] bl +
mov [ebp+pIdentifierAuthority.Value+5] 5 +
mov [ebp+pSid] ebx +
call ds:AllocateAndInitializeSid  +
mov [ebp+var_10] eax +
cmp eax ebx +
jz loc_100DD9A  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+pSid]  +
push ebx  +
call ds:CheckTokenMembership  +
test eax eax +
jnz loc_100DD91  +
mov [ebp+var_10] ebx +
push [ebp+pSid]  +
call ds:FreeSid  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_10] +
xor ecx ebp +
pop ebx  +
call sub_100F411  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 210h +
mov eax dword_1011584 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+lpFileName] +
lea ecx [ebp+FilePart] +
push ecx  +
lea ecx [ebp+Buffer] +
push ecx  +
push 104h  +
push eax  +
call ds:GetFullPathNameW  +
test eax eax +
jz loc_100DDF3  +
lea eax [ebp+Buffer] +
push eax  +
call ds:_wcsdup  +
pop ecx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_100F411  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 50h  +
call ds:malloc  +
mov esi eax +
pop ecx  +
test esi esi +
jnz loc_100DE23  +
push 1  +
call ds:exit  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset aI64u  +
push 28h  +
push esi  +
call swprintf_s  +
add esp 14h +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 50h  +
call ds:malloc  +
mov esi eax +
pop ecx  +
test esi esi +
jnz loc_100DE62  +
push 1  +
call ds:exit  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset aI64x  +
push 28h  +
push esi  +
call swprintf_s  +
add esp 14h +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 50h  +
call ds:malloc  +
mov esi eax +
pop ecx  +
test esi esi +
jnz loc_100DEA1  +
push 1  +
call ds:exit  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset a016i64x  +
push 28h  +
push esi  +
call swprintf_s  +
add esp 14h +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
and [ebp+var_8] 0 +
and [ebp+var_4] 0 +
push ebx  +
mov ebx ds:iswspace +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
movzx esi word ptr [edi] +
add edi 2 +
jmp loc_100DEEC  +
movzx esi word ptr [edi] +
inc edi  +
inc edi  +
push esi  +
call ebx  +
pop ecx  +
test eax eax +
jnz loc_100DEE7  +
cmp si 2Dh +
jnz loc_100DF00  +
or [ebp+arg_C] 2 +
jmp loc_100DF06  +
cmp si 2Bh +
jnz loc_100DF0B  +
movzx esi word ptr [edi] +
inc edi  +
inc edi  +
mov eax [ebp+arg_8] +
test eax eax +
jl loc_100E0BD  +
cmp eax 1 +
jz loc_100E0BD  +
cmp eax 24h +
jg loc_100E0BD  +
push 10h  +
pop ecx  +
test eax eax +
jnz loc_100DF59  +
cmp si 30h +
jz loc_100DF3E  +
mov [ebp+arg_8] 0Ah +
jmp loc_100DF7A  +
movzx eax word ptr [edi] +
cmp ax 78h +
jz loc_100DF56  +
cmp ax 58h +
jz loc_100DF56  +
mov [ebp+arg_8] 8 +
jmp loc_100DF7A  +
mov [ebp+arg_8] ecx +
cmp [ebp+arg_8] ecx +
jnz loc_100DF7A  +
cmp si 30h +
jnz loc_100DF7A  +
movzx eax word ptr [edi] +
cmp ax 78h +
jz loc_100DF73  +
cmp ax 58h +
jnz loc_100DF7A  +
inc edi  +
inc edi  +
movzx esi word ptr [edi] +
inc edi  +
inc edi  +
mov eax [ebp+arg_8] +
cdq   +
push edx  +
push eax  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
mov [ebp+var_18] eax +
mov [ebp+var_14] edx +
call __aulldvrm  +
mov [ebp+var_C] ebx +
mov [ebp+var_10] ecx +
mov [ebp+var_20] eax +
mov ebx edx +
movzx esi si +
push esi  +
call ds:isdigit  +
pop ecx  +
test eax eax +
jz loc_100DFAE  +
add esi 0FFFFFFD0h +
jmp loc_100DFC7  +
push esi  +
call ds:isalpha  +
pop ecx  +
test eax eax +
jz loc_100E027  +
push esi  +
call ds:toupper  +
mov esi eax +
pop ecx  +
sub esi 37h +
cmp esi [ebp+arg_8] +
jnb loc_100E027  +
or [ebp+arg_C] 8 +
cmp [ebp+var_4] ebx +
jb loc_100E000  +
ja loc_100DFDF  +
mov eax [ebp+var_8] +
cmp eax [ebp+var_20] +
jb loc_100E000  +
mov eax [ebp+var_20] +
cmp [ebp+var_8] eax +
jnz loc_100DFFA  +
cmp [ebp+var_4] ebx +
jnz loc_100DFFA  +
xor eax eax +
cmp eax [ebp+var_C] +
jb loc_100E000  +
ja loc_100DFFA  +
cmp esi [ebp+var_10] +
jbe loc_100E000  +
or [ebp+arg_C] 4 +
jmp loc_100E01D  +
push [ebp+var_4]  +
push [ebp+var_8]  +
push [ebp+var_14]  +
push [ebp+var_18]  +
call __allmul  +
xor ecx ecx +
add eax esi +
adc edx ecx +
mov [ebp+var_8] eax +
mov [ebp+var_4] edx +
movzx esi word ptr [edi] +
inc edi  +
inc edi  +
jmp loc_100DF9A  +
mov ebx [ebp+arg_C] +
dec edi  +
dec edi  +
test bl 8 +
jnz loc_100E03E  +
and [ebp+var_8] 0 +
mov edi [ebp+arg_0] +
and [ebp+var_4] 0 +
jmp loc_100E094  +
test bl 4 +
jnz loc_100E06F  +
mov edx ebx +
and edx 1 +
jnz loc_100E059  +
mov ecx [ebp+var_4] +
and ecx 80000000h +
xor eax eax +
or eax ecx +
jnz loc_100E06F  +
test edx edx +
jz loc_100E094  +
test bl 2 +
jz loc_100E094  +
and [ebp+var_8] 0 +
and [ebp+var_4] 0 +
mov edi [ebp+arg_0] +
jmp loc_100E094  +
call ds:_errno  +
or [ebp+var_8] 0FFFFFFFFh +
mov dword ptr [eax] 22h +
test bl 1 +
jz loc_100E08A  +
or [ebp+var_4] 0FFFFFFFFh +
jmp loc_100E091  +
mov [ebp+var_4] 7FFFFFFFh +
and ebx 0FFFFFFFDh +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_100E09D  +
mov [eax] edi +
test bl 2 +
jz loc_100E0B5  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_4] +
neg eax  +
adc ecx 0 +
neg ecx  +
mov [ebp+var_8] eax +
mov [ebp+var_4] ecx +
mov eax [ebp+var_8] +
mov edx [ebp+var_4] +
jmp loc_100E0CD  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_100E0C9  +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
xor eax eax +
xor edx edx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 1  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100DEC3  +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
and [ebp+var_4] 0 +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
movzx esi word ptr [ebx] +
push edi  +
mov edi ds:iswspace +
add ebx 2 +
jmp loc_100E11B  +
movzx esi word ptr [ebx] +
inc ebx  +
inc ebx  +
push esi  +
call edi  +
pop ecx  +
test eax eax +
jnz loc_100E116  +
cmp si 2Dh +
jnz loc_100E12F  +
or [ebp+arg_C] 2 +
jmp loc_100E135  +
cmp si 2Bh +
jnz loc_100E13A  +
movzx esi word ptr [ebx] +
inc ebx  +
inc ebx  +
mov eax [ebp+arg_8] +
test eax eax +
jl loc_100E2AA  +
cmp eax 1 +
jz loc_100E2AA  +
cmp eax 24h +
jg loc_100E2AA  +
push 10h  +
pop ecx  +
test eax eax +
jnz loc_100E188  +
cmp si 30h +
jz loc_100E16D  +
mov [ebp+arg_8] 0Ah +
jmp loc_100E1A9  +
movzx eax word ptr [ebx] +
cmp ax 78h +
jz loc_100E185  +
cmp ax 58h +
jz loc_100E185  +
mov [ebp+arg_8] 8 +
jmp loc_100E1A9  +
mov [ebp+arg_8] ecx +
cmp [ebp+arg_8] ecx +
jnz loc_100E1A9  +
cmp si 30h +
jnz loc_100E1A9  +
movzx eax word ptr [ebx] +
cmp ax 78h +
jz loc_100E1A2  +
cmp ax 58h +
jnz loc_100E1A9  +
inc ebx  +
inc ebx  +
movzx esi word ptr [ebx] +
inc ebx  +
inc ebx  +
or eax 0FFFFFFFFh +
xor edx edx +
div  [ebp+arg_8] +
mov edi 0FFh +
mov [ebp+var_C] edx +
mov [ebp+var_8] eax +
jmp loc_100E218  +
push esi  +
call ds:iswdigit  +
pop ecx  +
test eax eax +
jz loc_100E1D2  +
movzx eax si +
sub eax 30h +
jmp loc_100E1EC  +
push esi  +
call ds:iswalpha  +
pop ecx  +
test eax eax +
jz loc_100E21F  +
push esi  +
call ds:towupper  +
movzx eax ax +
pop ecx  +
sub eax 37h +
cmp eax [ebp+arg_8] +
jnb loc_100E21F  +
mov ecx [ebp+var_4] +
or [ebp+arg_C] 8 +
cmp ecx [ebp+var_8] +
jb loc_100E20A  +
jnz loc_100E204  +
cmp eax [ebp+var_C] +
jbe loc_100E20A  +
or [ebp+arg_C] 4 +
jmp loc_100E213  +
imul ecx [ebp+arg_8] +
add ecx eax +
mov [ebp+var_4] ecx +
movzx esi word ptr [ebx] +
inc ebx  +
inc ebx  +
mov eax edi +
cmp si ax +
jbe loc_100E1BE  +
mov ecx [ebp+arg_C] +
dec ebx  +
dec ebx  +
test cl 8 +
jnz loc_100E238  +
cmp [ebp+arg_4] 0 +
jz loc_100E232  +
mov ebx [ebp+arg_0] +
and [ebp+var_4] 0 +
jmp loc_100E293  +
mov esi 7FFFFFFFh +
test cl 4 +
jnz loc_100E274  +
and ecx 1 +
jnz loc_100E261  +
mov eax [ebp+arg_C] +
and eax 2 +
jz loc_100E258  +
cmp [ebp+var_4] 80000000h +
ja loc_100E274  +
test eax eax +
jnz loc_100E261  +
cmp [ebp+var_4] esi +
ja loc_100E274  +
test ecx ecx +
jz loc_100E293  +
test byte ptr [ebp+arg_C] 2 +
jz loc_100E293  +
and [ebp+var_4] 0 +
mov ebx [ebp+arg_0] +
jmp loc_100E293  +
call ds:_errno  +
mov dword ptr [eax] 22h +
movsx eax byte ptr [ebp+arg_C] +
and eax 1 +
shl eax 1Fh +
or eax esi +
and [ebp+arg_C] 0FFFFFFFDh +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_100E29C  +
mov [eax] ebx +
test byte ptr [ebp+arg_C] 2 +
jz loc_100E2A5  +
neg [ebp+var_4]  +
mov eax [ebp+var_4] +
jmp loc_100E2B8  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_100E2B6  +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 1  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100E0F6  +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpiid]  +
push [ebp+lpsz]  +
call ds:IIDFromString  +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push esi  +
lea eax [ebp+TokenHandle] +
push eax  +
xor esi esi +
push 28h  +
mov [ebp+TokenHandle] esi +
call ds:GetCurrentProcess  +
push eax  +
call ds:OpenProcessToken  +
test eax eax +
jnz loc_100E32F  +
mov eax 65Bh +
pop esi  +
leave   +
retn 8  +
lea eax [ebp+Luid] +
push eax  +
push [ebp+lpName]  +
push esi  +
call ds:LookupPrivilegeValueW  +
test eax eax +
jnz loc_100E353  +
mov esi 65Bh +
push [ebp+TokenHandle]  +
call ds:CloseHandle  +
mov eax esi +
jmp loc_100E32A  +
mov eax [ebp+Luid.LowPart] +
mov [ebp+NewState.Privileges.Luid.LowPart] eax +
mov eax [ebp+Luid.HighPart] +
mov [ebp+NewState.Privileges.Luid.HighPart] eax +
mov eax [ebp+arg_4] +
neg eax  +
push esi  +
sbb eax eax +
push esi  +
and eax 2 +
push esi  +
mov [ebp+NewState.Privileges.Attributes] eax +
lea eax [ebp+NewState] +
push eax  +
push esi  +
push [ebp+TokenHandle]  +
mov [ebp+NewState.PrivilegeCount] 1 +
call ds:AdjustTokenPrivileges  +
test eax eax +
jnz loc_100E346  +
jmp loc_100E341  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi eax +
push edi  +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_100E3C5  +
cmp [ebp+arg_8] eax +
jz loc_100E3C1  +
movzx edx word ptr [ebx] +
test dx dx +
jz loc_100E3C1  +
mov [ecx] dx +
inc ecx  +
inc ecx  +
inc ebx  +
inc ebx  +
dec esi  +
dec [ebp+arg_8]  +
inc edi  +
test esi esi +
jnz loc_100E3A4  +
test esi esi +
jnz loc_100E3CD  +
dec ecx  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
xor edx edx +
mov [ecx] dx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100E3DB  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+lpWideCharStr] +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_100E3F2  +
sub eax ecx +
sar eax 1 +
push eax  +
push [ebp+lpWideCharStr]  +
call sub_100DA40  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi ds:FormatMessageW +
push edi  +
xor edi edi +
push edi  +
push edi  +
lea eax [ebp+arg_4] +
mov [ebp+Arguments] eax +
lea eax [ebp+lpWideCharStr] +
push eax  +
push edi  +
push 40002711h  +
push edi  +
mov ebx 900h +
push ebx  +
call esi  +
test eax eax +
jz loc_100E454  +
push [ebp+lpWideCharStr]  +
call sub_100E3E7  +
push [ebp+lpWideCharStr]  +
call ds:LocalFree  +
lea eax [ebp+Arguments] +
push eax  +
push edi  +
lea eax [ebp+lpWideCharStr] +
push eax  +
xor eax eax +
cmp [ebp+dwMessageId] 40002710h +
push edi  +
push [ebp+dwMessageId]  +
setl al  +
push edi  +
dec eax  +
and eax 0FFFFF800h +
add eax 1000h +
or eax 100h +
push eax  +
call esi  +
test eax eax +
jnz loc_100E4B4  +
mov eax dword_1011580 +
cmp eax 0FFFFFFFFh +
jnz loc_100E49F  +
push offset aNtdll  +
call ds:GetModuleHandleW  +
mov dword_1011580 eax +
lea ecx [ebp+Arguments] +
push ecx  +
push edi  +
lea ecx [ebp+lpWideCharStr] +
push ecx  +
push edi  +
push [ebp+dwMessageId]  +
push eax  +
push ebx  +
call esi  +
test eax eax +
jz loc_100E4DB  +
push offset asc_10019EC  +
call sub_100E3E7  +
push [ebp+lpWideCharStr]  +
call sub_100E3E7  +
push offset WideCharStr  +
call sub_100E3E7  +
push [ebp+lpWideCharStr]  +
call ds:LocalFree  +
jmp loc_100E4F3  +
call ds:GetLastError  +
push eax  +
push [ebp+dwMessageId]  +
push offset aUnableToFormat  +
call ds:wprintf  +
add esp 0Ch +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi ds:FormatMessageW +
push edi  +
lea eax [ebp+arg_4] +
mov [ebp+Arguments] eax +
lea eax [ebp+Arguments] +
push eax  +
xor ebx ebx +
push ebx  +
lea eax [ebp+lpWideCharStr] +
push eax  +
push ebx  +
push [ebp+dwMessageId]  +
mov edi 900h +
push ebx  +
push edi  +
call esi  +
test eax eax +
jz loc_100E534  +
push [ebp+lpWideCharStr]  +
jmp loc_100E57A  +
mov eax dword_1011580 +
cmp eax 0FFFFFFFFh +
jnz loc_100E54E  +
push offset aNtdll  +
call ds:GetModuleHandleW  +
mov dword_1011580 eax +
lea ecx [ebp+Arguments] +
push ecx  +
push ebx  +
lea ecx [ebp+lpWideCharStr] +
push ecx  +
push ebx  +
push [ebp+dwMessageId]  +
push eax  +
push edi  +
call esi  +
test eax eax +
jz loc_100E58A  +
push offset asc_10019EC  +
call sub_100E3E7  +
push [ebp+lpWideCharStr]  +
call sub_100E3E7  +
push offset WideCharStr  +
call sub_100E3E7  +
push [ebp+lpWideCharStr]  +
call ds:LocalFree  +
jmp loc_100E5A2  +
call ds:GetLastError  +
push eax  +
push [ebp+dwMessageId]  +
push offset aUnableToFormat  +
call ds:wprintf  +
add esp 0Ch +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
call ds:GetLastError  +
push eax  +
call sub_100E412  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 418h +
mov eax dword_1011584 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push esi  +
mov esi 104h +
push esi  +
lea ecx [ebp+RootPathName] +
push ecx  +
push eax  +
call ds:GetVolumePathNameW  +
test eax eax +
jnz loc_100E606  +
call sub_100E5AC  +
xor eax eax +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_100F411  +
leave   +
retn 4  +
lea eax [ebp+RootPathName] +
push eax  +
call ds:GetDriveTypeW  +
xor ecx ecx +
cmp eax ecx +
jz loc_100E5F5  +
cmp eax 4 +
jz loc_100E5F5  +
push esi  +
lea eax [ebp+FileSystemNameBuffer] +
push eax  +
lea eax [ebp+FileSystemFlags] +
push eax  +
push eax  +
push ecx  +
push ecx  +
push ecx  +
lea eax [ebp+RootPathName] +
push eax  +
call ds:GetVolumeInformationW  +
test eax eax +
jz loc_100E5F0  +
lea eax [ebp+FileSystemNameBuffer] +
push offset aNtfs  +
push eax  +
call ds:_wcsicmp  +
neg eax  +
pop ecx  +
sbb eax eax +
pop ecx  +
inc eax  +
jmp loc_100E5F7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 210h +
mov eax dword_1011584 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+lpRootPathName] +
push esi  +
mov eax ebx +
push edi  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100E682  +
sub eax edx +
sar eax 1 +
lea esi [ebx+eax*2] +
cmp esi ebx +
jb loc_100E6FF  +
cmp word ptr [esi] 5Ch +
jz loc_100E6A1  +
dec esi  +
dec esi  +
jmp loc_100E693  +
movzx edi word ptr [esi+2] +
xor eax eax +
push 104h  +
mov [esi+2] ax +
lea eax [ebp+FileSystemNameBuffer] +
push eax  +
lea eax [ebp+FileSystemFlags] +
push eax  +
push eax  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push ebx  +
call ds:GetVolumeInformationW  +
mov [esi+2] di +
dec esi  +
dec esi  +
test eax eax +
jz loc_100E693  +
lea eax [ebp+FileSystemNameBuffer] +
push offset aNtfs  +
push eax  +
call ds:_wcsicmp  +
neg eax  +
pop ecx  +
sbb eax eax +
pop ecx  +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100F411  +
leave   +
retn 4  +
call sub_100E5AC  +
xor eax eax +
jmp loc_100E6EE  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_1011584 +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+8] +
push 104h  +
lea ecx [ebp-20Ch] +
push ecx  +
push eax  +
call ds:GetVolumePathNameW  +
test eax eax +
jnz loc_100E751  +
call sub_100E5AC  +
xor eax eax +
mov ecx [ebp-4] +
xor ecx ebp +
call sub_100F411  +
leave   +
retn 4  +
***
lea eax [ebp-20Ch] +
push eax  +
call ds:GetDriveTypeW  +
test eax eax +
jz loc_100E741  +
cmp eax 4 +
jz loc_100E741  +
xor eax eax +
inc eax  +
jmp loc_100E743  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call [ebp+arg_C]  +
test eax eax +
jnz loc_100E796  +
push [ebp+dwMessageId]  +
call sub_100E4FD  +
mov eax [ebp+arg_14] +
mov dword ptr [eax] 1 +
pop ecx  +
xor eax eax +
jmp loc_100E7DD  +
mov eax [ebp+arg_0] +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_100E79C  +
sub eax ecx +
sar eax 1 +
add eax 9 +
cmp eax [ebp+arg_8] +
jbe loc_100E7B9  +
push 400027EAh  +
jmp loc_100E783  +
push [ebp+arg_0]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call wcscpy_s  +
push offset aVolume  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call wcscat_s  +
mov eax [ebp+arg_4] +
add esp 18h +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push edi  +
mov edi [ebp+arg_0] +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100E7F5  +
mov ebx [ebp+arg_8] +
sub eax edx +
sar eax 1 +
lea ecx [eax+5] +
cmp ecx ebx +
jbe loc_100E825  +
push 400027EAh  +
call sub_100E4FD  +
mov eax [ebp+arg_C] +
mov dword ptr [eax] 1 +
pop ecx  +
xor eax eax +
jmp loc_100E89A  +
push esi  +
cmp eax 30h +
jnz loc_100E857  +
push 0Bh  +
push offset a?Volume  +
push edi  +
call ds:_wcsnicmp  +
add esp 0Ch +
test eax eax +
jnz loc_100E857  +
mov esi [ebp+arg_4] +
push edi  +
push ebx  +
push esi  +
call wcscpy_s  +
add esp 0Ch +
push 2Eh  +
pop eax  +
mov [esi+4] ax +
jmp loc_100E87F  +
cmp word ptr [edi+2] 3Ah +
jnz loc_100E883  +
cmp word ptr [edi+4] 0 +
jnz loc_100E883  +
mov esi [ebp+arg_4] +
push offset a_  +
push ebx  +
push esi  +
call wcscpy_s  +
push edi  +
push ebx  +
push esi  +
call wcscat_s  +
add esp 18h +
mov eax esi +
jmp loc_100E899  +
push 400027EBh  +
call sub_100E4FD  +
mov eax [ebp+arg_C] +
mov dword ptr [eax] 1 +
pop ecx  +
xor eax eax +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
shr ecx 1 +
push 0  +
pop eax  +
mov edx 80070057h +
jz loc_100E8C1  +
cmp ecx 7FFFFFFFh +
jbe loc_100E8C3  +
mov eax edx +
test eax eax +
jl loc_100E8EF  +
mov eax [ebp+arg_C] +
shr eax 1 +
cmp eax 7FFFFFFEh +
jbe loc_100E8DF  +
mov eax edx +
mov edx [ebp+arg_0] +
xor ecx ecx +
mov [edx] cx +
jmp loc_100E8EF  +
push eax  +
push [ebp+arg_8]  +
mov eax ecx +
mov ecx [ebp+arg_0] +
push 0  +
call sub_100E38F  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_100E90E  +
cmp ecx 7FFFFFFFh +
jbe loc_100E913  +
mov eax 80070057h +
test eax eax +
jl loc_100E94F  +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_C]  +
mov edi [ebp+arg_0] +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_100E93F  +
cmp eax esi +
ja loc_100E93F  +
jnz loc_100E94A  +
jmp loc_100E944  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 10h  +
***
pop ecx  +
xor eax eax +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 94h +
mov eax dword_1011584 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov ecx [eax] +
or ecx [eax+4] +
push edi  +
mov edi [ebp+arg_4] +
jnz loc_100E9A0  +
push offset aUndefined  +
push [ebp+arg_8]  +
push edi  +
call sub_1007BA0  +
jmp loc_100EA13  +
push esi  +
lea ecx [ebp+Time] +
push ecx  +
push eax  +
call ds:FileTimeToSystemTime  +
push 20h  +
lea eax [ebp+DateStr] +
push eax  +
push 0  +
lea eax [ebp+Time] +
push eax  +
push 1  +
mov esi 400h +
push esi  +
call ds:GetDateFormatW  +
push 20h  +
lea eax [ebp+TimeStr] +
push eax  +
push 0  +
lea eax [ebp+Time] +
push eax  +
push 0Ch  +
push esi  +
call ds:GetTimeFormatW  +
lea eax [ebp+DateStr] +
push eax  +
push [ebp+arg_8]  +
push edi  +
call sub_1007BA0  +
push offset asc_10019EC  +
push [ebp+arg_8]  +
push edi  +
call sub_1007BDB  +
lea eax [ebp+TimeStr] +
push eax  +
push [ebp+arg_8]  +
push edi  +
call sub_1007BDB  +
pop esi  +
mov ecx [ebp+var_4] +
mov eax edi +
xor ecx ebp +
pop edi  +
call sub_100F411  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+pv] +
push eax  +
push [ebp+pv]  +
call ds:StringFromIID  +
test eax eax +
jz loc_100EA51  +
push offset aInvalidGuid  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1007BA0  +
jmp loc_100EA6E  +
mov eax [ebp+pv] +
push 48h  +
add eax 2 +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_100E8A5  +
push [ebp+pv]  +
call ds:CoTaskMemFree  +
mov eax [ebp+arg_4] +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call sub_100E8F8  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
cmp [ebp+arg_C] 0 +
jz loc_100EACF  +
push [ebp+arg_0]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call wcscpy_s  +
push offset a@GmtYyyyMmDdHh  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call wcscat_s  +
add esp 18h +
xor eax eax +
leave   +
retn 10h  +
pause   +
mov eax ds:7FFE0018h +
mov ecx ds:7FFE0014h +
mov edx ds:7FFE001Ch +
cmp eax edx +
jnz loc_100EACD  +
push ebx  +
push esi  +
mov [ebp+var_4] eax +
push edi  +
lea eax [ebp+var_18] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
mov [ebp+var_8] ecx +
call ds:RtlTimeToTimeFields  +
push [ebp+arg_0]  +
mov esi [ebp+arg_8] +
mov edi [ebp+arg_4] +
push esi  +
push edi  +
call wcscpy_s  +
mov eax [ebp+arg_0] +
add esp 0Ch +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_100EB14  +
sub eax ecx +
sar eax 1 +
mov ebx eax +
mov eax [ebp+arg_0] +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_100EB2A  +
sub eax ecx +
movsx ecx [ebp+var_E] +
push ecx  +
movsx ecx [ebp+var_10] +
push ecx  +
movsx ecx [ebp+var_12] +
push ecx  +
movsx ecx [ebp+var_14] +
push ecx  +
movsx ecx word ptr [ebp+var_18+2] +
push ecx  +
movsx ecx word ptr [ebp+var_18] +
push ecx  +
sub esi ebx +
sar eax 1 +
push esi  +
lea eax [edi+eax*2] +
push offset a@Gmt04d02d02d0  +
push eax  +
call sub_100EA7A  +
add esp 24h +
pop edi  +
pop esi  +
pop ebx  +
jmp locret_100EAC9  +
***
cmp dword ptr [ebp-23Ch] 0FFFFFFFFh +
jz locret_100EC6A  +
push dword ptr [ebp-23Ch]  +
call ds:CloseHandle  +
retn   +
***
call __SEH_prolog4_GS  +
push 40002855h  +
call sub_100E4FD  +
pop ecx  +
cmp [ebp+8] esi +
jnz loc_100EFA4  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_100F07A  +
mov eax [ebp-24Ch] +
call __SEH_epilog4_GS  +
retn 8  +
***
push 5AAh  +
jmp loc_100EF99  +
lea esi [esi+edi*8] +
lea eax [ebp-270h] +
push eax  +
mov eax [ebp-264h] +
push dword ptr [eax+edi*4]  +
call sub_100E0D7  +
add esp 0Ch +
mov [esi] eax +
mov [esi+4] edx +
mov eax [ebp-270h] +
cmp word ptr [eax] 0 +
jnz loc_100EF04  +
mov eax [esi] +
and eax edx +
cmp eax 0FFFFFFFFh +
jnz loc_100EEF5  +
call ds:_errno  +
cmp dword ptr [eax] 22h +
jz loc_100EF04  +
inc edi  +
mov [ebp-26Ch] edi +
mov esi [ebp-250h] +
jmp loc_100EEAC  +
***
push 40002855h  +
call sub_100E4FD  +
pop ecx  +
jmp loc_100EFA4  +
push dword ptr [ebp-25Ch]  +
call ds:SetLastError  +
call sub_100E5AC  +
mov dword ptr [ebp-24Ch] 1 +
jmp loc_100EDFF  +
***
add esi eax +
jmp loc_100EFC3  +
***
cmp dword ptr [ebp-258h] 0FFFFFFFFh +
jz loc_100F08F  +
push dword ptr [ebp-258h]  +
call ds:CloseHandle  +
cmp dword ptr [ebp-250h] 0 +
jz locret_100F0A5  +
push dword ptr [ebp-250h]  +
call ds:free  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_100F0EB  +
test eax eax +
jnz loc_100F0F0  +
mov ecx [esi] +
test ecx ecx +
jz loc_100F0E8  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_100F0DC  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_10115C8 +
push offset dword_10115B8  +
push dword_10115C4  +
mov dword_10115B8 eax +
push offset dword_10115A8  +
push offset dword_10115AC  +
push offset dword_10115A4  +
call ds:__wgetmainargs  +
add esp 14h +
mov dword_10115B4 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+ms_exc.disabled] ebx +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp+var_1C] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
cmp eax ebx +
jz loc_100F178  +
cmp eax esi +
jnz loc_100F16B  +
xor esi esi +
inc esi  +
mov [ebp+var_1C] esi +
jmp loc_100F17B  +
push 3E8h  +
call ds:Sleep  +
jmp loc_100F152  +
xor esi esi +
inc esi  +
mov eax dword_1011920 +
cmp eax esi +
jnz loc_100F18E  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_100F1C9  +
mov eax dword_1011920 +
test eax eax +
jnz loc_100F1C3  +
mov dword_1011920 esi +
push offset dword_10012BC  +
push offset dword_10012B0  +
call sub_100F0CF  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100F1C9  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
jmp loc_100F293  +
mov dword_10115C0 esi +
mov eax dword_1011920 +
cmp eax esi +
jnz loc_100F1ED  +
push offset dword_10012AC  +
push offset dword_10012A4  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_1011920 2 +
cmp [ebp+var_1C] ebx +
jnz loc_100F1FA  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_1011928 ebx +
jz loc_100F21B  +
push offset dword_1011928  +
call sub_100F749  +
pop ecx  +
test eax eax +
jz loc_100F21B  +
push ebx  +
push 2  +
push ebx  +
call dword_1011928  +
push dword_10115A8  +
push dword_10115AC  +
push dword_10115A4  +
call sub_10055D5  +
add esp 0Ch +
mov dword_10115BC eax +
cmp dword_10115B0 ebx +
jnz loc_100F279  +
push eax  +
call ds:exit  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-20h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-20h] +
mov dword_10115BC eax +
xor ebx ebx +
cmp dword_10115B0 ebx +
jnz loc_100F279  +
push eax  +
call ds:_exit  +
cmp dword_10115C0 ebx +
jnz loc_100F287  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_10115BC +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_100F2B0  +
xor eax eax +
jmp loc_100F2FD  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_100F2AC  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_100F2EA  +
cmp ecx 20Bh +
jnz loc_100F2AC  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_100F2AC  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_100F2F8  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_100F2AC  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 1  +
mov dword_10115B0 eax +
call sub_100F857  +
push eax  +
call ds:__set_app_type  +
or dword_1011918 0FFFFFFFFh +
or dword_101191C 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_10115D0 +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_10115CC +
mov [eax] ecx +
call sub_100F7E9  +
cmp dword_1011598 0 +
jnz loc_100F356  +
push offset sub_100F7E9  +
call ds:__setusermatherr  +
pop ecx  +
call sub_100F7D1  +
xor eax eax +
retn   +
***
call sub_100F896  +
jmp sub_100F130  +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-1Ch] +
xor ecx ebp +
call sub_100F411  +
jmp __SEH_epilog4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_100F411  +
push offset dword_1011584  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
cmp ecx dword_1011584 +
jnz loc_100F41C  +
retn 0  +
jmp loc_100F937  +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov eax [esp+arg_C] +
or eax eax +
jnz loc_100F4E2  +
mov ecx [esp+arg_8] +
mov eax [esp+arg_4] +
xor edx edx +
div  ecx +
mov ebx eax +
mov eax [esp+arg_0] +
div  ecx +
mov edx ebx +
jmp loc_100F523  +
mov ecx eax +
mov ebx [esp+arg_8] +
mov edx [esp+arg_4] +
mov eax [esp+arg_0] +
shr ecx 1 +
rcr ebx 1 +
shr edx 1 +
rcr eax 1 +
or ecx ecx +
jnz loc_100F4F0  +
div  ebx +
mov esi eax +
mul  [esp+arg_C] +
mov ecx eax +
mov eax [esp+arg_8] +
mul  esi +
add edx ecx +
jb loc_100F51E  +
cmp edx [esp+arg_4] +
ja loc_100F51E  +
jb loc_100F51F  +
cmp eax [esp+arg_0] +
jbe loc_100F51F  +
dec esi  +
xor edx edx +
mov eax esi +
pop esi  +
pop ebx  +
retn 10h  +
***
mov eax [esp+arg_4] +
mov ecx [esp+arg_C] +
or ecx eax +
mov ecx [esp+arg_8] +
jnz loc_100F549  +
mov eax [esp+arg_0] +
mul  ecx +
retn 10h  +
push ebx  +
mul  ecx +
mov ebx eax +
mov eax [esp+4+arg_0] +
mul  [esp+4+arg_C] +
add ebx eax +
mov eax [esp+4+arg_0] +
mul  ecx +
add edx ebx +
pop ebx  +
retn 10h  +
***
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb cs20  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp+0] eax +
retn   +
sub eax 1000h +
test [eax] eax +
jmp cs10  +
***
or eax eax +
jnz loc_100F5E1  +
mov ecx [esp+arg_8] +
mov eax [esp+arg_4] +
xor edx edx +
div  ecx +
mov ebx eax +
mov eax [esp+arg_0] +
div  ecx +
mov esi eax +
mov eax ebx +
mul  [esp+arg_8] +
mov ecx eax +
mov eax esi +
mul  [esp+arg_8] +
add edx ecx +
jmp loc_100F628  +
mov ecx eax +
mov ebx [esp+arg_8] +
mov edx [esp+arg_4] +
mov eax [esp+arg_0] +
shr ecx 1 +
rcr ebx 1 +
shr edx 1 +
rcr eax 1 +
or ecx ecx +
jnz loc_100F5EF  +
div  ebx +
mov esi eax +
mul  [esp+arg_C] +
mov ecx eax +
mov eax [esp+arg_8] +
mul  esi +
add edx ecx +
jb loc_100F61D  +
cmp edx [esp+arg_4] +
ja loc_100F61D  +
jb loc_100F626  +
cmp eax [esp+arg_0] +
jbe loc_100F626  +
dec esi  +
sub eax [esp+arg_8] +
sbb edx [esp+arg_C] +
xor ebx ebx +
sub eax [esp+arg_0] +
sbb edx [esp+arg_4] +
neg edx  +
neg eax  +
sbb edx 0 +
mov ecx edx +
mov edx ebx +
mov ebx ecx +
mov ecx eax +
mov eax esi +
pop esi  +
retn 10h  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_100F687  +
cmp dword ptr [eax+10h] 3 +
jnz loc_100F687  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_100F681  +
cmp eax 19930521h +
jz loc_100F681  +
cmp eax 19930522h +
jz loc_100F681  +
cmp eax 1994000h +
jnz loc_100F687  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset dword_100F648+2)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_100F6D6  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_100F6D2  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_100F73D  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_100F735  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_100F73F  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_100F725  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_100F6C0  +
pop ecx  +
test eax eax +
jz loc_100F7A6  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_100F700  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100F7A6  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_100F7AF  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100F84A  +
cmp ecx 0FFFFFFFFh +
jz loc_100F84A  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_100F843  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_100F843  +
cmp edx 10000000h +
jnb loc_100F843  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_100F843  +
jmp loc_100F83E  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_100F88C  +
push eax  +
call sub_100F7F1  +
test eax eax +
jz loc_100F88C  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_100F881  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_100F88C  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1011584 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_100F8C8  +
test eax ebx +
jz loc_100F8C8  +
not eax  +
mov dword_1011588 eax +
jmp loc_100F923  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_100F90F  +
test dword_1011584 ebx +
jnz loc_100F914  +
mov esi 0BB40E64Fh +
mov dword_1011584 esi +
not esi  +
mov dword_1011588 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_10116D8 eax +
mov dword_10116D4 ecx +
mov dword_10116D0 edx +
mov dword_10116CC ebx +
mov dword_10116C8 esi +
mov dword_10116C4 edi +
mov word_10116F0 ss +
mov word_10116E4 cs +
mov word_10116C0 ds +
mov word_10116BC es +
mov word_10116B8 fs +
mov word_10116B4 gs +
pushf   +
pop dword_10116E8  +
mov eax [ebp+0] +
mov dword_10116DC eax +
mov eax [ebp+4] +
mov dword_10116E0 eax +
lea eax [ebp+8] +
mov dword_10116EC eax +
mov eax [ebp-320h] +
mov dword_1011628 10001h +
mov eax dword_10116E0 +
mov dword_10115E4 eax +
mov dword_10115D8 0C0000409h +
mov dword_10115DC 1 +
mov eax dword_1011584 +
mov [ebp-328h] eax +
mov eax dword_1011588 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
