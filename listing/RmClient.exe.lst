mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 18h +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 20h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 2  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 20h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_10] +
test esi esi +
jz loc_1001351  +
mov eax esi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1001345  +
sub eax edx +
inc eax  +
jmp loc_1001354  +
push 5  +
pop eax  +
mov ecx esi +
test esi esi +
jnz loc_100135F  +
mov ecx offset aNull +
push 0  +
push eax  +
push ecx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 20h +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_10] +
test esi esi +
jz loc_10013A1  +
mov eax esi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1001395  +
sub eax edx +
inc eax  +
jmp loc_10013A4  +
push 5  +
pop eax  +
mov ecx esi +
test esi esi +
jnz loc_10013AF  +
mov ecx offset aNull +
push 0  +
push 4  +
lea edx [ebp+arg_14] +
push edx  +
push eax  +
push ecx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 28h +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_14] +
push ebx  +
push esi  +
push edi  +
test edx edx +
jz loc_100140B  +
cmp word ptr [edx] 0 +
jnz loc_10013F2  +
push 0Eh  +
jmp loc_100140D  +
mov eax edx +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10013F7  +
sub eax esi +
sar eax 1 +
lea ebx [eax+eax+2] +
jmp loc_100140E  +
push 0Ah  +
pop ebx  +
test edx edx +
jz loc_100141F  +
cmp word ptr [edx] 0 +
jnz loc_1001424  +
mov edx offset aNull_0 +
jmp loc_1001424  +
mov edx offset aNull_1 +
mov edi [ebp+arg_10] +
test edi edi +
jz loc_100143C  +
mov eax edi +
lea esi [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1001430  +
sub eax esi +
inc eax  +
jmp loc_100143F  +
push 5  +
pop eax  +
mov ecx edi +
test edi edi +
jnz loc_100144A  +
mov ecx offset aNull +
push 0  +
push ebx  +
push edx  +
push eax  +
push ecx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 28h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov edx [ebp+arg_18] +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
cmp edx ebx +
jz loc_10014AE  +
cmp [edx] bx +
jnz loc_1001492  +
mov [ebp+arg_18] 0Eh +
jmp loc_10014B5  +
mov eax edx +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_1001497  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
mov [ebp+arg_18] eax +
jmp loc_10014B5  +
mov [ebp+arg_18] 0Ah +
cmp edx ebx +
jz loc_10014CC  +
cmp [edx] bx +
jnz loc_10014C7  +
mov [ebp+var_4] offset aNull_0 +
jmp loc_10014D3  +
mov [ebp+var_4] edx +
jmp loc_10014D3  +
mov [ebp+var_4] offset aNull_1 +
mov edi [ebp+arg_14] +
cmp edi ebx +
jz loc_10014FC  +
cmp [edi] bx +
jnz loc_10014E3  +
push 0Eh  +
jmp loc_10014FE  +
mov eax edi +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_10014E8  +
sub eax esi +
sar eax 1 +
lea ebx [eax+eax+2] +
jmp loc_10014FF  +
push 0Ah  +
pop ebx  +
test edi edi +
jz loc_1001510  +
cmp word ptr [edi] 0 +
jnz loc_1001515  +
mov edi offset aNull_0 +
jmp loc_1001515  +
mov edi offset aNull_1 +
mov edx [ebp+arg_10] +
test edx edx +
jz loc_100152D  +
mov eax edx +
lea esi [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1001521  +
sub eax esi +
inc eax  +
jmp loc_1001530  +
push 5  +
pop eax  +
mov ecx edx +
test edx edx +
jnz loc_100153B  +
mov ecx offset aNull +
push 0  +
push 4  +
lea edx [ebp+arg_1C] +
push edx  +
push [ebp+arg_18]  +
push [ebp+var_4]  +
push ebx  +
push edi  +
push eax  +
push ecx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 38h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_10] +
test esi esi +
jz loc_100158D  +
mov eax esi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1001581  +
sub eax edx +
inc eax  +
jmp loc_1001590  +
push 5  +
pop eax  +
mov ecx esi +
test esi esi +
jnz loc_100159B  +
mov ecx offset aNull +
push 0  +
push 4  +
lea edx [ebp+arg_18] +
push edx  +
push 4  +
lea edx [ebp+arg_14] +
push edx  +
push eax  +
push ecx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 30h +
pop esi  +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_10] +
test esi esi +
jz loc_10015E9  +
mov eax esi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_10015DD  +
sub eax edx +
inc eax  +
jmp loc_10015EC  +
push 5  +
pop eax  +
mov ecx esi +
test esi esi +
jnz loc_10015F7  +
mov ecx offset aNull +
push 0  +
push 4  +
lea edx [ebp+arg_1C] +
push edx  +
push 4  +
lea edx [ebp+arg_18] +
push edx  +
push 4  +
lea edx [ebp+arg_14] +
push edx  +
push eax  +
push ecx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 38h +
pop esi  +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_18] +
push ebx  +
push esi  +
push edi  +
test edx edx +
jz loc_100165F  +
cmp word ptr [edx] 0 +
jnz loc_1001646  +
push 0Eh  +
jmp loc_1001661  +
mov eax edx +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100164B  +
sub eax esi +
sar eax 1 +
lea ebx [eax+eax+2] +
jmp loc_1001662  +
push 0Ah  +
pop ebx  +
test edx edx +
jz loc_1001673  +
cmp word ptr [edx] 0 +
jnz loc_1001678  +
mov edx offset aNull_0 +
jmp loc_1001678  +
mov edx offset aNull_1 +
mov edi [ebp+arg_10] +
test edi edi +
jz loc_1001690  +
mov eax edi +
lea esi [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1001684  +
sub eax esi +
inc eax  +
jmp loc_1001693  +
push 5  +
pop eax  +
mov ecx edi +
test edi edi +
jnz loc_100169E  +
mov ecx offset aNull +
push 0  +
push ebx  +
push edx  +
push 4  +
lea edx [ebp+arg_14] +
push edx  +
push eax  +
push ecx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 30h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor ecx ecx +
xor edx edx +
mov [eax+10h] ecx +
mov [eax] ecx +
mov byte ptr [eax+18h] 1 +
mov [eax+19h] cl +
mov [eax+1Ah] dx +
mov [eax+1Ch] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+10h] +
xor edx edx +
push ebx  +
mov [eax] edx +
mov eax [ebp+8] +
sub eax 4 +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
mov edi esi +
jz loc_1001723  +
dec eax  +
jz loc_100171A  +
push 57h  +
pop eax  +
jmp loc_1001791  +
xor ebx ebx +
xor eax eax +
mov [ebp+0Fh] al +
jmp loc_1001749  +
push dword ptr [ebp+14h]  +
call ds:GetTraceLoggerHandle  +
mov ebx eax +
push edx  +
push ebx  +
mov [ebp-4] edx +
call ds:GetTraceEnableLevel  +
push dword ptr [ebp-4]  +
mov [ebp+0Fh] al +
push ebx  +
call ds:GetTraceEnableFlags  +
mov edx [ebp-4] +
movzx ecx word ptr [esi+1Ah] +
test cl 1 +
jz loc_1001772  +
cmp dword ptr [esi+10h] 0 +
jz loc_1001772  +
mov ecx [esi+10h] +
mov [ecx] ebx +
mov [ecx+4] edx +
movzx ecx byte ptr [ebp+0Fh] +
mov edx [esi+10h] +
mov [edx+0Ch] ecx +
mov ecx [esi+10h] +
mov [ecx+8] eax +
jmp loc_100178F  +
test cl 2 +
jz loc_1001780  +
mov esi [esi+10h] +
test esi esi +
jz loc_1001780  +
mov edi esi +
mov cl [ebp+0Fh] +
mov [edi+10h] ebx +
mov [edi+14h] edx +
mov [edi+19h] cl +
mov [edi+1Ch] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi off_1004000 +
push edi  +
mov edi offset dword_1004038 +
jmp loc_10017DC  +
mov eax [edi] +
and [ebp+var_4] 0 +
lea ecx [esi+8] +
push ecx  +
push 0  +
push 0  +
lea ecx [ebp+var_8] +
push ecx  +
push 1  +
push eax  +
push esi  +
push offset loc_10016F4  +
add edi 4 +
mov [ebp+var_8] eax +
call ds:RegisterTraceGuidsW  +
mov esi [esi] +
test esi esi +
jnz loc_10017B3  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi off_1004000 +
push edi  +
mov edi offset off_1004000 +
cmp esi edi +
jz loc_1001828  +
jmp loc_100181E  +
mov eax [esi+8] +
mov ecx [esi+0Ch] +
mov edx eax +
or edx ecx +
jz loc_100181C  +
push ecx  +
push eax  +
call ds:UnregisterTraceGuids  +
and dword ptr [esi+8] 0 +
and dword ptr [esi+0Ch] 0 +
mov esi [esi] +
test esi esi +
jnz loc_1001800  +
mov off_1004000 edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ds:wprintf +
push edi  +
mov edi offset asc_10011A0 +
push edi  +
call esi  +
mov [esp+8+var_8] offset aRmclient_exePi +
call esi  +
push edi  +
call esi  +
push edi  +
call esi  +
add esp 0Ch +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push esi  +
push edi  +
xor esi esi +
xor eax eax +
mov [ebp+Overlapped.Internal] esi +
lea edi [ebp+Overlapped.InternalHigh] +
stos   +
stos   +
xor ecx ecx +
stos   +
inc ecx  +
mov [ebp+var_8] ecx +
mov [ebp+NumberOfBytesTransferred] esi +
stos   +
mov [ebp+var_4] esi +
cmp [ebp+nNumberOfBytesToRead] esi +
jbe loc_1001890  +
cmp [ebp+lpBuffer] esi +
jz loc_1001896  +
cmp [ebp+nNumberOfBytesToRead] 18h +
jb loc_1001896  +
cmp [ebp+hFile] 0FFFFFFFFh +
jnz loc_10018C6  +
mov eax off_1004000 +
cmp eax offset off_1004000 +
jz loc_10018BF  +
test byte ptr [eax+1Ch] 2 +
jz loc_10018BF  +
push offset aReceive  +
push offset dword_100113C  +
push 1Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001333  +
xor eax eax +
jmp loc_1001A7B  +
push esi  +
push ecx  +
push ecx  +
push esi  +
call ds:CreateEventW  +
mov edi eax +
mov [ebp+hObject] edi +
cmp edi esi +
jnz loc_1001910  +
mov eax off_1004000 +
cmp eax offset off_1004000 +
jz loc_10018BF  +
test byte ptr [eax+1Ch] 1 +
jz loc_10018BF  +
call ds:GetLastError  +
push eax  +
mov eax off_1004000 +
push offset aReceive  +
push offset dword_100113C  +
push 1Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001383  +
jmp loc_10018BF  +
push ebx  +
push edi  +
call ds:ResetEvent  +
lea eax [ebp+Overlapped] +
push eax  +
lea eax [ebp+NumberOfBytesTransferred] +
push eax  +
push [ebp+nNumberOfBytesToRead]  +
mov [ebp+Overlapped.hEvent] edi +
push [ebp+lpBuffer]  +
push [ebp+hFile]  +
call ds:ReadFile  +
mov ebx ds:GetLastError +
test eax eax +
jnz loc_100197E  +
call ebx  +
cmp eax 3E5h +
jz loc_100197E  +
mov eax off_1004000 +
cmp eax offset off_1004000 +
jz loc_1001976  +
test byte ptr [eax+1Ch] 1 +
jz loc_1001976  +
call ebx  +
push eax  +
mov eax off_1004000 +
push offset aReceive  +
push offset dword_100113C  +
push 1Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001383  +
mov [ebp+var_8] esi +
jmp loc_1001A6E  +
mov edi offset aReceive +
mov esi offset dword_100113C +
inc [ebp+var_4]  +
push 1  +
push 1388h  +
push [ebp+hObject]  +
call ds:WaitForSingleObjectEx  +
mov [ebp+nNumberOfBytesToRead] eax +
test eax eax +
jz loc_10019FA  +
mov eax off_1004000 +
cmp eax offset off_1004000 +
jz loc_10019D6  +
test byte ptr [eax+1Ch] 2 +
jz loc_10019D6  +
call ebx  +
push eax  +
push [ebp+nNumberOfBytesToRead]  +
mov eax off_1004000 +
push [ebp+var_4]  +
push edi  +
push esi  +
push 20h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015CB  +
mov eax off_1004000 +
cmp [ebp+var_4] 5 +
jb loc_1001988  +
cmp eax offset off_1004000 +
jz loc_1001A3A  +
test byte ptr [eax+1Ch] 1 +
jz loc_1001A3A  +
push edi  +
push esi  +
push 21h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001333  +
jmp loc_1001A3A  +
push 0  +
lea eax [ebp+NumberOfBytesTransferred] +
push eax  +
lea eax [ebp+Overlapped] +
push eax  +
push [ebp+hFile]  +
call ds:GetOverlappedResult  +
test eax eax +
jnz loc_1001A40  +
mov eax off_1004000 +
cmp eax offset off_1004000 +
jz loc_1001A3A  +
test byte ptr [eax+1Ch] 1 +
jz loc_1001A3A  +
call ebx  +
push eax  +
mov eax off_1004000 +
push edi  +
push esi  +
push 22h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001383  +
and [ebp+var_8] 0 +
jmp loc_1001A6E  +
mov eax [ebp+arg_C] +
mov ecx [ebp+NumberOfBytesTransferred] +
test eax eax +
jz loc_1001A4C  +
mov [eax] ecx +
mov eax off_1004000 +
cmp eax offset off_1004000 +
jz loc_1001A6E  +
test byte ptr [eax+1Ch] 2 +
jz loc_1001A6E  +
push ecx  +
push edi  +
push esi  +
push 23h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001383  +
push [ebp+hObject]  +
call ds:CloseHandle  +
mov eax [ebp+var_8] +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push esi  +
push edi  +
xor esi esi +
xor eax eax +
mov [ebp+Overlapped.Internal] esi +
lea edi [ebp+Overlapped.InternalHigh] +
stos   +
stos   +
xor ecx ecx +
stos   +
inc ecx  +
mov [ebp+var_8] ecx +
mov [ebp+NumberOfBytesTransferred] esi +
stos   +
mov [ebp+var_4] esi +
cmp [ebp+nNumberOfBytesToWrite] esi +
jbe loc_1001ABA  +
cmp [ebp+lpBuffer] esi +
jz loc_1001AC0  +
cmp [ebp+nNumberOfBytesToWrite] 18h +
jb loc_1001AC0  +
cmp [ebp+hFile] 0FFFFFFFFh +
jnz loc_1001AF0  +
mov eax off_1004000 +
cmp eax offset off_1004000 +
jz loc_1001AE9  +
test byte ptr [eax+1Ch] 2 +
jz loc_1001AE9  +
push offset aSend  +
push offset dword_100113C  +
push 24h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001333  +
xor eax eax +
jmp loc_1001CA5  +
push esi  +
push ecx  +
push ecx  +
push esi  +
call ds:CreateEventW  +
mov edi eax +
mov [ebp+hObject] edi +
cmp edi esi +
jnz loc_1001B3A  +
mov eax off_1004000 +
cmp eax offset off_1004000 +
jz loc_1001AE9  +
test byte ptr [eax+1Ch] 1 +
jz loc_1001AE9  +
call ds:GetLastError  +
push eax  +
mov eax off_1004000 +
push offset aSend  +
push offset dword_100113C  +
push 25h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001383  +
jmp loc_1001AE9  +
push ebx  +
push edi  +
call ds:ResetEvent  +
lea eax [ebp+Overlapped] +
push eax  +
lea eax [ebp+NumberOfBytesTransferred] +
push eax  +
push [ebp+nNumberOfBytesToWrite]  +
mov [ebp+Overlapped.hEvent] edi +
push [ebp+lpBuffer]  +
push [ebp+hFile]  +
call ds:WriteFile  +
mov ebx ds:GetLastError +
test eax eax +
jnz loc_1001BA8  +
call ebx  +
cmp eax 3E5h +
jz loc_1001BA8  +
mov eax off_1004000 +
cmp eax offset off_1004000 +
jz loc_1001BA0  +
test byte ptr [eax+1Ch] 1 +
jz loc_1001BA0  +
call ebx  +
push eax  +
mov eax off_1004000 +
push offset aSend  +
push offset dword_100113C  +
push 26h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001383  +
mov [ebp+var_8] esi +
jmp loc_1001C98  +
mov edi offset aSend +
mov esi offset dword_100113C +
inc [ebp+var_4]  +
push 1  +
push 1388h  +
push [ebp+hObject]  +
call ds:WaitForSingleObjectEx  +
mov [ebp+nNumberOfBytesToWrite] eax +
test eax eax +
jz loc_1001C24  +
mov eax off_1004000 +
cmp eax offset off_1004000 +
jz loc_1001C00  +
test byte ptr [eax+1Ch] 2 +
jz loc_1001C00  +
call ebx  +
push eax  +
push [ebp+nNumberOfBytesToWrite]  +
mov eax off_1004000 +
push [ebp+var_4]  +
push edi  +
push esi  +
push 27h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015CB  +
mov eax off_1004000 +
cmp [ebp+var_4] 5 +
jb loc_1001BB2  +
cmp eax offset off_1004000 +
jz loc_1001C64  +
test byte ptr [eax+1Ch] 1 +
jz loc_1001C64  +
push edi  +
push esi  +
push 28h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001333  +
jmp loc_1001C64  +
push 0  +
lea eax [ebp+NumberOfBytesTransferred] +
push eax  +
lea eax [ebp+Overlapped] +
push eax  +
push [ebp+hFile]  +
call ds:GetOverlappedResult  +
test eax eax +
jnz loc_1001C6A  +
mov eax off_1004000 +
cmp eax offset off_1004000 +
jz loc_1001C64  +
test byte ptr [eax+1Ch] 1 +
jz loc_1001C64  +
call ebx  +
push eax  +
mov eax off_1004000 +
push edi  +
push esi  +
push 29h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001383  +
and [ebp+var_8] 0 +
jmp loc_1001C98  +
mov eax [ebp+arg_C] +
mov ecx [ebp+NumberOfBytesTransferred] +
test eax eax +
jz loc_1001C76  +
mov [eax] ecx +
mov eax off_1004000 +
cmp eax offset off_1004000 +
jz loc_1001C98  +
test byte ptr [eax+1Ch] 2 +
jz loc_1001C98  +
push ecx  +
push edi  +
push esi  +
push 2Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001383  +
push [ebp+hObject]  +
call ds:CloseHandle  +
mov eax [ebp+var_8] +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov ecx [ebp+lpFileName] +
push ebx  +
xor eax eax +
push esi  +
push edi  +
mov [ebp+var_4] eax +
cmp ecx eax +
jz loc_1001DFA  +
cmp [ecx] ax +
jz loc_1001DFA  +
cmp [ebp+hNamedPipe] eax +
jz loc_1001DFA  +
mov eax off_1004000 +
mov edi offset aOpenpipe +
mov esi offset dword_100113C +
cmp eax offset off_1004000 +
jz loc_1001D09  +
test byte ptr [eax+1Ch] 2 +
jz loc_1001D09  +
push ecx  +
push edi  +
push esi  +
push 2Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10013D9  +
mov ebx ds:GetLastError +
inc [ebp+var_4]  +
xor eax eax +
push eax  +
push 40000000h  +
push 3  +
push eax  +
push eax  +
push 0C0000000h  +
push [ebp+lpFileName]  +
call ds:CreateFileW  +
mov [ebp+var_8] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1001DA5  +
mov eax off_1004000 +
cmp eax offset off_1004000 +
jz loc_1001D60  +
test byte ptr [eax+1Ch] 2 +
jz loc_1001D60  +
call ebx  +
push eax  +
push [ebp+var_4]  +
mov eax off_1004000 +
push edi  +
push esi  +
push 2Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100156F  +
push 1F4h  +
call ds:Sleep  +
cmp [ebp+var_4] 5 +
jb loc_1001D0F  +
mov eax off_1004000 +
cmp eax offset off_1004000 +
jz loc_1001D95  +
test byte ptr [eax+1Ch] 1 +
jz loc_1001D95  +
push [ebp+var_4]  +
push edi  +
push esi  +
push 2Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001383  +
push 0FFFFFFFFh  +
call ds:CloseHandle  +
mov eax [ebp+hNamedPipe] +
or dword ptr [eax] 0FFFFFFFFh +
jmp loc_1001E23  +
push 0  +
push 0  +
lea ecx [ebp+Mode] +
push ecx  +
push eax  +
mov [ebp+Mode] 2 +
call ds:SetNamedPipeHandleState  +
test eax eax +
jnz loc_1001DED  +
mov eax off_1004000 +
cmp eax offset off_1004000 +
jz loc_1001DE8  +
test byte ptr [eax+1Ch] 2 +
jz loc_1001DE8  +
call ebx  +
push eax  +
mov eax off_1004000 +
push edi  +
push esi  +
push 2Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001383  +
push [ebp+var_8]  +
jmp loc_1001D97  +
mov eax [ebp+var_8] +
mov ecx [ebp+hNamedPipe] +
mov [ecx] eax +
xor eax eax +
inc eax  +
jmp loc_1001E25  +
mov eax off_1004000 +
cmp eax offset off_1004000 +
jz loc_1001E23  +
test byte ptr [eax+1Ch] 2 +
jz loc_1001E23  +
push offset aOpenpipe  +
push offset dword_100113C  +
push 2Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001333  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 64h +
mov eax [ebp+arg_C] +
push ebx  +
xor ebx ebx +
mov [ebp+var_4] ebx +
mov [ebp+ProcessAttributes.nLength] 0Ch +
mov [ebp+ProcessAttributes.lpSecurityDescriptor] eax +
mov [ebp+ProcessAttributes.bInheritHandle] ebx +
cmp [ebp+arg_4] ebx +
jz loc_1001F9B  +
cmp [ebp+lpCommandLine] ebx +
jz loc_1001F9B  +
cmp [ebp+arg_14] ebx +
jz loc_1001F9B  +
cmp [ebp+hToken] ebx +
jz loc_1001F9B  +
cmp [ebp+hToken] 0FFFFFFFFh +
jz loc_1001F9B  +
push esi  +
push edi  +
push 44h  +
pop esi  +
push esi  +
lea eax [ebp+StartupInfo] +
push ebx  +
push eax  +
call memset  +
xor eax eax +
lea edi [ebp+hObject] +
stos   +
stos   +
stos   +
add esp 0Ch +
stos   +
mov [ebp+StartupInfo.cb] esi +
mov [ebp+StartupInfo.lpDesktop] offset dword_10011D0 +
mov edi offset aSpawnprocess +
mov esi offset dword_100113C +
cmp CurrentDirectory bx +
jnz loc_1001EF7  +
push 104h  +
push offset CurrentDirectory  +
call ds:GetSystemWindowsDirectoryW  +
test eax eax +
jnz loc_1001EF7  +
mov eax off_1004000 +
cmp eax offset off_1004000 +
jz loc_1001F1B  +
test byte ptr [eax+1Ch] 1 +
jz loc_1001EFC  +
call ds:GetLastError  +
push eax  +
mov eax off_1004000 +
push edi  +
push esi  +
push 31h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001383  +
mov eax off_1004000 +
cmp eax offset off_1004000 +
jz loc_1001F1B  +
test byte ptr [eax+1Ch] 2 +
jz loc_1001F1B  +
push [ebp+lpCommandLine]  +
push edi  +
push esi  +
push 32h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10013D9  +
lea eax [ebp+hObject] +
push eax  +
lea eax [ebp+StartupInfo] +
push eax  +
push offset CurrentDirectory  +
push ebx  +
push [ebp+dwCreationFlags]  +
lea eax [ebp+ProcessAttributes] +
push ebx  +
push ebx  +
push eax  +
push [ebp+lpCommandLine]  +
push ebx  +
push [ebp+hToken]  +
call ds:CreateProcessAsUserW  +
test eax eax +
jnz loc_1001F7C  +
call ds:GetLastError  +
mov [ebp+lpCommandLine] eax +
cmp eax ebx +
jz loc_1001F7C  +
mov eax off_1004000 +
cmp eax offset off_1004000 +
jz loc_1001F74  +
test byte ptr [eax+1Ch] 1 +
jz loc_1001F74  +
push [ebp+lpCommandLine]  +
push edi  +
push esi  +
push 33h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001383  +
mov eax [ebp+lpCommandLine] +
mov [ebp+var_4] eax +
jmp loc_1001F94  +
mov eax [ebp-18h] +
mov ecx [ebp+arg_14] +
push dword ptr [ebp-1Ch]  +
mov esi ds:CloseHandle +
mov [ecx] eax +
call esi  +
push [ebp+hObject]  +
call esi  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
jmp loc_1001FCF  +
mov eax off_1004000 +
cmp eax offset off_1004000 +
jz loc_1001FCA  +
test byte ptr [eax+1Ch] 1 +
jz loc_1001FCA  +
push [ebp+lpCommandLine]  +
push [ebp+arg_4]  +
push offset aSpawnprocess  +
push offset dword_100113C  +
push 30h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100162D  +
mov eax 0A0h +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 424h +
mov eax dword_1004004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
push 3FFh  +
mov [ebp+hFile] eax +
xor esi esi +
lea eax [ebp+Buffer+1] +
push esi  +
push eax  +
mov byte ptr [ebp+Buffer] 0 +
call memset  +
add esp 0Ch +
mov [ebp+var_408] esi +
mov [ebp+var_420] 1 +
mov [ebp+var_40C] esi +
mov edi offset dword_100113C +
inc [ebp+var_408]  +
lea eax [ebp+var_410] +
push eax  +
push 18h  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+hFile]  +
call sub_100185C  +
test eax eax +
jz loc_1002346  +
mov eax [ebp+Buffer] +
or [ebp+var_41C] 0FFFFFFFFh +
xor ecx ecx +
sub eax ecx +
mov [ebp+var_408] ecx +
mov [ebp+var_420] ecx +
jz loc_100231A  +
dec eax  +
dec eax  +
jz loc_10020F9  +
dec eax  +
jz loc_10020C7  +
sub eax 0Dh +
jz loc_10023B8  +
mov eax off_1004000 +
cmp eax offset off_1004000 +
jz loc_100233A  +
test byte ptr [eax+1Ch] 2 +
jz loc_100233A  +
push [ebp+Buffer]  +
push offset aMsgloop  +
push edi  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001383  +
jmp loc_100233A  +
mov eax off_1004000 +
cmp eax offset off_1004000 +
jz loc_100233A  +
test byte ptr [eax+1Ch] 2 +
jz loc_100233A  +
push offset aMsgloop  +
push edi  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001333  +
jmp loc_100233A  +
mov eax off_1004000 +
cmp eax offset off_1004000 +
jz loc_1002119  +
test byte ptr [eax+1Ch] 2 +
jz loc_1002119  +
push edi  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10012B5  +
mov eax [ebp+var_3FC] +
mov ebx ds:RtlAllocateHeap +
mov [ebp+hToken] eax +
mov eax large fs:18h +
push [ebp+nNumberOfBytesToRead]  +
mov eax [eax+30h] +
push 8  +
push dword ptr [eax+18h]  +
call ebx  +
mov esi eax +
test esi esi +
jnz loc_100214F  +
push 0Eh  +
pop ebx  +
jmp loc_100227A  +
mov eax [ebp+nNumberOfBytesToRead] +
lea ecx [ebp+var_410] +
push ecx  +
push eax  +
push esi  +
push [ebp+hFile]  +
mov [ebp+var_410] eax +
call sub_100185C  +
test eax eax +
jnz loc_100218F  +
mov eax off_1004000 +
cmp eax offset off_1004000 +
jz loc_10021E3  +
test byte ptr [eax+1Ch] 2 +
jz loc_10021E3  +
push offset aMsgloop  +
push edi  +
push 13h  +
jmp loc_10021D8  +
mov eax [ebp+var_410] +
cmp eax [ebp+nNumberOfBytesToRead] +
jz loc_10021B9  +
mov eax off_1004000 +
cmp eax offset off_1004000 +
jz loc_10021E3  +
test byte ptr [eax+1Ch] 2 +
jz loc_10021E3  +
push offset aMsgloop  +
push edi  +
push 14h  +
jmp loc_10021D8  +
cmp dword ptr [esi] 3 +
jz loc_10021E7  +
mov eax off_1004000 +
cmp eax offset off_1004000 +
jz loc_10021E3  +
test byte ptr [eax+1Ch] 2 +
jz loc_10021E3  +
push offset aMsgloop  +
push edi  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001333  +
push 0Dh  +
jmp loc_1002206  +
mov eax large fs:18h +
push dword ptr [esi+10h]  +
mov eax [eax+30h] +
push 8  +
push dword ptr [eax+18h]  +
call ebx  +
mov [ebp+var_408] eax +
test eax eax +
jnz loc_1002209  +
push 0Eh  +
pop ebx  +
jmp loc_1002244  +
push dword ptr [esi+10h]  +
mov ecx [esi+14h] +
add ecx esi +
push ecx  +
push eax  +
call memcpy  +
add esp 0Ch +
lea eax [ebp+var_41C] +
push eax  +
push [ebp+dwCreationFlags]  +
mov eax [esi+0Ch] +
push [ebp+var_408]  +
add eax esi +
push [ebp+hToken]  +
push dword ptr [esi+8]  +
push eax  +
call sub_1001E31  +
mov ebx eax +
mov eax large fs:18h +
mov eax [eax+30h] +
push esi  +
mov esi ds:RtlFreeHeap +
push 0  +
push dword ptr [eax+18h]  +
call esi  +
cmp [ebp+var_408] 0 +
jz loc_100227A  +
push [ebp+var_408]  +
mov eax large fs:18h +
mov eax [eax+30h] +
push 0  +
push dword ptr [eax+18h]  +
call esi  +
push [ebp+hToken]  +
call ds:CloseHandle  +
push 400h  +
lea eax [ebp+Buffer] +
push 0  +
push eax  +
call memset  +
mov eax [ebp+var_41C] +
add esp 0Ch +
mov [ebp+Buffer] 1 +
mov [ebp+var_3FC] eax +
mov [ebp+var_3F8] ebx +
test ebx ebx +
jz loc_10022CA  +
movzx eax bx +
or eax 0CFFE0000h +
mov [ebp+var_40C] eax +
lea eax [ebp+var_424] +
push eax  +
push 18h  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+hFile]  +
call sub_1001A86  +
test eax eax +
jnz loc_100233A  +
mov eax off_1004000 +
cmp eax offset off_1004000 +
jz loc_100230E  +
test byte ptr [eax+1Ch] 1 +
jz loc_100230E  +
push offset aMsgloop  +
push edi  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001333  +
mov [ebp+var_40C] 0CFFC0002h +
jmp loc_100233A  +
mov eax off_1004000 +
cmp eax offset off_1004000 +
jz loc_100233A  +
test byte ptr [eax+1Ch] 2 +
jz loc_100233A  +
push edi  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10012B5  +
and [ebp+var_408] 0 +
jmp loc_1002033  +
mov eax off_1004000 +
mov ebx offset off_1004000 +
cmp eax ebx +
jz loc_100237D  +
test byte ptr [eax+1Ch] 2 +
jz loc_100237D  +
push 5  +
push [ebp+var_408]  +
mov esi offset aMsgloop +
push esi  +
push edi  +
push 1Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100156F  +
mov eax off_1004000 +
jmp loc_1002382  +
mov esi offset aMsgloop +
cmp [ebp+var_408] 5 +
jb loc_1002033  +
cmp [ebp+var_420] 0 +
jz loc_10023DF  +
cmp eax ebx +
jz loc_10023B1  +
test byte ptr [eax+1Ch] 1 +
jz loc_10023B1  +
push esi  +
push edi  +
push 1Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001333  +
mov eax 0CFFC0003h +
jmp loc_1002404  +
mov eax off_1004000 +
cmp eax offset off_1004000 +
jz loc_10023FE  +
test byte ptr [eax+1Ch] 2 +
jz loc_10023FE  +
push offset aMsgloop  +
push edi  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001333  +
jmp loc_10023FE  +
cmp eax ebx +
jz loc_10023FE  +
test byte ptr [eax+1Ch] 1 +
jz loc_10023FE  +
push [ebp+var_408]  +
push esi  +
push edi  +
push 1Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001383  +
mov eax [ebp+var_40C] +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10029D5  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 630h +
mov eax dword_1004004 +
xor eax ebp +
mov [ebp+var_4] eax +
or [ebp+hNamedPipe] 0FFFFFFFFh +
push ebx  +
xor ebx ebx +
or [ebp+TokenHandle] 0FFFFFFFFh +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov [ebp+peUse] ebx +
mov [ebp+lpFileName] ebx +
mov esi offset unk_1004018 +
push esi  +
call sub_10016CC  +
push offset aMicrosoftWindo  +
mov dword_1004038 offset dword_100112C +
mov off_1004000 esi +
call sub_100179D  +
push ebx  +
push ebx  +
push 1  +
push ebx  +
call ds:HeapSetInformation  +
inc ebx  +
cmp [ebp+arg_0] 1 +
jle loc_10026FD  +
mov eax off_1004000 +
mov esi offset off_1004000 +
mov ecx [edi+ebx*4] +
movzx edx word ptr [ecx] +
cmp dx 2Dh +
jz loc_10024B6  +
cmp dx 2Fh +
jz loc_10024B6  +
cmp dx 5Ch +
jnz loc_10024F3  +
mov [ebp+lpFileName] ecx +
jmp loc_10024F3  +
movzx edx word ptr [ecx+2] +
movzx ecx dx +
cmp ecx 3Fh +
jz loc_10024E9  +
cmp ecx 68h +
jz loc_10024E9  +
cmp eax esi +
jz loc_10024E9  +
test byte ptr [eax+1Ch] 1 +
jz loc_10024E9  +
push edx  +
push offset dword_100113C  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001307  +
mov eax off_1004000 +
mov [ebp+peUse] 1 +
inc ebx  +
cmp ebx [ebp+arg_0] +
jl loc_1002496  +
xor ebx ebx +
cmp [ebp+peUse] ebx +
jnz loc_10026FD  +
cmp [ebp+lpFileName] ebx +
jz loc_10026FD  +
lea eax [ebp+TokenHandle] +
push eax  +
push 8  +
pop edi  +
push edi  +
call ds:GetCurrentProcess  +
push eax  +
call ds:OpenProcessToken  +
test eax eax +
jnz loc_100255E  +
mov eax off_1004000 +
cmp eax esi +
jz loc_1002672  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002672  +
call ds:GetLastError  +
push eax  +
push offset aWmain  +
push offset dword_100113C  +
push 0Bh  +
jmp loc_1002662  +
lea ecx [ebp+ReturnLength] +
push ecx  +
mov eax 200h +
push eax  +
mov [ebp+ReturnLength] eax +
lea eax [ebp+Sid] +
push eax  +
push 1  +
push [ebp+TokenHandle]  +
call ds:GetTokenInformation  +
test eax eax +
jnz loc_10025B9  +
mov eax off_1004000 +
cmp eax esi +
jz loc_1002672  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002672  +
call ds:GetLastError  +
push eax  +
push offset aWmain  +
push offset dword_100113C  +
push 0Ch  +
jmp loc_1002662  +
mov eax 104h +
mov [ebp+cbName] eax +
mov [ebp+cbReferencedDomainName] eax +
lea eax [ebp+peUse] +
push eax  +
lea eax [ebp+cbReferencedDomainName] +
push eax  +
lea eax [ebp+ReferencedDomainName] +
push eax  +
lea eax [ebp+cbName] +
push eax  +
lea eax [ebp+Name] +
push eax  +
push [ebp+Sid]  +
mov [ebp+peUse] edi +
push ebx  +
call ds:LookupAccountSidW  +
test eax eax +
jz loc_1002640  +
mov eax off_1004000 +
cmp eax esi +
jz loc_1002672  +
test byte ptr [eax+1Ch] 2 +
jz loc_1002672  +
push [ebp+peUse]  +
lea ecx [ebp+Name] +
push ecx  +
lea ecx [ebp+ReferencedDomainName] +
push ecx  +
push offset aWmain  +
push offset dword_100113C  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001472  +
jmp loc_1002672  +
mov eax off_1004000 +
cmp eax esi +
jz loc_1002672  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002672  +
call ds:GetLastError  +
push eax  +
push offset aWmain  +
push offset dword_100113C  +
push 0Eh  +
mov eax off_1004000 +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001383  +
lea eax [ebp+hNamedPipe] +
push eax  +
push [ebp+lpFileName]  +
call sub_1001CB0  +
test eax eax +
jnz loc_10026B0  +
mov eax off_1004000 +
cmp eax esi +
jz loc_10026A9  +
test byte ptr [eax+1Ch] 1 +
jz loc_10026A9  +
push offset dword_100113C  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10012B5  +
mov edi 0CFFC0001h +
jmp loc_10026DF  +
push [ebp+hNamedPipe]  +
call sub_1001FD9  +
mov edi eax +
mov eax off_1004000 +
cmp eax esi +
jz loc_10026DF  +
test byte ptr [eax+1Ch] 2 +
jz loc_10026DF  +
push edi  +
push offset dword_100113C  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10012DB  +
cmp [ebp+hNamedPipe] 0FFFFFFFFh +
jz loc_10026F4  +
push [ebp+hNamedPipe]  +
call ds:CloseHandle  +
call sub_10017EB  +
mov eax edi +
jmp loc_1002707  +
call sub_1001830  +
mov eax 0CFFC0004h +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10029D5  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_1002743  +
test eax eax +
jnz loc_1002748  +
mov ecx [esi] +
test ecx ecx +
jz loc_1002740  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_1002734  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_100426C +
push offset dword_100425C  +
push dword_1004268  +
mov dword_100425C eax +
push offset dword_100424C  +
push offset dword_1004250  +
push offset dword_1004248  +
call ds:__wgetmainargs  +
add esp 14h +
mov dword_1004258 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+ms_exc.disabled] ebx +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp+var_1C] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
cmp eax ebx +
jz loc_10027D0  +
cmp eax esi +
jnz loc_10027C3  +
xor esi esi +
inc esi  +
mov [ebp+var_1C] esi +
jmp loc_10027D3  +
push 3E8h  +
call ds:Sleep  +
jmp loc_10027AA  +
xor esi esi +
inc esi  +
mov eax dword_100459C +
cmp eax esi +
jnz loc_10027E6  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_1002821  +
mov eax dword_100459C +
test eax eax +
jnz loc_100281B  +
mov dword_100459C esi +
push offset dword_1001100  +
push offset dword_10010F4  +
call sub_1002727  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1002821  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
jmp loc_10028EB  +
mov dword_1004264 esi +
mov eax dword_100459C +
cmp eax esi +
jnz loc_1002845  +
push offset dword_10010F0  +
push offset dword_10010E8  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_100459C 2 +
cmp [ebp+var_1C] ebx +
jnz loc_1002852  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_10045A4 ebx +
jz loc_1002873  +
push offset dword_10045A4  +
call sub_1002AE9  +
pop ecx  +
test eax eax +
jz loc_1002873  +
push ebx  +
push 2  +
push ebx  +
call dword_10045A4  +
push dword_100424C  +
push dword_1004250  +
push dword_1004248  +
call sub_100241A  +
add esp 0Ch +
mov dword_1004260 eax +
cmp dword_1004254 ebx +
jnz loc_10028D1  +
push eax  +
call ds:exit  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-20h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-20h] +
mov dword_1004260 eax +
xor ebx ebx +
cmp dword_1004254 ebx +
jnz loc_10028D1  +
push eax  +
call ds:_exit  +
cmp dword_1004264 ebx +
jnz loc_10028DF  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_1004260 +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_1002908  +
xor eax eax +
jmp loc_1002955  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_1002904  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_1002942  +
cmp ecx 20Bh +
jnz loc_1002904  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_1002904  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_1002950  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_1002904  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 1  +
mov dword_1004254 eax +
call sub_1002C82  +
push eax  +
call ds:__set_app_type  +
or dword_1004594 0FFFFFFFFh +
or dword_1004598 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_1004274 +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_1004270 +
mov [eax] ecx +
call sub_1002C14  +
cmp dword_1004014 0 +
jnz loc_10029AE  +
push offset sub_1002C14  +
call ds:__setusermatherr  +
pop ecx  +
call sub_1002BFC  +
xor eax eax +
retn   +
***
call sub_1002CC1  +
jmp sub_1002788  +
***
cmp ecx dword_1004004 +
jnz loc_10029E0  +
retn 0  +
jmp loc_1002D57  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_1002A32  +
cmp dword ptr [eax+10h] 3 +
jnz loc_1002A32  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_1002A2C  +
cmp eax 19930521h +
jz loc_1002A2C  +
cmp eax 19930522h +
jz loc_1002A2C  +
cmp eax 1994000h +
jnz loc_1002A32  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset byte_10029F4+1)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_1002A76  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_1002A72  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_1002ADD  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1002AD5  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_1002ADF  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_1002AC5  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_1002A60  +
pop ecx  +
test eax eax +
jz loc_1002B46  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_1002AA0  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1002B46  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_1002B4F  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_10029D5  +
push offset dword_1004004  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1002C75  +
cmp ecx 0FFFFFFFFh +
jz loc_1002C75  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_1002C6E  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_1002C6E  +
cmp edx 10000000h +
jnb loc_1002C6E  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_1002C6E  +
jmp loc_1002C69  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_1002CB7  +
push eax  +
call sub_1002C1C  +
test eax eax +
jz loc_1002CB7  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_1002CAC  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_1002CB7  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1004004 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_1002CF3  +
test eax ebx +
jz loc_1002CF3  +
not eax  +
mov dword_1004008 eax +
jmp loc_1002D4E  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_1002D3A  +
test dword_1004004 ebx +
jnz loc_1002D3F  +
mov esi 0BB40E64Fh +
mov dword_1004004 esi +
not esi  +
mov dword_1004008 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_1004378 eax +
mov dword_1004374 ecx +
mov dword_1004370 edx +
mov dword_100436C ebx +
mov dword_1004368 esi +
mov dword_1004364 edi +
mov word_1004390 ss +
mov word_1004384 cs +
mov word_1004360 ds +
mov word_100435C es +
mov word_1004358 fs +
mov word_1004354 gs +
pushf   +
pop dword_1004388  +
mov eax [ebp+0] +
mov dword_100437C eax +
mov eax [ebp+4] +
mov dword_1004380 eax +
lea eax [ebp+8] +
mov dword_100438C eax +
mov eax [ebp-320h] +
mov dword_10042C8 10001h +
mov eax dword_1004380 +
mov dword_1004284 eax +
mov dword_1004278 0C0000409h +
mov dword_100427C 1 +
mov eax dword_1004004 +
mov [ebp-328h] eax +
mov eax dword_1004008 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
