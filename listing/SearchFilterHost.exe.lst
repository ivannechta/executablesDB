cmp ecx dword_1014000 +
jnz loc_100C24A  +
retn   +
***
mov ecx [ebp-0Ch] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov eax eax +
push eax  +
push large dword ptr fs:0  +
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_1014000 +
xor eax ebp +
push eax  +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea eax [esi+58h] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jz loc_100215F  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
add ecx 8 +
push ecx  +
call ds:InterlockedDecrement  +
retn   +
***
mov eax eax +
push eax  +
push large dword ptr fs:0  +
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_1014000 +
xor eax ebp +
push eax  +
mov [ebp-10h] esp +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
test edi edi +
jz loc_1001472  +
lea eax [edi+58h] +
push eax  +
call ds:InterlockedIncrement  +
mov ecx [esi] +
test ecx ecx +
jnz loc_10057CE  +
mov [esi] edi +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
add ecx 8 +
push ecx  +
call ds:InterlockedIncrement  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
test edi edi +
jz loc_10014B1  +
mov eax [edi] +
push edi  +
call dword ptr [eax+4]  +
mov eax [esi] +
test eax eax +
jnz loc_10046C4  +
mov [esi] edi +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax] +
mov ecx [ebp+arg_4] +
cmp edx [ecx] +
jz loc_100157D  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 0 +
jz loc_10015D2  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push ebx  +
push esi  +
push edi  +
jz loc_10015B9  +
mov esi [ebp+arg_4] +
test esi esi +
jz loc_10015B9  +
mov ebx [ebp+arg_C] +
test ebx ebx +
jz loc_10057E3  +
push [ebp+arg_8]  +
and dword ptr [ebx] 0 +
call sub_10014F5  +
test eax eax +
jnz loc_10015C0  +
mov edi [esi+8] +
test edi edi +
jz loc_1001571  +
mov eax [esi] +
xor ecx ecx +
test eax eax +
setz cl  +
mov [ebp+arg_4] ecx +
test ecx ecx +
jnz loc_10015A9  +
push [ebp+arg_8]  +
push eax  +
call sub_10014D5  +
test eax eax +
jnz loc_10015A9  +
add esi 0Ch +
jmp loc_1001548  +
mov eax 80004002h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
mov edx [eax+4] +
cmp edx [ecx+4] +
jnz loc_10014EA  +
mov edx [eax+8] +
cmp edx [ecx+8] +
jnz loc_10014EA  +
mov eax [eax+0Ch] +
cmp eax [ecx+0Ch] +
jnz loc_10014EA  +
xor eax eax +
inc eax  +
jmp loc_10014EC  +
cmp edi 1 +
jz loc_10015C0  +
jmp loc_10057ED  +
test eax eax +
jge loc_100156C  +
jmp loc_1001576  +
mov eax 80070057h +
jmp loc_1001576  +
mov esi [esi+4] +
add esi [ebp+arg_0] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
mov [ebx] esi +
xor eax eax +
jmp loc_1001576  +
***
cmp dword ptr [eax+4] 0 +
jnz loc_1001506  +
cmp dword ptr [eax+8] 0C0h +
jnz loc_1001506  +
cmp dword ptr [eax+0Ch] 46000000h +
jnz loc_1001506  +
xor eax eax +
inc eax  +
jmp loc_1001508  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_1001631  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_100164C  +
push ecx  +
call sub_1001511  +
pop ebp  +
retn 8  +
***
icebp   +
test [ebx+4Fh] edx +
test al 0F9h +
inc ebp  +
cdq   +
and [ebx-24BB2E18h] dl +
rcl byte ptr [eax-6F6F6F70h] 1 +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 8 +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 9E8h +
mov eax dword_1014000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
push ebx  +
push ebx  +
push 1  +
push ebx  +
mov [ebp+hMem] eax +
call ds:HeapSetInformation  +
push 0FFFFFFFFh  +
call ImmDisableIME  +
push offset dword_1014080  +
push offset unk_10140F8  +
push offset loc_1002A71  +
push offset loc_1001CFC  +
call sub_1002ABB  +
mov esi 8000h +
mov edi 80000000h +
cmp dword_101411C ebx +
jz loc_1001724  +
mov al byte_1014120 +
cmp al 4 +
jb loc_1001CCC  +
mov eax dword_1014108 +
mov ecx dword_101410C +
and eax esi +
and ecx edi +
or eax ecx +
jnz loc_10058A7  +
push offset aMainFilterHost  +
push 0FFFFFFFFh  +
call nullsub_1  +
call sub_1003463  +
push 2  +
call sub_10033BE  +
test eax eax +
jl loc_1001CD9  +
push 1  +
call ds:SetErrorMode  +
call ds:LoadMSSearchHooks  +
call sub_1002DDD  +
push ebx  +
push ebx  +
call ds:CoInitializeEx  +
cmp eax ebx +
mov [ebp+var_9A4] eax +
jl loc_1001C85  +
xor eax eax +
cmp [ebp+arg_0] 7 +
lea edi [ebp+hObject] +
stos   +
stos   +
mov [ebp+hEvent] ebx +
mov [ebp+hFileMappingObject] ebx +
mov [ebp+pStm] ebx +
jnz loc_10058EE  +
cmp [ebp+var_9A4] ebx +
mov [ebp+var_9C4] ebx +
jl loc_1001879  +
push 60h  +
call off_1014498  +
cmp eax ebx +
jz loc_1001CE0  +
mov ecx eax +
call sub_1002BFE  +
push eax  +
lea ecx [ebp+var_9C4] +
call sub_1001458  +
cmp [ebp+var_9C4] ebx +
jz loc_10058FD  +
cmp [ebp+var_9A4] ebx +
jl loc_1001879  +
push 1  +
push ebx  +
lea ecx [ebp+pSecDesc] +
mov [ebp+pSecDesc] ebx +
mov [ebp+var_9E4] ebx +
mov [ebp+var_9E0] ebx +
mov [ebp+var_9DC] ebx +
mov [ebp+var_9D8] ebx +
call sub_1003659  +
lea eax [ebp+pSid] +
push eax  +
push 11h  +
mov [ebp+pSid] ebx +
call sub_1002295  +
cmp eax ebx +
mov [ebp+var_9A4] eax +
jl loc_100185A  +
push 1  +
push [ebp+pSid]  +
lea ecx [ebp+pSecDesc] +
call sub_1002570  +
push ebx  +
push ebx  +
push ebx  +
push 2  +
push 2  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push [ebp+pSecDesc]  +
call ds:CoInitializeSecurity  +
mov [ebp+var_9A4] eax +
cmp [ebp+pSid] ebx +
jz loc_100186E  +
push [ebp+pSid]  +
call off_1014494  +
lea ecx [ebp+pSecDesc] +
call sub_100275D  +
cmp [ebp+var_9A4] ebx +
mov esi ds:_wtoi +
mov edi ds:GetHandleInformation +
mov [ebp+dwFlags] ebx +
jl loc_100190F  +
mov eax [ebp+hMem] +
push dword ptr [eax+8]  +
call esi  +
pop ecx  +
lea ecx [ebp+dwFlags] +
push ecx  +
push eax  +
mov [ebp+hObject] eax +
call edi  +
test eax eax +
jz loc_100590C  +
cmp [ebp+var_9A4] ebx +
jl loc_100190F  +
mov eax [ebp+hMem] +
push dword ptr [eax+0Ch]  +
call esi  +
pop ecx  +
lea ecx [ebp+dwFlags] +
push ecx  +
push eax  +
mov [ebp+hEvent] eax +
call edi  +
test eax eax +
jz loc_100591C  +
cmp [ebp+var_9A4] ebx +
jl loc_100190F  +
mov eax [ebp+hMem] +
push dword ptr [eax+10h]  +
call esi  +
pop ecx  +
lea ecx [ebp+dwFlags] +
push ecx  +
push eax  +
mov [ebp+hFileMappingObject] eax +
call edi  +
test eax eax +
jz loc_100592C  +
cmp [ebp+var_9A4] ebx +
mov [ebp+var_9BC] ebx +
jl loc_10019C0  +
mov eax [ebp+hMem] +
push dword ptr [eax+14h]  +
call esi  +
pop ecx  +
mov [ebp+var_9BC] eax +
cmp eax 10000h +
ja loc_100593C  +
cmp [ebp+var_9A4] ebx +
jl loc_10019C0  +
mov eax [ebp+hMem] +
push dword ptr [eax+18h]  +
call esi  +
pop ecx  +
lea ecx [ebp+dwFlags] +
push ecx  +
push eax  +
mov [ebp+var_9D0] eax +
call edi  +
test eax eax +
jz loc_100594B  +
cmp [ebp+var_9A4] ebx +
jl loc_10019C0  +
lea eax [ebp+pSid] +
push eax  +
push offset riid  +
push 1  +
push ebx  +
push offset rclsid  +
mov [ebp+pSid] ebx +
call ds:CoCreateInstance  +
test eax eax +
mov eax [ebp+pSid] +
jl loc_10019B0  +
cmp eax ebx +
jz loc_10019B0  +
mov ecx [eax] +
push 2  +
push 1  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov eax [ebp+pSid] +
mov [ebp+var_9A4] ebx +
cmp eax ebx +
jz loc_10019C0  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp [ebp+var_9A4] ebx +
mov [ebp+pSid] ebx +
jl loc_1001A19  +
lea eax [ebp+hMem] +
push eax  +
call sub_1002800  +
cmp eax ebx +
mov [ebp+var_9A4] eax +
jl loc_1001A19  +
mov esi [ebp+hMem] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
push [ebp+var_9C4]  +
mov ecx esi +
call sub_10026FC  +
cmp eax ebx +
mov [ebp+var_9A4] eax +
jl loc_1001A13  +
push esi  +
lea ecx [ebp+pSid] +
call sub_100149B  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
cmp [ebp+var_9A4] ebx +
mov [ebp+dwBytes] ebx +
mov esi offset stru_1001D34 +
jl loc_1001A60  +
push 1  +
push ebx  +
push ebx  +
push [ebp+pSid]  +
lea eax [ebp+dwBytes] +
push esi  +
push eax  +
call ds:CoGetMarshalSizeMax  +
cmp eax ebx +
mov [ebp+var_9A4] eax +
jl loc_1001A60  +
mov eax [ebp+dwBytes] +
cmp eax [ebp+var_9BC] +
ja loc_100595B  +
cmp [ebp+var_9A4] ebx +
mov [ebp+hMem] ebx +
jl loc_1001AB6  +
push [ebp+dwBytes]  +
push 42h  +
call ds:GlobalAlloc  +
mov edi eax +
mov [ebp+hMem] edi +
cmp edi ebx +
jz loc_100596A  +
cmp [ebp+var_9A4] ebx +
jl loc_1001CE7  +
lea eax [ebp+pStm] +
push eax  +
push 1  +
push edi  +
call ds:CreateStreamOnHGlobal  +
cmp eax ebx +
mov [ebp+var_9A4] eax +
jl loc_1001CE7  +
cmp [ebp+var_9A4] ebx +
mov [ebp+var_9BC] ebx +
jl loc_1001BDC  +
xor edi edi +
inc edi  +
push edi  +
push ebx  +
push ebx  +
push [ebp+pSid]  +
push esi  +
push [ebp+pStm]  +
call ds:CoMarshalInterface  +
cmp eax ebx +
mov [ebp+var_9A4] eax +
jl loc_1001BDC  +
mov eax [ebp+dwBytes] +
add eax 4 +
push eax  +
push ebx  +
push ebx  +
push 2  +
push [ebp+hFileMappingObject]  +
mov [ebp+var_9BC] edi +
call ds:MapViewOfFile  +
mov esi eax +
cmp esi ebx +
jz loc_1005986  +
cmp [ebp+var_9A4] ebx +
jl loc_1001BDC  +
push [ebp+hMem]  +
call ds:GlobalLock  +
mov edi eax +
cmp edi ebx +
jz loc_1005996  +
cmp [ebp+var_9A4] ebx +
jl loc_1001B7C  +
mov eax [ebp+dwBytes] +
mov [esi] eax +
push [ebp+dwBytes]  +
lea eax [esi+4] +
push edi  +
push eax  +
call memcpy  +
add esp 0Ch +
push [ebp+hMem]  +
call ds:GlobalUnlock  +
test eax eax +
jnz loc_1001B7C  +
call ds:GetLastError  +
test eax eax +
jnz loc_10059A6  +
push esi  +
call ds:UnmapViewOfFile  +
cmp [ebp+var_9A4] ebx +
jl loc_1001BDC  +
lea ecx [ebp+var_9B0] +
call sub_1002891  +
push [ebp+hEvent]  +
call ds:SetEvent  +
test eax eax +
jz loc_10059B6  +
cmp [ebp+var_9A4] ebx +
jl loc_10059D6  +
push 0FFFFFFFFh  +
push ebx  +
lea eax [ebp+hObject] +
push eax  +
push 2  +
call ds:WaitForMultipleObjects  +
cmp eax 0FFFFFFFFh +
jz loc_10059C6  +
lea ecx [ebp+var_9B0] +
call sub_1001F08  +
mov esi ds:CloseHandle +
xor edi edi +
mov eax [ebp+edi*4+hObject] +
cmp eax ebx +
jz loc_1001BF2  +
push eax  +
call esi  +
inc edi  +
cmp edi 2 +
jb loc_1001BE4  +
mov ecx [ebp+pStm] +
cmp ecx ebx +
jz loc_1001C26  +
cmp [ebp+var_9BC] ebx +
jz loc_1001C26  +
mov edx [ecx] +
push ebx  +
push ebx  +
push ebx  +
xor eax eax +
push eax  +
push ecx  +
call dword ptr [edx+14h]  +
test eax eax +
jl loc_1001C26  +
push [ebp+pStm]  +
call ds:CoReleaseMarshalData  +
cmp [ebp+hEvent] ebx +
jz loc_1001C36  +
push [ebp+hEvent]  +
call esi  +
cmp [ebp+hFileMappingObject] ebx +
jz loc_1001C46  +
push [ebp+hFileMappingObject]  +
call esi  +
mov eax [ebp+pSid] +
cmp eax ebx +
jz loc_1001C56  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [ebp+var_9C4] +
cmp ecx ebx +
jz loc_1001C65  +
call sub_10013D5  +
mov eax [ebp+pStm] +
cmp eax ebx +
jz loc_1001C75  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
call ds:CoUninitialize  +
mov esi 8000h +
mov edi 80000000h +
cmp dword_101411C ebx +
jz loc_1001CAD  +
mov al byte_1014120 +
cmp al 4 +
jb loc_1001CF4  +
mov eax dword_1014108 +
mov ecx dword_101410C +
and eax esi +
and ecx edi +
or eax ecx +
jnz loc_1005A32  +
push offset dword_1014080  +
call sub_1001EC1  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_9A4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10012FD  +
leave   +
retn   +
cmp al bl +
jz loc_100170D  +
jmp loc_1001724  +
push 3  +
jmp loc_1001746  +
xor eax eax +
jmp loc_10017BC  +
cmp edi ebx +
jnz loc_100597A  +
jmp loc_1001AB6  +
cmp al bl +
jnz loc_1001CAD  +
jmp loc_1001C96  +
***
jl loc_1001CC0  +
retn 2D49h  +
***
call sub_10021E6  +
xor ebx ebx +
mov [ebp-4] ebx +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp-1Ch] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
cmp eax ebx +
jnz loc_1005DC8  +
xor esi esi +
inc esi  +
mov eax dword_101403C +
cmp eax esi +
jz loc_1005DE7  +
mov eax dword_101403C +
test eax eax +
jnz loc_1001E5D  +
mov dword_101403C esi +
push offset dword_1001E98  +
push offset dword_1001E8C  +
call sub_1002EFC  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1005DF4  +
mov eax dword_101403C +
cmp eax esi +
jnz loc_1001E12  +
push (offset loc_1001E87+1)  +
push offset dword_1001E68  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_101403C 2 +
cmp [ebp-1Ch] ebx +
jnz loc_1001E1F  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_10144B4 ebx +
jnz loc_1005E02  +
push dword_101408C  +
push dword_1014090  +
push dword_1014088  +
call sub_10016A0  +
add esp 0Ch +
mov dword_1014038 eax +
cmp dword_101402C ebx +
jnz loc_1005E54  +
push eax  +
call ds:exit  +
mov dword_1014570 esi +
jmp loc_1001DEE  +
***
add [ebx] ecx +
cmp [eax] al +
add [edi+esi+2DBB0100h] ebx +
add [ecx] al +
int 3  +
sub eax 3D910100h +
add [ecx] al +
pop ds  +
cmp eax [eax] +
add [eax] eax +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
mov ecx [esi+4] +
mov edx eax +
or edx ecx +
jz loc_10055D6  +
push ecx  +
push eax  +
call ds:EventUnregister  +
and dword ptr [esi] 0 +
and dword ptr [esi+4] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
test esi esi +
jz loc_1001D77  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+10h]  +
jmp loc_1001D77  +
***
cmp dword ptr [ecx] 0 +
jz locret_1001F1D  +
push dword ptr [ecx+4]  +
call ds:GetCurrentProcess  +
push eax  +
call ds:SetPriorityClass  +
retn   +
***
mov ecx offset dword_10140B0 +
jmp loc_1002123  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1001F81  +
test byte ptr [ebp+8] 1 +
jz loc_1001F75  +
push esi  +
call off_1014494  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_100130C +
mov dword ptr [esi+4] offset off_1001320 +
mov dword ptr [esi+8] 0C0000001h +
mov ecx dword_1014014 +
mov eax [ecx] +
call dword ptr [eax+8]  +
mov ecx esi +
pop esi  +
nop   +
nop   +
nop   +
nop   +
nop   +
push 4  +
mov eax offset loc_1011753 +
call sub_100138C  +
mov esi ecx +
mov [ebp-10h] esi +
mov ecx [esi+30h] +
mov dword ptr [ebp-4] 1 +
test ecx ecx +
jz loc_1001FD1  +
call sub_10013D5  +
mov eax [esi+2Ch] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_1001FE2  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [esi+8] +
call sub_1001FF5  +
call __EH_epilog3  +
retn   +
***
lea eax [ecx+4] +
cmp byte ptr [eax+18h] 0 +
jz locret_1002009  +
push eax  +
mov byte ptr [eax+18h] 0 +
call ds:DeleteCriticalSection  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jnz loc_1005D61  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov ecx offset dword_1014048 +
jmp sub_1002067  +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+4] +
cmp dword ptr [edi] 0 +
jz loc_1002097  +
cmp dword ptr [esi+0Ch] 0 +
jnz loc_10056F5  +
mov eax [esi+28h] +
test eax eax +
jnz loc_1005704  +
add esi 10h +
push esi  +
call ds:DeleteCriticalSection  +
and dword ptr [edi] 0 +
pop edi  +
pop esi  +
retn   +
***
jmp loc_10020AB  +
mov edi edi +
push esi  +
push dword_101412C  +
mov esi ecx +
push esi  +
call sub_10020CA  +
lea ecx [esi+20h] +
pop esi  +
jmp sub_1002033  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
cmp esi edi +
jz loc_100210B  +
mov eax [esi] +
cmp eax edi +
jz loc_1002103  +
cmp eax 2Ch +
jnz loc_100210B  +
cmp [esi+24h] edi +
jg sub_1005D70  +
lea ecx [esi+20h] +
call sub_1002033  +
lea eax [esi+4] +
push eax  +
call ds:DeleteCriticalSection  +
and dword ptr [esi] 0 +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
mov eax 80070057h +
jmp loc_1002105  +
***
jmp loc_1002123  +
push 4  +
mov eax offset __ehhandler$?CallUnexpected@@YAXPBU_s_ESTypeList@@@Z_12 +
call sub_100138C  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
call near ptr dword_1001F20+3  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [esi+4] +
call sub_1002154  +
call __EH_epilog3  +
retn   +
***
mov eax [ecx] +
test eax eax +
jnz loc_100612C  +
retn   +
***
test esi esi +
jz loc_10013EF  +
push 1  +
mov ecx esi +
call sub_100217A  +
jmp loc_10013EF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10021A0  +
test [ebp+arg_0] 1 +
jz loc_1002194  +
push esi  +
call off_1014494  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100138C  +
mov eax [esp+8+arg_4] +
mov [esp+8+arg_4] ebp +
lea ebp [esp+8+arg_4] +
sub esp eax +
push ebx  +
push esi  +
push edi  +
mov eax dword_1014000 +
xor [ebp-4] eax +
xor eax ebp +
push eax  +
mov [ebp-18h] esp +
push dword ptr [ebp-8]  +
mov eax [ebp-4] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov [ebp-8] eax +
lea eax [ebp-10h] +
mov large fs:0 eax +
retn   +
***
call sub_10021E6  +
and dword ptr [ebp-4] 0 +
push ecx  +
call ds:InitializeCriticalSection  +
and dword ptr [ebp-1Ch] 0 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov eax [ebp-1Ch] +
call sub_100227C  +
retn   +
***
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
call sub_100138C  +
mov esi ds:CreateWellKnownSid +
lea eax [ebp-20h] +
push eax  +
xor ebx ebx +
push ebx  +
push ebx  +
push dword ptr [ebp+8]  +
mov [ebp-20h] ebx +
call esi  +
test eax eax +
jnz loc_10022CA  +
call ds:GetLastError  +
cmp eax 7Ah +
jnz loc_1006065  +
push dword ptr [ebp-20h]  +
call off_1014498  +
mov edi eax +
mov [ebp-14h] edi +
mov [ebp-4] ebx +
cmp edi ebx +
jz loc_100241A  +
lea eax [ebp-20h] +
push eax  +
push edi  +
push ebx  +
push dword ptr [ebp+8]  +
call esi  +
test eax eax +
jz loc_100607C  +
lea eax [ebp-24h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
push ebx  +
lea eax [ebp-1Ch] +
push eax  +
push ebx  +
push edi  +
push ebx  +
mov [ebp-1Ch] ebx +
mov [ebp-18h] ebx +
call ds:LookupAccountSidW  +
test eax eax +
jnz loc_1002325  +
call ds:GetLastError  +
cmp eax 7Ah +
jnz loc_1006082  +
mov eax [ebp-1Ch] +
push 2  +
inc eax  +
xor ecx ecx +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or eax ecx +
push eax  +
call off_1014498  +
mov [ebp-10h] eax +
mov eax [ebp-18h] +
push 2  +
inc eax  +
xor ecx ecx +
pop edx  +
mul  edx +
seto cl  +
mov byte ptr [ebp-4] 1 +
neg ecx  +
or eax ecx +
push eax  +
call off_1014498  +
mov [ebp+8] eax +
mov eax [ebp-1Ch] +
mov ecx [ebp-18h] +
lea esi [ecx+eax+2] +
push 2  +
xor ecx ecx +
pop edx  +
mov eax esi +
mul  edx +
seto cl  +
mov byte ptr [ebp-4] 2 +
neg ecx  +
or eax ecx +
push eax  +
call off_1014498  +
mov edi eax +
cmp [ebp-10h] ebx +
jz loc_10060C3  +
cmp [ebp+8] ebx +
jz loc_10060C3  +
cmp edi ebx +
jz loc_10060C3  +
lea eax [ebp-24h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
push dword ptr [ebp+8]  +
lea eax [ebp-1Ch] +
push eax  +
push dword ptr [ebp-10h]  +
push dword ptr [ebp-14h]  +
push ebx  +
call ds:LookupAccountSidW  +
test eax eax +
jz loc_1006098  +
push dword ptr [ebp-10h]  +
push dword ptr [ebp+8]  +
push offset aLsLs  +
push esi  +
push edi  +
call sub_100250E  +
mov esi eax +
mov eax [ebp+0Ch] +
add esp 14h +
cmp esi ebx +
jl loc_10060B1  +
mov [eax] edi +
push dword ptr [ebp+8]  +
mov byte ptr [ebp-4] 1 +
call off_1014494  +
push dword ptr [ebp-10h]  +
mov [ebp-4] bl +
call off_1014494  +
push dword ptr [ebp-14h]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
call off_1014494  +
mov eax esi +
call __EH_epilog3  +
retn 8  +
mov eax 8007000Eh +
jmp loc_1002412  +
***
call sub_1001410  +
mov edi [ebp+0Ch] +
xor esi esi +
cmp edi esi +
jz loc_100568E  +
cmp [ebp+8] esi +
jz loc_1005698  +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
push esi  +
lea eax [ebp-1Ch] +
push eax  +
push esi  +
push dword ptr [ebp+8]  +
mov [edi] esi +
push esi  +
mov [ebp-14h] esi +
mov [ebp-18h] esi +
mov [ebp-1Ch] esi +
call ds:LookupAccountNameW  +
call ds:GetLastError  +
cmp eax 7Ah +
jnz loc_10056CD  +
mov eax [ebp-18h] +
push 2  +
xor ecx ecx +
pop edx  +
mul  edx +
seto cl  +
mov [ebp-4] esi +
neg ecx  +
or eax ecx +
push eax  +
call off_1014498  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [ebp-14h] eax +
cmp [ebp-14h] esi +
jz loc_1002502  +
push dword ptr [ebp-1Ch]  +
call ds:malloc  +
pop ecx  +
mov [edi] eax +
cmp eax esi +
jz loc_10024FB  +
lea ecx [ebp-20h] +
push ecx  +
lea ecx [ebp-18h] +
push ecx  +
push dword ptr [ebp-14h]  +
lea ecx [ebp-1Ch] +
push ecx  +
push eax  +
push dword ptr [ebp+8]  +
push esi  +
call ds:LookupAccountNameW  +
test eax eax +
jz loc_10056B6  +
xor ebx ebx +
push dword ptr [ebp-14h]  +
call off_1014494  +
mov eax ebx +
call __EH_epilog3  +
retn 8  +
mov ebx 8007000Eh +
jmp loc_10024E8  +
mov ebx 8007000Eh +
jmp loc_10024F1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_100255A  +
cmp ecx 7FFFFFFFh +
ja loc_100255A  +
test eax eax +
jl loc_1002558  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_1002561  +
cmp eax esi +
ja loc_1002561  +
jz loc_1005FAC  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
mov eax 80070057h +
jmp loc_1002524  +
mov ebx 8007007Ah +
jmp loc_1005FAC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
lea eax [ebp+pSid] +
push eax  +
push [ebp+pSid]  +
mov edi ecx +
call sub_1002439  +
mov esi eax +
test esi esi +
jl loc_10025A4  +
push [ebp+AccessMask]  +
mov ecx edi +
push [ebp+pSid]  +
call sub_10025B1  +
push [ebp+pSid]  +
mov esi eax +
call ds:__imp_free  +
pop ecx  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push [ebp+AccessMask]  +
mov esi ecx +
push [ebp+pSid]  +
lea edi [esi+0Ch] +
push edi  +
call sub_10025F4  +
mov ebx eax +
test ebx ebx +
jl loc_10025E6  +
push 0  +
push dword ptr [edi]  +
push 1  +
push dword ptr [esi]  +
call ds:SetSecurityDescriptorDacl  +
test eax eax +
jz loc_100565C  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
xor edi edi +
cmp ebx edi +
jz loc_1005552  +
push esi  +
mov esi [ebx] +
mov [ebp+pAcl] esi +
cmp [ebp+pSid] edi +
jz loc_10026C7  +
push [ebp+pSid]  +
call ds:IsValidSid  +
test eax eax +
jz loc_10026C7  +
mov [ebp+var_C] edi +
cmp [ebx] edi +
jnz loc_100555C  +
push [ebp+pSid]  +
call ds:GetLengthSid  +
mov ecx [ebp+var_C] +
lea edi [eax+ecx+10h] +
push edi  +
call ds:malloc  +
mov esi eax +
pop ecx  +
test esi esi +
jz loc_10026BE  +
push 2  +
push edi  +
push esi  +
call ds:InitializeAcl  +
mov edi ds:__imp_free +
test eax eax +
jz loc_10026B4  +
push [ebp+pAcl]  +
push esi  +
call sub_10026D3  +
mov [ebp+arg_0] eax +
test eax eax +
jl loc_1005585  +
push [ebp+pSid]  +
push [ebp+AccessMask]  +
push 2  +
push esi  +
call ds:AddAccessAllowedAce  +
test eax eax +
jz loc_10026B4  +
push [ebp+pAcl]  +
mov [ebx] esi +
call edi  +
pop ecx  +
cmp [ebp+arg_0] 0 +
jl loc_1005585  +
mov eax [ebp+arg_0] +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn 0Ch  +
cmp eax edi +
mov [ebp+arg_0] eax +
jge loc_1002636  +
jmp loc_10026A1  +
call sub_1003252  +
jmp loc_100557D  +
mov [ebp+arg_0] 8007000Eh +
jmp loc_10026A1  +
mov eax 80070057h +
jmp loc_10026A4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
xor esi esi +
cmp [ebp+arg_0] esi +
jz loc_10054E8  +
cmp [ebp+pAcl] esi +
jnz loc_10054F2  +
xor eax eax +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
lea ecx [esi+30h] +
call sub_1001458  +
lea eax [esi+2Ch] +
push eax  +
push offset stru_1002738  +
push 1  +
push 0  +
push offset stru_1002748  +
call ds:CoCreateInstance  +
test eax eax +
jl loc_1002732  +
mov dword ptr [esi+28h] 1 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
push dword ptr [esi]  +
call off_1014494  +
push dword ptr [esi+4]  +
mov edi ds:__imp_free +
call edi  +
push dword ptr [esi+8]  +
call edi  +
push dword ptr [esi+0Ch]  +
call edi  +
push dword ptr [esi+10h]  +
call edi  +
add esp 10h +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10027BD  +
mov dword ptr [esi] offset off_100130C +
mov dword ptr [esi+4] offset off_1001320 +
mov ecx dword_1014014 +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+8] +
call sub_10027DE  +
xor eax eax +
mov [esi+28h] eax +
mov [esi+2Ch] eax +
mov [esi+30h] eax +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov edx ecx +
and dword ptr [edx] 0 +
lea esi [edx+4] +
push 6  +
pop ecx  +
xor eax eax +
mov edi esi +
stos   +
mov [esi+18h] al +
pop edi  +
mov eax edx +
pop esi  +
retn   +
***
call sub_1001410  +
mov edi [ebp+8] +
xor esi esi +
cmp edi esi +
jz loc_100585D  +
push 34h  +
mov [edi] esi +
mov dword ptr [ebp-18h] 8007000Eh +
mov [ebp-14h] esi +
mov [ebp-4] esi +
call off_1014498  +
cmp eax esi +
jz loc_100283E  +
push esi  +
mov ecx eax +
call sub_1002790  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jz loc_100286E  +
lea ecx [esi+0Ch] +
call sub_1002878  +
mov ebx eax +
test ebx ebx +
jl loc_100587C  +
xor ebx ebx +
test ebx ebx +
jnz loc_100587C  +
mov [edi] esi +
mov eax ebx +
call __EH_epilog3  +
retn 4  +
mov ebx [ebp-18h] +
jmp loc_1002862  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1002230  +
test eax eax +
jl loc_100288A  +
mov byte ptr [esi+18h] 1 +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10028CC  +
test eax eax +
jz loc_10028C2  +
push 100000h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:SetPriorityClass  +
mov dword ptr [esi+4] 200000h +
mov dword ptr [esi] 1 +
mov eax esi +
pop esi  +
retn   +
and dword ptr [esi] 0 +
jmp loc_10028BE  +
***
cmp dword_101400C 0 +
jz loc_10028E6  +
call sub_10028F1  +
and dword_101400C 0 +
mov dword_1014008 eax +
mov eax dword_1014008 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push 0  +
push 10h  +
push offset aUselowpriority  +
push offset aSoftwareMicros  +
xor esi esi +
push 80000002h  +
inc esi  +
mov [ebp+var_4] 4 +
call ds:SHRegGetValueW  +
test eax eax +
jnz loc_1002931  +
cmp [ebp+var_8] eax +
jz loc_100605E  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+28h] +
xor ecx ecx +
cmp eax ecx +
jz loc_1002AB2  +
mov edx [ebp+0Ch] +
sub edx ecx +
jz loc_10055BB  +
dec edx  +
jnz loc_1002AB2  +
mov cl [ebp+10h] +
mov [eax+28h] cl +
mov ecx [ebp+14h] +
mov [eax+10h] ecx +
mov ecx [ebp+18h] +
mov [eax+14h] ecx +
mov ecx [ebp+1Ch] +
mov [eax+18h] ecx +
mov ecx [ebp+20h] +
mov dword ptr [eax+24h] 1 +
mov [eax+1Ch] ecx +
pop ebp  +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
mov ecx [eax] +
or ecx [eax+4] +
jnz loc_10055CF  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:EventRegister  +
pop ebp  +
retn 10h  +
***
mov ecx edx +
mov [esi+28h] eax +
call sub_1002230  +
test eax eax +
jl loc_1005624  +
mov dword ptr [esi+4] 24h +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
call sub_1001410  +
mov esi ecx +
mov [ebp-14h] esi +
push dword ptr [esi]  +
call off_1014494  +
push dword ptr [esi+4]  +
mov edi ds:__imp_free +
xor ebx ebx +
mov [esi] ebx +
call edi  +
push dword ptr [esi+8]  +
mov [esi+4] ebx +
call edi  +
push dword ptr [esi+0Ch]  +
mov [esi+8] ebx +
call edi  +
push dword ptr [esi+10h]  +
mov [esi+0Ch] ebx +
call edi  +
add esp 10h +
push 14h  +
mov [esi+10h] ebx +
mov [ebp-4] ebx +
call off_1014498  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [esi] eax +
mov eax [esi] +
cmp eax ebx +
jz loc_1002BA1  +
push 1  +
push eax  +
call ds:InitializeSecurityDescriptor  +
test eax eax +
jz loc_1005644  +
xor eax eax +
call __EH_epilog3  +
retn   +
mov eax 8007000Eh +
jmp loc_1002B9B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor eax eax +
mov [ebp+TokenHandle] eax +
cmp edi eax +
jz loc_1002BC3  +
mov [edi] eax +
mov esi [ebp+arg_4] +
cmp esi eax +
jz loc_1002BCC  +
mov [esi] eax +
lea eax [ebp+TokenHandle] +
push eax  +
push [ebp+OpenAsSelf]  +
push 8  +
call ds:GetCurrentThread  +
push eax  +
call ds:OpenThreadToken  +
test eax eax +
jnz loc_1005674  +
call sub_1003252  +
mov esi eax +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
xor edi edi +
lea eax [esi+3Ch] +
mov dword ptr [esi] offset off_10013C4 +
mov [esi+8] edi +
push eax  +
mov [esi+0Ch] edi +
mov [esi+10h] edi +
mov [esi+14h] edi +
mov [esi+18h] edi +
mov [esi+1Ch] edi +
mov [esi+20h] edi +
mov [esi+24h] edi +
mov [esi+28h] edi +
mov [esi+30h] edi +
mov [esi+34h] edi +
mov [esi+38h] edi +
call ds:InitializeCriticalSection  +
mov [esi+54h] edi +
mov [esi+58h] edi +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+18h] +
call sub_1003785  +
xor eax eax +
mov [esi+30h] eax +
mov [esi+34h] eax +
mov [esi+38h] eax +
mov eax esi +
pop esi  +
retn   +
***
push offset dword_1014034  +
push dword_10144A4  +
mov dword_1014034 eax +
push offset dword_101408C  +
push offset dword_1014090  +
push offset dword_1014088  +
call ds:__wgetmainargs  +
add esp 14h +
mov dword_1014030 eax +
retn   +
***
mov eax eax +
push eax  +
push large dword ptr fs:0  +
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_1014000 +
xor eax ebp +
push eax  +
mov [ebp-10h] eax +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
mov ecx [ebp-10h] +
xor ecx ebp +
call sub_10012FD  +
jmp __EH_epilog3  +
***
push offset loc_100C0D6  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_8] +
and [ebp+var_4] 0 +
mov [ebp+var_8] eax +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
call sub_1003BF1  +
mov eax [ebp+arg_0] +
mov ecx [ebp+var_4] +
mov [eax] ecx +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
mov esi ds:SetLastError +
push edi  +
push 0  +
mov edi ecx +
call esi  +
mov eax [edi+9Ch] +
mov [ebp+cbData] 4 +
test eax eax +
jz loc_1005FB7  +
lea ecx [ebp+cbData] +
push ecx  +
lea ecx [ebp+Data] +
push ecx  +
lea ecx [ebp+Type] +
push ecx  +
push 0  +
push [ebp+lpValueName]  +
push eax  +
call ds:RegQueryValueExW  +
test eax eax +
jz loc_1005FBE  +
push eax  +
call esi  +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
call sub_1003B50  +
pop ecx  +
retn   +
***
push offset loc_1001F4C  +
call sub_1003B50  +
pop ecx  +
retn   +
***
call sub_1002CA3  +
push 1  +
lea ecx [ebp-150h] +
call sub_1003535  +
and dword ptr [ebp-4] 0 +
push 1  +
push offset aGatheringManag  +
lea eax [ebp-150h] +
push eax  +
lea ecx [ebp-0B0h] +
call sub_1003495  +
lea eax [ebp-154h] +
push eax  +
push lpValueName  +
lea ecx [ebp-0B0h] +
mov byte ptr [ebp-4] 1 +
call sub_1002D4D  +
test eax eax +
jnz loc_10056E5  +
lea ecx [ebp-0B0h] +
mov byte ptr [ebp-4] 0 +
call sub_1002E89  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-150h] +
call sub_1002E89  +
call sub_1002CE0  +
retn   +
***
mov edi edi +
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+10h] +
push eax  +
mov dword ptr [esi] offset off_10032A4 +
call sub_1002EDE  +
mov dword ptr [esi] offset off_1002F4C +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
test eax eax +
jz loc_1002EF3  +
cmp eax [ebp+arg_0] +
jnz loc_10055AE  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
cmp esi [ebp+arg_4] +
jnb loc_1002F1D  +
test eax eax +
jnz loc_1002F1D  +
mov ecx [esi] +
test ecx ecx +
jz loc_1002F18  +
call ecx  +
add esi 4 +
jmp loc_1002F07  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax ecx +
mov ecx [ebp+arg_4] +
and dword ptr [eax+0Ch] 0 +
mov [eax+8] edx +
xor edx edx +
mov dword ptr [eax] offset off_1002F4C +
mov [eax+4] ecx +
mov [ecx] dx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+lpString] +
mov esi ecx +
test edi edi +
jz loc_1005F4C  +
mov eax [ebp+arg_8] +
mov ebx [ebp+arg_4] +
mov [ebp+var_4] ebx +
mov [ebp+arg_4] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1002FAC  +
push edi  +
call ds:lstrlenW  +
mov [ebp+arg_8] eax +
lea eax [ebp+arg_8] +
push eax  +
lea ecx [ebp+arg_4] +
call sub_1003C78  +
push 1  +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
lea eax [ebp+var_8] +
push eax  +
lea ecx [ebp+var_4] +
call sub_1003BC1  +
mov ecx eax +
call sub_1003C18  +
mov ecx [esi+8] +
cmp [eax] ecx +
ja loc_1005F70  +
test ebx ebx +
jnz loc_1002FFC  +
mov eax [esi+4] +
cmp edi eax +
jb loc_1002FE5  +
lea eax [eax+ecx*2] +
cmp edi eax +
jb loc_1002FFC  +
push 1  +
lea eax [ebp+arg_8] +
push eax  +
lea ecx [ebp+arg_4] +
call sub_1003C18  +
push dword ptr [eax]  +
mov edx [esi] +
mov ecx esi +
call dword ptr [edx+4]  +
***
push 2  +
lea eax [ebp+arg_8] +
push eax  +
lea ecx [ebp+arg_4] +
call sub_1003075  +
mov edi [eax] +
push 2  +
lea eax [ebp+arg_8] +
push eax  +
lea ecx [ebp+var_4] +
call sub_1003075  +
push dword ptr [eax]  +
lea eax [ebp+var_8] +
push edi  +
push eax  +
call sub_1002D1A  +
mov ecx [esi+8] +
add ecx ecx +
cmp [eax] ecx +
ja loc_1005F99  +
push [ebp+arg_4]  +
lea eax [ebp+arg_4] +
push eax  +
lea ecx [ebp+var_4] +
call sub_1003BC1  +
mov eax [eax] +
mov [esi+0Ch] eax +
mov eax [esi+4] +
push edi  +
push [ebp+arg_0]  +
lea eax [eax+ebx*2] +
push eax  +
call memcpy  +
mov eax [esi+0Ch] +
mov ecx [esi+4] +
add esp 0Ch +
xor edx edx +
mov [ecx+eax*2] dx +
mov eax [esi+0Ch] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+arg_4] +
push eax  +
push ecx  +
call sub_100309E  +
mov eax [ebp+arg_0] +
mov ecx [ebp+var_4] +
mov [eax] ecx +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
mov ecx [ebp+arg_4] +
mul  dword ptr [ecx] +
test edx edx +
ja loc_1005F3A  +
cmp eax 0FFFFFFFFh +
ja loc_1005F3A  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor eax eax +
mov [ebp+TokenHandle] eax +
cmp edi eax +
jz loc_10030E2  +
mov [edi] eax +
mov esi [ebp+arg_4] +
cmp esi eax +
jz loc_10030EB  +
mov [esi] eax +
lea eax [ebp+TokenHandle] +
push eax  +
push 8  +
call ds:GetCurrentProcess  +
push eax  +
call ds:OpenProcessToken  +
test eax eax +
jz loc_1005668  +
push esi  +
push edi  +
push [ebp+TokenHandle]  +
call sub_1003128  +
push [ebp+TokenHandle]  +
mov esi eax +
call ds:CloseHandle  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_4] +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
mov [ebp+ReturnLength] ebx +
mov [ebp+var_4] ebx +
cmp eax ebx +
jz loc_1003143  +
mov [eax] ebx +
mov ecx [ebp+arg_8] +
cmp ecx ebx +
jz loc_100314C  +
mov [ecx] ebx +
mov esi ds:GetTokenInformation +
mov edi ds:GetLastError +
cmp eax ebx +
jz loc_10031BF  +
lea eax [ebp+ReturnLength] +
push eax  +
push ebx  +
push ebx  +
push 1  +
push [ebp+TokenHandle]  +
call esi  +
call edi  +
cmp eax 7Ah +
jnz loc_1005499  +
push [ebp+ReturnLength]  +
call ds:malloc  +
mov ebx eax +
pop ecx  +
test ebx ebx +
jz loc_1003231  +
lea eax [ebp+ReturnLength] +
push eax  +
push [ebp+ReturnLength]  +
push ebx  +
push 1  +
push [ebp+TokenHandle]  +
call esi  +
test eax eax +
jz loc_1003227  +
push dword ptr [ebx]  +
push [ebp+arg_4]  +
call sub_100334D  +
push ebx  +
mov [ebp+var_4] eax +
call ds:__imp_free  +
pop ecx  +
xor ebx ebx +
cmp [ebp+var_4] ebx +
jl loc_10054B5  +
cmp [ebp+arg_8] ebx +
jz loc_1003214  +
lea eax [ebp+ReturnLength] +
push eax  +
push ebx  +
push ebx  +
push 5  +
push [ebp+TokenHandle]  +
call esi  +
call edi  +
cmp eax 7Ah +
jnz loc_10054A7  +
push [ebp+ReturnLength]  +
call ds:malloc  +
mov edi eax +
pop ecx  +
cmp edi ebx +
jz loc_1003244  +
lea eax [ebp+ReturnLength] +
push eax  +
push [ebp+ReturnLength]  +
push edi  +
push 5  +
push [ebp+TokenHandle]  +
call esi  +
test eax eax +
jz loc_100323D  +
push dword ptr [edi]  +
push [ebp+arg_8]  +
call sub_100334D  +
push edi  +
mov [ebp+var_4] eax +
call ds:__imp_free  +
pop ecx  +
cmp [ebp+var_4] ebx +
jl loc_10054B5  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
call sub_1003252  +
jmp loc_10031A9  +
mov [ebp+var_4] 8007000Eh +
jmp loc_10031B4  +
call sub_1003252  +
jmp loc_1003209  +
mov [ebp+var_4] 8007000Eh +
jmp loc_1003214  +
***
call ds:GetLastError  +
test eax eax +
jle locret_1003266  +
and eax 0FFFFh +
or eax 80070000h +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_1002A08 +
call sub_1003288  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+10h] +
push eax  +
push 42h  +
call sub_1002F25  +
mov dword ptr [esi] offset off_10032A4 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ecx+10h] +
cmp [ecx+4] eax +
jnz loc_1005614  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push [ebp+bOwnerDefaulted]  +
mov edi ecx +
push 0  +
push dword ptr [edi]  +
call ds:SetSecurityDescriptorOwner  +
test eax eax +
jz loc_1005463  +
mov ebx ds:__imp_free +
lea esi [edi+4] +
push dword ptr [esi]  +
call ebx  +
and dword ptr [esi] 0 +
cmp [ebp+pSourceSid] 0 +
pop ecx  +
jz loc_1005447  +
push [ebp+pSourceSid]  +
push esi  +
call sub_100334D  +
mov [ebp+pSourceSid] eax +
test eax eax +
jl loc_100333E  +
push [ebp+bOwnerDefaulted]  +
push dword ptr [esi]  +
push dword ptr [edi]  +
call ds:SetSecurityDescriptorOwner  +
test eax eax +
jz loc_100544E  +
mov eax [ebp+pSourceSid] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_100541A  +
cmp dword ptr [esi] 0 +
jnz loc_10033B2  +
push [ebp+pSourceSid]  +
and dword ptr [esi] 0 +
call ds:IsValidSid  +
test eax eax +
jz loc_10033B2  +
push edi  +
push [ebp+pSourceSid]  +
call ds:GetLengthSid  +
mov edi eax +
push edi  +
call ds:malloc  +
pop ecx  +
mov [esi] eax +
test eax eax +
jz loc_1005424  +
push [ebp+pSourceSid]  +
push eax  +
push edi  +
call ds:CopySid  +
test eax eax +
jz loc_100542E  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 8  +
mov eax 80070057h +
jmp loc_10033AD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_1014028 0 +
jnz loc_10033E5  +
push offset aWersetflags  +
mov dword_1014028 1 +
call sub_1003409  +
mov dword_1014024 eax +
mov eax dword_1014024 +
test eax eax +
jz loc_100560B  +
pop ebp  +
jmp eax  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_1014020 0 +
jnz loc_1003431  +
push offset ModuleName  +
mov dword_1014020 1 +
call ds:GetModuleHandleW  +
mov hModule eax +
push [ebp+lpProcName]  +
push hModule  +
call ds:GetProcAddress  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
lea ecx [ebp+var_4] +
push ecx  +
mov eax offset loc_1009524 +
lea ecx [ebp+var_8] +
push ecx  +
push eax  +
mov [ebp+var_8] eax +
mov [ebp+var_4] eax +
call LockClrVersion  +
leave   +
retn   +
***
call sub_100138C  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_100326C  +
and dword ptr [ebp-4] 0 +
push 0  +
mov dword ptr [esi] offset off_1003D60 +
mov dword ptr [esi+98h] 1 +
call ds:SetLastError  +
mov ebx [ebp+8] +
push dword ptr [ebx+8]  +
lea edi [esi+4] +
mov ecx edi +
call sub_100363F  +
push edi  +
call sub_1003CD8  +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
call sub_100351A  +
mov ebx [ebx+9Ch] +
lea edi [esi+9Ch] +
push edi  +
push dword ptr [ebp+10h]  +
push 0  +
push dword ptr [ebp+0Ch]  +
push ebx  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_1005FD8  +
mov eax esi +
call __EH_epilog3  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
push 0FFFFFFFFh  +
push dword ptr [ecx+0Ch]  +
push [ebp+arg_0]  +
call dword ptr [eax+10h]  +
pop ebp  +
retn 4  +
***
call sub_100138C  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_1003D3C  +
and dword ptr [ebp-4] 0 +
push 0  +
push dword ptr [ebp+8]  +
mov ecx esi +
push offset aSoftwareMicr_0  +
push 80000002h  +
mov dword ptr [esi] offset off_1003D60 +
call sub_10035C1  +
mov eax esi +
call __EH_epilog3  +
retn 4  +
***
call sub_1001410  +
mov esi ecx +
xor ebx ebx +
cmp [esi+98h] ebx +
jnz loc_1005FE7  +
push ebx  +
call ds:SetLastError  +
lea edi [esi+9Ch] +
push edi  +
push dword ptr [ebp+10h]  +
mov dword ptr [esi+98h] 1 +
push ebx  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call ds:RegOpenKeyExW  +
cmp eax ebx +
jg loc_1006005  +
cmp eax ebx +
mov [ebp+10h] eax +
jl loc_1006014  +
mov [ebp-4] ebx +
cmp [ebp+14h] ebx +
jnz loc_100601B  +
push dword ptr [ebp+0Ch]  +
lea ecx [esi+4] +
call sub_100363F  +
mov eax [ebp+10h] +
call __EH_epilog3  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
push 0FFFFFFFFh  +
push 0  +
push [ebp+arg_0]  +
call dword ptr [eax+10h]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
call sub_1002B2B  +
mov edi eax +
xor esi esi +
cmp edi esi +
jl loc_10036E8  +
push esi  +
lea eax [ebp+pSourceSid] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
mov [ebp+var_4] esi +
mov [ebp+pSourceSid] esi +
call sub_1002BAD  +
mov edi eax +
and eax 0FFFFh +
cmp eax 3F0h +
jnz loc_10036A8  +
cmp [ebp+arg_4] esi +
jz loc_10036A8  +
lea eax [ebp+pSourceSid] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
call sub_10030CC  +
mov edi eax +
cmp edi esi +
jl loc_10036E8  +
push [ebp+bGroupDefaulted]  +
mov ecx ebx +
push [ebp+var_4]  +
call sub_10032DF  +
mov edi eax +
cmp edi esi +
jl loc_10036CE  +
push [ebp+bGroupDefaulted]  +
mov ecx ebx +
push [ebp+pSourceSid]  +
call sub_10036F6  +
mov edi eax +
push [ebp+var_4]  +
mov esi ds:__imp_free +
call esi  +
push [ebp+pSourceSid]  +
call esi  +
pop ecx  +
pop ecx  +
test edi edi +
jl loc_100570F  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push [ebp+bGroupDefaulted]  +
mov edi ecx +
push 0  +
push dword ptr [edi]  +
call ds:SetSecurityDescriptorGroup  +
test eax eax +
jz loc_100548C  +
mov ebx ds:__imp_free +
lea esi [edi+8] +
push dword ptr [esi]  +
call ebx  +
and dword ptr [esi] 0 +
cmp [ebp+pSourceSid] 0 +
pop ecx  +
jz loc_1005470  +
push [ebp+pSourceSid]  +
push esi  +
call sub_100334D  +
mov [ebp+pSourceSid] eax +
test eax eax +
jl loc_1003755  +
push [ebp+bGroupDefaulted]  +
push dword ptr [esi]  +
push dword ptr [edi]  +
call ds:SetSecurityDescriptorGroup  +
test eax eax +
jz loc_1005477  +
mov eax [ebp+pSourceSid] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push edi  +
mov edx ecx +
push 6  +
pop ecx  +
xor eax eax +
mov edi edx +
stos   +
mov eax edx +
pop edi  +
retn   +
***
mov ecx offset unk_10140CC +
call sub_10037B7  +
push (offset dword_100209C+3)  +
call sub_1003B50  +
pop ecx  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call near ptr dword_1003760+4  +
push esi  +
mov dword ptr [esi] 2Ch +
call sub_10037DE  +
test eax eax +
jl loc_1005D95  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_10037FF  +
cmp dword ptr [eax] 2Ch +
jnz loc_10037FF  +
and dword ptr [eax+1Ch] 0 +
lea ecx [eax+4] +
call sub_1002230  +
pop ebp  +
retn 4  +
mov eax 80070057h +
jmp loc_10037FB  +
***
call sub_1003826  +
push (offset dword_100200C+3)  +
call sub_1003B50  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 98h +
mov eax dword_1014000 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi ecx +
call sub_1002C4A  +
mov eax 1000000h +
push 94h  +
mov [esi+8] eax +
mov [esi+4] eax +
lea eax [ebp+VersionInformation] +
push 0  +
push eax  +
mov dword ptr [esi] 3Ch +
mov byte ptr [esi+0Ch] 0 +
call memset  +
add esp 0Ch +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 94h +
call ds:GetVersionExA  +
cmp [ebp+VersionInformation.dwPlatformId] 2 +
jnz loc_10038C8  +
cmp [ebp+VersionInformation.dwMajorVersion] 5 +
jb loc_100389B  +
mov byte ptr [esi+0Ch] 1 +
lea ecx [esi+18h] +
mov dword ptr [esi+10h] 800h +
mov dword ptr [esi+14h] offset dword_10038E4 +
call sub_1002230  +
test eax eax +
jl loc_1005DBC  +
mov ecx [ebp+var_4] +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_10012FD  +
leave   +
retn   +
cmp [ebp+VersionInformation.dwPlatformId] 1 +
jz loc_1005DA4  +
jmp loc_100389B  +
***
cmp [ebp+VersionInformation.dwMinorVersion] 0 +
jbe loc_100389B  +
jmp loc_1003897  +
***
xor bl 0FFh +
inc dword ptr [ebx+144A03Dh]  +
add [eax] eax +
jz loc_1005E9A  +
call sub_10039AE  +
xor eax eax +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_10039FA  +
push eax  +
call sub_1003A04  +
test eax eax +
jz loc_10039FA  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jz loc_1005F20  +
cmp ax 3 +
jnz loc_10039FA  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
***
mov eax [ebp+8] +
pop ebp  +
retn   +
***
call sub_10021E6  +
xor eax eax +
mov ecx [ebp+8] +
test ecx ecx +
jz loc_1003A53  +
cmp ecx 0FFFFFFFFh +
jz loc_1003A53  +
and [ebp-4] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_1003A4C  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_1003A4C  +
cmp edx 10000000h +
jnb loc_1003A4C  +
lea eax [edx+ecx] +
mov [ebp-1Ch] eax +
cmp dword ptr [eax] 4550h +
jnz loc_1005F16  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_100227C  +
retn 4  +
***
call sub_1003A90  +
jmp sub_1001D7F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1014000 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jnz loc_1005F25  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_1003B13  +
test dword_1014000 ebx +
jz loc_1003B13  +
mov dword_1014000 esi +
not esi  +
mov dword_1014004 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
mov esi 0BB40E64Fh +
jmp loc_1003B00  +
***
mov dword_1014048 offset off_1001354 +
mov dword_1014018 esi +
call sub_1003B50  +
pop ecx  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call sub_1003B6C  +
neg eax  +
sbb eax eax +
neg eax  +
pop ecx  +
dec eax  +
pop ebp  +
retn   +
***
call sub_10021E6  +
mov eax dword_1014044 +
mov [ebp-1Ch] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1005EAB  +
push dword ptr [ebp+8]  +
call ds:_onexit  +
pop ecx  +
call sub_100227C  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_4] +
and [ebp+var_4] 0 +
mov [ebp+var_8] eax +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push ecx  +
call sub_1003BF1  +
mov eax [ebp+arg_0] +
mov ecx [ebp+var_4] +
mov [eax] ecx +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
mov eax [ebp+arg_4] +
mov eax [eax] +
add eax ecx +
cmp eax ecx +
jb loc_1005F40  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+arg_4] +
push eax  +
push ecx  +
call sub_1003C41  +
mov eax [ebp+arg_0] +
mov ecx [ebp+var_4] +
mov [eax] ecx +
leave   +
retn 8  +
***
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
lea ecx [ebp+arg_0] +
call sub_1003C9B  +
mov eax [eax] +
mov [esi] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
push esi  +
push dword ptr [eax]  +
call sub_1003CBA  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jl loc_1005F46  +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [esi+0Ch] +
test edi edi +
jz loc_1003CFB  +
mov eax [esi+4] +
movzx eax word ptr [eax+edi*2-2] +
push eax  +
call sub_1003D19  +
test eax eax +
jnz loc_1003D0A  +
mov eax [esi] +
push 0FFFFFFFFh  +
push edi  +
push offset dword_1003D10  +
mov ecx esi +
call dword ptr [eax+10h]  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 2Fh +
jz loc_1003D32  +
cmp [ebp+arg_0] 5Ch +
jz loc_1003D32  +
xor eax eax +
pop ebp  +
retn 4  +
xor eax eax +
inc eax  +
jmp loc_1003D2E  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100326C  +
and dword ptr [esi+98h] 0 +
and dword ptr [esi+9Ch] 0 +
mov dword ptr [esi] offset off_1003D60 +
mov eax esi +
pop esi  +
retn   +
***
retn   +
***
push ebp  +
mov ebp esp +
sub esp 98h +
mov eax dword_1014000 +
xor eax ebp +
mov [ebp-4] eax +
lea eax [ebp-98h] +
push eax  +
mov dword ptr [ebp-98h] 94h +
call ds:GetVersionExA  +
test eax eax +
jz loc_1003DE9  +
cmp dword ptr [ebp-88h] 2 +
jnz loc_1003DE9  +
xor eax eax +
inc eax  +
mov ecx [ebp-4] +
xor ecx ebp +
call sub_10012FD  +
leave   +
retn   +
***
xor eax eax +
jmp loc_1003DDD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
mov eax dword_1014000 +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+0Ch] +
mov ecx [ebp+10h] +
mov edx [ebp+14h] +
push ebx  +
mov ebx [ebp+1Ch] +
mov [ebp-20h] eax +
mov eax [ebp+24h] +
push esi  +
mov esi [ebp+8] +
mov [ebp-28h] eax +
mov eax [esi+2Ch] +
push edi  +
mov edi [ebp+18h] +
test eax eax +
jz loc_100589D  +
mov [ebp-38h] edx +
mov [ebp-30h] ebx +
xor ebx ebx +
lea edx [ebp-1Ch] +
push edx  +
push ebx  +
push ebx  +
lea edx [ebp-14h] +
push edx  +
push dword ptr [ebp+20h]  +
lea edx [ebp-38h] +
push ebx  +
push edx  +
push ebx  +
mov [ebp-34h] edi +
mov [ebp-2Ch] ecx +
mov [ebp-1Ch] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
cmp eax ebx +
mov [ebp-18h] eax +
jl loc_1004259  +
lea eax [ebp-24h] +
push eax  +
call sub_1004146  +
cmp eax ebx +
mov [ebp-18h] eax +
jl loc_1003E9B  +
mov edi [ebp-24h] +
mov eax [edi] +
push edi  +
call dword ptr [eax+4]  +
push dword ptr [esi+30h]  +
mov ecx edi +
push dword ptr [ebp-20h]  +
push dword ptr [ebp-1Ch]  +
call sub_1003F79  +
cmp eax ebx +
mov [ebp-18h] eax +
jl loc_100428E  +
mov eax [ebp-28h] +
mov [eax] edi +
mov eax [ebp-1Ch] +
cmp eax ebx +
jz loc_1003EA8  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-18h] +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10012FD  +
leave   +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+UserTime] +
push eax  +
lea eax [ebp+KernelTime] +
push eax  +
lea eax [ebp+ExitTime] +
push eax  +
mov esi ecx +
xor ebx ebx +
xor edi edi +
lea eax [ebp+CreationTime] +
push eax  +
cmp [esi+1] bl +
jnz loc_10055DD  +
call ds:GetCurrentProcess  +
push eax  +
call ds:GetProcessTimes  +
test eax eax +
jz loc_10055EF  +
mov edx [ebp+UserTime.dwLowDateTime] +
mov eax [ebp+KernelTime.dwLowDateTime] +
mov esi [ebp+UserTime.dwHighDateTime] +
mov ecx [ebp+KernelTime.dwHighDateTime] +
add eax edx +
adc ecx esi +
mov edi eax +
mov ebx ecx +
mov eax edi +
pop edi  +
pop esi  +
mov edx ebx +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
push [ebp+arg_0]  +
lea edi [esi+14h] +
mov ecx edi +
call sub_100149B  +
push [ebp+arg_8]  +
lea ecx [esi+28h] +
call sub_1001458  +
mov eax [edi] +
mov ecx [eax] +
lea edx [esi+1Ch] +
push edx  +
push offset dword_1003FF8  +
push eax  +
call dword ptr [ecx]  +
mov edi [edi] +
lea ecx [esi+18h] +
push ecx  +
push offset dword_1003FE8  +
mov ebx eax +
mov eax [edi] +
push edi  +
call dword ptr [eax]  +
mov ecx eax +
mov eax 80004002h +
test ebx ebx +
jge loc_1003FCC  +
test ecx ecx +
jl loc_1003FE1  +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_1003FE1  +
push 0  +
push [ebp+arg_4]  +
lea eax [esi+8] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 0Ch +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+0Ch] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jz loc_100404A  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
test esi esi +
jz loc_1004042  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+20h]  +
jmp loc_1004042  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1004084  +
test byte ptr [ebp+8] 1 +
jz loc_1004078  +
push esi  +
call off_1014494  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1003EBC +
mov dword ptr [esi+4] offset off_1003F54 +
mov dword ptr [esi+8] offset off_1003F44 +
mov dword ptr [esi+0Ch] 0C0000001h +
mov ecx dword_1014014 +
mov eax [ecx] +
call dword ptr [eax+8]  +
mov ecx esi +
pop esi  +
nop   +
nop   +
nop   +
nop   +
nop   +
push 4  +
mov eax offset loc_1011821 +
call sub_100138C  +
mov esi ecx +
mov [ebp-10h] esi +
mov ecx [esi+28h] +
mov dword ptr [ebp-4] 3 +
test ecx ecx +
jz loc_10040DC  +
push esi  +
call sub_1004128  +
mov ecx [esi+28h] +
mov byte ptr [ebp-4] 2 +
test ecx ecx +
jz loc_10040EC  +
call sub_10013D5  +
mov eax [esi+1Ch] +
mov byte ptr [ebp-4] 1 +
test eax eax +
jnz loc_10057D8  +
mov eax [esi+18h] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_100410C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov esi [esi+14h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jz loc_100411D  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax [ecx+54h] +
jnz loc_100413D  +
push eax  +
push 0  +
call sub_10042AD  +
pop ebp  +
retn 4  +
***
call sub_1001410  +
mov esi [ebp+8] +
xor edi edi +
cmp esi edi +
jz loc_1005841  +
push 50h  +
mov [esi] edi +
mov dword ptr [ebp-14h] 8007000Eh +
mov [ebp-4] edi +
call off_1014498  +
cmp eax edi +
jz loc_1004193  +
push edi  +
mov ecx eax +
call sub_100419C  +
cmp eax edi +
jz loc_1004186  +
mov [ebp-14h] edi +
mov [esi] eax +
mov eax [ebp-14h] +
call __EH_epilog3  +
retn 4  +
xor eax eax +
jmp loc_100417F  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10041D0  +
mov dword ptr [esi] offset off_1003EBC +
mov dword ptr [esi+4] offset off_1003F54 +
mov dword ptr [esi+8] offset off_1003F44 +
mov ecx dword_1014014 +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov eax esi +
pop esi  +
retn 4  +
***
call sub_100138C  +
mov esi ecx +
xor eax eax +
mov [esi+0Ch] eax +
mov [esi+14h] eax +
mov [esi+18h] eax +
mov [esi+1Ch] eax +
mov dword ptr [esi+20h] 1 +
mov [esi+24h] eax +
lea ecx [esi+30h] +
mov [esi+28h] eax +
mov [ecx] al +
mov [ecx+1] al +
mov [ecx+8] eax +
mov [ecx+0Ch] eax +
mov [ecx+10h] eax +
mov [ecx+14h] eax +
mov [ecx+18h] eax +
call sub_1004222  +
mov eax esi +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov byte ptr [esi] 1 +
call sub_1003EE5  +
mov [esi+8] eax +
mov [esi+0Ch] edx +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push 1  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call ds:CoCreateInstance  +
pop ebp  +
retn 14h  +
***
cmp eax 80041205h +
jz loc_1003E9B  +
mov dword ptr [ebp-18h] 80040D16h +
jmp loc_1003E9B  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1001685  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1001615  +
***
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
jmp loc_1003E9B  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1001D59  +
***
call sub_100138C  +
mov esi ecx +
lea eax [esi+3Ch] +
push eax  +
lea ecx [ebp-10h] +
call sub_1004311  +
mov edi [ebp+0Ch] +
xor ebx ebx +
mov [ebp-4] ebx +
cmp [ebp+8] ebx +
jnz loc_10042D9  +
cmp [esi+54h] edi +
jnz loc_10042F6  +
cmp [esi+10h] ebx +
jz loc_10042E5  +
mov dword ptr [esi+10h] 1 +
push dword ptr [ebp+8]  +
lea ecx [esi+8] +
mov [esi+1Ch] ebx +
call sub_100149B  +
mov [esi+54h] edi +
cmp [ebp-10h] ebx +
jz loc_1004304  +
push dword ptr [ebp-10h]  +
call ds:LeaveCriticalSection  +
call __EH_epilog3  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+lpCriticalSection] +
push esi  +
mov esi ecx +
push eax  +
mov [esi] eax +
call ds:EnterCriticalSection  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_1004389  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_10043A4  +
push ecx  +
call sub_1001511  +
pop ebp  +
retn 8  +
***
inc eax  +
mov bh 0BCh +
mov [ecx] ebx +
popa   +
sbb dl [eax] +
mov esp 1DD00B7h +
push es  +
push ebp  +
scas   +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jz loc_10047C5  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
push 4  +
mov eax offset __ehhandler$?CallUnexpected@@YAXPBU_s_ESTypeList@@@Z_6 +
call sub_100138C  +
and dword ptr [ebp-10h] 0 +
lea eax [ebp-10h] +
push eax  +
call sub_1004505  +
mov esi [ebp+8] +
mov edi [ebp-10h] +
mov ebx eax +
test ebx ebx +
jl loc_1004453  +
mov eax [edi] +
push edi  +
call dword ptr [eax+4]  +
mov eax [esi+20h] +
lea ecx [esi-8] +
push ecx  +
push eax  +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
call sub_10044AB  +
mov ebx eax +
and dword ptr [ebp+8] 0 +
and dword ptr [ebp-4] 0 +
test ebx ebx +
jl loc_1004481  +
push edi  +
lea ecx [ebp+8] +
call sub_100149B  +
mov eax [esi+14h] +
test eax eax +
jnz loc_100588C  +
mov esi [esi+10h] +
push dword ptr [ebp+8]  +
mov eax [esi] +
push esi  +
call dword ptr [eax+14h]  +
mov ebx eax +
test edi edi +
jz loc_100448B  +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
mov eax [ebp+8] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_100449C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax ebx +
call __EH_epilog3  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_10044DE  +
cmp [ebp+arg_4] 0 +
jz loc_10044DE  +
push esi  +
push [ebp+arg_4]  +
lea esi [ecx+0Ch] +
mov ecx esi +
call sub_1001458  +
push [ebp+arg_8]  +
mov ecx [esi] +
push [ebp+arg_0]  +
call sub_10042AD  +
xor eax eax +
pop esi  +
pop ebp  +
retn 0Ch  +
mov eax 80004003h +
jmp loc_10044DA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 4 +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
call sub_1001410  +
mov esi [ebp+8] +
xor edi edi +
cmp esi edi +
jz loc_1005825  +
push 10h  +
mov [esi] edi +
mov dword ptr [ebp-14h] 8007000Eh +
mov [ebp-4] edi +
call off_1014498  +
cmp eax edi +
jz loc_1004552  +
push edi  +
mov ecx eax +
call sub_100455B  +
cmp eax edi +
jz loc_1004545  +
mov [ebp-14h] edi +
mov [esi] eax +
mov eax [ebp-14h] +
call __EH_epilog3  +
retn 4  +
xor eax eax +
jmp loc_100453E  +
***
mov edi edi +
push esi  +
mov esi ecx +
and dword ptr [esi+4] 0 +
and dword ptr [esi+0Ch] 0 +
mov dword ptr [esi] offset off_100432C +
mov ecx dword_1014014 +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp byte ptr [esi] 0 +
jz loc_10045B1  +
call sub_1003EE5  +
cmp dword ptr [esi+18h] 0 +
jl loc_10045B1  +
push edi  +
mov ecx eax +
sub ecx [esi+8] +
mov edi edx +
sbb edi [esi+0Ch] +
add [esi+10h] ecx +
mov [esi+8] eax +
mov [esi+0Ch] edx +
adc [esi+14h] edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 5Ch +
mov eax dword_1014000 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
mov ebx [ebp+0Ch] +
mov eax ebx +
neg eax  +
sbb eax eax +
and eax 7FFFBFFDh +
add eax 80004003h +
push esi  +
mov esi [ebp+8] +
js loc_100467C  +
push edi  +
xor edi edi +
cmp [esi+14h] edi +
jz loc_1005761  +
cmp eax edi +
jl loc_100467B  +
cmp [esi+24h] edi +
jnz loc_10046CF  +
cmp eax edi +
jl loc_100467B  +
push 34h  +
pop ecx  +
lea eax [ebp-38h] +
nop   +
mov byte ptr [eax] 0 +
inc eax  +
dec ecx  +
jnz loc_1004610  +
mov eax [esi+14h] +
mov ecx [eax] +
lea edx [ebp-38h] +
push edx  +
push eax  +
call dword ptr [ecx+10h]  +
cmp eax edi +
mov [ebp-4Ch] eax +
jl loc_10046DE  +
lea ecx [esi+30h] +
call sub_1004908  +
mov ecx dword_10144B8 +
mov [ebp-58h] eax +
xor eax eax +
cmp edx eax +
jb loc_1004655  +
ja loc_1005770  +
cmp [ebp-58h] ecx +
ja loc_1005770  +
cmp [ebp-4Ch] edi +
jl loc_1004678  +
cmp [esi+20h] edi +
jnz loc_10049FA  +
push 0Dh  +
pop ecx  +
lea esi [ebp-38h] +
mov edi ebx +
movs   +
xor edi edi +
cmp [ebp-18h] edi +
jz loc_10050F3  +
mov eax [ebp-4Ch] +
pop edi  +
mov ecx [ebp-4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10012FD  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov ecx [eax+14h] +
mov eax ecx +
neg eax  +
sbb eax eax +
and eax 7FFFBFFDh +
add eax 80004003h +
js loc_10046C0  +
push dword ptr [ebp+18h]  +
mov eax [ecx] +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push ecx  +
call dword ptr [eax+0Ch]  +
pop ebp  +
retn 14h  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_10014BB  +
***
mov dword ptr [ebp-4Ch] 80041700h +
mov eax [ebp-4Ch] +
jmp loc_1004605  +
***
cmp eax 80041700h +
jnz loc_1004678  +
xor eax eax +
inc eax  +
mov [esi+24h] eax +
and dword ptr [ebp-4Ch] 0 +
push 2  +
pop esi  +
mov [ebx+4] esi +
mov [ebx+8] esi +
mov [ebx+0Ch] edi +
mov [ebx+28h] edi +
mov [ebx+2Ch] edi +
mov [ebx+30h] edi +
mov [ebx] edi +
lea edi [ebx+10h] +
mov esi offset dword_1004724 +
movs   +
movs   +
movs   +
movs   +
mov [ebx+20h] eax +
mov dword ptr [ebx+24h] 0Ah +
jmp loc_1004678  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+0Ch] +
and dword ptr [edx] 0 +
mov ecx [ebp+8] +
mov eax [ecx+14h] +
push esi  +
mov esi eax +
neg esi  +
sbb esi esi +
and esi 7FFFBFFDh +
add esi 80004003h +
js loc_100476E  +
cmp dword ptr [ecx+24h] 0 +
jnz loc_1004775  +
mov ecx [eax] +
push edx  +
push eax  +
call dword ptr [ecx+18h]  +
mov esi eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
push ebx  +
push 10h  +
call ds:CoTaskMemAlloc  +
mov ebx eax +
mov esi ebx +
neg esi  +
sbb esi esi +
and esi 7FF8FFF2h +
add esi 8007000Eh +
js loc_10047C2  +
push edi  +
xor eax eax +
mov edi ebx +
stos   +
stos   +
stos   +
stos   +
mov edi [ebp+8] +
push 15h  +
add edi 30h +
pop eax  +
mov ecx edi +
mov [ebx] ax +
call sub_1004584  +
mov eax [edi+10h] +
mov [ebx+8] eax +
mov eax [edi+14h] +
mov [ebx+0Ch] eax +
mov eax [ebp+0Ch] +
mov [eax] ebx +
pop edi  +
pop ebx  +
jmp loc_100476E  +
***
test esi esi +
jz loc_1004407  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+38h]  +
jmp loc_1004407  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1004806  +
test byte ptr [ebp+8] 1 +
jz loc_10047FA  +
push esi  +
call off_1014494  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_100432C +
mov dword ptr [esi+4] 0C0000001h +
mov ecx dword_1014014 +
mov eax [ecx] +
call dword ptr [eax+8]  +
mov ecx [esi+0Ch] +
pop esi  +
test ecx ecx +
jnz sub_10013D5  +
jmp nullsub_3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax+0Ch] +
test eax eax +
jz loc_10057C4  +
push dword ptr [ebp+14h]  +
mov ecx [eax] +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push eax  +
call dword ptr [ecx]  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+18h] +
sub eax [esi+14h] +
push edi  +
cmp eax [ebp+arg_4] +
jb loc_1004887  +
mov eax [ebp+arg_4] +
mov edi [ebp+arg_8] +
push eax  +
mov [edi] eax +
mov eax [esi+0Ch] +
add eax [esi+14h] +
push eax  +
push [ebp+arg_0]  +
call memcpy  +
mov eax [edi] +
add esp 0Ch +
add [esi+14h] eax +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+8] +
mov ecx [eax] +
sub esp 20h +
lea edx [ebp+arg_0] +
push edx  +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push eax  +
call dword ptr [ecx+14h]  +
test eax eax +
jl loc_1005C42  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
mov eax [ecx+8] +
push [ebp+arg_4]  +
mov ecx [eax] +
push [ebp+arg_0]  +
push eax  +
call dword ptr [ecx+0Ch]  +
cmp eax 80070026h +
jz loc_1005C6C  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
mov eax [esp+arg_C] +
or eax eax +
jnz loc_10052A8  +
mov ecx [esp+arg_8] +
mov eax [esp+arg_4] +
xor edx edx +
div  ecx +
mov ebx eax +
mov eax [esp+arg_0] +
div  ecx +
mov edx ebx +
pop esi  +
pop ebx  +
retn 10h  +
***
push 10h  +
mov eax offset loc_1011AE5 +
call sub_1001410  +
xor ecx ecx +
cmp [ebp+0Ch] ecx +
jz loc_1005D49  +
mov esi [ebp+8] +
mov eax [esi+10h] +
mov [ebp-14h] ecx +
mov [ebp-18h] ecx +
mov [ebp-4] ecx +
cmp eax ecx +
jz loc_1004B3C  +
cmp eax 1 +
jz loc_1004A3F  +
jle loc_10049AF  +
cmp eax 4 +
jg loc_10049AF  +
lea eax [ebp-14h] +
push eax  +
push dword ptr [ebp+10h]  +
mov ecx esi +
push dword ptr [ebp+0Ch]  +
call sub_10049D0  +
mov eax [ebp+14h] +
test eax eax +
jz loc_10049BB  +
mov ecx [ebp-14h] +
mov [eax] ecx +
mov eax [ebp-18h] +
***
call __EH_epilog3  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
mov esi ecx +
mov eax [esi+10h] +
push 4  +
pop ecx  +
cmp eax ecx +
jnz loc_1004A09  +
push [ebp+arg_8]  +
mov ecx esi +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1004EE5  +
***
pop esi  +
leave   +
retn 0Ch  +
***
mov dword ptr [ebp-34h] 3 +
mov [esi+20h] edi +
jmp loc_1004663  +
***
push edi  +
cmp eax 2 +
jnz loc_1004DD1  +
mov eax [esi+14h] +
xor ecx ecx +
cmp ecx [esi+34h] +
jb loc_1004A2C  +
ja loc_1005D1B  +
cmp eax [esi+30h] +
ja loc_1005D1B  +
push [ebp+arg_8]  +
mov ecx esi +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1004870  +
***
pop edi  +
jmp loc_10049F5  +
***
mov ecx esi +
call sub_1004A50  +
jmp loc_100499E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
mov esi ecx +
xor eax eax +
push edi  +
cmp [esi+8] eax +
jz loc_1005C7D  +
push eax  +
push eax  +
call sub_10048AF  +
lea ebx [esi+18h] +
push ebx  +
mov edi 30000h +
push edi  +
push dword ptr [esi+0Ch]  +
mov ecx esi +
call sub_10048DD  +
xor ecx ecx +
cmp eax ecx +
jl loc_1005CA8  +
mov ebx [ebx] +
xor eax eax +
inc eax  +
cmp ebx edi +
jz loc_1004DF9  +
mov dword ptr [esi+10h] 2 +
mov [esi+28h] eax +
mov [esi+30h] ebx +
mov [esi+34h] ecx +
pop edi  +
mov [esi+1Ch] eax +
mov dword ptr [esi+20h] 10000h +
mov [esi+24h] ecx +
mov [esi+14h] ecx +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_1014000 +
xor eax ebp +
mov [ebp-4] eax +
mov ecx [ebp+0Ch] +
mov edx [ebp+10h] +
push esi  +
push edi  +
mov edi [ebp+8] +
mov eax [edi+14h] +
mov esi eax +
neg esi  +
sbb esi esi +
and esi 7FFFBFFDh +
add esi 80004003h +
js loc_1004B2A  +
mov esi [eax] +
push edx  +
push ecx  +
push eax  +
call dword ptr [esi+14h]  +
mov esi eax +
test esi esi +
jl loc_1004B2A  +
push ebx  +
lea ecx [edi+30h] +
call sub_1004908  +
mov ecx dword_10144B8 +
xor ebx ebx +
cmp edx ebx +
pop ebx  +
jb loc_1004B2A  +
ja loc_100571B  +
cmp eax ecx +
ja loc_100571B  +
mov ecx [ebp-4] +
pop edi  +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_10012FD  +
leave   +
retn 0Ch  +
***
mov ecx esi +
call sub_1004B4D  +
jmp loc_1004A3F  +
***
mov edi edi +
push esi  +
push 30000h  +
mov esi ecx +
call off_1014498  +
mov [esi+0Ch] eax +
mov dword ptr [esi+10h] 1 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax+0Ch] +
test eax eax +
jz loc_100581A  +
push dword ptr [ebp+10h]  +
mov ecx [eax] +
push dword ptr [ebp+0Ch]  +
push eax  +
call dword ptr [ecx+8]  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax+8] +
test eax eax +
jz loc_1005C73  +
push dword ptr [ebp+10h]  +
mov ecx [eax] +
push dword ptr [ebp+0Ch]  +
push eax  +
call dword ptr [ecx+30h]  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax+0Ch] +
test eax eax +
jz loc_1005810  +
push dword ptr [ebp+18h]  +
mov ecx [eax] +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push eax  +
call dword ptr [ecx+4]  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
sub esp 80h +
push ebx  +
push esi  +
mov esi ecx +
xor ecx ecx +
sub eax ecx +
push edi  +
jnz loc_1005AAF  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
cmp dword ptr [esi+28h] 0 +
jz loc_1004C2D  +
cmp ecx [esi+34h] +
jb loc_1004C2D  +
ja loc_1005C36  +
cmp eax [esi+30h] +
ja loc_1005C36  +
pop edi  +
pop esi  +
mov edx ecx +
pop ebx  +
leave   +
retn 0Ch  +
***
push 0Ch  +
mov eax offset loc_1011AA1 +
call sub_1001410  +
push dword ptr [ebp+14h]  +
mov esi [ebp+8] +
push dword ptr [ebp+10h]  +
and dword ptr [ebp-14h] 0 +
push dword ptr [ebp+0Ch]  +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_1004BF0  +
mov ebx edx +
mov edi eax +
push ebx  +
push edi  +
mov ecx esi +
call sub_1004CF0  +
test eax eax +
jz loc_1004ED8  +
push ebx  +
push edi  +
mov ecx esi +
call sub_1004CA0  +
mov ecx [ebp+18h] +
test ecx ecx +
jnz loc_100521A  +
***
mov eax [ebp+var_14] +
call __EH_epilog3  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi+1Ch] 0 +
push edi  +
jz loc_1004CD1  +
push [ebp+arg_4]  +
mov edi [ebp+arg_0] +
push edi  +
call sub_1004D50  +
test eax eax +
jnz loc_1004CC8  +
sub edi [esi+20h] +
add edi 10000h +
mov [esi+14h] edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
mov eax [ebp+arg_0] +
mov [esi+20h] eax +
mov eax [ebp+arg_4] +
mov dword ptr [esi+14h] 10000h +
mov [esi+24h] eax +
jmp loc_1004CCB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_0] +
push esi  +
push edi  +
mov ebx ecx +
call sub_1004D50  +
test eax eax +
jnz loc_1004D3C  +
mov eax [ebx+20h] +
mov ebx [ebx+24h] +
cmp esi ebx +
jb loc_1004E33  +
ja loc_1004D23  +
cmp edi eax +
jb loc_1004E33  +
sub edi eax +
sbb esi ebx +
mov [ebp+arg_4] esi +
jnz loc_1004E33  +
cmp edi 20000h +
jnb loc_1004E33  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
ja loc_1004D67  +
jb loc_1004D6B  +
cmp [ebp+arg_0] 10000h +
jb loc_1004D6B  +
pop ebp  +
retn 8  +
xor eax eax +
inc eax  +
jmp loc_1004D67  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
lea eax [ebp+arg_4] +
push eax  +
mov eax [ebp+arg_0] +
push ebx  +
add eax edi +
push eax  +
mov ecx esi +
call sub_1004870  +
mov eax [esi+14h] +
xor ecx ecx +
cmp eax 10000h +
jb loc_1004DAD  +
add eax 0FFFF0000h +
add eax [esi+20h] +
adc ecx [esi+24h] +
cmp [ebp+arg_4] 0 +
jz loc_1005D03  +
sub ebx [ebp+arg_4] +
add edi [ebp+arg_4] +
test ebx ebx +
ja loc_1004FF3  +
mov eax [ebp+arg_8] +
mov [eax] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
cmp eax 3 +
jnz loc_1004A3C  +
cmp dword ptr [esi+1Ch] 0 +
jz loc_1004F2C  +
push [ebp+arg_8]  +
mov ecx esi +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1004D75  +
jmp loc_1004A3C  +
***
or dword ptr [esi+30h] 0FFFFFFFFh +
or dword ptr [esi+34h] 0FFFFFFFFh +
mov dword ptr [esi+10h] 3 +
mov [esi+28h] ecx +
jmp loc_1004AAA  +
***
cmp eax 20000h +
jnb loc_1004ECF  +
mov edi [esi+24h] +
xor edx edx +
add eax [esi+20h] +
mov [esi+28h] ecx +
adc edi edx +
mov [esi+30h] eax +
mov [esi+34h] edi +
jmp loc_1004ECF  +
***
xor eax eax +
jmp loc_1004D3F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
mov esi ecx +
cmp dword ptr [esi+28h] 0 +
push edi  +
jz loc_1004E95  +
mov edi [ebp+arg_0] +
mov eax [edi+4] +
mov ecx [edi] +
cmp eax [esi+34h] +
jb loc_1004E6D  +
ja loc_1005CAD  +
cmp ecx [esi+30h] +
ja loc_1005CAD  +
mov edx [edi+4] +
mov eax [esi+34h] +
mov ecx [esi+30h] +
push ebx  +
mov ebx [edi] +
add ebx 20000h +
adc edx 0 +
cmp edx eax +
jb loc_1004E94  +
ja loc_1004F9D  +
cmp ebx ecx +
ja loc_1004F9D  +
pop ebx  +
lea eax [ebp+arg_0] +
push eax  +
mov eax [esi+0Ch] +
push 20000h  +
add eax 10000h +
push eax  +
mov ecx esi +
call sub_10048DD  +
test eax eax +
jl loc_1005CC0  +
mov eax [ebp+arg_0] +
lea ecx [eax+10000h] +
mov [esi+18h] ecx +
xor ecx ecx +
inc ecx  +
cmp dword ptr [esi+28h] 0 +
jz loc_1004E10  +
pop edi  +
mov [esi+1Ch] ecx +
pop esi  +
leave   +
retn 8  +
***
and [esi+1Ch] eax +
jmp loc_1004C7C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_4] +
lea ebx [esi+14h] +
mov eax [ebx] +
push edi  +
lea edx [eax+ecx] +
mov edi 10000h +
cmp edx edi +
jb loc_1004F8D  +
cmp eax edi +
jb loc_1004FD5  +
cmp dword ptr [esi+1Ch] 0 +
jz loc_1004F5F  +
push [ebp+arg_8]  +
mov ecx esi +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1004D75  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
lea edi [esi+20h] +
push dword ptr [edi+4]  +
mov [esi+10h] ecx +
push dword ptr [edi]  +
mov ecx esi +
call sub_10048AF  +
lea eax [esi+14h] +
push eax  +
push edi  +
mov ecx esi +
call sub_1004E3F  +
push [ebp+arg_8]  +
mov ecx esi +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1004EE5  +
jmp loc_1004A3C  +
lea ebx [esi+20h] +
push dword ptr [ebx+4]  +
mov ecx esi +
push dword ptr [ebx]  +
call sub_10048AF  +
lea eax [esi+14h] +
push eax  +
push ebx  +
mov ecx esi +
call sub_1004E3F  +
cmp [ebx] edi +
jnz loc_1004F15  +
cmp dword ptr [ebx+4] 0 +
jnz loc_1004F15  +
mov dword ptr [esi+10h] 3 +
jmp loc_1004F15  +
push [ebp+arg_8]  +
push ecx  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1004870  +
jmp loc_1004F25  +
mov ebx 0FFFE0000h +
add ecx ebx +
adc eax 0FFFFFFFFh +
push eax  +
push ecx  +
mov ecx esi +
call sub_10048AF  +
mov ecx [edi] +
sub ecx [esi+30h] +
mov eax [ebp+arg_4] +
add ecx 20000h +
add [eax] ecx +
mov eax [esi+30h] +
mov ecx [esi+34h] +
add eax ebx +
adc ecx 0FFFFFFFFh +
mov [edi] eax +
mov [edi+4] ecx +
jmp loc_1004E94  +
push 0  +
push edi  +
mov ecx esi +
call sub_10048AF  +
lea eax [esi+20h] +
and dword ptr [eax+4] 0 +
push ebx  +
push eax  +
mov ecx esi +
mov [eax] edi +
call sub_1004E3F  +
jmp loc_1004F84  +
***
cmp dword ptr [esi+10h] 3 +
jz loc_1005087  +
mov ecx esi +
call sub_100500E  +
jmp loc_1004D84  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1005042  +
test eax eax +
jnz loc_100503B  +
lea eax [esi+20h] +
add dword ptr [eax] 20000h +
lea ecx [esi+14h] +
push ecx  +
adc dword ptr [eax+4] 0 +
mov dword ptr [ecx] 10000h +
push eax  +
mov ecx esi +
call sub_1004E3F  +
pop esi  +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
push edi  +
cmp [esi+28h] ebx +
jz loc_100507C  +
mov edi [esi+14h] +
push ebx  +
push edi  +
call sub_1004D50  +
test eax eax +
jnz loc_1005A98  +
xor eax eax +
lea ecx [edi-10000h] +
add ecx [esi+20h] +
adc eax [esi+24h] +
cmp eax [esi+34h] +
jb loc_100507C  +
ja loc_1005082  +
cmp ecx [esi+30h] +
jnb loc_1005082  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
retn   +
xor eax eax +
inc eax  +
jmp loc_100507E  +
***
mov dword ptr [esi+10h] 4 +
jmp loc_1004FFD  +
cmp ecx [esi+34h] +
jnz loc_1004DB7  +
jmp loc_1004DC5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
ja loc_100558E  +
mov eax [ebp+arg_0] +
jb loc_10050C3  +
cmp eax 0FFFFFFFFh +
ja loc_100558E  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_4] +
add eax ecx +
cmp eax ecx +
jb loc_100559E  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov eax [ebp-14h] +
cmp eax edi +
jz loc_10057B8  +
cmp [ebp-4Ch] edi +
jl loc_1004678  +
push 2  +
lea edx [eax+2] +
pop esi  +
mov cx [eax] +
add eax esi +
cmp cx di +
jnz loc_100510D  +
sub eax edx +
sar eax 1 +
jz loc_1004678  +
lea ecx [ebp-54h] +
push ecx  +
push 1  +
push eax  +
mov [ebp-54h] edi +
call sub_10050D3  +
cmp eax edi +
mov [ebp-4Ch] eax +
jl loc_1004678  +
lea eax [ebp-50h] +
push eax  +
mov eax [ebp-54h] +
mul  esi +
push edx  +
push eax  +
mov [ebp-50h] edi +
call sub_10050A6  +
cmp eax edi +
mov [ebp-4Ch] eax +
jl loc_1004678  +
push dword ptr [ebp-50h]  +
call ds:CoTaskMemAlloc  +
push dword ptr [ebp-14h]  +
mov [ebx+24h] eax +
push dword ptr [ebp-50h]  +
push eax  +
call sub_100517E  +
mov [ebp-4Ch] eax +
jmp loc_1004678  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
shr ecx 1 +
push 0  +
pop eax  +
jz loc_10051DD  +
cmp ecx 7FFFFFFFh +
ja loc_10051DD  +
test eax eax +
jl loc_10051D9  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_10051E4  +
mov edx [ebp+arg_8] +
push edi  +
mov edi 7FFFFFFEh +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_10051CB  +
movzx ecx word ptr [edx+eax] +
test cx cx +
jz loc_10051CB  +
mov [eax] cx +
inc eax  +
inc eax  +
dec esi  +
jnz loc_10051B3  +
pop edi  +
test esi esi +
jz loc_10051E4  +
xor ecx ecx +
mov [eax] cx +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
mov eax 80070057h +
jmp loc_1005195  +
dec eax  +
dec eax  +
mov ebx 8007007Ah +
jmp loc_10051D0  +
***
sub dword ptr [esp+4] 8 +
jmp loc_1004028  +
***
sub dword ptr [esp+4] 8 +
jmp loc_100400D  +
***
sub dword ptr [esp+4] 8 +
jmp loc_100436D  +
***
mov eax [esi+14h] +
cmp eax 10000h +
jb loc_1005CEA  +
xor edx edx +
add eax [esi+20h] +
mov esi [esi+24h] +
adc esi edx +
add eax 0FFFF0000h +
adc esi 0FFFFFFFFh +
mov [ecx] eax +
mov [ecx+4] esi +
jmp loc_1004C90  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_1005265  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_1005280  +
push ecx  +
call sub_1001511  +
pop ebp  +
retn 8  +
***
sub ecx eax +
push ebx  +
mov eax [esp+arg_4] +
mov eax [ebp-14h] +
mov esp [ebp-18h] +
mov dword ptr [ebp-1Ch] 8007000Eh +
jmp loc_100224B  +
***
mov eax 80004003h +
jmp loc_10033AD  +
mov eax 8007000Eh +
jmp loc_10033AC  +
call sub_1003252  +
push dword ptr [esi]  +
mov [ebp+var_4] eax +
call ds:__imp_free  +
and dword ptr [esi] 0 +
pop ecx  +
jmp loc_10033A9  +
***
xor eax eax +
jmp loc_1003341  +
call sub_1003252  +
push dword ptr [esi]  +
mov [ebp+pSourceSid] eax +
call ebx  +
and dword ptr [esi] 0 +
pop ecx  +
jmp loc_100333E  +
call sub_1003252  +
mov [ebp+pSourceSid] eax +
jmp loc_100333E  +
***
xor eax eax +
jmp loc_1003758  +
call sub_1003252  +
push dword ptr [esi]  +
mov [ebp+pSourceSid] eax +
call ebx  +
and dword ptr [esi] 0 +
pop ecx  +
jmp loc_1003755  +
call sub_1003252  +
mov [ebp+pSourceSid] eax +
jmp loc_1003755  +
***
push eax  +
call sub_1009411  +
mov [ebp+var_4] eax +
jmp loc_10031B6  +
push eax  +
call sub_1009411  +
mov [ebp+var_4] eax +
jmp loc_1003214  +
mov eax [ebp+arg_4] +
cmp eax ebx +
jz loc_10054CA  +
push dword ptr [eax]  +
call ds:__imp_free  +
mov eax [ebp+arg_4] +
pop ecx  +
mov [eax] ebx +
mov eax [ebp+arg_8] +
cmp eax ebx +
jz loc_100321D  +
push dword ptr [eax]  +
call ds:__imp_free  +
mov eax [ebp+arg_8] +
pop ecx  +
mov [eax] ebx +
jmp loc_100321D  +
***
mov eax 80004003h +
jmp loc_10026F2  +
push 2  +
push 0Ch  +
lea eax [ebp+pAclInformation] +
push eax  +
push [ebp+pAcl]  +
call ds:GetAclInformation  +
test eax eax +
jnz loc_1005511  +
call sub_1003252  +
jmp loc_10026F2  +
cmp [ebp+pAclInformation] esi +
jbe loc_10026F0  +
lea eax [ebp+pAceList] +
push eax  +
push esi  +
push [ebp+pAcl]  +
call ds:GetAce  +
test eax eax +
jz loc_1005507  +
mov eax [ebp+pAceList] +
movzx ecx word ptr [eax+2] +
push ecx  +
push eax  +
push 0FFFFFFFFh  +
push 2  +
push [ebp+arg_0]  +
call ds:AddAce  +
test eax eax +
jz loc_1005507  +
inc esi  +
cmp esi [ebp+pAclInformation] +
jnb loc_10026F0  +
jmp loc_100551A  +
***
mov eax 80004003h +
jmp loc_10026A5  +
push 2  +
push 0Ch  +
lea eax [ebp+pAclInformation] +
push eax  +
push esi  +
call ds:GetAclInformation  +
test eax eax +
jnz loc_1002636  +
call sub_1003252  +
jmp loc_10026AB  +
mov [ebp+arg_0] eax +
jmp loc_1002697  +
push esi  +
call edi  +
pop ecx  +
jmp loc_10026A1  +
***
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
jmp loc_10050CA  +
***
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
jmp loc_10050EF  +
***
push eax  +
call ds:__imp_free  +
pop ecx  +
jmp loc_1002EF3  +
***
mov [eax+24h] ecx +
mov [eax+28h] cl +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
mov [eax+18h] ecx +
jmp loc_1002AAF  +
***
xor eax eax +
jmp loc_1002ADE  +
***
xor eax eax +
jmp loc_1001EE8  +
***
call ds:GetCurrentThread  +
push eax  +
call ds:GetThreadTimes  +
jmp loc_1003F1C  +
call ds:GetLastError  +
test eax eax +
jle loc_1005603  +
and eax 0FFFFh +
or eax 80070000h +
mov [esi+18h] eax +
jmp loc_1003F38  +
***
mov eax 8007007Fh +
pop ebp  +
retn 4  +
***
push eax  +
push 41h  +
push dword ptr [ebp+8]  +
call sub_100C4EA  +
jmp loc_10032D6  +
***
mov byte_1014548 1 +
jmp loc_1002B21  +
***
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_100563A +
retn   +
***
mov esi [ebp-14h] +
xor ebx ebx +
jmp loc_1002B82  +
***
call sub_1003252  +
push dword ptr [esi]  +
mov edi eax +
call off_1014494  +
mov [esi] ebx +
mov eax edi +
jmp loc_1002B9B  +
***
call sub_1003252  +
mov ebx eax +
jmp loc_10025E6  +
***
call sub_1003252  +
mov esi eax +
jmp loc_100311B  +
***
push esi  +
push edi  +
push [ebp+TokenHandle]  +
call sub_1003128  +
push [ebp+TokenHandle]  +
mov esi eax +
call ds:CloseHandle  +
jmp loc_1002BF1  +
***
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_10056AC +
retn   +
mov edi [ebp+0Ch] +
xor esi esi +
jmp loc_10024AF  +
***
call sub_1003252  +
push dword ptr [edi]  +
mov ebx eax +
call ds:__imp_free  +
pop ecx  +
mov [edi] esi +
jmp loc_10024E8  +
push eax  +
call sub_1009411  +
mov ebx eax +
jmp loc_10024F1  +
***
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
jmp loc_10021E0  +
***
mov eax [ebp-154h] +
mov dword_10144B8 eax +
jmp loc_1002E3A  +
***
push edi  +
call sub_1009632  +
and dword ptr [esi+0Ch] 0 +
jmp loc_100207F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_100208A  +
***
mov ecx ebx +
call sub_1002B2B  +
jmp loc_10036E8  +
***
mov edi [edi+18h] +
mov esi 80041701h +
test edi edi +
jz loc_1004B2A  +
mov eax [edi] +
lea ecx [ebp-14h] +
push ecx  +
push edi  +
call dword ptr [eax+0Ch]  +
test eax eax +
jl loc_1004B2A  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
call ds:StringFromCLSID  +
test eax eax +
jl loc_1004B2A  +
push dword ptr [ebp-18h]  +
call ds:CoTaskMemFree  +
jmp loc_1004B2A  +
***
mov dword ptr [ebp-4Ch] 8000000Ah +
mov eax [ebp-4Ch] +
jmp loc_10045F4  +
***
mov eax [esi+18h] +
mov dword ptr [ebp-4Ch] 80041700h +
cmp eax edi +
jz loc_1004678  +
mov ecx [eax] +
lea edx [ebp-48h] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
test eax eax +
jl loc_1004678  +
lea eax [ebp-5Ch] +
push eax  +
lea eax [ebp-48h] +
push eax  +
call ds:StringFromCLSID  +
test eax eax +
jl loc_1004678  +
push dword ptr [ebp-5Ch]  +
call ds:CoTaskMemFree  +
jmp loc_1004655  +
***
mov dword ptr [ebp-4Ch] 80041703h +
jmp loc_10050FE  +
***
mov eax 8000000Ah +
jmp loc_1004861  +
***
call sub_10013D5  +
jmp loc_100147C  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_10040FB  +
***
mov eax 80004003h +
jmp loc_1001576  +
push dword ptr [esi+4]  +
push ebx  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call edi  +
test eax eax +
jz loc_1001576  +
cmp [ebp+arg_4] 0 +
jz loc_10015B3  +
jmp loc_100156C  +
***
mov eax 8000000Ah +
jmp loc_1004BE5  +
***
mov eax offset loc_1005835 +
retn   +
mov esi [ebp+8] +
xor edi edi +
mov eax edi +
jmp loc_100453E  +
***
mov eax offset loc_1005851 +
retn   +
mov esi [ebp+8] +
xor edi edi +
mov eax edi +
jmp loc_100417F  +
***
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_1005871 +
retn   +
mov edi [ebp+8] +
mov esi [ebp-14h] +
jmp loc_1002842  +
***
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+10h]  +
xor esi esi +
jmp loc_1002862  +
***
push dword ptr [ebp+10h]  +
mov ecx [eax] +
push dword ptr [ebp+8]  +
push eax  +
call dword ptr [ecx+0Ch]  +
jmp loc_100447F  +
***
mov eax 80004003h +
jmp loc_1003EAB  +
***
mov eax dword_1014110 +
mov edx dword_1014114 +
mov ecx eax +
and ecx esi +
and edx edi +
cmp ecx eax +
jnz loc_1001724  +
cmp edx dword_1014114 +
jnz loc_1001724  +
call ds:GetCurrentProcessId  +
push eax  +
push offset dword_1005A78  +
push dword_1014084  +
push dword_1014080  +
call sub_10094E1  +
jmp loc_1001724  +
mov [ebp+var_9A4] 80070667h +
jmp loc_1001793  +
mov [ebp+var_9A4] 8007000Eh +
jmp loc_10017D4  +
call sub_1003252  +
mov [ebp+var_9A4] eax +
jmp loc_10018B7  +
call sub_1003252  +
mov [ebp+var_9A4] eax +
jmp loc_10018E3  +
call sub_1003252  +
mov [ebp+var_9A4] eax +
jmp loc_100190F  +
mov [ebp+var_9A4] 80070057h +
jmp loc_100193E  +
call sub_1003252  +
mov [ebp+var_9A4] eax +
jmp loc_100196A  +
mov [ebp+var_9A4] 80028016h +
jmp loc_1001A60  +
call sub_1003252  +
mov [ebp+var_9A4] eax +
jmp loc_1001A8C  +
push edi  +
call ds:GlobalFree  +
jmp loc_1001AB6  +
call sub_1003252  +
mov [ebp+var_9A4] eax +
jmp loc_1001B19  +
call sub_1003252  +
mov [ebp+var_9A4] eax +
jmp loc_1001B3B  +
call sub_1003252  +
mov [ebp+var_9A4] eax +
jmp loc_1001B7C  +
call sub_1003252  +
mov [ebp+var_9A4] eax +
jmp loc_1001BAA  +
call sub_1003252  +
mov [ebp+var_9A4] eax +
jmp loc_1001BD1  +
push 3  +
push offset SourceName  +
lea ecx [ebp+var_60] +
call sub_100DB80  +
lea eax [ebp+var_60] +
push eax  +
lea ecx [ebp+var_9A0] +
call sub_100967C  +
push [ebp+var_9A4]  +
lea ecx [ebp+var_9A0] +
call sub_100CB65  +
push ebx  +
lea eax [ebp+var_9A0] +
push 0C0000C1Ch  +
push eax  +
call sub_10094C4  +
add esp 0Ch +
lea ecx [ebp+var_9A0] +
call sub_10096B3  +
lea ecx [ebp+var_60] +
call sub_100DBA8  +
jmp loc_1001BD1  +
mov eax dword_1014110 +
mov ecx eax +
and ecx esi +
mov esi dword_1014114 +
mov edx esi +
and edx edi +
cmp ecx eax +
jnz loc_1001CAD  +
cmp edx esi +
jnz loc_1001CAD  +
call ds:GetCurrentProcessId  +
push eax  +
push offset dword_1005A88  +
push dword_1014084  +
push dword_1014080  +
call sub_10094E1  +
jmp loc_1001CAD  +
***
cmp ebx [esi+34h] +
jb loc_100507C  +
ja loc_1005082  +
cmp edi [esi+30h] +
jmp loc_100507A  +
***
dec eax  +
jz loc_1005B9F  +
dec eax  +
jz loc_1005AE7  +
push 80030001h  +
push 201h  +
push offset aDW7rtmEnduserM  +
lea ecx [ebp+var_50] +
call sub_100BF3B  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
movs   +
push offset dword_10126DC  +
lea eax [ebp+var_10] +
push eax  +
call _CxxThrowException  +
cmp [esi+28h] ecx +
jnz loc_1005B16  +
push 80030001h  +
push 1F4h  +
push offset aDW7rtmEnduserM  +
lea ecx [ebp+var_60] +
call sub_100BF3B  +
mov esi eax +
lea edi [ebp+var_20] +
movs   +
movs   +
movs   +
movs   +
push offset dword_10126DC  +
lea eax [ebp+var_20] +
jmp loc_1005AE1  +
cmp [ebp+arg_4] ecx +
mov ebx [ebp+arg_0] +
jg loc_1005B3D  +
jl loc_1005B24  +
cmp ebx ecx +
jnb loc_1005B3D  +
mov edi [esi+30h] +
mov edx [esi+34h] +
mov ecx edi +
add ecx ebx +
mov eax edx +
adc eax [ebp+arg_4] +
cmp eax edx +
ja loc_1005B62  +
jb loc_1005B3D  +
cmp ecx edi +
ja loc_1005B62  +
cmp [ebp+arg_4] 0 +
jl loc_1005B8F  +
jg loc_1005B49  +
test ebx ebx +
jbe loc_1005B8F  +
mov edi [esi+30h] +
mov edx [esi+34h] +
mov ecx edi +
add ecx ebx +
mov eax edx +
adc eax [ebp+arg_4] +
cmp eax edx +
ja loc_1005B8F  +
jb loc_1005B62  +
cmp ecx edi +
jnb loc_1005B8F  +
push 80030009h  +
push 1FAh  +
push offset aDW7rtmEnduserM  +
lea ecx [ebp+var_70] +
call sub_100BF3B  +
mov esi eax +
lea edi [ebp+var_30] +
movs   +
movs   +
movs   +
movs   +
push offset dword_10126DC  +
lea eax [ebp+var_30] +
jmp loc_1005AE1  +
mov eax [esi+30h] +
mov ecx [esi+34h] +
add eax ebx +
adc ecx [ebp+arg_4] +
jmp loc_1004C13  +
mov edi [esi+14h] +
xor ebx ebx +
push ebx  +
push edi  +
mov ecx esi +
call sub_1004D50  +
test eax eax +
jz loc_1005BB7  +
mov eax edi +
mov ecx ebx +
jmp loc_1005BC9  +
mov eax [esi+20h] +
mov ecx [esi+24h] +
add eax edi +
adc ecx ebx +
add eax 0FFFF0000h +
adc ecx 0FFFFFFFFh +
cmp [ebp+arg_4] ebx +
mov ebx [ebp+arg_0] +
jg loc_1005BEA  +
jl loc_1005BD7  +
test ebx ebx +
jnb loc_1005BEA  +
mov edi eax +
add edi ebx +
mov edx ecx +
adc edx [ebp+arg_4] +
cmp edx ecx +
ja loc_1005C09  +
jb loc_1005BEA  +
cmp edi eax +
ja loc_1005C09  +
cmp [ebp+arg_4] 0 +
jl loc_1005B95  +
jg loc_1005BF6  +
test ebx ebx +
jbe loc_1005B95  +
mov edi eax +
add edi ebx +
mov edx ecx +
adc edx [ebp+arg_4] +
cmp edx ecx +
ja loc_1005B95  +
jb loc_1005C09  +
cmp edi eax +
jnb loc_1005B95  +
push 80030009h  +
push 1EBh  +
push offset aDW7rtmEnduserM  +
lea ecx [ebp+var_80] +
call sub_100BF3B  +
mov esi eax +
lea edi [ebp+var_40] +
movs   +
movs   +
movs   +
movs   +
push offset dword_10126DC  +
lea eax [ebp+var_40] +
jmp loc_1005AE1  +
push 80030009h  +
push 206h  +
jmp loc_1005C13  +
***
push eax  +
push 240h  +
push offset aDW7rtmEnduserM  +
lea ecx [ebp+var_20] +
call sub_100BF3B  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push offset dword_10126DC  +
lea eax [ebp+var_10] +
push eax  +
movs   +
call _CxxThrowException  +
xor eax eax +
jmp loc_10048FF  +
***
mov eax 8000000Ah +
jmp loc_1004BB5  +
***
push 80004003h  +
push 58h  +
push offset aDW7rtmEnduserM  +
lea ecx [ebp+var_20] +
call sub_100BF3B  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push offset dword_10126DC  +
lea eax [ebp+var_10] +
push eax  +
movs   +
call _CxxThrowException  +
push eax  +
push 60h  +
jmp loc_1005C84  +
***
mov eax [ebp-18h] +
mov eax [eax] +
mov [ebp-14h] eax +
mov eax offset loc_1004C90 +
retn   +
***
cmp dword ptr [esi+28h] 0 +
jz loc_1004DB7  +
cmp eax [esi+30h] +
jz loc_1005093  +
jmp loc_1004DB7  +
***
mov eax [ebp-1Ch] +
mov eax [eax] +
mov [ebp-18h] eax +
mov eax offset loc_10049AF +
retn   +
***
push edi  +
mov ecx ebx +
call sub_100BF6B  +
movzx eax word ptr [eax] +
push dword ptr [ebp+0Ch]  +
push eax  +
call ds:UnregisterClassA  +
inc edi  +
cmp edi [esi+24h] +
jl loc_1005D74  +
pop ebx  +
jmp loc_10020EE  +
***
mov byte_1014548 1 +
and dword ptr [esi] 0 +
jmp loc_10037D5  +
***
cmp [ebp+VersionInformation.dwMajorVersion] 4 +
ja loc_1003897  +
jz loc_10038D7  +
jmp loc_100389B  +
mov byte_1014548 1 +
jmp loc_10038B9  +
***
mov eax [ebp-14h] +
mov esp [ebp-18h] +
mov eax [ebp-20h] +
mov dword_1014038 eax +
xor ebx ebx +
cmp dword_101402C ebx +
jnz loc_1005E54  +
push eax  +
call ds:_exit  +
***
cmp dword_1014570 ebx +
jnz loc_1005E62  +
call ds:_cexit  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov eax dword_1014038 +
call sub_100227C  +
retn   +
***
push (offset dword_1002D10+2)  +
call ds:__setusermatherr  +
pop ecx  +
jmp loc_100399D  +
***
push 8  +
call _lock  +
pop ecx  +
and dword ptr [ebp-4] 0 +
mov eax dword_1014044 +
mov [ebp-1Ch] eax +
mov eax dword_1014040 +
mov [ebp-20h] eax +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
push dword ptr [ebp+8]  +
call __dllonexit  +
add esp 0Ch +
mov [ebp-24h] eax +
mov eax [ebp-1Ch] +
mov dword_1014044 eax +
mov eax [ebp-20h] +
mov dword_1014040 eax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1005F06  +
mov eax [ebp-24h] +
jmp loc_1003B93  +
***
pop ecx  +
xor eax eax +
mov [ebp-1Ch] eax +
jmp loc_1003A4C  +
***
push 2  +
pop eax  +
pop ebp  +
retn   +
***
test eax ebx +
jz loc_1003AB9  +
not eax  +
mov dword_1014004 eax +
jmp loc_1003B0F  +
***
call loc_100C452  +
int 3  +
call loc_100C452  +
int 3  +
call loc_100C452  +
int 3  +
push 80070057h  +
lea ecx [ebp+var_28] +
call sub_100C517  +
mov esi eax +
lea edi [ebp+var_18] +
movs   +
movs   +
movs   +
push offset dword_10126DC  +
lea eax [ebp+var_18] +
push eax  +
movs   +
call _CxxThrowException  +
push 1  +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
lea eax [ebp+var_8] +
push eax  +
lea ecx [ebp+var_4] +
call sub_1003BC1  +
mov ecx eax +
call sub_1003C18  +
push dword ptr [eax]  +
mov edx [esi] +
mov ecx esi +
call dword ptr [edx]  +
jmp loc_1002FFC  +
mov eax [esi+4] +
and dword ptr [esi+0Ch] 0 +
xor ecx ecx +
mov [eax] cx +
xor eax eax +
jmp loc_1003069  +
***
xor eax eax +
mov [edi+esi*2] ax +
jmp loc_1002553  +
***
push 6  +
jmp loc_1002D99  +
cmp [ebp+Type] 4 +
jnz loc_1002D98  +
mov eax [ebp+arg_4] +
mov ecx dword ptr [ebp+Data] +
mov [eax] ecx +
xor eax eax +
inc eax  +
jmp loc_1002D9D  +
***
and dword ptr [edi] 0 +
push eax  +
call ds:SetLastError  +
jmp loc_100350B  +
***
mov eax [ebp-14h] +
mov eax [ebp-18h] +
mov eax [eax] +
mov [ebp+10h] eax +
mov eax offset loc_100362F +
retn   +
***
xor esi esi +
jmp loc_1002931  +
***
cmp eax ebx +
jle loc_1002412  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1002412  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1006090  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
push edi  +
jmp loc_1002406  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_10060AC  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
mov eax [ebp+0Ch] +
push edi  +
mov [eax] ebx +
mov byte ptr [ebp-4] 2 +
call off_1014494  +
jmp loc_10023EA  +
mov eax [ebp+0Ch] +
mov [eax] ebx +
mov byte ptr [ebp-4] 2 +
cmp edi ebx +
jz loc_10060D7  +
push edi  +
call off_1014494  +
mov byte ptr [ebp-4] 1 +
cmp [ebp+8] ebx +
jz loc_10060E9  +
push dword ptr [ebp+8]  +
call off_1014494  +
mov [ebp-4] bl +
cmp [ebp-10h] ebx +
jz loc_10060FA  +
push dword ptr [ebp-10h]  +
call off_1014494  +
push dword ptr [ebp-14h]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
call off_1014494  +
jmp loc_100241A  +
***
push eax  +
call ds:CloseHandle  +
test eax eax +
jnz locret_100215E  +
jmp ds:GetLastError  +
***
retf 0  +
***
retn   +
***
retn 0  +
***
retf   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jle loc_1009427  +
and eax 0FFFFh +
or eax 80070000h +
pop ebp  +
retn 4  +
***
cmp byte ptr [ecx+18h] 0 +
jz locret_1009441  +
push ecx  +
mov byte ptr [ecx+18h] 0 +
call ds:DeleteCriticalSection  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call off_1014498  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call off_1014494  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ecx+0Ch] +
xor eax eax +
push eax  +
push eax  +
push [ebp+cchMultiByte]  +
inc edx  +
push [ebp+lpMultiByteStr]  +
push edx  +
push dword ptr [ecx+4]  +
push eax  +
push eax  +
call ds:WideCharToMultiByte  +
pop ebp  +
retn 8  +
***
mov edx [ecx+0Ch] +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
inc edx  +
push edx  +
push dword ptr [ecx+4]  +
push eax  +
push eax  +
call ds:WideCharToMultiByte  +
retn   +
***
call ds:DeleteCriticalSection  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
lea eax [ebp+arg_8] +
push eax  +
push 1  +
push [ebp+arg_4]  +
call sub_100CC25  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
and [ebp+var_C] 0 +
and [ebp+var_4] 0 +
lea eax [ebp+arg_C] +
mov [ebp+var_10] eax +
lea eax [ebp+var_10] +
push eax  +
push 1  +
push [ebp+arg_8]  +
mov [ebp+var_8] 4 +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:EventWrite  +
leave   +
retn 10h  +
***
mov eax 80004005h +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push 0  +
push dword ptr [ebp+0Ch]  +
add eax 4 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ecx+10h] +
push eax  +
push 7FFFh  +
push 41h  +
push dword ptr [ebp+8]  +
call sub_100C633  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+10h] +
push eax  +
push 401h  +
call sub_1002F25  +
mov dword ptr [esi] offset off_1002A34 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ecx+10h] +
push eax  +
push 100000h  +
push 400h  +
push dword ptr [ebp+8]  +
call sub_100C633  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ecx+10h] +
cmp [ecx+4] eax +
jz loc_10095D0  +
push eax  +
push 400h  +
push dword ptr [ebp+8]  +
call sub_100C4EA  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+10h] +
push eax  +
mov dword ptr [esi] offset off_1002A34 +
call sub_1002EDE  +
mov dword ptr [esi] offset off_1002F4C +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10095D9  +
test byte ptr [ebp+8] 1 +
jz loc_1009614  +
push esi  +
call off_1014494  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax [ecx] +
test eax eax +
jz locret_100962C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+lpArguments] +
push esi  +
test ebx ebx +
jnz loc_100964F  +
push ebx  +
push ebx  +
push 1  +
push 0C0000005h  +
call ds:RaiseException  +
mov esi [ebx+8] +
test esi esi +
jz loc_100966D  +
push edi  +
push dword ptr [esi+4]  +
call dword ptr [esi]  +
mov edi [esi+8] +
push esi  +
call off_1014494  +
mov esi edi +
test edi edi +
jnz loc_1009657  +
pop edi  +
and dword ptr [ebx+8] 0 +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
mov [esi] eax +
call sub_1003288  +
lea ecx [esi+98h] +
call sub_1003288  +
lea ecx [esi+12Ch] +
call sub_100956F  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+12Ch] +
call sub_10095D9  +
lea ecx [esi+98h] +
call sub_1002EBD  +
lea ecx [esi+4] +
pop esi  +
jmp sub_1002EBD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mul  [ebp+arg_8] +
test edx edx +
ja loc_1009700  +
cmp eax 0FFFFFFFFh +
jbe loc_1009707  +
mov eax 80070057h +
jmp loc_100970E  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_4]  +
and [ebp+cb] 0 +
push [ebp+arg_0]  +
lea eax [ebp+cb] +
push eax  +
call sub_10096EC  +
test eax eax +
jge loc_1009738  +
xor eax eax +
jmp locret_1009741  +
push [ebp+cb]  +
call ds:CoTaskMemAlloc  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_8]  +
and [ebp+cb] 0 +
push [ebp+arg_4]  +
lea eax [ebp+cb] +
push eax  +
call sub_10096EC  +
test eax eax +
jge loc_100976B  +
xor eax eax +
jmp locret_1009777  +
push [ebp+cb]  +
push [ebp+pv]  +
call ds:CoTaskMemRealloc  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call ds:malloc  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call ds:__imp_free  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpString]  +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
push eax  +
push [ebp+lpString]  +
mov eax [ebp+arg_4] +
add eax eax +
push eax  +
push [ebp+arg_0]  +
call memcpy_s  +
add esp 10h +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov [ebp+8] eax +
push offset dword_1009800  +
lea eax [ebp+8] +
push eax  +
call _CxxThrowException  +
int 3  +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_100984D  +
cmp eax 0Ch +
jz loc_1009846  +
cmp eax 16h +
jz loc_100983F  +
cmp eax 22h +
jz loc_100983F  +
cmp eax 50h +
jz loc_100984D  +
push 80004005h  +
call loc_10097E5  +
push 80070057h  +
jmp loc_100983A  +
push 8007000Eh  +
jmp loc_100983A  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call memcpy_s  +
add esp 10h +
push eax  +
call sub_1009815  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call wcsncpy_s  +
add esp 10h +
push eax  +
call sub_1009815  +
pop ebp  +
retn   +
***
mov eax [ecx+8] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+8] +
push edi  +
xor edi edi +
cmp ebx edi +
jnz loc_10098C2  +
mov eax 80004003h +
jmp loc_10098F3  +
push esi  +
lea esi [ecx+28h] +
cmp [esi] edi +
jnz loc_10098E4  +
push esi  +
push offset dword_100990C  +
push 1  +
push edi  +
push offset dword_10098FC  +
call ds:CoCreateInstance  +
mov edi eax +
test edi edi +
jl loc_10098F0  +
mov eax [esi] +
mov [ebx] eax +
mov esi [esi] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
mov eax edi +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jz loc_100996F  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea edi [ebx-1] +
xor eax eax +
test edi edi +
jbe loc_1009967  +
mov edx [ebp+arg_8] +
movzx ecx word ptr [edx] +
test cx cx +
jz loc_1009967  +
mov [esi+eax*2] cx +
cmp word ptr [edx] 27h +
jnz loc_1009960  +
lea ecx [ebx-2] +
cmp eax ecx +
jnb loc_1009960  +
push 27h  +
inc eax  +
pop ecx  +
mov [esi+eax*2] cx +
inc edx  +
inc edx  +
inc eax  +
cmp eax edi +
jb loc_100993F  +
xor ecx ecx +
pop edi  +
mov [esi+eax*2] cx +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov eax 80004005h +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi+4] 0 +
jnz loc_10099D8  +
cmp dword ptr [esi+8] 0 +
jnz loc_10099D8  +
push offset aApiMsWinCoreLo  +
call ds:GetModuleHandleW  +
test eax eax +
jz loc_10099BA  +
push offset ProcName  +
push eax  +
call ds:GetProcAddress  +
mov [esi+4] eax +
jmp loc_10099D8  +
push offset LibFileName  +
call ds:LoadLibraryW  +
test eax eax +
jz loc_10099D8  +
push offset aRegdeletekeyw  +
push eax  +
call ds:GetProcAddress  +
mov [esi+8] eax +
mov eax [esi+4] +
test eax eax +
jz loc_10099EC  +
push 0  +
push 0  +
push [ebp+arg_0]  +
push dword ptr [esi]  +
call eax  +
jmp loc_1009A02  +
mov eax [esi+8] +
test eax eax +
jz loc_10099FC  +
push [ebp+arg_0]  +
push dword ptr [esi]  +
call eax  +
jmp loc_1009A02  +
call ds:GetLastError  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
xor eax eax +
test ecx ecx +
jz loc_1009AB6  +
push ecx  +
call ds:RegCloseKey  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
and [ebp+phkResult] 0 +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [ebp+phkResult] +
push eax  +
push [ebp+dwDisposition]  +
mov esi ecx +
push [ebp+samDesired]  +
push [ebp+dwOptions]  +
push [ebp+lpClass]  +
push 0  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegCreateKeyExW  +
mov ecx [ebp+arg_18] +
test ecx ecx +
jz loc_1009AF8  +
mov edx [ebp+dwDisposition] +
mov [ecx] edx +
test eax eax +
jnz loc_1009B08  +
mov ecx esi +
call sub_1009A9F  +
mov ecx [ebp+phkResult] +
mov [esi] ecx +
pop esi  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+phkResult] 0 +
push esi  +
lea eax [ebp+phkResult] +
push eax  +
push [ebp+samDesired]  +
mov esi ecx +
push 0  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_1009B44  +
mov ecx esi +
call sub_1009A9F  +
mov ecx [ebp+phkResult] +
mov [esi] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 4  +
lea eax [ebp+Data] +
push eax  +
push 4  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [ecx]  +
call ds:RegSetValueExW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpData] 0 +
push esi  +
mov esi ecx +
jnz loc_1009B89  +
push 80004005h  +
call loc_10097E5  +
push [ebp+lpData]  +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
push eax  +
push [ebp+lpData]  +
push [ebp+dwType]  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [esi]  +
call ds:RegSetValueExW  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+lpData] +
push edi  +
mov ebx ecx +
test esi esi +
jnz loc_1009BCF  +
push 80004005h  +
call loc_10097E5  +
xor edi edi +
push esi  +
call ds:lstrlenW  +
inc eax  +
lea ecx [eax+eax] +
add esi ecx +
add edi ecx +
cmp eax 1 +
jnz loc_1009BD1  +
push edi  +
push [ebp+lpData]  +
push 7  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [ebx]  +
call ds:RegSetValueExW  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpString2]  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
neg eax  +
sbb al al +
inc al  +
pop ebp  +
retn 8  +
***
mov eax [ecx] +
push 27h  +
pop ecx  +
cmp cx [eax] +
jnz loc_1009C41  +
push eax  +
call ds:CharNextW  +
push 27h  +
pop ecx  +
cmp cx [eax] +
jz loc_1009C41  +
xor eax eax +
inc eax  +
retn   +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 64h +
push esi  +
mov esi ecx +
jge loc_1009C5E  +
mov eax 3E8h +
and dword ptr [esi] 0 +
push 2  +
push eax  +
mov [esi+4] eax +
call sub_1009717  +
mov [esi+8] eax +
test eax eax +
jz loc_1009C78  +
xor ecx ecx +
mov [eax] cx +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
adc eax offset CoTaskMemFree +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi ecx +
mov eax [esi] +
lea ecx [eax+ebx+1] +
cmp ecx eax +
push edi  +
jle loc_1009D18  +
cmp ecx ebx +
jle loc_1009D18  +
mov edi [esi+4] +
cmp ecx edi +
jl loc_1009CD8  +
cmp edi 3FFFFFFFh +
jg loc_1009D18  +
add edi edi +
cmp ecx edi +
jge loc_1009CB5  +
push 2  +
push edi  +
push dword ptr [esi+8]  +
call sub_100974A  +
test eax eax +
jz loc_1009D18  +
mov [esi+8] eax +
mov [esi+4] edi +
mov eax [esi] +
test eax eax +
jl loc_1009D18  +
mov edx [esi+4] +
cmp eax edx +
jge loc_1009D18  +
mov ecx edx +
sub ecx eax +
cmp ecx edx +
jg loc_1009D18  +
lea edx [ebx+ebx] +
push edx  +
push [ebp+arg_0]  +
add ecx ecx +
push ecx  +
mov ecx [esi+8] +
lea eax [ecx+eax*2] +
push eax  +
call sub_1009856  +
add [esi] ebx +
mov eax [esi] +
mov ecx [esi+8] +
xor edx edx +
mov [ecx+eax*2] dx +
xor eax eax +
add esp 10h +
inc eax  +
jmp loc_1009D1A  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr dword_101456C 1 +
jnz loc_1009D89  +
or dword_101456C 1 +
push 8  +
pop eax  +
mov word_1014550 ax +
mov eax 4008h +
push 13h  +
mov word_1014558 ax +
pop eax  +
push 11h  +
mov word_1014560 ax +
pop eax  +
mov lpString2 offset dword_1009DCC +
mov dword_1014554 offset dword_1009DC8 +
mov dword_101455C offset dword_1009DC4 +
mov dword_1014564 offset dword_1009DC0 +
mov word_1014568 ax +
push esi  +
xor esi esi +
push lpString2[esi*8]  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
test eax eax +
jz loc_1009DAD  +
inc esi  +
cmp esi 4 +
jb loc_1009D8C  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
mov ax word_1014550[esi*8] +
mov ecx [ebp+arg_4] +
mov [ecx] ax +
xor eax eax +
inc eax  +
jmp loc_1009DA8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_0] +
cmp eax 30h +
jl loc_1009E09  +
cmp eax 39h +
jle loc_1009E04  +
cmp eax 40h +
jle loc_1009E09  +
cmp eax 46h +
jle loc_1009DFF  +
lea ecx [eax-61h] +
cmp ecx 5 +
ja loc_1009E09  +
add eax 0FFFFFFA9h +
jmp loc_1009E0B  +
add eax 0FFFFFFC9h +
jmp loc_1009E0B  +
add eax 0FFFFFFD0h +
jmp loc_1009E0B  +
xor al al +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
push ds:off_1009E48[esi*8]  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
test eax eax +
jz loc_1009E3D  +
inc esi  +
cmp esi 0Eh +
jb loc_1009E1C  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
mov eax ds:dword_1009E4C[esi*8] +
jmp loc_1009E38  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+lpsz] +
push esi  +
xor esi esi +
test eax eax +
jz loc_1009EE9  +
jmp loc_1009EDB  +
cmp cx [ebp+arg_4] +
jz loc_1009EE5  +
push eax  +
call ds:CharNextW  +
movzx ecx word ptr [eax] +
test cx cx +
jz loc_1009EE7  +
jmp loc_1009ECE  +
mov esi eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_0] +
cmp eax 9 +
jl loc_1009F15  +
cmp eax 0Ah +
jle loc_1009F10  +
cmp eax 0Dh +
jz loc_1009F10  +
cmp eax 20h +
jnz loc_1009F15  +
xor eax eax +
inc eax  +
jmp loc_1009F17  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
jmp loc_1009F33  +
push dword ptr [esi]  +
call ds:CharNextW  +
mov [esi] eax +
mov ecx esi +
mov eax [esi] +
movzx eax word ptr [eax] +
push eax  +
call sub_1009EF3  +
test eax eax +
jnz loc_1009F27  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
call sub_1009F20  +
mov eax [esi] +
movzx ecx word ptr [eax] +
xor edx edx +
cmp dx cx +
jnz loc_1009F6D  +
mov eax 80020009h +
jmp loc_100A04D  +
push ebx  +
push edi  +
mov edi [ebp+arg_0] +
push 27h  +
pop edx  +
mov [ebp+var_4] edi +
cmp dx cx +
jnz loc_1009FFB  +
mov ebx ds:CharNextW +
push eax  +
call ebx  +
mov [esi] eax +
jmp loc_1009FDE  +
mov ecx esi +
call sub_1009C24  +
test eax eax +
jnz loc_1009FE5  +
mov eax [esi] +
push 27h  +
pop ecx  +
cmp cx [eax] +
jnz loc_1009FA4  +
push eax  +
call ebx  +
mov [esi] eax +
mov eax [esi] +
push eax  +
mov [ebp+arg_0] eax +
call ebx  +
mov edx [ebp+var_4] +
mov [esi] eax +
sub eax [ebp+arg_0] +
add edx 2000h +
sar eax 1 +
lea ecx [edi+eax*2+2] +
cmp ecx edx +
jnb loc_100A052  +
test eax eax +
jle loc_1009FDC  +
mov ecx [ebp+arg_0] +
mov dx [ecx] +
mov [edi] dx +
inc edi  +
inc edi  +
inc ecx  +
inc ecx  +
dec eax  +
jnz loc_1009FCF  +
mov eax [esi] +
xor ecx ecx +
cmp cx [eax] +
jnz loc_1009F8A  +
mov eax [esi] +
xor ecx ecx +
cmp cx [eax] +
jz loc_100A052  +
xor eax eax +
mov [edi] ax +
push dword ptr [esi]  +
call ebx  +
mov [esi] eax +
jmp loc_100A049  +
mov ebx [esi] +
movzx eax word ptr [ebx] +
push eax  +
mov ecx esi +
call sub_1009EF3  +
test eax eax +
jnz loc_100A044  +
push ebx  +
call ds:CharNextW  +
mov edx [ebp+var_4] +
mov [esi] eax +
sub eax ebx +
sar eax 1 +
lea ecx [edi+eax*2+2] +
add edx 2000h +
cmp ecx edx +
jnb loc_100A052  +
test eax eax +
jle loc_100A03B  +
mov cx [ebx] +
mov [edi] cx +
inc edi  +
inc edi  +
inc ebx  +
inc ebx  +
dec eax  +
jnz loc_100A02E  +
mov eax [esi] +
xor ecx ecx +
cmp cx [eax] +
jnz loc_1009FFB  +
xor eax eax +
mov [edi] ax +
xor eax eax +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 4  +
mov eax 80020009h +
jmp loc_100A04B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi offset off_100A090 +
push dword ptr [esi]  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
test eax eax +
jz loc_100A08B  +
add esi 4 +
cmp esi offset dword_100A0C0 +
jl loc_100A069  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 4  +
xor eax eax +
jmp loc_100A086  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
lea ecx [ebp+cSubKeys] +
push ecx  +
push eax  +
push eax  +
push eax  +
push [ebp+hKey]  +
mov [ebp+cSubKeys] eax +
call ds:RegQueryInfoKeyW  +
test eax eax +
jz loc_100A0EF  +
xor eax eax +
jmp locret_100A0F8  +
xor eax eax +
cmp eax [ebp+cSubKeys] +
sbb eax eax +
neg eax  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 2004h +
call __alloca_probe  +
mov eax dword_1014000 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
cmp word ptr [esi] 3Dh +
push edi  +
mov edi ecx +
jnz loc_100A156  +
push esi  +
call sub_1009F49  +
test eax eax +
jl loc_100A158  +
mov ecx edi +
call sub_1009F20  +
lea eax [ebp+var_2004] +
push eax  +
mov ecx edi +
call sub_1009F49  +
test eax eax +
jl loc_100A158  +
push esi  +
mov ecx edi +
call sub_1009F49  +
test eax eax +
jl loc_100A158  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_10012FD  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
jmp loc_100A180  +
mov eax [esi] +
mov ecx [eax] +
push eax  +
mov [esi] ecx +
call sub_1009798  +
cmp dword ptr [esi] 0 +
jnz loc_100A174  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
mov edi ds:__imp_free +
test eax eax +
jz loc_100A1A5  +
push eax  +
call edi  +
and dword ptr [esi] 0 +
pop ecx  +
mov eax [esi+4] +
test eax eax +
jz loc_100A1B4  +
push eax  +
call edi  +
and dword ptr [esi+4] 0 +
pop ecx  +
and dword ptr [esi+8] 0 +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+8] edi +
jle loc_100A24C  +
mov eax [ebp+arg_0] +
push dword ptr [eax]  +
mov eax [esi] +
push dword ptr [eax+edi*4]  +
call sub_1009C04  +
test al al +
jnz loc_100A255  +
inc edi  +
cmp edi [esi+8] +
jl loc_100A233  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
mov eax edi +
jmp loc_100A24F  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1009780  +
test eax eax +
jnz loc_100A289  +
push 8007000Eh  +
call loc_10097E5  +
mov [esi] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
lea eax [ebp+arg_4] +
push [ebp+arg_0]  +
push eax  +
call sub_10096EC  +
test eax eax +
jge loc_100A2B3  +
push eax  +
call loc_10097E5  +
mov eax [ebp+arg_4] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 224h +
mov eax dword_1014000 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
mov eax ecx +
mov ecx [ebp+lpSubKey] +
push 2001Fh  +
push ecx  +
push dword ptr [eax]  +
xor esi esi +
mov [ebp+var_21C] ecx +
lea ecx [ebp+var_214] +
mov [ebp+var_218] eax +
mov [ebp+var_214] esi +
mov [ebp+var_210] esi +
mov [ebp+var_20C] esi +
call sub_1009B12  +
mov edi eax +
cmp edi esi +
jz loc_100A331  +
lea ecx [ebp+var_214] +
call sub_1009A9F  +
mov eax edi +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_10012FD  +
leave   +
retn 4  +
mov edi ds:RegEnumKeyExW +
jmp loc_100A34F  +
lea eax [ebp+SubKey] +
push eax  +
lea ecx [ebp+var_214] +
call sub_100A2BF  +
cmp eax esi +
jnz loc_100A39A  +
lea eax [ebp+var_224] +
push eax  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+var_208] +
push eax  +
lea eax [ebp+SubKey] +
push eax  +
push esi  +
push [ebp+var_214]  +
mov [ebp+var_208] 100h +
call edi  +
test eax eax +
jz loc_100A339  +
lea ecx [ebp+var_214] +
call sub_1009A9F  +
push [ebp+var_21C]  +
mov ecx [ebp+var_218] +
call sub_1009986  +
lea ecx [ebp+var_214] +
mov esi eax +
call sub_1009A9F  +
mov eax esi +
jmp loc_100A321  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+8] edi +
jle loc_100A3E6  +
push edi  +
mov ecx esi +
call sub_100A1C0  +
push dword ptr [eax]  +
call off_1014494  +
push edi  +
mov ecx esi +
call sub_100A1F1  +
push dword ptr [eax]  +
call off_1014494  +
inc edi  +
cmp edi [esi+8] +
jl loc_100A3C0  +
mov ecx esi +
call sub_100A18C  +
pop edi  +
xor eax eax +
pop esi  +
retn   +
***
call sub_100138C  +
mov esi ecx +
xor eax eax +
cmp [ebp+8] eax +
jz loc_100A432  +
mov [ebp-10h] eax +
push dword ptr [ebp+8]  +
mov [ebp-4] eax +
call ds:lstrlenW  +
push eax  +
push dword ptr [ebp+8]  +
mov ecx esi +
call sub_1009C93  +
lea ecx [ebp-10h] +
mov esi eax +
call sub_100A16D  +
mov eax esi +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea edi [esi+10h] +
push edi  +
call ds:EnterCriticalSection  +
lea ecx [esi+4] +
call sub_100A3B3  +
push edi  +
mov esi eax +
call ds:LeaveCriticalSection  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov ecx [eax] +
push offset dword_1006368  +
push offset aAppid  +
push eax  +
call dword ptr [ecx+0Ch]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100A223  +
cmp eax 0FFFFFFFFh +
jnz loc_100A4BA  +
xor eax eax +
jmp loc_100A4C4  +
push eax  +
mov ecx esi +
call sub_100A1F1  +
mov eax [eax] +
pop esi  +
pop ebp  +
retn 4  +
***
push esi  +
mov esi ecx +
push dword ptr [esi]  +
call off_1014494  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [ecx] +
shl edx 2 +
add eax edx +
jz loc_100A510  +
push esi  +
mov esi [ebp+arg_4] +
mov esi [esi] +
mov [eax] esi +
pop esi  +
mov eax [ecx+4] +
add eax edx +
jz loc_100A51E  +
mov ecx [ebp+arg_8] +
mov ecx [ecx] +
mov [eax] ecx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 400h +
push esi  +
mov esi ecx +
jbe loc_100A542  +
push [ebp+arg_0]  +
call sub_100A26B  +
jmp loc_100A547  +
lea eax [esi+4] +
mov [esi] eax +
mov eax [esi] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 100h +
push esi  +
mov esi ecx +
jbe loc_100A56E  +
push [ebp+arg_0]  +
call sub_100A26B  +
jmp loc_100A573  +
lea eax [esi+4] +
mov [esi] eax +
mov eax [esi] +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100138C  +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
call sub_100A3B3  +
mov ecx [ebp-10h] +
call sub_100A18C  +
call __EH_epilog3  +
retn   +
***
call sub_100138C  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_100636C +
push esi  +
mov dword ptr [ebp-4] 1 +
call sub_100A43F  +
lea eax [esi+10h] +
cmp byte ptr [eax+18h] 0 +
jz loc_100A5E2  +
push eax  +
mov byte ptr [eax+18h] 0 +
call ds:DeleteCriticalSection  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [esi+4] +
call sub_100A57F  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
test eax eax +
jz loc_100A608  +
and dword ptr [eax] 0 +
mov eax 80004001h +
pop ebp  +
retn 0Ch  +
***
xor eax eax +
inc eax  +
retn 4  +
***
xor eax eax +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ??1_Locimp@locale@std@@MAE@XZ  +
test [ebp+arg_0] 1 +
jz loc_100A645  +
push esi  +
call off_1014494  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
lea edi [esi+10h] +
push edi  +
call ds:EnterCriticalSection  +
lea eax [ebp+arg_0] +
push eax  +
lea ecx [esi+4] +
call sub_100A4A1  +
push edi  +
mov esi eax +
call ds:LeaveCriticalSection  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1002CA3  +
mov edi [ebp+8] +
mov ebx [ebp+0Ch] +
mov esi ecx +
mov [ebp-64h] ebx +
test edi edi +
jz loc_100A7B7  +
test ebx ebx +
jz loc_100A7B7  +
and dword ptr [ebx] 0 +
push edi  +
call ds:lstrlenW  +
add eax eax +
push eax  +
lea ecx [ebp-60h] +
call sub_1009C49  +
xor ecx ecx +
mov [ebp-4] ecx +
cmp [ebp-58h] ecx +
jnz loc_100A6DD  +
push ecx  +
call ds:CoTaskMemFree  +
mov eax 8007000Eh +
jmp loc_100A7BC  +
mov [esi] edi +
mov [ebp-54h] ecx +
cmp [edi] cx +
jz loc_100A786  +
mov ebx ds:CharNextW +
mov eax [esi] +
cmp word ptr [eax] 25h +
jnz loc_100A762  +
push eax  +
call ebx  +
mov [esi] eax +
cmp word ptr [eax] 25h +
jz loc_100A762  +
push 25h  +
push eax  +
call sub_1009EBD  +
mov edi eax +
test edi edi +
jz loc_100A79C  +
mov ecx [esi] +
sub eax ecx +
sar eax 1 +
cmp eax 1Fh +
jg loc_100A7A5  +
push eax  +
push ecx  +
lea eax [ebp-50h] +
push 20h  +
push eax  +
call sub_100987C  +
mov ecx [esi+4] +
add esp 10h +
lea eax [ebp-50h] +
push eax  +
call sub_100A651  +
test eax eax +
jz loc_100A79C  +
push eax  +
lea ecx [ebp-60h] +
call sub_100A3F7  +
test eax eax +
jz loc_100A7AE  +
cmp [esi] edi +
jz loc_100A771  +
push dword ptr [esi]  +
call ebx  +
mov [esi] eax +
cmp eax edi +
jz loc_100A771  +
jmp loc_100A756  +
push 1  +
push eax  +
lea ecx [ebp-60h] +
call sub_1009C93  +
test eax eax +
jz loc_100A7AE  +
push dword ptr [esi]  +
call ebx  +
mov [esi] eax +
cmp word ptr [eax] 0 +
jnz loc_100A6F1  +
mov ebx [ebp-64h] +
xor ecx ecx +
mov eax [ebp-58h] +
mov [ebp-58h] ecx +
mov [ebx] eax +
push dword ptr [ebp-58h]  +
call ds:CoTaskMemFree  +
mov eax [ebp-54h] +
jmp loc_100A7BC  +
mov dword ptr [ebp-54h] 80020009h +
jmp loc_100A78E  +
mov dword ptr [ebp-54h] 80004005h +
jmp loc_100A78E  +
mov dword ptr [ebp-54h] 8007000Eh +
jmp loc_100A78E  +
mov eax 80004003h +
call sub_1002CE0  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+8] +
push edi  +
mov edi off_10144FC +
push 4  +
inc eax  +
push eax  +
push dword ptr [esi]  +
call edi  +
add esp 0Ch +
test eax eax +
jnz loc_100A7EE  +
xor eax eax +
jmp loc_100A81C  +
mov [esi] eax +
mov eax [esi+8] +
push 4  +
inc eax  +
push eax  +
push dword ptr [esi+4]  +
call edi  +
add esp 0Ch +
test eax eax +
jz loc_100A7EA  +
push [ebp+arg_4]  +
mov ecx esi +
push [ebp+arg_0]  +
mov [esi+4] eax +
push dword ptr [esi+8]  +
call sub_100A4F6  +
inc dword ptr [esi+8]  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 2  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100A295  +
push eax  +
mov ecx esi +
call sub_100A527  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 2  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100A295  +
push eax  +
mov ecx esi +
call sub_100A553  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 1  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100A295  +
push eax  +
mov ecx esi +
call sub_100A553  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1001354 +
call sub_1002067  +
test byte ptr [ebp+8] 1 +
jz loc_100A8B3  +
push esi  +
call off_1014494  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001410  +
mov [ebp-30h] ecx +
xor edi edi +
cmp [ebp+8] edi +
jz loc_100A9EC  +
cmp [ebp+0Ch] edi +
jz loc_100A9EC  +
push dword ptr [ebp+8]  +
mov [ebp-1Ch] edi +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
push 2  +
xor ecx ecx +
pop edx  +
mov [ebp-20h] eax +
mul  edx +
seto cl  +
mov [ebp-14h] edi +
mov [ebp-4] edi +
neg ecx  +
or eax ecx +
push eax  +
call off_1014498  +
mov [ebp-14h] eax +
jmp loc_100A91D  +
mov eax offset loc_100A91B +
retn   +
xor edi edi +
mov eax [ebp-14h] +
push 2  +
pop esi  +
push dword ptr [ebp+0Ch]  +
mov [ebp-4] esi +
mov [ebp-2Ch] eax +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
xor ecx ecx +
mov [ebp-24h] eax +
mov edx esi +
mul  edx +
seto cl  +
mov [ebp-18h] edi +
mov byte ptr [ebp-4] 3 +
neg ecx  +
or eax ecx +
push eax  +
call off_1014498  +
mov [ebp-18h] eax +
mov [ebp-4] esi +
jmp loc_100A96B  +
mov dword ptr [ebp-4] 2 +
mov eax offset loc_100A969 +
retn   +
xor edi edi +
mov esi [ebp-18h] +
mov byte ptr [ebp-4] 5 +
mov [ebp-28h] esi +
cmp [ebp-14h] edi +
jz loc_100A9B5  +
cmp esi edi +
jz loc_100A9B5  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp+8]  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp-14h]  +
call sub_1009856  +
push dword ptr [ebp-24h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp-24h]  +
push esi  +
call sub_1009856  +
mov ecx [ebp-30h] +
add esp 20h +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
call sub_100A7C9  +
test eax eax +
jnz loc_100A9BE  +
mov dword ptr [ebp-1Ch] 8007000Eh +
jmp loc_100A9C4  +
mov [ebp-2Ch] edi +
mov [ebp-28h] edi +
push dword ptr [ebp-28h]  +
xor eax eax +
cmp [ebp-1Ch] edi +
mov byte ptr [ebp-4] 2 +
setnl al  +
mov esi eax +
call off_1014494  +
push dword ptr [ebp-2Ch]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
call off_1014494  +
mov eax esi +
jmp loc_100A9EE  +
xor eax eax +
call __EH_epilog3  +
retn 8  +
***
call sub_100138C  +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_100AA59  +
cmp dword ptr [ebp+10h] 0 +
jz loc_100AA59  +
mov esi [ebp+8] +
lea edi [esi+10h] +
push edi  +
call ds:EnterCriticalSection  +
and dword ptr [ebp+8] 0 +
push dword ptr [ebp+10h]  +
and dword ptr [ebp-4] 0 +
push dword ptr [ebp+0Ch]  +
lea ecx [esi+4] +
call sub_100A8BF  +
push edi  +
mov esi eax +
call ds:LeaveCriticalSection  +
lea ecx [ebp+8] +
call sub_100A16D  +
mov eax esi +
neg eax  +
sbb eax eax +
and eax 7FF8FFF2h +
add eax 8007000Eh +
jmp loc_100AA5E  +
mov eax 80070057h +
call __EH_epilog3  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFFFh  +
push offset loc_1011683  +
mov eax large fs:0 +
push eax  +
push ecx  +
mov eax 2120h +
call __alloca_probe  +
mov eax dword_1014000 +
xor eax ebp +
mov [ebp+var_14] eax +
push ebx  +
push esi  +
push edi  +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov [ebp+var_10] esp +
mov eax [ebp+arg_8] +
mov esi [ebp+arg_0] +
mov ebx [ebp+arg_4] +
mov [ebp+var_212C] eax +
lea eax [ebp+String] +
xor edi edi +
push eax  +
mov [ebp+var_2128] ecx +
mov [ebp+var_2124] esi +
mov dword ptr [ebp+Data] ebx +
mov [ebp+var_211C] edi +
call sub_1009F49  +
cmp eax edi +
jl loc_100AD9D  +
lea eax [ebp+var_211C] +
push eax  +
lea eax [ebp+String] +
push eax  +
call sub_1009D26  +
test eax eax +
jnz loc_100AB01  +
mov eax 80020009h +
jmp loc_100AD9D  +
mov ecx [ebp+var_2128] +
call sub_1009F20  +
mov ecx [ebp+var_2128] +
lea eax [ebp+String] +
push eax  +
call sub_1009F49  +
cmp eax edi +
jl loc_100AD9D  +
movzx eax word ptr [ebp+var_211C] +
sub eax 8 +
jz loc_100AD67  +
sub eax 9 +
jz loc_100AC5F  +
dec eax  +
dec eax  +
jz loc_100AC23  +
sub eax 3FF5h +
jnz loc_100AD86  +
lea eax [ebp+String] +
push eax  +
call ds:lstrlenW  +
inc eax  +
inc eax  +
mov [ebp+lpData] edi +
mov [ebp+var_4] edi +
push eax  +
lea ecx [ebp+lpData] +
mov byte ptr [ebp+var_4] 1 +
call sub_100A84B  +
mov [ebp+var_4] edi +
jmp loc_100AB8B  +
and dword ptr [ebp-4] 0 +
mov eax offset loc_100AB89 +
retn   +
xor edi edi +
mov esi [ebp+lpData] +
cmp esi edi +
jz loc_100ABFE  +
cmp word ptr [ebp+String] 0 +
lea edi [ebp+String] +
jz loc_100ABD8  +
mov ebx ds:CharNextW +
push edi  +
call ebx  +
movzx ecx word ptr [edi] +
cmp cx 5Ch +
jnz loc_100ABCB  +
cmp word ptr [eax] 30h +
jnz loc_100ABCB  +
xor ecx ecx +
mov [esi] cx +
inc esi  +
push eax  +
inc esi  +
call ebx  +
mov edi eax +
jmp loc_100ABD2  +
mov [esi] cx +
inc esi  +
inc esi  +
inc edi  +
inc edi  +
cmp word ptr [edi] 0 +
jnz loc_100ABAB  +
mov ecx [ebp+var_2124] +
xor eax eax +
mov [esi] ax +
mov [esi+2] ax +
push [ebp+lpData]  +
push dword ptr [ebp+Data]  +
call sub_1009BB4  +
mov esi eax +
xor edi edi +
jmp loc_100AC01  +
push 0Eh  +
pop esi  +
lea eax [ebp+var_2114] +
cmp [ebp+lpData] eax +
jz loc_100AD7A  +
lea ecx [ebp+lpData] +
call sub_100A25E  +
jmp loc_100AD7A  +
lea eax [ebp+Data] +
push eax  +
push edi  +
push edi  +
lea eax [ebp+String] +
push eax  +
mov [ebp+var_2124] edi +
call ds:VarUI4FromStr  +
push dword ptr [ebp+Data]  +
mov ecx esi +
push ebx  +
call sub_1009B4E  +
lea ecx [ebp+var_2124] +
mov esi eax +
call sub_100A16D  +
jmp loc_100AD7A  +
lea eax [ebp+String] +
push eax  +
call ds:lstrlenW  +
mov [ebp+var_211C] eax +
test al 1 +
jz loc_100AC80  +
mov eax 80004005h +
jmp loc_100AD9D  +
cdq   +
sub eax edx +
mov ebx eax +
sar ebx 1 +
mov [ebp+var_2130] ebx +
mov [ebp+lpData] edi +
mov [ebp+var_4] 3 +
push ebx  +
lea ecx [ebp+lpData] +
mov byte ptr [ebp+var_4] 4 +
call sub_100A86F  +
jmp loc_100ACBA  +
mov eax offset loc_100ACB2 +
retn   +
mov ebx [ebp-2130h] +
xor edi edi +
cmp [ebp+lpData] edi +
jnz loc_100ACD9  +
lea eax [ebp+var_2114] +
test eax eax +
jz loc_100AC76  +
lea ecx [ebp+lpData] +
call sub_100A25E  +
jmp loc_100AC76  +
push ebx  +
push edi  +
push [ebp+lpData]  +
call memset  +
add esp 0Ch +
cmp [ebp+var_211C] edi +
jle loc_100AD2B  +
mov ecx [ebp+lpData] +
mov eax edi +
cdq   +
sub eax edx +
sar eax 1 +
lea esi [eax+ecx] +
movzx eax word ptr [ebp+edi*2+String] +
push eax  +
call sub_1009DD5  +
mov edx edi +
and edx 1 +
shl edx 2 +
push 4  +
pop ecx  +
sub ecx edx +
shl al cl +
or [esi] al +
inc edi  +
cmp edi [ebp+var_211C] +
jl loc_100ACF1  +
xor edi edi +
mov eax [ebp+var_2124] +
mov eax [eax] +
push ebx  +
push [ebp+lpData]  +
push 3  +
push edi  +
push dword ptr [ebp+Data]  +
push eax  +
call ds:RegSetValueExW  +
mov esi eax +
lea eax [ebp+var_2114] +
cmp [ebp+lpData] eax +
jz loc_100AD7A  +
lea ecx [ebp+lpData] +
call sub_100A25E  +
jmp loc_100AD7A  +
push 1  +
lea eax [ebp+String] +
push eax  +
push ebx  +
mov ecx esi +
call sub_1009B71  +
mov esi eax +
cmp esi edi +
jz loc_100AD86  +
push esi  +
call sub_1009411  +
jmp loc_100AD9D  +
push [ebp+var_212C]  +
mov ecx [ebp+var_2128] +
call sub_1009F49  +
cmp eax edi +
jl loc_100AD9D  +
xor eax eax +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_14] +
xor ecx ebp +
call sub_10012FD  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFFFh  +
push offset loc_10116EB  +
mov eax large fs:0 +
push eax  +
mov eax 225Ch +
call __alloca_probe  +
mov eax dword_1014000 +
xor eax ebp +
mov [ebp+var_10] eax +
push ebx  +
push esi  +
push edi  +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov eax [ebp+arg_4] +
mov edi [ebp+arg_0] +
xor ebx ebx +
mov [ebp+var_221C] ecx +
mov [ebp+var_2220] eax +
mov [ebp+var_222C] ebx +
mov [ebp+var_2228] ebx +
mov [ebp+var_2224] ebx +
mov eax [ebp+arg_C] +
push edi  +
mov [ebp+var_4] ebx +
mov [ebp+var_2264] eax +
call sub_1009F49  +
mov esi eax +
cmp esi ebx +
jmp loc_100B33B  +
mov esi ds:lstrcmpiW +
push offset String2  +
push edi  +
mov [ebp+var_2230] 1 +
call esi  +
mov ebx eax +
neg ebx  +
push offset aForceremove  +
sbb ebx ebx +
push edi  +
inc ebx  +
call esi  +
test eax eax +
jz loc_100AE66  +
test ebx ebx +
jz loc_100AF23  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_1009F49  +
mov esi eax +
test esi esi +
jl loc_100B3A4  +
cmp [ebp+arg_8] 0 +
jz loc_100AF23  +
xor esi esi +
push 5Ch  +
push edi  +
mov [ebp+var_223C] esi +
mov [ebp+var_2238] esi +
mov [ebp+var_2234] esi +
call sub_1009EBD  +
test eax eax +
jnz loc_100B348  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_100A05E  +
test eax eax +
jz loc_100AED8  +
mov eax [ebp+var_2220] +
push edi  +
lea ecx [ebp+var_223C] +
mov [ebp+var_223C] eax +
call sub_100A2BF  +
mov [ebp+var_223C] esi +
cmp ebx esi +
jz loc_100AF18  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_1009F49  +
mov esi eax +
test esi esi +
jl loc_100B35A  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_100A101  +
lea ecx [ebp+var_223C] +
mov esi eax +
call sub_1009A9F  +
test esi esi +
jge loc_100B2F6  +
jmp loc_100B3A4  +
lea ecx [ebp+var_223C] +
call sub_1009A9F  +
push offset aNoremove  +
push edi  +
call ds:lstrcmpiW  +
test eax eax +
jnz loc_100AF4F  +
mov ecx [ebp+var_221C] +
and [ebp+var_2230] eax +
push edi  +
call sub_1009F49  +
mov esi eax +
test esi esi +
jl loc_100B3A4  +
push offset aVal  +
push edi  +
call ds:lstrcmpiW  +
test eax eax +
jnz loc_100B074  +
mov ecx [ebp+var_221C] +
lea eax [ebp+ValueName] +
push eax  +
call sub_1009F49  +
mov esi eax +
xor ebx ebx +
cmp esi ebx +
jl loc_100B3A4  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_1009F49  +
mov esi eax +
cmp esi ebx +
jl loc_100B3A4  +
cmp word ptr [edi] 3Dh +
jnz loc_100B353  +
cmp [ebp+arg_8] ebx +
jz loc_100AFFA  +
mov [ebp+var_2250] ebx +
mov [ebp+var_224C] ebx +
mov eax [ebp+var_2220] +
mov ecx [ebp+var_221C] +
mov [ebp+var_2254] eax +
push edi  +
lea eax [ebp+ValueName] +
push eax  +
lea eax [ebp+var_2254] +
push eax  +
mov byte ptr [ebp+var_4] 1 +
call sub_100AA6B  +
mov esi eax +
cmp esi ebx +
mov [ebp+var_2254] ebx +
lea ecx [ebp+var_2254] +
jl loc_100B39F  +
mov byte ptr [ebp+var_4] bl +
jmp loc_100B2F1  +
cmp [ebp+arg_C] ebx +
jnz loc_100B063  +
cmp [ebp+var_2230] ebx +
jz loc_100B063  +
push 20006h  +
push ebx  +
push [ebp+var_2220]  +
lea ecx [ebp+hKey] +
mov [ebp+hKey] ebx +
mov [ebp+var_2244] ebx +
mov [ebp+var_2240] ebx +
call sub_1009B12  +
cmp eax ebx +
jnz loc_100B362  +
lea eax [ebp+ValueName] +
push eax  +
push [ebp+hKey]  +
call ds:RegDeleteValueW  +
cmp eax ebx +
jz loc_100B058  +
cmp eax 2 +
jnz loc_100B362  +
lea ecx [ebp+hKey] +
call sub_1009A9F  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_100A101  +
jmp loc_100AE2A  +
push 5Ch  +
push edi  +
call sub_1009EBD  +
test eax eax +
jnz loc_100B353  +
cmp [ebp+arg_8] eax +
jz loc_100B123  +
mov esi 2001Fh +
push esi  +
push edi  +
push [ebp+var_2220]  +
lea ecx [ebp+var_222C] +
call sub_1009B12  +
test eax eax +
jz loc_100B0E7  +
push 20019h  +
push edi  +
push [ebp+var_2220]  +
lea ecx [ebp+var_222C] +
call sub_1009B12  +
test eax eax +
jz loc_100B0E7  +
xor ebx ebx +
push ebx  +
push ebx  +
push esi  +
push ebx  +
push ebx  +
push edi  +
push [ebp+var_2220]  +
lea ecx [ebp+var_222C] +
call sub_1009ABD  +
mov esi eax +
cmp esi ebx +
jnz loc_100B370  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_1009F49  +
mov esi eax +
test esi esi +
jl loc_100B3A4  +
cmp word ptr [edi] 3Dh +
jnz loc_100B2F6  +
mov ecx [ebp+var_221C] +
push edi  +
push 0  +
lea eax [ebp+var_222C] +
push eax  +
call sub_100AA6B  +
mov esi eax +
jmp loc_100AF0B  +
cmp [ebp+arg_C] 0 +
jnz loc_100B144  +
push 20019h  +
push edi  +
push [ebp+var_2220]  +
lea ecx [ebp+var_222C] +
call sub_1009B12  +
mov ebx eax +
jmp loc_100B147  +
push 2  +
pop ebx  +
test ebx ebx +
jz loc_100B152  +
mov [ebp+arg_C] 1 +
push 0FFFFFFFFh  +
push edi  +
lea eax [ebp+SubKey] +
push 104h  +
push eax  +
call wcsncpy_s  +
add esp 10h +
push eax  +
call sub_1009815  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_1009F49  +
mov esi eax +
test esi esi +
jl loc_100B3A4  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_100A101  +
mov esi eax +
test esi esi +
jl loc_100B3A4  +
cmp word ptr [edi] 7Bh +
jnz loc_100B1EA  +
push edi  +
call ds:lstrlenW  +
cmp eax 1 +
jnz loc_100B1EA  +
push [ebp+arg_C]  +
mov ecx [ebp+var_221C] +
push 0  +
push [ebp+var_222C]  +
push edi  +
call sub_100ADBE  +
mov esi eax +
test esi esi +
jge loc_100B1D4  +
cmp [ebp+arg_C] 0 +
jz loc_100B3A4  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_1009F49  +
mov esi eax +
test esi esi +
jl loc_100B3A4  +
mov eax [ebp+var_2264] +
mov [ebp+arg_C] eax +
cmp ebx 2 +
jz loc_100B33D  +
test ebx ebx +
jz loc_100B215  +
test eax eax +
jnz loc_100B33D  +
push ebx  +
call sub_1009411  +
mov esi eax +
jmp loc_100B3A4  +
test eax eax +
jz loc_100B26C  +
push [ebp+var_222C]  +
mov ecx [ebp+var_221C] +
call sub_100A0C5  +
test eax eax +
jz loc_100B26C  +
mov ecx [ebp+var_221C] +
lea eax [ebp+SubKey] +
push eax  +
call sub_100A05E  +
test eax eax +
jz loc_100B33D  +
cmp [ebp+var_2230] 0 +
jz loc_100B33D  +
lea eax [ebp+SubKey] +
push eax  +
lea ecx [ebp+var_222C] +
call sub_100A2BF  +
jmp loc_100B33D  +
push [ebp+var_222C]  +
mov ecx [ebp+var_221C] +
call sub_100A0C5  +
lea ecx [ebp+var_222C] +
mov [ebp+var_2268] eax +
call sub_1009A9F  +
mov ebx eax +
xor eax eax +
cmp ebx eax +
jnz loc_100B383  +
cmp [ebp+var_2230] eax +
jz loc_100B33D  +
cmp [ebp+var_2268] eax +
jnz loc_100B33D  +
mov [ebp+var_225C] eax +
mov [ebp+var_2258] eax +
mov eax [ebp+var_2220] +
mov [ebp+var_2260] eax +
lea eax [ebp+SubKey] +
push eax  +
lea ecx [ebp+var_2260] +
call sub_1009986  +
and [ebp+var_2260] 0 +
test eax eax +
jnz loc_100B391  +
lea ecx [ebp+var_2260] +
call sub_1009A9F  +
cmp [ebp+arg_8] 0 +
jz loc_100B33D  +
cmp word ptr [edi] 7Bh +
jnz loc_100B33D  +
push edi  +
call ds:lstrlenW  +
cmp eax 1 +
jnz loc_100B33D  +
mov ecx [ebp+var_221C] +
push 0  +
push [ebp+arg_8]  +
push [ebp+var_222C]  +
push edi  +
call sub_100ADBE  +
mov esi eax +
test esi esi +
jl loc_100B3A4  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_1009F49  +
mov esi eax +
test esi esi +
jl loc_100B3A4  +
cmp word ptr [edi] 7Dh +
jz loc_100B3A4  +
jmp loc_100AE33  +
lea ecx [ebp+var_223C] +
call sub_1009A9F  +
mov esi 80020009h +
jmp loc_100B3A4  +
lea ecx [ebp+var_223C] +
jmp loc_100B39F  +
push eax  +
call sub_1009411  +
lea ecx [ebp+hKey] +
jmp loc_100B39D  +
lea ecx [ebp+var_222C] +
call sub_1009A9F  +
push esi  +
call sub_1009411  +
jmp loc_100B3B1  +
lea ecx [ebp+var_222C] +
call sub_1009A9F  +
push ebx  +
jmp loc_100B37C  +
push eax  +
call sub_1009411  +
lea ecx [ebp+var_2260] +
mov esi eax +
call sub_1009A9F  +
lea ecx [ebp+var_222C] +
call sub_1009A9F  +
mov eax esi +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_10] +
xor ecx ebp +
call sub_10012FD  +
leave   +
retn 10h  +
***
mov edi edi +
push esi  +
mov edx ecx +
push edi  +
mov dword ptr [edx] offset off_100636C +
and dword ptr [edx+4] 0 +
and dword ptr [edx+8] 0 +
and dword ptr [edx+0Ch] 0 +
lea esi [edx+10h] +
push 6  +
pop ecx  +
xor eax eax +
mov edi esi +
stos   +
mov [esi+18h] al +
pop edi  +
mov eax edx +
pop esi  +
retn   +
***
mov eax 80004001h +
retn 10h  +
***
mov eax 80004001h +
retn 0Ch  +
***
mov eax 80004001h +
retn 4  +
***
mov eax 80004001h +
retn 18h  +
***
mov eax 80004001h +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov ecx [eax+14h] +
mov eax ecx +
neg eax  +
sbb eax eax +
and eax 7FFFBFFDh +
add eax 80004003h +
push esi  +
push edi  +
js loc_100B4C1  +
push dword ptr [ebp+1Ch]  +
mov eax [ecx] +
push dword ptr [ebp+18h]  +
lea esi [ebp+0Ch] +
sub esp 0Ch +
mov edi esp +
movs   +
movs   +
push ecx  +
movs   +
call dword ptr [eax+1Ch]  +
pop edi  +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
mov eax [ecx+14h] +
test eax eax +
jz loc_100B4E6  +
push dword ptr [ebp+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
jmp loc_100B4F5  +
xor eax eax +
cmp [ecx+18h] eax +
setz al  +
lea eax [eax+eax-7FFFBFFFh] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
mov eax [ecx+14h] +
test eax eax +
jz loc_100B515  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
jmp loc_100B524  +
xor eax eax +
cmp [ecx+18h] eax +
setz al  +
lea eax [eax+eax-7FFFBFFFh] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
mov eax [ecx+14h] +
test eax eax +
jz loc_100B54A  +
push dword ptr [ebp+10h]  +
mov ecx [eax] +
push dword ptr [ebp+0Ch]  +
push eax  +
call dword ptr [ecx+18h]  +
jmp loc_100B559  +
xor eax eax +
cmp [ecx+18h] eax +
setz al  +
lea eax [eax+eax-7FFFBFFFh] +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
mov eax [ecx+14h] +
test eax eax +
jz loc_100B57C  +
push dword ptr [ebp+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+1Ch]  +
jmp loc_100B58B  +
xor eax eax +
cmp [ecx+18h] eax +
setz al  +
lea eax [eax+eax-7FFFBFFFh] +
pop ebp  +
retn 8  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1004028  +
***
sub dword ptr [esp+4] 4 +
jmp loc_100400D  +
***
sub dword ptr [esp+4] 4 +
jmp loc_100436D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 200Ch +
call __alloca_probe  +
mov eax dword_1014000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
and [ebp+pv] 0 +
push esi  +
mov esi ecx +
push edi  +
lea ecx [ebp+pv] +
push ecx  +
push eax  +
mov ecx esi +
call sub_100A686  +
mov edi eax +
test edi edi +
jl loc_100B6B8  +
mov eax [ebp+pv] +
xor ecx ecx +
mov [esi] eax +
cmp cx [eax] +
jz loc_100B6AA  +
push ebx  +
lea eax [ebp+String1] +
push eax  +
mov ecx esi +
call sub_1009F49  +
mov edi eax +
xor ebx ebx +
cmp edi ebx +
jl loc_100B6A9  +
lea eax [ebp+String1] +
push eax  +
call sub_1009E14  +
mov [ebp+var_200C] eax +
cmp eax ebx +
jz loc_100B6F1  +
lea eax [ebp+String1] +
push eax  +
mov ecx esi +
call sub_1009F49  +
mov edi eax +
cmp edi ebx +
jl loc_100B6A9  +
push 7Bh  +
pop eax  +
cmp ax [ebp+String1] +
jnz loc_100B6F1  +
lea eax [ebp+String1] +
mov ecx esi +
cmp [ebp+arg_4] ebx +
jz loc_100B6C8  +
mov ebx [esi] +
push 0  +
push [ebp+arg_4]  +
push [ebp+var_200C]  +
push eax  +
call sub_100ADBE  +
mov edi eax +
test edi edi +
jge loc_100B6DC  +
push 0  +
push 0  +
push [ebp+var_200C]  +
lea eax [ebp+String1] +
push eax  +
mov ecx esi +
mov [esi] ebx +
call sub_100ADBE  +
pop ebx  +
push [ebp+pv]  +
call ds:CoTaskMemFree  +
mov eax edi +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_10012FD  +
leave   +
retn 8  +
push ebx  +
push ebx  +
push [ebp+var_200C]  +
push eax  +
call sub_100ADBE  +
mov edi eax +
cmp edi ebx +
jl loc_100B6A9  +
mov ecx esi +
call sub_1009F20  +
mov eax [esi] +
xor ecx ecx +
cmp cx [eax] +
jz loc_100B6A9  +
jmp loc_100B615  +
mov edi 80020009h +
jmp loc_100B6A9  +
***
call sub_100BFE7  +
mov eax [ebp+8] +
mov edi [ebp+0Ch] +
mov ebx [ebp+10h] +
xor esi esi +
mov [ebp-424h] esi +
mov [ebp-4] esi +
mov [ebp-42Ch] ecx +
mov [ebp-430h] esi +
mov [ebp-418h] esi +
push 2  +
push esi  +
push eax  +
mov byte ptr [ebp-4] 1 +
call ds:LoadLibraryExW  +
mov [ebp-41Ch] eax +
cmp eax esi +
jnz loc_100B756  +
call sub_1003252  +
mov esi eax +
jmp loc_100B85F  +
push ebx  +
push edi  +
push eax  +
call ds:FindResourceW  +
mov edi eax +
cmp edi esi +
jnz loc_100B76F  +
call sub_1003252  +
jmp loc_100B851  +
push edi  +
push dword ptr [ebp-41Ch]  +
call ds:LoadResource  +
mov [ebp-428h] eax +
cmp eax esi +
jz loc_100B765  +
push edi  +
push dword ptr [ebp-41Ch]  +
call ds:SizeofResource  +
mov edi eax +
lea eax [edi+1] +
mov [ebp-420h] edi +
cmp eax edi +
jnb loc_100B7D5  +
lea eax [ebp-414h] +
cmp [ebp-418h] eax +
jz loc_100B7BB  +
lea ecx [ebp-418h] +
call sub_100A25E  +
mov esi 8007000Eh +
lea ecx [ebp-424h] +
call sub_100A16D  +
mov eax esi +
call sub_100C027  +
retn 10h  +
push eax  +
lea ecx [ebp-418h] +
mov byte ptr [ebp-4] 2 +
call sub_100A827  +
mov dword ptr [ebp-4] 1 +
jmp loc_100B803  +
mov dword ptr [ebp-4] 1 +
mov eax offset loc_100B7FB +
retn   +
mov edi [ebp-420h] +
xor esi esi +
cmp [ebp-418h] esi +
jnz loc_100B812  +
mov esi 8007000Eh +
jmp loc_100B853  +
push edi  +
push dword ptr [ebp-418h]  +
push edi  +
push dword ptr [ebp-428h]  +
push esi  +
push 3  +
call ds:MultiByteToWideChar  +
cmp eax esi +
jz loc_100B765  +
mov edx [ebp-418h] +
push dword ptr [ebp+14h]  +
xor ecx ecx +
mov [edx+eax*2] cx +
push dword ptr [ebp-418h]  +
lea ecx [ebp-430h] +
call sub_100B5C1  +
mov esi eax +
push dword ptr [ebp-41Ch]  +
call ds:FreeLibrary  +
lea eax [ebp-414h] +
cmp [ebp-418h] eax +
jz loc_100B7C0  +
lea ecx [ebp-418h] +
call sub_100A25E  +
jmp loc_100B7C0  +
***
call sub_100138C  +
and dword ptr [ebp-10h] 0 +
movzx eax word ptr [ebp+10h] +
mov ecx [ebp+8] +
and dword ptr [ebp-4] 0 +
push 1  +
push dword ptr [ebp+14h]  +
push eax  +
push dword ptr [ebp+0Ch]  +
call sub_100B6FD  +
lea ecx [ebp-10h] +
mov esi eax +
call sub_100A16D  +
mov eax esi +
call __EH_epilog3  +
retn 10h  +
***
call sub_100138C  +
xor eax eax +
mov [ebp-10h] eax +
mov [ebp-4] eax +
cmp [ebp+10h] eax +
jz loc_100B907  +
cmp [ebp+14h] eax +
jz loc_100B907  +
mov ecx [ebp+8] +
push 1  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_100B6FD  +
lea ecx [ebp-10h] +
mov esi eax +
call sub_100A16D  +
mov eax esi +
jmp loc_100B914  +
lea ecx [ebp-10h] +
call sub_100A16D  +
mov eax 80070057h +
call __EH_epilog3  +
retn 10h  +
***
call sub_100138C  +
xor eax eax +
mov [ebp-10h] eax +
mov ecx [ebp+8] +
push eax  +
push dword ptr [ebp+14h]  +
mov [ebp-4] eax +
movzx eax word ptr [ebp+10h] +
push eax  +
push dword ptr [ebp+0Ch]  +
call sub_100B6FD  +
lea ecx [ebp-10h] +
mov esi eax +
call sub_100A16D  +
mov eax esi +
call __EH_epilog3  +
retn 10h  +
***
call sub_100138C  +
xor eax eax +
mov [ebp-10h] eax +
mov [ebp-4] eax +
cmp [ebp+10h] eax +
jz loc_100B9A0  +
cmp [ebp+14h] eax +
jz loc_100B9A0  +
mov ecx [ebp+8] +
push eax  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_100B6FD  +
lea ecx [ebp-10h] +
mov esi eax +
call sub_100A16D  +
mov eax esi +
jmp loc_100B9AD  +
lea ecx [ebp-10h] +
call sub_100A16D  +
mov eax 80070057h +
call __EH_epilog3  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A68h +
mov eax dword_1014000 +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+0Ch] +
push ebx  +
push esi  +
mov esi [ebp+14h] +
push edi  +
mov edi [ebp+8] +
lea ecx [ebp-0A68h] +
mov [ebp-0A3Ch] eax +
call sub_100B419  +
lea ecx [ebp-0A58h] +
call sub_1002878  +
mov ebx eax +
test ebx ebx +
jge loc_100BA1B  +
lea ecx [ebp-0A68h] +
call ??1_Locimp@locale@std@@MAE@XZ  +
mov eax ebx +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10012FD  +
leave   +
retn 10h  +
***
test esi esi +
jnz loc_100BA34  +
jmp loc_100BA3A  +
push dword ptr [esi+4]  +
push eax  +
lea eax [ebp-0A68h] +
push eax  +
call sub_100A9FB  +
add esi 8 +
mov eax [esi] +
test eax eax +
jnz loc_100BA21  +
mov eax [edi] +
lea ecx [ebp-0A68h] +
push ecx  +
mov ecx edi +
call dword ptr [eax+14h]  +
xor ebx ebx +
cmp eax ebx +
jge loc_100BA5F  +
mov esi eax +
lea ecx [ebp-0A68h] +
call ??1_Locimp@locale@std@@MAE@XZ  +
mov eax esi +
jmp loc_100BA0A  +
***
mov edi dword_101412C +
mov esi 104h +
push esi  +
lea eax [ebp-20Ch] +
push eax  +
push edi  +
mov [ebp-0A38h] ebx +
call ds:GetModuleFileNameW  +
cmp eax ebx +
jnz loc_100BA97  +
call sub_1003252  +
mov esi eax +
lea ecx [ebp-0A38h] +
call sub_100A16D  +
jmp loc_100BA50  +
***
cmp eax esi +
jnz loc_100BAAD  +
lea ecx [ebp-0A38h] +
call sub_100A16D  +
mov esi 8007007Ah +
jmp loc_100BA50  +
***
lea eax [ebp-20Ch] +
push eax  +
push 208h  +
lea eax [ebp-0A34h] +
push eax  +
call sub_1009921  +
cmp edi ebx +
jz loc_100BADC  +
push ebx  +
call ds:GetModuleHandleW  +
cmp edi eax +
jz loc_100BADC  +
lea eax [ebp-0A34h] +
jmp loc_100BB41  +
push 22h  +
pop eax  +
mov [ebp-624h] ax +
lea eax [ebp-0A34h] +
push eax  +
push 20Bh  +
lea eax [ebp-622h] +
push eax  +
call sub_10097B0  +
test al al +
jnz loc_100BB17  +
lea ecx [ebp-0A38h] +
call sub_100A16D  +
mov esi 80004005h +
jmp loc_100BA50  +
***
lea eax [ebp-624h] +
push eax  +
call ds:lstrlenW  +
add eax eax +
push 22h  +
pop ecx  +
mov [ebp+eax-624h] cx +
xor ecx ecx +
mov [ebp+eax-622h] cx +
lea eax [ebp-624h] +
push eax  +
push offset aModule  +
lea eax [ebp-0A68h] +
push eax  +
call sub_100A9FB  +
mov esi eax +
cmp esi ebx +
jl loc_100BA8A  +
lea eax [ebp-0A34h] +
push eax  +
push offset aModule_raw  +
lea eax [ebp-0A68h] +
push eax  +
call sub_100A9FB  +
mov esi eax +
cmp esi ebx +
jl loc_100BA8A  +
push offset aRegistry  +
push dword ptr [ebp-0A3Ch]  +
lea eax [ebp-20Ch] +
push eax  +
lea eax [ebp-0A68h] +
push eax  +
cmp [ebp+10h] ebx +
jz loc_100BBA7  +
call sub_100B8C8  +
jmp loc_100BA88  +
***
call sub_100B962  +
jmp loc_100BA88  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A64h +
mov eax dword_1014000 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
mov esi [ebp+14h] +
push edi  +
mov edi [ebp+8] +
lea ecx [ebp-0A64h] +
call sub_100B419  +
lea ecx [ebp-0A54h] +
call sub_1002878  +
mov ebx eax +
test ebx ebx +
jge loc_100BC0E  +
lea ecx [ebp-0A64h] +
call ??1_Locimp@locale@std@@MAE@XZ  +
mov eax ebx +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10012FD  +
leave   +
retn 10h  +
***
test esi esi +
jnz loc_100BC27  +
jmp loc_100BC2D  +
push dword ptr [esi+4]  +
push eax  +
lea eax [ebp-0A64h] +
push eax  +
call sub_100A9FB  +
add esi 8 +
mov eax [esi] +
test eax eax +
jnz loc_100BC14  +
mov eax [edi] +
lea ecx [ebp-0A64h] +
push ecx  +
mov ecx edi +
call dword ptr [eax+14h]  +
xor ebx ebx +
cmp eax ebx +
jge loc_100BC52  +
mov esi eax +
lea ecx [ebp-0A64h] +
call ??1_Locimp@locale@std@@MAE@XZ  +
mov eax esi +
jmp loc_100BBFD  +
***
mov edi dword_101412C +
mov esi 104h +
push esi  +
lea eax [ebp-20Ch] +
push eax  +
push edi  +
mov [ebp-0A38h] ebx +
call ds:GetModuleFileNameW  +
cmp eax ebx +
jnz loc_100BC8A  +
call sub_1003252  +
mov esi eax +
lea ecx [ebp-0A38h] +
call sub_100A16D  +
jmp loc_100BC43  +
***
cmp eax esi +
jnz loc_100BCA0  +
lea ecx [ebp-0A38h] +
call sub_100A16D  +
mov esi 8007007Ah +
jmp loc_100BC43  +
***
lea eax [ebp-20Ch] +
push eax  +
push 208h  +
lea eax [ebp-0A34h] +
push eax  +
call sub_1009921  +
cmp edi ebx +
jz loc_100BCCF  +
push ebx  +
call ds:GetModuleHandleW  +
cmp edi eax +
jz loc_100BCCF  +
lea eax [ebp-0A34h] +
jmp loc_100BD34  +
push 22h  +
pop eax  +
mov [ebp-624h] ax +
lea eax [ebp-0A34h] +
push eax  +
push 20Bh  +
lea eax [ebp-622h] +
push eax  +
call sub_10097B0  +
test al al +
jnz loc_100BD0A  +
lea ecx [ebp-0A38h] +
call sub_100A16D  +
mov esi 80004005h +
jmp loc_100BC43  +
***
lea eax [ebp-624h] +
push eax  +
call ds:lstrlenW  +
add eax eax +
push 22h  +
pop ecx  +
mov [ebp+eax-624h] cx +
xor ecx ecx +
mov [ebp+eax-622h] cx +
lea eax [ebp-624h] +
push eax  +
push offset aModule  +
lea eax [ebp-0A64h] +
push eax  +
call sub_100A9FB  +
mov esi eax +
cmp esi ebx +
jl loc_100BC7D  +
lea eax [ebp-0A34h] +
push eax  +
push offset aModule_raw  +
lea eax [ebp-0A64h] +
push eax  +
call sub_100A9FB  +
mov esi eax +
cmp esi ebx +
jl loc_100BC7D  +
push offset aRegistry  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-20Ch] +
push eax  +
lea eax [ebp-0A64h] +
push eax  +
cmp [ebp+10h] ebx +
jz loc_100BD97  +
call sub_100B886  +
jmp loc_100BC7B  +
***
call sub_100B921  +
jmp loc_100BC7B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_100B9BA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_100BBB6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
mov esi ecx +
push dword ptr [esi+8]  +
push dword ptr [esi+0Ch]  +
push dword ptr [esi]  +
call nullsub_2  +
cmp dword_10140B0 0 +
jz loc_100BE39  +
mov ecx dword_1014540 +
mov eax off_1014490 +
push ebx  +
mov ebx [eax+0Ch] +
push edi  +
mov edi ecx +
imul edi edi +
push 2  +
pop edx  +
cmp [edi+ebx] edx +
pop edi  +
pop ebx  +
jl loc_100BE39  +
push dword ptr [esi+0Ch]  +
mov [ebp+var_4] eax +
push dword ptr [esi+8]  +
lea eax [ebp+var_14] +
push dword ptr [esi+4]  +
mov [ebp+var_14] offset aDW7rtmEnduse_0 +
push dword ptr [esi]  +
mov [ebp+var_10] 0F4h +
push offset aExceptionHr0x0  +
push eax  +
mov [ebp+var_C] ecx +
mov [ebp+var_8] edx +
call sub_100F80B  +
add esp 18h +
pop esi  +
leave   +
retn   +
***
mov eax [ecx] +
test eax eax +
jz locret_100BF35  +
push eax  +
call ds:LeaveCriticalSection  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
push esi  +
mov esi ecx +
mov [esi] eax +
mov eax [ebp+4] +
mov [esi+4] eax +
mov eax [ebp+arg_0] +
mov [esi+8] eax +
mov eax [ebp+arg_4] +
mov [esi+0Ch] eax +
call sub_100BDC6  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jl loc_100BF85  +
cmp eax [ecx+4] +
jge loc_100BF85  +
mov ecx [ecx] +
lea eax [ecx+eax*2] +
pop ebp  +
retn 4  +
push 0  +
push 0  +
push 1  +
push 0C000008Ch  +
call ds:RaiseException  +
int 3  +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset sub_10012FD  +
push offset dword_1014000  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
jmp ds:_purecall  +
***
jmp ds:__CxxFrameHandler3  +
***
mov eax eax +
push eax  +
push large dword ptr fs:0  +
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_1014000 +
xor eax ebp +
push eax  +
mov [ebp-14h] eax +
mov [ebp-10h] esp +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
mov ecx [ebp-14h] +
xor ecx ebp +
call sub_10012FD  +
jmp __EH_epilog3  +
***
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ds:??1type_info@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_100C06C  +
push esi  +
call sub_100945C  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
push esi  +
xor esi esi +
cmp ecx esi +
jbe loc_100C0BF  +
push 0FFFFFFE0h  +
xor edx edx +
pop eax  +
div  ecx +
cmp eax [ebp+arg_8] +
jnb loc_100C0BF  +
call _errno  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 0Ch +
call sub_100C416  +
add esp 14h +
xor eax eax +
jmp loc_100C0CE  +
imul ecx [ebp+arg_8] +
push ecx  +
push [ebp+arg_0]  +
call realloc  +
pop ecx  +
pop ecx  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_100C113  +
cmp dword ptr [eax+10h] 3 +
jnz loc_100C113  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_100C10D  +
cmp eax 19930521h +
jz loc_100C10D  +
cmp eax 19930522h +
jz loc_100C10D  +
cmp eax 1994000h +
jnz loc_100C113  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_100C13F  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_100C13B  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_100C1A0  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_100C198  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_100C1A2  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_100C188  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call sub_10021E6  +
and dword ptr [ebp-4] 0 +
mov esi 1000000h +
push esi  +
call sub_100C129  +
pop ecx  +
test eax eax +
jz loc_100C209  +
mov eax [ebp+8] +
sub eax esi +
push eax  +
push esi  +
call sub_100C163  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100C209  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
jmp loc_100C212  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
xor eax eax +
call sub_100227C  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_1014270 eax +
mov dword_101426C ecx +
mov dword_1014268 edx +
mov dword_1014264 ebx +
mov dword_1014260 esi +
mov dword_101425C edi +
mov word_1014288 ss +
mov word_101427C cs +
mov word_1014258 ds +
mov word_1014254 es +
mov word_1014250 fs +
mov word_101424C gs +
pushf   +
pop dword_1014280  +
mov eax [ebp+0] +
mov dword_1014274 eax +
mov eax [ebp+4] +
mov dword_1014278 eax +
lea eax [ebp+8] +
mov dword_1014284 eax +
mov eax [ebp-320h] +
mov dword_10141C0 10001h +
mov eax dword_1014278 +
mov dword_101417C eax +
mov dword_1014170 0C0000409h +
mov dword_1014174 1 +
mov eax dword_1014000 +
mov [ebp-328h] eax +
mov eax dword_1014004 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2D0h +
mov eax dword_1014000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov [ebp+var_220] eax +
mov [ebp+var_224] ecx +
mov [ebp+var_228] edx +
mov [ebp+var_22C] ebx +
mov [ebp+var_230] esi +
mov [ebp+var_234] edi +
mov [ebp+var_208] ss +
mov [ebp+var_214] cs +
mov [ebp+var_238] ds +
mov [ebp+var_23C] es +
mov [ebp+var_240] fs +
mov [ebp+var_244] gs +
pushf   +
pop [ebp+var_210]  +
mov eax [ebp+4] +
mov [ebp+var_218] eax +
lea eax [ebp+4] +
mov [ebp+var_2D0] 10001h +
mov [ebp+var_20C] eax +
mov eax [eax-4] +
push offset OutputString  +
mov [ebp+var_21C] eax +
call ds:OutputDebugStringA  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10012FD  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_100C340  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push offset dword_100C470  +
lea eax [ebp-4] +
push eax  +
mov dword ptr [ebp-4] 1 +
call _CxxThrowException  +
int 3  +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+lpString] +
mov esi ecx +
push edi  +
mov dword ptr [esi] offset off_1002F4C +
call ds:lstrlenW  +
mov [esi+4] edi +
mov [esi+0Ch] eax +
mov [esi+8] eax +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov esi ecx +
cmp [ebp+arg_0] edi +
jnb loc_100C50C  +
push ebx  +
mov ebx [ebp+arg_8] +
push ebx  +
call sub_1002EDE  +
mov [esi+4] ebx +
mov [esi+8] edi +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
or dword ptr [esi+0Ch] 0FFFFFFFFh +
mov [esi] eax +
mov eax [ebp+4] +
mov [esi+4] eax +
mov dword ptr [esi+8] offset dword_100C544 +
call sub_100BDC6  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push esi  +
and [ebp+var_4] 0 +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+var_4] +
push eax  +
push 2  +
mov esi ecx +
pop ecx  +
mov eax edi +
mul  ecx +
push edx  +
push eax  +
call sub_10050A6  +
test eax eax +
jge loc_100C59F  +
push eax  +
lea ecx [ebp+var_24] +
call sub_100C517  +
mov esi eax +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
push offset dword_10126DC  +
lea eax [ebp+var_14] +
push eax  +
movs   +
call _CxxThrowException  +
push [ebp+var_4]  +
call ds:malloc  +
pop ecx  +
mov [esi+4] eax +
test eax eax +
jnz loc_100C5B7  +
push 800700CEh  +
jmp loc_100C580  +
mov [esi+8] edi +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
cmp [ebp+lpMultiByteStr] 0 +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
jnz loc_100C5FC  +
push 80004003h  +
lea ecx [ebp+var_20] +
call sub_100C517  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push offset dword_10126DC  +
lea eax [ebp+var_10] +
push eax  +
movs   +
call _CxxThrowException  +
push [ebp+lpMultiByteStr]  +
call ds:lstrlenA  +
mov ebx eax +
lea edi [ebx+1] +
cmp edi [esi+8] +
jbe loc_100C617  +
push edi  +
mov ecx esi +
call sub_100C556  +
push edi  +
push dword ptr [esi+4]  +
push ebx  +
push [ebp+lpMultiByteStr]  +
call sub_100DBDB  +
pop edi  +
mov [esi+0Ch] eax +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
mov esi ecx +
mov eax [esi+8] +
push edi  +
mov edi [ebp+arg_0] +
cmp edi eax +
jbe loc_100C724  +
cmp edi [ebp+arg_8] +
jbe loc_100C676  +
push 800700CEh  +
lea ecx [ebp+var_20] +
call sub_100C517  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
movs   +
push offset dword_10126DC  +
lea eax [ebp+var_10] +
push eax  +
call _CxxThrowException  +
mov ecx [ebp+arg_4] +
and [ebp+arg_0] 0 +
cmp eax ecx +
jnb loc_100C683  +
mov ecx eax +
xor edx edx +
mov eax edi +
div  ecx +
test edx edx +
jz loc_100C693  +
lea edi [eax+1] +
imul edi ecx +
lea eax [ebp+arg_0] +
push eax  +
push 2  +
pop ecx  +
mov eax edi +
mul  ecx +
push edx  +
push eax  +
call sub_10050A6  +
test eax eax +
jge loc_100C6BA  +
mov [ebp+arg_C] 80070216h +
push offset dword_100C744  +
lea eax [ebp+arg_C] +
jmp loc_100C670  +
mov ecx [esi+4] +
mov eax ecx +
sub eax [ebp+arg_C] +
push ebx  +
push [ebp+arg_0]  +
neg eax  +
sbb eax eax +
and eax ecx +
push eax  +
call ds:__imp_realloc  +
mov ebx eax +
pop ecx  +
pop ecx  +
test ebx ebx +
jz loc_100C652  +
lea eax [ebp+arg_0] +
push eax  +
push 1  +
push dword ptr [esi+0Ch]  +
call sub_10050D3  +
test eax eax +
jl loc_100C72A  +
mov eax [ebp+arg_0] +
push 2  +
pop ecx  +
mul  ecx +
lea ecx [ebp+arg_0] +
push ecx  +
push edx  +
push eax  +
call sub_10050A6  +
test eax eax +
jl loc_100C72A  +
mov eax [ebp+arg_C] +
cmp [esi+4] eax +
jnz loc_100C71D  +
push [ebp+arg_0]  +
push eax  +
push ebx  +
call memcpy  +
add esp 0Ch +
mov [esi+4] ebx +
mov [esi+8] edi +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 10h  +
push ebx  +
call ds:__imp_free  +
mov [ebp+arg_C] 80070216h +
mov [esp+38h+var_38] offset dword_100C744 +
jmp loc_100C6B5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
cmp [ebp+lpMultiByteStr] 0 +
push esi  +
push edi  +
mov esi ecx +
jnz loc_100C78F  +
push 80070057h  +
lea ecx [ebp+var_28] +
call sub_100C517  +
mov esi eax +
lea edi [ebp+var_18] +
movs   +
movs   +
movs   +
push offset dword_10126DC  +
lea eax [ebp+var_18] +
push eax  +
movs   +
call _CxxThrowException  +
mov eax [ebp+arg_8] +
mov edi [ebp+cchMultiByte] +
mov [ebp+var_4] edi +
mov [ebp+cchMultiByte] eax +
cmp eax 0FFFFFFFFh +
jnz loc_100C7B8  +
push [ebp+lpMultiByteStr]  +
call ds:lstrlenA  +
mov [ebp+arg_8] eax +
lea eax [ebp+arg_8] +
push eax  +
lea ecx [ebp+cchMultiByte] +
call sub_1003C78  +
push 1  +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+cchMultiByte]  +
lea eax [ebp+var_8] +
push eax  +
lea ecx [ebp+var_4] +
call sub_1003BC1  +
mov ecx eax +
call sub_1003C18  +
mov ecx [esi+8] +
cmp [eax] ecx +
jbe loc_100C801  +
push 1  +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+cchMultiByte]  +
lea eax [ebp+var_8] +
push eax  +
lea ecx [ebp+var_4] +
call sub_1003BC1  +
mov ecx eax +
call sub_1003C18  +
push dword ptr [eax]  +
mov edx [esi] +
mov ecx esi +
call dword ptr [edx]  +
jmp loc_100C83A  +
test edi edi +
jnz loc_100C83A  +
mov eax [esi+4] +
cmp [ebp+lpMultiByteStr] eax +
jb loc_100C815  +
lea eax [eax+ecx*2] +
cmp [ebp+lpMultiByteStr] eax +
jb loc_100C83A  +
push 1  +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+cchMultiByte]  +
lea eax [ebp+var_8] +
push eax  +
lea ecx [ebp+var_4] +
call sub_1003BC1  +
mov ecx eax +
call sub_1003C18  +
push dword ptr [eax]  +
mov edx [esi] +
mov ecx esi +
call dword ptr [edx+4]  +
push 1  +
lea eax [ebp+arg_8] +
push eax  +
lea ecx [ebp+cchMultiByte] +
call sub_1003C18  +
mov eax [eax] +
lea ecx [eax+edi] +
cmp ecx [esi+8] +
jbe loc_100C856  +
xor eax eax +
jmp loc_100C872  +
push eax  +
mov eax [esi+4] +
lea eax [eax+edi*2] +
push eax  +
push [ebp+cchMultiByte]  +
mov [esi+0Ch] edi +
push [ebp+lpMultiByteStr]  +
call sub_100DBDB  +
add [esi+0Ch] eax +
mov eax [esi+0Ch] +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
cmp [ebp+lpString] 0 +
push esi  +
push edi  +
mov esi ecx +
jnz loc_100C8B3  +
push 80070057h  +
lea ecx [ebp+var_24] +
call sub_100C517  +
mov esi eax +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
push offset dword_10126DC  +
lea eax [ebp+var_14] +
push eax  +
movs   +
call _CxxThrowException  +
mov edi [ebp+arg_4] +
mov [ebp+arg_4] edi +
cmp edi 0FFFFFFFFh +
jnz loc_100C8D9  +
push [ebp+lpString]  +
call ds:lstrlenW  +
mov [ebp+var_4] eax +
lea eax [ebp+var_4] +
push eax  +
lea ecx [ebp+arg_4] +
call sub_1003C78  +
mov edi [ebp+arg_4] +
push 1  +
lea eax [ebp+var_4] +
push eax  +
lea ecx [ebp+arg_4] +
call sub_1003C18  +
mov eax [eax] +
cmp eax [esi+8] +
jbe loc_100C905  +
push 1  +
lea eax [ebp+var_4] +
push eax  +
lea ecx [ebp+arg_4] +
call sub_1003C18  +
push dword ptr [eax]  +
mov ecx esi +
call sub_100C556  +
push 2  +
lea eax [ebp+var_4] +
push eax  +
lea ecx [ebp+arg_4] +
call sub_1003075  +
push dword ptr [eax]  +
push [ebp+lpString]  +
push dword ptr [esi+4]  +
call memcpy  +
mov eax [esi+4] +
add esp 0Ch +
mov [esi+0Ch] edi +
xor ecx ecx +
mov [eax+edi*2] cx +
mov eax [esi+0Ch] +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
cmp eax [esi+8] +
jbe loc_100C952  +
mov edx [esi] +
push eax  +
call dword ptr [edx]  +
mov eax [esi+4] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov eax [ecx] +
push dword ptr [ecx+0Ch]  +
push [ebp+arg_0]  +
call dword ptr [eax+10h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push dword ptr [eax+0Ch]  +
push dword ptr [eax+4]  +
call sub_100C95F  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ecx+8] +
mov eax [ebp+arg_0] +
sub esp 20h +
dec edx  +
cmp eax edx +
jbe loc_100C9CE  +
push 800700CEh  +
lea ecx [ebp+var_20] +
call sub_100C517  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push offset dword_10126DC  +
lea eax [ebp+var_10] +
push eax  +
movs   +
call _CxxThrowException  +
mov [ecx+0Ch] eax +
mov ecx [ecx+4] +
xor edx edx +
mov [ecx+eax*2] dx +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFFFh  +
push offset loc_1011B4A  +
mov eax large fs:0 +
push eax  +
mov eax 182Ch +
call __alloca_probe  +
mov eax dword_1014000 +
xor eax ebp +
mov [ebp+var_10] eax +
push ebx  +
push esi  +
push edi  +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov esi [ebp+arg_0] +
mov edi ecx +
push 0  +
mov ecx esi +
call sub_100C997  +
mov eax [esi] +
push 0FFFFFFFFh  +
push dword ptr [esi+0Ch]  +
mov ecx esi +
push offset dword_100CB5C  +
call dword ptr [eax+10h]  +
cmp dword ptr [edi+0A4h] 0 +
mov ebx offset dword_100CB58 +
jnz loc_100CA7E  +
cmp dword ptr [edi+10h] 0 +
jz loc_100CAE6  +
push 72h  +
lea ecx [ebp+var_1024] +
call sub_100DAAD  +
push dword ptr [edi+8]  +
and [ebp+var_4] 0 +
push [ebp+var_1020]  +
lea eax [ebp+var_810] +
push 400h  +
push eax  +
call sub_100250E  +
add esp 10h +
jmp loc_100CAB7  +
push 71h  +
lea ecx [ebp+var_1024] +
call sub_100DAAD  +
mov eax [edi+9Ch] +
mov ecx [edi+8] +
push eax  +
push ecx  +
push [ebp+var_1020]  +
lea eax [ebp+var_810] +
push 400h  +
push eax  +
mov [ebp+var_4] 1 +
call sub_100250E  +
add esp 14h +
mov eax [esi] +
push 0FFFFFFFFh  +
push dword ptr [esi+0Ch]  +
mov ecx esi +
push ebx  +
call dword ptr [eax+0Ch]  +
mov eax [esi] +
push 0FFFFFFFFh  +
push dword ptr [esi+0Ch]  +
lea ecx [ebp+var_810] +
push ecx  +
mov ecx esi +
call dword ptr [eax+10h]  +
or [ebp+var_4] 0FFFFFFFFh +
lea ecx [ebp+var_1024] +
call sub_10095D9  +
cmp dword ptr [edi+138h] 0 +
jz loc_100CB3C  +
push 6Fh  +
lea ecx [ebp+var_1838] +
call sub_100DAAD  +
mov eax [esi] +
push 0FFFFFFFFh  +
push dword ptr [esi+0Ch]  +
mov ecx esi +
push ebx  +
mov [ebp+var_4] 2 +
call dword ptr [eax+0Ch]  +
push [ebp+var_182C]  +
mov ecx esi +
push [ebp+var_1834]  +
call sub_100C95F  +
add edi 12Ch +
push edi  +
mov ecx esi +
call sub_100C97B  +
lea ecx [ebp+var_1838] +
call sub_10095D9  +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_10] +
xor ecx ebp +
call sub_10012FD  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFFFh  +
push offset loc_1011BB0  +
mov eax large fs:0 +
push eax  +
mov eax 182Ch +
call __alloca_probe  +
mov eax dword_1014000 +
xor eax ebp +
mov [ebp+var_10] eax +
push esi  +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov eax ecx +
lea esi [eax+12Ch] +
push 0  +
mov ecx esi +
call sub_100C997  +
push 70h  +
lea ecx [ebp+var_1024] +
call sub_100DAAD  +
and [ebp+var_4] 0 +
push 1  +
push [ebp+arg_0]  +
lea ecx [ebp+var_1838] +
call sub_1011105  +
push [ebp+arg_0]  +
push dword ptr [eax+4]  +
lea eax [ebp+var_810] +
push [ebp+var_1020]  +
push 400h  +
push eax  +
call sub_100250E  +
mov eax [esi] +
add esp 14h +
push 0FFFFFFFFh  +
push 0  +
lea ecx [ebp+var_810] +
push ecx  +
mov ecx esi +
call dword ptr [eax+10h]  +
lea ecx [ebp+var_1024] +
call sub_10095D9  +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop esi  +
mov ecx [ebp+var_10] +
xor ecx ebp +
call sub_10012FD  +
leave   +
retn 4  +
***
call sub_1002CA3  +
mov esi ecx +
lea ecx [ebp-824h] +
call sub_100956F  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-824h] +
push eax  +
mov ecx esi +
call sub_100C9E3  +
mov eax [ebp-820h] +
mov [ebp-850h] eax +
mov eax [ebp+10h] +
xor edx edx +
inc edx  +
add eax 0FFFFFFFCh +
add eax 4 +
mov ecx [eax] +
movzx ebx dx +
mov [ebp+ebx*4-850h] ecx +
test ecx ecx +
jz loc_100CC82  +
inc edx  +
cmp dx 0Bh +
jb loc_100CC68  +
mov ecx [esi] +
push 0  +
push 0  +
lea eax [ebp-850h] +
push eax  +
movzx eax dx +
push eax  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_100DB24  +
lea ecx [ebp-824h] +
mov esi eax +
call sub_10095D9  +
mov eax esi +
call sub_1002CE0  +
retn 0Ch  +
***
mov eax [ecx] +
mov ecx eax +
and ecx 1FFF0000h +
cmp ecx 70000h +
jnz loc_100CCCF  +
movzx eax ax +
push eax  +
call ds:SetLastError  +
retn   +
***
movzx eax word ptr [esi] +
push eax  +
call sub_1003D19  +
test eax eax +
jnz loc_100CD0F  +
dec edi  +
dec esi  +
dec esi  +
test edi edi +
jge loc_100CCFB  +
pop esi  +
mov eax edi +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
mov esi ecx +
mov [esi+4] eax +
mov eax [ebp+arg_0] +
mov [esi+8] eax +
mov eax [ebp+arg_8] +
mov dword ptr [esi] offset off_1002F4C +
mov ecx [eax+8] +
push dword ptr [eax+4]  +
mov ecx [ecx+4] +
mov eax [eax] +
lea eax [ecx+eax*2] +
push eax  +
mov ecx esi +
call sub_100C87D  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx ecx [ebp+arg_0] +
push 3  +
pop eax  +
cmp ecx eax +
jz loc_100CD8C  +
cmp ecx 13h +
jz loc_100CD8C  +
jle loc_100CD8F  +
cmp ecx 15h +
jle loc_100CD8F  +
cmp ecx 80h +
jz loc_100CD8F  +
cmp ecx 82h +
jnz loc_100CD8F  +
xor eax eax +
inc eax  +
jmp loc_100CD8F  +
push 4  +
pop eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi ds:SetLastError +
push edi  +
push 0  +
mov edi ecx +
call esi  +
mov eax [edi+9Ch] +
test eax eax +
jnz loc_100CDBF  +
push 6  +
call esi  +
xor eax eax +
jmp loc_100CDE3  +
lea ecx [ebp-8] +
push ecx  +
push 0  +
push 0  +
push 0  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push eax  +
call ds:RegEnumKeyExW  +
test eax eax +
jz loc_100CDE0  +
push eax  +
jmp loc_100CDB9  +
***
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+9Ch] +
test eax eax +
jnz loc_100CE09  +
push 6  +
call ds:SetLastError  +
xor eax eax +
jmp loc_100CE25  +
push dword ptr [ebp+8]  +
push eax  +
call ds:RegDeleteValueW  +
test eax eax +
jz loc_100CE1A  +
push eax  +
jmp loc_100CDFF  +
***
push 0  +
call ds:SetLastError  +
xor eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ecx+9Ch] +
push esi  +
xor esi esi +
cmp eax esi +
jnz loc_100CE4D  +
push 6  +
call ds:SetLastError  +
xor eax eax +
jmp loc_100CE8F  +
lea ecx [ebp-4] +
push ecx  +
lea ecx [ebp+8] +
push ecx  +
push esi  +
push 0F003Fh  +
push esi  +
push esi  +
push esi  +
push dword ptr [ebp+8]  +
push eax  +
call ds:RegCreateKeyExW  +
cmp eax esi +
jz loc_100CE6F  +
push eax  +
jmp loc_100CE43  +
***
push dword ptr [ebp+8]  +
call ds:RegCloseKey  +
cmp dword ptr [ebp-4] 2 +
jnz loc_100CE85  +
push 0B7h  +
jmp loc_100CE43  +
***
push esi  +
call ds:SetLastError  +
xor eax eax +
inc eax  +
pop esi  +
leave   +
retn 4  +
***
push ebp  +
mov ebp esp +
mov eax [ecx+9Ch] +
test eax eax +
jnz loc_100CEB4  +
push 6  +
call ds:SetLastError  +
xor eax eax +
jmp loc_100CED4  +
push 0  +
push 0  +
push dword ptr [ebp+8]  +
push eax  +
call ds:RegDeleteKeyExW  +
test eax eax +
jz loc_100CEC9  +
push eax  +
jmp loc_100CEAA  +
***
push 0  +
call ds:SetLastError  +
xor eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ecx+9Ch] +
test edx edx +
jnz loc_100CEF8  +
push 6  +
call ds:SetLastError  +
xor eax eax +
jmp loc_100CF25  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_100CD5B  +
push eax  +
push 0  +
push dword ptr [ebp+8]  +
push edx  +
call ds:RegSetValueExW  +
test eax eax +
jz loc_100CF1A  +
push eax  +
jmp loc_100CEEE  +
***
push 0  +
call ds:SetLastError  +
xor eax eax +
inc eax  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ds:SetLastError +
push edi  +
push 0  +
mov edi ecx +
call esi  +
mov eax [edi+9Ch] +
test eax eax +
jnz loc_100CF54  +
push 6  +
call esi  +
xor eax eax +
jmp loc_100CF88  +
push dword ptr [ebp+14h]  +
lea ecx [ebp-4] +
push dword ptr [ebp+10h]  +
push ecx  +
push 0  +
push dword ptr [ebp+8]  +
push eax  +
call ds:RegQueryValueExW  +
test eax eax +
jz loc_100CF71  +
push eax  +
jmp loc_100CF4E  +
***
push dword ptr [ebp+0Ch]  +
call sub_100CD5B  +
cmp [ebp-4] eax +
jz loc_100CF85  +
push 70Ch  +
jmp loc_100CF4E  +
***
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
leave   +
retn 10h  +
***
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+8]  +
mov esi ecx +
lea eax [esi+10h] +
push eax  +
push 21h  +
call sub_100CD1C  +
mov dword ptr [esi] offset off_10029EC +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ecx+10h] +
push eax  +
push 400h  +
push 20h  +
push dword ptr [ebp+8]  +
call sub_100C633  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ecx+10h] +
cmp [ecx+4] eax +
jz loc_100CFF4  +
push eax  +
push 20h  +
push dword ptr [ebp+8]  +
call sub_100C4EA  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+10h] +
push eax  +
mov dword ptr [esi] offset off_10029EC +
call sub_1002EDE  +
mov dword ptr [esi] offset off_1002F4C +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100CFFD  +
test byte ptr [ebp+8] 1 +
jz loc_100D04A  +
push esi  +
call off_1014494  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
add ecx 4 +
jmp sub_1002EBD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_1002A08 +
call sub_1002EBD  +
test byte ptr [ebp+8] 1 +
jz loc_100D08C  +
push esi  +
call off_1014494  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
xor eax eax +
inc eax  +
retn 10h  +
***
mov edi edi +
push esi  +
lea esi [ecx+9Ch] +
mov eax [esi] +
test eax eax +
jz loc_100D0C2  +
cmp dword ptr [ecx+98h] 0 +
jz loc_100D0C2  +
push eax  +
call ds:RegCloseKey  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
push 8  +
mov eax offset loc_1011CCF +
call sub_100138C  +
mov esi ecx +
push 0  +
call ds:SetLastError  +
push 0A0h  +
call off_1014498  +
mov ecx eax +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_100D10A  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
push esi  +
call sub_1003495  +
mov esi eax +
jmp loc_100D10C  +
xor esi esi +
test esi esi +
jz loc_100D124  +
call ds:GetLastError  +
test eax eax +
jnz loc_100D124  +
mov eax [ebp+0Ch] +
mov [eax] esi +
xor eax eax +
inc eax  +
jmp loc_100D13C  +
mov eax [ebp+0Ch] +
and dword ptr [eax] 0 +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jz loc_100D13A  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
xor eax eax +
call __EH_epilog3  +
retn 0Ch  +
***
push 14h  +
mov eax offset loc_1011D59 +
call sub_1001410  +
mov edi ecx +
mov esi ds:SetLastError +
xor ebx ebx +
push ebx  +
call esi  +
cmp [edi+9Ch] ebx +
jnz loc_100D172  +
push 6  +
call esi  +
xor eax eax +
jmp loc_100D1E1  +
mov esi [ebp+0Ch] +
mov eax [esi+8] +
mov [ebp-14h] eax +
mov eax [esi+4] +
lea ecx [ebp-20h] +
push ecx  +
push ebx  +
push ebx  +
push ebx  +
lea ecx [ebp-14h] +
push ecx  +
push eax  +
push dword ptr [ebp+8]  +
push dword ptr [edi+9Ch]  +
call ds:RegEnumKeyExW  +
cmp eax 0EAh +
jnz loc_100D1C7  +
mov eax [ebp-14h] +
add eax eax +
push eax  +
mov ecx esi +
mov [ebp-14h] eax +
mov [ebp-4] ebx +
call sub_100C93D  +
or dword ptr [ebp-4] 0FFFFFFFFh +
jmp loc_100D17B  +
***
mov ecx [ebp-18h] +
call sub_100CCBA  +
mov eax offset loc_100D16E +
retn   +
***
cmp eax ebx +
jz loc_100D1D4  +
push eax  +
call ds:SetLastError  +
jmp loc_100D16E  +
***
push dword ptr [ebp-14h]  +
mov ecx esi +
call sub_100C997  +
xor eax eax +
inc eax  +
call __EH_epilog3  +
retn 8  +
***
push 0Ch  +
mov eax offset loc_1011D9D +
call sub_1001410  +
mov ebx ecx +
mov edi ds:SetLastError +
xor esi esi +
push esi  +
call edi  +
cmp [ebx+9Ch] esi +
jnz loc_100D217  +
push 6  +
call edi  +
xor eax eax +
jmp loc_100D283  +
mov edi [ebp+0Ch] +
mov eax [edi+8] +
mov [ebp-14h] eax +
mov eax [edi+4] +
push esi  +
push esi  +
push esi  +
push esi  +
lea ecx [ebp-14h] +
push ecx  +
push eax  +
push dword ptr [ebp+8]  +
push dword ptr [ebx+9Ch]  +
call ds:RegEnumValueW  +
cmp eax 0EAh +
jnz loc_100D269  +
mov eax [ebp-14h] +
add eax eax +
push eax  +
mov ecx edi +
mov [ebp-14h] eax +
mov [ebp-4] esi +
call sub_100C93D  +
or dword ptr [ebp-4] 0FFFFFFFFh +
jmp loc_100D220  +
***
mov ecx [ebp-18h] +
call sub_100CCBA  +
mov eax offset loc_100D213 +
retn   +
***
cmp eax esi +
jz loc_100D276  +
push eax  +
call ds:SetLastError  +
jmp loc_100D213  +
***
push dword ptr [ebp-14h]  +
mov ecx edi +
call sub_100C997  +
xor eax eax +
inc eax  +
call __EH_epilog3  +
retn 8  +
***
call sub_100BFE7  +
call sub_100CCBA  +
mov eax offset loc_100D2CB +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
push [ebp+arg_8]  +
mov esi ecx +
mov edi [esi+0Ch] +
lea eax [ebp+var_4] +
push eax  +
lea ecx [ebp+arg_4] +
mov [ebp+arg_4] ebx +
call sub_1003BC1  +
cmp [eax] edi +
jbe loc_100D52C  +
push 800700CEh  +
lea ecx [ebp+var_24] +
call sub_100C517  +
mov esi eax +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
push offset dword_10126DC  +
lea eax [ebp+var_14] +
push eax  +
movs   +
call _CxxThrowException  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_8] +
pop edi  +
mov [eax+8] esi +
pop esi  +
mov [eax] ebx +
mov [eax+4] ecx +
pop ebx  +
leave   +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
mov eax [ecx+0Ch] +
sub eax [ebp+0Ch] +
push eax  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_100D4DF  +
mov eax [ebp+8] +
pop ebp  +
retn 8  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+lpBuffer] +
push esi  +
mov esi ds:LoadStringW +
push edi  +
mov edi ecx +
xor ecx ecx +
mov [ebx] cx +
mov ecx [edi+4] +
xor eax eax +
test ecx ecx +
jz loc_100D69C  +
push [ebp+nBufferMax]  +
push ebx  +
push [ebp+uID]  +
push ecx  +
call esi  +
test eax eax +
jnz loc_100D6AC  +
mov edi [edi] +
test edi edi +
jz loc_100D6AC  +
push [ebp+nBufferMax]  +
push ebx  +
push [ebp+uID]  +
push edi  +
call esi  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_100D6CA  +
push eax  +
call ds:FreeLibrary  +
mov esi [esi+4] +
test esi esi +
jz loc_100D6D7  +
push esi  +
call sub_1010166  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
mov esi ecx +
push 0FFFFFFFFh  +
push [ebp+lpString]  +
mov [esi+4] eax +
mov eax [ebp+arg_0] +
mov dword ptr [esi] offset off_1002F4C +
mov [esi+8] eax +
call sub_100C87D  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+lpBuffer] +
push esi  +
mov esi ecx +
mov ecx [ebp+nBufferMax] +
push ecx  +
push eax  +
push [ebp+uID]  +
mov [esi+8] ecx +
mov ecx [ebp+arg_8] +
mov dword ptr [esi] offset off_1002F4C +
mov [esi+4] eax +
call sub_100D66D  +
mov [esi+0Ch] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+0Ch] +
dec eax  +
js loc_100D765  +
mov ecx [ecx+4] +
lea ecx [ecx+eax*2] +
mov dx [ecx] +
cmp dx [ebp+arg_0] +
jz loc_100D765  +
dec eax  +
dec ecx  +
dec ecx  +
test eax eax +
jge loc_100D755  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+lpString]  +
mov esi ecx +
lea eax [esi+10h] +
push eax  +
push 21h  +
call sub_100D6DE  +
mov dword ptr [esi] offset off_10029EC +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+uID]  +
mov esi ecx +
push [ebp+arg_0]  +
lea eax [esi+10h] +
push eax  +
push 401h  +
call sub_100D70E  +
mov dword ptr [esi] offset off_1002A34 +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100D6B8  +
push 2  +
push 0  +
push [ebp+lpLibFileName]  +
call ds:LoadLibraryExW  +
push 0  +
push 8  +
push [ebp+lpLibFileName]  +
mov [esi] eax +
call sub_10102D7  +
mov [esi+4] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ecx+0Ch] +
test eax eax +
jz loc_100D813  +
mov edx [ecx+4] +
cmp word ptr [edx+eax*2-2] 5Ch +
jz loc_100D820  +
mov edx [ecx] +
push 0FFFFFFFFh  +
push eax  +
push offset dword_100D824  +
call dword ptr [edx+10h]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push 105h  +
mov ecx esi +
call sub_100C93D  +
mov ecx [esi+8] +
dec ecx  +
push ecx  +
push eax  +
push dword_101412C  +
call ds:GetModuleFileNameW  +
push eax  +
mov ecx esi +
call sub_100C997  +
push 5Ch  +
mov ecx esi +
call sub_100D744  +
inc eax  +
push eax  +
mov ecx esi +
call sub_100C997  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001410  +
mov esi ecx +
mov [ebp-14h] esi +
call sub_1003288  +
and dword ptr [ebp-4] 0 +
push esi  +
mov dword ptr [esi] offset off_10032A4 +
mov byte ptr [ebp-4] 1 +
call sub_100D82D  +
cmp dword ptr [ebp+8] 0 +
jz loc_100D8BF  +
push esi  +
call sub_100D7F9  +
mov eax [esi] +
push 0FFFFFFFFh  +
push dword ptr [esi+0Ch]  +
mov ecx esi +
push dword ptr [ebp+8]  +
call dword ptr [eax+10h]  +
jmp loc_100D8EF  +
push 5Ch  +
mov ecx esi +
call sub_100D744  +
cmp eax 0FFFFFFFFh +
jz loc_100D8EF  +
push eax  +
mov ecx esi +
call sub_100C997  +
jmp loc_100D8EF  +
mov eax [ebp-14h] +
and dword ptr [eax+0Ch] 0 +
mov eax [eax+4] +
xor ecx ecx +
mov [eax] cx +
mov eax offset loc_100D8EC +
retn   +
mov esi [ebp-14h] +
mov eax esi +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1002E89  +
test byte ptr [ebp+8] 1 +
jz loc_100D918  +
push esi  +
call off_1014494  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100BFE7  +
mov edi [ebp+8] +
mov esi ecx +
mov [ebp-0B8h] esi +
call sub_1003288  +
and dword ptr [ebp-4] 0 +
push 20019h  +
lea ecx [ebp-0B4h] +
mov dword ptr [esi] offset off_10032A4 +
mov byte ptr [ebp-4] 1 +
call sub_1003535  +
push esi  +
push offset aInstalldirecto  +
lea ecx [ebp-0B4h] +
mov byte ptr [ebp-4] 2 +
call sub_100D290  +
push esi  +
test eax eax +
jnz loc_100D982  +
call sub_100D82D  +
jmp loc_100D998  +
call sub_100D7F9  +
mov eax [esi] +
push 0FFFFFFFFh  +
push dword ptr [esi+0Ch]  +
mov ecx esi +
push offset dword_1006368  +
call dword ptr [eax+10h]  +
push esi  +
call sub_100D7F9  +
mov eax [esi] +
push 0FFFFFFFFh  +
push dword ptr [esi+0Ch]  +
mov ecx esi +
push edi  +
call dword ptr [eax+10h]  +
lea ecx [ebp-0B4h] +
mov byte ptr [ebp-4] 1 +
call sub_1002E89  +
jmp loc_100D9DA  +
mov eax [ebp-0B8h] +
and dword ptr [eax+0Ch] 0 +
mov eax [eax+4] +
xor ecx ecx +
mov [eax] cx +
mov eax offset loc_100D9D4 +
retn   +
mov esi [ebp-0B8h] +
mov eax esi +
call sub_100C027  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1002EBD  +
test byte ptr [ebp+8] 1 +
jz loc_100DA25  +
push esi  +
call off_1014494  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 94h +
test byte ptr dword_1014580 1 +
jnz loc_100DA65  +
or dword_1014580 1 +
and dword_1014578 0 +
and dword_101457C 0 +
push offset loc_10123C9  +
call sub_1003B50  +
pop ecx  +
cmp dword_1014574 0 +
push esi  +
mov esi offset dword_1014578 +
jnz loc_100DAA3  +
push offset aTquery_dll  +
lea ecx [ebp+var_94] +
mov dword_1014574 1 +
call sub_100D924  +
push dword ptr [eax+4]  +
mov ecx esi +
call sub_100D7C4  +
lea ecx [ebp+var_94] +
call sub_1002EBD  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+uID]  +
mov esi ecx +
call sub_100DA31  +
push eax  +
mov ecx esi +
call sub_100D796  +
mov dword ptr [esi] offset off_1002A34 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
cmp dword_1014584 0 +
jz loc_100DAE4  +
xor eax eax +
inc eax  +
retn   +
push esi  +
lea esi [ecx+54h] +
cmp dword ptr [esi] 0 +
jz loc_100DAF2  +
xor eax eax +
inc eax  +
pop esi  +
retn   +
push edi  +
push dword ptr [ecx+4]  +
push 0  +
call ds:RegisterEventSourceW  +
mov edi eax +
test edi edi +
jz loc_100DB1C  +
push 0  +
push edi  +
push esi  +
call ds:InterlockedCompareExchange  +
test eax eax +
jz loc_100DB19  +
push edi  +
call ds:DeregisterEventSource  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_1014584 0 +
push esi  +
mov esi ecx +
jnz loc_100DB73  +
push [ebp+dwEventID]  +
mov ecx offset unk_1014588 +
call sub_100E38D  +
test al al +
jnz loc_100DB73  +
mov ecx esi +
call sub_100DAD7  +
test eax eax +
jz loc_100DB76  +
push [ebp+lpRawData]  +
movzx eax word ptr [esi+58h] +
push [ebp+lpStrings]  +
push [ebp+dwDataSize]  +
push dword ptr [ebp+wNumStrings]  +
push 0  +
push [ebp+dwEventID]  +
push eax  +
push dword ptr [ebp+wType]  +
push dword ptr [esi+54h]  +
call ds:ReportEventW  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+lpString]  +
mov esi ecx +
call sub_100D76E  +
mov ax [ebp+arg_4] +
and dword ptr [esi+54h] 0 +
mov [esi+58h] ax +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+54h] +
test eax eax +
jz loc_100DBBB  +
push eax  +
call ds:DeregisterEventSource  +
mov ecx esi +
pop esi  +
jmp sub_100CFFD  +
***
mov eax [ecx] +
test eax eax +
jz locret_100DBD5  +
push eax  +
call off_1014494  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+lpWideCharStr] +
push esi  +
mov esi [ebp+cchWideChar] +
push edi  +
push esi  +
push ebx  +
push [ebp+cchMultiByte]  +
push [ebp+lpMultiByteStr]  +
push 0  +
push 0  +
call ds:MultiByteToWideChar  +
mov edi eax +
test esi esi +
jle loc_100DC22  +
cmp edi esi +
jge loc_100DC11  +
test edi edi +
jl loc_100DC11  +
xor eax eax +
mov [ebx+edi*2] ax +
jmp loc_100DC22  +
xor eax eax +
push 7Ah  +
xor edi edi +
mov [ebx+esi*2-2] ax +
call ds:SetLastError  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov ecx [ebp+SystemTimeAsFileTime.dwHighDateTime] +
mov eax [ebp+SystemTimeAsFileTime.dwLowDateTime] +
push 0  +
push 0Ah  +
push ecx  +
push eax  +
call __alldiv  +
push 0  +
push 3E8h  +
push edx  +
push eax  +
call __alldiv  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
xor ecx ecx +
mov [eax] ecx +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov ecx [ebp+arg_0] +
mov [eax+14h] ecx +
pop ebp  +
retn 4  +
***
xor eax eax +
cmp dword ptr [ecx] 2 +
jnz locret_100DC9A  +
cmp [ecx+10h] eax +
jle locret_100DC9A  +
inc eax  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100DC30  +
mov ecx [esi] +
sub ecx 0 +
jz loc_100DCDC  +
dec ecx  +
jz loc_100DCBC  +
dec ecx  +
jnz loc_100DCEA  +
inc dword ptr [esi+10h]  +
pop esi  +
retn   +
mov ecx [esi+0Ch] +
cmp ecx dword_1014520 +
jl loc_100DCD6  +
mov dword ptr [esi] 2 +
mov dword ptr [esi+10h] 1 +
jmp loc_100DCE4  +
inc ecx  +
mov [esi+0Ch] ecx +
pop esi  +
retn   +
xor ecx ecx +
inc ecx  +
mov [esi+0Ch] ecx +
mov [esi] ecx +
mov [esi+8] edx +
mov [esi+4] eax +
pop esi  +
retn   +
***
mov eax [ecx] +
test eax eax +
jz loc_100DCFF  +
cmp eax 1 +
jz loc_100DCFF  +
xor al al +
retn   +
mov al 1 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_4]  +
mov [ebp+var_4] 4 +
push 0  +
push 10h  +
push [ebp+arg_0]  +
push offset aSoftwareMicr_1  +
push 80000002h  +
call ds:SHRegGetValueW  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
lea eax [ebp+var_4] +
push eax  +
push offset aEventthrottlem  +
call sub_100DD07  +
xor esi esi +
inc esi  +
test eax eax +
jnz loc_100DDBF  +
mov eax [ebp+var_4] +
cmp eax esi +
mov dword_1014520 esi +
jl loc_100DDBF  +
mov dword_1014520 eax +
lea eax [ebp+var_4] +
push eax  +
push offset aEventthrottl_0  +
call sub_100DD07  +
test eax eax +
jnz loc_100DDE3  +
mov eax [ebp+var_4] +
cmp eax esi +
mov dword_1014524 esi +
jl loc_100DDE3  +
mov dword_1014524 eax +
lea eax [ebp+var_4] +
push eax  +
push offset aEventthrottleb  +
call sub_100DD07  +
test eax eax +
jnz loc_100DE07  +
mov eax [ebp+var_4] +
cmp eax esi +
mov dword_1014528 esi +
jl loc_100DE07  +
mov dword_1014528 eax +
lea eax [ebp+var_4] +
push eax  +
push offset aEventthrottlef  +
call sub_100DD07  +
test eax eax +
jnz loc_100DE2B  +
mov eax [ebp+var_4] +
cmp eax esi +
mov dword_101452C esi +
jl loc_100DE2B  +
mov dword_101452C eax +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
call sub_100DC30  +
mov ecx [esi] +
mov edi eax +
xor eax eax +
sub ecx eax +
mov bl 1 +
jz loc_100DF58  +
dec ecx  +
jz loc_100DF49  +
dec ecx  +
jnz loc_100DF5E  +
cmp [esi+10h] eax +
mov ecx [esi+8] +
setnl bl  +
cmp ecx edx +
jl loc_100DF58  +
jg loc_100DF5E  +
mov ecx [esi+4] +
cmp ecx edi +
ja loc_100DF5E  +
jmp loc_100DF58  +
cmp [esi+0Ch] eax +
mov ecx [esi+8] +
setnl bl  +
cmp ecx edx +
jg loc_100DF5E  +
jge loc_100DF40  +
cmp bl al +
jz loc_100DF5E  +
mov al 1 +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ecx +
mov ecx esi +
call sub_100DF13  +
test al al +
jz loc_100DF87  +
push 5  +
pop ecx  +
movs   +
mov al 1 +
jmp loc_100DF89  +
xor al al +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
mov eax dword_1014000 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
push dword ptr [esi+14h]  +
lea eax [ebp+var_24] +
push offset a08x  +
push 10h  +
xor ebx ebx +
push eax  +
mov [ebp+var_25] bl +
call sub_100250E  +
add esp 10h +
test eax eax +
jl loc_100E016  +
lea eax [ebp+var_2C] +
push eax  +
lea eax [ebp+var_40] +
push eax  +
push ebx  +
push 8  +
lea eax [ebp+var_24] +
push eax  +
push edi  +
push 80000002h  +
mov [ebp+var_40] ebx +
mov [ebp+var_3C] ebx +
mov [ebp+var_38] ebx +
mov [ebp+var_34] ebx +
mov [ebp+var_30] ebx +
mov [ebp+var_2C] 14h +
call ds:SHRegGetValueW  +
test eax eax +
jnz loc_100E016  +
cmp [ebp+var_2C] 14h +
jnz loc_100E016  +
lea eax [ebp+var_40] +
push eax  +
mov ecx esi +
call sub_100DF67  +
mov [ebp+var_25] al +
mov ecx [ebp+var_4] +
mov al [ebp+var_25] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10012FD  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
mov eax dword_1014000 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
push dword ptr [esi+14h]  +
lea eax [ebp+ValueName] +
push offset a08x  +
push 10h  +
push eax  +
xor bl bl +
call sub_100250E  +
add esp 10h +
test eax eax +
jl loc_100E09F  +
lea eax [ebp+hKey] +
push eax  +
push 2  +
push 0  +
push edi  +
push 80000002h  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_100E09F  +
push 14h  +
push esi  +
push 3  +
push eax  +
lea eax [ebp+ValueName] +
push eax  +
push [ebp+hKey]  +
call ds:RegSetValueExW  +
test eax eax +
jnz loc_100E096  +
inc bl  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov al bl +
xor ecx ebp +
pop ebx  +
call sub_10012FD  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 17Ch +
mov eax dword_1014000 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi ecx +
call sub_100DC8D  +
test al al +
jz loc_100E244  +
push dword ptr [esi+14h]  +
lea ecx [ebp+var_16C] +
call sub_100DC67  +
push offset aSoftwareMicr_2  +
lea ecx [ebp+var_16C] +
call sub_100DF94  +
test al al +
jz loc_100E12D  +
mov eax [ebp+var_16C] +
cmp eax [esi] +
jnz loc_100E12D  +
mov eax [ebp+var_168] +
cmp eax [esi+4] +
jnz loc_100E12D  +
mov eax dword ptr [ebp+Time.wYear] +
cmp eax [esi+8] +
jnz loc_100E12D  +
mov eax dword ptr [ebp+Time.wHour] +
cmp eax [esi+10h] +
jz loc_100E244  +
push dword ptr [esi+14h]  +
lea eax [ebp+var_24] +
push offset aU  +
push 10h  +
push eax  +
call sub_100250E  +
add esp 10h +
test eax eax +
jl loc_100E244  +
push dword ptr [esi+10h]  +
lea eax [ebp+var_44] +
push offset aD  +
push 10h  +
push eax  +
call sub_100250E  +
add esp 10h +
test eax eax +
jl loc_100E244  +
push edi  +
xor edi edi +
push edi  +
push 2710h  +
push dword ptr [esi+8]  +
push dword ptr [esi+4]  +
call __allmul  +
mov [ebp+FileTime.dwLowDateTime] eax +
lea eax [ebp+UniversalTime] +
push eax  +
lea eax [ebp+FileTime] +
push eax  +
mov [ebp+FileTime.dwHighDateTime] edx +
call ds:FileTimeToSystemTime  +
test eax eax +
jz loc_100E243  +
lea eax [ebp+Time] +
push eax  +
lea eax [ebp+UniversalTime] +
push eax  +
push edi  +
call ds:SystemTimeToTzSpecificLocalTime  +
test eax eax +
jz loc_100E243  +
push 80h  +
lea eax [ebp+TimeStr] +
push eax  +
push edi  +
lea eax [ebp+Time] +
push eax  +
push edi  +
push 800h  +
call ds:GetTimeFormatW  +
test eax eax +
jle loc_100E243  +
lea eax [ebp+var_24] +
mov [ebp+var_150] eax +
lea eax [ebp+var_44] +
mov [ebp+FileTime.dwLowDateTime] eax +
push offset SourceName  +
lea eax [ebp+TimeStr] +
push edi  +
mov [ebp+Strings] offset dword_1006368 +
mov [ebp+FileTime.dwHighDateTime] eax +
call ds:RegisterEventSourceW  +
mov esi eax +
cmp esi edi +
jz loc_100E243  +
push edi  +
lea eax [ebp+Strings] +
push eax  +
push edi  +
push 4  +
push edi  +
push 800003F7h  +
push 1  +
push 2  +
push esi  +
call ds:ReportEventW  +
push esi  +
call ds:DeregisterEventSource  +
pop edi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_10012FD  +
leave   +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
call sub_100DC30  +
mov ecx eax +
mov eax [esi] +
dec eax  +
mov edi edx +
jz loc_100E32B  +
dec eax  +
jnz loc_100E344  +
sub ecx [esi+4] +
mov eax dword_1014528 +
sbb edi [esi+8] +
cdq   +
cmp edi edx +
jl loc_100E344  +
jg loc_100E322  +
cmp ecx eax +
jbe loc_100E344  +
mov ecx esi +
call sub_100E0B7  +
jmp loc_100E341  +
sub ecx [esi+4] +
mov eax dword_1014524 +
sbb edi [esi+8] +
cdq   +
cmp edi edx +
jl loc_100E344  +
jg loc_100E341  +
cmp ecx eax +
jbe loc_100E344  +
and dword ptr [esi] 0 +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100E2F5  +
mov ecx esi +
call sub_100DCA0  +
mov ecx esi +
call sub_100DCF1  +
xor ecx ecx +
test al al +
setz cl  +
mov al cl +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp byte ptr [esi] 0 +
jnz loc_100E386  +
call sub_100DD91  +
mov byte ptr [esi] 1 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
call sub_100E374  +
movzx eax [ebp+arg_0] +
push eax  +
lea ecx [ebp+var_18] +
call sub_100DC67  +
mov esi offset aSoftwareMicr_3 +
push esi  +
lea ecx [ebp+var_18] +
call sub_100DF94  +
lea ecx [ebp+var_18] +
call sub_100E34C  +
push esi  +
lea ecx [ebp+var_18] +
mov bl al +
call sub_100E02F  +
xor eax eax +
cmp [ebp+var_18] 2 +
jnz loc_100E3DB  +
cmp [ebp+var_8] eax +
jle loc_100E3DB  +
inc eax  +
or [edi+1] al +
pop edi  +
pop esi  +
mov al bl +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_100E497  +
cmp [ebp+arg_4] eax +
jz loc_100E493  +
mov dl [ebx] +
test dl dl +
jz loc_100E493  +
mov [ecx] dl +
inc ecx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_100E47B  +
test esi esi +
jnz loc_100E49E  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
mov byte ptr [ecx] 0 +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100E4AA  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_8]  +
mov esi eax +
push [ebp+arg_4]  +
xor ebx ebx +
dec esi  +
push esi  +
push edi  +
call ds:_vsnprintf  +
add esp 10h +
test eax eax +
jl loc_100E4E2  +
cmp eax esi +
ja loc_100E4E2  +
jnz loc_100E4EC  +
mov [esi+edi] bl +
jmp loc_100E4EA  +
mov [esi+edi] bl +
mov ebx 8007007Ah +
mov eax esi +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100E4F5  +
mov [ecx] eax +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_8]  +
mov esi eax +
push [ebp+arg_4]  +
xor ebx ebx +
dec esi  +
push esi  +
push edi  +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_100E52B  +
cmp eax esi +
ja loc_100E52B  +
jnz loc_100E538  +
jmp loc_100E530  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
mov eax esi +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100E541  +
mov [ecx] eax +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push esi  +
push edi  +
lea edi [edx+10h] +
lea ecx [edx+80000h] +
cmp edi ecx +
jnb loc_100E573  +
sub ecx edi +
dec ecx  +
shr ecx 2 +
inc ecx  +
mov eax 200020h +
stos   +
lea edi [edx+7FFF0h] +
mov esi offset loc_100E588 +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
or eax 3C000A00h +
add [edi] ch +
add [eax+eax+4Fh] cl +
add [edi+0] al +
add [eax] al +
add [eax-6F6F6F70h] dl +
push dword ptr [ecx]  +
call sub_100945C  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
test eax eax +
jz loc_100E5C6  +
push eax  +
call sub_100945C  +
and dword ptr [esi] 0 +
pop ecx  +
mov edi [ebp+arg_0] +
push edi  +
call sub_1009447  +
pop ecx  +
mov [esi+8] edi +
mov [esi] eax +
mov [esi+4] eax +
pop edi  +
mov byte ptr [eax] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
mov edi [esi+4] +
sub edi [esi] +
lea eax [edi+1] +
cmp [ebp+arg_0] eax +
jnb loc_100E600  +
mov [ebp+arg_0] eax +
push [ebp+arg_0]  +
call sub_1009447  +
push edi  +
push dword ptr [esi]  +
mov ebx eax +
push ebx  +
call memcpy  +
push dword ptr [esi]  +
call sub_100945C  +
mov ecx [ebp+arg_0] +
add esp 14h +
lea eax [ebx+edi] +
mov [esi] ebx +
pop edi  +
mov [esi+4] eax +
mov [esi+8] ecx +
pop esi  +
mov byte ptr [eax] 0 +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+4] +
push edi  +
mov edi [ebp+arg_0] +
cmp eax edi +
jz loc_100E65B  +
test eax eax +
jz loc_100E658  +
push eax  +
call ds:CloseHandle  +
mov [esi+4] edi +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
test eax eax +
jz loc_100E684  +
cmp eax 0FFFFFFFFh +
jz loc_100E684  +
push eax  +
call ds:CloseHandle  +
and dword ptr [esi+4] 0 +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
test eax eax +
jz loc_100E6A2  +
push eax  +
call ds:UnmapViewOfFile  +
and dword ptr [esi+4] 0 +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_100E6BE  +
push eax  +
call ds:LocalFree  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+4] +
cmp eax [esi] +
jnz loc_100E6D8  +
xor eax eax +
jmp loc_100E721  +
mov eax [esi+0Ch] +
mov ecx [esi+10h] +
imul eax eax +
mov byte ptr [eax+ecx] 0 +
mov eax [ebp+arg_0] +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_100E6EB  +
sub eax ecx +
inc eax  +
cmp eax 52h +
ja loc_100E710  +
push eax  +
mov eax [esi+0Ch] +
push [ebp+arg_0]  +
imul eax eax +
add eax [esi+10h] +
push eax  +
call memcpy  +
add esp 0Ch +
mov eax [esi+0Ch] +
inc dword ptr [esi+4]  +
inc eax  +
xor edx edx +
div  dword ptr [esi] +
xor eax eax +
inc eax  +
mov [esi+0Ch] edx +
pop esi  +
pop ebp  +
retn 4  +
***
mov edx [ecx+4] +
test edx edx +
jnz loc_100E735  +
xor eax eax +
retn   +
mov eax [ecx+8] +
push esi  +
mov esi eax +
imul esi esi +
add esi [ecx+10h] +
dec edx  +
mov [ecx+4] edx +
inc eax  +
xor edx edx +
div  dword ptr [ecx] +
mov eax esi +
pop esi  +
mov [ecx+8] edx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_8] +
xor eax eax +
cmp ecx 1 +
jbe loc_100E781  +
push eax  +
dec ecx  +
push ecx  +
push [ebp+lpBuffer]  +
movzx ecx [ebp+arg_0] +
push 400h  +
push ecx  +
push eax  +
push 1000h  +
call ds:FormatMessageW  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
mov ecx 80070057h +
test edx edx +
jz loc_100E7B8  +
cmp edx 7FFFFFFFh +
jbe loc_100E7BA  +
mov eax ecx +
test eax eax +
jl loc_100E7E1  +
cmp [ebp+arg_C] 7FFFFFFEh +
jbe loc_100E7D1  +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov byte ptr [ecx] 0 +
jmp loc_100E7E1  +
push [ebp+arg_C]  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 0  +
call sub_100E467  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_100E7FF  +
cmp [ebp+arg_4] 7FFFFFFFh +
jbe loc_100E804  +
mov eax 80070057h +
test eax eax +
jl loc_100E81D  +
mov eax [ebp+arg_4] +
push edi  +
push [ebp+arg_C]  +
mov edi [ebp+arg_0] +
push [ebp+arg_8]  +
push 0  +
call sub_100E502  +
pop edi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_100E83B  +
cmp [ebp+arg_4] 7FFFFFFFh +
jbe loc_100E840  +
mov eax 80070057h +
test eax eax +
jl loc_100E85A  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
push 0  +
call sub_100E4B6  +
pop edi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
lea eax [edi+1] +
cmp eax [esi+8] +
jbe loc_100E87B  +
push eax  +
call sub_100E5AD  +
push edi  +
push [ebp+arg_4]  +
push dword ptr [esi]  +
call memcpy  +
mov eax [esi] +
add esp 0Ch +
add eax edi +
mov [esi+4] eax +
pop edi  +
mov byte ptr [eax] 0 +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax] +
mov eax [eax+4] +
push edx  +
sub eax edx +
push eax  +
call sub_100E861  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+4] +
sub eax [esi] +
mov ecx [esi+8] +
push edi  +
mov edi [ebp+arg_0] +
sub ecx eax +
lea edx [edi+1] +
cmp edx ecx +
jbe loc_100E8E6  +
lea eax [eax+edi+1] +
push eax  +
mov ecx esi +
call sub_100E5E6  +
push edi  +
push [ebp+arg_4]  +
push dword ptr [esi+4]  +
call memcpy  +
add esp 0Ch +
add [esi+4] edi +
mov esi [esi+4] +
pop edi  +
mov byte ptr [esi] 0 +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax] +
mov eax [eax+4] +
push edx  +
sub eax edx +
push eax  +
call sub_100E8BD  +
pop ebp  +
retn 4  +
***
mov dword ptr [ecx] offset off_1006458 +
jmp sub_100E668  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1006458 +
call sub_100E668  +
test byte ptr [ebp+8] 1 +
jz loc_100E958  +
push esi  +
call sub_100945C  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov dword ptr [ecx] offset off_100645C +
jmp sub_100E68B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_100645C +
call sub_100E68B  +
test byte ptr [ebp+8] 1 +
jz loc_100E994  +
push esi  +
call sub_100945C  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100138C  +
mov esi ecx +
mov [ebp-14h] esi +
xor edi edi +
mov [esi] edi +
push edi  +
lea eax [ebp-10h] +
push eax  +
push 1  +
push offset aOSydA0xc010000  +
mov [ebp-4] edi +
mov [ebp-10h] edi +
call ConvertStringSecurityDescriptorToSecurityDescriptorA  +
test eax eax +
jnz loc_100EA0E  +
call ds:GetLastError  +
cmp eax edi +
jle loc_100E9E4  +
and eax 0FFFFh +
or eax 80070000h +
push eax  +
push 202h  +
push offset aDW7rtmEnduse_1  +
lea ecx [ebp-34h] +
call sub_100BF3B  +
mov esi eax +
lea edi [ebp-24h] +
movs   +
movs   +
movs   +
push offset dword_10126DC  +
lea eax [ebp-24h] +
push eax  +
movs   +
call _CxxThrowException  +
mov eax [ebp-10h] +
push eax  +
mov [esi] eax +
call ds:GetSecurityDescriptorLength  +
mov [esi+4] eax +
mov eax [ebp-10h] +
mov [esi+8] eax +
mov [esi+0Ch] edi +
mov eax esi +
call __EH_epilog3  +
retn   +
***
call sub_100138C  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [esi+20h]  +
mov dword ptr [ebp-4] 3 +
call sub_100945C  +
mov eax [esi+1Ch] +
pop ecx  +
mov byte ptr [ebp-4] 2 +
test eax eax +
jz loc_100EAD3  +
push eax  +
call sub_100945C  +
pop ecx  +
lea ecx [esi+14h] +
mov dword ptr [ecx] offset off_100645C +
call sub_100E68B  +
lea ecx [esi+8] +
mov edi offset off_1006458 +
mov [ecx] edi +
call sub_100E668  +
mov ecx esi +
mov [esi] edi +
call sub_100E668  +
call __EH_epilog3  +
retn   +
***
call sub_100138C  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [esi+64h]  +
mov dword ptr [ebp-4] 7 +
call sub_100945C  +
push dword ptr [esi+48h]  +
mov byte ptr [ebp-4] 6 +
call sub_100945C  +
push dword ptr [esi+3Ch]  +
mov byte ptr [ebp-4] 5 +
call sub_100945C  +
push dword ptr [esi+30h]  +
mov byte ptr [ebp-4] 4 +
call sub_100945C  +
push dword ptr [esi+24h]  +
mov byte ptr [ebp-4] 3 +
call sub_100945C  +
push dword ptr [esi+18h]  +
mov byte ptr [ebp-4] 2 +
call sub_100945C  +
lea ecx [esi+10h] +
add esp 18h +
mov dword ptr [ecx] offset off_100645C +
call sub_100E68B  +
lea ecx [esi+8] +
mov edi offset off_1006458 +
mov [ecx] edi +
call sub_100E668  +
mov ecx esi +
mov [esi] edi +
call sub_100E668  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100EB04  +
test byte ptr [ebp+8] 1 +
jz loc_100EBAE  +
push esi  +
call sub_100945C  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100EAA0  +
test byte ptr [ebp+8] 1 +
jz loc_100EBD4  +
push esi  +
call sub_100945C  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push edi  +
mov edi ecx +
cmp dword ptr [edi+10h] 0 +
mov [ebp+var_4] edi +
jz loc_100EFB2  +
push ebx  +
push esi  +
lea eax [ebp+SystemTime] +
push eax  +
call ds:GetLocalTime  +
cmp [ebp+arg_1C] 4 +
mov ebx [ebp+arg_18] +
mov esi [ebp+arg_14] +
jb loc_100EC22  +
mov eax ds:dword_100F134 +
mov [esi] eax +
mov eax ds:dword_100F138 +
mov [esi+4] eax +
add dword ptr [ebx] 4 +
mov eax [edi+10h] +
mov ecx [eax+38h] +
cmp dword ptr [ecx+90h] 0 +
jz loc_100EC6F  +
mov ecx [eax+20h] +
mov eax [ebx] +
push ecx  +
mov ecx [ebp+arg_1C] +
sub ecx eax +
push offset aLognameS  +
push ecx  +
lea eax [esi+eax*2] +
push eax  +
call sub_100250E  +
add esp 10h +
test eax eax +
jl loc_100EC6F  +
mov ecx [ebx] +
lea eax [esi+ecx*2] +
lea edi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_100EC5A  +
sub eax edi +
mov edi [ebp+var_4] +
sar eax 1 +
add ecx eax +
mov [ebx] ecx +
mov eax [edi+10h] +
mov eax [eax+38h] +
cmp dword ptr [eax+0B4h] 0 +
jz loc_100ECDB  +
movzx ecx [ebp+SystemTime.wMilliseconds] +
push ecx  +
movzx ecx [ebp+SystemTime.wSecond] +
push ecx  +
movzx ecx [ebp+SystemTime.wMinute] +
mov eax [ebx] +
push ecx  +
movzx ecx [ebp+SystemTime.wHour] +
push ecx  +
movzx ecx [ebp+SystemTime.wDay] +
push ecx  +
movzx ecx [ebp+SystemTime.wMonth] +
push ecx  +
movzx ecx [ebp+SystemTime.wYear] +
push ecx  +
mov ecx [ebp+arg_1C] +
sub ecx eax +
push offset aTime04d02d02d0  +
push ecx  +
lea eax [esi+eax*2] +
push eax  +
call sub_100250E  +
add esp 28h +
test eax eax +
jl loc_100ECDB  +
mov ecx [ebx] +
lea eax [esi+ecx*2] +
lea edi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_100ECC6  +
sub eax edi +
mov edi [ebp+var_4] +
sar eax 1 +
add ecx eax +
mov [ebx] ecx +
mov eax [edi+10h] +
mov eax [eax+38h] +
cmp dword ptr [eax+0FCh] 0 +
jz loc_100ED27  +
push dword ptr [ebp+arg_C]  +
mov eax [ebx] +
mov ecx [ebp+arg_1C] +
sub ecx eax +
push offset aEl0xX  +
push ecx  +
lea eax [esi+eax*2] +
push eax  +
call sub_100250E  +
add esp 10h +
test eax eax +
jl loc_100ED27  +
mov ecx [ebx] +
lea eax [esi+ecx*2] +
lea edi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_100ED12  +
sub eax edi +
mov edi [ebp+var_4] +
sar eax 1 +
add ecx eax +
mov [ebx] ecx +
mov eax [edi+10h] +
mov eax [eax+38h] +
cmp dword ptr [eax+120h] 0 +
mov edi dword ptr [ebp+arg_10] +
jz loc_100ED75  +
mov eax [ebx] +
mov ecx [ebp+arg_1C] +
push edi  +
sub ecx eax +
push offset aTagid0xX  +
push ecx  +
lea eax [esi+eax*2] +
push eax  +
call sub_100250E  +
add esp 10h +
test eax eax +
jl loc_100ED75  +
mov ecx [ebx] +
lea eax [esi+ecx*2] +
lea edx [eax+2] +
mov [ebp+arg_18] edx +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_100ED62  +
sub eax [ebp+arg_18] +
sar eax 1 +
add ecx eax +
mov [ebx] ecx +
mov ecx [ebp+var_4] +
mov eax [ecx+10h] +
mov eax [eax+38h] +
cmp dword ptr [eax+144h] 0 +
jz loc_100EDC9  +
mov ecx [ecx+0Ch] +
imul edi edi +
mov eax [ebx] +
lea ecx [edi+ecx+4] +
push ecx  +
mov ecx [ebp+arg_1C] +
sub ecx eax +
push offset aTagnameS  +
push ecx  +
lea eax [esi+eax*2] +
push eax  +
call sub_100250E  +
add esp 10h +
test eax eax +
jl loc_100EDC9  +
mov ecx [ebx] +
lea eax [esi+ecx*2] +
lea edi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_100EDB7  +
sub eax edi +
sar eax 1 +
add ecx eax +
mov [ebx] ecx +
mov eax [ebp+var_4] +
mov eax [eax+10h] +
mov eax [eax+38h] +
cmp dword ptr [eax+168h] 0 +
jz loc_100EE19  +
mov edi [ebx] +
call ds:GetCurrentProcessId  +
push eax  +
mov eax [ebp+arg_1C] +
sub eax edi +
push offset aPid0xX  +
push eax  +
lea eax [esi+edi*2] +
push eax  +
call sub_100250E  +
add esp 10h +
test eax eax +
jl loc_100EE19  +
mov ecx [ebx] +
lea eax [esi+ecx*2] +
lea edi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_100EE07  +
sub eax edi +
sar eax 1 +
add ecx eax +
mov [ebx] ecx +
mov eax [ebp+var_4] +
mov eax [eax+10h] +
mov eax [eax+38h] +
cmp dword ptr [eax+0D8h] 0 +
jz loc_100EE69  +
mov edi [ebx] +
call ds:GetCurrentThreadId  +
push eax  +
mov eax [ebp+arg_1C] +
sub eax edi +
push offset aTid0xX  +
push eax  +
lea eax [esi+edi*2] +
push eax  +
call sub_100250E  +
add esp 10h +
test eax eax +
jl loc_100EE69  +
mov ecx [ebx] +
lea eax [esi+ecx*2] +
lea edi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_100EE57  +
sub eax edi +
sar eax 1 +
add ecx eax +
mov [ebx] ecx +
mov eax [ebx] +
lea ecx [eax+3] +
cmp ecx [ebp+arg_1C] +
jge loc_100EE84  +
lea edi [esi+eax*2] +
mov esi offset asc_100F034 +
movs   +
movs   +
add dword ptr [ebx] 3 +
mov esi [ebp+arg_14] +
xor eax eax +
cmp dword ptr [ebp+arg_0] eax +
jnz loc_100EE9D  +
mov ecx [ebp+var_4] +
mov ecx [ecx+10h] +
mov ecx [ecx+38h] +
cmp [ecx+6Ch] eax +
jz loc_100EF79  +
cmp dword ptr [ebp+arg_4] eax +
jz loc_100EEDF  +
push [ebp+arg_8]  +
mov eax [ebx] +
push dword ptr [ebp+arg_4]  +
mov ecx [ebp+arg_1C] +
sub ecx eax +
push offset aLocSDLoc  +
push ecx  +
lea eax [esi+eax*2] +
push eax  +
call sub_100250E  +
add esp 14h +
test eax eax +
jl loc_100EEDF  +
mov ecx [ebx] +
lea eax [esi+ecx*2] +
lea edi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_100EECD  +
sub eax edi +
sar eax 1 +
add ecx eax +
mov [ebx] ecx +
cmp dword ptr [ebp+arg_0] 0 +
jz loc_100EF79  +
push dword ptr [ebp+arg_0]  +
mov eax [ebx] +
mov ecx [ebp+arg_1C] +
sub ecx eax +
push offset aErr0x08x  +
push ecx  +
lea eax [esi+eax*2] +
push eax  +
call sub_100250E  +
add esp 10h +
test eax eax +
jl loc_100EF23  +
mov ecx [ebx] +
lea eax [esi+ecx*2] +
lea edi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_100EF11  +
sub eax edi +
sar eax 1 +
add ecx eax +
mov [ebx] ecx +
mov eax [ebx] +
test eax eax +
jle loc_100EF42  +
cmp eax [ebp+arg_1C] +
jge loc_100EF42  +
mov ecx [ebp+arg_1C] +
sub ecx eax +
push ecx  +
lea eax [esi+eax*2] +
push eax  +
push dword ptr [ebp+arg_0]  +
call sub_100E756  +
add [ebx] eax +
mov eax [ebx] +
mov ecx [ebp+arg_1C] +
sub ecx eax +
push offset aErr  +
push ecx  +
lea eax [esi+eax*2] +
push eax  +
call sub_100250E  +
add esp 0Ch +
test eax eax +
jl loc_100EF79  +
mov ecx [ebx] +
lea eax [esi+ecx*2] +
lea edi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_100EF67  +
sub eax edi +
sar eax 1 +
add ecx eax +
mov [ebx] ecx +
mov eax [ebx] +
mov ecx [ebp+arg_1C] +
sub ecx eax +
push offset aMsg  +
push ecx  +
lea eax [esi+eax*2] +
push eax  +
call sub_100250E  +
add esp 0Ch +
test eax eax +
jl loc_100EFB0  +
mov ecx [ebx] +
lea eax [esi+ecx*2] +
lea esi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_100EF9E  +
sub eax esi +
sar eax 1 +
add ecx eax +
mov [ebx] ecx +
pop esi  +
pop ebx  +
pop edi  +
leave   +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+2Ch] +
push edi  +
xor edi edi +
xor ebx ebx +
cmp [eax] edi +
jbe loc_100F17D  +
mov eax [esi+30h] +
push 3Fh  +
lea eax [eax+edi+4] +
push eax  +
push [ebp+arg_0]  +
call ds:strncmp  +
add esp 0Ch +
test eax eax +
jz loc_100F195  +
mov eax [esi+2Ch] +
inc ebx  +
add edi 44h +
cmp ebx [eax] +
jb loc_100F158  +
mov eax [esi+2Ch] +
cmp dword ptr [eax] 100h +
jb loc_100F19C  +
mov eax [ebp+arg_4] +
mov ecx dword_1014534 +
mov [eax] ecx +
jmp loc_100F1E6  +
mov eax [ebp+arg_4] +
mov [eax] ebx +
jmp loc_100F1E6  +
mov eax [eax] +
mov ecx [esi+30h] +
imul eax eax +
mov dword ptr [eax+ecx] 2 +
mov eax [esi+2Ch] +
mov eax [eax] +
mov ecx [esi+30h] +
imul eax eax +
push 3Fh  +
push [ebp+arg_0]  +
lea eax [eax+ecx+4] +
push 40h  +
push eax  +
call sub_100E79D  +
mov eax [esi+2Ch] +
mov eax [eax] +
mov ecx [esi+30h] +
imul eax eax +
mov byte ptr [eax+ecx+43h] 0 +
mov eax [esi+2Ch] +
mov eax [eax] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
mov esi [esi+2Ch] +
inc dword ptr [esi]  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
call sub_1002CA3  +
mov eax [ebp+8] +
mov [ebp-68h] eax +
lea eax [ebp-60h] +
push eax  +
mov esi ecx +
call ds:GetLocalTime  +
lea eax [esi+74h] +
push eax  +
call ds:InterlockedIncrement  +
push eax  +
movzx eax word ptr [ebp-52h] +
push eax  +
movzx eax word ptr [ebp-54h] +
push eax  +
movzx eax word ptr [ebp-56h] +
push eax  +
movzx eax word ptr [ebp-58h] +
push eax  +
movzx eax word ptr [ebp-5Ah] +
push eax  +
movzx eax word ptr [ebp-5Eh] +
push eax  +
movzx eax word ptr [ebp-60h] +
push eax  +
push offset a04d02d02d02d02  +
lea eax [ebp-50h] +
push 40h  +
push eax  +
call sub_100E826  +
add esp 2Ch +
lea eax [esi+24h] +
lea edi [esi+3Ch] +
push eax  +
mov ecx edi +
call sub_100E89E  +
push offset dword_1006468  +
push 1  +
mov ecx edi +
call sub_100E8BD  +
lea eax [esi+18h] +
push eax  +
mov ecx edi +
mov [ebp-64h] eax +
call sub_100E909  +
lea eax [ebp-50h] +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_100F284  +
sub eax ecx +
lea ecx [ebp-50h] +
push ecx  +
push eax  +
mov ecx edi +
call sub_100E8BD  +
mov ebx offset dword_1006460 +
push ebx  +
push 4  +
mov ecx edi +
call sub_100E8BD  +
push dword ptr [ebp-64h]  +
add esi 48h +
mov ecx esi +
call sub_100E89E  +
lea eax [ebp-50h] +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_100F2BB  +
sub eax ecx +
lea ecx [ebp-50h] +
push ecx  +
push eax  +
mov ecx esi +
call sub_100E8BD  +
push ebx  +
push 4  +
mov ecx esi +
call sub_100E8BD  +
or dword ptr [ebp-6Ch] 0FFFFFFFFh +
xor ebx ebx +
lea ecx [ebp-70h] +
mov [ebp-70h] ebx +
call sub_100F9A1  +
lea ecx [ebp-80h] +
mov [ebp-4] ebx +
call sub_100E9A0  +
mov edi [edi] +
push ebx  +
push 80h  +
push 1  +
lea eax [ebp-7Ch] +
push eax  +
push 1  +
push 0C0000000h  +
push edi  +
mov byte ptr [ebp-4] 1 +
call ds:CreateFileA  +
mov esi [ebp-68h] +
push eax  +
mov ecx esi +
call sub_100E63A  +
cmp dword ptr [esi+4] 0FFFFFFFFh +
jnz loc_100F36E  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_100F33B  +
and eax 0FFFFh +
or eax 80070000h +
push eax  +
push 0B65h  +
push offset aDW7rtmEnduse_2  +
lea ecx [ebp-0A0h] +
call sub_100BF3B  +
mov esi eax +
lea edi [ebp-90h] +
movs   +
movs   +
movs   +
push offset dword_10126DC  +
lea eax [ebp-90h] +
push eax  +
movs   +
call _CxxThrowException  +
lea ecx [ebp-80h] +
call sub_100E6A9  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-70h] +
call sub_100F974  +
call sub_1002CE0  +
retn 4  +
***
call sub_100138C  +
mov esi ecx +
lea eax [esi+24h] +
lea edi [esi+30h] +
push eax  +
mov ecx edi +
call sub_100E89E  +
push offset dword_1006468  +
push 1  +
mov ecx edi +
call sub_100E8BD  +
lea eax [esi+18h] +
push eax  +
mov ecx edi +
call sub_100E909  +
push offset dword_1006460  +
push 4  +
mov ecx edi +
call sub_100E8BD  +
and dword ptr [ebp-10h] 0 +
mov ebx offset off_1006458 +
mov [ebp-14h] ebx +
and dword ptr [ebp-4] 0 +
lea eax [ebp-14h] +
push eax  +
mov ecx esi +
call sub_100F1F2  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
mov [ebp-14h] ebx +
call sub_100E668  +
mov eax [esi+68h] +
test eax eax +
jz loc_100F473  +
mov ecx [esi+70h] +
test ecx ecx +
jz loc_100F473  +
push ecx  +
push eax  +
call ds:FlushViewOfFile  +
push 0  +
push dword ptr [esi+3Ch]  +
push dword ptr [edi]  +
call ds:CopyFileA  +
lea ebx [esi+54h] +
mov eax [ebx+4] +
cmp eax [ebx] +
jnz loc_100F4CF  +
mov ecx ebx +
call sub_100E72B  +
mov [ebp-10h] eax +
lea eax [esi+24h] +
push eax  +
mov ecx edi +
call sub_100E89E  +
push offset dword_1006468  +
push 1  +
mov ecx edi +
call sub_100E8BD  +
mov eax [ebp-10h] +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_100F4B3  +
push dword ptr [ebp-10h]  +
sub eax ecx +
push eax  +
mov ecx edi +
call sub_100E8BD  +
push dword ptr [edi]  +
call ds:DeleteFileA  +
push dword ptr [esi+48h]  +
mov ecx ebx +
call sub_100E6C5  +
push dword ptr [esi+68h]  +
call sub_100E54E  +
mov dword ptr [esi+6Ch] 10h +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+6Ch] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
lea ebx [eax+esi] +
mov edx 7FFE2h +
inc edi  +
cmp ebx edx +
jbe loc_100F524  +
cmp esi edx +
jbe loc_100F51F  +
cmp eax 10h +
jnz loc_100F51D  +
xor eax eax +
jmp loc_100F526  +
xor edi edi +
call sub_100F3F0  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push [ebp+arg_0]  +
call sub_100F4F3  +
test eax eax +
jnz locret_100F574  +
push 80070057h  +
push 0E6h  +
push offset aDW7rtmEnduse_3  +
lea ecx [ebp+var_20] +
call sub_100BF3B  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push offset dword_10126DC  +
lea eax [ebp+var_10] +
push eax  +
movs   +
call _CxxThrowException  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx] 0 +
jz loc_100F5C4  +
mov ecx [ecx+10h] +
pop ebp  +
jmp loc_100F143  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
call ds:GetLastError  +
test [ebp+arg_0] 2 +
mov ebx [ebp+lpOutputString] +
mov [ebp+dwErrCode] eax +
jz loc_100F5F1  +
push ebx  +
call ds:OutputDebugStringW  +
test [ebp+arg_0] 1 +
jz loc_100F636  +
cmp dword ptr [esi+68h] 0 +
jz loc_100F636  +
mov eax [ebp+arg_8] +
test eax eax +
jnz loc_100F617  +
mov eax ebx +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100F609  +
sub eax edx +
sar eax 1 +
lea edi [eax+eax] +
push edi  +
mov ecx esi +
call sub_100F532  +
mov eax [esi+6Ch] +
add eax [esi+68h] +
push edi  +
push ebx  +
push eax  +
call memcpy  +
add esp 0Ch +
add [esi+6Ch] edi +
test [ebp+arg_0] 8 +
mov esi ds:fprintf +
mov edi offset aS +
jz loc_100F657  +
mov eax ds:_iob +
push ebx  +
add eax 40h +
push edi  +
push eax  +
call esi  +
add esp 0Ch +
test [ebp+arg_0] 4 +
jz loc_100F66D  +
mov eax ds:_iob +
push ebx  +
add eax 20h +
push edi  +
push eax  +
call esi  +
add esp 0Ch +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ecx+4] +
push eax  +
push dword ptr [ecx+8]  +
mov ecx [ebp+arg_0] +
call sub_100F5B1  +
pop ebp  +
retn 4  +
***
call sub_100F688  +
retn   +
***
call sub_1002CA3  +
mov edx [ebp+1Ch] +
mov eax [ebp+0Ch] +
and dword ptr [ebp-0C20h] 0 +
mov [ebp-0C24h] edx +
mov edx [ebp+20h] +
mov [ebp-0C28h] edx +
mov esi 5F5h +
push esi  +
lea edx [ebp-0C20h] +
push edx  +
lea edx [ebp-0C1Ch] +
push edx  +
push dword ptr [ebp+18h]  +
mov [ebp-0C2Ch] ecx +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push eax  +
push dword ptr [ebp+8]  +
call sub_100EBE0  +
push dword ptr [ebp-0C28h]  +
mov edi [ebp-0C20h] +
push dword ptr [ebp-0C24h]  +
sub esi edi +
push esi  +
lea ebx [ebp+edi*2-0C1Ch] +
push ebx  +
call sub_100E7EA  +
test eax eax +
jl loc_100F74F  +
mov eax ebx +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100F73F  +
sub eax edx +
sar eax 1 +
add edi eax +
mov eax 605h +
push offset aMsgTrc  +
sub eax edi +
push eax  +
lea esi [ebp+edi*2-0C1Ch] +
push esi  +
call sub_100250E  +
add esp 0Ch +
test eax eax +
jl loc_100F785  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100F775  +
sub eax edx +
sar eax 1 +
add edi eax +
mov eax 604h +
cmp edi eax +
jle loc_100F790  +
mov edi eax +
mov esi [ebp-0C2Ch] +
xor eax eax +
mov [ebp+edi*2-0C1Ch] ax +
lea eax [esi+4] +
push eax  +
lea ecx [ebp-0C34h] +
call sub_100F952  +
and dword ptr [ebp-4] 0 +
cmp dword ptr [esi] 0 +
jz loc_100F7D1  +
mov eax [esi+10h] +
mov eax [eax+38h] +
mov eax [eax] +
push edi  +
lea ecx [ebp-0C1Ch] +
push ecx  +
mov ecx [esi+14h] +
push eax  +
call sub_100F5CD  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-0C34h] +
call sub_100F941  +
call sub_1002CE0  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
test ecx ecx +
jnz loc_100F81E  +
mov ecx offset dword_100F83C +
lea edx [ebp+arg_8] +
push edx  +
push [ebp+arg_4]  +
push dword ptr [eax+8]  +
push dword ptr [eax+0Ch]  +
push dword ptr [eax+4]  +
push ecx  +
mov ecx [eax+10h] +
push 0  +
call sub_100F6BD  +
pop ebp  +
retn   +
***
call sub_100F688  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
mov esi ecx +
push dword ptr [esi]  +
dec dword ptr [esi+4]  +
call ds:ReleaseMutex  +
test eax eax +
jnz loc_100F8BD  +
inc dword ptr [esi+4]  +
call ds:GetLastError  +
test eax eax +
jle loc_100F896  +
and eax 0FFFFh +
or eax 80070000h +
push eax  +
push 6Ah  +
push offset aDW7rtmEnduse_4  +
lea ecx [ebp+var_20] +
call sub_100BF3B  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push offset dword_10126DC  +
lea eax [ebp+var_10] +
push eax  +
movs   +
call _CxxThrowException  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
mov esi ecx +
push 0FFFFFFFFh  +
push dword ptr [esi]  +
call ds:WaitForSingleObject  +
test eax eax +
jz loc_100F90A  +
call sub_1003252  +
push eax  +
push 75h  +
push offset aDW7rtmEnduse_4  +
lea ecx [ebp+var_20] +
call sub_100BF3B  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push offset dword_10126DC  +
lea eax [ebp+var_10] +
push eax  +
movs   +
call _CxxThrowException  +
inc dword ptr [esi+4]  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
call sub_100F8C5  +
mov dword ptr [esi+4] 1 +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
call sub_100F865  +
and dword ptr [esi+4] 0 +
pop esi  +
retn   +
***
cmp dword ptr [ecx] 0 +
jz locret_100F94C  +
cmp dword ptr [ecx+4] 0 +
jnz loc_100F92A  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi+4] 0 +
mov [esi] eax +
call sub_100F915  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jz loc_100F991  +
push dword ptr [esi+4]  +
call ds:ImpersonateLoggedOnUser  +
test eax eax +
jnz loc_100F991  +
call ds:GetLastError  +
push dword ptr [esi+4]  +
call ds:CloseHandle  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push edi  +
mov esi ecx +
lea edi [esi+4] +
push edi  +
push 1  +
push 0Eh  +
call ds:GetCurrentThread  +
push eax  +
call ds:OpenThreadToken  +
test eax eax +
jnz loc_100FA38  +
mov esi ds:GetLastError +
call esi  +
cmp eax 3F0h +
jz loc_100FA0F  +
cmp eax 5 +
jz loc_100FA0F  +
test eax eax +
jle loc_100F9E8  +
and eax 0FFFFh +
or eax 80070000h +
push eax  +
push 41h  +
push offset aDW7rtmEnduse_5  +
lea ecx [ebp+var_20] +
call sub_100BF3B  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push offset dword_10126DC  +
lea eax [ebp+var_10] +
push eax  +
movs   +
call _CxxThrowException  +
push edi  +
push 0Ah  +
call ds:GetCurrentProcess  +
push eax  +
call ds:OpenProcessToken  +
test eax eax +
jnz loc_100FA5D  +
call esi  +
test eax eax +
jle loc_100FA33  +
and eax 0FFFFh +
or eax 80070000h +
push eax  +
push 39h  +
jmp loc_100F9EB  +
call ds:RevertToSelf  +
mov [esi] eax +
test eax eax +
jnz loc_100FA5D  +
call ds:GetLastError  +
test eax eax +
jle loc_100FA58  +
and eax 0FFFFh +
or eax 80070000h +
push eax  +
push 4Dh  +
jmp loc_100F9EB  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+wLanguage]  +
push 1  +
push offset Type  +
push [ebp+hModule]  +
call ds:FindResourceExW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+hModule]  +
call sub_100FA9F  +
test eax eax +
jz loc_100FAE6  +
push eax  +
push [ebp+hModule]  +
call ds:LoadResource  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+hModule] 0 +
push esi  +
jz loc_100FB44  +
cmp [ebp+arg_4] 0 +
jz loc_100FB44  +
push [ebp+hModule]  +
call sub_100FAC9  +
push [ebp+arg_4]  +
mov esi eax +
call sub_100FAC9  +
test esi esi +
jz loc_100FB3C  +
test eax eax +
jz loc_100FB3C  +
mov ecx 0FECDFECDh +
cmp [esi] ecx +
jnz loc_100FB44  +
cmp [eax] ecx +
jnz loc_100FB44  +
push edi  +
push 4  +
lea edi [eax+1Ch] +
add esi 1Ch +
pop ecx  +
xor eax eax +
cmps   +
pop edi  +
jnz loc_100FB44  +
inc eax  +
jmp loc_100FB46  +
push 0Dh  +
call ds:SetLastError  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
xor esi esi +
push edi  +
cmp [ebp+lpLibFileName] esi +
jnz loc_100FB63  +
xor eax eax +
jmp loc_100FBD1  +
cmp [ebp+arg_4] esi +
jz loc_100FBBE  +
push esi  +
push esi  +
push 3  +
push esi  +
push 5  +
push 80000000h  +
push [ebp+lpLibFileName]  +
call ds:CreateFileW  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jz loc_100FB5F  +
push esi  +
push esi  +
push esi  +
push 8  +
push esi  +
push edi  +
call ds:CreateFileMappingW  +
push edi  +
mov edi ds:CloseHandle +
mov ebx eax +
call edi  +
cmp ebx esi +
jz loc_100FB5F  +
push esi  +
push esi  +
push esi  +
push 1  +
push ebx  +
call ds:MapViewOfFile  +
push ebx  +
mov [ebp+lpLibFileName] eax +
call edi  +
mov eax [ebp+lpLibFileName] +
cmp eax esi +
jz loc_100FB5F  +
or eax 1 +
jmp loc_100FBD1  +
xor eax eax +
cmp [ebp+arg_8] esi +
setnz al  +
push eax  +
push esi  +
push [ebp+lpLibFileName]  +
call ds:LoadLibraryExW  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 120h +
mov eax dword_1014000 +
xor eax ebp +
mov [ebp+var_4] eax +
push edi  +
xor edi edi +
cmp dword_101458C edi +
jnz loc_100FCF9  +
push esi  +
mov esi 11Ch +
push esi  +
lea eax [ebp+VersionInformation] +
push edi  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+VersionInformation] +
mov [ebp+VersionInformation.dwOSVersionInfoSize] esi +
mov esi ds:GetVersionExW +
push eax  +
call esi  +
test eax eax +
jnz loc_100FC44  +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 114h +
call esi  +
mov eax [ebp+VersionInformation.dwPlatformId] +
dec eax  +
mov dword_101458C edi +
pop esi  +
jz loc_100FCCC  +
dec eax  +
jnz loc_100FCF9  +
cmp [ebp+VersionInformation.dwMajorVersion] 5 +
jnz loc_100FCB9  +
mov eax [ebp+VersionInformation.dwMinorVersion] +
sub eax edi +
jz loc_100FCAD  +
dec eax  +
jz loc_100FC9A  +
dec eax  +
jz loc_100FC80  +
mov dword_101458C 14h +
jmp loc_100FCF9  +
cmp [ebp+var_C] 1 +
jb loc_100FC91  +
mov dword_101458C 10h +
or dword_101458C 4 +
jmp loc_100FCF9  +
cmp [ebp+var_C] 2 +
jb loc_100FC91  +
mov dword_101458C 8 +
jmp loc_100FC91  +
mov dword_101458C 4 +
jmp loc_100FCF9  +
cmp [ebp+VersionInformation.dwMajorVersion] 4 +
ja loc_100FD0B  +
mov dword_101458C 2 +
cmp [ebp+VersionInformation.dwMajorVersion] 4 +
jnz loc_100FCF9  +
cmp [ebp+VersionInformation.dwMinorVersion] edi +
jz loc_100FCEF  +
cmp [ebp+VersionInformation.dwMinorVersion] 0Ah +
jz loc_100FCEF  +
cmp [ebp+VersionInformation.dwMinorVersion] 5Ah +
jnz loc_100FCF9  +
mov dword_101458C 1 +
mov ecx [ebp+var_4] +
mov eax dword_101458C +
xor ecx ebp +
pop edi  +
call sub_10012FD  +
leave   +
retn   +
mov dword_101458C 20h +
jmp loc_100FCF9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
mov eax dword_1014000 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push 20h  +
lea eax [ebp+LCData] +
push eax  +
push 8  +
push 404h  +
mov esi 0C04h +
call ds:GetLocaleInfoW  +
test eax eax +
jz loc_100FD70  +
push 3  +
lea eax [ebp+LCData] +
push offset word_100FD80  +
push eax  +
call wcsncmp  +
add esp 0Ch +
mov esi eax +
neg esi  +
sbb esi esi +
and esi 0FFFFF800h +
add esi 0C04h +
mov ecx [ebp+var_4] +
mov ax si +
xor ecx ebp +
pop esi  +
call sub_10012FD  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_1014000 +
xor eax ebp +
mov [ebp+var_4] eax +
xor eax eax +
cmp ax word_1014590 +
jnz loc_100FE26  +
push esi  +
lea eax [ebp+hKey] +
push eax  +
push 1  +
xor esi esi +
push esi  +
push offset SubKey  +
push 80000002h  +
mov [ebp+cbData] 6 +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_100FE25  +
push edi  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
push esi  +
push esi  +
push offset ValueName  +
push [ebp+hKey]  +
call ds:RegQueryValueExW  +
push [ebp+hKey]  +
mov edi eax +
call ds:RegCloseKey  +
cmp edi esi +
pop edi  +
jnz loc_100FE25  +
push 3  +
push ds:off_100FE38[esi*8]  +
lea eax [ebp+Data] +
push eax  +
call _wcsnicmp  +
add esp 0Ch +
test eax eax +
jz loc_100FE17  +
inc esi  +
cmp esi 1Ch +
jnb loc_100FE25  +
jmp loc_100FDF6  +
mov ax ds:word_100FE3C[esi*8] +
mov word_1014590 ax +
pop esi  +
mov ecx [ebp+var_4] +
mov ax word_1014590 +
xor ecx ebp +
call sub_10012FD  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push edi  +
mov edi eax +
xor ebx ebx +
cmp edi ebx +
jz loc_10100A1  +
cmp [ebp+arg_0] ebx +
jz loc_10100A1  +
cmp [ebp+arg_4] ebx +
jz loc_10100A1  +
push esi  +
movzx eax word ptr [edi] +
lea ecx [eax-61h] +
cmp cx 19h +
ja loc_101001D  +
movzx eax ax +
sub eax 61h +
jmp loc_101002C  +
lea ecx [eax-41h] +
cmp cx 19h +
ja loc_1010056  +
movzx eax ax +
sub eax 41h +
cmp eax 1Ah +
jnb loc_1010056  +
mov esi ds:dword_10100A8[eax*4] +
test esi esi +
jnz loc_101004E  +
jmp loc_1010056  +
push eax  +
push edi  +
call _wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1010061  +
add esi 8 +
mov eax [esi] +
cmp word ptr [eax] 0 +
jnz loc_101003E  +
mov edi [ebp+arg_0] +
inc ebx  +
cmp ebx 2 +
jge loc_10100A0  +
jmp loc_1010009  +
mov esi [esi+4] +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1010069  +
sub eax edx +
sar eax 1 +
cmp eax 55h +
jnb loc_10100A0  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1010081  +
sub eax edx +
sar eax 1 +
lea eax [eax+eax+2] +
push eax  +
push esi  +
push [ebp+arg_4]  +
call memcpy  +
add esp 0Ch +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test esi esi +
jz loc_101015B  +
cmp [ebp+arg_4] 0 +
jz loc_101015B  +
push 2  +
push 55h  +
push esi  +
push [ebp+arg_0]  +
call sub_1010BFE  +
test eax eax +
jz loc_101015B  +
push 2  +
push 55h  +
push [ebp+arg_4]  +
push esi  +
call sub_1010CA4  +
test edi edi +
jz loc_1010156  +
xor eax eax +
push edi  +
push [ebp+arg_4]  +
mov [edi] ax +
mov eax esi +
call sub_100FFE3  +
xor eax eax +
inc eax  +
jmp loc_101015D  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:FreeLibrary  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_1014000 +
xor eax ebp +
mov [ebp+var_4] eax +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jnz loc_1010198  +
xor eax eax +
jmp loc_1010203  +
push ebx  +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
lea eax [ebp+LibFileName] +
push 104h  +
push eax  +
xor ebx ebx +
call sub_100E7EA  +
test eax eax +
jl loc_1010200  +
push esi  +
call sub_100FBDD  +
mov esi eax +
and esi 26h +
call sub_100FBDD  +
and eax 38h +
push esi  +
push eax  +
lea eax [ebp+LibFileName] +
push eax  +
call sub_100FB50  +
mov ebx eax +
pop esi  +
test ebx ebx +
jz loc_1010200  +
push ebx  +
push edi  +
call sub_100FAEF  +
test eax eax +
jnz loc_1010200  +
push ebx  +
test bl 1 +
jz loc_10101F8  +
call ds:UnmapViewOfFile  +
jmp loc_10101FE  +
call ds:FreeLibrary  +
xor ebx ebx +
mov eax ebx +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_10012FD  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test eax eax +
jz loc_1010270  +
test ecx ecx +
jz loc_1010270  +
cmp dword ptr [ebp+arg_0] 0 +
push eax  +
jz loc_1010254  +
test edx edx +
jz loc_1010241  +
push edx  +
push dword ptr [ebp+arg_0]  +
push offset aSSS_mui  +
push ecx  +
call sub_1010177  +
add esp 14h +
jmp loc_1010272  +
push dword ptr [ebp+arg_0]  +
push offset aSS_mui  +
push ecx  +
call sub_1010177  +
add esp 10h +
jmp loc_1010272  +
test edx edx +
jz loc_1010260  +
push edx  +
push offset a_SS_mui  +
jmp loc_1010249  +
push offset a_S_mui  +
push ecx  +
call sub_1010177  +
add esp 0Ch +
jmp loc_1010272  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 428h +
mov eax dword_1014000 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
mov [ebp+lpLibFileName] esi +
mov [ebp+FilePart] ebx +
cmp esi ebx +
jnz loc_101030A  +
xor eax eax +
jmp loc_1010A63  +
test [ebp+arg_4] 0FFFFFFE3h +
jnz loc_1010303  +
push edi  +
mov edi dword ptr [ebp+wLanguage] +
cmp di bx +
jnz loc_1010326  +
test byte ptr [ebp+arg_4] 10h +
jnz loc_1010990  +
call sub_100FBDD  +
mov dword_1014594 eax +
movzx eax al +
and eax 20h +
or eax 2 +
push eax  +
push 0  +
push esi  +
call ds:LoadLibraryExW  +
mov [ebp+hModule] eax +
test eax eax +
jz loc_1010990  +
test byte ptr dword_1014594 20h +
jnz loc_1010A62  +
lea eax [ebp+FilePart] +
push eax  +
lea eax [ebp+LibFileName] +
push eax  +
push 104h  +
push 0  +
push esi  +
push 0  +
call ds:SearchPathW  +
test eax eax +
jz loc_1010984  +
mov eax [ebp+FilePart] +
test eax eax +
jnz loc_10103A2  +
and dword ptr [ebp+var_41C] ebx +
lea eax [ebp+LibFileName] +
mov [ebp+FilePart] eax +
jmp loc_10103B4  +
lea ecx [ebp+LibFileName] +
mov dword ptr [ebp+var_41C] ecx +
xor ecx ecx +
mov [eax-2] cx +
push 0  +
push [ebp+hModule]  +
call sub_100FA9F  +
test eax eax +
jz loc_101096C  +
test di di +
jnz loc_1010944  +
mov al byte ptr dword_1014594 +
test al 4 +
jz loc_1010753  +
call ds:GetUserDefaultUILanguage  +
movzx eax ax +
mov ecx 404h +
mov [ebp+var_420] eax +
cmp ax cx +
jnz loc_1010406  +
call sub_100FD1C  +
movzx eax ax +
mov [ebp+var_420] eax +
mov eax [ebp+arg_4] +
and eax 8 +
mov [ebp+var_424] eax +
cmp [ebp+var_424] 0 +
jz loc_10104DC  +
lea eax [ebp+var_15C] +
push eax  +
push [ebp+var_420]  +
lea edi [ebp+var_208] +
lea esi [ebp+var_B0] +
call sub_1010115  +
test eax eax +
jz loc_10109D0  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx esi +
call sub_1010215  +
mov ebx eax +
test ebx ebx +
jnz loc_10109D4  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
lea edx [ebp+var_15C] +
call sub_1010215  +
mov ebx eax +
test ebx ebx +
jnz loc_10109D4  +
cmp word ptr [ebp+var_208] ax +
jz loc_10104BB  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx edi +
call sub_1010215  +
mov ebx eax +
test ebx ebx +
jnz loc_10109D4  +
mov eax 0C04h +
cmp word ptr [ebp+var_420] ax +
jnz loc_1010687  +
mov [ebp+var_420] 404h +
jmp loc_1010412  +
movzx eax word ptr [ebp+var_420] +
push eax  +
push offset aMui04hx  +
lea eax [ebp+var_B0] +
push 55h  +
push eax  +
call sub_100250E  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
lea edx [ebp+var_B0] +
call sub_1010215  +
mov ebx eax +
test ebx ebx +
jnz loc_10109D4  +
lea eax [ebp+var_15C] +
push eax  +
push [ebp+var_420]  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_1010115  +
test eax eax +
jz loc_101058E  +
push 2  +
lea eax [ebp+var_15C] +
push eax  +
call sub_1010B13  +
movzx eax ax +
test ax ax +
jz loc_101058E  +
movzx eax ax +
push eax  +
push offset aMui04hx  +
mov eax esi +
push 55h  +
push eax  +
call sub_100250E  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
mov edx esi +
call sub_1010215  +
mov ebx eax +
test ebx ebx +
jnz loc_10109D4  +
mov eax 0C04h +
cmp word ptr [ebp+var_420] ax +
jz loc_10104CD  +
call ds:GetSystemDefaultUILanguage  +
movzx esi ax +
mov [ebp+var_424] esi +
cmp si word ptr [ebp+var_420] +
jz loc_101066B  +
movzx eax si +
push eax  +
push offset aMui04hx  +
lea eax [ebp+var_B0] +
push 55h  +
push eax  +
call sub_100250E  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
lea edx [ebp+var_B0] +
call sub_1010215  +
mov ebx eax +
test ebx ebx +
jnz loc_10109D4  +
lea eax [ebp+var_15C] +
push eax  +
push esi  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_1010115  +
test eax eax +
jz loc_1010665  +
push 2  +
lea eax [ebp+var_15C] +
push eax  +
call sub_1010B13  +
movzx eax ax +
test ax ax +
jz loc_1010665  +
movzx eax ax +
push eax  +
push offset aMui04hx  +
mov eax esi +
push 55h  +
push eax  +
call sub_100250E  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
mov edx esi +
call sub_1010215  +
mov ebx eax +
test ebx ebx +
jnz loc_10109D4  +
mov esi [ebp+var_424] +
mov eax 409h +
mov ecx eax +
cmp cx word ptr [ebp+var_420] +
jz loc_101091C  +
cmp ax si +
jmp loc_10108F4  +
call ds:GetSystemDefaultUILanguage  +
movzx eax ax +
mov [ebp+var_424] eax +
cmp ax word ptr [ebp+var_420] +
jz loc_101073A  +
lea ecx [ebp+var_15C] +
push ecx  +
push eax  +
lea edi [ebp+var_208] +
lea esi [ebp+var_B0] +
call sub_1010115  +
test eax eax +
jz loc_101096C  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx esi +
call sub_1010215  +
mov ebx eax +
test ebx ebx +
jnz loc_10109D4  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
lea edx [ebp+var_15C] +
call sub_1010215  +
mov ebx eax +
test ebx ebx +
jnz loc_10109D4  +
cmp word ptr [ebp+var_208] ax +
jz loc_101073A  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx edi +
call sub_1010215  +
mov ebx eax +
test ebx ebx +
jnz loc_10109D4  +
mov eax 409h +
mov ecx eax +
cmp cx word ptr [ebp+var_420] +
jnz loc_1010811  +
jmp loc_101091C  +
test al 3 +
jz loc_101096C  +
call sub_100FD8B  +
test byte ptr [ebp+arg_4] 8 +
movzx eax ax +
mov [ebp+var_424] eax +
jz loc_101083A  +
lea ecx [ebp+var_15C] +
push ecx  +
push eax  +
lea edi [ebp+var_208] +
lea esi [ebp+var_B0] +
call sub_1010115  +
test eax eax +
jz loc_101096C  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx esi +
call sub_1010215  +
mov ebx eax +
test ebx ebx +
jnz loc_10109D4  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
lea edx [ebp+var_15C] +
call sub_1010215  +
mov ebx eax +
test ebx ebx +
jnz loc_10109D4  +
cmp word ptr [ebp+var_208] ax +
jz loc_101080A  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx edi +
call sub_1010215  +
mov ebx eax +
test ebx ebx +
jnz loc_10109D4  +
mov eax 409h +
mov ecx eax +
cmp cx word ptr [ebp+var_424] +
jz loc_101091C  +
lea ecx [ebp+var_15C] +
push ecx  +
push eax  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_1010115  +
mov edx esi +
jmp loc_10108FB  +
movzx eax ax +
push eax  +
push offset aMui04hx  +
lea eax [ebp+var_B0] +
push 55h  +
push eax  +
call sub_100250E  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
lea edx [ebp+var_B0] +
call sub_1010215  +
mov ebx eax +
test ebx ebx +
jnz loc_10109D4  +
lea eax [ebp+var_15C] +
push eax  +
push [ebp+var_424]  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_1010115  +
test eax eax +
jz loc_10108E8  +
push 2  +
lea eax [ebp+var_15C] +
push eax  +
call sub_1010B13  +
movzx eax ax +
test ax ax +
jz loc_10108E8  +
movzx eax ax +
push eax  +
push offset aMui04hx  +
mov eax esi +
push 55h  +
push eax  +
call sub_100250E  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
mov edx esi +
call sub_1010215  +
mov ebx eax +
test ebx ebx +
jnz loc_10109D4  +
mov eax 409h +
cmp ax word ptr [ebp+var_424] +
jz loc_101091C  +
mov edx offset aMui0409 +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
call sub_1010215  +
mov ebx eax +
test ebx ebx +
jnz loc_10109D4  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
xor edx edx +
call sub_1010215  +
mov ebx eax +
test ebx ebx +
jz loc_10109D0  +
jmp loc_10109D4  +
test byte ptr dword_1014594 7 +
jz loc_101096C  +
test byte ptr [ebp+arg_4] 8 +
jz loc_1010997  +
lea eax [ebp+var_15C] +
push eax  +
push edi  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_1010115  +
test eax eax +
jnz loc_10109B1  +
test byte ptr [ebp+arg_4] 10h +
jz loc_10109E4  +
push dword ptr [ebp+wLanguage]  +
push [ebp+hModule]  +
call sub_100FA9F  +
test eax eax +
jnz loc_10109E4  +
push [ebp+hModule]  +
call ds:FreeLibrary  +
xor eax eax +
jmp loc_1010A62  +
movzx eax di +
push eax  +
push offset aMui04hx  +
lea eax [ebp+var_B0] +
push 55h  +
push eax  +
call sub_100250E  +
add esp 10h +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
lea edx [ebp+var_B0] +
call sub_1010215  +
mov ebx eax +
test ebx ebx +
jz loc_101096C  +
push [ebp+hModule]  +
call ds:FreeLibrary  +
mov eax ebx +
jmp loc_1010A62  +
test byte ptr [ebp+hModule] 1 +
jz loc_1010A5C  +
push [ebp+hModule]  +
call ds:FreeLibrary  +
call sub_100FBDD  +
test al 38h +
jz loc_1010A39  +
push [ebp+FilePart]  +
lea eax [ebp+LibFileName] +
push dword ptr [ebp+var_41C]  +
push offset aSS  +
push 104h  +
push eax  +
call sub_100250E  +
add esp 14h +
push 0  +
push 1  +
lea eax [ebp+LibFileName] +
push eax  +
call sub_100FB50  +
jmp loc_1010A56  +
call sub_100FBDD  +
push 0  +
and eax 26h +
pop eax  +
setnz al  +
push eax  +
push 0  +
push [ebp+lpLibFileName]  +
call ds:LoadLibraryExW  +
mov [ebp+hModule] eax +
mov eax [ebp+hModule] +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10012FD  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
movzx eax word ptr [eax] +
movzx ecx word ptr [ecx] +
cmp cx ax +
jnz loc_1010AC7  +
xor eax eax +
pop ebp  +
retn   +
sbb eax eax +
and eax 2 +
dec eax  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push dword ptr [eax]  +
push [ebp+arg_0]  +
call _wcsicmp  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax+8] 68h +
jnz loc_1010B08  +
cmp word ptr [eax] 7Fh +
jz loc_1010B08  +
xor eax eax +
inc eax  +
jmp loc_1010B0A  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_1010B68  +
test [ebp+arg_4] 0FFFFFFFDh +
jnz loc_1010B68  +
push offset sub_1010AD4  +
push 8  +
push 163h  +
push offset off_10087F0  +
push [ebp+arg_0]  +
call bsearch  +
add esp 14h +
test eax eax +
jz loc_1010B68  +
mov ecx [eax+4] +
imul ecx ecx +
add ecx offset dword_1007738 +
test byte ptr [ebp+arg_4] 2 +
jnz loc_1010B63  +
push ecx  +
call sub_1010AEF  +
test eax eax +
jnz loc_1010B68  +
mov ax [ecx] +
jmp loc_1010B72  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
mov edx 80070057h +
test ecx ecx +
jz loc_1010B96  +
cmp ecx 7FFFFFFFh +
jbe loc_1010B98  +
mov eax edx +
test eax eax +
jl loc_1010BF5  +
push edi  +
mov edi [ebp+arg_C] +
cmp edi 7FFFFFFEh +
jbe loc_1010BB4  +
mov eax edx +
mov edx [ebp+arg_0] +
xor ecx ecx +
mov [edx] cx +
jmp loc_1010BF4  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_1010BE4  +
mov edx [ebp+arg_8] +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_1010BE0  +
movzx ecx word ptr [edx+eax] +
test cx cx +
jz loc_1010BE0  +
mov [eax] cx +
inc eax  +
inc eax  +
dec esi  +
jnz loc_1010BC8  +
test esi esi +
jnz loc_1010BEB  +
dec eax  +
dec eax  +
mov ebx 8007007Ah +
xor ecx ecx +
mov [eax] cx +
pop esi  +
mov eax ebx +
pop ebx  +
pop edi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 0 +
push esi  +
push edi  +
jl loc_1010C8F  +
cmp [ebp+arg_4] 0 +
jnz loc_1010C1B  +
cmp [ebp+arg_8] 0 +
jnz loc_1010C8F  +
test [ebp+arg_C] 0FFFFFFFDh +
jnz loc_1010C8F  +
push offset sub_1010AAD  +
push 0Ch  +
push 164h  +
lea eax [ebp+arg_0] +
push offset dword_1007738  +
push eax  +
call bsearch  +
mov ecx eax +
add esp 14h +
test ecx ecx +
jz loc_1010C8F  +
test byte ptr [ebp+arg_C] 2 +
jnz loc_1010C57  +
push ecx  +
call sub_1010AEF  +
test eax eax +
jnz loc_1010C8F  +
mov edi [ecx+4] +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1010C5F  +
sub eax edx +
sar eax 1 +
cmp [ebp+arg_4] 0 +
lea esi [eax+1] +
jz loc_1010C8B  +
push esi  +
push edi  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1010B7B  +
test eax eax +
jge loc_1010C8B  +
push 7Ah  +
jmp loc_1010C91  +
mov eax esi +
jmp loc_1010C99  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
xor edi edi +
cmp [ebp+arg_0] edi +
jz loc_1010D52  +
cmp [ebp+arg_8] edi +
jle loc_1010CC7  +
cmp [ebp+arg_4] edi +
jz loc_1010D52  +
cmp [ebp+arg_8] edi +
jl loc_1010D52  +
test [ebp+arg_C] 0FFFFFFFDh +
jnz loc_1010D52  +
push offset sub_1010AD4  +
push 8  +
push 163h  +
push offset off_10087F0  +
push [ebp+arg_0]  +
call bsearch  +
add esp 14h +
cmp eax edi +
jz loc_1010D52  +
mov ecx [eax+4] +
imul ecx ecx +
mov edx offset dword_1007738 +
add ecx edx +
test byte ptr [ebp+arg_C] 2 +
jnz loc_1010D13  +
push ecx  +
call sub_1010AEF  +
test eax eax +
jnz loc_1010D52  +
mov eax [ecx+8] +
imul eax eax +
add eax edx +
mov eax [eax+4] +
mov ecx eax +
lea edx [ecx+2] +
mov si [ecx] +
inc ecx  +
inc ecx  +
cmp si di +
jnz loc_1010D23  +
sub ecx edx +
sar ecx 1 +
lea esi [ecx+1] +
cmp [ebp+arg_4] edi +
jz loc_1010D4E  +
push esi  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1010B7B  +
test eax eax +
jge loc_1010D4E  +
push 7Ah  +
jmp loc_1010D54  +
mov eax esi +
jmp loc_1010D5C  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ds:FormatMessageW +
mov ebx ecx +
xor ecx ecx +
push edi  +
mov edi [ebp+lpBuffer] +
mov [edi] cx +
mov ecx [ebx+4] +
xor eax eax +
test ecx ecx +
jz loc_1010DD6  +
push [ebp+Arguments]  +
push [ebp+nSize]  +
push edi  +
push [ebp+dwLanguageId]  +
push [ebp+dwMessageId]  +
push ecx  +
push [ebp+dwFlags]  +
call esi  +
test eax eax +
jnz loc_1010DEF  +
mov ebx [ebx] +
test ebx ebx +
jz loc_1010DEF  +
push [ebp+Arguments]  +
push [ebp+nSize]  +
push edi  +
push [ebp+dwLanguageId]  +
push [ebp+dwMessageId]  +
push ebx  +
push [ebp+dwFlags]  +
call esi  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+10h] +
push eax  +
mov dword ptr [esi] offset off_1002A50 +
call sub_1002EDE  +
mov dword ptr [esi] offset off_1002F4C +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ecx+10h] +
push eax  +
push 200h  +
push 80h  +
push dword ptr [ebp+8]  +
call sub_100C633  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ecx+10h] +
cmp [ecx+4] eax +
jz loc_1010E58  +
push eax  +
push 17h  +
push dword ptr [ebp+8]  +
call sub_100C4EA  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1010DFB  +
test byte ptr [ebp+8] 1 +
jz loc_1010E7B  +
push esi  +
call off_1014494  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
and eax 0FFFFh +
cmp eax 2EE0h +
jle loc_1010EA7  +
cmp eax 2F9Ah +
jg loc_1010EA7  +
xor eax eax +
inc eax  +
jmp loc_1010EA9  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
and eax 0FFFFh +
cmp eax 1600h +
jl loc_1010ED2  +
cmp eax 1850h +
jg loc_1010ED2  +
xor eax eax +
inc eax  +
jmp loc_1010ED4  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
call sub_100138C  +
mov esi ecx +
mov [ebp-10h] esi +
lea eax [esi+10h] +
push eax  +
push 18h  +
call sub_1002F25  +
push dword ptr [ebp+0Ch]  +
and dword ptr [ebp-4] 0 +
push dword ptr [ebp+8]  +
mov ecx esi +
mov dword ptr [esi] offset off_1002A50 +
call sub_1010EDD  +
mov eax esi +
call __EH_epilog3  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 94h +
test byte ptr dword_10145A4 1 +
jnz loc_1010FD2  +
or dword_10145A4 1 +
and dword_101459C 0 +
and dword_10145A0 0 +
push offset loc_10123D8  +
call sub_1003B50  +
pop ecx  +
cmp dword_1014598 0 +
push esi  +
mov esi offset dword_101459C +
jnz loc_1011010  +
push offset aTquery_dll  +
lea ecx [ebp+var_94] +
call sub_100D924  +
push dword ptr [eax+4]  +
mov ecx esi +
call sub_100D7C4  +
lea ecx [ebp+var_94] +
call sub_1002EBD  +
mov dword_1014598 1 +
mov eax esi +
pop esi  +
leave   +
retn   +
***
test byte ptr dword_10145B4 1 +
jnz loc_1011043  +
or dword_10145B4 1 +
and dword_10145AC 0 +
and dword_10145B0 0 +
push offset loc_10123E7  +
call sub_1003B50  +
pop ecx  +
cmp dword_10145A8 0 +
push esi  +
mov esi offset dword_10145AC +
jnz loc_1011068  +
push offset aWinhttp_dll  +
mov ecx esi +
call sub_100D7C4  +
mov dword_10145A8 1 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 94h +
test byte ptr dword_10145C4 1 +
jnz loc_10110BD  +
or dword_10145C4 1 +
and dword_10145BC 0 +
and dword_10145C0 0 +
push offset loc_10123F6  +
call sub_1003B50  +
pop ecx  +
cmp dword_10145B8 0 +
push esi  +
mov esi offset dword_10145BC +
jnz loc_10110FB  +
push offset aTquery_dll  +
lea ecx [ebp+var_94] +
call sub_100D878  +
push dword ptr [eax+4]  +
mov ecx esi +
call sub_100D7C4  +
lea ecx [ebp+var_94] +
call sub_1002EBD  +
mov dword_10145B8 1 +
mov eax esi +
pop esi  +
leave   +
retn   +
***
call sub_1002CA3  +
mov edi ecx +
lea esi [edi+10h] +
push esi  +
push 401h  +
mov [ebp-54h] edi +
call sub_1002F25  +
xor ebx ebx +
cmp dword ptr [ebp+8] 8000FFFFh +
mov [ebp-4] ebx +
mov dword ptr [edi] offset off_10029D0 +
jnz loc_101113F  +
mov dword ptr [ebp+8] 80041501h +
cmp [ebp+0Ch] ebx +
jz loc_101129F  +
mov ecx [ebp+8] +
mov eax ecx +
sar eax 10h +
and eax 1FFFh +
mov esi 400h +
cmp eax 7 +
jnz loc_10111B9  +
push ecx  +
call sub_1010E87  +
test eax eax +
jz loc_1011183  +
push ebx  +
push esi  +
lea eax [edi+10h] +
push eax  +
movzx eax word ptr [ebp+8] +
push esi  +
push eax  +
push 800h  +
mov ecx edi +
call sub_101101A  +
jmp loc_10111DE  +
push dword ptr [ebp+8]  +
call sub_1010EB2  +
push ebx  +
test eax eax +
push esi  +
lea eax [edi+10h] +
push eax  +
jz loc_10111A5  +
push ebx  +
push dword ptr [ebp+8]  +
push 800h  +
call sub_1011089  +
jmp loc_10111DE  +
movzx eax word ptr [ebp+8] +
push esi  +
push eax  +
push ebx  +
push 1000h  +
call ds:FormatMessageW  +
jmp loc_1011202  +
cmp eax 4 +
jnz loc_10111E7  +
push ecx  +
call sub_1010EB2  +
push ebx  +
push esi  +
test eax eax +
lea eax [edi+10h] +
push eax  +
push ebx  +
push dword ptr [ebp+8]  +
push 800h  +
jnz loc_101119E  +
mov ecx edi +
call sub_1010F9E  +
mov ecx eax +
call sub_1010D9E  +
jmp loc_1011202  +
cmp eax 65h +
jnz loc_1011206  +
and ecx 0FFFFh +
push ecx  +
call ds:strerror  +
pop ecx  +
push eax  +
mov ecx edi +
call sub_100C5C5  +
cmp eax ebx +
jnz loc_101121E  +
push ebx  +
push esi  +
lea eax [edi+10h] +
push eax  +
push esi  +
push dword ptr [ebp+8]  +
push ebx  +
push 1000h  +
call ds:FormatMessageW  +
jmp loc_1011253  +
xor ecx ecx +
mov [edi+810h] cx +
lea ecx [edi+10h] +
jmp loc_1011246  +
cmp word ptr [ecx] 0Dh +
jnz loc_1011238  +
push 20h  +
pop edx  +
mov [ecx] dx +
cmp word ptr [ecx] 0Ah +
jnz loc_1011244  +
push 20h  +
pop edx  +
mov [ecx] dx +
inc ecx  +
inc ecx  +
cmp [ecx] bx +
jnz loc_101122C  +
push eax  +
mov ecx edi +
call sub_100C997  +
push 10h  +
push dword ptr [ebp+8]  +
lea ecx [ebp-50h] +
call sub_1010F5C  +
mov eax [edi] +
push 0FFFFFFFFh  +
push dword ptr [edi+0Ch]  +
mov ecx edi +
push offset aHresult0x  +
mov byte ptr [ebp-4] 1 +
call dword ptr [eax+10h]  +
mov eax [edi] +
push 0FFFFFFFFh  +
push dword ptr [edi+0Ch]  +
mov ecx edi +
push dword ptr [ebp-4Ch]  +
call dword ptr [eax+10h]  +
mov eax [edi] +
push 0FFFFFFFFh  +
push dword ptr [edi+0Ch]  +
mov ecx edi +
push offset dword_10112D0  +
call dword ptr [eax+10h]  +
lea ecx [ebp-50h] +
call sub_1010DFB  +
jmp loc_10112BD  +
push 10h  +
push esi  +
push dword ptr [ebp+8]  +
call ds:_ultow  +
add esp 0Ch +
push esi  +
call ds:lstrlenW  +
push eax  +
mov ecx edi +
call sub_100C997  +
xor eax eax +
mov [edi+810h] ax +
mov eax edi +
call sub_1002CE0  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test [ebp+arg_0] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1002F4C +
jz loc_1011310  +
push esi  +
call off_1014494  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_10012FD  +
mov eax offset dword_1011378 +
jmp loc_100BFDC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_10012FD  +
mov eax offset dword_10113BC +
jmp loc_100BFDC  +
***
cmp bh 0FFh +
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_10012FD  +
mov eax offset dword_1011418 +
jmp loc_100BFDC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-158h] +
xor ecx eax +
call sub_10012FD  +
mov ecx [edx-4] +
xor ecx eax +
call sub_10012FD  +
mov eax offset dword_1011480 +
jmp loc_100BFDC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_10012FD  +
mov eax offset dword_10114D8 +
jmp loc_100BFDC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_10012FD  +
mov eax offset dword_1011534 +
jmp loc_100BFDC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-68h] +
xor ecx eax +
call sub_10012FD  +
mov ecx [edx-4] +
xor ecx eax +
call sub_10012FD  +
mov eax offset dword_1011598 +
jmp loc_100BFDC  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
int 3  +
xor ecx eax +
call sub_10012FD  +
mov eax offset dword_10115EC +
jmp loc_100BFDC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10h] +
xor ecx eax +
call sub_10012FD  +
mov eax offset dword_1011644 +
jmp loc_100BFDC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2134h] +
xor ecx eax +
call sub_10012FD  +
mov ecx [edx-8] +
xor ecx eax +
call sub_10012FD  +
mov eax offset dword_10116AC +
jmp loc_100BFDC  +
***
cmp edi 0FFFFFFFFh +
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-226Ch] +
xor ecx eax +
call sub_10012FD  +
mov ecx [edx-4] +
xor ecx eax +
call sub_10012FD  +
mov eax offset dword_1011714 +
jmp loc_100BFDC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_10012FD  +
mov eax offset dword_1011770 +
jmp loc_100BFDC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_10012FD  +
mov eax offset dword_10117CC +
jmp loc_100BFDC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_10012FD  +
mov eax offset dword_101183C +
jmp loc_100BFDC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_10012FD  +
mov eax offset dword_1011880 +
jmp loc_100BFDC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_10012FD  +
mov eax offset dword_10118C4 +
jmp loc_100BFDC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_10012FD  +
mov eax offset dword_1011908 +
jmp loc_100BFDC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-434h] +
xor ecx eax +
call sub_10012FD  +
mov ecx [edx-8] +
xor ecx eax +
call sub_10012FD  +
mov eax offset dword_1011970 +
jmp loc_100BFDC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_10012FD  +
mov eax offset dword_10119C8 +
jmp loc_100BFDC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_10012FD  +
mov eax offset dword_1011A20 +
jmp loc_100BFDC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_10012FD  +
mov eax offset dword_1011A78 +
jmp loc_100BFDC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_10012FD  +
mov eax offset dword_1011ABC +
jmp loc_100BFDC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_10012FD  +
mov eax offset dword_1011B00 +
jmp loc_100BFDC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-183Ch] +
xor ecx eax +
call sub_10012FD  +
mov ecx [edx-4] +
xor ecx eax +
call sub_10012FD  +
mov eax offset dword_1011B74 +
jmp loc_100BFDC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1834h] +
xor ecx eax +
call sub_10012FD  +
mov ecx [edx-4] +
xor ecx eax +
call sub_10012FD  +
mov eax offset dword_1011BD8 +
jmp loc_100BFDC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-854h] +
xor ecx eax +
call sub_10012FD  +
mov ecx [edx-4] +
xor ecx eax +
call sub_10012FD  +
mov eax offset dword_1011C3C +
jmp loc_100BFDC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_10012FD  +
mov eax offset dword_1011C94 +
jmp loc_100BFDC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_10012FD  +
mov eax offset dword_1011CEC +
jmp loc_100BFDC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_10012FD  +
mov eax offset dword_1011D30 +
jmp loc_100BFDC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_10012FD  +
mov eax offset dword_1011D74 +
jmp loc_100BFDC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_10012FD  +
mov eax offset dword_1011DB8 +
jmp loc_100BFDC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-288h] +
xor ecx eax +
call sub_10012FD  +
mov ecx [edx-8] +
xor ecx eax +
call sub_10012FD  +
mov eax offset dword_1011E0C +
jmp loc_100BFDC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-338h] +
xor ecx eax +
call sub_10012FD  +
mov ecx [edx-8] +
xor ecx eax +
call sub_10012FD  +
mov eax offset dword_1011E80 +
jmp loc_100BFDC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_10012FD  +
mov eax offset dword_1011EE8 +
jmp loc_100BFDC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_10012FD  +
mov eax offset dword_1011F40 +
jmp loc_100BFDC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0C0h] +
xor ecx eax +
call sub_10012FD  +
mov ecx [edx-8] +
xor ecx eax +
call sub_10012FD  +
mov eax offset dword_1011FA8 +
jmp loc_100BFDC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_10012FD  +
mov eax offset dword_101200C +
jmp loc_100BFDC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-38h] +
xor ecx eax +
call sub_10012FD  +
mov eax offset dword_1012064 +
jmp loc_100BFDC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_10012FD  +
mov eax offset dword_10120D4 +
jmp loc_100BFDC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_10012FD  +
mov eax offset dword_1012170 +
jmp loc_100BFDC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0A4h] +
xor ecx eax +
call sub_10012FD  +
mov ecx [edx-4] +
xor ecx eax +
call sub_10012FD  +
mov eax offset dword_10121D4 +
jmp loc_100BFDC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_10012FD  +
mov eax offset dword_101222C +
jmp loc_100BFDC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_10012FD  +
mov eax offset dword_1012284 +
jmp loc_100BFDC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0C38h] +
xor ecx eax +
call sub_10012FD  +
mov ecx [edx-4] +
xor ecx eax +
call sub_10012FD  +
mov eax offset dword_10122E8 +
jmp loc_100BFDC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_10012FD  +
mov eax offset dword_1012340 +
jmp loc_100BFDC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-58h] +
xor ecx eax +
call sub_10012FD  +
mov ecx [edx-4] +
xor ecx eax +
call sub_10012FD  +
mov eax offset dword_10123A0 +
jmp loc_100BFDC  +
***
mov ecx offset dword_1014578 +
jmp sub_100D6B8  +
***
mov ecx offset dword_101459C +
jmp sub_100D6B8  +
***
mov ecx offset dword_10145AC +
jmp sub_100D6B8  +
***
mov ecx offset dword_10145BC +
jmp sub_100D6B8  +
***
