xor edi edi +
and [eax] al +
xor bh bh +
mov ah 30h +
mov bh 30h +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 218h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
mov [ebp+lpString1] eax +
test eax eax +
jz loc_100614D  +
push esi  +
mov esi ds:GetKeyboardLayoutList +
push edi  +
push 0  +
push 0  +
call esi  +
mov edi eax +
mov [ebp+var_214] edi +
test edi edi +
jz loc_1006149  +
cmp edi 3FFFh +
jnb loc_1006149  +
shl eax 2 +
push eax  +
push 42h  +
call ds:GlobalAlloc  +
mov [ebp+hMem] eax +
test eax eax +
jz loc_1006149  +
push eax  +
call ds:GlobalLock  +
mov ebx eax +
test ebx ebx +
jnz loc_100615C  +
push [ebp+hMem]  +
call ds:GlobalFree  +
xor eax eax +
pop edi  +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop ebx  +
call sub_1026CC5  +
leave   +
retn 4  +
push ebx  +
push edi  +
call esi  +
xor edi edi +
cmp [ebp+var_214] edi +
jbe loc_10061A5  +
mov esi [ebx+edi*4] +
lea eax [ebp+String2] +
push eax  +
push 1006h  +
push 0  +
push esi  +
call ImmEscapeW  +
test eax eax +
jz loc_100619C  +
lea eax [ebp+String2] +
push eax  +
push [ebp+lpString1]  +
call ds:lstrcmpW  +
test eax eax +
jz loc_10061A7  +
inc edi  +
cmp edi [ebp+var_214] +
jb loc_100616A  +
xor esi esi +
push [ebp+hMem]  +
call ds:GlobalUnlock  +
push [ebp+hMem]  +
call ds:GlobalFree  +
mov eax esi +
jmp loc_100614B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 420h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jnz loc_10061EC  +
xor eax eax +
jmp loc_10063D6  +
cmp [ebp+CodePage] 4B0h +
push esi  +
push edi  +
lea esi [ebx+47h] +
jnz loc_1006212  +
lea edi [ebp+szRegister] +
movs   +
xor eax eax +
movs   +
mov [ebp+var_414] 3 +
mov [ebp+var_A] ax +
jmp loc_1006245  +
mov edi ds:MultiByteToWideChar +
push 6  +
lea eax [ebp+szRegister] +
push eax  +
push 6  +
push esi  +
push 1  +
push [ebp+CodePage]  +
call edi  +
test eax eax +
jnz loc_100623E  +
and [ebp+CodePage] eax +
push 6  +
lea eax [ebp+szRegister] +
push eax  +
push 6  +
push esi  +
push 1  +
push 0  +
call edi  +
xor ecx ecx +
mov [ebp+eax*2+szRegister] cx +
lea eax [ebp+szRegister] +
push eax  +
call sub_10060D5  +
mov [ebp+var_418] eax +
test eax eax +
jz loc_10063E5  +
and [ebp+var_414] 0 +
lea eax [ebp+var_414] +
push eax  +
push 1001h  +
push 0  +
push [ebp+var_418]  +
call ImmEscapeW  +
mov ecx eax +
mov edx 0FFFFh +
shr ecx 10h +
cmp cx dx +
mov edx [ebp+var_414] +
jnz loc_1006297  +
add edx edx +
xor ecx ecx +
jmp loc_1006299  +
add edx edx +
inc [ebp+var_414]  +
cmp [ebp+var_414] 100h +
mov [ebp+edx+var_210] cx +
mov [ebp+edx+var_410] ax +
jb loc_1006263  +
mov eax [ebp+arg_8] +
add eax ebx +
lea esi [ebx+102h] +
mov [ebp+var_420] eax +
cmp esi eax +
jnb loc_10063CE  +
and dword ptr [ebp+szRegister] 0 +
cmp [ebp+CodePage] 4B0h +
jnz loc_10062EA  +
mov ax [esi] +
mov [ebp+szRegister] ax +
jmp loc_1006315  +
mov al [esi+1] +
mov [ebp+MultiByteStr] al +
mov al [esi] +
push 2  +
mov [ebp-41Bh] al +
lea eax [ebp+szRegister] +
push eax  +
push 2  +
lea eax [ebp+MultiByteStr] +
push eax  +
push 1  +
push [ebp+CodePage]  +
call ds:MultiByteToWideChar  +
movzx edx word ptr [ebx+10h] +
and [ebp+var_414] 0 +
xor eax eax +
test edx edx +
jbe loc_100638A  +
mov ecx [ebp+var_414] +
movzx ecx byte ptr [esi+ecx+2] +
cmp ecx 100h +
jnb loc_10063E5  +
cmp eax 2 +
jnb loc_10063E5  +
movzx ecx [ebp+ecx*2+var_210] +
test cx cx +
jz loc_100635E  +
mov [ebp+eax*2+szReading] cx +
mov edi 0FFh +
inc eax  +
mov ecx [ebp+var_414] +
movzx ecx byte ptr [esi+ecx+2] +
movzx ecx [ebp+ecx*2+var_410] +
mov [ebp+eax*2+szReading] cx +
inc eax  +
inc [ebp+var_414]  +
mov edi 0FFh +
cmp [ebp+var_414] edx +
jb loc_1006326  +
lea ecx [eax+6] +
cmp ecx 6 +
jnb loc_10063E5  +
add eax eax +
xor ecx ecx +
mov word ptr [ebp+eax+var_4] cx +
mov [ebp+eax-6] cx +
mov [ebp+eax+szReading] cx +
lea eax [ebp+szRegister] +
push eax  +
push 1  +
lea eax [ebp+szReading] +
push eax  +
push [ebp+var_418]  +
call ImmRegisterWordW  +
movzx eax word ptr [ebx+10h] +
lea esi [esi+eax+4] +
cmp esi [ebp+var_420] +
jb loc_10062D4  +
mov eax [ebp+var_418] +
pop edi  +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop ebx  +
call sub_1026CC5  +
leave   +
retn 10h  +
xor eax eax +
jmp loc_10063D4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 7FFFFFFFh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1025B6B  +
test eax eax +
jl loc_100641C  +
push 7FFFFFFEh  +
push [ebp+arg_8]  +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1025B8C  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 7FFFFFFFh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1025B6B  +
test eax eax +
jl loc_1006452  +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1025BE8  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 4B8h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+hWnd] +
push esi  +
push edi  +
push 4  +
push eax  +
mov [ebp+hWndParent] eax +
call ds:GetParent  +
push eax  +
call ds:GetWindow  +
mov esi ds:GetKeyboardLayoutList +
xor edi edi +
push edi  +
push edi  +
mov [ebp+var_47C] eax +
call esi  +
mov [ebp+lpString] eax +
cmp eax edi +
jz loc_1006939  +
cmp eax 3FFFh +
jnb loc_1006939  +
shl eax 2 +
push eax  +
push 40h  +
call ds:GlobalAlloc  +
mov [ebp+hMem] eax +
cmp eax edi +
jz loc_1006939  +
push ebx  +
push eax  +
push [ebp+lpString]  +
xor ebx ebx +
call esi  +
xor esi esi +
mov [ebp+var_478] edi +
cmp [ebp+lpString] edi +
jbe loc_1006565  +
mov ecx [ebp+var_478] +
mov eax [ebp+hMem] +
mov eax [eax+ecx*4] +
push eax  +
mov [ebp+dwNewLong] eax +
call ImmIsIME  +
test eax eax +
jz loc_1006547  +
xor eax eax +
mov word ptr [ebp+var_46C] ax +
lea eax [ebp+var_46C] +
push eax  +
push 1003h  +
push edi  +
push [ebp+dwNewLong]  +
call ImmEscapeW  +
test eax eax +
jz loc_1006547  +
cmp word ptr [ebp+var_46C] di +
jz loc_1006547  +
mov eax [ebp+dwNewLong] +
mov ecx [ebp+hMem] +
mov [ecx+esi*4] eax +
inc esi  +
inc [ebp+var_478]  +
mov eax [ebp+var_478] +
cmp eax [ebp+lpString] +
jb loc_10064EA  +
mov [ebp+dwNewLong] esi +
cmp esi edi +
jnz loc_10065B4  +
mov esi ds:LoadStringW +
push 20h  +
lea eax [ebp+Buffer] +
push eax  +
push 0EF69h  +
push hInstance  +
call esi  +
push 100h  +
lea eax [ebp+Text] +
push eax  +
push 0EF6Ah  +
push hInstance  +
call esi  +
push edi  +
lea eax [ebp+Buffer] +
push eax  +
lea eax [ebp+Text] +
push eax  +
push [ebp+var_47C]  +
call ds:MessageBoxW  +
jmp loc_1006928  +
mov eax esi +
imul eax eax +
add eax 1Ch +
push eax  +
push 40h  +
call ds:GlobalAlloc  +
mov ebx eax +
cmp ebx edi +
jnz loc_10065F7  +
mov esi ds:LoadStringW +
push 20h  +
lea eax [ebp+Buffer] +
push eax  +
push 0EF6Bh  +
push hInstance  +
call esi  +
push 100h  +
lea eax [ebp+Text] +
push eax  +
push 0EF6Ch  +
jmp loc_100658F  +
mov [ebx+0Ch] esi +
lea esi [ebx+1Ch] +
mov [ebp+var_478] edi +
cmp [ebp+dwNewLong] edi +
jbe loc_1006697  +
lea eax [esi+8] +
mov [ebp+lpString] eax +
mov ecx [ebp+var_478] +
mov eax [ebp+hMem] +
mov eax [eax+ecx*4] +
push edi  +
push 1005h  +
push edi  +
push eax  +
mov [esi] eax +
call ImmEscapeW  +
cmp eax edi +
jnz loc_100663F  +
dec dword ptr [ebx+0Ch]  +
jmp loc_1006683  +
add eax eax +
cmp eax 1Ah +
ja loc_100663A  +
push [ebp+lpString]  +
push 1006h  +
push edi  +
push dword ptr [esi]  +
call ImmEscapeW  +
test eax eax +
jz loc_100663A  +
mov eax [ebp+lpString] +
xor ecx ecx +
push eax  +
mov [eax+1Eh] cx +
call ds:lstrlenW  +
mov ecx [ebp+lpString] +
add esi 4Ch +
add [ebp+lpString] 4Ch +
mov [ecx+20h] eax +
inc [ebp+var_478]  +
mov eax [ebp+var_478] +
cmp eax [ebp+dwNewLong] +
jb loc_1006618  +
cmp [ebx+0Ch] edi +
jnz loc_10066EB  +
mov esi ds:LoadStringW +
push 20h  +
lea eax [ebp+Buffer] +
push eax  +
push 0EF69h  +
push hInstance  +
call esi  +
push 100h  +
lea eax [ebp+Text] +
push eax  +
push 0EF6Ah  +
push hInstance  +
call esi  +
push edi  +
lea eax [ebp+Buffer] +
push eax  +
lea eax [ebp+Text] +
push eax  +
push [ebp+var_47C]  +
call ds:MessageBoxW  +
jmp loc_100691A  +
push 10h  +
lea eax [ebp+String] +
push eax  +
push 0EF66h  +
push hInstance  +
call ds:LoadStringW  +
push edi  +
call ds:GetDC  +
mov esi eax +
lea eax [ebp+nWidth] +
push eax  +
lea eax [ebp+String] +
push eax  +
call ds:lstrlenW  +
push eax  +
lea eax [ebp+String] +
push eax  +
push esi  +
call ds:GetTextExtentPointW  +
push esi  +
push edi  +
call ds:ReleaseDC  +
lea eax [ebp+Rect] +
push eax  +
push [ebp+hWndParent]  +
call ds:GetWindowRect  +
mov eax [ebp+Rect.bottom] +
sub eax [ebp+Rect.top] +
mov ecx [ebp-480h] +
cdq   +
add ecx ecx +
idiv  ecx +
mov esi eax +
mov eax [ebx+0Ch] +
cmp eax esi +
ja loc_1006765  +
mov esi eax +
lea eax [esi+1] +
shl eax 5 +
push eax  +
push 40h  +
call ds:GlobalAlloc  +
mov ecx eax +
mov [ebp+dwNewLong] ecx +
cmp ecx edi +
jnz loc_10067B2  +
mov esi ds:LoadStringW +
push 20h  +
lea eax [ebp+Buffer] +
push eax  +
push 0EF6Bh  +
push hInstance  +
mov [ebx+0Ch] edi +
call esi  +
push 100h  +
lea eax [ebp+Text] +
push eax  +
push 0EF6Ch  +
jmp loc_10066C6  +
mov [ecx] edi +
mov [ecx+4] esi +
mov eax [ebp+nWidth] +
mov [ecx+8] eax +
mov eax [ebp-480h] +
mov [ecx+0Ch] eax +
cmp [ebx+0Ch] esi +
jbe loc_1006872  +
mov eax [ebp+Rect.bottom] +
sub eax [ebp+Rect.top] +
push edi  +
push hInstance  +
push edi  +
push [ebp+hWndParent]  +
push eax  +
push [ebp+nWidth]  +
mov eax [ebp+Rect.right] +
sub eax [ebp+Rect.left] +
push edi  +
sub eax [ebp+nWidth] +
push eax  +
push 50000001h  +
push edi  +
push offset ClassName  +
push edi  +
call ds:CreateWindowExW  +
mov ecx [ebp+dwNewLong] +
mov [ecx+1Ch] eax +
mov ecx [ebx+0Ch] +
lea ecx [ecx+esi-2] +
push edi  +
mov [ebp+var_4B8.nMax] ecx +
lea ecx [ebp+var_4B8] +
push ecx  +
push 2  +
push eax  +
mov [ebp+var_4B8.cbSize] 1Ch +
mov [ebp+var_4B8.fMask] 17h +
mov [ebp+var_4B8.nMin] edi +
mov [ebp+var_4B8.nPage] esi +
mov [ebp+var_4B8.nPos] edi +
mov [ebp+var_4B8.nTrackPos] edi +
call ds:SetScrollInfo  +
mov ecx [ebp+dwNewLong] +
cmp esi edi +
jbe loc_100690B  +
mov [ebp+dwNewLong] 1 +
lea eax [ecx+30h] +
mov [ebp+var_47C] esi +
mov edx [ebp+nWidth] +
mov [eax-10h] edx +
mov edx [ebp+dwNewLong] +
imul edx [ebp-480h] +
shr edx 1 +
sub edx 3 +
mov [eax-0Ch] edx +
mov edx [ebp+nWidth] +
imul edx edx +
add edx [eax-10h] +
add [ebp+dwNewLong] 4 +
mov [eax-8] edx +
mov esi [ebp-480h] +
mov edx [eax-0Ch] +
lea edx [edx+esi+6] +
mov [eax-4] edx +
mov edx [eax-8] +
add edx [ebp+nWidth] +
mov [eax] edx +
mov edx [eax-0Ch] +
mov [eax+4] edx +
mov edx [ebp+nWidth] +
imul edx edx +
add edx [eax] +
add eax 20h +
dec [ebp+var_47C]  +
mov [eax-18h] edx +
mov edx [eax-1Ch] +
mov esi [ebp-480h] +
lea edx [edx+esi+6] +
mov [eax-14h] edx +
jnz loc_100688D  +
push ecx  +
push 4  +
push [ebp+hWndParent]  +
call ds:SetWindowLongW  +
cmp [ebx+0Ch] edi +
jnz loc_1006928  +
push ebx  +
call ds:GlobalFree  +
xor ebx ebx +
push [ebp+hMem]  +
call ds:GlobalFree  +
mov eax ebx +
pop ebx  +
jmp loc_100693B  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1026CC5  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
mov ebx ds:GetWindowLongW +
push esi  +
push edi  +
push 0  +
push [ebp+hWnd]  +
call ebx  +
mov edi [ebp+arg_4] +
mov esi eax +
cmp [esi+10h] edi +
jz loc_1006A75  +
cmp edi [esi+0Ch] +
jb loc_1006988  +
push 0FFFFFFFFh  +
call ds:MessageBeep  +
jmp loc_1006A75  +
push 4  +
push [ebp+hWnd]  +
call ebx  +
mov ecx [eax] +
mov [ebp+arg_4] eax +
cmp edi ecx +
jnb loc_100699C  +
mov [eax] edi +
jmp loc_10069AE  +
mov edx [eax+4] +
mov ebx edi +
sub ebx ecx +
cmp ebx edx +
jb loc_10069AE  +
mov ecx edi +
sub ecx edx +
inc ecx  +
mov [eax] ecx +
push 0  +
push 0  +
push 801h  +
push [ebp+hWnd]  +
call ds:SendMessageW  +
mov eax edi +
imul eax eax +
lea ebx [eax+esi+1Ch] +
push 0  +
push dword ptr [ebx]  +
call ds:ActivateKeyboardLayout  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
push dword ptr [esi+4]  +
call ImmGetConversionStatus  +
test eax eax +
jz loc_1006A75  +
push [ebp+var_8]  +
or [ebp+var_4] 201h +
push [ebp+var_4]  +
push dword ptr [esi+4]  +
call ImmSetConversionStatus  +
push 1  +
push 0  +
push 801h  +
push [ebp+hWnd]  +
call ds:SendMessageW  +
mov eax [ebp+arg_4] +
mov [esi+10h] edi +
mov eax [eax+1Ch] +
test eax eax +
jz loc_1006A3F  +
push 0  +
lea ecx [ebp+var_24] +
push ecx  +
push 2  +
push eax  +
mov [ebp+var_24.cbSize] 1Ch +
mov [ebp+var_24.fMask] 4 +
mov [ebp+var_24.nPos] edi +
call ds:SetScrollInfo  +
push 1  +
push 0  +
push [ebp+hWnd]  +
call ds:InvalidateRect  +
mov eax [ebx+48h] +
xor ecx ecx +
mov [ebx+eax*2+2Ch] cx +
mov eax [ebx+48h] +
add eax eax +
push eax  +
add ebx 2Ch +
push ebx  +
push ecx  +
push ecx  +
push 9  +
push dword ptr [esi+4]  +
call ImmSetCompositionStringW  +
push [ebp+hWnd]  +
call ds:SetFocus  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+hWnd] +
push ebx  +
mov ebx ds:GetWindowLongW +
push esi  +
push edi  +
push 0  +
push eax  +
mov [ebp+var_24] eax +
call ebx  +
mov esi eax +
mov eax [esi+10h] +
imul eax eax +
push 1Ch  +
lea edi [eax+esi+1Ch] +
lea eax [ebp+String2] +
push eax  +
push 1  +
push dword ptr [esi+4]  +
call ImmGetCompositionStringW  +
test eax eax +
jge loc_1006AD3  +
mov dword ptr [edi+4] 3 +
jmp loc_1006BB0  +
cmp eax 1Ah +
jbe loc_1006ADB  +
push 1Ah  +
pop eax  +
shr eax 1 +
xor ecx ecx +
mov [ebp+eax*2+String2] cx +
mov [ebp+var_28] eax +
cmp [edi+48h] eax +
jnz loc_1006AFE  +
lea eax [ebp+String2] +
push eax  +
lea eax [edi+2Ch] +
push eax  +
call ds:lstrcmpW  +
test eax eax +
jz loc_1006B6D  +
push 4  +
push [ebp+var_24]  +
call ebx  +
mov ebx eax +
lea eax [ebp+String2] +
push eax  +
push 0Eh  +
lea eax [edi+2Ch] +
push eax  +
call sub_10063EE  +
test eax eax +
jl loc_1006BB0  +
test [ebp+arg_4] 800h +
push 0  +
pop eax  +
setnz al  +
inc eax  +
mov [edi+4] eax +
mov eax [ebp+var_28] +
mov [edi+48h] eax +
push dword ptr [ebx+18h]  +
call ds:IsWindowEnabled  +
test eax eax +
jnz loc_1006B4D  +
push 1  +
push dword ptr [ebx+18h]  +
call ds:EnableWindow  +
mov eax [esi+10h] +
sub eax [ebx] +
mov edi ds:InvalidateRect +
shl eax 5 +
lea esi [eax+ebx] +
push 0  +
lea eax [esi+20h] +
push eax  +
push [ebp+var_24]  +
call edi  +
push 0  +
jmp loc_1006BA7  +
test [ebp+arg_4] 800h +
jz loc_1006BB0  +
push 4  +
push [ebp+var_24]  +
call ebx  +
xor ebx ebx +
cmp [edi+4] ebx +
jz loc_1006B8B  +
mov dword ptr [edi+4] 2 +
mov ecx [esi+10h] +
sub ecx [eax] +
mov edi ds:InvalidateRect +
shl ecx 5 +
lea esi [ecx+eax] +
push ebx  +
lea eax [esi+20h] +
push eax  +
push [ebp+var_24]  +
call edi  +
push ebx  +
add esi 30h +
push esi  +
push [ebp+var_24]  +
call edi  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1026CC5  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
cmp [ebp+arg_8] esi +
push edi  +
jle loc_1006BF0  +
mov ecx [ebp+arg_4] +
mov edx [ebp+arg_0] +
movzx eax word ptr [edx] +
movzx edi word ptr [ecx] +
sub eax edi +
inc ecx  +
inc ecx  +
inc edx  +
inc edx  +
test eax eax +
jnz loc_1006BF2  +
inc esi  +
cmp esi [ebp+arg_8] +
jl loc_1006BDA  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_C] +
push edi  +
mov edi [ebp+lpString] +
push edi  +
call ds:lstrlenW  +
lea ecx [eax+eax] +
cmp ecx 1Ah +
jbe loc_1006C2D  +
xor eax eax +
jmp loc_1006CB1  +
push edi  +
mov [esi+48h] eax +
push 0Eh  +
lea eax [esi+2Ch] +
push eax  +
call sub_10063EE  +
test eax eax +
jl loc_1006C26  +
lea eax [ebp+var_18] +
push eax  +
push 1001h  +
xor edi edi +
push edi  +
push dword ptr [esi]  +
mov [ebp+var_18] edi +
call ImmEscapeW  +
cmp eax edi +
jz loc_1006CA4  +
push ebx  +
xor ebx ebx +
cmp ax di +
jz loc_1006C67  +
mov word ptr [ebp+var_14] ax +
inc ebx  +
shr eax 10h +
mov ecx 0FFFFh +
cmp ax cx +
jz loc_1006C7F  +
cmp ax di +
jz loc_1006C7F  +
mov word ptr [ebp+ebx*2+var_14] ax +
inc ebx  +
cmp [esi+48h] edi +
jbe loc_1006CA3  +
mov edi [esi+48h] +
push ebx  +
lea eax [ebp+var_14] +
push eax  +
sub edi ebx +
lea eax [esi+edi*2+2Ch] +
push eax  +
call sub_1006BC6  +
test eax eax +
jnz loc_1006CA3  +
mov [esi+48h] edi +
test edi edi +
ja loc_1006C84  +
pop ebx  +
mov eax [esi+48h] +
xor ecx ecx +
mov [esi+eax*2+2Ch] cx +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1026CC5  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
push ebx  +
push [ebp+hWnd]  +
call ds:GetWindowLongW  +
mov esi eax +
mov eax [ebp+arg_4] +
movzx ecx ax +
shr eax 10h +
test ax ax +
jz loc_1006CF2  +
mov [esi+14h] cx +
jmp loc_1006D20  +
mov eax ecx +
shr eax 8 +
push 1  +
mov [ebp+MultiByteStr] al +
lea eax [ebp+WideCharStr] +
push eax  +
push 2  +
lea eax [ebp+MultiByteStr] +
push eax  +
push 1  +
mov [ebp-3] cl +
call ds:GetACP  +
push eax  +
call ds:MultiByteToWideChar  +
mov ax [ebp+WideCharStr] +
mov [esi+14h] ax +
xor eax eax +
mov [esi+16h] ax +
mov [esi+1Ah] ax +
mov [esi+18h] ax +
lea edi [esi+1Ch] +
mov [ebp+arg_4] ebx +
cmp [esi+0Ch] ebx +
jbe loc_1006D76  +
xor eax eax +
and [edi+48h] eax +
mov [edi+4] ebx +
push edi  +
lea ebx [edi+2Ch] +
mov [ebx] ax +
lea eax [esi+14h] +
push eax  +
push 1  +
push 0  +
push offset sub_1006BFD  +
push dword ptr [edi]  +
call ImmEnumRegisterWordW  +
push ebx  +
call ds:lstrlenW  +
mov [edi+48h] eax +
add edi 4Ch +
inc [ebp+arg_4]  +
mov eax [ebp+arg_4] +
xor ebx ebx +
cmp eax [esi+0Ch] +
jb loc_1006D39  +
mov eax [esi+10h] +
imul eax eax +
lea eax [eax+esi+1Ch] +
mov ecx [eax+48h] +
add ecx ecx +
push ecx  +
add eax 2Ch +
push eax  +
push ebx  +
push ebx  +
push 9  +
push dword ptr [esi+4]  +
call ImmSetCompositionStringW  +
push ebx  +
push ebx  +
push [ebp+hWnd]  +
call ds:InvalidateRect  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
push 4  +
push [ebp+hWnd]  +
movsx edi ax +
shr eax 10h +
movsx ebx ax +
call ds:GetWindowLongW  +
and [ebp+arg_4] 0 +
mov esi eax +
cmp dword ptr [esi+4] 0 +
jbe loc_1006E0D  +
lea eax [esi+30h] +
mov [ebp+lprc] eax +
push ebx  +
push edi  +
push [ebp+lprc]  +
call ds:PtInRect  +
test eax eax +
jnz loc_1006DFF  +
inc [ebp+arg_4]  +
mov eax [ebp+arg_4] +
add [ebp+lprc] 20h +
cmp eax [esi+4] +
jb loc_1006DDF  +
jmp loc_1006E0D  +
mov eax [esi] +
add eax [ebp+arg_4] +
push eax  +
push [ebp+hWnd]  +
call sub_1006950  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ds:GetWindowLongW +
push edi  +
push 0  +
push [ebp+hWnd]  +
call esi  +
push 4  +
push [ebp+hWnd]  +
mov edi eax +
call esi  +
mov edx [ebp+arg_4] +
movzx ecx dx +
sub ecx 0 +
jz loc_1006E77  +
dec ecx  +
jz loc_1006E72  +
dec ecx  +
jz loc_1006E6A  +
dec ecx  +
jz loc_1006E64  +
dec ecx  +
jz loc_1006E5E  +
dec ecx  +
dec ecx  +
jz loc_1006E5A  +
dec ecx  +
jnz loc_1006EA4  +
mov eax [edi+0Ch] +
dec eax  +
jmp loc_1006E9B  +
push 0  +
jmp loc_1006E9C  +
shr edx 10h +
push edx  +
jmp loc_1006E9C  +
mov ecx [eax+4] +
dec ecx  +
jmp loc_1006E7A  +
xor ecx ecx +
inc ecx  +
sub ecx [eax+4] +
jmp loc_1006E7A  +
xor ecx ecx +
inc ecx  +
jmp loc_1006E7A  +
or ecx 0FFFFFFFFh +
mov eax [edi+10h] +
test ecx ecx +
jle loc_1006E8F  +
mov edi [edi+0Ch] +
add eax ecx +
cmp eax edi +
jb loc_1006E9B  +
lea eax [edi-1] +
jmp loc_1006E9B  +
neg ecx  +
cmp ecx eax +
jbe loc_1006E99  +
xor eax eax +
jmp loc_1006E9B  +
sub eax ecx +
push eax  +
push [ebp+hWnd]  +
call sub_1006950  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub eax 21h +
jz loc_1006ED4  +
dec eax  +
jz loc_1006ED0  +
sub eax 4 +
jz loc_1006ECC  +
dec eax  +
dec eax  +
jnz loc_1006EDE  +
push 1  +
jmp loc_1006ED6  +
push 0  +
jmp loc_1006ED6  +
push 3  +
jmp loc_1006ED6  +
push 2  +
push [ebp+hWnd]  +
call sub_1006E19  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+hWnd] +
push esi  +
mov esi ds:GetWindowLongW +
push edi  +
push 0  +
push ebx  +
call esi  +
push 4  +
push ebx  +
mov edi eax +
call esi  +
mov esi eax +
mov eax [esi+0Ch] +
add eax 4 +
push eax  +
push 2  +
push 0  +
push ebx  +
call ds:CreateCaret  +
mov eax [edi+10h] +
mov ecx [esi] +
cmp eax ecx +
jnb loc_1006F26  +
mov [edi+10h] ecx +
jmp loc_1006F36  +
mov edx [esi+4] +
sub eax ecx +
cmp eax edx +
jb loc_1006F36  +
lea eax [edx+ecx-1] +
mov [edi+10h] eax +
mov eax [edi+10h] +
sub eax [esi] +
lea eax [eax+eax+1] +
mov ecx eax +
shl ecx 4 +
mov ecx [ecx+esi+24h] +
add eax 2 +
inc ecx  +
shl eax 4 +
mov eax [eax+esi] +
push ecx  +
mov ecx [esi+10h] +
lea eax [eax+ecx+2] +
push eax  +
call ds:SetCaretPos  +
push ebx  +
call ds:ShowCaret  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 70h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+hWnd] +
push esi  +
push edi  +
mov edi ds:GetWindowLongW +
push 4  +
push ebx  +
mov [ebp+var_6C] ebx +
call edi  +
push 0  +
mov esi eax +
push ebx  +
mov [ebp+var_58] esi +
call edi  +
mov edi eax +
mov eax [esi] +
imul eax eax +
lea eax [eax+edi+1Ch] +
push ebx  +
mov [ebp+var_70] edi +
mov [ebp+var_4C] eax +
call ds:HideCaret  +
lea eax [ebp+Paint] +
push eax  +
push ebx  +
call ds:BeginPaint  +
mov ecx [esi+4] +
mov [ebp+hdc] eax +
mov eax [edi+0Ch] +
sub eax [esi] +
mov [ebp+var_54] eax +
cmp eax ecx +
jbe loc_1006FDE  +
mov [ebp+var_54] ecx +
mov eax ecx +
and [ebp+var_50] 0 +
test eax eax +
jbe loc_100713D  +
mov ebx [ebp+var_4C] +
add ebx 28h +
add esi 30h +
mov [ebp+var_4C] esi +
mov esi [ebp+var_4C] +
lea edi [ebp+qrc] +
movs   +
movs   +
push 2  +
pop eax  +
movs   +
push 0Fh  +
movs   +
sub [ebp+qrc.left] eax +
sub [ebp+qrc.top] eax +
add [ebp+qrc.right] eax +
add [ebp+qrc.bottom] eax +
pop esi  +
push esi  +
push eax  +
lea eax [ebp+qrc] +
push eax  +
push [ebp+hdc]  +
call ds:DrawEdge  +
mov edi ds:GetSysColor +
push esi  +
call edi  +
push eax  +
push [ebp+hdc]  +
call ds:SetBkColor  +
mov eax [ebx-24h] +
cmp eax 3 +
jnz loc_1007043  +
push 0FFh  +
jmp loc_1007060  +
cmp eax 1 +
jnz loc_100704F  +
push 0FFFFh  +
jmp loc_1007060  +
cmp eax 4 +
jnz loc_100705B  +
push 8000h  +
jmp loc_1007060  +
push 8  +
call edi  +
push eax  +
push [ebp+hdc]  +
call ds:SetTextColor  +
mov ecx [ebx] +
cmp ecx esi +
jbe loc_1007071  +
mov ecx esi +
mov esi [ebp+var_4C] +
push 0  +
push ecx  +
mov [ebx] ecx +
lea ecx [ebx-20h] +
push ecx  +
lea eax [esi-10h] +
push eax  +
push 6  +
push dword ptr [esi-0Ch]  +
push dword ptr [eax]  +
push [ebp+hdc]  +
call sub_1025B3F  +
mov eax [ebx+20h] +
cmp eax 0Dh +
jbe loc_100709B  +
push 0Dh  +
pop eax  +
mov ecx [ebp+var_58] +
mov [ebx+20h] eax +
mov eax [ebp+var_70] +
mov eax [eax+10h] +
sub eax [ecx] +
cmp eax [ebp+var_50] +
jnz loc_10070F7  +
push 5  +
call edi  +
push eax  +
push [ebp+hdc]  +
call ds:SetBkColor  +
push 8  +
call edi  +
push eax  +
push [ebp+hdc]  +
call ds:SetTextColor  +
mov edi [ebp+var_58] +
add edi 10h +
push edi  +
push dword ptr [ebx+20h]  +
lea eax [ebx+4] +
push eax  +
push [ebp+hdc]  +
call ds:GetTextExtentPointW  +
mov eax [esi+4] +
mov ecx [edi] +
inc eax  +
push eax  +
mov eax [esi] +
lea eax [eax+ecx+2] +
push eax  +
call ds:SetCaretPos  +
jmp loc_1007105  +
push 8  +
call edi  +
push eax  +
push [ebp+hdc]  +
call ds:SetTextColor  +
push 0  +
push dword ptr [ebx+20h]  +
lea eax [ebx+4] +
push eax  +
mov eax [esi+4] +
push esi  +
push 2  +
add eax 3 +
push eax  +
push dword ptr [esi]  +
push [ebp+hdc]  +
call sub_1025B3F  +
add ebx 4Ch +
inc [ebp+var_50]  +
mov eax [ebp+var_50] +
add esi 20h +
mov [ebp+var_4C] esi +
cmp eax [ebp+var_54] +
jb loc_1006FF6  +
mov ebx [ebp+var_6C] +
lea eax [ebp+Paint] +
push eax  +
push ebx  +
call ds:EndPaint  +
push ebx  +
call ds:ShowCaret  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1026CC5  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+0Ch] +
push ebx  +
mov eax 115h +
push esi  +
push edi  +
cmp ecx eax +
ja loc_10072F2  +
jz loc_10072E2  +
cmp ecx 0Fh +
ja loc_1007285  +
jz loc_1007278  +
mov eax ecx +
dec eax  +
jz loc_1007204  +
dec eax  +
jz loc_10071BE  +
sub eax 5 +
jz loc_10071B1  +
dec eax  +
jnz loc_100731D  +
call ds:DestroyCaret  +
jmp loc_10073B5  +
push dword ptr [ebp+8]  +
call sub_1006EE7  +
jmp loc_10073B5  +
mov esi ds:GetWindowLongW +
push 4  +
push dword ptr [ebp+8]  +
call esi  +
mov edi ds:GlobalFree +
xor ebx ebx +
cmp eax ebx +
jz loc_10071DA  +
push eax  +
call edi  +
push ebx  +
push dword ptr [ebp+8]  +
call esi  +
mov esi eax +
cmp esi ebx +
jz loc_10073B5  +
push dword ptr [esi]  +
push dword ptr [ebp+8]  +
call ImmAssociateContext  +
push dword ptr [esi+4]  +
call ImmDestroyContext  +
push esi  +
call edi  +
jmp loc_10073B5  +
mov edi ds:SetWindowLongW +
xor ebx ebx +
push ebx  +
push ebx  +
push dword ptr [ebp+8]  +
call edi  +
push ebx  +
push 4  +
push dword ptr [ebp+8]  +
call edi  +
push dword ptr [ebp+8]  +
call sub_1006459  +
mov esi eax +
cmp esi ebx +
jnz loc_1007231  +
or eax 0FFFFFFFFh +
jmp loc_10073B7  +
or dword ptr [esi+10h] 0FFFFFFFFh +
mov dword ptr [esi+8] 1 +
call ImmCreateContext  +
mov [esi+4] eax +
cmp eax ebx +
jz loc_1007229  +
push eax  +
push dword ptr [ebp+8]  +
call ImmAssociateContext  +
push esi  +
push ebx  +
push dword ptr [ebp+8]  +
mov [esi] eax +
call edi  +
push ebx  +
push dword ptr [ebp+8]  +
call sub_1006950  +
push ebx  +
push ebx  +
push 802h  +
push dword ptr [ebp+8]  +
call ds:PostMessageW  +
jmp loc_10073B5  +
push dword ptr [ebp+8]  +
call sub_1006F74  +
jmp loc_10073B5  +
cmp ecx 100h +
jz loc_10072D2  +
cmp ecx 10Ch +
jbe loc_100731D  +
cmp ecx 10Eh +
jbe loc_10073B5  +
cmp ecx 10Fh +
jnz loc_100731D  +
xor ebx ebx +
push ebx  +
push dword ptr [ebp+8]  +
call ds:GetWindowLongW  +
cmp [eax+8] ebx +
jz loc_10073B5  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+8]  +
call sub_1006A81  +
jmp loc_10073B5  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
call sub_1006EAF  +
jmp loc_10073B5  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
call sub_1006E19  +
jmp loc_10073B5  +
mov eax ecx +
sub eax 201h +
jz loc_10073AA  +
sub eax 80h +
jz loc_1007397  +
dec eax  +
jz loc_1007375  +
sub eax 57Eh +
jz loc_1007368  +
dec eax  +
jz loc_1007355  +
dec eax  +
jz loc_1007339  +
dec eax  +
jz loc_1007326  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push ecx  +
jmp loc_100738C  +
push 4  +
push dword ptr [ebp+8]  +
call ds:GetWindowLongW  +
mov ecx [ebp+14h] +
mov [eax+18h] ecx +
jmp loc_10073B5  +
push 0  +
push dword ptr [ebp+8]  +
call ds:GetWindowLongW  +
push dword ptr [ebp+14h]  +
or dword ptr [eax+10h] 0FFFFFFFFh +
push dword ptr [ebp+8]  +
call sub_1006950  +
jmp loc_10073B5  +
push 0  +
push dword ptr [ebp+8]  +
call ds:GetWindowLongW  +
mov ecx [ebp+14h] +
mov [eax+8] ecx +
jmp loc_10073B5  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+8]  +
call sub_1006CC6  +
jmp loc_10073B5  +
cmp dword ptr [ebp+10h] 0 +
jbe loc_1007381  +
cmp dword ptr [ebp+10h] 5 +
jbe loc_10073B5  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push 282h  +
push dword ptr [ebp+8]  +
call ds:DefWindowProcW  +
jmp loc_10073B7  +
mov eax [ebp+14h] +
and eax 3FFFFFF0h +
push eax  +
push dword ptr [ebp+10h]  +
push 281h  +
jmp loc_100738C  +
***
push dword ptr [ebp+14h]  +
push dword ptr [ebp+8]  +
call sub_1006DAD  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 214h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+hWnd] +
push esi  +
push edi  +
xor edi edi +
push edi  +
push eax  +
mov [ebp+var_210] eax +
call ds:GetWindowLongW  +
or [ebp+var_208] 0FFFFFFFFh +
mov ecx eax +
mov [ebp+var_214] ecx +
lea esi [ecx+1Ch] +
mov [ebp+var_20C] edi +
cmp [ecx+0Ch] edi +
jbe loc_10074F6  +
mov edi ds:LoadStringW +
push ebx  +
mov ebx ds:MessageBoxW +
mov eax [esi+4] +
test eax eax +
jz loc_10074D5  +
cmp eax 4 +
jz loc_10074D5  +
cmp eax 2 +
jz loc_1007468  +
cmp [ebp+var_208] 0FFFFFFFFh +
jnz loc_10074D5  +
push 80h  +
lea eax [ebp+Buffer] +
push eax  +
push 0EF67h  +
push hInstance  +
call edi  +
lea eax [esi+8] +
push 4  +
push eax  +
lea eax [ebp+Buffer] +
jmp loc_10074BB  +
add ecx 14h +
push ecx  +
push 1  +
lea eax [esi+2Ch] +
push eax  +
push dword ptr [esi]  +
call ImmRegisterWordW  +
test eax eax +
jz loc_1007486  +
mov dword ptr [esi+4] 4 +
jmp loc_10074D5  +
cmp [ebp+var_208] 0FFFFFFFFh +
mov dword ptr [esi+4] 3 +
jnz loc_10074D5  +
push 80h  +
lea eax [ebp+Text] +
push eax  +
push 0EF68h  +
push hInstance  +
call edi  +
lea eax [esi+8] +
push 4  +
push eax  +
lea eax [ebp+Text] +
push eax  +
push [ebp+var_210]  +
call ebx  +
cmp eax 6 +
jnz loc_10074D5  +
mov eax [ebp+var_20C] +
mov [ebp+var_208] eax +
inc [ebp+var_20C]  +
mov ecx [ebp+var_214] +
mov eax [ebp+var_20C] +
add esi 4Ch +
cmp eax [ecx+0Ch] +
jb loc_100741B  +
xor edi edi +
pop ebx  +
push edi  +
push edi  +
push [ebp+var_210]  +
call ds:InvalidateRect  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_208] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1026CC5  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
mov ecx ds:dword_1001950[eax*8] +
cmp ecx [ebp+arg_0] +
jz loc_100753B  +
inc eax  +
cmp eax 4 +
jb loc_1007526  +
or eax 0FFFFFFFFh +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 114h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+0Ch] +
sub eax 110h +
push esi  +
push edi  +
mov edi [ebp+8] +
mov [ebp-10Ch] edi +
jz loc_10075CC  +
dec eax  +
jz loc_1007585  +
sub eax 171h +
jnz loc_100758E  +
cmp [ebp+10h] eax +
jbe loc_100758E  +
cmp dword ptr [ebp+10h] 2 +
ja loc_100758E  +
jmp loc_10075C4  +
mov eax [ebp+10h] +
dec eax  +
jz loc_1007599  +
dec eax  +
jz loc_1007595  +
xor eax eax +
jmp loc_100771C  +
push 0  +
jmp loc_10075B4  +
push 0E8h  +
push edi  +
call ds:GetDlgItem  +
mov esi eax +
push esi  +
call sub_10073C3  +
cmp eax 0FFFFFFFFh +
jnz loc_10075BD  +
push 1  +
push edi  +
call ds:EndDialog  +
jmp loc_10075C4  +
push esi  +
call ds:SetFocus  +
xor eax eax +
inc eax  +
jmp loc_100771C  +
push ebx  +
mov esi 80h +
push esi  +
lea eax [ebp-104h] +
push eax  +
push edi  +
call ds:GetWindowTextW  +
mov ecx [ebp+14h] +
mov edi eax +
movzx eax word ptr [ebp+14h] +
shr ecx 10h +
xor ebx ebx +
mov [ebp-114h] eax +
test cx cx +
jz loc_1007696  +
call ds:GetACP  +
mov edx eax +
push edx  +
call sub_100751F  +
mov [ebp-110h] eax +
cmp edx 4B0h +
jz loc_1007691  +
cmp eax 0FFFFFFFFh +
jz loc_1007691  +
push ebx  +
push ebx  +
push 4  +
lea eax [ebp-108h] +
push eax  +
push 1  +
lea eax [ebp-114h] +
push eax  +
push 200h  +
push edx  +
mov [ebp-108h] ebx +
call ds:WideCharToMultiByte  +
mov eax [ebp-108h] +
movzx ecx byte ptr [ebp-108h] +
shr eax 8 +
movzx eax al +
shl ecx 8 +
or eax ecx +
push eax  +
mov [ebp-108h] eax +
mov eax [ebp-110h] +
push ds:off_1001954[eax*8]  +
sub esi edi +
push dword ptr [ebp-114h]  +
lea eax [ebp+edi*2-104h] +
push offset a4xS4x  +
push esi  +
push eax  +
call sub_1006425  +
add esp 18h +
jmp loc_10076AF  +
push dword ptr [ebp+14h]  +
jmp loc_1007697  +
push eax  +
push offset a4x  +
sub esi edi +
lea eax [ebp+edi*2-104h] +
push esi  +
push eax  +
call sub_1006425  +
add esp 10h +
test eax eax +
jge loc_10076B7  +
xor eax eax +
jmp loc_100771B  +
lea eax [ebp-104h] +
push eax  +
push dword ptr [ebp-10Ch]  +
call ds:SetWindowTextW  +
mov esi ds:GetDlgItem +
push 0E8h  +
push dword ptr [ebp-10Ch]  +
call esi  +
push dword ptr [ebp+14h]  +
mov edi ds:SendMessageW +
push ebx  +
push 800h  +
push eax  +
mov [ebp-110h] eax +
call edi  +
push 1  +
push dword ptr [ebp-10Ch]  +
call esi  +
mov esi eax +
push ebx  +
push esi  +
call ds:EnableWindow  +
push esi  +
push ebx  +
push 803h  +
push dword ptr [ebp-110h]  +
call edi  +
xor eax eax +
inc eax  +
pop ebx  +
mov ecx [ebp-4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1026CC5  +
leave   +
retn 10h  +
***
push ebp  +
mov ebp esp +
sub esp 32Ch +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+8] +
mov edx [ebp+14h] +
push ebx  +
push esi  +
mov esi ds:GetKeyboardLayoutList +
push edi  +
mov [ebp-2ECh] eax +
push 14h  +
pop ecx  +
xor eax eax +
mov ebx offset dword_102CD98 +
inc eax  +
mov edi ebx +
stos   +
xor edi edi +
push edi  +
push edi  +
mov hInstance edx +
call esi  +
mov [ebp-2F4h] eax +
cmp eax 14h +
ja loc_10079F7  +
shl eax 2 +
push eax  +
push 40h  +
call ds:GlobalAlloc  +
mov [ebp-2F8h] eax +
cmp eax edi +
jnz loc_10077EA  +
mov esi ds:LoadStringW +
push 20h  +
lea eax [ebp-44h] +
push eax  +
push 0EF6Bh  +
push hInstance  +
call esi  +
push 100h  +
lea eax [ebp-2E4h] +
push eax  +
push 0EF6Ch  +
push hInstance  +
call esi  +
push edi  +
lea eax [ebp-44h] +
push eax  +
lea eax [ebp-2E4h] +
push eax  +
push dword ptr [ebp-2ECh]  +
call ds:MessageBoxW  +
jmp loc_10079F7  +
push eax  +
push dword ptr [ebp-2F4h]  +
call esi  +
mov [ebp-2E8h] edi +
mov [ebp-2F0h] edi +
cmp [ebp-2F4h] edi +
jbe loc_10078D4  +
mov eax [ebp-2F8h] +
sub eax ebx +
mov [ebp-2FCh] eax +
mov esi 1003h +
jmp loc_1007826  +
mov eax [ebp-2FCh] +
mov ecx [ebp-2E8h] +
mov ebx dword_102CD98[eax+ecx*4] +
push ebx  +
call ImmIsIME  +
test eax eax +
jz loc_10078BC  +
xor eax eax +
mov [ebp-0E4h] ax +
lea eax [ebp-0E4h] +
push eax  +
push esi  +
push edi  +
push ebx  +
call ImmEscapeW  +
cmp eax edi +
jz loc_10078BC  +
cmp [ebp-0E4h] di +
jnz loc_1007884  +
mov ecx [ebp-2E8h] +
cmp dword_102CD98[ecx*4] edi +
jz loc_1007880  +
push edi  +
push 3  +
push dword ptr [ebp-2ECh]  +
push ebx  +
call ImmConfigureIMEW  +
cmp eax edi +
jz loc_10078BC  +
mov eax [ebp-2E8h] +
mov dword_102CD98[eax*4] edi +
cmp [ebp-0E4h] di +
jnz loc_10078B6  +
lea eax [ebp-0E4h] +
push eax  +
push esi  +
push edi  +
push ebx  +
call ImmEscapeW  +
test eax eax +
jz loc_10078BC  +
cmp [ebp-0E4h] di +
jz loc_10078BC  +
inc dword ptr [ebp-2F0h]  +
inc dword ptr [ebp-2E8h]  +
mov eax [ebp-2E8h] +
cmp eax [ebp-2F4h] +
jb loc_1007820  +
push dword ptr [ebp-2F8h]  +
call ds:GlobalFree  +
cmp [ebp-2F0h] edi +
jnz loc_1007917  +
mov esi ds:LoadStringW +
push 20h  +
lea eax [ebp-44h] +
push eax  +
push 0EF69h  +
push hInstance  +
call esi  +
push 100h  +
lea eax [ebp-2E4h] +
push eax  +
push 0EF6Ah  +
jmp loc_10077C5  +
***
lea eax [ebp-32Ch] +
push eax  +
push off_102C000  +
push hInstance  +
call ds:GetClassInfoExW  +
test eax eax +
jnz loc_10079B3  +
mov eax hInstance +
push 7F00h  +
push edi  +
mov dword ptr [ebp-32Ch] 30h +
mov dword ptr [ebp-328h] 3 +
mov dword ptr [ebp-324h] offset loc_1007165 +
mov [ebp-320h] edi +
mov dword ptr [ebp-31Ch] 8 +
mov [ebp-318h] eax +
mov [ebp-314h] edi +
call ds:LoadCursorW  +
mov [ebp-310h] eax +
mov eax off_102C000 +
mov [ebp-304h] eax +
lea eax [ebp-32Ch] +
push eax  +
mov dword ptr [ebp-30Ch] 10h +
mov [ebp-308h] edi +
mov [ebp-300h] edi +
call ds:RegisterClassExW  +
push edi  +
call ds:GetKeyboardLayout  +
movzx ecx word ptr [ebp+0Ch] +
mov esi eax +
mov eax [ebp+10h] +
neg eax  +
sbb eax eax +
and eax 0FFFFh +
shl eax 10h +
or eax ecx +
push eax  +
push offset loc_1007544  +
push dword ptr [ebp-2ECh]  +
push off_102C004  +
push hInstance  +
call ds:DialogBoxParamW  +
push edi  +
push esi  +
call ds:ActivateKeyboardLayout  +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1026CC5  +
leave   +
retn 10h  +
***
mov edi edi +
push esi  +
push hMem  +
mov esi ecx +
call ds:GlobalUnlock  +
push hMem  +
call ds:GlobalFree  +
push 2  +
mov ecx esi +
call ?EndDialog@CDialog@@QAEXH@Z  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 70h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
push 17h  +
pop ecx  +
lea esi [ebp+arg_0] +
lea edi [ebp+var_60] +
movs   +
xor esi esi +
cmp [ebp+var_60.lfFaceName] 40h +
mov [ebp+var_68] esi +
jnz loc_1007A6C  +
xor eax eax +
jmp loc_1007C17  +
lea eax [ebp+var_60] +
push eax  +
call ds:CreateFontIndirectW  +
mov [ebp+var_6C] eax +
cmp eax esi +
jz loc_1007A8D  +
push eax  +
push dword_102CE4C  +
call ds:SelectObject  +
mov [ebp+var_68] eax +
mov edi ds:GetFontData +
push ebx  +
push esi  +
push esi  +
push esi  +
mov ebx 656D616Eh +
push ebx  +
push dword_102CE4C  +
call edi  +
mov [ebp+var_70] eax +
cmp eax 0FFFFFFFFh +
jz loc_1007BF2  +
cmp eax esi +
jz loc_1007BF2  +
push eax  +
push 42h  +
call ds:GlobalAlloc  +
mov [ebp+hMem] eax +
cmp eax esi +
jnz loc_1007AF3  +
cmp [ebp+var_68] esi +
jz loc_1007ADD  +
push [ebp+var_68]  +
push dword_102CE4C  +
call ds:SelectObject  +
cmp [ebp+var_6C] esi +
jz loc_1007AEB  +
push [ebp+var_6C]  +
call ds:DeleteObject  +
or eax 0FFFFFFFFh +
jmp loc_1007C16  +
push eax  +
call ds:GlobalLock  +
mov esi eax +
test esi esi +
jz loc_1007C14  +
push [ebp+var_70]  +
push esi  +
push 0  +
push ebx  +
push dword_102CE4C  +
call edi  +
cmp [ebp+var_68] 0 +
jz loc_1007B28  +
push [ebp+var_68]  +
push dword_102CE4C  +
call ds:SelectObject  +
cmp [ebp+var_6C] 0 +
jz loc_1007B37  +
push [ebp+var_6C]  +
call ds:DeleteObject  +
lea edi [esi+2] +
push edi  +
call sub_1020B75  +
movzx ebx word ptr [edi] +
add esi 6 +
jmp loc_1007BC2  +
push esi  +
dec ebx  +
call sub_1020B75  +
lea eax [esi+2] +
push eax  +
call sub_1020B75  +
lea edi [esi+4] +
push edi  +
call sub_1020B75  +
cmp dword_102DCC4 0 +
jnz loc_1007BDB  +
mov eax dword_102DCE8 +
mov ecx 411h +
cmp eax ecx +
jnz loc_1007B83  +
cmp word ptr [esi] 3 +
jnz loc_1007BBF  +
cmp [edi] cx +
jz loc_1007BDB  +
mov ecx 404h +
cmp eax ecx +
jnz loc_1007B97  +
cmp word ptr [esi] 3 +
jnz loc_1007BBF  +
cmp [edi] cx +
jz loc_1007BDB  +
mov ecx 804h +
cmp eax ecx +
jnz loc_1007BAB  +
cmp word ptr [esi] 3 +
jnz loc_1007BBF  +
cmp [edi] cx +
jz loc_1007BDB  +
mov ecx 412h +
cmp eax ecx +
jnz loc_1007BBF  +
cmp word ptr [esi] 3 +
jnz loc_1007BBF  +
cmp [edi] cx +
jz loc_1007BDB  +
add esi 0Ch +
test bx bx +
jg loc_1007B48  +
push [ebp+hMem]  +
call ds:GlobalUnlock  +
push [ebp+hMem]  +
call ds:GlobalFree  +
jmp loc_1007C14  +
push [ebp+hMem]  +
call ds:GlobalUnlock  +
push [ebp+hMem]  +
call ds:GlobalFree  +
xor eax eax +
inc eax  +
jmp loc_1007C16  +
cmp [ebp+var_68] esi +
jz loc_1007C06  +
push [ebp+var_68]  +
push dword_102CE4C  +
call ds:SelectObject  +
cmp [ebp+var_6C] esi +
jz loc_1007C14  +
push [ebp+var_6C]  +
call ds:DeleteObject  +
xor eax eax +
pop ebx  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1026CC5  +
leave   +
retn 5Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+lpFileName] +
push 0  +
push 80h  +
push 3  +
push 0  +
push 3  +
push 80000000h  +
push eax  +
call ds:CreateFileW  +
mov [ebp+hObject] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1007C72  +
xor eax eax +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1026CC5  +
leave   +
retn 4  +
push esi  +
push offset aName  +
lea ecx [ebp+var_18] +
push ecx  +
lea ecx [ebp+var_10] +
push ecx  +
push eax  +
call sub_10212A1  +
test eax eax +
jz loc_1007C9A  +
xor esi esi +
push [ebp+hObject]  +
call ds:CloseHandle  +
mov eax esi +
pop esi  +
jmp loc_1007C64  +
mov eax [ebp+var_10] +
push edi  +
lea esi [eax+4] +
push esi  +
mov edi eax +
call sub_1020B75  +
add edi 1Ch +
push edi  +
call sub_1020B75  +
movsx eax word ptr [esi] +
movsx ecx word ptr [edi] +
add eax [ebp+var_10] +
push 4  +
pop esi  +
lea eax [ecx+eax+1] +
lea ecx [ebp+String1] +
pop edi  +
mov dl [eax] +
inc eax  +
inc eax  +
mov [ecx] dl +
inc ecx  +
dec esi  +
jnz loc_1007CC6  +
push offset aEudc  +
lea eax [ebp+String1] +
push eax  +
mov [ebp+var_8] 0 +
call ds:lstrcmpA  +
push [ebp+var_10]  +
test eax eax +
jnz loc_1007CF4  +
call ds:free  +
pop ecx  +
inc esi  +
jmp loc_1007C8C  +
call ds:free  +
pop ecx  +
jmp loc_1007C8A  +
***
retn   +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
lea ecx [esi+60h] +
call sub_1015F75  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1CDialog@@UAE@XZ  +
call __EH_epilog3  +
retn   +
***
retn   +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop ebp  +
retn 4  +
***
call __EH_prolog3_catch  +
mov esi ecx +
mov [ebp-14h] esi +
mov dword ptr [esi] offset off_1001A74 +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-20h] +
call ??0AFX_EXCEPTION_LINK@@QAE@XZ  +
mov ecx esi +
mov byte ptr [ebp-4] 2 +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
mov dword ptr [ebp-4] 1 +
jmp loc_1007DCB  +
mov ecx [ebp-18h] +
mov [ebp-1Ch] ecx +
test ecx ecx +
jz loc_1007DBB  +
call ?Delete@CException@@QAEXXZ  +
mov dword ptr [ebp-4] 1 +
mov eax offset loc_1007DC8 +
retn   +
mov esi [ebp-14h] +
mov byte ptr [ebp-4] 0 +
call ?AfxTryCleanup@@YGXXZ  +
mov dword ptr [esi] offset off_1001A5C +
call __EH_epilog3  +
retn   +
***
jmp sub_1007D75  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call ds:CreateSolidBrush  +
push eax  +
mov ecx esi +
call ?Attach@CGdiObject@@QAEHPAX@Z  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_1007E27  +
mov eax [eax+4] +
push eax  +
push [ebp+lprc]  +
push dword ptr [ecx+4]  +
call ds:FillRect  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+hIcon]  +
push [ebp+Y]  +
push [ebp+X]  +
push dword ptr [ecx+4]  +
call ds:DrawIcon  +
pop ebp  +
retn 0Ch  +
***
push 31h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
push eax  +
call ?FromHandle@CGdiObject@@SGPAV1@PAX@Z  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpRect]  +
push dword ptr [ecx+20h]  +
call ds:GetClientRect  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push 1  +
push dword ptr [eax+20h]  +
push 28h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call ??0CWnd@@QAE@XZ  +
mov dword ptr [esi] offset off_1001AA4 +
mov eax esi +
pop esi  +
retn   +
***
call ds:EnableWindow  +
retn   +
***
call ds:EnableWindow  +
retn   +
***
push 188h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+wParam]  +
push 186h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+wParam]  +
push 199h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push [ebp+wParam]  +
push 19Ah  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push 0  +
push 180h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+wParam]  +
push 182h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push [ebp+wParam]  +
push 181h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_0] +
push eax  +
push 0Eh  +
push eax  +
call ?AfxFindResourceHandle@@YGPAUHINSTANCE__@@PBG0@Z  +
push eax  +
call ds:LoadIconW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_1008025  +
cmp [ebp+arg_4] eax +
jz loc_1008021  +
movzx edx word ptr [ebx] +
test dx dx +
jz loc_1008021  +
mov [ecx] dx +
inc ecx  +
inc ecx  +
inc ebx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_1008004  +
test esi esi +
jnz loc_100802D  +
dec ecx  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
xor edx edx +
mov [ecx] dx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100803B  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1007EB3  +
mov dword ptr [esi] offset off_1001B84 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ??1CListBox@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_100807A  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
test ebx ebx +
jnz loc_1008099  +
xor eax eax +
jmp loc_10080DE  +
cmp [ebp+arg_8] 4 +
jnz loc_10080BC  +
sub esp 5Ch +
push 17h  +
pop ecx  +
mov edi esp +
mov esi ebx +
movs   +
call sub_1007A3A  +
cmp eax 1 +
jz loc_10080C9  +
cmp eax 0FFFFFFFFh +
jnz loc_10080DB  +
jmp loc_1008095  +
cmp [ebp+arg_8] 8 +
jnz loc_10080DB  +
cmp word ptr [ebx+1Ch] 40h +
jz loc_10080DB  +
movzx eax byte ptr [ebx+17h] +
cmp dword_102DCEC eax +
jnz loc_10080DB  +
inc dword_102CE3C  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
push 0  +
push 92h  +
push 111h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
retn   +
***
cmp dword_102CDF4 0 +
push edi  +
mov edi ecx +
jz loc_1008168  +
and dword_102CDF4 0 +
push esi  +
push 1  +
lea ecx [edi+64h] +
call ?EnableWindow@CWnd@@QAEHH@Z  +
push 0  +
push 1  +
lea esi [edi+84h] +
push dword ptr [esi]  +
call ds:EnableScrollBar  +
push dword ptr [esi]  +
call ds:UpdateWindow  +
push 92h  +
mov ecx edi +
call ?GetDlgItem@CWnd@@QBEPAV1@H@Z  +
push 1  +
mov ecx eax +
call ?EnableWindow@CWnd@@QAEHH@Z  +
push 0A7h  +
mov ecx edi +
call ?GetDlgItem@CWnd@@QBEPAV1@H@Z  +
push 1  +
mov ecx eax +
call ?EnableWindow@CWnd@@QAEHH@Z  +
pop esi  +
pop edi  +
retn   +
***
cmp dword_102CDF4 1 +
push esi  +
mov esi ecx +
jz loc_10081C9  +
push 0  +
lea ecx [esi+64h] +
mov dword_102CDF4 1 +
call ?EnableWindow@CWnd@@QAEHH@Z  +
push 3  +
push 1  +
push dword ptr [esi+84h]  +
call ds:EnableScrollBar  +
push 92h  +
mov ecx esi +
call ?GetDlgItem@CWnd@@QBEPAV1@H@Z  +
push 0  +
mov ecx eax +
call ?EnableWindow@CWnd@@QAEHH@Z  +
push 0A7h  +
mov ecx esi +
call ?GetDlgItem@CWnd@@QBEPAV1@H@Z  +
push 0  +
mov ecx eax +
call ?EnableWindow@CWnd@@QAEHH@Z  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
test edi edi +
jz loc_1008202  +
lea eax [ebp+Rect] +
push eax  +
push dword ptr [esi+20h]  +
call ds:GetClientRect  +
mov eax [ebp+Rect.bottom] +
sub eax [ebp+Rect.top] +
push 3  +
cdq   +
pop ecx  +
idiv  ecx +
mov [esi+40h] eax +
mov [edi+10h] eax +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1001A5C +
jz loc_1008228  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1007D75  +
test byte ptr [ebp+8] 1 +
jz loc_100824E  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1001A8C +
call sub_1007D75  +
test byte ptr [ebp+8] 1 +
jz loc_100827A  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
test edx edx +
jz loc_100829C  +
cmp edx 7FFFFFFFh +
jbe loc_10082A1  +
mov eax 80070057h +
test eax eax +
jl loc_10082B7  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_1007FF0  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
push ebx  +
xor eax eax +
push edi  +
mov ebx 7FFFFFFFh +
test edx edx +
jz loc_10082D9  +
cmp edx ebx +
jbe loc_10082DE  +
mov eax 80070057h +
mov edi [ebp+arg_0] +
test eax eax +
jl loc_1008315  +
and [ebp+arg_4] 0 +
xor ecx ecx +
push esi  +
mov esi edx +
mov eax edi +
cmp edx ecx +
jz loc_1008302  +
cmp [eax] cx +
jz loc_10082FE  +
inc eax  +
inc eax  +
dec esi  +
jnz loc_10082F4  +
cmp esi ecx +
jnz loc_100830B  +
mov [ebp+arg_4] 80070057h +
jmp loc_100830F  +
mov ecx edx +
sub ecx esi +
mov eax [ebp+arg_4] +
pop esi  +
jmp loc_1008317  +
xor ecx ecx +
test eax eax +
jl loc_100832B  +
mov eax [ebp+arg_8] +
push ebx  +
sub edx ecx +
push 0  +
lea ecx [edi+ecx*2] +
call sub_1007FF0  +
pop edi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
mov edi [ebp+8] +
push edi  +
push 79h  +
call ??0CDialog@@QAE@IPAVCWnd@@@Z  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+64h] +
mov dword ptr [esi] offset off_1001C64 +
call sub_1008047  +
mov [esi+60h] edi +
mov eax esi +
call __EH_epilog3  +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
lea ecx [esi+64h] +
call ??1CListBox@@UAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1CDialog@@UAE@XZ  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1008376  +
test byte ptr [ebp+8] 1 +
jz loc_10083C3  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24Ch +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
test ebx ebx +
jnz loc_10083F5  +
xor eax eax +
jmp loc_100859A  +
cmp [ebp+arg_8] 4 +
jnz loc_10084F8  +
sub esp 5Ch +
push 17h  +
pop ecx  +
mov edi esp +
mov esi ebx +
movs   +
call sub_1007A3A  +
cmp eax 1 +
jnz loc_10084EA  +
movzx eax byte ptr [ebx+17h] +
cmp dword_102DCEC eax +
jnz loc_1008597  +
push 20h  +
lea eax [ebp+var_44] +
push eax  +
add ebx 1Ch +
push ebx  +
call sub_101EE7B  +
mov edi dword_102CE38 +
imul edi edi +
add edi lParam +
lea eax [ebp+var_44] +
push eax  +
push 20h  +
push edi  +
call sub_1008286  +
test eax eax +
jl loc_10083EE  +
mov esi 104h +
push esi  +
lea ebx [edi+40h] +
push ebx  +
push edi  +
call sub_101E94A  +
test eax eax +
jnz loc_100849F  +
push esi  +
push 0EF36h  +
push ebx  +
call sub_10245AD  +
push ebx  +
push esi  +
lea eax [edi+248h] +
push eax  +
call sub_1008286  +
test eax eax +
jl loc_10083EE  +
mov dword ptr [edi+450h] 1 +
jmp loc_100858A  +
push ebx  +
push esi  +
lea eax [ebp+var_24C] +
push eax  +
call sub_1008286  +
test eax eax +
jl loc_10083EE  +
mov ebx ds:wcsrchr +
lea eax [ebp+var_24C] +
push 5Ch  +
push eax  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_10084DD  +
lea eax [ebp+var_24C] +
push 3Ah  +
push eax  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10084E1  +
inc eax  +
inc eax  +
jmp loc_10084E7  +
lea eax [ebp+var_24C] +
push eax  +
jmp loc_100847B  +
cmp eax 0FFFFFFFFh +
jnz loc_1008597  +
jmp loc_10083EE  +
cmp [ebp+arg_8] 8 +
jnz loc_1008597  +
lea eax [ebx+1Ch] +
cmp word ptr [eax] 40h +
jz loc_1008597  +
movzx ecx byte ptr [ebx+17h] +
cmp dword_102DCEC ecx +
jnz loc_1008597  +
push 20h  +
lea ecx [ebp+var_44] +
push ecx  +
push eax  +
call sub_101EE7B  +
mov edi dword_102CE38 +
imul edi edi +
add edi lParam +
lea eax [ebp+var_44] +
push eax  +
push 20h  +
push edi  +
call sub_1008286  +
test eax eax +
jl loc_10083EE  +
mov esi 104h +
push esi  +
lea ebx [edi+40h] +
push ebx  +
push edi  +
call sub_101E94A  +
test eax eax +
jnz loc_10085AB  +
push esi  +
push 0EF36h  +
push ebx  +
call sub_10245AD  +
push ebx  +
push esi  +
lea eax [edi+248h] +
push eax  +
call sub_1008286  +
test eax eax +
jl loc_10083EE  +
and dword ptr [edi+450h] 0 +
and dword ptr [edi+454h] 0 +
inc dword_102CE38  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1026CC5  +
leave   +
retn 10h  +
push ebx  +
push esi  +
lea eax [ebp+var_24C] +
push eax  +
call sub_1008286  +
test eax eax +
jl loc_10083EE  +
mov ebx ds:wcsrchr +
lea eax [ebp+var_24C] +
push 5Ch  +
push eax  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_10085E9  +
lea eax [ebp+var_24C] +
push 3Ah  +
push eax  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10085ED  +
inc eax  +
inc eax  +
jmp loc_10085F3  +
lea eax [ebp+var_24C] +
push eax  +
jmp loc_100856E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 210h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
mov esi ecx +
lea ebx [esi+64h] +
push edi  +
mov ecx ebx +
mov [ebp-210h] esi +
call sub_1007EEE  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jnz loc_1008654  +
test esi esi +
jz loc_1008636  +
mov esi [esi+20h] +
push 1  +
push 0EF34h  +
push 0EF33h  +
push esi  +
call sub_102447F  +
mov ecx ebx +
call ?SetFocus@CWnd@@QAEPAV1@XZ  +
jmp loc_1008708  +
push 104h  +
push 0EF36h  +
lea eax [ebp-20Ch] +
push eax  +
call sub_10245AD  +
push edi  +
mov ecx ebx +
call sub_1007F27  +
mov esi eax +
imul esi esi +
add esi lParam +
lea eax [ebp-20Ch] +
push eax  +
push 104h  +
lea eax [esi+40h] +
push eax  +
call sub_1008286  +
test eax eax +
jl loc_1008708  +
lea eax [ebp-20Ch] +
push eax  +
push 104h  +
lea eax [esi+248h] +
push eax  +
call sub_1008286  +
test eax eax +
jl loc_1008708  +
push esi  +
push edi  +
mov ecx ebx +
mov dword ptr [esi+454h] 1 +
call sub_1007FAC  +
lea esi [edi+1] +
push esi  +
mov ecx ebx +
call sub_1007F27  +
push eax  +
push edi  +
mov ecx ebx +
call sub_1007F48  +
push esi  +
mov ecx ebx +
call sub_1007F8B  +
push edi  +
mov ecx ebx +
call sub_1007F06  +
mov ecx [ebp-210h] +
push 90h  +
call ?GetDlgItem@CWnd@@QBEPAV1@H@Z  +
mov ecx [ebp-210h] +
push eax  +
call sub_1007E92  +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1026CC5  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 414h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
test edi edi +
jz loc_10087AB  +
cmp word ptr [edi] 20h +
mov ecx edi +
jnz loc_1008746  +
inc ecx  +
inc ecx  +
cmp word ptr [ecx] 20h +
jz loc_100873E  +
movzx eax word ptr [ecx] +
cmp ax 2Eh +
jz loc_10087AB  +
test ax ax +
jz loc_10087AB  +
xor edx edx +
cmp edx 103h +
jge loc_1008771  +
inc ecx  +
inc ecx  +
mov [ebp+edx*2+var_20C] ax +
movzx eax word ptr [ecx] +
inc edx  +
test ax ax +
jnz loc_1008756  +
xor eax eax +
mov [ebp+edx*2+var_20C] ax +
lea eax [ebp+var_20C] +
push 2Eh  +
push eax  +
call ds:wcsrchr  +
pop ecx  +
pop ecx  +
mov esi 104h +
test eax eax +
jnz loc_10087BA  +
push offset a_tte  +
push esi  +
lea eax [ebp+var_20C] +
push eax  +
call sub_10082C0  +
test eax eax +
jge loc_10087D3  +
xor eax eax +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1026CC5  +
leave   +
retn   +
push 0FFFFFFFFh  +
push offset a_tte_0  +
push 0FFFFFFFFh  +
push eax  +
push 1  +
push 7Fh  +
call ds:CompareStringW  +
cmp eax 2 +
jnz loc_10087AB  +
lea eax [ebp+var_20C] +
push eax  +
push esi  +
lea eax [ebp+String] +
push eax  +
call sub_1008286  +
test eax eax +
jl loc_10087AB  +
lea eax [ebp+String] +
push eax  +
call ds:lstrlenW  +
cmp eax esi +
jge loc_10087AB  +
lea eax [ebp+var_20C] +
push eax  +
push esi  +
push edi  +
call sub_1008286  +
xor ecx ecx +
test eax eax +
setnl cl  +
mov eax ecx +
jmp loc_10087AD  +
***
call __EH_prolog3_GS  +
mov edi [ebp+8] +
mov [ebp-48Ch] ecx +
test edi edi +
jz loc_100928D  +
push dword ptr [edi+18h]  +
call ?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z  +
test byte ptr [edi+0Ch] 1 +
mov esi eax +
mov ebx offset unk_102CDF8 +
jz loc_1008BA3  +
and dword ptr [ebp-490h] 0 +
mov dword ptr [ebp-494h] offset off_1001A8C +
and dword ptr [ebp-4] 0 +
push 5  +
call ds:GetSysColor  +
push eax  +
lea ecx [ebp-494h] +
call sub_1007DF5  +
lea ecx [ebp-494h] +
push ecx  +
lea eax [edi+1Ch] +
push eax  +
mov ecx esi +
call sub_1007E18  +
lea ecx [ebp-494h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
mov eax [esi] +
push 5  +
mov [ebp-480h] eax +
call ds:GetSysColor  +
push eax  +
mov eax [ebp-480h] +
mov ecx esi +
call dword ptr [eax+34h]  +
mov eax [edi+2Ch] +
imul eax eax +
add eax lParam +
cmp dword_102CDF4 0 +
mov [ebp-488h] eax +
mov eax [esi] +
jnz loc_10088EC  +
push 8  +
mov [ebp-480h] eax +
call ds:GetSysColor  +
push eax  +
mov eax [ebp-480h] +
jmp loc_1008901  +
push 11h  +
mov [ebp-480h] eax +
call ds:GetSysColor  +
push eax  +
mov eax [ebp-480h] +
mov ecx esi +
call dword ptr [eax+38h]  +
mov ecx [ebp-48Ch] +
call sub_1007E5D  +
lea ecx [ebp-47Ch] +
push ecx  +
push 5Ch  +
push dword ptr [eax+4]  +
call ds:GetObjectW  +
mov eax [ebp-47Ch] +
cdq   +
mov ecx eax +
mov eax [ebp-48Ch] +
mov eax [eax+40h] +
xor ecx edx +
sub ecx edx +
cmp ecx eax +
jge loc_100894C  +
sub eax ecx +
cdq   +
sub eax edx +
sar eax 1 +
mov [ebp-484h] eax +
jmp loc_1008959  +
and dword ptr [ebp-484h] 0 +
mov eax [ebp-484h] +
mov ecx [ebp-488h] +
cmp dword ptr [ecx+450h] 0 +
jz loc_1008981  +
mov ecx [edi+20h] +
push hIcon  +
add ecx eax +
mov eax [edi+1Ch] +
inc eax  +
push ecx  +
inc eax  +
push eax  +
mov ecx esi +
call sub_1007E3D  +
mov eax [ebp-488h] +
add eax 248h +
push eax  +
push 104h  +
lea eax [ebp-218h] +
push eax  +
call sub_1008286  +
test eax eax +
jge loc_10089B7  +
mov dword ptr [ebp-494h] offset off_1001A8C +
lea ecx [ebp-494h] +
jmp loc_1009284  +
push 104h  +
push 0EF36h  +
lea eax [ebp-420h] +
push eax  +
call sub_10245AD  +
cmp word ptr [ebp-218h] 0 +
jz loc_1008A42  +
lea eax [ebp-420h] +
push eax  +
lea eax [ebp-218h] +
push eax  +
call ds:lstrcmpW  +
test eax eax +
jz loc_1008A42  +
lea eax [ebp-218h] +
push 2Eh  +
push eax  +
call ds:wcsrchr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1008A09  +
xor ecx ecx +
mov [eax] cx +
lea eax [ebp-218h] +
push eax  +
call ds:lstrlenW  +
cmp eax 14h +
jle loc_1008A42  +
xor eax eax +
push offset a__  +
mov [ebp-1F0h] ax +
push 104h  +
lea eax [ebp-218h] +
push eax  +
call sub_10082C0  +
test eax eax +
jl loc_10089A2  +
mov eax [esi+4] +
mov [ebp-480h] eax +
lea eax [ebp-4A4h] +
push eax  +
lea eax [ebp-218h] +
push eax  +
call ds:lstrlenW  +
push eax  +
lea eax [ebp-218h] +
push eax  +
push dword ptr [ebp-480h]  +
call ds:GetTextExtentPoint32W  +
mov eax [esi] +
mov [ebp-480h] eax +
push 0  +
lea eax [ebp-218h] +
push eax  +
call ds:lstrlenW  +
push eax  +
lea eax [ebp-218h] +
push eax  +
mov eax [edi+20h] +
add eax [ebp-484h] +
push 0  +
push 0  +
push eax  +
mov eax [edi+24h] +
sub eax [ebp-4A4h] +
mov ecx esi +
dec eax  +
dec eax  +
push eax  +
mov eax [ebp-480h] +
call dword ptr [eax+68h]  +
push dword ptr [ebp-488h]  +
push 20h  +
push ebx  +
call sub_1008286  +
test eax eax +
jl loc_10089A2  +
mov eax [edi+24h] +
sub eax [edi+1Ch] +
sub eax [ebp-4A4h] +
sub eax 13h +
mov [ebp-480h] eax +
mov eax [esi+4] +
mov [ebp-488h] eax +
lea eax [ebp-4ACh] +
push eax  +
push ebx  +
call ds:lstrlenW  +
push eax  +
push ebx  +
push dword ptr [ebp-488h]  +
call ds:GetTextExtentPoint32W  +
mov eax [ebp-480h] +
cmp eax [ebp-4ACh] +
jg loc_1008B57  +
mov eax [esi+4] +
lea ecx [ebp-4B4h] +
push ecx  +
push 2  +
push offset asc_1001D54  +
push eax  +
call ds:GetTextExtentPoint32W  +
mov eax [ebp-480h] +
cdq   +
idiv  dword ptr [ebp-4B4h] +
push 2Eh  +
pop ecx  +
add eax eax +
mov word ptr dword_102CDF4[eax*2] cx +
lea eax unk_102CDF8[eax*2] +
mov [eax-2] cx +
xor ecx ecx +
mov [eax] cx +
mov eax [esi] +
push 0  +
push ebx  +
mov [ebp-480h] eax +
call ds:lstrlenW  +
push eax  +
mov eax [edi+20h] +
add eax [ebp-484h] +
push ebx  +
push 0  +
push 0  +
push eax  +
mov eax [edi+1Ch] +
add eax 11h +
push eax  +
mov eax [ebp-480h] +
mov ecx esi +
call dword ptr [eax+68h]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-494h] +
mov dword ptr [ebp-494h] offset off_1001A8C +
call sub_1007D75  +
test byte ptr [edi+10h] 1 +
jz loc_1008F2C  +
test byte ptr [edi+0Ch] 3 +
jz loc_1008F22  +
and dword ptr [ebp-490h] 0 +
mov dword ptr [ebp-494h] offset off_1001A8C +
cmp dword_102CDF4 0 +
mov dword ptr [ebp-4] 1 +
jnz loc_1008BDC  +
push 0Dh  +
jmp loc_1008BDE  +
push 5  +
call ds:GetSysColor  +
push eax  +
lea ecx [ebp-494h] +
call sub_1007DF5  +
lea ecx [ebp-494h] +
push ecx  +
lea eax [edi+1Ch] +
push eax  +
mov ecx esi +
call sub_1007E18  +
lea ecx [ebp-494h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
mov eax [edi+2Ch] +
imul eax eax +
add eax lParam +
cmp dword_102CDF4 0 +
mov [ebp-488h] eax +
mov eax [esi] +
jnz loc_1008C60  +
push 0Dh  +
mov [ebp-480h] eax +
call ds:GetSysColor  +
push eax  +
mov eax [ebp-480h] +
mov ecx esi +
call dword ptr [eax+34h]  +
mov eax [esi] +
push 0Eh  +
mov [ebp-480h] eax +
call ds:GetSysColor  +
push eax  +
mov eax [ebp-480h] +
jmp loc_1008C91  +
push 5  +
mov [ebp-480h] eax +
call ds:GetSysColor  +
push eax  +
mov eax [ebp-480h] +
mov ecx esi +
call dword ptr [eax+34h]  +
mov eax [esi] +
push 11h  +
mov [ebp-480h] eax +
call ds:GetSysColor  +
push eax  +
mov eax [ebp-480h] +
mov ecx esi +
call dword ptr [eax+38h]  +
mov ecx [ebp-48Ch] +
call sub_1007E5D  +
lea ecx [ebp-47Ch] +
push ecx  +
push 5Ch  +
push dword ptr [eax+4]  +
call ds:GetObjectW  +
mov eax [ebp-47Ch] +
cdq   +
mov ecx eax +
mov eax [ebp-48Ch] +
mov eax [eax+40h] +
xor ecx edx +
sub ecx edx +
cmp ecx eax +
jge loc_1008CDC  +
sub eax ecx +
cdq   +
sub eax edx +
sar eax 1 +
mov [ebp-484h] eax +
jmp loc_1008CE9  +
and dword ptr [ebp-484h] 0 +
mov eax [ebp-484h] +
mov ecx [ebp-488h] +
cmp dword ptr [ecx+450h] 0 +
jz loc_1008D11  +
mov ecx [edi+20h] +
push hIcon  +
add ecx eax +
mov eax [edi+1Ch] +
inc eax  +
push ecx  +
inc eax  +
push eax  +
mov ecx esi +
call sub_1007E3D  +
mov eax [ebp-488h] +
add eax 248h +
push eax  +
push 104h  +
lea eax [ebp-218h] +
push eax  +
call sub_1008286  +
test eax eax +
jl loc_10089A2  +
push 104h  +
push 0EF36h  +
lea eax [ebp-420h] +
push eax  +
call sub_10245AD  +
cmp word ptr [ebp-218h] 0 +
jz loc_1008DC1  +
lea eax [ebp-420h] +
push eax  +
lea eax [ebp-218h] +
push eax  +
call ds:lstrcmpW  +
test eax eax +
jz loc_1008DC1  +
lea eax [ebp-218h] +
push 2Eh  +
push eax  +
call ds:wcsrchr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1008D88  +
xor ecx ecx +
mov [eax] cx +
lea eax [ebp-218h] +
push eax  +
call ds:lstrlenW  +
cmp eax 14h +
jle loc_1008DC1  +
xor eax eax +
push offset a__  +
mov [ebp-1F0h] ax +
push 104h  +
lea eax [ebp-218h] +
push eax  +
call sub_10082C0  +
test eax eax +
jl loc_10089A2  +
mov eax [esi+4] +
mov [ebp-480h] eax +
lea eax [ebp-4A4h] +
push eax  +
lea eax [ebp-218h] +
push eax  +
call ds:lstrlenW  +
push eax  +
lea eax [ebp-218h] +
push eax  +
push dword ptr [ebp-480h]  +
call ds:GetTextExtentPoint32W  +
mov eax [esi] +
mov [ebp-480h] eax +
push 0  +
lea eax [ebp-218h] +
push eax  +
call ds:lstrlenW  +
push eax  +
lea eax [ebp-218h] +
push eax  +
mov eax [edi+20h] +
add eax [ebp-484h] +
push 0  +
push 0  +
push eax  +
mov eax [edi+24h] +
sub eax [ebp-4A4h] +
mov ecx esi +
dec eax  +
dec eax  +
push eax  +
mov eax [ebp-480h] +
call dword ptr [eax+68h]  +
push dword ptr [ebp-488h]  +
push 20h  +
push ebx  +
call sub_1008286  +
test eax eax +
jl loc_10089A2  +
mov eax [edi+24h] +
sub eax [edi+1Ch] +
sub eax [ebp-4A4h] +
sub eax 13h +
mov [ebp-480h] eax +
mov eax [esi+4] +
mov [ebp-488h] eax +
lea eax [ebp-4ACh] +
push eax  +
push ebx  +
call ds:lstrlenW  +
push eax  +
push ebx  +
push dword ptr [ebp-488h]  +
call ds:GetTextExtentPoint32W  +
mov eax [ebp-480h] +
cmp eax [ebp-4ACh] +
jg loc_1008ED6  +
mov eax [esi+4] +
lea ecx [ebp-4B4h] +
push ecx  +
push 2  +
push offset asc_1001D54  +
push eax  +
call ds:GetTextExtentPoint32W  +
mov eax [ebp-480h] +
cdq   +
idiv  dword ptr [ebp-4B4h] +
push 2Eh  +
pop ecx  +
add eax eax +
mov word ptr dword_102CDF4[eax*2] cx +
lea eax unk_102CDF8[eax*2] +
mov [eax-2] cx +
xor ecx ecx +
mov [eax] cx +
mov eax [esi] +
push 0  +
push ebx  +
mov [ebp-480h] eax +
call ds:lstrlenW  +
push eax  +
mov eax [edi+20h] +
add eax [ebp-484h] +
push ebx  +
push 0  +
push 0  +
push eax  +
mov eax [edi+1Ch] +
add eax 11h +
push eax  +
mov eax [ebp-480h] +
mov ecx esi +
call dword ptr [eax+68h]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-494h] +
mov dword ptr [ebp-494h] offset off_1001A8C +
call sub_1007D75  +
test byte ptr [edi+10h] 1 +
jnz loc_100928D  +
test byte ptr [edi+0Ch] 2 +
jz loc_100928D  +
and dword ptr [ebp-498h] 0 +
mov dword ptr [ebp-49Ch] offset off_1001A8C +
push 5  +
mov dword ptr [ebp-4] 2 +
call ds:GetSysColor  +
push eax  +
lea ecx [ebp-49Ch] +
call sub_1007DF5  +
lea ecx [ebp-49Ch] +
lea eax [edi+1Ch] +
push ecx  +
push eax  +
mov ecx esi +
mov [ebp-480h] eax +
call sub_1007E18  +
lea ecx [ebp-49Ch] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
mov eax [edi+2Ch] +
imul eax eax +
add eax lParam +
push 5  +
mov [ebp-488h] eax +
mov eax [esi] +
mov [ebp-484h] eax +
call ds:GetSysColor  +
push eax  +
mov eax [ebp-484h] +
mov ecx esi +
call dword ptr [eax+34h]  +
cmp dword_102CDF4 0 +
mov eax [esi] +
jnz loc_1008FD8  +
push 8  +
mov [ebp-484h] eax +
call ds:GetSysColor  +
push eax  +
mov eax [ebp-484h] +
jmp loc_1008FED  +
push 11h  +
mov [ebp-484h] eax +
call ds:GetSysColor  +
push eax  +
mov eax [ebp-484h] +
mov ecx esi +
call dword ptr [eax+38h]  +
mov ecx [ebp-48Ch] +
call sub_1007E5D  +
lea ecx [ebp-47Ch] +
push ecx  +
push 5Ch  +
push dword ptr [eax+4]  +
call ds:GetObjectW  +
mov eax [ebp-47Ch] +
cdq   +
mov ecx eax +
mov eax [ebp-48Ch] +
mov eax [eax+40h] +
xor ecx edx +
sub ecx edx +
cmp ecx eax +
jge loc_1009038  +
sub eax ecx +
cdq   +
sub eax edx +
sar eax 1 +
mov [ebp-484h] eax +
jmp loc_1009045  +
and dword ptr [ebp-484h] 0 +
mov eax [ebp-484h] +
mov ecx [ebp-488h] +
cmp dword ptr [ecx+450h] 0 +
jz loc_1009072  +
mov ecx [edi+20h] +
push hIcon  +
add ecx eax +
mov eax [ebp-480h] +
mov eax [eax] +
inc eax  +
push ecx  +
inc eax  +
push eax  +
mov ecx esi +
call sub_1007E3D  +
mov eax [ebp-488h] +
add eax 248h +
push eax  +
push 104h  +
lea eax [ebp-218h] +
push eax  +
call sub_1008286  +
test eax eax +
jl loc_1009274  +
push 104h  +
push 0EF36h  +
lea eax [ebp-420h] +
push eax  +
call sub_10245AD  +
cmp word ptr [ebp-218h] 0 +
jz loc_1009122  +
lea eax [ebp-420h] +
push eax  +
lea eax [ebp-218h] +
push eax  +
call ds:lstrcmpW  +
test eax eax +
jz loc_1009122  +
lea eax [ebp-218h] +
push 2Eh  +
push eax  +
call ds:wcsrchr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10090E9  +
xor ecx ecx +
mov [eax] cx +
lea eax [ebp-218h] +
push eax  +
call ds:lstrlenW  +
cmp eax 14h +
jle loc_1009122  +
xor eax eax +
push offset a__  +
mov [ebp-1F0h] ax +
push 104h  +
lea eax [ebp-218h] +
push eax  +
call sub_10082C0  +
test eax eax +
jl loc_1009274  +
mov eax [esi+4] +
mov [ebp-48Ch] eax +
lea eax [ebp-4A4h] +
push eax  +
lea eax [ebp-218h] +
push eax  +
call ds:lstrlenW  +
push eax  +
lea eax [ebp-218h] +
push eax  +
push dword ptr [ebp-48Ch]  +
call ds:GetTextExtentPoint32W  +
mov eax [esi] +
mov [ebp-48Ch] eax +
push 0  +
lea eax [ebp-218h] +
push eax  +
call ds:lstrlenW  +
push eax  +
lea eax [ebp-218h] +
push eax  +
mov eax [edi+20h] +
add eax [ebp-484h] +
push 0  +
push 0  +
push eax  +
mov eax [edi+24h] +
sub eax [ebp-4A4h] +
mov ecx esi +
dec eax  +
dec eax  +
push eax  +
mov eax [ebp-48Ch] +
call dword ptr [eax+68h]  +
push dword ptr [ebp-488h]  +
push 20h  +
push ebx  +
call sub_1008286  +
test eax eax +
jl loc_1009274  +
mov eax [edi+24h] +
mov ecx [ebp-480h] +
sub eax [ecx] +
sub eax [ebp-4A4h] +
sub eax 13h +
mov [ebp-48Ch] eax +
mov eax [esi+4] +
mov [ebp-488h] eax +
lea eax [ebp-4ACh] +
push eax  +
push ebx  +
call ds:lstrlenW  +
push eax  +
push ebx  +
push dword ptr [ebp-488h]  +
call ds:GetTextExtentPoint32W  +
mov eax [ebp-48Ch] +
cmp eax [ebp-4ACh] +
jg loc_100923C  +
mov eax [esi+4] +
lea ecx [ebp-4B4h] +
push ecx  +
push 2  +
push offset asc_1001D54  +
push eax  +
call ds:GetTextExtentPoint32W  +
mov eax [ebp-48Ch] +
cdq   +
idiv  dword ptr [ebp-4B4h] +
push 2Eh  +
pop ecx  +
add eax eax +
mov word ptr dword_102CDF4[eax*2] cx +
lea eax unk_102CDF8[eax*2] +
mov [eax-2] cx +
xor ecx ecx +
mov [eax] cx +
mov eax [esi] +
push 0  +
push ebx  +
mov [ebp-48Ch] eax +
call ds:lstrlenW  +
push eax  +
mov eax [edi+20h] +
add eax [ebp-484h] +
push ebx  +
push 0  +
push 0  +
push eax  +
mov eax [ebp-480h] +
mov eax [eax] +
add eax 11h +
push eax  +
mov eax [ebp-48Ch] +
mov ecx esi +
call dword ptr [eax+68h]  +
lea ecx [ebp-49Ch] +
mov dword ptr [ebp-49Ch] offset off_1001A8C +
or dword ptr [ebp-4] 0FFFFFFFFh +
call sub_1007D75  +
call sub_1026DAC  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 84h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jnz loc_10092BB  +
or eax 0FFFFFFFFh +
jmp loc_1009308  +
mov eax [ecx+10h] +
imul eax eax +
add eax lParam +
push esi  +
mov esi [ecx+18h] +
push eax  +
push 20h  +
lea eax [ebp+String1] +
push eax  +
call sub_1008286  +
test eax eax +
jl loc_10092F1  +
push esi  +
push 20h  +
lea eax [ebp+String2] +
push eax  +
call sub_1008286  +
test eax eax +
jge loc_10092F6  +
or eax 0FFFFFFFFh +
jmp loc_1009307  +
lea eax [ebp+String2] +
push eax  +
lea eax [ebp+String1] +
push eax  +
call ds:lstrcmpW  +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1026CC5  +
leave   +
retn 4  +
***
call __EH_prolog3_GS  +
mov ebx [ebp+8] +
mov edi [ebp+0Ch] +
mov [ebp-0AE0h] ecx +
test ebx ebx +
jz loc_1009411  +
test edi edi +
jz loc_1009411  +
lea eax [ebp-420h] +
push eax  +
mov esi 104h +
push esi  +
call ds:GetTempPathW  +
lea eax [ebp-218h] +
push eax  +
push 0  +
push offset PrefixString  +
lea eax [ebp-420h] +
push eax  +
call ds:GetTempFileNameW  +
test eax eax +
jnz loc_10093BE  +
push edi  +
push esi  +
lea eax [ebp-218h] +
push eax  +
call sub_1008286  +
test eax eax +
jl loc_1009411  +
lea eax [ebp-218h] +
push 5Ch  +
push eax  +
call ds:wcsrchr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10093A8  +
xor ecx ecx +
mov [eax] cx +
push offset aEuf_tmp  +
push esi  +
lea eax [ebp-218h] +
push eax  +
call sub_1008286  +
test eax eax +
jl loc_1009411  +
push 1  +
lea eax [ebp-218h] +
push eax  +
push edi  +
call ds:MoveFileExW  +
test eax eax +
jz loc_1009411  +
push 1  +
push ebx  +
push edi  +
lea eax [ebp-218h] +
push eax  +
push dword ptr [ebp-0AE0h]  +
lea ecx [ebp-0ADCh] +
call sub_10161B4  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-0ADCh] +
call ?DoModal@CDialog@@UAEHXZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-0ADCh] +
call sub_1007D17  +
xor eax eax +
inc eax  +
jmp loc_1009413  +
xor eax eax +
call sub_1026DAC  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
xor edi edi +
mov ebx ecx +
mov [ebp+var_4] ebx +
mov [ebp+var_14] edi +
mov [ebp+var_10] edi +
mov [ebp+var_C] edi +
mov [ebp+wParam] edi +
mov dword_102CE38 edi +
mov dword_102CE3C edi +
cmp ebx edi +
jnz loc_1009452  +
xor eax eax +
jmp loc_1009455  +
mov eax [ebx+20h] +
push eax  +
mov dword_102CE48 eax +
call ds:GetDC  +
mov esi ds:EnumFontFamiliesW +
lea ecx [ebp+var_14] +
push ecx  +
push offset sub_1008086  +
push edi  +
push eax  +
mov dword_102CE4C eax +
call esi  +
mov eax hMem +
cmp eax edi +
jz loc_1009495  +
push eax  +
call ds:GlobalUnlock  +
push hMem  +
call ds:GlobalFree  +
mov eax dword_102CE3C +
imul eax eax +
push eax  +
push 42h  +
call ds:GlobalAlloc  +
mov hMem eax +
cmp eax edi +
jnz loc_10094CB  +
push dword_102CE4C  +
push dword_102CE48  +
call ds:ReleaseDC  +
xor eax eax +
jmp loc_100955E  +
push eax  +
call ds:GlobalLock  +
mov lParam eax +
lea eax [ebp+var_14] +
push eax  +
push offset sub_10083CF  +
push edi  +
push dword_102CE4C  +
call esi  +
push dword_102CE4C  +
push dword_102CE48  +
call ds:ReleaseDC  +
cmp dword_102CE3C edi +
mov esi lParam +
jle loc_1009550  +
push esi  +
lea ecx [ebx+64h] +
call sub_1007F6A  +
mov ecx [ebp+var_4] +
mov ebx eax +
push edi  +
push ebx  +
add ecx 64h +
call sub_1007F48  +
cmp ebx 0FFFFFFFFh +
jz loc_1009563  +
cmp ebx 0FFFFFFFEh +
jz loc_1009563  +
push offset word_102CE50  +
push esi  +
call ds:lstrcmpW  +
test eax eax +
jnz loc_100953E  +
mov [ebp+wParam] edi +
mov ebx [ebp+var_4] +
add esi 458h +
inc edi  +
cmp edi dword_102CE3C +
jl loc_1009509  +
push [ebp+wParam]  +
lea ecx [ebx+64h] +
call sub_1007F06  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
push hMem  +
call ds:GlobalUnlock  +
push hMem  +
call ds:GlobalFree  +
jmp loc_10094C4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 660h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push 20h  +
push 0EF42h  +
lea eax [ebp+var_44] +
push eax  +
mov [ebp+var_660] ecx +
call sub_10245AD  +
mov esi 104h +
push esi  +
push 0EF5Dh  +
lea eax [ebp+var_65C] +
push eax  +
call sub_10245AD  +
push esi  +
lea eax [ebp+FileName] +
push eax  +
lea eax [ebp+var_44] +
push eax  +
call sub_101E94A  +
test eax eax +
jnz loc_1009620  +
push esi  +
lea eax [ebp+FileName] +
push eax  +
call ds:GetSystemWindowsDirectoryW  +
push offset aFonts  +
push esi  +
lea eax [ebp+FileName] +
push eax  +
call sub_10082C0  +
test eax eax +
jge loc_1009608  +
xor eax eax +
jmp loc_1009718  +
lea eax [ebp+var_65C] +
push eax  +
push esi  +
lea eax [ebp+FileName] +
push eax  +
call sub_10082C0  +
test eax eax +
jl loc_1009601  +
lea eax [ebp+FileName] +
push eax  +
push esi  +
lea eax [ebp+var_454] +
push eax  +
call sub_1008286  +
test eax eax +
jl loc_1009601  +
lea eax [ebp+var_454] +
push 2Eh  +
push eax  +
call ds:wcsrchr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1009652  +
xor ecx ecx +
mov [eax] cx +
push offset a_euf  +
push esi  +
lea eax [ebp+var_454] +
push eax  +
call sub_10082C0  +
test eax eax +
jl loc_1009601  +
push ebx  +
push edi  +
mov edi ds:GetTickCount +
call edi  +
mov ebx eax +
call edi  +
sub eax ebx +
cmp eax 3E8h +
jb loc_1009674  +
push 0  +
call EnableEUDC  +
lea eax [ebp+FileName] +
push eax  +
call sub_100B14B  +
xor edi edi +
inc edi  +
test eax eax +
jz loc_10096C8  +
lea eax [ebp+var_454] +
push eax  +
call sub_102533D  +
cmp eax edi +
jnz loc_10096C8  +
mov ecx [ebp+var_660] +
push 0FFFFFFFFh  +
lea eax [ebp+var_454] +
push eax  +
lea eax [ebp+FileName] +
push eax  +
call sub_100931B  +
test eax eax +
jz loc_100970E  +
lea eax [ebp+var_44] +
push eax  +
push 20h  +
push offset word_102CE50  +
mov dword_102D2AC edi +
call sub_1008286  +
test eax eax +
jl loc_100970E  +
lea eax [ebp+FileName] +
push eax  +
push esi  +
push offset unk_102CE90  +
call sub_1008286  +
test eax eax +
jl loc_100970E  +
lea eax [ebp+var_65C] +
push eax  +
push esi  +
push offset unk_102D098  +
call sub_1008286  +
test eax eax +
jge loc_1009725  +
push edi  +
call EnableEUDC  +
xor eax eax +
pop edi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1026CC5  +
leave   +
retn   +
lea eax [ebp+FileName] +
push eax  +
lea eax [ebp+var_44] +
push eax  +
call sub_101EAD5  +
test eax eax +
jnz loc_1009745  +
xor esi esi +
push edi  +
call EnableEUDC  +
mov eax esi +
jmp loc_1009716  +
mov esi edi +
jmp loc_100973B  +
***
push 0A98h  +
mov eax offset byte_10274C1 +
call __EH_prolog3_GS  +
mov ebx ecx +
lea ecx [ebp-0A40h] +
mov [ebp-0A44h] ebx +
call ??0CString@@QAE@XZ  +
xor edi edi +
lea ecx [ebp-0A3Ch] +
mov [ebp-4] edi +
call ??0CString@@QAE@XZ  +
lea esi [ebx+64h] +
mov ecx esi +
mov byte ptr [ebp-4] 1 +
call sub_1007EEE  +
mov [ebp-0A4Ch] eax +
cmp eax 0FFFFFFFFh +
jnz loc_10097BE  +
cmp ebx edi +
jz loc_10097A0  +
mov edi [ebx+20h] +
push 1  +
push 0EF34h  +
push 0EF33h  +
push edi  +
call sub_102447F  +
mov ecx esi +
call ?SetFocus@CWnd@@QAEPAV1@XZ  +
jmp loc_1009AC8  +
push eax  +
mov ecx esi +
call sub_1007F27  +
mov esi eax +
imul esi esi +
add esi lParam +
mov ebx 104h +
push ebx  +
push 0EF6Dh  +
lea eax [ebp-218h] +
push eax  +
call sub_10245AD  +
lea eax [ebp-218h] +
push eax  +
call ds:lstrlenW  +
movzx ecx word ptr [ebp+eax*2-21Ah] +
mov [ebp-0A48h] edi +
cmp [ebp-218h] di +
jz loc_1009837  +
lea eax [ebp-218h] +
cmp [eax] cx +
jnz loc_100981F  +
xor edx edx +
mov [eax] dx +
inc dword ptr [ebp-0A48h]  +
mov eax [ebp-0A48h] +
lea eax [ebp+eax*2-218h] +
cmp [eax] di +
jnz loc_1009815  +
mov eax [ebp-0A44h] +
cmp eax edi +
jnz loc_1009845  +
xor eax eax +
jmp loc_1009848  +
mov eax [eax+20h] +
push 1  +
push 1Ch  +
lea ecx [ebp-420h] +
push ecx  +
push eax  +
call ds:SHGetSpecialFolderPathW  +
test eax eax +
jz loc_1009AC8  +
push offset aMicrosoftWindo  +
push ebx  +
lea eax [ebp-420h] +
push eax  +
call sub_10082C0  +
cmp eax edi +
jl loc_1009AC8  +
push edi  +
lea eax [ebp-420h] +
push eax  +
push edi  +
call ds:SHCreateDirectoryExW  +
push offset a_tte_1  +
push ebx  +
lea eax [ebp-830h] +
push eax  +
call sub_1008286  +
cmp eax edi +
lea ecx [ebp-0A3Ch] +
jl loc_1009ACE  +
push 0EF2Eh  +
call ?LoadStringW@CString@@QAEHI@Z  +
mov dword ptr [ebp-0AA4h] 58h +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+8] +
mov [ebp-0A9Ch] eax +
mov eax [ebp-0A44h] +
cmp eax edi +
jnz loc_10098DF  +
mov [ebp-0AA0h] edi +
jmp loc_10098E8  +
mov eax [eax+20h] +
mov [ebp-0AA0h] eax +
lea eax [ebp-218h] +
mov [ebp-0A98h] eax +
lea eax [ebp-830h] +
mov [ebp-0A88h] eax +
lea eax [ebp-0A38h] +
mov [ebp-0A80h] eax +
lea eax [ebp-420h] +
mov [ebp-0A78h] eax +
mov eax [ebp-0A3Ch] +
mov [ebp-0A74h] eax +
lea eax [ebp-0AA4h] +
push eax  +
mov [ebp-0A94h] edi +
mov [ebp-0A90h] edi +
mov [ebp-0A8Ch] edi +
mov [ebp-0A7Ch] ebx +
mov [ebp-0A84h] ebx +
mov dword ptr [ebp-0A70h] 80Ch +
mov dword ptr [ebp-0A68h] offset aTte_0 +
call ds:GetSaveFileNameW  +
test eax eax +
jz loc_1009AC8  +
lea eax [ebp-420h] +
push eax  +
push ebx  +
lea eax [ebp-628h] +
push eax  +
call sub_1008286  +
cmp eax edi +
jl loc_1009AC8  +
push offset aEudc_tte  +
push ebx  +
lea eax [ebp-628h] +
push eax  +
call sub_10082C0  +
cmp eax edi +
jl loc_1009AC8  +
lea eax [ebp-628h] +
push eax  +
push dword ptr [ebp-0A88h]  +
call ds:lstrcmpiW  +
test eax eax +
jnz loc_10099DC  +
mov eax [ebp-0A44h] +
cmp eax edi +
jz loc_10099C5  +
mov edi [eax+20h] +
push 1  +
push 0EF30h  +
push 0EF2Eh  +
push edi  +
call sub_102447F  +
jmp loc_1009AC8  +
mov edi [ebp-0A88h] +
call sub_100871C  +
test eax eax +
jnz loc_1009A07  +
mov eax [ebp-0A44h] +
test eax eax +
jz loc_10099F8  +
mov eax [eax+20h] +
push 1  +
push 0EF2Dh  +
push 0EF2Eh  +
push eax  +
jmp loc_10099D2  +
***
push dword ptr [ebp-0A88h]  +
call sub_100B14B  +
test eax eax +
jz loc_1009A3B  +
push dword ptr [ebp-0A88h]  +
call sub_1007C2C  +
test eax eax +
jnz loc_1009A3B  +
mov eax [ebp-0A44h] +
test eax eax +
jz loc_1009A32  +
mov eax [eax+20h] +
push 1  +
push 0EF2Fh  +
jmp loc_10099FF  +
***
push dword ptr [ebp-0A88h]  +
lea eax [esi+40h] +
push ebx  +
push eax  +
call sub_1008286  +
test eax eax +
jl loc_1009AC8  +
push dword ptr [ebp-0A80h]  +
lea eax [esi+248h] +
push ebx  +
push eax  +
call sub_1008286  +
test eax eax +
jl loc_1009AC8  +
mov ebx [ebp-0A4Ch] +
push esi  +
mov dword ptr [esi+454h] 1 +
mov esi [ebp-0A44h] +
add esi 64h +
push ebx  +
mov ecx esi +
call sub_1007FAC  +
lea edi [ebx+1] +
push edi  +
mov ecx esi +
call sub_1007F27  +
push eax  +
push ebx  +
mov ecx esi +
call sub_1007F48  +
push edi  +
mov ecx esi +
call sub_1007F8B  +
push ebx  +
mov ecx esi +
call sub_1007F06  +
mov ecx [ebp-0A44h] +
push 90h  +
call ?GetDlgItem@CWnd@@QBEPAV1@H@Z  +
mov ecx [ebp-0A44h] +
push eax  +
call sub_1007E92  +
lea ecx [ebp-0A3Ch] +
mov byte ptr [ebp-4] 0 +
call ??1CString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-0A40h] +
call ??1CString@@QAE@XZ  +
call sub_1026DAC  +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
lea ecx [ebp-10h] +
call ??0CString@@QAE@XZ  +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call ?OnInitDialog@CDialog@@UAEHXZ  +
push 0EF33h  +
lea ecx [ebp-10h] +
call ?LoadStringW@CString@@QAEHI@Z  +
push dword ptr [ebp-10h]  +
mov ecx esi +
call ?SetWindowTextW@CWnd@@QAEXPBG@Z  +
push esi  +
push 90h  +
lea ecx [esi+64h] +
call ?SubclassDlgItem@CWnd@@QAEHIPAV1@@Z  +
push 3  +
xor edi edi +
inc edi  +
push edi  +
push dword ptr [esi+84h]  +
call ds:EnableScrollBar  +
push 0  +
push edi  +
push 0F1h  +
push 0DEh  +
mov ecx esi +
mov dword_102CDF4 edi +
call ?SendDlgItemMessageW@CWnd@@QAEJHIIJ@Z  +
and hMem 0 +
mov ecx esi +
call sub_1009420  +
test eax eax +
jnz loc_1009BA3  +
push 1010h  +
push dword_102DF68  +
mov ecx esi +
push dword_102DF6C  +
call ?MessageBoxW@CWnd@@QAEHPBG0I@Z  +
xor edi edi +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call ??1CString@@QAE@XZ  +
mov eax edi +
call __EH_epilog3  +
retn   +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
push 89h  +
mov ecx eax +
call sub_1007FCE  +
mov hIcon eax +
jmp loc_1009B8F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 630h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+64h] +
mov ecx esi +
mov [ebp+var_624] edi +
mov [ebp+var_630] esi +
call sub_1007EEE  +
mov [ebp+wParam] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1009C22  +
test edi edi +
jz loc_1009C04  +
mov edi [edi+20h] +
push 1  +
push 0EF34h  +
push 0EF33h  +
push edi  +
call sub_102447F  +
mov ecx esi +
call ?SetFocus@CWnd@@QAEPAV1@XZ  +
jmp loc_1009EA0  +
mov edi ds:GetTickCount +
push ebx  +
call edi  +
mov ebx eax +
call edi  +
sub eax ebx +
cmp eax 3E8h +
jb loc_1009C2D  +
push 0  +
call EnableEUDC  +
mov edi lParam +
mov ebx 104h +
push ebx  +
push 0EF36h  +
lea eax [ebp+String2] +
push eax  +
call sub_10245AD  +
push [ebp+wParam]  +
mov ecx esi +
call sub_1007F27  +
and [ebp+var_62C] 0 +
cmp dword_102CE3C 0 +
mov [ebp+wParam] eax +
jle loc_1009E5B  +
lea eax [edi+40h] +
mov [ebp+lpString1] eax +
mov esi 458h +
mov eax [ebp+wParam] +
cmp [ebp+var_62C] eax +
jnz loc_1009D4A  +
lea eax [ebp+String2] +
push eax  +
push [ebp+lpString1]  +
call ds:lstrcmpW  +
test eax eax +
jnz loc_1009CF7  +
cmp dword_102CDF4 eax +
jnz loc_1009CF7  +
push eax  +
mov eax [ebp+var_624] +
push 92h  +
push 111h  +
push dword ptr [eax+20h]  +
call ds:SendMessageW  +
lea eax [ebp+String2] +
push eax  +
push [ebp+lpString1]  +
call ds:lstrcmpW  +
test eax eax +
jz loc_1009EAE  +
push edi  +
push 20h  +
push offset word_102CE50  +
call sub_1008286  +
test eax eax +
jl loc_1009EB9  +
push [ebp+lpString1]  +
push ebx  +
push offset unk_102CE90  +
call sub_1008286  +
test eax eax +
jl loc_1009EB9  +
lea eax [edi+248h] +
push eax  +
push ebx  +
push offset unk_102D098  +
call sub_1008286  +
test eax eax +
jl loc_1009EB9  +
mov eax [edi+450h] +
mov dword_102D2AC eax +
lea eax [ebp+String2] +
push eax  +
push [ebp+lpString1]  +
call ds:lstrcmpW  +
test eax eax +
jnz loc_1009D78  +
cmp [edi+454h] eax +
jz loc_1009E3B  +
push edi  +
call sub_101EC2D  +
jmp loc_1009E3B  +
push [ebp+lpString1]  +
lea eax [ebp+FileName] +
push ebx  +
push eax  +
call sub_1008286  +
test eax eax +
jl loc_1009EB9  +
lea eax [ebp+FileName] +
push eax  +
push ebx  +
lea eax [ebp+var_20C] +
push eax  +
call sub_1008286  +
test eax eax +
jl loc_1009EB9  +
lea eax [ebp+var_20C] +
push 2Eh  +
push eax  +
call ds:wcsrchr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1009DC9  +
xor ecx ecx +
mov [eax] cx +
push offset a_euf  +
push ebx  +
lea eax [ebp+var_20C] +
push eax  +
call sub_10082C0  +
test eax eax +
jl loc_1009EB9  +
lea eax [ebp+FileName] +
push eax  +
call sub_100B14B  +
test eax eax +
jz loc_1009E22  +
lea eax [ebp+var_20C] +
push eax  +
call sub_102533D  +
test eax eax +
jz loc_1009E22  +
push [ebp+wParam]  +
mov ecx [ebp+var_624] +
lea eax [ebp+var_20C] +
push eax  +
lea eax [ebp+FileName] +
push eax  +
call sub_100931B  +
cmp dword ptr [edi+454h] 0 +
jz loc_1009E3B  +
push [ebp+lpString1]  +
push edi  +
call sub_101EAD5  +
test eax eax +
jz loc_1009EB9  +
add [ebp+lpString1] esi +
add edi esi +
inc [ebp+var_62C]  +
mov eax [ebp+var_62C] +
cmp eax dword_102CE3C +
jl loc_1009C91  +
push 1  +
call EnableEUDC  +
cmp dword_102CDF4 0 +
jz loc_1009E7A  +
mov ecx [ebp+var_624] +
call sub_1009585  +
test eax eax +
jz loc_1009E9F  +
push hMem  +
call ds:GlobalUnlock  +
push hMem  +
call ds:GlobalFree  +
mov ecx [ebp+var_624] +
push 1  +
call ?EndDialog@CDialog@@QAEXH@Z  +
pop ebx  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1026CC5  +
leave   +
retn   +
mov ecx [ebp+var_630] +
call ?SetFocus@CWnd@@QAEPAV1@XZ  +
push 1  +
call EnableEUDC  +
jmp loc_1009E9F  +
***
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+8]  +
mov esi ecx +
push 91h  +
call ??0CDialog@@QAE@IPAVCWnd@@@Z  +
mov dword ptr [esi] offset off_1001E34 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ??1CDialog@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_1009F13  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
lea ecx [ebp-10h] +
call ??0CString@@QAE@XZ  +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call ?OnInitDialog@CDialog@@UAEHXZ  +
push 0EF54h  +
lea ecx [ebp-10h] +
call ?LoadStringW@CString@@QAEHI@Z  +
push dword ptr [ebp-10h]  +
mov ecx esi +
call ?SetWindowTextW@CWnd@@QAEXPBG@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call ??1CString@@QAE@XZ  +
xor eax eax +
inc eax  +
call __EH_epilog3  +
retn   +
***
push 700h  +
mov eax offset byte_102750F +
call __EH_prolog3_GS  +
mov edi ecx +
lea ecx [ebp-6ACh] +
call ??0CString@@QAE@XZ  +
xor ebx ebx +
lea ecx [ebp-6B4h] +
mov [ebp-4] ebx +
call ??0CString@@QAE@XZ  +
lea ecx [ebp-6B0h] +
mov byte ptr [ebp-4] 1 +
call ??0CString@@QAE@XZ  +
push 40h  +
push 0EF47h  +
lea eax [ebp-90h] +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_10245AD  +
lea eax [ebp-90h] +
push eax  +
call ds:lstrlenW  +
movzx ecx word ptr [ebp+eax*2-92h] +
xor edx edx +
cmp [ebp-90h] bx +
jz loc_100A000  +
lea eax [ebp-90h] +
cmp [eax] cx +
jnz loc_1009FF3  +
xor esi esi +
mov [eax] si +
inc edx  +
lea eax [ebp+edx*2-90h] +
cmp [eax] bx +
jnz loc_1009FE9  +
mov esi 104h +
push esi  +
lea eax [ebp-298h] +
push eax  +
call ds:GetSystemWindowsDirectoryW  +
push offset a_tbl  +
push esi  +
lea eax [ebp-4A0h] +
push eax  +
call sub_1008286  +
cmp eax ebx +
jl loc_100A0FA  +
push 0EF5Ch  +
lea ecx [ebp-6ACh] +
call ?LoadStringW@CString@@QAEHI@Z  +
mov dword ptr [ebp-70Ch] 58h +
cmp edi ebx +
jnz loc_100A053  +
mov [ebp-708h] ebx +
jmp loc_100A05C  +
mov eax [edi+20h] +
mov [ebp-708h] eax +
lea eax [ebp-90h] +
mov [ebp-700h] eax +
lea eax [ebp-6A8h] +
mov [ebp-6E8h] eax +
lea eax [ebp-4A0h] +
mov [ebp-6F0h] eax +
lea eax [ebp-298h] +
mov [ebp-6E0h] eax +
mov eax [ebp-6ACh] +
mov [ebp-6DCh] eax +
lea eax [ebp-70Ch] +
push eax  +
mov [ebp-6FCh] ebx +
mov [ebp-6F8h] ebx +
mov [ebp-6F4h] ebx +
mov [ebp-6E4h] esi +
mov [ebp-6ECh] esi +
mov dword ptr [ebp-6D8h] 280Ch +
mov [ebp-6D0h] ebx +
call ds:GetOpenFileNameW  +
test eax eax +
jz loc_100A0FA  +
push dword ptr [ebp-6F0h]  +
mov ecx edi +
push 0D1h  +
call ?SetDlgItemTextW@CWnd@@QAEXHPBG@Z  +
push 1  +
mov ecx edi +
call ?GetDlgItem@CWnd@@QBEPAV1@H@Z  +
push eax  +
mov ecx edi +
call sub_1007E92  +
lea ecx [ebp-6B0h] +
mov byte ptr [ebp-4] 1 +
call ??1CString@@QAE@XZ  +
lea ecx [ebp-6B4h] +
mov [ebp-4] bl +
call ??1CString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-6ACh] +
call ??1CString@@QAE@XZ  +
call sub_1026DAC  +
retn   +
***
call __EH_prolog3_GS  +
mov edi ecx +
lea ecx [ebp-424h] +
call ??0CString@@QAE@XZ  +
xor ebx ebx +
lea ecx [ebp-428h] +
mov [ebp-4] ebx +
call ??0CString@@QAE@XZ  +
mov esi 104h +
push esi  +
lea eax [ebp-218h] +
push eax  +
push 0D1h  +
mov ecx edi +
mov byte ptr [ebp-4] 1 +
call ?GetDlgItemTextW@CWnd@@QBEHHPAGH@Z  +
push offset a_tbl  +
push esi  +
lea eax [ebp-420h] +
push eax  +
call sub_1008286  +
cmp eax ebx +
jge loc_100A1B5  +
lea ecx [ebp-428h] +
mov [ebp-4] bl +
call ??1CString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-424h] +
call ??1CString@@QAE@XZ  +
xor eax eax +
call sub_1026DAC  +
retn   +
push ebx  +
push 80h  +
push 3  +
push ebx  +
push ebx  +
push 80000000h  +
lea eax [ebp-218h] +
push eax  +
call ds:CreateFileW  +
mov [ebp-42Ch] eax +
cmp eax 0FFFFFFFFh +
jnz loc_100A239  +
push 0EF63h  +
lea ecx [ebp-428h] +
call ?LoadStringW@CString@@QAEHI@Z  +
push 0EF55h  +
lea ecx [ebp-424h] +
call ?LoadStringW@CString@@QAEHI@Z  +
push 42010h  +
push dword ptr [ebp-428h]  +
mov ecx edi +
push dword ptr [ebp-424h]  +
call ?MessageBoxW@CWnd@@QAEHPBG0I@Z  +
lea ecx [ebp-428h] +
mov byte ptr [ebp-4] 0 +
call ??1CString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-424h] +
call ??1CString@@QAE@XZ  +
mov eax ebx +
jmp loc_100A1AF  +
push ebx  +
push ebx  +
push ebx  +
push 2  +
push ebx  +
push eax  +
call ds:CreateFileMappingW  +
mov [ebp-434h] eax +
cmp eax ebx +
jnz loc_100A28D  +
push 0EF63h  +
lea ecx [ebp-428h] +
call ?LoadStringW@CString@@QAEHI@Z  +
push 0EF55h  +
lea ecx [ebp-424h] +
call ?LoadStringW@CString@@QAEHI@Z  +
push 42010h  +
push dword ptr [ebp-428h]  +
mov ecx edi +
push dword ptr [ebp-424h]  +
call ?MessageBoxW@CWnd@@QAEHPBG0I@Z  +
jmp loc_100A42D  +
push ebx  +
push ebx  +
push ebx  +
push 4  +
push eax  +
call ds:MapViewOfFile  +
mov [ebp-430h] eax +
cmp eax ebx +
jnz loc_100A2E0  +
push 0EF63h  +
lea ecx [ebp-428h] +
call ?LoadStringW@CString@@QAEHI@Z  +
push 0EF55h  +
lea ecx [ebp-424h] +
call ?LoadStringW@CString@@QAEHI@Z  +
push 42010h  +
push dword ptr [ebp-428h]  +
mov ecx edi +
push dword ptr [ebp-424h]  +
call ?MessageBoxW@CWnd@@QAEHPBG0I@Z  +
jmp loc_100A421  +
cmp byte ptr [eax+0Ah] 1 +
jz loc_100A302  +
cmp edi ebx +
jnz loc_100A2EE  +
xor edi edi +
jmp loc_100A2F1  +
mov edi [edi+20h] +
push 1  +
push 0EF7Eh  +
push 0EF7Dh  +
jmp loc_100A3D1  +
movzx esi word ptr [eax+10h] +
add esi 4 +
imul esi [eax+0Ch] +
push 0  +
push dword ptr [ebp-42Ch]  +
mov ebx 100h +
add esi ebx +
call ds:GetFileSize  +
mov [ebp-438h] eax +
cmp esi eax +
jz loc_100A346  +
xor ebx ebx +
test edi edi +
jz loc_100A335  +
mov edi [edi+20h] +
push 1  +
push 0EF4Bh  +
push 0EF4Ah  +
jmp loc_100A3D1  +
mov esi [ebp-430h] +
cmp [esi] bx +
jz loc_100A368  +
xor ebx ebx +
test edi edi +
jz loc_100A35A  +
mov edi [edi+20h] +
push 1  +
push 0EF49h  +
push 0EF48h  +
jmp loc_100A3D1  +
cmp word ptr [esi+40h] 0Dh +
jz loc_100A386  +
xor ebx ebx +
test edi edi +
jz loc_100A378  +
mov edi [edi+20h] +
push 1  +
push 0EF4Dh  +
push 0EF4Ch  +
jmp loc_100A3D1  +
movzx eax word ptr [esi+45h] +
push eax  +
call sub_100751F  +
xor ebx ebx +
cmp eax 0FFFFFFFFh +
jnz loc_100A3AC  +
test edi edi +
jz loc_100A39E  +
mov edi [edi+20h] +
push 1  +
push 0EF51h  +
push 0EF50h  +
jmp loc_100A3D1  +
cmp dword ptr [esi+2] 4E495743h +
jnz loc_100A3BE  +
cmp dword ptr [esi+6] 4C42545Fh +
jz loc_100A3D9  +
test edi edi +
jz loc_100A3C5  +
mov edi [edi+20h] +
push 1  +
push 0EF53h  +
push 0EF52h  +
push edi  +
call sub_102447F  +
jmp loc_100A415  +
inc ebx  +
test edi edi +
jnz loc_100A3E2  +
xor eax eax +
jmp loc_100A3E5  +
mov eax [edi+20h] +
movzx ecx word ptr [esi+45h] +
push ecx  +
push dword ptr [ebp-438h]  +
push esi  +
push eax  +
call sub_10061C8  +
test eax eax +
jnz loc_100A415  +
test edi edi +
jz loc_100A402  +
mov edi [edi+20h] +
push ebx  +
push 0EF65h  +
push 0EF64h  +
push edi  +
call sub_102447F  +
xor ebx ebx +
push dword ptr [ebp-430h]  +
call ds:UnmapViewOfFile  +
push dword ptr [ebp-434h]  +
call ds:CloseHandle  +
push dword ptr [ebp-42Ch]  +
call ds:CloseHandle  +
jmp loc_100A214  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100A131  +
test eax eax +
jz loc_100A459  +
mov ecx esi +
pop esi  +
jmp loc_102605A  +
pop esi  +
retn   +
***
mov eax offset dword_102D2B8 +
and dword ptr [eax] 0 +
add eax 10h +
cmp eax offset unk_102D338 +
jl loc_100A465  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push ebx  +
push esi  +
push edi  +
jz loc_100A4B0  +
mov esi [ebp+arg_4] +
mov eax 100h +
cmp esi eax +
ja loc_100A4B0  +
mov ebx [ebp+arg_8] +
cmp ebx eax +
ja loc_100A4B0  +
xor edi edi +
mov eax offset dword_102D2B8 +
cmp dword ptr [eax] 0 +
jz loc_100A4BA  +
add eax 10h +
inc edi  +
cmp eax offset unk_102D338 +
jl loc_100A4A0  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
lea eax [esi+0Fh] +
cdq   +
and edx 0Fh +
add eax edx +
sar eax 4 +
mov ecx edi +
shl ecx 4 +
add eax eax +
mov dword_102D2BC[ecx] eax +
mov eax [ebp+arg_0] +
mov dword_102D2B8[ecx] eax +
mov dword_102D2B0[ecx] esi +
mov dword_102D2B4[ecx] ebx +
mov eax edi +
jmp loc_100A4B3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 7 +
ja loc_100A50C  +
shl eax 4 +
and dword_102D2B8[eax] 0 +
xor eax eax +
jmp loc_100A50F  +
or eax 0FFFFFFFFh +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
cdq   +
and edx 7 +
add eax edx +
push esi  +
mov esi eax +
mov eax [ebp+arg_4] +
sar esi 3 +
and eax 80000007h +
push edi  +
jns loc_100A53C  +
dec eax  +
or eax 0FFFFFFF8h +
inc eax  +
mov edx [ebp+arg_0] +
mov al byte_102C228[eax] +
shl edx 4 +
mov edi dword_102D2BC[edx] +
mov ecx edi +
imul ecx [ebp+arg_8] +
add ecx dword_102D2B8[edx] +
add ecx esi +
mov dl [ecx] +
test dl al +
jz loc_100A576  +
movzx eax al +
movzx ecx dl +
and ecx eax +
movzx eax byte_102C120[ecx] +
lea eax [eax+esi*8] +
jmp loc_100A59A  +
inc esi  +
mov eax esi +
shl eax 3 +
jmp loc_100A588  +
inc ecx  +
cmp byte ptr [ecx] 0 +
jnz loc_100A58E  +
inc esi  +
add eax 8 +
cmp esi edi +
jl loc_100A57E  +
jmp loc_100A59A  +
movzx ecx byte ptr [ecx] +
movzx ecx byte_102C120[ecx] +
add eax ecx +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
test ecx ecx +
jl loc_100A606  +
mov edx [ebp+arg_8] +
test edx edx +
jl loc_100A606  +
mov eax [ebp+arg_0] +
shl eax 4 +
cmp ecx dword_102D2B0[eax] +
jge loc_100A606  +
cmp edx dword_102D2B4[eax] +
jge loc_100A606  +
push esi  +
mov esi dword_102D2BC[eax] +
imul esi edx +
add esi dword_102D2B8[eax] +
mov eax ecx +
cdq   +
and edx 7 +
add eax edx +
sar eax 3 +
and ecx 80000007h +
movzx eax byte ptr [esi+eax] +
jns loc_100A5FA  +
dec ecx  +
or ecx 0FFFFFFF8h +
inc ecx  +
movzx ecx byte_102C220[ecx] +
and eax ecx +
pop esi  +
jmp loc_100A608  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
cmp esi 7 +
ja loc_100A682  +
mov edi [ebp+arg_4] +
test edi edi +
jl loc_100A682  +
shl esi 4 +
cmp edi dword_102D2B0[esi] +
jge loc_100A682  +
mov ebx [ebp+arg_8] +
test ebx ebx +
jl loc_100A682  +
cmp ebx dword_102D2B4[esi] +
jge loc_100A682  +
mov ecx dword_102D2BC[esi] +
mov eax edi +
cdq   +
and edx 7 +
add eax edx +
mov edx ecx +
imul ecx ebx +
add ecx dword_102D2B8[esi] +
sar eax 3 +
sub edx eax +
dec edx  +
add ecx eax +
and edi 80000007h +
jns loc_100A670  +
dec edi  +
or edi 0FFFFFFF8h +
inc edi  +
mov al byte_102C228[edi] +
xor [ecx] al +
jmp loc_100A67E  +
dec edx  +
inc ecx  +
not byte ptr [ecx]  +
test edx edx +
jg loc_100A67A  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
cmp eax 7 +
ja locret_100A6C2  +
cmp ecx 7 +
ja locret_100A6C2  +
shl eax 4 +
mov edx dword_102D2B4[eax] +
imul edx dword_102D2BC[eax] +
push edx  +
push dword_102D2B8[eax]  +
shl ecx 4 +
push dword_102D2B8[ecx]  +
call memcpy  +
add esp 0Ch +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
cmp ecx 7 +
ja loc_100A6FF  +
shl ecx 4 +
mov edx dword_102D2B8[ecx] +
test edx edx +
jz loc_100A6FF  +
mov eax dword_102D2B4[ecx] +
imul eax dword_102D2BC[ecx] +
mov ecx edx +
jmp loc_100A6F7  +
not byte ptr [ecx]  +
dec eax  +
inc ecx  +
test eax eax +
jg loc_100A6F3  +
xor eax eax +
jmp loc_100A702  +
or eax 0FFFFFFFFh +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 7 +
ja loc_100A742  +
shl eax 4 +
mov ecx dword_102D2B8[eax] +
test ecx ecx +
jz loc_100A742  +
mov edx dword_102D2B4[eax] +
imul edx dword_102D2BC[eax] +
push edx  +
push 0  +
push ecx  +
call memset  +
add esp 0Ch +
xor eax eax +
jmp loc_100A745  +
or eax 0FFFFFFFFh +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
test eax eax +
jnz loc_100A762  +
or eax 0FFFFFFFFh +
jmp locret_100A8D0  +
movsx ecx word ptr [eax] +
mov [ebp+var_4] ecx +
movsx ecx word ptr [eax+2] +
mov [ebp+var_8] ecx +
mov ecx [eax] +
mov eax [eax+4] +
push esi  +
mov [ebp+var_10] ecx +
mov [ebp+var_C] eax +
xor esi esi +
push edi  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+arg_4]  +
call sub_102485E  +
test eax eax +
jnz loc_100A8D4  +
mov eax esi +
sub eax 0 +
jz loc_100A865  +
dec eax  +
jz loc_100A836  +
dec eax  +
jz loc_100A7E9  +
dec eax  +
jnz loc_100A8AA  +
dec word ptr [ebp+var_10]  +
movsx eax word ptr [ebp+var_10] +
movsx esi word ptr [ebp+var_10+2] +
lea edi [eax-1] +
lea eax [esi-1] +
push eax  +
push edi  +
push ebx  +
call sub_100A5A5  +
test eax eax +
jz loc_100A7D3  +
push 2  +
jmp loc_100A898  +
push esi  +
push edi  +
push ebx  +
call sub_100A5A5  +
mov esi eax +
neg esi  +
sbb esi esi +
and esi 3 +
jmp loc_100A8AA  +
dec word ptr [ebp+var_10+2]  +
movsx eax word ptr [ebp+var_10+2] +
push eax  +
movsx eax word ptr [ebp+var_10] +
push eax  +
push [ebp+arg_0]  +
call sub_100A611  +
test eax eax +
jnz loc_100A8D4  +
movsx eax word ptr [ebp+var_10+2] +
movsx esi word ptr [ebp+var_10] +
lea edi [eax-1] +
push edi  +
push esi  +
push ebx  +
call sub_100A5A5  +
test eax eax +
jz loc_100A822  +
xor esi esi +
jmp loc_100A862  +
push edi  +
dec esi  +
push esi  +
push ebx  +
call sub_100A5A5  +
mov esi eax +
neg esi  +
sbb esi esi +
add esi 3 +
jmp loc_100A8AA  +
inc word ptr [ebp+var_10]  +
movsx esi word ptr [ebp+var_10+2] +
movsx edi word ptr [ebp+var_10] +
push esi  +
push edi  +
push ebx  +
call sub_100A5A5  +
test eax eax +
jz loc_100A852  +
xor esi esi +
jmp loc_100A8AA  +
dec esi  +
push esi  +
push edi  +
push ebx  +
call sub_100A5A5  +
mov esi eax +
neg esi  +
sbb esi esi +
inc esi  +
inc esi  +
jmp loc_100A8AA  +
movsx eax word ptr [ebp+var_10+2] +
push eax  +
movsx eax word ptr [ebp+var_10] +
push eax  +
push [ebp+arg_0]  +
call sub_100A611  +
test eax eax +
jnz loc_100A8D4  +
inc word ptr [ebp+var_10+2]  +
movsx edi word ptr [ebp+var_10+2] +
movsx esi word ptr [ebp+var_10] +
push edi  +
lea eax [esi-1] +
push eax  +
push ebx  +
call sub_100A5A5  +
test eax eax +
jz loc_100A89B  +
push 3  +
pop esi  +
jmp loc_100A8AA  +
push edi  +
push esi  +
push ebx  +
call sub_100A5A5  +
mov esi eax +
neg esi  +
sbb esi esi +
inc esi  +
movsx eax word ptr [ebp+var_10] +
cmp eax [ebp+var_4] +
jnz loc_100A77E  +
movsx eax word ptr [ebp+var_10+2] +
cmp eax [ebp+var_8] +
jnz loc_100A77E  +
push [ebp+arg_4]  +
call sub_10247F6  +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn 8  +
or eax 0FFFFFFFFh +
jmp loc_100A8CE  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
test eax eax +
jnz loc_100A8F2  +
or eax 0FFFFFFFFh +
jmp locret_100AA68  +
movsx ecx word ptr [eax] +
mov [ebp+var_4] ecx +
movsx ecx word ptr [eax+2] +
push esi  +
mov [ebp+var_8] ecx +
mov ecx [eax] +
mov eax [eax+4] +
xor esi esi +
mov [ebp+var_10] ecx +
mov [ebp+var_C] eax +
inc esi  +
push edi  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+arg_4]  +
call sub_102485E  +
test eax eax +
jnz loc_100AA6C  +
mov eax esi +
sub eax 0 +
jz loc_100A9FC  +
dec eax  +
jz loc_100A9CB  +
dec eax  +
jz loc_100A97D  +
dec eax  +
jnz loc_100AA42  +
dec word ptr [ebp+var_10]  +
movsx eax word ptr [ebp+var_10] +
movsx esi word ptr [ebp+var_10+2] +
lea edi [eax-1] +
lea eax [esi-1] +
push eax  +
push edi  +
push ebx  +
call sub_100A5A5  +
test eax eax +
jnz loc_100A964  +
push 2  +
jmp loc_100AA2F  +
push esi  +
push edi  +
push ebx  +
call sub_100A5A5  +
mov esi eax +
neg esi  +
sbb esi esi +
and esi 0FFFFFFFDh +
add esi 3 +
jmp loc_100AA42  +
dec word ptr [ebp+var_10+2]  +
movsx eax word ptr [ebp+var_10+2] +
push eax  +
movsx eax word ptr [ebp+var_10] +
push eax  +
push [ebp+arg_0]  +
call sub_100A611  +
test eax eax +
jnz loc_100AA6C  +
movsx eax word ptr [ebp+var_10+2] +
movsx esi word ptr [ebp+var_10] +
lea edi [eax-1] +
push edi  +
push esi  +
push ebx  +
call sub_100A5A5  +
test eax eax +
jnz loc_100A9B6  +
xor esi esi +
jmp loc_100A9C8  +
push edi  +
dec esi  +
push esi  +
push ebx  +
call sub_100A5A5  +
mov esi eax +
neg esi  +
sbb esi esi +
neg esi  +
inc esi  +
inc esi  +
jmp loc_100AA42  +
inc word ptr [ebp+var_10]  +
movsx esi word ptr [ebp+var_10+2] +
movsx edi word ptr [ebp+var_10] +
push esi  +
push edi  +
push ebx  +
call sub_100A5A5  +
test eax eax +
jnz loc_100A9E7  +
xor esi esi +
jmp loc_100AA42  +
dec esi  +
push esi  +
push edi  +
push ebx  +
call sub_100A5A5  +
xor ecx ecx +
test eax eax +
setnz cl  +
inc ecx  +
mov esi ecx +
jmp loc_100AA42  +
movsx eax word ptr [ebp+var_10+2] +
push eax  +
movsx eax word ptr [ebp+var_10] +
push eax  +
push [ebp+arg_0]  +
call sub_100A611  +
test eax eax +
jnz loc_100AA6C  +
inc word ptr [ebp+var_10+2]  +
movsx edi word ptr [ebp+var_10+2] +
movsx esi word ptr [ebp+var_10] +
push edi  +
lea eax [esi-1] +
push eax  +
push ebx  +
call sub_100A5A5  +
test eax eax +
jnz loc_100AA32  +
push 3  +
pop esi  +
jmp loc_100AA42  +
push edi  +
push esi  +
push ebx  +
call sub_100A5A5  +
mov esi eax +
neg esi  +
sbb esi esi +
neg esi  +
movsx eax word ptr [ebp+var_10] +
cmp eax [ebp+var_4] +
jnz loc_100A90F  +
movsx eax word ptr [ebp+var_10+2] +
cmp eax [ebp+var_8] +
jnz loc_100A90F  +
push [ebp+arg_4]  +
call sub_10247F6  +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn 8  +
or eax 0FFFFFFFFh +
jmp loc_100AA66  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_C]  +
call sub_102469F  +
mov ebx [ebp+arg_0] +
mov ecx [ebp+arg_4] +
xor esi esi +
mov eax ebx +
mov [ebp+var_8] esi +
call sub_100A690  +
mov ecx [ebp+arg_8] +
mov eax ebx +
call sub_100A690  +
mov edi ebx +
shl edi 4 +
cmp dword_102D2B4[edi] esi +
mov [ebp+var_4] esi +
jle loc_100AB50  +
push [ebp+var_4]  +
push 0  +
jmp loc_100AB2C  +
push [ebp+var_4]  +
push esi  +
push [ebp+arg_4]  +
call sub_100A5A5  +
push [ebp+var_4]  +
mov ebx eax +
push esi  +
push [ebp+arg_8]  +
call sub_100A5A5  +
xor ecx ecx +
cmp eax ebx +
mov ebx [ebp+arg_0] +
mov eax [ebp+arg_4] +
setnz cl  +
mov [ebp+var_C] ecx +
mov ecx ebx +
call sub_100A690  +
mov ax word ptr [ebp+var_4] +
push [ebp+arg_C]  +
mov word ptr [ebp+var_14+2] ax +
push [ebp+arg_4]  +
xor eax eax +
cmp [ebp+var_C] eax +
mov [ebp+var_10] ax +
mov word ptr [ebp+var_14] si +
lea eax [ebp+var_14] +
jnz loc_100AB18  +
call sub_100A74E  +
jmp loc_100AB1D  +
call sub_100A8DE  +
mov [ebp+var_C] eax +
test eax eax +
jl loc_100AB60  +
inc [ebp+var_8]  +
push [ebp+var_4]  +
inc esi  +
push esi  +
push [ebp+arg_4]  +
call sub_100A518  +
mov esi eax +
cmp esi dword_102D2B0[edi] +
jl loc_100AAC0  +
inc [ebp+var_4]  +
mov eax [ebp+var_4] +
cmp eax dword_102D2B4[edi] +
jl loc_100AAB9  +
mov eax [ebp+var_8] +
mov [ebp+var_C] eax +
mov eax [ebp+arg_8] +
mov ecx ebx +
call sub_100A690  +
mov eax [ebp+var_C] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov eax dword_102D934 +
cmp eax 0FFh +
ja locret_100ABBB  +
shl edx 8 +
push edi  +
lea edi [edx+esi] +
add edx ecx +
mov word_102D530[eax*2] dx +
mov edx dword_102D938 +
sub ecx esi +
add edx 0FFFFE000h +
inc ecx  +
movzx ecx cx +
add dword_102D938 ecx +
mov word_102D730[eax*2] di +
mov word_102D330[eax*2] dx +
inc eax  +
mov dword_102D934 eax +
pop edi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push edi  +
xor edi edi +
cmp dword_102DCC8 edi +
jnz loc_100AD21  +
cmp dword_102D930 edi +
jnz loc_100AD21  +
mov eax dword_102DC18 +
dec eax  +
mov dword_102D938 edi +
mov dword_102D934 edi +
mov [ebp+var_8] edi +
test eax eax +
jle loc_100AD17  +
push ebx  +
mov [ebp+var_10] offset dword_102DC34 +
push esi  +
cmp dword_102DCE8 804h +
jnz loc_100AC1E  +
push [ebp+var_8]  +
call sub_1015588  +
mov eax [ebp+var_8] +
lea eax dword_102DC5C[eax] +
movzx cx byte ptr [eax-0Ch] +
movzx ax byte ptr [eax] +
movzx ebx cx +
mov [ebp+var_4] cx +
mov [ebp+var_2] ax +
cmp bx ax +
ja loc_100ACFF  +
cmp bx [ebp+var_4] +
jnz loc_100AC5B  +
mov eax [ebp+var_10] +
mov ax [eax-18h] +
mov ecx 0FFh +
and ax cx +
jmp loc_100AC63  +
movzx ax byte_102DC6C +
movzx eax ax +
mov [ebp+var_14] eax +
cmp bx [ebp+var_2] +
jnz loc_100AC7F  +
mov eax [ebp+var_10] +
mov ax [eax] +
mov ecx 0FFh +
and ax cx +
jmp loc_100AC8C  +
mov eax dword_102DC68 +
movzx ax byte_102DC77[eax] +
cmp dword_102DC68 edi +
movzx eax ax +
mov [ebp+var_C] eax +
jle loc_100ACF4  +
movzx si byte_102DC6C[edi] +
mov eax [ebp+var_14] +
cmp ax si +
jb loc_100ACCB  +
movzx cx byte ptr dword_102DC78[edi] +
cmp ax cx +
ja loc_100ACC6  +
mov esi eax +
mov edx ebx +
cmp word ptr [ebp+var_C] cx +
ja loc_100ACE4  +
mov ecx [ebp+var_C] +
jmp loc_100ACE4  +
cmp ax si +
jnb loc_100ACE9  +
mov ecx [ebp+var_C] +
cmp cx si +
jb loc_100ACE9  +
movzx ax byte ptr dword_102DC78[edi] +
mov edx ebx +
cmp cx ax +
jbe loc_100ACE4  +
mov ecx esi +
call sub_100AB6F  +
inc edi  +
cmp edi dword_102DC68 +
jl loc_100AC9A  +
xor edi edi +
inc ebx  +
cmp bx [ebp+var_2] +
jbe loc_100AC44  +
inc [ebp+var_8]  +
add [ebp+var_10] 2 +
mov eax dword_102DC18 +
dec eax  +
cmp [ebp+var_8] eax +
jl loc_100AC0A  +
pop esi  +
pop ebx  +
mov dword_102D930 1 +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx dword_102D934 +
xor ecx ecx +
test edx edx +
jle loc_100AD57  +
mov ax [ebp+arg_0] +
cmp ax word_102D530[ecx*2] +
ja loc_100AD52  +
cmp word_102D730[ecx*2] ax +
jbe loc_100AD60  +
inc ecx  +
cmp ecx edx +
jl loc_100AD3E  +
mov eax 0FFFFh +
pop ebp  +
retn 4  +
add ecx ecx +
sub ax word_102D730[ecx] +
movzx ecx word_102D330[ecx] +
add eax ecx +
jmp loc_100AD5C  +
***
xor eax eax +
cmp dword_102DCC8 eax +
jnz loc_100ADA2  +
mov eax dword_102D934 +
add eax eax +
mov cx word_102D52E[eax] +
sub cx word_102D72E[eax] +
add cx word_102D32E[eax] +
movzx eax cx +
mov ecx dword_102DC18 +
movzx ecx word_102DC32[ecx*2] +
cmp ax cx +
movzx eax ax +
ja locret_100ADBB  +
movzx eax cx +
retn   +
***
call sub_100AD79  +
movzx edx ax +
mov eax edx +
shr eax 8 +
mov byte_102C27C al +
lea eax [edx+2001h] +
mov word ptr dword_102C27E ax +
mov dword_102C27E+2 66h +
mov eax dword_102C27E +
add eax eax +
movzx ecx ax +
mov word_102C284 ax +
movzx eax word_102C28A +
add ecx 66h +
add eax ecx +
push 6  +
mov dword_102C286 ecx +
pop ecx  +
mov dword_102C28C eax +
add eax ecx +
mov dword_102C292 eax +
mov eax 0E000h +
mov byte_102C27D dl +
mov word_102C290 cx +
mov word_102C298 ax +
mov word_102C29A dx +
retn   +
***
mov edi edi +
push esi  +
mov esi eax +
test esi esi +
jz loc_100AE95  +
test ecx ecx +
jz loc_100AE95  +
movzx eax word ptr dword_102C27E +
add eax eax +
push eax  +
mov [ecx] eax +
call ds:malloc  +
pop ecx  +
mov [esi] eax +
test eax eax +
jz loc_100AE95  +
movzx esi word_102C298 +
push edi  +
mov edi eax +
call sub_100AD79  +
mov word_102C29A ax +
movzx edx ax +
movzx ecx si +
cmp si ax +
ja loc_100AE90  +
mov [edi] cx +
inc ecx  +
inc edi  +
inc edi  +
cmp cx dx +
jbe loc_100AE85  +
pop edi  +
xor eax eax +
pop esi  +
retn   +
or eax 0FFFFFFFFh +
pop esi  +
retn   +
***
mov edi edi +
push edi  +
mov edi eax +
test edi edi +
jz loc_100AF15  +
test esi esi +
jz loc_100AF15  +
movzx eax word_102C28A +
push eax  +
mov [esi] eax +
call ds:malloc  +
pop ecx  +
mov [edi] eax +
test eax eax +
jz loc_100AF15  +
push dword ptr [esi]  +
push 0FFh  +
push eax  +
call memset  +
movzx ax byte_102C27C +
movzx cx byte_102C27A +
mov edi [edi] +
movzx eax ax +
movzx ecx cx +
add esp 0Ch +
cmp cx ax +
ja loc_100AF11  +
sub eax ecx +
movzx edx cx +
inc eax  +
movzx ecx ax +
xor eax eax +
lea edi [edi+edx*2] +
movzx edx ax +
mov eax edx +
shl edx 10h +
or eax edx +
shr ecx 1 +
stos   +
adc ecx ecx +
stos   +
xor eax eax +
pop edi  +
retn   +
or eax 0FFFFFFFFh +
pop edi  +
retn   +
***
test edi edi +
jz loc_100AF65  +
test esi esi +
jz loc_100AF65  +
movzx eax word ptr dword_102C27E +
lea eax ds:0Eh[eax*4] +
push eax  +
mov [esi] eax +
call ds:malloc  +
pop ecx  +
mov [edi] eax +
test eax eax +
jz loc_100AF65  +
push dword ptr [esi]  +
push 0  +
push eax  +
call memset  +
mov eax [edi] +
mov ecx [esi] +
add esp 0Ch +
mov [eax] ecx +
mov [eax+8] ecx +
mov dword ptr [eax+4] 0Eh +
xor eax eax +
retn   +
or eax 0FFFFFFFFh +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
push edi  +
xor edi edi +
cmp [ebp+hObject] edi +
jz loc_100B0F7  +
mov [ebp+lpBuffer] edi +
call sub_100ABC1  +
push edi  +
push 80h  +
push 2  +
push edi  +
push 7  +
push 40000000h  +
push [ebp+hObject]  +
call ds:CreateFileW  +
mov [ebp+hObject] eax +
cmp eax 0FFFFFFFFh +
jz loc_100B0F7  +
call sub_100ADC1  +
mov ebx ds:WriteFile +
push edi  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push 66h  +
push offset Buffer  +
push [ebp+hObject]  +
call ebx  +
test eax eax +
jz loc_100B0EE  +
cmp [ebp+NumberOfBytesWritten] 66h +
jnz loc_100B0EE  +
lea ecx [ebp+nNumberOfBytesToWrite] +
lea eax [ebp+lpBuffer] +
call sub_100AE3F  +
test eax eax +
jnz loc_100B0DF  +
mov esi [ebp+nNumberOfBytesToWrite] +
push edi  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push esi  +
push [ebp+lpBuffer]  +
push [ebp+hObject]  +
call ebx  +
test eax eax +
jz loc_100B0DF  +
cmp [ebp+NumberOfBytesWritten] esi +
jnz loc_100B0DF  +
push [ebp+lpBuffer]  +
call ds:free  +
pop ecx  +
lea esi [ebp+nNumberOfBytesToWrite] +
lea eax [ebp+lpBuffer] +
call sub_100AE9F  +
test eax eax +
jnz loc_100B0DF  +
mov esi [ebp+nNumberOfBytesToWrite] +
push edi  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push esi  +
push [ebp+lpBuffer]  +
push [ebp+hObject]  +
call ebx  +
test eax eax +
jz loc_100B0DF  +
cmp [ebp+NumberOfBytesWritten] esi +
jnz loc_100B0DF  +
push [ebp+lpBuffer]  +
call ds:free  +
push 6  +
pop eax  +
push eax  +
mov [ebp+nNumberOfBytesToWrite] eax +
call ds:malloc  +
pop ecx  +
pop ecx  +
mov [ebp+lpBuffer] eax +
cmp eax edi +
jz loc_100B0DF  +
push 0  +
mov edi eax +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push 6  +
push [ebp+lpBuffer]  +
mov esi offset word_102C298 +
push [ebp+hObject]  +
movs   +
movs   +
call ebx  +
test eax eax +
jz loc_100B0DD  +
cmp [ebp+NumberOfBytesWritten] 6 +
jnz loc_100B0DD  +
push [ebp+lpBuffer]  +
call ds:free  +
pop ecx  +
lea esi [ebp+nNumberOfBytesToWrite] +
lea edi [ebp+lpBuffer] +
call sub_100AF1F  +
mov esi [ebp+nNumberOfBytesToWrite] +
push 0  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push esi  +
push [ebp+lpBuffer]  +
push [ebp+hObject]  +
call ebx  +
test eax eax +
jz loc_100B0DD  +
cmp [ebp+NumberOfBytesWritten] esi +
jnz loc_100B0DD  +
push [ebp+lpBuffer]  +
call ds:free  +
pop ecx  +
push [ebp+hObject]  +
call ds:CloseHandle  +
xor eax eax +
jmp loc_100B0FA  +
xor edi edi +
cmp [ebp+lpBuffer] edi +
jz loc_100B0EE  +
push [ebp+lpBuffer]  +
call ds:free  +
pop ecx  +
push [ebp+hObject]  +
call ds:CloseHandle  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
cmp dword_102D93C 0 +
jnz loc_100B126  +
call sub_10247A1  +
test eax eax +
jz loc_100B11C  +
or eax 0FFFFFFFFh +
retn   +
mov dword_102D93C 1 +
xor eax eax +
retn   +
***
add [esp+ecx-7Dh] dh +
and eax offset dword_102D93C +
add al ch +
and [ebp-3FCCFFFFh] edx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+lpFileName] eax +
jnz loc_100B15B  +
xor eax eax +
jmp loc_100B183  +
push eax  +
push 80h  +
push 3  +
push eax  +
push 1  +
push 80000000h  +
push [ebp+lpFileName]  +
call ds:CreateFileW  +
cmp eax 0FFFFFFFFh +
jz loc_100B157  +
push eax  +
call ds:CloseHandle  +
xor eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 80h  +
push 3  +
push 0  +
push 3  +
push 80000000h  +
push [ebp+lpFileName]  +
call ds:CreateFileW  +
cmp eax 0FFFFFFFFh +
jnz loc_100B1B5  +
xor eax eax +
jmp loc_100B1BF  +
push eax  +
call ds:CloseHandle  +
xor eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push edi  +
xor edi edi +
cmp [ebp+lpFileName] edi +
jz loc_100B219  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+lpFileName]  +
call sub_1022558  +
test eax eax +
jnz loc_100B219  +
mov eax dword_102D940 +
push esi  +
movsx esi word ptr [ebp+var_4] +
push esi  +
shl eax 2 +
push eax  +
push edi  +
call sub_1020593  +
push 10h  +
push esi  +
push edi  +
call sub_102004A  +
lea eax [ebp+var_14] +
push eax  +
push edi  +
call sub_10202F8  +
pop esi  +
test eax eax +
jz loc_100B21E  +
or eax 0FFFFFFFFh +
jmp loc_100B25F  +
cmp [ebp+arg_C] edi +
jnz loc_100B230  +
push [ebp+arg_8]  +
call sub_100AD29  +
movzx eax ax +
jmp loc_100B233  +
mov eax [ebp+arg_8] +
push edi  +
lea ecx [ebp+var_14] +
push ecx  +
push eax  +
push [ebp+lpFileName]  +
call sub_1023BEA  +
cmp eax edi +
jz loc_100B25D  +
cmp eax 0FFFFFFFDh +
jz loc_100B25F  +
call sub_1022B8C  +
xor ecx ecx +
cmp eax 0FFFFFFFEh +
setnz cl  +
dec ecx  +
dec ecx  +
mov eax ecx +
jmp loc_100B25F  +
xor eax eax +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test eax eax +
jz loc_100B280  +
jmp loc_100B27A  +
dec [ebp+arg_0]  +
not byte ptr [eax]  +
inc eax  +
cmp [ebp+arg_0] 0 +
jg loc_100B274  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
push edi  +
test ecx ecx +
jz loc_100B335  +
mov edi [ecx] +
mov esi [ecx+4] +
movsx ebx ax +
mov eax ebx +
cdq   +
sub eax edx +
sar eax 1 +
add edi eax +
add esi eax +
mov eax ebx +
push 14h  +
cdq   +
pop ecx  +
idiv  ecx +
push [ebp+arg_0]  +
mov ebx eax +
call sub_102469F  +
xor eax eax +
mov [ebp+var_8] ax +
mov eax edi +
sub eax ebx +
mov word ptr [ebp+var_C] ax +
mov eax esi +
sub eax ebx +
mov [ebp+var_4] eax +
mov word ptr [ebp+var_C+2] ax +
lea eax [ebp+var_C] +
push eax  +
push [ebp+arg_0]  +
call sub_102485E  +
test eax eax +
jnz loc_100B335  +
add esi ebx +
lea eax [ebp+var_C] +
mov word ptr [ebp+var_C+2] si +
mov esi [ebp+arg_0] +
push eax  +
push esi  +
call sub_102485E  +
test eax eax +
jnz loc_100B335  +
lea eax [ebp+var_C] +
push eax  +
add edi ebx +
push esi  +
mov word ptr [ebp+var_C] di +
call sub_102485E  +
test eax eax +
jnz loc_100B335  +
mov ax word ptr [ebp+var_4] +
mov word ptr [ebp+var_C+2] ax +
lea eax [ebp+var_C] +
push eax  +
push esi  +
call sub_102485E  +
test eax eax +
jnz loc_100B335  +
push esi  +
call sub_10247F6  +
test eax eax +
jz loc_100B33A  +
or eax 0FFFFFFFFh +
jmp loc_100B33C  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jl loc_100B35D  +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
xor eax eax +
jmp loc_100B368  +
mov eax [ebp+arg_4] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_4] +
add eax ecx +
cmp eax ecx +
jb loc_100B38B  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_100B396  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
sub esp 1Ch +
or eax 0FFFFFFFFh +
push edi  +
xor edi edi +
mov [ebp-4] eax +
mov [ebp-8] eax +
mov [ebp-0Ch] eax +
cmp [ebp+8] edi +
jz loc_100B56D  +
push ebx  +
mov ebx [ebp+0Ch] +
push esi  +
lea eax [ebp+0Ch] +
push eax  +
push ebx  +
mov dword_102D940 ebx +
call sub_100B348  +
test eax eax +
jl loc_100B51E  +
mov esi [ebp+0Ch] +
lea eax [ebp+0Ch] +
push eax  +
push 0Fh  +
push esi  +
call sub_100B371  +
test eax eax +
jl loc_100B51E  +
shr dword ptr [ebp+0Ch] 3 +
mov eax esi +
mul  dword ptr [ebp+0Ch] +
lea ecx [ebp+0Ch] +
push ecx  +
push edx  +
push eax  +
call sub_1011467  +
test eax eax +
jl loc_100B51E  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+0Ch]  +
call sub_101143B  +
test eax eax +
jl loc_100B51E  +
push dword ptr [ebp-10h]  +
mov eax [ebp+8] +
call sub_100B269  +
cmp dword_102D93C edi +
jnz loc_100B443  +
call sub_100B106  +
test eax eax +
jnz loc_100B51E  +
call sub_100A460  +
push dword ptr [ebp-10h]  +
mov esi ds:malloc +
call esi  +
pop ecx  +
mov [ebp-14h] eax +
cmp eax edi +
jz loc_100B51E  +
push dword ptr [ebp-10h]  +
call esi  +
pop ecx  +
mov [ebp+0Ch] eax +
cmp eax edi +
jz loc_100B4E0  +
push ebx  +
push ebx  +
push dword ptr [ebp+8]  +
call sub_100A478  +
cmp eax edi +
mov [ebp-4] eax +
jl loc_100B4E0  +
push ebx  +
push ebx  +
push dword ptr [ebp-14h]  +
call sub_100A478  +
cmp eax edi +
mov [ebp-8] eax +
jl loc_100B4E0  +
push ebx  +
push ebx  +
push dword ptr [ebp+0Ch]  +
call sub_100A478  +
cmp eax edi +
mov [ebp-0Ch] eax +
jl loc_100B4E0  +
push edi  +
call sub_102469F  +
push edi  +
push dword ptr [ebp-0Ch]  +
push dword ptr [ebp-8]  +
push dword ptr [ebp-4]  +
call sub_100AA76  +
test eax eax +
jl loc_100B4E0  +
mov eax [ebp+10h] +
push 10h  +
mov [ebp-1Ch] eax +
lea eax [ebp-1Ch] +
push eax  +
mov esi ebx +
shl esi 2 +
push esi  +
push ebx  +
xor edi edi +
push ebx  +
inc edi  +
push edi  +
push 0  +
mov [ebp-18h] edi +
call sub_10209DA  +
test eax eax +
jz loc_100B523  +
xor edi edi +
push dword ptr [ebp-14h]  +
mov esi ds:free +
call esi  +
pop ecx  +
cmp [ebp+0Ch] edi +
jz loc_100B4F7  +
push dword ptr [ebp+0Ch]  +
call esi  +
pop ecx  +
cmp [ebp-4] edi +
jle loc_100B504  +
push dword ptr [ebp-4]  +
call sub_100A4F1  +
cmp [ebp-8] edi +
jle loc_100B511  +
push dword ptr [ebp-8]  +
call sub_100A4F1  +
cmp [ebp-0Ch] edi +
jle loc_100B51E  +
push dword ptr [ebp-0Ch]  +
call sub_100A4F1  +
or eax 0FFFFFFFFh +
jmp loc_100B56B  +
push edi  +
push 0  +
call sub_10248E2  +
push 10h  +
push esi  +
push edi  +
call sub_102004A  +
push dword ptr [ebp-14h]  +
mov esi ds:free +
call esi  +
push dword ptr [ebp+0Ch]  +
call esi  +
pop ecx  +
pop ecx  +
push dword ptr [ebp-4]  +
call sub_100A4F1  +
push dword ptr [ebp-8]  +
call sub_100A4F1  +
push dword ptr [ebp-0Ch]  +
call sub_100A4F1  +
push dword ptr [ebp-10h]  +
mov eax [ebp+8] +
call sub_100B269  +
mov eax edi +
pop esi  +
pop ebx  +
pop edi  +
leave   +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
xor ecx ecx +
sub esp 14h +
cmp [ebp+0Ch] ecx +
jz loc_100B5DE  +
cmp [ebp+10h] ecx +
jz loc_100B5A5  +
mov eax 0FFh +
mov [ebp-14h] ecx +
mov [ebp-0Ch] eax +
mov [ebp-10h] ecx +
mov [ebp-8] eax +
mov dword ptr [ebp-4] 100h +
jmp loc_100B5B9  +
lea eax [ebp-4] +
push eax  +
lea eax [ebp-14h] +
push eax  +
push dword ptr [ebp+8]  +
call sub_1021CA5  +
test eax eax +
jnz loc_100B5DE  +
mov eax [ebp-4] +
push 3  +
lea ecx [ebp-14h] +
call sub_100B289  +
push dword ptr [ebp+10h]  +
lea eax [ebp-14h] +
push 3  +
push eax  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_10231CB  +
test eax eax +
jz loc_100B5E3  +
or eax 0FFFFFFFFh +
jmp locret_100B5E5  +
xor eax eax +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+pt.y]  +
push [ebp+pt.x]  +
push ecx  +
call ds:PtInRect  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+yBottom]  +
push [ebp+xRight]  +
push [ebp+yTop]  +
push [ebp+xLeft]  +
push ecx  +
call ds:SetRect  +
pop ebp  +
retn 10h  +
***
mov eax offset off_1001F18 +
retn   +
***
retn   +
***
mov edi edi +
push esi  +
push offset szFormat  +
mov esi ecx +
call ds:RegisterClipboardFormatW  +
xor ecx ecx +
test eax eax +
setnz cl  +
mov [esi+11Ch] eax +
pop esi  +
mov eax ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call ds:GetStockObject  +
xor ecx ecx +
test eax eax +
setnz cl  +
mov [esi+4] eax +
pop esi  +
mov eax ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+108h] 0 +
mov ecx [ebp+8] +
mov eax [ecx] +
jz loc_100B6A4  +
push 1  +
jmp loc_100B6A6  +
push 0  +
call dword ptr [eax]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jz loc_100B6C9  +
push dword ptr [ecx+10Ch]  +
mov edx [eax] +
mov ecx eax +
call dword ptr [edx]  +
pop ebp  +
retn 4  +
***
jmp sub_1007D75  +
***
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+10h]  +
mov esi ecx +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call ds:CreatePen  +
push eax  +
mov ecx esi +
call ?Attach@CGdiObject@@QAEHPAX@Z  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
jmp sub_1007D75  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call ds:CreateFontIndirectW  +
push eax  +
mov ecx esi +
call ?Attach@CGdiObject@@QAEHPAX@Z  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+8] +
push dword ptr [eax+10Ch]  +
mov edx [ecx] +
call dword ptr [edx]  +
pop ebp  +
retn 4  +
***
jmp sub_1007D75  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_10]  +
mov esi ecx +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:CreateBitmap  +
push eax  +
mov ecx esi +
call ?Attach@CGdiObject@@QAEHPAX@Z  +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push dword ptr [ecx+4]  +
call ds:SetBitmapBits  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push dword ptr [ecx+4]  +
call ds:GetBitmapBits  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push [ebp+arg_8]  +
mov esi ecx +
push [ebp+arg_4]  +
push dword ptr [eax+4]  +
call ds:CreateCompatibleBitmap  +
push eax  +
mov ecx esi +
call ?Attach@CGdiObject@@QAEHPAX@Z  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov dword ptr [ecx] offset off_10021CC +
jmp sub_1007D75  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_8]  +
mov esi ecx +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:CreatePolygonRgn  +
push eax  +
mov ecx esi +
call ?Attach@CGdiObject@@QAEHPAX@Z  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
push dword ptr [ecx+4]  +
call ds:GetRgnBox  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
test eax eax +
jz loc_100B865  +
mov eax [eax+4] +
push eax  +
call ds:CreateCompatibleDC  +
push eax  +
mov ecx esi +
call ?Attach@CDC@@QAEHPAUHDC__@@@Z  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_100B88D  +
mov eax [eax+4] +
push eax  +
push dword ptr [ecx+4]  +
call ?SelectGdiObject@CDC@@KGPAVCGdiObject@@PAUHDC__@@PAX@Z  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
test eax eax +
jnz loc_100B8AF  +
xor edx edx +
jmp loc_100B8B2  +
mov edx [eax+4] +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_100B8BC  +
mov eax [eax+4] +
push edx  +
push eax  +
push dword ptr [ecx+4]  +
call ds:FillRgn  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ?MoveTo@CDC@@QAE?AVCPoint@@HH@Z  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lprc]  +
push dword ptr [ecx+4]  +
call ds:InvertRect  +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
xor ecx ecx +
mov eax offset off_1002184 +
mov [ebp-10h] ecx +
mov [ebp-14h] eax +
mov ebx [ebp+8] +
mov [ebp-4] ecx +
cmp ebx ecx +
jnz loc_100B936  +
mov [ebp-14h] eax +
jmp loc_100B9E0  +
push dword ptr unk_102DD4C  +
push 1  +
push ecx  +
lea ecx [ebp-14h] +
call near ptr dword_100B6E0+2  +
lea eax [ebp-14h] +
push eax  +
mov ecx ebx +
call ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z  +
mov edi [esi+2B0h] +
mov [ebp+8] eax +
dec edi  +
jmp loc_100B985  +
mov eax dword_102DF60 +
dec eax  +
push eax  +
push edi  +
lea eax [ebp-1Ch] +
push eax  +
mov ecx ebx +
call ?MoveTo@CDC@@QAE?AVCPoint@@HH@Z  +
push dword ptr [esi+258h]  +
mov ecx ebx +
push edi  +
call ?LineTo@CDC@@QAEHHH@Z  +
add edi [esi+2B0h] +
cmp edi [esi+254h] +
jl loc_100B95E  +
mov eax [esi+2B0h] +
mov ecx dword_102DF60 +
lea edi [eax+ecx-1] +
jmp loc_100B9BF  +
push edi  +
push 0  +
lea eax [ebp-1Ch] +
push eax  +
call ?MoveTo@CDC@@QAE?AVCPoint@@HH@Z  +
push edi  +
push dword ptr [esi+254h]  +
mov ecx ebx +
call ?LineTo@CDC@@QAEHHH@Z  +
add edi [esi+2B0h] +
cmp edi [esi+258h] +
mov ecx ebx +
jl loc_100B99F  +
push dword ptr [ebp+8]  +
call ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z  +
lea ecx [ebp-14h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
mov dword ptr [ebp-14h] offset off_1002184 +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call sub_1007D75  +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push dword ptr [eax+0Ch]  +
push dword ptr [eax+8]  +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
push dword ptr [ecx+4]  +
call ds:Ellipse  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push dword ptr [eax+0Ch]  +
push dword ptr [eax+8]  +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
push dword ptr [ecx+4]  +
call ds:Rectangle  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push dword ptr [ecx+4]  +
call ds:PatBlt  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_10] +
test eax eax +
jz loc_100BA78  +
mov eax [eax+4] +
push [ebp+arg_1C]  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push eax  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push dword ptr [ecx+4]  +
call ds:BitBlt  +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_10] +
test eax eax +
jz loc_100BAAF  +
mov eax [eax+4] +
push [ebp+arg_24]  +
push [ebp+arg_20]  +
push [ebp+arg_1C]  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push eax  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push dword ptr [ecx+4]  +
call ds:StretchBlt  +
pop ebp  +
retn 28h  +
***
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+8] +
test edi edi +
jz loc_100BB2E  +
mov eax [ecx+254h] +
imul eax [ebp+0Ch] +
push esi  +
mov esi [ecx+258h] +
mov ecx dword_102DF5C +
shl ecx 2 +
xor edx edx +
div  ecx +
sub esi dword_102DF60 +
xor edx edx +
imul esi [ebp+10h] +
mov [edi] eax +
mov eax dword_102DF58 +
mov ecx eax +
shl ecx 2 +
mov eax esi +
div  ecx +
pop esi  +
add eax dword_102DF60 +
mov [edi+4] eax +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ecx +
test esi esi +
jz loc_100BB98  +
mov eax [esi] +
push ebx  +
push 7  +
mov ecx esi +
call dword ptr [eax+2Ch]  +
mov ebx eax +
mov eax [esi] +
push 5  +
mov ecx esi +
call dword ptr [eax+2Ch]  +
push 0Ah  +
mov ecx esi +
mov [ebp+arg_0] eax +
call ?SetROP2@CDC@@QAEHH@Z  +
add edi 20Ch +
push edi  +
mov ecx esi +
mov [ebp+var_4] eax +
call sub_100BA1E  +
push ebx  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z  +
push [ebp+arg_0]  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
push [ebp+var_4]  +
mov ecx esi +
call ?SetROP2@CDC@@QAEHH@Z  +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push edi  +
mov edi [ebp+8] +
mov esi ecx +
test edi edi +
jz loc_100BD07  +
mov eax [edi] +
push ebx  +
push 7  +
mov ecx edi +
call dword ptr [eax+2Ch]  +
mov [ebp-0Ch] eax +
mov eax [edi] +
push 4  +
mov ecx edi +
call dword ptr [eax+2Ch]  +
mov [ebp-10h] eax +
xor ecx ecx +
lea eax [esi+17Ch] +
mov [ebp-4] ecx +
mov [ebp-8] eax +
jmp loc_100BBE6  +
mov ecx [ebp-4] +
test ecx ecx +
jz loc_100BC46  +
cmp ecx 3 +
jz loc_100BC46  +
cmp ecx 7 +
jz loc_100BC46  +
cmp ecx 1 +
jz loc_100BC3E  +
cmp ecx 2 +
jz loc_100BC3E  +
cmp ecx 5 +
jz loc_100BC3E  +
mov ebx [esi+20Ch] +
mov eax [esi+214h] +
mov ecx [esi+120h] +
sub eax ebx +
cdq   +
sub eax edx +
mov edi eax +
mov eax [esi+214h] +
sub eax ebx +
sar edi 1 +
sub edi ecx +
cdq   +
add edi ebx +
sub eax edx +
mov ebx eax +
sar ebx 1 +
add ebx [esi+20Ch] +
add ebx ecx +
mov ecx [ebp-4] +
jmp loc_100BC58  +
mov eax [esi+214h] +
jmp loc_100BC4C  +
mov eax [esi+20Ch] +
mov ebx [esi+120h] +
mov edi eax +
sub edi ebx +
add ebx eax +
test ecx ecx +
jz loc_100BCB6  +
cmp ecx 1 +
jz loc_100BCB6  +
cmp ecx 4 +
jz loc_100BCB6  +
cmp ecx 5 +
jz loc_100BC78  +
cmp ecx 7 +
jz loc_100BC78  +
mov eax [esi+218h] +
jmp loc_100BCBC  +
mov eax [esi+218h] +
sub eax [esi+210h] +
cdq   +
sub eax edx +
mov ecx eax +
mov eax [esi+218h] +
sub eax [esi+210h] +
sar ecx 1 +
sub ecx [esi+120h] +
cdq   +
add ecx [esi+210h] +
sub eax edx +
sar eax 1 +
add eax [esi+210h] +
add eax [esi+120h] +
jmp loc_100BCC8  +
mov eax [esi+210h] +
mov edx [esi+120h] +
mov ecx eax +
sub ecx edx +
add eax edx +
push eax  +
push ebx  +
push ecx  +
mov ecx [ebp-8] +
push edi  +
call sub_100B609  +
push dword ptr [ebp-8]  +
mov ecx [ebp+8] +
call sub_100B8EF  +
inc dword ptr [ebp-4]  +
add dword ptr [ebp-8] 10h +
cmp dword ptr [ebp-4] 8 +
jl loc_100BBE3  +
push dword ptr [ebp-0Ch]  +
mov ecx [ebp+8] +
call ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z  +
push dword ptr [ebp-10h]  +
mov ecx [ebp+8] +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push ebx  +
mov ebx [ebp+arg_0] +
mov [ecx+164h] ebx +
sub eax dword_102DF60 +
push esi  +
push edi  +
mov [ecx+168h] eax +
jns loc_100BD3B  +
and dword ptr [ecx+168h] 0 +
mov eax [ecx+2ACh] +
mov esi [ecx+2B0h] +
cmp eax 9 +
jnz loc_100BD74  +
mov eax esi +
cdq   +
sub eax edx +
mov edi eax +
sar edi 1 +
lea eax [edi+ebx] +
cdq   +
idiv  esi +
imul eax esi +
mov [ecx+164h] eax +
mov eax [ecx+168h] +
add eax edi +
cdq   +
idiv  esi +
imul eax esi +
jmp loc_100BDB6  +
cmp eax 2 +
jz loc_100BD8F  +
mov eax ebx +
cdq   +
idiv  esi +
imul eax esi +
mov [ecx+164h] eax +
mov eax [ecx+168h] +
jmp loc_100BD6C  +
mov eax esi +
cdq   +
sub eax edx +
mov edi eax +
mov eax ebx +
cdq   +
idiv  esi +
sar edi 1 +
imul eax esi +
add eax edi +
mov [ecx+164h] eax +
mov eax [ecx+168h] +
cdq   +
idiv  esi +
imul eax esi +
add eax edi +
mov [ecx+168h] eax +
mov eax [ecx+2ACh] +
cmp eax 3 +
jz loc_100BE02  +
cmp eax 4 +
jz loc_100BE02  +
cmp eax 5 +
jz loc_100BE02  +
cmp eax 6 +
jz loc_100BE02  +
mov eax [ecx+164h] +
mov [ecx+16Ch] eax +
mov eax [ecx+168h] +
mov [ecx+170h] eax +
mov eax [ecx+164h] +
mov [ecx+174h] eax +
mov eax [ecx+168h] +
jmp loc_100BE5E  +
mov edx [ecx+254h] +
mov eax [ecx+164h] +
sub edx esi +
cmp eax edx +
jle loc_100BE1C  +
sub eax esi +
mov [ecx+164h] eax +
mov edx [ecx+258h] +
mov eax [ecx+168h] +
sub edx esi +
sub edx dword_102DF60 +
cmp eax edx +
jle loc_100BE3C  +
sub eax esi +
mov [ecx+168h] eax +
mov eax [ecx+164h] +
add eax esi +
mov [ecx+16Ch] eax +
mov [ecx+174h] eax +
mov eax [ecx+168h] +
add eax esi +
mov [ecx+170h] eax +
pop edi  +
pop esi  +
mov [ecx+178h] eax +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+174h] +
mov edx [ebp+arg_4] +
mov [ecx+16Ch] eax +
mov eax [ecx+178h] +
mov [ecx+170h] eax +
mov eax [ebp+arg_0] +
mov [ecx+174h] eax +
sub edx dword_102DF60 +
mov [ecx+178h] edx +
xor edx edx +
cmp eax edx +
jge loc_100BEB1  +
mov [ecx+174h] edx +
cmp [ecx+178h] edx +
jge loc_100BEBF  +
mov [ecx+178h] edx +
mov eax [ecx+254h] +
cmp [ecx+174h] eax +
jle loc_100BEF5  +
mov edx [ecx+2ACh] +
cmp edx 8 +
jnz loc_100BEE4  +
mov edx [ecx+2B0h] +
add edx edx +
sub eax edx +
jmp loc_100BEEF  +
cmp edx 9 +
jz loc_100BEEF  +
sub eax [ecx+2B0h] +
mov [ecx+174h] eax +
mov eax [ecx+258h] +
mov edx dword_102DF60 +
push ebx  +
push esi  +
mov esi eax +
sub esi edx +
cmp [ecx+178h] esi +
push edi  +
jle loc_100BF42  +
mov edi [ecx+2ACh] +
cmp edi 8 +
jnz loc_100BF27  +
mov esi [ecx+2B0h] +
add esi esi +
sub eax esi +
jmp loc_100BF3A  +
cmp edi 9 +
jnz loc_100BF34  +
mov [ecx+178h] esi +
jmp loc_100BF42  +
sub eax [ecx+2B0h] +
sub eax edx +
mov [ecx+178h] eax +
mov ebx [ecx+2ACh] +
mov esi [ecx+2B0h] +
cmp ebx 9 +
jnz loc_100BF80  +
mov eax esi +
cdq   +
sub eax edx +
mov edi eax +
mov eax [ecx+174h] +
sar edi 1 +
add eax edi +
cdq   +
idiv  esi +
imul eax esi +
mov [ecx+174h] eax +
mov eax [ecx+178h] +
add eax edi +
cdq   +
idiv  esi +
imul eax esi +
jmp loc_100BFCA  +
cmp ebx 2 +
jz loc_100BF9F  +
mov eax [ecx+174h] +
cdq   +
idiv  esi +
imul eax esi +
mov [ecx+174h] eax +
mov eax [ecx+178h] +
jmp loc_100BF78  +
mov eax esi +
cdq   +
sub eax edx +
mov edi eax +
mov eax [ecx+174h] +
cdq   +
idiv  esi +
sar edi 1 +
imul eax esi +
add eax edi +
mov [ecx+174h] eax +
mov eax [ecx+178h] +
cdq   +
idiv  esi +
imul eax esi +
add eax edi +
mov [ecx+178h] eax +
cmp ebx 3 +
jz loc_100BFE4  +
cmp ebx 4 +
jz loc_100BFE4  +
cmp ebx 5 +
jz loc_100BFE4  +
cmp ebx 6 +
jnz loc_100C053  +
mov eax [ecx+164h] +
mov edx [ecx+174h] +
sub edx eax +
cmp edx esi +
jg loc_100C003  +
test edx edx +
jl loc_100C003  +
lea edx [eax+esi] +
mov [ecx+174h] edx +
mov edx eax +
sub edx [ecx+174h] +
cmp edx esi +
jg loc_100C01B  +
test edx edx +
jle loc_100C01B  +
sub eax esi +
mov [ecx+174h] eax +
mov edx [ecx+168h] +
mov eax edx +
sub eax [ecx+178h] +
cmp eax esi +
jg loc_100C03B  +
test eax eax +
jle loc_100C03B  +
mov eax edx +
sub eax esi +
mov [ecx+178h] eax +
mov eax [ecx+178h] +
sub eax edx +
cmp eax esi +
jg loc_100C053  +
test eax eax +
jl loc_100C053  +
add edx esi +
mov [ecx+178h] edx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
lea edi [esi+20Ch] +
lea eax [esi+21Ch] +
push edi  +
push eax  +
mov [ebp+var_8] 1 +
mov [ebp+lprc1] eax +
call ds:CopyRect  +
mov eax [edi+0Ch] +
sub eax [edi+4] +
mov ebx [edi+8] +
sub ebx [edi] +
mov [ebp+var_4] eax +
mov eax [esi+178h] +
sub eax [esi+170h] +
push eax  +
mov eax [esi+174h] +
sub eax [esi+16Ch] +
push eax  +
push edi  +
call ds:OffsetRect  +
cmp dword ptr [edi] 0 +
jge loc_100C0C7  +
and dword ptr [edi] 0 +
mov [esi+214h] ebx +
mov eax [esi+254h] +
lea ecx [esi+214h] +
cmp [ecx] eax +
jle loc_100C0DE  +
inc eax  +
mov [ecx] eax +
sub eax ebx +
mov [edi] eax +
mov eax dword_102DF60 +
cmp [esi+210h] eax +
jge loc_100C101  +
mov ecx [ebp+var_4] +
mov [esi+210h] eax +
mov eax dword_102DF60 +
add eax ecx +
mov [esi+218h] eax +
mov eax [esi+258h] +
lea ecx [esi+218h] +
cmp [ecx] eax +
jle loc_100C11D  +
inc eax  +
mov [ecx] eax +
sub eax [ebp+var_4] +
mov [esi+210h] eax +
push edi  +
push [ebp+lprc1]  +
call ds:EqualRect  +
pop edi  +
pop esi  +
pop ebx  +
test eax eax +
jz loc_100C132  +
and [ebp+var_8] 0 +
mov eax [ebp+var_8] +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
xor edi edi +
lea esi [ecx+17Ch] +
push [ebp+pt.y]  +
mov ecx esi +
push [ebp+pt.x]  +
call sub_100B5EE  +
test eax eax +
jnz loc_100C16E  +
inc edi  +
add esi 10h +
cmp edi 8 +
jl loc_100C14B  +
push 8  +
pop eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
mov eax edi +
jmp loc_100C168  +
***
mov eax [ecx+218h] +
push esi  +
mov esi dword_102DF60 +
sub eax esi +
cdq   +
push edi  +
mov edi [ecx+2B0h] +
idiv  edi +
add ecx 1FCh +
push eax  +
mov eax [ecx+18h] +
cdq   +
idiv  edi +
push eax  +
mov eax [ecx+14h] +
sub eax esi +
cdq   +
idiv  edi +
push eax  +
mov eax [ecx+10h] +
cdq   +
idiv  edi +
push eax  +
call sub_100B609  +
pop edi  +
pop esi  +
retn   +
***
mov eax [ecx+120h] +
mov edx [ecx+218h] +
add edx eax +
push edx  +
mov edx [ecx+214h] +
add edx eax +
push edx  +
mov edx [ecx+210h] +
sub edx eax +
push edx  +
mov edx [ecx+20Ch] +
sub edx eax +
push edx  +
add ecx 22Ch +
call sub_100B609  +
retn   +
***
mov eax [ecx+120h] +
mov edx [ecx+218h] +
sub edx eax +
push edx  +
mov edx [ecx+214h] +
sub edx eax +
push edx  +
mov edx [ecx+210h] +
add edx eax +
push edx  +
mov edx [ecx+20Ch] +
add edx eax +
push edx  +
add ecx 23Ch +
call sub_100B609  +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_10021E4 +
and dword ptr [ebp-4] 0 +
call ?DestroyMenu@CMenu@@QAEHXZ  +
mov dword ptr [esi] offset off_1001A5C +
call __EH_epilog3  +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
xor ebx ebx +
mov [ebp-1Ch] ebx +
mov dword ptr [ebp-20h] offset off_1001A8C +
push esi  +
lea ecx [ebp-3Ch] +
mov [ebp-4] ebx +
call ??0CClientDC@@QAE@PAVCWnd@@@Z  +
cmp dword ptr [esi+118h] 1 +
mov byte ptr [ebp-4] 1 +
jnz loc_100C2B0  +
cmp [ebp+10h] ebx +
jnz loc_100C2B0  +
lea ecx [ebp-20h] +
cmp [esi+2C0h] ebx +
jz loc_100C2AD  +
push dword_102DD48  +
jmp loc_100C2B8  +
push ebx  +
jmp loc_100C2B8  +
push 0FFFFFFh  +
lea ecx [ebp-20h] +
call sub_1007DF5  +
lea eax [ebp-20h] +
push eax  +
lea ecx [ebp-3Ch] +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
mov [ebp-18h] eax +
mov eax [ebp+8] +
mov [ebp-28h] eax +
mov eax [ebp+0Ch] +
mov [ebp-24h] eax +
mov eax [esi+2B0h] +
cmp eax 1 +
mov [ebp-10h] eax +
jle loc_100C2F1  +
cmp [esi+2B8h] ebx +
jz loc_100C2F1  +
dec dword ptr [ebp-10h]  +
mov eax [esi+128h] +
cmp eax ebx +
mov [ebp-14h] ebx +
jle loc_100C34C  +
mov edi [ebp+0Ch] +
test eax eax +
jle loc_100C333  +
mov eax dword_102DF60 +
push 0F00021h  +
push dword ptr [ebp-10h]  +
add eax edi +
push dword ptr [ebp-10h]  +
push eax  +
push dword ptr [ebp-28h]  +
push dword ptr [ebp-38h]  +
call ds:PatBlt  +
add edi [esi+2B0h] +
inc ebx  +
cmp ebx [esi+128h] +
jl loc_100C305  +
mov eax [esi+2B0h] +
add [ebp-28h] eax +
inc dword ptr [ebp-14h]  +
mov eax [esi+128h] +
xor ebx ebx +
cmp [ebp-14h] eax +
jl loc_100C2FE  +
push dword ptr [ebp-18h]  +
lea ecx [ebp-3Ch] +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
lea ecx [ebp-20h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
cmp dword ptr [esi+118h] 1 +
jnz loc_100C371  +
cmp [ebp+10h] ebx +
jnz loc_100C371  +
push 4  +
jmp loc_100C372  +
push ebx  +
lea edi [esi+0F8h] +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+2Ch]  +
mov ebx [esi+2B0h] +
mov [ebp+10h] eax +
mov eax [ebp+8] +
cdq   +
idiv  ebx +
mov ecx eax +
mov eax [ebp+0Ch] +
cdq   +
idiv  ebx +
cmp ecx dword_102DF5C +
jge loc_100C3BC  +
cmp eax dword_102DF58 +
jge loc_100C3BC  +
mov esi [esi+128h] +
push 0F00021h  +
push esi  +
push esi  +
push eax  +
push ecx  +
mov ecx edi +
call sub_100BA43  +
push dword ptr [ebp+10h]  +
mov ecx edi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 0 +
call ??1CClientDC@@UAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
mov dword ptr [ebp-20h] offset off_1001A8C +
call sub_1007D75  +
call __EH_epilog3  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
push esi  +
mov esi ecx +
mov ecx [esi+2B0h] +
mov eax [esi+174h] +
cdq   +
idiv  ecx +
push edi  +
mov [ebp+var_4] eax +
mov eax [esi+178h] +
cdq   +
idiv  ecx +
mov [ebp+var_8] eax +
mov eax [esi+16Ch] +
cdq   +
idiv  ecx +
mov ebx eax +
mov eax [esi+170h] +
cdq   +
idiv  ecx +
mov edx [ebp+var_4] +
xor ecx ecx +
cmp [ebp+var_4] ebx +
setnl cl  +
lea ecx [ecx+ecx-1] +
mov [ebp+var_24] ecx +
xor ecx ecx +
cmp [ebp+var_8] eax +
mov [ebp+var_18] eax +
setnl cl  +
sub edx ebx +
imul edx [ebp+var_24] +
lea ecx [ecx+ecx-1] +
mov edi ecx +
mov ecx [ebp+var_8] +
sub ecx eax +
imul ecx edi +
mov [ebp+var_20] edi +
test edx edx +
jnz loc_100C471  +
test ecx ecx +
jz loc_100C4FE  +
cmp edx ecx +
jge loc_100C48D  +
mov eax ecx +
mov ecx edx +
mov edx eax +
mov eax [ebp+var_24] +
mov [ebp+var_24] edi +
mov [ebp+var_20] eax +
mov [ebp+var_C] 1 +
jmp loc_100C491  +
and [ebp+var_C] 0 +
mov eax [ebp+var_18] +
lea edi [ecx+ecx] +
sub ecx edx +
add ecx ecx +
mov [ebp+var_10] edi +
mov [ebp+var_14] ecx +
sub edi edx +
mov [ebp+var_18] eax +
mov eax [esi+2B0h] +
push [ebp+arg_0]  +
mov ecx eax +
imul eax [ebp+var_18] +
imul ecx ebx +
push eax  +
push ecx  +
mov ecx esi +
call sub_100C262  +
cmp ebx [ebp+var_4] +
jnz loc_100C4CE  +
mov eax [ebp+var_18] +
cmp eax [ebp+var_8] +
jz loc_100C4FE  +
cmp [ebp+var_C] 0 +
jz loc_100C4DC  +
mov eax ebx +
mov ebx [ebp+var_18] +
mov [ebp+var_18] eax +
add ebx [ebp+var_24] +
test edi edi +
jge loc_100C4E8  +
add edi [ebp+var_10] +
jmp loc_100C4F1  +
mov eax [ebp+var_20] +
add [ebp+var_18] eax +
add edi [ebp+var_14] +
cmp [ebp+var_C] 0 +
jz loc_100C4A6  +
mov eax ebx +
mov ebx [ebp+var_18] +
jmp loc_100C4A3  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_0] +
push esi  +
push eax  +
push 4  +
push eax  +
mov esi ecx +
call ?AfxFindResourceHandle@@YGPAUHINSTANCE__@@PBG0@Z  +
push eax  +
call ds:LoadMenuW  +
push eax  +
mov ecx esi +
call ?Attach@CMenu@@QAEHPAUHMENU__@@@Z  +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
push esi  +
lea ecx [ebp-30h] +
call ??0CClientDC@@QAE@PAVCWnd@@@Z  +
and dword ptr [ebp-4] 0 +
push 7  +
lea ecx [ebp-30h] +
call ?SelectStockObject@CDC@@UAEPAVCGdiObject@@H@Z  +
push 5  +
lea ecx [ebp-30h] +
mov [ebp-14h] eax +
call ?SelectStockObject@CDC@@UAEPAVCGdiObject@@H@Z  +
push 0Ah  +
lea ecx [ebp-30h] +
mov [ebp-18h] eax +
call ?SetROP2@CDC@@QAEHH@Z  +
mov [ebp-1Ch] eax +
lea eax [esi+21Ch] +
push eax  +
lea ecx [ebp-30h] +
mov [ebp-10h] eax +
call sub_100BA1E  +
mov ebx [esi+124h] +
mov eax [esi+210h] +
mov edx [esi+218h] +
lea edi [esi+20Ch] +
mov ecx [edi] +
cmp ebx 7 +
ja loc_100C7F3  +
jmp ds:off_100C83C[ebx*4]  +
mov edx [esi+2B0h] +
mov ebx [esi+178h] +
add ebx edx +
mov edx dword_102DF60 +
lea edx [ebx+edx+1] +
mov ebx [esi+174h] +
push edx  +
mov edx [esi+2B0h] +
lea edx [ebx+edx+1] +
push edx  +
push eax  +
push ecx  +
mov ecx edi +
call sub_100B609  +
mov ecx [edi+0Ch] +
mov eax [esi+2B0h] +
sub ecx [edi+4] +
add eax eax +
cmp ecx eax +
jge loc_100C6B4  +
mov ecx [esi+210h] +
lea ecx [eax+ecx+1] +
mov [esi+218h] ecx +
jmp loc_100C6B4  +
mov ebx [esi+2B0h] +
push edx  +
mov edx [esi+174h] +
lea edx [edx+ebx+1] +
push edx  +
push eax  +
push ecx  +
mov ecx edi +
call sub_100B609  +
mov eax [esi+2B0h] +
add eax eax +
jmp loc_100C6B4  +
mov edx [esi+178h] +
add edx [esi+2B0h] +
mov ebx dword_102DF60 +
lea edx [edx+ebx+1] +
push edx  +
push dword ptr [esi+214h]  +
push eax  +
push ecx  +
mov ecx edi +
call sub_100B609  +
mov eax [esi+2B0h] +
add eax eax +
jmp loc_100C719  +
mov eax [esi+174h] +
push edx  +
mov edx [esi+2B0h] +
lea eax [eax+edx+1] +
push eax  +
mov eax [esi+178h] +
add eax dword_102DF60 +
push eax  +
push ecx  +
mov ecx edi +
call sub_100B609  +
mov ecx [edi+0Ch] +
mov eax [esi+2B0h] +
sub ecx [edi+4] +
add eax eax +
cmp ecx eax +
jge loc_100C6B4  +
mov ecx [esi+218h] +
sub ecx eax +
inc ecx  +
mov [esi+210h] ecx +
mov ecx [edi+8] +
sub ecx [edi] +
cmp ecx eax +
jge loc_100C7F3  +
mov ecx [edi] +
lea eax [eax+ecx+1] +
mov [esi+214h] eax +
jmp loc_100C7F3  +
mov ecx [esi+178h] +
add ecx [esi+2B0h] +
mov edx dword_102DF60 +
lea ecx [ecx+edx+1] +
push ecx  +
push dword ptr [esi+214h]  +
mov ecx edi +
push eax  +
push dword ptr [esi+174h]  +
call sub_100B609  +
mov ecx [edi+8] +
mov eax [esi+2B0h] +
sub ecx [edi] +
add eax eax +
cmp ecx eax +
jge loc_100C719  +
mov ecx [esi+214h] +
sub ecx eax +
inc ecx  +
mov [edi] ecx +
mov ecx [edi+0Ch] +
sub ecx [edi+4] +
cmp ecx eax +
jge loc_100C7F3  +
mov ecx [esi+210h] +
lea eax [eax+ecx+1] +
mov [esi+218h] eax +
jmp loc_100C7F3  +
push edx  +
push dword ptr [esi+214h]  +
mov ecx edi +
push eax  +
push dword ptr [esi+174h]  +
call sub_100B609  +
mov eax [esi+2B0h] +
add eax eax +
jmp loc_100C7DF  +
mov eax [esi+178h] +
add eax dword_102DF60 +
push edx  +
push dword ptr [esi+214h]  +
push eax  +
push ecx  +
mov ecx edi +
call sub_100B609  +
mov ecx [edi+0Ch] +
mov eax [esi+2B0h] +
sub ecx [edi+4] +
add eax eax +
cmp ecx eax +
jge loc_100C7F3  +
mov ecx [esi+218h] +
sub ecx eax +
inc ecx  +
mov [esi+210h] ecx +
jmp loc_100C7F3  +
mov eax [esi+178h] +
add eax dword_102DF60 +
push edx  +
push dword ptr [esi+214h]  +
mov ecx edi +
push eax  +
push dword ptr [esi+174h]  +
call sub_100B609  +
mov ecx [edi+0Ch] +
mov eax [esi+2B0h] +
sub ecx [edi+4] +
add eax eax +
cmp ecx eax +
jge loc_100C7DF  +
mov ecx [esi+218h] +
sub ecx eax +
inc ecx  +
mov [esi+210h] ecx +
mov ecx [edi+8] +
sub ecx [edi] +
cmp ecx eax +
jge loc_100C7F3  +
mov ecx [esi+214h] +
sub ecx eax +
inc ecx  +
mov [edi] ecx +
push edi  +
push dword ptr [ebp-10h]  +
call ds:CopyRect  +
push edi  +
lea ecx [ebp-30h] +
call sub_100BA1E  +
push dword ptr [ebp-14h]  +
lea ecx [ebp-30h] +
call ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z  +
push dword ptr [ebp-18h]  +
lea ecx [ebp-30h] +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
push dword ptr [ebp-1Ch]  +
lea ecx [ebp-30h] +
call ?SetROP2@CDC@@QAEHH@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-30h] +
call ??1CClientDC@@UAE@XZ  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpPoint]  +
push dword ptr [ecx+20h]  +
call ds:ScreenToClient  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+114h] +
cmp dword ptr [eax] 0 +
jz loc_100C894  +
and dword ptr [eax] 0 +
call ds:ReleaseCapture  +
and dword ptr [esi+118h] 0 +
pop esi  +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
xor eax eax +
mov ebx offset off_1001A8C +
mov [ebp-18h] eax +
mov [ebp-1Ch] ebx +
mov [ebp-4] eax +
mov [ebp-10h] eax +
mov [ebp-14h] ebx +
lea edi [esi+1FCh] +
lea ecx [esi+15Ch] +
push edi  +
mov byte ptr [ebp-4] 1 +
call sub_100B839  +
mov eax [edi+8] +
sub eax [edi] +
cmp eax 3 +
jl loc_100C9B4  +
mov eax [edi+0Ch] +
sub eax [edi+4] +
cmp eax 3 +
jl loc_100C9B4  +
push 0  +
lea ecx [ebp-1Ch] +
call sub_100B666  +
push 4  +
lea ecx [ebp-14h] +
call sub_100B666  +
lea eax [ebp-1Ch] +
push eax  +
lea ecx [esi+0E8h] +
push edi  +
call sub_1007E18  +
lea eax [ebp-14h] +
push eax  +
lea eax [esi+15Ch] +
push eax  +
lea ecx [esi+0E8h] +
call sub_100B89F  +
lea ecx [ebp-1Ch] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea ecx [ebp-14h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
mov eax [esi+200h] +
mov ecx [edi] +
push 0EE0086h  +
push eax  +
push ecx  +
lea edx [esi+0F8h] +
push edx  +
mov edx [edi+0Ch] +
sub edx [edi+4] +
push edx  +
mov edx [edi+8] +
sub edx ecx +
push edx  +
push eax  +
push ecx  +
lea ecx [esi+0E8h] +
call sub_100BA69  +
lea eax [esi+20Ch] +
push eax  +
lea ecx [esi+154h] +
call sub_100B839  +
inc dword ptr [esi+214h]  +
inc dword ptr [esi+218h]  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 0 +
mov [ebp-14h] ebx +
call sub_1007D75  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
mov [ebp-1Ch] ebx +
call sub_1007D75  +
xor eax eax +
inc eax  +
jmp loc_100C9F2  +
lea eax [esi+20Ch] +
push eax  +
lea ecx [esi+154h] +
call sub_100B839  +
inc dword ptr [esi+214h]  +
inc dword ptr [esi+218h]  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 0 +
mov [ebp-14h] ebx +
call sub_1007D75  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
mov [ebp-1Ch] ebx +
call sub_1007D75  +
xor eax eax +
call __EH_epilog3  +
retn   +
***
call __EH_prolog3  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
mov esi offset off_1001A8C +
mov [ebp-14h] esi +
and dword ptr [ebp-4] 0 +
push 0FFFFFFh  +
lea ecx [ebp-14h] +
call sub_1007DF5  +
lea eax [ebp-14h] +
push eax  +
lea eax [edi+15Ch] +
push eax  +
lea ecx [edi+0F8h] +
call sub_100B89F  +
lea ecx [ebp-14h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
mov [ebp-14h] esi +
call sub_1007D75  +
call __EH_epilog3  +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
and dword ptr [ebp-18h] 0 +
mov ebx offset off_1001A8C +
mov [ebp-1Ch] ebx +
and dword ptr [ebp-4] 0 +
lea edi [esi+0F8h] +
mov eax [edi] +
push 8  +
mov ecx edi +
call dword ptr [eax+2Ch]  +
push 0FFFFFFh  +
lea ecx [ebp-1Ch] +
mov [ebp-10h] eax +
call sub_1007DF5  +
lea eax [ebp-1Ch] +
push eax  +
mov ecx edi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
mov [ebp-14h] eax +
lea eax [esi+1FCh] +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
call ds:CopyRect  +
inc dword ptr [ebp-24h]  +
inc dword ptr [ebp-20h]  +
lea eax [ebp-2Ch] +
push eax  +
mov ecx edi +
call sub_100BA1E  +
push dword ptr [ebp-10h]  +
mov ecx edi +
call ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z  +
push dword ptr [ebp-14h]  +
mov ecx edi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
lea ecx [ebp-1Ch] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
and dword ptr [esi+10Ch] 0 +
mov ecx esi +
call sub_100C1BB  +
push 0  +
lea eax [esi+22Ch] +
push eax  +
push dword ptr [esi+20h]  +
call ds:InvalidateRect  +
push dword ptr [esi+20h]  +
call ds:UpdateWindow  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
mov dword ptr [esi+10Ch] 1 +
mov [ebp-1Ch] ebx +
call sub_1007D75  +
call __EH_epilog3  +
retn   +
***
push ebp  +
mov ebp esp +
push ecx  +
mov eax dword_102DF5C +
add eax 0Fh +
cdq   +
and edx 0Fh +
add eax edx +
sar eax 4 +
imul eax dword_102DF58 +
push ebx  +
push esi  +
add eax eax +
movzx eax ax +
push edi  +
movzx edi ax +
push edi  +
push 2  +
mov esi ecx +
call ds:LocalAlloc  +
mov ebx eax +
test ebx ebx +
jnz loc_100CB77  +
xor eax eax +
jmp loc_100CC00  +
push ebx  +
call ds:LocalLock  +
mov [ebp-4] eax +
test eax eax +
jnz loc_100CB8E  +
push ebx  +
call ds:LocalFree  +
jmp loc_100CB70  +
***
push edi  +
push 0FFFFh  +
push eax  +
call memset  +
add esp 0Ch +
push dword ptr [ebp-4]  +
lea ecx [esi+0D8h] +
push edi  +
call sub_100B79A  +
push ebx  +
call ds:LocalUnlock  +
push ebx  +
call ds:LocalFree  +
mov eax [esi+2ACh] +
cmp eax 7 +
jz loc_100CBCA  +
cmp eax 9 +
jnz loc_100CBE1  +
lea eax [esi+10Ch] +
xor edi edi +
cmp [eax] edi +
jz loc_100CBE3  +
mov ecx esi +
mov [eax] edi +
call sub_100C87B  +
jmp loc_100CBE3  +
xor edi edi +
push edi  +
push edi  +
push dword ptr [esi+20h]  +
call ds:InvalidateRect  +
push dword ptr [esi+20h]  +
call ds:UpdateWindow  +
xor eax eax +
mov [esi+108h] edi +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov [ecx+108h] eax +
xor eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
push 38h  +
mov eax offset byte_1027687 +
call __EH_prolog3_GS  +
xor ebx ebx +
mov esi offset off_100219C +
mov edi ecx +
mov [ebp-20h] ebx +
mov [ebp-24h] esi +
mov eax dword_102DF58 +
push offset dword_102D948  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
mov dword_102D948 eax +
mov dword_102D958 ebx +
mov byte_102D962 2 +
call sub_100B71B  +
lea ecx [ebp-24h] +
test eax eax +
jnz loc_100CC81  +
mov [ebp-24h] esi +
jmp loc_100CD7F  +
lea esi [edi+0F8h] +
mov eax [esi] +
push ecx  +
mov ecx esi +
call dword ptr [eax+30h]  +
mov [ebp-34h] eax +
lea eax [edi+2BCh] +
cmp [eax] bx +
jz loc_100CD4F  +
mov cl [eax] +
mov al [eax+1] +
mov [ebp-1Ch] cl +
mov [ebp-1Bh] al +
mov [ebp-19h] bl +
mov [ebp-1Ah] bl +
cmp esi ebx +
jnz loc_100CCBA  +
xor eax eax +
jmp loc_100CCBD  +
mov eax [esi+4] +
lea ecx [ebp-30h] +
push ecx  +
push 1  +
lea ecx [ebp-1Ch] +
push ecx  +
push eax  +
call ds:GetTextExtentPoint32W  +
push dword_102DF58  +
lea eax [ebp-44h] +
push dword_102DF5C  +
push ebx  +
push ebx  +
push eax  +
call ds:SetRect  +
mov ecx dword_102DF5C +
cmp [ebp-30h] ecx +
jge loc_100CD03  +
mov eax dword_102DF58 +
sub eax [ebp-30h] +
cdq   +
sub eax edx +
sar eax 1 +
mov [ebp-28h] eax +
jmp loc_100CD06  +
mov [ebp-28h] ebx +
mov eax dword_102DF58 +
cmp [ebp-2Ch] eax +
jge loc_100CD1C  +
mov eax ecx +
sub eax [ebp-2Ch] +
cdq   +
sub eax edx +
sar eax 1 +
jmp loc_100CD1E  +
xor eax eax +
cmp word_102D964 40h +
jnz loc_100CD2D  +
xor eax eax +
mov [ebp-28h] ebx +
cmp esi ebx +
jnz loc_100CD35  +
xor ecx ecx +
jmp loc_100CD38  +
mov ecx [esi+4] +
push ebx  +
push 1  +
lea edx [ebp-1Ch] +
push edx  +
lea edx [ebp-44h] +
push edx  +
push 2  +
push eax  +
push dword ptr [ebp-28h]  +
push ecx  +
call sub_1025B3F  +
push dword ptr [ebp-34h]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+30h]  +
lea ecx [ebp-24h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
push ebx  +
push ebx  +
push dword ptr [edi+20h]  +
call ds:InvalidateRect  +
push dword ptr [edi+20h]  +
call ds:UpdateWindow  +
mov dword ptr [ebp-24h] offset off_100219C +
lea ecx [ebp-24h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
call sub_1007D75  +
call sub_1026DAC  +
retn   +
***
call __EH_prolog3  +
mov edi ecx +
xor esi esi +
cmp [edi+10Ch] esi +
jz loc_100CEA8  +
push edi  +
lea ecx [ebp-28h] +
call ??0CClientDC@@QAE@PAVCWnd@@@Z  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
mov [ebp-4] esi +
call sub_100B853  +
test eax eax +
jz loc_100CE9A  +
mov eax dword_102DF5C +
add eax 0Fh +
cdq   +
and edx 0Fh +
add eax edx +
sar eax 4 +
imul eax dword_102DF58 +
add eax eax +
movzx eax ax +
cmp ax si +
jz loc_100CE9A  +
movzx eax ax +
push eax  +
push 2  +
mov [ebp-10h] eax +
call ds:LocalAlloc  +
mov ebx eax +
cmp ebx esi +
jz loc_100CE9A  +
push ebx  +
call ds:LocalLock  +
mov [ebp-14h] eax +
cmp eax esi +
jnz loc_100CE25  +
push ebx  +
call ds:LocalFree  +
jmp loc_100CE9A  +
push dword ptr [ebp-10h]  +
push 0FFFFh  +
push eax  +
call memset  +
mov ecx [ebp+0Ch] +
add esp 0Ch +
push dword ptr [ebp-14h]  +
push 1  +
push 1  +
push dword_102DF58  +
push dword_102DF5C  +
call sub_100B76B  +
push ebx  +
test eax eax +
jnz loc_100CE5E  +
call ds:LocalUnlock  +
jmp loc_100CE1C  +
***
call ds:LocalUnlock  +
push ebx  +
call ds:LocalFree  +
push dword ptr [ebp+0Ch]  +
mov ecx [ebp+8] +
call sub_100B87E  +
mov ecx [ebp+8] +
push 0CC0020h  +
push esi  +
push esi  +
add edi 0E8h +
push edi  +
push dword_102DF58  +
push dword_102DF5C  +
push esi  +
push esi  +
call sub_100BA69  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-28h] +
call ??1CClientDC@@UAE@XZ  +
jmp loc_100CECF  +
push 0CC0020h  +
push esi  +
push esi  +
lea eax [edi+0F8h] +
push eax  +
push dword_102DF58  +
lea ecx [edi+0E8h] +
push dword_102DF5C  +
push esi  +
push esi  +
call sub_100BA69  +
call __EH_epilog3  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
cmp [ebp+arg_0] 0 +
jz locret_100CFA0  +
cmp [ebp+arg_4] 0 +
jz locret_100CFA0  +
mov eax [ebp+arg_8] +
add eax 0Fh +
cdq   +
and edx 0Fh +
add eax edx +
sar eax 4 +
mov ecx eax +
imul ecx [ebp+arg_C] +
lea edx [eax+eax] +
add ecx ecx +
test edx edx +
jle locret_100CFA0  +
sub ecx edx +
add ecx [ebp+arg_4] +
push ebx  +
push esi  +
mov [ebp+var_C] ecx +
mov [ebp+var_10] edx +
push edi  +
and [ebp+arg_C] 0 +
mov [ebp+arg_4] ecx +
lea eax [edx-1] +
mov [ebp+var_8] eax +
test eax eax +
jl loc_100CF85  +
mov eax [ebp+arg_C] +
mov ecx eax +
and ecx 7 +
mov ebx 80h +
mov [ebp+var_4] eax +
sar ebx cl +
sar [ebp+var_4] 3 +
xor eax eax +
lea edi [ebp+arg_8+3] +
push 7  +
stos   +
pop esi  +
mov eax [ebp+arg_4] +
mov ecx [ebp+var_4] +
test [ecx+eax] bl +
jz loc_100CF6C  +
mov al 1 +
mov ecx esi +
shl al cl +
or byte ptr [ebp+arg_8+3] al +
sub [ebp+arg_4] edx +
dec esi  +
cmp esi 0FFFFFFFFh +
jg loc_100CF58  +
mov ecx [ebp+arg_0] +
mov al byte ptr [ebp+arg_8+3] +
inc [ebp+arg_0]  +
dec [ebp+var_8]  +
mov [ecx] al +
jns loc_100CF4F  +
inc [ebp+arg_C]  +
cmp [ebp+arg_C] 8 +
mov ecx [ebp+var_C] +
mov [ebp+arg_4] ecx +
jl loc_100CF2F  +
inc ecx  +
dec [ebp+var_10]  +
mov [ebp+var_C] ecx +
jnz loc_100CF28  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
add eax 0Fh +
cdq   +
and edx 0Fh +
add edx eax +
sar edx 4 +
add edx edx +
sub esp 14h +
test edx edx +
jle locret_100D051  +
mov eax [ebp+0Ch] +
push ebx  +
lea eax [edx+eax-1] +
push esi  +
mov [ebp-10h] eax +
mov [ebp-14h] edx +
push edi  +
mov [ebp+0Ch] eax +
mov dword ptr [ebp-8] 7 +
lea ecx [edx-1] +
mov [ebp-0Ch] ecx +
test ecx ecx +
jl loc_100D03D  +
mov eax [ebp-8] +
mov ecx eax +
and ecx 7 +
mov ebx 80h +
mov [ebp-4] eax +
sar ebx cl +
sar dword ptr [ebp-4] 3 +
xor eax eax +
lea edi [ebp+13h] +
push 7  +
stos   +
pop esi  +
mov eax [ebp+0Ch] +
mov ecx [ebp-4] +
test [ecx+eax] bl +
jz loc_100D021  +
mov al 1 +
mov ecx esi +
shl al cl +
or [ebp+13h] al +
add [ebp+0Ch] edx +
dec esi  +
cmp esi 0FFFFFFFFh +
jg loc_100D00D  +
mov ecx [ebp+8] +
mov al [ebp+13h] +
inc dword ptr [ebp+8]  +
dec dword ptr [ebp-0Ch]  +
mov [ecx] al +
jns loc_100D004  +
mov eax [ebp-10h] +
dec dword ptr [ebp-8]  +
mov [ebp+0Ch] eax +
jns loc_100CFE4  +
dec eax  +
dec dword ptr [ebp-14h]  +
mov [ebp-10h] eax +
jnz loc_100CFDA  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov eax ecx +
xor ecx ecx +
mov dword ptr [eax] offset off_1002204 +
mov [eax+4] ecx +
mov [eax+10h] ecx +
mov [eax+0Ch] ecx +
mov [eax+8] ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jl loc_100D097  +
cmp eax [ecx+8] +
jge loc_100D097  +
mov ecx [ecx+4] +
lea eax [ecx+eax*8] +
pop ebp  +
retn 4  +
***
call MFC42u_6928  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+14h] +
push ebx  +
mov ebx [ebp+arg_8] +
not eax  +
test al 1 +
mov eax [ebp+arg_4] +
push esi  +
push edi  +
mov [ebp+arg_8] eax +
jz loc_100D109  +
jmp loc_100D0E2  +
mov edi 0FFFFFFFh +
cmp ebx edi +
jnb loc_100D0CC  +
mov edi ebx +
mov ecx [ebp+arg_0] +
mov esi edi +
shl esi 3 +
push esi  +
push [ebp+arg_8]  +
call ?Write@CArchive@@QAEXPBXI@Z  +
sub ebx edi +
add [ebp+arg_8] esi +
test ebx ebx +
ja loc_100D0C1  +
jmp loc_100D10D  +
mov edi 0FFFFFFFh +
cmp ebx edi +
jnb loc_100D0F3  +
mov edi ebx +
mov ecx [ebp+arg_0] +
mov esi edi +
shl esi 3 +
push esi  +
push [ebp+arg_8]  +
call ?Read@CArchive@@QAEIPAXI@Z  +
sub ebx edi +
add [ebp+arg_8] esi +
test ebx ebx +
ja loc_100D0E8  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
cmp dword_102C37C 0 +
push esi  +
mov esi ecx +
jnz loc_100D136  +
push 2  +
mov ecx offset off_102C378 +
call sub_100C50A  +
mov eax dword_102C37C +
push 0  +
push 6  +
push 0  +
push 1000h  +
mov [esi+0C0h] eax +
call ?AfxRegisterWndClass@@YGPBGIPAUHICON__@@PAUHBRUSH__@@0@Z  +
push 0  +
push dword ptr [ebp+20h]  +
lea ecx [ebp+10h] +
push ecx  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
push dword ptr [ebp+8]  +
push eax  +
call ?Create@CMDIChildWnd@@UAEHPBG0KABUtagRECT@@PAVCMDIFrameWnd@@PAUCCreateContext@@@Z  +
pop esi  +
pop ebp  +
retn 1Ch  +
***
call __EH_prolog3  +
mov esi ecx +
push esi  +
lea ecx [ebp-24h] +
call ??0CClientDC@@QAE@PAVCWnd@@@Z  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-24h] +
lea ecx [esi+0F8h] +
push eax  +
call sub_100B853  +
test eax eax +
jnz loc_100D1B4  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-24h] +
call ??1CClientDC@@UAE@XZ  +
xor eax eax +
call __EH_epilog3  +
retn   +
lea eax [ebp-24h] +
lea ecx [esi+0E8h] +
push eax  +
call sub_100B853  +
test eax eax +
jz loc_100D1A0  +
mov eax dword_102DF5C +
add eax 0Fh +
cdq   +
and edx 0Fh +
add eax edx +
sar eax 4 +
imul eax dword_102DF58 +
add eax eax +
movzx eax ax +
test ax ax +
jz loc_100D1A0  +
movzx ebx ax +
push ebx  +
push 2  +
call ds:LocalAlloc  +
mov edi eax +
test edi edi +
jz loc_100D1A0  +
push edi  +
call ds:LocalLock  +
mov [ebp-10h] eax +
test eax eax +
jnz loc_100D212  +
push edi  +
call ds:LocalFree  +
jmp loc_100D1A0  +
push ebx  +
push 0FFFFh  +
push eax  +
call memset  +
add esp 0Ch +
push dword ptr [ebp-10h]  +
xor ebx ebx +
inc ebx  +
push ebx  +
push ebx  +
push dword_102DF58  +
lea ecx [esi+0D8h] +
push dword_102DF5C  +
call sub_100B76B  +
test eax eax +
jnz loc_100D24D  +
push edi  +
call ds:LocalUnlock  +
jmp loc_100D209  +
push dword ptr [ebp-10h]  +
lea ecx [esi+0D0h] +
push ebx  +
push ebx  +
push dword_102DF58  +
push dword_102DF5C  +
call sub_100B76B  +
push edi  +
test eax eax +
jnz loc_100D290  +
call ds:LocalUnlock  +
push edi  +
call ds:LocalFree  +
xor ebx ebx +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-24h] +
call ??1CClientDC@@UAE@XZ  +
mov eax ebx +
jmp loc_100D1AE  +
call ds:LocalUnlock  +
push edi  +
call ds:LocalFree  +
lea eax [esi+0D8h] +
push eax  +
lea ecx [esi+0F8h] +
call sub_100B87E  +
mov [esi+0E4h] eax +
lea eax [esi+0D0h] +
push eax  +
lea ecx [esi+0E8h] +
call sub_100B87E  +
mov [esi+0E0h] eax +
jmp loc_100D27D  +
***
call __EH_prolog3  +
and dword ptr [ebp-10h] 0 +
mov esi offset off_100219C +
mov [ebp-14h] esi +
and dword ptr [ebp-4] 0 +
push 11h  +
lea ecx [ebp-14h] +
call sub_100B666  +
push offset dword_102D948  +
push 5Ch  +
push dword ptr [ebp-10h]  +
call ds:GetObjectW  +
lea ecx [ebp-14h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
mov [ebp-14h] esi +
call sub_1007D75  +
xor eax eax +
inc eax  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1002184 +
call sub_1007D75  +
test byte ptr [ebp+8] 1 +
jz loc_100D34F  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
xor eax eax +
push edi  +
mov edi ecx +
cmp esi eax +
jz loc_100D3DE  +
push ebx  +
xor ebx ebx +
mov [ebp+8] eax +
cmp edi eax +
jz loc_100D37A  +
mov eax [edi+20h] +
push eax  +
call ds:OpenClipboard  +
test eax eax +
jz loc_100D3DD  +
xor eax eax +
push eax  +
call ds:EnumClipboardFormats  +
cmp eax 2 +
jnz loc_100D39E  +
mov dword ptr [ebp+8] 1 +
test ebx ebx +
jnz loc_100D3CF  +
cmp eax [edi+11Ch] +
jnz loc_100D3AF  +
xor ebx ebx +
inc ebx  +
cmp dword ptr [ebp+8] 0 +
jnz loc_100D3CF  +
test eax eax +
jnz loc_100D387  +
xor edi edi +
cmp ebx edi +
jnz loc_100D3CF  +
call ds:CloseClipboard  +
mov eax [esi] +
mov ecx esi +
cmp [ebp+8] edi +
jz loc_100D3CC  +
push 1  +
jmp loc_100D3DB  +
push edi  +
jmp loc_100D3DB  +
call ds:CloseClipboard  +
mov eax [esi] +
mov ecx esi +
push 0  +
call dword ptr [eax]  +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_100219C +
call sub_1007D75  +
test byte ptr [ebp+8] 1 +
jz loc_100D409  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax dword_102DF5C +
add eax 0Fh +
cdq   +
and edx 0Fh +
add eax edx +
sar eax 4 +
imul eax dword_102DF58 +
push ebx  +
add eax eax +
push esi  +
movzx eax ax +
push edi  +
movzx esi ax +
push esi  +
push 2  +
mov edi ecx +
mov [ebp+var_4] 1 +
call ds:LocalAlloc  +
mov ebx eax +
test ebx ebx +
jnz loc_100D45C  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
push ebx  +
call ds:LocalLock  +
mov [ebp+var_8] eax +
test eax eax +
jnz loc_100D477  +
xor esi esi +
push ebx  +
call ds:LocalFree  +
mov eax esi +
jmp loc_100D457  +
push esi  +
push 0FFFFh  +
push eax  +
call memset  +
add esp 0Ch +
push [ebp+var_8]  +
lea ecx [edi+0C8h] +
push 1  +
push 1  +
push dword_102DF58  +
push dword_102DF5C  +
call sub_100B76B  +
test eax eax +
jnz loc_100D4AB  +
and [ebp+var_4] eax +
push ebx  +
call ds:LocalUnlock  +
mov esi [ebp+var_4] +
jmp loc_100D46C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_10021B4 +
call sub_1007D75  +
test byte ptr [ebp+8] 1 +
jz loc_100D4DC  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push 18h  +
mov eax offset byte_1027711 +
call __EH_prolog3  +
mov esi ecx +
xor eax eax +
mov [ebp-20h] eax +
mov dword ptr [ebp-24h] offset off_1002184 +
mov ebx offset off_1001A8C +
mov [ebp-4] eax +
mov [ebp-18h] eax +
mov [ebp-1Ch] ebx +
push 8  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 1 +
call sub_100B666  +
lea eax [ebp-24h] +
lea edi [esi+0E8h] +
push eax  +
mov ecx edi +
call ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z  +
push 0FFFFFFh  +
lea ecx [ebp-1Ch] +
mov [ebp-10h] eax +
call sub_1007DF5  +
lea eax [ebp-1Ch] +
push eax  +
mov ecx edi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
inc dword ptr [esi+204h]  +
inc dword ptr [esi+208h]  +
add esi 1FCh +
push esi  +
mov ecx edi +
mov [ebp-14h] eax +
call sub_100BA1E  +
push dword ptr [ebp-10h]  +
mov ecx edi +
call ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z  +
push dword ptr [ebp-14h]  +
mov ecx edi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
lea ecx [ebp-24h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea ecx [ebp-1Ch] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 0 +
mov [ebp-1Ch] ebx +
call sub_1007D75  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-24h] +
mov dword ptr [ebp-24h] offset off_1002184 +
call sub_1007D75  +
xor eax eax +
inc eax  +
call __EH_epilog3  +
retn   +
***
xor ds:byte_1027741[eax] bh +
call __EH_prolog3  +
mov esi ecx +
xor ebx ebx +
mov [ebp-18h] ebx +
mov dword ptr [ebp-1Ch] offset off_10021B4 +
lea ecx [ebp-3Ch] +
mov [ebp-4] ebx +
call ??0CDC@@QAE@XZ  +
mov ecx dword_102DF60 +
mov eax [esi+218h] +
mov edi [esi+2B0h] +
sub eax ecx +
cdq   +
idiv  edi +
mov byte ptr [ebp-4] 1 +
mov [ebp-10h] eax +
mov eax [esi+214h] +
cdq   +
idiv  edi +
push dword ptr [ebp-10h]  +
mov [ebp-14h] eax +
mov eax [esi+210h] +
sub eax ecx +
cdq   +
idiv  edi +
push dword ptr [ebp-14h]  +
mov ecx eax +
mov eax [esi+20Ch] +
cdq   +
idiv  edi +
push ecx  +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
call ds:SetRect  +
lea edi [esi+0F8h] +
push edi  +
lea ecx [ebp-3Ch] +
call sub_100B853  +
mov eax [ebp-20h] +
sub eax [ebp-28h] +
lea ecx [ebp-1Ch] +
push eax  +
mov eax [ebp-24h] +
sub eax [ebp-2Ch] +
push eax  +
push edi  +
call sub_100B7D4  +
lea eax [ebp-1Ch] +
push eax  +
lea ecx [ebp-3Ch] +
call sub_100B87E  +
mov ecx [ebp-24h] +
sub ecx [ebp-2Ch] +
mov edi eax +
mov eax [ebp-20h] +
sub eax [ebp-28h] +
push 0FF0062h  +
push eax  +
push ecx  +
push ebx  +
push ebx  +
push dword ptr [ebp-38h]  +
call ds:PatBlt  +
lea eax [esi+1FCh] +
mov ecx [eax+0Ch] +
sub ecx [eax+4] +
push 0CC0020h  +
push ecx  +
mov ecx [eax+8] +
sub ecx [eax] +
push ecx  +
push dword ptr [esi+200h]  +
push dword ptr [eax]  +
lea eax [esi+0E8h] +
push eax  +
mov eax [ebp-20h] +
sub eax [ebp-28h] +
push eax  +
mov eax [ebp-24h] +
sub eax [ebp-2Ch] +
push eax  +
push ebx  +
push ebx  +
lea ecx [ebp-3Ch] +
call sub_100BAA0  +
push dword ptr [esi+20h]  +
call ds:OpenClipboard  +
test eax eax +
jnz loc_100D70F  +
push edi  +
lea ecx [ebp-3Ch] +
call sub_100B87E  +
lea ecx [ebp-1Ch] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea ecx [ebp-3Ch] +
call ?DeleteDC@CDC@@QAEHXZ  +
lea ecx [ebp-3Ch] +
mov [ebp-4] bl +
call ??1CDC@@UAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
mov dword ptr [ebp-1Ch] offset off_10021B4 +
call sub_1007D75  +
xor eax eax +
call __EH_epilog3  +
retn   +
***
call ds:EmptyClipboard  +
lea ecx [ebp-1Ch] +
call ?Detach@CGdiObject@@QAEPAXXZ  +
push eax  +
push 2  +
call ds:SetClipboardData  +
test eax eax +
jnz loc_100D76D  +
push edi  +
lea ecx [ebp-3Ch] +
call sub_100B87E  +
lea ecx [ebp-1Ch] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea ecx [ebp-3Ch] +
call ?DeleteDC@CDC@@QAEHXZ  +
call ds:CloseClipboard  +
xor esi esi +
lea ecx [ebp-3Ch] +
mov [ebp-4] bl +
call ??1CDC@@UAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
mov dword ptr [ebp-1Ch] offset off_10021B4 +
call sub_1007D75  +
mov eax esi +
jmp loc_100D709  +
***
call ds:CloseClipboard  +
push edi  +
lea ecx [ebp-3Ch] +
call sub_100B87E  +
lea ecx [ebp-1Ch] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea ecx [ebp-3Ch] +
call ?DeleteDC@CDC@@QAEHXZ  +
xor esi esi +
inc esi  +
jmp loc_100D74B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_10021CC +
call sub_1007D75  +
test byte ptr [ebp+8] 1 +
jz loc_100D7B6  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push esi  +
push edi  +
lea eax [ebp-8] +
push eax  +
mov esi ecx +
call ds:GetCursorPos  +
lea eax [ebp-8] +
push eax  +
push dword ptr [esi+20h]  +
call ds:ScreenToClient  +
lea eax [ebp-18h] +
push eax  +
push dword ptr [esi+20h]  +
call ds:GetClientRect  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-28h] +
push eax  +
call ds:CopyRect  +
mov eax dword_102DF60 +
push dword ptr [ebp-4]  +
mov edi ds:PtInRect +
push dword ptr [ebp-8]  +
mov [ebp-0Ch] eax +
mov [ebp-24h] eax +
lea eax [ebp-18h] +
push eax  +
call edi  +
test eax eax +
jnz loc_100D96E  +
cmp [esi+10Ch] eax +
jz loc_100D955  +
cmp [esi+114h] eax +
jnz loc_100D96E  +
push dword ptr [ebp-4]  +
lea eax [ebp-28h] +
push dword ptr [ebp-8]  +
push eax  +
call edi  +
test eax eax +
jz loc_100D955  +
push dword ptr [ebp-4]  +
lea ecx [esi+17Ch] +
push dword ptr [ebp-8]  +
call sub_100B5EE  +
test eax eax +
jnz loc_100D94D  +
push dword ptr [ebp-4]  +
lea ecx [esi+19Ch] +
push dword ptr [ebp-8]  +
call sub_100B5EE  +
test eax eax +
jnz loc_100D94D  +
push dword ptr [ebp-4]  +
lea ecx [esi+18Ch] +
push dword ptr [ebp-8]  +
call sub_100B5EE  +
test eax eax +
jnz loc_100D945  +
push dword ptr [ebp-4]  +
lea ecx [esi+1ACh] +
push dword ptr [ebp-8]  +
call sub_100B5EE  +
test eax eax +
jnz loc_100D945  +
push dword ptr [ebp-4]  +
lea ecx [esi+1BCh] +
push dword ptr [ebp-8]  +
call sub_100B5EE  +
test eax eax +
jnz loc_100D93D  +
push dword ptr [ebp-4]  +
lea ecx [esi+1DCh] +
push dword ptr [ebp-8]  +
call sub_100B5EE  +
test eax eax +
jnz loc_100D93D  +
push dword ptr [ebp-4]  +
lea ecx [esi+1CCh] +
push dword ptr [ebp-8]  +
call sub_100B5EE  +
test eax eax +
jnz loc_100D935  +
push dword ptr [ebp-4]  +
lea ecx [esi+1ECh] +
push dword ptr [ebp-8]  +
call sub_100B5EE  +
test eax eax +
jnz loc_100D935  +
push dword ptr [ebp-4]  +
lea ecx [esi+20Ch] +
push dword ptr [ebp-8]  +
call sub_100B5EE  +
test eax eax +
jz loc_100D926  +
push dword_102DD04  +
jmp loc_100D981  +
mov eax [esi+2ACh] +
push dword_102DD08[eax*4]  +
jmp loc_100D981  +
push dword_102DCF4  +
jmp loc_100D981  +
push dword_102DD00  +
jmp loc_100D981  +
push dword_102DCF8  +
jmp loc_100D981  +
push dword_102DCFC  +
jmp loc_100D981  +
cmp dword ptr [esi+114h] 0 +
jnz loc_100D96E  +
push dword ptr [ebp-4]  +
lea eax [ebp-28h] +
push dword ptr [ebp-8]  +
push eax  +
call edi  +
test eax eax +
jnz loc_100D926  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push 7F00h  +
push 0  +
call ds:LoadCursorW  +
push eax  +
call ds:SetCursor  +
xor eax eax +
pop edi  +
inc eax  +
pop esi  +
leave   +
retn 0Ch  +
***
call __EH_prolog3  +
mov esi ecx +
lea ecx [ebp-10h] +
call ??0CString@@QAE@XZ  +
xor ebx ebx +
mov edi offset off_1001A8C +
mov [ebp-4] ebx +
mov [ebp-20h] ebx +
mov [ebp-24h] edi +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ??0CDC@@QAE@XZ  +
mov byte ptr [ebp-4] 2 +
cmp esi ebx +
jnz loc_100D9D3  +
xor eax eax +
jmp loc_100D9D6  +
mov eax [esi+20h] +
push eax  +
call ds:GetDC  +
push eax  +
lea ecx [ebp-34h] +
call ?Attach@CDC@@QAEHPAUHDC__@@@Z  +
cmp [ebp-30h] ebx +
jz loc_100DAD9  +
lea eax [esi+24Ch] +
push eax  +
lea eax [ebp-44h] +
push eax  +
call ds:CopyRect  +
cmp [esi+2C4h] ebx +
jz loc_100DA0C  +
push 2  +
jmp loc_100DA0E  +
push 3  +
call ds:GetSysColor  +
push eax  +
lea ecx [ebp-24h] +
call sub_1007DF5  +
mov eax dword_102DF60 +
mov [ebp-38h] eax +
lea eax [ebp-24h] +
push eax  +
lea eax [ebp-44h] +
push eax  +
lea ecx [ebp-34h] +
call sub_1007E18  +
lea ecx [ebp-24h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
push 11h  +
lea ecx [ebp-34h] +
call ?SelectStockObject@CDC@@UAEPAVCGdiObject@@H@Z  +
push 1  +
lea ecx [ebp-34h] +
mov [ebp-18h] eax +
call ?SetBkMode@CDC@@QAEHH@Z  +
mov [ebp-1Ch] eax +
cmp [esi+2C4h] ebx +
jz loc_100DA63  +
push 9  +
jmp loc_100DA65  +
push 13h  +
call ds:GetSysColor  +
push eax  +
lea ecx [ebp-34h] +
call ?SetTextColor@CDC@@UAEKK@Z  +
push 0EF37h  +
lea ecx [ebp-10h] +
mov [ebp-14h] eax +
call ?LoadStringW@CString@@QAEHI@Z  +
mov eax [esi+254h] +
mov ecx [ebp-10h] +
push dword ptr [ecx-8]  +
cdq   +
sub eax edx +
push ecx  +
sar eax 1 +
sub eax 1Eh +
push 1  +
push eax  +
mov eax [ebp-34h] +
lea ecx [ebp-34h] +
call dword ptr [eax+64h]  +
push dword ptr [ebp-18h]  +
lea ecx [ebp-34h] +
call ?SelectObject@CDC@@UAEPAVCFont@@PAV2@@Z  +
push dword ptr [ebp-14h]  +
lea ecx [ebp-34h] +
call ?SetTextColor@CDC@@UAEKK@Z  +
push dword ptr [ebp-1Ch]  +
lea ecx [ebp-34h] +
call ?SetBkMode@CDC@@QAEHH@Z  +
mov esi [esi+20h] +
lea ecx [ebp-34h] +
call ?Detach@CDC@@QAEPAUHDC__@@XZ  +
push eax  +
push esi  +
call ds:ReleaseDC  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ??1CDC@@UAE@XZ  +
lea ecx [ebp-24h] +
mov [ebp-4] bl +
mov [ebp-24h] edi +
call sub_1007D75  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call ??1CString@@QAE@XZ  +
call __EH_epilog3  +
retn   +
***
aad  0FFh +
inc dword ptr [ebx-720003B3h]  +
dec ebp  +
fmul  qword ptr [ecx-7417238Bh] +
mov eax ds:0C033FFFFh +
call __EH_epilog3  +
retn 4  +
***
adc eax offset free +
or dword ptr [ebp-4] 0FFFFFFFFh +
pop ecx  +
lea ecx [ebp-24h] +
mov [ebp-24h] esi +
call sub_1007D75  +
xor eax eax +
inc eax  +
jmp loc_100DBEC  +
***
call __EH_prolog3  +
mov esi ecx +
lea ecx [ebp-38h] +
call ??0CDC@@QAE@XZ  +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-14h] 0 +
mov edi offset off_10021B4 +
mov [ebp-18h] edi +
push esi  +
lea ecx [ebp-4Ch] +
mov byte ptr [ebp-4] 1 +
call ??0CClientDC@@QAE@PAVCWnd@@@Z  +
lea eax [ebp-4Ch] +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 2 +
call sub_100B853  +
test eax eax +
jnz loc_100DD74  +
lea ecx [ebp-4Ch] +
mov byte ptr [ebp-4] 1 +
call ??1CClientDC@@UAE@XZ  +
lea ecx [ebp-18h] +
mov byte ptr [ebp-4] 0 +
mov [ebp-18h] edi +
call sub_1007D75  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-38h] +
call ??1CDC@@UAE@XZ  +
xor eax eax +
call __EH_epilog3  +
retn   +
lea eax [esi+24Ch] +
mov ecx [eax+0Ch] +
sub ecx [eax+4] +
mov edx [eax+8] +
sub edx [eax] +
push ecx  +
push edx  +
lea eax [ebp-38h] +
push eax  +
lea ecx [ebp-18h] +
call sub_100B7D4  +
test eax eax +
jnz loc_100DDC4  +
xor esi esi +
lea ecx [ebp-4Ch] +
mov byte ptr [ebp-4] 1 +
call ??1CClientDC@@UAE@XZ  +
lea ecx [ebp-18h] +
mov byte ptr [ebp-4] 0 +
mov [ebp-18h] edi +
call sub_1007D75  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-38h] +
call ??1CDC@@UAE@XZ  +
mov eax esi +
jmp loc_100DD6E  +
lea eax [ebp-18h] +
push eax  +
lea ecx [ebp-38h] +
call sub_100B87E  +
mov [ebp-10h] eax +
lea eax [esi+20Ch] +
push eax  +
lea eax [ebp-28h] +
push eax  +
call ds:CopyRect  +
mov ecx [ebp-20h] +
cmp [esi+254h] ecx +
jge loc_100DDF3  +
dec ecx  +
mov [ebp-20h] ecx +
mov eax [ebp-1Ch] +
cmp [esi+258h] eax +
jge loc_100DE02  +
dec eax  +
mov [ebp-1Ch] eax +
mov edx [esi+208h] +
sub edx [esi+200h] +
sub eax [ebp-24h] +
sub ecx [ebp-28h] +
mov edi 0CC0020h +
push edi  +
push edx  +
mov edx [esi+204h] +
sub edx [esi+1FCh] +
lea ebx [esi+0E8h] +
push edx  +
push dword ptr [esi+200h]  +
push dword ptr [esi+1FCh]  +
push ebx  +
push eax  +
push ecx  +
push dword ptr [ebp-24h]  +
lea ecx [ebp-38h] +
push dword ptr [ebp-28h]  +
call sub_100BAA0  +
mov ecx esi +
call sub_100C177  +
mov eax [ebp-1Ch] +
sub eax [ebp-24h] +
push edi  +
push eax  +
mov eax [ebp-20h] +
sub eax [ebp-28h] +
mov ecx ebx +
push eax  +
push dword ptr [ebp-24h]  +
lea eax [ebp-38h] +
push dword ptr [ebp-28h]  +
push eax  +
mov eax [esi+208h] +
sub eax [esi+200h] +
push eax  +
mov eax [esi+204h] +
sub eax [esi+1FCh] +
push eax  +
push dword ptr [esi+200h]  +
push dword ptr [esi+1FCh]  +
call sub_100BAA0  +
push dword ptr [ebp-10h]  +
lea ecx [ebp-38h] +
call sub_100B87E  +
lea ecx [ebp-18h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea ecx [ebp-38h] +
call ?DeleteDC@CDC@@QAEHXZ  +
xor esi esi +
inc esi  +
mov edi offset off_10021B4 +
jmp loc_100DD99  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi ecx +
mov ecx dword_102DF60 +
mov eax [esi+218h] +
sub eax ecx +
inc eax  +
cdq   +
push edi  +
mov edi [esi+2B0h] +
idiv  edi +
push eax  +
mov eax [esi+214h] +
inc eax  +
cdq   +
idiv  edi +
push eax  +
mov eax [esi+210h] +
sub eax ecx +
inc eax  +
cdq   +
idiv  edi +
push eax  +
mov eax [esi+20Ch] +
inc eax  +
cdq   +
idiv  edi +
push eax  +
lea eax [ebp+rc] +
push eax  +
call ds:SetRect  +
lea eax [esi+1FCh] +
mov ecx [eax+0Ch] +
sub ecx [eax+4] +
push 8800C6h  +
push ecx  +
mov ecx [eax+8] +
sub ecx [eax] +
push ecx  +
push dword ptr [esi+200h]  +
lea ecx [esi+0F8h] +
push dword ptr [eax]  +
lea eax [esi+0E8h] +
push eax  +
mov eax [ebp-4] +
sub eax [ebp-0Ch] +
push eax  +
mov eax [ebp-8] +
sub eax [ebp+rc] +
push eax  +
push dword ptr [ebp-0Ch]  +
push [ebp+rc]  +
call sub_100BAA0  +
mov ecx esi +
call sub_100C1BB  +
push 0  +
lea eax [esi+22Ch] +
push eax  +
push dword ptr [esi+20h]  +
call ds:InvalidateRect  +
push dword ptr [esi+20h]  +
call ds:UpdateWindow  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
lea edi [esi+174h] +
push edi  +
lea ebx [esi+164h] +
push ebx  +
call sub_101C8B6  +
mov edx [esi+2B0h] +
mov ecx [esi+178h] +
mov eax dword_102DF60 +
add ecx edx +
lea ecx [ecx+eax+1] +
push ecx  +
mov ecx [edi] +
lea ecx [edx+ecx+1] +
push ecx  +
mov ecx [esi+168h] +
add ecx eax +
push ecx  +
push dword ptr [ebx]  +
lea ecx [esi+20Ch] +
call sub_100B609  +
lea eax [esi+20Ch] +
push eax  +
add esi 21Ch +
push esi  +
call ds:CopyRect  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
push esi  +
mov esi ecx +
mov ecx [esi+2B0h] +
mov eax [esi+164h] +
cdq   +
idiv  ecx +
push edi  +
lea edi [esi+0F8h] +
mov [ebp+xLeft] eax +
mov eax [esi+168h] +
cdq   +
idiv  ecx +
mov [ebp+yTop] eax +
mov eax [esi+174h] +
cdq   +
idiv  ecx +
mov ebx eax +
mov eax [esi+178h] +
cdq   +
idiv  ecx +
cmp dword ptr [esi+118h] 1 +
mov ecx edi +
mov [ebp+var_14] eax +
mov eax [edi] +
jnz loc_100E04D  +
push 7  +
jmp loc_100E04F  +
push 6  +
call dword ptr [eax+2Ch]  +
mov [ebp+var_8] eax +
mov eax [esi+2ACh] +
cmp eax 3 +
jz loc_100E07A  +
cmp eax 5 +
jz loc_100E07A  +
cmp dword ptr [esi+118h] 1 +
mov eax [edi] +
mov ecx edi +
jnz loc_100E076  +
push 4  +
jmp loc_100E080  +
push 0  +
jmp loc_100E080  +
mov eax [edi] +
push 5  +
mov ecx edi +
call dword ptr [eax+2Ch]  +
mov [ebp+var_4] eax +
mov eax [ebp+var_14] +
inc eax  +
push eax  +
lea eax [ebx+1] +
push eax  +
push [ebp+yTop]  +
lea eax [ebp+rc] +
push [ebp+xLeft]  +
push eax  +
call ds:SetRect  +
mov eax [esi+2ACh] +
cmp eax 5 +
jz loc_100E106  +
cmp eax 6 +
jz loc_100E106  +
cmp eax 3 +
jz loc_100E0F9  +
cmp eax 4 +
jz loc_100E0F9  +
push [ebp+yTop]  +
lea eax [ebp+xLeft] +
push [ebp+xLeft]  +
mov ecx edi +
push eax  +
call sub_100B8D0  +
push [ebp+var_14]  +
mov ecx edi +
push ebx  +
call ?LineTo@CDC@@QAEHHH@Z  +
cmp dword ptr [esi+2ACh] 0Ah +
mov ecx esi +
jnz loc_100E0F5  +
push 1  +
push dword ptr [esi+178h]  +
push dword ptr [esi+174h]  +
call sub_100C262  +
jmp loc_100E111  +
push 0  +
jmp loc_100E0E2  +
lea eax [ebp+rc] +
push eax  +
mov ecx edi +
call sub_100BA1E  +
jmp loc_100E111  +
lea eax [ebp+rc] +
push eax  +
mov ecx edi +
call sub_100B9F9  +
push [ebp+var_8]  +
mov ecx edi +
call ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z  +
push [ebp+var_4]  +
mov ecx edi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100C231  +
test byte ptr [ebp+8] 1 +
jz loc_100E149  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push dword ptr [esi+20h]  +
call ds:SetCapture  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
mov eax [ebp+arg_0] +
xor ecx ecx +
mov [esi+118h] eax +
mov eax [esi+2ACh] +
inc ecx  +
mov [esi+114h] ecx +
cmp eax ecx +
jz loc_100E1A1  +
push 2  +
pop edx  +
cmp eax edx +
jz loc_100E1A1  +
cmp eax 8 +
jz loc_100E199  +
cmp eax 0Ah +
jnz loc_100E1A7  +
mov [esi+128h] edx +
jmp loc_100E1A7  +
mov [esi+128h] ecx +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
push esi  +
lea ecx [ebp-54h] +
call ??0CClientDC@@QAE@PAVCWnd@@@Z  +
and dword ptr [ebp-4] 0 +
push 7  +
lea ecx [ebp-54h] +
call ?SelectStockObject@CDC@@UAEPAVCGdiObject@@H@Z  +
push 5  +
lea ecx [ebp-54h] +
mov [ebp-10h] eax +
call ?SelectStockObject@CDC@@UAEPAVCGdiObject@@H@Z  +
push 0Ah  +
lea ecx [ebp-54h] +
mov [ebp-14h] eax +
call ?SetROP2@CDC@@QAEHH@Z  +
cmp dword ptr [ebp+8] 0 +
mov [ebp-18h] eax +
jnz loc_100E2B6  +
mov eax [esi+164h] +
mov ebx [esi+168h] +
mov edi [esi+170h] +
mov ecx [esi+16Ch] +
mov [ebp-20h] eax +
mov eax dword_102DF60 +
add ebx eax +
add edi eax +
cmp dword ptr [esi+2ACh] 2 +
mov [ebp-1Ch] ebx +
mov [ebp-28h] ecx +
mov [ebp-24h] edi +
jz loc_100E248  +
lea eax [ebp-28h] +
push eax  +
lea eax [ebp-20h] +
push eax  +
mov ecx esi +
call sub_101C8B6  +
mov ebx [ebp-1Ch] +
mov edi [ebp-24h] +
mov eax [esi+2B0h] +
mov edx [ebp-28h] +
lea ecx [eax+edi+1] +
push ecx  +
lea eax [eax+edx+1] +
push eax  +
push ebx  +
push dword ptr [ebp-20h]  +
lea eax [ebp-40h] +
push eax  +
call ds:SetRect  +
mov eax [esi+2ACh] +
cmp eax 2 +
jnz loc_100E292  +
push ebx  +
push dword ptr [ebp-20h]  +
lea eax [ebp-30h] +
push eax  +
lea ecx [ebp-54h] +
call ?MoveTo@CDC@@QAE?AVCPoint@@HH@Z  +
push edi  +
push dword ptr [ebp-28h]  +
lea ecx [ebp-54h] +
call ?LineTo@CDC@@QAEHHH@Z  +
jmp loc_100E2B6  +
cmp eax 5 +
jz loc_100E2AA  +
cmp eax 6 +
jz loc_100E2AA  +
lea eax [ebp-40h] +
push eax  +
lea ecx [ebp-54h] +
call sub_100BA1E  +
jmp loc_100E2B6  +
lea eax [ebp-40h] +
push eax  +
lea ecx [ebp-54h] +
call sub_100B9F9  +
mov eax [esi+164h] +
mov ecx [esi+168h] +
mov edi [esi+178h] +
mov ebx [esi+174h] +
mov [ebp-20h] eax +
mov eax dword_102DF60 +
add edi eax +
add ecx eax +
cmp dword ptr [esi+2ACh] 2 +
mov [ebp-1Ch] ecx +
mov [ebp-28h] ebx +
mov [ebp-24h] edi +
mov [esi+16Ch] ebx +
mov [esi+170h] edi +
jz loc_100E310  +
lea eax [ebp-28h] +
push eax  +
lea eax [ebp-20h] +
push eax  +
mov ecx esi +
call sub_101C8B6  +
mov edi [ebp-24h] +
mov ebx [ebp-28h] +
mov ecx [ebp-1Ch] +
mov eax [esi+2B0h] +
lea edx [eax+edi+1] +
push edx  +
lea eax [eax+ebx+1] +
push eax  +
push ecx  +
push dword ptr [ebp-20h]  +
lea eax [ebp-40h] +
push eax  +
call ds:SetRect  +
mov esi [esi+2ACh] +
cmp esi 2 +
jnz loc_100E357  +
push dword ptr [ebp-1Ch]  +
lea eax [ebp-30h] +
push dword ptr [ebp-20h]  +
lea ecx [ebp-54h] +
push eax  +
call ?MoveTo@CDC@@QAE?AVCPoint@@HH@Z  +
push edi  +
push ebx  +
lea ecx [ebp-54h] +
call ?LineTo@CDC@@QAEHHH@Z  +
jmp loc_100E37B  +
cmp esi 5 +
jz loc_100E36F  +
cmp esi 6 +
jz loc_100E36F  +
lea eax [ebp-40h] +
push eax  +
lea ecx [ebp-54h] +
call sub_100BA1E  +
jmp loc_100E37B  +
lea eax [ebp-40h] +
push eax  +
lea ecx [ebp-54h] +
call sub_100B9F9  +
push dword ptr [ebp-10h]  +
lea ecx [ebp-54h] +
call ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z  +
push dword ptr [ebp-14h]  +
lea ecx [ebp-54h] +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
push dword ptr [ebp-18h]  +
lea ecx [ebp-54h] +
call ?SetROP2@CDC@@QAEHH@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-54h] +
call ??1CClientDC@@UAE@XZ  +
call __EH_epilog3  +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
lea ecx [ebp-24h] +
call ??0CDC@@QAE@XZ  +
xor ebx ebx +
mov [ebp-4] ebx +
cmp [esi+110h] ebx +
jnz loc_100E3E7  +
mov ecx esi +
call sub_100D415  +
test eax eax +
jz loc_100E501  +
lea edi [esi+0F8h] +
push edi  +
lea ecx [ebp-24h] +
call sub_100B853  +
lea eax [esi+0C8h] +
push eax  +
lea ecx [ebp-24h] +
call sub_100B87E  +
mov [ebp-14h] eax +
cmp edi ebx +
jnz loc_100E410  +
xor edi edi +
jmp loc_100E413  +
mov edi [edi+4] +
push 0CC0020h  +
push ebx  +
push ebx  +
push edi  +
push dword_102DF58  +
push dword_102DF5C  +
push ebx  +
push ebx  +
push dword ptr [ebp-20h]  +
call ds:BitBlt  +
cmp [esi+10Ch] ebx +
jz loc_100E4E4  +
mov eax [esi+2ACh] +
cmp eax 7 +
jz loc_100E452  +
cmp eax 9 +
jnz loc_100E4E4  +
mov ecx dword_102DF60 +
mov eax [esi+218h] +
mov edi [esi+2B0h] +
sub eax ecx +
inc eax  +
cdq   +
idiv  edi +
mov ebx eax +
mov eax [esi+214h] +
inc eax  +
cdq   +
idiv  edi +
push ebx  +
mov [ebp-10h] eax +
mov eax [esi+210h] +
sub eax ecx +
inc eax  +
cdq   +
idiv  edi +
push dword ptr [ebp-10h]  +
mov ecx eax +
mov eax [esi+20Ch] +
inc eax  +
cdq   +
idiv  edi +
push ecx  +
push eax  +
lea eax [ebp-34h] +
push eax  +
call ds:SetRect  +
lea eax [esi+1FCh] +
mov ecx [eax+0Ch] +
sub ecx [eax+4] +
push 8800C6h  +
push ecx  +
mov ecx [eax+8] +
sub ecx [eax] +
push ecx  +
push dword ptr [esi+200h]  +
lea ecx [ebp-24h] +
push dword ptr [eax]  +
lea eax [esi+0E8h] +
push eax  +
mov eax [ebp-28h] +
sub eax [ebp-30h] +
push eax  +
mov eax [ebp-2Ch] +
sub eax [ebp-34h] +
push eax  +
push dword ptr [ebp-30h]  +
push dword ptr [ebp-34h]  +
call sub_100BAA0  +
push dword ptr [ebp-14h]  +
lea ecx [ebp-24h] +
call sub_100B87E  +
lea ecx [ebp-24h] +
call ?DeleteDC@CDC@@QAEHXZ  +
mov dword ptr [esi+110h] 1 +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-24h] +
call ??1CDC@@UAE@XZ  +
call __EH_epilog3  +
retn   +
***
add [ebx+2DF5C1Dh] cl +
add [ebx] ebp +
fisttp  word ptr [ecx-34174E8h] +
add [eax] eax +
add [ebx] al +
cli   +
mov [esi+204h] edi +
mov edi [esi+20Ch] +
mov eax ebx +
add eax ecx +
mov [esi+208h] eax +
mov eax [esi+210h] +
sub eax dword_102DF60 +
mov ebx [esi+2B0h] +
mov [ebp-20h] eax +
mov eax [esi+214h] +
sub eax [esi+20Ch] +
mov [ebp-18h] eax +
mov eax [esi+218h] +
sub eax [esi+210h] +
mov [ebp-14h] eax +
mov eax [esi+214h] +
sub eax edi +
cdq   +
sub eax edx +
sar eax 1 +
cdq   +
idiv  ebx +
mov ecx eax +
mov eax [esi+218h] +
imul ecx ebx +
sub eax [esi+210h] +
add ecx edi +
cdq   +
sub eax edx +
sar eax 1 +
cdq   +
idiv  ebx +
mov edi eax +
mov eax [esi+218h] +
imul edi ebx +
sub eax [esi+210h] +
add edi [ebp-20h] +
cdq   +
sub eax edx +
sar eax 1 +
neg eax  +
cdq   +
idiv  ebx +
imul eax ebx +
add ecx eax +
mov eax [esi+214h] +
sub eax [esi+20Ch] +
cdq   +
sub eax edx +
sar eax 1 +
neg eax  +
cdq   +
idiv  ebx +
imul eax ebx +
add edi eax +
test ecx ecx +
jge loc_100E762  +
and dword ptr [esi+20Ch] 0 +
jmp loc_100E78C  +
mov edx [ebp-14h] +
mov eax [esi+20Ch] +
add eax edx +
mov edx [esi+254h] +
cmp eax edx +
jle loc_100E786  +
mov eax ecx +
sub eax edx +
add eax [ebp-14h] +
cdq   +
idiv  ebx +
imul eax ebx +
sub ecx eax +
mov [esi+20Ch] ecx +
test edi edi +
jge loc_100E797  +
mov eax dword_102DF60 +
jmp loc_100E7B3  +
mov eax [esi+210h] +
mov ecx [ebp-18h] +
mov edx [esi+258h] +
add ecx eax +
cmp ecx edx +
jg loc_100E7BB  +
mov eax dword_102DF60 +
add eax edi +
mov [esi+210h] eax +
jmp loc_100E7DA  +
mov ecx dword_102DF60 +
mov eax ecx +
sub eax edx +
add eax edi +
add eax [ebp-18h] +
cdq   +
idiv  ebx +
imul eax ebx +
sub ecx eax +
add ecx edi +
mov [esi+210h] ecx +
mov eax [esi+20Ch] +
add eax [ebp-14h] +
mov [esi+214h] eax +
mov eax [esi+210h] +
add eax [ebp-18h] +
mov ebx [ebp-1Ch] +
push ebx  +
push dword ptr [ebp+8]  +
lea ecx [esi+0D0h] +
mov [esi+218h] eax +
call sub_100B79A  +
push dword ptr [ebp-10h]  +
push dword ptr [ebp+8]  +
push dword ptr [ebp-2Ch]  +
call ds:SetBitmapBits  +
jmp loc_100EC80  +
cmp [esi+10Ch] edi +
jnz loc_100E854  +
mov eax dword_102DF58 +
mov ecx dword_102DF5C +
push 0CC0020h  +
push eax  +
push ecx  +
push edi  +
push edi  +
lea edx [esi+0E8h] +
push edx  +
mov edx ecx +
neg edx  +
push edx  +
mov edx eax +
neg edx  +
push edx  +
dec eax  +
push eax  +
dec ecx  +
push ecx  +
jmp loc_100EC0C  +
push edi  +
lea ecx [ebp-28h] +
call sub_100B666  +
lea eax [ebp-28h] +
push eax  +
lea edi [esi+1FCh] +
lea ecx [esi+0E8h] +
push edi  +
call sub_1007E18  +
lea ecx [ebp-28h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
mov eax [edi+0Ch] +
sub eax [edi+4] +
push 0CC0020h  +
push eax  +
mov eax [edi+8] +
sub eax [edi] +
push eax  +
push dword ptr [esi+200h]  +
lea eax [ebp-40h] +
push dword ptr [edi]  +
push eax  +
mov eax [edi+4] +
sub eax [edi+0Ch] +
push eax  +
mov eax [edi] +
sub eax [edi+8] +
push eax  +
mov eax [esi+208h] +
dec eax  +
jmp loc_100EC6C  +
lea eax [ebp+8] +
push eax  +
push dword_102DF5C  +
call sub_100B348  +
test eax eax +
jl loc_100ECE9  +
lea eax [ebp-20h] +
push eax  +
push dword_102DF58  +
call sub_100B348  +
test eax eax +
jl loc_100ECE9  +
lea eax [ebp+8] +
push eax  +
push 0Fh  +
push dword ptr [ebp+8]  +
call sub_100B371  +
test eax eax +
jl loc_100ECE9  +
mov eax [ebp+8] +
shr eax 3 +
mul  dword ptr [ebp-20h] +
lea ecx [ebp+8] +
push ecx  +
push edx  +
push eax  +
call sub_1011467  +
test eax eax +
jl loc_100ECE9  +
push dword ptr [ebp+8]  +
call ds:malloc  +
push dword ptr [ebp+8]  +
mov ebx eax +
mov [ebp-1Ch] ebx +
call ds:malloc  +
pop ecx  +
pop ecx  +
mov [ebp-10h] eax +
cmp ebx edi +
jz loc_100ECDA  +
cmp eax edi +
jz loc_100ECCA  +
push ebx  +
push dword ptr [ebp+8]  +
cmp [esi+10Ch] edi +
jnz loc_100E9A2  +
lea ecx [esi+0D8h] +
call sub_100B7B7  +
push dword ptr [ebp-10h]  +
lea ecx [esi+0D0h] +
push dword ptr [ebp+8]  +
call sub_100B7B7  +
push dword_102DF58  +
mov ecx esi +
push dword_102DF5C  +
push dword ptr [ebp-10h]  +
push ebx  +
call sub_100CEDC  +
push ebx  +
push dword ptr [ebp+8]  +
lea ecx [esi+0D8h] +
call sub_100B79A  +
push dword ptr [ebp-10h]  +
lea ecx [esi+0D0h] +
push dword ptr [ebp+8]  +
call sub_100B79A  +
jmp loc_100EC82  +
lea ecx [esi+0D0h] +
call sub_100B7B7  +
push dword ptr [ebp-10h]  +
push dword ptr [ebp+8]  +
push dword ptr [ebp-2Ch]  +
call ds:GetBitmapBits  +
push dword_102DF58  +
mov ecx esi +
push dword_102DF5C  +
push dword ptr [ebp-10h]  +
push ebx  +
call sub_100CEDC  +
mov edi [esi+208h] +
mov ebx dword_102DF58 +
mov edx [esi+1FCh] +
mov eax [esi+204h] +
sub eax edx +
add eax edx +
sub ebx edi +
mov ecx edi +
sub ecx [esi+200h] +
mov [esi+208h] eax +
mov [esi+200h] edx +
mov [esi+1FCh] ebx +
mov edi ebx +
mov ebx [esi+2B0h] +
add edi ecx +
mov ecx [esi+20Ch] +
mov [esi+204h] edi +
mov eax [esi+214h] +
sub eax ecx +
mov [ebp-14h] eax +
mov eax [esi+218h] +
sub eax [esi+210h] +
mov [ebp-18h] eax +
mov eax [esi+214h] +
sub eax ecx +
cdq   +
sub eax edx +
sar eax 1 +
cdq   +
idiv  ebx +
mov edi eax +
mov eax [esi+218h] +
imul edi ebx +
sub eax [esi+210h] +
add edi ecx +
cdq   +
sub eax edx +
sar eax 1 +
cdq   +
idiv  ebx +
mov ecx eax +
mov eax [esi+218h] +
imul ecx ebx +
sub eax [esi+210h] +
sub ecx dword_102DF60 +
cdq   +
sub eax edx +
sar eax 1 +
neg eax  +
cdq   +
idiv  ebx +
add ecx [esi+210h] +
imul eax ebx +
add edi eax +
mov eax [esi+214h] +
sub eax [esi+20Ch] +
cdq   +
sub eax edx +
sar eax 1 +
neg eax  +
cdq   +
idiv  ebx +
imul eax ebx +
add ecx eax +
test edi edi +
jge loc_100EABA  +
and dword ptr [esi+20Ch] 0 +
jmp loc_100EAE4  +
mov edx [ebp-18h] +
mov eax [esi+20Ch] +
add eax edx +
mov edx [esi+254h] +
cmp eax edx +
jle loc_100EADE  +
mov eax edi +
sub eax edx +
add eax [ebp-18h] +
cdq   +
idiv  ebx +
imul eax ebx +
sub edi eax +
mov [esi+20Ch] edi +
test ecx ecx +
jge loc_100EAEF  +
mov eax dword_102DF60 +
jmp loc_100EB0B  +
mov eax [esi+210h] +
mov edi [ebp-14h] +
mov edx [esi+258h] +
add eax edi +
cmp eax edx +
jg loc_100EB13  +
mov eax dword_102DF60 +
add eax ecx +
mov [esi+210h] eax +
jmp loc_100EB32  +
mov edi dword_102DF60 +
mov eax edi +
sub eax edx +
add eax ecx +
add eax [ebp-14h] +
cdq   +
idiv  ebx +
imul eax ebx +
sub edi eax +
add edi ecx +
mov [esi+210h] edi +
mov eax [esi+20Ch] +
add eax [ebp-18h] +
mov [esi+214h] eax +
mov eax [esi+210h] +
add eax [ebp-14h] +
jmp loc_100E7F2  +
***
cmp [esi+10Ch] edi +
jnz loc_100EB80  +
mov eax dword_102DF58 +
mov ecx dword_102DF5C +
push 0CC0020h  +
push eax  +
push ecx  +
push edi  +
push edi  +
lea edx [esi+0E8h] +
push edx  +
mov edx eax +
neg edx  +
push edx  +
push ecx  +
dec eax  +
push eax  +
push edi  +
jmp loc_100EC0C  +
push edi  +
lea ecx [ebp-28h] +
call sub_100B666  +
lea eax [ebp-28h] +
push eax  +
lea edi [esi+1FCh] +
lea ecx [esi+0E8h] +
push edi  +
call sub_1007E18  +
lea ecx [ebp-28h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
mov ecx [edi+0Ch] +
sub ecx [edi+4] +
mov eax [edi] +
push 0CC0020h  +
push ecx  +
mov ecx [edi+8] +
sub ecx eax +
push ecx  +
push dword ptr [esi+200h]  +
lea ecx [ebp-40h] +
push eax  +
push ecx  +
mov ecx [edi+4] +
sub ecx [edi+0Ch] +
push ecx  +
mov ecx [edi+8] +
sub ecx eax +
push ecx  +
mov ecx [esi+208h] +
dec ecx  +
push ecx  +
jmp loc_100EC74  +
cmp [esi+10Ch] edi +
jnz loc_100EC19  +
mov ecx dword_102DF58 +
mov eax dword_102DF5C +
push 0CC0020h  +
push ecx  +
push eax  +
push edi  +
push edi  +
lea edx [esi+0E8h] +
push edx  +
push ecx  +
mov ecx eax +
neg ecx  +
push ecx  +
push edi  +
dec eax  +
push eax  +
lea ecx [esi+0F8h] +
call sub_100BAA0  +
jmp loc_100EC82  +
push edi  +
lea ecx [ebp-28h] +
call sub_100B666  +
lea eax [ebp-28h] +
push eax  +
lea edi [esi+1FCh] +
lea ecx [esi+0E8h] +
push edi  +
call sub_1007E18  +
lea ecx [ebp-28h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
mov ecx [edi+0Ch] +
sub ecx [edi+4] +
mov eax [esi+200h] +
push 0CC0020h  +
push ecx  +
mov ecx [edi+8] +
sub ecx [edi] +
push ecx  +
push eax  +
push dword ptr [edi]  +
lea ecx [ebp-40h] +
push ecx  +
mov ecx [edi+0Ch] +
sub ecx [edi+4] +
push ecx  +
mov ecx [edi] +
sub ecx [edi+8] +
push ecx  +
push eax  +
mov eax [esi+204h] +
dec eax  +
push eax  +
lea ecx [esi+0E8h] +
call sub_100BAA0  +
xor edi edi +
cmp [esi+10Ch] edi +
jz loc_100ECB2  +
lea ecx [ebp-30h] +
call ?Detach@CGdiObject@@QAEPAXXZ  +
test eax eax +
jz loc_100EC9E  +
lea ecx [ebp-30h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea ecx [ebp-40h] +
call ?Detach@CDC@@QAEPAUHDC__@@XZ  +
test eax eax +
jz loc_100ECB2  +
lea ecx [ebp-40h] +
call ?DeleteDC@CDC@@QAEHXZ  +
push edi  +
push edi  +
push dword ptr [esi+20h]  +
call ds:InvalidateRect  +
push dword ptr [esi+20h]  +
call ds:UpdateWindow  +
jmp loc_100ECCA  +
xor edi edi +
cmp ebx edi +
jz loc_100ECDA  +
push ebx  +
call ds:free  +
pop ecx  +
jmp loc_100ECDA  +
xor edi edi +
cmp [ebp-10h] edi +
jz loc_100ECE9  +
push dword ptr [ebp-10h]  +
call ds:free  +
pop ecx  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 1 +
mov dword ptr [ebp-28h] offset off_1001A8C +
call sub_1007D75  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 0 +
mov dword ptr [ebp-30h] offset off_10021B4 +
call sub_1007D75  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-40h] +
call ??1CDC@@UAE@XZ  +
call __EH_epilog3  +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1002204 +
mov eax [esi+4] +
and dword ptr [ebp-4] 0 +
test eax eax +
jz loc_100ED51  +
push eax  +
call ??_V@YAXPAX@Z  +
pop ecx  +
mov dword ptr [esi] offset off_1001A5C +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100ED28  +
test byte ptr [ebp+8] 1 +
jz loc_100ED7C  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
test edi edi +
jge loc_100ED9D  +
call MFC42u_6928  +
mov eax [ebp+arg_4] +
test eax eax +
jl loc_100EDA7  +
mov [esi+10h] eax +
test edi edi +
jnz loc_100EDC9  +
mov eax [esi+4] +
test eax eax +
jz loc_100EDBC  +
push eax  +
call ??_V@YAXPAX@Z  +
and [esi+4] edi +
pop ecx  +
and dword ptr [esi+0Ch] 0 +
and dword ptr [esi+8] 0 +
jmp loc_100EEBB  +
mov edx [esi+4] +
push ebx  +
test edx edx +
jnz loc_100EDFB  +
cmp edi 1FFFFFFFh +
ja loc_100ED98  +
mov ebx edi +
shl ebx 3 +
push ebx  +
call ??_U@YAPAXI@Z  +
push ebx  +
push 0  +
push eax  +
mov [esi+4] eax +
call memset  +
add esp 10h +
mov [esi+0Ch] edi +
jmp loc_100EEB7  +
mov ebx [esi+0Ch] +
cmp edi ebx +
jg loc_100EE28  +
mov ecx [esi+8] +
cmp edi ecx +
jle loc_100EEB7  +
mov eax edi +
sub eax ecx +
shl eax 3 +
push eax  +
lea ecx [edx+ecx*8] +
push 0  +
push ecx  +
call memset  +
add esp 0Ch +
jmp loc_100EEB7  +
mov eax [esi+10h] +
test eax eax +
jnz loc_100EE50  +
mov eax [esi+8] +
cdq   +
and edx 7 +
add eax edx +
sar eax 3 +
cmp eax 4 +
jge loc_100EE45  +
push 4  +
pop eax  +
jmp loc_100EE50  +
mov ecx 400h +
cmp eax ecx +
jle loc_100EE50  +
mov eax ecx +
add eax ebx +
cmp edi eax +
mov [ebp+arg_0] eax +
jl loc_100EE5C  +
mov [ebp+arg_0] edi +
mov eax [ebp+arg_0] +
cmp eax ebx +
jl loc_100ED98  +
cmp eax 1FFFFFFFh +
ja loc_100ED98  +
shl eax 3 +
push eax  +
call ??_U@YAPAXI@Z  +
mov ebx eax +
mov eax [esi+8] +
shl eax 3 +
push eax  +
push dword ptr [esi+4]  +
push ebx  +
call memcpy  +
mov ecx [esi+8] +
mov eax edi +
sub eax ecx +
shl eax 3 +
push eax  +
lea ecx [ebx+ecx*8] +
push 0  +
push ecx  +
call memset  +
push dword ptr [esi+4]  +
call ??_V@YAXPAX@Z  +
mov eax [ebp+arg_0] +
add esp 20h +
mov [esi+4] ebx +
mov [esi+0Ch] eax +
mov [esi+8] edi +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ecx +
test esi esi +
jge loc_100EEDB  +
call MFC42u_6928  +
cmp esi [edi+8] +
jl loc_100EEEB  +
push 0FFFFFFFFh  +
lea eax [esi+1] +
push eax  +
call sub_100ED88  +
mov eax [edi+4] +
mov ecx [ebp+arg_4] +
mov [eax+esi*8] ecx +
mov ecx [ebp+arg_8] +
pop edi  +
mov [eax+esi*8+4] ecx +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+8]  +
mov esi ecx +
call ?OnCreate@CMDIChildWnd@@IAEHPAUtagCREATESTRUCTW@@@Z  +
cmp eax 0FFFFFFFFh +
jz loc_100EF4C  +
push 0  +
push 0  +
push 400000h  +
mov ecx esi +
call ?ModifyStyleEx@CWnd@@QAEHKKI@Z  +
mov ecx esi +
call sub_100D172  +
test eax eax +
jz loc_100EF4C  +
mov ecx esi +
call sub_100B640  +
test eax eax +
jz loc_100EF4C  +
mov ecx esi +
call sub_100D2D4  +
test eax eax +
jnz loc_100EF51  +
or eax 0FFFFFFFFh +
jmp loc_100EF53  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
call ??0CMDIChildWnd@@QAE@XZ  +
xor edi edi +
lea ecx [esi+0C8h] +
mov dword ptr [esi] offset off_100221C +
mov eax offset off_10021B4 +
mov [ebp-4] edi +
mov [ecx+4] edi +
mov [ecx] eax +
lea ecx [esi+0D0h] +
mov [ecx+4] edi +
mov [ecx] eax +
lea ecx [esi+0D8h] +
mov [ecx+4] edi +
mov [ecx] eax +
lea ecx [esi+0E8h] +
mov byte ptr [ebp-4] 3 +
call ??0CDC@@QAE@XZ  +
lea ecx [esi+0F8h] +
mov byte ptr [ebp-4] 4 +
call ??0CDC@@QAE@XZ  +
lea ecx [esi+12Ch] +
call sub_100D060  +
lea ecx [esi+140h] +
call sub_100D060  +
lea eax [esi+154h] +
mov [eax+4] edi +
mov ecx offset off_10021CC +
mov [eax] ecx +
lea eax [esi+15Ch] +
mov [eax] ecx +
mov [eax+4] edi +
xor eax eax +
inc eax  +
xor ecx ecx +
mov [esi+2B8h] eax +
mov [esi+2ACh] eax +
mov [esi+2C4h] eax +
mov [esi+108h] edi +
mov [esi+10Ch] edi +
mov dword ptr [esi+124h] 8 +
mov [esi+118h] edi +
mov [esi+114h] edi +
mov [esi+110h] edi +
mov [esi+2C0h] edi +
mov [esi+2B4h] cx +
mov dword ptr [esi+120h] 3 +
mov eax esi +
call __EH_epilog3  +
retn   +
***
call __EH_prolog3_catch  +
mov esi ecx +
mov [ebp-14h] esi +
mov dword ptr [esi] offset off_100221C +
and dword ptr [ebp-4] 0 +
push dword ptr [esi+0E4h]  +
lea ecx [esi+0F8h] +
mov byte ptr [ebp-4] 0Ah +
call sub_100B87E  +
push dword ptr [esi+0E0h]  +
lea ebx [esi+0E8h] +
mov ecx ebx +
call sub_100B87E  +
lea edi [esi+0D0h] +
mov ecx edi +
call ?Detach@CGdiObject@@QAEPAXXZ  +
test eax eax +
jz loc_100F0B1  +
mov ecx edi +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea edi [esi+0D8h] +
mov ecx edi +
call ?Detach@CGdiObject@@QAEPAXXZ  +
test eax eax +
jz loc_100F0C9  +
mov ecx edi +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
mov ecx ebx +
call ?Detach@CDC@@QAEPAUHDC__@@XZ  +
test eax eax +
jz loc_100F0DB  +
mov ecx ebx +
call ?DeleteDC@CDC@@QAEHXZ  +
lea edi [esi+0F8h] +
mov ecx edi +
call ?Detach@CDC@@QAEPAUHDC__@@XZ  +
test eax eax +
jz loc_100F0F3  +
mov ecx edi +
call ?DeleteDC@CDC@@QAEHXZ  +
lea edi [esi+0C8h] +
mov ecx edi +
call ?Detach@CGdiObject@@QAEPAXXZ  +
test eax eax +
jz loc_100F10B  +
mov ecx edi +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
mov ecx offset off_102C378 +
call ?DestroyMenu@CMenu@@QAEHXZ  +
mov dword ptr [ebp-4] 9 +
jmp loc_100F12E  +
mov dword ptr [ebp-4] 9 +
mov eax offset loc_100F12B +
retn   +
mov esi [ebp-14h] +
lea ecx [esi+15Ch] +
mov edi offset off_10021CC +
mov byte ptr [ebp-4] 8 +
mov [ecx] edi +
call sub_1007D75  +
lea ecx [esi+154h] +
mov byte ptr [ebp-4] 7 +
mov [ecx] edi +
call sub_1007D75  +
lea ecx [esi+140h] +
mov byte ptr [ebp-4] 6 +
call sub_100ED28  +
lea ecx [esi+12Ch] +
mov byte ptr [ebp-4] 5 +
call sub_100ED28  +
lea ecx [esi+0F8h] +
mov byte ptr [ebp-4] 4 +
call ??1CDC@@UAE@XZ  +
lea ecx [esi+0E8h] +
mov byte ptr [ebp-4] 3 +
call ??1CDC@@UAE@XZ  +
lea ecx [esi+0D8h] +
mov edi offset off_10021B4 +
mov byte ptr [ebp-4] 2 +
mov [ecx] edi +
call sub_1007D75  +
lea ecx [esi+0D0h] +
mov byte ptr [ebp-4] 1 +
mov [ecx] edi +
call sub_1007D75  +
lea ecx [esi+0C8h] +
mov byte ptr [ebp-4] 0 +
mov [ecx] edi +
call sub_1007D75  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1CFrameWnd@@UAE@XZ  +
call __EH_epilog3  +
retn   +
***
and bh bh +
adc eax offset InvalidateRect +
lea edi [esi+10Ch] +
cmp dword ptr [edi] 0 +
jz loc_100F224  +
mov ecx esi +
call sub_100C87B  +
and dword ptr [edi] 0 +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100E3B5  +
mov eax [esi+2ACh] +
mov dword ptr [esi+108h] 1 +
cmp eax 7 +
jz loc_100F25A  +
cmp eax 9 +
jnz loc_100F26F  +
lea eax [esi+10Ch] +
cmp dword ptr [eax] 0 +
jz loc_100F26F  +
and dword ptr [eax] 0 +
mov ecx esi +
call sub_100C87B  +
push 0  +
push 0  +
push dword ptr [esi+20h]  +
call ds:InvalidateRect  +
push dword ptr [esi+20h]  +
call ds:UpdateWindow  +
pop esi  +
retn   +
***
push 58h  +
mov eax offset byte_10279B7 +
call __EH_prolog3_GS  +
mov esi ecx +
push esi  +
lea ecx [ebp-64h] +
call ??0CPaintDC@@QAE@PAVCWnd@@@Z  +
lea eax [esi+24Ch] +
xor edi edi +
push eax  +
mov ecx esi +
mov [ebp-4] edi +
call sub_1007E78  +
lea ecx [ebp-64h] +
cmp [esi+2C0h] edi +
jz loc_100F2C9  +
push dword_102DD48  +
jmp loc_100F2CA  +
push edi  +
call ?SetTextColor@CDC@@UAEKK@Z  +
mov ecx [esi+254h] +
mov ebx eax +
mov eax ecx +
cdq   +
idiv  dword_102DF5C +
mov edx [esi+258h] +
push 0CC0020h  +
mov [esi+2B0h] eax +
push dword_102DF58  +
lea eax [esi+0F8h] +
push dword_102DF5C  +
push edi  +
push edi  +
push eax  +
mov eax dword_102DF60 +
sub edx eax +
push edx  +
push ecx  +
push eax  +
push edi  +
lea ecx [ebp-64h] +
call sub_100BAA0  +
cmp [esi+10Ch] edi +
jz loc_100F390  +
lea eax [esi+1FCh] +
mov ecx [eax+0Ch] +
sub ecx [eax+4] +
push 8800C6h  +
push ecx  +
mov ecx [eax+8] +
sub ecx [eax] +
push ecx  +
push dword ptr [esi+200h]  +
lea ecx [ebp-64h] +
push dword ptr [eax]  +
lea eax [esi+0E8h] +
push eax  +
mov eax [esi+218h] +
sub eax [esi+210h] +
push eax  +
mov eax [esi+214h] +
sub eax [esi+20Ch] +
push eax  +
mov eax [esi+210h] +
dec eax  +
push eax  +
mov eax [esi+20Ch] +
dec eax  +
push eax  +
call sub_100BAA0  +
lea eax [ebp-64h] +
push eax  +
mov ecx esi +
call sub_100BB38  +
lea eax [ebp-64h] +
push eax  +
mov ecx esi +
call near ptr dword_100BBA0+3  +
push ebx  +
lea ecx [ebp-64h] +
call ?SetTextColor@CDC@@UAEKK@Z  +
mov ecx esi +
call sub_100D995  +
cmp dword ptr [esi+2B0h] 2 +
jl loc_100F3BC  +
cmp [esi+2B8h] edi +
jz loc_100F3BC  +
lea eax [ebp-64h] +
push eax  +
mov ecx esi +
call near ptr dword_100B904+5  +
cmp [esi+2C0h] edi +
jz loc_100F3CF  +
lea eax [ebp-64h] +
push eax  +
mov ecx esi +
call near ptr dword_100DB08+2  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-64h] +
call ??1CPaintDC@@UAE@XZ  +
call sub_1026DAC  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push edi  +
xor edi edi +
mov esi ecx +
inc edi  +
cmp [esi+118h] edi +
jnz loc_100F416  +
push edi  +
push 0  +
push dword ptr [esi+20h]  +
call ds:InvalidateRect  +
mov ecx esi +
call sub_100C87B  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov eax [esi+2ACh] +
cmp eax 7 +
jz loc_100F40B  +
cmp eax 9 +
jz loc_100F40B  +
lea eax [esi+24Ch] +
push eax  +
lea eax [ebp-10h] +
push eax  +
call ds:CopyRect  +
push dword ptr [ebp+10h]  +
mov eax dword_102DF60 +
push dword ptr [ebp+0Ch]  +
mov [ebp-0Ch] eax +
lea eax [ebp-10h] +
push eax  +
call ds:PtInRect  +
test eax eax +
jz loc_100F410  +
push 2  +
mov ecx esi +
call sub_100E155  +
push dword ptr [ebp+10h]  +
mov ecx esi +
push dword ptr [ebp+0Ch]  +
call sub_100BD12  +
call sub_100E3B5  +
mov eax [esi+2ACh] +
mov [esi+108h] edi +
cmp eax edi +
jz loc_100F4AB  +
cmp eax 8 +
jz loc_100F4AB  +
push edi  +
mov ecx esi +
cmp eax 0Ah +
jnz loc_100F4A1  +
push dword ptr [esi+168h]  +
push dword ptr [esi+164h]  +
call sub_100C262  +
jmp loc_100F410  +
***
call sub_100E1B1  +
jmp loc_100F410  +
***
push 0  +
mov ecx esi +
jmp loc_100F48B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
xor ecx ecx +
cmp [esi+114h] ecx +
jz loc_100F5C7  +
mov eax [esi+2ACh] +
cmp eax 1 +
jz loc_100F5AD  +
cmp eax 8 +
jz loc_100F5AD  +
cmp eax 0Ah +
jz loc_100F5AD  +
cmp eax 7 +
jz loc_100F5AD  +
cmp eax 9 +
jz loc_100F5AD  +
push ebx  +
push edi  +
push dword ptr [ebp+10h]  +
mov ecx esi +
push dword ptr [ebp+0Ch]  +
call sub_100BE70  +
push 1  +
call sub_100E1B1  +
cmp dword ptr [esi+2ACh] 2 +
lea edi [esi+174h] +
jz loc_100F535  +
push edi  +
lea ebx [esi+164h] +
push ebx  +
mov ecx esi +
call sub_101C8B6  +
jmp loc_100F577  +
mov ecx [esi+2B0h] +
mov eax [edi] +
cdq   +
idiv  ecx +
lea ebx [esi+178h] +
imul eax ecx +
mov [edi] eax +
mov eax [ebx] +
cdq   +
idiv  ecx +
imul eax ecx +
mov [ebx] eax +
lea ebx [esi+164h] +
mov eax [ebx] +
cdq   +
idiv  ecx +
imul eax ecx +
mov [ebx] eax +
mov eax [esi+168h] +
cdq   +
idiv  ecx +
imul eax ecx +
mov [esi+168h] eax +
mov ecx esi +
call sub_100DFF4  +
cmp dword ptr [esi+2ACh] 2 +
jnz loc_100F590  +
push edi  +
push ebx  +
mov ecx esi +
call sub_101C8B6  +
mov ecx esi +
call sub_100DF88  +
pop edi  +
xor eax eax +
pop ebx  +
push eax  +
cmp [esi+2C0h] eax +
jnz loc_100F5AA  +
lea eax [esi+20Ch] +
push eax  +
jmp loc_100F5B7  +
cmp [esi+2C0h] ecx +
jz loc_100F5C0  +
push ecx  +
push ecx  +
push dword ptr [esi+20h]  +
call ds:InvalidateRect  +
mov ecx esi +
call sub_100C87B  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+10Ch] +
cmp dword ptr [eax] 0 +
jz loc_100F5F1  +
and dword ptr [eax] 0 +
call sub_100DEC5  +
mov ecx esi +
pop esi  +
jmp sub_100C87B  +
pop esi  +
retn   +
***
call __EH_prolog3_GS  +
mov esi ecx +
push esi  +
lea ecx [ebp-0CA4h] +
mov [ebp-0CA8h] esi +
call ??0CClientDC@@QAE@PAVCWnd@@@Z  +
xor eax eax +
mov edi offset off_100219C +
mov [ebp-4] eax +
mov [ebp-0C84h] eax +
mov [ebp-0C88h] edi +
xor ebx ebx +
mov [ebp-0C90h] eax +
mov eax [esi+2ACh] +
inc ebx  +
mov [ebp-4] bl +
cmp eax 7 +
jz loc_100F64D  +
cmp eax 9 +
jnz loc_100F654  +
mov ecx esi +
call sub_100F5D1  +
push offset unk_102CE90  +
push 104h  +
lea eax [ebp-218h] +
push eax  +
call sub_1008286  +
test eax eax +
jl loc_100FA8C  +
lea eax [ebp-218h] +
push eax  +
push 104h  +
lea eax [ebp-420h] +
push eax  +
call sub_1008286  +
test eax eax +
jl loc_100FA8C  +
lea eax [ebp-420h] +
push 2Eh  +
push eax  +
call ds:wcsrchr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100F6AC  +
xor ecx ecx +
mov [eax] cx +
push offset a_euf  +
push 104h  +
lea eax [ebp-420h] +
push eax  +
call sub_10082C0  +
test eax eax +
jl loc_100FA8C  +
call ds:GetTickCount  +
mov [ebp-0C8Ch] eax +
call ds:GetTickCount  +
sub eax [ebp-0C8Ch] +
cmp eax 3E8h +
jb loc_100F6D6  +
push 0  +
call EnableEUDC  +
test eax eax +
jnz loc_100F743  +
mov esi 100h +
push esi  +
lea eax [ebp-0C20h] +
push eax  +
push 0EF3Bh  +
push 0  +
call ds:LoadStringW  +
push esi  +
lea eax [ebp-620h] +
push eax  +
push 0EF7Fh  +
push 0  +
call ds:LoadStringW  +
mov ecx [ebp-0CA8h] +
push 0  +
lea eax [ebp-0C20h] +
push eax  +
lea eax [ebp-620h] +
push eax  +
call ?MessageBoxW@CWnd@@QAEHPBG0I@Z  +
jmp loc_100FA8C  +
call sub_100B106  +
lea eax [ebp-218h] +
push eax  +
call sub_100B14B  +
test eax eax +
jnz loc_100F86B  +
push 5Ch  +
push eax  +
lea eax [ebp-0C7Ch] +
push eax  +
mov [ebp-0C90h] ebx +
call memset  +
add esp 0Ch +
push offset unk_102DC84  +
push 20h  +
lea eax [ebp-0C60h] +
push eax  +
call sub_1008286  +
test eax eax +
jl loc_100FA81  +
cmp dword_102DCE8 411h +
mov eax dword_102DF58 +
mov [ebp-0C7Ch] eax +
mov eax dword_102DF5C +
mov [ebp-0C78h] eax +
mov al byte ptr dword_102DCEC +
mov byte ptr [ebp-0C64h] 7 +
mov [ebp-0C65h] al +
mov byte ptr [ebp-0C61h] 10h +
jnz loc_100F7D1  +
mov byte ptr [ebp-0C61h] 11h +
lea eax [ebp-0C7Ch] +
push eax  +
lea ecx [ebp-0C88h] +
call sub_100B71B  +
test eax eax +
jnz loc_100F800  +
mov esi [esi+20h] +
push ebx  +
push 0EF6Eh  +
push 0EF33h  +
push esi  +
call sub_102447F  +
jmp loc_100FA81  +
lea eax [ebp-0C88h] +
push eax  +
lea ecx [ebp-0CA4h] +
call ?SelectObject@CDC@@UAEPAVCFont@@PAV2@@Z  +
mov [ebp-0C80h] eax +
xor eax eax +
cmp dword_102D2AC eax +
setz al  +
push eax  +
lea eax [ebp-218h] +
push eax  +
push dword ptr [ebp-0CA0h]  +
call near ptr dword_100B574+3  +
push dword ptr [ebp-0C80h]  +
lea ecx [ebp-0CA4h] +
test eax eax +
jz loc_100F85B  +
call ?SelectObject@CDC@@UAEPAVCFont@@PAV2@@Z  +
lea ecx [ebp-0C88h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
jmp loc_100FA81  +
call ?SelectObject@CDC@@UAEPAVCFont@@PAV2@@Z  +
lea ecx [ebp-0C88h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea eax [ebp-0C8Ch] +
push eax  +
push dword_102DF5C  +
call sub_100B348  +
test eax eax +
jl loc_100FA81  +
lea eax [ebp-0C80h] +
push eax  +
push dword_102DF58  +
call sub_100B348  +
test eax eax +
jl loc_100FA81  +
lea eax [ebp-0C8Ch] +
push eax  +
push 0Fh  +
push dword ptr [ebp-0C8Ch]  +
call sub_100B371  +
test eax eax +
jl loc_100FA81  +
mov eax [ebp-0C8Ch] +
shr eax 3 +
mul  dword ptr [ebp-0C80h] +
lea ecx [ebp-0C8Ch] +
push ecx  +
push edx  +
push eax  +
call sub_1011467  +
test eax eax +
jl loc_100FA81  +
push dword ptr [ebp-0C8Ch]  +
call ds:malloc  +
pop ecx  +
mov [ebp-0C80h] eax +
test eax eax +
jz loc_100FA81  +
push eax  +
push dword ptr [ebp-0C8Ch]  +
lea ecx [esi+0D8h] +
call sub_100B7B7  +
push ebx  +
push dword_102DF5C  +
push dword ptr [ebp-0C80h]  +
call near ptr dword_100B39C+3  +
test eax eax +
jl loc_100FA74  +
push dword_102DCC4  +
movzx eax word ptr [esi+2B4h] +
push eax  +
lea eax [ebp-218h] +
push eax  +
push dword ptr [ebp-0CA0h]  +
call sub_100B1C8  +
cmp eax 0FFFFFFFDh +
jnz loc_100F9D4  +
push dword ptr [ebp-0C80h]  +
call ds:free  +
pop ecx  +
call near ptr dword_100B12C+2  +
push ebx  +
call EnableEUDC  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+8] +
mov esi 100h +
push esi  +
lea ecx [ebp-820h] +
push ecx  +
push 0EF78h  +
push eax  +
mov [ebp-0C90h] eax +
call ds:LoadStringW  +
push esi  +
lea eax [ebp-0A20h] +
push eax  +
push 0EF3Bh  +
push dword ptr [ebp-0C90h]  +
call ds:LoadStringW  +
push dword ptr [ebp+8]  +
mov ecx [ebp-0CA8h] +
lea eax [ebp-0A20h] +
push eax  +
lea eax [ebp-820h] +
push eax  +
call ?MessageBoxW@CWnd@@QAEHPBG0I@Z  +
cmp eax 2 +
jnz loc_100FA8C  +
xor ebx ebx +
jmp loc_100FA8C  +
test eax eax +
jge loc_100FA09  +
push dword ptr [ebp-0C80h]  +
call ds:free  +
pop ecx  +
call near ptr dword_100B12C+2  +
push ebx  +
call EnableEUDC  +
mov esi [esi+20h] +
push ebx  +
push 0EF5Fh  +
push 0EF3Bh  +
push esi  +
call sub_102447F  +
jmp loc_100FA8C  +
cmp dword ptr [ebp-0C90h] 0 +
jz loc_100FA22  +
lea eax [ebp-420h] +
push eax  +
call sub_100AF6E  +
test eax eax +
jnz loc_100FA74  +
lea eax [ebp-420h] +
push eax  +
call sub_1025566  +
test eax eax +
jnz loc_100FA74  +
push dword_102DCC4  +
movzx eax word ptr [esi+2B4h] +
push dword_102DF58  +
push dword_102DF5C  +
push dword ptr [ebp-0C80h]  +
push eax  +
call sub_10253E1  +
test eax eax +
jz loc_100FA62  +
call sub_1024F5F  +
jmp loc_100FA74  +
call sub_1024F5F  +
and dword ptr [esi+108h] 0 +
mov dword_102C3D0 ebx +
push dword ptr [ebp-0C80h]  +
call ds:free  +
pop ecx  +
call near ptr dword_100B12C+2  +
push ebx  +
call EnableEUDC  +
lea ecx [ebp-0C88h] +
mov byte ptr [ebp-4] 0 +
mov [ebp-0C88h] edi +
call sub_1007D75  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-0CA4h] +
call ??1CClientDC@@UAE@XZ  +
mov eax ebx +
call sub_1026DAC  +
retn 4  +
***
push ebp  +
mov ebp esp +
sub esp 21Ch +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp-4] eax +
push esi  +
push edi  +
push offset unk_102CE90  +
mov edi 104h +
push edi  +
lea eax [ebp-20Ch] +
push eax  +
mov esi ecx +
call sub_1008286  +
test eax eax +
jl loc_100FC5D  +
lea eax [ebp-20Ch] +
push 2Eh  +
push eax  +
call ds:wcsrchr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100FB11  +
xor ecx ecx +
mov [eax] cx +
push offset a_euf  +
push edi  +
lea eax [ebp-20Ch] +
push eax  +
call sub_10082C0  +
test eax eax +
jl loc_100FC5D  +
lea eax [ebp-210h] +
push eax  +
push dword_102DF5C  +
call sub_100B348  +
test eax eax +
jl loc_100FC5D  +
lea eax [ebp-21Ch] +
push eax  +
push dword_102DF58  +
call sub_100B348  +
test eax eax +
jl loc_100FC5D  +
lea eax [ebp-210h] +
push eax  +
push 0Fh  +
push dword ptr [ebp-210h]  +
call sub_100B371  +
test eax eax +
jl loc_100FC5D  +
mov eax [ebp-210h] +
shr eax 3 +
mul  dword ptr [ebp-21Ch] +
lea ecx [ebp-210h] +
push ecx  +
push edx  +
push eax  +
call sub_1011467  +
test eax eax +
jl loc_100FC5D  +
push dword ptr [ebp-210h]  +
call ds:malloc  +
mov edi eax +
pop ecx  +
lea eax [ebp-20Ch] +
push eax  +
call sub_1025566  +
test eax eax +
jnz loc_100FC55  +
push dword_102DCC4  +
lea eax [ebp-218h] +
push eax  +
lea eax [ebp-214h] +
push eax  +
push dword ptr [ebp-210h]  +
movzx eax word ptr [esi+2B4h] +
push edi  +
push eax  +
call sub_1024F9A  +
test eax eax +
jnz loc_100FC50  +
mov eax [ebp-214h] +
cmp eax dword_102DF5C +
jnz loc_100FC50  +
mov eax [ebp-218h] +
cmp eax dword_102DF58 +
jnz loc_100FC50  +
call sub_1024F5F  +
push edi  +
push dword ptr [ebp-210h]  +
lea ecx [esi+0D8h] +
call sub_100B79A  +
and dword ptr [esi+108h] 0 +
test edi edi +
jz loc_100FC35  +
push edi  +
call ds:free  +
pop ecx  +
push 0  +
push 0  +
push dword ptr [esi+20h]  +
call ds:InvalidateRect  +
push dword ptr [esi+20h]  +
call ds:UpdateWindow  +
xor eax eax +
inc eax  +
jmp loc_100FC5F  +
call sub_1024F5F  +
push edi  +
call ds:free  +
pop ecx  +
xor eax eax +
mov ecx [ebp-4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1026CC5  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
call sub_100E3B5  +
mov ecx esi +
mov dword ptr [esi+108h] 1 +
call sub_100F5D1  +
mov ebx ds:InvalidateRect +
push 0  +
push 0  +
push dword ptr [esi+20h]  +
call ebx  +
push dword ptr [esi+20h]  +
call ds:UpdateWindow  +
lea eax [ebp+var_4] +
push eax  +
push dword_102DF5C  +
call sub_100B348  +
test eax eax +
jl loc_100FDCC  +
lea eax [ebp+var_8] +
push eax  +
push dword_102DF58  +
call sub_100B348  +
test eax eax +
jl loc_100FDCC  +
lea eax [ebp+var_4] +
push eax  +
push 0Fh  +
push [ebp+var_4]  +
call sub_100B371  +
test eax eax +
jl loc_100FDCC  +
mov eax [ebp+var_4] +
shr eax 3 +
mul  [ebp+var_8] +
lea ecx [ebp+var_4] +
push ecx  +
push edx  +
push eax  +
call sub_1011467  +
test eax eax +
jl loc_100FDCC  +
push edi  +
push [ebp+var_4]  +
call ds:malloc  +
pop ecx  +
mov edi eax +
push edi  +
push [ebp+var_4]  +
push dword_102CB54  +
call ds:GetBitmapBits  +
push edi  +
push [ebp+var_4]  +
lea ecx [esi+0D0h] +
call sub_100B79A  +
push edi  +
call ds:free  +
mov edi ds:CopyRect +
pop ecx  +
push [ebp+lprcSrc]  +
lea eax [esi+20Ch] +
push eax  +
call edi  +
push [ebp+lprcSrc]  +
lea eax [esi+21Ch] +
push eax  +
call edi  +
mov ecx esi +
call sub_100C1BB  +
mov ecx esi +
call sub_100C1F6  +
mov ecx dword_102DF60 +
mov eax dword_102F538 +
mov edi [esi+2B0h] +
sub eax ecx +
cdq   +
idiv  edi +
push eax  +
mov eax dword_102F534 +
cdq   +
idiv  edi +
push eax  +
mov eax dword_102F530 +
sub eax ecx +
cdq   +
idiv  edi +
lea ecx [esi+1FCh] +
push eax  +
mov eax dword_102F52C +
cdq   +
idiv  edi +
push eax  +
call sub_100B609  +
push 0  +
lea eax [esi+22Ch] +
push eax  +
push dword ptr [esi+20h]  +
mov dword ptr [esi+10Ch] 1 +
call ebx  +
push dword ptr [esi+20h]  +
call ds:UpdateWindow  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi [ecx+8] +
push [ebp+arg_0]  +
push esi  +
call sub_100EEC6  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+8] +
mov eax [edi+14h] +
not eax  +
mov esi ecx +
mov ecx edi +
test al 1 +
jz loc_100FE19  +
push dword ptr [esi+8]  +
call ?WriteCount@CArchive@@QAEXK@Z  +
jmp loc_100FE28  +
call ?ReadCount@CArchive@@QAEKXZ  +
push 0FFFFFFFFh  +
push eax  +
mov ecx esi +
call sub_100ED88  +
push dword ptr [esi+8]  +
push dword ptr [esi+4]  +
push edi  +
call sub_100D0A2  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100F056  +
test byte ptr [ebp+8] 1 +
jz loc_100FE8E  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+110h] +
cmp dword ptr [edi] 0 +
jnz loc_100FEBD  +
call sub_100D415  +
test eax eax +
jz loc_100FFBF  +
mov eax [esi+2ACh] +
mov dword ptr [edi] 1 +
cmp eax 7 +
jz loc_100FED3  +
cmp eax 9 +
jnz loc_100FEDA  +
mov ecx esi +
call sub_100F5D1  +
lea eax [ebp-8] +
push eax  +
push dword_102DF5C  +
call sub_100B348  +
test eax eax +
jl loc_100FFBF  +
lea eax [ebp-4] +
push eax  +
push dword_102DF58  +
call sub_100B348  +
test eax eax +
jl loc_100FFBF  +
lea eax [ebp-8] +
push eax  +
push 0Fh  +
push dword ptr [ebp-8]  +
call sub_100B371  +
test eax eax +
jl loc_100FFBF  +
mov eax [ebp-8] +
shr eax 3 +
mul  dword ptr [ebp-4] +
lea ecx [ebp-8] +
push ecx  +
push edx  +
push eax  +
call sub_1011467  +
test eax eax +
jl loc_100FFBF  +
mov edi [ebp-8] +
push ebx  +
mov ebx ds:malloc +
push edi  +
call ebx  +
pop ecx  +
mov [ebp-8] eax +
test eax eax +
jz loc_100FFA8  +
push edi  +
call ebx  +
mov ebx ds:free +
pop ecx  +
mov [ebp-4] eax +
test eax eax +
jz loc_100FFA2  +
push dword ptr [ebp-8]  +
lea ecx [esi+0D8h] +
push edi  +
call sub_100B7B7  +
push dword ptr [ebp-4]  +
lea ecx [esi+0C8h] +
push edi  +
call sub_100B7B7  +
push dword ptr [ebp-4]  +
lea ecx [esi+0D8h] +
push edi  +
call sub_100B79A  +
push dword ptr [ebp-8]  +
lea ecx [esi+0C8h] +
push edi  +
call sub_100B79A  +
push dword ptr [ebp-4]  +
call ebx  +
pop ecx  +
push dword ptr [ebp-8]  +
call ebx  +
pop ecx  +
push 0  +
push 0  +
push dword ptr [esi+20h]  +
call ds:InvalidateRect  +
push dword ptr [esi+20h]  +
call ds:UpdateWindow  +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn   +
***
push 44h  +
mov eax offset dword_1027A34 +
call __EH_prolog3  +
mov esi ecx +
xor ebx ebx +
mov edi offset off_10021B4 +
mov [ebp-34h] ebx +
mov [ebp-38h] edi +
mov [ebp-4] ebx +
mov [ebp-2Ch] ebx +
mov [ebp-30h] edi +
mov byte ptr [ebp-4] 1 +
call sub_100E3B5  +
mov ecx esi +
mov dword ptr [esi+108h] 1 +
call sub_100F5D1  +
push ebx  +
push ebx  +
push dword ptr [esi+20h]  +
call ds:InvalidateRect  +
push dword ptr [esi+20h]  +
call ds:UpdateWindow  +
push dword ptr [esi+20h]  +
call ds:OpenClipboard  +
test eax eax +
jnz loc_101003D  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
mov [ebp-30h] edi +
call sub_1007D75  +
mov [ebp-38h] edi +
jmp loc_1010269  +
push 2  +
call ds:GetClipboardData  +
mov [ebp-20h] eax +
cmp eax ebx +
jnz loc_1010054  +
call ds:CloseClipboard  +
jmp loc_1010027  +
***
lea ecx [ebp-50h] +
push ecx  +
push 18h  +
push eax  +
call ds:GetObjectW  +
lea eax [esi+0F8h] +
cmp eax ebx +
jnz loc_101006F  +
xor eax eax +
jmp loc_1010072  +
mov eax [eax+4] +
push eax  +
call ds:CreateCompatibleDC  +
push dword ptr [ebp-20h]  +
mov edi ds:SelectObject +
push eax  +
mov [ebp-14h] eax +
call edi  +
push ebx  +
push 1  +
push 1  +
push dword ptr [ebp-48h]  +
mov [ebp-1Ch] eax +
push dword ptr [ebp-4Ch]  +
call ds:CreateBitmap  +
mov [ebp-18h] eax +
lea eax [esi+0F8h] +
cmp eax ebx +
jnz loc_10100AD  +
xor eax eax +
jmp loc_10100B0  +
mov eax [eax+4] +
push eax  +
call ds:CreateCompatibleDC  +
push dword ptr [ebp-18h]  +
mov [ebp-10h] eax +
push eax  +
call edi  +
push 0CC0020h  +
push ebx  +
push ebx  +
push dword ptr [ebp-14h]  +
mov [ebp-20h] eax +
push dword ptr [ebp-48h]  +
push dword ptr [ebp-4Ch]  +
push ebx  +
push ebx  +
push dword ptr [ebp-10h]  +
call ds:BitBlt  +
call ds:CloseClipboard  +
test eax eax +
jz loc_101022A  +
mov edx [ebp-4Ch] +
mov ecx dword_102DF5C +
cmp edx ecx +
mov eax dword_102DF58 +
jge loc_1010151  +
mov ecx [ebp-48h] +
cmp ecx eax +
mov [ebp-28h] edx +
jge loc_101012C  +
lea eax [esi+0E8h] +
mov [ebp-24h] ecx +
cmp eax ebx +
jnz loc_1010119  +
xor eax eax +
jmp loc_101011C  +
mov eax [eax+4] +
push 0CC0020h  +
push ecx  +
push edx  +
push ebx  +
push ebx  +
push dword ptr [ebp-10h]  +
push ecx  +
push edx  +
jmp loc_10101AB  +
mov [ebp-24h] eax +
lea eax [esi+0E8h] +
cmp eax ebx +
jnz loc_101013D  +
xor eax eax +
jmp loc_1010140  +
mov eax [eax+4] +
push 0CC0020h  +
push ecx  +
push edx  +
push ebx  +
push ebx  +
push dword ptr [ebp-10h]  +
push dword ptr [ebp-24h]  +
jmp loc_1010129  +
***
cmp [ebp-48h] eax +
jge loc_1010182  +
mov ecx [ebp-48h] +
mov [ebp-28h] eax +
lea eax [esi+0E8h] +
mov [ebp-24h] ecx +
cmp eax ebx +
jnz loc_101016D  +
xor eax eax +
jmp loc_1010170  +
mov eax [eax+4] +
push 0CC0020h  +
push ecx  +
push edx  +
push ebx  +
push ebx  +
push dword ptr [ebp-10h]  +
push ecx  +
push dword ptr [ebp-28h]  +
jmp loc_10101AB  +
mov [ebp-24h] eax +
lea eax [esi+0E8h] +
mov [ebp-28h] ecx +
cmp eax ebx +
jnz loc_1010196  +
xor eax eax +
jmp loc_1010199  +
mov eax [eax+4] +
push 0CC0020h  +
push dword ptr [ebp-48h]  +
push edx  +
push ebx  +
push ebx  +
push dword ptr [ebp-10h]  +
push dword ptr [ebp-24h]  +
push ecx  +
push ebx  +
push ebx  +
push eax  +
call ds:StretchBlt  +
mov eax [esi+2B0h] +
mov ecx [ebp-28h] +
dec ecx  +
imul ecx eax +
mov [esi+174h] ecx +
mov ecx [ebp-24h] +
dec ecx  +
imul ecx eax +
mov [esi+178h] ecx +
mov ecx esi +
mov [esi+164h] ebx +
mov [esi+168h] ebx +
call sub_100DF88  +
mov ecx esi +
call sub_100C1BB  +
mov ecx esi +
call sub_100C1F6  +
mov ecx esi +
call sub_100C177  +
push ebx  +
lea eax [esi+22Ch] +
push eax  +
push dword ptr [esi+20h]  +
mov dword ptr [esi+2ACh] 7 +
mov dword ptr [esi+10Ch] 1 +
call ds:InvalidateRect  +
push dword ptr [esi+20h]  +
call ds:UpdateWindow  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp-14h]  +
call edi  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp-10h]  +
call edi  +
push dword ptr [ebp-18h]  +
call ds:DeleteObject  +
push dword ptr [ebp-14h]  +
mov esi ds:DeleteDC +
call esi  +
push dword ptr [ebp-10h]  +
call esi  +
mov esi offset off_10021B4 +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
mov [ebp-30h] esi +
call sub_1007D75  +
mov [ebp-38h] esi +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-38h] +
call sub_1007D75  +
call __EH_epilog3  +
retn   +
***
push 34h  +
mov eax offset byte_1027B19 +
call __EH_prolog3  +
mov esi ecx +
cmp dword ptr [esi+118h] 2 +
jnz loc_10102B0  +
push 1  +
push 0  +
push dword ptr [esi+20h]  +
call ds:InvalidateRect  +
mov ecx esi +
call sub_100C87B  +
jmp loc_10104E7  +
mov eax [ebp+0Ch] +
mov [ebp-14h] eax +
mov eax [ebp+10h] +
mov [ebp-10h] eax +
lea ebx [esi+24Ch] +
push ebx  +
lea eax [ebp-2Ch] +
push eax  +
call ds:CopyRect  +
push dword ptr [ebp+10h]  +
mov eax dword_102DF60 +
push dword ptr [ebp+0Ch]  +
mov [ebp-28h] eax +
lea eax [ebp-2Ch] +
push eax  +
call ds:PtInRect  +
test eax eax +
jz loc_10104E7  +
xor edi edi +
inc edi  +
push edi  +
mov ecx esi +
call sub_100E155  +
push dword ptr [ebp+10h]  +
mov ecx esi +
push dword ptr [ebp+0Ch]  +
call sub_100BD12  +
cmp dword ptr [esi+10Ch] 0 +
jz loc_1010423  +
call sub_100C1F6  +
push dword ptr [ebp-10h]  +
lea ecx [esi+23Ch] +
push dword ptr [ebp-14h]  +
call sub_100B5EE  +
test eax eax +
jz loc_1010368  +
mov eax [ebx+8] +
mov ecx [esi+214h] +
sub eax [ebx] +
sub ecx [esi+20Ch] +
cmp eax ecx +
jg loc_101035D  +
mov eax [ebx+0Ch] +
sub eax [ebx+4] +
mov ecx [esi+218h] +
sub eax dword_102DF60 +
sub ecx [esi+210h] +
cmp eax ecx +
jle loc_1010368  +
mov [esi+108h] edi +
jmp loc_10104E7  +
push dword ptr [ebp-10h]  +
mov ecx esi +
push dword ptr [ebp-14h]  +
call sub_100C13C  +
mov [esi+124h] eax +
cmp eax 8 +
jz loc_10103DD  +
mov ecx esi +
mov [esi+108h] edi +
call sub_100C1BB  +
xor ebx ebx +
push ebx  +
lea eax [esi+22Ch] +
push eax  +
push dword ptr [esi+20h]  +
mov [esi+10Ch] ebx +
call ds:InvalidateRect  +
push dword ptr [esi+20h]  +
call ds:UpdateWindow  +
push esi  +
lea ecx [ebp-40h] +
mov [esi+10Ch] edi +
call ??0CClientDC@@QAE@PAVCWnd@@@Z  +
lea eax [ebp-40h] +
push eax  +
mov ecx esi +
mov [ebp-4] ebx +
call sub_100BB38  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-40h] +
call ??1CClientDC@@UAE@XZ  +
jmp loc_10104E7  +
and dword ptr [esi+10Ch] 0 +
push 0  +
lea eax [esi+22Ch] +
push eax  +
push dword ptr [esi+20h]  +
call ds:InvalidateRect  +
push dword ptr [esi+20h]  +
call ds:UpdateWindow  +
mov ecx esi +
call sub_100DEC5  +
mov ecx esi +
call sub_100C177  +
cmp dword ptr [esi+2ACh] 7 +
jnz loc_101045E  +
push edi  +
mov ecx esi +
call sub_100E1B1  +
jmp loc_10104E7  +
mov eax [esi+2ACh] +
cmp eax edi +
jz loc_10104C7  +
cmp eax 8 +
jz loc_10104C7  +
cmp eax 0Ah +
jnz loc_101044A  +
call sub_100E3B5  +
push edi  +
jmp loc_10104CE  +
call sub_100E3B5  +
cmp dword ptr [esi+2ACh] 9 +
mov [esi+108h] edi +
jnz loc_1010416  +
mov eax [esi+164h] +
mov edi [esi+168h] +
add edi dword_102DF60 +
push 0FFFFFFFFh  +
lea ebx [esi+12Ch] +
push 0  +
mov ecx ebx +
mov [ebp-1Ch] eax +
call sub_100ED88  +
push 0FFFFFFFFh  +
lea ecx [esi+140h] +
push 0  +
mov [ebp-10h] ecx +
call sub_100ED88  +
push edi  +
push dword ptr [ebp-1Ch]  +
mov ecx ebx +
call sub_100FDD7  +
mov eax [esi+164h] +
mov ecx [esi+2B0h] +
cdq   +
idiv  ecx +
mov edi eax +
mov eax [esi+168h] +
cdq   +
idiv  ecx +
mov ecx [ebp-10h] +
push eax  +
push edi  +
call sub_100FDD7  +
jmp loc_10104E7  +
call sub_100E3B5  +
push 0  +
push dword ptr [esi+168h]  +
mov ecx esi +
push dword ptr [esi+164h]  +
mov [esi+108h] edi +
call sub_100C262  +
call __EH_epilog3  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+0Ch] +
cdq   +
idiv  dword_102DF5C +
push ebx  +
push esi  +
mov esi ecx +
mov ebx eax +
mov eax [esi+10Ch] +
mov [ebp-4] ebx +
test eax eax +
jz loc_10105FF  +
cmp ebx 1 +
jle loc_10105F1  +
mov ecx [esi+2B0h] +
push edi  +
lea edi [esi+21Ch] +
mov eax [edi] +
cdq   +
idiv  ecx +
imul eax ebx +
mov [edi] eax +
mov ebx dword_102DF60 +
lea edi [esi+220h] +
mov eax [edi] +
sub eax ebx +
cdq   +
idiv  ecx +
imul eax [ebp-4] +
add eax ebx +
mov [edi] eax +
lea edi [esi+224h] +
mov eax [edi] +
cdq   +
idiv  ecx +
lea ebx [esi+228h] +
imul eax [ebp-4] +
inc eax  +
mov [edi] eax +
mov edi dword_102DF60 +
mov eax [ebx] +
sub eax edi +
cdq   +
idiv  ecx +
imul eax [ebp-4] +
lea eax [eax+edi+1] +
mov [ebx] eax +
lea edi [esi+20Ch] +
mov eax [edi] +
cdq   +
idiv  ecx +
imul eax [ebp-4] +
mov [edi] eax +
mov ebx dword_102DF60 +
lea edi [esi+210h] +
mov eax [edi] +
sub eax ebx +
cdq   +
idiv  ecx +
imul eax [ebp-4] +
add eax ebx +
mov [edi] eax +
lea edi [esi+214h] +
mov eax [edi] +
cdq   +
idiv  ecx +
lea ebx [esi+218h] +
imul eax [ebp-4] +
inc eax  +
mov [edi] eax +
mov edi dword_102DF60 +
mov eax [ebx] +
sub eax edi +
cdq   +
idiv  ecx +
mov ecx esi +
imul eax [ebp-4] +
lea eax [eax+edi+1] +
mov [ebx] eax +
call sub_100C1F6  +
mov ecx esi +
call sub_100C1BB  +
pop edi  +
jmp loc_10105FF  +
test eax eax +
jz loc_10105FF  +
cmp ebx 1 +
jg loc_10105FF  +
call sub_100F5D1  +
push dword ptr [ebp+10h]  +
mov ecx esi +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call ?OnSize@CMDIChildWnd@@IAEXIHH@Z  +
push 0  +
push 0  +
push dword ptr [esi+20h]  +
call ds:InvalidateRect  +
push dword ptr [esi+20h]  +
call ds:UpdateWindow  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
jnz loc_1010650  +
mov eax [ecx+2ACh] +
cmp eax 7 +
jz loc_101064B  +
cmp eax 9 +
jnz loc_1010650  +
call sub_100F5D1  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 1Bh +
jnz loc_101066B  +
call sub_100F5D1  +
jmp loc_1010670  +
call ?Default@CWnd@@IAEJXZ  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
cmp [ebp+arg_0] 0 +
push ebx  +
push esi  +
mov esi [ecx+2B0h] +
push edi  +
jnz loc_10106BA  +
mov eax [ecx+16Ch] +
cdq   +
idiv  esi +
mov edi eax +
mov eax [ecx+170h] +
cdq   +
idiv  esi +
mov ebx eax +
mov eax [ecx+174h] +
cdq   +
idiv  esi +
mov [ebp+var_14] eax +
mov eax [ecx+178h] +
jmp loc_10106E2  +
mov eax [ecx+174h] +
cdq   +
idiv  esi +
mov edi eax +
mov eax [ecx+178h] +
cdq   +
idiv  esi +
mov ebx eax +
mov eax [ecx+164h] +
cdq   +
idiv  esi +
mov [ebp+var_14] eax +
mov eax [ecx+168h] +
cdq   +
idiv  esi +
mov edx [ebp+var_14] +
mov [ebp+var_10] eax +
xor eax eax +
cmp edx edi +
setnl al  +
lea eax [eax+eax-1] +
mov [ebp+var_C] eax +
xor eax eax +
cmp [ebp+var_10] ebx +
setnl al  +
sub edx edi +
imul edx [ebp+var_C] +
lea eax [eax+eax-1] +
mov [ebp+var_8] eax +
mov eax [ebp+var_10] +
sub eax ebx +
imul eax [ebp+var_8] +
test edx edx +
jnz loc_1010723  +
test eax eax +
jz loc_10107A4  +
cmp edx eax +
jge loc_1010748  +
mov esi eax +
mov eax edx +
mov edx esi +
mov esi [ebp+var_C] +
mov [ebp+arg_0] esi +
mov esi [ebp+var_8] +
mov [ebp+var_C] esi +
mov esi [ebp+arg_0] +
mov [ebp+var_8] esi +
mov [ebp+arg_0] 1 +
jmp loc_101074C  +
and [ebp+arg_0] 0 +
lea esi [eax+eax] +
sub eax edx +
mov [ebp+var_1C] esi +
add eax eax +
sub esi edx +
add ecx 140h +
mov [ebp+var_18] eax +
mov [ebp+var_4] ecx +
mov ecx [ebp+var_4] +
push ebx  +
push edi  +
call sub_100FDD7  +
cmp edi [ebp+var_14] +
jnz loc_1010778  +
cmp ebx [ebp+var_10] +
jz loc_10107A4  +
cmp [ebp+arg_0] 0 +
jz loc_1010784  +
mov eax edi +
mov edi ebx +
mov ebx eax +
add edi [ebp+var_C] +
test esi esi +
jge loc_1010790  +
add esi [ebp+var_1C] +
jmp loc_1010796  +
add ebx [ebp+var_8] +
add esi [ebp+var_18] +
cmp [ebp+arg_0] 0 +
jz loc_1010764  +
mov eax edi +
mov edi ebx +
mov ebx eax +
jmp loc_1010764  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
call __EH_prolog3  +
mov edi ecx +
push edi  +
lea ecx [ebp-64h] +
call ??0CClientDC@@QAE@PAVCWnd@@@Z  +
and dword ptr [ebp-4] 0 +
push 7  +
lea ecx [ebp-64h] +
call ?SelectStockObject@CDC@@UAEPAVCGdiObject@@H@Z  +
push 0Ah  +
lea ecx [ebp-64h] +
mov [ebp-14h] eax +
call ?SetROP2@CDC@@QAEHH@Z  +
cmp dword ptr [ebp+8] 0 +
mov [ebp-18h] eax +
jnz loc_1010817  +
mov eax dword_102DF60 +
mov esi [edi+170h] +
mov edx [edi+178h] +
mov ebx [edi+16Ch] +
mov ecx [edi+174h] +
add esi eax +
add edx eax +
mov [ebp-40h] ebx +
mov [ebp-38h] ecx +
mov [ebp-34h] edx +
jmp loc_1010846  +
mov eax [edi+174h] +
mov ecx [edi+164h] +
mov esi [edi+178h] +
mov [ebp-40h] eax +
mov eax dword_102DF60 +
mov ebx [ebp-40h] +
mov [ebp-38h] ecx +
mov ecx [edi+168h] +
add esi eax +
add ecx eax +
mov [ebp-34h] ecx +
mov edx ecx +
cmp [ebp-38h] ebx +
mov eax [edi+2B0h] +
jl loc_1010856  +
mov [ebp-30h] eax +
jmp loc_101085D  +
mov ecx eax +
neg ecx  +
mov [ebp-30h] ecx +
cmp edx esi +
jge loc_1010863  +
neg eax  +
mov ecx [ebp-38h] +
sub ecx ebx +
imul ecx [ebp-30h] +
mov [ebp-2Ch] eax +
mov eax edx +
sub eax esi +
imul eax [ebp-2Ch] +
test ecx ecx +
jnz loc_1010883  +
test eax eax +
jz loc_10109AF  +
cmp ecx eax +
jge loc_10108A8  +
mov edx eax +
mov eax ecx +
mov ecx edx +
mov edx [ebp-30h] +
mov [ebp+8] edx +
mov edx [ebp-2Ch] +
mov [ebp-30h] edx +
mov edx [ebp+8] +
mov [ebp-2Ch] edx +
mov dword ptr [ebp-10h] 1 +
jmp loc_10108AC  +
and dword ptr [ebp-10h] 0 +
lea edx [eax+eax] +
sub eax ecx +
add eax eax +
mov [ebp-44h] eax +
mov eax edx +
sub eax ecx +
push esi  +
mov [ebp+8] eax +
push ebx  +
lea eax [ebp-50h] +
push eax  +
lea ecx [ebp-64h] +
mov [ebp-48h] edx +
mov [ebp-1Ch] esi +
call ?MoveTo@CDC@@QAE?AVCPoint@@HH@Z  +
mov ecx [ebp-40h] +
cmp ecx ebx +
jz loc_1010926  +
mov eax [ebp-1Ch] +
cmp esi eax +
jz loc_101092E  +
jge loc_10108EF  +
cmp ecx ebx +
jg loc_10108E7  +
jge loc_10108EF  +
mov [ebp-28h] ecx +
mov [ebp-24h] eax +
jmp loc_10108F5  +
mov [ebp-28h] ebx +
mov [ebp-24h] esi +
push dword ptr [ebp-24h]  +
lea ecx [ebp-64h] +
push dword ptr [ebp-28h]  +
call ?LineTo@CDC@@QAEHHH@Z  +
push dword ptr [ebp-1Ch]  +
lea ecx [ebp-64h] +
push ebx  +
call ?LineTo@CDC@@QAEHHH@Z  +
push dword ptr [ebp-24h]  +
lea esi [edi+12Ch] +
push dword ptr [ebp-28h]  +
mov ecx esi +
call sub_100FDD7  +
mov ecx esi +
jmp loc_101093E  +
cmp esi [ebp-1Ch] +
jz loc_1010947  +
mov eax [ebp-1Ch] +
push eax  +
push ebx  +
lea ecx [ebp-64h] +
call ?LineTo@CDC@@QAEHHH@Z  +
lea ecx [edi+12Ch] +
push dword ptr [ebp-1Ch]  +
push ebx  +
call sub_100FDD7  +
mov esi [ebp-1Ch] +
mov [ebp-40h] ebx +
cmp ebx [ebp-38h] +
jnz loc_1010959  +
mov eax esi +
cmp eax [ebp-34h] +
jz loc_1010999  +
cmp dword ptr [ebp-10h] 0 +
jz loc_1010967  +
mov eax ebx +
mov ebx [ebp-1Ch] +
mov [ebp-1Ch] eax +
mov eax [ebp+8] +
add ebx [ebp-30h] +
test eax eax +
jge loc_1010976  +
add eax [ebp-48h] +
jmp loc_101097F  +
mov ecx [ebp-2Ch] +
add [ebp-1Ch] ecx +
add eax [ebp-44h] +
cmp dword ptr [ebp-10h] 0 +
mov [ebp+8] eax +
jz loc_10108D1  +
mov eax ebx +
mov ebx [ebp-1Ch] +
mov [ebp-1Ch] eax +
jmp loc_10108D1  +
push dword ptr [ebp-14h]  +
lea ecx [ebp-64h] +
call ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z  +
push dword ptr [ebp-18h]  +
lea ecx [ebp-64h] +
call ?SetROP2@CDC@@QAEHH@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-64h] +
call ??1CClientDC@@UAE@XZ  +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
cmp [esi+114h] ebx +
jz loc_1010B08  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_100BE70  +
mov eax [esi+16Ch] +
cmp eax [esi+174h] +
jnz loc_1010A0D  +
mov eax [esi+170h] +
cmp eax [esi+178h] +
jz loc_1010B08  +
cmp [esi+10Ch] ebx +
jz loc_1010ACD  +
cmp dword ptr [esi+124h] 8 +
jnz loc_1010AC6  +
call sub_100C05F  +
test eax eax +
jz loc_1010B08  +
mov eax [esi+120h] +
mov ecx [esi+218h] +
add ecx eax +
push edi  +
mov edi ds:SetRect +
push ecx  +
mov ecx [esi+214h] +
add ecx eax +
push ecx  +
mov ecx [esi+210h] +
sub ecx eax +
push ecx  +
mov ecx [esi+20Ch] +
sub ecx eax +
push ecx  +
lea eax [ebp-20h] +
push eax  +
call edi  +
mov eax [esi+120h] +
mov ecx [esi+228h] +
add ecx eax +
push ecx  +
mov ecx [esi+224h] +
add ecx eax +
push ecx  +
mov ecx [esi+220h] +
sub ecx eax +
push ecx  +
mov ecx [esi+21Ch] +
sub ecx eax +
push ecx  +
lea eax [ebp-10h] +
push eax  +
call edi  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-30h] +
push eax  +
call ds:UnionRect  +
push ebx  +
lea eax [ebp-30h] +
push eax  +
push dword ptr [esi+20h]  +
call ds:InvalidateRect  +
push dword ptr [esi+20h]  +
call ds:UpdateWindow  +
pop edi  +
jmp loc_1010B08  +
call sub_100C538  +
jmp loc_1010B08  +
mov eax [esi+2ACh] +
cmp eax 1 +
jz loc_1010B02  +
cmp eax 8 +
jz loc_1010B02  +
cmp eax 0Ah +
jnz loc_1010AE6  +
push 1  +
jmp loc_1010B03  +
push ebx  +
cmp eax 9 +
jnz loc_1010AFB  +
call sub_10107B0  +
push ebx  +
mov ecx esi +
call sub_1010679  +
jmp loc_1010B08  +
call sub_100E1B1  +
jmp loc_1010B08  +
push ebx  +
call sub_100C3F2  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 3E88h +
call __alloca_probe  +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
lea eax [esi+2C4h] +
xor ebx ebx +
inc edi  +
cmp [eax] ebx +
jnz loc_1010B53  +
mov [eax] edi +
call sub_100D995  +
mov eax dword_102EE18 +
mov [eax+0D4h] ebx +
mov ecx dword_102EE18 +
call sub_101CC5B  +
cmp [esi+114h] ebx +
jz loc_1010F1F  +
push dword ptr [ebp+10h]  +
mov ecx esi +
push dword ptr [ebp+0Ch]  +
call sub_100BE70  +
mov eax [esi+2ACh] +
cmp eax edi +
jz loc_1010F05  +
cmp eax 8 +
jz loc_1010F05  +
cmp eax 0Ah +
jz loc_1010F05  +
cmp eax 7 +
jnz loc_1010C40  +
cmp [esi+10Ch] ebx +
jnz loc_1010C40  +
call sub_100DF88  +
mov ecx esi +
call sub_100C177  +
mov ecx esi +
call sub_100C1BB  +
mov ecx esi +
call sub_100C1F6  +
mov eax [esi+174h] +
sub eax [esi+164h] +
mov ecx [esi+2B0h] +
cdq   +
xor eax edx +
add ecx ecx +
sub eax edx +
cmp eax ecx +
jl loc_1010E3D  +
mov eax [esi+178h] +
sub eax [esi+168h] +
cdq   +
xor eax edx +
sub eax edx +
cmp eax ecx +
jl loc_1010E3D  +
mov eax [esi+200h] +
mov ecx [esi+1FCh] +
push 0CC0020h  +
push eax  +
push ecx  +
lea edx [esi+0F8h] +
push edx  +
mov edx [esi+208h] +
sub edx eax +
push edx  +
mov edx [esi+204h] +
sub edx ecx +
push edx  +
push eax  +
push ecx  +
lea ecx [esi+0E8h] +
call sub_100BA69  +
mov ecx esi +
call sub_100CA60  +
mov [esi+10Ch] edi +
jmp loc_1010E3D  +
cmp eax 9 +
jnz loc_1010E02  +
cmp [esi+10Ch] ebx +
jnz loc_1010E0A  +
push ebx  +
call sub_10107B0  +
push ebx  +
mov ecx esi +
call sub_1010679  +
push edi  +
mov ecx esi +
call sub_10107B0  +
push edi  +
mov ecx esi +
call sub_1010679  +
mov ecx [esi+134h] +
mov edx [esi+148h] +
mov eax 3E8h +
mov [ebp-8] ecx +
mov [ebp-4] edx +
cmp ecx eax +
jnb loc_1010DE2  +
cmp edx eax +
jnb loc_1010DE2  +
test ecx ecx +
jle loc_1010CC3  +
lea edi [ebp-1F48h] +
push ebx  +
lea ecx [esi+12Ch] +
call loc_100D07C  +
mov ecx [eax] +
mov [edi] ecx +
mov eax [eax+4] +
mov [edi+4] eax +
inc ebx  +
add edi 8 +
cmp ebx [ebp-8] +
jl loc_1010CA4  +
xor ebx ebx +
cmp [ebp-4] ebx +
jle loc_1010CEF  +
lea edi [ebp-3E88h] +
push ebx  +
lea ecx [esi+140h] +
call loc_100D07C  +
mov ecx [eax] +
mov [edi] ecx +
mov eax [eax+4] +
mov [edi+4] eax +
inc ebx  +
add edi 8 +
cmp ebx [ebp-4] +
jl loc_1010CD0  +
lea ebx [esi+154h] +
test ebx ebx +
jz loc_1010D06  +
cmp dword ptr [ebx+4] 0 +
jz loc_1010D06  +
mov ecx ebx +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea edi [esi+15Ch] +
test edi edi +
jz loc_1010D1D  +
cmp dword ptr [edi+4] 0 +
jz loc_1010D1D  +
mov ecx edi +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
push 1  +
push dword ptr [ebp-8]  +
lea eax [ebp-1F48h] +
push eax  +
mov ecx ebx +
call sub_100B810  +
push 1  +
push dword ptr [ebp-4]  +
lea eax [ebp-3E88h] +
push eax  +
mov ecx edi +
call sub_100B810  +
xor eax eax +
cmp ebx eax +
jz loc_1010DB9  +
cmp [ebx+4] eax +
jz loc_1010DB9  +
cmp edi eax +
jz loc_1010DB9  +
cmp [edi+4] eax +
jz loc_1010DB9  +
mov ecx esi +
mov dword ptr [esi+10Ch] 1 +
call sub_100C8A2  +
test eax eax +
jnz loc_1010DB0  +
and [esi+10Ch] eax +
mov ecx ebx +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
mov ecx edi +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
mov ecx esi +
call sub_100C177  +
mov ecx esi +
call sub_100C1BB  +
mov ecx esi +
call sub_100C1F6  +
lea eax [esi+20Ch] +
push eax  +
lea eax [esi+21Ch] +
push eax  +
call ds:CopyRect  +
push 0  +
jmp loc_1010E3E  +
mov ecx esi +
call sub_100C9FD  +
jmp loc_1010D80  +
***
push 0FFFFFFFFh  +
push eax  +
lea ecx [esi+12Ch] +
call sub_100ED88  +
push 0FFFFFFFFh  +
push 0  +
lea ecx [esi+140h] +
call sub_100ED88  +
and dword ptr [esi+10Ch] 0 +
jmp loc_1010F18  +
mov ecx esi +
call sub_100C87B  +
push ebx  +
push ebx  +
push dword ptr [esi+20h]  +
call ds:InvalidateRect  +
push dword ptr [esi+20h]  +
call ds:UpdateWindow  +
jmp loc_1010F1F  +
cmp [esi+10Ch] ebx +
jz loc_1010E5C  +
lea edi [esi+124h] +
cmp dword ptr [edi] 8 +
jz loc_1010E22  +
call sub_100DCFE  +
mov dword ptr [edi] 8 +
jmp loc_1010E2F  +
call sub_100C05F  +
test eax eax +
jz loc_1010F18  +
mov ecx esi +
call sub_100C1BB  +
mov ecx esi +
call sub_100C1F6  +
push ebx  +
lea eax [esi+22Ch] +
push eax  +
push dword ptr [esi+20h]  +
call ds:InvalidateRect  +
push dword ptr [esi+20h]  +
call ds:UpdateWindow  +
jmp loc_1010F18  +
lea edi [esi+174h] +
cmp eax 2 +
jz loc_1010E76  +
push edi  +
lea ebx [esi+164h] +
push ebx  +
call sub_101C8B6  +
jmp loc_1010EB8  +
mov ecx [esi+2B0h] +
mov eax [edi] +
cdq   +
idiv  ecx +
lea ebx [esi+178h] +
imul eax ecx +
mov [edi] eax +
mov eax [ebx] +
cdq   +
idiv  ecx +
imul eax ecx +
mov [ebx] eax +
lea ebx [esi+164h] +
mov eax [ebx] +
cdq   +
idiv  ecx +
imul eax ecx +
mov [ebx] eax +
mov eax [esi+168h] +
cdq   +
idiv  ecx +
imul eax ecx +
mov [esi+168h] eax +
mov ecx esi +
call sub_100DFF4  +
cmp dword ptr [esi+2ACh] 2 +
jnz loc_1010ED1  +
push edi  +
push ebx  +
mov ecx esi +
call sub_101C8B6  +
mov ecx esi +
call sub_100DF88  +
xor ecx ecx +
cmp [esi+2C0h] ecx +
jz loc_1010EE6  +
push ecx  +
push ecx  +
jmp loc_1010F0F  +
mov eax [esi+2ACh] +
cmp eax 1 +
jz loc_1010F18  +
cmp eax 8 +
jz loc_1010F18  +
cmp eax 0Ah +
jz loc_1010F18  +
push ecx  +
lea eax [esi+20Ch] +
push eax  +
jmp loc_1010F0F  +
cmp [esi+2C0h] ebx +
jz loc_1010F18  +
push ebx  +
push ebx  +
push dword ptr [esi+20h]  +
call ds:InvalidateRect  +
mov ecx esi +
call sub_100C87B  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
test ecx ecx +
jnz loc_1010F32  +
xor eax eax +
retn   +
movzx ax byte ptr [ecx+1] +
movzx cx byte ptr [ecx] +
shl ax 8 +
or ax cx +
retn   +
***
test ecx ecx +
jnz loc_1010F4F  +
xor eax eax +
retn   +
movzx eax byte ptr [ecx+3] +
push 2  +
pop edx  +
push esi  +
movzx esi byte ptr [edx+ecx] +
shl eax 8 +
or eax esi +
dec edx  +
jns loc_1010F57  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 108h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+hFile] +
push esi  +
test ebx ebx +
jz loc_1011133  +
push 0  +
lea ecx [ebp+NumberOfBytesRead] +
push ecx  +
mov esi 100h +
push esi  +
lea ecx [ebp+Buffer] +
push ecx  +
push eax  +
call ds:ReadFile  +
test eax eax +
jz loc_1011133  +
cmp [ebp+NumberOfBytesRead] esi +
jnz loc_1011133  +
push edi  +
push esi  +
push 0  +
push ebx  +
call memset  +
add esp 0Ch +
lea ecx [ebp+Buffer] +
call sub_1010F2B  +
mov [ebx] ax +
mov eax [ebp+Buffer+2] +
mov [ebx+2] eax +
mov eax [ebp+var_FE] +
mov [ebx+6] eax +
mov al [ebp+var_FA] +
mov [ebx+0Ah] al +
mov al [ebp+var_F9] +
lea ecx [ebp+var_F8] +
mov [ebx+0Bh] al +
call sub_1010F48  +
lea ecx [ebp+var_F4] +
mov [ebx+0Ch] eax +
call sub_1010F2B  +
lea ecx [ebp+var_F4+2] +
mov [ebx+10h] ax +
call sub_1010F2B  +
lea ecx [ebp+var_F0] +
mov [ebx+12h] ax +
call sub_1010F48  +
mov [ebx+14h] eax +
mov al [ebp+var_EC] +
lea ecx [ebp+var_EB] +
mov [ebx+18h] al +
call sub_1010F2B  +
lea ecx [ebp+var_C4] +
mov [ebx+19h] ax +
call sub_1010F2B  +
lea ecx [ebp+var_C4+2] +
mov [ebx+40h] ax +
call sub_1010F2B  +
lea edi [ebx+46h] +
lea esi [ebp+var_BE] +
movs   +
mov [ebx+42h] ax +
mov al [ebp+var_C0] +
movs   +
mov [ebx+44h] al +
mov al [ebp+var_BF] +
lea ecx [ebp+var_B2] +
mov [ebx+45h] al +
movs   +
call sub_1010F48  +
lea ecx [ebp+var_AE] +
mov [ebx+52h] eax +
call sub_1010F2B  +
lea ecx [ebp+var_AE+2] +
mov [ebx+56h] ax +
call sub_1010F2B  +
lea ecx [ebp+var_AA] +
mov [ebx+58h] ax +
call sub_1010F2B  +
lea ecx [ebp+var_AA+2] +
mov [ebx+5Ah] ax +
call sub_1010F2B  +
lea ecx [ebp+var_A6] +
mov [ebx+5Ch] ax +
call sub_1010F2B  +
lea ecx [ebp+var_A6+2] +
mov [ebx+5Eh] ax +
call sub_1010F2B  +
mov [ebx+60h] ax +
mov al [ebp+var_A2] +
lea ecx [ebp+var_A1] +
mov [ebx+62h] al +
call sub_1010F2B  +
mov [ebx+63h] ax +
mov al byte ptr [ebp+var_A1+2] +
lea ecx [ebp+var_A1+3] +
mov [ebx+65h] al +
call sub_1010F48  +
mov [ebx+66h] eax +
lea ecx [ebp+var_9A] +
call sub_1010F48  +
mov [ebx+6Ah] eax +
xor eax eax +
pop edi  +
jmp loc_1011136  +
or eax 0FFFFFFFFh +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1026CC5  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 108h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push edi  +
xor ebx ebx +
push ebx  +
push ebx  +
push ebx  +
push hFile  +
call ds:SetFilePointer  +
test eax eax +
jnz loc_1011213  +
push ebx  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
mov edi 100h +
push edi  +
lea eax [ebp+Buffer] +
push eax  +
push hFile  +
call ds:ReadFile  +
test eax eax +
jz loc_1011213  +
cmp [ebp+NumberOfBytesWritten] edi +
jnz loc_1011213  +
mov eax dword_102D9B8 +
push esi  +
push 4  +
mov edx eax +
lea ecx [ebp+var_F8] +
pop esi  +
mov [ecx] dl +
inc ecx  +
shr edx 8 +
dec esi  +
jnz loc_10111B8  +
push 4  +
pop edx  +
lea ecx [ebp+var_B2] +
pop esi  +
mov [ecx] al +
inc ecx  +
shr eax 8 +
dec edx  +
jnz loc_10111CB  +
push ebx  +
push ebx  +
push ebx  +
push hFile  +
call ds:SetFilePointer  +
test eax eax +
jnz loc_1011213  +
push ebx  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push edi  +
lea eax [ebp+Buffer] +
push eax  +
push hFile  +
call ds:WriteFile  +
test eax eax +
jz loc_1011213  +
cmp [ebp+NumberOfBytesWritten] edi +
jnz loc_1011213  +
xor eax eax +
jmp loc_1011216  +
or eax 0FFFFFFFFh +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_1026CC5  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
test ebx ebx +
jz loc_101127B  +
push esi  +
push 0  +
push 0  +
mov esi 100h +
push esi  +
push [ebp+hFile]  +
call ds:SetFilePointer  +
cmp eax esi +
pop esi  +
jnz loc_101127B  +
push 0  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push 4  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+hFile]  +
call ds:ReadFile  +
test eax eax +
jz loc_101127B  +
cmp [ebp+NumberOfBytesRead] 4 +
jnz loc_101127B  +
lea ecx [ebp+Buffer] +
call sub_1010F2B  +
mov [ebx] ax +
xor eax eax +
jmp locret_101127E  +
or eax 0FFFFFFFFh +
leave   +
retn 4  +
***
cmp dword_102C384 0 +
push ebx  +
push esi  +
jz loc_101129B  +
call sub_101114A  +
mov ebx eax +
jmp loc_101129D  +
xor ebx ebx +
mov eax hFile +
cmp eax 0FFFFFFFFh +
jz loc_10112AE  +
push eax  +
call ds:CloseHandle  +
mov eax dword_102D9BC +
mov esi ds:free +
test eax eax +
jz loc_10112C8  +
push eax  +
call esi  +
and dword_102D9BC 0 +
pop ecx  +
mov eax dword_102D9C4 +
test eax eax +
jz loc_10112DC  +
push eax  +
call esi  +
and dword_102D9C4 0 +
pop ecx  +
pop esi  +
mov eax ebx +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_1011356  +
cmp [ebp+arg_4] 0 +
jz loc_1011356  +
mov esi [ebp+arg_8] +
test esi esi +
jz loc_1011356  +
mov edx [ebp+arg_C] +
test edx edx +
jz loc_1011356  +
mov eax [ebp+arg_10] +
test eax eax +
jz loc_1011356  +
mov ecx [ebp+arg_14] +
test ecx ecx +
jz loc_1011356  +
push ebx  +
mov ebx dword_102D9C0 +
mov [edi] ebx +
mov edi dword_102D9B8 +
mov ebx [ebp+arg_4] +
mov [ebx] edi +
mov edi dword_102D9B4 +
mov [esi] edi +
mov esi dword_102D9B0 +
mov [edx] esi +
mov dx word_102D9A4 +
mov [ecx] dx +
mov ecx dword_102D9A8 +
mov [eax] ecx +
mov ecx dword_102D9AC +
mov [eax+4] ecx +
pop ebx  +
pop edi  +
xor eax eax +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 104h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+lpFileName] +
test eax eax +
jz loc_1011409  +
push esi  +
push 0  +
push 80h  +
push 3  +
push 0  +
push 3  +
push 80000000h  +
push eax  +
call ds:CreateFileW  +
mov esi eax +
cmp esi 0FFFFFFFFh +
jz loc_10113BD  +
push ebx  +
push esi  +
lea ebx [ebp+var_104] +
call sub_1010F6A  +
pop ebx  +
test eax eax +
jz loc_10113C2  +
push esi  +
call ds:CloseHandle  +
or eax 0FFFFFFFFh +
jmp loc_1011408  +
push edi  +
push esi  +
call ds:CloseHandle  +
mov eax 100h +
cmp word ptr [ebp+var_104] ax +
jnz loc_1011400  +
push 2  +
pop ecx  +
mov edi offset aCwin_ptn +
lea esi [ebp+var_104+2] +
xor eax eax +
cmps   +
jz loc_1011404  +
push 2  +
pop ecx  +
mov edi offset aCmex_ptn +
lea esi [ebp+var_104+2] +
xor eax eax +
cmps   +
jz loc_1011404  +
xor eax eax +
jmp loc_1011407  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1026CC5  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1011430  +
mov ecx dword_102D9C4 +
mov [eax] ecx +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 7FFFFFFFh +
ja loc_1011453  +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
xor eax eax +
jmp loc_101145E  +
mov eax [ebp+arg_4] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
ja loc_1011485  +
mov eax [ebp+arg_0] +
jb loc_101147C  +
cmp eax 0FFFFFFFFh +
ja loc_1011485  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_1011490  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push esi  +
xor esi esi +
mov [ebp+var_14] esi +
cmp [ebp+arg_0] esi +
jnz loc_10114B4  +
or eax 0FFFFFFFFh +
jmp loc_1011667  +
mov eax [ebp+arg_4] +
push edi  +
mov edi 0E000h +
mov [ebp+var_C] esi +
mov [ebp+lpBuffer] esi +
cmp eax edi +
jb loc_10114DB  +
cmp [ebp+arg_8] esi +
jle loc_10114DB  +
add eax 0FFFF2001h +
cmp [ebp+arg_8] eax +
mov dword_102D9C0 eax +
jle loc_10114E3  +
or eax 0FFFFFFFFh +
jmp loc_1011666  +
push ebx  +
mov ebx ds:malloc +
shl eax 2 +
push eax  +
call ebx  +
pop ecx  +
mov dword_102D9C4 eax +
cmp eax esi +
jz loc_1011698  +
push esi  +
push esi  +
mov esi 100h +
push esi  +
push hFile  +
call ds:SetFilePointer  +
cmp eax esi +
jnz loc_101166C  +
lea eax [ebp+nNumberOfBytesToRead] +
push eax  +
mov eax dword_102D9B4 +
add eax 7 +
cdq   +
and edx 7 +
add eax edx +
sar eax 3 +
imul eax dword_102D9B0 +
push 4  +
push eax  +
call sub_100B371  +
test eax eax +
jl loc_101166C  +
push [ebp+nNumberOfBytesToRead]  +
call ebx  +
pop ecx  +
mov [ebp+lpBuffer] eax +
test eax eax +
jz loc_101166C  +
mov esi dword_102D9C4 +
cmp [ebp+arg_4] edi +
jb loc_1011575  +
mov eax edi +
or dword ptr [esi+eax*4-38000h] 0FFFFFFFFh +
inc edi  +
movzx eax di +
cmp eax [ebp+arg_4] +
jbe loc_1011564  +
and [ebp+var_8] 0 +
cmp [ebp+arg_8] 0 +
jle loc_1011616  +
mov esi [ebp+nNumberOfBytesToRead] +
push 0  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push esi  +
push [ebp+lpBuffer]  +
push hFile  +
call ds:ReadFile  +
test eax eax +
jz loc_101166C  +
cmp [ebp+NumberOfBytesRead] esi +
jnz loc_101166C  +
mov ecx [ebp+lpBuffer] +
add ecx 2 +
call sub_1010F2B  +
push 2  +
pop ecx  +
mov edi offset aCmex_ptn +
mov esi offset dword_102D9A8 +
xor edx edx +
cmps   +
movzx eax ax +
jnz loc_10115DC  +
mov ecx 8001h +
cmp word_102D9A4 cx +
jz loc_10115E2  +
push eax  +
call sub_100AD29  +
mov esi dword_102D9C4 +
movzx ecx ax +
movzx eax cx +
cmp eax [ebp+arg_4] +
ja loc_1011607  +
mov edx 0E000h +
cmp cx dx +
jb loc_1011607  +
mov ecx [ebp+var_8] +
mov [esi+eax*4-38000h] ecx +
inc [ebp+var_8]  +
mov eax [ebp+var_8] +
cmp eax [ebp+arg_8] +
jl loc_1011583  +
push [ebp+lpBuffer]  +
mov edi ds:free +
call edi  +
mov eax [ebp+arg_8] +
shl eax 2 +
push eax  +
call ebx  +
pop ecx  +
pop ecx  +
mov [ebp+var_C] eax +
test eax eax +
jz loc_1011678  +
mov ecx eax +
mov eax [ebp+arg_0] +
xor edi edi +
mov [eax] ecx +
cmp dword_102D9C0 edi +
jle loc_1011663  +
mov eax [esi+edi*4] +
test eax eax +
jle loc_101165A  +
mov edx [ebp+var_14] +
cmp edx [ebp+arg_8] +
jge loc_101165A  +
mov [ecx+edx*4] eax +
inc edx  +
mov [ebp+var_14] edx +
inc edi  +
cmp edi dword_102D9C0 +
jl loc_1011644  +
xor eax eax +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
mov esi dword_102D9C4 +
mov edi ds:free +
test esi esi +
jz loc_1011680  +
push esi  +
call edi  +
pop ecx  +
cmp [ebp+var_C] 0 +
jz loc_101168C  +
push [ebp+var_C]  +
call edi  +
pop ecx  +
cmp [ebp+lpBuffer] 0 +
jz loc_1011698  +
push [ebp+lpBuffer]  +
call edi  +
pop ecx  +
or eax 0FFFFFFFFh +
jmp loc_1011665  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 104h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
cmp esi edi +
jz loc_101179D  +
call sub_100ABC1  +
push edi  +
push 80h  +
push 3  +
push edi  +
push 3  +
cmp [ebp+arg_4] edi +
jz loc_10116FF  +
push 0C0000000h  +
push esi  +
call ds:CreateFileW  +
mov esi eax +
cmp esi 0FFFFFFFFh +
jz loc_101179D  +
mov dword_102C384 1 +
jmp loc_101171C  +
push 80000000h  +
push esi  +
call ds:CreateFileW  +
mov esi eax +
cmp esi 0FFFFFFFFh +
jz loc_101179D  +
mov dword_102C384 edi +
push esi  +
lea ebx [ebp+var_104] +
mov hFile esi +
call sub_1010F6A  +
test eax eax +
jnz loc_1011796  +
push esi  +
mov ebx offset word_102D9A4 +
call sub_1011229  +
test eax eax +
jnz loc_1011796  +
movzx ecx [ebp+var_F4] +
mov eax [ebp+var_F8] +
mov dword_102D9B4 ecx +
movzx ecx [ebp+var_F2] +
mov dword_102D9B0 ecx +
mov ecx [ebp+var_104+2] +
mov dword_102D9A8 ecx +
mov ecx [ebp+var_FE] +
push eax  +
mov dword_102D9B8 eax +
mov dword_102D9AC ecx +
call sub_100AD79  +
movzx eax ax +
push eax  +
push offset dword_102D9BC  +
call sub_1011499  +
test eax eax +
jz loc_10117A2  +
push esi  +
call ds:CloseHandle  +
or eax 0FFFFFFFFh +
jmp loc_10117A4  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1026CC5  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
push esi  +
push edi  +
xor edi edi +
cmp [ebp+arg_C] edi +
jz loc_10119E3  +
cmp [ebp+arg_4] edi +
jz loc_10119E3  +
mov ecx dword_102D9B4 +
lea eax [ecx+7] +
cdq   +
and edx 7 +
add eax edx +
mov esi eax +
sar esi 3 +
lea eax [esi+1] +
cdq   +
sub eax edx +
mov ebx eax +
lea eax [ebp+NumberOfBytesRead] +
sar ebx 1 +
push eax  +
add ebx ebx +
push ecx  +
mov [ebp+var_10] ebx +
call sub_100B348  +
test eax eax +
jl loc_10119E3  +
lea eax [ebp+var_14] +
push eax  +
push dword_102D9B0  +
call sub_100B348  +
test eax eax +
jl loc_10119E3  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push 7  +
push [ebp+NumberOfBytesRead]  +
call sub_100B371  +
test eax eax +
jl loc_10119E3  +
shr [ebp+NumberOfBytesRead] 3 +
lea eax [ebp+nNumberOfBytesToRead] +
push eax  +
mov eax [ebp+var_14] +
mul  [ebp+NumberOfBytesRead] +
push edx  +
push eax  +
call sub_1011467  +
test eax eax +
jl loc_10119E3  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push 4  +
push [ebp+nNumberOfBytesToRead]  +
mov [ebp+NumberOfBytesRead] edi +
call sub_100B371  +
test eax eax +
jl loc_10119E3  +
mov eax [ebp+NumberOfBytesRead] +
mul  [ebp+lDistanceToMove] +
lea ecx [ebp+NumberOfBytesRead] +
push ecx  +
push edx  +
push eax  +
call sub_1011467  +
test eax eax +
jl loc_10119E3  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push 100h  +
push [ebp+NumberOfBytesRead]  +
call sub_100B371  +
test eax eax +
jl loc_10119E3  +
lea eax [ebp+lDistanceToMove] +
push eax  +
push [ebp+NumberOfBytesRead]  +
call sub_101143B  +
test eax eax +
jl loc_10119E3  +
push edi  +
push edi  +
push [ebp+lDistanceToMove]  +
push hFile  +
call ds:SetFilePointer  +
cmp eax [ebp+lDistanceToMove] +
jnz loc_10119E3  +
push edi  +
mov edi ds:ReadFile +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push 4  +
lea eax [ebp+Buffer] +
push eax  +
push hFile  +
call edi  +
test eax eax +
jz loc_10119E3  +
cmp [ebp+NumberOfBytesRead] 4 +
jnz loc_10119E3  +
lea eax [ebp+lDistanceToMove] +
push eax  +
push [ebp+arg_8]  +
call sub_100B348  +
test eax eax +
jl loc_10119E3  +
mov ecx [ebp+lDistanceToMove] +
mov eax [ebp+nNumberOfBytesToRead] +
mov [ebp+lDistanceToMove] ecx +
cmp ecx eax +
jb loc_1011920  +
mov [ebp+lDistanceToMove] eax +
cmp esi ebx +
jz loc_10119F0  +
push eax  +
call ds:malloc  +
mov ebx eax +
pop ecx  +
mov [ebp+var_C] ebx +
test ebx ebx +
jz loc_10119E3  +
push 0  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push [ebp+nNumberOfBytesToRead]  +
push ebx  +
push hFile  +
call edi  +
test eax eax +
jz loc_10119ED  +
mov eax [ebp+nNumberOfBytesToRead] +
cmp [ebp+NumberOfBytesRead] eax +
jnz loc_10119ED  +
mov eax [ebp+lDistanceToMove] +
xor edx edx +
div  esi +
push [ebp+lDistanceToMove]  +
mov edi ebx +
mov ebx [ebp+arg_4] +
push 0FFh  +
push ebx  +
mov [ebp+var_14] eax +
call memset  +
and [ebp+lDistanceToMove] 0 +
add esp 0Ch +
cmp [ebp+var_14] 0 +
jle loc_10119CD  +
mov ecx [ebp+var_10] +
mov eax esi +
sub eax ebx +
sub ecx edi +
mov [ebp+arg_4] eax +
mov [ebp+var_18] ecx +
jmp loc_10119A4  +
mov eax [ebp+arg_4] +
mov ecx [ebp+var_18] +
add eax ebx +
cmp eax [ebp+arg_8] +
jg loc_10119D9  +
add ecx edi +
cmp ecx [ebp+nNumberOfBytesToRead] +
jg loc_10119D9  +
push esi  +
push edi  +
push ebx  +
call memcpy  +
add ebx [ebp+var_10] +
add esp 0Ch +
inc [ebp+lDistanceToMove]  +
mov eax [ebp+lDistanceToMove] +
add edi esi +
cmp eax [ebp+var_14] +
jl loc_101199E  +
push [ebp+var_C]  +
call ds:free  +
pop ecx  +
jmp loc_1011A10  +
push [ebp+var_C]  +
call ds:free  +
pop ecx  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
push ebx  +
jmp loc_10119DC  +
push 0  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push [ebp+lDistanceToMove]  +
push [ebp+arg_4]  +
push hFile  +
call edi  +
test eax eax +
jz loc_10119E3  +
mov eax [ebp+lDistanceToMove] +
cmp [ebp+NumberOfBytesRead] eax +
jnz loc_10119E3  +
lea ecx [ebp+Buffer+2] +
call sub_1010F2B  +
mov ecx [ebp+arg_C] +
mov [ecx] ax +
xor eax eax +
jmp loc_10119E6  +
***
retn   +
***
cmp dword_102DC10 0 +
jz locret_1011A71  +
push esi  +
mov esi ds:GetTickCount +
push edi  +
call esi  +
mov edi eax +
call esi  +
sub eax edi +
cmp eax 3E8h +
jb loc_1011A47  +
push 0  +
call EnableEUDC  +
push offset unk_102DA08  +
push offset unk_102D9C8  +
call sub_101EAD5  +
push 1  +
call EnableEUDC  +
pop edi  +
pop esi  +
retn   +
***
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ??1CStatic@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_1011AAA  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call ??0CWnd@@QAE@XZ  +
mov dword ptr [esi] offset off_100243C +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ??1CComboBox@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_1011AE9  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
and bh bh +
adc eax offset SendMessageW +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+wParam]  +
push 14Eh  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+wParam]  +
push 144h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push [ebp+wParam]  +
push 14Ah  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 8  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+2DCh] +
mov dword ptr [ebp-4] 8 +
call ??1CStatic@@UAE@XZ  +
lea ecx [esi+29Ch] +
mov byte ptr [ebp-4] 7 +
call ??1CComboBox@@UAE@XZ  +
lea ecx [esi+25Ch] +
mov byte ptr [ebp-4] 6 +
call sub_10135CD  +
lea ecx [esi+21Ch] +
mov byte ptr [ebp-4] 5 +
call sub_10135CD  +
lea ecx [esi+1DCh] +
mov byte ptr [ebp-4] 4 +
call sub_10135CD  +
lea ecx [esi+19Ch] +
mov byte ptr [ebp-4] 3 +
call sub_10135B2  +
lea ecx [esi+154h] +
mov byte ptr [ebp-4] 2 +
call sub_101360C  +
lea ecx [esi+10Ch] +
mov byte ptr [ebp-4] 1 +
call sub_101353F  +
lea ecx [esi+60h] +
mov byte ptr [ebp-4] 0 +
call sub_10137F3  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1CDialog@@UAE@XZ  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1011C25  +
test byte ptr [ebp+8] 1 +
jz loc_1011CED  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp word ptr [esi+0B8h] 0 +
jnz loc_1011D2F  +
cmp dword ptr [esi+31Ch] 0 +
mov esi [esi+20h] +
push 1  +
push 0EF24h  +
jz loc_1011D22  +
push 0EF21h  +
jmp loc_1011D27  +
push 0EF20h  +
push esi  +
call sub_102447F  +
pop esi  +
retn   +
call sub_1011A32  +
push 1  +
mov ecx esi +
call ?EndDialog@CDialog@@QAEXH@Z  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1011A32  +
mov ecx esi +
pop esi  +
jmp ?OnCancel@CDialog@@MAEXXZ  +
***
push edi  +
push 7Dh  +
mov ecx esi +
call ?SetDlgItemTextW@CWnd@@QAEXHPBG@Z  +
push edi  +
push 7Bh  +
mov ecx esi +
call ?SetDlgItemTextW@CWnd@@QAEXHPBG@Z  +
push 1  +
push 0  +
lea edi [esi+80h] +
push dword ptr [edi]  +
call ds:InvalidateRect  +
push dword ptr [edi]  +
call ds:UpdateWindow  +
push 7Ah  +
mov ecx esi +
call ?GetDlgItem@CWnd@@QBEPAV1@H@Z  +
push eax  +
mov ecx esi +
call sub_1007E92  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 403h +
jnz loc_1011DF7  +
push esi  +
push 0  +
lea esi [ecx+12Ch] +
push 0  +
push dword ptr [esi]  +
call ds:InvalidateRect  +
push dword ptr [esi]  +
call ds:UpdateWindow  +
xor eax eax +
pop esi  +
pop ebp  +
retn 0Ch  +
pop ebp  +
jmp ?WindowProc@CWnd@@MAEJIIJ@Z  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1011E18  +
cmp ecx 7FFFFFFFh +
jbe loc_1011E1D  +
mov eax 80070057h +
test eax eax +
jl loc_1011E5A  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:__imp__vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_1011E4A  +
cmp eax esi +
ja loc_1011E4A  +
jnz loc_1011E55  +
jmp loc_1011E4F  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
push offset unk_102D098  +
push 104h  +
lea edi [esi+320h] +
push edi  +
call sub_1008286  +
test eax eax +
jl loc_1011F45  +
push 2Eh  +
push edi  +
call ds:wcsrchr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1011EA1  +
xor ecx ecx +
mov [eax] cx +
push esi  +
lea ecx [ebp-40h] +
call ??0CClientDC@@QAE@PAVCWnd@@@Z  +
and dword ptr [ebp-4] 0 +
push 8Fh  +
mov ecx esi +
call ?GetDlgItem@CWnd@@QBEPAV1@H@Z  +
push edi  +
mov ebx eax +
call ds:lstrlenW  +
mov [ebp-10h] eax +
lea eax [ebp-2Ch] +
push eax  +
push dword ptr [ebx+20h]  +
call ds:GetClientRect  +
lea eax [ebp-1Ch] +
push eax  +
push 0  +
lea eax [ebp-14h] +
push eax  +
mov eax [ebp-24h] +
sub eax [ebp-2Ch] +
push eax  +
push dword ptr [ebp-10h]  +
push edi  +
push dword ptr [ebp-3Ch]  +
call ds:GetTextExtentExPointW  +
mov eax [ebp-14h] +
cmp [ebp-10h] eax +
jle loc_1011F39  +
lea ecx [eax-3] +
xor edx edx +
test ecx ecx +
jle loc_1011F04  +
mov edx ecx +
cmp edx eax +
jge loc_1011F2F  +
sub eax edx +
mov ecx eax +
push 2Eh  +
pop eax  +
movzx ebx ax +
mov [ebp-10h] ecx +
mov eax ebx +
shl ebx 10h +
or eax ebx +
shr ecx 1 +
lea edi [esi+edx*2+320h] +
stos   +
adc ecx ecx +
add edx [ebp-10h] +
stos   +
xor eax eax +
mov [esi+edx*2+320h] ax +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-40h] +
call ??1CClientDC@@UAE@XZ  +
call __EH_epilog3  +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
push esi  +
lea ecx [ebp-40h] +
call ??0CClientDC@@QAE@PAVCWnd@@@Z  +
and dword ptr [ebp-4] 0 +
push offset word_102CE50  +
push 20h  +
lea edi [esi+528h] +
push edi  +
call sub_1008286  +
test eax eax +
jl loc_1011FF8  +
push 89h  +
mov ecx esi +
call ?GetDlgItem@CWnd@@QBEPAV1@H@Z  +
lea ecx [ebp-2Ch] +
push ecx  +
push dword ptr [eax+20h]  +
call ds:GetClientRect  +
mov ebx [ebp-3Ch] +
lea eax [ebp-14h] +
push eax  +
push edi  +
call ds:lstrlenW  +
push eax  +
push edi  +
mov edi ds:GetTextExtentPoint32W +
push ebx  +
call edi  +
mov eax [ebp-24h] +
sub eax [ebp-2Ch] +
cmp eax [ebp-14h] +
jg loc_1011FF8  +
lea eax [ebp-1Ch] +
push eax  +
push 2  +
push offset asc_1001D54  +
push dword ptr [ebp-3Ch]  +
call edi  +
mov eax [ebp-24h] +
sub eax [ebp-2Ch] +
push 2Eh  +
cdq   +
idiv  dword ptr [ebp-1Ch] +
pop ecx  +
add eax eax +
mov [esi+eax*2+524h] cx +
mov [esi+eax*2+526h] cx +
xor ecx ecx +
mov [esi+eax*2+528h] cx +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-40h] +
call ??1CClientDC@@UAE@XZ  +
call __EH_epilog3  +
retn   +
***
call __EH_prolog3_GS  +
mov esi ecx +
lea ecx [ebp-0E8h] +
call ??0CString@@QAE@XZ  +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call ?OnInitDialog@CDialog@@UAEHXZ  +
push esi  +
lea ecx [esi+60h] +
push 7Ah  +
call ?SubclassDlgItem@CWnd@@QAEHIPAV1@@Z  +
push esi  +
push 7Dh  +
lea ecx [esi+10Ch] +
call ?SubclassDlgItem@CWnd@@QAEHIPAV1@@Z  +
push esi  +
push 0EDh  +
lea ecx [esi+154h] +
call ?SubclassDlgItem@CWnd@@QAEHIPAV1@@Z  +
push esi  +
push 0D7h  +
lea ecx [esi+1DCh] +
call ?SubclassDlgItem@CWnd@@QAEHIPAV1@@Z  +
push esi  +
push 0D5h  +
lea ecx [esi+19Ch] +
call ?SubclassDlgItem@CWnd@@QAEHIPAV1@@Z  +
push esi  +
push 0DBh  +
lea ecx [esi+21Ch] +
call ?SubclassDlgItem@CWnd@@QAEHIPAV1@@Z  +
push esi  +
push 0DCh  +
lea ecx [esi+25Ch] +
call ?SubclassDlgItem@CWnd@@QAEHIPAV1@@Z  +
push esi  +
lea edi [esi+2DCh] +
push 0CAh  +
mov ecx edi +
call ?SubclassDlgItem@CWnd@@QAEHIPAV1@@Z  +
push esi  +
lea ebx [esi+29Ch] +
push 9Dh  +
mov ecx ebx +
call ?SubclassDlgItem@CWnd@@QAEHIPAV1@@Z  +
cmp dword_102DCE8 412h +
jnz loc_10120F1  +
cmp dword_102DCC4 0 +
jnz loc_10120F1  +
push 0  +
push 1  +
push dword ptr [esi+80h]  +
call ds:ShowScrollBar  +
jmp loc_1012101  +
push 0  +
push 1  +
push dword ptr [esi+80h]  +
call ds:EnableScrollBar  +
mov ecx esi +
call sub_1011E61  +
mov ecx esi +
call sub_1011F50  +
lea eax [esi+528h] +
push eax  +
push 89h  +
mov ecx esi +
call ?SetDlgItemTextW@CWnd@@QAEXHPBG@Z  +
lea eax [esi+320h] +
push eax  +
push 8Fh  +
mov ecx esi +
call ?SetDlgItemTextW@CWnd@@QAEXHPBG@Z  +
cmp dword ptr [esi+31Ch] 0 +
lea ecx [ebp-0E8h] +
jz loc_101214B  +
push 0EF21h  +
jmp loc_1012150  +
push 0EF20h  +
call ?LoadStringW@CString@@QAEHI@Z  +
push dword ptr [ebp-0E8h]  +
mov ecx esi +
call ?SetWindowTextW@CWnd@@QAEXPBG@Z  +
mov eax wParam +
mov [esi+0BCh] eax +
cmp dword_102DC18 2 +
jle loc_1012289  +
cmp dword_102DCC4 0 +
jnz loc_1012289  +
push 1  +
mov ecx edi +
call ?ShowWindow@CWnd@@QAEHH@Z  +
push 1  +
mov ecx ebx +
call ?ShowWindow@CWnd@@QAEHH@Z  +
push dword ptr [esi+2FCh]  +
mov edi ds:UpdateWindow +
call edi  +
push dword ptr [esi+2BCh]  +
call edi  +
mov eax dword_102DC18 +
lea ecx [eax-1] +
xor ebx ebx +
test ecx ecx +
jle loc_101226D  +
mov edi offset asc_1002608 +
movzx eax word_102DC1C[ebx*2] +
push eax  +
push edi  +
lea eax [ebp-28h] +
push 5  +
push eax  +
call sub_1011E02  +
add esp 10h +
test eax eax +
jl loc_10122FC  +
movzx eax word ptr dword_102DC34[ebx*2] +
push eax  +
push edi  +
lea eax [ebp-1Ch] +
push 5  +
push eax  +
call sub_1011E02  +
add esp 10h +
test eax eax +
jl loc_10122FC  +
lea eax [ebp-28h] +
push eax  +
push 0Fh  +
lea eax [ebp-48h] +
push eax  +
call sub_1008286  +
test eax eax +
jl loc_10122FC  +
push offset asc_1002600  +
push 0Fh  +
lea eax [ebp-48h] +
push eax  +
call sub_10082C0  +
test eax eax +
jl loc_10122FC  +
lea eax [ebp-1Ch] +
push eax  +
push 0Fh  +
lea eax [ebp-48h] +
push eax  +
call sub_10082C0  +
test eax eax +
jl loc_10122FC  +
lea eax [ebp-48h] +
push eax  +
push ebx  +
lea ecx [esi+29Ch] +
call sub_1011B4F  +
mov eax dword_102DC18 +
inc ebx  +
lea ecx [eax-1] +
cmp ebx ecx +
jl loc_10121C6  +
dec eax  +
lea edi [esi+29Ch] +
push eax  +
mov ecx edi +
call sub_1011B2E  +
push wParam  +
mov ecx edi +
call sub_1011B0D  +
mov ecx esi +
call sub_1007E5D  +
lea ecx [ebp-0E4h] +
push ecx  +
push 5Ch  +
push dword ptr [eax+4]  +
call ds:GetObjectW  +
lea eax [ebp-0E4h] +
push eax  +
lea ecx [esi+0A8h] +
call sub_100B71B  +
lea ecx [esi+60h] +
call sub_1013872  +
lea eax [ebp-0E4h] +
push eax  +
lea ecx [esi+194h] +
call sub_100B71B  +
push 5Ch  +
lea eax [ebp-0E4h] +
push 0  +
push eax  +
call memset  +
mov eax [esi+0CCh] +
mov ecx [esi+0D0h] +
add esp 0Ch +
cmp eax ecx +
jl loc_1012313  +
add ecx 0FFFFFFFEh +
mov [ebp-0E4h] ecx +
jmp loc_101231C  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-0E8h] +
call ??1CString@@QAE@XZ  +
xor eax eax +
call sub_1026DAC  +
retn   +
add eax 0FFFFFFFEh +
mov [ebp-0E4h] eax +
mov al byte ptr dword_102DCEC +
push 20h  +
mov [ebp-0CDh] al +
push 0EF42h  +
lea eax [ebp-88h] +
push eax  +
call sub_10245AD  +
lea eax [ebp-88h] +
push eax  +
mov edi offset word_102CE50 +
push edi  +
call ds:lstrcmpW  +
test eax eax +
lea eax [ebp-0C8h] +
jnz loc_10123B0  +
push offset aSystem  +
push 20h  +
push eax  +
call sub_1008286  +
test eax eax +
jl loc_10122FC  +
lea eax [ebp-0E4h] +
push eax  +
lea ecx [esi+0A0h] +
call sub_100B71B  +
test eax eax +
jz loc_10122FC  +
lea eax [ebp-0E4h] +
push eax  +
lea ecx [esi+14Ch] +
call sub_100B71B  +
xor esi esi +
test eax eax +
jnz loc_10123B3  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-0E8h] +
call ??1CString@@QAE@XZ  +
mov eax esi +
jmp loc_101230D  +
push edi  +
jmp loc_101235C  +
inc esi  +
jmp loc_101239A  +
***
mov eax ds:?messageMap@CWinApp@@1UAFX_MSGMAP@@B +
retn   +
***
retn   +
***
call ds:HeapSetInformation  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ??1CWinApp@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_1012414  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 68h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
push 32h  +
push 0EF3Bh  +
lea eax [ebp+WindowName] +
push eax  +
call sub_10245AD  +
lea eax [ebp+WindowName] +
push eax  +
push 0  +
call ds:FindWindowW  +
test eax eax +
jnz loc_1012455  +
inc eax  +
jmp loc_101245E  +
push eax  +
call ds:SetForegroundWindow  +
xor eax eax +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1026CC5  +
leave   +
retn   +
***
call __EH_prolog3_GS  +
mov eax [ebp+8] +
mov ebx [ebp+0Ch] +
mov esi offset asc_10027DC +
lea edi [ebp-18h] +
movs   +
mov [ebp-22Ch] ecx +
lea ecx [ebp-238h] +
mov [ebp-244h] eax +
movs   +
call ??0CString@@QAE@XZ  +
xor edi edi +
lea ecx [ebp-23Ch] +
mov [ebp-4] edi +
call ??0CString@@QAE@XZ  +
lea ecx [ebp-234h] +
mov byte ptr [ebp-4] 1 +
call ??0CString@@QAE@XZ  +
lea ecx [ebp-230h] +
mov byte ptr [ebp-4] 2 +
call ??0CString@@QAE@XZ  +
mov byte ptr [ebp-4] 3 +
cmp ebx edi +
jnz loc_1012522  +
lea ecx [ebp-230h] +
mov byte ptr [ebp-4] 2 +
call ??1CString@@QAE@XZ  +
lea ecx [ebp-234h] +
mov byte ptr [ebp-4] 1 +
call ??1CString@@QAE@XZ  +
lea ecx [ebp-23Ch] +
mov byte ptr [ebp-4] 0 +
call ??1CString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-238h] +
call ??1CString@@QAE@XZ  +
mov eax edi +
call sub_1026DAC  +
retn 8  +
mov esi ds:GetSystemMetrics +
push 4  +
call esi  +
push edi  +
mov dword_102DF60 eax +
call esi  +
push 1  +
mov [ebp-248h] eax +
call esi  +
mov ecx [ebp-22Ch] +
push 40h  +
push offset aBitmapsize  +
push offset aBitmap  +
mov [ebp-240h] eax +
call ?GetProfileIntW@CWinApp@@QAEIPBG0H@Z  +
cmp eax edi +
ja loc_1012562  +
push 40h  +
pop eax  +
mov ecx 100h +
cmp eax ecx +
jbe loc_101256E  +
push 40h  +
pop eax  +
inc eax  +
shr eax 1 +
add eax eax +
cmp eax ecx +
jbe loc_1012579  +
mov eax ecx +
cmp eax 10h +
jnb loc_1012581  +
push 10h  +
pop eax  +
mov ecx [ebp-22Ch] +
push edi  +
push offset aMinmaxflag  +
push offset aWindowsize  +
mov dword_102DF5C eax +
mov dword_102DF58 eax +
call ?GetProfileIntW@CWinApp@@QAEIPBG0H@Z  +
mov ecx [ebp-22Ch] +
mov edi offset a128128128 +
push edi  +
push offset aGrid  +
mov [ebx] eax +
mov esi offset aColor +
push esi  +
lea eax [ebp-228h] +
push eax  +
call ?GetProfileStringW@CWinApp@@QAE?AVCString@@PBG00@Z  +
push eax  +
lea ecx [ebp-238h] +
mov byte ptr [ebp-4] 4 +
call ??4CString@@QAEABV0@ABV0@@Z  +
lea ecx [ebp-228h] +
mov byte ptr [ebp-4] 3 +
call ??1CString@@QAE@XZ  +
mov ecx [ebp-22Ch] +
push offset a25500  +
push offset aCurve  +
push esi  +
lea eax [ebp-228h] +
push eax  +
call ?GetProfileStringW@CWinApp@@QAE?AVCString@@PBG00@Z  +
push eax  +
lea ecx [ebp-23Ch] +
mov byte ptr [ebp-4] 5 +
call ??4CString@@QAEABV0@ABV0@@Z  +
lea ecx [ebp-228h] +
mov byte ptr [ebp-4] 3 +
call ??1CString@@QAE@XZ  +
mov ecx [ebp-22Ch] +
push edi  +
push offset aFitting  +
push esi  +
lea eax [ebp-228h] +
push eax  +
call ?GetProfileStringW@CWinApp@@QAE?AVCString@@PBG00@Z  +
push eax  +
lea ecx [ebp-234h] +
mov byte ptr [ebp-4] 6 +
call ??4CString@@QAEABV0@ABV0@@Z  +
lea ecx [ebp-228h] +
mov byte ptr [ebp-4] 3 +
call ??1CString@@QAE@XZ  +
mov ebx 104h +
push ebx  +
push ecx  +
lea eax [ebp-238h] +
mov ecx esp +
mov [ebp-228h] esp +
push eax  +
call ??0CString@@QAE@ABV0@@Z  +
lea eax [ebp-220h] +
push eax  +
call sub_1024615  +
mov esi ds:wcstok +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-220h] +
push eax  +
call esi  +
mov edi ds:_wtoi +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_10126A8  +
mov byte ptr [ebp-221h] 0 +
jmp loc_10126B2  +
push eax  +
call edi  +
pop ecx  +
mov [ebp-221h] al +
lea eax [ebp-18h] +
push eax  +
push 0  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_10126C8  +
mov [ebp-222h] al +
jmp loc_10126D2  +
push eax  +
call edi  +
pop ecx  +
mov [ebp-222h] al +
lea eax [ebp-18h] +
push eax  +
push 0  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_10126E4  +
xor al al +
jmp loc_10126E8  +
push eax  +
call edi  +
pop ecx  +
movzx ecx byte ptr [ebp-222h] +
movzx eax al +
shl eax 8 +
or eax ecx +
movzx ecx byte ptr [ebp-221h] +
shl eax 8 +
or eax ecx +
push ebx  +
push ecx  +
mov dword ptr unk_102DD4C eax +
lea eax [ebp-23Ch] +
mov ecx esp +
mov [ebp-228h] esp +
push eax  +
call ??0CString@@QAE@ABV0@@Z  +
lea eax [ebp-220h] +
push eax  +
call sub_1024615  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-220h] +
push eax  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1012745  +
mov [ebp-221h] al +
jmp loc_101274F  +
push eax  +
call edi  +
pop ecx  +
mov [ebp-221h] al +
lea eax [ebp-18h] +
push eax  +
push 0  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1012765  +
mov [ebp-222h] al +
jmp loc_101276F  +
push eax  +
call edi  +
pop ecx  +
mov [ebp-222h] al +
lea eax [ebp-18h] +
push eax  +
push 0  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1012781  +
xor al al +
jmp loc_1012785  +
push eax  +
call edi  +
pop ecx  +
movzx ecx byte ptr [ebp-222h] +
movzx eax al +
shl eax 8 +
or eax ecx +
movzx ecx byte ptr [ebp-221h] +
shl eax 8 +
or eax ecx +
push ebx  +
push ecx  +
mov dword ptr unk_102DD44 eax +
lea eax [ebp-234h] +
mov ecx esp +
mov [ebp-228h] esp +
push eax  +
call ??0CString@@QAE@ABV0@@Z  +
lea eax [ebp-220h] +
push eax  +
call sub_1024615  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-220h] +
push eax  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_10127E2  +
mov [ebp-221h] al +
jmp loc_10127EC  +
push eax  +
call edi  +
pop ecx  +
mov [ebp-221h] al +
lea eax [ebp-18h] +
push eax  +
push 0  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1012802  +
mov [ebp-222h] al +
jmp loc_101280C  +
push eax  +
call edi  +
pop ecx  +
mov [ebp-222h] al +
lea eax [ebp-18h] +
push eax  +
push 0  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_101281E  +
xor al al +
jmp loc_1012822  +
push eax  +
call edi  +
pop ecx  +
movzx ecx byte ptr [ebp-222h] +
movzx eax al +
shl eax 8 +
or eax ecx +
movzx ecx byte ptr [ebp-221h] +
shl eax 8 +
push offset Class  +
or eax ecx +
mov ecx [ebp-22Ch] +
push offset aMainwindowsize  +
mov dword_102DD48 eax +
push offset aWindowsize  +
lea eax [ebp-228h] +
push eax  +
call ?GetProfileStringW@CWinApp@@QAE?AVCString@@PBG00@Z  +
push eax  +
lea ecx [ebp-230h] +
mov byte ptr [ebp-4] 7 +
call ??4CString@@QAEABV0@ABV0@@Z  +
lea ecx [ebp-228h] +
mov byte ptr [ebp-4] 3 +
call ??1CString@@QAE@XZ  +
mov ecx [ebp-230h] +
xor eax eax +
cmp [ecx] ax +
jnz loc_10128BD  +
mov ecx [ebp-244h] +
mov [ecx] eax +
mov [ecx+4] eax +
mov eax [ebp-248h] +
cdq   +
push 5  +
pop esi  +
idiv  esi +
shl eax 2 +
mov [ecx+8] eax +
mov eax [ebp-240h] +
cdq   +
idiv  esi +
shl eax 2 +
mov [ecx+0Ch] eax +
jmp loc_1012924  +
push ebx  +
push ecx  +
lea eax [ebp-230h] +
mov ecx esp +
mov [ebp-240h] esp +
push eax  +
call ??0CString@@QAE@ABV0@@Z  +
lea eax [ebp-220h] +
push eax  +
call sub_1024615  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-220h] +
push eax  +
call esi  +
push eax  +
call edi  +
mov ebx [ebp-244h] +
mov [ebx] eax +
lea eax [ebp-18h] +
push eax  +
push 0  +
call esi  +
push eax  +
call edi  +
mov [ebx+4] eax +
lea eax [ebp-18h] +
push eax  +
push 0  +
call esi  +
push eax  +
call edi  +
mov [ebx+8] eax +
lea eax [ebp-18h] +
push eax  +
push 0  +
call esi  +
push eax  +
call edi  +
add esp 30h +
mov [ebx+0Ch] eax +
xor edi edi +
inc edi  +
jmp loc_10124DC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+uCmd]  +
mov ecx [ecx+20h] +
push ecx  +
call ds:GetWindow  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+uCmd]  +
push dword ptr [ecx+20h]  +
call ds:GetWindow  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_0] +
push eax  +
push 0Ch  +
push eax  +
call ?AfxFindResourceHandle@@YGPAUHINSTANCE__@@PBG0@Z  +
push eax  +
call ds:LoadCursorW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push edi  +
mov edi ecx +
jnz loc_1012A11  +
mov ecx [edi+20h] +
push esi  +
push 0  +
call sub_1012952  +
jmp loc_1012A0A  +
push dword ptr [esi+20h]  +
call ds:GetParent  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
cmp [edi+20h] eax +
jnz loc_1012A01  +
call ds:GetActiveWindow  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
cmp esi eax +
jnz loc_10129EF  +
call ds:GetCapture  +
test eax eax +
jnz loc_10129EF  +
mov eax [edi+20h] +
push dword ptr [eax+20h]  +
call ds:SetActiveWindow  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
push 0  +
push 1  +
push 363h  +
push dword ptr [esi+20h]  +
call ds:SendMessageW  +
push 2  +
mov ecx esi +
call sub_1012931  +
mov esi eax +
test esi esi +
jnz loc_10129AF  +
pop esi  +
push [ebp+arg_0]  +
mov ecx edi +
call ?OnIdle@CWinApp@@UAEHJ@Z  +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
push 6Dh  +
mov [ebp+var_4] ecx +
call sub_1012972  +
mov ecx [ebp+var_4] +
push 71h  +
mov dword_102DD0C eax +
call sub_1012972  +
mov esi ds:LoadCursorW +
mov edi 7F03h +
push edi  +
xor ebx ebx +
push ebx  +
mov dword_102DD28 eax +
call esi  +
push edi  +
push ebx  +
mov dword_102DD1C eax +
call esi  +
push edi  +
push ebx  +
mov dword_102DD20 eax +
call esi  +
push edi  +
push ebx  +
mov dword_102DD10 eax +
call esi  +
push edi  +
push ebx  +
mov dword_102DD14 eax +
call esi  +
push edi  +
push ebx  +
mov dword_102DD18 eax +
call esi  +
push edi  +
push ebx  +
mov dword_102DD2C eax +
call esi  +
mov ecx [ebp+var_4] +
push 0A1h  +
mov dword_102DD24 eax +
call sub_1012972  +
mov dword_102DD30 eax +
mov eax offset dword_102DD0C +
cmp [eax] ebx +
jz loc_1012B19  +
add eax 4 +
cmp eax offset dword_102DD30 +
jle loc_1012AAF  +
push 7F84h  +
push ebx  +
call esi  +
push 7F83h  +
push ebx  +
mov dword_102DCF4 eax +
call esi  +
push 7F82h  +
push ebx  +
mov dword_102DCF8 eax +
call esi  +
push 7F85h  +
push ebx  +
mov dword_102DCFC eax +
call esi  +
push 7F86h  +
push ebx  +
mov dword_102DD00 eax +
call esi  +
mov dword_102DD04 eax +
mov eax offset dword_102DCF4 +
cmp [eax] ebx +
jz loc_1012B19  +
add eax 4 +
cmp eax offset dword_102DD04 +
jle loc_1012B03  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
xor eax eax +
jmp loc_1012B14  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 68h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp-4] eax +
push esi  +
push edi  +
push 2  +
mov esi ecx +
call sub_1007FCE  +
push 32h  +
mov edi eax +
push 0EF3Bh  +
lea eax [ebp-68h] +
push eax  +
call sub_10245AD  +
mov eax [esi+20h] +
test eax eax +
jz loc_1012B5B  +
mov eax [eax+20h] +
push edi  +
push offset Class  +
lea ecx [ebp-68h] +
push ecx  +
push eax  +
call ds:ShellAboutW  +
mov ecx [ebp-4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1026CC5  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 250h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
cmp dword_102C3D0 0 +
mov [ebp+var_250] ecx +
jnz loc_1012C52  +
cmp dword_102DCC8 0 +
jz loc_1012C52  +
push esi  +
mov esi ds:GetTickCount +
push edi  +
call esi  +
mov edi eax +
call esi  +
sub eax edi +
cmp eax 3E8h +
jb loc_1012BC0  +
push 0  +
call EnableEUDC  +
push 20h  +
push 0EF42h  +
lea eax [ebp+var_44] +
push eax  +
call sub_10245AD  +
mov edi 104h +
push edi  +
lea eax [ebp+FileName] +
push eax  +
lea eax [ebp+var_44] +
push eax  +
call sub_101E94A  +
test eax eax +
jz loc_1012C44  +
mov esi ds:DeleteFileW +
lea eax [ebp+FileName] +
push eax  +
call esi  +
lea eax [ebp+FileName] +
push 2Eh  +
push eax  +
call ds:wcsrchr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1012C44  +
xor ecx ecx +
push offset a_euf  +
mov [eax] cx +
push edi  +
lea eax [ebp+FileName] +
push eax  +
call sub_10082C0  +
test eax eax +
jl loc_1012C50  +
lea eax [ebp+FileName] +
push eax  +
call esi  +
call sub_101E862  +
push 1  +
call EnableEUDC  +
pop edi  +
pop esi  +
mov ecx [ebp+var_250] +
call ?ExitInstance@CWinApp@@UAEHXZ  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1026CC5  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
and wParam 0 +
sub esp 20h +
push edi  +
call ds:GetSystemDefaultLCID  +
mov dword_102DCE8 eax +
call ds:GetACP  +
and dword_102DCC4 0 +
and dword_102DCC8 0 +
mov edi eax +
mov eax dword_102DCE8 +
mov edx 404h +
sub eax edx +
jz loc_1012D2A  +
sub eax 0Dh +
jz loc_1012D4F  +
dec eax  +
jz loc_1012D43  +
sub eax 3F2h +
jz loc_1012D18  +
lea ecx [edx-4] +
sub eax ecx +
jz loc_1012D24  +
sub eax ecx +
jz loc_1012D0E  +
push 2  +
lea eax [ebp+var_20] +
push eax  +
push edi  +
call ds:TranslateCharsetInfo  +
test eax eax +
jz loc_1012CE8  +
mov eax [ebp+var_20] +
mov dword_102DCEC eax +
push offset aMicrosoftSansS  +
xor eax eax +
inc eax  +
push 20h  +
push offset unk_102DC84  +
mov dword_102DCC8 eax +
mov dword_102DCC4 eax +
call sub_1008286  +
test eax eax +
jge loc_1012D34  +
xor eax eax +
jmp loc_1012D40  +
mov dword_102DCE8 804h +
mov dword_102DCEC 86h +
jmp loc_1012D34  +
mov dword_102DCE8 edx +
mov dword_102DCEC 88h +
push edi  +
call sub_1015775  +
neg eax  +
sbb eax eax +
neg eax  +
pop edi  +
leave   +
retn   +
mov dword_102DCEC 81h +
jmp loc_1012D34  +
mov dword_102DCEC 80h +
jmp loc_1012D34  +
***
mov edi edi +
push esi  +
push edi  +
mov edi 104h +
push edi  +
mov esi offset unk_102DD50 +
push esi  +
call ds:GetSystemWindowsDirectoryW  +
test eax eax +
jnz loc_1012D7E  +
xor eax eax +
jmp loc_1012DD4  +
push offset word_1002830  +
push edi  +
push esi  +
call sub_10082C0  +
test eax eax +
jl loc_1012D7A  +
push 0  +
call ds:CoInitialize  +
push offset ppv  +
push offset riid  +
push 1  +
push 0  +
push offset rclsid  +
call ds:CoCreateInstance  +
test eax eax +
jl loc_1012D7A  +
push 0EF3Bh  +
mov ecx offset dword_102DF68 +
call ?LoadStringW@CString@@QAEHI@Z  +
push 0EF5Fh  +
mov ecx offset dword_102DF6C +
call ?LoadStringW@CString@@QAEHI@Z  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
retn   +
***
call __EH_prolog3_GS  +
mov [ebp-420h] ecx +
lea ecx [ebp-41Ch] +
call ??0CString@@QAE@XZ  +
mov ecx [ebp-420h] +
xor ebx ebx +
mov [ebp-4] ebx +
call sub_1012420  +
test eax eax +
jnz loc_1012E27  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-41Ch] +
call ??1CString@@QAE@XZ  +
xor eax eax +
call sub_1026DAC  +
retn   +
push ebx  +
push offset Class  +
call ds:RegisterApplicationRestart  +
test eax eax +
jl loc_1012E10  +
lea eax [ebp-42Ch] +
push eax  +
mov dword ptr [ebp-42Ch] 8 +
mov dword ptr [ebp-428h] 0FFh +
call ds:InitCommonControlsEx  +
test eax eax +
jz loc_1012E10  +
mov esi 104h +
push esi  +
lea eax [ebp-218h] +
push eax  +
call ds:GetSystemWindowsDirectoryW  +
push offset aFonts  +
push esi  +
lea eax [ebp-218h] +
push eax  +
call sub_10082C0  +
cmp eax ebx +
jl loc_1012E10  +
push offset aEudcadm_tte  +
push esi  +
lea eax [ebp-218h] +
push eax  +
call sub_10082C0  +
cmp eax ebx +
jl loc_1012E10  +
push ebx  +
push 80h  +
push 2  +
push ebx  +
push 4  +
push 40000000h  +
lea eax [ebp-218h] +
push eax  +
call ds:CreateFileW  +
or edi 0FFFFFFFFh +
cmp eax edi +
jnz loc_1012EF9  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+8] +
push 100h  +
lea ecx [ebp-418h] +
push ecx  +
push 0EF79h  +
push eax  +
call ds:LoadStringW  +
push ebx  +
push ebx  +
lea eax [ebp-418h] +
push eax  +
call ?AfxMessageBox@@YGHPBGII@Z  +
mov [ebp-4] edi +
jmp loc_1012E14  +
push eax  +
call ds:CloseHandle  +
lea eax [ebp-218h] +
push eax  +
call ds:DeleteFileW  +
mov esi ds:GetSysColor +
push 0Fh  +
call esi  +
push 14h  +
mov dword_102DD40 eax +
call esi  +
push 10h  +
mov dword_102DD3C eax +
call esi  +
push 5  +
mov dword_102DD38 eax +
call esi  +
mov esi [ebp-420h] +
mov ecx esi +
mov dword_102DD34 eax +
call ?Enable3dControls@CWinApp@@IAEHXZ  +
call sub_101ECED  +
test eax eax +
jz loc_1012EF1  +
push off_102CB68  +
mov ecx esi +
call ?SetRegistryKey@CWinApp@@IAEXPBG@Z  +
lea eax [ebp-424h] +
push eax  +
lea eax [ebp-440h] +
push eax  +
mov ecx esi +
call sub_101246F  +
test eax eax +
jz loc_1012EF1  +
mov ecx esi +
call sub_1012C6E  +
test eax eax +
jz loc_1012EF1  +
mov ecx esi +
call sub_1012A25  +
test eax eax +
jz loc_1012EF1  +
mov ecx esi +
call sub_1012D60  +
lea ecx [ebp-41Ch] +
test eax eax +
jnz loc_1012FAE  +
mov [ebp-4] edi +
jmp loc_1012E1A  +
push 0EF3Bh  +
call ?LoadStringW@CString@@QAEHI@Z  +
push 260h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-430h] eax +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_1012FDA  +
mov ecx eax +
call sub_1018791  +
mov ebx eax +
push 2  +
sub esp 10h +
mov edi esp +
lea esi [ebp-440h] +
movs   +
movs   +
movs   +
push 0CF0000h  +
push dword ptr [ebp-41Ch]  +
mov ecx ebx +
mov byte ptr [ebp-4] 0 +
movs   +
call sub_101881A  +
test eax eax +
jz loc_1012E10  +
mov esi [ebp-420h] +
push dword ptr [esi+78h]  +
mov ecx ebx +
call ?ShowWindow@CWnd@@QAEHH@Z  +
cmp dword ptr [ebp-424h] 0 +
jz loc_101302B  +
push 3  +
mov ecx ebx +
call ?ShowWindow@CWnd@@QAEHH@Z  +
push dword ptr [ebx+20h]  +
call ds:UpdateWindow  +
push ebx  +
lea ecx [ebp-4E8h] +
mov [esi+20h] ebx +
call sub_1008336  +
lea ecx [ebp-4E8h] +
mov byte ptr [ebp-4] 2 +
call sub_1009585  +
test eax eax +
jnz loc_101307D  +
xor esi esi +
lea ecx [ebp-4E8h] +
mov byte ptr [ebp-4] 0 +
call sub_1008376  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-41Ch] +
call ??1CString@@QAE@XZ  +
mov eax esi +
jmp loc_1012E21  +
lea ecx [ebx+0C4h] +
call sub_101678B  +
push 0  +
push 8008h  +
push 111h  +
push dword ptr [ebx+20h]  +
call ds:SendMessageW  +
xor esi esi +
inc esi  +
jmp loc_1013058  +
***
mov eax offset off_1002850 +
retn   +
***
retn   +
***
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+8] +
cmp ecx 0Ch +
jnb loc_1013153  +
push edi  +
mov [esi+9Ch] ecx +
mov ax word_102DC1C[ecx*2] +
mov edx 0FFF0h +
mov edi edx +
and ax di +
mov [esi+50h] ax +
lea eax dword_102DC34[ecx*2] +
mov di [eax] +
and di dx +
sub di 50h +
mov [esi+52h] di +
mov dx word_102DC1C[ecx*2] +
mov [esi+54h] dx +
mov ax [eax] +
mov [esi+56h] ax +
xor edi edi +
cmp dword_102DCE8 804h +
jnz loc_1013132  +
cmp dword_102DCC4 edi +
jnz loc_1013132  +
push ecx  +
call sub_1015588  +
mov ax [esi+54h] +
push 1  +
mov [esi+58h] ax +
push edi  +
xor eax eax +
push 1  +
mov ecx esi +
mov [esi+68h] edi +
mov [esi+64h] edi +
mov [esi+74h] ax +
call ?SetScrollPos@CWnd@@QAEHHHH@Z  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0E4h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
push 37h  +
pop ecx  +
mov esi offset dword_102DC18 +
lea edi [ebp+var_E0] +
movs   +
mov edi [ebp+var_90] +
mov dl bl +
xor eax eax +
shr ebx 8 +
xor esi esi +
test edi edi +
jle loc_10131D0  +
mov al [ebp+esi+var_8C] +
mov cl byte ptr [ebp+arg_0] +
and al 0F0h +
mov [ebp+var_E1] al +
cmp cl al +
jb loc_10131BB  +
mov al [ebp+esi+var_80] +
and al 0F0h +
cmp cl al +
jbe loc_10131F9  +
cmp cl [ebp+var_E1] +
jb loc_10131CE  +
lea eax [esi+1] +
mov esi eax +
cmp esi edi +
jl loc_101319B  +
jmp loc_10131D0  +
mov eax esi +
cmp [ebp+arg_4] 0 +
jz loc_10131E7  +
cmp eax edi +
jnz loc_10131DE  +
xor eax eax +
inc bl  +
mov dl [ebp+eax+var_8C] +
jmp loc_10131F6  +
test eax eax +
jnz loc_10131EF  +
dec bl  +
mov eax edi +
mov dl [ebp+eax+var_81] +
and dl 0F0h +
movzx ax bl +
movzx cx dl +
shl ax 8 +
or ax cx +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1026CC5  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0F8h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
and [ebp+var_F0] 0 +
push esi  +
push edi  +
mov edx ecx +
push 37h  +
shr eax 8 +
pop ecx  +
mov esi offset dword_102DC18 +
lea edi [ebp+var_EC] +
movs   +
movzx cx byte ptr [edx+55h] +
mov esi [ebp+var_9C] +
movzx ax al +
sub ax cx +
cmp esi 0Bh +
movzx edi ax +
mov [ebp+var_F4] edi +
jle loc_101327B  +
xor eax eax +
jmp loc_1013381  +
mov al [ebp+var_98] +
and al 0F0h +
mov [ebp+var_10] al +
xor eax eax +
inc eax  +
cmp esi eax +
push ebx  +
jle loc_10132B0  +
mov cl [ebp+eax+var_8D] +
mov bl [ebp+eax+var_98] +
and bl 0F0h +
and cl 0F0h +
sub bl cl +
sub bl 10h +
mov [ebp+eax+var_10] bl +
inc eax  +
cmp eax esi +
jl loc_101328E  +
or cl 0FFh +
sub cl [ebp+esi+var_8D] +
and cl 0F0h +
mov [ebp+eax+var_10] cl +
xor eax eax +
test esi esi +
jle loc_10132E6  +
mov cl byte ptr [ebp+arg_0] +
mov bl [ebp+eax+var_98] +
and bl 0F0h +
cmp cl bl +
jb loc_10132E1  +
cmp cl [ebp+eax+var_8C] +
jbe loc_10132ED  +
inc eax  +
cmp eax esi +
jl loc_10132CA  +
xor eax eax +
jmp loc_1013380  +
mov cl [edx+54h] +
mov [ebp+var_F8] eax +
xor eax eax +
movzx esi di +
mov edi [ebp+var_F8] +
cmp [ebp+edi+var_98] cl +
jbe loc_1013324  +
cmp [ebp+eax+var_98] cl +
jbe loc_101333B  +
cmp eax edi +
jg loc_101333B  +
lea ebx [esi+1] +
movzx edi [ebp+eax+var_10] +
imul edi ebx +
jmp loc_1013343  +
mov bl [ebp+eax+var_98] +
and bl 0F0h +
cmp bl cl +
jnb loc_101333B  +
cmp eax edi +
jle loc_101333B  +
lea ebx [esi-1] +
jmp loc_101331A  +
movzx edi [ebp+eax+var_10] +
imul edi esi +
add [ebp+var_F0] edi +
inc eax  +
cmp eax [ebp+var_9C] +
jl loc_10132FB  +
movzx ax [ebp+eax+var_10] +
movzx ecx word ptr [edx+54h] +
imul ax word ptr [ebp+var_F4] +
mov edx ecx +
and edx 0Fh +
sub dx ax +
sub dx cx +
sub dx word ptr [ebp+var_F0] +
add dx word ptr [ebp+arg_0] +
movzx eax dx +
shr eax 4 +
pop ebx  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1026CC5  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
mov esi ecx +
jnz loc_10133AA  +
movzx eax word ptr [esi+54h] +
jmp loc_10133D2  +
push ebx  +
movzx ebx word ptr [esi+56h] +
push edi  +
movzx edi word ptr [esi+54h] +
jmp loc_10133C9  +
push edi  +
mov ecx esi +
call sub_101321E  +
movzx eax ax +
cmp eax [ebp+arg_0] +
jge loc_10133CE  +
add edi 10h +
cmp di bx +
jbe loc_10133B6  +
mov eax edi +
pop edi  +
pop ebx  +
and eax 0FFF0h +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0E0h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
push 37h  +
pop ecx  +
mov esi offset dword_102DC18 +
lea edi [ebp+var_E0] +
movs   +
mov edi [ebp+var_90] +
mov dl bl +
xor eax eax +
shr ebx 8 +
xor esi esi +
test edi edi +
jle loc_1013446  +
mov al [ebp+esi+var_8C] +
mov cl byte ptr [ebp+arg_0] +
cmp cl al +
jb loc_1013442  +
cmp cl [ebp+esi+var_80] +
jbe loc_10134AD  +
cmp cl al +
jb loc_1013442  +
lea eax [esi+1] +
mov esi eax +
cmp esi edi +
jl loc_101341F  +
jmp loc_1013449  +
mov eax esi +
jmp loc_1013449  +
mov cl byte ptr [ebp+arg_0] +
cmp [ebp+arg_8] 0 +
jz loc_101347F  +
cmp eax edi +
jnz loc_1013457  +
inc bl  +
xor eax eax +
cmp [ebp+arg_4] 10h +
jge loc_1013466  +
mov dl [ebp+eax+var_8C] +
jmp loc_10134AD  +
mov al [ebp+eax+var_8C] +
mov dl al +
xor dl cl +
and dl 0Fh +
xor dl al +
cmp dl al +
jnb loc_10134AD  +
add dl 10h +
jmp loc_10134AD  +
test eax eax +
jnz loc_1013487  +
mov eax edi +
dec bl  +
cmp [ebp+arg_4] 10h +
jge loc_1013496  +
mov dl [ebp+eax+var_81] +
jmp loc_10134AD  +
mov al [ebp+eax+var_81] +
mov dl al +
xor dl cl +
and dl 0Fh +
xor dl al +
cmp dl al +
jbe loc_10134AD  +
add dl 0F0h +
movzx ax bl +
movzx cx dl +
shl ax 8 +
or ax cx +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1026CC5  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
movzx eax word ptr [esi+52h] +
push edi  +
push eax  +
xor edi edi +
call sub_101321E  +
mov [esi+60h] eax +
movzx eax word ptr [esi+50h] +
push eax  +
mov ecx esi +
call sub_101321E  +
add eax [ebp+arg_0] +
mov ecx esi +
push eax  +
call sub_1013396  +
mov ecx dword_102DC68 +
or al [ebp+arg_4] +
xor esi esi +
test ecx ecx +
jle loc_1013527  +
lea edx dword_102DC78[esi] +
cmp al [edx-0Ch] +
jb loc_1013522  +
cmp al [edx] +
ja loc_1013522  +
xor edi edi +
inc edi  +
inc esi  +
cmp esi ecx +
jl loc_1013510  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
retn   +
***
call __EH_prolog3_catch  +
mov esi ecx +
mov [ebp-14h] esi +
mov dword ptr [esi] offset off_1002AE4 +
and dword ptr [ebp-4] 0 +
lea ecx [esi+40h] +
mov byte ptr [ebp-4] 2 +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
mov dword ptr [ebp-4] 1 +
jmp loc_101357F  +
mov dword ptr [ebp-4] 1 +
mov eax offset loc_101357C +
retn   +
mov esi [ebp-14h] +
lea ecx [esi+40h] +
mov byte ptr [ebp-4] 0 +
mov dword ptr [ecx] offset off_100219C +
call sub_1007D75  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1CEdit@@UAE@XZ  +
call __EH_epilog3  +
retn   +
***
retn   +
***
mov dword ptr [ecx] offset off_1002BAC +
jmp ??1CStatic@@UAE@XZ  +
***
retn   +
***
mov dword ptr [ecx] offset off_1002C74 +
jmp ??1CStatic@@UAE@XZ  +
***
retn   +
***
and dword ptr [esi+44h] 0 +
mov dword ptr [esi+40h] offset off_100219C +
mov eax esi +
pop esi  +
retn   +
***
call __EH_prolog3_catch  +
mov esi ecx +
mov [ebp-14h] esi +
mov dword ptr [esi] offset off_1002D3C +
and dword ptr [ebp-4] 0 +
lea ecx [esi+40h] +
mov byte ptr [ebp-4] 2 +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
mov dword ptr [ebp-4] 1 +
jmp loc_101364C  +
mov dword ptr [ebp-4] 1 +
mov eax offset loc_1013649 +
retn   +
mov esi [ebp-14h] +
lea ecx [esi+40h] +
mov byte ptr [ebp-4] 0 +
mov dword ptr [ecx] offset off_100219C +
call sub_1007D75  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1CWnd@@UAE@XZ  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call ??0CWnd@@QAE@XZ  +
mov dword ptr [esi] offset off_1002E04 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ??1CEdit@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_10136A7  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_8]  +
mov esi eax +
push [ebp+arg_4]  +
xor ebx ebx +
dec esi  +
push esi  +
push edi  +
call ds:__imp__vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_10136DC  +
cmp eax esi +
ja loc_10136DC  +
jz loc_10136E1  +
jmp loc_10136E9  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
mov eax esi +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_10136F2  +
mov [ecx] eax +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push esi  +
mov esi ecx +
cmp eax 0Ch +
jnb loc_10137E9  +
mov [esi+9Ch] eax +
add eax eax +
mov cx word_102DC1C[eax] +
mov [esi+54h] cx +
lea ecx dword_102DC34[eax] +
mov dx [ecx] +
mov [esi+56h] dx +
mov dx [ecx] +
mov ecx 0FFF0h +
push edi  +
mov edi ecx +
and dx di +
sub dx 50h +
mov [esi+52h] dx +
cmp word_102D2A0 0 +
jz loc_101378D  +
mov edi ds:wcstol +
push ebx  +
push 10h  +
push 0  +
mov ebx offset word_102D2A0 +
push ebx  +
call edi  +
push 10h  +
push 0  +
push ebx  +
mov [esi+58h] ax +
call edi  +
movzx ecx word ptr [esi+52h] +
and eax 0FFF0h +
add esp 18h +
mov [esi+50h] ax +
pop ebx  +
cmp cx ax +
ja loc_10137A3  +
mov [esi+50h] cx +
jmp loc_10137A3  +
mov ax word_102DC1C[eax] +
and ax cx +
mov [esi+50h] ax +
mov ax [esi+54h] +
mov [esi+58h] ax +
cmp dword_102DCE8 804h +
pop edi  +
jnz loc_10137C4  +
cmp dword_102DCC4 0 +
jnz loc_10137C4  +
push dword ptr [esi+9Ch]  +
call sub_1015588  +
movzx eax word ptr [esi+50h] +
and dword ptr [esi+68h] 0 +
and dword ptr [esi+64h] 0 +
push eax  +
mov ecx esi +
call sub_101321E  +
mov [esi+74h] ax +
cwde   +
push 1  +
push eax  +
push 1  +
mov ecx esi +
call ?SetScrollPos@CWnd@@QAEHHHH@Z  +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3_catch  +
mov esi ecx +
mov [ebp-14h] esi +
mov dword ptr [esi] offset off_1002ECC +
and dword ptr [ebp-4] 0 +
lea ecx [esi+48h] +
mov byte ptr [ebp-4] 3 +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea ecx [esi+40h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
mov dword ptr [ebp-4] 2 +
jmp loc_101383B  +
mov dword ptr [ebp-4] 2 +
mov eax offset loc_1013838 +
retn   +
mov esi [ebp-14h] +
lea ecx [esi+48h] +
mov edi offset off_100219C +
mov byte ptr [ebp-4] 1 +
mov [ecx] edi +
call sub_1007D75  +
lea ecx [esi+40h] +
mov byte ptr [ebp-4] 0 +
mov [ecx] edi +
call sub_1007D75  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1CEdit@@UAE@XZ  +
call __EH_epilog3  +
retn   +
***
call __EH_prolog3_GS  +
mov esi offset aFa40 +
lea edi [ebp-1Ch] +
movs   +
movs   +
mov ebx ecx +
push ebx  +
lea ecx [ebp-40h] +
movs   +
call ??0CClientDC@@QAE@PAVCWnd@@@Z  +
and dword ptr [ebp-4] 0 +
lea esi [ebx+78h] +
push esi  +
mov ecx ebx +
call sub_1007E78  +
push 1  +
lea ecx [ebp-40h] +
call ?SetMapMode@CDC@@UAEHH@Z  +
mov [ebp-2Ch] eax +
lea eax [ebx+48h] +
push eax  +
lea ecx [ebp-40h] +
call ?SelectObject@CDC@@UAEPAVCFont@@PAV2@@Z  +
lea edi [ebx+88h] +
push edi  +
mov [ebp-20h] eax +
push 4  +
lea eax [ebp-1Ch] +
push eax  +
push dword ptr [ebp-3Ch]  +
call ds:GetTextExtentPoint32W  +
push dword ptr [ebp-20h]  +
add dword ptr [edi] 6 +
lea ecx [ebp-40h] +
call ?SelectObject@CDC@@UAEPAVCFont@@PAV2@@Z  +
mov eax [esi+0Ch] +
sub eax [esi+4] +
push 6  +
sub eax 16h +
cdq   +
pop ecx  +
idiv  ecx +
mov ecx offset dword_102E148 +
mov [ebx+70h] eax +
mov eax [esi+8] +
sub eax [edi] +
sub eax [esi] +
sub eax 42h +
cdq   +
and edx 0Fh +
add eax edx +
sar eax 4 +
and dword ptr [ebp-28h] 0 +
mov [ebx+6Ch] eax +
mov eax offset unk_102E750 +
mov dword ptr [eax-8] 1 +
mov edx [ebx+70h] +
add edx 4 +
imul edx [ebp-28h] +
inc edx  +
mov [eax-4] edx +
mov edx [edi] +
inc edx  +
mov [eax] edx +
mov edx [eax-4] +
mov esi [ebx+70h] +
add esi edx +
mov edx [eax] +
add edx 4 +
and dword ptr [ebp-24h] 0 +
mov [eax+4] esi +
mov [ebp-20h] edx +
mov edx [ebx+6Ch] +
add edx 4 +
imul edx [ebp-24h] +
add edx [ebp-20h] +
push 10h  +
mov [ecx] edx +
mov edx [eax-4] +
mov esi [ecx] +
mov [ecx+4] edx +
add esi [ebx+6Ch] +
mov [ecx+8] esi +
mov esi [ebx+70h] +
add esi edx +
inc dword ptr [ebp-24h]  +
pop edx  +
mov [ecx+0Ch] esi +
add ecx edx +
cmp [ebp-24h] edx +
jl loc_101394B  +
inc dword ptr [ebp-28h]  +
add eax edx +
cmp eax offset dword_102E7B0 +
jl loc_101391A  +
xor ecx ecx +
mov eax offset unk_102E048 +
mov esi [ebx+6Ch] +
add esi 4 +
imul esi ecx +
add esi [ebp-20h] +
mov dword ptr [eax+4] 1 +
mov [eax] esi +
add esi [ebx+6Ch] +
mov [eax+8] esi +
mov esi [ebx+8Ch] +
inc esi  +
mov [eax+0Ch] esi +
add eax edx +
inc ecx  +
cmp eax offset dword_102E148 +
jl loc_1013990  +
push dword ptr [ebp-2Ch]  +
lea ecx [ebp-40h] +
call ?SetMapMode@CDC@@UAEHH@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-40h] +
call ??1CClientDC@@UAE@XZ  +
call sub_1026DAC  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
push esi  +
mov esi ecx +
movzx eax word ptr [esi+52h] +
push edi  +
xor ebx ebx +
push eax  +
xor edi edi +
mov [ebp-4] ebx +
mov [ebp-8] ebx +
call sub_101321E  +
push ebx  +
push eax  +
push ebx  +
push 1  +
mov ecx esi +
mov [esi+60h] eax +
call ?SetScrollRange@CWnd@@QAEXHHHH@Z  +
mov eax [ebp+8] +
cmp eax 7 +
ja loc_1013B72  +
jmp ds:off_1013C25[eax*4]  +
movzx eax word ptr [esi+50h] +
movzx edx word ptr [esi+52h] +
movzx ecx ax +
add ecx 10h +
cmp ecx edx +
jg loc_1013B72  +
push 0FFFFFFFCh  +
pop edi  +
sub edi [esi+70h] +
add eax 10h +
push 1  +
push eax  +
mov ecx esi +
mov [esi+50h] ax +
call sub_101315D  +
push eax  +
mov ecx esi +
mov [esi+50h] ax +
call sub_101321E  +
mov [esi+74h] ax +
jmp loc_1013B72  +
movzx eax word ptr [esi+50h] +
movzx ecx word ptr [esi+54h] +
movzx edx ax +
and ecx 0FFF0h +
sub edx 10h +
cmp edx ecx +
jl loc_1013B72  +
mov edi [esi+70h] +
add edi 4 +
add eax 0FFFFFFF0h +
push ebx  +
jmp loc_1013A45  +
***
movzx ecx word ptr [esi+50h] +
movzx eax word ptr [esi+52h] +
movzx edx cx +
movzx edi ax +
add edx 60h +
push 0FFFFFFFCh  +
cmp edx edi +
pop edi  +
jg loc_1013AC1  +
sub edi [esi+70h] +
push ecx  +
mov ecx esi +
imul edi edi +
call sub_101321E  +
add eax 6 +
mov [esi+74h] ax +
cwde   +
jmp loc_1013B5D  +
sub edi [esi+70h] +
imul edi edi +
jmp loc_1013A51  +
***
movzx edx word ptr [esi+50h] +
movzx ecx word ptr [esi+54h] +
movzx ebx dx +
mov edi ecx +
mov eax 0FFF0h +
and edi eax +
sub ebx 60h +
cmp ebx edi +
mov edi [esi+70h] +
jl loc_1013B0B  +
add edi 4 +
push edx  +
imul edi edi +
mov ecx esi +
call sub_101321E  +
add eax 0FFFFFFFAh +
mov [esi+74h] ax +
cwde   +
push eax  +
mov ecx esi +
call sub_1013396  +
mov [esi+50h] ax +
jmp loc_1013B23  +
and ecx eax +
add edi 4 +
mov [esi+50h] cx +
imul edi edi +
push ecx  +
mov ecx esi +
call sub_101321E  +
mov [esi+74h] ax +
xor ebx ebx +
jmp loc_1013B72  +
mov ax [esi+54h] +
mov ecx 0FFF0h +
and ax cx +
mov [esi+50h] ax +
xor eax eax +
jmp loc_1013A5D  +
***
mov ax [esi+52h] +
mov [esi+50h] ax +
mov ax [esi+60h] +
jmp loc_1013A5D  +
***
mov eax [ebp+0Ch] +
mov dword ptr [ebp-8] 1 +
mov [esi+74h] ax +
push eax  +
mov ecx esi +
call sub_1013396  +
mov [esi+50h] ax +
jmp loc_1013B72  +
mov dword ptr [ebp-4] 1 +
mov ecx [esi+70h] +
add ecx 4 +
imul ecx ecx +
mov eax edi +
cdq   +
xor eax edx +
sub eax edx +
cmp eax ecx +
jge loc_1013BF3  +
cmp eax ebx +
jle loc_1013BF3  +
cmp [ebp-4] ebx +
jnz loc_1013C0D  +
lea eax [ebp-18h] +
push eax  +
push dword ptr [esi+20h]  +
call ds:GetClientRect  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-28h] +
push eax  +
call ds:CopyRect  +
cmp edi ebx +
mov eax edi +
push ebx  +
mov ecx esi +
jge loc_1013BCB  +
neg eax  +
mov [ebp-14h] eax +
lea eax [ebp-18h] +
push eax  +
push edi  +
push ebx  +
call ?ScrollWindow@CWnd@@QAEXHHPBUtagRECT@@0@Z  +
imul edi edi +
mov [ebp-24h] edi +
jmp loc_1013BE9  +
imul eax eax +
mov [ebp-0Ch] eax +
lea eax [ebp-18h] +
push eax  +
push edi  +
push ebx  +
mov dword ptr [ebp-14h] 4 +
call ?ScrollWindow@CWnd@@QAEXHHPBUtagRECT@@0@Z  +
mov [ebp-24h] ebx +
mov [ebp-1Ch] edi +
push ebx  +
lea eax [ebp-28h] +
push eax  +
push dword ptr [esi+20h]  +
jmp loc_1013C07  +
cmp [ebp-4] ebx +
jnz loc_1013C0D  +
cmp edi ebx +
jnz loc_1013C01  +
cmp [ebp-8] ebx +
jz loc_1013C0D  +
push 1  +
push ebx  +
push dword ptr [esi+20h]  +
call ds:InvalidateRect  +
movsx eax word ptr [esi+74h] +
push 1  +
push eax  +
push 1  +
mov ecx esi +
call ?SetScrollPos@CWnd@@QAEHHHH@Z  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov eax [ebp+0Ch] +
push esi  +
push edi  +
xor edi edi +
mov esi ecx +
push edi  +
push edi  +
push dword ptr [esi+20h]  +
mov [esi+64h] eax +
mov eax [ebp+10h] +
mov [esi+68h] eax +
call ds:InvalidateRect  +
push dword ptr [esi+20h]  +
call ds:UpdateWindow  +
mov ecx esi +
mov [ebp-0Ch] edi +
call ?SetFocus@CWnd@@QAEPAV1@XZ  +
mov [ebp-4] edi +
mov dword ptr [ebp-8] offset dword_102E148 +
push ebx  +
mov ebx [ebp-8] +
xor edi edi +
push dword ptr [ebp+10h]  +
mov ecx ebx +
push dword ptr [ebp+0Ch]  +
call sub_100B5EE  +
test eax eax +
jnz loc_1013CAE  +
inc edi  +
add ebx 10h +
cmp edi 10h +
jb loc_1013C92  +
jmp loc_1013CC4  +
push edi  +
push dword ptr [ebp-4]  +
mov ecx esi +
call sub_10134D2  +
test eax eax +
jz loc_1013CC4  +
mov dword ptr [ebp-0Ch] 1 +
inc dword ptr [ebp-4]  +
add dword ptr [ebp-8] 100h +
cmp dword ptr [ebp-4] 6 +
jb loc_1013C8D  +
cmp dword ptr [ebp-0Ch] 0 +
pop ebx  +
jnz loc_1013CE5  +
push 0FFFFFFFFh  +
call ds:MessageBeep  +
jmp loc_1013D06  +
push dword ptr [esi+20h]  +
call ds:GetParent  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
push 0  +
push 1  +
push 111h  +
push dword ptr [eax+20h]  +
call ds:PostMessageW  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
call __EH_prolog3  +
mov [ebp-10h] ecx +
xor ebx ebx +
mov eax offset off_1001A8C +
mov [ebp-18h] ebx +
mov [ebp-1Ch] eax +
mov esi [ebp+8] +
mov [ebp-4] ebx +
cmp esi ebx +
jnz loc_1013D3F  +
mov [ebp-1Ch] eax +
jmp loc_101404B  +
mov eax [ebp+18h] +
mov ecx [ebp+14h] +
mov edx [ebp+10h] +
mov edi [ebp+0Ch] +
inc eax  +
push eax  +
inc ecx  +
push ecx  +
dec edx  +
push edx  +
dec edi  +
push edi  +
lea eax [ebp-34h] +
push eax  +
call ds:SetRect  +
lea eax [ebp+0Ch] +
push eax  +
lea eax [ebp-44h] +
push eax  +
call ds:CopyRect  +
lea ecx [ebp-1Ch] +
cmp [ebp+1Ch] ebx +
jnz loc_1013EDB  +
push dword_102DD3C  +
call sub_1007DF5  +
lea eax [ebp-1Ch] +
push eax  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
mov ebx ds:PatBlt +
mov [ebp+8] eax +
mov eax [ebp-2Ch] +
sub eax [ebp-34h] +
mov edi 0F00021h +
push edi  +
push 1  +
push eax  +
push dword ptr [ebp-30h]  +
push dword ptr [ebp-34h]  +
push dword ptr [esi+4]  +
call ebx  +
mov eax [ebp-28h] +
sub eax [ebp-30h] +
push edi  +
push eax  +
push 1  +
push dword ptr [ebp-30h]  +
push dword ptr [ebp-34h]  +
push dword ptr [esi+4]  +
call ebx  +
push dword ptr [ebp+8]  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
lea ecx [ebp-1Ch] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
push dword_102DD38  +
lea ecx [ebp-1Ch] +
call sub_1007DF5  +
lea eax [ebp-1Ch] +
push eax  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
push edi  +
mov [ebp+8] eax +
mov eax [ebp-2Ch] +
sub eax [ebp-34h] +
push 1  +
push eax  +
push dword ptr [ebp-28h]  +
push dword ptr [ebp-34h]  +
push dword ptr [esi+4]  +
call ebx  +
mov eax [ebp-28h] +
sub eax [ebp-30h] +
push edi  +
inc eax  +
push eax  +
push 1  +
push dword ptr [ebp-30h]  +
push dword ptr [ebp-2Ch]  +
push dword ptr [esi+4]  +
call ebx  +
push dword ptr [ebp+8]  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
lea ecx [ebp-1Ch] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
mov eax [ebp-10h] +
xor ebx ebx +
cmp [eax+0A8h] ebx +
jz loc_1014044  +
mov [ebp-20h] ebx +
mov dword ptr [ebp-24h] offset off_1001A8C +
mov edi offset off_1002184 +
mov [ebp-10h] ebx +
mov [ebp-14h] edi +
push 5  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call sub_100B666  +
push dword_102DD40  +
lea ecx [ebp-14h] +
push 1  +
push ebx  +
call near ptr dword_100B6E0+2  +
lea eax [ebp-24h] +
push eax  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
mov ebx eax +
lea eax [ebp-14h] +
push eax  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z  +
mov [ebp+8] eax +
lea eax [ebp-44h] +
push eax  +
mov ecx esi +
call sub_100BA1E  +
push ebx  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
push dword ptr [ebp+8]  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z  +
lea ecx [ebp-24h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea ecx [ebp-14h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 1 +
mov [ebp-14h] edi +
call sub_1007D75  +
mov dword ptr [ebp-24h] offset off_1001A8C +
lea ecx [ebp-24h] +
jmp loc_101403B  +
push dword_102DD38  +
call sub_1007DF5  +
lea eax [ebp-1Ch] +
push eax  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
mov ebx ds:PatBlt +
mov [ebp+8] eax +
mov eax [ebp-2Ch] +
sub eax [ebp-34h] +
mov edi 0F00021h +
push edi  +
push 1  +
push eax  +
push dword ptr [ebp-30h]  +
push dword ptr [ebp-34h]  +
push dword ptr [esi+4]  +
call ebx  +
mov eax [ebp-28h] +
sub eax [ebp-30h] +
push edi  +
push eax  +
push 1  +
push dword ptr [ebp-30h]  +
push dword ptr [ebp-34h]  +
push dword ptr [esi+4]  +
call ebx  +
push dword ptr [ebp+8]  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
lea ecx [ebp-1Ch] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
push dword_102DD3C  +
lea ecx [ebp-1Ch] +
call sub_1007DF5  +
lea eax [ebp-1Ch] +
push eax  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
push edi  +
mov [ebp+8] eax +
mov eax [ebp-2Ch] +
sub eax [ebp-34h] +
push 1  +
push eax  +
push dword ptr [ebp-28h]  +
push dword ptr [ebp-34h]  +
push dword ptr [esi+4]  +
call ebx  +
mov eax [ebp-28h] +
sub eax [ebp-30h] +
push edi  +
inc eax  +
push eax  +
push 1  +
push dword ptr [ebp-30h]  +
push dword ptr [ebp-2Ch]  +
push dword ptr [esi+4]  +
call ebx  +
push dword ptr [ebp+8]  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
lea ecx [ebp-1Ch] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
mov ecx [ebp-10h] +
xor eax eax +
cmp [ecx+0A8h] eax +
jz loc_1014044  +
mov ebx offset off_1001A8C +
mov [ebp-10h] eax +
mov [ebp-14h] ebx +
mov edi offset off_1002184 +
mov [ebp-20h] eax +
mov [ebp-24h] edi +
push 5  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 4 +
call sub_100B666  +
push dword_102DD38  +
lea ecx [ebp-24h] +
push 1  +
push 0  +
call near ptr dword_100B6E0+2  +
lea eax [ebp-14h] +
push eax  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
mov [ebp+8] eax +
lea eax [ebp-24h] +
push eax  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z  +
mov [ebp+1Ch] eax +
lea eax [ebp-44h] +
push eax  +
mov ecx esi +
call sub_100BA1E  +
push dword ptr [ebp+8]  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
push dword ptr [ebp+1Ch]  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z  +
lea ecx [ebp-14h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea ecx [ebp-24h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
mov [ebp-24h] edi +
call sub_1007D75  +
mov [ebp-14h] ebx +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 0 +
call sub_1007D75  +
mov dword ptr [ebp-1Ch] offset off_1001A8C +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call sub_1007D75  +
call __EH_epilog3  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
movzx eax word ptr [edi+50h] +
push eax  +
call sub_101321E  +
movzx esi word ptr [edi+58h] +
push esi  +
mov ecx edi +
mov ebx eax +
call sub_101321E  +
cmp eax ebx +
jl loc_10140DF  +
sub eax ebx +
cmp eax 6 +
jge loc_10140DF  +
shl eax 4 +
push 2  +
pop ecx  +
and esi 0Fh +
add eax esi +
shl eax 4 +
mov edx dword_102E154[eax] +
add edx ecx +
push edx  +
mov edx dword_102E150[eax] +
add edx ecx +
push edx  +
mov edx dword_102E14C[eax] +
mov eax dword_102E148[eax] +
sub edx ecx +
push edx  +
sub eax ecx +
push eax  +
lea eax [ebp+Rect] +
push eax  +
call ds:SetRect  +
push 0  +
lea eax [ebp+Rect] +
push eax  +
push dword ptr [edi+20h]  +
call ds:InvalidateRect  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
and dword ptr [esi+0A8h] 0 +
call sub_1014064  +
push dword ptr [esi+20h]  +
call ds:UpdateWindow  +
mov ecx esi +
call ?Default@CWnd@@IAEJXZ  +
push 0  +
call ds:HideCaret  +
pop esi  +
retn 4  +
***
and dword ptr [esi+44h] 0 +
mov dword ptr [esi+40h] offset off_100219C +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101353F  +
test byte ptr [ebp+8] 1 +
jz loc_1014159  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
and dword ptr [ebp-10h] 0 +
mov eax offset off_1001A8C +
mov [ebp-14h] eax +
mov edi [ebp+8] +
and dword ptr [ebp-4] 0 +
test edi edi +
jnz loc_1014190  +
mov [ebp-14h] eax +
jmp loc_10142AC  +
push dword ptr [ebp+18h]  +
mov eax [ebp+10h] +
push dword ptr [ebp+14h]  +
dec eax  +
push eax  +
mov eax [ebp+0Ch] +
dec eax  +
push eax  +
lea eax [ebp-24h] +
push eax  +
call ds:SetRect  +
push dword_102DD40  +
lea ecx [ebp-14h] +
call sub_1007DF5  +
lea eax [ebp-14h] +
push eax  +
mov ecx edi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
mov esi 0F00021h +
push esi  +
push dword ptr [ebp-18h]  +
mov ecx edi +
push dword ptr [ebp-1Ch]  +
mov ebx eax +
push dword ptr [ebp-20h]  +
push dword ptr [ebp-24h]  +
call sub_100BA43  +
push ebx  +
mov ecx edi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
lea ecx [ebp-14h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
push dword_102DD3C  +
lea ecx [ebp-14h] +
call sub_1007DF5  +
lea eax [ebp-14h] +
push eax  +
mov ecx edi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
mov ebx ds:PatBlt +
push esi  +
mov [ebp+8] eax +
mov eax [ebp-1Ch] +
sub eax [ebp-24h] +
push 1  +
push eax  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp-24h]  +
push dword ptr [edi+4]  +
call ebx  +
mov eax [ebp-18h] +
sub eax [ebp-20h] +
push esi  +
push eax  +
push 1  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp-24h]  +
push dword ptr [edi+4]  +
call ebx  +
push dword ptr [ebp+8]  +
mov ecx edi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
lea ecx [ebp-14h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
push dword_102DD38  +
lea ecx [ebp-14h] +
call sub_1007DF5  +
lea eax [ebp-14h] +
push eax  +
mov ecx edi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
push esi  +
mov [ebp+8] eax +
mov eax [ebp-1Ch] +
sub eax [ebp-24h] +
push 1  +
push eax  +
push dword ptr [ebp-18h]  +
push dword ptr [ebp-24h]  +
push dword ptr [edi+4]  +
call ebx  +
mov eax [ebp-18h] +
sub eax [ebp-20h] +
push esi  +
inc eax  +
push eax  +
push 1  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp-1Ch]  +
push dword ptr [edi+4]  +
call ebx  +
push dword ptr [ebp+8]  +
mov ecx edi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
lea ecx [ebp-14h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
mov dword ptr [ebp-14h] offset off_1001A8C +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call sub_1007D75  +
call __EH_epilog3  +
retn 14h  +
***
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1002BAC +
call ??1CStatic@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_10142FE  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax offset byte_1027D6B +
call __EH_prolog3  +
and dword ptr [ebp-10h] 0 +
mov eax offset off_1001A8C +
mov [ebp-14h] eax +
mov esi [ebp+8] +
and dword ptr [ebp-4] 0 +
test esi esi +
jnz loc_1014335  +
mov [ebp-14h] eax +
jmp loc_1014412  +
push dword ptr [ebp+18h]  +
mov eax [ebp+10h] +
push dword ptr [ebp+14h]  +
dec eax  +
push eax  +
mov eax [ebp+0Ch] +
dec eax  +
push eax  +
lea eax [ebp-24h] +
push eax  +
call ds:SetRect  +
push dword_102DD3C  +
lea ecx [ebp-14h] +
call sub_1007DF5  +
lea eax [ebp-14h] +
push eax  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
mov edi ds:PatBlt +
mov [ebp+8] eax +
mov eax [ebp-1Ch] +
sub eax [ebp-24h] +
mov ebx 0F00021h +
push ebx  +
push 1  +
push eax  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp-24h]  +
push dword ptr [esi+4]  +
call edi  +
mov eax [ebp-18h] +
sub eax [ebp-20h] +
push ebx  +
push eax  +
push 1  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp-24h]  +
push dword ptr [esi+4]  +
call edi  +
push dword ptr [ebp+8]  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
lea ecx [ebp-14h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
push dword_102DD38  +
lea ecx [ebp-14h] +
call sub_1007DF5  +
lea eax [ebp-14h] +
push eax  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
push ebx  +
mov [ebp+8] eax +
mov eax [ebp-1Ch] +
sub eax [ebp-24h] +
push 1  +
push eax  +
push dword ptr [ebp-18h]  +
push dword ptr [ebp-24h]  +
push dword ptr [esi+4]  +
call edi  +
mov eax [ebp-18h] +
sub eax [ebp-20h] +
push ebx  +
inc eax  +
push eax  +
push 1  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp-1Ch]  +
push dword ptr [esi+4]  +
call edi  +
push dword ptr [ebp+8]  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
lea ecx [ebp-14h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
mov dword ptr [ebp-14h] offset off_1001A8C +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call sub_1007D75  +
call __EH_epilog3  +
retn 14h  +
***
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1002C74 +
call ??1CStatic@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_1014464  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
and dword ptr [ebp-10h] 0 +
mov eax offset off_1001A8C +
mov [ebp-14h] eax +
mov esi [ebp+8] +
and dword ptr [ebp-4] 0 +
test esi esi +
jnz loc_101449B  +
mov [ebp-14h] eax +
jmp loc_1014578  +
push dword ptr [ebp+18h]  +
mov eax [ebp+10h] +
push dword ptr [ebp+14h]  +
dec eax  +
push eax  +
mov eax [ebp+0Ch] +
dec eax  +
push eax  +
lea eax [ebp-24h] +
push eax  +
call ds:SetRect  +
push dword_102DD38  +
lea ecx [ebp-14h] +
call sub_1007DF5  +
lea eax [ebp-14h] +
push eax  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
mov edi ds:PatBlt +
mov [ebp+8] eax +
mov eax [ebp-1Ch] +
sub eax [ebp-24h] +
mov ebx 0F00021h +
push ebx  +
push 1  +
push eax  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp-24h]  +
push dword ptr [esi+4]  +
call edi  +
mov eax [ebp-18h] +
sub eax [ebp-20h] +
push ebx  +
push eax  +
push 1  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp-24h]  +
push dword ptr [esi+4]  +
call edi  +
push dword ptr [ebp+8]  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
lea ecx [ebp-14h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
push dword_102DD3C  +
lea ecx [ebp-14h] +
call sub_1007DF5  +
lea eax [ebp-14h] +
push eax  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
push ebx  +
mov [ebp+8] eax +
mov eax [ebp-1Ch] +
sub eax [ebp-24h] +
push 1  +
push eax  +
push dword ptr [ebp-18h]  +
push dword ptr [ebp-24h]  +
push dword ptr [esi+4]  +
call edi  +
mov eax [ebp-18h] +
sub eax [ebp-20h] +
push ebx  +
inc eax  +
push eax  +
push 1  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp-1Ch]  +
push dword ptr [esi+4]  +
call edi  +
push dword ptr [ebp+8]  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
lea ecx [ebp-14h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
mov dword ptr [ebp-14h] offset off_1001A8C +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call sub_1007D75  +
call __EH_epilog3  +
retn 14h  +
***
inc eax  +
retn 0Ch  +
***
call ?Default@CWnd@@IAEJXZ  +
push 0  +
call ds:HideCaret  +
retn 4  +
***
mov edi edi +
push esi  +
test ecx ecx +
jnz loc_10145D5  +
xor esi esi +
jmp loc_10145D8  +
mov esi [ecx+20h] +
push dword ptr [ecx+20h]  +
call ds:GetParent  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
push 0  +
push esi  +
push 7Bh  +
push dword ptr [eax+20h]  +
call ds:SendMessageW  +
pop esi  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101360C  +
test byte ptr [ebp+8] 1 +
jz loc_1014618  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_101463A  +
cmp ecx 7FFFFFFFh +
jbe loc_101463F  +
mov eax 80070057h +
test eax eax +
jl loc_1014683  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_1014676  +
mov edx [ebp+arg_8] +
push edi  +
mov edi 7FFFFFFEh +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_1014671  +
mov cl [edx+eax] +
test cl cl +
jz loc_1014671  +
mov [eax] cl +
inc eax  +
dec esi  +
jnz loc_101465D  +
pop edi  +
test esi esi +
jnz loc_101467C  +
dec eax  +
mov ebx 8007007Ah +
mov byte ptr [eax] 0 +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
shr ecx 1 +
push 0  +
pop eax  +
jz loc_10146A3  +
cmp ecx 7FFFFFFFh +
jbe loc_10146A8  +
mov eax 80070057h +
test eax eax +
jl loc_10146F3  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_10146E3  +
mov edx [ebp+arg_8] +
push edi  +
mov edi 7FFFFFFEh +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_10146DE  +
movzx ecx word ptr [edx+eax] +
test cx cx +
jz loc_10146DE  +
mov [eax] cx +
inc eax  +
inc eax  +
dec esi  +
jnz loc_10146C6  +
pop edi  +
test esi esi +
jnz loc_10146EA  +
dec eax  +
dec eax  +
mov ebx 8007007Ah +
xor ecx ecx +
mov [eax] cx +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
shr ecx 1 +
push 0  +
pop eax  +
jz loc_1014713  +
cmp ecx 7FFFFFFFh +
jbe loc_1014718  +
mov eax 80070057h +
test eax eax +
jl loc_1014731  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
mov eax ecx +
push 0  +
call sub_10136B3  +
pop edi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10137F3  +
test byte ptr [ebp+8] 1 +
jz loc_10147AA  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push 3D0h  +
mov eax offset dword_1027DD4 +
call __EH_prolog3_GS  +
mov ebx ecx +
push ebx  +
lea ecx [ebp-3A4h] +
call ??0CPaintDC@@QAE@PAVCWnd@@@Z  +
movzx eax word ptr [ebx+52h] +
xor edi edi +
push eax  +
mov ecx ebx +
mov [ebp-4] edi +
call sub_101321E  +
push edi  +
push eax  +
xor esi esi +
push edi  +
inc esi  +
push esi  +
mov ecx ebx +
call ?SetScrollRange@CWnd@@QAEXHHHH@Z  +
movsx eax word ptr [ebx+74h] +
push esi  +
push eax  +
push esi  +
mov ecx ebx +
call ?SetScrollPos@CWnd@@QAEHHHH@Z  +
movzx eax word ptr [ebx+50h] +
push esi  +
lea ecx [ebp-3A4h] +
mov [ebp-3ACh] eax +
call ?SetMapMode@CDC@@UAEHH@Z  +
push edi  +
mov [ebp-3DCh] eax +
push edi  +
lea eax [ebp-3C8h] +
push eax  +
lea ecx [ebp-3A4h] +
call ?SetViewportOrg@CDC@@UAE?AVCPoint@@HH@Z  +
lea eax [ebx+48h] +
push eax  +
lea ecx [ebp-3A4h] +
call ?SelectObject@CDC@@UAEPAVCFont@@PAV2@@Z  +
mov [ebp-3D8h] eax +
lea eax [ebp-350h] +
push eax  +
push offset unk_102CE90  +
call sub_102562A  +
mov esi offset dword_102E14C +
mov [ebp-3D0h] eax +
mov dword ptr [ebp-3BCh] offset unk_102E748 +
mov [ebp-3B8h] esi +
jmp loc_1014879  +
mov esi [ebp-3B8h] +
lea eax [ebx+48h] +
push eax  +
lea ecx [ebp-3A4h] +
call ?SelectObject@CDC@@UAEPAVCFont@@PAV2@@Z  +
push 1  +
push dword ptr [ebp-3ACh]  +
mov ecx ebx +
call sub_101315D  +
movzx eax ax +
mov [ebp-3ACh] eax +
movzx eax ax +
push eax  +
push offset a04x  +
lea eax [ebp-1Ch] +
push 0Ah  +
push eax  +
call sub_10146FC  +
add esp 10h +
cmp eax edi +
lea ecx [ebp-3A4h] +
jl loc_1014CF3  +
push dword_102DD40  +
call ?SetBkColor@CDC@@UAEKK@Z  +
push 8  +
call ds:GetSysColor  +
push eax  +
lea ecx [ebp-3A4h] +
call ?SetTextColor@CDC@@UAEKK@Z  +
mov eax [esi+8] +
mov ecx [esi] +
mov edx eax +
sub edx ecx +
mov ecx [ebx+8Ch] +
cmp edx ecx +
jle loc_1014902  +
sub eax ecx +
sub eax [esi] +
cdq   +
sub eax edx +
sar eax 1 +
jmp loc_1014904  +
xor eax eax +
push edi  +
push 4  +
lea ecx [ebp-1Ch] +
push ecx  +
mov ecx [ebp-3BCh] +
mov edx [ecx+4] +
push ecx  +
push 2  +
add edx eax +
push edx  +
push dword ptr [ecx]  +
push dword ptr [ebp-3A0h]  +
call sub_1025B3F  +
lea eax [ebx+40h] +
push eax  +
lea ecx [ebp-3A4h] +
call ?SelectObject@CDC@@UAEPAVCFont@@PAV2@@Z  +
add esi 0FFFFFFFCh +
mov [ebp-3C0h] edi +
mov [ebp-3CCh] esi +
mov eax [ebp-3ACh] +
xor ecx ecx +
inc ecx  +
mov dword_102E038 ecx +
cmp [ebp-3D0h] ecx +
jnz loc_1014A03  +
cmp dword_102DCC4 edi +
jz loc_1014973  +
lea ecx [eax+2000h] +
movzx ecx cx +
jmp loc_10149B8  +
push ecx  +
mov edx eax +
mov [ebp-3AFh] al +
lea eax [ebp-3D4h] +
push eax  +
push 2  +
lea eax [ebp-3B0h] +
push eax  +
push edi  +
shr edx 8 +
push edi  +
mov [ebp-3B0h] dl +
mov byte ptr [ebp-3AEh] 0 +
call ds:MultiByteToWideChar  +
mov eax [ebp-3D4h] +
add eax 2000h +
movzx ecx ax +
mov eax [ebp-3ACh] +
mov [ebp-3A8h] ecx +
and ecx 0FFF8h +
mov edx 1900h +
cmp cx dx +
jnb loc_1014A03  +
movzx ecx word ptr [ebp-3A8h] +
mov [ebp-3B4h] ecx +
and ecx 80000007h +
jns loc_10149E8  +
dec ecx  +
or ecx 0FFFFFFF8h +
inc ecx  +
mov edx 80h +
sar edx cl +
mov ecx [ebp-3B4h] +
shr ecx 3 +
mov cl [ebp+ecx-350h] +
test dl cl +
jnz loc_1014A09  +
mov dword_102E038 edi +
xor edx edx +
cmp dword_102DC68 edi +
mov [ebp-3A8h] edi +
jle loc_1014A3B  +
lea ecx dword_102DC78[edx] +
cmp al [ecx-0Ch] +
jb loc_1014A32  +
cmp al [ecx] +
ja loc_1014A32  +
mov dword ptr [ebp-3A8h] 1 +
inc edx  +
cmp edx dword_102DC68 +
jl loc_1014A19  +
mov ecx [ebx+5Ch] +
add ecx ecx +
cmp ax word_102DC1C[ecx] +
jb loc_1014A52  +
cmp ax word ptr dword_102DC34[ecx] +
jbe loc_1014A58  +
mov [ebp-3A8h] edi +
cmp [ebp-3A8h] edi +
jz loc_1014C81  +
mov ecx eax +
shr ecx 8 +
cmp dword_102DCC4 edi +
jz loc_1014A83  +
mov [ebp-1Bh] cl +
mov [ebp-1Ch] al +
mov dword ptr [ebp-3A8h] 1 +
jmp loc_1014A93  +
mov [ebp-1Ch] cl +
mov [ebp-1Bh] al +
mov dword ptr [ebp-3A8h] 2 +
push dword ptr [ebx+68h]  +
mov ecx esi +
push dword ptr [ebx+64h]  +
mov byte ptr [ebp-1Ah] 0 +
call sub_100B5EE  +
test eax eax +
jnz loc_1014AB9  +
mov ax [ebx+58h] +
cmp ax [ebp-3ACh] +
jnz loc_1014B86  +
cmp [ebp-3A8h] edi +
jz loc_1014B86  +
mov ax [ebp-3ACh] +
mov [ebx+58h] ax +
push dword_102DD40  +
lea ecx [ebp-3A4h] +
mov dword ptr [ebp-3B4h] 1 +
call ?SetBkColor@CDC@@UAEKK@Z  +
push 8  +
call ds:GetSysColor  +
push eax  +
lea ecx [ebp-3A4h] +
call ?SetTextColor@CDC@@UAEKK@Z  +
movzx eax word ptr [ebp-3ACh] +
push eax  +
push offset a04x  +
lea eax [ebp-30h] +
push 0Ah  +
push eax  +
call sub_1011E02  +
add esp 10h +
cmp eax edi +
jl loc_1014CED  +
lea eax [ebp-30h] +
push eax  +
push 7Bh  +
push dword ptr [ebx+20h]  +
call ds:GetParent  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
mov ecx eax +
call ?SetDlgItemTextW@CWnd@@QAEXHPBG@Z  +
lea eax [ebp-1Ch] +
push eax  +
push 6  +
push offset unk_102E03C  +
cmp dword_102DCC4 edi +
jz loc_1014B58  +
call sub_101468C  +
jmp loc_1014B5D  +
call sub_1014624  +
cmp eax edi +
jl loc_1014CED  +
push dword ptr [ebx+20h]  +
call ds:GetParent  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
push edi  +
push edi  +
push 403h  +
push dword ptr [eax+20h]  +
call ds:SendMessageW  +
jmp loc_1014BB1  +
push dword_102DD40  +
lea ecx [ebp-3A4h] +
mov [ebp-3B4h] edi +
call ?SetBkColor@CDC@@UAEKK@Z  +
push 8  +
call ds:GetSysColor  +
push eax  +
lea ecx [ebp-3A4h] +
call ?SetTextColor@CDC@@UAEKK@Z  +
lea eax [ebp-3C8h] +
push eax  +
push dword ptr [ebp-3A8h]  +
lea eax [ebp-1Ch] +
push eax  +
push dword ptr [ebp-3A0h]  +
cmp dword_102DCC4 edi +
jz loc_1014BD8  +
call ds:GetTextExtentPoint32W  +
jmp loc_1014BDE  +
call ds:GetTextExtentPoint32A  +
mov eax [esi+8] +
sub eax [esi] +
cmp eax [ebp-3C8h] +
jle loc_1014BFA  +
sub eax [ebp-3C8h] +
cdq   +
sub eax edx +
mov ecx eax +
sar ecx 1 +
jmp loc_1014BFC  +
xor ecx ecx +
mov eax [esi+0Ch] +
sub eax [esi+4] +
cmp eax [ebp-3C4h] +
jle loc_1014C17  +
sub eax [ebp-3C4h] +
cdq   +
sub eax edx +
sar eax 1 +
jmp loc_1014C19  +
xor eax eax +
cmp dword_102E038 1 +
jnz loc_1014C56  +
push edi  +
push dword ptr [ebp-3A8h]  +
lea edx [ebp-1Ch] +
push edx  +
mov edx [esi+4] +
push esi  +
add edx eax +
mov eax [esi] +
push 2  +
push edx  +
add eax ecx +
push eax  +
push dword ptr [ebp-3A0h]  +
cmp dword_102DCC4 edi +
jz loc_1014C50  +
call sub_1025B3F  +
jmp loc_1014C56  +
call ds:ExtTextOutA  +
push dword ptr [ebp-3B4h]  +
lea eax [ebp-3A4h] +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
push eax  +
mov ecx ebx +
movs   +
call near ptr dword_1013D0C+5  +
mov eax [ebp-3ACh] +
mov esi [ebp-3CCh] +
xor edi edi +
inc dword ptr [ebp-3C0h]  +
add esi 10h +
inc eax  +
cmp dword ptr [ebp-3C0h] 10h +
mov [ebp-3CCh] esi +
mov [ebp-3ACh] eax +
jl loc_1014945  +
add dword ptr [ebp-3B8h] 100h +
add dword ptr [ebp-3BCh] 10h +
cmp dword ptr [ebp-3B8h] offset unk_102E74C +
jl loc_1014873  +
push dword ptr [ebp-3DCh]  +
lea ecx [ebp-3A4h] +
call ?SetMapMode@CDC@@UAEHH@Z  +
push dword ptr [ebp-3D8h]  +
lea ecx [ebp-3A4h] +
call ?SelectObject@CDC@@UAEPAVCFont@@PAV2@@Z  +
mov [ebx+68h] edi +
mov [ebx+64h] edi +
lea ecx [ebp-3A4h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
call ??1CPaintDC@@UAE@XZ  +
call sub_1026DAC  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
and dword ptr [ebp-10h] 0 +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
call ?SetFocus@CWnd@@QAEPAV1@XZ  +
and dword ptr [ebp-4] 0 +
mov edi offset dword_102E148 +
mov [ebp-0Ch] edi +
mov eax [ebp-0Ch] +
xor ebx ebx +
mov [ebp-8] eax +
push dword ptr [ebp+10h]  +
mov ecx [ebp-8] +
push dword ptr [ebp+0Ch]  +
call sub_100B5EE  +
test eax eax +
jnz loc_1014D4F  +
add dword ptr [ebp-8] 10h +
inc ebx  +
cmp ebx 10h +
jb loc_1014D31  +
jmp loc_1014D65  +
push ebx  +
push dword ptr [ebp-4]  +
mov ecx esi +
call sub_10134D2  +
test eax eax +
jz loc_1014D65  +
mov dword ptr [ebp-10h] 1 +
inc dword ptr [ebp-4]  +
add dword ptr [ebp-0Ch] 100h +
cmp dword ptr [ebp-4] 6 +
jb loc_1014D29  +
xor ebx ebx +
cmp [ebp-10h] ebx +
jnz loc_1014D89  +
push 0FFFFFFFFh  +
call ds:MessageBeep  +
jmp loc_1014E30  +
mov eax [ebp+0Ch] +
mov [esi+64h] eax +
mov eax [ebp+10h] +
mov ecx esi +
mov [esi+68h] eax +
call sub_1014064  +
xor eax eax +
mov [esi+58h] ax +
mov [ebp-8] edi +
mov dword ptr [ebp-10h] 6 +
mov eax [ebp-8] +
xor edi edi +
mov [ebp-0Ch] eax +
push dword ptr [esi+68h]  +
mov ecx [ebp-0Ch] +
push dword ptr [esi+64h]  +
call sub_100B5EE  +
test eax eax +
jnz loc_1014DD2  +
add dword ptr [ebp-0Ch] 10h +
inc edi  +
cmp edi 10h +
jb loc_1014DB4  +
jmp loc_1014E18  +
push 2  +
pop ecx  +
lea eax [ebx+edi] +
shl eax 4 +
mov edx dword_102E154[eax] +
add edx ecx +
push edx  +
mov edx dword_102E150[eax] +
add edx ecx +
push edx  +
mov edx dword_102E14C[eax] +
mov eax dword_102E148[eax] +
sub edx ecx +
push edx  +
sub eax ecx +
push eax  +
lea eax [ebp-20h] +
push eax  +
call ds:SetRect  +
push 0  +
lea eax [ebp-20h] +
push eax  +
push dword ptr [esi+20h]  +
call ds:InvalidateRect  +
add dword ptr [ebp-8] 100h +
add ebx 10h +
dec dword ptr [ebp-10h]  +
jnz loc_1014DAC  +
push dword ptr [esi+20h]  +
call ds:UpdateWindow  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push esi  +
mov esi ecx +
cmp eax 28h +
jz loc_1014E65  +
cmp eax 26h +
jz loc_1014E65  +
cmp eax 27h +
jz loc_1014E65  +
cmp eax 25h +
jz loc_1014E65  +
call ?Default@CWnd@@IAEJXZ  +
jmp loc_10150A6  +
movzx eax word ptr [esi+50h] +
push ebx  +
push edi  +
push eax  +
call sub_101321E  +
movzx edi word ptr [esi+58h] +
push edi  +
mov ecx esi +
mov ebx eax +
call sub_101321E  +
mov ecx eax +
sub ecx ebx +
cmp ecx 6 +
jge loc_1014E8C  +
cmp eax ebx +
jge loc_1014EBB  +
mov eax edi +
and eax 0FFF0h +
push eax  +
mov ecx esi +
mov [esi+50h] ax +
call sub_101321E  +
xor ebx ebx +
push ebx  +
push ebx  +
push dword ptr [esi+20h]  +
mov [esi+74h] ax +
call ds:InvalidateRect  +
push dword ptr [esi+20h]  +
call ds:UpdateWindow  +
jmp loc_1014EBD  +
xor ebx ebx +
mov eax [ebp+8] +
sub eax 25h +
jz loc_1015024  +
dec eax  +
jz loc_1014FB2  +
dec eax  +
jz loc_1014F4E  +
dec eax  +
jnz loc_10150A4  +
movzx ebx word ptr [esi+58h] +
movzx ecx word ptr [esi+56h] +
movzx eax bx +
add eax 10h +
cmp eax ecx +
jg loc_10150A4  +
movzx eax word ptr [esi+50h] +
push eax  +
mov ecx esi +
call sub_101321E  +
xor edi edi +
inc edi  +
push edi  +
push 10h  +
add ebx 10h +
push ebx  +
mov ecx esi +
mov [ebp+8] eax +
call sub_10133E1  +
movzx eax ax +
push eax  +
mov ecx esi +
call sub_101321E  +
sub eax [ebp+8] +
add eax 0FFFFFFFAh +
js loc_1014F3A  +
lea ebx [eax+1] +
push 0  +
push edi  +
push 115h  +
push dword ptr [esi+20h]  +
call ds:SendMessageW  +
dec ebx  +
jnz loc_1014F26  +
mov ecx esi +
call sub_1014064  +
add word ptr [esi+58h] 10h +
push edi  +
push 10h  +
jmp loc_1015084  +
movzx eax word ptr [esi+58h] +
movzx edx word ptr [esi+56h] +
movzx ecx ax +
inc ecx  +
cmp ecx edx +
jg loc_10150A4  +
xor edi edi +
inc edi  +
push edi  +
push edi  +
inc eax  +
push eax  +
mov ecx esi +
call sub_10133E1  +
movzx eax ax +
push eax  +
mov ecx esi +
call sub_101321E  +
mov ebx eax +
movzx eax word ptr [esi+50h] +
push eax  +
mov ecx esi +
call sub_101321E  +
sub ebx eax +
cmp ebx 6 +
jl loc_1014FA1  +
push 0  +
push edi  +
push 115h  +
push dword ptr [esi+20h]  +
call ds:SendMessageW  +
mov ecx esi +
call sub_1014064  +
inc word ptr [esi+58h]  +
push edi  +
jmp loc_1015083  +
movzx edi word ptr [esi+58h] +
movzx ecx word ptr [esi+54h] +
movzx eax di +
sub eax 10h +
cmp eax ecx +
jl loc_10150A4  +
movzx eax word ptr [esi+50h] +
push eax  +
mov ecx esi +
call sub_101321E  +
push ebx  +
push 10h  +
add edi 0FFFFFFF0h +
push edi  +
mov ecx esi +
mov [ebp+8] eax +
call sub_10133E1  +
movzx eax ax +
push eax  +
mov ecx esi +
call sub_101321E  +
mov ecx [ebp+8] +
sub ecx eax +
cmp ecx ebx +
jle loc_101500E  +
mov edi ecx +
push ebx  +
push ebx  +
push 115h  +
push dword ptr [esi+20h]  +
call ds:SendMessageW  +
dec edi  +
jnz loc_1014FFB  +
mov ecx esi +
call sub_1014064  +
mov eax 0FFF0h +
add [esi+58h] ax +
push ebx  +
jmp loc_1014F47  +
***
movzx eax word ptr [esi+58h] +
movzx edx word ptr [esi+54h] +
movzx ecx ax +
dec ecx  +
cmp ecx edx +
jl loc_10150A4  +
xor edi edi +
push ebx  +
inc edi  +
push edi  +
dec eax  +
push eax  +
mov ecx esi +
call sub_10133E1  +
movzx eax ax +
push eax  +
mov ecx esi +
call sub_101321E  +
mov ebx eax +
movzx eax word ptr [esi+50h] +
push eax  +
mov ecx esi +
call sub_101321E  +
cmp ebx eax +
jge loc_1015071  +
push 0  +
push 0  +
push 115h  +
push dword ptr [esi+20h]  +
call ds:SendMessageW  +
mov ecx esi +
call sub_1014064  +
mov eax 0FFFFh +
add [esi+58h] ax +
push 0  +
push edi  +
movzx eax word ptr [esi+58h] +
push eax  +
mov ecx esi +
call sub_10133E1  +
mov ecx esi +
mov [esi+58h] ax +
call sub_1014064  +
push dword ptr [esi+20h]  +
call ds:UpdateWindow  +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
call ?Default@CWnd@@IAEJXZ  +
mov ecx esi +
mov dword ptr [esi+0A8h] 1 +
call sub_1014064  +
push dword ptr [esi+20h]  +
call ds:UpdateWindow  +
push 0  +
call ds:HideCaret  +
pop esi  +
retn 4  +
***
cmp dword_102E038 edi +
jz loc_10152B3  +
push 5Ch  +
lea eax [ebp-0C0h] +
push edi  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp-0C0h] +
push eax  +
push 5Ch  +
push dword ptr [ebx+44h]  +
call ds:GetObjectW  +
mov eax [ebp-0D4h] +
mov ecx [ebp-0D8h] +
sub eax [ebp-0DCh] +
sub ecx [ebp-0E0h] +
cmp ecx eax +
jl loc_101519B  +
add eax 0FFFFFFF6h +
mov [ebp-0C0h] eax +
jmp loc_10151A4  +
add ecx 0FFFFFFF6h +
mov [ebp-0C0h] ecx +
lea eax [ebp-0C0h] +
push eax  +
lea ecx [ebp-0C8h] +
call sub_100B71B  +
lea ecx [ebp-64h] +
test eax eax +
jz loc_10152B6  +
lea eax [ebp-0C8h] +
push eax  +
call ?SelectObject@CDC@@UAEPAVCFont@@PAV2@@Z  +
mov [ebp-0E4h] eax +
lea eax [ebp-0D0h] +
mov esi offset unk_102E03C +
push eax  +
cmp dword_102DCC4 edi +
jz loc_10151F5  +
push 1  +
push esi  +
push dword ptr [ebp-60h]  +
call ds:GetTextExtentPoint32W  +
jmp loc_1015201  +
push 2  +
push esi  +
push dword ptr [ebp-60h]  +
call ds:GetTextExtentPoint32A  +
mov eax [ebp-0D8h] +
sub eax [ebp-0E0h] +
cmp eax [ebp-0D0h] +
jle loc_1015222  +
sub eax [ebp-0D0h] +
cdq   +
sub eax edx +
mov edi eax +
sar edi 1 +
mov eax [ebp-0D4h] +
sub eax [ebp-0DCh] +
cmp eax [ebp-0CCh] +
jle loc_1015245  +
sub eax [ebp-0CCh] +
cdq   +
sub eax edx +
mov ebx eax +
sar ebx 1 +
jmp loc_1015247  +
xor ebx ebx +
push dword_102DD40  +
lea ecx [ebp-64h] +
call ?SetBkColor@CDC@@UAEKK@Z  +
push 8  +
call ds:GetSysColor  +
push eax  +
lea ecx [ebp-64h] +
call ?SetTextColor@CDC@@UAEKK@Z  +
xor eax eax +
cmp dword_102DCC4 eax +
push eax  +
lea eax [ebp-0E0h] +
jz loc_1015289  +
push 1  +
push esi  +
push eax  +
push 2  +
push ebx  +
push edi  +
push dword ptr [ebp-60h]  +
call sub_1025B3F  +
jmp loc_101529A  +
push 2  +
push esi  +
push eax  +
push 2  +
push ebx  +
push edi  +
push dword ptr [ebp-60h]  +
call ds:ExtTextOutA  +
push dword ptr [ebp-0E4h]  +
lea ecx [ebp-64h] +
call ?SelectObject@CDC@@UAEPAVCFont@@PAV2@@Z  +
lea ecx [ebp-0C8h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea ecx [ebp-64h] +
mov byte ptr [ebp-4] 0 +
call ??1CPaintDC@@UAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-0C8h] +
mov dword ptr [ebp-0C8h] offset off_100219C +
call sub_1007D75  +
call sub_1026DAC  +
retn   +
***
push 68h  +
mov eax offset byte_10282DB +
call __EH_prolog3_GS  +
mov ebx ecx +
push ebx  +
lea ecx [ebp-64h] +
call ??0CPaintDC@@QAE@PAVCWnd@@@Z  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-74h] +
push eax  +
push dword ptr [ebx+20h]  +
call ds:GetClientRect  +
sub esp 10h +
mov edi esp +
lea esi [ebp-74h] +
movs   +
movs   +
movs   +
lea eax [ebp-64h] +
push eax  +
mov ecx ebx +
movs   +
call sub_1014470  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-64h] +
call ??1CPaintDC@@UAE@XZ  +
call sub_1026DAC  +
retn   +
***
push 64h  +
mov eax offset byte_1027E49 +
call __EH_prolog3_GS  +
mov esi ecx +
push esi  +
lea ecx [ebp-64h] +
call ??0CPaintDC@@QAE@PAVCWnd@@@Z  +
and dword ptr [ebp-4] 0 +
push 1  +
lea ecx [ebp-64h] +
call ?SetMapMode@CDC@@UAEHH@Z  +
add esi 40h +
push esi  +
lea ecx [ebp-64h] +
call ?SelectObject@CDC@@UAEPAVCFont@@PAV2@@Z  +
push dword_102DD40  +
lea ecx [ebp-64h] +
call ?SetBkColor@CDC@@UAEKK@Z  +
push 8  +
call ds:GetSysColor  +
push eax  +
lea ecx [ebp-64h] +
call ?SetTextColor@CDC@@UAEKK@Z  +
xor edi edi +
mov esi offset unk_102E048 +
push edi  +
push offset asc_1002608  +
lea eax [ebp-68h] +
push 2  +
push eax  +
call sub_1011E02  +
add esp 10h +
test eax eax +
jl loc_1015450  +
lea eax [ebp-70h] +
push eax  +
push 1  +
lea eax [ebp-68h] +
push eax  +
push dword ptr [ebp-60h]  +
call ds:GetTextExtentPoint32W  +
mov eax [esi+8] +
sub eax [esi] +
cmp eax [ebp-70h] +
jle loc_1015425  +
sub eax [ebp-70h] +
cdq   +
sub eax edx +
sar eax 1 +
jmp loc_1015427  +
xor eax eax +
mov ecx [esi] +
mov edx [esi+4] +
push 0  +
push 1  +
add ecx eax +
lea eax [ebp-68h] +
push eax  +
push esi  +
push 2  +
push edx  +
push ecx  +
push dword ptr [ebp-60h]  +
call ds:ExtTextOutW  +
add esi 10h +
inc edi  +
cmp esi offset dword_102E148 +
jl loc_10153E6  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-64h] +
call ??1CPaintDC@@UAE@XZ  +
call sub_1026DAC  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_10154B1  +
or eax 0FFFFFFFFh +
jmp locret_1015555  +
push ebx  +
mov ebx ds:wcschr +
push esi  +
push edi  +
push 2Dh  +
push eax  +
mov [ebp+var_4] eax +
call ebx  +
pop ecx  +
pop ecx  +
mov [ebp+arg_0] eax +
test eax eax +
jz loc_101554F  +
mov edi ds:wcstol +
mov esi [ebp+arg_4] +
mov ecx [ebp+arg_0] +
xor eax eax +
push 10h  +
push eax  +
push [ebp+var_4]  +
mov [ecx] ax +
call edi  +
movzx eax ax +
mov word_102DC1C[esi*2] ax +
shr eax 8 +
mov byte_102DC50[esi] al +
mov eax [ebp+arg_0] +
add eax 2 +
push 2Ch  +
push eax  +
mov [ebp+var_4] eax +
call ebx  +
add esp 14h +
push 10h  +
push 0  +
push [ebp+var_4]  +
mov [ebp+arg_0] eax +
test eax eax +
jz loc_1015559  +
xor ecx ecx +
mov [eax] cx +
call edi  +
movzx eax ax +
mov word ptr dword_102DC34[esi*2] ax +
shr eax 8 +
mov byte ptr dword_102DC5C[esi] al +
mov eax [ebp+arg_0] +
add eax 2 +
push 2Dh  +
push eax  +
mov [ebp+var_4] eax +
inc esi  +
call ebx  +
add esp 14h +
mov [ebp+arg_0] eax +
test eax eax +
jnz loc_10154D8  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
call edi  +
movzx eax ax +
mov word ptr dword_102DC34[esi*2] ax +
shr eax 8 +
mov byte ptr dword_102DC5C[esi] al +
add esp 0Ch +
inc esi  +
mov dword_102DC4C esi +
mov dword_102DC18 esi +
mov eax esi +
jmp loc_1015552  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
xor esi esi +
cmp dword_102DCC4 esi +
jnz loc_10155FC  +
cmp dword_102DCCC esi +
mov [ebp+var_4] esi +
jle loc_10155F6  +
mov eax [ebp+arg_0] +
push ebx  +
push edi  +
lea ebx word_102DC1C[eax*2] +
lea edi dword_102DC34[eax*2] +
mov eax [ebp+var_4] +
mov cl [ebx] +
lea eax dword_102DCDC[eax] +
mov dl [eax-0Ch] +
cmp cl dl +
jbe loc_10155CB  +
mov dl cl +
mov byte_102DC6C[esi] dl +
mov cl [edi] +
mov al [eax] +
cmp cl al +
jnb loc_10155DB  +
mov al cl +
mov byte ptr dword_102DC78[esi] al +
cmp al dl +
jb loc_10155E6  +
inc esi  +
inc [ebp+var_4]  +
mov eax [ebp+var_4] +
cmp eax dword_102DCCC +
jl loc_10155B7  +
pop edi  +
pop ebx  +
mov dword_102DC68 esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
mov [ebp+var_20] ebx +
cmp dword_102DCC4 ebx +
jnz loc_101574A  +
push esi  +
mov esi ds:WideCharToMultiByte +
push edi  +
push ebx  +
push ebx  +
mov eax 0E000h +
mov [ebp+WideCharStr] ax +
xor eax eax +
push 5  +
mov [ebp-16h] ax +
lea eax [ebp+MultiByteStr] +
push eax  +
push 0FFFFFFFFh  +
lea eax [ebp+WideCharStr] +
push eax  +
push ebx  +
push [ebp+CodePage]  +
call esi  +
mov al [ebp-0Bh] +
mov [ebp+var_19] al +
mov [ebp+var_1A] al +
mov byte_102DC6C al +
mov edi 0E001h +
push ebx  +
push ebx  +
xor eax eax +
push 5  +
mov [ebp-16h] ax +
lea eax [ebp+MultiByteStr] +
push eax  +
push 0FFFFFFFFh  +
lea eax [ebp+WideCharStr] +
push eax  +
push ebx  +
push [ebp+CodePage]  +
mov [ebp+WideCharStr] di +
call esi  +
movzx ecx [ebp+var_19] +
mov al [ebp-0Bh] +
movzx edx al +
inc ecx  +
cmp ecx edx +
jz loc_10156B0  +
mov ecx [ebp+var_20] +
mov dl [ebp+var_19] +
mov byte ptr dword_102DC78[ecx] dl +
inc ecx  +
mov [ebp+var_20] ecx +
cmp [ebp+var_1A] al +
jz loc_10156B0  +
mov byte_102DC6C[ecx] al +
mov [ebp+var_19] al +
cmp [ebp+var_1A] al +
jz loc_10156C3  +
inc edi  +
mov eax 0E0FFh +
cmp di ax +
jbe loc_1015668  +
mov eax [ebp+var_20] +
mov dword_102DC68 eax +
mov eax dword_102DCE8 +
pop edi  +
pop esi  +
cmp eax 412h +
jnz loc_101570D  +
mov dword_102DC68 3 +
mov byte_102DC6C 41h +
mov byte ptr dword_102DC78 5Ah +
mov byte_102DC6D 61h +
mov byte ptr dword_102DC78+1 7Ah +
mov byte_102DC6E 81h +
mov byte ptr dword_102DC78+2 0FEh +
cmp eax 804h +
jnz loc_1015742  +
push ebx  +
mov dword_102DCCC 2 +
mov byte_102DCD0 40h +
mov byte ptr dword_102DCDC 7Eh +
mov byte_102DCD1 80h +
mov byte ptr dword_102DCDC+1 0FEh +
call sub_1015588  +
jmp loc_1015761  +
mov dword_102DCCC ebx +
jmp loc_1015761  +
mov dword_102DC68 1 +
mov byte_102DC6C bl +
mov byte ptr dword_102DC78 0FFh +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop ebx  +
call sub_1026CC5  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 94h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
mov esi offset aUnicode +
lea edi [ebp+var_2C] +
movs   +
movs   +
movs   +
movs   +
push 33h  +
xor esi esi +
lea eax [ebp+hKey] +
push esi  +
push eax  +
call memset  +
add esp 0Ch +
push dword ptr [ebp+CodePage]  +
call sub_1015606  +
cmp dword_102DCC8 esi +
jnz loc_1015804  +
push dword ptr [ebp+CodePage]  +
lea eax [ebp+lpString2] +
push offset aD  +
push 0Bh  +
push eax  +
call sub_1011E02  +
add esp 10h +
test eax eax +
jge loc_10157DA  +
xor eax eax +
jmp loc_1015844  +
push 32h  +
lea eax [ebp+hKey] +
push eax  +
lea eax [ebp+lpString2] +
push eax  +
call sub_101EDC3  +
test eax eax +
jz loc_10157D6  +
push esi  +
lea eax [ebp+hKey] +
push eax  +
call sub_101549C  +
mov esi eax +
cmp esi 0FFFFFFFFh +
jz loc_10157D6  +
lea eax [ebp+var_2C] +
push eax  +
push 0Bh  +
lea eax [ebp+lpString2] +
push eax  +
call sub_1008286  +
test eax eax +
jl loc_10157D6  +
push 32h  +
lea eax [ebp+hKey] +
push eax  +
lea eax [ebp+lpString2] +
push eax  +
call sub_101EDC3  +
test eax eax +
jz loc_10157D6  +
push esi  +
lea eax [ebp+hKey] +
push eax  +
call sub_101549C  +
xor ecx ecx +
cmp eax 0FFFFFFFFh +
setnz cl  +
mov eax ecx +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1026CC5  +
leave   +
retn 4  +
***
test eax eax +
jz locret_1015896  +
test edx edx +
jz locret_1015896  +
mov ecx [eax] +
push esi  +
mov si [ecx+8] +
mov ecx [ecx] +
mov cx [ecx+8] +
add si si +
sub cx si +
add cx [eax+8] +
mov [edx] cx +
mov ecx [eax] +
mov si [ecx+0Ah] +
mov ecx [ecx] +
mov cx [ecx+0Ah] +
add si si +
sub cx si +
add cx [eax+0Ah] +
pop esi  +
mov [edx+2] cx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
mov ebx eax +
test edi edi +
jz loc_1015998  +
test ebx ebx +
jz loc_1015998  +
test esi esi +
jz loc_1015998  +
cmp [ebp+arg_0] 0 +
jz loc_1015998  +
movzx edx word ptr [esi+8] +
movsx eax word ptr [ebx+8] +
movzx ecx word ptr [edi+8] +
shl eax 2 +
movsx edx dx +
sub eax edx +
movsx ecx cx +
sub eax ecx +
cdq   +
sub eax edx +
movzx edx word ptr [edi+0Ah] +
mov ecx eax +
movzx eax word ptr [esi+0Ah] +
mov [ebp+var_4] eax +
movsx eax word ptr [ebx+0Ah] +
movsx ebx word ptr [ebp+var_4] +
shl eax 2 +
mov [ebp+var_8] edx +
sub eax ebx +
movzx ebx word ptr [esi+8] +
movsx edx dx +
sub eax edx +
cdq   +
sub eax edx +
movzx edx word ptr [edi+8] +
sar ecx 1 +
sar eax 1 +
cmp dx bx +
movzx edx word ptr [esi+8] +
mov word ptr [ebp+var_10] cx +
mov word ptr [ebp+var_10+2] ax +
jge loc_101593E  +
cmp cx dx +
jle loc_1015933  +
mov cx dx +
mov word ptr [ebp+var_10] cx +
movzx edx word ptr [edi+8] +
cmp cx dx +
jge loc_1015957  +
jmp loc_1015953  +
cmp cx dx +
jge loc_101594A  +
mov cx dx +
mov word ptr [ebp+var_10] cx +
movzx edx word ptr [edi+8] +
cmp cx dx +
jle loc_1015957  +
mov word ptr [ebp+var_10] dx +
mov edx [ebp+var_8] +
mov ecx [ebp+var_4] +
cmp dx cx +
jge loc_1015975  +
cmp ax cx +
jle loc_101596E  +
mov ax cx +
mov word ptr [ebp+var_10+2] ax +
cmp ax dx +
jge loc_101598A  +
jmp loc_1015986  +
cmp ax cx +
jge loc_1015981  +
mov ax cx +
mov word ptr [ebp+var_10+2] ax +
cmp ax dx +
jle loc_101598A  +
mov word ptr [ebp+var_10+2] dx +
mov ecx [ebp+var_10] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
test eax eax +
jz loc_1015A50  +
test ecx ecx +
jz loc_1015A50  +
cmp [ebp+arg_0] 0 +
jz loc_1015A50  +
movsx edx word ptr [eax+2] +
movsx eax word ptr [eax] +
push ebx  +
movsx ebx word ptr [ecx+2] +
movsx ecx word ptr [ecx] +
push esi  +
push edi  +
mov edi ecx +
imul ecx edx +
sub edi eax +
imul eax ebx +
mov esi edx +
sub esi ebx +
sub eax ecx +
mov [ebp+var_8] esi +
mov [ebp+var_4] edi +
test esi esi +
jnz loc_10159F2  +
test edi edi +
jz loc_1015A4B  +
mov ecx [ebp+arg_0] +
movsx edx word ptr [ecx+2] +
movsx ecx word ptr [ecx] +
imul edx edi +
imul ecx esi +
add edx eax +
add ecx edx +
mov eax ecx +
cdq   +
xor eax edx +
sub eax edx +
cmp eax 0B504h +
mov [ebp+arg_0] ecx +
jle loc_1015A37  +
fild  [ebp+arg_0] +
fild  [ebp+var_4] +
fild  [ebp+var_8] +
fld  st(2) +
fmulp st(3) st +
fld  st +
fmulp st(1) st +
fld  st(1) +
fmulp st(2) st +
faddp st(1) st +
fdivp st(1) st +
call _ftol2_sse  +
jmp loc_1015A4B  +
mov ebx edi +
mov eax esi +
imul ebx edi +
imul eax esi +
add ebx eax +
mov eax ecx +
imul eax ecx +
cdq   +
idiv  ebx +
pop edi  +
pop esi  +
pop ebx  +
jmp locret_1015A52  +
xor eax eax +
leave   +
retn 4  +
***
test ecx ecx +
jz loc_1015A82  +
test eax eax +
jz loc_1015A82  +
movsx edx word ptr [eax+2] +
movsx eax word ptr [eax] +
push esi  +
movsx esi word ptr [ecx+2] +
movsx ecx word ptr [ecx] +
sub edx esi +
sub eax ecx +
mov ecx edx +
imul eax eax +
imul ecx edx +
add eax ecx +
pop esi  +
retn   +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
xor edx edx +
mov [ebp+var_8] edx +
cmp eax edx +
jz loc_1015B06  +
cmp ecx edx +
jz loc_1015B06  +
cmp [ebp+arg_4] edx +
jz loc_1015B06  +
cmp [ebp+arg_8] edx +
jz loc_1015B06  +
push ebx  +
push esi  +
mov esi [eax] +
push edi  +
mov edi [ebp+arg_0] +
dec edi  +
cmp edi edx +
mov ebx esi +
mov [ebp+var_8] edx +
mov [ebp+var_C] edx +
mov [ebp+var_4] edx +
jle loc_1015AF6  +
add ecx 8 +
add eax 8 +
mov [ebp+arg_0] ecx +
mov [ebp+var_10] eax +
mov ecx [ebp+arg_0] +
lea eax [esi+8] +
push eax  +
mov eax [ebp+var_10] +
call sub_10159A2  +
cmp eax [ebp+var_8] +
jle loc_1015AEC  +
mov [ebp+var_8] eax +
mov eax [ebp+var_4] +
mov ebx esi +
mov [ebp+var_C] eax +
inc [ebp+var_4]  +
cmp [ebp+var_4] edi +
mov esi [esi] +
jl loc_1015ACD  +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_8] +
mov [eax] ebx +
mov eax [ebp+var_C] +
pop edi  +
pop esi  +
mov [ecx] eax +
pop ebx  +
mov eax [ebp+var_8] +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi eax +
push edi  +
test esi esi +
jz loc_1015BF0  +
mov ecx [ebp+arg_0] +
cmp ecx 3 +
jge loc_1015B45  +
test ecx ecx +
jle loc_1015B39  +
mov eax ecx +
dec eax  +
mov esi [esi] +
jnz loc_1015B34  +
mov eax [ebp+arg_4] +
mov [eax] esi +
mov eax ecx +
jmp loc_1015BF3  +
lea edx [ebp+var_10] +
call sub_1015859  +
push 2  +
pop edi  +
cmp [ebp+arg_0] edi +
jle loc_1015BE7  +
mov esi [esi] +
lea edx [ebp+var_8] +
mov eax esi +
call sub_1015859  +
xor eax eax +
cmp word ptr [ebp+var_8] ax +
setl al  +
xor ecx ecx +
cmp word ptr [ebp+var_10] cx +
setl cl  +
cmp ecx eax +
jz loc_1015B9B  +
movsx eax word ptr [ebp+var_8] +
cdq   +
mov ecx eax +
movsx eax word ptr [ebp+var_10] +
xor ecx edx +
sub ecx edx +
cdq   +
xor eax edx +
sub eax edx +
add ecx eax +
lea eax [ebx+1] +
shl eax 4 +
cmp ecx eax +
jg loc_1015BF9  +
xor eax eax +
cmp word ptr [ebp+var_8+2] ax +
setl al  +
xor ecx ecx +
cmp word ptr [ebp+var_10+2] cx +
setl cl  +
cmp ecx eax +
jz loc_1015BD1  +
movsx eax word ptr [ebp+var_8+2] +
cdq   +
mov ecx eax +
movsx eax word ptr [ebp+var_10+2] +
xor ecx edx +
sub ecx edx +
cdq   +
xor eax edx +
sub eax edx +
add ecx eax +
lea eax [ebx+1] +
shl eax 4 +
cmp ecx eax +
jg loc_1015BF9  +
mov eax [ebp+var_8] +
mov [ebp+var_10] eax +
mov eax [ebp+var_4] +
inc edi  +
cmp edi [ebp+arg_0] +
mov [ebp+var_C] eax +
jl loc_1015B59  +
mov eax [esi] +
mov eax [eax] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
leave   +
retn 8  +
mov eax [esi] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
mov eax edi +
jmp loc_1015BF3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push edi  +
mov edi eax +
xor eax eax +
cmp edi eax +
jz loc_1015D63  +
push ebx  +
mov ebx [ebp+arg_0] +
cmp ebx eax +
jz loc_1015D62  +
cmp [ebp+arg_8] eax +
jz loc_1015D62  +
cmp [ebp+arg_C] eax +
jz loc_1015D62  +
cmp [ebp+arg_10] eax +
jz loc_1015D62  +
push esi  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_4]  +
mov ecx ebx +
mov eax edi +
call sub_1015A8A  +
push [ebp+arg_8]  +
mov [ebp+var_14] eax +
mov eax [ebp+var_4] +
mov esi ebx +
call sub_101589C  +
mov eax [ebp+arg_8] +
lea esi [edi+8] +
mov ecx esi +
call sub_1015A5B  +
mov [ebp+var_10] eax +
mov eax [ebp+arg_8] +
lea ecx [ebx+8] +
mov [ebp+var_8] ecx +
call sub_1015A5B  +
mov ecx [ebp+var_10] +
mov ebx [ebp+var_4] +
mov edx eax +
shl edx 2 +
cmp ecx edx +
jg loc_1015D06  +
shl ecx 2 +
cmp ecx eax +
jl loc_1015D06  +
mov edx [ebp+arg_8] +
movsx eax word ptr [esi] +
movsx edx word ptr [edx] +
mov ecx ebx +
movsx ecx word ptr [ecx+8] +
sub ecx eax +
sub edx eax +
imul ecx edx +
test ecx ecx +
jl loc_1015D06  +
mov edx [ebp+arg_8] +
movsx eax word ptr [edi+0Ah] +
movsx edx word ptr [edx+2] +
mov ecx ebx +
movsx ecx word ptr [ecx+0Ah] +
sub ecx eax +
sub edx eax +
imul ecx edx +
test ecx ecx +
jl loc_1015D06  +
mov eax [ebp+var_8] +
mov ecx esi +
call sub_1015A5B  +
mov ecx dword_102E7A8 +
imul ecx ecx +
cmp eax ecx +
jle loc_1015D02  +
mov eax [ebp+var_8] +
mov ecx esi +
call sub_1015A5B  +
mov ecx [ebp+var_14] +
shl ecx 6 +
cmp eax ecx +
jl loc_1015D06  +
xor eax eax +
jmp loc_1015D61  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+var_C]  +
mov eax edi +
call sub_1015A8A  +
push [ebp+arg_8]  +
mov eax [ebp+var_4] +
mov esi ebx +
call sub_101589C  +
mov esi [ebp+arg_0] +
lea eax [ebp+arg_8] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
mov eax [ebp+arg_4] +
sub eax [ebp+var_C] +
mov ecx esi +
push eax  +
mov eax ebx +
call sub_1015A8A  +
push [ebp+arg_10]  +
mov eax [ebp+var_4] +
mov edi ebx +
call sub_101589C  +
mov ecx [ebx+8] +
mov eax [ebp+arg_C] +
mov [eax] ecx +
mov ecx [ebx+0Ch] +
mov [eax+4] ecx +
xor eax eax +
inc eax  +
pop esi  +
pop ebx  +
pop edi  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
test edi edi +
jz loc_1015E4F  +
test esi esi +
jz loc_1015E4F  +
test eax eax +
jz loc_1015E52  +
cmp eax 1 +
jnz loc_1015DAA  +
mov eax [edi+8] +
mov [ebp+var_8] eax +
mov eax [edi+0Ch] +
mov [ebp+var_4] eax +
lea eax [ebp+var_8] +
jmp loc_1015DDE  +
cmp eax 2 +
jnz loc_1015DE7  +
lea eax [ebp+var_10] +
push eax  +
mov eax [edi] +
call sub_101589C  +
mov eax [edi+8] +
mov [ebp+var_8] eax +
mov eax [edi+0Ch] +
mov [ebp+var_4] eax +
lea eax [ebp+var_8] +
push eax  +
push ebx  +
call sub_102485E  +
test eax eax +
jl loc_1015E52  +
xor eax eax +
inc eax  +
mov [ebp+var_C] ax +
lea eax [ebp+var_10] +
push eax  +
push ebx  +
call sub_102485E  +
jmp loc_1015E52  +
lea ecx [ebp+var_20] +
push ecx  +
lea ecx [ebp+var_18] +
push ecx  +
lea ecx [ebp+var_10] +
push ecx  +
push eax  +
push esi  +
mov eax edi +
call sub_1015C09  +
test eax eax +
mov eax [edi+8] +
mov [ebp+var_8] eax +
mov eax [edi+0Ch] +
mov [ebp+var_4] eax +
lea eax [ebp+var_8] +
push eax  +
push ebx  +
jz loc_1015DCB  +
call sub_102485E  +
test eax eax +
jl loc_1015E52  +
xor eax eax +
inc eax  +
mov [ebp+var_C] ax +
lea eax [ebp+var_10] +
push eax  +
push ebx  +
call sub_102485E  +
test eax eax +
jl loc_1015E52  +
xor eax eax +
mov [ebp+var_14] ax +
lea eax [ebp+var_18] +
push eax  +
push ebx  +
call sub_102485E  +
test eax eax +
jl loc_1015E52  +
xor eax eax +
inc eax  +
mov [ebp+var_1C] ax +
lea eax [ebp+var_20] +
jmp loc_1015DDE  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+arg_C] +
push esi  +
push edi  +
mov dword_102E7A8 eax +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_0]  +
xor esi esi +
mov [ebp+var_4] esi +
mov [ebp+var_8] esi +
call sub_10246EA  +
mov edi eax +
cmp edi esi +
jnz loc_1015F57  +
push [ebp+arg_4]  +
call sub_102469F  +
mov eax [ebp+arg_C] +
cmp [eax] esi +
jz loc_1015F57  +
push ebx  +
mov ecx [eax+8] +
mov [ebp+var_4] ecx +
push dword ptr [eax+0Ch]  +
lea eax [ebp+var_4] +
push eax  +
push ecx  +
push esi  +
call sub_101FF4E  +
mov ebx eax +
mov eax [ebp+arg_C] +
mov eax [eax+0Ch] +
cmp ebx eax +
jge loc_1015F33  +
push eax  +
lea eax [ebp+var_8] +
push eax  +
mov eax [ebp+var_4] +
push dword ptr [eax]  +
lea eax [ebx+1] +
push eax  +
call sub_101FF4E  +
mov edi [ebp+var_4] +
mov ecx eax +
mov esi ecx +
sub esi ebx +
mov [ebp+var_10] ecx +
test edi edi +
jz loc_1015F53  +
xor eax eax +
test esi esi +
jle loc_1015F14  +
mov ebx [ebp+arg_8] +
lea eax [ebp+arg_0] +
push eax  +
push esi  +
mov eax edi +
call sub_1015B12  +
mov ebx [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_0] +
mov ecx edi +
mov [ebp+var_C] eax +
call sub_1015D6D  +
sub esi [ebp+var_C] +
test esi esi +
jg loc_1015EEA  +
mov ecx [ebp+var_10] +
mov edi eax +
test eax eax +
jl loc_1015F56  +
mov eax [ebp+arg_C] +
cmp ecx [eax+0Ch] +
jge loc_1015F31  +
mov edx [ebp+var_8] +
mov [ebp+var_4] edx +
mov eax [eax+0Ch] +
cmp ecx eax +
mov ebx ecx +
jl loc_1015EC1  +
xor esi esi +
push [ebp+arg_4]  +
call sub_10247F6  +
mov edi eax +
cmp edi esi +
jl loc_1015F56  +
mov eax [ebp+arg_C] +
mov eax [eax] +
mov [ebp+arg_C] eax +
cmp [eax] esi +
jnz loc_1015EA1  +
jmp loc_1015F56  +
or edi 0FFFFFFFFh +
pop ebx  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 10h  +
***
and dword_102E7B0 0 +
jmp loc_102605A  +
***
mov dword ptr [ecx] offset off_1003064 +
jmp ??1CEdit@@UAE@XZ  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push esi  +
mov esi ds:PeekMessageW +
push edi  +
xor edi edi +
jmp loc_1015FC6  +
cmp [ebp+Msg.message] 12h +
jz loc_1015FD5  +
lea eax [ebp+Msg] +
push eax  +
call ds:TranslateMessage  +
lea eax [ebp+Msg] +
push eax  +
call ds:DispatchMessageW  +
push 1  +
push edi  +
push edi  +
push edi  +
lea eax [ebp+Msg] +
push eax  +
call esi  +
test eax eax +
jnz loc_1015FAC  +
cmp dword_102E7B0 edi +
pop edi  +
pop esi  +
jnz loc_1015FE3  +
xor eax eax +
jmp locret_1015FFD  +
push [ebp+lParam]  +
push [ebp+wParam]  +
push 400h  +
push hWnd  +
call ds:SendMessageW  +
xor eax eax +
inc eax  +
leave   +
retn 8  +
***
retn   +
***
call __EH_prolog3  +
mov esi ecx +
lea ecx [ebp-10h] +
call ??0CString@@QAE@XZ  +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call ?OnInitDialog@CDialog@@UAEHXZ  +
push 0EF58h  +
lea ecx [ebp-10h] +
call ?LoadStringW@CString@@QAEHI@Z  +
push dword ptr [ebp-10h]  +
mov ecx esi +
call ?SetWindowTextW@CWnd@@QAEXPBG@Z  +
push esi  +
push 0C4h  +
lea ecx [esi+60h] +
call ?SubclassDlgItem@CWnd@@QAEHIPAV1@@Z  +
test esi esi +
jnz loc_1016063  +
and hWnd esi +
jmp loc_101606B  +
mov eax [esi+20h] +
mov hWnd eax +
and dword_102E7AC 0 +
test esi esi +
jz loc_1016079  +
mov esi [esi+20h] +
push 1  +
push 0EF77h  +
push 0EF3Bh  +
push esi  +
call sub_102447F  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call ??1CString@@QAE@XZ  +
xor eax eax +
inc eax  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 400h +
push esi  +
mov esi ecx +
jnz loc_10160E6  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_10160E2  +
mov ecx [ebp+arg_4] +
push 0  +
push 0  +
sub esi 0FFFFFF80h +
push dword ptr [esi]  +
mov dword_102E7B4 ecx +
mov dword_102E7B8 eax +
call ds:InvalidateRect  +
push dword ptr [esi]  +
call ds:UpdateWindow  +
xor eax eax +
jmp loc_1016165  +
cmp [ebp+arg_0] 401h +
jnz loc_1016157  +
push ebx  +
xor ebx ebx +
push edi  +
mov edi ds:GetTickCount +
inc ebx  +
mov dword_102E7B0 ebx +
call edi  +
mov [ebp+arg_0] eax +
call edi  +
sub eax [ebp+arg_0] +
cmp eax 3E8h +
jb loc_1016105  +
push 0  +
call EnableEUDC  +
push dword ptr [esi+6B8h]  +
lea eax [esi+2A8h] +
push ebx  +
push dword_102DF58  +
push dword_102DF5C  +
push eax  +
lea eax [esi+4B0h] +
push eax  +
add esi 0A0h +
push esi  +
call sub_10173C9  +
push ebx  +
mov dword_102C3D0 ebx +
call EnableEUDC  +
pop edi  +
xor eax eax +
pop ebx  +
jmp loc_1016165  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ?WindowProc@CWnd@@MAEJIIJ@Z  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1013674  +
mov dword ptr [esi] offset off_1003064 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1003064 +
call ??1CEdit@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_10161A8  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+8]  +
push 88h  +
call ??0CDialog@@QAE@IPAVCWnd@@@Z  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+60h] +
mov dword ptr [esi] offset off_100312C +
call sub_101616F  +
mov eax [ebp+14h] +
test eax eax +
jnz loc_10161F0  +
mov eax offset unk_102EA08 +
push eax  +
mov edi 104h +
push edi  +
lea eax [esi+2A8h] +
push eax  +
call sub_1008286  +
test eax eax +
jl loc_101624C  +
mov eax [ebp+10h] +
test eax eax +
jnz loc_1016213  +
mov eax offset unk_102E800 +
push eax  +
push edi  +
lea eax [esi+4B0h] +
push eax  +
call sub_1008286  +
test eax eax +
jl loc_101624C  +
mov eax [ebp+0Ch] +
test eax eax +
jnz loc_1016231  +
mov eax offset unk_102EC10 +
push eax  +
push edi  +
lea eax [esi+0A0h] +
push eax  +
call sub_1008286  +
test eax eax +
jl loc_101624C  +
mov eax [ebp+18h] +
mov [esi+6B8h] eax +
mov eax esi +
call __EH_epilog3  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1007D17  +
test byte ptr [ebp+8] 1 +
jz loc_1016275  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3_GS  +
mov edi ecx +
xor ebx ebx +
mov esi offset off_1001A8C +
mov [ebp-0DCh] edi +
mov [ebp-0CCh] ebx +
mov [ebp-0D0h] esi +
mov [ebp-4] ebx +
mov [ebp-0D4h] ebx +
mov [ebp-0D8h] esi +
push edi  +
lea ecx [ebp-0C8h] +
mov byte ptr [ebp-4] 1 +
call ??0CPaintDC@@QAE@PAVCWnd@@@Z  +
lea eax [ebp-0ECh] +
push eax  +
push dword ptr [edi+20h]  +
mov byte ptr [ebp-4] 2 +
call ds:GetClientRect  +
cmp dword_102E7AC ebx +
jnz loc_1016308  +
push ebx  +
push ebx  +
push 401h  +
push hWnd  +
mov dword_102E7AC 1 +
call ds:SendMessageW  +
jmp loc_101646F  +
cmp dword_102E7B8 ebx +
jz loc_101646F  +
push dword_102E7B4  +
mov edi offset aD +
push edi  +
lea eax [ebp-24h] +
push 0Ah  +
push eax  +
call sub_1011E02  +
add esp 10h +
cmp eax ebx +
jl loc_1016490  +
push dword_102E7B8  +
lea eax [ebp-38h] +
push edi  +
push 0Ah  +
push eax  +
call sub_1011E02  +
add esp 10h +
cmp eax ebx +
jl loc_1016490  +
lea eax [ebp-24h] +
push eax  +
push 1Eh  +
lea eax [ebp-74h] +
push eax  +
call sub_1008286  +
cmp eax ebx +
jl loc_1016490  +
push offset asc_1003204  +
push 1Eh  +
lea eax [ebp-74h] +
push eax  +
call sub_10082C0  +
cmp eax ebx +
jl loc_1016490  +
lea eax [ebp-38h] +
push eax  +
push 1Eh  +
lea eax [ebp-74h] +
push eax  +
call sub_10082C0  +
cmp eax ebx +
jl loc_1016490  +
lea eax [ebp-74h] +
push eax  +
mov eax [ebp-0DCh] +
push 0C5h  +
push dword ptr [eax+20h]  +
call ds:GetParent  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
mov ecx eax +
call ?SetDlgItemTextW@CWnd@@QAEXHPBG@Z  +
mov edi ds:CopyRect +
lea eax [ebp-0ECh] +
push eax  +
lea eax [ebp-0FCh] +
push eax  +
call edi  +
lea eax [ebp-0ECh] +
push eax  +
lea eax [ebp-10Ch] +
push eax  +
call edi  +
mov eax [ebp-0E4h] +
sub eax [ebp-0ECh] +
xor edx edx +
imul eax dword_102E7B4 +
div  dword_102E7B8 +
push 0FF0000h  +
lea ecx [ebp-0D8h] +
mov [ebp-0F4h] eax +
mov [ebp-10Ch] eax +
call sub_1007DF5  +
lea eax [ebp-0D8h] +
push eax  +
lea eax [ebp-0FCh] +
push eax  +
lea ecx [ebp-0C8h] +
call sub_1007E18  +
lea ecx [ebp-0D8h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
push ebx  +
lea ecx [ebp-0D0h] +
call sub_100B666  +
lea eax [ebp-0D0h] +
push eax  +
lea eax [ebp-10Ch] +
push eax  +
lea ecx [ebp-0C8h] +
call sub_1007E18  +
lea ecx [ebp-0D0h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
mov eax dword_102E7B8 +
cmp dword_102E7B4 eax +
jb loc_1016490  +
push ebx  +
push 1  +
push 111h  +
push hWnd  +
call ds:SendMessageW  +
lea ecx [ebp-0C8h] +
mov byte ptr [ebp-4] 1 +
call ??1CPaintDC@@UAE@XZ  +
lea ecx [ebp-0D8h] +
mov [ebp-4] bl +
mov [ebp-0D8h] esi +
call sub_1007D75  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-0D0h] +
mov [ebp-0D0h] esi +
call sub_1007D75  +
call sub_1026DAC  +
retn   +
***
mov eax ds:?classCStatusBar@CStatusBar@@2UCRuntimeClass@@B +
retn   +
***
mov eax offset off_100320C +
retn   +
***
mov eax ds:?messageMap@CStatusBar@@1UAFX_MSGMAP@@B +
retn   +
***
retn   +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_100326C +
and dword ptr [ebp-4] 0 +
lea ecx [esi+80h] +
call ??1CComboBox@@UAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1CStatusBar@@UAE@XZ  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push dword ptr [ecx+8]  +
call ds:GetTextExtentPoint32W  +
mov ecx [ebp+var_8._cx] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
mov ecx [ebp+var_8.cy] +
mov [eax+4] ecx +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push dword ptr [eax+4]  +
push dword ptr [ecx+20h]  +
call ds:ReleaseDC  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push 0  +
push 143h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
call ??0CStatusBar@@QAE@XZ  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+80h] +
mov dword ptr [esi] offset off_100326C +
call sub_1011AB6  +
and dword ptr [esi+0C8h] 0 +
mov eax esi +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10164FF  +
test byte ptr [ebp+8] 1 +
jz loc_1016603  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+dwNewLong] +
push edi  +
mov ebx ecx +
test esi esi +
jnz loc_1016624  +
xor edi edi +
jmp loc_1016627  +
mov edi [esi+20h] +
mov ecx esi +
call ?GetStyle@CWnd@@QBEKXZ  +
and eax 0FFFBFFFFh +
push eax  +
push 0FFFFFFF0h  +
push edi  +
mov edi ds:SetWindowLongW +
call edi  +
push 0E801h  +
push 50002800h  +
push esi  +
mov ecx ebx +
mov [ebp+dwNewLong] eax +
mov [ebx+0C4h] esi +
call ?Create@CStatusBar@@QAEHPAVCWnd@@KI@Z  +
test eax eax +
jz loc_1016670  +
test esi esi +
jz loc_1016665  +
mov esi [esi+20h] +
push [ebp+dwNewLong]  +
push 0FFFFFFF0h  +
push esi  +
call edi  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 21Ch +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+8] +
push esi  +
push eax  +
mov esi ecx +
call ?OnCreate@CControlBar@@QAEHPAUtagCREATESTRUCTW@@@Z  +
cmp eax 0FFFFFFFFh +
jnz loc_10166A9  +
or eax eax +
jmp loc_1016777  +
push edi  +
push 0EEh  +
push esi  +
lea eax [ebp-21Ch] +
push eax  +
lea edi [esi+80h] +
push 50010203h  +
mov ecx edi +
call ?Create@CComboBox@@QAEHKABUtagRECT@@PAVCWnd@@I@Z  +
test eax eax +
jnz loc_10166D5  +
or eax 0FFFFFFFFh +
jmp loc_1016776  +
mov ecx esi +
call sub_1007E5D  +
test eax eax +
jz loc_10166E3  +
mov eax [eax+4] +
push 0  +
push eax  +
push 30h  +
push dword ptr [esi+0A0h]  +
call ds:SendMessageW  +
mov eax dword_102DCE8 +
sub eax 404h +
mov esi 104h +
jz loc_1016729  +
sub eax 0Dh +
jz loc_1016722  +
dec eax  +
jz loc_101671B  +
sub eax 3F2h +
jnz loc_101674A  +
mov eax 0EF73h +
jmp loc_101672E  +
mov eax 0EF74h +
jmp loc_101672E  +
mov eax 0EF72h +
jmp loc_101672E  +
mov eax 0EF75h +
push esi  +
push eax  +
lea eax [ebp-20Ch] +
push eax  +
call sub_10245AD  +
lea eax [ebp-20Ch] +
push eax  +
mov ecx edi +
call sub_1016589  +
push esi  +
push 0EF71h  +
lea eax [ebp-20Ch] +
push eax  +
call sub_10245AD  +
lea eax [ebp-20Ch] +
push eax  +
mov ecx edi +
call sub_1016589  +
push 0  +
mov ecx edi +
call sub_1011B0D  +
xor eax eax +
inc eax  +
pop edi  +
mov ecx [ebp-4] +
xor ecx ebp +
pop esi  +
call sub_1026CC5  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 438h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+var_420] +
push eax  +
lea eax [ebp+var_41C] +
push eax  +
lea eax [ebp+var_418] +
push eax  +
push 0  +
mov esi ecx +
call ?GetPaneInfo@CStatusBar@@QBEXHAAI0AAH@Z  +
push dword ptr [esi+20h]  +
call ds:GetDC  +
push eax  +
call ?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z  +
mov [ebp+var_424] eax +
call ds:GetDialogBaseUnits  +
movzx ebx ax +
mov eax ebx +
imul eax eax +
inc eax  +
inc eax  +
cdq   +
and edx 3 +
add eax edx +
mov edi eax +
sar edi 2 +
cmp dword ptr [esi+0C8h] 0 +
mov [ebp+var_430] ebx +
jnz loc_101684F  +
mov eax [ebp+var_420] +
add eax edi +
push eax  +
mov eax [ebp+var_41C] +
or eax 100h +
push eax  +
push [ebp+var_418]  +
mov ecx esi +
push 0  +
call ?SetPaneInfo@CStatusBar@@QAEXHIIH@Z  +
mov eax [ebp+var_420] +
push 4  +
push 0C8h  +
push edi  +
push 0  +
add ebx eax +
push ebx  +
push 0  +
lea ecx [esi+80h] +
call ?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z  +
xor edi edi +
inc edi  +
mov [esi+0C8h] edi +
jmp loc_1016852  +
xor edi edi +
inc edi  +
cmp word_102D2A0 0 +
mov ebx ds:lstrlenW +
jz loc_101693D  +
push 104h  +
push 0EF3Eh  +
lea eax [ebp+String] +
push eax  +
call sub_10245AD  +
push offset dword_1003358  +
push 104h  +
lea eax [ebp+String] +
push eax  +
call sub_10082C0  +
test eax eax +
jl loc_1016B84  +
push offset word_102D2A0  +
push 104h  +
lea eax [ebp+String] +
push eax  +
call sub_10082C0  +
test eax eax +
jl loc_1016B84  +
push edi  +
lea eax [ebp+String] +
push eax  +
push edi  +
mov ecx esi +
call ?SetPaneText@CStatusBar@@QAEHHPBGH@Z  +
lea eax [ebp+String] +
push eax  +
call ebx  +
mov ecx [ebp+var_424] +
push eax  +
lea eax [ebp+String] +
push eax  +
lea eax [ebp+var_438] +
push eax  +
call sub_101653B  +
mov ecx [eax] +
mov eax [eax+4] +
mov [ebp+var_428] eax +
lea eax [ebp+var_420] +
push eax  +
lea eax [ebp+var_41C] +
push eax  +
lea eax [ebp+var_418] +
push eax  +
mov [ebp+var_42C] ecx +
push edi  +
mov ecx esi +
call ?GetPaneInfo@CStatusBar@@QBEXHAAI0AAH@Z  +
mov eax [ebp+var_430] +
imul eax eax +
add eax [ebp+var_42C] +
mov ecx esi +
push eax  +
push [ebp+var_41C]  +
push [ebp+var_418]  +
push edi  +
call ?SetPaneInfo@CStatusBar@@QAEXHIIH@Z  +
cmp word_102CE50 0 +
jz loc_1016B84  +
push 104h  +
push 0EF39h  +
lea eax [ebp+String] +
push eax  +
call sub_10245AD  +
push offset dword_1003358  +
push 104h  +
lea eax [ebp+String] +
push eax  +
call sub_10082C0  +
test eax eax +
jl loc_1016B84  +
push offset word_102CE50  +
push 104h  +
lea eax [ebp+String] +
push eax  +
call sub_10082C0  +
test eax eax +
jl loc_1016B84  +
push edi  +
lea eax [ebp+String] +
push eax  +
push 2  +
mov ecx esi +
call ?SetPaneText@CStatusBar@@QAEHHPBGH@Z  +
lea eax [ebp+String] +
push eax  +
call ebx  +
mov ecx [ebp+var_424] +
push eax  +
lea eax [ebp+String] +
push eax  +
lea eax [ebp+var_438] +
push eax  +
call sub_101653B  +
mov ecx [eax] +
mov eax [eax+4] +
mov [ebp+var_428] eax +
lea eax [ebp+var_420] +
push eax  +
lea eax [ebp+var_41C] +
push eax  +
lea eax [ebp+var_418] +
push eax  +
mov [ebp+var_42C] ecx +
push 2  +
mov ecx esi +
call ?GetPaneInfo@CStatusBar@@QBEXHAAI0AAH@Z  +
mov edi [ebp+var_430] +
mov eax [ebp+var_42C] +
imul edi edi +
add eax edi +
push eax  +
push [ebp+var_41C]  +
mov ecx esi +
push [ebp+var_418]  +
push 2  +
call ?SetPaneInfo@CStatusBar@@QAEXHIIH@Z  +
cmp word_102CE50 0 +
jz loc_1016B84  +
push 104h  +
push offset unk_102CE90  +
push offset word_102CE50  +
call sub_101E94A  +
test eax eax +
jz loc_1016B84  +
push 104h  +
push 0EF3Ah  +
lea eax [ebp+String] +
push eax  +
call sub_10245AD  +
push offset dword_1003358  +
push 104h  +
lea eax [ebp+String] +
push eax  +
call sub_10082C0  +
test eax eax +
jl loc_1016B84  +
push offset unk_102D098  +
push 104h  +
lea eax [ebp+var_414] +
push eax  +
call sub_1008286  +
test eax eax +
jl loc_1016B84  +
lea eax [ebp+var_414] +
push 2Eh  +
push eax  +
call ds:wcsrchr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1016ABD  +
xor ecx ecx +
mov [eax] cx +
lea eax [ebp+var_414] +
push eax  +
call ebx  +
cmp eax 14h +
jle loc_1016AF2  +
xor eax eax +
push offset a__  +
mov [ebp+var_3EC] ax +
push 104h  +
lea eax [ebp+var_414] +
push eax  +
call sub_10082C0  +
test eax eax +
jl loc_1016B84  +
lea eax [ebp+var_414] +
push eax  +
push 104h  +
lea eax [ebp+String] +
push eax  +
call sub_10082C0  +
test eax eax +
jl loc_1016B84  +
push 1  +
lea eax [ebp+String] +
push eax  +
push 3  +
mov ecx esi +
call ?SetPaneText@CStatusBar@@QAEHHPBGH@Z  +
lea eax [ebp+String] +
push eax  +
call ebx  +
mov ecx [ebp+var_424] +
push eax  +
lea eax [ebp+String] +
push eax  +
lea eax [ebp+var_438] +
push eax  +
call sub_101653B  +
mov ebx [eax] +
mov eax [eax+4] +
mov [ebp+var_428] eax +
lea eax [ebp+var_420] +
push eax  +
lea eax [ebp+var_41C] +
push eax  +
lea eax [ebp+var_418] +
push eax  +
push 3  +
mov ecx esi +
call ?GetPaneInfo@CStatusBar@@QBEXHAAI0AAH@Z  +
add edi ebx +
push edi  +
push [ebp+var_41C]  +
mov ecx esi +
push [ebp+var_418]  +
push 3  +
call ?SetPaneInfo@CStatusBar@@QAEXHIIH@Z  +
push dword ptr [esi+20h]  +
call ds:UpdateWindow  +
push [ebp+var_424]  +
mov ecx esi +
call sub_101656C  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1026CC5  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
mov ebx eax +
push esi  +
push edi  +
mov edi edx +
mov eax edi +
sub eax [ebp+arg_4] +
mov esi ecx +
cdq   +
mov ecx eax +
xor ecx edx +
sub ecx edx +
mov eax esi +
sub eax ebx +
cdq   +
xor eax edx +
sub eax edx +
lea edx [ecx+ecx] +
mov [ebp+var_8] edx +
lea edx [eax+eax] +
mov [ebp+var_C] edx +
test ecx ecx +
jnz loc_1016C16  +
cmp esi ebx +
jle loc_1016BFC  +
dec esi  +
push esi  +
push edi  +
push [ebp+arg_0]  +
call sub_100A611  +
cmp esi ebx +
jg loc_1016BE8  +
jmp loc_1016CCC  +
jge loc_1016CCC  +
push esi  +
push edi  +
push [ebp+arg_0]  +
call sub_100A611  +
inc esi  +
cmp esi ebx +
jl loc_1016C02  +
jmp loc_1016CCC  +
test eax eax +
jz loc_1016CCC  +
cmp ecx eax +
jl loc_1016C8A  +
mov eax [ebp+arg_4] +
cmp edi eax +
jle loc_1016C34  +
mov [ebp+arg_4] edi +
mov edi eax +
mov eax ebx +
mov ebx esi +
mov esi eax +
neg ecx  +
cmp esi ebx +
jge loc_1016C83  +
jmp loc_1016C5C  +
add ecx [ebp+var_C] +
inc edi  +
test ecx ecx +
jle loc_1016C5C  +
sub ecx [ebp+var_8] +
mov [ebp+var_4] ecx +
cmp esi ebx +
jz loc_1016C5B  +
push esi  +
push edi  +
push [ebp+arg_0]  +
call sub_100A611  +
mov ecx [ebp+var_4] +
inc esi  +
cmp edi [ebp+arg_4] +
jle loc_1016C3C  +
jmp loc_1016CCC  +
add ecx [ebp+var_C] +
inc edi  +
test ecx ecx +
jle loc_1016C83  +
sub ecx [ebp+var_8] +
dec esi  +
cmp esi ebx +
mov [ebp+var_4] ecx +
jl loc_1016C83  +
push esi  +
push edi  +
push [ebp+arg_0]  +
call sub_100A611  +
mov ecx [ebp+var_4] +
cmp edi [ebp+arg_4] +
jle loc_1016C63  +
jmp loc_1016CCC  +
cmp esi ebx +
jle loc_1016C9C  +
mov ecx [ebp+arg_4] +
mov [ebp+arg_4] edi +
mov edi ecx +
mov ecx ebx +
mov ebx esi +
mov esi ecx +
neg eax  +
mov [ebp+var_4] eax +
jmp loc_1016CC8  +
push esi  +
push edi  +
push [ebp+arg_0]  +
call sub_100A611  +
mov eax [ebp+var_4] +
add eax [ebp+var_8] +
mov [ebp+var_4] eax +
js loc_1016CC7  +
sub eax [ebp+var_C] +
cmp edi [ebp+arg_4] +
mov [ebp+var_4] eax +
jge loc_1016CC6  +
inc edi  +
jmp loc_1016CC7  +
dec edi  +
inc esi  +
cmp esi ebx +
jl loc_1016CA3  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push esi  +
push [ebp+arg_0]  +
call sub_102477D  +
mov esi eax +
test esi esi +
jl loc_1016D07  +
push [ebp+arg_4]  +
call sub_100A70B  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
call sub_10246EA  +
test eax eax +
jz loc_1016D0F  +
or eax 0FFFFFFFFh +
jmp loc_1016DD7  +
test esi esi +
jle loc_1016DD5  +
mov eax [ebp+arg_8] +
cdq   +
sub eax edx +
push ebx  +
mov [ebp+arg_0] eax +
sar [ebp+arg_0] 1 +
push edi  +
mov edi [ebp+var_4] +
mov [ebp+var_8] esi +
mov ecx [edi+8] +
mov eax [ecx+8] +
mov [ebp+var_10] eax +
mov eax [ecx+0Ch] +
mov [ebp+var_C] eax +
movsx eax word ptr [ebp+var_10] +
imul eax [ebp+arg_C] +
add eax [ebp+arg_0] +
mov ebx [edi+0Ch] +
cdq   +
idiv  [ebp+arg_8] +
mov esi [ecx] +
mov word ptr [ebp+var_10] ax +
movsx eax word ptr [ebp+var_10+2] +
imul eax [ebp+arg_C] +
add eax [ebp+arg_0] +
cdq   +
idiv  [ebp+arg_8] +
mov word ptr [ebp+var_10+2] ax +
test ebx ebx +
jle loc_1016DC5  +
mov eax [esi+8] +
mov [ebp+var_18] eax +
movsx eax ax +
imul eax [ebp+arg_C] +
add eax [ebp+arg_0] +
mov edi [esi+0Ch] +
cdq   +
idiv  [ebp+arg_8] +
dec ebx  +
mov word ptr [ebp+var_18] ax +
movsx eax word ptr [ebp+var_18+2] +
imul eax [ebp+arg_C] +
add eax [ebp+arg_0] +
movsx ecx word ptr [ebp+var_18] +
cdq   +
idiv  [ebp+arg_8] +
movsx edx word ptr [ebp+var_10] +
push ecx  +
mov ecx [ebp+var_10] +
push [ebp+arg_4]  +
shr ecx 10h +
movsx ecx cx +
mov word ptr [ebp+var_18+2] ax +
cwde   +
call sub_1016BAE  +
mov eax [ebp+var_18] +
mov esi [esi] +
mov [ebp+var_10] eax +
mov [ebp+var_C] edi +
test ebx ebx +
jg loc_1016D69  +
mov edi [ebp+var_4] +
dec [ebp+var_8]  +
mov edi [edi] +
mov [ebp+var_4] edi +
jnz loc_1016D2B  +
pop edi  +
pop ebx  +
xor eax eax +
pop esi  +
leave   +
retn 10h  +
***
mov eax dword_102E7EC +
push esi  +
mov esi ds:free +
push edi  +
xor edi edi +
cmp eax edi +
jz loc_1016DF8  +
push eax  +
call esi  +
pop ecx  +
mov eax dword_102E7E4 +
cmp eax edi +
jz loc_1016E05  +
push eax  +
call esi  +
pop ecx  +
mov eax dword_102E7E8 +
cmp eax edi +
jz loc_1016E12  +
push eax  +
call esi  +
pop ecx  +
mov eax dword_102E7E0 +
cmp eax edi +
jz loc_1016E1F  +
push eax  +
call esi  +
pop ecx  +
mov eax dword_102E7D8 +
cmp eax edi +
jz loc_1016E2C  +
push eax  +
call esi  +
pop ecx  +
mov eax dword_102E7DC +
cmp eax edi +
jz loc_1016E39  +
push eax  +
call esi  +
pop ecx  +
mov dword_102E7E4 edi +
mov dword_102E7E8 edi +
mov dword_102E7E0 edi +
mov dword_102E7DC edi +
mov dword_102E7D8 edi +
mov dword_102E7EC edi +
mov dword_102E7F8 edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ds:free +
push edi  +
push dword_102E7EC  +
call esi  +
push dword_102E7E8  +
call esi  +
push dword_102E7E4  +
call esi  +
add esp 0Ch +
push dword_102E7D4  +
call sub_100A4F1  +
push dword_102E7D0  +
call sub_100A4F1  +
push dword_102E7CC  +
call sub_100A4F1  +
push dword_102E7F4  +
mov edi ds:malloc +
call edi  +
mov esi eax +
pop ecx  +
mov dword_102E7EC esi +
test esi esi +
jz loc_1016F2D  +
push dword_102E7F4  +
call edi  +
pop ecx  +
mov dword_102E7E8 eax +
test eax eax +
jz loc_1016F2D  +
push dword_102E7F4  +
call edi  +
pop ecx  +
mov dword_102E7E4 eax +
test eax eax +
jz loc_1016F2D  +
push ebx  +
push ebx  +
push esi  +
call sub_100A478  +
mov dword_102E7D4 eax +
test eax eax +
jl loc_1016F2D  +
push ebx  +
push ebx  +
push dword_102E7E8  +
call sub_100A478  +
mov dword_102E7D0 eax +
test eax eax +
jl loc_1016F2D  +
push ebx  +
push ebx  +
push dword_102E7E4  +
call sub_100A478  +
mov dword_102E7CC eax +
test eax eax +
jge loc_1016F32  +
or eax 0FFFFFFFFh +
jmp loc_1016F34  +
xor eax eax +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_24] eax +
mov [ebp+var_28] ecx +
test eax eax +
jz loc_1017037  +
cmp dword_102DCE8 411h +
jz loc_1016FD4  +
cmp [ebp+arg_14] 0 +
jnz loc_1016FD4  +
lea eax [ebp+var_20] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_18] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
lea eax [ebp+var_30] +
push eax  +
call sub_10112E6  +
test eax eax +
jz loc_1016F9E  +
push 0FFFFFFFEh  +
jmp loc_10171A9  +
mov eax [ebp+var_14] +
add eax 7 +
cdq   +
and edx 7 +
add eax edx +
sar eax 3 +
imul eax [ebp+var_18] +
lea ecx [ebp+NumberOfBytesWritten] +
push ecx  +
push eax  +
push dword_102E7EC  +
mov dword_102E7F4 eax +
push [ebp+lDistanceToMove]  +
call sub_10117BA  +
test eax eax +
jz loc_101703F  +
push 0FFFFFFFDh  +
jmp loc_10171A9  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
lea eax [ebp+var_18] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
push dword_102E7F4  +
push dword_102E7EC  +
push [ebp+lDistanceToMove]  +
call sub_1024D94  +
test eax eax +
jl loc_1017037  +
jz loc_10171AC  +
cmp eax dword_102E7F4 +
jle loc_101703F  +
mov ebx [ebp+var_14] +
mov dword_102E7F4 eax +
call sub_1016E6B  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
lea eax [ebp+var_18] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
push dword_102E7F4  +
push dword_102E7EC  +
push [ebp+lDistanceToMove]  +
call sub_1024D94  +
test eax eax +
jge loc_101703F  +
or eax 0FFFFFFFFh +
jmp loc_10171AE  +
push 2  +
mov eax offset aCmex_ptn +
pop ecx  +
mov edi eax +
lea esi [ebp+var_C] +
xor edx edx +
cmps   +
jnz loc_101705D  +
mov ecx 8001h +
cmp word ptr [ebp+var_20] cx +
jz loc_10170A3  +
xor ebx ebx +
cmp [ebp+arg_14] ebx +
jnz loc_10170A5  +
mov [ebp+var_1C] ebx +
push 2  +
mov edi eax +
pop ecx  +
lea esi [ebp+var_C] +
xor eax eax +
cmps   +
jz loc_1017080  +
push dword_102E7D4  +
call sub_100A6C8  +
push ebx  +
push dword_102E7CC  +
push dword_102E7D0  +
push dword_102E7D4  +
call sub_100AA76  +
test eax eax +
jge loc_10170AE  +
push 0FFFFFFFCh  +
jmp loc_10171A9  +
xor ebx ebx +
mov [ebp+var_1C] 1 +
jmp loc_1017067  +
mov edi [ebp+arg_C] +
push 10h  +
mov esi edi +
shl esi 2 +
push esi  +
push [ebp+var_18]  +
push [ebp+var_14]  +
push 1  +
push ebx  +
call sub_1020949  +
test eax eax +
jz loc_10170D2  +
push 0FFFFFFFBh  +
jmp loc_10171A9  +
push edi  +
push esi  +
push dword_102E7C8  +
push ebx  +
call sub_1016CD8  +
push dword_102E7C8  +
call sub_100A6C8  +
push [ebp+var_1C]  +
push edi  +
push edi  +
push dword_102E7E0  +
push [ebp+NumberOfBytesWritten]  +
call sub_10253E1  +
test eax eax +
jz loc_1017109  +
push 0FFFFFFFAh  +
jmp loc_10171A9  +
push dword_102E7C8  +
call sub_100A6C8  +
push ebx  +
push dword_102E7C0  +
push dword_102E7C4  +
push dword_102E7C8  +
call sub_100AA76  +
test eax eax +
jge loc_1017134  +
push 0FFFFFFF9h  +
jmp loc_10171A9  +
push 10h  +
push [ebp+var_28]  +
push esi  +
push [ebp+arg_10]  +
push edi  +
push 1  +
push ebx  +
call sub_10209DA  +
test eax eax +
jz loc_101714E  +
push 0FFFFFFF8h  +
jmp loc_10171A9  +
movsx edi [ebp+arg_8] +
push edi  +
push esi  +
push ebx  +
call sub_1020593  +
test eax eax +
jz loc_1017162  +
push 0FFFFFFF7h  +
jmp loc_10171A9  +
push 10h  +
push edi  +
push ebx  +
call sub_102004A  +
test eax eax +
jz loc_1017173  +
push 0FFFFFFF6h  +
jmp loc_10171A9  +
push [ebp+var_24]  +
push ebx  +
call sub_10202F8  +
test eax eax +
jz loc_1017184  +
push 0FFFFFFF5h  +
jmp loc_10171A9  +
cmp [ebp+var_1C] ebx +
jnz loc_1017197  +
push [ebp+NumberOfBytesWritten]  +
call sub_100AD29  +
movzx eax ax +
mov [ebp+NumberOfBytesWritten] eax +
push ebx  +
push [ebp+var_24]  +
push [ebp+NumberOfBytesWritten]  +
call sub_1022F8A  +
test eax eax +
jz loc_10171AC  +
push 0FFFFFFF4h  +
pop eax  +
jmp loc_10171AE  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1026CC5  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_0]  +
call sub_100B348  +
test eax eax +
jl loc_10173B6  +
lea eax [ebp+var_4] +
push eax  +
push 0Fh  +
push [ebp+var_8]  +
call sub_100B371  +
test eax eax +
jl loc_10173B6  +
shr [ebp+var_4] 3 +
mov eax [ebp+var_4] +
mul  [ebp+var_8] +
lea ecx [ebp+var_4] +
push ecx  +
push edx  +
push eax  +
call sub_1011467  +
test eax eax +
jl loc_10173B6  +
push offset dword_102E7F4  +
push [ebp+var_4]  +
call sub_101143B  +
test eax eax +
jl loc_10173B6  +
push dword_102E7F4  +
mov esi ds:malloc +
xor ebx ebx +
mov dword_102E7E4 ebx +
mov dword_102E7E8 ebx +
mov dword_102E7D8 ebx +
mov dword_102E7DC ebx +
mov dword_102E7E0 ebx +
call esi  +
mov edi eax +
pop ecx  +
mov dword_102E7EC edi +
cmp edi ebx +
jz loc_10173B6  +
push dword_102E7F4  +
call esi  +
pop ecx  +
mov dword_102E7E8 eax +
cmp eax ebx +
jz loc_10173B6  +
push dword_102E7F4  +
call esi  +
pop ecx  +
mov dword_102E7E4 eax +
cmp eax ebx +
jz loc_10173B6  +
push [ebp+arg_0]  +
push [ebp+arg_0]  +
push edi  +
call sub_100A478  +
cmp eax ebx +
mov dword_102E7D4 eax +
jl loc_10173B6  +
mov edi [ebp+arg_0] +
push edi  +
push edi  +
push dword_102E7E8  +
call sub_100A478  +
cmp eax ebx +
mov dword_102E7D0 eax +
jl loc_10173B6  +
push edi  +
push edi  +
push dword_102E7E4  +
call sub_100A478  +
cmp eax ebx +
mov dword_102E7CC eax +
jl loc_10173B6  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_4]  +
call sub_100B348  +
test eax eax +
jl loc_10173B6  +
lea eax [ebp+var_4] +
push eax  +
push 0Fh  +
push [ebp+var_8]  +
call sub_100B371  +
test eax eax +
jl loc_10173B6  +
shr [ebp+var_4] 3 +
mov eax [ebp+var_4] +
mul  [ebp+var_8] +
lea ecx [ebp+var_4] +
push ecx  +
push edx  +
push eax  +
call sub_1011467  +
test eax eax +
jl loc_10173B6  +
push offset dword_102E7F0  +
push [ebp+var_4]  +
call sub_101143B  +
test eax eax +
jl loc_10173B6  +
push dword_102E7F0  +
call esi  +
mov edi eax +
pop ecx  +
mov dword_102E7E0 edi +
cmp edi ebx +
jz loc_10173B6  +
push dword_102E7F0  +
call esi  +
pop ecx  +
mov dword_102E7DC eax +
cmp eax ebx +
jz loc_10173B6  +
push dword_102E7F0  +
call esi  +
pop ecx  +
mov dword_102E7D8 eax +
cmp eax ebx +
jz loc_10173B6  +
mov esi [ebp+arg_4] +
push esi  +
push esi  +
push edi  +
call sub_100A478  +
cmp eax ebx +
mov dword_102E7C8 eax +
jl loc_10173B6  +
push esi  +
push esi  +
push dword_102E7DC  +
call sub_100A478  +
cmp eax ebx +
mov dword_102E7C4 eax +
jl loc_10173B6  +
push esi  +
push esi  +
push dword_102E7D8  +
call sub_100A478  +
cmp eax ebx +
mov dword_102E7C0 eax +
jge loc_10173BB  +
or eax 0FFFFFFFFh +
jmp loc_10173BD  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 458h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
mov [ebp+lpFileName] eax +
test esi esi +
jz loc_1017776  +
test edi edi +
jz loc_1017776  +
test eax eax +
jz loc_1017776  +
call sub_100A460  +
call sub_10247A1  +
call sub_100ABC1  +
call sub_100AD79  +
movzx ebx ax +
mov eax [ebp+arg_14] +
mov [ebp+var_448] eax +
lea eax [ebp+ExistingFileName] +
push eax  +
push [ebp+lpFileName]  +
mov [ebp+var_444] 1 +
call sub_1023B3B  +
lea eax [ebp+ExistingFileName] +
push eax  +
push [ebp+lpFileName]  +
call sub_10227A6  +
test eax eax +
jnz loc_101775D  +
cmp dword_102DCE8 411h +
jz loc_10174E6  +
cmp [ebp+arg_18] eax +
jnz loc_10174E6  +
push eax  +
push esi  +
call sub_10116A2  +
test eax eax +
jnz loc_101775D  +
push edi  +
call sub_1025566  +
test eax eax +
jz loc_10174A4  +
push edi  +
call sub_100AF6E  +
test eax eax +
jnz loc_101775D  +
push edi  +
call sub_1025566  +
test eax eax +
jnz loc_101775D  +
mov esi 411h +
xor edi edi +
cmp dword_102DCE8 esi +
jz loc_10174F0  +
cmp [ebp+arg_18] edi +
jnz loc_10174F0  +
lea eax [ebp+var_440] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_430] +
push eax  +
lea eax [ebp+var_434] +
push eax  +
lea eax [ebp+lParam] +
push eax  +
lea eax [ebp+var_424] +
push eax  +
call sub_10112E6  +
jmp loc_1017511  +
push 0  +
push esi  +
call sub_1024969  +
jmp loc_1017476  +
lea eax [ebp+var_430] +
push eax  +
lea eax [ebp+var_434] +
push eax  +
lea eax [ebp+lParam] +
push eax  +
lea eax [ebp+var_424] +
push eax  +
call sub_1024C2F  +
test eax eax +
jnz loc_101775D  +
mov ecx [ebp+var_434] +
lea eax [ecx+7] +
cdq   +
and edx 7 +
add eax edx +
sar eax 3 +
imul eax [ebp+var_430] +
mov dword_102E7F4 eax +
movzx eax bx +
add eax 0FFFF2001h +
cmp [ebp+var_424] eax +
jle loc_101754D  +
mov [ebp+var_424] eax +
push [ebp+arg_C]  +
push ecx  +
call sub_10171C4  +
cmp dword_102DCE8 esi +
jz loc_101756F  +
cmp [ebp+arg_18] edi +
jnz loc_101756F  +
push offset dword_102E7F8  +
call sub_101141C  +
jmp loc_101757C  +
push [ebp+arg_18]  +
push offset dword_102E7F8  +
call sub_1024EB8  +
cmp eax edi +
jnz loc_101775D  +
lea eax [ebp+var_43C] +
push eax  +
lea eax [ebp+var_458] +
push eax  +
push [ebp+lpFileName]  +
call sub_1022558  +
test eax eax +
jnz loc_101775D  +
lea eax [ebp+ExistingFileName] +
push eax  +
call sub_10221A7  +
test eax eax +
jnz loc_101775D  +
push edi  +
push 80h  +
push 3  +
push edi  +
push 3  +
push 80000000h  +
push [ebp+lpFileName]  +
call ds:CreateFileW  +
mov ebx eax +
cmp ebx 0FFFFFFFFh +
jz loc_101775D  +
push edi  +
push ebx  +
call sub_102294C  +
xor esi esi +
cmp [ebp+var_424] edi +
mov [ebp+wParam] edi +
mov [ebp+var_438] edi +
jle loc_101769A  +
mov eax dword_102E7F8 +
cmp [eax+esi*4] edi +
jl loc_1017639  +
inc [ebp+wParam]  +
mov eax [ebp+lParam] +
cmp [ebp+wParam] eax +
jge loc_1017639  +
push eax  +
push [ebp+wParam]  +
call sub_1015F98  +
test eax eax +
jnz loc_1017639  +
mov [ebp+var_438] 1 +
cmp [ebp+var_438] edi +
jnz loc_101767B  +
mov eax dword_102E7F8 +
mov eax [eax+esi*4] +
cmp eax edi +
jl loc_101767B  +
push [ebp+arg_18]  +
lea ecx [ebp+var_458] +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push dword ptr [ebp+var_43C]  +
push ecx  +
push eax  +
lea ecx [ebp+var_448] +
call sub_1016F3E  +
cmp eax edi +
jl loc_1017756  +
jg loc_101769A  +
jmp loc_101768D  +
lea eax [esi+2] +
push eax  +
push ebx  +
call sub_102294C  +
test eax eax +
jnz loc_1017756  +
inc esi  +
cmp esi [ebp+var_424] +
jl loc_1017601  +
push [ebp+lParam]  +
push [ebp+lParam]  +
call sub_1015F98  +
add esi 2 +
push esi  +
push ebx  +
call sub_1022AF1  +
test eax eax +
jnz loc_1017756  +
push ebx  +
call ds:CloseHandle  +
call sub_102232B  +
test eax eax +
jnz loc_1017756  +
cmp dword_102DCE8 411h +
jz loc_101778A  +
cmp [ebp+arg_18] edi +
jnz loc_101778A  +
call sub_1011287  +
test eax eax +
jnz loc_1017756  +
call sub_1024F5F  +
lea eax [ebp+FileName] +
push eax  +
push [ebp+lpFileName]  +
call sub_1023B3B  +
mov edi ds:DeleteFileW +
lea eax [ebp+FileName] +
push eax  +
call edi  +
test eax eax +
jz loc_1017756  +
mov esi ds:MoveFileW +
lea eax [ebp+FileName] +
push eax  +
push [ebp+lpFileName]  +
call esi  +
test eax eax +
jz loc_1017756  +
push [ebp+lpFileName]  +
lea eax [ebp+ExistingFileName] +
push eax  +
call esi  +
test eax eax +
jz loc_1017756  +
lea eax [ebp+FileName] +
push eax  +
call edi  +
test eax eax +
jnz loc_1017794  +
push ebx  +
call ds:CloseHandle  +
call sub_102232B  +
call sub_1024AA2  +
call sub_1024F5F  +
call sub_1024664  +
call sub_1016DE1  +
or eax 0FFFFFFFFh +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1026CC5  +
leave   +
retn 1Ch  +
call sub_1024AA2  +
jmp loc_10176EF  +
call sub_1024664  +
call sub_1016DE1  +
xor eax eax +
jmp loc_1017779  +
***
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+8]  +
mov esi ecx +
push 7Eh  +
call ??0CDialog@@QAE@IPAVCWnd@@@Z  +
mov dword ptr [esi] offset off_100339C +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
retn   +
***
call __EH_prolog3  +
mov esi ecx +
lea ecx [ebp-10h] +
call ??0CString@@QAE@XZ  +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call ?OnInitDialog@CDialog@@UAEHXZ  +
push 0EF58h  +
lea ecx [ebp-10h] +
call ?LoadStringW@CString@@QAEHI@Z  +
push dword ptr [ebp-10h]  +
mov ecx esi +
call ?SetWindowTextW@CWnd@@QAEXPBG@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call ??1CString@@QAE@XZ  +
xor eax eax +
inc eax  +
call __EH_epilog3  +
retn   +
***
push 88Ch  +
mov eax offset word_1027F0A +
call __EH_prolog3_GS  +
mov [ebp-840h] ecx +
lea ecx [ebp-834h] +
call ??0CString@@QAE@XZ  +
xor edi edi +
lea ecx [ebp-838h] +
mov [ebp-4] edi +
call ??0CString@@QAE@XZ  +
lea ecx [ebp-83Ch] +
mov byte ptr [ebp-4] 1 +
call ??0CString@@QAE@XZ  +
mov eax dword_102DCE8 +
mov byte ptr [ebp-4] 2 +
cmp eax 411h +
jnz loc_1017A46  +
mov esi 104h +
push esi  +
push 0EF5Eh  +
lea eax [ebp-218h] +
push eax  +
call sub_10245AD  +
lea eax [ebp-218h] +
push eax  +
call ds:lstrlenW  +
movzx ecx word ptr [ebp+eax*2-21Ah] +
xor edx edx +
cmp [ebp-218h] di +
jz loc_10178CF  +
lea eax [ebp-218h] +
cmp [eax] cx +
jnz loc_10178C2  +
xor ebx ebx +
mov [eax] bx +
inc edx  +
lea eax [ebp+edx*2-218h] +
cmp [eax] di +
jnz loc_10178B8  +
push esi  +
lea eax [ebp-420h] +
push eax  +
call ds:GetSystemWindowsDirectoryW  +
push offset aUserfont_fon  +
push esi  +
lea eax [ebp-628h] +
push eax  +
call sub_1008286  +
cmp eax edi +
jl loc_1017BEA  +
push 0EF5Ah  +
lea ecx [ebp-834h] +
call ?LoadStringW@CString@@QAEHI@Z  +
mov dword ptr [ebp-898h] 58h +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+8] +
mov [ebp-890h] eax +
mov eax [ebp-840h] +
cmp eax edi +
jnz loc_1017931  +
mov [ebp-894h] edi +
jmp loc_101793A  +
mov eax [eax+20h] +
mov [ebp-894h] eax +
lea eax [ebp-218h] +
mov [ebp-88Ch] eax +
lea eax [ebp-628h] +
mov [ebp-87Ch] eax +
lea eax [ebp-830h] +
mov [ebp-874h] eax +
lea eax [ebp-420h] +
mov [ebp-86Ch] eax +
mov eax [ebp-834h] +
mov [ebp-868h] eax +
lea eax [ebp-898h] +
push eax  +
mov [ebp-888h] edi +
mov [ebp-884h] edi +
mov [ebp-880h] edi +
mov [ebp-870h] esi +
mov [ebp-878h] esi +
mov dword ptr [ebp-864h] 80Ch +
mov [ebp-85Ch] edi +
call ds:GetOpenFileNameW  +
test eax eax +
jz loc_1017BEA  +
mov esi [ebp-87Ch] +
push dword ptr [ebp-87Ch]  +
mov ebx offset unk_102EC10 +
mov ecx 82h +
mov edi ebx +
movs   +
mov edi [ebp-840h] +
mov esi 0A9h +
push esi  +
mov ecx edi +
call ?SetDlgItemTextW@CWnd@@QAEXHPBG@Z  +
push ebx  +
call sub_100B18C  +
cmp eax 1 +
jz loc_1017A18  +
test edi edi +
jnz loc_10179F9  +
xor eax eax +
jmp loc_10179FC  +
mov eax [edi+20h] +
push ebx  +
push 1  +
push 0F121h  +
push 0EF58h  +
push eax  +
call sub_10244FD  +
add esp 14h +
push esi  +
jmp loc_1017BDB  +
push ebx  +
call sub_1024B8B  +
cmp eax 1 +
jz loc_1017BD9  +
test edi edi +
jnz loc_1017A2F  +
xor eax eax +
jmp loc_1017A32  +
mov eax [edi+20h] +
push 1  +
push 0EF59h  +
push 0EF58h  +
push eax  +
call sub_102447F  +
jmp loc_1017A12  +
***
cmp eax 404h +
jz loc_1017A58  +
cmp eax 804h +
jnz loc_1017BEA  +
mov esi 104h +
push esi  +
push 0EF60h  +
lea eax [ebp-218h] +
push eax  +
call sub_10245AD  +
lea eax [ebp-218h] +
push eax  +
call ds:lstrlenW  +
movzx ecx word ptr [ebp+eax*2-21Ah] +
xor edx edx +
cmp [ebp-218h] di +
jz loc_1017AAC  +
lea eax [ebp-218h] +
cmp [eax] cx +
jnz loc_1017A9F  +
xor ebx ebx +
mov [eax] bx +
inc edx  +
lea eax [ebp+edx*2-218h] +
cmp [eax] di +
jnz loc_1017A95  +
push esi  +
lea eax [ebp-420h] +
push eax  +
call ds:GetSystemWindowsDirectoryW  +
push offset a_  +
push esi  +
lea eax [ebp-628h] +
push eax  +
call sub_1008286  +
cmp eax edi +
jl loc_1017BEA  +
push 0EF5Ah  +
lea ecx [ebp-834h] +
call ?LoadStringW@CString@@QAEHI@Z  +
mov eax [ebp-840h] +
mov dword ptr [ebp-898h] 58h +
cmp eax edi +
jnz loc_1017B00  +
mov [ebp-894h] edi +
jmp loc_1017B09  +
mov eax [eax+20h] +
mov [ebp-894h] eax +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+8] +
mov [ebp-890h] eax +
lea eax [ebp-218h] +
mov [ebp-88Ch] eax +
lea eax [ebp-830h] +
mov [ebp-874h] eax +
lea eax [ebp-628h] +
mov [ebp-87Ch] eax +
lea eax [ebp-420h] +
mov [ebp-86Ch] eax +
mov eax [ebp-834h] +
mov [ebp-868h] eax +
lea eax [ebp-898h] +
push eax  +
mov [ebp-888h] edi +
mov [ebp-884h] edi +
mov [ebp-880h] edi +
mov [ebp-870h] esi +
mov [ebp-878h] esi +
mov dword ptr [ebp-864h] 80Ch +
mov [ebp-85Ch] edi +
call ds:GetOpenFileNameW  +
test eax eax +
jz loc_1017BEA  +
mov esi [ebp-87Ch] +
push dword ptr [ebp-87Ch]  +
mov ebx offset unk_102EC10 +
mov ecx 82h +
mov edi ebx +
movs   +
mov edi [ebp-840h] +
mov esi 0A9h +
push esi  +
mov ecx edi +
call ?SetDlgItemTextW@CWnd@@QAEXHPBG@Z  +
push ebx  +
call sub_100B18C  +
cmp eax 1 +
jnz loc_10179F1  +
push ebx  +
call sub_1011363  +
jmp loc_1017A1E  +
***
push 1  +
mov ecx edi +
call ?GetDlgItem@CWnd@@QBEPAV1@H@Z  +
push eax  +
mov ecx edi +
call sub_1007E92  +
lea ecx [ebp-83Ch] +
mov byte ptr [ebp-4] 1 +
call ??1CString@@QAE@XZ  +
lea ecx [ebp-838h] +
mov byte ptr [ebp-4] 0 +
call ??1CString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-834h] +
call ??1CString@@QAE@XZ  +
call sub_1026DAC  +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
push offset unk_102CE90  +
mov esi 104h +
push esi  +
mov edi offset unk_102EA08 +
push edi  +
mov ebx ecx +
call sub_1008286  +
test eax eax +
jl loc_1017D10  +
push edi  +
push esi  +
mov edi offset unk_102E800 +
push edi  +
call sub_1008286  +
test eax eax +
jl loc_1017D10  +
push 2Eh  +
push edi  +
call ds:wcsrchr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1017C70  +
xor ecx ecx +
mov [eax] cx +
push offset a_euf  +
push esi  +
push edi  +
call sub_10082C0  +
test eax eax +
jl loc_1017D10  +
push esi  +
mov esi offset unk_102EC10 +
push esi  +
mov edi 0A9h +
push edi  +
mov ecx ebx +
call ?GetDlgItemTextW@CWnd@@QBEHHPAGH@Z  +
test eax eax +
jnz loc_1017CCB  +
test ebx ebx +
jnz loc_1017CA4  +
xor eax eax +
jmp loc_1017CA7  +
mov eax [ebx+20h] +
push 1  +
push 0EF59h  +
push 0EF58h  +
push eax  +
call sub_102447F  +
push edi  +
mov ecx ebx +
call ?GetDlgItem@CWnd@@QBEPAV1@H@Z  +
push eax  +
mov ecx ebx +
call sub_1007E92  +
jmp loc_1017D19  +
cmp dword_102DCE8 411h +
push esi  +
jnz loc_1017D1D  +
call sub_100B18C  +
cmp eax 1 +
jz loc_1017D05  +
test ebx ebx +
jnz loc_1017CEA  +
xor eax eax +
jmp loc_1017CED  +
mov eax [ebx+20h] +
push esi  +
push 1  +
push 0F121h  +
push 0EF58h  +
push eax  +
call sub_10244FD  +
add esp 14h +
jmp loc_1017CB9  +
push esi  +
call sub_1024B8B  +
cmp eax 1 +
jnz loc_1017C9C  +
push 1  +
mov ecx ebx +
call ?EndDialog@CDialog@@QAEXH@Z  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
call sub_100B18C  +
cmp eax 1 +
jnz loc_1017CE2  +
push esi  +
call sub_1011363  +
jmp loc_1017D0B  +
***
mov eax ds:?classCMDIFrameWnd@CMDIFrameWnd@@2UCRuntimeClass@@B +
retn   +
***
mov eax offset off_1003498 +
retn   +
***
mov eax ds:?messageMap@CMDIFrameWnd@@1UAFX_MSGMAP@@B +
retn   +
***
retn   +
***
jmp ??1CFrameWnd@@UAE@XZ  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1003AB4 +
lea ecx [esi+1C0h] +
mov dword ptr [ebp-4] 1 +
call ??1CToolBar@@UAE@XZ  +
lea ecx [esi+0C4h] +
mov byte ptr [ebp-4] 0 +
call sub_10164FF  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1CFrameWnd@@UAE@XZ  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_0]  +
call ?CreateClient@CMDIFrameWnd@@UAEHPAUtagCREATESTRUCTW@@PAVCMenu@@@Z  +
neg eax  +
sbb eax eax +
neg eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push 8004h  +
lea esi [ecx+0C4h] +
push ecx  +
mov ecx esi +
mov [ebp+var_10] 0EF6Fh +
mov [ebp+var_C] 0EF3Eh +
mov [ebp+var_8] 0EF39h +
mov [ebp+var_4] 0EF3Ah +
call sub_101660F  +
test eax eax +
jz loc_1017E2F  +
push 4  +
lea eax [ebp+var_10] +
push eax  +
mov ecx esi +
call ?SetIndicators@CStatusBar@@QAEHPBIH@Z  +
test eax eax +
jz loc_1017E2F  +
mov ecx esi +
call sub_101678B  +
xor eax eax +
inc eax  +
jmp loc_1017E31  +
xor eax eax +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp word_102CE50 0 +
jz loc_1017E64  +
push 104h  +
push offset unk_102CE90  +
push offset word_102CE50  +
call sub_101E94A  +
test eax eax +
jz loc_1017E64  +
push 1  +
jmp loc_1017E66  +
push 0  +
mov ecx [ebp+8] +
mov eax [ecx] +
call dword ptr [eax]  +
pop ebp  +
retn 4  +
***
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
mov edx [eax] +
push 1  +
mov ecx eax +
call dword ptr [edx+98h]  +
mov ecx dword_102EE1C +
push 0  +
call sub_100F5F8  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
mov edx [eax] +
push 0FFFFFFFFh  +
mov ecx eax +
call dword ptr [edx+98h]  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 104h  +
push offset unk_102CE90  +
push offset word_102CE50  +
mov esi ecx +
call sub_101E94A  +
test eax eax +
jz loc_1017EDE  +
cmp dword ptr [esi+190h] 0 +
jz loc_1017EDE  +
push 1  +
jmp loc_1017EE0  +
push 0  +
mov ecx [ebp+8] +
mov eax [ecx] +
call dword ptr [eax]  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 104h  +
push offset unk_102CE90  +
push offset word_102CE50  +
call sub_101E94A  +
mov ecx [ebp+8] +
test eax eax +
mov eax [ecx] +
jz loc_1017F17  +
push 1  +
jmp loc_1017F19  +
push 0  +
call dword ptr [eax]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+190h] 0 +
mov ecx [ebp+8] +
mov eax [ecx] +
jz loc_1017F3B  +
push 1  +
jmp loc_1017F3D  +
push 0  +
call dword ptr [eax]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+190h] 0 +
jz loc_1017F6D  +
mov eax dword_102DCE8 +
cmp eax 404h +
jz loc_1017F69  +
cmp eax 804h +
jnz loc_1017F6D  +
push 1  +
jmp loc_1017F6F  +
push 0  +
mov ecx [ebp+8] +
mov eax [ecx] +
call dword ptr [eax]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_102DCE8 +
cmp eax 404h +
jz loc_1017F9B  +
cmp eax 804h +
jz loc_1017F9B  +
push 0  +
jmp loc_1017F9D  +
push 1  +
mov ecx [ebp+8] +
mov eax [ecx] +
call dword ptr [eax]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jz loc_1017FC6  +
push dword ptr [ecx+19Ch]  +
mov edx [eax] +
mov ecx eax +
call dword ptr [edx+4]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+190h] 0 +
jz loc_1017FFF  +
push esi  +
mov esi [ebp+8] +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
mov ecx dword_102EE1C +
push dword ptr [ecx+2B8h]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+4]  +
pop esi  +
jmp loc_1018008  +
mov ecx [ebp+8] +
mov eax [ecx] +
push 0  +
call dword ptr [eax]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+190h] 0 +
jz loc_101805C  +
push 104h  +
push offset unk_102CE90  +
push offset word_102CE50  +
call sub_101E94A  +
test eax eax +
jz loc_101805C  +
mov eax wParam +
mov ax word ptr dword_102DC34[eax*2] +
mov ecx dword_102EE1C +
cmp ax [ecx+2B4h] +
mov ecx [ebp+8] +
mov eax [ecx] +
jbe loc_1018061  +
push 1  +
jmp loc_1018063  +
mov ecx [ebp+8] +
mov eax [ecx] +
push 0  +
call dword ptr [eax]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+190h] 0 +
jz loc_10180B9  +
push 104h  +
push offset unk_102CE90  +
push offset word_102CE50  +
call sub_101E94A  +
test eax eax +
jz loc_10180B9  +
mov eax wParam +
mov ax word_102DC1C[eax*2] +
mov ecx dword_102EE1C +
cmp ax [ecx+2B4h] +
mov ecx [ebp+8] +
mov eax [ecx] +
jnb loc_10180BE  +
push 1  +
jmp loc_10180C0  +
mov ecx [ebp+8] +
mov eax [ecx] +
push 0  +
call dword ptr [eax]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+190h] 0 +
jz loc_10180FB  +
push esi  +
mov esi [ebp+8] +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
mov ecx dword_102EE1C +
push dword ptr [ecx+2C0h]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+4]  +
pop esi  +
jmp loc_1018104  +
mov ecx [ebp+8] +
mov eax [ecx] +
push 0  +
call dword ptr [eax]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+190h] 0 +
push esi  +
jz loc_1018144  +
mov esi [ebp+8] +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
mov eax dword_102EE1C +
cmp dword ptr [eax+2ACh] 1 +
mov eax [esi] +
mov ecx esi +
jnz loc_101813D  +
push 1  +
jmp loc_101813F  +
push 0  +
call dword ptr [eax+8]  +
jmp loc_101814D  +
mov ecx [ebp+8] +
mov eax [ecx] +
push 0  +
call dword ptr [eax]  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+190h] 0 +
push esi  +
jz loc_101818E  +
mov esi [ebp+8] +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
mov eax dword_102EE1C +
cmp dword ptr [eax+2ACh] 8 +
mov eax [esi] +
mov ecx esi +
jnz loc_1018187  +
push 1  +
jmp loc_1018189  +
push 0  +
call dword ptr [eax+8]  +
jmp loc_1018197  +
mov ecx [ebp+8] +
mov eax [ecx] +
push 0  +
call dword ptr [eax]  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+190h] 0 +
push esi  +
jz loc_10181D8  +
mov esi [ebp+8] +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
mov eax dword_102EE1C +
cmp dword ptr [eax+2ACh] 2 +
mov eax [esi] +
mov ecx esi +
jnz loc_10181D1  +
push 1  +
jmp loc_10181D3  +
push 0  +
call dword ptr [eax+8]  +
jmp loc_10181E1  +
mov ecx [ebp+8] +
mov eax [ecx] +
push 0  +
call dword ptr [eax]  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+190h] 0 +
push esi  +
jz loc_1018222  +
mov esi [ebp+8] +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
mov eax dword_102EE1C +
cmp dword ptr [eax+2ACh] 3 +
mov eax [esi] +
mov ecx esi +
jnz loc_101821B  +
push 1  +
jmp loc_101821D  +
push 0  +
call dword ptr [eax+8]  +
jmp loc_101822B  +
mov ecx [ebp+8] +
mov eax [ecx] +
push 0  +
call dword ptr [eax]  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+190h] 0 +
push esi  +
jz loc_101826C  +
mov esi [ebp+8] +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
mov eax dword_102EE1C +
cmp dword ptr [eax+2ACh] 4 +
mov eax [esi] +
mov ecx esi +
jnz loc_1018265  +
push 1  +
jmp loc_1018267  +
push 0  +
call dword ptr [eax+8]  +
jmp loc_1018275  +
mov ecx [ebp+8] +
mov eax [ecx] +
push 0  +
call dword ptr [eax]  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+190h] 0 +
push esi  +
jz loc_10182B6  +
mov esi [ebp+8] +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
mov eax dword_102EE1C +
cmp dword ptr [eax+2ACh] 5 +
mov eax [esi] +
mov ecx esi +
jnz loc_10182AF  +
push 1  +
jmp loc_10182B1  +
push 0  +
call dword ptr [eax+8]  +
jmp loc_10182BF  +
mov ecx [ebp+8] +
mov eax [ecx] +
push 0  +
call dword ptr [eax]  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+190h] 0 +
push esi  +
jz loc_1018300  +
mov esi [ebp+8] +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
mov eax dword_102EE1C +
cmp dword ptr [eax+2ACh] 6 +
mov eax [esi] +
mov ecx esi +
jnz loc_10182F9  +
push 1  +
jmp loc_10182FB  +
push 0  +
call dword ptr [eax+8]  +
jmp loc_1018309  +
mov ecx [ebp+8] +
mov eax [ecx] +
push 0  +
call dword ptr [eax]  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+190h] 0 +
push esi  +
jz loc_101834A  +
mov esi [ebp+8] +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
mov eax dword_102EE1C +
cmp dword ptr [eax+2ACh] 9 +
mov eax [esi] +
mov ecx esi +
jnz loc_1018343  +
push 1  +
jmp loc_1018345  +
push 0  +
call dword ptr [eax+8]  +
jmp loc_1018353  +
mov ecx [ebp+8] +
mov eax [ecx] +
push 0  +
call dword ptr [eax]  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+190h] 0 +
push esi  +
jz loc_1018394  +
mov esi [ebp+8] +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
mov eax dword_102EE1C +
cmp dword ptr [eax+2ACh] 0Ah +
mov eax [esi] +
mov ecx esi +
jnz loc_101838D  +
push 1  +
jmp loc_101838F  +
push 0  +
call dword ptr [eax+8]  +
jmp loc_101839D  +
mov ecx [ebp+8] +
mov eax [ecx] +
push 0  +
call dword ptr [eax]  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+190h] 0 +
push esi  +
jz loc_10183DE  +
mov esi [ebp+8] +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
mov eax dword_102EE1C +
cmp dword ptr [eax+2ACh] 7 +
mov eax [esi] +
mov ecx esi +
jnz loc_10183D7  +
push 1  +
jmp loc_10183D9  +
push 0  +
call dword ptr [eax+8]  +
jmp loc_10183E7  +
mov ecx [ebp+8] +
mov eax [ecx] +
push 0  +
call dword ptr [eax]  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+8] +
push dword ptr [eax+190h]  +
mov edx [ecx] +
call dword ptr [edx]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+8] +
push dword ptr [eax+194h]  +
mov edx [ecx] +
call dword ptr [edx]  +
pop ebp  +
retn 4  +
***
call ?IsWindowEnabled@CWnd@@QBEHXZ  +
test eax eax +
jz locret_1018452  +
mov eax ppv +
test eax eax +
jz locret_1018452  +
mov ecx [eax] +
push offset aMshelpWindows?  +
push eax  +
call dword ptr [ecx+0Ch]  +
retn   +
***
push offset word_102CE50  +
call sub_101E94A  +
test eax eax +
jz loc_1018527  +
push 0EF3Bh  +
lea ecx [ebp-14h] +
call ?LoadStringW@CString@@QAEHI@Z  +
push 0EF32h  +
lea ecx [ebp-10h] +
call ?LoadStringW@CString@@QAEHI@Z  +
push 23h  +
push dword ptr [ebp-14h]  +
mov ecx esi +
push dword ptr [ebp-10h]  +
call ?MessageBoxW@CWnd@@QAEHPBG0I@Z  +
mov edi eax +
cmp edi 6 +
jnz loc_1018522  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
mov edx [eax] +
push 1  +
mov ecx eax +
call dword ptr [edx+98h]  +
mov ecx dword_102EE1C +
push 1  +
call sub_100F5F8  +
test eax eax +
jnz loc_101850E  +
push 2  +
pop edi  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
mov edx [eax] +
push 0FFFFFFFFh  +
mov ecx eax +
call dword ptr [edx+98h]  +
cmp edi 2 +
jz loc_101852E  +
mov ecx esi +
call ?OnClose@CFrameWnd@@IAEXXZ  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 0 +
call ??1CString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call ??1CString@@QAE@XZ  +
call __EH_epilog3  +
retn   +
***
push ebp  +
mov ebp esp +
sub esp 0E4h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
mov ebx [ebp+8] +
push esi  +
push edi  +
push 37h  +
pop ecx  +
mov esi offset dword_102DC18 +
lea edi [ebp-0E0h] +
movs   +
mov esi [ebp-90h] +
mov [ebp-0E1h] bl +
xor edx edx +
shr ebx 8 +
xor eax eax +
test esi esi +
jle loc_10185B8  +
mov cl [ebp+eax-8Ch] +
mov dl [ebp+8] +
cmp dl cl +
jb loc_10185B6  +
cmp dl [ebp+eax-80h] +
jbe loc_10185F1  +
cmp dl cl +
jb loc_10185B6  +
lea edx [eax+1] +
mov eax edx +
cmp eax esi +
jl loc_1018593  +
jmp loc_10185B8  +
mov edx eax +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_10185D5  +
cmp edx esi +
jnz loc_10185CC  +
mov al [ebp-8Ch] +
inc bl  +
jmp loc_10185EB  +
mov al [ebp+edx-8Ch] +
jmp loc_10185EB  +
test edx edx +
jnz loc_10185E4  +
mov al [ebp+esi-81h] +
dec bl  +
jmp loc_10185EB  +
mov al [ebp+edx-81h] +
mov [ebp-0E1h] al +
movzx cx byte ptr [ebp-0E1h] +
movzx ax bl +
shl ax 8 +
or ax cx +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1026CC5  +
leave   +
retn 8  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+1BCh] +
mov dword ptr [ebp-4] 4 +
call sub_101B05C  +
lea ecx [esi+17Ch] +
mov byte ptr [ebp-4] 3 +
call ??1CEdit@@UAE@XZ  +
lea ecx [esi+134h] +
mov byte ptr [ebp-4] 2 +
call sub_101360C  +
lea ecx [esi+0F4h] +
mov byte ptr [ebp-4] 1 +
call sub_101B014  +
lea ecx [esi+0B4h] +
mov byte ptr [ebp-4] 0 +
call sub_101AFF9  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1CDialog@@UAE@XZ  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax+4] +
push esi  +
mov esi [eax] +
push edi  +
push [ebp+arg_4]  +
mov edi [eax+0Ch] +
mov eax [eax+8] +
sub edi edx +
push edi  +
sub eax esi +
push eax  +
push edx  +
push esi  +
call ?MoveWindow@CWnd@@QAEXHHHHH@Z  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+lpPoint] +
push edi  +
mov ebx ecx +
push esi  +
push dword ptr [ebx+20h]  +
call ds:ClientToScreen  +
lea edi [esi+8] +
push edi  +
push dword ptr [ebx+20h]  +
call ds:ClientToScreen  +
mov ecx ebx +
call ?GetExStyle@CWnd@@QBEKXZ  +
test eax 400000h +
jz loc_10186F9  +
mov eax [esi] +
mov ecx [edi] +
mov [esi] ecx +
mov [edi] eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+lpPoint] +
push edi  +
mov ebx ecx +
push esi  +
push dword ptr [ebx+20h]  +
call ds:ScreenToClient  +
lea edi [esi+8] +
push edi  +
push dword ptr [ebx+20h]  +
call ds:ScreenToClient  +
mov ecx ebx +
call ?GetExStyle@CWnd@@QBEKXZ  +
test eax 400000h +
jz loc_101873F  +
mov eax [esi] +
mov ecx [edi] +
mov [esi] ecx +
mov [edi] eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
adc eax offset SendMessageW +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push dword ptr [esi+20h]  +
call ds:GetParent  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
push 0  +
push dword ptr [esi+20h]  +
push 222h  +
push dword ptr [eax+20h]  +
call ds:SendMessageW  +
pop esi  +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
call ??0CMDIFrameWnd@@QAE@XZ  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+0C4h] +
mov dword ptr [esi] offset off_1003AB4 +
call sub_10165AA  +
xor ebx ebx +
inc ebx  +
lea ecx [esi+1C0h] +
mov [ebp-4] bl +
call ??0CToolBar@@QAE@XZ  +
and dword ptr [esi+190h] 0 +
and dword ptr [esi+194h] 0 +
mov [esi+198h] ebx +
mov [esi+19Ch] ebx +
mov eax esi +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1017D6A  +
test byte ptr [ebp+8] 1 +
jz loc_101880E  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov edi [eax+4] +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push 7F00h  +
xor esi esi +
push esi  +
call ds:LoadCursorW  +
push 2  +
mov ecx edi +
mov [ebp+var_4] eax +
call sub_1007FCE  +
push eax  +
push 6  +
push [ebp+var_4]  +
push esi  +
call ?AfxRegisterWndClass@@YGPBGIPAUHICON__@@PAUHBRUSH__@@0@Z  +
push esi  +
push esi  +
push [ebp+arg_18]  +
lea ecx [ebp+arg_8] +
push esi  +
push ecx  +
push [ebp+arg_4]  +
mov ecx ebx +
push [ebp+arg_0]  +
push eax  +
call ?Create@CFrameWnd@@QAEHPBG0KABUtagRECT@@PAVCWnd@@0KPAUCCreateContext@@@Z  +
neg eax  +
pop edi  +
sbb eax eax +
pop esi  +
neg eax  +
pop ebx  +
leave   +
retn 1Ch  +
***
mov edi edi +
push esi  +
push 0  +
push 50001410h  +
lea esi [ecx+1C0h] +
push ecx  +
mov ecx esi +
call ?Create@CToolBar@@QAEHPAVCWnd@@KI@Z  +
test eax eax +
jz loc_10188C2  +
push 2  +
mov ecx esi +
call ?LoadBitmapW@CToolBar@@QAEHPBG@Z  +
test eax eax +
jz loc_10188C2  +
push 0Ah  +
push offset unk_102C560  +
mov ecx esi +
call ?SetButtons@CToolBar@@QAEHPBIH@Z  +
test eax eax +
jz loc_10188C2  +
xor eax eax +
inc eax  +
pop esi  +
retn   +
xor eax eax +
pop esi  +
retn   +
***
test ecx ecx +
jnz loc_101890E  +
xor eax eax +
jmp loc_1018911  +
mov eax [ecx+20h] +
xor ecx ecx +
cmp dword_102DCC4 ecx +
setnz cl  +
push ecx  +
mov ecx dword_102EE1C +
movzx ecx word ptr [ecx+2B4h] +
push ecx  +
push eax  +
call sub_10259A9  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
xor ecx ecx +
lea eax [esi+19Ch] +
cmp [eax] ecx +
push edi  +
setz cl  +
lea edi [esi+0C4h] +
mov [eax] ecx +
test ecx ecx +
mov ecx edi +
jz loc_1018995  +
push 8  +
jmp loc_1018997  +
push 0  +
call ?ShowWindow@CWnd@@QAEHH@Z  +
mov ecx edi +
call sub_101678B  +
push 0  +
push 0  +
push 5  +
push dword ptr [esi+20h]  +
call ds:SendMessageW  +
xor eax eax +
pop edi  +
inc eax  +
pop esi  +
retn 4  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
xor ecx ecx +
push edi  +
lea eax [esi+198h] +
xor edi edi +
cmp [eax] edi +
lea ebx [esi+1C0h] +
setz cl  +
mov [eax] ecx +
cmp ecx edi +
jz loc_1018A05  +
push edi  +
push edi  +
push ebx  +
mov ecx esi +
call ?DockControlBar@CFrameWnd@@QAEXPAVCControlBar@@IPBUtagRECT@@@Z  +
push 1  +
mov ecx ebx +
call ?ShowWindow@CWnd@@QAEHH@Z  +
push edi  +
push edi  +
push 5  +
push dword ptr [esi+20h]  +
call ds:SendMessageW  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov ecx ebx +
call ?IsFloating@CControlBar@@QBEHXZ  +
push edi  +
test eax eax +
jz loc_10189ED  +
mov ecx ebx +
call ?GetParentOwner@CWnd@@QBEPAV1@XZ  +
mov ecx eax +
jmp loc_10189EF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push dword ptr [esi+1E0h]  +
call ds:IsWindowVisible  +
mov ecx [ebp+8] +
mov [esi+198h] eax +
mov edx [ecx] +
push eax  +
call dword ptr [edx+4]  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax dword_102EE1C +
push ebx  +
add eax 2B8h +
mov [ebp-4] ecx +
xor ecx ecx +
xor ebx ebx +
cmp [eax] ebx +
push esi  +
mov esi ds:InvalidateRect +
setz cl  +
push edi  +
push ebx  +
push ebx  +
mov [eax] ecx +
mov eax dword_102EE1C +
push dword ptr [eax+20h]  +
call esi  +
mov eax dword_102EE1C +
push dword ptr [eax+20h]  +
mov edi ds:UpdateWindow +
call edi  +
mov eax [ebp-4] +
cmp [eax+194h] ebx +
jz loc_1018AC5  +
mov eax dword_102EE18 +
add eax 0C8h +
xor ecx ecx +
cmp [eax] ebx +
push ebx  +
setz cl  +
push ebx  +
mov [eax] ecx +
mov eax dword_102EE18 +
push dword ptr [eax+20h]  +
call esi  +
mov eax dword_102EE18 +
push dword ptr [eax+20h]  +
call edi  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
xor edx edx +
cmp [ecx+190h] edx +
jz locret_1018B0A  +
mov eax dword_102EE1C +
add eax 2C0h +
xor ecx ecx +
cmp [eax] edx +
push edx  +
setz cl  +
push edx  +
mov [eax] ecx +
mov eax dword_102EE1C +
push dword ptr [eax+20h]  +
call ds:InvalidateRect  +
mov eax dword_102EE1C +
push dword ptr [eax+20h]  +
call ds:UpdateWindow  +
retn   +
***
mov eax dword_102EE1C +
mov dword ptr [eax+2ACh] 1 +
mov ecx dword_102EE1C +
call sub_100F5D1  +
mov ecx dword_102EE1C +
jmp sub_1018763  +
***
mov eax dword_102EE1C +
mov dword ptr [eax+2ACh] 8 +
mov ecx dword_102EE1C +
call sub_100F5D1  +
mov ecx dword_102EE1C +
jmp sub_1018763  +
***
mov eax dword_102EE1C +
mov dword ptr [eax+2ACh] 2 +
mov ecx dword_102EE1C +
call sub_100F5D1  +
mov ecx dword_102EE1C +
jmp sub_1018763  +
***
mov eax dword_102EE1C +
mov dword ptr [eax+2ACh] 3 +
mov ecx dword_102EE1C +
call sub_100F5D1  +
mov ecx dword_102EE1C +
jmp sub_1018763  +
***
mov eax dword_102EE1C +
mov dword ptr [eax+2ACh] 4 +
mov ecx dword_102EE1C +
call sub_100F5D1  +
mov ecx dword_102EE1C +
jmp sub_1018763  +
***
mov eax dword_102EE1C +
mov dword ptr [eax+2ACh] 5 +
mov ecx dword_102EE1C +
call sub_100F5D1  +
mov ecx dword_102EE1C +
jmp sub_1018763  +
***
mov eax dword_102EE1C +
mov dword ptr [eax+2ACh] 6 +
mov ecx dword_102EE1C +
call sub_100F5D1  +
mov ecx dword_102EE1C +
jmp sub_1018763  +
***
mov ecx dword_102EE1C +
push 9  +
pop eax  +
mov [ecx+2ACh] eax +
mov ecx dword_102EE18 +
mov [ecx+0D8h] eax +
mov ecx dword_102EE1C +
call sub_100F5D1  +
mov ecx dword_102EE1C +
jmp sub_1018763  +
***
mov eax dword_102EE1C +
mov dword ptr [eax+2ACh] 0Ah +
mov ecx dword_102EE1C +
call sub_100F5D1  +
mov ecx dword_102EE1C +
jmp sub_1018763  +
***
mov ecx dword_102EE1C +
push 7  +
pop eax  +
mov [ecx+2ACh] eax +
mov ecx dword_102EE18 +
mov [ecx+0D8h] eax +
mov ecx dword_102EE1C +
call sub_100F5D1  +
mov ecx dword_102EE1C +
jmp sub_1018763  +
***
or eax offset dword_102EE1C +
push 1  +
call sub_100F5F8  +
test eax eax +
jnz loc_1018D83  +
push 2  +
pop esi  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
mov edx [eax] +
push 0FFFFFFFFh  +
mov ecx eax +
call dword ptr [edx+98h]  +
jmp loc_1018DAB  +
cmp esi 2 +
jnz loc_1018DB4  +
xor eax eax +
pop esi  +
retn   +
***
xor eax eax +
inc eax  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
mov eax dword_102DF58 +
and [ebp+var_1C] 0 +
and [ebp+var_18] 0 +
push ebx  +
push esi  +
push edi  +
mov edi dword_102DF5C +
mov [ebp+var_10] eax +
push 1  +
lea eax [ebp+var_1C] +
mov esi ecx +
mov ecx dword_102EE1C +
push eax  +
mov [ebp+var_14] edi +
call sub_101868F  +
lea eax [ebp+Rect] +
push eax  +
mov eax dword_102EE1C +
push dword ptr [eax+20h]  +
call ds:GetClientRect  +
sub edi [ebp+Rect.right] +
mov ebx [ebp+Rect.top] +
add edi [ebp+Rect.left] +
sub ebx [ebp+Rect.bottom] +
mov [ebp+var_C] edi +
add ebx [ebp+var_10] +
lea edi [esi+1A0h] +
push edi  +
mov ecx esi +
call sub_1007E78  +
cmp dword ptr [esi+19Ch] 0 +
jz loc_1018E4C  +
lea eax [ebp+var_2C] +
push eax  +
push dword ptr [esi+0E4h]  +
call ds:GetWindowRect  +
mov eax [ebp+var_28] +
sub eax [ebp+var_20] +
add [esi+1ACh] eax +
cmp dword ptr [esi+198h] 0 +
jz loc_1018E71  +
lea eax [ebp+var_2C] +
push eax  +
push dword ptr [esi+1E0h]  +
call ds:GetWindowRect  +
mov eax [ebp+var_2C] +
sub eax [ebp+var_24] +
add [esi+1A8h] eax +
cmp dword ptr [esi+194h] 0 +
jz loc_1018E89  +
lea ecx [esi+1A8h] +
mov eax [ecx] +
cdq   +
sub eax edx +
sar eax 1 +
mov [ecx] eax +
mov eax [edi+0Ch] +
mov ecx [edi+8] +
sub eax [edi+4] +
sub ecx [edi] +
cmp ecx eax +
jge loc_1018EB6  +
mov eax [edi+8] +
sub eax [edi] +
mov ecx dword_102DF5C +
cdq   +
idiv  ecx +
mov [ebp+var_4] eax +
mov eax [edi+8] +
sub eax [edi] +
cdq   +
idiv  ecx +
cmp edx [ebp+var_C] +
jmp loc_1018EDA  +
mov eax [edi+0Ch] +
sub eax [edi+4] +
mov ecx dword_102DF58 +
cdq   +
idiv  ecx +
mov [ebp+var_4] eax +
mov eax [edi+0Ch] +
sub eax [edi+4] +
cdq   +
idiv  ecx +
mov eax dword_102DF60 +
add eax ebx +
cmp edx eax +
jge loc_1018EDF  +
dec [ebp+var_4]  +
mov eax [ebp+var_4] +
test eax eax +
jg loc_1018EE9  +
xor eax eax +
inc eax  +
and dword ptr [edi] 0 +
mov ecx dword_102DF5C +
imul ecx eax +
add ecx [ebp+var_C] +
pop edi  +
mov [esi+1A8h] ecx +
mov ecx dword_102DF58 +
imul ecx eax +
add ecx dword_102DF60 +
add ecx ebx +
mov [esi+1ACh] ecx +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
mov esi ds:GetSystemMetrics +
push edi  +
push 20h  +
mov edi ecx +
call esi  +
push 5  +
mov ebx eax +
call esi  +
sub ebx eax +
add ebx ebx +
push 21h  +
mov [ebp+var_10] ebx +
call esi  +
push 6  +
mov ebx eax +
call esi  +
sub ebx eax +
lea esi [edi+1B0h] +
push esi  +
mov ecx edi +
add ebx ebx +
call sub_1007E78  +
cmp dword ptr [edi+19Ch] 0 +
jz loc_1018F84  +
lea eax [ebp+Rect] +
push eax  +
push dword ptr [edi+0E4h]  +
call ds:GetWindowRect  +
mov eax [ebp+Rect.top] +
sub eax [ebp+Rect.bottom] +
add [edi+1BCh] eax +
cmp dword ptr [edi+198h] 0 +
jz loc_1018FA9  +
lea eax [ebp+Rect] +
push eax  +
push dword ptr [edi+1E0h]  +
call ds:GetWindowRect  +
mov eax [ebp+Rect.left] +
sub eax [ebp+Rect.right] +
add [edi+1B8h] eax +
mov eax [edi+1B8h] +
cdq   +
sub eax edx +
sar eax 1 +
mov [esi] eax +
mov ecx [esi+8] +
sub ecx [esi] +
mov [ebp+var_8] eax +
mov eax [esi+0Ch] +
sub eax [esi+4] +
cmp ecx eax +
jge loc_1018FFF  +
mov eax [esi+8] +
sub eax [esi] +
mov ecx dword_102DF5C +
cdq   +
idiv  ecx +
mov [ebp+var_4] eax +
mov eax [esi+8] +
sub eax [esi] +
cdq   +
idiv  ecx +
mov eax [ebp+var_10] +
lea esi [eax+4] +
cmp edx esi +
jge loc_1018FEE  +
dec [ebp+var_4]  +
imul ecx [ebp+var_4] +
add ecx [ebp+var_8] +
add ecx eax +
mov [edi+1B8h] ecx +
jmp loc_101904C  +
mov eax [esi+0Ch] +
sub eax [esi+4] +
mov ecx dword_102DF58 +
cdq   +
idiv  ecx +
mov [ebp+var_4] eax +
mov eax [esi+0Ch] +
sub eax [esi+4] +
cdq   +
idiv  ecx +
mov eax dword_102DF60 +
lea eax [eax+ebx+4] +
cmp edx eax +
jge loc_101902A  +
dec [ebp+var_4]  +
cmp [ebp+var_4] 0 +
jg loc_1019037  +
mov [ebp+var_4] 1 +
mov eax dword_102DF5C +
imul eax [ebp+var_4] +
add eax [ebp+var_8] +
add eax [ebp+var_10] +
mov [edi+1B8h] eax +
mov eax dword_102DF58 +
imul eax [ebp+var_4] +
add eax dword_102DF60 +
add eax ebx +
mov [edi+1BCh] eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
mov edi [ebp+8] +
mov [ebp-4] ecx +
test edi edi +
jz loc_10190DB  +
push edi  +
call MFC42u_6819  +
mov eax dword_102DCE8 +
cmp eax 404h +
jz loc_10190DB  +
cmp eax 804h +
jz loc_10190DB  +
push esi  +
mov esi ds:DeleteMenu +
push 0  +
push 8017h  +
push dword ptr [edi+4]  +
call esi  +
push 0  +
push 8022h  +
push dword ptr [edi+4]  +
call esi  +
cmp dword_102DCE8 411h +
jz loc_10190CE  +
push 0  +
push 801Eh  +
push dword ptr [edi+4]  +
call esi  +
mov eax [ebp-4] +
push dword ptr [eax+20h]  +
call ds:DrawMenuBar  +
pop esi  +
pop edi  +
leave   +
retn 4  +
***
call __EH_prolog3_GS  +
push 0  +
lea ecx [ebp-334h] +
call sub_101A5C3  +
mov esi [ebp+8] +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-334h] +
mov dword_102EE20 esi +
call ?DoModal@CDialog@@UAEHXZ  +
mov edi eax +
cmp edi 1 +
jnz loc_1019145  +
mov ax [ebp-12Ch] +
test esi esi +
jnz loc_1019138  +
mov ecx dword_102EE18 +
test ax ax +
jnz loc_1019151  +
jmp loc_101914F  +
mov ecx dword_102EE1C +
test ax ax +
jnz loc_1019162  +
jmp loc_1019160  +
test esi esi +
jnz loc_101915A  +
mov ecx dword_102EE18 +
xor eax eax +
mov [ecx+0CCh] ax +
jmp loc_1019169  +
mov ecx dword_102EE1C +
xor eax eax +
mov [ecx+2BCh] ax +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-334h] +
call sub_101861A  +
mov eax edi +
call sub_1026DAC  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
cmp [ebp+arg_0] 402h +
jnz loc_1019345  +
mov eax dword_102EE1C +
push ebx  +
push esi  +
push edi  +
mov edi [eax+2B0h] +
lea ecx [ebp+Point] +
push ecx  +
push dword ptr [eax+20h]  +
call ds:GetClientRect  +
mov ecx dword_102EE1C +
lea eax [ebp+Point] +
push eax  +
call sub_10186BF  +
mov ebx [ebp+lpPoint] +
mov ecx dword_102EE1C +
push ebx  +
call sub_100C861  +
mov esi [ebp+arg_4] +
mov eax [ebx] +
sub eax [esi] +
push esi  +
cdq   +
idiv  edi +
imul eax edi +
mov [esi] eax +
mov eax [ebx+4] +
sub eax [esi+4] +
mov ecx dword_102DF60 +
sub eax ecx +
cdq   +
idiv  edi +
imul eax edi +
add eax ecx +
mov [esi+4] eax +
mov eax [esi] +
add [esi+8] eax +
mov eax [esi+4] +
add [esi+0Ch] eax +
mov ecx dword_102EE1C +
call sub_10186BF  +
push esi  +
lea eax [ebp+Point] +
push eax  +
lea eax [ebp+rc1] +
push eax  +
call ds:IntersectRect  +
test eax eax +
jz loc_101931E  +
push esi  +
lea eax [ebp+rc1] +
push eax  +
call ds:EqualRect  +
test eax eax +
jz loc_101924D  +
mov ecx dword_102EE1C +
push esi  +
call sub_1018705  +
push ebx  +
push esi  +
jmp loc_10192D8  +
push dword ptr [esi+0Ch]  +
lea eax [ebp+rcSrc] +
push dword ptr [esi+8]  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
push eax  +
call ds:SetRect  +
mov eax [ebp+Point.x] +
cmp [ebp+rcSrc.left] eax +
mov esi ds:OffsetRect +
jge loc_101927C  +
sub eax [ebp+rcSrc.left] +
push 0  +
push eax  +
lea eax [ebp+rcSrc] +
push eax  +
call esi  +
mov eax dword_102DF60 +
mov ecx [ebp+Point.y] +
lea edx [eax+ecx] +
cmp [ebp+rcSrc.top] edx +
jge loc_101929A  +
sub eax [ebp+rcSrc.top] +
add eax ecx +
push eax  +
push 0  +
lea eax [ebp+rcSrc] +
push eax  +
call esi  +
mov eax [ebp-18h] +
cmp [ebp+rcSrc.right] eax +
jle loc_10192AF  +
sub eax [ebp+rcSrc.right] +
push 0  +
inc eax  +
push eax  +
lea eax [ebp+rcSrc] +
push eax  +
call esi  +
mov eax [ebp-14h] +
cmp [ebp+rcSrc.bottom] eax +
jle loc_10192C4  +
sub eax [ebp+rcSrc.bottom] +
inc eax  +
push eax  +
push 0  +
lea eax [ebp+rcSrc] +
push eax  +
call esi  +
mov ecx dword_102EE1C +
lea eax [ebp+rcSrc] +
push eax  +
call sub_1018705  +
push ebx  +
lea eax [ebp+rcSrc] +
push eax  +
mov ecx dword_102EE1C +
call sub_100FC72  +
mov eax dword_102EE18 +
and dword ptr [eax+0D0h] 0 +
mov ecx dword_102EE1C +
call sub_1018763  +
mov ecx dword_102EE18 +
xor eax eax +
cmp dword ptr [ecx+0D8h] 9 +
mov ecx dword_102EE1C +
setz al  +
lea eax [eax+eax+7] +
mov [ecx+2ACh] eax +
jmp loc_101933E  +
mov eax dword_102EE18 +
push 0  +
push 0  +
push dword ptr [eax+20h]  +
call ds:InvalidateRect  +
mov eax dword_102EE18 +
push dword ptr [eax+20h]  +
call ds:UpdateWindow  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
jmp locret_1019353  +
push [ebp+lpPoint]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ?WindowProc@CWnd@@MAEJIIJ@Z  +
leave   +
retn 0Ch  +
***
mov ecx dword_102EE1C +
call sub_1018763  +
xor eax eax +
inc eax  +
retn   +
***
jmp dword_102EE1C[ecx]  +
***
mov [eax+2B4h] cx +
mov ecx dword_102EE1C +
push 0  +
call sub_100F5F8  +
movzx eax word ptr [ebp-4C0h] +
push eax  +
push offset asc_1002608  +
push 5  +
push offset word_102D2A0  +
call sub_1011E02  +
add esp 10h +
test eax eax +
jl loc_10194A0  +
mov eax [ebp-4BCh] +
lea ecx [ebx+0C4h] +
mov wParam eax +
call sub_101678B  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
mov edx [eax] +
push 0FFFFFFFFh  +
mov ecx eax +
call dword ptr [edx+98h]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-578h] +
call sub_1011C25  +
call sub_1026DAC  +
retn   +
***
call sub_100B14B  +
test eax eax +
jnz loc_1019535  +
mov esi [esi+20h] +
push 1  +
push 0EF7Ah  +
push 0EF3Bh  +
push esi  +
call sub_102447F  +
jmp loc_10195CF  +
lea ecx [ebp-278h] +
call ?DoModal@CDialog@@UAEHXZ  +
xor ecx ecx +
inc ecx  +
cmp eax ecx +
jnz loc_10195CF  +
mov edi ds:SendMessageW +
cmp [esi+190h] ebx +
jz loc_1019582  +
mov eax dword_102EE1C +
mov [ebp-938h] ebx +
cmp [eax+2C0h] ebx +
jz loc_1019582  +
push ebx  +
push 800Fh  +
push 111h  +
push dword ptr [esi+20h]  +
mov [ebp-938h] ecx +
call edi  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
lea ecx [ebp-934h] +
call sub_10161B4  +
lea ecx [ebp-934h] +
mov byte ptr [ebp-4] 1 +
call ?DoModal@CDialog@@UAEHXZ  +
cmp [esi+190h] ebx +
jz loc_10195C1  +
cmp [ebp-938h] ebx +
jz loc_10195C1  +
push ebx  +
push 800Fh  +
push 111h  +
push dword ptr [esi+20h]  +
call edi  +
lea ecx [ebp-934h] +
mov [ebp-4] bl +
call sub_1007D17  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-278h] +
call ??1CDialog@@UAE@XZ  +
call sub_1026DAC  +
retn   +
***
pop esi  +
jmp loc_100CC30  +
***
pop esi  +
retn   +
***
fidiv  dword ptr [edi+edi*8] +
jmp dword_102EE1C[ecx]  +
***
movzx eax word ptr [eax+2B4h] +
push eax  +
push offset asc_1002608  +
push 5  +
push offset word_102D2A0  +
call sub_1011E02  +
add esp 10h +
pop esi  +
test eax eax +
jl loc_10196C1  +
lea ecx [edi+0C4h] +
pop edi  +
jmp sub_101678B  +
***
pop edi  +
retn   +
***
cmp dh [edi+edi*8] +
jmp dword_102EE1C[ecx]  +
***
mov esp [ebx-1] +
jmp dword_102EE1C[ecx]  +
***
movzx eax word ptr [eax+2B4h] +
push eax  +
push offset asc_1002608  +
push 5  +
push offset word_102D2A0  +
call sub_1011E02  +
add esp 10h +
pop esi  +
test eax eax +
jl loc_1019766  +
lea ecx [edi+0C4h] +
pop edi  +
jmp sub_101678B  +
***
pop edi  +
retn   +
***
call __EH_prolog3  +
mov ebx ecx +
lea esi [ebx+1B0h] +
push esi  +
call ds:SetRectEmpty  +
mov ecx ebx +
call sub_1018F1F  +
push 1FCh  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
and dword ptr [ebp-4] 0 +
test eax eax +
jz loc_10197B1  +
mov ecx eax +
call sub_101D69B  +
mov [ebp-10h] eax +
jmp loc_10197B5  +
and dword ptr [ebp-10h] 0 +
mov ecx [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
push ebx  +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
push 40800000h  +
push offset aReferwindow  +
movs   +
call sub_101CA0B  +
test eax eax +
jz loc_10197EB  +
mov eax [ebp-10h] +
mov dword_102EE18 eax +
and dword ptr [ebx+194h] 0 +
xor eax eax +
inc eax  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1018DBE  +
lea eax [esi+1A0h] +
mov ecx [eax+0Ch] +
sub ecx [eax+4] +
push 1  +
push ecx  +
mov ecx [eax+8] +
sub ecx [eax] +
push ecx  +
push dword ptr [esi+1A4h]  +
mov ecx dword_102EE1C +
push dword ptr [eax]  +
call ?MoveWindow@CWnd@@QAEXHHHHH@Z  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1018F1F  +
lea eax [esi+1B0h] +
mov ecx [eax+0Ch] +
sub ecx [eax+4] +
push 1  +
push ecx  +
mov ecx [eax+8] +
sub ecx [eax] +
push ecx  +
push dword ptr [esi+1B4h]  +
mov ecx dword_102EE18 +
push dword ptr [eax]  +
call ?MoveWindow@CWnd@@QAEXHHHHH@Z  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push dword ptr [ebp+10h]  +
mov esi ecx +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call ?OnSize@CMDIFrameWnd@@IAEXIHH@Z  +
xor edi edi +
cmp [esi+194h] edi +
jz loc_1019890  +
mov ecx esi +
call sub_101982F  +
cmp [esi+190h] edi +
jz loc_101989F  +
mov ecx esi +
call sub_10197F6  +
cmp [esi+198h] edi +
jnz loc_10198BF  +
push edi  +
push edi  +
add esi 1E0h +
push dword ptr [esi]  +
call ds:InvalidateRect  +
push dword ptr [esi]  +
call ds:UpdateWindow  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 65Ch +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
mov [ebp-64Ch] esi +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
push dword ptr [esi+20h]  +
mov [ebp-648h] eax +
call ds:IsZoomed  +
mov esi eax +
movzx eax byte_102DD4E +
push eax  +
mov eax dword ptr unk_102DD4C +
movzx ecx ah +
push ecx  +
movzx eax al +
push eax  +
mov ebx offset aDDD +
push ebx  +
neg esi  +
mov edi 320h +
lea eax [ebp-644h] +
sbb esi esi +
push edi  +
push eax  +
neg esi  +
call sub_1011E02  +
add esp 18h +
test eax eax +
jl loc_1019A99  +
mov ecx [ebp-648h] +
lea eax [ebp-644h] +
push eax  +
push offset aGrid  +
push offset aColor  +
call ?WriteProfileStringW@CWinApp@@QAEHPBG00@Z  +
movzx eax byte_102DD46 +
push eax  +
mov eax dword ptr unk_102DD44 +
movzx ecx ah +
push ecx  +
movzx eax al +
push eax  +
push ebx  +
lea eax [ebp-644h] +
push edi  +
push eax  +
call sub_1011E02  +
add esp 18h +
test eax eax +
jl loc_1019A99  +
mov ecx [ebp-648h] +
lea eax [ebp-644h] +
push eax  +
push offset aCurve  +
push offset aColor  +
call ?WriteProfileStringW@CWinApp@@QAEHPBG00@Z  +
movzx eax byte ptr dword_102DD48+2 +
push eax  +
mov eax dword_102DD48 +
movzx ecx ah +
push ecx  +
movzx eax al +
push eax  +
push ebx  +
lea eax [ebp-644h] +
push edi  +
push eax  +
call sub_1011E02  +
add esp 18h +
test eax eax +
jl loc_1019A99  +
mov ecx [ebp-648h] +
lea eax [ebp-644h] +
push eax  +
push offset aFitting  +
push offset aColor  +
call ?WriteProfileStringW@CWinApp@@QAEHPBG00@Z  +
push dword_102DF5C  +
mov ecx [ebp-648h] +
push offset aBitmapsize  +
push offset aBitmap  +
call ?WriteProfileInt@CWinApp@@QAEHPBG0H@Z  +
mov ecx [ebp-648h] +
movsx eax si +
push eax  +
push offset aMinmaxflag  +
mov ebx offset aWindowsize +
push ebx  +
call ?WriteProfileInt@CWinApp@@QAEHPBG0H@Z  +
test si si +
jnz loc_1019A99  +
mov esi [ebp-64Ch] +
push dword ptr [esi+20h]  +
call ds:IsIconic  +
test eax eax +
jnz loc_1019A9F  +
lea eax [ebp-65Ch] +
push eax  +
push dword ptr [esi+20h]  +
call ds:GetWindowRect  +
push dword ptr [ebp-650h]  +
lea eax [ebp-644h] +
push dword ptr [ebp-654h]  +
push dword ptr [ebp-658h]  +
push dword ptr [ebp-65Ch]  +
push offset aDDDD  +
push edi  +
push eax  +
call sub_1011E02  +
add esp 1Ch +
test eax eax +
jl loc_1019A9F  +
mov ecx [ebp-648h] +
lea eax [ebp-644h] +
push eax  +
push offset aMainwindowsize  +
push ebx  +
call ?WriteProfileStringW@CWinApp@@QAEHPBG00@Z  +
jmp loc_1019A9F  +
mov esi [ebp-64Ch] +
mov ecx esi +
call ?OnDestroy@CMDIFrameWnd@@IAEXXZ  +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1026CC5  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push dword ptr [ebp+8]  +
mov esi ecx +
call ?OnCreate@CFrameWnd@@IAEHPAUtagCREATESTRUCTW@@@Z  +
or edi 0FFFFFFFFh +
cmp eax edi +
jnz loc_1019AD6  +
mov eax edi +
jmp loc_1019B30  +
push 2  +
mov ecx esi +
call ?LoadAccelTable@CFrameWnd@@QAEHPBG@Z  +
test eax eax +
jz loc_1019AD2  +
mov ecx esi +
call sub_1017DD6  +
test eax eax +
jz loc_1019AD2  +
mov ecx esi +
call sub_1018882  +
test eax eax +
jz loc_1019AD2  +
push 0F000h  +
mov ecx esi +
call ?EnableDocking@CFrameWnd@@QAEXK@Z  +
mov ecx esi +
call sub_101976D  +
test eax eax +
jz loc_1019AD2  +
lea edi [esi+1C0h] +
push 3000h  +
mov ecx edi +
call ?EnableDocking@CControlBar@@QAEXK@Z  +
push 0  +
push 0  +
push edi  +
mov ecx esi +
call ?DockControlBar@CFrameWnd@@QAEXPAVCControlBar@@IPBUtagRECT@@@Z  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
jmp dword_102EE1C[ecx]  +
***
push offset asc_1002608  +
push 5  +
push offset word_102D2A0  +
call sub_1011E02  +
add esp 10h +
cmp eax edi +
jl loc_1019CB6  +
mov eax [ebp-4BCh] +
lea ecx [ebx+0C4h] +
mov wParam eax +
call sub_101678B  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
mov edx [eax] +
push 0FFFFFFFFh  +
mov ecx eax +
call dword ptr [edx+98h]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-578h] +
call sub_1011C25  +
call sub_1026DAC  +
retn   +
***
sbb eax offset dword_102DCC4 +
jnz loc_101A0AE  +
mov eax dword_102DC18 +
push dword ptr [ebp-5A4h]  +
dec eax  +
mov wParam eax +
mov dword_102DCC4 1 +
call sub_1015606  +
cmp word_102D2A0 bx +
jz loc_101A09D  +
mov edi ds:wcstol +
push 10h  +
push ebx  +
mov esi offset word_102D2A0 +
push esi  +
call edi  +
push 10h  +
shr eax 8 +
push ebx  +
push esi  +
mov [ebp-59Ch] al +
call edi  +
add esp 18h +
push 1  +
mov [ebp-59Bh] al +
lea eax [ebp-5A0h] +
push eax  +
push 2  +
lea eax [ebp-59Ch] +
push eax  +
push ebx  +
push dword ptr [ebp-5A4h]  +
call ds:MultiByteToWideChar  +
movzx eax word ptr [ebp-5A0h] +
push eax  +
push offset asc_1002608  +
push 5  +
push esi  +
call sub_1011E02  +
add esp 10h +
cmp eax ebx +
jl loc_101A0AE  +
mov ecx [ebp-5A8h] +
add ecx 0C4h +
call sub_101678B  +
mov ax [ebp-5A0h] +
mov ecx dword_102EE1C +
mov [ecx+2B4h] ax +
mov ax [ebp-5A0h] +
mov [ebp-4E0h] ax +
jmp loc_101A09D  +
cmp dword_102DCC4 ebx +
jz loc_101A0AE  +
push dword ptr [ebp-5A4h]  +
mov dword_102DCC4 ebx +
call sub_1015606  +
cmp word_102D2A0 bx +
jz loc_101A097  +
push 10h  +
push ebx  +
mov esi offset word_102D2A0 +
push esi  +
call ds:wcstol  +
add esp 0Ch +
mov [ebp-5A0h] ax +
lea eax [ebp-5B0h] +
push eax  +
push ebx  +
push 2  +
lea eax [ebp-59Ch] +
push eax  +
push 1  +
lea eax [ebp-5A0h] +
push eax  +
push ebx  +
push dword ptr [ebp-5A4h]  +
call ds:WideCharToMultiByte  +
xor eax eax +
cmp dword_102DCE8 804h +
push 7  +
mov [ebp-30h] ax +
pop ecx  +
lea edi [ebp-2Eh] +
stos   +
stos   +
mov dword ptr [ebp-5A4h] 1 +
jnz loc_1019F14  +
movzx ax byte ptr [ebp-59Ch] +
movzx cx byte ptr [ebp-59Bh] +
mov edx dword_102DC18 +
shl ax 8 +
or ax cx +
xor ecx ecx +
movzx eax ax +
dec edx  +
cmp edx ebx +
mov [ebp-5A4h] ebx +
mov [ebp-5ACh] eax +
jle loc_1019EDC  +
cmp ax word_102DC1C[ecx*2] +
jb loc_1019ED7  +
cmp ax word ptr dword_102DC34[ecx*2] +
jbe loc_1019EDC  +
inc ecx  +
cmp ecx edx +
jl loc_1019EC3  +
push ecx  +
call sub_1015588  +
mov edi dword_102DC68 +
xor ecx ecx +
cmp edi ebx +
jle loc_1019F14  +
mov dl [ebp-5ACh] +
lea eax dword_102DC78[ecx] +
cmp dl [eax-0Ch] +
jb loc_1019F03  +
cmp dl [eax] +
jbe loc_1019F0A  +
inc ecx  +
cmp ecx edi +
jl loc_1019EEE  +
jmp loc_1019F14  +
mov dword ptr [ebp-5A4h] 1 +
cmp [ebp-5B0h] ebx +
jnz loc_1019FFF  +
cmp [ebp-5A4h] ebx +
jz loc_1019FFF  +
movzx eax byte ptr [ebp-59Ch] +
push eax  +
mov edi offset asc_1002608 +
push edi  +
lea eax [ebp-30h] +
push 10h  +
push eax  +
call sub_1011E02  +
add esp 10h +
cmp eax ebx +
jl loc_101A0AE  +
mov ax [ebp-30h] +
mov word_102D2A0 ax +
mov ax [ebp-2Eh] +
mov word_102D2A2 ax +
movzx eax byte ptr [ebp-59Bh] +
push eax  +
push edi  +
lea eax [ebp-30h] +
push 10h  +
push eax  +
call sub_1011E02  +
add esp 10h +
cmp eax ebx +
jl loc_101A0AE  +
mov ax [ebp-30h] +
push 10h  +
mov word_102D2A4 ax +
mov ax [ebp-2Eh] +
push ebx  +
push esi  +
mov word_102D2A6 ax +
call ds:wcstol  +
mov ecx dword_102DC18 +
add esp 0Ch +
dec ecx  +
cmp ecx ebx +
mov [ebp-4E0h] ax +
jle loc_1019FD5  +
cmp ax word_102DC1C[ebx*2] +
jb loc_1019FD0  +
cmp ax word ptr dword_102DC34[ebx*2] +
ja loc_1019FD0  +
mov wParam ebx +
inc ebx  +
cmp ebx ecx +
jl loc_1019FB6  +
mov ecx [ebp-5A8h] +
add ecx 0C4h +
call sub_101678B  +
mov ax [ebp-4E0h] +
mov ecx dword_102EE1C +
mov [ecx+2B4h] ax +
jmp loc_101A09D  +
mov edi [ebp-5A8h] +
cmp edi ebx +
jnz loc_101A00D  +
xor eax eax +
jmp loc_101A010  +
mov eax [edi+20h] +
push 1  +
push 0EF76h  +
push 0EF3Bh  +
push eax  +
call sub_102447F  +
cmp [edi+190h] ebx +
jz loc_101A041  +
mov ecx edi +
mov dword_102DCC4 1 +
call near ptr dword_1018D08+1Bh  +
mov dword_102DCC4 ebx +
push ebx  +
lea ecx [ebp-538h] +
mov wParam ebx +
call near ptr dword_10136FC+3  +
mov eax wParam +
mov ax word_102DC1C[eax*2] +
mov ecx dword_102EE1C +
mov [ebp-4E0h] ax +
call near ptr dword_100FABC+3  +
movzx eax word ptr [ebp-4E0h] +
push eax  +
push offset asc_1002608  +
push 5  +
push esi  +
call sub_1011E02  +
add esp 10h +
cmp eax ebx +
jl loc_101A0AE  +
mov ecx edi +
call near ptr byte_1019B3B  +
jmp loc_101A0AE  +
mov wParam ebx +
push wParam  +
lea ecx [ebp-538h] +
call near ptr dword_10136FC+3  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-598h] +
call sub_1011C25  +
call sub_1026DAC  +
retn   +
***
call sub_101D21C  +
mov eax dword_102EE1C +
mov ecx dword_102EE18 +
mov eax [eax+2B8h] +
mov [ecx+0C8h] eax +
mov ecx dword_102EE18 +
push 1  +
call ?ShowWindow@CWnd@@QAEHH@Z  +
mov eax dword_102EE18 +
push dword ptr [eax+20h]  +
call ds:UpdateWindow  +
cmp dword ptr [esi+190h] 0 +
mov dword ptr [esi+194h] 1 +
jz loc_101A157  +
mov ecx esi +
pop esi  +
jmp sub_10197F6  +
***
or eax offset dword_102EE18 +
pop esi  +
jmp sub_101D21C  +
***
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
and dword ptr [esi+194h] 0 +
mov ecx dword_102EE18 +
push 0  +
call ?ShowWindow@CWnd@@QAEHH@Z  +
mov eax dword_102EE18 +
push dword ptr [eax+20h]  +
call ds:UpdateWindow  +
mov ecx esi +
pop esi  +
jmp sub_10197F6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push ebx  +
push esi  +
mov ebx ecx +
push ebx  +
push [ebp+arg_4]  +
mov esi eax +
call sub_102485E  +
mov [ebp+var_1C] eax +
test eax eax +
jl loc_101A3EF  +
movzx eax word ptr [esi] +
push edi  +
mov edi [ebp+arg_0] +
movsx edi word ptr [edi] +
movsx ecx ax +
movzx eax word ptr [ebx] +
movsx edx ax +
mov [ebp+var_18] eax +
lea eax [ecx+ecx] +
sub edi eax +
mov [ebp+var_C] edx +
add edx edi +
mov [ebp+var_10] edx +
mov [ebp+var_14] edx +
test edx edx +
jge loc_101A1E5  +
neg edx  +
mov [ebp+var_14] edx +
jmp loc_101A1F4  +
jnz loc_101A1F4  +
movzx eax word ptr [esi] +
cmp ax word ptr [ebp+var_18] +
jz loc_101A3EB  +
mov edx [ebp+arg_0] +
movsx edx word ptr [edx+2] +
movzx eax word ptr [ebx+2] +
mov [ebp+var_20] edx +
movsx edx word ptr [esi+2] +
add edx edx +
mov edi edx +
movsx edx ax +
sub edx edi +
add edx [ebp+var_20] +
mov [ebp+var_24] eax +
jns loc_101A21B  +
neg edx  +
jmp loc_101A229  +
test edx edx +
jnz loc_101A229  +
cmp [esi+2] ax +
jz loc_101A3EB  +
mov eax [ebp+var_14] +
cmp eax edx +
jle loc_101A235  +
lea edx [eax+eax] +
jmp loc_101A237  +
add edx edx +
test edx edx +
jle loc_101A3EB  +
mov edi edx +
sar edi 1 +
mov eax 81h +
cmp edi eax +
jge loc_101A255  +
mov edi dword_102C5C0[edi*4] +
jmp loc_101A266  +
xor edi edi +
cmp dword_102C7C8[edi*4] edx +
jg loc_101A265  +
inc edi  +
cmp edi eax +
jl loc_101A257  +
inc edi  +
cmp edi 1 +
mov [ebp+var_8] edi +
jle loc_101A3EB  +
imul edi edi +
sub ecx [ebp+var_C] +
mov eax edi +
imul ecx [ebp+var_8] +
cdq   +
sub eax edx +
sar eax 1 +
mov [ebp+var_4] eax +
movsx eax word ptr [esi+2] +
movsx esi word ptr [ebx+2] +
lea edx [eax+eax] +
mov ebx edx +
mov edx esi +
sub edx ebx +
mov ebx [ebp+arg_0] +
movsx ebx word ptr [ebx+2] +
add edx ebx +
mov ebx [ebp+var_10] +
add ebx ebx +
mov [ebp+var_1C] ebx +
lea ebx [edx+edx] +
sub eax esi +
imul esi edi +
imul eax [ebp+var_8] +
mov [ebp+var_20] ebx +
mov ebx [ebp+var_10] +
lea ebx [ebx+ecx*2] +
mov ecx [ebp+var_C] +
imul ecx edi +
lea edx [edx+eax*2] +
add esi edx +
add ecx ebx +
mov [ebp+var_10] esi +
mov esi [ebp+var_4] +
mov [ebp+var_14] edx +
mov [ebp+var_C] ecx +
test ebx ebx +
jl loc_101A2DF  +
lea eax [ebx+esi] +
jmp loc_101A2E4  +
mov eax ebx +
sub eax [ebp+var_4] +
test edx edx +
jl loc_101A2ED  +
lea ecx [edx+esi] +
jmp loc_101A2F1  +
mov ecx edx +
sub ecx esi +
cdq   +
idiv  edi +
add eax [ebp+var_18] +
mov word ptr [ebp+var_2C] ax +
mov eax ecx +
cdq   +
idiv  edi +
add eax [ebp+var_24] +
mov word ptr [ebp+var_2C+2] ax +
xor eax eax +
mov [ebp+var_28] ax +
lea eax [ebp+var_2C] +
push eax  +
push [ebp+arg_4]  +
call sub_102485E  +
test eax eax +
jl loc_101A3EE  +
mov ecx [ebp+var_8] +
push 2  +
pop edx  +
cmp ecx edx +
jle loc_101A3EE  +
lea eax [ecx-1] +
cmp eax edx +
mov [ebp+var_24] eax +
mov [ebp+var_8] edx +
jle loc_101A386  +
add ebx [ebp+var_1C] +
mov ecx [ebp+var_4] +
add [ebp+var_C] ebx +
mov eax [ebp+var_C] +
add eax ecx +
cdq   +
idiv  edi +
mov esi [ebp+var_14] +
add esi [ebp+var_20] +
add [ebp+var_10] esi +
mov [ebp+var_14] esi +
mov word ptr [ebp+var_2C] ax +
mov eax [ebp+var_10] +
add eax ecx +
cdq   +
idiv  edi +
mov word ptr [ebp+var_2C+2] ax +
lea eax [ebp+var_2C] +
push eax  +
push [ebp+arg_4]  +
call sub_102485E  +
test eax eax +
jl loc_101A3EE  +
inc [ebp+var_8]  +
mov eax [ebp+var_8] +
cmp eax [ebp+var_24] +
jl loc_101A33C  +
jmp loc_101A389  +
mov esi [ebp+var_14] +
mov edx [ebp+arg_0] +
movzx ecx word ptr [edx] +
movsx eax cx +
imul eax edi +
sub ebx eax +
add ebx [ebp+var_1C] +
add ebx [ebp+var_C] +
mov eax ebx +
movzx ebx word ptr [edx+2] +
movsx edx bx +
imul edx edi +
sub esi edx +
add esi [ebp+var_20] +
add esi [ebp+var_10] +
test eax eax +
jl loc_101A3BA  +
add eax [ebp+var_4] +
jmp loc_101A3BD  +
sub eax [ebp+var_4] +
test esi esi +
jl loc_101A3C6  +
add esi [ebp+var_4] +
jmp loc_101A3C9  +
sub esi [ebp+var_4] +
cdq   +
idiv  edi +
add eax ecx +
mov word ptr [ebp+var_2C] ax +
mov eax esi +
cdq   +
idiv  edi +
add eax ebx +
mov word ptr [ebp+var_2C+2] ax +
lea eax [ebp+var_2C] +
push eax  +
push [ebp+arg_4]  +
call sub_102485E  +
jmp loc_101A3EE  +
mov eax [ebp+var_1C] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
push ebp  +
mov ebp esp +
push edi  +
lea eax [ebp+8] +
push eax  +
push dword ptr [ebp+8]  +
call sub_10246EA  +
mov edi eax +
test edi edi +
jnz loc_101A491  +
push dword ptr [ebp+0Ch]  +
call sub_102469F  +
mov eax [ebp+8] +
cmp [eax] edi +
jz loc_101A491  +
push ebx  +
push esi  +
mov ebx [eax+0Ch] +
mov esi [eax+8] +
test ebx ebx +
jle loc_101A474  +
mov eax [esi] +
test byte ptr [eax+0Ch] 1 +
jz loc_101A458  +
mov ecx [eax] +
push dword ptr [ebp+0Ch]  +
add ecx 8 +
push ecx  +
add eax 8 +
lea ecx [esi+8] +
call sub_101A192  +
mov edi eax +
test edi edi +
jnz loc_101A48F  +
mov esi [esi] +
dec ebx  +
test ebx ebx +
jle loc_101A471  +
jmp loc_101A46A  +
lea eax [esi+8] +
push eax  +
push dword ptr [ebp+0Ch]  +
call sub_102485E  +
mov edi eax +
test edi edi +
jl loc_101A48F  +
mov esi [esi] +
dec ebx  +
test ebx ebx +
jg loc_101A42D  +
mov eax [ebp+8] +
mov eax [eax] +
push dword ptr [ebp+0Ch]  +
mov [ebp+8] eax +
call sub_10247F6  +
mov edi eax +
test edi edi +
jl loc_101A48F  +
mov eax [ebp+8] +
cmp dword ptr [eax] 0 +
jnz loc_101A423  +
pop esi  +
pop ebx  +
mov eax edi +
pop edi  +
pop ebp  +
retn 8  +
***
mov eax ds:?messageMap@CDialog@@1UAFX_MSGMAP@@B +
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
sub eax 102h +
jz loc_101A4EF  +
sub eax 0Dh +
jnz loc_101A507  +
test dword ptr [ebp+14h] 2000h +
jz loc_101A507  +
cmp dword_102EE60 eax +
jz loc_101A4E6  +
push offset Class  +
push dword ptr [ebp+8]  +
call ds:SetWindowTextW  +
and dword_102EE60 0 +
jmp loc_101A507  +
push offset Class  +
push dword ptr [ebp+8]  +
call ds:SetWindowTextW  +
mov dword_102EE60 1 +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call ?AfxGetAfxWndProc@@YGP6GJPAUHWND__@@IIJ@ZXZ  +
call eax  +
pop ebp  +
retn 10h  +
***
xor eax eax +
mov [ecx+208h] ax +
jmp ?OnCancel@CDialog@@MAEXXZ  +
***
push 0FFFFFFFFh  +
push 0  +
push 0B1h  +
push 6Dh  +
call ?SendDlgItemMessageW@CWnd@@QAEJHIIJ@Z  +
mov dword_102EE68 1 +
retn   +
***
and dword_102EE68 0 +
retn   +
***
cmp dword_102EE60 0 +
jz loc_101A57C  +
push 0FFFFFFFFh  +
push 0  +
push 0B1h  +
push 6Eh  +
call ?SendDlgItemMessageW@CWnd@@QAEJHIIJ@Z  +
mov dword_102EE64 1 +
retn   +
***
and dword_102EE64 0 +
retn   +
***
push ebp  +
mov ebp esp +
xor eax eax +
cmp dword ptr [ebp+0Ch] 110h +
setz al  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ?WindowProc@CWnd@@MAEJIIJ@Z  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+8]  +
push 69h  +
call ??0CDialog@@QAE@IPAVCWnd@@@Z  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+0B4h] +
mov dword ptr [esi] offset off_1003D6C +
call sub_101BA97  +
lea ecx [esi+0F4h] +
mov byte ptr [ebp-4] 1 +
call sub_101BBF0  +
lea ecx [esi+134h] +
mov byte ptr [ebp-4] 2 +
call near ptr dword_10135E4+4  +
lea ecx [esi+17Ch] +
mov byte ptr [ebp-4] 3 +
call sub_1013674  +
lea ecx [esi+1BCh] +
mov byte ptr [ebp-4] 4 +
call sub_101B024  +
mov eax esi +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101861A  +
test byte ptr [ebp+8] 1 +
jz loc_101A658  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
cmp dword_102EE6C 0 +
jz locret_101A69F  +
push 6Dh  +
call ?GetDlgItem@CWnd@@QBEPAV1@H@Z  +
test eax eax +
jz locret_101A69F  +
push esi  +
mov esi [eax+20h] +
test esi esi +
jz loc_101A69E  +
push esi  +
call ds:IsWindow  +
test eax eax +
jz loc_101A69E  +
push dword_102EE6C  +
push esi  +
call ImmAssociateContext  +
and dword_102EE6C 0 +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
test esi esi +
jnz loc_101A6B2  +
xor eax eax +
jmp loc_101A6B5  +
mov eax [esi+20h] +
push 6Eh  +
push eax  +
call ds:GetDlgItem  +
push 1  +
push dword ptr [esi+220h]  +
push 30h  +
push eax  +
call ds:SendMessageW  +
pop esi  +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
push esi  +
lea ecx [ebp-40h] +
call ??0CClientDC@@QAE@PAVCWnd@@@Z  +
and dword ptr [ebp-4] 0 +
push 6Fh  +
mov ecx esi +
call ?GetDlgItem@CWnd@@QBEPAV1@H@Z  +
lea ecx [ebp-2Ch] +
push ecx  +
push dword ptr [eax+20h]  +
call ds:GetClientRect  +
mov ebx [ebp-3Ch] +
lea eax [ebp-14h] +
push eax  +
lea edi [esi+74h] +
push edi  +
call ds:lstrlenW  +
push eax  +
push edi  +
mov edi ds:GetTextExtentPoint32W +
push ebx  +
call edi  +
mov eax [ebp-24h] +
sub eax [ebp-2Ch] +
cmp eax [ebp-14h] +
jg loc_101A75E  +
lea eax [ebp-1Ch] +
push eax  +
push 2  +
push offset asc_1001D54  +
push dword ptr [ebp-3Ch]  +
call edi  +
mov eax [ebp-24h] +
sub eax [ebp-2Ch] +
push 2Eh  +
cdq   +
idiv  dword ptr [ebp-1Ch] +
pop ecx  +
add eax eax +
mov [esi+eax*2+70h] cx +
mov [esi+eax*2+72h] cx +
xor ecx ecx +
mov [esi+eax*2+74h] cx +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-40h] +
call ??1CClientDC@@UAE@XZ  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea ecx [esi+1BCh] +
call sub_101B0D8  +
xor edi edi +
test eax eax +
jnz loc_101A7CF  +
cmp dword_102EE64 edi +
jz loc_101A7B0  +
cmp dword_102EE60 edi +
jnz loc_101A7B0  +
push 6018h  +
push edi  +
push 10Fh  +
push 6Eh  +
mov ecx esi +
call ?SendDlgItemMessageW@CWnd@@QAEJHIIJ@Z  +
cmp esi edi +
jnz loc_101A7B8  +
xor esi esi +
jmp loc_101A7BB  +
mov esi [esi+20h] +
push 1  +
push 0EF27h  +
push 0EF28h  +
push esi  +
call sub_102447F  +
jmp loc_101A7FC  +
cmp dword_102EE64 edi +
jz loc_101A7EB  +
cmp dword_102EE60 edi +
jz loc_101A7FC  +
push 0FFFFFFFFh  +
push edi  +
push 0B1h  +
push 6Eh  +
jmp loc_101A7F5  +
push 0FFFFFFFFh  +
push edi  +
push 0B1h  +
push 6Dh  +
mov ecx esi +
call ?SendDlgItemMessageW@CWnd@@QAEJHIIJ@Z  +
pop edi  +
pop esi  +
retn   +
***
mov eax ecx +
cmp word ptr [eax+208h] 0 +
jnz loc_101A826  +
mov eax [eax+20h] +
push 1  +
push 0EF24h  +
push 0EF26h  +
push eax  +
call sub_102447F  +
retn   +
cmp dword_102EE20 0 +
push esi  +
push edi  +
push 17h  +
pop ecx  +
jnz loc_101A841  +
lea esi [eax+230h] +
mov edi offset dword_102F4D0 +
jmp loc_101A84C  +
lea esi [eax+28Ch] +
mov edi offset dword_102D948 +
movs   +
pop edi  +
mov ecx eax +
pop esi  +
jmp loc_102605A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
push edi  +
xor eax eax +
mov [ebp-10h] ax +
push 5  +
lea eax [ebp-10h] +
push eax  +
push 6Dh  +
mov edi ecx +
call ?GetDlgItemTextW@CWnd@@QBEHHPAGH@Z  +
mov esi ds:lstrlenW +
lea eax [ebp-10h] +
push eax  +
xor ebx ebx +
call esi  +
test eax eax +
jle loc_101A8CC  +
movzx eax word ptr [ebp+ebx*2-10h] +
cmp ax 30h +
jb loc_101A8F6  +
cmp ax 39h +
jbe loc_101A8AF  +
cmp ax 41h +
jb loc_101A8F6  +
cmp ax 46h +
jbe loc_101A8BB  +
cmp ax 61h +
jb loc_101A8F6  +
cmp ax 66h +
ja loc_101A8F6  +
lea eax [ebp-10h] +
push eax  +
inc ebx  +
call esi  +
cmp ebx eax +
jl loc_101A898  +
lea eax [ebp-10h] +
push eax  +
call esi  +
cmp eax 4 +
jnz loc_101A8E7  +
cmp dword_102EE68 0 +
jz loc_101A8E7  +
mov ecx edi +
call sub_101A775  +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1026CC5  +
leave   +
retn   +
***
test edi edi +
jnz loc_101A8FE  +
xor eax eax +
jmp loc_101A901  +
mov eax [edi+20h] +
push 1  +
push 0EF27h  +
push 0EF28h  +
push eax  +
call sub_102447F  +
push 0FFFFFFFFh  +
push 0  +
push 0B1h  +
push 6Dh  +
mov ecx edi +
call ?SendDlgItemMessageW@CWnd@@QAEJHIIJ@Z  +
jmp loc_101A8E7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp-4] eax +
push esi  +
push edi  +
xor eax eax +
lea edi [ebp-0Eh] +
stos   +
stos   +
mov esi ecx +
xor eax eax +
mov [ebp-10h] ax +
test esi esi +
jz loc_101A956  +
mov eax [esi+20h] +
push 5  +
lea ecx [ebp-10h] +
push ecx  +
push 6Eh  +
push eax  +
call ds:GetDlgItemTextW  +
cmp dword_102EE64 0 +
jz loc_101A982  +
cmp word ptr [ebp-10h] 0 +
jz loc_101A982  +
xor eax eax +
mov ecx esi +
mov [ebp-0Eh] ax +
call sub_101A775  +
mov ecx [ebp-4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1026CC5  +
leave   +
retn   +
***
call __EH_prolog3_GS  +
mov ebx ecx +
lea ecx [ebp-70h] +
call ??0CString@@QAE@XZ  +
xor esi esi +
mov ecx ebx +
mov [ebp-4] esi +
call ?OnInitDialog@CDialog@@UAEHXZ  +
lea ecx [ebp-70h] +
cmp dword_102EE20 esi +
jnz loc_101A9C9  +
push 0EF26h  +
jmp loc_101A9CE  +
push 0EF41h  +
call ?LoadStringW@CString@@QAEHI@Z  +
push dword ptr [ebp-70h]  +
mov ecx ebx +
call ?SetWindowTextW@CWnd@@QAEXPBG@Z  +
push ebx  +
lea ecx [ebx+1BCh] +
push 74h  +
call ?SubclassDlgItem@CWnd@@QAEHIPAV1@@Z  +
push ebx  +
push 0D8h  +
lea ecx [ebx+0B4h] +
call ?SubclassDlgItem@CWnd@@QAEHIPAV1@@Z  +
push ebx  +
push 0DAh  +
lea ecx [ebx+0F4h] +
call ?SubclassDlgItem@CWnd@@QAEHIPAV1@@Z  +
push ebx  +
push 130h  +
lea ecx [ebx+134h] +
call ?SubclassDlgItem@CWnd@@QAEHIPAV1@@Z  +
push ebx  +
push 6Eh  +
lea ecx [ebx+17Ch] +
call ?SubclassDlgItem@CWnd@@QAEHIPAV1@@Z  +
push 6Eh  +
mov ecx ebx +
call ?GetDlgItem@CWnd@@QBEPAV1@H@Z  +
cmp eax esi +
jz loc_101AA3C  +
mov esi [eax+20h] +
push 0FFFFFFFCh  +
push esi  +
call ds:GetWindowLongW  +
mov edi eax +
call ?AfxGetAfxWndProc@@YGP6GJPAUHWND__@@IIJ@ZXZ  +
cmp edi eax +
jnz loc_101AA5E  +
push offset loc_101A4B3  +
push 0FFFFFFFCh  +
push esi  +
call ds:SetWindowLongW  +
push 6Dh  +
mov ecx ebx +
call ?GetDlgItem@CWnd@@QBEPAV1@H@Z  +
test eax eax +
jz loc_101AA8A  +
mov esi [eax+20h] +
test esi esi +
jz loc_101AA8A  +
push esi  +
call ds:IsWindow  +
test eax eax +
jz loc_101AA8A  +
push 0  +
push esi  +
call ImmAssociateContext  +
mov dword_102EE6C eax +
mov ecx ebx +
call sub_1007E5D  +
lea ecx [ebp-6Ch] +
push ecx  +
push 5Ch  +
push dword ptr [eax+4]  +
call ds:GetObjectW  +
lea eax [ebp-6Ch] +
lea esi [ebx+20Ch] +
push eax  +
mov ecx esi +
call sub_100B71B  +
lea ecx [ebx+1BCh] +
call sub_101B230  +
test esi esi +
jz loc_101AAC3  +
mov esi [esi+4] +
push 1  +
push esi  +
push 30h  +
push dword ptr [ebx+1DCh]  +
call ds:SendMessageW  +
lea eax [ebp-6Ch] +
push eax  +
lea ecx [ebx+174h] +
call sub_100B71B  +
push 6Eh  +
mov ecx ebx +
call ?GetDlgItem@CWnd@@QBEPAV1@H@Z  +
lea ecx [ebp-80h] +
push ecx  +
push dword ptr [eax+20h]  +
call ds:GetClientRect  +
mov eax [ebp-74h] +
mov ecx [ebp-78h] +
sub eax [ebp-7Ch] +
sub ecx [ebp-80h] +
cmp ecx eax +
jl loc_101AB11  +
add eax 0FFFFFFF6h +
mov [ebx+60h] eax +
jmp loc_101AB17  +
add ecx 0FFFFFFF6h +
mov [ebx+60h] ecx +
cmp dword_102EE20 0 +
push 17h  +
pop ecx  +
jnz loc_101ABBF  +
lea eax [ebx+230h] +
mov edi eax +
mov esi offset dword_102F4D0 +
movs   +
mov ecx [ebx+60h] +
mov [eax] ecx +
push eax  +
lea ecx [ebx+21Ch] +
call sub_100B71B  +
mov eax [ebx+224h] +
mov ecx [ebx+228h] +
cmp eax ecx +
jl loc_101AB62  +
add ecx 0FFFFFFFEh +
mov [ebx+230h] ecx +
jmp loc_101AB6B  +
add eax 0FFFFFFFEh +
mov [ebx+230h] eax +
lea eax [ebx+230h] +
push eax  +
lea ecx [ebx+214h] +
call sub_100B71B  +
lea eax [ebx+24Ch] +
push eax  +
push 20h  +
lea esi [ebx+74h] +
push esi  +
call sub_1008286  +
xor edi edi +
cmp eax edi +
jge loc_101ABA9  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-70h] +
call ??1CString@@QAE@XZ  +
xor eax eax +
call sub_1026DAC  +
retn   +
mov ecx ebx +
call sub_101A6D6  +
push esi  +
push 6Fh  +
mov ecx ebx +
call ?SetDlgItemTextW@CWnd@@QAEXHPBG@Z  +
jmp loc_101AC53  +
lea eax [ebx+28Ch] +
mov edi eax +
mov esi offset dword_102D948 +
movs   +
mov ecx [ebx+60h] +
mov [eax] ecx +
push eax  +
lea ecx [ebx+21Ch] +
call sub_100B71B  +
mov eax [ebx+224h] +
mov ecx [ebx+228h] +
cmp eax ecx +
jl loc_101ABFA  +
add ecx 0FFFFFFFEh +
mov [ebx+28Ch] ecx +
jmp loc_101AC03  +
add eax 0FFFFFFFEh +
mov [ebx+28Ch] eax +
lea eax [ebx+28Ch] +
push eax  +
lea ecx [ebx+214h] +
call sub_100B71B  +
lea eax [ebx+2A8h] +
push eax  +
push 20h  +
lea esi [ebx+74h] +
push esi  +
call sub_1008286  +
test eax eax +
jge loc_101AC40  +
xor esi esi +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-70h] +
call ??1CString@@QAE@XZ  +
mov eax esi +
jmp loc_101ABA3  +
mov ecx ebx +
call sub_101A6D6  +
push esi  +
push 6Fh  +
mov ecx ebx +
call ?SetDlgItemTextW@CWnd@@QAEXHPBG@Z  +
xor edi edi +
lea ecx [ebx+1BCh] +
call sub_101AEFE  +
mov ecx ebx +
call sub_101A6A5  +
push edi  +
xor esi esi +
inc esi  +
push esi  +
push dword ptr [ebx+1DCh]  +
call ds:EnableScrollBar  +
push edi  +
push edi  +
push dword ptr [ebx+1DCh]  +
call ds:InvalidateRect  +
push dword ptr [ebx+1DCh]  +
call ds:UpdateWindow  +
push edi  +
mov dword_102EE60 esi +
push 4  +
mov esi 0C5h +
push esi  +
push 6Dh  +
mov ecx ebx +
mov dword_102EE68 edi +
mov dword_102EE64 edi +
call ?SendDlgItemMessageW@CWnd@@QAEJHIIJ@Z  +
push edi  +
push 1  +
push esi  +
push 6Eh  +
mov ecx ebx +
call ?SendDlgItemMessageW@CWnd@@QAEJHIIJ@Z  +
xor esi esi +
inc esi  +
jmp loc_101AC2D  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
push edi  +
cmp esi ebx +
jnz loc_101ACDF  +
xor eax eax +
jmp loc_101ACE2  +
mov eax [esi+20h] +
push eax  +
call ds:GetDC  +
mov edi eax +
push edi  +
call ds:CreateCompatibleDC  +
mov dword_102EE2C eax +
cmp esi ebx +
jnz loc_101ACFF  +
xor eax eax +
jmp loc_101AD02  +
mov eax [esi+20h] +
push edi  +
push eax  +
call ds:ReleaseDC  +
lea eax [esi+230h] +
cmp dword_102EE20 ebx +
jz loc_101AD1E  +
lea eax [esi+28Ch] +
mov dword ptr [eax] 28h +
mov dword_102EE30 eax +
mov dword_102EE24 3Ch +
mov eax [esi+20h] +
push 8  +
mov dword_102EE28 eax +
call ds:GetSysColor  +
mov dword_102EE3C eax +
mov dword_102EE40 ebx +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+8] +
mov dword_102EE4C eax +
mov eax 2000h +
push offset dword_102EE24  +
mov dword_102EE50 ebx +
mov word_102EE54 ax +
mov dword_102EE44 (offset byte_101A598+1) +
mov dword_102EE48 607h +
mov dword_102EE38 1059h +
call ds:ChooseFontW  +
push dword_102EE2C  +
test eax eax +
jnz loc_101ADAA  +
call ds:DeleteDC  +
jmp loc_101AED4  +
call ds:DeleteDC  +
lea edi [esi+1BCh] +
mov ecx edi +
call sub_101AEFE  +
mov ecx edi +
call sub_101AF9C  +
mov edi offset Class +
push edi  +
push 6Dh  +
mov ecx esi +
call ?SetDlgItemTextW@CWnd@@QAEXHPBG@Z  +
push edi  +
push 6Eh  +
mov ecx esi +
call ?SetDlgItemTextW@CWnd@@QAEXHPBG@Z  +
lea ecx [esi+214h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea ebx [esi+21Ch] +
mov ecx ebx +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
cmp dword_102EE20 0 +
lea edi [esi+74h] +
jnz loc_101AE38  +
lea eax [esi+24Ch] +
push eax  +
push 20h  +
push edi  +
call sub_1008286  +
test eax eax +
jl loc_101AED4  +
mov ecx esi +
call sub_101A6D6  +
push edi  +
push 6Fh  +
mov ecx esi +
call ?SetDlgItemTextW@CWnd@@QAEXHPBG@Z  +
lea edi [esi+230h] +
mov byte ptr [esi+24Ah] 2 +
jmp loc_101AE6D  +
lea eax [esi+2A8h] +
push eax  +
push 20h  +
push edi  +
call sub_1008286  +
test eax eax +
jl loc_101AED4  +
mov ecx esi +
call sub_101A6D6  +
push edi  +
push 6Fh  +
mov ecx esi +
call ?SetDlgItemTextW@CWnd@@QAEXHPBG@Z  +
lea edi [esi+28Ch] +
mov byte ptr [esi+2A6h] 2 +
mov eax [esi+60h] +
push edi  +
mov ecx ebx +
mov [edi] eax +
call sub_100B71B  +
mov eax [esi+224h] +
mov ecx [esi+228h] +
cmp eax ecx +
jl loc_101AE91  +
add ecx 0FFFFFFFEh +
mov [edi] ecx +
jmp loc_101AE96  +
add eax 0FFFFFFFEh +
mov [edi] eax +
push edi  +
lea ecx [esi+214h] +
call sub_100B71B  +
mov ecx esi +
call sub_101A6A5  +
push 1  +
push 0  +
lea edi [esi+1DCh] +
push dword ptr [edi]  +
call ds:InvalidateRect  +
push dword ptr [edi]  +
call ds:UpdateWindow  +
push 74h  +
mov ecx esi +
call ?GetDlgItem@CWnd@@QBEPAV1@H@Z  +
push eax  +
mov ecx esi +
call sub_1007E92  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov eax ds:?classCEdit@CEdit@@2UCRuntimeClass@@B +
retn   +
***
mov eax offset off_1003E48 +
retn   +
***
retn   +
***
mov [ecx+4Ch] ax +
xor eax eax +
mov [ecx+4Eh] ax +
push 20h  +
pop eax  +
mov [ecx+150h] ax +
mov eax 0FFFFh +
mov [ecx+152h] ax +
push 20h  +
pop eax  +
mov [ecx+48h] ax +
mov eax 0FFA0h +
mov [ecx+4Ah] ax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx ecx word ptr [ecx+150h] +
movzx eax [ebp+arg_0] +
sub eax ecx +
cdq   +
and edx 0Fh +
add eax edx +
sar eax 4 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_101AF70  +
mov ax [ecx+150h] +
jmp loc_101AF93  +
movzx edx word ptr [ecx+154h] +
cmp eax edx +
jl loc_101AF81  +
mov ax [ecx+4Ah] +
jmp loc_101AF93  +
shl eax 4 +
add ax [ecx+150h] +
mov ecx 0FFF0h +
and ax cx +
pop ebp  +
retn 4  +
***
xor eax eax +
push 1  +
mov [ecx+4Ch] dx +
push eax  +
xor edx edx +
push 1  +
mov [ecx+44h] eax +
mov [ecx+40h] eax +
mov [ecx+4Eh] dx +
call ?SetScrollPos@CWnd@@QAEHHHH@Z  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
movzx eax word ptr [esi+4Ah] +
push eax  +
call sub_101AF37  +
mov [esi+154h] ax +
xor eax eax +
inc eax  +
pop esi  +
retn 8  +
***
mov eax ds:?messageMap@CWnd@@1UAFX_MSGMAP@@B +
retn   +
***
retn   +
***
mov dword ptr [ecx] offset off_1003FDC +
jmp ??1CStatic@@UAE@XZ  +
***
retn   +
***
mov dword ptr [ecx] offset off_10040A4 +
jmp ??1CStatic@@UAE@XZ  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1013674  +
mov dword ptr [esi] offset off_100416C +
xor ecx ecx +
mov [esi+54h] ecx +
mov eax offset off_100219C +
mov [esi+50h] eax +
mov [esi+58h] eax +
mov [esi+5Ch] ecx +
mov [esi+60h] eax +
mov [esi+64h] ecx +
mov [esi+164h] ecx +
mov eax esi +
pop esi  +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_100416C +
lea ebx [esi+50h] +
mov ecx ebx +
mov dword ptr [ebp-4] 3 +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea ecx [esi+58h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea ecx [esi+60h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea ecx [esi+60h] +
mov edi offset off_100219C +
mov byte ptr [ebp-4] 2 +
mov [ecx] edi +
call sub_1007D75  +
lea ecx [esi+58h] +
mov byte ptr [ebp-4] 1 +
mov [ecx] edi +
call sub_1007D75  +
mov ecx ebx +
mov byte ptr [ebp-4] 0 +
mov [ebx] edi +
call sub_1007D75  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1CEdit@@UAE@XZ  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
push 7  +
xor eax eax +
pop ecx  +
push 7  +
mov [ebp+String] ax +
lea edi [ebp-42h] +
stos   +
pop ecx  +
push dword ptr [esi+20h]  +
mov word ptr [ebp+var_24] ax +
lea edi [ebp+var_24+2] +
stos   +
mov edi ds:GetParent +
call edi  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
test eax eax +
jz loc_101B121  +
mov eax [eax+20h] +
mov ebx ds:GetDlgItemTextW +
push 0Fh  +
lea ecx [ebp+String] +
push ecx  +
push 6Dh  +
push eax  +
call ebx  +
push dword ptr [esi+20h]  +
call edi  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
xor edi edi +
cmp eax edi +
jnz loc_101B147  +
xor eax eax +
jmp loc_101B14A  +
mov eax [eax+20h] +
push 0Fh  +
lea ecx [ebp+var_24] +
push ecx  +
push 6Eh  +
push eax  +
call ebx  +
mov ebx 0FFFFh +
cmp [ebp+String] di +
jnz loc_101B172  +
cmp word ptr [ebp+var_24] di +
jnz loc_101B16E  +
xor eax eax +
inc eax  +
jmp loc_101B21C  +
mov ecx ebx +
jmp loc_101B185  +
push 10h  +
lea eax [ebp+String] +
push edi  +
push eax  +
call ds:wcstol  +
add esp 0Ch +
movzx ecx ax +
mov eax ebx +
cmp word ptr [ebp+var_24] di +
jz loc_101B191  +
movzx eax word ptr [ebp+var_24] +
cmp dword_102EE68 edi +
jz loc_101B19D  +
mov [esi+4Ch] cx +
cmp dword_102EE64 edi +
jz loc_101B1A9  +
mov [esi+4Ch] ax +
movzx eax word ptr [esi+4Ch] +
movzx ecx word ptr [esi+4Ah] +
cmp ax cx +
jb loc_101B1BC  +
mov [esi+48h] cx +
jmp loc_101B1C5  +
and eax 0FFF0h +
mov [esi+48h] ax +
push ecx  +
mov ecx esi +
call sub_101AF37  +
push edi  +
mov [esi+154h] ax +
movzx eax ax +
push eax  +
push edi  +
xor edi edi +
inc edi  +
push edi  +
mov ecx esi +
call ?SetScrollRange@CWnd@@QAEXHHHH@Z  +
movzx eax word ptr [esi+48h] +
push eax  +
mov ecx esi +
call sub_101AF37  +
mov [esi+4Eh] ax +
cwde   +
push edi  +
push eax  +
push edi  +
mov ecx esi +
call ?SetScrollPos@CWnd@@QAEHHHH@Z  +
push edi  +
lea eax [esi+130h] +
push eax  +
push dword ptr [esi+20h]  +
call ds:InvalidateRect  +
push dword ptr [esi+20h]  +
call ds:UpdateWindow  +
mov eax edi +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1026CC5  +
leave   +
retn   +
***
call __EH_prolog3_GS  +
mov esi offset aFa40_0 +
lea edi [ebp-18h] +
movs   +
mov ebx ecx +
push ebx  +
lea ecx [ebp-38h] +
movs   +
call ??0CClientDC@@QAE@PAVCWnd@@@Z  +
and dword ptr [ebp-4] 0 +
lea esi [ebx+130h] +
push esi  +
mov ecx ebx +
call sub_1007E78  +
lea eax [ebx+50h] +
push eax  +
lea ecx [ebp-38h] +
call ?SelectObject@CDC@@UAEPAVCFont@@PAV2@@Z  +
lea edi [ebx+148h] +
push edi  +
mov [ebp-1Ch] eax +
push 4  +
lea eax [ebp-18h] +
push eax  +
push dword ptr [ebp-34h]  +
call ds:GetTextExtentPoint32A  +
push dword ptr [ebp-1Ch]  +
add dword ptr [edi] 6 +
lea ecx [ebp-38h] +
call ?SelectObject@CDC@@UAEPAVCFont@@PAV2@@Z  +
mov eax [esi+0Ch] +
sub eax [esi+4] +
push 6  +
sub eax 16h +
cdq   +
pop ecx  +
idiv  ecx +
mov ecx offset dword_102EE70 +
mov [ebx+6Ch] eax +
mov eax [esi+8] +
sub eax [edi] +
sub eax [esi] +
sub eax 42h +
cdq   +
and edx 0Fh +
add eax edx +
sar eax 4 +
and dword ptr [ebp-1Ch] 0 +
mov [ebx+68h] eax +
mov eax offset unk_102F478 +
mov dword ptr [eax-8] 1 +
mov edx [ebx+6Ch] +
add edx 4 +
imul edx [ebp-1Ch] +
inc edx  +
mov [eax-4] edx +
mov edx [edi] +
inc edx  +
mov [eax] edx +
mov edx [eax-4] +
mov esi [ebx+6Ch] +
add esi edx +
mov edx [eax] +
add edx 4 +
and dword ptr [ebp-20h] 0 +
mov [eax+4] esi +
mov [ebp-24h] edx +
mov edx [ebx+68h] +
add edx 4 +
imul edx [ebp-20h] +
add edx [ebp-24h] +
mov [ecx] edx +
mov edx [eax-4] +
mov esi [ecx] +
mov [ecx+4] edx +
add esi [ebx+68h] +
add ecx 10h +
mov [ecx-8] esi +
mov esi [ebx+6Ch] +
add esi edx +
inc dword ptr [ebp-20h]  +
cmp dword ptr [ebp-20h] 10h +
mov [ecx-4] esi +
jl loc_101B2FD  +
inc dword ptr [ebp-1Ch]  +
add eax 10h +
cmp eax offset unk_102F4D8 +
jl loc_101B2CC  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-38h] +
call ??1CClientDC@@UAE@XZ  +
call sub_1026DAC  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
push esi  +
mov esi ecx +
movzx eax word ptr [esi+4Ah] +
push edi  +
push eax  +
call sub_101AF37  +
mov [esi+154h] ax +
xor ebx ebx +
push ebx  +
movzx eax ax +
push eax  +
push ebx  +
push 1  +
mov ecx esi +
call ?SetScrollRange@CWnd@@QAEXHHHH@Z  +
mov eax [ebp+8] +
xor edi edi +
mov [ebp-8] ebx +
mov [ebp-4] ebx +
cmp eax 7 +
ja loc_101B4AB  +
jmp ds:off_101B562[eax*4]  +
movzx eax word ptr [esi+48h] +
movzx edx word ptr [esi+4Ah] +
movzx ecx ax +
add ecx 10h +
cmp ecx edx +
jg loc_101B4AB  +
push 0FFFFFFFCh  +
pop edi  +
sub edi [esi+6Ch] +
add eax 10h +
push eax  +
mov ecx esi +
mov [esi+48h] ax +
call sub_101AF37  +
jmp loc_101B4A7  +
movzx eax word ptr [esi+48h] +
movzx edx word ptr [esi+150h] +
movzx ecx ax +
sub ecx 10h +
cmp ecx edx +
jl loc_101B4AB  +
mov edi [esi+6Ch] +
add edi 4 +
add eax 0FFFFFFF0h +
jmp loc_101B3BB  +
***
movzx ecx word ptr [esi+48h] +
movzx eax word ptr [esi+4Ah] +
movzx edx cx +
movzx edi ax +
add edx 60h +
push 0FFFFFFFCh  +
cmp edx edi +
pop edi  +
jg loc_101B41B  +
sub edi [esi+6Ch] +
push ecx  +
mov ecx esi +
imul edi edi +
call sub_101AF37  +
add eax 6 +
jmp loc_101B455  +
sub edi [esi+6Ch] +
imul edi edi +
jmp loc_101B3BB  +
***
movzx ecx word ptr [esi+48h] +
movzx eax word ptr [esi+150h] +
movzx edx cx +
movzx edi ax +
sub edx 60h +
cmp edx edi +
jl loc_101B468  +
cmp cx 60h +
jb loc_101B468  +
mov edi [esi+6Ch] +
push ecx  +
add edi 4 +
mov ecx esi +
imul edi edi +
call sub_101AF37  +
add eax 0FFFFFFFAh +
mov [esi+4Eh] ax +
cwde   +
push eax  +
mov ecx esi +
call sub_101AF5B  +
mov [esi+48h] ax +
jmp loc_101B4AB  +
mov edi [esi+6Ch] +
add edi 4 +
jmp loc_101B41E  +
***
mov eax [ebp+0Ch] +
mov dword ptr [ebp-8] 1 +
mov [esi+4Eh] ax +
jmp loc_101B45A  +
***
mov dword ptr [ebp-4] 1 +
jmp loc_101B4AB  +
mov ax [esi+150h] +
mov [esi+48h] ax +
xor eax eax +
jmp loc_101B4A7  +
mov ax [esi+4Ah] +
mov [esi+48h] ax +
mov ax [esi+154h] +
mov [esi+4Eh] ax +
mov ecx [esi+6Ch] +
mov eax edi +
cdq   +
xor eax edx +
sub eax edx +
add ecx 4 +
cmp eax ecx +
jg loc_101B529  +
cmp eax ebx +
jle loc_101B529  +
cmp [ebp-4] ebx +
jnz loc_101B549  +
lea eax [ebp-18h] +
push eax  +
push dword ptr [esi+20h]  +
call ds:GetClientRect  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-28h] +
push eax  +
call ds:CopyRect  +
cmp edi ebx +
mov eax edi +
push ebx  +
mov ecx esi +
jge loc_101B505  +
neg eax  +
mov [ebp-14h] eax +
lea eax [ebp-18h] +
push eax  +
push edi  +
push ebx  +
call ?ScrollWindow@CWnd@@QAEXHHPBUtagRECT@@0@Z  +
imul edi edi +
mov [ebp-24h] edi +
jmp loc_101B51F  +
imul eax eax +
mov [ebp-0Ch] eax +
lea eax [ebp-18h] +
push eax  +
push edi  +
push ebx  +
mov [ebp-14h] ebx +
call ?ScrollWindow@CWnd@@QAEXHHPBUtagRECT@@0@Z  +
mov [ebp-24h] ebx +
mov [ebp-1Ch] edi +
push ebx  +
lea eax [ebp-28h] +
push eax  +
push dword ptr [esi+20h]  +
jmp loc_101B543  +
cmp [ebp-4] ebx +
jnz loc_101B549  +
cmp edi ebx +
jnz loc_101B537  +
cmp [ebp-8] ebx +
jz loc_101B549  +
push 1  +
lea eax [esi+130h] +
push eax  +
push dword ptr [esi+20h]  +
call ds:InvalidateRect  +
movsx eax word ptr [esi+4Eh] +
push 1  +
push eax  +
push 1  +
mov ecx esi +
call ?SetScrollPos@CWnd@@QAEHHHH@Z  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov eax [ebp+0Ch] +
push esi  +
mov esi ecx +
push edi  +
mov [esi+40h] eax +
mov eax [ebp+10h] +
mov [esi+44h] eax +
xor edi edi +
push edi  +
lea eax [esi+130h] +
push eax  +
push dword ptr [esi+20h]  +
call ds:InvalidateRect  +
push dword ptr [esi+20h]  +
call ds:UpdateWindow  +
mov ecx esi +
mov [ebp-0Ch] edi +
call ?SetFocus@CWnd@@QAEPAV1@XZ  +
mov [ebp-4] edi +
mov dword ptr [ebp-8] offset dword_102EE70 +
push ebx  +
mov ebx [ebp-8] +
xor edi edi +
push dword ptr [ebp+10h]  +
mov ecx ebx +
push dword ptr [ebp+0Ch]  +
call sub_100B5EE  +
test eax eax +
jnz loc_101B5F1  +
inc edi  +
add ebx 10h +
cmp edi 10h +
jb loc_101B5D5  +
jmp loc_101B607  +
push edi  +
push dword ptr [ebp-4]  +
mov ecx esi +
call sub_101AFC1  +
test eax eax +
jz loc_101B607  +
mov dword ptr [ebp-0Ch] 1 +
inc dword ptr [ebp-4]  +
add dword ptr [ebp-8] 100h +
cmp dword ptr [ebp-4] 6 +
jb loc_101B5D0  +
cmp dword ptr [ebp-0Ch] 0 +
pop ebx  +
jnz loc_101B628  +
push 0FFFFFFFFh  +
call ds:MessageBeep  +
jmp loc_101B649  +
push dword ptr [esi+20h]  +
call ds:GetParent  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
push 0  +
push 1  +
push 111h  +
push dword ptr [eax+20h]  +
call ds:PostMessageW  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
call __EH_prolog3  +
mov [ebp-10h] ecx +
xor ebx ebx +
mov eax offset off_1001A8C +
mov [ebp-18h] ebx +
mov [ebp-1Ch] eax +
mov esi [ebp+8] +
mov [ebp-4] ebx +
cmp esi ebx +
jnz loc_101B682  +
mov [ebp-1Ch] eax +
jmp loc_101B980  +
mov eax [ebp+18h] +
mov ecx [ebp+14h] +
mov edx [ebp+10h] +
mov edi [ebp+0Ch] +
inc eax  +
push eax  +
inc ecx  +
push ecx  +
dec edx  +
push edx  +
dec edi  +
push edi  +
lea eax [ebp-34h] +
push eax  +
call ds:SetRect  +
lea ecx [ebp-1Ch] +
cmp [ebp+1Ch] ebx +
jnz loc_101B810  +
push dword_102DD3C  +
call sub_1007DF5  +
lea eax [ebp-1Ch] +
push eax  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
mov ebx ds:PatBlt +
mov [ebp+8] eax +
mov eax [ebp-2Ch] +
sub eax [ebp-34h] +
mov edi 0F00021h +
push edi  +
push 1  +
push eax  +
push dword ptr [ebp-30h]  +
push dword ptr [ebp-34h]  +
push dword ptr [esi+4]  +
call ebx  +
mov eax [ebp-28h] +
sub eax [ebp-30h] +
push edi  +
push eax  +
push 1  +
push dword ptr [ebp-30h]  +
push dword ptr [ebp-34h]  +
push dword ptr [esi+4]  +
call ebx  +
push dword ptr [ebp+8]  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
lea ecx [ebp-1Ch] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
push dword_102DD38  +
lea ecx [ebp-1Ch] +
call sub_1007DF5  +
lea eax [ebp-1Ch] +
push eax  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
push edi  +
mov [ebp+8] eax +
mov eax [ebp-2Ch] +
sub eax [ebp-34h] +
push 1  +
push eax  +
push dword ptr [ebp-28h]  +
push dword ptr [ebp-34h]  +
push dword ptr [esi+4]  +
call ebx  +
mov eax [ebp-28h] +
sub eax [ebp-30h] +
push edi  +
inc eax  +
push eax  +
push 1  +
push dword ptr [ebp-30h]  +
push dword ptr [ebp-2Ch]  +
push dword ptr [esi+4]  +
call ebx  +
push dword ptr [ebp+8]  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
lea ecx [ebp-1Ch] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
mov eax [ebp-10h] +
xor ebx ebx +
cmp [eax+164h] ebx +
jz loc_101B979  +
mov [ebp-20h] ebx +
mov dword ptr [ebp-24h] offset off_1001A8C +
mov edi offset off_1002184 +
mov [ebp-10h] ebx +
mov [ebp-14h] edi +
push 5  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call sub_100B666  +
push dword_102DD40  +
lea ecx [ebp-14h] +
push 1  +
push ebx  +
call near ptr dword_100B6E0+2  +
lea eax [ebp-24h] +
push eax  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
mov ebx eax +
lea eax [ebp-14h] +
push eax  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z  +
mov [ebp+8] eax +
lea eax [ebp+0Ch] +
push eax  +
mov ecx esi +
call sub_100BA1E  +
push ebx  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
push dword ptr [ebp+8]  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z  +
lea ecx [ebp-24h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea ecx [ebp-14h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 1 +
mov [ebp-14h] edi +
call sub_1007D75  +
mov dword ptr [ebp-24h] offset off_1001A8C +
lea ecx [ebp-24h] +
jmp loc_101B970  +
push dword_102DD38  +
call sub_1007DF5  +
lea eax [ebp-1Ch] +
push eax  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
mov ebx ds:PatBlt +
mov [ebp+8] eax +
mov eax [ebp-2Ch] +
sub eax [ebp-34h] +
mov edi 0F00021h +
push edi  +
push 1  +
push eax  +
push dword ptr [ebp-30h]  +
push dword ptr [ebp-34h]  +
push dword ptr [esi+4]  +
call ebx  +
mov eax [ebp-28h] +
sub eax [ebp-30h] +
push edi  +
push eax  +
push 1  +
push dword ptr [ebp-30h]  +
push dword ptr [ebp-34h]  +
push dword ptr [esi+4]  +
call ebx  +
push dword ptr [ebp+8]  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
lea ecx [ebp-1Ch] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
push dword_102DD3C  +
lea ecx [ebp-1Ch] +
call sub_1007DF5  +
lea eax [ebp-1Ch] +
push eax  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
push edi  +
mov [ebp+8] eax +
mov eax [ebp-2Ch] +
sub eax [ebp-34h] +
push 1  +
push eax  +
push dword ptr [ebp-28h]  +
push dword ptr [ebp-34h]  +
push dword ptr [esi+4]  +
call ebx  +
mov eax [ebp-28h] +
sub eax [ebp-30h] +
push edi  +
inc eax  +
push eax  +
push 1  +
push dword ptr [ebp-30h]  +
push dword ptr [ebp-2Ch]  +
push dword ptr [esi+4]  +
call ebx  +
push dword ptr [ebp+8]  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
lea ecx [ebp-1Ch] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
mov ecx [ebp-10h] +
xor eax eax +
cmp [ecx+164h] eax +
jz loc_101B979  +
mov ebx offset off_1001A8C +
mov [ebp-10h] eax +
mov [ebp-14h] ebx +
mov edi offset off_1002184 +
mov [ebp-20h] eax +
mov [ebp-24h] edi +
push 5  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 4 +
call sub_100B666  +
push dword_102DD38  +
lea ecx [ebp-24h] +
push 1  +
push 0  +
call near ptr dword_100B6E0+2  +
lea eax [ebp-14h] +
push eax  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
mov [ebp+8] eax +
lea eax [ebp-24h] +
push eax  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z  +
mov [ebp+1Ch] eax +
lea eax [ebp+0Ch] +
push eax  +
mov ecx esi +
call sub_100BA1E  +
push dword ptr [ebp+8]  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
push dword ptr [ebp+1Ch]  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z  +
lea ecx [ebp-14h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea ecx [ebp-24h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
mov [ebp-24h] edi +
call sub_1007D75  +
mov [ebp-14h] ebx +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 0 +
call sub_1007D75  +
mov dword ptr [ebp-1Ch] offset off_1001A8C +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call sub_1007D75  +
call __EH_epilog3  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
movzx eax word ptr [edi+48h] +
push eax  +
call sub_101AF37  +
movzx esi word ptr [edi+4Ch] +
push esi  +
mov ecx edi +
mov ebx eax +
call sub_101AF37  +
mov ecx eax +
cmp ebx ecx +
jg loc_101B9D0  +
sub eax ebx +
cdq   +
xor eax edx +
sub eax edx +
cmp eax 6 +
jl loc_101B9DA  +
xor eax eax +
cmp [ebp+arg_0] eax +
jz loc_101B9DA  +
push eax  +
jmp loc_101BA1F  +
sub ecx ebx +
mov eax ecx +
shl eax 4 +
push 2  +
pop ecx  +
and esi 0Fh +
add eax esi +
shl eax 4 +
mov edx dword_102EE7C[eax] +
add edx ecx +
push edx  +
mov edx dword_102EE78[eax] +
add edx ecx +
push edx  +
mov edx dword_102EE74[eax] +
mov eax dword_102EE70[eax] +
sub edx ecx +
push edx  +
sub eax ecx +
push eax  +
lea eax [ebp+Rect] +
push eax  +
call ds:SetRect  +
push 0  +
lea eax [ebp+Rect] +
push eax  +
push dword ptr [edi+20h]  +
call ds:InvalidateRect  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call ?Default@CWnd@@IAEJXZ  +
push dword ptr [esi+20h]  +
call ds:HideCaret  +
xor eax eax +
inc eax  +
push eax  +
mov ecx esi +
mov [esi+164h] eax +
call sub_101B999  +
push dword ptr [esi+20h]  +
call ds:UpdateWindow  +
pop esi  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call ?Default@CWnd@@IAEJXZ  +
and dword ptr [esi+164h] 0 +
push 1  +
mov ecx esi +
call sub_101B999  +
push dword ptr [esi+20h]  +
call ds:UpdateWindow  +
pop esi  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call near ptr dword_1011A74+3  +
mov dword ptr [esi] offset off_1003FDC +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1003FDC +
call ??1CStatic@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_101BAD0  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
and dword ptr [ebp-10h] 0 +
mov dword ptr [ebp-14h] offset off_1001A8C +
push dword ptr [ebp+18h]  +
mov eax [ebp+10h] +
push dword ptr [ebp+14h]  +
and dword ptr [ebp-4] 0 +
dec eax  +
push eax  +
mov eax [ebp+0Ch] +
dec eax  +
push eax  +
lea eax [ebp-24h] +
push eax  +
call ds:SetRect  +
push dword_102DD3C  +
lea ecx [ebp-14h] +
call sub_1007DF5  +
mov esi [ebp+8] +
lea eax [ebp-14h] +
push eax  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
mov edi ds:PatBlt +
mov [ebp+8] eax +
mov eax [ebp-1Ch] +
sub eax [ebp-24h] +
mov ebx 0F00021h +
push ebx  +
push 1  +
push eax  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp-24h]  +
push dword ptr [esi+4]  +
call edi  +
mov eax [ebp-18h] +
sub eax [ebp-20h] +
push ebx  +
push eax  +
push 1  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp-24h]  +
push dword ptr [esi+4]  +
call edi  +
push dword ptr [ebp+8]  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
lea ecx [ebp-14h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
push dword_102DD38  +
lea ecx [ebp-14h] +
call sub_1007DF5  +
lea eax [ebp-14h] +
push eax  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
push ebx  +
mov [ebp+8] eax +
mov eax [ebp-1Ch] +
sub eax [ebp-24h] +
push 1  +
push eax  +
push dword ptr [ebp-18h]  +
push dword ptr [ebp-24h]  +
push dword ptr [esi+4]  +
call edi  +
mov eax [ebp-18h] +
sub eax [ebp-20h] +
push ebx  +
inc eax  +
push eax  +
push 1  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp-1Ch]  +
push dword ptr [esi+4]  +
call edi  +
push dword ptr [ebp+8]  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
lea ecx [ebp-14h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
mov dword ptr [ebp-14h] offset off_1001A8C +
call sub_1007D75  +
call __EH_epilog3  +
retn 14h  +
***
mov edi edi +
push esi  +
mov esi ecx +
call near ptr dword_1011A74+3  +
mov dword ptr [esi] offset off_10040A4 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_10040A4 +
call ??1CStatic@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_101BC29  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
and dword ptr [ebp-10h] 0 +
mov dword ptr [ebp-14h] offset off_1001A8C +
push dword ptr [ebp+18h]  +
mov eax [ebp+10h] +
push dword ptr [ebp+14h]  +
and dword ptr [ebp-4] 0 +
dec eax  +
push eax  +
mov eax [ebp+0Ch] +
dec eax  +
push eax  +
lea eax [ebp-24h] +
push eax  +
call ds:SetRect  +
push dword_102DD38  +
lea ecx [ebp-14h] +
call sub_1007DF5  +
mov esi [ebp+8] +
lea eax [ebp-14h] +
push eax  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
mov edi ds:PatBlt +
mov [ebp+8] eax +
mov eax [ebp-1Ch] +
sub eax [ebp-24h] +
mov ebx 0F00021h +
push ebx  +
push 1  +
push eax  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp-24h]  +
push dword ptr [esi+4]  +
call edi  +
mov eax [ebp-18h] +
sub eax [ebp-20h] +
push ebx  +
push eax  +
push 1  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp-24h]  +
push dword ptr [esi+4]  +
call edi  +
push dword ptr [ebp+8]  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
lea ecx [ebp-14h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
push dword_102DD3C  +
lea ecx [ebp-14h] +
call sub_1007DF5  +
lea eax [ebp-14h] +
push eax  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
push ebx  +
mov [ebp+8] eax +
mov eax [ebp-1Ch] +
sub eax [ebp-24h] +
push 1  +
push eax  +
push dword ptr [ebp-18h]  +
push dword ptr [ebp-24h]  +
push dword ptr [esi+4]  +
call edi  +
mov eax [ebp-18h] +
sub eax [ebp-20h] +
push ebx  +
inc eax  +
push eax  +
push 1  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp-1Ch]  +
push dword ptr [esi+4]  +
call edi  +
push dword ptr [ebp+8]  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
lea ecx [ebp-14h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
mov dword ptr [ebp-14h] offset off_1001A8C +
call sub_1007D75  +
call __EH_epilog3  +
retn 14h  +
***
push 4  +
mov eax offset __ehhandler$?CallUnexpected@@YAXPBU_s_ESTypeList@@@Z_6 +
call __EH_prolog3  +
push 168h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_101BD73  +
call sub_101B024  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101B05C  +
test byte ptr [ebp+8] 1 +
jz loc_101BD98  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push 0ACh  +
mov eax offset word_10282A6 +
call __EH_prolog3_GS  +
mov ebx ecx +
push ebx  +
lea ecx [ebp-90h] +
call ??0CPaintDC@@QAE@PAVCWnd@@@Z  +
movzx eax word ptr [ebx+4Ah] +
xor esi esi +
push eax  +
mov ecx ebx +
mov [ebp-4] esi +
call sub_101AF37  +
push esi  +
push eax  +
push esi  +
push 1  +
mov ecx ebx +
call ?SetScrollRange@CWnd@@QAEXHHHH@Z  +
movsx eax word ptr [ebx+4Eh] +
push 1  +
push eax  +
push 1  +
mov ecx ebx +
call ?SetScrollPos@CWnd@@QAEHHHH@Z  +
movzx edi word ptr [ebx+48h] +
push 1  +
lea ecx [ebp-90h] +
mov [ebp-98h] edi +
call ?SetMapMode@CDC@@UAEHH@Z  +
push esi  +
mov [ebp-0B8h] eax +
push esi  +
lea eax [ebp-0B0h] +
push eax  +
lea ecx [ebp-90h] +
call ?SetViewportOrg@CDC@@UAE?AVCPoint@@HH@Z  +
lea eax [ebx+50h] +
push eax  +
lea ecx [ebp-90h] +
call ?SelectObject@CDC@@UAEPAVCFont@@PAV2@@Z  +
mov esi offset unk_102F474 +
mov [ebp-0B4h] eax +
mov dword ptr [ebp-0A0h] offset dword_102EE7C +
mov [ebp-9Ch] esi +
jmp loc_101BE59  +
mov edi [ebp-98h] +
mov esi [ebp-9Ch] +
lea eax [ebx+50h] +
push eax  +
lea ecx [ebp-90h] +
call ?SelectObject@CDC@@UAEPAVCFont@@PAV2@@Z  +
movzx eax di +
push eax  +
push offset a04x  +
lea eax [ebp-28h] +
push 5  +
push eax  +
call sub_1011E02  +
add esp 10h +
lea ecx [ebp-90h] +
test eax eax +
jl loc_101C126  +
push dword_102DD40  +
call ?SetBkColor@CDC@@UAEKK@Z  +
push 8  +
call ds:GetSysColor  +
push eax  +
lea ecx [ebp-90h] +
call ?SetTextColor@CDC@@UAEKK@Z  +
mov eax [esi+8] +
mov ecx [esi] +
mov edx eax +
sub edx ecx +
mov ecx [ebx+14Ch] +
cmp edx ecx +
jle loc_101BECA  +
sub eax [esi] +
sub eax ecx +
cdq   +
sub eax edx +
sar eax 1 +
jmp loc_101BECC  +
xor eax eax +
push 0  +
push 4  +
lea edx [ebp-28h] +
push edx  +
mov edx [esi] +
lea ecx [esi-4] +
push ecx  +
add edx eax +
mov eax [ecx] +
push 2  +
push edx  +
add eax 3 +
push eax  +
push dword ptr [ebp-8Ch]  +
call sub_1025B3F  +
lea eax [ebx+58h] +
push eax  +
lea ecx [ebp-90h] +
call ?SelectObject@CDC@@UAEPAVCFont@@PAV2@@Z  +
mov eax [ebp-0A0h] +
and dword ptr [ebp-0A4h] 0 +
mov [ebp-94h] eax +
jmp loc_101BF1A  +
mov edi [ebp-98h] +
push dword ptr [ebx+44h]  +
mov esi [ebp-94h] +
push dword ptr [ebx+40h]  +
xor eax eax +
add esi 0FFFFFFF4h +
mov ecx esi +
mov [ebp-1Ch] di +
mov [ebp-1Ah] ax +
call sub_100B5EE  +
test eax eax +
jnz loc_101BF74  +
cmp [ebx+4Ch] di +
jz loc_101BF74  +
push dword_102DD40  +
and [ebp-0A8h] eax +
lea ecx [ebp-90h] +
call ?SetBkColor@CDC@@UAEKK@Z  +
push 8  +
call ds:GetSysColor  +
push eax  +
lea ecx [ebp-90h] +
call ?SetTextColor@CDC@@UAEKK@Z  +
jmp loc_101C01E  +
mov [ebx+4Ch] di +
push dword_102DD40  +
lea ecx [ebp-90h] +
mov dword ptr [ebp-0A8h] 1 +
call ?SetBkColor@CDC@@UAEKK@Z  +
push 8  +
call ds:GetSysColor  +
push eax  +
lea ecx [ebp-90h] +
call ?SetTextColor@CDC@@UAEKK@Z  +
movzx eax di +
push eax  +
push offset a04x  +
lea eax [ebp-3Ch] +
push 0Ah  +
push eax  +
call sub_1011E02  +
add esp 10h +
test eax eax +
jl loc_101C120  +
cmp dword_102EE68 0 +
jnz loc_101BFF2  +
push dword ptr [ebx+20h]  +
call ds:GetParent  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
test eax eax +
jz loc_101BFE5  +
mov eax [eax+20h] +
lea ecx [ebp-3Ch] +
push ecx  +
push 6Dh  +
push eax  +
call ds:SetDlgItemTextW  +
cmp dword_102EE64 0 +
jnz loc_101C01E  +
push dword ptr [ebx+20h]  +
call ds:GetParent  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
test eax eax +
jz loc_101C011  +
mov eax [eax+20h] +
lea ecx [ebp-1Ch] +
push ecx  +
push 6Eh  +
push eax  +
call ds:SetDlgItemTextW  +
lea eax [ebp-0B0h] +
push eax  +
push 1  +
lea eax [ebp-1Ch] +
push eax  +
push dword ptr [ebp-8Ch]  +
call ds:GetTextExtentPoint32W  +
mov ecx [ebp-94h] +
mov eax [ecx-4] +
sub eax [esi] +
cmp eax [ebp-0B0h] +
jle loc_101C059  +
sub eax [ebp-0B0h] +
cdq   +
sub eax edx +
mov edi eax +
sar edi 1 +
jmp loc_101C05B  +
xor edi edi +
mov eax [ecx] +
sub eax [ecx-8] +
cmp eax [ebp-0ACh] +
jle loc_101C075  +
sub eax [ebp-0ACh] +
cdq   +
sub eax edx +
sar eax 1 +
jmp loc_101C077  +
xor eax eax +
mov ecx [ecx-8] +
push 0  +
push 1  +
lea edx [ebp-1Ch] +
push edx  +
push esi  +
add ecx eax +
mov eax [esi] +
push 2  +
push ecx  +
add eax edi +
push eax  +
push dword ptr [ebp-8Ch]  +
call sub_1025B3F  +
push dword ptr [ebp-0A8h]  +
lea eax [ebp-90h] +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
push eax  +
mov ecx ebx +
movs   +
call sub_101B654  +
inc dword ptr [ebp-0A4h]  +
add dword ptr [ebp-94h] 10h +
inc dword ptr [ebp-98h]  +
cmp dword ptr [ebp-0A4h] 10h +
jl loc_101BF14  +
add dword ptr [ebp-9Ch] 10h +
add dword ptr [ebp-0A0h] 100h +
cmp dword ptr [ebp-9Ch] offset dword_102F4D4 +
jl loc_101BE4D  +
push dword ptr [ebp-0B4h]  +
lea ecx [ebp-90h] +
call ?SelectObject@CDC@@UAEPAVCFont@@PAV2@@Z  +
push dword ptr [ebp-0B8h]  +
lea ecx [ebp-90h] +
call ?SetMapMode@CDC@@UAEHH@Z  +
and dword ptr [ebx+40h] 0 +
and dword ptr [ebx+44h] 0 +
lea ecx [ebp-90h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
call ??1CPaintDC@@UAE@XZ  +
call sub_1026DAC  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
and dword ptr [ebp-10h] 0 +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
call ?SetFocus@CWnd@@QAEPAV1@XZ  +
and dword ptr [ebp-4] 0 +
mov edi offset dword_102EE70 +
mov [ebp-0Ch] edi +
mov eax [ebp-0Ch] +
xor ebx ebx +
mov [ebp-8] eax +
push dword ptr [ebp+10h]  +
mov ecx [ebp-8] +
push dword ptr [ebp+0Ch]  +
call sub_100B5EE  +
test eax eax +
jnz loc_101C182  +
add dword ptr [ebp-8] 10h +
inc ebx  +
cmp ebx 10h +
jb loc_101C164  +
jmp loc_101C198  +
push ebx  +
push dword ptr [ebp-4]  +
mov ecx esi +
call sub_101AFC1  +
test eax eax +
jz loc_101C198  +
mov dword ptr [ebp-10h] 1 +
inc dword ptr [ebp-4]  +
add dword ptr [ebp-0Ch] 100h +
cmp dword ptr [ebp-4] 6 +
jb loc_101C15C  +
xor ebx ebx +
cmp [ebp-10h] ebx +
jnz loc_101C1BC  +
push 0FFFFFFFFh  +
call ds:MessageBeep  +
jmp loc_101C265  +
mov eax [ebp+0Ch] +
mov [esi+40h] eax +
mov eax [ebp+10h] +
push 1  +
mov ecx esi +
mov [esi+44h] eax +
call sub_101B999  +
xor eax eax +
mov [esi+4Ch] ax +
mov [ebp-8] edi +
mov dword ptr [ebp-10h] 6 +
mov eax [ebp-8] +
xor edi edi +
mov [ebp-0Ch] eax +
push dword ptr [esi+44h]  +
mov ecx [ebp-0Ch] +
push dword ptr [esi+40h]  +
call sub_100B5EE  +
test eax eax +
jnz loc_101C207  +
add dword ptr [ebp-0Ch] 10h +
inc edi  +
cmp edi 10h +
jb loc_101C1E9  +
jmp loc_101C24D  +
push 2  +
pop ecx  +
lea eax [ebx+edi] +
shl eax 4 +
mov edx dword_102EE7C[eax] +
add edx ecx +
push edx  +
mov edx dword_102EE78[eax] +
add edx ecx +
push edx  +
mov edx dword_102EE74[eax] +
mov eax dword_102EE70[eax] +
sub edx ecx +
push edx  +
sub eax ecx +
push eax  +
lea eax [ebp-20h] +
push eax  +
call ds:SetRect  +
push 0  +
lea eax [ebp-20h] +
push eax  +
push dword ptr [esi+20h]  +
call ds:InvalidateRect  +
add dword ptr [ebp-8] 100h +
add ebx 10h +
dec dword ptr [ebp-10h]  +
jnz loc_101C1E1  +
push dword ptr [esi+20h]  +
call ds:UpdateWindow  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+8] +
push esi  +
mov esi ecx +
cmp eax 26h +
jz loc_101C29B  +
cmp eax 28h +
jz loc_101C29B  +
cmp eax 25h +
jz loc_101C29B  +
cmp eax 27h +
jz loc_101C29B  +
call ?Default@CWnd@@IAEJXZ  +
jmp loc_101C421  +
movzx eax word ptr [esi+48h] +
push ebx  +
push edi  +
push eax  +
call sub_101AF37  +
movzx edi word ptr [esi+4Ch] +
push edi  +
mov ecx esi +
mov ebx eax +
call sub_101AF37  +
mov [ebp-4] eax +
sub [ebp-4] ebx +
cmp dword ptr [ebp-4] 6 +
jge loc_101C2C5  +
cmp eax ebx +
jge loc_101C2F3  +
and edi 0FFF0h +
push edi  +
mov ecx esi +
mov [esi+48h] di +
call sub_101AF37  +
xor edi edi +
push edi  +
push edi  +
push dword ptr [esi+20h]  +
mov [esi+4Eh] ax +
call ds:InvalidateRect  +
push dword ptr [esi+20h]  +
call ds:UpdateWindow  +
jmp loc_101C2F5  +
xor edi edi +
mov eax [ebp+8] +
sub eax 25h +
jz loc_101C3DE  +
dec eax  +
jz loc_101C3A5  +
dec eax  +
jz loc_101C351  +
dec eax  +
jnz loc_101C41F  +
movzx eax word ptr [esi+4Ch] +
movzx ecx word ptr [esi+152h] +
add eax 10h +
cmp eax ecx +
jg loc_101C41F  +
cmp dword ptr [ebp-4] 5 +
jl loc_101C33F  +
push edi  +
push 1  +
push 115h  +
push dword ptr [esi+20h]  +
call ds:SendMessageW  +
push edi  +
mov ecx esi +
call sub_101B999  +
add word ptr [esi+4Ch] 10h +
jmp loc_101C417  +
movzx eax word ptr [esi+4Ch] +
movzx edx word ptr [esi+152h] +
movzx ecx ax +
inc ecx  +
cmp ecx edx +
jg loc_101C41F  +
inc eax  +
push eax  +
mov ecx esi +
call sub_101AF37  +
mov ebx eax +
movzx eax word ptr [esi+48h] +
push eax  +
mov ecx esi +
call sub_101AF37  +
sub ebx eax +
cmp ebx 6 +
jl loc_101C397  +
push edi  +
push 1  +
push 115h  +
push dword ptr [esi+20h]  +
call ds:SendMessageW  +
push edi  +
mov ecx esi +
call sub_101B999  +
inc word ptr [esi+4Ch]  +
jmp loc_101C417  +
movzx eax word ptr [esi+4Ch] +
movzx ecx word ptr [esi+150h] +
add eax 0FFFFFFF0h +
cmp eax ecx +
jl loc_101C41F  +
movzx ecx word ptr [esi+48h] +
cmp eax ecx +
jge loc_101C3CF  +
push edi  +
push edi  +
push 115h  +
push dword ptr [esi+20h]  +
call ds:SendMessageW  +
push edi  +
mov ecx esi +
call sub_101B999  +
mov eax 0FFF0h +
jmp loc_101C413  +
movzx eax word ptr [esi+4Ch] +
movzx ecx word ptr [esi+150h] +
dec eax  +
cmp eax ecx +
jl loc_101C41F  +
movzx ecx word ptr [esi+48h] +
cmp eax ecx +
jge loc_101C406  +
push edi  +
push edi  +
push 115h  +
push dword ptr [esi+20h]  +
call ds:SendMessageW  +
push edi  +
mov ecx esi +
call sub_101B999  +
mov eax 0FFFFh +
add [esi+4Ch] ax +
push edi  +
mov ecx esi +
call sub_101B999  +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 0Ch  +
***
push 68h  +
mov eax offset byte_10282DB +
call __EH_prolog3_GS  +
mov ebx ecx +
push ebx  +
lea ecx [ebp-64h] +
call ??0CPaintDC@@QAE@PAVCWnd@@@Z  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-74h] +
push eax  +
push dword ptr [ebx+20h]  +
call ds:GetClientRect  +
sub esp 10h +
mov edi esp +
lea esi [ebp-74h] +
movs   +
movs   +
movs   +
lea eax [ebp-64h] +
push eax  +
mov ecx ebx +
movs   +
call sub_101BADC  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-64h] +
call ??1CPaintDC@@UAE@XZ  +
call sub_1026DAC  +
retn   +
***
call ?AfxGetThread@@YGPAVCWinThread@@XZ  +
test eax eax +
jz loc_101C4E7  +
mov edx [eax] +
mov ecx eax +
jmp dword ptr [edx+7Ch]  +
xor eax eax +
retn   +
***
mov eax ds:?classCMDIChildWnd@CMDIChildWnd@@2UCRuntimeClass@@B +
retn   +
***
mov eax offset off_1004238 +
retn   +
***
mov eax ds:?messageMap@CMDIChildWnd@@1UAFX_MSGMAP@@B +
retn   +
***
retn   +
***
mov edi edi +
push esi  +
push offset szFormat  +
mov esi ecx +
call ds:RegisterClipboardFormatW  +
xor ecx ecx +
test eax eax +
setnz cl  +
mov [esi+18Ch] eax +
pop esi  +
mov eax ecx +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
xor ecx ecx +
mov eax offset off_1002184 +
mov [ebp-10h] ecx +
mov [ebp-14h] eax +
mov ebx [ebp+8] +
mov [ebp-4] ecx +
cmp ebx ecx +
jnz loc_101C56E  +
mov [ebp-14h] eax +
jmp loc_101C618  +
push dword ptr unk_102DD4C  +
push 1  +
push ecx  +
lea ecx [ebp-14h] +
call near ptr dword_100B6E0+2  +
lea eax [ebp-14h] +
push eax  +
mov ecx ebx +
call ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z  +
mov edi [esi+188h] +
mov [ebp+8] eax +
dec edi  +
jmp loc_101C5BD  +
mov eax dword_102DF60 +
dec eax  +
push eax  +
push edi  +
lea eax [ebp-1Ch] +
push eax  +
mov ecx ebx +
call ?MoveTo@CDC@@QAE?AVCPoint@@HH@Z  +
push dword ptr [esi+1BCh]  +
mov ecx ebx +
push edi  +
call ?LineTo@CDC@@QAEHHH@Z  +
add edi [esi+188h] +
cmp edi [esi+1B8h] +
jl loc_101C596  +
mov eax [esi+188h] +
mov ecx dword_102DF60 +
lea edi [eax+ecx-1] +
jmp loc_101C5F7  +
push edi  +
push 0  +
lea eax [ebp-1Ch] +
push eax  +
call ?MoveTo@CDC@@QAE?AVCPoint@@HH@Z  +
push edi  +
push dword ptr [esi+1B8h]  +
mov ecx ebx +
call ?LineTo@CDC@@QAEHHH@Z  +
add edi [esi+188h] +
cmp edi [esi+1BCh] +
mov ecx ebx +
jl loc_101C5D7  +
push dword ptr [ebp+8]  +
call ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z  +
lea ecx [ebp-14h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
mov dword ptr [ebp-14h] offset off_1002184 +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call sub_1007D75  +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov esi ecx +
lea eax [esi+1B0h] +
push eax  +
lea eax [ebp+rcDst] +
push eax  +
call ds:CopyRect  +
mov ebx [ebp+arg_0] +
mov eax [ebp+arg_4] +
mov [esi+160h] ebx +
sub eax dword_102DF60 +
mov [esi+164h] eax +
jns loc_101C66F  +
and dword ptr [esi+164h] 0 +
cmp dword ptr [esi+0D8h] 7 +
mov ecx [esi+188h] +
jnz loc_101C694  +
mov eax ebx +
cdq   +
idiv  ecx +
imul eax ecx +
mov [esi+160h] eax +
mov eax [esi+164h] +
jmp loc_101C6B6  +
mov eax ecx +
cdq   +
sub eax edx +
push edi  +
mov edi eax +
sar edi 1 +
lea eax [edi+ebx] +
cdq   +
idiv  ecx +
imul eax ecx +
mov [esi+160h] eax +
mov eax [esi+164h] +
add eax edi +
pop edi  +
cdq   +
idiv  ecx +
imul eax ecx +
mov [esi+164h] eax +
mov eax [esi+160h] +
mov [esi+170h] eax +
mov eax [esi+164h] +
mov [esi+174h] eax +
mov eax [esi+160h] +
mov [esi+168h] eax +
mov eax [esi+164h] +
mov [esi+16Ch] eax +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi ecx +
mov eax [esi+168h] +
mov [esi+170h] eax +
mov eax [esi+16Ch] +
mov [esi+174h] eax +
mov eax [ebp+arg_0] +
mov [esi+168h] eax +
mov eax [ebp+arg_4] +
sub eax dword_102DF60 +
mov [esi+16Ch] eax +
lea eax [esi+1B0h] +
push eax  +
lea eax [ebp+rcDst] +
push eax  +
call ds:CopyRect  +
xor eax eax +
cmp [esi+168h] eax +
jge loc_101C759  +
mov [esi+168h] eax +
cmp [esi+16Ch] eax +
jge loc_101C767  +
mov [esi+16Ch] eax +
mov eax [ebp+rcDst.right] +
cmp [esi+168h] eax +
jle loc_101C787  +
cmp dword ptr [esi+0D8h] 7 +
jnz loc_101C781  +
sub eax [esi+188h] +
mov [esi+168h] eax +
mov eax [ebp+rcDst.bottom] +
mov ecx dword_102DF60 +
mov edx eax +
sub edx ecx +
cmp [esi+16Ch] edx +
jle loc_101C7BB  +
cmp dword ptr [esi+0D8h] 7 +
jnz loc_101C7B5  +
sub eax [esi+188h] +
sub eax ecx +
mov [esi+16Ch] eax +
jmp loc_101C7BB  +
mov [esi+16Ch] edx +
mov ecx [esi+188h] +
push ebx  +
mov ebx [esi+0D8h] +
cmp ebx 7 +
jnz loc_101C7E7  +
mov eax [esi+168h] +
cdq   +
idiv  ecx +
imul eax ecx +
mov [esi+168h] eax +
mov eax [esi+16Ch] +
jmp loc_101C80E  +
mov eax ecx +
cdq   +
sub eax edx +
push edi  +
mov edi eax +
mov eax [esi+168h] +
sar edi 1 +
add eax edi +
cdq   +
idiv  ecx +
imul eax ecx +
mov [esi+168h] eax +
mov eax [esi+16Ch] +
add eax edi +
pop edi  +
cdq   +
idiv  ecx +
imul eax ecx +
cmp ebx 7 +
mov [esi+16Ch] eax +
pop ebx  +
jnz loc_101C88F  +
mov eax [esi+160h] +
mov edx [esi+168h] +
sub edx eax +
cmp edx ecx +
jg loc_101C83F  +
test edx edx +
jl loc_101C83F  +
lea edx [eax+ecx] +
mov [esi+168h] edx +
mov edx eax +
sub edx [esi+168h] +
cmp edx ecx +
jg loc_101C857  +
test edx edx +
jle loc_101C857  +
sub eax ecx +
mov [esi+168h] eax +
mov edx [esi+164h] +
mov eax edx +
sub eax [esi+16Ch] +
cmp eax ecx +
jg loc_101C877  +
test eax eax +
jle loc_101C877  +
mov eax edx +
sub eax ecx +
mov [esi+16Ch] eax +
mov eax [esi+16Ch] +
sub eax edx +
cmp eax ecx +
jg loc_101C88F  +
test eax eax +
jl loc_101C88F  +
add edx ecx +
mov [esi+16Ch] edx +
pop esi  +
leave   +
retn 8  +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push dword ptr [ecx+4]  +
call ds:OffsetRgn  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
mov edx [eax] +
push esi  +
mov esi [ecx] +
cmp edx esi +
jle loc_101C8CE  +
mov [eax] esi +
mov [ecx] edx +
mov edx [eax+4] +
mov esi [ecx+4] +
cmp edx esi +
jle loc_101C8DE  +
mov [eax+4] esi +
mov [ecx+4] edx +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+0D0h] 0 +
mov ecx [ebp+8] +
mov eax [ecx] +
jz loc_101C8FF  +
push 1  +
jmp loc_101C901  +
push 0  +
call dword ptr [eax]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_0] eax +
jz loc_101C924  +
push [ebp+arg_0]  +
push dword ptr [ecx+4]  +
call ds:SelectObject  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call ??0CWnd@@QAE@XZ  +
mov dword ptr [esi] offset off_10043A4 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ??1CButton@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_101C960  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_101C92D  +
mov dword ptr [esi] offset off_100446C +
mov eax offset off_10021B4 +
mov [esi+40h] eax +
xor ecx ecx +
mov [esi+44h] ecx +
mov [esi+48h] eax +
mov [esi+4Ch] ecx +
mov [esi+50h] eax +
mov [esi+54h] ecx +
mov [esi+58h] eax +
mov [esi+5Ch] ecx +
mov eax esi +
pop esi  +
retn   +
***
call __EH_prolog3  +
mov edi ecx +
mov [ebp-10h] edi +
lea ecx [edi+58h] +
mov esi offset off_10021B4 +
mov dword ptr [ebp-4] 3 +
mov [ecx] esi +
call sub_1007D75  +
lea ecx [edi+50h] +
mov byte ptr [ebp-4] 2 +
mov [ecx] esi +
call sub_1007D75  +
lea ecx [edi+48h] +
mov byte ptr [ebp-4] 1 +
mov [ecx] esi +
call sub_1007D75  +
lea ecx [edi+40h] +
mov byte ptr [ebp-4] 0 +
mov [ecx] esi +
call sub_1007D75  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx edi +
call ??1CButton@@UAE@XZ  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_102CB5C 0 +
push esi  +
mov esi ecx +
jnz loc_101CA28  +
push 2  +
mov ecx offset off_102CB58 +
call sub_100C50A  +
mov eax dword_102CB5C +
push 0  +
push 6  +
push 0  +
push 1000h  +
mov [esi+0C0h] eax +
call ?AfxRegisterWndClass@@YGPBGIPAUHICON__@@PAUHBRUSH__@@0@Z  +
push 0  +
push [ebp+arg_18]  +
lea ecx [ebp+arg_8] +
push ecx  +
push [ebp+arg_4]  +
mov ecx esi +
push [ebp+arg_0]  +
push eax  +
call ?Create@CMDIChildWnd@@UAEHPBG0KABUtagRECT@@PAVCMDIFrameWnd@@PAUCCreateContext@@@Z  +
pop esi  +
pop ebp  +
retn 1Ch  +
***
call __EH_prolog3  +
mov esi ecx +
push esi  +
lea ecx [ebp-24h] +
call ??0CClientDC@@QAE@PAVCWnd@@@Z  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-24h] +
lea ecx [esi+148h] +
push eax  +
call sub_100B853  +
test eax eax +
jnz loc_101CAA6  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-24h] +
call ??1CClientDC@@UAE@XZ  +
xor eax eax +
call __EH_epilog3  +
retn   +
mov eax dword_102DF5C +
add eax 0Fh +
cdq   +
and edx 0Fh +
add eax edx +
sar eax 4 +
imul eax dword_102DF58 +
add eax eax +
movzx eax ax +
test ax ax +
jz loc_101CA92  +
movzx edi ax +
push edi  +
push 2  +
call ds:LocalAlloc  +
mov ebx eax +
test ebx ebx +
jz loc_101CA92  +
push ebx  +
call ds:LocalLock  +
mov [ebp-10h] eax +
test eax eax +
jnz loc_101CAF8  +
push ebx  +
call ds:LocalUnlock  +
push ebx  +
call ds:LocalFree  +
jmp loc_101CA92  +
push edi  +
push 0FFFFh  +
push eax  +
call memset  +
add esp 0Ch +
push dword ptr [ebp-10h]  +
lea edi [esi+13Ch] +
push 1  +
push 1  +
push dword_102DF58  +
mov ecx edi +
push dword_102DF5C  +
call sub_100B76B  +
push ebx  +
test eax eax +
jnz loc_101CB4E  +
call ds:LocalUnlock  +
push ebx  +
call ds:LocalFree  +
xor esi esi +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-24h] +
call ??1CClientDC@@UAE@XZ  +
mov eax esi +
jmp loc_101CAA0  +
call ds:LocalUnlock  +
push ebx  +
call ds:LocalFree  +
push edi  +
lea ecx [esi+148h] +
call sub_100B87E  +
mov [esi+144h] eax +
xor esi esi +
inc esi  +
jmp loc_101CB3B  +
***
call __EH_prolog3  +
and dword ptr [ebp-10h] 0 +
mov esi offset off_100219C +
mov [ebp-14h] esi +
and dword ptr [ebp-4] 0 +
push 11h  +
lea ecx [ebp-14h] +
call sub_100B666  +
push offset dword_102F4D0  +
push 5Ch  +
push dword ptr [ebp-10h]  +
call ds:GetObjectW  +
lea ecx [ebp-14h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
mov [ebp-14h] esi +
call sub_1007D75  +
xor eax eax +
inc eax  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push edi  +
lea eax [ebp+Rect] +
mov esi ecx +
push eax  +
push dword ptr [esi+20h]  +
call ds:GetClientRect  +
mov eax [ebp+Rect.right] +
mov ecx dword_102DF60 +
push 2  +
pop edx  +
sub eax edx +
add ecx 0FFFFFFFEh +
mov [ebp+Rect.right] eax +
sub eax ecx +
push 76h  +
sub eax 3 +
push esi  +
mov [ebp+Rect.left] eax +
lea eax [ebp+Rect] +
push eax  +
lea edi [esi+0DCh] +
push 5000000Bh  +
mov [ebp+Rect.bottom] ecx +
xor esi esi +
push esi  +
mov ecx edi +
mov [ebp+Rect.top] edx +
call ?Create@CButton@@QAEHPBGKABUtagRECT@@PAVCWnd@@I@Z  +
test eax eax +
jz loc_101CC50  +
push esi  +
push esi  +
push 8Bh  +
push 8Ah  +
mov ecx edi +
call ?LoadBitmaps@CBitmapButton@@QAEHPBG000@Z  +
test eax eax +
jz loc_101CC50  +
mov ecx edi +
call ?SizeToContent@CBitmapButton@@QAEXXZ  +
xor eax eax +
inc eax  +
jmp loc_101CC52  +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
lea ecx [ebp-10h] +
call ??0CString@@QAE@XZ  +
xor ebx ebx +
mov [ebp-4] ebx +
mov [ebp-1Ch] ebx +
mov dword ptr [ebp-20h] offset off_1001A8C +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 1 +
call ??0CDC@@QAE@XZ  +
mov byte ptr [ebp-4] 2 +
cmp esi ebx +
jnz loc_101CC98  +
xor eax eax +
jmp loc_101CC9B  +
mov eax [esi+20h] +
push eax  +
call ds:GetDC  +
push eax  +
lea ecx [ebp-30h] +
call ?Attach@CDC@@QAEHPAUHDC__@@@Z  +
lea eax [esi+1B0h] +
push eax  +
lea eax [ebp-40h] +
push eax  +
call ds:CopyRect  +
mov edi ds:GetSysColor +
cmp [esi+0D4h] ebx +
jz loc_101CCCE  +
push 2  +
jmp loc_101CCD0  +
push 3  +
call edi  +
push eax  +
lea ecx [ebp-20h] +
call sub_1007DF5  +
mov eax dword_102DF60 +
mov [ebp-34h] eax +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-40h] +
push eax  +
lea ecx [ebp-30h] +
call sub_1007E18  +
lea ecx [ebp-20h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
push 11h  +
lea ecx [ebp-30h] +
call ?SelectStockObject@CDC@@UAEPAVCGdiObject@@H@Z  +
push 1  +
lea ecx [ebp-30h] +
mov [ebp-14h] eax +
call ?SetBkMode@CDC@@QAEHH@Z  +
mov [ebp-18h] eax +
cmp [esi+0D4h] ebx +
jz loc_101CD21  +
push 9  +
jmp loc_101CD23  +
push 13h  +
call edi  +
push eax  +
lea ecx [ebp-30h] +
call ?SetTextColor@CDC@@UAEKK@Z  +
push 0EF38h  +
lea ecx [ebp-10h] +
mov edi eax +
call ?LoadStringW@CString@@QAEHI@Z  +
mov eax [esi+1B8h] +
mov ecx [ebp-10h] +
push dword ptr [ecx-8]  +
cdq   +
sub eax edx +
push ecx  +
sar eax 1 +
sub eax 1Eh +
push 1  +
push eax  +
mov eax [ebp-30h] +
lea ecx [ebp-30h] +
call dword ptr [eax+64h]  +
push dword ptr [ebp-14h]  +
lea ecx [ebp-30h] +
call ?SelectObject@CDC@@UAEPAVCFont@@PAV2@@Z  +
push edi  +
lea ecx [ebp-30h] +
call ?SetTextColor@CDC@@UAEKK@Z  +
push dword ptr [ebp-18h]  +
lea ecx [ebp-30h] +
call ?SetBkMode@CDC@@QAEHH@Z  +
push ebx  +
push ebx  +
push dword ptr [esi+0FCh]  +
call ds:InvalidateRect  +
lea ecx [ebp-30h] +
call ?Detach@CDC@@QAEPAUHDC__@@XZ  +
cmp eax ebx +
jz loc_101CD9F  +
push eax  +
push ebx  +
call ds:ReleaseDC  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 1 +
call ??1CDC@@UAE@XZ  +
lea ecx [ebp-20h] +
mov [ebp-4] bl +
mov dword ptr [ebp-20h] offset off_1001A8C +
call sub_1007D75  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call ??1CString@@QAE@XZ  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ecx +
test esi esi +
jz loc_101CE34  +
mov eax [esi] +
push ebx  +
push 7  +
mov ecx esi +
call dword ptr [eax+2Ch]  +
mov ebx eax +
mov eax [esi] +
push 5  +
mov ecx esi +
call dword ptr [eax+2Ch]  +
push 0Ah  +
mov ecx esi +
mov [ebp+arg_0] eax +
call ?SetROP2@CDC@@QAEHH@Z  +
add edi 1A0h +
push edi  +
mov ecx esi +
mov [ebp+var_4] eax +
call sub_100BA1E  +
push ebx  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z  +
push [ebp+arg_0]  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
push [ebp+var_4]  +
mov ecx esi +
call ?SetROP2@CDC@@QAEHH@Z  +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
jmp loc_101CFC6  +
push 0CC0020h  +
push dword ptr [esi+194h]  +
lea eax [esi+148h] +
push dword ptr [esi+190h]  +
lea ecx [ebp-30h] +
push eax  +
mov eax [esi+19Ch] +
sub eax [esi+194h] +
push eax  +
mov eax [esi+198h] +
sub eax [esi+190h] +
push eax  +
push ebx  +
push ebx  +
call sub_100BA69  +
push dword ptr [esi+20h]  +
call ds:OpenClipboard  +
test eax eax +
jnz loc_101D010  +
push dword ptr [ebp-10h]  +
lea ecx [ebp-30h] +
call sub_100B87E  +
lea ecx [ebp-18h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea ecx [ebp-30h] +
call ?DeleteDC@CDC@@QAEHXZ  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ??1CDC@@UAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-18h] +
mov [ebp-18h] edi +
call sub_1007D75  +
xor eax eax +
call __EH_epilog3  +
retn   +
***
call ds:EmptyClipboard  +
lea ecx [ebp-18h] +
call ?Detach@CGdiObject@@QAEPAXXZ  +
push eax  +
push 2  +
call ds:SetClipboardData  +
test eax eax +
jnz loc_101D06C  +
push dword ptr [ebp-10h]  +
lea ecx [ebp-30h] +
call sub_100B87E  +
lea ecx [ebp-18h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea ecx [ebp-30h] +
call ?DeleteDC@CDC@@QAEHXZ  +
call ds:CloseClipboard  +
xor esi esi +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ??1CDC@@UAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-18h] +
mov [ebp-18h] edi +
call sub_1007D75  +
mov eax esi +
jmp loc_101D00A  +
***
call ds:CloseClipboard  +
push dword ptr [ebp-10h]  +
lea ecx [ebp-30h] +
call sub_100B87E  +
lea ecx [ebp-18h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea ecx [ebp-30h] +
call ?DeleteDC@CDC@@QAEHXZ  +
push ebx  +
lea eax [esi+1A0h] +
push eax  +
push dword ptr [esi+20h]  +
mov [esi+0D0h] ebx +
call ds:InvalidateRect  +
push dword ptr [esi+20h]  +
call ds:UpdateWindow  +
xor esi esi +
inc esi  +
jmp loc_101D04E  +
***
call __EH_prolog3  +
mov esi ecx +
push esi  +
lea ecx [ebp-48h] +
call ??0CClientDC@@QAE@PAVCWnd@@@Z  +
and dword ptr [ebp-4] 0 +
push 7  +
lea ecx [ebp-48h] +
call ?SelectStockObject@CDC@@UAEPAVCGdiObject@@H@Z  +
push 5  +
lea ecx [ebp-48h] +
mov ebx eax +
call ?SelectStockObject@CDC@@UAEPAVCGdiObject@@H@Z  +
push 0Ah  +
lea ecx [ebp-48h] +
mov [ebp-10h] eax +
call ?SetROP2@CDC@@QAEHH@Z  +
cmp dword ptr [ebp+8] 0 +
mov edi ds:SetRect +
mov [ebp-14h] eax +
jnz loc_101D16E  +
mov eax [esi+160h] +
mov ecx [esi+164h] +
mov [ebp-24h] eax +
mov eax dword_102DF60 +
add ecx eax +
mov [ebp-20h] ecx +
mov ecx [esi+170h] +
mov [ebp-1Ch] ecx +
mov ecx [esi+174h] +
add ecx eax +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-24h] +
mov [ebp-18h] ecx +
push eax  +
mov ecx esi +
call sub_101C8B6  +
mov eax [esi+188h] +
mov ecx [ebp-18h] +
mov edx [ebp-1Ch] +
lea ecx [eax+ecx+1] +
push ecx  +
lea eax [eax+edx+1] +
push eax  +
push dword ptr [ebp-20h]  +
lea eax [ebp-34h] +
push dword ptr [ebp-24h]  +
push eax  +
call edi  +
lea eax [ebp-34h] +
push eax  +
lea ecx [ebp-48h] +
call sub_100BA1E  +
mov eax [esi+160h] +
mov ecx [esi+164h] +
mov [ebp-24h] eax +
mov eax dword_102DF60 +
add ecx eax +
mov [ebp-20h] ecx +
mov ecx [esi+168h] +
mov [ebp-1Ch] ecx +
mov ecx [esi+16Ch] +
add ecx eax +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-24h] +
mov [ebp-18h] ecx +
push eax  +
mov ecx esi +
call sub_101C8B6  +
mov eax [ebp-1Ch] +
mov ecx [ebp-18h] +
mov [esi+170h] eax +
mov [esi+174h] ecx +
mov esi [esi+188h] +
lea ecx [esi+ecx+1] +
push ecx  +
lea eax [esi+eax+1] +
push eax  +
push dword ptr [ebp-20h]  +
lea eax [ebp-34h] +
push dword ptr [ebp-24h]  +
push eax  +
call edi  +
lea eax [ebp-34h] +
push eax  +
lea ecx [ebp-48h] +
call sub_100BA1E  +
push ebx  +
lea ecx [ebp-48h] +
call ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z  +
push dword ptr [ebp-10h]  +
lea ecx [ebp-48h] +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
push dword ptr [ebp-14h]  +
lea ecx [ebp-48h] +
call ?SetROP2@CDC@@QAEHH@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-48h] +
call ??1CClientDC@@UAE@XZ  +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax dword_102DF5C +
add eax 0Fh +
cdq   +
and edx 0Fh +
add eax edx +
sar eax 4 +
imul eax dword_102DF58 +
push ebx  +
push esi  +
add eax eax +
movzx eax ax +
push edi  +
movzx edi ax +
push edi  +
push 2  +
mov esi ecx +
call ds:LocalAlloc  +
mov ebx eax +
test ebx ebx +
jnz loc_101D25A  +
xor eax eax +
jmp loc_101D2C3  +
push ebx  +
call ds:LocalLock  +
mov [ebp+var_4] eax +
test eax eax +
jnz loc_101D278  +
push ebx  +
call ds:LocalUnlock  +
push ebx  +
call ds:LocalFree  +
jmp loc_101D256  +
push edi  +
push 0FFFFh  +
push eax  +
call memset  +
add esp 0Ch +
push [ebp+var_4]  +
lea ecx [esi+13Ch] +
push edi  +
call sub_100B79A  +
push ebx  +
call ds:LocalUnlock  +
push ebx  +
call ds:LocalFree  +
xor eax eax +
push eax  +
push eax  +
push dword ptr [esi+20h]  +
mov [esi+0D0h] eax +
call ds:InvalidateRect  +
push dword ptr [esi+20h]  +
call ds:UpdateWindow  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push esi  +
lea eax [ebp-8] +
push eax  +
mov esi ecx +
call ds:GetCursorPos  +
lea eax [ebp-18h] +
push eax  +
push dword ptr [esi+20h]  +
call ds:GetClientRect  +
lea eax [ebp-8] +
push eax  +
push dword ptr [esi+20h]  +
call ds:ScreenToClient  +
push dword ptr [ebp-4]  +
mov eax dword_102DF60 +
push dword ptr [ebp-8]  +
mov [ebp-14h] eax +
lea eax [ebp-18h] +
push eax  +
call ds:PtInRect  +
test eax eax +
jz loc_101D34D  +
push dword ptr [ebp-4]  +
lea ecx [esi+1A0h] +
push dword ptr [ebp-8]  +
call sub_100B5EE  +
test eax eax +
jz loc_101D33E  +
cmp dword ptr [esi+0D0h] 0 +
jz loc_101D33E  +
push dword_102DD04  +
jmp loc_101D360  +
mov eax [esi+0D8h] +
push dword_102DD08[eax*4]  +
jmp loc_101D360  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push 7F00h  +
push 0  +
call ds:LoadCursorW  +
push eax  +
call ds:SetCursor  +
xor eax eax +
inc eax  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
push esi  +
mov esi ecx +
cmp [ebp+8] eax +
jnz loc_101D3A2  +
push eax  +
mov [esi+0D0h] eax +
lea eax [esi+1A0h] +
push eax  +
push dword ptr [esi+20h]  +
call ds:InvalidateRect  +
push dword ptr [esi+20h]  +
call ds:UpdateWindow  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+0Ch] +
cdq   +
idiv  dword_102DF5C +
push esi  +
push edi  +
mov esi ecx +
mov edi eax +
mov eax [esi+0D0h] +
mov [ebp-4] edi +
test eax eax +
jz loc_101D448  +
cmp edi 1 +
jle loc_101D438  +
lea ecx [esi+1A0h] +
mov eax [ecx] +
cdq   +
push ebx  +
mov ebx [esi+188h] +
idiv  ebx +
imul eax edi +
mov [ecx] eax +
mov edi dword_102DF60 +
lea ecx [esi+1A4h] +
mov eax [ecx] +
sub eax edi +
cdq   +
idiv  ebx +
imul eax [ebp-4] +
add eax edi +
mov [ecx] eax +
lea ecx [esi+1A8h] +
mov eax [ecx] +
cdq   +
idiv  ebx +
lea edi [esi+1ACh] +
imul eax [ebp-4] +
inc eax  +
mov [ecx] eax +
mov ecx dword_102DF60 +
mov eax [edi] +
sub eax ecx +
cdq   +
idiv  ebx +
pop ebx  +
imul eax [ebp-4] +
lea eax [eax+ecx+1] +
mov [edi] eax +
jmp loc_101D448  +
test eax eax +
jz loc_101D448  +
cmp edi 1 +
jg loc_101D448  +
and dword ptr [esi+0D0h] 0 +
push dword ptr [ebp+10h]  +
mov ecx esi +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call ?OnSize@CMDIChildWnd@@IAEXIHH@Z  +
push 0  +
push 0  +
push dword ptr [esi+20h]  +
call ds:InvalidateRect  +
push dword ptr [esi+20h]  +
call ds:UpdateWindow  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
call __EH_prolog3  +
mov esi ecx +
lea ecx [ebp-1Ch] +
call ??0CDC@@QAE@XZ  +
and dword ptr [ebp-4] 0 +
push 0  +
call ds:GetDC  +
push eax  +
lea ecx [ebp-1Ch] +
call ?Attach@CDC@@QAEHPAUHDC__@@@Z  +
mov eax [esi+1A8h] +
sub eax [esi+1A0h] +
mov ecx [ebp+0Ch] +
sub ecx [esi+17Ch] +
mov edx [ebp+8] +
sub edx [esi+178h] +
mov edi ds:PatBlt +
mov ebx 5A0049h +
push ebx  +
push 2  +
push eax  +
push ecx  +
push edx  +
push dword ptr [ebp-18h]  +
call edi  +
mov ecx [esi+1ACh] +
mov eax [esi+1A8h] +
sub eax [esi+178h] +
sub ecx [esi+1A4h] +
mov edx [ebp+0Ch] +
sub eax [esi+1A0h] +
sub edx [esi+17Ch] +
add eax [ebp+8] +
push ebx  +
push ecx  +
push 2  +
push edx  +
push eax  +
push dword ptr [ebp-18h]  +
call edi  +
mov ecx [esi+1A8h] +
mov eax [esi+1ACh] +
sub ecx [esi+1A0h] +
sub eax [esi+1A4h] +
mov edx [ebp+8] +
sub eax [esi+17Ch] +
sub edx [esi+178h] +
add eax [ebp+0Ch] +
push ebx  +
push 2  +
inc ecx  +
inc ecx  +
push ecx  +
push eax  +
push edx  +
push dword ptr [ebp-18h]  +
call edi  +
mov eax [esi+1ACh] +
sub eax [esi+1A4h] +
mov ecx [ebp+0Ch] +
sub ecx [esi+17Ch] +
mov edx [ebp+8] +
sub edx [esi+178h] +
push ebx  +
dec eax  +
dec eax  +
push eax  +
inc ecx  +
push 2  +
inc ecx  +
push ecx  +
push edx  +
push dword ptr [ebp-18h]  +
call edi  +
lea ecx [ebp-1Ch] +
call ?Detach@CDC@@QAEPAUHDC__@@XZ  +
push eax  +
push 0  +
call ds:ReleaseDC  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ??1CDC@@UAE@XZ  +
call __EH_epilog3  +
retn 8  +
***
call sub_101C4D7  +
push 0  +
push 8014h  +
push 111h  +
push dword ptr [eax+20h]  +
call ds:SendMessageW  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 1Bh +
push esi  +
mov esi ecx +
jnz loc_101D5ED  +
lea eax [esi+0D0h] +
xor ecx ecx +
cmp [eax] ecx +
jz loc_101D5F2  +
push ecx  +
push ecx  +
push dword ptr [esi+20h]  +
mov [eax] ecx +
call ds:InvalidateRect  +
push dword ptr [esi+20h]  +
call ds:UpdateWindow  +
jmp loc_101D5F2  +
call ?Default@CWnd@@IAEJXZ  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101C9A4  +
test byte ptr [ebp+8] 1 +
jz loc_101D616  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+8]  +
mov esi ecx +
call ?OnCreate@CMDIChildWnd@@IAEHPAUtagCREATESTRUCTW@@@Z  +
cmp eax 0FFFFFFFFh +
jnz loc_101D63C  +
or eax 0FFFFFFFFh +
jmp loc_101D691  +
push 0FFFFFFECh  +
push dword ptr [esi+20h]  +
call ds:GetWindowLongW  +
mov ecx 400000h +
and eax ecx +
mov [esi+1F8h] eax +
jz loc_101D662  +
push 0  +
push 0  +
push ecx  +
mov ecx esi +
call ?ModifyStyleEx@CWnd@@QAEHKKI@Z  +
mov ecx esi +
call sub_101CA64  +
test eax eax +
jz loc_101D637  +
mov ecx esi +
call sub_101C51B  +
test eax eax +
jz loc_101D637  +
mov ecx esi +
call sub_101CB77  +
test eax eax +
jz loc_101D637  +
mov ecx esi +
call sub_101CBD2  +
neg eax  +
sbb eax eax +
neg eax  +
dec eax  +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
call ??0CMDIChildWnd@@QAE@XZ  +
xor edi edi +
lea ecx [esi+0DCh] +
mov [ebp-4] edi +
mov dword ptr [esi] offset off_1004534 +
call sub_101C96C  +
lea eax [esi+13Ch] +
mov [eax+4] edi +
mov dword ptr [eax] offset off_10021B4 +
lea ecx [esi+148h] +
mov byte ptr [ebp-4] 2 +
call ??0CDC@@QAE@XZ  +
lea eax [esi+1C0h] +
mov ecx offset off_10021CC +
mov [eax] ecx +
mov [eax+4] edi +
lea eax [esi+1C8h] +
mov [eax] ecx +
lea ecx [esi+1D0h] +
mov [eax+4] edi +
call sub_100D060  +
lea ecx [esi+1E4h] +
call sub_100D060  +
mov [esi+0D0h] edi +
mov [esi+158h] edi +
mov dword ptr [esi+0D8h] 7 +
mov dword ptr [esi+0C8h] 1 +
mov [esi+0D4h] edi +
mov [esi+1F8h] edi +
mov eax esi +
call __EH_epilog3  +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1004534 +
push dword ptr [esi+144h]  +
lea edi [esi+148h] +
mov ecx edi +
mov dword ptr [ebp-4] 7 +
call sub_100B87E  +
lea ebx [esi+13Ch] +
mov ecx ebx +
call ?Detach@CGdiObject@@QAEPAXXZ  +
test eax eax +
jz loc_101D798  +
mov ecx ebx +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
mov ecx edi +
call ?Detach@CDC@@QAEPAUHDC__@@XZ  +
test eax eax +
jz loc_101D7AA  +
mov ecx edi +
call ?DeleteDC@CDC@@QAEHXZ  +
mov ecx offset off_102CB58 +
call ?DestroyMenu@CMenu@@QAEHXZ  +
lea ecx [esi+1E4h] +
mov byte ptr [ebp-4] 6 +
call sub_100ED28  +
lea ecx [esi+1D0h] +
mov byte ptr [ebp-4] 5 +
call sub_100ED28  +
lea ecx [esi+1C8h] +
mov edi offset off_10021CC +
mov byte ptr [ebp-4] 4 +
mov [ecx] edi +
call sub_1007D75  +
lea ecx [esi+1C0h] +
mov byte ptr [ebp-4] 3 +
mov [ecx] edi +
call sub_1007D75  +
lea ecx [esi+148h] +
mov byte ptr [ebp-4] 2 +
call ??1CDC@@UAE@XZ  +
mov ecx ebx +
mov byte ptr [ebp-4] 1 +
mov dword ptr [ebx] offset off_10021B4 +
call sub_1007D75  +
lea ecx [esi+0DCh] +
mov byte ptr [ebp-4] 0 +
call sub_101C9A4  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1CFrameWnd@@UAE@XZ  +
call __EH_epilog3  +
retn   +
***
push 0A4h  +
mov eax offset byte_102851F +
call __EH_prolog3_GS  +
mov esi ecx +
lea ecx [ebp-84h] +
call ??0CString@@QAE@XZ  +
xor ebx ebx +
mov [ebp-4] ebx +
mov [ebp-78h] ebx +
mov dword ptr [ebp-7Ch] offset off_100219C +
push esi  +
lea ecx [ebp-70h] +
mov byte ptr [ebp-4] 1 +
call ??0CPaintDC@@QAE@PAVCWnd@@@Z  +
lea edi [esi+1B0h] +
push edi  +
mov ecx esi +
mov byte ptr [ebp-4] 2 +
call sub_1007E78  +
mov eax [esi+1B8h] +
cdq   +
idiv  dword_102DF5C +
push offset dword_102F4D0  +
lea ecx [ebp-7Ch] +
mov [esi+188h] eax +
mov eax dword_102DF58 +
mov dword_102F4D0 eax +
mov dword_102F4D4 ebx +
mov byte_102F4EA 2 +
call sub_100B71B  +
test eax eax +
jz loc_101DAB0  +
lea ecx [esi+148h] +
mov eax [ecx] +
lea edx [ebp-7Ch] +
push edx  +
mov [ebp-74h] ecx +
call dword ptr [eax+30h]  +
mov [ebp-0A0h] eax +
lea eax [esi+0CCh] +
movzx ecx word ptr [eax] +
cmp cx bx +
jz loc_101D9BF  +
mov al [eax] +
mov [ebp-1Ch] al +
mov eax [ebp-74h] +
shr ecx 8 +
mov [ebp-1Bh] cl +
cmp eax ebx +
jnz loc_101D907  +
xor eax eax +
jmp loc_101D90A  +
mov eax [eax+4] +
lea ecx [ebp-9Ch] +
push ecx  +
push 1  +
lea ecx [ebp-1Ch] +
push ecx  +
push eax  +
call ds:GetTextExtentPoint32W  +
push dword_102DF58  +
lea eax [ebp-0B0h] +
push dword_102DF5C  +
push ebx  +
push ebx  +
push eax  +
call ds:SetRect  +
mov ecx dword_102DF5C +
cmp [ebp-9Ch] ecx +
jge loc_101D95F  +
mov eax dword_102DF58 +
sub eax [ebp-9Ch] +
cdq   +
sub eax edx +
sar eax 1 +
movzx eax ax +
mov [ebp-80h] eax +
jmp loc_101D962  +
mov [ebp-80h] ebx +
mov eax dword_102DF58 +
cmp [ebp-98h] eax +
jge loc_101D981  +
mov eax ecx +
sub eax [ebp-98h] +
cdq   +
sub eax edx +
sar eax 1 +
movzx ecx ax +
jmp loc_101D983  +
xor ecx ecx +
cmp word_102F4EC 40h +
jnz loc_101D992  +
xor ecx ecx +
mov [ebp-80h] ebx +
mov eax [ebp-74h] +
cmp eax ebx +
jnz loc_101D99D  +
xor eax eax +
jmp loc_101D9A0  +
mov eax [eax+4] +
push ebx  +
push 1  +
lea edx [ebp-1Ch] +
push edx  +
lea edx [ebp-0B0h] +
push edx  +
movsx ecx cx +
push 2  +
push ecx  +
movsx ecx word ptr [ebp-80h] +
push ecx  +
push eax  +
call sub_1025B3F  +
mov ecx [edi+0Ch] +
sub ecx [edi+4] +
mov eax dword_102DF60 +
push 0CC0020h  +
push dword_102DF58  +
sub ecx eax +
push dword_102DF5C  +
push ebx  +
push ebx  +
push dword ptr [ebp-74h]  +
push ecx  +
mov ecx [edi+8] +
sub ecx [edi] +
push ecx  +
push eax  +
push ebx  +
lea ecx [ebp-70h] +
call sub_100BAA0  +
push edi  +
lea eax [ebp-94h] +
push eax  +
call ds:CopyRect  +
mov eax dword_102DF60 +
push 2  +
add eax 0FFFFFFFEh +
pop edi  +
mov [ebp-90h] edi +
mov [ebp-88h] eax +
cmp [esi+1F8h] ebx +
jz loc_101DA38  +
add [ebp-94h] edi +
mov ecx [ebp-94h] +
lea eax [ecx+eax-4] +
mov [ebp-8Ch] eax +
jmp loc_101DA4E  +
mov ecx [ebp-8Ch] +
sub ecx edi +
mov [ebp-8Ch] ecx +
sub ecx eax +
mov [ebp-94h] ecx +
push 1  +
push ebx  +
push ebx  +
push edi  +
push dword ptr [ebp-94h]  +
lea ecx [esi+0DCh] +
push ebx  +
call ?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z  +
mov ecx esi +
call sub_101CC5B  +
cmp [esi+0D0h] ebx +
jz loc_101DA7F  +
lea eax [ebp-70h] +
push eax  +
mov ecx esi +
call sub_101CDD4  +
cmp [esi+0C8h] ebx +
jz loc_101DA9A  +
cmp [esi+188h] edi +
jl loc_101DA9A  +
lea eax [ebp-70h] +
push eax  +
mov ecx esi +
call near ptr dword_101C53C+5  +
mov ecx [ebp-74h] +
push dword ptr [ebp-0A0h]  +
mov eax [ecx] +
call dword ptr [eax+30h]  +
lea ecx [ebp-7Ch] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea ecx [ebp-70h] +
mov byte ptr [ebp-4] 1 +
call ??1CPaintDC@@UAE@XZ  +
lea ecx [ebp-7Ch] +
mov [ebp-4] bl +
mov dword ptr [ebp-7Ch] offset off_100219C +
call sub_1007D75  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-84h] +
call ??1CString@@QAE@XZ  +
call sub_1026DAC  +
retn   +
***
push 4  +
mov eax offset __ehhandler$?CallUnexpected@@YAXPBU_s_ESTypeList@@@Z_6 +
call __EH_prolog3  +
push 1FCh  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_101DB69  +
call sub_101D69B  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101D74F  +
test byte ptr [ebp+8] 1 +
jz loc_101DB8E  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push esi  +
mov esi ecx +
lea eax [esi+1B0h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
call ds:CopyRect  +
push dword ptr [ebp+10h]  +
mov eax dword_102DF60 +
push dword ptr [ebp+0Ch]  +
mov [ebp-18h] eax +
lea eax [ebp-1Ch] +
push eax  +
call ds:PtInRect  +
test eax eax +
jz loc_101DD19  +
push ebx  +
push edi  +
push dword ptr [esi+20h]  +
xor ebx ebx +
inc ebx  +
mov [esi+158h] ebx +
call ds:SetCapture  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
push dword ptr [ebp+10h]  +
mov ecx esi +
push dword ptr [ebp+0Ch]  +
call sub_101C631  +
cmp dword ptr [esi+0D0h] 0 +
jz loc_101DC9D  +
push dword ptr [ebp+10h]  +
lea edi [esi+1A0h] +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
call sub_100B5EE  +
and dword ptr [esi+0D0h] 0 +
push 0  +
push edi  +
push dword ptr [esi+20h]  +
test eax eax +
jz loc_101DC8E  +
call ds:InvalidateRect  +
push dword ptr [esi+20h]  +
call ds:UpdateWindow  +
mov eax [ebp+0Ch] +
sub eax [edi] +
mov [esi+0D0h] ebx +
mov [esi+178h] eax +
mov eax [ebp+10h] +
sub eax [esi+1A4h] +
mov [esi+17Ch] eax +
lea eax [ebp+0Ch] +
push eax  +
push dword ptr [esi+20h]  +
call ds:ClientToScreen  +
push dword ptr [ebp+10h]  +
mov ecx esi +
push dword ptr [ebp+0Ch]  +
call sub_101D479  +
mov eax [ebp+0Ch] +
mov [esi+180h] eax +
mov eax [ebp+10h] +
mov [esi+184h] eax +
jmp loc_101DD17  +
call ds:InvalidateRect  +
push dword ptr [esi+20h]  +
call ds:UpdateWindow  +
cmp dword ptr [esi+0D8h] 7 +
jnz loc_101DCB0  +
push ebx  +
mov ecx esi +
call sub_101D0B7  +
jmp loc_101DD17  +
mov eax [esi+160h] +
mov edi [esi+164h] +
add edi dword_102DF60 +
push 0FFFFFFFFh  +
lea ebx [esi+1D0h] +
push 0  +
mov ecx ebx +
mov [ebp-0Ch] eax +
call sub_100ED88  +
push 0FFFFFFFFh  +
lea ecx [esi+1E4h] +
push 0  +
mov [ebp-4] ecx +
call sub_100ED88  +
push edi  +
push dword ptr [ebp-0Ch]  +
mov ecx ebx +
call sub_100FDD7  +
mov eax [esi+160h] +
mov ecx [esi+188h] +
cdq   +
idiv  ecx +
mov edi eax +
mov eax [esi+164h] +
cdq   +
idiv  ecx +
mov ecx [ebp-4] +
push eax  +
push edi  +
call sub_100FDD7  +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
cmp [ebp+arg_0] 0 +
push ebx  +
push esi  +
mov esi [ecx+188h] +
push edi  +
jnz loc_101DD64  +
mov eax [ecx+170h] +
cdq   +
idiv  esi +
mov edi eax +
mov eax [ecx+174h] +
cdq   +
idiv  esi +
mov ebx eax +
mov eax [ecx+168h] +
cdq   +
idiv  esi +
mov [ebp+var_14] eax +
mov eax [ecx+16Ch] +
jmp loc_101DD8C  +
mov eax [ecx+168h] +
cdq   +
idiv  esi +
mov edi eax +
mov eax [ecx+16Ch] +
cdq   +
idiv  esi +
mov ebx eax +
mov eax [ecx+160h] +
cdq   +
idiv  esi +
mov [ebp+var_14] eax +
mov eax [ecx+164h] +
cdq   +
idiv  esi +
mov edx [ebp+var_14] +
mov [ebp+var_10] eax +
xor eax eax +
cmp edx edi +
setnl al  +
lea eax [eax+eax-1] +
mov [ebp+var_C] eax +
xor eax eax +
cmp [ebp+var_10] ebx +
setnl al  +
sub edx edi +
imul edx [ebp+var_C] +
lea eax [eax+eax-1] +
mov [ebp+var_8] eax +
mov eax [ebp+var_10] +
sub eax ebx +
imul eax [ebp+var_8] +
test edx edx +
jnz loc_101DDCD  +
test eax eax +
jz loc_101DE4E  +
cmp edx eax +
jge loc_101DDF2  +
mov esi eax +
mov eax edx +
mov edx esi +
mov esi [ebp+var_C] +
mov [ebp+arg_0] esi +
mov esi [ebp+var_8] +
mov [ebp+var_C] esi +
mov esi [ebp+arg_0] +
mov [ebp+var_8] esi +
mov [ebp+arg_0] 1 +
jmp loc_101DDF6  +
and [ebp+arg_0] 0 +
lea esi [eax+eax] +
sub eax edx +
mov [ebp+var_1C] esi +
add eax eax +
sub esi edx +
add ecx 1E4h +
mov [ebp+var_18] eax +
mov [ebp+var_4] ecx +
mov ecx [ebp+var_4] +
push ebx  +
push edi  +
call sub_100FDD7  +
cmp edi [ebp+var_14] +
jnz loc_101DE22  +
cmp ebx [ebp+var_10] +
jz loc_101DE4E  +
cmp [ebp+arg_0] 0 +
jz loc_101DE2E  +
mov eax edi +
mov edi ebx +
mov ebx eax +
add edi [ebp+var_C] +
test esi esi +
jge loc_101DE3A  +
add esi [ebp+var_1C] +
jmp loc_101DE40  +
add ebx [ebp+var_8] +
add esi [ebp+var_18] +
cmp [ebp+arg_0] 0 +
jz loc_101DE0E  +
mov eax edi +
mov edi ebx +
mov ebx eax +
jmp loc_101DE0E  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
call __EH_prolog3  +
mov edi ecx +
push edi  +
lea ecx [ebp-64h] +
call ??0CClientDC@@QAE@PAVCWnd@@@Z  +
and dword ptr [ebp-4] 0 +
push 7  +
lea ecx [ebp-64h] +
call ?SelectStockObject@CDC@@UAEPAVCGdiObject@@H@Z  +
push 0Ah  +
lea ecx [ebp-64h] +
mov [ebp-14h] eax +
call ?SetROP2@CDC@@QAEHH@Z  +
cmp dword ptr [ebp+8] 0 +
mov [ebp-18h] eax +
jnz loc_101DEC1  +
mov eax dword_102DF60 +
mov esi [edi+174h] +
mov edx [edi+16Ch] +
mov ebx [edi+170h] +
mov ecx [edi+168h] +
add esi eax +
add edx eax +
mov [ebp-40h] ebx +
mov [ebp-38h] ecx +
mov [ebp-34h] edx +
jmp loc_101DEF0  +
mov eax [edi+168h] +
mov ecx [edi+160h] +
mov esi [edi+16Ch] +
mov [ebp-40h] eax +
mov eax dword_102DF60 +
mov ebx [ebp-40h] +
mov [ebp-38h] ecx +
mov ecx [edi+164h] +
add esi eax +
add ecx eax +
mov [ebp-34h] ecx +
mov edx ecx +
cmp [ebp-38h] ebx +
mov eax [edi+188h] +
jl loc_101DF00  +
mov [ebp-30h] eax +
jmp loc_101DF07  +
mov ecx eax +
neg ecx  +
mov [ebp-30h] ecx +
cmp edx esi +
jge loc_101DF0D  +
neg eax  +
mov ecx [ebp-38h] +
sub ecx ebx +
imul ecx [ebp-30h] +
mov [ebp-2Ch] eax +
mov eax edx +
sub eax esi +
imul eax [ebp-2Ch] +
test ecx ecx +
jnz loc_101DF2D  +
test eax eax +
jz loc_101E059  +
cmp ecx eax +
jge loc_101DF52  +
mov edx eax +
mov eax ecx +
mov ecx edx +
mov edx [ebp-30h] +
mov [ebp+8] edx +
mov edx [ebp-2Ch] +
mov [ebp-30h] edx +
mov edx [ebp+8] +
mov [ebp-2Ch] edx +
mov dword ptr [ebp-10h] 1 +
jmp loc_101DF56  +
and dword ptr [ebp-10h] 0 +
lea edx [eax+eax] +
sub eax ecx +
add eax eax +
mov [ebp-44h] eax +
mov eax edx +
sub eax ecx +
push esi  +
mov [ebp+8] eax +
push ebx  +
lea eax [ebp-50h] +
push eax  +
lea ecx [ebp-64h] +
mov [ebp-48h] edx +
mov [ebp-1Ch] esi +
call ?MoveTo@CDC@@QAE?AVCPoint@@HH@Z  +
mov ecx [ebp-40h] +
cmp ecx ebx +
jz loc_101DFD0  +
mov eax [ebp-1Ch] +
cmp esi eax +
jz loc_101DFD8  +
jge loc_101DF99  +
cmp ecx ebx +
jg loc_101DF91  +
jge loc_101DF99  +
mov [ebp-28h] ecx +
mov [ebp-24h] eax +
jmp loc_101DF9F  +
mov [ebp-28h] ebx +
mov [ebp-24h] esi +
push dword ptr [ebp-24h]  +
lea ecx [ebp-64h] +
push dword ptr [ebp-28h]  +
call ?LineTo@CDC@@QAEHHH@Z  +
push dword ptr [ebp-1Ch]  +
lea ecx [ebp-64h] +
push ebx  +
call ?LineTo@CDC@@QAEHHH@Z  +
push dword ptr [ebp-24h]  +
lea esi [edi+1D0h] +
push dword ptr [ebp-28h]  +
mov ecx esi +
call sub_100FDD7  +
mov ecx esi +
jmp loc_101DFE8  +
cmp esi [ebp-1Ch] +
jz loc_101DFF1  +
mov eax [ebp-1Ch] +
push eax  +
push ebx  +
lea ecx [ebp-64h] +
call ?LineTo@CDC@@QAEHHH@Z  +
lea ecx [edi+1D0h] +
push dword ptr [ebp-1Ch]  +
push ebx  +
call sub_100FDD7  +
mov esi [ebp-1Ch] +
mov [ebp-40h] ebx +
cmp ebx [ebp-38h] +
jnz loc_101E003  +
mov eax esi +
cmp eax [ebp-34h] +
jz loc_101E043  +
cmp dword ptr [ebp-10h] 0 +
jz loc_101E011  +
mov eax ebx +
mov ebx [ebp-1Ch] +
mov [ebp-1Ch] eax +
mov eax [ebp+8] +
add ebx [ebp-30h] +
test eax eax +
jge loc_101E020  +
add eax [ebp-48h] +
jmp loc_101E029  +
mov ecx [ebp-2Ch] +
add [ebp-1Ch] ecx +
add eax [ebp-44h] +
cmp dword ptr [ebp-10h] 0 +
mov [ebp+8] eax +
jz loc_101DF7B  +
mov eax ebx +
mov ebx [ebp-1Ch] +
mov [ebp-1Ch] eax +
jmp loc_101DF7B  +
push dword ptr [ebp-14h]  +
lea ecx [ebp-64h] +
call ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z  +
push dword ptr [ebp-18h]  +
lea ecx [ebp-64h] +
call ?SetROP2@CDC@@QAEHH@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-64h] +
call ??1CClientDC@@UAE@XZ  +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+158h] edi +
jz loc_101E10D  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_101C6FD  +
mov eax [esi+168h] +
cmp eax [esi+170h] +
jnz loc_101E0B0  +
mov eax [esi+16Ch] +
cmp eax [esi+174h] +
jz loc_101E10D  +
cmp [esi+0D0h] edi +
jz loc_101E0ED  +
lea eax [ebp+0Ch] +
push eax  +
push dword ptr [esi+20h]  +
call ds:ClientToScreen  +
lea edi [esi+180h] +
push dword ptr [edi+4]  +
mov ecx esi +
push dword ptr [edi]  +
call sub_101D479  +
mov ecx [ebp+10h] +
mov eax [ebp+0Ch] +
push ecx  +
mov [edi+4] ecx +
push eax  +
mov ecx esi +
mov [edi] eax +
call sub_101D479  +
jmp loc_101E10D  +
cmp dword ptr [esi+0D8h] 7 +
push edi  +
mov ecx esi +
jnz loc_101E100  +
call sub_101D0B7  +
jmp loc_101E10D  +
call sub_101DE5A  +
push edi  +
mov ecx esi +
call sub_101DD23  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFFFh  +
push offset dword_1028564  +
mov eax large fs:0 +
push eax  +
mov eax 3EBCh +
call __alloca_probe  +
push ebx  +
push esi  +
push edi  +
mov eax dword_102CD74 +
xor eax ebp +
push eax  +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
mov esi ecx +
lea eax [esi+0D4h] +
xor ebx ebx +
cmp [eax] ebx +
jnz loc_101E178  +
mov dword ptr [eax] 1 +
call sub_101CC5B  +
mov eax dword_102EE1C +
mov [eax+2C4h] ebx +
mov ecx dword_102EE1C +
call sub_100D995  +
cmp [esi+158h] ebx +
jz loc_101E6D7  +
push dword ptr [ebp+10h]  +
mov ecx esi +
push dword ptr [ebp+0Ch]  +
call sub_101C6FD  +
mov ecx esi +
cmp [esi+0D0h] ebx +
jz loc_101E421  +
push dword ptr [esi+184h]  +
push dword ptr [esi+180h]  +
call sub_101D479  +
lea edi [esi+1A0h] +
push edi  +
lea eax [ebp-48h] +
push eax  +
call ds:CopyRect  +
mov eax [esi+160h] +
sub eax [edi] +
mov [ebp-48h] eax +
mov eax [esi+164h] +
sub eax [esi+1A4h] +
add eax dword_102DF60 +
mov [ebp-44h] eax +
mov eax [edi+8] +
sub eax [edi] +
mov [ebp-40h] eax +
mov eax [edi+0Ch] +
sub eax [edi+4] +
mov [ebp-3Ch] eax +
lea eax [ebp+0Ch] +
push eax  +
push dword ptr [esi+20h]  +
call ds:ClientToScreen  +
push ebx  +
push 1  +
push 1  +
push dword_102DF58  +
mov ecx offset off_102CB50 +
push dword_102DF5C  +
call sub_100B76B  +
lea eax [ebp-14h] +
push eax  +
push dword_102DF5C  +
call sub_100B348  +
test eax eax +
jl loc_101E6DD  +
lea eax [ebp-18h] +
push eax  +
push dword_102DF58  +
call sub_100B348  +
test eax eax +
jl loc_101E6DD  +
lea eax [ebp-14h] +
push eax  +
push 0Fh  +
push dword ptr [ebp-14h]  +
call sub_100B371  +
test eax eax +
jl loc_101E6DD  +
mov eax [ebp-14h] +
shr eax 3 +
mul  dword ptr [ebp-18h] +
lea ecx [ebp-10h] +
push ecx  +
push edx  +
push eax  +
call sub_1011467  +
test eax eax +
jl loc_101E6DD  +
push dword ptr [ebp-10h]  +
call ds:malloc  +
cmp dword ptr [esi+0D8h] 9 +
pop ecx  +
mov [ebp-18h] eax +
jnz loc_101E3C0  +
mov [ebp-1Ch] ebx +
mov dword ptr [ebp-20h] offset off_10021B4 +
lea ecx [ebp-38h] +
mov [ebp-4] ebx +
call ??0CDC@@QAE@XZ  +
mov [ebp-24h] ebx +
mov dword ptr [ebp-28h] offset off_1001A8C +
lea eax [esi+148h] +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 2 +
call sub_100B853  +
push dword_102DF58  +
lea eax [esi+148h] +
push dword_102DF5C  +
lea ecx [ebp-20h] +
push eax  +
call sub_100B7D4  +
lea eax [ebp-20h] +
push eax  +
lea ecx [ebp-38h] +
call sub_100B87E  +
push 0FF0062h  +
push dword_102DF58  +
mov [ebp-14h] eax +
push dword_102DF5C  +
push ebx  +
push ebx  +
push dword ptr [ebp-34h]  +
call ds:PatBlt  +
push 4  +
lea ecx [ebp-28h] +
call sub_100B666  +
lea eax [ebp-28h] +
push eax  +
lea eax [esi+1C8h] +
push eax  +
lea ecx [ebp-38h] +
call sub_100B89F  +
lea ecx [ebp-28h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea eax [esi+148h] +
cmp eax ebx +
jnz loc_101E33F  +
xor eax eax +
jmp loc_101E342  +
mov eax [eax+4] +
push 0EE0086h  +
push ebx  +
push ebx  +
push eax  +
push dword_102DF58  +
push dword_102DF5C  +
push ebx  +
push ebx  +
push dword ptr [ebp-34h]  +
call ds:BitBlt  +
push dword ptr [ebp-18h]  +
push dword ptr [ebp-10h]  +
push dword ptr [ebp-1Ch]  +
call ds:GetBitmapBits  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-38h] +
call sub_101C90C  +
lea ecx [ebp-20h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea ecx [ebp-38h] +
call ?DeleteDC@CDC@@QAEHXZ  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 1 +
mov dword ptr [ebp-28h] offset off_1001A8C +
call sub_1007D75  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 0 +
call ??1CDC@@UAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
mov dword ptr [ebp-20h] offset off_10021B4 +
call sub_1007D75  +
jmp loc_101E3CF  +
push eax  +
push dword ptr [ebp-10h]  +
lea ecx [esi+13Ch] +
call sub_100B7B7  +
push dword ptr [ebp-18h]  +
push dword ptr [ebp-10h]  +
push dword_102CB54  +
call ds:SetBitmapBits  +
push dword ptr [ebp-18h]  +
call ds:free  +
pop ecx  +
push edi  +
push offset dword_102F52C  +
call ds:CopyRect  +
call sub_101C4D7  +
lea ecx [ebp+0Ch] +
push ecx  +
lea ecx [ebp-48h] +
push ecx  +
push 402h  +
push dword ptr [eax+20h]  +
call ds:SendMessageW  +
mov ecx offset off_102CB50 +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
jmp loc_101E6D1  +
cmp dword ptr [esi+0D8h] 7 +
jnz loc_101E507  +
lea edi [esi+168h] +
push edi  +
lea ebx [esi+160h] +
push ebx  +
call sub_101C8B6  +
mov eax dword_102DF60 +
mov ecx [esi+188h] +
mov edx [esi+16Ch] +
add ecx eax +
lea ecx [ecx+edx+1] +
mov edx [esi+188h] +
push ecx  +
mov ecx [edi] +
lea ecx [edx+ecx+1] +
push ecx  +
mov ecx [esi+164h] +
add ecx eax +
push ecx  +
push dword ptr [ebx]  +
lea ecx [esi+1A0h] +
call sub_100B609  +
mov eax [edi] +
sub eax [ebx] +
mov ecx [esi+188h] +
cdq   +
xor eax edx +
add ecx ecx +
sub eax edx +
cmp eax ecx +
jl loc_101E4B0  +
mov eax [esi+16Ch] +
sub eax [esi+164h] +
cdq   +
xor eax edx +
sub eax edx +
cmp eax ecx +
jl loc_101E4B0  +
mov dword ptr [esi+0D0h] 1 +
push 0  +
lea eax [esi+1A0h] +
push eax  +
push dword ptr [esi+20h]  +
call ds:InvalidateRect  +
push dword ptr [esi+20h]  +
call ds:UpdateWindow  +
mov ecx [esi+188h] +
mov eax [esi+16Ch] +
add eax ecx +
cdq   +
idiv  ecx +
push eax  +
mov eax [edi] +
add eax ecx +
cdq   +
idiv  ecx +
push eax  +
mov eax [esi+164h] +
cdq   +
idiv  ecx +
push eax  +
mov eax [ebx] +
cdq   +
idiv  ecx +
lea ecx [esi+190h] +
push eax  +
call sub_100B609  +
xor ebx ebx +
jmp loc_101E6D1  +
push ebx  +
call sub_101DE5A  +
push ebx  +
mov ecx esi +
call sub_101DD23  +
push 1  +
mov ecx esi +
call sub_101DE5A  +
push 1  +
mov ecx esi +
call sub_101DD23  +
mov ecx [esi+1D8h] +
mov edx [esi+1ECh] +
mov eax 3E8h +
mov [ebp-14h] ecx +
mov [ebp-18h] edx +
cmp ecx eax +
jnb loc_101E6EF  +
cmp edx eax +
jnb loc_101E6EF  +
cmp ecx ebx +
mov [ebp-10h] ebx +
jle loc_101E581  +
lea edi [ebp-1F88h] +
push dword ptr [ebp-10h]  +
lea ecx [esi+1D0h] +
call loc_100D07C  +
mov ecx [eax] +
inc dword ptr [ebp-10h]  +
mov [edi] ecx +
mov eax [eax+4] +
mov [edi+4] eax +
mov eax [ebp-10h] +
add edi 8 +
cmp eax [ebp-14h] +
jl loc_101E55B  +
cmp [ebp-18h] ebx +
mov [ebp-10h] ebx +
jle loc_101E5B5  +
lea edi [ebp-3EC8h] +
push dword ptr [ebp-10h]  +
lea ecx [esi+1E4h] +
call loc_100D07C  +
mov ecx [eax] +
inc dword ptr [ebp-10h]  +
mov [edi] ecx +
mov eax [eax+4] +
mov [edi+4] eax +
mov eax [ebp-10h] +
add edi 8 +
cmp eax [ebp-18h] +
jl loc_101E58F  +
lea edi [esi+1C0h] +
cmp edi ebx +
jz loc_101E5CB  +
cmp [edi+4] ebx +
jz loc_101E5CB  +
mov ecx edi +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea ecx [esi+1C8h] +
cmp ecx ebx +
jz loc_101E5DF  +
cmp [ecx+4] ebx +
jz loc_101E5DF  +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
push 1  +
push dword ptr [ebp-14h]  +
lea eax [ebp-1F88h] +
push eax  +
mov ecx edi +
call sub_100B810  +
push 1  +
push dword ptr [ebp-18h]  +
lea eax [ebp-3EC8h] +
push eax  +
lea ecx [esi+1C8h] +
call sub_100B810  +
cmp edi ebx +
jz loc_101E6B5  +
cmp [edi+4] ebx +
jz loc_101E6B5  +
lea eax [esi+1C8h] +
cmp eax ebx +
jz loc_101E6B5  +
cmp [eax+4] ebx +
jz loc_101E6B5  +
lea eax [esi+1A0h] +
push eax  +
mov ecx edi +
mov dword ptr [esi+0D0h] 1 +
call sub_100B839  +
lea edi [esi+190h] +
push edi  +
lea ecx [esi+1C8h] +
call sub_100B839  +
mov eax [edi+8] +
sub eax [edi] +
cmp eax 3 +
jl loc_101E670  +
mov eax [edi+0Ch] +
sub eax [edi+4] +
cmp eax 3 +
jge loc_101E68C  +
lea ecx [esi+1C0h] +
mov [esi+0D0h] ebx +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea ecx [esi+1C8h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
inc dword ptr [esi+1A8h]  +
inc dword ptr [esi+1ACh]  +
push 1  +
lea eax [esi+1A0h] +
push eax  +
push dword ptr [esi+20h]  +
call ds:InvalidateRect  +
push dword ptr [esi+20h]  +
call ds:UpdateWindow  +
jmp loc_101E6D1  +
push 0FFFFFFFFh  +
push ebx  +
lea ecx [esi+1D0h] +
call sub_100ED88  +
push 0FFFFFFFFh  +
push ebx  +
lea ecx [esi+1E4h] +
call sub_100ED88  +
mov [esi+158h] ebx +
call ds:ReleaseCapture  +
mov ecx [ebp-0Ch] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov [esi+158h] ebx +
call ds:ReleaseCapture  +
push ebx  +
push ebx  +
push dword ptr [esi+20h]  +
call ds:InvalidateRect  +
push dword ptr [esi+20h]  +
call ds:UpdateWindow  +
jmp loc_101E6DD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 210h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_101E737  +
xor eax eax +
jmp loc_101E766  +
push edi  +
push 104h  +
lea eax [ebp+String1] +
push eax  +
call ds:GetSystemWindowsDirectoryW  +
mov edi eax +
push esi  +
lea eax [ebp+String1] +
push eax  +
call ds:lstrcmpiW  +
test eax eax +
jnz loc_101E763  +
lea eax [esi+edi*2] +
jmp loc_101E765  +
xor eax eax +
pop edi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1026CC5  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
test eax eax +
jz loc_101E854  +
cmp [ebp+lpString2] 0 +
jz loc_101E854  +
and dword ptr [eax] 0 +
mov esi ds:CompareStringW +
or ebx 0FFFFFFFFh +
push ebx  +
push [ebp+lpString2]  +
mov edi 409h +
push ebx  +
push lpString1  +
push 1  +
push edi  +
call esi  +
test eax eax +
jz loc_101E854  +
cmp eax 2 +
jnz loc_101E7CC  +
mov eax off_102CB80 +
jmp loc_101E84A  +
push ebx  +
push [ebp+lpString2]  +
push ebx  +
push off_102CB70  +
push 1  +
push edi  +
call esi  +
test eax eax +
jz loc_101E854  +
cmp eax 2 +
jnz loc_101E7EC  +
mov eax off_102CB84 +
jmp loc_101E84A  +
push ebx  +
push [ebp+lpString2]  +
push ebx  +
push off_102CB74  +
push 1  +
push edi  +
call esi  +
test eax eax +
jz loc_101E854  +
cmp eax 2 +
jnz loc_101E80C  +
mov eax off_102CB88 +
jmp loc_101E84A  +
push ebx  +
push [ebp+lpString2]  +
push ebx  +
push off_102CB78  +
push 1  +
push edi  +
call esi  +
test eax eax +
jz loc_101E854  +
cmp eax 2 +
jnz loc_101E82C  +
mov eax off_102CB8C +
jmp loc_101E84A  +
push ebx  +
push [ebp+lpString2]  +
push ebx  +
push off_102CB7C  +
push 1  +
push edi  +
call esi  +
test eax eax +
jz loc_101E854  +
cmp eax 2 +
jnz loc_101E854  +
mov eax off_102CB90 +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
xor eax eax +
inc eax  +
jmp loc_101E856  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
lea eax [ebp+hKey] +
push eax  +
push 2  +
push 0  +
mov edi offset SubKey +
push edi  +
mov esi 80000001h +
push esi  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_101E89B  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
push edi  +
push esi  +
call ds:RegDeleteKeyW  +
jmp loc_101E89E  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:wcschr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_101E8C3  +
xor ecx ecx +
mov [eax] cx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+lpString1] +
test edi edi +
jz loc_101E940  +
push ebx  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jz loc_101E93F  +
push esi  +
mov esi ds:lstrcmpW +
push offset String2  +
push edi  +
call esi  +
test eax eax +
jnz loc_101E8FB  +
push offset aSimsun  +
jmp loc_101E935  +
push offset word_10047F4  +
push edi  +
call esi  +
test eax eax +
jnz loc_101E90E  +
push offset aPmingliu  +
jmp loc_101E935  +
push offset word_10047CC  +
push edi  +
call esi  +
test eax eax +
jnz loc_101E921  +
push offset aMsPgothic  +
jmp loc_101E935  +
push offset aTn  +
push edi  +
call esi  +
test eax eax +
jnz loc_101E934  +
push offset aGulim  +
jmp loc_101E935  +
push edi  +
push [ebp+arg_8]  +
push ebx  +
call sub_1008286  +
pop esi  +
pop ebx  +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 298h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_101E9B3  +
test esi esi +
jz loc_101E9B3  +
mov ebx 104h +
cmp [ebp+nSize] ebx +
jl loc_101E9B3  +
push 20h  +
push 0EF42h  +
lea eax [ebp+String2] +
push eax  +
call sub_10245AD  +
lea eax [ebp+String2] +
push eax  +
push edi  +
call ds:lstrcmpW  +
test eax eax +
lea eax [ebp+ValueName] +
jnz loc_101E9C6  +
push offset aSystemdefaulte  +
push 20h  +
push eax  +
call sub_1008286  +
test eax eax +
jge loc_101E9CF  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1026CC5  +
leave   +
retn 0Ch  +
push 20h  +
push eax  +
push edi  +
call sub_101E8CC  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push 0  +
push offset SubKey  +
push 80000001h  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_101E9B3  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Src] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push 0  +
lea eax [ebp+ValueName] +
push eax  +
push [ebp+hKey]  +
mov [ebp+cbData] 208h +
call ds:RegQueryValueExW  +
push [ebp+hKey]  +
mov edi eax +
call ds:RegCloseKey  +
test edi edi +
jnz loc_101E9B3  +
cmp [ebp+Src] di +
jz loc_101E9B3  +
mov edi [ebp+nSize] +
push edi  +
push esi  +
lea eax [ebp+Src] +
push eax  +
call ds:ExpandEnvironmentStringsW  +
cmp word ptr [esi+2] 3Ah +
jnz loc_101EA70  +
push offset word_1002830  +
push esi  +
call ds:wcsstr  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_101EAC8  +
push esi  +
push ebx  +
lea eax [ebp+Src] +
push eax  +
call sub_1008286  +
test eax eax +
jl loc_101E9B3  +
push edi  +
push esi  +
call ds:GetSystemWindowsDirectoryW  +
test eax eax +
jz loc_101E9B3  +
cmp eax edi +
jge loc_101E9B3  +
push offset aFonts  +
push edi  +
push esi  +
call sub_10082C0  +
test eax eax +
jl loc_101E9B3  +
lea eax [ebp+Src] +
push eax  +
push edi  +
push esi  +
call sub_10082C0  +
test eax eax +
jl loc_101E9B3  +
xor eax eax +
inc eax  +
jmp loc_101E9B5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 290h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
test esi esi +
jz loc_101EB34  +
test ebx ebx +
jz loc_101EB34  +
push 20h  +
push 0EF42h  +
lea eax [ebp+String2] +
push eax  +
call sub_10245AD  +
lea eax [ebp+String2] +
push eax  +
push esi  +
call ds:lstrcmpW  +
test eax eax +
lea eax [ebp+ValueName] +
jnz loc_101EB47  +
push offset aSystemdefaulte  +
push 20h  +
push eax  +
call sub_1008286  +
test eax eax +
jge loc_101EB50  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1026CC5  +
leave   +
retn 8  +
push 20h  +
push eax  +
push esi  +
call sub_101E8CC  +
lea eax [ebp+hKey] +
push eax  +
push 2001Bh  +
push 0  +
push offset SubKey  +
push 80000001h  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_101EB34  +
push ebx  +
call sub_101E716  +
mov edi eax +
lea eax [ebp+Data] +
test edi edi +
jz loc_101EC1A  +
push offset aSystemroot  +
mov esi 104h +
push esi  +
push eax  +
call sub_1008286  +
test eax eax +
jl loc_101EB34  +
cmp word ptr [edi] 5Ch +
jz loc_101EBBD  +
push offset word_1002830  +
push esi  +
lea eax [ebp+Data] +
push eax  +
call sub_10082C0  +
test eax eax +
jl loc_101EB34  +
push edi  +
push esi  +
lea eax [ebp+Data] +
push eax  +
call sub_10082C0  +
test eax eax +
jl loc_101EB34  +
lea eax [ebp+Data] +
push eax  +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
push eax  +
lea eax [ebp+Data] +
push eax  +
push 1  +
push 0  +
lea eax [ebp+ValueName] +
push eax  +
push [ebp+hKey]  +
call ds:RegSetValueExW  +
push [ebp+hKey]  +
mov esi eax +
call ds:RegCloseKey  +
xor eax eax +
test esi esi +
setz al  +
jmp loc_101EB36  +
push ebx  +
push 104h  +
push eax  +
call sub_1008286  +
jmp loc_101EBCB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 88h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_101EC51  +
xor eax eax +
jmp loc_101ECD9  +
push 20h  +
push 0EF42h  +
lea eax [ebp+String2] +
push eax  +
call sub_10245AD  +
lea eax [ebp+String2] +
push eax  +
push esi  +
call ds:lstrcmpW  +
test eax eax +
lea eax [ebp+ValueName] +
jnz loc_101EC8C  +
push offset aSystemdefaulte  +
push 20h  +
push eax  +
call sub_1008286  +
test eax eax +
jge loc_101EC95  +
jmp loc_101EC4A  +
push 20h  +
push eax  +
push esi  +
call sub_101E8CC  +
lea eax [ebp+hKey] +
push eax  +
push 2  +
push 0  +
push offset SubKey  +
push 80000001h  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_101EC4A  +
lea eax [ebp+ValueName] +
push eax  +
push [ebp+hKey]  +
call ds:RegDeleteValueW  +
push [ebp+hKey]  +
mov esi eax +
call ds:RegCloseKey  +
xor eax eax +
test esi esi +
setz al  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1026CC5  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
call ds:GetACP  +
push eax  +
push offset aD  +
lea eax [ebp+var_18] +
push 0Ah  +
push eax  +
call sub_1011E02  +
add esp 10h +
test eax eax +
jge loc_101ED24  +
xor eax eax +
jmp loc_101EDB2  +
push esi  +
push edi  +
push off_102CB60  +
mov edi 104h +
push edi  +
mov esi offset SubKey +
push esi  +
call sub_1008286  +
test eax eax +
jl loc_101EDA0  +
push offset word_1002830  +
push edi  +
push esi  +
call sub_10082C0  +
test eax eax +
jl loc_101EDA0  +
lea eax [ebp+var_18] +
push eax  +
push edi  +
push esi  +
call sub_10082C0  +
test eax eax +
jl loc_101EDA0  +
lea eax [ebp+hKey] +
push eax  +
push 2001Dh  +
push 0  +
push esi  +
mov edi 80000001h +
push edi  +
call ds:RegOpenKeyExW  +
test eax eax +
jz loc_101EDA4  +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [ebp+hKey] +
push eax  +
push 0  +
push 0F003Fh  +
push 0  +
push offset Class  +
push 0  +
push esi  +
push edi  +
call ds:RegCreateKeyExW  +
test eax eax +
jz loc_101EDA4  +
xor eax eax +
jmp loc_101EDB0  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1026CC5  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
xor ebx ebx +
push esi  +
cmp [ebp+lpString2] ebx +
jz loc_101EE6E  +
mov esi [ebp+hKey] +
cmp esi ebx +
jz loc_101EE6E  +
push edi  +
mov edi [ebp+arg_8] +
lea eax [edi+edi] +
mov [ebp+cbData] eax +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push ebx  +
push lpSubKey  +
mov [ebp+hKey] ebx +
push 80000002h  +
mov [ebp+arg_8] ebx +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_101EE36  +
lea eax [ebp+cbData] +
push eax  +
push esi  +
lea eax [ebp+Type] +
push eax  +
push ebx  +
push [ebp+lpString2]  +
push [ebp+hKey]  +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_101EE36  +
cmp [esi] bx +
setnz al  +
mov [ebp+arg_8] eax +
jmp loc_101EE5A  +
lea eax [ebp+lpString2] +
push eax  +
push [ebp+lpString2]  +
call sub_101E77A  +
test eax eax +
jz loc_101EE5A  +
push [ebp+lpString2]  +
push edi  +
push esi  +
call sub_1008286  +
xor ecx ecx +
test eax eax +
setnl cl  +
mov [ebp+arg_8] ecx +
pop edi  +
cmp [ebp+hKey] ebx +
jz loc_101EE69  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov eax [ebp+arg_8] +
jmp loc_101EE70  +
xor eax eax +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 168h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_4] +
push esi  +
xor esi esi +
push edi  +
mov [ebp+lpString2] ecx +
mov [ebp+var_168] eax +
cmp ecx esi +
jz loc_101EFCB  +
cmp eax esi +
jz loc_101EFCB  +
push ecx  +
push [ebp+arg_8]  +
xor edx edx +
push eax  +
mov [eax] dx +
call sub_1008286  +
test eax eax +
jl loc_101EFCB  +
lea eax [ebp+hKey] +
push eax  +
push 1  +
push esi  +
push offset aSoftwareMicros  +
push 80000002h  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_101EFCB  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push esi  +
lea eax [ebp+cbValueName] +
push eax  +
lea eax [ebp+ValueName] +
push eax  +
push esi  +
push [ebp+hKey]  +
mov [ebp+dwIndex] esi +
mov esi ds:RegEnumValueW +
mov [ebp+cbValueName] 52h +
mov [ebp+cbData] 0A4h +
call esi  +
mov edi 103h +
jmp loc_101EFB9  +
test eax eax +
jnz loc_101EFBF  +
push 2Ch  +
lea eax [ebp+ValueName] +
push eax  +
call sub_101E8A7  +
push [ebp+lpString2]  +
lea eax [ebp+ValueName] +
push eax  +
call ds:lstrcmpiW  +
test eax eax +
jz loc_101EFDD  +
inc [ebp+dwIndex]  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push 0  +
lea eax [ebp+cbValueName] +
push eax  +
lea eax [ebp+ValueName] +
push eax  +
push [ebp+dwIndex]  +
mov [ebp+cbValueName] 52h +
push [ebp+hKey]  +
mov [ebp+cbData] 0A4h +
call esi  +
cmp eax edi +
jnz loc_101EF43  +
jmp loc_101F004  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1026CC5  +
leave   +
retn 0Ch  +
push 2Ch  +
lea eax [ebp+Data] +
push eax  +
call sub_101E8A7  +
lea eax [ebp+Data] +
push eax  +
push [ebp+arg_8]  +
push [ebp+var_168]  +
call sub_1008286  +
test eax eax +
jl loc_101EFCB  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
xor eax eax +
inc eax  +
jmp loc_101EFCD  +
***
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+8]  +
mov esi ecx +
push 84h  +
call ??0CDialog@@QAE@IPAVCWnd@@@Z  +
mov dword ptr [esi] offset off_10048FC +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
cmp dword ptr [ecx+60h] 0 +
jnz loc_101F050  +
push 0FFFFFFFFh  +
call ds:MessageBeep  +
retn   +
jmp loc_102605A  +
***
mov dword ptr [ecx+60h] 1 +
retn   +
***
mov dword ptr [ecx+60h] 2 +
retn   +
***
mov dword ptr [ecx+60h] 3 +
retn   +
***
mov dword ptr [ecx+60h] 4 +
retn   +
***
mov dword ptr [ecx+60h] 5 +
retn   +
***
retn   +
***
call __EH_prolog3  +
mov esi ecx +
lea ecx [ebp-10h] +
call ??0CString@@QAE@XZ  +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call ?OnInitDialog@CDialog@@UAEHXZ  +
push 0EF5Bh  +
lea ecx [ebp-10h] +
call ?LoadStringW@CString@@QAEHI@Z  +
push dword ptr [ebp-10h]  +
mov ecx esi +
call ?SetWindowTextW@CWnd@@QAEXPBG@Z  +
push 0  +
push 1  +
push 0F1h  +
push 0ADh  +
mov ecx esi +
mov dword ptr [esi+60h] 1 +
call ?SendDlgItemMessageW@CWnd@@QAEJHIIJ@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call ??1CString@@QAE@XZ  +
xor eax eax +
inc eax  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
call sub_10246EA  +
test eax eax +
jnz loc_101F23A  +
push [ebp+arg_4]  +
call sub_102469F  +
mov eax [ebp+var_4] +
jmp loc_101F228  +
mov esi [eax+8] +
lea eax [esi+8] +
push eax  +
push [ebp+arg_4]  +
call sub_102485E  +
test eax eax +
jnz loc_101F23A  +
mov ecx [ebp+var_4] +
mov esi [esi] +
inc eax  +
cmp [ecx+0Ch] eax +
mov [ebp+arg_0] eax +
jle loc_101F214  +
test byte ptr [esi+0Ch] 1 +
jz loc_101F1F0  +
movzx ebx word ptr [esi+8] +
mov eax [esi+4] +
movzx ecx word ptr [esi+0Ah] +
sub cx [eax+0Ah] +
mov edx [esi] +
mov di bx +
sub di [eax+8] +
mov ax [edx+8] +
sub ax bx +
movzx ebx word ptr [esi+0Ah] +
mov [ebp+var_12] cx +
mov cx [edx+0Ah] +
sub cx bx +
movsx ebx [ebp+var_12] +
cwde   +
movsx ecx cx +
imul eax ebx +
movsx edi di +
imul ecx edi +
cmp ecx eax +
jnz loc_101F1D0  +
inc [ebp+arg_0]  +
mov esi edx +
mov eax [esi+8] +
mov [ebp+var_C] eax +
mov eax [esi+0Ch] +
mov [ebp+var_8] eax +
and word ptr [ebp+var_8] 0FFFEh +
lea eax [ebp+var_C] +
jmp loc_101F1F3  +
lea eax [esi+8] +
push eax  +
push [ebp+arg_4]  +
call sub_102485E  +
test eax eax +
jnz loc_101F23A  +
inc [ebp+arg_0]  +
mov eax [ebp+var_4] +
mov ecx [ebp+arg_0] +
cmp ecx [eax+0Ch] +
mov esi [esi] +
jge loc_101F214  +
lea eax [esi+8] +
push eax  +
push [ebp+arg_4]  +
call sub_102485E  +
test eax eax +
jnz loc_101F23A  +
inc [ebp+arg_0]  +
mov eax [ebp+var_4] +
mov ecx [ebp+arg_0] +
cmp ecx [eax+0Ch] +
mov esi [esi] +
jl loc_101F16C  +
push [ebp+arg_4]  +
call sub_10247F6  +
test eax eax +
jnz loc_101F23A  +
mov eax [ebp+var_4] +
mov eax [eax] +
mov [ebp+var_4] eax +
cmp dword ptr [eax] 0 +
jnz loc_101F143  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
or eax 0FFFFFFFFh +
jmp loc_101F233  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+arg_0]  +
call sub_10246EA  +
mov ebx eax +
test ebx ebx +
jnz loc_101F302  +
push [ebp+arg_4]  +
call sub_102469F  +
mov eax [ebp+arg_0] +
cmp [eax] ebx +
jz loc_101F302  +
push esi  +
push edi  +
mov esi [eax+8] +
lea edi [esi+8] +
push edi  +
push [ebp+arg_4]  +
call sub_102485E  +
mov ebx eax +
test ebx ebx +
jnz loc_101F300  +
mov ecx [edi+4] +
mov eax [edi] +
and [ebp+var_4] ebx +
mov [ebp+var_8] ecx +
mov ecx [ebp+arg_0] +
cmp [ecx+0Ch] ebx +
mov [ebp+var_C] eax +
jle loc_101F2E2  +
mov edx [esi] +
cmp [edx+8] ax +
jz loc_101F2D5  +
mov dx [edx+0Ah] +
cmp dx word ptr [ebp+var_C+2] +
jz loc_101F2D5  +
lea edi [esi+8] +
push edi  +
push [ebp+arg_4]  +
call sub_102485E  +
mov ebx eax +
test ebx ebx +
jnz loc_101F300  +
mov ecx [edi+4] +
mov eax [edi] +
mov [ebp+var_8] ecx +
mov ecx [ebp+arg_0] +
mov [ebp+var_C] eax +
inc [ebp+var_4]  +
mov edx [ebp+var_4] +
cmp edx [ecx+0Ch] +
mov esi [esi] +
jl loc_101F2A3  +
mov eax [ecx] +
push [ebp+arg_4]  +
mov [ebp+arg_0] eax +
call sub_10247F6  +
mov ebx eax +
test ebx ebx +
jnz loc_101F300  +
mov eax [ebp+arg_0] +
cmp [eax] ebx +
jnz loc_101F278  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
test ecx ecx +
jz locret_101F464  +
movzx eax word ptr [ecx+8] +
push ebx  +
push esi  +
mov esi [ecx+4] +
movzx edx word ptr [esi+8] +
sub eax edx +
push edi  +
movzx edi word ptr [esi+0Ah] +
mov [ebp+var_10] ax +
movzx eax word ptr [ecx+0Ah] +
sub eax edi +
mov [ebp+var_E] ax +
mov eax [esi+4] +
movzx ebx word ptr [eax+8] +
sub edx ebx +
mov [ebp+var_18] dx +
movzx edx word ptr [eax+0Ah] +
mov eax [eax+4] +
sub bx [eax+8] +
sub edi edx +
sub dx [eax+0Ah] +
mov eax [ecx] +
mov [ebp+var_16] di +
movzx edi word ptr [ecx+8] +
mov [ebp+var_1E] dx +
movzx edx word ptr [eax+8] +
mov [ebp+var_4] edx +
sub edx edi +
movzx edi word ptr [eax+0Ah] +
mov eax [eax] +
mov [ebp+var_20] bx +
movzx ebx word ptr [ecx+0Ah] +
mov [ebp+var_8] edi +
sub edi ebx +
mov bx [eax+8] +
sub bx word ptr [ebp+var_4] +
mov [ebp+var_26] di +
mov di [eax+0Ah] +
sub di word ptr [ebp+var_8] +
cmp [ebp+var_10] 0 +
jz loc_101F3FF  +
movsx eax [ebp+var_26] +
cdq   +
xor eax edx +
sub eax edx +
cmp eax 1 +
jg loc_101F3CB  +
xor eax eax +
test bx bx +
setl al  +
xor edx edx +
cmp [ebp+var_10] dx +
setl dl  +
cmp edx eax +
mov eax 0FFFFA000h +
jz loc_101F3D0  +
mov eax 4000h +
or [ecx+0Ch] ax +
movsx eax [ebp+var_16] +
cdq   +
xor eax edx +
sub eax edx +
cmp eax 1 +
jg loc_101F458  +
xor eax eax +
cmp [ebp+var_20] ax +
setl al  +
xor ecx ecx +
cmp [ebp+var_10] cx +
setl cl  +
cmp ecx eax +
jnz loc_101F458  +
mov eax 0FFFF9000h +
jmp loc_101F45D  +
movsx eax dx +
cdq   +
xor eax edx +
sub eax edx +
cmp eax 1 +
jg loc_101F426  +
xor eax eax +
test di di +
setl al  +
xor edx edx +
cmp [ebp+var_E] dx +
setl dl  +
cmp edx eax +
mov eax 0FFFFA000h +
jz loc_101F42B  +
mov eax 4000h +
or [ecx+0Ch] ax +
movsx eax [ebp+var_18] +
cdq   +
xor eax edx +
sub eax edx +
cmp eax 1 +
jg loc_101F458  +
xor eax eax +
cmp [ebp+var_1E] ax +
setl al  +
xor ecx ecx +
cmp [ebp+var_E] cx +
setl cl  +
cmp ecx eax +
mov eax 0FFFF9000h +
jz loc_101F45D  +
mov eax 4000h +
or [esi+0Ch] ax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
test ecx ecx +
jz locret_101F60D  +
mov eax [ecx+4] +
movzx edx word ptr [eax+8] +
push ebx  +
movzx ebx word ptr [ecx+0Ah] +
push esi  +
movzx esi word ptr [ecx+8] +
sub esi edx +
mov [ebp+var_34] si +
movzx esi word ptr [eax+0Ah] +
mov eax [eax+4] +
push edi  +
movzx edi word ptr [eax+8] +
sub edx edi +
sub ebx esi +
mov [ebp+var_24] dx +
movzx edx word ptr [eax+0Ah] +
mov eax [eax+4] +
sub di [eax+8] +
sub esi edx +
sub dx [eax+0Ah] +
mov eax [ecx] +
mov [ebp+var_22] si +
movzx esi word ptr [ecx+8] +
mov [ebp+var_2A] dx +
movzx edx word ptr [eax+8] +
mov [ebp+var_4] edx +
sub edx esi +
movzx esi word ptr [eax+0Ah] +
mov eax [eax] +
mov [ebp+var_2C] di +
movzx edi word ptr [ecx+0Ah] +
mov [ebp+var_8] esi +
sub esi edi +
mov [ebp+var_12] si +
movzx esi word ptr [eax+8] +
mov [ebp+var_C] esi +
sub esi [ebp+var_4] +
mov [ebp+var_14] dx +
mov [ebp+var_1C] si +
movzx esi word ptr [eax+0Ah] +
mov eax [eax] +
mov di [eax+0Ah] +
mov [ebp+var_4] esi +
sub esi [ebp+var_8] +
sub di word ptr [ebp+var_4] +
mov [ebp+var_1A] si +
mov si [eax+8] +
sub si word ptr [ebp+var_C] +
test bx bx +
jz loc_101F598  +
movsx eax dx +
cdq   +
xor eax edx +
sub eax edx +
cmp eax 1 +
jle loc_101F60A  +
movsx eax bx +
cdq   +
xor eax edx +
sub eax edx +
cmp eax 1 +
jle loc_101F60A  +
xor eax eax +
cmp [ebp+var_14] ax +
setl al  +
mov edi eax +
xor eax eax +
test bx bx +
setl al  +
mov ebx eax +
cmp ebx edi +
jnz loc_101F601  +
movsx eax [ebp+var_1A] +
cdq   +
xor eax edx +
sub eax edx +
cmp eax 1 +
jnz loc_101F601  +
movsx eax [ebp+var_24] +
cdq   +
xor eax edx +
sub eax edx +
cmp eax 1 +
jnz loc_101F601  +
xor eax eax +
cmp [ebp+var_2A] ax +
setl al  +
cmp ebx eax +
jnz loc_101F601  +
xor eax eax +
test si si +
setl al  +
cmp edi eax +
jmp loc_101F5FF  +
movsx eax [ebp+var_12] +
cdq   +
xor eax edx +
sub eax edx +
cmp eax 1 +
jle loc_101F60A  +
movsx eax [ebp+var_34] +
cdq   +
xor eax edx +
sub eax edx +
cmp eax 1 +
jle loc_101F60A  +
xor ebx ebx +
cmp [ebp+var_12] bx +
setl bl  +
xor eax eax +
cmp [ebp+var_34] ax +
setl al  +
mov esi eax +
cmp esi ebx +
jz loc_101F601  +
movsx eax [ebp+var_1C] +
cdq   +
xor eax edx +
sub eax edx +
cmp eax 1 +
jnz loc_101F601  +
movsx eax [ebp+var_22] +
cdq   +
xor eax edx +
sub eax edx +
cmp eax 1 +
jnz loc_101F601  +
xor eax eax +
cmp [ebp+var_2C] ax +
setl al  +
cmp esi eax +
jnz loc_101F601  +
xor eax eax +
test di di +
setl al  +
cmp ebx eax +
jz loc_101F60A  +
mov eax 4000h +
or [ecx+0Ch] ax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
test eax eax +
jnz loc_101F622  +
leave   +
retn   +
mov ecx [eax+4] +
mov edx [ecx+4] +
push ebx  +
movzx ebx word ptr [ecx+8] +
push esi  +
push edi  +
movzx edi word ptr [ecx+0Ah] +
movzx ecx word ptr [eax+0Ah] +
mov [ebp+var_10] ecx +
mov [ebp+var_4] edi +
sub ecx [ebp+var_4] +
sub di [edx+0Ah] +
mov si bx +
sub si [edx+8] +
movzx edx word ptr [eax+8] +
mov eax [eax] +
mov [ebp+var_6] cx +
mov cx [eax+8] +
mov ax [eax+0Ah] +
sub ax word ptr [ebp+var_10] +
mov [ebp+var_C] edx +
sub cx word ptr [ebp+var_C] +
sub edx ebx +
test si si +
jz loc_101F695  +
xor eax eax +
test cx cx +
setl al  +
xor ecx ecx +
test si si +
setl cl  +
cmp ecx eax +
jz loc_101F6BF  +
xor ecx ecx +
cmp [ebp+var_6] cx +
setl cl  +
xor edx edx +
cmp eax ecx +
setz dl  +
jmp loc_101F6BA  +
xor ecx ecx +
test ax ax +
setl cl  +
mov eax ecx +
xor ecx ecx +
test di di +
setl cl  +
cmp ecx eax +
jz loc_101F6BF  +
xor ecx ecx +
test dx dx +
setl cl  +
xor edx edx +
cmp eax ecx +
setnz dl  +
inc edx  +
mov eax edx +
jmp loc_101F6C1  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push esi  +
mov esi eax +
test esi esi +
jz loc_101F8E2  +
movzx ecx word ptr [esi+8] +
mov eax [esi+4] +
push edi  +
movzx edi word ptr [esi+0Ah] +
mov [ebp+var_8] ecx +
sub cx [eax+8] +
mov [ebp+var_C] edi +
sub di [eax+0Ah] +
movsx eax cx +
cdq   +
xor eax edx +
sub eax edx +
cmp eax 5 +
mov [ebp+var_1C] cx +
mov [ebp+var_1A] di +
mov [ebp+var_4] eax +
jg loc_101F724  +
movsx eax di +
cdq   +
xor eax edx +
sub eax edx +
cmp eax 5 +
jg loc_101F724  +
xor eax eax +
jmp loc_101F8E1  +
mov eax [esi+4] +
mov ecx [eax+4] +
mov edx [ecx+4] +
push ebx  +
movzx ebx word ptr [ecx+8] +
movzx ecx word ptr [ecx+0Ah] +
mov di bx +
sub di [edx+8] +
mov [ebp+var_14] di +
mov di cx +
sub di [edx+0Ah] +
mov [ebp+var_12] di +
mov di [eax+8] +
sub di bx +
mov bx [eax+0Ah] +
mov eax [esi] +
movzx esi word ptr [eax+8] +
sub bx cx +
movzx ecx word ptr [eax+0Ah] +
mov eax [eax] +
mov edx esi +
sub edx [ebp+var_8] +
mov [ebp+var_8] ecx +
sub ecx [ebp+var_C] +
mov [ebp+var_24] dx +
mov [ebp+var_22] cx +
mov cx [eax+8] +
sub cx si +
mov si [eax+0Ah] +
sub si word ptr [ebp+var_8] +
cmp [ebp+var_1C] 0 +
jz loc_101F833  +
xor eax eax +
cmp [ebp+var_1C] ax +
setl al  +
mov esi eax +
xor eax eax +
test cx cx +
setl al  +
cmp esi eax +
jnz loc_101F7D0  +
movsx eax [ebp+var_22] +
cdq   +
xor eax edx +
sub eax edx +
cmp eax 1 +
jg loc_101F7D0  +
jnz loc_101F80F  +
movsx eax cx +
cdq   +
mov ecx eax +
mov eax [ebp+var_4] +
xor ecx edx +
sub ecx edx +
cdq   +
sub eax edx +
sar eax 1 +
cmp eax ecx +
jle loc_101F80F  +
xor eax eax +
cmp [ebp+var_14] ax +
setl al  +
cmp esi eax +
jnz loc_101F8DD  +
movsx eax bx +
cdq   +
xor eax edx +
sub eax edx +
cmp eax 1 +
jg loc_101F8DD  +
jnz loc_101F80F  +
movsx eax [ebp+var_14] +
cdq   +
mov ecx eax +
mov eax [ebp+var_4] +
xor ecx edx +
sub ecx edx +
cdq   +
sub eax edx +
sar eax 1 +
cmp eax ecx +
jg loc_101F8DD  +
cmp [ebp+var_4] 2 +
jle loc_101F8D9  +
movsx eax [ebp+var_22] +
cdq   +
xor eax edx +
sub eax edx +
cmp eax 2 +
jg loc_101F8DD  +
movsx eax bx +
jmp loc_101F8CF  +
mov bx [ebp+var_1A] +
xor ecx ecx +
test bx bx +
setl cl  +
xor eax eax +
test si si +
setl al  +
cmp ecx eax +
jnz loc_101F879  +
movsx eax dx +
cdq   +
xor eax edx +
sub eax edx +
cmp eax 1 +
jg loc_101F879  +
jnz loc_101F8B1  +
movsx eax bx +
cdq   +
xor eax edx +
sub eax edx +
cdq   +
sub eax edx +
sar eax 1 +
mov [ebp+var_C] eax +
movsx eax si +
cdq   +
xor eax edx +
sub eax edx +
mov edx [ebp+var_C] +
cmp edx eax +
jle loc_101F8B1  +
xor eax eax +
cmp [ebp+var_12] ax +
setl al  +
cmp ecx eax +
jnz loc_101F8DD  +
movsx eax di +
cdq   +
xor eax edx +
sub eax edx +
cmp eax 1 +
jg loc_101F8DD  +
jnz loc_101F8B1  +
movsx eax bx +
cdq   +
xor eax edx +
sub eax edx +
cdq   +
sub eax edx +
mov ecx eax +
movsx eax [ebp+var_12] +
cdq   +
xor eax edx +
sar ecx 1 +
sub eax edx +
cmp ecx eax +
jg loc_101F8DD  +
movsx eax bx +
cdq   +
xor eax edx +
sub eax edx +
cmp eax 2 +
jle loc_101F8D9  +
movsx eax [ebp+var_24] +
cdq   +
xor eax edx +
sub eax edx +
cmp eax 2 +
jg loc_101F8DD  +
movsx eax di +
cdq   +
xor eax edx +
sub eax edx +
cmp eax 2 +
jg loc_101F8DD  +
xor eax eax +
jmp loc_101F8E0  +
xor eax eax +
inc eax  +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
test ecx ecx +
jz locret_101FAD9  +
push ebx  +
push esi  +
mov esi [ecx+4] +
mov eax [esi+4] +
movzx ebx word ptr [eax+8] +
mov edx [eax+4] +
push edi  +
mov di bx +
sub di [edx+8] +
mov [ebp+var_20] di +
movzx edi word ptr [eax+0Ah] +
mov ax di +
sub ax [edx+0Ah] +
movzx edx word ptr [ecx+8] +
mov [ebp+var_1E] ax +
movzx eax word ptr [esi+8] +
sub eax ebx +
movzx ebx word ptr [esi+0Ah] +
mov [ebp+var_28] ax +
mov eax ebx +
sub eax edi +
mov [ebp+var_26] ax +
movzx eax word ptr [esi+8] +
sub edx eax +
movzx eax word ptr [ecx+0Ah] +
sub eax ebx +
movzx ebx word ptr [ecx+8] +
mov [ebp+var_16] ax +
mov eax [ecx] +
movzx edi word ptr [eax+8] +
mov [ebp+var_4] edi +
sub edi ebx +
movzx ebx word ptr [ecx+0Ah] +
mov [ebp+var_10] di +
movzx edi word ptr [eax+0Ah] +
mov eax [eax] +
mov [ebp+var_8] edi +
sub edi ebx +
mov bx [eax+0Ah] +
sub bx word ptr [ebp+var_8] +
mov [ebp+var_E] di +
mov di [eax+8] +
sub di word ptr [ebp+var_4] +
mov [ebp+var_18] dx +
test dx dx +
jz loc_101FA35  +
movsx eax [ebp+var_E] +
cdq   +
xor eax edx +
sub eax edx +
cmp eax 1 +
jnz loc_101F9D5  +
xor ebx ebx +
cmp [ebp+var_18] bx +
setl bl  +
xor eax eax +
test di di +
setl al  +
cmp ebx eax +
jnz loc_101F9D5  +
movsx eax di +
cdq   +
xor eax edx +
sub eax edx +
cmp eax 1 +
jnz loc_101F9CE  +
xor eax eax +
cmp [ebp+var_E] ax +
setl al  +
cmp ebx eax +
jz loc_101F9D5  +
mov eax 6000h +
jmp loc_101F9DA  +
mov eax 4000h +
or [ecx+0Ch] ax +
movsx eax [ebp+var_26] +
cdq   +
xor eax edx +
sub eax edx +
cmp eax 1 +
jnz loc_101FACD  +
xor ecx ecx +
xor edi edi +
cmp [ebp+var_18] di +
setl cl  +
xor eax eax +
cmp [ebp+var_20] di +
setl al  +
cmp ecx eax +
jnz loc_101FACD  +
movsx eax [ebp+var_20] +
cdq   +
xor eax edx +
sub eax edx +
cmp eax 1 +
jnz loc_101FA2B  +
xor eax eax +
cmp [ebp+var_26] di +
setl al  +
cmp ecx eax +
jnz loc_101FACD  +
mov eax 5000h +
jmp loc_101FAD2  +
movsx eax [ebp+var_10] +
cdq   +
xor eax edx +
sub eax edx +
cmp eax 1 +
jnz loc_101FA7B  +
xor eax eax +
cmp [ebp+var_16] ax +
setl al  +
mov edi eax +
xor eax eax +
test bx bx +
setl al  +
cmp edi eax +
jnz loc_101FA7B  +
movsx eax bx +
cdq   +
xor eax edx +
sub eax edx +
cmp eax 1 +
jnz loc_101FA74  +
xor eax eax +
cmp [ebp+var_10] ax +
setl al  +
cmp edi eax +
jnz loc_101FA7B  +
mov eax 6000h +
jmp loc_101FA80  +
mov eax 4000h +
or [ecx+0Ch] ax +
movsx eax [ebp+var_28] +
cdq   +
xor eax edx +
sub eax edx +
cmp eax 1 +
jnz loc_101FACD  +
xor ecx ecx +
xor edi edi +
cmp [ebp+var_16] di +
setl cl  +
xor eax eax +
cmp [ebp+var_1E] di +
setl al  +
cmp ecx eax +
jnz loc_101FACD  +
movsx eax [ebp+var_1E] +
cdq   +
xor eax edx +
sub eax edx +
cmp eax 1 +
jnz loc_101FA2B  +
xor eax eax +
cmp [ebp+var_28] di +
setl al  +
cmp ecx eax +
jnz loc_101FA2B  +
mov eax 4000h +
or [esi+0Ch] ax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
push ebx  +
push esi  +
cdq   +
sub eax edx +
mov esi eax +
push edi  +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+arg_0]  +
sar esi 1 +
imul esi [ebp+arg_10] +
call sub_10246EA  +
mov ebx eax +
xor edi edi +
cmp ebx edi +
jnz loc_101FB59  +
mov eax [ebp+arg_0] +
jmp loc_101FB55  +
cmp [eax+0Ch] edi +
mov ecx [eax+8] +
jle loc_101FB4E  +
movsx eax word ptr [ecx+8] +
imul eax [ebp+arg_C] +
imul eax [ebp+arg_10] +
cdq   +
idiv  [ebp+arg_4] +
sub eax esi +
mov [ecx+8] ax +
movsx eax word ptr [ecx+0Ah] +
imul eax [ebp+arg_C] +
imul eax [ebp+arg_10] +
cdq   +
idiv  [ebp+arg_8] +
sub eax esi +
mov [ecx+0Ah] ax +
mov eax [ebp+arg_0] +
mov ecx [ecx] +
inc edi  +
cmp edi [eax+0Ch] +
jl loc_101FB17  +
mov eax [eax] +
mov [ebp+arg_0] eax +
xor edi edi +
cmp [eax] edi +
jnz loc_101FB0F  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
mov esi eax +
xor eax eax +
test esi esi +
jz loc_101FD8D  +
mov eax [esi+4] +
mov ecx [eax+4] +
push ebx  +
mov bx [eax+8] +
mov ax [eax+0Ah] +
sub ax [ecx+0Ah] +
sub bx [ecx+8] +
mov [ebp+var_A] ax +
mov eax [esi] +
mov cx [eax+0Ah] +
sub cx [esi+0Ah] +
push edi  +
mov di [eax+8] +
mov eax [eax] +
sub di [esi+8] +
mov [ebp+var_12] cx +
mov ecx [eax] +
mov dx [ecx+8] +
mov cx [ecx+0Ah] +
sub dx [eax+8] +
sub cx [eax+0Ah] +
mov [ebp+var_2C] dx +
mov [ebp+var_2A] cx +
test di di +
jz loc_101FCAF  +
lea eax [esi+8] +
push eax  +
push [ebp+arg_0]  +
call sub_102485E  +
test eax eax +
jl loc_101FD8B  +
movzx eax word ptr [esi+0Ah] +
mov word ptr [ebp+var_1C+2] ax +
mov word ptr [ebp+var_24+2] ax +
mov eax 80h +
mov ecx eax +
mov [ebp+var_20] ax +
movsx eax bx +
mov [ebp+var_8] eax +
cdq   +
mov [ebp+var_18] cx +
mov ecx eax +
movsx eax [ebp+var_2C] +
xor ecx edx +
sub ecx edx +
cdq   +
xor eax edx +
sub eax edx +
add eax ecx +
movsx edi di +
mov [ebp+var_4] eax +
mov eax edi +
cdq   +
xor eax edx +
sub eax edx +
mov edx [ebp+var_4] +
cmp edx eax +
mov [ebp+var_10] edi +
jg loc_101FC7C  +
mov ax [esi+8] +
add ax bx +
mov word ptr [ebp+var_1C] ax +
lea eax [ebp+var_1C] +
push eax  +
push [ebp+arg_0]  +
call sub_102485E  +
test eax eax +
jl loc_101FD8B  +
mov eax [esi] +
mov ax [eax+8] +
sub ax [ebp+var_2C] +
mov word ptr [ebp+var_24] ax +
lea eax [ebp+var_24] +
push eax  +
push [ebp+arg_0]  +
call sub_102485E  +
test eax eax +
jl loc_101FD8B  +
mov eax [esi] +
add eax 8 +
jmp loc_101FD82  +
movsx eax [ebp+var_2C] +
mov edx [ebp+var_8] +
add eax edx +
cdq   +
mov edi eax +
mov eax [ebp+var_10] +
imul eax ecx +
xor edi edx +
sub edi edx +
cdq   +
idiv  edi +
mov word ptr [ebp+var_1C] ax +
test ax ax +
jz loc_101FD6D  +
add ax [esi+8] +
mov word ptr [ebp+var_1C] ax +
lea eax [ebp+var_1C] +
jmp loc_101FC61  +
lea ecx [esi+8] +
movzx eax word ptr [ecx] +
mov word ptr [ebp+var_1C] ax +
mov word ptr [ebp+var_24] ax +
mov eax 80h +
push ecx  +
push [ebp+arg_0]  +
mov edx eax +
mov [ebp+var_18] dx +
mov [ebp+var_20] ax +
call sub_102485E  +
test eax eax +
jl loc_101FD8B  +
movsx edi [ebp+var_A] +
movsx ebx [ebp+var_2A] +
mov eax edi +
cdq   +
mov ecx eax +
xor ecx edx +
sub ecx edx +
mov eax ebx +
cdq   +
mov ebx eax +
movsx eax [ebp+var_12] +
xor ebx edx +
sub ebx edx +
cdq   +
xor eax edx +
add ebx ecx +
sub eax edx +
cmp ebx eax +
jg loc_101FD40  +
mov eax edi +
cdq   +
sub eax edx +
sar eax 1 +
add ax [esi+0Ah] +
mov word ptr [ebp+var_1C+2] ax +
lea eax [ebp+var_1C] +
push eax  +
push [ebp+arg_0]  +
call sub_102485E  +
test eax eax +
jl loc_101FD8B  +
movsx eax [ebp+var_2A] +
mov ecx [esi] +
mov cx [ecx+0Ah] +
cdq   +
sub eax edx +
sar eax 1 +
sub cx ax +
mov word ptr [ebp+var_24+2] cx +
jmp loc_101FC5E  +
movsx eax [ebp+var_2A] +
add eax edi +
cdq   +
mov edi eax +
movsx eax [ebp+var_12] +
imul eax ecx +
xor edi edx +
sub edi edx +
cdq   +
idiv  edi +
mov word ptr [ebp+var_1C+2] ax +
test ax ax +
jz loc_101FD6D  +
add ax [esi+0Ah] +
mov word ptr [ebp+var_1C+2] ax +
jmp loc_101FCAA  +
mov esi [esi] +
mov ax [esi+8] +
mov word ptr [ebp+var_1C] ax +
mov ax [esi+0Ah] +
mov word ptr [ebp+var_1C+2] ax +
lea eax [ebp+var_1C] +
push eax  +
push [ebp+arg_0]  +
call sub_102485E  +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push esi  +
mov esi eax +
xor eax eax +
test esi esi +
jz loc_101FF44  +
mov eax 80h +
mov [ebp+var_10] ax +
mov eax 1000h +
push ebx  +
push edi  +
test [esi+0Ch] ax +
jz loc_101FE8C  +
lea ebx [esi+8] +
push ebx  +
push [ebp+arg_0]  +
mov [ebp+var_4] ebx +
call sub_102485E  +
mov [ebp+var_8] eax +
test eax eax +
jl loc_101FF42  +
mov eax [esi+4] +
movzx edi word ptr [eax+8] +
mov ecx [eax+4] +
mov ax [eax+0Ah] +
sub ax [ecx+0Ah] +
movzx ebx word ptr [ebx] +
mov dx di +
sub dx [ecx+8] +
mov [ebp+var_1C] dx +
mov edx [esi] +
mov cx [edx+8] +
mov dx [edx+0Ah] +
sub dx [esi+0Ah] +
sub cx bx +
cmp bx di +
jnz loc_101FE4E  +
movsx edi [ebp+var_1C] +
movsx eax cx +
cdq   +
mov ecx eax +
xor ecx edx +
sub ecx edx +
mov eax edi +
cdq   +
xor eax edx +
sub eax edx +
cmp eax ecx +
jge loc_101FF3F  +
mov ax [esi+0Ah] +
mov ecx [ebp+var_4] +
mov word ptr [ebp+var_14+2] ax +
mov eax edi +
cdq   +
sub eax edx +
sar eax 1 +
add ax [ecx] +
mov word ptr [ebp+var_14] ax +
jmp loc_101FE83  +
movsx ecx ax +
movsx eax dx +
cdq   +
mov edi eax +
xor edi edx +
sub edi edx +
mov eax ecx +
cdq   +
xor eax edx +
sub eax edx +
cmp eax edi +
jge loc_101FF3F  +
mov eax [ebp+var_4] +
mov ax [eax] +
mov word ptr [ebp+var_14] ax +
mov eax ecx +
cdq   +
sub eax edx +
sar eax 1 +
add ax [esi+0Ah] +
mov word ptr [ebp+var_14+2] ax +
lea eax [ebp+var_14] +
push eax  +
jmp loc_101FF35  +
mov eax [esi+4] +
lea edi [esi+8] +
movzx ecx word ptr [edi] +
sub cx [eax+8] +
mov [ebp+var_C] cx +
movzx ecx word ptr [esi+0Ah] +
mov esi [esi] +
movzx ebx word ptr [esi+8] +
mov dx cx +
sub dx [eax+0Ah] +
mov [ebp+var_A] dx +
mov edx [esi] +
mov ax [edx+8] +
mov dx [edx+0Ah] +
sub dx [esi+0Ah] +
movzx esi word ptr [edi] +
sub ax bx +
cmp si bx +
jnz loc_101FEF7  +
movsx esi ax +
movsx eax [ebp+var_C] +
cdq   +
mov ebx eax +
xor ebx edx +
sub ebx edx +
mov eax esi +
cdq   +
xor eax edx +
sub eax edx +
cmp ebx eax +
jle loc_101FF34  +
mov eax esi +
cdq   +
sub eax edx +
mov dx [edi] +
sar eax 1 +
sub dx ax +
mov word ptr [ebp+var_14] dx +
jmp loc_101FF20  +
movsx eax [ebp+var_A] +
movsx esi dx +
cdq   +
mov ebx eax +
xor ebx edx +
sub ebx edx +
mov eax esi +
cdq   +
xor eax edx +
sub eax edx +
cmp ebx eax +
jle loc_101FF34  +
mov ax [edi] +
mov word ptr [ebp+var_14] ax +
mov eax esi +
cdq   +
sub eax edx +
sar eax 1 +
sub ecx eax +
lea eax [ebp+var_14] +
push eax  +
push [ebp+arg_0]  +
mov word ptr [ebp+var_14+2] cx +
call sub_102485E  +
test eax eax +
jl loc_101FF42  +
push edi  +
push [ebp+arg_0]  +
call sub_102485E  +
jmp loc_101FF42  +
mov eax [ebp+var_8] +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_101FF61  +
mov ecx [ebp+arg_8] +
test ecx ecx +
jnz loc_101FF75  +
xor eax eax +
pop ebp  +
retn 10h  +
dec [ebp+arg_C]  +
test byte ptr [eax+0Ch] 80h +
jnz loc_101FF7D  +
mov eax [eax] +
inc [ebp+arg_0]  +
cmp [ebp+arg_C] 0 +
jg loc_101FF67  +
jmp loc_101FF7F  +
mov [ecx] eax +
mov eax [ebp+arg_0] +
jmp loc_101FF63  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
mov esi eax +
or eax 0FFFFFFFFh +
test esi esi +
jz loc_1020040  +
lea eax [esi+8] +
push eax  +
push [ebp+arg_4]  +
call sub_102485E  +
test eax eax +
jl loc_1020040  +
mov ecx [ebp+arg_8] +
dec [ebp+arg_0]  +
and [ebp+var_4] 0 +
mov esi [esi] +
push edi  +
lea edi [ecx+ebx] +
add edi [ebp+arg_C] +
cmp [ebp+arg_0] 0 +
jle loc_102003F  +
mov eax [esi] +
movsx eax word ptr [eax+8] +
imul eax [ebp+arg_C] +
mov ecx [esi+4] +
movsx ecx word ptr [ecx+8] +
imul ecx [ebp+arg_8] +
add eax ecx +
movsx ecx word ptr [esi+8] +
imul ecx ebx +
add eax ecx +
cdq   +
idiv  edi +
mov word ptr [ebp+var_C] ax +
mov eax [esi] +
movsx eax word ptr [eax+0Ah] +
mov ecx [esi+4] +
imul eax [ebp+arg_C] +
movsx ecx word ptr [ecx+0Ah] +
imul ecx [ebp+arg_8] +
add eax ecx +
movsx ecx word ptr [esi+0Ah] +
imul ecx ebx +
add eax ecx +
cdq   +
idiv  edi +
mov word ptr [ebp+var_C+2] ax +
mov ax [esi+0Ch] +
mov [ebp+var_8] ax +
lea eax [ebp+var_C] +
push eax  +
push [ebp+arg_4]  +
call sub_102485E  +
test eax eax +
jl loc_102003F  +
inc [ebp+var_4]  +
mov ecx [ebp+var_4] +
cmp ecx [ebp+arg_0] +
mov esi [esi] +
jl loc_101FFCC  +
pop edi  +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
mov eax ebx +
cdq   +
push esi  +
sub eax edx +
mov esi eax +
lea eax [ebp+arg_4] +
push eax  +
push [ebp+arg_0]  +
sar esi 1 +
call sub_10246EA  +
mov [ebp+arg_0] eax +
test eax eax +
jnz loc_10200DF  +
mov eax [ebp+arg_4] +
cmp dword ptr [eax] 0 +
jz loc_10200DF  +
push edi  +
mov ecx [eax+8] +
xor edi edi +
cmp [eax+0Ch] edi +
jle loc_10200D4  +
movsx eax word ptr [ecx+8] +
cdq   +
idiv  [ebp+arg_8] +
add eax esi +
mov [ecx+8] ax +
test ax ax +
jge loc_102009A  +
xor eax eax +
jmp loc_10200A2  +
cwde   +
cmp eax ebx +
jl loc_10200A6  +
lea eax [ebx-1] +
mov [ecx+8] ax +
movsx eax word ptr [ecx+0Ah] +
cdq   +
idiv  [ebp+arg_8] +
add eax esi +
mov [ecx+0Ah] ax +
test ax ax +
jge loc_10200BD  +
xor eax eax +
jmp loc_10200C5  +
cwde   +
cmp eax ebx +
jl loc_10200C9  +
lea eax [ebx-1] +
mov [ecx+0Ah] ax +
mov eax [ebp+arg_4] +
mov ecx [ecx] +
inc edi  +
cmp edi [eax+0Ch] +
jl loc_1020083  +
mov eax [eax] +
mov [ebp+arg_4] eax +
cmp dword ptr [eax] 0 +
jnz loc_1020079  +
pop edi  +
mov eax [ebp+arg_0] +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push [ebp+arg_4]  +
call sub_102469F  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
call sub_10246EA  +
test eax eax +
jnz locret_102022A  +
mov ecx [ebp+var_4] +
cmp [ecx] eax +
jz locret_102022A  +
push ebx  +
push esi  +
push edi  +
mov esi [ecx+8] +
lea eax [esi+8] +
push eax  +
push [ebp+arg_4]  +
call sub_102485E  +
test eax eax +
jl loc_1020227  +
mov eax [ebp+var_4] +
mov eax [eax+0Ch] +
cmp eax 1 +
mov esi [esi] +
mov [ebp+arg_0] 1 +
jle loc_102020A  +
mov [ebp+var_8] 2 +
cmp [ebp+var_8] eax +
jge loc_10201FA  +
test byte ptr [esi+0Ch] 1 +
jz loc_102018D  +
lea eax [esi+8] +
push eax  +
push [ebp+arg_4]  +
call sub_102485E  +
test eax eax +
jl loc_1020227  +
inc [ebp+arg_0]  +
mov eax [ebp+var_4] +
mov ecx [ebp+arg_0] +
inc [ebp+var_8]  +
cmp ecx [eax+0Ch] +
mov esi [esi] +
jge loc_102020A  +
jmp loc_10201D1  +
mov eax [esi] +
movzx edx word ptr [esi+0Ah] +
mov bx [eax+0Ah] +
movzx ecx word ptr [esi+8] +
mov di [eax+8] +
sub bx dx +
mov [ebp+var_E] bx +
mov ebx [esi+4] +
sub dx [ebx+0Ah] +
sub di cx +
sub cx [ebx+8] +
test byte ptr [eax+0Ch] 1 +
jnz loc_10201D1  +
movsx eax cx +
movsx ecx [ebp+var_E] +
imul eax ecx +
movsx ecx dx +
movsx edx di +
imul ecx edx +
cmp ecx eax +
jz loc_10201E1  +
lea eax [esi+8] +
push eax  +
push [ebp+arg_4]  +
call sub_102485E  +
test eax eax +
jl loc_1020227  +
mov eax [ebp+var_4] +
inc [ebp+arg_0]  +
mov eax [eax+0Ch] +
inc [ebp+var_8]  +
cmp [ebp+arg_0] eax +
mov esi [esi] +
jl loc_1020155  +
jmp loc_102020A  +
add esi 8 +
push esi  +
push [ebp+arg_4]  +
call sub_102485E  +
test eax eax +
jl loc_1020227  +
push [ebp+arg_4]  +
call sub_10247F6  +
test eax eax +
jl loc_1020227  +
mov ecx [ebp+var_4] +
mov ecx [ecx] +
mov [ebp+var_4] ecx +
cmp dword ptr [ecx] 0 +
jnz loc_102011F  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
call sub_102469F  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
call sub_10246EA  +
test eax eax +
jnz locret_10202EF  +
mov ecx [ebp+var_4] +
cmp [ecx] eax +
jz locret_10202EF  +
push esi  +
push edi  +
mov esi [ecx+8] +
lea eax [esi+8] +
push eax  +
push ebx  +
call sub_102485E  +
test eax eax +
jl loc_10202ED  +
mov eax [ebp+var_4] +
mov esi [esi] +
xor edi edi +
inc edi  +
cmp [eax+0Ch] edi +
jle loc_10202D2  +
test byte ptr [esi+0Ch] 1 +
jz loc_10202A3  +
lea eax [esi+8] +
push eax  +
push ebx  +
call sub_102485E  +
test eax eax +
jl loc_10202ED  +
mov eax [ebp+var_4] +
mov esi [esi] +
inc edi  +
cmp edi [eax+0Ch] +
jge loc_10202D2  +
lea eax [esi+8] +
push eax  +
jmp loc_10202BD  +
mov eax [esi+4] +
lea ecx [esi+8] +
mov dx [ecx] +
cmp dx [eax+8] +
jnz loc_10202BC  +
mov dx [esi+0Ah] +
cmp dx [eax+0Ah] +
jz loc_10202C7  +
push ecx  +
push ebx  +
call sub_102485E  +
test eax eax +
jl loc_10202ED  +
mov eax [ebp+var_4] +
mov esi [esi] +
inc edi  +
cmp edi [eax+0Ch] +
jl loc_102027E  +
push ebx  +
call sub_10247F6  +
test eax eax +
jl loc_10202ED  +
mov ecx [ebp+var_4] +
mov ecx [ecx] +
mov [ebp+var_4] ecx +
cmp dword ptr [ecx] 0 +
jnz loc_1020260  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
or eax 0FFFFFFFFh +
test esi esi +
jz loc_10203CB  +
lea eax [ebp+arg_4] +
push eax  +
push [ebp+arg_0]  +
call sub_10246EA  +
test eax eax +
jnz loc_10203CB  +
push [ebp+arg_0]  +
call sub_102477D  +
test eax eax +
jle loc_10203CB  +
mov ax [esi+8] +
sub ax [esi] +
push edi  +
inc ax  +
movzx edi ax +
mov eax [esi+0Ch] +
sub eax [esi+4] +
movsx ecx di +
cmp ecx eax +
jle loc_1020357  +
mov ax [esi+0Ch] +
sub ax [esi+4] +
inc ax  +
movzx edi ax +
mov ecx [ebp+arg_4] +
jmp loc_10203C3  +
mov edx [ecx+0Ch] +
mov eax [ecx+8] +
test edx edx +
jle loc_10203BE  +
mov cx [esi] +
add [eax+8] cx +
mov cx [esi+4] +
sub cx [eax+0Ah] +
dec edx  +
add cx di +
dec cx  +
mov [eax+0Ah] cx +
movsx ecx word ptr [eax+8] +
cmp ecx [esi+8] +
jle loc_102038E  +
mov cx [esi+8] +
jmp loc_1020395  +
cmp ecx [esi] +
jge loc_1020399  +
mov cx [esi] +
mov [eax+8] cx +
movsx ecx word ptr [eax+0Ah] +
cmp ecx [esi+0Ch] +
jle loc_10203A8  +
mov cx [esi+0Ch] +
jmp loc_10203B1  +
cmp ecx [esi+4] +
jge loc_10203B5  +
mov cx [esi+4] +
mov [eax+0Ah] cx +
mov eax [eax] +
test edx edx +
jg loc_1020366  +
mov ecx [ebp+arg_4] +
mov ecx [ecx] +
mov [ebp+arg_4] ecx +
cmp dword ptr [ecx] 0 +
jnz loc_102035C  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_8] 0 +
push esi  +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+arg_0]  +
call sub_10246EA  +
mov esi eax +
test esi esi +
jnz loc_102048A  +
push [ebp+arg_4]  +
call sub_102469F  +
mov eax [ebp+arg_0] +
cmp [eax] esi +
jz loc_102048A  +
push ebx  +
push edi  +
push dword ptr [eax+0Ch]  +
mov ecx [eax+8] +
lea eax [ebp+var_4] +
push eax  +
push ecx  +
push 0  +
mov [ebp+var_4] ecx +
call sub_101FF4E  +
mov ecx [ebp+arg_0] +
mov edx eax +
mov eax [ecx+0Ch] +
cmp edx eax +
jge loc_102046D  +
mov esi [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push dword ptr [esi]  +
lea eax [edx+1] +
push eax  +
call sub_101FF4E  +
push 1  +
push 1  +
push [ebp+arg_4]  +
mov edi eax +
sub eax edx +
push eax  +
push 2  +
pop ebx  +
mov eax esi +
call sub_101FF89  +
mov esi eax +
test esi esi +
jl loc_1020488  +
mov ecx [ebp+arg_0] +
mov eax [ecx+0Ch] +
cmp edi eax +
jge loc_102046D  +
mov esi [ebp+var_8] +
mov edx edi +
jmp loc_1020430  +
mov eax [ecx] +
push [ebp+arg_4]  +
mov [ebp+arg_0] eax +
call sub_10247F6  +
mov esi eax +
test esi esi +
jl loc_1020488  +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 0 +
jnz loc_102040C  +
pop edi  +
pop ebx  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+arg_0]  +
call sub_10246EA  +
test eax eax +
jnz loc_1020589  +
push [ebp+arg_4]  +
call sub_102469F  +
jmp loc_1020574  +
mov ecx [eax+0Ch] +
mov esi [eax+8] +
mov [ebp+var_10] ecx +
test ecx ecx +
jle loc_1020567  +
dec [ebp+var_10]  +
lea edi [esi+8] +
push edi  +
push [ebp+arg_4]  +
call sub_102485E  +
test eax eax +
jnz loc_1020589  +
mov ecx [esi] +
mov ax [ecx+8] +
mov cx [ecx+0Ah] +
sub ax [edi] +
sub cx [esi+0Ah] +
xor edx edx +
mov [ebp+var_18] dx +
inc edx  +
cmp [ebp+arg_8] edx +
mov [ebp+var_C] edx +
jle loc_1020558  +
cwde   +
movsx ebx cx +
mov [ebp+var_8] ebx +
mov [ebp+var_14] eax +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
cdq   +
idiv  [ebp+arg_8] +
add ax [edi] +
mov word ptr [ebp+var_1C] ax +
mov eax [ebp+var_8] +
cdq   +
idiv  [ebp+arg_8] +
add ax [esi+0Ah] +
mov word ptr [ebp+var_1C+2] ax +
lea eax [ebp+var_1C] +
push eax  +
push [ebp+arg_4]  +
call sub_102485E  +
test eax eax +
jnz loc_1020589  +
mov eax [ebp+var_14] +
inc [ebp+var_C]  +
add [ebp+var_4] eax +
mov eax [ebp+var_C] +
add [ebp+var_8] ebx +
cmp eax [ebp+arg_8] +
jl loc_1020517  +
cmp [ebp+var_10] 0 +
mov esi [esi] +
jg loc_10204D3  +
mov eax [ebp+arg_0] +
mov eax [eax] +
push [ebp+arg_4]  +
mov [ebp+arg_0] eax +
call sub_10247F6  +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 0 +
jnz loc_10204C2  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
or eax 0FFFFFFFFh +
jmp loc_1020582  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_4] +
cmp edi [ebp+arg_8] +
jz loc_1020603  +
lea eax [ebp+arg_4] +
push eax  +
push [ebp+arg_0]  +
call sub_10246EA  +
test eax eax +
jnz loc_1020605  +
push [ebp+arg_0]  +
call sub_102477D  +
test eax eax +
jle loc_1020605  +
mov eax [ebp+arg_4] +
cmp dword ptr [eax] 0 +
jz loc_1020603  +
push esi  +
mov esi [eax+0Ch] +
mov ecx [eax+8] +
test esi esi +
jle loc_10205F8  +
movsx eax word ptr [ecx+8] +
imul eax [ebp+arg_8] +
cdq   +
idiv  edi +
dec esi  +
mov [ecx+8] ax +
movsx eax word ptr [ecx+0Ah] +
imul eax [ebp+arg_8] +
cdq   +
idiv  edi +
mov [ecx+0Ah] ax +
mov ecx [ecx] +
test esi esi +
jg loc_10205D0  +
mov eax [ebp+arg_4] +
mov eax [eax] +
mov [ebp+arg_4] eax +
cmp dword ptr [eax] 0 +
jnz loc_10205C6  +
pop esi  +
xor eax eax +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+arg_0]  +
call sub_10246EA  +
mov [ebp+var_4] eax +
test eax eax +
jnz loc_1020680  +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 0 +
jz loc_1020680  +
push esi  +
push edi  +
mov esi [eax+8] +
xor edi edi +
cmp [eax+0Ch] edi +
jle loc_1020674  +
mov eax esi +
call sub_101F614  +
test eax eax +
jz loc_1020650  +
mov ecx esi +
call sub_101F30E  +
jmp loc_1020669  +
mov eax esi +
call sub_101F6CB  +
mov ecx esi +
test eax eax +
jz loc_1020664  +
call sub_101F8EA  +
jmp loc_1020669  +
call sub_101F46B  +
mov eax [ebp+arg_0] +
mov esi [esi] +
inc edi  +
cmp edi [eax+0Ch] +
jl loc_102063C  +
mov eax [eax] +
mov [ebp+arg_0] eax +
cmp dword ptr [eax] 0 +
jnz loc_1020632  +
pop edi  +
pop esi  +
mov eax [ebp+var_4] +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push edi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
call sub_10246EA  +
mov edi eax +
test edi edi +
jnz loc_102077D  +
push ebx  +
call sub_102469F  +
mov eax [ebp+var_4] +
cmp [eax] edi +
jz loc_102077D  +
push esi  +
and [ebp+arg_0] 0 +
cmp dword ptr [eax+0Ch] 0 +
mov esi [eax+8] +
jle loc_102075F  +
movzx eax word ptr [esi+0Ch] +
mov ecx 1000h +
test eax ecx +
jz loc_1020701  +
mov eax [esi] +
mov ecx 2000h +
test [eax+0Ch] cx +
push ebx  +
mov eax esi +
jz loc_1020714  +
call sub_101FB67  +
mov edi eax +
test edi edi +
jl loc_102077C  +
inc [ebp+arg_0]  +
mov esi [esi] +
jmp loc_102074B  +
test eax 2000h +
jz loc_102071B  +
mov eax [esi+4] +
test [eax+0Ch] cx +
jnz loc_102071B  +
push ebx  +
mov eax esi +
call sub_101FD97  +
jmp loc_1020745  +
mov eax [esi+8] +
mov [ebp+var_C] eax +
mov eax [esi+0Ch] +
mov [ebp+var_8] eax +
mov eax 4000h +
test [esi+0Ch] ax +
jz loc_102073B  +
mov eax 80h +
mov word ptr [ebp+var_8] ax +
lea eax [ebp+var_C] +
push eax  +
push ebx  +
call sub_102485E  +
mov edi eax +
test edi edi +
jl loc_102077C  +
inc [ebp+arg_0]  +
mov eax [ebp+var_4] +
mov ecx [ebp+arg_0] +
cmp ecx [eax+0Ch] +
mov esi [esi] +
jl loc_10206CE  +
push ebx  +
call sub_10247F6  +
mov edi eax +
test edi edi +
jl loc_102077C  +
mov eax [ebp+var_4] +
mov eax [eax] +
mov [ebp+var_4] eax +
cmp dword ptr [eax] 0 +
jnz loc_10206BD  +
pop esi  +
mov eax edi +
pop edi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_8] 0 +
push esi  +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+arg_0]  +
call sub_10246EA  +
mov esi eax +
test esi esi +
jnz loc_1020840  +
push [ebp+arg_4]  +
call sub_102469F  +
mov eax [ebp+arg_0] +
cmp [eax] esi +
jz loc_1020840  +
push ebx  +
push edi  +
push dword ptr [eax+0Ch]  +
mov ecx [eax+8] +
lea eax [ebp+var_4] +
push eax  +
push ecx  +
push 0  +
mov [ebp+var_4] ecx +
call sub_101FF4E  +
mov ecx [ebp+arg_0] +
mov edx eax +
mov eax [ecx+0Ch] +
cmp edx eax +
jge loc_1020823  +
mov esi [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push dword ptr [esi]  +
lea eax [edx+1] +
push eax  +
call sub_101FF4E  +
push [ebp+arg_10]  +
mov ebx [ebp+arg_C] +
push [ebp+arg_8]  +
mov edi eax +
push [ebp+arg_4]  +
sub eax edx +
push eax  +
mov eax esi +
call sub_101FF89  +
mov esi eax +
test esi esi +
jl loc_102083E  +
mov ecx [ebp+arg_0] +
mov eax [ecx+0Ch] +
cmp edi eax +
jge loc_1020823  +
mov esi [ebp+var_8] +
mov edx edi +
jmp loc_10207E4  +
mov eax [ecx] +
push [ebp+arg_4]  +
mov [ebp+arg_0] eax +
call sub_10247F6  +
mov esi eax +
test esi esi +
jl loc_102083E  +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 0 +
jnz loc_10207C0  +
pop edi  +
pop ebx  +
mov eax esi +
pop esi  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_8] 0 +
push esi  +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+arg_0]  +
call sub_10246EA  +
mov esi eax +
test esi esi +
jnz loc_102093D  +
push [ebp+arg_4]  +
call sub_102469F  +
mov eax [ebp+arg_0] +
cmp [eax] esi +
jz loc_102093D  +
push ebx  +
push edi  +
push dword ptr [eax+0Ch]  +
mov ecx [eax+8] +
lea eax [ebp+var_4] +
push eax  +
push ecx  +
push 0  +
mov [ebp+var_4] ecx +
call sub_101FF4E  +
mov ebx eax +
mov eax [ebp+arg_0] +
mov ecx [eax+0Ch] +
cmp ebx ecx +
jge loc_102091C  +
mov esi [ebp+var_4] +
push ecx  +
lea eax [ebp+var_8] +
push eax  +
push dword ptr [esi]  +
lea eax [ebx+1] +
push eax  +
call sub_101FF4E  +
mov edi eax +
lea eax [esi+8] +
push eax  +
push [ebp+arg_4]  +
mov [ebp+var_4] edi +
call sub_102485E  +
test eax eax +
jl loc_1020904  +
mov esi [esi] +
sub edi ebx +
dec edi  +
xor ebx ebx +
test edi edi +
jle loc_1020904  +
cmp edi 3 +
jl loc_10208ED  +
mov ecx ebx +
and ecx 80000001h +
jns loc_10208EB  +
dec ecx  +
or ecx 0FFFFFFFEh +
inc ecx  +
jnz loc_10208FD  +
lea eax [esi+8] +
push eax  +
push [ebp+arg_4]  +
call sub_102485E  +
test eax eax +
jl loc_1020904  +
mov esi [esi] +
inc ebx  +
cmp ebx edi +
jl loc_10208D7  +
mov esi eax +
test eax eax +
jl loc_102093B  +
mov eax [ebp+arg_0] +
mov ecx [eax+0Ch] +
mov ebx [ebp+var_4] +
cmp ebx ecx +
jge loc_102091C  +
mov esi [ebp+var_8] +
jmp loc_10208A7  +
mov eax [eax] +
push [ebp+arg_4]  +
mov [ebp+arg_0] eax +
call sub_10247F6  +
mov esi eax +
test esi esi +
jl loc_102093B  +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 0 +
jnz loc_1020883  +
pop edi  +
pop ebx  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
push esi  +
push ebx  +
call sub_101F244  +
test eax eax +
jl loc_10209C8  +
push esi  +
call sub_102060F  +
test eax eax +
jl loc_10209C8  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push esi  +
call sub_101FAE0  +
test eax eax +
jl loc_10209C8  +
push esi  +
call sub_102068C  +
test eax eax +
jl loc_10209C8  +
push 2  +
push esi  +
push ebx  +
call sub_1020496  +
test eax eax +
jnz loc_10209C8  +
push ebx  +
push esi  +
call sub_10203D5  +
test eax eax +
jnz loc_10209C8  +
push esi  +
push ebx  +
call sub_10203D5  +
test eax eax +
jnz loc_10209C8  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push esi  +
call sub_102004A  +
test eax eax +
jnz loc_10209C8  +
push esi  +
call sub_1020233  +
test eax eax +
jge loc_10209CD  +
or eax 0FFFFFFFFh +
jmp loc_10209CF  +
xor eax eax +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_14] 0 +
jnz loc_10209ED  +
or eax 0FFFFFFFFh +
jmp loc_1020AC8  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_0] +
push esi  +
push edi  +
call sub_101F244  +
test eax eax +
jl loc_1020AC6  +
push esi  +
call sub_102060F  +
test eax eax +
jl loc_1020AC6  +
push [ebp+arg_18]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push esi  +
call sub_101FAE0  +
test eax eax +
jl loc_1020AC6  +
push ebx  +
push esi  +
mov ebx edi +
call sub_102068C  +
test eax eax +
jl loc_1020AC5  +
mov ebx [ebp+arg_14] +
cmp dword ptr [ebx+4] 0 +
jz loc_1020A81  +
push 2  +
push esi  +
push edi  +
call sub_1020496  +
test eax eax +
jnz loc_1020AC5  +
push 1  +
push 2  +
push 1  +
push edi  +
push esi  +
call sub_1020789  +
test eax eax +
jl loc_1020AC5  +
push esi  +
push edi  +
call sub_102084C  +
test eax eax +
jl loc_1020AC5  +
push [ebp+arg_18]  +
push dword ptr [ebx]  +
push edi  +
push esi  +
call sub_1015E5D  +
test eax eax +
jnz loc_1020AC5  +
jmp loc_1020A9D  +
push 1  +
push 2  +
push 1  +
push esi  +
push edi  +
call sub_1020789  +
test eax eax +
jl loc_1020AC5  +
push edi  +
push esi  +
call sub_102084C  +
test eax eax +
jl loc_1020AC5  +
push edi  +
mov ebx esi +
call sub_1020233  +
test eax eax +
jl loc_1020AC5  +
push edi  +
push esi  +
call sub_101F114  +
test eax eax +
jl loc_1020AC5  +
push edi  +
call sub_1020233  +
test eax eax +
jl loc_1020AC5  +
push edi  +
push esi  +
call sub_10200ED  +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push esi  +
mov esi eax +
test esi esi +
jz loc_1020B0E  +
test ecx ecx +
jz loc_1020B0E  +
mov eax dword_102F75C +
cmp eax dword_102F760 +
jge loc_1020B0E  +
test eax eax +
jl loc_1020B0E  +
mov ecx [ecx] +
push edi  +
mov edi eax +
shl edi 4 +
add edi dword_102F764 +
mov [esi] ecx +
movs   +
movs   +
movs   +
movs   +
inc eax  +
pop edi  +
mov dword_102F75C eax +
xor eax eax +
pop esi  +
retn   +
or eax 0FFFFFFFFh +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1020B3C  +
movzx cx byte ptr [eax] +
mov edx 100h +
imul cx dx +
movzx dx byte ptr [eax+1] +
add cx dx +
mov [eax] cx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1020B6C  +
movzx ecx byte ptr [eax] +
push esi  +
push edi  +
push 3  +
lea edx [eax+1] +
pop esi  +
movzx edi byte ptr [edx] +
shl ecx 8 +
or ecx edi +
inc edx  +
dec esi  +
jnz loc_1020B5C  +
pop edi  +
mov [eax] ecx +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1020B8E  +
movzx ecx word ptr [eax] +
mov edx ecx +
sar edx 8 +
mov [eax] dl +
mov [eax+1] cl +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1020BB4  +
mov ecx [eax] +
push 4  +
add eax 3 +
pop edx  +
mov [eax] cl +
dec eax  +
sar ecx 8 +
dec edx  +
jnz loc_1020BAB  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+arg_4] +
mov eax ecx +
cdq   +
push ebx  +
mov ebx [ebp+arg_0] +
and edx 3 +
push esi  +
add eax edx +
push edi  +
mov esi eax +
xor edi edi +
sar esi 2 +
cmp ebx edi +
jnz loc_1020BE3  +
xor eax eax +
jmp loc_1020C52  +
cmp esi edi +
jle loc_1020C03  +
mov eax [ebx] +
mov [ebp+var_4] eax +
lea eax [ebp+var_4] +
push eax  +
dec esi  +
add ebx 4 +
call sub_1020B45  +
add edi [ebp+var_4] +
test esi esi +
jg loc_1020BE7  +
mov ecx [ebp+arg_4] +
lea eax [ecx+3] +
cdq   +
and edx 3 +
add eax edx +
sar eax 2 +
shl eax 2 +
sub eax ecx +
jz loc_1020C50  +
mov esi [ebp+arg_0] +
mov edx ebx +
sub edx eax +
add edx 4 +
add esi ecx +
cmp edx esi +
jg loc_1020C50  +
cmp eax 4 +
jge loc_1020C3E  +
push 4  +
pop ecx  +
sub ecx eax +
push ecx  +
lea eax [ebp+arg_0] +
push ebx  +
push eax  +
call memcpy  +
add esp 0Ch +
mov eax [ebp+arg_0] +
mov [ebp+var_4] eax +
lea eax [ebp+var_4] +
push eax  +
call sub_1020B45  +
add edi [ebp+var_4] +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
mov ebx ecx +
xor ecx ecx +
push esi  +
push edi  +
cmp eax ecx +
jz loc_1020D5B  +
cmp [ebp+hFile] 0FFFFFFFFh +
jz loc_1020D5B  +
cmp [ebp+lpBuffer] ecx +
jz loc_1020D5B  +
cmp [ebp+arg_10] ecx +
jz loc_1020D5B  +
mov edx [ebp+arg_C] +
and edx 80000003h +
jns loc_1020CA1  +
dec edx  +
or edx 0FFFFFFFCh +
inc edx  +
jnz loc_1020D5B  +
mov eax [eax] +
mov edi ebx +
and edi 80000003h +
mov [ebp+var_10] eax +
jns loc_1020CBB  +
dec edi  +
or edi 0FFFFFFFCh +
inc edi  +
jz loc_1020CC4  +
push 4  +
pop eax  +
sub eax edi +
mov edi eax +
cmp ebx ecx +
mov [ebp+var_4] ecx +
mov [ebp+var_C] ecx +
mov [ebp+var_8] ecx +
jle loc_1020D4F  +
jmp loc_1020CD5  +
xor ecx ecx +
mov esi [ebp+arg_C] +
cmp ebx esi +
jg loc_1020CE9  +
mov esi ebx +
cmp edi ecx +
jz loc_1020CE9  +
mov [ebp+var_C] 1 +
push esi  +
push [ebp+lpBuffer]  +
push [ebp+var_4]  +
push [ebp+var_10]  +
push [ebp+arg_0]  +
call ds:GetFontData  +
cmp eax esi +
jnz loc_1020D5B  +
cmp [ebp+var_C] 0 +
jz loc_1020D19  +
mov eax [ebp+lpBuffer] +
push edi  +
add eax ebx +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
add esi edi +
cmp esi [ebp+arg_C] +
jg loc_1020D5B  +
push esi  +
push [ebp+lpBuffer]  +
call sub_1020BBD  +
add [ebp+var_8] eax +
push 0  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push esi  +
push [ebp+lpBuffer]  +
push [ebp+hFile]  +
call ds:WriteFile  +
test eax eax +
jz loc_1020D5B  +
cmp [ebp+NumberOfBytesWritten] esi +
jnz loc_1020D5B  +
add [ebp+var_4] esi +
sub ebx esi +
test ebx ebx +
jg loc_1020CD3  +
mov eax [ebp+var_8] +
mov ecx [ebp+arg_10] +
mov [ecx] eax +
xor eax eax +
jmp loc_1020D5E  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
or eax 0FFFFFFFFh +
push ebx  +
push edi  +
cmp [ebp+hFile] eax +
jz loc_1020DE1  +
test esi esi +
jz loc_1020DE1  +
mov edi 4000h +
push edi  +
call ds:malloc  +
mov ebx eax +
pop ecx  +
test ebx ebx +
jnz loc_1020D96  +
or eax 0FFFFFFFFh +
jmp loc_1020DE1  +
push 1  +
push 0  +
push 0  +
push [ebp+hFile]  +
call ds:SetFilePointer  +
mov ecx [esi+0Ch] +
mov [ebp+var_4] eax +
lea eax [ebp+hFile] +
push eax  +
push edi  +
push ebx  +
push [ebp+hFile]  +
mov eax esi +
push [ebp+arg_0]  +
call sub_1020C5E  +
push ebx  +
test eax eax +
jz loc_1020DCC  +
call ds:free  +
pop ecx  +
jmp loc_1020D91  +
mov eax [ebp+var_4] +
mov [esi+8] eax +
mov eax [ebp+hFile] +
mov [esi+4] eax +
call ds:free  +
pop ecx  +
xor eax eax +
pop edi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
cmp [ebp+hFile] 0FFFFFFFFh +
push ebx  +
push esi  +
jz loc_1020E9E  +
xor ebx ebx +
cmp edi ebx +
jz loc_1020E9E  +
cmp [edi+0Ch] ebx +
jnz loc_1020E16  +
xor eax eax +
jmp loc_1020EA1  +
push 4000h  +
call ds:malloc  +
pop ecx  +
mov [ebp+lpBuffer] eax +
cmp eax ebx +
jz loc_1020E9E  +
push ebx  +
push ebx  +
push dword ptr [edi+8]  +
push [ebp+hFile]  +
call ds:SetFilePointer  +
cmp eax [edi+8] +
jnz loc_1020E94  +
mov esi [edi+0Ch] +
mov [ebp+var_C] ebx +
jmp loc_1020E7B  +
mov eax 4000h +
cmp esi eax +
jg loc_1020E4F  +
mov eax esi +
push ebx  +
lea ecx [ebp+NumberOfBytesRead] +
push ecx  +
push eax  +
push [ebp+lpBuffer]  +
push [ebp+hFile]  +
call ds:ReadFile  +
test eax eax +
jz loc_1020E94  +
cmp [ebp+NumberOfBytesRead] ebx +
jz loc_1020E94  +
push [ebp+NumberOfBytesRead]  +
push [ebp+lpBuffer]  +
call sub_1020BBD  +
add [ebp+var_C] eax +
sub esi [ebp+NumberOfBytesRead] +
cmp esi ebx +
jg loc_1020E44  +
mov eax [ebp+var_C] +
push [ebp+lpBuffer]  +
mov [edi+4] eax +
call ds:free  +
pop ecx  +
jmp loc_1020E0F  +
push [ebp+lpBuffer]  +
call ds:free  +
pop ecx  +
or eax 0FFFFFFFFh +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+hFile] 0FFFFFFFFh +
push esi  +
jz loc_1020F12  +
mov esi [ebp+NumberOfBytesRead] +
test esi esi +
jz loc_1020F12  +
push 0  +
push 0  +
push 0  +
push [ebp+hFile]  +
call ds:SetFilePointer  +
push 0  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push 0Ch  +
push esi  +
push [ebp+hFile]  +
call ds:ReadFile  +
test eax eax +
jz loc_1020F12  +
cmp [ebp+NumberOfBytesRead] 0Ch +
jnz loc_1020F12  +
lea eax [esi+4] +
push eax  +
call sub_1020B18  +
lea eax [esi+6] +
push eax  +
call sub_1020B18  +
lea eax [esi+8] +
push eax  +
call sub_1020B18  +
add esi 0Ah +
push esi  +
call sub_1020B18  +
xor eax eax +
jmp loc_1020F15  +
or eax 0FFFFFFFFh +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
or eax 0FFFFFFFFh +
push esi  +
mov esi [ebp+arg_4] +
cmp ebx eax +
jz loc_1020FA3  +
test esi esi +
jz loc_1020FA3  +
push edi  +
lea edi [ebp+Buffer] +
movs   +
movs   +
lea eax [ebp+var_C] +
push eax  +
movs   +
call sub_1020B75  +
lea eax [ebp+var_C+2] +
push eax  +
call sub_1020B75  +
lea eax [ebp+var_8] +
push eax  +
call sub_1020B75  +
lea eax [ebp+var_8+2] +
push eax  +
call sub_1020B75  +
xor esi esi +
push esi  +
push esi  +
push esi  +
push ebx  +
call ds:SetFilePointer  +
pop edi  +
test eax eax +
jnz loc_1020FA0  +
push esi  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push 0Ch  +
lea eax [ebp+Buffer] +
push eax  +
push ebx  +
call ds:WriteFile  +
test eax eax +
jz loc_1020FA0  +
cmp [ebp+NumberOfBytesWritten] 0Ch +
jnz loc_1020FA0  +
xor eax eax +
jmp loc_1020FA3  +
or eax 0FFFFFFFFh +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1026CC5  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp [ebp+hFile] 0FFFFFFFFh +
push esi  +
push edi  +
jz loc_1021032  +
cmp [ebp+lpBuffer] 0 +
jz loc_1021032  +
push 0  +
push 0  +
push 0Ch  +
push [ebp+hFile]  +
call ds:SetFilePointer  +
cmp eax 0Ch +
jnz loc_1021032  +
mov edi [ebp+arg_8] +
push 0  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
mov esi edi +
shl esi 4 +
push esi  +
push [ebp+lpBuffer]  +
push [ebp+hFile]  +
call ds:ReadFile  +
test eax eax +
jz loc_1021032  +
cmp [ebp+NumberOfBytesRead] esi +
jnz loc_1021032  +
test edi edi +
jle loc_102102E  +
mov esi [ebp+lpBuffer] +
add esi 8 +
lea eax [esi-4] +
push eax  +
dec edi  +
call sub_1020B45  +
push esi  +
call sub_1020B45  +
lea eax [esi+4] +
push eax  +
call sub_1020B45  +
add esi 10h +
test edi edi +
jg loc_102100E  +
xor eax eax +
jmp loc_1021035  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+hFile] +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
mov [ebp+var_1C] eax +
cmp eax 0FFFFFFFFh +
jz loc_10210D1  +
xor esi esi +
cmp ebx esi +
jz loc_10210D1  +
push esi  +
push esi  +
push 0Ch  +
push eax  +
call ds:SetFilePointer  +
cmp eax 0Ch +
jnz loc_10210D1  +
cmp [ebp+arg_8] esi +
jle loc_10210CD  +
dec [ebp+arg_8]  +
mov esi ebx +
lea edi [ebp+Buffer] +
movs   +
movs   +
movs   +
lea eax [ebp+var_10] +
push eax  +
movs   +
add ebx 10h +
call sub_1020B97  +
lea eax [ebp+var_C] +
push eax  +
call sub_1020B97  +
lea eax [ebp+var_8] +
push eax  +
call sub_1020B97  +
push 0  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push 10h  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+var_1C]  +
call ds:WriteFile  +
test eax eax +
jz loc_10210D1  +
cmp [ebp+NumberOfBytesWritten] 10h +
jnz loc_10210D1  +
cmp [ebp+arg_8] 0 +
jg loc_102107E  +
xor eax eax +
jmp loc_10210D4  +
or eax 0FFFFFFFFh +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1026CC5  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test eax eax +
jz loc_102110B  +
test ecx ecx +
jz loc_102110B  +
jmp loc_1021105  +
mov edx [eax] +
dec [ebp+arg_0]  +
cmp edx [ecx] +
jz loc_102110D  +
add eax 10h +
cmp [ebp+arg_0] 0 +
jg loc_10210F9  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+hFile] +
push edi  +
mov edi [ebp+arg_4] +
cmp esi 0FFFFFFFFh +
jz loc_10211A0  +
test edi edi +
jz loc_10211A0  +
cmp [ebp+arg_8] 0 +
jz loc_10211A0  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push esi  +
call sub_1020EAC  +
test eax eax +
jnz loc_10211A0  +
movsx eax [ebp+var_C] +
shl eax 4 +
push eax  +
call ds:malloc  +
mov ebx eax +
pop ecx  +
test ebx ebx +
jz loc_10211A0  +
movsx eax [ebp+var_C] +
push eax  +
push ebx  +
push esi  +
call sub_1020FB8  +
test eax eax +
jnz loc_1021198  +
movsx eax [ebp+var_C] +
mov ecx [ebp+arg_8] +
push eax  +
mov eax ebx +
call sub_10210EA  +
test eax eax +
jz loc_1021198  +
mov esi eax +
movs   +
movs   +
movs   +
push ebx  +
movs   +
call ds:free  +
pop ecx  +
xor eax eax +
jmp loc_10211A3  +
push ebx  +
call ds:free  +
pop ecx  +
or eax 0FFFFFFFFh +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1026CC5  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+hFile] 0FFFFFFFFh +
push ebx  +
push esi  +
push edi  +
jz loc_1021229  +
mov esi [ebp+NumberOfBytesRead] +
test esi esi +
jz loc_1021229  +
mov ebx [ebp+arg_8] +
test ebx ebx +
jz loc_1021229  +
push 0  +
push 0  +
push dword ptr [esi+8]  +
push [ebp+hFile]  +
call ds:SetFilePointer  +
cmp eax [esi+8] +
jnz loc_1021229  +
mov esi [esi+0Ch] +
mov edi [ebp+nNumberOfBytesToRead] +
cmp edi esi +
jge loc_10211F6  +
mov esi edi +
push 0  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push esi  +
push ebx  +
push [ebp+hFile]  +
call ds:ReadFile  +
test eax eax +
jz loc_1021229  +
cmp [ebp+NumberOfBytesRead] esi +
jnz loc_1021229  +
cmp esi edi +
jnb loc_1021225  +
sub edi esi +
push edi  +
lea eax [esi+ebx] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
mov eax esi +
jmp loc_102122C  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+hFile] +
push edi  +
mov edi [ebp+arg_4] +
cmp esi 0FFFFFFFFh +
jz loc_1021289  +
test edi edi +
jz loc_1021289  +
cmp [ebp+arg_C] 0 +
jz loc_1021289  +
push [ebp+arg_C]  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push esi  +
call sub_1021116  +
test eax eax +
jnz loc_1021289  +
push [ebp+nNumberOfBytesToRead]  +
lea eax [ebp+NumberOfBytesRead] +
push edi  +
push eax  +
push esi  +
call sub_10211B9  +
cmp eax [ebp+nNumberOfBytesToRead] +
jnz loc_1021289  +
xor eax eax +
jmp loc_102128C  +
or eax 0FFFFFFFFh +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1026CC5  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_8] +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
mov [ebp+hFile] eax +
mov [ebp+var_18] ecx +
cmp eax 0FFFFFFFFh +
jz loc_102131F  +
test ebx ebx +
jz loc_102131F  +
test ecx ecx +
jz loc_102131F  +
cmp [ebp+arg_C] 0 +
jz loc_102131F  +
push [ebp+arg_C]  +
lea ecx [ebp+NumberOfBytesRead] +
push ecx  +
push eax  +
call sub_1021116  +
test eax eax +
jnz loc_102131F  +
mov edi [ebp+var_8] +
push edi  +
call ds:malloc  +
mov esi eax +
pop ecx  +
test esi esi +
jz loc_102131F  +
push edi  +
push esi  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push [ebp+hFile]  +
call sub_10211B9  +
cmp eax edi +
jnz loc_1021317  +
mov eax [ebp+var_18] +
mov [ebx] esi +
mov [eax] edi +
xor eax eax +
jmp loc_1021322  +
push esi  +
call ds:free  +
pop ecx  +
or eax 0FFFFFFFFh +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1026CC5  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+hFile] 0FFFFFFFFh +
push esi  +
push edi  +
jz loc_10213A0  +
mov esi [ebp+NumberOfBytesWritten] +
test esi esi +
jz loc_10213A0  +
cmp [ebp+lpBuffer] 0 +
jz loc_10213A0  +
push 0  +
push 0  +
push dword ptr [esi+8]  +
push [ebp+hFile]  +
call ds:SetFilePointer  +
cmp eax [esi+8] +
jnz loc_10213A0  +
mov edi [esi+0Ch] +
cmp [ebp+nNumberOfBytesToWrite] edi +
jge loc_1021372  +
mov edi [ebp+nNumberOfBytesToWrite] +
push 0  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push edi  +
push [ebp+lpBuffer]  +
push [ebp+hFile]  +
call ds:WriteFile  +
test eax eax +
jz loc_10213A0  +
cmp [ebp+NumberOfBytesWritten] edi +
jnz loc_10213A0  +
push [ebp+nNumberOfBytesToWrite]  +
push [ebp+lpBuffer]  +
call sub_1020BBD  +
mov [esi+4] eax +
mov eax edi +
jmp loc_10213A3  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
cmp [ebp+hFile] 0FFFFFFFFh +
push ebx  +
push esi  +
push edi  +
jz loc_102145F  +
mov edi [ebp+arg_4] +
xor esi esi +
cmp edi esi +
jz loc_102145F  +
cmp [ebp+lpBuffer] esi +
jz loc_102145F  +
push 1  +
push esi  +
push esi  +
push [ebp+hFile]  +
call ds:SetFilePointer  +
cmp eax esi +
mov [ebp+var_C] eax +
jl loc_102145F  +
mov ebx ds:WriteFile +
push esi  +
mov esi [ebp+nNumberOfBytesToWrite] +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push esi  +
push [ebp+lpBuffer]  +
push [ebp+hFile]  +
call ebx  +
test eax eax +
jz loc_102145F  +
cmp [ebp+NumberOfBytesWritten] esi +
jnz loc_102145F  +
mov eax esi +
and eax 80000003h +
jns loc_102141B  +
dec eax  +
or eax 0FFFFFFFCh +
inc eax  +
jz loc_1021446  +
push 4  +
pop esi  +
sub esi eax +
xor eax eax +
push eax  +
lea edi [ebp+Buffer] +
stos   +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push esi  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+hFile]  +
call ebx  +
test eax eax +
jz loc_102145F  +
cmp [ebp+NumberOfBytesWritten] esi +
jnz loc_102145F  +
mov esi [ebp+nNumberOfBytesToWrite] +
mov edi [ebp+arg_4] +
mov eax [ebp+var_C] +
push esi  +
push [ebp+lpBuffer]  +
mov [edi+8] eax +
mov [edi+0Ch] esi +
call sub_1020BBD  +
mov [edi+4] eax +
xor eax eax +
jmp loc_1021462  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
test esi esi +
jz loc_1021493  +
mov edi [ebp+0Ch] +
test edi edi +
jz loc_1021493  +
push 4  +
pop ecx  +
xor eax eax +
cmps   +
jz loc_1021496  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
jmp loc_1021496  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
cmp [ebp+hFile] 0FFFFFFFFh +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
jz loc_1021577  +
xor ebx ebx +
cmp esi ebx +
jz loc_1021577  +
cmp [ebp+NumberOfBytesWritten] ebx +
jz loc_1021577  +
mov edi [ebp+lpBuffer] +
cmp edi ebx +
jz loc_1021577  +
add edi 8 +
cmp eax ebx +
mov [ebp+var_8] eax +
mov [ebp+var_4] ebx +
mov [edi] ebx +
jle loc_1021577  +
mov ecx [esi] +
dec [ebp+var_8]  +
mov eax offset aHead +
cmp ecx [eax] +
jnz loc_10214F7  +
mov ebx esi +
mov eax ecx +
mov [ebp+var_C] eax +
lea eax [ebp+var_C] +
push eax  +
call sub_1020B45  +
mov eax [esi+4] +
mov ecx [esi+8] +
lea eax [ecx+eax*2] +
add eax [esi+0Ch] +
add esi 10h +
add eax [ebp+var_C] +
add [ebp+var_4] eax +
cmp [ebp+var_8] 0 +
jg loc_10214E7  +
xor esi esi +
cmp ebx esi +
jz loc_1021577  +
push 0Ch  +
push [ebp+NumberOfBytesWritten]  +
call sub_1020BBD  +
add [ebp+var_4] eax +
push esi  +
push esi  +
push dword ptr [ebx+8]  +
push [ebp+hFile]  +
call ds:SetFilePointer  +
cmp eax [ebx+8] +
jnz loc_1021577  +
mov eax 0B1B0AFBAh +
sub eax [ebp+var_4] +
push edi  +
mov [edi] eax +
call sub_1020B97  +
push esi  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push 36h  +
push [ebp+lpBuffer]  +
push [ebp+hFile]  +
call ds:WriteFile  +
test eax eax +
jz loc_1021577  +
cmp [ebp+NumberOfBytesWritten] 36h +
jnz loc_1021577  +
xor eax eax +
jmp loc_102157A  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi eax +
test ecx ecx +
jz loc_10215D3  +
push ebx  +
xor ebx ebx +
push edi  +
xor edi edi +
inc ebx  +
cmp esi 2 +
jl loc_10215A8  +
cdq   +
sub eax edx +
sar eax 1 +
inc edi  +
add ebx ebx +
cmp eax 2 +
jge loc_102159B  +
mov eax ebx +
mov [ecx+4] si +
shl eax 4 +
shl esi 4 +
mov [ecx+8] di +
sub esi eax +
pop edi  +
mov byte ptr [ecx+3] 0 +
mov byte ptr [ecx+2] 0 +
mov byte ptr [ecx] 0 +
mov byte ptr [ecx+1] 1 +
mov [ecx+6] ax +
mov [ecx+0Ah] si +
pop ebx  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_102161E  +
test ebx ebx +
jz loc_102161E  +
cmp edi dword_102F74C +
jg loc_102161E  +
test edi edi +
jl loc_102161E  +
push esi  +
mov esi dword_102F750 +
push edi  +
push [ebp+arg_0]  +
push esi  +
call memcpy  +
sub dword_102F74C edi +
add esi edi +
add esp 0Ch +
mov dword_102F750 esi +
mov [ebx] esi +
xor eax eax +
pop esi  +
jmp loc_1021621  +
or eax 0FFFFFFFFh +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi eax +
test ebx ebx +
jz loc_1021679  +
test esi esi +
jz loc_1021679  +
cmp [ebp+arg_0] 0 +
jz loc_1021679  +
push edi  +
push 9  +
xor eax eax +
pop ecx  +
mov edi ebx +
movs   +
mov [ebx+0Ch] ax +
mov [ebx+0Eh] ax +
mov [ebx+12h] ax +
lea eax [ebx+14h] +
xor ecx ecx +
inc ecx  +
push eax  +
mov [eax] cx +
call sub_1020B75  +
mov cx word ptr dword_102F768 +
lea eax [ebx+22h] +
push eax  +
mov [eax] cx +
call sub_1020B75  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
xor esi esi +
cmp edi esi +
jz loc_10216F0  +
push [ebp+arg_0]  +
mov [ebp+var_8] esi +
call sub_102477D  +
mov ebx eax +
cmp ebx esi +
jl loc_10216F0  +
jz loc_102173F  +
movzx eax word ptr [edi+8] +
mov [ebp+var_4] eax +
lea eax [ebp+var_4] +
push eax  +
call sub_1020B18  +
movsx eax word ptr [ebp+var_4] +
cmp eax ebx +
jge loc_10216E0  +
movzx eax bx +
mov [ebp+var_4] eax +
lea eax [ebp+var_4] +
push eax  +
call sub_1020B75  +
mov ax word ptr [ebp+var_4] +
mov [edi+8] ax +
mov [ebp+var_8] 1 +
lea eax [ebp+var_C] +
push eax  +
push [ebp+arg_0]  +
call sub_10246EA  +
test eax eax +
jz loc_10216F5  +
or eax 0FFFFFFFFh +
jmp loc_1021742  +
test ebx ebx +
jle loc_1021709  +
mov eax [ebp+var_C] +
add esi [eax+0Ch] +
mov eax [eax] +
dec ebx  +
mov [ebp+var_C] eax +
test ebx ebx +
jg loc_10216FC  +
movzx eax word ptr [edi+6] +
mov [ebp+var_4] eax +
lea eax [ebp+var_4] +
push eax  +
call sub_1020B18  +
movsx eax word ptr [ebp+var_4] +
cmp eax esi +
jge loc_102173F  +
movzx eax si +
mov [ebp+var_4] eax +
lea eax [ebp+var_4] +
push eax  +
call sub_1020B75  +
mov ax word ptr [ebp+var_4] +
mov [edi+6] ax +
mov [ebp+var_8] 1 +
mov eax [ebp+var_8] +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor ecx ecx +
cmp edi ecx +
jz loc_102177B  +
cmp esi ecx +
jz loc_102177B  +
mov eax [esi] +
push ecx  +
push ecx  +
push ecx  +
push eax  +
push [ebp+arg_0]  +
call ds:GetFontData  +
cmp eax 0FFFFFFFFh +
jz loc_102177B  +
mov ecx [esi] +
mov [edi+0Ch] eax +
mov [edi] ecx +
xor eax eax +
jmp loc_102177E  +
or eax 0FFFFFFFFh +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
jz loc_10217B6  +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_10217B6  +
push [ebp+arg_8]  +
mov eax [eax] +
push [ebp+arg_4]  +
push 0  +
push eax  +
push [ebp+arg_0]  +
call ds:GetFontData  +
sub eax [ebp+arg_8] +
neg eax  +
sbb eax eax +
jmp loc_10217B9  +
or eax 0FFFFFFFFh +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_8] +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_C] +
push edi  +
mov [ebp+var_18] ecx +
mov [ebp+var_1C] eax +
mov [ebp+var_20] esi +
test ebx ebx +
jz loc_102183A  +
test eax eax +
jz loc_102183A  +
test esi esi +
jz loc_102183A  +
push ecx  +
lea edi [ebp+var_14] +
call sub_102174D  +
test eax eax +
jnz loc_102183A  +
mov esi [ebp+var_8] +
push esi  +
call ds:malloc  +
mov edi eax +
pop ecx  +
test edi edi +
jz loc_102183A  +
push [ebp+var_20]  +
push esi  +
push edi  +
push [ebp+var_18]  +
call sub_1021787  +
test eax eax +
jnz loc_1021832  +
mov eax [ebp+var_1C] +
mov [ebx] edi +
mov [eax] esi +
xor eax eax +
jmp loc_102183D  +
push edi  +
call ds:free  +
pop ecx  +
or eax 0FFFFFFFFh +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1026CC5  +
leave   +
retn 10h  +
***
call sub_100ABC1  +
call sub_100AD79  +
movzx ecx ax +
movzx eax cx +
mov edx ebx +
sar edx 8 +
sub eax 0DFFDh +
mov byte_102CC62 dl +
mov edx ecx +
mov byte_102CC77 cl +
mov ecx eax +
shr edx 8 +
sar ecx 8 +
mov dword_102F768 eax +
mov byte_102CC63 bl +
mov byte_102CC76 dl +
mov byte_102CC40 cl +
mov byte_102CC41 al +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
push ebx  +
push esi  +
push edi  +
xor edi edi +
cmp [ebp+arg_4] edi +
jz loc_1021AE1  +
cmp [ebp+arg_8] edi +
jz loc_1021AE1  +
mov esi [ebp+arg_C] +
cmp esi edi +
jz loc_1021AE1  +
lea eax [ebp+var_3C] +
push eax  +
push [ebp+arg_0]  +
call ds:GetTextMetricsW  +
test eax eax +
jz loc_1021AE1  +
push 4Eh  +
call ds:malloc  +
mov ebx eax +
pop ecx  +
cmp ebx edi +
jz loc_1021AE1  +
push 4Eh  +
push edi  +
push ebx  +
call memset  +
xor eax eax +
add esp 0Ch +
inc eax  +
push ebx  +
mov [ebx] ax +
call sub_1020B75  +
mov cx [esi+8] +
lea eax [ebx+2] +
inc cx  +
push eax  +
mov [eax] cx +
call sub_1020B75  +
movzx ecx word ptr [ebp+var_3C.tmWeight] +
cmp [ebp+var_3C.tmWeight] edi +
jnz loc_102192F  +
mov ecx 1F4h +
lea eax [ebx+4] +
push eax  +
mov [eax] cx +
call sub_1020B75  +
push 5  +
lea eax [ebx+6] +
pop ecx  +
push eax  +
mov [eax] cx +
call sub_1020B75  +
lea eax [ebx+8] +
xor ecx ecx +
push eax  +
mov [eax] cx +
call sub_1020B75  +
mov eax [esi+8] +
inc eax  +
cdq   +
lea ecx [ebx+0Ah] +
sub eax edx +
sar eax 1 +
push ecx  +
mov [ecx] ax +
call sub_1020B75  +
mov eax [esi+0Ch] +
inc eax  +
cdq   +
lea ecx [ebx+0Ch] +
sub eax edx +
sar eax 1 +
push ecx  +
mov [ecx] ax +
call sub_1020B75  +
lea eax [ebx+0Eh] +
xor ecx ecx +
push eax  +
mov [eax] cx +
call sub_1020B75  +
lea eax [ebx+10h] +
xor ecx ecx +
push eax  +
mov [eax] cx +
call sub_1020B75  +
mov eax [esi+8] +
inc eax  +
cdq   +
lea ecx [ebx+12h] +
sub eax edx +
sar eax 1 +
push ecx  +
mov [ecx] ax +
call sub_1020B75  +
mov eax [esi+0Ch] +
inc eax  +
cdq   +
lea ecx [ebx+14h] +
sub eax edx +
sar eax 1 +
push ecx  +
mov [ecx] ax +
call sub_1020B75  +
mov eax [esi+8] +
inc eax  +
cdq   +
lea ecx [ebx+16h] +
sub eax edx +
sar eax 1 +
push ecx  +
mov [ecx] ax +
call sub_1020B75  +
mov eax [esi+0Ch] +
inc eax  +
cdq   +
lea ecx [ebx+18h] +
sub eax edx +
sar eax 1 +
push ecx  +
mov [ecx] ax +
call sub_1020B75  +
mov eax [esi+0Ch] +
lea ecx [ebx+1Ah] +
push 14h  +
cdq   +
pop edi  +
idiv  edi +
push ecx  +
mov [ecx] ax +
call sub_1020B75  +
mov eax [esi+0Ch] +
cdq   +
and edx 3 +
lea ecx [ebx+1Ch] +
add eax edx +
sar eax 2 +
push ecx  +
mov [ecx] ax +
call sub_1020B75  +
lea eax [ebx+1Eh] +
xor ecx ecx +
push eax  +
mov [eax] cx +
call sub_1020B75  +
lea edi [ebx+20h] +
mov esi offset unk_102CD68 +
movs   +
push 40h  +
movs   +
lea eax [ebx+3Eh] +
pop ecx  +
push eax  +
movs   +
mov [eax] cx +
call sub_1020B75  +
push 20h  +
lea eax [ebx+40h] +
pop ecx  +
push eax  +
mov [eax] cx +
call sub_1020B75  +
lea eax [ebx+42h] +
mov ecx 0FFE5h +
push eax  +
mov [eax] cx +
call sub_1020B75  +
mov esi [ebp+arg_C] +
mov cx [esi+0Ch] +
lea eax [ebx+44h] +
inc cx  +
push eax  +
mov [eax] cx +
call sub_1020B75  +
mov eax [esi+0Ch] +
cdq   +
and edx 7 +
add eax edx +
lea ecx [ebx+46h] +
sar eax 3 +
neg eax  +
push ecx  +
mov [ecx] ax +
call sub_1020B75  +
lea eax [ebx+48h] +
xor ecx ecx +
push eax  +
mov [eax] cx +
call sub_1020B75  +
mov cx [esi+0Ch] +
lea eax [ebx+4Ah] +
inc cx  +
push eax  +
mov [eax] cx +
call sub_1020B75  +
mov eax [esi+0Ch] +
cdq   +
and edx 7 +
lea ecx [ebx+4Ch] +
add eax edx +
sar eax 3 +
push ecx  +
mov [ecx] ax +
call sub_1020B75  +
mov eax [ebp+arg_8] +
mov dword ptr [eax] 4Eh +
mov eax [ebp+arg_4] +
mov [eax] ebx +
xor eax eax +
jmp loc_1021AE4  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
test esi esi +
jz locret_1021BB9  +
test ebx ebx +
jz locret_1021BB9  +
push edi  +
push 9  +
xor eax eax +
pop ecx  +
mov edi esi +
stos   +
mov byte ptr [esi+1] 1 +
mov cx [ebx+0Ch] +
lea eax [esi+4] +
inc cx  +
push eax  +
mov [eax] cx +
call sub_1020B75  +
mov eax [ebx+0Ch] +
cdq   +
and edx 7 +
add eax edx +
lea ecx [esi+6] +
sar eax 3 +
neg eax  +
push ecx  +
mov [ecx] ax +
call sub_1020B75  +
lea eax [esi+8] +
xor ecx ecx +
push eax  +
mov [eax] cx +
call sub_1020B75  +
mov cx [ebx+8] +
lea eax [esi+0Ah] +
inc cx  +
push eax  +
mov [eax] cx +
call sub_1020B75  +
lea eax [esi+0Ch] +
xor ecx ecx +
push eax  +
mov [eax] cx +
call sub_1020B75  +
lea eax [esi+0Eh] +
xor ecx ecx +
push eax  +
mov [eax] cx +
call sub_1020B75  +
mov cx [ebx+8] +
lea eax [esi+10h] +
inc cx  +
push eax  +
mov [eax] cx +
call sub_1020B75  +
lea eax [esi+12h] +
xor ecx ecx +
inc ecx  +
push eax  +
mov [eax] cx +
call sub_1020B75  +
lea eax [esi+14h] +
xor ecx ecx +
push eax  +
mov [eax] cx +
call sub_1020B75  +
mov cx word ptr dword_102F768 +
lea eax [esi+22h] +
push eax  +
mov [eax] cx +
call sub_1020B75  +
pop edi  +
retn   +
***
test esi esi +
jz locret_1021C9F  +
test edi edi +
jz locret_1021C9F  +
push 36h  +
push 0  +
push esi  +
call memset  +
lea eax [esi+0Ch] +
add esp 0Ch +
push eax  +
mov byte ptr [esi+1] 1 +
mov dword ptr [eax] 5F0F3CF5h +
call sub_1020B97  +
lea eax [esi+10h] +
xor ecx ecx +
push eax  +
mov [eax] cx +
call sub_1020B75  +
mov ax [edi+8] +
sub ax [edi] +
lea ecx [esi+12h] +
inc ax  +
mov [ecx] ax +
mov eax [edi+8] +
sub eax [edi] +
push ecx  +
imul eax eax +
add eax 0Dh +
cdq   +
and edx 7 +
add eax edx +
sar eax 3 +
mov [ecx] ax +
call sub_1020B75  +
mov cx [edi] +
lea eax [esi+24h] +
push eax  +
mov [eax] cx +
call sub_1020B75  +
mov cx [edi+8] +
lea eax [esi+28h] +
push eax  +
mov [eax] cx +
call sub_1020B75  +
mov eax [edi+0Ch] +
cdq   +
and edx 7 +
add eax edx +
lea ecx [esi+26h] +
sar eax 3 +
neg eax  +
push ecx  +
mov [ecx] ax +
call sub_1020B75  +
mov cx [edi+0Ch] +
lea eax [esi+2Ah] +
push eax  +
mov [eax] cx +
call sub_1020B75  +
push 19h  +
lea eax [esi+2Eh] +
pop ecx  +
push eax  +
mov [eax] cx +
call sub_1020B75  +
lea eax [esi+30h] +
xor ecx ecx +
inc ecx  +
push eax  +
mov [eax] cx +
call sub_1020B75  +
lea eax [esi+32h] +
xor ecx ecx +
inc ecx  +
push eax  +
mov [eax] cx +
call sub_1020B75  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_8] +
test esi esi +
jz loc_1021D3E  +
test edi edi +
jz loc_1021D3E  +
push 36h  +
lea ecx [ebp+var_3C] +
push ecx  +
push 0  +
push 64616568h  +
push eax  +
call ds:GetFontData  +
cmp eax 36h +
jnz loc_1021D3E  +
lea eax [ebp+var_18] +
push eax  +
call sub_1020B18  +
lea eax [ebp+var_14] +
push eax  +
call sub_1020B18  +
lea eax [ebp+var_18+2] +
push eax  +
call sub_1020B18  +
lea eax [ebp+var_14+2] +
push eax  +
call sub_1020B18  +
lea eax [ebp+var_2A] +
push eax  +
call sub_1020B18  +
movsx eax word ptr [ebp+var_18] +
mov [esi] eax +
movsx eax word ptr [ebp+var_14] +
mov [esi+8] eax +
movsx eax word ptr [ebp+var_18+2] +
mov [esi+4] eax +
movsx eax word ptr [ebp+var_14+2] +
mov [esi+0Ch] eax +
mov ax word ptr [ebp+var_2A] +
mov [edi] ax +
cmp dword ptr [esi] 0 +
jge loc_1021D3A  +
and dword ptr [esi] 0 +
xor eax eax +
jmp loc_1021D41  +
or eax 0FFFFFFFFh +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1026CC5  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+hFile] 0FFFFFFFFh +
push ebx  +
push esi  +
push edi  +
jz loc_1021DC6  +
cmp [ebp+arg_4] 0FFFFFFFFh +
jz loc_1021DC6  +
test eax eax +
jz loc_1021DC6  +
test ecx ecx +
jz loc_1021DC6  +
push [ebp+arg_8]  +
call sub_10210EA  +
mov esi eax +
test esi esi +
jz loc_1021DC6  +
push dword ptr [esi+0Ch]  +
call ds:malloc  +
mov ebx eax +
pop ecx  +
test ebx ebx +
jz loc_1021DC6  +
mov edi [esi+0Ch] +
push edi  +
push ebx  +
push esi  +
push [ebp+hFile]  +
call sub_10211B9  +
cmp eax edi +
jnz loc_1021DBE  +
push edi  +
push ebx  +
push esi  +
push [ebp+arg_4]  +
call sub_1021338  +
cmp eax [esi+0Ch] +
jnz loc_1021DBE  +
push ebx  +
call ds:free  +
pop ecx  +
xor eax eax +
jmp loc_1021DC9  +
push ebx  +
call ds:free  +
pop ecx  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
cmp [ebp+hFile] 0FFFFFFFFh +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
jz loc_1021F0B  +
cmp [ebp+arg_4] 0FFFFFFFFh +
jz loc_1021F0B  +
cmp [ebp+arg_8] 0 +
jz loc_1021F0B  +
mov edi 4000h +
push edi  +
call ds:malloc  +
mov esi eax +
pop ecx  +
test esi esi +
jz loc_1021F0B  +
mov eax ebx +
and eax 3 +
mov [ebp+var_4] eax +
jz loc_1021E2B  +
push 4  +
pop ecx  +
sub ecx eax +
mov [ebp+var_4] ecx +
mov eax ecx +
and [ebp+var_14] 0 +
and [ebp+var_10] 0 +
test ebx ebx +
jbe loc_1021EEB  +
jmp loc_1021E45  +
mov eax [ebp+var_4] +
mov edi 4000h +
cmp ebx edi +
ja loc_1021E7F  +
mov [ebp+nNumberOfBytesToRead] ebx +
test eax eax +
jz loc_1021E7C  +
lea edi [eax+ebx] +
mov [ebp+var_14] 1 +
cmp edi 4000h +
jbe loc_1021E7C  +
push esi  +
call ds:free  +
push edi  +
call ds:malloc  +
mov esi eax +
pop ecx  +
pop ecx  +
test esi esi +
jz loc_1021F0B  +
mov edi [ebp+nNumberOfBytesToRead] +
push 0  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push edi  +
push esi  +
push [ebp+hFile]  +
call ds:ReadFile  +
test eax eax +
jz loc_1021EFF  +
cmp [ebp+NumberOfBytesWritten] edi +
jnz loc_1021EFF  +
cmp [ebp+var_14] 0 +
jz loc_1021EBF  +
mov eax [ebp+var_4] +
lea ecx [eax+ebx] +
cmp ecx 4000h +
ja loc_1021EFF  +
push eax  +
lea eax [esi+ebx] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
add edi [ebp+var_4] +
push edi  +
push esi  +
call sub_1020BBD  +
add [ebp+var_10] eax +
push 0  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push edi  +
push esi  +
push [ebp+arg_4]  +
call ds:WriteFile  +
test eax eax +
jz loc_1021EFF  +
cmp [ebp+NumberOfBytesWritten] edi +
jnz loc_1021EFF  +
sub ebx edi +
jnz loc_1021E3D  +
mov eax [ebp+arg_8] +
mov ecx [ebp+var_10] +
push esi  +
mov [eax] ecx +
call ds:free  +
pop ecx  +
xor eax eax +
jmp loc_1021F0E  +
test esi esi +
jz loc_1021F0B  +
push esi  +
call ds:free  +
pop ecx  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp [ebp+hFile] 0FFFFFFFFh +
push ebx  +
push esi  +
push edi  +
jz loc_1022114  +
cmp [ebp+arg_4] 0FFFFFFFFh +
jz loc_1022114  +
mov esi [ebp+arg_8] +
xor edi edi +
cmp esi edi +
jz loc_1022114  +
mov ebx [ebp+arg_C] +
cmp ebx edi +
jz loc_1022114  +
cmp [ebp+lpBuffer] edi +
jz loc_1022114  +
cmp [ebp+arg_10] edi +
jle loc_1022114  +
mov eax [ebp+arg_14] +
cmp eax edi +
jl loc_1022114  +
cmp eax dword_102F768 +
jg loc_1022114  +
mov eax [ebx] +
mov [ebp+NumberOfBytesWritten] eax +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
call sub_1020B45  +
mov esi [esi+8] +
add esi [ebp+NumberOfBytesWritten] +
push edi  +
push edi  +
mov edi ds:SetFilePointer +
push esi  +
push [ebp+hFile]  +
call edi  +
cmp eax esi +
jnz loc_1022114  +
push 0  +
push 0  +
push esi  +
push [ebp+arg_4]  +
call edi  +
cmp eax esi +
jnz loc_1022114  +
mov eax dword_102F768 +
shl eax 2 +
cmp eax [ebp+arg_10] +
jge loc_1022114  +
mov eax [ebp+arg_14] +
lea esi [ebx+eax*4] +
mov eax [esi] +
mov [ebp+NumberOfBytesWritten] eax +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
call sub_1020B45  +
mov eax [esi+4] +
mov [ebp+arg_10] eax +
lea eax [ebp+arg_10] +
push eax  +
call sub_1020B45  +
mov ebx [ebp+NumberOfBytesWritten] +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push [ebp+arg_4]  +
mov eax ebx +
push [ebp+hFile]  +
call sub_1021DD5  +
test eax eax +
jnz loc_1022114  +
mov esi [ebp+nNumberOfBytesToWrite] +
test esi esi +
jle loc_1022079  +
mov ecx esi +
and ecx 80000003h +
jns loc_102201A  +
dec ecx  +
or ecx 0FFFFFFFCh +
inc ecx  +
jz loc_102204C  +
push 4  +
pop eax  +
sub eax ecx +
lea ecx [eax+esi] +
cmp ecx 0FFFFh +
mov [ebp+nNumberOfBytesToWrite] ecx +
jg loc_1022114  +
push eax  +
mov eax [ebp+lpBuffer] +
add eax esi +
push 0  +
push eax  +
call memset  +
mov eax [ebp+nNumberOfBytesToWrite] +
add esp 0Ch +
mov [ebp+nNumberOfBytesToWrite] eax +
mov esi eax +
push 0  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push esi  +
push [ebp+lpBuffer]  +
push [ebp+arg_4]  +
call ds:WriteFile  +
test eax eax +
jz loc_1022114  +
cmp [ebp+NumberOfBytesWritten] esi +
jnz loc_1022114  +
push esi  +
push [ebp+lpBuffer]  +
call sub_1020BBD  +
mov eax [ebp+arg_8] +
mov esi [eax+8] +
add esi [ebp+arg_10] +
push 0  +
push 0  +
push esi  +
push [ebp+hFile]  +
call edi  +
cmp eax esi +
jnz loc_1022114  +
mov ecx [ebp+arg_C] +
mov eax dword_102F768 +
mov eax [ecx+eax*4] +
mov [ebp+lpBuffer] eax +
lea eax [ebp+lpBuffer] +
push eax  +
call sub_1020B45  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push [ebp+arg_4]  +
mov eax [ebp+lpBuffer] +
sub eax [ebp+arg_10] +
push [ebp+hFile]  +
call sub_1021DD5  +
test eax eax +
jnz loc_1022114  +
sub ebx [ebp+arg_10] +
mov esi [ebp+arg_14] +
add ebx [ebp+nNumberOfBytesToWrite] +
mov edi dword_102F768 +
jmp loc_1022100  +
mov eax [ebp+arg_C] +
lea eax [eax+esi*4] +
mov [ebp+hFile] eax +
mov eax [eax] +
mov [ebp+arg_4] eax +
lea eax [ebp+arg_4] +
push eax  +
call sub_1020B45  +
add [ebp+arg_4] ebx +
lea eax [ebp+arg_4] +
push eax  +
call sub_1020B97  +
mov eax [ebp+arg_4] +
mov ecx [ebp+hFile] +
mov [ecx] eax +
inc esi  +
cmp esi edi +
jle loc_10220D5  +
mov eax [ebp+lpBuffer] +
add ebx eax +
mov eax [ebp+arg_8] +
mov [eax+0Ch] ebx +
xor eax eax +
jmp loc_1022117  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 20h  +
***
mov eax dword_102F774 +
push esi  +
mov esi ds:free +
push edi  +
xor edi edi +
cmp eax edi +
jz loc_1022140  +
push eax  +
call esi  +
pop ecx  +
mov dword_102F774 edi +
mov eax dword_102F778 +
cmp eax edi +
jz loc_1022153  +
push eax  +
call esi  +
pop ecx  +
mov dword_102F778 edi +
mov eax dword_102F780 +
cmp eax edi +
jz loc_1022166  +
push eax  +
call esi  +
pop ecx  +
mov dword_102F780 edi +
mov eax dword_102F77C +
cmp eax edi +
jz loc_1022179  +
push eax  +
call esi  +
pop ecx  +
mov dword_102F77C edi +
mov eax dword_102F784 +
cmp eax edi +
jz loc_102218C  +
push eax  +
call esi  +
pop ecx  +
mov dword_102F784 edi +
mov eax dword_102F764 +
cmp eax edi +
jz loc_102219F  +
push eax  +
call esi  +
pop ecx  +
mov dword_102F784 edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+lpFileName] +
push esi  +
test eax eax +
jz loc_1022304  +
and dword_102F764 0 +
push 0  +
push 80h  +
push 3  +
push 0  +
push 3  +
push 0C0000000h  +
push eax  +
call ds:CreateFileW  +
mov hObject eax +
cmp eax 0FFFFFFFFh +
jz loc_102230B  +
lea ecx [ebp+NumberOfBytesRead] +
push ecx  +
push eax  +
call sub_1020EAC  +
test eax eax +
jnz loc_10222F3  +
movzx eax [ebp+var_C] +
mov esi ds:malloc +
shl eax 4 +
push eax  +
call esi  +
pop ecx  +
mov dword_102F764 eax +
test eax eax +
jz loc_10222F3  +
movsx ecx [ebp+var_C] +
push ecx  +
push eax  +
push hObject  +
mov dword_102F760 ecx +
call sub_1020FB8  +
test eax eax +
jnz loc_10222F3  +
push offset aMaxp  +
lea eax [ebp+var_14] +
push eax  +
push offset dword_102F778  +
push hObject  +
call sub_10212A1  +
test eax eax +
jnz loc_10222F3  +
cmp [ebp+var_14] 20h +
jb loc_10222F3  +
mov eax dword_102F778 +
movzx eax word ptr [eax+4] +
mov [ebp+var_18] eax +
lea eax [ebp+var_18] +
push eax  +
call sub_1020B18  +
movzx eax word ptr [ebp+var_18] +
push offset aLoca  +
mov dword_102F768 eax +
lea eax [ebp+var_14] +
push eax  +
push offset dword_102F774  +
push hObject  +
call sub_10212A1  +
test eax eax +
jnz loc_10222F3  +
push offset aHmtx  +
lea eax [ebp+var_14] +
push eax  +
push offset dword_102F77C  +
push hObject  +
call sub_10212A1  +
test eax eax +
jnz loc_10222F3  +
push offset aVmtx  +
lea eax [ebp+var_14] +
push eax  +
push offset dword_102F780  +
push hObject  +
call sub_10212A1  +
test eax eax +
jnz loc_10222F3  +
push 0FFFFh  +
call esi  +
pop ecx  +
mov dword_102F784 eax +
test eax eax +
jnz loc_1022315  +
mov eax hObject +
cmp eax 0FFFFFFFFh +
jz loc_102230B  +
push eax  +
call ds:CloseHandle  +
or hObject 0FFFFFFFFh +
call sub_1022123  +
or eax 0FFFFFFFFh +
jmp loc_1022317  +
xor eax eax +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1026CC5  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 48h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax hObject +
cmp eax 0FFFFFFFFh +
jnz loc_102234E  +
or eax eax +
jmp loc_1022547  +
push esi  +
lea ecx [ebp+NumberOfBytesWritten] +
push ecx  +
push eax  +
call sub_1020EAC  +
test eax eax +
jnz loc_102251D  +
push 2  +
push eax  +
push eax  +
push hObject  +
call ds:SetFilePointer  +
mov esi eax +
cmp esi 0FFFFFFFFh +
jz loc_102251D  +
push dword_102F760  +
mov eax dword_102F764 +
mov ecx offset aGlyf +
call sub_10210EA  +
test eax eax +
jz loc_102251D  +
mov ecx [eax+8] +
cmp esi ecx +
jl loc_102251D  +
push edi  +
push hObject  +
sub esi ecx +
mov edi eax +
mov [eax+0Ch] esi +
call sub_1020DEC  +
pop edi  +
test eax eax +
jnz loc_102251D  +
push dword_102F760  +
mov eax dword_102F764 +
mov ecx offset aMaxp +
call sub_10210EA  +
mov esi eax +
test esi esi +
jz loc_102251D  +
push dword ptr [esi+0Ch]  +
push dword_102F778  +
push esi  +
push hObject  +
call sub_1021338  +
cmp eax [esi+0Ch] +
jnz loc_102251D  +
push dword_102F760  +
mov eax dword_102F764 +
mov ecx offset aLoca +
call sub_10210EA  +
mov esi eax +
test esi esi +
jz loc_102251D  +
push dword ptr [esi+0Ch]  +
push dword_102F774  +
push esi  +
push hObject  +
call sub_1021338  +
cmp eax [esi+0Ch] +
jnz loc_102251D  +
push dword_102F760  +
mov eax dword_102F764 +
mov ecx offset aHmtx +
call sub_10210EA  +
mov esi eax +
test esi esi +
jz loc_102251D  +
push dword ptr [esi+0Ch]  +
push dword_102F77C  +
push esi  +
push hObject  +
call sub_1021338  +
cmp eax [esi+0Ch] +
jnz loc_102251D  +
push dword_102F760  +
mov eax dword_102F764 +
mov ecx offset aVmtx +
call sub_10210EA  +
mov esi eax +
test esi esi +
jz loc_102251D  +
push dword ptr [esi+0Ch]  +
push dword_102F780  +
push esi  +
push hObject  +
call sub_1021338  +
cmp eax [esi+0Ch] +
jnz loc_102251D  +
push dword_102F760  +
mov eax dword_102F764 +
mov ecx offset aHead +
call sub_10210EA  +
test eax eax +
jz loc_102251D  +
push 36h  +
lea ecx [ebp+Buffer] +
push ecx  +
push eax  +
push hObject  +
call sub_10211B9  +
cmp eax 36h +
jnz loc_102251D  +
mov ecx dword_102F764 +
lea eax [ebp+Buffer] +
push eax  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push hObject  +
mov eax dword_102F760 +
call sub_102149F  +
test eax eax +
jnz loc_102251D  +
push dword_102F760  +
push dword_102F764  +
push hObject  +
call sub_1021040  +
test eax eax +
jz loc_1022533  +
push hObject  +
call ds:CloseHandle  +
call sub_1022123  +
or eax 0FFFFFFFFh +
jmp loc_1022546  +
push hObject  +
call ds:CloseHandle  +
call sub_1022123  +
xor eax eax +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1026CC5  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+lpFileName] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_8] +
test eax eax +
jz loc_1022634  +
test esi esi +
jz loc_1022634  +
test edi edi +
jz loc_1022634  +
push 0  +
push 80h  +
push 3  +
push 0  +
push 3  +
push 80000000h  +
push eax  +
call ds:CreateFileW  +
mov [ebp+hObject] eax +
cmp eax 0FFFFFFFFh +
jz loc_1022634  +
push offset aHead  +
push 36h  +
lea ecx [ebp+var_3C] +
push ecx  +
push eax  +
call sub_1021238  +
test eax eax +
jnz loc_102262B  +
lea eax [ebp+var_18] +
push eax  +
call sub_1020B18  +
lea eax [ebp+var_14] +
push eax  +
call sub_1020B18  +
lea eax [ebp+var_18+2] +
push eax  +
call sub_1020B18  +
lea eax [ebp+var_14+2] +
push eax  +
call sub_1020B18  +
lea eax [ebp+var_2A] +
push eax  +
call sub_1020B18  +
movsx eax word ptr [ebp+var_18] +
mov [esi] eax +
movsx eax word ptr [ebp+var_14] +
mov [esi+8] eax +
movsx eax word ptr [ebp+var_18+2] +
mov [esi+4] eax +
movsx eax word ptr [ebp+var_14+2] +
mov [esi+0Ch] eax +
mov ax word ptr [ebp+var_2A] +
mov [edi] ax +
cmp dword ptr [esi] 0 +
jge loc_102261E  +
and dword ptr [esi] 0 +
push [ebp+hObject]  +
call ds:CloseHandle  +
xor eax eax +
jmp loc_1022637  +
push [ebp+hObject]  +
call ds:CloseHandle  +
or eax 0FFFFFFFFh +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1026CC5  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
mov ebx [ebp+arg_4] +
test edi edi +
jz loc_102279C  +
test ebx ebx +
jz loc_102279C  +
test esi esi +
jz loc_102279C  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+arg_0]  +
call sub_10246EA  +
test eax eax +
jnz loc_102268C  +
push [ebp+arg_0]  +
call sub_102477D  +
test eax eax +
jg loc_10226C5  +
mov ax [esi+8] +
mov [edi+2] ax +
mov ax [esi+8] +
sub ax [esi] +
mov [edi] ax +
mov ax [esi+0Ch] +
sub ax [esi+4] +
mov [ebx+2] ax +
mov ax [esi+0Ch] +
sub ax [esi+4] +
mov [ebx] ax +
mov eax [esi+8] +
mov [esi] eax +
mov eax [esi+4] +
mov [esi+0Ch] eax +
jmp loc_102279C  +
mov ecx [ebp+var_10] +
mov eax [ecx+8] +
movsx edx word ptr [eax+8] +
movsx eax word ptr [eax+0Ah] +
mov [ebp+var_C] edx +
mov [ebp+arg_0] edx +
mov [ebp+var_4] eax +
mov [ebp+var_8] eax +
jmp loc_1022721  +
mov eax [ecx+8] +
mov ebx [ecx+0Ch] +
jmp loc_1022718  +
movsx edx word ptr [eax+8] +
dec ebx  +
cmp edx [ebp+var_C] +
jle loc_10226F8  +
mov [ebp+var_C] edx +
jmp loc_1022700  +
cmp edx [ebp+arg_0] +
jge loc_1022700  +
mov [ebp+arg_0] edx +
movsx edx word ptr [eax+0Ah] +
cmp edx [ebp+var_4] +
jle loc_102270E  +
mov [ebp+var_4] edx +
jmp loc_1022716  +
cmp edx [ebp+var_8] +
jge loc_1022716  +
mov [ebp+var_8] edx +
mov eax [eax] +
test ebx ebx +
jg loc_10226E9  +
mov ecx [ecx] +
mov [ebp+var_10] ecx +
cmp dword ptr [ecx] 0 +
jnz loc_10226E1  +
mov ax word ptr [ebp+arg_0] +
mov [edi+2] ax +
mov ax [esi+8] +
sub ax [esi] +
xor edx edx +
mov [edi] ax +
cwde   +
lea ecx [eax+1] +
jmp loc_1022741  +
inc edx  +
sar ecx 1 +
jnz loc_1022740  +
xor ecx ecx +
inc ecx  +
test edx edx +
jz loc_1022752  +
dec edx  +
lea ecx [ecx+ecx] +
jnz loc_102274C  +
lea edx [ecx+ecx] +
mov ebx eax +
sub ebx ecx +
sub edx eax +
cmp ebx edx +
jle loc_1022761  +
add ecx ecx +
mov edx [ebp+var_4] +
mov [edi] cx +
mov ax [esi+0Ch] +
mov ecx [ebp+arg_4] +
sub ax dx +
mov [ecx+2] ax +
jns loc_102277D  +
xor eax eax +
mov [ecx+2] ax +
mov ax [esi+0Ch] +
sub ax [esi+4] +
mov [ecx] ax +
mov eax [ebp+arg_0] +
mov [esi] eax +
mov eax [ebp+var_8] +
mov [esi+4] eax +
mov eax [ebp+var_C] +
mov [esi+8] eax +
mov [esi+0Ch] edx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+lpFileName] +
push ebx  +
mov ebx [ebp+arg_4] +
xor ecx ecx +
push esi  +
push edi  +
mov [ebp+var_20] ecx +
mov [ebp+lpBuffer] ecx +
cmp eax ecx +
jz loc_1022933  +
cmp ebx ecx +
jz loc_1022933  +
mov esi ds:CreateFileW +
push ecx  +
mov edi 80h +
push edi  +
push 3  +
push ecx  +
push 3  +
push 80000000h  +
push eax  +
call esi  +
mov [ebp+hFile] eax +
cmp eax 0FFFFFFFFh +
jz loc_1022933  +
push 0  +
push edi  +
push 2  +
push 0  +
push 7  +
push 40000000h  +
push ebx  +
call esi  +
mov [ebp+var_14] eax +
cmp eax 0FFFFFFFFh +
jz loc_10228FD  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push [ebp+hFile]  +
call sub_1020EAC  +
test eax eax +
jnz loc_10228FD  +
movsx esi [ebp+var_C] +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push [ebp+var_14]  +
mov [ebp+var_28] esi +
call sub_1020F1F  +
test eax eax +
jnz loc_10228FD  +
mov ebx ds:malloc +
mov eax esi +
shl eax 4 +
push eax  +
call ebx  +
mov edi eax +
pop ecx  +
mov [ebp+var_20] edi +
test edi edi +
jz loc_10228FD  +
push esi  +
push edi  +
push [ebp+hFile]  +
call sub_1020FB8  +
test eax eax +
jnz loc_10228FD  +
push esi  +
push edi  +
push [ebp+var_14]  +
call sub_1021040  +
test eax eax +
jnz loc_10228FD  +
and [ebp+var_24] eax +
test esi esi +
jle loc_10228DF  +
mov ecx [edi] +
mov eax offset aGlyf +
cmp ecx [eax] +
jz loc_10228D4  +
mov esi [edi+0Ch] +
push esi  +
call ebx  +
pop ecx  +
mov [ebp+lpBuffer] eax +
test eax eax +
jz loc_10228FD  +
push esi  +
push eax  +
push edi  +
push [ebp+hFile]  +
call sub_10211B9  +
cmp eax esi +
jnz loc_10228FD  +
push esi  +
push [ebp+lpBuffer]  +
push edi  +
push [ebp+var_14]  +
call sub_1021338  +
cmp eax esi +
jnz loc_10228FD  +
push [ebp+lpBuffer]  +
call ds:free  +
mov esi [ebp+var_28] +
pop ecx  +
inc [ebp+var_24]  +
add edi 10h +
cmp [ebp+var_24] esi +
jl loc_102288E  +
push [ebp+hFile]  +
mov esi ds:CloseHandle +
call esi  +
push [ebp+var_14]  +
call esi  +
push [ebp+var_20]  +
call ds:free  +
pop ecx  +
xor eax eax +
jmp loc_1022936  +
push [ebp+hFile]  +
mov esi ds:CloseHandle +
call esi  +
cmp [ebp+var_14] 0FFFFFFFFh +
jz loc_1022913  +
push [ebp+var_14]  +
call esi  +
cmp [ebp+var_20] 0 +
jz loc_1022923  +
push [ebp+var_20]  +
call ds:free  +
pop ecx  +
cmp [ebp+lpBuffer] 0 +
jz loc_1022933  +
push [ebp+lpBuffer]  +
call ds:free  +
pop ecx  +
or eax 0FFFFFFFFh +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1026CC5  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_102F764 +
and [ebp+var_10] 0 +
push ebx  +
push esi  +
push edi  +
push dword_102F760  +
mov ecx offset aGlyf +
call sub_10210EA  +
mov edi eax +
mov [ebp+var_C] edi +
test edi edi +
jz loc_1022A3C  +
mov eax [ebp+arg_4] +
mov ecx dword_102F774 +
lea ebx [ecx+eax*4] +
mov eax [ebx] +
mov [ebp+arg_4] eax +
lea eax [ebp+arg_4] +
push eax  +
call sub_1020B45  +
mov eax [ebx+4] +
mov [ebp+var_8] eax +
lea eax [ebp+var_8] +
push eax  +
call sub_1020B45  +
mov edi [edi+8] +
add edi [ebp+arg_4] +
mov esi [ebp+var_8] +
sub esi [ebp+arg_4] +
push 0  +
push 0  +
push edi  +
push [ebp+hFile]  +
call ds:SetFilePointer  +
cmp eax edi +
jnz loc_1022A3C  +
push 2  +
xor edi edi +
push edi  +
push edi  +
push hObject  +
call ds:SetFilePointer  +
mov ecx [ebp+var_C] +
sub eax [ecx+8] +
mov [ebp+arg_4] eax +
lea eax [ebp+arg_4] +
push eax  +
call sub_1020B97  +
mov eax [ebp+arg_4] +
mov [ebx] eax +
cmp esi edi +
jz loc_1022A41  +
push esi  +
call ds:malloc  +
mov ebx eax +
pop ecx  +
cmp ebx edi +
jz loc_1022A3C  +
push edi  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push esi  +
push ebx  +
push [ebp+hFile]  +
call ds:ReadFile  +
test eax eax +
jz loc_1022A34  +
cmp [ebp+NumberOfBytesWritten] esi +
jnz loc_1022A34  +
push edi  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push esi  +
push ebx  +
push hObject  +
call ds:WriteFile  +
test eax eax +
jz loc_1022A34  +
cmp [ebp+NumberOfBytesWritten] esi +
jz loc_1022A44  +
push ebx  +
call ds:free  +
pop ecx  +
or eax 0FFFFFFFFh +
jmp loc_1022A4E  +
mov ebx [ebp+var_10] +
push ebx  +
call ds:free  +
pop ecx  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
cmp edi dword_102F768 +
jge loc_1022AE3  +
test edi edi +
jl loc_1022AE3  +
push dword_102F760  +
mov eax dword_102F764 +
mov ecx offset aGlyf +
call sub_10210EA  +
mov esi eax +
test esi esi +
jz loc_1022AE3  +
push 2  +
push 0  +
push 0  +
push hObject  +
call ds:SetFilePointer  +
sub eax [esi+8] +
mov [ebp+arg_0] eax +
lea eax [ebp+arg_0] +
push eax  +
call sub_1020B97  +
mov esi [ebp+nNumberOfBytesToWrite] +
mov eax [ebp+arg_0] +
mov ecx dword_102F774 +
mov [ecx+edi*4] eax +
test esi esi +
jz loc_1022ADF  +
push 0  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push esi  +
push [ebp+lpBuffer]  +
push hObject  +
call ds:WriteFile  +
test eax eax +
jz loc_1022AE3  +
cmp [ebp+NumberOfBytesWritten] esi +
jnz loc_1022AE3  +
xor eax eax +
jmp loc_1022AE6  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
or ebx 0FFFFFFFFh +
cmp [ebp+hFile] ebx +
jnz loc_1022B03  +
mov eax ebx +
jmp loc_1022B82  +
push esi  +
mov esi [ebp+arg_4] +
jmp loc_1022B17  +
push esi  +
push [ebp+hFile]  +
call sub_102294C  +
test eax eax +
jnz loc_1022B3F  +
inc esi  +
cmp esi dword_102F768 +
jl loc_1022B09  +
mov eax dword_102F764 +
push edi  +
push dword_102F760  +
mov ecx offset aGlyf +
call sub_10210EA  +
mov edi eax +
test edi edi +
jnz loc_1022B43  +
mov eax ebx +
jmp loc_1022B80  +
mov eax ebx +
jmp loc_1022B81  +
mov ebx dword_102F774 +
push 2  +
push 0  +
push 0  +
push hObject  +
call ds:SetFilePointer  +
mov esi eax +
sub eax [edi+8] +
mov [ebp+hFile] eax +
lea eax [ebp+hFile] +
push eax  +
call sub_1020B97  +
mov eax [ebp+hFile] +
mov ecx dword_102F768 +
mov [ebx+ecx*4] eax +
sub esi [edi+8] +
xor eax eax +
mov [edi+0Ch] esi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
push ebx  +
push esi  +
push edi  +
mov edi edx +
test edi edi +
jz loc_1022F7B  +
test eax eax +
jz loc_1022F7B  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jz loc_1022F7B  +
push [ebp+arg_0]  +
mov dword_102F758 eax +
mov dword_102F750 eax +
mov dword_102F754 ecx +
mov dword_102F74C ecx +
call sub_102477D  +
mov esi eax +
mov [ebp+var_18] esi +
test esi esi +
jl loc_1022F7B  +
jnz loc_1022BF6  +
and dword ptr [ebx] 0 +
xor eax eax +
jmp loc_1022F7E  +
lea eax [ebp+var_34] +
push eax  +
mov word ptr [ebp+var_34] si +
call sub_1020B75  +
mov ax [edi] +
mov word ptr [ebp+var_34+2] ax +
lea eax [ebp+var_34+2] +
push eax  +
call sub_1020B75  +
mov ax [edi+4] +
mov word ptr [ebp+var_30] ax +
lea eax [ebp+var_30] +
push eax  +
call sub_1020B75  +
mov ax [edi+8] +
mov word ptr [ebp+var_30+2] ax +
lea eax [ebp+var_30+2] +
push eax  +
call sub_1020B75  +
mov ax [edi+0Ch] +
mov word ptr [ebp+var_2C] ax +
lea eax [ebp+var_2C] +
push eax  +
call sub_1020B75  +
lea eax [ebp+var_34] +
push eax  +
push 0Ah  +
lea ebx [ebp+var_10] +
pop edi  +
call sub_10215DA  +
test eax eax +
jnz loc_1022F76  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_0]  +
call sub_10246EA  +
test eax eax +
jnz loc_1022F7B  +
mov eax [ebp+var_8] +
xor ecx ecx +
cmp esi ecx +
mov [ebp+var_20] eax +
mov [ebp+var_4] ecx +
jle loc_1022CC2  +
jmp loc_1022C85  +
mov ecx [ebp+var_1C] +
add ecx [eax+0Ch] +
mov [ebp+var_1C] ecx +
dec ecx  +
movzx eax cx +
mov [ebp+arg_0] eax +
lea eax [ebp+arg_0] +
push eax  +
call sub_1020B75  +
lea eax [ebp+arg_0] +
push eax  +
push 2  +
lea ebx [ebp+var_10] +
pop edi  +
call sub_10215DA  +
test eax eax +
jnz loc_1022F76  +
mov eax [ebp+var_8] +
inc [ebp+var_4]  +
cmp [ebp+var_4] esi +
mov eax [eax] +
mov [ebp+var_8] eax +
jl loc_1022C82  +
and [ebp+arg_0] 0 +
lea eax [ebp+arg_0] +
push eax  +
push 2  +
lea ebx [ebp+var_10] +
pop edi  +
call sub_10215DA  +
test eax eax +
jnz loc_1022F76  +
mov eax [ebp+var_20] +
xor ecx ecx +
xor edx edx +
cmp esi ecx +
mov [ebp+var_8] eax +
mov [ebp+var_4] ecx +
jle loc_1022DC5  +
mov edi [eax+0Ch] +
mov esi [eax+8] +
mov [ebp+var_C] edi +
test edi edi +
jle loc_1022DAE  +
mov ax [esi+8] +
mov bl [esi+0Ch] +
dec [ebp+var_C]  +
sub ax cx +
mov cx [esi+0Ah] +
movzx eax ax +
not bl  +
sub cx dx +
and bl 1 +
mov byte ptr [ebp+arg_0+3] bl +
movzx ecx cx +
mov edx 0FEh +
test ax ax +
jnz loc_1022D37  +
or bl 10h +
mov byte ptr [ebp+arg_0+3] bl +
jmp loc_1022D57  +
lea edi [eax-1] +
mov ebx edx +
cmp di bx +
ja loc_1022D47  +
or byte ptr [ebp+arg_0+3] 12h +
jmp loc_1022D57  +
add eax 0FFh +
mov edi edx +
cmp ax di +
ja loc_1022D57  +
or byte ptr [ebp+arg_0+3] 2 +
test cx cx +
jnz loc_1022D62  +
or byte ptr [ebp+arg_0+3] 20h +
jmp loc_1022D81  +
lea eax [ecx-1] +
mov edi edx +
cmp ax di +
ja loc_1022D72  +
or byte ptr [ebp+arg_0+3] 24h +
jmp loc_1022D81  +
add ecx 0FFh +
cmp cx dx +
ja loc_1022D81  +
or byte ptr [ebp+arg_0+3] 4 +
lea eax [ebp+arg_0+3] +
xor edi edi +
push eax  +
lea ebx [ebp+var_1C] +
inc edi  +
call sub_10215DA  +
test eax eax +
jnz loc_1022F76  +
cmp [ebp+var_C] eax +
movzx ecx word ptr [esi+8] +
movzx edx word ptr [esi+0Ah] +
mov esi [esi] +
jg loc_1022D03  +
mov eax [ebp+var_8] +
inc [ebp+var_4]  +
mov esi [ebp+var_4] +
cmp esi [ebp+var_18] +
mov eax [eax] +
mov [ebp+var_8] eax +
jl loc_1022CF2  +
mov esi [ebp+var_18] +
mov ecx [ebp+var_10] +
mov edx dword_102F74C +
mov eax [ebp+var_20] +
mov [ebp+var_24] ecx +
xor ecx ecx +
cmp esi ecx +
mov [ebp+var_8] eax +
mov [ebp+var_14] edx +
mov [ebp+var_28] edx +
mov [ebp+var_4] ecx +
jle loc_1022E7B  +
mov edx [eax+0Ch] +
mov esi [eax+8] +
mov [ebp+var_C] edx +
test edx edx +
jle loc_1022E64  +
dec [ebp+var_C]  +
cmp [ebp+var_14] 0 +
jle loc_1022E61  +
mov ax [esi+8] +
sub ax cx +
movzx ecx ax +
mov eax [ebp+var_10] +
mov al [eax] +
mov [ebp+arg_0] ecx +
test al 2 +
jz loc_1022E2B  +
test al 10h +
jnz loc_1022E1F  +
neg ecx  +
movzx ecx cx +
lea eax [ebp+arg_0+3] +
xor edi edi +
mov byte ptr [ebp+arg_0+3] cl +
push eax  +
inc edi  +
jmp loc_1022E3F  +
test al 10h +
jnz loc_1022E4F  +
lea eax [ebp+arg_0] +
push eax  +
call sub_1020B75  +
lea eax [ebp+arg_0] +
push eax  +
push 2  +
pop edi  +
lea ebx [ebp+var_1C] +
call sub_10215DA  +
test eax eax +
jnz loc_1022F76  +
inc [ebp+var_10]  +
dec [ebp+var_14]  +
cmp [ebp+var_C] 0 +
movzx ecx word ptr [esi+8] +
mov esi [esi] +
jg loc_1022DF7  +
mov eax [ebp+var_8] +
inc [ebp+var_4]  +
mov edx [ebp+var_4] +
cmp edx [ebp+var_18] +
mov eax [eax] +
mov [ebp+var_8] eax +
jl loc_1022DEA  +
mov esi [ebp+var_18] +
mov ecx [ebp+var_24] +
mov eax [ebp+var_20] +
mov edx [ebp+var_28] +
mov [ebp+var_10] ecx +
xor ecx ecx +
cmp esi ecx +
mov [ebp+var_8] eax +
mov [ebp+var_14] edx +
mov [ebp+var_4] ecx +
jle loc_1022F24  +
mov edx [eax+0Ch] +
mov esi [eax+8] +
mov [ebp+var_C] edx +
test edx edx +
jle loc_1022F10  +
dec [ebp+var_C]  +
cmp [ebp+var_14] 0 +
jle loc_1022F0D  +
mov ax [esi+0Ah] +
sub ax cx +
movzx ecx ax +
mov eax [ebp+var_10] +
mov al [eax] +
mov [ebp+arg_0] ecx +
test al 4 +
jz loc_1022EDB  +
test al 20h +
jnz loc_1022ECF  +
neg ecx  +
movzx ecx cx +
lea eax [ebp+arg_0+3] +
xor edi edi +
mov byte ptr [ebp+arg_0+3] cl +
push eax  +
inc edi  +
jmp loc_1022EEF  +
test al 20h +
jnz loc_1022EFB  +
lea eax [ebp+arg_0] +
push eax  +
call sub_1020B75  +
lea eax [ebp+arg_0] +
push eax  +
push 2  +
pop edi  +
lea ebx [ebp+var_1C] +
call sub_10215DA  +
test eax eax +
jnz loc_1022F76  +
inc [ebp+var_10]  +
dec [ebp+var_14]  +
cmp [ebp+var_C] 0 +
movzx ecx word ptr [esi+0Ah] +
mov esi [esi] +
jg loc_1022EA7  +
mov eax [ebp+var_8] +
inc [ebp+var_4]  +
mov edx [ebp+var_4] +
cmp edx [ebp+var_18] +
mov eax [eax] +
mov [ebp+var_8] eax +
jl loc_1022E9A  +
mov edi dword_102F754 +
mov eax edi +
sub eax dword_102F74C +
and eax 80000003h +
jns loc_1022F3E  +
dec eax  +
or eax 0FFFFFFFCh +
inc eax  +
jz loc_1022F66  +
push 4  +
pop esi  +
cmp eax esi +
jge loc_1022F66  +
sub esi eax +
push esi  +
push 0  +
push dword_102F750  +
call memset  +
sub dword_102F74C esi +
add esp 0Ch +
add dword_102F750 esi +
sub edi dword_102F74C +
mov eax [ebp+arg_4] +
mov [eax] edi +
jmp loc_1022BEF  +
push 0FFFFFFFEh  +
pop eax  +
jmp loc_1022F7E  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
test esi esi +
jz loc_102304E  +
movzx ebx word ptr [ebp+arg_0] +
and dword_102F76C 0 +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
lea eax [ebp+arg_4] +
push eax  +
push [ebp+arg_8]  +
movs   +
lea esi [ebp+var_14] +
lea edi [ebp+arg_0] +
sub ebx 0DFFEh +
call sub_102264C  +
lea eax [ebp+nNumberOfBytesToWrite] +
push eax  +
push [ebp+arg_8]  +
mov eax dword_102F784 +
mov ecx 0FFFFh +
mov edx esi +
call sub_1022B97  +
test eax eax +
jz loc_1022FED  +
mov dword_102F76C eax +
jmp loc_102304E  +
lea eax [ebp+arg_0] +
push eax  +
call sub_1020B75  +
lea eax [ebp+arg_0+2] +
push eax  +
call sub_1020B75  +
mov eax [ebp+arg_0] +
mov ecx dword_102F77C +
mov [ecx+ebx*4] eax +
lea eax [ebp+arg_4] +
push eax  +
call sub_1020B75  +
lea eax [ebp+arg_4+2] +
push eax  +
call sub_1020B75  +
push [ebp+nNumberOfBytesToWrite]  +
mov eax [ebp+arg_4] +
push dword_102F784  +
mov ecx dword_102F780 +
push ebx  +
mov [ecx+ebx*4] eax +
call sub_1022A5A  +
test eax eax +
jnz loc_102304E  +
push [ebp+arg_8]  +
mov edi dword_102F778 +
call sub_1021683  +
test eax eax +
jge loc_1023053  +
or eax 0FFFFFFFFh +
jmp loc_1023055  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
test ebx ebx +
jz locret_10231C2  +
cmp [ebp+arg_0] 0 +
jz locret_10231C2  +
and [ebp+var_C] 0 +
push esi  +
push edi  +
push 66h  +
lea eax [ebx+4] +
pop ecx  +
lea edi [ebx+66h] +
mov byte ptr [edi] 0 +
mov byte ptr [edi+1] 0 +
push eax  +
mov [eax] cx +
call sub_1020B75  +
and [ebp+var_14] 0 +
and [ebp+var_18] 0 +
lea esi [ebx+6] +
mov [ebp+var_8] offset a00 +
push 3  +
pop eax  +
push esi  +
mov [esi] ax +
call sub_1020B75  +
mov cx [ebp+arg_4] +
lea eax [esi+2] +
push eax  +
mov [eax] cx +
call sub_1020B75  +
mov cx word ptr dword_102DCE8 +
lea eax [esi+4] +
push eax  +
mov [eax] cx +
call sub_1020B75  +
mov cx word ptr [ebp+var_18] +
lea eax [esi+6] +
push eax  +
mov [eax] cx +
call sub_1020B75  +
mov eax 39Ah +
sub eax [ebp+var_C] +
lea ecx [ebx+400h] +
lea edx [eax+edi] +
cmp edx ecx +
ja loc_10231C0  +
push [ebp+var_8]  +
push eax  +
push edi  +
call sub_101468C  +
test eax eax +
jl loc_10231A1  +
mov eax [ebp+var_8] +
xor edx edx +
cmp eax edx +
jnz loc_1023124  +
mov [ebp+var_4] edx +
jmp loc_1023158  +
xor ecx ecx +
cmp [eax] dx +
jnz loc_1023131  +
cmp [eax+2] dx +
jz loc_1023137  +
add eax 4 +
inc ecx  +
jmp loc_1023126  +
lea eax [ecx+ecx] +
cmp eax edx +
mov [ebp+var_4] eax +
jle loc_1023158  +
mov [ebp+var_10] edi +
mov [ebp+var_1C] eax +
push [ebp+var_10]  +
call sub_1020B75  +
add [ebp+var_10] 2 +
dec [ebp+var_1C]  +
jnz loc_1023147  +
mov eax [ebp+var_4] +
add eax eax +
lea ecx [esi+8] +
push ecx  +
mov [ebp+var_4] eax +
add edi eax +
mov [ecx] ax +
call sub_1020B75  +
mov eax [ebp+var_4] +
add [ebp+var_C] eax +
mov cx word ptr [ebp+var_14] +
lea eax [esi+0Ah] +
push eax  +
mov [eax] cx +
call sub_1020B75  +
mov eax [ebp+var_4] +
add [ebp+var_14] eax +
add [ebp+var_8] 1Ch +
inc [ebp+var_18]  +
add esi 0Ch +
cmp [ebp+var_8] offset unk_102CD68 +
jl loc_10230AC  +
xor eax eax +
push 8  +
mov [ebx] ax +
lea eax [ebx+2] +
pop ecx  +
push eax  +
mov [eax] cx +
call sub_1020B75  +
mov eax [ebp+var_C] +
mov ecx [ebp+arg_0] +
add eax 66h +
mov [ecx] eax +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 108h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
xor ecx ecx +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov [ebp+var_E4] eax +
mov eax [ebp+arg_8] +
mov [ebp+var_D4] eax +
mov [ebp+lpBuffer] ecx +
mov [ebp+var_E8] ecx +
mov [ebp+var_E0] ecx +
mov [ebp+var_DC] ecx +
mov [ebp+var_D8] ecx +
mov [ebp+var_D0] ecx +
cmp edi ecx +
jz loc_1023B22  +
cmp eax ecx +
jz loc_1023B22  +
xor ebx ebx +
inc ebx  +
call sub_1021853  +
push 0  +
push 80h  +
push 2  +
push 0  +
push 5  +
push 40000000h  +
push edi  +
call ds:CreateFileW  +
mov [ebp+hFile] eax +
cmp eax 0FFFFFFFFh +
jz loc_1023B22  +
push 0Fh  +
pop esi  +
mov eax esi +
lea ecx [ebp+var_20] +
call sub_1021586  +
mov eax ecx +
push eax  +
push [ebp+hFile]  +
call sub_1020F1F  +
test eax eax +
jnz loc_1023A95  +
mov ebx ds:malloc +
mov edi 0F0h +
push edi  +
call ebx  +
pop ecx  +
mov [ebp+lpBuffer] eax +
test eax eax +
jz loc_1023A95  +
push edi  +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
push 0  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push edi  +
push [ebp+lpBuffer]  +
push [ebp+hFile]  +
call ds:WriteFile  +
test eax eax +
jz loc_1023A95  +
cmp [ebp+NumberOfBytesWritten] edi +
jnz loc_1023A95  +
mov eax [ebp+lpBuffer] +
mov edi [ebp+hFile] +
and dword_102F75C 0 +
push 2  +
mov dword_102F764 eax +
push offset unk_102F770  +
lea eax [ebp+var_14] +
push eax  +
push edi  +
mov dword_102F760 esi +
call sub_10213AE  +
test eax eax +
jnz loc_1023A95  +
mov ecx offset aCvt +
lea eax [ebp+var_14] +
call sub_1020AD1  +
test eax eax +
jnz loc_1023A95  +
push 4  +
push offset unk_102CC30  +
lea eax [ebp+var_14] +
push eax  +
push edi  +
call sub_10213AE  +
test eax eax +
jnz loc_1023A95  +
mov ecx offset aFpgm +
lea eax [ebp+var_14] +
call sub_1020AD1  +
test eax eax +
jnz loc_1023A95  +
push 7  +
push offset unk_102CC34  +
lea eax [ebp+var_14] +
push eax  +
push edi  +
call sub_10213AE  +
test eax eax +
jnz loc_1023A95  +
mov ecx offset aPrep +
lea eax [ebp+var_14] +
call sub_1020AD1  +
test eax eax +
jnz loc_1023A95  +
push 400h  +
call ebx  +
pop ecx  +
mov [ebp+var_E8] eax +
test eax eax +
jz loc_1023A95  +
mov ebx [ebp+var_E8] +
xor esi esi +
inc esi  +
push esi  +
lea eax [ebp+nNumberOfBytesToWrite] +
push eax  +
call sub_1023061  +
push [ebp+nNumberOfBytesToWrite]  +
lea eax [ebp+var_14] +
push ebx  +
push eax  +
push edi  +
call sub_10213AE  +
test eax eax +
jnz loc_1023A95  +
push ebx  +
mov ebx ds:free +
call ebx  +
and [ebp+var_E8] 0 +
pop ecx  +
mov ecx offset aName +
lea eax [ebp+var_14] +
call sub_1020AD1  +
test eax eax +
jnz loc_1023A95  +
push 2Ch  +
push offset unk_102CC5C  +
lea eax [ebp+var_14] +
push eax  +
push edi  +
call sub_10213AE  +
test eax eax +
jnz loc_1023A95  +
mov ecx offset aCmap +
lea eax [ebp+var_14] +
call sub_1020AD1  +
test eax eax +
jnz loc_1023A95  +
cmp [ebp+arg_10] 0 +
mov edi offset aOs2 +
lea eax [ebp+nNumberOfBytesToWrite] +
jnz loc_1023471  +
push edi  +
push eax  +
lea eax [ebp+var_D0] +
push eax  +
push [ebp+var_E4]  +
call sub_10217C2  +
test eax eax +
jnz loc_1023A95  +
cmp [ebp+var_D0] eax +
jz loc_1023A95  +
cmp [ebp+nNumberOfBytesToWrite] 32h +
jl loc_1023A95  +
mov eax [ebp+var_D0] +
or byte ptr [eax+31h] 31h +
mov byte ptr [eax+9] 0 +
jmp loc_1023498  +
push [ebp+var_D4]  +
push eax  +
lea eax [ebp+var_D0] +
push eax  +
push [ebp+var_E4]  +
call sub_10218A5  +
test eax eax +
jnz loc_1023A95  +
mov eax [ebp+var_D0] +
push [ebp+nNumberOfBytesToWrite]  +
push eax  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+hFile]  +
call sub_10213AE  +
test eax eax +
jnz loc_1023A95  +
mov ecx edi +
lea eax [ebp+var_14] +
call sub_1020AD1  +
test eax eax +
jnz loc_1023A95  +
push [ebp+var_D0]  +
call ebx  +
cmp [ebp+arg_10] 0 +
pop ecx  +
mov ebx offset aPost +
jnz loc_1023509  +
push [ebp+var_E4]  +
mov esi ebx +
lea edi [ebp+var_14] +
call sub_102174D  +
test eax eax +
jnz loc_1023A95  +
push [ebp+hFile]  +
mov esi edi +
push [ebp+var_E4]  +
call sub_1020D6A  +
jmp loc_1023548  +
push 8  +
pop ecx  +
xor eax eax +
push 0Ch  +
lea edi [ebp+Buffer] +
stos   +
pop eax  +
mov word ptr [ebp+var_36] ax +
lea eax [ebp+var_36] +
push eax  +
mov byte ptr [ebp+Buffer+1] 3 +
call sub_1020B75  +
lea eax [ebp+var_36+2] +
push eax  +
mov [ebp+var_36+2] esi +
call sub_1020B97  +
push 20h  +
lea eax [ebp+Buffer] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+hFile]  +
call sub_10213AE  +
test eax eax +
jnz loc_1023A95  +
mov ecx ebx +
lea eax [ebp+var_14] +
call sub_1020AD1  +
test eax eax +
jnz loc_1023A95  +
mov edi offset aHhea +
cmp [ebp+arg_10] eax +
jnz loc_10235A2  +
push edi  +
push 24h  +
lea eax [ebp+var_9C] +
push eax  +
push [ebp+var_E4]  +
call sub_1021787  +
test eax eax +
jnz loc_1023A95  +
mov [ebp+var_7C] ax +
mov ax word ptr dword_102F768 +
mov word ptr [ebp+var_7A] ax +
lea eax [ebp+var_7A] +
push eax  +
call sub_1020B75  +
jmp loc_10235B3  +
mov ebx [ebp+var_D4] +
lea esi [ebp+var_9C] +
call sub_1021AF0  +
push 24h  +
lea eax [ebp+var_9C] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+hFile]  +
call sub_10213AE  +
test eax eax +
jnz loc_1023A95  +
mov ecx edi +
lea eax [ebp+var_14] +
call sub_1020AD1  +
test eax eax +
jnz loc_1023A95  +
mov esi [ebp+var_D4] +
push esi  +
lea eax [ebp+var_9C] +
lea ebx [ebp+var_C0] +
call sub_102162A  +
push 24h  +
mov eax ebx +
push eax  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+hFile]  +
call sub_10213AE  +
test eax eax +
jnz loc_1023A95  +
mov ecx offset aVhea +
lea eax [ebp+var_14] +
call sub_1020AD1  +
test eax eax +
jnz loc_1023A95  +
lea edi [ebp+var_108] +
movs   +
movs   +
movs   +
lea eax [ebp+var_F4] +
push eax  +
push [ebp+arg_C]  +
movs   +
lea esi [ebp+var_108] +
lea edi [ebp+var_EC] +
call sub_102264C  +
push 4  +
pop esi  +
lea eax [ebp+var_F8] +
push eax  +
push dword_102F768  +
mov [ebp+nNumberOfBytesToWrite] esi +
call sub_100B348  +
test eax eax +
jl loc_1023A95  +
mov eax [ebp+var_F8] +
mul  esi +
lea ecx [ebp+nNumberOfBytesToWrite] +
push ecx  +
push edx  +
push eax  +
call sub_1011467  +
test eax eax +
jl loc_1023A95  +
push [ebp+nNumberOfBytesToWrite]  +
mov ebx ds:malloc +
call ebx  +
mov esi eax +
pop ecx  +
test esi esi +
jz loc_1023A95  +
push [ebp+nNumberOfBytesToWrite]  +
push 0  +
push esi  +
call memset  +
mov eax [ebp+var_F4] +
add esp 0Ch +
push esi  +
mov [esi] eax +
call sub_1020B75  +
lea eax [esi+2] +
push eax  +
call sub_1020B75  +
push [ebp+nNumberOfBytesToWrite]  +
xor eax eax +
mov [esi+4] ax +
mov [esi+6] ax +
push esi  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+hFile]  +
call sub_10213AE  +
test eax eax +
jnz loc_1023A95  +
mov ecx offset aVmtx +
lea eax [ebp+var_14] +
call sub_1020AD1  +
test eax eax +
jnz loc_1023A95  +
push esi  +
call ds:free  +
cmp [ebp+arg_10] 0 +
pop ecx  +
jnz loc_102376E  +
push offset aHead  +
push 36h  +
lea eax [ebp+var_7A+2] +
push eax  +
push [ebp+var_E4]  +
call sub_1021787  +
test eax eax +
jnz loc_1023A95  +
and [ebp+var_70] eax +
lea edi [ebp+var_64] +
stos   +
stos   +
xor eax eax +
lea edi [ebp+var_5C] +
stos   +
stos   +
xor eax eax +
inc eax  +
mov word ptr [ebp+var_46] ax +
xor eax eax +
mov word ptr [ebp+var_46+2] ax +
lea eax [ebp+var_46] +
push eax  +
call sub_1020B75  +
lea eax [ebp+var_46+2] +
push eax  +
call sub_1020B75  +
jmp loc_102377C  +
mov edi [ebp+var_D4] +
lea esi [ebp+var_7A+2] +
call sub_1021BBF  +
push 36h  +
lea eax [ebp+var_7A+2] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+hFile]  +
call sub_10213AE  +
test eax eax +
jnz loc_1023A95  +
mov ecx offset aHead +
lea eax [ebp+var_14] +
call sub_1020AD1  +
test eax eax +
jnz loc_1023A95  +
lea eax [ebp+nNumberOfBytesToWrite] +
push eax  +
push dword_102F768  +
call sub_100B348  +
test eax eax +
jl loc_1023A95  +
mov eax [ebp+nNumberOfBytesToWrite] +
push 4  +
pop ecx  +
mul  ecx +
lea ecx [ebp+nNumberOfBytesToWrite] +
push ecx  +
push edx  +
push eax  +
call sub_1011467  +
test eax eax +
jl loc_1023A95  +
push [ebp+nNumberOfBytesToWrite]  +
call ebx  +
pop ecx  +
mov [ebp+var_E0] eax +
test eax eax +
jz loc_1023A95  +
push [ebp+nNumberOfBytesToWrite]  +
mov esi eax +
push 0  +
push esi  +
call memset  +
mov eax [ebp+var_EC] +
add esp 0Ch +
push esi  +
mov [esi] eax +
call sub_1020B75  +
lea eax [esi+2] +
push eax  +
call sub_1020B75  +
push [ebp+nNumberOfBytesToWrite]  +
xor eax eax +
mov [esi+4] ax +
mov [esi+6] ax +
push esi  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+hFile]  +
call sub_10213AE  +
test eax eax +
jnz loc_1023A95  +
mov ecx offset aHmtx +
lea eax [ebp+var_14] +
call sub_1020AD1  +
test eax eax +
jnz loc_1023A95  +
push esi  +
call ds:free  +
and [ebp+var_E0] 0 +
mov esi 0FFFFh +
push esi  +
call ebx  +
pop ecx  +
pop ecx  +
mov [ebp+var_D8] eax +
test eax eax +
jz loc_1023A95  +
lea eax [ebp+var_EC] +
push eax  +
push [ebp+arg_C]  +
mov eax [ebp+var_D8] +
mov ecx esi +
lea edx [ebp+var_108] +
call sub_1022B97  +
test eax eax +
jnz loc_1023A95  +
lea eax [ebp+nNumberOfBytesToWrite] +
push eax  +
push dword_102F768  +
call sub_100B348  +
test eax eax +
jl loc_1023A95  +
lea eax [ebp+nNumberOfBytesToWrite] +
push eax  +
push 1  +
push [ebp+nNumberOfBytesToWrite]  +
call sub_100B371  +
test eax eax +
jl loc_1023A95  +
mov edi [ebp+nNumberOfBytesToWrite] +
push 4  +
pop ecx  +
mov eax edi +
mul  ecx +
lea ecx [ebp+nNumberOfBytesToWrite] +
push ecx  +
push edx  +
push eax  +
call sub_1011467  +
test eax eax +
jl loc_1023A95  +
push [ebp+nNumberOfBytesToWrite]  +
call ebx  +
pop ecx  +
mov [ebp+var_DC] eax +
test eax eax +
jz loc_1023A95  +
mov ebx [ebp+var_EC] +
mov esi eax +
and dword ptr [esi] 0 +
lea eax [ebp+var_D4] +
push eax  +
mov [ebp+var_D4] ebx +
call sub_1020B97  +
cmp edi 1 +
jbe loc_1023954  +
mov eax [ebp+var_D4] +
lea edx [esi+4] +
lea ecx [edi-1] +
mov edi edx +
stos   +
push [ebp+nNumberOfBytesToWrite]  +
lea eax [ebp+var_14] +
push esi  +
push eax  +
push [ebp+hFile]  +
call sub_10213AE  +
test eax eax +
jnz loc_1023A95  +
mov ecx offset aLoca +
lea eax [ebp+var_14] +
call sub_1020AD1  +
test eax eax +
jnz loc_1023A95  +
push [ebp+var_DC]  +
call ds:free  +
and [ebp+var_DC] 0 +
pop ecx  +
push 20h  +
push offset unk_102CC3C  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+hFile]  +
call sub_10213AE  +
test eax eax +
jnz loc_1023A95  +
mov ecx offset aMaxp +
lea eax [ebp+var_14] +
call sub_1020AD1  +
test eax eax +
jnz loc_1023A95  +
push ebx  +
push [ebp+var_D8]  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+hFile]  +
call sub_10213AE  +
test eax eax +
jnz loc_1023A95  +
mov ecx offset aGlyf +
lea eax [ebp+var_14] +
call sub_1020AD1  +
test eax eax +
jnz loc_1023A95  +
push [ebp+var_D8]  +
call ds:free  +
and [ebp+var_D8] 0 +
mov [esp+118h+var_118] offset loc_102146E +
push 10h  +
push 0Fh  +
push [ebp+lpBuffer]  +
call ds:qsort  +
add esp 10h +
push 0Fh  +
push [ebp+lpBuffer]  +
push [ebp+hFile]  +
call sub_1021040  +
test eax eax +
jnz loc_1023A95  +
mov ecx [ebp+lpBuffer] +
lea eax [ebp+var_7A+2] +
push eax  +
lea eax [ebp+var_20] +
push eax  +
push [ebp+hFile]  +
push 0Fh  +
pop eax  +
call sub_102149F  +
test eax eax +
jnz loc_1023A95  +
push [ebp+hFile]  +
call ds:CloseHandle  +
mov eax [ebp+lpBuffer] +
cmp dword_102F764 eax +
jnz loc_1023A86  +
and dword_102F764 0 +
push eax  +
call ds:free  +
pop ecx  +
xor eax eax +
jmp loc_1023B25  +
push [ebp+hFile]  +
call ds:CloseHandle  +
mov eax [ebp+lpBuffer] +
xor edi edi +
cmp eax edi +
jz loc_1023AC7  +
cmp dword_102F764 eax +
jnz loc_1023ABB  +
mov dword_102F764 edi +
mov esi ds:free +
push eax  +
call esi  +
pop ecx  +
jmp loc_1023ACD  +
mov esi ds:free +
cmp [ebp+var_E8] edi +
jz loc_1023ADE  +
push [ebp+var_E8]  +
call esi  +
pop ecx  +
cmp [ebp+var_E0] edi +
jz loc_1023AEF  +
push [ebp+var_E0]  +
call esi  +
pop ecx  +
cmp [ebp+var_DC] edi +
jz loc_1023B00  +
push [ebp+var_DC]  +
call esi  +
pop ecx  +
cmp [ebp+var_D0] edi +
jz loc_1023B11  +
push [ebp+var_D0]  +
call esi  +
pop ecx  +
cmp [ebp+var_D8] edi +
jz loc_1023B22  +
push [ebp+var_D8]  +
call esi  +
pop ecx  +
or eax 0FFFFFFFFh +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1026CC5  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
test eax eax +
jz loc_1023BD3  +
test edi edi +
jz loc_1023BD3  +
push eax  +
push 104h  +
lea eax [ebp+PathName] +
push eax  +
call sub_1008286  +
test eax eax +
jl loc_1023BD3  +
push esi  +
mov esi ds:wcsrchr +
lea eax [ebp+PathName] +
push 5Ch  +
push eax  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1023BAF  +
lea eax [ebp+PathName] +
push 3Ah  +
push eax  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1023BA7  +
mov [ebp+PathName] ax +
jmp loc_1023BB4  +
xor ecx ecx +
mov [eax+2] cx +
jmp loc_1023BB4  +
xor ecx ecx +
mov [eax] cx +
push edi  +
push 0  +
push offset aTte  +
lea eax [ebp+PathName] +
push eax  +
call ds:GetTempFileNameW  +
neg eax  +
sbb eax eax +
neg eax  +
dec eax  +
pop esi  +
jmp loc_1023BD6  +
or eax 0FFFFFFFFh +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_1026CC5  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 8C0h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
or [ebp+hFile] 0FFFFFFFFh +
or [ebp+var_8A4] 0FFFFFFFFh +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_8] +
xor eax eax +
mov [ebp+var_8AC] esi +
mov [ebp+var_89C] edi +
mov [ebp+ExistingFileName] ax +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+8] +
mov [ebp+hInstance] eax +
xor eax eax +
mov dword_102F76C eax +
mov [ebp+var_880] eax +
mov [ebp+lpBuffer] eax +
mov [ebp+var_890] eax +
cmp esi eax +
jz loc_102400F  +
cmp edi eax +
jz loc_102400F  +
mov edi ds:CreateFileW +
push eax  +
mov ebx 80h +
push ebx  +
push 3  +
push eax  +
push 3  +
push 80000000h  +
push esi  +
call edi  +
mov [ebp+hObject] eax +
cmp eax 0FFFFFFFFh +
jz loc_102400F  +
lea eax [ebp+ExistingFileName] +
push eax  +
push esi  +
call sub_1023B3B  +
xor eax eax +
cmp [ebp+ExistingFileName] ax +
jz loc_1023FAF  +
push eax  +
push ebx  +
push 2  +
push eax  +
push 7  +
push 0C0000000h  +
lea eax [ebp+ExistingFileName] +
push eax  +
call edi  +
mov [ebp+hFile] eax +
cmp eax 0FFFFFFFFh +
jz loc_1023FAF  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push [ebp+hObject]  +
call sub_1020EAC  +
test eax eax +
jnz loc_1023FAF  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push [ebp+hFile]  +
call sub_1020F1F  +
test eax eax +
jnz loc_1023FAF  +
movzx ebx [ebp+arg_4] +
movsx esi [ebp+var_81C] +
mov edi ds:malloc +
sub ebx 0DFFEh +
push 0F0h  +
mov [ebp+var_88C] esi +
mov [ebp+var_8A0] ebx +
call edi  +
pop ecx  +
mov [ebp+var_880] eax +
test eax eax +
jz loc_1023FAF  +
push esi  +
push eax  +
push [ebp+hObject]  +
call sub_1020FB8  +
test eax eax +
jnz loc_1023FAF  +
push esi  +
push [ebp+var_880]  +
push [ebp+hFile]  +
call sub_1021040  +
test eax eax +
jnz loc_1023FAF  +
mov eax [ebp+var_880] +
push esi  +
push [ebp+hFile]  +
mov ecx offset aCvt +
push [ebp+hObject]  +
call sub_1021D56  +
test eax eax +
jnz loc_1023FAF  +
mov eax [ebp+var_880] +
push esi  +
push [ebp+hFile]  +
mov ecx offset aFpgm +
push [ebp+hObject]  +
call sub_1021D56  +
test eax eax +
jnz loc_1023FAF  +
mov eax [ebp+var_880] +
push esi  +
push [ebp+hFile]  +
mov ecx offset aPrep +
push [ebp+hObject]  +
call sub_1021D56  +
test eax eax +
jnz loc_1023FAF  +
mov eax [ebp+var_880] +
push esi  +
push [ebp+hFile]  +
mov ecx offset aName +
push [ebp+hObject]  +
call sub_1021D56  +
test eax eax +
jnz loc_1023FAF  +
mov eax [ebp+var_880] +
push esi  +
push [ebp+hFile]  +
mov ecx offset aCmap +
push [ebp+hObject]  +
call sub_1021D56  +
test eax eax +
jnz loc_1023FAF  +
mov eax [ebp+var_880] +
push esi  +
push [ebp+hFile]  +
mov ecx offset aOs2 +
push [ebp+hObject]  +
call sub_1021D56  +
test eax eax +
jnz loc_1023FAF  +
mov eax [ebp+var_880] +
push esi  +
push [ebp+hFile]  +
mov ecx offset aPost +
push [ebp+hObject]  +
call sub_1021D56  +
test eax eax +
jnz loc_1023FAF  +
mov eax [ebp+var_880] +
push esi  +
push [ebp+hFile]  +
mov ecx offset aHhea +
push [ebp+hObject]  +
call sub_1021D56  +
test eax eax +
jnz loc_1023FAF  +
mov eax [ebp+var_880] +
push esi  +
push [ebp+hFile]  +
mov ecx offset aVhea +
push [ebp+hObject]  +
call sub_1021D56  +
test eax eax +
jnz loc_1023FAF  +
mov eax [ebp+var_880] +
push esi  +
mov ecx offset aMaxp +
call sub_10210EA  +
mov [ebp+NumberOfBytesWritten] eax +
test eax eax +
jz loc_1023FAF  +
push 20h  +
lea ecx [ebp+var_840] +
push ecx  +
push eax  +
push [ebp+hObject]  +
call sub_10211B9  +
cmp eax 20h +
jnz loc_1023FAF  +
movzx eax [ebp+var_83C] +
mov [ebp+var_894] eax +
lea eax [ebp+var_894] +
push eax  +
call sub_1020B18  +
movsx eax word ptr [ebp+var_894] +
cmp ebx eax +
mov dword_102F768 eax +
jge loc_1023FAF  +
lea eax ds:3[eax*4] +
cdq   +
and edx 3 +
add eax edx +
mov ebx eax +
sar ebx 2 +
shl ebx 2 +
push ebx  +
call edi  +
pop ecx  +
mov [ebp+lpBuffer] eax +
test eax eax +
jz loc_1023FAF  +
mov esi [ebp+var_89C] +
lea edi [ebp+var_8C0] +
movs   +
movs   +
movs   +
lea eax [ebp+var_894] +
push eax  +
push [ebp+arg_C]  +
movs   +
lea esi [ebp+var_8C0] +
lea edi [ebp+var_89C] +
call sub_102264C  +
mov edi ds:malloc +
mov esi 0FFFFh +
push esi  +
call edi  +
pop ecx  +
mov [ebp+var_890] eax +
test eax eax +
jz loc_1023FAF  +
lea eax [ebp+nNumberOfBytesToWrite] +
push eax  +
push [ebp+arg_C]  +
mov eax [ebp+var_890] +
mov ecx esi +
lea edx [ebp+var_8C0] +
call sub_1022B97  +
test eax eax +
jz loc_102403D  +
mov dword_102F76C eax +
push [ebp+hObject]  +
mov esi ds:CloseHandle +
call esi  +
cmp [ebp+hFile] 0FFFFFFFFh +
jz loc_1023FCE  +
push [ebp+hFile]  +
call esi  +
xor esi esi +
cmp [ebp+var_880] esi +
jz loc_1023FE5  +
push [ebp+var_880]  +
call ds:free  +
pop ecx  +
cmp [ebp+lpBuffer] esi +
jz loc_1023FFA  +
push [ebp+lpBuffer]  +
call ds:free  +
pop ecx  +
cmp [ebp+var_890] esi +
jz loc_102400F  +
push [ebp+var_890]  +
call ds:free  +
pop ecx  +
cmp [ebp+ExistingFileName] 0 +
jz loc_1024026  +
lea eax [ebp+ExistingFileName] +
push eax  +
call ds:DeleteFileW  +
mov eax [ebp+var_8A4] +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1026CC5  +
leave   +
retn 10h  +
lea eax [ebp+var_89C] +
push eax  +
call sub_1020B75  +
lea eax [ebp+var_89C+2] +
push eax  +
call sub_1020B75  +
push [ebp+var_88C]  +
mov eax [ebp+var_880] +
mov ecx offset aHmtx +
call sub_10210EA  +
mov esi eax +
test esi esi +
jz loc_1023FAF  +
push ebx  +
push [ebp+lpBuffer]  +
push esi  +
push [ebp+hObject]  +
call sub_10211B9  +
test eax eax +
jle loc_1023FAF  +
mov eax [ebp+lpBuffer] +
mov ecx [ebp+var_89C] +
mov edx [ebp+var_8A0] +
push ebx  +
push eax  +
push esi  +
push [ebp+hFile]  +
mov [eax+edx*4] ecx +
call sub_1021338  +
test eax eax +
jle loc_1023FAF  +
push [ebp+lpBuffer]  +
call ds:free  +
mov eax dword_102F768 +
lea eax ds:3[eax*4] +
cdq   +
and edx 3 +
add eax edx +
mov esi eax +
sar esi 2 +
shl esi 2 +
push esi  +
call edi  +
pop ecx  +
pop ecx  +
mov [ebp+lpBuffer] eax +
test eax eax +
jz loc_1023FAF  +
lea eax [ebp+var_894] +
push eax  +
call sub_1020B75  +
lea eax [ebp+var_894+2] +
push eax  +
call sub_1020B75  +
push [ebp+var_88C]  +
mov eax [ebp+var_880] +
mov ecx offset aVmtx +
call sub_10210EA  +
mov ebx eax +
test ebx ebx +
jz loc_1023FAF  +
push esi  +
push [ebp+lpBuffer]  +
push ebx  +
push [ebp+hObject]  +
call sub_10211B9  +
test eax eax +
jle loc_1023FAF  +
mov eax [ebp+lpBuffer] +
mov ecx [ebp+var_894] +
mov edx [ebp+var_8A0] +
push esi  +
push eax  +
push ebx  +
push [ebp+hFile]  +
mov [eax+edx*4] ecx +
call sub_1021338  +
test eax eax +
jle loc_1023FAF  +
push [ebp+lpBuffer]  +
call ds:free  +
mov eax dword_102F768 +
lea eax ds:7[eax*4] +
cdq   +
and edx 3 +
add eax edx +
mov esi eax +
sar esi 2 +
shl esi 2 +
push esi  +
call edi  +
pop ecx  +
pop ecx  +
mov [ebp+lpBuffer] eax +
test eax eax +
jz loc_1023FAF  +
push [ebp+var_88C]  +
mov eax [ebp+var_880] +
mov ecx offset aLoca +
call sub_10210EA  +
mov ebx eax +
test ebx ebx +
jz loc_1023FAF  +
push esi  +
push [ebp+lpBuffer]  +
push ebx  +
push [ebp+hObject]  +
call sub_10211B9  +
test eax eax +
jle loc_1023FAF  +
push [ebp+var_88C]  +
mov eax [ebp+var_880] +
mov ecx offset aGlyf +
call sub_10210EA  +
mov edi eax +
test edi edi +
jz loc_1023FAF  +
push [ebp+nNumberOfBytesToWrite]  +
push [ebp+var_890]  +
push [ebp+var_8A0]  +
push esi  +
push [ebp+lpBuffer]  +
push edi  +
push [ebp+hFile]  +
push [ebp+hObject]  +
call sub_1021F1A  +
test eax eax +
jnz loc_1023FAF  +
push [ebp+hFile]  +
call sub_1020DEC  +
test eax eax +
jnz loc_1023FAF  +
push [ebp+var_890]  +
call ds:free  +
and [ebp+var_890] 0 +
pop ecx  +
push esi  +
push [ebp+lpBuffer]  +
push ebx  +
push [ebp+hFile]  +
call sub_1021338  +
test eax eax +
jle loc_1023FAF  +
push [ebp+arg_C]  +
lea edi [ebp+var_840] +
call sub_1021683  +
test eax eax +
jl loc_1023FAF  +
push 20h  +
mov eax edi +
push eax  +
push [ebp+NumberOfBytesWritten]  +
push [ebp+hFile]  +
call sub_1021338  +
cmp eax 20h +
jnz loc_1023FAF  +
push [ebp+var_88C]  +
push [ebp+var_880]  +
push [ebp+hFile]  +
call sub_1021040  +
test eax eax +
jnz loc_1023FAF  +
push [ebp+var_88C]  +
mov eax [ebp+var_880] +
mov ecx offset aHead +
call sub_10210EA  +
mov esi eax +
test esi esi +
jz loc_1023FAF  +
push 36h  +
lea eax [ebp+Buffer] +
push eax  +
push esi  +
push [ebp+hObject]  +
call sub_10211B9  +
test eax eax +
jle loc_1023FAF  +
and dword ptr [esi+4] 0 +
push 36h  +
lea eax [ebp+Buffer] +
push eax  +
push esi  +
push [ebp+hFile]  +
call sub_1021338  +
test eax eax +
jle loc_1023FAF  +
mov ecx [ebp+var_880] +
lea eax [ebp+Buffer] +
push eax  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push [ebp+hFile]  +
mov eax [ebp+var_88C] +
call sub_102149F  +
test eax eax +
jnz loc_1023FAF  +
push 36h  +
lea eax [ebp+Buffer] +
push eax  +
push esi  +
push [ebp+hFile]  +
call sub_1021338  +
test eax eax +
jle loc_1023FAF  +
push [ebp+hObject]  +
mov esi ds:CloseHandle +
call esi  +
push [ebp+hFile]  +
call esi  +
mov edi [ebp+var_8AC] +
lea eax [ebp+FileName] +
push eax  +
push edi  +
call sub_1023B3B  +
mov ebx ds:DeleteFileW +
lea eax [ebp+FileName] +
push eax  +
call ebx  +
test eax eax +
jz loc_10243D5  +
mov esi ds:MoveFileW +
lea eax [ebp+FileName] +
push eax  +
push edi  +
call esi  +
test eax eax +
jz loc_10243D5  +
push edi  +
lea eax [ebp+ExistingFileName] +
push eax  +
call esi  +
test eax eax +
jnz loc_1024432  +
mov edi ds:LoadStringW +
mov esi 100h +
push esi  +
lea eax [ebp+Caption] +
push eax  +
push 0EF3Bh  +
push [ebp+hInstance]  +
call edi  +
push esi  +
lea eax [ebp+Text] +
push eax  +
push 0EF6Ch  +
push [ebp+hInstance]  +
call edi  +
call sub_101C4D7  +
test eax eax +
jz loc_1024416  +
mov eax [eax+20h] +
push 0  +
lea ecx [ebp+Caption] +
push ecx  +
lea ecx [ebp+Text] +
push ecx  +
push eax  +
call ds:MessageBoxW  +
jmp loc_1023FAF  +
lea eax [ebp+FileName] +
push eax  +
call ebx  +
test eax eax +
jnz loc_102445B  +
push edi  +
call ebx  +
push edi  +
lea eax [ebp+FileName] +
push eax  +
call esi  +
mov [ebp+var_8A4] 0FFFFFFFDh +
jmp loc_1023FAF  +
push [ebp+var_880]  +
mov esi ds:free +
call esi  +
push [ebp+lpBuffer]  +
call esi  +
pop ecx  +
pop ecx  +
xor eax eax +
jmp loc_102402C  +
***
call __EH_prolog3  +
lea ecx [ebp-14h] +
call ??0CString@@QAE@XZ  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-10h] +
call ??0CString@@QAE@XZ  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 1 +
call ?LoadStringW@CString@@QAEHI@Z  +
push dword ptr [ebp+10h]  +
lea ecx [ebp-10h] +
call ?LoadStringW@CString@@QAEHI@Z  +
cmp dword ptr [ebp+14h] 0 +
jz loc_10244C3  +
push 30h  +
jmp loc_10244C5  +
push 33h  +
push dword ptr [ebp-14h]  +
push dword ptr [ebp-10h]  +
push dword ptr [ebp+8]  +
call ds:MessageBoxW  +
lea ecx [ebp-10h] +
mov esi eax +
mov byte ptr [ebp-4] 0 +
call ??1CString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call ??1CString@@QAE@XZ  +
mov eax esi +
call __EH_epilog3  +
retn 10h  +
***
call __EH_prolog3  +
lea ecx [ebp-14h] +
call ??0CString@@QAE@XZ  +
xor ebx ebx +
lea ecx [ebp-18h] +
mov [ebp-4] ebx +
call ??0CString@@QAE@XZ  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp+18h] +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 1 +
xor esi esi +
mov [ebp-10h] ebx +
mov [ebp-1Ch] eax +
call ?LoadStringW@CString@@QAEHI@Z  +
push dword ptr [ebp+10h]  +
lea ecx [ebp-18h] +
call ?LoadStringW@CString@@QAEHI@Z  +
lea eax [ebp-1Ch] +
push eax  +
push ebx  +
lea eax [ebp-10h] +
push eax  +
push ebx  +
push ebx  +
push dword ptr [ebp-18h]  +
push 500h  +
call ds:FormatMessageW  +
mov [ebp-1Ch] ebx +
cmp [ebp-10h] ebx +
jz loc_1024589  +
cmp [ebp+14h] ebx +
jz loc_102456D  +
push 30h  +
jmp loc_102456F  +
push 33h  +
push dword ptr [ebp-14h]  +
push dword ptr [ebp-10h]  +
push dword ptr [ebp+8]  +
call ds:MessageBoxW  +
push dword ptr [ebp-10h]  +
mov esi eax +
call ds:LocalFree  +
lea ecx [ebp-18h] +
mov [ebp-4] bl +
call ??1CString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call ??1CString@@QAE@XZ  +
mov eax esi +
call __EH_epilog3  +
retn   +
***
call __EH_prolog3  +
lea ecx [ebp-10h] +
call ??0CString@@QAE@XZ  +
and dword ptr [ebp-4] 0 +
cmp dword ptr [ebp+8] 0 +
lea ecx [ebp-10h] +
jz loc_10245FF  +
push dword ptr [ebp+0Ch]  +
call ?LoadStringW@CString@@QAEHI@Z  +
mov eax [ebp-10h] +
mov eax [eax-8] +
inc eax  +
push eax  +
lea ecx [ebp-10h] +
call ?GetBuffer@CString@@QAEPAGH@Z  +
push eax  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
call sub_1008286  +
push 0FFFFFFFFh  +
lea ecx [ebp-10h] +
call ?ReleaseBuffer@CString@@QAEXH@Z  +
lea ecx [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
call ??1CString@@QAE@XZ  +
call __EH_epilog3  +
retn 0Ch  +
***
call __EH_prolog3  +
mov eax [ebp+0Ch] +
mov eax [eax-8] +
and dword ptr [ebp-4] 0 +
inc eax  +
push eax  +
lea ecx [ebp+0Ch] +
call ?GetBuffer@CString@@QAEPAGH@Z  +
push eax  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
call sub_1008286  +
push 0FFFFFFFFh  +
lea ecx [ebp+0Ch] +
call ?ReleaseBuffer@CString@@QAEXH@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+0Ch] +
call ??1CString@@QAE@XZ  +
call __EH_epilog3  +
retn 0Ch  +
***
cmp dword_102F7F8 0 +
jz locret_1024699  +
push esi  +
push edi  +
mov edi offset unk_102F79C +
mov eax [edi] +
mov esi [eax] +
push eax  +
call ds:free  +
pop ecx  +
mov eax esi +
test esi esi +
jnz loc_1024676  +
add edi 1Ch +
cmp edi offset unk_102F80C +
jl loc_1024674  +
and dword_102F7F8 esi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
imul eax eax +
add eax offset dword_102F788 +
mov ecx [eax+14h] +
mov [eax+18h] ecx +
lea edx [ecx+4] +
mov [eax] edx +
lea ecx [eax+4] +
mov [ecx] edx +
push esi  +
xor esi esi +
mov dword ptr [eax+10h] 14h +
mov [edx+4] esi +
mov edx [ecx] +
mov [edx] esi +
mov edx [ecx] +
mov [edx+8] esi +
mov ecx [ecx] +
mov [ecx+0Ch] esi +
mov [eax+0Ch] esi +
mov [eax+8] esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
test ecx ecx +
jz loc_102470D  +
mov eax [ebp+arg_0] +
cmp eax 3 +
ja loc_102470D  +
imul eax eax +
mov eax dword_102F788[eax] +
mov [ecx] eax +
xor eax eax +
jmp loc_1024710  +
or eax 0FFFFFFFFh +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi eax +
imul esi esi +
mov eax 800h +
add esi offset dword_102F788 +
cmp edi eax +
jle loc_1024734  +
xor eax eax +
pop esi  +
retn   +
mov ecx eax +
sub ecx edi +
cmp [esi+10h] ecx +
jl loc_1024769  +
mov ecx [esi+18h] +
mov ecx [ecx] +
test ecx ecx +
jnz loc_102475F  +
push eax  +
call ds:malloc  +
pop ecx  +
test eax eax +
jz loc_1024730  +
and dword ptr [eax] 0 +
mov ecx [esi+18h] +
mov [ecx] eax +
mov [esi+18h] eax +
jmp loc_1024762  +
mov [esi+18h] ecx +
mov dword ptr [esi+10h] 4 +
mov ecx [esi+10h] +
mov eax [esi+18h] +
add eax ecx +
add ecx edi +
mov [esi+10h] ecx +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 3 +
ja loc_1024795  +
imul eax eax +
mov eax dword_102F790[eax] +
jmp loc_1024798  +
or eax 0FFFFFFFFh +
pop ebp  +
retn 4  +
***
cmp dword_102F7F8 0 +
jz loc_10247AD  +
xor eax eax +
retn   +
push esi  +
push edi  +
xor edi edi +
mov esi offset unk_102F79C +
push 800h  +
call ds:malloc  +
pop ecx  +
test eax eax +
jz loc_10247EC  +
and dword ptr [eax] 0 +
push edi  +
mov [esi] eax +
call sub_102469F  +
add esi 1Ch +
inc edi  +
cmp esi offset unk_102F80C +
jl loc_10247B6  +
mov dword_102F7F8 1 +
xor eax eax +
pop edi  +
pop esi  +
retn   +
or eax 0FFFFFFFFh +
jmp loc_10247E9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi eax +
imul esi esi +
add esi offset dword_102F788 +
mov ecx [esi+4] +
mov ecx [ecx+8] +
mov edx [esi+0Ch] +
mov [edx] ecx +
mov ecx [esi+4] +
mov ecx [ecx+8] +
mov edx [esi+0Ch] +
push edi  +
push 10h  +
pop edi  +
mov [ecx+4] edx +
call sub_1024719  +
xor ecx ecx +
cmp eax ecx +
jnz loc_1024835  +
or eax 0FFFFFFFFh +
jmp loc_1024853  +
mov edx [esi+4] +
mov [edx] eax +
mov edx [esi+4] +
mov [eax+4] edx +
mov [eax] ecx +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
inc dword ptr [esi+8]  +
mov [esi+4] eax +
mov [esi+0Ch] ecx +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
test esi esi +
jnz loc_1024870  +
or eax 0FFFFFFFFh +
jmp loc_10248D8  +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx eax +
imul ebx ebx +
push edi  +
push 10h  +
pop edi  +
add ebx offset dword_102F788 +
call sub_1024719  +
test eax eax +
jnz loc_1024891  +
or eax 0FFFFFFFFh +
jmp loc_10248D6  +
mov ecx [ebx+0Ch] +
test ecx ecx +
jnz loc_10248B0  +
mov ecx [ebx+4] +
mov [ecx+8] eax +
mov [ebx+0Ch] eax +
lea edi [eax+8] +
movs   +
movs   +
mov eax [ebx+0Ch] +
and dword ptr [eax+4] 0 +
jmp loc_10248C8  +
mov [ecx] eax +
mov eax [ebx+0Ch] +
mov ecx [eax] +
mov [ecx+4] eax +
mov eax [ebx+0Ch] +
mov eax [eax] +
mov [ebx+0Ch] eax +
lea edi [eax+8] +
movs   +
movs   +
mov eax [ebx+0Ch] +
and dword ptr [eax] 0 +
mov ebx [ebx+4] +
inc dword ptr [ebx+0Ch]  +
xor eax eax +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
cmp esi 3 +
ja loc_102495A  +
cmp [ebp+arg_4] 3 +
ja loc_102495A  +
push [ebp+arg_4]  +
call sub_102469F  +
imul esi esi +
and [ebp+var_4] 0 +
cmp dword_102F790[esi] 0 +
mov edi dword_102F788[esi] +
jle loc_1024956  +
mov eax [edi+0Ch] +
mov ebx [edi+8] +
mov [ebp+arg_0] eax +
test eax eax +
jle loc_102493E  +
dec [ebp+arg_0]  +
lea eax [ebx+8] +
push eax  +
push [ebp+arg_4]  +
call sub_102485E  +
test eax eax +
jnz loc_102495A  +
cmp [ebp+arg_0] eax +
mov ebx [ebx] +
jg loc_1024924  +
push [ebp+arg_4]  +
mov edi [edi] +
call sub_10247F6  +
inc [ebp+var_4]  +
mov eax [ebp+var_4] +
cmp eax dword_102F790[esi] +
jl loc_1024917  +
xor eax eax +
jmp loc_102495D  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
xor ebx ebx +
cmp [ebp+NumberOfBytesRead] ebx +
jnz loc_102497E  +
or eax 0FFFFFFFFh +
jmp loc_1024A98  +
mov eax [ebp+arg_4] +
xor ecx ecx +
cmp eax ebx +
push ebx  +
setnz cl  +
push 80h  +
neg eax  +
push 3  +
sbb eax eax +
push ebx  +
and eax 40000000h +
push 3  +
add eax 80000000h +
push eax  +
push [ebp+NumberOfBytesRead]  +
mov dword_102F880 ecx +
call ds:CreateFileW  +
mov dword_102F878 eax +
cmp eax 0FFFFFFFFh +
jz loc_1024976  +
push esi  +
mov esi ds:ReadFile +
push edi  +
push ebx  +
lea ecx [ebp+NumberOfBytesRead] +
push ecx  +
push 66h  +
push offset unk_102F810  +
push eax  +
call esi  +
test eax eax +
jz loc_1024A64  +
cmp [ebp+NumberOfBytesRead] 66h +
jnz loc_1024A64  +
movsx edi word_102F85E +
shl edi 2 +
push edi  +
call ds:malloc  +
pop ecx  +
mov lpBuffer eax +
cmp eax ebx +
jz loc_1024A64  +
push ebx  +
push ebx  +
push lDistanceToMove  +
push dword_102F878  +
call ds:SetFilePointer  +
cmp eax lDistanceToMove +
jnz loc_1024A64  +
push ebx  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push 0Eh  +
push offset unk_102F800  +
push dword_102F878  +
call esi  +
test eax eax +
jz loc_1024A64  +
cmp [ebp+NumberOfBytesRead] 0Eh +
jnz loc_1024A64  +
push ebx  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push edi  +
push lpBuffer  +
push dword_102F878  +
call esi  +
test eax eax +
jz loc_1024A64  +
cmp [ebp+NumberOfBytesRead] edi +
jnz loc_1024A64  +
mov dword_102F87C 1 +
xor eax eax +
jmp loc_1024A96  +
mov eax dword_102F878 +
cmp eax 0FFFFFFFFh +
jz loc_1024A7C  +
push eax  +
call ds:CloseHandle  +
or dword_102F878 0FFFFFFFFh +
mov eax lpBuffer +
cmp eax ebx +
jz loc_1024A93  +
push eax  +
call ds:free  +
pop ecx  +
mov lpBuffer ebx +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
xor ebx ebx +
cmp dword_102F880 1 +
push edi  +
jl loc_1024B22  +
push ebx  +
push ebx  +
push lDistanceToMove  +
push dword_102F878  +
call ds:SetFilePointer  +
cmp eax lDistanceToMove +
jnz loc_1024B1D  +
mov edi ds:WriteFile +
push ebx  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push 0Eh  +
push offset unk_102F800  +
push dword_102F878  +
call edi  +
test eax eax +
jz loc_1024B1D  +
cmp [ebp+NumberOfBytesWritten] 0Eh +
jnz loc_1024B1D  +
movsx esi word_102F85E +
push ebx  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
shl esi 2 +
push esi  +
push lpBuffer  +
push dword_102F878  +
call edi  +
test eax eax +
jz loc_1024B1D  +
cmp [ebp+NumberOfBytesWritten] esi +
jz loc_1024B22  +
or eax 0FFFFFFFFh +
jmp loc_1024B81  +
mov eax dword_102F878 +
cmp eax 0FFFFFFFFh +
jz loc_1024B3A  +
push eax  +
call ds:CloseHandle  +
or dword_102F878 0FFFFFFFFh +
mov eax lpBuffer +
mov esi ds:free +
cmp eax ebx +
jz loc_1024B53  +
push eax  +
call esi  +
pop ecx  +
mov lpBuffer ebx +
mov eax dword_102F888 +
cmp eax ebx +
jz loc_1024B66  +
push eax  +
call esi  +
pop ecx  +
mov dword_102F888 ebx +
mov eax dword_102F88C +
cmp eax ebx +
jz loc_1024B79  +
push eax  +
call esi  +
pop ecx  +
mov dword_102F88C ebx +
mov dword_102F87C ebx +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 70h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push edi  +
xor edi edi +
cmp eax edi +
jnz loc_1024BAC  +
or eax 0FFFFFFFFh +
jmp loc_1024C1B  +
push esi  +
push edi  +
push 80h  +
push 3  +
push edi  +
push 3  +
push 80000000h  +
push eax  +
call ds:CreateFileW  +
mov esi eax +
or eax 0FFFFFFFFh +
cmp esi eax +
jz loc_1024C1A  +
push edi  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push 66h  +
lea eax [ebp+hObject] +
push eax  +
push esi  +
call ds:ReadFile  +
test eax eax +
jz loc_1024C11  +
cmp [ebp+NumberOfBytesRead] 66h +
jnz loc_1024C11  +
push esi  +
call ds:CloseHandle  +
push 4  +
pop ecx  +
mov edi offset aWineudc2standa +
lea esi [ebp+hObject] +
xor eax eax +
cmps   +
jnz loc_1024C18  +
mov eax 40F0h +
cmp [ebp+var_22] ax +
jnz loc_1024C18  +
xor eax eax +
inc eax  +
jmp loc_1024C1A  +
push esi  +
call ds:CloseHandle  +
xor eax eax +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_1026CC5  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
push edi  +
xor esi esi +
xor eax eax +
lea edi [ebp+var_8] +
mov [ebp+Buffer] esi +
stos   +
cmp [ebp+arg_0] esi +
jz loc_1024D15  +
cmp [ebp+arg_4] esi +
jz loc_1024D15  +
cmp [ebp+arg_8] esi +
jz loc_1024D15  +
cmp [ebp+arg_C] esi +
jz loc_1024D15  +
xor ecx ecx +
cmp dword_102F87C esi +
jz loc_1024D15  +
cmp dword_102F878 0FFFFFFFFh +
jz loc_1024D15  +
xor ebx ebx +
xor edi edi +
cmp ax word_102F85E +
jge loc_1024CEE  +
mov eax lpBuffer +
mov eax [eax+edi*4] +
cmp eax esi +
jz loc_1024CE2  +
cmp ecx esi +
jnz loc_1024CE1  +
mov ecx lDistanceToMove +
push esi  +
push esi  +
add eax ecx +
push eax  +
push dword_102F878  +
call ds:SetFilePointer  +
cmp eax 0FFFFFFFFh +
jz loc_1024D15  +
push esi  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push 8  +
lea eax [ebp+Buffer] +
push eax  +
push dword_102F878  +
call ds:ReadFile  +
test eax eax +
jz loc_1024D15  +
cmp [ebp+NumberOfBytesRead] 8 +
jnz loc_1024D15  +
xor ecx ecx +
inc ecx  +
inc ebx  +
movsx eax word_102F85E +
inc edi  +
cmp edi eax +
jl loc_1024C91  +
movsx eax word_102F85E +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_8] +
mov [eax] ebx +
movsx eax word ptr [ebp+var_8] +
mov [ecx] eax +
movsx eax word ptr [ebp+var_8+2] +
mov ecx [ebp+arg_C] +
mov [ecx] eax +
xor eax eax +
jmp loc_1024D18  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
movsx esi word_102F85E +
add esi esi +
push esi  +
call ds:malloc  +
pop ecx  +
mov dword_102F888 eax +
test eax eax +
jz loc_1024D89  +
push 0  +
push 0  +
push dword_102F860  +
push dword_102F878  +
call ds:SetFilePointer  +
cmp eax dword_102F860 +
jnz loc_1024D89  +
push 0  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push esi  +
push dword_102F888  +
push dword_102F878  +
call ds:ReadFile  +
test eax eax +
jz loc_1024D89  +
cmp [ebp+NumberOfBytesRead] esi +
jnz loc_1024D89  +
xor eax eax +
jmp loc_1024D8C  +
or eax 0FFFFFFFFh +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
push edi  +
xor edi edi +
cmp [ebp+lpBuffer] edi +
jz loc_1024EA9  +
cmp [ebp+arg_C] edi +
jz loc_1024EA9  +
cmp [ebp+arg_10] edi +
jz loc_1024EA9  +
cmp [ebp+arg_14] edi +
jz loc_1024EA9  +
cmp dword_102F87C edi +
jz loc_1024EA9  +
mov eax lpBuffer +
mov ecx [ebp+arg_0] +
mov esi [eax+ecx*4] +
cmp esi edi +
jnz loc_1024DE7  +
xor eax eax +
jmp loc_1024EAC  +
add esi lDistanceToMove +
push edi  +
push edi  +
push esi  +
push dword_102F878  +
call ds:SetFilePointer  +
cmp eax esi +
jnz loc_1024EA9  +
push edi  +
mov edi ds:ReadFile +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push 8  +
lea eax [ebp+Buffer] +
push eax  +
push dword_102F878  +
call edi  +
test eax eax +
jz loc_1024EA9  +
cmp [ebp+NumberOfBytesRead] 8 +
jnz loc_1024EA9  +
movsx eax [ebp+var_8] +
mov ebx [ebp+arg_8] +
add eax 0Fh +
cdq   +
and edx 0Fh +
add eax edx +
mov esi eax +
movsx eax [ebp+var_6] +
sar esi 4 +
imul esi eax +
add esi esi +
cmp esi ebx +
jg loc_1024E4F  +
mov ebx esi +
test ebx ebx +
jle loc_1024E6E  +
push 0  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push ebx  +
push [ebp+lpBuffer]  +
push dword_102F878  +
call edi  +
test eax eax +
jz loc_1024EA9  +
cmp [ebp+NumberOfBytesRead] ebx +
jnz loc_1024EA9  +
cmp dword_102F888 0 +
movsx eax [ebp+var_8] +
mov ecx [ebp+arg_C] +
mov [ecx] eax +
movsx eax [ebp+var_6] +
mov ecx [ebp+arg_10] +
mov [ecx] eax +
jnz loc_1024E92  +
call sub_1024D24  +
test eax eax +
jnz loc_1024EA9  +
mov eax [ebp+arg_0] +
mov ecx dword_102F888 +
mov ax [ecx+eax*2] +
mov ecx [ebp+arg_14] +
mov [ecx] ax +
mov eax esi +
jmp loc_1024EAC  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
xor esi esi +
cmp ebx esi +
jnz loc_1024ED0  +
or eax 0FFFFFFFFh +
jmp loc_1024F54  +
cmp dword_102F888 esi +
jnz loc_1024EE1  +
call sub_1024D24  +
test eax eax +
jnz loc_1024EC8  +
movsx eax word_102F85E +
shl eax 2 +
push edi  +
push eax  +
call ds:malloc  +
mov edi eax +
pop ecx  +
cmp edi esi +
jnz loc_1024EFF  +
or eax 0FFFFFFFFh +
jmp loc_1024F53  +
xor eax eax +
cmp ax word_102F85E +
jge loc_1024F49  +
mov eax lpBuffer +
cmp dword ptr [eax+esi*4] 0 +
jz loc_1024F39  +
cmp [ebp+arg_4] 0 +
mov eax dword_102F888 +
movzx eax word ptr [eax+esi*2] +
jnz loc_1024F2D  +
push eax  +
call sub_100AD29  +
movzx eax ax +
movzx eax ax +
mov [edi+eax*4-38000h] esi +
jmp loc_1024F3D  +
or dword ptr [edi+esi*4] 0FFFFFFFFh +
movsx eax word_102F85E +
inc esi  +
cmp esi eax +
jl loc_1024F0A  +
mov dword_102F88C edi +
mov [ebx] edi +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
and dword_102F99C 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
jz loc_1024F7D  +
movzx eax word ptr [ebp+arg_0] +
jmp loc_1024F88  +
push [ebp+arg_0]  +
call sub_100AD29  +
movzx eax ax +
movzx eax ax +
sub eax 0E000h +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
cmp [ebp+lpBuffer] ebx +
jz loc_1025117  +
cmp [ebp+arg_C] ebx +
jz loc_1025117  +
cmp [ebp+arg_10] ebx +
jz loc_1025117  +
push [ebp+Buffer]  +
push [ebp+NumberOfBytesRead]  +
call sub_1024F6C  +
mov esi eax +
cmp dword_102F99C ebx +
jz loc_1025117  +
cmp dword_102F990 esi +
jl loc_1025117  +
cmp esi ebx +
jl loc_1025117  +
push ebx  +
push 80h  +
push 3  +
push ebx  +
push 3  +
push 80000000h  +
push offset FileName  +
call ds:CreateFileW  +
mov edi eax +
or eax 0FFFFFFFFh +
mov [ebp+hObject] edi +
cmp edi eax +
jz loc_102511A  +
mov eax dword_102F994 +
push ebx  +
lea eax [eax+esi*4] +
mov esi ds:SetFilePointer +
push ebx  +
push eax  +
push edi  +
mov [ebp+Buffer] eax +
call esi  +
cmp eax [ebp+Buffer] +
jnz loc_102510E  +
push ebx  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push 4  +
lea eax [ebp+Buffer] +
push eax  +
push edi  +
mov edi ds:ReadFile +
call edi  +
test eax eax +
jz loc_102510E  +
cmp [ebp+NumberOfBytesRead] 4 +
jnz loc_102510E  +
mov eax [ebp+Buffer] +
cmp eax ebx +
jz loc_102510E  +
add eax dword_102F998 +
push ebx  +
push ebx  +
push eax  +
push [ebp+hObject]  +
mov [ebp+Buffer] eax +
call esi  +
cmp eax [ebp+Buffer] +
jnz loc_102510E  +
push ebx  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push 8  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+hObject]  +
call edi  +
test eax eax +
jz loc_102510E  +
cmp [ebp+NumberOfBytesRead] 8 +
jnz loc_102510E  +
movsx eax [ebp+var_C] +
add eax 0Fh +
cdq   +
and edx 0Fh +
add eax edx +
mov esi eax +
movsx eax [ebp+var_A] +
sar esi 4 +
imul esi eax +
mov eax [ebp+arg_8] +
add esi esi +
cmp esi eax +
jg loc_10250C3  +
mov eax esi +
push ebx  +
movzx eax ax +
lea ecx [ebp+NumberOfBytesRead] +
push ecx  +
push eax  +
push [ebp+lpBuffer]  +
mov [ebp+var_8] eax +
push [ebp+hObject]  +
call edi  +
test eax eax +
jz loc_102510E  +
mov eax [ebp+var_8] +
cmp [ebp+NumberOfBytesRead] eax +
jnz loc_102510E  +
cmp esi [ebp+arg_8] +
jle loc_10250ED  +
sub esi [ebp+arg_8] +
jmp loc_10250EF  +
xor esi esi +
movsx eax [ebp+var_C] +
mov ecx [ebp+arg_C] +
push [ebp+hObject]  +
mov [ecx] eax +
movsx eax [ebp+var_A] +
mov ecx [ebp+arg_10] +
mov [ecx] eax +
call ds:CloseHandle  +
mov eax esi +
jmp loc_102511A  +
push [ebp+hObject]  +
call ds:CloseHandle  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp [ebp+hFile] 0FFFFFFFFh +
jz loc_102516F  +
cmp [ebp+lpBuffer] 0 +
jz loc_102516F  +
push 0  +
push 0  +
push [ebp+lDistanceToMove]  +
push [ebp+hFile]  +
call ds:SetFilePointer  +
cmp eax [ebp+lDistanceToMove] +
jnz loc_102516F  +
push 0  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push 0Eh  +
push [ebp+lpBuffer]  +
push [ebp+hFile]  +
call ds:ReadFile  +
test eax eax +
jz loc_102516F  +
cmp [ebp+NumberOfBytesRead] 0Eh +
jnz loc_102516F  +
xor eax eax +
jmp locret_1025172  +
or eax 0FFFFFFFFh +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp [ebp+hFile] 0FFFFFFFFh +
jz loc_10251C4  +
cmp [ebp+lpBuffer] 0 +
jz loc_10251C4  +
push 0  +
push 0  +
push [ebp+lDistanceToMove]  +
push [ebp+hFile]  +
call ds:SetFilePointer  +
cmp eax [ebp+lDistanceToMove] +
jnz loc_10251C4  +
push 0  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push 0Eh  +
push [ebp+lpBuffer]  +
push [ebp+hFile]  +
call ds:WriteFile  +
test eax eax +
jz loc_10251C4  +
cmp [ebp+NumberOfBytesWritten] 0Eh +
jnz loc_10251C4  +
xor eax eax +
jmp locret_10251C7  +
or eax 0FFFFFFFFh +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp [ebp+hFile] 0FFFFFFFFh +
jz loc_1025221  +
cmp [ebp+lpBuffer] 0 +
jz loc_1025221  +
mov ecx dword_102F994 +
push esi  +
push 0  +
push 0  +
lea esi [ecx+eax*4] +
push esi  +
push [ebp+hFile]  +
call ds:SetFilePointer  +
cmp eax esi +
pop esi  +
jnz loc_1025221  +
push 0  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push 4  +
push [ebp+lpBuffer]  +
push [ebp+hFile]  +
call ds:ReadFile  +
test eax eax +
jz loc_1025221  +
cmp [ebp+NumberOfBytesRead] 4 +
jnz loc_1025221  +
xor eax eax +
jmp locret_1025224  +
or eax 0FFFFFFFFh +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp [ebp+hFile] 0FFFFFFFFh +
jz loc_1025279  +
mov ecx dword_102F994 +
push esi  +
push 0  +
push 0  +
lea esi [ecx+eax*4] +
push esi  +
push [ebp+hFile]  +
call ds:SetFilePointer  +
cmp eax esi +
pop esi  +
jnz loc_1025279  +
push 0  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push 4  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+hFile]  +
call ds:WriteFile  +
test eax eax +
jz loc_1025279  +
cmp [ebp+NumberOfBytesWritten] 4 +
jnz loc_1025279  +
xor eax eax +
jmp locret_102527C  +
or eax 0FFFFFFFFh +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp [ebp+hFile] 0FFFFFFFFh +
push esi  +
mov esi eax +
jz loc_10252D4  +
cmp [ebp+lpBuffer] 0 +
jz loc_10252D4  +
add esi dword_102F998 +
push 0  +
push 0  +
push esi  +
push [ebp+hFile]  +
call ds:SetFilePointer  +
cmp eax esi +
jnz loc_10252D4  +
push 0  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push 8  +
push [ebp+lpBuffer]  +
push [ebp+hFile]  +
call ds:ReadFile  +
test eax eax +
jz loc_10252D4  +
cmp [ebp+NumberOfBytesRead] 8 +
jnz loc_10252D4  +
xor eax eax +
jmp loc_10252D7  +
or eax 0FFFFFFFFh +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp [ebp+hFile] 0FFFFFFFFh +
push esi  +
mov esi eax +
jz loc_1025330  +
cmp [ebp+lpBuffer] 0 +
jz loc_1025330  +
add esi dword_102F998 +
push 0  +
push 0  +
push esi  +
push [ebp+hFile]  +
call ds:SetFilePointer  +
cmp eax esi +
jnz loc_1025330  +
push 0  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push 8  +
push [ebp+lpBuffer]  +
push [ebp+hFile]  +
call ds:WriteFile  +
test eax eax +
jz loc_1025330  +
cmp [ebp+NumberOfBytesWritten] 8 +
jnz loc_1025330  +
xor eax eax +
jmp loc_1025333  +
or eax 0FFFFFFFFh +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 70h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push edi  +
xor edi edi +
cmp eax edi +
jnz loc_102535E  +
or eax 0FFFFFFFFh +
jmp loc_10253CD  +
push esi  +
push edi  +
push 80h  +
push 3  +
push edi  +
push 3  +
push 80000000h  +
push eax  +
call ds:CreateFileW  +
mov esi eax +
or eax 0FFFFFFFFh +
cmp esi eax +
jz loc_10253CC  +
push ebx  +
push edi  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push 66h  +
lea eax [ebp+Buffer] +
push eax  +
push esi  +
call ds:ReadFile  +
push esi  +
mov ebx eax +
call ds:CloseHandle  +
cmp ebx edi +
pop ebx  +
jz loc_10253CA  +
cmp [ebp+NumberOfBytesRead] 66h +
jnz loc_10253CA  +
push 7  +
pop ecx  +
mov edi offset aWindows95Eudc +
lea esi [ebp+Buffer] +
xor eax eax +
cmps   +
jnz loc_10253CA  +
mov eax 0E0h +
xor ecx ecx +
cmp [ebp+var_22] ax +
setz cl  +
mov eax ecx +
jmp loc_10253CC  +
xor eax eax +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_1026CC5  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
push esi  +
xor esi esi +
cmp [ebp+lpBuffer] esi +
jnz loc_10253FA  +
or eax 0FFFFFFFFh +
jmp loc_102555B  +
push edi  +
push [ebp+arg_10]  +
push [ebp+NumberOfBytesWritten]  +
call sub_1024F6C  +
mov edi eax +
mov [ebp+var_4] edi +
cmp dword_102F99C esi +
jz loc_1025557  +
cmp dword_102F990 edi +
jl loc_1025557  +
cmp edi esi +
jl loc_1025557  +
push esi  +
push 80h  +
push 3  +
push esi  +
push 3  +
push 0C0000000h  +
push offset FileName  +
call ds:CreateFileW  +
mov ebx eax +
or eax 0FFFFFFFFh +
cmp ebx eax +
jz loc_102555A  +
lea eax [ebp+arg_10] +
push eax  +
push ebx  +
mov eax edi +
call sub_10251D0  +
test eax eax +
jnz loc_1025550  +
mov edi [ebp+arg_8] +
lea eax [edi+0Fh] +
cdq   +
and edx 0Fh +
add eax edx +
mov esi eax +
mov eax [ebp+arg_10] +
sar esi 4 +
imul esi [ebp+arg_C] +
add esi esi +
test eax eax +
jz loc_10254B8  +
lea ecx [ebp+var_C] +
push ecx  +
push ebx  +
call sub_1025285  +
test eax eax +
jnz loc_1025550  +
movsx eax [ebp+var_8] +
movsx ecx [ebp+var_6] +
add eax 0Fh +
cdq   +
and edx 0Fh +
add eax edx +
sar eax 4 +
imul eax ecx +
add eax eax +
cmp eax esi +
jge loc_10254B8  +
and [ebp+arg_10] 0 +
lea eax [ebp+Buffer] +
push eax  +
push dword_102F998  +
push ebx  +
call sub_1025126  +
test eax eax +
jnz loc_1025550  +
cmp [ebp+arg_10] eax +
jnz loc_10254E2  +
mov eax [ebp+Buffer] +
mov [ebp+arg_10] eax +
lea eax [eax+esi+8] +
mov [ebp+Buffer] eax +
mov ax word ptr [ebp+arg_C] +
mov [ebp+var_6] ax +
lea eax [esi+8] +
mov [ebp+var_C] eax +
lea eax [ebp+var_C] +
push eax  +
mov eax [ebp+arg_10] +
push ebx  +
mov [ebp+var_8] di +
call sub_10252E1  +
test eax eax +
jnz loc_1025550  +
push eax  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
movzx esi si +
push esi  +
push [ebp+lpBuffer]  +
push ebx  +
call ds:WriteFile  +
test eax eax +
jz loc_1025550  +
cmp [ebp+NumberOfBytesWritten] esi +
jnz loc_1025550  +
push [ebp+arg_10]  +
mov eax [ebp+var_4] +
push ebx  +
call sub_102522D  +
test eax eax +
jnz loc_1025550  +
lea eax [ebp+Buffer] +
push eax  +
push dword_102F998  +
push ebx  +
call sub_102517B  +
test eax eax +
jnz loc_1025550  +
push ebx  +
call ds:CloseHandle  +
xor eax eax +
jmp loc_102555A  +
push ebx  +
call ds:CloseHandle  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 70h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jnz loc_1025588  +
or eax 0FFFFFFFFh +
jmp loc_1025616  +
push esi  +
call sub_100ABC1  +
push edi  +
mov esi 80h +
push esi  +
push offset FileName  +
call sub_1008286  +
test eax eax +
jl loc_1025612  +
push 0  +
push esi  +
push 3  +
push 0  +
push 3  +
push 80000000h  +
push edi  +
call ds:CreateFileW  +
mov esi eax +
cmp esi 0FFFFFFFFh +
jz loc_1025612  +
push 0  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push 66h  +
lea eax [ebp+Buffer] +
push eax  +
push esi  +
call ds:ReadFile  +
test eax eax +
jz loc_102560B  +
cmp [ebp+NumberOfBytesRead] 66h +
jnz loc_102560B  +
mov eax [ebp+var_A] +
mov dword_102F998 eax +
add eax 0Eh +
mov dword_102F994 eax +
movsx eax [ebp+var_1E] +
dec eax  +
push esi  +
mov dword_102F990 eax +
call ds:CloseHandle  +
mov dword_102F99C 1 +
xor eax eax +
jmp loc_1025615  +
push esi  +
call ds:CloseHandle  +
or eax 0FFFFFFFFh +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_1026CC5  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 288h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
push ebx  +
xor ebx ebx +
push esi  +
mov [ebp+var_284] ecx +
cmp eax ebx +
jz loc_10257E6  +
cmp ecx ebx +
jz loc_10257E6  +
push eax  +
mov esi 104h +
push esi  +
lea eax [ebp+FileName] +
push eax  +
call sub_1008286  +
test eax eax +
jl loc_10257E6  +
lea eax [ebp+FileName] +
push eax  +
call ds:lstrlenW  +
xor ecx ecx +
push offset PrefixString  +
mov word ptr [ebp+eax*2+var_212] cx +
push esi  +
lea eax [ebp+FileName] +
push eax  +
call sub_10082C0  +
test eax eax +
jl loc_10257E6  +
push ebx  +
push 80h  +
push 3  +
push ebx  +
push 3  +
push 80000000h  +
lea eax [ebp+FileName] +
push eax  +
call ds:CreateFileW  +
mov [ebp+hObject] eax +
cmp eax 0FFFFFFFFh +
jz loc_10257E6  +
mov esi ds:ReadFile +
push edi  +
push ebx  +
lea ecx [ebp+NumberOfBytesRead] +
push ecx  +
push 66h  +
lea ecx [ebp+Buffer] +
push ecx  +
push eax  +
call esi  +
mov [ebp+var_278] eax +
cmp eax ebx +
jz loc_10257CB  +
cmp [ebp+NumberOfBytesRead] 66h +
jnz loc_10257CB  +
mov eax 1900h +
cmp [ebp+var_226] ax +
ja loc_10257CB  +
mov edi [ebp+var_212] +
push ebx  +
push ebx  +
add edi 0Eh +
push edi  +
push [ebp+hObject]  +
call ds:SetFilePointer  +
cmp eax edi +
jnz loc_10257D1  +
push 320h  +
push ebx  +
push [ebp+var_284]  +
call memset  +
xor eax eax +
add esp 0Ch +
xor edi edi +
cmp ax [ebp+var_226] +
jge loc_10257D1  +
push ebx  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push 4  +
lea eax [ebp+var_288] +
push eax  +
push [ebp+hObject]  +
call esi  +
mov [ebp+var_278] eax +
cmp eax ebx +
jz loc_10257D1  +
cmp [ebp+var_288] ebx +
jz loc_10257BA  +
cmp [ebp+NumberOfBytesRead] 4 +
jnz loc_10257BA  +
mov edx [ebp+var_284] +
movzx ecx di +
mov eax ecx +
shr eax 3 +
add eax edx +
and ecx 80000007h +
jns loc_10257B1  +
dec ecx  +
or ecx 0FFFFFFF8h +
inc ecx  +
mov edx 80h +
sar edx cl +
or [eax] dl +
movsx ecx [ebp+var_226] +
inc edi  +
movzx eax di +
cmp eax ecx +
jl loc_1025760  +
jmp loc_10257D1  +
mov [ebp+var_278] ebx +
push [ebp+hObject]  +
call ds:CloseHandle  +
mov eax [ebp+var_278] +
pop edi  +
jmp loc_10257E8  +
xor eax eax +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1026CC5  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 68h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
mov [ebp+var_64] eax +
mov eax [ebp+arg_8] +
push esi  +
xor esi esi +
mov [ebp+var_60] eax +
lea eax [ebp+var_54] +
push eax  +
mov [ebp+var_54] esi +
mov [ebp+var_48] esi +
mov [ebp+var_44] esi +
mov [ebp+var_4C] esi +
mov [ebp+var_50] esi +
call TF_CreateThreadMgr  +
cmp eax esi +
mov [ebp+var_40] eax +
jl loc_1025953  +
lea eax [ebp+var_48] +
push eax  +
call TF_CreateInputProcessorProfiles  +
cmp eax esi +
mov [ebp+var_40] eax +
jl loc_1025953  +
mov eax [ebp+var_48] +
mov ecx [eax] +
lea edx [ebp+var_68] +
push edx  +
push eax  +
call dword ptr [ecx+34h]  +
cmp eax esi +
mov [ebp+var_40] eax +
jl loc_1025953  +
mov eax [ebp+var_48] +
mov ecx [eax] +
lea edx [ebp+var_44] +
push edx  +
push [ebp+var_68]  +
push eax  +
call dword ptr [ecx+40h]  +
cmp eax esi +
mov [ebp+var_40] eax +
jl loc_1025953  +
mov eax [ebp+var_44] +
mov ecx [eax] +
lea edx [ebp+var_5C] +
push edx  +
lea edx [ebp+var_3C] +
push edx  +
push 1  +
push eax  +
call dword ptr [ecx+10h]  +
test eax eax +
jnz loc_1025953  +
push ebx  +
push edi  +
mov ebx offset dword_1004F60 +
jmp loc_10258AE  +
xor esi esi +
mov [ebp+var_40] 80004005h +
cmp [ebp+var_18] esi +
jz loc_1025926  +
push 4  +
pop ecx  +
mov edi offset dword_1004B80 +
lea esi [ebp+var_28] +
xor eax eax +
cmps   +
jnz loc_1025926  +
mov eax [ebp+var_54] +
mov ecx [eax] +
lea edx [ebp+var_50] +
push edx  +
lea edx [ebp+var_3C] +
push edx  +
push eax  +
call dword ptr [ecx+2Ch]  +
test eax eax +
jl loc_1025922  +
mov eax [ebp+var_50] +
mov ecx [eax] +
lea edx [ebp+var_58] +
push edx  +
push ebx  +
push offset dword_1004A70  +
push eax  +
call dword ptr [ecx+14h]  +
mov [ebp+var_40] eax +
test eax eax +
jl loc_1025913  +
mov eax [ebp+var_58] +
mov ecx [eax] +
lea edx [ebp+var_4C] +
push edx  +
push ebx  +
push eax  +
call dword ptr [ecx]  +
mov [ebp+var_40] eax +
mov eax [ebp+var_58] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_50] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp [ebp+var_40] 0 +
jge loc_1025943  +
and [ebp+var_4C] 0 +
mov eax [ebp+var_44] +
mov ecx [eax] +
lea edx [ebp+var_5C] +
push edx  +
lea edx [ebp+var_3C] +
push edx  +
push 1  +
push eax  +
call dword ptr [ecx+10h]  +
test eax eax +
jz loc_10258AC  +
jmp loc_1025951  +
mov edi [ebp+var_64] +
test edi edi +
jz loc_1025951  +
lea esi [ebp+var_14] +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop ebx  +
mov eax [ebp+var_44] +
pop esi  +
test eax eax +
jz loc_1025961  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_48] +
test eax eax +
jz loc_102596E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_54] +
test eax eax +
jz loc_102597B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_4C] +
test eax eax +
jz loc_1025993  +
mov ecx [ebp+var_60] +
test ecx ecx +
jz loc_102598D  +
mov [ecx] eax +
jmp loc_1025993  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_40] +
xor ecx ebp +
call sub_1026CC5  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
mov eax dword_102CD74 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
lea eax [ebp+var_20] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+var_20] +
push eax  +
call sub_10257FD  +
test eax eax +
jnz loc_1025A65  +
cmp [ebp+arg_8] eax +
jz loc_10259E3  +
mov ax word ptr [ebp+arg_4] +
jmp loc_1025A10  +
mov eax [ebp+arg_4] +
mov ecx eax +
push 1  +
mov [ebp+var_17] al +
lea eax [ebp+WideCharStr] +
push eax  +
push 2  +
lea eax [ebp-18h] +
push eax  +
shr ecx 8 +
push 1  +
mov [ebp+var_18] cl +
call ds:GetACP  +
push eax  +
call ds:MultiByteToWideChar  +
mov ax [ebp+WideCharStr] +
mov [ebp+var_1C] ax +
xor eax eax +
push esi  +
mov [ebp-1Ah] ax +
push edi  +
lea eax [ebp+var_1C] +
push eax  +
call ds:SysAllocString  +
mov esi [ebp+var_20] +
mov edi eax +
test edi edi +
jz loc_1025A5B  +
mov eax [esi] +
push edi  +
lea ecx [ebp+var_14] +
push ecx  +
push [ebp+var_20]  +
push ebx  +
push esi  +
call dword ptr [eax+10h]  +
test eax eax +
jge loc_1025A54  +
push 1  +
push 0EF7Ch  +
push 0EF7Bh  +
push ebx  +
call sub_102447F  +
push edi  +
call ds:SysFreeString  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
pop edi  +
pop esi  +
jmp loc_1025A77  +
push 1  +
push 0EF7Ch  +
push 0EF7Bh  +
push ebx  +
call sub_102447F  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop ebx  +
call sub_1026CC5  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_18] 0 +
jz loc_1025B5F  +
push [ebp+arg_0]  +
call ds:GetLayout  +
cmp eax 0FFFFFFFFh +
jz loc_1025B5F  +
test al 1 +
jz loc_1025B5F  +
dec [ebp+arg_4]  +
pop ebp  +
jmp ds:ExtTextOutW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1025B7E  +
cmp ecx [ebp+arg_8] +
jbe loc_1025B83  +
mov eax 80070057h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push ebx  +
push edi  +
mov edi [ebp+arg_4] +
xor eax eax +
xor ebx ebx +
test edi edi +
jz loc_1025BC7  +
push esi  +
mov esi [ebp+arg_C] +
cmp [ebp+arg_10] eax +
jz loc_1025BC2  +
movzx edx word ptr [esi] +
test dx dx +
jz loc_1025BC2  +
mov [ecx] dx +
inc ecx  +
inc ecx  +
inc esi  +
inc esi  +
dec edi  +
dec [ebp+arg_10]  +
inc ebx  +
test edi edi +
jnz loc_1025BA5  +
pop esi  +
test edi edi +
jnz loc_1025BCF  +
dec ecx  +
dec ecx  +
dec ebx  +
mov eax 8007007Ah +
xor edx edx +
mov [ecx] dx +
mov ecx [ebp+arg_8] +
test ecx ecx +
jz loc_1025BDD  +
mov [ecx] ebx +
pop edi  +
pop ebx  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
push [ebp+arg_10]  +
mov edi [ebp+arg_0] +
push [ebp+arg_C]  +
xor ebx ebx +
dec esi  +
push esi  +
push edi  +
call _vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_1025C15  +
cmp eax esi +
ja loc_1025C15  +
jz loc_1025C1A  +
jmp loc_1025C22  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
mov eax esi +
mov ecx [ebp+arg_8] +
test ecx ecx +
jz loc_1025C2B  +
mov [ecx] eax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 14h  +
***
jmp ds:?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?GetRuntimeClass@CGdiObject@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?GetRuntimeClass@CBrush@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?GetRuntimeClass@CListBox@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?GetRuntimeClass@CDialog@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?OnOK@CDialog@@MAEXXZ  +
***
jmp ds:?GetRuntimeClass@CPen@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?GetRuntimeClass@CFont@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?GetRuntimeClass@CBitmap@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?GetRuntimeClass@CRgn@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?GetRuntimeClass@CMenu@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?GetRuntimeClass@CStatic@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?GetRuntimeClass@CComboBox@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?OnContextHelp@CWinApp@@IAEXXZ  +
***
jmp ds:?GetRuntimeClass@CWinApp@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?GetRuntimeClass@CEdit@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?GetRuntimeClass@CWnd@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?GetRuntimeClass@CButton@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?GetRuntimeClass@CBitmapButton@@UBEPAUCRuntimeClass@@XZ  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_10269C9  +
test eax eax +
jnz loc_10269CE  +
mov ecx [esi] +
test ecx ecx +
jz loc_10269C6  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_10269BA  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_102F9D0 +
push offset dword_102F9C0  +
push dword_102F9CC  +
mov dword_102F9C0 eax +
push offset unk_102F9B0  +
push offset unk_102F9B4  +
push offset unk_102F9AC  +
call ds:__wgetmainargs  +
add esp 14h +
mov dword_102F9BC eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+var_1C] ebx +
mov [ebp+ms_exc.disabled] ebx +
lea eax [ebp+StartupInfo] +
push eax  +
call ds:GetStartupInfoW  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [ebp+ms_exc.disabled] 1 +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp+var_20] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
cmp eax ebx +
jz loc_1026A71  +
cmp eax esi +
jnz loc_1026A64  +
xor esi esi +
inc esi  +
mov [ebp+var_20] esi +
jmp loc_1026A74  +
push 3E8h  +
call ds:Sleep  +
jmp loc_1026A4B  +
xor esi esi +
inc esi  +
mov eax dword_102FD00 +
cmp eax esi +
jnz loc_1026A87  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_1026AB6  +
mov eax dword_102FD00 +
test eax eax +
jnz loc_1026AB0  +
mov dword_102FD00 esi +
push offset dword_10018D8  +
push offset dword_10018CC  +
call sub_10269AD  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1026AB6  +
jmp loc_1026BDA  +
mov dword_102F9C8 esi +
mov eax dword_102FD00 +
cmp eax esi +
jnz loc_1026ADA  +
push offset dword_10018C8  +
push offset dword_10018A4  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_102FD00 2 +
cmp [ebp+var_20] ebx +
jnz loc_1026AE7  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_102FD10 ebx +
jz loc_1026B08  +
push offset dword_102FD10  +
call sub_1027009  +
pop ecx  +
test eax eax +
jz loc_1026B08  +
push ebx  +
push 2  +
push ebx  +
call dword_102FD10  +
mov eax ds:_wcmdln +
cmp [eax] ebx +
jz loc_1026BDA  +
mov eax [eax] +
mov [ebp+var_24] eax +
movzx ecx word ptr [eax] +
cmp cx 20h +
ja $LN58  +
cmp cx bx +
jz loc_1026B2D  +
cmp [ebp+var_1C] ebx +
jnz $LN58  +
movzx ecx word ptr [eax] +
cmp cx bx +
jz loc_1026B42  +
cmp cx 20h +
ja loc_1026B42  +
inc eax  +
inc eax  +
mov [ebp+var_24] eax +
jmp loc_1026B2D  +
test byte ptr [ebp+StartupInfo.dwFlags] 1 +
jz loc_1026B4E  +
movzx ecx [ebp+StartupInfo.wShowWindow] +
jmp loc_1026B51  +
push 0Ah  +
pop ecx  +
push ecx  +
push eax  +
push ebx  +
push 1000000h  +
call _wWinMain@16  +
mov dword_102F9C4 eax +
cmp dword_102F9B8 ebx +
jnz $LN59  +
push eax  +
call ds:exit  +
cmp cx 22h +
jnz loc_1026B83  +
xor ecx ecx +
cmp [ebp+var_1C] ebx +
setz cl  +
mov [ebp+var_1C] ecx +
inc eax  +
inc eax  +
jmp loc_1026B17  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-28h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-28h] +
mov dword_102F9C4 eax +
xor ebx ebx +
cmp dword_102F9B8 ebx +
jnz $LN59  +
push eax  +
call ds:_exit  +
cmp dword_102F9C8 ebx +
jnz loc_1026BC5  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_102F9C4 +
jmp loc_1026BE6  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_1026C03  +
xor eax eax +
jmp loc_1026C50  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_1026BFF  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_1026C3D  +
cmp ecx 20Bh +
jnz loc_1026BFF  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_1026BFF  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_1026C4B  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_1026BFF  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 2  +
mov dword_102F9B8 eax +
call sub_10271A2  +
push eax  +
call ds:__set_app_type  +
or dword_102FD08 0FFFFFFFFh +
or dword_102FD0C 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_102F9D8 +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_102F9D4 +
mov [eax] ecx +
call sub_1027134  +
cmp dword_102CD88 0 +
jnz loc_1026CA9  +
push offset sub_1027134  +
call ds:__setusermatherr  +
pop ecx  +
call sub_102711C  +
xor eax eax +
retn   +
***
call sub_10271E1  +
jmp ___tmainCRTStartup  +
***
cmp ecx dword_102CD74 +
jnz loc_1026CD0  +
retn 0  +
jmp loc_1027277  +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_102CD74 +
xor eax ebp +
push eax  +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_102CD74 +
xor eax ebp +
push eax  +
mov [ebp-10h] esp +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_102CD74 +
xor eax ebp +
push eax  +
mov [ebp-10h] eax +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
mov ecx [ebp-0Ch] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov ecx [ebp-10h] +
xor ecx ebp +
call sub_1026CC5  +
jmp __EH_epilog3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ds:??1type_info@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_1026DDB  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb cs20  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp+0] eax +
retn   +
sub eax 1000h +
test [eax] eax +
jmp cs10  +
***
call __SEH_prolog4  +
pop ecx  +
retn   +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
call sub_1026E50  +
neg eax  +
sbb eax eax +
neg eax  +
pop ecx  +
dec eax  +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_1026F4E  +
cmp dword ptr [eax+10h] 3 +
jnz loc_1026F4E  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_1026F48  +
cmp eax 19930521h +
jz loc_1026F48  +
cmp eax 19930522h +
jz loc_1026F48  +
cmp eax 1994000h +
jnz loc_1026F4E  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset byte_1026F10+1)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_1026F96  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_1026F92  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_1026FFD  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1026FF5  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_1026FFF  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_1026FE5  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_1026F80  +
pop ecx  +
test eax eax +
jz loc_1027066  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_1026FC0  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1027066  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_102706F  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_1026CC5  +
push offset dword_102CD74  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1027195  +
cmp ecx 0FFFFFFFFh +
jz loc_1027195  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_102718E  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_102718E  +
cmp edx 10000000h +
jnb loc_102718E  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_102718E  +
jmp loc_1027189  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_10271D7  +
push eax  +
call sub_102713C  +
test eax eax +
jz loc_10271D7  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_10271CC  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_10271D7  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_102CD74 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_1027213  +
test eax ebx +
jz loc_1027213  +
not eax  +
mov dword_102CD78 eax +
jmp loc_102726E  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_102725A  +
test dword_102CD74 ebx +
jnz loc_102725F  +
mov esi 0BB40E64Fh +
mov dword_102CD74 esi +
not esi  +
mov dword_102CD78 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_102FAE0 eax +
mov dword_102FADC ecx +
mov dword_102FAD8 edx +
mov dword_102FAD4 ebx +
mov dword_102FAD0 esi +
mov dword_102FACC edi +
mov word_102FAF8 ss +
mov word_102FAEC cs +
mov word_102FAC8 ds +
mov word_102FAC4 es +
mov word_102FAC0 fs +
mov word_102FABC gs +
pushf   +
pop dword_102FAF0  +
mov eax [ebp+0] +
mov dword_102FAE4 eax +
mov eax [ebp+4] +
mov dword_102FAE8 eax +
lea eax [ebp+8] +
mov dword_102FAF4 eax +
mov eax [ebp-320h] +
mov dword_102FA30 10001h +
mov eax dword_102FAE8 +
mov dword_102F9EC eax +
mov dword_102F9E0 0C0000409h +
mov dword_102F9E4 1 +
mov eax dword_102CD74 +
mov [ebp-328h] eax +
mov eax dword_102CD78 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_10273C2  +
push ebp  +
mov ebp esp +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov cl [ebp+arg_0] +
mov [eax+14h] cl +
mov ecx [ebp+arg_4] +
mov [eax+2040h] ecx +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
jmp ds:?AfxWinMain@@YGHPAUHINSTANCE__@@0PAGH@Z  +
***
mov ecx [ebp-10h] +
jmp ??1CEdit@@UAE@XZ  +
***
lea ecx [ebp-1Ch] +
jmp ??1CDC@@UAE@XZ  +
***
jmp fword ptr (byte_102B3FF-102B40Fh)[eax]  +
***
retn   +
***
mov ecx offset off_102C378 +
jmp sub_100C231  +
***
mov ecx offset dword_102DF68 +
jmp ??1CString@@QAE@XZ  +
***
mov ecx offset dword_102DF6C +
jmp ??1CString@@QAE@XZ  +
***
mov ecx offset unk_102DF70 +
jmp ??1CWinApp@@UAE@XZ  +
***
mov off_102CB50 offset off_10021B4 +
mov ecx offset off_102CB50 +
jmp sub_1007D75  +
***
mov ecx offset off_102CB58 +
jmp sub_100C231  +
***
retn   +
***
retf   +
***
push 65676E61h  +
add [edx+656C5304h] dh +
jo $+3  +
jmp near ptr 7570FB8Dh  +
***
