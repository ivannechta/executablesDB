sub esp 1Ch +
xor eax eax +
cmp word ptr ds:400000h 5A4Dh +
mov ds:dword_4857F8 1 +
mov ds:dword_4857F4 1 +
mov ds:dword_4857F0 1 +
mov ds:dword_485800 1 +
jz loc_4010B0  +
mov ds:dword_484008 eax +
mov eax ds:dword_485804 +
test eax eax +
jz loc_4010A0  +
mov [esp+1Ch+var_1C] 2 +
call __set_app_type  +
mov [esp+1Ch+var_1C] 0FFFFFFFFh +
call sub_456F80  +
mov edx ds:dword_485808 +
mov ds:dword_48A9A0 eax +
mov ds:dword_48A9A4 eax +
mov eax ds:_fmode +
mov [eax] edx +
call sub_4571C0  +
cmp dword_461700 1 +
jz loc_401100  +
xor eax eax +
add esp 1Ch +
retn   +
mov [esp+1Ch+var_1C] 1 +
call __set_app_type  +
jmp loc_401062  +
mov edx ds:40003Ch +
cmp dword ptr [edx+400000h] 4550h +
lea ecx [edx+400000h] +
jnz loc_401048  +
movzx edx word ptr [ecx+18h] +
cmp dx 10Bh +
jz loc_401112  +
cmp dx 20Bh +
jnz loc_401048  +
cmp dword ptr [ecx+84h] 0Eh +
jbe loc_401048  +
mov edx [ecx+0F8h] +
xor eax eax +
test edx edx +
setnz al  +
jmp loc_401048  +
mov [esp+1Ch+var_1C] offset sub_457230 +
call sub_457220  +
xor eax eax +
add esp 1Ch +
retn   +
cmp dword ptr [ecx+74h] 0Eh +
jbe loc_401048  +
mov ecx [ecx+0E8h] +
xor eax eax +
test ecx ecx +
setnz al  +
jmp loc_401048  +
***
sub esp 2Ch +
mov eax ds:dword_48580C +
mov [esp+2Ch+var_1C] offset dword_484000 +
mov [esp+2Ch+var_24] offset dword_484014 +
mov [esp+2Ch+var_28] offset dword_484018 +
mov ds:dword_484000 eax +
mov eax ds:dword_485810 +
mov [esp+2Ch+var_2C] offset dword_48401C +
mov [esp+2Ch+var_20] eax +
call __getmainargs  +
mov ds:dword_484010 eax +
add esp 2Ch +
retn   +
***
mov ebp esp +
mov ecx 11h +
push edi  +
push esi  +
lea edx [ebp+var_5C] +
push ebx  +
mov edi edx +
sub esp 7Ch +
stos   +
mov al 30h +
call sub_457F80  +
sub esp eax +
lea eax [esp+88h+var_6E+1] +
and eax 0FFFFFFF0h +
mov dword ptr [eax] 0CCCCCCCCh +
mov dword ptr [eax+4] 0CCCCCCCCh +
mov dword ptr [eax+8] 0CCCCCCCCh +
mov dword ptr [eax+0Ch] 0CCCCCCCCh +
mov dword ptr [eax+10h] 0CCCCCCCCh +
mov dword ptr [eax+14h] 0CCCCCCCCh +
mov dword ptr [eax+18h] 0CCCCCCCCh +
mov dword ptr [eax+1Ch] 0CCCCCCCCh +
and esp 0FFFFFFF0h +
mov esi ds:dword_485804 +
test esi esi +
jnz loc_401470  +
mov eax large fs:18h +
xor esi esi +
mov ebx [eax+4] +
mov edi ds:Sleep +
jmp loc_401216  +
cmp eax ebx +
jz loc_401410  +
mov [esp+88h+var_88] 3E8h +
call edi  +
sub esp 4 +
mov eax esi +
cmpxchg ds:dword_48A9A8 ebx +
test eax eax +
jnz loc_401202  +
mov eax ds:dword_48A9AC +
xor ebx ebx +
cmp eax 1 +
jz loc_401423  +
mov eax ds:dword_48A9AC +
test eax eax +
jz loc_401481  +
mov ds:dword_484004 1 +
mov eax ds:dword_48A9AC +
cmp eax 1 +
jz loc_40143D  +
test ebx ebx +
jz loc_401463  +
mov eax ds:off_4827E0 +
test eax eax +
jz loc_401286  +
mov [esp+88h+var_80] 0 +
mov [esp+88h+var_84] 2 +
mov [esp+88h+var_88] 0 +
call eax  +
sub esp 0Ch +
call sub_457530  +
mov [esp+88h+var_88] offset sub_457070 +
call ds:SetUnhandledExceptionFilter  +
sub esp 4 +
mov ds:dword_485814 eax +
mov [esp+88h+var_88] offset dword_401000 +
call loc_461744  +
call sub_457800  +
mov eax ds:_acmdln +
mov ds:dword_486568 400000h +
mov eax [eax] +
test eax eax +
jz loc_401309  +
xor ecx ecx +
jmp loc_4012E0  +
test dl dl +
jz loc_401304  +
test ecx ecx +
jz loc_4012F9  +
mov ecx 1 +
add eax 1 +
movzx edx byte ptr [eax] +
cmp dl 20h +
jle loc_4012D0  +
mov ebx ecx +
xor ebx 1 +
cmp dl 22h +
cmovz ecx ebx +
jmp loc_4012DD  +
test dl dl +
jz loc_401304  +
add eax 1 +
movzx edx byte ptr [eax] +
cmp dl 20h +
jle loc_4012F5  +
mov ds:dword_486564 eax +
mov ebx ds:dword_485804 +
test ebx ebx +
jz loc_401328  +
movzx edx [ebp+var_2C] +
mov eax 0Ah +
test [ebp+var_30] 1 +
cmovnz eax edx +
mov dword_461000 eax +
mov eax ds:dword_48401C +
mov [ebp-70h] eax +
mov esi eax +
lea eax ds:4[eax*4] +
mov [ebp+var_74] eax +
mov [esp+88h+var_88] eax +
call malloc  +
test esi esi +
mov edi ds:dword_484018 +
mov [ebp+var_6E+2] eax +
jle loc_4014A4  +
xor ebx ebx +
mov esi edi +
lea esi [esi+0] +
mov eax [esi+ebx*4] +
mov [esp+88h+var_88] eax +
call strlen  +
lea edi [eax+1] +
mov [esp+88h+var_88] edi +
call malloc  +
mov ecx [ebp+var_6E+2] +
mov [ecx+ebx*4] eax +
mov ecx [esi+ebx*4] +
add ebx 1 +
mov [esp+88h+var_80] edi +
mov [esp+88h+var_88] eax +
mov [esp+88h+var_84] ecx +
call memcpy  +
cmp ebx [ebp-70h] +
jnz loc_401360  +
mov eax [ebp+var_74] +
sub eax 4 +
mov esi [ebp+var_6E+2] +
mov dword ptr [esi+eax] 0 +
mov ds:dword_484018 esi +
call sub_457890  +
mov edx ds:dword_484014 +
mov eax ds:__initenv +
mov [eax] edx +
mov eax ds:dword_48401C +
mov ecx ds:dword_484014 +
mov edx ds:dword_484018 +
mov [esp+88h+var_88] eax +
mov [esp+88h+var_80] ecx +
mov [esp+88h+var_84] edx +
call sub_45E410  +
mov ecx ds:dword_484008 +
test ecx ecx +
mov ds:dword_48400C eax +
jz loc_4014AB  +
mov edx ds:dword_484004 +
test edx edx +
jnz loc_401407  +
call _cexit  +
mov eax ds:dword_48400C +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ds:dword_48A9AC +
mov ebx 1 +
cmp eax 1 +
jnz loc_401234  +
mov [esp+88h+var_88] 1Fh +
call _amsg_exit  +
mov eax ds:dword_48A9AC +
cmp eax 1 +
jnz loc_401259  +
mov [esp+88h+var_84] offset unk_48E008 +
mov [esp+88h+var_88] offset unk_48E000 +
call _initterm  +
test ebx ebx +
mov ds:dword_48A9AC 2 +
jnz loc_401261  +
xchg ebx ds:dword_48A9A8 +
jmp loc_401261  +
mov [esp+88h+var_88] edx +
call ds:GetStartupInfoA  +
sub esp 4 +
jmp loc_4011EF  +
mov ds:dword_48A9AC 1 +
mov [esp+88h+var_84] offset unk_48E018 +
mov [esp+88h+var_88] offset unk_48E00C +
call _initterm  +
jmp loc_40124B  +
xor eax eax +
jmp loc_40139D  +
mov [esp+88h+var_88] eax +
nop   +
call exit  +
***
sub esp 0Ch +
mov ds:dword_485804 1 +
call sub_4578B0  +
add esp 0Ch +
jmp sub_401180  +
***
sub esp 0Ch +
mov ds:dword_485804 0 +
call sub_4578B0  +
add esp 0Ch +
jmp sub_401180  +
***
mov eax dword_461750 +
test eax eax +
jz locret_40154C  +
push ebp  +
mov ebp esp +
sub esp 18h +
mov [esp+1Ch+var_1C] offset aLibgcj13_dll +
call ds:GetModuleHandleA  +
mov edx 0 +
sub esp 4 +
test eax eax +
jz loc_40153E  +
mov [esp+1Ch+var_18] offset a_jv_registercl +
mov [esp+1Ch+var_1C] eax +
call ds:GetProcAddress  +
sub esp 8 +
mov edx eax +
test edx edx +
jz locret_40154B  +
mov [esp+1Ch+var_1C] offset dword_461750 +
call edx  +
leave   +
retn   +
***
mov ebp esp +
pop ebp  +
retn   +
***
sub esp 1Ch +
mov eax ds:dword_484088 +
test eax eax +
jz loc_4015A6  +
mov [esp+1Ch+var_18] offset sub_406340 +
mov [esp+1Ch+var_1C] eax +
call sub_406D00  +
mov ds:dword_484088 0 +
mov eax ds:dword_484084 +
test eax eax +
jz loc_4015C1  +
mov [esp+1Ch+var_1C] eax +
call sub_406CC0  +
mov ds:dword_484084 0 +
mov eax ds:dword_484080 +
test eax eax +
jz loc_4015DC  +
mov [esp+1Ch+var_1C] eax +
call sub_406CC0  +
mov ds:dword_484080 0 +
add esp 1Ch +
jmp sub_403500  +
***
sub esp 2Ch +
mov eax [esp+2Ch+arg_8] +
mov ecx [esp+2Ch+arg_4] +
mov edx [eax+4] +
mov eax [eax] +
mov [esp+2Ch+var_1C] ecx +
mov ecx [esp+2Ch+arg_0] +
mov [esp+2Ch+var_28] offset aS16sS +
mov [esp+2Ch+var_24] edx +
mov [esp+2Ch+var_2C] eax +
mov [esp+2Ch+var_20] ecx +
call fprintf  +
add esp 2Ch +
retn   +
***
push edi  +
push esi  +
push ebx  +
sub esp 20h +
mov edi ds:dword_486580 +
mov edx [esp+30h] +
mov ecx [esp+34h] +
mov ebx [esp+38h] +
test edi edi +
mov esi [esp+3Ch] +
mov eax [esp+40h] +
jnz loc_401680  +
mov ebx [eax+4] +
mov eax [eax] +
mov [esp+40h] ecx +
mov [esp+3Ch] edx +
mov [esp+38h] ebx +
mov dword ptr [esp+34h] offset aS16sS +
mov [esp+30h] eax +
add esp 20h +
pop ebx  +
pop esi  +
pop edi  +
jmp fprintf  +
***
mov edi [eax+4] +
mov eax [eax] +
mov [esp+18h] esi +
mov [esp+14h] ebx +
mov [esp+8] edi +
mov [esp+10h] ecx +
mov [esp+0Ch] edx +
mov dword ptr [esp+4] offset aS16s30sSD +
mov [esp] eax +
call fprintf  +
add esp 20h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
push edi  +
push esi  +
push ebx  +
sub esp 20h +
mov ecx ds:dword_486580 +
mov edx [esp+30h] +
mov ebx [esp+34h] +
mov esi [esp+38h] +
cmp ecx 1 +
mov edi [esp+3Ch] +
mov eax [esp+40h] +
jle loc_401705  +
mov ecx [eax+4] +
mov eax [eax] +
mov [esp+18h] edi +
mov [esp+14h] esi +
mov [esp+10h] ebx +
mov [esp+0Ch] edx +
mov [esp+8] ecx +
mov dword ptr [esp+4] offset aS8s18sSD +
mov [esp] eax +
call fprintf  +
add esp 20h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
cmp byte ptr [edx] 2Eh +
jz loc_4016FE  +
test ecx ecx +
jnz loc_4016D5  +
mov ecx [eax+4] +
mov eax [eax] +
mov [esp+40h] ebx +
mov [esp+3Ch] edx +
mov [esp+38h] ecx +
mov dword ptr [esp+34h] offset aS8sS +
mov [esp+30h] eax +
add esp 20h +
pop ebx  +
pop esi  +
pop edi  +
jmp fprintf  +
***
sub esp 1Ch +
xor eax eax +
mov edx [esp+1Ch+arg_0] +
cmp ds:dword_486580 edx +
jl loc_401771  +
lea eax [esp+1Ch+arg_8] +
mov [esp+1Ch+var_14] eax +
mov eax [esp+1Ch+arg_4] +
mov [esp+1Ch+var_18] eax +
mov eax ds:_iob +
add eax 40h +
mov [esp+1Ch+var_1C] eax +
call vfprintf  +
add esp 1Ch +
retn   +
***
push edi  +
push esi  +
push ebx  +
sub esp 20h +
mov eax ds:_iob +
mov esi [esp+30h] +
mov ebx [esp+3Ch] +
fld  qword ptr [esp+34h] +
add eax 40h +
mov edi esi +
mov dword ptr [esp+0Ch] 0 +
fstp  qword ptr [esp+18h] +
and edi 0FFFFFFFEh +
mov dword ptr [esp+8] 4 +
mov dword ptr [esp+4] 0 +
mov [esp] eax +
call setvbuf  +
test ebx ebx +
jz loc_401830  +
mov [esp+8] ebx +
mov dword ptr [esp+4] offset aS_4 +
mov dword ptr [esp] 0 +
call sub_401740  +
mov ds:dword_484078 0 +
mov ds:dword_484074 0 +
cmp esi 64h +
jz loc_401874  +
mov ds:dword_484078 edi +
mov eax ds:_iob +
mov dword ptr [esp+3Ch] 0 +
mov dword ptr [esp+38h] 40h +
mov dword ptr [esp+34h] 0 +
add eax 40h +
mov [esp+30h] eax +
add esp 20h +
pop ebx  +
pop esi  +
pop edi  +
jmp setvbuf  +
***
cmp edi ds:dword_484078 +
jle loc_4017F3  +
mov ecx ds:dword_484074 +
mov ebx edi +
test ecx ecx +
jz loc_401850  +
jmp loc_4017F3  +
***
mov edx ds:dword_484074 +
test edx edx +
jnz loc_4017F3  +
mov dword ptr [esp+4] offset asc_46207F +
sub ebx 2 +
mov dword ptr [esp] 0 +
call sub_401740  +
cmp ds:dword_484078 ebx +
jl loc_401846  +
cmp esi 64h +
jnz loc_4017F8  +
mov eax ds:dword_484074 +
test eax eax +
jnz loc_4017F8  +
fld  qword ptr [esp+18h] +
fstp  qword ptr [esp+8] +
mov dword ptr [esp+4] offset a1000_2fs +
mov dword ptr [esp] 0 +
call sub_401740  +
mov ds:dword_484078 0 +
mov ds:dword_484074 1 +
jmp loc_4017FE  +
***
push esi  +
push ebx  +
sub esp 34h +
mov eax ds:_iob +
mov ebx [esp+40h] +
fld  qword ptr [esp+44h] +
mov dword ptr [esp+0Ch] 0 +
fstp  qword ptr [esp+28h] +
mov esi [esp+4Ch] +
add eax 40h +
mov dword ptr [esp+8] 4 +
mov dword ptr [esp+4] 0 +
mov [esp] eax +
call setvbuf  +
mov ecx 2020h +
xor eax eax +
test ebx ebx +
mov ds:byte_484072 0 +
mov ds:dword_484040 20202020h +
mov ds:dword_484044 20202020h +
mov ds:dword_484048 20202020h +
mov ds:dword_48404C 20202020h +
mov ds:dword_484050 20202020h +
mov ds:dword_484054 20202020h +
mov ds:dword_484058 20202020h +
mov ds:dword_48405C 20202020h +
mov ds:dword_484060 20202020h +
mov ds:dword_484064 20202020h +
mov ds:dword_484068 20202020h +
mov ds:dword_48406C 20202020h +
mov ds:word_484070 cx +
jle loc_4019A2  +
nop   +
mov edx eax +
add eax 2 +
sar edx 1 +
cmp ebx eax +
mov byte ptr ds:dword_484040[edx] 23h +
jg loc_401990  +
test esi esi +
jz loc_401A47  +
mov dword ptr [esp+4] offset asc_462093 +
mov dword ptr [esp] 0 +
call sub_401740  +
mov ds:dword_484024 0 +
mov ds:dword_484020 esi +
mov eax ds:dword_484020 +
fld  qword ptr [esp+28h] +
fstp  qword ptr [esp+14h] +
mov [esp+10h] ebx +
mov dword ptr [esp+0Ch] offset dword_484040 +
mov [esp+8] eax +
mov dword ptr [esp+4] offset aSSD0_2fs +
mov dword ptr [esp] 0 +
call sub_401740  +
cmp ebx 64h +
jz loc_401A32  +
mov eax ds:_iob +
mov dword ptr [esp+4Ch] 0 +
mov dword ptr [esp+48h] 40h +
mov dword ptr [esp+44h] 0 +
add eax 40h +
mov [esp+40h] eax +
add esp 34h +
pop ebx  +
pop esi  +
jmp setvbuf  +
***
mov eax ds:dword_484024 +
test eax eax +
jz loc_401A56  +
mov ds:dword_484024 1 +
jmp loc_401A04  +
***
mov edx ds:dword_484024 +
test edx edx +
jnz loc_4019FF  +
jmp loc_4019CE  +
***
mov dword ptr [esp+4] offset asc_4620AC +
mov dword ptr [esp] 0 +
call sub_401740  +
jmp loc_401A3B  +
***
sub esp 1Ch +
mov eax off_461004 +
mov [esp+1Ch+var_18] offset aUsageSOptionsO +
mov [esp+1Ch+var_1C] 0 +
mov [esp+1Ch+var_10] eax +
mov eax ds:dword_486584 +
mov [esp+1Ch+var_14] eax +
call sub_401740  +
add esp 1Ch +
retn   +
***
retn   +
***
sub esp 1Ch +
mov eax [esp+1Ch+arg_0] +
mov edx [eax+934h] +
mov [esp+1Ch+var_14] 1 +
mov [esp+1Ch+var_18] 3 +
mov [esp+1Ch+var_1C] eax +
call edx  +
xor eax eax +
mov ds:dword_484140 1 +
add esp 1Ch +
retn   +
***
mov ebx [esp+18h+arg_0] +
mov eax [ebx+934h] +
mov [esp+18h+var_18] ebx +
mov [esp+18h+var_10] 0 +
mov [esp+18h+var_14] 3 +
call eax  +
mov edx [esp+18h+arg_4] +
mov eax [ebx+8C8h] +
mov ds:dword_484140 0 +
mov [esp+18h+var_18] ebx +
mov [esp+18h+var_14] edx +
call eax  +
add esp 18h +
xor eax eax +
pop ebx  +
retn   +
***
sub esp 18h +
mov eax ds:_iob +
mov [esp+18h+var_10] 11h +
mov [esp+18h+var_14] 1 +
mov [esp+18h+var_18] offset aValidCommands +
add eax 20h +
mov [esp+18h+var_C] eax +
call fwrite  +
mov eax [ebx] +
add ebx 0Ch +
mov [esp+18h+var_14] offset a6s +
mov [esp+18h+var_10] eax +
mov eax ds:_iob +
add eax 20h +
mov [esp+18h+var_18] eax +
call fprintf  +
mov eax [ebx-4] +
mov edx [ebx-0Ch] +
mov [esp+18h+var_14] eax +
mov eax ds:_iob +
mov [esp+18h+var_10] edx +
add eax 20h +
mov [esp+18h+var_18] eax +
call fprintf  +
mov eax ds:_iob +
mov [esp+18h+var_18] 0Ah +
add eax 20h +
mov [esp+18h+var_14] eax +
call fputc  +
cmp ebx offset unk_461118 +
jnz loc_401B71  +
mov eax ds:_iob +
mov [esp+18h+var_10] 65h +
mov [esp+18h+var_14] 1 +
mov [esp+18h+var_18] offset aUseThePartComm +
add eax 20h +
mov [esp+18h+var_C] eax +
call fwrite  +
add esp 18h +
xor eax eax +
pop ebx  +
retn   +
***
mov eax ds:dword_486584 +
mov ebx [esp+18h+arg_0] +
mov [esp+18h+var_14] offset aSErasingChip_0 +
mov [esp+18h+var_18] 0 +
mov [esp+18h+var_10] eax +
call sub_401740  +
mov edx [esp+18h+arg_4] +
mov eax [ebx+8E4h] +
mov [esp+18h+var_18] ebx +
mov [esp+18h+var_14] edx +
call eax  +
add esp 18h +
xor eax eax +
pop ebx  +
retn   +
***
mov eax [esp+28h+arg_8] +
mov ebx [esp+28h+arg_C] +
lea edx [eax-1] +
cmp edx 1 +
ja loc_401CD4  +
cmp eax 1 +
jz loc_401CB0  +
mov eax [ebx+4] +
lea edx [esp+28h+var_C] +
mov [esp+28h+var_24] edx +
mov [esp+28h+var_20] 0 +
mov [esp+28h+var_28] eax +
call strtol  +
mov edx [ebx+8] +
cmp edx [esp+28h+var_C] +
jz loc_401D18  +
test eax eax +
js loc_401CF0  +
mov [esp+28h+var_20] eax +
mov [esp+28h+var_24] offset aNewVerbosityLe +
mov [esp+28h+var_28] 0 +
mov ds:dword_486580 eax +
call sub_401740  +
xor eax eax +
add esp 28h +
pop ebx  +
retn   +
mov eax ds:dword_486580 +
mov [esp+28h+var_24] offset aVerbosityLevel +
mov [esp+28h+var_28] 0 +
mov [esp+28h+var_20] eax +
call sub_401740  +
add esp 28h +
xor eax eax +
pop ebx  +
retn   +
mov [esp+28h+var_24] offset aUsageVerboseVa +
mov [esp+28h+var_28] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_401CA8  +
mov [esp+28h+var_1C] eax +
mov eax ds:dword_486584 +
mov [esp+28h+var_24] offset aSVerbosityLeve +
mov [esp+28h+var_28] 0 +
mov [esp+28h+var_20] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_401CA8  +
mov eax ds:dword_486584 +
mov [esp+28h+var_1C] edx +
mov [esp+28h+var_24] offset aSCanTParseVerb +
mov [esp+28h+var_28] 0 +
mov [esp+28h+var_20] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_401CA8  +
***
sub esp 24h +
cmp [esp+24h+arg_8] 2 +
mov esi [esp+24h+arg_0] +
mov ebx [esp+24h+arg_C] +
jnz loc_401DB0  +
mov eax [ebx+4] +
lea edx [esp+24h+var_8] +
mov dword ptr [esp+24h+var_20] edx +
mov [esp+24h+var_24] eax +
call sub_458E60  +
mov eax [ebx+4] +
cmp eax [esp+24h+var_8] +
jz loc_401E28  +
mov eax [esi+930h] +
fmul  ds:dbl_4644B0 +
test eax eax +
jz loc_401DF8  +
fstp  [esp+24h+var_20] +
mov [esp+24h+var_24] esi +
call eax  +
test eax eax +
jnz loc_401DD0  +
xor eax eax +
add esp 24h +
pop ebx  +
pop esi  +
retn   +
mov dword ptr [esp+24h+var_20] offset aUsageSckValue +
mov [esp+24h+var_24] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_401DA3  +
mov [esp+24h+var_18] eax +
mov eax ds:dword_486584 +
mov dword ptr [esp+24h+var_20] offset aSSckFailedToSe +
mov [esp+24h+var_24] 0 +
mov dword ptr [esp+24h+var_20+4] eax +
call sub_401740  +
mov eax 0FFFFFFFDh +
jmp loc_401DA3  +
fstp  st +
mov eax ds:dword_486584 +
add esi 54h +
mov [esp+24h+var_18] esi +
mov dword ptr [esp+24h+var_20] offset aSSckTheSProgra +
mov [esp+24h+var_24] 0 +
mov dword ptr [esp+24h+var_20+4] eax +
call sub_401740  +
mov eax 0FFFFFFFEh +
jmp loc_401DA3  +
fstp  st +
mov [esp+24h+var_18] eax +
mov eax ds:dword_486584 +
mov dword ptr [esp+24h+var_20] offset aSSckCanTParseP +
mov [esp+24h+var_24] 0 +
mov dword ptr [esp+24h+var_20+4] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_401DA3  +
***
sub esp 24h +
cmp [esp+24h+arg_8] 2 +
mov esi [esp+24h+arg_0] +
mov ebx [esp+24h+arg_C] +
jnz loc_401EB3  +
mov eax [ebx+4] +
lea edx [esp+24h+var_8] +
mov dword ptr [esp+24h+var_20] edx +
mov [esp+24h+var_24] eax +
call sub_458E60  +
mov eax [ebx+4] +
cmp eax [esp+24h+var_8] +
jz loc_401F25  +
mov eax [esi+924h] +
test eax eax +
jz loc_401EF8  +
fstp  [esp+24h+var_20] +
mov [esp+24h+var_24] esi +
call eax  +
test eax eax +
jnz loc_401ED0  +
xor eax eax +
add esp 24h +
pop ebx  +
pop esi  +
retn   +
mov dword ptr [esp+24h+var_20] offset aUsageVtargValu +
mov [esp+24h+var_24] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_401EAD  +
mov [esp+24h+var_18] eax +
mov eax ds:dword_486584 +
mov dword ptr [esp+24h+var_20] offset aSVtargFailedTo +
mov [esp+24h+var_24] 0 +
mov dword ptr [esp+24h+var_20+4] eax +
call sub_401740  +
mov eax 0FFFFFFFDh +
jmp loc_401EAD  +
fstp  st +
mov eax ds:dword_486584 +
add esi 54h +
mov [esp+24h+var_18] esi +
mov dword ptr [esp+24h+var_20] offset aSVtargTheSProg +
mov [esp+24h+var_24] 0 +
mov dword ptr [esp+24h+var_20+4] eax +
call sub_401740  +
mov eax 0FFFFFFFEh +
jmp loc_401EAD  +
fstp  st +
mov [esp+24h+var_18] eax +
mov eax ds:dword_486584 +
mov dword ptr [esp+24h+var_20] offset aSVtargCanTPars +
mov [esp+24h+var_24] 0 +
mov dword ptr [esp+24h+var_20+4] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_401EAD  +
***
push esi  +
push ebx  +
sub esp 2Ch +
cmp [esp+2Ch+arg_8] 2 +
mov ebp [esp+2Ch+arg_0] +
mov esi [esp+2Ch+arg_C] +
jnz loc_402002  +
mov eax [esi+4] +
lea edx [esp+2Ch+var_10] +
mov dword ptr [esp+2Ch+var_28] edx +
mov [esp+2Ch+var_2C] eax +
call sub_458E60  +
mov edx [esi+4] +
mov eax [esp+2Ch+var_10] +
cmp edx eax +
jz loc_401FE0  +
movzx eax byte ptr [eax] +
and eax 0FFFFFFDFh +
cmp al 4Dh +
jz loc_401FD1  +
cmp al 4Bh +
jnz loc_401FAC  +
fmul  ds:flt_4644BC +
mov eax [ebp+92Ch] +
test eax eax +
jz loc_40204B  +
fstp  [esp+2Ch+var_28] +
mov [esp+2Ch+var_2C] ebp +
call eax  +
test eax eax +
jnz loc_402020  +
xor eax eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
fmul  ds:flt_4644B8 +
jmp loc_401FAC  +
fstp  st +
mov ecx 4 +
mov esi edx +
mov edi offset aOff +
cmps   +
setnbe cl  +
mov esi ecx +
setb cl  +
mov ebx esi +
cmp bl cl +
jnz loc_40207B  +
fldz   +
jmp loc_401F98  +
mov dword ptr [esp+2Ch+var_28] offset aUsageFoscValue +
mov [esp+2Ch+var_2C] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_401FC9  +
mov [esp+2Ch+var_20] eax +
mov eax ds:dword_486584 +
mov dword ptr [esp+2Ch+var_28] offset aSFoscFailedToS +
mov [esp+2Ch+var_2C] 0 +
mov dword ptr [esp+2Ch+var_28+4] eax +
call sub_401740  +
mov eax 0FFFFFFFDh +
jmp loc_401FC9  +
fstp  st +
mov eax ds:dword_486584 +
lea ebx [ebp+54h] +
mov [esp+2Ch+var_20] ebx +
mov dword ptr [esp+2Ch+var_28] offset aSFoscTheSProgr +
mov [esp+2Ch+var_2C] 0 +
mov dword ptr [esp+2Ch+var_28+4] eax +
call sub_401740  +
mov eax 0FFFFFFFEh +
jmp loc_401FC9  +
mov eax ds:dword_486584 +
mov [esp+2Ch+var_20] edx +
mov dword ptr [esp+2Ch+var_28] offset aSFoscCanTParse +
mov [esp+2Ch+var_2C] 0 +
mov dword ptr [esp+2Ch+var_28+4] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_401FC9  +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov eax [esp+2Ch+arg_8] +
mov esi [esp+2Ch+arg_0] +
mov ebx [esp+2Ch+arg_C] +
lea edx [eax-2] +
cmp edx 1 +
ja loc_402164  +
cmp eax 2 +
mov eax [ebx+4] +
jz loc_402143  +
lea edi [esp+2Ch+var_10] +
mov dword ptr [esp+2Ch+var_24] 0Ah +
mov [esp+2Ch+var_28] edi +
mov [esp+2Ch+var_2C] eax +
call strtoul  +
mov ebp eax +
mov eax [ebx+4] +
cmp eax [esp+2Ch+var_10] +
jz loc_4021D8  +
mov eax [ebx+8] +
mov [esp+2Ch+var_28] edi +
mov [esp+2Ch+var_2C] eax +
call sub_458E60  +
mov eax [ebx+8] +
cmp eax [esp+2Ch+var_10] +
jz loc_402203  +
mov edx [esi+928h] +
test edx edx +
jz loc_4021A8  +
fstp  [esp+2Ch+var_24] +
mov [esp+2Ch+var_28] ebp +
mov [esp+2Ch+var_2C] esi +
call edx  +
test eax eax +
jnz loc_402180  +
xor eax eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
lea edx [esp+2Ch+var_10] +
mov [esp+2Ch+var_2C] eax +
mov [esp+2Ch+var_28] edx +
call sub_458E60  +
mov eax [ebx+4] +
cmp eax [esp+2Ch+var_10] +
jz loc_402207  +
xor ebp ebp +
jmp loc_40211A  +
mov [esp+2Ch+var_28] offset aUsageVarefChan +
mov [esp+2Ch+var_2C] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_40213B  +
mov dword ptr [esp+2Ch+var_24+4] eax +
mov eax ds:dword_486584 +
mov [esp+2Ch+var_28] offset aSVarefFailedTo +
mov [esp+2Ch+var_2C] 0 +
mov dword ptr [esp+2Ch+var_24] eax +
call sub_401740  +
mov eax 0FFFFFFFDh +
jmp loc_40213B  +
fstp  st +
mov eax ds:dword_486584 +
add esi 54h +
mov dword ptr [esp+2Ch+var_24+4] esi +
mov [esp+2Ch+var_28] offset aSVarefTheSProg +
mov [esp+2Ch+var_2C] 0 +
mov dword ptr [esp+2Ch+var_24] eax +
call sub_401740  +
mov eax 0FFFFFFFEh +
jmp loc_40213B  +
mov dword ptr [esp+2Ch+var_24+4] eax +
mov eax ds:dword_486584 +
mov [esp+2Ch+var_28] offset aSVarefCanTPars +
mov [esp+2Ch+var_2C] 0 +
mov dword ptr [esp+2Ch+var_24] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_40213B  +
fstp  st +
jmp loc_402209  +
fstp  st +
mov dword ptr [esp+2Ch+var_24+4] eax +
mov eax ds:dword_486584 +
mov [esp+2Ch+var_28] offset aSVarefCanTPa_0 +
mov [esp+2Ch+var_2C] 0 +
mov dword ptr [esp+2Ch+var_24] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_40213B  +
***
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [esp+3Ch+arg_0] +
mov esi [esp+3Ch+arg_8] +
mov edi [eax+8ECh] +
test edi edi +
jz loc_402390  +
mov ebx ds:dword_484140 +
test ebx ebx +
jnz loc_402294  +
cmp esi 5 +
jg loc_402272  +
jz loc_4023DA  +
mov eax offset aUsageSendByte1 +
mov [esp+3Ch+var_38] eax +
mov [esp+3Ch+var_3C] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+3Ch+arg_0] +
mov ecx [eax+8F4h] +
test ecx ecx +
jz loc_4023B5  +
cmp esi 5 +
jg loc_402484  +
jz loc_4023DA  +
lea eax [esi-1] +
cmp esi 1 +
mov [esp+3Ch+var_20] eax +
jg loc_4023E2  +
mov eax [esp+3Ch+arg_0] +
mov edx [esp+3Ch+arg_0] +
mov eax [eax+8BCh] +
mov [esp+3Ch+var_3C] edx +
mov [esp+3Ch+var_38] 0 +
call eax  +
mov edx ds:dword_484140 +
mov eax [esp+3Ch+arg_0] +
test edx edx +
jz loc_402460  +
mov edx [esp+3Ch+var_20] +
lea ebx [esp+3Ch+var_10] +
mov eax [eax+8F4h] +
mov [esp+3Ch+var_34] ebx +
mov [esp+3Ch+var_30] edx +
lea edx [esp+3Ch+var_14] +
mov [esp+3Ch+var_38] edx +
mov edx [esp+3Ch+arg_0] +
mov [esp+3Ch+var_3C] edx +
call eax  +
mov [esp+3Ch+var_38] offset aResults +
mov [esp+3Ch+var_3C] 0 +
call sub_401740  +
mov eax [esp+3Ch+var_20] +
test eax eax +
lea esi [eax+ebx] +
jle loc_40235A  +
movzx eax byte ptr [ebx] +
add ebx 1 +
mov [esp+3Ch+var_38] offset a02x_5 +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
cmp ebx esi +
jnz loc_402338  +
mov [esp+3Ch+var_38] offset asc_463DFF +
mov [esp+3Ch+var_3C] 0 +
call sub_401740  +
mov eax ds:_iob +
mov [esp+3Ch+var_3C] 0Ah +
add eax 20h +
mov [esp+3Ch+var_38] eax +
call fputc  +
add esp 3Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
lea ebp [eax+54h] +
mov [esp+3Ch+var_34] ebp +
mov [esp+3Ch+var_38] offset aTheSProgrammer +
mov [esp+3Ch+var_3C] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_40228C  +
lea ebp [eax+54h] +
mov [esp+3Ch+var_34] ebp +
mov [esp+3Ch+var_38] offset aTheSProgramm_0 +
mov [esp+3Ch+var_3C] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_40228C  +
mov [esp+3Ch+var_20] 4 +
mov eax [esp+3Ch+arg_C] +
mov ebp 1 +
lea edi [esp+3Ch+var_18] +
lea ebx [eax+4] +
jmp loc_402406  +
cmp eax ecx +
jz loc_40242B  +
add ebp 1 +
add ebx 4 +
cmp esi ebp +
jle loc_4022C5  +
mov eax [ebx] +
mov [esp+3Ch+var_34] 0 +
mov [esp+3Ch+var_38] edi +
mov [esp+3Ch+var_3C] eax +
call strtoul  +
mov byte ptr [esp+ebp+3Ch+var_18+3] al +
mov eax [esp+3Ch+var_18] +
mov ecx [ebx] +
cmp byte ptr [eax] 0 +
jz loc_4023F4  +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_30] ecx +
mov [esp+3Ch+var_38] offset aSSendCanTParse +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
add esp 3Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
lea edx [esp+3Ch+var_14] +
mov eax [eax+8ECh] +
mov [esp+3Ch+var_38] edx +
mov edx [esp+3Ch+arg_0] +
lea ebx [esp+3Ch+var_10] +
mov [esp+3Ch+var_34] ebx +
mov [esp+3Ch+var_3C] edx +
call eax  +
jmp loc_402319  +
mov eax offset aUsageSendByt_0 +
jmp loc_402277  +
***
sub esp 1Ch +
mov eax ds:_iob +
mov [esp+1Ch+var_1C] 0Ah +
add eax 20h +
mov [esp+1Ch+var_18] eax +
call fputc  +
mov eax [esp+1Ch+arg_4] +
mov [esp+1Ch+var_10] 0 +
mov [esp+1Ch+var_14] offset unk_463E07 +
mov [esp+1Ch+var_18] eax +
mov eax ds:_iob +
add eax 20h +
mov [esp+1Ch+var_1C] eax +
call sub_407F80  +
mov eax ds:_iob +
mov [esp+1Ch+var_1C] 0Ah +
add eax 20h +
mov [esp+1Ch+var_18] eax +
call fputc  +
xor eax eax +
add esp 1Ch +
retn   +
***
jmp sub_402500  +
***
sub esp 14h +
push esi  +
push ebx  +
sub esp 4Ch +
cmp [esp+4Ch+arg_8] 3 +
mov ebx [esp+4Ch+arg_C] +
jle loc_4028FF  +
mov ebp [ebx+4] +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_48] ebp +
mov [esp+4Ch+var_4C] eax +
call sub_407980  +
test eax eax +
mov [esp+4Ch+var_34] eax +
jz loc_4029A6  +
mov eax [esp+4Ch+var_34] +
lea esi [esp+4Ch+var_11+1] +
mov edi [eax+44h] +
mov eax [ebx+8] +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] esi +
mov [esp+4Ch+var_4C] eax +
call strtoul  +
mov ecx [ebx+8] +
mov [esp+4Ch+var_2C] eax +
mov eax [esp+4Ch+var_11+1] +
cmp byte ptr [eax] 0 +
jnz loc_402948  +
cmp eax ecx +
jz loc_402948  +
cmp [esp+4Ch+var_2C] edi +
ja loc_402973  +
mov eax [esp+4Ch+arg_8] +
mov ecx [esp+4Ch+var_2C] +
sub eax 3 +
add ecx eax +
cmp edi ecx +
jb loc_40291D  +
mov [esp+4Ch+var_4C] eax +
call malloc  +
test eax eax +
mov edi eax +
jz loc_4029D0  +
add ebx 0Ch +
mov ebp 3 +
jmp loc_4026D0  +
cmp eax edx +
jz loc_4026F5  +
add ebp 1 +
add ebx 4 +
cmp ebp [esp+4Ch+arg_8] +
jz loc_402730  +
mov eax [ebx] +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] esi +
mov [esp+4Ch+var_4C] eax +
call strtoul  +
mov [edi+ebp-3] al +
mov eax [esp+4Ch+var_11+1] +
mov edx [ebx] +
cmp byte ptr [eax] 0 +
jz loc_4026C0  +
mov eax ds:dword_486584 +
mov [esp+4Ch+var_40] edx +
mov [esp+4Ch+var_48] offset aSWriteCanTPars +
mov [esp+4Ch+var_4C] 0 +
mov [esp+4Ch+var_44] eax +
call sub_401740  +
mov [esp+4Ch+var_4C] edi +
call free  +
mov eax 0FFFFFFFFh +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+4Ch+arg_0] +
xor ebx ebx +
mov esi [esp+4Ch+arg_0] +
mov eax [eax+8BCh] +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] esi +
call eax  +
lea eax [ebp-3] +
mov [esp+4Ch+var_28] edi +
mov edi [esp+4Ch+arg_0] +
mov [esp+4Ch+var_24] eax +
mov [esp+4Ch+var_20] 0 +
jmp loc_4027B7  +
mov [esp+4Ch+var_38] eax +
mov eax ds:dword_486584 +
mov [esp+4Ch+var_3C] esi +
mov [esp+4Ch+var_40] ebp +
mov [esp+4Ch+var_48] offset aSWriteErrorWri +
mov [esp+4Ch+var_44] eax +
mov [esp+4Ch+var_4C] 0 +
call sub_401740  +
mov eax [edi+8BCh] +
add ebx 1 +
mov [esp+4Ch+var_48] 1 +
mov [esp+4Ch+var_4C] edi +
call eax  +
cmp ebx [esp+4Ch+var_24] +
mov [esp+4Ch+var_20] 1 +
jz loc_402840  +
mov eax [esp+4Ch+var_28] +
movzx eax byte ptr [eax+ebx] +
mov [esp+4Ch+var_4C] edi +
mov [esp+4Ch+var_2D] al +
movzx ebp al +
mov eax [esp+4Ch+var_2C] +
mov [esp+4Ch+var_3C] ebp +
lea esi [ebx+eax] +
mov eax [esp+4Ch+var_34] +
mov [esp+4Ch+var_40] esi +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_48] eax +
call sub_404AB0  +
test eax eax +
jnz loc_402870  +
lea ecx [esp+3Bh] +
mov eax [edi+914h] +
mov [esp+4Ch+var_3C] ecx +
mov ecx [esp+4Ch+var_34] +
mov [esp+4Ch+var_40] esi +
mov [esp+4Ch+var_4C] edi +
mov [esp+4Ch+var_44] ecx +
mov ecx [esp+4Ch+arg_4] +
mov [esp+4Ch+var_48] ecx +
call eax  +
movzx eax byte ptr [esp+4Ch+var_11] +
cmp [esp+4Ch+var_2D] al +
jnz loc_402766  +
mov eax [esp+4Ch+var_20] +
test eax eax +
jnz loc_40278F  +
add ebx 1 +
cmp ebx [esp+4Ch+var_24] +
jnz loc_4027B7  +
mov edi [esp+4Ch+var_28] +
mov [esp+4Ch+var_4C] edi +
call free  +
mov eax ds:_iob +
mov [esp+4Ch+var_4C] 0Ah +
add eax 20h +
mov [esp+4Ch+var_48] eax +
call fputc  +
add esp 4Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+4Ch+var_38] eax +
mov [esp+4Ch+var_20] eax +
mov eax ds:dword_486584 +
mov [esp+4Ch+var_3C] esi +
mov [esp+4Ch+var_40] ebp +
mov [esp+4Ch+var_48] offset aSWriteErrorW_0 +
mov [esp+4Ch+var_44] eax +
mov [esp+4Ch+var_4C] 0 +
call sub_401740  +
mov edx [esp+4Ch+var_20] +
cmp edx 0FFFFFFFFh +
jz loc_4028E1  +
lea ecx [esp+4Ch+var_11] +
mov eax [edi+914h] +
mov [esp+4Ch+var_3C] ecx +
mov ecx [esp+4Ch+var_34] +
mov [esp+4Ch+var_40] esi +
mov [esp+4Ch+var_4C] edi +
mov [esp+4Ch+var_44] ecx +
mov ecx [esp+4Ch+arg_4] +
mov [esp+4Ch+var_48] ecx +
call eax  +
movzx eax byte ptr [esp+4Ch+var_11] +
cmp [esp+4Ch+var_2D] al +
jnz loc_402766  +
jmp loc_40278F  +
mov eax [esp+4Ch+var_34] +
mov [esp+4Ch+var_48] offset aWriteOperation +
mov [esp+4Ch+var_4C] 0 +
mov [esp+4Ch+var_44] eax +
call sub_401740  +
jmp loc_4028A6  +
mov [esp+4Ch+var_48] offset aUsageWriteMemt +
mov [esp+4Ch+var_4C] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_402723  +
mov eax ds:dword_486584 +
mov [esp+4Ch+var_40] ebp +
mov [esp+4Ch+var_48] offset aSWriteSelected +
mov [esp+4Ch+var_4C] 0 +
mov [esp+4Ch+var_44] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_402723  +
mov eax ds:dword_486584 +
mov [esp+4Ch+var_40] ecx +
mov [esp+4Ch+var_48] offset aSWriteCanTPa_0 +
mov [esp+4Ch+var_4C] 0 +
mov [esp+4Ch+var_44] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_402723  +
mov eax [esp+4Ch+var_2C] +
mov [esp+4Ch+var_3C] ebp +
mov [esp+4Ch+var_48] offset aSWriteAddress0 +
mov [esp+4Ch+var_4C] 0 +
mov [esp+4Ch+var_40] eax +
mov eax ds:dword_486584 +
mov [esp+4Ch+var_44] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_402723  +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_44] ebp +
mov [esp+4Ch+var_48] offset aSMemoryTypeNot +
mov [esp+4Ch+var_4C] 0 +
mov [esp+4Ch+var_40] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_402723  +
mov eax ds:dword_486584 +
mov [esp+4Ch+var_48] offset aSWriteOutOfMem +
mov [esp+4Ch+var_4C] 0 +
mov [esp+4Ch+var_44] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_402723  +
***
sub esp 1Ch +
mov eax [esp+1Ch+arg_0] +
mov edx [eax+920h] +
test edx edx +
jz loc_402A1C  +
mov [esp+1Ch+var_1C] eax +
call edx  +
xor eax eax +
add esp 1Ch +
retn   +
add eax 54h +
mov [esp+1Ch+var_10] eax +
mov eax ds:dword_486584 +
mov [esp+1Ch+var_18] offset aSParmsTheSProg +
mov [esp+1Ch+var_1C] 0 +
mov [esp+1Ch+var_14] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_402A18  +
***
push esi  +
push ebx  +
sub esp 15Ch +
test ecx ecx +
mov [esp+15Ch+var_130] eax +
lea ebp [esp+15Ch+var_DC] +
mov [esp+15Ch+var_13C] edx +
lea esi [esp+15Ch+var_8C] +
mov [esp+15Ch+var_138] ecx +
jz loc_402C26  +
lea esi [esi+0] +
cmp [esp+15Ch+var_138] 0Fh +
mov eax [esp+15Ch+var_138] +
jg loc_402C33  +
mov ecx [esp+15Ch+var_138] +
mov [esp+15Ch+var_140] eax +
mov [esp+15Ch+var_144] eax +
mov [esp+15Ch+var_134] 0 +
test ecx ecx +
jle loc_402AFB  +
mov edi [esp+15Ch+var_13C] +
xor edx edx +
xor ecx ecx +
nop   +
movzx ebx byte ptr [edi+edx] +
mov eax ebx +
and ebx 0Fh +
shr al 4 +
movzx ebx ds:byte_4640BE[ebx] +
cmp edx 0Fh +
movzx eax al +
movzx eax ds:byte_4640BE[eax] +
mov byte ptr [esp+ecx+15Ch+var_12C+1] bl +
mov byte ptr [esp+ecx+15Ch+var_12C] al +
lea eax [ecx+2] +
jnz loc_402C4F  +
add edx 1 +
cmp edx [esp+15Ch+var_144] +
jge loc_402B08  +
test dl 7 +
jnz loc_402AF7  +
mov byte ptr [esp+eax+15Ch+var_12C] 20h +
add eax 1 +
mov ecx eax +
jmp loc_402AB0  +
xor eax eax +
lea esi [esi+0] +
mov byte ptr [esp+eax+15Ch+var_12C] 20h +
add eax 1 +
cmp eax 2Fh +
jle loc_402B00  +
mov edx [esp+15Ch+var_144] +
mov ecx [esp+15Ch+var_134] +
mov byte ptr [esp+eax+15Ch+var_12C] 0 +
test edx edx +
mov [esp+15Ch+var_138] ecx +
jle loc_402BB5  +
xor ebx ebx +
jmp loc_402B64  +
lea eax [edi-30h] +
cmp eax 9 +
jbe loc_402B9D  +
mov [esp+15Ch+var_15C] edi +
call ds:ispunct  +
mov edx [esp+15Ch+var_148] +
test eax eax +
jnz loc_402B9D  +
mov [esp+15Ch+var_15C] edi +
call ds:__imp_isspace  +
test eax eax +
jz loc_402B5B  +
mov byte ptr [ebp+ebx+0] 20h +
add ebx 1 +
cmp ebx [esp+15Ch+var_144] +
jz loc_402BAA  +
mov eax [esp+15Ch+var_140] +
mov [esp+15Ch+var_15C] esi +
mov [esp+15Ch+var_154] eax +
mov eax [esp+15Ch+var_13C] +
mov [esp+15Ch+var_158] eax +
call memcpy  +
movzx edx byte ptr [esi+ebx] +
mov byte ptr [ebp+ebx+0] 2Eh +
movsx edi dl +
mov [esp+15Ch+var_148] edx +
mov [esp+15Ch+var_15C] edi +
call ds:isalpha  +
mov edx [esp+15Ch+var_148] +
test eax eax +
jz loc_402B30  +
mov [ebp+ebx+0] dl +
add ebx 1 +
cmp ebx [esp+15Ch+var_144] +
jnz loc_402B64  +
cmp [esp+15Ch+var_144] 0Fh +
mov eax [esp+15Ch+var_140] +
jg loc_402BD6  +
mov eax [esp+15Ch+var_144] +
add eax ebp +
nop   +
lea esi [esi+0] +
mov byte ptr [eax] 20h +
lea ecx [esp+15Ch+var_CC] +
add eax 1 +
cmp eax ecx +
jnz loc_402BC0  +
mov eax 10h +
mov byte ptr [esp+eax+15Ch+var_DC] 0 +
lea eax [esp+15Ch+var_12C] +
mov [esp+15Ch+var_150] eax +
mov eax [esp+15Ch+var_130] +
mov [esp+15Ch+var_14C] ebp +
mov [esp+15Ch+var_158] offset a04xSS +
mov [esp+15Ch+var_154] eax +
mov eax ds:_iob +
add eax 20h +
mov [esp+15Ch+var_15C] eax +
call fprintf  +
mov eax [esp+15Ch+var_144] +
add [esp+15Ch+var_130] eax +
mov eax [esp+15Ch+var_140] +
add [esp+15Ch+var_13C] eax +
mov eax [esp+15Ch+var_134] +
test eax eax +
jnz loc_402A80  +
add esp 15Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
sub eax 10h +
mov [esp+15Ch+var_134] eax +
mov [esp+15Ch+var_140] 10h +
mov [esp+15Ch+var_144] 10h +
jmp loc_402AA7  +
mov byte ptr [esp+eax+15Ch+var_12C] 20h +
lea eax [ecx+3] +
jmp loc_402AE1  +
***
push esi  +
push ebx  +
sub esp 3Ch +
mov edi [esp+3Ch+arg_8] +
mov ebp [esp+3Ch+arg_0] +
cmp edi 4 +
jnz loc_402F23  +
mov eax [esp+3Ch+arg_C] +
mov ebx [eax+4] +
mov [esp+3Ch+var_3C] ebx +
call strlen  +
mov [esp+3Ch+var_38] ebx +
mov [esp+3Ch+var_3C] offset unk_4840C0 +
mov [esp+3Ch+var_34] eax +
call strncmp  +
test eax eax +
jnz loc_402E10  +
mov eax [esp+3Ch+arg_4] +
mov [esp+3Ch+var_38] ebx +
mov [esp+3Ch+var_3C] eax +
call sub_407980  +
test eax eax +
mov esi eax +
jz loc_402FD5  +
cmp edi 4 +
jz loc_402E48  +
mov edx [eax+44h] +
mov ebx ds:dword_4840A0 +
cmp edx ebx +
jbe loc_402DA6  +
mov ecx dword_461020 +
lea edi [ecx+ebx] +
mov eax ecx +
cmp edi edx +
jbe loc_402CF2  +
sub edx ebx +
mov dword_461020 edx +
mov ecx edx +
mov eax edx +
mov [esp+3Ch+var_3C] eax +
mov [esp+3Ch+var_20] ecx +
call malloc  +
test eax eax +
mov [esp+3Ch+var_24] eax +
jz loc_402FAE  +
mov ecx [esp+3Ch+var_20] +
xor edi edi +
test ecx ecx +
jz loc_402DCC  +
mov ecx ebx +
mov ebx ebp +
mov ebp [esp+3Ch+var_24] +
jmp loc_402D39  +
mov ecx dword_461020 +
add edi 1 +
cmp ecx edi +
jbe loc_402DC6  +
mov ecx ds:dword_4840A0 +
lea eax [ebp+edi+0] +
add ecx edi +
mov [esp+3Ch+var_2C] eax +
mov eax [esp+3Ch+arg_4] +
mov [esp+3Ch+var_30] ecx +
mov [esp+3Ch+var_34] esi +
mov [esp+3Ch+var_3C] ebx +
mov [esp+3Ch+var_38] eax +
call dword ptr [ebx+914h]  +
test eax eax +
jz loc_402D22  +
mov edx ds:dword_4840A0 +
mov ebx eax +
mov eax [esp+3Ch+arg_4] +
mov [esp+3Ch+var_34] esi +
mov [esp+3Ch+var_38] offset aErrorReadingSA +
add edx edi +
mov edi 0FFFFFFFFh +
mov [esp+3Ch+var_2C] eax +
mov [esp+3Ch+var_30] edx +
mov [esp+3Ch+var_3C] 0 +
call sub_401740  +
cmp ebx 0FFFFFFFFh +
jz loc_402F06  +
add esp 3Ch +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp edi 2 +
jnz loc_402ED7  +
mov ds:dword_4840A0 0 +
mov ecx dword_461020 +
xor ebx ebx +
jmp loc_402CDD  +
mov ebx ds:dword_4840A0 +
mov esi [esp+3Ch+var_24] +
mov eax ebx +
xor edi edi +
mov edx esi +
call sub_402A50  +
mov eax ds:_iob +
mov [esp+3Ch+var_3C] 0Ah +
add eax 20h +
mov [esp+3Ch+var_38] eax +
call fputc  +
mov [esp+3Ch+var_3C] esi +
call free  +
mov eax dword_461020 +
add ds:dword_4840A0 eax +
add esp 3Ch +
pop ebx  +
mov eax edi +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+3Ch+var_34] 7Fh +
mov [esp+3Ch+var_38] ebx +
mov [esp+3Ch+var_3C] offset unk_4840C0 +
mov ds:dword_4840A0 0 +
mov dword_461020 40h +
call strncpy  +
mov ds:byte_48413F 0 +
jmp loc_402CA3  +
mov eax [esp+3Ch+arg_C] +
lea ebx [esp+3Ch+var_10] +
mov eax [eax+8] +
mov [esp+3Ch+var_34] 0 +
mov [esp+3Ch+var_38] ebx +
mov [esp+3Ch+var_3C] eax +
call strtoul  +
mov ds:dword_4840A0 eax +
mov eax [esp+3Ch+var_10] +
cmp byte ptr [eax] 0 +
jnz loc_402F4A  +
mov edx [esp+3Ch+arg_C] +
mov edx [edx+8] +
cmp eax edx +
jz loc_402F51  +
mov eax [esp+3Ch+arg_C] +
mov eax [eax+0Ch] +
mov [esp+3Ch+var_34] 0 +
mov [esp+3Ch+var_38] ebx +
mov [esp+3Ch+var_3C] eax +
call strtol  +
mov edx [esp+3Ch+var_10] +
cmp byte ptr [edx] 0 +
mov dword_461020 eax +
jnz loc_402F7C  +
mov ebx [esp+3Ch+arg_C] +
mov ebx [ebx+0Ch] +
cmp edx ebx +
jz loc_402F83  +
mov edx [esi+44h] +
mov ecx eax +
mov ebx ds:dword_4840A0 +
cmp ebx edx +
jb loc_402CDD  +
mov eax ds:dword_486584 +
mov edi 0FFFFFFFFh +
mov [esp+3Ch+var_2C] esi +
mov [esp+3Ch+var_30] ebx +
mov [esp+3Ch+var_38] offset aSDumpAddress0x +
mov [esp+3Ch+var_34] eax +
mov [esp+3Ch+var_3C] 0 +
call sub_401740  +
jmp loc_402D9C  +
mov [esp+3Ch+var_34] esi +
mov [esp+3Ch+var_38] offset aReadOperatio_0 +
mov [esp+3Ch+var_3C] 0 +
call sub_401740  +
jmp loc_402D9C  +
cmp edi 2 +
jz loc_402C78  +
mov [esp+3Ch+var_38] offset aUsageDumpMemty +
mov edi 0FFFFFFFFh +
mov [esp+3Ch+var_3C] 0 +
call sub_401740  +
jmp loc_402D9C  +
mov eax [esp+3Ch+arg_C] +
mov edx [eax+8] +
mov eax ds:dword_486584 +
mov edi 0FFFFFFFFh +
mov [esp+3Ch+var_30] edx +
mov [esp+3Ch+var_38] offset aSDumpCanTParse +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
jmp loc_402D9C  +
mov eax [esp+3Ch+arg_C] +
mov ebx [eax+0Ch] +
mov eax ds:dword_486584 +
mov edi 0FFFFFFFFh +
mov [esp+3Ch+var_30] ebx +
mov [esp+3Ch+var_38] offset aSDumpCanTPar_0 +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
jmp loc_402D9C  +
mov eax ds:dword_486584 +
mov edi 0FFFFFFFFh +
mov [esp+3Ch+var_38] offset aSDumpOutOfMemo +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
jmp loc_402D9C  +
mov eax [esp+3Ch+arg_4] +
mov edi 0FFFFFFFFh +
mov [esp+3Ch+var_34] ebx +
mov [esp+3Ch+var_38] offset aSMemoryTypeNot +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_30] eax +
call sub_401740  +
jmp loc_402D9C  +
***
mov eax [esp+118h+arg_0] +
lea ebx [esp+118h+var_108] +
mov [esp+118h+var_118] offset aS_3 +
mov [esp+118h+var_114] eax +
call printf  +
mov eax ds:_iob +
mov [esp+118h+var_114] 100h +
mov [esp+118h+var_118] ebx +
mov [esp+118h+var_110] eax +
call fgets  +
test eax eax +
jz loc_403047  +
mov [esp+118h+var_118] ebx +
call _strdup  +
add esp 118h +
pop ebx  +
retn   +
***
push esi  +
xor esi esi +
push ebx  +
sub esp 3Ch +
mov ebp ds:__imp_isspace +
nop   +
mov [esp+40h+var_40] offset aAvrdude +
call sub_403000  +
test eax eax +
mov [esp+40h+var_18] eax +
jz loc_403409  +
movzx ebx byte ptr [eax] +
test bl bl +
jz loc_403060  +
mov edi eax +
jmp loc_40308D  +
add edi 1 +
movzx ebx byte ptr [edi] +
test bl bl +
jz loc_403060  +
movsx eax bl +
mov [esp+40h+var_40] eax +
call ebp  +
test eax eax +
jnz loc_403083  +
cmp bl 23h +
jz loc_403060  +
test bl bl +
jz loc_403060  +
mov [esp+40h+var_40] edi +
call strlen  +
mov [esp+40h+var_14] eax +
add eax 14h +
mov [esp+40h+var_40] eax +
mov [esp+40h+var_1C] eax +
call malloc  +
mov [esp+40h+var_40] 50h +
mov [esp+40h+var_30] eax +
call malloc  +
mov ebx eax +
xor eax eax +
mov dword ptr [ebx+eax*4] 0 +
add eax 1 +
cmp eax 14h +
jnz loc_4030D1  +
mov eax [esp+40h+var_30] +
xor esi esi +
mov [esp+40h+var_20] 14h +
mov [esp+40h+var_24] 0 +
mov byte ptr [eax] 0 +
mov [esp+40h+var_28] eax +
lea esi [esi+0] +
movsx eax byte ptr [edi] +
test al al +
jnz loc_403116  +
jmp loc_403239  +
add edi 1 +
movsx eax byte ptr [edi] +
mov [esp+40h+var_40] eax +
call ebp  +
test eax eax +
jnz loc_403110  +
mov eax edi +
movsx eax byte ptr [eax+1] +
mov [esp+40h+var_2C] edi +
add edi 1 +
test al al +
jnz loc_403143  +
jmp loc_403400  +
add edi 1 +
movsx eax byte ptr [edi] +
test al al +
jz loc_403400  +
mov [esp+40h+var_40] eax +
call ebp  +
test eax eax +
jz loc_403135  +
mov eax edi +
add edi 1 +
mov byte ptr [edi-1] 0 +
movsx eax byte ptr [eax+1] +
jmp loc_403166  +
add edi 1 +
movsx eax byte ptr [edi] +
mov [esp+40h+var_40] eax +
call ebp  +
test eax eax +
jnz loc_403160  +
mov ecx [esp+40h+var_30] +
mov eax [esp+40h+var_2C] +
mov [esp+40h+var_40] ecx +
mov [esp+40h+var_3C] eax +
call strcpy  +
mov ecx [esp+40h+var_30] +
mov eax [esp+40h+var_2C] +
mov [ebx+esi*4] ecx +
add esi 1 +
mov [esp+40h+var_40] eax +
call strlen  +
add eax 1 +
add [esp+40h+var_30] eax +
add [esp+40h+var_24] eax +
mov eax [esp+40h+var_30] +
mov byte ptr [eax] 0 +
mov eax 66666667h +
imul  esi +
mov eax esi +
sar eax 1Fh +
sar edx 3 +
sub edx eax +
lea eax [edx+edx*4] +
shl eax 2 +
cmp esi eax +
jnz loc_403100  +
add [esp+40h+var_1C] 14h +
mov eax [esp+40h+var_1C] +
add [esp+40h+var_20] 14h +
mov [esp+40h+var_3C] eax +
mov eax [esp+40h+var_28] +
mov [esp+40h+var_40] eax +
call realloc  +
mov edx [esp+40h+var_20] +
mov [esp+40h+var_40] ebx +
mov [esp+40h+var_28] eax +
lea eax ds:0[edx*4] +
mov [esp+40h+var_3C] eax +
call realloc  +
mov edx [esp+40h+var_20] +
mov ebx eax +
mov eax [esp+40h+var_28] +
add eax [esp+40h+var_24] +
cmp esi edx +
mov [esp+40h+var_30] eax +
jge loc_403100  +
mov eax esi +
nop   +
mov dword ptr [ebx+eax*4] 0 +
add eax 1 +
cmp edx eax +
jnz loc_403220  +
movsx eax byte ptr [edi] +
test al al +
jnz loc_403116  +
lea eax ds:4[esi*4] +
mov edx eax +
mov [esp+40h+var_30] eax +
mov eax [esp+40h+var_14] +
add eax esi +
add eax edx +
mov [esp+40h+var_40] eax +
call malloc  +
mov edi eax +
mov eax [esp+40h+var_30] +
lea edx [edi+eax] +
mov eax [esp+40h+var_24] +
mov [esp+40h+var_40] edx +
mov [esp+40h+var_2C] edx +
mov [esp+40h+var_38] eax +
mov eax [esp+40h+var_28] +
mov [esp+40h+var_3C] eax +
call memcpy  +
test esi esi +
jz loc_40344D  +
mov edx [esp+40h+var_2C] +
xor eax eax +
lea esi [esi+0] +
mov ecx edx +
sub ecx [esp+40h+var_28] +
add ecx [ebx+eax*4] +
mov [edi+eax*4] ecx +
add eax 1 +
cmp eax esi +
jnz loc_403290  +
mov eax [esp+40h+var_30] +
mov dword ptr [edi+eax-4] 0 +
mov eax [esp+40h+var_28] +
mov [esp+40h+var_40] eax +
call free  +
mov [esp+40h+var_40] ebx +
xor ebx ebx +
call free  +
mov eax ds:_iob +
mov [esp+40h+var_38] 4 +
mov [esp+40h+var_3C] 1 +
mov [esp+40h+var_40] offset asc_46420D +
add eax 20h +
mov [esp+40h+var_34] eax +
call fwrite  +
lea esi [esi+0] +
mov eax [edi+ebx*4] +
add ebx 1 +
mov [esp+40h+var_3C] offset aS_2 +
mov [esp+40h+var_38] eax +
mov eax ds:_iob +
add eax 20h +
mov [esp+40h+var_40] eax +
call fprintf  +
cmp ebx esi +
jnz loc_4032F0  +
mov eax ds:_iob +
mov ebx offset off_461040 +
mov [esp+40h+var_40] 0Ah +
add eax 20h +
mov [esp+40h+var_3C] eax +
call fputc  +
mov ecx [edi] +
mov [esp+40h+var_40] ecx +
mov [esp+40h+var_28] ecx +
call strlen  +
mov ecx [esp+40h+var_28] +
mov [esp+40h+var_24] esi +
mov [esp+40h+var_30] 0FFFFFFFFh +
mov [esp+40h+var_2C] eax +
xor eax eax +
mov esi eax +
jmp loc_403362  +
mov ecx [edi] +
mov eax [ebx] +
mov [esp+40h+var_40] ecx +
mov [esp+40h+var_3C] eax +
call ds:_stricmp  +
test eax eax +
jz loc_403413  +
mov ecx [ebx] +
mov eax [edi] +
mov edx [esp+40h+var_2C] +
mov [esp+40h+var_3C] ecx +
mov [esp+40h+var_40] eax +
mov [esp+40h+var_38] edx +
call ds:_strnicmp  +
test eax eax +
jnz loc_4033A1  +
cmp [esp+40h+var_30] 0FFFFFFFFh +
jnz loc_40341B  +
mov [esp+40h+var_30] esi +
add esi 1 +
add ebx 0Ch +
cmp esi 12h +
jnz loc_403360  +
mov eax [esp+40h+var_30] +
mov esi [esp+40h+var_24] +
cmp eax 0FFFFFFFFh +
jz loc_403494  +
mov edx [esp+40h+arg_4] +
lea eax [eax+eax*2] +
mov eax off_461044[eax*4] +
mov [esp+40h+var_38] esi +
mov [esp+40h+var_34] edi +
mov [esp+40h+var_3C] edx +
mov edx [esp+40h+arg_0] +
mov [esp+40h+var_40] edx +
call eax  +
mov [esp+40h+var_40] edi +
mov esi eax +
call free  +
test esi esi +
jg loc_403407  +
mov eax [esp+40h+var_18] +
mov [esp+40h+var_40] eax +
call free  +
jmp loc_403060  +
xor eax eax +
jmp loc_403166  +
xor esi esi +
add esp 3Ch +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax esi +
mov esi [esp+40h+var_24] +
jmp loc_4033BD  +
mov eax [edi] +
mov [esp+40h+var_3C] offset aSCommandSIsAmb +
mov [esp+40h+var_40] 0 +
mov [esp+40h+var_34] eax +
mov eax ds:dword_486584 +
mov [esp+40h+var_38] eax +
call sub_401740  +
mov [esp+40h+var_40] edi +
mov esi 0FFFFFFFFh +
call free  +
jmp loc_4033EE  +
mov eax [esp+40h+var_28] +
mov dword ptr [edi] 0 +
mov [esp+40h+var_40] eax +
call free  +
mov [esp+40h+var_40] ebx +
call free  +
mov eax ds:_iob +
mov [esp+40h+var_38] 4 +
mov [esp+40h+var_3C] 1 +
mov [esp+40h+var_40] offset asc_46420D +
add eax 20h +
mov [esp+40h+var_34] eax +
call fwrite  +
jmp loc_403316  +
mov eax [edi] +
mov [esp+40h+var_3C] offset aSInvalidComman +
mov [esp+40h+var_40] 0 +
mov [esp+40h+var_34] eax +
mov eax ds:dword_486584 +
mov [esp+40h+var_38] eax +
call sub_401740  +
jmp loc_40343E  +
***
mov ebx [esp+18h+arg_0] +
test ebx ebx +
jz loc_4034F5  +
cmp dword ptr [ebx+8] 3 +
jnz loc_4034E8  +
mov eax [ebx+18h] +
test eax eax +
jz loc_4034E1  +
mov [esp+18h+var_18] eax +
call free  +
mov dword ptr [ebx+18h] 0 +
mov [esp+18h+arg_0] ebx +
add esp 18h +
pop ebx  +
jmp free  +
add esp 18h +
pop ebx  +
retn   +
***
sub esp 1Ch +
mov eax ds:dword_486D20 +
mov [esp+1Ch+var_18] offset sub_407D40 +
mov [esp+1Ch+var_1C] eax +
call sub_406D00  +
mov eax ds:dword_4866C0 +
mov [esp+1Ch+var_18] offset sub_4086D0 +
mov [esp+1Ch+var_1C] eax +
call sub_406D00  +
mov eax ds:dword_486904 +
mov [esp+1Ch+var_18] offset sub_4034C0 +
mov [esp+1Ch+var_1C] eax +
call sub_406D00  +
mov eax ds:dword_486918 +
mov [esp+1Ch+var_18] offset sub_4034C0 +
mov [esp+1Ch+var_1C] eax +
call sub_406D00  +
add esp 1Ch +
retn   +
***
sub esp 1Ch +
mov [esp+1Ch+var_18] 0 +
mov [esp+1Ch+var_1C] 0 +
call sub_406BF0  +
mov [esp+1Ch+var_18] 0 +
mov [esp+1Ch+var_1C] 0 +
mov ds:dword_486904 eax +
call sub_406BF0  +
mov [esp+1Ch+var_18] 0 +
mov [esp+1Ch+var_1C] 0 +
mov ds:dword_486914 0 +
mov ds:dword_486D24 0 +
mov ds:dword_486910 0 +
mov ds:dword_486918 eax +
call sub_406BF0  +
mov [esp+1Ch+var_18] 0 +
mov [esp+1Ch+var_1C] 0 +
mov ds:dword_486D20 eax +
call sub_406BF0  +
mov ds:dword_486908 1 +
mov ds:dword_48690C 0 +
mov ds:dword_4866C0 eax +
xor eax eax +
add esp 1Ch +
retn   +
***
retn   +
***
lea eax [esp+228h+arg_4] +
mov [esp+228h+var_21C] eax +
mov eax [esp+228h+arg_0] +
lea ebx [esp+228h+var_208] +
mov [esp+228h+var_228] ebx +
mov [esp+228h+var_224] 200h +
mov [esp+228h+var_220] eax +
call j__vsnprintf  +
mov eax ds:dword_486908 +
mov [esp+228h+var_214] ebx +
mov [esp+228h+var_224] offset aSErrorAtSDS +
mov [esp+228h+var_228] 0 +
mov [esp+228h+var_218] eax +
mov eax ds:dword_48690C +
mov [esp+228h+var_21C] eax +
mov eax ds:dword_486584 +
mov [esp+228h+var_220] eax +
call sub_401740  +
add esp 228h +
xor eax eax +
pop ebx  +
retn   +
***
lea eax [esp+228h+arg_4] +
mov [esp+228h+var_21C] eax +
mov eax [esp+228h+arg_0] +
lea ebx [esp+228h+var_208] +
mov [esp+228h+var_228] ebx +
mov [esp+228h+var_224] 200h +
mov [esp+228h+var_220] eax +
call j__vsnprintf  +
mov eax ds:dword_486908 +
mov [esp+228h+var_214] ebx +
mov [esp+228h+var_224] offset aSWarningAtSDS +
mov [esp+228h+var_228] 0 +
mov [esp+228h+var_218] eax +
mov eax ds:dword_48690C +
mov [esp+228h+var_21C] eax +
mov eax ds:dword_486584 +
mov [esp+228h+var_220] eax +
call sub_401740  +
add esp 228h +
xor eax eax +
pop ebx  +
retn   +
***
sub esp 1Ch +
sub esp 14h +
mov ebx [esp+14h+arg_0] +
lea esi [esp+14h+arg_8] +
test ebx ebx +
jz loc_403754  +
mov eax [esi-4] +
add esi 4 +
mov [esp+14h+var_14] eax +
call sub_4034C0  +
sub ebx 1 +
jnz loc_403741  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
***
mov [esp+18h+var_18] 187h +
call sub_4036F0  +
test eax eax +
mov ebx eax +
jz loc_40378C  +
mov dword ptr [eax+8] 1 +
mov eax [esp+18h+arg_0] +
mov [esp+18h+var_18] eax +
call atoi  +
mov [ebx+0Ch] eax +
add esp 18h +
mov eax ebx +
pop ebx  +
retn   +
***
mov [esp+18h+var_18] 187h +
call sub_4036F0  +
mov ebx eax +
mov dword ptr [eax+8] 2 +
mov eax [esp+18h+arg_0] +
mov [esp+18h+var_18] eax +
call atof  +
mov eax ebx +
fstp  qword ptr [ebx+10h] +
add esp 18h +
pop ebx  +
retn   +
***
sub esp 24h +
mov [esp+24h+var_24] 187h +
mov esi [esp+24h+arg_0] +
call sub_4036F0  +
test eax eax +
mov ebx eax +
jz loc_403840  +
mov dword ptr [eax+8] 1 +
lea eax [esp+24h+var_8] +
mov [esp+24h+var_1C] 10h +
mov [esp+24h+var_20] eax +
mov [esp+24h+var_24] esi +
call strtoul  +
mov edx [esp+24h+var_8] +
cmp edx esi +
mov [ebx+0Ch] eax +
jz loc_403822  +
cmp byte ptr [edx] 0 +
mov eax ebx +
jnz loc_403822  +
add esp 24h +
pop ebx  +
pop esi  +
retn   +
mov [esp+24h+var_20] esi +
mov [esp+24h+var_24] offset aCanTScanHexNum +
call sub_403610  +
add esp 24h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
xor eax eax +
jmp loc_40381C  +
***
sub esp 14h +
mov [esp+14h+var_14] 189h +
mov esi [esp+14h+arg_0] +
call sub_4036F0  +
test eax eax +
mov ebx eax +
jz loc_4038A0  +
mov [esp+14h+var_14] esi +
call strlen  +
mov dword ptr [ebx+8] 3 +
add eax 1 +
mov [esp+14h+var_14] eax +
call malloc  +
test eax eax +
mov [ebx+18h] eax +
jz loc_4038A4  +
mov [esp+14h+var_10] esi +
mov [esp+14h+var_14] eax +
call strcpy  +
mov eax ebx +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
xor eax eax +
jmp loc_40389A  +
mov [esp+14h+var_14] offset aStringOutOfMem +
call sub_403610  +
xor eax eax +
jmp loc_40389A  +
***
jmp sub_4036F0  +
***
push ebx  +
sub esp 18h +
mov ebx [esp+20h] +
test ebx ebx +
jz loc_403930  +
mov eax [ebx] +
mov dword ptr [esp+4] offset aTokenD +
mov dword ptr [esp] 0 +
mov [esp+8] eax +
call sub_401740  +
mov eax [ebx+8] +
cmp eax 2 +
jz loc_403970  +
cmp eax 3 +
jz loc_403935  +
cmp eax 1 +
jz loc_403952  +
mov dword ptr [esp+4] offset aOther +
mov dword ptr [esp] 0 +
call sub_401740  +
mov dword ptr [esp+4] offset asc_464589 +
mov dword ptr [esp] 0 +
call sub_401740  +
add esp 18h +
pop ebx  +
retn   +
***
mov eax [ebx+18h] +
mov dword ptr [esp+4] offset aStringValueS +
mov dword ptr [esp] 0 +
mov [esp+8] eax +
call sub_401740  +
jmp loc_40391C  +
***
mov eax [ebx+0Ch] +
mov dword ptr [esp+4] offset aNumberValueD +
mov dword ptr [esp] 0 +
mov [esp+8] eax +
call sub_401740  +
jmp loc_40391C  +
***
fld  qword ptr [ebx+10h] +
fstp  qword ptr [esp+8] +
mov dword ptr [esp+4] offset aNumberValueG +
mov dword ptr [esp] 0 +
call sub_401740  +
jmp loc_40391C  +
***
mov eax [esp+18h+arg_0] +
mov [esp+18h+var_18] eax +
call _strdup  +
test eax eax +
mov ebx eax +
jz loc_4039BD  +
add esp 18h +
mov eax ebx +
pop ebx  +
retn   +
mov [esp+18h+var_18] offset aDup_stringOutO +
call sub_403610  +
jmp loc_4039B6  +
***
sub esp 24h +
mov esi [esp+24h+arg_0] +
mov [esp+24h+var_20] offset aR +
mov [esp+24h+var_24] esi +
call fopen  +
test eax eax +
mov ebx eax +
jz loc_403A20  +
mov ds:dword_48690C esi +
mov ds:dword_486908 1 +
mov ds:dword_48417C eax +
call sub_40B6B0  +
mov esi eax +
call sub_40B280  +
mov [esp+24h+var_24] ebx +
call fclose  +
mov eax esi +
add esp 24h +
pop ebx  +
pop esi  +
retn   +
call ds:__imp__errno  +
mov eax [eax] +
mov [esp+24h+var_24] eax +
call strerror  +
mov [esp+24h+var_18] esi +
mov [esp+24h+var_20] offset aSCanTOpenConfi +
mov [esp+24h+var_24] 0 +
mov [esp+24h+var_14] eax +
mov eax ds:dword_486584 +
mov [esp+24h+var_1C] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_403A1A  +
***
push edi  +
mov edi edx +
push esi  +
push ebx  +
mov ebx eax +
sub esp 3Ch +
mov eax [esp+48h+arg_0] +
lea esi [esp+48h+var_1C] +
mov byte ptr [esp+48h+var_1C] 0F3h +
mov [esp+48h+var_38] 0 +
mov [esp+48h+var_3C] 0 +
mov byte ptr [esp+48h+var_1C+1] al +
mov eax [ebx+8F0h] +
mov [esp+48h+var_40] 2 +
mov [esp+48h+var_44] esi +
mov [esp+48h+var_48] ebx +
call eax  +
cmp eax 0FFFFFFFFh +
jz loc_403B31  +
mov eax ebp +
add al [edi] +
mov byte ptr [esp+48h+var_1C] 68h +
mov [esp+48h+var_38] 0 +
mov byte ptr [esp+48h+var_1C+1] al +
mov eax [ebx+8F0h] +
mov [esp+48h+var_3C] 0 +
mov [esp+48h+var_40] 2 +
mov [esp+48h+var_44] esi +
mov [esp+48h+var_48] ebx +
call eax  +
cmp eax 0FFFFFFFFh +
jz loc_403B31  +
mov ecx [edi] +
mov eax [ebx+8F0h] +
mov byte ptr [esp+48h+var_1C] 69h +
mov [esp+48h+var_38] 0 +
add ecx ebp +
shr ecx 8 +
mov byte ptr [esp+48h+var_1C+1] cl +
mov [esp+48h+var_3C] 0 +
mov [esp+48h+var_40] 2 +
mov [esp+48h+var_44] esi +
mov [esp+48h+var_48] ebx +
call eax  +
cmp eax 0FFFFFFFFh +
setz al  +
movzx eax al +
neg eax  +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax 0FFFFFFFFh +
jmp loc_403B29  +
***
sub esp 3Ch +
mov eax [esp+3Ch+arg_0] +
lea ecx [esp+3Ch+var_E+1] +
mov byte ptr [esp+3Ch+var_E] 72h +
mov edx [eax+8F0h] +
mov [esp+3Ch+var_30] ecx +
lea ecx [esp+3Ch+var_E] +
mov [esp+3Ch+var_2C] 1 +
mov [esp+3Ch+var_34] 1 +
mov [esp+3Ch+var_38] ecx +
mov [esp+3Ch+var_3C] eax +
call edx  +
movzx eax byte ptr [esp+3Ch+var_E+1] +
add esp 3Ch +
and eax 0FFFFFF80h +
movzx eax al +
retn   +
***
push ebx  +
sub esp 30h +
mov esi [esp+30h+arg_4] +
mov ebx [esp+30h+arg_0] +
test byte ptr [esi+85h] 8 +
jz loc_403CDA  +
mov eax [ebx+8C0h] +
mov [esp+30h+var_2C] 1 +
mov [esp+30h+var_30] ebx +
call eax  +
mov [esp+30h+var_2C] offset aFlash_1 +
mov [esp+30h+var_30] esi +
call sub_407980  +
test eax eax +
jz loc_403CBB  +
mov eax [eax+50h] +
lea edi [esp+30h+var_9] +
mov byte ptr [esp+30h+var_9+1] 68h +
lea esi [esp+26h] +
mov byte ptr [esp+30h+var_9+3] 69h +
mov [esp+30h+var_4] 0F3h +
mov edx eax +
or edx 1 +
shr eax 8 +
mov byte ptr [esp+30h+var_9+2] dl +
mov [esp+30h+var_5] al +
mov [esp+30h+var_3] 10h +
mov [esp+30h+var_2] 60h +
mov [esp+30h+var_1] 0FFh +
nop   +
mov eax [ebx+8F0h] +
mov [esp+30h+var_A] 72h +
mov [esp+30h+var_20] 1 +
mov [esp+30h+var_24] edi +
mov [esp+30h+var_28] 1 +
mov [esp+30h+var_2C] esi +
mov [esp+30h+var_30] ebx +
call eax  +
cmp byte ptr [esp+30h+var_9] 0 +
js loc_403C10  +
mov eax [ebx+8F0h] +
lea edx [esp+30h+var_9+1] +
mov [esp+30h+var_20] 0 +
mov [esp+30h+var_24] 0 +
mov [esp+30h+var_28] 8 +
mov [esp+30h+var_2C] edx +
mov [esp+30h+var_30] ebx +
call eax  +
test eax eax +
jnz loc_403CB4  +
nop   +
mov eax [ebx+8F0h] +
mov [esp+30h+var_A] 72h +
mov [esp+30h+var_20] 1 +
mov [esp+30h+var_24] edi +
mov [esp+30h+var_28] 1 +
mov [esp+30h+var_2C] esi +
mov [esp+30h+var_30] ebx +
call eax  +
cmp byte ptr [esp+30h+var_9] 0 +
js loc_403C70  +
mov eax [ebx+8C0h] +
mov [esp+30h+var_2C] 0 +
mov [esp+30h+var_30] ebx +
call eax  +
xor eax eax +
add esp 30h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov [esp+30h+var_28] esi +
mov [esp+30h+var_2C] offset aNoFlashMemoryT +
mov [esp+30h+var_30] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_403CB4  +
mov [esp+30h+var_28] offset aAvr_tpi_chip_e +
mov [esp+30h+var_2C] offset aSCalledForAPar +
mov [esp+30h+var_30] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_403CB4  +
***
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [esp+3Ch+arg_4] +
mov ebx [esp+3Ch+arg_0] +
mov edx [esp+3Ch+arg_8] +
test byte ptr [eax+85h] 8 +
jz loc_403E70  +
mov eax [ebx+8F0h] +
lea esi [esp+3Ch+var_E] +
mov byte ptr [esp+3Ch+var_E] 0C2h +
mov byte ptr [esp+3Ch+var_E+1] dl +
mov [esp+3Ch+var_2C] 0 +
mov [esp+3Ch+var_30] 0 +
mov [esp+3Ch+var_34] 2 +
mov [esp+3Ch+var_38] esi +
mov [esp+3Ch+var_3C] ebx +
call eax  +
test eax eax +
jz loc_403D60  +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx+8F0h] +
lea edi [esp+2Dh] +
mov byte ptr [esp+3Ch+var_E] 8Fh +
mov [esp+3Ch+var_2C] 1 +
mov [esp+3Ch+var_30] edi +
mov [esp+3Ch+var_34] 1 +
mov [esp+3Ch+var_38] esi +
mov [esp+3Ch+var_3C] ebx +
call eax  +
test eax eax +
jnz loc_403E50  +
cmp [esp+3Ch+var_F] 80h +
jnz loc_403E50  +
mov eax [ebx+8F0h] +
mov [esp+3Ch+var_2C] 0 +
mov [esp+3Ch+var_30] 0 +
mov [esp+3Ch+var_34] 9 +
mov [esp+3Ch+var_38] offset unk_464EC1 +
mov [esp+3Ch+var_3C] ebx +
call eax  +
test eax eax +
jnz loc_403D58  +
mov ebp 0Ah +
mov eax [ebx+8F0h] +
mov byte ptr [esp+3Ch+var_E] 80h +
mov [esp+3Ch+var_2C] 1 +
mov [esp+3Ch+var_30] edi +
mov [esp+3Ch+var_34] 1 +
mov [esp+3Ch+var_38] esi +
mov [esp+3Ch+var_3C] ebx +
call eax  +
test eax eax +
jnz loc_403E06  +
test [esp+3Ch+var_F] 2 +
jnz loc_403E40  +
sub ebp 1 +
jnz loc_403DD3  +
mov [esp+3Ch+var_38] offset aErrorEnablingT +
mov [esp+3Ch+var_3C] 0 +
call sub_401740  +
mov [esp+3Ch+var_38] offset aTargetDoesNotR +
mov [esp+3Ch+var_3C] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_403D58  +
add esp 3Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+3Ch+var_38] offset aTpiirNotCorr_0 +
mov [esp+3Ch+var_3C] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_403D58  +
mov [esp+3Ch+var_34] offset aAvr_tpi_progra +
mov [esp+3Ch+var_38] offset aSCalledForAPar +
mov [esp+3Ch+var_3C] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_403D58  +
***
push esi  +
push ebx  +
sub esp 3Ch +
mov ebx [esp+3Ch+arg_0] +
mov eax [ebx+8ECh] +
test eax eax +
jz loc_4040B3  +
mov eax [ebx+8C0h] +
mov [esp+3Ch+var_38] 1 +
mov [esp+3Ch+var_3C] ebx +
call eax  +
mov eax [ebx+8BCh] +
mov [esp+3Ch+var_38] 0 +
mov [esp+3Ch+var_3C] ebx +
call eax  +
mov eax [esp+3Ch+arg_4] +
test byte ptr [eax+85h] 8 +
jnz loc_403FF4  +
mov eax [esp+3Ch+arg_8] +
mov ebp [eax+88h] +
test ebp ebp +
jz loc_404097  +
test byte ptr [esp+3Ch+arg_C] 1 +
jz loc_403F0F  +
mov ebp [eax+8Ch] +
shr [esp+3Ch+arg_C] 1 +
test ebp ebp +
jz loc_4040E1  +
mov eax [esp+3Ch+arg_8] +
mov edi [eax+0A0h] +
test edi edi +
jz loc_4040A6  +
lea esi [esp+3Ch+var_14] +
mov [esp+3Ch+var_3C] edi +
mov [esp+3Ch+var_38] esi +
mov [esp+3Ch+var_14] 0 +
call sub_4075B0  +
mov eax [esp+3Ch+arg_C] +
mov [esp+3Ch+var_3C] edi +
lea edi [esp+3Ch+var_10] +
mov [esp+3Ch+var_38] esi +
mov [esp+3Ch+var_34] eax +
call sub_407620  +
mov eax [ebx+8ECh] +
mov [esp+3Ch+var_34] edi +
mov [esp+3Ch+var_38] esi +
mov [esp+3Ch+var_3C] ebx +
call eax  +
test eax eax +
js loc_403FEC  +
mov [esp+3Ch+var_38] esi +
mov [esp+3Ch+var_3C] ebp +
mov [esp+3Ch+var_14] 0 +
call sub_4075B0  +
mov eax [esp+3Ch+arg_C] +
mov [esp+3Ch+var_38] esi +
mov [esp+3Ch+var_3C] ebp +
mov [esp+3Ch+var_34] eax +
call sub_407620  +
mov eax [ebx+8ECh] +
mov [esp+3Ch+var_34] edi +
mov [esp+3Ch+var_38] esi +
mov [esp+3Ch+var_3C] ebx +
call eax  +
test eax eax +
js loc_403FEC  +
lea eax [esp+27h] +
mov [esp+3Ch+var_34] eax +
mov [esp+3Ch+var_38] edi +
mov [esp+3Ch+var_3C] ebp +
mov [esp+3Ch+var_15] 0 +
call sub_407720  +
mov eax [ebx+8C0h] +
mov [esp+3Ch+var_38] 0 +
mov [esp+3Ch+var_3C] ebx +
call eax  +
movzx eax [esp+3Ch+var_15] +
mov edx [esp+3Ch+arg_10] +
mov [edx] al +
xor eax eax +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx+8F0h] +
test eax eax +
jz loc_4040EB  +
lea edi [esp+3Ch+var_10] +
lea esi [esp+3Ch+var_14] +
jmp loc_404016  +
mov eax [ebx+8F0h] +
mov byte ptr [esp+3Ch+var_14] 72h +
mov [esp+3Ch+var_2C] 1 +
mov [esp+3Ch+var_30] edi +
mov [esp+3Ch+var_34] 1 +
mov [esp+3Ch+var_38] esi +
mov [esp+3Ch+var_3C] ebx +
call eax  +
cmp byte ptr [esp+3Ch+var_10] 0 +
js loc_404010  +
mov eax [esp+3Ch+arg_8] +
mov ecx [esp+3Ch+arg_C] +
mov [esp+3Ch+var_3C] 0 +
lea edx [eax+50h] +
mov eax ebx +
call sub_403A60  +
mov ecx [esp+3Ch+arg_10] +
mov eax [ebx+8F0h] +
mov byte ptr [esp+3Ch+var_14] 20h +
mov [esp+3Ch+var_38] esi +
mov [esp+3Ch+var_3C] ebx +
mov [esp+3Ch+var_2C] 1 +
mov [esp+3Ch+var_30] ecx +
mov [esp+3Ch+var_34] 1 +
call eax  +
cmp eax 0FFFFFFFFh +
setz al  +
add esp 3Ch +
movzx eax al +
pop ebx  +
neg eax  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+3Ch+arg_8] +
mov ebp [eax+80h] +
jmp loc_403F13  +
lea edi [esp+3Ch+var_10] +
lea esi [esp+3Ch+var_14] +
jmp loc_403F74  +
mov eax ds:dword_486584 +
add ebx 54h +
mov [esp+3Ch+var_30] ebx +
mov [esp+3Ch+var_38] offset aSErrorSProgr_1 +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_403FEC  +
mov eax 0FFFFFFFFh +
jmp loc_403FEC  +
mov eax ds:dword_486584 +
add ebx 54h +
mov [esp+3Ch+var_30] ebx +
mov [esp+3Ch+var_38] offset aSErrorSProgr_2 +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_403FEC  +
***
mov eax [esp+arg_0] +
mov ecx [eax+44h] +
lea edx [ecx-1] +
test edx edx +
jle loc_40414B  +
mov eax [eax+78h] +
cmp byte ptr [eax+ecx-1] 0FFh +
jz loc_404146  +
jmp loc_404150  +
cmp byte ptr [eax+edx] 0FFh +
jnz loc_404150  +
sub edx 1 +
jnz loc_404140  +
xor eax eax +
retn   +
lea eax [edx+1] +
add edx 2 +
test al 1 +
cmovnz eax edx +
retn   +
***
push esi  +
push ebx  +
sub esp 3Ch +
mov edi [esp+3Ch+arg_0] +
mov esi [esp+3Ch+arg_8] +
mov ecx [edi+8ECh] +
test ecx ecx +
jz loc_4042A3  +
mov eax [esi+0A4h] +
test eax eax +
mov [esp+3Ch+var_20] eax +
jz loc_4042CE  +
mov edx [esi+98h] +
test edx edx +
jz loc_404290  +
shr [esp+3Ch+arg_C] 1 +
mov eax [edi+8C0h] +
lea ebx [esp+3Ch+var_14] +
mov [esp+3Ch+var_38] 1 +
mov [esp+3Ch+var_3C] edi +
call eax  +
mov eax [edi+8BCh] +
mov [esp+3Ch+var_38] 0 +
mov [esp+3Ch+var_3C] edi +
call eax  +
mov ebp [esi+0A0h] +
test ebp ebp +
jz loc_404283  +
mov [esp+3Ch+var_3C] ebp +
mov [esp+3Ch+var_38] ebx +
mov [esp+3Ch+var_14] 0 +
call sub_4075B0  +
mov eax [esp+3Ch+arg_C] +
mov [esp+3Ch+var_3C] ebp +
lea ebp [esp+3Ch+var_10] +
mov [esp+3Ch+var_38] ebx +
mov [esp+3Ch+var_34] eax +
call sub_407620  +
mov eax [edi+8ECh] +
mov [esp+3Ch+var_34] ebp +
mov [esp+3Ch+var_38] ebx +
mov [esp+3Ch+var_3C] edi +
call eax  +
mov eax [esp+3Ch+var_20] +
mov [esp+3Ch+var_38] ebx +
mov [esp+3Ch+var_14] 0 +
mov [esp+3Ch+var_3C] eax +
call sub_4075B0  +
mov ecx [esp+3Ch+arg_C] +
mov eax [esp+3Ch+var_20] +
mov [esp+3Ch+var_38] ebx +
mov [esp+3Ch+var_34] ecx +
mov [esp+3Ch+var_3C] eax +
call sub_407620  +
mov eax [edi+8ECh] +
mov [esp+3Ch+var_34] ebp +
mov [esp+3Ch+var_38] ebx +
mov [esp+3Ch+var_3C] edi +
call eax  +
mov eax [esi+58h] +
mov [esp+3Ch+var_3C] eax +
call sub_459150  +
mov eax [edi+8C0h] +
mov [esp+3Ch+var_38] 0 +
mov [esp+3Ch+var_3C] edi +
call eax  +
xor eax eax +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
lea ebp [esp+3Ch+var_10] +
jmp loc_404218  +
mov eax [esi+88h] +
test eax eax +
jnz loc_40419D  +
jmp loc_4041A1  +
mov eax ds:dword_486584 +
lea edx [edi+54h] +
mov [esp+3Ch+var_30] edx +
mov [esp+3Ch+var_38] offset aSErrorSProgr_0 +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_40427B  +
mov [esp+3Ch+var_34] esi +
mov [esp+3Ch+var_38] offset aAvr_write_page +
mov [esp+3Ch+var_3C] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_40427B  +
***
push esi  +
push ebx  +
sub esp 6Ch +
mov eax [esp+6Ch+arg_10] +
mov ebp [esp+6Ch+arg_0] +
mov ebx [esp+6Ch+arg_8] +
mov [esp+6Ch+var_38] eax +
mov [esp+6Ch+var_39] al +
mov eax [ebp+8ECh] +
test eax eax +
jz loc_4049D1  +
mov eax [esp+6Ch+arg_4] +
mov eax [eax+84h] +
test ah 8 +
jz loc_404490  +
mov eax [ebp+8F0h] +
test eax eax +
jz loc_404A02  +
mov edi offset aFlash_1 +
mov ecx 6 +
mov esi ebx +
cmps   +
jz loc_404979  +
mov edx [esp+6Ch+arg_C] +
add edx [ebx+50h] +
and edx 1 +
jz loc_404376  +
jmp loc_4049A5  +
mov eax [ebp+8F0h] +
lea edi [esp+6Ch+var_14] +
lea esi [esp+6Ch+var_18] +
mov byte ptr [esp+6Ch+var_18] 72h +
mov [esp+6Ch+var_5C] 1 +
mov [esp+6Ch+var_60] edi +
mov [esp+6Ch+var_64] 1 +
mov [esp+6Ch+var_68] esi +
mov [esp+6Ch+var_6C] ebp +
call eax  +
cmp byte ptr [esp+6Ch+var_14] 0 +
js loc_404370  +
mov edi offset aFuse_0 +
mov ecx 5 +
mov esi ebx +
cmps   +
jz loc_404810  +
lea edi [ebx+50h] +
lea esi [esp+6Ch+var_1C] +
mov ecx [esp+6Ch+arg_C] +
mov edx edi +
mov eax ebp +
mov [esp+6Ch+var_6C] 1Dh +
call sub_403A60  +
mov ebx [esp+6Ch+var_38] +
mov eax [ebp+8F0h] +
mov byte ptr [esp+6Ch+var_1C] 64h +
mov [esp+6Ch+var_5C] 0 +
mov byte ptr [esp+6Ch+var_1C+1] bl +
mov [esp+6Ch+var_60] 0 +
mov [esp+6Ch+var_64] 2 +
mov [esp+6Ch+var_68] esi +
mov [esp+6Ch+var_6C] ebp +
call eax  +
mov eax [ebp+8F0h] +
mov byte ptr [esp+6Ch+var_1C] 64h +
mov byte ptr [esp+6Ch+var_1C+1] bl +
mov [esp+6Ch+var_5C] 0 +
mov [esp+6Ch+var_60] 0 +
mov [esp+6Ch+var_64] 2 +
mov [esp+6Ch+var_68] esi +
mov [esp+6Ch+var_6C] ebp +
call eax  +
lea esi [esi+0] +
mov eax [ebp+8F0h] +
lea edx [esp+6Ch+var_14] +
lea edi [esp+6Ch+var_18] +
mov byte ptr [esp+6Ch+var_18] 72h +
mov [esp+6Ch+var_5C] 1 +
mov [esp+6Ch+var_60] edx +
mov [esp+6Ch+var_64] 1 +
mov [esp+6Ch+var_68] edi +
mov [esp+6Ch+var_6C] ebp +
call eax  +
cmp byte ptr [esp+6Ch+var_14] 0 +
js loc_404440  +
mov [esp+6Ch+var_4C] 0 +
mov eax [esp+6Ch+var_4C] +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edi [ebx+40h] +
test edi edi +
jnz loc_4044A0  +
test ah 10h +
jz loc_4047C2  +
mov [esp+6Ch+var_30] 0 +
mov edi [ebx+90h] +
test edi edi +
jz loc_4048DB  +
test byte ptr [esp+6Ch+arg_C] 1 +
jz loc_4044C6  +
mov edi [ebx+94h] +
mov eax [esp+6Ch+arg_C] +
shr eax 1 +
mov [esp+6Ch+var_4C] eax +
test edi edi +
jz loc_40496C  +
mov eax [ebp+8C0h] +
lea esi [esp+6Ch+var_1C] +
mov [esp+6Ch+var_68] 1 +
mov [esp+6Ch+var_6C] ebp +
call eax  +
mov eax [ebp+8BCh] +
mov [esp+6Ch+var_68] 0 +
mov [esp+6Ch+var_6C] ebp +
call eax  +
mov [esp+6Ch+var_68] esi +
mov [esp+6Ch+var_6C] edi +
mov [esp+6Ch+var_1C] 0 +
call sub_4075B0  +
movzx eax word ptr [esp+6Ch+var_4C] +
mov [esp+6Ch+var_68] esi +
mov [esp+6Ch+var_6C] edi +
mov [esp+6Ch+var_64] eax +
call sub_407620  +
movzx eax byte ptr [esp+6Ch+var_38] +
mov [esp+6Ch+var_68] esi +
mov [esp+6Ch+var_6C] edi +
mov [esp+6Ch+var_64] eax +
call sub_4076A0  +
mov eax [ebp+8ECh] +
lea edx [esp+6Ch+var_18] +
mov [esp+6Ch+var_64] edx +
mov [esp+6Ch+var_68] esi +
mov [esp+6Ch+var_6C] ebp +
call eax  +
mov eax [ebx+40h] +
test eax eax +
mov [esp+6Ch+var_4C] eax +
jnz loc_4048A0  +
mov ecx [esp+6Ch+var_30] +
lea esi [esp+4Eh] +
mov [esp+6Ch+var_34] 6 +
lea edi [esp+6Ch+var_14] +
test ecx ecx +
jz loc_4048B8  +
movzx eax [esp+6Ch+var_39] +
cmp [ebx+60h] al +
jz loc_404661  +
cmp [ebx+61h] al +
jz loc_404661  +
mov [esp+6Ch+var_68] 0 +
mov [esp+6Ch+var_6C] edi +
call sub_459290  +
imul eax [esp+6Ch+var_14] +
mov [esp+6Ch+var_38] eax +
mov eax [esp+6Ch+var_10] +
add [esp+6Ch+var_38] eax +
jmp loc_4045FA  +
mov [esp+6Ch+var_68] 0 +
mov [esp+6Ch+var_6C] edi +
call sub_459290  +
movzx ecx [esp+6Ch+var_39] +
imul eax [esp+6Ch+var_14] +
add eax [esp+6Ch+var_10] +
cmp [esp+6Ch+var_1E] cl +
jz loc_4046F0  +
sub eax [esp+6Ch+var_38] +
cmp eax [ebx+58h] +
jnb loc_4046A8  +
mov edx [esp+6Ch+arg_C] +
mov ecx [esp+6Ch+arg_4] +
mov eax [ebp+914h] +
mov [esp+6Ch+var_5C] esi +
mov [esp+6Ch+var_60] edx +
mov [esp+6Ch+var_64] ebx +
mov [esp+6Ch+var_68] ecx +
mov [esp+6Ch+var_6C] ebp +
call eax  +
test eax eax +
jz loc_4045C2  +
mov eax [ebp+8C0h] +
mov [esp+6Ch+var_6C] ebp +
mov [esp+6Ch+var_68] 0 +
call eax  +
mov eax [ebp+8BCh] +
mov [esp+6Ch+var_6C] ebp +
mov [esp+6Ch+var_68] 1 +
call eax  +
mov [esp+6Ch+var_4C] 0FFFFFFFCh +
mov eax [esp+6Ch+var_4C] +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx+58h] +
mov [esp+6Ch+var_6C] eax +
call sub_459150  +
mov ecx [esp+6Ch+arg_C] +
mov edx [esp+6Ch+arg_4] +
mov eax [ebp+914h] +
mov [esp+6Ch+var_5C] esi +
mov [esp+6Ch+var_60] ecx +
mov [esp+6Ch+var_64] ebx +
mov [esp+6Ch+var_68] edx +
mov [esp+6Ch+var_6C] ebp +
call eax  +
test eax eax +
jnz loc_404939  +
movzx eax [esp+6Ch+var_39] +
cmp [esp+6Ch+var_1E] al +
jz loc_4046F0  +
mov edx [ebx+5Ch] +
test edx edx +
jnz loc_404710  +
sub [esp+6Ch+var_34] 1 +
jnz loc_404585  +
mov eax [ebp+8C0h] +
mov [esp+6Ch+var_68] 0 +
mov [esp+6Ch+var_6C] ebp +
call eax  +
mov eax [ebp+8BCh] +
mov [esp+6Ch+var_68] 1 +
mov [esp+6Ch+var_6C] ebp +
call eax  +
mov [esp+6Ch+var_4C] 0FFFFFFFAh +
jmp loc_40447F  +
mov eax [ebp+8C0h] +
mov [esp+6Ch+var_6C] ebp +
mov [esp+6Ch+var_68] 0 +
call eax  +
mov eax [esp+6Ch+var_4C] +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebp+8C0h] +
mov [esp+6Ch+var_68] 0 +
mov [esp+6Ch+var_6C] ebp +
call eax  +
mov eax ds:dword_486584 +
mov [esp+6Ch+var_68] offset aSThisDeviceMus +
mov [esp+6Ch+var_6C] 0 +
mov [esp+6Ch+var_64] eax +
call sub_401740  +
mov eax [ebp+180h] +
test eax eax +
jz loc_4046AF  +
mov eax ds:dword_486584 +
mov [esp+6Ch+var_68] offset aSAttemptingToD +
mov [esp+6Ch+var_6C] 0 +
mov [esp+6Ch+var_64] eax +
call sub_401740  +
mov eax [ebp+8DCh] +
mov [esp+6Ch+var_6C] ebp +
call eax  +
mov [esp+6Ch+var_6C] 3D090h +
call sub_459150  +
mov esi [esp+6Ch+arg_4] +
mov eax [ebp+8C8h] +
mov [esp+6Ch+var_6C] ebp +
mov [esp+6Ch+var_68] esi +
call eax  +
test eax eax +
js loc_404A33  +
mov eax ds:dword_486584 +
mov [esp+6Ch+var_68] offset aSDeviceWasSucc +
mov [esp+6Ch+var_6C] 0 +
mov [esp+6Ch+var_64] eax +
call sub_401740  +
jmp loc_40447F  +
mov esi [esp+6Ch+arg_C] +
lea edx [esp+4Fh] +
mov eax [ebp+914h] +
mov [esp+6Ch+var_5C] edx +
mov [esp+6Ch+var_64] ebx +
mov [esp+6Ch+var_60] esi +
mov esi [esp+6Ch+arg_4] +
mov [esp+6Ch+var_6C] ebp +
mov [esp+6Ch+var_68] esi +
call eax  +
test eax eax +
jz loc_40491D  +
cmp eax 0FFFFFFFFh +
jz loc_4044A0  +
mov [esp+6Ch+var_4C] 0FFFFFFFEh +
jmp loc_40447F  +
mov ecx [esp+6Ch+arg_C] +
lea edi [ebx+50h] +
mov eax ebp +
mov [esp+6Ch+var_6C] 14h +
mov edx edi +
lea esi [esp+6Ch+var_1C] +
or ecx 1 +
call sub_403A60  +
mov eax [ebp+8F0h] +
mov byte ptr [esp+6Ch+var_1C] 60h +
mov byte ptr [esp+6Ch+var_1C+1] 0FFh +
mov [esp+6Ch+var_5C] 0 +
mov [esp+6Ch+var_60] 0 +
mov [esp+6Ch+var_64] 2 +
mov [esp+6Ch+var_68] esi +
mov [esp+6Ch+var_6C] ebp +
call eax  +
mov eax [ebp+8F0h] +
lea edx [esp+6Ch+var_18] +
lea ebx [esp+6Ch+var_14] +
mov byte ptr [esp+6Ch+var_18] 72h +
mov [esp+6Ch+var_5C] 1 +
mov [esp+6Ch+var_60] ebx +
mov [esp+6Ch+var_64] 1 +
mov [esp+6Ch+var_68] edx +
mov [esp+6Ch+var_6C] ebp +
call eax  +
cmp byte ptr [esp+6Ch+var_14] 0 +
js loc_404862  +
jmp loc_4043C2  +
mov eax [ebp+8C0h] +
mov [esp+6Ch+var_68] 0 +
mov [esp+6Ch+var_6C] ebp +
call eax  +
jmp loc_404477  +
mov eax [ebx+58h] +
mov [esp+6Ch+var_6C] eax +
call sub_459150  +
mov eax [ebp+8C0h] +
mov [esp+6Ch+var_68] 0 +
mov [esp+6Ch+var_6C] ebp +
call eax  +
jmp loc_40447F  +
mov esi [ebx+40h] +
test esi esi +
jz loc_404905  +
mov edi [ebx+98h] +
test edi edi +
jz loc_404905  +
test byte ptr [esp+6Ch+arg_C] 1 +
jz loc_4044C6  +
mov edi [ebx+9Ch] +
jmp loc_4044C6  +
movzx eax word ptr [esp+6Ch+arg_C] +
mov edi [ebx+84h] +
mov word ptr [esp+6Ch+var_4C] ax +
jmp loc_4044D3  +
movzx eax byte ptr [esp+6Ch+var_38] +
cmp [esp+6Ch+var_1D] al +
jz loc_404477  +
mov [esp+6Ch+var_30] 1 +
jmp loc_4044A8  +
mov eax [ebp+8C0h] +
mov [esp+6Ch+var_68] 0 +
mov [esp+6Ch+var_6C] ebp +
call eax  +
mov eax [ebp+8BCh] +
mov [esp+6Ch+var_68] 0 +
mov [esp+6Ch+var_6C] ebp +
call eax  +
mov [esp+6Ch+var_4C] 0FFFFFFFBh +
jmp loc_40447F  +
mov [esp+6Ch+var_4C] 0FFFFFFFFh +
jmp loc_40447F  +
mov eax [esp+6Ch+arg_4] +
mov [esp+6Ch+var_68] offset aWritingAByteTo +
mov [esp+6Ch+var_6C] 0 +
mov [esp+6Ch+var_64] eax +
call sub_401740  +
mov [esp+6Ch+var_4C] 0FFFFFFFFh +
jmp loc_40447F  +
mov eax [esp+6Ch+arg_4] +
mov [esp+6Ch+var_68] offset aWritingAByte_0 +
mov [esp+6Ch+var_6C] 0 +
mov [esp+6Ch+var_64] eax +
call sub_401740  +
mov [esp+6Ch+var_4C] 0FFFFFFFFh +
jmp loc_40447F  +
lea eax [ebp+54h] +
mov [esp+6Ch+var_60] eax +
mov eax ds:dword_486584 +
mov [esp+6Ch+var_68] offset aSErrorSProgr_3 +
mov [esp+6Ch+var_6C] 0 +
mov [esp+6Ch+var_64] eax +
call sub_401740  +
mov [esp+6Ch+var_4C] 0FFFFFFFFh +
jmp loc_40447F  +
lea eax [ebp+54h] +
mov [esp+6Ch+var_60] eax +
mov eax ds:dword_486584 +
mov [esp+6Ch+var_68] offset aSErrorSProgr_2 +
mov [esp+6Ch+var_6C] 0 +
mov [esp+6Ch+var_64] eax +
call sub_401740  +
mov [esp+6Ch+var_4C] 0FFFFFFFFh +
jmp loc_40447F  +
mov [esp+6Ch+var_60] eax +
mov eax ds:dword_486584 +
mov [esp+6Ch+var_68] offset aSInitializat_0 +
mov [esp+6Ch+var_6C] 0 +
mov [esp+6Ch+var_64] eax +
call sub_401740  +
mov eax ds:dword_486584 +
mov [esp+6Ch+var_60] ebx +
mov [esp+6Ch+var_68] offset aSCanTReInitial +
mov [esp+6Ch+var_6C] 0 +
mov [esp+6Ch+var_64] eax +
call sub_401740  +
mov eax ds:dword_486584 +
mov [esp+6Ch+var_68] offset aSYouMustManual +
mov [esp+6Ch+var_6C] 0 +
mov [esp+6Ch+var_5C] eax +
mov [esp+6Ch+var_60] eax +
mov [esp+6Ch+var_64] eax +
call sub_401740  +
mov [esp+6Ch+var_4C] 0FFFFFFFDh +
jmp loc_40447F  +
***
mov edi offset aFuse_0 +
push esi  +
push ebx  +
sub esp 3Ch +
lea eax [esp+44h+var_18+1] +
mov ebx [esp+44h+arg_10] +
lea edx [esp+44h+var_18+2] +
mov [esp+44h+var_3C] eax +
lea ebp [esp+44h+var_18+3] +
lea eax [esp+2Ch] +
mov [esp+44h+var_38] edx +
mov [esp+44h+var_34] ebp +
mov [esp+44h+var_40] eax +
mov [esp+44h+var_44] 0 +
mov [esp+44h+var_28] edx +
call sub_4094E0  +
mov esi [esp+44h+arg_8] +
mov ecx 5 +
mov edx [esp+44h+var_28] +
cmps   +
jnz loc_404B05  +
mov byte ptr [esp+44h+var_18+3] bl +
mov esi [esp+44h+arg_8] +
mov edi offset aLfuse_0 +
mov ecx 6 +
cmps   +
jnz loc_404B1B  +
mov byte ptr [esp+44h+var_18] bl +
mov esi [esp+44h+arg_8] +
mov edi offset aHfuse_0 +
mov ecx 6 +
cmps   +
jnz loc_404B31  +
mov byte ptr [esp+44h+var_18+1] bl +
mov esi [esp+44h+arg_8] +
mov edi offset aEfuse_0 +
mov ecx 6 +
cmps   +
jnz loc_404B47  +
mov byte ptr [esp+44h+var_18+2] bl +
lea eax [esp+44h+var_18+1] +
movzx ebx bl +
mov [esp+44h+var_3C] eax +
lea eax [esp+44h+var_18] +
mov [esp+44h+var_34] ebp +
mov [esp+44h+var_38] edx +
mov [esp+44h+var_40] eax +
mov [esp+44h+var_44] 1 +
call sub_4094E0  +
mov edx [esp+44h+arg_C] +
mov eax [esp+44h+arg_0] +
mov esi [esp+44h+arg_0] +
mov eax [eax+910h] +
mov [esp+44h+var_34] ebx +
mov ebx [esp+44h+arg_8] +
mov [esp+44h+var_38] edx +
mov edx [esp+44h+arg_4] +
mov [esp+44h+var_44] esi +
mov [esp+44h+var_3C] ebx +
mov [esp+44h+var_40] edx +
call eax  +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push edi  +
push esi  +
push ebx  +
sub esp 4 +
mov ebx [esp+4+arg_0] +
cmp dword ptr [ebx+44h] 1 +
jle loc_404BD0  +
add esp 4 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edx 1 +
xor edi edi +
xor eax eax +
jmp loc_404BE3  +
add edx 1 +
mov ecx [ebx+edx*4+7Ch] +
test ecx ecx +
jz loc_404BF7  +
mov esi edx +
sub esi 1 +
jz loc_404C06  +
cmp esi 1 +
jz loc_404C32  +
cmp edx 0Ch +
jnz loc_404BE0  +
add esp 4 +
and eax edi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ebp ecx +
mov [esp+4+var_4] 7 +
mov esi [ebp+54h] +
xor ecx ecx +
test esi esi +
setnz cl  +
sub ebp 0Ch +
mov esi ecx +
movzx ecx byte ptr [esp+4+var_4] +
sub [esp+4+var_4] 1 +
shl esi cl +
or eax esi +
cmp [esp+4+var_4] 0FFFFFFFFh +
jnz loc_404C0F  +
jmp loc_404BF7  +
mov esi ecx +
mov [esp+4+var_4] 7 +
xor ecx ecx +
cmp dword ptr [esi+54h] 1 +
setnbe cl  +
sub esi 0Ch +
mov ebp ecx +
movzx ecx byte ptr [esp+4+var_4] +
sub [esp+4+var_4] 1 +
shl ebp cl +
or edi ebp +
cmp [esp+4+var_4] 0FFFFFFFFh +
jnz loc_404C3B  +
jmp loc_404BE0  +
***
sub esp 4 +
mov eax [esp+4+arg_0] +
mov ebx [esp+4+arg_4] +
mov esi [esp+4+arg_8] +
test eax eax +
jz loc_404C90  +
mov [esp+4+var_4] eax +
xor ebx esi +
call sub_404BB0  +
test bl al +
setnz al  +
add esp 4 +
movzx eax al +
pop ebx  +
pop esi  +
retn   +
xor ebx esi +
mov eax 0FFFFFFFFh +
test bl al +
setnz al  +
add esp 4 +
movzx eax al +
pop ebx  +
pop esi  +
retn   +
***
push esi  +
push ebx  +
sub esp 4Ch +
mov ebx [esp+4Ch+arg_0] +
mov eax [esp+4Ch+arg_8] +
mov ebp [esp+4Ch+arg_4] +
mov esi [esp+4Ch+arg_C] +
mov [esp+4Ch+var_4C] ebx +
mov [esp+4Ch+var_48] eax +
call sub_407980  +
test eax eax +
mov [esp+4Ch+var_10] eax +
jz loc_404E40  +
mov eax [esp+4Ch+arg_8] +
mov [esp+4Ch+var_4C] ebp +
mov [esp+4Ch+var_48] eax +
call sub_407980  +
test eax eax +
mov edi eax +
jz loc_404E6A  +
mov eax [esp+4Ch+var_10] +
mov edx [edi+78h] +
mov ebx [eax+44h] +
mov ebp [eax+78h] +
mov [esp+4Ch+var_14] edx +
cmp ebx esi +
jl loc_404DB0  +
test esi esi +
jle loc_404E39  +
xor ebx ebx +
lea esi [esi+0] +
mov eax [edi+7Ch] +
test byte ptr [eax+ebx] 1 +
jz loc_404D9B  +
mov eax [esp+4Ch+var_14] +
movzx edx byte ptr [ebp+ebx+0] +
movzx ecx byte ptr [eax+ebx] +
mov [esp+4Ch+var_20] edx +
cmp dl cl +
mov [esp+4Ch+var_1C] ecx +
jz loc_404D9B  +
mov eax [esp+4Ch+var_10] +
mov [esp+4Ch+var_4C] eax +
call sub_404BB0  +
mov ecx [esp+4Ch+var_1C] +
mov edx [esp+4Ch+var_20] +
mov [esp+4Ch+var_15] al +
mov eax ecx +
movzx ecx cl +
xor eax edx +
test [esp+4Ch+var_15] al +
jnz loc_404DF8  +
mov eax [esp+4Ch+arg_8] +
movzx edx dl +
mov [esp+4Ch+var_38] ecx +
mov [esp+4Ch+var_3C] edx +
mov [esp+4Ch+var_48] offset aSWarningInvali +
mov [esp+4Ch+var_40] eax +
mov eax ds:dword_486584 +
mov [esp+4Ch+var_4C] 0 +
mov [esp+4Ch+var_44] eax +
call sub_401740  +
add ebx 1 +
cmp ebx esi +
jnz loc_404D20  +
mov eax ebx +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+4Ch+arg_8] +
mov [esp+4Ch+var_40] esi +
mov esi ebx +
mov [esp+4Ch+var_2C] ebx +
mov [esp+4Ch+var_30] offset byte_4865A0 +
mov [esp+4Ch+var_38] eax +
mov eax ds:dword_486584 +
mov [esp+4Ch+var_34] ebx +
mov [esp+4Ch+var_3C] offset byte_4865A0 +
mov [esp+4Ch+var_48] offset aSWarningReques +
mov [esp+4Ch+var_44] eax +
mov [esp+4Ch+var_4C] 0 +
call sub_401740  +
jmp loc_404D12  +
mov eax ds:dword_486584 +
movzx edx dl +
mov [esp+4Ch+var_40] ebx +
mov [esp+4Ch+var_34] ecx +
mov [esp+4Ch+var_38] edx +
mov [esp+4Ch+var_3C] offset byte_4865A0 +
mov [esp+4Ch+var_44] eax +
mov [esp+4Ch+var_48] offset aSVerificationE +
mov [esp+4Ch+var_4C] 0 +
call sub_401740  +
add esp 4Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax esi +
jmp loc_404DA8  +
mov [esp+4Ch+var_40] ebx +
mov eax [esp+4Ch+arg_8] +
mov [esp+4Ch+var_48] offset aAvr_verifyMemo +
mov [esp+4Ch+var_4C] 0 +
mov [esp+4Ch+var_44] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_404DA8  +
mov [esp+4Ch+var_40] ebp +
jmp loc_404E44  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [esp+54h] +
mov dword ptr [esp+4] offset aEeprom_1 +
mov edi [esp+50h] +
mov [esp] eax +
call sub_407980  +
test eax eax +
mov ebp eax +
jz loc_404F21  +
mov esi 4 +
xor ebx ebx +
lea eax [esp+2Fh] +
mov ecx [edi+914h] +
mov [esp+10h] eax +
mov eax [ebp+44h] +
mov [esp+8] ebp +
mov [esp] edi +
sub eax esi +
mov [esp+0Ch] eax +
mov eax [esp+54h] +
mov [esp+4] eax +
call ecx  +
test eax eax +
js loc_404EF3  +
mov eax ebx +
movzx ebx byte ptr [esp+2Fh] +
shl eax 8 +
or ebx eax +
sub esi 1 +
jnz loc_404EA0  +
mov eax [esp+58h] +
cmp ebx 0FFFFFFFFh +
cmovz ebx esi +
mov [eax] ebx +
xor eax eax +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+0Ch] eax +
mov eax ds:dword_486584 +
mov dword ptr [esp+4] offset aSWarningCanTRe +
mov dword ptr [esp] 0 +
mov [esp+8] eax +
call sub_401740  +
add esp 3Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax 0FFFFFFFFh +
jmp loc_404EEB  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov edi [esp+44h] +
mov edx [esp+48h] +
mov dword ptr [esp+4] offset aEeprom_1 +
mov [esp] edi +
mov [esp+1Ch] edx +
call sub_407980  +
test eax eax +
mov ebp eax +
jz loc_404FDE  +
mov edx [esp+1Ch] +
mov ebx 1 +
mov esi edx +
movzx edx dl +
mov eax [esp+40h] +
mov [esp+10h] edx +
mov edx [ebp+44h] +
sar esi 8 +
mov [esp+8] ebp +
mov [esp+4] edi +
mov [esp] eax +
sub edx ebx +
mov [esp+0Ch] edx +
call sub_404AB0  +
test eax eax +
js loc_404FB0  +
add ebx 1 +
cmp ebx 5 +
jz loc_404FA0  +
mov edx esi +
jmp loc_404F66  +
***
xor eax eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+0Ch] eax +
mov eax ds:dword_486584 +
mov dword ptr [esp+4] offset aSWarningCanTWr +
mov dword ptr [esp] 0 +
mov [esp+8] eax +
call sub_401740  +
add esp 2Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax 0FFFFFFFFh +
jmp loc_404FA2  +
***
mov eax [esp+arg_0] +
mov edx [eax+8E4h] +
jmp edx  +
***
mov edx [esp+arg_0] +
mov eax [edx+8E8h] +
test eax eax +
jz loc_405010  +
jmp eax  +
mov eax 0FFFFFFFFh +
retn   +
***
mov esi 64h +
push ebx  +
sub esp 30h +
mov ecx [esp+34h+arg_4] +
mov edi [esp+34h+arg_8] +
test ecx ecx +
jle loc_405041  +
imul eax [esp+34h+arg_0] +
cdq   +
idiv  ecx +
mov esi eax +
mov eax ds:dword_487140 +
test eax eax +
jz loc_4050BB  +
lea eax [esp+34h+var_C] +
mov dword ptr [esp+34h+var_30] 0 +
mov [esp+34h+var_34] eax +
call sub_459290  +
test edi edi +
fild  [esp+34h+var_C] +
fild  [esp+34h+var_8] +
fdiv  ds:flt_464ECC +
faddp st(1) st +
jz loc_4050A1  +
fst  ds:dbl_484160 +
fld  st +
fsub st st(1) +
fxch  st(1) +
mov ds:dword_484168 0 +
mov [esp+34h+var_28] edi +
fstp  [esp+34h+var_1C] +
fstp  [esp+34h+var_30] +
mov [esp+34h+var_34] esi +
call ds:dword_487140  +
fld  [esp+34h+var_1C] +
cmp esi 64h +
mov ebx 64h +
cmovle ebx esi +
cmp ds:dword_484168 ebx +
jl loc_4050D3  +
fstp  st +
cmp ebx 64h +
jz loc_4050C2  +
add esp 30h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov ds:dword_484168 0 +
add esp 30h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
fsub  ds:dbl_484160 +
mov ds:dword_484168 ebx +
mov [esp+34h+var_28] edi +
mov [esp+34h+var_34] ebx +
fstp  [esp+34h+var_30] +
call ds:dword_487140  +
cmp ebx 64h +
jnz loc_4050BB  +
jmp loc_4050C2  +
***
push esi  +
push ebx  +
sub esp 4Ch +
mov eax [esp+4Ch+arg_8] +
mov esi [esp+4Ch+arg_C] +
mov [esp+4Ch+var_48] eax +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_4C] eax +
call sub_407980  +
test esi esi +
mov ebx eax +
jz loc_405612  +
mov eax [esp+4Ch+arg_8] +
mov [esp+4Ch+var_4C] esi +
mov [esp+4Ch+var_48] eax +
call sub_407980  +
mov ebp eax +
test ebx ebx +
jz loc_4056B7  +
mov eax [ebx+78h] +
mov edx [ebx+44h] +
mov [esp+4Ch+var_48] 0FFh +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] edx +
call memset  +
mov eax [esp+4Ch+arg_4] +
test byte ptr [eax+85h] 8 +
jz loc_4052C0  +
mov esi [ebx+48h] +
test esi esi +
jz loc_4052C0  +
mov eax [esp+4Ch+arg_0] +
mov eax [eax+8F0h] +
test eax eax +
jz loc_4052C0  +
lea esi [esp+4Ch+var_11] +
mov edi [esp+4Ch+arg_0] +
jmp loc_40519B  +
mov eax [edi+8F0h] +
lea ecx [esp+4Ch+var_11+1] +
mov byte ptr [esp+4Ch+var_11] 72h +
mov [esp+4Ch+var_3C] 1 +
mov [esp+4Ch+var_40] ecx +
mov [esp+4Ch+var_44] 1 +
mov [esp+4Ch+var_48] esi +
mov [esp+4Ch+var_4C] edi +
call eax  +
cmp byte ptr [esp+4Ch+var_11+1] 0 +
js loc_405195  +
lea eax [ebx+50h] +
xor ecx ecx +
mov [esp+4Ch+var_24] eax +
mov edx eax +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_4C] 0 +
call sub_403A60  +
mov ecx [ebx+44h] +
test ecx ecx +
jz loc_405422  +
xor esi esi +
mov [esp+4Ch+var_28] 0 +
jmp loc_405227  +
lea edi [esi+1] +
mov eax [ebx+44h] +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_4C] esi +
mov [esp+4Ch+var_48] eax +
call sub_405020  +
mov eax [ebx+44h] +
cmp eax edi +
jbe loc_4055E9  +
mov esi edi +
test ebp ebp +
jz loc_405234  +
mov eax [ebp+7Ch] +
test byte ptr [eax+esi] 1 +
jz loc_405200  +
cmp [esp+4Ch+var_28] esi +
jz loc_405250  +
mov edx [esp+4Ch+var_24] +
mov ecx esi +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_4C] 0 +
call sub_403A60  +
mov eax [esp+4Ch+arg_0] +
lea edi [esp+4Ch+var_11+1] +
mov byte ptr [esp+4Ch+var_11+1] 24h +
mov eax [eax+8F0h] +
mov [esp+4Ch+var_3C] 1 +
mov edx [ebx+78h] +
mov [esp+4Ch+var_48] edi +
mov edi [esp+4Ch+arg_0] +
mov [esp+4Ch+var_44] 1 +
add edx esi +
mov [esp+4Ch+var_4C] edi +
lea edi [esi+1] +
mov [esp+4Ch+var_40] edx +
call eax  +
mov [esp+4Ch+var_28] edi +
cmp eax 0FFFFFFFFh +
jnz loc_405203  +
mov [esp+4Ch+var_44] esi +
mov [esp+4Ch+var_48] offset aAvr_readErrorR +
mov [esp+4Ch+var_4C] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_405577  +
mov eax [esp+4Ch+arg_0] +
mov edx [eax+904h] +
test edx edx +
jz loc_40548C  +
mov esi [ebx+48h] +
test esi esi +
jz loc_40548C  +
mov eax [ebx+44h] +
mov [esp+4Ch+var_28] 0 +
mov [esp+4Ch+var_24] eax +
xor eax eax +
cmp eax [esp+4Ch+var_24] +
jnb loc_405333  +
lea edi [eax+esi] +
cmp eax edi +
jnb loc_40532B  +
test ebp ebp +
jz loc_405580  +
mov ecx [ebx+7Ch] +
test byte ptr [ecx+eax] 1 +
jnz loc_405580  +
lea eax [ecx+eax+1] +
add ecx edi +
jmp loc_405327  +
movzx edx byte ptr [eax] +
add eax 1 +
and edx 1 +
jnz loc_405580  +
cmp eax ecx +
jnz loc_405318  +
mov eax edi +
cmp eax [esp+4Ch+var_24] +
jb loc_4052F4  +
mov eax 1 +
xor edi edi +
mov [esp+4Ch+var_20] ebp +
mov ebp eax +
mov eax [esp+4Ch+var_24] +
cmp eax edi +
jbe loc_4053DD  +
lea esi [esi+0] +
lea ecx [edi+esi] +
cmp ecx edi +
jbe loc_40538B  +
mov eax [esp+4Ch+var_20] +
test eax eax +
jz loc_405430  +
mov eax [eax+7Ch] +
test byte ptr [eax+edi] 1 +
jnz loc_405430  +
lea edx [eax+edi+1] +
add eax ecx +
jmp loc_405387  +
movzx ecx byte ptr [edx] +
add edx 1 +
and ecx 1 +
jnz loc_405430  +
cmp edx eax +
jnz loc_405378  +
mov eax edi +
xor edx edx +
div  esi +
mov [esp+4Ch+var_48] offset aSAvr_readSkipp +
mov [esp+4Ch+var_4C] 3 +
mov [esp+4Ch+var_40] eax +
mov eax ds:dword_486584 +
mov [esp+4Ch+var_44] eax +
call sub_401740  +
mov eax [esp+4Ch+var_28] +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_4C] ebp +
mov [esp+4Ch+var_48] eax +
call sub_405020  +
mov esi [ebx+48h] +
add edi esi +
mov eax [ebx+44h] +
add ebp 1 +
cmp eax edi +
ja loc_405350  +
mov esi ds:_stricmp +
mov [esp+4Ch+var_48] offset aFlash_1 +
mov [esp+4Ch+var_4C] ebx +
call esi  +
test eax eax +
jnz loc_405670  +
mov ecx [ebx+44h] +
lea eax [ecx-1] +
test eax eax +
jle loc_405422  +
mov edx [ebx+78h] +
cmp byte ptr [edx+ecx-1] 0FFh +
jz loc_40541B  +
jmp loc_40558C  +
cmp byte ptr [edx+eax] 0FFh +
jnz loc_40558C  +
sub eax 1 +
nop   +
jnz loc_405411  +
xor eax eax +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+4Ch+arg_0] +
mov eax [eax+904h] +
mov [esp+4Ch+var_38] esi +
mov [esp+4Ch+var_40] esi +
mov esi [esp+4Ch+arg_4] +
mov [esp+4Ch+var_3C] edi +
mov [esp+4Ch+var_44] ebx +
mov [esp+4Ch+var_48] esi +
mov esi [esp+4Ch+arg_0] +
mov [esp+4Ch+var_4C] esi +
call eax  +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_4C] ebp +
mov [esp+4Ch+var_24] eax +
mov eax [esp+4Ch+var_28] +
mov [esp+4Ch+var_48] eax +
call sub_405020  +
mov esi [ebx+48h] +
mov eax [esp+4Ch+var_24] +
add edi esi +
test eax eax +
jns loc_4053CF  +
mov ebp [esp+4Ch+var_20] +
mov edi offset aSignature +
mov ecx 0Ah +
mov esi ebx +
cmps   +
jz loc_405550  +
mov eax [ebx+44h] +
xor esi esi +
mov edi [esp+4Ch+arg_0] +
test eax eax +
jz loc_405508  +
lea esi [esi+0] +
test ebp ebp +
jz loc_4054BD  +
mov eax [ebp+7Ch] +
test byte ptr [eax+esi] 1 +
jz loc_4054E9  +
mov ecx [ebx+78h] +
mov eax [edi+914h] +
mov [esp+4Ch+var_40] esi +
mov [esp+4Ch+var_44] ebx +
add ecx esi +
mov [esp+4Ch+var_3C] ecx +
mov ecx [esp+4Ch+arg_4] +
mov [esp+4Ch+var_4C] edi +
mov [esp+4Ch+var_48] ecx +
call eax  +
test eax eax +
jnz loc_4055A0  +
mov eax [ebx+44h] +
mov [esp+4Ch+var_4C] esi +
add esi 1 +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] eax +
call sub_405020  +
cmp [ebx+44h] esi +
ja loc_4054B0  +
mov edi ds:_stricmp +
mov [esp+4Ch+var_48] offset aFlash_1 +
mov [esp+4Ch+var_4C] ebx +
call edi  +
test eax eax +
jnz loc_405619  +
mov ecx [ebx+44h] +
lea eax [ecx-1] +
test eax eax +
jle loc_405422  +
mov edx [ebx+78h] +
cmp byte ptr [edx+ecx-1] 0FFh +
jz loc_405546  +
jmp loc_40558C  +
cmp byte ptr [edx+eax] 0FFh +
jnz loc_40558C  +
sub eax 1 +
jnz loc_405540  +
jmp loc_405422  +
mov eax [esp+4Ch+arg_0] +
mov eax [eax+918h] +
test eax eax +
jz loc_4054A0  +
mov [esp+4Ch+var_44] ebx +
mov ebx [esp+4Ch+arg_4] +
mov [esp+4Ch+var_48] ebx +
mov ebx [esp+4Ch+arg_0] +
mov [esp+4Ch+var_4C] ebx +
call eax  +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add [esp+4Ch+var_28] 1 +
mov eax edi +
jmp loc_40532D  +
lea edx [eax+1] +
add eax 2 +
test dl 1 +
cmovz eax edx +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+4Ch+var_44] esi +
mov edi eax +
mov [esp+4Ch+var_48] offset aAvr_readErrorR +
mov [esp+4Ch+var_4C] 0 +
call sub_401740  +
mov eax [esp+4Ch+arg_8] +
cmp edi 0FFFFFFFFh +
mov [esp+4Ch+var_44] eax +
jz loc_4056E5  +
mov [esp+4Ch+var_48] offset aReadOperationF +
mov [esp+4Ch+var_4C] 0 +
call sub_401740  +
add esp 4Ch +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
lea edx [eax-1] +
test edx edx +
jle loc_405422  +
mov ecx [ebx+78h] +
cmp byte ptr [ecx+eax-1] 0FFh +
jz loc_405606  +
jmp loc_405660  +
cmp byte ptr [ecx+edx] 0FFh +
jnz loc_405660  +
sub edx 1 +
jnz loc_405600  +
xor eax eax +
jmp loc_405424  +
xor ebp ebp +
jmp loc_40513B  +
mov [esp+4Ch+var_48] offset aApplication_0 +
mov [esp+4Ch+var_4C] ebx +
call edi  +
test eax eax +
jz loc_405523  +
mov [esp+4Ch+var_48] offset aApptable +
mov [esp+4Ch+var_4C] ebx +
call edi  +
test eax eax +
jz loc_405523  +
mov [esp+4Ch+var_48] offset aBoot +
mov [esp+4Ch+var_4C] ebx +
call edi  +
test eax eax +
jz loc_405523  +
mov eax esi +
jmp loc_405577  +
lea eax [edx+1] +
add edx 2 +
test al 1 +
cmovnz eax edx +
jmp loc_405577  +
mov [esp+4Ch+var_48] offset aApplication_0 +
mov [esp+4Ch+var_4C] ebx +
call esi  +
test eax eax +
jz loc_4053F8  +
mov [esp+4Ch+var_48] offset aApptable +
mov [esp+4Ch+var_4C] ebx +
call esi  +
test eax eax +
jz loc_4053F8  +
mov [esp+4Ch+var_48] offset aBoot +
mov [esp+4Ch+var_4C] ebx +
call esi  +
test eax eax +
jz loc_4053F8  +
mov eax [ebx+44h] +
jmp loc_405577  +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_48] offset aNoSMemoryForPa +
mov [esp+4Ch+var_4C] 0 +
mov [esp+4Ch+var_40] eax +
mov eax [esp+4Ch+arg_8] +
mov [esp+4Ch+var_44] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_405577  +
mov [esp+4Ch+var_48] offset aReadOperationN +
mov [esp+4Ch+var_4C] 0 +
call sub_401740  +
mov eax 0FFFFFFFEh +
jmp loc_405577  +
***
push esi  +
push ebx  +
sub esp 4Ch +
mov esi [esp+4Ch+arg_8] +
mov eax [esp+4Ch+arg_4] +
mov ebx [esp+4Ch+arg_0] +
mov [esp+4Ch+var_48] esi +
mov [esp+4Ch+var_4C] eax +
call sub_407980  +
test eax eax +
mov edi eax +
jz loc_405DB6  +
mov eax [ebx+8BCh] +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] ebx +
call eax  +
mov esi [edi+44h] +
cmp esi [esp+4Ch+arg_C] +
jg loc_40575F  +
jl loc_405D60  +
mov [esp+4Ch+arg_C] esi +
mov eax [esp+4Ch+arg_4] +
test byte ptr [eax+85h] 8 +
jz loc_405953  +
mov ecx [edi+48h] +
test ecx ecx +
jz loc_405953  +
mov eax [ebx+8F0h] +
test eax eax +
jz loc_405953  +
lea esi [esp+4Ch+var_11] +
jmp loc_405796  +
mov eax [ebx+8F0h] +
lea ecx [esp+4Ch+var_11+1] +
mov byte ptr [esp+4Ch+var_11] 72h +
mov [esp+4Ch+var_3C] 1 +
mov [esp+4Ch+var_40] ecx +
mov [esp+4Ch+var_44] 1 +
mov [esp+4Ch+var_48] esi +
mov [esp+4Ch+var_4C] ebx +
call eax  +
cmp byte ptr [esp+4Ch+var_11+1] 0 +
js loc_405790  +
lea eax [edi+50h] +
xor ecx ecx +
mov edx eax +
mov [esp+4Ch+var_24] eax +
mov eax ebx +
mov [esp+4Ch+var_4C] 1Dh +
call sub_403A60  +
mov eax [esp+4Ch+arg_C] +
and eax 1 +
cmp eax 1 +
sbb [esp+4Ch+arg_C] 0FFFFFFFFh +
xor eax eax +
mov edx [esp+4Ch+arg_C] +
test edx edx +
jz loc_405CF3  +
mov [esp+4Ch+var_30] edi +
mov edi eax +
mov eax [esp+4Ch+var_30] +
mov [esp+4Ch+var_28] 0 +
lea ebp [esp+3Ah] +
mov eax [eax+7Ch] +
test byte ptr [eax+edi] 1 +
jz loc_405938  +
lea esi [esi+0] +
lea eax [edi+1] +
mov [esp+4Ch+var_2C] eax +
cmp edi [esp+4Ch+var_28] +
jz loc_405841  +
mov edx [esp+4Ch+var_24] +
mov ecx edi +
mov eax ebx +
mov [esp+4Ch+var_4C] 1Dh +
call sub_403A60  +
mov eax [esp+4Ch+var_30] +
lea ecx [esp+4Ch+var_11+1] +
mov byte ptr [esp+4Ch+var_11+1] 64h +
mov eax [eax+78h] +
movzx eax byte ptr [eax+edi] +
mov byte ptr [esp+4Ch+var_11+2] al +
mov eax [ebx+8F0h] +
mov [esp+4Ch+var_48] ecx +
mov [esp+4Ch+var_3C] 0 +
mov [esp+4Ch+var_40] 0 +
mov [esp+4Ch+var_44] 2 +
mov [esp+4Ch+var_4C] ebx +
call eax  +
mov eax [esp+4Ch+var_30] +
mov ecx [esp+4Ch+var_2C] +
mov eax [eax+78h] +
movzx eax byte ptr [eax+ecx] +
lea ecx [esp+4Ch+var_11+1] +
mov byte ptr [esp+4Ch+var_11+2] al +
mov eax [ebx+8F0h] +
mov [esp+4Ch+var_3C] 0 +
mov [esp+4Ch+var_40] 0 +
mov [esp+4Ch+var_44] 2 +
mov [esp+4Ch+var_48] ecx +
mov [esp+4Ch+var_4C] ebx +
call eax  +
lea eax [edi+2] +
mov [esp+4Ch+var_2C] eax +
mov [esp+4Ch+var_28] eax +
lea esi [esi+0] +
mov eax [ebx+8F0h] +
mov [esp+4Ch+var_12] 72h +
mov [esp+4Ch+var_3C] 1 +
mov [esp+4Ch+var_40] esi +
mov [esp+4Ch+var_44] 1 +
mov [esp+4Ch+var_48] ebp +
mov [esp+4Ch+var_4C] ebx +
call eax  +
cmp byte ptr [esp+4Ch+var_11] 0 +
js loc_4058D0  +
mov eax [esp+4Ch+arg_C] +
mov [esp+4Ch+var_4C] edi +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] eax +
call sub_405020  +
mov eax [esp+4Ch+var_2C] +
cmp eax [esp+4Ch+arg_C] +
mov edi eax +
jnb loc_405CF3  +
mov eax [esp+4Ch+var_30] +
mov eax [eax+7Ch] +
test byte ptr [eax+edi] 1 +
jnz loc_405820  +
test byte ptr [eax+edi+1] 1 +
lea ecx [edi+1] +
mov [esp+4Ch+var_2C] ecx +
jnz loc_405827  +
lea eax [edi+2] +
mov [esp+4Ch+var_2C] eax +
jmp loc_4058FF  +
mov eax [ebx+900h] +
test eax eax +
jz loc_405AC2  +
mov eax [edi+48h] +
test eax eax +
mov [esp+4Ch+var_28] eax +
jz loc_405AC2  +
mov esi [esp+4Ch+arg_C] +
xor eax eax +
mov [esp+4Ch+var_2C] 0 +
mov ebp [esp+4Ch+var_28] +
mov [esp+4Ch+arg_0] ebx +
cmp esi eax +
jbe loc_4059C9  +
lea esi [esi+0] +
lea ebx [eax+ebp] +
cmp eax ebx +
jnb loc_4059C3  +
mov ecx [edi+7Ch] +
test byte ptr [ecx+eax] 1 +
jnz loc_405D11  +
lea eax [ecx+eax+1] +
add ecx ebx +
jmp loc_4059BF  +
movzx edx byte ptr [eax] +
add eax 1 +
and edx 1 +
jnz loc_405D11  +
cmp eax ecx +
jnz loc_4059B0  +
mov eax ebx +
cmp esi eax +
ja loc_405990  +
mov eax [esp+4Ch+arg_C] +
test eax eax +
jz loc_405DAF  +
mov esi [esp+4Ch+var_28] +
xor ebp ebp +
mov [esp+4Ch+var_30] 0 +
lea ebx [esi+ebp] +
mov eax esi +
cmp ebp ebx +
jnb loc_405A14  +
mov ecx [edi+7Ch] +
test byte ptr [ecx+ebp] 1 +
jnz loc_405D20  +
lea edx [ecx+ebp+1] +
add ebx ecx +
jmp loc_405A10  +
movzx ecx byte ptr [edx] +
add edx 1 +
and ecx 1 +
jnz loc_405D20  +
cmp edx ebx +
jnz loc_405A01  +
mov eax ebp +
xor edx edx +
div  esi +
mov [esp+4Ch+var_48] offset aSAvr_writeSkip +
mov [esp+4Ch+var_4C] 3 +
mov [esp+4Ch+var_40] eax +
mov eax ds:dword_486584 +
mov [esp+4Ch+var_44] eax +
call sub_401740  +
mov eax [esp+4Ch+var_2C] +
add [esp+4Ch+var_30] 1 +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] eax +
mov eax [esp+4Ch+var_30] +
mov [esp+4Ch+var_4C] eax +
call sub_405020  +
mov esi [edi+48h] +
add ebp esi +
cmp [esp+4Ch+arg_C] ebp +
ja loc_4059E3  +
mov eax [esp+4Ch+arg_C] +
jmp loc_405CF3  +
mov esi [esp+4Ch+arg_4] +
mov eax [esp+4Ch+arg_0] +
mov eax [eax+908h] +
mov [esp+4Ch+var_48] esi +
mov esi [esp+4Ch+arg_0] +
mov [esp+4Ch+var_40] ebp +
mov [esp+4Ch+var_44] edi +
mov [esp+4Ch+var_4C] esi +
call eax  +
test eax eax +
jns loc_405DE0  +
mov eax [esp+4Ch+var_2C] +
mov [esp+4Ch+var_44] 0 +
mov ebx [esp+4Ch+arg_0] +
mov [esp+4Ch+var_48] eax +
mov eax [esp+4Ch+var_30] +
add eax 1 +
mov [esp+4Ch+var_4C] eax +
call sub_405020  +
mov eax [ebx+90Ch] +
test eax eax +
jz loc_405ADD  +
mov esi [esp+4Ch+arg_4] +
mov [esp+4Ch+var_44] edi +
mov [esp+4Ch+var_4C] ebx +
mov [esp+4Ch+var_48] esi +
call eax  +
mov eax [esp+4Ch+arg_C] +
test eax eax +
jz loc_405DAF  +
mov eax [esp+4Ch+arg_C] +
xor esi esi +
xor ecx ecx +
mov [esp+4Ch+var_30] esi +
xor ebp ebp +
mov esi [esp+4Ch+arg_C] +
mov [esp+4Ch+arg_0] ebx +
mov ebx ecx +
mov [esp+4Ch+var_24] 0 +
sub eax 1 +
mov [esp+4Ch+var_28] 1 +
mov [esp+4Ch+var_20] eax +
jmp loc_405B3F  +
test ebx ebx +
jnz loc_405C40  +
mov ecx [esp+4Ch+var_24] +
test ecx ecx +
jnz loc_405CCB  +
add ebp 1 +
cmp ebp esi +
jz loc_405CF1  +
mov eax [edi+78h] +
movzx eax byte ptr [eax+ebp] +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] esi +
mov [esp+4Ch+var_4C] ebp +
mov byte ptr [esp+4Ch+var_2C] al +
call sub_405020  +
mov eax [edi+7Ch] +
movzx ecx byte ptr [eax+ebp] +
mov eax [edi+40h] +
and ecx 1 +
test eax eax +
jz loc_405BAD  +
mov eax [esp+4Ch+var_30] +
mov ebx [esp+4Ch+var_28] +
or eax ecx +
test ebx ebx +
mov ebx [edi+48h] +
cmovnz eax ecx +
xor edx edx +
mov [esp+4Ch+var_30] eax +
mov eax ebp +
div  ebx +
sub ebx 1 +
cmp edx ebx +
jz loc_405D00  +
mov edx [esp+4Ch+var_20] +
xor ebx ebx +
cmp edx ebp +
setz al  +
cmovz ebx [esp+4Ch+var_30] +
movzx eax al +
mov [esp+4Ch+var_28] eax +
mov eax ebx +
or eax ecx +
jz loc_405B34  +
test ecx ecx +
jz loc_405B20  +
movzx eax byte ptr [esp+4Ch+var_2C] +
mov [esp+4Ch+var_40] ebp +
mov [esp+4Ch+var_44] edi +
mov [esp+4Ch+var_3C] eax +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_48] eax +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_4C] eax +
call sub_404AB0  +
test eax eax +
jz loc_405B20  +
mov [esp+4Ch+var_48] offset aFailed +
mov [esp+4Ch+var_4C] 0 +
call sub_401740  +
mov [esp+4Ch+var_48] offset asc_464DDF +
mov [esp+4Ch+var_4C] 0 +
call sub_401740  +
mov eax [esp+4Ch+arg_0] +
mov ecx [esp+4Ch+arg_0] +
mov eax [eax+8BCh] +
mov [esp+4Ch+var_48] 1 +
mov [esp+4Ch+var_4C] ecx +
call eax  +
test ebx ebx +
mov [esp+4Ch+var_24] 1 +
jz loc_405B28  +
nop   +
lea esi [esi+0] +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_40] ebp +
mov [esp+4Ch+var_44] edi +
mov [esp+4Ch+var_48] eax +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_4C] eax +
call sub_404160  +
test eax eax +
jz loc_405B28  +
mov ecx [edi+48h] +
mov eax ebp +
xor edx edx +
mov [esp+4Ch+var_3C] ebp +
mov [esp+4Ch+var_48] offset aPageDAddresses +
mov [esp+4Ch+var_4C] 0 +
sub eax ecx +
add eax 1 +
mov [esp+4Ch+var_40] eax +
mov eax ebp +
div  ecx +
mov [esp+4Ch+var_44] edx +
call sub_401740  +
mov [esp+4Ch+var_48] offset asc_464DDF +
mov [esp+4Ch+var_4C] 0 +
call sub_401740  +
mov eax [esp+4Ch+arg_0] +
mov ecx [esp+4Ch+arg_0] +
mov eax [eax+8BCh] +
mov [esp+4Ch+var_48] 1 +
mov [esp+4Ch+var_4C] ecx +
call eax  +
mov [esp+4Ch+var_24] 1 +
mov eax [esp+4Ch+arg_0] +
add ebp 1 +
mov ecx [esp+4Ch+arg_0] +
mov eax [eax+8BCh] +
mov [esp+4Ch+var_48] 1 +
mov [esp+4Ch+var_4C] ecx +
call eax  +
cmp ebp esi +
jnz loc_405B3F  +
mov eax ebp +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ebx [esp+4Ch+var_30] +
mov [esp+4Ch+var_28] 1 +
jmp loc_405BAD  +
add [esp+4Ch+var_2C] 1 +
mov eax ebx +
jmp loc_4059C5  +
mov edx [esp+4Ch+arg_10] +
test edx edx +
jnz loc_405A74  +
mov esi [esp+4Ch+arg_0] +
mov edx [esi+900h] +
mov [esp+4Ch+var_38] eax +
mov [esp+4Ch+var_40] eax +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_3C] ebp +
mov [esp+4Ch+var_44] edi +
mov [esp+4Ch+var_4C] esi +
mov [esp+4Ch+var_48] eax +
call edx  +
test eax eax +
jns loc_405A3B  +
jmp loc_405A9F  +
mov eax [esp+4Ch+arg_C] +
mov [esp+4Ch+var_34] esi +
mov [esp+4Ch+var_38] offset byte_4865A0 +
mov [esp+4Ch+var_3C] esi +
mov [esp+4Ch+var_40] eax +
mov eax ds:dword_486584 +
mov [esp+4Ch+var_48] offset aSWarningDBytes +
mov [esp+4Ch+var_4C] 0 +
mov [esp+4Ch+var_44] eax +
call sub_401740  +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+arg_C] esi +
test byte ptr [eax+85h] 8 +
jz loc_405953  +
jmp loc_405770  +
xor eax eax +
jmp loc_405CF3  +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_44] esi +
mov [esp+4Ch+var_48] offset aNoSMemoryForPa +
mov [esp+4Ch+var_4C] 0 +
mov [esp+4Ch+var_40] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_405CF3  +
mov eax [edi+48h] +
jmp loc_405D2C  +
***
sub esp 24h +
mov [esp+24h+var_1C] offset aReading +
mov esi [esp+24h+arg_4] +
mov [esp+24h+var_20] 1 +
mov [esp+24h+var_24] 0 +
call sub_405020  +
mov eax [esp+24h+arg_0] +
mov [esp+24h+var_18] 0 +
mov [esp+24h+var_1C] offset aSignature +
mov [esp+24h+var_20] esi +
mov [esp+24h+var_24] eax +
call sub_405100  +
test eax eax +
mov ebx eax +
js loc_405E60  +
mov [esp+24h+var_1C] 0 +
mov [esp+24h+var_20] 1 +
mov [esp+24h+var_24] 1 +
call sub_405020  +
add esp 24h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
mov [esp+24h+var_14] eax +
mov eax ds:dword_486584 +
mov [esp+24h+var_18] esi +
mov [esp+24h+var_20] offset aSErrorReadingS +
mov [esp+24h+var_24] 0 +
mov [esp+24h+var_1C] eax +
call sub_401740  +
add esp 24h +
mov eax ebx +
pop ebx  +
pop esi  +
retn   +
***
push esi  +
sub esp 14h +
mov [esp+14h+var_14] 10h +
mov esi [esp+14h+arg_0] +
call malloc  +
test eax eax +
mov ebx eax +
jz loc_40628D  +
mov eax [esi] +
mov [ebx] eax +
mov edx [esi+4] +
test eax eax +
mov [ebx+4] edx +
mov edx [esi+8] +
mov [ebx+8] edx +
mov edx [esi+0Ch] +
mov [ebx+0Ch] edx +
jz loc_406285  +
mov [esp+14h+var_14] eax +
call _strdup  +
mov [ebx] eax +
mov eax [esi+8] +
mov [esp+14h+var_14] eax +
call _strdup  +
mov [ebx+8] eax +
add esp 14h +
mov eax ebx +
pop ebx  +
pop esi  +
retn   +
mov dword ptr [ebx] 0 +
jmp loc_40626F  +
mov eax ds:dword_486584 +
mov [esp+14h+var_10] offset aSOutOfMemory +
mov [esp+14h+var_14] 0 +
mov [esp+14h+var_C] eax +
call sub_401740  +
mov [esp+14h+var_14] 1 +
call exit  +
push ebx  +
sub esp 18h +
mov dword ptr [esp] 10h +
call malloc  +
test eax eax +
mov ebx eax +
jz loc_406308  +
mov eax [esp+24h] +
mov [esp] eax +
call _strdup  +
mov [ebx] eax +
mov eax [esp+2Ch] +
mov [esp] eax +
call _strdup  +
mov [ebx+8] eax +
mov eax [esp+20h] +
mov [ebx+4] eax +
mov eax [esp+28h] +
mov [ebx+0Ch] eax +
add esp 18h +
mov eax ebx +
pop ebx  +
retn   +
mov eax ds:dword_486584 +
mov [esp+14h+var_10] offset aSOutOfMemory +
mov dword ptr [esp] 0 +
mov [esp+8] eax +
call sub_401740  +
mov dword ptr [esp] 1 +
call exit  +
jmp sub_406340  +
***
mov ebx [esp+18h+arg_0] +
test ebx ebx +
jz loc_406383  +
mov eax [ebx] +
test eax eax +
jz loc_406360  +
mov [esp+18h+var_18] eax +
call free  +
mov dword ptr [ebx] 0 +
mov eax [ebx+8] +
test eax eax +
jz loc_406376  +
mov [esp+18h+var_18] eax +
call free  +
mov dword ptr [ebx+8] 0 +
mov [esp+18h+arg_0] ebx +
add esp 18h +
pop ebx  +
jmp free  +
add esp 18h +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+2Ch+arg_8] +
mov ebp [esp+2Ch+arg_0] +
mov eax [ebx] +
mov [esp+2Ch+var_28] eax +
mov eax [esp+2Ch+arg_4] +
mov [esp+2Ch+var_2C] eax +
call sub_407980  +
test eax eax +
mov [esp+2Ch+var_10] eax +
jz loc_406A15  +
mov eax [ebx+4] +
test eax eax +
jz loc_406502  +
cmp eax 1 +
jz loc_4065C0  +
cmp eax 2 +
jnz loc_406910  +
mov eax [ebp+8C4h] +
mov [esp+2Ch+var_28] 1 +
mov [esp+2Ch+var_2C] ebp +
call eax  +
cmp ds:dword_4866A8 1 +
jle loc_4067D0  +
mov edx [ebx] +
mov edi [esp+2Ch+arg_4] +
mov eax [ebx+8] +
mov [esp+2Ch+var_18] 0FFFFFFFFh +
mov [esp+2Ch+var_1C] edx +
mov [esp+2Ch+var_20] edi +
mov edx [ebx+0Ch] +
mov [esp+2Ch+var_28] eax +
mov [esp+2Ch+var_2C] 0 +
mov [esp+2Ch+var_24] edx +
call sub_40EED0  +
test eax eax +
mov esi eax +
js loc_4069A1  +
mov eax [esp+2Ch+arg_4] +
mov [esp+2Ch+var_2C] eax +
call sub_407CA0  +
cmp ds:dword_4866A8 1 +
mov edi eax +
jle loc_406830  +
mov [esp+2Ch+var_24] offset aReading_0 +
mov [esp+2Ch+var_28] 1 +
mov [esp+2Ch+var_2C] 0 +
call sub_405020  +
mov eax [ebx] +
mov [esp+2Ch+var_20] edi +
mov [esp+2Ch+var_2C] ebp +
mov [esp+2Ch+var_24] eax +
mov eax [esp+2Ch+arg_4] +
mov [esp+2Ch+var_28] eax +
call sub_405100  +
test eax eax +
js loc_4069CF  +
mov [esp+2Ch+var_24] 0 +
mov [esp+2Ch+var_28] 1 +
mov [esp+2Ch+var_2C] 1 +
call sub_405020  +
cmp ds:dword_4866A8 1 +
jle loc_406882  +
mov eax [ebx] +
mov [esp+2Ch+var_20] esi +
mov [esp+2Ch+var_28] edi +
mov [esp+2Ch+var_24] eax +
mov eax [esp+2Ch+arg_4] +
mov [esp+2Ch+var_2C] eax +
call sub_404CB0  +
test eax eax +
js loc_406A41  +
cmp ds:dword_4866A8 1 +
jle loc_406772  +
mov eax [ebp+8C4h] +
mov [esp+2Ch+var_28] 0 +
mov [esp+2Ch+var_2C] ebp +
call eax  +
xor eax eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp ds:dword_4866A8 1 +
jle loc_406748  +
mov [esp+2Ch+var_24] offset aReading_0 +
mov [esp+2Ch+var_28] 1 +
mov [esp+2Ch+var_2C] 0 +
call sub_405020  +
mov eax [ebx] +
mov [esp+2Ch+var_2C] ebp +
mov [esp+2Ch+var_20] 0 +
mov [esp+2Ch+var_24] eax +
mov eax [esp+2Ch+arg_4] +
mov [esp+2Ch+var_28] eax +
call sub_405100  +
test eax eax +
mov ebp eax +
js loc_40696E  +
mov [esp+2Ch+var_24] 0 +
mov [esp+2Ch+var_28] 1 +
mov [esp+2Ch+var_2C] 1 +
call sub_405020  +
cmp ds:dword_4866A8 1 +
jle loc_4066C5  +
mov edx [ebx] +
mov ecx [esp+2Ch+arg_4] +
mov eax [ebx+8] +
mov [esp+2Ch+var_18] ebp +
mov [esp+2Ch+var_1C] edx +
mov [esp+2Ch+var_20] ecx +
mov edx [ebx+0Ch] +
mov [esp+2Ch+var_28] eax +
mov [esp+2Ch+var_2C] 1 +
mov [esp+2Ch+var_24] edx +
call sub_40EED0  +
test eax eax +
js loc_4067A0  +
xor eax eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp ds:dword_4866A8 1 +
jle loc_4068C6  +
mov edx [ebx] +
mov ecx [esp+2Ch+arg_4] +
mov eax [ebx+8] +
mov [esp+2Ch+var_18] 0FFFFFFFFh +
mov [esp+2Ch+var_1C] edx +
mov [esp+2Ch+var_20] ecx +
mov edx [ebx+0Ch] +
mov [esp+2Ch+var_28] eax +
mov [esp+2Ch+var_2C] 0 +
mov [esp+2Ch+var_24] edx +
call sub_40EED0  +
test eax eax +
mov esi eax +
js loc_4069A1  +
cmp ds:dword_4866A8 1 +
jle loc_406940  +
test [esp+2Ch+arg_C] 1 +
jnz loc_406713  +
mov [esp+2Ch+var_24] offset aWriting +
mov [esp+2Ch+var_28] 1 +
mov [esp+2Ch+var_2C] 0 +
call sub_405020  +
mov eax dword ptr [esp+2Ch+arg_C] +
mov edx [ebx] +
mov [esp+2Ch+var_20] esi +
mov [esp+2Ch+var_2C] ebp +
shr eax 1 +
and eax 1 +
mov [esp+2Ch+var_1C] eax +
mov eax [esp+2Ch+arg_4] +
mov [esp+2Ch+var_24] edx +
mov [esp+2Ch+var_28] eax +
call sub_405710  +
mov [esp+2Ch+var_24] 0 +
mov [esp+2Ch+var_28] 1 +
mov [esp+2Ch+var_2C] 1 +
mov ebx eax +
call sub_405020  +
test ebx ebx +
js loc_406A60  +
cmp ds:dword_4866A8 1 +
jg loc_4065B0  +
mov eax [esp+2Ch+var_10] +
mov [esp+2Ch+var_20] ebx +
mov [esp+2Ch+var_28] offset aSDBytesOfSWrit +
mov [esp+2Ch+var_2C] 0 +
mov [esp+2Ch+var_1C] eax +
mov eax ds:dword_486584 +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
xor eax eax +
jmp loc_4065B2  +
test ebp ebp +
jz loc_4068A4  +
mov esi [ebx+8] +
mov edi offset asc_4650D5 +
mov ecx 2 +
mov edx offset aStdout +
cmps   +
setnbe al  +
setb cl  +
cmp al cl +
mov eax ds:dword_486584 +
cmovnz edx [ebx+8] +
mov [esp+2Ch+var_28] offset aSWritingOutput +
mov [esp+2Ch+var_2C] 0 +
mov [esp+2Ch+var_20] edx +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
jmp loc_40657C  +
mov eax [ebx] +
mov [esp+2Ch+var_18] esi +
mov [esp+2Ch+var_24] 2 +
mov [esp+2Ch+var_28] offset asc_4650D5 +
mov [esp+2Ch+var_1C] eax +
mov eax [esp+2Ch+arg_4] +
mov [esp+2Ch+var_2C] 1 +
mov [esp+2Ch+var_20] eax +
call sub_40EED0  +
mov ebx eax +
jmp loc_406680  +
mov eax [esp+2Ch+var_10] +
mov [esp+2Ch+var_28] offset aSReadingSMemor +
mov [esp+2Ch+var_2C] 0 +
mov [esp+2Ch+var_20] eax +
mov eax ds:dword_486584 +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
jmp loc_40650F  +
mov esi [esp+2Ch+var_10] +
mov [esp+2Ch+var_20] eax +
mov eax ds:dword_486584 +
mov [esp+2Ch+var_28] offset aSDBytesOfSVeri +
mov [esp+2Ch+var_2C] 0 +
mov [esp+2Ch+var_1C] esi +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
jmp loc_4064E5  +
mov eax [ebx+8] +
mov [esp+2Ch+var_28] offset aSWriteToFileSF +
mov [esp+2Ch+var_2C] 0 +
mov [esp+2Ch+var_20] eax +
mov eax ds:dword_486584 +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_4064FA  +
mov eax [ebx+8] +
mov esi [esp+2Ch+var_10] +
mov [esp+2Ch+var_28] offset aSVerifyingSMem +
mov [esp+2Ch+var_2C] 0 +
mov [esp+2Ch+var_1C] eax +
mov eax ds:dword_486584 +
mov [esp+2Ch+var_20] esi +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
mov eax [ebx+8] +
mov [esp+2Ch+var_20] esi +
mov [esp+2Ch+var_28] offset aSLoadDataSData +
mov [esp+2Ch+var_2C] 0 +
mov [esp+2Ch+var_1C] eax +
mov eax ds:dword_486584 +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
jmp loc_4063FA  +
mov eax [ebx+8] +
mov [esp+2Ch+var_1C] esi +
mov [esp+2Ch+var_28] offset aSInputFileSCon +
mov [esp+2Ch+var_2C] 0 +
mov [esp+2Ch+var_20] eax +
mov eax ds:dword_486584 +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
mov eax [esp+2Ch+var_10] +
mov [esp+2Ch+var_28] offset aSReadingOnChip +
mov [esp+2Ch+var_2C] 0 +
mov [esp+2Ch+var_20] eax +
mov eax ds:dword_486584 +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
jmp loc_40644F  +
mov eax ds:dword_486584 +
mov [esp+2Ch+var_28] offset aSVerifying___ +
mov [esp+2Ch+var_2C] 0 +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
jmp loc_4064B6  +
mov eax ds:dword_486584 +
mov [esp+2Ch+var_28] offset aSFlashIsEmptyR +
mov [esp+2Ch+var_2C] 0 +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
jmp loc_4066CD  +
mov esi [ebx+8] +
mov edi offset asc_4650D5 +
mov ecx 2 +
mov edx offset aStdin +
cmps   +
setnbe al  +
setb cl  +
cmp al cl +
mov eax ds:dword_486584 +
cmovnz edx [ebx+8] +
mov [esp+2Ch+var_28] offset aSReadingInputF +
mov [esp+2Ch+var_2C] 0 +
mov [esp+2Ch+var_20] edx +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
jmp loc_4065CD  +
mov [esp+2Ch+var_20] eax +
mov eax ds:dword_486584 +
mov [esp+2Ch+var_28] offset aSInvalidUpda_0 +
mov [esp+2Ch+var_2C] 0 +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_4064FA  +
mov [esp+2Ch+var_1C] eax +
mov eax [esp+2Ch+var_10] +
mov [esp+2Ch+var_28] offset aSWritingSDByte +
mov [esp+2Ch+var_2C] 0 +
mov [esp+2Ch+var_20] eax +
mov eax ds:dword_486584 +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
jmp loc_406614  +
mov [esp+2Ch+var_1C] eax +
mov eax [esp+2Ch+var_10] +
mov [esp+2Ch+var_28] offset aSFailedToReadA +
mov [esp+2Ch+var_2C] 0 +
mov [esp+2Ch+var_20] eax +
mov eax ds:dword_486584 +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_4064FA  +
mov eax [ebx+8] +
mov [esp+2Ch+var_28] offset aSReadFromFileS +
mov [esp+2Ch+var_2C] 0 +
mov [esp+2Ch+var_20] eax +
mov eax ds:dword_486584 +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_4064FA  +
mov [esp+2Ch+var_1C] eax +
mov eax [esp+2Ch+var_10] +
mov [esp+2Ch+var_28] offset aSFailedToReadA +
mov [esp+2Ch+var_2C] 0 +
mov [esp+2Ch+var_20] eax +
mov eax ds:dword_486584 +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
mov eax [ebp+8BCh] +
mov [esp+2Ch+var_28] 1 +
mov [esp+2Ch+var_2C] ebp +
call eax  +
mov eax 0FFFFFFFFh +
jmp loc_4064FA  +
mov eax [ebx] +
mov ecx [esp+2Ch+arg_4] +
mov [esp+2Ch+var_28] offset aSMemoryTypeN_0 +
mov [esp+2Ch+var_2C] 0 +
mov [esp+2Ch+var_24] eax +
mov [esp+2Ch+var_20] ecx +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_4064FA  +
mov eax ds:dword_486584 +
mov [esp+2Ch+var_28] offset aSVerificatio_0 +
mov [esp+2Ch+var_2C] 0 +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
jmp loc_4069F8  +
mov eax [esp+2Ch+var_10] +
mov [esp+2Ch+var_1C] ebx +
mov [esp+2Ch+var_28] offset aSFailedToWrite +
mov [esp+2Ch+var_2C] 0 +
mov [esp+2Ch+var_20] eax +
mov eax ds:dword_486584 +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
or eax 0FFFFFFFFh +
jmp loc_4064FA  +
***
cmp [eax+0Ch] edx +
jz loc_406AD7  +
cmp [eax+10h] edx +
mov eax [edx+4] +
jz loc_406AF0  +
mov ebx [edx] +
mov [eax] ebx +
mov ebx [edx] +
mov [ebx+4] eax +
mov eax [edx+8] +
mov dword ptr [edx+4] 0 +
mov dword ptr [edx+8] 0 +
mov ebx [ecx+14h] +
mov [edx] ebx +
mov [ecx+14h] edx +
sub dword ptr [ecx] 1 +
pop ebx  +
retn   +
mov eax [edx] +
test eax eax +
mov [ecx+0Ch] eax +
jz loc_406B00  +
mov dword ptr [eax+4] 0 +
jmp loc_406AB9  +
test eax eax +
mov [ecx+10h] eax +
jz loc_406AB9  +
mov dword ptr [eax] 0 +
jmp loc_406AB9  +
mov dword ptr [ecx+10h] 0 +
jmp loc_406AB9  +
***
push esi  +
mov esi eax +
push ebx  +
sub esp 1Ch +
mov ebx [eax+14h] +
test ebx ebx +
jz loc_406B43  +
mov eax [ebx] +
mov [esi+14h] eax +
mov dword ptr [ebx] 0 +
mov dword ptr [ebx+4] 0 +
mov dword ptr [ebx+8] 0 +
add esp 1Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
movsx eax word ptr [eax+6] +
mov [esp+20h+var_20] eax +
call malloc  +
test eax eax +
jz loc_406B39  +
mov ebp [esi+8] +
lea edx [eax+14h] +
mov dword ptr [eax] 0 +
lea ebx [eax+8] +
mov dword ptr [eax+4] 0 +
mov dword ptr [eax+10h] 0 +
cmp ebp 2 +
mov [eax+8] edx +
mov dword ptr [eax+0Ch] 0 +
jle loc_406BA7  +
lea ecx [ebp+ebp*2+0] +
lea edx [eax+20h] +
lea edi [eax+ecx*4+8] +
lea esi [esi+0] +
lea ecx [edx-18h] +
mov dword ptr [edx-4] 0 +
mov [edx-8] ecx +
mov [edx-0Ch] edx +
add edx 0Ch +
cmp edx edi +
jnz loc_406B90  +
lea ecx [ebp+ebp*2+0] +
shl ecx 2 +
lea edx [ebx+ecx-0Ch] +
lea ecx [ebx+ecx-18h] +
mov dword ptr [edx+8] 0 +
mov dword ptr [edx] 0 +
mov [edx+4] ecx +
mov edx [esi+18h] +
test edx edx +
jz loc_406BDD  +
mov edx [esi+1Ch] +
mov [eax+4] edx +
mov [edx] eax +
mov [esi+1Ch] eax +
jmp loc_406B20  +
mov [esi+18h] eax +
mov [esi+1Ch] eax +
jmp loc_406B20  +
***
sub esp 14h +
mov ebx [esp+14h+arg_0] +
mov esi [esp+14h+arg_4] +
test ebx ebx +
jz loc_406C86  +
xor edx edx +
mov ecx ebx +
mov [ebx+4] dx +
test esi esi +
mov dword ptr [ecx+0Ch] 0 +
mov dword ptr [ecx+10h] 0 +
mov dword ptr [ecx] 0 +
jnz loc_406C52  +
mov eax 200h +
mov [ecx+6] ax +
mov dword ptr [ecx+8] 2Ah +
mov dword ptr [ecx+18h] 0 +
mov eax ecx +
mov dword ptr [ecx+1Ch] 0 +
mov dword ptr [ecx+14h] 0 +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
lea esi [esi+esi*2] +
mov edx 0AAAAAAABh +
lea esi ds:8[esi*4] +
mov [ecx+6] si +
movsx esi si +
sub esi 8 +
mov eax esi +
mul  edx +
shr edx 3 +
cmp edx 4 +
mov [ecx+8] edx +
jg loc_406C35  +
test ebx ebx +
jz loc_406CA6  +
xor eax eax +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov [esp+14h+var_14] 20h +
call malloc  +
test eax eax +
mov ecx eax +
jz loc_406C7E  +
mov eax 1 +
mov [ecx+4] ax +
jmp loc_406C0D  +
mov [esp+14h+var_14] ecx +
call free  +
xor eax eax +
jmp loc_406C80  +
***
sub esp 14h +
mov esi [esp+14h+arg_0] +
mov eax [esi+18h] +
test eax eax +
jnz loc_406CD4  +
jmp loc_406CE2  +
mov eax ebx +
mov ebx [eax] +
mov [esp+14h+var_14] eax +
call free  +
test ebx ebx +
jnz loc_406CD2  +
cmp word ptr [esi+4] 0 +
jnz loc_406CF0  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov [esp+14h+arg_0] esi +
add esp 14h +
pop ebx  +
pop esi  +
jmp free  +
***
push ebx  +
sub esp 10h +
mov edi [esp+10h+arg_0] +
mov esi [esp+10h+arg_4] +
mov ebx [edi+0Ch] +
test ebx ebx +
jz loc_406D23  +
mov eax [ebx+8] +
mov [esp+10h+var_10] eax +
call esi  +
mov ebx [ebx] +
test ebx ebx +
jnz loc_406D15  +
mov [esp+10h+arg_0] edi +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
jmp sub_406CC0  +
***
mov ebx [esp+8+arg_0] +
mov eax ebx +
call sub_406B10  +
test eax eax +
jz loc_406D85  +
mov edx [esp+8+arg_4] +
mov [eax+8] edx +
mov edx [ebx+0Ch] +
test edx edx +
jz loc_406D70  +
mov edx [ebx+10h] +
mov dword ptr [eax] 0 +
mov [eax+4] edx +
mov [edx] eax +
mov [ebx+10h] eax +
add dword ptr [ebx] 1 +
xor eax eax +
add esp 8 +
pop ebx  +
retn   +
mov [ebx+0Ch] eax +
mov [ebx+10h] eax +
mov dword ptr [eax] 0 +
mov dword ptr [eax+4] 0 +
jmp loc_406D62  +
mov eax 0FFFFFFFFh +
jmp loc_406D67  +
***
push edi  +
mov edi eax +
push esi  +
mov esi edx +
push ebx  +
sub esp 1Ch +
test edx edx +
jz loc_406DE4  +
call sub_406B10  +
test eax eax +
mov ebx eax +
jz loc_406DFA  +
mov [eax+8] ebp +
mov eax [edi+0Ch] +
cmp eax esi +
jz loc_406DD3  +
mov eax [esi+4] +
mov [ebx] esi +
mov [ebx+4] eax +
mov [esi+4] ebx +
mov eax [ebx+4] +
mov [eax] ebx +
add dword ptr [edi] 1 +
xor eax eax +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [ebx] eax +
mov dword ptr [ebx+4] 0 +
mov [eax+4] ebx +
mov [edi+0Ch] ebx +
jmp loc_406DC6  +
mov [esp+28h+var_24] ecx +
mov [esp+28h+var_28] eax +
call sub_406D30  +
add esp 1Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax 0FFFFFFFFh +
jmp loc_406DCB  +
***
jmp loc_406E10  +
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov eax [esp+30h] +
mov ebx [esp+34h] +
mov esi [esp+38h] +
mov edi [esp+3Ch] +
mov ebp [eax+0Ch] +
mov dword ptr [esp+0Ch] 0 +
test ebp ebp +
jnz loc_406E4D  +
jmp loc_406E78  +
test edi edi +
jz loc_406E3E  +
mov [edi] ebp +
mov dword ptr [esp+0Ch] 1 +
mov ebp [ebp+0] +
test ebp ebp +
jz loc_406E78  +
mov eax [ebp+8] +
mov [esp] ebx +
mov [esp+4] eax +
call esi  +
test eax eax +
jz loc_406E38  +
jns loc_406E46  +
mov eax [esp+30h] +
mov ecx ebx +
mov edx ebp +
call sub_406D90  +
mov eax [esp+0Ch] +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [esp+30h] +
mov [esp+4] ebx +
mov [esp] eax +
call sub_406D30  +
mov eax [esp+0Ch] +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov ebp [esp+30h] +
mov esi [esp+34h] +
mov edi [esp+38h] +
mov ebx [ebp+0Ch] +
test ebx ebx +
jnz loc_406EC8  +
jmp loc_406EE2  +
js loc_406F00  +
mov ebx [ebx] +
test ebx ebx +
jz loc_406EE2  +
mov eax [ebx+8] +
mov [esp] esi +
mov [esp+4] eax +
call edi  +
test eax eax +
jnz loc_406EC0  +
add esp 1Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+4] esi +
mov [esp] ebp +
call sub_406D30  +
add esp 1Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov ecx esi +
mov edx ebx +
mov eax ebp +
call sub_406D90  +
add esp 1Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [esp+arg_0] +
mov eax [eax+0Ch] +
retn   +
***
mov eax [esp+4] +
mov eax [eax+10h] +
retn   +
***
mov eax [esp+arg_0] +
mov eax [eax] +
retn   +
***
mov eax [esp+4] +
mov eax [eax+4] +
retn   +
***
mov eax [esp+arg_0] +
mov eax [eax+8] +
retn   +
***
mov eax [esp+arg_0] +
mov eax [eax] +
retn   +
***
mov eax [esp+4] +
mov eax [eax+10h] +
test eax eax +
jz loc_406F90  +
mov eax [eax+8] +
retn   +
***
xor eax eax +
retn   +
***
mov ecx [esp+8] +
mov eax [esp+4] +
test ecx ecx +
jz loc_406FD8  +
cmp ecx [eax] +
ja loc_406FD8  +
cmp ecx 1 +
mov eax [eax+0Ch] +
jz loc_406FD0  +
test eax eax +
jz loc_406FD0  +
mov edx 1 +
jmp loc_406FC7  +
test eax eax +
jz loc_406FD0  +
add edx 1 +
mov eax [eax] +
cmp edx ecx +
jnz loc_406FC3  +
test eax eax +
jz loc_406FD8  +
mov eax [eax+8] +
retn   +
***
xor eax eax +
retn   +
***
add edx 1 +
mov eax [eax] +
cmp edx ecx +
jnz loc_407000  +
retn   +
***
mov esi [esp+arg_8] +
mov eax [esp+arg_0] +
mov ecx [esp+arg_4] +
test esi esi +
jz loc_407077  +
mov edx [eax] +
lea ebx [edx+1] +
cmp esi ebx +
ja loc_407077  +
test edx edx +
jz loc_407070  +
cmp esi 1 +
mov edx [eax+0Ch] +
jz loc_40705F  +
test edx edx +
jz loc_40705F  +
mov ebx 1 +
jmp loc_407056  +
test edx edx +
jz loc_40705F  +
add ebx 1 +
mov edx [edx] +
cmp ebx esi +
jnz loc_407052  +
test edx edx +
jz loc_407077  +
pop ebx  +
pop esi  +
jmp sub_406D90  +
pop ebx  +
pop esi  +
jmp sub_406D30  +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
retn   +
***
push ebx  +
mov eax [esp+8] +
mov edx [esp+0Ch] +
mov ecx [esp+10h] +
mov ebx [eax+0Ch] +
cmp edx ebx +
jnz loc_40709C  +
jmp loc_4070A2  +
mov ebx [ebx] +
cmp edx ebx +
jz loc_4070A2  +
test ebx ebx +
nop   +
jnz loc_407096  +
test ebx ebx +
jz loc_4070AC  +
pop ebx  +
jmp sub_406D90  +
***
mov eax 0FFFFFFFFh +
pop ebx  +
retn   +
***
mov eax [esp+arg_0] +
mov ecx [esp+arg_4] +
mov edx [eax+0Ch] +
test edx edx +
jnz loc_4070D7  +
jmp loc_4070E1  +
mov edx [edx] +
test edx edx +
jz loc_4070E1  +
cmp [edx+8] ecx +
jnz loc_4070D1  +
jmp sub_406AA0  +
xor eax eax +
retn   +
***
mov eax [esp+4] +
mov ecx [esp+8] +
mov edx [eax+0Ch] +
cmp ecx edx +
jnz loc_407107  +
jmp loc_40710B  +
mov edx [edx] +
cmp ecx edx +
jz loc_40710B  +
test edx edx +
jnz loc_407101  +
test edx edx +
lea esi [esi+0] +
jz loc_407117  +
jmp sub_406AA0  +
***
xor eax eax +
retn   +
***
mov eax [esp+arg_0] +
test ebx ebx +
jz loc_407160  +
cmp ebx [eax] +
ja loc_407160  +
cmp ebx 1 +
mov edx [eax+0Ch] +
jz loc_407151  +
test edx edx +
jz loc_407151  +
mov ecx 1 +
jmp loc_407148  +
test edx edx +
jz loc_407151  +
add ecx 1 +
mov edx [edx] +
cmp ecx ebx +
jnz loc_407144  +
test edx edx +
jz loc_407160  +
pop ebx  +
jmp sub_406AA0  +
xor eax eax +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 14h +
mov ebx [esp+24h] +
mov esi [esp+20h] +
mov edx [ebx] +
test edx edx +
jz loc_4071A5  +
mov dword ptr [esp+4] 1 +
mov [esp] ebx +
call sub_407120  +
mov [esp] esi +
mov [esp+4] eax +
call sub_406D30  +
mov eax [ebx] +
test eax eax +
jnz loc_407183  +
add esp 14h +
mov eax esi +
pop ebx  +
pop esi  +
retn   +
***
mov eax [esp+4] +
mov edx [eax+10h] +
test edx edx +
jz loc_4071C0  +
jmp sub_406AA0  +
***
xor eax eax +
retn   +
***
push edi  +
push esi  +
push ebx  +
sub esp 10h +
mov eax [esp+20h] +
mov edi [esp+24h] +
mov esi [esp+28h] +
mov ebx [eax+0Ch] +
test ebx ebx +
jnz loc_4071F6  +
jmp loc_407210  +
mov ebx [ebx] +
test ebx ebx +
jz loc_407210  +
mov eax [ebx+8] +
mov [esp] edi +
mov [esp+4] eax +
call esi  +
test eax eax +
jnz loc_4071F0  +
mov eax [ebx+8] +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
add esp 10h +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov esi [esp+1Ch+arg_4] +
nop   +
lea esi [esi+0] +
mov eax [esp+1Ch+arg_0] +
mov ebp [eax+0Ch] +
test ebp ebp +
jz loc_407275  +
mov ebx [ebp+0] +
xor edi edi +
test ebx ebx +
jz loc_407271  +
mov ecx [ebx+8] +
mov eax [ebp+8] +
mov [esp+1Ch+var_18] ecx +
mov [esp+1Ch+var_1C] eax +
call esi  +
test eax eax +
jle loc_407268  +
mov eax [ebx+8] +
mov edi 1 +
mov ecx [ebp+8] +
mov [ebx+8] ecx +
mov [ebp+8] eax +
mov ebp ebx +
mov ebx [ebp+0] +
test ebx ebx +
jnz loc_407244  +
test edi edi +
jnz loc_407230  +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push ebp  +
xor ebp ebp +
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov esi [esp+54h] +
mov ebx [esp+50h] +
mov dword ptr [esp+4] offset aListIdPInterna +
mov [esp+8] esi +
mov [esp] ebx +
call fprintf  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 4Ah +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aNumFPoolN_lnTo +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 4Ah +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset asc_465354 +
call fwrite  +
mov edi [esi+1Ch] +
mov ecx [esi+14h] +
mov edx [esi+10h] +
mov eax [esi+0Ch] +
mov [esp+28h] edi +
mov edi [esi+18h] +
mov [esp+20h] ecx +
mov [esp+1Ch] edx +
mov [esp+18h] eax +
mov [esp+24h] edi +
mov eax [esi+8] +
mov [esp+14h] eax +
movsx eax word ptr [esi+6] +
mov [esp+10h] eax +
movsx eax word ptr [esi+4] +
mov [esp+0Ch] eax +
mov eax [esi] +
mov dword ptr [esp+4] offset a4d1d4d4d10p10p +
mov [esp] ebx +
mov [esp+8] eax +
call fprintf  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 8Eh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aNodePoolsIdxNp +
call fwrite  +
mov edi [esi+18h] +
test edi edi +
jz loc_40739E  +
lea esi [esi+0] +
mov edx [edi+4] +
add ebp 1 +
mov eax [edi] +
mov [esp+0Ch] edi +
mov dword ptr [esp+1Ch] 0 +
mov [esp+18h] edx +
mov [esp+14h] eax +
mov dword ptr [esp+10h] 0 +
mov [esp+8] ebp +
mov dword ptr [esp+4] offset a4d10p0x08x10p1 +
mov [esp] ebx +
call fprintf  +
mov edi [edi] +
test edi edi +
jnz loc_407360  +
test ebx ebx +
jz loc_407433  +
mov [esp+0Ch] ebx +
xor ebp ebp +
mov dword ptr [esp+8] 0A7h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aListElementsNL +
call fwrite  +
mov edi [esi+0Ch] +
test edi edi +
jz loc_407415  +
nop   +
mov ecx [edi+8] +
add ebp 1 +
mov edx [edi+4] +
mov eax [edi] +
mov [esp+0Ch] edi +
mov dword ptr [esp+20h] 0 +
mov [esp+1Ch] ecx +
mov [esp+18h] edx +
mov [esp+14h] eax +
mov dword ptr [esp+10h] 0 +
mov [esp+8] ebp +
mov dword ptr [esp+4] offset a4d10p10x10p10p +
mov [esp] ebx +
call fprintf  +
mov edi [edi] +
test edi edi +
jnz loc_4073D0  +
mov eax [esi] +
cmp eax ebp +
jz loc_407433  +
mov [esp+0Ch] ebp +
mov [esp+8] eax +
mov dword ptr [esp+4] offset aListCountIsNot +
mov [esp] ebx +
call fprintf  +
add esp 3Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
sub esp 14h +
mov esi [esp+14h+arg_0] +
mov eax [esi+78h] +
test eax eax +
jz loc_40745F  +
mov [esp+14h+var_14] eax +
call free  +
mov dword ptr [esi+78h] 0 +
mov eax [esi+7Ch] +
test eax eax +
jz loc_407475  +
mov [esp+14h+var_14] eax +
call free  +
mov dword ptr [esi+7Ch] 0 +
xor ebx ebx +
mov eax [esi+ebx*4+80h] +
test eax eax +
jz loc_407495  +
mov [esp+14h+var_14] eax +
call free  +
mov dword ptr [esi+ebx*4+80h] 0 +
add ebx 1 +
cmp ebx 0Ch +
jnz loc_407477  +
mov [esp+14h+arg_0] esi +
add esp 14h +
pop ebx  +
pop esi  +
jmp free  +
***
sub esp 1Ch +
mov eax [esp+1Ch+arg_0] +
test eax eax +
jnz loc_4074C1  +
xor eax eax +
add esp 1Ch +
retn   +
mov edx [esp+1Ch+arg_4] +
test edx edx +
jz loc_4074BB  +
mov edx [esp+1Ch+arg_4] +
mov [esp+1Ch+var_14] 40h +
mov [esp+1Ch+var_1C] eax +
mov [esp+1Ch+var_18] edx +
call ds:_strnicmp  +
add esp 1Ch +
retn   +
***
mov esi eax +
mov [esp+18h+var_18] 180h +
push edi  +
mov edi 1 +
push esi  +
push ebx  +
mov esi [esp+0Ch+arg_4] +
mov edx [esp+0Ch+arg_0] +
jmp loc_4075D0  +
add eax 1 +
add edx 0Ch +
cmp eax 20h +
jz loc_407605  +
cmp dword ptr [edx] 1 +
jnz loc_4075C5  +
test eax eax +
mov ebp edi +
lea ecx [eax+7] +
cmovns ecx eax +
sar ecx 3 +
neg ecx  +
lea ebx [ecx+3] +
mov ecx eax +
and ecx 7 +
shl ebp cl +
mov ecx ebp +
mov ebp [edx+8] +
test ebp ebp +
jz loc_407610  +
add eax 1 +
add edx 0Ch +
or [esi+ebx] cl +
cmp eax 20h +
jnz loc_4075D0  +
pop ebx  +
xor al al +
pop esi  +
pop edi  +
pop ebp  +
retn   +
not ecx  +
and [esi+ebx] cl +
jmp loc_4075C5  +
***
push edi  +
mov ebp 1 +
push esi  +
push ebx  +
mov edi [esp+0Ch+arg_8] +
mov edx [esp+0Ch+arg_0] +
jmp loc_407640  +
add eax 1 +
add edx 0Ch +
cmp eax 20h +
jz loc_407680  +
cmp dword ptr [edx] 2 +
jnz loc_407635  +
test eax eax +
mov ecx eax +
lea ebx [eax+7] +
mov esi ebp +
cmovns ebx eax +
and ecx 7 +
shl esi cl +
mov ecx esi +
mov esi [edx+4] +
sar ebx 3 +
neg ebx  +
add ebx 3 +
bt edi esi +
jnb loc_407687  +
mov esi [esp+0Ch+arg_4] +
add eax 1 +
add edx 0Ch +
or [esi+ebx] cl +
cmp eax 20h +
jnz loc_407640  +
lea esi [esi+0] +
pop ebx  +
xor al al +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi [esp+0Ch+arg_4] +
not ecx  +
and [esi+ebx] cl +
jmp loc_407635  +
***
push edi  +
mov ebp 1 +
push esi  +
push ebx  +
mov edx [esp+0Ch+arg_0] +
movzx edi [esp+0Ch+arg_8] +
jmp loc_4076C1  +
add eax 1 +
add edx 0Ch +
cmp eax 20h +
jz loc_407700  +
cmp dword ptr [edx] 3 +
jnz loc_4076B6  +
test eax eax +
mov ecx eax +
lea ebx [eax+7] +
mov esi ebp +
cmovns ebx eax +
and ecx 7 +
shl esi cl +
mov ecx esi +
mov esi [edx+4] +
sar ebx 3 +
neg ebx  +
add ebx 3 +
bt edi esi +
jnb loc_407707  +
mov esi [esp+0Ch+arg_4] +
add eax 1 +
add edx 0Ch +
or [esi+ebx] cl +
cmp eax 20h +
jnz loc_4076C1  +
nop   +
lea esi [esi+0] +
pop ebx  +
xor al al +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi [esp+0Ch+arg_4] +
not ecx  +
and [esi+ebx] cl +
jmp loc_4076B6  +
***
push edi  +
push esi  +
push ebx  +
mov ebp [esp+0Ch+arg_4] +
mov edi [esp+0Ch+arg_8] +
mov edx [esp+0Ch+arg_0] +
jmp loc_40773F  +
add eax 1 +
add edx 0Ch +
cmp eax 20h +
jz loc_407780  +
cmp dword ptr [edx] 4 +
jnz loc_407734  +
mov ecx eax +
mov ebx 1 +
and ecx 7 +
test eax eax +
lea esi [eax+7] +
cmovns esi eax +
sar esi 3 +
neg esi  +
shl ebx cl +
and bl [ebp+esi+3] +
movzx ebx bl +
sar ebx cl +
mov ecx [edx+4] +
and ebx 1 +
shl ebx cl +
test bl bl +
jz loc_407787  +
add eax 1 +
add edx 0Ch +
or [edi] bl +
cmp eax 20h +
jnz loc_40773F  +
nop   +
pop ebx  +
xor al al +
pop esi  +
pop edi  +
pop ebp  +
retn   +
and byte ptr [edi] 0FFh +
jmp loc_407734  +
***
mov edx [esp+arg_0] +
xor eax eax +
jmp loc_4077A3  +
add eax 1 +
add edx 0Ch +
cmp eax 20h +
jz loc_4077C0  +
cmp dword ptr [edx] 4 +
jnz loc_407798  +
test eax eax +
lea edx [eax+7] +
cmovs eax edx +
sar eax 3 +
neg eax  +
add eax 3 +
retn   +
mov eax 0FFFFFFFFh +
retn   +
***
mov [esp+18h+var_18] 0B0h +
push ebx  +
sub esp 20h +
mov eax [esp+20h+arg_0] +
mov eax [eax+17Ch] +
mov [esp+20h+var_20] eax +
call sub_406F20  +
test eax eax +
mov esi eax +
jnz loc_40785D  +
jmp loc_4078B0  +
mov [esp+20h+var_20] edi +
call malloc  +
test eax eax +
mov [ebx+7Ch] eax +
jz loc_407879  +
mov [esp+20h+var_20] esi +
call sub_406F40  +
test eax eax +
mov esi eax +
jz loc_4078B0  +
mov [esp+20h+var_20] esi +
call sub_406F60  +
mov edi [eax+44h] +
mov ebx eax +
mov [esp+20h+var_20] edi +
call malloc  +
test eax eax +
mov [ebx+78h] eax +
jnz loc_407840  +
mov eax ds:dword_486584 +
mov [esp+20h+var_10] edi +
mov [esp+20h+var_14] ebx +
mov [esp+20h+var_1C] offset aSCanTAllocBuff +
mov [esp+20h+var_18] eax +
mov [esp+20h+var_20] 0 +
call sub_401740  +
add esp 20h +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
retn   +
add esp 20h +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
push esi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+2Ch+arg_4] +
mov [esp+2Ch+var_2C] ebx +
call strlen  +
mov edi eax +
mov eax [esp+2Ch+arg_0] +
mov eax [eax+17Ch] +
mov [esp+2Ch+var_2C] eax +
call sub_406F20  +
mov [esp+2Ch+var_14] 0 +
mov [esp+2Ch+var_10] 0 +
test eax eax +
mov ebp eax +
jz loc_407A08  +
lea esi [esi+0] +
mov [esp+2Ch+var_2C] ebp +
call sub_406F60  +
mov [esp+2Ch+var_24] edi +
mov [esp+2Ch+var_2C] ebx +
mov [esp+2Ch+var_28] eax +
mov esi eax +
call strncmp  +
test eax eax +
jnz loc_4079E7  +
add [esp+2Ch+var_14] 1 +
mov [esp+2Ch+var_10] esi +
mov [esp+2Ch+var_2C] ebp +
call sub_406F40  +
test eax eax +
mov ebp eax +
jnz loc_4079C0  +
cmp [esp+2Ch+var_14] 1 +
jnz loc_407A08  +
mov eax [esp+2Ch+var_10] +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add esp 2Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push esi  +
push ebx  +
sub esp 5Ch +
mov eax [esp+5Ch+arg_0] +
mov esi [esp+5Ch+arg_8] +
mov edi [esp+5Ch+arg_10] +
mov [esp+5Ch+var_18] eax +
mov eax [esp+5Ch+arg_4] +
test esi esi +
mov [esp+5Ch+var_14] eax +
jz loc_407BD4  +
cmp edi 2 +
jg loc_407BAB  +
mov ebx [esi+40h] +
mov eax offset aYes +
movzx ecx byte ptr [esi+61h] +
movzx edx byte ptr [esi+60h] +
mov ebp [esi+54h] +
test ebx ebx +
mov ebx offset aNo +
cmovz eax ebx +
mov ebx [esi+74h] +
mov [esp+5Ch+var_20] ecx +
mov [esp+5Ch+var_24] edx +
mov ecx [esi+58h] +
mov [esp+5Ch+var_2C] ebp +
mov [esp+5Ch+var_28] ecx +
mov ecx [esi+4Ch] +
mov [esp+5Ch+var_30] ecx +
mov ecx [esi+48h] +
mov [esp+5Ch+var_34] ecx +
mov ecx [esi+44h] +
mov [esp+5Ch+var_3C] eax +
mov [esp+5Ch+var_40] ebx +
mov [esp+5Ch+var_38] ecx +
mov eax [esi+6Ch] +
mov [esp+5Ch+var_44] eax +
mov eax [esi+68h] +
mov [esp+5Ch+var_48] eax +
mov eax [esi+64h] +
mov [esp+5Ch+var_50] esi +
mov [esp+5Ch+var_58] offset aS11s4d5d5d4d6s +
mov [esp+5Ch+var_4C] eax +
mov eax [esp+5Ch+var_18] +
mov [esp+5Ch+var_54] eax +
mov eax [esp+5Ch+var_14] +
mov [esp+5Ch+var_5C] eax +
call fprintf  +
cmp edi 4 +
jg loc_407AE5  +
add esp 5Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+5Ch+var_18] +
mov [esp+5Ch+var_58] offset aSMemoryOpsSOer +
mov [esp+5Ch+var_5C] 5 +
mov [esp+5Ch+var_4C] eax +
mov [esp+5Ch+var_50] eax +
mov [esp+5Ch+var_54] eax +
call sub_401740  +
xor eax eax +
mov [esp+5Ch+var_10] esi +
mov esi eax +
mov eax [esp+5Ch+var_10] +
mov ebx 1Fh +
mov eax [eax+esi*4+80h] +
test eax eax +
jnz loc_407B32  +
jmp loc_407B97  +
mov eax [esp+5Ch+var_10] +
mov eax [eax+esi*4+80h] +
cmp ebx 1Fh +
jz loc_407C03  +
mov ecx offset asc_46568E +
lea edx [ebx+ebx*2] +
lea eax [eax+edx*4] +
mov edx [eax] +
mov ebp [eax+8] +
mov edi [eax+4] +
mov eax offset aUnknownBitType +
cmp edx 4 +
ja loc_407B5F  +
mov eax ds:off_465B44[edx*4] +
mov [esp+5Ch+var_48] eax +
mov eax [esp+5Ch+var_18] +
mov [esp+5Ch+var_4C] ebx +
sub ebx 1 +
mov [esp+5Ch+var_40] ebp +
mov [esp+5Ch+var_44] edi +
mov [esp+5Ch+var_54] eax +
mov eax [esp+5Ch+var_14] +
mov [esp+5Ch+var_50] ecx +
mov [esp+5Ch+var_58] offset aS11s8d8s5d5d +
mov [esp+5Ch+var_5C] eax +
call fprintf  +
cmp ebx 0FFFFFFFFh +
jnz loc_407B27  +
add esi 1 +
cmp esi 0Ch +
jnz loc_407B11  +
add esp 5Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+5Ch+var_18] +
mov [esp+5Ch+var_58] offset aSBlockPollPage +
mov [esp+5Ch+var_4C] eax +
mov [esp+5Ch+var_50] eax +
mov [esp+5Ch+var_54] eax +
mov eax [esp+5Ch+var_14] +
mov [esp+5Ch+var_5C] eax +
call fprintf  +
jmp loc_407A53  +
mov eax [esp+5Ch+var_18] +
mov [esp+5Ch+arg_4] offset aSBlockPollPage +
mov [esp+5Ch+arg_10] eax +
mov [esp+5Ch+arg_C] eax +
mov [esp+5Ch+arg_8] eax +
mov eax [esp+5Ch+var_14] +
mov [esp+5Ch+arg_0] eax +
add esp 5Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp fprintf  +
mov ecx ds:off_465BE0[esi*4] +
jmp loc_407B40  +
***
sub esp 14h +
push esi  +
push ebx  +
sub esp 1Ch +
mov ebp [esp+1Ch+arg_0] +
call sub_407C10  +
mov ecx 0A2h +
mov esi ebp +
mov ebx eax +
mov eax [eax+17Ch] +
mov edi ebx +
movs   +
mov [ebx+17Ch] eax +
mov eax [ebp+17Ch] +
mov [esp+1Ch+var_1C] eax +
call sub_406F20  +
test eax eax +
mov esi eax +
jz loc_407D10  +
lea esi [esi+0] +
mov [esp+1Ch+var_1C] esi +
call sub_406F60  +
mov [esp+1Ch+var_1C] eax +
call sub_4078C0  +
mov edx [ebx+17Ch] +
mov [esp+1Ch+var_1C] edx +
mov [esp+1Ch+var_18] eax +
call sub_406D30  +
mov [esp+1Ch+var_1C] esi +
call sub_406F40  +
test eax eax +
mov esi eax +
jnz loc_407CE0  +
xor esi esi +
mov eax [ebx+esi*4+14Ch] +
call sub_4074F0  +
mov [ebx+esi*4+14Ch] eax +
add esi 1 +
cmp esi 0Ch +
jnz loc_407D12  +
add esp 1Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
xor ebx ebx +
sub esp 14h +
mov esi [esp+14h+arg_0] +
mov eax [esi+17Ch] +
mov [esp+14h+var_10] offset sub_407440 +
mov [esp+14h+var_14] eax +
call sub_406D00  +
mov dword ptr [esi+17Ch] 0 +
nop   +
lea esi [esi+0] +
mov eax [esi+ebx*4+14Ch] +
test eax eax +
jz loc_407D8E  +
mov [esp+14h+var_14] eax +
call free  +
mov dword ptr [esi+ebx*4+14Ch] 0 +
add ebx 1 +
cmp ebx 0Ch +
jnz loc_407D70  +
mov [esp+14h+arg_0] esi +
add esp 14h +
pop ebx  +
pop esi  +
jmp free  +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov eax [esp+1Ch+arg_0] +
mov edi [esp+1Ch+arg_4] +
mov [esp+1Ch+var_1C] eax +
call sub_406F20  +
mov esi ds:_stricmp +
test eax eax +
mov ebp eax +
jz loc_407E2C  +
mov [esp+1Ch+var_1C] ebp +
call sub_406F60  +
mov [esp+1Ch+var_1C] edi +
mov ebx eax +
lea eax [eax+40h] +
mov [esp+1Ch+var_18] eax +
call esi  +
test eax eax +
jnz loc_407E00  +
mov [esp+1Ch+var_1C] ebp +
call sub_406F40  +
add esp 1Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+1Ch+var_18] ebx +
mov [esp+1Ch+var_1C] edi +
call esi  +
mov [esp+1Ch+var_1C] ebp +
test eax eax +
setz [esp+1Ch+var_D]  +
call sub_406F40  +
cmp [esp+1Ch+var_D] 0 +
mov ebp eax +
jnz loc_407E25  +
test eax eax +
jnz loc_407DD3  +
cmp [esp+1Ch+var_D] 0 +
jnz loc_407DF5  +
add esp 1Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
sub esp 14h +
mov eax [esp+14h+arg_0] +
mov esi [esp+14h+arg_4] +
mov [esp+14h+var_14] eax +
call sub_406F20  +
test eax eax +
mov ebx eax +
jnz loc_407E6E  +
jmp loc_407E81  +
mov [esp+14h+var_14] ebx +
call sub_406F40  +
test eax eax +
mov ebx eax +
jz loc_407E81  +
mov [esp+14h+var_14] ebx +
call sub_406F60  +
cmp [eax+6Ch] esi +
jnz loc_407E60  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
sub esp 14h +
cmp [esp+14h+arg_8] 3 +
mov ebx [esp+14h+arg_4] +
jnz loc_407EE2  +
mov eax [esp+14h+arg_0] +
mov [esp+14h+var_14] eax +
call sub_406F20  +
test eax eax +
mov esi eax +
jz loc_407EE2  +
mov [esp+14h+var_14] esi +
call sub_406F60  +
xor edx edx +
movzx ecx byte ptr [ebx+edx] +
cmp [eax+edx+76h] cl +
jnz loc_407ED4  +
add edx 1 +
cmp edx 3 +
jnz loc_407EBC  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov [esp+14h+var_14] esi +
call sub_406F40  +
test eax eax +
mov esi eax +
jnz loc_407EB2  +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
push ebx  +
sub esp 20h +
mov eax [esp+20h+arg_0] +
mov edi [esp+20h+arg_4] +
mov esi [esp+20h+arg_8] +
mov [esp+20h+var_20] eax +
call sub_406F20  +
test eax eax +
mov ebx eax +
jz loc_407F4C  +
mov [esp+20h+var_20] ebx +
call sub_406F60  +
mov edx eax +
mov eax [eax+284h] +
mov [esp+20h+var_1C] edx +
mov [esp+20h+var_10] esi +
mov [esp+20h+var_14] eax +
lea eax [edx+180h] +
add edx 40h +
mov [esp+20h+var_18] eax +
mov [esp+20h+var_20] edx +
call edi  +
mov [esp+20h+var_20] ebx +
call sub_406F40  +
test eax eax +
mov ebx eax +
jnz loc_407F10  +
add esp 20h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
sub esp 1Ch +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_18] offset sub_4074B0 +
mov [esp+1Ch+var_1C] eax +
call sub_407220  +
add esp 1Ch +
retn   +
***
push esi  +
push ebx  +
sub esp 0BCh +
mov edx [esp+0BCh+arg_4] +
mov eax [esp+0BCh+arg_C] +
mov edi [esp+0BCh+arg_0] +
mov ebx [esp+0BCh+arg_8] +
mov [esp+0BCh+var_30] offset aNo +
mov [esp+0BCh+var_34] eax +
movzx eax byte ptr [edx+0A0h] +
mov [esp+0BCh+var_2C] eax +
mov eax [edx+9Ch] +
mov [esp+0BCh+var_28] eax +
mov eax [edx+98h] +
mov [esp+0BCh+var_24] eax +
mov eax [edx+94h] +
mov [esp+0BCh+var_20] eax +
mov eax [edx+90h] +
mov [esp+0BCh+var_1C] eax +
mov eax [edx+8Ch] +
mov [esp+0BCh+var_18] eax +
mov eax [edx+88h] +
mov [esp+0BCh+var_14] eax +
mov eax [edx+84h] +
test al 2 +
jz loc_408034  +
mov esi offset aPsuedo +
test al 4 +
mov ecx offset aYes +
cmovnz ecx esi +
mov [esp+0BCh+var_30] ecx +
test al 1 +
mov ebp offset aYes +
mov eax offset aNo +
cmovz ebp eax +
mov eax [edx+80h] +
mov [esp+0BCh+var_10] edx +
mov [esp+0BCh+var_BC] eax +
call sub_411110  +
mov edx [esp+0BCh+var_10] +
mov ecx offset aDedicated +
mov esi [edx+7Ch] +
test esi esi +
jz loc_40807B  +
cmp esi 1 +
mov ecx offset aInvalid +
mov esi offset aPossibleIO +
cmovz ecx esi +
mov esi [edx+70h] +
mov [esp+0BCh+var_90] ecx +
mov [esp+0BCh+var_80] ebp +
mov [esp+0BCh+var_3C] ebx +
mov [esp+0BCh+var_10] esi +
mov esi [esp+0BCh+var_2C] +
mov [esp+0BCh+var_44] ebx +
mov [esp+0BCh+var_4C] ebx +
mov [esp+0BCh+var_54] ebx +
mov [esp+0BCh+var_40] esi +
mov esi [esp+0BCh+var_28] +
mov [esp+0BCh+var_5C] ebx +
mov [esp+0BCh+var_64] ebx +
mov [esp+0BCh+var_6C] ebx +
mov [esp+0BCh+var_48] esi +
mov esi [esp+0BCh+var_24] +
mov [esp+0BCh+var_74] ebx +
mov [esp+0BCh+var_7C] ebx +
mov [esp+0BCh+var_84] ebx +
mov [esp+0BCh+var_50] esi +
mov esi [esp+0BCh+var_20] +
mov [esp+0BCh+var_88] eax +
mov [esp+0BCh+var_8C] ebx +
mov [esp+0BCh+var_94] ebx +
mov [esp+0BCh+var_58] esi +
mov esi [esp+0BCh+var_1C] +
mov [esp+0BCh+var_60] esi +
mov esi [esp+0BCh+var_18] +
mov [esp+0BCh+var_68] esi +
mov esi [esp+0BCh+var_14] +
mov [esp+0BCh+var_70] esi +
mov esi [esp+0BCh+var_30] +
mov [esp+0BCh+var_78] esi +
movzx eax byte ptr [edx+75h] +
mov [esp+0BCh+var_98] eax +
mov [esp+0BCh+var_9C] ebx +
movzx eax byte ptr [edx+74h] +
mov [esp+0BCh+var_B0] edx +
mov [esp+0BCh+var_A4] ebx +
mov [esp+0BCh+var_AC] ebx +
mov [esp+0BCh+var_A0] eax +
mov eax [esp+0BCh+var_10] +
mov [esp+0BCh+var_B4] ebx +
mov [esp+0BCh+var_B8] offset aSavrPartSSchip +
mov [esp+0BCh+var_BC] edi +
mov [esp+0BCh+var_A8] eax +
mov [esp+0BCh+var_2C] edx +
call fprintf  +
mov [esp+0BCh+var_BC] ebx +
call strlen  +
lea esi [eax+5] +
mov ebp eax +
mov [esp+0BCh+var_BC] esi +
call malloc  +
mov edx [esp+0BCh+var_2C] +
test eax eax +
mov [esp+0BCh+var_30] eax +
jz loc_4081B1  +
mov [esp+0BCh+var_B4] ebp +
mov [esp+0BCh+var_B8] ebx +
mov ebx eax +
mov [esp+0BCh+var_BC] eax +
add ebp ebx +
call memcpy  +
mov edx 2020h +
mov [ebp+0] dx +
mov edx [esp+0BCh+var_2C] +
mov byte ptr [ebp+2] 0 +
cmp [esp+0BCh+var_34] 2 +
jle loc_408230  +
mov eax [edx+17Ch] +
mov [esp+0BCh+var_BC] eax +
call sub_406F20  +
test eax eax +
mov ebp eax +
jz loc_408205  +
nop   +
mov [esp+0BCh+var_BC] ebp +
call sub_406F60  +
mov ecx [esp+0BCh+var_34] +
mov [esp+0BCh+var_B0] esi +
mov [esp+0BCh+var_B8] edi +
mov [esp+0BCh+var_BC] ebx +
mov [esp+0BCh+var_AC] ecx +
mov [esp+0BCh+var_B4] eax +
call sub_407A20  +
mov [esp+0BCh+var_BC] ebp +
call sub_406F40  +
test eax eax +
mov ebp eax +
jnz loc_4081D0  +
mov eax [esp+0BCh+var_30] +
test eax eax +
jz loc_408260  +
mov eax [esp+0BCh+var_30] +
mov [esp+0BCh+arg_0] eax +
add esp 0BCh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp free  +
mov [esp+0BCh+var_AC] ebx +
mov [esp+0BCh+var_B0] ebx +
mov [esp+0BCh+var_B4] ebx +
mov [esp+0BCh+var_B8] offset aSBlockPollPage +
mov [esp+0BCh+var_BC] edi +
mov [esp+0BCh+var_2C] edx +
call fprintf  +
mov edx [esp+0BCh+var_2C] +
jmp loc_4081BB  +
add esp 0BCh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
sub esp 28h +
mov eax [ebp+arg_0] +
mov byte ptr [eax] 0 +
mov [esp+28h+var_14] offset unk_484170 +
mov [esp+28h+var_18] eax +
mov [esp+28h+var_1C] 104h +
mov [esp+28h+var_20] 0 +
mov [esp+28h+var_24] offset aAvrdude_conf +
mov [esp+28h+var_28] 0 +
call ds:SearchPathA  +
sub esp 18h +
leave   +
retn   +
***
sub esp 28h +
mov eax [ebp+arg_0] +
mov byte ptr [eax] 0 +
mov [esp+28h+var_14] offset unk_484170 +
mov [esp+28h+var_18] eax +
mov [esp+28h+var_1C] 104h +
mov [esp+28h+var_20] 0 +
mov [esp+28h+var_24] offset aAvrdude_rc +
mov [esp+28h+var_28] 0 +
call ds:SearchPathA  +
sub esp 18h +
leave   +
retn   +
***
xor eax eax +
retn   +
***
sub esp 1Ch +
mov eax ds:dword_486584 +
mov [esp+1Ch+var_18] offset aSProgrammerOpe +
mov [esp+1Ch+var_1C] 0 +
mov [esp+1Ch+var_14] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
add esp 1Ch +
retn   +
***
sub esp 1Ch +
mov eax ds:dword_486584 +
mov [esp+1Ch+var_18] offset aSProgrammerOpe +
mov [esp+1Ch+var_1C] 0 +
mov [esp+1Ch+var_14] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
add esp 1Ch +
retn   +
***
sub esp 1Ch +
mov eax ds:dword_486584 +
mov [esp+1Ch+var_18] offset aSProgrammerOpe +
mov [esp+1Ch+var_1C] 0 +
mov [esp+1Ch+var_14] eax +
call sub_401740  +
add esp 1Ch +
retn   +
***
sub esp 1Ch +
mov eax ds:dword_486584 +
mov [esp+1Ch+var_18] offset aSProgrammerOpe +
mov [esp+1Ch+var_1C] 0 +
mov [esp+1Ch+var_14] eax +
call sub_401740  +
add esp 1Ch +
retn   +
***
sub esp 1Ch +
mov eax ds:dword_486584 +
mov [esp+1Ch+var_18] offset aSProgrammerOpe +
mov [esp+1Ch+var_1C] 0 +
mov [esp+1Ch+var_14] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
add esp 1Ch +
retn   +
***
sub esp 1Ch +
mov eax ds:dword_486584 +
mov [esp+1Ch+var_18] offset aSFatalErrorPro +
mov [esp+1Ch+var_1C] 0 +
mov [esp+1Ch+var_14] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
add esp 1Ch +
retn   +
***
push esi  +
push ebx  +
sub esp 14h +
mov eax [esp+20h] +
mov ebx [esp+24h] +
test eax eax +
jnz loc_408470  +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
test ebx ebx +
jz loc_408461  +
mov eax [eax] +
mov [esp] eax +
call sub_406F20  +
mov [esp] eax +
call sub_406F60  +
mov esi eax +
mov eax [ebx] +
mov [esp] eax +
call sub_406F20  +
mov [esp] eax +
call sub_406F60  +
mov [esp] esi +
mov dword ptr [esp+8] 20h +
mov [esp+4] eax +
call ds:_strnicmp  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
***
push ebx  +
sub esp 10h +
mov [esp+10h+var_10] 0A68h +
call malloc  +
test eax eax +
mov ebx eax +
jz loc_4086A3  +
xor eax eax +
mov ecx 29Ah +
mov edi ebx +
xor esi esi +
stos   +
lea edi [ebx+1A8h] +
mov [esp+10h+var_C] 0 +
mov [esp+10h+var_10] 0 +
call sub_406BF0  +
mov [esp+10h+var_C] 0 +
mov [esp+10h+var_10] 0 +
mov [ebx] eax +
call sub_406BF0  +
mov byte ptr [ebx+4] 0 +
mov byte ptr [ebx+54h] 0 +
mov byte ptr [ebx+954h] 0 +
mov dword ptr [ebx+0A58h] 0 +
mov dword ptr [ebx+480h] 0 +
mov [ebx+488h] eax +
mov dword ptr [ebx+178h] 0 +
lea esi [esi+0] +
mov dword ptr [ebx+esi*4+17Ch] 0 +
add esi 1 +
mov [esp+10h+var_10] edi +
add edi 40h +
call sub_410900  +
cmp esi 0Bh +
jnz loc_408550  +
mov dword ptr [ebx+8C8h] offset sub_4083F0 +
mov eax ebx +
mov dword ptr [ebx+8CCh] offset sub_4083C0 +
mov dword ptr [ebx+8D0h] offset sub_408390 +
mov dword ptr [ebx+8D4h] offset sub_408390 +
mov dword ptr [ebx+8D8h] offset dword_408320 +
mov dword ptr [ebx+8DCh] offset dword_408320 +
mov dword ptr [ebx+8E0h] offset sub_4083F0 +
mov dword ptr [ebx+8E4h] offset sub_4083F0 +
mov dword ptr [ebx+8F8h] offset sub_408420 +
mov dword ptr [ebx+8FCh] offset sub_408390 +
mov dword ptr [ebx+914h] offset sub_408360 +
mov dword ptr [ebx+910h] offset sub_408330 +
mov dword ptr [ebx+8B8h] offset loc_408310 +
mov dword ptr [ebx+8BCh] offset loc_408310 +
mov dword ptr [ebx+8C0h] offset loc_408310 +
mov dword ptr [ebx+8C4h] offset loc_408310 +
mov dword ptr [ebx+8ECh] 0 +
mov dword ptr [ebx+8F0h] 0 +
mov dword ptr [ebx+8F4h] 0 +
mov dword ptr [ebx+900h] 0 +
mov dword ptr [ebx+904h] 0 +
mov dword ptr [ebx+90Ch] 0 +
mov dword ptr [ebx+918h] 0 +
mov dword ptr [ebx+924h] 0 +
mov dword ptr [ebx+928h] 0 +
mov dword ptr [ebx+92Ch] 0 +
mov dword ptr [ebx+944h] 0 +
mov dword ptr [ebx+948h] 0 +
mov dword ptr [ebx+94Ch] 0 +
mov dword ptr [ebx+950h] 0 +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov eax ds:dword_486584 +
mov [esp+10h+var_C] offset aSOutOfMemoryAl +
mov [esp+10h+var_10] 0 +
mov [esp+10h+var_8] eax +
call sub_401740  +
xor eax eax +
jmp loc_40869C  +
***
mov ebx [esp+18h+arg_0] +
mov eax [ebx] +
mov [esp+18h+var_14] offset free +
mov [esp+18h+var_18] eax +
call sub_406D00  +
mov eax [ebx+488h] +
mov [esp+18h+var_14] offset free +
mov [esp+18h+var_18] eax +
call sub_406D00  +
mov dword ptr [ebx] 0 +
mov dword ptr [ebx+488h] 0 +
mov [esp+18h+arg_0] ebx +
add esp 18h +
pop ebx  +
jmp free  +
***
push esi  +
sub esp 14h +
push ebx  +
sub esp 10h +
mov ebx [esp+10h+arg_8] +
mov edi [esp+10h+arg_0] +
mov esi [esp+10h+arg_4] +
test bl 2 +
jnz loc_408AA0  +
test bl 4 +
jnz loc_408A70  +
test bl 8 +
jnz loc_408A40  +
test bl 10h +
jnz loc_408A10  +
test bl 20h +
jnz loc_4089E0  +
test bl 40h +
jnz loc_4089B0  +
test bl 80h +
jnz loc_408980  +
test bh 1 +
jnz loc_408950  +
test bh 2 +
jnz loc_408923  +
and bh 4 +
nop   +
jz loc_40891C  +
add edi 428h +
mov [esp+10h+var_10] edi +
call sub_411070  +
mov [esp+10h+var_8] esi +
mov [esp+10h+var_C] offset aSVfyLedS +
mov [esp+10h+var_10] 0 +
mov [esp+10h+var_4] eax +
call sub_401740  +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
lea eax [edi+3E8h] +
mov [esp+10h+var_10] eax +
call sub_411070  +
mov [esp+10h+var_8] esi +
mov [esp+10h+var_C] offset aSPgmLedS +
mov [esp+10h+var_10] 0 +
mov [esp+10h+var_4] eax +
call sub_401740  +
jmp loc_4088EB  +
lea eax [edi+3A8h] +
mov [esp+10h+var_10] eax +
call sub_411070  +
mov [esp+10h+var_8] esi +
mov [esp+10h+var_C] offset aSRdyLedS +
mov [esp+10h+var_10] 0 +
mov [esp+10h+var_4] eax +
call sub_401740  +
jmp loc_4088E6  +
lea eax [edi+368h] +
mov [esp+10h+var_10] eax +
call sub_411070  +
mov [esp+10h+var_8] esi +
mov [esp+10h+var_C] offset aSErrLedS +
mov [esp+10h+var_10] 0 +
mov [esp+10h+var_4] eax +
call sub_401740  +
jmp loc_4088E1  +
lea eax [edi+328h] +
mov [esp+10h+var_10] eax +
call sub_411070  +
mov [esp+10h+var_8] esi +
mov [esp+10h+var_C] offset aSMisoS +
mov [esp+10h+var_10] 0 +
mov [esp+10h+var_4] eax +
call sub_401740  +
jmp loc_4088D8  +
lea eax [edi+2E8h] +
mov [esp+10h+var_10] eax +
call sub_411070  +
mov [esp+10h+var_8] esi +
mov [esp+10h+var_C] offset aSMosiS +
mov [esp+10h+var_10] 0 +
mov [esp+10h+var_4] eax +
call sub_401740  +
jmp loc_4088CF  +
lea eax [edi+2A8h] +
mov [esp+10h+var_10] eax +
call sub_411070  +
mov [esp+10h+var_8] esi +
mov [esp+10h+var_C] offset aSSckS +
mov [esp+10h+var_10] 0 +
mov [esp+10h+var_4] eax +
call sub_401740  +
jmp loc_4088C6  +
lea eax [edi+268h] +
mov [esp+10h+var_10] eax +
call sub_411070  +
mov [esp+10h+var_8] esi +
mov [esp+10h+var_C] offset aSResetS +
mov [esp+10h+var_10] 0 +
mov [esp+10h+var_4] eax +
call sub_401740  +
jmp loc_4088BD  +
lea eax [edi+228h] +
mov [esp+10h+var_10] eax +
call sub_411070  +
mov [esp+10h+var_8] esi +
mov [esp+10h+var_C] offset aSBuffS +
mov [esp+10h+var_10] 0 +
mov [esp+10h+var_4] eax +
call sub_401740  +
jmp loc_4088B4  +
lea eax [edi+1E8h] +
mov [esp+10h+var_10] eax +
call sub_411070  +
mov [esp+10h+var_8] esi +
mov [esp+10h+var_C] offset aSVccS +
mov [esp+10h+var_10] 0 +
mov [esp+10h+var_4] eax +
call sub_401740  +
jmp loc_4088AB  +
***
sub esp 1Ch +
mov eax [esp+1Ch+arg_4] +
mov [esp+1Ch+var_14] 0FFFFFFFFh +
mov [esp+1Ch+var_18] eax +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_1C] eax +
call sub_408890  +
add esp 1Ch +
retn   +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov eax [esp+1Ch+arg_0] +
mov edi [esp+1Ch+arg_4] +
mov [esp+1Ch+var_1C] eax +
call sub_406F20  +
mov esi ds:_stricmp +
test eax eax +
mov [esp+1Ch+var_14] eax +
jz loc_408BB3  +
lea esi [esi+0] +
mov eax [esp+1Ch+var_14] +
mov [esp+1Ch+var_1C] eax +
call sub_406F60  +
mov [esp+1Ch+var_10] eax +
mov eax [eax] +
mov [esp+1Ch+var_1C] eax +
call sub_406F20  +
test eax eax +
mov ebp eax +
jnz loc_408B56  +
jmp loc_408BAA  +
test eax eax +
jz loc_408B7A  +
mov [esp+1Ch+var_1C] ebp +
call sub_406F60  +
mov [esp+1Ch+var_1C] edi +
mov [esp+1Ch+var_18] eax +
call esi  +
mov [esp+1Ch+var_1C] ebp +
test eax eax +
setz bl  +
call sub_406F40  +
test bl bl +
mov ebp eax +
jz loc_408B52  +
movzx eax bl +
xor ebx 1 +
mov ebp eax +
mov eax [esp+1Ch+var_14] +
mov [esp+1Ch+var_1C] eax +
call sub_406F40  +
test eax eax +
mov [esp+1Ch+var_14] eax +
jz loc_408B9A  +
test bl bl +
jnz loc_408B30  +
test ebp ebp +
jz loc_408BB3  +
mov eax [esp+1Ch+var_10] +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ebx 1 +
xor ebp ebp +
jmp loc_408B82  +
add esp 1Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov eax [esp+2Ch+arg_0] +
mov [esp+2Ch+var_2C] eax +
call sub_406F20  +
test eax eax +
mov [esp+2Ch+var_10] eax +
jz loc_408C5F  +
nop   +
mov eax [esp+2Ch+var_10] +
mov [esp+2Ch+var_2C] eax +
call sub_406F60  +
mov ebx eax +
mov eax [eax] +
lea edi [ebx+954h] +
mov [esp+2Ch+var_2C] eax +
call sub_406F20  +
mov ebp eax +
test ebp ebp +
lea eax [ebx+4] +
mov [esp+2Ch+var_14] eax +
jz loc_408C4B  +
nop   +
lea esi [esi+0] +
mov esi [ebx+0A58h] +
mov [esp+2Ch+var_2C] ebp +
call sub_406F60  +
mov edx [esp+2Ch+arg_8] +
mov ecx [esp+2Ch+var_14] +
mov [esp+2Ch+var_20] esi +
mov [esp+2Ch+var_24] edi +
mov [esp+2Ch+var_1C] edx +
mov [esp+2Ch+var_28] ecx +
mov [esp+2Ch+var_2C] eax +
call [esp+2Ch+arg_4]  +
mov [esp+2Ch+var_2C] ebp +
call sub_406F40  +
test eax eax +
mov ebp eax +
jnz loc_408C10  +
mov eax [esp+2Ch+var_10] +
mov [esp+2Ch+var_2C] eax +
call sub_406F40  +
test eax eax +
mov [esp+2Ch+var_10] eax +
jnz loc_408BE0  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
sub esp 1Ch +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_18] offset loc_408450 +
mov [esp+1Ch+var_1C] eax +
call sub_407220  +
add esp 1Ch +
retn   +
***
push esi  +
push ebx  +
sub esp 4Ch +
mov edi [esp+4Ch+arg_C] +
mov ecx [esp+4Ch+arg_4] +
movzx eax [esp+4Ch+arg_0] +
mov ebx [esp+4Ch+arg_8] +
mov [esp+4Ch+var_4C] edi +
mov [esp+4Ch+var_48] ecx +
mov [esp+4Ch+var_25] al +
call sub_407980  +
test eax eax +
mov esi eax +
jz loc_408DAF  +
mov eax [esp+4Ch+arg_10] +
mov [esp+4Ch+var_2C] 0FFFFFFFFh +
movzx ebp [esp+4Ch+var_25] +
test eax eax +
jle loc_408DA3  +
nop   +
lea esi [esi+0] +
mov [esp+4Ch+var_3C] ebp +
mov [esp+4Ch+var_40] 0 +
mov [esp+4Ch+var_44] esi +
mov [esp+4Ch+var_48] edi +
mov [esp+4Ch+var_4C] ebx +
call sub_404AB0  +
test eax eax +
jnz loc_408CE0  +
mov eax [ebx+914h] +
lea edx [esp+4Ch+var_D] +
mov [esp+4Ch+var_3C] edx +
mov [esp+4Ch+var_40] 0 +
mov [esp+4Ch+var_44] esi +
mov [esp+4Ch+var_48] edi +
mov [esp+4Ch+var_4C] ebx +
call eax  +
test eax eax +
jnz loc_408CE0  +
mov [esp+4Ch+var_20] eax +
mov eax [esp+4Ch+arg_10] +
mov [esp+4Ch+var_3C] ebp +
mov [esp+4Ch+var_48] offset aSSafemodeWrote +
mov [esp+4Ch+var_4C] 1 +
lea ecx [eax-1] +
movzx eax byte ptr [esp+4Ch+var_D] +
mov [esp+4Ch+var_34] ecx +
mov [esp+4Ch+var_24] ecx +
mov [esp+4Ch+var_38] eax +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_40] eax +
mov eax ds:dword_486584 +
mov [esp+4Ch+var_44] eax +
call sub_401740  +
movzx eax [esp+4Ch+var_25] +
mov ecx [esp+4Ch+var_24] +
cmp al byte ptr [esp+4Ch+var_D] +
mov [esp+4Ch+arg_10] 0FFFFFFFFh +
mov edx [esp+4Ch+var_20] +
cmovz ecx [esp+4Ch+arg_10] +
cmovnz edx [esp+4Ch+var_2C] +
mov [esp+4Ch+arg_10] ecx +
mov eax [esp+4Ch+arg_10] +
mov [esp+4Ch+var_2C] edx +
test eax eax +
jg loc_408CE0  +
mov eax [esp+4Ch+var_2C] +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax 0FFFFFFFFh +
jmp loc_408DA7  +
***
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [esp+3Ch+arg_0] +
mov ebp [esp+3Ch+arg_14] +
mov ebx [esp+3Ch+arg_10] +
movzx eax byte ptr [eax] +
mov [esp+3Ch+var_10] al +
mov eax [esp+3Ch+arg_4] +
movzx eax byte ptr [eax] +
mov [esp+3Ch+var_F] al +
mov eax [esp+3Ch+arg_8] +
movzx eax byte ptr [eax] +
mov byte ptr [esp+3Ch+var_E] al +
mov eax [esp+3Ch+arg_C] +
movzx eax byte ptr [eax] +
mov [esp+3Ch+var_38] offset aFuse +
mov [esp+3Ch+var_3C] ebp +
mov byte ptr [esp+3Ch+var_E+1] al +
call sub_407980  +
test eax eax +
mov edi eax +
jz loc_408F92  +
mov eax [ebx+914h] +
lea edx [esp+3Ch+var_E+1] +
mov [esp+3Ch+var_2C] edx +
lea esi [esp+2Bh] +
mov [esp+3Ch+var_30] 0 +
mov [esp+3Ch+var_34] edi +
mov [esp+3Ch+var_38] ebp +
mov [esp+3Ch+var_3C] ebx +
call eax  +
mov [esp+3Ch+var_38] offset aSSafemodeRead1 +
mov [esp+3Ch+var_3C] 3 +
mov [esp+3Ch+var_20] eax +
movzx eax byte ptr [esp+3Ch+var_E+1] +
mov [esp+3Ch+var_30] eax +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov eax [ebx+914h] +
mov [esp+3Ch+var_2C] esi +
mov [esp+3Ch+var_30] 0 +
mov [esp+3Ch+var_34] edi +
mov [esp+3Ch+var_38] ebp +
mov [esp+3Ch+var_3C] ebx +
call eax  +
mov [esp+3Ch+var_21] 0 +
test eax eax +
jz loc_409480  +
movzx eax [esp+3Ch+var_11] +
mov [esp+3Ch+var_38] offset aSSafemodeRead2 +
mov [esp+3Ch+var_3C] 3 +
mov [esp+3Ch+var_30] eax +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
movzx eax byte ptr [esp+3Ch+var_E+1] +
cmp [esp+3Ch+var_11] al +
jz loc_408EF5  +
cmp [esp+3Ch+var_21] 0 +
jz loc_4094C5  +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_38] offset aSSafemodeVerif +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_409476  +
mov eax [ebx+914h] +
mov [esp+3Ch+var_2C] esi +
mov [esp+3Ch+var_30] 0 +
mov [esp+3Ch+var_34] edi +
mov [esp+3Ch+var_38] ebp +
mov [esp+3Ch+var_3C] ebx +
call eax  +
movzx esi [esp+3Ch+var_21] +
mov [esp+3Ch+var_38] offset aSSafemodeRead3 +
mov [esp+3Ch+var_3C] 3 +
test eax eax +
mov eax 0 +
cmovnz esi eax +
mov eax esi +
mov [esp+3Ch+var_21] al +
movzx eax [esp+3Ch+var_11] +
mov [esp+3Ch+var_30] eax +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
movzx edx [esp+3Ch+var_11] +
cmp [esp+3Ch+var_21] 0 +
movzx eax byte ptr [esp+3Ch+var_E+1] +
jz loc_4094C5  +
cmp dl al +
jnz loc_408ECE  +
movzx eax byte ptr [esp+3Ch+var_E+1] +
mov [esp+3Ch+var_38] offset aSSafemodeFuseR +
mov [esp+3Ch+var_3C] 1 +
mov [esp+3Ch+var_30] eax +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov [esp+3Ch+var_38] offset aLfuse +
mov [esp+3Ch+var_3C] ebp +
call sub_407980  +
test eax eax +
mov edi eax +
jz loc_40912D  +
mov eax [ebx+914h] +
lea edx [esp+3Ch+var_10] +
mov [esp+3Ch+var_2C] edx +
lea esi [esp+3Ch+var_11] +
mov [esp+3Ch+var_30] 0 +
mov [esp+3Ch+var_34] edi +
mov [esp+3Ch+var_38] ebp +
mov [esp+3Ch+var_3C] ebx +
call eax  +
mov [esp+3Ch+var_38] offset aSSafemodeRea_0 +
mov [esp+3Ch+var_3C] 3 +
mov [esp+3Ch+var_20] eax +
movzx eax [esp+3Ch+var_10] +
mov [esp+3Ch+var_30] eax +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov eax [ebx+914h] +
mov [esp+3Ch+var_2C] esi +
mov [esp+3Ch+var_30] 0 +
mov [esp+3Ch+var_34] edi +
mov [esp+3Ch+var_38] ebp +
mov [esp+3Ch+var_3C] ebx +
call eax  +
mov [esp+3Ch+var_21] 0 +
test eax eax +
jz loc_409490  +
movzx eax [esp+3Ch+var_11] +
mov [esp+3Ch+var_38] offset aSSafemodeRea_1 +
mov [esp+3Ch+var_3C] 3 +
mov [esp+3Ch+var_30] eax +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
movzx eax [esp+3Ch+var_10] +
cmp [esp+3Ch+var_11] al +
jz loc_409090  +
cmp [esp+3Ch+var_21] 0 +
jz loc_4094C5  +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_38] offset aSSafemodeVer_0 +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_409476  +
mov eax [ebx+914h] +
mov [esp+3Ch+var_2C] esi +
mov [esp+3Ch+var_30] 0 +
mov [esp+3Ch+var_34] edi +
mov [esp+3Ch+var_38] ebp +
mov [esp+3Ch+var_3C] ebx +
call eax  +
movzx esi [esp+3Ch+var_21] +
mov [esp+3Ch+var_38] offset aSSafemodeRea_2 +
mov [esp+3Ch+var_3C] 3 +
test eax eax +
mov eax 0 +
cmovnz esi eax +
mov eax esi +
mov [esp+3Ch+var_21] al +
movzx eax [esp+3Ch+var_11] +
mov [esp+3Ch+var_30] eax +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
movzx edx [esp+3Ch+var_11] +
cmp [esp+3Ch+var_21] 0 +
movzx eax [esp+3Ch+var_10] +
jz loc_4094C5  +
cmp dl al +
jnz loc_409065  +
movzx eax [esp+3Ch+var_10] +
mov [esp+3Ch+var_38] offset aSSafemodeLfuse +
mov [esp+3Ch+var_3C] 1 +
mov [esp+3Ch+var_30] eax +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov [esp+3Ch+var_38] offset aHfuse +
mov [esp+3Ch+var_3C] ebp +
call sub_407980  +
test eax eax +
mov edi eax +
jz loc_4092C4  +
mov eax [ebx+914h] +
lea edx [esp+2Dh] +
mov [esp+3Ch+var_2C] edx +
lea esi [esp+3Ch+var_11] +
mov [esp+3Ch+var_30] 0 +
mov [esp+3Ch+var_34] edi +
mov [esp+3Ch+var_38] ebp +
mov [esp+3Ch+var_3C] ebx +
call eax  +
mov [esp+3Ch+var_38] offset aSSafemodeRea_3 +
mov [esp+3Ch+var_3C] 3 +
mov [esp+3Ch+var_20] eax +
movzx eax [esp+3Ch+var_F] +
mov [esp+3Ch+var_30] eax +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov eax [ebx+914h] +
mov [esp+3Ch+var_2C] esi +
mov [esp+3Ch+var_30] 0 +
mov [esp+3Ch+var_34] edi +
mov [esp+3Ch+var_38] ebp +
mov [esp+3Ch+var_3C] ebx +
call eax  +
mov [esp+3Ch+var_21] 0 +
test eax eax +
jz loc_4094A0  +
movzx eax [esp+3Ch+var_11] +
mov [esp+3Ch+var_38] offset aSSafemodeRea_4 +
mov [esp+3Ch+var_3C] 3 +
mov [esp+3Ch+var_30] eax +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
movzx eax [esp+3Ch+var_F] +
cmp [esp+3Ch+var_11] al +
jz loc_409227  +
cmp [esp+3Ch+var_21] 0 +
jz loc_4094C5  +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_38] offset aSSafemodeVer_1 +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov eax 0FFFFFFFEh +
jmp loc_409476  +
mov eax [ebx+914h] +
mov [esp+3Ch+var_2C] esi +
mov [esp+3Ch+var_30] 0 +
mov [esp+3Ch+var_34] edi +
mov [esp+3Ch+var_38] ebp +
mov [esp+3Ch+var_3C] ebx +
call eax  +
movzx esi [esp+3Ch+var_21] +
mov [esp+3Ch+var_38] offset aSSafemodeRea_5 +
mov [esp+3Ch+var_3C] 3 +
test eax eax +
mov eax 0 +
cmovnz esi eax +
mov eax esi +
mov [esp+3Ch+var_21] al +
movzx eax [esp+3Ch+var_11] +
mov [esp+3Ch+var_30] eax +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
movzx edx [esp+3Ch+var_11] +
cmp [esp+3Ch+var_21] 0 +
movzx eax [esp+3Ch+var_F] +
jz loc_4094C5  +
cmp dl al +
jnz loc_409200  +
movzx eax [esp+3Ch+var_F] +
mov [esp+3Ch+var_38] offset aSSafemodeHfuse +
mov [esp+3Ch+var_3C] 1 +
mov [esp+3Ch+var_30] eax +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov [esp+3Ch+var_38] offset aEfuse +
mov [esp+3Ch+var_3C] ebp +
call sub_407980  +
test eax eax +
mov edi eax +
jz loc_409448  +
mov eax [ebx+914h] +
lea edx [esp+3Ch+var_E] +
mov [esp+3Ch+var_2C] edx +
lea esi [esp+3Ch+var_11] +
mov [esp+3Ch+var_30] 0 +
mov [esp+3Ch+var_34] edi +
mov [esp+3Ch+var_38] ebp +
mov [esp+3Ch+var_3C] ebx +
call eax  +
mov [esp+3Ch+var_38] offset aSSafemodeRea_6 +
mov [esp+3Ch+var_3C] 3 +
mov [esp+3Ch+var_20] eax +
movzx eax byte ptr [esp+3Ch+var_E] +
mov [esp+3Ch+var_30] eax +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov eax [ebx+914h] +
mov [esp+3Ch+var_2C] esi +
mov [esp+3Ch+var_30] 0 +
mov [esp+3Ch+var_34] edi +
mov [esp+3Ch+var_38] ebp +
mov [esp+3Ch+var_3C] ebx +
call eax  +
mov [esp+3Ch+var_21] 0 +
test eax eax +
jz loc_4094B0  +
movzx eax [esp+3Ch+var_11] +
mov [esp+3Ch+var_38] offset aSSafemodeRea_7 +
mov [esp+3Ch+var_3C] 3 +
mov [esp+3Ch+var_30] eax +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
movzx eax byte ptr [esp+3Ch+var_E] +
cmp [esp+3Ch+var_11] al +
jz loc_4093C0  +
cmp [esp+3Ch+var_21] 0 +
jz loc_4094C5  +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_38] offset aSSafemodeVer_2 +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov eax 0FFFFFFFDh +
jmp loc_409476  +
mov eax [ebx+914h] +
mov [esp+3Ch+var_2C] esi +
mov [esp+3Ch+var_30] 0 +
mov [esp+3Ch+var_34] edi +
mov [esp+3Ch+var_38] ebp +
mov [esp+3Ch+var_3C] ebx +
call eax  +
mov [esp+3Ch+var_38] offset aSSafemodeRea_8 +
mov [esp+3Ch+var_3C] 3 +
test eax eax +
movzx eax [esp+3Ch+var_11] +
mov [esp+3Ch+var_30] eax +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_34] eax +
jnz loc_4094C0  +
call sub_401740  +
movzx eax [esp+3Ch+var_11] +
cmp al byte ptr [esp+3Ch+var_E] +
jnz loc_40938C  +
cmp [esp+3Ch+var_21] 0 +
jz loc_4094C5  +
mov [esp+3Ch+var_30] eax +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_38] offset aSSafemodeEfuse +
mov [esp+3Ch+var_3C] 1 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
movzx eax [esp+3Ch+var_10] +
mov ecx [esp+3Ch+arg_0] +
mov [ecx] al +
movzx eax [esp+3Ch+var_F] +
mov ecx [esp+3Ch+arg_4] +
mov [ecx] al +
movzx eax byte ptr [esp+3Ch+var_E] +
mov ecx [esp+3Ch+arg_8] +
mov [ecx] al +
movzx eax byte ptr [esp+3Ch+var_E+1] +
mov ecx [esp+3Ch+arg_C] +
mov [ecx] al +
xor eax eax +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+3Ch+var_20] +
test eax eax +
setz [esp+3Ch+var_21]  +
jmp loc_408E92  +
mov ecx [esp+3Ch+var_20] +
test ecx ecx +
setz [esp+3Ch+var_21]  +
jmp loc_409029  +
mov edx [esp+3Ch+var_20] +
test edx edx +
setz [esp+3Ch+var_21]  +
jmp loc_4091C4  +
mov eax [esp+3Ch+var_20] +
test eax eax +
setz [esp+3Ch+var_21]  +
jmp loc_40935B  +
call sub_401740  +
add esp 3Ch +
mov eax 0FFFFFFFBh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov ebx [esp+arg_4] +
cmp [esp+arg_0] 1 +
mov ecx [esp+arg_8] +
mov edx [esp+arg_C] +
mov esi [esp+arg_10] +
jz loc_409522  +
movzx eax byte_461123 +
mov [ebx] al +
movzx ebx byte_461122 +
xor eax eax +
mov [ecx] bl +
movzx ecx byte_461121 +
mov [edx] cl +
movzx edx byte_461120 +
mov [esi] dl +
pop ebx  +
pop esi  +
retn   +
movzx eax byte ptr [esi] +
movzx ebx byte ptr [ebx] +
movzx ecx byte ptr [ecx] +
movzx edx byte ptr [edx] +
mov byte_461120 al +
xor eax eax +
mov byte_461123 bl +
mov byte_461122 cl +
pop ebx  +
mov byte_461121 dl +
pop esi  +
retn   +
***
push esi  +
xor esi esi +
push ebx  +
mov ebx offset off_4663C0 +
sub esp 1Ch +
mov edi [esp+20h+arg_0] +
jmp loc_409569  +
cmp esi 2Ah +
ja loc_409589  +
mov eax [ebx] +
mov ebp ebx +
mov [esp+20h+var_20] edi +
mov [esp+20h+var_1C] eax +
call ds:_stricmp  +
test eax eax +
setz cl  +
add esi 1 +
add ebx 0Ch +
test cl cl +
jz loc_409564  +
xor eax eax +
test cl cl +
cmovnz eax ebp +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push ebx  +
mov ebx offset off_4663C8 +
sub esp 10h +
mov edi [esp+10h+arg_0] +
mov esi [esp+10h+arg_4] +
mov edx [ebx] +
add ebx 0Ch +
mov eax [ebx-14h] +
mov [esp+10h+var_8] esi +
mov [esp+10h+var_C] edx +
mov [esp+10h+var_10] eax +
call edi  +
cmp ebx offset unk_4665CC +
jnz loc_4095B3  +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
mov eax ds:dword_4841A0 +
mov edx ds:dword_4841A8 +
lea edx [eax+edx*4] +
mov eax [edx] +
mov ecx [eax+10h] +
mov eax [eax+8] +
mov ds:dword_484198 ecx +
mov ds:dword_487148 eax +
mov edx [edx] +
mov ds:dword_484194 eax +
mov edx [edx] +
mov ds:dword_48417C edx +
movzx eax byte ptr [eax] +
mov ds:byte_48419C al +
retn   +
***
sub esp 1Ch +
sub esp 14h +
mov eax ds:dword_4841A0 +
test eax eax +
jz loc_4096B1  +
mov edx ds:dword_4841A4 +
lea ecx [edx-1] +
cmp ecx ds:dword_4841A8 +
jbe loc_409675  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
lea ebx [edx+8] +
lea esi ds:0[ebx*4] +
mov [esp+14h+var_10] esi +
mov [esp+14h+var_14] eax +
call realloc  +
test eax eax +
mov ds:dword_4841A0 eax +
jz loc_4096E2  +
lea edx [eax+esi-20h] +
xor eax eax +
mov dword ptr [edx+eax] 0 +
add eax 4 +
cmp eax 20h +
jb loc_40969A  +
mov ds:dword_4841A4 ebx +
jmp loc_40966F  +
mov [esp+14h+var_14] 4 +
call malloc  +
test eax eax +
mov ds:dword_4841A0 eax +
jz loc_4096E2  +
mov dword ptr [eax] 0 +
mov ds:dword_4841A4 1 +
mov ds:dword_4841A8 0 +
jmp loc_40966F  +
mov eax offset aOutOfDynamicMe +
call sub_409620  +
lea esi [esi+0] +
push ebx  +
sub esp 8 +
mov ebx [esp+20h+var_10] +
call sub_409650  +
mov eax ds:dword_4841A0 +
test eax eax +
jz loc_40974E  +
mov edx ds:dword_4841A8 +
lea eax [eax+edx*4] +
mov edx [eax] +
cmp edx ebx +
jz loc_409749  +
test edx edx +
jz loc_409738  +
mov edx ds:dword_484194 +
movzx ecx ds:byte_48419C +
mov [edx] cl +
mov ecx [eax] +
mov [ecx+8] edx +
mov ecx ds:dword_484198 +
mov edx [eax] +
mov [edx+10h] ecx +
mov [eax] ebx +
call sub_4095E0  +
mov ds:dword_484188 1 +
add esp 8 +
pop ebx  +
retn   +
test ebx ebx +
jz loc_409749  +
mov eax ds:dword_4841A8 +
shl eax 2 +
jmp loc_409738  +
***
mov ebx [esp+18h+arg_0] +
test ebx ebx +
jz loc_4097B8  +
mov eax ds:dword_4841A0 +
test eax eax +
jz loc_409782  +
mov edx ds:dword_4841A8 +
lea eax [eax+edx*4] +
cmp ebx [eax] +
jz loc_4097B0  +
mov eax [ebx+14h] +
test eax eax +
jnz loc_409796  +
mov [esp+18h+arg_0] ebx +
add esp 18h +
pop ebx  +
jmp free  +
mov eax [ebx+4] +
mov [esp+18h+var_18] eax +
call free  +
mov [esp+18h+arg_0] ebx +
add esp 18h +
pop ebx  +
jmp free  +
mov dword ptr [eax] 0 +
jmp loc_409782  +
add esp 18h +
pop ebx  +
retn   +
***
mov eax [esp+arg_0] +
test eax eax +
jz locret_409805  +
mov edx [eax+4] +
mov dword ptr [eax+10h] 0 +
mov byte ptr [edx] 0 +
mov edx [eax+4] +
mov byte ptr [edx+1] 0 +
mov edx [eax+4] +
mov dword ptr [eax+1Ch] 1 +
mov dword ptr [eax+2Ch] 0 +
mov [eax+8] edx +
mov edx ds:dword_4841A0 +
test edx edx +
jz locret_409805  +
mov ecx ds:dword_4841A8 +
cmp eax [edx+ecx*4] +
jz loc_409807  +
retn   +
jmp sub_4095E0  +
***
push esi  +
mov esi edx +
push ebx  +
mov ebx eax +
sub esp 1Ch +
mov edi ds:__imp__errno +
call edi  +
mov ebp [eax] +
mov [esp+20h+var_20] ebx +
call sub_4097C0  +
mov eax ds:dword_4841A0 +
mov [ebx] esi +
mov dword ptr [ebx+28h] 1 +
test eax eax +
jz loc_40984A  +
mov edx ds:dword_4841A8 +
cmp ebx [eax+edx*4] +
jz loc_409858  +
mov dword ptr [ebx+20h] 1 +
mov dword ptr [ebx+24h] 0 +
xor eax eax +
test esi esi +
jz loc_409876  +
mov [esp+20h+var_20] esi +
call _fileno  +
mov [esp+20h+var_20] eax +
call _isatty  +
test eax eax +
setnle al  +
movzx eax al +
mov [ebx+18h] eax +
call edi  +
mov [eax] ebp +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
sub esp 14h +
mov eax ds:dword_4841A0 +
mov edx [esp+18h+arg_0] +
test eax eax +
jz loc_409920  +
mov ecx ds:dword_4841A8 +
mov eax [eax+ecx*4] +
test eax eax +
jz loc_409920  +
call sub_409810  +
add esp 18h +
pop ebx  +
jmp sub_4095E0  +
mov [esp+18h+var_C] edx +
call sub_409650  +
mov eax ds:dword_4841A0 +
mov ecx ds:dword_4841A8 +
mov [esp+18h+var_14] 4000h +
lea ebx [eax+ecx*4] +
mov eax ds:dword_48417C +
mov [esp+18h+var_18] eax +
call sub_409890  +
mov ecx ds:dword_4841A0 +
mov edx [esp+18h+var_C] +
mov [ebx] eax +
xor eax eax +
test ecx ecx +
jz loc_40990E  +
mov eax ds:dword_4841A8 +
mov eax [ecx+eax*4] +
call sub_409810  +
add esp 18h +
pop ebx  +
jmp sub_4095E0  +
***
push esi  +
sub esp 14h +
movzx eax ds:byte_48419C +
mov ebx ds:dword_484194 +
test al al +
mov [ebx] al +
jnz loc_409D8E  +
mov eax ds:dword_4841A0 +
mov edx ds:dword_4841A8 +
mov eax [eax+edx*4] +
mov eax [eax+4] +
add eax ds:dword_484198 +
cmp ebx eax +
jb loc_409DF0  +
lea eax [ebx+1] +
mov esi ds:dword_487148 +
mov ds:dword_484194 eax +
call sub_409980  +
cmp eax 1 +
jz loc_409DBD  +
cmp eax 2 +
jz loc_409DB0  +
test eax eax +
jz loc_409DE5  +
mov ebx ds:dword_484194 +
lea edx [ebx+1] +
movzx eax byte ptr [ebx] +
mov ds:dword_484194 edx +
movzx edx byte ptr [ebx+1] +
mov byte ptr [ebx] 0 +
mov ds:byte_48419C dl +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov eax ds:dword_48417C +
mov [esp+14h+var_14] eax +
call sub_4098F0  +
call sub_403600  +
test eax eax +
jnz loc_409DF5  +
mov eax ds:dword_484188 +
test eax eax +
jnz loc_409D35  +
mov eax ds:dword_48417C +
mov [esp+14h+var_14] eax +
call sub_4098F0  +
jmp loc_409D35  +
sub ebx esi +
add ebx ds:dword_487148 +
jmp loc_409D8E  +
mov byte ptr [ebx] 0 +
jmp loc_409D8E  +
mov eax 0FFFFFFFFh +
jmp loc_409DA7  +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov ebp ds:dword_484190 +
test ebp ebp +
jnz loc_409E6E  +
mov edi ds:dword_48418C +
mov ds:dword_484190 1 +
test edi edi +
jnz loc_409E2F  +
mov ds:dword_48418C 1 +
mov esi ds:dword_48417C +
test esi esi +
jz loc_409F81  +
mov ebx ds:dword_484178 +
test ebx ebx +
jz loc_409F6F  +
mov eax ds:dword_4841A0 +
test eax eax +
jz loc_409F90  +
mov edx ds:dword_4841A8 +
mov ecx [eax+edx*4] +
test ecx ecx +
jz loc_409F90  +
call sub_4095E0  +
mov eax ds:dword_48418C +
mov edi ds:dword_484194 +
movzx ecx ds:byte_48419C +
mov [esp+2Ch+var_10] edi +
mov esi edi +
mov [edi] cl +
movsx edx ds:word_4682E0[eax+eax] +
mov ebp ds:dword_484184 +
mov edi ds:dword_484180 +
lea esi [esi+0] +
cmp ds:word_468EE0[eax+eax] 0 +
movzx ecx byte ptr ds:dword_468AE0[ecx*4] +
cmovnz edi esi +
cmovnz ebp eax +
jmp loc_409EDF  +
movsx eax ds:word_467BC0[eax+eax] +
cmp eax 37Dh +
jle loc_409ED7  +
movzx ecx byte ptr ds:dword_468A00[ecx*4] +
movsx edx ds:word_4682E0[eax+eax] +
add edx ecx +
movsx ebx ds:word_466B40[edx+edx] +
cmp ebx eax +
jnz loc_409EC0  +
movsx eax ds:word_467380[edx+edx] +
add esi 1 +
movsx edx ds:word_4682E0[eax+eax] +
cmp dx 3E5h +
jz loc_409F0C  +
movzx ecx byte ptr [esi] +
jmp loc_409EA0  +
mov ds:dword_484180 edi +
movsx eax ds:word_468EE0[eax+eax] +
mov edi [esp+2Ch+var_10] +
mov ds:dword_484184 ebp +
test eax eax +
jnz loc_409F3B  +
mov eax ds:dword_484184 +
mov esi ds:dword_484180 +
movsx eax ds:word_468EE0[eax+eax] +
mov edx esi +
sub edx edi +
mov ds:dword_487148 edi +
mov ds:dword_487144 edx +
movzx edx byte ptr [esi] +
mov ds:dword_484194 esi +
mov byte ptr [esi] 0 +
mov ds:byte_48419C dl +
cmp eax 0A4h +
ja loc_40AE6C  +
jmp ds:off_466830[eax*4]  +
mov eax ds:_iob +
add eax 20h +
mov ds:dword_484178 eax +
jmp loc_409E4B  +
mov eax ds:_iob +
mov ds:dword_48417C eax +
jmp loc_409E3D  +
call sub_409650  +
mov eax ds:dword_4841A0 +
mov edx ds:dword_4841A8 +
mov [esp+2Ch+var_28] 4000h +
lea ebx [eax+edx*4] +
mov eax ds:dword_48417C +
mov [esp+2Ch+var_2C] eax +
call sub_409890  +
mov [ebx] eax +
jmp loc_409E69  +
mov eax ds:dword_487148 +
mov [esp+2Ch+var_2C] eax +
call sub_403760  +
mov ds:dword_487154 eax +
mov eax 187h +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ds:dword_487154 0 +
mov eax 155h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 159h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 156h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 135h +
jmp loc_409FD6  +
mov [esp+2Ch+var_2C] 10Dh +
call sub_4036F0  +
mov ds:dword_487154 eax +
mov eax 10Dh +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 134h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 133h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 132h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 131h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 110h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 10Fh +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 130h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 12Fh +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 12Eh +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 12Dh +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 12Ch +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 12Ch +
jmp loc_409FD6  +
mov [esp+2Ch+var_2C] 14Dh +
call sub_4036F0  +
mov ds:dword_487154 eax +
mov eax 14Dh +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 12Bh +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 15Ah +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 12Ah +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 129h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 10Eh +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 128h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 127h +
jmp loc_409FD6  +
mov [esp+2Ch+var_2C] 108h +
call sub_4036F0  +
mov ds:dword_487154 eax +
mov eax 108h +
jmp loc_409FD6  +
mov [esp+2Ch+var_2C] 109h +
call sub_4036F0  +
mov ds:dword_487154 eax +
mov eax 109h +
jmp loc_409FD6  +
mov [esp+2Ch+var_2C] 10Ah +
call sub_4036F0  +
mov ds:dword_487154 eax +
mov eax 10Ah +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 160h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 17Bh +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 17Ah +
jmp loc_409FD6  +
mov [esp+2Ch+var_2C] 125h +
call sub_4036F0  +
mov ds:dword_487154 eax +
mov eax 125h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 179h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 124h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 152h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 171h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 165h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 15Eh +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 177h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 178h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 176h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 174h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 175h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 17Fh +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 123h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 122h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 173h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 180h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 121h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 17Eh +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 11Eh +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 11Dh +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 11Ch +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 15Bh +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 11Bh +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 11Ah +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 119h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 118h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 117h +
jmp loc_409FD6  +
mov [esp+2Ch+var_2C] 116h +
call sub_4036F0  +
mov ds:dword_487154 eax +
mov eax 116h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 115h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 151h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 16Bh +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 169h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 11Fh +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 150h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 17Dh +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 142h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 141h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 13Fh +
jmp loc_409FD6  +
mov [esp+2Ch+var_2C] 140h +
call sub_4036F0  +
mov ds:dword_487154 eax +
mov eax 140h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 13Eh +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 164h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 163h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 166h +
jmp loc_409FD6  +
mov [esp+2Ch+var_2C] 13Dh +
call sub_4036F0  +
mov ds:dword_487154 eax +
mov eax 13Dh +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 15Dh +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 13Bh +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 13Ah +
jmp loc_409FD6  +
mov [esp+2Ch+var_2C] 104h +
call sub_4036F0  +
mov ds:dword_487154 eax +
mov eax 104h +
jmp loc_409FD6  +
mov [esp+2Ch+var_2C] 105h +
call sub_4036F0  +
mov ds:dword_487154 eax +
mov eax 105h +
jmp loc_409FD6  +
mov [esp+2Ch+var_2C] 102h +
call sub_4036F0  +
mov ds:dword_487154 eax +
mov eax 102h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 139h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 17Ch +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 138h +
jmp loc_409FD6  +
mov [esp+2Ch+var_2C] 137h +
call sub_4036F0  +
mov ds:dword_487154 eax +
mov eax 137h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 136h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 16Eh +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 16Fh +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 16Ch +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 16Dh +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 15Fh +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 157h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 170h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 162h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 158h +
jmp loc_409FD6  +
mov [esp+2Ch+var_2C] 107h +
call sub_4036F0  +
mov ds:dword_487154 eax +
mov eax 107h +
jmp loc_409FD6  +
mov [esp+2Ch+var_2C] 103h +
call sub_4036F0  +
mov ds:dword_487154 eax +
mov eax 103h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 14Ch +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 14Bh +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 149h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 148h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 145h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 147h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 146h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 144h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 143h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 14Ah +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 161h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 14Fh +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 153h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 167h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
call nullsub_1  +
mov eax 185h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
call nullsub_1  +
mov eax 184h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
call nullsub_1  +
mov eax 183h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
call nullsub_1  +
mov eax 182h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
call nullsub_1  +
mov eax 181h +
jmp loc_409FD6  +
mov [esp+2Ch+var_2C] 14Eh +
call sub_4036F0  +
mov ds:dword_487154 eax +
mov eax 14Eh +
jmp loc_409FD6  +
mov [esp+2Ch+var_2C] 10Bh +
call sub_4036F0  +
mov ds:dword_487154 eax +
mov eax 10Bh +
jmp loc_409FD6  +
mov [esp+2Ch+var_2C] 106h +
call sub_4036F0  +
mov ds:dword_487154 eax +
mov eax 106h +
jmp loc_409FD6  +
mov [esp+2Ch+var_2C] offset aPossibleOldSty +
call sub_403610  +
mov eax 100h +
jmp loc_409FD6  +
xor eax eax +
jmp loc_409FD6  +
add ds:dword_486908 1 +
mov eax ds:dword_48418C +
jmp loc_409E73  +
mov ds:dword_487154 0 +
call nullsub_1  +
mov eax 186h +
jmp loc_409FD6  +
mov eax ds:dword_484178 +
mov [esp+2Ch+var_24] 1 +
mov [esp+2Ch+var_20] eax +
mov eax ds:dword_487144 +
mov [esp+2Ch+var_28] eax +
mov eax ds:dword_487148 +
mov [esp+2Ch+var_2C] eax +
call fwrite  +
mov eax ds:dword_48418C +
jmp loc_409E73  +
mov eax 100h +
jmp loc_409FD6  +
movzx eax ds:byte_48419C +
mov [esi] al +
mov eax ds:dword_484184 +
mov esi ds:dword_484180 +
movsx eax ds:word_468EE0[eax+eax] +
jmp loc_409F24  +
movzx eax ds:byte_48419C +
mov ebx esi +
mov edx ds:dword_4841A8 +
sub ebx ds:dword_487148 +
mov [esi] al +
mov eax ds:dword_4841A0 +
sub ebx 1 +
lea ecx [eax+edx*4] +
mov eax [ecx] +
mov edx [eax+2Ch] +
test edx edx +
jnz loc_40AE76  +
mov ebp ds:dword_48417C +
mov edx [eax+10h] +
mov [eax] ebp +
mov eax [ecx] +
mov ds:dword_484198 edx +
mov dword ptr [eax+2Ch] 1 +
add edx [eax+4] +
cmp ds:dword_484194 edx +
jbe loc_40AE81  +
call sub_409980  +
cmp eax 1 +
jz loc_40AF02  +
cmp eax 2 +
nop   +
jz loc_40AECD  +
test eax eax +
jnz loc_409E6E  +
mov esi ds:dword_487148 +
add esi ebx +
mov ds:dword_484194 esi +
call sub_460750  +
mov edi ds:dword_487148 +
mov [esp+2Ch+var_10] edi +
movzx ecx byte ptr [esi] +
jmp loc_409E88  +
mov ds:dword_487154 0 +
mov eax 16Ah +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 114h +
jmp loc_409FD6  +
mov [esp+2Ch+var_2C] 10Ch +
call sub_4036F0  +
mov ds:dword_487154 eax +
mov eax 10Ch +
jmp loc_409FD6  +
mov eax ds:dword_48691C +
lea edx [eax+1] +
mov ds:dword_48691C edx +
mov byte ptr [eax] 0Ch +
mov eax ds:dword_48418C +
jmp loc_409E73  +
mov eax ds:dword_48691C +
lea edx [eax+1] +
mov ds:dword_48691C edx +
mov byte ptr [eax] 8 +
mov eax ds:dword_48418C +
jmp loc_409E73  +
mov eax ds:dword_48691C +
lea edx [eax+1] +
mov ds:dword_48691C edx +
mov byte ptr [eax] 0Dh +
mov eax ds:dword_48418C +
jmp loc_409E73  +
mov eax ds:dword_48691C +
lea edx [eax+1] +
mov ds:dword_48691C edx +
mov byte ptr [eax] 9 +
mov eax ds:dword_48418C +
jmp loc_409E73  +
mov eax ds:dword_48691C +
lea edx [eax+1] +
mov ds:dword_48691C edx +
mov byte ptr [eax] 0Ah +
mov eax ds:dword_48418C +
jmp loc_409E73  +
mov eax ds:dword_48691C +
mov byte ptr [eax] 0 +
mov [esp+2Ch+var_2C] offset unk_486D40 +
mov ds:dword_48691C offset unk_486D40 +
call sub_403850  +
mov ds:dword_48418C 1 +
mov ds:dword_487154 eax +
mov eax 189h +
jmp loc_409FD6  +
mov ebx ds:dword_486908 +
call sub_409D30  +
cmp eax 2Ah +
jz loc_40AC27  +
cmp eax 0FFFFFFFFh +
jz loc_40AC3F  +
cmp eax 0Ah +
jnz loc_40AC0A  +
add ds:dword_486908 1 +
jmp loc_40AC0A  +
call sub_409D30  +
cmp eax 2Ah +
jz loc_40AC27  +
cmp eax 2Fh +
jz loc_409E6E  +
cmp eax 0FFFFFFFFh +
jnz loc_40AC0A  +
mov [esp+2Ch+var_28] ebx +
mov [esp+2Ch+var_2C] offset aEofInCommentSt +
call sub_403610  +
mov eax 100h +
jmp loc_409FD6  +
add ds:dword_486908 1 +
mov eax 1 +
mov ds:dword_48418C 1 +
jmp loc_409E73  +
mov ds:dword_48418C 7 +
mov eax 7 +
jmp loc_409E73  +
mov eax ds:dword_487148 +
mov [esp+2Ch+var_2C] eax +
call sub_4037D0  +
mov ds:dword_487154 eax +
mov eax 187h +
jmp loc_409FD6  +
mov ds:dword_48691C offset unk_486D40 +
mov eax 3 +
mov ds:dword_48418C 3 +
jmp loc_409E73  +
mov eax ds:dword_487148 +
mov [esp+2Ch+var_2C] eax +
call sub_4037A0  +
mov ds:dword_487154 eax +
mov eax 188h +
jmp loc_409FD6  +
mov eax ds:dword_487148 +
mov [esp+2Ch+var_2C] eax +
call sub_4037A0  +
mov ds:dword_487154 eax +
mov eax 188h +
jmp loc_409FD6  +
mov eax ds:dword_487148 +
mov [esp+2Ch+var_2C] eax +
call sub_403760  +
mov ds:dword_487154 eax +
mov eax 187h +
jmp loc_409FD6  +
mov eax ds:dword_487148 +
mov [esp+2Ch+var_2C] eax +
call sub_4037A0  +
mov ds:dword_487154 eax +
mov eax 188h +
jmp loc_409FD6  +
mov eax ds:dword_487148 +
mov [esp+2Ch+var_2C] eax +
call sub_4037A0  +
mov ds:dword_487154 eax +
mov eax 188h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 111h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 110h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 10Fh +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 120h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 172h +
jmp loc_409FD6  +
mov [esp+2Ch+var_2C] offset aUnterminatedCh +
call sub_403610  +
mov eax 100h +
jmp loc_409FD6  +
mov eax ds:dword_487148 +
cmp byte ptr [eax] 0 +
jz loc_409E6E  +
mov edx ds:dword_48691C +
add eax 1 +
lea ecx [edx+1] +
mov ds:dword_48691C ecx +
movzx ecx byte ptr [eax-1] +
mov [edx] cl +
cmp byte ptr [eax] 0 +
jnz loc_40ADD6  +
jmp loc_409E6E  +
mov eax ds:dword_48691C +
lea edx [eax+1] +
mov ds:dword_48691C edx +
mov edx ds:dword_487148 +
movzx edx byte ptr [edx+1] +
mov [eax] dl +
mov eax ds:dword_48418C +
jmp loc_409E73  +
mov ds:dword_487154 0 +
mov eax 154h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 113h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 112h +
jmp loc_409FD6  +
mov ds:dword_487154 0 +
mov eax 15Ch +
jmp loc_409FD6  +
mov eax offset aFatalFlexSca_0 +
call sub_409620  +
mov edx ds:dword_484198 +
jmp loc_40AAAF  +
mov esi ds:dword_487148 +
add esi ebx +
mov ds:dword_484194 esi +
call sub_460750  +
mov edx eax +
movsx eax ds:word_468EE0[eax+eax] +
test ax ax +
jz loc_40AEAF  +
mov ds:dword_484184 edx +
mov ds:dword_484180 esi +
movsx ecx ds:word_4682E0[edx+edx] +
movsx ebx ds:word_466B42[ecx+ecx] +
cmp edx ebx +
jz loc_40AF3A  +
movsx edx ds:word_467BC0[edx+edx] +
jmp loc_40AEAF  +
mov eax ds:dword_4841A0 +
mov edx ds:dword_4841A8 +
mov eax [eax+edx*4] +
mov esi [eax+4] +
add esi ds:dword_484198 +
mov ds:dword_484194 esi +
call sub_460750  +
mov edi ds:dword_487148 +
movsx eax ds:word_468EE0[eax+eax] +
jmp loc_409F24  +
mov ds:dword_484188 0 +
call sub_403600  +
test eax eax +
jz loc_40AF70  +
mov eax ds:dword_487148 +
mov ds:dword_484194 eax +
mov eax ds:dword_48418C +
sub eax 1 +
mov edx eax +
shr edx 1Fh +
add eax edx +
sar eax 1 +
add eax 0A1h +
jmp loc_409F5D  +
movsx edx ds:word_467382[ecx+ecx] +
mov edi ds:dword_487148 +
cmp edx 37Dh +
jz loc_409F24  +
test edx edx +
jz loc_409F24  +
add esi 1 +
mov eax edx +
mov [esp+2Ch+var_10] edi +
mov ds:dword_484194 esi +
jmp loc_40AAFB  +
mov eax ds:dword_484188 +
test eax eax +
jnz loc_409E6E  +
mov eax ds:dword_48417C +
mov [esp+2Ch+var_2C] eax +
call sub_4098F0  +
mov eax ds:dword_48418C +
jmp loc_409E73  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 0Ch +
mov ebx [esp+20h] +
test ebx ebx +
jz loc_40B01A  +
call sub_409650  +
mov edx ds:dword_4841A0 +
mov eax ds:dword_4841A8 +
shl eax 2 +
test edx edx +
jz loc_40B009  +
mov edi ds:dword_4841A8 +
lea esi ds:0[edi*4] +
lea eax [edx+esi] +
mov ecx [eax] +
test ecx ecx +
jz loc_40B009  +
mov ebp ds:dword_484194 +
add edi 1 +
movzx ecx ds:byte_48419C +
mov ds:dword_4841A8 edi +
mov [ebp+0] cl +
mov ecx [eax] +
mov [ecx+8] ebp +
mov ecx ds:dword_484198 +
mov eax [eax] +
mov [eax+10h] ecx +
lea eax [edx+esi+4] +
mov [eax] ebx +
call sub_4095E0  +
mov ds:dword_484188 1 +
add esp 0Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax ds:dword_4841A0 +
test eax eax +
jz locret_40B08A  +
mov edx ds:dword_4841A8 +
mov eax [eax+edx*4] +
test eax eax +
jz locret_40B08A  +
sub esp 1Ch +
mov [esp+1Ch+var_1C] eax +
call sub_409760  +
mov edx ds:dword_4841A8 +
mov eax ds:dword_4841A0 +
test edx edx +
mov dword ptr [eax+edx*4] 0 +
jnz loc_40B090  +
test eax eax +
jz loc_40B087  +
mov edx ds:dword_4841A8 +
mov eax [eax+edx*4] +
test eax eax +
jz loc_40B087  +
call sub_4095E0  +
mov ds:dword_484188 1 +
add esp 1Ch +
retn   +
sub edx 1 +
mov ds:dword_4841A8 edx +
jmp loc_40B067  +
***
push ebx  +
push ebx  +
sub esp 10h +
mov ebx [esp+10h+arg_4] +
mov esi [esp+10h+arg_0] +
lea edi [ebx+2] +
mov [esp+10h+var_10] edi +
call malloc  +
test eax eax +
jz loc_40B198  +
xor edx edx +
test ebx ebx +
jle loc_40B171  +
movzx ecx byte ptr [esi+edx] +
mov [eax+edx] cl +
add edx 1 +
cmp edx ebx +
jnz loc_40B163  +
mov byte ptr [eax+ebx+1] 0 +
mov byte ptr [eax+ebx] 0 +
mov [esp+10h+var_C] edi +
mov [esp+10h+var_10] eax +
call sub_40B0A0  +
test eax eax +
jz loc_40B1A2  +
mov dword ptr [eax+14h] 1 +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov eax offset aOutOfDynamic_3 +
call sub_409620  +
mov eax offset aBadBufferInYy_ +
call sub_409620  +
lea esi [esi+0] +
push ebx  +
sub esp 18h +
mov ebx [esp+2Ch+var_C] +
mov [esp+2Ch+var_2C] ebx +
call strlen  +
mov [esp+2Ch+var_2C] ebx +
mov [esp+2Ch+var_28] eax +
call sub_40B140  +
add esp 18h +
pop ebx  +
retn   +
***
jmp loc_40B1E0  +
mov eax dword_461124 +
retn   +
***
mov eax ds:dword_48417C +
retn   +
***
mov eax ds:dword_484178 +
retn   +
***
mov eax ds:dword_487144 +
retn   +
***
mov eax ds:dword_487148 +
retn   +
***
mov eax [esp+4] +
mov dword_461124 eax +
retn   +
***
mov eax [esp+4] +
mov ds:dword_48417C eax +
retn   +
***
mov eax [esp+4] +
mov ds:dword_484178 eax +
retn   +
***
mov eax ds:dword_484174 +
retn   +
***
mov eax [esp+4] +
mov ds:dword_484174 eax +
retn   +
***
sub esp 1Ch +
mov eax ds:dword_4841A0 +
test eax eax +
jnz loc_40B2B9  +
jmp loc_40B324  +
mov [esp+1Ch+var_1C] edx +
call sub_409760  +
mov eax ds:dword_4841A0 +
mov edx ds:dword_4841A8 +
mov dword ptr [eax+edx*4] 0 +
call sub_40B030  +
mov eax ds:dword_4841A0 +
test eax eax +
jz loc_40B324  +
mov edx ds:dword_4841A8 +
mov edx [eax+edx*4] +
test edx edx +
jnz loc_40B291  +
mov [esp+1Ch+var_1C] eax +
call free  +
xor eax eax +
mov ds:dword_4841A0 0 +
mov ds:dword_4841A8 0 +
mov ds:dword_4841A4 0 +
mov ds:dword_484194 0 +
mov ds:dword_484190 0 +
mov ds:dword_48418C 0 +
mov ds:dword_48417C 0 +
mov ds:dword_484178 0 +
add esp 1Ch +
retn   +
xor eax eax +
jmp loc_40B2C6  +
***
jmp malloc  +
***
jmp realloc  +
***
jmp free  +
***
push esi  +
mov esi 20h +
push ebx  +
xor ebx ebx +
sub esp 3Ch +
mov [esp+40h+var_24] eax +
lea edi [esp+40h+var_14] +
mov eax ds:dword_486904 +
mov [esp+40h+var_40] eax +
call sub_406F70  +
test eax eax +
jz loc_40B600  +
mov eax ds:dword_486904 +
mov [esp+40h+var_3C] 1 +
mov [esp+40h+var_40] eax +
call sub_407120  +
mov [esp+40h+var_28] eax +
mov eax [eax+18h] +
mov [esp+40h+var_3C] offset unk_4695E0 +
mov [esp+40h+var_40] eax +
call strtok  +
test eax eax +
mov ebp eax +
jz loc_40B4C1  +
test ebx ebx +
jnz loc_40B4C1  +
sub esi 1 +
js loc_40B5B0  +
mov edx [esp+40h+var_24] +
lea eax [esi+esi*2] +
lea ebx [edx+eax*4] +
jmp loc_40B452  +
cmp cl 61h +
jnz loc_40B5E0  +
add ebp 1 +
mov [esp+40h+var_38] 0 +
mov [esp+40h+var_3C] edi +
mov [esp+40h+var_40] ebp +
call strtol  +
mov [ebx+4] eax +
mov eax [esp+40h+var_14] +
cmp eax ebp +
jz loc_40B590  +
cmp byte ptr [eax] 0 +
jnz loc_40B590  +
mov dword ptr [ebx] 2 +
mov dword ptr [ebx+8] 0 +
mov [esp+40h+var_3C] offset unk_4695E0 +
mov [esp+40h+var_40] 0 +
call strtok  +
test eax eax +
mov ebp eax +
jz loc_40B60A  +
sub esi 1 +
sub ebx 0Ch +
cmp esi 0FFFFFFFFh +
jz loc_40B5B0  +
mov [esp+40h+var_40] ebp +
call strlen  +
test eax eax +
jz loc_40B5C6  +
cmp eax 1 +
movsx ecx byte ptr [ebp+0] +
jnz loc_40B3E0  +
cmp cl 61h +
jz loc_40B4F6  +
jle loc_40B4D2  +
cmp cl 6Fh +
lea esi [esi+0] +
jz loc_40B550  +
cmp cl 78h +
jz loc_40B530  +
cmp cl 69h +
jz loc_40B570  +
mov [esp+40h+var_3C] ecx +
mov ebx 0FFFFFFFFh +
mov [esp+40h+var_40] offset aInvalidBitSpec +
call sub_403610  +
mov [esp+40h+var_3C] offset unk_4695E0 +
mov [esp+40h+var_40] 0 +
call strtok  +
mov eax [esp+40h+var_28] +
mov [esp+40h+var_40] eax +
call sub_4034C0  +
jmp loc_40B376  +
cmp cl 30h +
jz loc_40B510  +
cmp cl 31h +
jnz loc_40B498  +
mov eax esi +
and eax 7 +
mov dword ptr [ebx] 1 +
mov dword ptr [ebx+8] 1 +
mov [ebx+4] eax +
jmp loc_40B425  +
mov dword ptr [ebx] 2 +
mov dword ptr [ebx+8] 0 +
mov [ebx+4] esi +
jmp loc_40B425  +
mov eax esi +
and eax 7 +
mov dword ptr [ebx] 1 +
mov dword ptr [ebx+8] 0 +
mov [ebx+4] eax +
jmp loc_40B425  +
mov eax esi +
and eax 7 +
mov dword ptr [ebx] 0 +
mov dword ptr [ebx+8] 0 +
mov [ebx+4] eax +
jmp loc_40B425  +
mov eax esi +
and eax 7 +
mov dword ptr [ebx] 4 +
mov dword ptr [ebx+8] 0 +
mov [ebx+4] eax +
jmp loc_40B425  +
mov eax esi +
and eax 7 +
mov dword ptr [ebx] 3 +
mov dword ptr [ebx+8] 0 +
mov [ebx+4] eax +
jmp loc_40B425  +
mov [esp+40h+var_3C] ebp +
mov ebx 0FFFFFFFFh +
mov [esp+40h+var_40] offset aCanTParseBitNu +
call sub_403610  +
jmp loc_40B4C1  +
mov [esp+40h+var_40] offset aTooManyOpcodeB +
mov ebx 0FFFFFFFFh +
call sub_403610  +
jmp loc_40B4C1  +
mov [esp+40h+var_40] offset aInvalidBitSp_0 +
mov ebx 0FFFFFFFFh +
call sub_403610  +
jmp loc_40B4C1  +
mov [esp+40h+var_3C] ebp +
mov ebx 0FFFFFFFFh +
mov [esp+40h+var_40] offset aInvalidBitSp_1 +
call sub_403610  +
jmp loc_40B4C1  +
add esp 3Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
xor ebx ebx +
jmp loc_40B4C1  +
***
jmp sub_40B620  +
***
sub eax 102h +
cmp eax 0Bh +
ja loc_40B690  +
jmp ds:off_46968C[eax*4]  +
mov eax 1 +
retn   +
mov eax 2 +
retn   +
mov eax 3 +
retn   +
mov eax 4 +
retn   +
mov eax 5 +
retn   +
mov eax 6 +
retn   +
mov eax 7 +
retn   +
mov eax 8 +
retn   +
mov eax 9 +
retn   +
mov eax 0Ah +
retn   +
mov eax 0Bh +
retn   +
xor eax eax +
retn   +
sub esp 1Ch +
mov [esp+1Ch+var_1C] offset aInvalidOpcode +
call sub_403610  +
mov eax 0FFFFFFFFh +
add esp 1Ch +
retn   +
***
push esi  +
push ebx  +
xor ebx ebx +
sub esp 4FCh +
lea esi [esp+4FCh+var_4BC] +
lea ecx [esp+4FCh+var_32C] +
mov ebp esi +
mov edi esi +
mov esi ecx +
mov ds:dword_487150 0 +
mov ds:dword_48714C 0FFFFFFFEh +
mov [esp+4FCh+var_4DC] 0C8h +
mov [esp+4FCh+var_4D4] ecx +
mov [esp+4FCh+var_4D0] 0 +
mov eax [esp+4FCh+var_4DC] +
mov [ebp+0] bx +
lea eax [eax+eax-2] +
lea edx [edi+eax] +
cmp ebp edx +
jb loc_40B7D5  +
sub ebp edi +
sar ebp 1 +
cmp [esp+4FCh+var_4DC] 270Fh +
lea esi [ebp+1] +
ja loc_40DA53  +
add eax 2 +
mov ecx 2710h +
cmp eax 2710h +
cmova eax ecx +
lea ecx [eax+eax] +
mov edx ecx +
add edx eax +
mov [esp+4FCh+var_4DC] eax +
lea eax [edx+edx+3] +
mov [esp+4FCh+var_4FC] eax +
mov [esp+4FCh+var_4D8] ecx +
call malloc  +
test eax eax +
jz loc_40DA53  +
lea ebp [esi+esi] +
mov [esp+4FCh+var_4F4] ebp +
shl esi 2 +
mov [esp+4FCh+var_4F8] edi +
mov [esp+4FCh+var_4FC] eax +
mov [esp+4FCh+var_4CC] eax +
call memcpy  +
mov edx [esp+4FCh+var_4D8] +
mov [esp+4FCh+var_4F4] esi +
lea eax [edx+3] +
mov edx [esp+4FCh+var_4CC] +
and eax 0FFFFFFFCh +
lea ecx [edx+eax] +
mov eax [esp+4FCh+var_4D4] +
mov [esp+4FCh+var_4FC] ecx +
mov [esp+4FCh+var_4D4] ecx +
mov [esp+4FCh+var_4F8] eax +
call memcpy  +
lea eax [esp+4FCh+var_4BC] +
mov ecx [esp+4FCh+var_4D4] +
cmp edi eax +
mov edx [esp+4FCh+var_4CC] +
jz loc_40B7B7  +
mov [esp+4FCh+var_4FC] edi +
call free  +
mov edx [esp+4FCh+var_4CC] +
mov ecx [esp+4FCh+var_4D4] +
mov eax [esp+4FCh+var_4D8] +
lea ebp [edx+ebp-2] +
lea esi [ecx+esi-4] +
lea eax [edx+eax-2] +
cmp ebp eax +
jnb loc_40DA74  +
mov [esp+4FCh+var_4D4] ecx +
mov edi edx +
cmp ebx 16h +
jz loc_40DA6B  +
movzx eax ds:word_46A7A0[ebx+ebx] +
movsx edx ax +
cmp edx 0FFFFFEF8h +
mov word ptr [esp+4FCh+var_4D8] ax +
jz loc_40B839  +
mov eax ds:dword_48714C +
cmp eax 0FFFFFFFEh +
jz loc_40B988  +
test eax eax +
jle loc_40B924  +
cmp eax 189h +
mov ecx 2 +
ja loc_40B81F  +
movzx ecx ds:byte_46AB00[eax] +
lea eax [edx+ecx] +
cmp eax 199h +
ja loc_40B839  +
movsx edx ds:word_469EA0[eax+eax] +
cmp edx ecx +
jz loc_40B950  +
movzx eax ds:byte_46A5E0[ebx] +
movzx ebx al +
test ebx ebx +
jz loc_40B870  +
movzx ecx ds:byte_469D20[ebx] +
mov edx 1 +
sub edx ecx +
cmp al 0B9h +
mov [esp+4FCh+var_4D8] ecx +
mov ecx [esi+edx*4] +
mov [esp+4FCh+var_4CC] ecx +
ja loc_40DE60  +
jmp ds:off_469A2C[ebx*4]  +
mov eax [esp+4FCh+var_4D0] +
test eax eax +
jz loc_40B935  +
cmp [esp+4FCh+var_4D0] 3 +
jz loc_40B8F0  +
movsx edx word ptr [esp+4FCh+var_4D8] +
jmp loc_40B8A6  +
cmp ebp edi +
jz loc_40B900  +
sub ebp 2 +
movsx eax word ptr [ebp+0] +
sub esi 4 +
movsx edx ds:word_46A7A0[eax+eax] +
cmp edx 0FFFFFEF8h +
jz loc_40B890  +
add edx 1 +
cmp edx 199h +
ja loc_40B890  +
cmp ds:word_469EA0[edx+edx] 1 +
jnz loc_40B890  +
movzx ebx ds:word_46A1E0[edx+edx] +
test ebx ebx +
jz loc_40B890  +
mov edx ds:dword_487154 +
mov eax esi +
add esi 4 +
mov [esp+4FCh+var_4D0] 3 +
mov [eax+4] edx +
jmp loc_40B980  +
cmp ds:dword_48714C 0 +
jg loc_40B9A0  +
jnz loc_40B883  +
nop   +
mov ebp edi +
mov ebx 1 +
lea eax [esp+4FCh+var_4BC] +
cmp ebp eax +
jz loc_40B917  +
mov [esp+4FCh+var_4FC] ebp +
call free  +
add esp 4FCh +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ds:dword_48714C 0 +
xor ecx ecx +
jmp loc_40B81F  +
mov [esp+4FCh+var_4FC] offset aSyntaxError +
add ds:dword_487150 1 +
call sub_403610  +
jmp loc_40B883  +
movzx ebx ds:word_46A1E0[eax+eax] +
test ebx ebx +
jz loc_40B9AF  +
mov eax ds:dword_487154 +
cmp [esp+4FCh+var_4D0] 1 +
mov ds:dword_48714C 0FFFFFFFEh +
adc [esp+4FCh+var_4D0] 0FFFFFFFFh +
add esi 4 +
mov [esi] eax +
lea esi [esi+0] +
add ebp 2 +
jmp loc_40B6F5  +
mov [esp+4FCh+var_4CC] edx +
call sub_409E00  +
mov edx [esp+4FCh+var_4CC] +
mov ds:dword_48714C eax +
jmp loc_40B804  +
mov ds:dword_48714C 0FFFFFFFEh +
jmp loc_40B883  +
mov eax [esi+4] +
xor edx edx +
xor ebx ebx +
mov [esp+4FCh+var_4CC] eax +
xor eax eax +
lea esi [esi+0] +
mov ecx [esp+4FCh+var_4CC] +
add eax esi +
add ebp edx +
lea esi [eax+4] +
movzx edx word ptr [ebp+0] +
mov [eax+4] ecx +
movzx eax ds:byte_469DE0[ebx] +
movsx ecx dx +
sub eax 8Bh +
movsx ebx ds:word_46A580[eax+eax] +
add ecx ebx +
cmp ecx 199h +
ja loc_40B9FD  +
cmp dx ds:word_469EA0[ecx+ecx] +
jz loc_40BA0A  +
movsx ebx ds:word_46A520[eax+eax] +
jmp loc_40B980  +
movzx ebx ds:word_46A1E0[ecx+ecx] +
jmp loc_40B980  +
mov eax [esi] +
mov edx ds:dword_486D24 +
mov ecx [eax+0Ch] +
mov [edx+7Ah] cx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov edx [esi] +
mov eax [edx+18h] +
mov [esp+4FCh+var_4F4] 100h +
mov [esp+4FCh+var_4C8] edx +
mov [esp+4FCh+var_4F8] eax +
mov eax ds:dword_486914 +
add eax 68Ch +
mov [esp+4FCh+var_4FC] eax +
call strncpy  +
mov eax ds:dword_486914 +
mov edx [esp+4FCh+var_4C8] +
mov byte ptr [eax+78Bh] 0 +
mov [esp+4FCh+var_4FC] edx +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov edx [esi] +
mov eax [edx+18h] +
mov [esp+4FCh+var_4F4] 100h +
mov [esp+4FCh+var_4C8] edx +
mov [esp+4FCh+var_4F8] eax +
mov eax ds:dword_486914 +
add eax 58Ch +
mov [esp+4FCh+var_4FC] eax +
call strncpy  +
mov eax ds:dword_486914 +
mov edx [esp+4FCh+var_4C8] +
mov byte ptr [eax+68Bh] 0 +
mov [esp+4FCh+var_4FC] edx +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486914 +
mov ecx [eax+0Ch] +
mov [edx+484h] ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov edx [esi] +
mov eax [edx+18h] +
mov [esp+4FCh+var_4F4] 100h +
mov [esp+4FCh+var_4C8] edx +
mov [esp+4FCh+var_4F8] eax +
mov eax ds:dword_486914 +
add eax 48Ch +
mov [esp+4FCh+var_4FC] eax +
call strncpy  +
mov eax ds:dword_486914 +
mov edx [esp+4FCh+var_4C8] +
mov byte ptr [eax+58Bh] 0 +
mov [esp+4FCh+var_4FC] edx +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax ds:dword_486914 +
mov ecx [esp+4FCh+var_4D8] +
mov dword ptr [eax+474h] 2 +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486910 +
mov ecx [eax+0Ch] +
mov [edx+4Ch] ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486910 +
mov ecx [eax+0Ch] +
mov [edx+48h] ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486910 +
mov ecx [eax+0Ch] +
mov [edx+44h] ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
xor ecx ecx +
mov edx ds:dword_486910 +
cmp dword ptr [eax] 14Eh +
setz cl  +
mov [edx+40h] ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi-8] +
mov [esp+4FCh+var_4C8] eax +
mov eax [eax] +
call sub_40B620  +
test eax eax +
mov [esp+4FCh+var_4C0] eax +
js loc_40B900  +
call sub_407550  +
test eax eax +
mov [esp+4FCh+var_4C4] eax +
jz loc_40DFB3  +
mov eax [esp+4FCh+var_4C4] +
call sub_40B360  +
test eax eax +
jnz loc_40B900  +
mov ecx [esp+4FCh+var_4C0] +
mov eax ds:dword_486D24 +
add ecx 50h +
mov edx [eax+ecx*4+0Ch] +
test edx edx +
jz loc_40BCA7  +
mov [esp+4FCh+var_4FC] edx +
mov [esp+4FCh+var_4C0] ecx +
call j_free  +
mov eax ds:dword_486D24 +
mov ecx [esp+4FCh+var_4C0] +
mov edx [esp+4FCh+var_4C4] +
mov [eax+ecx*4+0Ch] edx +
mov eax [esp+4FCh+var_4C8] +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax ds:dword_486910 +
mov [esp+4FCh+var_4F8] eax +
mov eax ds:dword_486D24 +
mov [esp+4FCh+var_4FC] eax +
call sub_407980  +
test eax eax +
mov edx eax +
jz loc_40BD13  +
mov eax ds:dword_486D24 +
mov [esp+4FCh+var_4C8] edx +
mov eax [eax+17Ch] +
mov [esp+4FCh+var_4F8] edx +
mov [esp+4FCh+var_4FC] eax +
call sub_4070C0  +
mov edx [esp+4FCh+var_4C8] +
mov [esp+4FCh+var_4FC] edx +
call sub_407440  +
mov eax ds:dword_486D24 +
mov edx [eax+17Ch] +
mov eax ds:dword_486910 +
mov [esp+4FCh+var_4FC] edx +
mov [esp+4FCh+var_4F8] eax +
call sub_406D30  +
mov ecx [esp+4FCh+var_4D8] +
mov ds:dword_486910 0 +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
call sub_4077D0  +
test eax eax +
mov ds:dword_486910 eax +
jz loc_40DFBE  +
mov edx [esi] +
mov ecx [edx+18h] +
mov [esp+4FCh+var_4F4] 40h +
mov [esp+4FCh+var_4FC] eax +
mov [esp+4FCh+var_4C8] edx +
mov [esp+4FCh+var_4F8] ecx +
call strncpy  +
mov eax ds:dword_486910 +
mov edx [esp+4FCh+var_4C8] +
mov byte ptr [eax+3Fh] 0 +
mov [esp+4FCh+var_4FC] edx +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov eax [eax] +
cmp eax 13Dh +
jz loc_40DBF2  +
cmp eax 140h +
jnz loc_40BDCC  +
mov eax ds:dword_486D24 +
mov dword ptr [eax+80h] 4 +
mov eax [esi-8] +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486D24 +
mov ecx [eax+0Ch] +
mov [edx+148h] ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486D24 +
mov ecx [eax+0Ch] +
mov [edx+144h] ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486D24 +
mov ecx [eax+0Ch] +
mov [edx+140h] ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486D24 +
mov ecx [eax+0Ch] +
mov [edx+13Ch] ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov ecx [esi] +
mov eax [ecx] +
cmp eax 14Eh +
jz loc_40DC49  +
cmp eax 14Dh +
jz loc_40DC38  +
cmp eax 137h +
jnz loc_40BED1  +
mov eax ds:dword_486D24 +
or dword ptr [eax+84h] 6 +
mov [esp+4FCh+var_4FC] ecx +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov edx [esi] +
mov eax [edx] +
cmp eax 14Eh +
jz loc_40DBE1  +
cmp eax 14Dh +
jnz loc_40BF10  +
mov eax ds:dword_486D24 +
and dword ptr [eax+84h] 0FFFFFFFEh +
mov [esp+4FCh+var_4FC] edx +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486D24 +
mov ecx [eax+0Ch] +
mov [edx+138h] cx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486D24 +
mov ecx [eax+0Ch] +
mov [edx+136h] cl +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486D24 +
mov ecx [eax+0Ch] +
mov [edx+135h] cl +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486D24 +
mov ecx [eax+0Ch] +
mov [edx+134h] cl +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov edx [esi] +
mov eax [edx] +
cmp eax 14Eh +
jz loc_40DC06  +
cmp eax 14Dh +
jnz loc_40C008  +
mov eax ds:dword_486D24 +
and dword ptr [eax+84h] 0FFFFFFDFh +
mov [esp+4FCh+var_4FC] edx +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov edx [esi] +
mov eax [edx] +
cmp eax 14Eh +
jz loc_40DB80  +
cmp eax 14Dh +
jnz loc_40C047  +
mov eax ds:dword_486D24 +
and dword ptr [eax+84h] 0FFFFFFEFh +
mov [esp+4FCh+var_4FC] edx +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov edx [esi] +
mov eax [edx] +
cmp eax 14Eh +
jz loc_40DBCD  +
cmp eax 14Dh +
jnz loc_40C089  +
mov eax ds:dword_486D24 +
and dword ptr [eax+84h] 0FFFFFEFFh +
mov [esp+4FCh+var_4FC] edx +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov edx [esi] +
mov eax [edx] +
cmp eax 14Eh +
jz loc_40DBB9  +
cmp eax 14Dh +
jnz loc_40C0CB  +
mov eax ds:dword_486D24 +
and dword ptr [eax+84h] 0FFFFEFFFh +
mov [esp+4FCh+var_4FC] edx +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov edx [esi] +
mov eax [edx] +
cmp eax 14Eh +
jz loc_40DBA5  +
cmp eax 14Dh +
jnz loc_40C10D  +
mov eax ds:dword_486D24 +
and dword ptr [eax+84h] 0FFFFF7FFh +
mov [esp+4FCh+var_4FC] edx +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov edx [esi] +
mov eax [edx] +
cmp eax 14Eh +
jz loc_40DB91  +
cmp eax 14Dh +
jnz loc_40C14F  +
mov eax ds:dword_486D24 +
and dword ptr [eax+84h] 0FFFFDFFFh +
mov [esp+4FCh+var_4FC] edx +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov edx [esi] +
mov eax [edx] +
cmp eax 14Eh +
jz loc_40DD70  +
cmp eax 14Dh +
jnz loc_40C191  +
mov eax ds:dword_486D24 +
and dword ptr [eax+84h] 0FFFFFF7Fh +
mov [esp+4FCh+var_4FC] edx +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov edx [esi] +
mov eax [edx] +
cmp eax 14Eh +
jz loc_40DD5F  +
cmp eax 14Dh +
jnz loc_40C1D0  +
mov eax ds:dword_486D24 +
and dword ptr [eax+84h] 0FFFFFFBFh +
mov [esp+4FCh+var_4FC] edx +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov edx [esi] +
mov eax [edx] +
cmp eax 14Eh +
jz loc_40DD4E  +
cmp eax 14Dh +
jnz loc_40C20F  +
mov eax ds:dword_486D24 +
and dword ptr [eax+84h] 0FFFFFFF7h +
mov [esp+4FCh+var_4FC] edx +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486D24 +
mov ecx [eax+0Ch] +
mov [edx+12Ch] ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486D24 +
mov ecx [eax+0Ch] +
mov [edx+128h] ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486D24 +
mov ecx [eax+0Ch] +
mov [edx+124h] ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486D24 +
mov ecx [eax+0Ch] +
mov [edx+120h] ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486D24 +
mov ecx [eax+0Ch] +
mov [edx+11Ch] ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486D24 +
mov ecx [eax+0Ch] +
mov [edx+118h] ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486D24 +
mov ecx [eax+0Ch] +
mov [edx+114h] ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486D24 +
mov ecx [eax+0Ch] +
mov [edx+110h] ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486D24 +
mov ecx [eax+0Ch] +
mov [edx+10Ch] ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486D24 +
mov ecx [eax+0Ch] +
mov [edx+108h] ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486D24 +
mov ecx [eax+0Ch] +
mov [edx+104h] ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486D24 +
mov ecx [eax+0Ch] +
mov [edx+100h] ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486D24 +
mov ecx [eax+0Ch] +
mov [edx+0FCh] ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486D24 +
mov ecx [eax+0Ch] +
mov [edx+0F8h] ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486D24 +
mov ecx [eax+0Ch] +
mov [edx+0F4h] ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486D24 +
mov ecx [eax+0Ch] +
mov [edx+0F0h] ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486D24 +
mov ecx [eax+0Ch] +
mov [edx+0ECh] ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486D24 +
mov ecx [eax+0Ch] +
mov [edx+0ACh] ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486D24 +
mov ecx [eax+0Ch] +
mov [edx+0A8h] ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486D24 +
mov ecx [eax+0Ch] +
mov [edx+0A4h] ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486D24 +
mov ecx [eax+0Ch] +
mov [edx+9Ch] ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486D24 +
mov ecx [eax+0Ch] +
mov [edx+0A0h] cl +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486D24 +
mov ecx [eax+0Ch] +
mov [edx+98h] ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486D24 +
mov ecx [eax+0Ch] +
mov [edx+94h] ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486D24 +
mov ecx [eax+0Ch] +
mov [edx+130h] ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486D24 +
mov ecx [eax+0Ch] +
mov [edx+90h] ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486D24 +
mov ecx [eax+0Ch] +
mov [edx+8Ch] ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486D24 +
mov ecx [eax+0Ch] +
mov [edx+88h] ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov edx [esi] +
mov eax [edx] +
cmp eax 116h +
jz loc_40DD3D  +
cmp eax 125h +
jnz loc_40C756  +
mov eax ds:dword_486D24 +
mov dword ptr [eax+7Ch] 1 +
mov [esp+4FCh+var_4F4] edx +
mov eax [esi-8] +
mov [esp+4FCh+var_4FC] 2 +
mov [esp+4FCh+var_4F8] eax +
call sub_403730  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486D24 +
mov ecx [eax+0Ch] +
mov [edx+75h] cl +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486D24 +
mov ecx [eax+0Ch] +
mov [edx+74h] cl +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486D24 +
mov ecx [eax+0Ch] +
mov [edx+70h] ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov [esp+4FCh+var_4C8] eax +
mov eax [eax+18h] +
mov [esp+4FCh+var_4F8] eax +
mov eax ds:dword_486D20 +
mov [esp+4FCh+var_4FC] eax +
call sub_407DB0  +
test eax eax +
jz loc_40DF72  +
mov [esp+4FCh+var_4FC] eax +
call sub_407CA0  +
test eax eax +
mov ds:dword_486D24 eax +
jz loc_40DF4E  +
mov edx ds:dword_48690C +
add eax 180h +
mov [esp+4FCh+var_4FC] eax +
mov [esp+4FCh+var_4F8] edx +
call strcpy  +
mov edx ds:dword_486908 +
mov eax ds:dword_486D24 +
mov [eax+284h] edx +
mov eax [esp+4FCh+var_4C8] +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
call sub_407C10  +
test eax eax +
mov ds:dword_486D24 eax +
jz loc_40DF36  +
mov edx ds:dword_48690C +
add eax 180h +
mov [esp+4FCh+var_4FC] eax +
mov [esp+4FCh+var_4F8] edx +
call strcpy  +
mov edx ds:dword_486908 +
mov eax ds:dword_486D24 +
mov ecx [esp+4FCh+var_4D8] +
mov [eax+284h] edx +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax ds:dword_486D24 +
cmp byte ptr [eax+40h] 0 +
jz loc_40DF1E  +
mov eax [eax+17Ch] +
mov [esp+4FCh+var_4FC] eax +
call sub_406F20  +
test eax eax +
jz loc_40DC6E  +
mov [esp+4FCh+var_4C8] edi +
mov edi eax +
mov [esp+4FCh+var_4C4] ebx +
jmp loc_40C930  +
mov edx [eax+4Ch] +
test edx edx +
jz loc_40DDAE  +
mov ebx [eax+44h] +
mov eax ecx +
imul eax edx +
cmp ebx eax +
jnz loc_40DD84  +
mov [esp+4FCh+var_4FC] edi +
call sub_406F40  +
test eax eax +
mov edi eax +
jz loc_40DC66  +
mov [esp+4FCh+var_4FC] edi +
call sub_406F60  +
mov edx [eax+40h] +
test edx edx +
jz loc_40C91E  +
mov ecx [eax+48h] +
test ecx ecx +
jnz loc_40C903  +
mov [esp+4FCh+var_4FC] offset aMustSpecifyPag +
mov ebp [esp+4FCh+var_4C8] +
mov ebx 1 +
call sub_403610  +
jmp loc_40B907  +
mov eax [esi] +
mov [esp+4FCh+var_4C8] eax +
mov eax [eax+18h] +
mov [esp+4FCh+var_4F8] eax +
mov eax ds:dword_4866C0 +
mov [esp+4FCh+var_4FC] eax +
call sub_408B00  +
test eax eax +
jz loc_40DF88  +
mov [esp+4FCh+var_4FC] eax +
call sub_408720  +
test eax eax +
mov ds:dword_486914 eax +
jz loc_40DF7D  +
mov edx ds:dword_48690C +
add eax 954h +
mov [esp+4FCh+var_4FC] eax +
mov [esp+4FCh+var_4F8] edx +
call strcpy  +
mov edx ds:dword_486908 +
mov eax ds:dword_486914 +
mov [eax+0A58h] edx +
mov eax [esp+4FCh+var_4C8] +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
call sub_4084C0  +
test eax eax +
mov ds:dword_486914 eax +
jz loc_40DE75  +
mov edx ds:dword_48690C +
add eax 954h +
mov [esp+4FCh+var_4FC] eax +
mov [esp+4FCh+var_4F8] edx +
call strcpy  +
mov edx ds:dword_486908 +
mov eax ds:dword_486914 +
mov ecx [esp+4FCh+var_4D8] +
mov [eax+0A58h] edx +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov ecx [esp+4FCh+var_4D8] +
mov [esp+4FCh+var_4CC] eax +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov ecx [esp+4FCh+var_4D8] +
mov ds:dword_4841AC 4 +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi-0Ch] +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov ecx [esp+4FCh+var_4D8] +
mov ds:dword_4841AC 3 +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov ecx [esp+4FCh+var_4D8] +
mov ds:dword_4841AC 2 +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov ecx [esp+4FCh+var_4D8] +
mov ds:dword_4841AC 1 +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax ds:dword_4841AC +
mov edx ds:dword_486914 +
shl eax 6 +
lea eax [edx+eax+1A8h] +
mov [esp+4FCh+var_4FC] eax +
call sub_410900  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax ds:dword_486914 +
mov edx ds:dword_4841AC +
mov [esp+4FCh+var_4C4] ebx +
mov [esp+4FCh+var_4C8] esi +
mov dword ptr [eax+edx*4+17Ch] 0 +
xor eax eax +
mov ebx eax +
jmp loc_40CB7C  +
mov ecx [eax+0Ch] +
cmp ecx 0FFh +
ja loc_40DA80  +
mov eax ds:dword_4841AC +
mov [esp+4FCh+var_4F8] ecx +
mov ecx ds:dword_486914 +
mov [esp+4FCh+var_4F4] 1 +
shl eax 6 +
lea eax [ecx+eax+1A8h] +
mov [esp+4FCh+var_4FC] eax +
call sub_4108C0  +
mov [esp+4FCh+var_4FC] esi +
call sub_4034C0  +
mov eax ds:dword_486918 +
mov [esp+4FCh+var_4FC] eax +
call sub_406F70  +
test eax eax +
jz loc_40DA9E  +
mov eax ds:dword_486918 +
mov [esp+4FCh+var_4F8] 1 +
mov [esp+4FCh+var_4FC] eax +
call sub_407120  +
test ebx ebx +
mov esi eax +
jz loc_40CB3C  +
mov ebx 0FFFFFFFFh +
jmp loc_40CB74  +
mov eax ds:dword_4841AC +
mov edx ds:dword_486914 +
shl eax 6 +
lea eax [edx+eax+1A8h] +
mov [esp+4FCh+var_4FC] eax +
call sub_410900  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov ecx ds:dword_4841AC +
mov edx [eax+0Ch] +
mov [esp+4FCh+var_4FC] eax +
mov [esp+4FCh+var_4C8] ecx +
mov [esp+4FCh+var_4C4] edx +
call sub_4034C0  +
mov edx [esp+4FCh+var_4C4] +
cmp edx 0FFh +
ja loc_40DEB2  +
mov eax [esp+4FCh+var_4C8] +
mov [esp+4FCh+var_4F8] edx +
mov edx ds:dword_486914 +
mov [esp+4FCh+var_4F4] 1 +
shl eax 6 +
lea eax [edx+eax+1A8h] +
mov [esp+4FCh+var_4FC] eax +
call sub_4108C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov ecx ds:dword_4841AC +
mov edx [eax+0Ch] +
mov [esp+4FCh+var_4FC] eax +
mov [esp+4FCh+var_4C8] ecx +
mov [esp+4FCh+var_4C4] edx +
call sub_4034C0  +
mov edx [esp+4FCh+var_4C4] +
cmp edx 0FFh +
ja loc_40DEB2  +
mov eax [esp+4FCh+var_4C8] +
mov [esp+4FCh+var_4F8] edx +
mov edx ds:dword_486914 +
mov [esp+4FCh+var_4F4] 0 +
shl eax 6 +
lea eax [edx+eax+1A8h] +
mov [esp+4FCh+var_4FC] eax +
call sub_4108C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov [esp+4FCh+var_4FC] 4 +
call malloc  +
test eax eax +
jz loc_40DDC8  +
mov ecx [esi] +
mov edx [ecx+0Ch] +
mov [esp+4FCh+var_4C8] ecx +
mov [eax] edx +
mov edx ds:dword_486914 +
mov edx [edx+488h] +
mov [esp+4FCh+var_4F8] eax +
mov [esp+4FCh+var_4FC] edx +
call sub_406D30  +
mov ecx [esp+4FCh+var_4C8] +
mov eax ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax ds:dword_486914 +
mov eax [eax+488h] +
mov [esp+4FCh+var_4F8] offset free +
mov [esp+4FCh+var_4FC] eax +
call sub_406D00  +
mov edx ds:dword_486914 +
mov [esp+4FCh+var_4F8] 0 +
mov [esp+4FCh+var_4FC] 0 +
mov [esp+4FCh+var_4C8] edx +
call sub_406BF0  +
mov edx [esp+4FCh+var_4C8] +
mov [edx+488h] eax +
mov [esp+4FCh+var_4FC] 4 +
call malloc  +
test eax eax +
jz loc_40DE11  +
mov ecx [esi] +
mov edx [ecx+0Ch] +
mov [esp+4FCh+var_4C8] ecx +
mov [eax] edx +
mov edx ds:dword_486914 +
mov edx [edx+488h] +
mov [esp+4FCh+var_4F8] eax +
mov [esp+4FCh+var_4FC] edx +
call sub_406D30  +
mov ecx [esp+4FCh+var_4C8] +
mov eax ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov edx [esi] +
mov eax [edx+18h] +
mov [esp+4FCh+var_4F4] 100h +
mov [esp+4FCh+var_4C8] edx +
mov [esp+4FCh+var_4F8] eax +
mov eax ds:dword_486914 +
add eax 78Ch +
mov [esp+4FCh+var_4FC] eax +
call strncpy  +
mov eax ds:dword_486914 +
mov edx [esp+4FCh+var_4C8] +
mov byte ptr [eax+88Bh] 0 +
mov [esp+4FCh+var_4FC] edx +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov edx [esi-4] +
mov eax [edx+18h] +
mov [esp+4FCh+var_4F4] 104h +
mov [esp+4FCh+var_4FC] offset byte_486800 +
mov [esp+4FCh+var_4C8] edx +
mov [esp+4FCh+var_4F8] eax +
call strncpy  +
mov edx [esp+4FCh+var_4C8] +
mov ds:byte_486903 0 +
mov [esp+4FCh+var_4FC] edx +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov edx [esi-4] +
mov eax [edx+18h] +
mov [esp+4FCh+var_4F4] 400h +
mov [esp+4FCh+var_4FC] offset unk_486920 +
mov [esp+4FCh+var_4C8] edx +
mov [esp+4FCh+var_4F8] eax +
call strncpy  +
mov edx [esp+4FCh+var_4C8] +
mov ds:byte_486D1F 0 +
mov [esp+4FCh+var_4FC] edx +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov edx [esi-4] +
mov eax [edx+18h] +
mov [esp+4FCh+var_4F4] 104h +
mov [esp+4FCh+var_4FC] offset byte_4866E0 +
mov [esp+4FCh+var_4C8] edx +
mov [esp+4FCh+var_4F8] eax +
call strncpy  +
mov edx [esp+4FCh+var_4C8] +
mov ds:byte_4867E3 0 +
mov [esp+4FCh+var_4FC] edx +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov edx [esi] +
mov eax [edx+18h] +
mov [esp+4FCh+var_4F4] 20h +
mov [esp+4FCh+var_4C8] edx +
mov [esp+4FCh+var_4F8] eax +
mov eax ds:dword_486D24 +
add eax 40h +
mov [esp+4FCh+var_4FC] eax +
call strncpy  +
mov eax ds:dword_486D24 +
mov edx [esp+4FCh+var_4C8] +
mov byte ptr [eax+5Fh] 0 +
mov [esp+4FCh+var_4FC] edx +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov ecx [esp+4FCh+var_4D8] +
mov ds:dword_4841AC 0Ah +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov ecx [esp+4FCh+var_4D8] +
mov ds:dword_4841AC 9 +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov ecx [esp+4FCh+var_4D8] +
mov ds:dword_4841AC 8 +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov ecx [esp+4FCh+var_4D8] +
mov ds:dword_4841AC 7 +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov ecx [esp+4FCh+var_4D8] +
mov ds:dword_4841AC 6 +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov ecx [esp+4FCh+var_4D8] +
mov ds:dword_4841AC 5 +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi-0Ch] +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486D24 +
mov ecx [eax+0Ch] +
mov [edx+68h] ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov [esp+4FCh+var_4FC] offset aDevicecodeIsDe +
mov ebp edi +
mov ebx 1 +
call sub_403610  +
jmp loc_40B907  +
mov edx [esi] +
mov eax [edx+18h] +
mov [esp+4FCh+var_4F4] 7 +
mov [esp+4FCh+var_4C8] edx +
mov [esp+4FCh+var_4F8] eax +
mov eax ds:dword_486D24 +
add eax 60h +
mov [esp+4FCh+var_4FC] eax +
call strncpy  +
mov eax ds:dword_486D24 +
mov edx [esp+4FCh+var_4C8] +
mov byte ptr [eax+67h] 0 +
mov [esp+4FCh+var_4FC] edx +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov edx [esi] +
mov eax [edx+18h] +
mov [esp+4FCh+var_4F4] 40h +
mov [esp+4FCh+var_4C8] edx +
mov [esp+4FCh+var_4F8] eax +
mov eax ds:dword_486D24 +
mov [esp+4FCh+var_4FC] eax +
call strncpy  +
mov eax ds:dword_486D24 +
mov edx [esp+4FCh+var_4C8] +
mov byte ptr [eax+3Fh] 0 +
mov [esp+4FCh+var_4FC] edx +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi-8] +
mov edx ds:dword_486D24 +
mov [esp+4FCh+var_4C8] eax +
mov eax [eax+0Ch] +
mov [edx+76h] al +
mov eax [esi-4] +
movzx ecx byte ptr [eax+0Ch] +
mov [esp+4FCh+var_4C0] eax +
mov eax [esi] +
mov [edx+77h] cl +
mov [esp+4FCh+var_4C4] eax +
mov ecx [eax+0Ch] +
mov eax [esp+4FCh+var_4C8] +
mov [edx+78h] cl +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov eax [esp+4FCh+var_4C0] +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov eax [esp+4FCh+var_4C4] +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486D24 +
mov ecx [eax+0Ch] +
mov [edx+6Ch] ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486910 +
mov ecx [eax+0Ch] +
mov [edx+54h] ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486910 +
mov ecx [eax+0Ch] +
mov [edx+50h] ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax ds:dword_486914 +
mov eax [eax] +
mov [esp+4FCh+var_4FC] eax +
call sub_406F70  +
test eax eax +
jz loc_40DF1E  +
mov eax ds:dword_486914 +
mov ecx [eax+178h] +
test ecx ecx +
jz loc_40DE48  +
mov eax [eax] +
mov [esp+4FCh+var_4FC] eax +
call sub_406F20  +
mov [esp+4FCh+var_4FC] eax +
call sub_406F60  +
mov [esp+4FCh+var_4F8] eax +
mov [esp+4FCh+var_4C0] eax +
mov eax ds:dword_4866C0 +
mov [esp+4FCh+var_4FC] eax +
call sub_408B00  +
test eax eax +
mov ecx eax +
jz loc_40D296  +
mov eax ds:dword_486908 +
mov edx [esp+4FCh+var_4C0] +
mov [esp+4FCh+var_4C4] ecx +
mov [esp+4FCh+var_4C8] eax +
mov eax ds:dword_486914 +
mov eax [eax+0A58h] +
mov ds:dword_486908 eax +
mov eax [ecx+0A58h] +
mov [esp+4FCh+var_4F8] edx +
mov [esp+4FCh+var_4FC] offset aProgrammerSOve +
mov [esp+4FCh+var_4F0] eax +
lea eax [ecx+954h] +
mov [esp+4FCh+var_4F4] eax +
call sub_403680  +
mov eax [esp+4FCh+var_4C8] +
mov ecx [esp+4FCh+var_4C4] +
mov ds:dword_486908 eax +
mov eax ds:dword_4866C0 +
mov [esp+4FCh+var_4F8] ecx +
mov [esp+4FCh+var_4C8] ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_4070C0  +
mov ecx [esp+4FCh+var_4C8] +
mov [esp+4FCh+var_4FC] ecx +
call sub_4086D0  +
mov eax ds:dword_486914 +
mov [esp+4FCh+var_4F4] 1 +
mov [esp+4FCh+var_4F8] eax +
mov eax ds:dword_4866C0 +
mov [esp+4FCh+var_4FC] eax +
call sub_407020  +
mov ecx [esp+4FCh+var_4D8] +
mov ds:dword_486914 0 +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi-4] +
mov edx [eax] +
cmp edx 14Eh +
jz loc_40DE18  +
cmp edx 14Dh +
jnz loc_40D2F6  +
mov ds:dword_4866C4 0 +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi-4] +
fld  qword ptr [eax+10h] +
mov [esp+4FCh+var_4FC] eax +
fstp  ds:dbl_486D28 +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486910 +
mov ecx [eax+0Ch] +
mov [edx+6Ch] ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486910 +
mov ecx [eax+0Ch] +
mov [edx+68h] ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486910 +
mov ecx [eax+0Ch] +
mov [edx+64h] ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486910 +
mov ecx [eax+0Ch] +
mov [edx+61h] cl +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486910 +
mov ecx [eax+0Ch] +
mov [edx+74h] ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486910 +
mov ecx [eax+0Ch] +
mov [edx+70h] ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi-8] +
mov [esp+4FCh+var_4C8] eax +
mov eax [eax] +
call sub_40B620  +
test eax eax +
mov [esp+4FCh+var_4C0] eax +
js loc_40B900  +
call sub_407550  +
test eax eax +
mov [esp+4FCh+var_4C4] eax +
jz loc_40DFB3  +
mov eax [esp+4FCh+var_4C4] +
call sub_40B360  +
test eax eax +
jnz loc_40B900  +
mov ecx [esp+4FCh+var_4C0] +
mov eax ds:dword_486910 +
add ecx 20h +
mov edx [eax+ecx*4] +
test edx edx +
jz loc_40D4A2  +
mov [esp+4FCh+var_4FC] edx +
mov [esp+4FCh+var_4C0] ecx +
call j_free  +
mov eax ds:dword_486910 +
mov ecx [esp+4FCh+var_4C0] +
mov edx [esp+4FCh+var_4C4] +
mov [eax+ecx*4] edx +
mov eax [esp+4FCh+var_4C8] +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov edx ds:dword_486D24 +
xor eax eax +
mov [esp+4FCh+var_4C4] edi +
mov edi eax +
mov [esp+4FCh+var_4C8] 1 +
mov dword ptr [edx+0D7h] 0 +
mov dword ptr [edx+0DBh] 0 +
mov dword ptr [edx+0DFh] 0 +
mov dword ptr [edx+0E3h] 0 +
mov dword ptr [edx+0E7h] 0 +
jmp loc_40D52F  +
mov edx [eax+0Ch] +
mov ecx ds:dword_486D24 +
mov [ecx+edi+0D7h] dl +
add edi 1 +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov eax ds:dword_486918 +
mov [esp+4FCh+var_4FC] eax +
call sub_406F70  +
test eax eax +
jz loc_40DB5B  +
mov eax ds:dword_486918 +
mov [esp+4FCh+var_4F8] 1 +
mov [esp+4FCh+var_4FC] eax +
call sub_407120  +
cmp edi 13h +
jbe loc_40D514  +
mov [esp+4FCh+var_4C8] 0 +
jmp loc_40D527  +
mov eax ds:dword_486D24 +
xor edx edx +
mov [esp+4FCh+var_4C4] edi +
mov [esp+4FCh+var_4C8] 1 +
mov [eax+0D4h] dx +
mov byte ptr [eax+0D6h] 0 +
xor eax eax +
mov edi eax +
jmp loc_40D5AA  +
mov edx [eax+0Ch] +
mov ecx ds:dword_486D24 +
mov [ecx+edi+0D4h] dl +
add edi 1 +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov eax ds:dword_486918 +
mov [esp+4FCh+var_4FC] eax +
call sub_406F70  +
test eax eax +
jz loc_40DAEA  +
mov eax ds:dword_486918 +
mov [esp+4FCh+var_4F8] 1 +
mov [esp+4FCh+var_4FC] eax +
call sub_407120  +
cmp edi 2 +
jbe loc_40D58F  +
mov [esp+4FCh+var_4C8] 0 +
jmp loc_40D5A2  +
mov eax ds:dword_486D24 +
mov ecx 20h +
lea edx [eax+0B4h] +
test dl 1 +
mov dword ptr [eax+0B0h] 2 +
jnz loc_40DE9E  +
test dl 2 +
jnz loc_40DE8D  +
mov eax ecx +
and eax 0FFFFFFFCh +
mov [esp+4FCh+var_4C8] eax +
xor eax eax +
mov dword ptr [edx+eax] 0 +
add eax 4 +
cmp eax [esp+4FCh+var_4C8] +
jb loc_40D61A  +
add edx eax +
test cl 2 +
jz loc_40D63A  +
xor eax eax +
add edx 2 +
mov [edx-2] ax +
and ecx 1 +
jz loc_40D642  +
mov byte ptr [edx] 0 +
xor eax eax +
mov [esp+4FCh+var_4C4] edi +
mov edi eax +
mov [esp+4FCh+var_4C8] 1 +
jmp loc_40D66F  +
mov edx [eax+0Ch] +
mov ecx ds:dword_486D24 +
mov [ecx+edi+0B4h] dl +
add edi 1 +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov eax ds:dword_486918 +
mov [esp+4FCh+var_4FC] eax +
call sub_406F70  +
test eax eax +
jz loc_40DAC5  +
mov eax ds:dword_486918 +
mov [esp+4FCh+var_4F8] 1 +
mov [esp+4FCh+var_4FC] eax +
call sub_407120  +
cmp edi 1Fh +
jbe loc_40D654  +
mov [esp+4FCh+var_4C8] 0 +
jmp loc_40D667  +
mov eax ds:dword_486D24 +
mov ecx 20h +
lea edx [eax+0B4h] +
test dl 1 +
mov dword ptr [eax+0B0h] 1 +
jnz loc_40DF0A  +
test dl 2 +
jnz loc_40DEF9  +
mov eax ecx +
and eax 0FFFFFFFCh +
mov [esp+4FCh+var_4C8] eax +
xor eax eax +
mov dword ptr [edx+eax] 0 +
add eax 4 +
cmp eax [esp+4FCh+var_4C8] +
jb loc_40D6DF  +
add edx eax +
test cl 2 +
jz loc_40D6FF  +
xor eax eax +
add edx 2 +
mov [edx-2] ax +
and ecx 1 +
jz loc_40D707  +
mov byte ptr [edx] 0 +
xor eax eax +
mov [esp+4FCh+var_4C4] edi +
mov edi eax +
mov [esp+4FCh+var_4C8] 1 +
jmp loc_40D734  +
mov edx [eax+0Ch] +
mov ecx ds:dword_486D24 +
mov [ecx+edi+0B4h] dl +
add edi 1 +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov eax ds:dword_486918 +
mov [esp+4FCh+var_4FC] eax +
call sub_406F70  +
test eax eax +
jz loc_40DB36  +
mov eax ds:dword_486918 +
mov [esp+4FCh+var_4F8] 1 +
mov [esp+4FCh+var_4FC] eax +
call sub_407120  +
cmp edi 1Fh +
jbe loc_40D719  +
mov [esp+4FCh+var_4C8] 0 +
jmp loc_40D72C  +
xor eax eax +
mov [esp+4FCh+var_4C4] ebx +
mov ebx eax +
mov [esp+4FCh+var_4C8] esi +
jmp loc_40D788  +
mov ebx 1 +
mov [esp+4FCh+var_4FC] esi +
call sub_4034C0  +
mov eax ds:dword_486904 +
mov [esp+4FCh+var_4FC] eax +
call sub_406F70  +
test eax eax +
jz loc_40DB0F  +
mov eax ds:dword_486904 +
mov [esp+4FCh+var_4F8] 1 +
mov [esp+4FCh+var_4FC] eax +
call sub_407120  +
test ebx ebx +
mov esi eax +
jnz loc_40D77B  +
mov eax [eax+18h] +
mov [esp+4FCh+var_4FC] eax +
call sub_4039A0  +
test eax eax +
jz loc_40D77B  +
mov ecx ds:dword_486914 +
mov ecx [ecx] +
mov [esp+4FCh+var_4F8] eax +
mov [esp+4FCh+var_4FC] ecx +
call sub_406D30  +
jmp loc_40D780  +
mov eax [esi] +
mov [esp+4FCh+var_4F8] eax +
mov eax ds:dword_486918 +
mov [esp+4FCh+var_4FC] eax +
call sub_406D30  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov [esp+4FCh+var_4F8] eax +
mov eax ds:dword_486904 +
mov [esp+4FCh+var_4FC] eax +
call sub_406D30  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov [esp+4FCh+var_4FC] offset aProgrammerType +
mov ebp edi +
mov ebx 1 +
call sub_403610  +
jmp loc_40B907  +
mov ecx [esi] +
mov eax [ecx+18h] +
mov [esp+4FCh+var_4C8] ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_409550  +
mov ecx [esp+4FCh+var_4C8] +
test eax eax +
jz loc_40DECA  +
mov edx [eax+4] +
mov eax ds:dword_486914 +
mov [eax+178h] edx +
mov [esp+4FCh+var_4FC] ecx +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486914 +
mov ecx [eax+0Ch] +
mov [edx+480h] ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov edx [esi] +
mov eax [edx+18h] +
mov [esp+4FCh+var_4F4] 50h +
mov [esp+4FCh+var_4C8] edx +
mov [esp+4FCh+var_4F8] eax +
mov eax ds:dword_486914 +
add eax 4 +
mov [esp+4FCh+var_4FC] eax +
call strncpy  +
mov eax ds:dword_486914 +
mov edx [esp+4FCh+var_4C8] +
mov byte ptr [eax+53h] 0 +
mov [esp+4FCh+var_4FC] edx +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax ds:dword_486914 +
mov ecx [esp+4FCh+var_4D8] +
mov dword ptr [eax+474h] 1 +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax ds:dword_486914 +
mov ecx [esp+4FCh+var_4D8] +
mov dword ptr [eax+474h] 0 +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov ecx [esp+4FCh+var_4D8] +
fild  dword ptr [eax+0Ch] +
mov [esp+4FCh+var_4CC] eax +
fstp  qword ptr [eax+10h] +
mov dword ptr [eax+8] 2 +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov [esp+4FCh+var_4F8] eax +
mov eax ds:dword_486904 +
mov [esp+4FCh+var_4FC] eax +
call sub_406D30  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486910 +
mov ecx [eax+0Ch] +
mov [edx+60h] cl +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
xor ecx ecx +
mov edx ds:dword_486910 +
cmp dword ptr [eax] 14Eh +
setz cl  +
mov [edx+5Ch] ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov edx ds:dword_486910 +
mov ecx [eax+0Ch] +
mov [edx+58h] ecx +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
mov [esp+4FCh+var_4F8] eax +
mov eax ds:dword_486918 +
mov [esp+4FCh+var_4FC] eax +
call sub_406D30  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov [esp+4FCh+var_4FC] offset aMemoryExhauste +
mov ebp edi +
mov ebx 2 +
call sub_403610  +
jmp loc_40B907  +
mov ebp edi +
xor ebx ebx +
jmp loc_40B907  +
mov ebp edx +
mov ebx 1 +
jmp loc_40B907  +
mov [esp+4FCh+var_4FC] offset aPinMustBeInThe +
mov ebx 0FFFFFFFFh +
mov [esp+4FCh+var_4C0] ecx +
call sub_403610  +
mov ecx [esp+4FCh+var_4C0] +
jmp loc_40CB4B  +
mov eax ebx +
mov esi [esp+4FCh+var_4C8] +
test eax eax +
mov ebx [esp+4FCh+var_4C4] +
jnz loc_40B900  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov ecx [esp+4FCh+var_4C8] +
mov edi [esp+4FCh+var_4C4] +
test ecx ecx +
jz loc_40DDCF  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov ecx [esp+4FCh+var_4C8] +
mov edi [esp+4FCh+var_4C4] +
test ecx ecx +
jz loc_40DDF0  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax ebx +
mov esi [esp+4FCh+var_4C8] +
test eax eax +
mov ebx [esp+4FCh+var_4C4] +
jnz loc_40B900  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esp+4FCh+var_4C8] +
mov edi [esp+4FCh+var_4C4] +
test eax eax +
jz loc_40DE27  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov edx [esp+4FCh+var_4C8] +
mov edi [esp+4FCh+var_4C4] +
test edx edx +
jz loc_40DC17  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax ds:dword_486D24 +
or dword ptr [eax+84h] 10h +
jmp loc_40C047  +
mov eax ds:dword_486D24 +
or dword ptr [eax+84h] 2000h +
jmp loc_40C14F  +
mov eax ds:dword_486D24 +
or dword ptr [eax+84h] 800h +
jmp loc_40C10D  +
mov eax ds:dword_486D24 +
or dword ptr [eax+84h] 1000h +
jmp loc_40C0CB  +
mov eax ds:dword_486D24 +
or dword ptr [eax+84h] 100h +
jmp loc_40C089  +
mov eax ds:dword_486D24 +
or dword ptr [eax+84h] 1 +
jmp loc_40BF10  +
mov eax ds:dword_486D24 +
mov dword ptr [eax+80h] 3 +
jmp loc_40BDCC  +
mov eax ds:dword_486D24 +
or dword ptr [eax+84h] 20h +
jmp loc_40C008  +
mov [esp+4FCh+var_4FC] offset aTooManyBytesIn +
call sub_403680  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax ds:dword_486D24 +
and dword ptr [eax+84h] 0FFFFFFF9h +
jmp loc_40BED1  +
mov edx ds:dword_486D24 +
mov eax [edx+84h] +
and eax 0FFFFFFFBh +
or eax 2 +
mov [edx+84h] eax +
jmp loc_40BED1  +
mov edi [esp+4FCh+var_4C8] +
mov ebx [esp+4FCh+var_4C4] +
mov eax ds:dword_486D24 +
add eax 40h +
mov [esp+4FCh+var_4F8] eax +
mov eax ds:dword_486D20 +
mov [esp+4FCh+var_4FC] eax +
call sub_407DB0  +
test eax eax +
mov edx eax +
jz loc_40DD00  +
mov eax ds:dword_486908 +
mov ecx ds:dword_486D24 +
mov [esp+4FCh+var_4C4] edx +
mov [esp+4FCh+var_4C8] eax +
mov eax [ecx+284h] +
add ecx 40h +
mov ds:dword_486908 eax +
mov eax [edx+284h] +
mov [esp+4FCh+var_4F8] ecx +
mov [esp+4FCh+var_4FC] offset aPartSOverwrite +
mov [esp+4FCh+var_4F0] eax +
lea eax [edx+180h] +
mov [esp+4FCh+var_4F4] eax +
call sub_403680  +
mov eax [esp+4FCh+var_4C8] +
mov edx [esp+4FCh+var_4C4] +
mov ds:dword_486908 eax +
mov eax ds:dword_486D20 +
mov [esp+4FCh+var_4F8] edx +
mov [esp+4FCh+var_4C8] edx +
mov [esp+4FCh+var_4FC] eax +
call sub_4070C0  +
mov edx [esp+4FCh+var_4C8] +
mov [esp+4FCh+var_4FC] edx +
call sub_407D40  +
mov eax ds:dword_486D24 +
mov [esp+4FCh+var_4F4] 1 +
mov [esp+4FCh+var_4F8] eax +
mov eax ds:dword_486D20 +
mov [esp+4FCh+var_4FC] eax +
call sub_407020  +
mov ecx [esp+4FCh+var_4D8] +
mov ds:dword_486D24 0 +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax ds:dword_486D24 +
mov dword ptr [eax+7Ch] 0 +
jmp loc_40C756  +
mov eax ds:dword_486D24 +
or dword ptr [eax+84h] 8 +
jmp loc_40C20F  +
mov eax ds:dword_486D24 +
or dword ptr [eax+84h] 40h +
jmp loc_40C1D0  +
mov eax ds:dword_486D24 +
or dword ptr [eax+84h] 80h +
jmp loc_40C191  +
mov [esp+4FCh+var_4EC] ebx +
mov ebp [esp+4FCh+var_4C8] +
mov ebx 1 +
mov [esp+4FCh+var_4F0] eax +
mov [esp+4FCh+var_4F4] edx +
mov [esp+4FCh+var_4F8] ecx +
mov [esp+4FCh+var_4FC] offset aPageSizeUNum_p +
call sub_403610  +
jmp loc_40B907  +
mov [esp+4FCh+var_4FC] offset aMustSpecifyNum +
mov ebp [esp+4FCh+var_4C8] +
mov ebx 1 +
call sub_403610  +
jmp loc_40B907  +
mov eax [esi] +
jmp loc_40CCF2  +
mov [esp+4FCh+var_4FC] offset aTooManyBytes_0 +
call sub_403680  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov [esp+4FCh+var_4FC] offset aTooManyBytes_1 +
call sub_403680  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov eax [esi] +
jmp loc_40CD8F  +
mov ds:dword_4866C4 1 +
jmp loc_40D2F6  +
mov [esp+4FCh+var_4FC] offset aTooManyBytes_0 +
call sub_403680  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov [esp+4FCh+var_4FC] offset aProgrammerTy_0 +
mov ebp edi +
mov ebx 1 +
call sub_403610  +
jmp loc_40B907  +
mov ecx [esp+4FCh+var_4D8] +
mov eax ecx +
shl eax 2 +
lea edx [ecx+ecx] +
neg eax  +
neg edx  +
jmp loc_40B9C0  +
mov [esp+4FCh+var_4FC] offset aCouldNotCrea_1 +
mov ebp edi +
mov ebx 1 +
call sub_403610  +
jmp loc_40B907  +
xor eax eax +
add edx 2 +
mov [edx-2] ax +
sub ecx 2 +
jmp loc_40D60F  +
mov byte ptr [eax+0B4h] 0 +
lea edx [eax+0B5h] +
mov cl 1Fh +
jmp loc_40D606  +
mov [esp+4FCh+var_4FC] offset aPinMustBeInThe +
mov ebp edi +
mov ebx 1 +
call sub_403610  +
jmp loc_40B907  +
mov eax [ecx+18h] +
mov ebp edi +
mov ebx 1 +
mov [esp+4FCh+var_4FC] offset aProgrammerTy_1 +
mov [esp+4FCh+var_4DC] ecx +
mov [esp+4FCh+var_4F8] eax +
call sub_403610  +
mov edx [esp+4FCh+var_4DC] +
mov [esp+4FCh+var_4FC] edx +
call sub_4034C0  +
jmp loc_40B907  +
xor eax eax +
add edx 2 +
mov [edx-2] ax +
sub ecx 2 +
jmp loc_40D6D4  +
mov byte ptr [eax+0B4h] 0 +
lea edx [eax+0B5h] +
mov cl 1Fh +
jmp loc_40D6CB  +
mov [esp+4FCh+var_4FC] offset aRequiredParame +
mov ebp edi +
mov ebx 1 +
call sub_403610  +
jmp loc_40B907  +
mov [esp+4FCh+var_4FC] offset aCouldNotCrea_2 +
mov ebp edi +
mov ebx 1 +
call sub_403610  +
jmp loc_40B907  +
mov ebp edi +
mov [esp+4FCh+var_4FC] offset aCouldNotDupl_1 +
call sub_403610  +
mov eax [esp+4FCh+var_4C8] +
mov ebx 1 +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
jmp loc_40B907  +
mov ebp edi +
mov [esp+4FCh+var_4FC] offset aCanTFindParent +
jmp loc_40DF57  +
mov ebp edi +
mov [esp+4FCh+var_4FC] offset aCouldNotDupl_2 +
jmp loc_40DF57  +
mov ebx [esp+4FCh+var_4C8] +
mov ebp edi +
mov eax [ebx+18h] +
mov [esp+4FCh+var_4FC] offset aParentProgramm +
mov [esp+4FCh+var_4F8] eax +
call sub_403610  +
mov [esp+4FCh+var_4FC] ebx +
mov ebx 1 +
call sub_4034C0  +
jmp loc_40B907  +
mov ebp edi +
mov [esp+4FCh+var_4FC] offset aCouldNotCrea_3 +
jmp loc_40DF57  +
mov [esp+4FCh+var_4FC] offset aCouldNotCrea_4 +
mov ebp edi +
mov ebx 1 +
mov [esp+4FCh+var_4DC] esi +
call sub_403610  +
mov ecx [esp+4FCh+var_4DC] +
mov eax [ecx] +
mov [esp+4FCh+var_4FC] eax +
call sub_4034C0  +
jmp loc_40B907  +
***
push esi  +
push ebx  +
mov ebx eax +
sub esp 12Ch +
mov [esp+12Ch+var_128] offset unk_46ACA0 +
mov [esp+12Ch+var_12C] eax +
call fopen  +
test eax eax +
mov esi eax +
jz loc_40E192  +
mov eax ds:isxdigit +
mov ebx 1 +
lea edi [esp+12Ch+var_10C] +
mov [esp+12Ch+var_110] eax +
mov [esp+12Ch+var_124] esi +
mov [esp+12Ch+var_128] 100h +
mov [esp+12Ch+var_12C] edi +
call fgets  +
test eax eax +
jz loc_40E180  +
test ebx ebx +
jz loc_40E053  +
cmp byte ptr [esp+12Ch+var_10C] 7Fh +
jz loc_40E150  +
mov [esp+12Ch+var_D] 0 +
mov edx edi +
mov ecx [edx] +
add edx 4 +
lea eax [ecx-1010101h] +
not ecx  +
and eax ecx +
and eax 80808080h +
jz loc_40E05D  +
mov ecx eax +
shr ecx 10h +
test eax 8080h +
cmovz eax ecx +
lea ebx [edx+2] +
cmovnz ebx edx +
add al al +
sbb ebx 3 +
sub ebx edi +
cmp byte ptr [esp+ebx+12Ch+var_110+3] 0Ah +
lea eax [ebx-1] +
jnz loc_40E09E  +
mov byte ptr [esp+ebx+12Ch+var_110+3] 0 +
mov ebx eax +
test ebx ebx +
movzx ebp byte ptr [esp+12Ch+var_10C] +
jle loc_40E0C4  +
mov eax ebp +
test al al +
js loc_40E110  +
lea eax [esp+12Ch+var_10C+1] +
lea ecx [edi+ebx] +
jmp loc_40E0C0  +
movzx edx byte ptr [eax] +
add eax 1 +
test dl dl +
js loc_40E110  +
cmp eax ecx +
jnz loc_40E0B6  +
mov eax ebp +
cmp al 3Ah +
jz loc_40E128  +
mov eax ebp +
cmp al 53h +
jz loc_40E0D7  +
xor ebx ebx +
jmp loc_40E028  +
cmp ebx 9 +
jle loc_40E0D0  +
movzx eax byte ptr [esp+12Ch+var_10C+1] +
lea edx [eax-30h] +
cmp edx 9 +
ja loc_40E0D0  +
mov [esp+12Ch+var_12C] eax +
call ds:isxdigit  +
test eax eax +
jz loc_40E0D0  +
mov [esp+12Ch+var_12C] esi +
call fclose  +
mov eax 1 +
add esp 12Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+12Ch+var_12C] esi +
call fclose  +
add esp 12Ch +
mov eax 3 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp ebx 0Ah +
jle loc_40E0D0  +
movzx eax byte ptr [esp+12Ch+var_10C+1] +
mov [esp+12Ch+var_12C] eax +
mov eax [esp+12Ch+var_110] +
call eax  +
test eax eax +
jz loc_40E0D0  +
mov [esp+12Ch+var_12C] esi +
call fclose  +
mov eax 2 +
jmp loc_40E103  +
cmp byte ptr [esp+12Ch+var_10C+1] 45h +
jnz loc_40E053  +
cmp byte ptr [esp+12Ch+var_10C+2] 4Ch +
jnz loc_40E053  +
cmp byte ptr [esp+12Ch+var_10C+3] 46h +
jnz loc_40E053  +
mov [esp+12Ch+var_12C] esi +
call fclose  +
mov eax 9 +
jmp loc_40E103  +
mov [esp+12Ch+var_12C] esi +
call fclose  +
mov eax 0FFFFFFFFh +
jmp loc_40E103  +
call ds:__imp__errno  +
mov eax [eax] +
mov [esp+12Ch+var_12C] eax +
call strerror  +
mov [esp+12Ch+var_120] ebx +
mov [esp+12Ch+var_128] offset aSErrorOpeningS +
mov [esp+12Ch+var_12C] 0 +
mov [esp+12Ch+var_11C] eax +
mov eax ds:dword_486584 +
mov [esp+12Ch+var_124] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_40E103  +
***
jmp sub_40E1E0  +
***
push esi  +
push ebx  +
sub esp 27Ch +
mov [esp+27Ch+var_238] eax +
lea ebp [esp+27Ch+var_218] +
mov [esp+27Ch+var_24C] edx +
mov [esp+27Ch+var_230] ecx +
mov [esp+27Ch+var_258] 0 +
mov [esp+27Ch+var_234] 0 +
mov [esp+27Ch+var_240] 0 +
mov eax [esp+27Ch+var_24C] +
mov [esp+27Ch+var_278] 100h +
mov [esp+27Ch+var_27C] ebp +
mov [esp+27Ch+var_274] eax +
call fgets  +
test eax eax +
jz loc_40E52C  +
add [esp+27Ch+var_258] 1 +
mov edx ebp +
mov ecx [edx] +
add edx 4 +
lea eax [ecx-1010101h] +
not ecx  +
and eax ecx +
and eax 80808080h +
jz loc_40E239  +
mov ecx eax +
shr ecx 10h +
test eax 8080h +
cmovz eax ecx +
lea ecx [edx+2] +
cmovz edx ecx +
add al al +
sbb edx 3 +
sub edx ebp +
sub edx 1 +
cmp byte ptr [esp+edx+27Ch+var_218] 0Ah +
jnz loc_40E278  +
mov byte ptr [esp+edx+27Ch+var_218] 0 +
cmp byte ptr [esp+27Ch+var_218] 3Ah +
jnz loc_40E212  +
mov ecx ebp +
mov edx [ecx] +
add ecx 4 +
lea eax [edx-1010101h] +
not edx  +
and eax edx +
and eax 80808080h +
jz loc_40E281  +
mov edx eax +
shr edx 10h +
test eax 8080h +
cmovz eax edx +
lea edx [ecx+2] +
cmovnz edx ecx +
add al al +
mov [esp+27Ch+var_244] edx +
sbb [esp+27Ch+var_244] 3 +
sub [esp+27Ch+var_244] ebp +
mov esi [esp+27Ch+var_244] +
cmp esi 2 +
jle loc_40E46F  +
movzx eax byte ptr [esp+27Ch+var_218+1] +
lea edi [esp+27Ch+var_220] +
mov [esp+27Ch+var_274] 10h +
mov [esp+27Ch+var_27C] edi +
mov byte ptr [esp+27Ch+var_220+2] 0 +
mov byte ptr [esp+27Ch+var_220] al +
movzx eax byte ptr [esp+27Ch+var_218+2] +
mov byte ptr [esp+27Ch+var_220+1] al +
lea eax [esp+27Ch+var_224] +
mov [esp+27Ch+var_278] eax +
call strtoul  +
mov ebx eax +
mov eax [esp+27Ch+var_224] +
cmp eax edi +
jz loc_40E46F  +
cmp byte ptr [eax] 0 +
jnz loc_40E46F  +
cmp esi 6 +
jle loc_40E46F  +
movzx eax byte ptr [esp+27Ch+var_218+3] +
mov [esp+27Ch+var_274] 10h +
mov [esp+27Ch+var_27C] edi +
mov [esp+27Ch+var_21C] 0 +
mov byte ptr [esp+27Ch+var_220] al +
movzx eax [esp+27Ch+var_214] +
mov byte ptr [esp+27Ch+var_220+1] al +
movzx eax [esp+27Ch+var_213] +
mov byte ptr [esp+27Ch+var_220+2] al +
movzx eax [esp+27Ch+var_212] +
mov byte ptr [esp+27Ch+var_220+3] al +
lea eax [esp+27Ch+var_224] +
mov [esp+27Ch+var_278] eax +
call strtoul  +
mov [esp+27Ch+var_23C] eax +
mov eax [esp+27Ch+var_224] +
cmp eax edi +
jz loc_40E46F  +
cmp byte ptr [eax] 0 +
jnz loc_40E46F  +
cmp esi 8 +
jle loc_40E46F  +
movzx eax [esp+27Ch+var_211] +
lea edx [esp+27Ch+var_224] +
mov [esp+27Ch+var_274] 10h +
mov [esp+27Ch+var_278] edx +
mov [esp+27Ch+var_27C] edi +
mov byte ptr [esp+27Ch+var_220] al +
movzx eax [esp+27Ch+var_210] +
mov byte ptr [esp+27Ch+var_220+2] 0 +
mov byte ptr [esp+27Ch+var_220+1] al +
call strtoul  +
mov [esp+27Ch+var_248] eax +
mov eax [esp+27Ch+var_224] +
cmp eax edi +
jz loc_40E46F  +
cmp byte ptr [eax] 0 +
jnz loc_40E46F  +
mov ecx [esp+27Ch+var_23C] +
mov edx ecx +
shr ecx 8 +
add edx ebx +
mov eax ecx +
add eax edx +
mov ecx eax +
movzx eax bl +
add cl byte ptr [esp+27Ch+var_248] +
test eax eax +
mov [esp+27Ch+var_260] eax +
mov byte ptr [esp+27Ch+var_25C] cl +
jz loc_40E702  +
cmp esi 0Ah +
jle loc_40E46F  +
mov eax esi +
xor ebx ebx +
sub eax 0Bh +
shr eax 1 +
add eax 1 +
mov [esp+27Ch+var_250] eax +
mov eax 0Ah +
jmp loc_40E427  +
cmp byte ptr [edx] 0 +
jnz loc_40E46F  +
add byte ptr [esp+27Ch+var_25C] al +
add ebx 1 +
cmp ebx [esp+27Ch+var_260] +
jz loc_40E4B0  +
cmp ebx [esp+27Ch+var_250] +
lea eax [esi+0Ch] +
jz loc_40E46F  +
movzx eax byte ptr [esp+eax+27Ch+var_218] +
lea esi [ebx+ebx] +
movzx edx byte ptr [ebp+ebx*2+9] +
lea ecx [esi+0Bh] +
mov [esp+27Ch+var_274] 10h +
mov [esp+27Ch+var_27C] edi +
mov byte ptr [esp+27Ch+var_220+1] al +
lea eax [esp+27Ch+var_224] +
mov [esp+27Ch+var_278] eax +
mov byte ptr [esp+27Ch+var_220] dl +
mov [esp+27Ch+var_254] ecx +
mov byte ptr [esp+27Ch+var_220+2] 0 +
call strtoul  +
mov edx [esp+27Ch+var_224] +
cmp edx edi +
mov byte ptr [esp+ebx+27Ch+var_10F] al +
jnz loc_40E408  +
mov eax [esp+27Ch+var_238] +
mov [esp+27Ch+var_278] offset aSInvalidRecord +
mov [esp+27Ch+var_27C] 0 +
mov [esp+27Ch+var_26C] eax +
mov eax [esp+27Ch+var_258] +
mov [esp+27Ch+var_270] eax +
mov eax ds:dword_486584 +
mov [esp+27Ch+var_274] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
add esp 27Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
lea ecx [esi+0Ch] +
cmp [esp+27Ch+var_244] ecx +
jle loc_40E46F  +
mov eax [esp+27Ch+var_254] +
mov byte ptr [esp+27Ch+var_220+2] 0 +
movzx eax byte ptr [esp+eax+27Ch+var_218] +
mov byte ptr [esp+27Ch+var_220] al +
movzx eax byte ptr [esp+ecx+27Ch+var_218] +
mov [esp+27Ch+var_274] 10h +
mov [esp+27Ch+var_27C] edi +
mov byte ptr [esp+27Ch+var_220+1] al +
lea eax [esp+27Ch+var_224] +
mov [esp+27Ch+var_278] eax +
call strtoul  +
mov edx [esp+27Ch+var_224] +
cmp edx edi +
jz loc_40E46F  +
cmp byte ptr [edx] 0 +
jnz loc_40E46F  +
movzx edx byte ptr [esp+27Ch+var_25C] +
movzx ebx al +
neg edx  +
movzx esi dl +
cmp ebx esi +
jnz loc_40E6A6  +
mov eax [esp+27Ch+var_248] +
cmp al 5 +
ja loc_40E660  +
movzx eax al +
jmp ds:off_46AE98[eax*4]  +
mov eax [esp+27Ch+var_238] +
mov edx [esp+27Ch+var_234] +
mov [esp+27Ch+var_270] eax +
mov eax ds:dword_486584 +
test edx edx +
mov [esp+27Ch+var_274] eax +
jz loc_40E714  +
mov [esp+27Ch+var_278] offset aSWarningNoEn_0 +
mov [esp+27Ch+var_27C] 0 +
call sub_401740  +
mov eax [esp+27Ch+var_234] +
add esp 27Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+27Ch+var_240] +
cmp [esp+27Ch+arg_8] eax +
ja loc_40E732  +
mov edi [esp+27Ch+var_260] +
mov edx [esp+27Ch+var_240] +
sub edx [esp+27Ch+arg_8] +
add edx [esp+27Ch+var_23C] +
mov eax edi +
add eax edx +
cmp eax [esp+27Ch+arg_4] +
mov [esp+27Ch+var_25C] eax +
ja loc_40E78B  +
test edi edi +
jz loc_40E5F8  +
mov esi [esp+27Ch+var_230] +
lea ecx [esp+27Ch+var_C] +
mov ebx [esp+27Ch+arg_0] +
sub edx ecx +
mov edi [esp+27Ch+var_260] +
lea eax [esp+27Ch+var_10F] +
lea ecx [edx+103h] +
mov esi [esi] +
mov ebx [ebx] +
add edi eax +
mov [esp+27Ch+var_260] ecx +
lea esi [esi+0] +
mov ecx [esp+27Ch+var_260] +
lea edx [ecx+eax] +
movzx ecx byte ptr [eax] +
add eax 1 +
cmp eax edi +
mov [esi+edx] cl +
mov byte ptr [ebx+edx] 1 +
jnz loc_40E5E0  +
mov edi [esp+27Ch+var_234] +
mov eax [esp+27Ch+var_25C] +
cmp edi eax +
cmovnb eax edi +
mov [esp+27Ch+var_234] eax +
jmp loc_40E212  +
movzx eax byte ptr [esp+27Ch+var_10F] +
mov [esp+27Ch+var_240] eax +
movzx eax byte ptr [esp+27Ch+var_10F+1] +
shl [esp+27Ch+var_240] 8 +
or [esp+27Ch+var_240] eax +
shl [esp+27Ch+var_240] 10h +
jmp loc_40E212  +
movzx eax byte ptr [esp+27Ch+var_10F] +
mov [esp+27Ch+var_240] eax +
movzx eax byte ptr [esp+27Ch+var_10F+1] +
shl [esp+27Ch+var_240] 8 +
or [esp+27Ch+var_240] eax +
shl [esp+27Ch+var_240] 4 +
jmp loc_40E212  +
mov eax [esp+27Ch+var_238] +
mov [esp+27Ch+var_278] offset aSDonTKnowHowTo +
mov [esp+27Ch+var_27C] 0 +
mov [esp+27Ch+var_268] eax +
mov eax [esp+27Ch+var_258] +
mov [esp+27Ch+var_26C] eax +
movzx eax byte ptr [esp+27Ch+var_248] +
mov [esp+27Ch+var_270] eax +
mov eax ds:dword_486584 +
mov [esp+27Ch+var_274] eax +
call sub_401740  +
add esp 27Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+27Ch+var_238] +
mov [esp+27Ch+var_278] offset aSErrorChecksum +
mov [esp+27Ch+var_27C] 0 +
mov [esp+27Ch+var_26C] eax +
mov eax [esp+27Ch+var_258] +
mov [esp+27Ch+var_270] eax +
mov eax ds:dword_486584 +
mov [esp+27Ch+var_274] eax +
call sub_401740  +
mov eax ds:dword_486584 +
mov [esp+27Ch+var_26C] esi +
mov [esp+27Ch+var_270] ebx +
mov [esp+27Ch+var_278] offset aSChecksum0x02x +
mov [esp+27Ch+var_274] eax +
mov [esp+27Ch+var_27C] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_40E4A1  +
mov ecx 0Ah +
mov [esp+27Ch+var_254] 9 +
jmp loc_40E4B3  +
mov [esp+27Ch+var_278] offset aSErrorNoValidR +
mov [esp+27Ch+var_27C] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_40E4A1  +
mov ecx [esp+27Ch+arg_8] +
test ecx ecx +
jz loc_40E581  +
mov eax [esp+27Ch+var_238] +
mov [esp+27Ch+var_278] offset aSErrorAddres_2 +
mov [esp+27Ch+var_27C] 0 +
mov [esp+27Ch+var_264] eax +
mov eax [esp+27Ch+var_258] +
mov [esp+27Ch+var_268] eax +
mov eax [esp+27Ch+arg_8] +
mov [esp+27Ch+var_26C] eax +
mov eax [esp+27Ch+var_240] +
mov [esp+27Ch+var_270] eax +
mov eax ds:dword_486584 +
mov [esp+27Ch+var_274] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_40E4A1  +
mov eax [esp+27Ch+var_238] +
mov [esp+27Ch+var_278] offset aSErrorAddres_3 +
mov [esp+27Ch+var_27C] 0 +
mov [esp+27Ch+var_268] eax +
mov eax [esp+27Ch+var_258] +
mov [esp+27Ch+var_26C] eax +
mov eax [esp+27Ch+var_25C] +
mov [esp+27Ch+var_270] eax +
mov eax ds:dword_486584 +
mov [esp+27Ch+var_274] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_40E4A1  +
***
push esi  +
push ebx  +
sub esp 28Ch +
mov [esp+28Ch+var_240] eax +
lea edi [esp+28Ch+var_218] +
mov [esp+28Ch+var_254] edx +
lea ebp [esp+28Ch+var_220] +
mov [esp+28Ch+var_230] ecx +
mov [esp+28Ch+var_234] 0 +
mov [esp+28Ch+var_258] 0 +
mov [esp+28Ch+var_238] 0 +
mov eax [esp+28Ch+var_254] +
mov [esp+28Ch+var_288] 100h +
mov [esp+28Ch+var_28C] edi +
mov [esp+28Ch+var_284] eax +
call fgets  +
test eax eax +
jz loc_40EB4E  +
add [esp+28Ch+var_258] 1 +
mov edx edi +
mov ecx [edx] +
add edx 4 +
lea eax [ecx-1010101h] +
not ecx  +
and eax ecx +
and eax 80808080h +
jz loc_40E82D  +
mov ecx eax +
shr ecx 10h +
test eax 8080h +
cmovz eax ecx +
lea ecx [edx+2] +
cmovz edx ecx +
add al al +
sbb edx 3 +
sub edx edi +
sub edx 1 +
cmp byte ptr [esp+edx+28Ch+var_218] 0Ah +
jnz loc_40E86C  +
mov byte ptr [esp+edx+28Ch+var_218] 0 +
cmp byte ptr [esp+28Ch+var_218] 53h +
jnz loc_40E806  +
mov ecx edi +
mov edx [ecx] +
add ecx 4 +
lea eax [edx-1010101h] +
not edx  +
and eax edx +
and eax 80808080h +
jz loc_40E875  +
mov edx eax +
shr edx 10h +
test eax 8080h +
cmovz eax edx +
lea edx [ecx+2] +
cmovnz edx ecx +
add al al +
mov [esp+28Ch+var_250] edx +
sbb [esp+28Ch+var_250] 3 +
sub [esp+28Ch+var_250] edi +
cmp [esp+28Ch+var_250] 1 +
jle loc_40EA7A  +
movzx eax byte ptr [esp+28Ch+var_218+1] +
cmp al 38h +
mov [esp+28Ch+var_245] al +
jz loc_40E8CD  +
cmp al 32h +
jnz loc_40EAB7  +
mov ecx 3 +
mov ebx [esp+28Ch+var_250] +
mov [esp+28Ch+var_264] ecx +
cmp ebx 3 +
jle loc_40EA7A  +
movzx eax byte ptr [esp+28Ch+var_218+2] +
mov [esp+28Ch+var_284] 10h +
mov [esp+28Ch+var_28C] ebp +
mov byte ptr [esp+28Ch+var_220+2] 0 +
mov byte ptr [esp+28Ch+var_220] al +
movzx eax byte ptr [esp+28Ch+var_218+3] +
mov byte ptr [esp+28Ch+var_220+1] al +
lea eax [esp+28Ch+var_224] +
mov [esp+28Ch+var_288] eax +
call strtoul  +
mov ecx [esp+28Ch+var_264] +
mov edx ecx +
not edx  +
mov esi eax +
add eax edx +
mov byte ptr [esp+28Ch+var_264] al +
mov eax [esp+28Ch+var_224] +
cmp eax ebp +
jz loc_40EA7A  +
cmp byte ptr [eax] 0 +
jnz loc_40EA7A  +
lea eax [ecx+4] +
cmp ebx eax +
jl loc_40EA7A  +
lea edx [ecx+ecx] +
xor eax eax +
movzx ebx [esp+eax+28Ch+var_214] +
mov [ebp+eax+0] bl +
add eax 1 +
cmp eax edx +
jnz loc_40E947  +
mov byte ptr [esp+eax+28Ch+var_220] 0 +
lea ebx [eax+4] +
lea eax [esp+28Ch+var_224] +
mov [esp+28Ch+var_284] 10h +
mov [esp+28Ch+var_288] eax +
mov [esp+28Ch+var_28C] ebp +
mov [esp+28Ch+var_260] ecx +
mov [esp+28Ch+var_25C] ebx +
call sub_459350  +
mov edx eax +
mov [esp+28Ch+var_23C] eax +
mov eax [esp+28Ch+var_224] +
cmp eax ebp +
jz loc_40EA7A  +
cmp byte ptr [eax] 0 +
jnz loc_40EA7A  +
mov ecx [esp+28Ch+var_260] +
mov [esp+28Ch+var_260] ebx +
mov ebx edx +
lea eax [ecx-1] +
lea ecx ds:0[eax*8] +
jmp loc_40E9B3  +
sub eax 1 +
mov edx ebx +
shr edx cl +
sub ecx 8 +
add esi edx +
test eax eax +
jg loc_40E9B0  +
movzx eax byte ptr [esp+28Ch+var_264] +
mov ebx [esp+28Ch+var_260] +
test eax eax +
mov [esp+28Ch+var_24C] eax +
jz loc_40EAD5  +
mov eax [esp+28Ch+var_25C] +
mov edx [esp+28Ch+var_250] +
lea ecx [eax+1] +
cmp edx ecx +
mov [esp+28Ch+var_244] ecx +
jle loc_40EA7A  +
sub edx 2 +
sub edx eax +
and edx 0FFFFFFFEh +
lea edx [eax+edx+2] +
mov [esp+28Ch+var_25C] edx +
mov edx [esp+28Ch+var_24C] +
lea ecx [esp+28Ch+var_10F] +
lea eax [eax+edx*2] +
mov edx esi +
mov [esp+28Ch+var_260] eax +
mov esi ecx +
mov eax [esp+28Ch+var_244] +
mov byte ptr [esp+28Ch+var_264] dl +
jmp loc_40EA3F  +
cmp byte ptr [edx] 0 +
jnz loc_40EA7A  +
add byte ptr [esp+28Ch+var_264] al +
cmp ebx [esp+28Ch+var_260] +
jz loc_40EAD0  +
add esi 1 +
cmp ebx [esp+28Ch+var_25C] +
lea eax [ebx+1] +
jz loc_40EA7A  +
movzx eax byte ptr [esp+eax+28Ch+var_218] +
movzx edx byte ptr [edi+ebx] +
add ebx 2 +
mov [esp+28Ch+var_284] 10h +
mov [esp+28Ch+var_28C] ebp +
mov byte ptr [esp+28Ch+var_220+1] al +
lea eax [esp+28Ch+var_224] +
mov [esp+28Ch+var_288] eax +
mov byte ptr [esp+28Ch+var_220] dl +
mov byte ptr [esp+28Ch+var_220+2] 0 +
call strtoul  +
mov edx [esp+28Ch+var_224] +
cmp edx ebp +
mov [esi] al +
jnz loc_40EA20  +
mov eax [esp+28Ch+var_240] +
mov [esp+28Ch+var_288] offset aSErrorInvalidR +
mov [esp+28Ch+var_28C] 0 +
mov [esp+28Ch+var_27C] eax +
mov eax [esp+28Ch+var_258] +
mov [esp+28Ch+var_280] eax +
mov eax ds:dword_486584 +
mov [esp+28Ch+var_284] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
add esp 28Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
and eax 0FFFFFFFBh +
xor ecx ecx +
cmp al 33h +
setz cl  +
lea ecx [ecx+ecx+2] +
jmp loc_40E8D2  +
movzx esi byte ptr [esp+28Ch+var_264] +
lea eax [ebx+1] +
cmp [esp+28Ch+var_250] eax +
jle loc_40EA7A  +
movzx eax byte ptr [esp+ebx+28Ch+var_218+1] +
movzx edx byte ptr [esp+ebx+28Ch+var_218] +
mov [esp+28Ch+var_284] 10h +
mov [esp+28Ch+var_28C] ebp +
mov byte ptr [esp+28Ch+var_220+1] al +
lea eax [esp+28Ch+var_224] +
mov [esp+28Ch+var_288] eax +
mov byte ptr [esp+28Ch+var_220] dl +
mov byte ptr [esp+28Ch+var_220+2] 0 +
call strtoul  +
mov edx [esp+28Ch+var_224] +
cmp edx ebp +
jz loc_40EA7A  +
cmp byte ptr [edx] 0 +
jnz loc_40EA7A  +
mov edx esi +
movzx ebx al +
not edx  +
movzx esi dl +
cmp ebx esi +
jnz loc_40ED31  +
movzx eax [esp+28Ch+var_245] +
sub eax 30h +
cmp al 9 +
ja loc_40ECEB  +
movzx eax al +
jmp ds:off_46B0F4[eax*4]  +
mov eax [esp+28Ch+var_240] +
mov [esp+28Ch+var_288] offset aSWarningNoEndO +
mov [esp+28Ch+var_28C] 0 +
mov [esp+28Ch+var_280] eax +
mov eax ds:dword_486584 +
mov [esp+28Ch+var_284] eax +
call sub_401740  +
mov eax [esp+28Ch+var_238] +
add esp 28Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax offset aSErrorAddress0 +
mov esi [esp+28Ch+var_23C] +
cmp [esp+28Ch+arg_8] esi +
ja loc_40ED8D  +
mov ebx [esp+28Ch+var_24C] +
mov edx [esp+28Ch+var_23C] +
sub edx [esp+28Ch+arg_8] +
mov esi ebx +
add esi edx +
cmp esi [esp+28Ch+arg_4] +
mov [esp+28Ch+var_25C] esi +
ja loc_40EDCF  +
test ebx ebx +
jz loc_40EC0D  +
mov esi [esp+28Ch+var_24C] +
lea eax [esp+28Ch+var_10F] +
mov ebx [esp+28Ch+arg_0] +
lea ecx [esp+28Ch+var_C] +
sub edx ecx +
lea ecx [edx+103h] +
add esi eax +
mov [esp+28Ch+var_264] esi +
mov esi [esp+28Ch+var_230] +
mov ebx [ebx] +
mov [esp+28Ch+var_260] ecx +
mov esi [esi] +
mov ecx [esp+28Ch+var_260] +
lea edx [ecx+eax] +
movzx ecx byte ptr [eax] +
add eax 1 +
cmp eax [esp+28Ch+var_264] +
mov [esi+edx] cl +
mov byte ptr [ebx+edx] 1 +
jnz loc_40EBF3  +
mov esi [esp+28Ch+var_238] +
mov eax [esp+28Ch+var_25C] +
cmp esi eax +
cmovnb eax esi +
mov [esp+28Ch+var_238] eax +
add [esp+28Ch+var_234] 1 +
jmp loc_40E806  +
mov eax offset aSErrorAddres_0 +
jmp loc_40EB87  +
mov eax [esp+28Ch+var_23C] +
cmp [esp+28Ch+var_234] eax +
jz loc_40E806  +
mov eax [esp+28Ch+var_240] +
mov [esp+28Ch+var_288] offset aSErrorCountOfT +
mov [esp+28Ch+var_28C] 0 +
mov [esp+28Ch+var_27C] eax +
mov eax [esp+28Ch+var_258] +
mov [esp+28Ch+var_280] eax +
mov eax ds:dword_486584 +
mov [esp+28Ch+var_284] eax +
call sub_401740  +
mov eax [esp+28Ch+var_23C] +
mov [esp+28Ch+var_288] offset aSTransmittedDa +
mov [esp+28Ch+var_28C] 0 +
mov [esp+28Ch+var_27C] eax +
mov eax [esp+28Ch+var_234] +
mov [esp+28Ch+var_280] eax +
mov eax ds:dword_486584 +
mov [esp+28Ch+var_284] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_40EAAC  +
mov eax [esp+28Ch+var_240] +
mov [esp+28Ch+var_288] offset aSErrorNotSuppo +
mov [esp+28Ch+var_28C] 0 +
mov [esp+28Ch+var_27C] eax +
mov eax [esp+28Ch+var_258] +
mov [esp+28Ch+var_280] eax +
mov eax ds:dword_486584 +
mov [esp+28Ch+var_284] eax +
call sub_401740  +
add esp 28Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax offset aSErrorAddres_1 +
jmp loc_40EB87  +
mov eax [esp+28Ch+var_240] +
mov [esp+28Ch+var_288] offset aSErrorDonTKnow +
mov [esp+28Ch+var_28C] 0 +
mov [esp+28Ch+var_278] eax +
mov eax [esp+28Ch+var_258] +
mov [esp+28Ch+var_27C] eax +
movzx eax [esp+28Ch+var_245] +
mov [esp+28Ch+var_280] eax +
mov eax ds:dword_486584 +
mov [esp+28Ch+var_284] eax +
call sub_401740  +
add esp 28Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+28Ch+var_240] +
mov [esp+28Ch+var_288] offset aSErrorChecksum +
mov [esp+28Ch+var_28C] 0 +
mov [esp+28Ch+var_27C] eax +
mov eax [esp+28Ch+var_258] +
mov [esp+28Ch+var_280] eax +
mov eax ds:dword_486584 +
mov [esp+28Ch+var_284] eax +
call sub_401740  +
mov eax ds:dword_486584 +
mov [esp+28Ch+var_27C] esi +
mov [esp+28Ch+var_280] ebx +
mov [esp+28Ch+var_288] offset aSChecksum0x02x +
mov [esp+28Ch+var_284] eax +
mov [esp+28Ch+var_28C] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_40EAAC  +
mov edi [esp+28Ch+var_240] +
mov [esp+28Ch+var_27C] offset aBelowFileoffse +
mov [esp+28Ch+var_274] edi +
mov edi [esp+28Ch+var_258] +
mov [esp+28Ch+var_278] edi +
mov edi esi +
mov edx ds:dword_486584 +
mov [esp+28Ch+var_280] edi +
mov [esp+28Ch+var_288] eax +
mov [esp+28Ch+var_28C] 0 +
mov [esp+28Ch+var_284] edx +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_40EAAC  +
mov edi [esp+28Ch+var_240] +
mov [esp+28Ch+var_27C] offset unk_46B075 +
mov [esp+28Ch+var_274] edi +
mov edi [esp+28Ch+var_258] +
mov [esp+28Ch+var_278] edi +
mov edi [esp+28Ch+var_25C] +
jmp loc_40EDA7  +
***
sub esp 1Ch +
mov edx [esp+1Ch+arg_0] +
mov eax [esp+1Ch+arg_4] +
test edx edx +
mov [eax] edx +
jz loc_40EE90  +
cmp edx 1 +
jnz loc_40EE60  +
mov edx [esp+1Ch+arg_8] +
mov dword ptr [eax+4] offset aW_0 +
mov dword ptr [eax+8] offset aOutput_0 +
mov dword ptr [eax+0Ch] offset aTo +
test byte ptr [edx+85h] 1 +
mov dword ptr [eax+10h] offset aWrote +
jnz loc_40EEB9  +
mov dword ptr [eax+14h] 0 +
xor eax eax +
add esp 1Ch +
retn   +
mov eax ds:dword_486584 +
mov [esp+1Ch+var_10] edx +
mov [esp+1Ch+var_18] offset aSInvalidIOOper +
mov [esp+1Ch+var_1C] 0 +
mov [esp+1Ch+var_14] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
add esp 1Ch +
retn   +
mov edx [esp+1Ch+arg_8] +
mov dword ptr [eax+4] offset unk_46ACA0 +
mov dword ptr [eax+8] offset aInput_0 +
mov dword ptr [eax+0Ch] offset aFrom +
test byte ptr [edx+85h] 1 +
mov dword ptr [eax+10h] offset aRead +
jz loc_40EE4F  +
mov edx [esp+1Ch+arg_C] +
mov edx [edx+50h] +
mov [eax+14h] edx +
xor eax eax +
add esp 1Ch +
retn   +
***
push esi  +
push ebx  +
sub esp 9Ch +
mov ebx [esp+9Ch+arg_C] +
mov esi [esp+9Ch+arg_10] +
mov [esp+9Ch+var_9C] ebx +
mov [esp+9Ch+var_98] esi +
call sub_407980  +
test eax eax +
mov [esp+9Ch+var_6C] eax +
jz loc_40FF9D  +
mov eax [esp+9Ch+var_6C] +
mov [esp+9Ch+var_94] ebx +
mov [esp+9Ch+var_90] eax +
lea eax [esp+9Ch+var_24] +
mov [esp+9Ch+var_98] eax +
mov eax [esp+9Ch+arg_0] +
mov [esp+9Ch+var_9C] eax +
call sub_40EE10  +
test eax eax +
js loc_40FF07  +
mov esi [esp+9Ch+var_24] +
test esi esi +
jnz loc_40EF58  +
mov eax [esp+9Ch+var_6C] +
mov edi [eax+44h] +
mov eax [eax+78h] +
mov [esp+9Ch+var_98] 0FFh +
mov [esp+9Ch+var_94] edi +
mov [esp+9Ch+var_9C] eax +
mov [esp+9Ch+arg_14] edi +
call memset  +
mov eax [esp+9Ch+var_6C] +
mov edi [esp+9Ch+arg_14] +
mov eax [eax+7Ch] +
mov [esp+9Ch+var_94] edi +
mov edi offset asc_46B21B +
mov [esp+9Ch+var_98] 0 +
mov [esp+9Ch+var_9C] eax +
call memset  +
mov esi [esp+9Ch+arg_4] +
mov ecx 2 +
cmps   +
jz loc_40F010  +
mov edx [esp+9Ch+arg_8] +
test edx edx +
jz loc_40F6AD  +
mov [esp+9Ch+var_60] 0 +
mov [esp+9Ch+var_70] 0 +
cmp [esp+9Ch+arg_8] 9 +
jz loc_40EFC6  +
cmp [esp+9Ch+arg_8] 3 +
jnz loc_40EFDA  +
mov eax [esp+9Ch+var_24] +
test eax eax +
jnz loc_40F762  +
mov [esp+9Ch+var_20] offset aRb +
cmp [esp+9Ch+arg_8] 4 +
jz loc_40F781  +
mov edx [esp+9Ch+var_60] +
test edx edx +
jz loc_40F87E  +
cmp [esp+9Ch+arg_8] 9 +
ja loc_40F66A  +
mov eax [esp+9Ch+arg_8] +
jmp ds:off_46BAE8[eax*4]  +
mov ecx [esp+9Ch+var_24] +
mov eax ds:_iob +
test ecx ecx +
jnz loc_40F070  +
mov [esp+9Ch+var_70] eax +
mov [esp+9Ch+arg_4] offset aStdin_0 +
mov eax [esp+9Ch+arg_8] +
test eax eax +
jnz loc_41017E  +
mov eax ds:dword_486584 +
mov [esp+9Ch+var_90] offset byte_4865A0 +
mov [esp+9Ch+var_98] offset aSCanTAutoDetec +
mov [esp+9Ch+var_9C] 0 +
mov [esp+9Ch+var_94] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_40F1E0  +
add eax 20h +
mov [esp+9Ch+var_70] eax +
mov [esp+9Ch+arg_4] offset aStdout_0 +
jmp loc_40F02C  +
mov eax [esp+9Ch+arg_8] +
mov edx [esp+9Ch+var_24] +
sub eax 5 +
mov edi ds:off_46BBA0[eax*4] +
cmp edx 1 +
mov esi ds:dword_46BB88[eax*4] +
mov [esp+9Ch+var_68] edi +
jnz loc_410011  +
mov ebp [esp+9Ch+arg_14] +
xor edi edi +
test ebp ebp +
jle loc_40FD12  +
nop   +
mov eax [esp+9Ch+var_6C] +
mov eax [eax+78h] +
movzx ebp byte ptr [eax+edi] +
mov eax [esp+9Ch+var_68] +
cmp byte ptr [eax] 0 +
jz loc_40F0E6  +
cmp ebp 7 +
jg loc_40F740  +
cmp esi 8 +
jnz loc_40F740  +
lea ebx [esp+9Ch+var_38] +
mov eax ebp +
jmp loc_40F0F2  +
mov ebx edx +
mov [esp+9Ch+var_98] esi +
mov [esp+9Ch+var_9C] eax +
call div  +
cmp edx 0Ah +
lea ecx [edx+57h] +
lea ebp [edx+30h] +
cmovl ecx ebp +
test eax eax +
lea edx [ebx+1] +
mov [ebx] cl +
jnz loc_40F0F0  +
lea eax [esp+9Ch+var_38] +
cmp ebx eax +
mov byte ptr [ebx+1] 0 +
ja loc_40F124  +
jmp loc_40F137  +
movzx ecx byte ptr [ebx] +
movzx edx byte ptr [eax] +
sub ebx 1 +
add eax 1 +
cmp ebx eax +
mov [ebx+1] dl +
mov [eax-1] cl +
ja loc_40F121  +
mov eax [esp+9Ch+var_70] +
mov [esp+9Ch+var_98] eax +
lea eax [esp+9Ch+var_38] +
mov [esp+9Ch+var_9C] eax +
call fputs  +
cmp eax 0FFFFFFFFh +
jz loc_40F185  +
add edi 1 +
cmp edi [esp+9Ch+arg_14] +
jz loc_40FD12  +
test edi edi +
jle loc_40F0C0  +
mov eax [esp+9Ch+var_70] +
mov [esp+9Ch+var_9C] 2Ch +
mov [esp+9Ch+var_98] eax +
call putc  +
cmp eax 0FFFFFFFFh +
jnz loc_40F0C0  +
call ds:__imp__errno  +
mov eax [eax] +
mov [esp+9Ch+var_9C] eax +
call strerror  +
mov [esp+9Ch+var_98] offset aSErrorWritingT +
mov [esp+9Ch+var_9C] 0 +
mov [esp+9Ch+var_8C] eax +
mov eax [esp+9Ch+arg_4] +
mov [esp+9Ch+var_90] eax +
mov eax ds:dword_486584 +
mov [esp+9Ch+var_94] eax +
call sub_401740  +
mov [esp+9Ch+var_68] 0FFFFFFFFh +
lea esi [esi+0] +
mov ecx [esp+9Ch+var_60] +
test ecx ecx +
jz loc_40F2EC  +
mov eax [esp+9Ch+var_68] +
add esp 9Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+9Ch+var_24] +
test eax eax +
jz loc_40FA5D  +
cmp eax 1 +
jnz loc_40FA2F  +
mov eax ds:dword_486584 +
mov [esp+9Ch+var_98] offset aSErrorWriteOpe +
mov [esp+9Ch+var_9C] 0 +
mov [esp+9Ch+var_94] eax +
call sub_401740  +
mov [esp+9Ch+var_68] 0FFFFFFFFh +
jmp loc_40F1D0  +
mov eax [esp+9Ch+var_6C] +
mov edx [eax+78h] +
mov eax [esp+9Ch+var_24] +
test eax eax +
jz loc_40F9DE  +
cmp eax 1 +
jnz loc_40F9B0  +
mov eax [esp+9Ch+var_70] +
mov [esp+9Ch+var_98] 1 +
mov [esp+9Ch+var_9C] edx +
mov [esp+9Ch+var_90] eax +
mov eax [esp+9Ch+arg_14] +
mov [esp+9Ch+var_94] eax +
call fwrite  +
mov [esp+9Ch+var_68] eax +
mov eax [esp+9Ch+var_68] +
test eax eax +
js loc_40F931  +
cmp [esp+9Ch+var_24] 1 +
jz loc_40F920  +
mov esi [esp+9Ch+var_68] +
test esi esi +
jle loc_40F1D0  +
mov ebx [esp+9Ch+arg_0] +
test ebx ebx +
jnz loc_40F1D0  +
mov eax [esp+9Ch+var_6C] +
mov ebx ds:_stricmp +
mov [esp+9Ch+var_98] offset aFlash_2 +
mov [esp+9Ch+var_9C] eax +
call ebx  +
test eax eax +
jz loc_40F2D0  +
mov eax [esp+9Ch+var_6C] +
mov [esp+9Ch+var_98] offset aApplication_1 +
mov [esp+9Ch+var_9C] eax +
call ebx  +
test eax eax +
jnz loc_40FD81  +
mov eax [esp+9Ch+var_6C] +
mov [esp+9Ch+var_9C] eax +
call sub_404120  +
mov ecx [esp+9Ch+var_60] +
test ecx ecx +
mov [esp+9Ch+var_68] eax +
jnz loc_40F1DC  +
cmp [esp+9Ch+arg_8] 4 +
jz loc_40F1DC  +
mov eax [esp+9Ch+var_70] +
mov [esp+9Ch+var_9C] eax +
call fclose  +
mov eax [esp+9Ch+var_68] +
add esp 9Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+9Ch+var_24] +
test eax eax +
jz loc_40FCCC  +
cmp eax 1 +
jnz loc_40FC9E  +
mov eax [esp+9Ch+var_6C] +
mov ebp [esp+9Ch+var_10] +
mov eax [eax+78h] +
mov [esp+9Ch+var_58] eax +
mov eax [esp+9Ch+arg_14] +
test eax eax +
jz loc_40FFD0  +
mov [esp+9Ch+var_54] 0 +
mov edi [esp+9Ch+var_70] +
mov [esp+9Ch+var_68] 0 +
mov [esp+9Ch+var_64] ebp +
jmp loc_40F388  +
cmp [esp+9Ch+var_64] 0FFFFh +
ja loc_40F45B  +
mov eax [esp+9Ch+var_5C] +
add [esp+9Ch+var_58] eax +
sub [esp+9Ch+arg_14] esi +
jz loc_40FD3C  +
cmp [esp+9Ch+arg_14] 1Fh +
mov eax 20h +
cmovle eax [esp+9Ch+arg_14] +
mov [esp+9Ch+var_5C] eax +
mov esi eax +
add eax [esp+9Ch+var_64] +
cmp eax 10000h +
jbe loc_40F3BD  +
mov eax 10000h +
sub eax [esp+9Ch+var_64] +
mov [esp+9Ch+var_5C] eax +
mov esi eax +
test esi esi +
jz loc_40F365  +
mov ebx [esp+9Ch+var_64] +
mov [esp+9Ch+var_94] esi +
mov [esp+9Ch+var_98] offset a02x04x00 +
mov [esp+9Ch+var_9C] edi +
mov [esp+9Ch+var_90] ebx +
call fprintf  +
mov ecx ebx +
shr ecx 8 +
add ecx ebx +
test esi esi +
lea ebx [ecx+esi] +
jle loc_40F426  +
mov eax [esp+9Ch+var_58] +
mov [esp+9Ch+var_50] esi +
mov ebp eax +
add eax esi +
mov esi eax +
lea esi [esi+0] +
movzx eax byte ptr [ebp+0] +
add ebp 1 +
mov [esp+9Ch+var_98] offset a02x_3 +
mov [esp+9Ch+var_9C] edi +
mov [esp+9Ch+var_94] eax +
call fprintf  +
add bl [ebp-1] +
cmp ebp esi +
jnz loc_40F400  +
mov esi [esp+9Ch+var_50] +
mov ecx ebx +
neg ecx  +
movzx eax cl +
mov [esp+9Ch+var_94] eax +
mov [esp+9Ch+var_98] offset a02x_4 +
mov [esp+9Ch+var_9C] edi +
call fprintf  +
mov eax [esp+9Ch+var_5C] +
add [esp+9Ch+var_64] eax +
add [esp+9Ch+var_68] esi +
cmp [esp+9Ch+var_64] 0FFFFh +
jbe loc_40F373  +
add [esp+9Ch+var_54] 1 +
mov eax [esp+9Ch+var_54] +
mov [esp+9Ch+var_98] offset a0200000402x02x +
mov [esp+9Ch+var_9C] edi +
movzx ebp al +
movzx ebx ah +
mov [esp+9Ch+var_90] ebp +
mov [esp+9Ch+var_94] ebx +
call fprintf  +
lea eax [ebp+ebx+6] +
neg eax  +
movzx eax al +
mov [esp+9Ch+var_94] eax +
mov [esp+9Ch+var_98] offset a02x_4 +
mov [esp+9Ch+var_9C] edi +
call fprintf  +
mov [esp+9Ch+var_64] 0 +
jmp loc_40F373  +
mov eax [esp+9Ch+var_24] +
test eax eax +
jz loc_40FBA2  +
cmp eax 1 +
jnz loc_40FC70  +
mov eax [esp+9Ch+var_10] +
mov [esp+9Ch+var_68] 0 +
mov [esp+9Ch+var_50] eax +
mov edx eax +
mov eax [esp+9Ch+var_6C] +
mov eax [eax+78h] +
mov [esp+9Ch+var_64] eax +
mov eax [esp+9Ch+arg_14] +
test eax eax +
jz loc_40FBE8  +
cmp [esp+9Ch+arg_14] 1Fh +
mov ebp edx +
jle loc_40F62E  +
mov eax [esp+9Ch+arg_14] +
mov esi 20h +
mov ebx 21h +
add esi ebp +
mov [esp+9Ch+arg_14] 20h +
sub eax 20h +
cmp esi 0FFFFh +
mov [esp+9Ch+var_5C] eax +
jbe loc_40F656  +
cmp esi 1000000h +
mov edi offset aS302x08x +
sbb eax eax +
mov [esp+9Ch+var_58] eax +
mov eax offset aS202x06x +
add byte ptr [esp+9Ch+var_58] 4 +
cmp esi 0FFFFFFh +
cmova eax edi +
cmp esi 1000000h +
sbb edx edx +
add edx 4 +
mov edi [esp+9Ch+arg_14] +
mov [esp+9Ch+var_98] eax +
mov eax [esp+9Ch+var_70] +
mov [esp+9Ch+var_90] ebp +
mov [esp+9Ch+var_54] edx +
lea ecx [edx+edi+1] +
mov [esp+9Ch+var_94] ecx +
mov [esp+9Ch+var_9C] eax +
call fprintf  +
mov edx [esp+9Ch+var_54] +
add bl byte ptr [esp+9Ch+var_58] +
lea eax [edx-1] +
lea ecx ds:0[eax*8] +
jmp loc_40F5A3  +
sub eax 1 +
mov edx ebp +
shr edx cl +
sub ecx 8 +
add ebx edx +
test eax eax +
jg loc_40F5A0  +
cmp ebp esi +
jnb loc_40F5E3  +
mov edx ebp +
mov eax [esp+9Ch+var_64] +
add ebp 1 +
lea edi [eax+edx] +
movzx eax byte ptr [edi] +
mov [esp+9Ch+var_98] offset a02x_3 +
mov [esp+9Ch+var_94] eax +
mov eax [esp+9Ch+var_70] +
mov [esp+9Ch+var_9C] eax +
call fprintf  +
mov edx ebp +
add bl [edi] +
cmp esi ebp +
ja loc_40F5B6  +
not ebx  +
movzx eax bl +
mov [esp+9Ch+var_94] eax +
mov eax [esp+9Ch+var_70] +
mov [esp+9Ch+var_98] offset a02x_4 +
mov [esp+9Ch+var_9C] eax +
call fprintf  +
mov eax [esp+9Ch+arg_14] +
add [esp+9Ch+var_68] eax +
mov eax [esp+9Ch+var_5C] +
test eax eax +
jz loc_40FBE8  +
mov [esp+9Ch+arg_14] eax +
mov ebp esi +
cmp [esp+9Ch+arg_14] 1Fh +
jg loc_40F500  +
mov esi [esp+9Ch+arg_14] +
movzx eax byte ptr [esp+9Ch+arg_14] +
mov [esp+9Ch+var_5C] 0 +
add esi ebp +
cmp esi 0FFFFh +
lea ebx [eax+1] +
ja loc_40F531  +
mov byte ptr [esp+9Ch+var_58] 2 +
mov eax offset aS102x04x +
mov edx 2 +
jmp loc_40F560  +
mov eax [esp+9Ch+arg_8] +
mov [esp+9Ch+var_98] offset aSInvalidSFileF +
mov [esp+9Ch+var_9C] 0 +
mov [esp+9Ch+var_8C] eax +
mov eax [esp+9Ch+var_1C] +
mov [esp+9Ch+var_90] eax +
mov eax ds:dword_486584 +
mov [esp+9Ch+var_94] eax +
call sub_401740  +
add esp 9Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+9Ch+arg_4] +
call sub_40DFF0  +
test eax eax +
js loc_410034  +
cmp ds:dword_4866A8 1 +
mov [esp+9Ch+arg_8] eax +
mov [esp+9Ch+var_60] 0 +
mov [esp+9Ch+var_70] 0 +
jg loc_40EFB2  +
cmp [esp+9Ch+arg_8] 9 +
mov eax offset aInvalidFormat +
ja loc_40F702  +
mov eax [esp+9Ch+arg_8] +
mov eax ds:off_46BB60[eax*4] +
mov [esp+9Ch+var_88] eax +
mov eax [esp+9Ch+arg_4] +
mov [esp+9Ch+var_98] offset aSSFileSAutoDet +
mov [esp+9Ch+var_9C] 0 +
mov [esp+9Ch+var_8C] eax +
mov eax [esp+9Ch+var_1C] +
mov [esp+9Ch+var_90] eax +
mov eax ds:dword_486584 +
mov [esp+9Ch+var_94] eax +
call sub_401740  +
jmp loc_40EFA2  +
mov eax [esp+9Ch+var_70] +
mov [esp+9Ch+var_98] eax +
mov eax [esp+9Ch+var_68] +
mov [esp+9Ch+var_9C] eax +
call fputs  +
cmp eax 0FFFFFFFFh +
jnz loc_40F0E6  +
jmp loc_40F185  +
cmp eax 1 +
jnz loc_40EFDA  +
cmp [esp+9Ch+arg_8] 4 +
mov [esp+9Ch+var_20] offset aWb +
jnz loc_40EFE8  +
mov eax [esp+9Ch+var_24] +
test eax eax +
jnz loc_40F9B0  +
mov eax [esp+9Ch+arg_4] +
mov [esp+9Ch+var_98] offset asc_46BA2E +
mov [esp+9Ch+var_9C] eax +
call strtok  +
test eax eax +
mov ebx eax +
jz loc_40FFC3  +
mov eax [esp+9Ch+arg_14] +
test eax eax +
jle loc_40FFC3  +
mov [esp+9Ch+var_68] 0 +
lea ebp [esp+9Ch+var_38] +
jmp loc_40F83A  +
mov [esp+9Ch+var_94] 0 +
mov [esp+9Ch+var_98] ebp +
mov [esp+9Ch+var_9C] ebx +
call strtoul  +
mov edx [esp+9Ch+var_38] +
cmp byte ptr [edx] 0 +
jnz loc_40F8F2  +
mov edi [esp+9Ch+var_6C] +
mov esi [esp+9Ch+var_68] +
add [esp+9Ch+var_68] 1 +
mov ecx [edi+78h] +
mov [ecx+esi] al +
mov eax [edi+7Ch] +
mov byte ptr [eax+esi] 1 +
mov [esp+9Ch+var_98] offset asc_46BA2E +
mov [esp+9Ch+var_9C] 0 +
call strtok  +
test eax eax +
mov ebx eax +
jz loc_40F276  +
mov eax [esp+9Ch+var_68] +
cmp eax [esp+9Ch+arg_14] +
jge loc_40F276  +
mov [esp+9Ch+var_94] 0 +
mov esi ebx +
mov edi offset a0b +
mov [esp+9Ch+var_98] ebp +
mov [esp+9Ch+var_9C] ebx +
call strtoul  +
mov ecx 2 +
cmps   +
jnz loc_40F7D0  +
lea eax [ebx+2] +
mov [esp+9Ch+var_94] 2 +
mov [esp+9Ch+var_98] ebp +
mov [esp+9Ch+var_9C] eax +
call strtoul  +
jmp loc_40F7E4  +
mov eax [esp+9Ch+var_20] +
mov [esp+9Ch+var_98] eax +
mov eax [esp+9Ch+arg_4] +
mov [esp+9Ch+var_9C] eax +
call fopen  +
test eax eax +
mov [esp+9Ch+var_70] eax +
jnz loc_40EFF4  +
call ds:__imp__errno  +
mov eax [eax] +
mov [esp+9Ch+var_9C] eax +
call strerror  +
mov [esp+9Ch+var_98] offset aSCanTOpenSFile +
mov [esp+9Ch+var_9C] 0 +
mov [esp+9Ch+var_88] eax +
mov eax [esp+9Ch+arg_4] +
mov [esp+9Ch+var_8C] eax +
mov eax [esp+9Ch+var_1C] +
mov [esp+9Ch+var_90] eax +
mov eax ds:dword_486584 +
mov [esp+9Ch+var_94] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_40F1E0  +
mov eax ds:dword_486584 +
mov [esp+9Ch+var_90] ebx +
mov [esp+9Ch+var_98] offset aSInvalidByteVa +
mov [esp+9Ch+var_9C] 0 +
mov [esp+9Ch+var_94] eax +
call sub_401740  +
mov [esp+9Ch+var_68] 0FFFFFFFFh +
jmp loc_40F1D0  +
mov eax [esp+9Ch+var_68] +
cmp eax [esp+9Ch+arg_14] +
jge loc_40F281  +
mov ebx [esp+9Ch+var_14] +
call ds:__imp__errno  +
mov eax [eax] +
mov [esp+9Ch+var_9C] eax +
call strerror  +
mov edi [esp+9Ch+arg_14] +
mov [esp+9Ch+var_80] ebx +
mov [esp+9Ch+var_98] offset aSSErrorSSSSDOf +
mov [esp+9Ch+var_9C] 0 +
mov [esp+9Ch+var_78] edi +
mov edi [esp+9Ch+var_68] +
mov [esp+9Ch+var_84] eax +
mov eax [esp+9Ch+arg_4] +
mov [esp+9Ch+var_7C] edi +
mov [esp+9Ch+var_88] eax +
mov eax [esp+9Ch+var_18] +
mov [esp+9Ch+var_8C] eax +
mov eax [esp+9Ch+var_1C] +
mov [esp+9Ch+var_90] eax +
mov eax ds:dword_486584 +
mov [esp+9Ch+var_94] eax +
call sub_401740  +
mov [esp+9Ch+var_68] 0FFFFFFFFh +
jmp loc_40F1D0  +
mov [esp+9Ch+var_90] eax +
mov eax ds:dword_486584 +
mov [esp+9Ch+var_98] offset aSFileioInvalid +
mov [esp+9Ch+var_9C] 0 +
mov [esp+9Ch+var_94] eax +
call sub_401740  +
mov [esp+9Ch+var_68] 0FFFFFFFFh +
jmp loc_40F1D0  +
mov eax [esp+9Ch+var_70] +
mov [esp+9Ch+var_98] 1 +
mov [esp+9Ch+var_9C] edx +
mov [esp+9Ch+var_90] eax +
mov eax [esp+9Ch+arg_14] +
mov [esp+9Ch+var_94] eax +
call fread  +
test eax eax +
mov edi eax +
mov [esp+9Ch+var_68] eax +
jle loc_40F26A  +
mov eax [esp+9Ch+var_6C] +
mov eax [eax+7Ch] +
mov [esp+9Ch+var_94] edi +
mov [esp+9Ch+var_98] 1 +
mov [esp+9Ch+var_9C] eax +
call memset  +
jmp loc_40F276  +
mov [esp+9Ch+var_90] eax +
mov eax ds:dword_486584 +
mov [esp+9Ch+var_98] offset aSErrorInvalidE +
mov [esp+9Ch+var_9C] 0 +
mov [esp+9Ch+var_94] eax +
call sub_401740  +
mov [esp+9Ch+var_68] 0FFFFFFFFh +
jmp loc_40F1D0  +
mov esi [esp+9Ch+var_6C] +
mov ecx 6 +
mov edi offset aFlash_2 +
mov eax [ebx+84h] +
cmps   +
setnbe cl  +
setb dl  +
test ah 1 +
jz loc_40FDB8  +
cmp cl dl +
mov ebp 80000000h +
mov [esp+9Ch+var_68] 0 +
mov [esp+9Ch+var_64] 0FFFFFFFFh +
jnz loc_40FEB9  +
test al 80h +
jz loc_40FB07  +
mov esi [esp+9Ch+var_6C] +
mov edi offset aBoot_0 +
mov ecx 5 +
cmps   +
jz loc_40FAD9  +
mov esi [esp+9Ch+var_6C] +
mov edi offset aApplication_1 +
mov ecx 0Ch +
cmps   +
jz loc_40FAD9  +
mov esi [esp+9Ch+var_6C] +
mov edi offset aApptable_0 +
mov ecx 9 +
cmps   +
jnz loc_40FB07  +
mov [esp+9Ch+var_98] offset aFlash_2 +
mov [esp+9Ch+var_9C] ebx +
call sub_407980  +
test eax eax +
jz loc_41014C  +
mov edi [esp+9Ch+var_6C] +
mov ebp [edi+50h] +
sub ebp [eax+50h] +
mov eax [edi+44h] +
add eax ebp +
sub eax 1 +
mov [esp+9Ch+var_64] eax +
mov [esp+9Ch+var_9C] 1 +
call sub_450900  +
test eax eax +
jz loc_410066  +
mov eax [esp+9Ch+var_70] +
mov [esp+9Ch+var_9C] eax +
call _fileno  +
mov [esp+9Ch+var_94] 0 +
mov [esp+9Ch+var_98] 1 +
mov [esp+9Ch+var_9C] eax +
call sub_450BA0  +
test eax eax +
mov [esp+9Ch+var_5C] eax +
jz loc_4100A0  +
mov eax [esp+9Ch+var_5C] +
mov [esp+9Ch+var_9C] eax +
call sub_451260  +
cmp eax 3 +
jz loc_40FF11  +
mov eax [esp+9Ch+arg_4] +
mov edi 0FFFFFFFFh +
mov [esp+9Ch+var_98] offset aSErrorCannotUs +
mov [esp+9Ch+var_9C] 0 +
mov [esp+9Ch+var_90] eax +
mov eax ds:dword_486584 +
mov [esp+9Ch+var_94] eax +
call sub_401740  +
mov eax [esp+9Ch+var_5C] +
mov [esp+9Ch+var_9C] eax +
call sub_451280  +
mov [esp+9Ch+var_68] edi +
jmp loc_40F281  +
mov eax [esp+9Ch+var_10] +
mov edi [esp+9Ch+var_6C] +
mov edx [esp+9Ch+var_70] +
mov [esp+9Ch+var_94] eax +
mov eax [esp+9Ch+arg_14] +
lea ecx [edi+78h] +
mov [esp+9Ch+var_98] eax +
mov eax edi +
add eax 7Ch +
mov [esp+9Ch+var_9C] eax +
mov eax [esp+9Ch+arg_4] +
call sub_40E7D0  +
test eax eax +
mov [esp+9Ch+var_68] eax +
jns loc_40F281  +
jmp loc_40F9D1  +
cmp [esp+9Ch+var_50] 0FFFFh +
jle loc_40FD6D  +
mov edi [esp+9Ch+var_50] +
xor ebx ebx +
mov eax offset aS902x06x +
mov ecx offset aS902x08x +
cmp edi 0FFFFFFh +
setle bl  +
xor edx edx +
add ebx 0FAh +
cmp edi 0FFFFFFh +
setnle dl  +
add edx 4 +
cmp edi 0FFFFFFh +
cmovg eax ecx +
mov edi [esp+9Ch+var_70] +
mov [esp+9Ch+var_90] 0 +
mov [esp+9Ch+var_94] edx +
mov [esp+9Ch+var_98] eax +
mov [esp+9Ch+var_9C] edi +
call fprintf  +
mov [esp+9Ch+var_94] ebx +
mov [esp+9Ch+var_98] offset a02x_4 +
mov [esp+9Ch+var_9C] edi +
call fprintf  +
mov eax [esp+9Ch+var_68] +
test eax eax +
jns loc_40F281  +
jmp loc_40F9D1  +
mov [esp+9Ch+var_90] eax +
mov eax ds:dword_486584 +
mov [esp+9Ch+var_98] offset aSErrorInvalidM +
mov [esp+9Ch+var_9C] 0 +
mov [esp+9Ch+var_94] eax +
call sub_401740  +
mov [esp+9Ch+var_68] 0FFFFFFFFh +
jmp loc_40F1D0  +
mov [esp+9Ch+var_90] eax +
mov eax ds:dword_486584 +
mov [esp+9Ch+var_98] offset aSInvalidIntexH +
mov [esp+9Ch+var_9C] 0 +
mov [esp+9Ch+var_94] eax +
call sub_401740  +
mov [esp+9Ch+var_68] 0FFFFFFFFh +
jmp loc_40F1D0  +
mov eax [esp+9Ch+var_10] +
mov edi [esp+9Ch+var_6C] +
mov edx [esp+9Ch+var_70] +
mov [esp+9Ch+var_94] eax +
mov eax [esp+9Ch+arg_14] +
lea ecx [edi+78h] +
mov [esp+9Ch+var_98] eax +
mov eax edi +
add eax 7Ch +
mov [esp+9Ch+var_9C] eax +
mov eax [esp+9Ch+arg_4] +
call sub_40E1E0  +
test eax eax +
mov [esp+9Ch+var_68] eax +
jns loc_40F281  +
jmp loc_40F9D1  +
mov eax [esp+9Ch+var_70] +
mov [esp+9Ch+var_9C] 0Ah +
mov [esp+9Ch+var_98] eax +
call putc  +
cmp eax 0FFFFFFFFh +
jz loc_40F185  +
mov [esp+9Ch+var_68] 0 +
jmp loc_40F1D0  +
mov edi [esp+9Ch+var_70] +
mov [esp+9Ch+var_90] 0 +
mov [esp+9Ch+var_94] 0 +
mov [esp+9Ch+var_98] offset a02x04x01 +
mov [esp+9Ch+var_9C] edi +
call fprintf  +
mov [esp+9Ch+var_94] 0FFh +
jmp loc_40FC4C  +
mov ebx 0FCh +
mov edx 3 +
mov eax offset aS902x04x +
jmp loc_40FC2C  +
mov eax [esp+9Ch+var_6C] +
mov [esp+9Ch+var_98] offset aApptable_0 +
mov [esp+9Ch+var_9C] eax +
call ebx  +
test eax eax +
jz loc_40F2D0  +
mov eax [esp+9Ch+var_6C] +
mov [esp+9Ch+var_98] offset aBoot_0 +
mov [esp+9Ch+var_9C] eax +
call ebx  +
test eax eax +
jz loc_40F2D0  +
jmp loc_40F1D0  +
cmp cl dl +
lea esi [esi+0] +
jz loc_40FEF0  +
mov esi [esp+9Ch+var_6C] +
mov edi offset aBoot_0 +
mov ecx 5 +
cmps   +
jz loc_40FEF0  +
mov esi [esp+9Ch+var_6C] +
mov edi offset aApplication_1 +
mov ecx 0Ch +
cmps   +
jz loc_40FEF0  +
mov esi [esp+9Ch+var_6C] +
mov edi offset aApptable_0 +
mov ecx 9 +
cmps   +
jz loc_40FEF0  +
mov esi [esp+9Ch+var_6C] +
mov edi offset aEeprom_0 +
mov ecx 7 +
cmps   +
jz loc_41001A  +
mov esi [esp+9Ch+var_6C] +
mov edi offset aLfuse_1 +
mov ecx 6 +
cmps   +
jz loc_4100FF  +
mov esi [esp+9Ch+var_6C] +
mov edi offset aHfuse_1 +
mov ecx 6 +
cmps   +
jz loc_4100E5  +
mov esi [esp+9Ch+var_6C] +
mov edi offset aEfuse_1 +
mov ecx 6 +
cmps   +
jz loc_410119  +
mov esi [esp+9Ch+var_6C] +
mov edi offset aFuse_1 +
mov ecx 4 +
cmps   +
jnz loc_40FE86  +
mov edi [esp+9Ch+var_6C] +
movsx edx byte ptr [edi+4] +
lea ecx [edx-30h] +
cmp cl 9 +
jbe loc_410133  +
mov esi [esp+9Ch+var_6C] +
mov ecx 4 +
mov edi offset aLock +
mov [esp+9Ch+var_68] 0 +
mov ebp 830000h +
mov [esp+9Ch+var_64] 83FFFFh +
cmps   +
setnbe cl  +
setb dl  +
cmp cl dl +
jz loc_40FA9F  +
mov eax [esp+9Ch+var_6C] +
mov [esp+9Ch+var_98] offset aSErrorCannotHa +
mov [esp+9Ch+var_9C] 0 +
mov [esp+9Ch+var_90] eax +
mov eax ds:dword_486584 +
mov [esp+9Ch+var_94] eax +
call sub_401740  +
mov [esp+9Ch+var_68] 0FFFFFFFFh +
jmp loc_40F1D0  +
mov [esp+9Ch+var_68] 0 +
xor ebp ebp +
mov [esp+9Ch+var_64] 7FFFFh +
jmp loc_40FA9F  +
mov eax 0FFFFFFFFh +
jmp loc_40F1E0  +
lea eax [esp+9Ch+var_3C] +
mov [esp+9Ch+var_98] eax +
mov eax [esp+9Ch+var_5C] +
mov [esp+9Ch+var_9C] eax +
call sub_451460  +
test eax eax +
jz loc_41018B  +
mov edx [ebx+84h] +
mov ecx offset aLittle +
and edx 100h +
cmp edx 1 +
sbb esi esi +
add esi 2 +
test edx edx +
mov edx offset aBig +
cmovz ecx edx +
cmp byte ptr [eax+4] 1 +
jnz loc_40FF67  +
movsx eax byte ptr [eax+5] +
mov edx esi +
movzx esi dl +
cmp eax esi +
jz loc_4101CD  +
mov eax [esp+9Ch+arg_4] +
mov edi 0FFFFFFFFh +
mov [esp+9Ch+var_8C] ecx +
mov [esp+9Ch+var_98] offset aSErrorElfFileS +
mov [esp+9Ch+var_9C] 0 +
mov [esp+9Ch+var_90] eax +
mov eax ds:dword_486584 +
mov [esp+9Ch+var_94] eax +
call sub_401740  +
jmp loc_40FB8D  +
mov [esp+9Ch+var_90] ebx +
mov [esp+9Ch+var_94] esi +
mov [esp+9Ch+var_98] offset aFileioMemoryTy +
mov [esp+9Ch+var_9C] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_40F1E0  +
mov [esp+9Ch+var_68] 0 +
jmp loc_40F276  +
mov edi [esp+9Ch+var_70] +
mov [esp+9Ch+var_90] 0 +
mov [esp+9Ch+var_94] 0 +
mov [esp+9Ch+var_98] offset a02x04x01 +
mov [esp+9Ch+var_9C] edi +
call fprintf  +
mov [esp+9Ch+var_94] 0FFh +
mov [esp+9Ch+var_98] offset a02x_4 +
mov [esp+9Ch+var_9C] edi +
call fprintf  +
jmp loc_40FD2F  +
mov [esp+9Ch+var_90] edx +
jmp loc_40F9B4  +
mov [esp+9Ch+var_68] 0 +
mov ebp 810000h +
mov [esp+9Ch+var_64] 81FFFFh +
jmp loc_40FA9F  +
mov eax [esp+9Ch+arg_4] +
mov [esp+9Ch+var_98] offset aSCanTDetermine +
mov [esp+9Ch+var_9C] 0 +
mov [esp+9Ch+var_90] eax +
mov eax ds:dword_486584 +
mov [esp+9Ch+var_94] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_40F1E0  +
mov [esp+9Ch+var_9C] 0FFFFFFFFh +
call sub_4514D0  +
mov [esp+9Ch+var_98] offset aSErrorElfLibra +
mov [esp+9Ch+var_9C] 0 +
mov [esp+9Ch+var_90] eax +
mov eax ds:dword_486584 +
mov [esp+9Ch+var_94] eax +
call sub_401740  +
mov [esp+9Ch+var_68] 0FFFFFFFFh +
jmp loc_40F1D0  +
mov [esp+9Ch+var_9C] 0FFFFFFFFh +
call sub_4514D0  +
mov [esp+9Ch+var_98] offset aSErrorCannotOp +
mov [esp+9Ch+var_9C] 0 +
mov [esp+9Ch+var_8C] eax +
mov eax [esp+9Ch+arg_4] +
mov [esp+9Ch+var_90] eax +
mov eax ds:dword_486584 +
mov [esp+9Ch+var_94] eax +
call sub_401740  +
mov [esp+9Ch+var_68] 0FFFFFFFFh +
jmp loc_40F1D0  +
mov [esp+9Ch+var_68] 1 +
mov ebp 820000h +
mov [esp+9Ch+var_64] 82FFFFh +
jmp loc_40FA9F  +
mov [esp+9Ch+var_68] 0 +
mov ebp 820000h +
mov [esp+9Ch+var_64] 82FFFFh +
jmp loc_40FA9F  +
mov [esp+9Ch+var_68] 2 +
mov ebp 820000h +
mov [esp+9Ch+var_64] 82FFFFh +
jmp loc_40FA9F  +
lea edi [edx-30h] +
mov ebp 820000h +
mov [esp+9Ch+var_68] edi +
mov [esp+9Ch+var_64] 82FFFFh +
jmp loc_40FA9F  +
mov eax [esp+9Ch+var_6C] +
mov [esp+9Ch+var_98] offset aSErrorNoFlashM +
mov [esp+9Ch+var_9C] 0 +
mov [esp+9Ch+var_90] eax +
mov eax ds:dword_486584 +
mov [esp+9Ch+var_94] eax +
call sub_401740  +
mov [esp+9Ch+var_68] 0FFFFFFFFh +
jmp loc_40F1D0  +
mov [esp+9Ch+var_60] 1 +
jmp loc_40EFB2  +
mov [esp+9Ch+var_9C] 0FFFFFFFFh +
mov edi 0FFFFFFFFh +
call sub_4514D0  +
mov [esp+9Ch+var_98] offset aSErrorErrorRea +
mov [esp+9Ch+var_9C] 0 +
mov [esp+9Ch+var_8C] eax +
mov eax [esp+9Ch+arg_4] +
mov [esp+9Ch+var_90] eax +
mov eax ds:dword_486584 +
mov [esp+9Ch+var_94] eax +
call sub_401740  +
jmp loc_40FB8D  +
mov eax [esp+9Ch+var_5C] +
mov [esp+9Ch+var_9C] eax +
call sub_451590  +
test eax eax +
mov [esp+9Ch+var_58] eax +
jz loc_41021E  +
mov eax [esp+9Ch+var_58] +
cmp word ptr [eax+10h] 2 +
jz loc_410260  +
mov eax [esp+9Ch+arg_4] +
mov edi 0FFFFFFFFh +
mov [esp+9Ch+var_98] offset aSErrorElfFil_0 +
mov [esp+9Ch+var_9C] 0 +
mov [esp+9Ch+var_90] eax +
mov eax ds:dword_486584 +
mov [esp+9Ch+var_94] eax +
call sub_401740  +
jmp loc_40FB8D  +
mov [esp+9Ch+var_9C] 0FFFFFFFFh +
mov edi 0FFFFFFFFh +
call sub_4514D0  +
mov [esp+9Ch+var_98] offset aSErrorErrorR_0 +
mov [esp+9Ch+var_9C] 0 +
mov [esp+9Ch+var_8C] eax +
mov eax [esp+9Ch+arg_4] +
mov [esp+9Ch+var_90] eax +
mov eax ds:dword_486584 +
mov [esp+9Ch+var_94] eax +
call sub_401740  +
jmp loc_40FB8D  +
mov edx [ebx+84h] +
mov ecx offset aAvr32 +
mov edi [esp+9Ch+var_58] +
and edx 100h +
cmp edx 1 +
sbb eax eax +
and ax 0E7A6h +
add ax 18ADh +
test edx edx +
mov edx offset aAvr +
cmovz ecx edx +
cmp [edi+12h] ax +
jz loc_4102C8  +
mov eax [esp+9Ch+arg_4] +
mov edi 0FFFFFFFFh +
mov [esp+9Ch+var_8C] ecx +
mov [esp+9Ch+var_98] offset aSErrorElfFil_1 +
mov [esp+9Ch+var_9C] 0 +
mov [esp+9Ch+var_90] eax +
mov eax ds:dword_486584 +
mov [esp+9Ch+var_94] eax +
call sub_401740  +
jmp loc_40FB8D  +
mov eax [esp+9Ch+var_58] +
cmp word ptr [eax+2Ch] 0FFFFh +
jz loc_4104FB  +
mov eax [esp+9Ch+var_5C] +
mov [esp+9Ch+var_9C] eax +
call sub_451620  +
test eax eax +
mov ebx eax +
jz loc_4104B9  +
lea eax [esp+9Ch+var_38] +
mov [esp+9Ch+var_98] eax +
mov eax [esp+9Ch+var_5C] +
mov [esp+9Ch+var_9C] eax +
call sub_451710  +
test eax eax +
jz loc_41033A  +
mov [esp+9Ch+var_9C] 0FFFFFFFFh +
call sub_4514D0  +
mov [esp+9Ch+var_98] offset aSErrorErrorObt +
mov [esp+9Ch+var_9C] 0 +
mov [esp+9Ch+var_90] eax +
mov eax ds:dword_486584 +
mov [esp+9Ch+var_94] eax +
call sub_401740  +
mov [esp+9Ch+var_38] 0 +
mov eax [esp+9Ch+var_58] +
cmp word ptr [eax+2Ch] 0 +
jz loc_410536  +
mov edi 0FFFFFFFFh +
mov esi ebx +
mov [esp+9Ch+var_54] edi +
mov edi [esp+9Ch+var_6C] +
mov [esp+9Ch+var_50] 0 +
mov [esp+9Ch+var_48] ebp +
jmp loc_410380  +
mov eax [esp+9Ch+var_58] +
add esi 20h +
add [esp+9Ch+var_50] 1 +
movzx eax word ptr [eax+2Ch] +
cmp [esp+9Ch+var_50] eax +
jnb loc_41052D  +
cmp dword ptr [esi] 1 +
jnz loc_410366  +
mov eax [esi+10h] +
test eax eax +
jz loc_410366  +
mov ecx [esi+0Ch] +
mov edx [esi+8] +
mov [esp+9Ch+var_84] eax +
mov eax [esp+9Ch+var_50] +
mov [esp+9Ch+var_98] offset aSConsideringPt +
mov [esp+9Ch+var_88] ecx +
mov [esp+9Ch+var_8C] edx +
mov [esp+9Ch+var_90] eax +
mov eax ds:dword_486584 +
mov [esp+9Ch+var_9C] 2 +
mov [esp+9Ch+var_94] eax +
call sub_401740  +
xor eax eax +
mov [esp+9Ch+var_44] edi +
mov edi eax +
mov eax [esp+9Ch+var_5C] +
mov [esp+9Ch+var_98] edi +
mov [esp+9Ch+var_9C] eax +
call sub_451920  +
test eax eax +
mov edi eax +
jz loc_410748  +
mov [esp+9Ch+var_9C] edi +
call sub_4519A0  +
mov [esp+9Ch+var_9C] edi +
mov ebx eax +
call sub_4519C0  +
test eax eax +
mov edx eax +
jz loc_410712  +
test byte ptr [eax+8] 2 +
jz loc_4103CB  +
cmp dword ptr [eax+4] 1 +
jnz loc_4103CB  +
mov ebx [eax+14h] +
test ebx ebx +
jz loc_4103CB  +
mov eax [eax+10h] +
mov ebp [esi+4] +
mov [esp+9Ch+var_4C] eax +
cmp eax ebp +
jb loc_4103CB  +
lea ecx [eax+ebx] +
mov eax [esi+10h] +
add eax ebp +
cmp ecx eax +
ja loc_4103CB  +
mov eax [esp+9Ch+var_38] +
mov [esp+9Ch+var_40] edi +
mov edi [esp+9Ch+var_44] +
test eax eax +
jnz loc_410540  +
mov ecx ebp +
mov ebp [esp+9Ch+var_4C] +
mov eax ebx +
mov ebx offset aUnknown_3 +
add ebp [esi+0Ch] +
mov [esp+9Ch+var_88] eax +
mov eax ds:dword_486584 +
mov [esp+9Ch+var_90] ebx +
sub ebp ecx +
mov [esp+9Ch+var_8C] ebp +
mov [esp+9Ch+var_94] eax +
mov [esp+9Ch+var_98] offset aSFoundSectionS +
mov [esp+9Ch+var_9C] 2 +
mov [esp+9Ch+var_4C] edx +
call sub_401740  +
cmp ebp [esp+9Ch+var_48] +
jb loc_41049C  +
mov edx [esp+9Ch+var_4C] +
mov eax [edx+14h] +
lea edx [ebp+eax+0] +
cmp edx [esp+9Ch+var_64] +
jb loc_41056E  +
mov [esp+9Ch+var_94] edi +
mov [esp+9Ch+var_98] offset aSkippingInappr +
mov [esp+9Ch+var_9C] 2 +
call sub_401740  +
jmp loc_410366  +
mov [esp+9Ch+var_9C] 0FFFFFFFFh +
mov edi 0FFFFFFFFh +
call sub_4514D0  +
mov [esp+9Ch+var_98] offset aSErrorErrorR_1 +
mov [esp+9Ch+var_9C] 0 +
mov [esp+9Ch+var_8C] eax +
mov eax [esp+9Ch+arg_4] +
mov [esp+9Ch+var_90] eax +
mov eax ds:dword_486584 +
mov [esp+9Ch+var_94] eax +
call sub_401740  +
jmp loc_40FB8D  +
mov eax [esp+9Ch+arg_4] +
mov edi 0FFFFFFFFh +
mov [esp+9Ch+var_98] offset aSErrorElfFil_2 +
mov [esp+9Ch+var_9C] 0 +
mov [esp+9Ch+var_90] eax +
mov eax ds:dword_486584 +
mov [esp+9Ch+var_94] eax +
call sub_401740  +
jmp loc_40FB8D  +
mov edi [esp+9Ch+var_54] +
jmp loc_40FB8D  +
mov edi 0FFFFFFFFh +
jmp loc_40FB8D  +
mov ecx [edx] +
mov [esp+9Ch+var_98] eax +
mov eax [esp+9Ch+var_5C] +
mov [esp+9Ch+var_4C] edx +
mov [esp+9Ch+var_94] ecx +
mov [esp+9Ch+var_9C] eax +
call sub_4519F0  +
mov edx [esp+9Ch+var_4C] +
mov ecx [esi+4] +
mov ebp [edx+10h] +
mov ebx eax +
mov eax [edx+14h] +
jmp loc_41044F  +
mov edx [edi+44h] +
cmp edx 1 +
jz loc_41057E  +
cmp eax edx +
ja loc_410641  +
xor ebx ebx +
mov [esp+9Ch+var_4C] esi +
mov eax [esp+9Ch+var_40] +
mov [esp+9Ch+var_98] ebx +
mov [esp+9Ch+var_9C] eax +
call sub_451B70  +
test eax eax +
mov ebx eax +
jz loc_4106AD  +
mov edx [ebx+8] +
mov eax [ebx] +
mov [esp+9Ch+var_8C] edx +
mov edx [ebx+0Ch] +
mov [esp+9Ch+var_94] eax +
mov [esp+9Ch+var_98] offset aDataBlockD_buf +
mov [esp+9Ch+var_9C] 2 +
mov [esp+9Ch+var_90] edx +
call sub_401740  +
cmp dword ptr [edi+44h] 1 +
jz loc_410677  +
mov eax [ebx+8] +
mov esi ebp +
mov edx [esp+9Ch+var_54] +
sub esi [esp+9Ch+var_48] +
add esi [ebx+0Ch] +
mov [esp+9Ch+var_94] eax +
mov [esp+9Ch+var_98] offset aWritingDBytesT +
lea ecx [esi+eax] +
cmp edx ecx +
cmovge ecx edx +
mov [esp+9Ch+var_90] esi +
mov [esp+9Ch+var_9C] 3 +
mov [esp+9Ch+var_54] ecx +
call sub_401740  +
mov eax [edi+78h] +
mov ecx [ebx] +
mov edx [ebx+8] +
add eax esi +
mov [esp+9Ch+var_98] ecx +
mov [esp+9Ch+var_94] edx +
mov [esp+9Ch+var_9C] eax +
call memcpy  +
mov eax [ebx+8] +
mov [esp+9Ch+var_98] 1 +
mov [esp+9Ch+var_94] eax +
add esi [edi+7Ch] +
mov [esp+9Ch+var_9C] esi +
call memset  +
jmp loc_410584  +
mov [esp+9Ch+var_84] eax +
mov eax ds:dword_486584 +
mov [esp+9Ch+var_80] edx +
mov [esp+9Ch+var_88] ebp +
mov [esp+9Ch+var_8C] edi +
mov [esp+9Ch+var_90] ebx +
mov [esp+9Ch+var_94] eax +
mov [esp+9Ch+var_98] offset aSErrorSectionS +
mov [esp+9Ch+var_9C] 0 +
call sub_401740  +
jmp loc_410366  +
mov eax [ebx+0Ch] +
test eax eax +
jnz loc_4106F0  +
mov eax [esp+9Ch+var_68] +
cmp [ebx+8] eax +
ja loc_4106B6  +
mov [esp+9Ch+var_90] eax +
mov eax ds:dword_486584 +
mov [esp+9Ch+var_98] offset aSErrorElfFil_3 +
mov [esp+9Ch+var_9C] 0 +
mov [esp+9Ch+var_94] eax +
call sub_401740  +
jmp loc_410584  +
mov esi [esp+9Ch+var_4C] +
jmp loc_410366  +
mov esi [esp+9Ch+var_68] +
mov [esp+9Ch+var_98] offset aExtractingOneB +
mov [esp+9Ch+var_9C] 2 +
mov [esp+9Ch+var_94] esi +
call sub_401740  +
mov edx [ebx] +
mov eax [edi+78h] +
mov [esp+9Ch+var_54] 1 +
movzx edx byte ptr [edx+esi] +
mov [eax] dl +
mov eax [edi+7Ch] +
mov byte ptr [eax] 1 +
jmp loc_410584  +
mov eax ds:dword_486584 +
mov [esp+9Ch+var_98] offset aSErrorUnexpect +
mov [esp+9Ch+var_9C] 0 +
mov [esp+9Ch+var_94] eax +
call sub_401740  +
jmp loc_410584  +
mov [esp+9Ch+var_9C] 0FFFFFFFFh +
call sub_4514D0  +
mov [esp+9Ch+var_90] ebx +
mov [esp+9Ch+var_98] offset aSErrorErrorR_2 +
mov [esp+9Ch+var_9C] 0 +
mov [esp+9Ch+var_8C] eax +
mov eax ds:dword_486584 +
mov [esp+9Ch+var_94] eax +
call sub_401740  +
jmp loc_4103CB  +
mov eax [esi+8] +
mov [esp+9Ch+var_98] offset aSErrorCannotFi +
mov edi [esp+9Ch+var_44] +
mov [esp+9Ch+var_9C] 0 +
mov [esp+9Ch+var_90] eax +
mov eax ds:dword_486584 +
mov [esp+9Ch+var_94] eax +
call sub_401740  +
jmp loc_410366  +
***
push ebx  +
sub esp 14h +
jmp loc_410793  +
add ecx 1 +
cmp ecx 1 +
jz loc_4107CF  +
mov ebx [eax+ecx*4-4] +
test ebx ebx +
jnz loc_4107B0  +
cmp ecx 8 +
jnz loc_410790  +
xor eax eax +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov [esp+18h+var_14] offset aPinsHaveHigher +
mov [esp+18h+var_18] 0 +
call sub_401740  +
add esp 14h +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
retn   +
mov ebx [eax] +
test ebx ebx +
js loc_4107F2  +
jnz loc_4107DF  +
mov dword ptr [edx] 0 +
jmp loc_410790  +
mov esi [eax+20h] +
cmp ebx esi +
jz loc_410824  +
not esi  +
and esi ebx +
cmp ebx esi +
jnz loc_41080B  +
mov [edx] ebx +
jmp loc_410790  +
mov [esp+18h+var_14] offset aPinsOfHigherIn +
mov [esp+18h+var_18] 0 +
call sub_401740  +
or eax 0FFFFFFFFh +
jmp loc_4107A7  +
mov [esp+18h+var_14] offset aPinsHaveDiffer +
mov [esp+18h+var_18] 0 +
call sub_401740  +
or eax 0FFFFFFFFh +
jmp loc_4107A7  +
or ebx 80000000h +
mov [edx] ebx +
jmp loc_410790  +
***
jmp sub_410840  +
***
push edi  +
mov edi edx +
push esi  +
xor edx edx +
push ebx  +
mov esi 1 +
sub esp 1Ch +
jmp loc_410875  +
mov [edi] ecx +
mov edx 1 +
test [ebx+20h] ebp +
jz loc_41086A  +
mov ebx ecx +
or ebx 80000000h +
mov [edi] ebx +
add ecx 1 +
cmp ecx 0FFh +
jz loc_4108B0  +
mov ebx ecx +
mov ebp esi +
shr ebx 5 +
lea ebx [eax+ebx*4] +
shl ebp cl +
test [ebx] ebp +
jz loc_41086A  +
test dl dl +
jz loc_410854  +
mov [esp+28h+var_24] offset aMultiplePinsFo +
mov [esp+28h+var_28] 0 +
call sub_401740  +
add esp 1Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add esp 1Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov edx [esp+arg_0] +
mov ebx [esp+arg_8] +
mov eax ecx +
shr eax 5 +
lea eax [edx+eax*4] +
mov edx 1 +
shl edx cl +
or [eax] edx +
test bl bl +
jnz loc_4108F0  +
not edx  +
and [eax+20h] edx +
pop ebx  +
retn   +
or [eax+20h] edx +
pop ebx  +
retn   +
***
mov edx 40h +
test edi 1 +
jnz loc_410940  +
test edi 2 +
jnz loc_410950  +
mov ecx edx +
xor eax eax +
shr ecx 2 +
test dl 2 +
stos   +
jz loc_410931  +
xor eax eax +
add edi 2 +
mov [edi-2] ax +
and edx 1 +
jz loc_410939  +
mov byte ptr [edi] 0 +
pop edi  +
retn   +
mov byte ptr [edi] 0 +
add edi 1 +
mov dl 3Fh +
test edi 2 +
jz loc_41091A  +
xor ecx ecx +
add edi 2 +
mov [edi-2] cx +
sub edx 2 +
jmp loc_41091A  +
***
mov ebx [esp+8+arg_0] +
lea edx [ebx+180h] +
lea eax [ebx+1E8h] +
call sub_410780  +
test eax eax +
js loc_410A50  +
lea edx [ebx+184h] +
lea eax [ebx+228h] +
call sub_410780  +
test eax eax +
js loc_410A50  +
lea edx [ebx+188h] +
lea eax [ebx+268h] +
call sub_410840  +
test eax eax +
js loc_410A50  +
lea edx [ebx+18Ch] +
lea eax [ebx+2A8h] +
call sub_410840  +
test eax eax +
js loc_410A50  +
lea edx [ebx+190h] +
lea eax [ebx+2E8h] +
call sub_410840  +
test eax eax +
js loc_410A50  +
lea edx [ebx+194h] +
lea eax [ebx+328h] +
call sub_410840  +
test eax eax +
js loc_410A50  +
lea edx [ebx+198h] +
lea eax [ebx+368h] +
call sub_410840  +
test eax eax +
js loc_410A50  +
lea edx [ebx+19Ch] +
lea eax [ebx+3A8h] +
call sub_410840  +
test eax eax +
js loc_410A50  +
lea edx [ebx+1A0h] +
lea eax [ebx+3E8h] +
call sub_410840  +
test eax eax +
js loc_410A50  +
lea edx [ebx+1A4h] +
lea eax [ebx+428h] +
call sub_410840  +
add esp 8 +
pop ebx  +
sar eax 1Fh +
retn   +
add esp 8 +
mov eax 0FFFFFFFFh +
pop ebx  +
retn   +
***
push edi  +
mov ebp 0FFFFFFFFh +
push esi  +
mov esi offset byte_4846C0 +
push ebx  +
xor ebx ebx +
sub esp 1Ch +
mov ds:byte_4846C0 0 +
jmp loc_410AD0  +
cmp ebp edx +
jz loc_410A9B  +
mov [esp+28h+var_28] esi +
mov [esp+28h+var_20] edx +
mov [esp+28h+var_24] offset aD_3 +
call sprintf  +
add esi eax +
cmp ds:byte_4846C0 0 +
mov edx offset aD_4 +
mov eax offset aD_2 +
mov ebp ebx +
mov [esp+28h+var_28] esi +
cmovnz eax edx +
mov [esp+28h+var_20] ebx +
mov [esp+28h+var_24] eax +
call sprintf  +
mov edx ebx +
add esi eax +
add ebx 1 +
cmp ebx 100h +
jz loc_410B02  +
mov ecx ebx +
mov edi 1 +
shl edi cl +
mov eax ebx +
mov ecx edi +
mov edi [esp+28h+arg_0] +
shr eax 5 +
test [edi+eax*4] ecx +
jz loc_410AC5  +
cmp ebp 0FFFFFFFFh +
jz loc_410A9B  +
lea eax [edx+1] +
cmp eax ebx +
jnz loc_410A81  +
mov edx ebx +
add ebx 1 +
cmp ebx 100h +
jnz loc_410AD0  +
cmp ebp edx +
jz loc_410B1A  +
mov [esp+28h+var_20] edx +
mov [esp+28h+var_24] offset aD_3 +
mov [esp+28h+var_28] esi +
call sprintf  +
cmp ds:byte_4846C0 0 +
mov eax offset aNoPins +
mov edx offset byte_4846C0 +
cmovnz eax edx +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 0CCh +
movzx eax byte ptr [esp+0ECh] +
mov [esp+33h] al +
xor eax eax +
mov dword ptr [esp+eax+40h] 0 +
add eax 4 +
cmp eax 20h +
jb loc_410B58  +
mov eax [esp+0E0h] +
mov edi 1 +
mov dword ptr [esp+2Ch] 0FFFFFFFFh +
mov dword ptr [esp+24h] 0 +
mov dword ptr [esp+3Ch] 0 +
add eax 1A8h +
mov [esp+38h] eax +
mov eax [esp+2Ch] +
add eax 1 +
mov [esp+28h] eax +
xor eax eax +
mov dword ptr [esp+eax+60h] 0 +
add eax 4 +
cmp eax 20h +
jb loc_410BA2  +
xor eax eax +
mov dword ptr [esp+eax+80h] 0 +
add eax 4 +
cmp eax 20h +
jb loc_410BB4  +
xor eax eax +
mov dword ptr [esp+eax+0A0h] 0 +
add eax 4 +
cmp eax 20h +
jb loc_410BC9  +
mov edx [esp+0E8h] +
test edx edx +
jle loc_410C28  +
mov eax [esp+0E4h] +
mov esi [esp+28h] +
cmp [eax] esi +
jz loc_410F07  +
mov eax [esp+0E4h] +
xor ecx ecx +
mov esi [esp+28h] +
mov ebx [esp+0E8h] +
add eax 0Ch +
jmp loc_410C21  +
mov edx eax +
add eax 0Ch +
cmp [eax-0Ch] esi +
jz loc_410F10  +
add ecx 1 +
cmp ecx ebx +
jnz loc_410C13  +
mov byte ptr [esp+32h] 0 +
mov dword ptr [esp+34h] offset unk_46BEA0 +
mov ebp [esp+34h] +
xor eax eax +
mov esi [esp+38h] +
mov byte ptr [esp+31h] 0 +
mov byte ptr [esp+30h] 0 +
mov byte ptr [esp+22h] 0 +
mov byte ptr [esp+23h] 0 +
jmp loc_410C5D  +
mov ebx [esp+eax*4+40h] +
mov [esp+24h] ebx +
mov edx [ebp+0] +
mov ebx [esi] +
mov ecx edx +
not ecx  +
and ecx ebx +
cmp byte ptr [esp+32h] 0 +
mov [esp+1Ch] edx +
mov [esp+eax*4+60h] ecx +
jz loc_410C85  +
test ebx edx +
movzx edx byte ptr [esp+31h] +
cmovnz edx edi +
mov [esp+31h] dl +
test ecx ecx +
movzx ecx byte ptr [esp+22h] +
mov edx [esp+1Ch] +
cmovnz ecx edi +
mov [esp+22h] cl +
mov ecx [ebp+20h] +
and edx [esi+20h] +
not ecx  +
and edx ecx +
movzx ecx byte ptr [esp+30h] +
test edx edx +
mov [esp+eax*4+80h] edx +
cmovnz ecx edi +
mov [esp+30h] cl +
mov ecx [esp+24h] +
mov edx ecx +
and edx ebx +
test edx edx +
mov [esp+eax*4+0A0h] edx +
movzx edx byte ptr [esp+23h] +
cmovnz edx edi +
or ebx ecx +
mov [esp+eax*4+40h] ebx +
add eax 1 +
add esi 4 +
add ebp 4 +
cmp eax 8 +
mov [esp+23h] dl +
jnz loc_410C55  +
cmp byte ptr [esp+22h] 0 +
jz loc_410D96  +
cmp byte ptr [esp+33h] 0 +
jnz loc_410F26  +
xor eax eax +
cmp byte ptr [esp+30h] 0 +
jz loc_410E85  +
nop   +
xor eax eax +
cmp byte ptr [esp+31h] 1 +
jz loc_410EA2  +
cmp byte ptr [esp+32h] 0 +
jz loc_410EA2  +
cmp byte ptr [esp+22h] 0 +
jnz loc_410EA2  +
cmp byte ptr [esp+33h] 0 +
jz loc_410D6B  +
cmp dword ptr [esp+2Ch] 9 +
jbe loc_410FB7  +
mov eax offset aUnknown_2 +
mov [esp+0Ch] eax +
mov eax ds:dword_486584 +
mov dword ptr [esp+4] offset aSSMandatoryPin +
mov dword ptr [esp] 0 +
mov [esp+8] eax +
call sub_401740  +
mov dword ptr [esp+3Ch] 0FFFFFFFFh +
mov eax [esp+28h] +
add dword ptr [esp+38h] 40h +
cmp eax 0Ah +
jz loc_410EF8  +
mov esi [esp+40h] +
mov [esp+2Ch] eax +
mov [esp+24h] esi +
jmp loc_410B95  +
***
cmp byte ptr [esp+30h] 0 +
jz loc_410E80  +
cmp byte ptr [esp+33h] 0 +
jz loc_410D10  +
lea eax [esp+80h] +
mov [esp] eax +
call sub_410A60  +
cmp dword ptr [esp+2Ch] 9 +
jbe loc_410FD7  +
mov [esp+10h] eax +
mov eax ds:dword_486584 +
mov ebx offset aUnknown_2 +
mov dword ptr [esp+0Ch] offset aUnknown_2 +
mov dword ptr [esp+4] offset aSSFollowingPin +
mov dword ptr [esp] 0 +
mov [esp+8] eax +
call sub_401740  +
mov eax [esp+34h] +
add eax 20h +
mov [esp] eax +
call sub_410A60  +
mov [esp+10h] eax +
mov eax ds:dword_486584 +
mov [esp+0Ch] ebx +
mov dword ptr [esp+4] offset aSSValidInverse +
mov dword ptr [esp] 2 +
mov [esp+8] eax +
call sub_401740  +
cmp byte ptr [esp+23h] 0 +
jz loc_410D10  +
lea eax [esp+0A0h] +
mov [esp] eax +
call sub_410A60  +
cmp dword ptr [esp+2Ch] 9 +
jbe loc_410FC7  +
mov edx offset aUnknown_2 +
mov [esp+10h] eax +
mov eax ds:dword_486584 +
mov [esp+0Ch] edx +
mov dword ptr [esp+4] offset aSSFollowingP_0 +
mov dword ptr [esp] 0 +
mov [esp+8] eax +
call sub_401740  +
jmp loc_410D10  +
***
mov eax 1 +
cmp byte ptr [esp+23h] 0 +
jz loc_410D12  +
cmp byte ptr [esp+33h] 0 +
jnz loc_410E33  +
cmp byte ptr [esp+31h] 1 +
jnz loc_410D1D  +
test al al +
jz loc_410D6B  +
cmp byte ptr [esp+33h] 0 +
jz loc_410D73  +
cmp dword ptr [esp+2Ch] 9 +
jbe loc_41101B  +
mov eax offset aUnknown_2 +
mov [esp+0Ch] eax +
mov eax ds:dword_486584 +
mov dword ptr [esp+4] offset aSSPinIsOk_ +
mov dword ptr [esp] 3 +
mov [esp+8] eax +
call sub_401740  +
mov eax [esp+28h] +
add dword ptr [esp+38h] 40h +
cmp eax 0Ah +
jnz loc_410D85  +
mov eax [esp+3Ch] +
add esp 0CCh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov edx [esp+0E4h] +
nop   +
mov eax [edx+8] +
mov [esp+34h] eax +
mov eax [edx+4] +
test eax eax +
setnz byte ptr [esp+32h]  +
jmp loc_410C35  +
***
lea eax [esp+60h] +
mov [esp] eax +
call sub_410A60  +
cmp dword ptr [esp+2Ch] 9 +
jbe loc_41102B  +
mov [esp+10h] eax +
mov eax ds:dword_486584 +
mov ebx offset aUnknown_2 +
mov dword ptr [esp+0Ch] offset aUnknown_2 +
mov dword ptr [esp+4] offset aSSFollowingP_1 +
mov dword ptr [esp] 0 +
mov [esp+8] eax +
call sub_401740  +
mov eax [esp+34h] +
mov [esp] eax +
call sub_410A60  +
mov [esp+10h] eax +
mov eax ds:dword_486584 +
mov [esp+0Ch] ebx +
mov dword ptr [esp+4] offset aSSValidPinsFor +
mov dword ptr [esp] 2 +
mov [esp+8] eax +
call sub_401740  +
cmp byte ptr [esp+30h] 0 +
jnz loc_410DAC  +
cmp byte ptr [esp+23h] 0 +
jnz loc_410E33  +
jmp loc_410D10  +
***
mov eax [esp+2Ch] +
mov eax ds:off_46BE60[eax*4] +
jmp loc_410D4A  +
***
mov esi [esp+2Ch] +
mov edx ds:off_46BE60[esi*4] +
jmp loc_410E52  +
***
mov esi [esp+2Ch] +
mov [esp+10h] eax +
mov eax ds:dword_486584 +
mov dword ptr [esp+4] offset aSSFollowingPin +
mov dword ptr [esp] 0 +
mov ebx ds:off_46BE60[esi*4] +
mov [esp+8] eax +
mov [esp+0Ch] ebx +
call sub_401740  +
mov eax [esp+34h] +
add eax 20h +
mov [esp] eax +
call sub_410A60  +
jmp loc_410E03  +
***
mov eax [esp+2Ch] +
mov eax ds:off_46BE60[eax*4] +
jmp loc_410EC5  +
***
mov esi [esp+2Ch] +
mov [esp+10h] eax +
mov eax ds:dword_486584 +
mov dword ptr [esp+4] offset aSSFollowingP_1 +
mov dword ptr [esp] 0 +
mov ebx ds:off_46BE60[esi*4] +
mov [esp+8] eax +
mov [esp+0Ch] ebx +
call sub_401740  +
mov eax [esp+34h] +
mov [esp] eax +
call sub_410A60  +
jmp loc_410F77  +
***
push edi  +
mov ebp offset byte_4841C0 +
push esi  +
mov esi 1 +
push ebx  +
xor ebx ebx +
sub esp 1Ch +
mov ds:byte_4841C0 0 +
jmp loc_4110C3  +
test dl dl +
mov eax offset aD +
mov edx offset aD_1 +
cmovz eax edx +
mov [esp+28h+var_28] ebp +
mov [esp+28h+var_20] ebx +
mov [esp+28h+var_24] eax +
call sprintf  +
movzx edx ds:byte_4841C0 +
add ebp eax +
add ebx 1 +
cmp ebx 100h +
jz loc_4110F0  +
mov edi [esp+28h+arg_0] +
mov eax ebx +
mov ecx ebx +
shr eax 5 +
lea eax [edi+eax*4] +
mov edi esi +
shl edi cl +
test [eax] edi +
jz loc_4110B8  +
test [eax+20h] edi +
jnz loc_411090  +
test dl dl +
mov eax offset aD_4 +
mov edx offset aD_0 +
cmovz eax edx +
jmp loc_41109F  +
test dl dl +
mov eax offset aNotUsed +
mov edx offset byte_4841C0 +
cmovnz eax edx +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [esp+arg_0] +
lea edx [eax-1] +
mov eax offset aUnknown_2 +
cmp edx 9 +
ja locret_411128  +
mov eax ds:off_46BE60[edx*4] +
retn   +
***
sub esp 14h +
mov eax off_461140 +
mov ebx [esp+14h+arg_0] +
mov eax [eax+18h] +
lea esi [ebx+89Ch] +
mov [esp+14h+var_14] esi +
mov [esp+14h+var_10] 0 +
call eax  +
mov eax off_461140 +
mov eax [eax+8] +
mov [esp+14h+var_14] esi +
call eax  +
mov dword ptr [ebx+89Ch] 0FFFFFFFFh +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
***
jmp loc_411180  +
push edi  +
push esi  +
push ebx  +
sub esp 20h +
mov ebx [esp+30h] +
mov edi [esp+34h] +
lea eax [ebx+74h] +
mov [esp+4] edi +
lea esi [ebx+89Ch] +
mov [esp] eax +
call strcpy  +
mov edx [ebx+480h] +
mov eax 1C200h +
test edx edx +
cmovnz eax edx +
mov edx off_461140 +
mov [esp+18h] eax +
mov edx [edx] +
mov [esp+4] eax +
mov eax [esp+1Ch] +
mov [esp+0Ch] esi +
mov [esp] edi +
mov [esp+8] eax +
call edx  +
cmp eax 0FFFFFFFFh +
jz loc_411236  +
mov eax off_461140 +
mov eax [eax+18h] +
mov dword ptr [esp+4] 0 +
mov [esp] esi +
call eax  +
mov dword ptr [esp] 3D090h +
call sub_459150  +
mov eax off_461140 +
mov eax [eax+18h] +
mov dword ptr [esp+4] 1 +
mov [esp] esi +
call eax  +
mov dword ptr [esp] 0C350h +
call sub_459150  +
mov dword ptr [esp+4] 0 +
mov [esp] ebx +
call sub_433810  +
mov [esp] ebx +
call sub_433830  +
sar eax 1Fh +
add esp 20h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
push edi  +
push esi  +
push ebx  +
sub esp 40h +
mov ebx [esp+58h] +
cmp dword ptr [ebx+44h] 2 +
jle loc_4112F0  +
mov ecx [esp+50h] +
lea edi [esp+20h] +
mov eax off_461140 +
mov byte ptr [esp+20h] 75h +
mov byte ptr [esp+21h] 20h +
lea esi [ecx+89Ch] +
mov eax [eax+0Ch] +
mov dword ptr [esp+8] 2 +
mov [esp+4] edi +
mov [esp] esi +
call eax  +
mov eax off_461140 +
mov eax [eax+10h] +
mov dword ptr [esp+8] 5 +
mov [esp+4] edi +
mov [esp] esi +
call eax  +
test eax eax +
js loc_411377  +
movzx eax byte ptr [esp+20h] +
cmp al 15h +
jz loc_411381  +
cmp al 14h +
jnz loc_411314  +
movzx eax byte ptr [esp+24h] +
cmp al 10h +
jnz loc_411344  +
mov edx [ebx+78h] +
movzx eax byte ptr [esp+21h] +
mov [edx] al +
mov edx [ebx+78h] +
movzx eax byte ptr [esp+22h] +
mov [edx+1] al +
movzx eax byte ptr [esp+23h] +
mov edx [ebx+78h] +
mov [edx+2] al +
mov eax 3 +
add esp 40h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
mov eax ds:dword_486584 +
mov dword ptr [esp+4] offset aSMemsizeTooSma +
mov dword ptr [esp] 0 +
mov [esp+8] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_4112E9  +
***
mov [esp+10h] eax +
mov eax ds:dword_486584 +
mov dword ptr [esp+0Ch] 14h +
mov dword ptr [esp+4] offset aSArduino_read_ +
mov dword ptr [esp] 0 +
mov [esp+8] eax +
call sub_401740  +
mov eax 0FFFFFFFEh +
jmp loc_4112E9  +
***
mov [esp+10h] eax +
mov eax ds:dword_486584 +
mov dword ptr [esp+0Ch] 10h +
mov dword ptr [esp+4] offset aSArduino_read_ +
mov dword ptr [esp] 0 +
mov [esp+8] eax +
call sub_401740  +
mov eax 0FFFFFFFDh +
jmp loc_4112E9  +
***
mov eax 0FFFFFFFFh +
jmp loc_4112E9  +
***
mov eax ds:dword_486584 +
mov dword ptr [esp+4] offset aSStk500_cmdP_1 +
mov dword ptr [esp] 0 +
mov [esp+8] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_4112E9  +
***
mov ebx [esp+18h+arg_0] +
mov [esp+18h+var_18] ebx +
call sub_4357A0  +
mov dword ptr [ebx+54h] 75647241h +
mov dword ptr [ebx+58h] 6F6E69h +
mov dword ptr [ebx+918h] offset loc_411240 +
mov dword ptr [ebx+8F8h] offset loc_411180 +
mov dword ptr [ebx+8FCh] offset sub_411130 +
add esp 18h +
pop ebx  +
retn   +
***
retn   +
***
mov eax [esp+4] +
mov eax [eax+0A5Ch] +
mov [esp+4] eax +
jmp free  +
***
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [esp+3Ch+arg_4] +
mov [esp+3Ch+var_3C] eax +
call sub_406F20  +
mov [esp+3Ch+var_20] 0 +
test eax eax +
mov ebx eax +
jnz loc_4114BF  +
jmp loc_411520  +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_38] offset aSAvr910_parsee +
mov [esp+3Ch+var_3C] 2 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov eax [esp+3Ch+arg_0] +
mov eax [eax+0A5Ch] +
mov byte ptr [eax+8] 0 +
mov [esp+3Ch+var_3C] ebx +
call sub_406F40  +
test eax eax +
mov ebx eax +
jz loc_411520  +
mov [esp+3Ch+var_3C] ebx +
mov edi offset aDevcode +
call sub_406F60  +
mov ecx 8 +
mov esi eax +
mov ebp eax +
cmps   +
jz loc_411530  +
mov edi offset aNo_blockmode +
mov ecx 0Ch +
mov esi eax +
cmps   +
jz loc_411486  +
mov [esp+3Ch+var_30] eax +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_38] offset aSAvr910_pars_0 +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov [esp+3Ch+var_3C] ebx +
mov [esp+3Ch+var_20] 0FFFFFFFFh +
call sub_406F40  +
test eax eax +
mov ebx eax +
jnz loc_4114BF  +
mov eax [esp+3Ch+var_20] +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
lea eax [esp+3Ch+var_10] +
mov [esp+3Ch+var_34] eax +
mov [esp+3Ch+var_38] offset aDevcodeI +
mov [esp+3Ch+var_3C] ebp +
call sscanf  +
cmp eax 1 +
jnz loc_411593  +
mov eax [esp+3Ch+var_10] +
lea edx [eax-1] +
cmp edx 0FEh +
ja loc_411593  +
mov [esp+3Ch+var_30] eax +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_38] offset aSAvr910_pars_1 +
mov [esp+3Ch+var_3C] 2 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov eax [esp+3Ch+arg_0] +
mov edx [eax+0A5Ch] +
mov eax [esp+3Ch+var_10] +
mov [edx+1] al +
jmp loc_4114B1  +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_30] ebp +
mov [esp+3Ch+var_38] offset aSAvr910_pars_2 +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov [esp+3Ch+var_20] 0FFFFFFFFh +
jmp loc_4114B1  +
***
jmp loc_4115D0  +
push esi  +
push ebx  +
sub esp 24h +
mov ebx [esp+30h] +
mov esi [esp+34h] +
mov eax [ebx+480h] +
test eax eax +
jnz loc_4115F1  +
mov dword ptr [ebx+480h] 4B00h +
lea eax [ebx+74h] +
add ebx 89Ch +
mov [esp+4] esi +
mov [esp] eax +
call strcpy  +
mov eax [ebx-41Ch] +
mov edx off_461140 +
mov [esp+18h] eax +
mov edx [edx] +
mov [esp+4] eax +
mov eax [esp+1Ch] +
mov [esp+0Ch] ebx +
mov [esp] esi +
mov [esp+8] eax +
call edx  +
cmp eax 0FFFFFFFFh +
jz loc_411649  +
mov eax off_461140 +
mov eax [eax+14h] +
mov dword ptr [esp+4] 0 +
mov [esp] ebx +
call eax  +
xor eax eax +
add esp 24h +
pop ebx  +
pop esi  +
retn   +
***
sub esp 18h +
mov ebx off_461140 +
mov ebx [ebx+10h] +
mov [esp+18h+var_10] ecx +
mov [esp+18h+var_14] edx +
mov [esp+18h+var_18] eax +
call ebx  +
test eax eax +
js loc_411680  +
add esp 18h +
xor eax eax +
pop ebx  +
retn   +
mov eax ds:dword_486584 +
mov [esp+18h+var_14] offset aSAvr910_recvPr +
mov [esp+18h+var_18] 0 +
mov [esp+18h+var_10] eax +
call sub_401740  +
add esp 18h +
mov eax 1 +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+2Ch+arg_4] +
lea ebp [esp+2Ch+var_11] +
mov edi [esp+2Ch+arg_0] +
mov esi [esp+2Ch+arg_8] +
mov byte ptr [esp+2Ch+var_11] 2Eh +
movzx eax byte ptr [ebx] +
lea edx [edi+89Ch] +
mov byte ptr [esp+2Ch+var_11+1] al +
movzx eax byte ptr [ebx+1] +
mov byte ptr [esp+2Ch+var_11+2] al +
movzx eax byte ptr [ebx+2] +
mov byte ptr [esp+2Ch+var_11+3] al +
movzx eax byte ptr [ebx+3] +
mov [esp+2Ch+var_D] al +
mov eax off_461140 +
mov eax [eax+0Ch] +
mov [esp+2Ch+var_28] ebp +
mov [esp+2Ch+var_2C] edx +
mov [esp+2Ch+var_24] 5 +
call eax  +
mov edx ebp +
mov eax edi +
mov ecx 2 +
call sub_411650  +
mov byte ptr [esi] 0 +
movzx eax byte ptr [ebx] +
mov [esi+1] al +
movzx eax byte ptr [ebx+1] +
mov [esi+2] al +
movzx eax byte ptr [esp+2Ch+var_11] +
mov [esi+3] al +
add esp 2Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
sub esp 14h +
mov ebx [esp+14h+arg_8] +
mov esi [esp+14h+arg_0] +
cmp dword ptr [ebx+44h] 2 +
jle loc_4117A2  +
mov eax off_461140 +
lea edx [esi+89Ch] +
mov eax [eax+0Ch] +
mov [esp+14h+var_14] edx +
mov [esp+14h+var_C] 1 +
mov [esp+14h+var_10] offset aS_5 +
call eax  +
mov edx [ebx+78h] +
mov ecx 3 +
mov eax esi +
call sub_411650  +
mov eax [ebx+78h] +
movzx edx byte ptr [eax] +
movzx ecx byte ptr [eax+2] +
mov [eax+2] dl +
mov eax [ebx+78h] +
mov [eax] cl +
mov eax 3 +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov eax ds:dword_486584 +
mov [esp+14h+var_10] offset aSMemsizeTooS_0 +
mov [esp+14h+var_14] 0 +
mov [esp+14h+var_C] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_41179C  +
***
sub esp 28h +
mov ebx edx +
lea edx [esp+28h+var_9] +
call sub_411650  +
xor eax eax +
cmp byte ptr [esp+28h+var_9] 0Dh +
jz loc_411813  +
mov eax ds:dword_486584 +
mov [esp+28h+var_1C] ebx +
mov [esp+28h+var_24] offset aSErrorProgramm +
mov [esp+28h+var_28] 0 +
mov [esp+28h+var_20] eax +
call sub_401740  +
mov eax 1 +
add esp 28h +
pop ebx  +
retn   +
***
mov eax edx +
sub esp 28h +
shr eax 8 +
mov [esp+28h+var_A] al +
mov eax off_461140 +
mov [esp+28h+var_9] dl +
lea edx [esp+1Dh] +
mov [esp+28h+var_B] 41h +
mov eax [eax+0Ch] +
mov [esp+28h+var_24] edx +
lea edx [ebx+89Ch] +
mov [esp+28h+var_28] edx +
mov [esp+28h+var_20] 3 +
call eax  +
mov eax ebx +
mov edx offset aSetAddr +
call sub_4117D0  +
add esp 28h +
pop ebx  +
retn   +
***
push edi  +
mov edi offset aFlash_3 +
push esi  +
push ebx  +
sub esp 3Ch +
mov ebx [esp+48h+arg_10] +
mov eax [esp+48h+arg_14] +
mov esi [esp+48h+arg_8] +
mov ebp [esp+48h+arg_0] +
add eax ebx +
mov [esp+48h+var_34] eax +
cmps   +
jnz loc_411980  +
mov eax [ebp+0A5Ch] +
mov esi 2 +
mov byte ptr [esp+48h+var_1C] 52h +
mov [esp+48h+var_30] 2 +
cmp byte ptr [eax+9] 0 +
jnz loc_4119B8  +
xor edx edx +
mov eax ebx +
div  esi +
mov edx eax +
mov eax ebp +
call sub_411820  +
cmp ebx [esp+48h+var_34] +
jnb loc_411A60  +
lea edi [ebp+89Ch] +
lea eax [esp+48h+var_1C] +
mov [esp+48h+var_2C] edi +
mov edi [esp+48h+arg_8] +
mov [esp+48h+var_38] eax +
jmp loc_411929  +
mov edx [edi+78h] +
mov ecx 1 +
mov eax ebp +
add edx ebx +
call sub_411650  +
mov eax [ebp+0A5Ch] +
add ebx esi +
cmp byte ptr [eax] 59h +
jz loc_41191F  +
mov eax ebx +
xor edx edx +
div  esi +
mov edx eax +
mov eax ebp +
call sub_411820  +
cmp [esp+48h+var_34] ebx +
jbe loc_411A60  +
mov ecx [esp+48h+var_38] +
mov eax off_461140 +
mov eax [eax+0Ch] +
mov [esp+48h+var_44] ecx +
mov ecx [esp+48h+var_2C] +
mov [esp+48h+var_40] 1 +
mov [esp+48h+var_48] ecx +
call eax  +
cmp [esp+48h+var_30] 2 +
jnz loc_4118F2  +
lea edx [esp+2Ah] +
mov ecx 2 +
mov eax ebp +
call sub_411650  +
mov edx [edi+78h] +
movzx eax [esp+48h+var_1D] +
mov [edx+ebx] al +
mov edx [edi+78h] +
movzx eax [esp+48h+var_1E] +
mov [edx+ebx+1] al +
jmp loc_411903  +
mov esi [esp+48h+arg_8] +
mov edi offset aEeprom_2 +
mov ecx 7 +
cmps   +
jnz loc_411A6A  +
mov eax [ebp+0A5Ch] +
mov esi 1 +
mov byte ptr [esp+48h+var_1C] 64h +
mov [esp+48h+var_30] 1 +
cmp byte ptr [eax+9] 0 +
jz loc_4118C1  +
mov edi [eax+4] +
mov eax [esp+48h+arg_8] +
mov byte ptr [esp+48h+var_1C] 67h +
movsx eax byte ptr [eax] +
mov [esp+48h+var_48] eax +
call ds:toupper  +
xor edx edx +
mov byte ptr [esp+48h+var_1C+3] al +
mov eax ebx +
div  esi +
mov edx eax +
mov eax ebp +
call sub_411820  +
mov eax [esp+48h+var_34] +
cmp ebx eax +
jnb loc_411A60  +
lea ecx [ebp+89Ch] +
lea esi [esp+48h+var_1C] +
mov [esp+48h+arg_0] ebp +
mov ebp eax +
mov [esp+48h+var_34] ecx +
mov [esp+48h+var_38] esi +
jmp loc_411A51  +
mov edi esi +
mov eax edi +
mov ecx [esp+48h+var_38] +
sar eax 8 +
mov byte ptr [esp+48h+var_1C+1] al +
mov eax edi +
mov byte ptr [esp+48h+var_1C+2] al +
mov eax off_461140 +
mov eax [eax+0Ch] +
mov [esp+48h+var_44] ecx +
mov ecx [esp+48h+var_34] +
mov [esp+48h+var_40] 4 +
mov [esp+48h+var_48] ecx +
call eax  +
mov eax [esp+48h+arg_8] +
mov ecx esi +
mov edx [eax+78h] +
mov eax [esp+48h+arg_0] +
add edx ebx +
add ebx esi +
call sub_411650  +
cmp ebp ebx +
jbe loc_411A60  +
mov esi ebp +
sub esi ebx +
cmp esi edi +
jb loc_411A05  +
mov esi edi +
jmp loc_411A07  +
mov eax ebx +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax 0FFFFFFFEh +
jmp loc_411A62  +
***
jmp loc_411A80  +
push esi  +
push ebx  +
sub esp 14h +
mov eax off_461140 +
mov ebx [esp+20h] +
mov eax [eax+0Ch] +
lea esi [ebx+89Ch] +
mov [esp] esi +
mov dword ptr [esp+8] 1 +
mov dword ptr [esp+4] offset asc_46C154 +
call eax  +
mov edx offset aLeaveProgMode +
mov eax ebx +
call sub_4117D0  +
mov eax off_461140 +
mov eax [eax+8] +
mov [esp] esi +
call eax  +
mov dword ptr [ebx+89Ch] 0FFFFFFFFh +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
***
mov eax off_461140 +
mov ebx [esp+18h+arg_0] +
mov eax [eax+0Ch] +
lea edx [ebx+89Ch] +
mov [esp+18h+var_18] edx +
mov [esp+18h+var_10] 1 +
mov [esp+18h+var_14] offset aE +
call eax  +
mov edx offset aChipErase +
mov eax ebx +
call sub_4117D0  +
test eax eax +
js loc_411B31  +
mov eax [esp+18h+arg_4] +
mov eax [eax+70h] +
mov [esp+18h+var_18] eax +
call sub_459150  +
xor eax eax +
add esp 18h +
pop ebx  +
retn   +
mov eax 0FFFFFFFFh +
jmp loc_411B2C  +
***
push edi  +
mov edi offset aFlash_3 +
push esi  +
push ebx  +
sub esp 3Ch +
mov esi [esp+48h+arg_8] +
mov ebx [esp+48h+arg_0] +
mov edx [esp+48h+arg_C] +
mov ebp [esp+48h+arg_10] +
cmps   +
setnbe cl  +
mov esi ecx +
setb cl  +
mov eax esi +
cmp al cl +
jnz loc_411BD0  +
mov ecx edx +
and ecx 1 +
cmp ecx 1 +
sbb ecx ecx +
and ecx 20h +
add ecx 43h +
mov byte ptr [esp+48h+var_1A] cl +
shr edx 1 +
mov eax ebp +
mov byte ptr [esp+48h+var_1A+1] al +
mov eax ebx +
call sub_411820  +
mov eax off_461140 +
lea edx [esp+48h+var_1A] +
mov eax [eax+0Ch] +
mov [esp+48h+var_44] edx +
lea edx [ebx+89Ch] +
mov [esp+48h+var_48] edx +
mov [esp+48h+var_40] 2 +
call eax  +
mov eax ebx +
mov edx offset aWriteByte +
call sub_4117D0  +
add esp 3Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi [esp+48h+arg_8] +
mov ecx 7 +
mov edi offset aEeprom_2 +
cmps   +
setnbe al  +
setb cl  +
cmp al cl +
jnz loc_411BF1  +
mov byte ptr [esp+48h+var_1A] 44h +
jmp loc_411B87  +
mov eax ebp +
movzx eax al +
mov [esp+48h+var_38] eax +
mov eax [esp+48h+arg_8] +
mov [esp+48h+var_48] ebx +
mov [esp+48h+var_3C] edx +
mov [esp+48h+var_40] eax +
mov eax [esp+48h+arg_4] +
mov [esp+48h+var_44] eax +
call sub_4042F0  +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push esi  +
push ebx  +
sub esp 4Ch +
mov eax off_461140 +
mov ebx [esp+4Ch+arg_0] +
lea edi [esp+4Ch+var_1E] +
mov eax [eax+0Ch] +
lea esi [ebx+89Ch] +
mov [esp+4Ch+var_44] 1 +
mov [esp+4Ch+var_48] offset aS_6 +
mov [esp+4Ch+var_4C] esi +
call eax  +
mov ecx 7 +
mov edx edi +
mov eax ebx +
mov [esp+4Ch+var_1E] 0 +
mov [esp+4Ch+var_1A] 0 +
call sub_411650  +
mov eax off_461140 +
mov eax [eax+0Ch] +
mov [esp+4Ch+var_44] 1 +
mov [esp+4Ch+var_48] offset aVvp +
mov [esp+4Ch+var_4C] esi +
call eax  +
mov ecx 2 +
mov eax ebx +
lea edx [esp+4Ch+var_23+1] +
call sub_411650  +
mov eax off_461140 +
mov eax [eax+0Ch] +
mov [esp+4Ch+var_44] 1 +
mov [esp+4Ch+var_48] (offset aVvp+2) +
mov [esp+4Ch+var_4C] esi +
call eax  +
mov ecx 2 +
mov eax ebx +
lea edx [esp+4Ch+var_23+3] +
call sub_411650  +
mov eax off_461140 +
mov eax [eax+0Ch] +
mov [esp+4Ch+var_44] 1 +
mov [esp+4Ch+var_48] (offset aVvp+4) +
mov [esp+4Ch+var_4C] esi +
call eax  +
mov ecx 1 +
mov eax ebx +
lea edx [esp+28h] +
call sub_411650  +
movsx eax [esp+4Ch+var_24] +
mov [esp+4Ch+var_44] edi +
mov [esp+4Ch+var_48] offset aFoundProgramme +
mov [esp+4Ch+var_4C] 0 +
mov [esp+4Ch+var_40] eax +
call sub_401740  +
movsx eax byte ptr [esp+4Ch+var_23+2] +
mov [esp+4Ch+var_48] offset aSoftwareVersio +
mov [esp+4Ch+var_4C] 0 +
mov [esp+4Ch+var_40] eax +
movsx eax byte ptr [esp+4Ch+var_23+1] +
mov [esp+4Ch+var_44] eax +
call sub_401740  +
movsx eax byte ptr [esp+2Dh] +
mov [esp+4Ch+var_48] offset aHardwareVersio +
mov [esp+4Ch+var_4C] 0 +
mov [esp+4Ch+var_40] eax +
movsx eax byte ptr [esp+4Ch+var_23+3] +
mov [esp+4Ch+var_44] eax +
call sub_401740  +
mov eax off_461140 +
mov eax [eax+0Ch] +
mov [esp+4Ch+var_44] 1 +
mov [esp+4Ch+var_48] offset aA +
mov [esp+4Ch+var_4C] esi +
call eax  +
mov edx [ebx+0A5Ch] +
mov ecx 1 +
mov eax ebx +
call sub_411650  +
mov eax [ebx+0A5Ch] +
cmp byte ptr [eax] 59h +
jz loc_411FA2  +
cmp byte ptr [eax+8] 1 +
jz loc_411FC6  +
mov byte ptr [eax+9] 0 +
mov eax [ebx+0A5Ch] +
movzx eax byte ptr [eax+1] +
test al al +
jz loc_411E50  +
mov [esp+4Ch+var_15] al +
mov eax off_461140 +
lea edx [esp+36h] +
mov [esp+4Ch+var_16] 54h +
mov eax [eax+0Ch] +
mov [esp+4Ch+var_48] edx +
mov [esp+4Ch+var_44] 2 +
mov [esp+4Ch+var_4C] esi +
call eax  +
mov edx offset aSelectDevice +
mov eax ebx +
call sub_4117D0  +
movsx eax [esp+4Ch+var_15] +
mov [esp+4Ch+var_48] offset aSAvr910_devcod +
mov [esp+4Ch+var_4C] 1 +
mov [esp+4Ch+var_40] eax +
mov eax ds:dword_486584 +
mov [esp+4Ch+var_44] eax +
call sub_401740  +
mov eax off_461140 +
mov eax [eax+0Ch] +
mov [esp+4Ch+var_44] 1 +
mov [esp+4Ch+var_48] offset aP +
mov [esp+4Ch+var_4C] esi +
call eax  +
mov edx offset aEnterProgMode +
mov eax ebx +
call sub_4117D0  +
xor eax eax +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax off_461140 +
xor edi edi +
xor ebp ebp +
mov eax [eax+0Ch] +
mov [esp+4Ch+var_4C] esi +
mov [esp+4Ch+var_44] 1 +
mov [esp+4Ch+var_48] offset aT +
call eax  +
mov [esp+4Ch+var_48] offset aProgrammerSupp +
mov [esp+4Ch+var_4C] 0 +
call sub_401740  +
lea eax [esp+29h] +
mov [esp+4Ch+var_30] esi +
mov esi ebx +
mov ebx edi +
mov [esp+4Ch+var_34] eax +
mov edi [esp+4Ch+arg_4] +
jmp loc_411EF5  +
movsx eax byte ptr [esp+4Ch+var_23] +
test al al +
jz loc_411F15  +
mov [esp+4Ch+var_48] eax +
mov eax ds:dword_486D20 +
mov [esp+4Ch+var_4C] eax +
call sub_407E40  +
mov ecx offset aUnknown_4 +
mov [esp+4Ch+var_48] offset aDeviceCode0x02 +
mov [esp+4Ch+var_4C] 0 +
test eax eax +
cmovz eax ecx +
mov [esp+4Ch+var_40] eax +
movsx eax byte ptr [esp+4Ch+var_23] +
mov [esp+4Ch+var_44] eax +
call sub_401740  +
movsx eax byte ptr [esp+4Ch+var_23] +
cmp [edi+6Ch] eax +
mov eax 1 +
cmovz ebp eax +
mov edx [esp+4Ch+var_34] +
mov ecx 1 +
mov eax esi +
call sub_411650  +
test bl bl +
jnz loc_411EA0  +
movzx ebx byte ptr [esp+4Ch+var_23] +
movsx eax bl +
test al al +
jnz loc_411EA9  +
mov [esp+4Ch+var_48] offset asc_46C2C7 +
mov edi ebx +
mov ebx esi +
mov [esp+4Ch+var_4C] 0 +
mov esi [esp+4Ch+var_30] +
call sub_401740  +
test ebp ebp +
jz loc_411F50  +
mov eax ds:dword_4866A4 +
test eax eax +
jnz loc_411F9B  +
mov eax [esp+4Ch+arg_4] +
movzx eax byte ptr [eax+6Ch] +
jmp loc_411DC2  +
mov eax [esp+4Ch+arg_4] +
mov ecx ds:dword_4866A4 +
mov [esp+4Ch+var_48] offset aSSSelectedDevi +
mov [esp+4Ch+var_4C] 0 +
lea edx [eax+40h] +
mov eax offset aWarning_0 +
test ecx ecx +
mov ecx offset aError_0 +
cmovz eax ecx +
mov [esp+4Ch+var_40] eax +
mov eax ds:dword_486584 +
mov [esp+4Ch+var_3C] edx +
mov [esp+4Ch+var_44] eax +
call sub_401740  +
mov ebp ds:dword_4866A4 +
test ebp ebp +
jz loc_41200F  +
mov eax edi +
jmp loc_411DC2  +
mov [esp+4Ch+var_48] offset aProgrammerSu_0 +
mov [esp+4Ch+var_4C] 0 +
call sub_401740  +
mov eax [ebx+0A5Ch] +
cmp byte ptr [eax+8] 1 +
jnz loc_411DAC  +
mov eax off_461140 +
mov eax [eax+0Ch] +
mov [esp+4Ch+var_44] 1 +
mov [esp+4Ch+var_48] offset aB +
mov [esp+4Ch+var_4C] esi +
call eax  +
lea eax [esp+4Ch+var_23] +
mov ecx 1 +
mov [esp+4Ch+var_34] eax +
mov edx eax +
mov eax ebx +
call sub_411650  +
cmp byte ptr [esp+4Ch+var_23] 59h +
jz loc_412019  +
mov eax [ebx+0A5Ch] +
mov byte ptr [eax+9] 0 +
jmp loc_411DB0  +
mov eax 0FFFFFFFFh +
jmp loc_411E45  +
mov edi [esp+4Ch+var_34] +
mov ecx 1 +
mov eax ebx +
mov edx edi +
call sub_411650  +
movzx eax byte ptr [esp+4Ch+var_23] +
mov ecx 1 +
mov edx [ebx+0A5Ch] +
shl eax 8 +
mov [edx+4] eax +
mov edx edi +
mov eax ebx +
call sub_411650  +
mov edx [ebx+0A5Ch] +
movzx eax byte ptr [esp+4Ch+var_23] +
add eax [edx+4] +
mov [edx+4] eax +
mov [esp+4Ch+var_44] eax +
mov [esp+4Ch+var_48] offset aProgrammerSu_1 +
mov [esp+4Ch+var_4C] 0 +
call sub_401740  +
mov eax [ebx+0A5Ch] +
mov byte ptr [eax+9] 1 +
jmp loc_411DB0  +
***
push edi  +
mov edi offset aFlash_3 +
push esi  +
push ebx  +
sub esp 3Ch +
mov edx [esp+48h+arg_8] +
mov ebp [esp+48h+arg_0] +
mov esi edx +
cmps   +
setnbe cl  +
setb al  +
sub ecx eax +
movsx ebx cl +
test ebx ebx +
jz loc_412158  +
mov ecx 7 +
mov edi offset aEeprom_2 +
mov esi edx +
cmps   +
setnbe cl  +
setb al  +
sub ecx eax +
movsx ebx cl +
test ebx ebx +
jz loc_412110  +
mov eax [esp+48h+arg_10] +
mov [esp+48h+var_40] edx +
mov [esp+48h+var_48] ebp +
mov [esp+48h+var_38] eax +
mov eax [esp+48h+arg_C] +
mov [esp+48h+var_3C] eax +
mov eax [esp+48h+arg_4] +
mov [esp+48h+var_44] eax +
call sub_403EA0  +
mov ebx eax +
add esp 3Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edx [esp+48h+arg_C] +
mov eax ebp +
call sub_411820  +
mov eax off_461140 +
lea edx [ebp+89Ch] +
mov eax [eax+0Ch] +
mov [esp+48h+var_48] edx +
mov [esp+48h+var_40] 1 +
mov [esp+48h+var_44] offset aD_5 +
call eax  +
mov edx [esp+48h+arg_10] +
mov eax ebp +
mov ecx 1 +
call sub_411650  +
add esp 3Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edx [esp+48h+arg_C] +
mov eax ebp +
shr edx 1 +
call sub_411820  +
mov eax off_461140 +
lea edx [ebp+89Ch] +
mov eax [eax+0Ch] +
mov [esp+48h+var_48] edx +
mov [esp+48h+var_40] 1 +
mov [esp+48h+var_44] offset aR_0 +
call eax  +
mov ecx 2 +
mov eax ebp +
lea edx [esp+48h+var_1A] +
call sub_411650  +
test byte ptr [esp+48h+arg_C] 1 +
jz loc_4121B4  +
movzx eax byte ptr [esp+48h+var_1A] +
mov esi [esp+48h+arg_10] +
mov [esi] al +
add esp 3Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
movzx eax byte ptr [esp+48h+var_1A+1] +
mov edi [esp+48h+arg_10] +
mov [edi] al +
jmp loc_412103  +
***
sub esp 1Ch +
mov [esp+1Ch+var_1C] 0Ch +
call malloc  +
mov edx [esp+1Ch+arg_0] +
test eax eax +
mov [edx+0A5Ch] eax +
jz loc_412209  +
mov dword ptr [eax+8] 0 +
mov dword ptr [eax] 0 +
mov dword ptr [eax+4] 0 +
mov byte ptr [eax+8] 1 +
add esp 1Ch +
retn   +
mov eax ds:dword_486584 +
mov [esp+1Ch+var_18] offset aSAvr910_setupO +
mov [esp+1Ch+var_1C] 0 +
mov [esp+1Ch+var_14] eax +
call sub_401740  +
mov [esp+1Ch+var_1C] 1 +
call exit  +
***
push esi  +
mov eax [esp+arg_0] +
mov edx 3031h +
mov dword ptr [eax+54h] 39727661h +
mov [eax+58h] dx +
mov byte ptr [eax+5Ah] 0 +
mov dword ptr [eax+8C8h] offset sub_411C20 +
mov dword ptr [eax+8CCh] offset dword_411430 +
mov dword ptr [eax+8D0h] offset dword_411420 +
mov dword ptr [eax+8D4h] offset dword_411410 +
mov dword ptr [eax+8E0h] offset sub_411400 +
mov dword ptr [eax+8E4h] offset sub_411AE0 +
mov dword ptr [eax+8ECh] offset sub_4116B0 +
mov dword ptr [eax+8F8h] offset loc_4115D0 +
mov dword ptr [eax+8FCh] offset loc_411A80 +
mov dword ptr [eax+910h] offset sub_411B40 +
mov dword ptr [eax+914h] offset sub_412090 +
mov dword ptr [eax+900h] offset sub_412240 +
mov dword ptr [eax+904h] offset sub_411870 +
mov dword ptr [eax+918h] offset sub_411740 +
mov dword ptr [eax+948h] offset sub_411460 +
mov dword ptr [eax+94Ch] offset sub_4121D0 +
mov dword ptr [eax+950h] offset loc_411440 +
retn   +
***
sub esp 1Ch +
mov eax ds:dword_486584 +
mov [esp+1Ch+var_18] offset aSErrorNoLibftd +
mov [esp+1Ch+var_1C] 0 +
mov [esp+1Ch+var_14] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
add esp 1Ch +
retn   +
***
mov eax [esp+arg_0] +
mov dword ptr [eax+54h] 66727661h +
mov dword ptr [eax+58h] 696474h +
mov dword ptr [eax+8F8h] offset sub_412730 +
retn   +
***
mov eax off_461140 +
mov ebx [esp+18h+arg_0] +
mov eax [eax+8] +
lea edx [ebx+89Ch] +
mov [esp+18h+var_18] edx +
call eax  +
mov dword ptr [ebx+89Ch] 0FFFFFFFFh +
add esp 18h +
pop ebx  +
retn   +
***
sub esp 14h +
mov ebx [esp+14h+arg_0] +
mov esi [esp+14h+arg_4] +
mov eax [ebx+8D8h] +
mov [esp+14h+var_14] ebx +
call eax  +
mov eax [ebx+8E0h] +
mov [esp+14h+arg_4] esi +
mov [esp+14h+arg_0] ebx +
add esp 14h +
pop ebx  +
pop esi  +
jmp eax  +
***
mov eax [esp+arg_0] +
mov eax [eax+0A5Ch] +
mov [esp+arg_0] eax +
jmp free  +
***
push esi  +
push ebx  +
sub esp 4Ch +
mov eax [esp+4Ch+arg_4] +
mov ebp [esp+4Ch+arg_0] +
mov [esp+4Ch+var_4C] eax +
call sub_406F20  +
test eax eax +
mov ebx eax +
jz loc_4128D1  +
lea eax [esp+4Ch+var_16] +
mov [esp+4Ch+var_30] eax +
jmp loc_412855  +
or byte ptr [ebp+0A60h] 2 +
mov [esp+4Ch+var_4C] ebx +
call sub_406F40  +
test eax eax +
mov ebx eax +
jz loc_4128D1  +
mov [esp+4Ch+var_4C] ebx +
mov edi offset aAscii +
call sub_406F60  +
mov ecx 6 +
mov [esp+4Ch+var_34] eax +
mov esi eax +
cmps   +
jz loc_412840  +
lea eax [esp+4Ch+var_28] +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+var_34] +
mov [esp+4Ch+var_48] offset aSpifreqU +
mov [esp+4Ch+var_4C] eax +
call sscanf  +
cmp eax 1 +
jnz loc_4128E0  +
mov eax [esp+4Ch+var_28] +
test eax 0FFFFFFF8h +
jnz loc_412AF2  +
movzx edx byte ptr [ebp+0A60h] +
test dl 40h +
jnz loc_412AD1  +
or edx 8 +
mov [ebp+0A60h] dl +
mov edx [ebp+0A5Ch] +
mov [edx+0Ch] eax +
mov [esp+4Ch+var_4C] ebx +
call sub_406F40  +
test eax eax +
mov ebx eax +
jnz loc_412855  +
xor eax eax +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
lea eax [esp+4Ch+var_24] +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+var_34] +
mov [esp+4Ch+var_48] offset aRawfreqU +
mov [esp+4Ch+var_4C] eax +
call sscanf  +
cmp eax 1 +
jnz loc_412935  +
mov eax [esp+4Ch+var_24] +
cmp eax 3 +
ja loc_412B27  +
movzx edx byte ptr [ebp+0A60h] +
test dl 8 +
jnz loc_412AD1  +
or edx 40h +
mov [ebp+0A60h] dl +
mov edx [ebp+0A5Ch] +
mov [edx+0Ch] eax +
jmp loc_412847  +
lea eax [esp+4Ch+var_20] +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+var_34] +
mov [esp+4Ch+var_48] offset aCpufreqU +
mov [esp+4Ch+var_4C] eax +
call sscanf  +
cmp eax 1 +
jnz loc_412980  +
mov eax [esp+4Ch+var_20] +
lea edx [eax-7Dh] +
cmp edx 0F23h +
ja loc_412B45  +
mov edx [ebp+0A5Ch] +
mov [edx+10h] eax +
or byte ptr [ebp+0A60h] 20h +
jmp loc_412847  +
lea eax [esp+4Ch+var_16] +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+var_34] +
mov [esp+4Ch+var_48] offset aReset9s +
mov [esp+4Ch+var_4C] eax +
call sscanf  +
cmp eax 1 +
jz loc_4129E1  +
mov esi [esp+4Ch+var_34] +
mov edi offset aNopagedwrite +
mov ecx 0Dh +
cmps   +
jz loc_4129D5  +
mov esi [esp+4Ch+var_34] +
mov edi offset aNopagedread +
mov ecx 0Ch +
cmps   +
jnz loc_412A92  +
or byte ptr [ebp+0A60h] 80h +
jmp loc_412847  +
or byte ptr [ebp+0A60h] 10h +
jmp loc_412847  +
mov edi ds:_stricmp +
mov esi [esp+4Ch+var_30] +
mov [esp+4Ch+var_34] ebx +
mov [esp+4Ch+var_48] offset asc_46C644 +
mov [esp+4Ch+var_4C] esi +
call strtok  +
test eax eax +
mov ebx eax +
jz loc_412A24  +
mov [esp+4Ch+var_48] offset aCs +
mov [esp+4Ch+var_4C] ebx +
call edi  +
test eax eax +
jnz loc_412A38  +
mov eax [ebp+0A5Ch] +
xor esi esi +
or dword ptr [eax+18h] 1 +
jmp loc_4129EF  +
mov [esp+4Ch+var_30] esi +
mov ebx [esp+4Ch+var_34] +
or byte ptr [ebp+0A60h] 4 +
jmp loc_412847  +
mov [esp+4Ch+var_48] offset aAux +
mov [esp+4Ch+var_4C] ebx +
call edi  +
test eax eax +
jnz loc_412A57  +
mov eax [ebp+0A5Ch] +
xor esi esi +
or dword ptr [eax+18h] 2 +
jmp loc_4129EF  +
lea eax [esp+4Ch+var_16] +
mov [esp+4Ch+var_48] offset aAux1 +
mov [esp+4Ch+var_4C] eax +
call edi  +
test eax eax +
jz loc_412A49  +
mov [esp+4Ch+var_48] offset aAux2 +
mov [esp+4Ch+var_4C] ebx +
call edi  +
test eax eax +
jnz loc_412B75  +
mov eax [ebp+0A5Ch] +
xor esi esi +
or dword ptr [eax+18h] 4 +
jmp loc_4129EF  +
lea eax [esp+4Ch+var_1C] +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+var_34] +
mov [esp+4Ch+var_48] offset aSerial_recv_ti +
mov [esp+4Ch+var_4C] eax +
call sscanf  +
cmp eax 1 +
jnz loc_412B4F  +
mov eax [esp+4Ch+var_1C] +
test eax eax +
jle loc_412B93  +
mov edx [ebp+0A5Ch] +
mov [edx+14h] eax +
jmp loc_412847  +
mov [esp+4Ch+var_48] offset aBuspirateSetEi +
mov [esp+4Ch+var_4C] 0 +
call sub_401740  +
add esp 4Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+4Ch+var_48] offset aBuspirateSpifr +
mov [esp+4Ch+var_4C] 0 +
call sub_401740  +
mov [esp+4Ch+var_48] offset aBuspirateSeeBu +
mov [esp+4Ch+var_4C] 0 +
call sub_401740  +
add esp 4Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+4Ch+var_48] offset aBuspirateRawfr +
mov [esp+4Ch+var_4C] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_4128D3  +
mov [esp+4Ch+var_48] offset aBuspirateCpufr +
jmp loc_412AFA  +
mov eax [esp+4Ch+var_34] +
mov [esp+4Ch+var_48] offset aBuspirateDoNot +
mov [esp+4Ch+var_4C] 0 +
mov [esp+4Ch+var_44] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_4128D3  +
mov [esp+4Ch+var_48] offset aBuspirateReset +
mov [esp+4Ch+var_4C] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_4128D3  +
mov [esp+4Ch+var_48] offset aBuspirateSeria +
mov [esp+4Ch+var_4C] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_4128D3  +
***
jmp sub_412BC0  +
***
sub esp 1Ch +
lea eax [esp+1Ch+arg_C] +
mov [esp+1Ch+var_10] eax +
mov eax [esp+1Ch+arg_8] +
mov [esp+1Ch+var_14] eax +
mov eax [esp+1Ch+arg_4] +
mov [esp+1Ch+var_18] eax +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_1C] eax +
call j__vsnprintf  +
add esp 1Ch +
retn   +
***
sub esp 18h +
mov [esp+18h+var_18] eax +
call strlen  +
cmp byte ptr [ebx+eax-1] 3Eh +
jz loc_412C15  +
cmp byte ptr [ebx+eax-2] 3Eh +
setz al  +
add esp 18h +
movzx eax al +
pop ebx  +
retn   +
add esp 18h +
mov eax 1 +
pop ebx  +
retn   +
***
push ebx  +
sub esp 20h +
mov esi [esp+20h+arg_4] +
mov ebx [esp+20h+arg_0] +
mov eax [esi+174h] +
test eax eax +
jz loc_412CB6  +
mov eax [ebx+8C0h] +
lea edi [esp+20h+var_8] +
mov [esp+20h+var_1C] 1 +
mov [esp+20h+var_20] ebx +
call eax  +
mov eax [esi+174h] +
mov [esp+20h+var_1C] edi +
mov [esp+20h+var_8] 0 +
mov [esp+20h+var_20] eax +
call sub_4075B0  +
lea edx [esp+20h+var_4] +
mov eax [ebx+8ECh] +
mov [esp+20h+var_18] edx +
mov [esp+20h+var_1C] edi +
mov [esp+20h+var_20] ebx +
call eax  +
mov eax [esi+70h] +
mov [esp+20h+var_20] eax +
call sub_459150  +
mov eax [ebx+8C8h] +
mov [esp+20h+var_1C] esi +
mov [esp+20h+var_20] ebx +
call eax  +
mov eax [ebx+8C0h] +
mov [esp+20h+var_1C] 0 +
mov [esp+20h+var_20] ebx +
call eax  +
xor eax eax +
add esp 20h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov [esp+20h+var_18] esi +
mov [esp+20h+var_1C] offset aChipEraseInstr +
mov [esp+20h+var_20] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_412CAF  +
***
sub esp 24h +
mov ebx [esp+24h+arg_0] +
mov esi [esp+24h+arg_4] +
mov eax [ebx+480h] +
test eax eax +
jnz loc_412D06  +
mov dword ptr [ebx+480h] 1C200h +
mov eax 1C200h +
mov [esp+24h+var_C] eax +
lea eax [ebx+74h] +
add ebx 89Ch +
mov [esp+24h+var_20] esi +
mov [esp+24h+var_24] eax +
call strcpy  +
mov edx [esp+24h+var_C] +
mov eax off_461140 +
mov eax [eax] +
mov [esp+24h+var_20] edx +
mov edx [esp+24h+var_8] +
mov [esp+24h+var_18] ebx +
mov [esp+24h+var_24] esi +
mov [esp+24h+var_1C] edx +
call eax  +
cmp eax 0FFFFFFFFh +
jz loc_412D5B  +
mov eax off_461140 +
mov eax [eax+14h] +
mov [esp+24h+var_20] 0 +
mov [esp+24h+var_24] ebx +
call eax  +
xor eax eax +
add esp 24h +
pop ebx  +
pop esi  +
retn   +
***
jmp sub_412D70  +
***
sub esp 2Ch +
test byte ptr [eax+0A60h] 1 +
mov byte ptr [esp+2Ch+var_D] 0 +
jnz loc_412DB1  +
mov edx off_461140 +
add eax 89Ch +
lea ecx [esp+2Ch+var_D] +
mov edx [edx+10h] +
mov [esp+2Ch+var_24] 1 +
mov [esp+2Ch+var_28] ecx +
mov [esp+2Ch+var_2C] eax +
call edx  +
test eax eax +
js loc_412DD0  +
movzx eax byte ptr [esp+2Ch+var_D] +
add esp 2Ch +
retn   +
mov [esp+2Ch+var_28] offset aBuspirateInt_0 +
mov [esp+2Ch+var_2C] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_412DAD  +
mov eax 0FFFFFFFFh +
jmp loc_412DAD  +
***
sub esp 1Ch +
mov [esp+1Ch+var_18] 24h +
mov [esp+1Ch+var_1C] 1 +
call calloc  +
mov edx [esp+1Ch+arg_0] +
test eax eax +
mov [edx+0A5Ch] eax +
jz loc_412E10  +
mov dword ptr [eax+14h] 64h +
add esp 1Ch +
retn   +
mov eax ds:dword_486584 +
mov [esp+1Ch+var_18] offset aSBuspirate_ini +
mov [esp+1Ch+var_1C] 0 +
mov [esp+1Ch+var_14] eax +
call sub_401740  +
mov [esp+1Ch+var_1C] 1 +
call exit  +
***
push edi  +
mov ebp eax +
push esi  +
mov ecx 19h +
push ebx  +
xor eax eax +
mov edi edx +
sub esp 2Ch +
mov esi dword_4611C8 +
stos   +
mov ebx edx +
mov eax ebp +
call sub_412D70  +
cmp al 0Dh +
mov [ebx] al +
jz loc_412F30  +
cmp al 0Ah +
jz loc_412E97  +
cmp al 0FFh +
jz loc_412F41  +
mov eax [ebp+0A5Ch] +
add ebx 1 +
cmp ebx offset unk_484C23 +
mov eax [eax+14h] +
mov dword_4611C8 eax +
jb loc_412E61  +
mov dword_4611C8 esi +
mov edx offset byte_484BC0 +
mov ecx [edx] +
add edx 4 +
lea eax [ecx-1010101h] +
not ecx  +
and eax ecx +
and eax 80808080h +
jz loc_412EA2  +
mov ecx eax +
shr ecx 10h +
test eax 8080h +
cmovz eax ecx +
lea ecx [edx+2] +
cmovz edx ecx +
add al al +
sbb edx 3 +
mov eax offset unk_46C798 +
sub edx offset byte_484BC0 +
cmp ds:byte_484BBF[edx] 0Ah +
mov edx offset asc_46C799 +
mov [esp+38h+var_2C] offset byte_484BC0 +
mov [esp+38h+var_34] offset aSBuspirate_rea +
cmovnz eax edx +
mov [esp+38h+var_28] eax +
mov eax ds:dword_486584 +
mov [esp+38h+var_38] 3 +
mov [esp+38h+var_30] eax +
call sub_401740  +
xor eax eax +
mov edx offset byte_484BC0 +
cmp ds:byte_484BC0 0 +
cmovnz eax edx +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp ebx offset unk_484C23 +
jb loc_412E61  +
jmp loc_412E97  +
mov byte ptr [ebx] 0 +
jmp loc_412E97  +
***
call sub_412E40  +
test eax eax +
mov ebx eax +
jz loc_412F66  +
add esp 18h +
mov eax ebx +
pop ebx  +
retn   +
mov eax ds:dword_486584 +
mov [esp+18h+var_14] offset aSBuspirate_r_0 +
mov [esp+18h+var_18] 0 +
mov [esp+18h+var_10] eax +
call sub_401740  +
jmp loc_412F5F  +
***
mov esi eax +
push ebx  +
mov ebx edx +
sub esp 10h +
mov eax ds:dword_486584 +
mov [esp+14h+var_8] edx +
mov [esp+14h+var_10] offset aSBuspirate_s_0 +
mov [esp+14h+var_14] 3 +
mov [esp+14h+var_C] eax +
call sub_401740  +
test byte ptr [esi+0A60h] 1 +
jnz loc_413017  +
mov eax off_461140 +
mov edi [eax+0Ch] +
mov [esp+14h+var_14] ebx +
call strlen  +
mov [esp+14h+var_10] ebx +
mov [esp+14h+var_C] eax +
lea eax [esi+89Ch] +
mov [esp+14h+var_14] eax +
call edi  +
test eax eax +
jz loc_413000  +
jmp loc_413010  +
mov [esp+14h+var_10] ebx +
mov [esp+14h+var_14] eax +
call strcmp  +
test eax eax +
jz loc_413010  +
mov eax esi +
call sub_412F50  +
test eax eax +
jnz loc_412FF0  +
mov eax 0FFFFFFFFh +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov [esp+14h+var_10] offset aBuspirateInt_1 +
mov [esp+14h+var_14] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_413010  +
***
mov edi ecx +
push esi  +
mov esi eax +
push ebx  +
mov ebx edx +
sub esp 1Ch +
mov [esp+24h+var_24] ecx +
mov [esp+24h+var_18] eax +
call strlen  +
mov edx ebx +
xor ebx ebx +
mov ebp eax +
mov eax esi +
call sub_412F90  +
jmp loc_41308D  +
mov [esp+24h+var_1C] ebp +
mov [esp+24h+var_20] edi +
mov [esp+24h+var_24] eax +
call strncmp  +
test eax eax +
mov eax 1 +
cmovz ebx eax +
mov eax esi +
call sub_412BF0  +
test eax eax +
jnz loc_4130B0  +
mov eax [esp+24h+var_18] +
call sub_412F50  +
test eax eax +
mov esi eax +
jnz loc_413068  +
add esp 1Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add esp 1Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
sub esp 34h +
mov ebx [esp+34h+arg_0] +
test byte ptr [ebx+0A60h] 1 +
jz loc_4130D8  +
add esp 34h +
pop ebx  +
pop esi  +
retn   +
mov ecx offset aPowerSuppliesO +
mov edx offset aW_1 +
mov eax ebx +
call sub_413040  +
test eax eax +
jz loc_413157  +
test byte ptr [ebx+0A60h] 20h +
jz loc_4130D2  +
mov eax [ebx+0A5Ch] +
lea esi [esp+34h+var_1D] +
mov eax [eax+10h] +
mov [esp+34h+var_2C] offset aD_6 +
mov [esp+34h+var_30] 19h +
mov [esp+34h+var_34] esi +
mov [esp+34h+var_28] eax +
call sub_412BC0  +
mov ecx offset aFrequencyInKhz +
mov edx offset aG +
mov eax ebx +
call sub_413040  +
test eax eax +
jnz loc_413197  +
mov eax ds:dword_486584 +
mov [esp+34h+var_30] offset aSWarningDidNot +
mov [esp+34h+var_34] 0 +
mov [esp+34h+var_2C] eax +
call sub_401740  +
add esp 34h +
pop ebx  +
pop esi  +
retn   +
mov eax ds:dword_486584 +
mov [esp+34h+var_30] offset aSWarningDidN_0 +
mov [esp+34h+var_34] 0 +
mov [esp+34h+var_2C] eax +
call sub_401740  +
mov eax ds:dword_486584 +
mov [esp+34h+var_30] offset aSWarningTrying +
mov [esp+34h+var_34] 0 +
mov [esp+34h+var_2C] eax +
call sub_401740  +
add esp 34h +
pop ebx  +
pop esi  +
retn   +
mov ecx offset aDutyCycleIn +
mov edx esi +
mov eax ebx +
call sub_413040  +
test eax eax +
jz loc_413134  +
mov ecx offset aPwmActive +
mov edx offset a50 +
mov eax ebx +
call sub_413040  +
test eax eax +
jz loc_413134  +
jmp loc_4130D2  +
***
mov ebx [esp+18h+arg_0] +
movzx eax byte ptr [ebx+0A60h] +
test al 1 +
jnz loc_4131FC  +
test al 20h +
jnz loc_413223  +
mov ecx offset aPowerSupplie_0 +
mov edx offset aW_2 +
mov eax ebx +
call sub_413040  +
test eax eax +
jz loc_413201  +
add esp 18h +
pop ebx  +
retn   +
mov eax ds:dword_486584 +
mov [esp+18h+var_14] offset aSWarningDidN_1 +
mov [esp+18h+var_18] 0 +
mov [esp+18h+var_10] eax +
call sub_401740  +
add esp 18h +
pop ebx  +
retn   +
mov ecx offset aPwmDisabled +
mov edx offset aG +
mov eax ebx +
call sub_413040  +
test eax eax +
jnz loc_4131E7  +
mov eax ds:dword_486584 +
mov [esp+18h+var_14] offset aSWarningDidN_2 +
mov [esp+18h+var_18] 0 +
mov [esp+18h+var_10] eax +
call sub_401740  +
jmp loc_4131E7  +
***
push edi  +
mov edi edx +
push esi  +
push ebx  +
xor ebx ebx +
sub esp 1Ch +
test edx edx +
jnz loc_4132A5  +
jmp loc_4132EC  +
movzx eax byte ptr [ebp+ebx+0] +
mov [esp+28h+var_24] offset a0x02x +
mov [esp+28h+var_28] 3 +
mov [esp+28h+var_20] eax +
call sub_401740  +
cmp esi 3 +
jz loc_413308  +
cmp esi 7 +
jz loc_413320  +
add ebx 1 +
cmp ebx edi +
jz loc_4132E4  +
mov esi ebx +
and esi 7 +
jnz loc_413273  +
mov [esp+28h+var_24] offset asc_46C9DB +
mov [esp+28h+var_28] 3 +
call sub_401740  +
movzx eax byte ptr [ebp+ebx+0] +
add ebx 1 +
mov [esp+28h+var_24] offset a0x02x +
mov [esp+28h+var_28] 3 +
mov [esp+28h+var_20] eax +
call sub_401740  +
cmp ebx edi +
jnz loc_4132A5  +
and ebx 7 +
cmp ebx 7 +
jz loc_413300  +
mov [esp+28h+var_24] offset asc_46C799 +
mov [esp+28h+var_28] 3 +
call sub_401740  +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+28h+var_24] offset asc_46C9E5 +
mov [esp+28h+var_28] 3 +
call sub_401740  +
jmp loc_41329E  +
mov [esp+28h+var_24] offset asc_46C799 +
mov [esp+28h+var_28] 3 +
call sub_401740  +
jmp loc_41329E  +
***
push ebx  +
add eax 89Ch +
sub esp 14h +
mov edx off_461140 +
mov ebx ecx +
mov edx [edx+10h] +
mov [esp+18h+var_10] ecx +
mov [esp+18h+var_14] esi +
mov [esp+18h+var_18] eax +
call edx  +
test eax eax +
js loc_413396  +
mov eax ds:dword_486584 +
mov [esp+18h+var_14] offset aSBuspirate_rec +
mov [esp+18h+var_18] 3 +
mov [esp+18h+var_10] eax +
call sub_401740  +
mov eax esi +
mov edx ebx +
call sub_413260  +
mov eax ebx +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov eax 0FFFFFFFFh +
jmp loc_413390  +
***
push esi  +
mov esi ecx +
push ebx  +
mov ebx edx +
sub esp 10h +
mov eax ds:dword_486584 +
add edi 89Ch +
mov [esp+18h+var_14] offset aSBuspirate_sen +
mov [esp+18h+var_18] 3 +
mov [esp+18h+var_10] eax +
call sub_401740  +
mov edx esi +
mov eax ebx +
call sub_413260  +
mov eax off_461140 +
mov eax [eax+0Ch] +
mov [esp+18h+var_10] esi +
mov [esp+18h+var_14] ebx +
mov [esp+18h+var_18] edi +
call eax  +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
xor edi edi +
mov esi ecx +
push ebx  +
mov ebx eax +
sub esp 20h +
test edx edx +
js loc_413590  +
lea edi [edx-1] +
cmp edi 4 +
ja loc_4135A4  +
mov [esp+24h+var_18] esi +
mov [esp+24h+var_1C] edx +
mov [esp+24h+var_20] offset aSetPinDD +
mov [esp+24h+var_24] 3 +
call sub_401740  +
test esi esi +
jnz loc_413578  +
mov eax [ebx+0A5Ch] +
mov edx 0FFFFFFFEh +
mov ecx edi +
rol edx cl +
and [eax+1Dh] dl +
mov eax [ebx+0A5Ch] +
mov ecx 1 +
lea edx [esp+24h+var_E] +
movzx eax byte ptr [eax+1Dh] +
or eax 0FFFFFF80h +
mov byte ptr [esp+24h+var_E] al +
mov eax ebx +
call sub_4133A0  +
test eax eax +
js loc_4135AD  +
mov eax [ebx+0A5Ch] +
add dword ptr [eax+20h] 1 +
add esp 20h +
pop ebx  +
xor eax eax +
pop esi  +
pop edi  +
retn   +
mov edx [ebx+0A5Ch] +
mov eax 1 +
mov ecx edi +
shl eax cl +
or [edx+1Dh] al +
jmp loc_413540  +
xor eax eax +
test ecx ecx +
setz al  +
and edx 7FFFFFFFh +
mov esi eax +
jmp loc_413502  +
cmp edx 7 +
jz loc_41350E  +
add esp 20h +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
mov eax [esp+arg_0] +
mov edx [esp+arg_4] +
mov ecx [esp+arg_8] +
mov edx [eax+edx*4+17Ch] +
jmp sub_4134F0  +
***
push ebx  +
sub esp 4 +
mov ebx [esp+8+arg_0] +
mov eax [esp+8+arg_4] +
lea esi [ebx+eax*4] +
mov eax ebx +
mov edx [esi+17Ch] +
call sub_4134F0  +
test eax eax +
js loc_413620  +
mov edx [esi+17Ch] +
add esp 4 +
mov eax ebx +
pop ebx  +
xor ecx ecx +
pop esi  +
jmp sub_4134F0  +
add esp 4 +
pop ebx  +
pop esi  +
retn   +
***
mov eax [esp+arg_0] +
xor ecx ecx +
mov edx 7 +
jmp sub_4134F0  +
***
mov eax [esp+4] +
mov ecx 1 +
mov edx 7 +
jmp sub_4134F0  +
***
push esi  +
push ebx  +
sub esp 14Ch +
mov ebx [esp+14Ch+arg_8] +
mov ebp [esp+14Ch+arg_10] +
mov edi [esp+14Ch+arg_14] +
mov eax [ebx+48h] +
mov [esp+14Ch+var_13C] ebp +
mov [esp+14Ch+var_138] edi +
mov [esp+14Ch+var_144] ebx +
mov [esp+14Ch+var_140] eax +
mov [esp+14Ch+var_148] offset aBuspirateBuspi +
mov [esp+14Ch+var_14C] 1 +
call sub_401740  +
mov eax [esp+14Ch+arg_0] +
cmp byte ptr [eax+0A60h] 0 +
js loc_4137E2  +
mov edi offset aFlash_4 +
mov ecx 6 +
mov esi ebx +
cmps   +
jnz loc_4137C0  +
mov eax ebp +
mov ecx 0Ah +
shr eax 19h +
mov [esp+14Ch+var_127] al +
mov eax ebp +
shr eax 11h +
mov [esp+14Ch+var_126] al +
mov eax ebp +
shr eax 9 +
mov [esp+14Ch+var_125] al +
mov eax ebp +
shr eax 1 +
mov [esp+14Ch+var_124] al +
mov eax [esp+14Ch+arg_14] +
lea edx [esp+23h] +
mov [esp+14Ch+var_129] 6 +
mov [esp+14Ch+var_128] 2 +
shr eax 18h +
mov [esp+14Ch+var_123] al +
mov eax [esp+14Ch+arg_14] +
shr eax 10h +
mov [esp+14Ch+var_122] al +
mov eax [esp+14Ch+arg_14] +
shr eax 8 +
mov [esp+14Ch+var_121] al +
movzx eax byte ptr [esp+14Ch+arg_14] +
mov [esp+14Ch+var_120] al +
mov eax [esp+14Ch+arg_0] +
call sub_4133A0  +
mov eax [esp+14Ch+arg_0] +
mov ecx 1 +
lea edx [esp+14Ch+var_11F] +
call sub_413340  +
mov eax [esp+14Ch+arg_0] +
mov ecx 1 +
lea edx [esp+14Ch+var_11F] +
call sub_413340  +
cmp byte ptr [esp+14Ch+var_11F] 1 +
jnz loc_4137C7  +
mov esi [esp+14Ch+arg_14] +
mov eax [esp+14Ch+arg_14] +
mov edi [esp+14Ch+arg_0] +
add esi ebp +
test eax eax +
jz loc_4137AA  +
mov edx [ebx+78h] +
mov ecx 1 +
mov eax edi +
add edx ebp +
add ebp 1 +
call sub_413340  +
cmp ebp esi +
jnz loc_413792  +
mov eax [esp+14Ch+arg_14] +
add esp 14Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax 0FFFFFFFFh +
jmp loc_4137B1  +
mov [esp+14Ch+var_148] offset aBuspiratePaged +
mov [esp+14Ch+var_14C] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_4137B1  +
mov [esp+14Ch+var_148] offset aBuspirateBus_0 +
mov [esp+14Ch+var_14C] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_4137B1  +
***
push edi  +
push esi  +
push ebx  +
call sub_457F80  +
mov ecx 400h +
sub esp eax +
xor eax eax +
lea edi [esp+10h+arg_2A+2] +
mov ebp [esp+10h+arg_1054] +
stos   +
mov eax [esp+10h+arg_104C] +
mov ebx [esp+10h+arg_105C] +
movzx eax byte ptr [eax+0A60h] +
test al 1 +
jz loc_413BBD  +
test al 10h +
jnz loc_413BBD  +
cmp [esp+10h+arg_1058] 400h +
ja loc_413BBD  +
mov edi offset aFlash_4 +
mov cl 6 +
mov esi ebp +
cmps   +
jnz loc_413BBD  +
mov edx [ebp+98h] +
test edx edx +
jz loc_413BCD  +
mov eax [ebp+9Ch] +
test eax eax +
jz loc_413C04  +
mov eax [esp+10h+arg_1060] +
xor edx edx +
div  [esp+10h+arg_1058] +
cmp edx 1 +
mov edx [esp+10h+arg_104C] +
sbb eax 0FFFFFFFFh +
mov edi eax +
mov [esp+10h+arg_10] eax +
mov eax [esp+10h+arg_104C] +
mov eax [eax+8BCh] +
mov [esp+10h+var_C] 0 +
mov [esp+10h+var_10] edx +
call eax  +
test edi edi +
jle loc_413B45  +
mov eax [esp+10h+arg_10] +
mov edx [esp+10h+arg_1060] +
mov [esp+10h+arg_8] ebx +
mov [esp+10h+arg_4] 0 +
sub eax 1 +
mov [esp+10h+arg_18] eax +
imul eax [esp+10h+arg_1058] +
sub edx eax +
mov [esp+10h+arg_14] edx +
mov eax [esp+10h+arg_18] +
cmp [esp+10h+arg_4] eax +
mov eax [esp+10h+arg_14] +
cmovnz eax [esp+10h+arg_1058] +
mov [esp+10h+var_C] 0 +
mov edi eax +
mov [esp+10h+arg_0] eax +
shl eax 2 +
mov [esp+10h+arg_C] eax +
mov [esp+10h+var_8] eax +
lea eax [esp+10h+arg_2A+2] +
mov [esp+10h+var_10] eax +
call memset  +
test edi edi +
jle loc_4139EF  +
lea esi [esp+10h+arg_2A+2] +
mov ebx [esp+10h+arg_8] +
xor edi edi +
jmp loc_4139A2  +
mov eax [ebp+98h] +
mov [esp+10h+var_C] esi +
mov [esp+10h+var_10] eax +
call sub_4075B0  +
mov ecx [ebp+98h] +
mov eax ebx +
shr eax 1Fh +
add eax ebx +
sar eax 1 +
mov [esp+10h+var_8] eax +
mov [esp+10h+var_C] esi +
mov [esp+10h+var_10] ecx +
call sub_407620  +
mov eax [ebp+98h] +
mov ecx [ebp+78h] +
add edi 1 +
movzx ecx byte ptr [ecx+ebx] +
add ebx 1 +
mov [esp+10h+var_C] esi +
add esi 4 +
mov [esp+10h+var_10] eax +
mov [esp+10h+var_8] ecx +
call sub_4076A0  +
cmp edi [esp+10h+arg_0] +
jz loc_4139E3  +
test edi 1 +
jz loc_413945  +
mov eax [ebp+9Ch] +
mov [esp+10h+var_C] esi +
mov [esp+10h+var_10] eax +
call sub_4075B0  +
mov ecx [ebp+9Ch] +
mov eax ebx +
shr eax 1Fh +
add eax ebx +
sar eax 1 +
mov [esp+10h+var_8] eax +
mov [esp+10h+var_C] esi +
mov [esp+10h+var_10] ecx +
call sub_407620  +
mov eax [ebp+9Ch] +
jmp loc_41397C  +
mov eax [esp+10h+arg_0] +
mov edx [esp+10h+arg_8] +
lea ebx [eax+edx-1] +
mov eax [esp+10h+arg_104C] +
mov ecx 1 +
lea edx [esp+3Eh] +
mov byte ptr [esp+10h+arg_2A] 5 +
call sub_4133A0  +
mov edx [esp+10h+arg_0] +
mov ecx 1 +
mov eax edx +
add eax 3Fh +
test edx edx +
cmovns eax edx +
sar eax 6 +
mov byte ptr [esp+10h+arg_2A] al +
mov eax [esp+10h+arg_104C] +
lea edx [esp+10h+arg_2A] +
call sub_4133A0  +
mov edi [esp+10h+arg_C] +
mov ecx 1 +
mov eax edi +
mov edx edi +
sar eax 1Fh +
shr eax 18h +
add edx eax +
movzx edx dl +
sub edx eax +
mov eax [esp+10h+arg_104C] +
mov byte ptr [esp+10h+arg_2A] dl +
lea edx [esp+10h+arg_2A] +
call sub_4133A0  +
mov eax [esp+10h+arg_104C] +
mov ecx 1 +
lea edx [esp+10h+arg_2A] +
mov byte ptr [esp+10h+arg_2A] 0 +
call sub_4133A0  +
mov eax [esp+10h+arg_104C] +
mov ecx 1 +
lea edx [esp+10h+arg_2A] +
call sub_4133A0  +
mov eax [esp+10h+arg_104C] +
mov edx [esp+10h+arg_104C] +
mov eax [eax+8C0h] +
mov [esp+10h+var_10] edx +
mov [esp+10h+var_C] 1 +
call eax  +
mov eax [esp+10h+arg_104C] +
mov ecx edi +
lea edx [esp+10h+arg_2A+2] +
call sub_4133A0  +
mov eax [esp+10h+arg_104C] +
mov ecx 1 +
lea edx [esp+10h+arg_2A+1] +
call sub_413340  +
cmp eax 0FFFFFFFFh +
jz loc_413B57  +
cmp byte ptr [esp+10h+arg_2A+1] 1 +
jnz loc_413B57  +
mov eax [esp+10h+arg_104C] +
mov edx [esp+10h+arg_104C] +
mov eax [eax+8C0h] +
mov [esp+10h+var_10] edx +
mov [esp+10h+var_C] 0 +
call eax  +
mov eax [esp+10h+arg_1050] +
mov [esp+10h+var_4] ebx +
mov [esp+10h+var_8] ebp +
mov [esp+10h+var_C] eax +
mov eax [esp+10h+arg_104C] +
mov [esp+10h+var_10] eax +
call sub_404160  +
mov eax [esp+10h+arg_1058] +
add [esp+10h+arg_8] eax +
add [esp+10h+arg_4] 1 +
mov eax [esp+10h+arg_10] +
cmp [esp+10h+arg_4] eax +
jnz loc_4138F8  +
mov eax [esp+10h+arg_1060] +
add esp 104Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+10h+var_C] offset aBuspirateFatal +
mov [esp+10h+var_10] 0 +
call sub_401740  +
mov eax [esp+10h+arg_104C] +
mov edx [esp+10h+arg_104C] +
mov eax [eax+8C0h] +
mov [esp+10h+var_10] edx +
mov [esp+10h+var_C] 0 +
call eax  +
mov eax [esp+10h+arg_104C] +
mov edx [esp+10h+arg_104C] +
mov eax [eax+8BCh] +
mov [esp+10h+var_C] 1 +
mov [esp+10h+var_10] edx +
call eax  +
mov eax 0FFFFFFFFh +
add esp 104Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add esp 104Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+10h+arg_1050] +
mov [esp+10h+var_4] offset aAvr_op_loadpag +
mov [esp+10h] eax +
mov eax ds:dword_486584 +
mov [esp+10h+var_C] offset aSFailureSComma +
mov [esp+10h+var_10] 0 +
mov [esp+10h+var_8] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_413BB2  +
mov eax [esp+10h+arg_1050] +
mov [esp+10h+var_4] offset aAvr_op_loadp_0 +
mov [esp+10h] eax +
jmp loc_413BE0  +
***
push edi  +
push esi  +
mov esi eax +
push ebx  +
mov eax 10h +
sub esp 1Ch +
call sub_457F80  +
sub esp eax +
lea ebx [esp+28h+var_12+1] +
and ebx 0FFFFFFF0h +
test byte ptr [esi+0A60h] 1 +
jz loc_413C76  +
mov edi ecx +
mov eax esi +
mov ecx 1 +
call sub_4133A0  +
mov ecx 1 +
mov edx ebx +
mov eax esi +
call sub_413340  +
movzx eax byte ptr [ebx] +
cmp [edi] al +
setz al  +
movzx eax al +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+28h+var_24] offset aBuspirateInter +
mov [esp+28h+var_28] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_413C6E  +
***
jmp loc_413CA0  +
push esi  +
push ebx  +
sub esp 24h +
mov ebx [esp+30h] +
test byte ptr [ebx+0A60h] 1 +
jz loc_413D40  +
mov edx [ebx+0A5Ch] +
lea ecx [esp+17h] +
mov byte ptr [esp+17h] 1 +
mov eax [edx+18h] +
not eax  +
and eax [edx+8] +
mov [edx+8] eax +
lea edx [esp+16h] +
mov [esp+16h] al +
mov eax ebx +
call sub_413C20  +
test eax eax +
js loc_413D53  +
mov eax [esp+34h] +
mov eax [eax+178h] +
test eax eax +
jz loc_413D5A  +
lea esi [esp+18h] +
mov [esp+4] esi +
mov [esp] eax +
mov dword ptr [esp+18h] 0 +
call sub_4075B0  +
mov eax [ebx+8ECh] +
lea edx [esp+1Ch] +
mov [esp+8] edx +
mov [esp+4] esi +
mov [esp] ebx +
call eax  +
movzx eax byte ptr [esp+19h] +
cmp [esp+1Eh] al +
setz al  +
movzx eax al +
lea eax [eax+eax-2] +
add esp 24h +
pop ebx  +
pop esi  +
retn   +
***
mov ecx offset aCsEnabled +
mov edx offset asc_46CBD3 +
mov eax ebx +
call sub_413040  +
jmp loc_413CE3  +
***
mov eax 0FFFFFFFFh +
jmp loc_413D33  +
***
mov eax [esp+34h] +
mov dword ptr [esp+4] offset aProgramEnableI +
mov dword ptr [esp] 0 +
mov [esp+8] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_413D33  +
***
push ebx  +
mov esi eax +
sub esp 24h +
lea edx [esp+28h+var_14+2] +
mov byte ptr [esp+28h+var_14+2] 0 +
call sub_4133A0  +
mov ecx 5 +
mov eax esi +
lea edx [esp+28h+var_14+2] +
call sub_413340  +
test byte ptr [esi+0A60h] 20h +
jnz loc_413E85  +
lea ecx [esp+28h+var_14+1] +
mov eax esi +
lea edx [esp+28h+var_14] +
mov byte ptr [esp+28h+var_14] 40h +
mov byte ptr [esp+28h+var_14+1] 0 +
call sub_413C20  +
cmp eax 1 +
jz loc_413ED0  +
mov ecx 1 +
mov eax esi +
lea edx [esp+28h+var_14+2] +
mov byte ptr [esp+28h+var_14+2] 0Fh +
call sub_4133A0  +
jmp loc_413DF5  +
cmp ebx 0FFFFFFFFh +
jz loc_413E60  +
xor eax eax +
mov ecx 9 +
mov [esp+28h+var_A] ax +
lea edx [esp+28h+var_14+2] +
mov eax esi +
mov [esp+28h+var_14+2] 0 +
mov [esp+28h+var_E] 0 +
call sub_413340  +
mov ebx eax +
lea eax [esp+28h+var_14+2] +
call sub_412BF0  +
test eax eax +
jz loc_413DF0  +
movzx eax byte ptr [esi+0A60h] +
and eax 0FFFFFFFEh +
test al 1 +
mov [esi+0A60h] al +
jnz loc_413E6B  +
mov [esp+28h+var_24] offset aBuspirateIsBac +
mov [esp+28h+var_28] 1 +
call sub_401740  +
add esp 24h +
pop ebx  +
pop esi  +
retn   +
movzx eax byte ptr [esi+0A60h] +
test al 1 +
jz loc_413E3F  +
mov [esp+28h+var_24] offset aBuspirateRes_0 +
mov [esp+28h+var_28] 0 +
call sub_401740  +
add esp 24h +
pop ebx  +
pop esi  +
retn   +
lea ecx [esp+13h] +
mov eax esi +
lea edx [esp+12h] +
mov [esp+28h+var_16] 13h +
mov [esp+28h+var_15] 1 +
call sub_413C20  +
cmp eax 1 +
jz loc_413DB7  +
mov eax ds:dword_486584 +
mov [esp+28h+var_24] offset aSWarningDidN_2 +
mov [esp+28h+var_28] 0 +
mov [esp+28h+var_20] eax +
call sub_401740  +
jmp loc_413DB7  +
mov eax ds:dword_486584 +
mov [esp+28h+var_24] offset aSWarningDidN_3 +
mov [esp+28h+var_28] 0 +
mov [esp+28h+var_20] eax +
call sub_401740  +
jmp loc_413DD9  +
***
push esi  +
push ebx  +
sub esp 7Ch +
mov ebp [esp+7Ch+arg_0] +
mov edx [ebp+0A5Ch] +
mov eax [edx+18h] +
test eax eax +
jnz loc_414295  +
mov dword ptr [edx+18h] 1 +
movzx eax byte ptr [ebp+0A60h] +
mov edx eax +
and edx 2 +
test al 48h +
jz loc_4142F0  +
test dl dl +
jnz loc_414803  +
mov [esp+7Ch+var_78] offset aAttemptingToIn +
lea edi [ebp+89Ch] +
mov [esp+7Ch+var_7C] 0 +
call sub_401740  +
mov ecx 2 +
mov edx offset asc_46CD5D +
mov eax ebp +
call sub_4133A0  +
mov eax off_461140 +
mov eax [eax+14h] +
mov [esp+7Ch+var_78] 0 +
mov [esp+7Ch+var_7C] edi +
call eax  +
movzx eax byte ptr [ebp+0A60h] +
test al 40h +
jnz loc_4142C4  +
mov [esp+7Ch+var_40] offset aSpi +
lea esi [esp+7Ch+var_40] +
mov [esp+7Ch+var_3C] 1 +
mov [esp+7Ch+var_38] offset aSpi1d +
mov [esp+7Ch+var_34] 8Ah +
lea ebx [esp+7Ch+var_20] +
mov ecx 14h +
mov edx ebx +
mov eax ebp +
mov [esp+7Ch+var_20] 0 +
mov [esp+7Ch+var_1C] 0 +
mov [esp+7Ch+var_18] 0 +
mov [esp+7Ch+var_14] 0 +
mov [esp+7Ch+var_10] 0 +
call sub_4133A0  +
mov ecx 5 +
mov edx ebx +
mov eax ebp +
mov [esp+7Ch+var_20] 0 +
mov [esp+7Ch+var_1C] 0 +
mov [esp+7Ch+var_18] 0 +
mov [esp+7Ch+var_14] 0 +
mov [esp+7Ch+var_10] 0 +
call sub_413340  +
mov eax [ebp+0A5Ch] +
mov [esp+7Ch+var_78] offset aBbio1d +
mov [esp+7Ch+var_7C] ebx +
mov [esp+7Ch+var_74] eax +
call sscanf  +
cmp eax 1 +
jnz loc_4144DA  +
mov eax [ebp+0A5Ch] +
mov eax [eax] +
mov [esp+7Ch+var_78] offset aBuspirateBinmo +
mov [esp+7Ch+var_7C] 1 +
mov [esp+7Ch+var_74] eax +
call sub_401740  +
movzx eax byte ptr [ebp+0A60h] +
mov edx eax +
or edx 1 +
test al 20h +
mov [ebp+0A60h] dl +
jnz loc_414520  +
movzx eax byte ptr [esi+4] +
mov ecx 1 +
mov edx ebx +
mov byte ptr [esp+7Ch+var_20] al +
mov eax ebp +
call sub_4133A0  +
mov ecx 4 +
mov edx ebx +
mov eax ebp +
mov [esp+7Ch+var_20] 0 +
mov [esp+7Ch+var_1C] 0 +
mov [esp+7Ch+var_18] 0 +
mov [esp+7Ch+var_14] 0 +
mov [esp+7Ch+var_10] 0 +
call sub_413340  +
mov eax [ebp+0A5Ch] +
add eax 4 +
mov [esp+7Ch+var_74] eax +
mov eax [esi+8] +
mov [esp+7Ch+var_7C] ebx +
mov [esp+7Ch+var_78] eax +
call sscanf  +
cmp eax 1 +
jnz loc_41470A  +
mov eax [ebp+0A5Ch] +
mov eax [eax+4] +
mov [esp+7Ch+var_70] eax +
mov eax [esi] +
mov [esp+7Ch+var_78] offset aBuspirateSVers +
mov [esp+7Ch+var_7C] 1 +
mov [esp+7Ch+var_74] eax +
call sub_401740  +
test byte ptr [ebp+0A60h] 10h +
jnz loc_4143F6  +
mov ecx 5 +
mov edx offset unk_46D203 +
mov eax ebp +
call sub_4133A0  +
mov ecx 1 +
mov edx ebx +
mov eax ebp +
call sub_413340  +
cmp byte ptr [esp+7Ch+var_20] 1 +
jz loc_4146E8  +
or byte ptr [ebp+0A60h] 10h +
mov ecx 1 +
mov edx ebx +
mov eax ebp +
mov dword ptr [ebp+900h] 0 +
mov byte ptr [esp+7Ch+var_20] 1 +
call sub_4133A0  +
mov eax ds:dword_486584 +
mov [esp+7Ch+var_78] offset aSDisablingPage +
mov [esp+7Ch+var_7C] 1 +
mov [esp+7Ch+var_74] eax +
call sub_401740  +
mov eax off_461140 +
mov eax [eax+14h] +
mov [esp+7Ch+var_78] 0 +
mov [esp+7Ch+var_7C] edi +
call eax  +
mov edx [ebp+0A5Ch] +
mov byte ptr [esp+7Ch+var_50] 1 +
mov eax [edx+18h] +
mov ecx eax +
movzx eax al +
or ecx 48h +
or eax 48h +
mov [edx+8] ecx +
lea ecx [esp+7Ch+var_50] +
mov byte ptr [esp+7Ch+var_50+1] al +
lea edx [esp+7Ch+var_50+1] +
mov eax ebp +
call sub_413C20  +
test eax eax +
js loc_4144F9  +
mov [esp+7Ch+var_7C] 0C350h +
call sub_459150  +
mov eax [ebp+0A5Ch] +
lea ecx [esp+2Ah] +
lea edx [esp+2Bh] +
mov [esp+7Ch+var_52] 1 +
mov eax [eax+0Ch] +
or eax 60h +
mov [esp+7Ch+var_51] al +
mov eax ebp +
call sub_413C20  +
test eax eax +
js loc_4144F9  +
movzx eax byte ptr [esi+0Ch] +
lea ecx [esp+28h] +
lea edx [esp+29h] +
mov [esp+7Ch+var_54] 1 +
mov [esp+7Ch+var_53] al +
mov eax ebp +
call sub_413C20  +
test eax eax +
js loc_4144F9  +
cmp byte ptr [ebp+0A60h] 0 +
js loc_414660  +
lea ecx [esp+7Ch+var_50+2] +
mov eax ebp +
lea edx [esp+7Ch+var_50+3] +
mov byte ptr [esp+7Ch+var_50+3] 6 +
mov byte ptr [esp+7Ch+var_50+2] 1 +
call sub_413C20  +
test eax eax +
js loc_4144F9  +
jnz loc_414610  +
mov [esp+7Ch+var_78] offset aAvrExtendedCom +
mov [esp+7Ch+var_7C] 1 +
call sub_401740  +
or byte ptr [ebp+0A60h] 80h +
mov dword ptr [ebp+904h] 0 +
add esp 7Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp eax 1 +
jz loc_414835  +
test byte ptr [ebp+0A60h] 2 +
jz loc_413F42  +
mov [esp+7Ch+var_78] offset aBuspirateRes_1 +
mov [esp+7Ch+var_7C] 0 +
call sub_401740  +
jmp loc_4143C2  +
or eax 0FFFFFF90h +
mov [esp+7Ch+var_30] offset aRawWire +
lea esi [esp+7Ch+var_30] +
mov [esp+7Ch+var_2C] 5 +
mov [esp+7Ch+var_28] offset aRaw1d +
mov [esp+7Ch+var_24] 8Ch +
mov [ebp+0A60h] al +
jmp loc_413FAF  +
test dl dl +
jz loc_413F42  +
mov [esp+7Ch+var_78] offset aAttemptingTo_0 +
mov [esp+7Ch+var_7C] 0 +
call sub_401740  +
mov ecx 2 +
mov edx offset asc_46CF94 +
mov eax ebp +
call sub_4133A0  +
test eax eax +
jnz loc_4145F0  +
mov [esp+7Ch+var_64] 0 +
lea esi [esi+0] +
mov eax ebp +
call sub_412E40  +
test eax eax +
mov ebx eax +
jz loc_4143A5  +
mov edi offset aAreYouSure? +
mov esi eax +
mov ecx 0Dh +
cmps   +
jz loc_4143E0  +
mov edi offset aReset +
mov esi ebx +
mov ecx 5 +
cmps   +
jz loc_4143D0  +
mov eax ebx +
call sub_412BF0  +
test eax eax +
jnz loc_414422  +
mov eax [esp+7Ch+var_64] +
test eax eax +
jz loc_414330  +
mov [esp+7Ch+var_74] ebx +
mov [esp+7Ch+var_78] offset aS_7 +
mov [esp+7Ch+var_7C] 3 +
call sub_401740  +
mov eax ebp +
mov [esp+7Ch+var_64] 1 +
call sub_412E40  +
test eax eax +
mov ebx eax +
jnz loc_41433D  +
mov eax ds:dword_486584 +
mov [esp+7Ch+var_78] offset aSFatalProgramm +
mov [esp+7Ch+var_7C] 0 +
mov [esp+7Ch+var_74] eax +
call sub_401740  +
add esp 7Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+7Ch+var_64] 1 +
jmp loc_414330  +
mov ecx 2 +
mov edx offset aY +
mov eax ebp +
call sub_4133A0  +
jmp loc_414351  +
mov eax ds:dword_486584 +
mov [esp+7Ch+var_78] offset aSPagedFlashWri +
mov [esp+7Ch+var_7C] 1 +
mov [esp+7Ch+var_74] eax +
call sub_401740  +
mov dword ptr [ebp+900h] 0 +
jmp loc_4141A1  +
mov [esp+7Ch+var_78] offset asc_46D00D +
mov [esp+7Ch+var_7C] 3 +
call sub_401740  +
test byte ptr [ebp+0A60h] 1 +
jnz loc_4143C2  +
mov [esp+7Ch+var_78] offset aBuspirateUsing +
mov [esp+7Ch+var_7C] 0 +
call sub_401740  +
mov edx offset aM_0 +
mov eax ebp +
call sub_412F90  +
mov [esp+7Ch+var_64] 0FFFFFFFFh +
jmp loc_41447F  +
mov eax ebx +
call sub_412BF0  +
test eax eax +
jnz loc_414734  +
mov eax ebp +
call sub_412F50  +
test eax eax +
mov ebx eax +
jz loc_4146C6  +
cmp [esp+7Ch+var_64] 0FFFFFFFFh +
jnz loc_414470  +
lea eax [esp+7Ch+var_20] +
mov [esp+7Ch+var_70] eax +
lea eax [esp+7Ch+var_4C] +
mov [esp+7Ch+var_74] eax +
mov [esp+7Ch+var_78] offset a2d_10s +
mov [esp+7Ch+var_7C] ebx +
call sscanf  +
test eax eax +
jz loc_414470  +
mov edi offset aSpi +
mov ecx 4 +
mov eax [esp+7Ch+var_64] +
lea esi [esp+7Ch+var_20] +
cmps   +
cmovz eax [esp+7Ch+var_4C] +
mov [esp+7Ch+var_64] eax +
jmp loc_414470  +
mov [esp+7Ch+var_74] ebx +
mov [esp+7Ch+var_78] offset aBinaryModeNotC +
mov [esp+7Ch+var_7C] 0 +
call sub_401740  +
mov eax ebp +
call sub_413D80  +
mov eax ds:dword_486584 +
mov [esp+7Ch+var_78] offset aSFailedToStart +
mov [esp+7Ch+var_7C] 0 +
mov [esp+7Ch+var_74] eax +
call sub_401740  +
jmp loc_4142F8  +
mov ecx [ebp+0A5Ch] +
mov eax 3E80h +
cdq   +
idiv  dword ptr [ecx+10h] +
mov [esp+7Ch+var_78] offset aSettingUpPwmFo +
mov [esp+7Ch+var_7C] 1 +
lea edx [eax-1] +
mov eax edx +
shr ax 1 +
mov [esp+7Ch+var_60] edx +
mov word ptr [esp+7Ch+var_64] ax +
call sub_401740  +
mov edx [esp+7Ch+var_60] +
mov [esp+7Ch+var_78] offset aPwmSettingsPre +
mov [esp+7Ch+var_7C] 3 +
movzx eax dx +
mov [esp+7Ch+var_70] eax +
movzx eax word ptr [esp+7Ch+var_64] +
mov [esp+7Ch+var_74] eax +
call sub_401740  +
mov edx [esp+7Ch+var_60] +
mov ecx 6 +
mov byte ptr [esp+7Ch+var_20] 12h +
mov byte ptr [esp+7Ch+var_20+1] 0 +
mov eax edx +
shr ax 9 +
mov byte ptr [esp+7Ch+var_20+2] al +
movzx eax byte ptr [esp+7Ch+var_64] +
mov byte ptr [esp+7Ch+var_1C+1] dl +
mov byte ptr [esp+7Ch+var_20+3] al +
mov eax edx +
mov edx ebx +
shr ax 8 +
mov byte ptr [esp+7Ch+var_1C] al +
mov eax ebp +
call sub_4133A0  +
mov ecx 1 +
mov edx ebx +
mov eax ebp +
call sub_413340  +
cmp byte ptr [esp+7Ch+var_20] 1 +
jz loc_41407C  +
mov [esp+7Ch+var_78] offset aCpufreqPwmSetu +
mov [esp+7Ch+var_7C] 0 +
call sub_401740  +
jmp loc_41407C  +
mov [esp+7Ch+var_74] eax +
mov [esp+7Ch+var_78] offset aBuspirateIsNot +
mov [esp+7Ch+var_7C] 0 +
call sub_401740  +
add esp 7Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ecx 1 +
mov edx offset unk_46D202 +
mov eax ebp +
call sub_4133A0  +
mov edx ebx +
mov ecx 3 +
mov eax ebp +
call sub_413340  +
movzx eax byte ptr [esp+7Ch+var_20+1] +
movzx edx byte ptr [esp+7Ch+var_20+2] +
mov [esp+7Ch+var_78] offset aAvrExtendedC_0 +
mov [esp+7Ch+var_7C] 1 +
shl eax 8 +
or eax edx +
mov [esp+7Ch+var_74] eax +
call sub_401740  +
jmp loc_4143C2  +
mov eax ds:dword_486584 +
mov [esp+7Ch+var_78] offset aSPagedFlashRea +
mov [esp+7Ch+var_7C] 1 +
mov [esp+7Ch+var_74] eax +
call sub_401740  +
mov dword ptr [ebp+904h] 0 +
jmp loc_4143C2  +
mov eax ds:dword_486584 +
mov [esp+7Ch+var_78] offset aSSpiModeNumber +
mov [esp+7Ch+var_7C] 0 +
mov [esp+7Ch+var_74] eax +
call sub_401740  +
mov eax ds:dword_486584 +
mov [esp+7Ch+var_78] offset aSTryPowercycli +
mov [esp+7Ch+var_7C] 0 +
mov [esp+7Ch+var_74] eax +
call sub_401740  +
mov eax ds:dword_486584 +
mov [esp+7Ch+var_78] offset aSFailedToSta_0 +
mov [esp+7Ch+var_7C] 0 +
mov [esp+7Ch+var_74] eax +
call sub_401740  +
jmp loc_4143C2  +
mov eax ds:dword_486584 +
mov [esp+7Ch+var_78] offset aSPagedFlashW_0 +
mov [esp+7Ch+var_7C] 0 +
mov [esp+7Ch+var_74] eax +
call sub_401740  +
jmp loc_4141A1  +
mov [esp+7Ch+var_70] ebx +
mov eax [esi] +
mov [esp+7Ch+var_78] offset aSModeNotConfir +
mov [esp+7Ch+var_7C] 0 +
mov [esp+7Ch+var_74] eax +
call sub_401740  +
mov eax ebp +
call sub_413D80  +
jmp loc_4144F9  +
cmp [esp+7Ch+var_64] 0FFFFFFFFh +
jz loc_41468C  +
mov eax [esp+7Ch+var_64] +
lea ebx [esp+7Ch+var_45] +
mov [esp+7Ch+var_74] offset aD_6 +
mov [esp+7Ch+var_78] 5 +
mov [esp+7Ch+var_7C] ebx +
mov [esp+7Ch+var_70] eax +
call sub_412BC0  +
mov edx ebx +
mov eax ebp +
call sub_412F90  +
mov byte ptr [esp+7Ch+var_45] 0 +
jmp loc_4147CA  +
mov [esp+7Ch+var_78] offset aNormalH3_3vLGn +
mov [esp+7Ch+var_7C] eax +
call strstr  +
test eax eax +
jz loc_4147BF  +
lea eax [esp+7Ch+var_4C] +
mov [esp+7Ch+var_74] eax +
mov [esp+7Ch+var_78] offset a2d_ +
mov [esp+7Ch+var_7C] esi +
call sscanf  +
mov eax [esp+7Ch+var_4C] +
mov [esp+7Ch+var_74] offset aD_6 +
mov [esp+7Ch+var_78] 5 +
mov [esp+7Ch+var_7C] ebx +
mov [esp+7Ch+var_70] eax +
call sub_412BC0  +
mov eax esi +
call sub_412BF0  +
test eax eax +
jnz loc_4147DC  +
mov eax ebp +
call sub_412F50  +
test eax eax +
mov esi eax +
jnz loc_414773  +
jmp loc_4146C6  +
mov edi offset aSpi_0 +
mov ecx 4 +
cmps   +
jz loc_41481C  +
cmp byte ptr [esp+7Ch+var_45] 0 +
jnz loc_414763  +
mov edx offset asc_46C799 +
mov eax ebp +
call sub_412F90  +
jmp loc_4147CA  +
mov [esp+7Ch+var_78] offset aBuspirateSpiSp +
mov [esp+7Ch+var_7C] 0 +
call sub_401740  +
jmp loc_4143C2  +
mov [esp+7Ch+var_78] offset aBuspirateIsNow +
mov [esp+7Ch+var_7C] 0 +
call sub_401740  +
jmp loc_4143C2  +
movzx eax byte ptr [ebp+0A60h] +
mov edx eax +
and edx 2 +
jmp loc_413F32  +
***
mov eax [esp+arg_0] +
test byte ptr [eax+0A60h] 1 +
jnz loc_414870  +
mov ecx offset aReset +
mov edx offset asc_46CF94 +
jmp sub_413040  +
mov dword_4611C8 64h +
jmp sub_413D80  +
***
sub esp 34h +
mov ebx [esp+34h+arg_0] +
mov [esp+34h+var_18] 0 +
mov [esp+34h+var_14] 0 +
mov [esp+34h+var_10] 0 +
mov [esp+34h+var_34] ebx +
mov [esp+34h+var_C] 0 +
mov [esp+34h+var_8] 0 +
call sub_43AF50  +
test eax eax +
js loc_414987  +
mov [esp+34h+var_30] offset aAttemptingTo_1 +
lea esi [esp+34h+var_18] +
mov [esp+34h+var_34] 0 +
call sub_401740  +
mov ecx 2 +
mov edx offset asc_46CD5D +
mov eax ebx +
call sub_4133A0  +
mov eax off_461140 +
lea edx [ebx+89Ch] +
mov eax [eax+14h] +
mov [esp+34h+var_34] edx +
mov [esp+34h+var_30] 0 +
call eax  +
mov ecx 14h +
mov edx esi +
mov eax ebx +
call sub_4133A0  +
mov ecx 5 +
mov edx esi +
mov eax ebx +
mov [esp+34h+var_18] 0 +
mov [esp+34h+var_14] 0 +
mov [esp+34h+var_10] 0 +
mov [esp+34h+var_C] 0 +
mov [esp+34h+var_8] 0 +
call sub_413340  +
mov eax [ebx+0A5Ch] +
mov [esp+34h+var_30] offset aBbio1d +
mov [esp+34h+var_34] esi +
mov [esp+34h+var_2C] eax +
call sscanf  +
cmp eax 1 +
jz loc_414990  +
mov [esp+34h+var_2C] esi +
mov [esp+34h+var_30] offset aBinaryModeNotC +
mov [esp+34h+var_34] 0 +
call sub_401740  +
mov eax ebx +
call sub_413D80  +
add esp 34h +
pop ebx  +
pop esi  +
retn   +
mov eax [ebx+0A5Ch] +
mov eax [eax] +
mov [esp+34h+var_30] offset aBuspirateBinmo +
mov [esp+34h+var_34] 0 +
mov [esp+34h+var_2C] eax +
call sub_401740  +
mov eax [ebx+0A5Ch] +
mov edx esi +
or byte ptr [ebx+0A60h] 1 +
mov ecx 1 +
mov byte ptr [eax+1Ch] 12h +
mov eax [ebx+0A5Ch] +
movzx eax byte ptr [eax+1Ch] +
or eax 40h +
mov byte ptr [esp+34h+var_18] al +
mov eax ebx +
call sub_4133A0  +
mov edx esi +
mov ecx 1 +
mov eax ebx +
call sub_413340  +
mov eax [ebx+0A5Ch] +
mov edx esi +
mov ecx 1 +
mov byte ptr [eax+1Dh] 3Fh +
mov eax [ebx+0A5Ch] +
movzx eax byte ptr [eax+1Dh] +
or eax 0FFFFFF80h +
mov byte ptr [esp+34h+var_18] al +
mov eax ebx +
call sub_4133A0  +
mov edx esi +
mov eax ebx +
mov ecx 1 +
call sub_413340  +
add esp 34h +
pop ebx  +
pop esi  +
retn   +
***
push esi  +
push ebx  +
sub esp 5Ch +
mov ebx [esp+5Ch+arg_0] +
mov esi [esp+5Ch+arg_4] +
test byte ptr [ebx+0A60h] 1 +
jnz loc_414B10  +
movzx eax byte ptr [esi+3] +
lea ebp [esp+5Ch+var_2C] +
mov [esp+5Ch+var_44] eax +
movzx eax byte ptr [esi+2] +
mov [esp+5Ch+var_48] eax +
movzx eax byte ptr [esi+1] +
mov [esp+5Ch+var_4C] eax +
movzx eax byte ptr [esi] +
lea esi [esp+5Ch+var_25] +
mov [esp+5Ch+var_5C] esi +
mov [esp+5Ch+var_54] offset a0x02x0x02x0x02 +
mov [esp+5Ch+var_58] 19h +
mov [esp+5Ch+var_50] eax +
call sub_412BC0  +
mov edx esi +
mov eax ebx +
call sub_412F90  +
xor esi esi +
jmp loc_414AA8  +
mov eax edi +
call sub_412BF0  +
test eax eax +
jnz loc_414AF3  +
cmp esi 3 +
jg loc_414AF3  +
mov eax ebx +
call sub_412F50  +
test eax eax +
mov edi eax +
jz loc_414B72  +
lea eax [esp+5Ch+var_30] +
mov [esp+5Ch+var_50] ebp +
mov [esp+5Ch+var_54] eax +
mov [esp+5Ch+var_58] offset aWrite0x2xRead0 +
mov [esp+5Ch+var_5C] edi +
call sscanf  +
cmp eax 2 +
jnz loc_414A98  +
mov eax [esp+5Ch+var_2C] +
mov ecx [esp+5Ch+arg_8] +
mov [ecx+esi] al +
mov eax edi +
add esi 1 +
call sub_412BF0  +
test eax eax +
jz loc_414AA3  +
cmp esi 4 +
jnz loc_414B55  +
mov eax ebx +
call sub_412D70  +
cmp eax 3Eh +
jnz loc_414AF8  +
add esp 5Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
lea ecx [esp+5Ch+var_2C] +
mov eax ebx +
lea edx [esp+5Ch+var_25] +
mov byte ptr [esp+5Ch+var_25] 13h +
mov byte ptr [esp+5Ch+var_2C] 1 +
call sub_413C20  +
test eax eax +
jle loc_414B72  +
mov edx esi +
mov ecx 4 +
mov eax ebx +
call sub_4133A0  +
mov edx [esp+5Ch+arg_8] +
mov eax ebx +
mov ecx 4 +
call sub_413340  +
add esp 5Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ds:dword_486584 +
mov [esp+5Ch+var_58] offset aSErrorSpiHasNo +
mov [esp+5Ch+var_5C] 0 +
mov [esp+5Ch+var_54] eax +
call sub_401740  +
add esp 5Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [esp+arg_0] +
mov ebx [esp+18h+arg_0] +
mov dword ptr [ebx+54h] 50737542h +
mov dword ptr [ebx+58h] 74617269h +
mov dword ptr [ebx+5Ch] 42425F65h +
mov byte ptr [ebx+60h] 0 +
mov [esp+18h+var_18] ebx +
call sub_410960  +
mov dword ptr [ebx+8CCh] offset dword_412780 +
mov dword ptr [ebx+94Ch] offset sub_412DE0 +
mov dword ptr [ebx+950h] offset sub_4127F0 +
mov dword ptr [ebx+8F8h] offset sub_412CE0 +
mov dword ptr [ebx+8FCh] offset sub_412790 +
mov dword ptr [ebx+8D0h] offset sub_414880 +
mov dword ptr [ebx+8D4h] offset sub_414850 +
mov dword ptr [ebx+8C8h] offset sub_43ABD0 +
mov dword ptr [ebx+8B8h] offset sub_43A4C0 +
mov dword ptr [ebx+8BCh] offset sub_43A4F0 +
mov dword ptr [ebx+8C0h] offset sub_43A520 +
mov dword ptr [ebx+8C4h] offset sub_43A550 +
mov dword ptr [ebx+8E0h] offset sub_43AAE0 +
mov dword ptr [ebx+8E4h] offset sub_43A900 +
mov dword ptr [ebx+8ECh] offset sub_43A580 +
mov dword ptr [ebx+8F0h] offset sub_43A660 +
mov dword ptr [ebx+8D8h] offset loc_413640 +
mov dword ptr [ebx+8DCh] offset sub_413630 +
mov dword ptr [ebx+934h] offset sub_4135C0 +
mov dword ptr [ebx+938h] offset sub_413400 +
mov dword ptr [ebx+93Ch] offset sub_4135E0 +
mov dword ptr [ebx+914h] offset sub_403EA0 +
mov dword ptr [ebx+910h] offset sub_4042F0 +
add esp 18h +
pop ebx  +
retn   +
***
xor eax eax +
retn   +
***
xor eax eax +
retn   +
***
xor eax eax +
retn   +
***
xor eax eax +
retn   +
***
mov eax 0FFFFFFFFh +
retn   +
***
mov eax [esp+4] +
mov eax [eax+0A5Ch] +
mov [esp+4] eax +
jmp free  +
***
push edi  +
mov ecx 6 +
push esi  +
mov edi offset aFlash_5 +
sub esp 14h +
mov esi [esp+28h] +
cmps   +
jz loc_414E60  +
mov esi [esp+28h] +
mov edi offset aEeprom_3 +
mov ecx 7 +
cmps   +
setnbe al  +
setb dl  +
sub eax edx +
movsx eax al +
test eax eax +
jnz loc_414E67  +
add esp 14h +
pop esi  +
pop edi  +
retn   +
***
mov eax 0FFFFFFFFh +
jmp loc_414E56  +
***
mov eax [esp+28h] +
mov dword ptr [esp+4] offset aSButterfly_pag +
mov dword ptr [esp] 0 +
mov [esp+0Ch] eax +
mov eax ds:dword_486584 +
mov [esp+8] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_414E56  +
***
push esi  +
push ebx  +
sub esp 24h +
mov ebx [esp+30h] +
mov esi [esp+34h] +
lea eax [ebx+74h] +
mov [esp+4] esi +
mov [esp] eax +
call strcpy  +
mov eax [ebx+480h] +
test eax eax +
jnz loc_414ED4  +
mov dword ptr [ebx+480h] 4B00h +
mov ax 4B00h +
mov edx off_461140 +
add ebx 89Ch +
mov [esp+18h] eax +
mov edx [edx] +
mov [esp+4] eax +
mov eax [esp+1Ch] +
mov [esp+0Ch] ebx +
mov [esp] esi +
mov [esp+8] eax +
call edx  +
cmp eax 0FFFFFFFFh +
jz loc_414F17  +
mov eax off_461140 +
mov eax [eax+14h] +
mov dword ptr [esp+4] 0 +
mov [esp] ebx +
call eax  +
xor eax eax +
add esp 24h +
pop ebx  +
pop esi  +
retn   +
***
sub esp 18h +
mov ebx off_461140 +
mov ebx [ebx+10h] +
mov [esp+18h+var_10] ecx +
mov [esp+18h+var_14] edx +
mov [esp+18h+var_18] eax +
call ebx  +
test eax eax +
js loc_414F4A  +
xor eax eax +
add esp 18h +
pop ebx  +
retn   +
mov eax ds:dword_486584 +
mov [esp+18h+var_14] offset aSButterfly_rec +
mov [esp+18h+var_18] 0 +
mov [esp+18h+var_10] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_414F45  +
***
sub esp 14h +
mov ebx [esp+14h+arg_8] +
mov esi [esp+14h+arg_0] +
cmp dword ptr [ebx+44h] 2 +
jle loc_414FD2  +
mov eax off_461140 +
lea edx [esi+89Ch] +
mov eax [eax+0Ch] +
mov [esp+14h+var_14] edx +
mov [esp+14h+var_C] 1 +
mov [esp+14h+var_10] offset aS_8 +
call eax  +
mov edx [ebx+78h] +
mov ecx 3 +
mov eax esi +
call sub_414F20  +
mov eax [ebx+78h] +
movzx edx byte ptr [eax] +
movzx ecx byte ptr [eax+2] +
mov [eax+2] dl +
mov eax [ebx+78h] +
mov [eax] cl +
mov eax 3 +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov eax ds:dword_486584 +
mov [esp+14h+var_10] offset aSMemsizeTooS_1 +
mov [esp+14h+var_14] 0 +
mov [esp+14h+var_C] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_414FCC  +
***
sub esp 28h +
mov ebx edx +
lea edx [esp+28h+var_9] +
call sub_414F20  +
xor eax eax +
cmp byte ptr [esp+28h+var_9] 0Dh +
jnz loc_415022  +
add esp 28h +
pop ebx  +
retn   +
mov eax ds:dword_486584 +
mov [esp+28h+var_1C] ebx +
mov [esp+28h+var_24] offset aSErrorProgra_0 +
mov [esp+28h+var_28] 0 +
mov [esp+28h+var_20] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_41501D  +
***
mov eax edx +
sub esp 28h +
shr eax 10h +
mov [esp+28h+var_B] al +
mov eax edx +
shr eax 8 +
mov [esp+28h+var_A] al +
mov eax off_461140 +
mov [esp+28h+var_9] dl +
lea edx [esp+1Ch] +
mov [esp+28h+var_C] 48h +
mov eax [eax+0Ch] +
mov [esp+28h+var_24] edx +
lea edx [ebx+89Ch] +
mov [esp+28h+var_28] edx +
mov [esp+28h+var_20] 4 +
call eax  +
mov eax ebx +
mov edx offset aSetExtaddr +
call sub_415000  +
add esp 28h +
pop ebx  +
retn   +
***
mov eax edx +
sub esp 28h +
shr eax 8 +
mov [esp+28h+var_A] al +
mov eax off_461140 +
mov [esp+28h+var_9] dl +
lea edx [esp+1Dh] +
mov [esp+28h+var_B] 41h +
mov eax [eax+0Ch] +
mov [esp+28h+var_24] edx +
lea edx [ebx+89Ch] +
mov [esp+28h+var_28] edx +
mov [esp+28h+var_20] 3 +
call eax  +
mov eax ebx +
mov edx offset aSetAddr_0 +
call sub_415000  +
add esp 28h +
pop ebx  +
retn   +
***
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov edi [esp+48h+arg_8] +
mov ebx [esp+48h+arg_10] +
mov ebp [esp+48h+arg_14] +
mov esi [esp+48h+arg_8] +
mov edi [edi+0A0h] +
mov eax [esp+48h+arg_0] +
add ebp ebx +
mov [esp+48h+var_30] edi +
mov edi offset aFlash_5 +
cmps   +
mov eax [eax+0A5Ch] +
mov eax [eax+4] +
jz loc_415154  +
mov esi [esp+48h+arg_8] +
mov edi offset aEeprom_3 +
mov ecx 7 +
cmps   +
jnz loc_415231  +
mov edi [esp+48h+arg_8] +
mov [esp+48h+var_1C] 67h +
movsx edx byte ptr [edi] +
mov edi 1 +
cmp dl 65h +
cmovnz edi eax +
setnz al  +
movzx eax al +
mov [esp+48h+var_2C] eax +
mov [esp+48h+var_48] edx +
add [esp+48h+var_2C] 1 +
call ds:toupper  +
xor edx edx +
mov ecx [esp+48h+var_30] +
mov [esp+48h+var_19] al +
mov eax ebx +
div  [esp+48h+var_2C] +
test ecx ecx +
mov edx eax +
mov eax [esp+48h+arg_0] +
jz loc_415227  +
call sub_415050  +
cmp ebx ebp +
jnb loc_415218  +
mov eax [esp+48h+arg_0] +
add eax 89Ch +
mov [esp+48h+var_30] eax +
jmp loc_41520C  +
mov edi esi +
mov eax edi +
sar eax 8 +
mov [esp+2Dh] al +
mov eax edi +
mov [esp+48h+var_1A] al +
mov eax off_461140 +
lea ecx [esp+48h+var_1C] +
mov eax [eax+0Ch] +
mov [esp+48h+var_44] ecx +
mov ecx [esp+48h+var_30] +
mov [esp+48h+var_40] 4 +
mov [esp+48h+var_48] ecx +
call eax  +
mov eax [esp+48h+arg_8] +
mov ecx esi +
mov edx [eax+78h] +
mov eax [esp+48h+arg_0] +
add edx ebx +
add ebx esi +
call sub_414F20  +
cmp ebp ebx +
jbe loc_415218  +
mov esi ebp +
sub esi ebx +
cmp esi edi +
jb loc_4151C0  +
mov esi edi +
jmp loc_4151C2  +
mov eax [esp+48h+var_2C] +
imul eax ebx +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
call sub_4150B0  +
jmp loc_4151A6  +
mov eax 0FFFFFFFEh +
jmp loc_41521F  +
***
sub esp 14h +
mov eax off_461140 +
mov ebx [esp+14h+arg_0] +
mov eax [eax+0Ch] +
lea esi [ebx+89Ch] +
mov [esp+14h+var_14] esi +
mov [esp+14h+var_C] 1 +
mov [esp+14h+var_10] offset aE_0 +
call eax  +
mov edx offset aExitBootloader +
mov eax ebx +
call sub_415000  +
mov eax off_461140 +
mov eax [eax+8] +
mov [esp+14h+var_14] esi +
call eax  +
mov dword ptr [ebx+89Ch] 0FFFFFFFFh +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
***
mov eax off_461140 +
mov ebx [esp+18h+arg_0] +
mov eax [eax+0Ch] +
lea edx [ebx+89Ch] +
mov [esp+18h+var_18] edx +
mov [esp+18h+var_10] 1 +
mov [esp+18h+var_14] offset aE_1 +
call eax  +
mov eax ebx +
mov edx offset aChipErase_0 +
call sub_415000  +
add esp 18h +
pop ebx  +
sar eax 1Fh +
retn   +
***
mov eax off_461140 +
mov ebx [esp+18h+arg_0] +
mov eax [eax+0Ch] +
lea edx [ebx+89Ch] +
mov [esp+18h+var_18] edx +
mov [esp+18h+var_10] 1 +
mov [esp+18h+var_14] offset asc_46D3B2 +
call eax  +
add esp 18h +
mov eax ebx +
pop ebx  +
mov edx offset aLeaveProgMod_0 +
jmp sub_415000  +
***
push edi  +
mov edi offset aFlash_5 +
push esi  +
push ebx  +
sub esp 2Ch +
mov eax [esp+38h+arg_8] +
mov ebx [esp+38h+arg_10] +
mov esi eax +
mov ebp [eax+0A0h] +
cmps   +
jz loc_415355  +
mov edi offset aEeprom_3 +
mov ecx 7 +
mov esi eax +
cmps   +
jnz loc_4153D2  +
movsx eax byte ptr [eax] +
mov [esp+38h+var_1E] 42h +
mov [esp+38h+var_1D] 0 +
mov [esp+38h+var_38] eax +
call ds:toupper  +
cmp al 45h +
mov [esp+38h+var_1B] al +
jnz loc_415400  +
test ebp ebp +
mov edx [esp+38h+arg_C] +
mov [esp+38h+var_1C] 1 +
mov eax [esp+38h+arg_0] +
mov [esp+38h+var_1A] bl +
jz loc_4153F2  +
call sub_415050  +
mov edx 5 +
mov eax off_461140 +
mov ebx [esp+38h+arg_0] +
mov eax [eax+0Ch] +
mov [esp+38h+var_30] edx +
lea edx [esp+38h+var_1E] +
mov [esp+38h+var_34] edx +
lea edx [ebx+89Ch] +
mov [esp+38h+var_38] edx +
call eax  +
mov eax [esp+38h+arg_0] +
mov edx offset aWriteByte_0 +
call sub_415000  +
sar eax 1Fh +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edi offset aLock_1 +
mov ecx 5 +
mov esi eax +
cmps   +
jnz loc_415400  +
mov [esp+38h+var_1E] 6Ch +
mov edx 2 +
mov [esp+38h+var_1D] bl +
jmp loc_415396  +
call sub_4150B0  +
mov edx 5 +
jmp loc_415396  +
mov eax 0FFFFFFFFh +
jmp loc_4153CA  +
***
push edi  +
mov edi offset aFlash_5 +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebp [esp+38h+arg_10] +
mov eax [esp+38h+arg_14] +
mov esi [esp+38h+arg_8] +
add eax ebp +
mov [esp+38h+var_20] eax +
mov eax [esp+38h+arg_0] +
cmps   +
mov eax [eax+0A5Ch] +
mov ebx [eax+4] +
mov eax [esp+38h+arg_8] +
mov eax [eax+0A0h] +
jz loc_415464  +
mov esi [esp+38h+arg_8] +
mov edi offset aEeprom_3 +
mov ecx 7 +
cmps   +
jnz loc_415596  +
mov edi [esp+38h+arg_8] +
cmp byte ptr [edi] 65h +
jz loc_415566  +
test eax eax +
mov ecx 2 +
lea esi [ebx+4] +
mov eax ebp +
mov edx 0 +
jz loc_415584  +
div  ecx +
mov edx eax +
mov eax [esp+38h+arg_0] +
call sub_415050  +
mov [esp+38h+var_38] esi +
call malloc  +
test eax eax +
mov esi eax +
jz loc_415547  +
mov byte ptr [eax] 42h +
mov eax [esp+38h+arg_8] +
movsx eax byte ptr [eax] +
mov [esp+38h+var_38] eax +
call ds:toupper  +
mov [esi+3] al +
mov eax [esp+38h+var_20] +
cmp ebp eax +
jnb loc_415554  +
mov edx [esp+38h+arg_0] +
lea edi [esi+4] +
mov [esp+38h+var_1C] edi +
mov edi eax +
add edx 89Ch +
mov [esp+38h+var_20] edx +
jmp loc_4154E8  +
add ebp ebx +
cmp edi ebp +
jbe loc_415554  +
mov ecx [esp+38h+arg_8] +
mov eax edi +
sub eax ebp +
cmp ebx eax +
cmova ebx eax +
mov eax [ecx+78h] +
mov [esp+38h+var_30] ebx +
add eax ebp +
mov [esp+38h+var_34] eax +
mov eax [esp+38h+var_1C] +
mov [esp+38h+var_38] eax +
call memcpy  +
mov eax ebx +
mov ecx [esp+38h+var_20] +
shr eax 8 +
mov [esi+1] al +
mov eax off_461140 +
lea edx [ebx+4] +
mov [esi+2] bl +
mov eax [eax+0Ch] +
mov [esp+38h+var_30] edx +
mov [esp+38h+var_38] ecx +
mov [esp+38h+var_34] esi +
call eax  +
mov eax [esp+38h+arg_0] +
mov edx offset aWriteBlock_0 +
call sub_415000  +
test eax eax +
jns loc_4154E2  +
mov eax 0FFFFFFFFh +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+38h+var_38] esi +
call free  +
add esp 2Ch +
mov eax ebp +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test eax eax +
mov esi 5 +
mov ecx 1 +
mov ebx 1 +
mov eax ebp +
mov edx 0 +
jnz loc_415488  +
div  ecx +
mov edx eax +
mov eax [esp+38h+arg_0] +
call sub_4150B0  +
jmp loc_415495  +
mov eax 0FFFFFFFEh +
jmp loc_41554C  +
***
push esi  +
push edi  +
mov edi offset aFlash_5 +
push esi  +
push ebx  +
sub esp 2Ch +
mov edx [esp+38h+arg_8] +
mov ebp [esp+38h+arg_0] +
mov esi edx +
cmps   +
setnbe cl  +
setb al  +
sub ecx eax +
movsx ebx cl +
test ebx ebx +
jz loc_415C80  +
mov ecx 7 +
mov edi offset aEeprom_3 +
mov esi edx +
cmps   +
setnbe cl  +
setb al  +
sub ecx eax +
movsx ebx cl +
test ebx ebx +
jz loc_415D50  +
mov edi offset aLfuse_4 +
mov ecx 6 +
mov esi edx +
cmps   +
jnz loc_415C51  +
mov byte ptr [esp+38h+var_1A] 46h +
mov eax off_461140 +
lea edx [esp+38h+var_1A] +
xor ebx ebx +
mov eax [eax+0Ch] +
mov [esp+38h+var_34] edx +
lea edx [ebp+89Ch] +
mov [esp+38h+var_38] edx +
mov [esp+38h+var_30] 1 +
call eax  +
mov edx [esp+38h+arg_10] +
mov ecx 1 +
mov eax ebp +
call sub_414F20  +
mov eax [esp+38h+arg_10] +
cmp byte ptr [eax] 3Fh +
setz bl  +
neg ebx  +
add esp 2Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edi offset aHfuse_4 +
mov ecx 6 +
mov esi edx +
cmps   +
jz loc_415D14  +
mov edi offset aEfuse_4 +
mov ecx 6 +
mov esi edx +
cmps   +
jnz loc_415DA8  +
mov byte ptr [esp+38h+var_1A] 51h +
jmp loc_415C06  +
mov eax [edx+0A0h] +
mov edx ds:dword_484C48 +
test edx edx +
jnz loc_415D20  +
mov edx [esp+38h+arg_C] +
shr edx 1 +
test eax eax +
mov eax ebp +
jz loc_415DC2  +
call sub_415050  +
mov eax off_461140 +
lea edx [ebp+89Ch] +
mov eax [eax+0Ch] +
mov [esp+38h+var_38] edx +
mov [esp+38h+var_30] 4 +
mov [esp+38h+var_34] offset aG_0 +
call eax  +
mov ecx 2 +
mov eax ebp +
lea edx [esp+38h+var_1A] +
call sub_414F20  +
test byte ptr [esp+38h+arg_C] 1 +
jnz loc_415D98  +
movzx eax byte ptr [esp+38h+var_1A] +
mov edi [esp+38h+arg_10] +
mov ds:dword_484C48 1 +
mov [edi] al +
movzx eax byte ptr [esp+38h+var_1A+1] +
mov ds:byte_484C40 al +
mov eax [esp+38h+arg_C] +
mov ds:dword_484C44 eax +
jmp loc_415C47  +
mov byte ptr [esp+38h+var_1A] 4Eh +
jmp loc_415C06  +
mov esi ds:dword_484C44 +
lea edx [esi+1] +
cmp [esp+38h+arg_C] edx +
jnz loc_415C94  +
movzx eax ds:byte_484C40 +
mov esi [esp+38h+arg_10] +
mov ds:dword_484C48 0 +
mov [esi] al +
jmp loc_415C47  +
mov edx [esp+38h+arg_C] +
mov eax ebp +
call sub_4150B0  +
mov eax off_461140 +
lea edx [ebp+89Ch] +
mov eax [eax+0Ch] +
mov [esp+38h+var_38] edx +
mov [esp+38h+var_30] 4 +
mov [esp+38h+var_34] offset unk_46D607 +
call eax  +
mov edx [esp+38h+arg_10] +
mov eax ebp +
mov ecx 1 +
call sub_414F20  +
add esp 2Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
movzx eax byte ptr [esp+38h+var_1A+1] +
mov edi [esp+38h+arg_10] +
mov [edi] al +
jmp loc_415C47  +
mov edi offset aLock_1 +
mov ecx 5 +
mov esi edx +
cmps   +
jnz loc_415DCC  +
mov byte ptr [esp+38h+var_1A] 72h +
jmp loc_415C06  +
call sub_4150B0  +
jmp loc_415CA9  +
mov ebx 0FFFFFFFFh +
jmp loc_415C47  +
***
sub esp 1Ch +
mov [esp+1Ch+var_1C] 8 +
call malloc  +
mov edx [esp+1Ch+arg_0] +
test eax eax +
mov [edx+0A5Ch] eax +
jz loc_415E0E  +
mov dword ptr [eax] 0 +
mov dword ptr [eax+4] 0 +
add esp 1Ch +
retn   +
mov eax ds:dword_486584 +
mov [esp+1Ch+var_18] offset aSButterfly_set +
mov [esp+1Ch+var_1C] 0 +
mov [esp+1Ch+var_14] eax +
call sub_401740  +
mov [esp+1Ch+var_1C] 1 +
call exit  +
***
mov eax [esp+arg_0] +
mov edx 79h +
mov dword ptr [eax+54h] 74747562h +
mov dword ptr [eax+58h] 6C667265h +
mov [eax+5Ch] dx +
mov dword ptr [eax+8B8h] offset loc_414D70 +
mov dword ptr [eax+8BCh] offset loc_414D80 +
mov dword ptr [eax+8C0h] offset loc_414D90 +
mov dword ptr [eax+8C4h] offset loc_414DA0 +
mov dword ptr [eax+8C8h] offset sub_4155A0 +
mov dword ptr [eax+8CCh] offset dword_414DF0 +
mov dword ptr [eax+8D0h] offset dword_414DE0 +
mov dword ptr [eax+8D4h] offset sub_4152E0 +
mov dword ptr [eax+8D8h] offset dword_414DC0 +
mov dword ptr [eax+8DCh] offset dword_414DD0 +
mov dword ptr [eax+8E0h] offset loc_414DB0 +
mov dword ptr [eax+8E4h] offset sub_4152A0 +
mov dword ptr [eax+8F8h] offset loc_414EA0 +
mov dword ptr [eax+8FCh] offset sub_415240 +
mov dword ptr [eax+914h] offset sub_415BA0 +
mov dword ptr [eax+910h] offset sub_415320 +
mov dword ptr [eax+908h] offset loc_414E20 +
mov dword ptr [eax+900h] offset sub_415410 +
mov dword ptr [eax+904h] offset sub_415100 +
mov dword ptr [eax+918h] offset sub_414F70 +
mov dword ptr [eax+94Ch] offset sub_415DE0 +
mov dword ptr [eax+950h] offset loc_414E00 +
mov byte ptr [eax+0A60h] 0 +
retn   +
***
mov ebx [esp+4+arg_0] +
mov [esp+4+var_4] ebx +
call sub_415E40  +
mov dword ptr [ebx+54h] 74747562h +
mov dword ptr [ebx+58h] 6C667265h +
mov dword ptr [ebx+5Ch] 6B6D5F79h +
mov byte ptr [ebx+60h] 0 +
mov byte ptr [ebx+0A60h] 1 +
add esp 4 +
pop ebx  +
retn   +
***
retn   +
***
sub esp 1Ch +
mov eax ds:dword_486584 +
mov [esp+1Ch+var_18] offset aSChipEraseNotS +
mov [esp+1Ch+var_1C] 0 +
mov [esp+1Ch+var_14] eax +
call sub_401740  +
xor eax eax +
add esp 1Ch +
retn   +
***
mov eax [esp+arg_0] +
mov eax [eax+0A5Ch] +
mov [esp+arg_0] eax +
jmp free  +
***
push esi  +
push ebx  +
sub esp 4Ch +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_4C] eax +
call sub_406F20  +
mov [esp+4Ch+var_20] 0 +
test eax eax +
mov ebx eax +
jnz loc_416086  +
jmp loc_4160DB  +
lea eax [esp+4Ch+var_10] +
mov [esp+4Ch+var_38] eax +
lea eax [esp+4Ch+var_14] +
mov [esp+4Ch+var_3C] eax +
lea eax [esp+4Ch+var_18] +
mov [esp+4Ch+var_40] eax +
lea eax [esp+4Ch+var_1C] +
mov [esp+4Ch+var_44] eax +
mov [esp+4Ch+var_48] offset aJtagchainUUUU +
mov [esp+4Ch+var_4C] ebp +
call sscanf  +
cmp eax 4 +
jz loc_4160E7  +
mov eax ds:dword_486584 +
mov [esp+4Ch+var_40] ebp +
mov [esp+4Ch+var_48] offset aSJtagmkii_pars +
mov [esp+4Ch+var_4C] 0 +
mov [esp+4Ch+var_44] eax +
call sub_401740  +
mov [esp+4Ch+var_20] 0FFFFFFFFh +
mov [esp+4Ch+var_4C] ebx +
call sub_406F40  +
test eax eax +
mov ebx eax +
jz loc_4160DB  +
mov [esp+4Ch+var_4C] ebx +
mov edi offset aJtagchain +
call sub_406F60  +
mov ecx 0Ah +
mov esi eax +
mov ebp eax +
cmps   +
jz loc_416016  +
mov [esp+4Ch+var_40] eax +
mov eax ds:dword_486584 +
mov [esp+4Ch+var_48] offset aSJtagmkii_pa_0 +
mov [esp+4Ch+var_4C] 0 +
mov [esp+4Ch+var_44] eax +
call sub_401740  +
mov [esp+4Ch+var_4C] ebx +
mov [esp+4Ch+var_20] 0FFFFFFFFh +
call sub_406F40  +
test eax eax +
mov ebx eax +
jnz loc_416086  +
mov eax [esp+4Ch+var_20] +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+4Ch+var_10] +
mov [esp+4Ch+var_40] offset byte_4865A0 +
mov [esp+4Ch+var_48] offset aSJtagmkii_pa_1 +
mov [esp+4Ch+var_4C] 2 +
mov [esp+4Ch+var_30] eax +
mov eax [esp+4Ch+var_14] +
mov [esp+4Ch+var_34] eax +
mov eax [esp+4Ch+var_18] +
mov [esp+4Ch+var_38] eax +
mov eax [esp+4Ch+var_1C] +
mov [esp+4Ch+var_3C] eax +
mov eax ds:dword_486584 +
mov [esp+4Ch+var_44] eax +
call sub_401740  +
mov eax [esp+4Ch+arg_0] +
mov edx [eax+0A5Ch] +
mov eax [esp+4Ch+var_1C] +
mov [edx+26h] al +
mov eax [esp+4Ch+arg_0] +
mov edx [eax+0A5Ch] +
mov eax [esp+4Ch+var_18] +
mov [edx+27h] al +
mov eax [esp+4Ch+arg_0] +
mov edx [eax+0A5Ch] +
mov eax [esp+4Ch+var_14] +
mov [edx+28h] al +
mov eax [esp+4Ch+arg_0] +
mov edx [eax+0A5Ch] +
mov eax [esp+4Ch+var_10] +
mov [edx+29h] al +
jmp loc_416078  +
***
mov [esp+18h+var_18] 38h +
call malloc  +
mov edx eax +
mov eax [esp+18h+arg_0] +
test edx edx +
mov [eax+0A5Ch] edx +
jz loc_4161B0  +
mov ecx 0Eh +
xor eax eax +
mov edi edx +
stos   +
add esp 18h +
pop edi  +
retn   +
mov eax ds:dword_486584 +
mov [esp+18h+var_14] offset aSJtagmkii_setu +
mov [esp+18h+var_18] 0 +
mov [esp+18h+var_10] eax +
call sub_401740  +
mov [esp+18h+var_18] 1 +
call exit  +
***
cmp edx 1 +
jbe locret_41626F  +
push edi  +
xor ecx ecx +
push esi  +
mov esi eax +
push ebx  +
xor ebx ebx +
sub esp 10h +
lea edi [edx-1] +
jmp loc_41621C  +
add eax 40h +
add ebx 1 +
mov [esp+1Ch+var_18] eax +
mov [esp+1Ch+var_1C] 20h +
call putc  +
cmp ebx edi +
mov ecx ebx +
jz loc_416264  +
movzx eax byte ptr [esi+ecx+1] +
mov [esp+1Ch+var_18] offset a0x02x_0 +
mov [esp+1Ch+var_1C] 0 +
mov [esp+1Ch+var_14] eax +
call sub_401740  +
mov eax ebx +
and eax 0Fh +
cmp eax 0Fh +
mov eax ds:_iob +
jnz loc_416200  +
add eax 40h +
add ebx 1 +
mov [esp+1Ch+var_18] eax +
mov [esp+1Ch+var_1C] 0Ah +
call putc  +
cmp ebx edi +
mov ecx ebx +
jnz loc_41621C  +
and ebx 0Fh +
jnz loc_416271  +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov eax ds:_iob +
mov [esp+1Ch+var_1C] 0Ah +
add eax 40h +
mov [esp+1Ch+var_18] eax +
call putc  +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
jmp locret_41626F  +
***
jmp sub_4162A0  +
***
push esi  +
mov esi eax +
push ebx  +
sub esp 10h +
cmp ds:dword_486580 3 +
jg loc_4162D0  +
movzx edx byte ptr [esi] +
lea eax [edx-80h] +
cmp al 60h +
ja sub_4166B0  +
movzx eax al +
jmp ds:off_46DA60[eax*4]  +
mov [esp+18h+var_14] offset aRawMessage +
mov [esp+18h+var_18] 4 +
call sub_401740  +
test edi edi +
jz loc_4162B3  +
xor ebx ebx +
xor ecx ecx +
jmp loc_41630C  +
add eax 40h +
add ebx 1 +
mov [esp+18h+var_14] eax +
mov [esp+18h+var_18] 20h +
call putc  +
cmp ebx edi +
mov ecx ebx +
jz loc_416353  +
movzx eax byte ptr [esi+ecx] +
mov [esp+18h+var_14] offset a0x02x_1 +
mov [esp+18h+var_18] 4 +
mov [esp+18h+var_10] eax +
call sub_401740  +
mov eax ebx +
and eax 0Fh +
cmp eax 0Fh +
mov eax ds:_iob +
jnz loc_4162F0  +
add eax 40h +
add ebx 1 +
mov [esp+18h+var_14] eax +
mov [esp+18h+var_18] 0Ah +
call putc  +
cmp ebx edi +
mov ecx ebx +
jnz loc_41630C  +
test edi 0Fh +
jz loc_4162B3  +
mov eax ds:_iob +
mov [esp+18h+var_18] 0Ah +
add eax 40h +
mov [esp+18h+var_14] eax +
call putc  +
jmp loc_4162B3  +
***
mov [esp+arg_0] offset aOk +
mov [esp+arg_0] offset aParameterValue +
mov [esp+arg_0] offset aMemoryContents +
jmp loc_4163BB  +
***
mov [esp+arg_0] offset aSignOnSucceede +
mov [esp+arg_0] offset aSpiDataReturne +
mov [esp+arg_0] offset aFailed_0 +
mov dword ptr [esp+0] 0 +
call sub_401740  +
jmp loc_416394  +
***
mov [esp+arg_0] offset aIllegalParamet +
mov dword ptr [esp+0] 0 +
call sub_401740  +
jmp loc_416394  +
***
mov [esp+arg_0] offset aIllegalMemoryT +
mov dword ptr [esp+0] 0 +
call sub_401740  +
jmp loc_416394  +
***
mov [esp+arg_0] offset aIllegalMemoryR +
mov dword ptr [esp+0] 0 +
call sub_401740  +
jmp loc_416394  +
***
mov [esp+arg_0] offset aIllegalEmulato +
mov [esp+arg_0] offset aIllegalMcuStat +
mov [esp+arg_0] offset aIllegalValue +
mov dword ptr [esp+0] 0 +
call sub_401740  +
jmp loc_416394  +
***
mov [esp+arg_0] offset aIllegalBreakpo +
mov dword ptr [esp+0] 0 +
call sub_401740  +
jmp loc_416394  +
***
mov [esp+arg_0] offset aIllegalJtagId +
mov dword ptr [esp+0] 0 +
call sub_401740  +
jmp loc_416394  +
***
mov [esp+arg_0] offset aIllegalCommand +
mov dword ptr [esp+0] 0 +
call sub_401740  +
jmp loc_416394  +
***
mov [esp+arg_0] offset aNoTargetPower +
mov dword ptr [esp+0] 0 +
call sub_401740  +
jmp loc_416394  +
***
mov [esp+arg_0] offset aIllegalPowerSt +
mov dword ptr [esp+0] 0 +
call sub_401740  +
jmp loc_416394  +
***
mov [esp+arg_0] offset aBreakEvent +
mov dword ptr [esp+0] 0 +
call sub_401740  +
cmp edi 5 +
jbe loc_416445  +
movzx edx byte ptr [esi+2] +
movzx eax byte ptr [esi+3] +
movzx ecx byte ptr [esi+1] +
mov [esp+arg_0] offset aPc0xLxReason +
shl edx 8 +
shl eax 10h +
add edx eax +
movzx eax byte ptr [esi+4] +
add edx ecx +
mov dword ptr [esp+0] 0 +
shl eax 18h +
add eax edx +
mov [esp+arg_4] eax +
call sub_401740  +
movzx eax byte ptr [esi+5] +
cmp al 1 +
jz loc_4167CB  +
jb loc_4167B2  +
cmp al 2 +
jz loc_416799  +
cmp al 3 +
jnz loc_41677C  +
mov [esp+arg_0] offset aDataBreakPdmsb +
mov dword ptr [esp+0] 0 +
call sub_401740  +
jmp loc_416445  +
***
mov [esp+arg_4] edx +
mov [esp+arg_0] offset aJtagXmega +
mov [esp+arg_0] offset aSpi_1 +
mov [esp+arg_0] offset aHvspPp +
mov [esp+arg_0] offset aJtag +
mov [esp+arg_0] offset aDebugwire +
mov dword ptr [esp+0] 0 +
call sub_401740  +
jmp loc_416445  +
***
mov [esp+arg_0] offset aStopped +
mov dword ptr [esp+0] 0 +
call sub_401740  +
jmp loc_416445  +
mov [esp+arg_0] offset aRunning +
mov dword ptr [esp+0] 0 +
call sub_401740  +
jmp loc_416445  +
***
mov [esp+arg_4] eax +
mov [esp+arg_0] offset aUnknown0x02x +
mov dword ptr [esp+0] 0 +
call sub_401740  +
jmp loc_416445  +
mov [esp+arg_0] offset aDataBreakPdsb +
mov dword ptr [esp+0] 0 +
call sub_401740  +
jmp loc_416445  +
mov [esp+arg_0] offset aUnspecified +
mov dword ptr [esp+0] 0 +
call sub_401740  +
jmp loc_416445  +
mov [esp+arg_0] offset aProgramBreak +
mov dword ptr [esp+0] 0 +
call sub_401740  +
jmp loc_416445  +
***
cmp eax 0ACh +
jz loc_416835  +
mov edx 1 +
lea esi [esi+0] +
cmp ds:dword_4704C0[edx*8] eax +
jz loc_416837  +
add edx 1 +
cmp edx 0Eh +
jnz loc_416800  +
sub esp 1Ch +
mov [esp+1Ch+var_14] eax +
mov [esp+1Ch+var_18] offset aUnknownJtagIce +
mov [esp+1Ch+var_1C] offset unk_484C60 +
call sprintf  +
mov eax offset unk_484C60 +
add esp 1Ch +
retn   +
xor edx edx +
mov eax ds:off_4704C4[edx*8] +
retn   +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov eax ds:dword_486584 +
mov esi [esp+1Ch+arg_8] +
mov [esp+1Ch+var_18] offset aSJtagmkii_send +
mov ebp [esp+1Ch+arg_0] +
mov [esp+1Ch+var_1C] 3 +
mov [esp+1Ch+var_14] eax +
mov [esp+1Ch+var_10] esi +
lea edi [esi+0Ah] +
call sub_401740  +
mov [esp+1Ch+var_1C] edi +
call malloc  +
test eax eax +
mov ebx eax +
jz loc_416941  +
mov byte ptr [eax] 1Bh +
mov eax [ebp+0A5Ch] +
add ebp 89Ch +
mov edx [esp+1Ch+arg_4] +
movzx eax word ptr [eax] +
mov [esp+1Ch+var_18] edx +
mov [esp+1Ch+var_14] esi +
mov byte ptr [ebx+7] 0Eh +
mov [ebx+1] al +
shr ax 8 +
mov [ebx+2] al +
mov eax esi +
mov [ebx+3] al +
mov eax esi +
shr eax 8 +
mov [ebx+4] al +
mov eax esi +
shr eax 10h +
mov [ebx+5] al +
mov eax esi +
add esi 8 +
shr eax 18h +
mov [ebx+6] al +
lea eax [ebx+8] +
mov [esp+1Ch+var_1C] eax +
call memcpy  +
mov [esp+1Ch+var_18] esi +
mov [esp+1Ch+var_1C] ebx +
call sub_43BED0  +
mov eax off_461140 +
mov eax [eax+0Ch] +
mov [esp+1Ch+var_14] edi +
mov [esp+1Ch+var_18] ebx +
mov [esp+1Ch+var_1C] ebp +
call eax  +
test eax eax +
mov esi eax +
jnz loc_416915  +
mov [esp+1Ch+var_1C] ebx +
call free  +
add esp 1Ch +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ds:dword_486584 +
mov esi 0FFFFFFFFh +
mov [esp+1Ch+var_18] offset aSJtagmkii_se_0 +
mov [esp+1Ch+var_1C] 0 +
mov [esp+1Ch+var_14] eax +
call sub_401740  +
mov [esp+1Ch+var_1C] ebx +
call free  +
jmp loc_41690B  +
mov eax ds:dword_486584 +
mov esi 0FFFFFFFFh +
mov [esp+1Ch+var_18] offset aSJtagmkii_se_1 +
mov [esp+1Ch+var_1C] 0 +
mov [esp+1Ch+var_14] eax +
call sub_401740  +
jmp loc_41690B  +
***
push esi  +
push ebx  +
sub esp 5Ch +
mov eax [esp+5Ch+arg_0] +
lea ebp [eax+89Ch] +
***
mov eax ds:dword_486584 +
xor esi esi +
xor edi edi +
mov [esp+arg_0] offset aSJtagmkii_recv +
xor ebx ebx +
mov dword ptr [esp+0] 4 +
mov [esp+arg_4] eax +
call sub_401740  +
lea eax [esp+arg_3C] +
mov [esp+arg_0] 0 +
mov [esp+0] eax +
call sub_459290  +
xor edx edx +
mov [esp+arg_22] dx +
mov [esp+arg_1C] 0 +
mov [esp+arg_24] 0 +
mov [esp+arg_28] 0 +
fild  [esp+arg_3C] +
fstp  [esp+arg_14] +
nop   +
***
cmp ebx 8 +
jnz loc_416A90  +
mov eax [esp+arg_28] +
test eax eax +
jz loc_416C86  +
test edi edi +
jz loc_416A2E  +
xor bl bl +
xor esi esi +
lea esi [esi+0] +
mov eax off_461140 +
lea ecx [esp+3Fh] +
add ebx 1 +
mov eax [eax+10h] +
mov [esp+arg_4] 1 +
mov [esp+arg_0] ecx +
mov [esp+0] ebp +
call eax  +
add esi eax +
cmp ebx edi +
jnz loc_416A00  +
test esi esi +
jnz loc_416CAC  +
lea esi [edi+8] +
mov ebx 9 +
lea eax [esp+arg_3C] +
mov [esp+arg_0] 0 +
mov [esp+0] eax +
call sub_459290  +
fild  [esp+arg_3C] +
fsub  [esp+arg_14] +
fld  ds:flt_470530 +
fxch  st(1) +
fucomip st st(1) +
fstp  st +
jbe loc_4169E0  +
mov eax ds:dword_486584 +
mov [esp+arg_0] offset aSJtagmkii_re_0 +
mov dword ptr [esp+0] 0 +
mov [esp+arg_4] eax +
call sub_401740  +
add esp 5Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax off_461140 +
lea edx [esp+3Fh] +
mov eax [eax+10h] +
mov [esp+arg_4] 1 +
mov [esp+arg_0] edx +
mov [esp+0] ebp +
call eax  +
test eax eax +
jnz loc_416CAC  +
cmp ebx 7 +
movzx eax [esp+arg_3B] +
ja loc_416ACE  +
mov edx [esp+arg_1C] +
mov [esp+edx+arg_44] al +
add edx 1 +
mov [esp+arg_1C] edx +
cmp ebx 0Ah +
ja sub_416C50  +
jmp ds:off_46DECC[ebx*4]  +
***
mov edx [esp+arg_24] +
cmp ebx 0Ah +
lea ecx [esi+1] +
mov [edx+esi] al +
jz loc_416D76  +
mov esi ecx +
mov ebx 0Ah +
jmp loc_416A36  +
***
cmp al 0Eh +
shr [esp+arg_22] 8 +
add ebx 1 +
shl eax 8 +
or [esp+arg_22] ax +
lea eax [esp+arg_3C] +
mov [esp+arg_0] 0 +
mov [esp+0] eax +
call sub_459290  +
fild  [esp+arg_3C] +
fsub  [esp+arg_14] +
fld  ds:flt_470530 +
fxch  st(1) +
fucomip st st(1) +
fstp  st +
ja loc_416A60  +
cmp ebx 0Bh +
jnz loc_4169E0  +
mov [esp+arg_0] offset asc_46DDFC +
mov dword ptr [esp+0] 3 +
call sub_401740  +
mov eax [esp+arg_70] +
test edi edi +
mov edx [esp+arg_24] +
mov [eax] edx +
jle loc_416F2E  +
mov eax [esp+arg_6C] +
movzx esi [esp+arg_22] +
mov eax [eax+0A5Ch] +
movzx ebx si +
movzx eax word ptr [eax] +
mov [esp+arg_8] ebx +
mov [esp+arg_0] offset aSJtagmkii_re_1 +
mov dword ptr [esp+0] 3 +
mov [esp+arg_C] eax +
mov eax ds:dword_486584 +
mov [esp+arg_4] eax +
call sub_401740  +
mov eax [esp+arg_6C] +
mov edx [eax+0A5Ch] +
movzx eax word ptr [edx] +
cmp ax si +
jz loc_416DD0  +
cmp [esp+arg_22] 0FFFFh +
jz loc_416CE2  +
mov [esp+arg_C] eax +
mov eax ds:dword_486584 +
mov [esp+arg_8] ebx +
mov [esp+arg_0] offset aSJtagmkii_re_2 +
mov dword ptr [esp+0] 2 +
mov [esp+arg_4] eax +
call sub_401740  +
mov eax [esp+arg_70] +
mov eax [eax] +
mov [esp+0] eax +
call free  +
jmp loc_416981  +
***
shr edi 8 +
cmp al 1Bh +
mov ecx 0 +
cmovz ecx [esp+arg_1C] +
mov eax 1 +
cmovz ebx eax +
mov [esp+arg_1C] ecx +
jmp loc_416A36  +
***
mov eax ds:dword_486584 +
mov [esp+arg_0] offset aSJtagmkii_re_3 +
mov dword ptr [esp+0] 0 +
mov [esp+arg_4] eax +
call sub_401740  +
mov eax [esp+arg_24] +
mov [esp+0] eax +
call free  +
mov eax 0FFFFFFFBh +
add esp 5Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax off_461140 +
mov edx [esp+arg_24] +
mov eax [eax+10h] +
add edx 8 +
mov [esp+arg_4] edi +
mov [esp+arg_0] edx +
mov [esp+0] ebp +
call eax  +
mov esi eax +
test esi esi +
jz loc_416A2E  +
mov eax ds:dword_486584 +
mov [esp+arg_0] offset aSJtagmkii_re_4 +
mov dword ptr [esp+0] 2 +
mov [esp+arg_4] eax +
call sub_401740  +
mov eax [esp+arg_24] +
mov [esp+0] eax +
call free  +
add esp 5Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax ds:dword_486584 +
mov [esp+arg_0] offset aSJtagmkii_re_5 +
mov dword ptr [esp+0] 3 +
mov [esp+arg_4] eax +
call sub_401740  +
jmp loc_416C06  +
***
cmp edi 186A0h +
jbe loc_416D44  +
mov eax ds:dword_486584 +
xor ebx ebx +
mov [esp+arg_C] 186A0h +
mov [esp+arg_8] edi +
mov [esp+arg_0] offset aSJtagmkii_re_6 +
mov [esp+arg_4] eax +
mov dword ptr [esp+0] 0 +
call sub_401740  +
mov [esp+arg_1C] 0 +
jmp loc_416A36  +
lea eax [edi+0Ah] +
mov [esp+0] eax +
call malloc  +
test eax eax +
mov [esp+arg_24] eax +
jz loc_416ECF  +
mov ecx [esp+arg_24] +
mov ebx 8 +
mov eax [esp+arg_44] +
mov edx [esp+arg_48] +
mov [ecx] eax +
mov [ecx+4] edx +
jmp loc_416A36  +
***
lea eax [edi+0Ah] +
mov [esp+arg_0] eax +
mov [esp+0] edx +
call sub_43BE60  +
test eax eax +
jz loc_416EFB  +
cmp ds:dword_486580 8 +
jg loc_416E92  +
lea eax [esp+arg_3C] +
mov [esp+arg_0] 0 +
mov [esp+0] eax +
call sub_459290  +
fild  [esp+arg_3C] +
fsub  [esp+arg_14] +
fld  ds:flt_470530 +
fxch  st(1) +
fucomip st st(1) +
fstp  st +
jbe loc_416B5F  +
jmp loc_416A60  +
***
movzx ecx [esp+arg_22] +
xor eax eax +
add ecx 1 +
cmp cx 0FFFFh +
cmovnz eax ecx +
mov [edx] ax +
mov eax [esp+arg_70] +
mov eax [eax] +
mov [esp+arg_4] edi +
lea edx [eax+8] +
mov [esp+arg_0] edx +
mov [esp+0] eax +
call memmove  +
mov eax edi +
cmp ds:dword_486580 4 +
jnz loc_416C7E  +
mov eax [esp+arg_70] +
mov esi edi +
mov ebp [eax] +
mov eax ds:dword_486584 +
mov [esp+arg_0] offset aSRecv_0 +
mov dword ptr [esp+0] 4 +
mov [esp+arg_4] eax +
call sub_401740  +
jmp loc_416E6B  +
mov [esp+arg_4] ebx +
mov [esp+arg_0] offset aC_0 +
mov dword ptr [esp+0] 4 +
call sub_401740  +
mov [esp+arg_4] ebx +
add ebp 1 +
mov [esp+arg_0] offset a02x_8 +
mov dword ptr [esp+0] 4 +
call sub_401740  +
sub esi 1 +
jz loc_416EB4  +
movzx ebx byte ptr [ebp+0] +
mov [esp+0] ebx +
call ds:isprint  +
test eax eax +
jnz loc_416E33  +
mov [esp+arg_0] offset a__0 +
mov dword ptr [esp+0] 4 +
call sub_401740  +
jmp loc_416E4B  +
***
mov eax ds:dword_486584 +
mov [esp+arg_0] offset aSJtagmkii_re_7 +
mov dword ptr [esp+0] 5 +
mov [esp+arg_4] eax +
call sub_401740  +
jmp loc_416D9A  +
***
mov [esp+arg_0] offset asc_46DDFC +
mov dword ptr [esp+0] 4 +
call sub_401740  +
mov eax edi +
jmp loc_416C7E  +
***
mov eax ds:dword_486584 +
mov ebx 8 +
mov [esp+arg_0] offset aSJtagmkii_re_8 +
mov dword ptr [esp+0] 0 +
mov [esp+arg_4] eax +
call sub_401740  +
add [esp+arg_28] 1 +
jmp loc_416A36  +
***
mov eax ds:dword_486584 +
mov [esp+arg_0] offset aSJtagmkii_re_9 +
mov dword ptr [esp+0] 0 +
mov [esp+arg_4] eax +
call sub_401740  +
mov eax [esp+arg_24] +
mov [esp+0] eax +
call free  +
mov eax 0FFFFFFFCh +
jmp loc_416C7E  +
***
mov eax edi +
jmp loc_416C7E  +
***
mov edi eax +
mov edx 3 +
mov ebp 1 +
***
mov edx 6 +
mov ebp 4 +
jmp loc_416F8D  +
***
mov eax ds:_iob +
mov dword ptr [esp+0] 0Ah +
add eax 40h +
mov [esp+arg_0] eax +
call putc  +
mov eax [esp+arg_20] +
mov edx ebx +
call sub_4162A0  +
jmp loc_417014  +
***
mov edx 4 +
mov ebp 2 +
jmp loc_416F8D  +
***
mov eax ds:dword_486584 +
mov [esp+arg_8] esi +
mov [esp+arg_0] offset aSJtagmkii_se_3 +
mov dword ptr [esp+0] 0 +
mov [esp+arg_4] eax +
call sub_401740  +
add esp 3Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+arg_8] eax +
mov eax [esp+arg_20] +
movzx eax byte ptr [eax] +
mov [esp+arg_0] offset a0x02xDBytesMsg +
mov dword ptr [esp+0] 2 +
mov [esp+arg_4] eax +
call sub_401740  +
jmp loc_417014  +
movzx eax bl +
call sub_4167F0  +
mov [esp+arg_0] offset aSJtagmkii_se_4 +
mov dword ptr [esp+0] 0 +
mov [esp+arg_8] eax +
mov eax ds:dword_486584 +
mov [esp+arg_4] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_41702E  +
***
cmp ds:dword_486580 1 +
jle loc_417131  +
mov eax ds:_iob +
mov dword ptr [esp+0] 0Ah +
add eax 40h +
mov [esp+arg_0] eax +
call putc  +
mov eax ds:dword_486584 +
mov [esp+arg_8] ebx +
mov [esp+arg_0] offset aSJtagmkii_se_5 +
mov dword ptr [esp+0] 0 +
mov [esp+arg_4] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_41702E  +
***
sub esp 2Ch +
fld1   +
fdiv  [esp+2Ch+arg_4] +
fld  ds:flt_470534 +
fxch  st(1) +
fucomi st st(1) +
fstp  st(1) +
jnb loc_4171C0  +
fld  ds:flt_470538 +
fxch  st(1) +
fucomi st st(1) +
fstp  st(1) +
jnb loc_4171B0  +
fld  ds:flt_47053C +
fxch  st(1) +
fucomi st st(1) +
fstp  st(1) +
jnb loc_4171D0  +
fstp  st +
mov byte ptr [esp+2Ch+var_D] 0FFh +
mov eax [esp+2Ch+arg_0] +
lea ecx [esp+2Ch+var_D] +
mov edx 7 +
call sub_416F40  +
add esp 2Ch +
retn   +
fstp  st +
mov byte ptr [esp+2Ch+var_D] 1 +
jmp loc_41719A  +
fstp  st +
mov byte ptr [esp+2Ch+var_D] 0 +
jmp loc_41719A  +
fdivr  ds:flt_470540 +
fnstcw  [esp+2Ch+var_1E] +
movzx eax [esp+2Ch+var_1E] +
mov ah 0Ch +
mov [esp+2Ch+var_20] ax +
fldcw  [esp+2Ch+var_20] +
fistp  [esp+2Ch+var_22] +
fldcw  [esp+2Ch+var_1E] +
movzx eax [esp+2Ch+var_22] +
mov byte ptr [esp+2Ch+var_D] al +
jmp loc_41719A  +
***
push esi  +
push ebx  +
mov ebx eax +
sub esp 20h +
test byte ptr [eax+0A60h] 1 +
lea esi [esp+28h+var_C] +
jnz loc_4172A6  +
mov eax edi +
mov [esp+28h+var_D] al +
mov eax offset aReset_0 +
mov [esp+28h+var_E] 0Bh +
mov [esp+28h+var_1C] eax +
mov eax ds:dword_486584 +
mov [esp+28h+var_24] offset aSJtagmkii_rese +
mov [esp+28h+var_28] 2 +
mov [esp+28h+var_20] eax +
call sub_401740  +
lea eax [esp+28h+var_E] +
mov [esp+28h+var_28] ebx +
mov [esp+28h+var_20] 2 +
mov [esp+28h+var_24] eax +
call sub_416840  +
mov [esp+28h+var_28] ebx +
mov [esp+28h+var_24] esi +
call sub_416970  +
test eax eax +
mov ebx eax +
jle loc_41735B  +
cmp ds:dword_486580 2 +
jg loc_4172D8  +
jz loc_417300  +
mov edx [esp+28h+var_C] +
movzx ebx byte ptr [edx] +
mov [esp+28h+var_28] edx +
call free  +
xor eax eax +
cmp bl 80h +
jnz loc_417328  +
add esp 20h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov ecx esi +
mov edx 9 +
mov byte ptr [esp+28h+var_C] 0 +
call sub_416F40  +
test byte ptr [ebx+0A60h] 1 +
jz loc_41721B  +
mov [esp+28h+var_E] 0Ah +
mov eax offset aStop +
mov [esp+28h+var_D] 1 +
jmp loc_41722B  +
mov eax ds:_iob +
mov [esp+28h+var_28] 0Ah +
add eax 40h +
mov [esp+28h+var_24] eax +
call putc  +
mov eax [esp+28h+var_C] +
mov edx ebx +
call sub_4162A0  +
jmp loc_417285  +
mov [esp+28h+var_1C] eax +
mov eax [esp+28h+var_C] +
movzx eax byte ptr [eax] +
mov [esp+28h+var_24] offset a0x02xDBytesMsg +
mov [esp+28h+var_28] 2 +
mov [esp+28h+var_20] eax +
call sub_401740  +
jmp loc_417285  +
movzx eax bl +
call sub_4167F0  +
mov [esp+28h+var_24] offset aSJtagmkii_r_10 +
mov [esp+28h+var_28] 0 +
mov [esp+28h+var_1C] eax +
mov eax ds:dword_486584 +
mov [esp+28h+var_20] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_41729F  +
cmp ds:dword_486580 1 +
jle loc_41737C  +
mov eax ds:_iob +
mov [esp+28h+var_28] 0Ah +
add eax 40h +
mov [esp+28h+var_24] eax +
call putc  +
mov eax ds:dword_486584 +
mov [esp+28h+var_1C] ebx +
mov [esp+28h+var_24] offset aSJtagmkii_r_11 +
mov [esp+28h+var_28] 0 +
mov [esp+28h+var_20] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_41729F  +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov eax ds:dword_486584 +
mov ebx [esp+2Ch+arg_0] +
mov [esp+2Ch+var_28] offset aSJtagmkii_clos +
mov [esp+2Ch+var_2C] 2 +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
test byte ptr [ebx+0A60h] 2 +
jnz loc_4174B0  +
lea edi [esp+2Ch+var_11] +
lea esi [esp+2Ch+var_11+1] +
mov eax ds:dword_486584 +
mov [esp+2Ch+var_28] offset aSJtagmkii_cl_0 +
mov [esp+2Ch+var_2C] 2 +
mov byte ptr [esp+2Ch+var_11] 0 +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
mov [esp+2Ch+var_24] 1 +
mov [esp+2Ch+var_28] edi +
mov [esp+2Ch+var_2C] ebx +
call sub_416840  +
mov [esp+2Ch+var_28] esi +
mov [esp+2Ch+var_2C] ebx +
call sub_416970  +
test eax eax +
mov esi eax +
jle loc_417560  +
cmp ds:dword_486580 2 +
jg loc_4175B0  +
jz loc_4175D8  +
mov edx [esp+2Ch+var_11+1] +
movzx esi byte ptr [edx] +
mov [esp+2Ch+var_2C] edx +
call free  +
mov eax esi +
cmp al 80h +
jz loc_41748A  +
movzx eax al +
call sub_4167F0  +
mov [esp+2Ch+var_28] offset aSJtagmkii_cl_1 +
mov [esp+2Ch+var_2C] 0 +
mov [esp+2Ch+var_20] eax +
mov eax ds:dword_486584 +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
mov eax off_461140 +
lea edx [ebx+89Ch] +
mov eax [eax+8] +
mov [esp+2Ch+var_2C] edx +
call eax  +
mov dword ptr [ebx+89Ch] 0FFFFFFFFh +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ds:dword_486584 +
lea edi [esp+2Ch+var_11] +
mov [esp+2Ch+var_28] offset aSJtagmkii_cl_2 +
lea esi [esp+2Ch+var_11+1] +
mov [esp+2Ch+var_2C] 2 +
mov byte ptr [esp+2Ch+var_11] 8 +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
mov [esp+2Ch+var_24] 1 +
mov [esp+2Ch+var_28] edi +
mov [esp+2Ch+var_2C] ebx +
call sub_416840  +
mov [esp+2Ch+var_28] esi +
mov [esp+2Ch+var_2C] ebx +
call sub_416970  +
test eax eax +
mov ebp eax +
jle loc_417628  +
cmp ds:dword_486580 2 +
jg loc_417600  +
jz loc_417670  +
mov edx [esp+2Ch+var_11+1] +
movzx ebp byte ptr [edx] +
mov [esp+2Ch+var_2C] edx +
call free  +
mov eax ebp +
cmp al 80h +
jz loc_4173ED  +
movzx eax al +
call sub_4167F0  +
mov [esp+2Ch+var_28] offset aSJtagmkii_cl_3 +
mov [esp+2Ch+var_2C] 0 +
mov [esp+2Ch+var_20] eax +
mov eax ds:dword_486584 +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
jmp loc_4173ED  +
cmp ds:dword_486580 1 +
jle loc_417581  +
mov eax ds:_iob +
mov [esp+2Ch+var_2C] 0Ah +
add eax 40h +
mov [esp+2Ch+var_28] eax +
call putc  +
mov eax ds:dword_486584 +
mov [esp+2Ch+var_20] esi +
mov [esp+2Ch+var_28] offset aSJtagmkii_cl_4 +
mov [esp+2Ch+var_2C] 0 +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ds:_iob +
mov [esp+2Ch+var_2C] 0Ah +
add eax 40h +
mov [esp+2Ch+var_28] eax +
call putc  +
mov eax [esp+2Ch+var_11+1] +
mov edx esi +
call sub_4162A0  +
jmp loc_41744C  +
mov [esp+2Ch+var_20] eax +
mov eax [esp+2Ch+var_11+1] +
movzx eax byte ptr [eax] +
mov [esp+2Ch+var_28] offset a0x02xDBytesMsg +
mov [esp+2Ch+var_2C] 2 +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
jmp loc_41744C  +
mov eax ds:_iob +
mov [esp+2Ch+var_2C] 0Ah +
add eax 40h +
mov [esp+2Ch+var_28] eax +
call putc  +
mov eax [esp+2Ch+var_11+1] +
mov edx ebp +
call sub_4162A0  +
jmp loc_417517  +
cmp ds:dword_486580 1 +
jle loc_417649  +
mov eax ds:_iob +
mov [esp+2Ch+var_2C] 0Ah +
add eax 40h +
mov [esp+2Ch+var_28] eax +
call putc  +
mov eax ds:dword_486584 +
mov [esp+2Ch+var_20] ebp +
mov [esp+2Ch+var_28] offset aSJtagmkii_cl_4 +
mov [esp+2Ch+var_2C] 0 +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
jmp loc_4173ED  +
mov [esp+2Ch+var_20] eax +
mov eax [esp+2Ch+var_11+1] +
movzx eax byte ptr [eax] +
mov [esp+2Ch+var_28] offset a0x02xDBytesMsg +
mov [esp+2Ch+var_2C] 2 +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
jmp loc_417517  +
***
mov edi 1 +
push esi  +
push ebx  +
mov ebx eax +
sub esp 2Ch +
lea ebp [esp+34h+var_1A] +
mov eax ds:dword_486584 +
mov [esp+34h+var_30] offset aSJtagmkii_prog +
mov [esp+34h+var_34] 2 +
mov byte ptr [esp+34h+var_1A] 14h +
mov [esp+34h+var_2C] eax +
call sub_401740  +
mov [esp+34h+var_2C] 1 +
mov [esp+34h+var_30] ebp +
mov [esp+34h+var_34] ebx +
call sub_416840  +
lea eax [esp+34h+var_1A+2] +
mov [esp+34h+var_30] eax +
mov [esp+34h+var_34] ebx +
call sub_416970  +
test eax eax +
mov esi eax +
jle loc_417808  +
cmp ds:dword_486580 2 +
jg loc_4177B8  +
jz loc_4177E0  +
mov eax [esp+34h+var_1A+2] +
movzx esi byte ptr [eax] +
mov [esp+34h+var_34] eax +
call free  +
mov eax esi +
cmp al 80h +
jz loc_417759  +
movzx eax al +
call sub_4167F0  +
mov [esp+34h+var_30] offset aSJtagmkii_pr_0 +
mov [esp+34h+var_34] 0 +
mov [esp+34h+var_28] eax +
mov eax ds:dword_486584 +
mov [esp+34h+var_2C] eax +
call sub_401740  +
mov eax esi +
cmp al 0A9h +
jz loc_417775  +
cmp edi 2 +
jnz loc_4177B0  +
mov eax [ebx+0A5Ch] +
mov dword ptr [eax+1Ch] 1 +
xor eax eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp edi 1 +
jnz loc_417854  +
mov eax ds:dword_486584 +
mov [esp+34h+var_30] offset aSRetryingWithE +
mov [esp+34h+var_34] 0 +
mov byte ptr [esp+34h+var_1A+1] 1 +
mov [esp+34h+var_2C] eax +
call sub_401740  +
lea ecx [esp+34h+var_1A+1] +
mov edx 13h +
mov eax ebx +
call sub_416F40  +
add edi 1 +
jmp loc_4176B2  +
mov eax ds:_iob +
mov [esp+34h+var_34] 0Ah +
add eax 40h +
mov [esp+34h+var_30] eax +
call putc  +
mov eax [esp+34h+var_1A+2] +
mov edx esi +
call sub_4162A0  +
jmp loc_417715  +
mov [esp+34h+var_28] eax +
mov eax [esp+34h+var_1A+2] +
movzx eax byte ptr [eax] +
mov [esp+34h+var_30] offset a0x02xDBytesMsg +
mov [esp+34h+var_34] 2 +
mov [esp+34h+var_2C] eax +
call sub_401740  +
jmp loc_417715  +
cmp ds:dword_486580 1 +
jle loc_417829  +
mov eax ds:_iob +
mov [esp+34h+var_34] 0Ah +
add eax 40h +
mov [esp+34h+var_30] eax +
call putc  +
mov eax ds:dword_486584 +
mov [esp+34h+var_28] esi +
mov [esp+34h+var_30] offset aSJtagmkii_pr_1 +
mov [esp+34h+var_34] 0 +
mov [esp+34h+var_2C] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_41776D  +
mov eax ds:dword_486584 +
mov [esp+34h+var_30] offset aSJtagenFuseDis +
mov [esp+34h+var_34] 0 +
mov [esp+34h+var_2C] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_41776D  +
***
push esi  +
push ebx  +
sub esp 3Ch +
mov eax dword_4611C8 +
mov ebx [esp+3Ch+arg_8] +
mov [esp+3Ch+var_38] offset aSJtagmkii_page +
mov ebp [esp+3Ch+arg_0] +
mov [esp+3Ch+var_3C] 2 +
mov [esp+3Ch+var_20] eax +
mov eax [esp+3Ch+arg_C] +
mov [esp+3Ch+var_30] ebx +
mov [esp+3Ch+var_2C] eax +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov eax [esp+3Ch+arg_4] +
test dword ptr [eax+84h] 2080h +
jz loc_417B8B  +
test byte ptr [ebp+0A60h] 1 +
jnz loc_417BB2  +
mov eax [ebp+0A5Ch] +
mov eax [eax+1Ch] +
test eax eax +
jz loc_417A67  +
mov byte ptr [esp+3Ch+var_12] 34h +
mov edi offset aFlash_6 +
mov ecx 6 +
mov esi ebx +
cmps   +
jz loc_417A00  +
mov edi offset aEeprom_4 +
mov ecx 7 +
mov esi ebx +
cmps   +
jnz loc_417A80  +
mov byte ptr [esp+3Ch+var_12+1] 6 +
mov eax [esp+3Ch+arg_C] +
lea edi [esp+3Ch+var_12] +
add eax [ebx+50h] +
mov ebx 5 +
mov dword_4611C8 64h +
mov edx eax +
shr edx 8 +
mov byte ptr [esp+3Ch+var_12+3] dl +
mov edx eax +
mov byte ptr [esp+3Ch+var_12+2] al +
shr edx 10h +
shr eax 18h +
mov [esp+3Ch+var_E] dl +
mov [esp+3Ch+var_D] al +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_38] offset aSJtagmkii_pa_2 +
mov [esp+3Ch+var_3C] 2 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov [esp+3Ch+var_34] 6 +
mov [esp+3Ch+var_38] edi +
mov [esp+3Ch+var_3C] ebp +
call sub_416840  +
lea eax [esp+3Ch+var_18] +
mov [esp+3Ch+var_38] eax +
mov [esp+3Ch+var_3C] ebp +
call sub_416970  +
test eax eax +
mov esi eax +
jg loc_417AC0  +
cmp ds:dword_486580 1 +
jle loc_4179C8  +
mov eax ds:_iob +
mov [esp+3Ch+var_3C] 0Ah +
add eax 40h +
mov [esp+3Ch+var_38] eax +
call putc  +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_30] esi +
mov [esp+3Ch+var_38] offset aSJtagmkii_pa_3 +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
sub ebx 1 +
jz loc_417A30  +
shl dword_4611C8 1 +
jmp loc_41795C  +
mov eax [esp+3Ch+arg_4] +
test dword ptr [eax+84h] 2080h +
jz loc_417A23  +
mov eax [ebp+0A5Ch] +
mov eax [eax+30h] +
cmp [esp+3Ch+arg_C] eax +
jb loc_417AB4  +
mov byte ptr [esp+3Ch+var_12+1] 5 +
jmp loc_417925  +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_30] esi +
mov [esp+3Ch+var_38] offset aSJtagmkii_pa_4 +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov eax [esp+3Ch+var_20] +
mov dword_4611C8 eax +
mov eax 0FFFFFFFFh +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ebp +
call sub_4176A0  +
test eax eax +
jns loc_4178F3  +
mov eax 0FFFFFFFFh +
jmp loc_417A5F  +
mov edi offset aUsersig +
mov ecx 8 +
mov esi ebx +
cmps   +
jnz loc_417AA0  +
mov byte ptr [esp+3Ch+var_12+1] 7 +
jmp loc_417925  +
mov edi offset aBoot_1 +
mov ecx 5 +
mov esi ebx +
cmps   +
jz loc_417A23  +
mov byte ptr [esp+3Ch+var_12+1] 4 +
jmp loc_417925  +
cmp ds:dword_486580 2 +
jg loc_417AF6  +
jz loc_417B63  +
mov eax [esp+3Ch+var_18] +
movzx edx byte ptr [eax] +
cmp dl 80h +
jnz loc_417B1B  +
mov [esp+3Ch+var_3C] eax +
call free  +
mov eax [esp+3Ch+var_20] +
mov dword_4611C8 eax +
add esp 3Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ds:_iob +
mov [esp+3Ch+var_3C] 0Ah +
add eax 40h +
mov [esp+3Ch+var_38] eax +
call putc  +
mov eax [esp+3Ch+var_18] +
mov edx esi +
call sub_4162A0  +
jmp loc_417ACF  +
movzx eax dl +
call sub_4167F0  +
mov [esp+3Ch+var_38] offset aSJtagmkii_pa_5 +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_30] eax +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov eax [esp+3Ch+var_18] +
mov [esp+3Ch+var_3C] eax +
call free  +
mov eax [esp+3Ch+var_20] +
mov dword_4611C8 eax +
mov eax 0FFFFFFFFh +
jmp loc_417A5F  +
mov [esp+3Ch+var_30] eax +
mov eax [esp+3Ch+var_18] +
movzx eax byte ptr [eax] +
mov [esp+3Ch+var_38] offset a0x02xDBytesMsg +
mov [esp+3Ch+var_3C] 2 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
jmp loc_417ACF  +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_38] offset aSJtagmkii_pa_6 +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_417A5F  +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_38] offset aSJtagmkii_pa_7 +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_417A5F  +
***
push esi  +
mov ebx eax +
sub esp 24h +
mov eax ds:dword_486584 +
mov [esp+24h+var_20] offset aSJtagmkii_pr_2 +
mov [esp+24h+var_24] 2 +
mov byte ptr [esp+24h+var_9] 15h +
mov [esp+24h+var_1C] eax +
call sub_401740  +
lea eax [esp+24h+var_9] +
mov [esp+24h+var_1C] 1 +
mov [esp+24h+var_20] eax +
mov [esp+24h+var_24] ebx +
call sub_416840  +
lea eax [esp+24h+var_9+1] +
mov [esp+24h+var_20] eax +
mov [esp+24h+var_24] ebx +
call sub_416970  +
test eax eax +
mov esi eax +
jle loc_4181F3  +
cmp ds:dword_486580 2 +
jg loc_418170  +
jz loc_418195  +
mov edx [esp+24h+var_9+1] +
movzx esi byte ptr [edx] +
mov [esp+24h+var_24] edx +
call free  +
mov eax esi +
cmp al 80h +
jnz loc_4181C0  +
mov eax [ebx+0A5Ch] +
mov edx 1 +
mov dword ptr [eax+1Ch] 0 +
mov eax ebx +
call sub_417200  +
xor eax eax +
add esp 24h +
pop ebx  +
pop esi  +
retn   +
mov eax ds:_iob +
mov [esp+24h+var_24] 0Ah +
add eax 40h +
mov [esp+24h+var_20] eax +
call putc  +
mov eax [esp+24h+var_9+1] +
mov edx esi +
call sub_4162A0  +
jmp loc_418136  +
mov [esp+24h+var_18] eax +
mov eax [esp+24h+var_9+1] +
movzx eax byte ptr [eax] +
mov [esp+24h+var_20] offset a0x02xDBytesMsg +
mov [esp+24h+var_24] 2 +
mov [esp+24h+var_1C] eax +
call sub_401740  +
jmp loc_418136  +
movzx eax al +
call sub_4167F0  +
mov [esp+24h+var_20] offset aSJtagmkii_pr_3 +
mov [esp+24h+var_24] 0 +
mov [esp+24h+var_18] eax +
mov eax ds:dword_486584 +
mov [esp+24h+var_1C] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_418166  +
cmp ds:dword_486580 1 +
jle loc_418214  +
mov eax ds:_iob +
mov [esp+24h+var_24] 0Ah +
add eax 40h +
mov [esp+24h+var_20] eax +
call putc  +
mov eax ds:dword_486584 +
mov [esp+24h+var_18] esi +
mov [esp+24h+var_20] offset aSJtagmkii_pr_4 +
mov [esp+24h+var_24] 0 +
mov [esp+24h+var_1C] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_418166  +
***
mov ebx [esp+18h+arg_0] +
mov eax [ebx+0A5Ch] +
mov eax [eax+4] +
mov [esp+18h+var_18] eax +
call free  +
mov eax [ebx+0A5Ch] +
mov dword ptr [eax+4] 0 +
mov eax [eax+10h] +
mov [esp+18h+var_18] eax +
call free  +
mov eax [ebx+0A5Ch] +
mov dword ptr [eax+10h] 0 +
mov eax [eax+1Ch] +
test eax eax +
jnz loc_418290  +
add esp 18h +
pop ebx  +
retn   +
add esp 18h +
mov eax ebx +
pop ebx  +
jmp sub_4180D0  +
***
mov edi offset aFlash_6 +
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [esp+44h+arg_10] +
mov ebx [esp+44h+arg_C] +
mov [esp+44h+var_40] offset aSJtagmkii_writ +
mov ebp [esp+44h+arg_0] +
mov [esp+44h+var_44] 2 +
mov [esp+44h+var_30] eax +
mov [esp+44h+var_29] al +
mov eax [esp+44h+arg_8] +
mov [esp+44h+var_34] ebx +
mov [esp+44h+var_24] 0 +
mov [esp+44h+var_38] eax +
mov eax ds:dword_486584 +
mov [esp+44h+var_3C] eax +
call sub_401740  +
mov eax [esp+44h+arg_8] +
mov ecx 6 +
mov esi [esp+44h+arg_8] +
mov byte ptr [esp+44h+var_20] 4 +
add ebx [eax+50h] +
mov eax [esp+44h+arg_4] +
mov eax [eax+84h] +
and eax 2080h +
cmp eax 1 +
sbb edx edx +
and edx 0FFFFFFE0h +
sub edx 40h +
mov byte ptr [esp+44h+var_20+1] dl +
cmps   +
jnz loc_418367  +
test bl 1 +
mov edx 0FFFFFFFFh +
jz loc_41833F  +
movzx edx byte ptr [esp+44h+var_30] +
and ebx 0FFFFFFFEh +
mov [esp+44h+var_29] 0FFh +
mov eax [ebp+0A5Ch] +
mov esi 2 +
mov dword ptr [eax+8] 0FFFFFFFFh +
test byte ptr [ebp+0A60h] 1 +
jz loc_4183A3  +
add esp 3Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi [esp+44h+arg_8] +
mov edi offset aEeprom_4 +
mov ecx 7 +
cmps   +
jnz loc_4184C5  +
cmp eax 1 +
mov esi 1 +
sbb eax eax +
mov edx 0FFFFFFFFh +
and eax 5Eh +
sub eax 3Ch +
mov byte ptr [esp+44h+var_20+1] al +
mov eax [ebp+0A5Ch] +
mov dword ptr [eax+14h] 0FFFFFFFFh +
mov ecx [eax+1Ch] +
test ecx ecx +
jnz loc_418513  +
lea eax [esi+0Ah] +
mov ecx esi +
mov [esp+44h+var_30] eax +
mov eax ebx +
shr eax 8 +
mov [esp+44h+var_19] al +
mov eax ebx +
shr eax 10h +
mov [esp+44h+var_18] al +
movzx eax [esp+44h+var_29] +
lea edi [esp+44h+var_20] +
mov [esp+44h+var_1A] bl +
shr ebx 18h +
mov [esp+44h+var_17] bl +
mov ebx 4 +
mov byte ptr [esp+44h+var_20+2] cl +
mov byte ptr [esp+44h+var_20+3] 0 +
mov [esp+44h+var_1C] 0 +
mov [esp+44h+var_1B] 0 +
mov [esp+44h+var_16] al +
mov [esp+44h+var_15] dl +
mov eax ds:dword_486584 +
mov [esp+44h+var_40] offset aSJtagmkii_wr_0 +
mov [esp+44h+var_44] 2 +
mov [esp+44h+var_3C] eax +
call sub_401740  +
mov eax [esp+44h+var_30] +
mov [esp+44h+var_40] edi +
mov [esp+44h+var_44] ebp +
mov [esp+44h+var_3C] eax +
call sub_416840  +
lea eax [esp+44h+var_24] +
mov [esp+44h+var_40] eax +
mov [esp+44h+var_44] ebp +
call sub_416970  +
test eax eax +
mov esi eax +
jg loc_418562  +
cmp ds:dword_486580 1 +
jle loc_418469  +
mov eax ds:_iob +
mov [esp+44h+var_44] 0Ah +
add eax 40h +
mov [esp+44h+var_40] eax +
call putc  +
mov eax ds:dword_486584 +
mov [esp+44h+var_38] esi +
mov [esp+44h+var_40] offset aSJtagmkii_wr_1 +
mov [esp+44h+var_44] 2 +
mov [esp+44h+var_3C] eax +
call sub_401740  +
sub ebx 1 +
jnz loc_4183FD  +
mov eax ds:dword_486584 +
mov [esp+44h+var_38] esi +
mov [esp+44h+var_40] offset aSJtagmkii_wr_2 +
mov [esp+44h+var_44] 0 +
mov [esp+44h+var_3C] eax +
call sub_401740  +
mov eax [esp+44h+var_24] +
mov [esp+44h+var_44] eax +
call free  +
jmp loc_41835A  +
mov esi [esp+44h+arg_8] +
mov edi offset aLfuse_5 +
mov ecx 6 +
cmps   +
jnz loc_418538  +
xor ebx ebx +
test byte ptr [ebp+0A60h] 1 +
mov byte ptr [esp+44h+var_20+1] 0B2h +
jnz loc_41835A  +
mov eax [ebp+0A5Ch] +
mov eax [eax+1Ch] +
test eax eax +
jz loc_418598  +
mov ecx 1 +
mov edx 0FFFFFFFFh +
mov [esp+44h+var_30] 0Bh +
jmp loc_4183B7  +
mov eax ebp +
mov [esp+44h+var_28] edx +
call sub_4180D0  +
test eax eax +
js loc_41835A  +
lea eax [esi+0Ah] +
mov ecx esi +
mov edx [esp+44h+var_28] +
mov [esp+44h+var_30] eax +
jmp loc_4183B7  +
mov esi [esp+44h+arg_8] +
mov edi offset aHfuse_5 +
mov ecx 6 +
cmps   +
jnz loc_4185C0  +
test byte ptr [ebp+0A60h] 1 +
mov ebx 1 +
mov byte ptr [esp+44h+var_20+1] 0B2h +
jz loc_4184EB  +
jmp loc_41835A  +
cmp ds:dword_486580 2 +
jg loc_418610  +
nop   +
jz loc_418654  +
mov eax [esp+44h+var_24] +
movzx edx byte ptr [eax] +
cmp dl 80h +
jnz loc_41867C  +
mov [esp+44h+var_44] eax +
call free  +
add esp 3Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ebp +
call sub_4176A0  +
mov ecx 1 +
mov edx 0FFFFFFFFh +
mov [esp+44h+var_30] 0Bh +
test eax eax +
jns loc_4183B7  +
jmp loc_41835A  +
mov esi [esp+44h+arg_8] +
mov edi offset aEfuse_5 +
mov ecx 6 +
cmps   +
jz loc_4185EE  +
mov esi [esp+44h+arg_8] +
mov edi offset aFuse_4 +
mov ecx 4 +
cmps   +
jnz loc_418638  +
mov byte ptr [esp+44h+var_20+1] 0B2h +
jmp loc_4184EB  +
test byte ptr [ebp+0A60h] 1 +
mov ebx 2 +
mov byte ptr [esp+44h+var_20+1] 0B2h +
jz loc_4184EB  +
jmp loc_41835A  +
mov eax ds:_iob +
mov [esp+44h+var_44] 0Ah +
add eax 40h +
mov [esp+44h+var_40] eax +
call putc  +
mov eax [esp+44h+var_24] +
mov edx esi +
call sub_4162A0  +
jmp loc_418576  +
mov esi [esp+44h+arg_8] +
mov edi offset aUsersig +
mov ecx 8 +
cmps   +
jnz loc_4186AA  +
mov byte ptr [esp+44h+var_20+1] 0C5h +
jmp loc_4184EB  +
mov [esp+44h+var_38] eax +
mov eax [esp+44h+var_24] +
movzx eax byte ptr [eax] +
mov [esp+44h+var_40] offset a0x02xDBytesMsg +
mov [esp+44h+var_44] 2 +
mov [esp+44h+var_3C] eax +
call sub_401740  +
jmp loc_418576  +
movzx eax dl +
call sub_4167F0  +
mov [esp+44h+var_40] offset aSJtagmkii_wr_3 +
mov [esp+44h+var_44] 0 +
mov [esp+44h+var_38] eax +
mov eax ds:dword_486584 +
mov [esp+44h+var_3C] eax +
call sub_401740  +
jmp loc_4184B4  +
mov esi [esp+44h+arg_8] +
mov edi offset aProdsig +
mov ecx 8 +
cmps   +
jnz loc_4186C6  +
mov byte ptr [esp+44h+var_20+1] 0C6h +
jmp loc_4184EB  +
mov esi [esp+44h+arg_8] +
mov edi offset aLock_2 +
mov ecx 4 +
cmps   +
jnz loc_4186EF  +
test byte ptr [ebp+0A60h] 1 +
mov byte ptr [esp+44h+var_20+1] 0B3h +
jnz loc_41835A  +
jmp loc_4184EB  +
mov esi [esp+44h+arg_8] +
mov edi offset aCalibration +
mov ecx 0Ch +
cmps   +
jnz loc_418718  +
test byte ptr [ebp+0A60h] 1 +
mov byte ptr [esp+44h+var_20+1] 0B5h +
jnz loc_41835A  +
jmp loc_4184EB  +
mov esi [esp+44h+arg_8] +
mov edi offset aSignature_2 +
mov ecx 0Ah +
cmps   +
jnz loc_4184EB  +
test byte ptr [ebp+0A60h] 1 +
mov byte ptr [esp+44h+var_20+1] 0B4h +
jnz loc_41835A  +
jmp loc_4184EB  +
***
push esi  +
push ebx  +
sub esp 6Ch +
mov eax [esp+6Ch+arg_10] +
add eax [esp+6Ch+arg_14] +
mov ebx [esp+6Ch+arg_C] +
mov ebp [esp+6Ch+arg_0] +
mov [esp+6Ch+var_44] eax +
mov eax dword_4611C8 +
mov [esp+6Ch+var_68] offset aSJtagmkii_p_14 +
mov [esp+6Ch+var_5C] ebx +
mov [esp+6Ch+var_6C] 2 +
mov [esp+6Ch+var_28] eax +
mov eax [esp+6Ch+arg_14] +
mov [esp+6Ch+var_58] eax +
mov eax [esp+6Ch+arg_8] +
mov [esp+6Ch+var_60] eax +
mov eax ds:dword_486584 +
mov [esp+6Ch+var_64] eax +
call sub_401740  +
test byte ptr [ebp+0A60h] 1 +
jnz loc_4187D1  +
mov eax [ebp+0A5Ch] +
mov edx [eax+1Ch] +
test edx edx +
jz loc_418BC7  +
test ebx ebx +
jz loc_418A80  +
mov eax 100h +
cmp ebx 100h +
cmova ebx eax +
lea eax [ebx+0Ah] +
mov [esp+6Ch+var_48] ebx +
mov [esp+6Ch+var_4C] eax +
mov eax [esp+6Ch+var_4C] +
mov [esp+6Ch+var_6C] eax +
call malloc  +
test eax eax +
mov ebx eax +
jz loc_418D6F  +
mov esi [esp+6Ch+arg_8] +
mov edi offset aFlash_6 +
mov ecx 6 +
mov byte ptr [eax] 4 +
cmps   +
jnz loc_418AF0  +
mov edx [ebp+0A5Ch] +
mov eax 0FFFFFFB0h +
mov ecx [esp+6Ch+arg_4] +
mov dword ptr [edx+8] 0FFFFFFFFh +
test dword ptr [ecx+84h] 2080h +
jz loc_418858  +
mov eax [edx+30h] +
cmp [esp+6Ch+arg_10] eax +
sbb eax eax +
sub eax 3Fh +
mov [ebx+1] al +
mov eax [esp+6Ch+arg_4] +
test dword ptr [eax+84h] 2080h +
setnz al  +
movzx eax al +
mov [esp+6Ch+var_2C] eax +
mov eax [esp+6Ch+var_44] +
cmp [esp+6Ch+arg_10] eax +
mov dword_4611C8 0C8h +
jnb loc_418C7B  +
mov ecx [esp+6Ch+var_48] +
lea eax [ebx+0Ah] +
mov [esp+6Ch+var_24] eax +
mov eax ecx +
shr eax 8 +
mov [esp+6Ch+var_3C] eax +
mov eax [esp+6Ch+arg_14] +
mov [esp+6Ch+var_1D] cl +
mov [esp+6Ch+var_40] eax +
mov eax [esp+6Ch+var_40] +
mov ecx [esp+6Ch+var_48] +
mov [esp+6Ch+var_68] offset aSJtagmkii_p_15 +
mov [esp+6Ch+var_6C] 3 +
mov esi eax +
cmp ecx eax +
mov eax [esp+6Ch+arg_10] +
cmovbe esi ecx +
mov [esp+6Ch+var_5C] esi +
mov [esp+6Ch+var_60] eax +
mov eax ds:dword_486584 +
mov [esp+6Ch+var_64] eax +
call sub_401740  +
mov eax [esp+6Ch+var_2C] +
test eax eax +
jz loc_418927  +
mov ecx [esp+6Ch+arg_4] +
mov eax 0FFFFFFB0h +
test dword ptr [ecx+84h] 2080h +
jz loc_418924  +
mov eax [ebp+0A5Ch] +
mov eax [eax+30h] +
cmp [esp+6Ch+arg_10] eax +
sbb eax eax +
sub eax 3Fh +
mov [ebx+1] al +
movzx eax [esp+6Ch+var_1D] +
mov byte ptr [ebx+4] 0 +
mov byte ptr [ebx+5] 0 +
mov [ebx+2] al +
movzx eax byte ptr [esp+6Ch+var_3C] +
mov [ebx+3] al +
mov eax [ebp+0A5Ch] +
cmp dword ptr [eax+34h] 6FFh +
jbe loc_418AD4  +
mov ecx [esp+6Ch+arg_4] +
test dword ptr [ecx+84h] 2080h +
jz loc_418AD4  +
mov edx [eax+30h] +
mov eax [esp+6Ch+arg_10] +
sub eax edx +
cmp edx [esp+6Ch+arg_10] +
cmova eax [esp+6Ch+arg_10] +
mov edx eax +
mov edi [esp+6Ch+var_24] +
shr edx 8 +
mov [ebx+6] al +
mov [ebx+7] dl +
mov edx eax +
shr eax 18h +
mov [ebx+9] al +
mov eax [esp+6Ch+var_48] +
shr edx 10h +
mov [ebx+8] dl +
mov [esp+6Ch+var_68] 0FFh +
mov [esp+6Ch+var_6C] edi +
mov [esp+6Ch+var_64] eax +
call memset  +
mov eax [esp+6Ch+arg_8] +
mov eax [eax+78h] +
add eax [esp+6Ch+arg_10] +
mov [esp+6Ch+var_64] esi +
mov esi 5 +
mov [esp+6Ch+var_6C] edi +
mov [esp+6Ch+var_68] eax +
call memcpy  +
mov eax ds:dword_486584 +
mov [esp+6Ch+var_68] offset aSJtagmkii_p_16 +
mov [esp+6Ch+var_6C] 2 +
mov [esp+6Ch+var_64] eax +
call sub_401740  +
mov eax [esp+6Ch+var_4C] +
mov [esp+6Ch+var_68] ebx +
mov [esp+6Ch+var_6C] ebp +
mov [esp+6Ch+var_64] eax +
call sub_416840  +
lea eax [esp+6Ch+var_10] +
mov [esp+6Ch+var_68] eax +
mov [esp+6Ch+var_6C] ebp +
call sub_416970  +
test eax eax +
mov edi eax +
jg loc_418C30  +
cmp ds:dword_486580 1 +
jle loc_418A4B  +
mov eax ds:_iob +
mov [esp+6Ch+var_6C] 0Ah +
add eax 40h +
mov [esp+6Ch+var_68] eax +
call putc  +
mov eax ds:dword_486584 +
mov [esp+6Ch+var_60] edi +
mov [esp+6Ch+var_68] offset aSJtagmkii_p_17 +
mov [esp+6Ch+var_6C] 0 +
mov [esp+6Ch+var_64] eax +
call sub_401740  +
sub esi 1 +
jz loc_418A95  +
shl dword_4611C8 1 +
jmp loc_4189DF  +
mov [esp+6Ch+var_4C] 10Ah +
mov [esp+6Ch+var_48] 100h +
jmp loc_4187F2  +
mov eax ds:dword_486584 +
mov [esp+6Ch+var_60] edi +
mov [esp+6Ch+var_68] offset aSJtagmkii_p_18 +
mov [esp+6Ch+var_6C] 0 +
mov [esp+6Ch+var_64] eax +
call sub_401740  +
mov [esp+6Ch+var_6C] ebx +
call free  +
mov eax [esp+6Ch+var_28] +
mov dword_4611C8 eax +
mov eax 0FFFFFFFFh +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ecx [esp+6Ch+arg_8] +
mov eax [esp+6Ch+arg_10] +
add eax [ecx+50h] +
jmp loc_418984  +
mov esi [esp+6Ch+arg_8] +
mov edi offset aEeprom_4 +
mov ecx 7 +
cmps   +
jnz loc_418B88  +
test byte ptr [ebp+0A60h] 1 +
jz loc_418BF1  +
mov eax [esp+6Ch+var_44] +
cmp [esp+6Ch+arg_10] eax +
jnb loc_418C9C  +
mov [esp+6Ch+var_4C] ebx +
mov esi [esp+6Ch+arg_4] +
mov ebx [esp+6Ch+arg_8] +
mov edi [esp+6Ch+arg_10] +
jmp loc_418B4F  +
add edi 1 +
cmp [esp+6Ch+var_44] edi +
jbe loc_418C98  +
mov eax [ebx+78h] +
movzx eax byte ptr [eax+edi] +
mov [esp+6Ch+var_60] edi +
mov [esp+6Ch+var_64] ebx +
mov [esp+6Ch+var_68] esi +
mov [esp+6Ch+var_5C] eax +
mov [esp+6Ch+var_6C] ebp +
call sub_4182A0  +
test eax eax +
jns loc_418B42  +
mov ebx [esp+6Ch+var_4C] +
mov [esp+6Ch+var_6C] ebx +
call free  +
mov eax 0FFFFFFFFh +
jmp loc_418ACC  +
mov esi [esp+6Ch+arg_8] +
mov edi offset aUsersig +
mov ecx 8 +
cmps   +
jz loc_418BE0  +
mov esi [esp+6Ch+arg_8] +
mov edi offset aBoot_1 +
mov ecx 5 +
cmps   +
jnz loc_418CB0  +
mov byte ptr [eax+1] 0C1h +
mov [esp+6Ch+var_2C] 0 +
jmp loc_418876  +
mov eax ebp +
call sub_4176A0  +
test eax eax +
jns loc_4187D1  +
mov eax 0FFFFFFFFh +
jmp loc_418ACC  +
mov byte ptr [eax+1] 0C5h +
mov [esp+6Ch+var_2C] 0 +
jmp loc_418876  +
mov eax [esp+6Ch+arg_4] +
mov [esp+6Ch+var_2C] 0 +
mov eax [eax+84h] +
and eax 2080h +
cmp eax 1 +
sbb eax eax +
and eax 0FFFFFF8Fh +
add eax 22h +
mov [ebx+1] al +
mov eax [ebp+0A5Ch] +
mov dword ptr [eax+14h] 0FFFFFFFFh +
jmp loc_418876  +
cmp ds:dword_486580 2 +
jg loc_418CD4  +
jz loc_418D0D  +
mov eax [esp+6Ch+var_10] +
movzx edx byte ptr [eax] +
cmp dl 80h +
jnz loc_418D35  +
mov [esp+6Ch+var_6C] eax +
call free  +
mov eax [esp+6Ch+var_48] +
add [esp+6Ch+arg_10] eax +
sub [esp+6Ch+var_40] eax +
mov eax [esp+6Ch+var_44] +
cmp eax [esp+6Ch+arg_10] +
ja loc_4188B4  +
mov [esp+6Ch+var_6C] ebx +
call free  +
mov eax [esp+6Ch+var_28] +
mov dword_4611C8 eax +
mov eax [esp+6Ch+arg_14] +
jmp loc_418ACC  +
mov ebx [esp+6Ch+var_4C] +
mov [esp+6Ch+var_6C] ebx +
call free  +
mov eax [esp+6Ch+arg_14] +
jmp loc_418ACC  +
mov eax [esp+6Ch+arg_4] +
test dword ptr [eax+84h] 2080h +
jz loc_418CFC  +
mov byte ptr [ebx+1] 0C0h +
mov [esp+6Ch+var_2C] 0 +
jmp loc_418876  +
mov eax ds:_iob +
mov [esp+6Ch+var_6C] 0Ah +
add eax 40h +
mov [esp+6Ch+var_68] eax +
call putc  +
mov eax [esp+6Ch+var_10] +
mov edx edi +
call sub_4162A0  +
jmp loc_418C43  +
mov byte ptr [ebx+1] 0A0h +
mov [esp+6Ch+var_2C] 0 +
jmp loc_418876  +
mov [esp+6Ch+var_60] eax +
mov eax [esp+6Ch+var_10] +
movzx eax byte ptr [eax] +
mov [esp+6Ch+var_68] offset a0x02xDBytesMsg +
mov [esp+6Ch+var_6C] 2 +
mov [esp+6Ch+var_64] eax +
call sub_401740  +
jmp loc_418C43  +
movzx eax dl +
call sub_4167F0  +
mov [esp+6Ch+var_68] offset aSJtagmkii_p_19 +
mov [esp+6Ch+var_6C] 0 +
mov [esp+6Ch+var_60] eax +
mov eax ds:dword_486584 +
mov [esp+6Ch+var_64] eax +
call sub_401740  +
mov eax [esp+6Ch+var_10] +
mov [esp+6Ch+var_6C] eax +
call free  +
jmp loc_418AB6  +
mov eax ds:dword_486584 +
mov [esp+6Ch+var_68] offset aSJtagmkii_p_20 +
mov [esp+6Ch+var_6C] 0 +
mov [esp+6Ch+var_64] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_418ACC  +
***
push ebx  +
sub esp 20h +
mov esi [esp+20h+arg_4] +
mov ebx [esp+20h+arg_0] +
test dword ptr [esi+84h] 2080h +
jnz loc_418E70  +
mov byte ptr [esp+20h+var_6] 13h +
mov edi 1 +
mov eax offset unk_46EBFD +
mov [esp+20h+var_14] eax +
mov eax ds:dword_486584 +
mov [esp+20h+var_1C] offset aSJtagmkii_chip +
mov [esp+20h+var_20] 2 +
mov [esp+20h+var_18] eax +
call sub_401740  +
lea eax [esp+20h+var_6] +
mov [esp+20h+var_18] edi +
mov [esp+20h+var_1C] eax +
mov [esp+20h+var_20] ebx +
call sub_416840  +
lea eax [esp+20h+var_C] +
mov [esp+20h+var_1C] eax +
mov [esp+20h+var_20] ebx +
call sub_416970  +
test eax eax +
mov edi eax +
jle loc_418F20  +
cmp ds:dword_486580 2 +
jg loc_418E91  +
jz loc_418EC0  +
mov edx [esp+20h+var_C] +
movzx edi byte ptr [edx] +
mov [esp+20h+var_20] edx +
call free  +
mov eax edi +
cmp al 80h +
jnz loc_418EE8  +
xor edi edi +
test dword ptr [esi+84h] 2080h +
jnz loc_418E61  +
mov eax [ebx+8C8h] +
mov [esp+20h+var_1C] esi +
mov [esp+20h+var_20] ebx +
call eax  +
add esp 20h +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov byte ptr [esp+20h+var_6] 34h +
mov edi 6 +
mov eax offset aXmega +
mov byte ptr [esp+20h+var_6+1] 0 +
mov [esp+20h+var_6+2] 0 +
jmp loc_418DCD  +
mov eax ds:_iob +
mov [esp+20h+var_20] 0Ah +
add eax 40h +
mov [esp+20h+var_1C] eax +
call putc  +
mov eax [esp+20h+var_C] +
mov edx edi +
call sub_4162A0  +
jmp loc_418E2B  +
mov [esp+20h+var_14] eax +
mov eax [esp+20h+var_C] +
movzx eax byte ptr [eax] +
mov [esp+20h+var_1C] offset a0x02xDBytesMsg +
mov [esp+20h+var_20] 2 +
mov [esp+20h+var_18] eax +
call sub_401740  +
jmp loc_418E2B  +
movzx eax al +
mov edi 0FFFFFFFFh +
call sub_4167F0  +
mov [esp+20h+var_1C] offset aSJtagmkii_ch_0 +
mov [esp+20h+var_20] 0 +
mov [esp+20h+var_14] eax +
mov eax ds:dword_486584 +
mov [esp+20h+var_18] eax +
call sub_401740  +
jmp loc_418E61  +
cmp ds:dword_486580 1 +
jle loc_418F41  +
mov eax ds:_iob +
mov [esp+20h+var_20] 0Ah +
add eax 40h +
mov [esp+20h+var_1C] eax +
call putc  +
mov eax ds:dword_486584 +
mov [esp+20h+var_14] edi +
mov edi 0FFFFFFFFh +
mov [esp+20h+var_1C] offset aSJtagmkii_ch_1 +
mov [esp+20h+var_20] 0 +
mov [esp+20h+var_18] eax +
call sub_401740  +
jmp loc_418E61  +
***
push esi  +
mov eax edx +
push ebx  +
mov esi edx +
sub esp 30h +
shr eax 8 +
mov ebx [esp+38h+arg_0] +
mov [esp+38h+var_E] al +
mov eax edx +
shr eax 10h +
mov [esp+38h+var_F] al +
mov eax edx +
shr eax 18h +
mov [esp+38h+var_10] al +
mov eax ebx +
shr eax 8 +
mov [esp+38h+var_A] al +
mov eax ebx +
shr eax 10h +
mov [esp+38h+var_B] al +
mov eax ebx +
shr eax 18h +
mov [esp+38h+var_C] al +
lea eax [esp+26h] +
mov [esp+38h+var_30] 0Ah +
mov [esp+38h+var_34] eax +
mov [esp+38h+var_38] edi +
mov [esp+38h+var_12] 28h +
mov [esp+38h+var_11] cl +
mov [esp+38h+var_D] dl +
mov [esp+38h+var_9] bl +
call sub_416840  +
test eax eax +
js loc_4190B0  +
lea eax [esp+38h+var_18] +
mov [esp+38h+var_38] edi +
mov [esp+38h+var_34] eax +
call sub_416970  +
test eax eax +
mov edi eax +
jle loc_419060  +
mov eax [esp+38h+var_18] +
cmp byte ptr [eax] 80h +
jnz loc_419060  +
mov edx ds:dword_486580 +
xor eax eax +
test edx edx +
jz loc_419054  +
cmp edx 1 +
jle loc_41902D  +
mov eax ds:_iob +
mov [esp+38h+var_38] 0Ah +
add eax 40h +
mov [esp+38h+var_34] eax +
call putc  +
mov eax ds:dword_486584 +
mov [esp+38h+var_28] ebx +
mov [esp+38h+var_2C] esi +
mov [esp+38h+var_34] offset aSJtagmkii_wr_4 +
mov [esp+38h+var_30] eax +
mov [esp+38h+var_38] 0 +
call sub_401740  +
xor eax eax +
add esp 30h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
cmp ds:dword_486580 1 +
jle loc_419081  +
mov eax ds:_iob +
mov [esp+38h+var_38] 0Ah +
add eax 40h +
mov [esp+38h+var_34] eax +
call putc  +
mov eax ds:dword_486584 +
mov [esp+38h+var_2C] edi +
mov [esp+38h+var_34] offset aSJtagmkii_wr_5 +
mov [esp+38h+var_38] 0 +
mov [esp+38h+var_30] eax +
call sub_401740  +
add esp 30h +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov eax 0FFFFFFFFh +
jmp loc_419054  +
***
push esi  +
mov esi eax +
push ebx  +
mov eax edx +
sub esp 3Ch +
mov ebx edx +
mov ebp dword_4611C8 +
shr eax 8 +
mov [esp+40h+var_12] al +
mov eax edx +
shr eax 10h +
mov [esp+40h+var_13] al +
lea edi [esp+2Ah] +
mov eax edx +
shr eax 18h +
mov [esp+40h+var_38] 6 +
mov [esp+40h+var_3C] edi +
mov [esp+40h+var_40] esi +
mov dword_4611C8 100h +
mov [esp+40h+var_16] 29h +
mov [esp+40h+var_15] cl +
mov [esp+40h+var_11] dl +
mov [esp+40h+var_14] al +
call sub_416840  +
test eax eax +
jns loc_419130  +
mov eax 0FFFFFFFFh +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
lea eax [esp+40h+var_1C] +
mov [esp+40h+var_40] esi +
mov [esp+40h+var_3C] eax +
call sub_416970  +
test eax eax +
mov esi eax +
jle loc_419153  +
mov edx [esp+40h+var_1C] +
cmp byte ptr [edx] 87h +
jz loc_419254  +
cmp ds:dword_486580 1 +
jle loc_419174  +
mov eax ds:_iob +
mov [esp+40h+var_40] 0Ah +
add eax 40h +
mov [esp+40h+var_3C] eax +
call putc  +
mov eax [esp+40h+var_1C] +
movzx eax byte ptr [eax] +
mov [esp+40h+var_34] esi +
mov [esp+40h+var_3C] offset aSJtagmkii_read +
mov [esp+40h+var_40] 0 +
mov [esp+40h+var_30] eax +
mov eax ds:dword_486584 +
mov [esp+40h+var_38] eax +
call sub_401740  +
test esi esi +
mov dword_4611C8 ebp +
jle loc_41911F  +
mov [esp+40h+var_3C] offset aCmd +
mov ebx edi +
mov [esp+40h+var_40] 0 +
lea edi [esp+40h+var_10] +
call sub_401740  +
movzx eax byte ptr [ebx] +
add ebx 1 +
mov [esp+40h+var_3C] offset a2_2x +
mov [esp+40h+var_40] 0 +
mov [esp+40h+var_38] eax +
call sub_401740  +
cmp ebx edi +
jnz loc_4191C8  +
mov [esp+40h+var_3C] offset asc_46DDFC +
xor ebx ebx +
mov [esp+40h+var_40] 0 +
call sub_401740  +
mov [esp+40h+var_3C] offset aData +
mov [esp+40h+var_40] 0 +
call sub_401740  +
mov eax [esp+40h+var_1C] +
movzx eax byte ptr [eax+ebx] +
add ebx 1 +
mov [esp+40h+var_3C] offset a2_2x +
mov [esp+40h+var_40] 0 +
mov [esp+40h+var_38] eax +
call sub_401740  +
cmp ebx esi +
jnz loc_419214  +
mov [esp+40h+var_3C] offset asc_46DDFC +
mov [esp+40h+var_40] 0 +
call sub_401740  +
jmp loc_41911F  +
cmp eax 5 +
jz loc_4192AB  +
cmp ds:dword_486580 1 +
jle loc_41927A  +
mov eax ds:_iob +
mov [esp+40h+var_40] 0Ah +
add eax 40h +
mov [esp+40h+var_3C] eax +
call putc  +
mov eax ds:dword_486584 +
mov [esp+40h+var_34] esi +
mov [esp+40h+var_3C] offset aSJtagmkii_r_12 +
mov [esp+40h+var_40] 0 +
mov [esp+40h+var_38] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
mov dword_4611C8 ebp +
jmp loc_419124  +
movzx ecx byte ptr [edx+3] +
movzx eax byte ptr [edx+2] +
movzx esi byte ptr [edx+4] +
shl ecx 8 +
shl eax 10h +
add eax ecx +
add esi eax +
movzx eax byte ptr [edx+1] +
mov [esp+40h+var_40] edx +
shl eax 18h +
add esi eax +
call free  +
mov eax ds:dword_486580 +
test eax eax +
jz loc_41931D  +
cmp eax 1 +
jle loc_4192F8  +
mov eax ds:_iob +
mov [esp+40h+var_40] 0Ah +
add eax 40h +
mov [esp+40h+var_3C] eax +
call putc  +
mov eax ds:dword_486584 +
mov [esp+40h+var_30] esi +
mov [esp+40h+var_34] ebx +
mov [esp+40h+var_3C] offset aSJtagmkii_r_13 +
mov [esp+40h+var_38] eax +
mov [esp+40h+var_40] 0 +
call sub_401740  +
mov dword_4611C8 ebp +
mov eax esi +
jmp loc_419124  +
***
sub esp 18h +
mov edx 0FFFF1018h +
mov [esp+18h+var_18] 4000000h +
mov ebx eax +
call sub_418F70  +
test eax eax +
js loc_419920  +
mov [esp+18h+var_18] 4000000h +
mov ecx 5 +
mov edx 0FFFF1024h +
mov eax ebx +
call sub_418F70  +
test eax eax +
js loc_4197D7  +
mov [esp+18h+var_18] 4000000h +
mov ecx 5 +
mov edx 0FFFF1008h +
mov eax ebx +
call sub_418F70  +
test eax eax +
js loc_4197E0  +
mov [esp+18h+var_18] 4000000h +
mov ecx 5 +
mov edx 0FFFF1078h +
mov eax ebx +
call sub_418F70  +
test eax eax +
js loc_4197E7  +
mov [esp+18h+var_18] 4000000h +
mov ecx 5 +
mov edx 0FFFF1088h +
mov eax ebx +
call sub_418F70  +
test eax eax +
js loc_4197F7  +
mov [esp+18h+var_18] 8000000h +
mov ecx 5 +
mov edx 0FFFF1018h +
mov eax ebx +
call sub_418F70  +
test eax eax +
js loc_419800  +
mov [esp+18h+var_18] 8000000h +
mov ecx 5 +
mov edx 0FFFF1024h +
mov eax ebx +
call sub_418F70  +
test eax eax +
js loc_419807  +
mov [esp+18h+var_18] 8000000h +
mov ecx 5 +
mov edx 0FFFF1008h +
mov eax ebx +
call sub_418F70  +
test eax eax +
js loc_419810  +
mov [esp+18h+var_18] 8000000h +
mov ecx 5 +
mov edx 0FFFF1078h +
mov eax ebx +
call sub_418F70  +
test eax eax +
js loc_419820  +
mov [esp+18h+var_18] 8000000h +
mov ecx 5 +
mov edx 0FFFF1088h +
mov eax ebx +
call sub_418F70  +
test eax eax +
js loc_419830  +
mov [esp+18h+var_18] 10000000h +
mov ecx 5 +
mov edx 0FFFF1018h +
mov eax ebx +
call sub_418F70  +
test eax eax +
js loc_419840  +
mov [esp+18h+var_18] 10000000h +
mov ecx 5 +
mov edx 0FFFF1024h +
mov eax ebx +
call sub_418F70  +
test eax eax +
js loc_419850  +
mov [esp+18h+var_18] 10000000h +
mov ecx 5 +
mov edx 0FFFF1008h +
mov eax ebx +
call sub_418F70  +
test eax eax +
js loc_419860  +
mov [esp+18h+var_18] 10000000h +
mov ecx 5 +
mov edx 0FFFF1078h +
mov eax ebx +
call sub_418F70  +
test eax eax +
js loc_419870  +
mov [esp+18h+var_18] 10000000h +
mov ecx 5 +
mov edx 0FFFF1088h +
mov eax ebx +
call sub_418F70  +
test eax eax +
js loc_419880  +
mov [esp+18h+var_18] 20000h +
mov ecx 5 +
mov edx 0FFFF1018h +
mov eax ebx +
call sub_418F70  +
test eax eax +
js loc_419890  +
mov [esp+18h+var_18] 20000h +
mov ecx 5 +
mov edx 0FFFF1024h +
mov eax ebx +
call sub_418F70  +
test eax eax +
js loc_4198A0  +
mov [esp+18h+var_18] 20000h +
mov ecx 5 +
mov edx 0FFFF1008h +
mov eax ebx +
call sub_418F70  +
test eax eax +
js loc_4198B0  +
mov [esp+18h+var_18] 20000h +
mov ecx 5 +
mov edx 0FFFF1078h +
mov eax ebx +
call sub_418F70  +
test eax eax +
js loc_4198C0  +
mov [esp+18h+var_18] 20000h +
mov ecx 5 +
mov edx 0FFFF1088h +
mov eax ebx +
call sub_418F70  +
test eax eax +
js loc_4197D0  +
mov [esp+18h+var_18] 2000000h +
mov ecx 5 +
mov edx 0FFFF1018h +
mov eax ebx +
call sub_418F70  +
test eax eax +
js loc_4198D0  +
mov [esp+18h+var_18] 2000000h +
mov ecx 5 +
mov edx 0FFFF1024h +
mov eax ebx +
call sub_418F70  +
test eax eax +
js loc_4198E0  +
mov [esp+18h+var_18] 2000000h +
mov ecx 5 +
mov edx 0FFFF1008h +
mov eax ebx +
call sub_418F70  +
test eax eax +
js loc_4198F0  +
mov [esp+18h+var_18] 2000000h +
mov ecx 5 +
mov edx 0FFFF1078h +
mov eax ebx +
call sub_418F70  +
test eax eax +
js loc_419900  +
mov [esp+18h+var_18] 2000000h +
mov ecx 5 +
mov edx 0FFFF1088h +
mov eax ebx +
call sub_418F70  +
test eax eax +
js loc_419910  +
mov [esp+18h+var_18] 10001h +
mov ecx 5 +
mov edx 0FFFE1C00h +
mov eax ebx +
call sub_418F70  +
test eax eax +
js loc_419930  +
mov [esp+18h+var_18] 5070A0Bh +
mov ecx 5 +
mov edx 0FFFE1C04h +
mov eax ebx +
call sub_418F70  +
test eax eax +
js loc_419940  +
mov [esp+18h+var_18] 0B000Ch +
mov ecx 5 +
mov edx 0FFFE1C08h +
mov eax ebx +
call sub_418F70  +
test eax eax +
js loc_419950  +
mov [esp+18h+var_18] 31103h +
mov ecx 5 +
mov edx 0FFFE1C0Ch +
mov eax ebx +
call sub_418F70  +
test eax eax +
js loc_419960  +
mov ecx 5 +
mov edx 0FFFF0C28h +
mov eax ebx +
call sub_4190C0  +
test eax eax +
jnz loc_4197F0  +
mov [esp+18h+var_18] 607h +
mov ecx 5 +
mov edx 0FFFF0C28h +
mov eax ebx +
call sub_418F70  +
test eax eax +
js loc_419970  +
mov ecx 5 +
mov edx 0FFFF0C00h +
mov eax ebx +
call sub_4190C0  +
test eax eax +
jnz loc_419817  +
mov [esp+18h+var_18] 4 +
mov ecx 5 +
mov edx 0FFFF0C00h +
mov eax ebx +
call sub_418F70  +
test eax eax +
js loc_419980  +
mov [esp+18h+var_18] 5 +
mov ecx 5 +
mov edx 0FFFF0C00h +
mov eax ebx +
call sub_418F70  +
test eax eax +
js loc_41998A  +
mov [esp+18h+var_18] 0F4240h +
call sub_459150  +
mov ecx 5 +
mov edx 0FFFE1408h +
mov eax ebx +
call sub_4190C0  +
cmp eax 0A001h +
jnz loc_4197A0  +
mov [esp+18h+var_18] 0C350h +
call sub_459150  +
add esp 18h +
xor eax eax +
pop ebx  +
retn   +
mov eax 0BF8h +
mov [esp+18h+var_C] eax +
mov eax ds:dword_486584 +
mov [esp+18h+var_14] offset aSJtagmkii_smc_ +
mov [esp+18h+var_18] 0 +
mov [esp+18h+var_10] eax +
call sub_401740  +
add esp 18h +
mov eax 0FFFFFFFFh +
pop ebx  +
retn   +
mov eax 0BD3h +
jmp loc_4197A5  +
mov eax 0BACh +
jmp loc_4197A5  +
mov eax 0BAEh +
jmp loc_4197A5  +
mov eax 0BB0h +
jmp loc_4197A5  +
mov eax 0BEBh +
jmp loc_4197A5  +
mov eax 0BB2h +
jmp loc_4197A5  +
mov eax 0BB5h +
jmp loc_4197A5  +
mov eax 0BB7h +
jmp loc_4197A5  +
mov eax 0BB9h +
jmp loc_4197A5  +
mov eax 0BEFh +
jmp loc_4197A5  +
mov eax 0BBBh +
jmp loc_4197A5  +
mov eax 0BBDh +
jmp loc_4197A5  +
mov eax 0BC0h +
jmp loc_4197A5  +
mov eax 0BC2h +
jmp loc_4197A5  +
mov eax 0BC4h +
jmp loc_4197A5  +
mov eax 0BC6h +
jmp loc_4197A5  +
mov eax 0BC8h +
jmp loc_4197A5  +
mov eax 0BCBh +
jmp loc_4197A5  +
mov eax 0BCDh +
jmp loc_4197A5  +
mov eax 0BCFh +
jmp loc_4197A5  +
mov eax 0BD1h +
jmp loc_4197A5  +
mov eax 0BD6h +
jmp loc_4197A5  +
mov eax 0BD8h +
jmp loc_4197A5  +
mov eax 0BDAh +
jmp loc_4197A5  +
mov eax 0BDCh +
jmp loc_4197A5  +
mov eax 0BDEh +
jmp loc_4197A5  +
mov eax 0BAAh +
jmp loc_4197A5  +
mov eax 0BE1h +
jmp loc_4197A5  +
mov eax 0BE3h +
jmp loc_4197A5  +
mov eax 0BE5h +
jmp loc_4197A5  +
mov eax 0BE7h +
jmp loc_4197A5  +
mov eax 0BEDh +
jmp loc_4197A5  +
mov eax 0BF1h +
jmp loc_4197A5  +
mov eax 0BF3h +
jmp loc_4197A5  +
***
mov edi edx +
push esi  +
push ebx  +
mov ebx eax +
sub esp 3Ch +
mov eax [esp+44h+arg_0] +
lea esi [esp+44h+var_1B] +
mov [esp+44h+var_38] edx +
mov [esp+44h+var_40] offset aSJtagmkii_avr3 +
mov [esp+44h+var_44] 1 +
mov [esp+44h+var_28] eax +
mov eax ds:dword_486584 +
mov [esp+44h+var_2C] ecx +
mov [esp+44h+var_3C] eax +
call sub_401740  +
mov [esp+44h+var_3C] 2 +
mov [esp+44h+var_40] esi +
mov [esp+44h+var_44] ebx +
mov byte ptr [esp+44h+var_1B] 24h +
mov byte ptr [esp+44h+var_1B+1] 0Ch +
call sub_416840  +
test eax eax +
js loc_419AF3  +
lea ebp [esp+44h+var_1B+3] +
mov [esp+44h+var_40] ebp +
mov [esp+44h+var_44] ebx +
call sub_416970  +
cmp eax 2 +
mov eax [esp+44h+var_1B+3] +
jz loc_419AC1  +
movzx eax byte ptr [eax+1] +
mov [esp+44h+var_34] eax +
mov eax [esp+44h+var_2C] +
mov [esp+44h+var_40] offset aSJtagmkii_av_0 +
mov [esp+44h+var_44] 1 +
mov [esp+44h+var_38] eax +
mov eax ds:dword_486584 +
mov [esp+44h+var_3C] eax +
call sub_401740  +
mov eax edi +
mov [esp+44h+var_3C] 3 +
mov [esp+44h+var_40] esi +
mov [esp+44h+var_44] ebx +
mov byte ptr [esp+44h+var_1B] 25h +
mov byte ptr [esp+44h+var_1B+1] 5 +
mov byte ptr [esp+44h+var_1B+2] al +
call sub_416840  +
test eax eax +
js loc_419AF3  +
mov [esp+44h+var_40] ebp +
mov [esp+44h+var_44] ebx +
call sub_416970  +
cmp eax 2 +
mov eax [esp+44h+var_1B+3] +
jz loc_419AE0  +
movzx eax byte ptr [eax+1] +
mov [esp+44h+var_34] eax +
movzx eax byte ptr [esp+44h+var_28] +
mov [esp+44h+var_40] offset aSJtagmkii_av_1 +
mov [esp+44h+var_44] 1 +
mov [esp+44h+var_38] eax +
mov eax ds:dword_486584 +
mov [esp+44h+var_3C] eax +
call sub_401740  +
xor eax eax +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp byte ptr [eax] 87h +
jnz loc_419A1F  +
movzx eax byte ptr [eax+1] +
cmp al byte ptr [esp+44h+var_2C] +
jnz loc_419A23  +
jmp loc_419A4C  +
cmp byte ptr [eax] 87h +
jnz loc_419A89  +
movzx eax byte ptr [eax+1] +
cmp al byte ptr [esp+44h+var_28] +
jnz loc_419A8D  +
xor eax eax +
jmp loc_419AB9  +
mov eax 0FFFFFFFFh +
jmp loc_419AB9  +
***
push edi  +
mov edi edx +
push esi  +
mov esi eax +
push ebx  +
sub esp 3Ch +
mov eax ds:dword_486584 +
mov [esp+48h+var_3C] edx +
mov [esp+48h+var_44] offset aSJtagmkii_r_14 +
mov [esp+48h+var_48] 1 +
mov [esp+48h+var_40] eax +
mov [esp+48h+var_2C] edx +
call sub_401740  +
and edi 1 +
jnz loc_419F80  +
movzx edi word ptr [esp+48h+var_2C] +
and di 0Ah +
jnz loc_419F30  +
mov ecx 1 +
mov edx 10h +
mov eax esi +
call sub_4190C0  +
test eax eax +
mov ebx eax +
jnz loc_41A250  +
mov ecx 1 +
mov edx 8 +
mov eax esi +
call sub_4190C0  +
test eax eax +
mov ebx eax +
jnz loc_41A28C  +
test byte ptr [esp+48h+var_2C] 5 +
jnz loc_41A002  +
test di di +
jnz loc_41A038  +
mov ecx 1 +
mov edx 10h +
mov eax esi +
call sub_4190C0  +
cmp eax 0FFFFFFFFh +
mov ebx eax +
jz loc_41A278  +
and eax 5000020h +
cmp eax 5000020h +
jnz loc_41A282  +
mov ecx 1 +
mov edx 10h +
mov eax esi +
call sub_4190C0  +
cmp eax 0FFFFFFFFh +
mov ebx eax +
jz loc_41A278  +
and eax 5000020h +
cmp eax 5000020h +
jnz loc_41A282  +
mov [esp+48h+var_48] 0E7B00044h +
mov ecx 1 +
mov edx 104h +
mov eax esi +
call sub_418F70  +
test eax eax +
mov ebp eax +
js loc_41A2A0  +
mov ecx 1 +
mov edx 118h +
mov eax esi +
call sub_4190C0  +
cmp eax 1 +
mov ebx eax +
jnz loc_41A0B0  +
mov ecx 1 +
mov edx 110h +
mov eax esi +
call sub_4190C0  +
test eax eax +
jnz loc_41A2B4  +
test byte ptr [esp+48h+var_2C] 7 +
jz loc_419FE2  +
mov ecx 1 +
mov edx 10h +
mov eax esi +
call sub_4190C0  +
cmp eax 0FFFFFFFFh +
mov ebx eax +
jz loc_41A2F4  +
and eax 5000020h +
cmp eax 5000020h +
jnz loc_41A2FE  +
mov ecx 1 +
mov edx 10h +
mov eax esi +
call sub_4190C0  +
cmp eax 0FFFFFFFFh +
mov ebx eax +
jz loc_41A2F4  +
and eax 5000020h +
cmp eax 5000020h +
jnz loc_41A2FE  +
mov [esp+48h+var_48] 0E7B00044h +
mov ecx 1 +
mov edx 104h +
mov eax esi +
call sub_418F70  +
test eax eax +
mov ebp eax +
js loc_41A31E  +
mov ecx 1 +
mov edx 118h +
mov eax esi +
call sub_4190C0  +
cmp eax 1 +
mov ebx eax +
jnz loc_41A264  +
mov ecx 1 +
mov edx 110h +
mov eax esi +
call sub_4190C0  +
test eax eax +
mov ebx eax +
jnz loc_41A2E0  +
mov [esp+48h+var_48] 0E1B00040h +
mov ecx 1 +
mov edx 104h +
mov eax esi +
call sub_418F70  +
test eax eax +
mov ebp eax +
js loc_41A33C  +
mov [esp+48h+var_48] 0E7B00044h +
mov ecx 1 +
mov edx 104h +
mov eax esi +
call sub_418F70  +
test eax eax +
mov ebp eax +
js loc_41A332  +
mov ecx 1 +
mov edx 118h +
mov eax esi +
call sub_4190C0  +
cmp eax 1 +
mov ebx eax +
jnz loc_41A296  +
mov ecx 1 +
mov edx 110h +
mov eax esi +
call sub_4190C0  +
cmp eax 0FFFFFFFFh +
mov ebx eax +
jz loc_41A350  +
mov [esp+48h+var_48] 0 +
mov ecx 1 +
mov edx 114h +
mov eax esi +
call sub_418F70  +
test eax eax +
mov ebp eax +
js loc_41A346  +
mov [esp+48h+var_48] 0E5B00045h +
mov ecx 1 +
mov edx 104h +
mov eax esi +
call sub_418F70  +
test eax eax +
mov ebp eax +
js loc_41A372  +
mov ecx 1 +
mov edx 10h +
mov eax esi +
call sub_4190C0  +
cmp eax 0FFFFFFFFh +
mov ebx eax +
jz loc_41A3C4  +
and eax 5000020h +
cmp eax 5000020h +
jnz loc_41A2C0  +
mov [esp+48h+var_48] 0E7B00044h +
mov ecx 1 +
mov edx 104h +
mov eax esi +
call sub_418F70  +
test eax eax +
mov ebp eax +
js loc_41A386  +
mov ecx 1 +
mov edx 118h +
mov eax esi +
call sub_4190C0  +
cmp eax 1 +
mov ebx eax +
jnz loc_41A2D6  +
mov ecx 1 +
mov edx 110h +
mov eax esi +
call sub_4190C0  +
test eax eax +
mov ebx eax +
jnz loc_41A328  +
mov [esp+48h+var_48] 0E1B00041h +
mov ecx 1 +
mov edx 104h +
mov eax esi +
call sub_418F70  +
test eax eax +
mov ebp eax +
js loc_41A3B0  +
mov [esp+48h+var_48] 0E7B00044h +
mov ecx 1 +
mov edx 104h +
mov eax esi +
call sub_418F70  +
test eax eax +
mov ebp eax +
js loc_41A26E  +
mov ecx 1 +
mov edx 118h +
mov eax esi +
call sub_4190C0  +
cmp eax 1 +
mov ebx eax +
jnz loc_41A314  +
mov ecx 1 +
mov edx 110h +
mov eax esi +
call sub_4190C0  +
cmp eax 0FFFFFFFFh +
mov ebx eax +
jz loc_41A3BA  +
mov [esp+48h+var_48] 0 +
mov ecx 1 +
mov edx 114h +
mov eax esi +
call sub_418F70  +
test eax eax +
mov ebp eax +
js loc_41A3D8  +
mov [esp+48h+var_48] 0E5B00045h +
mov ecx 1 +
mov edx 104h +
mov eax esi +
call sub_418F70  +
test eax eax +
mov ebp eax +
js loc_41A3CE  +
mov ecx 6 +
mov edx 10h +
mov eax esi +
call sub_4190C0  +
test eax eax +
mov ebx eax +
jz loc_419FE2  +
mov eax 0B75h +
jmp loc_41A0B5  +
mov [esp+48h+var_48] 0 +
mov ecx 1 +
mov edx 1Fh +
mov eax esi +
call sub_4199A0  +
test eax eax +
mov ebp eax +
js loc_41A2CA  +
mov [esp+48h+var_48] 1Fh +
mov ecx 11h +
mov edx 7 +
mov eax esi +
call sub_4199A0  +
test eax eax +
mov ebp eax +
jns loc_419B4D  +
xor ebx ebx +
mov eax 0B02h +
jmp loc_41A0B5  +
lea eax [esp+48h+var_1F] +
mov [esp+48h+var_40] 2 +
mov [esp+48h+var_44] eax +
mov [esp+48h+var_48] esi +
mov byte ptr [esp+48h+var_1F] 24h +
mov byte ptr [esp+48h+var_1F+1] 11h +
call sub_416840  +
test eax eax +
mov ebp eax +
js loc_41A308  +
lea eax [esp+48h+var_1F+3] +
mov [esp+48h+var_44] eax +
mov [esp+48h+var_48] esi +
call sub_416970  +
cmp eax 2 +
mov ebp eax +
jnz loc_419FD6  +
mov eax [esp+48h+var_1F+3] +
cmp byte ptr [eax] 87h +
jnz loc_419FD6  +
cmp byte ptr [eax+1] 1 +
jz loc_419B3E  +
xor ebx ebx +
mov eax 0AF9h +
jmp loc_41A0B5  +
test byte ptr [esp+48h+var_2C] 4 +
jnz loc_41A200  +
test byte ptr [esp+48h+var_2C] 8 +
jnz loc_41A0E8  +
add esp 3Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+48h+var_48] 3000h +
mov ecx 1 +
mov edx 8 +
mov eax esi +
call sub_418F70  +
test eax eax +
mov ebp eax +
jns loc_419B8E  +
mov eax 0FFFFFFFFh +
lea esi [esi+0] +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+48h+var_48] 0C0003000h +
mov ecx 1 +
mov edx 8 +
mov eax esi +
call sub_418F70  +
test eax eax +
mov ebp eax +
js loc_41A024  +
mov edi 15h +
nop   +
lea esi [esi+0] +
mov ecx 1 +
mov edx 10h +
mov eax esi +
call sub_4190C0  +
sub edi 1 +
mov ebx eax +
jnz loc_41A060  +
cmp eax 4000000h +
jnz loc_41A25A  +
xor edx edx +
mov ecx 1 +
mov [esp+48h+var_48] 7 +
mov eax esi +
call sub_4199A0  +
test eax eax +
mov ebp eax +
jns loc_419B97  +
mov eax 0B1Eh +
jmp loc_41A0B5  +
mov eax 0B2Fh +
mov [esp+48h+var_3C] eax +
mov eax ds:dword_486584 +
mov [esp+48h+var_34] ebx +
mov [esp+48h+var_38] ebp +
mov [esp+48h+var_44] offset aSJtagmkii_r_15 +
mov [esp+48h+var_40] eax +
mov [esp+48h+var_48] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_41A030  +
mov [esp+48h+var_48] 0E1B00014h +
mov ecx 1 +
mov edx 104h +
mov eax esi +
call sub_418F70  +
test eax eax +
mov ebp eax +
js loc_41A35A  +
mov [esp+48h+var_48] 0E7B00044h +
mov ecx 1 +
mov edx 104h +
mov eax esi +
call sub_418F70  +
test eax eax +
mov ebp eax +
js loc_41A366  +
mov ecx 1 +
mov edx 118h +
mov eax esi +
call sub_4190C0  +
cmp eax 1 +
mov ebx eax +
jnz loc_41A2AA  +
mov ecx 1 +
mov edx 110h +
mov eax esi +
call sub_4190C0  +
cmp eax 0FFFFFFFFh +
mov ebx eax +
jz loc_41A37C  +
mov [esp+48h+var_48] 0 +
mov ecx 1 +
mov edx 114h +
mov eax esi +
call sub_418F70  +
test eax eax +
mov ebp eax +
js loc_41A3A6  +
mov [esp+48h+var_48] 0E5B00045h +
mov ecx 1 +
mov edx 104h +
mov eax esi +
call sub_418F70  +
test eax eax +
mov ebp eax +
js loc_41A39C  +
mov ecx 1 +
mov edx 10h +
mov eax esi +
call sub_4190C0  +
cmp eax 0FFFFFFFFh +
mov ebx eax +
jz loc_41A3E2  +
and eax 5000020h +
cmp eax 5000020h +
jnz loc_41A2EA  +
mov [esp+48h+var_48] 0D623D703h +
mov ecx 1 +
mov edx 104h +
mov eax esi +
call sub_418F70  +
test eax eax +
mov ebp eax +
jns loc_419FF8  +
mov eax 0B97h +
jmp loc_41A0B5  +
mov [esp+48h+var_48] 0 +
mov ecx 1 +
mov edx 1Fh +
mov eax esi +
call sub_4199A0  +
test eax eax +
mov ebp eax +
js loc_41A390  +
mov [esp+48h+var_48] 1Fh +
mov ecx 11h +
mov edx 1 +
mov eax esi +
call sub_4199A0  +
test eax eax +
mov ebp eax +
jns loc_419FED  +
xor ebx ebx +
mov eax 0B7Ch +
jmp loc_41A0B5  +
mov eax 0B08h +
jmp loc_41A0B5  +
mov eax 0B1Ah +
jmp loc_41A0B5  +
mov eax 0B41h +
jmp loc_41A0B5  +
mov eax 0B68h +
jmp loc_41A0B5  +
mov eax 0B24h +
jmp loc_41A0B5  +
mov eax 0B25h +
jmp loc_41A0B5  +
mov eax 0B0Ah +
jmp loc_41A0B5  +
mov eax 0B4Dh +
jmp loc_41A0B5  +
mov eax 0B2Ch +
jmp loc_41A0B5  +
mov eax 0B87h +
jmp loc_41A0B5  +
mov ebx eax +
mov eax 0B32h +
jmp loc_41A0B5  +
mov eax 0B5Ah +
jmp loc_41A0B5  +
xor ebx ebx +
mov eax 0AFFh +
jmp loc_41A0B5  +
mov eax 0B60h +
jmp loc_41A0B5  +
mov eax 0B44h +
jmp loc_41A0B5  +
mov eax 0B94h +
jmp loc_41A0B5  +
mov eax 0B39h +
jmp loc_41A0B5  +
mov eax 0B3Ah +
jmp loc_41A0B5  +
xor ebx ebx +
mov eax 0AF5h +
jmp loc_41A0B5  +
mov eax 0B6Bh +
jmp loc_41A0B5  +
mov eax 0B3Eh +
jmp loc_41A0B5  +
mov eax 0B63h +
jmp loc_41A0B5  +
mov eax 0B4Ah +
jmp loc_41A0B5  +
mov eax 0B47h +
jmp loc_41A0B5  +
mov eax 0B53h +
jmp loc_41A0B5  +
mov eax 0B50h +
jmp loc_41A0B5  +
xor ebx ebx +
mov eax 0B81h +
jmp loc_41A0B5  +
xor ebx ebx +
mov eax 0B84h +
jmp loc_41A0B5  +
mov eax 0B56h +
jmp loc_41A0B5  +
mov eax 0B8Ah +
jmp loc_41A0B5  +
mov eax 0B5Dh +
jmp loc_41A0B5  +
xor ebx ebx +
mov eax 0B7Ah +
jmp loc_41A0B5  +
mov eax 0B90h +
jmp loc_41A0B5  +
mov eax 0B8Dh +
jmp loc_41A0B5  +
mov eax 0B66h +
jmp loc_41A0B5  +
mov eax 0B6Dh +
jmp loc_41A0B5  +
mov eax 0B59h +
jmp loc_41A0B5  +
mov eax 0B72h +
jmp loc_41A0B5  +
mov eax 0B70h +
jmp loc_41A0B5  +
mov eax 0B93h +
jmp loc_41A0B5  +
***
push esi  +
push ebx  +
sub esp 4Ch +
mov eax dword_4611C8 +
mov ebp [esp+4Ch+arg_8] +
mov edi [esp+4Ch+arg_4] +
mov [esp+4Ch+var_48] offset aSJtagmkii_p_21 +
mov esi [esp+4Ch+arg_0] +
mov [esp+4Ch+var_20] eax +
mov eax [esp+4Ch+arg_14] +
mov [esp+4Ch+var_40] ebp +
mov ebx [esp+4Ch+arg_10] +
mov [esp+4Ch+var_4C] 2 +
mov [esp+4Ch+var_38] eax +
mov eax [esp+4Ch+arg_C] +
mov [esp+4Ch+var_3C] eax +
mov eax ds:dword_486584 +
mov [esp+4Ch+var_44] eax +
call sub_401740  +
mov eax [edi+84h] +
mov dword_4611C8 100h +
test ah 4 +
jz loc_41A610  +
test ah 2 +
jz loc_41A635  +
mov eax [esp+4Ch+arg_14] +
mov [esp+4Ch+var_13] 2Ch +
mov byte ptr [esp+3Ah] 40h +
mov [esp+4Ch+var_11] 5 +
add eax ebx +
cmp ebx eax +
mov [esp+4Ch+var_28] eax +
jb loc_41A4CA  +
jmp loc_41A655  +
jz loc_41A5E2  +
mov edx [esp+4Ch+var_18] +
movzx eax byte ptr [edx] +
cmp al 87h +
jnz loc_41A5A3  +
mov eax [ebp+78h] +
add edx 1 +
mov [esp+4Ch+var_48] edx +
mov [esp+4Ch+var_44] edi +
add eax ebx +
add ebx edi +
mov [esp+4Ch+var_4C] eax +
call memcpy  +
mov eax [esp+4Ch+var_18] +
mov [esp+4Ch+var_4C] eax +
call free  +
cmp [esp+4Ch+var_28] ebx +
jbe loc_41A655  +
mov edi [esp+4Ch+var_28] +
mov eax [esi+8B4h] +
mov [esp+4Ch+var_40] ebx +
mov [esp+4Ch+var_48] offset aSJtagmkii_p_22 +
sub edi ebx +
cmp edi eax +
cmova edi eax +
mov eax ds:dword_486584 +
mov [esp+4Ch+var_3C] edi +
mov [esp+4Ch+var_4C] 3 +
mov [esp+4Ch+var_44] eax +
call sub_401740  +
mov eax [ebp+50h] +
mov [esp+4Ch+var_44] 7 +
mov [esp+4Ch+var_4C] esi +
add eax ebx +
mov edx eax +
shr edx 8 +
mov [esp+4Ch+var_D] al +
mov [esp+4Ch+var_E] dl +
mov edx eax +
shr eax 18h +
mov [esp+4Ch+var_10] al +
lea eax [esp+4Ch+var_13] +
shr edx 10h +
mov [esp+4Ch+var_48] eax +
mov [esp+4Ch+var_F] dl +
call sub_416840  +
test eax eax +
mov edx eax +
js loc_41A680  +
lea eax [esp+4Ch+var_18] +
mov [esp+4Ch+var_48] eax +
mov [esp+4Ch+var_4C] esi +
call sub_416970  +
test eax eax +
mov edx eax +
js loc_41A6D0  +
cmp ds:dword_486580 2 +
jle loc_41A485  +
mov [esp+4Ch+var_24] eax +
mov eax ds:_iob +
mov [esp+4Ch+var_4C] 0Ah +
add eax 40h +
mov [esp+4Ch+var_48] eax +
call putc  +
mov edx [esp+4Ch+var_24] +
mov eax [esp+4Ch+var_18] +
call sub_4162A0  +
mov edx [esp+4Ch+var_18] +
movzx eax byte ptr [edx] +
cmp al 87h +
jz loc_41A49A  +
call sub_4167F0  +
mov [esp+4Ch+var_48] offset aSJtagmkii_p_23 +
mov [esp+4Ch+var_4C] 0 +
mov [esp+4Ch+var_40] eax +
mov eax ds:dword_486584 +
mov [esp+4Ch+var_44] eax +
call sub_401740  +
mov eax [esp+4Ch+var_18] +
mov [esp+4Ch+var_4C] eax +
call free  +
add esp 4Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+4Ch+var_40] eax +
mov eax [esp+4Ch+var_18] +
movzx eax byte ptr [eax] +
mov [esp+4Ch+var_48] offset a0x02xDBytesMsg +
mov [esp+4Ch+var_4C] 2 +
mov [esp+4Ch+var_44] eax +
call sub_401740  +
jmp loc_41A48B  +
mov edx 1 +
mov eax esi +
call sub_419B00  +
test eax eax +
mov edx eax +
jnz loc_41A6D7  +
mov eax [edi+84h] +
test ah 2 +
jnz loc_41A463  +
mov eax esi +
call sub_419330  +
test eax eax +
mov edx eax +
jnz loc_41A6DE  +
or dword ptr [edi+84h] 200h +
jmp loc_41A463  +
mov eax [esp+4Ch+var_20] +
mov edx 8 +
mov dword_4611C8 eax +
mov eax esi +
call sub_419B00  +
test eax eax +
mov edx eax +
js loc_41A6E5  +
add esp 4Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax 0DB1h +
mov [esp+4Ch+var_40] eax +
mov eax ds:dword_486584 +
mov ecx [esp+4Ch+var_20] +
mov [esp+4Ch+var_38] 0 +
mov [esp+4Ch+var_3C] edx +
mov [esp+4Ch+var_44] eax +
mov [esp+4Ch+var_48] offset aSJtagmkii_p_24 +
mov [esp+4Ch+var_4C] 0 +
mov dword_4611C8 ecx +
call sub_401740  +
add esp 4Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax 0DB3h +
jmp loc_41A685  +
mov eax 0D90h +
jmp loc_41A685  +
mov eax 0D96h +
jmp loc_41A685  +
mov eax 0DC9h +
jmp loc_41A685  +
***
push esi  +
push ebx  +
sub esp 5Ch +
mov eax dword_4611C8 +
mov esi [esp+5Ch+arg_0] +
mov ebx [esp+5Ch+arg_4] +
mov edi [esp+5Ch+arg_C] +
mov [esp+5Ch+var_24] eax +
mov eax [esp+5Ch+arg_14] +
mov dword_4611C8 100h +
test eax eax +
jz loc_41AD46  +
mov edx 2 +
mov eax esi +
call sub_419B00  +
test eax eax +
mov edx eax +
jnz loc_41ADE6  +
mov ebp [ebx+84h] +
xor edx edx +
mov eax ebp +
or ah 4 +
mov [ebx+84h] eax +
mov eax [esp+5Ch+arg_14] +
sub eax 1 +
sub eax [esp+5Ch+arg_10] +
div  edi +
xor edx edx +
add eax 1 +
mov [esp+5Ch+var_38] eax +
mov eax [esp+5Ch+arg_10] +
div  edi +
mov [esp+5Ch+var_3C] eax +
mov [esp+5Ch+var_28] eax +
mov eax [esi+8B4h] +
add eax 0Ah +
mov [esp+5Ch+var_5C] eax +
call malloc  +
test eax eax +
mov [esp+5Ch+var_2C] eax +
jz loc_41AE98  +
and ebp 200h +
jz loc_41AC10  +
mov eax [esp+5Ch+var_3C] +
cmp [esp+5Ch+var_38] eax +
jle loc_41ADF8  +
mov edi eax +
mov ebp edi +
mov ebx 100h +
jmp loc_41A7C9  +
sub ebx 1 +
jz loc_41AAF0  +
mov ecx 5 +
mov edx 0FFFE1408h +
mov eax esi +
call sub_4190C0  +
cmp eax 0FFFFFFFFh +
jz loc_41A7C0  +
test al 1 +
jz loc_41A7C0  +
mov ebp edi +
mov ecx 5 +
shl ebp 8 +
mov edx 0FFFE1404h +
mov ebx ebp +
mov eax esi +
or ebx 0A5000005h +
mov [esp+5Ch+var_5C] ebx +
call sub_418F70  +
test eax eax +
js loc_41AD3C  +
add edi 1 +
cmp edi [esp+5Ch+var_38] +
jnz loc_41A7B4  +
mov eax [esp+5Ch+var_3C] +
mov edi 100h +
mov [esp+5Ch+var_34] eax +
jmp loc_41A82D  +
sub edi 1 +
jz loc_41AB3D  +
mov ecx 5 +
mov edx 0FFFE1408h +
mov eax esi +
call sub_4190C0  +
cmp eax 0FFFFFFFFh +
jz loc_41A824  +
test al 1 +
jz loc_41A824  +
mov ebx eax +
mov eax [esp+5Ch+var_3C] +
mov ecx 5 +
mov edx 0FFFE1404h +
shl eax 8 +
mov [esp+5Ch+var_34] eax +
or eax 0A5000002h +
mov [esp+5Ch+var_30] eax +
mov [esp+5Ch+var_5C] eax +
mov eax esi +
call sub_418F70  +
test eax eax +
js loc_41AD69  +
mov edi 100h +
xor ebp ebp +
jmp loc_41A88B  +
sub edi 1 +
jz loc_41ABF3  +
mov ecx 5 +
mov edx 0FFFE1408h +
mov eax esi +
call sub_4190C0  +
cmp eax 0FFFFFFFFh +
jz loc_41A882  +
or ebp eax +
test al 1 +
jz loc_41A882  +
mov ebx eax +
and ebp 8 +
jnz loc_41AD32  +
add [esp+5Ch+var_3C] 1 +
mov eax [esp+5Ch+var_38] +
cmp [esp+5Ch+var_3C] eax +
jnz loc_41A815  +
mov eax [esp+5Ch+var_2C] +
mov ebp [esp+5Ch+arg_10] +
mov byte ptr [eax] 2Dh +
add eax 0Ah +
mov byte ptr [eax-6] 0 +
mov byte ptr [eax-7] 0 +
mov byte ptr [eax-8] 0 +
mov byte ptr [eax-9] 40h +
mov byte ptr [eax-5] 5 +
mov [esp+5Ch+var_3C] eax +
mov eax [esp+5Ch+arg_14] +
add eax ebp +
mov [esp+5Ch+var_30] eax +
mov [esp+5Ch+var_5C] 0A5000003h +
mov ecx 5 +
mov edx 0FFFE1404h +
mov eax esi +
call sub_418F70  +
test eax eax +
js loc_41AE8C  +
mov ebx 100h +
xor edi edi +
jmp loc_41A92D  +
sub ebx 1 +
jz loc_41AC5E  +
mov ecx 5 +
mov edx 0FFFE1408h +
mov eax esi +
call sub_4190C0  +
cmp eax 0FFFFFFFFh +
jz loc_41A924  +
or edi eax +
test al 1 +
jz loc_41A924  +
and edi 8 +
jnz loc_41ADDC  +
mov ebx [esp+5Ch+var_2C] +
mov edi 2 +
mov [esp+5Ch+var_34] edi +
mov edi [esp+5Ch+var_30] +
mov eax [esi+8B4h] +
mov [esp+5Ch+var_50] ebp +
mov [esp+5Ch+var_58] offset aSJtagmkii_p_25 +
sub edi ebp +
cmp edi eax +
cmova edi eax +
mov eax ds:dword_486584 +
mov [esp+5Ch+var_4C] edi +
mov [esp+5Ch+var_5C] 3 +
mov [esp+5Ch+var_54] eax +
call sub_401740  +
mov ecx [esp+5Ch+arg_8] +
mov eax [ecx+50h] +
add eax ebp +
mov edx eax +
shr edx 8 +
mov [ebx+8] dl +
mov edx eax +
mov [ebx+9] al +
shr edx 10h +
shr eax 18h +
mov [ebx+7] dl +
mov [ebx+6] al +
mov eax [esi+8B4h] +
mov [esp+5Ch+var_58] 0FFh +
mov [esp+5Ch+var_54] eax +
mov eax [esp+5Ch+var_3C] +
mov [esp+5Ch+var_5C] eax +
call memset  +
mov edx [esp+5Ch+arg_8] +
mov eax [esp+5Ch+var_3C] +
mov ecx [edx+78h] +
mov [esp+5Ch+var_54] edi +
mov [esp+5Ch+var_5C] eax +
add ecx ebp +
mov [esp+5Ch+var_58] ecx +
call memcpy  +
mov eax [esi+8B4h] +
mov [esp+5Ch+var_58] ebx +
mov [esp+5Ch+var_5C] esi +
add eax 0Ah +
mov [esp+5Ch+var_54] eax +
call sub_416840  +
test eax eax +
mov edx eax +
js loc_41ADD2  +
lea eax [esp+5Ch+var_10] +
mov [esp+5Ch+var_58] eax +
mov [esp+5Ch+var_5C] esi +
call sub_416970  +
test eax eax +
mov edx eax +
js loc_41AD7D  +
cmp ds:dword_486580 2 +
jg loc_41AC30  +
jz loc_41AD0A  +
mov eax [esp+5Ch+var_10] +
movzx edx byte ptr [eax] +
cmp dl 80h +
jnz loc_41AD87  +
mov [esp+5Ch+var_5C] eax +
add ebp edi +
call free  +
sub [esp+5Ch+var_34] 1 +
jnz loc_41A95F  +
mov eax [esp+5Ch+var_28] +
mov ecx 5 +
mov edx 0FFFE1404h +
shl eax 8 +
mov [esp+5Ch+var_34] eax +
or eax 0A5000001h +
mov [esp+5Ch+var_20] eax +
mov [esp+5Ch+var_5C] eax +
mov eax esi +
call sub_418F70  +
test eax eax +
js loc_41AE80  +
mov ebx 100h +
xor edi edi +
jmp loc_41AAA9  +
sub ebx 1 +
jz loc_41ACB0  +
mov ecx 5 +
mov edx 0FFFE1408h +
mov eax esi +
call sub_4190C0  +
cmp eax 0FFFFFFFFh +
jz loc_41AAA0  +
or edi eax +
test al 1 +
jz loc_41AAA0  +
and edi 8 +
jnz loc_41AD73  +
add [esp+5Ch+var_28] 1 +
mov eax [esp+5Ch+var_38] +
cmp [esp+5Ch+var_28] eax +
jnz loc_41A8FB  +
mov [esp+5Ch+arg_10] ebp +
jmp loc_41AE13  +
cmp eax 0FFFFFFFFh +
jz loc_41AD53  +
test al 1 +
jnz loc_41A7E3  +
xor ebx ebx +
mov eax 0E52h +
mov [esp+5Ch+var_50] eax +
mov eax ds:dword_486584 +
mov [esp+5Ch+var_48] ebx +
mov ebx 0DFEh +
mov [esp+5Ch+var_4C] ebp +
mov [esp+5Ch+var_58] offset aSJtagmkii_flas +
mov [esp+5Ch+var_54] eax +
mov [esp+5Ch+var_5C] 0 +
call sub_401740  +
mov edx 0FFFFFFFFh +
jmp loc_41AB9C  +
cmp eax 0FFFFFFFFh +
mov ebx eax +
jz loc_41AE5A  +
test al 1 +
jnz loc_41A849  +
mov [esp+5Ch+var_30] 0 +
mov eax 0E6Dh +
mov [esp+5Ch+var_44] ebx +
mov ebx [esp+5Ch+var_30] +
mov [esp+5Ch+var_50] eax +
mov eax ds:dword_486584 +
mov [esp+5Ch+var_58] offset aSJtagmkii_fl_0 +
mov [esp+5Ch+var_5C] 0 +
mov [esp+5Ch+var_48] ebx +
mov ebx [esp+5Ch+var_34] +
mov [esp+5Ch+var_54] eax +
mov [esp+5Ch+var_4C] ebx +
mov ebx 0E04h +
call sub_401740  +
mov edx 0FFFFFFFFh +
mov eax [esp+5Ch+var_24] +
mov [esp+5Ch+var_3C] edx +
mov dword_4611C8 eax +
mov eax [esp+5Ch+var_2C] +
mov [esp+5Ch+var_5C] eax +
call free  +
mov edx [esp+5Ch+var_3C] +
mov eax ds:dword_486584 +
mov [esp+5Ch+var_48] 0 +
mov [esp+5Ch+var_50] ebx +
mov [esp+5Ch+var_4C] edx +
mov [esp+5Ch+var_54] eax +
mov [esp+5Ch+var_58] offset aSJtagmkii_p_26 +
mov [esp+5Ch+var_5C] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
add esp 5Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp eax 0FFFFFFFFh +
mov ebx eax +
jz loc_41AD5F  +
test al 1 +
jnz loc_41A8A9  +
mov eax 0E7Eh +
jmp loc_41AB5D  +
mov eax esi +
call sub_419330  +
test eax eax +
mov edx eax +
jnz loc_41AE6C  +
or dword ptr [ebx+84h] 200h +
jmp loc_41A7A4  +
mov [esp+5Ch+var_20] eax +
mov eax ds:_iob +
mov [esp+5Ch+var_5C] 0Ah +
add eax 40h +
mov [esp+5Ch+var_58] eax +
call putc  +
mov edx [esp+5Ch+var_20] +
mov eax [esp+5Ch+var_10] +
call sub_4162A0  +
jmp loc_41AA42  +
cmp eax 0FFFFFFFFh +
jz loc_41AE50  +
test al 1 +
jnz loc_41A949  +
mov edx 0EB9h +
mov [esp+5Ch+var_48] eax +
mov eax ds:dword_486584 +
mov ebx 0E0Eh +
mov [esp+5Ch+var_50] edx +
mov [esp+5Ch+var_4C] 0A5000003h +
mov [esp+5Ch+var_58] offset aSJtagmkii_fl_1 +
mov [esp+5Ch+var_54] eax +
mov [esp+5Ch+var_5C] 0 +
call sub_401740  +
mov edx 0FFFFFFFFh +
jmp loc_41AB9C  +
cmp eax 0FFFFFFFFh +
jz loc_41AE46  +
test al 1 +
jnz loc_41AAC5  +
mov edx 0E9Ch +
mov [esp+5Ch+var_44] eax +
mov eax [esp+5Ch+var_20] +
mov ebx 0E33h +
mov [esp+5Ch+var_50] edx +
mov [esp+5Ch+var_58] offset aSJtagmkii_fl_2 +
mov [esp+5Ch+var_5C] 0 +
mov [esp+5Ch+var_48] eax +
mov eax [esp+5Ch+var_34] +
mov [esp+5Ch+var_4C] eax +
mov eax ds:dword_486584 +
mov [esp+5Ch+var_54] eax +
call sub_401740  +
mov edx 0FFFFFFFFh +
jmp loc_41AB9C  +
mov [esp+5Ch+var_50] eax +
mov eax [esp+5Ch+var_10] +
movzx eax byte ptr [eax] +
mov [esp+5Ch+var_58] offset a0x02xDBytesMsg +
mov [esp+5Ch+var_5C] 2 +
mov [esp+5Ch+var_54] eax +
call sub_401740  +
jmp loc_41AA42  +
mov eax 0E7Fh +
jmp loc_41AB5D  +
mov eax 0E57h +
jmp loc_41AB08  +
add esp 5Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
xor ebx ebx +
mov eax 0E51h +
jmp loc_41AB08  +
mov eax 0E7Dh +
jmp loc_41AB5D  +
mov eax 0E72h +
jmp loc_41AB5D  +
mov edx 0E9Dh +
jmp loc_41ACC6  +
mov ebx 0E1Dh +
jmp loc_41AB9C  +
movzx eax dl +
call sub_4167F0  +
mov [esp+5Ch+var_58] offset aSJtagmkii_p_27 +
mov [esp+5Ch+var_5C] 0 +
mov [esp+5Ch+var_50] eax +
mov eax ds:dword_486584 +
mov [esp+5Ch+var_54] eax +
call sub_401740  +
mov eax [esp+5Ch+var_10] +
mov [esp+5Ch+var_5C] eax +
call free  +
mov eax [esp+5Ch+var_2C] +
mov [esp+5Ch+var_5C] eax +
call free  +
mov eax 0FFFFFFFFh +
jmp loc_41ABEB  +
mov ebx 0E1Bh +
jmp loc_41AB9C  +
mov edx 0EBAh +
jmp loc_41AC74  +
mov ebx 0DE6h +
mov [esp+5Ch+var_2C] 0 +
jmp loc_41AB9C  +
mov eax [esp+5Ch+var_2C] +
mov byte ptr [eax] 2Dh +
mov byte ptr [eax+4] 0 +
mov byte ptr [eax+3] 0 +
mov byte ptr [eax+2] 0 +
mov byte ptr [eax+1] 40h +
mov byte ptr [eax+5] 5 +
mov eax [esp+5Ch+var_2C] +
mov [esp+5Ch+var_5C] eax +
call free  +
mov eax [esp+5Ch+var_24] +
mov edx 8 +
mov dword_4611C8 eax +
mov eax esi +
call sub_419B00  +
test eax eax +
mov edx eax +
js loc_41AE76  +
mov eax [esp+5Ch+arg_10] +
jmp loc_41ABEB  +
mov edx 0E9Bh +
jmp loc_41ACC6  +
mov edx 0EB8h +
jmp loc_41AC74  +
mov [esp+5Ch+var_30] 0 +
mov eax 0E6Ch +
jmp loc_41AB5D  +
mov ebx 0DF7h +
jmp loc_41AB9C  +
mov ebx 0E39h +
jmp loc_41AB9C  +
xor eax eax +
mov edx 0E92h +
jmp loc_41ACC6  +
xor eax eax +
mov edx 0EAFh +
jmp loc_41AC74  +
mov eax ds:dword_486584 +
mov [esp+5Ch+var_58] offset aSJtagmkii_p_28 +
mov [esp+5Ch+var_5C] 0 +
mov [esp+5Ch+var_54] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_41ABEB  +
***
push ebx  +
sub esp 30h +
mov eax ds:dword_486584 +
mov ebx [esp+30h+arg_0] +
lea edi [esp+30h+var_7] +
mov [esp+30h+var_2C] offset aSJtagmkii_cl_5 +
lea esi [esp+30h+var_7+3] +
mov [esp+30h+var_30] 2 +
mov [esp+30h+var_28] eax +
call sub_401740  +
mov [esp+30h+var_28] 3 +
mov [esp+30h+var_2C] edi +
mov [esp+30h+var_30] ebx +
mov byte ptr [esp+30h+var_7] 2 +
mov byte ptr [esp+30h+var_7+1] 3 +
mov byte ptr [esp+30h+var_7+2] 2 +
call sub_416840  +
mov [esp+30h+var_2C] esi +
mov [esp+30h+var_30] ebx +
call sub_416970  +
test eax eax +
js loc_41AF2B  +
mov edx [esp+30h+var_7+3] +
cmp byte ptr [edx] 80h +
jz loc_41AF80  +
mov [esp+30h+var_20] eax +
mov eax ds:dword_486584 +
mov [esp+30h+var_1C] 0 +
mov [esp+30h+var_24] 0D53h +
mov [esp+30h+var_2C] offset aSJtagmkii_r_15 +
mov [esp+30h+var_28] eax +
mov [esp+30h+var_30] 0 +
call sub_401740  +
mov eax off_461140 +
lea edx [ebx+89Ch] +
mov eax [eax+8] +
mov [esp+30h+var_30] edx +
call eax  +
mov dword ptr [ebx+89Ch] 0FFFFFFFFh +
add esp 30h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov [esp+30h+var_30] edx +
call free  +
mov eax ds:dword_486584 +
mov [esp+30h+var_2C] offset aSJtagmkii_cl_0 +
mov [esp+30h+var_30] 2 +
mov byte ptr [esp+30h+var_7] 0 +
mov [esp+30h+var_28] eax +
call sub_401740  +
mov [esp+30h+var_28] 1 +
mov [esp+30h+var_2C] edi +
mov [esp+30h+var_30] ebx +
call sub_416840  +
mov [esp+30h+var_2C] esi +
mov [esp+30h+var_30] ebx +
call sub_416970  +
test eax eax +
mov esi eax +
jle loc_41B030  +
cmp ds:dword_486580 2 +
jg loc_41B077  +
jz loc_41B09F  +
mov edx [esp+30h+var_7+3] +
movzx esi byte ptr [edx] +
mov [esp+30h+var_30] edx +
call free  +
mov eax esi +
cmp al 80h +
jz loc_41AF5C  +
movzx eax al +
call sub_4167F0  +
mov [esp+30h+var_2C] offset aSJtagmkii_cl_1 +
mov [esp+30h+var_30] 0 +
mov [esp+30h+var_24] eax +
mov eax ds:dword_486584 +
mov [esp+30h+var_28] eax +
call sub_401740  +
jmp loc_41AF5C  +
cmp ds:dword_486580 1 +
jle loc_41B051  +
mov eax ds:_iob +
mov [esp+30h+var_30] 0Ah +
add eax 40h +
mov [esp+30h+var_2C] eax +
call putc  +
mov eax ds:dword_486584 +
mov [esp+30h+var_24] esi +
mov [esp+30h+var_2C] offset aSJtagmkii_cl_4 +
mov [esp+30h+var_30] 0 +
mov [esp+30h+var_28] eax +
call sub_401740  +
jmp loc_41AF79  +
mov eax ds:_iob +
mov [esp+30h+var_30] 0Ah +
add eax 40h +
mov [esp+30h+var_2C] eax +
call putc  +
mov eax [esp+30h+var_7+3] +
mov edx esi +
call sub_4162A0  +
jmp loc_41AFE3  +
mov [esp+30h+var_24] eax +
mov eax [esp+30h+var_7+3] +
movzx eax byte ptr [eax] +
mov [esp+30h+var_2C] offset a0x02xDBytesMsg +
mov [esp+30h+var_30] 2 +
mov [esp+30h+var_28] eax +
call sub_401740  +
jmp loc_41AFE3  +
***
push esi  +
push ebx  +
sub esp 3Ch +
mov eax ds:dword_486584 +
mov esi [esp+3Ch+arg_0] +
mov [esp+3Ch+var_38] offset aSJtagmkii_ch_2 +
mov [esp+3Ch+var_3C] 1 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov edx 4 +
mov eax esi +
call sub_419B00  +
test eax eax +
mov ebx eax +
jnz loc_41B2B9  +
mov byte ptr [esp+3Ch+var_10] 1 +
mov edi 3E8h +
mov byte ptr [esp+3Ch+var_10+1] 5 +
lea ebp [esp+3Ch+var_10] +
mov byte ptr [esp+3Ch+var_10+2] 1 +
mov byte ptr [esp+3Ch+var_10+3] 0 +
jmp loc_41B141  +
test dl dl +
jz loc_41B1B8  +
sub edi 1 +
jz loc_41B2A0  +
lea eax [esp+3Ch+var_17] +
mov [esp+3Ch+var_34] 2 +
mov [esp+3Ch+var_38] eax +
mov [esp+3Ch+var_3C] esi +
mov byte ptr [esp+3Ch+var_17] 24h +
mov byte ptr [esp+3Ch+var_17+1] 0Fh +
call sub_416840  +
test eax eax +
js loc_41B290  +
lea eax [esp+3Ch+var_17+3] +
mov [esp+3Ch+var_38] eax +
mov [esp+3Ch+var_3C] esi +
call sub_416970  +
cmp eax 2 +
jnz loc_41B250  +
mov edx [esp+3Ch+var_17+3] +
cmp byte ptr [edx] 87h +
jnz loc_41B250  +
movzx ebx byte ptr [edx+1] +
mov [esp+3Ch+var_3C] edx +
mov [esp+3Ch+var_20] eax +
call free  +
movzx edx byte ptr [ebp+0] +
mov eax [esp+3Ch+var_20] +
cmp dl bl +
jnz loc_41B130  +
movzx edx byte ptr [ebp+1] +
add ebp 1 +
test dl dl +
jnz loc_41B138  +
xor edx edx +
mov ecx 1 +
mov [esp+3Ch+var_3C] 1 +
mov eax esi +
call sub_4199A0  +
test eax eax +
mov ebx eax +
js loc_41B2C2  +
mov ecx 6 +
mov edx 10h +
mov eax esi +
call sub_4190C0  +
test eax eax +
mov edi eax +
jnz loc_41B2B2  +
lea eax [esp+3Ch+var_17] +
mov [esp+3Ch+var_34] 3 +
mov [esp+3Ch+var_38] eax +
mov [esp+3Ch+var_3C] esi +
mov byte ptr [esp+3Ch+var_17] 2 +
mov byte ptr [esp+3Ch+var_17+1] 3 +
mov byte ptr [esp+3Ch+var_17+2] 2 +
call sub_416840  +
lea eax [esp+3Ch+var_17+3] +
mov [esp+3Ch+var_38] eax +
mov [esp+3Ch+var_3C] esi +
call sub_416970  +
test eax eax +
mov ebx eax +
js loc_41B2AB  +
mov eax [esp+3Ch+var_17+3] +
cmp byte ptr [eax] 80h +
jnz loc_41B2AB  +
mov [esp+3Ch+var_3C] eax +
call free  +
add esp 3Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ebx eax +
xor edi edi +
mov eax 0C73h +
mov [esp+3Ch+var_30] eax +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_28] edi +
mov [esp+3Ch+var_2C] ebx +
mov [esp+3Ch+var_38] offset aSJtagmkii_r_15 +
mov [esp+3Ch+var_34] eax +
mov [esp+3Ch+var_3C] 0 +
call sub_401740  +
add esp 3Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ebx eax +
xor edi edi +
mov eax 0C6Fh +
jmp loc_41B259  +
mov ebx eax +
xor edi edi +
mov eax 0C7Ah +
jmp loc_41B259  +
mov eax 0C88h +
jmp loc_41B259  +
mov eax 0C80h +
jmp loc_41B259  +
mov eax 0C62h +
xor edi edi +
jmp loc_41B259  +
mov eax 0C7Dh +
xor edi edi +
jmp loc_41B259  +
***
push edi  +
push esi  +
push ebx  +
sub esp 4Ch +
mov ebx [esp+58h+arg_0] +
mov esi [esp+58h+arg_4] +
mov eax [ebx+0A5Ch] +
lea ecx [eax+26h] +
mov eax ebx +
call sub_416F40  +
test eax eax +
js loc_41B537  +
mov eax [ebx+0A5Ch] +
mov eax [eax+4] +
mov [esp+58h+var_58] eax +
call free  +
mov eax [ebx+0A5Ch] +
mov eax [eax+10h] +
mov [esp+58h+var_58] eax +
call free  +
mov edi [ebx+0A5Ch] +
mov eax [edi+0Ch] +
mov [esp+58h+var_58] eax +
call malloc  +
test eax eax +
mov [edi+4] eax +
jz loc_41B55E  +
mov eax [edi+18h] +
mov [esp+58h+var_58] eax +
call malloc  +
test eax eax +
mov [edi+10h] eax +
jz loc_41B585  +
mov dword ptr [edi+14h] 0FFFFFFFFh +
mov dword ptr [edi+8] 0FFFFFFFFh +
lea edi [esp+58h+var_1E] +
mov [esp+58h+var_2C] 2 +
mov [esp+58h+var_50] 2 +
mov [esp+58h+var_54] edi +
mov [esp+58h+var_58] ebx +
mov byte ptr [esp+58h+var_1E] 24h +
mov byte ptr [esp+58h+var_1E+1] 1 +
call sub_416840  +
test eax eax +
js loc_41B504  +
lea eax [esp+58h+var_24] +
mov [esp+58h+var_54] eax +
mov [esp+58h+var_58] ebx +
call sub_416970  +
test eax eax +
jle loc_41B4C0  +
mov edx [esp+58h+var_24] +
cmp byte ptr [edx] 87h +
jnz loc_41B4C0  +
mov [esp+58h+var_58] edx +
call free  +
xor edx edx +
mov dword ptr [edi] 0 +
mov [edi+4] dx +
mov [esp+58h+var_50] 6 +
mov [esp+58h+var_54] edi +
mov [esp+58h+var_58] ebx +
mov byte ptr [esp+58h+var_1E] 25h +
mov byte ptr [esp+58h+var_1E+1] 20h +
call sub_416840  +
test eax eax +
js loc_41B504  +
lea eax [esp+58h+var_24] +
mov [esp+58h+var_54] eax +
mov [esp+58h+var_58] ebx +
call sub_416970  +
test eax eax +
jle loc_41B4C0  +
mov edx [esp+58h+var_24] +
cmp byte ptr [edx] 87h +
jnz loc_41B4C0  +
cmp eax 5 +
jnz loc_41B422  +
movzx eax byte ptr [edx+2] +
cmp al [esi+76h] +
jz loc_41B497  +
movzx eax byte ptr [esi+77h] +
movzx ebp byte ptr [esi+78h] +
mov [esp+58h+var_2D] al +
movzx eax byte ptr [esi+76h] +
movzx ecx [esp+58h+var_2D] +
mov edx ebp +
mov [esp+58h+var_48] eax +
mov eax ds:dword_486584 +
movzx ebp dl +
mov [esp+58h+var_40] ebp +
mov [esp+58h+var_4C] esi +
mov [esp+58h+var_44] ecx +
mov [esp+58h+var_50] eax +
mov [esp+58h+var_54] offset aSExpectedSig_0 +
mov [esp+58h+var_58] 0 +
call sub_401740  +
mov eax ds:dword_4866A4 +
test eax eax +
jz loc_41B511  +
mov edx [esp+58h+var_24] +
mov [esp+58h+var_58] edx +
call free  +
sub [esp+58h+var_2C] 1 +
jnz loc_41B36A  +
xor eax eax +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
movzx ecx byte ptr [edx+3] +
cmp cl [esi+77h] +
mov [esp+58h+var_2D] cl +
jnz loc_41B422  +
movzx ebp byte ptr [esi+78h] +
mov ecx ebp +
cmp [edx+4] cl +
jnz loc_41B432  +
jmp loc_41B47A  +
cmp ds:dword_486580 1 +
mov ebp eax +
jle loc_41B4E3  +
mov eax ds:_iob +
mov [esp+58h+var_58] 0Ah +
add eax 40h +
mov [esp+58h+var_54] eax +
call putc  +
mov eax ds:dword_486584 +
mov [esp+58h+var_4C] ebp +
mov [esp+58h+var_54] offset aSJtagmkii_init +
mov [esp+58h+var_58] 0 +
mov [esp+58h+var_50] eax +
call sub_401740  +
add esp 4Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+58h+var_50] offset byte_4865A0 +
mov [esp+58h+var_54] offset aSdoubleCheck_0 +
mov [esp+58h+var_58] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_41B48F  +
mov eax ds:dword_486584 +
mov [esp+58h+var_54] offset aSJtagmkii_in_0 +
mov [esp+58h+var_58] 0 +
mov [esp+58h+var_50] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_41B48F  +
mov eax ds:dword_486584 +
mov [esp+58h+var_54] offset aSJtagmkii_in_1 +
mov [esp+58h+var_58] 0 +
mov [esp+58h+var_50] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_41B48F  +
mov eax ds:dword_486584 +
mov [esp+58h+var_54] offset aSJtagmkii_in_2 +
mov [esp+58h+var_58] 0 +
mov [esp+58h+var_50] eax +
call sub_401740  +
mov eax [ebx+0A5Ch] +
mov eax [eax+4] +
mov [esp+58h+var_58] eax +
call free  +
mov eax 0FFFFFFFFh +
jmp loc_41B48F  +
***
mov edi offset aJtag_0 +
push esi  +
push ebx  +
sub esp 4Ch +
mov eax ds:dword_486584 +
mov ebp [esp+54h+arg_0] +
mov [esp+54h+var_50] offset aSJtagmkii_gets +
mov [esp+54h+var_54] 3 +
mov [esp+54h+var_4C] eax +
call sub_401740  +
lea eax [ebp+54h] +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_41B620  +
mov edi offset aDragon +
mov ecx 6 +
mov esi eax +
cmps   +
jnz loc_41BBFE  +
mov [esp+54h+var_28] 1 +
jmp loc_41B628  +
mov [esp+54h+var_28] 0 +
mov edi 21h +
mov ebx 0FFFFFFFFh +
jmp loc_41B65B  +
jz loc_41B8C0  +
mov eax [esp+54h+var_1B+3] +
movzx ebx byte ptr [eax] +
cmp bl 86h +
jz loc_41B6EF  +
mov [esp+54h+var_54] eax +
call free  +
sub edi 1 +
jz loc_41B880  +
mov eax ds:dword_486584 +
mov [esp+54h+var_50] offset aSJtagmkii_ge_0 +
mov [esp+54h+var_54] 2 +
mov byte ptr [esp+54h+var_1B] 1 +
mov [esp+54h+var_4C] eax +
call sub_401740  +
lea eax [esp+54h+var_1B] +
mov [esp+54h+var_4C] 1 +
mov [esp+54h+var_50] eax +
mov [esp+54h+var_54] ebp +
call sub_416840  +
lea eax [esp+54h+var_1B+3] +
mov [esp+54h+var_50] eax +
mov [esp+54h+var_54] ebp +
call sub_416970  +
test eax eax +
mov esi eax +
jle loc_41B850  +
cmp ds:dword_486580 2 +
jle loc_41B634  +
mov eax ds:_iob +
mov [esp+54h+var_54] 0Ah +
add eax 40h +
mov [esp+54h+var_50] eax +
call putc  +
mov eax [esp+54h+var_1B+3] +
mov edx esi +
call sub_4162A0  +
mov eax [esp+54h+var_1B+3] +
movzx ebx byte ptr [eax] +
cmp bl 86h +
jnz loc_41B64A  +
movzx ebx byte ptr [eax+8] +
movzx edx byte ptr [eax+7] +
shl ebx 8 +
or ebx edx +
mov edx [ebp+0A5Ch] +
cmp esi 11h +
mov [edx+34h] ebx +
mov ecx [eax+0Ah] +
movzx edi byte ptr [eax+9] +
mov [edx+20h] ecx +
movzx eax word ptr [eax+0Eh] +
mov [edx+24h] ax +
jg loc_41B8E8  +
mov esi [esp+54h+var_28] +
mov eax [ebp+0A5Ch] +
xor esi 1 +
and esi 1 +
cmp ebx 30Fh +
jbe loc_41BA8B  +
cmp ebx 3FFh +
ja loc_41B74E  +
mov ecx esi +
test cl cl +
jnz loc_41BB63  +
mov dword ptr [eax+2Ch] 12Ah +
cmp [esp+54h+arg_4] 3 +
jz loc_41BACA  +
mov eax [eax+2Ch] +
mov [esp+54h+var_50] offset aSJtagmkii_ge_1 +
mov [esp+54h+var_54] 2 +
mov [esp+54h+var_48] eax +
mov eax ds:dword_486584 +
mov [esp+54h+var_4C] eax +
call sub_401740  +
mov eax [esp+54h+arg_4] +
sub eax 5 +
cmp eax 1 +
jbe loc_41BB6F  +
mov eax [esp+54h+arg_4] +
test eax eax +
js loc_41BBF4  +
movzx esi byte ptr [esp+54h+arg_4] +
mov ebx 5 +
mov edi [esp+54h+arg_4] +
mov eax esi +
mov edx 3 +
mov byte ptr [esp+54h+var_1B] al +
lea ecx [esp+54h+var_1B] +
mov eax ebp +
call sub_416F40  +
test eax eax +
jns loc_41BC25  +
cmp edi 3 +
jnz loc_41BB56  +
mov eax ds:dword_486584 +
mov [esp+54h+var_50] offset aSJtagmkii_ge_2 +
mov [esp+54h+var_54] 0 +
mov [esp+54h+var_4C] eax +
call sub_401740  +
lea ecx [esp+54h+var_1B] +
mov edx 3 +
mov eax ebp +
mov byte ptr [esp+54h+var_1B] 0 +
call sub_416F40  +
test eax eax +
js loc_41BB56  +
mov edx 4 +
mov eax ebp +
call sub_417200  +
sub ebx 1 +
mov eax ds:dword_486584 +
jz loc_41BB10  +
mov [esp+54h+var_48] eax +
mov [esp+54h+var_4C] eax +
mov [esp+54h+var_50] offset aSTargetPrepare +
mov [esp+54h+var_54] 0 +
call sub_401740  +
jmp loc_41B7AE  +
mov [esp+54h+var_48] eax +
mov eax ds:dword_486584 +
mov [esp+54h+var_50] offset aSJtagmkii_ge_3 +
mov [esp+54h+var_54] 0 +
mov [esp+54h+var_4C] eax +
call sub_401740  +
sub edi 1 +
jnz loc_41B65B  +
lea esi [esi+0] +
test esi esi +
jle loc_41BB35  +
movzx eax bl +
call sub_4167F0  +
mov [esp+54h+var_50] offset aSJtagmkii_ge_4 +
mov [esp+54h+var_54] 0 +
mov [esp+54h+var_48] eax +
mov eax ds:dword_486584 +
mov [esp+54h+var_4C] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+54h+var_48] eax +
mov eax [esp+54h+var_1B+3] +
movzx eax byte ptr [eax] +
mov [esp+54h+var_50] offset a0x02xDBytesMsg +
mov [esp+54h+var_54] 2 +
mov [esp+54h+var_4C] eax +
call sub_401740  +
jmp loc_41B63A  +
mov [esp+54h+var_50] offset aJtagIceMkiiSig +
mov [esp+54h+var_54] 1 +
call sub_401740  +
mov eax [esp+54h+var_1B+3] +
movzx eax byte ptr [eax+1] +
mov [esp+54h+var_50] offset aCommunications +
mov [esp+54h+var_54] 1 +
mov [esp+54h+var_4C] eax +
call sub_401740  +
mov [esp+54h+var_50] offset aM_mcu +
mov [esp+54h+var_54] 1 +
call sub_401740  +
mov eax [esp+54h+var_1B+3] +
movzx eax byte ptr [eax+2] +
mov [esp+54h+var_50] offset aBootLoaderFwVe +
mov [esp+54h+var_54] 1 +
mov [esp+54h+var_4C] eax +
call sub_401740  +
mov eax [esp+54h+var_1B+3] +
movzx edx byte ptr [eax+3] +
mov [esp+54h+var_48] edx +
movzx eax byte ptr [eax+4] +
mov [esp+54h+var_50] offset aFirmwareVersio +
mov [esp+54h+var_54] 1 +
mov [esp+54h+var_4C] eax +
call sub_401740  +
mov eax [esp+54h+var_1B+3] +
movzx eax byte ptr [eax+5] +
mov [esp+54h+var_50] offset aHardwareVers_1 +
mov [esp+54h+var_54] 1 +
mov [esp+54h+var_4C] eax +
call sub_401740  +
mov [esp+54h+var_50] offset aS_mcu +
mov [esp+54h+var_54] 1 +
call sub_401740  +
mov eax [esp+54h+var_1B+3] +
movzx eax byte ptr [eax+6] +
mov [esp+54h+var_50] offset aBootLoaderFwVe +
mov [esp+54h+var_54] 1 +
mov [esp+54h+var_4C] eax +
call sub_401740  +
mov eax [esp+54h+var_1B+3] +
movzx edx byte ptr [eax+7] +
mov [esp+54h+var_48] edx +
movzx eax byte ptr [eax+8] +
mov [esp+54h+var_50] offset aFirmwareVersio +
mov [esp+54h+var_54] 1 +
mov [esp+54h+var_4C] eax +
call sub_401740  +
mov eax [esp+54h+var_1B+3] +
movzx eax byte ptr [eax+9] +
mov [esp+54h+var_50] offset aHardwareVers_1 +
mov [esp+54h+var_54] 1 +
mov [esp+54h+var_4C] eax +
call sub_401740  +
mov eax [ebp+0A5Ch] +
movzx edx byte ptr [eax+25h] +
mov [esp+54h+var_38] edx +
movzx edx byte ptr [eax+24h] +
mov [esp+54h+var_3C] edx +
movzx edx byte ptr [eax+23h] +
mov [esp+54h+var_40] edx +
movzx edx byte ptr [eax+22h] +
mov [esp+54h+var_44] edx +
movzx edx byte ptr [eax+21h] +
mov [esp+54h+var_48] edx +
movzx eax byte ptr [eax+20h] +
mov [esp+54h+var_50] offset aSerialNumber02 +
mov [esp+54h+var_54] 1 +
mov [esp+54h+var_4C] eax +
call sub_401740  +
mov eax [esp+54h+var_1B+3] +
mov byte ptr [eax+esi-1] 0 +
mov eax [esp+54h+var_1B+3] +
mov [esp+54h+var_50] offset aDeviceIdS +
mov [esp+54h+var_54] 1 +
add eax 10h +
mov [esp+54h+var_4C] eax +
call sub_401740  +
jmp loc_41B720  +
mov ecx esi +
test cl cl +
jz loc_41B73C  +
mov dword ptr [eax+2Ch] 128h +
mov eax ds:dword_486584 +
mov [esp+54h+var_50] offset aSJtagmkii_ge_5 +
mov [esp+54h+var_54] 0 +
mov [esp+54h+var_4C] eax +
call sub_401740  +
mov eax [ebp+0A5Ch] +
cmp [esp+54h+arg_4] 3 +
jnz loc_41B760  +
cmp ebx 40Dh +
mov dword ptr [eax+2Ch] 0 +
ja loc_41B7A0  +
mov eax esi +
test al al +
jz loc_41B7A0  +
mov eax ds:dword_486584 +
mov [esp+54h+var_50] offset aSJtagmkii_ge_6 +
mov [esp+54h+var_54] 0 +
mov [esp+54h+var_4C] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_41B8B6  +
mov [esp+54h+var_4C] eax +
mov [esp+54h+var_50] offset aSFailedToRetur +
mov [esp+54h+var_54] 0 +
call sub_401740  +
add esp 4Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+54h+var_48] esi +
mov eax ds:dword_486584 +
mov [esp+54h+var_50] offset aSJtagmkii_ge_7 +
mov [esp+54h+var_54] 0 +
mov [esp+54h+var_4C] eax +
call sub_401740  +
add esp 4Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov dword ptr [eax+2Ch] 128h +
jmp loc_41B755  +
mov eax esi +
test al al +
jz loc_41BB7C  +
cmp [esp+54h+arg_4] 6 +
jz loc_41BBC7  +
cmp ebx 524h +
jbe loc_41BD1C  +
cmp ebx 60Ah +
ja loc_41B7A0  +
mov edx [esp+54h+var_28] +
test edx edx +
jz loc_41B7A0  +
mov eax ds:dword_486584 +
mov [esp+54h+var_50] offset aSJtagmkii_ge_8 +
mov [esp+54h+var_54] 0 +
mov [esp+54h+var_4C] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_41B8B6  +
mov eax edi +
test al al +
jnz loc_41BB7C  +
mov eax ds:dword_486584 +
mov [esp+54h+var_50] offset aSJtagmkii_ge_9 +
mov [esp+54h+var_54] 0 +
mov [esp+54h+var_4C] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_41B8B6  +
add esp 4Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ds:dword_486584 +
mov [esp+54h+var_50] offset aSProgrammerIsN +
mov [esp+54h+var_54] 0 +
mov [esp+54h+var_4C] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_41B8B6  +
mov eax ds:dword_486584 +
mov [esp+54h+var_50] offset aSJtagmkii_g_10 +
mov [esp+54h+var_54] 2 +
mov byte ptr [esp+54h+var_1B] 0Fh +
mov [esp+54h+var_4C] eax +
call sub_401740  +
lea eax [esp+54h+var_1B] +
mov [esp+54h+var_4C] 1 +
mov [esp+54h+var_50] eax +
mov [esp+54h+var_54] ebp +
call sub_416840  +
lea eax [esp+54h+var_1B+3] +
mov [esp+54h+var_50] eax +
mov [esp+54h+var_54] ebp +
call sub_416970  +
test eax eax +
mov ebx eax +
jle loc_41BD4D  +
cmp ds:dword_486580 2 +
jg loc_41BCCF  +
jz loc_41BCF4  +
mov eax [esp+54h+var_1B+3] +
movzx ebx byte ptr [eax] +
mov [esp+54h+var_54] eax +
call free  +
cmp bl 80h +
jz loc_41BBF4  +
movzx eax bl +
call sub_4167F0  +
mov [esp+54h+var_50] offset aSJtagmkii_g_11 +
mov [esp+54h+var_54] 0 +
mov [esp+54h+var_48] eax +
mov eax ds:dword_486584 +
mov [esp+54h+var_4C] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_41B8B6  +
mov eax ds:_iob +
mov [esp+54h+var_54] 0Ah +
add eax 40h +
mov [esp+54h+var_50] eax +
call putc  +
mov eax [esp+54h+var_1B+3] +
mov edx ebx +
call sub_4162A0  +
jmp loc_41BC84  +
mov [esp+54h+var_48] eax +
mov eax [esp+54h+var_1B+3] +
movzx eax byte ptr [eax] +
mov [esp+54h+var_50] offset a0x02xDBytesMsg +
mov [esp+54h+var_54] 2 +
mov [esp+54h+var_4C] eax +
call sub_401740  +
jmp loc_41BC84  +
mov eax esi +
test al al +
jz loc_41BB88  +
mov eax ds:dword_486584 +
mov [esp+54h+var_50] offset aSJtagmkii_g_12 +
mov [esp+54h+var_54] 0 +
mov [esp+54h+var_4C] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_41B8B6  +
cmp ds:dword_486580 1 +
jle loc_41BD6E  +
mov eax ds:_iob +
mov [esp+54h+var_54] 0Ah +
add eax 40h +
mov [esp+54h+var_50] eax +
call putc  +
mov [esp+54h+var_48] ebx +
jmp loc_41BB39  +
***
mov edi offset aUsb_0 +
push esi  +
push ebx  +
sub esp 2Ch +
mov eax ds:dword_486584 +
mov ebp [esp+34h+arg_4] +
mov [esp+34h+var_30] offset aSJtagmkii_open +
mov ebx [esp+34h+arg_0] +
mov [esp+34h+var_34] 2 +
mov [esp+34h+var_2C] eax +
call sub_401740  +
mov esi ebp +
mov ecx 3 +
mov [esp+34h+var_1C] 4B00h +
cmps   +
jnz loc_41BE11  +
mov eax 3EBh +
xor edx edx +
mov ecx 2103h +
mov off_461140 offset off_461200 +
mov word ptr [esp+34h+var_1C] ax +
mov word ptr [esp+34h+var_18] dx +
mov word ptr [esp+34h+var_1C+2] cx +
mov dword ptr [ebx+8ACh] 40h +
mov dword ptr [ebx+8A0h] 82h +
mov dword ptr [ebx+8A4h] 2 +
mov dword ptr [ebx+8A8h] 0 +
lea eax [ebx+74h] +
mov [esp+34h+var_30] ebp +
lea edi [ebx+89Ch] +
mov [esp+34h+var_34] eax +
call strcpy  +
mov edx [esp+34h+var_1C] +
mov eax off_461140 +
mov eax [eax] +
mov [esp+34h+var_30] edx +
mov edx [esp+34h+var_18] +
mov [esp+34h+var_28] edi +
mov [esp+34h+var_34] ebp +
mov [esp+34h+var_2C] edx +
call eax  +
cmp eax 0FFFFFFFFh +
jz loc_41BE73  +
mov eax off_461140 +
mov eax [eax+14h] +
mov [esp+34h+var_30] 0 +
mov [esp+34h+var_34] edi +
call eax  +
mov [esp+34h+var_30] 1 +
mov [esp+34h+var_34] ebx +
call sub_41B5C0  +
sar eax 1Fh +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov edi offset aUsb_0 +
push esi  +
push ebx  +
sub esp 2Ch +
mov eax ds:dword_486584 +
mov ebp [esp+34h+arg_4] +
mov [esp+34h+var_30] offset aSJtagmkii_op_0 +
mov ebx [esp+34h+arg_0] +
mov [esp+34h+var_34] 2 +
mov [esp+34h+var_2C] eax +
call sub_401740  +
mov esi ebp +
mov ecx 3 +
mov [esp+34h+var_1C] 4B00h +
cmps   +
jnz loc_41BF11  +
mov eax 3EBh +
xor edx edx +
mov ecx 2103h +
mov off_461140 offset off_461200 +
mov word ptr [esp+34h+var_1C] ax +
mov word ptr [esp+34h+var_18] dx +
mov word ptr [esp+34h+var_1C+2] cx +
mov dword ptr [ebx+8ACh] 40h +
mov dword ptr [ebx+8A0h] 82h +
mov dword ptr [ebx+8A4h] 2 +
mov dword ptr [ebx+8A8h] 0 +
lea eax [ebx+74h] +
mov [esp+34h+var_30] ebp +
lea edi [ebx+89Ch] +
mov [esp+34h+var_34] eax +
call strcpy  +
mov edx [esp+34h+var_1C] +
mov eax off_461140 +
mov eax [eax] +
mov [esp+34h+var_30] edx +
mov edx [esp+34h+var_18] +
mov [esp+34h+var_28] edi +
mov [esp+34h+var_34] ebp +
mov [esp+34h+var_2C] edx +
call eax  +
cmp eax 0FFFFFFFFh +
jz loc_41BF73  +
mov eax off_461140 +
mov eax [eax+14h] +
mov [esp+34h+var_30] 0 +
mov [esp+34h+var_34] edi +
call eax  +
mov [esp+34h+var_30] 0 +
mov [esp+34h+var_34] ebx +
call sub_41B5C0  +
sar eax 1Fh +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov edi offset aUsb_0 +
push esi  +
push ebx  +
sub esp 2Ch +
mov eax ds:dword_486584 +
mov ebp [esp+34h+arg_4] +
mov [esp+34h+var_30] offset aSJtagmkii_op_1 +
mov ebx [esp+34h+arg_0] +
mov [esp+34h+var_34] 2 +
mov [esp+34h+var_2C] eax +
call sub_401740  +
mov esi ebp +
mov ecx 3 +
mov [esp+34h+var_1C] 4B00h +
cmps   +
jnz loc_41C011  +
mov eax 3EBh +
xor edx edx +
mov ecx 2103h +
mov off_461140 offset off_461200 +
mov word ptr [esp+34h+var_1C] ax +
mov word ptr [esp+34h+var_18] dx +
mov word ptr [esp+34h+var_1C+2] cx +
mov dword ptr [ebx+8ACh] 40h +
mov dword ptr [ebx+8A0h] 82h +
mov dword ptr [ebx+8A4h] 2 +
mov dword ptr [ebx+8A8h] 0 +
lea eax [ebx+74h] +
mov [esp+34h+var_30] ebp +
lea edi [ebx+89Ch] +
mov [esp+34h+var_34] eax +
call strcpy  +
mov edx [esp+34h+var_1C] +
mov eax off_461140 +
mov eax [eax] +
mov [esp+34h+var_30] edx +
mov edx [esp+34h+var_18] +
mov [esp+34h+var_28] edi +
mov [esp+34h+var_34] ebp +
mov [esp+34h+var_2C] edx +
call eax  +
cmp eax 0FFFFFFFFh +
jz loc_41C073  +
mov eax off_461140 +
mov eax [eax+14h] +
mov [esp+34h+var_30] 0 +
mov [esp+34h+var_34] edi +
call eax  +
mov [esp+34h+var_30] 6 +
mov [esp+34h+var_34] ebx +
call sub_41B5C0  +
sar eax 1Fh +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov edi offset aUsb_0 +
push esi  +
push ebx  +
sub esp 2Ch +
mov eax ds:dword_486584 +
mov ebp [esp+34h+arg_4] +
mov [esp+34h+var_30] offset aSJtagmkii_drag +
mov ebx [esp+34h+arg_0] +
mov [esp+34h+var_34] 2 +
mov [esp+34h+var_2C] eax +
call sub_401740  +
mov esi ebp +
mov ecx 3 +
mov [esp+34h+var_1C] 4B00h +
cmps   +
jnz loc_41C111  +
mov eax 3EBh +
xor edx edx +
mov ecx 2107h +
mov off_461140 offset off_461200 +
mov word ptr [esp+34h+var_1C] ax +
mov word ptr [esp+34h+var_18] dx +
mov word ptr [esp+34h+var_1C+2] cx +
mov dword ptr [ebx+8ACh] 40h +
mov dword ptr [ebx+8A0h] 82h +
mov dword ptr [ebx+8A4h] 2 +
mov dword ptr [ebx+8A8h] 0 +
lea eax [ebx+74h] +
mov [esp+34h+var_30] ebp +
lea edi [ebx+89Ch] +
mov [esp+34h+var_34] eax +
call strcpy  +
mov edx [esp+34h+var_1C] +
mov eax off_461140 +
mov eax [eax] +
mov [esp+34h+var_30] edx +
mov edx [esp+34h+var_18] +
mov [esp+34h+var_28] edi +
mov [esp+34h+var_34] ebp +
mov [esp+34h+var_2C] edx +
call eax  +
cmp eax 0FFFFFFFFh +
jz loc_41C173  +
mov eax off_461140 +
mov eax [eax+14h] +
mov [esp+34h+var_30] 0 +
mov [esp+34h+var_34] edi +
call eax  +
mov [esp+34h+var_30] 1 +
mov [esp+34h+var_34] ebx +
call sub_41B5C0  +
sar eax 1Fh +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov edi offset aUsb_0 +
push esi  +
push ebx  +
sub esp 2Ch +
mov eax ds:dword_486584 +
mov ebp [esp+34h+arg_4] +
mov [esp+34h+var_30] offset aSJtagmkii_dr_0 +
mov ebx [esp+34h+arg_0] +
mov [esp+34h+var_34] 2 +
mov [esp+34h+var_2C] eax +
call sub_401740  +
mov esi ebp +
mov ecx 3 +
mov [esp+34h+var_1C] 4B00h +
cmps   +
jnz loc_41C211  +
mov eax 3EBh +
xor edx edx +
mov ecx 2107h +
mov off_461140 offset off_461200 +
mov word ptr [esp+34h+var_1C] ax +
mov word ptr [esp+34h+var_18] dx +
mov word ptr [esp+34h+var_1C+2] cx +
mov dword ptr [ebx+8ACh] 40h +
mov dword ptr [ebx+8A0h] 82h +
mov dword ptr [ebx+8A4h] 2 +
mov dword ptr [ebx+8A8h] 0 +
lea eax [ebx+74h] +
mov [esp+34h+var_30] ebp +
lea edi [ebx+89Ch] +
mov [esp+34h+var_34] eax +
call strcpy  +
mov edx [esp+34h+var_1C] +
mov eax off_461140 +
mov eax [eax] +
mov [esp+34h+var_30] edx +
mov edx [esp+34h+var_18] +
mov [esp+34h+var_28] edi +
mov [esp+34h+var_34] ebp +
mov [esp+34h+var_2C] edx +
call eax  +
cmp eax 0FFFFFFFFh +
jz loc_41C273  +
mov eax off_461140 +
mov eax [eax+14h] +
mov [esp+34h+var_30] 0 +
mov [esp+34h+var_34] edi +
call eax  +
mov [esp+34h+var_30] 0 +
mov [esp+34h+var_34] ebx +
call sub_41B5C0  +
sar eax 1Fh +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov edi offset aUsb_0 +
push esi  +
push ebx  +
sub esp 3Ch +
mov eax ds:dword_486584 +
mov ebp [esp+44h+arg_4] +
mov [esp+44h+var_40] offset aSJtagmkii_op_2 +
mov ebx [esp+44h+arg_0] +
mov [esp+44h+var_44] 2 +
mov [esp+44h+var_3C] eax +
call sub_401740  +
mov esi ebp +
mov ecx 3 +
mov [esp+44h+var_1C] 4B00h +
cmps   +
jnz loc_41C311  +
mov eax 3EBh +
xor edx edx +
mov ecx 2103h +
mov off_461140 offset off_461200 +
mov word ptr [esp+44h+var_1C] ax +
mov word ptr [esp+44h+var_18] dx +
mov word ptr [esp+44h+var_1C+2] cx +
mov dword ptr [ebx+8ACh] 40h +
mov dword ptr [ebx+8A0h] 82h +
mov dword ptr [ebx+8A4h] 2 +
mov dword ptr [ebx+8A8h] 0 +
lea eax [ebx+74h] +
mov [esp+44h+var_40] ebp +
lea esi [ebx+89Ch] +
mov [esp+44h+var_44] eax +
call strcpy  +
mov edx [esp+44h+var_1C] +
mov eax off_461140 +
mov eax [eax] +
mov [esp+44h+var_40] edx +
mov edx [esp+44h+var_18] +
mov [esp+44h+var_38] esi +
mov [esp+44h+var_44] ebp +
mov [esp+44h+var_3C] edx +
call eax  +
cmp eax 0FFFFFFFFh +
jz loc_41C458  +
mov eax off_461140 +
mov eax [eax+14h] +
mov [esp+44h+var_40] 0 +
mov [esp+44h+var_44] esi +
call eax  +
mov [esp+44h+var_40] 0FFFFFFFFh +
mov [esp+44h+var_44] ebx +
call sub_41B5C0  +
test eax eax +
js loc_41C458  +
lea esi [esp+44h+var_22] +
mov [esp+44h+var_3C] 3 +
lea ebp [esp+44h+var_28] +
mov [esp+44h+var_40] esi +
mov [esp+44h+var_44] ebx +
mov byte ptr [esp+44h+var_22] 2 +
mov byte ptr [esp+44h+var_22+1] 2Dh +
mov byte ptr [esp+44h+var_22+2] 3 +
call sub_416840  +
mov [esp+44h+var_40] ebp +
mov [esp+44h+var_44] ebx +
call sub_416970  +
test eax eax +
js loc_41C458  +
mov eax [esp+44h+var_28] +
cmp byte ptr [eax] 80h +
jnz loc_41C458  +
mov [esp+44h+var_44] eax +
call free  +
mov [esp+44h+var_3C] 3 +
mov [esp+44h+var_40] esi +
mov [esp+44h+var_44] ebx +
mov byte ptr [esp+44h+var_22+1] 3 +
mov byte ptr [esp+44h+var_22+2] 2 +
call sub_416840  +
mov [esp+44h+var_40] ebp +
mov [esp+44h+var_44] ebx +
call sub_416970  +
test eax eax +
js loc_41C458  +
mov eax [esp+44h+var_28] +
cmp byte ptr [eax] 80h +
jnz loc_41C458  +
mov [esp+44h+var_44] eax +
call free  +
mov [esp+44h+var_3C] 3 +
mov [esp+44h+var_40] esi +
mov [esp+44h+var_44] ebx +
mov byte ptr [esp+44h+var_22+1] 3 +
mov byte ptr [esp+44h+var_22+2] 4 +
call sub_416840  +
mov [esp+44h+var_40] ebp +
mov [esp+44h+var_44] ebx +
call sub_416970  +
test eax eax +
js loc_41C458  +
mov eax [esp+44h+var_28] +
cmp byte ptr [eax] 80h +
jnz loc_41C458  +
mov [esp+44h+var_44] eax +
call free  +
add esp 3Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add esp 3Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov edi offset aUsb_0 +
push esi  +
push ebx  +
sub esp 2Ch +
mov eax ds:dword_486584 +
mov ebp [esp+34h+arg_4] +
mov [esp+34h+var_30] offset aSJtagmkii_dr_1 +
mov ebx [esp+34h+arg_0] +
mov [esp+34h+var_34] 2 +
mov [esp+34h+var_2C] eax +
call sub_401740  +
mov esi ebp +
mov ecx 3 +
mov [esp+34h+var_1C] 4B00h +
cmps   +
jnz loc_41C501  +
mov eax 3EBh +
xor edx edx +
mov ecx 2107h +
mov off_461140 offset off_461200 +
mov word ptr [esp+34h+var_1C] ax +
mov word ptr [esp+34h+var_18] dx +
mov word ptr [esp+34h+var_1C+2] cx +
mov dword ptr [ebx+8ACh] 40h +
mov dword ptr [ebx+8A0h] 82h +
mov dword ptr [ebx+8A4h] 2 +
mov dword ptr [ebx+8A8h] 0 +
lea eax [ebx+74h] +
mov [esp+34h+var_30] ebp +
lea edi [ebx+89Ch] +
mov [esp+34h+var_34] eax +
call strcpy  +
mov edx [esp+34h+var_1C] +
mov eax off_461140 +
mov eax [eax] +
mov [esp+34h+var_30] edx +
mov edx [esp+34h+var_18] +
mov [esp+34h+var_28] edi +
mov [esp+34h+var_34] ebp +
mov [esp+34h+var_2C] edx +
call eax  +
cmp eax 0FFFFFFFFh +
jz loc_41C563  +
mov eax off_461140 +
mov eax [eax+14h] +
mov [esp+34h+var_30] 0 +
mov [esp+34h+var_34] edi +
call eax  +
mov [esp+34h+var_30] 6 +
mov [esp+34h+var_34] ebx +
call sub_41B5C0  +
sar eax 1Fh +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
sub esp 24h +
mov eax ds:dword_486584 +
mov esi [esp+24h+arg_4] +
mov [esp+24h+var_20] offset aSJtagmkii_getp +
mov ebx [esp+24h+arg_0] +
mov [esp+24h+var_24] 2 +
mov [esp+24h+var_1C] eax +
call sub_401740  +
mov eax esi +
mov byte ptr [esp+24h+var_A+1] al +
movzx esi al +
mov eax ds:dword_486584 +
mov [esp+24h+var_18] esi +
mov [esp+24h+var_20] offset aSJtagmkii_g_13 +
mov [esp+24h+var_24] 2 +
mov [esp+24h+var_1C] eax +
mov byte ptr [esp+24h+var_A] 3 +
call sub_401740  +
lea eax [esp+24h+var_A] +
mov [esp+24h+var_24] ebx +
mov [esp+24h+var_1C] 2 +
mov [esp+24h+var_20] eax +
call sub_416840  +
lea eax [esp+24h+var_A+2] +
mov [esp+24h+var_24] ebx +
mov [esp+24h+var_20] eax +
call sub_416970  +
test eax eax +
mov ebx eax +
jle loc_41C6C0  +
cmp ds:dword_486580 2 +
jg loc_41C630  +
jz loc_41C655  +
mov edx [esp+24h+var_A+2] +
movzx eax byte ptr [edx] +
cmp al 81h +
jnz loc_41C680  +
mov ecx [edx+1] +
mov eax [esp+24h+arg_8] +
mov [eax] ecx +
mov [esp+24h+var_24] edx +
call free  +
xor eax eax +
add esp 24h +
pop ebx  +
pop esi  +
retn   +
mov eax ds:_iob +
mov [esp+24h+var_24] 0Ah +
add eax 40h +
mov [esp+24h+var_20] eax +
call putc  +
mov eax [esp+24h+var_A+2] +
mov edx ebx +
call sub_4162A0  +
jmp loc_41C606  +
mov [esp+24h+var_18] eax +
mov eax [esp+24h+var_A+2] +
movzx eax byte ptr [eax] +
mov [esp+24h+var_20] offset a0x02xDBytesMsg +
mov [esp+24h+var_24] 2 +
mov [esp+24h+var_1C] eax +
call sub_401740  +
jmp loc_41C606  +
call sub_4167F0  +
mov [esp+24h+var_20] offset aSJtagmkii_g_14 +
mov [esp+24h+var_24] 0 +
mov [esp+24h+var_18] eax +
mov eax ds:dword_486584 +
mov [esp+24h+var_1C] eax +
call sub_401740  +
mov eax [esp+24h+var_A+2] +
mov [esp+24h+var_24] eax +
call free  +
mov eax 0FFFFFFFFh +
jmp loc_41C624  +
cmp ds:dword_486580 1 +
jle loc_41C6E1  +
mov eax ds:_iob +
mov [esp+24h+var_24] 0Ah +
add eax 40h +
mov [esp+24h+var_20] eax +
call putc  +
mov eax ds:dword_486584 +
mov [esp+24h+var_18] ebx +
mov [esp+24h+var_20] offset aSJtagmkii_g_15 +
mov [esp+24h+var_24] 0 +
mov [esp+24h+var_1C] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_41C624  +
***
push ebx  +
mov ebx eax +
sub esp 44h +
lea eax [esp+48h+var_24] +
mov dword ptr [esp+48h+var_40] eax +
mov [esp+48h+var_44] 6 +
mov [esp+48h+var_48] ebx +
call sub_41C570  +
test eax eax +
js loc_41C77A  +
movzx eax byte ptr [esp+48h+var_24+1] +
movzx edx byte ptr [esp+48h+var_24] +
mov dword ptr [esp+48h+var_40] esi +
mov [esp+48h+var_44] offset aSvtarget_1fV +
shl eax 8 +
add eax edx +
movzx eax ax +
mov [esp+48h+var_30] eax +
fild  [esp+48h+var_30] +
fdiv  ds:flt_470544 +
mov [esp+48h+var_48] 0 +
fstp  [esp+48h+var_40+4] +
call sub_401740  +
test byte ptr [ebx+0A60h] 4 +
jnz loc_41C780  +
add esp 44h +
pop ebx  +
pop esi  +
retn   +
lea eax [esp+48h+var_20] +
mov dword ptr [esp+48h+var_40] eax +
mov [esp+48h+var_44] 7 +
mov [esp+48h+var_48] ebx +
call sub_41C570  +
test eax eax +
js loc_41C77A  +
movzx eax byte ptr [esp+48h+var_20] +
test al al +
jz loc_41C77A  +
cmp al 1 +
jz loc_41C77A  +
mov [esp+48h+var_2A] ax +
cmp al 5 +
fild  [esp+48h+var_2A] +
jbe loc_41C813  +
fdivr  ds:flt_470550 +
lea ebx [esp+48h+var_1C] +
mov [esp+48h+var_44] offset a_1fKhz +
mov [esp+48h+var_48] ebx +
fstp  [esp+48h+var_40] +
call sprintf  +
movzx eax byte ptr [esp+48h+var_20] +
mov dword ptr [esp+48h+var_40+4] ebx +
mov dword ptr [esp+48h+var_40] esi +
mov [esp+48h+var_44] offset aSjtagClockS_1f +
mov [esp+48h+var_2A] ax +
mov [esp+48h+var_48] 0 +
fild  [esp+48h+var_2A] +
fdivr  ds:flt_470540 +
fdivr  ds:flt_470554 +
fstp  [esp+48h+var_38] +
call sub_401740  +
jmp loc_41C77A  +
fdivr  ds:dbl_470548 +
lea eax [esp+48h+var_1C] +
mov [esp+48h+var_44] offset a_1fMhz +
mov [esp+48h+var_48] eax +
fstp  [esp+48h+var_40] +
call sprintf  +
jmp loc_41C77A  +
***
mov eax [esp+arg_0] +
mov edx offset unk_46EBFD +
jmp sub_41C710  +
***
push esi  +
push esi  +
push ebx  +
sub esp 16Ch +
mov eax [esp+16Ch+arg_0] +
mov ebp [esp+16Ch+arg_4] +
movzx eax byte ptr [eax+0A60h] +
test al 1 +
jz loc_41CF16  +
test byte ptr [ebp+84h] 40h +
jnz loc_41CF2E  +
mov eax offset aDebugwire_0 +
mov dword ptr [esp+16Ch+var_160+4] eax +
mov eax ds:dword_486584 +
mov dword ptr [esp+16Ch+var_160] ebp +
mov dword ptr [esp+16Ch+var_168] offset aSJtagmkii_in_3 +
mov [esp+16Ch+var_16C] 0 +
mov dword ptr [esp+16Ch+var_168+4] eax +
call sub_401740  +
add esp 16Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test al 2 +
jz loc_41D435  +
test dword ptr [ebp+84h] 2080h +
jz loc_41D778  +
mov edx off_461140 +
test byte ptr [edx+1Ch] 1 +
jz loc_41CFB0  +
mov esi [esp+16Ch+arg_0] +
mov edx [esi+480h] +
test edx edx +
jz loc_41CFB0  +
cmp edx 4B00h +
jz loc_41CFB0  +
cmp edx 960h +
jz loc_41DA4E  +
mov eax 1 +
cmp edx ds:dword_470220[eax*8] +
jz loc_41DA50  +
add eax 1 +
cmp eax 8 +
jnz loc_41CF64  +
mov byte ptr [esp+16Ch+var_13D] 0 +
mov eax ds:dword_486584 +
mov dword ptr [esp+16Ch+var_160] edx +
mov dword ptr [esp+16Ch+var_168] offset aSJtagmkii_in_4 +
mov [esp+16Ch+var_16C] 0 +
mov dword ptr [esp+16Ch+var_168+4] eax +
call sub_401740  +
mov eax [esp+16Ch+arg_0] +
movzx eax byte ptr [eax+0A60h] +
lea esi [esi+0] +
test al 4 +
jz loc_41D045  +
mov eax [esp+16Ch+arg_0] +
fld  qword ptr [eax+890h] +
fldz   +
fxch  st(1) +
fucomi st st(1) +
fstp  st(1) +
jp loc_41D921  +
jnz loc_41D921  +
fstp  st +
mov eax [esp+16Ch+arg_0] +
mov edx 1Bh +
mov eax [eax+0A5Ch] +
mov [esp+16Ch+var_154] eax +
lea ecx [eax+26h] +
mov eax [esp+16Ch+arg_0] +
call sub_416F40  +
test eax eax +
js loc_41DBFB  +
mov eax [esp+16Ch+arg_0] +
mov edx [ebp+84h] +
test byte ptr [eax+0A60h] 4 +
jz loc_41D04B  +
test edx 2080h +
jz loc_41D04B  +
mov eax [esp+16Ch+arg_0] +
mov dword ptr [esp+16Ch+var_168] 5 +
mov [esp+16Ch+var_16C] eax +
call sub_41B5C0  +
test eax eax +
js loc_41CF06  +
mov edx [ebp+84h] +
mov eax [esp+16Ch+arg_0] +
mov eax [eax+0A5Ch] +
cmp dword ptr [eax+34h] 6FFh +
jbe loc_41D06D  +
test edx 2080h +
jnz loc_41D4C2  +
xor eax eax +
mov ecx 4Ah +
lea edi [esp+16Ch+var_138] +
mov [esp+16Ch+var_150] edi +
stos   +
movzx eax byte ptr [ebp+136h] +
xor ecx ecx +
mov [edi] cx +
mov byte ptr [edi+2] 0 +
mov [esp+16Ch+var_46] al +
movzx eax byte ptr [ebp+135h] +
mov byte ptr [esp+16Ch+var_138] 0Ch +
mov [esp+16Ch+var_45] al +
movzx eax byte ptr [ebp+134h] +
mov [esp+16Ch+var_47] al +
movzx eax word ptr [ebp+138h] +
mov [esp+16Ch+var_F] al +
shr ax 8 +
mov [esp+16Ch+var_E] al +
mov eax edx +
shr eax 4 +
and eax 1 +
mov [esp+16Ch+var_1A] al +
mov eax [ebp+17Ch] +
shr edx 5 +
and edx 1 +
mov [esp+16Ch+var_17] dl +
mov [esp+16Ch+var_16C] eax +
call sub_406F20  +
mov [esp+16Ch+var_154] offset aFlash_6 +
test eax eax +
mov ebx eax +
jnz loc_41D207  +
jmp loc_41D25C  +
mov eax [eax+48h] +
cmp eax 100h +
jle loc_41D420  +
mov eax [esp+16Ch+arg_0] +
mov eax [eax+0A5Ch] +
mov dword ptr [eax+0Ch] 100h +
mov eax [edx+44h] +
mov esi edx +
mov ecx eax +
shr ecx 8 +
mov [esp+16Ch+var_3A] cl +
mov ecx eax +
mov [esp+16Ch+var_3B] al +
shr ecx 10h +
shr eax 18h +
mov [esp+16Ch+var_39] cl +
mov [esp+16Ch+var_38] al +
movzx eax word ptr [edx+48h] +
mov [esp+16Ch+var_44] al +
shr ax 8 +
mov [esp+16Ch+var_43] al +
mov eax [edx+44h] +
cdq   +
idiv  dword ptr [esi+48h] +
movzx eax ax +
mov [esp+16Ch+var_1E] al +
shr ax 8 +
test byte ptr [ebp+84h] 40h +
mov [esp+16Ch+var_1D] al +
jz loc_41D1F9  +
movzx eax word ptr [ebp+0D4h] +
mov [esp+16Ch+var_23] ax +
movzx eax byte ptr [ebp+0D6h] +
mov [esp+16Ch+var_21] al +
mov eax [ebp+0D7h] +
mov [esp+16Ch+var_37] eax +
mov eax [ebp+0DBh] +
mov [esp+16Ch+var_33] eax +
mov eax [ebp+0DFh] +
mov [esp+16Ch+var_2F] eax +
mov eax [ebp+0E3h] +
mov [esp+16Ch+var_2B] eax +
mov eax [ebp+0E7h] +
mov [esp+16Ch+var_27] eax +
mov [esp+16Ch+var_16C] ebx +
call sub_406F40  +
test eax eax +
mov ebx eax +
jz loc_41D25C  +
mov [esp+16Ch+var_16C] ebx +
call sub_406F60  +
mov edi [esp+16Ch+var_154] +
mov ecx 6 +
mov esi eax +
mov edx eax +
cmps   +
jz loc_41D110  +
mov edi offset aEeprom_4 +
mov esi eax +
mov ecx 7 +
cmps   +
jnz loc_41D1F9  +
mov esi [esp+16Ch+arg_0] +
mov eax [eax+48h] +
mov edx [esi+0A5Ch] +
mov [edx+18h] eax +
mov [esp+16Ch+var_16C] ebx +
mov [esp+16Ch+var_42] al +
call sub_406F40  +
test eax eax +
mov ebx eax +
jnz loc_41D207  +
mov eax [ebp+84h] +
mov dword ptr [esp+16Ch+var_168] offset aSJtagmkii_set_ +
mov [esp+16Ch+var_16C] 2 +
and eax 2080h +
cmp eax 1 +
sbb eax eax +
not eax  +
and eax 2 +
mov [esp+16Ch+var_16] al +
mov eax ds:dword_486584 +
mov dword ptr [esp+16Ch+var_168+4] eax +
call sub_401740  +
mov eax [esp+16Ch+arg_0] +
mov eax [eax+0A5Ch] +
mov eax [eax+2Ch] +
add eax 1 +
mov dword ptr [esp+16Ch+var_168+4] eax +
mov eax [esp+16Ch+var_150] +
mov dword ptr [esp+16Ch+var_168] eax +
mov eax [esp+16Ch+arg_0] +
mov [esp+16Ch+var_16C] eax +
call sub_416840  +
lea eax [esp+16Ch+var_13D+1] +
mov dword ptr [esp+16Ch+var_168] eax +
mov eax [esp+16Ch+arg_0] +
mov [esp+16Ch+var_16C] eax +
call sub_416970  +
test eax eax +
mov ebx eax +
jle loc_41D703  +
cmp ds:dword_486580 2 +
jg loc_41D750  +
jz loc_41DA01  +
mov edx [esp+16Ch+var_13D+1] +
movzx ebx byte ptr [edx] +
mov [esp+16Ch+var_16C] edx +
call free  +
cmp bl 80h +
jz loc_41D334  +
movzx eax bl +
call sub_4167F0  +
mov dword ptr [esp+16Ch+var_168] offset aSJtagmkii_se_6 +
mov [esp+16Ch+var_16C] 0 +
mov dword ptr [esp+16Ch+var_160] eax +
mov eax ds:dword_486584 +
mov dword ptr [esp+16Ch+var_168+4] eax +
call sub_401740  +
mov eax [esp+16Ch+arg_0] +
test dword ptr [ebp+84h] 2080h +
mov eax [eax+0A5Ch] +
mov dword ptr [eax+30h] 0FFFFFFFFh +
jnz loc_41D6A7  +
mov eax [eax+4] +
mov [esp+16Ch+var_16C] eax +
call free  +
mov eax [esp+16Ch+arg_0] +
mov eax [eax+0A5Ch] +
mov eax [eax+10h] +
mov [esp+16Ch+var_16C] eax +
call free  +
mov eax [esp+16Ch+arg_0] +
mov ebx [eax+0A5Ch] +
mov eax [ebx+0Ch] +
mov [esp+16Ch+var_16C] eax +
call malloc  +
test eax eax +
mov [ebx+4] eax +
jz loc_41DB95  +
mov eax [ebx+18h] +
mov [esp+16Ch+var_16C] eax +
call malloc  +
test eax eax +
mov [ebx+10h] eax +
jz loc_41DBBC  +
cmp dword ptr [ebx+34h] 6FFh +
mov dword ptr [ebx+14h] 0FFFFFFFFh +
mov dword ptr [ebx+8] 0FFFFFFFFh +
jbe loc_41D3D7  +
test dword ptr [ebp+84h] 2080h +
jnz loc_41D3F0  +
mov eax [esp+16Ch+arg_0] +
mov edx 1 +
call sub_417200  +
test eax eax +
js loc_41CF06  +
mov eax [esp+16Ch+arg_0] +
test byte ptr [eax+0A60h] 4 +
jz loc_41D40C  +
test dword ptr [ebp+84h] 2080h +
jz loc_41D450  +
xor eax eax +
add esp 16Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi [esp+16Ch+arg_0] +
mov ecx [esi+0A5Ch] +
mov [ecx+0Ch] eax +
jmp loc_41D132  +
test byte ptr [ebp+84h] 8 +
jnz loc_41CF2E  +
mov eax offset aJtag_0 +
jmp loc_41CEE1  +
mov eax 65h +
mov [esp+16Ch+var_134] ax +
lea eax [esp+16Ch+var_13D] +
mov dword ptr [esp+16Ch+var_160+4] eax +
mov eax [esp+16Ch+var_150] +
mov dword ptr [esp+16Ch+var_160] 1 +
mov dword ptr [esp+16Ch+var_168] ebp +
mov [esp+16Ch+var_138] 73756668h +
mov dword ptr [esp+16Ch+var_168+4] eax +
mov eax [esp+16Ch+arg_0] +
mov [esp+16Ch+var_16C] eax +
call sub_41C850  +
test eax eax +
js loc_41CF06  +
cmp byte ptr [esp+16Ch+var_13D] 0 +
jns loc_41D40C  +
mov eax ds:dword_486584 +
mov dword ptr [esp+16Ch+var_168] offset aSJtagmkii_in_5 +
mov [esp+16Ch+var_16C] 0 +
mov dword ptr [esp+16Ch+var_168+4] eax +
call sub_401740  +
jmp loc_41D40C  +
xor eax eax +
mov ecx 0Ch +
lea edi [esp+16Ch+var_138] +
mov [esp+16Ch+var_150] edi +
stos   +
movzx eax word ptr [ebp+140h] +
mov byte ptr [edi+2] 0 +
mov [esp+16Ch+var_109] al +
shr ax 8 +
mov [esp+16Ch+var_108] al +
movzx eax word ptr [ebp+13Ch] +
mov byte ptr [esp+16Ch+var_138] 36h +
mov byte ptr [esp+16Ch+var_138+1] 2 +
mov byte ptr [esp+16Ch+var_138+3] 2Fh +
mov [esp+16Ch+var_107] al +
shr ax 8 +
mov [esp+16Ch+var_106] al +
mov eax [ebp+17Ch] +
mov [esp+16Ch+var_16C] eax +
call sub_406F20  +
mov [esp+16Ch+var_154] offset aFlash_6 +
test eax eax +
mov ebx eax +
jz loc_41D5F1  +
mov [esp+16Ch+arg_4] ebp +
mov ebp [esp+16Ch+arg_0] +
jmp loc_41D578  +
mov eax [eax+48h] +
mov edx [ebp+0A5Ch] +
cmp eax 100h +
jle loc_41D8D0  +
mov dword ptr [edx+0Ch] 100h +
movzx eax ax +
mov [esp+16Ch+var_10E] al +
shr ax 8 +
mov [esp+16Ch+var_10D] al +
mov [esp+16Ch+var_16C] ebx +
call sub_406F40  +
test eax eax +
mov ebx eax +
jz loc_41D5EA  +
mov [esp+16Ch+var_16C] ebx +
call sub_406F60  +
mov edi [esp+16Ch+var_154] +
mov ecx 6 +
mov esi eax +
mov edx eax +
cmps   +
jz loc_41D540  +
mov edi offset aEeprom_4 +
mov esi eax +
mov ecx 7 +
cmps   +
jnz loc_41D874  +
mov eax [eax+48h] +
mov [esp+16Ch+var_10A] al +
movzx eax word ptr [edx+44h] +
mov [esp+16Ch+var_10C] al +
shr ax 8 +
mov [esp+16Ch+var_10B] al +
mov eax [edx+50h] +
mov [esp+16Ch+var_16C] ebx +
mov edx eax +
shr edx 8 +
mov [esp+16Ch+var_12B] dl +
mov edx eax +
shr edx 10h +
mov [esp+16Ch+var_12C] al +
shr eax 18h +
mov [esp+16Ch+var_12A] dl +
mov [esp+16Ch+var_129] al +
call sub_406F40  +
test eax eax +
mov ebx eax +
jnz loc_41D578  +
mov ebp [esp+16Ch+arg_4] +
mov eax ds:dword_486584 +
mov dword ptr [esp+16Ch+var_168] offset aSJtagmkii_se_7 +
mov [esp+16Ch+var_16C] 2 +
mov dword ptr [esp+16Ch+var_168+4] eax +
call sub_401740  +
mov eax [esp+16Ch+var_150] +
mov dword ptr [esp+16Ch+var_168+4] 33h +
mov dword ptr [esp+16Ch+var_168] eax +
mov eax [esp+16Ch+arg_0] +
mov [esp+16Ch+var_16C] eax +
call sub_416840  +
lea eax [esp+16Ch+var_13D+1] +
mov dword ptr [esp+16Ch+var_168] eax +
mov eax [esp+16Ch+arg_0] +
mov [esp+16Ch+var_16C] eax +
call sub_416970  +
test eax eax +
mov ebx eax +
jle loc_41D82D  +
cmp ds:dword_486580 2 +
jg loc_41DAB1  +
jz loc_41DB34  +
mov eax [esp+16Ch+var_13D+1] +
movzx ebx byte ptr [eax] +
mov [esp+16Ch+var_16C] eax +
call free  +
cmp bl 80h +
jz loc_41D334  +
movzx eax bl +
call sub_4167F0  +
mov dword ptr [esp+16Ch+var_168] offset aSJtagmkii_se_8 +
mov [esp+16Ch+var_16C] 0 +
mov dword ptr [esp+16Ch+var_160] eax +
mov eax ds:dword_486584 +
mov dword ptr [esp+16Ch+var_168+4] eax +
call sub_401740  +
jmp loc_41D334  +
mov dword ptr [esp+16Ch+var_168] offset aBoot_1 +
mov [esp+16Ch+var_16C] ebp +
call sub_407980  +
mov dword ptr [esp+16Ch+var_168] offset aFlash_6 +
mov [esp+16Ch+var_16C] ebp +
mov esi eax +
call sub_407980  +
test eax eax +
mov ebx eax +
jz loc_41D782  +
test esi esi +
jz loc_41D782  +
mov eax [esp+16Ch+arg_0] +
mov eax [eax+0A5Ch] +
cmp dword ptr [eax+34h] 6FFh +
jbe loc_41D7B1  +
mov edx [esi+50h] +
sub edx [ebx+50h] +
mov [eax+30h] edx +
jmp loc_41D358  +
cmp ds:dword_486580 1 +
jle loc_41D724  +
mov eax ds:_iob +
mov [esp+16Ch+var_16C] 0Ah +
add eax 40h +
mov dword ptr [esp+16Ch+var_168] eax +
call putc  +
mov eax ds:dword_486584 +
mov dword ptr [esp+16Ch+var_160] ebx +
mov dword ptr [esp+16Ch+var_168] offset aSJtagmkii_se_9 +
mov [esp+16Ch+var_16C] 0 +
mov dword ptr [esp+16Ch+var_168+4] eax +
call sub_401740  +
jmp loc_41D334  +
mov eax ds:_iob +
mov [esp+16Ch+var_16C] 0Ah +
add eax 40h +
mov dword ptr [esp+16Ch+var_168] eax +
call putc  +
mov eax [esp+16Ch+var_13D+1] +
mov edx ebx +
call sub_4162A0  +
jmp loc_41D2F7  +
mov eax offset aPdi +
jmp loc_41CEE1  +
mov eax ds:dword_486584 +
mov dword ptr [esp+16Ch+var_168] offset aSJtagmkii_in_6 +
mov [esp+16Ch+var_16C] 0 +
mov dword ptr [esp+16Ch+var_168+4] eax +
call sub_401740  +
mov eax [esp+16Ch+arg_0] +
mov eax [eax+0A5Ch] +
jmp loc_41D358  +
mov eax [ebx+50h] +
mov edi [esp+16Ch+var_150] +
mov edx eax +
shr edx 8 +
mov ecx edi +
mov byte ptr [esp+16Ch+var_138] al +
mov byte ptr [esp+16Ch+var_138+1] dl +
mov edx eax +
shr eax 18h +
mov byte ptr [esp+16Ch+var_138+3] al +
mov eax [esp+16Ch+arg_0] +
shr edx 10h +
mov byte ptr [esp+16Ch+var_138+2] dl +
mov edx 32h +
call sub_416F40  +
mov eax [esi+50h] +
mov ecx edi +
mov edx eax +
shr edx 8 +
mov byte ptr [esp+16Ch+var_138] al +
mov byte ptr [esp+16Ch+var_138+1] dl +
mov edx eax +
shr eax 18h +
mov byte ptr [esp+16Ch+var_138+3] al +
mov eax [esp+16Ch+arg_0] +
shr edx 10h +
mov byte ptr [esp+16Ch+var_138+2] dl +
mov edx 33h +
call sub_416F40  +
mov eax [esp+16Ch+arg_0] +
mov eax [eax+0A5Ch] +
jmp loc_41D6F5  +
cmp ds:dword_486580 1 +
jle loc_41D84E  +
mov eax ds:_iob +
mov [esp+16Ch+var_16C] 0Ah +
add eax 40h +
mov dword ptr [esp+16Ch+var_168] eax +
call putc  +
mov eax ds:dword_486584 +
mov dword ptr [esp+16Ch+var_160] ebx +
mov dword ptr [esp+16Ch+var_168] offset aSJtagmkii_s_10 +
mov [esp+16Ch+var_16C] 0 +
mov dword ptr [esp+16Ch+var_168+4] eax +
call sub_401740  +
jmp loc_41D334  +
mov edi offset aApplication_2 +
mov ecx 0Ch +
mov esi eax +
cmps   +
jnz loc_41D8D8  +
mov eax [eax+44h] +
mov ecx eax +
shr ecx 8 +
mov [esp+16Ch+var_113] cl +
mov ecx eax +
mov [esp+16Ch+var_114] al +
shr ecx 10h +
shr eax 18h +
mov [esp+16Ch+var_112] cl +
mov [esp+16Ch+var_111] al +
mov eax [edx+50h] +
mov edx eax +
shr edx 8 +
mov byte ptr [esp+16Ch+var_134+1] dl +
mov edx eax +
mov byte ptr [esp+16Ch+var_134] al +
shr edx 10h +
shr eax 18h +
mov [esp+16Ch+var_132] dl +
mov [esp+16Ch+var_131] al +
jmp loc_41D56A  +
mov [edx+0Ch] eax +
jmp loc_41D55B  +
mov edi offset aBoot_1 +
mov ecx 5 +
mov esi eax +
cmps   +
jnz loc_41D980  +
movzx eax word ptr [eax+44h] +
mov [esp+16Ch+var_110] al +
shr ax 8 +
mov [esp+16Ch+var_10F] al +
mov eax [edx+50h] +
mov edx eax +
shr edx 8 +
mov [esp+16Ch+var_12F] dl +
mov edx eax +
mov [esp+16Ch+var_130] al +
shr edx 10h +
shr eax 18h +
mov [esp+16Ch+var_12E] dl +
mov [esp+16Ch+var_12D] al +
jmp loc_41D56A  +
mov eax ds:dword_486584 +
fstp  [esp+16Ch+var_160] +
mov dword ptr [esp+16Ch+var_168] offset aSJtagmkii_in_7 +
mov [esp+16Ch+var_16C] 2 +
mov dword ptr [esp+16Ch+var_168+4] eax +
call sub_401740  +
mov eax [esp+16Ch+arg_0] +
fld  qword ptr [eax+890h] +
fstp  [esp+16Ch+var_168] +
mov [esp+16Ch+var_16C] eax +
call sub_417160  +
test eax eax +
jnz loc_41CF06  +
mov eax [esp+16Ch+arg_0] +
test byte ptr [eax+0A60h] 4 +
jz loc_41D045  +
jmp loc_41CFDB  +
mov edi offset aFuse1 +
mov esi eax +
mov ecx 6 +
cmps   +
jnz loc_41D9B8  +
mov eax [eax+50h] +
and eax 0FFFFFFF8h +
mov edx eax +
shr edx 8 +
mov [esp+16Ch+var_127] dl +
mov edx eax +
mov [esp+16Ch+var_128] al +
shr edx 10h +
shr eax 18h +
mov [esp+16Ch+var_126] dl +
mov [esp+16Ch+var_125] al +
jmp loc_41D56A  +
mov edi offset aLock_2 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_41DA29  +
mov edi offset aUsersig +
mov ecx 8 +
mov esi eax +
cmps   +
jnz loc_41DAFF  +
mov eax [eax+50h] +
mov edx eax +
shr edx 8 +
mov [esp+16Ch+var_11F] dl +
mov edx eax +
mov [esp+16Ch+var_120] al +
shr edx 10h +
shr eax 18h +
mov [esp+16Ch+var_11E] dl +
mov [esp+16Ch+var_11D] al +
jmp loc_41D56A  +
mov dword ptr [esp+16Ch+var_160] eax +
mov eax [esp+16Ch+var_13D+1] +
movzx eax byte ptr [eax] +
mov dword ptr [esp+16Ch+var_168] offset a0x02xDBytesMsg +
mov [esp+16Ch+var_16C] 2 +
mov dword ptr [esp+16Ch+var_168+4] eax +
call sub_401740  +
jmp loc_41D2F7  +
mov eax [eax+50h] +
mov edx eax +
shr edx 8 +
mov [esp+16Ch+var_123] dl +
mov edx eax +
mov [esp+16Ch+var_124] al +
shr edx 10h +
shr eax 18h +
mov [esp+16Ch+var_122] dl +
mov [esp+16Ch+var_121] al +
jmp loc_41D56A  +
xor eax eax +
movzx eax ds:byte_470224[eax*8] +
test al al +
mov byte ptr [esp+16Ch+var_13D] al +
jz loc_41CF7E  +
mov eax ds:dword_486584 +
mov dword ptr [esp+16Ch+var_160] edx +
mov dword ptr [esp+16Ch+var_168] offset aSJtagmkii_in_8 +
mov [esp+16Ch+var_16C] 2 +
mov dword ptr [esp+16Ch+var_168+4] eax +
call sub_401740  +
mov eax [esp+16Ch+arg_0] +
lea ecx [esp+16Ch+var_13D] +
mov edx 5 +
call sub_416F40  +
test eax eax +
jz loc_41DAD9  +
mov eax [esp+16Ch+arg_0] +
movzx eax byte ptr [eax+0A60h] +
jmp loc_41CFB0  +
mov eax ds:_iob +
mov [esp+16Ch+var_16C] 0Ah +
add eax 40h +
mov dword ptr [esp+16Ch+var_168] eax +
call putc  +
mov eax [esp+16Ch+var_13D+1] +
mov edx ebx +
call sub_4162A0  +
jmp loc_41D661  +
mov esi [esp+16Ch+arg_0] +
mov eax off_461140 +
mov edx [esi+480h] +
mov eax [eax+4] +
mov dword ptr [esp+16Ch+var_168] edx +
lea edx [esi+89Ch] +
mov [esp+16Ch+var_16C] edx +
call eax  +
jmp loc_41DA9E  +
mov edi offset aProdsig +
mov ecx 8 +
mov esi eax +
cmps   +
jnz loc_41DB5C  +
mov eax [eax+50h] +
mov edx eax +
shr edx 8 +
mov [esp+16Ch+var_11B] dl +
mov edx eax +
mov [esp+16Ch+var_11C] al +
shr edx 10h +
shr eax 18h +
mov [esp+16Ch+var_11A] dl +
mov [esp+16Ch+var_119] al +
jmp loc_41D56A  +
mov dword ptr [esp+16Ch+var_160] eax +
mov eax [esp+16Ch+var_13D+1] +
movzx eax byte ptr [eax] +
mov dword ptr [esp+16Ch+var_168] offset a0x02xDBytesMsg +
mov [esp+16Ch+var_16C] 2 +
mov dword ptr [esp+16Ch+var_168+4] eax +
call sub_401740  +
jmp loc_41D661  +
mov edi offset aData_0 +
mov ecx 5 +
mov esi eax +
cmps   +
jnz loc_41D56A  +
mov eax [eax+50h] +
mov edx eax +
shr edx 8 +
mov [esp+16Ch+var_117] dl +
mov edx eax +
mov [esp+16Ch+var_118] al +
shr edx 10h +
shr eax 18h +
mov [esp+16Ch+var_116] dl +
mov [esp+16Ch+var_115] al +
jmp loc_41D56A  +
mov eax ds:dword_486584 +
mov dword ptr [esp+16Ch+var_168] offset aSJtagmkii_in_1 +
mov [esp+16Ch+var_16C] 0 +
mov dword ptr [esp+16Ch+var_168+4] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_41D40E  +
mov eax ds:dword_486584 +
mov dword ptr [esp+16Ch+var_168] offset aSJtagmkii_in_1 +
mov [esp+16Ch+var_16C] 0 +
mov dword ptr [esp+16Ch+var_168+4] eax +
call sub_401740  +
mov eax [esp+16Ch+arg_0] +
mov eax [eax+0A5Ch] +
mov eax [eax+4] +
mov [esp+16Ch+var_16C] eax +
call free  +
mov eax 0FFFFFFFFh +
jmp loc_41D40E  +
mov eax ds:dword_486584 +
mov dword ptr [esp+16Ch+var_168] offset aSJtagmkii_in_0 +
mov [esp+16Ch+var_16C] 0 +
mov dword ptr [esp+16Ch+var_168+4] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_41D40E  +
***
sub esp 44h +
mov eax [esp+arg_0] +
mov dword ptr [eax+54h] 4741544Ah +
mov dword ptr [eax+58h] 49494B4Dh +
mov byte ptr [eax+5Ch] 0 +
mov dword ptr [eax+8C8h] offset sub_41CEB0 +
mov dword ptr [eax+8CCh] offset sub_41DC30 +
mov dword ptr [eax+8D0h] offset dword_415F90 +
mov dword ptr [eax+8D4h] offset sub_418240 +
mov dword ptr [eax+8E0h] offset sub_415F80 +
mov dword ptr [eax+8E4h] offset sub_418DA0 +
mov dword ptr [eax+8F8h] offset sub_41BD80 +
mov dword ptr [eax+8FCh] offset sub_4173B0 +
mov dword ptr [eax+914h] offset sub_41C850 +
mov dword ptr [eax+910h] offset sub_4182A0 +
mov dword ptr [eax+900h] offset sub_418750 +
mov dword ptr [eax+904h] offset sub_417BE0 +
mov dword ptr [eax+908h] offset sub_417880 +
mov dword ptr [eax+920h] offset sub_41C840 +
mov dword ptr [eax+930h] offset sub_417160 +
mov dword ptr [eax+948h] offset sub_415FF0 +
mov dword ptr [eax+94Ch] offset sub_416180 +
mov dword ptr [eax+950h] offset sub_415FD0 +
mov dword ptr [eax+8B4h] 100h +
mov byte ptr [eax+0A60h] 4 +
retn   +
***
mov eax [esp+arg_0] +
mov dword ptr [eax+54h] 4741544Ah +
mov dword ptr [eax+58h] 49494B4Dh +
mov dword ptr [eax+5Ch] 57445Fh +
mov dword ptr [eax+8C8h] offset sub_41CEB0 +
mov dword ptr [eax+8CCh] offset sub_41DC30 +
mov dword ptr [eax+8D0h] offset dword_415F90 +
mov dword ptr [eax+8D4h] offset sub_418240 +
mov dword ptr [eax+8E0h] offset sub_415F80 +
mov dword ptr [eax+8E4h] offset sub_415FA0 +
mov dword ptr [eax+8F8h] offset sub_41BE80 +
mov dword ptr [eax+8FCh] offset sub_4173B0 +
mov dword ptr [eax+914h] offset sub_41C850 +
mov dword ptr [eax+910h] offset sub_4182A0 +
mov dword ptr [eax+900h] offset sub_418750 +
mov dword ptr [eax+904h] offset sub_417BE0 +
mov dword ptr [eax+920h] offset sub_41C840 +
mov dword ptr [eax+94Ch] offset sub_416180 +
mov dword ptr [eax+950h] offset sub_415FD0 +
mov dword ptr [eax+8B4h] 100h +
mov byte ptr [eax+0A60h] 1 +
retn   +
***
jmp sub_41DF20  +
***
mov eax [esp+arg_0] +
mov dword ptr [eax+54h] 4741544Ah +
mov dword ptr [eax+58h] 49494B4Dh +
mov dword ptr [eax+5Ch] 4944505Fh +
mov byte ptr [eax+60h] 0 +
mov dword ptr [eax+8C8h] offset sub_41CEB0 +
mov dword ptr [eax+8CCh] offset sub_41DC30 +
mov dword ptr [eax+8D0h] offset dword_415F90 +
mov dword ptr [eax+8D4h] offset sub_418240 +
mov dword ptr [eax+8E0h] offset sub_415F80 +
mov dword ptr [eax+8E4h] offset sub_418DA0 +
mov dword ptr [eax+8F8h] offset sub_41BF80 +
mov dword ptr [eax+8FCh] offset sub_4173B0 +
mov dword ptr [eax+914h] offset sub_41C850 +
mov dword ptr [eax+910h] offset sub_4182A0 +
mov dword ptr [eax+900h] offset sub_418750 +
mov dword ptr [eax+904h] offset sub_417BE0 +
mov dword ptr [eax+908h] offset sub_417880 +
mov dword ptr [eax+920h] offset sub_41C840 +
mov dword ptr [eax+94Ch] offset sub_416180 +
mov dword ptr [eax+950h] offset sub_415FD0 +
mov dword ptr [eax+8B4h] 100h +
mov byte ptr [eax+0A60h] 2 +
retn   +
***
mov eax [esp+arg_0] +
mov dword ptr [eax+54h] 47415244h +
mov dword ptr [eax+58h] 4A5F4E4Fh +
mov dword ptr [eax+5Ch] offset aXpected0 +
mov dword ptr [eax+8C8h] offset sub_41CEB0 +
mov dword ptr [eax+8CCh] offset sub_41DC30 +
mov dword ptr [eax+8D0h] offset dword_415F90 +
mov dword ptr [eax+8D4h] offset sub_418240 +
mov dword ptr [eax+8E0h] offset sub_415F80 +
mov dword ptr [eax+8E4h] offset sub_418DA0 +
mov dword ptr [eax+8F8h] offset sub_41C080 +
mov dword ptr [eax+8FCh] offset sub_4173B0 +
mov dword ptr [eax+914h] offset sub_41C850 +
mov dword ptr [eax+910h] offset sub_4182A0 +
mov dword ptr [eax+900h] offset sub_418750 +
mov dword ptr [eax+904h] offset sub_417BE0 +
mov dword ptr [eax+908h] offset sub_417880 +
mov dword ptr [eax+920h] offset sub_41C840 +
mov dword ptr [eax+930h] offset sub_417160 +
mov dword ptr [eax+948h] offset sub_415FF0 +
mov dword ptr [eax+94Ch] offset sub_416180 +
mov dword ptr [eax+950h] offset sub_415FD0 +
mov dword ptr [eax+8B4h] 100h +
mov byte ptr [eax+0A60h] 4 +
retn   +
***
mov eax [esp+arg_0] +
mov edx 57h +
mov dword ptr [eax+54h] 47415244h +
mov dword ptr [eax+58h] 445F4E4Fh +
mov [eax+5Ch] dx +
mov dword ptr [eax+8C8h] offset sub_41CEB0 +
mov dword ptr [eax+8CCh] offset sub_41DC30 +
mov dword ptr [eax+8D0h] offset dword_415F90 +
mov dword ptr [eax+8D4h] offset sub_418240 +
mov dword ptr [eax+8E0h] offset sub_415F80 +
mov dword ptr [eax+8E4h] offset sub_415FA0 +
mov dword ptr [eax+8F8h] offset sub_41C180 +
mov dword ptr [eax+8FCh] offset sub_4173B0 +
mov dword ptr [eax+914h] offset sub_41C850 +
mov dword ptr [eax+910h] offset sub_4182A0 +
mov dword ptr [eax+900h] offset sub_418750 +
mov dword ptr [eax+904h] offset sub_417BE0 +
mov dword ptr [eax+920h] offset sub_41C840 +
mov dword ptr [eax+94Ch] offset sub_416180 +
mov dword ptr [eax+950h] offset sub_415FD0 +
mov dword ptr [eax+8B4h] 100h +
mov byte ptr [eax+0A60h] 1 +
retn   +
***
mov eax [esp+arg_0] +
mov edx 3233h +
mov dword ptr [eax+54h] 4741544Ah +
mov dword ptr [eax+58h] 49494B4Dh +
mov dword ptr [eax+5Ch] 5256415Fh +
mov [eax+60h] dx +
mov byte ptr [eax+62h] 0 +
mov dword ptr [eax+8C8h] offset sub_41B2D0 +
mov dword ptr [eax+8CCh] offset sub_41DC30 +
mov dword ptr [eax+8D0h] offset dword_415F90 +
mov dword ptr [eax+8D4h] offset sub_418240 +
mov dword ptr [eax+8E0h] offset sub_415F80 +
mov dword ptr [eax+8E4h] offset sub_41B0D0 +
mov dword ptr [eax+8F8h] offset sub_41C280 +
mov dword ptr [eax+8FCh] offset sub_41AEC0 +
mov dword ptr [eax+914h] offset sub_41C850 +
mov dword ptr [eax+910h] offset sub_4182A0 +
mov dword ptr [eax+900h] offset sub_41A6F0 +
mov dword ptr [eax+904h] offset sub_41A3F0 +
mov dword ptr [eax+920h] offset sub_41C840 +
mov dword ptr [eax+94Ch] offset sub_416180 +
mov dword ptr [eax+950h] offset sub_415FD0 +
mov dword ptr [eax+8B4h] 100h +
mov byte ptr [eax+0A60h] 4 +
retn   +
***
mov eax [esp+arg_0] +
mov edx 4944h +
mov dword ptr [eax+54h] 47415244h +
mov dword ptr [eax+58h] 505F4E4Fh +
mov [eax+5Ch] dx +
mov byte ptr [eax+5Eh] 0 +
mov dword ptr [eax+8C8h] offset sub_41CEB0 +
mov dword ptr [eax+8CCh] offset sub_41DC30 +
mov dword ptr [eax+8D0h] offset dword_415F90 +
mov dword ptr [eax+8D4h] offset sub_418240 +
mov dword ptr [eax+8E0h] offset sub_415F80 +
mov dword ptr [eax+8E4h] offset sub_418DA0 +
mov dword ptr [eax+8F8h] offset sub_41C470 +
mov dword ptr [eax+8FCh] offset sub_4173B0 +
mov dword ptr [eax+914h] offset sub_41C850 +
mov dword ptr [eax+910h] offset sub_4182A0 +
mov dword ptr [eax+900h] offset sub_418750 +
mov dword ptr [eax+904h] offset sub_417BE0 +
mov dword ptr [eax+908h] offset sub_417880 +
mov dword ptr [eax+920h] offset sub_41C840 +
mov dword ptr [eax+94Ch] offset sub_416180 +
mov dword ptr [eax+950h] offset sub_415FD0 +
mov dword ptr [eax+8B4h] 100h +
mov byte ptr [eax+0A60h] 2 +
retn   +
***
sub esp 1Ch +
mov eax ds:dword_486584 +
mov [esp+1Ch+var_18] offset aSStk500v2_page +
mov [esp+1Ch+var_1C] 0 +
mov [esp+1Ch+var_14] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
add esp 1Ch +
retn   +
***
mov [esp+18h+var_14] offset aStk500v2Stk500 +
mov ebx [esp+18h+arg_0] +
mov [esp+18h+var_18] 5 +
call sub_401740  +
mov eax off_461140 +
lea edx [ebx+89Ch] +
mov eax [eax+8] +
mov [esp+18h+var_18] edx +
call eax  +
mov dword ptr [ebx+89Ch] 0FFFFFFFFh +
add esp 18h +
pop ebx  +
retn   +
***
sub esp 1Ch +
mov eax ds:dword_486584 +
mov [esp+1Ch+var_18] offset aSStk500v2_jtag +
mov [esp+1Ch+var_1C] 0 +
mov [esp+1Ch+var_14] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
add esp 1Ch +
retn   +
***
mov eax [esp+arg_0] +
mov eax [eax+0A5Ch] +
mov [esp+arg_0] eax +
jmp free  +
***
push edi  +
push esi  +
mov esi eax +
push ebx  +
sub esp 3Ch +
mov edi [eax+0A5Ch] +
mov [esp+48h+var_2C] ecx +
mov eax [edi+28h] +
mov [esi+0A5Ch] eax +
lea eax [esp+48h+var_1C] +
mov [esp+48h+var_44] eax +
mov [esp+48h+var_48] esi +
call sub_42BFE0  +
mov ecx [esp+48h+var_2C] +
mov [esi+0A5Ch] edi +
test eax eax +
mov ebx eax +
jle loc_41E505  +
lea eax [eax-1] +
cmp eax ecx +
ja loc_41E4A0  +
mov esi [esp+48h+var_1C] +
movzx eax byte ptr [esi] +
cmp al 11h +
jnz loc_41E4D1  +
lea edx [ebx-1] +
lea eax [esi+1] +
mov [esp+48h+var_40] edx +
mov [esp+48h+var_44] eax +
mov [esp+48h+var_48] ebp +
call memcpy  +
mov [esp+48h+var_48] esi +
call free  +
mov eax ebx +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+48h+var_3C] eax +
mov eax ds:dword_486584 +
mov [esp+48h+var_38] ecx +
mov [esp+48h+var_44] offset aSStk500v2_jt_0 +
mov [esp+48h+var_48] 3 +
mov [esp+48h+var_40] eax +
mov [esp+48h+var_2C] ecx +
call sub_401740  +
mov ecx [esp+48h+var_2C] +
mov ebx ecx +
jmp loc_41E469  +
mov [esp+48h+var_3C] eax +
mov eax ds:dword_486584 +
mov [esp+48h+var_44] offset aSStk500v2_jt_1 +
mov [esp+48h+var_48] 0 +
mov [esp+48h+var_40] eax +
call sub_401740  +
mov eax [esp+48h+var_1C] +
mov [esp+48h+var_48] eax +
call free  +
mov eax 0FFFFFFFFh +
jmp loc_41E494  +
mov eax ds:dword_486584 +
mov [esp+48h+var_44] offset aSStk500v2_jt_2 +
mov [esp+48h+var_48] 0 +
mov [esp+48h+var_40] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_41E494  +
***
push ebx  +
sub esp 10h +
mov ebx [esp+10h+arg_0] +
mov esi [esp+10h+arg_4] +
mov eax [ebx+0A5Ch] +
mov eax [eax+1Ch] +
sub eax 3 +
cmp eax 2 +
jbe loc_41E5E0  +
mov eax [esi+84h] +
mov dword ptr [ebx+8E0h] offset sub_421B20 +
mov dword ptr [ebx+8D4h] offset sub_421F20 +
mov dword ptr [ebx+914h] offset sub_403EA0 +
mov dword ptr [ebx+910h] offset sub_4042F0 +
mov dword ptr [ebx+904h] offset sub_421260 +
mov dword ptr [ebx+900h] offset sub_4214F0 +
mov dword ptr [ebx+908h] offset sub_41E360 +
mov dword ptr [ebx+8E4h] offset sub_421A30 +
test ah 10h +
jz loc_41E5C5  +
mov eax [ebx+8D4h] +
mov [esp+10h+var_10] ebx +
call eax  +
mov [esp+10h+var_10] 2710h +
call sub_459150  +
mov eax [ebx+8E0h] +
mov [esp+10h+arg_4] esi +
mov [esp+10h+arg_0] ebx +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
jmp eax  +
mov eax [esi+84h] +
test eax 880h +
jz loc_41E559  +
test al 80h +
jnz loc_41E650  +
mov dword ptr [ebx+8E0h] offset sub_4231F0 +
mov dword ptr [ebx+8D4h] offset sub_423190 +
mov dword ptr [ebx+914h] offset sub_422F70 +
mov dword ptr [ebx+910h] offset sub_422BC0 +
mov dword ptr [ebx+904h] offset sub_422800 +
mov dword ptr [ebx+900h] offset sub_422290 +
mov dword ptr [ebx+908h] offset sub_422100 +
mov dword ptr [ebx+8E4h] offset sub_422030 +
jmp loc_41E5A9  +
mov [esp+10h+var_C] offset aBoot_2 +
mov [esp+10h+var_10] esi +
call sub_407980  +
mov [esp+10h+var_C] offset aFlash_7 +
mov [esp+10h+var_10] esi +
mov edi eax +
call sub_407980  +
test eax eax +
jz loc_41E694  +
test edi edi +
jz loc_41E694  +
mov edx [edi+50h] +
mov ecx [ebx+0A5Ch] +
sub edx [eax+50h] +
mov eax [esi+84h] +
mov [ecx+24h] edx +
jmp loc_41E5F5  +
mov eax ds:dword_486584 +
mov [esp+10h+var_C] offset aSStk500v2_init +
mov [esp+10h+var_10] 0 +
mov [esp+10h+var_8] eax +
call sub_401740  +
mov eax [esi+84h] +
jmp loc_41E5F5  +
***
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [esp+3Ch+arg_4] +
mov ebp [esp+3Ch+arg_0] +
test dword ptr [eax+84h] 880h +
jnz loc_41E933  +
mov ebx [ebp+0A5Ch] +
lea esi [esp+3Ch+var_10] +
mov eax [ebx+28h] +
mov [ebp+0A5Ch] eax +
mov eax [esp+3Ch+arg_4] +
mov eax [eax+84h] +
mov [esp+3Ch+var_28] 1 +
mov [esp+3Ch+var_2C] esi +
mov [esp+3Ch+var_30] 0 +
and eax 40h +
cmp eax 1 +
sbb eax eax +
not eax  +
add eax 2 +
mov [esp+3Ch+var_34] 0 +
mov [esp+3Ch+var_38] 12h +
mov [esp+3Ch+var_3C] ebp +
mov byte ptr [esp+3Ch+var_10] al +
call sub_42F2A0  +
test eax eax +
js loc_41E920  +
mov [esp+3Ch+var_28] 1 +
mov [esp+3Ch+var_2C] esi +
mov [esp+3Ch+var_30] 1 +
mov [esp+3Ch+var_34] 0 +
mov [esp+3Ch+var_38] 12h +
mov [esp+3Ch+var_3C] ebp +
mov byte ptr [esp+3Ch+var_10] 1 +
call sub_42F2A0  +
test eax eax +
js loc_41E920  +
mov [esp+3Ch+var_28] 1 +
mov [esp+3Ch+var_2C] esi +
mov [esp+3Ch+var_30] 0 +
mov [esp+3Ch+var_34] 1 +
mov [esp+3Ch+var_38] 12h +
mov [esp+3Ch+var_3C] ebp +
mov byte ptr [esp+3Ch+var_10] 1 +
call sub_42F2A0  +
test eax eax +
js loc_41E920  +
mov [esp+3Ch+var_34] 2 +
mov [esp+3Ch+var_38] esi +
mov [esp+3Ch+var_3C] ebp +
mov byte ptr [esp+3Ch+var_10] 11h +
mov byte ptr [esp+3Ch+var_10+1] 1Eh +
call sub_42BEC0  +
lea eax [esp+3Ch+var_14] +
mov [esp+3Ch+var_38] eax +
mov [esp+3Ch+var_3C] ebp +
call sub_42BFE0  +
test eax eax +
jle loc_41E7F1  +
mov eax [esp+3Ch+var_14] +
mov [esp+3Ch+var_3C] eax +
call free  +
mov eax [esp+3Ch+arg_4] +
mov [ebp+0A5Ch] ebx +
mov dword ptr [ebx+8] 2 +
mov dword ptr [ebx+14h] 1 +
mov eax [eax+17Ch] +
mov [esp+3Ch+var_3C] eax +
call sub_406F20  +
test eax eax +
mov ebx eax +
jnz loc_41E84D  +
jmp loc_41E893  +
mov eax [eax+48h] +
test eax eax +
jle loc_41E83F  +
cmp eax 100h +
jle loc_41E910  +
mov eax [ebp+0A5Ch] +
mov dword ptr [eax+8] 100h +
mov [esp+3Ch+var_3C] ebx +
call sub_406F40  +
test eax eax +
mov ebx eax +
jz loc_41E893  +
mov [esp+3Ch+var_3C] ebx +
mov edi offset aFlash_7 +
call sub_406F60  +
mov ecx 6 +
mov esi eax +
cmps   +
jz loc_41E820  +
mov edi offset aEeprom_5 +
mov esi eax +
mov ecx 7 +
cmps   +
jnz loc_41E83F  +
mov eax [eax+48h] +
test eax eax +
jle loc_41E83F  +
mov edx [ebp+0A5Ch] +
mov [edx+14h] eax +
mov [esp+3Ch+var_3C] ebx +
call sub_406F40  +
test eax eax +
mov ebx eax +
jnz loc_41E84D  +
mov eax [ebp+0A5Ch] +
mov eax [eax] +
mov [esp+3Ch+var_3C] eax +
call free  +
mov eax [ebp+0A5Ch] +
mov eax [eax+0Ch] +
mov [esp+3Ch+var_3C] eax +
call free  +
mov ebx [ebp+0A5Ch] +
mov eax [ebx+8] +
mov [esp+3Ch+var_3C] eax +
call malloc  +
test eax eax +
mov [ebx] eax +
jz loc_41E992  +
mov eax [ebx+14h] +
mov [esp+3Ch+var_3C] eax +
call malloc  +
test eax eax +
mov [ebx+0Ch] eax +
jz loc_41E95B  +
mov edi [esp+3Ch+arg_4] +
mov eax [ebp+8E0h] +
mov dword ptr [ebx+10h] 0FFFFFFFFh +
mov dword ptr [ebx+4] 0FFFFFFFFh +
mov [esp+3Ch+var_38] edi +
mov [esp+3Ch+var_3C] ebp +
call eax  +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edx [ebp+0A5Ch] +
mov [edx+8] eax +
jmp loc_41E83F  +
mov [ebp+0A5Ch] ebx +
add esp 3Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+3Ch+var_30] eax +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_38] offset aSJtag3_initial +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_41E902  +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_38] offset aSStk500hv_init +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov eax [ebp+0A5Ch] +
mov eax [eax] +
mov [esp+3Ch+var_3C] eax +
call free  +
mov eax 0FFFFFFFFh +
jmp loc_41E902  +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_38] offset aSStk500hv_init +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_41E902  +
***
mov eax [esp+18h+arg_0] +
mov ebx [eax+0A5Ch] +
mov edx [ebx+28h] +
mov [eax+0A5Ch] edx +
mov [esp+18h+var_18] eax +
call sub_415FD0  +
mov [esp+18h+arg_0] ebx +
add esp 18h +
pop ebx  +
jmp free  +
***
sub esp 14h +
mov eax ds:dword_486584 +
mov ebx [esp+14h+arg_0] +
mov [esp+14h+var_10] offset aSStk500v2_jt_8 +
mov [esp+14h+var_14] 2 +
mov [esp+14h+var_C] eax +
call sub_401740  +
mov esi [ebx+0A5Ch] +
mov eax [esi+28h] +
mov [ebx+0A5Ch] eax +
mov [esp+14h+var_14] ebx +
call sub_4173B0  +
mov [ebx+0A5Ch] esi +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
***
mov edi offset aUsb_1 +
mov edi offset aUsb_1 +
push esi  +
push ebx  +
sub esp 2Ch +
mov eax ds:dword_486584 +
mov ebp [esp+34h+arg_4] +
mov dword ptr [esp+34h+var_30] offset aSStk500v2_drag +
mov ebx [esp+34h+arg_0] +
mov [esp+34h+var_34] 2 +
mov dword ptr [esp+34h+var_30+4] eax +
call sub_401740  +
mov esi ebp +
mov ecx 3 +
mov [esp+34h+var_1C] 4B00h +
cmps   +
jnz loc_41EC51  +
mov eax 3EBh +
xor edx edx +
mov ecx 2107h +
mov off_461140 offset off_461200 +
mov word ptr [esp+34h+var_1C] ax +
mov word ptr [esp+34h+var_18] dx +
mov word ptr [esp+34h+var_1C+2] cx +
mov dword ptr [ebx+8ACh] 40h +
mov dword ptr [ebx+8A0h] 82h +
mov dword ptr [ebx+8A4h] 2 +
mov dword ptr [ebx+8A8h] 0 +
lea eax [ebx+74h] +
mov dword ptr [esp+34h+var_30] ebp +
lea edi [ebx+89Ch] +
mov [esp+34h+var_34] eax +
call strcpy  +
mov edx [esp+34h+var_1C] +
mov eax off_461140 +
mov eax [eax] +
mov dword ptr [esp+34h+var_30] edx +
mov edx [esp+34h+var_18] +
mov [esp+34h+var_28] edi +
mov [esp+34h+var_34] ebp +
mov dword ptr [esp+34h+var_30+4] edx +
call eax  +
cmp eax 0FFFFFFFFh +
jz loc_41ECE4  +
mov eax off_461140 +
mov eax [eax+14h] +
mov dword ptr [esp+34h+var_30] 0 +
mov [esp+34h+var_34] edi +
call eax  +
mov ebp [ebx+0A5Ch] +
mov eax [ebp+28h] +
mov [ebx+0A5Ch] eax +
mov dword ptr [esp+34h+var_30] 3 +
mov [esp+34h+var_34] ebx +
call sub_41B5C0  +
test eax eax +
jnz loc_41ED11  +
fld  qword ptr [ebx+890h] +
fldz   +
fxch  st(1) +
fucomi st st(1) +
fstp  st(1) +
mov [ebx+0A5Ch] ebp +
mov dword ptr [ebp+1Ch] 4 +
jp loc_41ECF0  +
jnz loc_41ECF0  +
fstp  st +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx+930h] +
fstp  [esp+34h+var_30] +
mov [esp+34h+var_34] ebx +
call eax  +
test eax eax +
setnz al  +
add esp 2Ch +
movzx eax al +
pop ebx  +
neg eax  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ds:dword_486584 +
mov dword ptr [esp+34h+var_30] offset aSFailedToSyn_0 +
mov [esp+34h+var_34] 0 +
mov dword ptr [esp+34h+var_30+4] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
mov [ebx+0A5Ch] ebp +
jmp loc_41ECE4  +
***
mov edi offset aUsb_1 +
push esi  +
push ebx  +
sub esp 2Ch +
mov eax ds:dword_486584 +
mov ebp [esp+34h+arg_4] +
mov dword ptr [esp+34h+var_30] offset aSStk500v2_dr_0 +
mov ebx [esp+34h+arg_0] +
mov [esp+34h+var_34] 2 +
mov dword ptr [esp+34h+var_30+4] eax +
call sub_401740  +
mov esi ebp +
mov ecx 3 +
mov [esp+34h+var_1C] 4B00h +
cmps   +
jnz loc_41EDD1  +
mov eax 3EBh +
xor edx edx +
mov ecx 2107h +
mov off_461140 offset off_461200 +
mov word ptr [esp+34h+var_1C] ax +
mov word ptr [esp+34h+var_18] dx +
mov word ptr [esp+34h+var_1C+2] cx +
mov dword ptr [ebx+8ACh] 40h +
mov dword ptr [ebx+8A0h] 82h +
mov dword ptr [ebx+8A4h] 2 +
mov dword ptr [ebx+8A8h] 0 +
lea eax [ebx+74h] +
mov dword ptr [esp+34h+var_30] ebp +
lea edi [ebx+89Ch] +
mov [esp+34h+var_34] eax +
call strcpy  +
mov edx [esp+34h+var_1C] +
mov eax off_461140 +
mov eax [eax] +
mov dword ptr [esp+34h+var_30] edx +
mov edx [esp+34h+var_18] +
mov [esp+34h+var_28] edi +
mov [esp+34h+var_34] ebp +
mov dword ptr [esp+34h+var_30+4] edx +
call eax  +
cmp eax 0FFFFFFFFh +
jz loc_41EE64  +
mov eax off_461140 +
mov eax [eax+14h] +
mov dword ptr [esp+34h+var_30] 0 +
mov [esp+34h+var_34] edi +
call eax  +
mov ebp [ebx+0A5Ch] +
mov eax [ebp+28h] +
mov [ebx+0A5Ch] eax +
mov dword ptr [esp+34h+var_30] 2 +
mov [esp+34h+var_34] ebx +
call sub_41B5C0  +
test eax eax +
jnz loc_41EE91  +
fld  qword ptr [ebx+890h] +
fldz   +
fxch  st(1) +
fucomi st st(1) +
fstp  st(1) +
mov [ebx+0A5Ch] ebp +
mov dword ptr [ebp+1Ch] 4 +
jp loc_41EE70  +
jnz loc_41EE70  +
fstp  st +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx+930h] +
fstp  [esp+34h+var_30] +
mov [esp+34h+var_34] ebx +
call eax  +
test eax eax +
setnz al  +
add esp 2Ch +
movzx eax al +
pop ebx  +
neg eax  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ds:dword_486584 +
mov dword ptr [esp+34h+var_30] offset aSFailedToSyn_1 +
mov [esp+34h+var_34] 0 +
mov dword ptr [esp+34h+var_30+4] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
mov [ebx+0A5Ch] ebp +
jmp loc_41EE64  +
***
mov eax [esp+18h+arg_0] +
mov ebx [eax+0A5Ch] +
mov edx [ebx+28h] +
mov [eax+0A5Ch] edx +
mov [esp+18h+var_18] eax +
call sub_42B840  +
mov [esp+18h+arg_0] ebx +
add esp 18h +
pop ebx  +
jmp free  +
***
sub esp 14h +
mov eax ds:dword_486584 +
mov ebx [esp+14h+arg_0] +
mov [esp+14h+var_10] offset aSStk500v2_j_10 +
mov [esp+14h+var_14] 2 +
mov [esp+14h+var_C] eax +
call sub_401740  +
mov esi [ebx+0A5Ch] +
mov eax [esi+28h] +
mov [ebx+0A5Ch] eax +
mov [esp+14h+var_14] ebx +
call sub_42CF90  +
mov [ebx+0A5Ch] esi +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
***
sub esp 14h +
mov eax ds:dword_486584 +
mov dword ptr [esp+14h+var_10] offset aSStk500v2_j_11 +
mov ebx [esp+14h+arg_0] +
mov [esp+14h+var_14] 2 +
mov dword ptr [esp+14h+var_10+4] eax +
call sub_401740  +
mov eax [esp+14h+arg_4] +
mov [esp+14h+var_14] ebx +
mov dword ptr [esp+14h+var_10] eax +
call sub_42E8E0  +
test eax eax +
js loc_41F020  +
mov esi [ebx+0A5Ch] +
mov eax [esi+28h] +
mov [ebx+0A5Ch] eax +
mov dword ptr [esp+14h+var_10] 2Ah +
mov [esp+14h+var_14] ebx +
call sub_42E830  +
test eax eax +
jnz loc_41EFF0  +
fld  qword ptr [ebx+890h] +
fldz   +
fxch  st(1) +
fucomi st st(1) +
fstp  st(1) +
mov [ebx+0A5Ch] esi +
mov dword ptr [esi+1Ch] 6 +
jp loc_41EFD0  +
jnz loc_41EFD0  +
fstp  st +
xor eax eax +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov eax [ebx+930h] +
fstp  [esp+14h+var_10] +
mov [esp+14h+var_14] ebx +
call eax  +
test eax eax +
setnz al  +
add esp 14h +
movzx eax al +
neg eax  +
pop ebx  +
pop esi  +
retn   +
cmp eax 0FFFFFFFEh +
jz loc_41F012  +
mov eax ds:dword_486584 +
mov dword ptr [esp+14h+var_10] offset aSFailedToSyn_2 +
mov [esp+14h+var_14] 0 +
mov dword ptr [esp+14h+var_10+4] eax +
call sub_401740  +
mov [ebx+0A5Ch] esi +
mov eax 0FFFFFFFFh +
jmp loc_41EFC4  +
mov eax 0FFFFFFFFh +
jmp loc_41EFC4  +
***
sub esp 1Ch +
cmp eax 10h +
mov edx eax +
jz loc_41F0B0  +
jbe loc_41F064  +
cmp edx 40h +
mov eax 0Ch +
jz loc_41F060  +
jbe loc_41F0A3  +
cmp edx 80h +
mov eax 0Eh +
jz loc_41F060  +
xor al al +
cmp edx 100h +
jnz loc_41F07C  +
nop   +
add esp 1Ch +
retn   +
cmp edx 4 +
mov eax 4 +
jz loc_41F060  +
cmp edx 8 +
mov al 6 +
jz loc_41F060  +
cmp edx 2 +
mov al 2 +
jz loc_41F060  +
mov eax ds:dword_486584 +
mov [esp+1Ch+var_10] edx +
mov [esp+1Ch+var_18] offset aSStk500v2_mode +
mov [esp+1Ch+var_1C] 0 +
mov [esp+1Ch+var_14] eax +
call sub_401740  +
xor eax eax +
add esp 1Ch +
retn   +
cmp edx 20h +
mov al 0Ah +
jnz loc_41F07C  +
add esp 1Ch +
retn   +
mov eax 8 +
add esp 1Ch +
retn   +
***
mov [esp+18h+var_18] 2Ch +
call malloc  +
mov edx eax +
mov eax [esp+18h+arg_0] +
test edx edx +
mov [eax+0A5Ch] edx +
jz loc_41F0FB  +
mov ecx 0Bh +
xor eax eax +
mov edi edx +
stos   +
mov byte ptr [edx+18h] 1 +
mov dword ptr [edx+24h] 0FFFFFFFFh +
add esp 18h +
pop edi  +
retn   +
mov eax ds:dword_486584 +
mov [esp+18h+var_14] offset aSStk500v2_setu +
mov [esp+18h+var_18] 0 +
mov [esp+18h+var_10] eax +
call sub_401740  +
mov [esp+18h+var_18] 1 +
call exit  +
***
push edi  +
push esi  +
mov esi eax +
push ebx  +
sub esp 1Ch +
lea edi [ecx+1] +
mov [esp+28h+var_28] edi +
mov [esp+28h+var_1C] edx +
call malloc  +
mov edx [esp+28h+var_1C] +
test eax eax +
mov ebx eax +
jz loc_41F1AB  +
mov ecx [esi+0A5Ch] +
mov eax [ecx+28h] +
mov [esp+28h+var_24] edx +
mov [esp+28h+var_20] ebp +
mov [esp+28h+var_1C] ecx +
mov [esi+0A5Ch] eax +
lea eax [ebx+1] +
mov [esp+28h+var_28] eax +
mov byte ptr [ebx] 11h +
call memcpy  +
mov [esp+28h+var_20] edi +
mov [esp+28h+var_24] ebx +
mov [esp+28h+var_28] esi +
call sub_42BEC0  +
mov [esp+28h+var_28] ebx +
mov edi eax +
call free  +
mov ecx [esp+28h+var_1C] +
mov eax edi +
mov [esi+0A5Ch] ecx +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ds:dword_486584 +
mov [esp+28h+var_24] offset aSOutOfMemoryFo +
mov [esp+28h+var_28] 0 +
mov [esp+28h+var_20] eax +
call sub_401740  +
mov [esp+28h+var_28] 1 +
call exit  +
***
push esi  +
mov esi eax +
push ebx  +
mov ebx ecx +
sub esp 14Ch +
mov edi [eax+0A5Ch] +
mov eax [edi+1Ch] +
cmp eax 5 +
jz loc_41F303  +
cmp eax 3 +
jz loc_41F303  +
cmp eax 4 +
jz loc_41F358  +
cmp eax 6 +
jz loc_41F346  +
mov byte ptr [esp+150h+var_129] 1Bh +
movzx eax byte ptr [edi+18h] +
lea ebp [esp+150h+var_124] +
mov [esp+150h+var_148] ecx +
lea edi [esp+150h+var_129] +
mov [esp+150h+var_14C] edx +
mov [esp+150h+var_150] ebp +
mov byte ptr [esp+150h+var_129+1] al +
mov eax ecx +
shr eax 8 +
mov byte ptr [esp+150h+var_129+3] cl +
mov byte ptr [esp+150h+var_129+2] al +
mov [esp+150h+var_125] 0Eh +
call memcpy  +
lea ecx [ebx+5] +
test ecx ecx +
mov byte ptr [esp+ecx+150h+var_129] 0 +
jz loc_41F271  +
mov eax edi +
add ebp ebx +
xor edx edx +
xor dl [eax] +
add eax 1 +
cmp eax ebp +
mov byte ptr [esp+ecx+150h+var_129] dl +
jnz loc_41F264  +
mov [esp+150h+var_14C] offset aStk500v2Stk5_3 +
mov [esp+150h+var_150] 5 +
call sub_401740  +
mov eax ebx +
add eax 6 +
mov [esp+150h+var_13C] eax +
jz loc_41F2B9  +
mov ebp edi +
lea ebx [esp+ebx+150h+var_124+1] +
movzx eax byte ptr [ebp+0] +
add ebp 1 +
mov [esp+150h+var_14C] offset a0x02x_2 +
mov [esp+150h+var_150] 5 +
mov [esp+150h+var_148] eax +
call sub_401740  +
cmp ebp ebx +
jnz loc_41F296  +
mov ebx [esp+150h+var_13C] +
add esi 89Ch +
mov [esp+150h+var_14C] offset aD_7 +
mov [esp+150h+var_150] 5 +
mov [esp+150h+var_148] ebx +
call sub_401740  +
mov eax off_461140 +
mov eax [eax+0Ch] +
mov [esp+150h+var_148] ebx +
mov [esp+150h+var_14C] edi +
mov [esp+150h+var_150] esi +
call eax  +
test eax eax +
jnz loc_41F44C  +
add esp 14Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax off_461140 +
add esi 89Ch +
mov eax [eax+0Ch] +
mov [esp+150h+var_148] ebx +
mov [esp+150h+var_14C] edx +
mov [esp+150h+var_150] esi +
call eax  +
test eax eax +
jz loc_41F2F8  +
mov eax ds:dword_486584 +
mov [esp+150h+var_14C] offset aSStk500_send_m +
mov [esp+150h+var_150] 0 +
mov [esp+150h+var_148] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_41F2F8  +
mov eax esi +
call sub_41F130  +
add esp 14Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
movzx ecx byte ptr [edx] +
cmp cl 2 +
jz loc_41F473  +
mov al 1 +
jmp loc_41F374  +
add eax 1 +
cmp eax 2Dh +
jz loc_41F4A3  +
cmp cl ds:byte_473900[eax*4] +
jnz loc_41F368  +
movzx eax ds:word_473902[eax*4] +
test ax ax +
mov word ptr [esp+150h+var_13C] ax +
jz loc_41F4A3  +
cmp word ptr [esp+150h+var_13C] 0FFFFh +
jz loc_41F433  +
cmp word ptr [esp+150h+var_13C] 0FFFEh +
jz loc_41F422  +
lea eax [ebx+3] +
mov [esp+150h+var_150] eax +
mov [esp+150h+var_134] edx +
mov [esp+150h+var_138] eax +
call malloc  +
mov edx [esp+150h+var_134] +
test eax eax +
mov ebp eax +
jz loc_41F47A  +
mov eax [edi+28h] +
movzx ecx word ptr [esp+150h+var_13C] +
mov [esi+0A5Ch] eax +
lea eax [ebp+3] +
mov [ebp+1] cl +
shr cx 8 +
mov [ebp+2] cl +
mov byte ptr [ebp+0] 2Fh +
mov [esp+150h+var_14C] edx +
mov [esp+150h+var_148] ebx +
mov [esp+150h+var_150] eax +
call memcpy  +
mov eax [esp+150h+var_138] +
mov [esp+150h+var_14C] ebp +
mov [esp+150h+var_150] esi +
mov [esp+150h+var_148] eax +
call sub_416840  +
mov [esp+150h+var_150] ebp +
mov ebx eax +
call free  +
mov eax ebx +
mov [esi+0A5Ch] edi +
jmp loc_41F2F8  +
movzx ecx byte ptr [edx+2] +
lea eax [ecx+3] +
mov word ptr [esp+150h+var_13C] ax +
jmp loc_41F3A7  +
movzx eax byte ptr [edx+1] +
movzx ecx byte ptr [edx+2] +
shl eax 8 +
lea eax [ecx+eax+3] +
mov word ptr [esp+150h+var_13C] ax +
jmp loc_41F3A7  +
mov eax ds:dword_486584 +
mov [esp+150h+var_14C] offset aSStk500_sendFa +
mov [esp+150h+var_150] 0 +
mov [esp+150h+var_148] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_41F2F8  +
xor eax eax +
jmp loc_41F37D  +
mov eax ds:dword_486584 +
mov [esp+150h+var_14C] offset aSOutOfMemoryFo +
mov [esp+150h+var_150] 0 +
mov [esp+150h+var_148] eax +
call sub_401740  +
mov [esp+150h+var_150] 1 +
call exit  +
mov eax ds:dword_486584 +
movzx ebp cl +
mov [esp+150h+var_144] ebp +
mov [esp+150h+var_14C] offset aSUnsupportedEn +
mov [esp+150h+var_150] 0 +
mov [esp+150h+var_148] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_41F2F8  +
***
jmp loc_41F4E0  +
push esi  +
push ebx  +
sub esp 24h +
fld  qword ptr [esp+34h] +
fld  ds:dbl_4739F0 +
fucomip st st(1) +
mov esi [esp+30h] +
ja loc_41F510  +
fld  ds:dbl_4739F8 +
fxch  st(1) +
fucomi st st(1) +
fstp  st(1) +
jbe loc_41F553  +
fstp  st +
xor eax eax +
mov edx 1 +
jmp loc_41F519  +
fstp  st +
mov eax 4 +
xor edx edx +
mov [esp+1Eh] dl +
mov ecx 3 +
mov [esp+1Fh] al +
lea edx [esp+1Dh] +
mov eax esi +
mov byte ptr [esp+1Dh] 1Dh +
call sub_41F130  +
test eax eax +
js loc_41F586  +
mov ecx 3 +
mov eax esi +
lea edx [esp+1Dh] +
call sub_41E420  +
sar eax 1Fh +
add esp 24h +
pop ebx  +
pop esi  +
retn   +
***
fmul  ds:flt_473A00 +
fnstcw  word ptr [esp+0Eh] +
movzx eax word ptr [esp+0Eh] +
fdivr  ds:flt_473A04 +
mov ah 0Ch +
mov [esp+0Ch] ax +
fldcw  word ptr [esp+0Ch] +
fistp  qword ptr [esp] +
fldcw  word ptr [esp+0Eh] +
mov ecx [esp] +
mov edx ecx +
shr ecx 8 +
mov eax ecx +
jmp loc_41F519  +
***
mov eax 0FFFFFFFFh +
jmp loc_41F54D  +
***
push edi  +
push esi  +
push ebx  +
sub esp 4Ch +
mov ebx [eax+0A5Ch] +
mov [esp+58h+var_40] edx +
mov [esp+58h+var_3C] ecx +
mov eax [ebx+1Ch] +
cmp eax 5 +
jz loc_41F8A2  +
cmp eax 3 +
jz loc_41F8A2  +
cmp eax 4 +
jz loc_41F960  +
cmp eax 6 +
jz loc_41F8F0  +
mov [esp+58h+var_54] offset aStk500v2Stk5_4 +
mov ebx 1 +
xor esi esi +
mov [esp+58h+var_58] 5 +
lea edi [esp+58h+var_21] +
call sub_401740  +
lea eax [esp+58h+var_21+1] +
mov [esp+58h+var_54] 0 +
mov [esp+58h+var_58] eax +
call sub_459290  +
lea eax [ebp+89Ch] +
mov [esp+58h+var_34] ebp +
mov ebp eax +
mov [esp+58h+var_38] 0 +
mov [esp+58h+var_44] 0 +
fild  [esp+58h+var_21+1] +
fstp  [esp+58h+var_30] +
mov eax off_461140 +
mov eax [eax+10h] +
mov [esp+58h+var_50] 1 +
mov [esp+58h+var_54] edi +
mov [esp+58h+var_58] ebp +
call eax  +
test eax eax +
js loc_41F750  +
movzx eax byte ptr [esp+58h+var_21] +
mov [esp+58h+var_54] offset a0x02x_2 +
mov [esp+58h+var_58] 5 +
mov [esp+58h+var_50] eax +
call sub_401740  +
movzx eax byte ptr [esp+58h+var_21] +
xor esi eax +
cmp ebx 7 +
ja loc_41F878  +
jmp ds:off_470D84[ebx*4]  +
mov eax esi +
test al al +
jnz loc_41FAA0  +
lea eax [esp+58h+var_21+1] +
mov [esp+58h+var_54] 0 +
mov [esp+58h+var_58] eax +
call sub_459290  +
fild  [esp+58h+var_21+1] +
fsub  [esp+58h+var_30] +
fld  ds:flt_473A08 +
fxch  st(1) +
fucomip st st(1) +
fstp  st +
ja loc_41F750  +
mov [esp+58h+var_54] offset asc_470D80 +
mov [esp+58h+var_58] 5 +
call sub_401740  +
mov eax [esp+58h+var_44] +
add eax 6 +
jmp loc_41F89A  +
mov edx [esp+58h+var_38] +
cmp [esp+58h+var_3C] edx +
jbe loc_41FAC7  +
mov ecx [esp+58h+var_40] +
test edx edx +
mov [ecx+edx] al +
jnz loc_41F6FE  +
mov eax [esp+58h+var_40] +
cmp byte ptr [eax] 0B0h +
jz loc_41FA03  +
add [esp+58h+var_38] 1 +
mov eax [esp+58h+var_38] +
cmp [esp+58h+var_44] eax +
mov eax 7 +
cmovz ebx eax +
jmp loc_41F720  +
xor ebx ebx +
cmp al 0Eh +
setz bl  +
lea ebx [ebx+ebx*4+1] +
lea eax [esp+58h+var_21+1] +
mov [esp+58h+var_54] 0 +
mov [esp+58h+var_58] eax +
call sub_459290  +
fild  [esp+58h+var_21+1] +
fsub  [esp+58h+var_30] +
fld  ds:flt_473A08 +
fxch  st(1) +
fucomip st st(1) +
fstp  st +
jbe loc_41F625  +
nop   +
mov eax ds:dword_486584 +
mov [esp+58h+var_54] offset aSStk500v2_rece +
mov [esp+58h+var_58] 0 +
mov [esp+58h+var_50] eax +
call sub_401740  +
add esp 4Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+58h+var_54] offset aHopingForSizeM +
mov ebx 5 +
mov [esp+58h+var_58] 5 +
call sub_401740  +
movzx eax byte ptr [esp+58h+var_21] +
add [esp+58h+var_44] eax +
mov eax [esp+58h+var_44] +
mov [esp+58h+var_54] offset aMsgIsUBytes +
mov [esp+58h+var_58] 5 +
mov [esp+58h+var_50] eax +
call sub_401740  +
jmp loc_41F720  +
mov [esp+58h+var_54] offset aHopingForSizeL +
mov ebx 4 +
mov [esp+58h+var_58] 5 +
call sub_401740  +
movzx eax byte ptr [esp+58h+var_21] +
mov [esp+58h+var_44] eax +
shl [esp+58h+var_44] 8 +
jmp loc_41F720  +
mov [esp+58h+var_54] offset aHopingForSeque +
mov [esp+58h+var_58] 5 +
call sub_401740  +
mov eax [esp+58h+var_34] +
movzx ecx byte ptr [esp+58h+var_21] +
mov eax [eax+0A5Ch] +
cmp [eax+18h] cl +
jz loc_41F930  +
mov [esp+58h+var_54] offset aSorry +
mov ebx 1 +
mov [esp+58h+var_58] 5 +
call sub_401740  +
jmp loc_41F720  +
mov [esp+58h+var_54] offset aHopingForStart +
mov [esp+58h+var_58] 5 +
call sub_401740  +
cmp byte ptr [esp+58h+var_21] 1Bh +
jz loc_41F907  +
mov [esp+58h+var_54] offset aSorry +
mov [esp+58h+var_58] 5 +
call sub_401740  +
jmp loc_41F720  +
mov eax ds:dword_486584 +
mov [esp+58h+var_54] offset aSStk500v2_recv +
mov [esp+58h+var_58] 0 +
mov [esp+58h+var_50] eax +
call sub_401740  +
mov eax 0FFFFFFFBh +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ecx [esp+58h+var_3C] +
add ebp 89Ch +
mov eax off_461140 +
mov eax [eax+10h] +
mov [esp+58h+var_50] ecx +
mov ecx [esp+58h+var_40] +
mov [esp+58h+var_58] ebp +
mov [esp+58h+var_54] ecx +
call eax  +
test eax eax +
jns loc_41F89A  +
mov eax ds:dword_486584 +
mov [esp+58h+var_54] offset aSStk500v2_re_0 +
mov [esp+58h+var_58] 0 +
mov [esp+58h+var_50] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_41F89A  +
mov ecx [esp+58h+var_3C] +
mov eax ebp +
mov edx [esp+58h+var_40] +
call sub_41E420  +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+58h+var_54] offset aGotIt +
mov esi 1Bh +
mov ebx 2 +
mov [esp+58h+var_58] 5 +
call sub_401740  +
jmp loc_41F720  +
mov [esp+58h+var_54] offset aGotItIncrement +
mov ebx 3 +
mov [esp+58h+var_58] 5 +
call sub_401740  +
mov eax [esp+58h+var_34] +
mov eax [eax+0A5Ch] +
add byte ptr [eax+18h] 1 +
jmp loc_41F720  +
mov eax [ebx+28h] +
mov [ebp+0A5Ch] eax +
lea eax [esp+58h+var_21+1] +
mov [esp+58h+var_54] eax +
mov [esp+58h+var_58] ebp +
call sub_416970  +
mov [ebp+0A5Ch] ebx +
test eax eax +
mov esi eax +
jle loc_41FAFE  +
lea eax [eax-1] +
cmp [esp+58h+var_3C] eax +
jb loc_41FA2A  +
mov edx [esp+58h+var_21+1] +
movzx eax byte ptr [edx] +
cmp al 0A0h +
jz loc_41FA58  +
cmp al 0A5h +
jz loc_41F9DC  +
cmp al 88h +
jz loc_41FA7F  +
mov [esp+58h+var_4C] eax +
mov eax ds:dword_486584 +
mov [esp+58h+var_54] offset aSStk500v2_jt_3 +
mov [esp+58h+var_58] 0 +
mov [esp+58h+var_50] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_41F89A  +
mov eax ds:dword_486584 +
mov [esp+58h+var_54] offset aSStk500v2_jt_4 +
mov [esp+58h+var_58] 0 +
mov [esp+58h+var_50] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_41F89A  +
mov eax ds:dword_486584 +
mov [esp+58h+var_54] offset aSStk500v2_re_1 +
mov [esp+58h+var_58] 0 +
mov [esp+58h+var_50] eax +
call sub_401740  +
mov eax 0FFFFFFFDh +
jmp loc_41F89A  +
mov esi [esp+58h+var_3C] +
mov [esp+58h+var_4C] eax +
mov eax ds:dword_486584 +
mov [esp+58h+var_54] offset aSStk500v2_jt_5 +
mov [esp+58h+var_58] 0 +
mov [esp+58h+var_48] esi +
mov [esp+58h+var_50] eax +
call sub_401740  +
jmp loc_41F996  +
mov eax ds:dword_486584 +
mov [esp+58h+var_54] offset aSStk500v2_jt_6 +
mov [esp+58h+var_58] 0 +
mov [esp+58h+var_50] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_41F89A  +
lea eax [esi-1] +
add edx 1 +
mov [esp+58h+var_50] eax +
mov eax [esp+58h+var_40] +
mov [esp+58h+var_54] edx +
mov [esp+58h+var_58] eax +
call memcpy  +
mov eax esi +
jmp loc_41F89A  +
mov eax ds:dword_486584 +
mov [esp+58h+var_54] offset aSStk500v2_re_2 +
mov [esp+58h+var_58] 0 +
mov [esp+58h+var_50] eax +
call sub_401740  +
mov eax 0FFFFFFFCh +
jmp loc_41F89A  +
mov eax [esp+58h+var_3C] +
mov [esp+58h+var_54] offset aSStk500v2_re_3 +
mov [esp+58h+var_58] 0 +
mov [esp+58h+var_48] eax +
mov eax [esp+58h+var_38] +
mov [esp+58h+var_4C] eax +
mov eax ds:dword_486584 +
mov [esp+58h+var_50] eax +
call sub_401740  +
mov eax 0FFFFFFFEh +
jmp loc_41F89A  +
mov eax ds:dword_486584 +
mov [esp+58h+var_54] offset aSStk500v2_jt_7 +
mov [esp+58h+var_58] 0 +
mov [esp+58h+var_50] eax +
call sub_401740  +
or eax 0FFFFFFFFh +
jmp loc_41F89A  +
***
push ebx  +
sub esp 10h +
mov [esp+10h+var_10] 2Ch +
mov esi [esp+10h+arg_0] +
call malloc  +
test eax eax +
mov ebx eax +
mov [esi+0A5Ch] eax +
jz loc_41FB7F  +
xor eax eax +
mov edi ebx +
mov ecx 0Bh +
stos   +
mov [esp+10h+var_10] esi +
mov byte ptr [ebx+18h] 1 +
call sub_416180  +
mov eax [esi+0A5Ch] +
mov [esi+0A5Ch] ebx +
mov [ebx+28h] eax +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov eax ds:dword_486584 +
mov [esp+10h+var_C] offset aSStk500v2_setu +
mov [esp+10h+var_10] 0 +
mov [esp+10h+var_8] eax +
call sub_401740  +
mov [esp+10h+var_10] 1 +
call exit  +
***
push ebx  +
sub esp 10h +
mov [esp+10h+var_10] 2Ch +
mov esi [esp+10h+arg_0] +
call malloc  +
test eax eax +
mov ebx eax +
mov [esi+0A5Ch] eax +
jz loc_41FBFF  +
xor eax eax +
mov edi ebx +
mov ecx 0Bh +
stos   +
mov [esp+10h+var_10] esi +
mov byte ptr [ebx+18h] 1 +
call sub_42BD40  +
mov eax [esi+0A5Ch] +
mov [esi+0A5Ch] ebx +
mov [ebx+28h] eax +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov eax ds:dword_486584 +
mov [esp+10h+var_C] offset aSStk500v2_setu +
mov [esp+10h+var_10] 0 +
mov [esp+10h+var_8] eax +
call sub_401740  +
mov [esp+10h+var_10] 1 +
call exit  +
***
mov ecx [esp+arg_0] +
mov eax off_461140 +
lea edx [ecx+89Ch] +
mov eax [eax+14h] +
mov [esp+arg_0] edx +
jmp eax  +
***
push ebx  +
push edi  +
mov edi eax +
push esi  +
mov esi ecx +
push ebx  +
mov ebx edx +
sub esp 4Ch +
mov [esp+58h+var_54] offset aStk500v2Stk5_2 +
mov [esp+58h+var_58] 5 +
call sub_401740  +
xor eax eax +
test esi esi +
jz loc_41FF05  +
lea esi [esi+0] +
movzx eax byte ptr [ebx+eax] +
add ebp 1 +
mov [esp+58h+var_54] offset a0x02x_2 +
mov [esp+58h+var_58] 5 +
mov [esp+58h+var_50] eax +
call sub_401740  +
cmp ebp esi +
mov eax ebp +
jnz loc_41FEE0  +
mov [esp+58h+var_50] esi +
mov ebp 6 +
mov [esp+58h+var_54] offset aD_7 +
mov [esp+58h+var_58] 5 +
call sub_401740  +
mov ecx esi +
mov edx ebx +
mov eax edi +
call sub_41F1E0  +
mov ecx [esp+58h+arg_0] +
mov edx ebx +
mov eax edi +
call sub_41F590  +
test eax eax +
jg loc_41FF84  +
mov [esp+58h+var_58] edi +
call sub_41FC50  +
test eax eax +
jz loc_420010  +
sub ebp 1 +
jnz loc_41FF22  +
movzx eax byte ptr [ebx] +
mov [esp+58h+var_54] offset aSStk500v2_comm +
mov [esp+58h+var_58] 0 +
mov [esp+58h+var_4C] eax +
mov eax ds:dword_486584 +
mov [esp+58h+var_50] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+58h+var_50] eax +
mov [esp+58h+var_54] offset aD_8 +
mov [esp+58h+var_58] 5 +
mov [esp+58h+var_3C] eax +
call sub_401740  +
mov edx [esp+58h+var_3C] +
cmp edx 1 +
jz loc_420103  +
movzx ecx byte ptr [ebx] +
lea eax [ecx-50h] +
cmp al 1 +
jbe loc_420055  +
movzx ecx byte ptr [ebx+1] +
lea eax [ecx-80h] +
cmp al 1Fh +
jbe loc_4200C2  +
test cl cl +
mov eax edx +
jz loc_41FF7C  +
cmp cl 0C0h +
jz loc_42014D  +
cmp cl 0C9h +
jz loc_42002E  +
mov eax ds:dword_486584 +
mov [esp+58h+var_4C] ecx +
mov [esp+58h+var_54] offset aSStk500v2_co_0 +
mov [esp+58h+var_58] 0 +
mov [esp+58h+var_50] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_41FF7C  +
mov [esp+58h+var_54] offset a0 +
mov [esp+58h+var_58] 5 +
call sub_401740  +
add esp 4Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ds:dword_486584 +
mov [esp+58h+var_54] offset aSStk500v2_co_1 +
mov [esp+58h+var_58] 0 +
mov [esp+58h+var_50] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_41FF7C  +
xor eax eax +
cmp cl 51h +
setnz al  +
movzx edx byte ptr [ebx+eax+1] +
xor eax eax +
test dl dl +
jz loc_41FF7C  +
sub edx 1 +
mov ebx offset aUnknown_5 +
cmp dl 2 +
ja loc_420083  +
movzx edx dl +
mov ebx ds:off_472AE4[edx*4] +
cmp cl 51h +
mov edx offset aCmd_xprog +
mov eax offset aCmd_xprog_setm +
cmovnz eax edx +
mov [esp+58h+var_4C] eax +
mov eax ds:dword_486584 +
mov [esp+58h+var_48] ebx +
mov [esp+58h+var_54] offset aSStk500v2_co_2 +
mov [esp+58h+var_58] 0 +
mov [esp+58h+var_50] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_41FF7C  +
cmp cl 80h +
mov eax offset aCommandTimedOu +
jz loc_4200F0  +
cmp cl 81h +
mov eax offset aSamplingOfTheR +
jz loc_4200F0  +
lea ebx [esp+58h+var_36] +
mov [esp+58h+var_50] ecx +
mov [esp+58h+var_54] offset aUnknownCode0x0 +
mov [esp+58h+var_58] ebx +
call sprintf  +
mov eax ebx +
cmp ds:dword_4866A8 1 +
jle loc_42012A  +
mov eax 0FFFFFFFFh +
jmp loc_41FF7C  +
mov eax ds:dword_486584 +
mov [esp+58h+var_54] offset aSStk500v2_co_3 +
mov [esp+58h+var_58] 0 +
mov [esp+58h+var_50] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_41FF7C  +
mov [esp+58h+var_4C] eax +
mov eax ds:dword_486584 +
mov [esp+58h+var_54] offset aSStk500v2_co_4 +
mov [esp+58h+var_58] 0 +
mov [esp+58h+var_50] eax +
call sub_401740  +
jmp loc_4200F9  +
mov eax ds:dword_486584 +
mov [esp+58h+var_54] offset aSStk500v2_co_5 +
mov [esp+58h+var_58] 0 +
mov [esp+58h+var_50] eax +
call sub_401740  +
jmp loc_4200F9  +
***
sub esp 3Ch +
mov ecx 1 +
mov eax [esp+3Ch+arg_0] +
lea edx [esp+3Ch+var_2C] +
mov [esp+3Ch+var_3C] 20h +
mov byte ptr [esp+3Ch+var_2C] 5 +
call sub_41FEB0  +
test eax eax +
js loc_42019B  +
xor eax eax +
add esp 3Ch +
retn   +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_38] offset aSStk500v2_perf +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_420197  +
***
push ebx  +
mov ecx 2 +
sub esp 34h +
mov ebx edx +
mov [esp+38h+var_27] dl +
lea edx [esp+10h] +
mov [esp+38h+var_38] 20h +
mov [esp+38h+var_28] 3 +
call sub_41FEB0  +
test eax eax +
js loc_4201FA  +
movzx eax [esp+38h+var_26] +
mov [esi] al +
xor eax eax +
add esp 34h +
pop ebx  +
pop esi  +
retn   +
mov eax ds:dword_486584 +
mov [esp+38h+var_2C] ebx +
mov [esp+38h+var_34] offset aSStk500v2_getp +
mov [esp+38h+var_38] 0 +
mov [esp+38h+var_30] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_4201F4  +
***
sub esp 38h +
mov [esp+38h+var_27] dl +
lea edx [esp+10h] +
mov [esp+38h+var_26] cl +
mov ecx 3 +
mov [esp+38h+var_38] 20h +
mov [esp+38h+var_28] 2 +
call sub_41FEB0  +
test eax eax +
js loc_420263  +
xor eax eax +
add esp 38h +
pop ebx  +
retn   +
mov eax ds:dword_486584 +
mov [esp+38h+var_2C] ebx +
mov [esp+38h+var_34] offset aSStk500v2_setp +
mov [esp+38h+var_38] 0 +
mov [esp+38h+var_30] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_42025E  +
***
push esi  +
mov esi eax +
push ebx  +
movzx ebx dl +
sub esp 20h +
mov edx ebx +
lea ecx [esp+28h+var_9] +
call sub_4201C0  +
test eax eax +
js loc_4202F6  +
mov eax edi +
cmp al byte ptr [esp+28h+var_9] +
jz loc_4202D0  +
mov eax edi +
mov edx ebx +
movzx ecx al +
mov eax esi +
call sub_420230  +
add esp 20h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov eax ds:dword_486584 +
mov [esp+28h+var_24] offset aSSkippingParam +
mov [esp+28h+var_28] 2 +
mov [esp+28h+var_20] eax +
call sub_401740  +
add esp 20h +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov eax ds:dword_486584 +
mov [esp+28h+var_1C] ebx +
mov [esp+28h+var_24] offset aSUnableToGetPa +
mov [esp+28h+var_28] 0 +
mov [esp+28h+var_20] eax +
call sub_401740  +
jmp loc_4202AC  +
***
push esi  +
sub esp 24h +
fld1   +
mov eax [esp+28h+arg_0] +
fld  [esp+28h+arg_4] +
fdivr st st(1) +
fld  ds:flt_473A0C +
fxch  st(1) +
fucomi st st(1) +
fstp  st(1) +
jnb loc_420357  +
fld  ds:flt_473A10 +
fxch  st(1) +
mov cl 1 +
fucomi st st(1) +
fstp  st(1) +
jbe loc_420380  +
fstp  st +
fstp  st +
jmp loc_420370  +
fstp  st +
fstp  st +
jmp loc_420370  +
fstp  st +
fstp  st +
jmp loc_420370  +
fstp  st +
fstp  st +
lea esi [esi+0] +
add esp 24h +
mov edx 98h +
pop esi  +
pop edi  +
jmp sub_420290  +
fld  ds:flt_473A14 +
fxch  st(1) +
mov cl 2 +
fucomi st st(1) +
fstp  st(1) +
ja loc_420360  +
fld  ds:flt_473A18 +
fxch  st(1) +
mov cl 3 +
fucomi st st(1) +
fstp  st(1) +
ja loc_420366  +
fmul  ds:flt_473A1C +
mov [esp+28h+var_10] eax +
fdiv  ds:flt_473A20 +
fdivp st(1) st +
fsub  ds:dbl_473A28 +
fstp  [esp+28h+var_28] +
call sub_459620  +
mov ecx 0FEh +
mov eax [esp+28h+var_10] +
fnstcw  [esp+28h+var_A] +
movzx edx [esp+28h+var_A] +
mov dh 0Ch +
mov [esp+28h+var_C] dx +
fldcw  [esp+28h+var_C] +
fistp  [esp+28h+var_18] +
fldcw  [esp+28h+var_A] +
mov esi dword ptr [esp+28h+var_18] +
cmp esi 0FEh +
cmovbe ecx esi +
jmp loc_420370  +
***
push esi  +
push ebx  +
sub esp 4Ch +
mov eax [esp+4Ch+arg_0] +
fld  [esp+4Ch+arg_4] +
fldz   +
fxch  st(1) +
fucomi st st(1) +
fstp  st(1) +
mov [esp+4Ch+var_20] eax +
jbe loc_420590  +
fld  ds:flt_473A30 +
fxch  st(1) +
fucomi st st(1) +
fstp  st(1) +
jbe loc_4204D0  +
fld  ds:flt_473A34 +
fxch  st(1) +
fucomi st st(1) +
jbe loc_420563  +
fdivrp st(1) st +
mov eax offset aMhz_0 +
jmp loc_420452  +
fstp  st(1) +
mov [esp+4Ch+var_38] eax +
mov eax ds:dword_486584 +
mov ebp 384000h +
fld  ds:dbl_473A38 +
mov edi 1 +
fstp  [esp+4Ch+var_34] +
fstp  [esp+4Ch+var_40] +
mov [esp+4Ch+var_44] eax +
mov [esp+4Ch+var_48] offset aSStk500v2_set_ +
mov [esp+4Ch+var_4C] 0 +
call sub_401740  +
mov ecx 1 +
add ebp ebp +
mov eax 708000h +
imul ebp edi +
xor edx edx +
div  ebp +
lea ebx [eax-1] +
mov eax [esp+4Ch+var_20] +
mov edx 96h +
call sub_420290  +
test eax eax +
jnz loc_42055B  +
mov eax [esp+4Ch+var_20] +
add esp 4Ch +
movzx ecx bl +
pop ebx  +
mov edx 97h +
pop esi  +
pop edi  +
pop ebp  +
jmp sub_420290  +
fnstcw  [esp+4Ch+var_E] +
movzx eax [esp+4Ch+var_E] +
mov ah 0Ch +
mov [esp+4Ch+var_10] ax +
fldcw  [esp+4Ch+var_10] +
fistp  [esp+4Ch+var_1C] +
fldcw  [esp+4Ch+var_E] +
mov eax dword ptr [esp+4Ch+var_1C] +
cmp eax 383Fh +
mov ebp eax +
mov [esp+4Ch+var_14] eax +
ja loc_42059B  +
mov ecx 1 +
mov esi 708000h +
mov edi ds:dword_472AF0[ecx*4] +
xor edx edx +
mov eax esi +
add ecx 1 +
mov ebx edi +
shl ebx 9 +
div  ebx +
cmp ebp eax +
jnb loc_420586  +
cmp ecx 7 +
jnz loc_42050B  +
mov eax [esp+4Ch+var_14] +
mov dword ptr [esp+4Ch+var_40+4] 0Eh +
mov [esp+4Ch+var_48] offset aSStk500v2_se_0 +
mov [esp+4Ch+var_4C] 0 +
mov dword ptr [esp+4Ch+var_40] eax +
mov eax ds:dword_486584 +
mov [esp+4Ch+var_44] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
fstp  st(1) +
fld  ds:flt_473A00 +
fxch  st(1) +
mov eax offset aHz +
fucomi st st(1) +
jbe loc_420450  +
fdivrp st(1) st +
mov eax offset aKhz_0 +
jmp loc_420452  +
movzx ecx cl +
jmp loc_420490  +
fstp  st +
xor ecx ecx +
xor ebx ebx +
jmp loc_4204A1  +
mov ecx 1 +
mov edi 1 +
jmp loc_420490  +
***
sub esp 44h +
fld  ds:dbl_473A40 +
fadd  [esp+44h+arg_8] +
fnstcw  [esp+44h+var_1A] +
mov esi [esp+44h+arg_0] +
movzx edx [esp+44h+var_1A] +
fmul  ds:dbl_473A50 +
mov eax esi +
mov dh 0Ch +
mov [esp+44h+var_1C] dx +
mov edx 94h +
fldcw  [esp+44h+var_1C] +
fistp  [esp+44h+var_24] +
fldcw  [esp+44h+var_1A] +
mov ecx dword ptr [esp+44h+var_24] +
mov ebx ecx +
lea ecx [esp+44h+var_5] +
call sub_4201C0  +
test eax eax +
jnz loc_420656  +
movzx eax byte ptr [esp+44h+var_5] +
cmp bl al +
ja loc_420620  +
movzx ecx bl +
mov edx 95h +
mov eax esi +
call sub_420290  +
add esp 44h +
pop ebx  +
pop esi  +
retn   +
mov [esp+44h+var_18] eax +
mov eax ds:dword_486584 +
fild  [esp+44h+var_18] +
fdiv  ds:dbl_473A50 +
mov [esp+44h+var_40] offset aSStk500v2_se_1 +
mov [esp+44h+var_3C] eax +
mov [esp+44h+var_44] 0 +
fstp  [esp+44h+var_38] +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_420617  +
mov eax ds:dword_486584 +
mov [esp+44h+var_40] offset aSStk500v2_se_2 +
mov [esp+44h+var_44] 0 +
mov [esp+44h+var_3C] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_420617  +
***
push ebx  +
sub esp 54h +
fld  [esp+58h+arg_4] +
fld  st +
mov esi [esp+58h+arg_0] +
fstp  [esp+58h+var_30] +
fadd  ds:dbl_473A40 +
fnstcw  [esp+58h+var_1E] +
movzx eax [esp+58h+var_1E] +
fld  ds:flt_473A48 +
fmul st(1) st +
mov ah 0Ch +
mov [esp+58h+var_20] ax +
mov eax esi +
fstp  [esp+58h+var_38] +
fldcw  [esp+58h+var_20] +
fistp  [esp+58h+var_28] +
fldcw  [esp+58h+var_1E] +
mov ecx dword ptr [esp+58h+var_28] +
mov ebx ecx +
lea ecx [esp+58h+var_9] +
call sub_4201C0  +
fld  [esp+58h+var_38] +
test eax eax +
fld  [esp+58h+var_30] +
jnz loc_420752  +
movzx eax byte ptr [esp+58h+var_9] +
cmp bl al +
jb loc_420707  +
fstp  st +
fstp  st +
movzx ebx bl +
mov ecx ebx +
mov edx 94h +
mov eax esi +
call sub_420290  +
add esp 54h +
pop ebx  +
pop esi  +
retn   +
fstp  [esp+58h+var_44] +
movzx ebx bl +
mov [esp+58h+var_1C] eax +
mov eax ds:dword_486584 +
fild  [esp+58h+var_1C] +
fdivrp st(1) st +
mov [esp+58h+var_54] offset aSStk500v2_se_3 +
mov [esp+58h+var_50] eax +
mov [esp+58h+var_58] 0 +
fstp  [esp+58h+var_4C] +
call sub_401740  +
mov ecx ebx +
mov edx 95h +
mov eax esi +
call sub_420290  +
test eax eax +
jz loc_4206F3  +
mov eax 0FFFFFFFFh +
jmp loc_420701  +
fstp  st +
fstp  st +
mov eax ds:dword_486584 +
mov [esp+58h+var_54] offset aSStk500v2_se_4 +
mov [esp+58h+var_58] 0 +
mov [esp+58h+var_50] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_420701  +
***
sub esp 24h +
fld  [esp+24h+arg_4] +
fld  ds:dbl_473A60 +
fucomip st st(1) +
mov esi [esp+24h+arg_0] +
jnb loc_4207ED  +
xor ebx ebx +
fld1   +
jmp loc_4207A2  +
fstp  st +
add ebx 1 +
fld  ds:dbl_472D00[ebx*8] +
fld  st(1) +
fdiv st st(1) +
fucomip st st(3) +
jb loc_4207A0  +
fstp  st(1) +
fstp  st(1) +
fdivr  ds:flt_473A34 +
mov [esp+24h+var_14] ebx +
fstp  [esp+24h+var_1C] +
mov [esp+24h+var_20] offset aUsingP_2fUsFor +
mov [esp+24h+var_24] 2 +
call sub_401740  +
add esp 24h +
mov ecx ebx +
mov eax esi +
mov edx 98h +
pop ebx  +
pop esi  +
jmp sub_420290  +
fstp  st +
fld  ds:flt_473A58 +
xor ebx ebx +
jmp loc_4207BE  +
***
push ebx  +
mov ecx 2 +
sub esp 34h +
mov ebx edx +
mov [esp+38h+var_27] dl +
lea edx [esp+10h] +
mov [esp+38h+var_38] 20h +
mov [esp+38h+var_28] 3 +
call sub_41FEB0  +
test eax eax +
js loc_420844  +
movzx eax [esp+38h+var_26] +
movzx edx [esp+38h+var_25] +
shl eax 8 +
or eax edx +
mov [esi] eax +
xor eax eax +
add esp 34h +
pop ebx  +
pop esi  +
retn   +
mov eax ds:dword_486584 +
mov [esp+38h+var_2C] ebx +
mov [esp+38h+var_34] offset aSStk500v2_ge_4 +
mov [esp+38h+var_38] 0 +
mov [esp+38h+var_30] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_42083E  +
***
push esi  +
mov ecx 1 +
lea ecx [esp+arg_58] +
mov edx 0C2h +
mov eax esi +
xor ebx ebx +
call sub_420800  +
mov eax [esp+arg_58] +
xor edx edx +
mov dword ptr [esp+arg_2C+4] edx +
mov dword ptr [esp+arg_4] edi +
mov dword ptr [esp+4] offset aSvaref0_2fV +
mov dword ptr [esp+arg_2C] eax +
mov dword ptr [esp+0] 0 +
fild  [esp+arg_2C] +
fld  ds:flt_473A88 +
fdiv st(1) st +
fstp  [esp+arg_1C] +
fstp  [esp+arg_4+4] +
call sub_401740  +
lea ecx [esp+arg_58] +
mov edx 0C3h +
mov eax esi +
call sub_420800  +
mov eax [esp+arg_58] +
xor edx edx +
mov dword ptr [esp+arg_2C+4] edx +
mov dword ptr [esp+arg_4] edi +
mov dword ptr [esp+4] offset aSvaref1_2fV +
mov dword ptr [esp+arg_2C] eax +
mov dword ptr [esp+0] 0 +
fild  [esp+arg_2C] +
fld  [esp+arg_1C] +
fdivp st(1) st +
fstp  [esp+arg_4+4] +
call sub_401740  +
mov edx 0C0h +
mov eax esi +
lea ecx [esp+arg_4C] +
call sub_420800  +
mov eax [esp+arg_4C] +
mov dword ptr [esp+arg_2C+4] ebx +
mov dword ptr [esp+arg_4] edi +
mov dword ptr [esp+4] offset aSsckPeriod_2fU +
lea ecx [eax+1] +
mov dword ptr [esp+arg_2C] ecx +
fild  [esp+arg_2C] +
fmul  ds:flt_473A58 +
mov dword ptr [esp+0] 0 +
fstp  [esp+arg_4+4] +
call sub_401740  +
lea ecx [esp+arg_50] +
mov edx 0C1h +
mov eax esi +
call sub_420800  +
mov ebx [esp+arg_50] +
mov edx ebx +
and edx 0F000h +
shr edx 0Ch +
mov [esp+arg_34] edx +
fild  [esp+arg_34] +
fstp  [esp+arg_4] +
fld  ds:flt_473A08 +
fst  qword ptr [esp+0] +
fstp  dword ptr [esp+arg_1C] +
call sub_4596B0  +
mov eax ebx +
and eax 0FFCh +
shr eax 2 +
mov [esp+arg_34] eax +
fmul  ds:flt_473A8C +
fild  [esp+arg_34] +
fmul  ds:flt_473A90 +
fld  dword ptr [esp+arg_1C] +
fsubrp st(1) st +
fdivp st(1) st +
fld  ds:flt_473A34 +
fxch  st(1) +
fucomi st st(1) +
ja loc_420D74  +
fstp  st(1) +
fld  ds:flt_473A00 +
fxch  st(1) +
mov eax offset aHz +
fucomi st st(1) +
jbe loc_420AE0  +
fdivrp st(1) st +
mov eax offset aKhz_0 +
jmp loc_420AE2  +
fstp  st(1) +
mov dword ptr [esp+arg_4] edi +
fstp  [esp+arg_4+4] +
mov [esp+arg_10] eax +
mov dword ptr [esp+4] offset aSoscillator_3f +
mov dword ptr [esp+0] 0 +
call sub_401740  +
add esp 60h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
lea ecx [esp+arg_4B] +
mov edx 98h +
mov eax esi +
call sub_4201C0  +
movzx eax byte ptr [esp+arg_4B] +
mov [esp+arg_4] edi +
mov [esp+arg_0] offset aSsckPeriod_2fU +
mov dword ptr [esp+0] 0 +
fld  ds:flt_473A34 +
fdiv  ds:dbl_472D00[eax*8] +
fstp  [esp+arg_8] +
call sub_401740  +
***
lea ecx [esp+4Fh] +
movzx eax [esp+arg_4B] +
mov [esp+arg_4] edi +
mov [esp+arg_0] offset aSsckPeriod_1fU +
mov dword ptr [esp+0] 0 +
mov [esp+arg_34] eax +
fild  [esp+arg_34] +
fmul  ds:flt_473A94 +
fdiv  ds:flt_473A20 +
fadd  ds:dbl_473A98 +
fstp  [esp+arg_8] +
call sub_401740  +
add esp 60h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
mov eax [ebx+28h] +
mov [esp+68h+var_54] 2 +
mov dword ptr [esp+68h+var_5C] 0 +
mov [esp+68h+var_60] 1 +
mov [esi+0A5Ch] eax +
lea eax [esp+68h+var_10] +
mov dword ptr [esp+68h+var_5C+4] eax +
mov [esp+68h+var_64] 1 +
mov [esp+68h+var_68] esi +
call sub_42EDC0  +
movzx eax byte ptr [esp+68h+var_10+1] +
movzx edx byte ptr [esp+68h+var_10] +
mov [esi+0A5Ch] ebx +
shl eax 8 +
add eax edx +
movzx eax ax +
mov [esp+68h+var_30] eax +
fild  [esp+68h+var_30] +
fdiv  ds:flt_473A00 +
jmp loc_4208BD  +
***
cmp al 1 +
jz loc_420E10  +
cmp al 2 +
jz loc_420E20  +
cmp al 3 +
jz loc_420DE0  +
mov [esp+2Eh] ax +
fild  word ptr [esp+2Eh] +
fadd  ds:dbl_473A28 +
fdivr  ds:flt_473A04 +
fdiv  ds:flt_473A1C +
fmul  ds:flt_473A20 +
fdivr  ds:flt_473A34 +
jmp loc_420BA8  +
***
fdivrp st(1) st +
mov eax offset aMhz_0 +
jmp loc_420AE2  +
***
mov eax [ebx+28h] +
mov [esp+68h+var_64] 6 +
mov [esp+68h+var_68] esi +
mov [esi+0A5Ch] eax +
lea eax [esp+68h+var_10] +
mov [esp+68h+var_60] eax +
call sub_41C570  +
jmp loc_420D00  +
***
fstp  st(1) +
fld  ds:flt_473A00 +
fxch  st(1) +
mov eax offset aHz +
fucomi st st(1) +
jbe loc_420C60  +
fdivrp st(1) st +
mov eax offset aKhz_0 +
jmp loc_420C62  +
***
fld  ds:flt_473A30 +
jmp loc_420C33  +
***
fld  ds:dbl_473A80 +
jmp loc_420BA8  +
***
mov dword ptr [esp+4] offset aOff_0 +
mov dword ptr [esp+0] 0 +
call sub_401740  +
jmp loc_420B4E  +
***
fld  ds:dbl_473A70 +
jmp loc_420BA8  +
***
fld  ds:dbl_473A78 +
jmp loc_420BA8  +
***
mov eax [esp+arg_0] +
mov edx offset unk_4714F8 +
jmp sub_420870  +
***
push ebx  +
sub esp 34h +
mov ebx [esp+38h+arg_0] +
mov esi [esp+38h+arg_4] +
mov eax [ebx+0A5Ch] +
mov eax [eax+1Ch] +
cmp eax 5 +
ja loc_420E67  +
mov ecx ds:off_472A98[eax*4] +
mov edx eax +
and edx 0FFFFFFFDh +
cmp edx 4 +
jnz loc_420E90  +
cmp eax 5 +
jz loc_420FB0  +
mov edx esi +
mov eax ebx +
call sub_420870  +
add esp 34h +
pop ebx  +
pop esi  +
retn   +
mov [esp+38h+var_2C] ecx +
mov [esp+38h+var_30] esi +
mov [esp+38h+var_34] offset aSprogrammerMod +
mov [esp+38h+var_38] 0 +
call sub_401740  +
lea ecx [esp+38h+var_12] +
mov edx 90h +
mov eax ebx +
call sub_4201C0  +
lea ecx [esp+24h] +
mov edx 91h +
mov eax ebx +
call sub_4201C0  +
lea ecx [esp+25h] +
mov edx 92h +
mov eax ebx +
call sub_4201C0  +
movzx eax byte ptr [esp+38h+var_12] +
mov [esp+38h+var_30] esi +
mov [esp+38h+var_34] offset aShardwareVersi +
mov [esp+38h+var_38] 0 +
mov [esp+38h+var_2C] eax +
call sub_401740  +
movzx eax [esp+38h+var_13] +
mov [esp+38h+var_30] esi +
mov [esp+38h+var_34] offset aSfirmwareVersi +
mov [esp+38h+var_38] 0 +
mov [esp+38h+var_28] eax +
movzx eax [esp+38h+var_14] +
mov [esp+38h+var_2C] eax +
call sub_401740  +
mov eax [ebx+0A5Ch] +
mov eax [eax+1Ch] +
cmp eax 5 +
jz loc_421110  +
sub eax 1 +
jnz loc_420E7A  +
lea ecx [esp+38h+var_12+1] +
mov edx 9Ah +
mov eax ebx +
call sub_4201C0  +
movzx eax byte ptr [esp+38h+var_12+1] +
cmp al 0DDh +
jz loc_4211C0  +
jbe loc_4210E0  +
cmp al 0EEh +
mov edx offset aStk504 +
jz loc_420F85  +
cmp al 0FAh +
mov edx offset aStk503 +
jz loc_420F85  +
cmp al 0E4h +
mov edx offset aStk505 +
jz loc_420F85  +
mov edx offset aUnknown_5 +
mov [esp+38h+var_2C] edx +
mov [esp+38h+var_30] esi +
mov [esp+38h+var_34] offset aStopcardS +
mov [esp+38h+var_38] 0 +
call sub_401740  +
mov edx esi +
mov eax ebx +
call sub_420870  +
add esp 34h +
pop ebx  +
pop esi  +
retn   +
mov edx 0A6h +
mov eax ebx +
lea ecx [esp+38h+var_12+1] +
call sub_4201C0  +
movzx eax byte ptr [esp+38h+var_12+1] +
mov edx offset aNotPresent +
cmp eax 0FFh +
jz loc_420FEE  +
mov ecx offset unk_4737A0 +
jmp loc_420FE7  +
add ecx 8 +
cmp ecx offset unk_4738E8 +
jz loc_421100  +
cmp eax [ecx] +
jnz loc_420FD8  +
mov edx [ecx+4] +
mov [esp+38h+var_2C] edx +
mov [esp+38h+var_30] esi +
mov [esp+38h+var_34] offset aSroutingCardS +
mov [esp+38h+var_38] 0 +
call sub_401740  +
mov edx 0A5h +
mov eax ebx +
lea ecx [esp+38h+var_12+1] +
call sub_4201C0  +
movzx eax byte ptr [esp+38h+var_12+1] +
mov edx offset aNotPresent +
cmp eax 0FFh +
jz loc_421048  +
mov ecx offset unk_473420 +
jmp loc_421041  +
add ecx 8 +
cmp ecx offset aStk600Rc020t1 +
jz loc_4210D3  +
cmp eax [ecx] +
jnz loc_421032  +
mov edx [ecx+4] +
mov [esp+38h+var_2C] edx +
mov [esp+38h+var_30] esi +
mov [esp+38h+var_34] offset aSsocketCardS +
mov [esp+38h+var_38] 0 +
call sub_401740  +
lea ecx [esp+38h+var_C] +
mov edx 0C8h +
mov eax ebx +
call sub_420800  +
mov eax [esp+38h+var_C] +
mov [esp+38h+var_30] esi +
mov [esp+38h+var_34] offset aSrc_idTableRev +
mov [esp+38h+var_38] 0 +
mov [esp+38h+var_2C] eax +
call sub_401740  +
lea ecx [esp+38h+var_C] +
mov edx 0C9h +
mov eax ebx +
call sub_420800  +
mov eax [esp+38h+var_C] +
mov [esp+38h+var_30] esi +
mov [esp+38h+var_34] offset aSec_idTableRev +
mov [esp+38h+var_38] 0 +
mov [esp+38h+var_2C] eax +
call sub_401740  +
mov edx esi +
mov eax ebx +
call sub_420870  +
add esp 34h +
pop ebx  +
pop esi  +
retn   +
mov edx offset aUnknown_5 +
jmp loc_421048  +
cmp al 55h +
mov edx offset aStk502 +
jz loc_420F85  +
cmp al 0AAh +
mov edx offset aStk501 +
jz loc_420F85  +
jmp loc_420F80  +
mov edx offset aUnknown_5 +
jmp loc_420FEE  +
lea ecx [esp+38h+var_12+2] +
mov edx 0A8h +
mov eax ebx +
call sub_4201C0  +
lea ecx [esp+38h+var_12+3] +
mov edx 0A9h +
mov eax ebx +
call sub_4201C0  +
lea ecx [esp+2Ah] +
mov edx 0AAh +
mov eax ebx +
call sub_4201C0  +
lea ecx [esp+2Bh] +
mov edx 0ABh +
mov eax ebx +
call sub_4201C0  +
movzx eax byte ptr [esp+38h+var_12+3] +
mov [esp+38h+var_30] esi +
mov [esp+38h+var_34] offset aSfirmwareVer_0 +
mov [esp+38h+var_38] 0 +
mov [esp+38h+var_28] eax +
movzx eax byte ptr [esp+38h+var_12+2] +
mov [esp+38h+var_2C] eax +
call sub_401740  +
movzx eax [esp+38h+var_D] +
mov [esp+38h+var_30] esi +
mov [esp+38h+var_34] offset aSfirmwareVer_1 +
mov [esp+38h+var_38] 0 +
mov [esp+38h+var_28] eax +
movzx eax [esp+38h+var_E] +
mov [esp+38h+var_2C] eax +
call sub_401740  +
mov eax [ebx+0A5Ch] +
mov eax [eax+1Ch] +
cmp eax 1 +
jnz loc_420E71  +
jmp loc_420F42  +
mov edx offset aStk520 +
jmp loc_420F85  +
***
push ebx  +
mov ebx edx +
sub esp 24h +
mov [esp+28h+var_20] edx +
mov [esp+28h+var_24] offset aStk500v2Stk5_1 +
mov [esp+28h+var_28] 5 +
call sub_401740  +
mov eax ebx +
mov ecx 5 +
shr eax 18h +
mov [esp+28h+var_17] al +
mov eax ebx +
shr eax 10h +
mov [esp+28h+var_16] al +
mov eax ebx +
shr eax 8 +
mov [esp+28h+var_15] al +
lea edx [esp+10h] +
mov eax esi +
mov [esp+28h+var_28] 10h +
mov [esp+28h+var_18] 6 +
mov [esp+28h+var_14] bl +
call sub_41FEB0  +
test eax eax +
js loc_421238  +
xor eax eax +
add esp 24h +
pop ebx  +
pop esi  +
retn   +
mov eax ds:dword_486584 +
mov [esp+28h+var_24] offset aSStk500v2_load +
mov [esp+28h+var_28] 0 +
mov [esp+28h+var_20] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_421232  +
***
mov edi offset aFlash_7 +
push esi  +
push ebx  +
sub esp 15Ch +
mov ebx [esp+164h+arg_10] +
mov eax [esp+164h+arg_14] +
mov [esp+164h+var_160] offset aStk500v2Stk5_0 +
mov [esp+164h+var_164] 5 +
mov [esp+164h+var_154] ebx +
add eax ebx +
mov [esp+164h+var_144] eax +
mov eax [esp+164h+arg_14] +
mov [esp+164h+var_150] eax +
mov eax [esp+164h+arg_C] +
mov [esp+164h+var_158] eax +
mov eax [esp+164h+arg_8] +
mov [esp+164h+var_15C] eax +
call sub_401740  +
mov esi [esp+164h+arg_8] +
mov ecx 6 +
mov eax [esp+164h+arg_8] +
cmps   +
mov ebp [eax+70h] +
mov eax [eax+80h] +
jnz loc_421450  +
mov edi [esp+164h+arg_8] +
mov eax [esp+164h+arg_8] +
mov [esp+164h+var_13E] 14h +
mov [esp+164h+var_138] 1 +
cmp dword ptr [edi+0A0h] 1 +
mov eax [eax+88h] +
sbb edi edi +
mov [esp+164h+var_13C] edi +
not [esp+164h+var_13C]  +
and [esp+164h+var_13C] 80000000h +
test eax eax +
jz loc_4214B3  +
lea edx [esp+164h+var_12B] +
mov [esp+164h+var_160] edx +
mov [esp+164h+var_164] eax +
call sub_4075B0  +
movzx eax byte ptr [esp+164h+var_12B] +
cmp ebx [esp+164h+var_144] +
mov edi [esp+164h+arg_14] +
mov [esp+164h+var_14C] 0FFFFFFFFh +
mov [esp+164h+var_13D] al +
jb loc_421383  +
jmp loc_421491  +
mov ecx [esp+164h+arg_8] +
sub edi ebp +
mov eax [ecx+78h] +
lea ecx [esp+164h+var_125] +
mov [esp+164h+var_15C] esi +
mov [esp+164h+var_160] ecx +
add eax ebx +
add ebx ebp +
mov [esp+164h+var_164] eax +
call memcpy  +
cmp [esp+164h+var_144] ebx +
jbe loc_421491  +
cmp ebp edi +
mov esi edi +
cmovbe esi ebp +
mov [esp+164h+var_158] esi +
mov [esp+164h+var_15C] ebx +
mov [esp+164h+var_160] offset aBlock_sizeAtAd +
mov [esp+164h+var_164] 5 +
call sub_401740  +
movzx eax [esp+164h+var_13E] +
mov [esp+164h+var_127] al +
movzx eax [esp+164h+var_13D] +
mov byte ptr [esp+164h+var_125+1] al +
mov eax esi +
shr eax 8 +
mov [esp+3Eh] al +
mov eax esi +
mov byte ptr [esp+164h+var_125] al +
mov eax ebx +
xor ax ax +
cmp eax [esp+164h+var_14C] +
mov [esp+164h+var_148] eax +
jz loc_4213FF  +
movzx ecx byte ptr [esp+164h+var_138] +
mov edx ebx +
mov eax [esp+164h+arg_0] +
shr edx cl +
or edx [esp+164h+var_13C] +
call sub_4211D0  +
test eax eax +
js loc_4214A3  +
mov eax [esp+164h+var_148] +
mov [esp+164h+var_14C] eax +
mov eax [esp+164h+arg_0] +
mov ecx 4 +
mov [esp+164h+var_164] 113h +
lea edx [esp+164h+var_127] +
call sub_41FEB0  +
test eax eax +
jns loc_421355  +
mov eax ds:dword_486584 +
mov [esp+164h+var_160] offset aSStk500v2_pa_0 +
mov [esp+164h+var_164] 0 +
mov [esp+164h+var_15C] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
add esp 15Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi [esp+164h+arg_8] +
mov ecx 7 +
mov edi offset aEeprom_5 +
mov [esp+164h+var_13C] 0 +
mov [esp+164h+var_138] 0 +
cmps   +
setnbe cl  +
setb dl  +
cmp cl dl +
mov ecx 0 +
mov edx 16h +
cmovz ecx edx +
mov [esp+164h+var_13E] cl +
jmp loc_42131A  +
mov eax [esp+164h+arg_14] +
add esp 15Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add esp 15Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+164h+arg_4] +
mov [esp+164h+var_160] offset aSStk500v2_pa_1 +
mov [esp+164h+var_164] 0 +
mov [esp+164h+var_158] eax +
mov eax ds:dword_486584 +
mov [esp+164h+var_15C] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_421445  +
***
mov edi offset aFlash_7 +
push esi  +
push ebx  +
sub esp 14Ch +
mov ebx [esp+154h+arg_10] +
mov eax [esp+154h+arg_14] +
mov ebp [esp+154h+arg_C] +
mov [esp+154h+var_150] offset aStk500v2Stk5_6 +
mov [esp+154h+var_144] ebx +
add eax ebx +
mov [esp+154h+var_138] eax +
mov eax [esp+154h+arg_14] +
mov [esp+154h+var_148] ebp +
mov [esp+154h+var_154] 5 +
mov [esp+154h+var_140] eax +
mov eax [esp+154h+arg_8] +
mov [esp+154h+var_14C] eax +
call sub_401740  +
mov esi [esp+154h+arg_8] +
test ebp ebp +
mov eax 100h +
mov ecx 6 +
cmovz ebp eax +
mov eax [esp+154h+arg_8] +
cmps   +
jnz loc_421630  +
cmp dword ptr [eax+0A0h] 1 +
mov ecx [esp+154h+arg_8] +
mov edi [esp+154h+arg_8] +
sbb eax eax +
mov [esp+154h+var_12C] eax +
mov eax [esp+154h+arg_8] +
mov edx [ecx+64h] +
not [esp+154h+var_12C]  +
and [esp+154h+var_12C] 80000000h +
movzx eax byte ptr [eax+68h] +
test dl 1 +
mov edi [edi+88h] +
mov [esp+154h+var_132] 13h +
mov [esp+154h+var_128] 1 +
mov [esp+154h+var_133] al +
mov eax [esp+154h+arg_8] +
mov eax [eax+90h] +
jz loc_42167A  +
mov eax edx +
or eax 0FFFFFF80h +
mov [esp+154h+var_134] al +
mov eax [ecx+98h] +
test eax eax +
jz loc_421881  +
lea esi [esp+154h+var_122] +
mov [esp+154h+var_150] esi +
mov [esp+154h+var_154] eax +
call sub_4075B0  +
movzx eax byte ptr [esp+154h+var_122] +
mov [esp+154h+var_130] al +
mov eax [esp+154h+arg_8] +
mov eax [eax+0A4h] +
test eax eax +
jz loc_4218E5  +
mov [esp+154h+var_150] esi +
mov [esp+154h+var_154] eax +
call sub_4075B0  +
movzx eax byte ptr [esp+154h+var_122] +
mov [esp+154h+var_131] al +
jmp loc_4216A9  +
mov ecx [esp+154h+arg_8] +
movzx eax byte ptr [eax+68h] +
mov edi [esp+154h+arg_8] +
mov [esp+154h+var_132] 15h +
mov edx [ecx+64h] +
mov [esp+154h+var_133] al +
mov eax [esp+154h+arg_8] +
mov edi [edi+80h] +
mov [esp+154h+var_12C] 0 +
test dl 1 +
mov eax [eax+84h] +
mov [esp+154h+var_128] 0 +
jnz loc_4215D3  +
mov ecx edx +
or ecx 0FFFFFF80h +
test eax eax +
mov [esp+154h+var_134] cl +
jz loc_421852  +
lea esi [esp+154h+var_122] +
mov [esp+154h+var_150] esi +
mov [esp+154h+var_154] eax +
call sub_4075B0  +
movzx eax byte ptr [esp+154h+var_122] +
mov [esp+154h+var_131] 0 +
mov [esp+154h+var_130] al +
test edi edi +
jz loc_4218B3  +
mov [esp+154h+var_150] esi +
mov esi ebx +
mov [esp+154h+var_154] edi +
call sub_4075B0  +
movzx eax byte ptr [esp+154h+var_122] +
mov edx 0FFFFFFFFh +
cmp ebx [esp+154h+var_138] +
mov edi [esp+154h+arg_14] +
mov [esp+154h+var_12F] al +
mov eax [esp+154h+arg_8] +
movzx eax byte ptr [eax+60h] +
mov [esp+154h+var_12E] al +
mov eax [esp+154h+arg_8] +
movzx eax byte ptr [eax+61h] +
mov [esp+154h+var_12D] al +
jb loc_421713  +
jmp loc_421830  +
lea eax [esi+ebp] +
sub edi ebp +
cmp [esp+154h+var_138] eax +
jbe loc_421830  +
mov edx esi +
mov esi eax +
cmp ebp edi +
mov ebx edi +
cmovbe ebx ebp +
mov [esp+154h+var_148] ebx +
mov [esp+154h+var_14C] esi +
mov [esp+154h+var_150] offset aBlock_sizeAtAd +
mov [esp+154h+var_154] 5 +
mov [esp+154h+var_13C] edx +
call sub_401740  +
movzx eax [esp+154h+var_132] +
mov edx [esp+154h+var_13C] +
mov [esp+154h+var_11C] bl +
mov [esp+154h+var_11E] al +
movzx eax [esp+154h+var_134] +
mov [esp+154h+var_11B] al +
movzx eax [esp+154h+var_133] +
mov [esp+154h+var_11A] al +
movzx eax [esp+154h+var_130] +
mov [esp+154h+var_119] al +
movzx eax [esp+154h+var_131] +
mov [esp+154h+var_118] al +
movzx eax [esp+154h+var_12F] +
mov [esp+154h+var_117] al +
movzx eax [esp+154h+var_12E] +
mov [esp+154h+var_116] al +
movzx eax [esp+154h+var_12D] +
mov [esp+154h+var_115] al +
mov eax ebx +
shr eax 8 +
cmp edx 0FFFFFFFFh +
mov [esp+37h] al +
jz loc_42179E  +
add edx ebx +
cmp edx esi +
jz loc_4217BF  +
movzx ecx byte ptr [esp+154h+var_128] +
mov edx esi +
mov eax [esp+154h+arg_0] +
shr edx cl +
or edx [esp+154h+var_12C] +
call sub_4211D0  +
test eax eax +
js loc_421842  +
mov ecx [esp+154h+arg_8] +
mov eax [ecx+78h] +
mov [esp+154h+var_14C] ebx +
add eax esi +
mov [esp+154h+var_150] eax +
lea eax [esp+154h+var_114] +
mov [esp+154h+var_154] eax +
call memcpy  +
mov eax [esp+154h+arg_0] +
lea ecx [ebx+0Ah] +
mov [esp+154h+var_154] 10Ah +
lea edx [esp+154h+var_11E] +
call sub_41FEB0  +
test eax eax +
jns loc_421700  +
mov eax ds:dword_486584 +
mov [esp+154h+var_150] offset aSStk500v2_pa_2 +
mov [esp+154h+var_154] 0 +
mov [esp+154h+var_14C] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
add esp 14Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+154h+arg_14] +
add esp 14Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add esp 14Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+154h+arg_4] +
mov [esp+154h+var_150] offset aSStk500v2_pa_3 +
mov [esp+154h+var_154] 0 +
mov [esp+154h+var_148] eax +
mov eax ds:dword_486584 +
mov [esp+154h+var_14C] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_421823  +
mov eax [esp+154h+arg_4] +
mov [esp+154h+var_150] offset aSStk500v2_pa_4 +
mov [esp+154h+var_154] 0 +
mov [esp+154h+var_148] eax +
mov eax ds:dword_486584 +
mov [esp+154h+var_14C] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_421823  +
mov eax [esp+154h+arg_4] +
mov [esp+154h+var_150] offset aSStk500v2_pa_5 +
mov [esp+154h+var_154] 0 +
mov [esp+154h+var_148] eax +
mov eax ds:dword_486584 +
mov [esp+154h+var_14C] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_421823  +
mov eax [esp+154h+arg_4] +
mov [esp+154h+var_150] offset aSStk500v2_pa_6 +
mov [esp+154h+var_154] 0 +
mov [esp+154h+var_148] eax +
mov eax ds:dword_486584 +
mov [esp+154h+var_14C] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_421823  +
***
sub esp 34h +
mov ebx [esp+34h+arg_4] +
mov esi [esp+34h+arg_8] +
movzx eax byte ptr [ebx+3] +
mov [esp+34h+var_20] eax +
movzx eax byte ptr [ebx+2] +
mov [esp+34h+var_24] eax +
movzx eax byte ptr [ebx+1] +
mov [esp+34h+var_28] eax +
movzx eax byte ptr [ebx] +
mov [esp+34h+var_30] offset aStk500v2Stk5_7 +
mov [esp+34h+var_34] 5 +
mov [esp+34h+var_2C] eax +
call sub_401740  +
movzx eax byte ptr [ebx] +
mov ecx 8 +
lea edx [esp+34h+var_C] +
mov byte ptr [esp+34h+var_C] 1Dh +
mov byte ptr [esp+34h+var_C+1] 4 +
mov [esp+34h+var_8] al +
movzx eax byte ptr [ebx+1] +
mov byte ptr [esp+34h+var_C+2] 4 +
mov byte ptr [esp+34h+var_C+3] 0 +
mov [esp+34h+var_7] al +
movzx eax byte ptr [ebx+2] +
mov [esp+34h+var_6] al +
movzx eax byte ptr [ebx+3] +
mov [esp+34h+var_34] 8 +
mov [esp+34h+var_5] al +
mov eax [esp+34h+arg_0] +
call sub_41FEB0  +
test eax eax +
js loc_421A08  +
cmp eax 5 +
jle loc_4219E0  +
movzx eax byte ptr [esp+34h+var_C+2] +
mov [esi] al +
movzx eax byte ptr [esp+34h+var_C+3] +
mov [esi+1] al +
movzx eax [esp+34h+var_8] +
mov [esi+2] al +
movzx eax [esp+34h+var_7] +
mov [esi+3] al +
xor eax eax +
add esp 34h +
pop ebx  +
pop esi  +
retn   +
mov [esp+34h+var_28] eax +
mov eax ds:dword_486584 +
mov [esp+34h+var_30] offset aSStk500v2_cmdS +
mov [esp+34h+var_34] 0 +
mov [esp+34h+var_2C] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_4219D6  +
mov eax ds:dword_486584 +
mov [esp+34h+var_30] offset aSStk500v2_cmdF +
mov [esp+34h+var_34] 0 +
mov [esp+34h+var_2C] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_4219D6  +
***
push ebx  +
sub esp 20h +
mov esi [esp+20h+arg_4] +
mov ebx [esp+20h+arg_0] +
mov eax [esi+174h] +
test eax eax +
jz loc_421AE9  +
mov eax [ebx+8C0h] +
mov [esp+20h+var_1C] 1 +
mov [esp+20h+var_20] ebx +
call eax  +
mov ecx [esi+70h] +
mov edx 10624DD3h +
mov [esp+20h+var_10] 12h +
mov [esp+20h+var_E] 0 +
mov eax ecx +
imul  edx +
mov eax [esi+174h] +
sar ecx 1Fh +
sar edx 6 +
sub edx ecx +
mov [esp+11h] dl +
lea edx [esp+20h+var_D] +
mov [esp+20h+var_1C] edx +
mov [esp+20h+var_20] eax +
call sub_4075B0  +
mov ecx 7 +
mov eax ebx +
lea edx [esp+20h+var_10] +
mov [esp+20h+var_20] 10h +
call sub_41FEB0  +
mov edi eax +
mov eax [esi+70h] +
mov [esp+20h+var_20] eax +
call sub_459150  +
mov eax [ebx+8C8h] +
mov [esp+20h+var_1C] esi +
mov [esp+20h+var_20] ebx +
call eax  +
mov eax [ebx+8C0h] +
mov [esp+20h+var_1C] 0 +
mov [esp+20h+var_20] ebx +
call eax  +
mov eax edi +
sar eax 1Fh +
add esp 20h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov eax ds:dword_486584 +
mov [esp+20h+var_14] esi +
mov [esp+20h+var_1C] offset aSStk500v2_chip +
mov [esp+20h+var_20] 0 +
mov [esp+20h+var_18] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_421AE2  +
***
jmp sub_421B20  +
***
push esi  +
push ebx  +
sub esp 0ACh +
mov ebx [esp+0ACh+arg_4] +
mov esi [esp+0ACh+arg_0] +
mov edx [ebx+178h] +
mov eax [esi+0A5Ch] +
test edx edx +
mov [eax+20h] ebx +
jz loc_421EF3  +
mov eax [eax+1Ch] +
and eax 0FFFFFFFBh +
cmp eax 1 +
jz loc_421DE0  +
mov [esp+0ACh+var_94] 5 +
lea ebp [esp+0ACh+var_78] +
mov eax [ebx+88h] +
mov [esp+0ACh+var_80] 10h +
mov [esp+0ACh+var_7F] al +
mov eax [ebx+8Ch] +
mov [esp+2Eh] al +
mov eax [ebx+90h] +
mov [esp+0ACh+var_7D] al +
mov eax [ebx+94h] +
mov [esp+0ACh+var_7C] al +
mov eax [ebx+98h] +
mov [esp+0ACh+var_7B] al +
movzx eax byte ptr [ebx+0A0h] +
mov [esp+0ACh+var_7A] al +
mov eax [ebx+9Ch] +
mov [esp+0ACh+var_79] al +
mov eax [ebx+178h] +
mov [esp+0ACh+var_A8] ebp +
mov [esp+0ACh+var_AC] eax +
call sub_4075B0  +
mov ecx 0Ch +
mov eax esi +
mov [esp+0ACh+var_AC] 10h +
lea edx [esp+0ACh+var_80] +
mov byte ptr [esp+0ACh+var_78+3] 0 +
mov byte ptr [esp+0ACh+var_78+2] 0 +
call sub_41FEB0  +
test eax eax +
mov edi eax +
jns loc_421C07  +
mov eax [esi+0A5Ch] +
mov edx [eax+1Ch] +
cmp edx 5 +
jz loc_421C14  +
cmp edx 6 +
jz loc_421C56  +
cmp edx 3 +
jz loc_421C14  +
mov eax edi +
add esp 0ACh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
lea ecx [esp+0ACh+var_80] +
mov edx 0A1h +
mov eax esi +
call sub_4201C0  +
test eax eax +
jz loc_421DF6  +
mov eax ds:dword_486584 +
mov [esp+0ACh+var_A8] offset aSStk500v2_prog +
mov [esp+0ACh+var_AC] 0 +
mov [esp+0ACh+var_A4] eax +
call sub_401740  +
add esp 0ACh +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp [esp+0ACh+var_7F] 0C0h +
jnz loc_421C07  +
test byte ptr [ebx+84h] 40h +
jz loc_421C07  +
mov eax ds:dword_486584 +
mov [esp+0ACh+var_A8] offset aSNoResponseInI +
mov [esp+0ACh+var_AC] 2 +
mov [esp+0ACh+var_A4] eax +
call sub_401740  +
mov eax [esi+0A5Ch] +
mov [esp+0ACh+var_90] eax +
mov eax [eax+28h] +
mov byte ptr [esp+0ACh+var_70] 5 +
mov [esi+0A5Ch] eax +
lea eax [esp+0ACh+var_70] +
mov [esp+0ACh+var_98] 1 +
mov [esp+0ACh+var_9C] eax +
mov [esp+0ACh+var_A0] 0 +
mov [esp+0ACh+var_A4] 1 +
mov [esp+0ACh+var_A8] 12h +
mov [esp+0ACh+var_AC] esi +
call sub_42F2A0  +
test eax eax +
js loc_421EE4  +
lea eax [esp+0ACh+var_84] +
mov [esp+0ACh+var_A0] eax +
lea eax [esp+0ACh+var_70] +
mov [esp+0ACh+var_9C] offset aAvrSignOn +
mov [esp+0ACh+var_A4] 4 +
mov [esp+0ACh+var_A8] eax +
mov [esp+0ACh+var_AC] esi +
mov byte ptr [esp+0ACh+var_70] 12h +
mov byte ptr [esp+0ACh+var_70+1] 10h +
mov byte ptr [esp+0ACh+var_70+3] 0 +
mov byte ptr [esp+0ACh+var_70+2] 0 +
call sub_42C8A0  +
test eax eax +
js loc_421DA0  +
mov eax [esp+0ACh+var_84] +
mov [esp+0ACh+var_AC] eax +
call free  +
lea eax [esp+0ACh+var_84] +
mov [esp+0ACh+var_A0] eax +
lea eax [esp+0ACh+var_70] +
mov [esp+0ACh+var_9C] offset aStartDwDebug +
mov [esp+0ACh+var_A4] 4 +
mov [esp+0ACh+var_A8] eax +
mov [esp+0ACh+var_AC] esi +
mov byte ptr [esp+0ACh+var_70+1] 13h +
call sub_42C8A0  +
test eax eax +
js loc_421DA0  +
mov eax [esp+0ACh+var_84] +
mov [esp+0ACh+var_AC] eax +
call free  +
lea eax [esp+0ACh+var_84] +
mov [esp+0ACh+var_A0] eax +
lea eax [esp+0ACh+var_70] +
mov [esp+0ACh+var_9C] offset aMonconDisable +
mov [esp+0ACh+var_A4] 3 +
mov [esp+0ACh+var_A8] eax +
mov [esp+0ACh+var_AC] esi +
mov byte ptr [esp+0ACh+var_70+1] 17h +
call sub_42C8A0  +
test eax eax +
js loc_421DA0  +
mov eax [esp+0ACh+var_84] +
mov [esp+0ACh+var_AC] eax +
call free  +
lea esi [esi+0] +
mov eax [esp+0ACh+var_90] +
sub [esp+0ACh+var_94] 1 +
mov [esi+0A5Ch] eax +
mov eax ds:dword_486584 +
jz loc_421EC7  +
mov [esp+0ACh+var_A0] eax +
mov [esp+0ACh+var_A4] eax +
mov [esp+0ACh+var_A8] offset aSTargetPrepa_0 +
mov [esp+0ACh+var_AC] 0 +
call sub_401740  +
jmp loc_421B6A  +
mov ecx 1 +
mov edx 9Eh +
mov eax esi +
call sub_420230  +
jmp loc_421B5E  +
movzx ebp [esp+0ACh+var_80] +
xor eax eax +
xor ebx ebx +
mov byte ptr [esp+0ACh+var_70] 0 +
lea esi [esp+0ACh+var_70] +
test ds:dword_473280[ebx*8] ebp +
jz loc_421E2D  +
test eax eax +
jnz loc_421E86  +
mov eax ds:off_473284[ebx*8] +
mov [esp+0ACh+var_AC] esi +
mov [esp+0ACh+var_A8] eax +
call strcat  +
mov eax 1 +
add ebx 1 +
cmp ebx 5 +
jnz loc_421E08  +
cmp byte ptr [esp+0ACh+var_70] 0 +
jz loc_421E70  +
mov eax ds:dword_486584 +
mov [esp+0ACh+var_A0] esi +
mov [esp+0ACh+var_A8] offset aSStk500v2_pr_0 +
mov [esp+0ACh+var_AC] 0 +
mov [esp+0ACh+var_A4] eax +
call sub_401740  +
add esp 0ACh +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+0ACh+var_A4] ebp +
mov [esp+0ACh+var_A8] offset aUnknownStatus0 +
mov [esp+0ACh+var_AC] esi +
call sprintf  +
jmp loc_421E3C  +
mov edx esi +
mov ecx [edx] +
add edx 4 +
lea eax [ecx-1010101h] +
not ecx  +
and eax ecx +
and eax 80808080h +
jz loc_421E88  +
mov ecx eax +
shr ecx 10h +
test eax 8080h +
cmovz eax ecx +
lea ecx [edx+2] +
cmovz edx ecx +
add al al +
sbb edx 3 +
mov eax 202Ch +
mov [edx] ax +
mov byte ptr [edx+2] 0 +
jmp loc_421E15  +
mov [esp+0ACh+var_A4] eax +
mov [esp+0ACh+var_A8] offset aSFailedToRet_0 +
mov [esp+0ACh+var_AC] 0 +
call sub_401740  +
jmp loc_421C07  +
mov eax [esp+0ACh+var_90] +
mov [esi+0A5Ch] eax +
jmp loc_421C07  +
mov eax ds:dword_486584 +
mov [esp+0ACh+var_A0] ebx +
mov [esp+0ACh+var_A8] offset aSStk500v2_pr_1 +
mov [esp+0ACh+var_AC] 0 +
mov [esp+0ACh+var_A4] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_421C09  +
***
sub esp 2Ch +
mov ecx 3 +
mov eax [esp+2Ch+arg_0] +
lea edx [esp+2Ch+var_1C] +
mov [esp+2Ch+var_2C] 10h +
mov byte ptr [esp+2Ch+var_1C] 11h +
mov byte ptr [esp+2Ch+var_1C+1] 1 +
mov byte ptr [esp+2Ch+var_1C+2] 1 +
call sub_41FEB0  +
test eax eax +
js loc_421F53  +
add esp 2Ch +
retn   +
mov eax ds:dword_486584 +
mov [esp+2Ch+var_28] offset aSStk500v2_disa +
mov [esp+2Ch+var_2C] 0 +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
add esp 2Ch +
retn   +
***
mov edi edx +
push esi  +
mov esi ecx +
push ebx  +
sub esp 1Ch +
cmp ecx [esp+24h+arg_0] +
mov [esp+24h+var_18] eax +
mov eax ecx +
cmovb eax [esp+24h+arg_0] +
add eax 1 +
mov [esp+24h+var_24] eax +
call malloc  +
test eax eax +
mov ebx eax +
jz loc_422007  +
lea ebp [eax+1] +
mov byte ptr [eax] 50h +
mov [esp+24h+var_1C] esi +
mov [esp+24h+var_20] edi +
mov [esp+24h+var_24] ebp +
call memcpy  +
mov eax [esp+24h+arg_0] +
lea ecx [esi+1] +
mov edx ebx +
add eax 1 +
mov [esp+24h+var_24] eax +
mov eax [esp+24h+var_18] +
call sub_41FEB0  +
test eax eax +
mov esi eax +
jz loc_421FF1  +
mov [esp+24h+var_24] ebx +
call free  +
mov eax esi +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+24h+arg_0] +
mov [esp+24h+var_20] ebp +
mov [esp+24h+var_24] edi +
mov [esp+24h+var_1C] eax +
call memcpy  +
jmp loc_421FDF  +
mov eax ds:dword_486584 +
mov [esp+24h+var_20] offset aSStk600_xprog_ +
mov [esp+24h+var_24] 0 +
mov [esp+24h+var_1C] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_421FE9  +
***
mov eax [esp+28h+arg_4] +
test byte ptr [eax+85h] 8 +
jz loc_422070  +
mov [esp+28h+var_24] offset aFlash_7 +
mov [esp+28h+var_28] eax +
call sub_407980  +
test eax eax +
jz loc_4220B6  +
mov eax [eax+50h] +
add eax 1 +
mov ebx eax +
mov ecx eax +
mov edx eax +
shr ebx 18h +
shr ecx 10h +
shr edx 8 +
jmp loc_422078  +
xor eax eax +
xor edx edx +
xor ecx ecx +
xor ebx ebx +
mov [esp+28h+var_9] al +
mov eax [esp+28h+arg_0] +
mov [esp+28h+var_B] cl +
mov ecx 6 +
mov [esp+28h+var_A] dl +
lea edx [esp+1Ah] +
mov [esp+28h+var_28] 2 +
mov [esp+28h+var_E] 3 +
mov [esp+28h+var_D] 1 +
mov [esp+28h+var_C] bl +
call sub_421F80  +
test eax eax +
js loc_4220DA  +
xor eax eax +
add esp 28h +
pop ebx  +
retn   +
mov eax ds:dword_486584 +
mov [esp+28h+var_24] offset aSStk600_xpro_0 +
mov [esp+28h+var_28] 0 +
mov [esp+28h+var_20] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_4220B1  +
mov eax ds:dword_486584 +
mov [esp+28h+var_24] offset aSStk600_xpro_1 +
mov [esp+28h+var_28] 0 +
mov [esp+28h+var_20] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_4220B1  +
***
push edi  +
mov edi offset aFlash_7 +
push esi  +
push ebx  +
sub esp 2Ch +
mov edx [esp+38h+arg_8] +
mov eax [esp+38h+arg_0] +
mov ebp [esp+38h+arg_C] +
mov esi edx +
cmps   +
jnz loc_422185  +
mov ecx [eax+0A5Ch] +
cmp ebp [ecx+24h] +
sbb ecx ecx +
add ecx 6 +
mov [esp+38h+var_1D] cl +
mov ebx [edx+50h] +
mov ecx 6 +
mov [esp+38h+var_38] 2 +
mov [esp+38h+var_1E] 3 +
add ebx ebp +
mov edx ebx +
shr edx 18h +
mov [esp+38h+var_1C] dl +
mov edx ebx +
shr edx 10h +
mov [esp+38h+var_1B] dl +
mov edx ebx +
shr edx 8 +
mov [esp+38h+var_1A] dl +
lea edx [esp+38h+var_1E] +
mov [esp+38h+var_19] bl +
call sub_421F80  +
test eax eax +
js loc_42222A  +
xor eax eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edi offset aApplication_3 +
mov ecx 0Ch +
mov esi edx +
cmps   +
jnz loc_4221A0  +
mov [esp+38h+var_1D] 5 +
jmp loc_422135  +
mov ecx 9 +
mov edi offset aApptable_2 +
mov esi edx +
cmps   +
setnbe bl  +
setb cl  +
cmp bl cl +
jz loc_422195  +
mov ecx 5 +
mov edi offset aBoot_2 +
mov esi edx +
cmps   +
setnbe bl  +
setb cl  +
cmp bl cl +
jnz loc_4221E0  +
mov [esp+38h+var_1D] 6 +
jmp loc_422135  +
mov ecx 7 +
mov edi offset aEeprom_5 +
mov esi edx +
cmps   +
setnbe bl  +
setb cl  +
cmp bl cl +
jz loc_422220  +
mov ecx 8 +
mov edi offset aUsersig_0 +
mov esi edx +
cmps   +
setnbe bl  +
setb cl  +
cmp bl cl +
jnz loc_42225A  +
mov [esp+38h+var_1D] 8 +
jmp loc_422135  +
mov [esp+38h+var_1D] 7 +
jmp loc_422135  +
movzx eax [esp+38h+var_1D] +
mov [esp+38h+var_34] offset aSStk600_xpro_2 +
mov [esp+38h+var_38] 0 +
mov [esp+38h+var_2C] eax +
mov eax ds:dword_486584 +
mov [esp+38h+var_30] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_42217D  +
mov eax ds:dword_486584 +
mov [esp+38h+var_2C] edx +
mov [esp+38h+var_34] offset aSStk600_xpro_3 +
mov [esp+38h+var_38] 0 +
mov [esp+38h+var_30] eax +
call sub_401740  +
or eax 0FFFFFFFFh +
jmp loc_42217D  +
***
push esi  +
push ebx  +
sub esp 5Ch +
cmp [esp+5Ch+arg_C] 200h +
mov ebp [esp+5Ch+arg_10] +
ja loc_422730  +
mov esi [esp+5Ch+arg_8] +
mov edi offset aFlash_7 +
mov ecx 6 +
cmps   +
setnbe al  +
setb dl  +
sub eax edx +
movsx eax al +
test eax eax +
jnz loc_422498  +
mov esi [esp+5Ch+arg_8] +
mov edi 80000000h +
mov [esp+5Ch+var_35] 2 +
mov [esp+5Ch+var_1C] 1 +
mov byte ptr [esp+5Ch+var_4C] 0 +
cmp dword ptr [esi+44h] 10000h +
cmovle edi eax +
mov eax [esp+5Ch+arg_8] +
mov esi [eax+50h] +
mov eax [esp+5Ch+arg_C] +
add esi ebp +
add eax 9 +
mov [esp+5Ch+var_5C] eax +
mov [esp+5Ch+var_14] eax +
call malloc  +
test eax eax +
mov ebx eax +
jz loc_422757  +
mov eax [esp+5Ch+arg_0] +
mov edx edi +
call sub_4211D0  +
test eax eax +
js loc_42262E  +
mov ecx [esp+5Ch+arg_14] +
test ecx ecx +
jz loc_422600  +
mov eax [esp+5Ch+arg_C] +
mov edi [esp+5Ch+arg_14] +
shr eax 8 +
mov [esp+5Ch+var_2C] eax +
mov eax [esp+5Ch+arg_C] +
sub eax 1 +
mov [esp+5Ch+var_18] eax +
lea eax [ebx+9] +
mov [esp+5Ch+var_34] eax +
movzx eax byte ptr [esp+5Ch+arg_C] +
and [esp+5Ch+var_18] 0FFFFFF00h +
mov [esp+5Ch+var_10] eax +
mov edx [esp+5Ch+var_1C] +
test edx edx +
jz loc_42239A  +
mov eax [esp+5Ch+arg_8] +
mov edx esi +
sub edx [eax+50h] +
mov eax [esp+5Ch+arg_0] +
mov eax [eax+0A5Ch] +
cmp edx [eax+24h] +
sbb eax eax +
mov [esp+5Ch+var_4C] eax +
add byte ptr [esp+5Ch+var_4C] 2 +
cmp [esp+5Ch+arg_C] 100h +
jbe loc_422560  +
mov eax [esp+5Ch+var_10] +
test eax eax +
jnz loc_42271A  +
mov eax [esp+5Ch+var_18] +
lea eax [eax+ebp+100h] +
mov [esp+5Ch+var_30] eax +
jmp loc_422466  +
movzx ecx byte ptr [esp+5Ch+var_4C] +
mov edx esi +
shr edx 18h +
mov [ebx+3] dl +
mov edx esi +
shr edx 10h +
mov [ebx+1] cl +
movzx ecx [esp+5Ch+var_35] +
mov [ebx+4] dl +
mov edx esi +
shr edx 8 +
mov byte ptr [ebx] 4 +
mov [ebx+2] cl +
mov ecx esi +
mov [ebx+6] cl +
mov ecx [esp+5Ch+arg_8] +
mov [ebx+5] dl +
mov byte ptr [ebx+7] 1 +
mov byte ptr [ebx+8] 0 +
mov edx [ecx+78h] +
mov [esp+5Ch+var_54] eax +
mov eax [esp+5Ch+var_34] +
add edx ebp +
mov [esp+5Ch+var_58] edx +
mov [esp+5Ch+var_5C] eax +
call memcpy  +
mov eax [esp+5Ch+arg_0] +
mov ecx 109h +
mov [esp+5Ch+var_5C] 2 +
mov edx ebx +
call sub_421F80  +
test eax eax +
js loc_422611  +
cmp edi 100h +
lea eax [edi-100h] +
mov edi 0 +
cmovnb edi eax +
add ebp 100h +
add esi 100h +
cmp ebp [esp+5Ch+var_30] +
jz loc_4225F8  +
cmp edi 0FFh +
mov eax 100h +
ja loc_4223C8  +
sub eax edi +
mov [esp+5Ch+var_54] eax +
lea eax [ebx+edi+9] +
mov [esp+5Ch+var_58] 0FFh +
mov [esp+5Ch+var_5C] eax +
call memset  +
mov eax edi +
jmp loc_4223C8  +
mov esi [esp+5Ch+arg_8] +
mov edi offset aApplication_3 +
mov ecx 0Ch +
cmps   +
jz loc_422510  +
mov esi [esp+5Ch+arg_8] +
mov edi offset aApptable_2 +
mov ecx 9 +
cmps   +
jz loc_422510  +
mov esi [esp+5Ch+arg_8] +
mov edi offset aBoot_2 +
mov ecx 5 +
cmps   +
setnbe al  +
setb dl  +
sub eax edx +
movsx eax al +
test eax eax +
jnz loc_422664  +
mov esi [esp+5Ch+arg_8] +
mov edi 80000000h +
mov [esp+5Ch+var_35] 2 +
mov [esp+5Ch+var_1C] 0 +
mov byte ptr [esp+5Ch+var_4C] 2 +
cmp dword ptr [esi+44h] 10000h +
cmovle edi eax +
jmp loc_4222F4  +
mov eax [esp+5Ch+arg_8] +
cmp dword ptr [eax+44h] 10000h +
jle loc_422540  +
mov [esp+5Ch+var_35] 2 +
mov edi 80000000h +
mov [esp+5Ch+var_1C] 0 +
mov byte ptr [esp+5Ch+var_4C] 1 +
jmp loc_4222F4  +
mov [esp+5Ch+var_35] 2 +
xor edi edi +
mov [esp+5Ch+var_1C] 0 +
mov byte ptr [esp+5Ch+var_4C] 1 +
jmp loc_4222F4  +
mov eax [esp+5Ch+arg_C] +
cmp eax edi +
ja loc_422643  +
movzx ecx byte ptr [esp+5Ch+var_4C] +
mov edx esi +
shr edx 18h +
mov [ebx+3] dl +
mov edx esi +
shr edx 10h +
mov [ebx+1] cl +
movzx ecx [esp+5Ch+var_35] +
mov [ebx+4] dl +
mov edx esi +
shr edx 8 +
mov byte ptr [ebx] 4 +
mov [ebx+2] cl +
mov ecx esi +
mov [ebx+6] cl +
movzx ecx byte ptr [esp+5Ch+var_2C] +
mov [ebx+5] dl +
mov [ebx+7] cl +
movzx ecx byte ptr [esp+5Ch+arg_C] +
mov [ebx+8] cl +
mov ecx [esp+5Ch+arg_8] +
mov edx [ecx+78h] +
mov [esp+5Ch+var_54] eax +
mov eax [esp+5Ch+var_34] +
add edx ebp +
mov [esp+5Ch+var_58] edx +
mov [esp+5Ch+var_5C] eax +
call memcpy  +
mov ecx [esp+5Ch+var_14] +
mov edx ebx +
mov eax [esp+5Ch+arg_0] +
mov [esp+5Ch+var_5C] 2 +
call sub_421F80  +
test eax eax +
js loc_422611  +
cmp edi [esp+5Ch+arg_C] +
cmovb edi [esp+5Ch+arg_C] +
add ebp [esp+5Ch+arg_C] +
add esi [esp+5Ch+arg_C] +
sub edi [esp+5Ch+arg_C] +
test edi edi +
jnz loc_422371  +
mov [esp+5Ch+var_5C] ebx +
call free  +
mov eax [esp+5Ch+arg_14] +
jmp loc_42263B  +
mov eax ds:dword_486584 +
mov [esp+5Ch+var_58] offset aSStk600_xpro_4 +
mov [esp+5Ch+var_54] eax +
mov [esp+5Ch+var_5C] 0 +
call sub_401740  +
mov [esp+5Ch+var_5C] ebx +
call free  +
mov eax 0FFFFFFFFh +
add esp 5Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
sub eax edi +
mov [esp+5Ch+var_54] eax +
lea eax [ebx+edi+9] +
mov [esp+5Ch+var_58] 0FFh +
mov [esp+5Ch+var_5C] eax +
call memset  +
mov eax edi +
jmp loc_42256C  +
mov esi [esp+5Ch+arg_8] +
mov edi offset aEeprom_5 +
mov ecx 7 +
cmps   +
jz loc_422701  +
mov esi [esp+5Ch+arg_8] +
mov edi offset aSignature_3 +
mov ecx 0Ah +
cmps   +
jz loc_422540  +
mov esi [esp+5Ch+arg_8] +
mov edi offset aFuse_5 +
mov ecx 4 +
cmps   +
jz loc_42277E  +
mov esi [esp+5Ch+arg_8] +
mov edi offset aLock_3 +
mov ecx 4 +
cmps   +
jz loc_422797  +
mov esi [esp+5Ch+arg_8] +
mov edi offset aCalibration_0 +
mov ecx 0Ch +
cmps   +
jz loc_4227B0  +
mov esi [esp+5Ch+arg_8] +
mov edi offset aUsersig_0 +
mov ecx 8 +
cmps   +
jnz loc_4227C9  +
mov [esp+5Ch+var_35] 2 +
xor edi edi +
mov [esp+5Ch+var_1C] 0 +
mov byte ptr [esp+5Ch+var_4C] 6 +
jmp loc_4222F4  +
mov [esp+5Ch+var_35] 3 +
xor edi edi +
mov [esp+5Ch+var_1C] 0 +
mov byte ptr [esp+5Ch+var_4C] 3 +
jmp loc_4222F4  +
mov eax ds:dword_486584 +
mov [esp+5Ch+var_58] offset aSStk600_xpro_5 +
mov [esp+5Ch+var_54] eax +
jmp loc_422622  +
mov eax ds:dword_486584 +
mov [esp+5Ch+var_58] offset aSStk600_xpro_6 +
mov [esp+5Ch+var_5C] 0 +
mov [esp+5Ch+var_54] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_42263B  +
mov eax ds:dword_486584 +
mov [esp+5Ch+var_58] offset aSStk600_xpro_7 +
mov [esp+5Ch+var_5C] 0 +
mov [esp+5Ch+var_54] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_42263B  +
mov [esp+5Ch+var_35] 2 +
xor edi edi +
mov [esp+5Ch+var_1C] 0 +
mov byte ptr [esp+5Ch+var_4C] 4 +
jmp loc_4222F4  +
mov [esp+5Ch+var_35] 2 +
xor edi edi +
mov [esp+5Ch+var_1C] 0 +
mov byte ptr [esp+5Ch+var_4C] 5 +
jmp loc_4222F4  +
mov [esp+5Ch+var_35] 2 +
xor edi edi +
mov [esp+5Ch+var_1C] 0 +
mov byte ptr [esp+5Ch+var_4C] 7 +
jmp loc_4222F4  +
mov eax [esp+5Ch+arg_8] +
mov [esp+5Ch+var_58] offset aSStk600_xpro_8 +
mov [esp+5Ch+var_5C] 0 +
mov [esp+5Ch+var_50] eax +
mov eax ds:dword_486584 +
mov [esp+5Ch+var_54] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_42263B  +
***
push edi  +
mov ebp 100h +
push esi  +
mov edi offset aFlash_7 +
push ebx  +
sub esp 5Ch +
mov eax [esp+68h+arg_C] +
mov esi [esp+68h+arg_8] +
cmp eax 100h +
cmovbe ebp eax +
cmps   +
setnbe al  +
setb dl  +
sub eax edx +
movsx eax al +
test eax eax +
jnz loc_4229D7  +
mov ecx [esp+68h+arg_8] +
mov edi 80000000h +
mov [esp+68h+var_3C] 1 +
mov byte ptr [esp+68h+var_58] 0 +
cmp dword ptr [ecx+44h] 10000h +
cmovle edi eax +
mov eax [esp+68h+arg_8] +
mov esi [esp+68h+arg_10] +
mov eax [eax+50h] +
mov [esp+68h+var_28] eax +
add esi eax +
lea eax [ebp+2] +
mov [esp+68h+var_68] eax +
mov [esp+68h+var_24] eax +
call malloc  +
test eax eax +
mov ebx eax +
jz loc_422B24  +
mov eax [esp+68h+arg_0] +
mov edx edi +
call sub_4211D0  +
test eax eax +
js loc_4229A5  +
mov edx [esp+68h+arg_14] +
test edx edx +
jz loc_4229C0  +
mov eax ebp +
shr eax 8 +
mov [esp+68h+var_38] eax +
mov eax ebp +
mov [esp+68h+var_1D] al +
mov eax [esp+68h+arg_14] +
lea ecx [ebx+2] +
mov [esp+68h+var_1C] ecx +
mov edi eax +
jmp loc_4228FE  +
mov ecx [esp+68h+arg_8] +
mov eax [esp+68h+var_40] +
mov edx [esp+68h+var_1C] +
add eax [ecx+78h] +
mov [esp+68h+var_60] ebp +
mov [esp+68h+var_64] edx +
mov [esp+68h+var_68] eax +
call memcpy  +
cmp edi ebp +
cmovb edi ebp +
add esi ebp +
sub edi ebp +
jz loc_4229C0  +
mov eax esi +
sub eax [esp+68h+var_28] +
mov [esp+68h+var_40] eax +
mov eax [esp+68h+var_3C] +
test eax eax +
jz loc_422931  +
mov eax [esp+68h+arg_8] +
mov edx esi +
sub edx [eax+50h] +
mov eax [esp+68h+arg_0] +
mov eax [eax+0A5Ch] +
cmp edx [eax+24h] +
sbb eax eax +
mov [esp+68h+var_58] eax +
add byte ptr [esp+68h+var_58] 2 +
movzx eax byte ptr [esp+68h+var_58] +
mov ecx 8 +
mov edx ebx +
mov byte ptr [ebx] 5 +
mov [ebx+1] al +
mov eax esi +
shr eax 18h +
mov [ebx+2] al +
mov eax esi +
shr eax 10h +
mov [ebx+3] al +
mov eax esi +
shr eax 8 +
mov [ebx+4] al +
mov eax esi +
mov [ebx+5] al +
movzx eax byte ptr [esp+68h+var_38] +
mov [ebx+6] al +
movzx eax [esp+68h+var_1D] +
mov [ebx+7] al +
mov eax [esp+68h+var_24] +
mov [esp+68h+var_68] eax +
mov eax [esp+68h+arg_0] +
call sub_421F80  +
test eax eax +
jns loc_4228D0  +
mov eax ds:dword_486584 +
mov [esp+68h+var_64] offset aSStk600_xpro_9 +
mov [esp+68h+var_68] 0 +
mov [esp+68h+var_60] eax +
call sub_401740  +
mov [esp+68h+var_68] ebx +
call free  +
add esp 5Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+68h+var_68] ebx +
call free  +
mov eax [esp+68h+arg_14] +
add esp 5Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi [esp+68h+arg_8] +
mov edi offset aApplication_3 +
mov ecx 0Ch +
cmps   +
jnz loc_422A10  +
mov eax [esp+68h+arg_8] +
cmp dword ptr [eax+44h] 10000h +
jle loc_422A66  +
mov edi 80000000h +
mov [esp+68h+var_3C] 0 +
mov byte ptr [esp+68h+var_58] 1 +
jmp loc_42285B  +
mov esi [esp+68h+arg_8] +
mov edi offset aApptable_2 +
mov ecx 9 +
cmps   +
jz loc_4229E9  +
mov esi [esp+68h+arg_8] +
mov edi offset aBoot_2 +
mov ecx 5 +
cmps   +
setnbe al  +
setb dl  +
sub eax edx +
movsx eax al +
test eax eax +
jnz loc_422A7A  +
mov ecx [esp+68h+arg_8] +
mov edi 80000000h +
mov [esp+68h+var_3C] 0 +
mov byte ptr [esp+68h+var_58] 2 +
cmp dword ptr [ecx+44h] 10000h +
cmovle edi eax +
jmp loc_42285B  +
xor edi edi +
mov [esp+68h+var_3C] 0 +
mov byte ptr [esp+68h+var_58] 1 +
jmp loc_42285B  +
mov esi [esp+68h+arg_8] +
mov edi offset aEeprom_5 +
mov ecx 7 +
cmps   +
jz loc_422B10  +
mov esi [esp+68h+arg_8] +
mov edi offset aSignature_3 +
mov ecx 0Ah +
cmps   +
jz loc_422A66  +
mov esi [esp+68h+arg_8] +
mov edi offset aFuse_5 +
mov ecx 4 +
cmps   +
jz loc_422B4B  +
mov esi [esp+68h+arg_8] +
mov edi offset aLock_3 +
mov ecx 4 +
cmps   +
jz loc_422B5F  +
mov esi [esp+68h+arg_8] +
mov edi offset aCalibration_0 +
mov ecx 0Ch +
cmps   +
jz loc_422B73  +
mov esi [esp+68h+arg_8] +
mov edi offset aUsersig_0 +
mov ecx 8 +
cmps   +
jnz loc_422B87  +
xor edi edi +
mov [esp+68h+var_3C] 0 +
mov byte ptr [esp+68h+var_58] 6 +
jmp loc_42285B  +
xor edi edi +
mov [esp+68h+var_3C] 0 +
mov byte ptr [esp+68h+var_58] 3 +
jmp loc_42285B  +
mov eax ds:dword_486584 +
mov [esp+68h+var_64] offset aSStk600_xpr_10 +
mov [esp+68h+var_68] 0 +
mov [esp+68h+var_60] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_4229CF  +
xor edi edi +
mov [esp+68h+var_3C] 0 +
mov byte ptr [esp+68h+var_58] 4 +
jmp loc_42285B  +
xor edi edi +
mov [esp+68h+var_3C] 0 +
mov byte ptr [esp+68h+var_58] 5 +
jmp loc_42285B  +
xor edi edi +
mov [esp+68h+var_3C] 0 +
mov byte ptr [esp+68h+var_58] 7 +
jmp loc_42285B  +
mov eax [esp+68h+arg_8] +
mov [esp+68h+var_64] offset aSStk600_xpr_11 +
mov [esp+68h+var_68] 0 +
mov [esp+68h+var_5C] eax +
mov eax ds:dword_486584 +
mov [esp+68h+var_60] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_4229CF  +
***
push edi  +
push esi  +
push ebx  +
sub esp 13Ch +
lea ebx [esp+148h+var_121] +
mov ebp [esp+148h+arg_10] +
test bl 1 +
mov edi ebx +
jnz loc_422DC0  +
test edi 2 +
jnz loc_422DD7  +
mov ecx edx +
xor eax eax +
shr ecx 2 +
test dl 2 +
stos   +
jz loc_422C08  +
xor eax eax +
add edi 2 +
mov [edi-2] ax +
and edx 1 +
jz loc_422C10  +
mov byte ptr [edi] 0 +
mov esi [esp+148h+arg_8] +
mov edi offset aFlash_7 +
mov ecx 6 +
cmps   +
jnz loc_422CF0  +
mov eax [esp+148h+arg_0] +
mov eax [eax+0A5Ch] +
mov eax [eax+24h] +
cmp [esp+148h+arg_C] eax +
jnb loc_422DA4  +
mov eax [esp+148h+arg_4] +
mov edx 1 +
mov eax [eax+84h] +
and eax 800h +
mov edi [esp+148h+arg_8] +
mov esi [esp+148h+arg_C] +
add esi [edi+50h] +
test eax eax +
jnz loc_422D85  +
mov ecx 0Ah +
mov edi 1 +
mov eax esi +
shr eax 18h +
mov byte ptr [esp+148h+var_121+3] al +
mov eax esi +
shr eax 10h +
mov [esp+148h+var_11D] al +
mov eax esi +
shr eax 8 +
mov [esp+148h+var_11C] al +
mov eax esi +
mov [esp+148h+var_11B] al +
mov eax edi +
mov [esp+148h+var_119] al +
mov eax ebp +
mov [esp+148h+var_118] al +
mov eax [esp+148h+arg_0] +
mov byte ptr [esp+148h+var_121+1] dl +
mov edx ebx +
mov [esp+148h+var_148] 2 +
mov byte ptr [esp+148h+var_121] 4 +
mov byte ptr [esp+148h+var_121+2] 0 +
mov [esp+148h+var_11A] 0 +
call sub_421F80  +
test eax eax +
js loc_422E70  +
xor eax eax +
add esp 13Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi [esp+148h+arg_8] +
mov edi offset aApplication_3 +
mov ecx 0Ch +
cmps   +
jz loc_422C46  +
mov esi [esp+148h+arg_8] +
mov edi offset aApptable_2 +
mov ecx 9 +
cmps   +
jz loc_422C46  +
mov esi [esp+148h+arg_8] +
mov edi offset aBoot_2 +
mov ecx 5 +
cmps   +
jz loc_422DA4  +
mov esi [esp+148h+arg_8] +
mov edi offset aEeprom_5 +
mov ecx 7 +
cmps   +
jz loc_422DE8  +
mov esi [esp+148h+arg_8] +
mov edi offset aLock_3 +
mov ecx 4 +
cmps   +
jnz loc_422E04  +
mov eax [esp+148h+arg_4] +
mov edx 5 +
mov eax [eax+84h] +
and eax 800h +
jmp loc_422C5D  +
mov eax [esp+148h+arg_8] +
mov ecx [eax+6Ch] +
test ecx ecx +
jz loc_422C76  +
mov edi ecx +
movzx ecx cl +
add ecx 9 +
jmp loc_422C80  +
mov eax [esp+148h+arg_4] +
mov edx 2 +
mov eax [eax+84h] +
and eax 800h +
jmp loc_422C5D  +
lea edi [esp+148h+var_121+1] +
mov dl 8 +
test edi 2 +
mov byte ptr [esp+148h+var_121] 0 +
jz loc_422BF1  +
xor ecx ecx +
add edi 2 +
mov [edi-2] cx +
sub edx 2 +
jmp loc_422BF1  +
mov eax [esp+148h+arg_4] +
mov edx 3 +
mov eax [eax+84h] +
and eax 800h +
jmp loc_422C5D  +
mov esi [esp+148h+arg_8] +
mov edi offset aFuse_5 +
mov ecx 4 +
cmps   +
jnz loc_422E3B  +
mov eax [esp+148h+arg_4] +
mov eax [eax+84h] +
mov [esp+148h+var_12C] eax +
and eax 800h +
jnz loc_422E97  +
mov edx 4 +
jmp loc_422C5D  +
mov esi [esp+148h+arg_8] +
mov edi offset aUsersig_0 +
mov ecx 8 +
cmps   +
jnz loc_422F37  +
mov eax [esp+148h+arg_4] +
mov edx 6 +
mov eax [eax+84h] +
and eax 800h +
jmp loc_422C5D  +
mov eax ds:dword_486584 +
mov [esp+148h+var_144] offset aSStk600_xpr_12 +
mov [esp+148h+var_148] 0 +
mov [esp+148h+var_140] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_422CDF  +
mov eax [esp+148h+arg_8] +
mov ecx 6 +
mov esi [esp+148h+arg_C] +
mov byte ptr [esp+148h+var_121] 3 +
mov byte ptr [esp+148h+var_121+1] 9 +
mov eax [eax+50h] +
mov [esp+148h+var_148] 2 +
mov edx eax +
add esi eax +
shr edx 18h +
mov byte ptr [esp+148h+var_121+2] dl +
mov edx eax +
shr edx 10h +
mov byte ptr [esp+148h+var_121+3] dl +
mov edx eax +
add eax 1 +
mov [esp+148h+var_11C] al +
mov eax [esp+148h+arg_0] +
shr edx 8 +
mov [esp+148h+var_11D] dl +
mov edx ebx +
call sub_421F80  +
test eax eax +
js loc_422F10  +
mov eax [esp+148h+arg_4] +
mov edx 4 +
mov eax [eax+84h] +
and eax 800h +
jmp loc_422C6E  +
mov eax ds:dword_486584 +
mov [esp+148h+var_144] offset aSStk600_xpr_13 +
mov [esp+148h+var_148] 0 +
mov [esp+148h+var_140] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_422CDF  +
mov eax [esp+148h+arg_8] +
mov [esp+148h+var_144] offset aSStk600_xpr_14 +
mov [esp+148h+var_148] 0 +
mov [esp+148h+var_13C] eax +
mov eax ds:dword_486584 +
mov [esp+148h+var_140] eax +
call sub_401740  +
or eax 0FFFFFFFFh +
jmp loc_422CDF  +
***
push edi  +
mov edi offset aFlash_7 +
push esi  +
push ebx  +
sub esp 2Ch +
mov edx [esp+38h+arg_8] +
mov eax [esp+38h+arg_0] +
mov ebp [esp+38h+arg_C] +
mov esi edx +
cmps   +
jnz loc_423010  +
mov ecx [eax+0A5Ch] +
cmp ebp [ecx+24h] +
sbb ecx ecx +
add ecx 2 +
mov [esp+38h+var_1F] cl +
mov ebx [edx+50h] +
mov ecx 8 +
mov [esp+38h+var_38] 3 +
mov [esp+38h+var_20] 5 +
mov [esp+38h+var_1A] 0 +
add ebx ebp +
mov edx ebx +
shr edx 18h +
mov [esp+38h+var_1E] dl +
mov edx ebx +
shr edx 10h +
mov [esp+38h+var_1D] dl +
mov edx ebx +
shr edx 8 +
mov [esp+38h+var_1C] dl +
lea edx [esp+38h+var_20] +
mov [esp+38h+var_1B] bl +
mov [esp+38h+var_19] 1 +
call sub_421F80  +
test eax eax +
js loc_4230EE  +
movzx eax [esp+38h+var_1E] +
mov edx [esp+38h+arg_10] +
mov [edx] al +
xor eax eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ecx 0Ch +
mov edi offset aApplication_3 +
mov esi edx +
cmps   +
setnbe bl  +
setb cl  +
cmp bl cl +
jnz loc_423032  +
mov [esp+38h+var_1F] 1 +
jmp loc_422FA5  +
mov ecx 9 +
mov edi offset aApptable_2 +
mov esi edx +
cmps   +
setnbe bl  +
setb cl  +
cmp bl cl +
jz loc_423028  +
mov ecx 5 +
mov edi offset aBoot_2 +
mov esi edx +
cmps   +
setnbe bl  +
setb cl  +
cmp bl cl +
jnz loc_423070  +
mov [esp+38h+var_1F] 2 +
jmp loc_422FA5  +
mov ecx 7 +
mov edi offset aEeprom_5 +
mov esi edx +
cmps   +
setnbe bl  +
setb cl  +
cmp bl cl +
jz loc_4230C2  +
mov ecx 0Ah +
mov edi offset aSignature_3 +
mov esi edx +
cmps   +
setnbe bl  +
setb cl  +
cmp bl cl +
jz loc_423028  +
mov ecx 4 +
mov edi offset aFuse_5 +
mov esi edx +
cmps   +
setnbe bl  +
setb cl  +
cmp bl cl +
jnz loc_4230CC  +
mov [esp+38h+var_1F] 4 +
jmp loc_422FA5  +
mov [esp+38h+var_1F] 3 +
jmp loc_422FA5  +
mov ecx 4 +
mov edi offset aLock_3 +
mov esi edx +
cmps   +
setnbe bl  +
setb cl  +
cmp bl cl +
jnz loc_423115  +
mov [esp+38h+var_1F] 5 +
jmp loc_422FA5  +
mov eax ds:dword_486584 +
mov [esp+38h+var_34] offset aSStk600_xpr_15 +
mov [esp+38h+var_38] 0 +
mov [esp+38h+var_30] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_423002  +
mov ecx 0Ch +
mov edi offset aCalibration_0 +
mov esi edx +
cmps   +
setnbe bl  +
setb cl  +
cmp bl cl +
jnz loc_423137  +
mov [esp+38h+var_1F] 7 +
jmp loc_422FA5  +
mov ecx 8 +
mov edi offset aUsersig_0 +
mov esi edx +
cmps   +
setnbe bl  +
setb cl  +
cmp bl cl +
jnz loc_423159  +
mov [esp+38h+var_1F] 6 +
jmp loc_422FA5  +
mov eax ds:dword_486584 +
mov [esp+38h+var_2C] edx +
mov [esp+38h+var_34] offset aSStk600_xpr_16 +
mov [esp+38h+var_38] 0 +
mov [esp+38h+var_30] eax +
call sub_401740  +
or eax 0FFFFFFFFh +
jmp loc_423002  +
***
sub esp 2Ch +
mov ecx 1 +
mov eax [esp+2Ch+arg_0] +
lea edx [esp+2Ch+var_E] +
mov [esp+2Ch+var_2C] 2 +
mov byte ptr [esp+2Ch+var_E] 2 +
call sub_421F80  +
test eax eax +
js loc_4231C0  +
add esp 2Ch +
retn   +
mov eax ds:dword_486584 +
mov [esp+2Ch+var_28] offset aSStk600_xpr_17 +
mov [esp+2Ch+var_2C] 0 +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
add esp 2Ch +
retn   +
***
jmp sub_4231F0  +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov esi [esp+2Ch+arg_4] +
mov ebx [esp+2Ch+arg_0] +
test byte ptr [esi+85h] 8 +
jnz loc_423325  +
mov eax [esi+140h] +
test eax eax +
jz loc_42341A  +
mov [esp+2Ch+var_28] offset aEeprom_5 +
mov [esp+2Ch+var_2C] esi +
call sub_407980  +
test eax eax +
mov edi eax +
jz loc_423410  +
mov ebp [eax+48h] +
test ebp ebp +
jz loc_4234D0  +
mov [esp+2Ch+var_2C] 10h +
mov ecx 2 +
mov eax ebx +
lea edx [esp+2Ch+var_1C] +
mov byte ptr [esp+2Ch+var_1C] 51h +
mov byte ptr [esp+2Ch+var_1C+1] 0 +
call sub_41FEB0  +
test eax eax +
js loc_423498  +
mov [esp+2Ch+var_2C] 2 +
mov ecx 1 +
mov eax ebx +
lea edx [esp+2Ch+var_1C] +
mov byte ptr [esp+2Ch+var_1C] 1 +
call sub_421F80  +
test eax eax +
js loc_4234F7  +
mov eax [esi+140h] +
mov ecx 6 +
mov [esp+2Ch+var_2C] 2 +
mov byte ptr [esp+2Ch+var_1C] 7 +
mov byte ptr [esp+2Ch+var_1C+1] 1 +
or eax 1000000h +
mov edx eax +
shr edx 18h +
mov byte ptr [esp+2Ch+var_1C+2] dl +
mov edx eax +
shr edx 10h +
mov byte ptr [esp+2Ch+var_1C+3] dl +
mov edx eax +
shr edx 8 +
mov [esp+2Ch+var_18] dl +
lea edx [esp+2Ch+var_1C] +
mov [esp+2Ch+var_17] al +
mov eax ebx +
call sub_421F80  +
test eax eax +
js loc_42351E  +
test edi edi +
jz loc_42331B  +
mov eax ebp +
mov ecx 4 +
shr eax 8 +
mov byte ptr [esp+2Ch+var_1C+2] al +
mov eax ebp +
mov byte ptr [esp+2Ch+var_1C+3] al +
lea edx [esp+2Ch+var_1C] +
mov eax ebx +
mov [esp+2Ch+var_2C] 2 +
mov byte ptr [esp+2Ch+var_1C] 7 +
mov byte ptr [esp+2Ch+var_1C+1] 2 +
call sub_421F80  +
test eax eax +
js loc_423471  +
xor eax eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+2Ch+var_2C] 10h +
mov ecx 2 +
mov eax ebx +
lea edx [esp+2Ch+var_1C] +
mov byte ptr [esp+2Ch+var_1C] 51h +
mov byte ptr [esp+2Ch+var_1C+1] 2 +
call sub_41FEB0  +
test eax eax +
js loc_423441  +
mov [esp+2Ch+var_2C] 2 +
mov ecx 1 +
mov eax ebx +
lea edx [esp+2Ch+var_1C] +
mov byte ptr [esp+2Ch+var_1C] 1 +
call sub_421F80  +
test eax eax +
js loc_4234F7  +
mov ecx 0E8h +
mov edx 0A4h +
mov eax ebx +
call sub_420230  +
test eax eax +
js loc_42349F  +
mov [esp+2Ch+var_2C] 2 +
mov ecx 3 +
mov eax ebx +
lea edx [esp+2Ch+var_1C] +
mov byte ptr [esp+2Ch+var_1C] 7 +
mov byte ptr [esp+2Ch+var_1C+1] 3 +
mov byte ptr [esp+2Ch+var_1C+2] 33h +
call sub_421F80  +
test eax eax +
js loc_4234A9  +
mov [esp+2Ch+var_2C] 2 +
mov ecx 3 +
mov eax ebx +
lea edx [esp+2Ch+var_1C] +
mov byte ptr [esp+2Ch+var_1C] 7 +
mov byte ptr [esp+2Ch+var_1C+1] 4 +
mov byte ptr [esp+2Ch+var_1C+2] 32h +
call sub_421F80  +
test eax eax +
jns loc_42331B  +
mov eax ds:dword_486584 +
mov [esp+2Ch+var_28] offset aSStk600_xpr_18 +
mov [esp+2Ch+var_2C] 0 +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_42331D  +
mov ebp 2Ah +
jmp loc_42323F  +
mov eax ds:dword_486584 +
mov [esp+2Ch+var_28] offset aSStk600_xpr_19 +
mov [esp+2Ch+var_2C] 0 +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_42331D  +
mov eax offset aTpi +
mov [esp+2Ch+var_20] eax +
mov eax ds:dword_486584 +
mov [esp+2Ch+var_28] offset aSStk600_xpr_20 +
mov [esp+2Ch+var_2C] 0 +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_42331D  +
mov eax ds:dword_486584 +
mov [esp+2Ch+var_28] offset aSStk600_xpr_21 +
mov [esp+2Ch+var_2C] 0 +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_42331D  +
mov eax offset aPdi_0 +
jmp loc_423446  +
mov eax 0FFFFFFFFh +
jmp loc_42331D  +
mov eax ds:dword_486584 +
mov [esp+2Ch+var_28] offset aSStk600_xpr_22 +
mov [esp+2Ch+var_2C] 0 +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_42331D  +
mov eax ds:dword_486584 +
mov [esp+2Ch+var_28] offset aSStk600_xpr_23 +
mov [esp+2Ch+var_2C] 0 +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_42331D  +
mov eax ds:dword_486584 +
mov [esp+2Ch+var_28] offset aSStk600_xpr_24 +
mov [esp+2Ch+var_2C] 0 +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_42331D  +
mov eax ds:dword_486584 +
mov [esp+2Ch+var_28] offset aSStk600_xpr_25 +
mov [esp+2Ch+var_2C] 0 +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_42331D  +
***
push ebp  +
push edi  +
mov edi offset aFlash_7 +
push esi  +
mov esi edx +
push ebx  +
sub esp 16Ch +
mov ebx [esp+180h] +
mov [esp+28h] eax +
mov eax [esp+184h] +
mov [esp+0Ch] ecx +
mov [esp+8] edx +
mov [esp+10h] ebx +
add eax ebx +
mov [esp+40h] eax +
mov eax [esp+184h] +
mov dword ptr [esp+4] offset aStk500v2Stk5_8 +
mov dword ptr [esp] 5 +
mov [esp+44h] edx +
mov [esp+14h] eax +
call sub_401740  +
mov ecx 6 +
mov ebp [esi+70h] +
cmps   +
jnz loc_423700  +
cmp dword ptr [esp+188h] 1 +
mov dword ptr [esp+4Ch] 1 +
sbb eax eax +
mov [esp+30h] eax +
mov eax [esp+44h] +
and byte ptr [esp+30h] 0F0h +
add byte ptr [esp+30h] 34h +
cmp dword ptr [eax+0A0h] 1 +
sbb eax eax +
mov [esp+48h] eax +
not dword ptr [esp+48h]  +
and dword ptr [esp+48h] 80000000h +
cmp ebx [esp+40h] +
mov edi [esp+184h] +
mov dword ptr [esp+24h] 0FFFFFFFFh +
jb loc_42363B  +
jmp loc_423755  +
mov ecx [esp+44h] +
sub edi ebp +
mov eax [ecx+78h] +
lea ecx [esp+58h] +
mov [esp+8] esi +
mov [esp+4] ecx +
add eax ebx +
add ebx ebp +
mov [esp] eax +
call memcpy  +
cmp [esp+40h] ebx +
jbe loc_423755  +
cmp ebp edi +
mov esi edi +
cmovbe esi ebp +
mov [esp+0Ch] esi +
mov [esp+8] ebx +
mov dword ptr [esp+4] offset aBlock_sizeAtAd +
mov dword ptr [esp] 5 +
call sub_401740  +
movzx eax byte ptr [esp+30h] +
mov [esp+56h] al +
mov eax esi +
shr eax 8 +
mov [esp+57h] al +
mov eax esi +
mov [esp+58h] al +
mov eax ebx +
xor ax ax +
cmp eax [esp+24h] +
mov [esp+2Ch] eax +
jz loc_4236AB  +
movzx ecx byte ptr [esp+4Ch] +
mov edx ebx +
mov eax [esp+28h] +
shr edx cl +
or edx [esp+48h] +
call sub_4211D0  +
test eax eax +
js loc_423767  +
mov eax [esp+2Ch] +
mov [esp+24h] eax +
mov eax [esp+28h] +
mov ecx 3 +
mov dword ptr [esp] 10Ah +
lea edx [esp+56h] +
call sub_41FEB0  +
test eax eax +
jns loc_423610  +
mov eax ds:dword_486584 +
mov dword ptr [esp+4] offset aSStk500hv_page +
mov dword ptr [esp] 0 +
mov [esp+8] eax +
call sub_401740  +
add esp 16Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov esi [esp+44h] +
mov edi offset aEeprom_5 +
mov ecx 7 +
cmps   +
jnz loc_423740  +
cmp dword ptr [esp+188h] 1 +
mov dword ptr [esp+48h] 0 +
mov dword ptr [esp+4Ch] 0 +
sbb eax eax +
mov [esp+30h] eax +
and byte ptr [esp+30h] 0F0h +
add byte ptr [esp+30h] 36h +
jmp loc_4235F5  +
***
mov dword ptr [esp+48h] 0 +
mov dword ptr [esp+4Ch] 0 +
jmp loc_4235F5  +
***
mov eax [esp+184h] +
add esp 16Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
add esp 16Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov ecx [esp+18h] +
mov eax [esp+4] +
mov edx [esp+0Ch] +
mov dword ptr [esp+0Ch] 0 +
mov [esp+8] ecx +
mov ecx [esp+14h] +
mov [esp+4] ecx +
mov ecx [esp+10h] +
jmp loc_423550  +
***
mov ecx [esp+18h] +
mov eax [esp+4] +
mov edx [esp+0Ch] +
mov dword ptr [esp+0Ch] 1 +
mov [esp+8] ecx +
mov ecx [esp+14h] +
mov [esp+4] ecx +
mov ecx [esp+10h] +
jmp loc_423550  +
***
push ebp  +
push edi  +
mov edi offset aFlash_7 +
push esi  +
mov esi edx +
push ebx  +
mov ebx ecx +
sub esp 17Ch +
mov ebp [esp+190h] +
mov [esp+28h] eax +
mov eax [esp+194h] +
mov [esp+0Ch] ecx +
mov [esp+8] edx +
mov [esp+10h] ebp +
add eax ebp +
mov [esp+50h] eax +
mov eax [esp+194h] +
mov dword ptr [esp+4] offset aStk500v2Stk5_9 +
mov dword ptr [esp] 5 +
mov [esp+2Ch] edx +
mov [esp+14h] eax +
call sub_401740  +
mov ecx 6 +
cmps   +
jnz loc_423A00  +
mov eax [esp+28h] +
cmp dword ptr [esp+198h] 1 +
mov dword ptr [esp+5Ch] 1 +
mov eax [eax+0A5Ch] +
mov dword ptr [eax+4] 0FFFFFFFFh +
sbb eax eax +
mov [esp+30h] eax +
mov eax [esp+2Ch] +
and byte ptr [esp+30h] 0F0h +
add byte ptr [esp+30h] 33h +
cmp dword ptr [eax+0A0h] 1 +
sbb eax eax +
mov [esp+58h] eax +
not dword ptr [esp+58h]  +
and dword ptr [esp+58h] 80000000h +
cmp ebx 2 +
ja loc_423A54  +
mov eax [esp+2Ch] +
test ebx ebx +
mov byte ptr [esp+56h] 0C0h +
movzx eax byte ptr [eax+68h] +
mov [esp+55h] al +
jnz loc_4238B8  +
mov ebx 100h +
cmp ebp [esp+50h] +
jnb loc_423A90  +
mov eax ebx +
mov edi [esp+194h] +
mov edx 0FFFFFFFFh +
shr eax 8 +
mov [esp+40h] eax +
mov [esp+57h] bl +
jmp loc_4238F4  +
lea eax [ebp+ebx+0] +
sub edi ebx +
cmp [esp+50h] eax +
jbe loc_423A90  +
mov edx ebp +
mov ebp eax +
cmp ebx edi +
mov esi edi +
cmovbe esi ebx +
mov [esp+0Ch] esi +
mov [esp+8] ebp +
mov dword ptr [esp+4] offset aBlock_sizeAtAd +
mov dword ptr [esp] 5 +
mov [esp+24h] edx +
call sub_401740  +
movzx eax byte ptr [esp+30h] +
mov edx [esp+24h] +
mov [esp+66h] al +
movzx eax byte ptr [esp+56h] +
cmp edx 0FFFFFFFFh +
mov [esp+69h] al +
movzx eax byte ptr [esp+55h] +
mov [esp+6Ah] al +
movzx eax byte ptr [esp+40h] +
mov [esp+67h] al +
movzx eax byte ptr [esp+57h] +
mov [esp+68h] al +
jz loc_423957  +
add edx esi +
cmp ebp edx +
jz loc_423971  +
movzx ecx byte ptr [esp+5Ch] +
mov edx ebp +
mov eax [esp+28h] +
shr edx cl +
or edx [esp+58h] +
call sub_4211D0  +
test eax eax +
js loc_4239EA  +
mov ecx [esp+2Ch] +
mov eax [ecx+78h] +
mov [esp+8] esi +
add eax ebp +
mov [esp+4] eax +
lea eax [esp+6Bh] +
mov [esp] eax +
call memcpy  +
cmp ebx esi +
jz loc_4239AE  +
mov eax ebx +
sub eax esi +
mov [esp+8] eax +
lea eax [esp+esi+6Bh] +
mov dword ptr [esp+4] 0FFh +
mov [esp] eax +
call memset  +
mov eax [esp+28h] +
lea ecx [ebx+5] +
mov dword ptr [esp] 10Ah +
lea edx [esp+66h] +
call sub_41FEB0  +
test eax eax +
jns loc_4238E0  +
mov eax ds:dword_486584 +
mov dword ptr [esp+4] offset aSStk500hv_pa_0 +
mov dword ptr [esp] 0 +
mov [esp+8] eax +
call sub_401740  +
add esp 17Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov esi [esp+2Ch] +
mov edi offset aEeprom_5 +
mov ecx 7 +
cmps   +
jnz loc_423A77  +
mov eax [esp+28h] +
cmp dword ptr [esp+198h] 1 +
mov dword ptr [esp+58h] 0 +
mov dword ptr [esp+5Ch] 0 +
mov eax [eax+0A5Ch] +
mov dword ptr [eax+10h] 0FFFFFFFFh +
sbb eax eax +
mov [esp+30h] eax +
and byte ptr [esp+30h] 0F0h +
add byte ptr [esp+30h] 35h +
cmp ebx 2 +
jbe loc_42389E  +
mov eax ebx +
call sub_41F030  +
test eax eax +
jz loc_4239EA  +
or eax 0FFFFFFC1h +
mov [esp+56h] al +
mov eax [esp+2Ch] +
movzx eax byte ptr [eax+68h] +
mov [esp+55h] al +
jmp loc_4238B8  +
***
mov dword ptr [esp+58h] 0 +
mov dword ptr [esp+5Ch] 0 +
jmp loc_423895  +
***
mov eax [esp+194h] +
add esp 17Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov ecx [esp+18h] +
mov eax [esp+4] +
mov edx [esp+0Ch] +
mov dword ptr [esp+0Ch] 0 +
mov [esp+8] ecx +
mov ecx [esp+14h] +
mov [esp+4] ecx +
mov ecx [esp+10h] +
jmp loc_4237E0  +
***
mov ecx [esp+18h] +
mov eax [esp+4] +
mov edx [esp+0Ch] +
mov dword ptr [esp+0Ch] 1 +
mov [esp+8] ecx +
mov ecx [esp+14h] +
mov [esp+4] ecx +
mov ecx [esp+10h] +
jmp loc_4237E0  +
***
push edi  +
mov edi offset aFlash_7 +
push esi  +
push ebx  +
mov ebx ecx +
sub esp 16Ch +
mov esi ebx +
mov [esp+178h+var_158] eax +
mov eax [esp+178h+arg_4] +
mov [esp+178h+var_16C] ecx +
mov [esp+178h+var_174] offset aSStk500hv_writ +
mov [esp+178h+var_178] 2 +
mov [esp+178h+var_154] eax +
mov eax [esp+178h+arg_0] +
mov [esp+178h+var_168] eax +
mov eax ds:dword_486584 +
mov [esp+178h+var_170] eax +
call sub_401740  +
mov ecx 6 +
cmps   +
jnz loc_423C30  +
cmp [esp+178h+arg_8] 1 +
movzx ecx byte ptr [esp+178h+arg_0] +
sbb eax eax +
and eax 0FFFFFFF0h +
add eax 33h +
mov [esp+178h+var_122] al +
mov eax [esp+178h+var_158] +
cmp dword ptr [ebx+0A0h] 1 +
mov eax [eax+0A5Ch] +
mov esi [eax+8] +
lea edi [eax+4] +
mov [esp+178h+var_14C] edi +
sbb edi edi +
mov ebp [eax] +
not edi  +
xor edx edx +
and edi 80000000h +
lea eax [esi+5] +
mov [esp+178h+var_150] eax +
xor eax eax +
test esi esi +
jnz loc_423E64  +
mov [esp+57h] cl +
mov ecx [esp+178h+arg_8] +
movzx ebx byte ptr [esp+178h+var_154] +
test ecx ecx +
mov [esp+178h+var_120] bl +
jz loc_423D97  +
sub [esp+178h+var_150] 1 +
mov [esp+178h+var_11F] al +
mov eax ds:dword_486584 +
mov [esp+178h+var_174] offset aSStk500hv_wr_0 +
mov [esp+178h+var_178] 2 +
mov [esp+178h+var_170] eax +
call sub_401740  +
mov ecx [esp+178h+var_150] +
lea edx [esp+178h+var_122] +
mov eax [esp+178h+var_158] +
mov [esp+178h+var_178] 10Ah +
call sub_41FEB0  +
test eax eax +
js loc_423EBE  +
xor eax eax +
jmp loc_423D8C  +
mov edi offset aEeprom_5 +
mov ecx 7 +
mov esi ebx +
cmps   +
jnz loc_423DA4  +
cmp [esp+178h+arg_8] 1 +
mov esi [ebx+48h] +
sbb eax eax +
and eax 0FFFFFFF0h +
add eax 35h +
test esi esi +
mov [esp+178h+var_122] al +
jz loc_423DE3  +
mov edi esi +
mov eax esi +
shr edi 8 +
neg eax  +
lea edx [esi-1] +
mov ecx esi +
and edx [esp+178h+arg_0] +
mov [esp+178h+var_148] edi +
lea edi [esi+5] +
mov [esp+178h+var_150] edi +
and eax [esp+178h+arg_0] +
mov [esp+178h+var_12C] 0 +
mov [esp+178h+var_138] eax +
mov eax [esp+178h+var_158] +
mov eax [eax+0A5Ch] +
mov ebp [eax+0Ch] +
lea edi [eax+10h] +
mov [esp+178h+var_14C] edi +
xor edi edi +
mov [esp+178h+var_170] esi +
mov [esp+178h+var_174] 0FFh +
mov [esp+178h+var_178] ebp +
mov [esp+178h+var_130] ecx +
mov [esp+178h+var_134] edx +
call memset  +
movzx eax byte ptr [esp+178h+var_154] +
cmp esi 2 +
mov edx [esp+178h+var_134] +
mov ecx [esp+178h+var_130] +
mov [ebp+edx+0] al +
movzx eax byte ptr [esp+178h+var_148] +
mov [esp+178h+var_120] cl +
mov [esp+178h+var_11F] 0C0h +
mov [esp+57h] al +
jbe loc_423D0A  +
mov eax esi +
call sub_41F030  +
test eax eax +
jz loc_423EDB  +
or al [esp+178h+var_11F] +
or eax 1 +
mov [esp+178h+var_11F] al +
mov eax [ebx+68h] +
mov [esp+178h+var_170] esi +
mov [esp+178h+var_174] ebp +
mov [esp+178h+var_11E] al +
lea eax [esp+178h+var_11D] +
mov [esp+178h+var_178] eax +
call memcpy  +
mov edx [esp+178h+var_138] +
movzx ecx byte ptr [esp+178h+var_12C] +
mov eax [esp+178h+var_158] +
shr edx cl +
or edx edi +
call sub_4211D0  +
test eax eax +
js loc_423EDB  +
mov eax ds:dword_486584 +
mov [esp+178h+var_174] offset aSStk500hv_wr_0 +
mov [esp+178h+var_178] 2 +
mov [esp+178h+var_170] eax +
call sub_401740  +
mov ecx [esp+178h+var_150] +
lea edx [esp+178h+var_122] +
mov eax [esp+178h+var_158] +
mov [esp+178h+var_178] 10Ah +
call sub_41FEB0  +
test eax eax +
js loc_423EBE  +
mov eax [esp+178h+var_14C] +
mov dword ptr [eax] 0FFFFFFFFh +
xor eax eax +
add esp 16Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+178h+var_11F] dl +
mov [esp+178h+var_11E] al +
jmp loc_423BE8  +
mov edi offset aLfuse_6 +
mov ecx 6 +
mov esi ebx +
cmps   +
jnz loc_423E06  +
cmp [esp+178h+arg_8] 1 +
mov edx [ebp+11Ch] +
sbb eax eax +
xor ecx ecx +
and eax 0FFFFFFF0h +
add eax 37h +
mov [esp+178h+var_122] al +
mov eax [ebp+120h] +
mov [esp+178h+var_150] 5 +
jmp loc_423BC3  +
mov ecx 1 +
xor edx edx +
mov byte ptr [esp+178h+var_148] 0 +
mov eax 0FFFFFFFFh +
mov esi 1 +
mov [esp+178h+var_150] 6 +
jmp loc_423C83  +
mov edi offset aFuse_5 +
mov ecx 5 +
mov esi ebx +
cmps   +
jz loc_423DB4  +
mov edi offset aHfuse_6 +
mov ecx 6 +
mov esi ebx +
cmps   +
jz loc_423E94  +
mov edi offset aEfuse_6 +
mov ecx 6 +
mov esi ebx +
cmps   +
jnz loc_423EE5  +
cmp [esp+178h+arg_8] 1 +
mov ecx 2 +
mov edx [ebp+11Ch] +
sbb eax eax +
and eax 0FFFFFFF0h +
add eax 37h +
mov [esp+178h+var_122] al +
mov eax [ebp+120h] +
jmp loc_423DD6  +
mov eax esi +
mov ecx esi +
neg eax  +
mov [esp+178h+var_138] eax +
mov eax [esp+178h+arg_0] +
lea edx [esi-1] +
and [esp+178h+var_138] eax +
mov [esp+178h+var_12C] 1 +
and edx eax +
mov eax esi +
shr eax 8 +
mov [esp+178h+var_148] eax +
jmp loc_423CAC  +
cmp [esp+178h+arg_8] 1 +
mov ecx 1 +
mov edx [ebp+11Ch] +
sbb eax eax +
and eax 0FFFFFFF0h +
add eax 37h +
mov [esp+178h+var_122] al +
mov eax [ebp+120h] +
jmp loc_423DD6  +
mov eax ds:dword_486584 +
mov [esp+178h+var_174] offset aSStk500hv_wr_1 +
mov [esp+178h+var_178] 0 +
mov [esp+178h+var_170] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_423D8C  +
mov edi offset aLock_3 +
mov ecx 5 +
mov esi ebx +
cmps   +
jnz loc_423F22  +
cmp [esp+178h+arg_8] 1 +
mov edx [ebp+124h] +
movzx ecx byte ptr [esp+178h+arg_0] +
sbb eax eax +
and eax 0FFFFFFF0h +
add eax 39h +
mov [esp+178h+var_122] al +
mov eax [ebp+128h] +
jmp loc_423DD6  +
mov eax ds:dword_486584 +
mov [esp+178h+var_16C] ebx +
mov [esp+178h+var_174] offset aSStk500hv_wr_2 +
mov [esp+178h+var_178] 0 +
mov [esp+178h+var_170] eax +
call sub_401740  +
or eax 0FFFFFFFFh +
jmp loc_423D8C  +
***
mov edx [esp+arg_4] +
mov eax [esp+arg_0] +
mov ecx [esp+arg_8] +
mov [esp+arg_4] ebx +
mov ebx [esp+arg_C] +
mov [esp+arg_8] 0 +
mov [esp+arg_0] ebx +
pop ebx  +
jmp sub_423B10  +
***
mov edx [esp+arg_4] +
mov eax [esp+arg_0] +
mov ecx [esp+arg_8] +
mov [esp+arg_4] ebx +
mov ebx [esp+arg_C] +
mov [esp+arg_8] 1 +
mov [esp+arg_0] ebx +
pop ebx  +
jmp sub_423B10  +
***
push ebp  +
mov ebp eax +
push edi  +
mov edi offset aFlash_7 +
push esi  +
push ebx  +
mov ebx edx +
sub esp 13Ch +
mov eax ds:dword_486584 +
mov esi ebx +
mov [esp+10h] ecx +
mov [esp+0Ch] edx +
mov dword ptr [esp+4] offset aSStk500hv_read +
mov [esp+8] eax +
mov dword ptr [esp] 2 +
mov [esp+14h] ecx +
call sub_401740  +
mov ecx 6 +
cmps   +
jnz loc_4240D0  +
cmp dword ptr [esp+154h] 1 +
sbb eax eax +
and eax 0FFFFFFF0h +
add eax 34h +
mov [esp+26h] al +
mov eax [ebp+0A5Ch] +
mov esi [eax+8] +
lea ecx [eax+4] +
mov eax [eax] +
mov [esp+18h] ecx +
mov ecx 1 +
mov edi esi +
neg edi  +
and edi [esp+14h] +
cmp dword ptr [ebx+0A0h] 1 +
mov [esp+1Ch] eax +
sbb eax eax +
not eax  +
and eax 80000000h +
test esi esi +
jnz loc_4241B5  +
mov edx esi +
mov ebx esi +
shr edx 8 +
mov [esp+27h] dl +
mov edx edi +
shr edx cl +
or edx eax +
mov eax ebp +
mov [esp+28h] bl +
call sub_4211D0  +
test eax eax +
js loc_4242D1  +
mov eax ds:dword_486584 +
mov dword ptr [esp+4] offset aSStk500hv_re_0 +
mov dword ptr [esp] 2 +
mov [esp+8] eax +
call sub_401740  +
mov ecx 3 +
mov eax ebp +
mov dword ptr [esp] 10Ah +
lea edx [esp+26h] +
call sub_41FEB0  +
test eax eax +
js loc_42418E  +
test esi esi +
jnz loc_424246  +
movzx eax byte ptr [esp+28h] +
mov ebx [esp+150h] +
mov [ebx] al +
xor eax eax +
add esp 13Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov edi offset aEeprom_5 +
mov ecx 7 +
mov esi ebx +
cmps   +
jnz loc_424124  +
cmp dword ptr [esp+154h] 1 +
mov esi [ebx+48h] +
sbb eax eax +
and eax 0FFFFFFF0h +
add eax 36h +
test esi esi +
mov [esp+26h] al +
jz loc_4241E5  +
mov edi esi +
neg edi  +
mov eax [ebp+0A5Ch] +
xor ecx ecx +
and edi [esp+14h] +
lea ebx [eax+10h] +
mov eax [eax+0Ch] +
mov [esp+18h] ebx +
mov [esp+1Ch] eax +
xor eax eax +
jmp loc_4241BA  +
mov edi offset aLfuse_6 +
mov ecx 6 +
mov esi ebx +
cmps   +
jnz loc_4241F4  +
cmp dword ptr [esp+154h] 1 +
sbb eax eax +
and eax 0FFFFFFF0h +
add eax 38h +
mov [esp+26h] al +
xor eax eax +
mov [esp+27h] al +
mov eax ds:dword_486584 +
mov dword ptr [esp+4] offset aSStk500hv_re_0 +
mov dword ptr [esp] 2 +
mov [esp+8] eax +
call sub_401740  +
mov ecx 2 +
mov eax ebp +
mov dword ptr [esp] 10Ah +
lea edx [esp+26h] +
call sub_41FEB0  +
test eax eax +
jns loc_4240B2  +
mov eax ds:dword_486584 +
mov dword ptr [esp+4] offset aSStk500hv_re_1 +
mov dword ptr [esp] 0 +
mov [esp+8] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_4240C2  +
***
mov ecx 1 +
mov ebx [esp+18h] +
cmp [ebx] edi +
jnz loc_42404A  +
mov eax [esp+1Ch] +
sub esi 1 +
and esi [esp+14h] +
mov edi [esp+150h] +
movzx eax byte ptr [eax+esi] +
mov [edi] al +
xor eax eax +
jmp loc_4240C2  +
***
mov edi 0FFFFFFFFh +
mov esi 1 +
jmp loc_424103  +
***
mov edi offset aFuse_5 +
mov ecx 5 +
mov esi ebx +
cmps   +
jz loc_424138  +
mov edi offset aHfuse_6 +
mov ecx 6 +
mov esi ebx +
cmps   +
jz loc_424285  +
mov edi offset aEfuse_6 +
mov ecx 6 +
mov esi ebx +
cmps   +
jnz loc_4242A3  +
cmp dword ptr [esp+154h] 1 +
sbb eax eax +
and eax 0FFFFFFF0h +
add eax 38h +
mov [esp+26h] al +
mov eax 2 +
jmp loc_42414E  +
***
mov eax [esp+18h] +
mov ebx [esp+1Ch] +
mov [eax] edi +
lea eax [esp+28h] +
mov [esp+8] esi +
sub esi 1 +
mov [esp] ebx +
mov [esp+4] eax +
call memcpy  +
mov edi [esp+150h] +
and esi [esp+14h] +
movzx eax byte ptr [ebx+esi] +
mov [edi] al +
add esp 13Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
cmp dword ptr [esp+154h] 1 +
sbb eax eax +
and eax 0FFFFFFF0h +
add eax 38h +
mov [esp+26h] al +
mov eax 1 +
jmp loc_42414E  +
***
mov edi offset aLock_3 +
mov ecx 5 +
mov esi ebx +
cmps   +
jnz loc_4242DB  +
cmp dword ptr [esp+154h] 1 +
sbb eax eax +
and eax 0FFFFFFF0h +
add eax 3Ah +
mov [esp+26h] al +
movzx eax byte ptr [esp+14h] +
jmp loc_42414E  +
***
mov eax 0FFFFFFFFh +
jmp loc_4240C2  +
***
mov edi offset aCalibration_0 +
mov ecx 0Ch +
mov esi ebx +
cmps   +
jnz loc_424309  +
cmp dword ptr [esp+154h] 1 +
sbb eax eax +
and eax 0FFFFFFF0h +
add eax 3Ch +
mov [esp+26h] al +
movzx eax byte ptr [esp+14h] +
jmp loc_42414E  +
***
mov ecx 0Ah +
mov edi offset aSignature_3 +
movzx eax byte ptr [esp+14h] +
mov esi ebx +
cmps   +
setnbe cl  +
setb dl  +
cmp cl dl +
jnz loc_42414E  +
cmp dword ptr [esp+154h] 1 +
sbb edx edx +
and edx 0FFFFFFF0h +
add edx 3Bh +
mov [esp+26h] dl +
jmp loc_42414E  +
***
mov edx [esp+14h] +
mov eax [esp+4] +
mov ecx [esp+10h] +
mov dword ptr [esp+8] 0 +
mov [esp+4] edx +
mov edx [esp+0Ch] +
jmp loc_423FB0  +
***
jmp loc_424380  +
mov edx [esp+14h] +
mov eax [esp+4] +
mov ecx [esp+10h] +
mov dword ptr [esp+8] 1 +
mov [esp+4] edx +
mov edx [esp+0Ch] +
jmp loc_423FB0  +
***
jmp loc_4243B0  +
push edi  +
mov edi ecx +
push esi  +
mov esi edx +
push ebx  +
mov ebx eax +
sub esp 20h +
mov eax [eax+8C0h] +
mov dword ptr [esp+4] 1 +
mov [esp] ebx +
call eax  +
test edi edi +
jnz loc_424440  +
mov eax [esi+110h] +
mov byte ptr [esp+1Dh] 22h +
mov [esp+1Eh] al +
mov eax [esi+114h] +
mov [esp+1Fh] al +
lea edx [esp+1Dh] +
mov ecx 3 +
mov dword ptr [esp] 3 +
mov eax ebx +
call sub_41FEB0  +
mov edi eax +
mov eax [esi+70h] +
mov [esp] eax +
call sub_459150  +
mov eax [ebx+8C8h] +
mov [esp+4] esi +
mov [esp] ebx +
call eax  +
mov eax [ebx+8C0h] +
mov [esp] ebx +
mov dword ptr [esp+4] 0 +
call eax  +
add esp 20h +
mov eax edi +
pop ebx  +
sar eax 1Fh +
pop esi  +
pop edi  +
retn   +
***
mov eax [esi+114h] +
mov byte ptr [esp+1Dh] 32h +
mov [esp+1Eh] al +
mov eax [esi+118h] +
mov [esp+1Fh] al +
jmp loc_4243EC  +
***
mov edx [esp+8] +
xor ecx ecx +
mov eax [esp+4] +
jmp loc_4243B0  +
***
mov edx [esp+8] +
mov ecx 1 +
mov eax [esp+4] +
jmp loc_4243B0  +
***
sub esp 2Ch +
mov eax [esp+2Ch+arg_0] +
mov edx [esp+2Ch+arg_4] +
mov [esp+2Ch+var_1C] 20h +
mov ecx [eax+0A5Ch] +
mov [ecx+20h] edx +
mov ecx [edx+0ECh] +
mov [esp+11h] cl +
mov ecx [edx+0F0h] +
mov [esp+2Ch+var_1A] cl +
mov ecx [edx+0F4h] +
mov [esp+2Ch+var_19] cl +
mov ecx [edx+0F8h] +
mov [esp+2Ch+var_18] cl +
mov ecx [edx+0FCh] +
mov [esp+2Ch+var_17] cl +
mov ecx [edx+100h] +
mov edx [edx+104h] +
mov [esp+2Ch+var_2C] 10h +
mov [esp+2Ch+var_16] cl +
mov ecx 8 +
mov [esp+2Ch+var_15] dl +
lea edx [esp+2Ch+var_1C] +
call sub_41FEB0  +
add esp 2Ch +
retn   +
***
push esi  +
mov esi edx +
push ebx  +
mov ebx eax +
sub esp 24h +
mov eax [eax+0A5Ch] +
mov eax [eax] +
mov [esp] eax +
call free  +
mov eax [ebx+0A5Ch] +
mov dword ptr [eax] 0 +
mov eax [eax+0Ch] +
mov [esp] eax +
call free  +
mov ecx [ebx+0A5Ch] +
test esi esi +
mov eax 21h +
mov dword ptr [ecx+0Ch] 0 +
jz loc_424567  +
cmp dword ptr [ecx+1Ch] 5 +
mov eax 3Eh +
mov edx 31h +
cmovnz eax edx +
mov [esp+10h] al +
mov ecx 3 +
mov eax ebx +
mov dword ptr [esp] 10h +
lea edx [esp+10h] +
mov byte ptr [esp+11h] 0Fh +
mov byte ptr [esp+12h] 0Fh +
call sub_41FEB0  +
test eax eax +
js loc_424596  +
add esp 24h +
pop ebx  +
pop esi  +
retn   +
***
mov eax ds:dword_486584 +
mov dword ptr [esp+4] offset aSStk500hv_disa +
mov dword ptr [esp] 0 +
mov [esp+8] eax +
call sub_401740  +
add esp 24h +
pop ebx  +
pop esi  +
retn   +
***
mov eax [esp+4] +
xor edx edx +
jmp loc_424510  +
***
mov eax [esp+4] +
mov edx 1 +
jmp loc_424510  +
***
push ebp  +
mov ebp eax +
push edi  +
push esi  +
mov esi edx +
push ebx  +
sub esp 5Ch +
cmp ecx 1 +
sbb eax eax +
add eax 2 +
cmp [edx+0B0h] eax +
mov [esp+1Ch] edx +
jnz loc_4247B0  +
mov edi [esp+1Ch] +
mov ecx 21h +
mov byte ptr [esp+2Fh] 2Dh +
mov edx [edi+0B4h] +
mov eax edi +
add eax 0B4h +
mov eax [eax+1Ch] +
mov [esp+30h] edx +
mov edx [edi+0B8h] +
mov [esp+4Ch] eax +
mov eax ebp +
mov [esp+34h] edx +
mov edx [edi+0BCh] +
mov [esp+38h] edx +
mov edx [edi+0C0h] +
mov [esp+3Ch] edx +
mov edx [edi+0C4h] +
mov [esp+40h] edx +
mov edx [edi+0C8h] +
mov [esp+44h] edx +
mov edx [edi+0CCh] +
mov dword ptr [esp] 21h +
mov [esp+48h] edx +
lea edx [esp+2Fh] +
call sub_41FEB0  +
test eax eax +
js loc_4247F1  +
mov eax [ebp+0A5Ch] +
mov dword ptr [eax+8] 2 +
mov dword ptr [eax+14h] 1 +
mov eax [esp+1Ch] +
mov eax [eax+17Ch] +
mov [esp] eax +
call sub_406F20  +
test eax eax +
mov ebx eax +
jnz loc_4246DD  +
jmp loc_424723  +
mov eax [eax+48h] +
test eax eax +
jle loc_4246CF  +
cmp eax 100h +
jle loc_4247A0  +
mov eax [ebp+0A5Ch] +
mov dword ptr [eax+8] 100h +
mov [esp] ebx +
call sub_406F40  +
test eax eax +
mov ebx eax +
jz loc_424723  +
mov [esp] ebx +
mov edi offset aFlash_7 +
call sub_406F60  +
mov ecx 6 +
mov esi eax +
cmps   +
jz loc_4246B0  +
mov edi offset aEeprom_5 +
mov esi eax +
mov ecx 7 +
cmps   +
jnz loc_4246CF  +
mov eax [eax+48h] +
test eax eax +
jle loc_4246CF  +
mov edx [ebp+0A5Ch] +
mov [edx+14h] eax +
mov [esp] ebx +
call sub_406F40  +
test eax eax +
mov ebx eax +
jnz loc_4246DD  +
mov eax [ebp+0A5Ch] +
mov eax [eax] +
mov [esp] eax +
call free  +
mov eax [ebp+0A5Ch] +
mov eax [eax+0Ch] +
mov [esp] eax +
call free  +
mov ebx [ebp+0A5Ch] +
mov eax [ebx+8] +
mov [esp] eax +
call malloc  +
test eax eax +
mov [ebx] eax +
jz loc_42484F  +
mov eax [ebx+14h] +
mov [esp] eax +
call malloc  +
test eax eax +
mov [ebx+0Ch] eax +
jz loc_424818  +
mov edi [esp+1Ch] +
mov eax [ebp+8E0h] +
mov dword ptr [ebx+10h] 0FFFFFFFFh +
mov dword ptr [ebx+4] 0FFFFFFFFh +
mov [esp+4] edi +
mov [esp] ebp +
call eax  +
add esp 5Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov edx [ebp+0A5Ch] +
mov [edx+8] eax +
jmp loc_4246CF  +
***
test ecx ecx +
mov edx offset aHighVoltageSer +
mov eax offset aParallel +
cmovnz eax edx +
mov [esp+0Ch] eax +
mov eax ds:dword_486584 +
mov [esp+10h] esi +
mov dword ptr [esp+4] offset aSStk500hv_in_0 +
mov dword ptr [esp] 0 +
mov [esp+8] eax +
call sub_401740  +
add esp 5Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax ds:dword_486584 +
mov dword ptr [esp+4] offset aSStk500hv_in_1 +
mov dword ptr [esp] 0 +
mov [esp+8] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_424796  +
***
mov eax ds:dword_486584 +
mov dword ptr [esp+4] offset aSStk500hv_init +
mov dword ptr [esp] 0 +
mov [esp+8] eax +
call sub_401740  +
mov eax [ebp+0A5Ch] +
mov eax [eax] +
mov [esp] eax +
call free  +
mov eax 0FFFFFFFFh +
jmp loc_424796  +
***
mov eax ds:dword_486584 +
mov dword ptr [esp+4] offset aSStk500hv_init +
mov dword ptr [esp] 0 +
mov [esp+8] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_424796  +
***
mov edx [esp+8] +
xor ecx ecx +
mov eax [esp+4] +
jmp loc_4245E0  +
***
mov edx [esp+8] +
mov ecx 1 +
mov eax [esp+4] +
jmp loc_4245E0  +
***
sub esp 28h +
mov eax [esp+28h+arg_0] +
mov edx [esp+28h+arg_4] +
mov ebx [eax+0A5Ch] +
cmp dword ptr [ebx+1Ch] 5 +
mov [ebx+20h] edx +
mov ebx 30h +
cmovnz ecx ebx +
mov [esp+28h+var_18] cl +
mov ecx [edx+0ECh] +
mov [esp+11h] cl +
mov ecx [edx+130h] +
mov [esp+28h+var_16] cl +
mov ecx [edx+12Ch] +
mov [esp+28h+var_15] cl +
mov ecx [edx+0F4h] +
mov [esp+28h+var_14] cl +
mov ecx [edx+0F8h] +
mov [esp+28h+var_13] cl +
mov ecx [edx+0FCh] +
mov [esp+28h+var_12] cl +
mov ecx [edx+100h] +
mov edx [edx+104h] +
mov [esp+28h+var_28] 10h +
mov [esp+28h+var_11] cl +
mov ecx 9 +
mov [esp+28h+var_10] dl +
lea edx [esp+28h+var_18] +
call sub_41FEB0  +
add esp 28h +
pop ebx  +
retn   +
***
sub esp 38h +
mov [esp+38h+var_27] dl +
mov edx ecx +
shr edx 8 +
mov [esp+38h+var_26] dl +
lea edx [esp+10h] +
mov [esp+38h+var_25] cl +
mov ecx 4 +
mov [esp+38h+var_38] 20h +
mov [esp+38h+var_28] 2 +
call sub_41FEB0  +
test eax eax +
js loc_42498C  +
xor eax eax +
add esp 38h +
pop ebx  +
retn   +
mov eax ds:dword_486584 +
mov [esp+38h+var_2C] ebx +
mov [esp+38h+var_34] offset aSStk500v2_se_5 +
mov [esp+38h+var_38] 0 +
mov [esp+38h+var_30] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_424987  +
***
sub esp 24h +
fld  ds:flt_473A08 +
fdiv  [esp+24h+arg_4] +
mov esi [esp+24h+arg_0] +
fdivr  ds:flt_473AA0 +
fsub  ds:flt_473A04 +
fstp  [esp+24h+var_24] +
call sub_459620  +
mov edx 0FFFh +
fnstcw  [esp+24h+var_6] +
movzx eax [esp+24h+var_6] +
mov ah 0Ch +
mov [esp+24h+var_8] ax +
mov eax esi +
fldcw  [esp+24h+var_8] +
fistp  [esp+24h+var_14] +
fldcw  [esp+24h+var_6] +
mov ecx dword ptr [esp+24h+var_14] +
cmp ecx 0FFFh +
cmovbe edx ecx +
add esp 24h +
pop ebx  +
mov ecx edx +
pop esi  +
mov edx 0C0h +
jmp sub_424950  +
***
push ebx  +
xor ebx ebx +
sub esp 30h +
fld  [esp+30h+arg_4] +
fld  st +
mov esi [esp+30h+arg_0] +
fstp  [esp+30h+var_18] +
fdiv  ds:flt_473AA4 +
fstp  [esp+30h+var_30] +
call sub_459CA0  +
fnstcw  [esp+30h+var_2] +
fmul  ds:dbl_473AA8 +
movzx eax [esp+30h+var_2] +
mov ah 0Ch +
mov [esp+30h+var_4] ax +
fldcw  [esp+30h+var_4] +
fistp  [esp+30h+var_10] +
fldcw  [esp+30h+var_2] +
mov dword ptr [esp+30h+var_10+4] ebx +
mov eax dword ptr [esp+30h+var_10] +
lea ecx [eax+0Ah] +
mov edi eax +
mov dword ptr [esp+30h+var_10] ecx +
fild  [esp+30h+var_10] +
fstp  [esp+30h+var_28] +
fld  ds:flt_473A08 +
fstp  [esp+30h+var_30] +
call sub_4596B0  +
mov eax edi +
shl eax 0Ch +
fmul  ds:flt_473A8C +
fnstcw  [esp+30h+var_2] +
movzx edx [esp+30h+var_2] +
fld  [esp+30h+var_18] +
fdivp st(1) st +
mov dh 0Ch +
mov [esp+30h+var_4] dx +
mov edx 0C1h +
fsubr  ds:flt_473AB0 +
fldcw  [esp+30h+var_4] +
fistp  [esp+30h+var_10] +
fldcw  [esp+30h+var_2] +
mov ecx dword ptr [esp+30h+var_10] +
add esp 30h +
pop ebx  +
shl ecx 2 +
or ecx eax +
mov eax esi +
pop esi  +
pop edi  +
jmp sub_424950  +
***
push edi  +
push esi  +
push ebx  +
sub esp 4Ch +
fld  ds:dbl_473AB8 +
lea ecx [esp+58h+var_19] +
fadd  [esp+58h+arg_8] +
fnstcw  [esp+58h+var_2E] +
mov ebx [esp+58h+arg_4] +
movzx eax [esp+58h+var_2E] +
fmul  ds:flt_473A88 +
mov ah 0Ch +
mov [esp+58h+var_30] ax +
mov eax [esp+58h+arg_0] +
fldcw  [esp+58h+var_30] +
fistp  [esp+58h+var_38] +
fldcw  [esp+58h+var_2E] +
mov esi dword ptr [esp+58h+var_38] +
call sub_4201C0  +
test eax eax +
jnz loc_424BC0  +
movzx eax byte ptr [esp+58h+var_19] +
lea edx [eax+eax*4] +
add edx edx +
cmp esi edx +
ja loc_424BE4  +
test ebx ebx +
jz loc_424BA8  +
cmp ebx 1 +
jz loc_424B90  +
mov eax ds:dword_486584 +
mov dword ptr [esp+58h+var_4C] ebx +
mov [esp+58h+var_54] offset aSStk500v2_se_6 +
mov [esp+58h+var_58] 0 +
mov [esp+58h+var_50] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+58h+arg_0] +
mov ecx esi +
mov edx 0C3h +
call sub_424950  +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+58h+arg_0] +
mov ecx esi +
mov edx 0C2h +
call sub_424950  +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ds:dword_486584 +
mov [esp+58h+var_54] offset aSStk500v2_se_2 +
mov [esp+58h+var_58] 0 +
mov [esp+58h+var_50] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_424B82  +
mov [esp+58h+var_2C] eax +
mov eax ds:dword_486584 +
fild  [esp+58h+var_2C] +
fdiv  ds:flt_473A48 +
mov [esp+58h+var_54] offset aSStk500v2_se_1 +
mov [esp+58h+var_50] eax +
mov [esp+58h+var_58] 0 +
fstp  [esp+58h+var_4C] +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_424B82  +
***
push esi  +
push ebx  +
sub esp 50h +
fld  [esp+58h+arg_4] +
fst  [esp+58h+var_30] +
mov esi [esp+58h+arg_0] +
fld  ds:dbl_473A40 +
fnstcw  [esp+58h+var_22] +
faddp st(1) st +
movzx eax [esp+58h+var_22] +
fmul  ds:flt_473A48 +
mov ah 0Ch +
mov [esp+58h+var_24] ax +
mov eax esi +
fldcw  [esp+58h+var_24] +
fistp  [esp+58h+var_20] +
fldcw  [esp+58h+var_22] +
mov ecx dword ptr [esp+58h+var_20] +
mov ebx ecx +
lea ecx [esp+58h+var_C] +
call sub_420800  +
test eax eax +
jnz loc_424DC0  +
mov eax [esp+58h+var_C] +
movzx edi bl +
lea ebx [edi+edi*4] +
add ebx ebx +
cmp ebx eax +
jb loc_424D00  +
lea ecx [esp+58h+var_C] +
mov edx 0C3h +
mov eax esi +
call sub_420800  +
test eax eax +
jnz loc_424DE7  +
mov eax [esp+58h+var_C] +
cmp ebx eax +
jb loc_424D60  +
mov eax [esi+0A5Ch] +
mov eax [eax+20h] +
test eax eax +
jz loc_424CC6  +
mov eax [esi+8D4h] +
mov [esp+58h+var_58] esi +
call eax  +
mov edx 94h +
mov ecx edi +
mov eax esi +
call sub_420290  +
mov edx [esi+0A5Ch] +
mov edx [edx+20h] +
mov ebx eax +
test edx edx +
jz loc_424CF2  +
mov eax [esi+8E0h] +
mov [esp+58h+var_54] edx +
mov [esp+58h+var_58] esi +
call eax  +
add esp 50h +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
retn   +
xor edx edx +
fld  [esp+58h+var_30] +
fstp  [esp+58h+var_44] +
mov dword ptr [esp+58h+var_20] eax +
mov eax ds:dword_486584 +
mov dword ptr [esp+58h+var_20+4] edx +
fild  [esp+58h+var_20] +
fdiv  ds:flt_473A88 +
mov [esp+58h+var_50] eax +
mov [esp+58h+var_54] offset aSStk500v2_se_7 +
mov [esp+58h+var_58] 0 +
fstp  [esp+58h+var_4C] +
call sub_401740  +
mov ecx ebx +
mov edx 0C2h +
mov eax esi +
mov [esp+58h+var_C] ebx +
call sub_424950  +
test eax eax +
jz loc_424C8A  +
mov ebx 0FFFFFFFFh +
jmp loc_424CF2  +
xor edx edx +
fld  [esp+58h+var_30] +
fstp  [esp+58h+var_44] +
mov dword ptr [esp+58h+var_20] eax +
mov eax ds:dword_486584 +
mov dword ptr [esp+58h+var_20+4] edx +
fild  [esp+58h+var_20] +
fdiv  ds:flt_473A88 +
mov [esp+58h+var_50] eax +
mov [esp+58h+var_54] offset aSStk500v2_se_8 +
mov [esp+58h+var_58] 0 +
fstp  [esp+58h+var_4C] +
call sub_401740  +
mov ecx ebx +
mov edx 0C3h +
mov eax esi +
mov [esp+58h+var_C] ebx +
call sub_424950  +
test eax eax +
jz loc_424CAE  +
jmp loc_424D57  +
mov eax ds:dword_486584 +
mov ebx 0FFFFFFFFh +
mov [esp+58h+var_54] offset aSStk500v2_se_9 +
mov [esp+58h+var_58] 0 +
mov [esp+58h+var_50] eax +
call sub_401740  +
jmp loc_424CF2  +
mov eax ds:dword_486584 +
mov [esp+58h+var_54] offset aSStk500v2_s_10 +
mov [esp+58h+var_58] 0 +
mov [esp+58h+var_50] eax +
call sub_401740  +
jmp loc_424D57  +
***
mov edi offset aFlash_7 +
push esi  +
push ebx  +
sub esp 4Ch +
mov eax [esp+54h+arg_10] +
mov ebx [esp+54h+arg_8] +
mov ebp [esp+54h+arg_C] +
mov [esp+54h+var_50] offset aSStk500isp_wri +
mov [esp+54h+var_34] eax +
mov eax ds:dword_486584 +
mov [esp+54h+var_48] ebx +
mov esi ebx +
mov [esp+54h+var_44] ebp +
mov [esp+54h+var_54] 2 +
mov [esp+54h+var_4C] eax +
call sub_401740  +
mov ecx 6 +
cmps   +
jnz loc_424F07  +
mov eax [esp+54h+arg_0] +
mov eax [eax+0A5Ch] +
mov esi [eax+8] +
lea edi [eax+4] +
mov [esp+54h+var_28] edi +
mov edi [eax] +
mov edx esi +
neg edx  +
lea ecx [esi-1] +
and edx ebp +
and ecx ebp +
test byte ptr [ebx+64h] 1 +
jnz loc_424E8E  +
xor ecx ecx +
mov esi 1 +
mov [esp+54h+var_4C] esi +
mov [esp+54h+var_50] 0FFh +
mov [esp+54h+var_54] edi +
mov [esp+54h+var_2C] ecx +
mov [esp+54h+var_30] edx +
call memset  +
mov ecx [esp+54h+var_2C] +
movzx eax byte ptr [esp+54h+var_34] +
mov edx [esp+54h+var_30] +
mov [edi+ecx] al +
add edx [ebx+78h] +
mov [esp+54h+var_4C] esi +
mov [esp+54h+var_50] edi +
mov [esp+54h+var_54] edx +
call memcpy  +
mov eax [esp+54h+arg_4] +
mov [esp+54h+var_4C] ebx +
xor ebx ebx +
mov [esp+54h+var_40] esi +
mov [esp+54h+var_44] ebp +
mov [esp+54h+var_50] eax +
mov eax [esp+54h+arg_0] +
mov [esp+54h+var_48] esi +
mov [esp+54h+var_54] eax +
call sub_4214F0  +
mov eax [esp+54h+var_28] +
mov dword ptr [eax] 0FFFFFFFFh +
add esp 4Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edi offset aEeprom_5 +
mov ecx 7 +
mov esi ebx +
cmps   +
jnz loc_424F50  +
mov esi [ebx+48h] +
test esi esi +
jz loc_424F42  +
mov edx esi +
lea ecx [esi-1] +
neg edx  +
and ecx ebp +
mov eax [esp+54h+arg_0] +
and edx ebp +
mov eax [eax+0A5Ch] +
lea edi [eax+10h] +
mov [esp+54h+var_28] edi +
mov edi [eax+0Ch] +
jmp loc_424E8E  +
xor ecx ecx +
mov edx 0FFFFFFFFh +
mov esi 1 +
jmp loc_424F27  +
mov [esp+54h+var_19] 0 +
mov edi offset aLfuse_6 +
mov ecx 6 +
mov [esp+54h+var_15] 0 +
mov esi ebx +
cmps   +
jz loc_424F81  +
mov edi offset aFuse_5 +
mov ecx 5 +
mov esi ebx +
cmps   +
jnz loc_425060  +
mov byte ptr [esp+54h+var_19] 17h +
xor ebp ebp +
mov esi [ebx+84h] +
test esi esi +
jz loc_4250B9  +
lea ebx [esp+54h+var_19+1] +
mov [esp+54h+var_50] ebx +
mov [esp+54h+var_54] esi +
call sub_4075B0  +
mov [esp+54h+var_4C] ebp +
mov [esp+54h+var_50] ebx +
mov [esp+54h+var_54] esi +
call sub_407620  +
movzx eax byte ptr [esp+54h+var_34] +
mov [esp+54h+var_50] ebx +
mov [esp+54h+var_54] esi +
mov [esp+54h+var_4C] eax +
call sub_4076A0  +
mov eax ds:dword_486584 +
mov [esp+54h+var_50] offset aSStk500isp_w_0 +
mov [esp+54h+var_54] 2 +
mov [esp+54h+var_4C] eax +
call sub_401740  +
mov eax [esp+54h+arg_0] +
mov ecx 5 +
mov [esp+54h+var_54] 5 +
lea edx [esp+54h+var_19] +
call sub_41FEB0  +
test eax eax +
js loc_4250E4  +
xor ebx ebx +
cmp byte ptr [esp+54h+var_19] 17h +
jnz loc_424EFD  +
mov eax [esp+54h+arg_0] +
mov ecx 3 +
mov [esp+54h+var_54] 5 +
lea edx [esp+54h+var_19] +
mov byte ptr [esp+54h+var_19] 11h +
mov byte ptr [esp+54h+var_19+1] 1 +
mov byte ptr [esp+54h+var_19+2] 1 +
call sub_41FEB0  +
mov ecx [esp+54h+arg_4] +
mov eax [esp+54h+arg_0] +
mov eax [eax+8E0h] +
mov [esp+54h+var_50] ecx +
mov ecx [esp+54h+arg_0] +
mov [esp+54h+var_54] ecx +
call eax  +
jmp loc_424EFD  +
mov edi offset aHfuse_6 +
mov ecx 6 +
mov esi ebx +
cmps   +
jnz loc_425080  +
mov byte ptr [esp+54h+var_19] 17h +
mov ebp 1 +
jmp loc_424F88  +
mov edi offset aEfuse_6 +
mov ecx 6 +
mov esi ebx +
cmps   +
jnz loc_42509F  +
mov byte ptr [esp+54h+var_19] 17h +
mov ebp 2 +
jmp loc_424F88  +
mov edi offset aLock_3 +
mov ecx 5 +
mov esi ebx +
cmps   +
jnz loc_425109  +
mov byte ptr [esp+54h+var_19] 19h +
jmp loc_424F88  +
mov eax ds:dword_486584 +
mov [esp+54h+var_48] ebx +
mov ebx 0FFFFFFFFh +
mov [esp+54h+var_50] offset aSStk500isp_w_1 +
mov [esp+54h+var_54] 0 +
mov [esp+54h+var_4C] eax +
call sub_401740  +
jmp loc_424EFD  +
mov eax ds:dword_486584 +
or ebx 0FFFFFFFFh +
mov [esp+54h+var_50] offset aSStk500isp_w_2 +
mov [esp+54h+var_54] 0 +
mov [esp+54h+var_4C] eax +
call sub_401740  +
jmp loc_424EFD  +
mov eax ds:dword_486584 +
mov [esp+54h+var_48] ebx +
or ebx 0FFFFFFFFh +
mov [esp+54h+var_50] offset aSStk500isp_w_3 +
mov [esp+54h+var_54] 0 +
mov [esp+54h+var_4C] eax +
call sub_401740  +
jmp loc_424EFD  +
***
mov edi offset aFlash_7 +
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [esp+44h+arg_C] +
mov ebx [esp+44h+arg_8] +
mov [esp+44h+var_40] offset aSStk500isp_rea +
mov [esp+44h+var_44] 2 +
mov [esp+44h+var_34] eax +
mov eax ds:dword_486584 +
mov [esp+44h+var_38] ebx +
mov esi ebx +
mov [esp+44h+var_3C] eax +
call sub_401740  +
mov ecx 6 +
cmps   +
jnz loc_425210  +
mov eax [esp+44h+arg_0] +
mov eax [eax+0A5Ch] +
mov esi [eax+8] +
lea edx [eax+4] +
mov ebp [eax] +
mov edi esi +
neg edi  +
and edi [esp+44h+arg_C] +
cmp [edx] edi +
jz loc_4251EF  +
mov eax [esp+44h+arg_4] +
mov [esp+44h+var_30] esi +
mov [esp+44h+var_34] edi +
mov [esp+44h+var_38] esi +
mov [esp+44h+var_40] eax +
mov eax [esp+44h+arg_0] +
mov [esp+44h+var_3C] ebx +
mov [esp+44h+var_28] edx +
mov [esp+44h+var_44] eax +
call sub_421260  +
test eax eax +
js loc_4253B3  +
mov edx [esp+44h+var_28] +
mov [edx] edi +
add edi [ebx+78h] +
mov [esp+44h+var_3C] esi +
mov [esp+44h+var_44] ebp +
mov [esp+44h+var_40] edi +
call memcpy  +
sub esi 1 +
mov ecx [esp+44h+arg_10] +
and esi [esp+44h+arg_C] +
movzx eax byte ptr [ebp+esi+0] +
mov [ecx] al +
xor eax eax +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edi offset aEeprom_5 +
mov ecx 7 +
mov esi ebx +
cmps   +
jnz loc_425250  +
mov esi [ebx+48h] +
test esi esi +
jz loc_425320  +
mov edi esi +
neg edi  +
mov eax [esp+44h+arg_0] +
and edi [esp+44h+arg_C] +
mov eax [eax+0A5Ch] +
lea edx [eax+10h] +
mov ebp [eax+0Ch] +
cmp [edx] edi +
jnz loc_4251A6  +
jmp loc_4251EF  +
mov edi offset aLfuse_6 +
mov ecx 6 +
mov esi ebx +
cmps   +
jnz loc_425330  +
mov byte ptr [esp+44h+var_1A] 18h +
mov [esp+44h+arg_C] 0 +
mov esi [ebx+80h] +
mov [esp+44h+var_1A+1] 0 +
mov [esp+44h+var_15] 0 +
test esi esi +
jz loc_425412  +
lea edi [esp+44h+var_1A+2] +
mov [esp+44h+var_40] edi +
mov [esp+44h+var_44] esi +
call sub_4075B0  +
mov [esp+44h+var_44] esi +
call sub_407790  +
cmp eax 0FFFFFFFFh +
jz loc_425388  +
add eax 1 +
mov byte ptr [esp+44h+var_1A+1] al +
mov eax [esp+44h+arg_C] +
mov [esp+44h+var_40] edi +
mov [esp+44h+var_44] esi +
mov [esp+44h+var_3C] eax +
call sub_407620  +
mov eax ds:dword_486584 +
mov [esp+44h+var_40] offset aSStk500isp_r_0 +
mov [esp+44h+var_44] 2 +
mov [esp+44h+var_3C] eax +
call sub_401740  +
mov eax [esp+44h+arg_0] +
mov ecx 6 +
mov [esp+44h+var_44] 6 +
lea edx [esp+44h+var_1A] +
call sub_41FEB0  +
test eax eax +
js loc_42543D  +
movzx eax byte ptr [esp+44h+var_1A+2] +
mov ebx [esp+44h+arg_10] +
mov [ebx] al +
add esp 3Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edi 0FFFFFFFFh +
mov esi 1 +
jmp loc_42522F  +
mov edi offset aFuse_5 +
mov ecx 5 +
mov esi ebx +
cmps   +
jz loc_425264  +
mov edi offset aHfuse_6 +
mov ecx 6 +
mov esi ebx +
cmps   +
jz loc_425376  +
mov edi offset aEfuse_6 +
mov ecx 6 +
mov esi ebx +
cmps   +
jnz loc_4253C0  +
mov byte ptr [esp+44h+var_1A] 18h +
mov [esp+44h+arg_C] 2 +
jmp loc_425271  +
mov byte ptr [esp+44h+var_1A] 18h +
mov [esp+44h+arg_C] 1 +
jmp loc_425271  +
mov eax ds:dword_486584 +
mov [esp+44h+var_38] ebx +
mov [esp+44h+var_40] offset aSStk500isp_r_1 +
mov [esp+44h+var_44] 0 +
mov [esp+44h+var_3C] eax +
call sub_401740  +
mov eax 4 +
jmp loc_4252B0  +
mov eax 0FFFFFFFFh +
jmp loc_425203  +
mov edi offset aLock_3 +
mov ecx 5 +
mov esi ebx +
cmps   +
jnz loc_4253DA  +
mov byte ptr [esp+44h+var_1A] 1Ah +
jmp loc_425271  +
mov edi offset aCalibration_0 +
mov ecx 0Ch +
mov esi ebx +
cmps   +
jnz loc_4253F4  +
mov byte ptr [esp+44h+var_1A] 1Ch +
jmp loc_425271  +
mov edi offset aSignature_3 +
mov ecx 0Ah +
mov esi ebx +
cmps   +
jnz loc_425271  +
mov byte ptr [esp+44h+var_1A] 1Bh +
jmp loc_425271  +
mov eax ds:dword_486584 +
mov [esp+44h+var_38] ebx +
mov [esp+44h+var_40] offset aSStk500isp_r_2 +
mov [esp+44h+var_44] 0 +
mov [esp+44h+var_3C] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_425203  +
mov eax ds:dword_486584 +
mov [esp+44h+var_40] offset aSStk500isp_r_3 +
mov [esp+44h+var_44] 0 +
mov [esp+44h+var_3C] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_425203  +
***
mov ebx [esp+28h+arg_0] +
mov eax [ebx+0A5Ch] +
mov eax [eax] +
mov [esp+28h+var_28] eax +
call free  +
mov eax [ebx+0A5Ch] +
mov dword ptr [eax] 0 +
mov eax [eax+0Ch] +
mov [esp+28h+var_28] eax +
call free  +
mov eax [ebx+0A5Ch] +
mov ecx 3 +
lea edx [esp+28h+var_18] +
mov dword ptr [eax+0Ch] 0 +
mov eax ebx +
mov [esp+28h+var_28] 10h +
mov byte ptr [esp+28h+var_18] 11h +
mov byte ptr [esp+28h+var_18+1] 1 +
mov byte ptr [esp+28h+var_18+2] 1 +
call sub_41FEB0  +
test eax eax +
js loc_4254E0  +
add esp 28h +
pop ebx  +
retn   +
mov eax ds:dword_486584 +
mov [esp+28h+var_24] offset aSStk500v2_disa +
mov [esp+28h+var_28] 0 +
mov [esp+28h+var_20] eax +
call sub_401740  +
add esp 28h +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+2Ch+arg_0] +
mov dword ptr [esp+2Ch+var_28] offset aStk500v2Stk_10 +
mov ebp [esp+2Ch+arg_4] +
mov [esp+2Ch+var_2C] 5 +
mov [esp+2Ch+var_10] 0 +
mov [esp+2Ch+var_14] 1C200h +
call sub_401740  +
mov eax [ebx+480h] +
test eax eax +
jz loc_425551  +
mov [esp+2Ch+var_14] eax +
mov eax [ebx+0A5Ch] +
mov dword ptr [eax+1Ch] 0 +
mov dword ptr [esp+2Ch+var_28] offset aAvrdoper +
mov [esp+2Ch+var_2C] ebp +
call ds:_stricmp  +
test eax eax +
jnz loc_42558A  +
mov eax [ebx+0A5Ch] +
mov off_461140 offset off_461240 +
mov dword ptr [eax+1Ch] 1 +
mov edi offset aUsb_1 +
mov ecx 3 +
mov esi ebp +
cmps   +
jnz loc_4255F7  +
mov eax 3EBh +
mov edx 2104h +
mov word ptr [esp+2Ch+var_14] ax +
mov eax [ebx+0A5Ch] +
mov off_461140 offset off_4611E0 +
mov word ptr [esp+2Ch+var_14+2] dx +
mov dword ptr [eax+1Ch] 3 +
mov dword ptr [ebx+930h] offset sub_420780 +
mov dword ptr [ebx+8ACh] 40h +
mov dword ptr [ebx+8A0h] 82h +
mov dword ptr [ebx+8A4h] 2 +
mov dword ptr [ebx+8A8h] 0 +
lea eax [ebx+74h] +
mov dword ptr [esp+2Ch+var_28] ebp +
lea esi [ebx+89Ch] +
mov [esp+2Ch+var_2C] eax +
call strcpy  +
mov edx [esp+2Ch+var_14] +
mov eax off_461140 +
mov eax [eax] +
mov dword ptr [esp+2Ch+var_28] edx +
mov edx [esp+2Ch+var_10] +
mov [esp+2Ch+var_20] esi +
mov [esp+2Ch+var_2C] ebp +
mov dword ptr [esp+2Ch+var_28+4] edx +
call eax  +
cmp eax 0FFFFFFFFh +
jz loc_425679  +
mov eax off_461140 +
mov eax [eax+14h] +
mov dword ptr [esp+2Ch+var_28] 0 +
mov [esp+2Ch+var_2C] esi +
call eax  +
mov [esp+2Ch+var_2C] ebx +
call sub_41FC50  +
mov eax off_461140 +
mov eax [eax+14h] +
mov dword ptr [esp+2Ch+var_28] 0 +
mov [esp+2Ch+var_2C] esi +
call eax  +
fld  qword ptr [ebx+890h] +
fldz   +
fxch  st(1) +
fucomi st st(1) +
fstp  st(1) +
jp loc_425681  +
jnz loc_425681  +
fstp  st +
xor eax eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx+930h] +
fstp  [esp+2Ch+var_28] +
mov [esp+2Ch+var_2C] ebx +
call eax  +
test eax eax +
setnz al  +
add esp 2Ch +
movzx eax al +
pop ebx  +
neg eax  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+2Ch+arg_0] +
mov dword ptr [esp+2Ch+var_28] offset aStk500v2Stk600 +
mov ebp [esp+2Ch+arg_4] +
mov [esp+2Ch+var_2C] 5 +
mov [esp+2Ch+var_10] 0 +
mov [esp+2Ch+var_14] 1C200h +
call sub_401740  +
mov eax [ebx+480h] +
test eax eax +
jz loc_4256F1  +
mov [esp+2Ch+var_14] eax +
mov eax [ebx+0A5Ch] +
mov edi offset aUsb_1 +
mov ecx 3 +
mov esi ebp +
mov dword ptr [eax+1Ch] 0 +
cmps   +
jnz loc_425765  +
mov edx 3EBh +
mov ecx 2106h +
mov dword ptr [eax+1Ch] 5 +
mov off_461140 offset off_4611E0 +
mov word ptr [esp+2Ch+var_14] dx +
mov word ptr [esp+2Ch+var_14+2] cx +
mov dword ptr [ebx+930h] offset sub_4249C0 +
mov dword ptr [ebx+8ACh] 40h +
mov dword ptr [ebx+8A0h] 83h +
mov dword ptr [ebx+8A4h] 2 +
mov dword ptr [ebx+8A8h] 0 +
lea eax [ebx+74h] +
mov dword ptr [esp+2Ch+var_28] ebp +
lea esi [ebx+89Ch] +
mov [esp+2Ch+var_2C] eax +
call strcpy  +
mov edx [esp+2Ch+var_14] +
mov eax off_461140 +
mov eax [eax] +
mov dword ptr [esp+2Ch+var_28] edx +
mov edx [esp+2Ch+var_10] +
mov [esp+2Ch+var_20] esi +
mov [esp+2Ch+var_2C] ebp +
mov dword ptr [esp+2Ch+var_28+4] edx +
call eax  +
cmp eax 0FFFFFFFFh +
jz loc_4257E7  +
mov eax off_461140 +
mov eax [eax+14h] +
mov dword ptr [esp+2Ch+var_28] 0 +
mov [esp+2Ch+var_2C] esi +
call eax  +
mov [esp+2Ch+var_2C] ebx +
call sub_41FC50  +
mov eax off_461140 +
mov eax [eax+14h] +
mov dword ptr [esp+2Ch+var_28] 0 +
mov [esp+2Ch+var_2C] esi +
call eax  +
fld  qword ptr [ebx+890h] +
fldz   +
fxch  st(1) +
fucomi st st(1) +
fstp  st(1) +
jp loc_4257F0  +
jnz loc_4257F0  +
fstp  st +
xor eax eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx+930h] +
fstp  [esp+2Ch+var_28] +
mov [esp+2Ch+var_2C] ebx +
call eax  +
test eax eax +
setnz al  +
add esp 2Ch +
movzx eax al +
pop ebx  +
neg eax  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
jmp sub_425820  +
***
mov eax [esp+arg_0] +
mov dword ptr [eax+54h] 354B5453h +
mov dword ptr [eax+58h] 32563030h +
mov byte ptr [eax+5Ch] 0 +
mov dword ptr [eax+8C8h] offset sub_41E530 +
mov dword ptr [eax+8CCh] offset sub_420E40 +
mov dword ptr [eax+8D0h] offset dword_41E350 +
mov dword ptr [eax+8D4h] offset sub_421F20 +
mov dword ptr [eax+8E0h] offset sub_421B20 +
mov dword ptr [eax+8E4h] offset sub_421A30 +
mov dword ptr [eax+8ECh] offset sub_421920 +
mov dword ptr [eax+8F8h] offset sub_425510 +
mov dword ptr [eax+8FCh] offset sub_41E390 +
mov dword ptr [eax+914h] offset sub_403EA0 +
mov dword ptr [eax+910h] offset sub_4042F0 +
mov dword ptr [eax+900h] offset sub_4214F0 +
mov dword ptr [eax+904h] offset sub_421260 +
mov dword ptr [eax+908h] offset sub_41E360 +
mov dword ptr [eax+920h] offset sub_420E30 +
mov dword ptr [eax+924h] offset sub_420680 +
mov dword ptr [eax+928h] offset sub_4205B0 +
mov dword ptr [eax+92Ch] offset sub_420400 +
mov dword ptr [eax+930h] offset sub_420320 +
mov dword ptr [eax+944h] offset sub_420170 +
mov dword ptr [eax+94Ch] offset sub_41F0C0 +
mov dword ptr [eax+950h] offset sub_41E400 +
mov dword ptr [eax+8B4h] 100h +
retn   +
***
mov eax [esp+arg_0] +
mov dword ptr [eax+54h] 354B5453h +
mov dword ptr [eax+58h] 50503030h +
mov byte ptr [eax+5Ch] 0 +
mov dword ptr [eax+8C8h] offset loc_424880 +
mov dword ptr [eax+8CCh] offset sub_420E40 +
mov dword ptr [eax+8D0h] offset dword_41E350 +
mov dword ptr [eax+8D4h] offset loc_4245C0 +
mov dword ptr [eax+8E0h] offset sub_424490 +
mov dword ptr [eax+8E4h] offset loc_424460 +
mov dword ptr [eax+8F8h] offset sub_425510 +
mov dword ptr [eax+8FCh] offset sub_41E390 +
mov dword ptr [eax+914h] offset loc_424350 +
mov dword ptr [eax+910h] offset sub_423F50 +
mov dword ptr [eax+900h] offset loc_423AB0 +
mov dword ptr [eax+904h] offset loc_423780 +
mov dword ptr [eax+920h] offset sub_420E30 +
mov dword ptr [eax+924h] offset sub_420680 +
mov dword ptr [eax+928h] offset sub_4205B0 +
mov dword ptr [eax+92Ch] offset sub_420400 +
mov dword ptr [eax+930h] offset sub_420320 +
mov dword ptr [eax+94Ch] offset sub_41F0C0 +
mov dword ptr [eax+950h] offset sub_41E400 +
mov dword ptr [eax+8B4h] 100h +
retn   +
***
mov eax [esp+arg_0] +
mov edx 5053h +
mov dword ptr [eax+54h] 354B5453h +
mov dword ptr [eax+58h] 56483030h +
mov [eax+5Ch] dx +
mov byte ptr [eax+5Eh] 0 +
mov dword ptr [eax+8C8h] offset loc_424890 +
mov dword ptr [eax+8CCh] offset sub_420E40 +
mov dword ptr [eax+8D0h] offset dword_41E350 +
mov dword ptr [eax+8D4h] offset loc_4245D0 +
mov dword ptr [eax+8E0h] offset sub_4248B0 +
mov dword ptr [eax+8E4h] offset loc_424470 +
mov dword ptr [eax+8F8h] offset sub_425510 +
mov dword ptr [eax+8FCh] offset sub_41E390 +
mov dword ptr [eax+914h] offset loc_424380 +
mov dword ptr [eax+910h] offset sub_423F80 +
mov dword ptr [eax+900h] offset loc_423AE0 +
mov dword ptr [eax+904h] offset loc_4237B0 +
mov dword ptr [eax+920h] offset sub_420E30 +
mov dword ptr [eax+924h] offset sub_420680 +
mov dword ptr [eax+928h] offset sub_4205B0 +
mov dword ptr [eax+92Ch] offset sub_420400 +
mov dword ptr [eax+930h] offset sub_420320 +
mov dword ptr [eax+94Ch] offset sub_41F0C0 +
mov dword ptr [eax+950h] offset sub_41E400 +
mov dword ptr [eax+8B4h] 100h +
retn   +
***
mov eax [esp+arg_0] +
mov dword ptr [eax+54h] 4741544Ah +
mov dword ptr [eax+58h] 49494B4Dh +
mov dword ptr [eax+5Ch] 5053495Fh +
mov byte ptr [eax+60h] 0 +
mov dword ptr [eax+8C8h] offset sub_41E530 +
mov dword ptr [eax+8CCh] offset sub_420E40 +
mov dword ptr [eax+8D0h] offset dword_41E350 +
mov dword ptr [eax+8D4h] offset sub_421F20 +
mov dword ptr [eax+8E0h] offset sub_421B20 +
mov dword ptr [eax+8E4h] offset sub_421A30 +
mov dword ptr [eax+8ECh] offset sub_421920 +
mov dword ptr [eax+8F8h] offset sub_41EA40 +
mov dword ptr [eax+8FCh] offset sub_41E9F0 +
mov dword ptr [eax+914h] offset sub_403EA0 +
mov dword ptr [eax+910h] offset sub_4042F0 +
mov dword ptr [eax+900h] offset sub_4214F0 +
mov dword ptr [eax+904h] offset sub_421260 +
mov dword ptr [eax+908h] offset sub_41E360 +
mov dword ptr [eax+920h] offset sub_420E30 +
mov dword ptr [eax+930h] offset sub_420780 +
mov dword ptr [eax+944h] offset sub_420170 +
mov dword ptr [eax+94Ch] offset sub_41FB30 +
mov dword ptr [eax+950h] offset sub_41E9C0 +
mov dword ptr [eax+8B4h] 100h +
retn   +
***
mov eax [esp+arg_0] +
mov edx 5053h +
mov dword ptr [eax+54h] 47415244h +
mov dword ptr [eax+58h] 495F4E4Fh +
mov [eax+5Ch] dx +
mov byte ptr [eax+5Eh] 0 +
mov dword ptr [eax+8C8h] offset sub_41E530 +
mov dword ptr [eax+8CCh] offset sub_420E40 +
mov dword ptr [eax+8D0h] offset dword_41E350 +
mov dword ptr [eax+8D4h] offset sub_421F20 +
mov dword ptr [eax+8E0h] offset sub_421B20 +
mov dword ptr [eax+8E4h] offset sub_421A30 +
mov dword ptr [eax+8ECh] offset sub_421920 +
mov dword ptr [eax+8F8h] offset sub_41EBC0 +
mov dword ptr [eax+8FCh] offset sub_41E9F0 +
mov dword ptr [eax+914h] offset sub_403EA0 +
mov dword ptr [eax+910h] offset sub_4042F0 +
mov dword ptr [eax+900h] offset sub_4214F0 +
mov dword ptr [eax+904h] offset sub_421260 +
mov dword ptr [eax+908h] offset sub_41E360 +
mov dword ptr [eax+920h] offset sub_420E30 +
mov dword ptr [eax+930h] offset sub_420780 +
mov dword ptr [eax+94Ch] offset sub_41FB30 +
mov dword ptr [eax+950h] offset sub_41E9C0 +
mov dword ptr [eax+8B4h] 100h +
retn   +
***
mov eax [esp+arg_0] +
mov edx 50h +
mov dword ptr [eax+54h] 47415244h +
mov dword ptr [eax+58h] 505F4E4Fh +
mov [eax+5Ch] dx +
mov dword ptr [eax+8C8h] offset loc_424880 +
mov dword ptr [eax+8CCh] offset sub_420E40 +
mov dword ptr [eax+8D0h] offset dword_41E350 +
mov dword ptr [eax+8D4h] offset loc_4245C0 +
mov dword ptr [eax+8E0h] offset sub_424490 +
mov dword ptr [eax+8E4h] offset loc_424460 +
mov dword ptr [eax+8F8h] offset sub_41ED40 +
mov dword ptr [eax+8FCh] offset sub_41E9F0 +
mov dword ptr [eax+914h] offset loc_424350 +
mov dword ptr [eax+910h] offset sub_423F50 +
mov dword ptr [eax+900h] offset loc_423AB0 +
mov dword ptr [eax+904h] offset loc_423780 +
mov dword ptr [eax+920h] offset sub_420E30 +
mov dword ptr [eax+924h] offset sub_420680 +
mov dword ptr [eax+928h] offset sub_4205B0 +
mov dword ptr [eax+92Ch] offset sub_420400 +
mov dword ptr [eax+930h] offset sub_420780 +
mov dword ptr [eax+94Ch] offset sub_41FB30 +
mov dword ptr [eax+950h] offset sub_41E9C0 +
mov dword ptr [eax+8B4h] 100h +
retn   +
***
mov eax [esp+arg_0] +
mov dword ptr [eax+54h] 47415244h +
mov dword ptr [eax+58h] 485F4E4Fh +
mov dword ptr [eax+5Ch] 505356h +
mov dword ptr [eax+8C8h] offset loc_424890 +
mov dword ptr [eax+8CCh] offset sub_420E40 +
mov dword ptr [eax+8D0h] offset dword_41E350 +
mov dword ptr [eax+8D4h] offset loc_4245D0 +
mov dword ptr [eax+8E0h] offset sub_4248B0 +
mov dword ptr [eax+8E4h] offset loc_424470 +
mov dword ptr [eax+8F8h] offset sub_41ED40 +
mov dword ptr [eax+8FCh] offset sub_41E9F0 +
mov dword ptr [eax+914h] offset loc_424380 +
mov dword ptr [eax+910h] offset sub_423F80 +
mov dword ptr [eax+900h] offset loc_423AE0 +
mov dword ptr [eax+904h] offset loc_4237B0 +
mov dword ptr [eax+920h] offset sub_420E30 +
mov dword ptr [eax+924h] offset sub_420680 +
mov dword ptr [eax+928h] offset sub_4205B0 +
mov dword ptr [eax+92Ch] offset sub_420400 +
mov dword ptr [eax+930h] offset sub_420780 +
mov dword ptr [eax+94Ch] offset sub_41FB30 +
mov dword ptr [eax+950h] offset sub_41E9C0 +
mov dword ptr [eax+8B4h] 100h +
retn   +
***
mov eax [esp+arg_0] +
mov edx 3030h +
mov dword ptr [eax+54h] 364B5453h +
mov [eax+58h] dx +
mov byte ptr [eax+5Ah] 0 +
mov dword ptr [eax+8C8h] offset sub_41E530 +
mov dword ptr [eax+8CCh] offset sub_420E40 +
mov dword ptr [eax+8D0h] offset dword_41E350 +
mov dword ptr [eax+8D4h] offset sub_421F20 +
mov dword ptr [eax+8E0h] offset sub_421B20 +
mov dword ptr [eax+8E4h] offset sub_421A30 +
mov dword ptr [eax+8ECh] offset sub_421920 +
mov dword ptr [eax+8F8h] offset sub_4256B0 +
mov dword ptr [eax+8FCh] offset sub_41E390 +
mov dword ptr [eax+914h] offset sub_403EA0 +
mov dword ptr [eax+910h] offset sub_4042F0 +
mov dword ptr [eax+900h] offset sub_4214F0 +
mov dword ptr [eax+904h] offset sub_421260 +
mov dword ptr [eax+908h] offset sub_41E360 +
mov dword ptr [eax+920h] offset sub_420E30 +
mov dword ptr [eax+924h] offset sub_424C20 +
mov dword ptr [eax+928h] offset sub_424AF0 +
mov dword ptr [eax+92Ch] offset sub_424A30 +
mov dword ptr [eax+930h] offset sub_4249C0 +
mov dword ptr [eax+944h] offset sub_420170 +
mov dword ptr [eax+94Ch] offset sub_41F0C0 +
mov dword ptr [eax+950h] offset sub_41E400 +
mov dword ptr [eax+8B4h] 100h +
retn   +
***
mov eax [esp+arg_0] +
mov dword ptr [eax+54h] 364B5453h +
mov dword ptr [eax+58h] 50503030h +
mov byte ptr [eax+5Ch] 0 +
mov dword ptr [eax+8C8h] offset loc_424880 +
mov dword ptr [eax+8CCh] offset sub_420E40 +
mov dword ptr [eax+8D0h] offset dword_41E350 +
mov dword ptr [eax+8D4h] offset loc_4245C0 +
mov dword ptr [eax+8E0h] offset sub_424490 +
mov dword ptr [eax+8E4h] offset loc_424460 +
mov dword ptr [eax+8F8h] offset sub_4256B0 +
mov dword ptr [eax+8FCh] offset sub_41E390 +
mov dword ptr [eax+914h] offset loc_424350 +
mov dword ptr [eax+910h] offset sub_423F50 +
mov dword ptr [eax+900h] offset loc_423AB0 +
mov dword ptr [eax+904h] offset loc_423780 +
mov dword ptr [eax+920h] offset sub_420E30 +
mov dword ptr [eax+924h] offset sub_424C20 +
mov dword ptr [eax+928h] offset sub_424AF0 +
mov dword ptr [eax+92Ch] offset sub_424A30 +
mov dword ptr [eax+930h] offset sub_4249C0 +
mov dword ptr [eax+94Ch] offset sub_41F0C0 +
mov dword ptr [eax+950h] offset sub_41E400 +
mov dword ptr [eax+8B4h] 100h +
retn   +
***
mov eax [esp+arg_0] +
mov edx 5053h +
mov dword ptr [eax+54h] 364B5453h +
mov dword ptr [eax+58h] 56483030h +
mov [eax+5Ch] dx +
mov byte ptr [eax+5Eh] 0 +
mov dword ptr [eax+8C8h] offset loc_424890 +
mov dword ptr [eax+8CCh] offset sub_420E40 +
mov dword ptr [eax+8D0h] offset dword_41E350 +
mov dword ptr [eax+8D4h] offset loc_4245D0 +
mov dword ptr [eax+8E0h] offset sub_4248B0 +
mov dword ptr [eax+8E4h] offset loc_424470 +
mov dword ptr [eax+8F8h] offset sub_4256B0 +
mov dword ptr [eax+8FCh] offset sub_41E390 +
mov dword ptr [eax+914h] offset loc_424380 +
mov dword ptr [eax+910h] offset sub_423F80 +
mov dword ptr [eax+900h] offset loc_423AE0 +
mov dword ptr [eax+904h] offset loc_4237B0 +
mov dword ptr [eax+920h] offset sub_420E30 +
mov dword ptr [eax+924h] offset sub_424C20 +
mov dword ptr [eax+928h] offset sub_424AF0 +
mov dword ptr [eax+92Ch] offset sub_424A30 +
mov dword ptr [eax+930h] offset sub_4249C0 +
mov dword ptr [eax+94Ch] offset sub_41F0C0 +
mov dword ptr [eax+950h] offset sub_41E400 +
mov dword ptr [eax+8B4h] 100h +
retn   +
***
mov eax [esp+arg_0] +
mov edx 50h +
mov dword ptr [eax+54h] 4741544Ah +
mov dword ptr [eax+58h] 53495F33h +
mov [eax+5Ch] dx +
mov dword ptr [eax+8C8h] offset sub_41E6C0 +
mov dword ptr [eax+8CCh] offset sub_420E40 +
mov dword ptr [eax+8D0h] offset dword_41E350 +
mov dword ptr [eax+8D4h] offset sub_425470 +
mov dword ptr [eax+8E0h] offset sub_421B20 +
mov dword ptr [eax+8E4h] offset sub_421A30 +
mov dword ptr [eax+8ECh] offset sub_41E3D0 +
mov dword ptr [eax+8F8h] offset sub_41EF40 +
mov dword ptr [eax+8FCh] offset sub_41EEF0 +
mov dword ptr [eax+914h] offset sub_425140 +
mov dword ptr [eax+910h] offset sub_424E10 +
mov dword ptr [eax+900h] offset sub_4214F0 +
mov dword ptr [eax+904h] offset sub_421260 +
mov dword ptr [eax+908h] offset sub_41E360 +
mov dword ptr [eax+920h] offset sub_420E30 +
mov dword ptr [eax+930h] offset loc_41F4E0 +
mov dword ptr [eax+944h] offset sub_420170 +
mov dword ptr [eax+94Ch] offset sub_41FBB0 +
mov dword ptr [eax+950h] offset sub_41EEC0 +
mov dword ptr [eax+8B4h] 100h +
retn   +
***
mov eax [esp+4] +
mov eax [eax+0A5Ch] +
mov eax [eax] +
test eax eax +
setz al  +
movzx eax al +
neg eax  +
retn   +
***
mov ebx [esp+18h+arg_0] +
mov eax [ebx+0A5Ch] +
mov [esp+18h+var_18] eax +
call free  +
mov dword ptr [ebx+0A5Ch] 0 +
add esp 18h +
pop ebx  +
retn   +
***
mov ebx eax +
sub esp 24h +
xor eax eax +
mov [esp+24h+var_6] ax +
lea eax [esp+24h+var_A] +
mov [esp+24h+var_1C] 3 +
mov [esp+24h+var_20] eax +
mov [esp+24h+var_24] ebx +
mov [esp+24h+var_A] 0 +
mov byte ptr [esp+24h+var_A+2] dl +
mov byte ptr [esp+24h+var_A] 6 +
call sub_43CEC0  +
lea edx [esp+24h+var_10] +
mov [esp+24h+var_20] edx +
mov [esp+24h+var_24] ebx +
mov esi eax +
call sub_43CC40  +
shr eax 1Fh +
test al al +
jnz loc_426376  +
mov eax esi +
shr eax 1Fh +
test al al +
jnz loc_426376  +
movzx edx byte ptr [esp+24h+var_10] +
xor eax eax +
test dl dl +
jz loc_42637B  +
cmp dl 0Fh +
mov eax offset aUnknownStatusC +
jbe loc_426381  +
mov [esp+24h+var_18] eax +
mov eax ds:dword_486584 +
mov [esp+24h+var_20] offset aSFailedToSetMe +
mov [esp+24h+var_24] 0 +
mov [esp+24h+var_1C] eax +
call sub_401740  +
cmp [esp+24h+var_C] 0Ah +
jz loc_426390  +
mov eax 0FFFFFFFFh +
add esp 24h +
pop ebx  +
pop esi  +
retn   +
mov eax ds:off_4744E0[edx*4] +
jmp loc_42634E  +
mov [esp+24h+var_24] ebx +
call sub_43CD80  +
jmp loc_426376  +
***
push ebx  +
sub esp 20h +
mov ebx [esp+20h+arg_0] +
mov eax [ebx+0A5Ch] +
mov eax [eax] +
mov esi [eax+68h] +
mov eax ds:dword_486584 +
mov [esp+20h+var_1C] offset aSFlip_chip_era +
mov [esp+20h+var_20] 2 +
mov [esp+20h+var_18] eax +
call sub_401740  +
xor eax eax +
mov [esp+20h+var_2] ax +
mov eax [ebx+0A5Ch] +
lea edx [esp+20h+var_6] +
mov [esp+20h+var_6] 0 +
mov byte ptr [esp+20h+var_6] 4 +
mov byte ptr [esp+20h+var_6+2] 0FFh +
mov eax [eax] +
mov dword ptr [eax+68h] 2710h +
mov [esp+20h+var_1C] edx +
mov [esp+20h+var_18] 3 +
mov [esp+20h+var_20] eax +
call sub_43CEC0  +
lea edx [esp+20h+var_C] +
mov edi eax +
mov eax [ebx+0A5Ch] +
mov eax [eax] +
mov [esp+20h+var_1C] edx +
mov [esp+20h+var_20] eax +
call sub_43CC40  +
mov edx eax +
mov eax [ebx+0A5Ch] +
shr edx 1Fh +
test dl dl +
mov eax [eax] +
mov [eax+68h] esi +
jnz loc_426486  +
mov eax edi +
shr eax 1Fh +
test al al +
jnz loc_426486  +
movzx edx byte ptr [esp+20h+var_C] +
xor eax eax +
test dl dl +
jz loc_42648B  +
cmp dl 0Fh +
mov eax offset aUnknownStatusC +
jbe loc_426492  +
mov [esp+20h+var_14] eax +
mov eax ds:dword_486584 +
mov [esp+20h+var_1C] offset aSFailedToSendC +
mov [esp+20h+var_20] 0 +
mov [esp+20h+var_18] eax +
call sub_401740  +
cmp [esp+20h+var_8] 0Ah +
jz loc_4264A0  +
mov eax 0FFFFFFFFh +
add esp 20h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov eax ds:off_4744E0[edx*4] +
jmp loc_42645E  +
mov eax [ebx+0A5Ch] +
mov eax [eax] +
mov [esp+20h+var_20] eax +
call sub_43CD80  +
jmp loc_426486  +
***
push esi  +
push ebx  +
sub esp 3Ch +
mov eax ds:dword_486584 +
mov ebx [esp+3Ch+arg_0] +
mov [esp+3Ch+var_38] offset aSFlip1_read_si +
mov [esp+3Ch+var_3C] 2 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov eax [ebx+0A5Ch] +
mov edx [eax] +
test edx edx +
jz loc_4266B0  +
mov esi [esp+3Ch+arg_8] +
cmp dword ptr [esi+44h] 2 +
jbe loc_4266F5  +
test dword ptr [eax+4] 0FFFFFFh +
jnz loc_426621  +
xor eax eax +
xor ebp ebp +
mov [esp+3Ch+var_38] offset aFromDevice +
lea esi [esp+3Ch+var_18] +
mov [esp+3Ch+var_3C] 2 +
mov [esp+3Ch+var_12] 0 +
mov [esp+3Ch+var_E] ax +
mov byte ptr [esp+3Ch+var_12] 5 +
mov byte ptr [esp+3Ch+var_12+1] 1 +
mov byte ptr [esp+3Ch+var_12+2] 31h +
call sub_401740  +
cmp ebp 1 +
jz loc_426724  +
cmp ebp 2 +
jz loc_42672E  +
mov eax [ebx+0A5Ch] +
lea ecx [esp+3Ch+var_12] +
mov eax [eax] +
mov [esp+3Ch+var_38] ecx +
mov [esp+3Ch+var_34] 3 +
mov [esp+3Ch+var_3C] eax +
call sub_43CEC0  +
mov edi eax +
mov eax [ebx+0A5Ch] +
mov eax [eax] +
mov [esp+3Ch+var_38] esi +
mov [esp+3Ch+var_3C] eax +
call sub_43CC40  +
shr eax 1Fh +
test al al +
jnz loc_4266B0  +
mov eax edi +
shr eax 1Fh +
test al al +
jnz loc_4266B0  +
movzx eax byte ptr [esp+3Ch+var_18] +
test al al +
jnz loc_426660  +
mov eax [ebx+0A5Ch] +
mov ecx [eax] +
lea eax [eax+ebp+4] +
mov [esp+3Ch+var_34] 1 +
mov [esp+3Ch+var_38] eax +
mov [esp+3Ch+var_3C] ecx +
call sub_43CFC0  +
mov edi eax +
mov eax [ebx+0A5Ch] +
mov eax [eax] +
mov [esp+3Ch+var_38] esi +
mov [esp+3Ch+var_3C] eax +
call sub_43CC40  +
shr eax 1Fh +
test al al +
jnz loc_4266B0  +
mov eax edi +
shr eax 1Fh +
test al al +
jnz loc_4266B0  +
movzx eax byte ptr [esp+3Ch+var_18] +
test al al +
jnz loc_4266B7  +
add ebp 1 +
cmp ebp 3 +
jnz loc_42654B  +
jmp loc_426635  +
mov [esp+3Ch+var_38] offset aCached +
mov [esp+3Ch+var_3C] 2 +
call sub_401740  +
mov edx [ebx+0A5Ch] +
mov eax [esp+3Ch+arg_8] +
movzx ecx word ptr [edx+4] +
mov eax [eax+78h] +
mov [eax] cx +
movzx edx byte ptr [edx+6] +
mov [eax+2] dl +
xor eax eax +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp al 0Fh +
mov ecx offset aUnknownStatusC +
ja loc_426670  +
mov ecx ds:off_4744E0[eax*4] +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_2C] ecx +
mov [esp+3Ch+var_30] ebp +
mov [esp+3Ch+var_38] offset aSFailedToSen_0 +
mov [esp+3Ch+var_34] eax +
mov [esp+3Ch+var_3C] 0 +
call sub_401740  +
cmp [esp+3Ch+var_14] 0Ah +
jnz loc_4266B0  +
mov eax [ebx+0A5Ch] +
mov eax [eax] +
mov [esp+3Ch+var_3C] eax +
call sub_43CD80  +
lea esi [esi+0] +
mov eax 0FFFFFFFFh +
jmp loc_426652  +
cmp al 0Fh +
mov ecx offset aUnknownStatusC +
ja loc_4266C7  +
mov ecx ds:off_4744E0[eax*4] +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_2C] ecx +
mov [esp+3Ch+var_30] ebp +
mov [esp+3Ch+var_38] offset aSFailedToReadS +
mov [esp+3Ch+var_34] eax +
mov [esp+3Ch+var_3C] 0 +
call sub_401740  +
cmp [esp+3Ch+var_14] 0Ah +
jnz loc_4266B0  +
jmp loc_42669C  +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_30] 3 +
mov [esp+3Ch+var_38] offset aSErrorSignatur +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_426652  +
mov byte ptr [esp+3Ch+var_12+2] 60h +
jmp loc_42655D  +
mov byte ptr [esp+3Ch+var_12+2] 61h +
jmp loc_42655D  +
***
push edi  +
mov edi eax +
push esi  +
xor eax eax +
push ebx  +
sub esp 6Ch +
mov esi [esp+78h+arg_4] +
mov [esp+78h+var_58] edx +
mov [esp+eax+78h+var_38] 0 +
add eax 4 +
cmp eax 20h +
jb loc_426758  +
mov ecx [esp+78h+var_58] +
mov eax [edi+68h] +
test ecx ecx +
mov [esp+78h+var_4C] eax +
mov eax offset aFlash_8 +
jz loc_42678C  +
mov eax offset aUnknown_7 +
cmp ecx 1 +
mov edx offset aEeprom_6 +
cmovz eax edx +
mov [esp+78h+var_6C] eax +
mov eax ds:dword_486584 +
mov [esp+78h+var_64] esi +
mov [esp+78h+var_68] ebp +
mov [esp+78h+var_74] offset aSFlip_write_me +
mov [esp+78h+var_70] eax +
mov [esp+78h+var_78] 2 +
call sub_401740  +
cmp esi 1Fh +
jg loc_4269E6  +
lea eax [ebp+esi-1] +
mov edx ebp +
mov ebx eax +
shr ebx 5 +
shr edx 5 +
cmp ebx edx +
mov [esp+78h+var_54] 50h +
mov [esp+78h+var_50] 20h +
jnz loc_426A30  +
mov eax [esp+78h+var_54] +
mov [esp+78h+var_78] eax +
call malloc  +
test eax eax +
mov ebx eax +
jz loc_426A5C  +
mov eax [esp+78h+var_58] +
test eax eax +
jz loc_4269F6  +
movzx eax byte ptr [esp+78h+var_58] +
mov byte ptr [esp+78h+var_38] 1 +
mov byte ptr [esp+78h+var_38+1] al +
mov eax ebp +
shr eax 8 +
mov byte ptr [esp+78h+var_38+2] al +
mov eax ebp +
mov byte ptr [esp+78h+var_38+3] al +
lea eax [ebp+esi-1] +
shr eax 8 +
cmp esi 1Fh +
mov byte ptr [esp+78h+var_34] al +
lea eax [esi+ebp-1] +
mov byte ptr [esp+78h+var_34+1] al +
mov eax [esp+78h+var_38] +
mov [ebx] eax +
mov eax [esp+78h+var_34] +
mov [ebx+4] eax +
mov eax [esp+78h+var_30] +
mov [ebx+8] eax +
mov eax [esp+78h+var_2C] +
mov [ebx+0Ch] eax +
mov eax [esp+78h+var_28] +
mov [ebx+10h] eax +
mov eax [esp+78h+var_24] +
mov [ebx+14h] eax +
mov eax [esp+78h+var_20] +
mov [ebx+18h] eax +
mov eax [esp+78h+var_1C] +
mov [ebx+1Ch] eax +
lea eax [ebx+20h] +
jg loc_4268B6  +
mov eax ebp +
and eax 1Fh +
mov dword ptr [ebx+20h] 0FFFFFFFFh +
lea eax [ebx+eax+20h] +
mov dword ptr [ebx+24h] 0FFFFFFFFh +
mov dword ptr [ebx+28h] 0FFFFFFFFh +
mov dword ptr [ebx+2Ch] 0FFFFFFFFh +
mov dword ptr [ebx+30h] 0FFFFFFFFh +
mov dword ptr [ebx+34h] 0FFFFFFFFh +
mov dword ptr [ebx+38h] 0FFFFFFFFh +
mov dword ptr [ebx+3Ch] 0FFFFFFFFh +
mov ecx [esp+78h+arg_0] +
mov [esp+78h+var_70] esi +
mov [esp+78h+var_78] eax +
mov [esp+78h+var_74] ecx +
call memcpy  +
mov eax [esp+78h+var_50] +
lea eax [ebx+eax+20h] +
mov byte ptr [eax] 0 +
mov byte ptr [eax+1] 0 +
mov byte ptr [eax+2] 0 +
mov byte ptr [eax+3] 0 +
mov byte ptr [eax+4] 10h +
mov byte ptr [eax+5] 44h +
mov byte ptr [eax+6] 46h +
mov byte ptr [eax+7] 55h +
mov byte ptr [eax+8] 1 +
mov byte ptr [eax+9] 10h +
mov byte ptr [eax+0Ah] 0FFh +
mov byte ptr [eax+0Bh] 0FFh +
mov byte ptr [eax+0Ch] 0FFh +
mov byte ptr [eax+0Dh] 0FFh +
mov byte ptr [eax+0Eh] 0FFh +
mov byte ptr [eax+0Fh] 0FFh +
mov eax [esp+78h+var_54] +
mov dword ptr [edi+68h] 2710h +
mov [esp+78h+var_74] ebx +
mov [esp+78h+var_78] edi +
mov [esp+78h+var_70] eax +
call sub_43CEC0  +
mov [esp+78h+var_78] edi +
mov [esp+78h+var_54] eax +
lea eax [esp+78h+var_3E] +
mov [esp+78h+var_74] eax +
call sub_43CC40  +
mov ecx [esp+78h+var_4C] +
mov [esp+78h+var_78] ebx +
mov [edi+68h] ecx +
mov [esp+78h+var_50] eax +
call free  +
mov edx [esp+78h+var_54] +
shr edx 1Fh +
test dl dl +
jnz loc_4269D9  +
mov eax [esp+78h+var_50] +
shr eax 1Fh +
test al al +
jnz loc_4269D9  +
movzx edx byte ptr [esp+78h+var_3E] +
xor eax eax +
test dl dl +
jz loc_4269DE  +
cmp dl 0Fh +
mov ebx offset aUnknownStatusC +
ja loc_426988  +
mov ebx ds:off_4744E0[edx*4] +
mov ecx [esp+78h+var_58] +
mov eax offset aFlash_8 +
test ecx ecx +
jz loc_4269A5  +
mov eax offset aUnknown_7 +
cmp ecx 1 +
mov edx offset aEeprom_6 +
cmovz eax edx +
mov [esp+78h+var_68] eax +
mov eax ds:dword_486584 +
mov [esp+78h+var_60] ebx +
mov [esp+78h+var_64] ebp +
mov [esp+78h+var_6C] esi +
mov [esp+78h+var_70] eax +
mov [esp+78h+var_74] offset aSFailedToWri_0 +
mov [esp+78h+var_78] 0 +
call sub_401740  +
cmp [esp+78h+var_3A] 0Ah +
jz loc_426A20  +
mov eax 0FFFFFFFFh +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
lea eax [esi+30h] +
mov [esp+78h+var_50] esi +
mov [esp+78h+var_54] eax +
jmp loc_4267E4  +
mov edx ebp +
mov eax edi +
shr edx 10h +
call sub_4262E0  +
test eax eax +
jns loc_426806  +
mov [esp+78h+var_78] ebx +
call free  +
mov eax 0FFFFFFFFh +
jmp loc_4269DE  +
mov [esp+78h+var_78] edi +
call sub_43CD80  +
jmp loc_4269D9  +
mov [esp+78h+var_68] eax +
mov eax ds:dword_486584 +
mov [esp+78h+var_6C] ebp +
mov [esp+78h+var_74] offset aSFlip_write__0 +
mov [esp+78h+var_78] 0 +
mov [esp+78h+var_70] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_4269DE  +
mov eax ds:dword_486584 +
mov [esp+78h+var_74] offset aSOutOfMemory_1 +
mov [esp+78h+var_78] 0 +
mov [esp+78h+var_70] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_4269DE  +
***
mov ebx [esp+18h+arg_0] +
mov eax [ebx+0A5Ch] +
mov eax [eax] +
test eax eax +
jz loc_426AB8  +
mov [esp+18h+var_18] eax +
call sub_43CBE0  +
mov eax [ebx+0A5Ch] +
mov dword ptr [eax] 0 +
add esp 18h +
pop ebx  +
retn   +
***
sub esp 14h +
mov ebx [esp+14h+arg_0] +
mov eax [esp+14h+arg_4] +
mov esi [ebx+0A5Ch] +
mov [esp+14h+var_14] eax +
call sub_43C7A0  +
mov [esi] eax +
mov eax [ebx+0A5Ch] +
mov eax [eax] +
test eax eax +
setz al  +
add esp 14h +
movzx eax al +
neg eax  +
pop ebx  +
pop esi  +
retn   +
***
push ebx  +
sub esp 14h +
mov ebx ds:_stricmp +
mov [esp+18h+var_14] offset aFlash_9 +
mov [esp+18h+var_18] eax +
call ebx  +
test eax eax +
jnz loc_426B26  +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
mov [esp+18h+var_18] esi +
mov [esp+18h+var_14] offset aEeprom_7 +
call ebx  +
cmp eax 1 +
sbb eax eax +
add esp 14h +
and eax 2 +
sub eax 1 +
pop ebx  +
pop esi  +
retn   +
***
mov eax [esp+28h+arg_10] +
mov ebx [esp+28h+arg_0] +
mov byte ptr [esp+28h+var_C] al +
mov eax [ebx+0A5Ch] +
mov eax [eax] +
test eax eax +
jz loc_426BA1  +
mov eax [esp+28h+arg_8] +
call sub_426B00  +
cmp eax 0FFFFFFFFh +
mov edx eax +
jz loc_426BA8  +
mov eax [ebx+0A5Ch] +
lea ecx [esp+28h+var_C] +
mov eax [eax] +
mov [esp+28h+var_28] ecx +
mov ecx [esp+28h+arg_C] +
mov [esp+28h+var_24] 1 +
call sub_426740  +
add esp 28h +
pop ebx  +
retn   +
mov eax 0FFFFFFFFh +
jmp loc_426B9C  +
mov eax [esp+28h+arg_8] +
mov [esp+28h+var_24] offset aSErrorSMemoryN +
mov [esp+28h+var_28] 0 +
mov [esp+28h+var_1C] eax +
mov eax ds:dword_486584 +
mov [esp+28h+var_20] eax +
call sub_401740  +
mov [esp+28h+var_24] offset asc_473D19 +
mov [esp+28h+var_28] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_426B9C  +
***
sub esp 1Ch +
mov [esp+1Ch+var_18] 0Ch +
mov [esp+1Ch+var_1C] 1 +
call calloc  +
mov edx [esp+1Ch+arg_0] +
test eax eax +
mov [edx+0A5Ch] eax +
jz loc_426C19  +
add esp 1Ch +
retn   +
mov eax ds:dword_486584 +
mov [esp+1Ch+var_18] offset aSOutOfMemory_3 +
mov [esp+1Ch+var_1C] 0 +
mov [esp+1Ch+var_14] eax +
call sub_401740  +
mov [esp+1Ch+var_1C] 1 +
call exit  +
***
push edi  +
push esi  +
mov esi edx +
push ebx  +
sub esp 4Ch +
mov [esp+58h+var_2C] eax +
mov eax [eax] +
mov ebx [eax] +
xor eax eax +
test edx edx +
mov [esp+58h+var_1A] ax +
mov eax [esp+58h+arg_4] +
mov [esp+58h+var_1E] 0 +
mov byte ptr [esp+58h+var_1E] 3 +
mov edi [ebx+68h] +
mov byte ptr [esp+58h+var_1E+1] dl +
mov [esp+58h+var_44] eax +
mov [esp+58h+var_48] ecx +
jz loc_426DF5  +
cmp edx 1 +
jnz loc_426DB2  +
mov eax ds:dword_486584 +
mov [esp+58h+var_4C] offset aEeprom_6 +
mov [esp+58h+var_54] offset aSFlip_read_mem +
mov [esp+58h+var_58] 2 +
mov [esp+58h+var_50] eax +
call sub_401740  +
mov eax ebp +
shr eax 8 +
mov byte ptr [esp+58h+var_1E+2] al +
mov eax ebp +
mov byte ptr [esp+58h+var_1E+3] al +
mov eax [esp+58h+arg_4] +
mov dword ptr [ebx+68h] 2710h +
mov [esp+58h+var_50] 6 +
mov [esp+58h+var_58] ebx +
lea eax [ebp+eax-1] +
shr eax 8 +
mov byte ptr [esp+58h+var_1A] al +
movzx eax byte ptr [esp+58h+arg_4] +
lea eax [eax+ebp-1] +
mov byte ptr [esp+58h+var_1A+1] al +
lea eax [esp+58h+var_1E] +
mov [esp+58h+var_54] eax +
call sub_43CEC0  +
mov [ebx+68h] edi +
lea edi [esp+58h+var_24] +
mov [esp+58h+var_54] edi +
mov [esp+58h+var_58] ebx +
mov [esp+58h+var_30] eax +
call sub_43CC40  +
shr eax 1Fh +
test al al +
jnz loc_426DA5  +
mov eax [esp+58h+var_30] +
shr eax 1Fh +
test al al +
jnz loc_426DA5  +
movzx eax byte ptr [esp+58h+var_24] +
test al al +
jz loc_426E33  +
cmp al 0Fh +
mov edx offset aUnknownStatusC +
ja loc_426D50  +
mov edx ds:off_4744E0[eax*4] +
test esi esi +
mov eax offset aFlash_8 +
jz loc_426D69  +
cmp esi 1 +
mov eax offset aUnknown_7 +
mov esi offset aEeprom_6 +
cmovz eax esi +
mov [esp+58h+var_40] edx +
mov [esp+58h+var_48] eax +
mov eax [esp+58h+arg_4] +
mov [esp+58h+var_44] ebp +
mov [esp+58h+var_54] offset aSFailedToReadU +
mov [esp+58h+var_58] 0 +
mov [esp+58h+var_4C] eax +
mov eax ds:dword_486584 +
mov [esp+58h+var_50] eax +
call sub_401740  +
cmp [esp+58h+var_20] 0Ah +
jz loc_426EE0  +
mov eax 0FFFFFFFFh +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ds:dword_486584 +
mov [esp+58h+var_4C] offset aUnknown_7 +
mov [esp+58h+var_54] offset aSFlip_read_mem +
mov [esp+58h+var_58] 2 +
mov [esp+58h+var_50] eax +
call sub_401740  +
test esi esi +
jnz loc_426CC0  +
mov edx ebp +
mov eax ebx +
shr edx 10h +
call sub_4262E0  +
test eax eax +
jns loc_426CC0  +
jmp loc_426DA5  +
mov eax ds:dword_486584 +
mov [esp+58h+var_4C] offset aFlash_8 +
mov [esp+58h+var_54] offset aSFlip_read_mem +
mov [esp+58h+var_58] 2 +
mov [esp+58h+var_50] eax +
call sub_401740  +
mov edx ebp +
mov eax ebx +
shr edx 10h +
call sub_4262E0  +
test eax eax +
jns loc_426CC0  +
jmp loc_426DA5  +
mov eax [esp+58h+arg_4] +
mov [esp+58h+var_58] ebx +
mov [esp+58h+var_50] eax +
mov eax [esp+58h+arg_0] +
mov [esp+58h+var_54] eax +
call sub_43CFC0  +
mov [esp+58h+var_54] edi +
mov [esp+58h+var_58] ebx +
mov [esp+58h+var_30] eax +
call sub_43CC40  +
mov edx [esp+58h+var_30] +
shr edx 1Fh +
test dl dl +
mov edi eax +
jnz loc_426EC0  +
mov eax edi +
shr eax 1Fh +
test al al +
jnz loc_426DA5  +
test dl dl +
jnz loc_426DA5  +
movzx edx byte ptr [esp+58h+var_24] +
xor eax eax +
test dl dl +
jz loc_426DAA  +
cmp dl 0Fh +
mov edi offset aUnknownStatusC +
ja loc_426E9D  +
mov edi ds:off_4744E0[edx*4] +
test esi esi +
mov eax offset aFlash_8 +
jz loc_426EB6  +
mov eax offset aUnknown_7 +
cmp esi 1 +
mov edx offset aEeprom_6 +
cmovz eax edx +
mov [esp+58h+var_40] edi +
jmp loc_426D6D  +
test eax eax +
jnz loc_426E68  +
cmp byte ptr [esp+58h+var_24] 3 +
jnz loc_426E68  +
mov eax [esp+58h+var_2C] +
mov eax [eax] +
cmp byte ptr [eax+9] 0 +
jz loc_426EED  +
mov byte ptr [eax+9] 1 +
jmp loc_426E68  +
mov [esp+58h+var_58] ebx +
call sub_43CD80  +
jmp loc_426DA5  +
mov eax ds:dword_486584 +
mov [esp+58h+var_44] offset byte_4865A0 +
mov [esp+58h+var_48] offset byte_4865A0 +
mov [esp+58h+var_4C] offset byte_4865A0 +
mov [esp+58h+var_50] eax +
mov [esp+58h+var_54] offset aSS_0 +
mov [esp+58h+var_58] 0 +
mov [esp+58h+var_30] edx +
call sub_401740  +
mov eax [esp+58h+var_2C] +
mov edx [esp+58h+var_30] +
mov eax [eax] +
jmp loc_426ED7  +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov ebx [esp+1Ch+arg_0] +
mov esi [esp+1Ch+arg_8] +
mov edi [esp+1Ch+arg_10] +
mov ebp [esp+1Ch+arg_14] +
mov eax [ebx+0A5Ch] +
mov eax [eax] +
test eax eax +
jz loc_426FD2  +
mov eax esi +
call sub_426B00  +
cmp eax 0FFFFFFFFh +
mov edx eax +
jz loc_426F9D  +
mov [esp+1Ch+arg_4] ebp +
mov ecx [esi+78h] +
cmp eax 1 +
mov eax 2 +
cmovz edx eax +
lea eax [ebx+0A5Ch] +
add ecx edi +
mov [esp+1Ch+arg_0] ecx +
add esp 1Ch +
mov ecx edi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp sub_426C50  +
mov eax ds:dword_486584 +
mov [esp+1Ch+var_10] esi +
mov [esp+1Ch+var_18] offset aSErrorSMemoryN +
mov [esp+1Ch+var_1C] 0 +
mov [esp+1Ch+var_14] eax +
call sub_401740  +
mov [esp+1Ch+var_18] offset asc_473D19 +
mov [esp+1Ch+var_1C] 0 +
call sub_401740  +
add esp 1Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push esi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov esi [esp+1Ch+arg_0] +
mov edi [esp+1Ch+arg_8] +
mov ebp [esp+1Ch+arg_10] +
mov ebx [esp+1Ch+arg_14] +
mov eax [esi+0A5Ch] +
mov eax [eax] +
test eax eax +
jz loc_427154  +
mov eax edi +
call sub_426B00  +
cmp eax 0FFFFFFFFh +
mov edx eax +
jz loc_42716B  +
test ebx ebx +
js loc_4271A2  +
mov eax [esi+0A5Ch] +
mov eax [eax] +
mov [esp+1Ch+var_18] ebx +
mov ecx [edi+78h] +
add ecx ebp +
mov [esp+1Ch+var_1C] ecx +
mov ecx ebp +
call sub_426740  +
test eax eax +
jz loc_427161  +
add esp 1Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add esp 1Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ds:dword_486584 +
mov [esp+1Ch+var_10] edi +
mov [esp+1Ch+var_18] offset aSErrorSMemoryN +
mov [esp+1Ch+var_1C] 0 +
mov [esp+1Ch+var_14] eax +
call sub_401740  +
mov [esp+1Ch+var_18] offset asc_473D19 +
mov [esp+1Ch+var_1C] 0 +
call sub_401740  +
jmp loc_427154  +
mov eax ds:dword_486584 +
mov [esp+1Ch+var_10] 7FFFFFFFh +
mov [esp+1Ch+var_18] offset aSErrorAttempti +
mov [esp+1Ch+var_1C] 0 +
mov [esp+1Ch+var_14] eax +
call sub_401740  +
mov [esp+1Ch+var_1C] 1 +
call exit  +
***
mov edi 3EBh +
push esi  +
push ebx  +
sub esp 2Ch +
mov esi [esp+34h+arg_0] +
mov eax [esi+0A5Ch] +
mov ebx [eax] +
mov eax [esi+484h] +
test eax eax +
cmovnz edi eax +
mov eax [esi+488h] +
mov [esp+34h+var_34] eax +
call sub_406F20  +
test eax eax +
jz loc_427472  +
mov [esp+34h+var_34] eax +
mov [esp+34h+var_1C] eax +
call sub_406F60  +
mov edx [esp+34h+var_1C] +
mov ecx [eax] +
mov [esp+34h+var_34] edx +
mov ebp ecx +
mov [esp+34h+var_18] ecx +
call sub_406F40  +
test eax eax +
jz loc_427265  +
mov ecx [esp+34h+var_18] +
mov eax ds:dword_486584 +
mov [esp+34h+var_30] offset aSWarningUsingP +
mov [esp+34h+var_34] 0 +
movzx ecx cx +
mov [esp+34h+var_28] ecx +
mov [esp+34h+var_2C] eax +
call sub_401740  +
mov edx ds:dword_4866A4 +
test edx edx +
jnz loc_427280  +
mov eax [esp+34h+arg_4] +
test byte ptr [eax+84h] 80h +
jnz loc_4274A6  +
movzx eax bp +
movzx edx di +
mov ecx eax +
mov [esp+34h+var_18] eax +
mov eax [esi+0A5Ch] +
mov [esp+34h+var_1C] edx +
mov eax [eax] +
mov [esp+34h+var_2C] ecx +
mov [esp+34h+var_30] edx +
mov [esp+34h+var_34] eax +
call sub_43C8B0  +
test eax eax +
jnz loc_427480  +
movzx eax word ptr [ebx+14h] +
cmp di ax +
jz loc_4272E2  +
mov edx [esp+34h+var_1C] +
mov [esp+34h+var_28] eax +
mov eax ds:dword_486584 +
mov [esp+34h+var_30] offset aSWarningUsbIdv +
mov [esp+34h+var_34] 0 +
mov [esp+34h+var_24] edx +
mov [esp+34h+var_2C] eax +
call sub_401740  +
test bp bp +
jz loc_427319  +
movzx eax word ptr [ebx+16h] +
cmp ax bp +
jz loc_427319  +
mov edi [esp+34h+var_18] +
mov [esp+34h+var_28] eax +
mov eax ds:dword_486584 +
mov [esp+34h+var_30] offset aSWarningUsbIdp +
mov [esp+34h+var_34] 0 +
mov [esp+34h+var_24] edi +
mov [esp+34h+var_2C] eax +
call sub_401740  +
movzx eax byte ptr [ebx+1Dh] +
cmp al 1 +
jz loc_427342  +
mov [esp+34h+var_28] eax +
mov eax ds:dword_486584 +
mov [esp+34h+var_30] offset aSWarningUsbBnu +
mov [esp+34h+var_34] 0 +
mov [esp+34h+var_2C] eax +
call sub_401740  +
movzx eax byte ptr [ebx+22h] +
cmp al 1 +
jz loc_42736B  +
mov [esp+34h+var_28] eax +
mov eax ds:dword_486584 +
mov [esp+34h+var_30] offset aSWarningUsbB_0 +
mov [esp+34h+var_34] 0 +
mov [esp+34h+var_2C] eax +
call sub_401740  +
movzx eax byte ptr [ebx+10h] +
cmp al 0FEh +
jz loc_427394  +
mov [esp+34h+var_28] eax +
mov eax ds:dword_486584 +
mov [esp+34h+var_30] offset aSWarningUsbBde +
mov [esp+34h+var_34] 0 +
mov [esp+34h+var_2C] eax +
call sub_401740  +
movzx eax byte ptr [ebx+11h] +
cmp al 1 +
jz loc_4273BD  +
mov [esp+34h+var_28] eax +
mov eax ds:dword_486584 +
mov [esp+34h+var_30] offset aSWarningUsbB_1 +
mov [esp+34h+var_34] 0 +
mov [esp+34h+var_2C] eax +
call sub_401740  +
movzx eax byte ptr [ebx+12h] +
test al al +
jnz loc_427440  +
movzx eax byte ptr [ebx+13h] +
cmp al 20h +
jz loc_4273EE  +
mov [esp+34h+var_28] eax +
mov eax ds:dword_486584 +
mov [esp+34h+var_30] offset aSWarningBmaxpa +
mov [esp+34h+var_34] 0 +
mov [esp+34h+var_2C] eax +
call sub_401740  +
mov eax ds:dword_486580 +
test eax eax +
jnz loc_427410  +
mov [esp+34h+var_34] ebx +
call sub_43CE20  +
xor eax eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi [esi+0A5Ch] +
mov eax [esi] +
mov [esp+34h+var_34] eax +
call sub_43D0C0  +
mov eax [esi] +
movzx eax byte ptr [eax+13h] +
mov [esp+34h+var_30] offset aUsbMaxPacketSi +
mov [esp+34h+var_34] 0 +
mov [esp+34h+var_2C] eax +
call sub_401740  +
jmp loc_4273F7  +
mov [esp+34h+var_28] eax +
mov eax ds:dword_486584 +
mov [esp+34h+var_30] offset unk_47412C +
mov [esp+34h+var_34] 0 +
mov [esp+34h+var_2C] eax +
call sub_401740  +
movzx eax byte ptr [ebx+13h] +
cmp al 20h +
jnz loc_4273CD  +
jmp loc_4273EE  +
mov eax [esp+34h+arg_4] +
movzx ebp word ptr [eax+7Ah] +
jmp loc_427265  +
mov eax [esi+0A5Ch] +
mov eax [eax] +
mov [esp+34h+var_34] eax +
call sub_43CBE0  +
mov eax [esi+0A5Ch] +
mov dword ptr [eax] 0 +
add esp 2Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ds:dword_486584 +
mov [esp+34h+var_24] offset byte_4865A0 +
mov [esp+34h+var_28] offset byte_4865A0 +
mov [esp+34h+var_30] offset aSFlip1FlipProt +
mov [esp+34h+var_2C] eax +
mov [esp+34h+var_34] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_427401  +
***
mov eax [esp+arg_0] +
mov edx 31h +
mov dword ptr [eax+54h] 70696C66h +
mov [eax+58h] dx +
mov dword ptr [eax+8C8h] offset sub_4271E0 +
mov dword ptr [eax+8D0h] offset dword_426260 +
mov dword ptr [eax+8D4h] offset dword_426270 +
mov dword ptr [eax+8CCh] offset dword_426280 +
mov dword ptr [eax+8E0h] offset loc_426290 +
mov dword ptr [eax+8E4h] offset sub_4263A0 +
mov dword ptr [eax+8F8h] offset sub_426AC0 +
mov dword ptr [eax+8FCh] offset sub_426A90 +
mov dword ptr [eax+904h] offset sub_426F40 +
mov dword ptr [eax+900h] offset sub_427100 +
mov dword ptr [eax+914h] offset sub_426FE0 +
mov dword ptr [eax+910h] offset sub_426B50 +
mov dword ptr [eax+918h] offset sub_4264C0 +
mov dword ptr [eax+94Ch] offset sub_426BF0 +
mov dword ptr [eax+950h] offset sub_4262B0 +
retn   +
***
mov eax [esp+4] +
mov eax [eax+0A5Ch] +
mov eax [eax] +
test eax eax +
setz al  +
movzx eax al +
neg eax  +
retn   +
***
mov ebx [esp+18h+arg_0] +
mov eax [ebx+0A5Ch] +
mov [esp+18h+var_18] eax +
call free  +
mov dword ptr [ebx+0A5Ch] 0 +
add esp 18h +
pop ebx  +
retn   +
***
mov ebx [esp+18h+arg_0] +
mov eax [ebx+0A5Ch] +
mov eax [eax] +
test eax eax +
jz loc_427638  +
mov [esp+18h+var_18] eax +
call sub_43CBE0  +
mov eax [ebx+0A5Ch] +
mov dword ptr [eax] 0 +
add esp 18h +
pop ebx  +
retn   +
***
sub esp 14h +
mov ebx [esp+14h+arg_0] +
mov eax [esp+14h+arg_4] +
mov esi [ebx+0A5Ch] +
mov [esp+14h+var_14] eax +
call sub_43C7A0  +
mov [esi] eax +
mov eax [ebx+0A5Ch] +
mov eax [eax] +
test eax eax +
setz al  +
add esp 14h +
movzx eax al +
neg eax  +
pop ebx  +
pop esi  +
retn   +
***
push ebx  +
sub esp 14h +
mov ebx ds:_stricmp +
mov [esp+18h+var_14] offset aApplication_4 +
mov [esp+18h+var_18] eax +
call ebx  +
xor edx edx +
test eax eax +
jnz loc_4276A8  +
add esp 14h +
mov eax edx +
pop ebx  +
pop esi  +
retn   +
mov [esp+18h+var_14] offset aEeprom_8 +
mov [esp+18h+var_18] esi +
call ebx  +
mov edx 1 +
test eax eax +
jz loc_4276A0  +
mov [esp+18h+var_18] esi +
mov [esp+18h+var_14] offset aSignature_5 +
call ebx  +
cmp eax 1 +
sbb edx edx +
add esp 14h +
and edx 6 +
sub edx 1 +
mov eax edx +
pop ebx  +
pop esi  +
retn   +
***
sub esp 1Ch +
mov [esp+1Ch+var_18] 0Ch +
mov [esp+1Ch+var_1C] 1 +
call calloc  +
mov edx [esp+1Ch+arg_0] +
test eax eax +
mov [edx+0A5Ch] eax +
jz loc_427709  +
add esp 1Ch +
retn   +
mov eax ds:dword_486584 +
mov [esp+1Ch+var_18] offset aSOutOfMemory_5 +
mov [esp+1Ch+var_1C] 0 +
mov [esp+1Ch+var_14] eax +
call sub_401740  +
mov [esp+1Ch+var_1C] 1 +
call exit  +
***
sub esp 1Ch +
mov eax [esp+1Ch+arg_0] +
mov edx [esp+1Ch+arg_8] +
mov eax [eax+0A5Ch] +
mov ecx [eax] +
test ecx ecx +
jz loc_4277A0  +
cmp dword ptr [edx+44h] 2 +
jbe loc_427774  +
movzx ecx word ptr [eax+4] +
mov edx [edx+78h] +
mov [edx] cx +
movzx eax byte ptr [eax+6] +
mov [edx+2] al +
xor eax eax +
add esp 1Ch +
retn   +
mov eax ds:dword_486584 +
mov [esp+1Ch+var_10] 3 +
mov [esp+1Ch+var_18] offset aSErrorSignat_0 +
mov [esp+1Ch+var_1C] 0 +
mov [esp+1Ch+var_14] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_427770  +
mov eax 0FFFFFFFFh +
jmp loc_427770  +
***
mov ecx eax +
movzx edx dl +
shl ecx 8 +
sub esp 1Ch +
or ecx edx +
cmp cx 500h +
jz loc_427824  +
jbe loc_427800  +
cmp cx 904h +
mov edx offset aErase_ongoing +
jz loc_4277F7  +
cmp cx 0F0Ah +
mov edx offset aStall +
jz loc_4277F7  +
cmp cx 80Ah +
mov edx offset aOutofrange +
jz loc_4277F7  +
movzx eax al +
mov [esp+1Ch+var_1C] eax +
call sub_43D1D0  +
mov edx eax +
mov eax edx +
add esp 1Ch +
retn   +
cmp cx 300h +
mov edx offset aMem_protected +
jz loc_4277F7  +
cmp cx 30Ah +
mov edx offset aMem_uknown +
jz loc_4277F7  +
test cx cx +
mov edx offset aOk_1 +
jnz loc_4277EA  +
jmp loc_4277F7  +
mov edx offset aBlank_fail +
add esp 1Ch +
mov eax edx +
retn   +
***
push esi  +
push ebx  +
mov ebx eax +
sub esp 20h +
lea eax [esp+28h+var_E] +
mov [esp+28h+var_20] 6 +
mov [esp+28h+var_24] eax +
mov [esp+28h+var_28] ebx +
mov byte ptr [esp+28h+var_E+3] dl +
mov byte ptr [esp+28h+var_E] 6 +
mov byte ptr [esp+28h+var_E+1] 3 +
mov byte ptr [esp+28h+var_E+2] 0 +
mov [esp+28h+var_A] 0 +
mov [esp+28h+var_9] 0 +
call sub_43CEC0  +
mov [esp+28h+var_28] ebx +
mov esi eax +
lea eax [esp+28h+var_14] +
mov [esp+28h+var_24] eax +
call sub_43CC40  +
test eax eax +
mov ecx eax +
jnz loc_4278CB  +
movzx eax byte ptr [esp+28h+var_14] +
mov ecx esi +
test al al +
jz loc_4278CB  +
cmp al 8 +
movzx edx [esp+28h+var_10] +
jz loc_4278D4  +
call sub_4277B0  +
mov [esp+28h+var_24] offset aSErrorDfuStatu +
mov [esp+28h+var_28] 0 +
mov [esp+28h+var_1C] eax +
mov eax ds:dword_486584 +
mov [esp+28h+var_20] eax +
call sub_401740  +
mov [esp+28h+var_28] ebx +
call sub_43CD80  +
mov ecx esi +
add esp 20h +
mov eax ecx +
pop ebx  +
pop esi  +
pop edi  +
retn   +
cmp dl 0Ah +
jnz loc_42789B  +
mov eax ds:dword_486584 +
mov [esp+28h+var_1C] edi +
mov [esp+28h+var_24] offset aSErrorUnknownM +
mov [esp+28h+var_28] 0 +
mov [esp+28h+var_20] eax +
call sub_401740  +
jmp loc_4278C1  +
***
mov esi edx +
push esi  +
push ebx  +
sub esp 2Ch +
mov eax ds:dword_486584 +
mov [esp+2Ch+var_28] offset aSFlip_chip_e_0 +
mov ebx [esp+2Ch+arg_0] +
lea edi [esp+2Ch+var_12] +
mov [esp+2Ch+var_2C] 2 +
lea esi [esp+2Ch+var_18] +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
mov byte ptr [esp+2Ch+var_12] 4 +
mov byte ptr [esp+2Ch+var_12+1] 0 +
mov byte ptr [esp+2Ch+var_12+2] 0FFh +
mov byte ptr [esp+2Ch+var_12+3] 0 +
mov [esp+2Ch+var_E] 0 +
mov [esp+2Ch+var_D] 0 +
nop   +
mov eax [ebx+0A5Ch] +
mov eax [eax] +
mov [esp+2Ch+var_24] 6 +
mov [esp+2Ch+var_28] edi +
mov [esp+2Ch+var_2C] eax +
call sub_43CEC0  +
mov ebp eax +
mov eax [ebx+0A5Ch] +
mov eax [eax] +
mov [esp+2Ch+var_28] esi +
mov [esp+2Ch+var_2C] eax +
call sub_43CC40  +
test eax eax +
jnz loc_427AAA  +
movzx eax byte ptr [esp+2Ch+var_18] +
test al al +
jz loc_427AA8  +
cmp al 9 +
movzx edx [esp+2Ch+var_14] +
jnz loc_427A6D  +
cmp dl 4 +
jz loc_427A20  +
call sub_4277B0  +
mov [esp+2Ch+var_28] offset aSErrorDfuStatu +
mov [esp+2Ch+var_2C] 0 +
mov [esp+2Ch+var_20] eax +
mov eax ds:dword_486584 +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
mov eax [ebx+0A5Ch] +
mov eax [eax] +
mov [esp+2Ch+var_2C] eax +
call sub_43CD80  +
jmp loc_427A20  +
mov eax ebp +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov edi edx +
push esi  +
mov esi eax +
push ebx  +
mov ebx edx +
sub esp 4CCh +
mov eax [esp+4D4h+arg_0] +
shr di 8 +
mov [esp+4D4h+var_4AE] di +
movzx edi dx +
mov edx edi +
mov [esp+4D4h+var_4B8] edi +
movzx edi ax +
mov [esp+4D4h+var_4B4] ecx +
lea ecx [edx+edi-1] +
mov [esp+4D4h+var_4A8] ecx +
lea edx [eax+ebx-1] +
sar ecx 8 +
cmp ax 400h +
mov [esp+4D4h+var_4AC] ecx +
mov [esp+4D4h+var_4AF] dl +
ja loc_427C34  +
mov eax [esp+4D4h+var_4B8] +
movzx ecx byte ptr [esi+13h] +
mov [esp+4D4h+var_4D0] 0 +
mov [esp+4D4h+var_491] bl +
lea ebx [esp+4D4h+var_494] +
cdq   +
idiv  ecx +
movzx eax byte ptr [esp+4D4h+var_4AE] +
movzx ebp cl +
mov [esp+4D4h+var_494] 1 +
mov byte ptr [esp+41h] 0 +
mov [esp+4D4h+var_492] al +
movzx eax byte ptr [esp+4D4h+var_4AC] +
mov [esp+4D4h+var_490] al +
movzx eax [esp+4D4h+var_4AF] +
mov [esp+4D4h+var_48F] al +
lea eax [esp+4D4h+var_48E] +
mov [esp+4D4h+var_4D4] eax +
add ebp edx +
movzx ebp bp +
lea edx [ebp-6] +
mov [esp+4D4h+var_4CC] edx +
call memset  +
mov edx [esp+4D4h+var_4B4] +
lea eax [ebx+ebp] +
mov [esp+4D4h+var_4CC] edi +
add ebp edi +
mov [esp+4D4h+var_4D4] eax +
mov [esp+4D4h+var_4D0] edx +
call memcpy  +
mov [esp+4D4h+var_4D0] ebx +
mov [esp+4D4h+var_4CC] ebp +
mov [esp+4D4h+var_4D4] esi +
call sub_43CEC0  +
mov [esp+4D4h+var_4D4] esi +
mov ebx eax +
lea eax [esp+4D4h+var_49A] +
mov [esp+4D4h+var_4D0] eax +
call sub_43CC40  +
test eax eax +
jnz loc_427BF2  +
movzx ecx byte ptr [esp+4D4h+var_49A] +
mov eax ebx +
test cl cl +
jz loc_427BF2  +
cmp cl 8 +
movzx edx [esp+4D4h+var_496] +
jz loc_427C00  +
mov eax ecx +
call sub_4277B0  +
mov [esp+4D4h+var_4D0] offset aSErrorDfuStatu +
mov [esp+4D4h+var_4D4] 0 +
mov [esp+4D4h+var_4C8] eax +
mov eax ds:dword_486584 +
mov [esp+4D4h+var_4CC] eax +
call sub_401740  +
mov [esp+4D4h+var_4D4] esi +
call sub_43CD80  +
mov eax ebx +
add esp 4CCh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp dl 0Ah +
jnz loc_427BC0  +
mov eax [esp+4D4h+var_4A8] +
mov [esp+4D4h+var_4D0] offset aSErrorAddressO +
mov [esp+4D4h+var_4D4] 0 +
mov [esp+4D4h+var_4C4] eax +
mov eax [esp+4D4h+var_4B8] +
mov [esp+4D4h+var_4C8] eax +
mov eax ds:dword_486584 +
mov [esp+4D4h+var_4CC] eax +
call sub_401740  +
jmp loc_427BE8  +
mov eax ds:dword_486584 +
mov [esp+4D4h+var_4C8] edi +
mov [esp+4D4h+var_4D0] offset aSErrorWriteBlo +
mov [esp+4D4h+var_4D4] 0 +
mov [esp+4D4h+var_4CC] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_427BF2  +
***
mov edi ecx +
push esi  +
mov esi edx +
push ebx  +
sub esp 2Ch +
cmp edx 10h +
mov [esp+34h+var_1C] eax +
mov ebx [esp+34h+arg_4] +
jbe loc_427CF2  +
mov eax ds:dword_486584 +
mov ebp offset aUnknown_9 +
mov [esp+34h+var_24] ecx +
mov [esp+34h+var_20] ebx +
mov [esp+34h+var_28] offset aUnknown_9 +
mov [esp+34h+var_2C] eax +
mov [esp+34h+var_30] offset aSFlip_write__1 +
mov [esp+34h+var_34] 2 +
call sub_401740  +
mov eax [esp+34h+var_1C] +
mov edx esi +
call sub_427830  +
test eax eax +
jz loc_427D63  +
lea esi [esi+0] +
mov eax ds:dword_486584 +
mov [esp+34h+var_24] ebp +
mov [esp+34h+var_28] esi +
mov [esp+34h+var_30] offset aSErrorFailed_2 +
mov [esp+34h+var_2C] eax +
mov [esp+34h+var_34] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ebp ds:off_474D40[edx*4] +
mov eax ds:dword_486584 +
mov [esp+34h+var_24] ecx +
mov [esp+34h+var_20] ebx +
mov [esp+34h+var_28] ebp +
mov [esp+34h+var_2C] eax +
mov [esp+34h+var_30] offset aSFlip_write__1 +
mov [esp+34h+var_34] 2 +
call sub_401740  +
mov eax [esp+34h+var_1C] +
mov edx esi +
call sub_427830  +
test eax eax +
jz loc_427D63  +
test ebp ebp +
jnz loc_427CC0  +
mov eax ds:dword_486584 +
mov [esp+34h+var_28] esi +
mov [esp+34h+var_30] offset aSErrorFailed_3 +
mov [esp+34h+var_34] 0 +
mov [esp+34h+var_2C] eax +
call sub_401740  +
add esp 2Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+34h+var_1C] +
mov ebp edi +
shr ebp 10h +
mov edx ebp +
call sub_427900  +
test eax eax +
jnz loc_427E4B  +
test ebx ebx +
jle loc_427E10  +
mov [esp+34h+var_16] bp +
mov ebp [esp+34h+arg_0] +
jmp loc_427DBA  +
sub ebx esi +
add ebp esi +
add edi esi +
test ebx ebx +
jle loc_427E10  +
mov esi edi +
shr esi 10h +
cmp si [esp+34h+var_16] +
jz loc_427DB5  +
mov eax [esp+34h+var_1C] +
mov edx esi +
call sub_427900  +
test eax eax +
jnz loc_427E20  +
mov [esp+34h+var_16] si +
mov eax [esp+34h+var_1C] +
cmp ebx 800h +
mov esi 800h +
cmovle esi ebx +
movzx edx di +
mov [esp+34h+var_34] esi +
mov ecx ebp +
call sub_427AC0  +
test eax eax +
jz loc_427D90  +
mov eax ds:dword_486584 +
mov [esp+34h+var_24] edi +
mov [esp+34h+var_28] esi +
mov [esp+34h+var_30] offset aSErrorFailed_4 +
mov [esp+34h+var_2C] eax +
mov [esp+34h+var_34] 0 +
call sub_401740  +
add esp 2Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add esp 2Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+34h+var_28] esi +
mov eax ds:dword_486584 +
mov [esp+34h+var_30] offset aSErrorFailed_5 +
mov [esp+34h+var_34] 0 +
mov [esp+34h+var_2C] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_427CEA  +
mov [esp+34h+var_28] ebp +
jmp loc_427E24  +
***
jmp sub_427E60  +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov edi [esp+1Ch+arg_0] +
mov esi [esp+1Ch+arg_8] +
mov ebp [esp+1Ch+arg_10] +
mov ebx [esp+1Ch+arg_14] +
mov eax [edi+0A5Ch] +
mov eax [eax] +
test eax eax +
jz loc_427EB8  +
mov eax esi +
call sub_427680  +
cmp eax 0FFFFFFFFh +
mov edx eax +
jz loc_427ECF  +
test ebx ebx +
js loc_427F28  +
mov eax [edi+0A5Ch] +
mov eax [eax] +
mov [esp+1Ch+var_18] ebx +
mov ecx [esi+78h] +
add ecx ebp +
mov [esp+1Ch+var_1C] ecx +
mov ecx ebp +
call sub_427C60  +
test eax eax +
jz loc_427EC5  +
add esp 1Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add esp 1Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ds:dword_486584 +
mov edi offset aFlash_11 +
mov [esp+1Ch+var_10] esi +
mov [esp+1Ch+var_18] offset aSErrorSMemor_0 +
mov [esp+1Ch+var_1C] 0 +
mov [esp+1Ch+var_14] eax +
call sub_401740  +
mov ecx 6 +
cmps   +
jnz loc_427F12  +
mov [esp+1Ch+var_18] offset aDidYouMeanAppl +
mov [esp+1Ch+var_1C] 0 +
call sub_401740  +
mov [esp+1Ch+var_18] offset asc_474873 +
mov [esp+1Ch+var_1C] 0 +
call sub_401740  +
jmp loc_427EB8  +
mov eax ds:dword_486584 +
mov [esp+1Ch+var_10] 7FFFFFFFh +
mov [esp+1Ch+var_18] offset aSErrorAttemp_0 +
mov [esp+1Ch+var_1C] 0 +
mov [esp+1Ch+var_14] eax +
call sub_401740  +
mov [esp+1Ch+var_1C] 1 +
call exit  +
***
push esi  +
mov esi ecx +
push ebx  +
mov ebx edx +
sub esp 4Ch +
cmp edx 10h +
mov [esp+50h+var_30] eax +
mov edi [esp+50h+arg_4] +
jbe loc_427FF2  +
mov eax ds:dword_486584 +
mov ebp offset aUnknown_9 +
mov [esp+50h+var_40] ecx +
mov [esp+50h+var_3C] edi +
mov [esp+50h+var_44] offset aUnknown_9 +
mov [esp+50h+var_48] eax +
mov [esp+50h+var_4C] offset aSFlip_read_m_0 +
mov [esp+50h+var_50] 2 +
call sub_401740  +
mov eax [esp+50h+var_30] +
mov edx ebx +
call sub_427830  +
test eax eax +
jz loc_428063  +
lea esi [esi+0] +
mov eax ds:dword_486584 +
mov [esp+50h+var_40] ebp +
mov [esp+50h+var_44] ebx +
mov [esp+50h+var_4C] offset aSErrorFailed_2 +
mov [esp+50h+var_48] eax +
mov [esp+50h+var_50] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ebp ds:off_474D40[edx*4] +
mov eax ds:dword_486584 +
mov [esp+50h+var_40] ecx +
mov [esp+50h+var_3C] edi +
mov [esp+50h+var_44] ebp +
mov [esp+50h+var_48] eax +
mov [esp+50h+var_4C] offset aSFlip_read_m_0 +
mov [esp+50h+var_50] 2 +
call sub_401740  +
mov eax [esp+50h+var_30] +
mov edx ebx +
call sub_427830  +
test eax eax +
jz loc_428063  +
test ebp ebp +
jnz loc_427FC0  +
mov eax ds:dword_486584 +
mov [esp+50h+var_44] ebx +
mov [esp+50h+var_4C] offset aSErrorFailed_3 +
mov [esp+50h+var_50] 0 +
mov [esp+50h+var_48] eax +
call sub_401740  +
add esp 4Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+50h+var_30] +
mov ebx esi +
shr ebx 10h +
mov edx ebx +
call sub_427900  +
test eax eax +
jnz loc_428200  +
test edi edi +
mov [esp+50h+var_2A] bx +
jg loc_42811D  +
jmp loc_4281F0  +
movzx eax byte ptr [esp+50h+var_1C] +
test al al +
jz loc_4280DD  +
cmp al 8 +
movzx edx [esp+50h+var_18] +
jnz loc_4280AB  +
cmp dl 0Ah +
jz loc_428230  +
call sub_4277B0  +
mov [esp+50h+var_4C] offset aSErrorDfuStatu +
mov [esp+50h+var_50] 0 +
mov [esp+50h+var_44] eax +
mov eax ds:dword_486584 +
mov [esp+50h+var_48] eax +
call sub_401740  +
mov eax [esp+50h+var_30] +
mov [esp+50h+var_50] eax +
call sub_43CD80  +
mov eax [esp+50h+var_28] +
test eax eax +
jnz loc_42819F  +
sub edi ebx +
add esi ebx +
add [esp+50h+arg_0] ebx +
test edi edi +
jle loc_4281F0  +
mov ebx esi +
shr ebx 10h +
cmp bx [esp+50h+var_2A] +
jz loc_428118  +
mov eax [esp+50h+var_30] +
mov edx ebx +
call sub_427900  +
test eax eax +
jnz loc_428200  +
mov [esp+50h+var_2A] bx +
movzx ebp si +
cmp edi 400h +
mov ebx 400h +
mov eax ebp +
cmovle ebx edi +
shr ax 8 +
mov [esp+50h+var_14] al +
mov eax ebp +
mov [esp+50h+var_13] al +
lea eax [ebx+ebp-1] +
mov [esp+50h+var_24] eax +
sar eax 8 +
mov [esp+50h+var_12] al +
lea eax [ebp+ebx-1] +
mov [esp+50h+var_11] al +
lea eax [esp+3Ah] +
mov [esp+50h+var_4C] eax +
mov eax [esp+50h+var_30] +
mov [esp+50h+var_48] 6 +
mov [esp+50h+var_16] 3 +
mov [esp+50h+var_15] 0 +
mov [esp+50h+var_50] eax +
call sub_43CEC0  +
test eax eax +
mov [esp+50h+var_28] eax +
jz loc_4281D1  +
lea eax [esp+50h+var_1C] +
mov [esp+50h+var_4C] eax +
mov eax [esp+50h+var_30] +
mov [esp+50h+var_50] eax +
call sub_43CC40  +
test eax eax +
jz loc_428090  +
mov eax ds:dword_486584 +
mov [esp+50h+var_40] esi +
mov [esp+50h+var_44] ebx +
mov [esp+50h+var_4C] offset aSErrorFailed_6 +
mov [esp+50h+var_48] eax +
mov [esp+50h+var_50] 0 +
call sub_401740  +
add esp 4Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+50h+arg_0] +
mov [esp+50h+var_48] ebx +
mov [esp+50h+var_4C] eax +
mov eax [esp+50h+var_30] +
mov [esp+50h+var_50] eax +
call sub_43CFC0  +
mov [esp+50h+var_28] eax +
jmp loc_428183  +
add esp 4Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ds:dword_486584 +
mov [esp+50h+var_44] ebx +
mov [esp+50h+var_4C] offset aSErrorFailed_5 +
mov [esp+50h+var_50] 0 +
mov [esp+50h+var_48] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_427FEA  +
mov eax [esp+50h+var_24] +
mov [esp+50h+var_44] ebp +
mov [esp+50h+var_4C] offset aSErrorAddressO +
mov [esp+50h+var_50] 0 +
mov [esp+50h+var_40] eax +
mov eax ds:dword_486584 +
mov [esp+50h+var_48] eax +
call sub_401740  +
jmp loc_4280D1  +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov edi [esp+1Ch+arg_0] +
mov esi [esp+1Ch+arg_8] +
mov ebp [esp+1Ch+arg_10] +
mov ebx [esp+1Ch+arg_14] +
mov eax [edi+0A5Ch] +
mov eax [eax] +
test eax eax +
jz loc_4282B8  +
mov eax esi +
call sub_427680  +
cmp eax 0FFFFFFFFh +
mov edx eax +
jz loc_4282CF  +
test ebx ebx +
js loc_428328  +
mov eax [edi+0A5Ch] +
mov eax [eax] +
mov [esp+1Ch+var_18] ebx +
mov ecx [esi+78h] +
add ecx ebp +
mov [esp+1Ch+var_1C] ecx +
mov ecx ebp +
call sub_427F60  +
test eax eax +
jz loc_4282C5  +
add esp 1Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add esp 1Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ds:dword_486584 +
mov edi offset aFlash_11 +
mov [esp+1Ch+var_10] esi +
mov [esp+1Ch+var_18] offset aSErrorSMemor_0 +
mov [esp+1Ch+var_1C] 0 +
mov [esp+1Ch+var_14] eax +
call sub_401740  +
mov ecx 6 +
cmps   +
jnz loc_428312  +
mov [esp+1Ch+var_18] offset aDidYouMeanAppl +
mov [esp+1Ch+var_1C] 0 +
call sub_401740  +
mov [esp+1Ch+var_18] offset asc_474873 +
mov [esp+1Ch+var_1C] 0 +
call sub_401740  +
jmp loc_4282B8  +
mov eax ds:dword_486584 +
mov [esp+1Ch+var_10] 7FFFFFFFh +
mov [esp+1Ch+var_18] offset aSErrorAttemp_0 +
mov [esp+1Ch+var_1C] 0 +
mov [esp+1Ch+var_14] eax +
call sub_401740  +
mov [esp+1Ch+var_1C] 1 +
call exit  +
***
mov edi 3EBh +
push esi  +
push ebx  +
sub esp 2Ch +
mov esi [esp+34h+arg_0] +
mov eax [esi+0A5Ch] +
mov ebx [eax] +
mov eax [esi+484h] +
test eax eax +
cmovnz edi eax +
mov eax [esi+488h] +
mov [esp+34h+var_34] eax +
call sub_406F20  +
test eax eax +
jz loc_428796  +
mov [esp+34h+var_34] eax +
mov [esp+34h+var_1C] eax +
call sub_406F60  +
mov edx [esp+34h+var_1C] +
mov ecx [eax] +
mov [esp+34h+var_34] edx +
mov ebp ecx +
mov [esp+34h+var_18] ecx +
call sub_406F40  +
test eax eax +
jz loc_4283E5  +
mov ecx [esp+34h+var_18] +
mov eax ds:dword_486584 +
mov [esp+34h+var_30] offset aSWarningUsin_0 +
mov [esp+34h+var_34] 0 +
movzx ecx cx +
mov [esp+34h+var_28] ecx +
mov [esp+34h+var_2C] eax +
call sub_401740  +
mov ecx ds:dword_4866A4 +
test ecx ecx +
jnz loc_428400  +
mov eax [esp+34h+arg_4] +
test byte ptr [eax+84h] 80h +
jz loc_4287A3  +
movzx eax bp +
movzx edx di +
mov [esp+34h+var_2C] eax +
mov [esp+34h+var_30] edx +
mov [esp+34h+var_34] ebx +
mov [esp+34h+var_18] eax +
mov [esp+34h+var_1C] edx +
call sub_43C8B0  +
test eax eax +
jnz loc_428570  +
movzx eax word ptr [ebx+14h] +
cmp di ax +
jz loc_428458  +
mov edx [esp+34h+var_1C] +
mov [esp+34h+var_28] eax +
mov eax ds:dword_486584 +
mov [esp+34h+var_30] offset aSWarningUsbI_0 +
mov [esp+34h+var_34] 0 +
mov [esp+34h+var_24] edx +
mov [esp+34h+var_2C] eax +
call sub_401740  +
test bp bp +
jz loc_42848F  +
movzx eax word ptr [ebx+16h] +
cmp ax bp +
jz loc_42848F  +
mov edi [esp+34h+var_18] +
mov [esp+34h+var_28] eax +
mov eax ds:dword_486584 +
mov [esp+34h+var_30] offset aSWarningUsbI_1 +
mov [esp+34h+var_34] 0 +
mov [esp+34h+var_24] edi +
mov [esp+34h+var_2C] eax +
call sub_401740  +
movzx eax byte ptr [ebx+1Dh] +
cmp al 1 +
jz loc_4284B8  +
mov [esp+34h+var_28] eax +
mov eax ds:dword_486584 +
mov [esp+34h+var_30] offset aSWarningUsbB_2 +
mov [esp+34h+var_34] 0 +
mov [esp+34h+var_2C] eax +
call sub_401740  +
movzx eax byte ptr [ebx+22h] +
cmp al 1 +
jz loc_4284E1  +
mov [esp+34h+var_28] eax +
mov eax ds:dword_486584 +
mov [esp+34h+var_30] offset aSWarningUsbB_3 +
mov [esp+34h+var_34] 0 +
mov [esp+34h+var_2C] eax +
call sub_401740  +
movzx eax byte ptr [ebx+10h] +
test al al +
jnz loc_428596  +
movzx eax byte ptr [ebx+11h] +
test al al +
jnz loc_4285F7  +
movzx eax byte ptr [ebx+12h] +
test al al +
jnz loc_4285C5  +
movzx eax byte ptr [ebx+38h] +
cmp al 0FFh +
jz loc_42852E  +
mov [esp+34h+var_28] eax +
mov eax ds:dword_486584 +
mov [esp+34h+var_30] offset aSWarningUsbBin +
mov [esp+34h+var_34] 0 +
mov [esp+34h+var_2C] eax +
call sub_401740  +
movzx eax byte ptr [ebx+39h] +
test al al +
jnz loc_428626  +
movzx eax byte ptr [ebx+3Ah] +
test al al +
jnz loc_428770  +
mov edx [esi+0A5Ch] +
xor ecx ecx +
mov eax [edx] +
add edx 4 +
mov [esp+34h+var_34] edx +
mov edx 5 +
mov [esp+34h+var_30] 4 +
call sub_427F60  +
test eax eax +
jz loc_428658  +
mov eax [esi+0A5Ch] +
mov eax [eax] +
mov [esp+34h+var_34] eax +
call sub_43CBE0  +
mov eax [esi+0A5Ch] +
mov dword ptr [eax] 0 +
xor eax eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+34h+var_28] eax +
mov eax ds:dword_486584 +
mov [esp+34h+var_30] offset aSWarningUsbB_4 +
mov [esp+34h+var_34] 0 +
mov [esp+34h+var_2C] eax +
call sub_401740  +
movzx eax byte ptr [ebx+11h] +
test al al +
jz loc_4284F9  +
jmp loc_4285F7  +
mov [esp+34h+var_28] eax +
mov eax ds:dword_486584 +
mov [esp+34h+var_30] offset aSWarningUsbB_5 +
mov [esp+34h+var_34] 0 +
mov [esp+34h+var_2C] eax +
call sub_401740  +
movzx eax byte ptr [ebx+38h] +
cmp al 0FFh +
jnz loc_42850D  +
jmp loc_42852E  +
mov [esp+34h+var_28] eax +
mov eax ds:dword_486584 +
mov [esp+34h+var_30] offset aSWarningUsbB_6 +
mov [esp+34h+var_34] 0 +
mov [esp+34h+var_2C] eax +
call sub_401740  +
movzx eax byte ptr [ebx+12h] +
test al al +
jz loc_428505  +
jmp loc_4285C5  +
mov [esp+34h+var_28] eax +
mov eax ds:dword_486584 +
mov [esp+34h+var_30] offset aSWarningUsbB_7 +
mov [esp+34h+var_34] 0 +
mov [esp+34h+var_2C] eax +
call sub_401740  +
movzx eax byte ptr [ebx+3Ah] +
test al al +
jz loc_428546  +
jmp loc_428770  +
mov edx [esi+0A5Ch] +
xor ecx ecx +
mov eax [edx] +
add edx 8 +
mov [esp+34h+var_34] edx +
mov edx 4 +
mov [esp+34h+var_30] 1 +
call sub_427F60  +
test eax eax +
jnz loc_428570  +
mov edx ds:dword_486580 +
test edx edx +
jz loc_42858E  +
mov ebx [esi+0A5Ch] +
mov eax [ebx] +
mov [esp+34h+var_34] eax +
call sub_43D0C0  +
movzx eax byte ptr [ebx+6] +
mov [esp+34h+var_24] eax +
movzx eax byte ptr [ebx+5] +
mov [esp+34h+var_28] eax +
movzx eax byte ptr [ebx+4] +
mov [esp+34h+var_30] offset aPartSignature0 +
mov [esp+34h+var_34] 0 +
mov [esp+34h+var_2C] eax +
call sub_401740  +
movzx edx byte ptr [ebx+7] +
cmp dl 19h +
jbe loc_4287E0  +
movzx ecx dl +
mov esi 1Ah +
lea eax [ecx+ecx*4] +
shl eax 4 +
sub eax ecx +
shr ax 0Bh +
mov ecx eax +
mov eax esi +
imul eax ecx +
add ecx 40h +
movzx ecx cl +
mov [esp+34h+var_2C] ecx +
mov [esp+34h+var_30] offset aPartRevisionCC +
sub edx eax +
lea eax [edx+41h] +
movzx eax al +
mov [esp+34h+var_28] eax +
mov [esp+34h+var_34] 0 +
call sub_401740  +
movzx eax byte ptr [ebx+8] +
mov [esp+34h+var_30] offset aBootloaderVers +
mov [esp+34h+var_34] 0 +
mov edx eax +
shr al 4 +
and edx 0Fh +
movzx eax al +
mov [esp+34h+var_28] edx +
mov [esp+34h+var_2C] eax +
call sub_401740  +
mov eax [ebx] +
movzx eax byte ptr [eax+13h] +
mov [esp+34h+var_30] offset aUsbMaxPacket_0 +
mov [esp+34h+var_34] 0 +
mov [esp+34h+var_2C] eax +
call sub_401740  +
xor eax eax +
jmp loc_42858E  +
mov [esp+34h+var_28] eax +
mov eax ds:dword_486584 +
mov [esp+34h+var_30] offset aSWarningUsbB_7 +
mov [esp+34h+var_34] 0 +
mov [esp+34h+var_2C] eax +
call sub_401740  +
jmp loc_428546  +
mov eax [esp+34h+arg_4] +
movzx ebp word ptr [eax+7Ah] +
jmp loc_4283E5  +
mov eax ds:dword_486584 +
mov [esp+34h+var_24] offset byte_4865A0 +
mov [esp+34h+var_28] offset byte_4865A0 +
mov [esp+34h+var_30] offset aSFlip2FlipProt +
mov [esp+34h+var_2C] eax +
mov [esp+34h+var_34] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_42858E  +
lea eax [edx+41h] +
movzx eax al +
mov [esp+34h+var_2C] eax +
mov [esp+34h+var_30] offset aPartRevisionC +
mov [esp+34h+var_34] 0 +
call sub_401740  +
jmp loc_42871E  +
***
push ebx  +
sub esp 20h +
mov eax [esp+20h+arg_10] +
mov ebx [esp+20h+arg_0] +
mov byte ptr [esp+20h+var_4] al +
mov eax [ebx+0A5Ch] +
mov eax [eax] +
test eax eax +
jz loc_428865  +
mov eax [esp+20h+arg_8] +
call sub_427680  +
cmp eax 0FFFFFFFFh +
mov edx eax +
jz loc_428870  +
mov eax [ebx+0A5Ch] +
lea ecx [esp+20h+var_4] +
mov eax [eax] +
mov [esp+20h+var_20] ecx +
mov ecx [esp+20h+arg_C] +
mov [esp+20h+var_1C] 1 +
call sub_427C60  +
add esp 20h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov eax 0FFFFFFFFh +
jmp loc_42885E  +
mov eax [esp+20h+arg_8] +
mov edi offset aFlash_11 +
mov [esp+20h+var_1C] offset aSErrorSMemor_0 +
mov [esp+20h+var_20] 0 +
mov [esp+20h+var_14] eax +
mov eax ds:dword_486584 +
mov [esp+20h+var_18] eax +
call sub_401740  +
mov esi [esp+20h+arg_8] +
mov ecx 6 +
cmps   +
jnz loc_4288BB  +
mov [esp+20h+var_1C] offset aDidYouMeanAppl +
mov [esp+20h+var_20] 0 +
call sub_401740  +
mov [esp+20h+var_1C] offset asc_474873 +
mov [esp+20h+var_20] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_42885E  +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov ebx [esp+1Ch+arg_0] +
mov esi [esp+1Ch+arg_8] +
mov edi [esp+1Ch+arg_C] +
mov ebp [esp+1Ch+arg_10] +
mov eax [ebx+0A5Ch] +
mov eax [eax] +
test eax eax +
jz loc_42898E  +
mov eax esi +
call sub_427680  +
cmp eax 0FFFFFFFFh +
mov edx eax +
jz loc_428937  +
mov eax [ebx+0A5Ch] +
mov ecx edi +
mov eax [eax] +
mov [esp+1Ch+arg_0] ebp +
mov [esp+1Ch+arg_4] 1 +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp sub_427F60  +
mov eax ds:dword_486584 +
mov edi offset aFlash_11 +
mov [esp+1Ch+var_10] esi +
mov [esp+1Ch+var_18] offset aSErrorSMemor_0 +
mov [esp+1Ch+var_1C] 0 +
mov [esp+1Ch+var_14] eax +
call sub_401740  +
mov ecx 6 +
cmps   +
jnz loc_42897A  +
mov [esp+1Ch+var_18] offset aDidYouMeanAppl +
mov [esp+1Ch+var_1C] 0 +
call sub_401740  +
mov [esp+1Ch+var_18] offset asc_474873 +
mov [esp+1Ch+var_1C] 0 +
call sub_401740  +
add esp 1Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [esp+arg_0] +
mov edx 32h +
mov dword ptr [eax+54h] 70696C66h +
mov [eax+58h] dx +
mov dword ptr [eax+8C8h] offset sub_428360 +
mov dword ptr [eax+8D0h] offset dword_427590 +
mov dword ptr [eax+8D4h] offset dword_4275A0 +
mov dword ptr [eax+8CCh] offset dword_4275B0 +
mov dword ptr [eax+8E0h] offset loc_4275C0 +
mov dword ptr [eax+8E4h] offset sub_4279D0 +
mov dword ptr [eax+8F8h] offset sub_427640 +
mov dword ptr [eax+8FCh] offset sub_427610 +
mov dword ptr [eax+904h] offset sub_428260 +
mov dword ptr [eax+900h] offset sub_427E60 +
mov dword ptr [eax+914h] offset sub_4288E0 +
mov dword ptr [eax+910h] offset sub_428810 +
mov dword ptr [eax+918h] offset sub_427740 +
mov dword ptr [eax+94Ch] offset sub_4276E0 +
mov dword ptr [eax+950h] offset sub_4275E0 +
retn   +
***
sub esp 1Ch +
mov eax ds:dword_486584 +
mov [esp+1Ch+var_18] offset aSErrorNoLibf_0 +
mov [esp+1Ch+var_1C] 0 +
mov [esp+1Ch+var_14] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
add esp 1Ch +
retn   +
***
mov eax [esp+arg_0] +
mov dword ptr [eax+54h] 69647466h +
mov dword ptr [eax+58h] 6E79735Fh +
mov dword ptr [eax+5Ch] 626263h +
mov dword ptr [eax+8F8h] offset sub_428A50 +
retn   +
***
retn   +
***
mov eax [esp+4] +
mov eax [eax+0A5Ch] +
mov [esp+4] eax +
jmp free  +
***
push esi  +
mov esi eax +
push ebx  +
mov ebx edx +
sub esp 3Ch +
mov eax dword_4611C8 +
add esi 89Ch +
mov [esp+40h+var_3C] offset aSJtagmki_resyn +
mov [esp+40h+var_40] 4 +
mov [esp+40h+var_28] edx +
mov [esp+40h+var_24] eax +
mov eax ds:dword_486584 +
mov [esp+40h+var_2C] ecx +
mov dword_4611C8 0C8h +
mov [esp+40h+var_38] eax +
call sub_401740  +
mov eax off_461140 +
mov eax [eax+14h] +
mov [esp+40h+var_3C] 0 +
mov [esp+40h+var_40] esi +
call eax  +
test ebx ebx +
jle loc_428CC5  +
xor ebx ebx +
lea ebp [esp+40h+var_1D] +
jmp loc_428B6D  +
add ebx 1 +
cmp ebx [esp+40h+var_28] +
jz loc_428CC5  +
mov eax ds:dword_486584 +
mov [esp+40h+var_3C] offset aSJtagmki_res_0 +
mov [esp+40h+var_40] 2 +
mov byte ptr [esp+40h+var_1D] 20h +
mov [esp+40h+var_38] eax +
call sub_401740  +
mov eax off_461140 +
mov eax [eax+0Ch] +
mov [esp+40h+var_38] 1 +
mov [esp+40h+var_3C] ebp +
mov [esp+40h+var_40] esi +
call eax  +
test eax eax +
mov edi eax +
jnz loc_428C90  +
mov eax off_461140 +
lea edx [esp+40h+var_19] +
mov eax [eax+10h] +
mov [esp+40h+var_38] 1 +
mov [esp+40h+var_3C] edx +
mov [esp+40h+var_40] esi +
call eax  +
test eax eax +
jnz loc_428BDE  +
cmp byte ptr [esp+40h+var_19] 41h +
jz loc_428C68  +
mov eax [esp+40h+var_2C] +
test eax eax +
jz loc_428B60  +
mov eax ds:dword_486584 +
mov [esp+40h+var_3C] offset aSJtagmki_res_1 +
mov [esp+40h+var_40] 2 +
mov byte ptr [esp+40h+var_1D] 53h +
mov [esp+40h+var_38] eax +
mov byte ptr [esp+40h+var_1D+1] 45h +
mov byte ptr [esp+40h+var_1D+2] 20h +
mov byte ptr [esp+40h+var_1D+3] 20h +
call sub_401740  +
mov eax off_461140 +
mov eax [eax+0Ch] +
mov [esp+40h+var_38] 4 +
mov [esp+40h+var_3C] ebp +
mov [esp+40h+var_40] esi +
call eax  +
test eax eax +
jnz loc_428C90  +
mov eax off_461140 +
lea ecx [esp+40h+var_19] +
mov eax [eax+10h] +
mov [esp+40h+var_38] 9 +
mov [esp+40h+var_3C] ecx +
mov [esp+40h+var_40] esi +
call eax  +
test eax eax +
jnz loc_428B60  +
cmp byte ptr [esp+40h+var_19] 41h +
jnz loc_428B60  +
mov [esp+40h+var_3C] offset aGotResp_ok +
mov [esp+40h+var_40] 2 +
call sub_401740  +
mov eax [esp+40h+var_24] +
mov dword_4611C8 eax +
add esp 3Ch +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ds:dword_486584 +
mov edi 0FFFFFFFFh +
mov [esp+40h+var_3C] offset aSJtagmki_res_2 +
mov [esp+40h+var_40] 0 +
mov [esp+40h+var_38] eax +
call sub_401740  +
mov eax [esp+40h+var_24] +
mov dword_4611C8 eax +
add esp 3Ch +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ds:dword_486584 +
mov edi 0FFFFFFFFh +
mov [esp+40h+var_3C] offset aSJtagmki_res_3 +
mov [esp+40h+var_40] 2 +
mov [esp+40h+var_38] eax +
call sub_401740  +
mov eax [esp+40h+var_24] +
mov dword_4611C8 eax +
add esp 3Ch +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push edi  +
push esi  +
mov esi ecx +
push ebx  +
sub esp 2Ch +
mov eax ds:dword_486584 +
mov [esp+38h+var_2C] ecx +
lea edi [esi+2] +
mov [esp+38h+var_34] offset aSJtagmki_sendS +
mov [esp+38h+var_38] 3 +
mov [esp+38h+var_30] eax +
mov [esp+38h+var_1C] edx +
call sub_401740  +
mov [esp+38h+var_38] edi +
call malloc  +
mov edx [esp+38h+var_1C] +
test eax eax +
mov ebx eax +
jz loc_428DB5  +
mov [esp+38h+var_30] esi +
add ebp 89Ch +
mov [esp+38h+var_34] edx +
mov [esp+38h+var_38] eax +
call memcpy  +
mov eax off_461140 +
mov byte ptr [ebx+esi] 20h +
mov byte ptr [ebx+esi+1] 20h +
mov eax [eax+0Ch] +
mov [esp+38h+var_30] edi +
mov [esp+38h+var_34] ebx +
mov [esp+38h+var_38] ebp +
call eax  +
test eax eax +
mov esi eax +
jnz loc_428D91  +
mov [esp+38h+var_38] ebx +
call free  +
add esp 2Ch +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ds:dword_486584 +
mov esi 0FFFFFFFFh +
mov [esp+38h+var_34] offset aSJtagmki_sendF +
mov [esp+38h+var_38] 0 +
mov [esp+38h+var_30] eax +
call sub_401740  +
jmp loc_428D87  +
mov eax ds:dword_486584 +
mov [esp+38h+var_34] offset aSJtagmki_sendO +
mov [esp+38h+var_38] 0 +
mov [esp+38h+var_30] eax +
call sub_401740  +
mov [esp+38h+var_38] 1 +
call exit  +
***
sub esp 1Ch +
mov [esp+1Ch+var_1C] 20h +
call malloc  +
mov edx [esp+1Ch+arg_0] +
test eax eax +
mov [edx+0A5Ch] eax +
jz loc_428E12  +
xor edx edx +
mov dword ptr [eax+edx] 0 +
add edx 4 +
cmp edx 20h +
jb loc_428DFF  +
add esp 1Ch +
retn   +
mov eax ds:dword_486584 +
mov [esp+1Ch+var_18] offset aSJtagmki_setup +
mov [esp+1Ch+var_1C] 0 +
mov [esp+1Ch+var_14] eax +
call sub_401740  +
mov [esp+1Ch+var_1C] 1 +
call exit  +
***
push edi  +
mov [esp+arg_0] offset aTargetPowerLos +
mov [esp+arg_4] edx +
mov [esp+arg_0] offset aUnknownMessa_1 +
mov dword ptr [esp+0] 0 +
call sub_401740  +
***
mov eax ds:_iob +
mov dword ptr [esp+0] 0Ah +
add eax 40h +
mov [esp+arg_0] eax +
call putc  +
add esp 1Ch +
mov eax ebp +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+28h+var_24] offset aRawMessage_1 +
mov [esp+28h+var_28] 4 +
call sub_401740  +
test edi edi +
jz loc_428EA4  +
xor ebx ebx +
xor eax eax +
jmp loc_428F4E  +
add eax 40h +
add ebx 1 +
mov [esp+28h+var_24] eax +
mov [esp+28h+var_28] 20h +
call putc  +
cmp ebx edi +
mov eax ebx +
jz loc_428F95  +
movzx eax byte ptr [esi+eax] +
mov [esp+28h+var_24] offset a0x02x_4 +
mov [esp+28h+var_28] 4 +
mov [esp+28h+var_20] eax +
call sub_401740  +
mov eax ebx +
and eax 0Fh +
cmp eax 0Fh +
mov eax ds:_iob +
jnz loc_428F32  +
add eax 40h +
add ebx 1 +
mov [esp+28h+var_24] eax +
mov [esp+28h+var_28] 0Ah +
call putc  +
cmp ebx edi +
mov eax ebx +
jnz loc_428F4E  +
and ebx 0Fh +
jz loc_428EA4  +
mov eax ds:_iob +
mov [esp+28h+var_28] 0Ah +
add eax 40h +
mov [esp+28h+var_24] eax +
call putc  +
jmp loc_428EA4  +
***
mov dword ptr [esp+4] offset aOk_2 +
mov dword ptr [esp+0] 0 +
call sub_401740  +
jmp loc_428EE7  +
***
mov [esp+arg_0] offset aBreakpointHit +
mov dword ptr [esp+0] 0 +
call sub_401740  +
jmp loc_428EE7  +
***
mov [esp+arg_0] offset aSynchronizatio +
mov dword ptr [esp+0] 0 +
call sub_401740  +
jmp loc_428EE7  +
***
mov [esp+arg_0] offset aFailed_3 +
mov dword ptr [esp+0] 0 +
call sub_401740  +
jmp loc_428EE7  +
***
mov [esp+arg_0] offset aIdrDirty +
mov dword ptr [esp+0] 0 +
call sub_401740  +
jmp loc_428EE7  +
***
mov [esp+arg_0] offset aSleepInstructi +
mov dword ptr [esp+0] 0 +
call sub_401740  +
jmp loc_428EE7  +
***
mov eax ds:dword_486584 +
mov ebp 0FFFFFFFFh +
mov [esp+28h+var_24] offset aSJtagmki_recvF +
mov [esp+28h+var_28] 0 +
mov [esp+28h+var_20] eax +
call sub_401740  +
jmp loc_428E79  +
***
push esi  +
mov esi edx +
push ebx  +
mov ebx eax +
sub esp 20h +
mov eax ds:dword_486584 +
mov [esp+28h+var_24] offset aSJtagmki_setpa +
mov [esp+28h+var_28] 2 +
mov [esp+28h+var_20] eax +
call sub_401740  +
mov eax esi +
mov [esp+1Eh] al +
mov eax edi +
mov [esp+28h+var_9] al +
mov eax ds:dword_486584 +
mov [esp+28h+var_1C] esi +
mov [esp+28h+var_24] offset aSJtagmki_set_0 +
mov [esp+28h+var_28] 2 +
mov [esp+28h+var_20] eax +
mov [esp+28h+var_B] 42h +
call sub_401740  +
mov ecx 3 +
mov eax ebx +
lea edx [esp+28h+var_B] +
call sub_428D00  +
mov ecx 2 +
mov eax ebx +
lea edx [esp+1Bh] +
call sub_428E40  +
test eax eax +
js loc_4291C0  +
movzx eax [esp+28h+var_D] +
cmp al 41h +
jnz loc_429170  +
xor ebx ebx +
cmp ds:dword_486580 2 +
jz loc_429150  +
add esp 20h +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov [esp+28h+var_24] offset aOk_2 +
mov [esp+28h+var_28] 2 +
call sub_401740  +
add esp 20h +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
retn   +
cmp ds:dword_486580 1 +
jle loc_429196  +
mov eax ds:_iob +
mov [esp+28h+var_28] 0Ah +
add eax 40h +
mov [esp+28h+var_24] eax +
call putc  +
movzx eax [esp+28h+var_D] +
mov [esp+28h+var_1C] eax +
mov eax ds:dword_486584 +
mov ebx 0FFFFFFFFh +
mov [esp+28h+var_24] offset aSJtagmki_set_1 +
mov [esp+28h+var_28] 0 +
mov [esp+28h+var_20] eax +
call sub_401740  +
jmp loc_429147  +
mov ebx 0FFFFFFFFh +
jmp loc_429147  +
***
fld1   +
mov eax [esp+arg_0] +
mov ecx 0FFh +
fdiv  [esp+arg_4] +
fld  ds:flt_475E68 +
fxch  st(1) +
fucomi st st(1) +
fstp  st(1) +
jnb loc_429216  +
fld  ds:flt_475E6C +
fxch  st(1) +
mov cl 0FEh +
fucomi st st(1) +
fstp  st(1) +
jnb loc_429220  +
fld  ds:flt_475E70 +
fxch  st(1) +
fucomip st st(1) +
fstp  st +
sbb ecx ecx +
and ecx 0FFFFFFFEh +
add ecx 0FDh +
jmp loc_429222  +
fstp  st +
jmp loc_429222  +
fstp  st +
mov edx 86h +
jmp sub_4290B0  +
***
sub esp 14h +
mov eax ds:dword_486584 +
mov [esp+14h+var_10] offset aSJtagmki_close +
mov ebx [esp+14h+arg_0] +
mov [esp+14h+var_14] 2 +
mov [esp+14h+var_C] eax +
call sub_401740  +
mov eax off_461140 +
test byte ptr [eax+1Ch] 1 +
jz loc_4292C6  +
mov eax [ebx+0A5Ch] +
mov eax [eax] +
cmp eax [ebx+480h] +
jz loc_4292C6  +
cmp eax 4B00h +
jz loc_4292F2  +
cmp eax 1C200h +
jz loc_429360  +
cmp eax 2580h +
jz loc_429367  +
cmp eax 9600h +
jz loc_429370  +
cmp eax 0E100h +
mov edx 4 +
jz loc_4292F4  +
mov [esp+14h+var_8] eax +
mov eax ds:dword_486584 +
mov [esp+14h+var_10] offset aSJtagmki_clo_0 +
mov [esp+14h+var_14] 0 +
mov [esp+14h+var_C] eax +
call sub_401740  +
cmp dword ptr [ebx+89Ch] 0FFFFFFFFh +
jz loc_4292E2  +
mov eax off_461140 +
lea edx [ebx+89Ch] +
mov eax [eax+8] +
mov [esp+14h+var_14] edx +
call eax  +
mov dword ptr [ebx+89Ch] 0FFFFFFFFh +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
xor edx edx +
movzx esi ds:byte_475E44[edx*8] +
mov ecx esi +
test cl cl +
jz loc_4292A5  +
mov [esp+14h+var_8] eax +
mov eax ds:dword_486584 +
mov [esp+14h+var_10] offset aSJtagmki_clo_1 +
mov [esp+14h+var_14] 2 +
mov [esp+14h+var_C] eax +
call sub_401740  +
mov eax esi +
mov edx 62h +
movzx ecx al +
mov eax ebx +
call sub_4290B0  +
test eax eax +
jnz loc_4292C6  +
mov edx [ebx+480h] +
mov eax off_461140 +
mov eax [eax+4] +
mov [esp+14h+var_10] edx +
lea edx [ebx+89Ch] +
mov [esp+14h+var_14] edx +
call eax  +
jmp loc_4292C6  +
mov edx 1 +
jmp loc_4292F4  +
mov edx 2 +
jmp loc_4292F4  +
mov edx 3 +
jmp loc_4292F4  +
***
push esi  +
mov esi edx +
push ebx  +
mov ebx eax +
sub esp 20h +
mov eax ds:dword_486584 +
mov [esp+28h+var_24] offset aSJtagmki_getpa +
mov [esp+28h+var_28] 2 +
mov [esp+28h+var_20] eax +
call sub_401740  +
mov eax esi +
cmp ds:dword_486580 1 +
mov byte ptr [esp+28h+var_D] 71h +
mov byte ptr [esp+28h+var_D+1] al +
jle loc_4293DE  +
mov eax ds:dword_486584 +
mov [esp+28h+var_1C] esi +
mov [esp+28h+var_24] offset aSJtagmki_get_0 +
mov [esp+28h+var_28] 2 +
mov [esp+28h+var_20] eax +
call sub_401740  +
mov ecx 2 +
mov eax ebx +
lea edx [esp+28h+var_D] +
call sub_428D00  +
mov ecx 3 +
mov eax ebx +
lea edx [esp+28h+var_D+2] +
call sub_428E40  +
test eax eax +
js loc_4294F0  +
movzx eax byte ptr [esp+28h+var_D+2] +
cmp al 41h +
jnz loc_429452  +
cmp [esp+28h+var_9] 41h +
jnz loc_4294A0  +
cmp ds:dword_486580 2 +
jz loc_429433  +
movzx eax byte ptr [esp+28h+var_D+3] +
mov [edi] al +
xor eax eax +
add esp 20h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
movzx eax byte ptr [esp+28h+var_D+3] +
mov [esp+28h+var_24] offset aOkValue0x02x +
mov [esp+28h+var_28] 2 +
mov [esp+28h+var_20] eax +
call sub_401740  +
jmp loc_429423  +
cmp ds:dword_486580 1 +
jle loc_429478  +
mov eax ds:_iob +
mov [esp+28h+var_28] 0Ah +
add eax 40h +
mov [esp+28h+var_24] eax +
call putc  +
movzx eax byte ptr [esp+28h+var_D+2] +
mov [esp+28h+var_1C] eax +
mov eax ds:dword_486584 +
mov [esp+28h+var_24] offset aSJtagmki_get_1 +
mov [esp+28h+var_28] 0 +
mov [esp+28h+var_20] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_42942C  +
cmp ds:dword_486580 1 +
jle loc_4294C1  +
mov eax ds:_iob +
mov [esp+28h+var_28] 0Ah +
add eax 40h +
mov [esp+28h+var_24] eax +
call putc  +
mov eax ds:dword_486584 +
mov [esp+28h+var_1C] esi +
mov [esp+28h+var_24] offset aSJtagmki_get_2 +
mov [esp+28h+var_28] 0 +
mov [esp+28h+var_20] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_42942C  +
mov eax 0FFFFFFFFh +
jmp loc_42942C  +
***
push ebx  +
mov edx 84h +
sub esp 44h +
mov ebx eax +
lea ecx [esp+48h+var_A] +
call sub_429380  +
test eax eax +
js loc_4295B8  +
lea ecx [esp+48h+var_A+1] +
mov edx 86h +
mov eax ebx +
call sub_429380  +
test eax eax +
js loc_4295B8  +
movzx eax byte ptr [esp+48h+var_A+1] +
add eax 5 +
cmp al 4 +
ja loc_4295C0  +
movzx eax al +
mov ebx ds:off_475E08[eax*4] +
fld  ds:dbl_475DC0[eax*8] +
movzx eax byte ptr [esp+48h+var_A] +
fstp  [esp+48h+var_28] +
mov [esp+48h+var_40] esi +
mov [esp+48h+var_44] offset aSvtarget_1fV_1 +
mov [esp+48h+var_48] 0 +
mov [esp+48h+var_1A] ax +
fild  [esp+48h+var_1A] +
fmul  ds:flt_475E74 +
fdiv  ds:flt_475E78 +
fstp  [esp+48h+var_3C] +
call sub_401740  +
mov dword ptr [esp+48h+var_3C] ebx +
mov [esp+48h+var_40] esi +
mov [esp+48h+var_44] offset aSjtagClockS__0 +
mov [esp+48h+var_48] 0 +
fld  [esp+48h+var_28] +
fdivr  ds:flt_475E68 +
fstp  [esp+48h+var_3C+4] +
call sub_401740  +
add esp 44h +
pop ebx  +
pop esi  +
retn   +
fld  ds:flt_475E68 +
mov ebx offset a??? +
jmp loc_429554  +
***
mov eax [esp+arg_0] +
mov edx offset unk_4753C2 +
jmp sub_429500  +
***
push ebx  +
sub esp 24h +
mov ebx [esp+28h+arg_0] +
lea ecx [esp+28h+var_A] +
mov esi [esp+28h+arg_4] +
mov eax ebx +
call sub_429380  +
test eax eax +
js loc_429660  +
lea ecx [esp+28h+var_A+1] +
mov edx 7Bh +
mov eax ebx +
call sub_429380  +
test eax eax +
js loc_429660  +
movzx eax byte ptr [esp+28h+var_A] +
mov [esp+28h+var_20] esi +
mov [esp+28h+var_24] offset aSiceHardwareVe +
mov [esp+28h+var_28] 0 +
mov [esp+28h+var_1C] eax +
call sub_401740  +
movzx eax byte ptr [esp+28h+var_A+1] +
mov [esp+28h+var_20] esi +
mov [esp+28h+var_24] offset aSiceFirmwareVe +
mov [esp+28h+var_28] 0 +
mov [esp+28h+var_1C] eax +
call sub_401740  +
mov edx esi +
mov eax ebx +
call sub_429500  +
add esp 24h +
pop ebx  +
pop esi  +
retn   +
***
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov eax ds:dword_486584 +
mov [esp+48h+var_44] offset aSJtagmki_open +
mov ebx [esp+48h+arg_0] +
mov [esp+48h+var_48] 2 +
mov [esp+48h+var_40] eax +
call sub_401740  +
mov eax [esp+48h+arg_4] +
lea edi [ebx+89Ch] +
mov [esp+48h+var_44] eax +
lea eax [ebx+74h] +
mov [esp+48h+var_48] eax +
call strcpy  +
mov eax [ebx+0A5Ch] +
mov dword ptr [eax] 0FFFFFFFFh +
mov esi ds:dword_475E40[ebp*8] +
mov eax ds:dword_486584 +
mov [esp+48h+var_44] offset aSJtagmki_openT +
mov [esp+48h+var_48] 2 +
mov [esp+48h+var_3C] esi +
mov [esp+48h+var_40] eax +
call sub_401740  +
mov eax off_461140 +
mov edx [esp+48h+var_28] +
mov ecx [esp+48h+arg_4] +
mov [esp+48h+var_2C] esi +
mov eax [eax] +
mov [esp+48h+var_3C] edi +
mov [esp+48h+var_44] esi +
mov [esp+48h+var_40] edx +
mov [esp+48h+var_48] ecx +
call eax  +
cmp eax 0FFFFFFFFh +
jz loc_4297EE  +
mov eax off_461140 +
mov eax [eax+14h] +
mov [esp+48h+var_44] 0 +
mov [esp+48h+var_48] edi +
call eax  +
mov ecx 1 +
mov edx 5 +
mov eax ebx +
call sub_428AF0  +
test eax eax +
mov eax off_461140 +
mov eax [eax+14h] +
mov [esp+48h+var_44] 0 +
mov [esp+48h+var_48] edi +
js loc_4297F6  +
call eax  +
mov eax ds:dword_486584 +
mov [esp+48h+var_44] offset aSJtagmki_getsy +
mov [esp+48h+var_48] 2 +
mov [esp+48h+var_40] eax +
call sub_401740  +
mov ecx 1 +
mov eax ebx +
lea edx [esp+1Bh] +
mov [esp+48h+var_2D] 53h +
call sub_428D00  +
mov ecx 9 +
mov eax ebx +
lea edx [esp+48h+var_21] +
call sub_428E40  +
test eax eax +
js loc_4297F8  +
cmp ds:dword_486580 1 +
jle loc_4297C7  +
lea eax [esp+48h+var_21+1] +
mov [esp+48h+var_40] eax +
mov [esp+48h+var_44] offset aGotS +
mov [esp+48h+var_48] 2 +
mov [esp+48h+var_19] 0 +
call sub_401740  +
mov eax [ebx+0A5Ch] +
mov [eax] esi +
mov eax ds:dword_486584 +
mov [esp+48h+var_44] offset aSJtagmki_openS +
mov [esp+48h+var_48] 2 +
mov [esp+48h+var_40] eax +
call sub_401740  +
xor eax eax +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
call eax  +
mov eax off_461140 +
add ebp 1 +
mov eax [eax+8] +
mov [esp+48h+var_48] edi +
call eax  +
cmp ebp 5 +
jnz loc_4296BF  +
mov eax ds:dword_486584 +
mov [esp+48h+var_44] offset aSJtagmki_openF +
mov [esp+48h+var_48] 0 +
mov [esp+48h+var_40] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
mov dword ptr [ebx+89Ch] 0FFFFFFFFh +
jmp loc_4297EE  +
***
mov eax ds:dword_486584 +
mov ebx [esp+28h+arg_0] +
mov [esp+28h+var_24] offset aSJtagmki_chip_ +
mov [esp+28h+var_28] 2 +
mov [esp+28h+var_20] eax +
mov byte ptr [esp+28h+var_B] 0A5h +
call sub_401740  +
mov ecx 1 +
mov eax ebx +
lea edx [esp+28h+var_B] +
call sub_428D00  +
mov ecx 2 +
mov eax ebx +
lea edx [esp+28h+var_B+1] +
call sub_428E40  +
test eax eax +
js loc_429924  +
movzx eax byte ptr [esp+28h+var_B+1] +
cmp al 41h +
jnz loc_4298D6  +
cmp ds:dword_486580 2 +
jz loc_4298C0  +
mov edx [esp+28h+arg_4] +
mov eax [ebx+8C8h] +
mov [esp+28h+var_28] ebx +
mov [esp+28h+var_24] edx +
call eax  +
xor eax eax +
add esp 28h +
pop ebx  +
retn   +
mov [esp+28h+var_24] offset aOk_2 +
mov [esp+28h+var_28] 2 +
call sub_401740  +
jmp loc_4298A4  +
cmp ds:dword_486580 1 +
jle loc_4298FC  +
mov eax ds:_iob +
mov [esp+28h+var_28] 0Ah +
add eax 40h +
mov [esp+28h+var_24] eax +
call putc  +
movzx eax byte ptr [esp+28h+var_B+1] +
mov [esp+28h+var_1C] eax +
mov eax ds:dword_486584 +
mov [esp+28h+var_24] offset aSJtagmki_chi_0 +
mov [esp+28h+var_28] 0 +
mov [esp+28h+var_20] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_4298B9  +
mov eax 0FFFFFFFFh +
jmp loc_4298B9  +
***
sub esp 28h +
mov eax ds:dword_486584 +
mov [esp+28h+var_24] offset aSJtagmki_progr +
mov [esp+28h+var_28] 2 +
mov byte ptr [esp+28h+var_B] 0A3h +
mov [esp+28h+var_20] eax +
call sub_401740  +
mov ecx 1 +
mov eax ebx +
lea edx [esp+28h+var_B] +
call sub_428D00  +
mov ecx 2 +
mov eax ebx +
lea edx [esp+28h+var_B+1] +
call sub_428E40  +
test eax eax +
js loc_429A10  +
movzx eax byte ptr [esp+28h+var_B+1] +
cmp al 41h +
jnz loc_4299C0  +
cmp ds:dword_486580 2 +
jz loc_4299A6  +
mov eax [ebx+0A5Ch] +
mov dword ptr [eax+1Ch] 1 +
xor eax eax +
add esp 28h +
pop ebx  +
retn   +
mov [esp+28h+var_24] offset aOk_2 +
mov [esp+28h+var_28] 2 +
call sub_401740  +
jmp loc_429992  +
cmp ds:dword_486580 1 +
jle loc_4299E6  +
mov eax ds:_iob +
mov [esp+28h+var_28] 0Ah +
add eax 40h +
mov [esp+28h+var_24] eax +
call putc  +
movzx eax byte ptr [esp+28h+var_B+1] +
mov [esp+28h+var_1C] eax +
mov eax ds:dword_486584 +
mov [esp+28h+var_24] offset aSJtagmki_pro_0 +
mov [esp+28h+var_28] 0 +
mov [esp+28h+var_20] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_4299A1  +
mov eax 0FFFFFFFFh +
jmp loc_4299A1  +
***
push esi  +
push ebx  +
sub esp 2ACh +
mov ebx [esp+2ACh+arg_10] +
mov eax [esp+2ACh+arg_14] +
mov ebp [esp+2ACh+arg_0] +
mov [esp+2ACh+var_2A8] offset aSJtagmki_paged +
mov [esp+2ACh+var_2AC] 2 +
add eax ebx +
mov [esp+2ACh+var_224] eax +
mov eax dword_4611C8 +
mov [esp+2ACh+var_220] eax +
mov eax [esp+2ACh+arg_14] +
mov [esp+2ACh+var_298] eax +
mov eax [esp+2ACh+arg_C] +
mov [esp+2ACh+var_29C] eax +
mov eax [esp+2ACh+arg_8] +
mov [esp+2ACh+var_2A0] eax +
mov eax ds:dword_486584 +
mov [esp+2ACh+var_2A4] eax +
call sub_401740  +
mov eax [ebp+0A5Ch] +
mov edi [eax+1Ch] +
test edi edi +
jz loc_429D50  +
mov eax [esp+2ACh+arg_8] +
mov edi offset aFlash_12 +
mov ecx 6 +
mov esi [esp+2ACh+arg_8] +
mov [esp+2ACh+var_215] 52h +
mov eax [eax+70h] +
mov [esp+2ACh+var_22C] eax +
cmps   +
jz loc_429D11  +
mov esi [esp+2ACh+arg_8] +
mov edi offset aEeprom_9 +
mov ecx 7 +
cmps   +
jnz loc_429AF2  +
mov [esp+2ACh+var_214] 0B1h +
mov [esp+2ACh+var_288] 0 +
mov eax 100h +
cmp eax [esp+2ACh+var_22C] +
jb loc_429DF0  +
cmp ebx [esp+2ACh+var_224] +
mov dword_4611C8 3E8h +
jnb loc_429DD8  +
mov ecx [esp+2ACh+var_22C] +
cmp [esp+2ACh+arg_14] ecx +
mov esi ecx +
cmovb esi [esp+2ACh+arg_14] +
lea eax [esi+1] +
mov edx eax +
shr edx 1Fh +
mov [esp+2ACh+var_284] esi +
mov esi [esp+2ACh+var_288] +
add eax edx +
sar eax 1 +
lea edx [eax+eax] +
sub eax 1 +
mov [esp+2ACh+var_226] al +
mov eax edx +
test esi esi +
mov esi ecx +
cmovz eax ecx +
lea ecx [eax+3] +
lea edi [eax+2] +
mov eax esi +
sub eax 1 +
mov [esp+2ACh+var_280] ecx +
mov [esp+2ACh+var_225] al +
mov eax ebx +
xor esi esi +
shr eax 1 +
mov [esp+2ACh+var_27C] eax +
mov eax ebx +
shr eax 9 +
mov [esp+2ACh+var_26C] eax +
mov eax ebx +
shr eax 11h +
mov [esp+2ACh+var_25C] eax +
mov eax ebx +
shr eax 8 +
mov [esp+2ACh+var_24C] eax +
mov eax ebx +
shr eax 10h +
mov [esp+2ACh+var_23C] eax +
jmp loc_429CA9  +
movzx eax [esp+2ACh+var_226] +
mov [esp+2ACh+var_213] al +
movzx eax byte ptr [esp+2ACh+var_27C] +
mov [esp+2ACh+var_210] al +
movzx eax byte ptr [esp+2ACh+var_26C] +
mov [esp+2ACh+var_211] al +
movzx eax byte ptr [esp+2ACh+var_25C] +
mov [esp+2ACh+var_212] al +
mov eax ds:dword_486584 +
mov [esp+2ACh+var_2A8] offset aSJtagmki_pag_1 +
mov [esp+2ACh+var_2AC] 2 +
mov [esp+2ACh+var_2A4] eax +
call sub_401740  +
mov ecx 6 +
mov eax ebp +
lea edx [esp+2ACh+var_215] +
call sub_428D00  +
mov ecx [esp+2ACh+var_280] +
lea edx [esp+2ACh+var_20F] +
mov eax ebp +
call sub_428E40  +
test eax eax +
js loc_429D60  +
movzx eax byte ptr [esp+edi+2ACh+var_20F] +
cmp al 41h +
jz loc_429D90  +
cmp ds:dword_486580 1 +
jle loc_429C66  +
mov eax ds:_iob +
mov [esp+2ACh+var_2AC] 0Ah +
add eax 40h +
mov [esp+2ACh+var_2A8] eax +
call putc  +
movzx eax byte ptr [esp+edi+2ACh+var_20F] +
mov [esp+2ACh+var_2A0] eax +
mov eax ds:dword_486584 +
add esi 1 +
mov [esp+2ACh+var_2A8] offset aSJtagmki_pag_2 +
mov [esp+2ACh+var_2AC] 0 +
mov [esp+2ACh+var_2A4] eax +
call sub_401740  +
cmp esi 4 +
jz loc_429D30  +
xor ecx ecx +
mov edx 7D0h +
mov eax ebp +
call sub_428AF0  +
test eax eax +
js loc_429D70  +
mov eax [esp+2ACh+var_284] +
mov [esp+2ACh+var_2A0] ebx +
mov [esp+2ACh+var_2A8] offset aSJtagmki_pag_0 +
mov [esp+2ACh+var_2AC] 3 +
mov [esp+2ACh+var_29C] eax +
mov eax ds:dword_486584 +
mov [esp+2ACh+var_2A4] eax +
call sub_401740  +
mov eax [esp+2ACh+var_288] +
test eax eax +
jnz loc_429BB0  +
movzx eax [esp+2ACh+var_225] +
mov [esp+2ACh+var_210] bl +
mov [esp+2ACh+var_213] al +
movzx eax byte ptr [esp+2ACh+var_24C] +
mov [esp+2ACh+var_211] al +
movzx eax byte ptr [esp+2ACh+var_23C] +
mov [esp+2ACh+var_212] al +
jmp loc_429BE3  +
mov [esp+2ACh+var_214] 0B0h +
mov eax 200h +
mov [esp+2ACh+var_288] 1 +
jmp loc_429AFF  +
mov eax [esp+2ACh+var_220] +
mov dword_4611C8 eax +
mov eax 0FFFFFFFFh +
add esp 2ACh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ebp +
call sub_429930  +
test eax eax +
jns loc_429AA3  +
nop   +
add esp 2ACh +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ds:dword_486584 +
mov [esp+2ACh+var_2A8] offset aSJtagmki_pag_3 +
mov [esp+2ACh+var_2AC] 0 +
mov [esp+2ACh+var_2A4] eax +
call sub_401740  +
jmp loc_429D60  +
cmp ds:dword_486580 2 +
jz loc_429E22  +
mov ecx [esp+2ACh+arg_8] +
lea edx [esp+2ACh+var_20F+1] +
mov eax [ecx+78h] +
mov ecx [esp+2ACh+var_284] +
mov [esp+2ACh+var_2A8] edx +
add eax ebx +
mov [esp+2ACh+var_2A4] ecx +
mov [esp+2ACh+var_2AC] eax +
call memcpy  +
add ebx [esp+2ACh+var_22C] +
cmp [esp+2ACh+var_224] ebx +
ja loc_429B7B  +
mov eax [esp+2ACh+var_220] +
mov dword_4611C8 eax +
mov eax [esp+2ACh+arg_14] +
jmp loc_429D41  +
mov eax [esp+2ACh+var_22C] +
mov [esp+2ACh+var_2A8] offset aSJtagmki_pag_4 +
mov [esp+2ACh+var_2AC] 0 +
mov [esp+2ACh+var_2A0] eax +
mov eax ds:dword_486584 +
mov [esp+2ACh+var_2A4] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_429D41  +
mov [esp+2ACh+var_2A8] offset aOk_2 +
mov [esp+2ACh+var_2AC] 2 +
call sub_401740  +
jmp loc_429D9D  +
***
push esi  +
push ebx  +
sub esp 9Ch +
mov eax [esp+9Ch+arg_10] +
add eax [esp+9Ch+arg_14] +
mov ebp [esp+9Ch+arg_0] +
mov [esp+9Ch+var_98] offset aSJtagmki_pag_5 +
mov [esp+9Ch+var_24] eax +
mov eax dword_4611C8 +
mov [esp+9Ch+var_9C] 2 +
mov [esp+9Ch+var_20] eax +
mov eax [esp+9Ch+arg_14] +
mov [esp+9Ch+var_88] eax +
mov eax [esp+9Ch+arg_C] +
mov [esp+9Ch+var_8C] eax +
mov eax [esp+9Ch+arg_8] +
mov [esp+9Ch+var_90] eax +
mov eax ds:dword_486584 +
mov [esp+9Ch+var_94] eax +
call sub_401740  +
mov eax [ebp+0A5Ch] +
mov ecx [eax+1Ch] +
test ecx ecx +
jz loc_42A267  +
mov edx [esp+9Ch+arg_C] +
test edx edx +
jz loc_42A150  +
cmp [esp+9Ch+arg_C] 100h +
mov eax [esp+9Ch+arg_C] +
ja loc_42A2B8  +
add eax 1 +
mov [esp+9Ch+var_9C] eax +
call malloc  +
test eax eax +
mov [esp+9Ch+var_80] eax +
jz loc_42A31E  +
mov esi [esp+9Ch+arg_8] +
mov edi offset aFlash_12 +
mov ecx 6 +
mov byte ptr [esp+9Ch+var_14+2] 57h +
cmps   +
jnz loc_42A220  +
mov eax [ebp+0A5Ch] +
mov esi 1 +
mov byte ptr [esp+9Ch+var_14+3] 0B0h +
mov dword ptr [eax+8] 0FFFFFFFFh +
mov eax [eax+0Ch] +
mov [esp+9Ch+arg_C] eax +
mov eax [esp+9Ch+var_80] +
mov dword_4611C8 3E8h +
mov byte ptr [eax] 68h +
mov eax [esp+9Ch+var_24] +
cmp [esp+9Ch+arg_10] eax +
jnb loc_42A2FD  +
mov eax [esp+9Ch+arg_14] +
mov edi [esp+9Ch+arg_C] +
cmp [esp+9Ch+arg_C] eax +
mov ebx [esp+9Ch+arg_10] +
mov [esp+9Ch+var_84] esi +
cmova edi eax +
mov eax [esp+9Ch+arg_C] +
shr eax 1Fh +
add eax [esp+9Ch+arg_C] +
sar eax 1 +
sub eax 1 +
mov [esp+9Ch+var_26] al +
movzx eax byte ptr [esp+9Ch+arg_C] +
sub eax 1 +
mov [esp+9Ch+var_25] al +
mov eax ebx +
xor esi esi +
shr eax 1 +
mov [esp+9Ch+var_7C] eax +
mov eax ebx +
shr eax 9 +
mov [esp+9Ch+var_6C] eax +
mov eax ebx +
shr eax 11h +
mov [esp+9Ch+var_5C] eax +
mov eax ebx +
shr eax 8 +
mov [esp+9Ch+var_4C] eax +
mov eax ebx +
shr eax 10h +
mov [esp+9Ch+var_3C] eax +
mov eax [esp+9Ch+var_80] +
add eax 1 +
mov [esp+9Ch+var_2C] eax +
jmp loc_42A0EB  +
movzx eax [esp+9Ch+var_26] +
mov [esp+9Ch+var_10] al +
movzx eax byte ptr [esp+9Ch+var_7C] +
mov [esp+9Ch+var_D] al +
movzx eax byte ptr [esp+9Ch+var_6C] +
mov [esp+9Ch+var_E] al +
movzx eax byte ptr [esp+9Ch+var_5C] +
mov [esp+9Ch+var_F] al +
mov eax ds:dword_486584 +
mov [esp+9Ch+var_98] offset aSJtagmki_pag_7 +
mov [esp+9Ch+var_9C] 2 +
mov [esp+9Ch+var_94] eax +
call sub_401740  +
mov ecx 6 +
mov eax ebp +
lea edx [esp+9Ch+var_14+2] +
call sub_428D00  +
mov ecx 1 +
mov eax ebp +
lea edx [esp+88h] +
call sub_428E40  +
test eax eax +
js loc_42A209  +
movzx eax byte ptr [esp+9Ch+var_14] +
cmp al 41h +
jz loc_42A165  +
cmp ds:dword_486580 1 +
jle loc_42A0A4  +
mov eax ds:_iob +
mov [esp+9Ch+var_9C] 0Ah +
add eax 40h +
mov [esp+9Ch+var_98] eax +
call putc  +
movzx eax byte ptr [esp+9Ch+var_14] +
mov [esp+9Ch+var_90] eax +
mov eax ds:dword_486584 +
mov [esp+9Ch+var_98] offset aSJtagmki_pag_8 +
mov [esp+9Ch+var_9C] 0 +
mov [esp+9Ch+var_94] eax +
call sub_401740  +
cmp esi 3 +
jz loc_42A200  +
add esi 1 +
test esi esi +
jz loc_42A0EB  +
xor ecx ecx +
mov edx 7D0h +
mov eax ebp +
call sub_428AF0  +
test eax eax +
js loc_42A291  +
mov eax ds:dword_486584 +
mov [esp+9Ch+var_8C] edi +
mov [esp+9Ch+var_90] ebx +
mov [esp+9Ch+var_98] offset aSJtagmki_pag_6 +
mov [esp+9Ch+var_94] eax +
mov [esp+9Ch+var_9C] 3 +
call sub_401740  +
mov eax [esp+9Ch+var_84] +
test eax eax +
jnz loc_429FF0  +
movzx eax [esp+9Ch+var_25] +
mov [esp+9Ch+var_D] bl +
mov [esp+9Ch+var_10] al +
movzx eax byte ptr [esp+9Ch+var_4C] +
mov [esp+9Ch+var_E] al +
movzx eax byte ptr [esp+9Ch+var_3C] +
mov [esp+9Ch+var_F] al +
jmp loc_42A020  +
mov eax 101h +
mov [esp+9Ch+arg_C] 100h +
jmp loc_429EE5  +
cmp ds:dword_486580 2 +
jz loc_42A278  +
mov eax [esp+9Ch+arg_C] +
mov [esp+9Ch+var_98] 0FFh +
mov [esp+9Ch+var_94] eax +
mov eax [esp+9Ch+var_2C] +
mov [esp+9Ch+var_9C] eax +
call memset  +
mov edx [esp+9Ch+arg_8] +
mov eax [esp+9Ch+var_2C] +
mov ecx [edx+78h] +
mov [esp+9Ch+var_94] edi +
mov [esp+9Ch+var_9C] eax +
add ecx ebx +
mov [esp+9Ch+var_98] ecx +
call memcpy  +
mov eax [esp+9Ch+arg_C] +
mov edx [esp+9Ch+var_80] +
lea ecx [eax+1] +
mov eax ebp +
call sub_428D00  +
mov ecx 2 +
mov eax ebp +
lea edx [esp+9Ch+var_14] +
call sub_428E40  +
test eax eax +
js loc_42A209  +
cmp byte ptr [esp+9Ch+var_14+1] 41h +
jz loc_42A2E3  +
cmp ds:dword_486580 1 +
jg loc_42A084  +
jmp loc_42A09C  +
mov eax [esp+9Ch+var_20] +
mov dword_4611C8 eax +
mov eax 0FFFFFFFFh +
add esp 9Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi [esp+9Ch+arg_8] +
mov edi offset aEeprom_9 +
mov ecx 7 +
cmps   +
setnbe dl  +
setb al  +
xor esi esi +
cmp dl al +
jnz loc_429F3E  +
mov eax [ebp+0A5Ch] +
mov byte ptr [esp+9Ch+var_14+3] 0B1h +
mov dword ptr [eax+14h] 0FFFFFFFFh +
mov eax [eax+18h] +
mov [esp+9Ch+arg_C] eax +
jmp loc_429F3E  +
mov eax ebp +
call sub_429930  +
test eax eax +
jns loc_429EBB  +
jmp loc_42A209  +
mov [esp+9Ch+var_98] offset aOk_2 +
mov [esp+9Ch+var_9C] 2 +
call sub_401740  +
jmp loc_42A172  +
mov eax ds:dword_486584 +
mov [esp+9Ch+var_98] offset aSJtagmki_pag_9 +
mov [esp+9Ch+var_9C] 0 +
mov [esp+9Ch+var_94] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_42A20E  +
mov [esp+9Ch+var_90] eax +
mov eax ds:dword_486584 +
mov [esp+9Ch+var_98] offset aSJtagmki_pa_10 +
mov [esp+9Ch+var_9C] 0 +
mov [esp+9Ch+var_94] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_42A20E  +
cmp ds:dword_486580 2 +
jz loc_42A345  +
add ebx [esp+9Ch+arg_C] +
cmp [esp+9Ch+var_24] ebx +
ja loc_429FAC  +
mov eax [esp+9Ch+var_80] +
mov [esp+9Ch+var_9C] eax +
call free  +
mov eax [esp+9Ch+var_20] +
mov dword_4611C8 eax +
mov eax [esp+9Ch+arg_14] +
jmp loc_42A20E  +
mov eax ds:dword_486584 +
mov [esp+9Ch+var_98] offset aSJtagmki_pa_11 +
mov [esp+9Ch+var_9C] 0 +
mov [esp+9Ch+var_94] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_42A20E  +
mov [esp+9Ch+var_98] offset aOk_2 +
mov [esp+9Ch+var_9C] 2 +
call sub_401740  +
jmp loc_42A2EC  +
***
push esi  +
push ebx  +
sub esp 23Ch +
mov eax [esp+23Ch+arg_C] +
mov ebp [esp+23Ch+arg_8] +
mov ebx [esp+23Ch+arg_0] +
mov [esp+23Ch+var_238] offset aSJtagmki_read_ +
mov [esp+23Ch+var_22C] eax +
mov eax ds:dword_486584 +
mov [esp+23Ch+var_230] ebp +
mov [esp+23Ch+var_23C] 2 +
mov [esp+23Ch+var_234] eax +
call sub_401740  +
mov eax [ebx+0A5Ch] +
mov eax [eax+1Ch] +
test eax eax +
jz loc_42A550  +
mov [esp+23Ch+var_215] 52h +
mov edi offset aFlash_12 +
mov ecx 6 +
mov esi ebp +
cmps   +
jz loc_42A4C7  +
mov edi offset aEeprom_9 +
mov ecx 7 +
mov esi ebp +
cmps   +
jnz loc_42A570  +
mov eax [ebx+0A5Ch] +
mov esi [ebp+48h] +
mov [esp+23Ch+var_214] 0B1h +
lea edi [eax+14h] +
mov eax [eax+10h] +
mov ebp esi +
neg ebp  +
and ebp [esp+23Ch+arg_C] +
mov [esp+23Ch+var_220] eax +
xor eax eax +
test esi esi +
mov [esp+23Ch+var_224] edi +
jz loc_42A4FB  +
mov ecx [esp+23Ch+var_224] +
cmp [ecx] ebp +
jz loc_42A6B0  +
test eax eax +
jz loc_42A5F0  +
mov eax esi +
shr eax 1 +
sub eax 1 +
mov [esp+23Ch+var_213] al +
mov eax ebp +
shr eax 1 +
mov [esp+23Ch+var_210] al +
mov eax ebp +
shr eax 9 +
mov [esp+23Ch+var_211] al +
mov eax ebp +
shr eax 11h +
mov [esp+23Ch+var_212] al +
lea edi [esi+3] +
mov [esp+23Ch+var_228] edi +
mov ecx 6 +
mov eax ebx +
lea edx [esp+23Ch+var_215] +
call sub_428D00  +
mov ecx edi +
mov eax ebx +
lea edx [esp+23Ch+var_20F] +
call sub_428E40  +
test eax eax +
js loc_42A560  +
mov ebx [esp+23Ch+var_228] +
movzx eax [esp+ebx+23Ch+var_210] +
sub ebx 1 +
cmp al 41h +
jnz loc_42A6D2  +
cmp ds:dword_486580 2 +
jz loc_42A694  +
test esi esi +
jnz loc_42A630  +
cmp [esp+23Ch+var_214] 0B2h +
jz loc_42A672  +
movzx eax byte ptr [esp+23Ch+var_20F+1] +
mov ecx [esp+23Ch+arg_10] +
mov [ecx] al +
xor eax eax +
add esp 23Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx+0A5Ch] +
mov esi [ebp+48h] +
mov [esp+23Ch+var_214] 0B0h +
lea edi [eax+8] +
mov eax [eax+4] +
mov ebp esi +
neg ebp  +
and ebp [esp+23Ch+arg_C] +
test esi esi +
mov [esp+23Ch+var_220] eax +
mov eax 1 +
mov [esp+23Ch+var_224] edi +
jnz loc_42A413  +
movzx eax [esp+23Ch+var_214] +
cmp al 0B2h +
jz loc_42A5C7  +
movzx eax byte ptr [esp+23Ch+arg_C] +
mov edi 4 +
xor esi esi +
mov [esp+23Ch+var_213] 0 +
mov [esp+23Ch+var_228] 4 +
mov [esp+23Ch+var_210] al +
mov eax [esp+23Ch+arg_C] +
shr eax 8 +
mov [esp+23Ch+var_211] al +
mov eax [esp+23Ch+arg_C] +
shr eax 10h +
mov [esp+23Ch+var_212] al +
jmp loc_42A453  +
mov eax ebx +
call sub_429930  +
test eax eax +
jns loc_42A3B5  +
nop   +
add esp 23Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edi offset aLfuse_7 +
mov ecx 6 +
mov esi ebp +
cmps   +
jz loc_42A614  +
mov edi offset aHfuse_7 +
mov ecx 6 +
mov esi ebp +
cmps   +
jnz loc_42A720  +
mov [esp+23Ch+var_214] 0B2h +
mov eax 0FFFFFFB2h +
mov [esp+23Ch+arg_C] 1 +
xor ebp ebp +
cmp al 0B2h +
mov [esp+23Ch+var_224] 0 +
mov [esp+23Ch+var_220] 0 +
jnz loc_42A508  +
mov [esp+23Ch+var_213] 2 +
mov edi 6 +
xor esi esi +
mov [esp+23Ch+var_210] 0 +
mov [esp+23Ch+var_211] 0 +
mov [esp+23Ch+var_212] 0 +
mov [esp+23Ch+var_228] 6 +
jmp loc_42A453  +
lea eax [esi-1] +
mov [esp+23Ch+var_213] al +
mov eax ebp +
mov [esp+23Ch+var_210] al +
mov eax ebp +
shr eax 8 +
mov [esp+23Ch+var_211] al +
mov eax ebp +
shr eax 10h +
mov [esp+23Ch+var_212] al +
jmp loc_42A44C  +
mov [esp+23Ch+var_214] 0B2h +
mov eax 0FFFFFFB2h +
mov [esp+23Ch+arg_C] 0 +
jmp loc_42A5AD  +
mov eax [esp+23Ch+var_224] +
mov edi [esp+23Ch+var_220] +
mov [eax] ebp +
lea eax [esp+23Ch+var_20F+1] +
mov [esp+23Ch+var_234] esi +
sub esi 1 +
mov [esp+23Ch+var_23C] edi +
mov [esp+23Ch+var_238] eax +
call memcpy  +
mov ecx [esp+23Ch+arg_10] +
and esi [esp+23Ch+arg_C] +
movzx eax byte ptr [edi+esi] +
mov [ecx] al +
add esp 23Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+23Ch+arg_C] +
mov ecx [esp+23Ch+arg_10] +
movzx eax byte ptr [esp+eax+23Ch+var_20F+1] +
mov [ecx] al +
add esp 23Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+23Ch+var_238] offset aOk_2 +
mov [esp+23Ch+var_23C] 2 +
call sub_401740  +
jmp loc_42A499  +
mov eax [esp+23Ch+var_220] +
sub esi 1 +
and esi [esp+23Ch+arg_C] +
mov edi [esp+23Ch+arg_10] +
movzx eax byte ptr [eax+esi] +
mov [edi] al +
xor eax eax +
jmp loc_42A4BC  +
cmp ds:dword_486580 1 +
jle loc_42A6F8  +
mov eax ds:_iob +
mov [esp+23Ch+var_23C] 0Ah +
add eax 40h +
mov [esp+23Ch+var_238] eax +
call putc  +
movzx eax byte ptr [esp+ebx+23Ch+var_20F] +
mov [esp+23Ch+var_230] eax +
mov eax ds:dword_486584 +
mov [esp+23Ch+var_238] offset aSJtagmki_rea_0 +
mov [esp+23Ch+var_23C] 0 +
mov [esp+23Ch+var_234] eax +
call sub_401740  +
jmp loc_42A560  +
mov edi offset aEfuse_7 +
mov ecx 6 +
mov esi ebp +
cmps   +
jz loc_42A750  +
mov edi offset aLock_4 +
mov ecx 5 +
mov esi ebp +
cmps   +
jnz loc_42A76A  +
mov [esp+23Ch+var_214] 0B3h +
mov eax 0FFFFFFB3h +
jmp loc_42A5AD  +
mov [esp+23Ch+var_214] 0B2h +
mov eax 0FFFFFFB2h +
mov [esp+23Ch+arg_C] 2 +
jmp loc_42A5AD  +
mov edi offset aCalibration_1 +
mov ecx 0Ch +
mov esi ebp +
cmps   +
jnz loc_42A789  +
mov [esp+23Ch+var_214] 0B5h +
mov eax 0FFFFFFB5h +
jmp loc_42A5AD  +
mov edi offset aSignature_6 +
mov ecx 0Ah +
mov esi ebp +
cmps   +
jnz loc_42A7A8  +
mov [esp+23Ch+var_214] 0B4h +
mov eax 0FFFFFFB4h +
jmp loc_42A5AD  +
movzx eax [esp+23Ch+var_214] +
jmp loc_42A5AD  +
***
push esi  +
push ebx  +
sub esp 0ECh +
mov eax [esp+0ECh+arg_4] +
mov ebp [esp+0ECh+arg_0] +
test byte ptr [eax+84h] 8 +
jz loc_42AD97  +
mov eax off_461140 +
lea ebx [ebp+89Ch] +
mov eax [eax+14h] +
mov dword ptr [esp+0ECh+var_E8] 0 +
mov [esp+0ECh+var_EC] ebx +
call eax  +
mov eax off_461140 +
test byte ptr [eax+1Ch] 1 +
jz loc_42A880  +
mov edx [ebp+0A5Ch] +
mov eax [ebp+480h] +
cmp [edx] eax +
jz loc_42A880  +
cmp eax 4B00h +
jz loc_42AD22  +
cmp eax 1C200h +
jz loc_42ADCC  +
cmp eax 2580h +
jz loc_42ADC2  +
cmp eax 9600h +
jz loc_42ADD6  +
cmp eax 0E100h +
mov edx 4 +
jz loc_42AD24  +
mov byte ptr [esp+0ECh+var_C4] 0 +
mov dword ptr [esp+0ECh+var_E0] eax +
mov eax ds:dword_486584 +
mov dword ptr [esp+0ECh+var_E8] offset aSJtagmki_initi +
mov [esp+0ECh+var_EC] 0 +
mov dword ptr [esp+0ECh+var_E8+4] eax +
call sub_401740  +
lea esi [esi+0] +
fld  qword ptr [ebp+890h] +
fldz   +
fxch  st(1) +
fucomi st st(1) +
fstp  st(1) +
jp loc_42A892  +
jz loc_42A8D0  +
mov eax ds:dword_486584 +
fstp  [esp+0ECh+var_E0] +
mov dword ptr [esp+0ECh+var_E8] offset aSJtagmki_ini_0 +
mov [esp+0ECh+var_EC] 2 +
mov dword ptr [esp+0ECh+var_E8+4] eax +
call sub_401740  +
fld  qword ptr [ebp+890h] +
fstp  [esp+0ECh+var_E8] +
mov [esp+0ECh+var_EC] ebp +
call sub_4291D0  +
test eax eax +
jz loc_42A8D2  +
jmp loc_42AD10  +
fstp  st +
mov ecx 1 +
mov eax ebp +
lea edx [esp+27h] +
mov [esp+0ECh+var_C5] 46h +
call sub_428D00  +
mov ecx 5 +
mov eax ebp +
lea edx [esp+0ECh+var_C4+3] +
call sub_428E40  +
test eax eax +
js loc_42AD10  +
movzx eax byte ptr [esp+0ECh+var_C4+3] +
cmp al 41h +
jz loc_42AC31  +
cmp ds:dword_486580 1 +
jle loc_42A932  +
mov eax ds:_iob +
mov [esp+0ECh+var_EC] 0Ah +
add eax 40h +
mov dword ptr [esp+0ECh+var_E8] eax +
call putc  +
movzx eax byte ptr [esp+0ECh+var_C4+3] +
mov dword ptr [esp+0ECh+var_E0] eax +
mov eax ds:dword_486584 +
mov dword ptr [esp+0ECh+var_E8] offset aSJtagmki_ini_1 +
mov [esp+0ECh+var_EC] 0 +
mov dword ptr [esp+0ECh+var_E8+4] eax +
call sub_401740  +
xor eax eax +
mov ecx 1Fh +
lea edi [esp+0ECh+var_BC] +
stos   +
mov eax [esp+0ECh+arg_4] +
mov byte ptr [esp+0ECh+var_BC] 0A0h +
movzx eax byte ptr [eax+136h] +
mov [esp+0ECh+var_4A] al +
mov eax [esp+0ECh+arg_4] +
movzx eax byte ptr [eax+135h] +
mov [esp+0ECh+var_49] al +
mov eax [esp+0ECh+arg_4] +
movzx eax byte ptr [eax+134h] +
mov [esp+0ECh+var_4B] al +
mov eax [esp+0ECh+arg_4] +
mov eax [eax+17Ch] +
mov [esp+0ECh+var_EC] eax +
call sub_406F20  +
test eax eax +
mov ebx eax +
jnz loc_42A9F0  +
jmp loc_42AA39  +
mov eax [eax+48h] +
mov edx [ebp+0A5Ch] +
mov [edx+0Ch] eax +
movzx eax ax +
mov [esp+0ECh+var_48] al +
shr ax 8 +
mov [esp+0ECh+var_47] al +
mov [esp+0ECh+var_EC] ebx +
call sub_406F40  +
test eax eax +
mov ebx eax +
jz loc_42AA39  +
mov [esp+0ECh+var_EC] ebx +
mov edi offset aFlash_12 +
call sub_406F60  +
mov ecx 6 +
mov esi eax +
cmps   +
jz loc_42A9C1  +
mov edi offset aEeprom_9 +
mov esi eax +
mov ecx 7 +
cmps   +
jnz loc_42A9E2  +
mov eax [eax+48h] +
mov edx [ebp+0A5Ch] +
mov [edx+18h] eax +
mov [esp+0ECh+var_EC] ebx +
mov [esp+0ECh+var_46] al +
call sub_406F40  +
test eax eax +
mov ebx eax +
jnz loc_42A9F0  +
mov eax ds:dword_486584 +
mov dword ptr [esp+0ECh+var_E8] offset aSJtagmki_set_d +
mov [esp+0ECh+var_EC] 2 +
mov dword ptr [esp+0ECh+var_E8+4] eax +
call sub_401740  +
mov ecx 7Ch +
mov eax ebp +
lea edx [esp+0ECh+var_BC] +
call sub_428D00  +
mov ecx 2 +
mov eax ebp +
lea edx [esp+29h] +
call sub_428E40  +
test eax eax +
js loc_42AACE  +
movzx eax byte ptr [esp+0ECh+var_C4+1] +
cmp al 41h +
jz loc_42AC57  +
cmp ds:dword_486580 1 +
jle loc_42AAAD  +
mov eax ds:_iob +
mov [esp+0ECh+var_EC] 0Ah +
add eax 40h +
mov dword ptr [esp+0ECh+var_E8] eax +
call putc  +
movzx eax byte ptr [esp+0ECh+var_C4+1] +
mov dword ptr [esp+0ECh+var_E0] eax +
mov eax ds:dword_486584 +
mov dword ptr [esp+0ECh+var_E8] offset aSJtagmki_set_2 +
mov [esp+0ECh+var_EC] 0 +
mov dword ptr [esp+0ECh+var_E8+4] eax +
call sub_401740  +
mov eax [ebp+0A5Ch] +
mov edx 88h +
movzx ecx byte ptr [eax+0Ch] +
mov eax ebp +
call sub_4290B0  +
mov eax [ebp+0A5Ch] +
mov edx 89h +
movzx ecx byte ptr [eax+0Dh] +
mov eax ebp +
call sub_4290B0  +
mov eax [ebp+0A5Ch] +
mov edx 8Ah +
movzx ecx byte ptr [eax+18h] +
mov eax ebp +
call sub_4290B0  +
mov eax [ebp+0A5Ch] +
mov eax [eax+4] +
mov [esp+0ECh+var_EC] eax +
call free  +
mov eax [ebp+0A5Ch] +
mov eax [eax+10h] +
mov [esp+0ECh+var_EC] eax +
call free  +
mov ebx [ebp+0A5Ch] +
mov eax [ebx+0Ch] +
mov [esp+0ECh+var_EC] eax +
call malloc  +
test eax eax +
mov [ebx+4] eax +
jz loc_42ADE0  +
mov eax [ebx+18h] +
mov [esp+0ECh+var_EC] eax +
call malloc  +
test eax eax +
mov [ebx+10h] eax +
jz loc_42AE07  +
mov eax ds:dword_486584 +
mov dword ptr [ebx+14h] 0FFFFFFFFh +
mov dword ptr [ebx+8] 0FFFFFFFFh +
mov dword ptr [esp+0ECh+var_E8] offset aSJtagmki_reset +
mov dword ptr [esp+0ECh+var_E8+4] eax +
mov [esp+0ECh+var_EC] 2 +
mov byte ptr [esp+0ECh+var_C4+1] 78h +
call sub_401740  +
mov ecx 1 +
mov eax ebp +
lea edx [esp+0ECh+var_C4+1] +
call sub_428D00  +
mov ecx 2 +
mov eax ebp +
lea edx [esp+0ECh+var_BC] +
call sub_428E40  +
test eax eax +
js loc_42AD10  +
movzx eax byte ptr [esp+0ECh+var_BC] +
cmp al 41h +
jnz loc_42ACC9  +
cmp ds:dword_486580 2 +
jz loc_42ACB0  +
mov eax 65h +
mov [esp+0ECh+var_B8] ax +
lea eax [esp+0ECh+var_C4] +
mov dword ptr [esp+0ECh+var_E0+4] eax +
lea eax [esp+0ECh+var_BC] +
mov dword ptr [esp+0ECh+var_E8+4] eax +
mov eax [esp+0ECh+arg_4] +
mov dword ptr [esp+0ECh+var_E0] 1 +
mov [esp+0ECh+var_EC] ebp +
mov [esp+0ECh+var_BC] 73756668h +
mov dword ptr [esp+0ECh+var_E8] eax +
call sub_42A360  +
test eax eax +
js loc_42AD10  +
xor ebx ebx +
cmp byte ptr [esp+0ECh+var_C4] 0 +
js loc_42AC80  +
add esp 0ECh +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp ds:dword_486580 2 +
jnz loc_42A953  +
mov dword ptr [esp+0ECh+var_E8] offset aOk_2 +
mov [esp+0ECh+var_EC] 2 +
call sub_401740  +
jmp loc_42A953  +
cmp ds:dword_486580 2 +
jnz loc_42AACE  +
mov dword ptr [esp+0ECh+var_E8] offset aOk_2 +
mov [esp+0ECh+var_EC] 2 +
call sub_401740  +
jmp loc_42AACE  +
mov eax ds:dword_486584 +
mov dword ptr [esp+0ECh+var_E8] offset aSJtagmki_ini_2 +
mov [esp+0ECh+var_EC] 0 +
mov dword ptr [esp+0ECh+var_E8+4] eax +
call sub_401740  +
add esp 0ECh +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov dword ptr [esp+0ECh+var_E8] offset aOk_2 +
mov [esp+0ECh+var_EC] 2 +
call sub_401740  +
jmp loc_42ABD6  +
cmp ds:dword_486580 1 +
jle loc_42ACEF  +
mov eax ds:_iob +
mov [esp+0ECh+var_EC] 0Ah +
add eax 40h +
mov dword ptr [esp+0ECh+var_E8] eax +
call putc  +
movzx eax byte ptr [esp+0ECh+var_BC] +
mov dword ptr [esp+0ECh+var_E0] eax +
mov eax ds:dword_486584 +
mov dword ptr [esp+0ECh+var_E8] offset aSJtagmki_res_4 +
mov [esp+0ECh+var_EC] 0 +
mov dword ptr [esp+0ECh+var_E8+4] eax +
call sub_401740  +
add esp 0ECh +
mov ebx 0FFFFFFFFh +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
xor edx edx +
movzx edx ds:byte_475E44[edx*8] +
test dl dl +
mov byte ptr [esp+0ECh+var_C4] dl +
jz loc_42A85C  +
mov dword ptr [esp+0ECh+var_E0] eax +
mov eax ds:dword_486584 +
mov dword ptr [esp+0ECh+var_E8] offset aSJtagmki_ini_3 +
mov [esp+0ECh+var_EC] 2 +
mov dword ptr [esp+0ECh+var_E8+4] eax +
call sub_401740  +
movzx ecx byte ptr [esp+0ECh+var_C4] +
mov edx 62h +
mov eax ebp +
call sub_4290B0  +
test eax eax +
jnz loc_42A880  +
mov edx [ebp+0A5Ch] +
mov eax [ebp+480h] +
mov [edx] eax +
mov edx off_461140 +
mov edx [edx+4] +
mov dword ptr [esp+0ECh+var_E8] eax +
mov [esp+0ECh+var_EC] ebx +
call edx  +
jmp loc_42A880  +
mov dword ptr [esp+0ECh+var_E0] eax +
mov eax ds:dword_486584 +
mov ebx 0FFFFFFFFh +
mov dword ptr [esp+0ECh+var_E8] offset aSJtagmki_ini_4 +
mov [esp+0ECh+var_EC] 0 +
mov dword ptr [esp+0ECh+var_E8+4] eax +
call sub_401740  +
jmp loc_42AC24  +
mov edx 2 +
jmp loc_42AD24  +
mov edx 1 +
jmp loc_42AD24  +
mov edx 3 +
jmp loc_42AD24  +
mov eax ds:dword_486584 +
mov ebx 0FFFFFFFFh +
mov dword ptr [esp+0ECh+var_E8] offset aSJtagmki_ini_5 +
mov [esp+0ECh+var_EC] 0 +
mov dword ptr [esp+0ECh+var_E8+4] eax +
call sub_401740  +
jmp loc_42AC24  +
mov eax ds:dword_486584 +
mov ebx 0FFFFFFFFh +
mov dword ptr [esp+0ECh+var_E8] offset aSJtagmki_ini_5 +
mov [esp+0ECh+var_EC] 0 +
mov dword ptr [esp+0ECh+var_E8+4] eax +
call sub_401740  +
mov eax [ebp+0A5Ch] +
mov eax [eax+4] +
mov [esp+0ECh+var_EC] eax +
call free  +
jmp loc_42AC24  +
***
sub esp 28h +
cmp dword ptr [eax+89Ch] 0FFFFFFFFh +
jz loc_42AEAB  +
mov eax ds:dword_486584 +
mov [esp+28h+var_24] offset aSJtagmki_pro_1 +
mov [esp+28h+var_28] 2 +
mov byte ptr [esp+28h+var_B] 0A4h +
mov [esp+28h+var_20] eax +
call sub_401740  +
mov ecx 1 +
mov eax ebx +
lea edx [esp+28h+var_B] +
call sub_428D00  +
mov ecx 2 +
mov eax ebx +
lea edx [esp+28h+var_B+1] +
call sub_428E40  +
test eax eax +
js loc_42AF24  +
movzx eax byte ptr [esp+28h+var_B+1] +
cmp al 41h +
jnz loc_42AED6  +
cmp ds:dword_486580 2 +
jz loc_42AEC0  +
mov eax [ebx+0A5Ch] +
mov dword ptr [eax+1Ch] 0 +
xor eax eax +
add esp 28h +
pop ebx  +
retn   +
mov [esp+28h+var_24] offset aOk_2 +
mov [esp+28h+var_28] 2 +
call sub_401740  +
jmp loc_42AEAB  +
cmp ds:dword_486580 1 +
jle loc_42AEFC  +
mov eax ds:_iob +
mov [esp+28h+var_28] 0Ah +
add eax 40h +
mov [esp+28h+var_24] eax +
call putc  +
movzx eax byte ptr [esp+28h+var_B+1] +
mov [esp+28h+var_1C] eax +
mov eax ds:dword_486584 +
mov [esp+28h+var_24] offset aSJtagmki_pro_2 +
mov [esp+28h+var_28] 0 +
mov [esp+28h+var_20] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_42AEBA  +
mov eax 0FFFFFFFFh +
jmp loc_42AEBA  +
***
mov ebx [esp+18h+arg_0] +
mov eax [ebx+0A5Ch] +
mov eax [eax+4] +
mov [esp+18h+var_18] eax +
call free  +
mov eax [ebx+0A5Ch] +
mov dword ptr [eax+4] 0 +
mov eax [eax+10h] +
mov [esp+18h+var_18] eax +
call free  +
mov eax [ebx+0A5Ch] +
mov dword ptr [eax+10h] 0 +
mov eax [eax+1Ch] +
test eax eax +
jnz loc_42AF80  +
add esp 18h +
pop ebx  +
retn   +
add esp 18h +
mov eax ebx +
pop ebx  +
jmp sub_42AE40  +
***
mov edi offset aFlash_12 +
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [esp+44h+arg_10] +
mov ebp [esp+44h+arg_C] +
mov [esp+44h+var_40] offset aSJtagmki_write +
mov ebx [esp+44h+arg_0] +
mov [esp+44h+var_44] 2 +
mov [esp+44h+var_28] eax +
mov eax [esp+44h+arg_8] +
mov [esp+44h+var_34] ebp +
mov [esp+44h+var_38] eax +
mov eax ds:dword_486584 +
mov [esp+44h+var_3C] eax +
call sub_401740  +
mov esi [esp+44h+arg_8] +
mov ecx 6 +
mov [esp+44h+var_1A] 57h +
cmps   +
jnz loc_42B0D5  +
mov eax [ebx+0A5Ch] +
mov [esp+44h+var_19] 0A0h +
mov edx [eax+1Ch] +
mov dword ptr [eax+8] 0FFFFFFFFh +
test edx edx +
jnz loc_42B104  +
cmp [esp+44h+var_19] 0A0h +
mov [esp+44h+var_18] 0 +
jz loc_42B184  +
mov eax ebp +
mov [esp+44h+var_15] al +
mov eax ebp +
shr eax 8 +
mov [esp+44h+var_16] al +
mov eax ebp +
shr eax 10h +
mov [esp+44h+var_17] al +
mov ecx 6 +
mov eax ebx +
lea edx [esp+44h+var_1A] +
call sub_428D00  +
mov ecx 1 +
mov eax ebx +
lea edx [esp+44h+var_1E] +
call sub_428E40  +
test eax eax +
js loc_42B113  +
movzx eax byte ptr [esp+44h+var_1E] +
cmp al 41h +
jnz loc_42B1E8  +
cmp ds:dword_486580 2 +
jz loc_42B260  +
cmp [esp+44h+var_19] 0A0h +
mov byte ptr [esp+44h+var_1E+1] 68h +
jz loc_42B1A3  +
movzx eax byte ptr [esp+44h+var_28] +
mov ecx 2 +
mov byte ptr [esp+44h+var_1E+2] al +
lea edx [esp+44h+var_1E+1] +
mov eax ebx +
call sub_428D00  +
mov ecx 1 +
mov eax ebx +
lea edx [esp+44h+var_1E] +
call sub_428E40  +
test eax eax +
js loc_42B113  +
movzx eax byte ptr [esp+44h+var_1E] +
cmp al 41h +
jnz loc_42B1E8  +
xor ebx ebx +
cmp ds:dword_486580 2 +
jz loc_42B240  +
add esp 3Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi [esp+44h+arg_8] +
mov edi offset aEeprom_9 +
mov ecx 7 +
cmps   +
jnz loc_42B122  +
mov eax [ebx+0A5Ch] +
mov [esp+44h+var_19] 22h +
mov edx [eax+1Ch] +
mov dword ptr [eax+14h] 0FFFFFFFFh +
test edx edx +
jz loc_42B008  +
mov eax ebx +
call sub_42AE40  +
test eax eax +
jns loc_42B008  +
mov ebx 0FFFFFFFFh +
add esp 3Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi [esp+44h+arg_8] +
mov edi offset aLfuse_7 +
mov ecx 6 +
cmps   +
jz loc_42B1C0  +
mov esi [esp+44h+arg_8] +
mov edi offset aHfuse_7 +
mov ecx 6 +
cmps   +
jnz loc_42B280  +
mov [esp+44h+var_19] 0B2h +
mov ebp 1 +
mov eax [ebx+0A5Ch] +
mov eax [eax+1Ch] +
test eax eax +
jnz loc_42B008  +
mov eax ebx +
call sub_429930  +
test eax eax +
js loc_42B113  +
cmp [esp+44h+var_19] 0A0h +
mov [esp+44h+var_18] 0 +
jnz loc_42B018  +
mov eax ebp +
shr eax 1 +
mov [esp+44h+var_15] al +
mov eax ebp +
shr eax 9 +
mov [esp+44h+var_16] al +
mov eax ebp +
shr eax 11h +
mov [esp+44h+var_17] al +
jmp loc_42B030  +
and ebp 1 +
jz loc_42B1D0  +
movzx eax byte ptr [esp+44h+var_28] +
mov ecx 3 +
mov byte ptr [esp+44h+var_1E+2] 0 +
mov byte ptr [esp+44h+var_1E+3] al +
jmp loc_42B090  +
mov [esp+44h+var_19] 0B2h +
xor ebp ebp +
jmp loc_42B158  +
movzx eax byte ptr [esp+44h+var_28] +
mov ecx 3 +
mov byte ptr [esp+44h+var_1E+3] 0 +
mov byte ptr [esp+44h+var_1E+2] al +
jmp loc_42B090  +
cmp ds:dword_486580 1 +
jle loc_42B20E  +
mov eax ds:_iob +
mov [esp+44h+var_44] 0Ah +
add eax 40h +
mov [esp+44h+var_40] eax +
call putc  +
movzx eax byte ptr [esp+44h+var_1E] +
mov [esp+44h+var_38] eax +
mov eax ds:dword_486584 +
mov ebx 0FFFFFFFFh +
mov [esp+44h+var_40] offset aSJtagmki_wri_0 +
mov [esp+44h+var_44] 0 +
mov [esp+44h+var_3C] eax +
call sub_401740  +
jmp loc_42B118  +
mov [esp+44h+var_40] offset aOk_2 +
mov [esp+44h+var_44] 2 +
call sub_401740  +
add esp 3Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+44h+var_40] offset aOk_2 +
mov [esp+44h+var_44] 2 +
call sub_401740  +
jmp loc_42B072  +
mov esi [esp+44h+arg_8] +
mov edi offset aEfuse_7 +
mov ecx 6 +
cmps   +
jz loc_42B2B0  +
mov esi [esp+44h+arg_8] +
mov edi offset aLock_4 +
mov ecx 5 +
cmps   +
jnz loc_42B2BF  +
mov [esp+44h+var_19] 0B3h +
jmp loc_42B158  +
mov [esp+44h+var_19] 0B2h +
mov ebp 2 +
jmp loc_42B158  +
mov esi [esp+44h+arg_8] +
mov edi offset aCalibration_1 +
mov ecx 0Ch +
cmps   +
jnz loc_42B2DB  +
mov [esp+44h+var_19] 0B5h +
jmp loc_42B158  +
mov esi [esp+44h+arg_8] +
mov edi offset aSignature_6 +
mov ecx 0Ah +
cmps   +
jnz loc_42B158  +
mov [esp+44h+var_19] 0B4h +
jmp loc_42B158  +
***
mov eax [esp+arg_0] +
mov dword ptr [eax+54h] 4741544Ah +
mov dword ptr [eax+58h] 494B4Dh +
mov dword ptr [eax+8C8h] offset sub_42A7C0 +
mov dword ptr [eax+8CCh] offset sub_4295E0 +
mov dword ptr [eax+8D0h] offset dword_428AC0 +
mov dword ptr [eax+8D4h] offset sub_42AF30 +
mov dword ptr [eax+8E0h] offset sub_428AB0 +
mov dword ptr [eax+8E4h] offset sub_429840 +
mov dword ptr [eax+8F8h] offset sub_429670 +
mov dword ptr [eax+8FCh] offset sub_429230 +
mov dword ptr [eax+914h] offset sub_42A360 +
mov dword ptr [eax+910h] offset sub_42AF90 +
mov dword ptr [eax+900h] offset sub_429E40 +
mov dword ptr [eax+904h] offset sub_429A20 +
mov dword ptr [eax+920h] offset sub_4295D0 +
mov dword ptr [eax+930h] offset sub_4291D0 +
mov dword ptr [eax+94Ch] offset sub_428DE0 +
mov dword ptr [eax+950h] offset loc_428AD0 +
mov dword ptr [eax+8B4h] 100h +
retn   +
***
retn   +
***
sub esp 1Ch +
mov eax ds:dword_486584 +
mov [esp+1Ch+var_18] offset aSChipEraseNo_0 +
mov [esp+1Ch+var_1C] 0 +
mov [esp+1Ch+var_14] eax +
call sub_401740  +
xor eax eax +
add esp 1Ch +
retn   +
***
push esi  +
push ebx  +
mov ebx eax +
sub esp 42Ch +
mov eax ds:dword_486584 +
mov [esp+42Ch+var_428] offset aSJtag3_edbg_pr +
lea ebp [esp+42Ch+var_40C] +
mov [esp+42Ch+var_42C] 3 +
mov [esp+42Ch+var_424] eax +
call sub_401740  +
cmp ds:dword_486580 3 +
jg loc_42B5D1  +
mov eax off_461140 +
lea esi [ebx+89Ch] +
mov edx [ebx+8ACh] +
mov byte ptr [esp+42Ch+var_40C] 2 +
mov byte ptr [esp+42Ch+var_40C+1] 1 +
mov eax [eax+0Ch] +
mov [esp+42Ch+var_424] edx +
mov [esp+42Ch+var_428] ebp +
mov [esp+42Ch+var_42C] esi +
call eax  +
test eax eax +
jnz loc_42B610  +
mov eax off_461140 +
lea edi [esp+42Ch+var_20C] +
mov edx [ebx+8ACh] +
mov eax [eax+10h] +
mov [esp+42Ch+var_424] edx +
mov [esp+42Ch+var_428] edi +
mov [esp+42Ch+var_42C] esi +
call eax  +
cmp [ebx+8ACh] eax +
jnz loc_42B5E1  +
movzx edx byte ptr [esp+42Ch+var_20C] +
movzx eax byte ptr [esp+42Ch+var_20C+1] +
cmp dl 2 +
jz loc_42B5B0  +
mov [esp+42Ch+var_41C] eax +
mov eax ds:dword_486584 +
mov [esp+42Ch+var_420] edx +
mov [esp+42Ch+var_428] offset aSJtag3_edbg_15 +
mov [esp+42Ch+var_42C] 0 +
mov [esp+42Ch+var_424] eax +
call sub_401740  +
movzx eax byte ptr [esp+42Ch+var_20C+1] +
mov [esp+42Ch+var_420] eax +
mov eax ds:dword_486584 +
mov [esp+42Ch+var_428] offset aSJtag3_edbg_16 +
mov [esp+42Ch+var_42C] 2 +
mov [esp+42Ch+var_424] eax +
call sub_401740  +
mov eax off_461140 +
mov edx [ebx+8ACh] +
mov byte ptr [esp+42Ch+var_40C] 1 +
mov byte ptr [esp+42Ch+var_40C+1] 0 +
mov byte ptr [esp+42Ch+var_40C+2] 1 +
mov eax [eax+0Ch] +
mov [esp+42Ch+var_428] ebp +
mov [esp+42Ch+var_424] edx +
mov [esp+42Ch+var_42C] esi +
call eax  +
test eax eax +
mov ebp eax +
jnz loc_42B610  +
mov eax off_461140 +
mov edx [ebx+8ACh] +
mov eax [eax+10h] +
mov [esp+42Ch+var_424] edx +
mov [esp+42Ch+var_428] edi +
mov [esp+42Ch+var_42C] esi +
call eax  +
cmp [ebx+8ACh] eax +
jnz loc_42B5E1  +
movzx eax byte ptr [esp+42Ch+var_20C] +
movzx edx byte ptr [esp+42Ch+var_20C+1] +
cmp al 1 +
jz loc_42B5C0  +
mov [esp+42Ch+var_420] eax +
mov eax ds:dword_486584 +
mov [esp+42Ch+var_41C] edx +
mov [esp+42Ch+var_428] offset aSJtag3_edbg_15 +
mov [esp+42Ch+var_42C] 0 +
mov [esp+42Ch+var_424] eax +
call sub_401740  +
add esp 42Ch +
mov eax ebp +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test al al +
jnz loc_42B4F1  +
jmp loc_42B4C4  +
test dl dl +
jnz loc_42B57D  +
add esp 42Ch +
mov eax ebp +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ecx 80h +
xor eax eax +
mov edi ebp +
stos   +
jmp loc_42B44A  +
mov [esp+42Ch+var_420] eax +
mov eax ds:dword_486584 +
mov ebp 0FFFFFFFFh +
mov [esp+42Ch+var_428] offset aSJtag3_edbg_17 +
mov [esp+42Ch+var_42C] 0 +
mov [esp+42Ch+var_424] eax +
call sub_401740  +
jmp loc_42B5A2  +
mov eax ds:dword_486584 +
mov ebp 0FFFFFFFFh +
mov [esp+42Ch+var_428] offset aSJtag3_edbg_18 +
mov [esp+42Ch+var_42C] 0 +
mov [esp+42Ch+var_424] eax +
call sub_401740  +
jmp loc_42B5A2  +
***
push esi  +
push ebx  +
mov ebx eax +
sub esp 42Ch +
mov eax ds:dword_486584 +
mov [esp+42Ch+var_428] offset aSJtag3_edbg_si +
lea ebp [esp+42Ch+var_40C] +
mov [esp+42Ch+var_42C] 3 +
mov [esp+42Ch+var_424] eax +
call sub_401740  +
cmp ds:dword_486580 3 +
jg loc_42B7D1  +
mov eax off_461140 +
lea esi [ebx+89Ch] +
mov edx [ebx+8ACh] +
mov byte ptr [esp+42Ch+var_40C] 1 +
mov byte ptr [esp+42Ch+var_40C+1] 0 +
mov byte ptr [esp+42Ch+var_40C+2] 0 +
mov eax [eax+0Ch] +
mov [esp+42Ch+var_424] edx +
mov [esp+42Ch+var_428] ebp +
mov [esp+42Ch+var_42C] esi +
call eax  +
test eax eax +
jnz loc_42B810  +
mov eax off_461140 +
lea edi [esp+42Ch+var_20C] +
mov edx [ebx+8ACh] +
mov eax [eax+10h] +
mov [esp+42Ch+var_424] edx +
mov [esp+42Ch+var_428] edi +
mov [esp+42Ch+var_42C] esi +
call eax  +
mov edx [ebx+8ACh] +
cmp edx eax +
jnz loc_42B7E1  +
movzx eax byte ptr [esp+42Ch+var_20C] +
movzx ecx byte ptr [esp+42Ch+var_20C+1] +
cmp al 1 +
jz loc_42B7B2  +
mov [esp+42Ch+var_420] eax +
mov eax ds:dword_486584 +
mov [esp+42Ch+var_41C] ecx +
mov [esp+42Ch+var_428] offset aSJtag3_edbg_12 +
mov [esp+42Ch+var_42C] 0 +
mov [esp+42Ch+var_424] eax +
call sub_401740  +
mov edx [ebx+8ACh] +
mov eax off_461140 +
mov byte ptr [esp+42Ch+var_40C] 3 +
mov eax [eax+0Ch] +
mov [esp+42Ch+var_428] ebp +
mov [esp+42Ch+var_424] edx +
mov [esp+42Ch+var_42C] esi +
call eax  +
test eax eax +
mov ebp eax +
jnz loc_42B810  +
mov eax off_461140 +
mov edx [ebx+8ACh] +
mov eax [eax+10h] +
mov [esp+42Ch+var_424] edx +
mov [esp+42Ch+var_428] edi +
mov [esp+42Ch+var_42C] esi +
call eax  +
cmp [ebx+8ACh] eax +
jnz loc_42B7E1  +
movzx eax byte ptr [esp+42Ch+var_20C] +
movzx edx byte ptr [esp+42Ch+var_20C+1] +
cmp al 3 +
jz loc_42B7C0  +
mov [esp+42Ch+var_420] eax +
mov eax ds:dword_486584 +
mov [esp+42Ch+var_41C] edx +
mov [esp+42Ch+var_428] offset aSJtag3_edbg_12 +
mov [esp+42Ch+var_42C] 0 +
mov [esp+42Ch+var_424] eax +
call sub_401740  +
add esp 42Ch +
mov eax ebp +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test cl cl +
jz loc_42B725  +
jmp loc_42B6FA  +
test dl dl +
jnz loc_42B780  +
add esp 42Ch +
mov eax ebp +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ecx 80h +
xor eax eax +
mov edi ebp +
stos   +
jmp loc_42B67A  +
mov [esp+42Ch+var_420] eax +
mov eax ds:dword_486584 +
mov ebp 0FFFFFFFFh +
mov [esp+42Ch+var_428] offset aSJtag3_edbg_13 +
mov [esp+42Ch+var_42C] 0 +
mov [esp+42Ch+var_424] eax +
call sub_401740  +
jmp loc_42B7A5  +
mov eax ds:dword_486584 +
mov ebp 0FFFFFFFFh +
mov [esp+42Ch+var_428] offset aSJtag3_edbg_14 +
mov [esp+42Ch+var_42C] 0 +
mov [esp+42Ch+var_424] eax +
call sub_401740  +
jmp loc_42B7A5  +
***
mov eax [esp+arg_0] +
mov eax [eax+0A5Ch] +
mov [esp+arg_0] eax +
jmp free  +
***
push esi  +
mov esi ecx +
push ebx  +
sub esp 44Ch +
cmp ds:dword_486580 3 +
mov [esp+450h+var_414] eax +
mov [esp+450h+var_428] edx +
jg loc_42BAA0  +
mov eax ds:dword_486584 +
mov [esp+450h+var_444] esi +
mov [esp+450h+var_44C] offset aSJtag3_edbg_se +
mov [esp+450h+var_450] 3 +
mov [esp+450h+var_448] eax +
call sub_401740  +
mov eax [esp+450h+var_414] +
xor edx edx +
mov eax [eax+8ACh] +
mov edi eax +
mov [esp+450h+var_430] eax +
lea eax [eax+esi-1] +
div  edi +
cmp eax 1 +
mov [esp+450h+var_424] eax +
jle loc_42BA25  +
mov [esp+450h+var_444] eax +
mov eax ds:dword_486584 +
mov [esp+450h+var_44C] offset aSJtag3_edbg__8 +
mov [esp+450h+var_450] 3 +
mov [esp+450h+var_448] eax +
call sub_401740  +
movzx eax byte ptr [esp+450h+var_424] +
xor ebp ebp +
mov [esp+450h+var_41D] al +
mov eax [esp+450h+var_414] +
add eax 89Ch +
mov [esp+450h+var_42C] eax +
lea eax [esp+450h+var_410] +
mov [esp+450h+var_41C] eax +
mov eax [esp+450h+var_430] +
sub eax 4 +
mov [esp+450h+var_418] eax +
jmp loc_42B954  +
movzx edx byte ptr [esp+450h+var_210+1] +
mov [esp+450h+var_444] eax +
mov eax ds:dword_486584 +
mov [esp+450h+var_440] edx +
mov [esp+450h+var_44C] offset aSJtag3_edbg__9 +
mov [esp+450h+var_450] 0 +
mov [esp+450h+var_448] eax +
call sub_401740  +
add [esp+450h+var_428] ebx +
sub esi ebx +
cmp [esp+450h+var_424] edi +
jz loc_42BA31  +
mov ebp edi +
lea edi [ebp+1] +
mov eax edi +
shl eax 4 +
or al [esp+450h+var_41D] +
test ebp ebp +
mov byte ptr [esp+450h+var_410] 80h +
mov byte ptr [esp+450h+var_410+1] al +
jz loc_42BABF  +
mov ebx [esp+450h+var_418] +
cmp esi ebx +
cmovbe ebx esi +
mov eax ebx +
sar eax 8 +
mov byte ptr [esp+450h+var_410+2] al +
mov eax [esp+450h+var_428] +
mov [esp+450h+var_448] ebx +
mov byte ptr [esp+450h+var_410+3] bl +
mov [esp+450h+var_44C] eax +
lea eax [esp+450h+var_40C] +
mov [esp+450h+var_450] eax +
call memcpy  +
mov ecx [esp+450h+var_430] +
mov eax off_461140 +
mov eax [eax+0Ch] +
mov [esp+450h+var_448] ecx +
mov ecx [esp+450h+var_41C] +
mov [esp+450h+var_44C] ecx +
mov ecx [esp+450h+var_42C] +
mov [esp+450h+var_450] ecx +
call eax  +
test eax eax +
jnz loc_42BA40  +
mov edx [esp+450h+var_430] +
mov eax off_461140 +
mov ecx [esp+450h+var_42C] +
mov eax [eax+10h] +
mov [esp+450h+var_448] edx +
lea edx [esp+240h] +
mov [esp+450h+var_44C] edx +
mov [esp+450h+var_450] ecx +
call eax  +
test eax eax +
js loc_42BA70  +
movzx eax byte ptr [esp+450h+var_210] +
cmp al 80h +
jnz loc_42B915  +
mov edx [esp+450h+var_424] +
sub edx 1 +
cmp edx ebp +
jnz loc_42B942  +
movzx edx byte ptr [esp+450h+var_210+1] +
cmp dl 1 +
jnz loc_42B91D  +
jmp loc_42B942  +
mov eax [esp+450h+var_424] +
test eax eax +
jg loc_42B8E8  +
add esp 44Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ds:dword_486584 +
mov [esp+450h+var_44C] offset aSJtag3_edbg_10 +
mov [esp+450h+var_450] 0 +
mov [esp+450h+var_448] eax +
call sub_401740  +
add esp 44Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ds:dword_486584 +
mov [esp+450h+var_44C] offset aSJtag3_edbg_11 +
mov [esp+450h+var_450] 2 +
mov [esp+450h+var_448] eax +
call sub_401740  +
add esp 44Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
xor eax eax +
mov ecx 80h +
lea edi [esp+450h+var_410] +
stos   +
lea edx [esp+450h+var_210] +
mov edi edx +
mov cl 80h +
stos   +
jmp loc_42B881  +
mov eax [esp+450h+var_430] +
mov byte ptr [esp+450h+var_40C] 0Eh +
mov edx [esp+450h+var_428] +
mov byte ptr [esp+450h+var_40C+1] 0 +
lea ebx [eax-8] +
cmp esi ebx +
cmovbe ebx esi +
lea eax [ebx+4] +
sar eax 8 +
mov byte ptr [esp+450h+var_410+2] al +
lea eax [ebx+4] +
mov byte ptr [esp+450h+var_410+3] al +
mov eax [esp+450h+var_414] +
mov eax [eax+0A5Ch] +
movzx eax word ptr [eax] +
mov [esp+450h+var_448] ebx +
mov [esp+450h+var_44C] edx +
mov byte ptr [esp+450h+var_40C+2] al +
shr ax 8 +
mov byte ptr [esp+450h+var_40C+3] al +
lea eax [esp+450h+var_408] +
mov [esp+450h+var_450] eax +
call memcpy  +
jmp loc_42B99F  +
***
push esi  +
push ebx  +
sub esp 4Ch +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_4C] eax +
call sub_406F20  +
mov [esp+4Ch+var_20] 0 +
test eax eax +
mov ebx eax +
jnz loc_42BBB6  +
jmp loc_42BC0B  +
lea eax [esp+4Ch+var_10] +
mov [esp+4Ch+var_38] eax +
lea eax [esp+4Ch+var_14] +
mov [esp+4Ch+var_3C] eax +
lea eax [esp+4Ch+var_18] +
mov [esp+4Ch+var_40] eax +
lea eax [esp+4Ch+var_1C] +
mov [esp+4Ch+var_44] eax +
mov [esp+4Ch+var_48] offset aJtagchainUUU_0 +
mov [esp+4Ch+var_4C] ebp +
call sscanf  +
cmp eax 4 +
jz loc_42BC17  +
mov eax ds:dword_486584 +
mov [esp+4Ch+var_40] ebp +
mov [esp+4Ch+var_48] offset aSJtag3_parseex +
mov [esp+4Ch+var_4C] 0 +
mov [esp+4Ch+var_44] eax +
call sub_401740  +
mov [esp+4Ch+var_20] 0FFFFFFFFh +
mov [esp+4Ch+var_4C] ebx +
call sub_406F40  +
test eax eax +
mov ebx eax +
jz loc_42BC0B  +
mov [esp+4Ch+var_4C] ebx +
mov edi offset aJtagchain_0 +
call sub_406F60  +
mov ecx 0Ah +
mov esi eax +
mov ebp eax +
cmps   +
jz loc_42BB46  +
mov [esp+4Ch+var_40] eax +
mov eax ds:dword_486584 +
mov [esp+4Ch+var_48] offset aSJtag3_parse_0 +
mov [esp+4Ch+var_4C] 0 +
mov [esp+4Ch+var_44] eax +
call sub_401740  +
mov [esp+4Ch+var_4C] ebx +
mov [esp+4Ch+var_20] 0FFFFFFFFh +
call sub_406F40  +
test eax eax +
mov ebx eax +
jnz loc_42BBB6  +
mov eax [esp+4Ch+var_20] +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+4Ch+var_10] +
mov [esp+4Ch+var_40] offset byte_4865A0 +
mov [esp+4Ch+var_48] offset aSJtag3_parse_1 +
mov [esp+4Ch+var_4C] 2 +
mov [esp+4Ch+var_30] eax +
mov eax [esp+4Ch+var_14] +
mov [esp+4Ch+var_34] eax +
mov eax [esp+4Ch+var_18] +
mov [esp+4Ch+var_38] eax +
mov eax [esp+4Ch+var_1C] +
mov [esp+4Ch+var_3C] eax +
mov eax ds:dword_486584 +
mov [esp+4Ch+var_44] eax +
call sub_401740  +
mov eax [esp+4Ch+arg_0] +
mov edx [eax+0A5Ch] +
mov eax [esp+4Ch+var_1C] +
mov [edx+20h] al +
mov eax [esp+4Ch+arg_0] +
mov edx [eax+0A5Ch] +
mov eax [esp+4Ch+var_18] +
mov [edx+21h] al +
mov eax [esp+4Ch+arg_0] +
mov edx [eax+0A5Ch] +
mov eax [esp+4Ch+var_14] +
mov [edx+22h] al +
mov eax [esp+4Ch+arg_0] +
mov edx [eax+0A5Ch] +
mov eax [esp+4Ch+var_10] +
mov [edx+23h] al +
jmp loc_42BBA8  +
***
sub esp 3Ch +
fld  ds:dbl_477430 +
fdiv  [esp+3Ch+arg_4] +
fnstcw  [esp+3Ch+var_1E] +
mov ecx [esp+3Ch+arg_0] +
movzx eax [esp+3Ch+var_1E] +
mov ah 0Ch +
mov [esp+3Ch+var_20] ax +
fldcw  [esp+3Ch+var_20] +
fistp  [esp+3Ch+var_2C] +
fldcw  [esp+3Ch+var_1E] +
mov eax dword ptr [esp+3Ch+var_2C] +
mov byte ptr [esp+3Ch+var_E] al +
shr eax 8 +
mov byte ptr [esp+3Ch+var_E+1] al +
mov eax [ecx+0A5Ch] +
mov eax [eax+28h] +
test eax eax +
jz loc_42BD0D  +
lea edx [esp+3Ch+var_E] +
mov [esp+3Ch+var_38] edx +
mov [esp+3Ch+var_3C] ecx +
call eax  +
sar eax 1Fh +
add esp 3Ch +
retn   +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_38] offset aSNoBackendToSe +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_42BD09  +
***
jmp sub_42BD40  +
***
mov [esp+18h+var_18] 2Ch +
call malloc  +
mov edx eax +
mov eax [esp+18h+arg_0] +
test edx edx +
mov [eax+0A5Ch] edx +
jz loc_42BD70  +
mov ecx 0Bh +
xor eax eax +
mov edi edx +
stos   +
add esp 18h +
pop edi  +
retn   +
mov eax ds:dword_486584 +
mov [esp+18h+var_14] offset aSJtag3_setupOu +
mov [esp+18h+var_18] 0 +
mov [esp+18h+var_10] eax +
call sub_401740  +
mov [esp+18h+var_18] 1 +
call exit  +
***
push esi  +
mov edi eax +
push ebx  +
xor ebx ebx +
sub esp 10h +
cmp edx 1 +
mov esi edx +
ja loc_42BDD1  +
jmp loc_42BE1D  +
add eax 40h +
add ebx 1 +
mov [esp+18h+var_14] eax +
mov [esp+18h+var_18] 20h +
call putc  +
cmp ebx esi +
mov ecx ebx +
jz loc_42BE18  +
movzx eax byte ptr [edi+ecx] +
mov [esp+18h+var_14] offset a0x02x_3 +
mov [esp+18h+var_18] 0 +
mov [esp+18h+var_10] eax +
call sub_401740  +
mov eax ebx +
and eax 0Fh +
cmp eax 0Fh +
mov eax ds:_iob +
jnz loc_42BDB5  +
add eax 40h +
add ebx 1 +
mov [esp+18h+var_14] eax +
mov [esp+18h+var_18] 0Ah +
call putc  +
cmp ebx esi +
mov ecx ebx +
jnz loc_42BDD1  +
and ebx 0Fh +
jnz loc_42BE24  +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov eax ds:_iob +
mov [esp+18h+var_18] 0Ah +
add eax 40h +
mov [esp+18h+var_14] eax +
call putc  +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
push edi  +
push esi  +
push ebx  +
mov ebx [esp+0Ch+arg_0] +
jz loc_42BE70  +
mov eax [eax] +
mov edx [eax+24h] +
mov eax ebx +
sub eax edx +
cmp ebx edx +
cmovb eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
and dh 20h +
mov eax ebx +
jz loc_42BE6B  +
mov ebp ecx +
mov edi offset aFuses +
mov ecx 6 +
mov esi ebp +
cmps   +
jz loc_42BEB0  +
mov edi offset aFuse_6 +
mov ecx 4 +
mov esi ebp +
cmps   +
jnz loc_42BEA0  +
mov eax [ebp+50h] +
jmp loc_42BE6B  +
mov edi offset aFlash_13 +
mov ecx 6 +
mov esi ebp +
cmps   +
jz loc_42BE6B  +
mov eax [ebp+50h] +
add eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov esi [esp+2Ch+arg_0] +
mov edx [esp+2Ch+arg_4] +
mov edi [esp+2Ch+arg_8] +
test byte ptr [esi+0A60h] 8 +
jnz loc_42BF80  +
mov eax ds:dword_486584 +
lea ebp [edi+4] +
mov [esp+2Ch+var_20] edi +
mov [esp+2Ch+var_28] offset aSJtag3_sendSen +
mov [esp+2Ch+var_2C] 3 +
mov [esp+2Ch+var_24] eax +
mov [esp+2Ch+var_10] edx +
call sub_401740  +
mov [esp+2Ch+var_2C] ebp +
call malloc  +
mov edx [esp+2Ch+var_10] +
test eax eax +
mov ebx eax +
jz loc_42BFB4  +
mov byte ptr [eax] 0Eh +
add esi 89Ch +
mov byte ptr [eax+1] 0 +
mov eax [esi+1C0h] +
movzx eax word ptr [eax] +
mov [esp+2Ch+var_28] edx +
mov [esp+2Ch+var_24] edi +
mov [ebx+2] al +
shr ax 8 +
mov [ebx+3] al +
lea eax [ebx+4] +
mov [esp+2Ch+var_2C] eax +
call memcpy  +
mov eax off_461140 +
mov eax [eax+0Ch] +
mov [esp+2Ch+var_2C] esi +
mov [esp+2Ch+var_24] ebp +
mov [esp+2Ch+var_28] ebx +
call eax  +
test eax eax +
mov esi eax +
jnz loc_42BF90  +
mov [esp+2Ch+var_2C] ebx +
call free  +
add esp 2Ch +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add esp 2Ch +
mov ecx edi +
pop ebx  +
mov eax esi +
pop esi  +
pop edi  +
pop ebp  +
jmp sub_42B860  +
mov eax ds:dword_486584 +
mov esi 0FFFFFFFFh +
mov [esp+2Ch+var_28] offset aSJtag3_sendFai +
mov [esp+2Ch+var_2C] 0 +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
jmp loc_42BF74  +
mov eax ds:dword_486584 +
mov esi 0FFFFFFFFh +
mov [esp+2Ch+var_28] offset aSJtag3_sendOut +
mov [esp+2Ch+var_2C] 0 +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
jmp loc_42BF74  +
***
push esi  +
push ebx  +
sub esp 3Ch +
mov edi [esp+3Ch+arg_0] +
lea eax [edi+89Ch] +
mov [esp+3Ch+var_1C] eax +
jmp loc_42C092  +
mov [esp+3Ch+var_38] offset aSJtag3_recv +
mov [esp+3Ch+var_3C] 4 +
call sub_401740  +
mov esi [edi+8ACh] +
mov [esp+3Ch+var_3C] esi +
call malloc  +
test eax eax +
mov ebx eax +
jz loc_42C84D  +
cmp ds:dword_486580 3 +
jg loc_42C3F0  +
mov eax off_461140 +
mov ecx [esp+3Ch+var_1C] +
mov eax [eax+10h] +
mov [esp+3Ch+var_34] esi +
mov [esp+3Ch+var_38] ebx +
mov [esp+3Ch+var_3C] ecx +
call eax  +
test eax eax +
js loc_42C7F2  +
mov esi [esp+3Ch+arg_4] +
mov ebp eax +
mov [esi] ebx +
test ebp ebp +
jle loc_42C23B  +
test ebp 1000h +
jz loc_42C2B0  +
mov eax ds:dword_486580 +
cmp eax 2 +
jg loc_42C330  +
mov eax [esp+3Ch+arg_4] +
mov eax [eax] +
mov [esp+3Ch+var_3C] eax +
call free  +
mov eax ds:dword_486584 +
test byte ptr [edi+0A60h] 8 +
mov [esp+3Ch+var_34] eax +
jz loc_42C000  +
mov [esp+3Ch+var_38] offset aSJtag3_edbg_re +
mov [esp+3Ch+var_3C] 4 +
call sub_401740  +
mov [esp+3Ch+var_3C] 200h +
call malloc  +
test eax eax +
mov ebp eax +
jz loc_42C826  +
mov eax [edi+8ACh] +
mov [esp+3Ch+var_3C] eax +
call malloc  +
test eax eax +
mov [esp+3Ch+var_10] eax +
jz loc_42C86C  +
mov eax [esp+3Ch+arg_4] +
xor ebx ebx +
mov [esp+3Ch+var_18] 0 +
mov [esp+3Ch+var_20] 0 +
mov [eax] ebp +
jmp loc_42C176  +
mov ecx edx +
mov bl 1 +
and ecx 0Fh +
mov [esp+3Ch+var_18] ecx +
shr dl 4 +
movzx esi dl +
cmp esi ebx +
jnz loc_42C4A0  +
movzx edx byte ptr [ebp+2] +
movzx ebx byte ptr [ebp+3] +
shl edx 8 +
or edx ebx +
lea ebx [eax+4] +
cmp edx ebx +
jg loc_42C284  +
mov eax [esp+3Ch+var_20] +
add eax edx +
cmp eax 200h +
jg loc_42C245  +
mov [esp+3Ch+var_20] eax +
lea eax [ebp+4] +
mov [esp+3Ch+var_34] edx +
lea ebx [esi+1] +
mov [esp+3Ch+var_3C] ebp +
mov [esp+3Ch+var_38] eax +
mov [esp+3Ch+var_14] edx +
call memmove  +
mov edx [esp+3Ch+var_14] +
add ebp edx +
cmp ebx [esp+3Ch+var_18] +
jg loc_42C4C0  +
mov ecx [esp+3Ch+var_10] +
mov eax off_461140 +
mov esi [esp+3Ch+var_1C] +
mov byte ptr [ecx] 81h +
mov edx [edi+8ACh] +
mov eax [eax+0Ch] +
mov [esp+3Ch+var_38] ecx +
mov [esp+3Ch+var_3C] esi +
mov [esp+3Ch+var_34] edx +
call eax  +
test eax eax +
jnz loc_42C410  +
mov eax off_461140 +
mov edx [edi+8ACh] +
mov ecx [esp+3Ch+var_1C] +
mov eax [eax+10h] +
mov [esp+3Ch+var_34] edx +
mov [esp+3Ch+var_38] ebp +
mov [esp+3Ch+var_3C] ecx +
call eax  +
test eax eax +
js loc_42C456  +
movzx edx byte ptr [ebp+0] +
cmp dl 81h +
jnz loc_42C478  +
test ebx ebx +
movzx edx byte ptr [ebp+1] +
jz loc_42C106  +
mov esi edx +
and esi 0Fh +
cmp esi [esp+3Ch+var_18] +
jz loc_42C111  +
mov eax [esp+3Ch+var_18] +
mov [esp+3Ch+var_2C] esi +
mov [esp+3Ch+var_38] offset aSJtag3_edbg__0 +
mov [esp+3Ch+var_30] eax +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_34] eax +
mov [esp+3Ch+var_3C] 0 +
call sub_401740  +
mov eax [esp+3Ch+arg_4] +
mov ebp 0FFFFFFFFh +
mov eax [eax] +
mov [esp+3Ch+var_3C] eax +
call free  +
mov eax [esp+3Ch+var_10] +
mov [esp+3Ch+var_3C] eax +
call free  +
add esp 3Ch +
mov eax ebp +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+3Ch+var_30] eax +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_2C] 200h +
mov [esp+3Ch+var_38] offset aSJtag3_edbg__1 +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov edx 200h +
sub edx [esp+3Ch+var_20] +
mov [esp+3Ch+var_20] 200h +
jmp loc_42C14C  +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_30] edx +
mov [esp+3Ch+var_2C] ebx +
mov [esp+3Ch+var_38] offset aSJtag3_edbg__2 +
mov [esp+3Ch+var_34] eax +
mov [esp+3Ch+var_3C] 0 +
call sub_401740  +
mov edx ebx +
jmp loc_42C137  +
mov eax [esp+3Ch+arg_4] +
mov edx [eax] +
movzx eax byte ptr [edx+2] +
movzx ebx byte ptr [edx+1] +
shl eax 8 +
or ebx eax +
mov eax [edi+0A5Ch] +
movzx esi bx +
movzx eax word ptr [eax] +
mov [esp+3Ch+var_30] esi +
mov [esp+3Ch+var_38] offset aSJtag3_recvGot +
mov [esp+3Ch+var_3C] 3 +
mov [esp+3Ch+var_2C] eax +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov ecx [edi+0A5Ch] +
movzx eax word ptr [ecx] +
cmp ax bx +
jz loc_42C6E9  +
mov [esp+3Ch+var_2C] eax +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_30] esi +
mov [esp+3Ch+var_38] offset aSJtag3_recvG_0 +
mov [esp+3Ch+var_3C] 2 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
jmp loc_42C084  +
mov esi [esp+3Ch+arg_4] +
mov ecx ebp +
and ecx 0FFFh +
cmp eax 3 +
mov [esp+3Ch+var_20] ecx +
mov esi [esi] +
jnz loc_42C4D5  +
movzx eax byte ptr [esi+3] +
movzx edx byte ptr [esi+2] +
mov [esp+3Ch+var_38] offset aEventSerial0x0 +
mov [esp+3Ch+var_3C] 0 +
shl eax 8 +
or eax edx +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
movzx eax byte ptr [esi+4] +
cmp al 1 +
jz loc_42C690  +
jb loc_42C6D0  +
cmp al 12h +
jnz loc_42C6B0  +
mov [esp+3Ch+var_38] offset aAvr_0 +
mov [esp+3Ch+var_3C] 0 +
call sub_401740  +
movzx eax byte ptr [esi+5] +
cmp al 11h +
jz loc_42C621  +
cmp al 40h +
jz loc_42C590  +
cmp al 10h +
jz loc_42C655  +
mov [esp+3Ch+var_34] eax +
mov [esp+3Ch+var_38] offset aUnknown0x02x_0 +
mov [esp+3Ch+var_3C] 0 +
call sub_401740  +
mov eax ds:_iob +
mov [esp+3Ch+var_3C] 0Ah +
add eax 40h +
mov [esp+3Ch+var_38] eax +
call putc  +
jmp loc_42C084  +
mov [esp+3Ch+var_34] esi +
mov [esp+3Ch+var_38] 0 +
mov [esp+3Ch+var_3C] eax +
call memset  +
mov esi [edi+8ACh] +
jmp loc_42C039  +
mov eax ds:dword_486584 +
mov ebp 0FFFFFFFFh +
mov [esp+3Ch+var_38] offset aSJtag3_edbg__3 +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov eax [esp+3Ch+var_10] +
mov [esp+3Ch+var_3C] eax +
call free  +
mov eax [esp+3Ch+arg_4] +
mov eax [eax] +
mov [esp+3Ch+var_3C] eax +
call free  +
add esp 3Ch +
mov eax ebp +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_38] offset aSJtag3_edbg__4 +
mov [esp+3Ch+var_3C] 2 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
jmp loc_42C21C  +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_30] edx +
mov [esp+3Ch+var_38] offset aSJtag3_edbg__5 +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
jmp loc_42C21C  +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_2C] esi +
mov [esp+3Ch+var_30] ebx +
mov [esp+3Ch+var_38] offset aSJtag3_edbg__6 +
mov [esp+3Ch+var_34] eax +
jmp loc_42C210  +
mov eax [esp+3Ch+var_10] +
mov [esp+3Ch+var_3C] eax +
call free  +
mov ebp [esp+3Ch+var_20] +
jmp loc_42C062  +
mov [esp+3Ch+var_38] offset aRawEvent +
mov [esp+3Ch+var_3C] 4 +
call sub_401740  +
mov ecx [esp+3Ch+var_20] +
test ecx ecx +
jz loc_42C34B  +
mov [esp+3Ch+var_18] ebp +
xor ebx ebx +
xor eax eax +
mov ebp ecx +
jmp loc_42C51D  +
add eax 40h +
add ebx 1 +
mov [esp+3Ch+var_38] eax +
mov [esp+3Ch+var_3C] 20h +
call putc  +
cmp ebx ebp +
mov eax ebx +
jz loc_42C564  +
movzx eax byte ptr [esi+eax] +
mov [esp+3Ch+var_38] offset a02x_9 +
mov [esp+3Ch+var_3C] 4 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov eax ebx +
and eax 0Fh +
cmp eax 0Fh +
mov eax ds:_iob +
jnz loc_42C501  +
add eax 40h +
add ebx 1 +
mov [esp+3Ch+var_38] eax +
mov [esp+3Ch+var_3C] 0Ah +
call putc  +
cmp ebx ebp +
mov eax ebx +
jnz loc_42C51D  +
mov ebp [esp+3Ch+var_18] +
and ebp 0Fh +
jz loc_42C34B  +
mov eax ds:_iob +
mov [esp+3Ch+var_3C] 0Ah +
add eax 40h +
mov [esp+3Ch+var_38] eax +
call putc  +
jmp loc_42C34B  +
mov [esp+3Ch+var_38] offset aBreak +
mov [esp+3Ch+var_3C] 0 +
call sub_401740  +
cmp [esp+3Ch+var_20] 0Ah +
jbe loc_42C3D2  +
movzx edx byte ptr [esi+7] +
movzx eax byte ptr [esi+8] +
movzx ecx byte ptr [esi+6] +
shl edx 8 +
shl eax 10h +
add edx eax +
movzx eax byte ptr [esi+9] +
add edx ecx +
mov [esp+3Ch+var_38] offset aPc0xLxReason_0 +
mov [esp+3Ch+var_3C] 0 +
shl eax 18h +
add eax edx +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
movzx eax byte ptr [esi+0Ah] +
cmp al 1 +
jz loc_42C7D9  +
jb loc_42C7C0  +
cmp al 2 +
jz loc_42C758  +
cmp al 3 +
jnz loc_42C7A3  +
mov [esp+3Ch+var_38] offset aDataBreakPdm_0 +
mov [esp+3Ch+var_3C] 0 +
call sub_401740  +
jmp loc_42C3D2  +
cmp [esp+3Ch+var_20] 7 +
jbe loc_42C63C  +
movzx eax byte ptr [esi+7] +
test al al +
jz loc_42C78A  +
cmp al 1 +
jz loc_42C726  +
mov [esp+3Ch+var_38] offset aUnknownSleepEv +
mov [esp+3Ch+var_3C] 0 +
call sub_401740  +
jmp loc_42C3D2  +
cmp [esp+3Ch+var_20] 7 +
jbe loc_42C670  +
movzx eax byte ptr [esi+7] +
test al al +
jz loc_42C771  +
cmp al 1 +
jz loc_42C73F  +
mov [esp+3Ch+var_38] offset aUnknownPowerEv +
mov [esp+3Ch+var_3C] 0 +
call sub_401740  +
jmp loc_42C3D2  +
mov [esp+3Ch+var_38] offset aGeneral +
mov [esp+3Ch+var_3C] 0 +
call sub_401740  +
jmp loc_42C39E  +
movzx eax byte ptr [esi] +
mov [esp+3Ch+var_38] offset aScope0x02x +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
jmp loc_42C39E  +
mov [esp+3Ch+var_38] offset aInfo_0 +
mov [esp+3Ch+var_3C] 0 +
call sub_401740  +
jmp loc_42C39E  +
add eax 1 +
xor ebx ebx +
cmp ax 0FFFFh +
mov edx ebp +
cmovnz ebx eax +
mov eax [esp+3Ch+arg_4] +
and edx 0FFFh +
lea ebp [edx-3] +
mov [ecx] bx +
mov eax [eax] +
mov [esp+3Ch+var_34] ebp +
lea edx [eax+3] +
mov [esp+3Ch+var_38] edx +
mov [esp+3Ch+var_3C] eax +
call memmove  +
add esp 3Ch +
mov eax ebp +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+3Ch+var_38] offset aWakeup +
mov [esp+3Ch+var_3C] 0 +
call sub_401740  +
jmp loc_42C3D2  +
mov [esp+3Ch+var_38] offset aPowerUp +
mov [esp+3Ch+var_3C] 0 +
call sub_401740  +
jmp loc_42C3D2  +
mov [esp+3Ch+var_38] offset aDataBreakPds_0 +
mov [esp+3Ch+var_3C] 0 +
call sub_401740  +
jmp loc_42C3D2  +
mov [esp+3Ch+var_38] offset aPowerDown +
mov [esp+3Ch+var_3C] 0 +
call sub_401740  +
jmp loc_42C3D2  +
mov [esp+3Ch+var_38] offset aSleeping +
mov [esp+3Ch+var_3C] 0 +
call sub_401740  +
jmp loc_42C3D2  +
mov [esp+3Ch+var_34] eax +
mov [esp+3Ch+var_38] offset aUnknown0x02x_1 +
mov [esp+3Ch+var_3C] 0 +
call sub_401740  +
jmp loc_42C3D2  +
mov [esp+3Ch+var_38] offset aUnspecified_0 +
mov [esp+3Ch+var_3C] 0 +
call sub_401740  +
jmp loc_42C3D2  +
mov [esp+3Ch+var_38] offset aProgramBreak_0 +
mov [esp+3Ch+var_3C] 0 +
call sub_401740  +
jmp loc_42C3D2  +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_38] offset aSJtag3_recvTim +
mov [esp+3Ch+var_3C] 2 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov [esp+3Ch+var_3C] ebx +
call free  +
add esp 3Ch +
mov ebp 0FFFFFFFFh +
pop ebx  +
mov eax ebp +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ds:dword_486584 +
mov ebp 0FFFFFFFFh +
mov [esp+3Ch+var_38] offset aSJtag3_edbg__7 +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
jmp loc_42C23B  +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_38] offset aSJtag3_recvOut +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
jmp loc_42C817  +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_38] offset aSJtag3_edbg__7 +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov [esp+3Ch+var_3C] ebp +
mov ebp 0FFFFFFFFh +
call free  +
jmp loc_42C23B  +
***
push esi  +
push ebx  +
sub esp 6Ch +
mov eax [esp+6Ch+arg_10] +
mov [esp+6Ch+var_68] offset aSSendingSComma +
mov ebx [esp+6Ch+arg_0] +
mov [esp+6Ch+var_6C] 2 +
mov edi [esp+6Ch+arg_C] +
mov [esp+6Ch+var_60] eax +
mov eax ds:dword_486584 +
mov [esp+6Ch+var_64] eax +
call sub_401740  +
mov eax [esp+6Ch+arg_8] +
mov [esp+6Ch+var_6C] ebx +
mov [esp+6Ch+var_64] eax +
mov eax [esp+6Ch+arg_4] +
mov [esp+6Ch+var_68] eax +
call sub_42BEC0  +
mov [esp+6Ch+var_68] edi +
mov [esp+6Ch+var_6C] ebx +
call sub_42BFE0  +
test eax eax +
mov esi eax +
jle loc_42CE20  +
cmp ds:dword_486580 2 +
jg loc_42C9A8  +
mov [esp+6Ch+var_60] eax +
mov eax [edi] +
movzx eax byte ptr [eax+1] +
mov [esp+6Ch+var_68] offset a0x02xDBytesM_0 +
mov [esp+6Ch+var_6C] 2 +
mov [esp+6Ch+var_64] eax +
call sub_401740  +
mov edx [edi] +
movzx eax byte ptr [edx+1] +
mov ecx eax +
and ecx 0FFFFFFE0h +
cmp cl 80h +
jz loc_42CC00  +
cmp al 0A0h +
jnz loc_42C962  +
cmp byte ptr [edx+3] 44h +
jz loc_42CD44  +
mov [esp+6Ch+var_5C] eax +
mov eax [esp+6Ch+arg_10] +
mov [esp+6Ch+var_68] offset aSBadResponseTo +
mov [esp+6Ch+var_6C] 0 +
mov [esp+6Ch+var_60] eax +
mov eax ds:dword_486584 +
mov [esp+6Ch+var_64] eax +
call sub_401740  +
mov edx [edi] +
movzx esi byte ptr [edx+3] +
mov [esp+6Ch+var_6C] edx +
call free  +
mov eax esi +
neg eax  +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ds:_iob +
mov [esp+6Ch+var_6C] 0Ah +
add eax 40h +
mov [esp+6Ch+var_68] eax +
call putc  +
mov ebp [edi] +
cmp ds:dword_486580 3 +
jg loc_42CC10  +
movzx eax byte ptr [ebp+0] +
cmp al 1 +
jz loc_42CD00  +
jb loc_42CCE0  +
cmp al 11h +
jz loc_42CA20  +
cmp al 12h +
jnz loc_42CCC0  +
mov [esp+6Ch+var_68] offset aAvr_0 +
mov [esp+6Ch+var_6C] 0 +
call sub_401740  +
movzx edx byte ptr [ebp+1] +
lea eax [edx-80h] +
cmp al 20h +
ja loc_42CBE0  +
movzx eax al +
jmp ds:off_476918[eax*4]  +
mov [esp+6Ch+var_68] offset aAvrisp +
mov [esp+6Ch+var_6C] 0 +
call sub_401740  +
lea edx [esi-1] +
lea eax [ebp+1] +
call sub_42BDA0  +
jmp loc_42C940  +
mov [esp+6Ch+var_68] offset aFailed_1 +
mov [esp+6Ch+var_6C] 0 +
call sub_401740  +
cmp esi 3 +
jbe loc_42CDA2  +
movzx eax byte ptr [ebp+3] +
lea ebx [esp+6Ch+var_3E] +
mov [esp+6Ch+var_68] offset a0x02x_3 +
mov [esp+6Ch+var_6C] ebx +
mov [esp+6Ch+var_64] eax +
call sprintf  +
movzx eax byte ptr [ebp+3] +
cmp al 22h +
jz loc_42CEDF  +
jbe loc_42CDC0  +
cmp al 34h +
jz loc_42CEB1  +
mov esi esi +
lea edi [edi+0] +
jbe loc_42CE77  +
cmp al 35h +
jz loc_42CF04  +
cmp al 91h +
jnz loc_42CAE1  +
mov ecx 646Fh +
mov dword ptr [ebx] 6D6D6F63h +
mov dword ptr [ebx+4] 20646E61h +
mov dword ptr [ebx+8] 20746F6Eh +
mov dword ptr [ebx+0Ch] 65646E75h +
mov dword ptr [ebx+10h] 6F747372h +
mov [ebx+14h] cx +
mov byte ptr [ebx+16h] 0 +
mov [esp+6Ch+var_64] ebx +
mov [esp+6Ch+var_68] offset aReasonS +
mov [esp+6Ch+var_6C] 0 +
call sub_401740  +
jmp loc_42C940  +
mov [esp+6Ch+var_68] offset aDataReturned +
mov [esp+6Ch+var_6C] 0 +
call sub_401740  +
lea edx [esi-2] +
lea eax [ebp+2] +
call sub_42BDA0  +
jmp loc_42C940  +
cmp esi 6 +
ja loc_42CD66  +
mov [esp+6Ch+var_68] offset aPcReplyTooShor +
mov [esp+6Ch+var_6C] 0 +
call sub_401740  +
jmp loc_42C940  +
mov [esp+6Ch+var_68] offset aInfoReturned +
mov ebx 2 +
mov [esp+6Ch+var_6C] 0 +
call sub_401740  +
cmp esi 2 +
mov eax 2 +
jbe loc_42CD27  +
mov [esp+6Ch+arg_C] edi +
jmp loc_42CB97  +
mov eax ds:_iob +
mov [esp+6Ch+var_6C] edi +
add eax 40h +
mov [esp+6Ch+var_68] eax +
call putc  +
add ebx 1 +
cmp ebx esi +
mov eax ebx +
jz loc_42CD20  +
movzx edi byte ptr [ebp+eax+0] +
mov [esp+6Ch+var_6C] edi +
call ds:isprint  +
test eax eax +
jnz loc_42CB76  +
mov [esp+6Ch+var_64] edi +
mov [esp+6Ch+var_68] offset a03o +
mov [esp+6Ch+var_6C] 0 +
call sub_401740  +
jmp loc_42CB8A  +
mov [esp+6Ch+var_68] offset aOk_0 +
mov [esp+6Ch+var_6C] 0 +
call sub_401740  +
jmp loc_42C940  +
mov [esp+6Ch+var_64] edx +
mov [esp+6Ch+var_68] offset aUnknownMessa_0 +
mov [esp+6Ch+var_6C] 0 +
call sub_401740  +
jmp loc_42C940  +
add esp 6Ch +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+6Ch+var_68] offset aRawMessage_0 +
xor ebx ebx +
mov [esp+6Ch+var_6C] 4 +
call sub_401740  +
xor eax eax +
jmp loc_42CC4C  +
add eax 40h +
add ebx 1 +
mov [esp+6Ch+var_68] eax +
mov [esp+6Ch+var_6C] 20h +
call putc  +
cmp ebx esi +
mov eax ebx +
jz loc_42CC94  +
movzx eax byte ptr [ebp+eax+0] +
mov [esp+6Ch+var_68] offset a02x_9 +
mov [esp+6Ch+var_6C] 4 +
mov [esp+6Ch+var_64] eax +
call sub_401740  +
mov eax ebx +
and eax 0Fh +
cmp eax 0Fh +
mov eax ds:_iob +
jnz loc_42CC30  +
add eax 40h +
add ebx 1 +
mov [esp+6Ch+var_68] eax +
mov [esp+6Ch+var_6C] 0Ah +
call putc  +
cmp ebx esi +
mov eax ebx +
jnz loc_42CC4C  +
test esi 0Fh +
jz loc_42C9CF  +
mov eax ds:_iob +
mov [esp+6Ch+var_6C] 0Ah +
add eax 40h +
mov [esp+6Ch+var_68] eax +
call putc  +
jmp loc_42C9CF  +
mov [esp+6Ch+var_64] eax +
mov [esp+6Ch+var_68] offset aScope0x02x +
mov [esp+6Ch+var_6C] 0 +
call sub_401740  +
jmp loc_42CA01  +
mov [esp+6Ch+var_68] offset aInfo_0 +
mov [esp+6Ch+var_6C] 0 +
call sub_401740  +
jmp loc_42CA01  +
mov [esp+6Ch+var_68] offset aGeneral +
mov [esp+6Ch+var_6C] 0 +
call sub_401740  +
jmp loc_42CA01  +
mov edi [esp+6Ch+arg_C] +
mov eax ds:_iob +
mov [esp+6Ch+var_6C] 0Ah +
add eax 40h +
mov [esp+6Ch+var_68] eax +
call putc  +
jmp loc_42C940  +
mov eax ds:dword_486584 +
mov [esp+6Ch+var_68] offset aSDeviceIsLocke +
mov [esp+6Ch+var_6C] 0 +
mov [esp+6Ch+var_64] eax +
call sub_401740  +
jmp loc_42C98E  +
movzx eax byte ptr [ebp+6] +
movzx edx byte ptr [ebp+5] +
shl eax 18h +
shl edx 10h +
or eax edx +
movzx edx byte ptr [ebp+3] +
or eax edx +
movzx edx byte ptr [ebp+4] +
mov [esp+6Ch+var_68] offset aPc0x0lx +
mov [esp+6Ch+var_6C] 0 +
shl edx 8 +
or eax edx +
mov [esp+6Ch+var_64] eax +
call sub_401740  +
jmp loc_42C940  +
mov [esp+6Ch+var_68] offset aUnspecifiedRea +
mov [esp+6Ch+var_6C] 0 +
call sub_401740  +
jmp loc_42C940  +
cmp al 1Bh +
jz loc_42CF76  +
cmp al 20h +
lea esi [esi+0] +
jz loc_42CF42  +
cmp al 10h +
jnz loc_42CAE1  +
mov eax 6465h +
mov dword ptr [ebx] 75626564h +
mov dword ptr [ebx+4] 52495767h +
mov dword ptr [ebx+8] 6F632045h +
mov dword ptr [ebx+0Ch] 6E756D6Dh +
mov dword ptr [ebx+10h] 74616369h +
mov dword ptr [ebx+14h] 206E6F69h +
mov dword ptr [ebx+18h] 6C696166h +
mov [ebx+1Ch] ax +
mov byte ptr [ebx+1Eh] 0 +
jmp loc_42CAE1  +
cmp ds:dword_486580 1 +
jle loc_42CE41  +
mov eax ds:_iob +
mov [esp+6Ch+var_6C] 0Ah +
add eax 40h +
mov [esp+6Ch+var_68] eax +
call putc  +
mov eax [esp+6Ch+arg_10] +
mov [esp+6Ch+var_5C] esi +
mov [esp+6Ch+var_68] offset aSSCommandTimeo +
mov [esp+6Ch+var_6C] 2 +
mov [esp+6Ch+var_60] eax +
mov eax ds:dword_486584 +
mov [esp+6Ch+var_64] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_42C9A0  +
cmp al 32h +
jnz loc_42CAE1  +
mov dword ptr [ebx] 6E6F7277h +
mov dword ptr [ebx+4] 70282067h +
mov dword ptr [ebx+8] 72676F72h +
mov dword ptr [ebx+0Ch] 696D6D61h +
mov dword ptr [ebx+10h] 2029676Eh +
mov dword ptr [ebx+14h] 65646F6Dh +
mov byte ptr [ebx+18h] 0 +
jmp loc_42CAE1  +
mov dword ptr [ebx] 75736E75h +
mov dword ptr [ebx+4] 726F7070h +
mov dword ptr [ebx+8] 20646574h +
mov dword ptr [ebx+0Ch] 6F6D656Dh +
mov dword ptr [ebx+10h] 74207972h +
mov dword ptr [ebx+14h] 657079h +
jmp loc_42CAE1  +
mov [esp+6Ch+var_3E] 74206F6Eh +
mov [esp+6Ch+var_3A] 65677261h +
mov [esp+6Ch+var_36] 6F702074h +
mov [esp+6Ch+var_32] 726577h +
jmp loc_42CAE1  +
mov edx 73h +
mov dword ptr [ebx] 6E6F7277h +
mov dword ptr [ebx+4] 656C2067h +
mov dword ptr [ebx+8] 6874676Eh +
mov dword ptr [ebx+0Ch] 206E6920h +
mov dword ptr [ebx+10h] 6F6D656Dh +
mov dword ptr [ebx+14h] 61207972h +
mov dword ptr [ebx+18h] 73656363h +
mov [ebx+1Ch] dx +
jmp loc_42CAE1  +
mov ebp 7265h +
mov dword ptr [ebx] 67726174h +
mov dword ptr [ebx+4] 64207465h +
mov dword ptr [ebx+8] 2073656Fh +
mov dword ptr [ebx+0Ch] 20746F6Eh +
mov dword ptr [ebx+10h] 77736E61h +
mov [ebx+14h] bp +
mov byte ptr [ebx+16h] 0 +
jmp loc_42CAE1  +
mov dword ptr [ebx] 20494450h +
mov dword ptr [ebx+4] 6C696166h +
mov dword ptr [ebx+8] 657275h +
jmp loc_42CAE1  +
***
push ebx  +
sub esp 30h +
mov eax ds:dword_486584 +
mov ebx [esp+30h+arg_0] +
lea edi [esp+30h+var_8] +
mov [esp+30h+var_2C] offset aSJtag3_close +
lea esi [esp+30h+var_4] +
mov [esp+30h+var_30] 2 +
mov [esp+30h+var_28] eax +
call sub_401740  +
mov [esp+30h+var_20] offset aAvrSignOff +
mov [esp+30h+var_24] edi +
mov [esp+30h+var_28] 3 +
mov [esp+30h+var_2C] esi +
mov [esp+30h+var_30] ebx +
mov byte ptr [esp+30h+var_4] 12h +
mov byte ptr [esp+30h+var_4+1] 11h +
mov byte ptr [esp+30h+var_4+3] 0 +
mov byte ptr [esp+30h+var_4+2] 0 +
call sub_42C8A0  +
test eax eax +
js loc_42D003  +
mov eax [esp+30h+var_8] +
mov [esp+30h+var_30] eax +
call free  +
mov [esp+30h+var_20] offset aSignOff +
mov [esp+30h+var_24] edi +
mov [esp+30h+var_28] 4 +
mov [esp+30h+var_2C] esi +
mov [esp+30h+var_30] ebx +
mov byte ptr [esp+30h+var_4] 1 +
mov byte ptr [esp+30h+var_4+1] 11h +
call sub_42C8A0  +
test eax eax +
js loc_42D03D  +
mov eax [esp+30h+var_8] +
mov [esp+30h+var_30] eax +
call free  +
test byte ptr [ebx+0A60h] 8 +
jz loc_42D056  +
mov esi [ebx] +
mov edi offset aXplainedmini_u +
mov ecx 12h +
cmps   +
jnz loc_42D080  +
mov eax off_461140 +
lea edx [ebx+89Ch] +
mov eax [eax+8] +
mov [esp+30h+var_30] edx +
call eax  +
mov dword ptr [ebx+89Ch] 0FFFFFFFFh +
add esp 30h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov eax ebx +
call sub_42B640  +
jmp loc_42D056  +
***
lea eax [esp+38h+var_18] +
mov ebx [esp+38h+arg_8] +
mov [esp+38h+var_2C] eax +
lea eax [esp+38h+var_14] +
mov [esp+38h+var_34] eax +
mov eax [esp+38h+arg_0] +
mov [esp+38h+var_28] offset aReadSib +
mov [esp+38h+var_30] 0Ch +
mov [esp+38h+var_18] 0 +
mov [esp+38h+var_38] eax +
mov byte ptr [esp+38h+var_14] 12h +
mov byte ptr [esp+38h+var_14+1] 21h +
mov byte ptr [esp+38h+var_14+2] 0 +
mov byte ptr [esp+38h+var_14+3] 0D3h +
mov [esp+38h+var_10] 0 +
mov [esp+38h+var_F] 0 +
mov [esp+38h+var_E] 0 +
mov [esp+38h+var_D] 0 +
mov [esp+38h+var_C] 10h +
mov [esp+38h+var_B] 0 +
mov [esp+38h+var_A] 0 +
mov [esp+38h+var_9] 0 +
call sub_42C8A0  +
test eax eax +
js loc_42D15D  +
mov edx [esp+38h+var_18] +
lea eax [edx+3] +
mov edx [edx+3] +
mov [ebx] edx +
mov edx [eax+4] +
mov [ebx+4] edx +
mov edx [eax+8] +
mov [ebx+8] edx +
mov eax [eax+0Ch] +
mov byte ptr [ebx+10h] 0 +
mov [ebx+0Ch] eax +
mov eax ds:dword_486584 +
mov [esp+38h+var_2C] ebx +
mov [esp+38h+var_34] offset aSJtag3_read_si +
mov [esp+38h+var_38] 3 +
mov [esp+38h+var_30] eax +
call sub_401740  +
mov eax [esp+38h+var_18] +
mov [esp+38h+var_38] eax +
call free  +
xor eax eax +
add esp 38h +
pop ebx  +
retn   +
***
sub esp 38h +
lea eax [esp+38h+var_C] +
mov [esp+38h+var_2C] eax +
lea eax [esp+29h] +
mov [esp+38h+var_28] offset aEnterProgmode +
mov [esp+38h+var_30] 3 +
mov [esp+38h+var_34] eax +
mov [esp+38h+var_38] ebx +
mov [esp+38h+var_F] 12h +
mov [esp+38h+var_E] 15h +
mov [esp+38h+var_D] 0 +
call sub_42C8A0  +
test eax eax +
js loc_42D1CC  +
mov eax [esp+38h+var_C] +
mov [esp+38h+var_38] eax +
call free  +
mov eax [ebx+0A5Ch] +
mov dword ptr [eax+1Ch] 1 +
xor eax eax +
add esp 38h +
pop ebx  +
retn   +
***
jmp sub_42D1E0  +
***
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [esp+3Ch+arg_C] +
mov ebx [esp+3Ch+arg_8] +
mov [esp+3Ch+var_38] offset aSJtag3_page_er +
mov ebp [esp+3Ch+arg_0] +
mov [esp+3Ch+var_3C] 2 +
mov [esp+3Ch+var_2C] eax +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_30] ebx +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov eax [esp+3Ch+arg_4] +
test byte ptr [eax+84h] 80h +
jz loc_42D350  +
mov eax [ebp+0A5Ch] +
mov eax [eax+1Ch] +
test eax eax +
jz loc_42D300  +
mov [esp+3Ch+var_14] 12h +
mov edi offset aFlash_13 +
mov ecx 6 +
mov byte ptr [esp+29h] 20h +
mov esi ebx +
mov [esp+3Ch+var_12] 0 +
cmps   +
jz loc_42D2D8  +
mov edi offset aEeprom_10 +
mov ecx 7 +
mov esi ebx +
cmps   +
jnz loc_42D316  +
mov [esp+3Ch+var_11] 6 +
mov eax [esp+3Ch+arg_C] +
add eax [ebx+50h] +
mov [esp+3Ch+var_2C] offset aPageErase +
mov [esp+3Ch+var_34] 8 +
mov edx eax +
shr edx 8 +
mov [esp+3Ch+var_10] al +
mov [esp+3Ch+var_F] dl +
mov edx eax +
shr eax 18h +
mov [esp+3Ch+var_D] al +
lea eax [esp+3Ch+var_18] +
mov [esp+3Ch+var_30] eax +
lea eax [esp+3Ch+var_14] +
shr edx 10h +
mov [esp+3Ch+var_38] eax +
mov [esp+3Ch+var_3C] ebp +
mov [esp+3Ch+var_E] dl +
call sub_42C8A0  +
test eax eax +
js loc_42D30F  +
mov eax [esp+3Ch+var_18] +
mov [esp+3Ch+var_3C] eax +
call free  +
xor eax eax +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+3Ch+arg_4] +
test byte ptr [eax+84h] 80h +
jz loc_42D2F4  +
mov eax [ebp+0A5Ch] +
mov eax [eax+24h] +
cmp [esp+3Ch+arg_C] eax +
jb loc_42D340  +
mov [esp+3Ch+var_11] 5 +
jmp loc_42D272  +
mov eax ebp +
call sub_42D170  +
test eax eax +
jns loc_42D23A  +
mov eax 0FFFFFFFFh +
jmp loc_42D2D0  +
mov edi offset aUsersig_1 +
mov ecx 8 +
mov esi ebx +
cmps   +
jnz loc_42D330  +
mov [esp+3Ch+var_11] 7 +
jmp loc_42D272  +
mov edi offset aBoot_3 +
mov ecx 5 +
mov esi ebx +
cmps   +
jz loc_42D2F4  +
mov [esp+3Ch+var_11] 4 +
jmp loc_42D272  +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_38] offset aSJtag3_page__0 +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_42D2D0  +
***
push esi  +
push ebx  +
sub esp 4Ch +
mov ebx [esp+4Ch+arg_10] +
mov eax [esp+4Ch+arg_14] +
mov [esp+4Ch+var_48] offset aSJtag3_paged_l +
mov [esp+4Ch+var_4C] 2 +
mov [esp+4Ch+var_38] ebx +
add eax ebx +
mov [esp+4Ch+var_2C] eax +
mov eax dword_4611C8 +
mov [esp+4Ch+var_20] eax +
mov eax [esp+4Ch+arg_14] +
mov [esp+4Ch+var_34] eax +
mov eax [esp+4Ch+arg_C] +
mov [esp+4Ch+var_3C] eax +
mov eax [esp+4Ch+arg_8] +
mov [esp+4Ch+var_40] eax +
mov eax ds:dword_486584 +
mov [esp+4Ch+var_44] eax +
call sub_401740  +
mov edi [esp+4Ch+arg_4] +
mov eax [esp+4Ch+arg_0] +
mov ecx [esp+4Ch+arg_8] +
mov edx [edi+84h] +
add eax 0A5Ch +
mov [esp+4Ch+var_4C] ebx +
mov [esp+4Ch+var_28] eax +
call sub_42BE50  +
cmp eax ebx +
jz loc_42D416  +
mov [esp+4Ch+var_44] eax +
mov [esp+4Ch+var_48] offset aMappedToAddres +
mov [esp+4Ch+var_4C] 2 +
call sub_401740  +
mov eax [esp+4Ch+arg_0] +
test byte ptr [eax+0A60h] 1 +
jnz loc_42D438  +
mov eax [esp+4Ch+arg_0] +
mov eax [eax+0A5Ch] +
mov edx [eax+1Ch] +
test edx edx +
jz loc_42D6D8  +
mov eax [esp+4Ch+arg_8] +
mov edi offset aFlash_13 +
mov ecx 6 +
mov [esp+4Ch+var_18] 12h +
mov byte ptr [esp+35h] 21h +
mov [esp+4Ch+var_16] 0 +
mov esi eax +
mov ebp [eax+70h] +
cmps   +
jz loc_42D610  +
mov esi [esp+4Ch+arg_8] +
mov edi offset aEeprom_10 +
mov ecx 7 +
cmps   +
jnz loc_42D690  +
mov eax [esp+4Ch+arg_4] +
mov eax [eax+84h] +
and eax 2080h +
cmp eax 1 +
sbb eax eax +
and eax 0FFFFFF8Fh +
add eax 22h +
mov [esp+4Ch+var_15] al +
mov eax [esp+4Ch+arg_0] +
test byte ptr [eax+0A60h] 1 +
jnz loc_42D600  +
mov [esp+4Ch+var_24] 0 +
cmp ebx [esp+4Ch+var_2C] +
mov esi ebx +
mov dword_4611C8 64h +
mov edi [esp+4Ch+arg_14] +
jb loc_42D522  +
jmp loc_42D678  +
mov edx [esp+4Ch+var_1C] +
cmp byte ptr [edx+1] 84h +
jnz loc_42D644  +
add ebx 4 +
cmp eax ebx +
jb loc_42D644  +
mov ebx [esp+4Ch+arg_8] +
add edx 3 +
sub eax 4 +
sub edi ebp +
mov ecx [ebx+78h] +
mov [esp+4Ch+var_48] edx +
mov [esp+4Ch+var_44] eax +
add ecx esi +
add esi ebp +
mov [esp+4Ch+var_4C] ecx +
call memcpy  +
mov eax [esp+4Ch+var_1C] +
mov [esp+4Ch+var_4C] eax +
call free  +
cmp [esp+4Ch+var_2C] esi +
jbe loc_42D678  +
mov eax ds:dword_486584 +
cmp ebp edi +
mov ebx edi +
cmovbe ebx ebp +
mov [esp+4Ch+var_3C] ebx +
mov [esp+4Ch+var_40] esi +
mov [esp+4Ch+var_44] eax +
mov [esp+4Ch+var_48] offset aSJtag3_paged_0 +
mov [esp+4Ch+var_4C] 3 +
call sub_401740  +
mov eax [esp+4Ch+arg_4] +
mov edx [eax+84h] +
mov eax [esp+4Ch+var_24] +
test eax eax +
jz loc_42D580  +
test dl 80h +
mov eax 0FFFFFFB0h +
jz loc_42D57C  +
mov eax [esp+4Ch+arg_0] +
mov eax [eax+0A5Ch] +
cmp esi [eax+24h] +
sbb eax eax +
sub eax 3Fh +
mov [esp+4Ch+var_15] al +
mov eax ebx +
mov ecx [esp+4Ch+arg_8] +
shr eax 8 +
mov [esp+4Ch+var_F] al +
mov eax ebx +
shr eax 10h +
mov [esp+4Ch+var_E] al +
mov eax ebx +
shr eax 18h +
mov [esp+4Ch+var_D] al +
mov eax [esp+4Ch+var_28] +
mov [esp+4Ch+var_4C] esi +
mov [esp+4Ch+var_10] bl +
call sub_42BE50  +
mov [esp+4Ch+var_3C] offset aReadMemory +
mov [esp+4Ch+var_44] 0Ch +
mov edx eax +
shr edx 8 +
mov [esp+4Ch+var_14] al +
mov [esp+4Ch+var_13] dl +
mov edx eax +
shr eax 18h +
mov [esp+4Ch+var_11] al +
lea eax [esp+4Ch+var_1C] +
mov [esp+4Ch+var_40] eax +
lea eax [esp+4Ch+var_18] +
mov [esp+4Ch+var_48] eax +
mov eax [esp+4Ch+arg_0] +
shr edx 10h +
mov [esp+4Ch+var_12] dl +
mov [esp+4Ch+var_4C] eax +
call sub_42C8A0  +
test eax eax +
jns loc_42D4D0  +
add esp 4Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+4Ch+arg_4] +
test byte ptr [eax+84h] 80h +
jz loc_42D6C6  +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_24] 1 +
mov eax [eax+0A5Ch] +
cmp ebx [eax+24h] +
sbb eax eax +
sub eax 3Fh +
mov [esp+4Ch+var_15] al +
jmp loc_42D4AF  +
mov eax ds:dword_486584 +
mov [esp+4Ch+var_48] offset aSWrongShortRep +
mov [esp+4Ch+var_4C] 0 +
mov [esp+4Ch+var_44] eax +
call sub_401740  +
mov eax [esp+4Ch+var_20] +
mov dword_4611C8 eax +
mov eax [esp+4Ch+var_1C] +
mov [esp+4Ch+var_4C] eax +
call free  +
jmp loc_42D600  +
mov eax [esp+4Ch+var_20] +
mov dword_4611C8 eax +
mov eax [esp+4Ch+arg_14] +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi [esp+4Ch+arg_8] +
mov edi offset aProdsig_0 +
mov ecx 8 +
cmps   +
jz loc_42D6F0  +
mov esi [esp+4Ch+arg_8] +
mov edi offset aUsersig_1 +
mov ecx 8 +
cmps   +
jnz loc_42D702  +
mov [esp+4Ch+var_15] 0C5h +
mov [esp+4Ch+var_24] 0 +
jmp loc_42D4AF  +
mov [esp+4Ch+var_15] 0B0h +
mov [esp+4Ch+var_24] 0 +
jmp loc_42D4AF  +
mov eax [esp+4Ch+arg_0] +
call sub_42D170  +
test eax eax +
jns loc_42D438  +
jmp loc_42D600  +
mov [esp+4Ch+var_15] 0C6h +
mov [esp+4Ch+var_24] 0 +
jmp loc_42D4AF  +
mov esi [esp+4Ch+arg_8] +
mov edi offset aBoot_3 +
mov ecx 5 +
cmps   +
jz loc_42D736  +
mov eax [esp+4Ch+arg_4] +
test dword ptr [eax+84h] 2080h +
jz loc_42D748  +
mov [esp+4Ch+var_15] 0C0h +
mov [esp+4Ch+var_24] 0 +
jmp loc_42D4AF  +
mov [esp+4Ch+var_15] 0C1h +
mov [esp+4Ch+var_24] 0 +
jmp loc_42D4AF  +
mov [esp+4Ch+var_15] 0A0h +
jmp loc_42D4A7  +
***
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [esp+3Ch+arg_8] +
mov ebp [esp+3Ch+arg_C] +
mov [esp+3Ch+var_38] offset aSJtag3_read_by +
mov ebx [esp+3Ch+arg_0] +
mov [esp+3Ch+var_3C] 2 +
mov [esp+3Ch+var_30] eax +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_2C] ebp +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov edi [esp+3Ch+arg_4] +
lea eax [ebx+0A5Ch] +
mov ecx [esp+3Ch+arg_8] +
mov [esp+3Ch+var_28] eax +
mov edx [edi+84h] +
mov [esp+3Ch+var_3C] ebp +
call sub_42BE50  +
cmp eax ebp +
jz loc_42D7D4  +
mov [esp+3Ch+var_34] eax +
mov [esp+3Ch+var_38] offset aMappedToAddres +
mov [esp+3Ch+var_3C] 2 +
call sub_401740  +
test byte ptr [ebx+0A60h] 1 +
jnz loc_42D7EE  +
mov eax [ebx+0A5Ch] +
mov eax [eax+1Ch] +
test eax eax +
jz loc_42DAA0  +
mov eax [esp+3Ch+arg_4] +
mov edi offset aFlash_13 +
mov ecx 6 +
mov esi [esp+3Ch+arg_8] +
mov [esp+3Ch+var_18] 12h +
mov byte ptr [esp+25h] 21h +
mov eax [eax+84h] +
mov byte ptr [esp+26h] 0 +
and eax 2080h +
cmp eax 1 +
sbb edx edx +
and edx 0FFFFFFF0h +
sub edx 40h +
mov [esp+3Ch+var_15] dl +
cmps   +
jnz loc_42D935  +
mov eax [esp+3Ch+arg_8] +
mov eax [eax+50h] +
and eax 7FFFFh +
add ebp eax +
mov eax [ebx+0A5Ch] +
mov esi [eax+0Ch] +
lea ecx [eax+8] +
mov eax [eax+4] +
mov [esp+3Ch+var_24] ecx +
mov edi esi +
neg edi  +
and edi ebp +
mov [esp+3Ch+var_20] eax +
test esi esi +
jz loc_42DA11  +
mov eax [esp+3Ch+var_24] +
cmp [eax] edi +
jz loc_42DAC2  +
mov eax esi +
mov ecx [esp+3Ch+arg_8] +
mov [esp+3Ch+var_10] al +
mov eax esi +
shr eax 8 +
mov [esp+3Ch+var_F] al +
mov eax esi +
shr eax 10h +
mov [esp+3Ch+var_E] al +
mov eax esi +
shr eax 18h +
mov [esp+3Ch+var_D] al +
mov eax [esp+3Ch+arg_4] +
mov edx [eax+84h] +
mov eax [esp+3Ch+var_28] +
mov [esp+3Ch+var_3C] edi +
call sub_42BE50  +
mov edx eax +
shr edx 8 +
mov [esp+3Ch+var_13] dl +
mov edx eax +
mov [esp+3Ch+var_14] al +
shr edx 10h +
shr eax 18h +
mov [esp+3Ch+var_12] dl +
mov [esp+3Ch+var_11] al +
lea eax [esp+3Ch+var_1C] +
mov [esp+3Ch+var_30] eax +
lea eax [esp+3Ch+var_18] +
mov [esp+3Ch+var_2C] offset aReadMemory +
mov [esp+3Ch+var_34] 0Ch +
mov [esp+3Ch+var_38] eax +
mov [esp+3Ch+var_3C] ebx +
call sub_42C8A0  +
test eax eax +
js loc_42DAB6  +
mov edx [esp+3Ch+var_1C] +
cmp byte ptr [edx+1] 84h +
jnz loc_42DAE0  +
test esi esi +
jnz loc_42DA63  +
cmp eax 4 +
jbe loc_42DAE0  +
movzx eax byte ptr [edx+3] +
mov ebx [esp+3Ch+arg_10] +
mov [ebx] al +
mov [esp+3Ch+var_3C] edx +
xor esi esi +
call free  +
add esp 3Ch +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi [esp+3Ch+arg_8] +
mov edi offset aApplication_5 +
mov ecx 0Ch +
cmps   +
jz loc_42D831  +
mov esi [esp+3Ch+arg_8] +
mov edi offset aApptable_3 +
mov ecx 9 +
cmps   +
jz loc_42D831  +
mov esi [esp+3Ch+arg_8] +
mov edi offset aBoot_3 +
mov ecx 5 +
cmps   +
jz loc_42D831  +
mov esi [esp+3Ch+arg_8] +
mov edi offset aEeprom_10 +
mov ecx 7 +
cmps   +
jnz loc_42DB13  +
test byte ptr [ebx+0A60h] 1 +
jnz loc_42DB50  +
test eax eax +
jnz loc_42DB50  +
mov [esp+3Ch+var_15] 0B1h +
mov eax [esp+3Ch+arg_8] +
mov esi [eax+48h] +
mov eax [ebx+0A5Ch] +
mov edi esi +
lea ecx [eax+14h] +
mov eax [eax+10h] +
neg edi  +
and edi ebp +
mov [esp+3Ch+var_24] ecx +
mov [esp+3Ch+var_20] eax +
jmp loc_42D85C  +
mov esi [esp+3Ch+arg_8] +
mov edi offset aFuse_6 +
mov ecx 4 +
cmps   +
jnz loc_42DBDD  +
mov eax [esp+3Ch+arg_4] +
mov [esp+3Ch+var_15] 0B2h +
test byte ptr [eax+85h] 20h +
jnz loc_42D9FF  +
mov eax [esp+3Ch+arg_8] +
mov ebp [eax+50h] +
and ebp 7 +
mov [esp+3Ch+var_24] 0 +
xor edi edi +
mov [esp+3Ch+var_20] 0 +
mov eax [esp+3Ch+arg_4] +
xor esi esi +
mov ecx [esp+3Ch+arg_8] +
mov [esp+3Ch+var_10] 1 +
mov [esp+3Ch+var_F] 0 +
mov edx [eax+84h] +
mov eax [esp+3Ch+var_28] +
mov [esp+3Ch+var_3C] ebp +
mov [esp+3Ch+var_E] 0 +
mov [esp+3Ch+var_D] 0 +
call sub_42BE50  +
mov edx eax +
shr edx 8 +
mov [esp+3Ch+var_13] dl +
mov edx eax +
mov [esp+3Ch+var_14] al +
shr edx 10h +
shr eax 18h +
mov [esp+3Ch+var_12] dl +
mov [esp+3Ch+var_11] al +
jmp loc_42D8C8  +
lea ecx [esi+4] +
cmp eax ecx +
jb loc_42DAE0  +
mov eax [esp+3Ch+var_24] +
add edx 3 +
mov ebx [esp+3Ch+var_20] +
mov [eax] edi +
mov [esp+3Ch+var_34] esi +
sub esi 1 +
mov [esp+3Ch+var_38] edx +
and esi ebp +
mov [esp+3Ch+var_3C] ebx +
call memcpy  +
movzx eax byte ptr [ebx+esi] +
mov ebx [esp+3Ch+arg_10] +
mov edx [esp+3Ch+var_1C] +
mov [ebx] al +
jmp loc_42D921  +
mov eax ebx +
call sub_42D170  +
test eax eax +
mov esi eax +
js loc_42D92B  +
jmp loc_42D7EE  +
add esp 3Ch +
mov esi eax +
pop ebx  +
mov eax esi +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+3Ch+var_20] +
sub esi 1 +
and esi ebp +
mov ebx [esp+3Ch+arg_10] +
movzx eax byte ptr [eax+esi] +
xor esi esi +
mov [ebx] al +
jmp loc_42D92B  +
mov eax ds:dword_486584 +
mov esi 0FFFFFFFFh +
mov [esp+3Ch+var_38] offset aSWrongShortRep +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov eax [esp+3Ch+var_1C] +
mov [esp+3Ch+var_3C] eax +
call free  +
jmp loc_42D92B  +
mov esi [esp+3Ch+arg_8] +
mov edi offset aLfuse_8 +
mov ecx 6 +
cmps   +
jnz loc_42DB5A  +
xor ebp ebp +
test byte ptr [ebx+0A60h] 1 +
mov [esp+3Ch+var_15] 0B2h +
jz loc_42D9FF  +
mov eax [esp+3Ch+arg_10] +
mov esi 0FFFFFFFFh +
mov byte ptr [eax] 2Ah +
jmp loc_42D92B  +
mov [esp+3Ch+var_15] 22h +
jmp loc_42D9A7  +
mov esi [esp+3Ch+arg_8] +
mov edi offset aHfuse_8 +
mov ecx 6 +
cmps   +
jnz loc_42DB85  +
test byte ptr [ebx+0A60h] 1 +
mov ebp 1 +
mov [esp+3Ch+var_15] 0B2h +
jz loc_42D9FF  +
jmp loc_42DB39  +
mov esi [esp+3Ch+arg_8] +
mov edi offset aEfuse_8 +
mov ecx 6 +
cmps   +
jnz loc_42DBB0  +
test byte ptr [ebx+0A60h] 1 +
mov ebp 2 +
mov [esp+3Ch+var_15] 0B2h +
jz loc_42D9FF  +
jmp loc_42DB39  +
mov esi [esp+3Ch+arg_8] +
mov edi offset aLock_5 +
mov ecx 4 +
cmps   +
jnz loc_42D9CD  +
test byte ptr [ebx+0A60h] 1 +
mov [esp+3Ch+var_15] 0B3h +
jnz loc_42DB39  +
jmp loc_42D9FF  +
mov eax [esp+3Ch+arg_8] +
mov [esp+3Ch+var_38] offset aUsersig_1 +
mov [esp+3Ch+var_3C] eax +
call strcmp  +
test eax eax +
jnz loc_42DBFF  +
mov [esp+3Ch+var_15] 0C5h +
jmp loc_42D9FF  +
mov eax [esp+3Ch+arg_8] +
mov [esp+3Ch+var_38] offset aProdsig_0 +
mov [esp+3Ch+var_3C] eax +
call strcmp  +
test eax eax +
jnz loc_42DC21  +
mov [esp+3Ch+var_15] 0C6h +
jmp loc_42D9FF  +
mov eax [esp+3Ch+arg_8] +
mov [esp+3Ch+var_38] offset aCalibration_2 +
mov [esp+3Ch+var_3C] eax +
call strcmp  +
test eax eax +
jnz loc_42DC50  +
test byte ptr [ebx+0A60h] 1 +
mov [esp+3Ch+var_15] 0B5h +
jnz loc_42DB39  +
jmp loc_42D9FF  +
mov eax [esp+3Ch+arg_8] +
mov [esp+3Ch+var_38] offset aSignature_7 +
mov [esp+3Ch+var_3C] eax +
call strcmp  +
test eax eax +
mov esi eax +
jnz loc_42D9FF  +
mov eax [esp+3Ch+arg_4] +
mov ecx [esp+3Ch+arg_8] +
mov [esp+3Ch+var_15] 0B4h +
mov [esp+3Ch+var_10] 3 +
mov edx [eax+84h] +
mov eax [esp+3Ch+var_28] +
mov [esp+3Ch+var_3C] ebp +
mov [esp+3Ch+var_F] 0 +
mov [esp+3Ch+var_E] 0 +
mov [esp+3Ch+var_D] 0 +
call sub_42BE50  +
mov edx eax +
shr edx 8 +
mov [esp+3Ch+var_13] dl +
mov edx eax +
shr edx 10h +
mov [esp+3Ch+var_14] al +
shr eax 18h +
test ebp ebp +
mov [esp+3Ch+var_12] dl +
mov [esp+3Ch+var_11] al +
jz loc_42DCD9  +
cmp ebp 2 +
ja loc_42DD38  +
movzx eax ss:byte_484C9F[ebp] +
mov ebx [esp+3Ch+arg_10] +
mov [ebx] al +
jmp loc_42D92B  +
lea eax [esp+3Ch+var_1C] +
mov [esp+3Ch+var_30] eax +
lea eax [esp+3Ch+var_18] +
mov [esp+3Ch+var_2C] offset aReadMemory +
mov [esp+3Ch+var_34] 0Ch +
mov [esp+3Ch+var_38] eax +
mov [esp+3Ch+var_3C] ebx +
call sub_42C8A0  +
test eax eax +
js loc_42DAB6  +
mov eax [esp+3Ch+var_1C] +
mov ebx [esp+3Ch+arg_10] +
movzx edx byte ptr [eax+4] +
mov ds:byte_484CA0 dl +
movzx edx byte ptr [eax+5] +
mov ds:byte_484CA1 dl +
movzx edx byte ptr [eax+3] +
mov [ebx] dl +
mov [esp+3Ch+var_3C] eax +
call free  +
jmp loc_42D92B  +
mov [esp+3Ch+var_34] ebp +
or esi 0FFFFFFFFh +
mov [esp+3Ch+var_38] offset aAddressOutOfRa +
mov [esp+3Ch+var_3C] 0 +
call sub_401740  +
jmp loc_42D92B  +
***
push esi  +
push ebx  +
sub esp 8Ch +
mov ebp [esp+8Ch+arg_10] +
mov eax [esp+8Ch+arg_14] +
mov [esp+8Ch+var_88] offset aSJtag3_paged_w +
mov [esp+8Ch+var_8C] 2 +
mov [esp+8Ch+var_78] ebp +
add eax ebp +
mov [esp+8Ch+var_64] eax +
mov eax dword_4611C8 +
mov [esp+8Ch+var_20] eax +
mov eax [esp+8Ch+arg_14] +
mov [esp+8Ch+var_74] eax +
mov eax [esp+8Ch+arg_C] +
mov [esp+8Ch+var_7C] eax +
mov eax [esp+8Ch+arg_8] +
mov [esp+8Ch+var_80] eax +
mov eax ds:dword_486584 +
mov [esp+8Ch+var_84] eax +
call sub_401740  +
mov edi [esp+8Ch+arg_4] +
mov eax [esp+8Ch+arg_0] +
mov ecx [esp+8Ch+arg_8] +
mov edx [edi+84h] +
add eax 0A5Ch +
mov [esp+8Ch+var_8C] ebp +
mov [esp+8Ch+var_28] eax +
call sub_42BE50  +
cmp eax ebp +
jz loc_42DE11  +
mov [esp+8Ch+var_84] eax +
mov [esp+8Ch+var_88] offset aMappedToAddres +
mov [esp+8Ch+var_8C] 2 +
call sub_401740  +
mov eax [esp+8Ch+arg_0] +
test byte ptr [eax+0A60h] 1 +
jnz loc_42DE39  +
mov eax [esp+8Ch+arg_0] +
mov eax [eax+0A5Ch] +
mov edx [eax+1Ch] +
test edx edx +
jz loc_42E1C0  +
mov ecx [esp+8Ch+arg_C] +
test ecx ecx +
jz loc_42E0A5  +
mov eax [esp+8Ch+arg_C] +
add eax 0Dh +
mov [esp+8Ch+var_60] eax +
mov eax [esp+8Ch+var_60] +
mov [esp+8Ch+var_8C] eax +
call malloc  +
test eax eax +
mov ebx eax +
jz loc_42E27F  +
mov esi [esp+8Ch+arg_8] +
mov edi offset aFlash_13 +
mov ecx 6 +
mov byte ptr [eax] 12h +
mov byte ptr [eax+1] 23h +
mov byte ptr [eax+2] 0 +
cmps   +
jnz loc_42E0C0  +
mov eax [esp+8Ch+arg_0] +
mov edi [esp+8Ch+arg_4] +
mov edx [eax+0A5Ch] +
mov eax 0FFFFFFB0h +
mov dword ptr [edx+8] 0FFFFFFFFh +
test byte ptr [edi+84h] 80h +
jz loc_42DEC1  +
cmp ebp [edx+24h] +
sbb eax eax +
sub eax 3Fh +
mov [ebx+3] al +
mov eax [esp+8Ch+arg_4] +
mov eax [eax+84h] +
mov [esp+8Ch+var_2C] eax +
shr [esp+8Ch+var_2C] 7 +
and [esp+8Ch+var_2C] 1 +
cmp ebp [esp+8Ch+var_64] +
mov dword_4611C8 64h +
jnb loc_42E158  +
lea eax [ebx+0Dh] +
mov esi [esp+8Ch+arg_14] +
mov [esp+8Ch+var_6C] eax +
movzx eax byte ptr [esp+8Ch+arg_C] +
mov edi esi +
mov esi [esp+8Ch+arg_C] +
mov [esp+8Ch+var_21] al +
mov eax [esp+8Ch+arg_C] +
shr eax 8 +
mov [esp+8Ch+var_4C] eax +
mov eax [esp+8Ch+arg_C] +
shr eax 10h +
mov [esp+8Ch+var_3C] eax +
mov eax [esp+8Ch+arg_C] +
shr eax 18h +
mov [esp+8Ch+var_5C] eax +
jmp loc_42DF5C  +
mov eax [esp+8Ch+var_10] +
add ebp esi +
sub edi esi +
mov [esp+8Ch+var_8C] eax +
call free  +
cmp [esp+8Ch+var_64] ebp +
jbe loc_42E158  +
cmp esi edi +
mov eax edi +
cmovbe eax esi +
mov [esp+8Ch+var_68] eax +
mov [esp+8Ch+var_7C] eax +
mov eax ds:dword_486584 +
mov [esp+8Ch+var_80] ebp +
mov [esp+8Ch+var_88] offset aSJtag3_paged_1 +
mov [esp+8Ch+var_8C] 3 +
mov [esp+8Ch+var_84] eax +
call sub_401740  +
mov eax [esp+8Ch+arg_4] +
mov edx [eax+84h] +
mov eax [esp+8Ch+var_2C] +
test eax eax +
jz loc_42DFC3  +
test dl 80h +
mov eax 0FFFFFFB0h +
jz loc_42DFC0  +
mov eax [esp+8Ch+arg_0] +
mov eax [eax+0A5Ch] +
cmp ebp [eax+24h] +
sbb eax eax +
sub eax 3Fh +
mov [ebx+3] al +
movzx eax [esp+8Ch+var_21] +
mov ecx [esp+8Ch+arg_8] +
mov [ebx+8] al +
movzx eax byte ptr [esp+8Ch+var_4C] +
mov [ebx+9] al +
movzx eax byte ptr [esp+8Ch+var_3C] +
mov [ebx+0Ah] al +
movzx eax byte ptr [esp+8Ch+var_5C] +
mov [ebx+0Bh] al +
mov eax [esp+8Ch+var_28] +
mov [esp+8Ch+var_8C] ebp +
call sub_42BE50  +
mov byte ptr [ebx+0Ch] 0 +
mov edx eax +
shr edx 8 +
mov [ebx+4] al +
mov [ebx+5] dl +
mov edx eax +
shr eax 18h +
mov [ebx+7] al +
mov eax [esp+8Ch+var_6C] +
shr edx 10h +
mov [ebx+6] dl +
mov [esp+8Ch+var_84] esi +
mov [esp+8Ch+var_88] 0FFh +
mov [esp+8Ch+var_8C] eax +
call memset  +
mov edx [esp+8Ch+arg_8] +
mov ecx [edx+78h] +
add ecx ebp +
mov eax ecx +
mov ecx [esp+8Ch+var_68] +
mov [esp+8Ch+var_88] eax +
mov eax [esp+8Ch+var_6C] +
mov [esp+8Ch+var_84] ecx +
mov [esp+8Ch+var_8C] eax +
call memcpy  +
lea eax [esp+8Ch+var_10] +
mov [esp+8Ch+var_80] eax +
mov eax [esp+8Ch+var_60] +
mov [esp+8Ch+var_7C] offset aWriteMemory +
mov [esp+8Ch+var_88] ebx +
mov [esp+8Ch+var_84] eax +
mov eax [esp+8Ch+arg_0] +
mov [esp+8Ch+var_8C] eax +
call sub_42C8A0  +
test eax eax +
jns loc_42DF42  +
mov [esp+8Ch+var_8C] ebx +
call free  +
mov eax [esp+8Ch+var_20] +
mov dword_4611C8 eax +
mov eax 0FFFFFFFFh +
add esp 8Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+8Ch+var_60] 10Dh +
mov [esp+8Ch+arg_C] 100h +
jmp loc_42DE56  +
mov esi [esp+8Ch+arg_8] +
mov edi offset aEeprom_10 +
mov ecx 7 +
cmps   +
jnz loc_42E180  +
mov eax [esp+8Ch+arg_0] +
test byte ptr [eax+0A60h] 1 +
jz loc_42E1F1  +
cmp ebp [esp+8Ch+var_64] +
jnb loc_42E236  +
mov [esp+8Ch+var_6C] ebx +
mov esi [esp+8Ch+arg_0] +
mov edi [esp+8Ch+arg_4] +
mov ebx [esp+8Ch+arg_8] +
jmp loc_42E11F  +
add ebp 1 +
cmp [esp+8Ch+var_64] ebp +
jbe loc_42E232  +
mov eax [ebx+78h] +
movzx eax byte ptr [eax+ebp] +
mov [esp+8Ch+var_80] ebp +
mov [esp+8Ch+var_84] ebx +
mov [esp+8Ch+var_88] edi +
mov [esp+8Ch+var_7C] eax +
mov [esp+8Ch+var_8C] esi +
call sub_42E2B0  +
test eax eax +
jns loc_42E112  +
mov ebx [esp+8Ch+var_6C] +
mov [esp+8Ch+var_8C] ebx +
call free  +
mov eax 0FFFFFFFFh +
jmp loc_42E09A  +
mov [esp+8Ch+var_8C] ebx +
call free  +
mov eax [esp+8Ch+var_20] +
mov dword_4611C8 eax +
mov eax [esp+8Ch+arg_14] +
add esp 8Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi [esp+8Ch+arg_8] +
mov edi offset aUsersig_1 +
mov ecx 8 +
cmps   +
jz loc_42E1E0  +
mov esi [esp+8Ch+arg_8] +
mov edi offset aBoot_3 +
mov ecx 5 +
cmps   +
jnz loc_42E24A  +
mov byte ptr [eax+3] 0C1h +
mov [esp+8Ch+var_2C] 0 +
jmp loc_42DEDF  +
mov eax [esp+8Ch+arg_0] +
call sub_42D170  +
test eax eax +
jns loc_42DE39  +
mov eax 0FFFFFFFFh +
jmp loc_42E09A  +
mov byte ptr [eax+3] 0C5h +
mov [esp+8Ch+var_2C] 0 +
jmp loc_42DEDF  +
mov eax [esp+8Ch+arg_4] +
mov [esp+8Ch+var_2C] 0 +
mov eax [eax+84h] +
and eax 80h +
cmp eax 1 +
sbb eax eax +
and eax 0FFFFFFEDh +
sub eax 3Ch +
mov [ebx+3] al +
mov eax [esp+8Ch+arg_0] +
mov eax [eax+0A5Ch] +
mov dword ptr [eax+14h] 0FFFFFFFFh +
jmp loc_42DEDF  +
mov ebx [esp+8Ch+var_6C] +
mov [esp+8Ch+var_8C] ebx +
call free  +
mov eax [esp+8Ch+arg_14] +
jmp loc_42E09A  +
mov eax [esp+8Ch+arg_4] +
test dword ptr [eax+84h] 2080h +
jz loc_42E26E  +
mov byte ptr [ebx+3] 0C0h +
mov [esp+8Ch+var_2C] 0 +
jmp loc_42DEDF  +
mov byte ptr [ebx+3] 0A0h +
mov [esp+8Ch+var_2C] 0 +
jmp loc_42DEDF  +
mov eax ds:dword_486584 +
mov [esp+8Ch+var_88] offset aSJtag3_paged_2 +
mov [esp+8Ch+var_8C] 0 +
mov [esp+8Ch+var_84] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_42E09A  +
***
push esi  +
push ebx  +
sub esp 4Ch +
mov eax [esp+4Ch+arg_10] +
mov ebp [esp+4Ch+arg_4] +
mov [esp+4Ch+var_48] offset aSJtag3_write_b +
mov ebx [esp+4Ch+arg_0] +
mov [esp+4Ch+var_4C] 2 +
mov [esp+4Ch+var_34] eax +
mov eax [esp+4Ch+arg_C] +
mov [esp+4Ch+var_3C] eax +
mov eax [esp+4Ch+arg_8] +
mov [esp+4Ch+var_40] eax +
mov eax ds:dword_486584 +
mov [esp+4Ch+var_44] eax +
call sub_401740  +
mov edi [esp+4Ch+arg_C] +
lea eax [ebx+0A5Ch] +
mov edx [ebp+84h] +
mov ecx [esp+4Ch+arg_8] +
mov [esp+4Ch+var_30] eax +
mov [esp+4Ch+var_4C] edi +
call sub_42BE50  +
cmp eax [esp+4Ch+arg_C] +
jz loc_42E332  +
mov [esp+4Ch+var_44] eax +
mov [esp+4Ch+var_48] offset aMappedToAddres +
mov [esp+4Ch+var_4C] 2 +
call sub_401740  +
mov eax [ebp+84h] +
mov edi offset aFlash_13 +
mov ecx 6 +
mov esi [esp+4Ch+arg_8] +
mov [esp+4Ch+var_1A] 12h +
mov byte ptr [esp+33h] 23h +
mov edx eax +
and edx 2080h +
cmp edx 1 +
sbb edx edx +
and edx 0FFFFFFE0h +
sub edx 40h +
mov [esp+4Ch+var_18] 0 +
mov [esp+4Ch+var_17] dl +
cmps   +
jnz loc_42E3A0  +
mov eax [ebx+0A5Ch] +
mov dword ptr [eax+8] 0FFFFFFFFh +
mov edi [eax+4] +
test byte ptr [ebx+0A60h] 1 +
mov esi [eax+0Ch] +
jz loc_42E3D6  +
add esp 4Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi [esp+4Ch+arg_8] +
mov edi offset aEeprom_10 +
mov ecx 7 +
cmps   +
jnz loc_42E498  +
test byte ptr [ebx+0A60h] 1 +
jnz loc_42E562  +
mov eax [ebx+0A5Ch] +
mov edi [eax+10h] +
mov esi [eax+18h] +
mov dword ptr [eax+14h] 0FFFFFFFFh +
test esi esi +
jnz loc_42E4D0  +
movzx eax byte ptr [ebx+0A60h] +
and eax 1 +
test al al +
jnz loc_42E3FD  +
mov eax [ebx+0A5Ch] +
mov eax [eax+1Ch] +
test eax eax +
jz loc_42E5A7  +
mov eax [esp+4Ch+arg_C] +
mov edx [ebp+84h] +
mov ecx [esp+4Ch+arg_8] +
mov [esp+4Ch+var_12] 1 +
mov [esp+4Ch+var_4C] eax +
mov eax [esp+4Ch+var_30] +
mov [esp+4Ch+var_11] 0 +
mov [esp+4Ch+var_10] 0 +
mov [esp+4Ch+var_F] 0 +
call sub_42BE50  +
mov [esp+4Ch+var_3C] offset aWriteMemory +
mov [esp+4Ch+var_44] 0Eh +
mov [esp+4Ch+var_4C] ebx +
mov [esp+4Ch+var_E] 0 +
mov edx eax +
shr edx 8 +
mov [esp+4Ch+var_16] al +
mov [esp+4Ch+var_15] dl +
mov edx eax +
shr eax 18h +
mov [esp+4Ch+var_13] al +
movzx eax byte ptr [esp+4Ch+var_34] +
shr edx 10h +
mov [esp+4Ch+var_14] dl +
mov [esp+4Ch+var_D] al +
lea eax [esp+4Ch+var_20] +
mov [esp+4Ch+var_40] eax +
lea eax [esp+4Ch+var_1A] +
mov [esp+4Ch+var_48] eax +
call sub_42C8A0  +
test eax eax +
js loc_42E490  +
mov eax [esp+4Ch+var_20] +
mov [esp+4Ch+var_4C] eax +
call free  +
xor eax eax +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi [esp+4Ch+arg_8] +
mov edi offset aLfuse_8 +
mov ecx 6 +
cmps   +
jnz loc_42E576  +
test byte ptr [ebx+0A60h] 1 +
mov [esp+4Ch+var_17] 0B2h +
jnz loc_42E38C  +
mov [esp+4Ch+arg_C] 0 +
jmp loc_42E3EC  +
lea eax [esp+4Ch+var_20] +
mov [esp+4Ch+var_3C] eax +
mov eax [esp+4Ch+arg_C] +
mov [esp+4Ch+var_48] ebp +
mov [esp+4Ch+var_4C] ebx +
mov [esp+4Ch+var_40] eax +
mov eax [esp+4Ch+arg_8] +
mov [esp+4Ch+var_44] eax +
call sub_42D760  +
mov edx eax +
mov eax 0FFFFFFFFh +
test edx edx +
js loc_42E490  +
movzx ecx byte ptr [esp+4Ch+var_34] +
lea eax [esi-1] +
mov edx esi +
and eax [esp+4Ch+arg_C] +
neg edx  +
and edx [esp+4Ch+arg_C] +
mov [edi+eax] cl +
mov ecx [esp+4Ch+arg_8] +
mov eax edx +
mov [esp+4Ch+var_34] edx +
add eax [ecx+78h] +
mov [esp+4Ch+var_44] esi +
mov [esp+4Ch+var_48] edi +
mov [esp+4Ch+var_4C] eax +
call memcpy  +
mov edx [esp+4Ch+var_34] +
mov eax [esp+4Ch+arg_8] +
mov [esp+4Ch+var_38] esi +
mov [esp+4Ch+var_40] esi +
mov [esp+4Ch+var_48] ebp +
mov [esp+4Ch+var_4C] ebx +
mov [esp+4Ch+var_3C] edx +
mov [esp+4Ch+var_44] eax +
call sub_42DD60  +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
sar eax 1Fh +
retn   +
mov [esp+4Ch+var_17] 22h +
mov eax [ebx+0A5Ch] +
xor esi esi +
xor edi edi +
jmp loc_42E3CF  +
mov esi [esp+4Ch+arg_8] +
mov edi offset aHfuse_8 +
mov ecx 6 +
cmps   +
jnz loc_42E5C0  +
test byte ptr [ebx+0A60h] 1 +
mov [esp+4Ch+var_17] 0B2h +
jnz loc_42E38C  +
mov [esp+4Ch+arg_C] 1 +
jmp loc_42E3EC  +
mov eax ebx +
call sub_42D170  +
test eax eax +
jns loc_42E3FD  +
jmp loc_42E38C  +
mov esi [esp+4Ch+arg_8] +
mov edi offset aEfuse_8 +
mov ecx 6 +
cmps   +
jz loc_42E611  +
mov esi [esp+4Ch+arg_8] +
mov edi offset aFuse_6 +
mov ecx 4 +
cmps   +
jnz loc_42E630  +
test ah 20h +
mov [esp+4Ch+var_17] 0B2h +
jnz loc_42E3DE  +
mov eax [esp+4Ch+arg_8] +
mov eax [eax+50h] +
mov [esp+4Ch+arg_C] eax +
movzx eax byte ptr [ebx+0A60h] +
and [esp+4Ch+arg_C] 7 +
and eax 1 +
jmp loc_42E3E8  +
test byte ptr [ebx+0A60h] 1 +
mov [esp+4Ch+var_17] 0B2h +
jnz loc_42E38C  +
mov [esp+4Ch+arg_C] 2 +
jmp loc_42E3EC  +
mov esi [esp+4Ch+arg_8] +
mov edi offset aUsersig_1 +
mov ecx 8 +
cmps   +
jnz loc_42E656  +
movzx eax byte ptr [ebx+0A60h] +
mov [esp+4Ch+var_17] 0C5h +
and eax 1 +
jmp loc_42E3E8  +
mov esi [esp+4Ch+arg_8] +
mov edi offset aProdsig_0 +
mov ecx 8 +
cmps   +
jnz loc_42E67C  +
movzx eax byte ptr [ebx+0A60h] +
mov [esp+4Ch+var_17] 0C6h +
and eax 1 +
jmp loc_42E3E8  +
mov esi [esp+4Ch+arg_8] +
mov edi offset aLock_5 +
mov ecx 4 +
cmps   +
jnz loc_42E6A5  +
test byte ptr [ebx+0A60h] 1 +
mov [esp+4Ch+var_17] 0B3h +
jnz loc_42E38C  +
jmp loc_42E3EC  +
mov esi [esp+4Ch+arg_8] +
mov edi offset aCalibration_2 +
mov ecx 0Ch +
cmps   +
jnz loc_42E6CE  +
test byte ptr [ebx+0A60h] 1 +
mov [esp+4Ch+var_17] 0B5h +
jnz loc_42E38C  +
jmp loc_42E3EC  +
mov esi [esp+4Ch+arg_8] +
mov edi offset aSignature_7 +
mov ecx 0Ah +
cmps   +
jnz loc_42E3DE  +
test byte ptr [ebx+0A60h] 1 +
mov [esp+4Ch+var_17] 0B4h +
jnz loc_42E38C  +
jmp loc_42E3EC  +
***
sub esp 3Ch +
lea eax [esp+3Ch+var_18] +
mov [esp+3Ch+var_30] eax +
lea eax [esp+3Ch+var_14] +
mov [esp+3Ch+var_38] eax +
mov eax [esp+3Ch+arg_0] +
mov [esp+3Ch+var_2C] offset aChipErase_1 +
mov [esp+3Ch+var_34] 8 +
mov byte ptr [esp+3Ch+var_14] 12h +
mov [esp+3Ch+var_3C] eax +
mov byte ptr [esp+3Ch+var_14+1] 20h +
mov byte ptr [esp+3Ch+var_14+2] 0 +
mov byte ptr [esp+3Ch+var_14+3] 0 +
mov [esp+3Ch+var_D] 0 +
mov [esp+3Ch+var_E] 0 +
mov [esp+3Ch+var_F] 0 +
mov [esp+3Ch+var_10] 0 +
call sub_42C8A0  +
test eax eax +
js loc_42E770  +
mov eax [esp+3Ch+var_18] +
mov [esp+3Ch+var_3C] eax +
call free  +
xor eax eax +
add esp 3Ch +
retn   +
mov eax 0FFFFFFFFh +
jmp loc_42E769  +
***
mov ebx [esp+38h+arg_0] +
mov eax [ebx+0A5Ch] +
mov eax [eax+4] +
mov [esp+38h+var_38] eax +
call free  +
mov eax [ebx+0A5Ch] +
mov dword ptr [eax+4] 0 +
mov eax [eax+10h] +
mov [esp+38h+var_38] eax +
call free  +
mov eax [ebx+0A5Ch] +
mov dword ptr [eax+10h] 0 +
mov eax [eax+1Ch] +
test eax eax +
jnz loc_42E7D0  +
add esp 38h +
pop ebx  +
retn   +
lea eax [esp+38h+var_C] +
mov [esp+38h+var_2C] eax +
lea eax [esp+29h] +
mov [esp+38h+var_28] offset aLeaveProgmode +
mov [esp+38h+var_30] 3 +
mov [esp+38h+var_34] eax +
mov [esp+38h+var_38] ebx +
mov [esp+38h+var_F] 12h +
mov [esp+38h+var_E] 16h +
mov [esp+38h+var_D] 0 +
call sub_42C8A0  +
test eax eax +
js loc_42E7C5  +
mov eax [esp+38h+var_C] +
mov [esp+38h+var_38] eax +
call free  +
mov eax [ebx+0A5Ch] +
mov dword ptr [eax+1Ch] 0 +
add esp 38h +
pop ebx  +
retn   +
***
push ebx  +
sub esp 30h +
mov eax ds:dword_486584 +
mov ebx [esp+30h+arg_0] +
mov [esp+30h+var_2C] offset aSJtag3_getsync +
mov [esp+30h+var_30] 3 +
mov [esp+30h+var_28] eax +
call sub_401740  +
test byte ptr [ebx+0A60h] 8 +
jz loc_42E870  +
mov esi [ebx] +
mov edi offset aXplainedmini_u +
mov ecx 12h +
cmps   +
jnz loc_42E8C0  +
lea eax [esp+30h+var_4] +
mov [esp+30h+var_24] eax +
lea eax [esp+29h] +
mov [esp+30h+var_20] offset aSignOn +
mov [esp+30h+var_28] 3 +
mov [esp+30h+var_2C] eax +
mov [esp+30h+var_30] ebx +
mov [esp+30h+var_7] 1 +
mov [esp+30h+var_6] 10h +
mov [esp+30h+var_5] 0 +
call sub_42C8A0  +
test eax eax +
js loc_42E8D0  +
mov eax [esp+30h+var_4] +
mov [esp+30h+var_30] eax +
call free  +
xor eax eax +
add esp 30h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov eax ebx +
call sub_42B410  +
test eax eax +
jns loc_42E870  +
nop   +
lea esi [esi+0] +
mov eax 0FFFFFFFFh +
jmp loc_42E8B9  +
***
push edi  +
mov edi offset aUsb_2 +
push esi  +
push ebx  +
sub esp 3Ch +
mov ebx [esp+48h+arg_4] +
mov ebp [esp+48h+arg_0] +
mov esi ebx +
cmps   +
setb al  +
setnbe cl  +
sub ecx eax +
movsx eax cl +
test eax eax +
mov [esp+48h+var_2C] eax +
jnz loc_42EC14  +
mov eax [ebp+484h] +
mov edx 3EBh +
test eax eax +
cmovz eax edx +
mov [esp+48h+var_32] ax +
mov eax [ebp+488h] +
mov [esp+48h+var_48] eax +
call sub_406F20  +
test eax eax +
jz loc_42EBF9  +
mov eax [ebp+488h] +
mov off_461140 offset off_461260 +
mov [esp+48h+var_48] eax +
call sub_406F20  +
mov edi eax +
lea eax [ebp+74h] +
test edi edi +
mov [esp+48h+var_30] eax +
lea eax [ebp+89Ch] +
mov [esp+48h+var_38] eax +
jnz loc_42E980  +
jmp loc_42EA70  +
mov eax esi +
shr eax 1Fh +
test al al +
jz loc_42EA13  +
mov ecx 2 +
mov [esp+48h+var_48] edi +
mov word ptr [esp+48h+var_1C] cx +
call sub_406F60  +
mov eax [eax] +
mov dword ptr [ebp+8ACh] 200h +
mov dword ptr [ebp+8A0h] 82h +
mov dword ptr [ebp+8A4h] 1 +
mov word ptr [esp+48h+var_20+2] ax +
mov eax [esp+48h+var_30] +
mov dword ptr [ebp+8A8h] 0 +
mov [esp+48h+var_44] ebx +
mov [esp+48h+var_48] eax +
call strcpy  +
movzx edx [esp+48h+var_32] +
mov eax off_461140 +
mov ecx [esp+48h+var_38] +
mov word ptr [esp+48h+var_20] dx +
mov esi [esp+48h+var_20] +
mov eax [eax] +
mov [esp+48h+var_3C] ecx +
mov [esp+48h+var_48] ebx +
mov [esp+48h+var_44] esi +
mov esi [esp+48h+var_1C] +
mov [esp+48h+var_40] esi +
call eax  +
mov [esp+48h+var_48] edi +
mov esi eax +
call sub_406F40  +
test eax eax +
mov edi eax +
jnz loc_42E973  +
test esi esi +
js loc_42EA70  +
mov eax [ebp+8A8h] +
test eax eax +
jz loc_42EA46  +
mov eax off_461140 +
mov ecx [esp+48h+var_38] +
mov eax [eax+14h] +
mov [esp+48h+var_44] 0 +
mov [esp+48h+var_48] ecx +
call eax  +
mov eax [esp+48h+var_2C] +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ds:dword_486584 +
or byte ptr [ebp+0A60h] 8 +
mov [esp+48h+var_44] offset aSFoundCmsisDap +
mov [esp+48h+var_40] eax +
mov [esp+48h+var_48] 1 +
call sub_401740  +
jmp loc_42EA21  +
mov eax [ebp+488h] +
lea edi [ebp+74h] +
mov off_461140 offset off_4611E0 +
mov [esp+48h+var_48] eax +
call sub_406F20  +
mov esi eax +
test esi esi +
lea eax [ebp+89Ch] +
mov [esp+48h+var_38] eax +
jz loc_42EB4F  +
mov [esp+48h+var_30] edi +
mov edi esi +
jmp loc_42EAB4  +
mov eax esi +
shr eax 1Fh +
test al al +
jz loc_42EB47  +
mov edx 2 +
mov [esp+48h+var_48] edi +
mov word ptr [esp+48h+var_1C] dx +
call sub_406F60  +
mov eax [eax] +
mov dword ptr [ebp+8ACh] 200h +
mov dword ptr [ebp+8A0h] 82h +
mov dword ptr [ebp+8A4h] 1 +
mov word ptr [esp+48h+var_20+2] ax +
mov eax [esp+48h+var_30] +
mov dword ptr [ebp+8A8h] 83h +
mov [esp+48h+var_44] ebx +
mov [esp+48h+var_48] eax +
call strcpy  +
movzx edx [esp+48h+var_32] +
mov eax off_461140 +
mov word ptr [esp+48h+var_20] dx +
mov esi [esp+48h+var_20] +
mov eax [eax] +
mov edx [esp+48h+var_38] +
mov [esp+48h+var_48] ebx +
mov [esp+48h+var_44] esi +
mov esi [esp+48h+var_1C] +
mov [esp+48h+var_3C] edx +
mov [esp+48h+var_40] esi +
call eax  +
mov [esp+48h+var_48] edi +
mov esi eax +
call sub_406F40  +
test eax eax +
mov edi eax +
jnz loc_42EAA7  +
test esi esi +
jns loc_42EA17  +
movzx edi [esp+48h+var_32] +
mov eax ds:dword_486584 +
mov [esp+48h+var_44] offset aSJtag3_open_co +
mov [esp+48h+var_48] 0 +
mov [esp+48h+var_3C] edi +
mov [esp+48h+var_40] eax +
call sub_401740  +
mov eax [ebp+488h] +
mov [esp+48h+var_48] eax +
call sub_406F20  +
test eax eax +
mov ebx eax +
jnz loc_42EBA4  +
jmp loc_42EBD4  +
mov [esp+48h+var_44] offset asc_476D9C +
mov [esp+48h+var_48] 0 +
call sub_401740  +
mov [esp+48h+var_48] ebx +
call sub_406F60  +
mov eax [eax] +
mov [esp+48h+var_44] offset a0x04x +
mov [esp+48h+var_48] 0 +
mov [esp+48h+var_40] eax +
call sub_401740  +
mov [esp+48h+var_48] ebx +
call sub_406F40  +
test eax eax +
mov ebx eax +
jnz loc_42EB90  +
mov eax ds:_iob +
mov [esp+48h+var_48] 0Ah +
add eax 40h +
mov [esp+48h+var_44] eax +
call fputc  +
mov [esp+48h+var_2C] 0FFFFFFFFh +
jmp loc_42EA3A  +
mov eax [ebp+488h] +
mov [esp+48h+var_44] 2110h +
mov [esp+48h+var_48] eax +
call sub_406D30  +
jmp loc_42E93F  +
mov eax ds:dword_486584 +
mov [esp+48h+var_44] offset aSJtag3_open__0 +
mov [esp+48h+var_48] 0 +
mov [esp+48h+var_40] eax +
call sub_401740  +
mov [esp+48h+var_2C] 0FFFFFFFFh +
jmp loc_42EA3A  +
***
mov eax ds:dword_486584 +
mov [esp+18h+var_14] offset aSJtag3_open +
mov ebx [esp+18h+arg_0] +
mov [esp+18h+var_18] 2 +
mov [esp+18h+var_10] eax +
call sub_401740  +
mov eax [esp+18h+arg_4] +
mov [esp+18h+var_18] ebx +
mov [esp+18h+var_14] eax +
call sub_42E8E0  +
test eax eax +
js loc_42EC91  +
mov [esp+18h+var_14] 4 +
mov [esp+18h+var_18] ebx +
call sub_42E830  +
sar eax 1Fh +
add esp 18h +
pop ebx  +
retn   +
mov eax 0FFFFFFFFh +
jmp loc_42EC8C  +
***
mov eax ds:dword_486584 +
mov [esp+18h+var_14] offset aSJtag3_open_dw +
mov ebx [esp+18h+arg_0] +
mov [esp+18h+var_18] 2 +
mov [esp+18h+var_10] eax +
call sub_401740  +
mov eax [esp+18h+arg_4] +
mov [esp+18h+var_18] ebx +
mov [esp+18h+var_14] eax +
call sub_42E8E0  +
test eax eax +
js loc_42ECF1  +
mov [esp+18h+var_14] 5 +
mov [esp+18h+var_18] ebx +
call sub_42E830  +
sar eax 1Fh +
add esp 18h +
pop ebx  +
retn   +
mov eax 0FFFFFFFFh +
jmp loc_42ECEC  +
***
mov eax ds:dword_486584 +
mov [esp+18h+var_14] offset aSJtag3_open_pd +
mov ebx [esp+18h+arg_0] +
mov [esp+18h+var_18] 2 +
mov [esp+18h+var_10] eax +
call sub_401740  +
mov eax [esp+18h+arg_4] +
mov [esp+18h+var_18] ebx +
mov [esp+18h+var_14] eax +
call sub_42E8E0  +
test eax eax +
js loc_42ED51  +
mov [esp+18h+var_14] 6 +
mov [esp+18h+var_18] ebx +
call sub_42E830  +
sar eax 1Fh +
add esp 18h +
pop ebx  +
retn   +
mov eax 0FFFFFFFFh +
jmp loc_42ED4C  +
***
mov eax ds:dword_486584 +
mov [esp+18h+var_14] offset aSJtag3_open_up +
mov ebx [esp+18h+arg_0] +
mov [esp+18h+var_18] 2 +
mov [esp+18h+var_10] eax +
call sub_401740  +
mov eax [esp+18h+arg_4] +
mov [esp+18h+var_18] ebx +
mov [esp+18h+var_14] eax +
call sub_42E8E0  +
test eax eax +
js loc_42EDB1  +
mov [esp+18h+var_14] 8 +
mov [esp+18h+var_18] ebx +
call sub_42E830  +
sar eax 1Fh +
add esp 18h +
pop ebx  +
retn   +
mov eax 0FFFFFFFFh +
jmp loc_42EDAC  +
***
push esi  +
push ebx  +
sub esp 7Ch +
mov eax ds:dword_486584 +
mov esi [esp+7Ch+arg_8] +
mov ebp [esp+7Ch+arg_C] +
mov edi [esp+7Ch+arg_14] +
mov [esp+7Ch+var_74] eax +
mov ebx [esp+7Ch+arg_4] +
mov [esp+7Ch+var_78] offset aSJtag3_getparm +
mov [esp+7Ch+var_7C] 2 +
call sub_401740  +
mov eax esi +
mov [esp+7Ch+var_4B] al +
mov eax ebp +
mov [esp+7Ch+var_4A] al +
mov eax edi +
mov [esp+7Ch+var_49] al +
mov eax ebp +
movzx ebp al +
mov eax esi +
movzx esi al +
mov [esp+7Ch+var_4E] bl +
movzx ebx bl +
mov [esp+7Ch+var_70] esi +
lea esi [esp+7Ch+var_48] +
mov [esp+7Ch+var_6C] ebp +
mov [esp+7Ch+var_74] ebx +
mov [esp+7Ch+var_78] offset aGetParameterSc +
mov [esp+7Ch+var_7C] esi +
mov byte ptr [esp+2Fh] 2 +
mov [esp+7Ch+var_4C] 0 +
call sprintf  +
lea eax [esp+7Ch+var_54] +
mov [esp+7Ch+var_70] eax +
lea eax [esp+7Ch+var_4E] +
mov [esp+7Ch+var_78] eax +
mov eax [esp+7Ch+arg_0] +
mov [esp+7Ch+var_6C] esi +
mov [esp+7Ch+var_74] 6 +
mov [esp+7Ch+var_7C] eax +
call sub_42C8A0  +
test eax eax +
js loc_42EEF8  +
cmp eax 2 +
mov ebx [esp+7Ch+var_54] +
jle loc_42EEC4  +
cmp byte ptr [ebx+1] 84h +
jnz loc_42EEC4  +
mov ecx edi +
sub eax 3 +
movzx edi cl +
cmp eax edi +
cmovle edi eax +
mov eax [esp+7Ch+arg_10] +
lea edx [ebx+3] +
mov [esp+7Ch+var_78] edx +
mov [esp+7Ch+var_74] edi +
mov [esp+7Ch+var_7C] eax +
call memcpy  +
mov [esp+7Ch+var_7C] ebx +
call free  +
xor eax eax +
add esp 7Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ds:dword_486584 +
mov [esp+7Ch+var_70] esi +
mov [esp+7Ch+var_78] offset aSJtag3_getpa_0 +
mov [esp+7Ch+var_7C] 0 +
mov [esp+7Ch+var_74] eax +
call sub_401740  +
mov eax [esp+7Ch+var_54] +
mov [esp+7Ch+var_7C] eax +
call free  +
mov eax 0FFFFFFFFh +
jmp loc_42EEBC  +
mov eax 0FFFFFFFFh +
jmp loc_42EEBC  +
***
push esi  +
push ebx  +
mov ebx eax +
sub esp 30h +
lea esi [esp+38h+var_A] +
mov [esp+38h+var_24] 2 +
mov dword ptr [esp+38h+var_2C+4] esi +
mov dword ptr [esp+38h+var_2C] 0 +
mov [esp+38h+var_30] 1 +
mov [esp+38h+var_34] 1 +
mov [esp+38h+var_38] eax +
call sub_42EDC0  +
test eax eax +
js loc_42F0D0  +
movzx eax byte ptr [esp+38h+var_A+1] +
movzx edx byte ptr [esp+38h+var_A] +
mov [esp+38h+var_30] edi +
mov [esp+38h+var_34] offset aSvtarget_2fV +
shl eax 8 +
add eax edx +
movzx eax ax +
mov [esp+38h+var_1C] eax +
fild  [esp+38h+var_1C] +
fdiv  ds:flt_477438 +
mov [esp+38h+var_38] 0 +
fstp  [esp+38h+var_2C] +
call sub_401740  +
mov [esp+38h+var_24] 2 +
mov dword ptr [esp+38h+var_2C+4] esi +
mov dword ptr [esp+38h+var_2C] 20h +
mov [esp+38h+var_30] 1 +
mov [esp+38h+var_34] 12h +
mov [esp+38h+var_38] ebx +
call sub_42EDC0  +
test eax eax +
js loc_42F0D0  +
movzx eax byte ptr [esp+38h+var_A+1] +
movzx edx byte ptr [esp+38h+var_A] +
mov [esp+38h+var_30] edi +
mov [esp+38h+var_34] offset aSjtagClockMega +
shl eax 8 +
add eax edx +
movzx eax ax +
mov dword ptr [esp+38h+var_2C] eax +
mov [esp+38h+var_38] 0 +
call sub_401740  +
mov [esp+38h+var_24] 2 +
mov dword ptr [esp+38h+var_2C+4] esi +
mov dword ptr [esp+38h+var_2C] 21h +
mov [esp+38h+var_30] 1 +
mov [esp+38h+var_34] 12h +
mov [esp+38h+var_38] ebx +
call sub_42EDC0  +
test eax eax +
js loc_42F0D0  +
movzx eax byte ptr [esp+38h+var_A+1] +
movzx edx byte ptr [esp+38h+var_A] +
mov [esp+38h+var_30] edi +
mov [esp+38h+var_34] offset aSjtagClockMe_0 +
shl eax 8 +
add eax edx +
movzx eax ax +
mov dword ptr [esp+38h+var_2C] eax +
mov [esp+38h+var_38] 0 +
call sub_401740  +
mov [esp+38h+var_24] 2 +
mov dword ptr [esp+38h+var_2C+4] esi +
mov dword ptr [esp+38h+var_2C] 30h +
mov [esp+38h+var_30] 1 +
mov [esp+38h+var_34] 12h +
mov [esp+38h+var_38] ebx +
call sub_42EDC0  +
test eax eax +
js loc_42F0D0  +
movzx eax byte ptr [esp+38h+var_A+1] +
movzx edx byte ptr [esp+38h+var_A] +
mov [esp+38h+var_30] edi +
mov [esp+38h+var_34] offset aSjtagClockXmeg +
shl eax 8 +
add eax edx +
movzx eax ax +
mov dword ptr [esp+38h+var_2C] eax +
mov [esp+38h+var_38] 0 +
call sub_401740  +
mov [esp+38h+var_24] 2 +
mov dword ptr [esp+38h+var_2C+4] esi +
mov dword ptr [esp+38h+var_2C] 31h +
mov [esp+38h+var_30] 1 +
mov [esp+38h+var_34] 12h +
mov [esp+38h+var_38] ebx +
call sub_42EDC0  +
test eax eax +
jns loc_42F0D7  +
add esp 30h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
movzx eax byte ptr [esp+38h+var_A+1] +
movzx edx byte ptr [esp+38h+var_A] +
mov [esp+38h+var_30] edi +
mov [esp+38h+var_34] offset aSpdiClockXmega +
shl eax 8 +
add eax edx +
movzx eax ax +
mov dword ptr [esp+38h+var_2C] eax +
mov [esp+38h+var_38] 0 +
call sub_401740  +
jmp loc_42F0D0  +
***
mov eax [esp+arg_0] +
mov edx offset unk_476F4E +
jmp sub_42EF00  +
***
sub esp 34h +
mov ebx [esp+34h+arg_0] +
lea eax [esp+34h+var_9] +
mov [esp+34h+var_20] 5 +
mov [esp+34h+var_24] eax +
mov [esp+34h+var_28] 0 +
mov [esp+34h+var_2C] 0 +
mov [esp+34h+var_30] 1 +
mov [esp+34h+var_34] ebx +
call sub_42EDC0  +
test eax eax +
js loc_42F1D2  +
lea eax [esp+34h+var_14] +
mov [esp+34h+var_28] eax +
lea eax [esp+34h+var_D] +
mov [esp+34h+var_24] offset aGetInfoSerialN +
mov [esp+34h+var_2C] 4 +
mov [esp+34h+var_30] eax +
mov [esp+34h+var_34] ebx +
mov byte ptr [esp+34h+var_D] 0 +
mov byte ptr [esp+34h+var_D+1] 0 +
mov byte ptr [esp+34h+var_D+2] 0 +
mov byte ptr [esp+34h+var_D+3] 81h +
call sub_42C8A0  +
test eax eax +
mov esi eax +
js loc_42F1D2  +
mov eax [esp+34h+var_14] +
cmp byte ptr [eax+1] 81h +
jz loc_42F1D8  +
mov eax ds:dword_486584 +
mov [esp+34h+var_30] offset aSJtag3_display +
mov [esp+34h+var_34] 0 +
mov [esp+34h+var_2C] eax +
call sub_401740  +
mov eax [esp+34h+var_14] +
mov [esp+34h+var_34] eax +
call free  +
add esp 34h +
pop ebx  +
pop esi  +
retn   +
lea edx [esi-3] +
mov [esp+34h+var_2C] edx +
lea edx [eax+3] +
mov [esp+34h+var_30] edx +
mov [esp+34h+var_34] eax +
call memmove  +
mov eax [esp+34h+var_14] +
mov byte ptr [eax+esi-3] 0 +
movzx eax byte ptr [esp+34h+var_9] +
mov [esp+34h+var_30] offset aSiceHardware_0 +
mov [esp+34h+var_34] 0 +
mov [esp+34h+var_28] eax +
mov eax [esp+34h+arg_4] +
mov [esp+34h+var_2C] eax +
call sub_401740  +
movzx eax [esp+34h+var_5] +
movzx edx byte ptr [esp+34h+var_9+3] +
mov [esp+34h+var_30] offset aSiceFirmware_0 +
mov [esp+34h+var_34] 0 +
shl eax 8 +
or eax edx +
mov [esp+34h+var_20] eax +
movzx eax byte ptr [esp+34h+var_9+2] +
mov [esp+34h+var_24] eax +
movzx eax byte ptr [esp+34h+var_9+1] +
mov [esp+34h+var_28] eax +
mov eax [esp+34h+arg_4] +
mov [esp+34h+var_2C] eax +
call sub_401740  +
mov eax [esp+34h+var_14] +
mov [esp+34h+var_30] offset aSserialNumberS +
mov [esp+34h+var_34] 0 +
mov [esp+34h+var_28] eax +
mov eax [esp+34h+arg_4] +
mov [esp+34h+var_2C] eax +
call sub_401740  +
mov eax [esp+34h+var_14] +
mov [esp+34h+var_34] eax +
call free  +
mov edx [esp+34h+arg_4] +
mov eax ebx +
call sub_42EF00  +
jmp loc_42F1D2  +
***
push esi  +
push ebx  +
sub esp 7Ch +
mov eax [esp+7Ch+arg_4] +
mov [esp+7Ch+var_78] offset aSJtag3_setparm +
mov [esp+7Ch+var_7C] 2 +
mov esi eax +
mov [esp+7Ch+var_5C] eax +
mov eax [esp+7Ch+arg_8] +
mov ebx eax +
mov [esp+7Ch+var_58] eax +
mov eax [esp+7Ch+arg_C] +
mov edi eax +
mov [esp+7Ch+var_54] eax +
mov eax [esp+7Ch+arg_14] +
mov ebp eax +
mov [esp+7Ch+var_50] eax +
mov eax ds:dword_486584 +
mov [esp+7Ch+var_74] eax +
call sub_401740  +
mov eax edi +
movzx eax al +
mov [esp+7Ch+var_6C] eax +
movzx eax bl +
mov [esp+7Ch+var_70] eax +
mov eax esi +
movzx eax al +
lea esi [esp+7Ch+var_48] +
mov [esp+7Ch+var_74] eax +
mov [esp+7Ch+var_78] offset aSetParameterSc +
mov [esp+7Ch+var_7C] esi +
call sprintf  +
mov eax ebp +
movzx ebp al +
lea ebx [ebp+6] +
mov [esp+7Ch+var_7C] ebx +
call malloc  +
test eax eax +
mov edi eax +
jz loc_42F3C7  +
movzx eax byte ptr [esp+7Ch+var_5C] +
mov ecx [esp+7Ch+arg_10] +
mov byte ptr [edi+1] 1 +
mov byte ptr [edi+2] 0 +
mov [edi] al +
movzx eax byte ptr [esp+7Ch+var_58] +
mov [edi+3] al +
movzx eax byte ptr [esp+7Ch+var_54] +
mov [edi+4] al +
movzx eax byte ptr [esp+7Ch+var_50] +
mov [edi+5] al +
lea eax [edi+6] +
mov [esp+7Ch+var_78] ecx +
mov [esp+7Ch+var_74] ebp +
mov [esp+7Ch+var_7C] eax +
call memcpy  +
lea eax [esp+7Ch+var_4C] +
mov [esp+7Ch+var_70] eax +
mov eax [esp+7Ch+arg_0] +
mov [esp+7Ch+var_74] ebx +
mov [esp+7Ch+var_6C] esi +
mov [esp+7Ch+var_78] edi +
mov [esp+7Ch+var_7C] eax +
call sub_42C8A0  +
mov [esp+7Ch+var_7C] edi +
mov ebx eax +
call free  +
test ebx ebx +
jle loc_42F3BD  +
mov eax [esp+7Ch+var_4C] +
mov [esp+7Ch+var_7C] eax +
call free  +
add esp 7Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ds:dword_486584 +
mov ebx 0FFFFFFFFh +
mov [esp+7Ch+var_78] offset aSJtag3_setpa_0 +
mov [esp+7Ch+var_7C] 0 +
mov [esp+7Ch+var_74] eax +
call sub_401740  +
jmp loc_42F3BD  +
***
push esi  +
push ebx  +
sub esp 8Ch +
mov ebp [esp+8Ch+arg_0] +
lea ebx [esp+8Ch+var_3F] +
mov [esp+8Ch+var_78] 2 +
mov [esp+8Ch+var_7C] ebx +
mov [esp+8Ch+var_80] 1 +
mov [esp+8Ch+var_84] 0 +
mov [esp+8Ch+var_88] 1 +
mov [esp+8Ch+var_8C] ebp +
call sub_42EDC0  +
test eax eax +
js loc_42F5D1  +
cmp dword ptr [ebp+8ACh] 1FFh +
movzx eax byte ptr [ebp+0A60h] +
jg loc_42F454  +
test al 8 +
jz loc_42FD20  +
test al 1 +
jz loc_42F5E1  +
mov eax [esp+8Ch+arg_4] +
mov eax [eax+84h] +
test al 40h +
jnz loc_42F630  +
mov eax offset aDebugwire_1 +
mov [esp+8Ch+var_7C] eax +
mov eax [esp+8Ch+arg_4] +
mov [esp+8Ch+var_88] offset aSJtag3_initi_0 +
mov [esp+8Ch+var_8C] 0 +
mov [esp+8Ch+var_80] eax +
mov eax ds:dword_486584 +
mov [esp+8Ch+var_84] eax +
call sub_401740  +
add esp 8Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
movzx eax [esp-10h+arg_54] +
mov [esp-10h+arg_0] offset aUpdiSetXdProg_ +
mov dword ptr [esp+0] 2 +
mov [esp-10h+arg_20] eax +
movzx eax [esp-10h+arg_53] +
mov [esp-10h+arg_1C] eax +
movzx eax [esp-10h+arg_52] +
mov [esp-10h+arg_18] eax +
movzx eax [esp-10h+arg_51] +
mov [esp-10h+arg_14] eax +
movzx eax [esp-10h+arg_50] +
mov [esp-10h+arg_10] eax +
movzx eax [esp-10h+arg_4F] +
mov [esp-10h+arg_C] eax +
movzx eax [esp-10h+arg_4E] +
mov [esp-10h+arg_8] eax +
movzx eax [esp-10h+arg_4D] +
mov [esp-10h+arg_4] eax +
call sub_401740  +
mov [esp-10h+arg_10] 8 +
lea eax [esp-10h+arg_4D] +
mov [esp-10h+arg_34] eax +
mov [esp-10h+arg_C] eax +
mov [esp-10h+arg_8] 0 +
mov [esp-10h+arg_4] 2 +
mov [esp-10h+arg_0] 12h +
mov [esp+0] ebp +
call sub_42F2A0  +
test eax eax +
js loc_42F5D1  +
mov edi [esp-10h+arg_34] +
xor ebx ebx +
lea esi [esp-10h+arg_44] +
mov [esp-10h+arg_C] offset aAvrSignOn_0 +
mov [esp-10h+arg_8] esi +
mov [esp-10h+arg_4] 4 +
mov [esp-10h+arg_0] edi +
mov [esp+0] ebp +
mov [esp-10h+arg_4D] 12h +
mov [esp-10h+arg_4E] 10h +
mov [esp-10h+arg_4F] 0 +
mov [esp-10h+arg_50] bl +
call sub_42C8A0  +
test eax eax +
jns loc_42FE84  +
mov eax ds:dword_486584 +
add ebx 1 +
mov [esp-10h+arg_0] offset aSRetryingWit_0 +
mov dword ptr [esp+0] 0 +
mov [esp-10h+arg_4] eax +
call sub_401740  +
cmp ebx 2 +
jnz loc_42F554  +
mov eax ds:dword_486584 +
mov [esp-10h+arg_0] offset aSJtagenFuseD_0 +
mov dword ptr [esp+0] 0 +
mov [esp-10h+arg_4] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
add esp 8Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test al 2 +
jz loc_42F605  +
mov eax [esp+8Ch+arg_4] +
test byte ptr [eax+84h] 80h +
jz loc_42FD90  +
mov esi 6 +
mov byte ptr [esp+8Ch+var_3F] 3 +
jmp loc_42F647  +
test al 10h +
mov eax [esp+8Ch+arg_4] +
mov eax [eax+84h] +
jz loc_42FDA0  +
test ah 20h +
jnz loc_430000  +
mov eax offset aUpdi +
jmp loc_42F476  +
mov esi 5 +
test al 80h +
jnz loc_42F5FE  +
test ah 20h +
jz loc_42FCD0  +
mov byte ptr [esp+8Ch+var_3F] 5 +
mov [esp+8Ch+var_78] 1 +
mov [esp+8Ch+var_7C] ebx +
mov [esp+8Ch+var_80] 0 +
mov [esp+8Ch+var_84] 0 +
mov [esp+8Ch+var_88] 12h +
mov [esp+8Ch+var_8C] ebp +
call sub_42F2A0  +
test eax eax +
js loc_42F5D1  +
mov [esp+8Ch+var_78] 1 +
mov [esp+8Ch+var_7C] ebx +
mov [esp+8Ch+var_80] 1 +
mov [esp+8Ch+var_84] 0 +
mov [esp+8Ch+var_88] 12h +
mov [esp+8Ch+var_8C] ebp +
mov byte ptr [esp+8Ch+var_3F] 1 +
call sub_42F2A0  +
test eax eax +
js loc_42F5D1  +
mov eax esi +
mov [esp+8Ch+var_78] 1 +
mov [esp+8Ch+var_7C] ebx +
mov [esp+8Ch+var_80] 0 +
mov [esp+8Ch+var_84] 1 +
mov [esp+8Ch+var_88] 12h +
mov [esp+8Ch+var_8C] ebp +
mov byte ptr [esp+8Ch+var_3F] al +
call sub_42F2A0  +
test eax eax +
js loc_42F5D1  +
mov eax esi +
cmp al 8 +
jz loc_42F6FC  +
cmp al 6 +
jnz loc_42F8B0  +
mov eax [ebp+0A5Ch] +
mov dword ptr [eax+28h] offset sub_430290 +
fld  qword ptr [ebp+890h] +
fldz   +
fxch  st(1) +
fucomi st st(1) +
fstp  st(1) +
jp loc_42F71F  +
jz loc_42F7A0  +
mov eax [ebp+0A5Ch] +
mov edi [eax+28h] +
test edi edi +
jz loc_42F7A4  +
fdivr  ds:dbl_477430 +
fnstcw  [esp+8Ch+var_4E] +
mov [esp+8Ch+var_88] offset aSJtag3_initi_1 +
mov [esp+8Ch+var_8C] 2 +
movzx eax [esp+8Ch+var_4E] +
mov ah 0Ch +
mov [esp+8Ch+var_50] ax +
fldcw  [esp+8Ch+var_50] +
fistp  [esp+8Ch+var_5C] +
fldcw  [esp+8Ch+var_4E] +
mov eax dword ptr [esp+8Ch+var_5C] +
mov edi eax +
mov [esp+8Ch+var_80] eax +
mov eax ds:dword_486584 +
mov [esp+8Ch+var_84] eax +
call sub_401740  +
mov eax edi +
mov byte ptr [esp+8Ch+var_3F] al +
mov eax edi +
shr eax 8 +
mov byte ptr [esp+8Ch+var_3F+1] al +
mov eax [ebp+0A5Ch] +
mov eax [eax+28h] +
mov [esp+8Ch+var_88] ebx +
mov [esp+8Ch+var_8C] ebp +
call eax  +
test eax eax +
jns loc_42F7A6  +
jmp loc_42F5D1  +
fstp  st +
jmp loc_42F7A6  +
fstp  st +
mov eax esi +
cmp al 4 +
jz loc_42FDB2  +
mov eax [esp+8Ch+arg_4] +
mov eax [eax+84h] +
test al 80h +
jnz loc_42FB00  +
test ah 20h +
jz loc_42F8E0  +
mov eax [esp+8Ch+arg_4] +
movzx eax word ptr [eax+140h] +
mov [esp+8Ch+var_37] al +
shr ax 8 +
mov [esp+8Ch+var_36] al +
mov eax [esp+8Ch+arg_4] +
movzx eax word ptr [eax+144h] +
mov [esp+8Ch+var_35] al +
shr ax 8 +
mov [esp+8Ch+var_34] al +
mov eax [esp+8Ch+arg_4] +
mov eax [eax+17Ch] +
mov [esp+8Ch+var_8C] eax +
call sub_406F20  +
mov [esp+8Ch+var_60] offset aFlash_13 +
test eax eax +
mov ebx eax +
jnz loc_42F86D  +
jmp loc_42F4B2  +
movzx eax word ptr [eax+50h] +
mov [esp+8Ch+var_3B] al +
shr ax 8 +
mov [esp+8Ch+var_3A] al +
mov ecx [edx+70h] +
mov eax [edx+48h] +
mov edx [ebp+0A5Ch] +
test ecx ecx +
jz loc_42F8A8  +
cmp ecx eax +
jge loc_42F8A8  +
mov [edx+0Ch] ecx +
mov [esp+53h] al +
mov [esp+8Ch+var_8C] ebx +
call sub_406F40  +
test eax eax +
mov ebx eax +
jz loc_42F4B2  +
mov [esp+8Ch+var_8C] ebx +
call sub_406F60  +
mov edi [esp+8Ch+var_60] +
mov ecx 6 +
mov esi eax +
mov edx eax +
cmps   +
jz loc_42F830  +
mov edi offset aEeprom_10 +
mov esi eax +
mov ecx 7 +
cmps   +
jnz loc_42F85B  +
mov eax [eax+48h] +
mov edx [ebp+0A5Ch] +
mov [edx+18h] eax +
mov [esp+8Ch+var_38] al +
jmp loc_42F85B  +
mov [edx+0Ch] eax +
jmp loc_42F857  +
mov eax esi +
cmp al 4 +
jnz loc_42F709  +
mov eax [esp+8Ch+arg_4] +
test byte ptr [eax+84h] 80h +
mov eax [ebp+0A5Ch] +
jz loc_42FFF0  +
mov dword ptr [eax+28h] offset sub_430250 +
jmp loc_42F709  +
lea eax [esp+8Ch+var_3B] +
mov ecx 1Fh +
test al 1 +
mov edx eax +
mov [esp+8Ch+var_54] eax +
jnz loc_43010C  +
test dl 2 +
jnz loc_43011C  +
mov ebx ecx +
xor eax eax +
and ebx 0FFFFFFFCh +
mov dword ptr [edx+eax] 0 +
add eax 4 +
cmp eax ebx +
jb loc_42F907  +
add edx eax +
test cl 2 +
jz loc_42F925  +
xor ebx ebx +
add edx 2 +
mov [edx-2] bx +
and ecx 1 +
jz loc_42F92D  +
mov byte ptr [edx] 0 +
mov eax [esp+8Ch+arg_4] +
mov eax [eax+17Ch] +
mov [esp+8Ch+var_8C] eax +
call sub_406F20  +
test eax eax +
mov ebx eax +
jz loc_43012D  +
xor eax eax +
mov [esp+8Ch+arg_0] ebp +
mov ebp eax +
mov [esp+8Ch+var_60] offset aFlash_13 +
jmp loc_42F9F7  +
mov ecx [eax+70h] +
mov edi [esp+8Ch+arg_0] +
mov eax [eax+48h] +
test ecx ecx +
jz loc_430065  +
cmp ecx eax +
jge loc_430065  +
mov esi [edi+0A5Ch] +
mov [esi+0Ch] ecx +
movzx ecx ax +
neg eax  +
mov [esp+8Ch+var_3B] cl +
shr cx 8 +
mov [esp+8Ch+var_3A] cl +
mov ebp [edx+44h] +
mov edx ebp +
mov [esp+53h] dl +
mov edx ebp +
shr edx 8 +
mov [esp+8Ch+var_38] dl +
mov edx ebp +
shr edx 10h +
mov [esp+8Ch+var_37] dl +
mov edx ebp +
shr edx 18h +
lea eax [ebp+eax*4+0] +
mov [esp+8Ch+var_36] dl +
mov edx eax +
shr edx 1Fh +
add eax edx +
sar eax 1 +
mov edx eax +
shr edx 8 +
mov [esp+8Ch+var_30] dl +
mov edx eax +
mov [esp+8Ch+var_31] al +
shr edx 10h +
shr eax 18h +
mov [esp+8Ch+var_2F] dl +
mov [esp+8Ch+var_2E] al +
mov [esp+8Ch+var_8C] ebx +
call sub_406F40  +
test eax eax +
mov ebx eax +
jz loc_42FA59  +
mov [esp+8Ch+var_8C] ebx +
call sub_406F60  +
mov edi [esp+8Ch+var_60] +
mov ecx 6 +
mov esi eax +
mov edx eax +
cmps   +
jz loc_42F964  +
mov edi offset aEeprom_10 +
mov esi eax +
mov ecx 7 +
cmps   +
jnz loc_42F9E9  +
mov edi [esp+8Ch+arg_0] +
mov eax [eax+48h] +
mov ecx [edi+0A5Ch] +
mov [ecx+18h] eax +
mov [esp+8Ch+var_29] al +
movzx eax word ptr [edx+44h] +
mov [esp+8Ch+var_8C] ebx +
mov [esp+8Ch+var_2B] al +
shr ax 8 +
mov [esp+8Ch+var_2A] al +
call sub_406F40  +
test eax eax +
mov ebx eax +
jnz loc_42F9F7  +
mov esi ebp +
mov ebp [esp+8Ch+arg_0] +
mov eax [esp+8Ch+arg_4] +
mov eax [eax+148h] +
cmp eax 0FFFFFFFFh +
jz loc_4300A0  +
mov [esp+8Ch+var_28] al +
mov eax [esp+8Ch+arg_4] +
mov [esp+8Ch+var_27] 1 +
mov eax [eax+84h] +
shr eax 4 +
and eax 1 +
mov [esp+8Ch+var_26] al +
mov eax [esp+8Ch+arg_4] +
movzx eax byte ptr [eax+134h] +
mov [esp+8Ch+var_23] al +
mov eax [esp+8Ch+arg_4] +
movzx eax word ptr [eax+138h] +
test ax ax +
jz loc_430073  +
lea ebx [eax-1Dh] +
lea ecx [eax-1Eh] +
lea edx [eax-20h] +
sub eax 1Fh +
mov [esp+8Ch+var_1F] al +
mov eax [esp+8Ch+arg_4] +
mov [esp+8Ch+var_22] bl +
mov [esp+8Ch+var_21] cl +
mov [esp+8Ch+var_20] dl +
movzx eax byte ptr [eax+136h] +
mov [esp+8Ch+var_78] 1Fh +
mov [esp+8Ch+var_1E] al +
mov eax [esp+8Ch+var_54] +
jmp loc_42F51E  +
mov eax [esp+8Ch+arg_4] +
movzx eax word ptr [eax+140h] +
mov [esp+8Ch+var_10] al +
shr ax 8 +
mov [esp+8Ch+var_F] al +
mov eax [esp+8Ch+arg_4] +
movzx eax word ptr [eax+13Ch] +
mov [esp+8Ch+var_E] al +
shr ax 8 +
mov [esp+8Ch+var_D] al +
mov eax [esp+8Ch+arg_4] +
mov eax [eax+17Ch] +
mov [esp+8Ch+var_8C] eax +
call sub_406F20  +
mov [esp+8Ch+var_60] offset aFlash_13 +
test eax eax +
mov ebx eax +
jnz loc_42FB9C  +
jmp loc_42FC13  +
mov ecx [eax+70h] +
mov edx [ebp+0A5Ch] +
mov eax [eax+48h] +
test ecx ecx +
jz loc_42FC20  +
cmp ecx eax +
jge loc_42FC20  +
mov [edx+0Ch] ecx +
movzx eax ax +
mov [esp+8Ch+var_15] al +
shr ax 8 +
mov [esp+8Ch+var_14] al +
mov [esp+8Ch+var_8C] ebx +
call sub_406F40  +
test eax eax +
mov ebx eax +
jz loc_42FC13  +
mov [esp+8Ch+var_8C] ebx +
call sub_406F60  +
mov edi [esp+8Ch+var_60] +
mov ecx 6 +
mov esi eax +
mov edx eax +
cmps   +
jz loc_42FB60  +
mov edi offset aEeprom_10 +
mov esi eax +
mov ecx 7 +
cmps   +
jnz loc_42FC28  +
mov eax [eax+48h] +
mov ecx [ebp+0A5Ch] +
mov [ecx+18h] eax +
mov [esp+8Ch+var_11] al +
movzx eax word ptr [edx+44h] +
mov [esp+8Ch+var_13] al +
shr ax 8 +
mov [esp+8Ch+var_12] al +
mov eax [edx+50h] +
mov [esp+8Ch+var_8C] ebx +
mov edx eax +
shr edx 8 +
mov [esp+8Ch+var_32] dl +
mov edx eax +
shr edx 10h +
mov [esp+8Ch+var_33] al +
shr eax 18h +
mov [esp+8Ch+var_31] dl +
mov [esp+8Ch+var_30] al +
call sub_406F40  +
test eax eax +
mov ebx eax +
jnz loc_42FB9C  +
mov [esp+8Ch+var_78] 2Fh +
jmp loc_42F516  +
mov [edx+0Ch] eax +
jmp loc_42FB7F  +
mov edi offset aApplication_5 +
mov ecx 0Ch +
mov esi eax +
cmps   +
jnz loc_42FC80  +
mov eax [eax+44h] +
mov ecx eax +
shr ecx 8 +
mov [esp+8Ch+var_1A] cl +
mov ecx eax +
mov [esp+8Ch+var_1B] al +
shr ecx 10h +
shr eax 18h +
mov [esp+8Ch+var_19] cl +
mov [esp+8Ch+var_18] al +
mov eax [edx+50h] +
mov edx eax +
shr edx 8 +
mov [esp+8Ch+var_3A] dl +
mov edx eax +
mov [esp+8Ch+var_3B] al +
shr edx 10h +
shr eax 18h +
mov [esp+53h] dl +
mov [esp+8Ch+var_38] al +
jmp loc_42FB8E  +
mov edi offset aBoot_3 +
mov ecx 5 +
mov esi eax +
cmps   +
jz loc_42FCE6  +
mov edi offset aFuse1_0 +
mov esi eax +
mov ecx 6 +
cmps   +
jnz loc_42FE37  +
mov eax [eax+50h] +
and eax 0FFFFFFF8h +
mov edx eax +
shr edx 8 +
mov [esp+8Ch+var_2E] dl +
mov edx eax +
mov [esp+8Ch+var_2F] al +
shr edx 10h +
shr eax 18h +
mov [esp+8Ch+var_2D] dl +
mov [esp+8Ch+var_2C] al +
jmp loc_42FB8E  +
and eax 40h +
cmp eax 1 +
sbb eax eax +
not eax  +
add eax 2 +
mov byte ptr [esp+8Ch+var_3F] al +
jmp loc_42F647  +
movzx eax word ptr [eax+44h] +
mov [esp+8Ch+var_17] al +
shr ax 8 +
mov [esp+8Ch+var_16] al +
mov eax [edx+50h] +
mov edx eax +
shr edx 8 +
mov [esp+8Ch+var_36] dl +
mov edx eax +
mov [esp+8Ch+var_37] al +
shr edx 10h +
shr eax 18h +
mov [esp+8Ch+var_35] dl +
mov [esp+8Ch+var_34] al +
jmp loc_42FB8E  +
movzx eax byte ptr [esp+8Ch+var_3F+1] +
mov [esp+8Ch+var_88] offset aSTheJtagice3SF +
mov [esp+8Ch+var_8C] 0 +
mov [esp+8Ch+var_7C] eax +
movzx eax byte ptr [esp+8Ch+var_3F] +
mov [esp+8Ch+var_80] eax +
mov eax ds:dword_486584 +
mov [esp+8Ch+var_84] eax +
call sub_401740  +
mov eax ds:dword_4866A4 +
test eax eax +
jz loc_42F5D1  +
mov eax ds:dword_486584 +
mov [esp+8Ch+var_88] offset aSForcedToConti +
mov [esp+8Ch+var_8C] 0 +
mov [esp+8Ch+var_84] eax +
call sub_401740  +
movzx eax byte ptr [ebp+0A60h] +
test al 1 +
jz loc_42F5E1  +
jmp loc_42F45C  +
mov eax offset aPdi_1 +
jmp loc_42F476  +
test al 8 +
jnz loc_430010  +
mov eax offset aJtag_1 +
jmp loc_42F476  +
mov eax [ebp+0A5Ch] +
movzx edx byte ptr [eax+23h] +
mov [esp+8Ch+var_74] edx +
movzx edx byte ptr [eax+22h] +
mov [esp+8Ch+var_78] edx +
movzx edx byte ptr [eax+21h] +
mov [esp+8Ch+var_7C] edx +
movzx eax byte ptr [eax+20h] +
mov [esp+8Ch+var_88] offset aSJtag3_initi_2 +
mov [esp+8Ch+var_8C] 2 +
mov [esp+8Ch+var_80] eax +
mov eax ds:dword_486584 +
mov [esp+8Ch+var_84] eax +
call sub_401740  +
mov [esp+8Ch+var_78] 4 +
mov eax [ebp+0A5Ch] +
mov [esp+8Ch+var_80] 1 +
mov [esp+8Ch+var_84] 1 +
mov [esp+8Ch+var_88] 12h +
add eax 20h +
mov [esp+8Ch+var_7C] eax +
mov [esp+8Ch+var_8C] ebp +
call sub_42F2A0  +
test eax eax +
jns loc_42F7B0  +
jmp loc_42F5D1  +
mov edi offset aLock_5 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_430040  +
mov edi offset aUsersig_1 +
mov ecx 8 +
mov esi eax +
cmps   +
jnz loc_430134  +
mov eax [eax+50h] +
mov edx eax +
shr edx 8 +
mov [esp+8Ch+var_26] dl +
mov edx eax +
mov [esp+8Ch+var_27] al +
shr edx 10h +
shr eax 18h +
mov [esp+8Ch+var_25] dl +
mov [esp+8Ch+var_24] al +
jmp loc_42FB8E  +
mov edx [esp-10h+arg_44] +
cmp byte ptr [edx+1] 84h +
jz loc_42FF65  +
mov [esp+0] edx +
call free  +
mov eax [esp-10h+arg_A0] +
mov edx [ebp+0A5Ch] +
test byte ptr [eax+84h] 80h +
mov dword ptr [edx+24h] 0FFFFFFFFh +
jnz loc_42FF20  +
mov eax [edx+4] +
mov [esp+0] eax +
call free  +
mov eax [ebp+0A5Ch] +
mov eax [eax+10h] +
mov [esp+0] eax +
call free  +
mov ebx [ebp+0A5Ch] +
mov eax [ebx+0Ch] +
mov [esp+0] eax +
call malloc  +
test eax eax +
mov [ebx+4] eax +
jz loc_4301A2  +
mov eax [ebx+18h] +
mov [esp+0] eax +
call malloc  +
test eax eax +
mov [ebx+10h] eax +
jz loc_4301C9  +
mov dword ptr [ebx+14h] 0FFFFFFFFh +
xor eax eax +
mov dword ptr [ebx+8] 0FFFFFFFFh +
add esp 8Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp-10h+arg_0] offset aBoot_3 +
mov [esp+0] eax +
call sub_407980  +
mov [esp-10h+arg_0] offset aFlash_13 +
mov esi eax +
mov eax [esp-10h+arg_A0] +
mov [esp+0] eax +
call sub_407980  +
test eax eax +
jz loc_42FFC4  +
test esi esi +
jz loc_42FFC4  +
mov ecx [esi+50h] +
mov edx [ebp+0A5Ch] +
sub ecx [eax+50h] +
mov [edx+24h] ecx +
jmp loc_42FEB7  +
cmp eax 6 +
jle loc_42FE92  +
mov eax [esp-10h+arg_A0] +
test byte ptr [eax+85h] 20h +
movzx eax byte ptr [edx+6] +
mov [esp-10h+arg_14] eax +
movzx eax byte ptr [edx+5] +
mov [esp-10h+arg_10] eax +
movzx eax byte ptr [edx+4] +
mov [esp-10h+arg_C] eax +
movzx eax byte ptr [edx+3] +
mov [esp-10h+arg_8] eax +
mov eax ds:dword_486584 +
mov [esp-10h+arg_4] eax +
jz loc_430020  +
mov [esp-10h+arg_0] offset aSPartialFamily +
mov dword ptr [esp+0] 1 +
call sub_401740  +
mov edx [esp-10h+arg_44] +
jmp loc_42FE92  +
mov eax ds:dword_486584 +
mov [esp-10h+arg_0] offset aSJtagmk3_initi +
mov dword ptr [esp+0] 0 +
mov [esp-10h+arg_4] eax +
call sub_401740  +
mov edx [ebp+0A5Ch] +
jmp loc_42FEB7  +
mov dword ptr [eax+28h] offset sub_430210 +
jmp loc_42F709  +
mov esi 8 +
jmp loc_42F635  +
mov esi 4 +
jmp loc_42F635  +
mov [esp-10h+arg_0] offset aSJtagIdReturne +
mov dword ptr [esp+0] 1 +
call sub_401740  +
mov edx [esp-10h+arg_44] +
jmp loc_42FE92  +
mov eax [eax+50h] +
mov edx eax +
shr edx 8 +
mov [esp+8Ch+var_2A] dl +
mov edx eax +
mov [esp+8Ch+var_2B] al +
shr edx 10h +
shr eax 18h +
mov [esp+8Ch+var_29] dl +
mov [esp+8Ch+var_28] al +
jmp loc_42FB8E  +
mov ecx [edi+0A5Ch] +
mov [ecx+0Ch] eax +
jmp loc_42F98A  +
mov eax [esp+8Ch+arg_4] +
mov edx 3Fh +
mov ecx 21h +
mov ebx 22h +
mov [eax+138h] dx +
mov eax 20h +
mov edx 1Fh +
jmp loc_42FACD  +
mov eax [esp+8Ch+arg_4] +
test byte ptr [eax+84h] 40h +
jnz loc_430100  +
cmp esi 20001h +
sbb ebx ebx +
add ebx 4 +
cmp esi 20001h +
sbb eax eax +
add eax 4 +
mov [esp+8Ch+var_7C] eax +
mov eax [esp+8Ch+arg_4] +
mov [esp+8Ch+var_88] offset aSPartDefinitio +
mov [esp+8Ch+var_8C] 0 +
mov [esp+8Ch+var_80] eax +
mov eax ds:dword_486584 +
mov [esp+8Ch+var_84] eax +
call sub_401740  +
mov [esp+8Ch+var_28] bl +
jmp loc_42FA7C  +
mov ebx 1 +
mov eax 1 +
jmp loc_4300C6  +
mov [esp+8Ch+var_3B] 0 +
lea edx [esp+8Ch+var_3A] +
mov cl 1Eh +
jmp loc_42F8F7  +
xor esi esi +
add edx 2 +
mov [edx-2] si +
sub ecx 2 +
jmp loc_42F900  +
xor esi esi +
jmp loc_42FA62  +
mov edi offset aProdsig_0 +
mov ecx 8 +
mov esi eax +
cmps   +
jnz loc_430169  +
mov eax [eax+50h] +
mov edx eax +
shr edx 8 +
mov [esp+8Ch+var_22] dl +
mov edx eax +
mov [esp+8Ch+var_23] al +
shr edx 10h +
shr eax 18h +
mov [esp+8Ch+var_21] dl +
mov [esp+8Ch+var_20] al +
jmp loc_42FB8E  +
mov edi offset aData_1 +
mov ecx 5 +
mov esi eax +
cmps   +
jnz loc_42FB8E  +
mov eax [eax+50h] +
mov edx eax +
shr edx 8 +
mov [esp+8Ch+var_1E] dl +
mov edx eax +
mov [esp+8Ch+var_1F] al +
shr edx 10h +
shr eax 18h +
mov [esp+8Ch+var_1D] dl +
mov [esp+8Ch+var_1C] al +
jmp loc_42FB8E  +
mov eax ds:dword_486584 +
mov [esp-10h+arg_0] offset aSJtag3_initi_3 +
mov dword ptr [esp+0] 0 +
mov [esp-10h+arg_4] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_42F5D6  +
mov eax ds:dword_486584 +
mov [esp-10h+arg_0] offset aSJtag3_initi_3 +
mov dword ptr [esp+0] 0 +
mov [esp-10h+arg_4] eax +
call sub_401740  +
mov eax [ebp+0A5Ch] +
mov eax [eax+4] +
mov [esp+0] eax +
call free  +
mov eax 0FFFFFFFFh +
jmp loc_42F5D6  +
***
jmp sub_430210  +
***
sub esp 2Ch +
mov eax [esp+2Ch+arg_4] +
mov [esp+2Ch+var_18] 2 +
mov [esp+2Ch+var_20] 20h +
mov [esp+2Ch+var_24] 1 +
mov [esp+2Ch+var_1C] eax +
mov eax [esp+2Ch+arg_0] +
mov [esp+2Ch+var_28] 12h +
mov [esp+2Ch+var_2C] eax +
call sub_42F2A0  +
add esp 2Ch +
retn   +
***
sub esp 2Ch +
mov eax [esp+2Ch+arg_4] +
mov [esp+2Ch+var_18] 2 +
mov [esp+2Ch+var_20] 30h +
mov [esp+2Ch+var_24] 1 +
mov [esp+2Ch+var_1C] eax +
mov eax [esp+2Ch+arg_0] +
mov [esp+2Ch+var_28] 12h +
mov [esp+2Ch+var_2C] eax +
call sub_42F2A0  +
add esp 2Ch +
retn   +
***
sub esp 2Ch +
mov eax [esp+2Ch+arg_4] +
mov [esp+2Ch+var_18] 2 +
mov [esp+2Ch+var_20] 31h +
mov [esp+2Ch+var_24] 1 +
mov [esp+2Ch+var_1C] eax +
mov eax [esp+2Ch+arg_0] +
mov [esp+2Ch+var_28] 12h +
mov [esp+2Ch+var_2C] eax +
call sub_42F2A0  +
add esp 2Ch +
retn   +
***
sub esp 34h +
mov ebx [esp+34h+arg_0] +
lea esi [esp+34h+var_C] +
mov [esp+34h+var_20] 1 +
mov [esp+34h+var_24] esi +
mov [esp+34h+var_28] 7 +
mov [esp+34h+var_2C] 3 +
mov [esp+34h+var_30] 12h +
mov [esp+34h+var_34] ebx +
mov byte ptr [esp+34h+var_C] 1 +
call sub_42F2A0  +
test eax eax +
js loc_4303A3  +
lea eax [esp+34h+var_10] +
mov [esp+34h+var_24] offset aEnterProgmode +
mov [esp+34h+var_28] eax +
mov [esp+34h+var_2C] 3 +
mov [esp+34h+var_30] esi +
mov [esp+34h+var_34] ebx +
mov byte ptr [esp+34h+var_C] 12h +
mov byte ptr [esp+34h+var_C+1] 15h +
mov byte ptr [esp+34h+var_C+2] 0 +
call sub_42C8A0  +
test eax eax +
js loc_4303A3  +
mov eax [ebx+0A5Ch] +
mov byte ptr [esp+34h+var_C] 0 +
mov dword ptr [eax+1Ch] 1 +
mov [esp+34h+var_20] 1 +
mov [esp+34h+var_24] esi +
mov [esp+34h+var_28] 7 +
mov [esp+34h+var_2C] 3 +
mov [esp+34h+var_30] 12h +
mov [esp+34h+var_34] ebx +
call sub_42F2A0  +
test eax eax +
js loc_4303A3  +
mov eax [esp+34h+var_10] +
mov [esp+34h+var_34] eax +
call free  +
add esp 34h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
add esp 34h +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
retn   +
***
mov eax [esp+arg_0] +
mov dword ptr [eax+54h] 4741544Ah +
mov dword ptr [eax+58h] 33454349h +
mov byte ptr [eax+5Ch] 0 +
mov dword ptr [eax+8C8h] offset sub_42F3F0 +
mov dword ptr [eax+8CCh] offset sub_42F120 +
mov dword ptr [eax+8D0h] offset dword_42B3D0 +
mov dword ptr [eax+8D4h] offset sub_42E780 +
mov dword ptr [eax+8E0h] offset sub_42B3C0 +
mov dword ptr [eax+8E4h] offset sub_42E700 +
mov dword ptr [eax+8F8h] offset sub_42EC40 +
mov dword ptr [eax+8FCh] offset sub_42CF90 +
mov dword ptr [eax+914h] offset sub_42D760 +
mov dword ptr [eax+910h] offset sub_42E2B0 +
mov dword ptr [eax+900h] offset sub_42DD60 +
mov dword ptr [eax+904h] offset sub_42D380 +
mov dword ptr [eax+908h] offset sub_42D1E0 +
mov dword ptr [eax+920h] offset sub_42F110 +
mov dword ptr [eax+930h] offset sub_42BCB0 +
mov dword ptr [eax+948h] offset sub_42BB20 +
mov dword ptr [eax+94Ch] offset sub_42BD40 +
mov dword ptr [eax+950h] offset sub_42B840 +
mov dword ptr [eax+8B4h] 100h +
mov byte ptr [eax+0A60h] 4 +
retn   +
***
mov eax [esp+arg_0] +
mov dword ptr [eax+54h] 4741544Ah +
mov dword ptr [eax+58h] 33454349h +
mov dword ptr [eax+5Ch] 57445Fh +
mov dword ptr [eax+8C8h] offset sub_42F3F0 +
mov dword ptr [eax+8CCh] offset sub_42F120 +
mov dword ptr [eax+8D0h] offset dword_42B3D0 +
mov dword ptr [eax+8D4h] offset sub_42E780 +
mov dword ptr [eax+8E0h] offset sub_42B3C0 +
mov dword ptr [eax+8E4h] offset sub_42B3E0 +
mov dword ptr [eax+8F8h] offset sub_42ECA0 +
mov dword ptr [eax+8FCh] offset sub_42CF90 +
mov dword ptr [eax+914h] offset sub_42D760 +
mov dword ptr [eax+910h] offset sub_42E2B0 +
mov dword ptr [eax+900h] offset sub_42DD60 +
mov dword ptr [eax+904h] offset sub_42D380 +
mov dword ptr [eax+920h] offset sub_42F110 +
mov dword ptr [eax+94Ch] offset sub_42BD40 +
mov dword ptr [eax+950h] offset sub_42B840 +
mov dword ptr [eax+8B4h] 100h +
mov byte ptr [eax+0A60h] 1 +
retn   +
***
jmp sub_430560  +
***
mov eax [esp+arg_0] +
mov dword ptr [eax+54h] 4741544Ah +
mov dword ptr [eax+58h] 33454349h +
mov dword ptr [eax+5Ch] 4944505Fh +
mov byte ptr [eax+60h] 0 +
mov dword ptr [eax+8C8h] offset sub_42F3F0 +
mov dword ptr [eax+8CCh] offset sub_42F120 +
mov dword ptr [eax+8D0h] offset dword_42B3D0 +
mov dword ptr [eax+8D4h] offset sub_42E780 +
mov dword ptr [eax+8E0h] offset sub_42B3C0 +
mov dword ptr [eax+8E4h] offset sub_42E700 +
mov dword ptr [eax+8F8h] offset sub_42ED00 +
mov dword ptr [eax+8FCh] offset sub_42CF90 +
mov dword ptr [eax+914h] offset sub_42D760 +
mov dword ptr [eax+910h] offset sub_42E2B0 +
mov dword ptr [eax+900h] offset sub_42DD60 +
mov dword ptr [eax+904h] offset sub_42D380 +
mov dword ptr [eax+908h] offset sub_42D1E0 +
mov dword ptr [eax+920h] offset sub_42F110 +
mov dword ptr [eax+930h] offset sub_42BCB0 +
mov dword ptr [eax+94Ch] offset sub_42BD40 +
mov dword ptr [eax+950h] offset sub_42B840 +
mov dword ptr [eax+8B4h] 100h +
mov byte ptr [eax+0A60h] 2 +
retn   +
***
mov eax [esp+arg_0] +
mov edx 49h +
mov dword ptr [eax+54h] 4741544Ah +
mov dword ptr [eax+58h] 33454349h +
mov dword ptr [eax+5Ch] 4450555Fh +
mov [eax+60h] dx +
mov dword ptr [eax+8C8h] offset sub_42F3F0 +
mov dword ptr [eax+8CCh] offset sub_42F120 +
mov dword ptr [eax+8D0h] offset dword_42B3D0 +
mov dword ptr [eax+8D4h] offset sub_42E780 +
mov dword ptr [eax+8E0h] offset sub_42B3C0 +
mov dword ptr [eax+8E4h] offset sub_42E700 +
mov dword ptr [eax+8F8h] offset sub_42ED60 +
mov dword ptr [eax+8FCh] offset sub_42CF90 +
mov dword ptr [eax+914h] offset sub_42D760 +
mov dword ptr [eax+910h] offset sub_42E2B0 +
mov dword ptr [eax+900h] offset sub_42DD60 +
mov dword ptr [eax+904h] offset sub_42D380 +
mov dword ptr [eax+908h] offset sub_42D1E0 +
mov dword ptr [eax+920h] offset sub_42F110 +
mov dword ptr [eax+930h] offset sub_42BCB0 +
mov dword ptr [eax+94Ch] offset sub_42BD40 +
mov dword ptr [eax+950h] offset sub_42B840 +
mov dword ptr [eax+8B4h] 100h +
mov byte ptr [eax+0A60h] 10h +
mov dword ptr [eax+8E8h] offset sub_4302D0 +
mov dword ptr [eax+91Ch] offset sub_42D090 +
retn   +
***
push esi  +
xor esi esi +
push ebx  +
sub esp 24h +
mov edx [esp+34h] +
mov eax [esp+30h] +
mov ebx [eax+edx*4+17Ch] +
test ebx ebx +
js loc_430801  +
mov edx ds:dword_484CC0[ebx*4] +
test edx edx +
js loc_430810  +
mov dword ptr [esp+8] 0 +
mov dword ptr [esp+4] 0 +
mov [esp] edx +
call _lseek  +
test eax eax +
js loc_430810  +
mov eax ds:dword_484CC0[ebx*4] +
lea edx [esp+1Fh] +
mov dword ptr [esp+8] 1 +
mov [esp+4] edx +
mov [esp] eax +
call _read  +
cmp eax 1 +
jnz loc_430810  +
movzx edx byte ptr [esp+1Fh] +
cmp dl 30h +
jz loc_430820  +
cmp dl 31h +
jnz loc_430810  +
mov ecx esi +
add esp 24h +
movzx esi cl +
sub eax esi +
pop ebx  +
pop esi  +
retn   +
***
and ebx 7FFFFFFFh +
mov esi 1 +
jmp loc_43079A  +
***
add esp 24h +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
retn   +
***
mov eax esi +
add esp 24h +
movzx eax al +
pop ebx  +
pop esi  +
retn   +
***
mov ebx [esp+18h+arg_0] +
sub esp 14h +
mov ebx [esp+14h+arg_0] +
mov esi [esp+14h+arg_4] +
mov eax [ebx+esi*4+17Ch] +
mov eax ds:dword_484CC0[eax*4] +
test eax eax +
js loc_430910  +
mov [esp+14h+var_C] 1 +
mov [esp+14h+var_10] esi +
mov [esp+14h+var_14] ebx +
call sub_430830  +
mov [esp+14h+var_C] 0 +
mov [esp+14h+var_10] esi +
mov [esp+14h+var_14] ebx +
call sub_430830  +
xor eax eax +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov eax 0FFFFFFFFh +
jmp loc_430909  +
***
sub esp 1Ch +
lea eax [esp+1Ch+arg_C] +
mov [esp+1Ch+var_10] eax +
mov eax [esp+1Ch+arg_8] +
mov [esp+1Ch+var_14] eax +
mov eax [esp+1Ch+arg_4] +
mov [esp+1Ch+var_18] eax +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_1C] eax +
call j__vsnprintf  +
add esp 1Ch +
retn   +
***
push ebx  +
push ebx  +
sub esp 24h +
mov [esp+28h+var_24] 1 +
mov [esp+28h+var_28] offset aSysClassGpioUn +
call _open  +
test eax eax +
mov ebx eax +
js loc_430A53  +
mov [esp+28h+var_1C] esi +
lea esi [esp+28h+var_13] +
mov [esp+28h+var_28] esi +
mov [esp+28h+var_20] offset aU_0 +
mov [esp+28h+var_24] 0Bh +
call sub_430920  +
mov [esp+28h+var_24] esi +
mov [esp+28h+var_28] ebx +
mov [esp+28h+var_20] eax +
call _write  +
mov [esp+28h+var_28] ebx +
mov esi eax +
call _close  +
add esp 24h +
mov eax esi +
pop ebx  +
pop esi  +
retn   +
mov [esp+28h+var_28] offset aCanTOpenSysCla +
call perror  +
add esp 24h +
mov eax ebx +
pop ebx  +
pop esi  +
retn   +
***
xor ebx ebx +
sub esp 14h +
mov eax [esp+14h+arg_0] +
mov esi [eax+188h] +
and esi 7FFFFFFFh +
mov edx ds:dword_484CC0[ebx*4] +
test edx edx +
js loc_430AAE  +
cmp ebx esi +
jz loc_430AAE  +
mov [esp+14h+var_14] edx +
call _close  +
xor edx edx +
mov eax ebx +
call sub_430950  +
mov eax ebx +
call sub_4309F0  +
add ebx 1 +
cmp ebx 100h +
jnz loc_430A87  +
mov eax ds:dword_484CC0[esi*4] +
test eax eax +
js loc_430AE1  +
mov [esp+14h+var_14] eax +
call _close  +
mov eax esi +
xor edx edx +
call sub_430950  +
add esp 14h +
mov eax esi +
pop ebx  +
pop esi  +
jmp sub_4309F0  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
***
push esi  +
push ebx  +
sub esp 6Ch +
mov eax [esp+6Ch+arg_0] +
mov [esp+6Ch+var_6C] eax +
call sub_43AF50  +
test eax eax +
js loc_430C7A  +
xor eax eax +
mov ds:dword_484CC0[eax*4] 0FFFFFFFFh +
add eax 1 +
cmp eax 100h +
jnz loc_430B10  +
mov ebx 2 +
lea edi [esp+6Ch+var_48] +
jmp loc_430B44  +
lea edx [ebx-3] +
cmp edx 3 +
jbe loc_430B59  +
add ebx 1 +
cmp ebx 0Bh +
jz loc_430C26  +
mov eax [esp+6Ch+arg_0] +
mov eax [eax+ebx*4+17Ch] +
test eax 7FFFFFFFh +
jz loc_430B30  +
and eax 7FFFFFFFh +
mov [esp+6Ch+var_68] 1 +
mov ebp eax +
mov [esp+6Ch+var_6C] offset aSysClassGpioEx +
call _open  +
test eax eax +
mov esi eax +
js loc_430C32  +
mov [esp+6Ch+var_60] ebp +
mov [esp+6Ch+var_64] offset aU_0 +
mov [esp+6Ch+var_68] 0Bh +
mov [esp+6Ch+var_6C] edi +
call sub_430920  +
mov [esp+6Ch+var_68] edi +
mov [esp+6Ch+var_6C] esi +
mov [esp+6Ch+var_64] eax +
call _write  +
mov [esp+6Ch+var_6C] esi +
mov [esp+6Ch+var_50] eax +
call _close  +
mov ecx [esp+6Ch+var_50] +
test ecx ecx +
js loc_430C8F  +
cmp ebx 6 +
jz loc_430C81  +
mov edx 1 +
mov eax ebp +
call sub_430950  +
test eax eax +
js loc_430C76  +
mov [esp+6Ch+var_60] ebp +
mov [esp+6Ch+var_64] offset aSysClassGpio_0 +
mov [esp+6Ch+var_68] 3Ch +
mov [esp+6Ch+var_6C] edi +
call sub_430920  +
mov [esp+6Ch+var_68] 2 +
mov [esp+6Ch+var_6C] edi +
call _open  +
test eax eax +
mov edx eax +
mov ds:dword_484CC0[ebp*4] eax +
jns loc_430B38  +
add esp 6Ch +
mov eax edx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add esp 6Ch +
xor edx edx +
pop ebx  +
mov eax edx +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+6Ch+var_6C] offset aCanTOpenSysC_0 +
call perror  +
mov edx esi +
mov [esp+6Ch+var_50] edx +
call ds:__imp__errno  +
mov eax [eax] +
mov [esp+6Ch+var_6C] eax +
call strerror  +
mov [esp+6Ch+var_64] ebp +
mov [esp+6Ch+var_68] offset aCanTExportGpio +
mov [esp+6Ch+var_6C] 0 +
mov [esp+6Ch+var_60] eax +
call sub_401740  +
mov edx [esp+6Ch+var_50] +
jmp loc_430C1C  +
mov edx eax +
jmp loc_430C1C  +
mov edx 0FFFFFFFFh +
jmp loc_430C1C  +
xor edx edx +
mov eax ebp +
call sub_430950  +
jmp loc_430BD7  +
mov edx ecx +
jmp loc_430C40  +
***
mov ebx [esp+18h+arg_4] +
mov [esp+18h+var_14] offset aSpinAssignment +
mov [esp+18h+var_18] 0 +
mov [esp+18h+var_10] ebx +
call sub_401740  +
mov eax [esp+18h+arg_0] +
mov [esp+18h+var_14] ebx +
mov [esp+18h+var_10] 78h +
mov [esp+18h+var_18] eax +
call sub_408890  +
add esp 18h +
pop ebx  +
retn   +
***
sub esp 18h +
mov ebx [esp+18h+arg_0] +
mov dword ptr [ebx+54h] 756E696Ch +
mov dword ptr [ebx+58h] 69706778h +
mov [ebx+5Ch] ax +
mov [esp+18h+var_18] ebx +
call sub_410960  +
mov dword ptr [ebx+8B8h] offset sub_43A4C0 +
mov dword ptr [ebx+8BCh] offset sub_43A4F0 +
mov dword ptr [ebx+8C0h] offset sub_43A520 +
mov dword ptr [ebx+8C4h] offset sub_43A550 +
mov dword ptr [ebx+8C8h] offset sub_43ABD0 +
mov dword ptr [ebx+8CCh] offset sub_430CA0 +
mov dword ptr [ebx+8D0h] offset dword_430740 +
mov dword ptr [ebx+8D4h] offset dword_430750 +
mov dword ptr [ebx+8D8h] offset dword_430760 +
mov dword ptr [ebx+8DCh] offset dword_430770 +
mov dword ptr [ebx+8E0h] offset sub_43AAE0 +
mov dword ptr [ebx+8E4h] offset sub_43A900 +
mov dword ptr [ebx+8ECh] offset sub_43A580 +
mov dword ptr [ebx+8F8h] offset sub_430AF0 +
mov dword ptr [ebx+8FCh] offset sub_430A70 +
mov dword ptr [ebx+934h] offset sub_430830 +
mov dword ptr [ebx+938h] offset loc_430780 +
mov dword ptr [ebx+93Ch] offset sub_4308C0 +
mov dword ptr [ebx+914h] offset sub_403EA0 +
mov dword ptr [ebx+910h] offset sub_4042F0 +
add esp 18h +
pop ebx  +
retn   +
***
sub esp 1Ch +
mov eax ds:dword_486584 +
mov [esp+1Ch+var_18] offset aSLinuxSpiDrive +
mov [esp+1Ch+var_14] eax +
mov eax ds:_iob +
add eax 40h +
mov [esp+1Ch+var_1C] eax +
call fprintf  +
add esp 1Ch +
retn   +
***
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov ebx [esp+28h+arg_0] +
mov eax [esp+28h+arg_4] +
mov [esp+28h+var_24] offset asc_477685 +
mov [esp+28h+var_28] eax +
call strtok  +
test eax eax +
jz loc_430ED7  +
mov edi offset aReset_1 +
mov esi eax +
mov ecx ebp +
cmps   +
jnz loc_430E57  +
mov dword ptr [ebx+46Ch] 1 +
xor eax eax +
jmp loc_430E24  +
mov edi offset aNoreset +
mov esi eax +
mov ecx 8 +
cmps   +
jnz loc_430E75  +
mov dword ptr [ebx+46Ch] 2 +
xor eax eax +
jmp loc_430E24  +
mov edi offset aVcc +
mov ecx 4 +
mov esi eax +
cmps   +
jnz loc_430E93  +
mov dword ptr [ebx+468h] 1 +
xor eax eax +
jmp loc_430E24  +
mov edi offset aNovcc +
mov esi eax +
mov ecx ebp +
cmps   +
jnz loc_430EB1  +
mov dword ptr [ebx+468h] 2 +
xor eax eax +
jmp loc_430E24  +
mov edi offset aD_high +
mov ecx 7 +
mov esi eax +
cmps   +
jnz loc_430EE0  +
mov dword ptr [ebx+470h] 1 +
xor eax eax +
jmp loc_430E24  +
mov eax 0FFFFFFFFh +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edi offset aD_low +
mov esi eax +
mov ecx ebp +
cmps   +
jnz loc_430ED2  +
mov dword ptr [ebx+470h] 2 +
xor eax eax +
jmp loc_430E24  +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov ebx [esp+1Ch+arg_0] +
mov eax [esp+1Ch+arg_4] +
mov eax [ebx+eax*4+17Ch] +
mov edx eax +
and eax 7FFFFFFFh +
sub eax 1 +
and edx 80000000h +
cmp eax 10h +
ja loc_430FE5  +
mov ecx eax +
shl ecx 4 +
mov ecx ds:dword_47772C[ecx] +
test ecx ecx +
jz loc_430F46  +
test edx edx +
setz dl  +
movzx edx dl +
shl eax 4 +
test edx edx +
mov ebp ds:dword_477728[eax] +
lea esi [ebx+89Ch] +
mov edi ds:dword_477724[eax] +
mov [esp+1Ch+var_1C] esi +
mov [esp+1Ch+var_14] ebp +
mov [esp+1Ch+var_18] edi +
jnz loc_430FB0  +
call sub_43DB90  +
mov eax [ebx+898h] +
cmp eax 1 +
jle loc_430F82  +
mov [esp+1Ch+var_1C] eax +
call sub_43A220  +
mov [esp+1Ch+var_14] ebp +
mov [esp+1Ch+var_18] edi +
mov [esp+1Ch+var_1C] esi +
call sub_43DBC0  +
mov eax [ebx+898h] +
cmp eax 1 +
jle loc_430FA5  +
mov [esp+1Ch+var_1C] eax +
call sub_43A220  +
xor eax eax +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
call sub_43DBC0  +
mov eax [ebx+898h] +
cmp eax 1 +
jle loc_430FC8  +
mov [esp+1Ch+var_1C] eax +
call sub_43A220  +
mov [esp+1Ch+var_14] ebp +
mov [esp+1Ch+var_18] edi +
mov [esp+1Ch+var_1C] esi +
call sub_43DB90  +
mov eax [ebx+898h] +
cmp eax 1 +
jg loc_430F9D  +
jmp loc_430FA5  +
mov eax 0FFFFFFFFh +
jmp loc_430FA7  +
***
mov ebx eax +
mov eax edx +
and edx 7FFFFFFFh +
sub edx 1 +
sub esp 14h +
and eax 80000000h +
cmp edx 10h +
ja loc_431080  +
mov esi edx +
shl esi 4 +
mov esi ds:dword_47772C[esi] +
test esi esi +
jz loc_431023  +
test eax eax +
setz al  +
movzx eax al +
test eax eax +
jz loc_43102F  +
test ecx ecx +
setz cl  +
movzx ecx cl +
shl edx 4 +
test ecx ecx +
mov eax ds:dword_477728[edx] +
mov [esp+14h+var_C] eax +
mov eax ds:dword_477724[edx] +
mov [esp+14h+var_10] eax +
lea eax [ebx+89Ch] +
mov [esp+14h+var_14] eax +
jnz loc_431075  +
call sub_43DBC0  +
mov edx [ebx+898h] +
xor ebx ebx +
cmp edx 1 +
jle loc_43106D  +
mov [esp+14h+var_14] edx +
call sub_43A220  +
add esp 14h +
mov eax ebx +
pop ebx  +
pop esi  +
retn   +
call sub_43DB90  +
jmp loc_431058  +
mov ebx 0FFFFFFFFh +
jmp loc_43106D  +
***
mov eax [esp+arg_0] +
mov edx [esp+arg_4] +
mov ecx [esp+arg_8] +
mov edx [eax+edx*4+17Ch] +
jmp sub_430FF0  +
***
push edi  +
mov eax [esp+arg_0] +
xor ecx ecx +
mov edx 1 +
jmp sub_4310B0  +
***
mov eax [esp+arg_0] +
sub esp 14h +
mov eax [esp+14h+arg_0] +
mov edx [esp+14h+arg_4] +
mov ebx [eax+edx*4+17Ch] +
mov esi ebx +
and ebx 7FFFFFFFh +
sub ebx 1 +
and esi 80000000h +
cmp ebx 10h +
ja loc_4311A0  +
shl ebx 4 +
add eax 89Ch +
mov edx ds:dword_477728[ebx] +
mov [esp+14h+var_14] eax +
mov [esp+14h+var_C] edx +
mov edx ds:dword_477724[ebx] +
add ebx offset unk_477720 +
mov [esp+14h+var_10] edx +
call sub_43DBF0  +
mov edx [ebx+0Ch] +
test eax eax +
setnz al  +
test edx edx +
jz loc_431189  +
xor ecx ecx +
test esi esi +
setz cl  +
mov esi ecx +
test esi esi +
jnz loc_431196  +
movzx eax al +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
xor eax 1 +
jmp loc_43118D  +
mov eax 0FFFFFFFFh +
jmp loc_431190  +
***
sub esp 14h +
mov ebx [esp+14h+arg_0] +
mov eax [ebx+478h] +
lea esi [ebx+89Ch] +
mov [esp+14h+var_10] 0 +
mov [esp+14h+var_14] esi +
mov [esp+14h+var_C] eax +
call sub_43DC80  +
mov eax [ebx+47Ch] +
mov [esp+14h+var_10] 1 +
mov [esp+14h+var_14] esi +
mov [esp+14h+var_C] eax +
call sub_43DC80  +
mov eax ebx +
mov ecx 1 +
mov edx 2 +
call sub_4310B0  +
mov eax [ebx+46Ch] +
cmp eax 1 +
jz loc_4312D2  +
cmp eax 2 +
jz loc_431262  +
mov eax [ebx+470h] +
cmp eax 1 +
jz loc_43127F  +
cmp eax 2 +
jz loc_4312B5  +
mov eax [ebx+468h] +
cmp eax 1 +
jz loc_4312A2  +
cmp eax 2 +
jnz loc_43124A  +
xor ecx ecx +
mov edx 1 +
mov eax ebx +
call sub_4310B0  +
mov [esp+14h+var_14] esi +
call nullsub_2  +
mov dword ptr [ebx+89Ch] 0FFFFFFFFh +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov edx [ebx+188h] +
mov ecx 1 +
mov eax ebx +
call sub_430FF0  +
mov eax [ebx+470h] +
cmp eax 1 +
jnz loc_431223  +
mov [esp+14h+var_C] 0FFh +
mov [esp+14h+var_10] 0 +
mov [esp+14h+var_14] esi +
call sub_43DC80  +
mov eax [ebx+468h] +
cmp eax 1 +
jnz loc_431237  +
mov ecx 1 +
mov edx 1 +
mov eax ebx +
call sub_4310B0  +
jmp loc_43124A  +
mov [esp+14h+var_C] 0 +
mov [esp+14h+var_10] 0 +
mov [esp+14h+var_14] esi +
call sub_43DC80  +
jmp loc_43122C  +
mov edx [ebx+188h] +
xor ecx ecx +
mov eax ebx +
call sub_430FF0  +
jmp loc_431218  +
***
sub esp 0Ch +
mov ecx 1 +
mov eax [esp+0Ch+arg_0] +
mov edx 1 +
call sub_4310B0  +
mov [esp+0Ch+arg_0] 186A0h +
add esp 0Ch +
jmp sub_459150  +
***
sub esp 18h +
mov ebx [esp+18h+arg_0] +
mov edx [ebx+188h] +
mov eax ebx +
call sub_430FF0  +
mov [esp+18h+var_18] 1 +
call sub_459150  +
add esp 18h +
mov eax ebx +
pop ebx  +
xor ecx ecx +
mov edx 2 +
jmp sub_4310B0  +
***
sub esp 14h +
mov ebx [esp+14h+arg_0] +
mov [esp+14h+var_14] ebx +
call sub_43AF50  +
test eax eax +
js loc_4313D1  +
mov eax [esp+14h+arg_4] +
lea esi [ebx+89Ch] +
mov [esp+14h+var_10] esi +
mov [esp+14h+var_14] eax +
call sub_43D9E0  +
mov eax [ebx+89Ch] +
test eax eax +
js loc_4313D8  +
mov [esp+14h+var_10] 0 +
mov [esp+14h+var_14] esi +
call sub_43DC50  +
test eax eax +
js loc_431404  +
mov [ebx+478h] eax +
mov [esp+14h+var_10] 1 +
mov [esp+14h+var_14] esi +
call sub_43DC50  +
test eax eax +
js loc_431428  +
mov [ebx+47Ch] eax +
xor eax eax +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov eax 0FFFFFFFFh +
jmp loc_4313CB  +
mov eax [esp+14h+arg_4] +
mov [esp+14h+var_10] offset aSFailedToOpenP +
mov [esp+14h+var_14] 0 +
mov [esp+14h+var_8] eax +
mov eax ds:dword_486584 +
mov [esp+14h+var_C] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_4313CB  +
mov eax ds:dword_486584 +
mov [esp+14h+var_10] offset aSErrorReadin_2 +
mov [esp+14h+var_14] 0 +
mov [esp+14h+var_C] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_4313CB  +
mov eax ds:dword_486584 +
mov [esp+14h+var_10] offset aSErrorReadin_3 +
mov [esp+14h+var_14] 0 +
mov [esp+14h+var_C] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_4313CB  +
***
mov ebx [esp+18h+arg_0] +
mov dword ptr [ebx+54h] 495050h +
mov [esp+18h+var_18] ebx +
call sub_410960  +
mov dword ptr [ebx+468h] 0 +
mov dword ptr [ebx+46Ch] 0 +
mov dword ptr [ebx+470h] 0 +
mov dword ptr [ebx+8B8h] offset sub_43A4C0 +
mov dword ptr [ebx+8BCh] offset sub_43A4F0 +
mov dword ptr [ebx+8C0h] offset sub_43A520 +
mov dword ptr [ebx+8C4h] offset sub_43A550 +
mov dword ptr [ebx+8C8h] offset sub_43ABD0 +
mov dword ptr [ebx+8CCh] offset sub_408AD0 +
mov dword ptr [ebx+8D0h] offset sub_431320 +
mov dword ptr [ebx+8D4h] offset sub_431110 +
mov dword ptr [ebx+8D8h] offset sub_4312F0 +
mov dword ptr [ebx+8DCh] offset sub_431100 +
mov dword ptr [ebx+8E0h] offset sub_43AAE0 +
mov dword ptr [ebx+8E4h] offset sub_43A900 +
mov dword ptr [ebx+8ECh] offset sub_43A580 +
mov dword ptr [ebx+8F0h] offset sub_43A660 +
mov dword ptr [ebx+8F4h] offset sub_43A7C0 +
mov dword ptr [ebx+8F8h] offset sub_431360 +
mov dword ptr [ebx+8FCh] offset sub_4311B0 +
mov dword ptr [ebx+934h] offset sub_431090 +
mov dword ptr [ebx+938h] offset sub_431120 +
mov dword ptr [ebx+93Ch] offset sub_430F00 +
mov dword ptr [ebx+940h] offset sub_430E10 +
mov dword ptr [ebx+914h] offset sub_403EA0 +
mov dword ptr [ebx+910h] offset sub_4042F0 +
add esp 18h +
pop ebx  +
retn   +
***
mov eax [esp+4] +
mov edx [eax+8C0h] +
jmp edx  +
***
mov eax [esp+4] +
mov edx [eax+8D4h] +
jmp edx  +
***
sub esp 1Ch +
mov eax [esp+1Ch+arg_0] +
mov ecx [esp+1Ch+arg_8] +
mov edx [eax+8F4h] +
mov [esp+1Ch+var_14] ecx +
mov ecx [esp+1Ch+arg_4] +
mov [esp+1Ch+var_10] 4 +
mov [esp+1Ch+var_1C] eax +
mov [esp+1Ch+var_18] ecx +
call edx  +
add esp 1Ch +
retn   +
***
mov eax [esp+arg_0] +
mov eax [eax+0A5Ch] +
mov [esp+arg_0] eax +
jmp free  +
***
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [esp+3Ch+arg_4] +
mov [esp+3Ch+var_3C] eax +
call sub_406F20  +
mov [esp+3Ch+var_28] 0 +
test eax eax +
mov ebx eax +
jnz loc_4316A3  +
jmp loc_431708  +
lea eax [esp+3Ch+var_10] +
mov [esp+3Ch+var_34] eax +
mov [esp+3Ch+var_38] offset aTimeoutI +
mov [esp+3Ch+var_3C] ebp +
call sscanf  +
cmp eax 1 +
jnz loc_4317C3  +
mov eax [esp+3Ch+var_10] +
test eax eax +
jle loc_4317C3  +
mov [esp+3Ch+var_30] eax +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_38] offset aSPickit2_parse +
mov [esp+3Ch+var_3C] 2 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov eax [esp+3Ch+arg_0] +
mov edx [esp+3Ch+var_10] +
mov eax [eax+0A5Ch] +
mov [eax+8] edx +
mov [esp+3Ch+var_3C] ebx +
call sub_406F40  +
test eax eax +
mov ebx eax +
jz loc_431708  +
mov [esp+3Ch+var_3C] ebx +
mov edi offset aClockrate +
call sub_406F60  +
mov ecx 0Ah +
mov esi eax +
mov ebp eax +
cmps   +
jz loc_431714  +
mov edi offset aTimeout +
mov ecx 8 +
mov esi eax +
cmps   +
jz loc_431636  +
mov [esp+3Ch+var_30] eax +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_38] offset aSPickit2_par_0 +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov [esp+3Ch+var_3C] ebx +
mov [esp+3Ch+var_28] 0FFFFFFFFh +
call sub_406F40  +
test eax eax +
mov ebx eax +
jnz loc_4316A3  +
mov eax [esp+3Ch+var_28] +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
lea eax [esp+3Ch+var_10] +
mov [esp+3Ch+var_34] eax +
mov [esp+3Ch+var_38] offset aClockrateI +
mov [esp+3Ch+var_3C] ebp +
call sscanf  +
cmp eax 1 +
jnz loc_4317F1  +
mov ecx [esp+3Ch+var_10] +
test ecx ecx +
jle loc_4317F1  +
mov eax 0F4240h +
mov esi 0FFh +
cdq   +
idiv  ecx +
fnstcw  [esp+3Ch+var_22] +
mov [esp+3Ch+var_38] offset aSPickit2_par_1 +
mov [esp+3Ch+var_3C] 2 +
cmp eax 0FFh +
cmovle esi eax +
movzx eax [esp+3Ch+var_22] +
mov [esp+3Ch+var_20] esi +
fild  [esp+3Ch+var_20] +
fadd  ds:dbl_477E28 +
mov ah 0Ch +
mov [esp+3Ch+var_24] ax +
fdivr  ds:flt_477E30 +
fldcw  [esp+3Ch+var_24] +
fistp  [esp+3Ch+var_20] +
fldcw  [esp+3Ch+var_22] +
mov eax [esp+3Ch+var_20] +
mov [esp+3Ch+var_10] eax +
mov [esp+3Ch+var_30] eax +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov eax [esp+3Ch+arg_0] +
mov edx esi +
mov eax [eax+0A5Ch] +
mov [eax+4] dl +
jmp loc_431695  +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_30] ebp +
mov [esp+3Ch+var_38] offset aSPickit2_par_2 +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov [esp+3Ch+var_28] 0FFFFFFFFh +
jmp loc_431695  +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_30] ebp +
mov [esp+3Ch+var_38] offset aSPickit2_par_3 +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov [esp+3Ch+var_28] 0FFFFFFFFh +
jmp loc_431695  +
***
push esi  +
push ebx  +
sub esp 0ACh +
mov ebp [esp+0ACh+arg_8] +
mov eax [ebp+40h] +
test eax eax +
jz loc_431B9F  +
cmp [esp+0ACh+arg_C] 1 +
jbe loc_431B9F  +
mov edi offset aFlash_14 +
mov ecx 6 +
mov esi ebp +
cmps   +
jz loc_43186E  +
mov edi offset aEeprom_11 +
mov ecx 7 +
mov esi ebp +
cmps   +
jnz loc_431B9F  +
mov eax [ebp+0A0h] +
xor ebx ebx +
mov ecx [esp+0ACh+arg_0] +
mov byte ptr [esp+0ACh+var_79] 0 +
mov [esp+0ACh+var_80] eax +
mov eax [esp+0ACh+arg_10] +
add eax [esp+0ACh+arg_14] +
mov esi eax +
mov [esp+0ACh+var_88] eax +
mov eax [esp+0ACh+arg_0] +
mov eax [eax+8C0h] +
mov [esp+0ACh+var_A8] 1 +
mov [esp+0ACh+var_AC] ecx +
call eax  +
lea eax [esp+0ACh+var_42] +
and eax 2 +
cmp [esp+0ACh+arg_10] esi +
mov [esp+0ACh+var_84] eax +
jnb loc_431B1B  +
mov [esp+0ACh+var_90] ebx +
mov eax [esp+0ACh+arg_10] +
test eax eax +
jz loc_4318E7  +
movzx edx word ptr [esp+0ACh+arg_10] +
test edx edx +
jnz loc_43195F  +
mov esi [esp+0ACh+var_80] +
xor edx edx +
test esi esi +
jz loc_43195F  +
mov eax edx +
mov ecx 0Dh +
lea edi [esp+0ACh+var_79+1] +
stos   +
xor eax eax +
mov [esp+0ACh+var_8C] edx +
mov [edi] ax +
lea eax [esp+0ACh+var_79+1] +
mov [esp+0ACh+var_A8] eax +
mov [esp+0ACh+var_AC] esi +
call sub_4075B0  +
mov eax [esp+0ACh+arg_10] +
mov [esp+0ACh+var_AC] esi +
mov [esp+0ACh+var_A4] eax +
lea eax [esp+0ACh+var_79+1] +
mov [esp+0ACh+var_A8] eax +
call sub_407620  +
mov eax [esp+0ACh+arg_0] +
lea ecx [esp+0ACh+var_42] +
mov eax [eax+8ECh] +
mov [esp+0ACh+var_A4] ecx +
lea ecx [esp+0ACh+var_79+1] +
mov [esp+0ACh+var_A8] ecx +
mov ecx [esp+0ACh+arg_0] +
mov [esp+0ACh+var_AC] ecx +
call eax  +
mov edx [esp+0ACh+var_8C] +
mov eax [esp+0ACh+var_88] +
mov ecx 0Dh +
mov edi 10000h +
sub eax [esp+0ACh+arg_10] +
mov esi [esp+0ACh+var_84] +
cmp eax 0Dh +
cmova eax ecx +
sub edi edx +
cmp eax edi +
mov edx 36h +
cmovbe edi eax +
xor eax eax +
mov [esp+0ACh+var_8C] edi +
lea edi [esp+0ACh+var_79+1] +
xor ebx ebx +
stos   +
test esi esi +
mov [edi] bx +
lea edi [esp+0ACh+var_42] +
jnz loc_431B4E  +
mov ecx edx +
xor eax eax +
shr ecx 2 +
and edx 2 +
stos   +
jz loc_4319BA  +
xor edx edx +
mov [edi] dx +
mov eax [esp+0ACh+var_8C] +
test eax eax +
jz loc_431A6A  +
xor edx edx +
xor edi edi +
mov esi edx +
jmp loc_431A27  +
mov eax [ebp+8Ch] +
test eax eax +
jz loc_431A38  +
test edi 1 +
cmovnz ebx eax +
mov eax edi +
shr eax 1Fh +
add edi eax +
sar edi 1 +
mov eax esi +
add esi 1 +
movzx eax al +
lea edx [esp+eax*4+0ACh+var_79+1] +
mov [esp+0ACh+var_A8] edx +
mov [esp+0ACh+var_AC] ebx +
mov [esp+0ACh+var_90] edx +
call sub_4075B0  +
mov edx [esp+0ACh+var_90] +
mov [esp+0ACh+var_A4] edi +
mov [esp+0ACh+var_AC] ebx +
mov [esp+0ACh+var_A8] edx +
call sub_407620  +
mov eax esi +
movzx edi al +
cmp [esp+0ACh+var_8C] edi +
jbe loc_431A66  +
mov ebx [ebp+88h] +
add edi [esp+0ACh+arg_10] +
test ebx ebx +
jnz loc_4319D0  +
mov ebx [ebp+80h] +
test ebx ebx +
jnz loc_4319EC  +
mov [esp+0ACh+var_A8] offset aNoReadCommandS +
mov [esp+0ACh+var_AC] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
add esp 0ACh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+0ACh+var_90] ebx +
mov ecx [esp+0ACh+var_8C] +
mov eax [esp+0ACh+arg_0] +
lea edx ds:0[ecx*4] +
lea ecx [esp+0ACh+var_42] +
mov eax [eax+8F4h] +
mov [esp+0ACh+var_A4] ecx +
lea ecx [esp+0ACh+var_79+1] +
mov [esp+0ACh+var_A8] ecx +
mov ecx [esp+0ACh+arg_0] +
mov [esp+0ACh+var_A0] edx +
mov [esp+0ACh+var_AC] ecx +
call eax  +
test eax eax +
js loc_431B60  +
sar eax 2 +
xor ecx ecx +
mov esi eax +
xor edi edi +
xor eax eax +
test esi esi +
mov ebx ecx +
jz loc_431AFF  +
nop   +
lea esi [esi+0] +
lea eax [esp+eax*4+0ACh+var_42] +
add ebx 1 +
mov [esp+0ACh+var_A8] eax +
mov eax [esp+0ACh+var_90] +
lea ecx [esp+0ACh+var_79] +
mov [esp+0ACh+var_A4] ecx +
mov byte ptr [esp+0ACh+var_79] 0 +
mov [esp+0ACh+var_AC] eax +
call sub_407720  +
mov eax [ebp+78h] +
movzx ecx byte ptr [esp+0ACh+var_79] +
add eax [esp+0ACh+arg_10] +
mov [eax+edi] cl +
movzx edi bl +
cmp edi esi +
mov eax edi +
jl loc_431AC0  +
mov eax [esp+0ACh+var_8C] +
add [esp+0ACh+arg_10] eax +
mov eax [esp+0ACh+var_88] +
cmp eax [esp+0ACh+arg_10] +
ja loc_4318D0  +
mov eax [esp+0ACh+arg_0] +
mov ecx [esp+0ACh+arg_0] +
mov eax [eax+8C0h] +
mov [esp+0ACh+var_A8] 0 +
mov [esp+0ACh+var_AC] ecx +
call eax  +
mov eax [esp+0ACh+arg_14] +
add esp 0ACh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
xor ecx ecx +
mov dl 34h +
mov word ptr [esp+0ACh+var_42] cx +
lea edi [esp+0ACh+var_42+2] +
jmp loc_4319A7  +
mov [esp+0ACh+var_A8] offset aFailed@PgmSpi +
mov [esp+0ACh+var_AC] 0 +
call sub_401740  +
mov eax [esp+0ACh+arg_0] +
mov ecx [esp+0ACh+arg_0] +
mov eax [eax+8BCh] +
mov [esp+0ACh+var_A8] 1 +
mov [esp+0ACh+var_AC] ecx +
call eax  +
mov eax 0FFFFFFFFh +
jmp loc_431A5B  +
mov eax 0FFFFFFFFh +
jmp loc_431A5B  +
***
push ebx  +
sub esp 20h +
mov esi [esp+20h+arg_4] +
mov ebx [esp+20h+arg_0] +
mov eax [esi+174h] +
test eax eax +
jz loc_431C46  +
mov eax [ebx+8C0h] +
lea edi [esp+20h+var_8] +
mov [esp+20h+var_1C] 1 +
mov [esp+20h+var_20] ebx +
call eax  +
mov eax [esi+174h] +
mov [esp+20h+var_1C] edi +
mov [esp+20h+var_8] 0 +
mov [esp+20h+var_20] eax +
call sub_4075B0  +
lea edx [esp+20h+var_4] +
mov eax [ebx+8ECh] +
mov [esp+20h+var_18] edx +
mov [esp+20h+var_1C] edi +
mov [esp+20h+var_20] ebx +
call eax  +
mov eax [esi+70h] +
mov [esp+20h+var_20] eax +
call sub_459150  +
mov eax [ebx+8C8h] +
mov [esp+20h+var_1C] esi +
mov [esp+20h+var_20] ebx +
call eax  +
mov eax [ebx+8C0h] +
mov [esp+20h+var_1C] 0 +
mov [esp+20h+var_20] ebx +
call eax  +
xor eax eax +
add esp 20h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov [esp+20h+var_18] esi +
mov [esp+20h+var_1C] offset aChipEraseIns_0 +
mov [esp+20h+var_20] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_431C3F  +
***
push ebx  +
push esi  +
push ebx  +
sub esp 7Ch +
mov eax [esp+7Ch+arg_C] +
mov edx [esp+7Ch+arg_4] +
test eax eax +
jle loc_431F8C  +
mov ebx [esp+7Ch+arg_C] +
lea eax [esp+7Ch+var_4D] +
lea esi [esp+7Ch+var_4D+3] +
and eax 1 +
mov [esp+7Ch+var_60] eax +
mov ebp esi +
cmp ebx 36h +
mov esi 36h +
cmovle esi ebx +
mov eax esi +
mov [esp+7Ch+var_61] al +
mov eax [esp+7Ch+var_60] +
lea edi [esp+7Ch+var_4D] +
mov [esp+7Ch+var_68] 41h +
test eax eax +
jnz loc_431F69  +
test edi 2 +
jnz loc_431F56  +
mov ecx [esp+7Ch+var_68] +
xor eax eax +
shr ecx 2 +
stos   +
test byte ptr [esp+7Ch+var_68] 2 +
jz loc_431DA5  +
xor eax eax +
add edi 2 +
mov [edi-2] ax +
test byte ptr [esp+7Ch+var_68] 1 +
jz loc_431DAF  +
mov byte ptr [edi] 0 +
mov eax esi +
mov ecx 0FFFFADADh +
mov byte ptr [esp+7Ch+var_4D+2] al +
mov edi edx +
mov byte ptr [esp+7Ch+var_4D+1] 0A8h +
mov [ebp+3Ch] cx +
mov ecx edx +
mov dword ptr [ebp+0] 0ADADADADh +
mov dword ptr [ebp+4] 0ADADADADh +
mov dword ptr [ebp+8] 0ADADADADh +
mov dword ptr [ebp+0Ch] 0ADADADADh +
mov dword ptr [ebp+10h] 0ADADADADh +
mov dword ptr [ebp+14h] 0ADADADADh +
mov dword ptr [ebp+18h] 0ADADADADh +
mov dword ptr [ebp+1Ch] 0ADADADADh +
mov dword ptr [ebp+20h] 0ADADADADh +
mov dword ptr [ebp+24h] 0ADADADADh +
mov dword ptr [ebp+28h] 0ADADADADh +
mov dword ptr [ebp+2Ch] 0ADADADADh +
mov dword ptr [ebp+30h] 0ADADADADh +
mov dword ptr [ebp+34h] 0ADADADADh +
mov dword ptr [ebp+38h] 0ADADADADh +
lea ebp [esp+7Ch+var_4D+3] +
mov eax ebp +
mov [esp+7Ch+var_68] ebx +
lea esi [esi+0] +
add ecx 1 +
movzx edx byte ptr [ecx-1] +
add eax 1 +
mov ebx edi +
sub [esp+7Ch+var_68] 1 +
mov [eax-1] dl +
mov edx ecx +
sub edx ebx +
cmp dl [esp+7Ch+var_61] +
jb loc_431E40  +
mov edi ecx +
mov ecx esi +
mov ebx [esp+7Ch+var_68] +
cmp cl 1 +
mov byte ptr [eax] 0A6h +
jz loc_431F46  +
lea ecx [esi-1] +
mov byte ptr [eax+1] 4 +
lea edx [eax+6] +
mov byte ptr [eax+2] 0C3h +
mov byte ptr [eax+3] 0E9h +
mov byte ptr [eax+4] 1 +
mov [eax+5] cl +
mov eax [esp+7Ch+arg_0] +
lea esi [esp+7Ch+var_4D+1] +
mov byte ptr [edx] 0AAh +
mov eax [eax+0A5Ch] +
mov edx [eax+8] +
mov eax [eax] +
mov [esp+7Ch+var_70] 40h +
mov [esp+7Ch+var_74] esi +
mov [esp+7Ch+var_6C] edx +
mov [esp+7Ch+var_78] 1 +
mov [esp+7Ch+var_7C] eax +
call usb_interrupt_write  +
test eax eax +
js loc_431F7F  +
mov eax [esp+7Ch+arg_0] +
lea esi [esp+7Ch+var_4D+1] +
mov eax [eax+0A5Ch] +
mov edx [eax+8] +
mov eax [eax] +
mov [esp+7Ch+var_70] 40h +
mov [esp+7Ch+var_74] esi +
mov [esp+7Ch+var_6C] edx +
mov [esp+7Ch+var_78] 81h +
mov [esp+7Ch+var_7C] eax +
call usb_interrupt_read  +
test eax eax +
js loc_431F7F  +
mov edx [esp+7Ch+arg_8] +
movzx eax byte ptr [esp+7Ch+var_4D+1] +
test edx edx +
jz loc_431F3B  +
movzx esi al +
lea eax [esp+7Ch+var_4D+2] +
mov [esp+7Ch+var_78] eax +
mov eax [esp+7Ch+arg_8] +
mov [esp+7Ch+var_74] esi +
mov [esp+7Ch+var_7C] eax +
call memcpy  +
add [esp+7Ch+arg_8] esi +
test ebx ebx +
jle loc_431F8C  +
mov edx edi +
jmp loc_431D55  +
mov byte ptr [eax+1] 1 +
lea edx [eax+3] +
mov byte ptr [eax+2] 0C3h +
jmp loc_431E8B  +
xor eax eax +
add edi 2 +
mov [edi-2] ax +
sub [esp+7Ch+var_68] 2 +
jmp loc_431D8A  +
mov byte ptr [esp+7Ch+var_4D] 0 +
lea edi [esp+7Ch+var_4D+1] +
mov [esp+7Ch+var_68] 40h +
jmp loc_431D7E  +
add esp 7Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+7Ch+arg_C] +
add esp 7Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [esp+arg_0] +
mov eax [eax+0A5Ch] +
mov eax [eax] +
mov [esp+arg_0] eax +
jmp usb_close  +
***
push esi  +
push ebx  +
sub esp 0BCh +
mov ebx [esp+0BCh+arg_0] +
mov [esp+0BCh+var_92] 0 +
mov eax [ebx+930h] +
test eax eax +
jz loc_431FF2  +
fld  qword ptr [ebx+890h] +
fstp  [esp+0BCh+var_B8] +
mov [esp+0BCh+var_BC] ebx +
call eax  +
mov eax [ebx+0A5Ch] +
mov edx [eax+8] +
mov eax [eax] +
mov [esp+0BCh+var_B0] 40h +
mov dword ptr [esp+0BCh+var_B8+4] offset aVn +
mov [esp+0BCh+var_AC] edx +
mov dword ptr [esp+0BCh+var_B8] 1 +
mov [esp+0BCh+var_BC] eax +
call usb_interrupt_write  +
test eax eax +
mov esi eax +
jle loc_4322D0  +
mov edx 3Fh +
xor edi edi +
mov ecx edx +
xor eax eax +
mov word ptr [esp+0BCh+var_8E] di +
shr ecx 2 +
test dl 2 +
lea edi [esp+0BCh+var_8E+2] +
stos   +
jnz loc_432260  +
and edx 1 +
jnz loc_432254  +
mov eax [ebx+0A5Ch] +
mov edx [eax+8] +
mov eax [eax] +
mov [esp+0BCh+var_B0] 40h +
mov dword ptr [esp+0BCh+var_B8] 81h +
mov [esp+0BCh+var_AC] edx +
lea edx [esp+0BCh+var_8E+1] +
mov dword ptr [esp+0BCh+var_B8+4] edx +
mov [esp+0BCh+var_BC] eax +
call usb_interrupt_read  +
cmp eax 3 +
mov esi eax +
jle loc_4322A5  +
movzx eax byte ptr [esp+0BCh+var_8E+3] +
lea ebp [esp+0BCh+var_4C] +
mov dword ptr [esp+0BCh+var_B8] offset aSSFirmwareVers +
mov edi ebp +
mov [esp+0BCh+var_BC] 1 +
mov [esp+0BCh+var_A4] eax +
movzx eax byte ptr [esp+0BCh+var_8E+2] +
mov [esp+0BCh+var_A8] eax +
movzx eax byte ptr [esp+0BCh+var_8E+1] +
mov [esp+0BCh+var_AC] eax +
lea eax [ebx+4] +
mov [esp+0BCh+var_B0] eax +
mov eax ds:dword_486584 +
mov dword ptr [esp+0BCh+var_B8+4] eax +
call sub_401740  +
test ebp 2 +
mov edx 40h +
mov [esp+0BCh+var_4D] 0 +
jnz loc_432294  +
mov ecx edx +
xor eax eax +
shr ecx 2 +
test dl 2 +
stos   +
jnz loc_432280  +
and edx 1 +
jnz loc_432274  +
mov eax [ebx+0A5Ch] +
mov byte ptr [esp+0BCh+var_4C] 0A0h +
mov byte ptr [esp+0BCh+var_4C+1] 0A0h +
mov byte ptr [esp+0BCh+var_4C+2] 2Ah +
mov byte ptr [esp+0BCh+var_4C+3] 0B4h +
mov [esp+0BCh+var_48] 0A1h +
mov [esp+0BCh+var_47] 40h +
mov [esp+0BCh+var_46] 5Dh +
mov [esp+0BCh+var_45] 41h +
mov [esp+0BCh+var_44] 0A6h +
mov [esp+0BCh+var_43] 18h +
mov [esp+0BCh+var_42] 0F3h +
mov [esp+0BCh+var_41] 2 +
mov [esp+0BCh+var_40] 0CFh +
mov [esp+0BCh+var_3E] 0EAh +
movzx edx byte ptr [eax+4] +
mov [esp+0BCh+var_3C] 0FFh +
mov [esp+0BCh+var_3B] 0F6h +
mov [esp+0BCh+var_3A] 0F9h +
mov [esp+0BCh+var_3D] dl +
mov [esp+0BCh+var_39] 0E8h +
mov [esp+0BCh+var_38] 13h +
mov [esp+0BCh+var_37] 0FBh +
mov [esp+0BCh+var_36] 0E8h +
mov [esp+0BCh+var_35] 13h +
mov [esp+0BCh+var_34] 0FAh +
mov [esp+0BCh+var_33] 0E8h +
mov [esp+0BCh+var_32] 2 +
mov [esp+0BCh+var_31] 0F7h +
mov [esp+0BCh+var_30] 0E8h +
mov [esp+0BCh+var_2F] 13h +
mov [esp+0BCh+var_2E] 0F5h +
mov [esp+0BCh+var_2D] 0E8h +
mov [esp+0BCh+var_2C] 37h +
mov [esp+0BCh+var_2B] 0F4h +
mov [esp+0BCh+var_2A] 0A7h +
mov [esp+0BCh+var_29] 0A9h +
mov [esp+0BCh+var_28] 0ADh +
mov edx [eax+8] +
mov eax [eax] +
mov [esp+0BCh+var_B0] 40h +
mov dword ptr [esp+0BCh+var_B8+4] ebp +
mov [esp+0BCh+var_AC] edx +
mov dword ptr [esp+0BCh+var_B8] 1 +
mov [esp+0BCh+var_BC] eax +
call usb_interrupt_write  +
test eax eax +
js loc_4322A5  +
mov eax [ebx+8E0h] +
test eax eax +
jz loc_4322C6  +
mov edx [esp+0BCh+arg_4] +
mov [esp+0BCh+var_BC] ebx +
mov dword ptr [esp+0BCh+var_B8] edx +
call eax  +
add esp 0BCh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov byte ptr [edi] 0 +
jmp loc_432056  +
xor esi esi +
add edi 2 +
mov [edi-2] si +
and edx 1 +
jz loc_432056  +
jmp loc_432254  +
mov byte ptr [edi] 0 +
jmp loc_432106  +
xor eax eax +
add edi 2 +
mov [edi-2] ax +
and edx 1 +
jz loc_432106  +
jmp loc_432274  +
xor ecx ecx +
add edi 2 +
mov [ebp+0] cx +
sub edx 2 +
jmp loc_4320EB  +
call usb_strerror  +
mov dword ptr [esp+0BCh+var_B8+4] esi +
mov dword ptr [esp+0BCh+var_B8] offset aPickit2_read_r +
mov [esp+0BCh+var_BC] 0 +
mov [esp+0BCh+var_B0] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_432249  +
call usb_strerror  +
mov dword ptr [esp+0BCh+var_B8+4] esi +
mov dword ptr [esp+0BCh+var_B8] offset aPickit2_write_ +
mov [esp+0BCh+var_BC] 0 +
mov [esp+0BCh+var_B0] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_432249  +
***
sub esp 1Ch +
mov [esp+1Ch+var_1C] 0Ch +
call malloc  +
mov edx [esp+1Ch+arg_0] +
test eax eax +
mov [edx+0A5Ch] eax +
jz loc_432339  +
mov dword ptr [eax+4] 0 +
mov dword ptr [eax] 0 +
mov dword ptr [eax+8] 5DCh +
mov byte ptr [eax+4] 0Ah +
add esp 1Ch +
retn   +
mov eax ds:dword_486584 +
mov [esp+1Ch+var_18] offset aSPickit2_setup +
mov [esp+1Ch+var_1C] 0 +
mov [esp+1Ch+var_14] eax +
call sub_401740  +
mov [esp+1Ch+var_1C] 1 +
call exit  +
***
push ebx  +
sub esp 20h +
mov edx [esp+2Ch+arg_4] +
mov esi [esp+2Ch+arg_0] +
mov eax [edx+178h] +
test eax eax +
jz loc_432423  +
lea edi [esp+18h] +
mov [esp+2Ch+var_28] edi +
lea ebx [esp+1Ch] +
mov [esp+2Ch+var_2C] eax +
mov dword ptr [esp+18h] 0 +
call sub_4075B0  +
mov eax [esi+8ECh] +
mov [esp+2Ch+var_2C] esi +
lea esi [esp+2Ch+var_C] +
mov [esp+2Ch+var_24] ebx +
mov [esp+2Ch+var_28] edi +
call eax  +
mov [esp+2Ch+var_28] offset aProgram_enable +
mov [esp+2Ch+var_2C] 3 +
call sub_401740  +
movzx eax byte ptr [ebx] +
add ebx 1 +
mov [esp+2Ch+var_28] offset asc_477B0F +
mov [esp+2Ch+var_2C] 3 +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
cmp ebx esi +
jnz loc_4323D3  +
mov [esp+2Ch+var_28] offset asc_477B13 +
mov [esp+2Ch+var_2C] 3 +
call sub_401740  +
movzx eax [esp+2Ch+var_13] +
cmp [esp+2Ch+var_E] al +
setz al  +
movzx eax al +
lea eax [eax+eax-2] +
add esp 20h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov [esp+2Ch+var_24] edx +
mov [esp+2Ch+var_28] offset aProgramEnabl_0 +
mov [esp+2Ch+var_2C] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_43241C  +
***
push edi  +
mov edi offset aFlash_14 +
push esi  +
push ebx  +
sub esp 0BCh +
mov ebp [esp+0C8h+arg_8] +
mov esi ebp +
cmps   +
jz loc_432485  +
mov edi offset aEeprom_11 +
mov ecx 7 +
mov esi ebp +
cmps   +
jnz loc_4328FD  +
mov eax [esp+0C8h+arg_10] +
add eax [esp+0C8h+arg_14] +
mov edx [esp+0C8h+arg_0] +
mov edi eax +
mov [esp+0C8h+var_A0] eax +
mov eax [esp+0C8h+arg_0] +
mov eax [eax+8C0h] +
mov [esp+0C8h+var_C4] 1 +
mov [esp+0C8h+var_C8] edx +
call eax  +
lea eax [esp+0C8h+var_4E] +
and eax 2 +
cmp [esp+0C8h+arg_10] edi +
mov [esp+0C8h+var_9C] eax +
jnb loc_4327C4  +
mov ebx [ebp+40h] +
test ebx ebx +
jz loc_432624  +
mov esi [esp+0C8h+var_A0] +
mov ecx 0Dh +
sub esi [esp+0C8h+arg_10] +
mov eax [esp+0C8h+arg_10] +
lea edi [esp+0C8h+var_84] +
cmp esi 0Dh +
cmova esi ecx +
xor edx edx +
div  [esp+0C8h+arg_C] +
mov eax [esp+0C8h+arg_C] +
sub eax edx +
mov edx 36h +
cmp esi eax +
cmovbe eax esi +
xor esi esi +
mov [esp+0C8h+var_A4] eax +
xor eax eax +
stos   +
mov eax [esp+0C8h+var_9C] +
test eax eax +
mov [edi] si +
lea edi [esp+0C8h+var_4E] +
jnz loc_432886  +
mov ecx edx +
xor eax eax +
shr ecx 2 +
and edx 2 +
stos   +
jnz loc_432845  +
mov eax [esp+0C8h+var_A4] +
test eax eax +
jz loc_432672  +
xor ecx ecx +
xor esi esi +
mov edx ecx +
mov edi ebp +
jmp loc_4325D9  +
mov eax [edi+90h] +
test eax eax +
jnz loc_432850  +
mov ebx [edi+84h] +
test ebx ebx +
jz loc_432802  +
movzx eax dl +
lea ebp [esp+eax*4+0C8h+var_84] +
mov [esp+0C8h+var_C4] ebp +
mov [esp+0C8h+var_C8] ebx +
mov [esp+0C8h+var_AC] edx +
mov [esp+0C8h+var_A8] ecx +
call sub_4075B0  +
mov ecx [esp+0C8h+var_A8] +
mov [esp+0C8h+var_C4] ebp +
mov [esp+0C8h+var_C8] ebx +
mov [esp+0C8h+var_C0] ecx +
call sub_407620  +
mov eax [edi+78h] +
movzx eax byte ptr [eax+esi] +
mov [esp+0C8h+var_C4] ebp +
mov [esp+0C8h+var_C8] ebx +
mov [esp+0C8h+var_C0] eax +
call sub_4076A0  +
mov edx [esp+0C8h+var_AC] +
add edx 1 +
movzx esi dl +
cmp [esp+0C8h+var_A4] esi +
jbe loc_432670  +
mov ebx [edi+40h] +
add esi [esp+0C8h+arg_10] +
test ebx ebx +
mov ecx esi +
jz loc_432560  +
mov eax [edi+9Ch] +
mov ebx [edi+98h] +
test eax eax +
jz loc_432617  +
test ebx ebx +
jz loc_432560  +
test esi 1 +
cmovnz ebx eax +
shr ecx 1Fh +
add ecx esi +
sar ecx 1 +
jmp loc_43257C  +
test ebx ebx +
jnz loc_43257C  +
jmp loc_432560  +
mov eax ebx +
mov ecx 0Dh +
lea edi [esp+0C8h+var_84] +
xor esi esi +
stos   +
mov eax [esp+0C8h+var_9C] +
mov edx 36h +
test eax eax +
mov [edi] si +
lea edi [esp+0C8h+var_4E] +
jnz loc_432874  +
mov ecx edx +
xor eax eax +
shr ecx 2 +
and edx 2 +
stos   +
jnz loc_432833  +
mov [esp+0C8h+var_A4] 1 +
jmp loc_432555  +
mov ebp edi +
mov edi [esp+0C8h+var_A4] +
mov eax [esp+0C8h+arg_0] +
lea edx ds:0[edi*4] +
lea edi [esp+0C8h+var_4E] +
mov eax [eax+8F4h] +
mov [esp+0C8h+var_C0] edi +
lea edi [esp+0C8h+var_84] +
mov [esp+0C8h+var_C4] edi +
mov edi [esp+0C8h+arg_0] +
mov [esp+0C8h+var_BC] edx +
mov [esp+0C8h+var_C8] edi +
call eax  +
test eax eax +
js loc_4327EE  +
mov eax [esp+0C8h+var_A4] +
add [esp+0C8h+arg_10] eax +
mov eax [ebp+40h] +
test eax eax +
jz loc_4327A8  +
mov eax [esp+0C8h+arg_10] +
xor edx edx +
div  [esp+0C8h+arg_C] +
test edx edx +
jz loc_4326ED  +
mov eax [esp+0C8h+var_A0] +
cmp [esp+0C8h+arg_10] eax +
jnz loc_4327B3  +
mov esi [ebp+0A4h] +
mov eax [esp+0C8h+arg_10] +
test esi esi +
lea ebx [eax-1] +
jz loc_43292A  +
mov eax [ebp+98h] +
test eax eax +
jz loc_4328EA  +
shr ebx 1 +
mov edi [ebp+0A0h] +
mov [esp+0C8h+var_8C] 0 +
mov [esp+0C8h+var_88] 0 +
test edi edi +
jz loc_432898  +
lea eax [esp+0C8h+var_8C] +
mov [esp+0C8h+var_C8] edi +
mov [esp+0C8h+var_C4] eax +
call sub_4075B0  +
lea eax [esp+0C8h+var_8C] +
mov [esp+0C8h+var_C8] edi +
lea edi [esp+0C8h+var_88] +
mov [esp+0C8h+var_C0] ebx +
mov [esp+0C8h+var_C4] eax +
call sub_407620  +
mov [esp+0C8h+var_C4] edi +
mov [esp+0C8h+var_C8] esi +
call sub_4075B0  +
mov [esp+0C8h+var_C4] edi +
lea edi [esp+0C8h+var_8C] +
mov [esp+0C8h+var_C0] ebx +
mov [esp+0C8h+var_C8] esi +
call sub_407620  +
mov eax [esp+0C8h+arg_0] +
mov eax [eax+8F4h] +
mov [esp+0C8h+var_C4] edi +
mov edi [esp+0C8h+arg_0] +
mov [esp+0C8h+var_BC] 8 +
mov [esp+0C8h+var_C0] 0 +
mov [esp+0C8h+var_C8] edi +
call eax  +
mov eax [ebp+58h] +
mov [esp+0C8h+var_C8] eax +
call sub_459150  +
mov eax [esp+0C8h+var_A0] +
cmp eax [esp+0C8h+arg_10] +
ja loc_4324D2  +
mov eax [esp+0C8h+arg_0] +
mov edi [esp+0C8h+arg_0] +
mov eax [eax+8C0h] +
mov [esp+0C8h+var_C4] 0 +
mov [esp+0C8h+var_C8] edi +
call eax  +
mov eax [esp+0C8h+arg_14] +
jmp loc_432828  +
mov [esp+0C8h+var_C4] offset aFailed@PgmSpi +
mov [esp+0C8h+var_C8] 0 +
call sub_401740  +
mov eax [esp+0C8h+arg_0] +
mov edi [esp+0C8h+arg_0] +
mov eax [eax+8BCh] +
mov [esp+0C8h+var_C4] 1 +
mov [esp+0C8h+var_C8] edi +
call eax  +
mov eax 0FFFFFFFFh +
add esp 0BCh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
xor eax eax +
mov [edi] ax +
mov [esp+0C8h+var_A4] 1 +
jmp loc_432555  +
xor edx edx +
mov [edi] dx +
jmp loc_432549  +
mov [esp+0C8h+var_C4] offset aErrorAvr_op_wr +
mov [esp+0C8h+var_C8] 0 +
call sub_401740  +
add esp 0BCh +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
xor ecx ecx +
mov dl 34h +
mov word ptr [esp+0C8h+var_4E] cx +
lea edi [esp+0C8h+var_4E+2] +
jmp loc_43264B  +
xor ecx ecx +
mov dl 34h +
mov word ptr [esp+0C8h+var_4E] cx +
lea edi [esp+0C8h+var_4E+2] +
jmp loc_432537  +
lea edi [esp+0C8h+var_88] +
mov [esp+0C8h+var_C4] edi +
mov [esp+0C8h+var_C8] esi +
call sub_4075B0  +
mov [esp+0C8h+var_C4] edi +
mov [esp+0C8h+var_C0] ebx +
mov [esp+0C8h+var_C8] esi +
call sub_407620  +
mov eax [esp+0C8h+arg_0] +
mov eax [eax+8F4h] +
mov [esp+0C8h+var_C4] edi +
mov edi [esp+0C8h+arg_0] +
mov [esp+0C8h+var_BC] 4 +
mov [esp+0C8h+var_C0] 0 +
mov [esp+0C8h+var_C8] edi +
call eax  +
jmp loc_4327A8  +
mov eax [ebp+88h] +
test eax eax +
jnz loc_432713  +
jmp loc_432715  +
mov eax [esp+0C8h+arg_C] +
mov [esp+0C8h+var_BC] ebp +
mov [esp+0C8h+var_C4] offset aPartDoesNotSup +
mov [esp+0C8h+var_C8] 0 +
mov [esp+0C8h+var_C0] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_432828  +
mov [esp+0C8h+var_C0] ebp +
mov [esp+0C8h+var_C4] offset aPickit2_commit +
mov [esp+0C8h+var_C8] 0 +
call sub_401740  +
jmp loc_4327B3  +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov edi [esp+2Ch+arg_0] +
mov eax [edi+0A5Ch] +
mov [esp+2Ch+var_18] eax +
mov eax ds:dword_4850C0 +
test eax eax +
jz loc_432AF6  +
call usb_find_busses  +
call usb_find_devices  +
lea esi [esi+0] +
call usb_get_busses  +
test eax eax +
mov ebp eax +
jz loc_432A5B  +
mov ebx [ebp+208h] +
test ebx ebx +
jnz loc_4329AA  +
jmp loc_432A50  +
mov ebx [ebx] +
test ebx ebx +
jz loc_432A50  +
cmp word ptr [ebx+214h] 4D8h +
jnz loc_4329A0  +
cmp word ptr [ebx+216h] 33h +
jnz loc_4329A0  +
mov [esp+2Ch+var_2C] ebx +
call usb_open  +
test eax eax +
mov esi eax +
jz loc_432B30  +
mov [esp+2Ch+var_24] eax +
mov [esp+2Ch+var_28] offset aDevicePSeemedT +
mov [esp+2Ch+var_2C] 1 +
call sub_401740  +
mov [esp+2Ch+var_28] 1 +
mov [esp+2Ch+var_2C] esi +
call usb_set_configuration  +
test eax eax +
mov ebx eax +
js loc_432B5B  +
mov [esp+2Ch+var_28] 0 +
mov [esp+2Ch+var_2C] esi +
call usb_claim_interface  +
test eax eax +
mov ebx eax +
js loc_432B0A  +
mov eax [esp+2Ch+var_18] +
mov [eax] esi +
mov eax [edi+898h] +
test eax eax +
jle loc_432A95  +
mov ecx [edi+0A5Ch] +
cmp eax 0FFh +
mov edx 0FFh +
cmovle edx eax +
xor eax eax +
mov [ecx+4] dl +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ebp [ebp+0] +
test ebp ebp +
jnz loc_43298F  +
mov eax ds:dword_486584 +
mov [esp+2Ch+var_1C] 33h +
mov [esp+2Ch+var_20] 4D8h +
mov [esp+2Ch+var_28] offset aSErrorCouldNot +
mov [esp+2Ch+var_24] eax +
mov [esp+2Ch+var_2C] 0 +
call sub_401740  +
add esp 2Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
fld  qword ptr [edi+890h] +
fldz   +
fxch  st(1) +
fucomi st st(1) +
fstp  st(1) +
jbe loc_432B81  +
fmul  ds:flt_477E30 +
mov edx 0FFFFFFFFh +
mov eax [edi+0A5Ch] +
fld  ds:flt_477E34 +
fucomip st st(1) +
jbe loc_432AE7  +
fnstcw  [esp+2Ch+var_E] +
movzx edx [esp+2Ch+var_E] +
mov dh 0Ch +
mov [esp+2Ch+var_10] dx +
fldcw  [esp+2Ch+var_10] +
fistp  [esp+2Ch+var_12] +
fldcw  [esp+2Ch+var_E] +
movzx edx [esp+2Ch+var_12] +
jmp loc_432AE9  +
fstp  st +
mov [eax+4] dl +
add esp 2Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ds:dword_4850C0 1 +
call usb_init  +
jmp loc_432972  +
call usb_strerror  +
mov [esp+2Ch+var_24] ebx +
mov [esp+2Ch+var_28] offset aCouldNotClai_0 +
mov [esp+2Ch+var_2C] 0 +
mov [esp+2Ch+var_20] eax +
call sub_401740  +
jmp loc_432A1D  +
call usb_strerror  +
mov [esp+2Ch+var_28] offset aSWarningCann_2 +
mov [esp+2Ch+var_2C] 0 +
mov [esp+2Ch+var_20] eax +
mov eax ds:dword_486584 +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
jmp loc_4329A0  +
call usb_strerror  +
mov [esp+2Ch+var_24] ebx +
mov [esp+2Ch+var_28] offset aCouldNotSetCon +
mov [esp+2Ch+var_2C] 0 +
mov [esp+2Ch+var_20] eax +
call sub_401740  +
jmp loc_432A03  +
fstp  st +
xor eax eax +
jmp loc_432A45  +
***
sub esp 2Ch +
mov eax [esp+2Ch+arg_0] +
mov eax [eax+0A5Ch] +
mov edx [eax+8] +
mov eax [eax] +
mov [esp+2Ch+var_20] 40h +
mov [esp+2Ch+var_24] offset unk_477DC1 +
mov [esp+2Ch+var_1C] edx +
mov [esp+2Ch+var_28] 1 +
mov [esp+2Ch+var_2C] eax +
call usb_interrupt_write  +
add esp 2Ch +
retn   +
***
mov eax [esp+arg_0] +
mov dword ptr [eax+8C8h] offset sub_431FC0 +
mov dword ptr [eax+8CCh] offset dword_431580 +
mov dword ptr [eax+8D0h] offset dword_431570 +
mov dword ptr [eax+8D4h] offset sub_432B90 +
mov dword ptr [eax+8D8h] offset dword_4315A0 +
mov dword ptr [eax+8DCh] offset loc_4315B0 +
mov dword ptr [eax+8E0h] offset sub_432370 +
mov dword ptr [eax+8E4h] offset sub_431BB0 +
mov dword ptr [eax+8F8h] offset sub_432950 +
mov dword ptr [eax+8FCh] offset sub_431FA0 +
mov dword ptr [eax+914h] offset sub_403EA0 +
mov dword ptr [eax+910h] offset sub_4042F0 +
mov dword ptr [eax+8C0h] offset sub_431C70 +
mov dword ptr [eax+8C4h] offset loc_431590 +
mov dword ptr [eax+8ECh] offset sub_4315C0 +
mov dword ptr [eax+8F4h] offset sub_431D20 +
mov dword ptr [eax+900h] offset sub_432450 +
mov dword ptr [eax+904h] offset sub_431820 +
mov dword ptr [eax+948h] offset sub_431610 +
mov dword ptr [eax+94Ch] offset sub_432300 +
mov dword ptr [eax+950h] offset sub_4315F0 +
mov dword ptr [eax+54h] 6B636970h +
mov dword ptr [eax+58h] 327469h +
mov dword ptr [eax+5Ch] 0 +
mov dword ptr [eax+60h] 0 +
mov dword ptr [eax+64h] 0 +
mov dword ptr [eax+68h] 0 +
mov dword ptr [eax+6Ch] 0 +
mov dword ptr [eax+70h] 0 +
retn   +
***
push ebx  +
sub esp 14h +
mov eax [ebp+arg_0] +
mov ebx [eax+89Ch] +
cmp ebx 0FFFFFFFFh +
jz loc_432D6C  +
mov edx [eax+934h] +
mov [esp+18h+var_10] 1 +
mov [esp+18h+var_14] 3 +
mov [esp+18h+var_18] eax +
call edx  +
mov [esp+18h+var_18] ebx +
call ds:CloseHandle  +
sub esp 4 +
mov eax ds:dword_486584 +
mov [esp+18h+var_C] ebx +
mov [esp+18h+var_14] offset aSSer_closeClos +
mov [esp+18h+var_18] 3 +
mov [esp+18h+var_10] eax +
call sub_401740  +
mov ebx [ebp+var_4] +
leave   +
retn   +
***
push edi  +
push esi  +
xor esi esi +
push ebx  +
sub esp 3Ch +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_4] +
mov edi [eax+89Ch] +
mov ebx [eax+edx*4+17Ch] +
test ebx ebx +
js loc_432EA6  +
lea eax [ebx-1] +
cmp eax 8 +
ja loc_432F30  +
cmp ebx 1 +
jz loc_432E30  +
cmp ebx 6 +
jz loc_432E30  +
cmp ebx 8 +
nop   +
jz loc_432E30  +
cmp ebx 4 +
jz loc_432F00  +
cmp ebx 7 +
nop   +
jz loc_432F10  +
cmp ebx 3 +
jz loc_432EB5  +
mov eax ds:dword_486584 +
add ebx 1 +
mov [esp+48h+var_3C] ebx +
mov [esp+48h+var_44] offset aSSerbb_getpinU +
mov [esp+48h+var_48] 1 +
mov [esp+48h+var_40] eax +
call sub_401740  +
lea esp [ebp-0Ch] +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
lea eax [ebp+var_1C] +
mov [esp+48h+var_44] eax +
mov [esp+48h+var_48] edi +
call ds:GetCommModemStatus  +
sub esp 8 +
test eax eax +
jz loc_432F40  +
mov eax [ebp+var_1C] +
mov [esp+48h+var_44] offset aSSerbb_getpinG +
mov [esp+48h+var_48] 5 +
mov [esp+48h+var_3C] eax +
mov eax ds:dword_486584 +
mov [esp+48h+var_40] eax +
call sub_401740  +
cmp ebx 6 +
mov eax [ebp+var_1C] +
jz loc_432F28  +
cmp ebx 8 +
jz loc_432F20  +
cmp ebx 1 +
jz loc_432EF8  +
test eax eax +
setnz dl  +
mov eax edx +
movzx edx dl +
xor eax 1 +
test esi esi +
movzx eax al +
cmovz eax edx +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
and ebx 7FFFFFFFh +
mov si 1 +
jmp loc_432DC6  +
mov ebx ds:dword_4850C4 +
mov eax offset aTxd +
mov edx ds:dword_486584 +
mov [esp+48h+var_3C] eax +
mov [esp+48h+var_44] offset aSSerbb_getpinR +
mov [esp+48h+var_48] 5 +
mov [esp+48h+var_40] edx +
call sub_401740  +
test esi esi +
mov eax ebx +
jz loc_432E9E  +
test ebx ebx +
setz al  +
lea esp [ebp-0Ch] +
movzx eax al +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
and eax 80h +
jmp loc_432E89  +
mov ebx ds:dword_4850CC +
mov eax offset aDtr +
jmp loc_432EC0  +
mov ebx ds:dword_4850C8 +
mov eax offset aRts +
jmp loc_432EC0  +
and eax 10h +
jmp loc_432E89  +
and eax 20h +
jmp loc_432E89  +
mov eax 0FFFFFFFFh +
jmp loc_432E9E  +
call ds:GetLastError  +
lea edx [ebp+var_20] +
mov [esp+48h+var_38] edx +
mov [esp+48h+var_30] 0 +
mov [esp+48h+var_34] 0 +
mov [esp+48h+var_3C] 400h +
mov [esp+48h+var_44] 0 +
mov [esp+48h+var_40] eax +
mov [esp+48h+var_48] 1300h +
call ds:FormatMessageA  +
mov eax [ebp+var_20] +
sub esp 1Ch +
mov [esp+48h+var_3C] eax +
mov eax ds:dword_486584 +
mov [esp+48h+var_44] offset aSSerbb_setpinG +
mov [esp+48h+var_48] 0 +
mov [esp+48h+var_40] eax +
call sub_401740  +
mov [esp+48h+var_48] edi +
call ds:CloseHandle  +
mov eax [ebp+var_20] +
sub esp 4 +
mov [esp+48h+var_48] eax +
call ds:LocalFree  +
mov eax 0FFFFFFFFh +
sub esp 4 +
jmp loc_432E9E  +
***
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov edi [ebp+arg_0] +
mov eax [ebp+arg_4] +
mov edx [ebp+arg_8] +
mov esi [edi+89Ch] +
mov eax [edi+eax*4+17Ch] +
test eax eax +
js loc_4330C1  +
lea ecx [eax-1] +
cmp ecx 8 +
ja loc_433120  +
cmp eax 4 +
jz loc_4330D3  +
cmp eax 7 +
jz loc_433050  +
cmp eax 3 +
jz loc_4330F7  +
add eax 1 +
mov ebx 0FFFFFFFFh +
mov [esp+48h+var_3C] eax +
mov eax ds:dword_486584 +
mov [esp+48h+var_44] offset aSSerbb_setpinU +
mov [esp+48h+var_48] 1 +
mov [esp+48h+var_40] eax +
call sub_401740  +
lea esp [ebp-0Ch] +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test edx edx +
mov eax offset aClrrts +
mov ecx offset aSetrts +
cmovnz eax ecx +
cmp edx 1 +
sbb ebx ebx +
not ebx  +
add ebx 4 +
mov [esp+48h+var_3C] eax +
mov eax ds:dword_486584 +
mov [esp+48h+var_44] offset aSSerbb_setpinE +
mov [esp+48h+var_48] 5 +
mov [esp+48h+var_40] eax +
call sub_401740  +
mov [esp+48h+var_44] ebx +
mov [esp+48h+var_48] esi +
call ds:EscapeCommFunction  +
sub esp 8 +
test eax eax +
jz loc_433130  +
mov eax [edi+898h] +
xor ebx ebx +
cmp eax 1 +
jle loc_433043  +
mov [esp+48h+var_48] eax +
call sub_43A220  +
lea esp [ebp-0Ch] +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test edx edx +
setz dl  +
and eax 7FFFFFFFh +
movzx edx dl +
jmp loc_432FF7  +
cmp edx 1 +
mov eax offset aSetdtr +
sbb ebx ebx +
mov ecx offset aClrdtr +
not ebx  +
add ebx 6 +
test edx edx +
cmovz eax ecx +
mov ds:dword_4850CC edx +
jmp loc_433069  +
cmp edx 1 +
mov eax offset aClrbreak +
sbb ebx ebx +
mov ecx offset aSetbreak +
not ebx  +
add ebx 9 +
test edx edx +
cmovnz eax ecx +
mov ds:dword_4850C4 edx +
jmp loc_433069  +
mov ebx 0FFFFFFFFh +
jmp loc_433043  +
call ds:GetLastError  +
lea edx [ebp+var_1C] +
mov ebx 0FFFFFFFFh +
mov [esp+48h+var_38] edx +
mov [esp+48h+var_30] 0 +
mov [esp+48h+var_34] 0 +
mov [esp+48h+var_3C] 400h +
mov [esp+48h+var_44] 0 +
mov [esp+48h+var_40] eax +
mov [esp+48h+var_48] 1300h +
call ds:FormatMessageA  +
mov eax [ebp+var_1C] +
sub esp 1Ch +
mov [esp+48h+var_3C] eax +
mov eax ds:dword_486584 +
mov [esp+48h+var_44] offset aSSerbb_setpinS +
mov [esp+48h+var_48] 0 +
mov [esp+48h+var_40] eax +
call sub_401740  +
mov [esp+48h+var_48] esi +
call ds:CloseHandle  +
mov eax [ebp+var_1C] +
sub esp 4 +
mov [esp+48h+var_48] eax +
call ds:LocalFree  +
sub esp 4 +
jmp loc_433043  +
***
sub esp 14h +
mov ebx [esp+14h+arg_0] +
mov esi [esp+14h+arg_4] +
mov eax [ebx+esi*4+17Ch] +
and eax 7FFFFFFFh +
sub eax 1 +
cmp eax 8 +
ja loc_433211  +
mov [esp+14h+var_C] 1 +
mov [esp+14h+var_10] esi +
mov [esp+14h+var_14] ebx +
call sub_432FD0  +
mov [esp+14h+var_C] 0 +
mov [esp+14h+var_10] esi +
mov [esp+14h+var_14] ebx +
call sub_432FD0  +
xor eax eax +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov eax 0FFFFFFFFh +
jmp loc_43320B  +
***
push edi  +
push esi  +
push ebx  +
sub esp 4Ch +
mov edi [ebp+arg_0] +
mov esi [ebp+arg_4] +
mov [esp+58h+var_58] edi +
call sub_43AF50  +
test eax eax +
js loc_4333A8  +
mov [esp+58h+var_40] 0 +
mov [esp+58h+var_44] 80h +
mov [esp+58h+var_48] 3 +
mov [esp+58h+var_4C] 0 +
mov [esp+58h+var_50] 0 +
mov [esp+58h+var_54] 0C0000000h +
mov [esp+58h+var_58] esi +
call ds:CreateFileA  +
sub esp 1Ch +
cmp eax 0FFFFFFFFh +
mov ebx eax +
jz loc_4333AF  +
mov [esp+58h+var_50] 400h +
mov [esp+58h+var_54] 400h +
mov [esp+58h+var_58] eax +
call ds:SetupComm  +
xor edx edx +
sub esp 0Ch +
test eax eax +
jz loc_433340  +
mov [ebp+edx+var_34] 0 +
add edx 4 +
cmp edx 1Ch +
jb loc_4332AC  +
lea eax [ebp+var_34] +
or [ebp+var_2C] 1 +
mov [ebp+var_34] 1Ch +
mov [ebp+var_30] 2580h +
mov [ebp+var_22] 8 +
mov [esp+58h+var_54] eax +
mov [esp+58h+var_58] ebx +
call ds:SetCommState  +
sub esp 8 +
test eax eax +
jz loc_433374  +
mov eax ds:dword_486584 +
mov [esp+58h+var_48] ebx +
mov [esp+58h+var_4C] esi +
mov [esp+58h+var_54] offset aSSer_openOpene +
mov [esp+58h+var_50] eax +
mov [esp+58h+var_58] 3 +
call sub_401740  +
xor eax eax +
mov [edi+89Ch] ebx +
mov ds:dword_4850C4 0 +
mov ds:dword_4850C8 0 +
mov ds:dword_4850CC 0 +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+58h+var_58] ebx +
call ds:CloseHandle  +
mov eax ds:dword_486584 +
sub esp 4 +
mov [esp+58h+var_4C] esi +
mov [esp+58h+var_50] eax +
mov [esp+58h+var_54] offset aSSer_openCanTS +
mov [esp+58h+var_58] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_433338  +
mov [esp+58h+var_58] ebx +
call ds:CloseHandle  +
mov eax ds:dword_486584 +
sub esp 4 +
mov [esp+58h+var_4C] esi +
mov [esp+58h+var_50] eax +
mov [esp+58h+var_54] offset aSSer_openCan_0 +
mov [esp+58h+var_58] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_433338  +
mov eax 0FFFFFFFFh +
jmp loc_433338  +
call ds:GetLastError  +
lea edx [ebp+var_34] +
mov [esp+58h+var_48] edx +
mov [esp+58h+var_40] 0 +
mov [esp+58h+var_44] 0 +
mov [esp+58h+var_4C] 400h +
mov [esp+58h+var_54] 0 +
mov [esp+58h+var_50] eax +
mov [esp+58h+var_58] 1300h +
call ds:FormatMessageA  +
mov eax [ebp+var_34] +
sub esp 1Ch +
mov [esp+58h+var_48] eax +
mov eax ds:dword_486584 +
mov [esp+58h+var_4C] esi +
mov [esp+58h+var_54] offset aSSer_openCanTO +
mov [esp+58h+var_58] 0 +
mov [esp+58h+var_50] eax +
call sub_401740  +
mov eax [ebp+var_34] +
mov [esp+58h+var_58] eax +
call ds:LocalFree  +
mov eax 0FFFFFFFFh +
sub esp 4 +
jmp loc_433338  +
***
jmp sub_433440  +
***
sub esp 18h +
mov ebx [esp+18h+arg_0] +
mov dword ptr [ebx+54h] 42524553h +
mov [ebx+58h] ax +
mov [esp+18h+var_18] ebx +
call sub_410960  +
mov dword ptr [ebx+8B8h] offset sub_43A4C0 +
mov dword ptr [ebx+8BCh] offset sub_43A4F0 +
mov dword ptr [ebx+8C0h] offset sub_43A520 +
mov dword ptr [ebx+8C4h] offset sub_43A550 +
mov dword ptr [ebx+8C8h] offset sub_43ABD0 +
mov dword ptr [ebx+8CCh] offset dword_432CE0 +
mov dword ptr [ebx+8D0h] offset dword_432CF0 +
mov dword ptr [ebx+8D4h] offset dword_432D00 +
mov dword ptr [ebx+8D8h] offset dword_432D10 +
mov dword ptr [ebx+8DCh] offset dword_432D20 +
mov dword ptr [ebx+8E0h] offset sub_43AAE0 +
mov dword ptr [ebx+8E4h] offset sub_43A900 +
mov dword ptr [ebx+8ECh] offset sub_43A580 +
mov dword ptr [ebx+8F0h] offset sub_43A660 +
mov dword ptr [ebx+8F8h] offset sub_433220 +
mov dword ptr [ebx+8FCh] offset sub_432D30 +
mov dword ptr [ebx+934h] offset sub_432FD0 +
mov dword ptr [ebx+938h] offset sub_432DA0 +
mov dword ptr [ebx+93Ch] offset sub_4331C0 +
mov dword ptr [ebx+914h] offset sub_403EA0 +
mov dword ptr [ebx+910h] offset sub_4042F0 +
add esp 18h +
pop ebx  +
retn   +
***
mov eax [esp+4] +
mov eax [eax+0A5Ch] +
mov [esp+4] eax +
jmp free  +
***
test edx edx +
jz loc_433633  +
mov eax [esi+174h] +
test eax eax +
jz loc_433614  +
mov eax [ebx+8C0h] +
lea edi [esp+18h] +
mov dword ptr [esp+4] 1 +
mov [esp] ebx +
call eax  +
mov eax [esi+174h] +
mov [esp+4] edi +
mov dword ptr [esp+18h] 0 +
mov [esp] eax +
call sub_4075B0  +
lea edx [esp+1Ch] +
mov eax [ebx+8ECh] +
mov [esp+8] edx +
mov [esp+4] edi +
mov [esp] ebx +
call eax  +
mov eax [esi+70h] +
mov [esp] eax +
call sub_459150  +
mov eax [ebx+8C8h] +
mov [esp+4] esi +
mov [esp] ebx +
call eax  +
mov eax [ebx+8C0h] +
mov dword ptr [esp+4] 0 +
mov [esp] ebx +
call eax  +
xor eax eax +
add esp 20h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
mov [esp+8] esi +
mov dword ptr [esp+4] offset aChipEraseIns_1 +
mov dword ptr [esp] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_43360D  +
***
mov eax ds:dword_486584 +
add ebx 54h +
mov [esp+0Ch] ebx +
mov dword ptr [esp+4] offset aSErrorSProgr_4 +
mov dword ptr [esp] 0 +
mov [esp+8] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_43360D  +
***
sub esp 18h +
mov ebx off_461140 +
mov ebx [ebx+10h] +
mov [esp+18h+var_10] ecx +
mov [esp+18h+var_14] edx +
mov [esp+18h+var_18] eax +
call ebx  +
test eax eax +
js loc_43368A  +
xor eax eax +
add esp 18h +
pop ebx  +
retn   +
mov eax ds:dword_486584 +
mov [esp+18h+var_14] offset aSStk500_recvPr +
mov [esp+18h+var_18] 0 +
mov [esp+18h+var_10] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_433685  +
***
push esi  +
push ebx  +
sub esp 3Ch +
mov ebx [esp+3Ch+arg_4] +
lea ebp [esp+3Ch+var_2C] +
mov esi [esp+3Ch+arg_0] +
mov byte ptr [esp+3Ch+var_2C] 56h +
mov edi [esp+3Ch+arg_8] +
mov [esp+3Ch+var_27] 20h +
movzx eax byte ptr [ebx] +
lea edx [esi+89Ch] +
mov byte ptr [esp+3Ch+var_2C+1] al +
movzx eax byte ptr [ebx+1] +
mov byte ptr [esp+3Ch+var_2C+2] al +
movzx eax byte ptr [ebx+2] +
mov byte ptr [esp+3Ch+var_2C+3] al +
movzx eax byte ptr [ebx+3] +
mov [esp+3Ch+var_28] al +
mov eax off_461140 +
mov eax [eax+0Ch] +
mov [esp+3Ch+var_3C] edx +
mov [esp+3Ch+var_34] 6 +
mov [esp+3Ch+var_38] ebp +
call eax  +
mov ecx 1 +
mov edx ebp +
mov eax esi +
call sub_433660  +
test eax eax +
js loc_43378F  +
cmp byte ptr [esp+3Ch+var_2C] 14h +
jnz loc_433796  +
movzx eax byte ptr [ebx+1] +
lea edx [edi+3] +
mov ecx 1 +
mov [edi] al +
movzx eax byte ptr [ebx+2] +
mov [edi+1] al +
movzx eax byte ptr [ebx+3] +
mov [edi+2] al +
mov eax esi +
call sub_433660  +
test eax eax +
js loc_43378F  +
mov ecx 1 +
mov edx ebp +
mov eax esi +
call sub_433660  +
test eax eax +
js loc_43378F  +
xor eax eax +
cmp byte ptr [esp+3Ch+var_2C] 10h +
jnz loc_433772  +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_38] offset aSStk500_cmdPro +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_43376A  +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_38] offset aSStk500_cmdP_0 +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_43376A  +
***
sub esp 1Ch +
mov [esp+1Ch+var_1C] 1 +
call malloc  +
mov edx [esp+1Ch+arg_0] +
test eax eax +
mov [edx+0A5Ch] eax +
jz loc_4337E4  +
mov byte ptr [eax] 0FFh +
add esp 1Ch +
retn   +
mov eax ds:dword_486584 +
mov [esp+1Ch+var_18] offset aSStk500_setupO +
mov [esp+1Ch+var_1C] 0 +
mov [esp+1Ch+var_14] eax +
call sub_401740  +
add esp 1Ch +
retn   +
***
mov ecx [esp+arg_0] +
mov eax off_461140 +
lea edx [ecx+89Ch] +
mov eax [eax+14h] +
mov [esp+arg_0] edx +
jmp eax  +
***
push esi  +
push ebx  +
xor ebx ebx +
sub esp 6Ch +
mov eax off_461140 +
mov ebp [esp+6Ch+arg_0] +
lea edi [esp+6Ch+var_4C] +
mov byte ptr [esp+6Ch+var_4C] 30h +
mov byte ptr [esp+6Ch+var_4C+1] 20h +
mov eax [eax+0Ch] +
lea esi [ebp+89Ch] +
mov [esp+6Ch+var_64] 2 +
mov [esp+6Ch+var_68] edi +
mov [esp+6Ch+var_6C] esi +
call eax  +
mov eax off_461140 +
mov eax [eax+14h] +
mov [esp+6Ch+var_68] 0 +
mov [esp+6Ch+var_6C] esi +
call eax  +
mov eax off_461140 +
mov eax [eax+0Ch] +
mov [esp+6Ch+var_64] 2 +
mov [esp+6Ch+var_68] edi +
mov [esp+6Ch+var_6C] esi +
call eax  +
mov eax off_461140 +
mov eax [eax+14h] +
mov [esp+6Ch+var_68] 0 +
mov [esp+6Ch+var_6C] esi +
call eax  +
mov eax off_461140 +
mov eax [eax+0Ch] +
mov [esp+6Ch+var_64] 2 +
mov [esp+6Ch+var_68] edi +
mov [esp+6Ch+var_6C] esi +
call eax  +
mov ecx 1 +
mov eax ebp +
lea edx [esp+6Ch+var_2C] +
call sub_433660  +
movzx eax byte ptr [esp+6Ch+var_2C] +
cmp al 14h +
jz loc_433940  +
mov [esp+6Ch+var_58] eax +
mov eax ds:dword_486584 +
add ebx 1 +
mov [esp+6Ch+var_5C] 0Ah +
mov [esp+6Ch+var_60] ebx +
mov [esp+6Ch+var_68] offset aSStk500_getsyn +
mov [esp+6Ch+var_64] eax +
mov [esp+6Ch+var_6C] 0 +
call sub_401740  +
cmp ebx 0Ah +
jnz loc_4338B0  +
mov eax off_461140 +
mov eax [eax+14h] +
mov [esp+6Ch+var_68] 0 +
mov [esp+6Ch+var_6C] esi +
call eax  +
mov eax 0FFFFFFFFh +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ecx 1 +
mov eax ebp +
lea edx [esp+6Ch+var_2C] +
call sub_433660  +
test eax eax +
js loc_43392C  +
movzx edx byte ptr [esp+6Ch+var_2C] +
xor eax eax +
cmp dl 10h +
jz loc_433931  +
mov eax ds:dword_486584 +
mov [esp+6Ch+var_60] edx +
mov [esp+6Ch+var_68] offset aSStk500_gets_0 +
mov [esp+6Ch+var_6C] 0 +
mov [esp+6Ch+var_64] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_433931  +
***
push esi  +
mov esi eax +
push ebx  +
mov ebx 22h +
sub esp 3Ch +
mov [esp+40h+var_21] dl +
lea ebp [eax+89Ch] +
mov [esp+40h+var_22] cl +
lea edi [esp+40h+var_20] +
jmp loc_4339BE  +
mov [esp+40h+var_40] esi +
call sub_433830  +
test eax eax +
js loc_433A30  +
movzx eax [esp+40h+var_21] +
mov byte ptr [esp+40h+var_20] 40h +
mov byte ptr [esp+40h+var_20+3] 20h +
mov byte ptr [esp+40h+var_20+1] al +
movzx eax [esp+40h+var_22] +
mov byte ptr [esp+40h+var_20+2] al +
mov eax off_461140 +
mov eax [eax+0Ch] +
mov [esp+40h+var_38] 4 +
mov [esp+40h+var_3C] edi +
mov [esp+40h+var_40] ebp +
call eax  +
mov ecx 1 +
mov edx edi +
mov eax esi +
call sub_433660  +
test eax eax +
js loc_433A30  +
movzx eax byte ptr [esp+40h+var_20] +
cmp al 15h +
jnz loc_433A40  +
sub ebx 1 +
jnz loc_4339B2  +
mov eax ds:dword_486584 +
mov [esp+40h+var_3C] offset aSStk500_setpar +
mov [esp+40h+var_40] 0 +
mov [esp+40h+var_38] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp al 14h +
jnz loc_433ADC  +
mov ecx 1 +
mov edx edi +
mov eax esi +
call sub_433660  +
test eax eax +
js loc_433A30  +
movzx ebx byte ptr [esp+40h+var_20] +
xor eax eax +
cmp bl 10h +
jz loc_433A35  +
mov ecx 1 +
mov edx edi +
mov eax esi +
call sub_433660  +
test eax eax +
js loc_433A30  +
movzx eax byte ptr [esp+40h+var_20] +
cmp al 11h +
jz loc_433AB1  +
mov [esp+40h+var_30] eax +
mov eax ds:dword_486584 +
mov [esp+40h+var_34] 14h +
mov [esp+40h+var_3C] offset aSStk500_setp_0 +
mov [esp+40h+var_40] 0 +
mov [esp+40h+var_38] eax +
call sub_401740  +
mov eax 0FFFFFFFDh +
jmp loc_433A35  +
mov eax ds:dword_486584 +
mov [esp+40h+var_34] ebx +
mov [esp+40h+var_3C] offset aSStk500_setp_1 +
mov [esp+40h+var_40] 0 +
mov [esp+40h+var_38] eax +
call sub_401740  +
mov eax 0FFFFFFFDh +
jmp loc_433A35  +
mov [esp+40h+var_30] eax +
mov eax ds:dword_486584 +
mov [esp+40h+var_34] 14h +
mov [esp+40h+var_3C] offset aSStk500_setp_0 +
mov [esp+40h+var_40] 0 +
mov [esp+40h+var_38] eax +
call sub_401740  +
mov eax 0FFFFFFFEh +
jmp loc_433A35  +
***
fld  [esp+38h+arg_4] +
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [esp+3Ch+arg_0] +
fld  [esp+3Ch+arg_4] +
fldz   +
fxch  st(1) +
fucomi st st(1) +
fstp  st(1) +
mov [esp+3Ch+var_14] eax +
jbe loc_433D83  +
fld  ds:flt_478E98 +
fxch  st(1) +
fucomi st st(1) +
fstp  st(1) +
jbe loc_433CD0  +
fld  ds:flt_478E9C +
fxch  st(1) +
fucomi st st(1) +
jbe loc_433D60  +
fdivrp st(1) st +
mov eax offset aMhz +
jmp loc_433C52  +
fstp  st(1) +
mov [esp+3Ch+var_28] eax +
mov eax ds:dword_486584 +
mov ebp 384000h +
fld  ds:dbl_478EA8 +
mov edi 1 +
fstp  [esp+3Ch+var_24] +
fstp  [esp+3Ch+var_30] +
mov [esp+3Ch+var_34] eax +
mov [esp+3Ch+var_38] offset aSStk500_set_fo +
mov [esp+3Ch+var_3C] 0 +
call sub_401740  +
mov ecx 1 +
add ebp ebp +
mov eax 708000h +
imul ebp edi +
xor edx edx +
div  ebp +
lea ebx [eax-1] +
mov eax [esp+3Ch+var_14] +
mov edx 86h +
call sub_433990  +
test eax eax +
jnz loc_433D57  +
mov eax [esp+3Ch+var_14] +
add esp 3Ch +
mov ecx ebx +
pop ebx  +
mov edx 87h +
pop esi  +
pop edi  +
pop ebp  +
jmp sub_433990  +
fnstcw  [esp+3Ch+var_E] +
movzx eax [esp+3Ch+var_E] +
mov ah 0Ch +
mov [esp+3Ch+var_10] ax +
fldcw  [esp+3Ch+var_10] +
fistp  [esp+3Ch+var_1C] +
fldcw  [esp+3Ch+var_E] +
mov eax dword ptr [esp+3Ch+var_1C] +
cmp eax 383Fh +
mov ebp eax +
ja loc_433D8E  +
mov ecx 1 +
mov esi 708000h +
mov edi ds:dword_478E10[ecx*4] +
xor edx edx +
mov eax esi +
add ecx 1 +
mov ebx edi +
shl ebx 9 +
div  ebx +
cmp ebp eax +
jnb loc_433C90  +
cmp ecx 7 +
jnz loc_433D07  +
mov eax ds:dword_486584 +
mov dword ptr [esp+3Ch+var_30+4] 0Eh +
mov dword ptr [esp+3Ch+var_30] ebp +
mov [esp+3Ch+var_38] offset aSStk500_set__6 +
mov [esp+3Ch+var_34] eax +
mov [esp+3Ch+var_3C] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
fstp  st(1) +
fld  ds:flt_478EA0 +
fxch  st(1) +
mov eax offset aHz_0 +
fucomi st st(1) +
jbe loc_433C50  +
fdivrp st(1) st +
mov eax offset aKhz +
jmp loc_433C52  +
fstp  st +
xor ebx ebx +
xor ecx ecx +
jmp loc_433CA1  +
mov ecx 1 +
mov edi 1 +
jmp loc_433C90  +
***
push esi  +
mov esi eax +
push ebx  +
mov ebx 22h +
sub esp 3Ch +
mov [esp+40h+var_24] ecx +
lea ebp [eax+89Ch] +
mov [esp+40h+var_25] dl +
lea edi [esp+40h+var_20] +
jmp loc_433DCE  +
mov [esp+40h+var_40] esi +
call sub_433830  +
test eax eax +
js loc_433E37  +
movzx eax [esp+40h+var_25] +
mov byte ptr [esp+40h+var_20] 41h +
mov byte ptr [esp+40h+var_20+2] 20h +
mov byte ptr [esp+40h+var_20+1] al +
mov eax off_461140 +
mov eax [eax+0Ch] +
mov [esp+40h+var_38] 3 +
mov [esp+40h+var_3C] edi +
mov [esp+40h+var_40] ebp +
call eax  +
mov ecx 1 +
mov edx edi +
mov eax esi +
call sub_433660  +
test eax eax +
js loc_433E37  +
movzx eax byte ptr [esp+40h+var_20] +
cmp al 15h +
jnz loc_433E44  +
sub ebx 1 +
jnz loc_433DC2  +
mov eax ds:dword_486584 +
mov [esp+40h+var_3C] offset aSStk500_getpar +
mov [esp+40h+var_40] 0 +
mov [esp+40h+var_38] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp al 14h +
jnz loc_433EC1  +
mov ecx 1 +
mov edx edi +
mov eax esi +
call sub_433660  +
test eax eax +
js loc_433E37  +
mov ecx 1 +
mov edx edi +
movzx ebx byte ptr [esp+40h+var_20] +
mov eax esi +
call sub_433660  +
test eax eax +
js loc_433E37  +
movzx eax byte ptr [esp+40h+var_20] +
cmp al 11h +
jz loc_433EF4  +
cmp al 10h +
jnz loc_433E8E  +
mov eax [esp+40h+var_24] +
mov [eax] ebx +
add esp 3Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+40h+var_30] eax +
mov eax ds:dword_486584 +
mov [esp+40h+var_34] 14h +
mov [esp+40h+var_3C] offset aSStk500_getp_0 +
mov [esp+40h+var_40] 0 +
mov [esp+40h+var_38] eax +
call sub_401740  +
mov eax 0FFFFFFFDh +
jmp loc_433E3C  +
mov [esp+40h+var_30] eax +
mov eax ds:dword_486584 +
mov [esp+40h+var_34] 14h +
mov [esp+40h+var_3C] offset aSStk500_getp_0 +
mov [esp+40h+var_40] 0 +
mov [esp+40h+var_38] eax +
call sub_401740  +
mov eax 0FFFFFFFEh +
jmp loc_433E3C  +
mov eax ds:dword_486584 +
mov [esp+40h+var_34] ebx +
mov [esp+40h+var_3C] offset aSStk500_getp_1 +
mov [esp+40h+var_40] 0 +
mov [esp+40h+var_38] eax +
call sub_401740  +
mov eax 0FFFFFFFDh +
jmp loc_433E3C  +
***
push esi  +
push ebx  +
sub esp 3Ch +
fld  ds:dbl_478EB0 +
lea ecx [esp+3Ch+var_10] +
fadd  [esp+3Ch+arg_8] +
fnstcw  [esp+3Ch+var_26] +
mov ebx [esp+3Ch+arg_0] +
movzx edx [esp+3Ch+var_26] +
fmul  ds:dbl_478EC0 +
mov eax ebx +
mov dh 0Ch +
mov [esp+3Ch+var_28] dx +
mov edx 84h +
fldcw  [esp+3Ch+var_28] +
fistp  [esp+3Ch+var_24] +
fldcw  [esp+3Ch+var_26] +
mov esi dword ptr [esp+3Ch+var_24] +
call sub_433DA0  +
test eax eax +
jnz loc_433FD0  +
mov eax [esp+3Ch+var_10] +
cmp esi eax +
ja loc_433F90  +
mov ecx esi +
mov edx 85h +
mov eax ebx +
call sub_433990  +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
xor edx edx +
mov dword ptr [esp+3Ch+var_24] eax +
mov eax ds:dword_486584 +
mov dword ptr [esp+3Ch+var_24+4] edx +
fild  [esp+3Ch+var_24] +
fdiv  ds:dbl_478EC0 +
mov [esp+3Ch+var_34] eax +
mov [esp+3Ch+var_38] offset aSStk500_set_va +
mov [esp+3Ch+var_3C] 0 +
fstp  [esp+3Ch+var_30] +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_433F85  +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_38] offset aSStk500_set__5 +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_433F85  +
***
push edi  +
push esi  +
push ebx  +
sub esp 5Ch +
fld  [esp+68h+arg_4] +
lea ecx [esp+68h+var_1C] +
fld  st +
mov ebx [esp+68h+arg_0] +
fstp  [esp+68h+var_40] +
fadd  ds:dbl_478EB0 +
fnstcw  [esp+68h+var_32] +
movzx eax [esp+68h+var_32] +
fld  ds:flt_478EB8 +
fmul st(1) st +
mov ah 0Ch +
mov [esp+68h+var_34] ax +
mov eax ebx +
fstp  [esp+68h+var_48] +
fldcw  [esp+68h+var_34] +
fistp  [esp+68h+var_30] +
fldcw  [esp+68h+var_32] +
mov esi dword ptr [esp+68h+var_30] +
call sub_433DA0  +
fld  [esp+68h+var_48] +
test eax eax +
fld  [esp+68h+var_40] +
jnz loc_4340D5  +
mov eax [esp+68h+var_1C] +
mov ebp esi +
cmp esi eax +
jb loc_434087  +
fstp  st +
fstp  st +
mov ecx ebp +
mov edx 84h +
mov eax ebx +
call sub_433990  +
add esp 5Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
xor edx edx +
fstp  [esp+68h+var_54] +
mov dword ptr [esp+68h+var_30] eax +
mov eax ds:dword_486584 +
mov dword ptr [esp+68h+var_30+4] edx +
fild  [esp+68h+var_30] +
fdivrp st(1) st +
mov [esp+68h+var_60] eax +
mov [esp+68h+var_64] offset aSStk500_set_vt +
mov [esp+68h+var_68] 0 +
fstp  [esp+68h+var_5C] +
call sub_401740  +
mov ecx esi +
mov edx 85h +
mov eax ebx +
call sub_433990  +
test eax eax +
jz loc_434071  +
mov eax 0FFFFFFFFh +
jmp loc_43407F  +
fstp  st +
fstp  st +
mov eax ds:dword_486584 +
mov [esp+68h+var_64] offset aSStk500_set__4 +
mov [esp+68h+var_68] 0 +
mov [esp+68h+var_60] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_43407F  +
***
push ebx  +
mov ebx edx +
sub esp 54h +
mov edx 84h +
lea ecx [esp+58h+var_1C] +
call sub_433DA0  +
lea ecx [esp+58h+var_18] +
mov edx 85h +
mov eax esi +
call sub_433DA0  +
lea ecx [esp+58h+var_14] +
mov edx 86h +
mov eax esi +
call sub_433DA0  +
lea ecx [esp+58h+var_10] +
mov edx 87h +
mov eax esi +
call sub_433DA0  +
lea ecx [esp+58h+var_C] +
mov edx 89h +
mov eax esi +
call sub_433DA0  +
mov eax [esp+58h+var_1C] +
xor edx edx +
mov dword ptr [esp+58h+var_30+4] edx +
mov dword ptr [esp+58h+var_50] ebx +
mov [esp+58h+var_54] offset aSvtarget_1fV_2 +
mov dword ptr [esp+58h+var_30] eax +
mov [esp+58h+var_58] 0 +
fild  [esp+58h+var_30] +
fld  ds:flt_478EB8 +
fdiv st(1) st +
fstp  [esp+58h+var_38] +
fstp  [esp+58h+var_50+4] +
call sub_401740  +
mov eax [esp+58h+var_18] +
xor edx edx +
mov dword ptr [esp+58h+var_30+4] edx +
mov dword ptr [esp+58h+var_50] ebx +
mov [esp+58h+var_54] offset aSvaref_1fV_0 +
mov dword ptr [esp+58h+var_30] eax +
mov [esp+58h+var_58] 0 +
fild  [esp+58h+var_30] +
fld  [esp+58h+var_38] +
fdivp st(1) st +
fstp  [esp+58h+var_50+4] +
call sub_401740  +
mov dword ptr [esp+58h+var_50] ebx +
mov [esp+58h+var_54] offset aSoscillator_0 +
mov [esp+58h+var_58] 0 +
call sub_401740  +
mov eax [esp+58h+var_14] +
test eax eax +
jz loc_4342D0  +
sub eax 2 +
cmp eax 5 +
jbe loc_434294  +
fld  ds:flt_478E98 +
mov eax [esp+58h+var_10] +
xor edx edx +
mov dword ptr [esp+58h+var_30+4] edx +
add eax 1 +
mov dword ptr [esp+58h+var_30] eax +
fild  [esp+58h+var_30] +
fdivp st(1) st +
fld  ds:flt_478E9C +
fxch  st(1) +
fucomi st st(1) +
jbe loc_4342A6  +
fdivrp st(1) st +
mov eax offset aMhz +
jmp loc_434232  +
fstp  st(1) +
mov [esp+10h] eax +
fstp  [esp+58h+var_50] +
mov [esp+58h+var_54] offset a_3fS_0 +
mov [esp+58h+var_58] 0 +
call sub_401740  +
mov eax [esp+58h+var_C] +
xor edx edx +
mov dword ptr [esp+58h+var_30+4] edx +
mov dword ptr [esp+58h+var_50] ebx +
mov [esp+58h+var_54] offset aSsckPeriod_1_0 +
mov dword ptr [esp+58h+var_30] eax +
fild  [esp+58h+var_30] +
fmul  ds:flt_478EC8 +
mov [esp+58h+var_58] 0 +
fdiv  ds:flt_478ECC +
fadd  ds:dbl_478ED0 +
fstp  [esp+58h+var_50+4] +
call sub_401740  +
add esp 54h +
pop ebx  +
pop esi  +
retn   +
fild  ds:dword_478DF8[eax*4] +
fdivr  ds:flt_478E98 +
jmp loc_4341FB  +
fstp  st(1) +
fld  ds:flt_478EA0 +
fxch  st(1) +
mov eax offset aHz_0 +
fucomi st st(1) +
jbe loc_434230  +
fdivrp st(1) st +
mov eax offset aKhz +
jmp loc_434232  +
mov [esp+58h+var_54] offset aOff_1 +
mov [esp+58h+var_58] 0 +
call sub_401740  +
jmp loc_43424E  +
***
mov eax [esp+4] +
mov edx offset unk_478656 +
jmp sub_434100  +
***
push esi  +
mov edx 80h +
push ebx  +
sub esp 34h +
mov ebx [esp+40h] +
lea ecx [esp+28h] +
mov esi [esp+44h] +
mov eax ebx +
call sub_433DA0  +
lea ecx [esp+20h] +
mov edx 81h +
mov eax ebx +
call sub_433DA0  +
lea ecx [esp+24h] +
mov edx 82h +
mov eax ebx +
call sub_433DA0  +
lea ecx [esp+2Ch] +
mov edx 98h +
mov eax ebx +
call sub_433DA0  +
mov eax [esp+28h] +
mov [esp+8] esi +
mov dword ptr [esp+4] offset aShardwareVer_0 +
mov dword ptr [esp] 0 +
mov [esp+0Ch] eax +
call sub_401740  +
mov eax [esp+24h] +
mov [esp+8] esi +
mov dword ptr [esp+4] offset aSfirmwareVer_2 +
mov dword ptr [esp] 0 +
mov [esp+10h] eax +
mov eax [esp+20h] +
mov [esp+0Ch] eax +
call sub_401740  +
mov eax [esp+2Ch] +
cmp eax 2 +
ja loc_4343D4  +
cmp eax 1 +
mov edx offset aStk502_0 +
jz loc_4343B8  +
cmp eax 2 +
mov edx offset aUnknown_10 +
mov eax offset aStk501_0 +
cmovz edx eax +
mov [esp+0Ch] edx +
mov [esp+8] esi +
mov dword ptr [esp+4] offset aStopcardS_0 +
mov dword ptr [esp] 0 +
call sub_401740  +
mov edx esi +
mov eax ebx +
call sub_434100  +
add esp 34h +
pop ebx  +
pop esi  +
retn   +
***
mov edi 22h +
push edi  +
push edi  +
push esi  +
push ebx  +
sub esp 7Ch +
mov eax [ebp+arg_C] +
add eax 1Fh +
and eax 0FFFFFFF0h +
call sub_457F80  +
mov edi offset aFlash +
mov ecx 6 +
mov esi [ebp+arg_8] +
sub esp eax +
cmps   +
lea ebx [esp+88h+var_74] +
jz loc_434970  +
mov esi [ebp+arg_8] +
mov edi offset aEeprom +
mov ecx 7 +
cmps   +
jnz loc_434B85  +
mov esi [ebp+arg_8] +
mov eax 45h +
mov ecx [esi+98h] +
test ecx ecx +
jnz loc_434982  +
mov esi [ebp+arg_8] +
mov edx [esi+88h] +
test edx edx +
jnz loc_434982  +
mov [ebp+var_4C] 1 +
jmp loc_434989  +
mov esi [ebp+arg_8] +
mov eax 46h +
mov ecx [esi+98h] +
test ecx ecx +
jz loc_434955  +
mov [ebp+var_4C] 2 +
mov esi [ebp+arg_10] +
add esi [ebp+arg_14] +
cmp [ebp+arg_10] esi +
mov [ebp+var_50] esi +
jnb loc_434B80  +
mov [ebp+var_22] al +
lea eax [ebx+4] +
mov esi [ebp+arg_8] +
mov [ebp+var_48] eax +
mov eax [ebp+arg_0] +
add esi 0A0h +
add eax 89Ch +
mov [ebp+var_44] eax +
mov eax [ebp+arg_C] +
mov [ebp+var_40] esi +
shr eax 8 +
mov [ebp+var_68] eax +
movzx eax byte ptr [ebp+arg_C] +
mov [ebp+var_51] al +
mov eax [ebp+arg_0] +
mov edi offset aMib510 +
mov eax [eax] +
mov [esp+88h+var_88] eax +
call sub_406F20  +
mov [esp+88h+var_88] eax +
call sub_406F60  +
mov ecx 7 +
mov esi eax +
cmps   +
jz loc_434A20  +
mov edi [ebp+var_50] +
sub edi [ebp+arg_10] +
cmp [ebp+arg_C] edi +
jbe loc_434B22  +
mov eax edi +
shr eax 8 +
mov [ebp+var_38] eax +
mov eax edi +
mov [ebp+var_21] al +
lea eax [edi+4] +
mov [ebp+var_28] eax +
lea eax [edi+5] +
mov [ebp+var_3C] eax +
jmp loc_434A3B  +
mov [ebp+var_3C] 105h +
mov edi 100h +
mov [ebp+var_28] 104h +
mov [ebp+var_21] 0 +
mov byte ptr [ebp+var_38] 1 +
mov eax [ebp+arg_10] +
xor edx edx +
mov esi 22h +
mov [ebp+var_1C] edi +
mov edi [ebp+arg_0] +
div  [ebp+var_4C] +
mov [ebp+var_20] eax +
jmp loc_434A63  +
mov [esp+88h+var_88] edi +
call sub_433830  +
test eax eax +
js loc_434B15  +
mov edx [ebp+var_40] +
mov eax edi +
mov ecx [ebp+var_20] +
call sub_4343F0  +
movzx eax byte ptr [ebp+var_38] +
mov byte ptr [ebx] 64h +
mov ecx [ebp+var_1C] +
mov [ebx+1] al +
movzx eax [ebp+var_21] +
mov [ebx+2] al +
movzx eax [ebp+var_22] +
mov [ebx+3] al +
mov eax [ebp+arg_8] +
mov eax [eax+78h] +
add eax [ebp+arg_10] +
mov [esp+88h+var_80] ecx +
mov [esp+88h+var_84] eax +
mov eax [ebp+var_48] +
mov [esp+88h+var_88] eax +
call memcpy  +
mov eax [ebp+var_28] +
mov edx [ebp+var_3C] +
mov ecx [ebp+var_44] +
mov byte ptr [ebx+eax] 20h +
mov eax off_461140 +
mov eax [eax+0Ch] +
mov [esp+88h+var_80] edx +
mov [esp+88h+var_88] ecx +
mov [esp+88h+var_84] ebx +
call eax  +
mov ecx 1 +
mov edx ebx +
mov eax edi +
call sub_433660  +
test eax eax +
js loc_434B15  +
movzx eax byte ptr [ebx] +
cmp al 15h +
jnz loc_434B50  +
sub esi 1 +
jnz loc_434A53  +
mov eax ds:dword_486584 +
mov [esp+88h+var_84] offset aSStk500_paged_ +
mov [esp+88h+var_88] 0 +
mov [esp+88h+var_80] eax +
call sub_401740  +
lea esp [ebp-0Ch] +
mov eax 0FFFFFFFDh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax 0FFFFFFFFh +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
movzx eax [ebp+var_51] +
mov edi [ebp+arg_C] +
mov [ebp+var_21] al +
mov eax [ebp+arg_C] +
add eax 4 +
mov [ebp+var_28] eax +
mov eax [ebp+arg_C] +
add eax 5 +
mov [ebp+var_3C] eax +
movzx eax byte ptr [ebp+var_68] +
mov byte ptr [ebp+var_38] al +
jmp loc_434A3B  +
cmp al 14h +
mov edi [ebp+var_1C] +
jnz loc_434B8C  +
mov eax [ebp+arg_0] +
mov ecx 1 +
mov edx ebx +
call sub_433660  +
test eax eax +
js loc_434B15  +
movzx eax byte ptr [ebx] +
cmp al 10h +
jnz loc_434BBF  +
add [ebp+arg_10] edi +
mov eax [ebp+var_50] +
cmp eax [ebp+arg_10] +
ja loc_4349CB  +
mov eax [ebp+arg_14] +
jmp loc_434B1A  +
mov eax 0FFFFFFFEh +
jmp loc_434B1A  +
mov [esp+88h+var_78] eax +
mov eax ds:dword_486584 +
mov [esp+88h+var_7C] 14h +
mov [esp+88h+var_84] offset aSStk500_page_0 +
mov [esp+88h+var_88] 0 +
mov [esp+88h+var_80] eax +
call sub_401740  +
mov eax 0FFFFFFFCh +
jmp loc_434B1A  +
mov [esp+88h+var_78] eax +
mov eax ds:dword_486584 +
mov [esp+88h+var_7C] 14h +
mov [esp+88h+var_84] offset aSStk500_page_0 +
mov [esp+88h+var_88] 0 +
mov [esp+88h+var_80] eax +
call sub_401740  +
mov eax 0FFFFFFFBh +
jmp loc_434B1A  +
***
push esi  +
mov esi eax +
push ebx  +
mov ebx 22h +
sub esp 3Ch +
mov [esp+40h+var_24] edx +
lea ebp [esi+89Ch] +
mov byte ptr [esp+40h+var_19] 0AAh +
lea edi [esp+40h+var_19] +
mov byte ptr [esp+40h+var_19+1] 55h +
mov byte ptr [esp+40h+var_19+2] 55h +
mov byte ptr [esp+40h+var_19+3] 0AAh +
mov [esp+40h+var_15] 17h +
mov [esp+40h+var_14] 51h +
mov [esp+40h+var_13] 31h +
mov [esp+40h+var_12] 13h +
mov [esp+40h+var_11] dl +
jmp loc_434C60  +
mov [esp+40h+var_40] esi +
call sub_433830  +
test eax eax +
js loc_434CE8  +
mov eax off_461140 +
mov eax [eax+0Ch] +
mov [esp+40h+var_38] 9 +
mov [esp+40h+var_3C] edi +
mov [esp+40h+var_40] ebp +
call eax  +
mov ecx 1 +
mov edx edi +
mov eax esi +
call sub_433660  +
test eax eax +
js loc_434CE8  +
movzx eax byte ptr [esp+40h+var_19] +
cmp al 15h +
jnz loc_434CF5  +
sub ebx 1 +
jnz loc_434C50  +
mov eax ds:dword_486584 +
mov [esp+40h+var_3C] offset aSMib510_ispCan +
mov [esp+40h+var_40] 0 +
mov [esp+40h+var_38] eax +
call sub_401740  +
add esp 3Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp-0Ch+arg_18] +
mov [esp-0Ch+arg_0] offset aSMib510_ispCom +
mov dword ptr [esp+0] 0 +
mov [esp-0Ch+arg_8] eax +
mov eax ds:dword_486584 +
mov [esp-0Ch+arg_4] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp al 14h +
jnz loc_434D4E  +
mov ecx 1 +
mov edx edi +
mov eax esi +
call sub_433660  +
test eax eax +
js loc_434CE8  +
movzx eax byte ptr [esp+40h+var_19] +
cmp al 10h +
jz loc_434D4A  +
cmp al 13h +
jz loc_434D81  +
cmp al 11h +
jz loc_434CC3  +
mov [esp+40h+var_34] eax +
mov eax ds:dword_486584 +
mov [esp+40h+var_3C] offset aSMib510_ispUnk +
mov [esp+40h+var_40] 0 +
mov [esp+40h+var_38] eax +
call sub_401740  +
add esp 3Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
xor eax eax +
jmp loc_434CED  +
mov [esp+40h+var_30] eax +
mov eax ds:dword_486584 +
mov [esp+40h+var_34] 14h +
mov [esp+40h+var_3C] offset aSMib510_ispPro +
mov [esp+40h+var_40] 0 +
mov [esp+40h+var_38] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_434CED  +
mov eax ds:dword_486584 +
mov [esp+40h+var_3C] offset aSMib510_ispNoD +
mov [esp+40h+var_40] 0 +
mov [esp+40h+var_38] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_434CED  +
***
push edi  +
mov edi offset aMib510 +
push esi  +
push ebx  +
sub esp 10h +
mov ebx [esp+20h] +
mov eax [ebx] +
mov [esp] eax +
call sub_406F20  +
mov [esp] eax +
call sub_406F60  +
mov ecx 7 +
mov esi eax +
cmps   +
jnz loc_434DE5  +
xor edx edx +
mov eax ebx +
call sub_434C00  +
mov eax off_461140 +
lea edx [ebx+89Ch] +
mov eax [eax+8] +
mov [esp] edx +
call eax  +
mov dword ptr [ebx+89Ch] 0FFFFFFFFh +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
push edi  +
push esi  +
push ebx  +
sub esp 20h +
mov ebx [esp+30h] +
mov esi [esp+34h] +
lea eax [ebx+74h] +
mov [esp+4] esi +
lea edi [ebx+89Ch] +
mov [esp] eax +
call strcpy  +
mov edx [ebx+480h] +
mov eax 1C200h +
test edx edx +
cmovnz eax edx +
mov edx off_461140 +
mov [esp+18h] eax +
mov edx [edx] +
mov [esp+4] eax +
mov eax [esp+1Ch] +
mov [esp+0Ch] edi +
mov [esp] esi +
mov [esp+8] eax +
call edx  +
cmp eax 0FFFFFFFFh +
jz loc_434EC2  +
mov eax off_461140 +
mov eax [eax+14h] +
mov [esp] edi +
mov edi offset aMib510 +
mov dword ptr [esp+4] 0 +
call eax  +
mov eax [ebx] +
mov [esp] eax +
call sub_406F20  +
mov [esp] eax +
call sub_406F60  +
mov ecx 7 +
mov esi eax +
cmps   +
jz loc_434EB2  +
mov [esp] ebx +
call sub_433830  +
sar eax 1Fh +
add esp 20h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
mov edx 1 +
mov eax ebx +
call sub_434C00  +
test eax eax +
jz loc_434EA0  +
mov eax 0FFFFFFFFh +
jmp loc_434EAB  +
***
push esi  +
push ebx  +
mov ebx 22h +
sub esp 3Ch +
mov esi [esp+3Ch+arg_0] +
lea edi [esp+3Ch+var_1C] +
lea ebp [esi+89Ch] +
jmp loc_434F00  +
mov [esp+3Ch+var_3C] esi +
call sub_433830  +
test eax eax +
js loc_434F90  +
mov eax off_461140 +
mov byte ptr [esp+3Ch+var_1C] 50h +
mov byte ptr [esp+3Ch+var_1C+1] 20h +
mov eax [eax+0Ch] +
mov [esp+3Ch+var_34] 2 +
mov [esp+3Ch+var_38] edi +
mov [esp+3Ch+var_3C] ebp +
call eax  +
mov ecx 1 +
mov edx edi +
mov eax esi +
call sub_433660  +
test eax eax +
js loc_434F90  +
movzx eax byte ptr [esp+3Ch+var_1C] +
cmp al 15h +
jnz loc_434FA0  +
sub ebx 1 +
jnz loc_434EF0  +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_38] offset aSStk500_progra +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
add esp 3Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ds:dword_486584 +
mov [esp-10h+arg_0] offset aSStk500_prog_0 +
mov dword ptr [esp+0] 0 +
mov [esp-10h+arg_4] eax +
call sub_401740  +
lea esi [esi+0] +
mov eax 0FFFFFFFFh +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp al 14h +
jnz loc_434FF9  +
mov ecx 1 +
mov edx edi +
mov eax esi +
call sub_433660  +
test eax eax +
js loc_434F90  +
movzx eax byte ptr [esp+3Ch+var_1C] +
cmp al 10h +
jz loc_434FF5  +
cmp al 13h +
jz loc_43502C  +
cmp al 11h +
jz loc_434F6D  +
mov [esp+3Ch+var_30] eax +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_38] offset aSStk500_prog_1 +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
add esp 3Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
xor eax eax +
jmp loc_434F95  +
mov [esp+3Ch+var_2C] eax +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_30] 14h +
mov [esp+3Ch+var_38] offset aSStk500_prog_2 +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_434F95  +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_38] offset aSStk500_prog_3 +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_434F95  +
***
push esi  +
push ebx  +
mov ebx 22h +
sub esp 3Ch +
mov esi [esp+3Ch+arg_0] +
lea edi [esp+3Ch+var_1C] +
lea ebp [esi+89Ch] +
jmp loc_43508C  +
mov [esp+3Ch+var_3C] esi +
call sub_433830  +
test eax eax +
js loc_4350EC  +
mov eax off_461140 +
mov byte ptr [esp+3Ch+var_1C] 51h +
mov byte ptr [esp+3Ch+var_1C+1] 20h +
mov eax [eax+0Ch] +
mov [esp+3Ch+var_34] 2 +
mov [esp+3Ch+var_38] edi +
mov [esp+3Ch+var_3C] ebp +
call eax  +
mov ecx 1 +
mov edx edi +
mov eax esi +
call sub_433660  +
test eax eax +
js loc_4350EC  +
movzx eax byte ptr [esp+3Ch+var_1C] +
cmp al 15h +
jnz loc_4350F4  +
sub ebx 1 +
jnz loc_435080  +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_38] offset aSStk500_disabl +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp al 14h +
jz loc_435129  +
mov [esp+3Ch+var_2C] eax +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_30] 14h +
mov [esp+3Ch+var_38] offset aSStk500_disa_0 +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ecx 1 +
mov edx edi +
mov eax esi +
call sub_433660  +
test eax eax +
js loc_4350EC  +
movzx eax byte ptr [esp+3Ch+var_1C] +
cmp al 10h +
jz loc_4350EC  +
cmp al 13h +
jz loc_43516B  +
mov [esp+3Ch+var_30] eax +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_38] offset aSStk500_disa_1 +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
jmp loc_4350EC  +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_38] offset aSStk500_disa_2 +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
jmp loc_4350EC  +
***
push edi  +
mov edi offset aMib510 +
push esi  +
push ebx  +
sub esp 6Ch +
mov ebp [esp+78h+arg_0] +
lea ecx [esp+78h+var_50] +
mov ebx [esp+78h+arg_4] +
mov eax ebp +
call sub_433DA0  +
lea ecx [esp+78h+var_4C] +
mov edx 82h +
mov eax ebp +
call sub_433DA0  +
mov eax [ebp+0] +
mov [esp+78h+var_78] eax +
call sub_406F20  +
mov [esp+78h+var_78] eax +
call sub_406F60  +
mov ecx 7 +
mov [esp+78h+var_5C] 0 +
mov esi eax +
cmps   +
setnbe dl  +
setb al  +
cmp dl al +
jz loc_43520B  +
cmp [esp+78h+var_50] 1 +
mov [esp+78h+var_5C] 4 +
jbe loc_4355A3  +
lea eax [ebp+89Ch] +
mov [esp+78h+var_64] eax +
lea esi [esp+78h+var_38] +
mov [esp+78h+var_60] 22h +
xor eax eax +
mov dword ptr [esi+eax] 0 +
add eax 4 +
cmp eax 20h +
jb loc_435223  +
mov eax [ebx+68h] +
mov byte ptr [esp+78h+var_38] 42h +
mov byte ptr [esp+78h+var_38+1] al +
mov eax [ebx+84h] +
and eax 3 +
cmp eax 3 +
jz loc_435251  +
mov byte ptr [esp+78h+var_38+3] 1 +
mov eax [ebx+84h] +
test al 2 +
jz loc_435268  +
test al 4 +
jnz loc_435427  +
mov [esp+78h+var_34] 1 +
mov [esp+78h+var_74] offset aLock_0 +
mov [esp+78h+var_78] ebx +
mov [esp+78h+var_33] 1 +
mov [esp+78h+var_32] 1 +
call sub_407980  +
test eax eax +
jz loc_435434  +
mov eax [eax+44h] +
mov [esp+78h+var_31] al +
mov [esp+78h+var_74] offset aFuse_3 +
mov [esp+78h+var_78] ebx +
mov [esp+78h+var_30] 0 +
call sub_407980  +
test eax eax +
jz loc_4352B1  +
mov eax [eax+44h] +
add [esp+78h+var_30] al +
mov [esp+78h+var_74] offset aLfuse_3 +
mov [esp+78h+var_78] ebx +
call sub_407980  +
test eax eax +
jz loc_4352CC  +
mov eax [eax+44h] +
add [esp+78h+var_30] al +
mov [esp+78h+var_74] offset aHfuse_3 +
mov [esp+78h+var_78] ebx +
call sub_407980  +
test eax eax +
jz loc_4352E7  +
mov eax [eax+44h] +
add [esp+78h+var_30] al +
mov [esp+78h+var_74] offset aEfuse_3 +
mov [esp+78h+var_78] ebx +
call sub_407980  +
test eax eax +
jz loc_435302  +
mov eax [eax+44h] +
add [esp+78h+var_30] al +
mov [esp+78h+var_74] offset aFlash +
mov [esp+78h+var_78] ebx +
call sub_407980  +
test eax eax +
jz loc_435460  +
movzx edx byte ptr [eax+60h] +
mov ecx [eax+40h] +
mov [esp+78h+var_2F] dl +
movzx edx byte ptr [eax+61h] +
test ecx ecx +
mov [esp+78h+var_2E] dl +
jz loc_435341  +
mov edx [eax+48h] +
mov ecx edx +
sar ecx 8 +
mov [esp+78h+var_2B] cl +
mov [esp+78h+var_2A] dl +
mov eax [eax+44h] +
mov edx eax +
shr edx 18h +
mov [esp+78h+var_27] dl +
mov edx eax +
sar edx 10h +
mov [esp+78h+var_26] dl +
mov edx eax +
sar edx 8 +
mov [esp+78h+var_25] dl +
mov [esp+78h+var_24] al +
mov [esp+78h+var_74] offset aEeprom +
mov [esp+78h+var_78] ebx +
call sub_407980  +
test eax eax +
mov edi eax +
jz loc_435440  +
movzx eax byte ptr [eax+60h] +
mov [esp+78h+var_2D] al +
movzx eax byte ptr [edi+61h] +
mov [esp+78h+var_2C] al +
mov eax [edi+44h] +
mov edx eax +
sar edx 8 +
mov [esp+78h+var_29] dl +
mov [esp+78h+var_28] al +
mov eax off_461140 +
mov ecx [esp+78h+var_64] +
mov [esp+78h+var_23] 20h +
mov eax [eax+0Ch] +
mov [esp+78h+var_78] ecx +
mov [esp+78h+var_70] 16h +
mov [esp+78h+var_74] esi +
call eax  +
mov ecx 1 +
mov edx esi +
mov eax ebp +
call sub_433660  +
test eax eax +
js loc_43541A  +
movzx eax byte ptr [esp+78h+var_38] +
cmp al 15h +
jnz loc_435490  +
mov eax ds:dword_486584 +
mov [esp+78h+var_6C] 15h +
mov [esp+78h+var_74] offset aSStk500_initia +
mov [esp+78h+var_78] 0 +
mov [esp+78h+var_70] eax +
call sub_401740  +
sub [esp+78h+var_60] 1 +
jz loc_43541A  +
mov [esp+78h+var_78] ebp +
call sub_433830  +
test eax eax +
jns loc_435221  +
mov eax 0FFFFFFFFh +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+78h+var_5C] 0 +
jmp loc_435268  +
mov [esp+78h+var_31] 0 +
jmp loc_435291  +
mov [esp+78h+var_2D] 0FFh +
mov [esp+78h+var_2C] 0FFh +
mov [esp+78h+var_29] 0 +
mov [esp+78h+var_28] 0 +
jmp loc_43539D  +
mov [esp+78h+var_2F] 0FFh +
mov [esp+78h+var_2E] 0FFh +
mov [esp+78h+var_2B] 0 +
mov [esp+78h+var_2A] 0 +
mov [esp+78h+var_27] 0 +
mov [esp+78h+var_26] 0 +
mov [esp+78h+var_25] 0 +
mov [esp+78h+var_24] 0 +
jmp loc_435363  +
cmp al 14h +
jnz loc_4356B8  +
mov ecx 1 +
mov edx esi +
mov eax ebp +
call sub_433660  +
test eax eax +
js loc_43541A  +
movzx eax byte ptr [esp+78h+var_38] +
cmp al 10h +
jnz loc_4356F5  +
mov edx [esp+78h+var_5C] +
test edx edx +
jz loc_4355B6  +
movzx eax byte ptr [ebx+74h] +
test al al +
jz loc_43564A  +
movzx edx byte ptr [ebx+75h] +
test dl dl +
jz loc_43564A  +
mov byte ptr [esp+78h+var_38+2] al +
mov byte ptr [esp+78h+var_38+3] dl +
movzx eax byte ptr [esp+78h+var_5C] +
test edi edi +
lea edx [eax+1] +
mov byte ptr [esp+78h+var_38] dl +
jz loc_4356EB  +
mov eax [edi+48h] +
mov byte ptr [esp+78h+var_38+1] al +
cmp [esp+78h+var_5C] 4 +
jz loc_435699  +
mov [esp+78h+arg_4] ebx +
mov ebx [esp+78h+var_5C] +
lea edi [esp+78h+var_48] +
mov [esp+78h+var_60] 22h +
mov byte ptr [esp+78h+var_48] 45h +
xor eax eax +
jmp loc_435534  +
movzx edx byte ptr [esi+eax] +
add eax 1 +
cmp eax ebx +
mov [edi+eax] dl +
jle loc_435530  +
mov edx off_461140 +
mov eax ebx +
add eax 3 +
mov byte ptr [esp+ebx+78h+var_48+2] 20h +
mov edx [edx+0Ch] +
mov [esp+78h+var_70] eax +
mov eax [esp+78h+var_64] +
mov [esp+78h+var_74] edi +
mov [esp+78h+var_78] eax +
call edx  +
mov ecx 1 +
mov edx edi +
mov eax ebp +
call sub_433660  +
test eax eax +
js loc_435628  +
movzx eax byte ptr [esp+78h+var_48] +
cmp al 15h +
jnz loc_4355CD  +
sub [esp+78h+var_60] 1 +
jz loc_43567A  +
mov [esp+78h+var_78] ebp +
call sub_433830  +
test eax eax +
js loc_435628  +
movzx edx byte ptr [esp+78h+var_38] +
jmp loc_435524  +
jz loc_4356A8  +
mov [esp+78h+var_5C] 3 +
jmp loc_43520B  +
mov eax [ebp+8E0h] +
mov [esp+78h+var_74] ebx +
mov [esp+78h+var_78] ebp +
call eax  +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp al 14h +
mov ebx [esp+78h+arg_4] +
jnz loc_43574A  +
mov ecx 1 +
mov edx edi +
mov eax ebp +
call sub_433660  +
test eax eax +
js loc_435628  +
movzx eax byte ptr [esp+78h+var_48] +
cmp al 10h +
jz loc_4355B6  +
cmp al 13h +
jz loc_435778  +
cmp al 11h +
jz loc_435728  +
mov [esp+78h+var_6C] eax +
mov eax ds:dword_486584 +
mov [esp+78h+var_74] offset aSStk500_set_ex +
mov [esp+78h+var_78] 0 +
mov [esp+78h+var_70] eax +
call sub_401740  +
mov eax ds:dword_486584 +
mov [esp+78h+var_74] offset aSStk500_init_0 +
mov [esp+78h+var_78] 0 +
mov [esp+78h+var_70] eax +
call sub_401740  +
jmp loc_43541A  +
mov eax ds:dword_486584 +
mov [esp+78h+var_6C] ebx +
mov [esp+78h+var_74] offset aSPagelAndBs2Si +
mov [esp+78h+var_78] 2 +
mov [esp+78h+var_70] eax +
call sub_401740  +
mov byte ptr [esp+78h+var_38+2] 0D7h +
mov byte ptr [esp+78h+var_38+3] 0A0h +
jmp loc_4354E7  +
mov eax ds:dword_486584 +
mov [esp+78h+var_74] offset aSStk500_set__0 +
mov [esp+78h+var_78] 0 +
mov [esp+78h+var_70] eax +
call sub_401740  +
jmp loc_435628  +
mov eax [ebx+7Ch] +
test eax eax +
setnz [esp+78h+var_34]  +
jmp loc_43550D  +
cmp [esp+78h+var_4C] 0Ah +
jbe loc_4355A9  +
jmp loc_43520B  +
mov [esp+78h+var_68] eax +
mov eax ds:dword_486584 +
mov [esp+78h+var_6C] 14h +
mov [esp+78h+var_74] offset aSStk500_init_1 +
mov [esp+78h+var_78] 0 +
mov [esp+78h+var_70] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_43541F  +
mov byte ptr [esp+78h+var_38+1] 0 +
jmp loc_435502  +
mov [esp+78h+var_68] eax +
mov eax ds:dword_486584 +
mov [esp+78h+var_6C] 10h +
mov [esp+78h+var_74] offset aSStk500_init_2 +
mov [esp+78h+var_78] 0 +
mov [esp+78h+var_70] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_43541F  +
mov eax ds:dword_486584 +
mov [esp+78h+var_74] offset aSStk500_set__1 +
mov [esp+78h+var_78] 0 +
mov [esp+78h+var_70] eax +
call sub_401740  +
jmp loc_435628  +
mov [esp+78h+var_68] eax +
mov eax ds:dword_486584 +
mov [esp+78h+var_6C] 14h +
mov [esp+78h+var_74] offset aSStk500_set__2 +
mov [esp+78h+var_78] 0 +
mov [esp+78h+var_70] eax +
call sub_401740  +
jmp loc_435628  +
mov eax ds:dword_486584 +
mov [esp+78h+var_74] offset aSStk500_set__3 +
mov [esp+78h+var_78] 0 +
mov [esp+78h+var_70] eax +
call sub_401740  +
jmp loc_435628  +
***
mov eax [esp+arg_0] +
mov edx 3030h +
mov dword ptr [eax+54h] 354B5453h +
mov [eax+58h] dx +
mov byte ptr [eax+5Ah] 0 +
mov dword ptr [eax+8C8h] offset sub_435190 +
mov dword ptr [eax+8CCh] offset loc_434300 +
mov dword ptr [eax+8D0h] offset dword_433540 +
mov dword ptr [eax+8D4h] offset sub_435060 +
mov dword ptr [eax+8E0h] offset sub_434ED0 +
mov dword ptr [eax+8E4h] offset aWvsgL0lt4lu +
mov dword ptr [eax+8ECh] offset sub_4336B0 +
mov dword ptr [eax+8F8h] offset loc_434E10 +
mov dword ptr [eax+8FCh] offset loc_434DB0 +
mov dword ptr [eax+914h] offset sub_403EA0 +
mov dword ptr [eax+910h] offset sub_4042F0 +
mov dword ptr [eax+900h] offset sub_434900 +
mov dword ptr [eax+904h] offset sub_4345B0 +
mov dword ptr [eax+920h] offset loc_4342F0 +
mov dword ptr [eax+924h] offset sub_434000 +
mov dword ptr [eax+928h] offset sub_433F20 +
mov dword ptr [eax+92Ch] offset sub_433C00 +
mov dword ptr [eax+930h] offset sub_433B10 +
mov dword ptr [eax+94Ch] offset sub_4337C0 +
mov dword ptr [eax+950h] offset loc_433550 +
mov dword ptr [eax+8B4h] 100h +
retn   +
***
mov ebx [esp+18h+arg_0] +
mov ebx [esp+18h+arg_0] +
sub esp 14h +
mov ebx [esp+14h+arg_0] +
mov esi [esp+14h+arg_4] +
mov [esp+14h+var_14] ebx +
call sub_4357A0  +
mov eax [ebx+8F8h] +
mov [esp+14h+var_10] esi +
mov [esp+14h+var_14] ebx +
call eax  +
test eax eax +
js loc_435920  +
mov eax ds:dword_486584 +
mov [esp+14h+var_10] offset aSSuccessfullyO +
mov [esp+14h+var_14] 0 +
mov [esp+14h+var_C] eax +
call sub_401740  +
xor eax eax +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov eax [ebx+8FCh] +
mov [esp+14h+var_14] ebx +
call eax  +
mov [esp+14h+var_14] ebx +
call sub_425820  +
mov eax [ebx+8F8h] +
mov [esp+14h+var_10] esi +
mov [esp+14h+var_14] ebx +
call eax  +
test eax eax +
mov eax ds:dword_486584 +
mov [esp+14h+var_C] eax +
js loc_43596B  +
mov [esp+14h+var_10] offset aSSuccessfull_0 +
mov [esp+14h+var_14] 0 +
call sub_401740  +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
mov [esp+14h+var_10] offset aSCannotOpenEit +
mov [esp+14h+var_14] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_435917  +
***
mov eax [esp+arg_0] +
mov edx 43h +
mov dword ptr [eax+54h] 354B5453h +
mov dword ptr [eax+58h] 45473030h +
mov dword ptr [eax+5Ch] 4952454Eh +
mov [eax+60h] dx +
mov dword ptr [eax+8F8h] offset sub_4358D0 +
mov dword ptr [eax+94Ch] offset sub_4358B0 +
mov dword ptr [eax+950h] offset sub_435890 +
retn   +
***
xor eax eax +
retn   +
***
sub esp 1Ch +
mov eax ds:dword_486584 +
mov [esp+1Ch+var_18] offset aSErrorUsbasp_w +
mov [esp+1Ch+var_1C] 0 +
mov [esp+1Ch+var_14] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
add esp 1Ch +
retn   +
***
sub esp 1Ch +
mov eax ds:dword_486584 +
mov [esp+1Ch+var_18] offset aSErrorSpi_cmdU +
mov [esp+1Ch+var_1C] 0 +
mov [esp+1Ch+var_14] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
add esp 1Ch +
retn   +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov eax [esp+2Ch+arg_4] +
mov ebp [esp+2Ch+arg_0] +
mov [esp+2Ch+var_2C] eax +
call sub_406F20  +
mov [esp+2Ch+var_10] 0 +
test eax eax +
mov ebx eax +
jnz loc_435AE8  +
jmp loc_435B37  +
mov eax ds:dword_486584 +
mov [esp+2Ch+var_28] offset aSUsbasp_parsee +
mov [esp+2Ch+var_2C] 2 +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
mov eax [ebp+0A5Ch] +
mov dword ptr [eax+10h] 1 +
mov [esp+2Ch+var_2C] ebx +
call sub_406F40  +
test eax eax +
mov ebx eax +
jz loc_435B37  +
mov [esp+2Ch+var_2C] ebx +
mov edi offset aSection_config +
call sub_406F60  +
mov ecx 0Eh +
mov esi eax +
cmps   +
jz loc_435AB0  +
mov [esp+2Ch+var_20] eax +
mov eax ds:dword_486584 +
mov [esp+2Ch+var_28] offset aSUsbasp_pars_0 +
mov [esp+2Ch+var_2C] 0 +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
mov [esp+2Ch+var_2C] ebx +
mov [esp+2Ch+var_10] 0FFFFFFFFh +
call sub_406F40  +
test eax eax +
mov ebx eax +
jnz loc_435AE8  +
mov eax [esp+2Ch+var_10] +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [esp+arg_0] +
mov eax [eax+0A5Ch] +
mov [esp+arg_0] eax +
jmp free  +
***
push edi  +
push esi  +
push ebx  +
sub esp 15Ch +
mov esi ds:dword_4850D0 +
mov [ebp+var_148] eax +
mov [ebp+var_13C] edx +
mov [ebp+var_14C] ecx +
test esi esi +
mov [ebp+var_134] 0 +
jz loc_435E51  +
lea eax [ebp+var_130] +
mov [esp+168h+var_164] eax +
mov eax ds:dword_4850D4 +
mov [esp+168h+var_168] eax +
call sub_43E850  +
sub esp 8 +
test eax eax +
mov [ebp+var_140] eax +
jle loc_435D58  +
xor esi esi +
mov [ebp+var_144] 1 +
lea edi [ebp+var_12A] +
jmp loc_435BF1  +
add esi 1 +
cmp esi [ebp+var_140] +
jz loc_435D62  +
mov eax [ebp+var_130] +
mov ebx [eax+esi*4] +
mov [esp+168h+var_164] edi +
mov [esp+168h+var_168] ebx +
call sub_440A80  +
movzx eax [ebp+var_122] +
sub esp 8 +
cmp eax [ebp+var_13C] +
jnz loc_435BE2  +
movzx eax [ebp+var_120] +
cmp eax [ebp+arg_0] +
jnz loc_435BE2  +
lea eax [ebp+var_134] +
mov [esp+168h+var_164] eax +
mov [esp+168h+var_168] ebx +
call sub_43EAD0  +
mov ecx [ebp+var_134] +
sub esp 8 +
test ecx ecx +
jz loc_435E70  +
lea eax [ebp+var_118] +
mov [esp+168h+var_160] eax +
movzx eax [ebp+var_11C] +
mov [esp+168h+var_15C] 100h +
mov [esp+168h+var_168] ecx +
mov [esp+168h+var_164] eax +
call sub_441860  +
sub esp 10h +
test eax eax +
js loc_435DA5  +
lea eax [ebp+var_118] +
mov [esp+168h+var_15C] eax +
mov eax ds:dword_486584 +
mov [esp+168h+var_164] offset aSSeenDeviceFro +
mov [esp+168h+var_168] 2 +
mov [esp+168h+var_160] eax +
call sub_401740  +
mov eax [ebp+var_14C] +
test eax eax +
jz loc_435CB1  +
cmp byte ptr [eax] 0 +
jnz loc_435EB2  +
mov [ebp+var_144] 0 +
lea eax [ebp+var_118] +
mov [esp+168h+var_160] eax +
movzx eax [ebp+var_11B] +
mov [esp+168h+var_15C] 100h +
mov [esp+168h+var_164] eax +
mov eax [ebp+var_134] +
mov [esp+168h+var_168] eax +
call sub_441860  +
sub esp 10h +
test eax eax +
js loc_435E10  +
lea eax [ebp+var_118] +
mov [esp+168h+var_15C] eax +
mov eax ds:dword_486584 +
mov [esp+168h+var_164] offset aSSeenProductS +
mov [esp+168h+var_168] 2 +
mov [esp+168h+var_160] eax +
call sub_401740  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_435E23  +
mov eax [ebp+arg_4] +
cmp byte ptr [eax] 0 +
jz loc_435E23  +
mov [esp+168h+var_164] eax +
lea eax [ebp+var_118] +
mov [esp+168h+var_168] eax +
call strcmp  +
test eax eax +
jz loc_435E23  +
mov [ebp+var_144] 1 +
jmp loc_435E31  +
mov [ebp+var_144] 1 +
mov eax [ebp+var_130] +
mov [esp+168h+var_164] 1 +
mov [esp+168h+var_168] eax +
call sub_43E800  +
mov eax [ebp+var_134] +
sub esp 8 +
test eax eax +
jz loc_435D97  +
mov edx [ebp+var_148] +
mov [ebp+var_144] 0 +
mov [edx] eax +
mov eax [ebp+var_144] +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ebx [ebp+var_14C] +
test ebx ebx +
jz loc_435CB1  +
mov edx [ebp+var_14C] +
cmp byte ptr [edx] 0 +
jz loc_435CB1  +
add eax 0Ch +
mov ecx 22h +
cmp eax 0Ch +
ja loc_435DD6  +
mov ecx ds:dword_479CC0[eax*4] +
mov [esp+168h+var_168] ecx +
call strerror  +
mov [esp+168h+var_164] offset aSWarningCannot +
mov [esp+168h+var_168] 0 +
mov [esp+168h+var_15C] eax +
mov eax ds:dword_486584 +
mov [esp+168h+var_160] eax +
call sub_401740  +
mov [ebp+var_144] 3 +
jmp loc_435CBB  +
mov ecx [ebp+arg_4] +
test ecx ecx +
jz loc_435E23  +
mov edx [ebp+arg_4] +
cmp byte ptr [edx] 0 +
jnz loc_435EE0  +
mov edx [ebp+var_144] +
test edx edx +
jz loc_435D62  +
mov eax [ebp+var_134] +
mov [esp+168h+var_168] eax +
call sub_43ED50  +
mov [ebp+var_134] 0 +
sub esp 4 +
jmp loc_435BE2  +
mov [esp+168h+var_168] offset dword_4850D4 +
mov ds:dword_4850D0 1 +
call sub_43F750  +
sub esp 4 +
jmp loc_435BA6  +
add eax 0Ch +
mov cl 22h +
cmp eax 0Ch +
jbe loc_435ED7  +
mov [esp+168h+var_168] ecx +
call strerror  +
mov [esp+168h+var_164] offset aSWarningCann_0 +
mov [esp+168h+var_168] 0 +
mov [esp+168h+var_15C] eax +
mov eax ds:dword_486584 +
mov [esp+168h+var_160] eax +
call sub_401740  +
mov [ebp+var_144] 2 +
jmp loc_435BE2  +
mov [esp+168h+var_164] eax +
lea eax [ebp+var_118] +
mov [esp+168h+var_168] eax +
call strcmp  +
test eax eax +
setnz al  +
movzx eax al +
mov [ebp+var_144] eax +
jmp loc_435CBB  +
mov ecx ds:dword_479CC0[eax*4] +
jmp loc_435E7A  +
add eax 0Ch +
mov ecx 22h +
cmp eax 0Ch +
ja loc_435EF4  +
mov ecx ds:dword_479CC0[eax*4] +
mov [esp+168h+var_168] ecx +
call strerror  +
mov [esp+168h+var_164] offset aSWarningCann_1 +
mov [esp+168h+var_168] 0 +
mov [esp+168h+var_15C] eax +
mov eax ds:dword_486584 +
mov [esp+168h+var_160] eax +
call sub_401740  +
mov [ebp+var_144] 3 +
jmp loc_435E31  +
***
mov edi 5DCh +
push esi  +
push ebx  +
sub esp 2Ch +
mov eax [esp+34h+arg_4] +
mov ebx [esp+34h+arg_0] +
mov [esp+34h+var_30] offset aSUsbasp_openS +
mov [esp+34h+var_34] 3 +
mov [esp+34h+var_28] eax +
mov eax ds:dword_486584 +
mov [esp+34h+var_2C] eax +
call sub_401740  +
mov eax [ebx+488h] +
mov [esp+34h+var_34] eax +
call sub_406F20  +
test eax eax +
mov esi eax +
jz loc_435FB0  +
mov [esp+34h+var_34] eax +
call sub_406F60  +
mov edi [eax] +
mov [esp+34h+var_34] esi +
call sub_406F40  +
test eax eax +
jz loc_435FB0  +
mov eax ds:dword_486584 +
mov [esp+34h+var_28] edi +
mov [esp+34h+var_30] offset aSWarningUsin_1 +
mov [esp+34h+var_34] 0 +
mov [esp+34h+var_2C] eax +
call sub_401740  +
mov esi [ebx+484h] +
mov eax 16C0h +
lea ebp [ebx+78Ch] +
test esi esi +
cmovz esi eax +
lea eax [ebx+68Ch] +
mov edx esi +
mov ecx eax +
mov [esp+34h+var_1C] eax +
mov eax [ebx+0A5Ch] +
mov [esp+34h+var_30] ebp +
mov [esp+34h+var_34] edi +
call sub_435B70  +
test eax eax +
jnz loc_435FF6  +
xor edx edx +
add esp 2Ch +
mov eax edx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx] +
mov [esp+34h+var_34] eax +
call sub_406F20  +
mov [esp+34h+var_34] eax +
call sub_406F60  +
mov edx ds:_stricmp +
mov [esp+34h+var_30] offset aUsbasp +
mov [esp+34h+var_18] edx +
mov [esp+34h+var_34] eax +
call edx  +
test eax eax +
jnz loc_436120  +
mov eax [esp+34h+arg_4] +
mov edx [esp+34h+var_18] +
mov [esp+34h+var_30] offset aNibobee +
mov [esp+34h+var_34] eax +
call edx  +
test eax eax +
jz loc_4360A0  +
mov eax [ebx+0A5Ch] +
mov ecx offset aWww_fischl_de +
mov edx 3EBh +
mov [esp+34h+var_30] offset aUsbasp_0 +
mov [esp+34h+var_34] 0C7B4h +
call sub_435B70  +
test eax eax +
mov [esp+34h+var_18] eax +
jnz loc_436120  +
mov eax ds:dword_486584 +
mov [esp+34h+var_30] offset aSWarningFoundU +
mov [esp+34h+var_34] 0 +
mov [esp+34h+var_2C] eax +
call sub_401740  +
mov edx [esp+34h+var_18] +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
mov eax edx +
pop ebp  +
retn   +
mov eax ds:dword_486584 +
mov [esp+34h+var_30] offset aSWarningUsingC +
mov [esp+34h+var_34] 0 +
mov [esp+34h+var_2C] eax +
call sub_401740  +
mov eax [ebx+0A5Ch] +
mov ecx offset aWww_nicaiSyste +
mov [esp+34h+var_30] offset aNibobee_0 +
mov edx 16C0h +
mov [esp+34h+var_34] 92Fh +
call sub_435B70  +
test eax eax +
jz loc_435FEA  +
mov eax ds:dword_486584 +
mov [esp+34h+var_24] 92Fh +
mov [esp+34h+var_28] 16C0h +
mov [esp+34h+var_30] offset aSErrorCouldN_0 +
mov [esp+34h+var_2C] eax +
mov [esp+34h+var_34] 0 +
call sub_401740  +
mov edx 0FFFFFFFFh +
jmp loc_435FEC  +
mov eax ds:dword_486584 +
mov [esp+34h+var_24] edi +
mov [esp+34h+var_28] esi +
mov [esp+34h+var_30] offset aSErrorCouldN_1 +
mov [esp+34h+var_2C] eax +
mov [esp+34h+var_34] 0 +
call sub_401740  +
cmp byte ptr [ebx+68Ch] 0 +
jnz loc_436175  +
cmp byte ptr [ebx+78Ch] 0 +
jnz loc_436193  +
mov [esp+34h+var_30] offset asc_4793BB +
mov [esp+34h+var_34] 0 +
call sub_401740  +
mov edx 0FFFFFFFFh +
jmp loc_435FEC  +
mov eax [esp+34h+var_1C] +
mov [esp+34h+var_30] offset aVendorS +
mov [esp+34h+var_34] 0 +
mov [esp+34h+var_2C] eax +
call sub_401740  +
jmp loc_43614E  +
mov [esp+34h+var_2C] ebp +
mov [esp+34h+var_30] offset aProductS +
mov [esp+34h+var_34] 0 +
call sub_401740  +
jmp loc_436157  +
***
push edi  +
push esi  +
push ebx  +
sub esp 4Ch +
mov edi [ebp+arg_0] +
cmp ds:dword_486580 3 +
mov [ebp+var_24] eax +
mov ebx [ebp+arg_4] +
mov [ebp+var_1C] edx +
mov [ebp+var_20] ecx +
jle loc_43623D  +
movzx eax byte ptr [edi+3] +
movzx esi byte ptr [edi+1] +
movzx edx byte ptr [edi] +
mov [ebp+var_28] eax +
movzx eax byte ptr [edi+2] +
mov [ebp+var_2C] eax +
movzx eax byte ptr [ebp+var_20] +
lea ecx [eax-1] +
mov eax offset aUnknownUsbaspF +
cmp cl 7Eh +
jbe loc_4362D0  +
mov ecx [ebp+var_28] +
mov [esp+58h+var_4C] eax +
mov eax ds:dword_486584 +
mov [esp+58h+var_44] esi +
mov [esp+58h+var_48] edx +
mov [esp+58h+var_3C] ecx +
mov ecx [ebp+var_2C] +
mov [esp+58h+var_50] eax +
mov [esp+58h+var_54] offset aSUsbasp_transm +
mov [esp+58h+var_58] 4 +
mov [esp+58h+var_40] ecx +
call sub_401740  +
mov ecx [ebp+var_1C] +
test ecx ecx +
jz loc_4362E0  +
mov eax [ebp+var_24] +
mov eax [eax] +
mov eax [eax] +
mov [esp+58h+var_3C] 1388h +
mov [esp+58h+var_44] ebx +
mov esi eax +
movzx eax [ebp+arg_8] +
mov [esp+58h+var_40] eax +
movzx ecx byte ptr [edi+3] +
movzx eax byte ptr [edi+2] +
shl ecx 8 +
or eax ecx +
movzx eax ax +
mov [esp+58h+var_48] eax +
movzx eax byte ptr [edi+1] +
movzx edx byte ptr [edi] +
mov [esp+58h+var_58] esi +
shl eax 8 +
or edx eax +
mov eax [ebp+var_20] +
movzx edx dx +
mov [esp+58h+var_4C] edx +
mov [esp+58h+var_50] eax +
mov eax [ebp+var_1C] +
shl eax 7 +
or eax 40h +
movzx eax al +
mov [esp+58h+var_54] eax +
call sub_441BE0  +
sub esp 20h +
test eax eax +
mov edi eax +
js loc_4363B7  +
cmp ds:dword_486580 3 +
jle loc_4362C3  +
mov eax [ebp+var_1C] +
test eax eax +
jnz loc_436350  +
mov eax edi +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
movzx ecx cl +
mov eax ds:off_479AC0[ecx*4] +
jmp loc_4361FB  +
mov edx dword ptr [ebp+arg_8] +
test edx edx +
jle loc_43623D  +
xor esi esi +
mov [esp+58h+var_50] offset byte_4865A0 +
mov [esp+58h+var_54] offset aS +
mov [esp+58h+var_58] 4 +
call sub_401740  +
mov [ebp+arg_0] edi +
mov edi esi +
mov esi dword ptr [ebp+arg_8] +
movzx eax byte ptr [ebx+edi] +
add edi 1 +
mov [esp+58h+var_54] offset a02x +
mov [esp+58h+var_58] 4 +
mov [esp+58h+var_50] eax +
call sub_401740  +
cmp esi edi +
jg loc_436311  +
mov [esp+58h+var_54] offset asc_4793BB +
mov edi [ebp+arg_0] +
mov [esp+58h+var_58] 4 +
call sub_401740  +
jmp loc_43623D  +
test edi edi +
jle loc_4362C1  +
mov [esp+58h+var_50] offset byte_4865A0 +
xor esi esi +
mov [esp+58h+var_54] offset aS_0 +
mov [esp+58h+var_58] 4 +
call sub_401740  +
movzx eax byte ptr [ebx+esi] +
add esi 1 +
mov [esp+58h+var_54] offset a02x +
mov [esp+58h+var_58] 4 +
mov [esp+58h+var_50] eax +
call sub_401740  +
cmp edi esi +
jg loc_436376  +
mov [esp+58h+var_54] offset asc_4793BB +
mov [esp+58h+var_58] 4 +
call sub_401740  +
lea esp [ebp-0Ch] +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add edi 0Ch +
mov eax 22h +
cmp edi 0Ch +
ja loc_4363CB  +
mov eax ds:dword_479CC0[edi*4] +
mov [esp+58h+var_58] eax +
call strerror  +
mov [esp+58h+var_54] offset aSErrorUsbasp_t +
mov [esp+58h+var_58] 0 +
mov [esp+58h+var_4C] eax +
mov eax ds:dword_486584 +
mov [esp+58h+var_50] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_4362C3  +
***
sub esp 44h +
mov eax ds:dword_486584 +
fld  [esp+44h+arg_4] +
fst  [esp+44h+var_38] +
mov ebx [esp+44h+arg_0] +
mov [esp+44h+var_40] offset aSUsbasp_spi_se +
fstp  [esp+44h+var_24] +
mov [esp+44h+var_3C] eax +
mov [esp+44h+var_44] 3 +
call sub_401740  +
mov eax [ebx+0A5Ch] +
mov [esp+44h+var_8] 0 +
mov [esp+44h+var_C] 0 +
mov dword ptr [eax+4] 0 +
fldz   +
fld  [esp+44h+var_24] +
fucomi st st(1) +
fstp  st(1) +
jp loc_4364D0  +
jnz loc_4364D0  +
fstp  st +
mov eax ds:dword_486584 +
xor esi esi +
mov [esp+44h+var_40] offset aSAutoSetSckPer +
mov [esp+44h+var_44] 1 +
mov [esp+44h+var_3C] eax +
call sub_401740  +
lea edx [esp+44h+var_C] +
mov eax esi +
mov [esp+44h+var_40] edx +
lea edx [esp+44h+var_8] +
mov ecx 0Ah +
mov byte ptr [esp+44h+var_8] al +
lea eax [ebx+0A5Ch] +
mov [esp+44h+var_44] edx +
mov edx 1 +
mov [esp+44h+var_3C] 4 +
call sub_4361B0  +
cmp eax 1 +
jnz loc_4365E0  +
cmp byte ptr [esp+44h+var_C] 0 +
jnz loc_4365E0  +
xor eax eax +
add esp 44h +
pop ebx  +
pop esi  +
retn   +
fld1   +
fdiv st st(1) +
fnstcw  [esp+44h+var_16] +
mov [esp+44h+var_40] offset aSTryToSetSckPe +
mov [esp+44h+var_44] 2 +
movzx eax [esp+44h+var_16] +
mov ah 0Ch +
mov [esp+44h+var_18] ax +
mov eax ds:dword_486584 +
mov [esp+44h+var_3C] eax +
fldcw  [esp+44h+var_18] +
fistp  [esp+44h+var_1C] +
fldcw  [esp+44h+var_16] +
mov esi [esp+44h+var_1C] +
fstp  [esp+44h+var_38] +
mov [esp+44h+var_30] esi +
call sub_401740  +
mov [esp+44h+var_1C] esi +
fild  [esp+44h+var_1C] +
fld  ds:flt_479E00 +
fxch  st(1) +
fucomi st st(1) +
fstp  st(1) +
jnb loc_436573  +
fld  ds:flt_479E04 +
fxch  st(1) +
fucomi st st(1) +
fstp  st(1) +
jnb loc_436607  +
fld1   +
mov edx 1 +
mov eax edx +
shl eax 4 +
fld  ds:dbl_479D48[eax] +
fld  st +
fsub st st(2) +
fxch  st(3) +
fucomi st st(3) +
fstp  st(3) +
jnb loc_4365B0  +
fstp  st +
add edx 1 +
cmp edx 0Ch +
jnz loc_436548  +
fstp  st +
fstp  st +
xor esi esi +
xor eax eax +
jmp loc_43657F  +
fstp  st +
mov esi 0Ch +
mov eax 16E360h +
mov edx [ebx+0A5Ch] +
mov [edx+4] eax +
mov dword ptr [esp+44h+var_38] eax +
mov eax ds:dword_486584 +
mov [esp+44h+var_40] offset aSSetSckFrequen +
mov [esp+44h+var_44] 0 +
mov [esp+44h+var_3C] eax +
call sub_401740  +
jmp loc_43647E  +
fstp  st(1) +
fstp  st(1) +
fnstcw  [esp+44h+var_16] +
movzx eax [esp+44h+var_16] +
mov ah 0Ch +
mov [esp+44h+var_18] ax +
fldcw  [esp+44h+var_18] +
fistp  [esp+44h+var_1C] +
fldcw  [esp+44h+var_16] +
mov eax [esp+44h+var_1C] +
shl edx 4 +
movzx esi ds:byte_479D40[edx] +
jmp loc_43657F  +
mov eax ds:dword_486584 +
mov [esp+44h+var_40] offset aSWarningCann_3 +
mov [esp+44h+var_44] 0 +
mov [esp+44h+var_3C] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_4364C6  +
fstp  st +
mov eax 16E360h +
xor edx edx +
jmp loc_4365D4  +
***
sub esp 24h +
mov eax ds:dword_486584 +
mov [esp+24h+var_20] offset aSUsbasp_progra +
lea ebx [esp+24h+var_8] +
mov [esp+24h+var_24] 3 +
lea esi [esp+24h+var_C] +
mov [esp+24h+var_8] 0 +
mov [esp+24h+var_1C] eax +
mov [esp+24h+var_C] 0 +
call sub_401740  +
mov eax [esp+24h+arg_0] +
mov edx 1 +
mov [esp+24h+var_1C] 4 +
mov ecx 5 +
mov [esp+24h+var_20] esi +
mov [esp+24h+var_24] ebx +
add eax 0A5Ch +
call sub_4361B0  +
movzx edx byte ptr [esp+24h+var_C] +
cmp eax 1 +
jnz loc_436697  +
test dl dl +
jnz loc_436697  +
xor eax eax +
add esp 24h +
pop ebx  +
pop esi  +
retn   +
mov eax ds:dword_486584 +
mov [esp+24h+var_18] edx +
mov [esp+24h+var_20] offset aSErrorProgramE +
mov [esp+24h+var_24] 0 +
mov [esp+24h+var_1C] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_436691  +
***
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [esp+3Ch+arg_14] +
mov esi [esp+3Ch+arg_8] +
mov ebx [esp+3Ch+arg_10] +
mov [esp+3Ch+var_38] offset aSUsbasp_tpi_pa +
mov [esp+3Ch+var_28] eax +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_30] esi +
mov [esp+3Ch+var_2C] ebx +
mov [esp+3Ch+var_3C] 3 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov edi [esi+78h] +
mov eax [esp+3Ch+arg_14] +
add edi ebx +
add bx [esi+50h] +
test eax eax +
jz loc_4367B0  +
mov eax [esp+3Ch+arg_0] +
xor esi esi +
add eax 0A5Ch +
mov [esp+3Ch+var_20] eax +
xor eax eax +
jmp loc_436732  +
add esi eax +
add ebx eax +
add edi eax +
mov eax esi +
cmp [esp+3Ch+arg_14] esi +
jbe loc_4367B0  +
mov ebp [esp+3Ch+arg_14] +
mov ecx 0Fh +
mov edx 1 +
mov [esp+3Ch+var_38] edi +
mov [esp+3Ch+var_10] bl +
mov [esp+3Ch+var_E] 0 +
sub ebp eax +
mov eax 20h +
cmp ebp 20h +
cmovg ebp eax +
mov eax ebx +
shr ax 8 +
mov [esp+2Dh] al +
lea eax [esp+3Ch+var_10] +
mov [esp+3Ch+var_3C] eax +
mov eax [esp+3Ch+var_20] +
mov [esp+3Ch+var_34] ebp +
mov [esp+3Ch+var_D] 0 +
call sub_4361B0  +
cmp eax ebp +
jz loc_436724  +
mov [esp+3Ch+var_30] eax +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_38] offset aSErrorWrongRea +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
add esp 3Ch +
mov eax 0FFFFFFFDh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+3Ch+arg_14] +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
sub esp 2Ch +
add eax 0A5Ch +
lea ecx [esp+2Ch+var_10] +
mov [esp+2Ch+var_10] 0 +
mov [esp+2Ch+var_28] ecx +
mov byte ptr [esp+2Ch+var_10] dl +
mov edx 1 +
mov [esp+2Ch+var_2C] ecx +
mov ecx 0Eh +
mov [esp+2Ch+var_24] 4 +
call sub_4361B0  +
add esp 2Ch +
retn   +
***
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [esp+3Ch+arg_14] +
mov edi [esp+3Ch+arg_8] +
mov esi [esp+3Ch+arg_10] +
mov [esp+3Ch+var_38] offset aSUsbasp_tpi__0 +
mov ebx [esp+3Ch+arg_0] +
mov [esp+3Ch+var_28] eax +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_30] edi +
mov [esp+3Ch+var_2C] esi +
mov [esp+3Ch+var_3C] 3 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov ebp [edi+78h] +
mov edx 68h +
mov eax ebx +
add ebp esi +
add si [edi+50h] +
call sub_4367C0  +
mov eax ebx +
mov edx esi +
or edx 1 +
movzx edx dl +
call sub_4367C0  +
mov edx 69h +
mov eax ebx +
call sub_4367C0  +
mov eax esi +
movzx edx ah +
mov eax ebx +
call sub_4367C0  +
mov eax [esp+3Ch+arg_14] +
test eax eax +
jz loc_436922  +
lea eax [ebx+0A5Ch] +
xor edi edi +
mov [esp+3Ch+var_20] eax +
xor eax eax +
jmp loc_4368A6  +
add edi ebx +
add esi ebx +
add ebp ebx +
mov eax edi +
cmp [esp+3Ch+arg_14] edi +
jbe loc_436922  +
mov ebx [esp+3Ch+arg_14] +
mov ecx 10h +
mov [esp+3Ch+var_38] ebp +
mov [esp+3Ch+var_E] 0 +
mov [esp+3Ch+var_D] 0 +
sub ebx eax +
mov eax 20h +
cmp ebx 20h +
cmovg ebx eax +
mov eax esi +
mov [esp+3Ch+var_10] al +
mov eax esi +
xor edx edx +
shr ax 8 +
mov [esp+2Dh] al +
lea eax [esp+3Ch+var_10] +
mov [esp+3Ch+var_3C] eax +
mov eax [esp+3Ch+var_20] +
mov [esp+3Ch+var_34] ebx +
call sub_4361B0  +
cmp ebx eax +
jz loc_436898  +
mov [esp+3Ch+var_30] eax +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_38] offset aSErrorWrongCou +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
add esp 3Ch +
mov eax 0FFFFFFFDh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+3Ch+arg_14] +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
sub esp 34h +
mov eax ds:dword_486584 +
mov esi [esp+34h+arg_8] +
mov ebx [esp+34h+arg_C] +
mov [esp+34h+var_30] offset aSUsbasp_tpi_re +
mov [esp+34h+var_2C] eax +
mov [esp+34h+var_28] esi +
mov [esp+34h+var_24] ebx +
mov [esp+34h+var_34] 3 +
call sub_401740  +
mov edx [esp+34h+arg_10] +
mov ecx 0Fh +
mov eax [esp+34h+arg_0] +
add bx [esi+50h] +
mov [esp+34h+var_2C] 1 +
mov [esp+34h+var_30] edx +
lea edx [esp+34h+var_8] +
mov byte ptr [esp+34h+var_8] bl +
add eax 0A5Ch +
shr bx 8 +
mov [esp+34h+var_34] edx +
mov edx 1 +
mov byte ptr [esp+34h+var_8+1] bl +
mov byte ptr [esp+34h+var_8+2] 0 +
mov byte ptr [esp+34h+var_8+3] 0 +
call sub_4361B0  +
xor edx edx +
cmp eax 1 +
jnz loc_4369C0  +
add esp 34h +
mov eax edx +
pop ebx  +
pop esi  +
retn   +
mov [esp+34h+var_28] eax +
mov eax ds:dword_486584 +
mov [esp+34h+var_30] offset aSErrorWrongRea +
mov [esp+34h+var_34] 0 +
mov [esp+34h+var_2C] eax +
call sub_401740  +
mov edx 0FFFFFFFDh +
jmp loc_4369B2  +
***
mov edi offset aFlash_15 +
push esi  +
push ebx  +
sub esp 4Ch +
mov ebp [esp+54h+arg_8] +
mov ebx [esp+54h+arg_10] +
mov eax [ebp+78h] +
mov esi ebp +
mov [esp+54h+var_44] ebx +
mov [esp+54h+var_48] ebp +
mov [esp+54h+var_50] offset aSUsbasp_prog_0 +
add eax ebx +
mov [esp+54h+var_30] eax +
mov eax [esp+54h+arg_14] +
mov [esp+54h+var_54] 3 +
mov [esp+54h+var_40] eax +
mov eax ds:dword_486584 +
mov [esp+54h+var_4C] eax +
call sub_401740  +
mov ecx 6 +
cmps   +
jz loc_436A63  +
mov edi offset aEeprom_12 +
mov ecx 7 +
mov esi ebp +
cmps   +
jnz loc_436B9C  +
mov [esp+54h+var_28] 7 +
jmp loc_436A6B  +
mov [esp+54h+var_28] 4 +
mov eax [esp+54h+arg_0] +
mov edx [esp+54h+arg_14] +
mov eax [eax+0A5Ch] +
mov eax [eax+4] +
sub eax 1 +
cmp eax 270Fh +
sbb eax eax +
and al 4Ch +
add eax 0C8h +
test edx edx +
jz loc_436BA3  +
mov edi [esp+54h+arg_0] +
lea esi [edi+0A5Ch] +
mov [esp+54h+var_34] esi +
mov esi [esp+54h+arg_14] +
lea edi [esp+54h+var_1C] +
mov ebp esi +
lea esi [esp+54h+var_18] +
jmp loc_436AC1  +
add [esp+54h+var_30] eax +
add ebx eax +
test ebp ebp +
jz loc_436B90  +
cmp eax ebp +
mov edx ebx +
cmovg eax ebp +
mov ecx 9 +
mov [esp+54h+var_38] eax +
sub ebp eax +
mov eax ebx +
shr eax 10h +
mov byte ptr [esp+54h+var_1C+2] al +
mov eax ebx +
shr eax 18h +
mov byte ptr [esp+54h+var_1C+3] al +
mov eax [esp+54h+var_34] +
shr edx 8 +
mov dword ptr [esi] 0 +
mov [esp+54h+var_2C] edx +
mov byte ptr [esp+54h+var_1C+1] dl +
mov edx 1 +
mov [esp+54h+var_4C] 4 +
mov [esp+54h+var_50] esi +
mov [esp+54h+var_54] edi +
mov byte ptr [esp+54h+var_1C] bl +
call sub_4361B0  +
movzx edx byte ptr [esp+54h+var_2C] +
mov ecx [esp+54h+var_38] +
mov eax [esp+54h+var_34] +
mov [esp+54h+var_54] edi +
mov byte ptr [esp+54h+var_1C+1] dl +
mov edx [esp+54h+var_30] +
mov [esp+54h+var_4C] ecx +
mov ecx [esp+54h+var_28] +
mov byte ptr [esp+54h+var_1C] bl +
mov byte ptr [esp+54h+var_1C+2] 0 +
mov [esp+54h+var_50] edx +
mov edx 1 +
mov byte ptr [esp+54h+var_1C+3] 0 +
call sub_4361B0  +
cmp eax [esp+54h+var_38] +
jz loc_436AB3  +
mov [esp+54h+var_48] eax +
mov eax ds:dword_486584 +
mov [esp+54h+var_50] offset aSErrorWrongRea +
mov [esp+54h+var_54] 0 +
mov [esp+54h+var_4C] eax +
call sub_401740  +
mov eax 0FFFFFFFDh +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+54h+arg_14] +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax 0FFFFFFFEh +
jmp loc_436B83  +
xor eax eax +
jmp loc_436B83  +
***
mov edi offset aFlash_15 +
push esi  +
push ebx  +
sub esp 5Ch +
mov eax [esp+64h+arg_8] +
mov ebx [esp+64h+arg_10] +
mov ebp [eax+78h] +
mov eax [esp+64h+arg_14] +
mov [esp+64h+var_54] ebx +
mov [esp+64h+var_60] offset aSUsbasp_prog_1 +
mov [esp+64h+var_64] 3 +
add ebp ebx +
mov [esp+64h+var_50] eax +
mov eax [esp+64h+arg_8] +
mov [esp+64h+var_58] eax +
mov eax ds:dword_486584 +
mov [esp+64h+var_5C] eax +
call sub_401740  +
mov esi [esp+64h+arg_8] +
mov ecx 6 +
cmps   +
jz loc_436C30  +
mov esi [esp+64h+arg_8] +
mov edi offset aEeprom_12 +
mov ecx 7 +
cmps   +
jnz loc_436D96  +
mov [esp+64h+var_3C] 8 +
jmp loc_436C38  +
mov [esp+64h+var_3C] 6 +
mov eax [esp+64h+arg_0] +
mov edx [esp+64h+arg_14] +
mov eax [eax+0A5Ch] +
mov eax [eax+4] +
sub eax 1 +
cmp eax 270Fh +
sbb eax eax +
and al 4Ch +
add eax 0C8h +
test edx edx +
jz loc_436D9D  +
mov edi [esp+64h+arg_0] +
mov esi ebp +
mov edx [esp+64h+arg_C] +
movzx ecx byte ptr [esp+64h+arg_C] +
mov [esp+64h+var_36] 1 +
add edi 0A5Ch +
mov [esp+64h+var_44] edi +
mov edi [esp+64h+arg_14] +
and edx 0F00h +
shr edx 4 +
mov [esp+64h+var_35] cl +
mov [esp+64h+var_34] edx +
mov ebp edi +
mov edi esi +
jmp loc_436CB2  +
add edi eax +
add ebx eax +
test ebp ebp +
jz loc_436D87  +
mov [esp+64h+var_36] 0 +
cmp eax ebp +
mov edx ebx +
cmovg eax ebp +
mov ecx ebx +
mov esi eax +
sub ebp eax +
mov eax ebx +
shr eax 8 +
mov [esp+64h+var_40] eax +
shr edx 10h +
mov [esp+49h] al +
mov eax [esp+64h+var_44] +
shr ecx 18h +
mov [esp+64h+var_1A] dl +
lea edx [esp+64h+var_18] +
mov [esp+64h+var_19] cl +
lea ecx [esp+48h] +
mov [esp+64h+var_60] edx +
mov edx 1 +
mov [esp+64h+var_64] ecx +
mov ecx 9 +
mov [esp+64h+var_5C] 4 +
mov [esp+64h+var_18] 0 +
mov [esp+64h+var_1C] bl +
call sub_4361B0  +
movzx ecx byte ptr [esp+64h+var_40] +
movzx eax [esp+64h+var_36] +
add al byte ptr [esp+64h+var_34] +
movzx edx [esp+64h+var_35] +
mov [esp+49h] cl +
mov ecx [esp+64h+var_3C] +
mov [esp+64h+var_19] al +
mov eax [esp+64h+var_44] +
mov [esp+64h+var_5C] esi +
mov [esp+64h+var_1A] dl +
lea edx [esp+64h+var_1C] +
mov [esp+64h+var_64] edx +
xor edx edx +
mov [esp+64h+var_60] edi +
mov [esp+64h+var_1C] bl +
call sub_4361B0  +
cmp eax esi +
jz loc_436CA1  +
mov [esp+64h+var_58] eax +
mov eax ds:dword_486584 +
mov [esp+64h+var_60] offset aSErrorWrongCou +
mov [esp+64h+var_64] 0 +
mov [esp+64h+var_5C] eax +
call sub_401740  +
mov eax 0FFFFFFFDh +
add esp 5Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+64h+arg_14] +
add esp 5Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax 0FFFFFFFEh +
jmp loc_436D7F  +
xor eax eax +
jmp loc_436D7F  +
***
jmp sub_436DB0  +
***
push ebx  +
sub esp 24h +
mov eax ds:dword_486584 +
mov ebx [ebp+arg_0] +
mov [esp+28h+var_24] offset aSUsbasp_close +
mov [esp+28h+var_28] 3 +
mov [esp+28h+var_20] eax +
call sub_401740  +
mov eax [ebx+0A5Ch] +
mov edx [eax] +
test edx edx +
jz loc_436E2B  +
mov eax [eax+0Ch] +
lea edx [ebp+var_C] +
mov [ebp+var_C] 0 +
mov [esp+28h+var_20] 4 +
mov [esp+28h+var_24] edx +
test eax eax +
mov [esp+28h+var_28] edx +
lea eax [ebx+0A5Ch] +
jnz loc_436E40  +
mov ecx 2 +
mov edx 1 +
call sub_4361B0  +
mov eax [ebx+0A5Ch] +
mov eax [eax] +
mov [esp+28h+var_28] eax +
call sub_43ED50  +
sub esp 4 +
mov eax ds:dword_4850D4 +
mov [esp+28h+var_28] eax +
call sub_43FB10  +
mov ebx [ebp+var_4] +
sub esp 4 +
leave   +
retn   +
mov ecx 0Ch +
mov edx 1 +
call sub_4361B0  +
jmp loc_436E18  +
***
mov eax ds:dword_486584 +
mov dword ptr [esp+4] offset aSUsbasp_spi__0 +
mov dword ptr [esp] 4 +
mov [esp+8] eax +
call sub_401740  +
movzx eax byte ptr [esi+3] +
mov [esp+14h] eax +
movzx eax byte ptr [esi+2] +
mov [esp+10h] eax +
movzx eax byte ptr [esi+1] +
mov [esp+0Ch] eax +
movzx eax byte ptr [esi] +
mov dword ptr [esp+4] offset a0x02x0x02x0x_0 +
mov dword ptr [esp] 3 +
mov [esp+8] eax +
call sub_401740  +
add esp 24h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
mov eax ds:dword_486584 +
mov dword ptr [esp+4] offset aSErrorWrongRes +
mov dword ptr [esp] 0 +
mov [esp+8] eax +
call sub_401740  +
add esp 24h +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
retn   +
***
push esi  +
push ebx  +
sub esp 3Ch +
mov eax ds:dword_486584 +
mov ebx [esp+3Ch+arg_0] +
lea esi [esp+3Ch+var_14] +
lea edi [esp+3Ch+var_10] +
mov ebp [ebx+0A5Ch] +
mov dword ptr [esp+3Ch+var_38+4] eax +
mov dword ptr [esp+3Ch+var_38] offset aSUsbasp_initia +
mov [esp+3Ch+var_3C] 3 +
call sub_401740  +
lea eax [ebx+0A5Ch] +
mov ecx 7Fh +
mov dword ptr [esp+3Ch+var_38+4] 4 +
mov edx 1 +
mov dword ptr [esp+3Ch+var_38] edi +
mov [esp+3Ch+var_3C] esi +
mov [esp+3Ch+var_14] 0 +
mov [esp+3Ch+var_28] eax +
call sub_4361B0  +
cmp eax 4 +
jz loc_4370C0  +
mov dword ptr [ebp+8] 0 +
mov eax [ebx+930h] +
fld  qword ptr [ebx+890h] +
mov dword ptr [ebp+0Ch] 0 +
fstp  [esp+3Ch+var_38] +
mov [esp+3Ch+var_3C] ebx +
call eax  +
mov eax [esp+3Ch+var_28] +
mov ecx 1 +
mov dword ptr [esp+3Ch+var_38+4] 4 +
mov edx 1 +
mov dword ptr [esp+3Ch+var_38] edi +
mov [esp+3Ch+var_3C] esi +
call sub_4361B0  +
mov dword ptr [ebx+8E0h] offset sub_436620 +
mov dword ptr [ebx+8E4h] offset sub_437540 +
mov dword ptr [ebx+8ECh] offset loc_436E60 +
mov dword ptr [ebx+914h] offset sub_403EA0 +
mov dword ptr [ebx+910h] offset sub_4042F0 +
mov dword ptr [ebx+900h] offset sub_436BB0 +
mov dword ptr [ebx+904h] offset sub_4369F0 +
mov dword ptr [ebx+930h] offset sub_436400 +
mov [esp+3Ch+var_3C] 186A0h +
call sub_459150  +
mov ecx [esp+3Ch+arg_4] +
mov eax [ebx+8E0h] +
mov [esp+3Ch+var_3C] ebx +
mov dword ptr [esp+3Ch+var_38] ecx +
call eax  +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
movzx eax byte ptr [esp+3Ch+var_10+1] +
movzx edx byte ptr [esp+3Ch+var_10+2] +
shl eax 8 +
shl edx 10h +
or eax edx +
movzx edx byte ptr [esp+3Ch+var_10] +
or eax edx +
movzx edx byte ptr [esp+3Ch+var_10+3] +
shl edx 18h +
or eax edx +
test al 1 +
mov [ebp+8] eax +
jz loc_437006  +
mov eax [esp+3Ch+arg_4] +
test byte ptr [eax+85h] 8 +
jz loc_437006  +
fld  ds:flt_479E00 +
mov dword ptr [ebp+0Ch] 1 +
fmul  qword ptr [ebx+890h] +
fnstcw  [esp+3Ch+var_1E] +
movzx eax [esp+3Ch+var_1E] +
mov ah 0Ch +
mov [esp+3Ch+var_20] ax +
fldcw  [esp+3Ch+var_20] +
fistp  [esp+3Ch+var_24] +
fldcw  [esp+3Ch+var_1E] +
mov edx [esp+3Ch+var_24] +
test edx edx +
jle loc_4371D0  +
cmp edx 7FFh +
mov eax 7FFh +
cmovle eax edx +
mov edx eax +
shr eax 8 +
mov byte ptr [esp+3Ch+var_14+1] al +
mov eax [esp+3Ch+var_28] +
mov ecx 0Bh +
mov byte ptr [esp+3Ch+var_14] dl +
mov edx 1 +
mov dword ptr [esp+3Ch+var_38+4] 4 +
mov dword ptr [esp+3Ch+var_38] edi +
mov [esp+3Ch+var_3C] esi +
call sub_4361B0  +
mov dword ptr [ebx+8E0h] offset sub_4373B0 +
mov dword ptr [ebx+8E4h] offset sub_437250 +
mov dword ptr [ebx+8ECh] offset sub_435A50 +
mov dword ptr [ebx+914h] offset sub_436930 +
mov dword ptr [ebx+910h] offset sub_435A20 +
mov dword ptr [ebx+900h] offset sub_436800 +
mov dword ptr [ebx+904h] offset sub_4366C0 +
mov dword ptr [ebx+930h] offset loc_435A10 +
jmp loc_437094  +
xor eax eax +
mov edx 1 +
jmp loc_43714D  +
***
sub esp 2Ch +
add eax 0A5Ch +
lea edx [esp+2Ch+var_10] +
mov ecx 0Dh +
mov [esp+2Ch+var_28] edx +
mov [esp+2Ch+var_2C] edx +
mov edx 1 +
mov [esp+2Ch+var_24] 4 +
mov [esp+2Ch+var_10] 0 +
call sub_4361B0  +
cmp eax 1 +
jnz loc_437220  +
movzx eax byte ptr [esp+2Ch+var_10] +
add esp 2Ch +
retn   +
mov eax ds:dword_486584 +
mov [esp+2Ch+var_28] offset aSErrorWrongRes +
mov [esp+2Ch+var_2C] 0 +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_43721C  +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov ebx [esp+1Ch+arg_0] +
mov esi [esp+1Ch+arg_4] +
mov eax [ebx+0A5Ch] +
cmp dword ptr [eax+10h] 1 +
mov eax ds:dword_486584 +
mov [esp+1Ch+var_14] eax +
jz loc_437380  +
mov [esp+1Ch+var_18] offset aSUsbasp_tpi_ch +
mov edi 40h +
mov ebp 1 +
mov [esp+1Ch+var_1C] 3 +
call sub_401740  +
mov [esp+1Ch+var_10] 10h +
mov edx 68h +
mov eax ebx +
call sub_4367C0  +
mov edx ebp +
mov eax ebx +
call sub_4367C0  +
mov edx 69h +
mov eax ebx +
call sub_4367C0  +
mov edx edi +
mov eax ebx +
call sub_4367C0  +
mov edx 0F3h +
mov eax ebx +
call sub_4367C0  +
mov edx [esp+1Ch+var_10] +
mov eax ebx +
mov edi 32h +
call sub_4367C0  +
mov edx 64h +
mov eax ebx +
call sub_4367C0  +
xor edx edx +
mov eax ebx +
call sub_4367C0  +
mov eax ds:dword_486584 +
mov [esp+1Ch+var_18] offset aSUsbasp_tpi_nv +
mov [esp+1Ch+var_1C] 3 +
mov [esp+1Ch+var_14] eax +
call sub_401740  +
mov edx 72h +
mov eax ebx +
call sub_4367C0  +
mov eax ebx +
call sub_4371E0  +
test al 80h +
jz loc_437348  +
sub edi 1 +
jnz loc_437316  +
mov [esp+1Ch+var_18] offset aFailure +
mov [esp+1Ch+var_1C] 3 +
call sub_401740  +
jmp loc_43735C  +
mov [esp+1Ch+var_18] offset aReady +
mov [esp+1Ch+var_1C] 3 +
call sub_401740  +
mov eax [esi+70h] +
mov [esp+1Ch+var_1C] eax +
call sub_459150  +
mov eax [ebx+8C8h] +
mov [esp+1Ch+var_18] esi +
mov [esp+1Ch+var_1C] ebx +
call eax  +
add esp 1Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+1Ch+var_18] offset aSUsbasp_tpi__1 +
mov edi 3Fh +
mov ebp 41h +
mov [esp+1Ch+var_1C] 3 +
call sub_401740  +
mov [esp+1Ch+var_10] 14h +
jmp loc_43729E  +
***
push ebx  +
sub esp 14h +
mov eax ds:dword_486584 +
mov ebx [esp+18h+arg_0] +
mov [esp+18h+var_14] offset aSUsbasp_tpi_pr +
mov [esp+18h+var_18] 3 +
mov [esp+18h+var_10] eax +
call sub_401740  +
mov edx 0C2h +
mov eax ebx +
call sub_4367C0  +
mov edx 6 +
mov eax ebx +
call sub_4367C0  +
mov edx 0E0h +
mov eax ebx +
call sub_4367C0  +
mov edx 0FFh +
mov eax ebx +
call sub_4367C0  +
mov edx 88h +
mov eax ebx +
call sub_4367C0  +
mov edx 0D8h +
mov eax ebx +
call sub_4367C0  +
mov edx 0CDh +
mov eax ebx +
call sub_4367C0  +
mov edx 45h +
mov eax ebx +
call sub_4367C0  +
mov edx 0ABh +
mov eax ebx +
call sub_4367C0  +
mov edx 89h +
mov eax ebx +
call sub_4367C0  +
mov edx 12h +
mov eax ebx +
call sub_4367C0  +
jmp loc_437469  +
sub esi 1 +
jz loc_4374A0  +
mov edx 8Fh +
mov eax ebx +
call sub_4367C0  +
mov eax ebx +
call sub_4371E0  +
add eax 0FFFFFF80h +
jnz loc_437464  +
mov edx 80h +
mov eax ebx +
call sub_4367C0  +
mov eax ebx +
call sub_4371E0  +
test al 2 +
jz loc_437464  +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
mov eax ds:dword_486584 +
mov [esp+18h+var_14] offset aSErrorProgra_1 +
mov [esp+18h+var_18] 0 +
mov [esp+18h+var_10] eax +
call sub_401740  +
add esp 14h +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
retn   +
***
sub esp 1Ch +
mov [esp+1Ch+var_1C] 14h +
call malloc  +
mov edx [esp+1Ch+arg_0] +
test eax eax +
mov [edx+0A5Ch] eax +
jz loc_437513  +
mov dword ptr [eax] 0 +
mov dword ptr [eax+4] 0 +
mov dword ptr [eax+8] 0 +
mov dword ptr [eax+0Ch] 0 +
mov dword ptr [eax+10h] 0 +
add esp 1Ch +
retn   +
mov eax ds:dword_486584 +
mov [esp+1Ch+var_18] offset aSUsbasp_setupO +
mov [esp+1Ch+var_1C] 0 +
mov [esp+1Ch+var_14] eax +
call sub_401740  +
mov [esp+1Ch+var_1C] 1 +
call exit  +
***
push ebx  +
sub esp 20h +
mov eax ds:dword_486584 +
mov esi [esp+20h+arg_4] +
mov [esp+20h+var_1C] offset aSUsbasp_chip_e +
mov ebx [esp+20h+arg_0] +
mov [esp+20h+var_20] 3 +
mov [esp+20h+var_18] eax +
call sub_401740  +
mov eax [esi+174h] +
test eax eax +
jz loc_4375C7  +
lea edi [esp+20h+var_8] +
mov [esp+20h+var_1C] edi +
mov [esp+20h+var_20] eax +
mov [esp+20h+var_8] 0 +
call sub_4075B0  +
mov eax [ebx+8ECh] +
lea edx [esp+20h+var_4] +
mov [esp+20h+var_18] edx +
mov [esp+20h+var_1C] edi +
mov [esp+20h+var_20] ebx +
call eax  +
mov eax [esi+70h] +
mov [esp+20h+var_20] eax +
call sub_459150  +
mov eax [ebx+8C8h] +
mov [esp+20h+var_1C] esi +
mov [esp+20h+var_20] ebx +
call eax  +
xor eax eax +
add esp 20h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov [esp+20h+var_18] esi +
mov [esp+20h+var_1C] offset aChipEraseIns_2 +
mov [esp+20h+var_20] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_4375C0  +
***
mov eax [esp+arg_0] +
mov edx 7073h +
mov dword ptr [eax+54h] 61627375h +
mov [eax+58h] dx +
mov byte ptr [eax+5Ah] 0 +
mov dword ptr [eax+8C8h] offset sub_436F90 +
mov dword ptr [eax+8CCh] offset dword_435A00 +
mov dword ptr [eax+8D0h] offset dword_4359F0 +
mov dword ptr [eax+8D4h] offset dword_4359E0 +
mov dword ptr [eax+8E0h] offset sub_436620 +
mov dword ptr [eax+8E4h] offset sub_437540 +
mov dword ptr [eax+8ECh] offset loc_436E60 +
mov dword ptr [eax+8F8h] offset sub_435F30 +
mov dword ptr [eax+8FCh] offset sub_436DB0 +
mov dword ptr [eax+914h] offset sub_403EA0 +
mov dword ptr [eax+910h] offset sub_4042F0 +
mov dword ptr [eax+900h] offset sub_436BB0 +
mov dword ptr [eax+904h] offset sub_4369F0 +
mov dword ptr [eax+94Ch] offset sub_4374D0 +
mov dword ptr [eax+950h] offset sub_435B50 +
mov dword ptr [eax+930h] offset sub_436400 +
mov dword ptr [eax+948h] offset sub_435A80 +
retn   +
***
mov ecx eax +
mov edx eax +
shl ecx 7 +
shr dl 7 +
or edx ecx +
mov ecx eax +
and ecx 2 +
movzx ecx cl +
shl ecx 5 +
or edx ecx +
mov ecx eax +
and ecx 4 +
movzx ecx cl +
shl ecx 3 +
or edx ecx +
mov ecx eax +
and ecx 8 +
movzx ecx cl +
add ecx ecx +
or edx ecx +
mov ecx eax +
and ecx 10h +
movzx ecx cl +
sar ecx 1 +
or edx ecx +
mov ecx eax +
and ecx 20h +
and eax 40h +
movzx ecx cl +
movzx eax al +
sar ecx 3 +
sar eax 5 +
or edx ecx +
or edx eax +
mov eax edx +
retn   +
***
push esi  +
mov esi eax +
push ebx  +
mov ebx eax +
movzx eax al +
call sub_4376C0  +
mov ecx 8 +
xor edx edx +
movzx edi al +
mov eax esi +
shl edi 3 +
nop   +
mov esi edx +
xor esi 1 +
test al 1 +
cmovnz edx esi +
shr al 1 +
sub ecx 1 +
jnz loc_437740  +
movzx edx dl +
or edi 0F003h +
lea ebp ds:0[edx*4] +
mov ecx 8 +
or ebp edi +
xor edx edx +
shl ebp 8 +
lea esi [esi+0] +
mov esi edx +
xor esi 1 +
test bl 1 +
cmovnz edx esi +
shr bl 1 +
sub ecx 1 +
jnz loc_437770  +
movzx edx dl +
lea eax ds:0[edx*4] +
or eax edi +
sar eax 8 +
pop ebx  +
or eax ebp +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [esp+4] +
mov eax [eax+0A5Ch] +
mov [esp+4] eax +
jmp free  +
***
mov ebx [esp+18h+arg_0] +
mov eax [ebx+0A5Ch] +
mov eax [eax] +
test eax eax +
jz loc_437808  +
mov [esp+18h+var_18] eax +
call usb_close  +
mov eax [ebx+0A5Ch] +
mov dword ptr [eax] 0 +
add esp 18h +
pop ebx  +
retn   +
***
push edi  +
mov ecx 4 +
push esi  +
mov edi eax +
push ebx  +
sub esp 3Ch +
mov esi [esp+44h+arg_4] +
cmps   +
jz loc_437865  +
mov esi [esp+44h+arg_4] +
mov ecx 3 +
mov edi eax +
cmps   +
jnz loc_437848  +
mov eax [esp+44h+arg_4] +
cmp byte ptr [eax+3] 3Ah +
jz loc_437A50  +
mov eax [esp+44h+arg_4] +
mov [esp+44h+var_24] 0 +
mov [esp+44h+var_1C] 0 +
test eax eax +
setnz [esp+44h+var_15]  +
jmp loc_437882  +
mov [esp+44h+var_15] 0 +
mov [esp+44h+var_24] 0 +
mov [esp+44h+var_1C] 0 +
mov [esp+44h+arg_4] 0 +
call usb_init  +
mov ebp 0C9Fh +
call usb_find_busses  +
call usb_find_devices  +
mov eax [esp+44h+arg_0] +
mov eax [eax+0A5Ch] +
mov dword ptr [eax] 0 +
mov eax [esp+44h+arg_0] +
mov esi [eax+484h] +
mov eax 1781h +
test esi esi +
cmovz esi eax +
mov eax [esp+44h+arg_0] +
mov eax [eax+488h] +
mov [esp+44h+var_44] eax +
call sub_406F20  +
test eax eax +
mov ebx eax +
jz loc_437909  +
mov [esp+44h+var_44] eax +
call sub_406F60  +
mov ebp [eax] +
mov [esp+44h+var_44] ebx +
call sub_406F40  +
test eax eax +
jz loc_437909  +
mov eax ds:dword_486584 +
mov [esp+44h+var_38] ebp +
mov [esp+44h+var_40] offset aSWarningUsin_2 +
mov [esp+44h+var_44] 0 +
mov [esp+44h+var_3C] eax +
call sub_401740  +
call usb_get_busses  +
test eax eax +
mov edi eax +
jz loc_437A2A  +
mov ebx [edi+208h] +
lea eax [edi+8] +
mov [esp+44h+var_28] eax +
test ebx ebx +
jnz loc_43793A  +
jmp loc_437A20  +
mov ebx [ebx] +
test ebx ebx +
jz loc_437A20  +
movzx eax word ptr [ebx+214h] +
cmp eax esi +
jnz loc_437930  +
movzx eax word ptr [ebx+216h] +
cmp eax ebp +
jnz loc_437930  +
lea eax [ebx+8] +
mov [esp+44h+var_20] eax +
mov [esp+44h+var_34] eax +
mov eax [esp+44h+var_28] +
mov [esp+44h+var_40] offset aSUsbdev_open_3 +
mov [esp+44h+var_44] 1 +
mov [esp+44h+var_38] eax +
mov eax ds:dword_486584 +
mov [esp+44h+var_3C] eax +
call sub_401740  +
mov eax [esp+44h+arg_4] +
test eax eax +
jz loc_4379C4  +
mov ecx [esp+44h+var_24] +
test ecx ecx +
jz loc_437930  +
mov ecx [esp+44h+var_1C] +
mov eax [esp+44h+var_28] +
mov [esp+44h+var_40] ecx +
mov [esp+44h+var_44] eax +
call strcmp  +
test eax eax +
jnz loc_437930  +
mov eax [esp+44h+var_24] +
mov [esp+44h+var_40] eax +
mov eax [esp+44h+var_20] +
mov [esp+44h+var_44] eax +
call strcmp  +
test eax eax +
jnz loc_437930  +
mov eax [esp+44h+arg_0] +
mov edx [eax+0A5Ch] +
mov [esp+44h+var_44] ebx +
mov [esp+44h+var_20] edx +
call usb_open  +
mov edx [esp+44h+var_20] +
mov [edx] eax +
mov eax [esp+44h+arg_0] +
mov eax [eax+0A5Ch] +
mov edx [eax] +
test edx edx +
jnz loc_437930  +
call usb_strerror  +
mov [esp+44h+var_40] offset aSWarningCann_4 +
mov [esp+44h+var_44] 0 +
mov [esp+44h+var_38] eax +
mov eax ds:dword_486584 +
mov [esp+44h+var_3C] eax +
call sub_401740  +
jmp loc_437930  +
mov edi [edi] +
test edi edi +
jnz loc_437918  +
cmp [esp+44h+var_15] 0 +
nop   +
jnz loc_437A91  +
mov eax [esp+44h+arg_0] +
mov eax [eax+0A5Ch] +
mov eax [eax] +
test eax eax +
jz loc_437ADC  +
xor eax eax +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add eax 4 +
mov [esp+44h+var_40] 3Ah +
mov [esp+44h+var_44] eax +
mov [esp+44h+var_1C] eax +
call strchr  +
test eax eax +
jz loc_437A7F  +
mov byte ptr [eax] 0 +
add eax 1 +
mov [esp+44h+var_24] eax +
setz [esp+44h+var_15]  +
jmp loc_437882  +
mov [esp+44h+var_24] 0 +
mov [esp+44h+var_15] 1 +
jmp loc_437882  +
mov eax [esp+44h+arg_4] +
mov [esp+44h+var_40] offset aSErrorInvali_0 +
mov [esp+44h+var_44] 0 +
mov [esp+44h+var_38] eax +
mov eax ds:dword_486584 +
mov [esp+44h+var_3C] eax +
call sub_401740  +
mov [esp+44h+var_3C] offset byte_4865A0 +
mov [esp+44h+var_40] offset aSusePUsbBusDev +
mov [esp+44h+var_44] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_437A48  +
mov eax ds:dword_486584 +
mov [esp+44h+var_34] ebp +
mov [esp+44h+var_38] esi +
mov [esp+44h+var_40] offset aSErrorCouldN_2 +
mov [esp+44h+var_3C] eax +
mov [esp+44h+var_44] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_437A48  +
***
push edi  +
mov edi eax +
push esi  +
push ebx  +
mov ebx 0Ah +
sub esp 3Ch +
mov esi [esp+48h+arg_8] +
mov ecx [esp+48h+arg_C] +
mov [esp+48h+var_1C] edx +
mov edx 10624DD3h +
imul ecx esi +
mov esi edi +
mov eax ecx +
imul  edx +
sar ecx 1Fh +
sar edx 6 +
sub edx ecx +
lea eax [edx+1F4h] +
mov edx [edi] +
mov edi [esp+48h+arg_8] +
mov [esp+48h+var_20] eax +
mov ecx [esp+48h+var_20] +
mov eax [edx] +
mov edx [esp+48h+arg_0] +
mov [esp+48h+var_30] edi +
mov [esp+48h+var_2C] ecx +
mov ecx [esp+48h+arg_4] +
mov [esp+48h+var_3C] ebp +
mov [esp+48h+var_38] edx +
mov [esp+48h+var_44] 0C0h +
mov [esp+48h+var_34] ecx +
mov ecx [esp+48h+var_1C] +
mov [esp+48h+var_48] eax +
mov [esp+48h+var_40] ecx +
call usb_control_msg  +
cmp edi eax +
jz loc_437BE0  +
mov edx [esi] +
add dword ptr [edx+0Ch] 1 +
sub ebx 1 +
jnz loc_437B52  +
mov [esp+48h+var_20] eax +
call usb_strerror  +
mov ecx [esp+48h+var_20] +
mov [esp+48h+var_38] edi +
mov [esp+48h+var_44] offset aSErrorUsbtiny_ +
mov [esp+48h+var_48] 0 +
mov [esp+48h+var_34] ecx +
mov [esp+48h+var_3C] eax +
mov eax ds:dword_486584 +
mov [esp+48h+var_40] eax +
call sub_401740  +
add esp 3Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add esp 3Ch +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push esi  +
push ebx  +
sub esp 4Ch +
mov ecx [esp+4Ch+arg_8] +
mov edi [esp+4Ch+arg_0] +
mov edx [esp+4Ch+arg_4] +
test ecx ecx +
jle loc_437DF5  +
lea eax [edi+0A5Ch] +
mov [esp+4Ch+var_2C] eax +
mov eax [esp+4Ch+arg_8] +
lea ebx [edx+1] +
and eax 0FFFFFFFEh +
lea esi [ebx+eax] +
mov eax [esp+4Ch+arg_8] +
sub eax 1 +
and eax 0FFFFFFFEh +
lea eax [edx+eax+3] +
mov [esp+4Ch+var_20] eax +
cmp ebx esi +
movzx edx byte ptr [ebx-1] +
jnz loc_437D56  +
movzx esi dl +
mov edx [esp+4Ch+arg_10] +
mov eax esi +
test edx edx +
jle loc_437E00  +
call sub_437720  +
movzx ecx ax +
mov eax [edi+0A5Ch] +
mov edx [eax+4] +
lea eax [esp+4Ch+var_10] +
mov [esp+4Ch+var_48] eax +
mov eax [esp+4Ch+var_2C] +
mov [esp+4Ch+var_44] 4 +
mov [esp+4Ch+var_4C] 0FFFFh +
shl edx 5 +
mov [esp+4Ch+var_40] edx +
mov edx 7 +
call sub_437B10  +
test eax eax +
js loc_437E8D  +
movzx eax byte ptr [esp+4Ch+var_10+2] +
movzx edi byte ptr [esp+4Ch+var_10+3] +
shl eax 8 +
or di ax +
jns loc_437CB4  +
movsx eax di +
add eax eax +
test ax ax +
mov edi eax +
js loc_437CA8  +
mov eax edi +
sar ax 7 +
cwde   +
call sub_4376C0  +
mov ecx 8 +
xor edx edx +
mov ebp eax +
mov ebx eax +
nop   +
lea esi [esi+0] +
mov eax edx +
xor eax 1 +
test bl 1 +
cmovnz edx eax +
shr bl 1 +
sub ecx 1 +
jnz loc_437CD0  +
mov eax edi +
movzx edx dl +
sar ax 6 +
and eax 1 +
cmp edx eax +
jnz loc_437E6D  +
sar di 4 +
and edi 3 +
cmp di 3 +
jnz loc_437E9A  +
cmp ds:dword_486580 1 +
jle loc_437D35  +
mov eax ebp +
movzx eax al +
mov [esp+4Ch+var_40] eax +
mov eax ds:_iob +
mov [esp+4Ch+var_44] esi +
mov [esp+4Ch+var_48] offset aCmd_tpi_tx_rx0 +
add eax 40h +
mov [esp+4Ch+var_4C] eax +
call fprintf  +
mov eax [esp+4Ch+arg_C] +
mov ecx ebp +
mov [eax] cl +
mov eax 1 +
cmp [esp+4Ch+arg_10] eax +
jg loc_437EC1  +
xor eax eax +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
movzx eax byte ptr [ebx] +
mov [esp+4Ch+var_28] edx +
mov [esp+4Ch+var_24] eax +
call sub_437720  +
mov edx [esp+4Ch+var_28] +
movzx ecx dl +
mov [esp+4Ch+var_28] ecx +
movzx ebp ax +
mov eax ecx +
call sub_437720  +
movzx ecx ax +
mov eax [edi+0A5Ch] +
mov edx [eax+4] +
mov eax [esp+4Ch+var_2C] +
mov [esp+4Ch+var_44] 4 +
mov [esp+4Ch+var_4C] ebp +
shl edx 5 +
mov [esp+4Ch+var_40] edx +
lea edx [esp+4Ch+var_10] +
mov [esp+4Ch+var_48] edx +
mov edx 7 +
call sub_437B10  +
test eax eax +
js loc_437E8D  +
cmp ds:dword_486580 1 +
jle loc_437DE8  +
mov eax [esp+4Ch+var_24] +
mov ecx [esp+4Ch+var_28] +
mov [esp+4Ch+var_48] offset aCmd_tpi_tx_tx0 +
mov [esp+4Ch+var_40] eax +
mov eax ds:_iob +
mov [esp+4Ch+var_44] ecx +
add eax 40h +
mov [esp+4Ch+var_4C] eax +
call fprintf  +
add ebx 2 +
cmp ebx [esp+4Ch+var_20] +
jnz loc_437C34  +
xor eax eax +
jmp loc_437D42  +
call sub_437720  +
movzx ecx ax +
mov eax [edi+0A5Ch] +
mov edx [eax+4] +
lea eax [esp+4Ch+var_10] +
mov [esp+4Ch+var_48] eax +
mov eax [esp+4Ch+var_2C] +
mov [esp+4Ch+var_44] 4 +
mov [esp+4Ch+var_4C] 0FFFFh +
shl edx 5 +
mov [esp+4Ch+var_40] edx +
mov edx 7 +
call sub_437B10  +
test eax eax +
js loc_437E8D  +
cmp ds:dword_486580 1 +
jle loc_437DF5  +
mov eax ds:_iob +
mov [esp+4Ch+var_44] esi +
mov [esp+4Ch+var_48] offset aCmd_tpi_tx0x02 +
add eax 40h +
mov [esp+4Ch+var_4C] eax +
call fprintf  +
xor eax eax +
jmp loc_437D42  +
mov eax ds:_iob +
mov [esp+4Ch+var_44] offset aUsbtiny_tpi_tx +
mov [esp+4Ch+var_48] offset aSParityBitIsWr +
add eax 40h +
mov [esp+4Ch+var_4C] eax +
call fprintf  +
mov eax 0FFFFFFFFh +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ds:_iob +
mov [esp+4Ch+var_44] offset aUsbtiny_tpi_tx +
mov [esp+4Ch+var_48] offset aSStopBitsNotRe +
add eax 40h +
mov [esp+4Ch+var_4C] eax +
call fprintf  +
mov eax 0FFFFFFFFh +
jmp loc_437E92  +
mov eax [esp+4Ch+arg_10] +
mov [esp+4Ch+var_44] offset aUsbtiny_cmd_tp +
mov [esp+4Ch+var_48] offset aSUnexpectedCmd +
mov [esp+4Ch+var_3C] eax +
mov eax [esp+4Ch+arg_8] +
mov [esp+4Ch+var_40] eax +
mov eax ds:_iob +
add eax 40h +
mov [esp+4Ch+var_4C] eax +
call fprintf  +
mov eax 0FFFFFFFFh +
jmp loc_437D4E  +
***
mov eax [eax] +
mov ebx [esp+28h+arg_0] +
mov [esp+28h+var_C] 1F4h +
mov [esp+28h+var_10] 0 +
mov [esp+28h+var_14] 0 +
mov [esp+28h+var_18] ebx +
mov [esp+28h+var_1C] ecx +
mov [esp+28h+var_20] edx +
mov [esp+28h+var_24] 0C0h +
mov [esp+28h+var_28] eax +
call usb_control_msg  +
test eax eax +
js loc_437F47  +
add esp 28h +
pop ebx  +
retn   +
call usb_strerror  +
mov [esp+28h+var_24] offset aSErrorUsbtin_0 +
mov [esp+28h+var_28] 0 +
mov [esp+28h+var_1C] eax +
mov eax ds:dword_486584 +
mov [esp+28h+var_20] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_437F42  +
***
mov ebx [esp+28h+arg_0] +
mov eax [esp+arg_0] +
mov eax [eax+0A5Ch] +
mov edx [eax] +
test edx edx +
jz locret_4380A4  +
xor ecx ecx +
mov edx 6 +
mov [esp+arg_0] 0 +
jmp sub_437F00  +
retn   +
***
push esi  +
push ebx  +
sub esp 3Ch +
mov ebx [esp+3Ch+arg_0] +
mov esi [esp+3Ch+arg_4] +
fld  qword ptr [ebx+890h] +
fldz   +
fxch  st(1) +
fucomi st st(1) +
fstp  st(1) +
jbe loc_438264  +
fstp  [esp+3Ch+var_38] +
mov [esp+3Ch+var_3C] ebx +
call sub_437F80  +
mov [esp+3Ch+var_3C] 0C350h +
call sub_459150  +
test byte ptr [esi+85h] 8 +
jz loc_4381EE  +
cmp ds:dword_486580 1 +
jle loc_438129  +
mov eax ds:_iob +
mov dword ptr [esp+3Ch+var_38+4] 1Bh +
mov dword ptr [esp+3Ch+var_38] 1 +
mov [esp+3Ch+var_3C] offset aDoingMosiMis_0 +
add eax 40h +
mov [esp+3Ch+var_30] eax +
call fwrite  +
mov eax [ebx+0A5Ch] +
lea ebp [esp+3Ch+var_10] +
mov ecx 3412h +
lea edi [ebx+0A5Ch] +
mov edx 7 +
mov [esp+3Ch+var_10] 0AAAAAAAAh +
mov eax [eax+4] +
mov dword ptr [esp+3Ch+var_38+4] 4 +
mov dword ptr [esp+3Ch+var_38] ebp +
mov [esp+3Ch+var_3C] 7856h +
shl eax 5 +
mov [esp+3Ch+var_30] eax +
mov eax edi +
call sub_437B10  +
test eax eax +
js loc_438396  +
movzx eax byte ptr [esp+3Ch+var_10] +
cmp al 12h +
jnz loc_4382FC  +
movzx edx byte ptr [esp+3Ch+var_10+1] +
cmp dl 34h +
jnz loc_438388  +
movzx ecx byte ptr [esp+3Ch+var_10+2] +
cmp cl 56h +
mov [esp+3Ch+var_1D] cl +
jnz loc_438310  +
movzx ecx byte ptr [esp+3Ch+var_10+3] +
cmp cl 78h +
jnz loc_438317  +
mov eax [ebx+0A5Ch] +
mov ecx 0FFFFh +
mov edx 7 +
mov eax [eax+4] +
mov dword ptr [esp+3Ch+var_38+4] 4 +
mov dword ptr [esp+3Ch+var_38] ebp +
mov [esp+3Ch+var_3C] 0FFFFh +
shl eax 5 +
mov [esp+3Ch+var_30] eax +
mov eax edi +
call sub_437B10  +
test eax eax +
js loc_43835B  +
mov edi 4 +
mov eax [ebx+8E0h] +
mov dword ptr [esp+3Ch+var_38] esi +
mov [esp+3Ch+var_3C] ebx +
call eax  +
test eax eax +
jg loc_438354  +
mov eax [ebx+0A5Ch] +
mov edx 5 +
mov ecx [eax+4] +
mov [esp+3Ch+var_3C] 1 +
call sub_437F00  +
test eax eax +
js loc_438257  +
mov eax [ebx+0A5Ch] +
mov edx 5 +
mov ecx [eax+4] +
mov [esp+3Ch+var_3C] 0 +
call sub_437F00  +
test eax eax +
js loc_438257  +
mov [esp+3Ch+var_3C] 0C350h +
call sub_459150  +
sub edi 1 +
jnz loc_4381F3  +
mov eax 0FFFFFFFFh +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
fstp  st +
mov eax [ebx+0A5Ch] +
mov dword ptr [eax+4] 0Ah +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_30] 0Ah +
mov dword ptr [esp+3Ch+var_38] offset aSUsingSckPerio +
mov [esp+3Ch+var_3C] 1 +
mov dword ptr [esp+3Ch+var_38+4] eax +
call sub_401740  +
mov eax [ebx+0A5Ch] +
mov edx 5 +
mov ecx [eax+4] +
mov [esp+3Ch+var_3C] 0 +
call sub_437F00  +
test eax eax +
js loc_438257  +
mov edi [ebx+0A5Ch] +
mov eax [edi+4] +
mov dword ptr [edi+8] 80h +
cmp eax 10h +
jle loc_4380DF  +
mov dword ptr [edi+8] 40h +
sar eax 1 +
mov ecx 3 +
mov edx 40h +
cmp eax 10h +
jle loc_4380DF  +
sar edx 1 +
sar eax 1 +
sub ecx 1 +
mov [edi+8] edx +
jnz loc_4382E2  +
jmp loc_4380DF  +
movzx edx byte ptr [esp+3Ch+var_10+2] +
mov [esp+3Ch+var_1D] dl +
movzx edx byte ptr [esp+3Ch+var_10+1] +
lea esi [esi+0] +
movzx ebx byte ptr [esp+3Ch+var_10+3] +
mov ecx ebx +
mov dword ptr [esp+3Ch+var_38+4] eax +
mov eax ds:_iob +
movzx ebx cl +
movzx ecx [esp+3Ch+var_1D] +
mov [esp+3Ch+var_28] ebx +
mov [esp+3Ch+var_30] edx +
add eax 40h +
mov [esp+3Ch+var_2C] ecx +
mov dword ptr [esp+3Ch+var_38] offset aMosiMisoCheckF +
mov [esp+3Ch+var_3C] eax +
call fprintf  +
add esp 3Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
xor eax eax +
jmp loc_43825C  +
mov eax ds:_iob +
mov dword ptr [esp+3Ch+var_38+4] 24h +
mov dword ptr [esp+3Ch+var_38] 1 +
mov [esp+3Ch+var_3C] offset aUnableToSwitch +
add eax 40h +
mov [esp+3Ch+var_30] eax +
call fwrite  +
jmp loc_438257  +
movzx ebx byte ptr [esp+3Ch+var_10+2] +
mov [esp+3Ch+var_1D] bl +
jmp loc_438310  +
mov eax ds:_iob +
mov dword ptr [esp+3Ch+var_38+4] 10h +
mov dword ptr [esp+3Ch+var_38] 1 +
mov [esp+3Ch+var_3C] offset aUsb_inFailed +
add eax 40h +
mov [esp+3Ch+var_30] eax +
call fwrite  +
mov eax 0FFFFFFFFh +
jmp loc_43825C  +
***
push edi  +
mov edi offset aFlash_16 +
push esi  +
push ebx  +
sub esp 3Ch +
mov ebp [esp+48h+arg_8] +
mov ebx [esp+48h+arg_10] +
mov eax [esp+48h+arg_14] +
mov [esp+48h+var_24] 0 +
mov esi ebp +
add eax ebx +
cmps   +
mov ecx [ebp+40h] +
mov [esp+48h+var_20] eax +
setb dl  +
setnbe al  +
sub eax edx +
movsx eax al +
cmp eax 1 +
sbb eax eax +
mov [esp+48h+var_1C] eax +
and [esp+48h+var_1C] 0FFFFFFFEh +
add [esp+48h+var_1C] 0Ch +
test ecx ecx +
jz loc_438553  +
cmp ebx [esp+48h+var_20] +
jb loc_438449  +
jmp loc_43850A  +
cmp [esp+48h+var_20] esi +
jz loc_4384E4  +
cmp [esp+48h+var_20] esi +
jbe loc_43850A  +
mov ebx esi +
mov eax [esp+48h+arg_0] +
mov edx [ebp+40h] +
mov eax [eax+0A5Ch] +
test edx edx +
mov esi [eax+8] +
jz loc_438466  +
cmp esi [esp+48h+arg_C] +
cmova esi [esp+48h+arg_C] +
mov ecx [eax+4] +
mov edi [eax] +
mov eax 10624DD3h +
mov [esp+48h+var_30] esi +
shl ecx 5 +
add ecx [esp+48h+var_24] +
imul ecx esi +
imul  ecx +
sar ecx 1Fh +
sar edx 6 +
sub edx ecx +
add edx 1F4h +
mov [esp+48h+var_2C] edx +
mov eax [ebp+78h] +
mov [esp+48h+var_38] ebx +
mov [esp+48h+var_44] 40h +
mov [esp+48h+var_48] edi +
add eax ebx +
mov [esp+48h+var_34] eax +
mov eax [esp+48h+var_24] +
mov [esp+48h+var_3C] eax +
mov eax [esp+48h+var_1C] +
mov [esp+48h+var_40] eax +
call usb_control_msg  +
cmp esi eax +
jnz loc_438516  +
test esi esi +
js loc_438546  +
mov eax [ebp+40h] +
add esi ebx +
test eax eax +
jz loc_43843D  +
xor edx edx +
mov eax esi +
div  [esp+48h+arg_C] +
test edx edx +
jnz loc_438433  +
mov eax [esp+48h+arg_4] +
mov [esp+48h+var_3C] ebx +
mov [esp+48h+var_40] ebp +
mov [esp+48h+var_44] eax +
mov eax [esp+48h+arg_0] +
mov [esp+48h+var_48] eax +
call sub_404160  +
cmp [esp+48h+var_20] esi +
ja loc_438447  +
mov eax [esp+48h+arg_14] +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edi eax +
call usb_strerror  +
mov [esp+48h+var_34] edi +
mov [esp+48h+var_38] esi +
mov [esp+48h+var_44] offset aSErrorUsbtin_1 +
mov [esp+48h+var_48] 0 +
mov [esp+48h+var_3C] eax +
mov eax ds:dword_486584 +
mov [esp+48h+var_40] eax +
call sub_401740  +
add esp 3Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+48h+arg_0] +
movzx ecx byte ptr [ebp+61h] +
movzx edx byte ptr [ebp+60h] +
mov eax [eax+0A5Ch] +
shl ecx 8 +
or ecx edx +
mov edx 8 +
mov [esp+48h+var_48] 0 +
call sub_437F00  +
test eax eax +
js loc_438546  +
mov eax [ebp+58h] +
mov [esp+48h+var_24] eax +
jmp loc_438428  +
***
sub esp 28h +
mov ecx [eax] +
mov eax [ecx+0Ch] +
test eax eax +
jle loc_4385A8  +
cmp ds:dword_4866A8 1 +
jle loc_4385B4  +
mov dword ptr [ecx+0Ch] 0 +
add esp 28h +
pop ebx  +
retn   +
mov [esp+28h+var_1C] eax +
mov eax ds:dword_486584 +
mov [esp+28h+var_18] edx +
mov [esp+28h+var_24] offset aSDRetriesDurin +
mov [esp+28h+var_28] 0 +
mov [esp+28h+var_20] eax +
call sub_401740  +
mov ecx [ebx] +
mov dword ptr [ecx+0Ch] 0 +
add esp 28h +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [esp+3Ch+arg_0] +
mov esi [esp+3Ch+arg_8] +
mov ebx [esp+3Ch+arg_4] +
lea edi [eax+0A5Ch] +
mov dword ptr [esi] 0 +
mov eax [eax+0A5Ch] +
movzx ecx byte ptr [ebx+1] +
movzx edx byte ptr [ebx] +
mov eax [eax+4] +
shl ecx 8 +
mov [esp+3Ch+var_34] 4 +
or ecx edx +
mov [esp+3Ch+var_38] esi +
shl eax 3 +
mov [esp+3Ch+var_30] eax +
movzx eax byte ptr [ebx+3] +
movzx edx byte ptr [ebx+2] +
shl eax 8 +
or eax edx +
mov edx 7 +
mov [esp+3Ch+var_3C] eax +
mov eax edi +
call sub_437B10  +
test eax eax +
mov ebp eax +
js loc_4386E5  +
mov edx offset aSpiCommand +
mov eax edi +
call sub_438590  +
movzx eax byte ptr [esi+3] +
mov [esp+3Ch+var_18] eax +
movzx eax byte ptr [esi+2] +
mov [esp+3Ch+var_1C] eax +
movzx eax byte ptr [esi+1] +
mov [esp+3Ch+var_20] eax +
movzx eax byte ptr [esi] +
mov [esp+3Ch+var_24] eax +
movzx eax byte ptr [ebx+3] +
mov [esp+3Ch+var_28] eax +
movzx eax byte ptr [ebx+2] +
mov [esp+3Ch+var_2C] eax +
movzx eax byte ptr [ebx+1] +
mov [esp+3Ch+var_30] eax +
movzx eax byte ptr [ebx] +
mov [esp+3Ch+var_38] offset aCmd02x02x02x02 +
mov [esp+3Ch+var_3C] 2 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
xor eax eax +
cmp ebp 4 +
jz loc_4386D0  +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
movzx eax byte ptr [ebx+1] +
cmp [esi+2] al +
setz al  +
add esp 3Ch +
pop ebx  +
movzx eax al +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax 0FFFFFFFFh +
jmp loc_4386C2  +
***
push edi  +
mov edi offset aFlash_16 +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+38h+arg_10] +
mov eax [esp+38h+arg_14] +
mov esi [esp+38h+arg_8] +
mov ebp [esp+38h+arg_0] +
add eax ebx +
cmps   +
mov [esp+38h+var_24] eax +
lea ecx [ebp+0A5Ch] +
mov [esp+38h+var_20] ecx +
setnbe al  +
setb dl  +
sub eax edx +
movsx eax al +
cmp eax 1 +
sbb edi edi +
and edi 0FFFFFFFEh +
add edi 0Bh +
cmp ebx [esp+38h+var_24] +
jnb loc_4387A0  +
mov [esp+38h+var_1C] edi +
mov edi [esp+38h+arg_8] +
jmp loc_438758  +
add ebx esi +
cmp [esp+38h+var_24] ebx +
jbe loc_4387A0  +
mov eax [ebp+0A5Ch] +
xor ecx ecx +
mov edx [esp+38h+var_1C] +
mov esi [eax+8] +
mov eax [eax+4] +
mov [esp+38h+var_30] esi +
shl eax 5 +
mov [esp+38h+var_2C] eax +
mov eax [edi+78h] +
mov [esp+38h+var_38] ebx +
add eax ebx +
mov [esp+38h+var_34] eax +
mov eax [esp+38h+var_20] +
call sub_437B10  +
test eax eax +
jns loc_438750  +
add esp 2Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+38h+var_20] +
mov edx offset aRead_1 +
call sub_438590  +
mov eax [esp+38h+arg_14] +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
sub esp 1Ch +
mov [esp+1Ch+var_1C] 10h +
call malloc  +
mov edx [esp+1Ch+arg_0] +
test eax eax +
mov [edx+0A5Ch] eax +
jz loc_4387FC  +
mov dword ptr [eax] 0 +
mov dword ptr [eax+4] 0 +
mov dword ptr [eax+8] 0 +
mov dword ptr [eax+0Ch] 0 +
add esp 1Ch +
retn   +
mov eax ds:dword_486584 +
mov [esp+1Ch+var_18] offset aSUsbtiny_setup +
mov [esp+1Ch+var_1C] 0 +
mov [esp+1Ch+var_14] eax +
call sub_401740  +
mov [esp+1Ch+var_1C] 1 +
call exit  +
***
sub esp 24h +
mov edx [edx+ecx*4+14Ch] +
test edx edx +
jz loc_438877  +
lea esi [esp+24h+var_8] +
mov ebx eax +
mov [esp+24h+var_24] edx +
mov [esp+24h+var_20] esi +
mov [esp+24h+var_8] 0 +
call sub_4075B0  +
mov edx [esp+24h+arg_0] +
mov eax [ebx+8ECh] +
mov [esp+24h+var_20] esi +
mov [esp+24h+var_24] ebx +
mov [esp+24h+var_1C] edx +
call eax  +
add esp 24h +
pop ebx  +
pop esi  +
retn   +
mov [esp+24h+var_1C] ecx +
mov [esp+24h+var_20] offset aOperationDNotD +
mov [esp+24h+var_24] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_438871  +
***
sub esp 24h +
mov ebx [esp+24h+arg_4] +
mov esi [esp+24h+arg_0] +
test byte ptr [ebx+85h] 8 +
jnz loc_438900  +
mov eax [ebx+174h] +
test eax eax +
jz loc_438919  +
lea eax [esp+24h+var_8] +
mov ecx 0Ah +
mov [esp+24h+var_24] eax +
mov edx ebx +
mov eax esi +
call sub_438830  +
test eax eax +
jz loc_438912  +
mov eax [ebx+70h] +
mov [esp+24h+var_24] eax +
call sub_459150  +
mov eax [esi+8C8h] +
mov [esp+24h+var_20] ebx +
mov [esp+24h+var_24] esi +
call eax  +
xor eax eax +
add esp 24h +
pop ebx  +
pop esi  +
retn   +
mov [esp+24h+var_20] ebx +
mov [esp+24h+var_24] esi +
call sub_403B90  +
add esp 24h +
pop ebx  +
pop esi  +
retn   +
mov eax 0FFFFFFFFh +
jmp loc_4388F5  +
mov [esp+24h+var_1C] ebx +
mov [esp+24h+var_20] offset aChipEraseIns_3 +
mov [esp+24h+var_24] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_4388F5  +
***
sub esp 2Ch +
mov eax [esp+arg_0] +
mov dword ptr [eax+54h] 74425355h +
mov dword ptr [eax+58h] 796E69h +
mov dword ptr [eax+8C8h] offset sub_4380B0 +
mov dword ptr [eax+8D0h] offset dword_4377A0 +
mov dword ptr [eax+8D4h] offset dword_4377B0 +
mov dword ptr [eax+8E0h] offset sub_438940 +
mov dword ptr [eax+8E4h] offset sub_4388A0 +
mov dword ptr [eax+8ECh] offset sub_4385F0 +
mov dword ptr [eax+8F0h] offset sub_437BF0 +
mov dword ptr [eax+8F8h] offset sub_437810 +
mov dword ptr [eax+8FCh] offset sub_4377E0 +
mov dword ptr [eax+914h] offset sub_403EA0 +
mov dword ptr [eax+910h] offset sub_4042F0 +
mov dword ptr [eax+8D8h] 0 +
mov dword ptr [eax+8DCh] offset sub_438080 +
mov dword ptr [eax+904h] offset sub_4386F0 +
mov dword ptr [eax+900h] offset sub_4383D0 +
mov dword ptr [eax+930h] offset sub_437F80 +
mov dword ptr [eax+94Ch] offset sub_4387C0 +
mov dword ptr [eax+950h] offset loc_4377C0 +
retn   +
***
sub esp 14h +
mov eax off_461140 +
mov ebx [esp+14h+arg_0] +
mov eax [eax+18h] +
lea esi [ebx+89Ch] +
mov [esp+14h+var_14] esi +
mov [esp+14h+var_10] 0 +
call eax  +
mov eax off_461140 +
mov eax [eax+8] +
mov [esp+14h+var_14] esi +
call eax  +
mov dword ptr [ebx+89Ch] 0FFFFFFFFh +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
***
jmp sub_438AB0  +
***
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [esp+3Ch+arg_0] +
mov eax [eax+0A5Ch] +
mov eax [eax+28h] +
mov [esp+3Ch+var_20] eax +
mov eax [esp+3Ch+arg_4] +
mov [esp+3Ch+var_3C] eax +
call sub_406F20  +
mov [esp+3Ch+var_24] 0 +
test eax eax +
mov ebx eax +
jnz loc_438B4D  +
jmp loc_438B9E  +
lea eax [esp+3Ch+var_10] +
mov [esp+3Ch+var_34] eax +
mov [esp+3Ch+var_38] offset aSnoozeI +
mov [esp+3Ch+var_3C] ebp +
call sscanf  +
cmp eax 1 +
jnz loc_438BB0  +
mov eax [esp+3Ch+var_10] +
test eax eax +
js loc_438BB0  +
mov [esp+3Ch+var_30] eax +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_38] offset aSWiring_parsee +
mov [esp+3Ch+var_3C] 2 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov eax [esp+3Ch+var_10] +
mov edx [esp+3Ch+var_20] +
mov [edx] eax +
mov [esp+3Ch+var_3C] ebx +
call sub_406F40  +
test eax eax +
mov ebx eax +
jz loc_438B9E  +
mov [esp+3Ch+var_3C] ebx +
mov edi offset aSnooze +
call sub_406F60  +
mov ecx 7 +
mov esi eax +
mov ebp eax +
cmps   +
jz loc_438AE7  +
mov [esp+3Ch+var_30] eax +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_38] offset aSWiring_pars_0 +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov [esp+3Ch+var_3C] ebx +
mov [esp+3Ch+var_24] 0FFFFFFFFh +
call sub_406F40  +
test eax eax +
mov ebx eax +
jnz loc_438B4D  +
mov eax [esp+3Ch+var_24] +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_30] ebp +
mov [esp+3Ch+var_38] offset aSWiring_pars_1 +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov [esp+3Ch+var_24] 0FFFFFFFFh +
jmp loc_438B3F  +
***
mov ebx [esp+18h+arg_0] +
mov eax [ebx+0A5Ch] +
mov eax [eax+28h] +
mov [esp+18h+var_18] eax +
call free  +
mov [esp+18h+arg_0] ebx +
add esp 18h +
pop ebx  +
jmp sub_41E400  +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov esi [esp+2Ch+arg_0] +
mov ebx [esp+2Ch+arg_4] +
mov eax [esi+0A5Ch] +
lea edi [esi+89Ch] +
mov ebp [eax+28h] +
lea eax [esi+74h] +
mov [esp+2Ch+var_28] ebx +
mov [esp+2Ch+var_2C] eax +
call strcpy  +
mov edx [esi+480h] +
mov eax 1C200h +
test edx edx +
cmovnz eax edx +
mov edx off_461140 +
mov [esp+2Ch+var_14] eax +
mov edx [edx] +
mov [esp+2Ch+var_28] eax +
mov eax [esp+2Ch+var_10] +
mov [esp+2Ch+var_2C] ebx +
mov [esp+2Ch+var_20] edi +
mov [esp+2Ch+var_24] eax +
call edx  +
mov ebx [ebp+0] +
test ebx ebx +
jle loc_438CF4  +
mov eax ds:dword_486584 +
mov [esp+2Ch+var_20] ebx +
sub ebx 1 +
mov [esp+2Ch+var_28] offset aSWiring_openSn +
mov [esp+2Ch+var_2C] 2 +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
lea esi [esi+0] +
mov [esp+2Ch+var_2C] 3E8h +
sub ebx 1 +
call sub_459150  +
cmp ebx 0FFFFFFFFh +
jnz loc_438CA0  +
mov eax ds:dword_486584 +
mov [esp+2Ch+var_28] offset aSWiring_openDo +
mov [esp+2Ch+var_2C] 2 +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
mov [esp+2Ch+var_2C] esi +
mov [esp+2Ch+var_28] 0 +
call sub_41FC30  +
mov [esp+2Ch+var_2C] esi +
call sub_41FC50  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
sar eax 1Fh +
retn   +
mov eax ds:dword_486584 +
mov [esp+2Ch+var_28] offset aSWiring_openRe +
mov [esp+2Ch+var_2C] 2 +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
mov eax off_461140 +
mov eax [eax+18h] +
mov [esp+2Ch+var_28] 0 +
mov [esp+2Ch+var_2C] edi +
call eax  +
mov [esp+2Ch+var_2C] 0C350h +
call sub_459150  +
mov eax ds:dword_486584 +
mov [esp+2Ch+var_28] offset aSWiring_openAs +
mov [esp+2Ch+var_2C] 2 +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
mov eax off_461140 +
mov eax [eax+18h] +
mov [esp+2Ch+var_28] 1 +
mov [esp+2Ch+var_2C] edi +
call eax  +
mov [esp+2Ch+var_2C] 0C350h +
call sub_459150  +
jmp loc_438CD1  +
***
mov ebx [esp+18h+arg_0] +
mov [esp+18h+var_18] ebx +
call sub_41F0C0  +
mov [esp+18h+var_18] 4 +
call malloc  +
test eax eax +
jz loc_438DB4  +
mov edx [ebx+0A5Ch] +
mov dword ptr [eax] 0 +
mov [edx+28h] eax +
add esp 18h +
pop ebx  +
retn   +
mov eax ds:dword_486584 +
mov [esp+18h+var_14] offset aSWiring_setupO +
mov [esp+18h+var_18] 0 +
mov [esp+18h+var_10] eax +
call sub_401740  +
mov [esp+18h+var_18] 1 +
call exit  +
***
mov ebx [esp+18h+arg_0] +
mov [esp+18h+var_18] ebx +
call sub_425820  +
mov eax 676Eh +
mov dword ptr [ebx+54h] 69726957h +
mov [ebx+58h] ax +
mov byte ptr [ebx+5Ah] 0 +
mov dword ptr [ebx+8F8h] offset sub_438C10 +
mov dword ptr [ebx+8FCh] offset sub_438A60 +
mov dword ptr [ebx+94Ch] offset sub_438D80 +
mov dword ptr [ebx+950h] offset sub_438BE0 +
mov dword ptr [ebx+948h] offset sub_438AB0 +
add esp 18h +
pop ebx  +
retn   +
***
sub esp 38h +
lea ecx [ebp+var_1C] +
mov [ebp+var_10] 0 +
mov [ebp+var_C] 0 +
mov [ebp+var_1C] edx +
mov [ebp+var_18] edx +
mov [ebp+var_14] edx +
mov [esp+38h+var_34] ecx +
mov [esp+38h+var_38] eax +
call ds:SetCommTimeouts  +
sub esp 8 +
leave   +
retn   +
***
push edi  +
push esi  +
push ebx  +
sub esp 4Ch +
mov eax [ebp+arg_0] +
mov ebx [eax] +
cmp ebx 0FFFFFFFFh +
jz loc_438FDA  +
mov edx 0FAh +
mov eax ebx +
call sub_438E40  +
mov esi [ebp+arg_4] +
test esi esi +
jnz loc_438FC1  +
lea edi [ebp+var_2C] +
lea esi [ebp+var_22] +
jmp loc_438ECC  +
mov ecx [ebp+var_2C] +
test ecx ecx +
jz loc_438F77  +
mov edx [ebp+arg_4] +
test edx edx +
jnz loc_438FA0  +
mov [esp+58h+var_48] 0 +
mov [esp+58h+var_4C] edi +
mov [esp+58h+var_50] 1 +
mov [esp+58h+var_54] esi +
mov [esp+58h+var_58] ebx +
call ds:ReadFile  +
sub esp 14h +
test eax eax +
jnz loc_438EB6  +
call ds:GetLastError  +
lea edx [ebp+var_28] +
mov ebx 0FFFFFFFFh +
mov [esp+58h+var_48] edx +
mov [esp+58h+var_40] 0 +
mov [esp+58h+var_44] 0 +
mov [esp+58h+var_4C] 400h +
mov [esp+58h+var_54] 0 +
mov [esp+58h+var_50] eax +
mov [esp+58h+var_58] 1300h +
call ds:FormatMessageA  +
mov eax [ebp+var_28] +
sub esp 1Ch +
mov [esp+58h+var_4C] eax +
mov eax ds:dword_486584 +
mov [esp+58h+var_54] offset aSSer_drainRead +
mov [esp+58h+var_58] 0 +
mov [esp+58h+var_50] eax +
call sub_401740  +
mov eax [ebp+var_28] +
mov [esp+58h+var_58] eax +
call ds:LocalFree  +
sub esp 4 +
lea esp [ebp-0Ch] +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebp+arg_4] +
xor ebx ebx +
test eax eax +
jz loc_438F6D  +
mov [esp+58h+var_54] offset aDrain +
mov [esp+58h+var_58] 0 +
call sub_401740  +
lea esp [ebp-0Ch] +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
movzx eax byte ptr [ebp+var_22] +
mov [esp+58h+var_54] offset a02x_0 +
mov [esp+58h+var_58] 0 +
mov [esp+58h+var_50] eax +
call sub_401740  +
jmp loc_438ECC  +
mov [esp+58h+var_54] offset aDrain_0 +
mov [esp+58h+var_58] 0 +
call sub_401740  +
jmp loc_438EAE  +
mov eax ds:dword_486584 +
mov [esp+58h+var_54] offset aSSer_drainPort +
mov [esp+58h+var_58] 0 +
mov [esp+58h+var_50] eax +
call sub_401740  +
jmp loc_438F6D  +
***
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov ebx [ebp+arg_4] +
cmp ds:byte_4850D8 0 +
jnz loc_4390CA  +
mov eax [ebp+arg_0] +
lea esi [ebp+var_34] +
mov edi [eax] +
xor eax eax +
mov dword ptr [esi+eax] 0 +
add eax 4 +
cmp eax 1Ch +
jb loc_439023  +
mov eax dword_461180 +
mov [ebp+var_34] 1Ch +
test eax eax +
jz loc_43905D  +
cmp ebx eax +
jz loc_4390C0  +
mov eax offset dword_461180 +
jmp loc_439054  +
cmp ebx edx +
jz loc_4390C5  +
add eax 8 +
mov edx [eax] +
test edx edx +
jnz loc_439050  +
mov eax ds:dword_486584 +
mov [esp+48h+var_3C] ebx +
mov [esp+48h+var_44] offset aSSerial_baud_l +
mov [esp+48h+var_48] 1 +
mov [esp+48h+var_40] eax +
call sub_401740  +
movzx eax [ebp+var_2C] +
and [ebp+var_2B] 0CFh +
mov [ebp+var_30] ebx +
or eax 1 +
and eax 0FFFFFFCFh +
mov [ebp+var_2C] al +
mov [ebp+var_22] 8 +
mov [ebp+var_21] 0 +
mov [ebp+var_20] 0 +
mov [esp+48h+var_44] esi +
mov [esp+48h+var_48] edi +
call ds:SetCommState  +
sub esp 8 +
test eax eax +
setz al  +
movzx eax al +
neg eax  +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax offset dword_461180 +
mov ebx [eax+4] +
jmp loc_43907E  +
mov eax 0FFFFFFE7h +
jmp loc_4390B8  +
***
jmp sub_4390E0  +
***
cmp ds:byte_4850D8 0 +
jnz loc_439160  +
push ebp  +
mov ebp esp +
push esi  +
push ebx  +
sub esp 10h +
mov eax [ebp+arg_4] +
mov ebx [eax] +
mov eax [ebp+arg_8] +
test eax eax +
jnz loc_439130  +
mov esi ds:EscapeCommFunction +
mov [esp+1Ch+var_1C] ebx +
mov [esp+1Ch+var_18] 6 +
call esi  +
sub esp 8 +
mov [esp+1Ch+var_1C] ebx +
mov [esp+1Ch+var_18] 4 +
call esi  +
xor eax eax +
sub esp 8 +
lea esp [ebp-8] +
pop ebx  +
pop esi  +
pop ebp  +
retn   +
mov esi ds:EscapeCommFunction +
mov [esp+1Ch+var_1C] ebx +
mov [esp+1Ch+var_18] 5 +
call esi  +
sub esp 8 +
mov [esp+1Ch+var_1C] ebx +
mov [esp+1Ch+var_18] 3 +
call esi  +
xor eax eax +
sub esp 8 +
lea esp [ebp-8] +
pop ebx  +
pop esi  +
pop ebp  +
retn   +
xor eax eax +
retn   +
***
push edi  +
push esi  +
mov esi eax +
push ebx  +
sub esp 14Ch +
mov [ebp+var_130] ecx +
mov ecx [eax] +
mov [ebp+var_138] edx +
test ecx ecx +
js loc_439466  +
mov ebx dword_4611C8 +
mov edx 10624DD3h +
mov eax ebx +
imul  edx +
mov eax ebx +
sar eax 1Fh +
sar edx 6 +
sub edx eax +
mov [ebp+var_124] edx +
imul edx edx +
sub ebx edx +
mov edx [ebp+var_130] +
imul ebx ebx +
test edx edx +
mov [ebp+var_120] ebx +
jz loc_43931A  +
mov eax [ebp+var_138] +
lea edi [ebp+var_124] +
mov [ebp+var_12C] 0 +
mov ebx ds:WSAGetLastError +
mov [ebp+var_134] eax +
jmp loc_43923E  +
cmp eax 0FFFFFFFFh +
jnz loc_4392B4  +
call ebx  +
cmp eax 2714h +
jz loc_43921F  +
call ebx  +
cmp eax 2734h +
jnz loc_4393E1  +
mov eax ds:dword_486584 +
mov [esp+158h+var_154] offset aSSer_recvProgr +
mov [esp+158h+var_158] 1 +
mov [esp+158h+var_150] eax +
call sub_401740  +
mov ecx [esi] +
mov [ebp+var_118] ecx +
lea eax [ebp+var_11C] +
add ecx 1 +
mov [ebp+var_11C] 1 +
mov [esp+158h+var_148] edi +
mov [esp+158h+var_14C] 0 +
mov [esp+158h+var_150] 0 +
mov [esp+158h+var_154] eax +
mov [esp+158h+var_158] ecx +
call ds:select  +
sub esp 14h +
test eax eax +
jnz loc_439200  +
cmp ds:dword_486580 1 +
mov ebx 0FFFFFFFFh +
jle loc_4392AA  +
mov eax ds:dword_486584 +
mov [esp+158h+var_154] offset aSSer_recvPro_0 +
mov [esp+158h+var_158] 1 +
mov [esp+158h+var_150] eax +
call sub_401740  +
lea esp [ebp-0Ch] +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebp+var_130] +
mov edx 400h +
sub eax [ebp+var_12C] +
mov [esp+158h+var_14C] 0 +
cmp eax 400h +
cmova eax edx +
mov [esp+158h+var_150] eax +
mov eax [ebp+var_134] +
mov [esp+158h+var_154] eax +
mov eax [esi] +
mov [esp+158h+var_158] eax +
call ds:recv  +
sub esp 10h +
test eax eax +
js loc_43948F  +
add [ebp+var_12C] eax +
add [ebp+var_134] eax +
mov eax [ebp+var_12C] +
cmp [ebp+var_130] eax +
jbe loc_439324  +
mov ecx [esi] +
jmp loc_43923E  +
mov [ebp+var_12C] 0 +
xor ebx ebx +
cmp ds:dword_486580 3 +
jle loc_4392AA  +
mov eax ds:dword_486584 +
mov [esp+158h+var_154] offset aSRecv +
mov [esp+158h+var_158] 4 +
mov [esp+158h+var_150] eax +
call sub_401740  +
mov eax [ebp+var_12C] +
mov esi ds:isprint +
mov edi [ebp+var_138] +
test eax eax +
jnz loc_4393A4  +
jmp loc_4393C6  +
mov [esp+158h+var_150] ebx +
mov [esp+158h+var_154] offset aC +
mov [esp+158h+var_158] 4 +
call sub_401740  +
mov [esp+158h+var_150] ebx +
add edi 1 +
mov [esp+158h+var_154] offset a02x_1 +
mov [esp+158h+var_158] 4 +
call sub_401740  +
sub [ebp+var_12C] 1 +
jz loc_4393C6  +
movzx ebx byte ptr [edi] +
mov [esp+158h+var_158] ebx +
call esi  +
test eax eax +
jnz loc_439368  +
mov [esp+158h+var_154] offset a_ +
mov [esp+158h+var_158] 4 +
call sub_401740  +
jmp loc_439380  +
mov [esp+158h+var_154] offset asc_47A6D3 +
xor ebx ebx +
mov [esp+158h+var_158] 4 +
call sub_401740  +
jmp loc_4392AA  +
call ebx  +
lea edx [ebp+var_128] +
mov [esp+158h+var_140] 0 +
mov [esp+158h+var_144] 0 +
mov [esp+158h+var_148] edx +
mov [esp+158h+var_14C] 400h +
mov [esp+158h+var_154] 0 +
mov [esp+158h+var_150] eax +
mov [esp+158h+var_158] 1300h +
call ds:FormatMessageA  +
mov eax [ebp+var_128] +
sub esp 1Ch +
mov [esp+158h+var_14C] eax +
mov eax ds:dword_486584 +
mov [esp+158h+var_154] offset aSSer_recvSelec +
mov [esp+158h+var_150] eax +
mov [esp+158h+var_158] 0 +
call sub_401740  +
mov eax [ebp+var_128] +
mov [esp+158h+var_158] eax +
call ds:LocalFree  +
sub esp 4 +
mov [esp+158h+var_158] 1 +
call exit  +
mov eax ds:dword_486584 +
mov [esp+158h+var_154] offset aSNet_recvConne +
mov [esp+158h+var_158] 0 +
mov [esp+158h+var_150] eax +
call sub_401740  +
mov [esp+158h+var_158] 1 +
call exit  +
call ds:WSAGetLastError  +
lea edx [ebp+var_128] +
mov [esp+158h+var_140] 0 +
mov [esp+158h+var_144] 0 +
mov [esp+158h+var_148] edx +
mov [esp+158h+var_14C] 400h +
mov [esp+158h+var_154] 0 +
mov [esp+158h+var_150] eax +
mov [esp+158h+var_158] 1300h +
call ds:FormatMessageA  +
mov eax [ebp+var_128] +
sub esp 1Ch +
mov [esp+158h+var_14C] eax +
mov eax ds:dword_486584 +
mov [esp+158h+var_154] offset aSSer_recvReadE +
mov [esp+158h+var_150] eax +
jmp loc_43943C  +
***
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov ebx [ebp+arg_4] +
cmp ds:byte_4850D8 0 +
jnz loc_439630  +
mov eax [ebp+arg_0] +
mov esi [eax] +
cmp esi 0FFFFFFFFh +
jz loc_4396EA  +
mov edx dword_4611C8 +
mov eax esi +
call sub_438E40  +
lea eax [ebp+var_20] +
mov [esp+48h+var_3C] eax +
mov eax [ebp+arg_8] +
mov [esp+48h+var_38] 0 +
mov [esp+48h+var_44] ebx +
mov [esp+48h+var_48] esi +
mov [esp+48h+var_40] eax +
call ds:ReadFile  +
sub esp 14h +
test eax eax +
jz loc_439645  +
mov edx [ebp+var_20] +
test edx edx +
jz loc_4396C3  +
xor eax eax +
cmp ds:dword_486580 3 +
jg loc_439580  +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ds:dword_486584 +
mov [esp+48h+var_44] offset aSRecv +
mov [esp+48h+var_48] 4 +
mov [esp+48h+var_40] eax +
call sub_401740  +
mov eax [ebp+var_20] +
mov edi ds:isprint +
test eax eax +
jnz loc_4395E9  +
jmp loc_439610  +
mov [esp+48h+var_40] esi +
mov [esp+48h+var_44] offset aC +
mov [esp+48h+var_48] 4 +
call sub_401740  +
mov [esp+48h+var_40] esi +
add ebx 1 +
mov [esp+48h+var_44] offset a02x_1 +
mov [esp+48h+var_48] 4 +
call sub_401740  +
sub [ebp+var_20] 1 +
jz loc_439610  +
movzx esi byte ptr [ebx] +
mov [esp+48h+var_48] esi +
call edi  +
test eax eax +
jnz loc_4395B0  +
mov [esp+48h+var_44] offset a_ +
mov [esp+48h+var_48] 4 +
call sub_401740  +
jmp loc_4395C8  +
mov [esp+48h+var_44] offset asc_47A6D3 +
mov [esp+48h+var_48] 0 +
call sub_401740  +
lea esp [ebp-0Ch] +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ecx [ebp+arg_8] +
mov edx ebx +
mov eax [ebp+arg_0] +
call sub_439170  +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
call ds:GetLastError  +
lea edx [ebp+var_1C] +
mov [esp+48h+var_38] edx +
mov [esp+48h+var_30] 0 +
mov [esp+48h+var_34] 0 +
mov [esp+48h+var_3C] 400h +
mov [esp+48h+var_44] 0 +
mov [esp+48h+var_40] eax +
mov [esp+48h+var_48] 1300h +
call ds:FormatMessageA  +
mov eax [ebp+var_1C] +
sub esp 1Ch +
mov [esp+48h+var_3C] eax +
mov eax ds:dword_486584 +
mov [esp+48h+var_44] offset aSSer_recvReadE +
mov [esp+48h+var_48] 0 +
mov [esp+48h+var_40] eax +
call sub_401740  +
mov eax [ebp+var_1C] +
mov [esp+48h+var_48] eax +
call ds:LocalFree  +
mov eax 0FFFFFFFFh +
sub esp 4 +
jmp loc_439578  +
mov eax ds:dword_486584 +
mov [esp+48h+var_44] offset aSSer_recvPro_0 +
mov [esp+48h+var_48] 2 +
mov [esp+48h+var_40] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_439578  +
mov eax ds:dword_486584 +
mov [esp+48h+var_44] offset aSSer_readPortN +
mov [esp+48h+var_48] 0 +
mov [esp+48h+var_40] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_439578  +
***
jmp sub_439720  +
***
push edi  +
push esi  +
push ebx  +
sub esp 4Ch +
mov ebx [ebp+arg_0] +
cmp ds:byte_4850D8 0 +
mov edi [ebp+arg_8] +
jnz loc_4397A7  +
mov eax [ebx] +
cmp eax 0FFFFFFFFh +
mov [ebp+var_30] eax +
jz loc_4399C1  +
test edi edi +
jz loc_43979D  +
cmp ds:dword_486580 3 +
jg loc_439810  +
mov esi [ebp+var_30] +
mov edx 1F4h +
mov eax esi +
call sub_438E40  +
lea eax [ebp+var_1C] +
mov [esp+58h+var_4C] eax +
mov eax [ebp+arg_4] +
mov [esp+58h+var_48] 0 +
mov [esp+58h+var_50] edi +
mov [esp+58h+var_58] esi +
mov [esp+58h+var_54] eax +
call ds:WriteFile  +
sub esp 14h +
test eax eax +
jz loc_439992  +
cmp [ebp+var_1C] edi +
jnz loc_4398BC  +
xor eax eax +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx] +
test eax eax +
js loc_439A68  +
test edi edi +
jz loc_43979D  +
cmp ds:dword_486580 3 +
jg loc_4398E3  +
mov edx ebx +
mov ebx [ebp+arg_4] +
mov esi 400h +
lea esi [esi+0] +
cmp edi 400h +
mov eax esi +
cmovbe eax edi +
mov [esp+58h+var_4C] 0 +
mov [esp+58h+var_50] eax +
mov [esp+58h+var_54] ebx +
mov eax [edx] +
mov [ebp+var_2C] edx +
mov [esp+58h+var_58] eax +
call ds:send  +
mov edx [ebp+var_2C] +
sub esp 10h +
test eax eax +
js loc_4399E8  +
add ebx eax +
sub edi eax +
jnz loc_4397D0  +
jmp loc_43979D  +
mov eax ds:dword_486584 +
mov [esp+58h+var_54] offset aSSend +
mov [esp+58h+var_58] 4 +
mov [esp+58h+var_50] eax +
call sub_401740  +
mov eax ds:isprint +
mov esi [ebp+arg_4] +
mov [ebp+arg_8] edi +
mov [ebp+var_2C] eax +
jmp loc_439878  +
mov [esp+58h+var_50] ebx +
mov [esp+58h+var_54] offset aC +
mov [esp+58h+var_58] 4 +
call sub_401740  +
mov [esp+58h+var_50] ebx +
add esi 1 +
mov [esp+58h+var_54] offset a02x_1 +
mov [esp+58h+var_58] 4 +
call sub_401740  +
sub edi 1 +
jz loc_4398A0  +
movzx ebx byte ptr [esi] +
mov eax [ebp+var_2C] +
mov [esp+58h+var_58] ebx +
call eax  +
test eax eax +
jnz loc_439840  +
mov [esp+58h+var_54] offset a_ +
mov [esp+58h+var_58] 4 +
call sub_401740  +
jmp loc_439858  +
mov [esp+58h+var_54] offset asc_47A6D3 +
mov edi [ebp+arg_8] +
mov [esp+58h+var_58] 0 +
call sub_401740  +
jmp loc_439757  +
mov eax ds:dword_486584 +
mov [esp+58h+var_54] offset aSSer_sendSizeS +
mov [esp+58h+var_58] 0 +
mov [esp+58h+var_50] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_43979F  +
mov eax ds:dword_486584 +
mov [esp+58h+var_54] offset aSSend +
mov [esp+58h+var_58] 4 +
mov [esp+58h+var_50] eax +
call sub_401740  +
mov eax [ebp+arg_4] +
mov ecx ds:isprint +
mov [ebp+arg_0] ebx +
mov [ebp+arg_8] edi +
mov esi eax +
mov [ebp+var_2C] ecx +
jmp loc_43994E  +
mov [esp+58h+var_50] ebx +
mov [esp+58h+var_54] offset aC +
mov [esp+58h+var_58] 4 +
call sub_401740  +
mov [esp+58h+var_50] ebx +
add esi 1 +
mov [esp+58h+var_54] offset a02x_1 +
mov [esp+58h+var_58] 4 +
call sub_401740  +
sub edi 1 +
jz loc_439973  +
movzx ebx byte ptr [esi] +
mov eax [ebp+var_2C] +
mov [esp+58h+var_58] ebx +
call eax  +
test eax eax +
jnz loc_439916  +
mov [esp+58h+var_54] offset a_ +
mov [esp+58h+var_58] 4 +
call sub_401740  +
jmp loc_43992E  +
mov [esp+58h+var_54] offset asc_47A6D3 +
mov ebx [ebp+arg_0] +
mov [esp+58h+var_58] 4 +
mov edi [ebp+arg_8] +
call sub_401740  +
jmp loc_4397C2  +
mov eax ds:dword_486584 +
mov [esp+58h+var_4C] offset aSorryNoInfoAva +
mov [esp+58h+var_54] offset aSSer_sendWrite +
mov [esp+58h+var_58] 0 +
mov [esp+58h+var_50] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_43979F  +
mov eax ds:dword_486584 +
mov [esp+58h+var_54] offset aSSer_sendPortN +
mov [esp+58h+var_58] 0 +
mov [esp+58h+var_50] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_43979F  +
call ds:WSAGetLastError  +
lea edx [ebp+var_1C] +
mov [esp+58h+var_48] edx +
mov [esp+58h+var_40] 0 +
mov [esp+58h+var_44] 0 +
mov [esp+58h+var_4C] 400h +
mov [esp+58h+var_54] 0 +
mov [esp+58h+var_50] eax +
mov [esp+58h+var_58] 1300h +
call ds:FormatMessageA  +
mov eax [ebp+var_1C] +
sub esp 1Ch +
mov [esp+58h+var_4C] eax +
mov eax ds:dword_486584 +
mov [esp+58h+var_54] offset aSNet_sendSendE +
mov [esp+58h+var_58] 0 +
mov [esp+58h+var_50] eax +
call sub_401740  +
mov eax [ebp+var_1C] +
mov [esp+58h+var_58] eax +
call ds:LocalFree  +
sub esp 4 +
mov [esp+58h+var_58] 1 +
call exit  +
mov eax ds:dword_486584 +
mov [esp+58h+var_54] offset aSNet_sendConne +
mov [esp+58h+var_58] 1 +
mov [esp+58h+var_50] eax +
call sub_401740  +
mov [esp+58h+var_58] 1 +
call exit  +
***
jmp sub_439AA0  +
***
sub esp 18h +
mov eax [ebp+arg_0] +
cmp ds:byte_4850D8 0 +
mov eax [eax] +
jnz loc_439AC7  +
cmp eax 0FFFFFFFFh +
jz locret_439AC5  +
mov [esp+18h+var_18] eax +
call ds:CloseHandle  +
sub esp 4 +
leave   +
retn   +
mov [esp+18h+var_18] eax +
call ds:closesocket  +
mov eax ds:WSACleanup +
sub esp 4 +
leave   +
jmp eax  +
***
push edi  +
push esi  +
push ebx  +
mov ebx eax +
sub esp 1ECh +
lea eax [ebp+var_1A8] +
mov [ebp+var_1D0] edx +
mov [esp+1F8h+var_1F4] eax +
mov [esp+1F8h+var_1F8] 2 +
call ds:WSAStartup  +
sub esp 8 +
test eax eax +
jnz loc_439CC0  +
mov [esp+1F8h+var_1F8] ebx +
call _strdup  +
test eax eax +
mov ebx eax +
jz loc_439E05  +
mov [esp+1F8h+var_1F4] 3Ah +
mov [esp+1F8h+var_1F8] eax +
call strchr  +
test eax eax +
mov edi eax +
jz loc_439CE4  +
cmp ebx eax +
jz loc_439CE4  +
lea edx [eax+1] +
mov byte ptr [eax] 0 +
lea eax [ebp+var_1BC] +
mov [esp+1F8h+var_1F8] edx +
mov [esp+1F8h+var_1F0] 0Ah +
mov [esp+1F8h+var_1F4] eax +
mov [ebp+var_1CC] edx +
call strtoul  +
mov edx [ebp+var_1CC] +
cmp byte ptr [edi+1] 0 +
mov esi eax +
jz loc_439C84  +
mov eax [ebp+var_1BC] +
cmp byte ptr [eax] 0 +
jnz loc_439C84  +
lea eax [esi-1] +
cmp eax 0FFFEh +
ja loc_439C84  +
mov [esp+1F8h+var_1F8] ebx +
call ds:gethostbyname  +
sub esp 4 +
test eax eax +
mov edi eax +
jz loc_439DEB  +
mov [esp+1F8h+var_1F8] ebx +
call free  +
mov [esp+1F8h+var_1F0] 0 +
mov [esp+1F8h+var_1F4] 1 +
mov [esp+1F8h+var_1F8] 2 +
call ds:socket  +
sub esp 0Ch +
test eax eax +
mov ebx eax +
js loc_439D87  +
lea edx [ebp+var_1B8] +
mov eax 2 +
mov [ebp+var_1CC] edx +
mov [ebp+var_1B8] 0 +
mov [ebp+var_1B4] 0 +
mov [ebp+var_1B0] 0 +
mov [ebp+var_1AC] 0 +
mov word ptr [ebp+var_1B8] ax +
mov [esp+1F8h+var_1F8] esi +
call ds:htons  +
mov edx [ebp+var_1CC] +
mov word ptr [ebp+var_1B8+2] ax +
mov eax [edi+0Ch] +
sub esp 4 +
mov eax [eax] +
mov eax [eax] +
mov [esp+1F8h+var_1F0] 10h +
mov [esp+1F8h+var_1F4] edx +
mov [esp+1F8h+var_1F8] ebx +
mov [ebp+var_1B4] eax +
call ds:connect  +
sub esp 0Ch +
test eax eax +
jnz loc_439D00  +
mov ecx [ebp+var_1D0] +
mov ds:byte_4850D8 1 +
mov [ecx] ebx +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ds:dword_486584 +
mov [esp+1F8h+var_1EC] edx +
mov [esp+1F8h+var_1F4] offset aSNet_openBadPo +
mov [esp+1F8h+var_1F0] eax +
mov [esp+1F8h+var_1F8] 0 +
call sub_401740  +
mov [esp+1F8h+var_1F8] ebx +
call free  +
lea esp [ebp-0Ch] +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ds:dword_486584 +
mov [esp+1F8h+var_1F4] offset aSNet_openWsast +
mov [esp+1F8h+var_1F8] 0 +
mov [esp+1F8h+var_1F0] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_439C7C  +
mov eax ds:dword_486584 +
mov [esp+1F8h+var_1EC] ebx +
mov [esp+1F8h+var_1F4] offset aSNet_openMangl +
mov [esp+1F8h+var_1F0] eax +
jmp loc_439C99  +
call ds:WSAGetLastError  +
lea edx [ebp+var_1C0] +
mov [esp+1F8h+var_1E0] 0 +
mov [esp+1F8h+var_1E4] 0 +
mov [esp+1F8h+var_1E8] edx +
mov [esp+1F8h+var_1EC] 400h +
mov [esp+1F8h+var_1F4] 0 +
mov [esp+1F8h+var_1F0] eax +
mov [esp+1F8h+var_1F8] 1300h +
call ds:FormatMessageA  +
mov eax [ebp+var_1C0] +
sub esp 1Ch +
mov [esp+1F8h+var_1EC] eax +
mov eax ds:dword_486584 +
mov [esp+1F8h+var_1F4] offset aSNet_openConne +
mov [esp+1F8h+var_1F0] eax +
mov [esp+1F8h+var_1F8] 0 +
call sub_401740  +
mov eax [ebp+var_1C0] +
mov [esp+1F8h+var_1F8] eax +
call ds:LocalFree  +
mov eax 0FFFFFFFFh +
sub esp 4 +
jmp loc_439C7C  +
call ds:WSAGetLastError  +
lea edx [ebp+var_1C0] +
mov [esp+1F8h+var_1E0] 0 +
mov [esp+1F8h+var_1E4] 0 +
mov [esp+1F8h+var_1E8] edx +
mov [esp+1F8h+var_1EC] 400h +
mov [esp+1F8h+var_1F4] 0 +
mov [esp+1F8h+var_1F0] eax +
mov [esp+1F8h+var_1F8] 1300h +
call ds:FormatMessageA  +
mov eax [ebp+var_1C0] +
sub esp 1Ch +
mov [esp+1F8h+var_1EC] eax +
mov eax ds:dword_486584 +
mov [esp+1F8h+var_1F4] offset aSNet_openCanno +
mov [esp+1F8h+var_1F0] eax +
jmp loc_439D5F  +
mov eax ds:dword_486584 +
mov [esp+1F8h+var_1EC] ebx +
mov [esp+1F8h+var_1F4] offset aSNet_openUnkno +
mov [esp+1F8h+var_1F0] eax +
jmp loc_439C99  +
mov eax ds:dword_486584 +
mov [esp+1F8h+var_1F4] offset aSNet_openOutOf +
mov [esp+1F8h+var_1F8] 0 +
mov [esp+1F8h+var_1F0] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_439C7C  +
***
mov ebp esp +
push edi  +
mov edi offset aNet +
push esi  +
push ebx  +
sub esp 3Ch +
mov ebx [ebp+arg_0] +
mov esi ebx +
cmps   +
jz loc_439F70  +
mov [esp+48h+var_40] 3 +
mov [esp+48h+var_44] offset aCom +
mov [esp+48h+var_48] ebx +
call ds:_strnicmp  +
test eax eax +
jz loc_439F30  +
xor edi edi +
mov [esp+48h+var_30] 0 +
mov [esp+48h+var_34] 80h +
mov [esp+48h+var_38] 3 +
mov [esp+48h+var_3C] 0 +
mov [esp+48h+var_40] 0 +
mov [esp+48h+var_44] 0C0000000h +
mov [esp+48h+var_48] ebx +
call ds:CreateFileA  +
sub esp 1Ch +
cmp eax 0FFFFFFFFh +
mov esi eax +
jz loc_43A02E  +
mov [esp+48h+var_40] 400h +
mov [esp+48h+var_44] 400h +
mov [esp+48h+var_48] eax +
call ds:SetupComm  +
sub esp 0Ch +
test eax eax +
jz loc_439F87  +
mov eax [ebp+arg_C] +
mov [eax] esi +
mov eax [ebp+arg_4] +
mov [esp+48h+var_44] eax +
mov eax [ebp+arg_C] +
mov [esp+48h+var_48] eax +
call sub_439000  +
test eax eax +
jnz loc_439FC0  +
mov [ebp+var_2C] eax +
xor edx edx +
mov eax esi +
call sub_438E40  +
mov ecx [ebp+var_2C] +
test eax eax +
jz loc_439FF7  +
test edi edi +
jz loc_439F26  +
mov [esp+48h+var_48] edi +
mov [ebp+var_2C] ecx +
call free  +
mov ecx [ebp+var_2C] +
lea esp [ebp-0Ch] +
mov eax ecx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+48h+var_48] ebx +
call strlen  +
add eax 5 +
mov [esp+48h+var_48] eax +
call malloc  +
test eax eax +
mov edi eax +
jz loc_43A0B0  +
mov dword ptr [eax] 5C2E5C5Ch +
lea eax [eax+4] +
mov [esp+48h+var_44] ebx +
mov ebx edi +
mov [esp+48h+var_48] eax +
call strcpy  +
jmp loc_439E73  +
mov edx [ebp+arg_C] +
lea eax [ebx+4] +
call sub_439AE0  +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
mov ecx eax +
mov eax ecx +
retn   +
mov [esp+48h+var_48] esi +
call ds:CloseHandle  +
mov eax ds:dword_486584 +
sub esp 4 +
mov [esp+48h+var_3C] ebx +
mov [esp+48h+var_40] eax +
mov [esp+48h+var_44] offset aSSer_openCan_1 +
mov [esp+48h+var_48] 0 +
call sub_401740  +
mov ecx 0FFFFFFFFh +
jmp loc_439F26  +
mov [esp+48h+var_48] esi +
call ds:CloseHandle  +
mov eax ds:dword_486584 +
sub esp 4 +
mov [esp+48h+var_3C] ebx +
mov [esp+48h+var_40] eax +
mov [esp+48h+var_44] offset aSSer_openCan_2 +
mov [esp+48h+var_48] 0 +
call sub_401740  +
mov ecx 0FFFFFFFFh +
jmp loc_439F26  +
mov [esp+48h+var_48] esi +
call ds:CloseHandle  +
mov eax ds:dword_486584 +
sub esp 4 +
mov [esp+48h+var_3C] ebx +
mov [esp+48h+var_40] eax +
mov [esp+48h+var_44] offset aSSer_openCan_3 +
mov [esp+48h+var_48] 0 +
call sub_401740  +
mov ecx 0FFFFFFFFh +
jmp loc_439F26  +
call ds:GetLastError  +
lea edx [ebp+var_1C] +
mov [esp+48h+var_38] edx +
mov [esp+48h+var_30] 0 +
mov [esp+48h+var_34] 0 +
mov [esp+48h+var_3C] 400h +
mov [esp+48h+var_44] 0 +
mov [esp+48h+var_40] eax +
mov [esp+48h+var_48] 1300h +
call ds:FormatMessageA  +
mov eax [ebp+var_1C] +
sub esp 1Ch +
mov [esp+48h+var_38] eax +
mov eax ds:dword_486584 +
mov [esp+48h+var_3C] ebx +
mov [esp+48h+var_44] offset aSSer_openCan_4 +
mov [esp+48h+var_48] 0 +
mov [esp+48h+var_40] eax +
call sub_401740  +
mov eax [ebp+var_1C] +
mov [esp+48h+var_48] eax +
call ds:LocalFree  +
mov ecx 0FFFFFFFFh +
sub esp 4 +
jmp loc_439F26  +
mov eax ds:dword_486584 +
mov [esp+48h+var_44] offset aSSer_openOutOf +
mov [esp+48h+var_48] 0 +
mov [esp+48h+var_40] eax +
call sub_401740  +
mov [esp+48h+var_48] 1 +
call exit  +
***
push edi  +
push esi  +
xor esi esi +
push ebx  +
mov ebx eax +
sub esp 1Ch +
movzx eax dl +
mov [esp+28h+var_1C] eax +
mov eax [esp+28h+var_1C] +
mov ecx ebp +
mov edx [ebx+934h] +
mov [esp+28h+var_24] 5 +
mov [esp+28h+var_28] ebx +
sar eax cl +
and eax 1 +
mov [esp+28h+var_20] eax +
call edx  +
mov eax [ebx+934h] +
mov [esp+28h+var_20] 1 +
mov [esp+28h+var_24] 4 +
mov [esp+28h+var_28] ebx +
call eax  +
mov eax [ebx+938h] +
mov [esp+28h+var_24] 6 +
mov [esp+28h+var_28] ebx +
call eax  +
mov [esp+28h+var_20] 0 +
mov [esp+28h+var_24] 4 +
mov [esp+28h+var_28] ebx +
mov edi eax +
mov eax [ebx+934h] +
call eax  +
mov eax edi +
mov ecx ebp +
movzx edi al +
sub ebp 1 +
shl edi cl +
or esi edi +
cmp ebp 0FFFFFFFFh +
jnz loc_43A0F7  +
add esp 1Ch +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
jmp sub_43A190  +
***
mov ebx eax +
sub esp 14h +
mov eax [eax+934h] +
mov [esp+14h+var_14] ebx +
mov [esp+14h+var_C] 1 +
mov [esp+14h+var_10] 4 +
call eax  +
mov eax [ebx+938h] +
mov [esp+14h+var_14] ebx +
mov [esp+14h+var_10] 6 +
call eax  +
mov [esp+14h+var_14] ebx +
mov [esp+14h+var_C] 0 +
mov [esp+14h+var_10] 4 +
mov esi eax +
mov eax [ebx+934h] +
call eax  +
mov eax esi +
add esp 14h +
movzx eax al +
pop ebx  +
pop esi  +
retn   +
***
sub esp 1Ch +
mov [esp+1Ch+var_10] eax +
mov eax ds:dword_486584 +
mov [esp+1Ch+var_18] offset aSErrorNoPinHas +
mov [esp+1Ch+var_1C] 0 +
mov [esp+1Ch+var_14] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
add esp 1Ch +
retn   +
***
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov eax ds:dword_4850E8 +
mov edi [ebp+arg_0] +
test eax eax +
jnz loc_43A260  +
imul edi ds:dword_4850EC +
mov [ebp+var_20] edi +
mov eax [ebp+var_20] +
test eax eax +
jz loc_43A256  +
mov eax [ebp+var_20] +
sub eax 1 +
mov [ebp+var_20] eax +
mov eax [ebp+var_20] +
test eax eax +
jnz loc_43A246  +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
lea ebx [ebp+var_20] +
mov esi ds:QueryPerformanceCounter +
mov [esp+48h+var_48] ebx +
call esi  +
mov eax [ebp+var_20] +
mov edx [ebp+var_1C] +
mov ecx ds:dword_4850E4 +
mov [ebp+var_38] eax +
mov eax edi +
mov [ebp+var_34] edx +
imul ecx edi +
sub esp 4 +
mul  ds:dword_4850E0 +
mov [esp+48h+var_40] 0F4240h +
mov [esp+48h+var_3C] 0 +
add edx ecx +
mov [esp+48h+var_48] eax +
mov [esp+48h+var_44] edx +
call sub_457FB0  +
mov [ebp+var_30] eax +
mov eax [ebp+var_38] +
mov [ebp+var_2C] edx +
mov edx [ebp+var_34] +
add [ebp+var_30] eax +
adc [ebp+var_2C] edx +
cmp edx [ebp+var_2C] +
jge loc_43A2E5  +
mov [esp+48h+var_48] ebx +
call esi  +
mov eax [ebp+var_2C] +
sub esp 4 +
cmp eax [ebp+var_1C] +
jl loc_43A256  +
jg loc_43A2C3  +
mov eax [ebp+var_30] +
cmp eax [ebp+var_20] +
ja loc_43A2C3  +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
jg loc_43A256  +
mov eax [ebp+var_30] +
cmp [ebp+var_38] eax +
jnb loc_43A256  +
jmp loc_43A2C3  +
***
push edi  +
push esi  +
xor esi esi +
push ebx  +
sub esp 1Ch +
mov ebx [esp+28h+arg_0] +
mov edi [esp+28h+arg_4] +
mov eax [ebx+934h] +
mov [esp+28h+var_20] 0 +
mov [esp+28h+var_24] 5 +
mov [esp+28h+var_28] ebx +
call eax  +
mov eax ebx +
call sub_43A190  +
mov eax edi +
movzx edi al +
lea esi [esi+0] +
mov ecx esi +
mov eax edi +
mov edx [ebx+934h] +
sar eax cl +
add esi 1 +
and eax 1 +
xor ebp eax +
movzx eax al +
mov [esp+28h+var_20] eax +
mov [esp+28h+var_24] 5 +
mov [esp+28h+var_28] ebx +
call edx  +
mov eax ebx +
call sub_43A190  +
cmp esi 8 +
jnz loc_43A340  +
mov edx ebp +
mov eax [ebx+934h] +
movzx ebp dl +
mov [esp+28h+var_20] ebp +
mov [esp+28h+var_28] ebx +
mov [esp+28h+var_24] 5 +
call eax  +
mov eax ebx +
call sub_43A190  +
mov eax [ebx+934h] +
mov [esp+28h+var_28] ebx +
mov [esp+28h+var_20] 1 +
mov [esp+28h+var_24] 5 +
call eax  +
mov eax ebx +
call sub_43A190  +
add esp 1Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp sub_43A190  +
***
push esi  +
push ebx  +
mov ebx 0Ah +
sub esp 1Ch +
mov esi [esp+1Ch+arg_0] +
mov eax [esi+934h] +
mov [esp+1Ch+var_14] 1 +
mov [esp+1Ch+var_18] 5 +
mov [esp+1Ch+var_1C] esi +
call eax  +
nop   +
lea esi [esi+0] +
mov eax esi +
call sub_43A190  +
test al al +
jz loc_43A431  +
sub ebx 1 +
jnz loc_43A400  +
mov [esp+1Ch+var_18] offset aBitbang_tpi_rx +
mov [esp+1Ch+var_1C] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
xor edi edi +
xor ebp ebp +
xor ebx ebx +
mov eax esi +
call sub_43A190  +
mov ecx ebx +
add ebx 1 +
xor edi eax +
movzx eax al +
shl eax cl +
or ebp eax +
cmp ebx 8 +
jnz loc_43A437  +
mov eax esi +
call sub_43A190  +
mov edx edi +
movzx edi dl +
cmp eax edi +
jnz loc_43A498  +
mov eax esi +
call sub_43A190  +
mov ebx eax +
mov eax esi +
call sub_43A190  +
and ebx eax +
mov eax ebp +
and ebx 1 +
movzx eax al +
jnz loc_43A429  +
mov [esp+1Ch+var_18] offset aBitbang_tpi__0 +
mov [esp+1Ch+var_1C] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_43A429  +
mov [esp+1Ch+var_18] offset aBitbang_tpi__1 +
mov [esp+1Ch+var_1C] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_43A429  +
***
sub esp 1Ch +
xor ecx ecx +
mov eax [esp+1Ch+arg_0] +
cmp [esp+1Ch+arg_4] 0 +
mov edx [eax+934h] +
setz cl  +
mov [esp+1Ch+var_14] ecx +
mov [esp+1Ch+var_18] 8 +
mov [esp+1Ch+var_1C] eax +
call edx  +
xor eax eax +
add esp 1Ch +
retn   +
***
sub esp 1Ch +
xor ecx ecx +
mov eax [esp+1Ch+arg_0] +
cmp [esp+1Ch+arg_4] 0 +
mov edx [eax+934h] +
setz cl  +
mov [esp+1Ch+var_14] ecx +
mov [esp+1Ch+var_18] 7 +
mov [esp+1Ch+var_1C] eax +
call edx  +
xor eax eax +
add esp 1Ch +
retn   +
***
sub esp 1Ch +
xor ecx ecx +
mov eax [esp+1Ch+arg_0] +
cmp [esp+1Ch+arg_4] 0 +
mov edx [eax+934h] +
setz cl  +
mov [esp+1Ch+var_14] ecx +
mov [esp+1Ch+var_18] 9 +
mov [esp+1Ch+var_1C] eax +
call edx  +
xor eax eax +
add esp 1Ch +
retn   +
***
sub esp 1Ch +
xor ecx ecx +
mov eax [esp+1Ch+arg_0] +
cmp [esp+1Ch+arg_4] 0 +
mov edx [eax+934h] +
setz cl  +
mov [esp+1Ch+var_14] ecx +
mov [esp+1Ch+var_18] 0Ah +
mov [esp+1Ch+var_1C] eax +
call edx  +
xor eax eax +
add esp 1Ch +
retn   +
***
push esi  +
push ebx  +
xor ebx ebx +
sub esp 1Ch +
mov ebp [esp+1Ch+arg_0] +
mov edi [esp+1Ch+arg_4] +
mov esi [esp+1Ch+arg_8] +
movzx edx byte ptr [edi+ebx] +
mov eax ebp +
call sub_43A0E0  +
mov [esi+ebx] al +
add ebx 1 +
cmp ebx 4 +
jnz loc_43A595  +
cmp ds:dword_486580 4 +
jg loc_43A5C0  +
add esp 1Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+1Ch+var_18] offset aBitbang_cmd +
xor bl bl +
mov [esp+1Ch+var_1C] 2 +
call sub_401740  +
movzx eax byte ptr [edi+ebx] +
add ebx 1 +
mov [esp+1Ch+var_18] offset a02x_7 +
mov [esp+1Ch+var_1C] 2 +
mov [esp+1Ch+var_14] eax +
call sub_401740  +
cmp ebx 4 +
jnz loc_43A5D6  +
mov [esp+1Ch+var_18] offset asc_47AA9A +
xor bl bl +
mov [esp+1Ch+var_1C] 2 +
call sub_401740  +
movzx eax byte ptr [esi+ebx] +
add ebx 1 +
mov [esp+1Ch+var_18] offset a02x_7 +
mov [esp+1Ch+var_1C] 2 +
mov [esp+1Ch+var_14] eax +
call sub_401740  +
cmp ebx 4 +
jnz loc_43A610  +
mov [esp+1Ch+var_18] offset asc_47AA9F +
mov [esp+1Ch+var_1C] 2 +
call sub_401740  +
add esp 1Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov ebx [esp+1Ch+arg_0] +
mov edi [esp+1Ch+arg_8] +
mov eax [ebx+8C0h] +
mov [esp+1Ch+var_18] 1 +
mov esi edi +
mov [esp+1Ch+var_1C] ebx +
call eax  +
mov ebp [esp+1Ch+arg_4] +
add esi ebp +
test edi edi +
jle loc_43A6A7  +
nop   +
movzx eax byte ptr [ebp+0] +
add ebp 1 +
mov [esp+1Ch+var_1C] ebx +
mov [esp+1Ch+var_18] eax +
call sub_43A300  +
cmp ebp esi +
jnz loc_43A690  +
mov ebp [esp+1Ch+arg_C] +
mov esi [esp+1Ch+arg_10] +
mov edx [esp+1Ch+arg_10] +
add esi ebp +
test edx edx +
jg loc_43A6CA  +
jmp loc_43A6E1  +
mov [ebp+0] al +
add ebp 1 +
cmp ebp esi +
jz loc_43A6E1  +
mov [esp+1Ch+var_1C] ebx +
call sub_43A3D0  +
cmp eax 0FFFFFFFFh +
jnz loc_43A6C0  +
mov [esp+1Ch+var_10] 0FFFFFFFFh +
jmp loc_43A6E9  +
mov [esp+1Ch+var_10] 0 +
cmp ds:dword_486580 1 +
jle loc_43A796  +
mov [esp+1Ch+var_18] offset aBitbang_cmd_tp +
mov [esp+1Ch+var_1C] 2 +
call sub_401740  +
mov ebp [esp+1Ch+arg_4] +
test edi edi +
lea esi [ebp+edi+0] +
jle loc_43A739  +
movzx eax byte ptr [ebp+0] +
add ebp 1 +
mov [esp+1Ch+var_18] offset a02x_7 +
mov [esp+1Ch+var_1C] 2 +
mov [esp+1Ch+var_14] eax +
call sub_401740  +
cmp ebp esi +
jnz loc_43A716  +
mov [esp+1Ch+var_18] offset asc_47AA9A +
mov [esp+1Ch+var_1C] 2 +
call sub_401740  +
mov edi [esp+1Ch+arg_C] +
mov esi [esp+1Ch+arg_10] +
mov eax [esp+1Ch+arg_10] +
add esi edi +
test eax eax +
jle loc_43A782  +
nop   +
movzx eax byte ptr [edi] +
add edi 1 +
mov [esp+1Ch+var_18] offset a02x_7 +
mov [esp+1Ch+var_1C] 2 +
mov [esp+1Ch+var_14] eax +
call sub_401740  +
cmp edi esi +
jnz loc_43A760  +
mov [esp+1Ch+var_18] offset asc_47AA9F +
mov [esp+1Ch+var_1C] 2 +
call sub_401740  +
mov eax [ebx+8C0h] +
mov [esp+1Ch+var_1C] ebx +
mov [esp+1Ch+var_18] 0 +
call eax  +
mov eax [esp+1Ch+var_10] +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push esi  +
xor esi esi +
push ebx  +
sub esp 1Ch +
mov ebx [esp+20h+arg_0] +
mov ebp [esp+20h+arg_4] +
mov edi [esp+20h+arg_8] +
mov eax [ebx+934h] +
mov [esp+20h+var_18] 0 +
mov [esp+20h+var_1C] 9 +
mov [esp+20h+var_20] ebx +
call eax  +
mov edx [esp+20h+arg_C] +
test edx edx +
jle loc_43A810  +
movzx edx byte ptr [ebp+esi+0] +
mov eax ebx +
call sub_43A0E0  +
mov [edi+esi] al +
add esi 1 +
cmp esi [esp+20h+arg_C] +
jnz loc_43A7F8  +
mov eax [ebx+934h] +
mov [esp+20h+var_18] 1 +
mov [esp+20h+var_1C] 9 +
mov [esp+20h+var_20] ebx +
call eax  +
cmp ds:dword_486580 1 +
jle loc_43A8D6  +
mov [esp+20h+var_1C] offset aBitbang_cmd +
mov [esp+20h+var_20] 2 +
call sub_401740  +
mov eax [esp+20h+arg_C] +
test eax eax +
jle loc_43A8E0  +
mov ebx [esp+20h+arg_C] +
add ebx ebp +
nop   +
movzx eax byte ptr [ebp+0] +
add ebp 1 +
mov [esp+20h+var_1C] offset a02x_7 +
mov [esp+20h+var_20] 2 +
mov [esp+20h+var_18] eax +
call sub_401740  +
cmp ebp ebx +
jnz loc_43A860  +
mov [esp+20h+var_1C] offset asc_47AA9A +
mov [esp+20h+var_20] 2 +
call sub_401740  +
mov esi [esp+20h+arg_C] +
add esi edi +
lea esi [esi+0] +
movzx eax byte ptr [edi] +
add edi 1 +
mov [esp+20h+var_1C] offset a02x_7 +
mov [esp+20h+var_20] 2 +
mov [esp+20h+var_18] eax +
call sub_401740  +
cmp edi esi +
jnz loc_43A8A0  +
mov [esp+20h+var_1C] offset asc_47AA9F +
mov [esp+20h+var_20] 2 +
call sub_401740  +
add esp 1Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+20h+var_1C] offset asc_47AA9A +
mov [esp+20h+var_20] 2 +
call sub_401740  +
jmp loc_43A8C2  +
***
push ebx  +
sub esp 20h +
mov esi [esp+20h+arg_4] +
mov ebx [esp+20h+arg_0] +
test byte ptr [esi+85h] 8 +
jnz loc_43A9B0  +
mov eax [esi+174h] +
test eax eax +
jz loc_43AA9A  +
mov eax [ebx+8C0h] +
lea edi [esp+20h+var_8] +
mov [esp+20h+var_1C] 1 +
mov [esp+20h+var_20] ebx +
call eax  +
mov eax [esi+174h] +
mov [esp+20h+var_1C] edi +
mov [esp+20h+var_8] 0 +
mov [esp+20h+var_20] eax +
call sub_4075B0  +
lea edx [esp+20h+var_4] +
mov eax [ebx+8ECh] +
mov [esp+20h+var_18] edx +
mov [esp+20h+var_1C] edi +
mov [esp+20h+var_20] ebx +
call eax  +
mov eax [esi+70h] +
mov [esp+20h+var_20] eax +
call sub_459150  +
mov eax [ebx+8C8h] +
mov [esp+20h+var_1C] esi +
xor esi esi +
mov [esp+20h+var_20] ebx +
call eax  +
mov eax [ebx+8C0h] +
mov [esp+20h+var_1C] 0 +
mov [esp+20h+var_20] ebx +
call eax  +
add esp 20h +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov eax [ebx+8C0h] +
mov [esp+20h+var_1C] 1 +
mov [esp+20h+var_20] ebx +
call eax  +
mov [esp+20h+var_20] ebx +
call sub_403B40  +
test eax eax +
jnz loc_43A9C3  +
mov [esp+20h+var_1C] 0F3h +
mov [esp+20h+var_20] ebx +
call sub_43A300  +
mov [esp+20h+var_1C] 10h +
mov [esp+20h+var_20] ebx +
call sub_43A300  +
mov [esp+20h+var_1C] offset aFlash_17 +
mov [esp+20h+var_20] esi +
call sub_407980  +
test eax eax +
mov edi eax +
jz loc_43AABC  +
mov [esp+20h+var_1C] 68h +
mov [esp+20h+var_20] ebx +
call sub_43A300  +
mov eax [edi+50h] +
mov [esp+20h+var_20] ebx +
or eax 1 +
movzx eax al +
mov [esp+20h+var_1C] eax +
call sub_43A300  +
mov [esp+20h+var_1C] 69h +
mov [esp+20h+var_20] ebx +
call sub_43A300  +
movzx eax byte ptr [edi+51h] +
mov [esp+20h+var_20] ebx +
mov [esp+20h+var_1C] eax +
call sub_43A300  +
mov [esp+20h+var_1C] 60h +
mov [esp+20h+var_20] ebx +
call sub_43A300  +
mov [esp+20h+var_1C] 0FFh +
mov [esp+20h+var_20] ebx +
call sub_43A300  +
nop   +
mov [esp+20h+var_20] ebx +
call sub_403B40  +
test eax eax +
mov esi eax +
jnz loc_43AA70  +
mov eax [ebx+8C0h] +
mov [esp+20h+var_20] ebx +
mov [esp+20h+var_1C] 0 +
call eax  +
add esp 20h +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov [esp+20h+var_18] esi +
mov esi 0FFFFFFFFh +
mov [esp+20h+var_1C] offset aChipEraseIns_4 +
mov [esp+20h+var_20] 0 +
call sub_401740  +
jmp loc_43A9A0  +
mov [esp+20h+var_18] esi +
mov esi 0FFFFFFFFh +
mov [esp+20h+var_1C] offset aNoFlashMemor_0 +
mov [esp+20h+var_20] 0 +
call sub_401740  +
jmp loc_43A9A0  +
***
sub esp 24h +
mov eax [esp+24h+arg_4] +
mov esi [esp+24h+arg_0] +
test byte ptr [eax+85h] 8 +
jnz loc_43AB46  +
mov edx [eax+178h] +
test edx edx +
jz loc_43ABA7  +
lea ebx [esp+24h+var_C] +
mov [esp+24h+var_24] edx +
mov [esp+24h+var_20] ebx +
mov [esp+24h+var_C] 0 +
call sub_4075B0  +
mov eax [esi+8ECh] +
lea edx [esp+24h+var_8] +
mov [esp+24h+var_1C] edx +
mov [esp+24h+var_20] ebx +
mov [esp+24h+var_24] esi +
call eax  +
movzx eax byte ptr [esp+24h+var_C+1] +
cmp byte ptr [esp+24h+var_8+2] al +
jnz loc_43AB9C  +
xor eax eax +
add esp 24h +
pop ebx  +
pop esi  +
retn   +
mov [esp+24h+var_20] 0E0h +
mov ebx 7 +
mov [esp+24h+var_24] esi +
call sub_43A300  +
nop   +
lea esi [esi+0] +
movzx eax ds:byte_47ACEB[ebx] +
sub ebx 1 +
mov [esp+24h+var_24] esi +
mov [esp+24h+var_20] eax +
call sub_43A300  +
cmp ebx 0FFFFFFFFh +
jnz loc_43AB60  +
mov [esp+24h+var_20] 80h +
mov [esp+24h+var_24] esi +
call sub_43A300  +
mov [esp+24h+var_24] esi +
call sub_43A3D0  +
cmp eax 0FFFFFFFFh +
jz loc_43AB9C  +
test al 2 +
jnz loc_43AB3E  +
add esp 24h +
mov eax 0FFFFFFFEh +
pop ebx  +
pop esi  +
retn   +
mov [esp+24h+var_1C] eax +
mov [esp+24h+var_20] offset aProgramEnabl_1 +
mov [esp+24h+var_24] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_43AB40  +
***
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov ebx [ebp+arg_0] +
mov edi [ebp+arg_4] +
mov [esp+28h+var_28] offset dword_4850E0 +
call ds:QueryPerformanceFrequency  +
sub esp 4 +
test eax eax +
jnz loc_43AE70  +
mov eax ds:dword_486584 +
mov [esp+28h+var_24] offset aSUsingGuessedP +
mov [esp+28h+var_28] 2 +
mov [esp+28h+var_20] eax +
call sub_401740  +
mov ds:dword_4850EC 64h +
mov eax [ebx+8D8h] +
mov [esp+28h+var_28] ebx +
call eax  +
mov [esp+28h+var_28] 4E20h +
call sub_459150  +
test byte ptr [edi+85h] 8 +
jz loc_43AD0C  +
mov eax [ebx+8F0h] +
test eax eax +
jz loc_43AF1B  +
mov eax [ebx+934h] +
mov [esp+28h+var_20] 1 +
mov [esp+28h+var_24] 3 +
mov [esp+28h+var_28] ebx +
call eax  +
mov [esp+28h+var_28] 3E8h +
call sub_459150  +
mov [esp+28h+var_24] offset aDoingMosiMisoL +
mov [esp+28h+var_28] 2 +
call sub_401740  +
mov eax [ebx+934h] +
mov [esp+28h+var_20] 0 +
mov [esp+28h+var_24] 5 +
mov [esp+28h+var_28] ebx +
call eax  +
mov eax [ebx+938h] +
mov [esp+28h+var_24] 6 +
mov [esp+28h+var_28] ebx +
call eax  +
test eax eax +
jnz loc_43AEFD  +
mov eax [ebx+934h] +
mov [esp+28h+var_20] 1 +
mov [esp+28h+var_24] 5 +
mov [esp+28h+var_28] ebx +
call eax  +
mov eax [ebx+938h] +
mov [esp+28h+var_24] 6 +
mov [esp+28h+var_28] ebx +
call eax  +
cmp eax 1 +
jnz loc_43AEDF  +
mov [esp+28h+var_24] offset aMosiMisoLinkPr +
mov [esp+28h+var_28] 2 +
call sub_401740  +
mov eax [ebx+934h] +
mov [esp+28h+var_20] 0 +
mov [esp+28h+var_24] 4 +
mov [esp+28h+var_28] ebx +
call eax  +
mov eax [ebx+934h] +
mov [esp+28h+var_20] 0 +
mov [esp+28h+var_24] 3 +
mov [esp+28h+var_28] ebx +
call eax  +
mov [esp+28h+var_28] 4E20h +
call sub_459150  +
test byte ptr [edi+85h] 8 +
jnz loc_43ADD5  +
mov eax [ebx+93Ch] +
mov [esp+28h+var_24] 3 +
mov [esp+28h+var_28] ebx +
call eax  +
mov [esp+28h+var_28] 4E20h +
mov esi 41h +
call sub_459150  +
test byte ptr [edi+85h] 10h +
jz loc_43ADAE  +
jmp loc_43AE9C  +
mov edx [edi+80h] +
mov eax [ebx+93Ch] +
mov [esp+28h+var_28] ebx +
mov [esp+28h+var_24] edx +
call eax  +
sub esi 1 +
jz loc_43AEB5  +
mov eax [ebx+8E0h] +
mov [esp+28h+var_24] edi +
mov [esp+28h+var_28] ebx +
call eax  +
lea edx [eax+1] +
cmp edx 1 +
ja loc_43AD90  +
test eax eax +
jnz loc_43AEB5  +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx+934h] +
mov esi 10h +
mov [esp+28h+var_20] 1 +
mov [esp+28h+var_24] 5 +
mov [esp+28h+var_28] ebx +
call eax  +
mov eax [ebx+93Ch] +
mov [esp+28h+var_24] 4 +
mov [esp+28h+var_28] ebx +
call eax  +
sub esi 1 +
jnz loc_43ADF5  +
mov [esp+28h+var_24] 0C2h +
mov [esp+28h+var_28] ebx +
call sub_43A300  +
mov [esp+28h+var_24] 7 +
mov [esp+28h+var_28] ebx +
call sub_43A300  +
mov [esp+28h+var_24] 8Fh +
mov [esp+28h+var_28] ebx +
call sub_43A300  +
mov [esp+28h+var_28] ebx +
call sub_43A3D0  +
add eax 0FFFFFF80h +
jz loc_43AD6A  +
mov [esp+28h+var_24] offset aTpiirNotCorrec +
mov [esp+28h+var_28] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_43ADCD  +
mov eax ds:dword_486584 +
mov [esp+28h+var_24] offset aSUsingPerforma +
mov [esp+28h+var_28] 2 +
mov ds:dword_4850E8 1 +
mov [esp+28h+var_20] eax +
call sub_401740  +
jmp loc_43AC1E  +
mov eax [ebx+8E0h] +
mov [esp+28h+var_24] edi +
mov [esp+28h+var_28] ebx +
call eax  +
lea esp [ebp-0Ch] +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ds:dword_486584 +
mov [esp+28h+var_24] offset aSAvrDeviceNotR +
mov [esp+28h+var_28] 0 +
mov [esp+28h+var_20] eax +
call sub_401740  +
lea esp [ebp-0Ch] +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+28h+var_24] offset aMosiMiso1Faile +
mov [esp+28h+var_28] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_43ADCD  +
mov [esp+28h+var_24] offset aMosiMiso0Faile +
mov [esp+28h+var_28] 0 +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_43ADCD  +
mov eax ds:dword_486584 +
add ebx 54h +
mov [esp+28h+var_1C] ebx +
mov [esp+28h+var_24] offset aSErrorSProgram +
mov [esp+28h+var_28] 0 +
mov [esp+28h+var_20] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_43ADCD  +
***
mov ebx [esp+18h+arg_0] +
mov eax [ebx+188h] +
test eax eax +
jz loc_43AF91  +
mov eax [ebx+18Ch] +
test eax eax +
jz loc_43AFA6  +
mov ecx [ebx+194h] +
test ecx ecx +
jz loc_43AFBE  +
mov edx [ebx+190h] +
test edx edx +
jz loc_43AFD6  +
mov eax [ebx+8ECh] +
test eax eax +
jz loc_43AFE6  +
xor eax eax +
add esp 18h +
pop ebx  +
retn   +
mov eax offset aAvrReset +
call sub_43A1F0  +
test eax eax +
jns loc_43AF62  +
mov eax 0FFFFFFFFh +
jmp loc_43AF8C  +
mov eax offset aAvrSck +
call sub_43A1F0  +
test eax eax +
js loc_43AF9F  +
mov ecx [ebx+194h] +
test ecx ecx +
jnz loc_43AF76  +
mov eax offset aAvrMiso +
call sub_43A1F0  +
test eax eax +
js loc_43AF9F  +
mov edx [ebx+190h] +
test edx edx +
jnz loc_43AF80  +
mov eax offset aAvrMosi +
call sub_43A1F0  +
test eax eax +
jns loc_43AF80  +
jmp loc_43AF9F  +
mov eax ds:dword_486584 +
mov [esp+18h+var_14] offset aSErrorNoCmdMet +
mov [esp+18h+var_18] 0 +
mov [esp+18h+var_10] eax +
call sub_401740  +
jmp loc_43AF9F  +
***
retn   +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov eax [esp+2Ch+arg_0] +
mov esi [esp+2Ch+arg_8] +
mov eax [eax] +
test eax eax +
mov [esp+2Ch+var_10] eax +
jz loc_43B1F1  +
test esi esi +
jz loc_43B0F1  +
mov edx dword_461220 +
xor ebp ebp +
mov edi ds:dword_485104 +
jmp loc_43B0A5  +
call usb_interrupt_read  +
test eax eax +
js loc_43B1AE  +
mov dword_461220 eax +
mov edx eax +
xor edi edi +
mov eax offset dword_485120 +
mov ecx [esp+2Ch+arg_4] +
mov ebx edx +
sub ebx edi +
cmp ebx esi +
cmova ebx esi +
add ecx ebp +
add edi ebx +
mov [esp+2Ch+var_24] ebx +
add ebp ebx +
mov [esp+2Ch+var_28] eax +
mov [esp+2Ch+var_2C] ecx +
mov [esp+2Ch+var_14] edx +
call memcpy  +
sub esi ebx +
mov ds:dword_485104 edi +
jz loc_43B0F3  +
mov edx [esp+2Ch+var_14] +
cmp edx edi +
lea eax dword_485120[edi] +
jg loc_43B070  +
mov eax [esp+2Ch+arg_0] +
mov ecx [esp+2Ch+arg_0] +
mov ebx [eax+14h] +
mov eax [eax+4] +
mov edx [ecx+10h] +
mov [esp+2Ch+var_1C] 2710h +
test ebx ebx +
mov [esp+2Ch+var_28] eax +
mov eax [esp+2Ch+var_10] +
mov [esp+2Ch+var_20] edx +
mov [esp+2Ch+var_24] offset dword_485120 +
mov [esp+2Ch+var_2C] eax +
jnz loc_43B055  +
call usb_bulk_read  +
jmp loc_43B05A  +
xor ebp ebp +
xor eax eax +
cmp ds:dword_486580 4 +
jg loc_43B106  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ds:dword_486584 +
mov [esp+2Ch+var_28] offset aSRecv_1 +
mov [esp+2Ch+var_2C] 5 +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
test ebp ebp +
mov esi ds:isprint +
mov edi [esp+2Ch+arg_4] +
jnz loc_43B16B  +
jmp loc_43B190  +
mov [esp+2Ch+var_24] ebx +
mov [esp+2Ch+var_28] offset aC_1 +
mov [esp+2Ch+var_2C] 5 +
call sub_401740  +
mov [esp+2Ch+var_24] ebx +
add edi 1 +
mov [esp+2Ch+var_28] offset a02x_10 +
mov [esp+2Ch+var_2C] 5 +
call sub_401740  +
sub ebp 1 +
jz loc_43B190  +
movzx ebx byte ptr [edi] +
mov [esp+2Ch+var_2C] ebx +
call esi  +
test eax eax +
jnz loc_43B133  +
mov [esp+2Ch+var_28] offset a__1 +
mov [esp+2Ch+var_2C] 5 +
call sub_401740  +
jmp loc_43B14B  +
mov [esp+2Ch+var_28] offset asc_47AD3B +
mov [esp+2Ch+var_2C] 5 +
call sub_401740  +
add esp 2Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
call usb_strerror  +
test ebx ebx +
mov ecx offset aBulk +
mov edx offset aInterrupt +
cmovz edx ecx +
mov [esp+2Ch+var_20] edx +
mov [esp+2Ch+var_28] offset aSUsb_fill_bufU +
mov [esp+2Ch+var_2C] 2 +
mov [esp+2Ch+var_1C] eax +
mov eax ds:dword_486584 +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_43B0FE  +
mov eax 0FFFFFFFFh +
jmp loc_43B0FE  +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov ebp [esp+2Ch+arg_0] +
mov ebx [esp+2Ch+arg_8] +
mov eax [ebp+0] +
test eax eax +
mov [esp+2Ch+var_10] eax +
jz loc_43B2F0  +
mov eax [ebp+0Ch] +
test eax eax +
jnz loc_43B3C0  +
mov eax [ebp+10h] +
mov esi [esp+2Ch+arg_4] +
mov [esp+2Ch+var_14] 0 +
jmp loc_43B280  +
call usb_interrupt_read  +
mov edi eax +
test edi edi +
js loc_43B2B4  +
cmp ebx edi +
jb loc_43B2F0  +
mov [esp+2Ch+var_2C] esi +
add esi edi +
mov [esp+2Ch+var_24] edi +
mov [esp+2Ch+var_28] offset dword_485120 +
call memcpy  +
add [esp+2Ch+var_14] edi +
sub ebx edi +
jz loc_43B320  +
mov eax [ebp+10h] +
cmp eax edi +
jnz loc_43B320  +
mov edi [ebp+14h] +
mov edx [ebp+4] +
mov [esp+2Ch+var_20] eax +
mov eax [esp+2Ch+var_10] +
mov [esp+2Ch+var_1C] 2710h +
test edi edi +
mov [esp+2Ch+var_24] offset dword_485120 +
mov [esp+2Ch+var_28] edx +
mov [esp+2Ch+var_2C] eax +
jnz loc_43B240  +
call usb_bulk_read  +
mov edi eax +
test edi edi +
jns loc_43B24B  +
call usb_strerror  +
mov ecx [ebp+14h] +
mov edx offset aInterrupt +
mov [esp+2Ch+var_28] offset aSUsbdev_recv_f +
mov [esp+2Ch+var_2C] 2 +
test ecx ecx +
mov ecx offset aBulk +
cmovz edx ecx +
mov [esp+2Ch+var_1C] eax +
mov eax ds:dword_486584 +
mov [esp+2Ch+var_20] edx +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp-10h+arg_4] eax +
mov eax [esp-10h+arg_40] +
or edi 1000h +
mov [esp-10h+arg_0] offset dword_485120 +
mov [esp+0] eax +
call memcpy  +
mov [esp-10h+arg_14] edi +
nop   +
cmp ds:dword_486580 3 +
mov eax [esp-10h+arg_14] +
jle loc_43B2F5  +
mov esi eax +
mov eax ds:dword_486584 +
and esi 0FFFh +
mov [esp-10h+arg_0] offset aSRecv_1 +
mov dword ptr [esp+0] 4 +
mov [esp-10h+arg_4] eax +
call sub_401740  +
test esi esi +
mov ebp ds:isprint +
mov edi [esp-10h+arg_40] +
jnz loc_43B39D  +
jmp loc_43B417  +
mov [esp-10h+arg_4] ebx +
mov [esp-10h+arg_0] offset aC_1 +
mov dword ptr [esp+0] 4 +
call sub_401740  +
mov [esp-10h+arg_4] ebx +
add edi 1 +
mov [esp-10h+arg_0] offset a02x_10 +
mov dword ptr [esp+0] 4 +
call sub_401740  +
sub esi 1 +
jz loc_43B417  +
movzx ebx byte ptr [edi] +
mov [esp+0] ebx +
call ebp  +
test eax eax +
jnz loc_43B365  +
mov [esp-10h+arg_0] offset a__1 +
mov dword ptr [esp+0] 4 +
call sub_401740  +
jmp loc_43B37D  +
mov edx [ebp+10h] +
mov [esp+2Ch+var_28] eax +
mov eax [esp+2Ch+var_10] +
mov [esp+2Ch+var_1C] 1 +
mov [esp+2Ch+var_24] offset dword_485120 +
mov [esp+2Ch+var_20] edx +
mov [esp+2Ch+var_2C] eax +
call usb_bulk_read  +
cmp eax 4 +
mov edi eax +
jg loc_43B2FD  +
test eax eax +
jle loc_43B229  +
mov [esp+2Ch+var_24] eax +
mov [esp+2Ch+var_28] offset aShortEventLenD +
mov [esp+2Ch+var_2C] 0 +
call sub_401740  +
jmp loc_43B229  +
mov [esp-10h+arg_0] offset asc_47AD3B +
mov dword ptr [esp+0] 4 +
call sub_401740  +
mov eax [esp-10h+arg_14] +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov edi [esp+2Ch+arg_0] +
mov eax [edi] +
test eax eax +
mov [esp+2Ch+var_14] eax +
jz loc_43B5AE  +
mov ebx [esp+2Ch+arg_8] +
mov ecx [esp+2Ch+arg_4] +
jmp loc_43B478  +
call usb_interrupt_write  +
mov ecx [esp+2Ch+var_10] +
mov esi eax +
cmp esi ebp +
jnz loc_43B4BA  +
add ecx esi +
sub ebx esi +
jz loc_43B4F5  +
mov edx [edi+10h] +
mov eax [edi+14h] +
mov [esp+2Ch+var_10] ecx +
cmp ebx edx +
cmovbe edx ebx +
test eax eax +
mov eax [edi+8] +
mov ebp edx +
mov [esp+2Ch+var_1C] 2710h +
mov [esp+2Ch+var_20] edx +
mov [esp+2Ch+var_28] eax +
mov eax [esp+2Ch+var_14] +
mov [esp+2Ch+var_24] ecx +
mov [esp+2Ch+var_2C] eax +
jnz loc_43B463  +
call usb_bulk_write  +
mov ecx [esp+2Ch+var_10] +
mov esi eax +
cmp esi ebp +
jz loc_43B472  +
call usb_strerror  +
mov [esp+2Ch+var_1C] ebp +
mov [esp+2Ch+var_20] esi +
mov [esp+2Ch+var_28] offset aSUsbdev_sendWr +
mov [esp+2Ch+var_2C] 0 +
mov [esp+2Ch+var_18] eax +
mov eax ds:dword_486584 +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
xor eax eax +
cmp ds:dword_486580 3 +
jle loc_43B4ED  +
mov eax ds:dword_486584 +
mov esi [esp+2Ch+arg_8] +
mov [esp+2Ch+var_28] offset aSSent +
mov [esp+2Ch+var_2C] 4 +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
test esi esi +
mov edi ds:isprint +
jnz loc_43B56A  +
jmp loc_43B590  +
mov [esp+2Ch+var_24] ebx +
mov [esp+2Ch+var_28] offset aC_1 +
mov [esp+2Ch+var_2C] 4 +
call sub_401740  +
mov [esp+2Ch+var_24] ebx +
mov [esp+2Ch+var_28] offset a02x_10 +
mov [esp+2Ch+var_2C] 4 +
call sub_401740  +
add [esp+2Ch+arg_4] 1 +
sub esi 1 +
jz loc_43B590  +
mov eax [esp+2Ch+arg_4] +
movzx ebx byte ptr [eax] +
mov [esp+2Ch+var_2C] ebx +
call edi  +
test eax eax +
jnz loc_43B530  +
mov [esp+2Ch+var_28] offset a__1 +
mov [esp+2Ch+var_2C] 4 +
call sub_401740  +
jmp loc_43B548  +
mov [esp+2Ch+var_28] offset asc_47AD3B +
mov [esp+2Ch+var_2C] 4 +
call sub_401740  +
add esp 2Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax 0FFFFFFFFh +
jmp loc_43B4ED  +
***
mov eax [esp+18h+arg_0] +
mov ebx [eax] +
test ebx ebx +
jz loc_43B5F0  +
mov eax ds:dword_485100 +
mov [esp+18h+var_18] ebx +
mov [esp+18h+var_14] eax +
call usb_release_interface  +
mov [esp+18h+arg_0] ebx +
add esp 18h +
pop ebx  +
jmp usb_close  +
add esp 18h +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 24Ch +
movzx eax [esp+24Ch+arg_8] +
mov [esp+24Ch+var_248] 3Ah +
movzx esi [esp+24Ch+arg_4] +
movzx ebp [esp+24Ch+arg_6] +
mov [esp+24Ch+var_212] ax +
mov eax [esp+24Ch+arg_0] +
mov [esp+24Ch+var_24C] eax +
call strchr  +
test eax eax +
mov [esp+24Ch+var_218] eax +
jz loc_43B6A1  +
add [esp+24Ch+var_218] 1 +
mov ebx [esp+24Ch+var_218] +
jmp loc_43B676  +
mov [esp+24Ch+var_24C] ebx +
call strlen  +
mov [esp+24Ch+var_24C] ebx +
mov edi eax +
lea eax [eax-1] +
mov [esp+24Ch+var_244] eax +
lea eax [ebx+1] +
mov [esp+24Ch+var_248] eax +
call memmove  +
mov byte ptr [ebx+edi-1] 0 +
mov [esp+24Ch+var_24C] ebx +
mov [esp+24Ch+var_248] 3Ah +
call strchr  +
test eax eax +
mov ebx eax +
jnz loc_43B651  +
mov eax [esp+24Ch+var_218] +
mov [esp+24Ch+var_24C] eax +
call strlen  +
cmp eax 0Ch +
ja loc_43BDE6  +
mov eax [esp+24Ch+arg_C] +
mov edx [eax+10h] +
test edx edx +
jnz loc_43B6B6  +
mov dword ptr [eax+10h] 40h +
call usb_init  +
call usb_find_busses  +
call usb_find_devices  +
call usb_get_busses  +
test eax eax +
mov [esp+24Ch+var_220] eax +
jz loc_43B988  +
mov eax [esp+24Ch+var_220] +
mov ebx [eax+208h] +
test ebx ebx +
jnz loc_43B6FA  +
jmp loc_43B976  +
mov ebx [ebx] +
test ebx ebx +
jz loc_43B976  +
cmp [ebx+214h] si +
jnz loc_43B6F0  +
cmp [ebx+216h] bp +
jnz loc_43B6F0  +
mov [esp+24Ch+var_24C] ebx +
call usb_open  +
test eax eax +
mov edx eax +
mov [esp+24Ch+var_224] eax +
jz loc_43BC19  +
lea eax [esp+24Ch+var_20C] +
mov [esp+24Ch+var_240] 100h +
mov [esp+24Ch+var_244] eax +
movzx eax byte ptr [ebx+21Ch] +
mov [esp+24Ch+var_24C] edx +
mov [esp+24Ch+var_248] eax +
call usb_get_string_simple  +
test eax eax +
js loc_43BB61  +
lea eax [esp+24Ch+var_10C] +
mov [esp+24Ch+var_240] 100h +
mov [esp+24Ch+var_244] eax +
movzx eax byte ptr [ebx+21Bh] +
mov [esp+24Ch+var_248] eax +
mov eax [esp+24Ch+var_224] +
mov [esp+24Ch+var_24C] eax +
call usb_get_string_simple  +
test eax eax +
js loc_43BC44  +
lea eax [esp+24Ch+var_10C] +
mov [esp+24Ch+var_248] offset aCmsisDap +
mov [esp+24Ch+var_24C] eax +
call strstr  +
test eax eax +
jz loc_43B7AE  +
mov eax [esp+24Ch+arg_C] +
or [esp+24Ch+var_212] 1 +
mov dword ptr [eax+0Ch] 0 +
lea eax [esp+24Ch+var_10C] +
mov [esp+24Ch+var_248] offset aMedbg +
mov [esp+24Ch+var_24C] eax +
call strstr  +
test eax eax +
jz loc_43B7DE  +
mov eax [esp+24Ch+arg_C] +
mov dword ptr [eax+4] 81h +
mov dword ptr [eax+8] 2 +
lea eax [esp+24Ch+var_20C] +
mov [esp+24Ch+var_23C] eax +
lea eax [esp+24Ch+var_10C] +
mov [esp+24Ch+var_240] eax +
mov eax ds:dword_486584 +
mov [esp+24Ch+var_248] offset aSUsbdev_openFo +
mov [esp+24Ch+var_24C] 1 +
mov [esp+24Ch+var_244] eax +
call sub_401740  +
mov edi [esp+24Ch+var_218] +
test edi edi +
jz loc_43B87B  +
lea edi [esp+24Ch+var_20C] +
mov edx [edi] +
add edi 4 +
lea eax [edx-1010101h] +
not edx  +
and eax edx +
and eax 80808080h +
jz loc_43B81A  +
mov edx eax +
shr edx 10h +
test eax 8080h +
cmovz eax edx +
lea edx [edi+2] +
cmovz edi edx +
add al al +
sbb edi 3 +
lea eax [esp+24Ch+var_20C] +
sub edi eax +
mov eax [esp+24Ch+var_218] +
mov [esp+24Ch+var_24C] eax +
call strlen  +
mov edx [esp+24Ch+var_218] +
mov [esp+24Ch+var_248] edx +
sub edi eax +
lea eax [esp+24Ch+var_20C] +
add eax edi +
mov [esp+24Ch+var_24C] eax +
call ds:_stricmp  +
test eax eax +
jnz loc_43BBB2  +
mov eax [ebx+21Eh] +
test eax eax +
jz loc_43BCA8  +
movzx eax byte ptr [eax+5] +
mov [esp+24Ch+var_248] eax +
mov eax [esp+24Ch+var_224] +
mov [esp+24Ch+var_24C] eax +
call usb_set_configuration  +
test eax eax +
jnz loc_43BBE0  +
mov eax [ebx+21Eh] +
cmp byte ptr [eax+4] 0 +
jz loc_43B943  +
movzx edx [esp+24Ch+var_212] +
xor edi edi +
mov [esp+24Ch+var_20E] bp +
mov ebp edi +
mov edi [esp+24Ch+var_224] +
mov [esp+24Ch+var_210] si +
mov esi ebx +
and edx 1 +
mov word ptr [esp+24Ch+var_21C] dx +
mov eax [eax+9] +
lea ebx ds:0[ebp*8] +
mov eax [eax+ebp*8] +
movzx eax byte ptr [eax+2] +
mov [esp+24Ch+var_24C] edi +
mov [esp+24Ch+var_248] eax +
mov ds:dword_485100 eax +
call usb_claim_interface  +
test eax eax +
jnz loc_43B9A3  +
cmp word ptr [esp+24Ch+var_21C] 0 +
jz loc_43BCCA  +
mov eax [esi+21Eh] +
mov ecx [eax+9] +
mov ecx [ecx+ebx] +
cmp byte ptr [ecx+5] 3 +
jz loc_43B9E0  +
movzx ecx byte ptr [eax+4] +
add ebp 1 +
cmp ecx ebp +
jg loc_43B8D6  +
mov edi ebp +
mov ebx esi +
movzx ebp [esp+24Ch+var_20E] +
movzx esi [esp+24Ch+var_210] +
cmp edi ecx +
jnz loc_43BA0E  +
mov eax ds:dword_486584 +
mov [esp+24Ch+var_248] offset aSUsbdev_openNo +
mov [esp+24Ch+var_24C] 0 +
mov [esp+24Ch+var_244] eax +
call sub_401740  +
mov eax [esp+24Ch+var_224] +
mov [esp+24Ch+var_24C] eax +
call usb_close  +
mov ebx [ebx] +
test ebx ebx +
jnz loc_43B6FA  +
mov eax [esp+24Ch+var_220] +
mov eax [eax] +
test eax eax +
mov [esp+24Ch+var_220] eax +
jnz loc_43B6D6  +
test byte ptr [esp+24Ch+var_212] 2 +
jz loc_43BCE7  +
mov eax 0FFFFFFFFh +
add esp 24Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
call usb_strerror  +
mov [esp+24Ch+var_248] offset aSUsbdev_openEr +
mov [esp+24Ch+var_24C] 0 +
mov [esp+24Ch+var_23C] eax +
mov eax ds:dword_485100 +
mov [esp+24Ch+var_240] eax +
mov eax ds:dword_486584 +
mov [esp+24Ch+var_244] eax +
call sub_401740  +
mov eax [esi+21Eh] +
jmp loc_43B922  +
mov eax [esp+24Ch+arg_C] +
mov ebx esi +
mov edi ebp +
movzx esi [esp+24Ch+var_210] +
movzx ebp [esp+24Ch+var_20E] +
mov dword ptr [eax+14h] 1 +
mov eax [ebx+21Eh] +
movzx ecx byte ptr [eax+4] +
cmp edi ecx +
jz loc_43B943  +
mov eax [esp+24Ch+arg_C] +
mov ecx [esp+24Ch+var_224] +
mov esi [eax+4] +
mov [eax] ecx +
lea eax ds:0[edi*8] +
mov [esp+24Ch+var_220] eax +
test esi esi +
jnz loc_43BAA7  +
mov eax [ebx+21Eh] +
mov eax [eax+9] +
mov edx [eax+edi*8] +
movzx eax byte ptr [edx+4] +
test al al +
jz loc_43BA74  +
mov ecx [edx+9] +
movzx edx byte ptr [ecx+2] +
test dl dl +
js loc_43BDB3  +
mov edx eax +
shl edx 4 +
lea esi [eax+edx-11h] +
xor eax eax +
jmp loc_43BA70  +
movzx edx byte ptr [ecx+eax+13h] +
add eax 11h +
test dl dl +
js loc_43BDB3  +
cmp eax esi +
jnz loc_43BA60  +
mov eax ds:dword_486584 +
mov [esp+24Ch+var_240] 82h +
mov [esp+24Ch+var_248] offset aSUsbdev_openCa +
mov [esp+24Ch+var_24C] 0 +
mov [esp+24Ch+var_244] eax +
call sub_401740  +
mov eax [esp+24Ch+arg_C] +
mov dword ptr [eax+4] 82h +
mov ebp [ebx+21Eh] +
xor esi esi +
mov edx [esp+24Ch+var_220] +
mov eax [ebp+9] +
mov eax [eax+edx] +
cmp byte ptr [eax+4] 0 +
jz loc_43BD36  +
mov [esp+24Ch+var_21C] ebx +
mov ebx [esp+24Ch+arg_C] +
jmp loc_43BAEE  +
cmp eax [ebx+8] +
jz loc_43BB03  +
mov edx [esp+24Ch+var_220] +
add esi 1 +
mov eax [ebp+9] +
mov eax [eax+edx] +
movzx edx byte ptr [eax+4] +
cmp edx esi +
jle loc_43BD36  +
mov edx [eax+9] +
mov edi esi +
shl edi 4 +
add edi esi +
add edx edi +
movzx eax byte ptr [edx+2] +
cmp eax [ebx+4] +
jnz loc_43BAD0  +
movzx ecx word ptr [edx+4] +
mov edx [ebx+10h] +
cmp ecx edx +
jge loc_43BAD5  +
mov [esp+24Ch+var_238] eax +
mov eax ds:dword_486584 +
mov [esp+24Ch+var_23C] ecx +
mov [esp+24Ch+var_240] edx +
mov [esp+24Ch+var_248] offset aSMaxPacketSize +
mov [esp+24Ch+var_244] eax +
mov [esp+24Ch+var_24C] 1 +
call sub_401740  +
mov ecx [esp+24Ch+var_21C] +
mov edx [esp+24Ch+var_220] +
mov eax [ecx+21Eh] +
mov eax [eax+9] +
mov eax [eax+edx] +
mov eax [eax+9] +
movzx eax word ptr [eax+edi+4] +
mov [ebx+10h] eax +
mov ebp [ecx+21Eh] +
jmp loc_43BAD5  +
call usb_strerror  +
mov [esp+24Ch+var_248] offset aSUsb_openCanno +
mov [esp+24Ch+var_24C] 0 +
mov [esp+24Ch+var_240] eax +
mov eax ds:dword_486584 +
mov [esp+24Ch+var_244] eax +
call sub_401740  +
mov eax [esp+24Ch+var_218] +
test eax eax +
jnz loc_43B993  +
mov eax 5Dh +
mov [esp+24Ch+var_20C] 6B6E755Bh +
mov [esp+24Ch+var_208] 6E776F6Eh +
mov [esp+24Ch+var_204] ax +
jmp loc_43B74D  +
mov eax ds:dword_486584 +
mov [esp+24Ch+var_248] offset aSUsbdev_openSe +
mov [esp+24Ch+var_24C] 3 +
mov [esp+24Ch+var_244] eax +
call sub_401740  +
mov eax [esp+24Ch+var_224] +
mov [esp+24Ch+var_24C] eax +
call usb_close  +
jmp loc_43B6F0  +
call usb_strerror  +
mov [esp+24Ch+var_23C] eax +
mov eax [ebx+21Eh] +
movzx eax byte ptr [eax+5] +
mov [esp+24Ch+var_248] offset aSUsbdev_openWa +
mov [esp+24Ch+var_24C] 0 +
mov [esp+24Ch+var_240] eax +
mov eax ds:dword_486584 +
mov [esp+24Ch+var_244] eax +
call sub_401740  +
jmp loc_43B8A5  +
call usb_strerror  +
mov [esp+24Ch+var_248] offset aSUsbdev_open_0 +
mov [esp+24Ch+var_24C] 0 +
mov [esp+24Ch+var_240] eax +
mov eax ds:dword_486584 +
mov [esp+24Ch+var_244] eax +
call sub_401740  +
jmp loc_43B6F0  +
call usb_strerror  +
mov [esp+24Ch+var_248] offset aSUsb_openCan_0 +
mov [esp+24Ch+var_24C] 0 +
mov [esp+24Ch+var_240] eax +
mov eax ds:dword_486584 +
mov [esp+24Ch+var_244] eax +
call sub_401740  +
mov eax 5Dh +
mov [esp+24Ch+var_10C] 6E6E755Bh +
mov [esp+24Ch+var_108] 64656D61h +
mov [esp+24Ch+var_104] 6F727020h +
mov [esp+24Ch+var_100] 74637564h +
mov [esp+24Ch+var_FC] ax +
jmp loc_43B77F  +
mov eax ds:dword_486584 +
mov [esp+24Ch+var_248] offset aSUsbdev_openUs +
mov [esp+24Ch+var_24C] 0 +
mov [esp+24Ch+var_244] eax +
call sub_401740  +
jmp loc_43B960  +
mov ebx esi +
mov edi ebp +
movzx esi [esp+24Ch+var_210] +
mov eax [ebx+21Eh] +
movzx ebp [esp+24Ch+var_20E] +
movzx ecx byte ptr [eax+4] +
jmp loc_43B93B  +
mov ecx [esp+24Ch+var_218] +
mov eax offset aMatching +
movzx edx bp +
mov [esp+24Ch+var_234] edx +
mov [esp+24Ch+var_238] esi +
mov [esp+24Ch+var_248] offset aSUsbdev_openDi +
test ecx ecx +
mov ecx offset unk_47ADE6 +
cmovz eax ecx +
mov ecx [esp+24Ch+arg_0] +
mov [esp+24Ch+var_240] eax +
mov eax ds:dword_486584 +
mov [esp+24Ch+var_24C] 1 +
mov [esp+24Ch+var_23C] ecx +
mov [esp+24Ch+var_244] eax +
call sub_401740  +
jmp loc_43B993  +
test byte ptr [esp+24Ch+var_212] 1 +
jnz loc_43BD4A  +
xor eax eax +
add esp 24Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+24Ch+var_224] +
mov [esp+24Ch+var_230] 64h +
mov [esp+24Ch+var_234] 0 +
mov [esp+24Ch+var_238] 0 +
mov [esp+24Ch+var_23C] 0 +
mov [esp+24Ch+var_240] 0 +
mov [esp+24Ch+var_244] 0Ah +
mov [esp+24Ch+var_248] 21h +
mov [esp+24Ch+var_24C] eax +
call usb_control_msg  +
test eax eax +
jns loc_43BD3D  +
mov eax ds:dword_486584 +
mov [esp+24Ch+var_248] offset aSUsbdev_open_1 +
mov [esp+24Ch+var_24C] 0 +
mov [esp+24Ch+var_244] eax +
call sub_401740  +
xor eax eax +
jmp loc_43BD3F  +
mov eax ds:dword_486584 +
movzx esi dl +
mov [esp+24Ch+var_240] esi +
mov [esp+24Ch+var_248] offset aSUsbdev_open_2 +
mov [esp+24Ch+var_24C] 2 +
mov [esp+24Ch+var_244] eax +
call sub_401740  +
mov eax [esp+24Ch+arg_C] +
mov [eax+4] esi +
jmp loc_43BAA7  +
mov eax [esp+24Ch+var_218] +
mov [esp+24Ch+var_248] offset aSUsbdev_openIn +
mov [esp+24Ch+var_24C] 0 +
mov [esp+24Ch+var_240] eax +
mov eax ds:dword_486584 +
mov [esp+24Ch+var_244] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_43B998  +
***
push ebx  +
mov ebx [esp+0Ch] +
movzx eax word ptr [esp+10h] +
test ebx ebx +
jz loc_43BE51  +
mov edx [esp+8] +
add ebx edx +
mov ecx eax +
add edx 1 +
xor al [edx-1] +
shr cx 8 +
movzx eax al +
xor cx ds:word_47B120[eax+eax] +
cmp edx ebx +
mov eax ecx +
jnz loc_43BE34  +
pop ebx  +
retn   +
***
push ebx  +
mov edi [esp+arg_4] +
mov ebx [esp+arg_0] +
mov esi edi +
sub esi 2 +
jz loc_43BEC0  +
xor eax eax +
mov edx 0FFFFFFFFh +
lea esi [esi+0] +
mov ecx edx +
xor dl [ebx+eax] +
add eax 1 +
shr cx 8 +
movzx edx dl +
xor cx ds:word_47B120[edx+edx] +
cmp esi eax +
mov edx ecx +
jnz loc_43BE80  +
movzx esi cl +
movzx ecx byte ptr [ebx+edi-2] +
xor eax eax +
cmp ecx esi +
jz loc_43BEB0  +
pop ebx  +
pop esi  +
pop edi  +
retn   +
xor eax eax +
shr edx 8 +
cmp dl [ebx+edi-1] +
pop ebx  +
pop esi  +
setz al  +
pop edi  +
retn   +
mov esi 0FFh +
mov edx 0FFFFFFFFh +
jmp loc_43BEA0  +
***
push ebx  +
mov esi [esp+arg_4] +
mov edi [esp+arg_0] +
test esi esi +
jz loc_43BF1D  +
mov eax edi +
mov edx 0FFFFFFFFh +
lea ebx [esi+edi] +
lea esi [esi+0] +
mov ecx edx +
add eax 1 +
xor dl [eax-1] +
shr cx 8 +
movzx edx dl +
xor cx ds:word_47B120[edx+edx] +
cmp eax ebx +
mov edx ecx +
jnz loc_43BEF0  +
mov eax ecx +
shr edx 8 +
mov [edi+esi] al +
mov [edi+esi+1] dl +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov edx 0FFFFFFFFh +
mov eax 0FFFFFFFFh +
jmp loc_43BF12  +
***
sub esp 1Ch +
mov eax ds:dword_486584 +
mov [esp+1Ch+var_18] offset aSAvrDoperDoesn +
mov [esp+1Ch+var_1C] 0 +
mov [esp+1Ch+var_14] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
add esp 1Ch +
retn   +
***
mov edi edx +
push esi  +
mov esi ecx +
push ebx  +
sub esp 1Ch +
cmp ecx 8 +
mov [esp+24h+var_18] ecx +
mov [esp+24h+var_1C] eax +
jg loc_43C03A  +
mov [esp+24h+var_20] offset aSDBytes +
mov [esp+24h+var_24] 0 +
call sub_401740  +
test esi esi +
jle loc_43C13F  +
add esi edi +
mov ebx edi +
lea esi [esi+0] +
movzx eax byte ptr [ebx] +
add ebx 1 +
mov [esp+24h+var_20] offset a02x_11 +
mov [esp+24h+var_24] 0 +
mov [esp+24h+var_1C] eax +
call sub_401740  +
cmp ebx esi +
jnz loc_43BFA0  +
mov [esp+24h+var_20] offset asc_47B37E +
mov [esp+24h+var_24] 0 +
call sub_401740  +
jmp loc_43BFF4  +
mov ecx ds:_iob +
add edi 1 +
mov [esp+24h+var_24] eax +
lea edx [ecx+40h] +
mov [esp+24h+var_20] edx +
call fputc  +
cmp edi esi +
jz loc_43C01E  +
movzx eax byte ptr [edi] +
lea edx [eax-20h] +
cmp dl 5Eh +
jbe loc_43BFD8  +
mov eax ds:_iob +
add edi 1 +
mov [esp+24h+var_24] 2Eh +
add eax 40h +
mov [esp+24h+var_20] eax +
call fputc  +
cmp edi esi +
jnz loc_43BFF4  +
mov [esp+24h+var_20] offset asc_47B364 +
mov [esp+24h+var_24] 0 +
call sub_401740  +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+24h+var_20] offset aSDBytes_0 +
mov [esp+24h+var_24] 0 +
call sub_401740  +
nop   +
mov ebp 1 +
xor ebx ebx +
jmp loc_43C090  +
movzx eax byte ptr [edi+ebx] +
mov [esp+24h+var_20] offset a02x_11 +
mov [esp+24h+var_24] 0 +
mov [esp+24h+var_1C] eax +
call sub_401740  +
cmp ebx 7 +
jz loc_43C158  +
cmp ebp 10h +
jz loc_43C0B0  +
add ebx 1 +
add ebp 1 +
cmp ebx esi +
jl loc_43C060  +
mov [esp+24h+var_20] offset asc_47B376 +
mov [esp+24h+var_24] 0 +
call sub_401740  +
jmp loc_43C07C  +
mov [esp+24h+var_20] offset asc_47B37A +
xor ebx ebx +
mov [esp+24h+var_24] 0 +
call sub_401740  +
jmp loc_43C0E5  +
mov ecx ds:_iob +
mov [esp+24h+var_24] eax +
lea edx [ecx+40h] +
mov [esp+24h+var_20] edx +
call fputc  +
add ebx 1 +
cmp ebx 10h +
jz loc_43C115  +
cmp esi ebx +
jle loc_43C0DD  +
movzx eax byte ptr [edi+ebx] +
lea edx [eax-20h] +
cmp dl 5Eh +
jbe loc_43C0C8  +
mov eax ds:_iob +
add ebx 1 +
mov [esp+24h+var_24] 2Eh +
add eax 40h +
mov [esp+24h+var_20] eax +
call fputc  +
cmp ebx 10h +
jnz loc_43C0E5  +
mov [esp+24h+var_20] offset asc_47B364 +
sub esi 10h +
add edi 10h +
mov [esp+24h+var_24] 0 +
call sub_401740  +
test esi esi +
jg loc_43C050  +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+24h+var_20] offset asc_47B37E +
mov [esp+24h+var_24] 0 +
call sub_401740  +
jmp loc_43C01E  +
mov eax ds:_iob +
mov [esp+24h+var_24] 20h +
add eax 40h +
mov [esp+24h+var_20] eax +
call fputc  +
jmp loc_43C08A  +
***
mov eax [esp+arg_0] +
mov edx [eax] +
mov dword ptr [eax] 0 +
test edx edx +
jz locret_43C1A0  +
mov [esp+arg_0] edx +
jmp hid_close  +
retn   +
***
sub esp 1Ch +
cmp eax 10h +
ja loc_43C210  +
jmp ds:off_47B3D8[eax*4]  +
mov eax offset aAccessDenied_ +
add esp 1Ch +
retn   +
mov eax offset aDeviceNotFound +
add esp 1Ch +
retn   +
mov eax offset aIOError_ +
add esp 1Ch +
retn   +
mov eax offset aDeviceIsBusy_ +
add esp 1Ch +
retn   +
mov eax offset aSuccess_ +
add esp 1Ch +
retn   +
mov [esp+1Ch+var_14] eax +
mov [esp+1Ch+var_18] offset aUnknownErrorD_ +
mov [esp+1Ch+var_1C] offset unk_485320 +
call sprintf  +
mov eax offset unk_485320 +
add esp 1Ch +
retn   +
***
jmp sub_43C240  +
***
sub esp 1Ch +
mov [esp+1Ch+var_14] 0 +
mov [esp+1Ch+var_18] 5DFh +
mov [esp+1Ch+var_1C] 16C0h +
call hid_open  +
test eax eax +
jz loc_43C270  +
mov edx [esp+1Ch+arg_C] +
mov [edx] eax +
xor eax eax +
add esp 1Ch +
retn   +
mov eax ds:dword_486584 +
mov [esp+1Ch+var_18] offset aSUsbopendevice +
mov [esp+1Ch+var_1C] 0 +
mov [esp+1Ch+var_14] eax +
call sub_401740  +
mov eax 2 +
call sub_43C1B0  +
mov [esp+1Ch+var_18] offset aSAvrdoper_open +
mov [esp+1Ch+var_1C] 0 +
mov [esp+1Ch+var_10] eax +
mov eax ds:dword_486584 +
mov [esp+1Ch+var_14] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
add esp 1Ch +
retn   +
***
jmp sub_43C2D0  +
***
push esi  +
push ebx  +
sub esp 11Ch +
cmp ds:dword_486580 3 +
mov ebx [esp+11Ch+arg_8] +
jg loc_43C430  +
test ebx ebx +
jz loc_43C3DF  +
cmp ebx 0Dh +
jle loc_43C415  +
cmp ebx 1Dh +
jle loc_43C421  +
cmp ebx 3Dh +
setnle cl  +
xor eax eax +
add ecx 3 +
cmp ebx 3Dh +
setnle al  +
add eax 2 +
mov edi ds:dword_47B540[eax*4] +
mov esi ebx +
mov [esp+11Ch+var_10C] cl +
cmp edi ebx +
cmovbe esi edi +
add edi 2 +
mov eax esi +
mov [esp+11h] al +
mov eax [esp+11Ch+arg_4] +
mov [esp+11Ch+var_114] esi +
mov [esp+11Ch+var_118] eax +
lea eax [esp+11Ch+var_10A] +
mov [esp+11Ch+var_11C] eax +
call memcpy  +
mov [esp+11Ch+var_114] esi +
mov [esp+11Ch+var_118] offset aSendingDBytesD +
mov [esp+11Ch+var_11C] 4 +
call sub_401740  +
mov eax [esp+11Ch+arg_0] +
mov ebp [eax] +
lea eax [esp+11Ch+var_10C] +
mov [esp+11Ch+var_114] edi +
mov [esp+11Ch+var_118] eax +
mov [esp+11Ch+var_11C] ebp +
call hid_send_feature_report  +
cmp edi eax +
jz loc_43C3D0  +
test eax eax +
js loc_43C3F0  +
mov eax 5 +
call sub_43C1B0  +
mov [esp+11Ch+var_118] offset aSAvrdoper_send +
mov [esp+11Ch+var_11C] 0 +
mov [esp+11Ch+var_110] eax +
mov eax ds:dword_486584 +
mov [esp+11Ch+var_114] eax +
call sub_401740  +
add esp 11Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add [esp+11Ch+arg_4] esi +
sub ebx esi +
jnz loc_43C2F6  +
add esp 11Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+11Ch+var_11C] ebp +
call hid_error  +
mov [esp+11Ch+var_118] offset aErrorSendingMe +
mov [esp+11Ch+var_11C] 0 +
mov [esp+11Ch+var_114] eax +
call sub_401740  +
jmp loc_43C38F  +
mov ecx 1 +
xor eax eax +
jmp loc_43C31C  +
mov ecx 2 +
mov eax 1 +
jmp loc_43C31C  +
mov edx [esp+11Ch+arg_4] +
mov ecx ebx +
mov eax offset aSend +
call sub_43BF60  +
jmp loc_43C2EE  +
***
push edi  +
mov edi eax +
push esi  +
mov eax 1 +
push ebx  +
sub esp 9Ch +
lea esi [esp+0A8h+var_98] +
mov ds:dword_485344 0 +
mov ds:dword_485340 0 +
nop   +
lea esi [esi+0] +
mov edx ds:dword_47B540[eax*4] +
mov eax 118h +
sub eax ecx +
lea ecx [edx+1] +
cmp eax ecx +
jle loc_43C5A0  +
mov ebx [edi] +
add edx 2 +
mov [esp+0A8h+var_A0] edx +
mov [esp+0A8h+var_A4] esi +
mov [esp+0A8h+var_A8] ebx +
call hid_get_feature_report  +
test eax eax +
js loc_43C545  +
lea ebp [eax-2] +
movzx eax byte ptr [esp+0A8h+var_98+1] +
mov [esp+0A8h+var_A0] ebp +
mov [esp+0A8h+var_A4] offset aReceivedDBytes +
mov [esp+0A8h+var_A8] 4 +
mov [esp+0A8h+var_9C] eax +
call sub_401740  +
movzx eax byte ptr [esp+0A8h+var_98+1] +
mov ebx eax +
sub ebx ebp +
cmp ebp eax +
cmovle eax ebp +
mov edx eax +
mov eax ds:dword_485344 +
lea ebp [edx+eax] +
cmp ebp 118h +
ja loc_43C5D0  +
add eax offset dword_485360 +
lea ecx [esp+0A8h+var_98+2] +
mov [esp+0A8h+var_A0] edx +
mov [esp+0A8h+var_A4] ecx +
mov [esp+0A8h+var_A8] eax +
call memcpy  +
test ebx ebx +
mov ds:dword_485344 ebp +
jle loc_43C5A0  +
cmp ebx 0Dh +
jle loc_43C5B0  +
cmp ebx 1Dh +
jle loc_43C5C0  +
xor eax eax +
cmp ebx 3Dh +
setnle al  +
mov ecx ebp +
add eax 2 +
jmp loc_43C480  +
mov [esp+0A8h+var_A8] ebx +
call hid_error  +
mov [esp+0A8h+var_A4] offset aErrorSendingMe +
mov [esp+0A8h+var_A8] 0 +
mov [esp+0A8h+var_A0] eax +
call sub_401740  +
mov eax 5 +
call sub_43C1B0  +
mov [esp+0A8h+var_A4] offset aSAvrdoperfillb +
mov [esp+0A8h+var_A8] 0 +
mov [esp+0A8h+var_9C] eax +
mov eax ds:dword_486584 +
mov [esp+0A8h+var_A0] eax +
call sub_401740  +
add esp 9Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add esp 9Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
xor eax eax +
mov ecx ebp +
jmp loc_43C480  +
mov eax 1 +
mov ecx ebp +
jmp loc_43C480  +
mov eax ds:dword_486584 +
mov [esp+0A8h+var_A4] offset aSAvrdoperfil_0 +
mov [esp+0A8h+var_A8] 0 +
mov [esp+0A8h+var_A0] eax +
call sub_401740  +
jmp loc_43C590  +
***
mov ebx [esp+8+arg_0] +
jmp loc_43C609  +
mov eax ds:dword_485344 +
test eax eax +
jle loc_43C620  +
mov eax ebx +
call sub_43C450  +
test eax eax +
jns loc_43C600  +
add esp 8 +
mov eax 0FFFFFFFFh +
pop ebx  +
retn   +
add esp 8 +
xor eax eax +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov ebp [esp+1Ch+arg_8] +
mov esi [esp+1Ch+arg_4] +
nop   +
test ebp ebp +
jle loc_43C683  +
mov edi ds:dword_485340 +
mov edx ds:dword_485344 +
sub edx edi +
test edx edx +
jle loc_43C696  +
cmp ebp edx +
mov ebx edx +
cmovle ebx ebp +
lea eax dword_485360[edi] +
sub ebp ebx +
mov [esp+1Ch+var_14] ebx +
mov [esp+1Ch+var_1C] esi +
add esi ebx +
add ebx edi +
mov [esp+1Ch+var_18] eax +
call memcpy  +
test ebp ebp +
mov ds:dword_485340 ebx +
jg loc_43C644  +
cmp ds:dword_486580 3 +
jg loc_43C6B0  +
xor eax eax +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+1Ch+arg_0] +
call sub_43C450  +
test eax eax +
jns loc_43C640  +
mov eax 0FFFFFFFFh +
jmp loc_43C68E  +
mov ecx [esp+1Ch+arg_8] +
mov eax offset aReceive +
mov edx [esp+1Ch+arg_4] +
call sub_43BF60  +
jmp loc_43C68C  +
***
mov esi edx +
push ebx  +
sub esp 120h +
test edx edx +
jz loc_43C732  +
lea edi [esp+124h+var_104] +
mov [esp+124h+var_118] 0FFh +
mov [esp+124h+var_11C] edi +
mov [esp+124h+var_120] edx +
mov [esp+124h+var_124] eax +
call usb_get_string_simple  +
test eax eax +
mov ebx eax +
js loc_43C740  +
lea eax [eax+1] +
mov [esp+124h+var_124] eax +
call malloc  +
test eax eax +
mov esi eax +
jz loc_43C770  +
mov [esp+124h+var_11C] ebx +
mov [esp+124h+var_120] edi +
mov [esp+124h+var_124] eax +
call memcpy  +
mov eax esi +
mov byte ptr [esi+ebx] 0 +
add esp 120h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
add esp 120h +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
retn   +
call usb_strerror  +
mov [esp+124h+var_118] esi +
mov [esp+124h+var_120] offset aSWarningFailed +
mov [esp+124h+var_124] 0 +
mov [esp+124h+var_114] eax +
mov eax ds:dword_486584 +
mov [esp+124h+var_11C] eax +
call sub_401740  +
xor eax eax +
jmp loc_43C728  +
mov eax ds:dword_486584 +
mov [esp+124h+var_120] offset aSOutOfMemory_4 +
mov [esp+124h+var_124] 0 +
mov [esp+124h+var_11C] eax +
call sub_401740  +
xor eax eax +
jmp loc_43C728  +
***
jmp sub_43C7A0  +
***
push esi  +
mov edi offset aUsb_3 +
push ebx  +
sub esp 10h +
mov edx [esp+18h+arg_0] +
mov esi edx +
cmps   +
jnz loc_43C830  +
xor esi esi +
xor edi edi +
cmp byte ptr [edx+3] 3Ah +
jz loc_43C802  +
mov [esp+18h+var_14] 6Ch +
mov [esp+18h+var_18] 1 +
call calloc  +
test eax eax +
mov ebx eax +
jz loc_43C855  +
mov [eax] edi +
mov [eax+4] esi +
mov dword ptr [eax+68h] 0C8h +
call usb_init  +
call usb_find_busses  +
call usb_find_devices  +
mov eax ebx +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
add edx 4 +
mov [esp+18h+var_18] edx +
call _strdup  +
test eax eax +
mov edi eax +
jz loc_43C881  +
mov [esp+18h+var_14] 3Ah +
mov [esp+18h+var_18] eax +
call strchr  +
test eax eax +
jz loc_43C7C4  +
lea esi [eax+1] +
mov byte ptr [eax] 0 +
jmp loc_43C7C4  +
mov eax ds:dword_486584 +
mov [esp+18h+var_C] edx +
mov [esp+18h+var_14] offset aSErrorInvalidP +
mov [esp+18h+var_18] 0 +
mov [esp+18h+var_10] eax +
call sub_401740  +
xor eax eax +
jmp loc_43C7FB  +
mov eax ds:dword_486584 +
mov [esp+18h+var_14] offset aSOutOfMemory_2 +
mov [esp+18h+var_18] 0 +
mov [esp+18h+var_10] eax +
call sub_401740  +
mov [esp+18h+var_18] edi +
call free  +
xor eax eax +
jmp loc_43C7FB  +
mov eax ds:dword_486584 +
mov [esp+18h+var_14] offset aSOutOfMemoryIn +
mov [esp+18h+var_18] 0 +
mov [esp+18h+var_10] eax +
call sub_401740  +
xor eax eax +
jmp loc_43C7FB  +
***
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [esp+3Ch+arg_8] +
movzx ecx [esp+3Ch+arg_4] +
mov edi [esp+3Ch+arg_0] +
test ax ax +
mov [esp+3Ch+var_10] cx +
mov [esp+3Ch+var_E] ax +
jnz loc_43C8DE  +
mov edx [edi+4] +
test edx edx +
jz loc_43CBAF  +
call usb_get_busses  +
test eax eax +
mov [esp+3Ch+var_14] eax +
jz loc_43CB88  +
nop   +
mov eax [esp+3Ch+var_14] +
mov ebp [eax+208h] +
test ebp ebp +
jz loc_43CAE0  +
mov ebx [edi] +
lea esi [eax+8] +
jmp loc_43C940  +
mov eax [edi+4] +
test eax eax +
jz loc_43CAA4  +
lea edx [ebp+8] +
mov [esp+3Ch+var_38] eax +
mov [esp+3Ch+var_3C] edx +
call strcmp  +
test eax eax +
jnz loc_43C954  +
test ebp ebp +
mov ecx ebp +
setz al  +
test al al +
mov ebp [ebp+0] +
jz loc_43C962  +
test ebp ebp +
jz loc_43C962  +
test ebx ebx +
jz loc_43C910  +
mov [esp+3Ch+var_38] ebx +
mov [esp+3Ch+var_3C] esi +
call strcmp  +
test eax eax +
jz loc_43C910  +
mov eax 1 +
xor ecx ecx +
mov ebp [ebp+0] +
test al al +
jnz loc_43C93C  +
mov edx [esp+3Ch+var_14] +
test al al +
mov esi [edx] +
mov [esp+3Ch+var_14] esi +
jz loc_43C978  +
test esi esi +
jnz loc_43C8F0  +
test ecx ecx +
jz loc_43CB88  +
mov eax ds:dword_486580 +
test eax eax +
jnz loc_43CAEC  +
mov [esp+3Ch+var_3C] ecx +
mov [esp+3Ch+var_14] ecx +
call usb_open  +
mov ecx [esp+3Ch+var_14] +
test eax eax +
mov [edi+8] eax +
jz loc_43CB40  +
mov ebx [ecx+20Ch] +
mov [edi+0Ch] ebx +
mov ebx [ecx+210h] +
mov [edi+10h] ebx +
mov ebx [ecx+214h] +
mov [edi+14h] ebx +
mov ebx [ecx+218h] +
mov [edi+18h] ebx +
movzx edx word ptr [ecx+21Ch] +
mov [edi+1Ch] dx +
mov eax [ecx+21Eh] +
lea edx [edi+48h] +
mov ebx [eax] +
mov [edi+1Eh] ebx +
mov ebx [eax+4] +
mov [edi+22h] ebx +
mov ebx [eax+8] +
mov [edi+26h] ebx +
mov ebx [eax+0Ch] +
mov [edi+2Ah] ebx +
mov ebx [eax+10h] +
mov [edi+2Eh] ebx +
movzx eax byte ptr [eax+14h] +
mov dword ptr [edi+27h] 0 +
mov [edi+32h] al +
mov eax [ecx+21Eh] +
mov eax [eax+9] +
mov eax [eax] +
mov ebx [eax] +
mov [edi+33h] ebx +
mov ebx [eax+4] +
mov [edi+37h] ebx +
mov ebx [eax+8] +
mov [edi+3Bh] ebx +
mov ebx [eax+0Ch] +
mov [edi+3Fh] ebx +
mov ebx [eax+10h] +
mov [edi+43h] ebx +
movzx eax byte ptr [eax+14h] +
mov [edi+3Ch] edx +
mov [edi+47h] al +
mov eax [ecx+21Eh] +
mov eax [eax+9] +
mov eax [eax] +
mov eax [eax+9] +
test eax eax +
jz loc_43CA6D  +
mov ecx [eax] +
mov [edi+48h] ecx +
mov ecx [eax+4] +
mov [edi+4Ch] ecx +
mov ecx [eax+8] +
mov [edi+50h] ecx +
mov ecx [eax+0Ch] +
mov [edi+54h] ecx +
movzx eax byte ptr [eax+10h] +
mov [edi+58h] al +
movzx edx byte ptr [edi+1Ah] +
mov eax [edi+8] +
call sub_43C6D0  +
movzx edx byte ptr [edi+1Bh] +
mov [edi+5Ch] eax +
mov eax [edi+8] +
call sub_43C6D0  +
movzx edx byte ptr [edi+1Ch] +
mov [edi+60h] eax +
mov eax [edi+8] +
call sub_43C6D0  +
mov [edi+64h] eax +
xor eax eax +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
movzx edx [esp+3Ch+var_10] +
xor ecx ecx +
mov eax 1 +
cmp [ebp+214h] dx +
jnz loc_43C935  +
cmp [esp+3Ch+var_E] 0 +
jz loc_43CAD7  +
movzx edx [esp+3Ch+var_E] +
cmp [ebp+216h] dx +
jnz loc_43C935  +
mov ecx ebp +
xor eax eax +
jmp loc_43C962  +
xor ecx ecx +
mov eax 1 +
jmp loc_43C962  +
lea eax [ecx+8] +
mov [esp+3Ch+var_24] eax +
mov eax [ecx+208h] +
mov [esp+3Ch+var_14] ecx +
add eax 8 +
mov [esp+3Ch+var_28] eax +
movzx eax word ptr [ecx+216h] +
mov [esp+3Ch+var_2C] eax +
movzx eax word ptr [ecx+214h] +
mov [esp+3Ch+var_38] offset aSFoundVid0x04x +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_30] eax +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov ecx [esp+3Ch+var_14] +
jmp loc_43C98D  +
call usb_strerror  +
mov ecx [esp+3Ch+var_14] +
mov [esp+3Ch+var_28] eax +
lea eax [ecx+8] +
mov [esp+3Ch+var_2C] eax +
mov eax [ecx+208h] +
mov [esp+3Ch+var_38] offset aSErrorUsbDevic +
mov [esp+3Ch+var_3C] 0 +
add eax 8 +
mov [esp+3Ch+var_30] eax +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_43CA9C  +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_38] offset aSErrorNoMatchi +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_43CA9C  +
mov eax ds:dword_486584 +
mov [esp+3Ch+var_38] offset aSErrorNoDfuSup +
mov [esp+3Ch+var_3C] 0 +
mov [esp+3Ch+var_34] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_43CA9C  +
***
mov ebx [esp+18h+arg_0] +
mov eax [ebx+8] +
test eax eax +
jz loc_43CBF7  +
mov [esp+18h+var_18] eax +
call usb_close  +
mov eax [ebx] +
test eax eax +
jz loc_43CC05  +
mov [esp+18h+var_18] eax +
call free  +
mov eax [ebx+5Ch] +
test eax eax +
jz loc_43CC14  +
mov [esp+18h+var_18] eax +
call free  +
mov eax [ebx+60h] +
test eax eax +
jz loc_43CC23  +
mov [esp+18h+var_18] eax +
call free  +
mov eax [ebx+64h] +
test eax eax +
jz loc_43CC37  +
mov [esp+18h+arg_0] eax +
add esp 18h +
pop ebx  +
jmp free  +
add esp 18h +
pop ebx  +
retn   +
***
sub esp 24h +
mov eax ds:dword_486584 +
mov esi [esp+24h+arg_0] +
mov [esp+24h+var_20] offset aSDfu_getstatus +
mov ebx [esp+24h+arg_4] +
mov [esp+24h+var_24] 4 +
mov [esp+24h+var_1C] eax +
call sub_401740  +
mov eax [esi+8] +
mov edx [esi+68h] +
mov [esp+24h+var_C] 6 +
mov [esp+24h+var_10] ebx +
mov [esp+24h+var_14] 0 +
mov [esp+24h+var_8] edx +
mov [esp+24h+var_18] 0 +
mov [esp+24h+var_1C] 3 +
mov [esp+24h+var_20] 0A1h +
mov [esp+24h+var_24] eax +
call usb_control_msg  +
test eax eax +
js loc_43CD40  +
cmp eax 5 +
jbe loc_43CD14  +
cmp eax 6 +
jnz loc_43CD4B  +
movzx eax byte ptr [ebx+5] +
mov [esp+24h+var_C] eax +
movzx eax byte ptr [ebx+4] +
mov [esp+24h+var_10] eax +
movzx eax byte ptr [ebx+2] +
movzx edx byte ptr [ebx+3] +
shl eax 8 +
shl edx 10h +
or eax edx +
movzx edx byte ptr [ebx+1] +
or eax edx +
mov [esp+24h+var_14] eax +
movzx eax byte ptr [ebx] +
mov [esp+24h+var_20] offset aSDfu_getstat_0 +
mov [esp+24h+var_24] 4 +
mov [esp+24h+var_18] eax +
mov eax ds:dword_486584 +
mov [esp+24h+var_1C] eax +
call sub_401740  +
xor eax eax +
add esp 24h +
pop ebx  +
pop esi  +
retn   +
mov [esp+24h+var_18] offset aShortRead +
mov eax ds:dword_486584 +
mov [esp+24h+var_20] offset aSErrorFailedTo +
mov [esp+24h+var_24] 0 +
mov [esp+24h+var_1C] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_43CD0E  +
call usb_strerror  +
mov [esp+24h+var_18] eax +
jmp loc_43CD1C  +
mov eax ds:dword_486584 +
mov [esp+24h+var_20] offset aSErrorOversize +
mov [esp+24h+var_24] 0 +
mov [esp+24h+var_1C] eax +
call sub_401740  +
mov [esp+24h+var_24] 1 +
call exit  +
***
mov eax ds:dword_486584 +
mov ebx [esp+28h+arg_0] +
mov [esp+28h+var_24] offset aSDfu_clrstatus +
mov [esp+28h+var_28] 4 +
mov [esp+28h+var_20] eax +
call sub_401740  +
mov eax [ebx+8] +
mov edx [ebx+68h] +
mov [esp+28h+var_10] 0 +
mov [esp+28h+var_14] 0 +
mov [esp+28h+var_18] 0 +
mov [esp+28h+var_C] edx +
mov [esp+28h+var_1C] 0 +
mov [esp+28h+var_20] 4 +
mov [esp+28h+var_24] 21h +
mov [esp+28h+var_28] eax +
call usb_control_msg  +
test eax eax +
js loc_43CDF2  +
xor eax eax +
add esp 28h +
pop ebx  +
retn   +
call usb_strerror  +
mov [esp+28h+var_24] offset aSErrorFailed_0 +
mov [esp+28h+var_28] 0 +
mov [esp+28h+var_1C] eax +
mov eax ds:dword_486584 +
mov [esp+28h+var_20] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_43CDED  +
***
mov eax ds:dword_486584 +
mov ebx [esp+28h+arg_0] +
mov [esp+28h+var_24] offset aSDfu_abortIssu +
mov [esp+28h+var_28] 4 +
mov [esp+28h+var_20] eax +
call sub_401740  +
mov eax [ebx+8] +
mov edx [ebx+68h] +
mov [esp+28h+var_10] 0 +
mov [esp+28h+var_14] 0 +
mov [esp+28h+var_18] 0 +
mov [esp+28h+var_C] edx +
mov [esp+28h+var_1C] 0 +
mov [esp+28h+var_20] 6 +
mov [esp+28h+var_24] 21h +
mov [esp+28h+var_28] eax +
call usb_control_msg  +
test eax eax +
js loc_43CE92  +
xor eax eax +
add esp 28h +
pop ebx  +
retn   +
call usb_strerror  +
mov [esp+28h+var_24] offset aSErrorFailed_1 +
mov [esp+28h+var_28] 0 +
mov [esp+28h+var_1C] eax +
mov eax ds:dword_486584 +
mov [esp+28h+var_20] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_43CE8D  +
***
push ebx  +
push ebx  +
mov ebx [esp+28h+arg_0] +
mov eax [ebx+5Ch] +
test eax eax +
jz loc_43D177  +
movzx edx word ptr [ebx+14h] +
mov [esp+28h+var_20] eax +
mov [esp+28h+var_24] offset aUsbVendorS0x04 +
mov [esp+28h+var_28] 0 +
mov [esp+28h+var_1C] edx +
call sub_401740  +
mov eax [ebx+60h] +
test eax eax +
jz loc_43D1A0  +
movzx edx word ptr [ebx+16h] +
mov [esp+28h+var_20] eax +
mov [esp+28h+var_24] offset aUsbProductS0x0 +
mov [esp+28h+var_28] 0 +
mov [esp+28h+var_1C] edx +
call sub_401740  +
movzx eax word ptr [ebx+18h] +
mov [esp+28h+var_24] offset aUsbReleaseHu_H +
mov [esp+28h+var_28] 0 +
mov edx eax +
and edx 0Fh +
mov [esp+28h+var_18] edx +
mov edx eax +
movzx eax ah +
shr dx 4 +
and edx 0Fh +
mov [esp+28h+var_1C] edx +
mov [esp+28h+var_20] eax +
call sub_401740  +
mov eax [ebx+64h] +
test eax eax +
jz loc_43D172  +
mov [esp+28h+var_20] eax +
mov [esp+28h+var_24] offset aUsbSerialNoS +
mov [esp+28h+var_28] 0 +
call sub_401740  +
add esp 28h +
pop ebx  +
retn   +
movzx eax word ptr [ebx+14h] +
mov [esp+28h+var_24] offset aUsbVendor0x04h +
mov [esp+28h+var_28] 0 +
mov [esp+28h+var_20] eax +
call sub_401740  +
mov eax [ebx+60h] +
test eax eax +
jnz loc_43D0FE  +
nop   +
movzx eax word ptr [ebx+16h] +
mov [esp+28h+var_24] offset aUsbProduct0x04 +
mov [esp+28h+var_28] 0 +
mov [esp+28h+var_20] eax +
call sub_401740  +
jmp loc_43D11E  +
***
jmp sub_43D1D0  +
***
mov edx [esp+arg_0] +
mov eax offset aUnknown_8 +
cmp edx 0Fh +
ja locret_43D1E5  +
mov eax ds:off_47BC60[edx*4] +
retn   +
***
retn   +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov eax [esp+2Ch+arg_0] +
mov ebx [esp+2Ch+arg_4] +
mov esi [esp+2Ch+arg_8] +
mov eax [eax] +
test eax eax +
jz loc_43D334  +
mov [esp+2Ch+var_20] 12Ch +
mov [esp+2Ch+var_24] esi +
mov [esp+2Ch+var_28] ebx +
mov [esp+2Ch+var_2C] eax +
call hid_read_timeout  +
cmp eax esi +
mov ebp eax +
jz loc_43D280  +
mov [esp+2Ch+var_20] eax +
mov eax ds:dword_486584 +
mov [esp+2Ch+var_1C] esi +
mov [esp+2Ch+var_28] offset aSShortReadRead +
mov [esp+2Ch+var_2C] 0 +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
cmp ds:dword_486580 4 +
mov eax ebp +
jg loc_43D293  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ds:dword_486584 +
mov edi ebp +
mov [esp+2Ch+var_28] offset aSRecv_2 +
mov [esp+2Ch+var_2C] 5 +
mov [esp+2Ch+var_24] eax +
call sub_401740  +
test ebp ebp +
jnz loc_43D2F0  +
jmp loc_43D316  +
mov [esp+2Ch+var_24] esi +
mov [esp+2Ch+var_28] offset aC_2 +
mov [esp+2Ch+var_2C] 5 +
call sub_401740  +
mov [esp+2Ch+var_24] esi +
add ebx 1 +
mov [esp+2Ch+var_28] offset a02x_12 +
mov [esp+2Ch+var_2C] 5 +
call sub_401740  +
sub edi 1 +
jz loc_43D316  +
movzx esi byte ptr [ebx] +
mov [esp+2Ch+var_2C] esi +
call ds:isprint  +
test eax eax +
jnz loc_43D2B8  +
mov [esp+2Ch+var_28] offset a__2 +
mov [esp+2Ch+var_2C] 5 +
call sub_401740  +
jmp loc_43D2D0  +
mov [esp+2Ch+var_28] offset asc_47BCD9 +
mov [esp+2Ch+var_2C] 5 +
call sub_401740  +
add esp 2Ch +
mov eax ebp +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax 0FFFFFFFFh +
jmp loc_43D28B  +
***
push esi  +
push ebx  +
sub esp 23Ch +
mov eax [esp+23Ch+arg_0] +
mov ebx [esp+23Ch+arg_4] +
mov edi [eax] +
test edi edi +
jz loc_43D4B1  +
cmp [esp+23Ch+arg_8] 200h +
mov esi 200h +
cmovbe esi [esp+23Ch+arg_8] +
lea eax [esp+23Ch+var_20C] +
lea ecx [esp+2Fh] +
mov [esp+23Ch+var_234] esi +
lea ebp [esi+1] +
mov [esp+23Ch+var_238] ebx +
mov [esp+23Ch+var_23C] eax +
mov [esp+23Ch+var_220] ecx +
mov [esp+23Ch+var_20D] 0 +
call memcpy  +
mov ecx [esp+23Ch+var_220] +
mov [esp+23Ch+var_234] ebp +
mov [esp+23Ch+var_23C] edi +
mov [esp+23Ch+var_238] ecx +
call hid_write  +
test eax eax +
js loc_43D4BB  +
cmp ebp eax +
jz loc_43D3E3  +
mov [esp+23Ch+var_230] eax +
mov eax ds:dword_486584 +
mov [esp+23Ch+var_22C] ebp +
mov [esp+23Ch+var_238] offset aSShortWriteToU +
mov [esp+23Ch+var_23C] 0 +
mov [esp+23Ch+var_234] eax +
call sub_401740  +
xor eax eax +
cmp ds:dword_486580 4 +
jg loc_43D400  +
add esp 23Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ds:dword_486584 +
mov edi [esp+23Ch+arg_8] +
mov [esp+23Ch+var_238] offset aSSent_0 +
mov [esp+23Ch+var_23C] 5 +
mov [esp+23Ch+var_234] eax +
call sub_401740  +
test edi edi +
mov ebp ds:isprint +
jnz loc_43D468  +
jmp loc_43D490  +
mov [esp+23Ch+var_234] esi +
mov [esp+23Ch+var_238] offset aC_2 +
mov [esp+23Ch+var_23C] 5 +
call sub_401740  +
mov [esp+23Ch+var_234] esi +
add ebx 1 +
mov [esp+23Ch+var_238] offset a02x_12 +
mov [esp+23Ch+var_23C] 5 +
call sub_401740  +
sub edi 1 +
jz loc_43D490  +
movzx esi byte ptr [ebx] +
mov [esp+23Ch+var_23C] esi +
call ebp  +
test eax eax +
jnz loc_43D430  +
mov [esp+23Ch+var_238] offset a__2 +
mov [esp+23Ch+var_23C] 5 +
call sub_401740  +
jmp loc_43D448  +
mov [esp+23Ch+var_238] offset asc_47BCD9 +
mov [esp+23Ch+var_23C] 5 +
call sub_401740  +
add esp 23Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax 0FFFFFFFFh +
jmp loc_43D3EE  +
mov eax ds:dword_486584 +
mov [esp+23Ch+var_230] esi +
mov [esp+23Ch+var_238] offset aSFailedToWri_1 +
mov [esp+23Ch+var_23C] 0 +
mov [esp+23Ch+var_234] eax +
call sub_401740  +
mov eax 0FFFFFFFFh +
jmp loc_43D3EE  +
***
mov eax [esp+arg_0] +
mov eax [eax] +
test eax eax +
jz locret_43D503  +
mov [esp+arg_0] eax +
jmp hid_close  +
retn   +
***
push esi  +
push ebx  +
sub esp 23Ch +
movzx eax [esp+23Ch+arg_4] +
movzx edi [esp+23Ch+arg_6] +
mov [esp+23Ch+var_21E] ax +
mov eax [esp+23Ch+arg_C] +
mov edx [eax+10h] +
test edx edx +
jnz loc_43D544  +
mov dword ptr [eax+10h] 200h +
mov eax [esp+23Ch+arg_0] +
mov [esp+23Ch+var_238] 3Ah +
mov [esp+23Ch+var_23C] eax +
call strchr  +
test eax eax +
jz loc_43D879  +
lea ebx [eax+1] +
mov esi ebx +
jmp loc_43D595  +
mov [esp+23Ch+var_23C] esi +
call strlen  +
mov [esp+23Ch+var_23C] esi +
mov ebp eax +
lea eax [eax-1] +
mov [esp+23Ch+var_234] eax +
lea eax [esi+1] +
mov [esp+23Ch+var_238] eax +
call memmove  +
mov byte ptr [esi+ebp-1] 0 +
mov [esp+23Ch+var_23C] esi +
mov [esp+23Ch+var_238] 3Ah +
call strchr  +
test eax eax +
mov esi eax +
jnz loc_43D570  +
mov [esp+23Ch+var_23C] ebx +
call strlen  +
cmp eax 0Ch +
ja loc_43D906  +
lea esi [esp+23Ch+var_20E] +
mov [esp+23Ch+var_238] ebx +
mov [esp+23Ch+var_234] 0Fh +
mov [esp+23Ch+var_23C] esi +
call mbstowcs  +
mov [esp+23Ch+var_23C] ebx +
call strlen  +
mov [esp+23Ch+var_238] edi +
mov ebx eax +
movzx eax [esp+23Ch+var_21E] +
mov [esp+23Ch+var_23C] eax +
call hid_enumerate  +
test eax eax +
mov edi eax +
jz loc_43D69B  +
mov ebp eax +
nop   +
lea esi [esi+0] +
mov eax [ebp+14h] +
mov edx [ebp+8] +
mov [esp+23Ch+var_238] offset aSUsbhid_openFo +
mov [esp+23Ch+var_23C] 1 +
mov [esp+23Ch+var_230] eax +
mov eax ds:dword_486584 +
mov [esp+23Ch+var_22C] edx +
mov [esp+23Ch+var_234] eax +
call sub_401740  +
mov eax [ebp+8] +
mov [esp+23Ch+var_23C] eax +
call wcslen  +
cmp ebx eax +
ja loc_43D652  +
mov [esp+23Ch+var_238] esi +
mov edx [ebp+8] +
sub eax ebx +
lea eax [edx+eax*2] +
mov [esp+23Ch+var_23C] eax +
call wcscmp  +
test eax eax +
jz loc_43D6B0  +
mov eax ds:dword_486584 +
mov [esp+23Ch+var_238] offset aSUsbhid_openSe +
mov [esp+23Ch+var_23C] 3 +
mov [esp+23Ch+var_234] eax +
call sub_401740  +
mov ebp [ebp+20h] +
test ebp ebp +
jnz loc_43D600  +
mov eax ds:dword_486584 +
mov [esp+23Ch+var_238] offset aSUsbhid_openNo +
mov [esp+23Ch+var_23C] 0 +
mov [esp+23Ch+var_234] eax +
call sub_401740  +
mov [esp+23Ch+var_23C] edi +
call hid_free_enumeration  +
mov ebx 0FFFFFFFFh +
add esp 23Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebp+0] +
mov [esp+23Ch+var_238] offset aSUsbhid_openOp +
mov [esp+23Ch+var_23C] 3 +
mov [esp+23Ch+var_230] eax +
mov eax ds:dword_486584 +
mov [esp+23Ch+var_234] eax +
call sub_401740  +
mov eax [ebp+0] +
mov [esp+23Ch+var_23C] eax +
call hid_open_path  +
mov [esp+23Ch+var_23C] edi +
mov ebx eax +
call hid_free_enumeration  +
test ebx ebx +
jz loc_43D993  +
mov eax [esp+23Ch+arg_C] +
cmp [esp+23Ch+var_21E] 3EBh +
mov [eax] ebx +
jz loc_43D760  +
mov eax [esp+23Ch+arg_C] +
xor ebx ebx +
mov eax [eax+10h] +
cmp eax 200h +
jle loc_43D6A0  +
mov [esp+23Ch+var_230] eax +
mov eax ds:dword_486584 +
mov [esp+23Ch+var_22C] 200h +
mov [esp+23Ch+var_238] offset aSUsbhid_openUn +
mov [esp+23Ch+var_23C] 0 +
mov [esp+23Ch+var_234] eax +
call sub_401740  +
mov eax [esp+23Ch+arg_C] +
mov dword ptr [eax+10h] 200h +
add esp 23Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ds:dword_486584 +
lea esi [esp+23Ch+var_20E] +
mov [esp+23Ch+var_238] offset aSUsbhid_openPr +
mov edi esi +
mov [esp+23Ch+var_23C] 3 +
mov [esp+23Ch+var_234] eax +
call sub_401740  +
test esi 2 +
mov edx 201h +
jnz loc_43D92C  +
mov ecx edx +
xor eax eax +
shr ecx 2 +
test dl 2 +
stos   +
jz loc_43D7AB  +
xor ebp ebp +
add edi 2 +
mov [edi-2] bp +
and edx 1 +
jz loc_43D7B3  +
mov byte ptr [edi] 0 +
mov [esp+23Ch+var_234] 41h +
mov edi esi +
mov [esp+23Ch+var_238] esi +
mov [esp+23Ch+var_23C] ebx +
mov byte ptr [esp+23Ch+var_20E+2] 0FFh +
call hid_write  +
mov eax [esp+23Ch+arg_C] +
test esi 2 +
mov edx 201h +
mov dword ptr [eax+10h] 40h +
jnz loc_43D940  +
mov ecx edx +
xor eax eax +
shr ecx 2 +
test dl 2 +
stos   +
jz loc_43D804  +
xor eax eax +
add edi 2 +
mov [edi-2] ax +
and edx 1 +
jz loc_43D80C  +
mov byte ptr [edi] 0 +
mov [esp+23Ch+var_230] 32h +
mov [esp+23Ch+var_234] 0Ah +
mov [esp+23Ch+var_238] esi +
mov [esp+23Ch+var_23C] ebx +
call hid_read_timeout  +
test eax eax +
jz loc_43D8C3  +
test eax eax +
jle loc_43D9B5  +
movzx eax byte ptr [esp+23Ch+var_20E] +
movzx edx byte ptr [esp+23Ch+var_20E+1] +
test al al +
jnz loc_43D84F  +
cmp dl 2 +
jz loc_43D954  +
mov [esp+23Ch+var_230] eax +
mov eax ds:dword_486584 +
mov [esp+23Ch+var_22C] edx +
mov [esp+23Ch+var_238] offset aSUsbhid_open_0 +
mov [esp+23Ch+var_23C] 0 +
mov [esp+23Ch+var_234] eax +
call sub_401740  +
jmp loc_43D703  +
movzx eax [esp+23Ch+var_21E] +
mov [esp+23Ch+var_234] 0 +
mov [esp+23Ch+var_238] edi +
mov [esp+23Ch+var_23C] eax +
call hid_open  +
test eax eax +
mov ebx eax +
jnz loc_43D6F1  +
mov eax ds:dword_486584 +
mov ebx 0FFFFFFFFh +
mov [esp+23Ch+var_238] offset aSUsbhid_open_1 +
mov [esp+23Ch+var_23C] 0 +
mov [esp+23Ch+var_234] eax +
call sub_401740  +
jmp loc_43D6A0  +
mov [esp+23Ch+var_234] 1C1h +
mov [esp+23Ch+var_238] esi +
mov [esp+23Ch+var_23C] ebx +
call hid_write  +
mov eax [esp+23Ch+arg_C] +
mov dword ptr [eax+10h] 200h +
mov [esp+23Ch+var_230] 32h +
mov [esp+23Ch+var_234] 0Ah +
mov [esp+23Ch+var_238] esi +
mov [esp+23Ch+var_23C] ebx +
call hid_read_timeout  +
jmp loc_43D830  +
mov eax ds:dword_486584 +
mov [esp+23Ch+var_230] ebx +
mov [esp+23Ch+var_238] offset aSUsbhid_openIn +
mov [esp+23Ch+var_23C] 0 +
mov [esp+23Ch+var_234] eax +
call sub_401740  +
jmp loc_43D69B  +
xor eax eax +
mov dx 1FFh +
mov word ptr [esp+23Ch+var_20E] ax +
lea edi [esp+23Ch+var_20E+2] +
jmp loc_43D794  +
xor ecx ecx +
mov dx 1FFh +
mov word ptr [esp+23Ch+var_20E] cx +
lea edi [esp+23Ch+var_20E+2] +
jmp loc_43D7ED  +
movzx eax byte ptr [esp+23Ch+var_20E+3] +
movzx edx byte ptr [esp+23Ch+var_20E+2] +
mov ecx [esp+23Ch+arg_C] +
shl eax 8 +
add eax edx +
mov [ecx+10h] eax +
mov [esp+23Ch+var_230] eax +
mov eax ds:dword_486584 +
mov [esp+23Ch+var_238] offset aSUsbhid_open_2 +
mov [esp+23Ch+var_23C] 3 +
mov [esp+23Ch+var_234] eax +
call sub_401740  +
jmp loc_43D703  +
mov eax ds:dword_486584 +
mov [esp+23Ch+var_238] offset aSUsbhid_open_3 +
mov [esp+23Ch+var_23C] 0 +
mov [esp+23Ch+var_234] eax +
call sub_401740  +
jmp loc_43D69B  +
mov eax ds:dword_486584 +
mov [esp+23Ch+var_238] offset aSUsbhid_open_4 +
mov [esp+23Ch+var_23C] 0 +
mov [esp+23Ch+var_234] eax +
call sub_401740  +
mov [esp+23Ch+var_23C] ebx +
call hid_close  +
jmp loc_43D69B  +
***
mov ebp esp +
mov ecx 25h +
push edi  +
push esi  +
push ebx  +
lea ebx [ebp+var_AC] +
sub esp 0CCh +
mov esi [ebp+arg_0] +
mov edi ebx +
stos   +
mov [ebp+var_AC] 94h +
mov [esp+0D8h+var_D8] ebx +
call ds:GetVersionExA  +
sub esp 4 +
test eax eax +
jz loc_43DB48  +
cmp [ebp+var_9C] 2 +
jz loc_43DA85  +
xor edi edi +
mov eax ds:off_47C04C[edi*8] +
mov [esp+0D8h+var_D4] esi +
mov [esp+0D8h+var_D8] eax +
call strcmp  +
test eax eax +
jz loc_43DB33  +
add edi 1 +
cmp edi 3 +
jnz loc_43DA29  +
mov [esp+0D8h+var_D0] 0 +
mov [esp+0D8h+var_D4] ebx +
mov [esp+0D8h+var_D8] esi +
call strtol  +
cmp byte ptr [esi] 0 +
jz loc_43DAE3  +
mov edx [ebp+var_AC] +
cmp byte ptr [edx] 0 +
jnz loc_43DAE3  +
test eax eax +
js loc_43DB04  +
mov edx [ebp+arg_4] +
mov [edx] eax +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+0D8h+var_C0] 0 +
mov [esp+0D8h+var_C4] 80h +
mov [esp+0D8h+var_C8] 3 +
mov [esp+0D8h+var_CC] 0 +
mov [esp+0D8h+var_D0] 0 +
mov [esp+0D8h+var_D4] 80000000h +
mov [esp+0D8h+var_D8] offset a_Giveio +
call ds:CreateFileA  +
sub esp 1Ch +
cmp eax 0FFFFFFFFh +
jz loc_43DB48  +
test eax eax +
jz loc_43DA27  +
mov [esp+0D8h+var_D8] eax +
call ds:CloseHandle  +
sub esp 4 +
jmp loc_43DA27  +
mov eax ds:dword_486584 +
mov [esp+0D8h+var_CC] esi +
mov [esp+0D8h+var_D4] offset aSPortNameSIsNe +
mov [esp+0D8h+var_D8] 0 +
mov [esp+0D8h+var_D0] eax +
call sub_401740  +
mov eax ds:dword_486584 +
mov [esp+0D8h+var_CC] esi +
mov [esp+0D8h+var_D4] offset aSCanTOpenDevic +
mov [esp+0D8h+var_D8] 0 +
mov [esp+0D8h+var_D0] eax +
call sub_401740  +
mov eax [ebp+arg_4] +
mov dword ptr [eax] 0FFFFFFFFh +
jmp loc_43DA7D  +
mov eax ds:dword_47C050[edi*8] +
cmp eax 0FFFFFFFFh +
jnz loc_43DA70  +
jmp loc_43DA4C  +
mov eax ds:dword_486584 +
mov [esp+0D8h+var_D4] offset aSCanTOpenDev_0 +
mov [esp+0D8h+var_D8] 0 +
mov [esp+0D8h+var_D0] eax +
call sub_401740  +
mov eax [ebp+arg_4] +
mov dword ptr [eax] 0FFFFFFFFh +
jmp loc_43DA7D  +
***
mov eax [esp+arg_4] +
mov edx [esp+arg_0] +
cmp eax 1 +
mov ecx [edx] +
mov edx 2 +
jz loc_43DBAC  +
xor edx edx +
cmp eax 2 +
setz dl  +
add edx ecx +
in al dx +
or al [esp+arg_8] +
out dx al +
xor eax eax +
retn   +
***
mov eax [esp+arg_4] +
mov edx [esp+arg_0] +
cmp eax 1 +
mov ecx [edx] +
mov edx 2 +
jz loc_43DBDC  +
xor edx edx +
cmp eax 2 +
setz dl  +
add edx ecx +
in al dx +
movzx ecx [esp+arg_8] +
not ecx  +
and eax ecx +
out dx al +
xor eax eax +
retn   +
***
mov ecx [esp+arg_4] +
mov eax [esp+arg_0] +
cmp ecx 1 +
mov edx [eax] +
mov eax 2 +
jz loc_43DC0C  +
xor eax eax +
cmp ecx 2 +
setz al  +
add edx eax +
in al dx +
and al [esp+arg_8] +
movzx eax al +
retn   +
***
mov ecx [esp+arg_4] +
mov eax [esp+arg_0] +
cmp ecx 1 +
mov edx [eax] +
mov eax 2 +
jz loc_43DC6C  +
xor eax eax +
cmp ecx 2 +
setz al  +
add edx eax +
in al dx +
movzx eax al +
retn   +
***
mov eax [esp+arg_4] +
mov edx [esp+arg_0] +
cmp eax 1 +
mov ecx [edx] +
mov edx 2 +
jz loc_43DC9C  +
xor edx edx +
cmp eax 2 +
setz dl  +
add edx ecx +
movzx eax [esp+arg_8] +
out dx al +
xor eax eax +
retn   +
***
mov ebp esp +
push edi  +
push esi  +
push ebx  +
sub esp 14h +
test eax eax +
mov [ebp+var_20] eax +
jz loc_43DD30  +
mov eax [edx] +
mov ebx ecx +
mov [ebp+var_1C] 0 +
mov [ebp+var_14] eax +
mov esi [ebp+var_14] +
mov eax [esi+4] +
test eax eax +
mov [ebp+var_18] eax +
jle loc_43DD20  +
mov esi [esi] +
mov [ebp+var_10] 0 +
movzx ecx byte ptr [esi+4] +
test ecx ecx +
jz loc_43DD11  +
mov eax [esi+0Ch] +
cmp [eax+2] bl +
jz loc_43DD32  +
add eax 14h +
xor edx edx +
jmp loc_43DD0A  +
mov edi eax +
add eax 14h +
cmp [eax-12h] bl +
jz loc_43DD40  +
add edx 1 +
cmp edx ecx +
jl loc_43DD00  +
add [ebp+var_10] 1 +
add esi 18h +
mov eax [ebp+var_18] +
cmp [ebp+var_10] eax +
jnz loc_43DCE7  +
add [ebp+var_1C] 1 +
mov eax [ebp+var_20] +
add [ebp+var_14] 8 +
cmp [ebp+var_1C] eax +
jl loc_43DCD1  +
xor eax eax +
add esp 14h +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add esp 14h +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
sub esp 18h +
lea eax [ebp+arg_C] +
mov [esp+18h+var_C] eax +
mov eax [ebp+arg_8] +
mov [esp+18h+var_14] 400h +
mov [esp+18h+var_10] eax +
mov eax [ebp+arg_0] +
mov [esp+18h+var_18] eax +
call j__vsnprintf  +
leave   +
retn   +
***
push esi  +
push ebx  +
sub esp 10h +
mov ebx [ebp+arg_0] +
mov esi [ebx+8] +
mov dword ptr [ebx+3Ch] 1 +
lea eax [esi+18h] +
mov [esp+18h+var_18] eax +
call sub_44CBC0  +
mov eax [ebx+8] +
lea edx [ebx+1Ch] +
mov ecx [eax+14h] +
mov [ebx+20h] ecx +
lea ecx [eax+10h] +
add eax 18h +
mov [ebx+1Ch] ecx +
mov ecx [eax-4] +
mov [ecx] edx +
mov [eax-4] edx +
mov [esp+18h+var_18] eax +
call sub_44CC10  +
mov edx ds:off_480D10 +
test edx edx +
jnz loc_43DDF0  +
mov eax [ebx+8] +
mov eax [eax+88h] +
test eax eax +
jz loc_43DDF0  +
mov [esp+18h+var_10] 1 +
mov [esp+18h+var_14] ebx +
mov [esp+18h+var_18] esi +
call sub_44D450  +
add esp 10h +
pop ebx  +
pop esi  +
pop ebp  +
retn   +
***
push ebx  +
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov ebx [ebp+arg_0] +
mov edi [ebx+8] +
mov [esp+28h+var_28] ebx +
call sub_44CBC0  +
mov dword ptr [ebx+3Ch] 0 +
lea esi [edi+18h] +
mov [esp+28h+var_28] ebx +
call sub_44CC10  +
mov [esp+28h+var_28] esi +
call sub_44CBC0  +
mov edx [ebx+1Ch] +
mov eax [ebx+20h] +
mov [eax] edx +
mov edx [ebx+1Ch] +
mov [edx+4] eax +
mov dword ptr [ebx+1Ch] 0 +
mov dword ptr [ebx+20h] 0 +
mov [esp+28h+var_28] esi +
call sub_44CC10  +
mov edx ds:off_480D10 +
test edx edx +
jnz loc_43DF10  +
mov eax [ebx+8] +
mov eax [eax+88h] +
test eax eax +
jz loc_43DF10  +
mov [esp+28h+var_20] 2 +
mov [esp+28h+var_24] ebx +
mov [esp+28h+var_28] edi +
call sub_44D450  +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov edi [ebp+arg_0] +
mov esi [ebp+arg_4] +
lea ecx [edi+18h] +
add edi 10h +
mov [esp+28h+var_28] ecx +
mov [ebp+var_1C] ecx +
call sub_44CBC0  +
mov eax [edi+4] +
mov ecx [ebp+var_1C] +
cmp edi eax +
lea ebx [eax-1Ch] +
jz loc_43DF65  +
cmp [ebx+24h] esi +
jnz loc_43DF59  +
jmp loc_43DF80  +
cmp [eax+24h] esi +
jz loc_43DF80  +
mov edx [ebx+20h] +
lea eax [edx-1Ch] +
cmp edi edx +
mov ebx eax +
jnz loc_43DF54  +
xor ebx ebx +
mov [esp+28h+var_28] ecx +
call sub_44CC10  +
add esp 1Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+28h+var_28] ebx +
mov [ebp+var_1C] ecx +
call sub_44CBC0  +
add dword ptr [ebx+4] 1 +
mov [esp+28h+var_28] ebx +
call sub_44CC10  +
mov ecx [ebp+var_1C] +
jmp loc_43DF67  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
pop ebp  +
movzx eax byte ptr [eax+0Ch] +
retn 4  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
pop ebp  +
movzx eax byte ptr [eax+0Dh] +
retn 4  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
pop ebp  +
mov eax [eax+10h] +
retn 4  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
pop ebp  +
movzx eax byte ptr [eax+14h] +
retn 4  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
pop ebp  +
mov eax [eax+18h] +
retn 4  +
***
push ebx  +
sub esp 14h +
mov ebx [ebp+arg_0] +
mov [esp+18h+var_18] ebx +
call sub_44CBC0  +
add dword ptr [ebx+4] 1 +
mov [esp+18h+var_18] ebx +
call sub_44CC10  +
add esp 14h +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
pop ebp  +
mov eax [eax+10h] +
retn 4  +
***
test byte ptr ds:dword_480D04+2 2 +
jz loc_43E050  +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov edx [ebp+0Ch] +
mov [eax+14h] edx +
xor eax eax +
pop ebp  +
retn 8  +
***
mov eax 0FFFFFFF4h +
retn 8  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
cmovz eax ds:dword_485488 +
mov edx [eax+4] +
test edx edx +
jnz loc_43E07B  +
mov edx [ebp+0Ch] +
mov [eax] edx +
pop ebp  +
retn 8  +
***
mov edx [ebp+arg_0] +
cmp edx 1 +
jz loc_43E0C0  +
mov eax 1 +
jb loc_43E0AC  +
cmp edx 100h +
jz loc_43E0B0  +
cmp edx 101h +
jnz loc_43E0D1  +
mov eax ds:dword_480D04 +
and eax 20000h +
pop ebp  +
retn 4  +
mov eax ds:dword_480D04 +
pop ebp  +
and eax 10000h +
retn 4  +
mov edx ds:off_480D10 +
xor eax eax +
pop ebp  +
test edx edx +
setz al  +
retn 4  +
xor eax eax +
pop ebp  +
retn 4  +
***
push edi  +
push esi  +
push ebx  +
sub esp 44Ch +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_43E131  +
mov eax [eax] +
test eax eax +
jz loc_43E114  +
cmp eax 1 +
jle loc_43E120  +
cmp eax 2 +
jg loc_43E109  +
cmp [ebp+arg_4] 3 +
jz loc_43E114  +
cmp eax 3 +
jg loc_43E154  +
cmp [ebp+arg_4] 4 +
jnz loc_43E154  +
add esp 44Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp [ebp+arg_4] 2 +
jnz loc_43E0FE  +
add esp 44Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ds:dword_485488 +
test eax eax +
jnz loc_43E0F3  +
mov [esp+458h+var_458] offset aLibusb_debug +
call getenv  +
test eax eax +
jz loc_43E114  +
mov [esp+458h+var_458] eax +
call atoi  +
jmp loc_43E0F5  +
xor ebx ebx +
cmp eax 4 +
lea eax [ebp+var_420] +
setz bl  +
mov [esp+458h+var_454] 0 +
mov [esp+458h+var_458] eax +
call sub_459290  +
test ebx ebx +
jz loc_43E184  +
mov ecx ds:dword_48548C +
test ecx ecx +
jz loc_43E32A  +
mov eax [ebp+var_41C] +
mov edx ds:dword_485494 +
cmp eax edx +
jl loc_43E2C5  +
mov ecx [ebp+var_420] +
sub ecx ds:dword_485490 +
sub eax edx +
cmp [ebp+arg_4] 4 +
mov [ebp+var_41C] eax +
mov [ebp+var_420] ecx +
ja loc_43E320  +
mov eax [ebp+arg_4] +
jmp ds:off_47C17C[eax*4]  +
mov esi offset aWarning +
test ebx ebx +
jz loc_43E2F0  +
call sub_44D2F0  +
mov edx [ebp+arg_8] +
lea edi [ebp+var_418] +
mov [esp+458h+var_440] esi +
mov [esp+458h+var_450] offset a2d_06d08xLibus +
mov [esp+458h+var_454] 400h +
mov [esp+458h+var_43C] edx +
mov [esp+458h+var_458] edi +
mov [esp+458h+var_444] eax +
mov eax [ebp+var_41C] +
mov [esp+458h+var_448] eax +
mov eax [ebp+var_420] +
mov [esp+458h+var_44C] eax +
call sub_43DD50  +
mov ebx eax +
cmp ebx 3FFh +
ja loc_43E2D8  +
mov esi 400h +
sub esi ebx +
lea eax [edi+ebx] +
mov [ebp+var_42C] ebx +
mov ecx [ebp+arg_10] +
mov [esp+458h+var_454] esi +
mov [esp+458h+var_458] eax +
mov byte ptr [ebp+ebx+var_418] 0 +
mov [esp+458h+var_44C] ecx +
mov ecx [ebp+arg_C] +
mov [esp+458h+var_450] ecx +
call j__vsnprintf  +
test eax eax +
js loc_43E268  +
lea ecx [ebx+eax] +
cmp ecx 3FFh +
jbe loc_43E26D  +
mov eax esi +
lea ecx [ebx+esi] +
lea edx [ecx+2] +
cmp edx 3FFh +
jbe loc_43E27F  +
sub eax ecx +
add eax 3FEh +
add eax [ebp+var_42C] +
mov edx 0Ah +
mov [edi+eax] dx +
mov eax ds:_iob +
mov [esp+458h+var_458] edi +
add eax 40h +
mov [esp+458h+var_454] eax +
call fputs  +
jmp loc_43E114  +
mov esi offset aError +
jmp loc_43E1CB  +
mov esi offset aDebug +
jmp loc_43E1CB  +
mov esi offset aInfo +
jmp loc_43E1CB  +
mov edi [ebp+var_420] +
add eax 0F4240h +
lea ecx [edi-1] +
jmp loc_43E19E  +
mov eax edi +
mov esi 400h +
mov [ebp+var_42C] 0 +
xor ebx ebx +
jmp loc_43E237  +
mov eax [ebp+arg_8] +
lea edi [ebp+var_418] +
mov [esp+458h+var_44C] esi +
mov [esp+458h+var_450] offset aLibusbSS +
mov [esp+458h+var_454] 400h +
mov [esp+458h+var_448] eax +
mov [esp+458h+var_458] edi +
call sub_43DD50  +
mov ebx eax +
jmp loc_43E21B  +
mov esi offset aUnknown +
jmp loc_43E1CB  +
mov eax ds:_iob +
mov [esp+458h+var_450] 40h +
mov [esp+458h+var_454] 1 +
mov [esp+458h+var_458] offset aTimestampThrea +
add eax 40h +
mov [esp+458h+var_44C] eax +
mov ds:dword_48548C 1 +
call fwrite  +
mov eax ds:_iob +
mov [esp+458h+var_450] 51h +
mov [esp+458h+var_454] 1 +
mov [esp+458h+var_458] offset asc_47C0F4 +
add eax 40h +
mov [esp+458h+var_44C] eax +
call fwrite  +
jmp loc_43E184  +
***
sub esp 28h +
lea eax [ebp+arg_10] +
mov [esp+28h+var_18] eax +
mov eax [ebp+arg_C] +
mov [esp+28h+var_1C] eax +
mov eax [ebp+arg_8] +
mov [esp+28h+var_20] eax +
mov eax [ebp+arg_4] +
mov [esp+28h+var_24] eax +
mov eax [ebp+arg_0] +
mov [esp+28h+var_28] eax +
call sub_43E0E0  +
leave   +
retn   +
***
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov edi [ebp+arg_0] +
mov ebx [ebp+arg_4] +
mov esi [edi] +
cmp esi [edi+4] +
jb loc_43E450  +
mov [esp+38h+var_2C] offset aNeedToIncrease +
mov [esp+38h+var_30] offset aDiscovered_dev +
mov [esp+38h+var_34] 4 +
mov [esp+38h+var_38] 0 +
call sub_43E390  +
mov eax [edi+4] +
mov [esp+38h+var_38] edi +
lea edx [eax+8] +
lea eax ds:28h[eax*4] +
mov [esp+38h+var_34] eax +
mov [ebp+var_1C] edx +
call realloc  +
test eax eax +
mov ecx eax +
jz loc_43E475  +
mov eax [ebp+var_1C] +
mov [ebp+var_1C] ecx +
mov [ecx+4] eax +
mov [esp+38h+var_38] ebx +
call sub_44CBC0  +
add dword ptr [ebx+4] 1 +
mov [esp+38h+var_38] ebx +
call sub_44CC10  +
mov ecx [ebp+var_1C] +
mov [ecx+esi*4+8] ebx +
mov eax ecx +
add dword ptr [ecx] 1 +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+38h+var_38] ebx +
call sub_44CBC0  +
add dword ptr [ebx+4] 1 +
mov [esp+38h+var_38] ebx +
call sub_44CC10  +
mov eax edi +
mov [edi+esi*4+8] ebx +
add dword ptr [edi] 1 +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+38h+var_38] edi +
call free  +
xor eax eax +
jmp loc_43E445  +
***
jmp sub_43E490  +
***
push ebx  +
sub esp 24h +
mov ebx [ebp+arg_0] +
mov [esp+28h+var_28] ebx +
call sub_4409D0  +
test eax eax +
js loc_43E4B7  +
movzx eax byte ptr [ebx+39h] +
cmp al 8 +
ja loc_43E4F0  +
test al al +
jz loc_43E4C0  +
mov [ebx+15h] al +
xor eax eax +
add esp 24h +
pop ebx  +
pop ebp  +
retn   +
mov [esp+28h+var_1C] offset aZeroConfigurat +
mov [esp+28h+var_20] offset aUsbi_sanitize_ +
mov [esp+28h+var_24] 4 +
mov [esp+28h+var_28] 0 +
mov [ebp+var_C] eax +
call sub_43E390  +
mov eax [ebp+var_C] +
jmp loc_43E4B2  +
mov eax [ebx+8] +
mov [esp+28h+var_1C] offset aTooManyConfigu +
mov [esp+28h+var_20] offset aUsbi_sanitize_ +
mov [esp+28h+var_24] 1 +
mov [esp+28h+var_28] eax +
call sub_43E390  +
mov eax 0FFFFFFFFh +
jmp loc_43E4B7  +
***
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
mov esi [ebp+arg_4] +
test eax eax +
mov edi [ecx+8] +
jle loc_43E5C3  +
mov edx eax +
nop   +
movzx ebx byte ptr [ecx+0Dh] +
test bl bl +
jz loc_43E55A  +
sub edx 1 +
cmp edx 0FFFFFFFFh +
jz loc_43E570  +
mov [esi+edx] bl +
mov ecx [ecx+10h] +
test ecx ecx +
jnz loc_43E540  +
cmp eax edx +
jg loc_43E5A1  +
sub eax edx +
mov ebx eax +
add esp 1Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn 0Ch  +
mov [esp+28h+var_28] edi +
mov ebx 0FFFFFFF8h +
mov [esp+28h+var_1C] offset aPortNumbersArr +
mov [esp+28h+var_20] offset aLibusb_get_por +
mov [esp+28h+var_24] 2 +
call sub_43E390  +
add esp 1Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn 0Ch  +
sub eax edx +
add edx esi +
mov [esp+28h+var_28] esi +
mov ebx eax +
mov [esp+28h+var_20] eax +
mov [esp+28h+var_24] edx +
call memmove  +
add esp 1Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn 0Ch  +
mov ebx 0FFFFFFFEh +
jmp loc_43E562  +
***
push ebp  +
mov ebp esp +
sub esp 18h +
movzx eax byte ptr [ebp+14h] +
mov [esp+8] eax +
mov eax [ebp+10h] +
mov [esp+4] eax +
mov eax [ebp+0Ch] +
mov [esp] eax +
call sub_43E520  +
sub esp 0Ch +
leave   +
retn 10h  +
***
push ebp  +
mov ebp esp +
push esi  +
push ebx  +
sub esp 20h +
mov ebx [ebp+8] +
lea eax [ebp-0Ch] +
mov esi [ebp+0Ch] +
mov [esp+4] eax +
mov [esp] ebx +
call sub_440AE0  +
sub esp 8 +
test eax eax +
js loc_43E65D  +
mov ebx [ebp-0Ch] +
mov eax esi +
movzx ecx al +
movzx eax byte ptr [ebx+4] +
lea edx [ebx+0Ch] +
call sub_43DCB0  +
test eax eax +
jz loc_43E656  +
movzx esi word ptr [eax+4] +
mov [esp] ebx +
call sub_440EE0  +
mov eax esi +
sub esp 4 +
lea esp [ebp-8] +
pop ebx  +
pop esi  +
pop ebp  +
retn 8  +
***
mov esi 0FFFFFFFBh +
jmp loc_43E640  +
***
mov eax [ebx+8] +
mov dword ptr [esp+0Ch] offset aCouldNotRetrie +
mov dword ptr [esp+8] offset aLibusb_get_max +
mov dword ptr [esp+4] 1 +
mov [esp] eax +
call sub_43E390  +
mov eax 0FFFFFF9Dh +
jmp loc_43E64D  +
***
push ebp  +
mov ebp esp +
push esi  +
push ebx  +
sub esp 20h +
mov ebx [ebp+8] +
lea eax [ebp-0Ch] +
mov esi [ebp+0Ch] +
mov [esp+4] eax +
mov [esp] ebx +
call sub_440AE0  +
sub esp 8 +
test eax eax +
js loc_43E70A  +
mov ebx [ebp-0Ch] +
mov eax esi +
movzx ecx al +
movzx eax byte ptr [ebx+4] +
lea edx [ebx+0Ch] +
call sub_43DCB0  +
test eax eax +
jz loc_43E703  +
movzx edx word ptr [eax+4] +
mov esi edx +
and esi 7FFh +
test byte ptr [eax+3] 1 +
jnz loc_43E6F4  +
mov [esp] ebx +
call sub_440EE0  +
mov eax esi +
sub esp 4 +
lea esp [ebp-8] +
pop ebx  +
pop esi  +
pop ebp  +
retn 8  +
***
shr dx 0Bh +
and edx 3 +
add edx 1 +
imul esi edx +
jmp loc_43E6DE  +
***
mov esi 0FFFFFFFBh +
jmp loc_43E6DE  +
***
mov eax [ebx+8] +
mov dword ptr [esp+0Ch] offset aCouldNotRetrie +
mov dword ptr [esp+8] offset aLibusb_get_m_0 +
mov dword ptr [esp+4] 1 +
mov [esp] eax +
call sub_43E390  +
mov eax 0FFFFFF9Dh +
jmp loc_43E6EB  +
***
push esi  +
push ebx  +
sub esp 20h +
mov ebx [ebp+arg_0] +
test ebx ebx +
jz loc_43E76C  +
mov [esp+28h+var_28] ebx +
call sub_44CBC0  +
mov eax [ebx+4] +
lea esi [eax-1] +
mov [ebx+4] esi +
mov [esp+28h+var_28] ebx +
call sub_44CC10  +
test esi esi +
jz loc_43E775  +
lea esp [ebp-8] +
pop ebx  +
pop esi  +
pop ebp  +
retn 4  +
movzx eax byte ptr [ebx+14h] +
mov [esp+28h+var_14] eax +
movzx eax byte ptr [ebx+0Ch] +
mov [esp+28h+var_1C] offset aDestroyDeviceD +
mov [esp+28h+var_20] offset aLibusb_unref_d +
mov [esp+28h+var_24] 4 +
mov [esp+28h+var_18] eax +
mov [esp+28h+var_28] 0 +
call sub_43E390  +
mov eax [ebx+10h] +
mov [esp+28h+var_28] eax +
call sub_43E740  +
mov eax ds:off_480D60 +
sub esp 4 +
test eax eax +
jz loc_43E7C5  +
mov [esp+28h+var_28] ebx +
call eax  +
mov eax ds:off_480D10 +
test eax eax +
jnz loc_43E7E7  +
mov [esp+28h+var_28] ebx +
call sub_44CB10  +
mov [esp+28h+var_28] ebx +
call free  +
lea esp [ebp-8] +
pop ebx  +
pop esi  +
pop ebp  +
retn 4  +
mov [esp+28h+var_28] ebx +
call sub_43DE90  +
jmp loc_43E7CE  +
***
jmp sub_43E800  +
***
push esi  +
push ebx  +
sub esp 10h +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_43E83D  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_43E835  +
mov eax [esi] +
test eax eax +
jz loc_43E835  +
lea ebx [esi+4] +
nop   +
mov [esp+18h+var_18] eax +
add ebx 4 +
call sub_43E740  +
mov eax [ebx-4] +
sub esp 4 +
test eax eax +
jnz loc_43E820  +
mov [esp+18h+var_18] esi +
call free  +
lea esp [ebp-8] +
pop ebx  +
pop esi  +
pop ebp  +
retn 8  +
***
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov esi [ebp+arg_0] +
mov [esp+48h+var_48] 28h +
call malloc  +
test eax eax +
jz loc_43E879  +
mov dword ptr [eax] 0 +
mov dword ptr [eax+4] 8 +
mov [esp+48h+var_3C] offset unk_47C259 +
test esi esi +
mov [esp+48h+var_40] offset aLibusb_get_dev +
mov [esp+48h+var_44] 4 +
mov [esp+48h+var_48] 0 +
mov [ebp+var_1C] eax +
cmovz esi ds:dword_485488 +
call sub_43E390  +
mov eax [ebp+var_1C] +
test eax eax +
jz loc_43EA04  +
mov eax ds:off_480D10 +
test eax eax +
jnz loc_43E9E0  +
mov eax ds:dword_480D14 +
test eax eax +
jz loc_43E8CC  +
call eax  +
lea ebx [esi+18h] +
add esi 10h +
mov [esp+48h+var_48] ebx +
call sub_44CBC0  +
mov edx [esi+4] +
mov eax [ebp+var_1C] +
cmp esi edx +
lea edi [edx-1Ch] +
jnz loc_43E8FE  +
jmp loc_43E9D7  +
mov edx [edi+20h] +
cmp esi edx +
lea edi [edx-1Ch] +
jz loc_43E9D7  +
mov [esp+48h+var_44] edi +
mov [esp+48h+var_48] eax +
call sub_43E3C0  +
test eax eax +
mov [ebp+var_1C] eax +
jnz loc_43E8F0  +
mov esi 0FFFFFFF5h +
mov [esp+48h+var_48] ebx +
call sub_44CC10  +
test esi esi +
js loc_43E9D0  +
mov ebx [ebp+var_1C] +
mov esi [ebx] +
mov [esp+48h+var_44] 4 +
lea eax [esi+1] +
mov [esp+48h+var_48] eax +
call calloc  +
test eax eax +
mov [ebp+var_2C] eax +
jz loc_43E9F3  +
test esi esi +
mov dword ptr [eax+esi*4] 0 +
jle loc_43E9FE  +
mov eax ebx +
xor edi edi +
jmp loc_43E963  +
mov eax [ebp+var_1C] +
mov ebx [eax+edi*4+8] +
mov [esp+48h+var_48] ebx +
call sub_44CBC0  +
add dword ptr [ebx+4] 1 +
mov [esp+48h+var_48] ebx +
call sub_44CC10  +
mov eax [ebp+var_2C] +
mov [eax+edi*4] ebx +
add edi 1 +
cmp esi edi +
jnz loc_43E960  +
mov edi [ebp+var_1C] +
mov edx [edi] +
mov ecx [ebp+arg_4] +
mov eax [ebp+var_2C] +
mov [ecx] eax +
xor ebx ebx +
test edx edx +
jz loc_43E9B6  +
nop   +
lea esi [esi+0] +
mov edx [edi+ebx*4+8] +
add ebx 1 +
mov [esp+48h+var_48] edx +
call sub_43E740  +
sub esp 4 +
cmp ebx [edi] +
jb loc_43E9A0  +
mov [esp+48h+var_48] edi +
call free  +
mov eax esi +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
mov edi [ebp+var_1C] +
mov edx [edi] +
jmp loc_43E995  +
xor esi esi +
jmp loc_43E916  +
lea edx [ebp+var_1C] +
mov [esp+48h+var_48] esi +
mov [esp+48h+var_44] edx +
call eax  +
mov esi eax +
jmp loc_43E91E  +
mov edx esi +
mov edi ebx +
mov esi 0FFFFFFF5h +
jmp loc_43E995  +
mov edx esi +
mov edi ebx +
jmp loc_43E98D  +
mov eax 0FFFFFFF5h +
jmp loc_43E9C0  +
***
push ebx  +
sub esp 24h +
mov ebx [ebp+arg_0] +
lea edx [ebp+var_9] +
mov byte ptr [ebp+var_9] 1 +
mov eax [ebx+0Ch] +
mov [esp+28h+var_24] edx +
mov [esp+28h+var_20] 1 +
mov [esp+28h+var_28] eax +
call sub_44E940  +
xor edx edx +
cmp eax 1 +
jnz loc_43EA47  +
add esp 24h +
mov eax edx +
pop ebx  +
pop ebp  +
retn   +
mov [esp+28h+var_1C] offset aInternalSignal +
mov [esp+28h+var_20] offset aUsbi_signal_ev +
mov [esp+28h+var_24] 2 +
mov [esp+28h+var_28] ebx +
call sub_43E390  +
mov edx 0FFFFFFFFh +
jmp loc_43EA3F  +
***
push ebx  +
sub esp 24h +
mov ebx [ebp+arg_0] +
lea edx [ebp+var_9] +
mov eax [ebx+8] +
mov [esp+28h+var_24] edx +
mov [esp+28h+var_20] 1 +
mov [esp+28h+var_28] eax +
call sub_44EA40  +
xor edx edx +
cmp eax 1 +
jnz loc_43EAA3  +
add esp 24h +
mov eax edx +
pop ebx  +
pop ebp  +
retn   +
mov [esp+28h+var_1C] offset aInternalSign_0 +
mov [esp+28h+var_20] offset aUsbi_clear_eve +
mov [esp+28h+var_24] 2 +
mov [esp+28h+var_28] ebx +
call sub_43E390  +
mov edx 0FFFFFFFFh +
jmp loc_43EA9B  +
***
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov esi [ebp+arg_0] +
movzx eax byte ptr [esi+14h] +
mov edi [esi+8] +
mov [esp+38h+var_24] eax +
movzx eax byte ptr [esi+0Ch] +
mov [esp+38h+var_2C] offset aOpenD_D +
mov [esp+38h+var_30] offset aLibusb_open +
mov [esp+38h+var_34] 4 +
mov [esp+38h+var_28] eax +
mov [esp+38h+var_38] 0 +
call sub_43E390  +
mov eax [esi+3Ch] +
test eax eax +
jz loc_43EC45  +
mov eax ds:dword_480D80 +
add eax 18h +
mov [esp+38h+var_38] eax +
call malloc  +
test eax eax +
mov ebx eax +
jz loc_43EC62  +
mov [esp+38h+var_34] 0 +
mov [esp+38h+var_38] eax +
call sub_44CAA0  +
test eax eax +
jnz loc_43EC50  +
mov [esp+38h+var_38] esi +
call sub_44CBC0  +
add dword ptr [esi+4] 1 +
mov [esp+38h+var_38] esi +
call sub_44CC10  +
mov ecx ds:dword_480D80 +
lea eax [ebx+18h] +
mov [esp+38h+var_34] 0 +
mov [esp+38h+var_38] eax +
mov [ebx+10h] esi +
mov [esp+38h+var_30] ecx +
mov dword ptr [ebx+14h] 0 +
mov dword ptr [ebx+4] 0 +
call memset  +
mov [esp+38h+var_38] ebx +
call ds:off_480D18  +
test eax eax +
js loc_43EBE0  +
lea esi [edi+24h] +
mov [esp+38h+var_38] esi +
call sub_44CBC0  +
mov edx [edi+20h] +
lea eax [ebx+8] +
mov [ebx+0Ch] edx +
lea edx [edi+1Ch] +
mov [ebx+8] edx +
mov edx [edi+20h] +
mov [edx] eax +
mov [edi+20h] eax +
mov [esp+38h+var_38] esi +
call sub_44CC10  +
mov eax [ebp+arg_4] +
mov [eax] ebx +
xor eax eax +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
mov [esp+38h+var_20] eax +
mov [ebp+var_1C] eax +
movzx eax byte ptr [esi+14h] +
mov [esp+38h+var_24] eax +
movzx eax byte ptr [esi+0Ch] +
mov [esp+38h+var_2C] offset aOpenD_DReturns +
mov [esp+38h+var_30] offset aLibusb_open +
mov [esp+38h+var_34] 4 +
mov [esp+38h+var_28] eax +
mov [esp+38h+var_38] 0 +
call sub_43E390  +
mov [esp+38h+var_38] esi +
call sub_43E740  +
sub esp 4 +
mov [esp+38h+var_38] ebx +
call sub_44CB10  +
mov [esp+38h+var_38] ebx +
call free  +
mov edx [ebp+var_1C] +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
mov eax edx +
pop ebp  +
retn 8  +
mov eax 0FFFFFFFCh +
jmp loc_43EBD0  +
mov [esp+38h+var_38] ebx +
call free  +
mov eax 0FFFFFF9Dh +
jmp loc_43EBD0  +
mov eax 0FFFFFFF5h +
jmp loc_43EBD0  +
***
push ebp  +
mov ebp esp +
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
movzx eax word ptr [ebp+0Ch] +
mov dword ptr [ebp-30h] 0 +
mov [ebp-3Ah] ax +
movzx eax word ptr [ebp+10h] +
mov [ebp-3Ch] ax +
lea eax [ebp-34h] +
mov [esp+4] eax +
mov eax [ebp+8] +
mov [esp] eax +
call sub_43E850  +
sub esp 8 +
test eax eax +
js loc_43ED3F  +
mov eax [ebp-34h] +
mov edi [eax] +
test edi edi +
jz loc_43ED13  +
mov esi 4 +
lea ebx [ebp-2Ah] +
jmp loc_43ECCD  +
mov eax [ebp-34h] +
mov edi [eax+esi] +
add esi 4 +
test edi edi +
jz loc_43ED13  +
mov [esp+4] ebx +
mov [esp] edi +
call sub_440A80  +
sub esp 8 +
test eax eax +
js loc_43ED10  +
movzx eax word ptr [ebp-3Ah] +
cmp [ebp-22h] ax +
jnz loc_43ECC0  +
movzx eax word ptr [ebp-3Ch] +
cmp [ebp-20h] ax +
jnz loc_43ECC0  +
lea eax [ebp-30h] +
mov [esp+4] eax +
mov [esp] edi +
call sub_43EAD0  +
sub esp 8 +
test eax eax +
js loc_43ED33  +
lea esi [esi+0] +
mov eax [ebp-34h] +
mov [esp] eax +
mov dword ptr [esp+4] 1 +
call sub_43E800  +
mov eax [ebp-30h] +
sub esp 8 +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov dword ptr [ebp-30h] 0 +
mov eax [ebp-34h] +
jmp loc_43ED13  +
***
xor eax eax +
jmp loc_43ED29  +
***
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_43F030  +
mov [esp+48h+var_3C] offset unk_47C259 +
mov [esp+48h+var_40] offset aLibusb_close +
mov [esp+48h+var_44] 4 +
mov [esp+48h+var_48] 0 +
call sub_43E390  +
mov eax [edi+10h] +
mov eax [eax+8] +
mov ebx eax +
mov [ebp+var_1C] eax +
add eax 68h +
mov [esp+48h+var_48] eax +
mov [ebp+var_20] eax +
call sub_44CBC0  +
mov eax [ebx+6Ch] +
test eax eax +
jz loc_43EF88  +
mov ecx [ebp+var_1C] +
add eax 1 +
mov [ecx+6Ch] eax +
mov eax [ebp+var_20] +
mov [esp+48h+var_48] eax +
call sub_44CC10  +
mov esi [ebp+var_1C] +
mov [esp+48h+var_48] esi +
call sub_44FB40  +
sub esp 4 +
mov [esp+48h+var_48] esi +
call sub_44FB40  +
mov eax esi +
add eax 3Ch +
mov [ebp+var_2C] eax +
sub esp 4 +
mov [esp+48h+var_48] eax +
call sub_44CBC0  +
mov eax [esi+38h] +
mov ecx esi +
add ecx 34h +
lea esi [eax-4] +
mov edx [esi+8] +
cmp ecx eax +
lea ebx [edx-4] +
jnz loc_43EE18  +
jmp loc_43EEA8  +
mov eax [ebx+8] +
lea edx [eax-4] +
lea eax [ebx+4] +
cmp ecx eax +
jz loc_43EEA8  +
mov esi ebx +
mov ebx edx +
cmp edi [esi+30h] +
jnz loc_43EE03  +
test byte ptr [esi+24h] 8 +
jz loc_43EFD4  +
lea edx [esi+28h] +
add esi 30h +
mov [esp+48h+var_48] edx +
mov [ebp+var_28] ecx +
mov [ebp+var_24] edx +
call sub_44CBC0  +
mov ecx [esi-2Ch] +
mov eax [esi-28h] +
mov [eax] ecx +
mov edx [esi-2Ch] +
mov [edx+4] eax +
mov edx [ebp+var_24] +
mov dword ptr [esi-2Ch] 0 +
mov dword ptr [esi-28h] 0 +
mov dword ptr [esi] 0 +
mov [esp+48h+var_48] edx +
call sub_44CC10  +
mov [esp+48h+var_34] edi +
mov [esp+48h+var_38] esi +
mov [esp+48h+var_3C] offset aRemovedTransfe +
mov [esp+48h+var_40] offset aDo_close +
mov [esp+48h+var_44] 4 +
mov [esp+48h+var_48] 0 +
call sub_43E390  +
mov eax [ebx+8] +
mov ecx [ebp+var_28] +
lea edx [eax-4] +
lea eax [ebx+4] +
cmp ecx eax +
jnz loc_43EE14  +
mov eax [ebp+var_2C] +
mov [esp+48h+var_48] eax +
call sub_44CC10  +
mov esi [ebp+var_1C] +
mov [esp+48h+var_48] esi +
lea ebx [esi+24h] +
call sub_44FB70  +
sub esp 4 +
mov [esp+48h+var_48] ebx +
call sub_44CBC0  +
mov edx [edi+8] +
mov eax [edi+0Ch] +
mov [eax] edx +
mov edx [edi+8] +
mov [edx+4] eax +
mov dword ptr [edi+8] 0 +
mov dword ptr [edi+0Ch] 0 +
mov [esp+48h+var_48] ebx +
call sub_44CC10  +
mov [esp+48h+var_48] edi +
call ds:off_480D1C  +
mov eax [edi+10h] +
mov [esp+48h+var_48] eax +
call sub_43E740  +
sub esp 4 +
mov [esp+48h+var_48] edi +
call sub_44CB10  +
mov [esp+48h+var_48] edi +
call free  +
mov eax [ebp+var_20] +
mov [esp+48h+var_48] eax +
call sub_44CBC0  +
mov eax [esi+6Ch] +
mov [ebp+var_24] eax +
sub eax 1 +
test eax eax +
mov [esi+6Ch] eax +
jz loc_43EF50  +
mov eax [ebp+var_20] +
mov [esp+48h+var_48] eax +
call sub_44CC10  +
mov eax [ebp+var_1C] +
mov [ebp+arg_0] eax +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp sub_44FB70  +
mov eax [ebp+var_1C] +
mov edx [eax+80h] +
test edx edx +
jnz loc_43EF32  +
mov edi eax +
add eax 84h +
cmp [edi+88h] eax +
jnz loc_43EF32  +
mov eax edi +
add eax 8Ch +
cmp [edi+90h] eax +
jnz loc_43EF32  +
mov eax [ebp+var_1C] +
mov [esp+48h+var_48] eax +
call sub_43EA70  +
jmp loc_43EF32  +
mov ecx [ebp+var_1C] +
mov ebx [ecx+80h] +
test ebx ebx +
jnz loc_43EDAC  +
lea edx [ecx+84h] +
cmp [ecx+88h] edx +
jnz loc_43EDAC  +
lea edx [ecx+8Ch] +
cmp [ecx+90h] edx +
jnz loc_43EDAC  +
mov eax [ebp+var_1C] +
mov dword ptr [eax+6Ch] 1 +
mov [esp+48h+var_48] eax +
call sub_43EA10  +
jmp loc_43EDB5  +
mov eax [ebp+var_1C] +
mov [esp+48h+var_3C] offset aDeviceHandleCl +
mov [esp+48h+var_40] offset aDo_close +
mov [esp+48h+var_44] 1 +
mov [esp+48h+var_48] eax +
mov [ebp+var_24] ecx +
call sub_43E390  +
mov ecx [ebp+var_24] +
test byte ptr [esi+24h] 4 +
jz loc_43F040  +
mov eax [ebp+var_1C] +
mov [esp+48h+var_3C] offset aACancellationF +
mov [esp+48h+var_40] offset aDo_close +
mov [esp+48h+var_44] 2 +
mov [esp+48h+var_48] eax +
call sub_43E390  +
mov ecx [ebp+var_24] +
jmp loc_43EE27  +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
mov eax [ebp+var_1C] +
mov [esp+48h+var_3C] offset aACancellationH +
mov [esp+48h+var_40] offset aDo_close +
mov [esp+48h+var_44] 1 +
mov [esp+48h+var_48] eax +
mov [ebp+var_24] ecx +
call sub_43E390  +
mov ecx [ebp+var_24] +
jmp loc_43EE27  +
***
push ebp  +
mov ebp esp +
push esi  +
push ebx  +
sub esp 40h +
mov esi [ebp+8] +
mov dword ptr [esp+0Ch] offset unk_47C259 +
mov ebx [ebp+0Ch] +
mov dword ptr [esp+8] offset aLibusb_get_con +
mov dword ptr [esp+4] 4 +
mov dword ptr [esp] 0 +
call sub_43E390  +
mov eax ds:off_480D30 +
test eax eax +
jz loc_43F0D0  +
mov [esp+4] ebx +
mov [esp] esi +
call eax  +
cmp eax 0FFFFFFF4h +
jz loc_43F0D0  +
test eax eax +
jz loc_43F150  +
lea esp [ebp-8] +
pop ebx  +
pop esi  +
pop ebp  +
retn 8  +
***
mov dword ptr [esp+0Ch] offset aFallingBackToC +
mov dword ptr [esp+8] offset aLibusb_get_con +
mov dword ptr [esp+4] 4 +
mov dword ptr [esp] 0 +
mov byte ptr [ebp-9] 0 +
call sub_43E390  +
lea eax [ebp-9] +
mov dword ptr [esp+1Ch] 3E8h +
mov dword ptr [esp+18h] 1 +
mov [esp+14h] eax +
mov dword ptr [esp+10h] 0 +
mov dword ptr [esp+0Ch] 0 +
mov dword ptr [esp+8] 8 +
mov dword ptr [esp+4] 80h +
mov [esp] esi +
call sub_441BE0  +
sub esp 20h +
test eax eax +
jz loc_43F1C3  +
cmp eax 1 +
jnz loc_43F190  +
movzx eax byte ptr [ebp-9] +
mov [ebx] eax +
xor eax eax +
nop   +
mov edx [ebx] +
mov dword ptr [esp+0Ch] offset aActiveConfigD +
mov dword ptr [esp+8] offset aLibusb_get_con +
mov dword ptr [esp+4] 4 +
mov [esp+10h] edx +
mov dword ptr [esp] 0 +
mov [ebp-1Ch] eax +
call sub_43E390  +
mov eax [ebp-1Ch] +
lea esp [ebp-8] +
pop ebx  +
pop esi  +
pop ebp  +
retn 8  +
***
mov [esp+10h] eax +
mov dword ptr [esp+0Ch] offset aControlFailedE +
mov dword ptr [esp+8] offset aLibusb_get_con +
mov dword ptr [esp+4] 4 +
mov dword ptr [esp] 0 +
mov [ebp-1Ch] eax +
call sub_43E390  +
mov eax [ebp-1Ch] +
jmp loc_43F0B9  +
***
mov eax [esi+10h] +
mov eax [eax+8] +
mov dword ptr [esp+0Ch] offset aZeroBytesRetur +
mov dword ptr [esp+8] offset aLibusb_get_con +
mov dword ptr [esp+4] 1 +
mov [esp] eax +
call sub_43E390  +
mov eax 0FFFFFFFFh +
jmp loc_43F0C1  +
***
push ebp  +
mov ebp esp +
push ebx  +
sub esp 24h +
mov ebx [ebp+0Ch] +
mov dword ptr [esp+0Ch] offset aConfigurationD +
mov dword ptr [esp+8] offset aLibusb_set_con +
mov dword ptr [esp+4] 4 +
mov [esp+10h] ebx +
mov dword ptr [esp] 0 +
call sub_43E390  +
mov eax [ebp+8] +
mov [esp+4] ebx +
mov [esp] eax +
call ds:off_480D34  +
add esp 24h +
pop ebx  +
pop ebp  +
retn 8  +
***
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov eax [ebp+arg_4] +
mov [esp+38h+var_2C] offset aInterfaceD +
mov ebx [ebp+arg_0] +
mov [esp+38h+var_30] offset aLibusb_claim_i +
mov [esp+38h+var_34] 4 +
mov [esp+38h+var_28] eax +
mov [esp+38h+var_38] 0 +
call sub_43E390  +
cmp [ebp+arg_4] 1Fh +
jg loc_43F2E7  +
mov eax [ebx+10h] +
mov eax [eax+3Ch] +
test eax eax +
jz loc_43F2E0  +
mov [esp+38h+var_38] ebx +
mov edi 1 +
xor esi esi +
call sub_44CBC0  +
movzx ecx byte ptr [ebp+arg_4] +
shl edi cl +
test [ebx+4] edi +
jz loc_43F2C5  +
mov [esp+38h+var_38] ebx +
call sub_44CC10  +
mov eax esi +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
mov eax [ebp+arg_4] +
mov [esp+38h+var_38] ebx +
mov [esp+38h+var_34] eax +
call ds:off_480D38  +
test eax eax +
mov esi eax +
jnz loc_43F2B1  +
or [ebx+4] edi +
jmp loc_43F2B1  +
mov eax 0FFFFFFFCh +
jmp loc_43F2BB  +
mov eax 0FFFFFFFEh +
jmp loc_43F2BB  +
***
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov eax [ebp+arg_4] +
mov [esp+38h+var_2C] offset aInterfaceD +
mov ebx [ebp+arg_0] +
mov [esp+38h+var_30] offset aLibusb_release +
mov [esp+38h+var_34] 4 +
mov [esp+38h+var_28] eax +
mov [esp+38h+var_38] 0 +
call sub_43E390  +
cmp [ebp+arg_4] 1Fh +
jg loc_43F380  +
mov [esp+38h+var_38] ebx +
mov edi 1 +
mov esi 0FFFFFFFBh +
call sub_44CBC0  +
movzx ecx byte ptr [ebp+arg_4] +
shl edi cl +
test [ebx+4] edi +
jnz loc_43F360  +
mov [esp+38h+var_38] ebx +
call sub_44CC10  +
mov eax esi +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
mov eax [ebp+arg_4] +
mov [esp+38h+var_38] ebx +
mov [esp+38h+var_34] eax +
call ds:off_480D3C  +
test eax eax +
mov esi eax +
jnz loc_43F34A  +
not edi  +
and [ebx+4] edi +
jmp loc_43F34A  +
mov eax 0FFFFFFFEh +
jmp loc_43F354  +
***
push ebp  +
mov ebp esp +
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov esi [ebp+0Ch] +
mov edi [ebp+10h] +
mov dword ptr [esp+0Ch] offset aInterfaceDAlts +
mov ebx [ebp+8] +
mov dword ptr [esp+8] offset aLibusb_set_int +
mov [esp+10h] esi +
mov [esp+14h] edi +
mov dword ptr [esp+4] 4 +
mov dword ptr [esp] 0 +
call sub_43E390  +
cmp esi 1Fh +
jg loc_43F416  +
mov [esp] ebx +
call sub_44CBC0  +
mov eax [ebx+10h] +
mov eax [eax+3Ch] +
test eax eax +
jz loc_43F430  +
mov eax 1 +
mov ecx esi +
shl eax cl +
test [ebx+4] eax +
mov [esp] ebx +
jz loc_43F420  +
call sub_44CC10  +
mov [esp+8] edi +
mov [esp+4] esi +
mov [esp] ebx +
call ds:off_480D40  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov eax 0FFFFFFFEh +
jmp loc_43F40C  +
***
call sub_44CC10  +
mov eax 0FFFFFFFBh +
jmp loc_43F40C  +
***
mov [esp] ebx +
call sub_44CC10  +
mov eax 0FFFFFFFCh +
jmp loc_43F40C  +
***
push ebp  +
mov ebp esp +
push esi  +
push ebx  +
sub esp 20h +
movzx esi byte ptr [ebp+0Ch] +
mov ebx [ebp+8] +
mov dword ptr [esp+0Ch] offset aEndpointX +
mov dword ptr [esp+8] offset aLibusb_clear_h +
mov [esp+10h] esi +
mov dword ptr [esp+4] 4 +
mov dword ptr [esp] 0 +
call sub_43E390  +
mov eax [ebx+10h] +
mov eax [eax+3Ch] +
test eax eax +
jz loc_43F497  +
mov [esp+4] esi +
mov [esp] ebx +
call ds:off_480D44  +
add esp 20h +
pop ebx  +
pop esi  +
pop ebp  +
retn 8  +
***
mov eax 0FFFFFFFCh +
jmp loc_43F48E  +
***
push ebp  +
mov ebp esp +
push ebx  +
sub esp 14h +
mov ebx [ebp+8] +
mov dword ptr [esp+0Ch] offset unk_47C259 +
mov dword ptr [esp+8] offset aLibusb_reset_d +
mov dword ptr [esp+4] 4 +
mov dword ptr [esp] 0 +
call sub_43E390  +
mov eax [ebx+10h] +
mov eax [eax+3Ch] +
test eax eax +
jz loc_43F4F0  +
mov [esp] ebx +
call ds:off_480D48  +
add esp 14h +
pop ebx  +
pop ebp  +
retn 4  +
***
mov eax 0FFFFFFFCh +
jmp loc_43F4E1  +
***
push ebp  +
mov ebp esp +
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov esi [ebp+0Ch] +
mov edi [ebp+14h] +
mov ebx [ebp+8] +
mov dword ptr [esp+0Ch] offset aStreamsUEpsD +
mov [esp+10h] esi +
mov [esp+14h] edi +
mov dword ptr [esp+8] offset aLibusb_alloc_s +
mov dword ptr [esp+4] 4 +
mov dword ptr [esp] 0 +
call sub_43E390  +
mov eax [ebx+10h] +
mov eax [eax+3Ch] +
test eax eax +
jz loc_43F570  +
mov eax ds:dword_480D4C +
test eax eax +
jz loc_43F577  +
mov edx [ebp+10h] +
mov [esp+0Ch] edi +
mov [esp+4] esi +
mov [esp] ebx +
mov [esp+8] edx +
call eax  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn 10h  +
***
mov eax 0FFFFFFFCh +
jmp loc_43F565  +
***
mov eax 0FFFFFFF4h +
jmp loc_43F565  +
***
push ebp  +
mov ebp esp +
push esi  +
push ebx  +
sub esp 20h +
mov esi [ebp+10h] +
mov ebx [ebp+8] +
mov dword ptr [esp+0Ch] offset aEpsD +
mov dword ptr [esp+8] offset aLibusb_free_st +
mov [esp+10h] esi +
mov dword ptr [esp+4] 4 +
mov dword ptr [esp] 0 +
call sub_43E390  +
mov eax [ebx+10h] +
mov eax [eax+3Ch] +
test eax eax +
jz loc_43F5E2  +
mov eax ds:dword_480D50 +
test eax eax +
jz loc_43F5F0  +
mov edx [ebp+0Ch] +
mov [esp+8] esi +
mov [esp] ebx +
mov [esp+4] edx +
call eax  +
add esp 20h +
pop ebx  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov eax 0FFFFFFFCh +
jmp loc_43F5D9  +
***
mov eax 0FFFFFFF4h +
jmp loc_43F5D9  +
***
push ebp  +
mov ebp esp +
push esi  +
push ebx  +
sub esp 20h +
mov esi [ebp+0Ch] +
mov ebx [ebp+8] +
mov dword ptr [esp+0Ch] offset aInterfaceD +
mov dword ptr [esp+8] offset aLibusb_kernel_ +
mov [esp+10h] esi +
mov dword ptr [esp+4] 4 +
mov dword ptr [esp] 0 +
call sub_43E390  +
mov eax [ebx+10h] +
mov eax [eax+3Ch] +
test eax eax +
jz loc_43F660  +
mov eax ds:off_480D54 +
test eax eax +
jz loc_43F667  +
mov [esp+4] esi +
mov [esp] ebx +
call eax  +
add esp 20h +
pop ebx  +
pop esi  +
pop ebp  +
retn 8  +
***
mov eax 0FFFFFFFCh +
jmp loc_43F652  +
***
mov eax 0FFFFFFF4h +
jmp loc_43F652  +
***
push ebp  +
mov ebp esp +
push esi  +
push ebx  +
sub esp 20h +
mov esi [ebp+0Ch] +
mov ebx [ebp+8] +
mov dword ptr [esp+0Ch] offset aInterfaceD +
mov dword ptr [esp+8] offset aLibusb_detach_ +
mov [esp+10h] esi +
mov dword ptr [esp+4] 4 +
mov dword ptr [esp] 0 +
call sub_43E390  +
mov eax [ebx+10h] +
mov eax [eax+3Ch] +
test eax eax +
jz loc_43F6D0  +
mov eax ds:off_480D58 +
test eax eax +
jz loc_43F6D7  +
mov [esp+4] esi +
mov [esp] ebx +
call eax  +
add esp 20h +
pop ebx  +
pop esi  +
pop ebp  +
retn 8  +
***
mov eax 0FFFFFFFCh +
jmp loc_43F6C2  +
***
mov eax 0FFFFFFF4h +
jmp loc_43F6C2  +
***
push ebp  +
mov ebp esp +
push esi  +
push ebx  +
sub esp 20h +
mov esi [ebp+0Ch] +
mov ebx [ebp+8] +
mov dword ptr [esp+0Ch] offset aInterfaceD +
mov dword ptr [esp+8] offset aLibusb_attach_ +
mov [esp+10h] esi +
mov dword ptr [esp+4] 4 +
mov dword ptr [esp] 0 +
call sub_43E390  +
mov eax [ebx+10h] +
mov eax [eax+3Ch] +
test eax eax +
jz loc_43F740  +
mov eax ds:off_480D5C +
test eax eax +
jz loc_43F747  +
mov [esp+4] esi +
mov [esp] ebx +
call eax  +
add esp 20h +
pop ebx  +
pop esi  +
pop ebp  +
retn 8  +
***
mov eax 0FFFFFFFCh +
jmp loc_43F732  +
***
mov eax 0FFFFFFF4h +
jmp loc_43F732  +
***
push edi  +
push esi  +
push ebx  +
sub esp 4Ch +
mov edi [ebp+arg_0] +
mov [esp+58h+var_58] offset aLibusb_debug +
call getenv  +
mov [esp+58h+var_58] offset unk_485498 +
mov esi eax +
call sub_44CC70  +
mov ebx ds:dword_485490 +
test ebx ebx +
jz loc_43FA91  +
test edi edi +
jz loc_43FA40  +
mov [esp+58h+var_54] 9Ch +
mov [esp+58h+var_58] 1 +
call calloc  +
test eax eax +
mov ebx eax +
jz loc_43FAC6  +
test esi esi +
jz loc_43F7C0  +
mov [esp+58h+var_58] esi +
call atoi  +
test eax eax +
mov [ebx] eax +
jnz loc_43FA30  +
mov edx ds:dword_485488 +
test edx edx +
jz loc_43FAD2  +
mov [esp+58h+var_38] offset unk_47C259 +
lea esi [ebx+10h] +
mov [esp+58h+var_3C] 2AFCh +
mov [esp+58h+var_40] 14h +
mov [esp+58h+var_44] 0 +
mov [esp+58h+var_48] 1 +
mov [esp+58h+var_4C] offset aLibusbVU_U_U_U +
mov [esp+58h+var_50] offset aLibusb_init +
mov [esp+58h+var_54] 4 +
mov [esp+58h+var_58] 0 +
call sub_43E390  +
lea eax [ebx+18h] +
mov [esp+58h+var_54] 0 +
mov [esp+58h+var_58] eax +
mov [ebp+var_1C] eax +
call sub_44CAA0  +
lea eax [ebx+24h] +
mov [esp+58h+var_54] 0 +
mov [esp+58h+var_58] eax +
mov [ebp+var_24] eax +
call sub_44CAA0  +
lea eax [ebx+30h] +
mov [esp+58h+var_54] 0 +
mov [esp+58h+var_58] eax +
mov [ebp+var_28] eax +
call sub_44CAA0  +
lea eax [ebx+1Ch] +
mov [ebx+20h] eax +
mov [ebx+1Ch] eax +
lea eax [ebx+28h] +
mov [ebx+14h] esi +
mov [ebx+10h] esi +
mov [ebx+2Ch] eax +
mov [ebx+28h] eax +
mov [esp+58h+var_58] offset unk_485484 +
call sub_44CC70  +
mov eax dword_461280 +
mov edx ds:dword_48715C +
test eax eax +
jnz loc_43FA10  +
lea eax [ebx+94h] +
mov [ebx+98h] edx +
mov dword ptr [ebx+94h] offset dword_487158 +
mov [edx] eax +
mov [esp+58h+var_58] offset unk_485484 +
mov ds:dword_48715C eax +
call sub_44CCD0  +
mov eax ds:off_480D08 +
test eax eax +
jz loc_43F8D4  +
mov [esp+58h+var_58] ebx +
call eax  +
test eax eax +
mov [ebp+var_20] eax +
jnz loc_43F910  +
mov [esp+58h+var_58] ebx +
call sub_450400  +
test eax eax +
mov [ebp+var_20] eax +
js loc_43F905  +
mov [esp+58h+var_58] offset unk_485498 +
call sub_44CCD0  +
test edi edi +
jz loc_43FB08  +
mov [edi] ebx +
lea esp [ebp-0Ch] +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
mov eax ds:off_480D0C +
test eax eax +
jz loc_43F910  +
call eax  +
cmp ebx ds:dword_485488 +
jz loc_43FAB0  +
mov [esp+58h+var_58] offset unk_485484 +
call sub_44CC70  +
mov edx [ebx+94h] +
mov eax [ebx+98h] +
mov [eax] edx +
mov edx [ebx+94h] +
mov [edx+4] eax +
mov dword ptr [ebx+94h] 0 +
mov dword ptr [ebx+98h] 0 +
mov [esp+58h+var_58] offset unk_485484 +
call sub_44CCD0  +
mov eax [ebp+var_1C] +
mov [esp+58h+var_58] eax +
call sub_44CBC0  +
mov ecx [ebx+14h] +
lea edx [ecx-1Ch] +
cmp esi ecx +
mov eax [edx+20h] +
lea edi [eax-1Ch] +
jnz loc_43F9D4  +
lea esi [esi+0] +
mov esi [ebp+var_1C] +
mov [esp+58h+var_58] esi +
call sub_44CC10  +
mov eax [ebp+var_24] +
mov [esp+58h+var_58] eax +
call sub_44CB10  +
mov [esp+58h+var_58] esi +
call sub_44CB10  +
mov eax [ebp+var_28] +
mov [esp+58h+var_58] eax +
call sub_44CB10  +
mov [esp+58h+var_58] ebx +
call free  +
mov [esp+58h+var_58] offset unk_485498 +
call sub_44CCD0  +
mov eax [ebp+var_20] +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
mov edx edi +
mov edi ecx +
mov ecx [edx+1Ch] +
mov [eax] ecx +
mov ecx [edx+1Ch] +
mov [ecx+4] eax +
mov dword ptr [edx+1Ch] 0 +
mov dword ptr [edx+20h] 0 +
mov [esp+0] edx +
call sub_43E740  +
mov eax [edi+20h] +
lea edx [edi+1Ch] +
lea ecx [eax-1Ch] +
sub esp 4 +
cmp esi edx +
jnz loc_43F9D0  +
jmp loc_43F980  +
mov dword_461280 0 +
mov edx offset dword_487158 +
mov ds:dword_487158 offset dword_487158 +
jmp loc_43F896  +
mov dword ptr [ebx+4] 1 +
jmp loc_43F7C0  +
mov ecx ds:dword_485488 +
test ecx ecx +
jz loc_43F78C  +
mov [esp+58h+var_4C] offset aReusingDefault +
mov [esp+58h+var_50] offset aLibusb_init +
mov [esp+58h+var_54] 4 +
mov [esp+58h+var_58] 0 +
call sub_43E390  +
mov [esp+58h+var_58] offset unk_485498 +
add ds:dword_48549C 1 +
call sub_44CCD0  +
lea esp [ebp-0Ch] +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
mov [esp+58h+var_54] 0 +
mov [esp+58h+var_58] offset dword_485490 +
call sub_459290  +
jmp loc_43F784  +
mov ds:dword_485488 0 +
sub ds:dword_48549C 1 +
jmp loc_43F91C  +
mov [ebp+var_20] 0FFFFFFF5h +
jmp loc_43F9B1  +
mov [esp+58h+var_4C] offset aCreatedDefault +
mov [esp+58h+var_50] offset aLibusb_init +
mov [esp+58h+var_54] 4 +
mov [esp+58h+var_58] 0 +
mov ds:dword_485488 ebx +
add ds:dword_48549C 1 +
call sub_43E390  +
jmp loc_43F7CE  +
xor eax eax +
jmp loc_43F9C0  +
***
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov ebx [ebp+arg_0] +
mov [esp+48h+var_3C] offset unk_47C259 +
mov [esp+48h+var_40] offset aLibusb_exit +
mov [esp+48h+var_44] 4 +
mov [esp+48h+var_48] 0 +
mov [ebp+var_20] 0 +
mov [ebp+var_1C] 0 +
call sub_43E390  +
test ebx ebx +
mov [esp+48h+var_48] offset unk_485498 +
cmovz ebx ds:dword_485488 +
call sub_44CC70  +
cmp ebx ds:dword_485488 +
jz loc_43FC70  +
mov [esp+48h+var_48] offset unk_485498 +
call sub_44CCD0  +
mov [esp+48h+var_48] offset unk_485484 +
call sub_44CC70  +
mov edx [ebx+94h] +
mov eax [ebx+98h] +
mov [eax] edx +
mov edx [ebx+94h] +
mov [edx+4] eax +
mov dword ptr [ebx+94h] 0 +
mov dword ptr [ebx+98h] 0 +
mov [esp+48h+var_48] offset unk_485484 +
call sub_44CCD0  +
mov eax ds:off_480D10 +
test eax eax +
jz loc_43FCC0  +
lea eax [ebx+1Ch] +
mov [ebp+var_30] eax +
lea eax [ebx+18h] +
mov [ebp+var_2C] eax +
lea esi [ebx+10h] +
cmp [ebx+14h] esi +
jz loc_43FBFF  +
mov [esp+48h+var_3C] offset aSomeLibusb_dev +
mov [esp+48h+var_40] offset aLibusb_exit +
mov [esp+48h+var_44] 2 +
mov [esp+48h+var_48] ebx +
call sub_43E390  +
mov eax [ebp+var_30] +
cmp eax [ebx+20h] +
jz loc_43FC27  +
mov [esp+48h+var_3C] offset aApplicationLef +
mov [esp+48h+var_40] offset aLibusb_exit +
mov [esp+48h+var_44] 2 +
mov [esp+48h+var_48] ebx +
call sub_43E390  +
mov [esp+48h+var_48] ebx +
call sub_450650  +
mov eax ds:off_480D0C +
test eax eax +
jz loc_43FC3A  +
call eax  +
lea eax [ebx+24h] +
mov [esp+48h+var_48] eax +
call sub_44CB10  +
mov eax [ebp+var_2C] +
mov [esp+48h+var_48] eax +
call sub_44CB10  +
lea eax [ebx+30h] +
mov [esp+48h+var_48] eax +
call sub_44CB10  +
mov [esp+48h+var_48] ebx +
call free  +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
mov eax ds:dword_48549C +
sub eax 1 +
test eax eax +
mov ds:dword_48549C eax +
jle loc_43FD45  +
mov [esp+48h+var_3C] offset aNotDestroyingD +
mov [esp+48h+var_40] offset aLibusb_exit +
mov [esp+48h+var_44] 4 +
mov [esp+48h+var_48] 0 +
call sub_43E390  +
mov [esp+48h+var_48] offset unk_485498 +
call sub_44CCD0  +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
mov [esp+48h+var_48] ebx +
call sub_44D790  +
lea eax [ebx+1Ch] +
cmp [ebx+20h] eax +
mov [ebp+var_30] eax +
jz loc_43FD78  +
lea eax [ebx+18h] +
mov [esp+48h+var_48] eax +
lea esi [ebx+10h] +
mov [ebp+var_2C] eax +
call sub_44CBC0  +
mov ecx [ebx+14h] +
lea eax [ecx-1Ch] +
cmp esi ecx +
mov edx [eax+20h] +
lea edi [edx-1Ch] +
jnz loc_43FD04  +
jmp loc_43FD35  +
mov eax edi +
mov edi ecx +
mov ecx [eax+1Ch] +
mov [edx] ecx +
mov ecx [eax+1Ch] +
mov [ecx+4] edx +
mov dword ptr [eax+1Ch] 0 +
mov dword ptr [eax+20h] 0 +
mov [esp+48h+var_48] eax +
call sub_43E740  +
mov edx [edi+20h] +
lea eax [edi+1Ch] +
lea ecx [edx-1Ch] +
sub esp 4 +
cmp esi eax +
jnz loc_43FD00  +
mov eax [ebp+var_2C] +
mov [esp+48h+var_48] eax +
call sub_44CC10  +
jmp loc_43FBDA  +
mov [esp+48h+var_3C] offset aDestroyingDefa +
mov [esp+48h+var_40] offset aLibusb_exit +
mov [esp+48h+var_44] 4 +
mov [esp+48h+var_48] 0 +
call sub_43E390  +
mov ds:dword_485488 0 +
jmp loc_43FB6F  +
lea eax [ebp+var_20] +
mov [esp+48h+var_44] eax +
mov [esp+48h+var_48] ebx +
call sub_450200  +
sub esp 8 +
jmp loc_43FCD7  +
***
mov eax [ebp+arg_0] +
lea edx [eax+63h] +
mov eax offset aUnknown_0 +
cmp edx 69h +
ja loc_43FDAA  +
mov eax ds:off_47C7C0[edx*4] +
pop ebp  +
retn 4  +
***
push ebp  +
mov eax offset unk_47CBC4 +
mov ebp esp +
pop ebp  +
retn   +
***
mov ebp esp +
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov [ebp+var_1C] eax +
mov eax [eax] +
test eax eax +
jz loc_43FE56  +
mov edx [edx+4] +
test edx edx +
jle loc_43FE45  +
xor esi esi +
lea edx [esi+esi*2] +
lea edi [eax+edx*8] +
mov eax [edi+10h] +
test eax eax +
jz loc_43FDF6  +
mov [esp+28h+var_28] eax +
call free  +
mov ecx [edi+0Ch] +
test ecx ecx +
jz loc_43FE2E  +
cmp byte ptr [edi+4] 0 +
jz loc_43FE26  +
xor ebx ebx +
lea eax [ebx+ebx*4] +
mov eax [ecx+eax*4+0Ch] +
test eax eax +
jz loc_43FE1B  +
mov [esp+28h+var_28] eax +
call free  +
mov ecx [edi+0Ch] +
movzx eax byte ptr [edi+4] +
add ebx 1 +
cmp eax ebx +
jg loc_43FE05  +
mov [esp+28h+var_28] ecx +
call free  +
mov eax [ebp+var_1C] +
add esi 1 +
cmp [eax+4] esi +
jle loc_43FE40  +
mov eax [eax] +
jmp loc_43FDE1  +
mov eax [ebp+var_1C] +
mov eax [eax] +
mov [esp+28h+var_28] eax +
call free  +
mov eax [ebp+var_1C] +
mov dword ptr [eax] 0 +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push esi  +
mov esi eax +
push ebx  +
sub esp 10h +
mov eax [eax+0Ch] +
test eax eax +
jz loc_43FE9E  +
cmp byte ptr [esi+4] 0 +
jz loc_43FE96  +
xor ebx ebx +
lea esi [esi+0] +
lea eax [eax+ebx*8] +
add ebx 1 +
call sub_43FDC0  +
movzx eax byte ptr [esi+4] +
cmp eax ebx +
mov eax [esi+0Ch] +
jg loc_43FE80  +
mov [esp+18h+var_18] eax +
call free  +
mov eax [esi+10h] +
test eax eax +
jz loc_43FEAD  +
mov [esp+18h+var_18] eax +
call free  +
add esp 10h +
pop ebx  +
pop esi  +
pop ebp  +
retn   +
***
mov edx [ebp+arg_4] +
push edi  +
push esi  +
mov esi [ebp+arg_C] +
push ebx  +
mov ebx [ebp+arg_8] +
movzx ecx byte ptr [edx] +
test cl cl +
jz loc_43FFB6  +
mov eax [ebp+arg_0] +
jmp loc_43FF1C  +
cmp cl 75h +
jz loc_43FF80  +
cmp cl 77h +
jnz loc_43FF12  +
mov ecx ebx +
and ecx 1 +
add ebx ecx +
test esi esi +
jnz loc_43FFA2  +
movzx edi byte ptr [eax+1] +
movzx ecx byte ptr [eax] +
shl edi 8 +
or ecx edi +
mov [ebx] cx +
add eax 2 +
add ebx 2 +
add edx 1 +
movzx ecx byte ptr [edx] +
test cl cl +
jz loc_43FF3E  +
cmp cl 64h +
jz loc_43FF46  +
jg loc_43FEE0  +
cmp cl 62h +
jnz loc_43FF12  +
movzx ecx byte ptr [eax] +
add edx 1 +
add ebx 1 +
add eax 1 +
mov [ebx-1] cl +
movzx ecx byte ptr [edx] +
test cl cl +
jnz loc_43FF1C  +
sub eax [ebp+arg_0] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ecx ebx +
and ecx 1 +
add ebx ecx +
test esi esi +
jnz loc_43FFB0  +
movzx ecx byte ptr [eax+3] +
movzx edi byte ptr [eax+2] +
shl ecx 18h +
shl edi 10h +
or ecx edi +
movzx edi byte ptr [eax] +
or ecx edi +
movzx edi byte ptr [eax+1] +
shl edi 8 +
or ecx edi +
mov [ebx] ecx +
add eax 4 +
add ebx 4 +
jmp loc_43FF12  +
mov ecx [eax] +
add ebx 10h +
add eax 10h +
mov [ebx-10h] ecx +
mov ecx [eax-0Ch] +
mov [ebx-0Ch] ecx +
mov ecx [eax-8] +
mov [ebx-8] ecx +
mov ecx [eax-4] +
mov [ebx-4] ecx +
jmp loc_43FF12  +
movzx ecx word ptr [eax] +
mov [ebx] cx +
jmp loc_43FF0C  +
mov ecx [eax] +
mov [ebx] ecx +
jmp loc_43FF71  +
xor eax eax +
jmp loc_43FF41  +
***
push edi  +
push esi  +
mov esi edx +
push ebx  +
mov ebx ecx +
sub esp 7Ch +
mov [esp+88h+var_88] 18h +
mov [ebp+var_50] eax +
call malloc  +
test eax eax +
mov [ebp+var_40] eax +
jz loc_440963  +
cmp ebx 8 +
jle loc_44085B  +
mov edi [ebp+var_40] +
mov eax [ebp+arg_0] +
mov [esp+88h+var_84] offset aBbwbbbbb +
mov [esp+88h+var_88] esi +
mov [esp+88h+var_80] edi +
mov [esp+88h+var_7C] eax +
call sub_43FEC0  +
movzx eax byte ptr [edi+1] +
cmp al 2 +
jnz loc_440894  +
mov eax [ebp+var_40] +
movzx eax byte ptr [eax] +
cmp al 8 +
jbe loc_440977  +
movzx edi al +
cmp ebx edi +
jl loc_440985  +
mov eax [ebp+var_40] +
movzx eax byte ptr [eax+4] +
cmp al 20h +
mov byte ptr [ebp+var_2C] al +
ja loc_440923  +
movzx ecx byte ptr [ebp+var_2C] +
shl ecx 3 +
mov [esp+88h+var_88] ecx +
mov [ebp+var_30] ecx +
call malloc  +
mov edx eax +
mov eax [ebp+var_40] +
test edx edx +
mov [eax+0Ch] edx +
jz loc_44096D  +
mov ecx [ebp+var_30] +
add esi edi +
sub ebx edi +
mov [esp+88h+var_84] 0 +
mov edi ebx +
mov [esp+88h+var_88] edx +
mov [ebp+var_30] edx +
mov [esp+88h+var_80] ecx +
call memset  +
mov eax [ebp+var_40] +
cmp byte ptr [ebp+var_2C] 0 +
mov dword ptr [eax+10h] 0 +
mov dword ptr [eax+14h] 0 +
jz loc_4404B0  +
mov edx [ebp+var_30] +
mov [ebp+var_58] 0 +
mov [ebp+var_3C] edx +
cmp edi 1 +
jle loc_4408D3  +
mov ebx esi +
jmp loc_44011D  +
cmp eax edi +
jg loc_4403E0  +
movzx eax byte ptr [ebp+var_1E+1] +
lea edx [eax-4] +
cmp dl 1 +
jbe loc_4401C0  +
lea edx [eax-1] +
cmp dl 1 +
jbe loc_4401C0  +
mov [esp+88h+var_78] eax +
mov [esp+88h+var_7C] offset aSkippingDescri +
mov [esp+88h+var_80] offset aParse_configur +
mov [esp+88h+var_84] 4 +
mov [esp+88h+var_88] 0 +
call sub_43E390  +
movzx eax byte ptr [ebp+var_1E] +
sub edi eax +
add ebx eax +
cmp edi 1 +
jle loc_4401C0  +
lea eax [ebp+var_1E] +
mov [esp+88h+var_7C] 0 +
mov [esp+88h+var_80] eax +
mov [esp+88h+var_84] offset aBb +
mov [esp+88h+var_88] ebx +
call sub_43FEC0  +
movzx eax byte ptr [ebp+var_1E] +
cmp al 1 +
ja loc_4400C0  +
mov [esp+88h+var_78] eax +
mov eax [ebp+var_50] +
mov ebx 0FFFFFFFFh +
mov [esp+88h+var_7C] offset aInvalidExtraCo +
mov [esp+88h+var_80] offset aParse_configur +
mov [esp+88h+var_84] 1 +
mov [esp+88h+var_88] eax +
call sub_43E390  +
mov eax [ebp+var_40] +
call sub_43FE60  +
mov eax ebx +
mov [esp+88h+var_78] eax +
mov [ebp+var_2C] eax +
mov eax [ebp+var_50] +
mov [esp+88h+var_7C] offset aParse_config_0 +
mov [esp+88h+var_80] offset aRaw_desc_to_co +
mov [esp+88h+var_84] 1 +
mov [esp+88h+var_88] eax +
call sub_43E390  +
mov eax [ebp+var_40] +
mov [esp+88h+var_88] eax +
call free  +
mov eax [ebp+var_2C] +
add esp 7Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [ebp+var_5C] ebx +
sub ebx esi +
test ebx ebx +
jz loc_4401D7  +
mov eax [ebp+var_40] +
mov edx [eax+14h] +
test edx edx +
jz loc_4407F4  +
mov eax [ebp+var_3C] +
cmp edi 8 +
mov dword ptr [eax+4] 0 +
jle loc_440954  +
mov ebx [ebp+var_5C] +
mov esi edi +
xor eax eax +
mov [ebp+var_64] edi +
mov [ebp+var_38] 0 +
mov [ebp+var_54] 0FFFFFFFFh +
mov edi ebx +
mov ecx [ebp+var_3C] +
lea eax [eax+eax*2+3] +
shl eax 3 +
mov ebx [ecx] +
mov [esp+88h+var_84] eax +
mov [esp+88h+var_88] ebx +
call realloc  +
test eax eax +
jz loc_440825  +
mov ecx [ebp+var_3C] +
mov edx [ecx+4] +
mov [ecx] eax +
mov [esp+88h+var_7C] 0 +
mov [esp+88h+var_84] offset aBbbbbbbbb +
lea edx [edx+edx*2] +
lea eax [eax+edx*8] +
mov ebx eax +
mov [esp+88h+var_80] eax +
mov [esp+88h+var_88] edi +
mov [ebp+var_2C] eax +
call sub_43FEC0  +
movzx eax byte ptr [ebx+1] +
cmp al 4 +
jnz loc_4408EC  +
mov eax [ebp+var_2C] +
movzx eax byte ptr [eax] +
cmp al 8 +
jbe loc_4408C2  +
cmp eax esi +
jg loc_4408AA  +
mov eax [ebp+var_2C] +
movzx eax byte ptr [eax+4] +
cmp al 20h +
ja loc_4408DB  +
mov eax [ebp+var_3C] +
add dword ptr [eax+4] 1 +
mov eax [ebp+var_2C] +
cmp [ebp+var_54] 0FFFFFFFFh +
mov dword ptr [eax+10h] 0 +
mov dword ptr [eax+14h] 0 +
mov dword ptr [eax+0Ch] 0 +
jz loc_4403D4  +
mov eax [ebp+var_2C] +
movzx eax byte ptr [eax] +
add [ebp+var_38] eax +
sub esi eax +
lea ebx [edi+eax] +
cmp esi 1 +
mov edi ebx +
jle loc_44039A  +
mov [ebp+var_30] ebx +
mov ebx [ebp+var_38] +
jmp loc_4402F7  +
cmp eax esi +
jg loc_440452  +
movzx edx byte ptr [ebp+var_1E+3] +
lea ecx [edx-4] +
cmp cl 1 +
jbe loc_440357  +
sub edx 1 +
cmp dl 1 +
jbe loc_440357  +
sub esi eax +
add edi eax +
add ebx eax +
cmp esi 1 +
jle loc_440357  +
lea eax [ebp+var_1E+2] +
mov [esp+88h+var_7C] 0 +
mov [esp+88h+var_80] eax +
mov [esp+88h+var_84] offset aBb +
mov [esp+88h+var_88] edi +
call sub_43FEC0  +
movzx eax byte ptr [ebp+var_1E+2] +
cmp al 1 +
ja loc_4402D0  +
mov [esp+88h+var_78] eax +
mov [esp+88h+var_7C] offset aInvalidExtraIn +
mov [esp+88h+var_80] offset aParse_interfac +
mov eax [ebp+var_50] +
mov ebx 0FFFFFFFFh +
mov [esp+88h+var_84] 1 +
mov [esp+88h+var_88] eax +
call sub_43E390  +
mov eax [ebp+var_3C] +
call sub_43FDC0  +
jmp loc_440174  +
mov [ebp+var_38] ebx +
mov ebx [ebp+var_30] +
mov edx edi +
sub edx ebx +
test edx edx +
jz loc_44039A  +
mov [esp+88h+var_88] edx +
mov [ebp+var_30] edx +
call malloc  +
mov ecx [ebp+var_2C] +
test eax eax +
mov [ecx+10h] eax +
jz loc_44099A  +
mov edx [ebp+var_30] +
mov [esp+88h+var_84] ebx +
mov [esp+88h+var_88] eax +
mov [esp+88h+var_80] edx +
call memcpy  +
mov ecx [ebp+var_2C] +
mov edx [ebp+var_30] +
mov [ecx+14h] edx +
mov eax [ebp+var_2C] +
movzx eax byte ptr [eax+4] +
test al al +
jnz loc_4404C0  +
cmp esi 8 +
jle loc_440842  +
cmp byte ptr [edi+1] 4 +
jnz loc_440842  +
movzx eax byte ptr [edi+2] +
cmp eax [ebp+var_54] +
jnz loc_440842  +
mov eax [ebp+var_3C] +
mov eax [eax+4] +
jmp loc_440204  +
movzx eax byte ptr [eax+2] +
mov [ebp+var_54] eax +
jmp loc_4402AD  +
mov [esp+88h+var_74] eax +
mov eax [ebp+var_50] +
mov [esp+88h+var_78] edi +
mov [esp+88h+var_7C] offset aShortExtraConf +
mov [esp+88h+var_80] offset aParse_configur +
mov [esp+88h+var_88] eax +
mov [esp+88h+var_84] 2 +
call sub_43E390  +
mov ecx [ebp+var_40] +
movzx eax byte ptr [ebp+var_58] +
mov [ecx+4] al +
test edi edi +
jz loc_440440  +
mov eax [ebp+var_50] +
mov [esp+88h+var_78] edi +
mov [esp+88h+var_7C] offset aStillDBytesOfD +
mov [esp+88h+var_80] offset aRaw_desc_to_co +
mov [esp+88h+var_84] 2 +
mov [esp+88h+var_88] eax +
call sub_43E390  +
mov eax [ebp+arg_4] +
mov ecx [ebp+var_40] +
mov [eax] ecx +
add esp 7Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edi [ebp+var_64] +
mov [ebp+var_38] ebx +
mov [esp+88h+var_74] eax +
mov [esp+88h+var_78] esi +
mov [esp+88h+var_7C] offset aShortExtraIntf +
mov eax [ebp+var_50] +
mov [esp+88h+var_80] offset aParse_interfac +
mov [esp+88h+var_84] 2 +
mov [esp+88h+var_88] eax +
call sub_43E390  +
mov eax [ebp+var_38] +
test eax eax +
jz loc_440954  +
mov eax [ebp+var_38] +
mov esi [ebp+var_5C] +
add [ebp+var_58] 1 +
add [ebp+var_3C] 8 +
sub edi eax +
add esi eax +
mov eax [ebp+var_40] +
movzx eax byte ptr [eax+4] +
cmp [ebp+var_58] eax +
jl loc_4400AF  +
test edi edi +
jns loc_440415  +
mov eax edi +
jmp loc_44017E  +
lea eax [eax+eax*4] +
lea edx ds:0[eax*4] +
mov [esp+88h+var_88] edx +
mov [ebp+var_30] edx +
call malloc  +
mov ebx eax +
mov eax [ebp+var_2C] +
test ebx ebx +
mov [eax+0Ch] ebx +
jz loc_44099A  +
mov edx [ebp+var_30] +
mov [esp+88h+var_84] 0 +
mov [esp+88h+var_88] ebx +
mov [esp+88h+var_80] edx +
call memset  +
mov eax [ebp+var_2C] +
cmp byte ptr [eax+4] 0 +
jz loc_4403A9  +
cmp esi 1 +
jle loc_4406F8  +
lea eax [ebx+14h] +
mov [ebp+var_48] eax +
mov [ebp+var_4C] ebx +
mov [ebp+var_44] 0 +
mov [ebp+var_34] edi +
mov [ebp+var_30] esi +
lea eax [ebp+var_1A] +
mov [esp+88h+var_80] eax +
mov eax [ebp+var_34] +
mov [esp+88h+var_7C] 0 +
mov [esp+88h+var_84] offset aBb +
mov [esp+88h+var_88] eax +
call sub_43FEC0  +
movzx eax byte ptr [ebp+var_1A+1] +
cmp al 5 +
jnz loc_440658  +
movzx eax byte ptr [ebp+var_1A] +
movzx edx al +
cmp edx [ebp+var_30] +
jg loc_440757  +
cmp al 8 +
ja loc_440731  +
cmp al 6 +
jbe loc_44084A  +
mov eax [ebp+arg_0] +
mov [esp+88h+var_84] offset aBbbbwb +
mov [esp+88h+var_7C] eax +
mov eax [ebp+var_4C] +
mov [esp+88h+var_80] eax +
mov eax [ebp+var_34] +
mov [esp+88h+var_88] eax +
call sub_43FEC0  +
movzx edi byte ptr [ebp+var_1A] +
mov ebx [ebp+var_30] +
mov eax [ebp+var_34] +
sub ebx edi +
add eax edi +
cmp ebx 1 +
mov [ebp+var_60] eax +
jle loc_4406AB  +
mov esi eax +
jmp loc_440614  +
cmp eax ebx +
jg loc_4407C4  +
movzx eax byte ptr [ebp+var_1A+1] +
lea edx [eax-4] +
cmp dl 1 +
jbe loc_4406A0  +
lea edx [eax-1] +
cmp dl 1 +
jbe loc_4406A0  +
mov [esp+88h+var_78] eax +
mov [esp+88h+var_7C] offset aSkippingDesc_0 +
mov [esp+88h+var_80] offset aParse_endpoint +
mov [esp+88h+var_84] 4 +
mov [esp+88h+var_88] 0 +
call sub_43E390  +
movzx eax byte ptr [ebp+var_1A] +
sub ebx eax +
add esi eax +
add edi eax +
cmp ebx 1 +
jle loc_4406A0  +
lea eax [ebp+var_1A] +
mov [esp+88h+var_7C] 0 +
mov [esp+88h+var_80] eax +
mov [esp+88h+var_84] offset aBb +
mov [esp+88h+var_88] esi +
call sub_43FEC0  +
movzx eax byte ptr [ebp+var_1A] +
cmp al 1 +
ja loc_4405B5  +
mov [esp+88h+var_78] eax +
mov [esp+88h+var_7C] offset aInvalidExtraEp +
mov [esp+88h+var_80] offset aParse_endpoint +
jmp loc_440332  +
mov [esp+88h+var_78] eax +
mov eax [ebp+var_50] +
mov [esp+88h+var_74] 5 +
mov edi [ebp+var_34] +
mov [esp+88h+var_7C] offset aUnexpectedDesc +
mov esi [ebp+var_30] +
mov [esp+88h+var_80] offset aParse_endpoint +
mov [esp+88h+var_84] 1 +
mov [esp+88h+var_88] eax +
call sub_43E390  +
mov ecx [ebp+var_2C] +
movzx eax byte ptr [ebp+var_44] +
mov [ecx+4] al +
jmp loc_4403A9  +
sub esi [ebp+var_60] +
test esi esi +
jnz loc_440790  +
mov eax [ebp+var_4C] +
mov dword ptr [eax+0Ch] 0 +
mov dword ptr [eax+10h] 0 +
test edi edi +
jz loc_4409BF  +
mov eax [ebp+var_2C] +
add [ebp+var_44] 1 +
add [ebp+var_34] edi +
add [ebp+var_38] edi +
movzx eax byte ptr [eax+4] +
sub [ebp+var_30] edi +
cmp [ebp+var_44] eax +
jge loc_440837  +
mov eax [ebp+var_48] +
add [ebp+var_48] 14h +
cmp [ebp+var_30] 1 +
mov [ebp+var_4C] eax +
jg loc_440528  +
mov esi [ebp+var_30] +
mov eax [ebp+var_50] +
mov ebx 0FFFFFFFFh +
mov [esp+88h+var_74] 2 +
mov [esp+88h+var_78] esi +
mov [esp+88h+var_7C] offset aShortEndpointD +
mov [esp+88h+var_80] offset aParse_endpoint +
mov [esp+88h+var_84] 1 +
mov [esp+88h+var_88] eax +
call sub_43E390  +
jmp loc_44034A  +
mov eax [ebp+arg_0] +
mov [esp+88h+var_84] offset aBbbbwbbb +
mov [esp+88h+var_7C] eax +
mov eax [ebp+var_4C] +
mov [esp+88h+var_80] eax +
mov eax [ebp+var_34] +
mov [esp+88h+var_88] eax +
call sub_43FEC0  +
jmp loc_440597  +
mov esi [ebp+var_30] +
mov eax [ebp+var_50] +
mov [esp+88h+var_74] edx +
mov edi [ebp+var_34] +
mov [esp+88h+var_7C] offset aShortEndpointD +
mov [esp+88h+var_78] esi +
mov [esp+88h+var_80] offset aParse_endpoint +
mov [esp+88h+var_84] 2 +
mov [esp+88h+var_88] eax +
call sub_43E390  +
jmp loc_44068D  +
mov [esp+88h+var_88] esi +
call malloc  +
mov ecx [ebp+var_4C] +
test eax eax +
mov [ecx+0Ch] eax +
jz loc_4409A4  +
mov ecx [ebp+var_60] +
mov [esp+88h+var_80] esi +
mov [esp+88h+var_88] eax +
mov [esp+88h+var_84] ecx +
call memcpy  +
mov eax [ebp+var_4C] +
mov [eax+10h] esi +
jmp loc_4406BC  +
mov [esp+88h+var_74] eax +
mov eax [ebp+var_50] +
mov [esp+88h+var_78] ebx +
mov [esp+88h+var_7C] offset aShortExtraEpDe +
mov [esp+88h+var_80] offset aParse_endpoint +
mov [esp+88h+var_84] 2 +
mov [esp+88h+var_88] eax +
call sub_43E390  +
jmp loc_4406BC  +
mov [esp+88h+var_88] ebx +
call malloc  +
mov ecx [ebp+var_40] +
test eax eax +
mov [ecx+10h] eax +
jz loc_4409B5  +
mov [esp+88h+var_80] ebx +
mov [esp+88h+var_84] esi +
mov [esp+88h+var_88] eax +
call memcpy  +
mov ecx [ebp+var_40] +
mov [ecx+14h] ebx +
jmp loc_4401D7  +
mov [esp+88h+var_88] ebx +
mov ebx 0FFFFFFF5h +
call free  +
jmp loc_44034A  +
mov edi [ebp+var_34] +
mov esi [ebp+var_30] +
jmp loc_4403A9  +
mov edi [ebp+var_64] +
jmp loc_440483  +
mov [esp+88h+var_78] edx +
mov [esp+88h+var_7C] offset aInvalidEndpoin +
jmp loc_44064B  +
mov [esp+88h+var_74] 9 +
mov [esp+88h+var_78] ebx +
mov [esp+88h+var_7C] offset aShortConfigDes +
mov eax [ebp+var_50] +
mov [esp+88h+var_80] offset aParse_configur +
mov [esp+88h+var_84] 1 +
mov [esp+88h+var_88] eax +
call sub_43E390  +
mov eax 0FFFFFFFFh +
jmp loc_44017E  +
mov [esp+88h+var_74] 2 +
mov [esp+88h+var_78] eax +
mov [esp+88h+var_7C] offset aUnexpectedDesc +
jmp loc_44086F  +
mov edi [ebp+var_64] +
mov [esp+88h+var_74] eax +
mov [esp+88h+var_78] esi +
mov [esp+88h+var_7C] offset aShortIntfDescr +
jmp loc_440468  +
mov [esp+88h+var_78] eax +
mov [esp+88h+var_7C] offset aInvalidInterfa +
jmp loc_44032A  +
mov [ebp+var_5C] esi +
jmp loc_4401D7  +
mov [esp+88h+var_78] eax +
mov [esp+88h+var_7C] offset aTooManyEndpoin +
jmp loc_44032A  +
mov [esp+88h+var_78] eax +
mov eax [ebp+var_50] +
mov [esp+88h+var_74] 4 +
mov edi [ebp+var_64] +
mov [esp+88h+var_7C] offset aUnexpectedDesc +
mov [esp+88h+var_80] offset aParse_interfac +
mov [esp+88h+var_84] 1 +
mov [esp+88h+var_88] eax +
call sub_43E390  +
jmp loc_440483  +
mov [esp+88h+var_78] eax +
mov [esp+88h+var_7C] offset aTooManyInterfa +
mov eax [ebp+var_50] +
mov [esp+88h+var_80] offset aParse_configur +
mov [esp+88h+var_84] 1 +
mov [esp+88h+var_88] eax +
call sub_43E390  +
mov eax 0FFFFFFFFh +
jmp loc_44017E  +
mov ecx [ebp+var_40] +
movzx eax byte ptr [ebp+var_58] +
mov [ecx+4] al +
jmp loc_4404B0  +
mov eax 0FFFFFFF5h +
jmp loc_4401B6  +
mov eax 0FFFFFFF5h +
jmp loc_44017E  +
mov [esp+88h+var_78] eax +
mov [esp+88h+var_7C] offset aInvalidConfigB +
jmp loc_44092F  +
mov [esp+88h+var_74] edi +
mov [esp+88h+var_78] ebx +
mov [esp+88h+var_7C] offset aShortConfigDes +
jmp loc_44086F  +
mov ebx 0FFFFFFF5h +
jmp loc_44034A  +
mov dword ptr [ecx+10h] 0 +
mov ebx 0FFFFFFF5h +
jmp loc_44034A  +
mov ebx 0FFFFFFF5h +
jmp loc_440174  +
mov edi [ebp+var_34] +
mov esi [ebp+var_30] +
jmp loc_44068D  +
***
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [ebp+arg_0] +
mov eax ds:off_47CBD4 +
lea edx [ebp+var_1C] +
mov [ebp+var_1C] 0 +
mov eax [eax+20h] +
mov [esp+38h+var_30] edx +
lea edx [ebx+28h] +
mov [esp+38h+var_34] edx +
mov [esp+38h+var_38] ebx +
call eax  +
test eax eax +
js loc_440A70  +
mov eax [ebp+var_1C] +
xor edi edi +
test eax eax +
jnz loc_440A63  +
movzx ecx word ptr [ebx+2Ah] +
xor edx edx +
mov esi ecx +
shr si 8 +
mov eax esi +
mov dh al +
mov dl cl +
movzx ecx word ptr [ebx+30h] +
mov [ebx+2Ah] dx +
xor edx edx +
mov esi ecx +
shr si 8 +
mov eax esi +
mov dh al +
mov dl cl +
movzx ecx word ptr [ebx+32h] +
mov [ebx+30h] dx +
xor edx edx +
mov esi ecx +
shr si 8 +
mov eax esi +
mov dh al +
mov dl cl +
movzx ecx word ptr [ebx+34h] +
mov [ebx+32h] dx +
xor edx edx +
mov esi ecx +
shr si 8 +
mov eax esi +
mov dh al +
mov dl cl +
mov [ebx+34h] dx +
add esp 2Ch +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add esp 2Ch +
mov edi eax +
pop ebx  +
mov eax edi +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push esi  +
push ebx  +
sub esp 10h +
mov esi [ebp+arg_0] +
mov [esp+18h+var_C] offset unk_47CE79 +
mov ebx [ebp+arg_4] +
mov [esp+18h+var_10] offset aLibusb_get_d_0 +
mov [esp+18h+var_14] 4 +
mov [esp+18h+var_18] 0 +
call sub_43E390  +
mov edx [esi+28h] +
mov [ebx] edx +
mov edx [esi+2Ch] +
mov [ebx+4] edx +
mov edx [esi+30h] +
mov [ebx+8] edx +
mov edx [esi+34h] +
mov [ebx+0Ch] edx +
movzx eax word ptr [esi+38h] +
mov [ebx+10h] ax +
add esp 10h +
xor eax eax +
pop ebx  +
pop esi  +
pop ebp  +
retn 8  +
***
push edi  +
push esi  +
push ebx  +
sub esp 5Ch +
mov eax ds:off_47CBD4 +
mov ecx [ebp+arg_0] +
lea edi [ebp+var_40] +
lea ebx [ebp+var_39] +
mov [ebp+var_40] 0 +
mov eax [eax+24h] +
mov [esp+68h+var_5C] edi +
mov [esp+68h+var_60] 9 +
mov [esp+68h+var_64] ebx +
mov [esp+68h+var_68] ecx +
call eax  +
test eax eax +
js loc_440BA5  +
cmp eax 8 +
jle loc_440BB0  +
mov eax [ebp+var_40] +
mov [esp+68h+var_68] ebx +
mov [esp+68h+var_64] offset aBbw +
mov [esp+68h+var_5C] eax +
lea eax [ebp+var_30] +
mov [esp+68h+var_60] eax +
call sub_43FEC0  +
movzx esi word ptr [ebp+var_30+2] +
mov [esp+68h+var_68] esi +
call malloc  +
test eax eax +
mov ebx eax +
jz loc_440BF0  +
mov eax ds:off_47CBD4 +
mov edx [ebp+arg_0] +
mov eax [eax+24h] +
mov [esp+68h+var_5C] edi +
mov [esp+68h+var_60] esi +
mov [esp+68h+var_64] ebx +
mov [esp+68h+var_68] edx +
call eax  +
test eax eax +
mov edi eax +
js loc_440B9B  +
mov edx [ebp+arg_4] +
mov ecx edi +
mov eax [ebp+arg_0] +
mov eax [eax+8] +
mov [esp+68h+var_64] edx +
mov edx [ebp+var_40] +
mov [esp+68h+var_68] edx +
mov edx ebx +
call sub_43FFC0  +
mov edi eax +
mov [esp+68h+var_68] ebx +
call free  +
mov eax edi +
add esp 5Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
mov esi [ebp+arg_0] +
mov edx [esi+8] +
mov [esp+68h+var_58] eax +
mov [esp+68h+var_54] 9 +
mov [esp+68h+var_5C] offset aShortConfigDes +
mov [esp+68h+var_60] offset aLibusb_get_act +
mov [esp+68h+var_64] 1 +
mov [esp+68h+var_68] edx +
call sub_43E390  +
mov eax 0FFFFFFFFh +
jmp loc_440BA5  +
mov eax 0FFFFFFF5h +
jmp loc_440BA5  +
***
push edi  +
push esi  +
push ebx  +
sub esp 5Ch +
mov esi [ebp+arg_4] +
mov [esp+68h+var_5C] offset aIndexD +
mov [esp+68h+var_60] offset aLibusb_get_c_0 +
mov [esp+68h+var_64] 4 +
mov eax esi +
movzx ebx al +
mov [esp+68h+var_58] ebx +
mov [esp+68h+var_68] 0 +
mov [ebp+var_40] 0 +
call sub_43E390  +
mov ecx [ebp+arg_0] +
mov eax esi +
cmp al [ecx+15h] +
jnb loc_440D18  +
mov eax ds:off_47CBD4 +
lea edi [ebp+var_40] +
lea esi [ebp+var_39] +
mov eax [eax+28h] +
mov [esp+68h+var_58] edi +
mov [esp+68h+var_5C] 9 +
mov [esp+68h+var_60] esi +
mov [esp+68h+var_64] ebx +
mov [esp+68h+var_68] ecx +
call eax  +
test eax eax +
js loc_440D0E  +
cmp eax 8 +
jle loc_440D20  +
mov eax [ebp+var_40] +
mov [esp+68h+var_68] esi +
mov [esp+68h+var_64] offset aBbw +
mov [esp+68h+var_5C] eax +
lea eax [ebp+var_30] +
mov [esp+68h+var_60] eax +
call sub_43FEC0  +
movzx edx word ptr [ebp+var_30+2] +
mov [esp+68h+var_68] edx +
mov [ebp+var_4C] edx +
call malloc  +
test eax eax +
mov esi eax +
jz loc_440D60  +
mov eax ds:off_47CBD4 +
mov edx [ebp+var_4C] +
mov eax [eax+28h] +
mov [esp+68h+var_58] edi +
mov edi [ebp+arg_0] +
mov [esp+68h+var_64] ebx +
mov [esp+68h+var_5C] edx +
mov [esp+68h+var_60] esi +
mov [esp+68h+var_68] edi +
call eax  +
test eax eax +
mov ebx eax +
js loc_440D04  +
mov edx [ebp+arg_8] +
mov ecx ebx +
mov eax [ebp+arg_0] +
mov eax [eax+8] +
mov [esp+68h+var_64] edx +
mov edx [ebp+var_40] +
mov [esp+68h+var_68] edx +
mov edx esi +
call sub_43FFC0  +
mov ebx eax +
mov [esp+68h+var_68] esi +
call free  +
mov eax ebx +
add esp 5Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn 0Ch  +
mov eax 0FFFFFFFBh +
jmp loc_440D0E  +
mov edi [ebp+arg_0] +
mov edx [edi+8] +
mov [esp+68h+var_58] eax +
mov [esp+68h+var_54] 9 +
mov [esp+68h+var_5C] offset aShortConfigDes +
mov [esp+68h+var_60] offset aLibusb_get_c_0 +
mov [esp+68h+var_64] 1 +
mov [esp+68h+var_68] edx +
call sub_43E390  +
mov eax 0FFFFFFFFh +
jmp loc_440D0E  +
mov eax 0FFFFFFF5h +
jmp loc_440D0E  +
***
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [ebp+arg_4] +
mov edi [ebp+arg_0] +
mov [esp+48h+var_3C] offset aValueD +
mov [esp+48h+var_40] offset aUsbi_get_confi +
mov [ebp+var_29] al +
movzx eax al +
mov [esp+48h+var_38] eax +
mov [esp+48h+var_44] 4 +
mov [esp+48h+var_48] 0 +
call sub_43E390  +
cmp byte ptr [edi+15h] 0 +
jz loc_440E07  +
xor ebx ebx +
jmp loc_440DC8  +
movzx eax [ebp+var_29] +
cmp [ebp+var_19] al +
jz loc_440E20  +
add ebx 1 +
cmp [edi+15h] bl +
jbe loc_440E07  +
mov eax ds:off_47CBD4 +
lea edx [ebp+var_24] +
movzx esi bl +
lea ecx [ebp+var_1E] +
mov eax [eax+28h] +
mov [esp+48h+var_38] edx +
mov [esp+48h+var_3C] 6 +
mov [esp+48h+var_40] ecx +
mov [esp+48h+var_44] esi +
mov [esp+48h+var_48] edi +
call eax  +
test eax eax +
jns loc_440DB7  +
mov edx [ebp+arg_8] +
mov dword ptr [edx] 0FFFFFFFFh +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebp+arg_8] +
mov dword ptr [eax] 0FFFFFFFFh +
add esp 3Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebp+arg_8] +
mov [eax] esi +
add esp 3Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
push ebx  +
sub esp 24h +
mov eax ds:off_47CBD4 +
mov ebx [ebp+8] +
mov edx [ebp+0Ch] +
mov dword ptr [ebp-0Ch] 0 +
mov eax [eax+2Ch] +
test eax eax +
jz loc_440E91  +
lea ecx [ebp-10h] +
movzx edx dl +
mov [esp+0Ch] ecx +
lea ecx [ebp-0Ch] +
mov [esp+8] ecx +
mov [esp+4] edx +
mov [esp] ebx +
call eax  +
test eax eax +
js loc_440E8A  +
mov edx [ebp-10h] +
mov ebx [ebx+8] +
mov ecx [ebp+10h] +
mov [esp] edx +
mov edx [ebp-0Ch] +
mov [esp+4] ecx +
mov ecx eax +
mov eax ebx +
call sub_43FFC0  +
mov ebx [ebp-4] +
leave   +
retn 0Ch  +
***
lea eax [ebp-10h] +
movzx edx dl +
mov [esp+8] eax +
mov [esp+4] edx +
mov [esp] ebx +
call sub_440D70  +
test eax eax +
js loc_440E8A  +
mov eax [ebp-10h] +
cmp eax 0FFFFFFFFh +
jz loc_440ED3  +
mov ecx [ebp+10h] +
movzx eax al +
mov [esp] ebx +
mov [esp+4] eax +
mov [esp+8] ecx +
call sub_440C00  +
mov ebx [ebp-4] +
sub esp 0Ch +
leave   +
retn 0Ch  +
***
mov eax 0FFFFFFFBh +
jmp loc_440E8A  +
***
push ebx  +
sub esp 14h +
mov ebx [ebp+arg_0] +
test ebx ebx +
jz loc_440EFD  +
mov eax ebx +
call sub_43FE60  +
mov [esp+18h+var_18] ebx +
call free  +
add esp 14h +
pop ebx  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [ebp+0Ch] +
lea esi [ebp-1Ah] +
mov ebx [eax+10h] +
mov edi [eax+0Ch] +
mov eax [ebp+10h] +
cmp ebx 1 +
mov dword ptr [eax] 0 +
jle loc_440F6E  +
mov dword ptr [esp+0Ch] 0 +
mov [esp+8] esi +
mov dword ptr [esp+4] offset aBb +
mov [esp] edi +
call sub_43FEC0  +
movzx ecx byte ptr [ebp-1Ah] +
cmp cl 1 +
movzx eax cl +
jbe loc_440FB7  +
cmp eax ebx +
jg loc_440FB7  +
cmp byte ptr [ebp-19h] 30h +
jz loc_440F75  +
sub ebx eax +
add edi eax +
cmp ebx 1 +
jg loc_440F33  +
mov eax 0FFFFFFFBh +
jmp loc_440FAD  +
cmp cl 5 +
jbe loc_440FF0  +
mov dword ptr [esp] 6 +
call malloc  +
mov edx [ebp+10h] +
test eax eax +
mov [edx] eax +
jz loc_440FFE  +
mov dword ptr [esp+0Ch] 0 +
mov [esp+8] eax +
mov dword ptr [esp+4] offset aBbbbw +
mov [esp] edi +
call sub_43FEC0  +
xor eax eax +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov [esp+10h] eax +
mov dword ptr [esp+0Ch] offset aInvalidDescrip +
mov eax [ebp+8] +
mov dword ptr [esp+8] offset aLibusb_get_ss_ +
mov dword ptr [esp+4] 1 +
mov [esp] eax +
call sub_43E390  +
add esp 3Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov [esp+10h] eax +
mov dword ptr [esp+0Ch] offset aInvalidSsEpCom +
jmp loc_440FC3  +
***
mov eax 0FFFFFFF5h +
jmp loc_440FAD  +
***
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax [ebp+8] +
mov [esp] eax +
call free  +
leave   +
retn 4  +
***
push esi  +
push ebx  +
sub esp 10h +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_441066  +
xor ebx ebx +
cmp byte ptr [esi+4] 0 +
jz loc_44105E  +
mov eax [esi+ebx*4+8] +
add ebx 1 +
mov [esp+18h+var_18] eax +
call free  +
movzx eax byte ptr [esi+4] +
cmp eax ebx +
jg loc_441047  +
mov [esp+18h+var_18] esi +
call free  +
add esp 10h +
pop ebx  +
pop esi  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push edi  +
push esi  +
push ebx  +
sub esp 6Ch +
mov esi [ebp+8] +
lea ebx [ebp-2Dh] +
mov dword ptr [esp+1Ch] 3E8h +
mov dword ptr [esp+18h] 5 +
mov [esp+14h] ebx +
mov dword ptr [esp+10h] 0 +
mov dword ptr [esp+0Ch] 0F00h +
mov dword ptr [esp+8] 6 +
mov dword ptr [esp+4] 80h +
mov [esp] esi +
mov dword ptr [ebp-2Dh] 0 +
mov byte ptr [ebp-29h] 0 +
call sub_441BE0  +
sub esp 20h +
test eax eax +
js loc_441330  +
cmp eax 4 +
jle loc_441485  +
lea eax [ebp-28h] +
mov [esp] ebx +
mov dword ptr [esp+0Ch] 0 +
mov [esp+8] eax +
mov dword ptr [esp+4] offset aBbwb +
call sub_43FEC0  +
movzx eax byte ptr [ebp-24h] +
mov dword ptr [esp+0Ch] offset aFoundBosDescri +
mov dword ptr [esp+8] offset aLibusb_get_bos +
mov dword ptr [esp+4] 4 +
mov [esp+14h] eax +
movzx eax word ptr [ebp-26h] +
mov dword ptr [esp] 0 +
mov [esp+10h] eax +
call sub_43E390  +
movzx ebx word ptr [ebp-26h] +
mov dword ptr [esp+4] 1 +
mov [esp] ebx +
call calloc  +
test eax eax +
mov [ebp-44h] eax +
jz loc_44150C  +
mov [esp+18h] ebx +
mov dword ptr [esp+1Ch] 3E8h +
mov [esp+14h] eax +
mov dword ptr [esp+10h] 0 +
mov dword ptr [esp+0Ch] 0F00h +
mov dword ptr [esp+8] 6 +
mov dword ptr [esp+4] 80h +
mov [esp] esi +
call sub_441BE0  +
mov ebx eax +
mov eax [esi+10h] +
sub esp 20h +
test ebx ebx +
mov eax [eax+8] +
js loc_441370  +
cmp ebx 4 +
mov [ebp-48h] eax +
jle loc_44144F  +
lea eax [ebp-20h] +
mov [esp+8] eax +
mov eax [ebp-44h] +
mov dword ptr [esp+0Ch] 0 +
mov dword ptr [esp+4] offset aBbwb +
mov [esp] eax +
call sub_43FEC0  +
movzx eax byte ptr [ebp-1Fh] +
cmp al 0Fh +
jnz loc_4414C1  +
movzx eax byte ptr [ebp-20h] +
cmp al 4 +
jbe loc_441527  +
cmp ebx eax +
jl loc_4414FA  +
movzx eax byte ptr [ebp-1Ch] +
mov dword ptr [esp] 1 +
lea eax ds:8[eax*4] +
mov [esp+4] eax +
call calloc  +
test eax eax +
mov [ebp-40h] eax +
jz loc_44151D  +
mov edi [ebp-44h] +
mov dword ptr [esp+0Ch] 0 +
mov [esp+8] eax +
mov dword ptr [esp+4] offset aBbwb +
mov [esp] edi +
call sub_43FEC0  +
movzx eax byte ptr [ebp-20h] +
sub ebx eax +
lea edi [edi+eax] +
movzx eax byte ptr [ebp-1Ch] +
mov [ebp-3Ch] ebx +
test al al +
jz loc_44130A  +
cmp ebx 2 +
jle loc_441516  +
xor esi esi +
jmp loc_4412AE  +
movzx edx byte ptr [ebp-30h] +
cmp dl 2 +
jbe loc_441396  +
movzx ebx dl +
cmp ebx [ebp-3Ch] +
jg loc_4413D5  +
mov [esp] ebx +
call malloc  +
mov ecx [ebp-40h] +
test eax eax +
mov [ecx+esi*4+8] eax +
jz loc_4413F0  +
mov [esp+4] edi +
add esi 1 +
add edi ebx +
mov [esp+8] ebx +
mov [esp] eax +
call memcpy  +
movzx eax byte ptr [ebp-1Ch] +
sub [ebp-3Ch] ebx +
cmp esi eax +
jge loc_441405  +
cmp dword ptr [ebp-3Ch] 2 +
jle loc_441410  +
lea eax [ebp-30h] +
mov dword ptr [esp+0Ch] 0 +
mov [esp+8] eax +
mov dword ptr [esp+4] offset aBbb +
mov [esp] edi +
call sub_43FEC0  +
movzx eax byte ptr [ebp-2Fh] +
cmp al 10h +
jz loc_441250  +
mov dword ptr [esp+14h] 10h +
mov [esp+10h] eax +
mov dword ptr [esp+0Ch] offset aUnexpectedDesc +
mov eax [ebp-48h] +
mov dword ptr [esp+8] offset aParse_bos +
mov dword ptr [esp+4] 2 +
mov [esp] eax +
call sub_43E390  +
mov eax esi +
mov ecx [ebp-40h] +
xor ebx ebx +
mov [ecx+4] al +
mov eax [ebp+0Ch] +
mov [eax] ecx +
mov eax [ebp-44h] +
mov [esp] eax +
call free  +
mov eax ebx +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
***
cmp eax 0FFFFFFF7h +
jz loc_441324  +
mov edx [esi+10h] +
mov [ebp-3Ch] eax +
mov edx [edx+8] +
mov [esp+10h] eax +
mov dword ptr [esp+0Ch] offset aFailedToReadBo +
mov dword ptr [esp+8] offset aLibusb_get_bos +
mov dword ptr [esp+4] 1 +
mov [esp] edx +
call sub_43E390  +
mov eax [ebp-3Ch] +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
***
mov [esp+10h] ebx +
mov dword ptr [esp+0Ch] offset aFailedToReadBo +
mov dword ptr [esp+8] offset aLibusb_get_bos +
mov dword ptr [esp+4] 1 +
mov [esp] eax +
call sub_43E390  +
jmp loc_441317  +
***
mov eax [ebp-48h] +
mov ebx 0FFFFFFFFh +
mov [esp+10h] edx +
mov dword ptr [esp+0Ch] offset aInvalidDevCapB +
mov dword ptr [esp+8] offset aParse_bos +
mov [esp] eax +
mov dword ptr [esp+4] 1 +
call sub_43E390  +
mov eax [ebp-40h] +
mov [esp] eax +
call sub_441030  +
sub esp 4 +
jmp loc_441317  +
***
mov eax [ebp-3Ch] +
mov [esp+14h] ebx +
mov dword ptr [esp+0Ch] offset aShortDevCapDes +
mov [esp+10h] eax +
jmp loc_4412ED  +
***
mov [esp] ecx +
mov ebx 0FFFFFFF5h +
call sub_441030  +
sub esp 4 +
jmp loc_441317  +
***
mov eax esi +
jmp loc_44130A  +
***
mov eax esi +
mov [ebp-4Ch] eax +
mov eax [ebp-3Ch] +
mov dword ptr [esp+14h] 3 +
mov dword ptr [esp+0Ch] offset aShortDevCapDes +
mov dword ptr [esp+8] offset aParse_bos +
mov [esp+10h] eax +
mov eax [ebp-48h] +
mov dword ptr [esp+4] 2 +
mov [esp] eax +
call sub_43E390  +
mov eax [ebp-4Ch] +
jmp loc_44130A  +
***
mov [esp+10h] ebx +
mov ebx 0FFFFFFFFh +
mov dword ptr [esp+14h] 5 +
mov dword ptr [esp+0Ch] offset aShortBosDescri +
mov dword ptr [esp+8] offset aParse_bos +
mov dword ptr [esp+4] 1 +
mov [esp] eax +
call sub_43E390  +
jmp loc_441317  +
***
mov edx [esi+10h] +
mov edx [edx+8] +
mov [esp+10h] eax +
mov dword ptr [esp+14h] 5 +
mov dword ptr [esp+0Ch] offset aShortBosReadDD +
mov dword ptr [esp+8] offset aLibusb_get_bos +
mov dword ptr [esp+4] 1 +
mov [esp] edx +
call sub_43E390  +
mov eax 0FFFFFFFFh +
jmp loc_441324  +
***
mov dword ptr [esp+14h] 0Fh +
mov [esp+10h] eax +
mov dword ptr [esp+0Ch] offset aUnexpectedDesc +
mov eax [ebp-48h] +
mov ebx 0FFFFFFFFh +
mov dword ptr [esp+8] offset aParse_bos +
mov dword ptr [esp+4] 1 +
mov [esp] eax +
call sub_43E390  +
jmp loc_441317  +
***
mov [esp+14h] eax +
mov [esp+10h] ebx +
mov dword ptr [esp+0Ch] offset aShortBosDescri +
jmp loc_4414D5  +
***
mov eax 0FFFFFFF5h +
jmp loc_441324  +
***
xor eax eax +
jmp loc_441412  +
***
mov ebx 0FFFFFFF5h +
jmp loc_441317  +
***
mov [esp+10h] eax +
mov eax [ebp-48h] +
mov ebx 0FFFFFFFFh +
mov dword ptr [esp+0Ch] offset aInvalidBosBlen +
mov dword ptr [esp+8] offset aParse_bos +
mov dword ptr [esp+4] 1 +
mov [esp] eax +
call sub_43E390  +
jmp loc_441317  +
***
push ebp  +
mov ebp esp +
push esi  +
push ebx  +
sub esp 20h +
mov ebx [ebp+0Ch] +
movzx eax byte ptr [ebx+2] +
cmp al 2 +
jnz loc_4415C0  +
movzx eax byte ptr [ebx] +
cmp al 6 +
jbe loc_4415F6  +
mov dword ptr [esp] 8 +
call malloc  +
test eax eax +
mov esi eax +
jz loc_441630  +
mov dword ptr [esp+0Ch] 0 +
mov [esp+8] eax +
mov dword ptr [esp+4] offset aBbbd +
mov [esp] ebx +
call sub_43FEC0  +
mov eax [ebp+10h] +
mov [eax] esi +
xor eax eax +
add esp 20h +
pop ebx  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov [esp+10h] eax +
mov eax [ebp+8] +
mov dword ptr [esp+14h] 2 +
mov dword ptr [esp+0Ch] offset aUnexpectedBdev +
mov dword ptr [esp+8] offset aLibusb_get_usb +
mov [esp] eax +
mov dword ptr [esp+4] 1 +
call sub_43E390  +
mov eax 0FFFFFFFEh +
jmp loc_4415B3  +
***
mov [esp+10h] eax +
mov eax [ebp+8] +
mov dword ptr [esp+14h] 7 +
mov dword ptr [esp+0Ch] offset aShortDevCapDes +
mov dword ptr [esp+8] offset aLibusb_get_usb +
mov [esp] eax +
mov dword ptr [esp+4] 1 +
call sub_43E390  +
mov eax 0FFFFFFFFh +
jmp loc_4415B3  +
***
mov eax 0FFFFFFF5h +
jmp loc_4415B3  +
***
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax [ebp+8] +
mov [esp] eax +
call free  +
leave   +
retn 4  +
***
push ebp  +
mov ebp esp +
push esi  +
push ebx  +
sub esp 20h +
mov ebx [ebp+0Ch] +
movzx eax byte ptr [ebx+2] +
cmp al 3 +
jnz loc_4416C0  +
movzx eax byte ptr [ebx] +
cmp al 9 +
jbe loc_4416F6  +
mov dword ptr [esp] 0Ah +
call malloc  +
test eax eax +
mov esi eax +
jz loc_441730  +
mov dword ptr [esp+0Ch] 0 +
mov [esp+8] eax +
mov dword ptr [esp+4] offset aBbbbwbbw +
mov [esp] ebx +
call sub_43FEC0  +
mov eax [ebp+10h] +
mov [eax] esi +
xor eax eax +
add esp 20h +
pop ebx  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov [esp+10h] eax +
mov eax [ebp+8] +
mov dword ptr [esp+14h] 3 +
mov dword ptr [esp+0Ch] offset aUnexpectedBdev +
mov dword ptr [esp+8] offset aLibusb_get_s_0 +
mov [esp] eax +
mov dword ptr [esp+4] 1 +
call sub_43E390  +
mov eax 0FFFFFFFEh +
jmp loc_4416B3  +
***
mov [esp+10h] eax +
mov eax [ebp+8] +
mov dword ptr [esp+14h] 0Ah +
mov dword ptr [esp+0Ch] offset aShortDevCapDes +
mov dword ptr [esp+8] offset aLibusb_get_s_0 +
mov [esp] eax +
mov dword ptr [esp+4] 1 +
call sub_43E390  +
mov eax 0FFFFFFFFh +
jmp loc_4416B3  +
***
mov eax 0FFFFFFF5h +
jmp loc_4416B3  +
***
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax [ebp+8] +
mov [esp] eax +
call free  +
leave   +
retn 4  +
***
push ebp  +
mov ebp esp +
push esi  +
push ebx  +
sub esp 20h +
mov ebx [ebp+0Ch] +
movzx eax byte ptr [ebx+2] +
cmp al 4 +
jnz loc_4417C0  +
movzx eax byte ptr [ebx] +
cmp al 13h +
jbe loc_4417F6  +
mov dword ptr [esp] 14h +
call malloc  +
test eax eax +
mov esi eax +
jz loc_441830  +
mov dword ptr [esp+0Ch] 0 +
mov [esp+8] eax +
mov dword ptr [esp+4] offset aBbbbu +
mov [esp] ebx +
call sub_43FEC0  +
mov eax [ebp+10h] +
mov [eax] esi +
xor eax eax +
add esp 20h +
pop ebx  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov [esp+10h] eax +
mov eax [ebp+8] +
mov dword ptr [esp+14h] 4 +
mov dword ptr [esp+0Ch] offset aUnexpectedBdev +
mov dword ptr [esp+8] offset aLibusb_get_c_1 +
mov [esp] eax +
mov dword ptr [esp+4] 1 +
call sub_43E390  +
mov eax 0FFFFFFFEh +
jmp loc_4417B3  +
***
mov [esp+10h] eax +
mov eax [ebp+8] +
mov dword ptr [esp+14h] 14h +
mov dword ptr [esp+0Ch] offset aShortDevCapDes +
mov dword ptr [esp+8] offset aLibusb_get_c_1 +
mov [esp] eax +
mov dword ptr [esp+4] 1 +
call sub_43E390  +
mov eax 0FFFFFFFFh +
jmp loc_4417B3  +
***
mov eax 0FFFFFFF5h +
jmp loc_4417B3  +
***
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax [ebp+8] +
mov [esp] eax +
call free  +
leave   +
retn 4  +
***
push edi  +
push esi  +
push ebx  +
sub esp 13Ch +
mov edi [ebp+arg_4] +
mov esi [ebp+arg_8] +
mov eax edi +
test al al +
jz loc_4419C7  +
mov eax [ebp+arg_0] +
lea ebx [ebp+var_117] +
mov [esp+148h+var_12C] 3E8h +
mov [esp+148h+var_130] 0FFh +
mov [esp+148h+var_134] ebx +
mov [esp+148h+var_138] 0 +
mov [esp+148h+var_13C] 300h +
mov [esp+148h+var_140] 6 +
mov [esp+148h+var_144] 80h +
mov [esp+148h+var_148] eax +
call sub_441BE0  +
sub esp 20h +
test eax eax +
js loc_4419A5  +
cmp eax 3 +
jle loc_4419B8  +
movzx ecx byte ptr [ebp+var_117+3] +
movzx eax byte ptr [ebp+var_117+2] +
mov [esp+148h+var_12C] 3E8h +
mov [esp+148h+var_130] 0FFh +
shl ecx 8 +
or eax ecx +
movzx eax ax +
mov [esp+148h+var_138] eax +
mov eax edi +
movzx edx al +
mov eax [ebp+arg_0] +
or dh 3 +
mov [esp+148h+var_134] ebx +
mov [esp+148h+var_13C] edx +
mov [esp+148h+var_140] 6 +
mov [esp+148h+var_144] 80h +
mov [esp+148h+var_148] eax +
call sub_441BE0  +
sub esp 20h +
test eax eax +
js loc_4419A5  +
cmp byte ptr [ebp+var_117+1] 3 +
jnz loc_4419B8  +
movzx edx byte ptr [ebp+var_117] +
cmp edx eax +
jg loc_4419B8  +
cmp edx 2 +
jle loc_4419CE  +
mov eax [ebp+arg_C] +
lea edi [eax-1] +
test edi edi +
jle loc_4419CE  +
sub edx 3 +
shr edx 1 +
lea eax [edx+1] +
mov edx 1 +
mov [ebp+var_11C] eax +
jmp loc_441983  +
cmp edx [ebp+var_11C] +
mov [esi+edx-1] cl +
jz loc_4419A1  +
add edx 1 +
cmp eax edi +
jge loc_4419B0  +
movzx ecx byte ptr [ebx+edx*2] +
mov eax edx +
test cl cl +
js loc_441994  +
cmp byte ptr [ebx+edx*2+1] 0 +
jz loc_441970  +
cmp edx [ebp+var_11C] +
mov byte ptr [esi+edx-1] 3Fh +
jnz loc_44197C  +
mov byte ptr [esi+edx] 0 +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn 10h  +
mov edx eax +
mov byte ptr [esi+edx] 0 +
jmp loc_4419A5  +
lea esp [ebp-0Ch] +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn 10h  +
mov eax 0FFFFFFFEh +
jmp loc_4419A5  +
xor edx edx +
xor eax eax +
jmp loc_4419A1  +
***
sub esp 28h +
mov eax [ebp+arg_0] +
mov edx [eax+1Ch] +
mov dword ptr [edx] 1 +
mov eax [eax+14h] +
mov [esp+28h+var_1C] offset aActual_lengthD +
mov [esp+28h+var_20] offset aSync_transfer_ +
mov [esp+28h+var_24] 4 +
mov [esp+28h+var_18] eax +
mov [esp+28h+var_28] 0 +
call sub_43E390  +
leave   +
retn 4  +
***
jmp sub_441A30  +
***
push edi  +
mov edi eax +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [eax+1Ch] +
mov eax [eax] +
mov eax [eax+10h] +
mov esi [eax+8] +
mov eax [ebx] +
test eax eax +
jnz loc_441AA4  +
mov [esp+38h+var_34] ebx +
mov [esp+38h+var_38] esi +
call sub_450270  +
sub esp 8 +
test eax eax +
jns loc_441A46  +
cmp eax 0FFFFFFF6h +
jz loc_441A46  +
mov [esp+38h+var_38] eax +
call sub_43FD90  +
sub esp 4 +
mov [esp+38h+var_28] eax +
mov [esp+38h+var_2C] offset aLibusb_handle_ +
mov [esp+38h+var_30] offset aSync_transfe_0 +
mov [esp+38h+var_34] 1 +
mov [esp+38h+var_38] esi +
call sub_43E390  +
mov [esp+38h+var_38] edi +
call sub_44F050  +
mov eax [ebx] +
sub esp 4 +
test eax eax +
jz loc_441A4C  +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push edi  +
mov edi ecx +
push esi  +
push ebx  +
mov ebx eax +
sub esp 3Ch +
mov eax [ebp+arg_C] +
mov [esp+48h+var_48] 0 +
mov [ebp+var_30] edx +
mov [ebp+var_2C] eax +
call sub_44EBF0  +
mov [ebp+var_1C] 0 +
sub esp 4 +
test eax eax +
mov esi eax +
jz loc_441BD4  +
mov edx [ebp+var_30] +
mov [eax] ebx +
mov [eax+5] dl +
mov eax [ebp+arg_8] +
mov [esi+20h] edi +
mov dword ptr [esi+18h] offset sub_4419E0 +
mov [esi+8] eax +
mov eax [ebp+arg_0] +
mov [esi+10h] eax +
lea eax [ebp+var_1C] +
mov [esi+1Ch] eax +
movzx eax byte ptr [ebp+var_2C] +
mov [esi+6] al +
mov [esp+48h+var_48] esi +
call sub_44ED10  +
sub esp 4 +
test eax eax +
js loc_441B87  +
mov eax esi +
call sub_441A30  +
mov eax [ebp+arg_4] +
mov edx [esi+14h] +
mov [eax] edx +
mov eax [esi+0Ch] +
cmp eax 6 +
ja loc_441BA0  +
jmp ds:off_47D294[eax*4]  +
mov ebx 0FFFFFFF9h +
mov [esp+48h+var_48] esi +
call sub_44EC90  +
mov eax ebx +
sub esp 4 +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ebx 0FFFFFFF7h +
jmp loc_441B45  +
mov ebx 0FFFFFFFCh +
jmp loc_441B45  +
mov ebx 0FFFFFFF8h +
jmp loc_441B45  +
xor ebx ebx +
jmp loc_441B45  +
mov ebx 0FFFFFFFFh +
jmp loc_441B45  +
mov [esp+48h+var_48] esi +
mov [ebp+var_2C] eax +
call sub_44EC90  +
mov eax [ebp+var_2C] +
sub esp 4 +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edx [ebx+10h] +
mov ebx 0FFFFFF9Dh +
mov edx [edx+8] +
mov [esp+48h+var_38] eax +
mov [esp+48h+var_3C] offset aUnrecognisedSt +
mov [esp+48h+var_40] offset aDo_sync_bulk_t +
mov [esp+48h+var_44] 2 +
mov [esp+48h+var_48] edx +
call sub_43E390  +
jmp loc_441B45  +
mov eax 0FFFFFFF5h +
jmp loc_441B52  +
***
push edi  +
push esi  +
push ebx  +
sub esp 4Ch +
mov eax [ebp+arg_4] +
mov edi [ebp+arg_C] +
mov esi [ebp+arg_18] +
mov [esp+58h+var_58] 0 +
mov [ebp+var_2C] eax +
mov eax [ebp+arg_8] +
mov [ebp+var_32] di +
mov [ebp+var_3A] si +
mov [ebp+var_30] eax +
mov eax [ebp+arg_10] +
mov [ebp+var_38] eax +
mov [ebp+var_34] ax +
call sub_44EBF0  +
mov [ebp+var_1C] 0 +
sub esp 4 +
test eax eax +
mov ebx eax +
jz loc_441DE1  +
movzx eax si +
mov [ebp+var_40] eax +
add eax 8 +
mov [esp+58h+var_58] eax +
call malloc  +
test eax eax +
mov edx eax +
jz loc_441DEB  +
movzx eax byte ptr [ebp+var_2C] +
shr di 8 +
mov ecx edi +
movzx edi word ptr [ebp+var_38] +
mov [edx] al +
movzx eax byte ptr [ebp+var_30] +
shr di 8 +
mov [edx+1] al +
xor eax eax +
mov ah cl +
mov al byte ptr [ebp+var_32] +
mov ecx edi +
mov edi esi +
shr di 8 +
mov [edx+2] ax +
xor eax eax +
mov ah cl +
mov al byte ptr [ebp+var_34] +
mov ecx edi +
mov [edx+4] ax +
xor eax eax +
mov ah cl +
mov al byte ptr [ebp+var_3A] +
cmp byte ptr [ebp+var_2C] 0 +
mov [edx+6] ax +
js loc_441CB3  +
mov esi [ebp+var_40] +
lea eax [edx+8] +
mov [esp+58h+var_58] eax +
mov [ebp+var_30] edx +
mov [esp+58h+var_50] esi +
mov esi [ebp+arg_14] +
mov [esp+58h+var_54] esi +
call memcpy  +
mov edx [ebp+var_30] +
mov eax [ebp+arg_0] +
mov byte ptr [ebx+5] 0 +
mov byte ptr [ebx+6] 0 +
mov [ebx+20h] edx +
movzx edx word ptr [edx+6] +
mov [ebx] eax +
mov eax [ebp+arg_1C] +
mov dword ptr [ebx+18h] offset sub_4419E0 +
mov byte ptr [ebx+4] 2 +
mov ecx edx +
mov [ebx+8] eax +
shr cx 8 +
xor eax eax +
mov ah cl +
mov al dl +
movzx eax ax +
add eax 8 +
mov [ebx+10h] eax +
lea eax [ebp+var_1C] +
mov [ebx+1Ch] eax +
mov [esp+58h+var_58] ebx +
call sub_44ED10  +
sub esp 4 +
test eax eax +
js loc_441D67  +
mov eax ebx +
call sub_441A30  +
cmp byte ptr [ebp+var_2C] 0 +
js loc_441DC0  +
mov eax [ebx+0Ch] +
cmp eax 6 +
ja loc_441D82  +
jmp ds:off_47D2B0[eax*4]  +
mov esi 0FFFFFFF7h +
mov [esp+58h+var_58] ebx +
call sub_44EC90  +
mov eax esi +
sub esp 4 +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn 20h  +
mov esi 0FFFFFFFCh +
jmp loc_441D27  +
mov esi 0FFFFFFF8h +
jmp loc_441D27  +
mov esi [ebx+14h] +
jmp loc_441D27  +
mov esi 0FFFFFFFFh +
jmp loc_441D27  +
mov esi 0FFFFFFF9h +
jmp loc_441D27  +
mov [esp+58h+var_58] ebx +
mov [ebp+var_2C] eax +
call sub_44EC90  +
mov eax [ebp+var_2C] +
sub esp 4 +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn 20h  +
mov esi [ebp+arg_0] +
mov edx [esi+10h] +
mov esi 0FFFFFF9Dh +
mov edx [edx+8] +
mov [esp+58h+var_48] eax +
mov [esp+58h+var_4C] offset aUnrecognisedSt +
mov [esp+58h+var_50] offset aLibusb_control +
mov [esp+58h+var_54] 2 +
mov [esp+58h+var_58] edx +
call sub_43E390  +
jmp loc_441D27  +
mov eax [ebx+20h] +
mov edx [ebx+14h] +
add eax 8 +
mov [esp+58h+var_54] eax +
mov eax [ebp+arg_14] +
mov [esp+58h+var_50] edx +
mov [esp+58h+var_58] eax +
call memcpy  +
jmp loc_441D13  +
mov eax 0FFFFFFF5h +
jmp loc_441D34  +
mov [esp+58h+var_58] ebx +
call sub_44EC90  +
mov eax 0FFFFFFF5h +
sub esp 4 +
jmp loc_441D34  +
***
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax [ebp+1Ch] +
movzx edx byte ptr [ebp+0Ch] +
mov ecx [ebp+10h] +
mov dword ptr [esp+0Ch] 2 +
mov [esp+8] eax +
mov eax [ebp+18h] +
mov [esp+4] eax +
mov eax [ebp+14h] +
mov [esp] eax +
mov eax [ebp+8] +
call sub_441AB0  +
leave   +
retn 18h  +
***
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax [ebp+1Ch] +
movzx edx byte ptr [ebp+0Ch] +
mov ecx [ebp+10h] +
mov dword ptr [esp+0Ch] 3 +
mov [esp+8] eax +
mov eax [ebp+18h] +
mov [esp+4] eax +
mov eax [ebp+14h] +
mov [esp] eax +
mov eax [ebp+8] +
call sub_441AB0  +
leave   +
retn 18h  +
***
sub esp 18h +
mov eax [ebp+arg_0] +
mov edx [eax+10h] +
mov edx [edx+48h] +
mov edx [edx+1Ch] +
mov [esp+18h+var_14] eax +
mov [esp+18h+var_18] 0FFFFFFFFh +
call edx  +
leave   +
retn   +
***
jmp sub_441EB0  +
***
mov eax [ebp+arg_0] +
mov edx [ebp+arg_4] +
mov eax [eax+10h] +
movzx eax byte ptr [eax+42h] +
test al al +
jz loc_441ED0  +
mov [edx] eax +
xor eax eax +
pop ebp  +
retn   +
mov dword ptr [edx] 0 +
mov eax 0FFFFFFFBh +
pop ebp  +
retn   +
***
sub esp 18h +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
mov edx [eax+10h] +
mov edx [edx+48h] +
mov edx [edx+2Ch] +
mov [esp+18h+var_10] ecx +
mov [esp+18h+var_14] eax +
mov [esp+18h+var_18] 0FFFFFFFFh +
call edx  +
leave   +
retn   +
***
sub esp 18h +
mov eax [ebp+arg_0] +
movzx ecx [ebp+arg_4] +
mov edx [eax+10h] +
mov edx [edx+48h] +
mov edx [edx+30h] +
mov [esp+18h+var_10] ecx +
mov [esp+18h+var_14] eax +
mov [esp+18h+var_18] 0FFFFFFFFh +
call edx  +
leave   +
retn   +
***
sub esp 18h +
mov eax [ebp+arg_0] +
mov edx [eax+10h] +
mov edx [edx+48h] +
mov edx [edx+34h] +
mov [esp+18h+var_14] eax +
mov [esp+18h+var_18] 0FFFFFFFFh +
call edx  +
leave   +
retn   +
***
jmp sub_441F70  +
***
mov ebp esp +
pop ebp  +
retn   +
***
mov ebp esp +
pop ebp  +
retn   +
***
mov ebp esp +
pop ebp  +
retn   +
***
mov ebp esp +
pop ebp  +
retn   +
***
mov ebp esp +
pop ebp  +
retn   +
***
mov ebp esp +
pop ebp  +
retn   +
***
mov ebp esp +
pop ebp  +
retn   +
***
push ebx  +
sub esp 14h +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_4] +
cmp eax 0FFFFFFFFh +
mov ecx [edx+10h] +
jz loc_442030  +
imul eax eax +
mov ecx ds:dword_485600[eax] +
test ecx ecx +
jz loc_442040  +
mov ecx [ebp+arg_8] +
lea ebx [edx+ecx*8] +
mov edx [ebx+20h] +
lea ecx [edx-1] +
cmp ecx 0FFFFFFFDh +
ja loc_442035  +
mov eax ds:dword_485610[eax] +
mov [esp+18h+var_18] edx +
call eax  +
xor eax eax +
mov dword ptr [ebx+20h] 0FFFFFFFFh +
sub esp 4 +
mov ebx [ebp+var_4] +
leave   +
retn   +
mov eax [ecx+50h] +
jmp loc_441FF5  +
mov eax 0FFFFFFFBh +
jmp loc_44202A  +
mov eax 0FFFFFFFDh +
jmp loc_44202A  +
***
push edi  +
push esi  +
push ebx  +
sub esp 4 +
lea edi [eax+20h] +
xor eax eax +
mov [ebp+var_10] edx +
mov esi [ebp+var_10] +
mov edx [esi+eax*8+8] +
cmp edx 0FFFFFFFFh +
jz loc_44209C  +
test edx edx +
jz loc_44209C  +
mov ebx [edi+4] +
test ebx ebx +
jz loc_44209C  +
movzx edx byte ptr [edi] +
test dl dl +
jle loc_44209C  +
cmp [ebx] cl +
jz loc_4420B0  +
movsx esi dl +
xor edx edx +
sub esi 1 +
jmp loc_442098  +
add edx 1 +
cmp [ebx+edx] cl +
jz loc_4420B0  +
cmp edx esi +
jnz loc_442090  +
add eax 1 +
add edi 18h +
cmp eax 20h +
jnz loc_442061  +
mov eax 0FFFFFFFFh +
lea esi [esi+0] +
add esp 4 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov ebp esp +
pop ebp  +
retn   +
***
mov eax [ebp+arg_4] +
mov ebp esp +
pop ebp  +
retn   +
***
push ebx  +
mov ebx ds:dword_4854A8 +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_8] +
test ebx ebx +
mov ecx [edx+10h] +
jz loc_442138  +
lea ebx [eax+eax*2] +
mov ecx [ecx+ebx*8+54h] +
test ecx ecx +
jz loc_442130  +
lea eax [edx+eax*8] +
cmp dword ptr [eax+1Ch] 0D1B5h +
jnz loc_442130  +
mov dword ptr [eax+1Ch] 0FFFFFFFFh +
xor eax eax +
pop ebx  +
pop ebp  +
retn   +
mov eax 0FFFFFFFBh +
pop ebx  +
pop ebp  +
retn   +
mov eax 0FFFFFFFDh +
jmp loc_442127  +
***
mov eax ds:dword_4854A8 +
test eax eax +
jz loc_442191  +
push ebp  +
mov ebp esp +
push esi  +
push ebx  +
xor ebx ebx +
sub esp 10h +
mov eax [ebp+arg_8] +
lea esi [eax+18h] +
jmp loc_442168  +
add ebx 1 +
cmp ebx 20h +
jz loc_442188  +
mov eax [esi+ebx*8+8] +
lea edx [eax-1] +
cmp edx 0FFFFFFFDh +
ja loc_442160  +
mov [esp+1Ch+var_1C] eax +
add ebx 1 +
call ds:dword_48570C  +
sub esp 4 +
cmp ebx 20h +
jnz loc_442168  +
lea esp [ebp-8] +
xor eax eax +
pop ebx  +
pop esi  +
pop ebp  +
retn   +
mov eax 0FFFFFFFDh +
retn   +
***
mov ebp esp +
pop ebp  +
retn   +
***
mov ebp esp +
pop ebp  +
retn   +
***
mov edx [ebp+arg_8] +
mov ecx [ebp+arg_4] +
push ebx  +
lea eax [edx+edx*2] +
mov edx [ecx+10h] +
lea eax [edx+eax*8] +
mov ebx [eax+58h] +
mov eax [eax+5Ch] +
mov ebx [ebx+24h] +
mov [ebp+arg_0] eax +
mov eax ebx +
pop ebx  +
pop ebp  +
jmp eax  +
***
mov edx [ebp+arg_8] +
mov ecx [ebp+arg_4] +
push ebx  +
lea eax [edx+edx*2] +
mov edx [ecx+10h] +
lea eax [edx+eax*8] +
mov ebx [eax+58h] +
mov eax [eax+5Ch] +
mov ebx [ebx+28h] +
mov [ebp+arg_0] eax +
mov eax ebx +
pop ebx  +
pop ebp  +
jmp eax  +
***
mov edx [ebp+arg_8] +
mov ecx [ebp+arg_4] +
push ebx  +
lea eax [edx+edx*2] +
mov edx [ecx+10h] +
lea eax [edx+eax*8] +
mov ebx [eax+58h] +
mov eax [eax+5Ch] +
mov ebx [ebx+2Ch] +
mov [ebp+arg_0] eax +
mov eax ebx +
pop ebx  +
pop ebp  +
jmp eax  +
***
mov eax [ebp+arg_4] +
mov edx [eax] +
mov ecx [eax+30h] +
lea edx [edx+edx*2] +
movzx edx byte ptr [eax+edx*4+70h] +
mov eax [ecx+10h] +
lea edx [edx+edx*2] +
lea edx [eax+edx*8] +
mov ecx [edx+58h] +
mov edx [edx+5Ch] +
mov ecx [ecx+44h] +
mov [ebp+arg_0] edx +
pop ebp  +
jmp ecx  +
***
mov eax [ebp+arg_4] +
mov edx [eax] +
mov ecx [eax+30h] +
lea edx [edx+edx*2] +
movzx edx byte ptr [eax+edx*4+70h] +
mov eax [ecx+10h] +
lea edx [edx+edx*2] +
lea edx [eax+edx*8] +
mov ecx [edx+58h] +
mov edx [edx+5Ch] +
mov ecx [ecx+48h] +
mov [ebp+arg_0] edx +
pop ebp  +
jmp ecx  +
***
mov eax [ebp+arg_4] +
mov edx [eax] +
mov ecx [eax+30h] +
lea edx [edx+edx*2] +
movzx edx byte ptr [eax+edx*4+70h] +
mov eax [ecx+10h] +
lea edx [edx+edx*2] +
lea edx [eax+edx*8] +
mov ecx [edx+58h] +
mov edx [edx+5Ch] +
mov ecx [ecx+4Ch] +
mov [ebp+arg_0] edx +
pop ebp  +
jmp ecx  +
***
sub esp 18h +
mov edx [ebp+arg_0] +
mov eax [edx+10h] +
mov ecx [eax+8] +
mov eax [eax+48h] +
test eax eax +
jz loc_442308  +
mov eax [eax+18h] +
mov [esp+18h+var_14] edx +
mov [esp+18h+var_18] 0FFFFFFFFh +
call eax  +
leave   +
retn   +
mov [esp+18h+var_C] offset aProgramAsserti +
mov [esp+18h+var_10] offset aWindows_open +
mov [esp+18h+var_14] 1 +
mov [esp+18h+var_18] ecx +
call sub_43E390  +
mov eax 0FFFFFFFCh +
leave   +
retn   +
***
sub esp 18h +
mov ecx ds:dword_4854A8 +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_C] +
test ecx ecx +
mov edx [edx+10h] +
mov edx [edx+8] +
jz loc_442360  +
cmp eax 0FFh +
jg loc_442367  +
test eax eax +
jnz loc_442370  +
xor eax eax +
leave   +
retn   +
mov eax 0FFFFFFFDh +
leave   +
retn   +
mov eax 0FFFFFFFEh +
leave   +
retn   +
mov [esp+18h+var_C] offset aSetInterfaceAl +
mov [esp+18h+var_10] offset aHid_set_interf +
mov [esp+18h+var_14] 1 +
mov [esp+18h+var_18] edx +
call sub_43E390  +
mov eax 0FFFFFFF4h +
leave   +
retn   +
***
push esi  +
push ebx  +
sub esp 20h +
mov edx ds:dword_4854A8 +
mov esi [ebp+arg_4] +
mov ebx [ebp+arg_8] +
test edx edx +
mov eax [esi+10h] +
jz loc_442410  +
lea edx [ebx+ebx*2] +
mov eax [eax+edx*8+54h] +
test eax eax +
jz loc_44241E  +
lea eax [esi+ebx*8] +
cmp dword ptr [eax+1Ch] 0D1B5h +
jz loc_442417  +
mov dword ptr [eax+1Ch] 0D1B5h +
mov [esp+28h+var_18] ebx +
mov [esp+28h+var_1C] offset aClaimedInterfa +
mov [esp+28h+var_20] offset aHid_claim_inte +
mov [esp+28h+var_24] 4 +
mov [esp+28h+var_28] 0 +
call sub_43E390  +
xor eax eax +
mov [esi+18h] ebx +
add esp 20h +
pop ebx  +
pop esi  +
pop ebp  +
retn   +
mov eax 0FFFFFFFDh +
jmp loc_442406  +
mov eax 0FFFFFFFAh +
jmp loc_442406  +
mov eax 0FFFFFFFBh +
jmp loc_442406  +
***
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov ecx [ebp+arg_4] +
mov eax [ebp+arg_8] +
mov edx [ebp+arg_0] +
mov [ebp+var_1D+1] 0 +
mov ebx [ecx+10h] +
mov ecx [ecx+eax*8+20h] +
cmp edx 0FFFFFFFFh +
mov [ebp+var_2C] ecx +
jz loc_4426C0  +
imul esi edx +
mov ecx ds:dword_485600[esi] +
test ecx ecx +
jz loc_4426C8  +
lea eax [eax+eax*2] +
lea eax [ebx+eax*8] +
cmp byte ptr [eax+60h] 0 +
js loc_442620  +
cmp edx 1 +
mov edi 0FFFFFFFFh +
setz [ebp+var_31]  +
xor ebx ebx +
mov [ebp+var_30] eax +
nop   +
lea eax [ebp+var_1D+1] +
mov [esp+48h+var_38] eax +
mov eax [ebp+var_2C] +
mov [esp+48h+var_3C] 4 +
mov [esp+48h+var_40] 3 +
mov [esp+48h+var_44] ebx +
mov [esp+48h+var_48] eax +
call ds:dword_485648[esi]  +
sub esp 14h +
test eax eax +
jz loc_4424E1  +
cmp edi 0FFFFFFFFh +
jnz loc_44250E  +
mov eax [ebp+var_30] +
add edi 1 +
movsx eax byte ptr [eax+60h] +
cmp eax edi +
jle loc_442620  +
mov eax [ebp+var_30] +
mov eax [eax+64h] +
movzx ebx byte ptr [eax+edi] +
jmp loc_442490  +
mov [esp+5Ch+var_4C] ebx +
mov [esp+5Ch+var_50] offset aFailedToSetPip +
mov [esp+5Ch+var_54] offset aWinusbx_config +
mov [esp+5Ch+var_58] 4 +
mov [esp+5Ch+var_5C] 0 +
call sub_43E390  +
cmp edi 0FFFFFFFFh +
jz loc_4424C3  +
cmp [ebp+var_31] 0 +
jnz loc_4424C3  +
lea eax [ebp+var_1D] +
mov [esp+5Ch+var_4C] eax +
mov eax [ebp+var_2C] +
mov byte ptr [ebp+var_1D] 0 +
mov [esp+5Ch+var_50] 1 +
mov [esp+5Ch+var_54] 1 +
mov [esp+5Ch+var_58] ebx +
mov [esp+5Ch+var_5C] eax +
call ds:dword_485648[esi]  +
sub esp 14h +
test eax eax +
jz loc_442630  +
lea eax [ebp+var_1D] +
mov [esp+70h+var_60] eax +
mov eax [ebp+var_2C] +
mov [esp+70h+var_64] 1 +
mov [esp+70h+var_68] 4 +
mov [esp+70h+var_6C] ebx +
mov [esp+70h+var_70] eax +
call ds:dword_485648[esi]  +
sub esp 14h +
test eax eax +
jz loc_442690  +
lea eax [ebp+var_1D] +
mov [esp+84h+var_74] eax +
mov eax [ebp+var_2C] +
mov byte ptr [ebp+var_1D] 1 +
mov [esp+84h+var_78] 1 +
mov [esp+84h+var_7C] 5 +
mov [esp+84h+var_80] ebx +
mov [esp+84h+var_84] eax +
call ds:dword_485648[esi]  +
sub esp 14h +
test eax eax +
jz loc_442660  +
lea eax [ebp+var_1D] +
mov [esp+98h+var_88] eax +
mov eax [ebp+var_2C] +
mov [esp+98h+var_8C] 1 +
mov [esp+98h+var_90] 2 +
mov [esp+98h+var_94] ebx +
mov [esp+98h+var_98] eax +
call ds:dword_485648[esi]  +
sub esp 14h +
test eax eax +
jnz loc_4424C3  +
mov [esp+0ACh+var_9C] ebx +
add edi 1 +
mov [esp+0ACh+var_A0] offset aFailedToEnable +
mov [esp+0ACh+var_A4] offset aWinusbx_config +
mov [esp+0ACh+var_A8] 4 +
mov [esp+0ACh+var_AC] 0 +
call sub_43E390  +
mov eax [ebp+var_30] +
movsx eax byte ptr [eax+60h] +
cmp eax edi +
jg loc_4424D5  +
nop   +
xor eax eax +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+70h+var_60] ebx +
mov [esp+70h+var_64] offset aFailedToDisabl +
mov [esp+70h+var_68] offset aWinusbx_config +
mov [esp+70h+var_6C] 4 +
mov [esp+70h+var_70] 0 +
call sub_43E390  +
jmp loc_44254A  +
mov [esp+98h+var_88] ebx +
mov [esp+98h+var_8C] offset aFailedToEnab_0 +
mov [esp+98h+var_90] offset aWinusbx_config +
mov [esp+98h+var_94] 4 +
mov [esp+98h+var_98] 0 +
call sub_43E390  +
jmp loc_4425B2  +
mov [esp+84h+var_74] ebx +
mov [esp+84h+var_78] offset aFailedToDisa_0 +
mov [esp+84h+var_7C] offset aWinusbx_config +
mov [esp+84h+var_80] 4 +
mov [esp+84h+var_84] 0 +
call sub_43E390  +
jmp loc_44257C  +
mov edx [ebx+50h] +
jmp loc_44245C  +
mov eax 0FFFFFFFDh +
lea esi [esi+0] +
jmp loc_442622  +
***
push edi  +
push edi  +
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [ebp+arg_4] +
movzx edi [ebp+arg_8] +
mov esi [ebx+10h] +
lea edx [ebx+18h] +
mov ecx edi +
mov eax [esi+8] +
mov [ebp+var_1C] eax +
lea eax [esi+40h] +
call sub_442050  +
test eax eax +
js loc_442808  +
lea eax [eax+eax*2] +
lea eax [esi+eax*8] +
mov edx [eax+58h] +
mov eax [eax+5Ch] +
mov edx [edx+30h] +
mov dword ptr [ebp+arg_8] edi +
mov [ebp+arg_0] eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp edx  +
mov eax [ebp+var_1C] +
mov [esp+38h+var_2C] offset aUnableToMatc_0 +
mov [esp+38h+var_30] offset aComposite_clea +
mov [esp+38h+var_34] 1 +
mov [esp+38h+var_38] eax +
call sub_43E390  +
add esp 2Ch +
mov eax 0FFFFFFFBh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
sub esp 18h +
mov [esp+18h+var_C] offset aUnsupportedApi +
mov [esp+18h+var_10] offset aUnsupported_co +
mov [esp+18h+var_14] 4 +
mov [esp+18h+var_18] 0 +
call sub_43E390  +
mov eax 0FFFFFFF4h +
leave   +
retn   +
***
jmp sub_442880  +
***
sub esp 18h +
mov [esp+18h+var_C] offset aUnsupportedA_0 +
mov [esp+18h+var_10] offset aUnsupported_ab +
mov [esp+18h+var_14] 4 +
mov [esp+18h+var_18] 0 +
call sub_43E390  +
mov eax 0FFFFFFF4h +
leave   +
retn   +
***
jmp sub_4428C0  +
***
sub esp 18h +
mov [esp+18h+var_C] offset aUnsupportedA_1 +
mov [esp+18h+var_10] offset aUnsupported__0 +
mov [esp+18h+var_14] 4 +
mov [esp+18h+var_18] 0 +
call sub_43E390  +
mov eax 0FFFFFFF4h +
leave   +
retn   +
***
jmp sub_442900  +
***
sub esp 18h +
mov [esp+18h+var_C] offset aUnsupportedA_2 +
mov [esp+18h+var_10] offset aUnsupported_su +
mov [esp+18h+var_14] 4 +
mov [esp+18h+var_18] 0 +
call sub_43E390  +
mov eax 0FFFFFFF4h +
leave   +
retn   +
***
jmp sub_442940  +
***
sub esp 18h +
mov [esp+18h+var_C] offset aUnsupportedA_3 +
mov [esp+18h+var_10] offset aUnsupported__1 +
mov [esp+18h+var_14] 4 +
mov [esp+18h+var_18] 0 +
call sub_43E390  +
mov eax 0FFFFFFF4h +
leave   +
retn   +
***
jmp sub_442980  +
***
sub esp 18h +
mov [esp+18h+var_C] offset aUnsupportedA_4 +
mov [esp+18h+var_10] offset aUnsupported__2 +
mov [esp+18h+var_14] 4 +
mov [esp+18h+var_18] 0 +
call sub_43E390  +
mov eax 0FFFFFFF4h +
leave   +
retn   +
***
jmp sub_4429C0  +
***
sub esp 18h +
mov [esp+18h+var_C] offset aUnsupportedA_5 +
mov [esp+18h+var_10] offset aUnsupported_re +
mov [esp+18h+var_14] 4 +
mov [esp+18h+var_18] 0 +
call sub_43E390  +
mov eax 0FFFFFFF4h +
leave   +
retn   +
***
jmp sub_442A00  +
***
sub esp 18h +
mov [esp+18h+var_C] offset aUnsupportedA_6 +
mov [esp+18h+var_10] offset aUnsupported_cl +
mov [esp+18h+var_14] 4 +
mov [esp+18h+var_18] 0 +
call sub_43E390  +
mov eax 0FFFFFFF4h +
leave   +
retn   +
***
jmp sub_442A40  +
***
sub esp 18h +
mov [esp+18h+var_C] offset aUnsupportedA_7 +
mov [esp+18h+var_10] offset aUnsupported__3 +
mov [esp+18h+var_14] 4 +
mov [esp+18h+var_18] 0 +
call sub_43E390  +
mov eax 0FFFFFFF4h +
leave   +
retn   +
***
jmp sub_442A80  +
***
sub esp 18h +
mov [esp+18h+var_C] offset aUnsupportedA_8 +
mov [esp+18h+var_10] offset aUnsupported_se +
mov [esp+18h+var_14] 4 +
mov [esp+18h+var_18] 0 +
call sub_43E390  +
mov eax 0FFFFFFF4h +
leave   +
retn   +
***
jmp sub_442AC0  +
***
sub esp 18h +
mov [esp+18h+var_C] offset aUnsupportedA_9 +
mov [esp+18h+var_10] offset aUnsupported__4 +
mov [esp+18h+var_14] 4 +
mov [esp+18h+var_18] 0 +
call sub_43E390  +
mov eax 0FFFFFFF4h +
leave   +
retn   +
***
jmp sub_442B00  +
***
sub esp 18h +
mov [esp+18h+var_C] offset aUnsupported_10 +
mov [esp+18h+var_10] offset aUnsupported__5 +
mov [esp+18h+var_14] 4 +
mov [esp+18h+var_18] 0 +
call sub_43E390  +
mov eax 0FFFFFFF4h +
leave   +
retn   +
***
jmp sub_442B40  +
***
sub esp 18h +
mov [esp+18h+var_C] offset aUnsupported_11 +
mov [esp+18h+var_10] offset aUnsupported__6 +
mov [esp+18h+var_14] 4 +
mov [esp+18h+var_18] 0 +
call sub_43E390  +
leave   +
retn   +
***
sub esp 18h +
mov [esp+18h+var_C] offset aUnsupported_12 +
mov [esp+18h+var_10] offset aUnsupported_op +
mov [esp+18h+var_14] 4 +
mov [esp+18h+var_18] 0 +
call sub_43E390  +
mov eax 0FFFFFFF4h +
leave   +
retn   +
***
jmp sub_442BB0  +
***
push esi  +
push ebx  +
mov ebx eax +
sub esp 20h +
test eax eax +
jz loc_442D66  +
mov esi ds:_snprintf +
mov [esp+28h+var_1C] ebx +
mov [esp+28h+var_20] offset aU +
mov [esp+28h+var_24] 100h +
mov [esp+28h+var_28] offset byte_485500 +
call esi  +
mov eax ebx +
and eax 0E0000000h +
mov ds:byte_4855FF 0 +
jz loc_442D50  +
cmp eax 0E0000000h +
jz loc_442CF7  +
mov eax offset byte_485500 +
mov ecx [eax] +
add eax 4 +
lea edx [ecx-1010101h] +
not ecx  +
and edx ecx +
and edx 80808080h +
jz loc_442C09  +
mov ecx edx +
shr ecx 10h +
test edx 8080h +
cmovz edx ecx +
lea ecx [eax+2] +
cmovz eax ecx +
add dl dl +
sbb eax 3 +
mov edx 100h +
sub eax offset byte_485500 +
sub edx eax +
add eax offset byte_485500 +
mov [esp+28h+var_14] edx +
mov [esp+28h+var_10] 0 +
mov [esp+28h+var_18] eax +
mov [esp+28h+var_1C] 400h +
mov [esp+28h+var_20] ebx +
mov [esp+28h+var_24] 0 +
mov [esp+28h+var_28] 1000h +
call ds:FormatMessageA  +
mov edx offset byte_485500 +
sub esp 1Ch +
test eax eax +
jz loc_442D05  +
mov ecx [edx] +
add edx 4 +
lea eax [ecx-1010101h] +
not ecx  +
and eax ecx +
and eax 80808080h +
jz loc_442C87  +
mov ecx eax +
shr ecx 10h +
test eax 8080h +
cmovz eax ecx +
lea ecx [edx+2] +
cmovz edx ecx +
add al al +
sbb edx 3 +
sub edx offset byte_485500 +
mov eax edx +
sub eax 1 +
js loc_442CEB  +
movzx edx ds:byte_4854FF[edx] +
cmp dl 0Dh +
jz loc_442CDC  +
jmp loc_442D43  +
movzx edx ds:byte_485500[eax] +
cmp dl 0Dh +
jnz loc_442D43  +
mov ds:byte_485500[eax] 0 +
sub eax 1 +
cmp eax 0FFFFFFFFh +
jnz loc_442CD0  +
lea esp [ebp-8] +
mov eax offset byte_485500 +
pop ebx  +
pop esi  +
pop ebp  +
retn   +
movzx ebx bx +
or ebx 800F0000h +
jmp loc_442C04  +
call ds:GetLastError  +
test eax eax +
jz loc_442D73  +
mov [esp+28h+var_1C] ebx +
mov [esp+28h+var_18] eax +
mov [esp+28h+var_20] offset aWindowsErrorCo +
mov [esp+28h+var_24] 100h +
mov [esp+28h+var_28] offset byte_485500 +
call esi  +
mov eax offset byte_485500 +
mov ds:byte_4855FF 0 +
lea esp [ebp-8] +
pop ebx  +
pop esi  +
pop ebp  +
retn   +
cmp dl 0Ah +
jz loc_442CDC  +
jmp loc_442CEB  +
test ebx ebx +
jz loc_442C04  +
movzx ebx bx +
or ebx 80070000h +
jmp loc_442C04  +
call ds:GetLastError  +
mov ebx eax +
jmp loc_442BC2  +
mov [esp+28h+var_1C] ebx +
mov [esp+28h+var_20] offset aUnknownErrorCo +
mov [esp+28h+var_24] 100h +
mov [esp+28h+var_28] offset byte_485500 +
call esi  +
mov eax offset byte_485500 +
mov ds:byte_4855FF 0 +
lea esp [ebp-8] +
pop ebx  +
pop esi  +
pop ebp  +
retn   +
***
push edi  +
push esi  +
push ebx  +
sub esp 6Ch +
lea ebx [ebp+var_34] +
mov [esp+78h+var_68] 0 +
mov [esp+78h+var_6C] 400h +
mov [esp+78h+var_70] 400h +
mov [esp+78h+var_74] 0 +
mov [esp+78h+var_78] ebx +
call ds:dword_48575C  +
mov eax [ebp+arg_0] +
sub esp 14h +
mov [esp+8Ch+var_8C] eax +
mov eax ds:SetEvent +
mov [ebp+var_54] eax +
call eax  +
sub esp 4 +
test eax eax +
jz loc_442F50  +
mov [esp+8Ch+var_80] 402h +
mov [esp+8Ch+var_84] 401h +
mov [esp+8Ch+var_88] 0 +
mov [esp+8Ch+var_8C] ebx +
call ds:dword_485760  +
sub esp 10h +
cmp eax 0FFFFFFFFh +
jz loc_442F82  +
mov eax [ebp+var_30] +
cmp eax 401h +
jz loc_442E71  +
cmp eax 402h +
jnz loc_442E03  +
mov [esp+9Ch+var_90] offset aTimerThreadQui +
mov [esp+9Ch+var_94] offset aWindows_clock_ +
mov [esp+9Ch+var_98] 4 +
mov [esp+9Ch+var_9C] 0 +
call sub_43E390  +
xor eax eax +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
lea eax [ebp+var_40] +
mov edi [ebp+var_28] +
mov [esp+9Ch+var_9C] eax +
call ds:QueryPerformanceCounter  +
mov edx [ebp+var_3C] +
mov eax [ebp+var_40] +
mov esi [edi] +
mov ecx ds:dword_48716C +
mov [ebp+var_4C] edx +
mov edx ds:dword_487168 +
mov [ebp+var_50] eax +
mov eax [ebp+var_50] +
sub esp 4 +
mov [esp+9Ch+var_90] ecx +
mov [esp+9Ch+var_94] edx +
mov [ebp+var_60] edx +
mov edx [ebp+var_4C] +
mov [esp+9Ch+var_9C] eax +
mov [ebp+var_5C] ecx +
mov [esp+9Ch+var_98] edx +
call sub_458110  +
mov edx [ebp+var_60] +
mov ecx [ebp+var_5C] +
mov [esi] eax +
mov eax [ebp+var_50] +
mov [esp+9Ch+var_94] edx +
mov edx [ebp+var_4C] +
mov [esp+9Ch+var_90] ecx +
mov [esp+9Ch+var_9C] eax +
mov [esp+9Ch+var_98] edx +
call sub_458220  +
mov [esp+9Ch+var_94] 3E8h +
mov [esp+9Ch+var_90] 0 +
mov [esp+9Ch+var_9C] eax +
mov [esp+9Ch+var_98] edx +
call sub_458110  +
imul eax ds:dword_487178 +
mov [esi+4] eax +
mov eax [edi+4] +
mov [esp+9Ch+var_9C] eax +
call [ebp+var_54]  +
sub esp 4 +
test eax eax +
jnz loc_442E03  +
call sub_442BB0  +
mov [esp+0A0h+var_94] offset aSeteventFailed +
mov [esp+0A0h+var_98] offset aWindows_clock_ +
mov [esp+0A0h+var_9C] 1 +
mov [esp+0A0h+var_A0] 0 +
mov [esp+0A0h+var_90] eax +
call sub_43E390  +
jmp loc_442E03  +
call sub_442BB0  +
mov [esp+8Ch+var_80] offset aSeteventFail_0 +
mov [esp+8Ch+var_84] offset aWindows_clock_ +
mov [esp+8Ch+var_88] 4 +
mov [esp+8Ch+var_8C] 0 +
mov [esp+8Ch+var_7C] eax +
call sub_43E390  +
jmp loc_442E03  +
xor eax eax +
call sub_442BB0  +
mov [esp+9Ch+var_90] offset aGetmessageFail +
mov [esp+9Ch+var_94] offset aWindows_clock_ +
mov [esp+9Ch+var_98] 1 +
mov [esp+9Ch+var_9C] 0 +
mov [esp+9Ch+var_8C] eax +
call sub_43E390  +
mov eax 1 +
jmp loc_442E67  +
***
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [ebp+arg_4] +
mov ecx [ebp+arg_8] +
mov eax [ebx+10h] +
lea edx [ebx+18h] +
mov esi [eax+8] +
add eax 40h +
mov [ebp+var_1C] esi +
mov esi ds:dword_4854A8 +
test esi esi +
jz loc_443046  +
movzx esi cl +
mov ecx esi +
call sub_442050  +
test eax eax +
mov edi eax +
js loc_443083  +
mov [esp+38h+var_24] eax +
mov [esp+38h+var_28] esi +
mov [esp+38h+var_2C] offset aMatchedEndpoin +
mov [esp+38h+var_30] offset aHid_clear_halt +
mov [esp+38h+var_34] 4 +
mov [esp+38h+var_38] 0 +
call sub_43E390  +
mov eax [ebx+edi*8+20h] +
mov [esp+38h+var_38] eax +
call ds:dword_48570C  +
sub esp 4 +
test eax eax +
jz loc_443050  +
xor eax eax +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax 0FFFFFFFDh +
jmp loc_44303E  +
call sub_442BB0  +
mov [esp+3Ch+var_30] offset aFlushingOfHidQ +
mov [esp+3Ch+var_34] offset aHid_clear_halt +
mov [esp+3Ch+var_38] 1 +
mov [esp+3Ch+var_2C] eax +
mov eax [ebp+var_1C] +
mov [esp+3Ch+var_3C] eax +
call sub_43E390  +
mov eax 0FFFFFFFCh +
jmp loc_44303E  +
mov eax [ebp+var_1C] +
mov [esp+38h+var_2C] offset aUnableToMatc_0 +
mov [esp+38h+var_30] offset aHid_clear_halt +
mov [esp+38h+var_34] 1 +
mov [esp+38h+var_38] eax +
call sub_43E390  +
mov eax 0FFFFFFFBh +
jmp loc_44303E  +
***
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [ebp+arg_4] +
mov eax [ebp+arg_0] +
mov edi [ebx+30h] +
mov edx [ebx] +
cmp eax 0FFFFFFFFh +
mov ecx [edi+10h] +
lea edx [edx+edx*2] +
lea edx [ebx+edx*4+58h] +
mov esi [ecx+8] +
mov [ebp+var_20] esi +
jz loc_443150  +
imul eax eax +
lea esi dword_485600[eax] +
mov eax ds:dword_485600[eax] +
test eax eax +
jz loc_443155  +
movzx eax byte ptr [edx+18h] +
cmp al 1Fh +
movzx edx al +
ja loc_443160  +
mov [esp+38h+var_28] edx +
mov [esp+38h+var_2C] offset aWillUseInterfa +
mov [esp+38h+var_30] offset aWinusbx_abort_ +
mov [esp+38h+var_34] 4 +
mov [esp+38h+var_38] 0 +
mov [ebp+var_1C] edx +
call sub_43E390  +
mov edx [ebp+var_1C] +
movzx ecx byte ptr [ebx+35h] +
mov eax [esi+4] +
mov edx [edi+edx*8+20h] +
mov [esp+38h+var_34] ecx +
mov [esp+38h+var_38] edx +
call eax  +
sub esp 8 +
test eax eax +
jz loc_443190  +
xor eax eax +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ecx+50h] +
jmp loc_4430D9  +
mov eax 0FFFFFFFDh +
jmp loc_443142  +
mov eax [ebp+var_20] +
mov [esp+38h+var_2C] offset aProgramAsser_0 +
mov [esp+38h+var_30] offset aWinusbx_abort_ +
mov [esp+38h+var_34] 1 +
mov [esp+38h+var_38] eax +
call sub_43E390  +
mov eax 0FFFFFFFBh +
jmp loc_443142  +
call sub_442BB0  +
mov [esp+40h+var_34] offset aAbortpipeFaile +
mov [esp+40h+var_38] offset aWinusbx_abort_ +
mov [esp+40h+var_3C] 1 +
mov [esp+40h+var_30] eax +
mov eax [ebp+var_20] +
mov [esp+40h+var_40] eax +
call sub_43E390  +
mov eax 0FFFFFFFCh +
jmp loc_443142  +
***
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [ebp+arg_4] +
mov edi [ebp+arg_0] +
mov ecx [ebp+arg_8] +
mov esi [ebx+10h] +
lea edx [ebx+18h] +
cmp edi 0FFFFFFFFh +
mov eax [esi+8] +
mov [ebp+var_20] eax +
lea eax [esi+40h] +
jz loc_443270  +
imul edi edi +
mov esi ds:dword_485600[edi] +
test esi esi +
jz loc_443275  +
movzx esi cl +
mov ecx esi +
call sub_442050  +
test eax eax +
js loc_4432B3  +
mov [esp+38h+var_24] eax +
mov [esp+38h+var_28] esi +
mov [esp+38h+var_2C] offset aMatchedEndpoin +
mov [esp+38h+var_30] offset aWinusbx_clear_ +
mov [esp+38h+var_34] 4 +
mov [esp+38h+var_38] 0 +
mov [ebp+var_1C] eax +
call sub_43E390  +
mov eax [ebp+var_1C] +
mov edx [ebx+eax*8+20h] +
mov eax ds:dword_485640[edi] +
mov [esp+38h+var_34] esi +
mov [esp+38h+var_38] edx +
call eax  +
sub esp 8 +
test eax eax +
jz loc_443280  +
xor eax eax +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edi [esi+50h] +
jmp loc_4431F6  +
mov eax 0FFFFFFFDh +
jmp loc_443263  +
call sub_442BB0  +
mov [esp+40h+var_34] offset aResetpipeFaile +
mov [esp+40h+var_38] offset aWinusbx_clear_ +
mov [esp+40h+var_3C] 1 +
mov [esp+40h+var_30] eax +
mov eax [ebp+var_20] +
mov [esp+40h+var_40] eax +
call sub_43E390  +
mov eax 0FFFFFFFCh +
jmp loc_443263  +
mov eax [ebp+var_20] +
mov [esp+38h+var_2C] offset aUnableToMatc_0 +
mov [esp+38h+var_30] offset aWinusbx_clear_ +
mov [esp+38h+var_34] 1 +
mov [esp+38h+var_38] eax +
call sub_43E390  +
mov eax 0FFFFFFFBh +
jmp loc_443263  +
***
push esi  +
push edi  +
push esi  +
push ebx  +
xor ebx ebx +
sub esp 1Ch +
mov edi [ebp+arg_4] +
mov eax [edi+10h] +
lea esi [eax+58h] +
mov eax ds:dword_4854A8 +
test eax eax +
jnz loc_4433DB  +
jmp loc_443405  +
add ebx 1 +
add esi 18h +
cmp ebx 20h +
jz loc_443405  +
mov eax [esi] +
cmp byte ptr [eax] 4 +
jnz loc_4433D0  +
mov eax [edi+ebx*8+20h] +
lea ecx [eax-1] +
cmp ecx 0FFFFFFFDh +
ja loc_4433D0  +
mov [esp+28h+var_28] eax +
add ebx 1 +
add esi 18h +
call ds:CloseHandle  +
sub esp 4 +
cmp ebx 20h +
jnz loc_4433DB  +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov eax [ebp+arg_4] +
cmp [ebp+arg_0] 0FFFFFFFFh +
mov edx [eax+10h] +
jz loc_443510  +
imul eax [ebp+arg_0] +
mov ecx ds:dword_485600[eax] +
test ecx ecx +
jz loc_4434B0  +
mov ecx [edx+48h] +
mov ebx 1 +
mov edi [ebp+arg_4] +
cmp byte ptr [ecx] 2 +
lea esi [edi+18h] +
mov edi eax +
jnz loc_4434CC  +
mov ecx [ebp+arg_4] +
xor bl bl +
lea edi [edx+40h] +
mov [ebp+var_20] eax +
lea esi [ecx+1Ch] +
jmp loc_44346E  +
add ebx 18h +
add esi 8 +
cmp ebx 300h +
jz loc_4434B0  +
mov eax [edi+ebx+18h] +
cmp byte ptr [eax] 3 +
jnz loc_443460  +
mov eax [esi+4] +
lea ecx [eax-1] +
cmp ecx 0FFFFFFFDh +
jbe loc_443520  +
mov eax [esi] +
lea ecx [eax-1] +
cmp ecx 0FFFFFFFDh +
ja loc_443460  +
mov [esp+28h+var_28] eax +
add ebx 18h +
add esi 8 +
call ds:CloseHandle  +
sub esp 4 +
cmp ebx 300h +
jnz loc_44346E  +
lea esi [esi+0] +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+0] eax +
add ebx 1 +
call ds:dword_485610[edi]  +
sub esp 4 +
cmp ebx 20h +
jz loc_4434E0  +
mov eax [esi+ebx*8+8] +
lea edx [eax-1] +
cmp edx 0FFFFFFFDh +
jbe loc_4434B8  +
add ebx 1 +
cmp ebx 20h +
jnz loc_4434CC  +
mov eax [ebp+arg_4] +
mov eax [eax+20h] +
lea edx [eax-1] +
cmp edx 0FFFFFFFDh +
jbe loc_443539  +
mov eax [ebp+arg_4] +
mov eax [eax+1Ch] +
lea edx [eax-1] +
cmp edx 0FFFFFFFDh +
ja loc_4434B0  +
mov [esp] eax +
call ds:CloseHandle  +
sub esp 4 +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [edx+50h] +
mov [ebp+arg_0] eax +
jmp loc_443429  +
mov ecx [ebp+var_20] +
mov [esp+28h+var_28] eax +
mov ecx ds:dword_485610[ecx] +
mov [ebp+var_1C] ecx +
call ecx  +
sub esp 4 +
jmp loc_443486  +
imul edx [ebp+arg_0] +
mov [esp] eax +
mov edx ds:dword_485610[edx] +
call edx  +
sub esp 4 +
jmp loc_4434EE  +
***
mov ebp esp +
push esi  +
push ebx  +
sub esp 20h +
mov ebx [ebp+arg_4] +
mov [ebp+var_18] 0 +
mov [ebp+var_14] 0 +
mov [ebp+var_10] 0 +
mov edx [ebx+10h] +
mov [ebp+var_C] 0 +
lea ecx [edx+40h] +
jmp loc_443597  +
cmp dl 4 +
jnz loc_44358D  +
mov [ebp+var_C] 1 +
add eax 18h +
cmp eax 300h +
jz loc_4435BE  +
mov edx [ecx+eax+18h] +
movzx edx byte ptr [edx] +
cmp dl 3 +
jnz loc_443581  +
mov edx [ecx+eax+1Ch] +
cmp edx 0FFFFFFFFh +
jz loc_44358D  +
add eax 18h +
cmp eax 300h +
mov [ebp+edx*4+var_18] 1 +
jnz loc_443597  +
xor esi esi +
mov edx [ebp+esi*4+var_18] +
test edx edx +
jnz loc_4435E0  +
add esi 1 +
cmp esi 3 +
jnz loc_4435C0  +
mov eax [ebp+var_C] +
test eax eax +
jnz loc_4435F0  +
add esp 20h +
pop ebx  +
pop esi  +
pop ebp  +
retn   +
mov [esp+28h+var_24] ebx +
mov [esp+28h+var_28] esi +
call sub_443410  +
jmp loc_4435C8  +
mov [ebp+arg_4] ebx +
mov [ebp+arg_0] 0FFFFFFFFh +
add esp 20h +
pop ebx  +
pop esi  +
pop ebp  +
jmp sub_4433B0  +
***
push esi  +
push ebx  +
sub esp 10h +
mov ebx [ebp+arg_0] +
mov eax [ebx+4Ch] +
test eax eax +
jz loc_443631  +
mov [esp+18h+var_18] eax +
call free  +
mov dword ptr [ebx+4Ch] 0 +
cmp byte ptr [ebx+15h] 0 +
mov edx [ebx+36Ch] +
jz loc_443670  +
xor esi esi +
test edx edx +
jz loc_443686  +
mov eax [edx+esi*4] +
test eax eax +
jz loc_443665  +
mov [esp+18h+var_18] eax +
call free  +
mov eax [ebx+36Ch] +
mov dword ptr [eax+esi*4] 0 +
mov edx [ebx+36Ch] +
movzx eax byte ptr [ebx+15h] +
add esi 1 +
cmp esi eax +
jl loc_443643  +
test edx edx +
jz loc_443686  +
mov [esp+18h+var_18] edx +
call free  +
mov dword ptr [ebx+36Ch] 0 +
mov eax [ebx+354h] +
test eax eax +
jz loc_4436A2  +
mov [esp+18h+var_18] eax +
call free  +
mov dword ptr [ebx+354h] 0 +
add ebx 54h +
mov esi 20h +
lea esi [esi+0] +
mov eax [ebx] +
test eax eax +
jz loc_4436C4  +
mov [esp+18h+var_18] eax +
call free  +
mov dword ptr [ebx] 0 +
mov eax [ebx+10h] +
test eax eax +
jz loc_4436DA  +
mov [esp+18h+var_18] eax +
call free  +
mov dword ptr [ebx+10h] 0 +
add ebx 18h +
sub esi 1 +
jnz loc_4436B0  +
add esp 10h +
pop ebx  +
pop esi  +
pop ebp  +
retn   +
***
push esi  +
push ebx  +
sub esp 20h +
mov ebx [ebp+arg_0] +
mov eax [ebx] +
lea eax [eax+eax*2] +
lea esi [ebx+eax*4+58h] +
mov [esp+28h+var_28] esi +
call sub_44DFA0  +
mov eax [esi+1Ch] +
test eax eax +
jz loc_443722  +
mov [esp+28h+var_28] eax +
call free  +
mov dword ptr [esi+1Ch] 0 +
mov eax [ebx] +
lea eax [eax+eax*2] +
lea esi [ebx+eax*4+58h] +
mov ebx [ebx+30h] +
mov [esp+28h+var_28] offset unk_487160 +
call sub_44CBC0  +
movzx eax byte ptr [esi+18h] +
lea eax [ebx+eax*4] +
mov edx [eax+11Ch] +
test edx edx +
jle loc_443763  +
sub edx 1 +
mov [eax+11Ch] edx +
movzx eax byte ptr [esi+18h] +
mov edx [ebx+eax*4+11Ch] +
test edx edx +
jz loc_443775  +
mov [ebp+arg_0] offset unk_487160 +
lea esp [ebp-8] +
pop ebx  +
pop esi  +
pop ebp  +
jmp sub_44CC10  +
mov [esp+28h+var_24] eax +
mov [esp+28h+var_28] ebx +
call sub_43F2F0  +
sub esp 8 +
test eax eax +
jz loc_4437C5  +
mov [esp+28h+var_28] eax +
call sub_43FD90  +
sub esp 4 +
mov [esp+28h+var_14] eax +
movzx eax byte ptr [esi+18h] +
mov [esp+28h+var_1C] offset aFailedToAutoRe +
mov [esp+28h+var_20] offset aAuto_release +
mov [esp+28h+var_24] 4 +
mov [esp+28h+var_18] eax +
mov [esp+28h+var_28] 0 +
call sub_43E390  +
jmp loc_443763  +
movzx eax byte ptr [esi+18h] +
mov [esp+28h+var_1C] offset aAutoReleasedIn +
mov [esp+28h+var_20] offset aAuto_release +
mov [esp+28h+var_24] 4 +
mov [esp+28h+var_18] eax +
mov [esp+28h+var_28] 0 +
call sub_43E390  +
jmp loc_443763  +
***
push edi  +
push esi  +
push ebx  +
sub esp 4Ch +
mov eax [ebp+arg_0] +
add eax 24h +
mov [esp+58h+var_58] eax +
mov [ebp+var_3C] eax +
call sub_44CBC0  +
mov edi [ebp+arg_C] +
test edi edi +
jle loc_4439D8  +
mov eax [ebp+arg_0] +
mov esi [ebp+arg_8] +
mov ebx [ebp+arg_4] +
mov [ebp+var_2C] 0 +
add eax 3Ch +
mov [ebp+var_30] eax +
mov eax [ebp+arg_0] +
add eax 34h +
test esi esi +
jz loc_4439D8  +
mov edi ebx +
mov esi eax +
jmp loc_44386E  +
mov eax [ebp+arg_C] +
add edi 8 +
add [ebp+var_2C] 1 +
test eax eax +
jle loc_4439D8  +
mov eax [ebp+var_2C] +
cmp [ebp+arg_8] eax +
jbe loc_4439D8  +
mov eax [edi] +
movsx edx word ptr [edi+6] +
mov [esp+58h+var_4C] offset aCheckingFdDWit +
mov [esp+58h+var_50] offset aWindows_handle +
mov [esp+58h+var_48] eax +
mov [esp+58h+var_44] edx +
mov [esp+58h+var_54] 4 +
mov [esp+58h+var_58] 0 +
call sub_43E390  +
cmp word ptr [edi+6] 0 +
jz loc_443850  +
mov eax [ebp+var_30] +
sub [ebp+arg_C] 1 +
mov [esp+58h+var_58] eax +
call sub_44CBC0  +
mov eax [ebp+arg_0] +
mov eax [eax+38h] +
cmp esi eax +
lea edx [eax-4] +
jz loc_4438ED  +
mov eax [eax-4] +
lea eax [eax+eax*2] +
lea ebx [edx+eax*4+58h] +
mov eax [edi] +
cmp [ebx] eax +
jnz loc_4438E3  +
jmp loc_443940  +
mov ecx [ecx-4] +
lea ecx [ecx+ecx*2] +
lea ebx [edx+ecx*4+58h] +
cmp [ebx] eax +
jz loc_443940  +
mov ecx [edx+8] +
cmp esi ecx +
lea edx [ecx-4] +
jnz loc_4438D5  +
mov eax [ebp+var_30] +
mov [esp+58h+var_58] eax +
call sub_44CC10  +
mov eax [ebp+var_3C] +
mov [esp+58h+var_58] eax +
call sub_44CC10  +
mov eax [edi] +
mov edx [edi+4] +
mov [esp+58h+var_4C] offset aCouldNotFindAM +
mov [esp+58h+var_50] offset aWindows_handle +
mov [esp+58h+var_48] eax +
mov eax [ebp+arg_0] +
mov [esp+58h+var_44] edx +
mov [esp+58h+var_54] 1 +
mov [esp+58h+var_58] eax +
call sub_43E390  +
lea esp [ebp-0Ch] +
mov eax 0FFFFFFFBh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebp+var_30] +
mov [ebp+var_34] edx +
mov [esp+58h+var_58] eax +
call sub_44CC10  +
mov eax [ebx+8] +
mov edx [ebp+var_34] +
cmp dword ptr [eax] 104h +
jnz loc_4439F0  +
mov eax [eax+4] +
mov [ebp+var_34] 0 +
mov [ebp+var_1C] eax +
mov eax [ebx] +
mov [ebp+var_38] edx +
mov [esp+58h+var_54] eax +
mov eax [ebp+arg_0] +
mov [esp+58h+var_58] eax +
call sub_450550  +
mov edx [ebp+var_38] +
mov eax [ebp+var_1C] +
movzx ebx byte ptr [edx+36h] +
cmp bl 3 +
jbe loc_443A70  +
cmp bl 4 +
jnz loc_443A38  +
mov eax [edx+30h] +
add edi 8 +
mov eax [eax+10h] +
mov eax [eax+8] +
mov [esp+58h+var_4C] offset aBulkStreamTran +
mov [esp+58h+var_50] offset aWindows_hand_0 +
mov [esp+58h+var_54] 2 +
mov [esp+58h+var_58] eax +
call sub_43E390  +
mov eax [ebp+arg_C] +
add [ebp+var_2C] 1 +
test eax eax +
jg loc_443862  +
mov eax [ebp+var_3C] +
mov [esp+58h+var_58] eax +
call sub_44CC10  +
lea esp [ebp-0Ch] +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [ebp+var_38] edx +
mov edx [ebx+4] +
lea ecx [ebp+var_1C] +
mov [esp+58h+var_4C] 0 +
mov [esp+58h+var_50] ecx +
mov [esp+58h+var_54] eax +
mov [esp+58h+var_58] edx +
call ds:GetOverlappedResult  +
mov edx [ebp+var_38] +
mov [ebp+var_34] 0 +
sub esp 10h +
test eax eax +
jnz loc_44396D  +
call ds:GetLastError  +
mov edx [ebp+var_38] +
mov [ebp+var_34] eax +
jmp loc_44396D  +
mov eax [edx+30h] +
mov eax [eax+10h] +
mov eax [eax+8] +
mov [esp+58h+var_48] ebx +
mov [esp+58h+var_4C] offset aUnknownEndpoin +
mov [esp+58h+var_50] offset aWindows_hand_0 +
mov [esp+58h+var_54] 1 +
mov [esp+58h+var_58] eax +
call sub_43E390  +
jmp loc_443850  +
mov ebx [edx+30h] +
mov [ebp+var_40] eax +
mov [ebp+var_38] edx +
mov ebx [ebx+10h] +
mov [esp+58h+var_44] eax +
mov eax [ebp+var_34] +
mov [esp+58h+var_4C] offset aHandlingIOComp +
mov [esp+58h+var_50] offset aWindows_transf +
mov [esp+58h+var_54] 4 +
mov [esp+58h+var_48] eax +
mov [esp+58h+var_58] 0 +
call sub_43E390  +
mov edx [ebp+var_38] +
cmp [ebp+var_34] 1Fh +
jz loc_443BD8  +
mov eax [ebp+var_40] +
jbe loc_443B5F  +
mov ecx [ebp+var_34] +
cmp ecx 79h +
jz loc_443B11  +
cmp ecx 3E3h +
jnz loc_443B87  +
mov ebx [ebx+48h] +
mov [ebp+var_34] edx +
mov ebx [ebx+4Ch] +
mov [esp+58h+var_54] edx +
mov [esp+58h+var_50] eax +
mov [esp+58h+var_58] 0FFFFFFFFh +
call ebx  +
mov edx [ebp+var_34] +
test eax eax +
jnz loc_443C3D  +
test byte ptr [edx+24h] 1 +
mov [ebp+var_34] edx +
jz loc_443C0C  +
mov [esp+58h+var_4C] offset aDetectedTimeou +
jmp loc_443B1C  +
mov [ebp+var_34] edx +
mov [esp+58h+var_4C] offset aDetectedSemaph +
mov [esp+58h+var_50] offset aWindows_transf +
mov ebx 2 +
mov [esp+58h+var_54] 4 +
mov [esp+58h+var_58] 0 +
call sub_43E390  +
mov edx [ebp+var_34] +
mov [esp+58h+var_58] edx +
mov [ebp+var_34] edx +
call sub_4436F0  +
mov edx [ebp+var_34] +
mov [esp+58h+var_54] ebx +
mov [esp+58h+var_58] edx +
call sub_44F840  +
jmp loc_443850  +
mov ecx [ebp+var_34] +
test ecx ecx +
jnz loc_443B87  +
mov ebx [ebx+48h] +
mov [ebp+var_34] edx +
mov ebx [ebx+4Ch] +
mov [esp+58h+var_54] edx +
mov [esp+58h+var_50] eax +
mov [esp+58h+var_58] 0FFFFFFFFh +
call ebx  +
mov edx [ebp+var_34] +
mov ebx eax +
jmp loc_443B40  +
mov eax [ebp+var_34] +
mov [ebp+var_38] edx +
call sub_442BB0  +
mov edx [ebp+var_38] +
mov ebx eax +
mov eax [edx+30h] +
mov eax [eax+10h] +
mov eax [eax+8] +
mov [esp+58h+var_44] ebx +
mov ebx [ebp+var_34] +
mov [esp+58h+var_4C] offset aDetectedIOErro +
mov [esp+58h+var_50] offset aWindows_transf +
mov [esp+58h+var_54] 1 +
mov [esp+58h+var_48] ebx +
mov ebx 1 +
mov [esp+58h+var_58] eax +
call sub_43E390  +
mov edx [ebp+var_38] +
jmp loc_443B40  +
mov [esp+58h+var_4C] offset aDetectedEndpoi +
mov ebx 4 +
mov [esp+58h+var_50] offset aWindows_transf +
mov [esp+58h+var_54] 4 +
mov [esp+58h+var_58] 0 +
mov [ebp+var_34] edx +
call sub_43E390  +
mov edx [ebp+var_34] +
jmp loc_443B40  +
mov [esp+58h+var_4C] offset aDetectedOperat +
mov ebx 3 +
mov [esp+58h+var_50] offset aWindows_transf +
mov [esp+58h+var_54] 4 +
mov [esp+58h+var_58] 0 +
call sub_43E390  +
mov edx [ebp+var_34] +
jmp loc_443B40  +
mov [esp+58h+var_48] eax +
mov [esp+58h+var_4C] offset aFailedToCopyPa +
mov [esp+58h+var_50] offset aWindows_transf +
mov [esp+58h+var_54] 4 +
mov [esp+58h+var_58] 0 +
call sub_43E390  +
mov edx [ebp+var_34] +
jmp loc_443AFA  +
***
push edi  +
mov edi edx +
push esi  +
mov esi ecx +
push ebx  +
sub esp 4Ch +
mov [ebp+var_34] eax +
mov eax [eax+10h] +
mov ebx [eax+8] +
mov ecx eax +
mov [ebp+var_30] eax +
lea eax [ebp+var_1C] +
mov [esp+58h+var_50] eax +
movzx eax byte ptr [ecx+42h] +
mov [esp+58h+var_58] ecx +
mov byte ptr [ebp+var_2C] al +
sub eax 1 +
movzx eax al +
mov [esp+58h+var_54] eax +
call sub_440C00  +
sub esp 0Ch +
test eax eax +
jnz loc_443DE2  +
mov eax [ebp+var_1C] +
lea edx [esi+esi*2] +
mov ecx [ebp+var_30] +
mov eax [eax+0Ch] +
mov eax [eax+edi*8] +
lea esi [eax+edx*8] +
lea eax [edi+edi*2] +
lea ebx [ecx+eax*8] +
mov eax [ebx+64h] +
test eax eax +
jz loc_443CE4  +
mov [esp+58h+var_58] eax +
call free  +
mov dword ptr [ebx+64h] 0 +
movzx eax byte ptr [esi+4] +
test al al +
jz loc_443DB0  +
mov [esp+58h+var_58] eax +
call malloc  +
mov ecx [ebp+var_30] +
lea edx [edi+edi*2] +
lea edx [ecx+edx*8] +
test eax eax +
mov [edx+64h] eax +
jz loc_443E14  +
movzx eax byte ptr [esi+4] +
xor ebx ebx +
mov [edx+60h] al +
cmp byte ptr [esi+4] 0 +
jz loc_443D77  +
mov [ebp+var_2C] edi +
mov edi edx +
mov eax [esi+0Ch] +
lea edx [ebx+ebx*4] +
lea edx [eax+edx*4] +
mov eax [ebp+var_2C] +
movzx ecx byte ptr [edx+2] +
mov edx [edi+64h] +
mov [edx+ebx] cl +
mov [esp+58h+var_44] eax +
mov edx [edi+64h] +
movzx edx byte ptr [edx+ebx] +
add ebx 1 +
mov [esp+58h+var_4C] offset aReAssignedEndp +
mov [esp+58h+var_50] offset aWindows_assign +
mov [esp+58h+var_54] 4 +
mov [esp+58h+var_48] edx +
mov [esp+58h+var_58] 0 +
call sub_43E390  +
movzx edx byte ptr [esi+4] +
cmp edx ebx +
jg loc_443D20  +
mov edi [ebp+var_2C] +
mov eax [ebp+var_1C] +
mov [esp+58h+var_58] eax +
call sub_440EE0  +
mov eax [ebp+var_30] +
mov eax [eax+48h] +
sub esp 4 +
mov eax [eax+20h] +
mov [esp+58h+var_50] edi +
mov edi [ebp+var_34] +
mov [esp+58h+var_58] 0FFFFFFFFh +
mov [esp+58h+var_54] edi +
call eax  +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+58h+var_48] edi +
mov [esp+58h+var_4C] offset aNoEndpointsFou +
mov [esp+58h+var_50] offset aWindows_assign +
mov [esp+58h+var_54] 4 +
mov [esp+58h+var_58] 0 +
call sub_43E390  +
lea esp [ebp-0Ch] +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+58h+var_48] eax +
mov [esp+58h+var_58] ebx +
mov [esp+58h+var_4C] offset aCouldNotReadCo +
mov [esp+58h+var_50] offset aWindows_assign +
mov [esp+58h+var_54] 2 +
mov [ebp+var_2C] eax +
call sub_43E390  +
mov eax [ebp+var_2C] +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax 0FFFFFFF5h +
jmp loc_443DA2  +
***
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov esi [ebp+arg_0] +
mov ebx [ebp+arg_4] +
mov edi [ebp+arg_8] +
mov eax [esi+10h] +
lea edx [ebx+ebx*2] +
lea edx [eax+edx*8] +
mov ecx [edx+64h] +
mov [ebp+var_1C] edx +
test ecx ecx +
jz loc_443E5D  +
mov [esp+38h+var_38] ecx +
mov [ebp+var_20] eax +
call free  +
mov edx [ebp+var_1C] +
mov eax [ebp+var_20] +
mov dword ptr [edx+64h] 0 +
lea edx [ebx+ebx*2] +
mov byte ptr [eax+edx*8+60h] 0 +
mov eax [eax+48h] +
mov eax [eax+28h] +
mov [esp+38h+var_2C] edi +
mov [esp+38h+var_30] ebx +
mov [esp+38h+var_34] esi +
mov [esp+38h+var_38] 0FFFFFFFFh +
call eax  +
test eax eax +
jz loc_443E90  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add esp 2Ch +
mov ecx edi +
mov edx ebx +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp sub_443C70  +
***
push esi  +
push ebx  +
sub esp 20h +
mov ebx [ebp+arg_4] +
mov eax [ebp+arg_0] +
cmp ebx 7 +
mov esi [eax+10h] +
jg loc_443F16  +
movzx edx bx +
mov [esp+28h+var_C] 3E8h +
mov [esp+28h+var_10] 0 +
mov [esp+28h+var_14] 0 +
mov [esp+28h+var_18] 0 +
mov [esp+28h+var_1C] edx +
mov [esp+28h+var_20] 9 +
mov [esp+28h+var_24] 0 +
mov [esp+28h+var_28] eax +
call sub_441BE0  +
sub esp 20h +
test eax eax +
jnz loc_443F0F  +
mov [esi+42h] bl +
lea esp [ebp-8] +
pop ebx  +
pop esi  +
pop ebp  +
retn   +
mov eax 0FFFFFFFEh +
jmp loc_443F0F  +
***
push ebx  +
sub esp 14h +
mov edx [ebp+arg_0] +
mov ecx [ebp+arg_4] +
mov eax [ebp+arg_C] +
cmp [edx+15h] cl +
jbe loc_443F76  +
mov edx [edx+36Ch] +
test edx edx +
jz loc_443F80  +
movzx ecx cl +
mov edx [edx+ecx*4] +
test edx edx +
jz loc_443F80  +
movzx ebx word ptr [edx+2] +
mov [esp+18h+var_14] edx +
cmp eax ebx +
cmovbe ebx eax +
mov eax [ebp+arg_8] +
mov [esp+18h+var_10] ebx +
mov [esp+18h+var_18] eax +
call memcpy  +
mov eax [ebp+arg_10] +
mov dword ptr [eax] 0 +
mov eax ebx +
add esp 14h +
pop ebx  +
pop ebp  +
retn   +
mov eax 0FFFFFFFEh +
jmp loc_443F70  +
mov eax 0FFFFFFFBh +
jmp loc_443F70  +
***
sub esp 28h +
mov eax [ebp+arg_0] +
movzx edx byte ptr [eax+42h] +
test dl dl +
jz loc_443FD0  +
mov ecx [ebp+arg_C] +
sub edx 1 +
movzx edx dl +
mov [esp+28h+var_24] edx +
mov [esp+28h+var_28] eax +
mov [esp+28h+var_18] ecx +
mov ecx [ebp+arg_8] +
mov [esp+28h+var_1C] ecx +
mov ecx [ebp+arg_4] +
mov [esp+28h+var_20] ecx +
call sub_443F20  +
leave   +
retn   +
mov eax 0FFFFFFFBh +
leave   +
retn   +
***
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_4] +
lea edx [ecx+358h] +
mov ecx [ecx+358h] +
mov [eax] ecx +
mov ecx [edx+4] +
mov [eax+4] ecx +
mov ecx [edx+8] +
mov [eax+8] ecx +
mov ecx [edx+0Ch] +
mov [eax+0Ch] ecx +
movzx edx word ptr [edx+10h] +
mov [eax+10h] dx +
mov eax [ebp+arg_8] +
mov dword ptr [eax] 0 +
xor eax eax +
pop ebp  +
retn   +
***
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [ebp+arg_4] +
mov eax [ebx+30h] +
mov eax [eax+10h] +
mov eax [eax+8] +
mov [ebp+var_1C] eax +
mov eax [ebx] +
lea eax [eax+eax*2] +
lea esi [ebx+eax*4+58h] +
mov edx [esi+1Ch] +
test edx edx +
jz loc_444110  +
mov eax [esi+20h] +
test eax eax +
jz loc_4440D0  +
mov ecx [ebp+arg_8] +
test ecx ecx +
jnz loc_444082  +
mov dword ptr [esi+20h] 0 +
xor edi edi +
mov [esp+38h+var_38] edx +
call free  +
mov eax [ebp+arg_8] +
mov dword ptr [esi+1Ch] 0 +
add [ebx+1Ch] eax +
add esp 2Ch +
pop ebx  +
mov eax edi +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ecx [esi+24h] +
xor edi edi +
cmp [ebp+arg_8] ecx +
ja loc_4440D4  +
cmp byte ptr [edx] 0 +
jnz loc_444098  +
sub [ebp+arg_8] 1 +
add edx 1 +
mov ecx [ebp+arg_8] +
mov [esp+38h+var_34] edx +
mov [esp+38h+var_38] eax +
mov [esp+38h+var_30] ecx +
call memcpy  +
mov edx [esi+1Ch] +
mov dword ptr [esi+20h] 0 +
test edx edx +
jnz loc_444063  +
mov eax [ebp+arg_8] +
add [ebx+1Ch] eax +
add esp 2Ch +
pop ebx  +
mov eax edi +
pop esi  +
pop edi  +
pop ebp  +
retn   +
xor edi edi +
jmp loc_444063  +
mov eax [ebp+var_1C] +
mov di 6 +
mov [esp+38h+var_2C] offset aOverflow +
mov [esp+38h+var_30] offset aHid_copy_trans +
mov [esp+38h+var_34] 1 +
mov [esp+38h+var_38] eax +
call sub_43E390  +
mov eax [esi+24h] +
mov edx [esi+1Ch] +
mov [ebp+arg_8] eax +
mov eax [esi+20h] +
jmp loc_44408C  +
mov eax [ebp+arg_8] +
xor edi edi +
add [ebx+1Ch] eax +
add esp 2Ch +
pop ebx  +
mov eax edi +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push edi  +
push esi  +
push ebx  +
mov ebx eax +
sub esp 3Ch +
test eax eax +
mov [ebp+var_1E+1] 5C2E5C5Ch +
mov [ebp+var_19] 0 +
jz loc_44425F  +
mov [esp+48h+var_48] eax +
call strlen  +
lea ecx [eax+1] +
cmp ecx 3 +
jbe loc_444173  +
movzx edx byte ptr [ebx] +
cmp dl 5Ch +
jz loc_444240  +
cmp dl 23h +
jz loc_444223  +
lea esi [eax+5] +
mov edi 4 +
mov [esp+48h+var_44] 1 +
mov [esp+48h+var_48] esi +
mov [ebp+var_2C] ecx +
call calloc  +
test eax eax +
mov [ebp+var_30] eax +
jz loc_44425F  +
mov ecx [ebp+var_2C] +
mov edx esi +
sub edx edi +
add edi eax +
mov [esp+48h+var_44] ebx +
mov [esp+48h+var_48] edi +
cmp edx ecx +
cmovbe ecx edx +
mov [esp+48h+var_40] ecx +
mov [ebp+var_2C] edx +
call memcpy  +
mov [esp+48h+var_48] ebx +
call strlen  +
mov edx [ebp+var_2C] +
add eax 1 +
cmp eax edx +
cmovbe edx eax +
xor eax eax +
mov byte ptr [edi+edx-1] 0 +
movzx edx byte ptr [ebp+eax+var_1E+1] +
mov ecx [ebp+var_30] +
mov [ecx+eax] dl +
add eax 1 +
cmp eax 4 +
jnz loc_4441D4  +
cmp esi 4 +
jbe loc_444218  +
add esi ecx +
mov ebx 23h +
mov [ebp+var_2C] esi +
mov esi ds:toupper +
lea edi [ecx+4] +
nop   +
movsx eax byte ptr [edi] +
mov [esp+48h+var_48] eax +
call esi  +
cmp al 5Ch +
cmovz eax ebx +
add edi 1 +
mov [edi-1] al +
cmp edi [ebp+var_2C] +
jnz loc_444200  +
mov eax [ebp+var_30] +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp byte ptr [ebx+1] 23h +
jnz loc_444173  +
cmp byte ptr [ebx+3] 23h +
jnz loc_444173  +
jmp loc_444256  +
cmp byte ptr [ebx+1] 5Ch +
jnz loc_444173  +
cmp byte ptr [ebx+3] 5Ch +
nop   +
jnz loc_444173  +
mov esi ecx +
xor edi edi +
jmp loc_44417B  +
xor eax eax +
jmp loc_44421B  +
***
push edi  +
mov edi eax +
push esi  +
push ebx  +
sub esp 3Ch +
test eax eax +
jz loc_4444E0  +
movsx edx byte ptr [eax] +
lea ecx [eax+1] +
mov eax 1505h +
test dl dl +
jz loc_4442B0  +
mov ebx eax +
add ecx 1 +
shl ebx 5 +
add edx ebx +
add eax edx +
movsx edx byte ptr [ecx-1] +
test dl dl +
jnz loc_444292  +
test eax eax +
mov edx 1 +
cmovz eax edx +
mov ebx ds:dword_487180 +
xor edx edx +
div  ebx +
test edx edx +
mov ecx edx +
jz loc_444420  +
lea edx ds:0[edx*8] +
add edx ds:dword_4854A4 +
mov eax [edx] +
test eax eax +
jz loc_44443A  +
cmp ecx eax +
jz loc_4444B0  +
mov ebx [edx+4] +
mov [esp+48h+var_34] ebx +
mov [esp+48h+var_38] edi +
mov [esp+48h+var_3C] offset aHashCollisionS +
mov [esp+48h+var_40] offset aHtab_hash +
mov [esp+48h+var_44] 4 +
mov [esp+48h+var_48] 0 +
mov [ebp+var_1C] ecx +
call sub_43E390  +
mov eax ds:dword_487180 +
xor edx edx +
mov ecx [ebp+var_1C] +
lea ebx [eax-2] +
mov [ebp+var_28] eax +
mov eax ecx +
div  ebx +
mov eax [ebp+var_28] +
mov ebx ds:dword_4854A4 +
mov [ebp+var_20] ebx +
mov ebx ecx +
lea esi [edx+1] +
sub eax esi +
mov [ebp+var_1C] eax +
nop   +
mov eax [ebp+var_1C] +
mov edx ebx +
sub edx esi +
add eax ebx +
cmp ebx esi +
cmova eax edx +
cmp eax ecx +
mov ebx eax +
jz loc_444368  +
mov eax [ebp+var_20] +
lea edx [eax+ebx*8] +
mov eax [edx] +
cmp eax ecx +
jz loc_444480  +
test eax eax +
jnz loc_444340  +
mov eax [ebp+var_28] +
cmp ds:dword_487170 eax +
jnb loc_44444A  +
mov [esp+48h+var_48] offset unk_4854A0 +
mov [ebp+var_1C] ecx +
call sub_44CBC0  +
lea eax ds:0[ebx*8] +
mov ecx [ebp+var_1C] +
mov esi eax +
add esi ds:dword_4854A4 +
mov [ebp+var_20] eax +
mov edx [esi+4] +
test edx edx +
jz loc_4443BF  +
mov [esp+48h+var_48] edx +
call free  +
mov eax [ebp+var_20] +
add eax ds:dword_4854A4 +
mov ecx [ebp+var_1C] +
mov esi eax +
mov dword ptr [eax+4] 0 +
mov [esi] ecx +
mov [esp+48h+var_48] edi +
call strlen  +
add eax 1 +
mov [esp+48h+var_48] eax +
call malloc  +
test eax eax +
mov [esi+4] eax +
jz loc_4444EA  +
mov [esp+48h+var_48] edi +
mov [ebp+var_1C] eax +
call strlen  +
mov edx [ebp+var_1C] +
mov [esp+48h+var_44] edi +
mov [esp+48h+var_48] edx +
add eax 1 +
mov [esp+48h+var_40] eax +
call memcpy  +
mov [esp+48h+var_48] offset unk_4854A0 +
add ds:dword_487170 1 +
call sub_44CC10  +
mov eax ebx +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edx 8 +
mov ecx 1 +
add edx ds:dword_4854A4 +
mov eax [edx] +
test eax eax +
jnz loc_4442DB  +
mov eax ebx +
mov ebx ecx +
cmp ds:dword_487170 eax +
jb loc_444377  +
mov [esp+48h+var_38] eax +
mov [esp+48h+var_3C] offset aHashTableIsFul +
mov [esp+48h+var_40] offset aHtab_hash +
mov [esp+48h+var_44] 1 +
mov [esp+48h+var_48] 0 +
call sub_43E390  +
add esp 3Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [edx+4] +
mov [ebp+var_24] ecx +
mov ecx offset aNull +
mov [esp+48h+var_48] edi +
test eax eax +
cmovz eax ecx +
mov [esp+48h+var_44] eax +
call strcmp  +
mov ecx [ebp+var_24] +
test eax eax +
jnz loc_444340  +
mov eax ebx +
jmp loc_444415  +
mov ebx [edx+4] +
mov eax offset aNull +
mov [esp+48h+var_48] edi +
mov [ebp+var_1C] ecx +
test ebx ebx +
cmovnz eax ebx +
mov [esp+48h+var_44] eax +
call strcmp  +
mov ecx [ebp+var_1C] +
mov edx eax +
mov eax ecx +
test edx edx +
jnz loc_4442E6  +
jmp loc_444415  +
add esp 3Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+48h+var_3C] offset aCouldNotDuplic +
mov [esp+48h+var_40] offset aHtab_hash +
mov [esp+48h+var_44] 1 +
mov [esp+48h+var_48] 0 +
call sub_43E390  +
mov [esp+48h+var_48] offset unk_4854A0 +
call sub_44CC10  +
xor eax eax +
jmp loc_444415  +
***
jmp sub_444530  +
***
push edi  +
push esi  +
push ebx  +
sub esp 0BCh +
mov eax [ebp+arg_4] +
mov edx ds:dword_4854A8 +
mov [ebp+var_80] 0 +
mov [ebp+var_64] offset aInput +
mov eax [eax+10h] +
test edx edx +
mov [ebp+var_60] offset aOutput +
mov [ebp+var_5C] offset aFeature +
mov esi [eax+8] +
mov [ebp+var_8C] eax +
mov [ebp+var_90] esi +
jz loc_4449D5  +
mov eax [eax+354h] +
test eax eax +
jz loc_444B69  +
mov eax [ebp+var_8C] +
mov esi 0FFFFFFFFh +
xor edi edi +
lea ebx [eax+54h] +
mov eax esi +
mov esi [ebp+arg_4] +
jmp loc_4445AB  +
add edi 1 +
add ebx 18h +
cmp edi 20h +
jz loc_444610  +
mov edx [ebx] +
test edx edx +
jz loc_4445A0  +
mov ecx [ebx+4] +
cmp byte ptr [ecx] 4 +
jnz loc_4445A0  +
mov [esp+0C8h+var_B0] 0 +
mov [esp+0C8h+var_B4] 40000080h +
mov [esp+0C8h+var_B8] 3 +
mov [esp+0C8h+var_BC] 0 +
mov [esp+0C8h+var_C0] 3 +
mov [esp+0C8h+var_C4] 0C0000000h +
mov [esp+0C8h+var_C8] edx +
call ds:CreateFileA  +
sub esp 1Ch +
cmp eax 0FFFFFFFFh +
jz loc_444726  +
mov [esi+edi*8+20h] eax +
add edi 1 +
add ebx 18h +
cmp edi 20h +
jnz loc_4445AB  +
lea esi [esi+0] +
mov esi eax +
lea eax [ebp+var_7A] +
mov [ebp+var_7A] 0Ah +
mov [esp+0C8h+var_C4] eax +
mov [esp+0C8h+var_C8] esi +
call ds:dword_485744  +
sub esp 8 +
test eax eax +
jz loc_44471C  +
mov eax [ebp+var_8C] +
movzx edx [ebp+var_76] +
mov eax [eax+354h] +
mov [eax] dx +
movzx edx [ebp+var_74] +
mov [eax+2] dx +
jmp loc_444653  +
add edi edi +
mov [esp+0D0h+var_CC] edi +
mov [esp+0D0h+var_D0] esi +
call ds:dword_485724  +
sub esp 8 +
test eax eax +
jnz loc_444651  +
sar edi 1 +
mov [esp+0D8h+var_C8] edi +
mov [esp+0D8h+var_CC] offset aSetMaximumInpu +
mov [esp+0D8h+var_D0] offset aHid_open +
mov [esp+0D8h+var_D4] 4 +
mov [esp+0D8h+var_D8] 0 +
call sub_43E390  +
lea eax [ebp+var_80] +
mov [esp+0D8h+var_D4] eax +
mov [esp+0D8h+var_D8] esi +
call ds:dword_48573C  +
sub esp 8 +
test eax eax +
jz loc_4446D7  +
mov eax [ebp+var_80] +
test eax eax +
jz loc_4446D7  +
lea edx [ebp+var_58] +
mov [esp+0E0h+var_DC] edx +
mov [esp+0E0h+var_E0] eax +
call ds:dword_485728  +
sub esp 8 +
cmp eax 110000h +
jz loc_44479F  +
mov [esp+0E8h+var_DC] offset aCouldNotParseH +
jmp loc_4446DF  +
mov [esp+0E0h+var_D4] offset aCouldNotReadHi +
mov eax [ebp+var_90] +
mov [esp+0E0h+var_D8] offset aHid_open +
mov [esp+0E0h+var_DC] 1 +
mov [esp+0E0h+var_E0] eax +
call sub_43E390  +
mov eax [ebp+var_80] +
xor ebx ebx +
test eax eax +
jz loc_444712  +
mov [esp+0E0h+var_E0] eax +
call ds:dword_485738  +
sub esp 4 +
lea esp [ebp-0Ch] +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+0D0h+var_C4] offset aCouldNotGainAc +
jmp loc_4446DF  +
mov eax [ebp+var_90] +
mov [esp+0C8h+var_BC] offset aCouldNotOpenHi +
mov [esp+0C8h+var_C0] offset aHid_open +
mov [esp+0C8h+var_C4] 2 +
mov [esp+0C8h+var_C8] eax +
call sub_43E390  +
mov eax [ebx] +
mov [esp+0C8h+var_B0] 0 +
mov [esp+0C8h+var_B4] 40000080h +
mov [esp+0C8h+var_B8] 3 +
mov [esp+0C8h+var_BC] 0 +
mov [esp+0C8h+var_C0] 3 +
mov [esp+0C8h+var_C4] 0 +
mov [esp+0C8h+var_C8] eax +
call ds:CreateFileA  +
sub esp 1Ch +
cmp eax 0FFFFFFFFh +
jz loc_444B02  +
mov dword ptr [ebx+14h] 1 +
jmp loc_4445FE  +
movzx edx [ebp+var_22] +
mov ecx offset aInput +
xor edi edi +
movzx eax [ebp+var_28] +
lea ebx [ebp+var_70] +
mov [ebp+var_94] esi +
mov esi ecx +
mov [ebp+var_6C] edx +
movzx edx [ebp+var_1C] +
mov [ebp+var_70] eax +
mov [ebp+var_68] edx +
mov [esp+0E8h+var_D8] eax +
mov [esp+0E8h+var_D4] esi +
mov [esp+0E8h+var_DC] offset aDHidSReportVal +
mov [esp+0E8h+var_E0] offset aHid_open +
mov [esp+0E8h+var_E4] 4 +
mov [esp+0E8h+var_E8] 0 +
call sub_43E390  +
mov eax [ebp+var_8C] +
mov eax [eax+354h] +
mov dword ptr [eax+edi*4+8] 0 +
mov eax [ebx] +
test eax eax +
jnz loc_4448D6  +
add edi 1 +
add ebx 4 +
cmp edi 3 +
jz loc_444823  +
mov esi [ebp+edi*4+var_64] +
mov eax [ebx] +
jmp loc_4447C6  +
mov ecx [ebp+var_8C] +
movzx edx [ebp+var_54] +
mov esi [ebp+var_94] +
mov eax [ecx+354h] +
mov [eax+14h] dx +
movzx edx [ebp+var_52] +
mov [eax+16h] dx +
movzx edx [ebp+var_50] +
mov [eax+18h] dx +
movzx edx byte ptr [ecx+366h] +
mov [eax+31Ah] dl +
mov eax [ecx+354h] +
cmp byte ptr [eax+31Ah] 0 +
jnz loc_444959  +
xor ebx ebx +
mov [eax+1Ah] bx +
mov ecx [ebp+var_8C] +
movzx edx byte ptr [ecx+367h] +
mov [eax+31Bh] dl +
mov eax [ecx+354h] +
cmp byte ptr [eax+31Bh] 0 +
jnz loc_4449A7  +
xor ecx ecx +
mov [eax+11Ah] cx +
mov ecx [ebp+var_8C] +
movzx edx byte ptr [ecx+368h] +
mov [eax+31Ch] dl +
mov eax [ecx+354h] +
cmp byte ptr [eax+31Ch] 0 +
jnz loc_444985  +
xor edx edx +
mov [eax+21Ah] dx +
jmp loc_4446FD  +
mov [esp+0E8h+var_E4] 48h +
mov [esp+0E8h+var_E8] eax +
call calloc  +
test eax eax +
mov ecx eax +
mov [ebp+var_98] eax +
jz loc_444A68  +
mov eax [ebp+var_80] +
mov [esp+0E8h+var_E0] ebx +
mov [esp+0E8h+var_E4] ecx +
mov [esp+0E8h+var_E8] edi +
mov [esp+0E8h+var_DC] eax +
call ds:dword_485708  +
sub esp 10h +
cmp eax 110000h +
jz loc_4449DF  +
mov eax [ebp+var_90] +
mov [esp+0F8h+var_E8] esi +
mov [esp+0F8h+var_EC] offset aCouldNotProces +
mov [esp+0F8h+var_F0] offset aHid_open +
mov [esp+0F8h+var_F4] 2 +
mov [esp+0F8h+var_F8] eax +
call sub_43E390  +
mov eax [ebp+var_98] +
mov [esp+0F8h+var_F8] eax +
call free  +
jmp loc_444810  +
add eax 1Ah +
mov [esp+0E8h+var_E0] 100h +
mov [esp+0E8h+var_E4] eax +
mov [esp+0E8h+var_E8] esi +
call ds:dword_485734  +
mov eax [ebp+var_8C] +
mov eax [eax+354h] +
sub esp 0Ch +
jmp loc_444873  +
add eax 21Ah +
mov [esp+0E8h+var_E0] 100h +
mov [esp+0E8h+var_E4] eax +
mov [esp+0E8h+var_E8] esi +
call ds:dword_48572C  +
sub esp 0Ch +
jmp loc_4446FD  +
add eax 11Ah +
mov [esp+0E8h+var_E0] 100h +
mov [esp+0E8h+var_E4] eax +
mov [esp+0E8h+var_E8] esi +
call ds:dword_485730  +
mov eax [ebp+var_8C] +
mov eax [eax+354h] +
sub esp 0Ch +
jmp loc_4448A2  +
mov ebx 0FFFFFFFDh +
jmp loc_444712  +
cmp dword ptr [ebx] 0 +
jz loc_44491C  +
jle loc_444946  +
mov eax [ebp+var_98] +
xor edx edx +
mov [ebp+var_A4] esi +
mov [ebp+var_A8] edi +
mov edi edx +
mov [ebp+var_9C] 0 +
mov [ebp+var_A0] 0 +
mov esi eax +
jmp loc_444A2D  +
add [ebp+var_A0] 1 +
add edi 1 +
add esi 48h +
cmp [ebx] edi +
jle loc_444A9B  +
movzx ecx byte ptr [esi+2] +
mov [esp+0F8h+var_EC] offset aReportId0x02x +
mov [esp+0F8h+var_F0] offset aHid_open +
mov [esp+0F8h+var_F4] 4 +
mov [esp+0F8h+var_E8] ecx +
mov [esp+0F8h+var_F8] 0 +
call sub_43E390  +
cmp byte ptr [esi+2] 0 +
jnz loc_444A1C  +
add [ebp+var_9C] 1 +
jmp loc_444A23  +
mov eax [ebp+edi*4+var_64] +
mov [esp+0E8h+var_DC] offset aCouldNotProces +
mov [esp+0E8h+var_E0] offset aHid_open +
mov [esp+0E8h+var_E4] 2 +
mov [esp+0E8h+var_D8] eax +
mov eax [ebp+var_90] +
mov [esp+0E8h+var_E8] eax +
call sub_43E390  +
jmp loc_444810  +
mov eax [ebp+var_A0] +
mov esi [ebp+var_A4] +
mov edi [ebp+var_A8] +
test eax eax +
jz loc_444946  +
mov eax [ebp+var_9C] +
test eax eax +
jz loc_444AE9  +
mov eax [ebp+var_90] +
mov [esp+0F8h+var_E8] esi +
mov [esp+0F8h+var_EC] offset aProgramAsser_1 +
mov [esp+0F8h+var_F0] offset aHid_open +
mov [esp+0F8h+var_F4] 2 +
mov [esp+0F8h+var_F8] eax +
call sub_43E390  +
mov eax [ebp+var_8C] +
mov eax [eax+354h] +
mov dword ptr [eax+edi*4+8] 1 +
jmp loc_444946  +
xor eax eax +
mov ebx 0FFFFFFFCh +
call sub_442BB0  +
mov esi [ebp+var_8C] +
mov edx [esi+4Ch] +
mov [esp+0C8h+var_B4] edi +
mov [esp+0C8h+var_B0] eax +
mov eax [ebp+var_90] +
mov [esp+0C8h+var_BC] offset aCouldNotOpenDe +
mov [esp+0C8h+var_B8] edx +
mov [esp+0C8h+var_C0] offset aHid_open +
mov [esp+0C8h+var_C8] eax +
mov [esp+0C8h+var_C4] 1 +
call sub_43E390  +
call ds:GetLastError  +
cmp eax 2 +
jz loc_444712  +
xor ebx ebx +
cmp eax 5 +
setnz bl  +
lea ebx [ebx+ebx-3] +
jmp loc_444712  +
mov [esp+0C8h+var_BC] offset aProgramAsser_2 +
mov ebx 0FFFFFFFBh +
mov [esp+0C8h+var_C0] offset aHid_open +
mov [esp+0C8h+var_C4] 1 +
mov [esp+0C8h+var_C8] esi +
call sub_43E390  +
jmp loc_444712  +
***
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_0] +
mov edi [edx+10h] +
cmp eax 0FFFFFFFFh +
mov edx [edi+8] +
mov [ebp+var_1C] edx +
jz loc_444C60  +
imul eax eax +
mov eax ds:dword_485600[eax] +
test eax eax +
jz loc_444CCA  +
xor esi esi +
lea ebx [edi+54h] +
mov [ebp+var_20] edi +
mov edi esi +
mov esi [ebp+arg_4] +
jmp loc_444BEC  +
add edi 1 +
add ebx 18h +
cmp edi 20h +
jz loc_444C50  +
mov eax [ebx] +
test eax eax +
jz loc_444BE1  +
mov ecx [ebx+4] +
cmp byte ptr [ecx] 3 +
jnz loc_444BE1  +
mov [esp+48h+var_30] 0 +
mov [esp+48h+var_34] 40000080h +
mov [esp+48h+var_38] 3 +
mov [esp+48h+var_3C] 0 +
mov [esp+48h+var_40] 3 +
mov [esp+48h+var_44] 0C0000000h +
mov [esp+48h+var_48] eax +
call ds:CreateFileA  +
sub esp 1Ch +
cmp eax 0FFFFFFFFh +
jz loc_444C68  +
mov [esi+edi*8+1Ch] eax +
add edi 1 +
add ebx 18h +
cmp edi 20h +
jnz loc_444BEC  +
lea esi [esi+0] +
xor eax eax +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [edi+50h] +
jmp loc_444BC1  +
xor eax eax +
mov esi edi +
mov edi [ebp+var_20] +
call sub_442BB0  +
lea ecx [esi+esi*2] +
mov ecx [edi+ecx*8+54h] +
mov [esp+48h+var_34] esi +
mov [esp+48h+var_3C] offset aCouldNotOpenDe +
mov [esp+48h+var_30] eax +
mov eax [ebp+var_1C] +
mov [esp+48h+var_38] ecx +
mov [esp+48h+var_40] offset aWinusbx_open +
mov [esp+48h+var_44] 1 +
mov [esp+48h+var_48] eax +
call sub_43E390  +
call ds:GetLastError  +
mov edx eax +
mov eax 0FFFFFFFCh +
cmp edx 2 +
jz loc_444C52  +
xor eax eax +
cmp edx 5 +
setnz al  +
lea eax [eax+eax-3] +
jmp loc_444C52  +
mov eax 0FFFFFFFDh +
jmp loc_444C52  +
***
jmp sub_444CE0  +
***
mov ebp esp +
push esi  +
push ebx  +
sub esp 20h +
mov ebx [ebp+arg_4] +
mov [ebp+var_18] 0 +
mov [ebp+var_14] 0 +
mov [ebp+var_10] 0 +
mov edx [ebx+10h] +
mov [ebp+var_C] 0 +
lea ecx [edx+40h] +
jmp loc_444D27  +
cmp dl 4 +
jnz loc_444D1D  +
mov [ebp+var_C] 1 +
add eax 18h +
cmp eax 300h +
jz loc_444D4E  +
mov edx [ecx+eax+18h] +
movzx edx byte ptr [edx] +
cmp dl 3 +
jnz loc_444D11  +
mov edx [ecx+eax+1Ch] +
cmp edx 0FFFFFFFFh +
jz loc_444D1D  +
add eax 18h +
cmp eax 300h +
mov [ebp+edx*4+var_18] 1 +
jnz loc_444D27  +
xor esi esi +
mov eax 0FFFFFFFBh +
mov ecx [ebp+esi*4+var_18] +
test ecx ecx +
jnz loc_444D73  +
add esi 1 +
cmp esi 3 +
jnz loc_444D55  +
mov edx [ebp+var_C] +
test edx edx +
jnz loc_444D85  +
add esp 20h +
pop ebx  +
pop esi  +
pop ebp  +
retn   +
mov [esp+28h+var_24] ebx +
mov [esp+28h+var_28] esi +
call sub_444BA0  +
test eax eax +
jz loc_444D5D  +
jmp loc_444D6C  +
mov [ebp+arg_4] ebx +
mov [ebp+arg_0] 0FFFFFFFFh +
add esp 20h +
pop ebx  +
pop esi  +
pop ebp  +
jmp sub_444530  +
***
mov edx ds:dword_4854A4 +
test edx edx +
jz locret_444E25  +
push ebp  +
mov ebp esp +
push esi  +
push ebx  +
xor ebx ebx +
sub esp 10h +
mov esi ds:dword_487180 +
test esi esi +
jz loc_444DF8  +
nop   +
lea esi ds:0[ebx*8] +
lea eax [edx+esi] +
mov ecx [eax] +
test ecx ecx +
jz loc_444DED  +
mov eax [eax+4] +
test eax eax +
jz loc_444DED  +
mov [esp+1Ch+var_1C] eax +
call free  +
mov edx ds:dword_4854A4 +
mov dword ptr [edx+esi+4] 0 +
add ebx 1 +
cmp ds:dword_487180 ebx +
ja loc_444DC0  +
mov [esp+1Ch+var_1C] offset unk_4854A0 +
call sub_44CB10  +
mov eax ds:dword_4854A4 +
test eax eax +
jz loc_444E1F  +
mov [esp+1Ch+var_1C] eax +
call free  +
mov ds:dword_4854A4 0 +
add esp 10h +
pop ebx  +
pop esi  +
pop ebp  +
retn   +
***
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
call ds:GetCurrentProcessId  +
lea ebx [ebp+var_2C] +
mov [esp+48h+var_48] ebx +
mov [esp+48h+var_44] offset aLibusb_init08x +
mov [esp+48h+var_40] eax +
call sprintf  +
mov [esp+48h+var_3C] ebx +
mov [esp+48h+var_40] 1 +
mov [esp+48h+var_44] 1 +
mov [esp+48h+var_48] 0 +
call ds:CreateSemaphoreA  +
sub esp 10h +
test eax eax +
mov ebx eax +
jz loc_444ED5  +
mov edi ds:WaitForSingleObject +
mov [esp+48h+var_44] 0FFFFFFFFh +
mov [esp+48h+var_48] eax +
call edi  +
sub esp 8 +
test eax eax +
jnz loc_444EE0  +
mov eax dword_461620 +
mov esi ds:CloseHandle +
sub eax 1 +
test eax eax +
mov dword_461620 eax +
js loc_444EF4  +
mov [esp+48h+var_40] 0 +
mov [esp+48h+var_44] 1 +
mov [esp+48h+var_48] ebx +
call ds:ReleaseSemaphore  +
sub esp 0Ch +
mov [esp+48h+var_48] ebx +
call esi  +
sub esp 4 +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+48h+var_48] ebx +
call ds:CloseHandle  +
sub esp 4 +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi offset off_480AD4 +
mov eax [esi] +
add esi 50h +
mov [esp+48h+var_48] 0FFFFFFFFh +
call eax  +
cmp esi (offset aDhid+4) +
jnz loc_444EF9  +
call sub_44DA70  +
mov eax ds:dword_4854B0 +
mov esi ds:CloseHandle +
test eax eax +
jz loc_444F90  +
mov eax ds:dword_4854AC +
mov [esp+48h+var_3C] 0 +
mov [esp+48h+var_40] 0 +
mov [esp+48h+var_44] 402h +
mov [esp+48h+var_48] eax +
call ds:dword_485758  +
sub esp 10h +
test eax eax +
jz loc_444FA6  +
mov eax ds:dword_4854B0 +
mov [esp+58h+var_54] 0FFFFFFFFh +
mov [esp+58h+var_58] eax +
call edi  +
sub esp 8 +
test eax eax +
jnz loc_444FA6  +
mov eax ds:dword_4854B0 +
mov esi ds:CloseHandle +
mov [esp+60h+var_60] eax +
call esi  +
mov ds:dword_4854B0 0 +
mov ds:dword_4854AC 0 +
sub esp 4 +
call sub_444DA0  +
mov [esp+60h+var_60] offset unk_487160 +
call sub_44CB10  +
jmp loc_444EB1  +
mov [esp+58h+var_4C] offset aCouldNotWaitFo +
mov [esp+58h+var_50] offset aWindows_exit +
mov [esp+58h+var_54] 4 +
mov [esp+58h+var_58] 0 +
call sub_43E390  +
mov eax ds:dword_4854B0 +
mov [esp+58h+var_54] 1 +
mov [esp+58h+var_58] eax +
call ds:TerminateThread  +
sub esp 8 +
jmp loc_444F69  +
***
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov esi ds:GetModuleHandleA +
mov [esp+28h+var_28] offset aHid_dll +
call esi  +
sub esp 4 +
test eax eax +
mov edi eax +
jz loc_4456A0  +
mov ebx ds:GetProcAddress +
mov [esp+28h+var_24] offset aHidd_getattrib +
mov [esp+28h+var_28] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485744 eax +
jz loc_445350  +
mov [esp+28h+var_28] offset aHid_dll +
call esi  +
sub esp 4 +
test eax eax +
mov edi eax +
jz loc_4456C0  +
mov [esp+28h+var_24] offset aHidd_gethidgui +
mov [esp+28h+var_28] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485740 eax +
jz loc_4453A0  +
mov [esp+28h+var_28] offset aHid_dll +
call esi  +
sub esp 4 +
test eax eax +
mov edi eax +
jz loc_4456E0  +
mov [esp+28h+var_24] offset aHidd_getprepar +
mov [esp+28h+var_28] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_48573C eax +
jz loc_4453E0  +
mov [esp+28h+var_28] offset aHid_dll +
call esi  +
sub esp 4 +
test eax eax +
mov edi eax +
jz loc_445700  +
mov [esp+28h+var_24] offset aHidd_freeprepa +
mov [esp+28h+var_28] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485738 eax +
jz loc_445420  +
mov [esp+28h+var_28] offset aHid_dll +
call esi  +
sub esp 4 +
test eax eax +
mov edi eax +
jz loc_445720  +
mov [esp+28h+var_24] offset aHidd_getmanufa +
mov [esp+28h+var_28] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485734 eax +
jz loc_445460  +
mov [esp+28h+var_28] offset aHid_dll +
call esi  +
sub esp 4 +
test eax eax +
mov edi eax +
jz loc_445740  +
mov [esp+28h+var_24] offset aHidd_getproduc +
mov [esp+28h+var_28] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485730 eax +
jz loc_4454A0  +
mov [esp+28h+var_28] offset aHid_dll +
call esi  +
sub esp 4 +
test eax eax +
mov edi eax +
jz loc_445760  +
mov [esp+28h+var_24] offset aHidd_getserial +
mov [esp+28h+var_28] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_48572C eax +
jz loc_4454E0  +
mov [esp+28h+var_28] offset aHid_dll +
call esi  +
sub esp 4 +
test eax eax +
mov edi eax +
jz loc_445780  +
mov [esp+28h+var_24] offset aHidp_getcaps +
mov [esp+28h+var_28] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485728 eax +
jz loc_445520  +
mov [esp+28h+var_28] offset aHid_dll +
call esi  +
sub esp 4 +
test eax eax +
mov edi eax +
jz loc_4457A0  +
mov [esp+28h+var_24] offset aHidd_setnuminp +
mov [esp+28h+var_28] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485724 eax +
jz loc_445560  +
mov [esp+28h+var_28] offset aHid_dll +
call esi  +
sub esp 4 +
test eax eax +
mov edi eax +
jz loc_4457C0  +
mov [esp+28h+var_24] offset aHidd_setfeatur +
mov [esp+28h+var_28] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485720 eax +
jz loc_4455A0  +
mov [esp+28h+var_28] offset aHid_dll +
call esi  +
sub esp 4 +
test eax eax +
mov edi eax +
jz loc_4457E0  +
mov [esp+28h+var_24] offset aHidd_getfeatur +
mov [esp+28h+var_28] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_48571C eax +
jz loc_4455E0  +
mov [esp+28h+var_28] offset aHid_dll +
call esi  +
sub esp 4 +
test eax eax +
mov edi eax +
jz loc_445800  +
mov [esp+28h+var_24] offset aHidd_getphysic +
mov [esp+28h+var_28] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485718 eax +
jz loc_445620  +
mov [esp+28h+var_28] offset aHid_dll +
call esi  +
sub esp 4 +
test eax eax +
mov edi eax +
jz loc_445840  +
mov [esp+28h+var_24] offset aHidd_getinputr +
mov [esp+28h+var_28] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485714 eax +
jz loc_4458E0  +
mov [esp+28h+var_28] offset aHid_dll +
call esi  +
sub esp 4 +
test eax eax +
mov edi eax +
jz loc_445820  +
mov [esp+28h+var_24] offset aHidd_setoutput +
mov [esp+28h+var_28] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485710 eax +
jz loc_445917  +
mov [esp+28h+var_28] offset aHid_dll +
call esi  +
sub esp 4 +
test eax eax +
mov edi eax +
jz loc_445860  +
mov [esp+28h+var_24] offset aHidd_flushqueu +
mov [esp+28h+var_28] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_48570C eax +
jz loc_445660  +
mov [esp+28h+var_28] offset aHid_dll +
call esi  +
sub esp 4 +
test eax eax +
mov esi eax +
jz loc_445880  +
mov [esp+28h+var_24] offset aHidp_getvaluec +
mov [esp+28h+var_28] esi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485708 eax +
jz loc_4458A0  +
mov ds:dword_4854A8 1 +
lea esp [ebp-0Ch] +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+28h+var_24] offset aHidd_getattr_0 +
mov [esp+28h+var_28] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485744 eax +
jnz loc_445038  +
mov [esp+30h+var_2C] offset aHidd_getattr_1 +
mov [esp+30h+var_30] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485744 eax +
jnz loc_445038  +
lea esi [esi+0] +
lea esp [ebp-0Ch] +
mov eax 0FFFFFFFBh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+28h+var_24] offset aHidd_gethidg_0 +
mov [esp+28h+var_28] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485740 eax +
jnz loc_44506B  +
mov [esp+30h+var_2C] offset aHidd_gethidg_1 +
mov [esp+30h+var_30] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485740 eax +
jnz loc_44506B  +
jmp loc_445390  +
mov [esp+28h+var_24] offset aHidd_getprep_0 +
mov [esp+28h+var_28] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_48573C eax +
jnz loc_44509E  +
mov [esp+30h+var_2C] offset aHidd_getprep_1 +
mov [esp+30h+var_30] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_48573C eax +
jnz loc_44509E  +
jmp loc_445390  +
mov [esp+28h+var_24] offset aHidd_freepre_0 +
mov [esp+28h+var_28] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485738 eax +
jnz loc_4450D1  +
mov [esp+30h+var_2C] offset aHidd_freepre_1 +
mov [esp+30h+var_30] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485738 eax +
jnz loc_4450D1  +
jmp loc_445390  +
mov [esp+28h+var_24] offset aHidd_getmanu_0 +
mov [esp+28h+var_28] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485734 eax +
jnz loc_445104  +
mov [esp+30h+var_2C] offset aHidd_getmanu_1 +
mov [esp+30h+var_30] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485734 eax +
jnz loc_445104  +
jmp loc_445390  +
mov [esp+28h+var_24] offset aHidd_getprod_0 +
mov [esp+28h+var_28] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485730 eax +
jnz loc_445137  +
mov [esp+30h+var_2C] offset aHidd_getprod_1 +
mov [esp+30h+var_30] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485730 eax +
jnz loc_445137  +
jmp loc_445390  +
mov [esp+28h+var_24] offset aHidd_getseri_0 +
mov [esp+28h+var_28] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_48572C eax +
jnz loc_44516A  +
mov [esp+30h+var_2C] offset aHidd_getseri_1 +
mov [esp+30h+var_30] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_48572C eax +
jnz loc_44516A  +
jmp loc_445390  +
mov [esp+28h+var_24] offset aHidp_getcapsa +
mov [esp+28h+var_28] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485728 eax +
jnz loc_44519D  +
mov [esp+30h+var_2C] offset aHidp_getcapsw +
mov [esp+30h+var_30] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485728 eax +
jnz loc_44519D  +
jmp loc_445390  +
mov [esp+28h+var_24] offset aHidd_setnumi_0 +
mov [esp+28h+var_28] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485724 eax +
jnz loc_4451D0  +
mov [esp+30h+var_2C] offset aHidd_setnumi_1 +
mov [esp+30h+var_30] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485724 eax +
jnz loc_4451D0  +
jmp loc_445390  +
mov [esp+28h+var_24] offset aHidd_setfeat_0 +
mov [esp+28h+var_28] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485720 eax +
jnz loc_445203  +
mov [esp+30h+var_2C] offset aHidd_setfeat_1 +
mov [esp+30h+var_30] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485720 eax +
jnz loc_445203  +
jmp loc_445390  +
mov [esp+28h+var_24] offset aHidd_getfeat_0 +
mov [esp+28h+var_28] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_48571C eax +
jnz loc_445236  +
mov [esp+30h+var_2C] offset aHidd_getfeat_1 +
mov [esp+30h+var_30] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_48571C eax +
jnz loc_445236  +
jmp loc_445390  +
mov [esp+28h+var_24] offset aHidd_getphys_0 +
mov [esp+28h+var_28] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485718 eax +
jnz loc_445269  +
mov [esp+30h+var_2C] offset aHidd_getphys_1 +
mov [esp+30h+var_30] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485718 eax +
jnz loc_445269  +
jmp loc_445390  +
mov [esp+28h+var_24] offset aHidd_flushqu_0 +
mov [esp+28h+var_28] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_48570C eax +
jnz loc_445302  +
mov [esp+30h+var_2C] offset aHidd_flushqu_1 +
mov [esp+30h+var_30] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_48570C eax +
jnz loc_445302  +
jmp loc_445390  +
mov [esp+28h+var_28] offset aHid_dll +
call ds:LoadLibraryA  +
sub esp 4 +
test eax eax +
mov edi eax +
jnz loc_445015  +
jmp loc_445390  +
mov [esp+28h+var_28] offset aHid_dll +
call ds:LoadLibraryA  +
sub esp 4 +
test eax eax +
mov edi eax +
jnz loc_44504E  +
jmp loc_445390  +
mov [esp+28h+var_28] offset aHid_dll +
call ds:LoadLibraryA  +
sub esp 4 +
test eax eax +
mov edi eax +
jnz loc_445081  +
jmp loc_445390  +
mov [esp+28h+var_28] offset aHid_dll +
call ds:LoadLibraryA  +
sub esp 4 +
test eax eax +
mov edi eax +
jnz loc_4450B4  +
jmp loc_445390  +
mov [esp+28h+var_28] offset aHid_dll +
call ds:LoadLibraryA  +
sub esp 4 +
test eax eax +
mov edi eax +
jnz loc_4450E7  +
jmp loc_445390  +
mov [esp+28h+var_28] offset aHid_dll +
call ds:LoadLibraryA  +
sub esp 4 +
test eax eax +
mov edi eax +
jnz loc_44511A  +
jmp loc_445390  +
mov [esp+28h+var_28] offset aHid_dll +
call ds:LoadLibraryA  +
sub esp 4 +
test eax eax +
mov edi eax +
jnz loc_44514D  +
jmp loc_445390  +
mov [esp+28h+var_28] offset aHid_dll +
call ds:LoadLibraryA  +
sub esp 4 +
test eax eax +
mov edi eax +
jnz loc_445180  +
jmp loc_445390  +
mov [esp+28h+var_28] offset aHid_dll +
call ds:LoadLibraryA  +
sub esp 4 +
test eax eax +
mov edi eax +
jnz loc_4451B3  +
jmp loc_445390  +
mov [esp+28h+var_28] offset aHid_dll +
call ds:LoadLibraryA  +
sub esp 4 +
test eax eax +
mov edi eax +
jnz loc_4451E6  +
jmp loc_445390  +
mov [esp+28h+var_28] offset aHid_dll +
call ds:LoadLibraryA  +
sub esp 4 +
test eax eax +
mov edi eax +
jnz loc_445219  +
jmp loc_445390  +
mov [esp+28h+var_28] offset aHid_dll +
call ds:LoadLibraryA  +
sub esp 4 +
test eax eax +
mov edi eax +
jnz loc_44524C  +
jmp loc_445390  +
mov [esp+28h+var_28] offset aHid_dll +
call ds:LoadLibraryA  +
sub esp 4 +
test eax eax +
mov edi eax +
jz loc_4452CF  +
jmp loc_4452B2  +
mov [esp+28h+var_28] offset aHid_dll +
call ds:LoadLibraryA  +
sub esp 4 +
test eax eax +
mov edi eax +
jz loc_44529C  +
jmp loc_44527F  +
mov [esp+28h+var_28] offset aHid_dll +
call ds:LoadLibraryA  +
sub esp 4 +
test eax eax +
mov edi eax +
jnz loc_4452E5  +
jmp loc_445390  +
mov [esp+28h+var_28] offset aHid_dll +
call ds:LoadLibraryA  +
sub esp 4 +
test eax eax +
mov esi eax +
jnz loc_445318  +
jmp loc_445390  +
mov [esp+28h+var_24] offset aHidp_getvalu_0 +
mov [esp+28h+var_28] esi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485708 eax +
jnz loc_445335  +
mov [esp+30h+var_2C] offset aHidp_getvalu_1 +
mov [esp+30h+var_30] esi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485708 eax +
jnz loc_445335  +
jmp loc_445390  +
mov [esp+28h+var_24] offset aHidd_getinpu_0 +
mov [esp+28h+var_28] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485714 eax +
jnz loc_44529C  +
mov [esp+30h+var_2C] offset aHidd_getinpu_1 +
mov [esp+30h+var_30] edi +
call ebx  +
sub esp 8 +
mov ds:dword_485714 eax +
jmp loc_44529C  +
mov [esp+28h+var_24] offset aHidd_setoutp_0 +
mov [esp+28h+var_28] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485710 eax +
jnz loc_4452CF  +
mov [esp+30h+var_2C] offset aHidd_setoutp_1 +
mov [esp+30h+var_30] edi +
call ebx  +
sub esp 8 +
mov ds:dword_485710 eax +
jmp loc_4452CF  +
***
push edi  +
push esi  +
push ebx  +
sub esp 4Ch +
mov esi ds:GetModuleHandleA +
mov [esp+58h+var_58] offset aLibusbk +
call esi  +
sub esp 4 +
test eax eax +
mov edi eax +
jz loc_445E90  +
mov [esp+58h+var_4C] offset aUsingLibusbkDl +
mov [esp+58h+var_50] offset aWinusbx_init +
mov [esp+58h+var_54] 4 +
mov [esp+58h+var_58] 0 +
call sub_43E390  +
mov ebx ds:GetProcAddress +
mov [esp+58h+var_54] offset aLibk_getversio +
mov [esp+58h+var_58] edi +
call ebx  +
sub esp 8 +
test eax eax +
jz loc_4459FE  +
lea edx [ebp+var_28] +
mov [esp+58h+var_58] edx +
call eax  +
mov eax [ebp+var_1C] +
sub esp 4 +
mov [esp+5Ch+var_40] eax +
mov eax [ebp+var_20] +
mov [esp+5Ch+var_50] offset aLibusbkVersion +
mov [esp+5Ch+var_54] offset aWinusbx_init +
mov [esp+5Ch+var_58] 4 +
mov [esp+5Ch+var_44] eax +
mov eax [ebp+var_24] +
mov [esp+5Ch+var_5C] 0 +
mov [esp+5Ch+var_48] eax +
mov eax [ebp+var_28] +
mov [esp+5Ch+var_4C] eax +
call sub_43E390  +
mov [esp+5Ch+var_58] offset aLibk_getprocad +
mov [esp+5Ch+var_5C] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov [ebp+var_2C] eax +
jz loc_445F2F  +
mov ebx offset dword_485600 +
xor esi esi +
mov edx [ebp+var_2C] +
test edx edx +
jnz loc_445C50  +
mov [esp+5Ch+var_58] offset aWinusb_abortpi +
mov [esp+5Ch+var_5C] edi +
call ds:GetProcAddress  +
sub esp 8 +
mov [ebx+4] eax +
mov [esp+5Ch+var_58] offset aWinusb_control +
mov [esp+5Ch+var_5C] edi +
call ds:GetProcAddress  +
sub esp 8 +
mov [ebx+8] eax +
mov [esp+5Ch+var_58] offset aWinusb_flushpi +
mov [esp+5Ch+var_5C] edi +
call ds:GetProcAddress  +
sub esp 8 +
mov [ebx+0Ch] eax +
mov [esp+5Ch+var_58] offset aWinusb_free +
mov [esp+5Ch+var_5C] edi +
call ds:GetProcAddress  +
sub esp 8 +
mov [ebx+10h] eax +
mov [esp+5Ch+var_58] offset aWinusb_getasso +
mov [esp+5Ch+var_5C] edi +
call ds:GetProcAddress  +
sub esp 8 +
mov [ebx+14h] eax +
mov [esp+5Ch+var_58] offset aWinusb_getcurr +
mov [esp+5Ch+var_5C] edi +
call ds:GetProcAddress  +
sub esp 8 +
mov [ebx+18h] eax +
mov [esp+5Ch+var_58] offset aWinusb_getdesc +
mov [esp+5Ch+var_5C] edi +
call ds:GetProcAddress  +
sub esp 8 +
mov [ebx+1Ch] eax +
mov [esp+5Ch+var_58] offset aWinusb_getover +
mov [esp+5Ch+var_5C] edi +
call ds:GetProcAddress  +
sub esp 8 +
mov [ebx+20h] eax +
mov [esp+5Ch+var_58] offset aWinusb_getpipe +
mov [esp+5Ch+var_5C] edi +
call ds:GetProcAddress  +
sub esp 8 +
mov [ebx+24h] eax +
mov [esp+5Ch+var_58] offset aWinusb_getpowe +
mov [esp+5Ch+var_5C] edi +
call ds:GetProcAddress  +
sub esp 8 +
mov [ebx+28h] eax +
mov [esp+5Ch+var_58] offset aWinusb_initial +
mov [esp+5Ch+var_5C] edi +
call ds:GetProcAddress  +
sub esp 8 +
mov [ebx+2Ch] eax +
mov [esp+5Ch+var_58] offset aWinusb_queryde +
mov [esp+5Ch+var_5C] edi +
call ds:GetProcAddress  +
sub esp 8 +
mov [ebx+30h] eax +
mov [esp+5Ch+var_58] offset aWinusb_queryin +
mov [esp+5Ch+var_5C] edi +
call ds:GetProcAddress  +
sub esp 8 +
mov [ebx+34h] eax +
mov [esp+5Ch+var_58] offset aWinusb_querypi +
mov [esp+5Ch+var_5C] edi +
call ds:GetProcAddress  +
sub esp 8 +
mov [ebx+38h] eax +
mov [esp+5Ch+var_58] offset aWinusb_readpip +
mov [esp+5Ch+var_5C] edi +
call ds:GetProcAddress  +
sub esp 8 +
mov [ebx+3Ch] eax +
mov [esp+5Ch+var_58] offset aWinusb_resetpi +
mov [esp+5Ch+var_5C] edi +
call ds:GetProcAddress  +
sub esp 8 +
mov [ebx+40h] eax +
mov [esp+5Ch+var_58] offset aWinusb_setcurr +
mov [esp+5Ch+var_5C] edi +
call ds:GetProcAddress  +
sub esp 8 +
mov [ebx+44h] eax +
mov [esp+5Ch+var_58] offset aWinusb_setpipe +
mov [esp+5Ch+var_5C] edi +
call ds:GetProcAddress  +
sub esp 8 +
mov [ebx+48h] eax +
mov [esp+5Ch+var_58] offset aWinusb_setpowe +
mov [esp+5Ch+var_5C] edi +
call ds:GetProcAddress  +
sub esp 8 +
mov [ebx+4Ch] eax +
mov [esp+5Ch+var_58] offset aWinusb_writepi +
mov [esp+5Ch+var_5C] edi +
call ds:GetProcAddress  +
mov [ebx+50h] eax +
mov eax [ebx+2Ch] +
sub esp 8 +
test eax eax +
jz loc_445E53  +
mov eax off_461614[esi*4] +
mov dword ptr [ebx] 1 +
mov [esp+5Ch+var_50] offset aInitalizedSubA +
mov [esp+5Ch+var_54] offset aWinusbx_init +
mov [esp+5Ch+var_4C] eax +
mov [esp+5Ch+var_58] 4 +
mov [esp+5Ch+var_5C] 0 +
call sub_43E390  +
add esi 1 +
add ebx 58h +
cmp esi 3 +
jnz loc_445A20  +
xor eax eax +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
lea eax [ebx+4] +
mov [esp+5Ch+var_54] 1Bh +
mov [esp+5Ch+var_58] esi +
mov [esp+5Ch+var_5C] eax +
call [ebp+var_2C]  +
lea eax [ebx+8] +
sub esp 0Ch +
mov [esp+68h+var_60] 7 +
mov [esp+68h+var_64] esi +
mov [esp+68h+var_68] eax +
call [ebp+var_2C]  +
lea eax [ebx+0Ch] +
sub esp 0Ch +
mov [esp+74h+var_6C] 1Ch +
mov [esp+74h+var_70] esi +
mov [esp+74h+var_74] eax +
call [ebp+var_2C]  +
lea eax [ebx+10h] +
sub esp 0Ch +
mov [esp+80h+var_78] 1 +
mov [esp+80h+var_7C] esi +
mov [esp+80h+var_80] eax +
call [ebp+var_2C]  +
lea eax [ebx+14h] +
sub esp 0Ch +
mov [esp+8Ch+var_84] 0Fh +
mov [esp+8Ch+var_88] esi +
mov [esp+8Ch+var_8C] eax +
call [ebp+var_2C]  +
lea eax [ebx+18h] +
sub esp 0Ch +
mov [esp+98h+var_90] 14h +
mov [esp+98h+var_94] esi +
mov [esp+98h+var_98] eax +
call [ebp+var_2C]  +
lea eax [ebx+1Ch] +
sub esp 0Ch +
mov [esp+0A4h+var_9C] 6 +
mov [esp+0A4h+var_A0] esi +
mov [esp+0A4h+var_A4] eax +
call [ebp+var_2C]  +
lea eax [ebx+20h] +
sub esp 0Ch +
mov [esp+0B0h+var_A8] 20h +
mov [esp+0B0h+var_AC] esi +
mov [esp+0B0h+var_B0] eax +
call [ebp+var_2C]  +
lea eax [ebx+24h] +
sub esp 0Ch +
mov [esp+0BCh+var_B4] 17h +
mov [esp+0BCh+var_B8] esi +
mov [esp+0BCh+var_BC] eax +
call [ebp+var_2C]  +
lea eax [ebx+28h] +
sub esp 0Ch +
mov [esp+0C8h+var_C0] 9 +
mov [esp+0C8h+var_C4] esi +
mov [esp+0C8h+var_C8] eax +
call [ebp+var_2C]  +
lea eax [ebx+2Ch] +
sub esp 0Ch +
mov [esp+0D4h+var_CC] 0Dh +
mov [esp+0D4h+var_D0] esi +
mov [esp+0D4h+var_D4] eax +
call [ebp+var_2C]  +
lea eax [ebx+30h] +
sub esp 0Ch +
mov [esp+0E0h+var_D8] 12h +
mov [esp+0E0h+var_DC] esi +
mov [esp+0E0h+var_E0] eax +
call [ebp+var_2C]  +
lea eax [ebx+34h] +
sub esp 0Ch +
mov [esp+0ECh+var_E4] 11h +
mov [esp+0ECh+var_E8] esi +
mov [esp+0ECh+var_EC] eax +
call [ebp+var_2C]  +
lea eax [ebx+38h] +
sub esp 0Ch +
mov [esp+0F8h+var_F0] 15h +
mov [esp+0F8h+var_F4] esi +
mov [esp+0F8h+var_F8] eax +
call [ebp+var_2C]  +
lea eax [ebx+3Ch] +
sub esp 0Ch +
mov [esp+104h+var_FC] 18h +
mov [esp+104h+var_100] esi +
mov [esp+104h+var_104] eax +
call [ebp+var_2C]  +
lea eax [ebx+40h] +
sub esp 0Ch +
mov [esp+110h+var_108] 1Ah +
mov [esp+110h+var_10C] esi +
mov [esp+110h+var_110] eax +
call [ebp+var_2C]  +
lea eax [ebx+44h] +
sub esp 0Ch +
mov [esp+11Ch+var_114] 13h +
mov [esp+11Ch+var_118] esi +
mov [esp+11Ch+var_11C] eax +
call [ebp+var_2C]  +
lea eax [ebx+48h] +
sub esp 0Ch +
mov [esp+128h+var_120] 16h +
mov [esp+128h+var_124] esi +
mov [esp+128h+var_128] eax +
call [ebp+var_2C]  +
lea eax [ebx+4Ch] +
sub esp 0Ch +
mov [esp+134h+var_12C] 8 +
mov [esp+134h+var_130] esi +
mov [esp+134h+var_134] eax +
call [ebp+var_2C]  +
lea eax [ebx+50h] +
sub esp 0Ch +
mov [esp+140h+var_138] 19h +
mov [esp+140h+var_13C] esi +
mov [esp+140h+var_140] eax +
call [ebp+var_2C]  +
lea eax [ebx+54h] +
sub esp 0Ch +
mov [esp+14Ch+var_144] 0Ch +
mov [esp+14Ch+var_148] esi +
mov [esp+14Ch+var_14C] eax +
call [ebp+var_2C]  +
mov eax [ebx+2Ch] +
sub esp 0Ch +
test eax eax +
jnz loc_445C02  +
mov eax off_461614[esi*4] +
mov [esp+158h+var_14C] offset aFailedToInital +
mov [esp+158h+var_150] offset aWinusbx_init +
mov [esp+158h+var_154] 2 +
mov [esp+158h+var_148] eax +
mov eax [ebp+arg_4] +
mov [esp+158h+var_158] eax +
call sub_43E390  +
mov dword ptr [ebx] 0 +
jmp loc_445C37  +
mov ebx ds:LoadLibraryA +
mov [esp+58h+var_58] offset aLibusbk +
call ebx  +
sub esp 4 +
test eax eax +
mov edi eax +
jnz loc_445975  +
mov eax [ebp+arg_4] +
mov [esp+58h+var_4C] offset aLibusbkDllIsNo +
mov [esp+58h+var_50] offset aWinusbx_init +
mov [esp+58h+var_54] 3 +
mov [esp+58h+var_58] eax +
call sub_43E390  +
mov [esp+58h+var_58] offset aWinusb +
call esi  +
mov [ebp+var_2C] 0 +
sub esp 4 +
test eax eax +
mov edi eax +
jnz loc_445A19  +
mov [esp+5Ch+var_5C] offset aWinusb +
call ebx  +
sub esp 4 +
test eax eax +
mov edi eax +
jnz loc_445A19  +
mov eax [ebp+arg_4] +
mov [esp+5Ch+var_50] offset aWinusbDllIsNot +
mov [esp+5Ch+var_54] offset aWinusbx_init +
mov [esp+5Ch+var_58] 2 +
mov [esp+5Ch+var_5C] eax +
call sub_43E390  +
mov eax 0FFFFFFFBh +
jmp loc_445C48  +
mov eax [ebp+arg_4] +
mov [esp+5Ch+var_50] offset aLibk_getproc_0 +
mov [esp+5Ch+var_54] offset aWinusbx_init +
mov [esp+5Ch+var_58] 1 +
mov [esp+5Ch+var_5C] eax +
call sub_43E390  +
mov eax 0FFFFFFFBh +
jmp loc_445C48  +
***
sub esp 18h +
mov ecx ds:dword_4854A8 +
mov eax [ebp+arg_4] +
test ecx ecx +
mov edx [eax] +
lea edx [edx+edx*2] +
lea edx [eax+edx*4+58h] +
mov eax [eax+30h] +
jz loc_445F97  +
movzx edx byte ptr [edx+18h] +
mov eax [eax+edx*8+20h] +
mov [esp+18h+var_18] eax +
call ds:CancelIo  +
xor eax eax +
sub esp 4 +
leave   +
retn   +
mov eax 0FFFFFFFDh +
leave   +
retn   +
***
push edi  +
push esi  +
push ebx  +
sub esp 7Ch +
mov esi [ebp+arg_4] +
mov eax [ebp+arg_0] +
mov edi [esi+30h] +
mov edx [esi] +
cmp eax 0FFFFFFFFh +
mov ecx [edi+10h] +
lea edx [edx+edx*2] +
mov [ebp+var_5C] edi +
mov ebx [ecx+8] +
mov [ebp+var_68] ebx +
lea ebx [esi+edx*4+58h] +
lea edx [edi+18h] +
lea edi [ecx+40h] +
jz loc_446175  +
imul eax eax +
mov [ebp+var_60] eax +
mov eax ds:dword_485600[eax] +
test eax eax +
jz loc_446202  +
mov eax ds:dword_481078 +
mov [ebx] eax +
mov eax ds:dword_48107C +
mov [ebx+4] eax +
mov eax ds:dword_481080 +
mov [ebx+8] eax +
mov eax ds:dword_481084 +
mov [ebx+0Ch] eax +
mov eax ds:dword_481088 +
mov [ebx+10h] eax +
mov eax ds:dword_48108C +
mov [ebx+14h] eax +
movzx eax byte ptr [esi+35h] +
mov [ebp+var_64] eax +
mov ecx eax +
mov eax edi +
call sub_442050  +
test eax eax +
mov edi eax +
js loc_446210  +
mov [esp+88h+var_74] eax +
mov eax [ebp+var_64] +
mov [esp+88h+var_7C] offset aMatchedEndpoin +
mov [esp+88h+var_80] offset aWinusbx_submit +
mov [esp+88h+var_84] 4 +
mov [esp+88h+var_78] eax +
mov [esp+88h+var_88] 0 +
call sub_43E390  +
mov eax [ebp+var_5C] +
lea edx [ebp+var_58] +
mov ecx [eax+edi*8+20h] +
movsx eax byte ptr [esi+35h] +
mov [esp+88h+var_88] edx +
mov [esp+88h+var_78] 0 +
mov [esp+88h+var_7C] 0 +
sar eax 1Fh +
add eax 2 +
mov [esp+88h+var_80] eax +
mov [esp+88h+var_84] ecx +
call sub_44DD00  +
mov edx [ebp+var_54] +
mov eax [ebp+var_58] +
mov [ebp+var_2C] edx +
mov edx [ebp+var_50] +
test eax eax +
mov [ebp+var_30] eax +
mov [ebp+var_28] edx +
mov edx [ebp+var_4C] +
mov [ebp+var_24] edx +
mov edx [ebp+var_48] +
mov [ebp+var_20] edx +
mov edx [ebp+var_44] +
mov [ebp+var_1C] edx +
js loc_446240  +
mov eax [esi+40h] +
cmp byte ptr [esi+35h] 0 +
mov [esp+88h+var_78] eax +
js loc_4461D0  +
mov [esp+88h+var_7C] offset aWritingDBytes +
mov [esp+88h+var_80] offset aWinusbx_submit +
mov [esp+88h+var_84] 4 +
mov [esp+88h+var_88] 0 +
call sub_43E390  +
mov eax [ebp+var_60] +
mov eax ds:dword_485650[eax] +
mov ecx [ebp+var_28] +
mov edx [esi+50h] +
mov [esp+88h+var_78] 0 +
mov [esp+88h+var_74] ecx +
mov ecx [esi+40h] +
mov [esp+88h+var_80] edx +
mov [esp+88h+var_7C] ecx +
movzx edx byte ptr [esi+35h] +
mov [esp+88h+var_84] edx +
mov edx [ebp+var_2C] +
mov [esp+88h+var_88] edx +
call eax  +
sub esp 18h +
test eax eax +
jz loc_446180  +
mov eax [ebp+var_28] +
mov edx [esi+40h] +
mov dword ptr [eax] 104h +
mov [eax+4] edx +
mov eax [ebp+var_30] +
mov [ebx] eax +
mov eax [ebp+var_2C] +
mov [ebx+4] eax +
mov eax [ebp+var_28] +
mov [ebx+8] eax +
mov eax [ebp+var_24] +
mov [ebx+0Ch] eax +
mov eax [ebp+var_20] +
mov [ebx+10h] eax +
mov eax [ebp+var_1C] +
mov [ebx+14h] eax +
mov eax edi +
mov [ebx+18h] al +
xor eax eax +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ecx+50h] +
jmp loc_445FD6  +
call ds:GetLastError  +
cmp eax 3E5h +
jz loc_446143  +
xor eax eax +
call sub_442BB0  +
mov [esp+0A0h+var_94] offset aReadpipeWritep +
mov [esp+0A0h+var_98] offset aWinusbx_submit +
mov [esp+0A0h+var_9C] 1 +
mov [esp+0A0h+var_90] eax +
mov eax [ebp+var_68] +
mov [esp+0A0h+var_A0] eax +
call sub_43E390  +
lea eax [ebp+var_30] +
mov [esp+0A0h+var_A0] eax +
call sub_44DFA0  +
mov eax 0FFFFFFFFh +
jmp loc_44616D  +
mov [esp+88h+var_7C] offset aReadingDBytes +
mov [esp+88h+var_80] offset aWinusbx_submit +
mov [esp+88h+var_84] 4 +
mov [esp+88h+var_88] 0 +
call sub_43E390  +
mov eax [ebp+var_60] +
mov eax ds:dword_48563C[eax] +
jmp loc_446100  +
mov eax 0FFFFFFFDh +
jmp loc_44616D  +
mov eax [ebp+var_68] +
mov [esp+88h+var_7C] offset aUnableToMatchE +
mov [esp+88h+var_80] offset aWinusbx_submit +
mov [esp+88h+var_84] 1 +
mov [esp+88h+var_88] eax +
call sub_43E390  +
mov eax 0FFFFFFFBh +
jmp loc_44616D  +
mov eax 0FFFFFFF5h +
jmp loc_44616D  +
***
push edi  +
mov edi eax +
push esi  +
mov esi edx +
push ebx  +
sub esp 3Ch +
mov eax [eax] +
mov ebx [esi] +
mov [ebp+var_1C] ecx +
mov edx [eax+10h] +
mov [ebp+var_24] eax +
mov eax [edx+8] +
mov [ebp+var_20] edx +
mov [ebp+var_28] eax +
lea eax [ecx-3] +
cmp eax 1 +
ja loc_446390  +
mov [esp+48h+var_48] offset unk_487160 +
call sub_44CBC0  +
test ebx ebx +
mov ecx [ebp+var_1C] +
mov edx [ebp+var_20] +
js loc_4462D0  +
mov eax [ebp+var_24] +
xor edi edi +
lea eax [eax+ebx*4] +
mov edx [eax+11Ch] +
test edx edx +
jnz loc_4462C0  +
mov [esp+48h+var_48] offset unk_487160 +
call sub_44CC10  +
mov eax edi +
mov [esi] ebx +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add edx 1 +
mov [eax+11Ch] edx +
jmp loc_4462A7  +
add edx 58h +
xor ebx ebx +
mov [ebp+var_20] esi +
mov esi edi +
mov edi edx +
jmp loc_4462EB  +
add ebx 1 +
add edi 18h +
cmp ebx 20h +
jz loc_446360  +
mov eax [edi] +
movzx eax byte ptr [eax] +
cmp eax ecx +
jnz loc_4462E0  +
mov eax [esi] +
mov [esp+48h+var_44] ebx +
mov [ebp+var_1C] ecx +
mov [esp+48h+var_48] eax +
call sub_43F250  +
mov ecx [ebp+var_1C] +
sub esp 8 +
test eax eax +
jnz loc_4462E0  +
mov [esp+48h+var_38] ebx +
mov esi [ebp+var_20] +
mov [esp+48h+var_3C] offset aAutoClaimedInt +
mov [esp+48h+var_40] offset aAuto_claim +
mov [esp+48h+var_44] 4 +
mov [esp+48h+var_48] 0 +
call sub_43E390  +
mov eax [ebp+var_24] +
lea edi [eax+ebx*4] +
mov eax [edi+11Ch] +
test eax eax +
jnz loc_44639A  +
add eax 1 +
mov [edi+11Ch] eax +
xor edi edi +
jmp loc_4462A7  +
mov eax [ebp+var_28] +
mov edi 0FFFFFFFBh +
mov [esp+48h+var_3C] offset aCouldNotAutoCl +
mov esi [ebp+var_20] +
mov [esp+48h+var_40] offset aAuto_claim +
mov [esp+48h+var_44] 1 +
mov [esp+48h+var_48] eax +
call sub_43E390  +
jmp loc_4462A7  +
mov eax 0FFFFFFFEh +
jmp loc_4462B7  +
mov eax [ebp+var_28] +
mov [esp+48h+var_3C] offset aProgramAsser_3 +
mov [esp+48h+var_40] offset aAuto_claim +
mov [esp+48h+var_44] 2 +
mov [esp+48h+var_48] eax +
call sub_43E390  +
mov eax [edi+11Ch] +
jmp loc_44634A  +
***
push edi  +
push esi  +
push ebx  +
sub esp 7Ch +
mov eax [ebp+arg_4] +
mov edi [ebp+arg_4] +
mov eax [eax] +
mov esi [edi+30h] +
lea eax [eax+eax*2] +
lea ebx [edi+eax*4+58h] +
mov eax [esi+10h] +
lea edx [esi+18h] +
mov edi [eax+8] +
mov [ebp+var_60] eax +
add eax 40h +
mov [ebp+var_68] edi +
mov edi ds:dword_4854A8 +
test edi edi +
jz loc_4467F7  +
mov ecx ds:dword_481078 +
mov dword ptr [ebx+20h] 0 +
mov [ebx] ecx +
mov ecx ds:dword_48107C +
mov [ebx+4] ecx +
mov ecx ds:dword_481080 +
mov [ebx+8] ecx +
mov ecx ds:dword_481084 +
mov [ebx+0Ch] ecx +
mov ecx ds:dword_481088 +
mov [ebx+10h] ecx +
mov ecx ds:dword_48108C +
mov [ebx+14h] ecx +
mov ecx [ebx+1Ch] +
test ecx ecx +
jz loc_446469  +
mov [esp+88h+var_88] ecx +
mov [ebp+var_64] eax +
mov [ebp+var_5C] edx +
call free  +
mov eax [ebp+var_64] +
mov edx [ebp+var_5C] +
mov dword ptr [ebx+1Ch] 0 +
mov edi [ebp+arg_4] +
movzx edi byte ptr [edi+35h] +
mov ecx edi +
call sub_442050  +
test eax eax +
mov [ebp+var_5C] eax +
js loc_446801  +
mov eax [ebp+var_5C] +
mov [esp+88h+var_78] edi +
mov [esp+88h+var_7C] offset aMatchedEndpoin +
mov [esp+88h+var_80] offset aHid_submit_bul +
mov [esp+88h+var_74] eax +
mov [esp+88h+var_84] 4 +
mov [esp+88h+var_88] 0 +
call sub_43E390  +
mov eax [ebp+var_5C] +
mov ecx [esi+eax*8+20h] +
mov eax [ebp+arg_4] +
movzx eax byte ptr [eax+35h] +
and eax 0FFFFFF80h +
movzx edx al +
test edx edx +
jnz loc_446651  +
lea esi [ebp+var_58] +
mov [esp+88h+var_84] ecx +
lea edi [ebp+var_30] +
mov [esp+88h+var_88] esi +
mov [esp+88h+var_78] 0 +
mov [esp+88h+var_7C] 0 +
mov [esp+88h+var_80] 2 +
mov [ebp+var_64] edx +
call sub_44DD00  +
mov ecx 6 +
mov edx [ebp+var_64] +
mov [ebp+var_6C] edi +
movs   +
cmp [ebp+var_30] 0 +
js loc_44682E  +
mov eax [ebp+var_60] +
mov eax [eax+354h] +
mov ecx [eax+0Ch] +
test ecx ecx +
jz loc_4466A9  +
mov eax [ebp+arg_4] +
mov esi [eax+40h] +
lea edi [esi+1] +
mov [esp+88h+var_84] 1 +
mov [esp+88h+var_88] edi +
mov [ebp+var_64] edx +
call calloc  +
mov edx [ebp+var_64] +
test eax eax +
mov [ebx+1Ch] eax +
jz loc_44682E  +
test edx edx +
mov [ebx+24h] esi +
jnz loc_4466B7  +
mov edi [ebp+var_60] +
mov edx [edi+354h] +
mov edi [ebp+arg_4] +
mov edx [edx+0Ch] +
test edx edx +
mov edx [edi+50h] +
jnz loc_446573  +
add eax 1 +
mov ecx [edi+40h] +
mov [esp+88h+var_84] edx +
mov [esp+88h+var_88] eax +
mov [esp+88h+var_80] ecx +
call memcpy  +
mov eax [ebx+1Ch] +
movzx eax byte ptr [eax] +
mov [esp+88h+var_78] esi +
mov [esp+88h+var_7C] offset aWritingDBytesR +
mov [esp+88h+var_80] offset aHid_submit_bul +
mov [esp+88h+var_74] eax +
mov [esp+88h+var_84] 4 +
mov [esp+88h+var_88] 0 +
call sub_43E390  +
mov eax [ebx+1Ch] +
mov edx [ebp+var_28] +
mov [esp+88h+var_80] esi +
mov [esp+88h+var_84] eax +
mov eax [ebp+var_2C] +
mov [esp+88h+var_78] edx +
lea edx [ebp+var_34] +
mov [esp+88h+var_7C] edx +
mov [esp+88h+var_88] eax +
call ds:WriteFile  +
sub esp 14h +
test eax eax +
jz loc_446718  +
mov eax [ebx+1Ch] +
test eax eax +
jz loc_4465FE  +
mov [esp+88h+var_88] eax +
call free  +
mov dword ptr [ebx+1Ch] 0 +
mov edx [ebp+var_34] +
test edx edx +
jz loc_446760  +
xor eax eax +
cmp esi edx +
jb loc_446730  +
mov ecx [ebp+var_28] +
mov dword ptr [ecx] 104h +
mov [ecx+4] edx +
mov edx [ebp+var_30] +
movzx ecx byte ptr [ebp+var_5C] +
mov [ebx] edx +
mov edx [ebp+var_2C] +
mov [ebx+18h] cl +
mov [ebx+4] edx +
mov edx [ebp+var_28] +
mov [ebx+8] edx +
mov edx [ebp+var_24] +
mov [ebx+0Ch] edx +
mov edx [ebp+var_20] +
mov [ebx+10h] edx +
mov edx [ebp+var_1C] +
mov [ebx+14h] edx +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
lea esi [ebp+var_58] +
mov [esp+88h+var_84] ecx +
lea edi [ebp+var_30] +
mov [esp+88h+var_88] esi +
mov [esp+88h+var_78] 0 +
mov [esp+88h+var_7C] 0 +
mov [esp+88h+var_80] 1 +
mov [ebp+var_64] edx +
call sub_44DD00  +
mov ecx 6 +
mov edx [ebp+var_64] +
mov [ebp+var_6C] edi +
movs   +
cmp [ebp+var_30] 0 +
js loc_44682E  +
mov eax [ebp+var_60] +
mov eax [eax+354h] +
mov esi [eax+8] +
test esi esi +
jnz loc_446525  +
mov eax [ebp+arg_4] +
mov eax [eax+40h] +
lea esi [eax+1] +
jmp loc_44652B  +
mov eax [ebp+arg_4] +
mov eax [eax+50h] +
mov [ebx+20h] eax +
mov [esp+88h+var_78] esi +
mov [esp+88h+var_7C] offset aReadingDBytesR +
mov [esp+88h+var_80] offset aHid_submit_bul +
mov [esp+88h+var_84] 4 +
mov [esp+88h+var_88] 0 +
call sub_43E390  +
mov eax [ebx+1Ch] +
mov edx [ebp+var_28] +
mov [esp+88h+var_80] edi +
mov [esp+88h+var_84] eax +
mov eax [ebp+var_2C] +
mov [esp+88h+var_78] edx +
lea edx [ebp+var_34] +
mov [esp+88h+var_7C] edx +
mov [esp+88h+var_88] eax +
call ds:ReadFile  +
sub esp 14h +
test eax eax +
jnz loc_4465FE  +
call ds:GetLastError  +
cmp eax 3E5h +
jnz loc_446794  +
xor ax ax +
jmp loc_44661F  +
mov eax [ebp+var_68] +
mov [esp+88h+var_7C] offset aOverflow +
mov [esp+88h+var_80] offset aHid_submit_bul +
mov [esp+88h+var_84] 1 +
mov [esp+88h+var_88] eax +
call sub_43E390  +
mov edx [ebp+var_34] +
mov eax 0FFFFFFF8h +
jmp loc_446613  +
mov eax [ebp+var_68] +
mov [esp+88h+var_7C] offset aProgramAsser_4 +
mov [esp+88h+var_80] offset aHid_submit_bul +
mov [esp+88h+var_84] 1 +
mov [esp+88h+var_88] eax +
call sub_43E390  +
mov edx 1 +
mov [ebp+var_34] 1 +
jmp loc_446609  +
xor eax eax +
call sub_442BB0  +
mov [esp+88h+var_7C] offset aHidTransferFai +
mov [esp+88h+var_80] offset aHid_submit_bul +
mov [esp+88h+var_84] 1 +
mov [esp+88h+var_78] eax +
mov eax [ebp+var_68] +
mov [esp+88h+var_88] eax +
call sub_43E390  +
mov eax [ebp+var_6C] +
mov [esp+88h+var_88] eax +
call sub_44DFA0  +
mov edx [ebx+1Ch] +
mov eax 0FFFFFFFFh +
test edx edx +
jz loc_446649  +
mov [esp+88h+var_88] edx +
mov [ebp+var_5C] eax +
call free  +
mov eax [ebp+var_5C] +
mov dword ptr [ebx+1Ch] 0 +
jmp loc_446649  +
mov eax 0FFFFFFFDh +
jmp loc_446649  +
mov eax [ebp+var_68] +
mov [esp+88h+var_7C] offset aUnableToMatchE +
mov [esp+88h+var_80] offset aHid_submit_bul +
mov [esp+88h+var_84] 1 +
mov [esp+88h+var_88] eax +
call sub_43E390  +
mov eax 0FFFFFFFBh +
jmp loc_446649  +
mov eax 0FFFFFFF5h +
jmp loc_446649  +
***
push edi  +
push esi  +
push ebx  +
sub esp 7Ch +
mov eax [ebp+arg_4] +
cmp [ebp+arg_0] 0FFFFFFFFh +
mov esi [eax+10h] +
mov eax [esi+8] +
mov [ebp+var_60] eax +
jz loc_446AF4  +
imul eax [ebp+arg_0] +
mov edx ds:dword_485600[eax] +
test edx edx +
jz loc_446B0B  +
mov ecx [ebp+arg_4] +
add esi 64h +
mov [ebp+var_64] 0 +
mov [ebp+var_6C] eax +
add ecx 18h +
mov [ebp+var_68] ecx +
mov eax [ebp+var_68] +
mov ecx [ebp+var_64] +
mov edi [eax+ecx*8+8] +
lea eax [ebp+var_58] +
mov [esp+88h+var_88] eax +
mov [esp+88h+var_84] edi +
call sub_44E2C0  +
mov edx [ebp+var_54] +
mov eax [ebp+var_58] +
mov ebx [ebp+var_60] +
mov [ebp+var_2C] edx +
mov edx [ebp+var_50] +
test eax eax +
mov [ebp+var_30] eax +
mov [ebp+var_28] edx +
mov edx [ebp+var_4C] +
mov [ebp+var_24] edx +
mov edx [ebp+var_48] +
mov [ebp+var_20] edx +
mov edx [ebp+var_44] +
mov [ebp+var_1C] edx +
jle loc_44691E  +
nop   +
lea esi [esi+0] +
mov [esp+88h+var_84] eax +
mov [esp+88h+var_88] ebx +
call sub_450550  +
lea eax [ebp+var_30] +
mov [esp+88h+var_88] eax +
call sub_44DFA0  +
lea eax [ebp+var_58] +
mov [esp+88h+var_88] eax +
mov [esp+88h+var_84] edi +
call sub_44E2C0  +
mov edx [ebp+var_54] +
mov eax [ebp+var_58] +
mov [ebp+var_2C] edx +
mov edx [ebp+var_50] +
test eax eax +
mov [ebp+var_30] eax +
mov [ebp+var_28] edx +
mov edx [ebp+var_4C] +
mov [ebp+var_24] edx +
mov edx [ebp+var_48] +
mov [ebp+var_20] edx +
mov edx [ebp+var_44] +
mov [ebp+var_1C] edx +
jg loc_4468D0  +
lea eax [edi-1] +
cmp eax 0FFFFFFFDh +
ja loc_446A76  +
cmp byte ptr [esi-4] 0 +
jle loc_446A76  +
mov [ebp+var_5C] edi +
xor ebx ebx +
mov edi [ebp+var_6C] +
jmp loc_446978  +
mov eax [esi] +
movzx eax byte ptr [eax+ebx] +
test al al +
js loc_446A0B  +
mov [esp+88h+var_84] eax +
mov eax [ebp+var_5C] +
mov [esp+88h+var_88] eax +
call ds:dword_485640[edi]  +
sub esp 8 +
test eax eax +
jz loc_446A31  +
movsx eax byte ptr [esi-4] +
add ebx 1 +
cmp eax ebx +
jle loc_446A76  +
mov eax [esi] +
movzx eax byte ptr [eax+ebx] +
mov [esp+90h+var_84] offset aResettingEp02x +
mov [esp+90h+var_88] offset aWinusbx_reset_ +
mov [esp+90h+var_8C] 4 +
mov [esp+90h+var_80] eax +
mov [esp+90h+var_90] 0 +
call sub_43E390  +
mov eax [esi] +
movzx eax byte ptr [eax+ebx] +
mov [esp+90h+var_8C] eax +
mov eax [ebp+var_5C] +
mov [esp+90h+var_90] eax +
call ds:dword_485604[edi]  +
sub esp 8 +
test eax eax +
jnz loc_446940  +
call sub_442BB0  +
mov [esp+98h+var_84] eax +
mov eax [esi] +
movzx eax byte ptr [eax+ebx] +
mov [esp+98h+var_8C] offset aAbortpipePipeA +
mov [esp+98h+var_90] offset aWinusbx_reset_ +
mov [esp+98h+var_94] 1 +
mov [esp+98h+var_88] eax +
mov eax [ebp+var_60] +
mov [esp+98h+var_98] eax +
call sub_43E390  +
mov eax [esi] +
movzx eax byte ptr [eax+ebx] +
test al al +
jns loc_44694E  +
mov [esp+98h+var_94] eax +
mov eax [ebp+var_5C] +
mov [esp+98h+var_98] eax +
call ds:dword_48560C[edi]  +
sub esp 8 +
test eax eax +
jz loc_446AB7  +
mov eax [esi] +
movzx eax byte ptr [eax+ebx] +
jmp loc_44694E  +
call sub_442BB0  +
mov [esp+90h+var_7C] eax +
mov eax [esi] +
movzx eax byte ptr [eax+ebx] +
add ebx 1 +
mov [esp+90h+var_84] offset aResetpipePipeA +
mov [esp+90h+var_88] offset aWinusbx_reset_ +
mov [esp+90h+var_8C] 1 +
mov [esp+90h+var_80] eax +
mov eax [ebp+var_60] +
mov [esp+90h+var_90] eax +
call sub_43E390  +
movsx eax byte ptr [esi-4] +
cmp eax ebx +
jg loc_446978  +
add [ebp+var_64] 1 +
add esi 18h +
cmp [ebp+var_64] 20h +
jnz loc_446887  +
imul eax [ebp+arg_0] +
mov eax ds:dword_485654[eax] +
test eax eax +
jz loc_446AFF  +
mov ecx [ebp+arg_4] +
xor ebx ebx +
mov edx [ecx+20h] +
lea ecx [edx-1] +
cmp ecx 0FFFFFFFDh +
ja loc_446AAD  +
mov [esp+90h+var_90] edx +
call eax  +
sub esp 4 +
lea esp [ebp-0Ch] +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
xor eax eax +
call sub_442BB0  +
mov [esp+0A0h+var_8C] eax +
mov eax [esi] +
movzx eax byte ptr [eax+ebx] +
mov [esp+0A0h+var_94] offset aFlushpipePipeA +
mov [esp+0A0h+var_98] offset aWinusbx_reset_ +
mov [esp+0A0h+var_9C] 1 +
mov [esp+0A0h+var_90] eax +
mov eax [ebp+var_60] +
mov [esp+0A0h+var_A0] eax +
call sub_43E390  +
jmp loc_446A26  +
mov eax [esi+50h] +
mov [ebp+arg_0] eax +
jmp loc_44685F  +
lea esp [ebp-0Ch] +
xor ebx ebx +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ebx 0FFFFFFFDh +
jmp loc_446AAD  +
***
mov ebp esp +
push esi  +
push ebx  +
sub esp 20h +
mov ebx [ebp+arg_4] +
mov [ebp+var_14] 0 +
mov [ebp+var_10] 0 +
mov [ebp+var_C] 0 +
mov edx [ebx+10h] +
lea ecx [edx+40h] +
jmp loc_446B5A  +
add eax 18h +
cmp eax 300h +
jz loc_446B7E  +
mov edx [ecx+eax+18h] +
cmp byte ptr [edx] 3 +
jnz loc_446B50  +
mov edx [ecx+eax+1Ch] +
cmp edx 0FFFFFFFFh +
jz loc_446B50  +
add eax 18h +
cmp eax 300h +
mov [ebp+edx*4+var_14] 1 +
jnz loc_446B5A  +
xor esi esi +
mov eax [ebp+esi*4+var_14] +
test eax eax +
jnz loc_446BA0  +
add esi 1 +
cmp esi 3 +
jnz loc_446B80  +
xor eax eax +
add esp 20h +
pop ebx  +
pop esi  +
pop ebp  +
retn   +
mov [esp+28h+var_24] ebx +
mov [esp+28h+var_28] esi +
call sub_446840  +
test eax eax +
jz loc_446B88  +
jmp loc_446B92  +
***
sub esp 28h +
mov ecx [ebp+arg_0] +
movzx edx byte ptr [ecx+36h] +
cmp dl 3 +
ja loc_446C10  +
cmp dl 1 +
jnb loc_446BF2  +
mov eax [ecx+30h] +
mov eax [eax+10h] +
mov eax [eax+48h] +
mov eax [eax+44h] +
mov [esp+28h+var_24] ecx +
mov [esp+28h+var_28] 0FFFFFFFFh +
call eax  +
leave   +
retn   +
mov eax [ecx+30h] +
mov eax [eax+10h] +
mov eax [eax+48h] +
mov eax [eax+48h] +
mov [esp+28h+var_24] ecx +
mov [esp+28h+var_28] 0FFFFFFFFh +
call eax  +
leave   +
retn   +
cmp dl 4 +
mov eax 0FFFFFFF4h +
jz locret_446BF0  +
mov eax [ecx+30h] +
mov eax [eax+10h] +
mov eax [eax+8] +
mov [esp+28h+var_18] edx +
mov [esp+28h+var_1C] offset aUnknownEndpoin +
mov [esp+28h+var_20] offset aWindows_cancel +
mov [esp+28h+var_28] eax +
mov [esp+28h+var_24] 1 +
call sub_43E390  +
mov eax 0FFFFFFFEh +
leave   +
retn   +
***
push esi  +
push ebx  +
sub esp 10h +
mov ebx [eax+10h] +
lea esi [edx-3] +
lea ecx [eax+1Ch] +
xor eax eax +
add ebx 58h +
cmp esi 1 +
ja loc_446CA9  +
nop   +
lea esi [esi+0] +
mov esi [ecx] +
sub esi 1 +
cmp esi 0FFFFFFFDh +
ja loc_446C8F  +
mov esi [ecx+4] +
test esi esi +
jz loc_446C8F  +
cmp esi 0FFFFFFFFh +
jz loc_446C8F  +
mov esi [ebx] +
movzx esi byte ptr [esi] +
cmp esi edx +
jz loc_446CA2  +
add eax 1 +
add ecx 8 +
add ebx 18h +
cmp eax 20h +
jnz loc_446C70  +
mov eax 0FFFFFFFFh +
add esp 10h +
pop ebx  +
pop esi  +
pop ebp  +
retn   +
mov [esp+18h+var_C] offset aUnsupported_13 +
mov [esp+18h+var_10] offset aGet_valid_inte +
mov [esp+18h+var_14] 4 +
mov [esp+18h+var_18] 0 +
call sub_43E390  +
mov eax 0FFFFFFFFh +
jmp loc_446CA2  +
***
push edi  +
push esi  +
push ebx  +
sub esp 7Ch +
mov esi [ebp+arg_4] +
cmp [ebp+arg_0] 0FFFFFFFFh +
mov edi [esi+30h] +
mov eax [edi+10h] +
mov [ebp+var_64] eax +
mov eax [eax+8] +
mov [ebp+var_68] eax +
mov eax [esi] +
lea eax [eax+eax*2] +
lea ebx [esi+eax*4+58h] +
mov eax [esi+50h] +
mov [ebp+var_5C] eax +
jz loc_446EA0  +
imul eax [ebp+arg_0] +
mov eax ds:dword_485600[eax] +
test eax eax +
jz loc_446F50  +
mov eax ds:dword_481078 +
mov [ebx] eax +
mov eax ds:dword_48107C +
mov [ebx+4] eax +
mov eax ds:dword_481080 +
mov [ebx+8] eax +
mov eax ds:dword_481084 +
mov [ebx+0Ch] eax +
mov eax ds:dword_481088 +
mov [ebx+10h] eax +
mov eax ds:dword_48108C +
mov [ebx+14h] eax +
mov eax [esi+40h] +
sub eax 8 +
cmp eax 1000h +
mov [ebp+var_60] eax +
ja loc_446F42  +
mov edx 3 +
mov eax edi +
call sub_446C50  +
test eax eax +
mov [ebp+var_34] eax +
js loc_446EB0  +
mov [esp+88h+var_78] eax +
mov [esp+88h+var_7C] offset aWillUseInterfa +
mov [esp+88h+var_80] offset aWinusbx_subm_0 +
mov [esp+88h+var_84] 4 +
mov [esp+88h+var_88] 0 +
call sub_43E390  +
mov eax [ebp+var_34] +
mov edx [edi+eax*8+20h] +
lea eax [ebp+var_58] +
mov [esp+88h+var_88] eax +
mov [esp+88h+var_78] 0 +
mov [esp+88h+var_7C] 0 +
mov [esp+88h+var_84] edx +
mov [esp+88h+var_80] 1 +
call sub_44DD00  +
mov ecx [ebp+var_4C] +
mov edx [ebp+var_54] +
mov eax [ebp+var_58] +
mov [ebp+var_24] ecx +
mov ecx [ebp+var_48] +
mov [ebp+var_2C] edx +
mov edx [ebp+var_50] +
test eax eax +
mov [ebp+var_30] eax +
mov [ebp+var_20] ecx +
mov ecx [ebp+var_44] +
mov [ebp+var_28] edx +
mov [ebp+var_1C] ecx +
js loc_446F60  +
mov eax [ebp+var_5C] +
test byte ptr [eax] 60h +
jnz loc_446E14  +
cmp byte ptr [eax+1] 9 +
jz loc_446F20  +
imul eax [ebp+arg_0] +
mov [esp+88h+var_74] 0 +
mov ecx ds:dword_485608[eax] +
mov eax [ebp+var_28] +
mov [esp+88h+var_70] eax +
mov eax [ebp+var_60] +
mov [esp+88h+var_78] eax +
mov eax [esi+50h] +
add eax 8 +
mov [esp+88h+var_7C] eax +
mov eax [ebp+var_5C] +
mov edx [eax+4] +
mov eax [eax] +
mov [esp+88h+var_80] edx +
mov [esp+88h+var_84] eax +
mov eax [ebp+var_2C] +
mov [esp+88h+var_88] eax +
call ecx  +
sub esp 1Ch +
test eax eax +
jz loc_446ED0  +
mov eax [ebp+var_28] +
mov edi [ebp+var_60] +
mov dword ptr [eax] 104h +
mov [eax+4] edi +
mov eax [ebp+var_30] +
mov [ebx] eax +
mov eax [ebp+var_2C] +
mov [ebx+4] eax +
mov eax [ebp+var_28] +
mov [ebx+8] eax +
mov eax [ebp+var_24] +
mov [ebx+0Ch] eax +
mov eax [ebp+var_20] +
mov [ebx+10h] eax +
mov eax [ebp+var_1C] +
mov [ebx+14h] eax +
mov eax [ebp+var_34] +
mov [ebx+18h] al +
xor eax eax +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebp+var_64] +
mov eax [eax+50h] +
mov [ebp+arg_0] eax +
jmp loc_446D14  +
lea eax [esi+30h] +
mov ecx 3 +
lea edx [ebp+var_34] +
call sub_446250  +
test eax eax +
jnz loc_446F6A  +
mov eax [ebp+var_34] +
jmp loc_446D80  +
call ds:GetLastError  +
cmp eax 3E5h +
jz loc_446E6C  +
xor eax eax +
call sub_442BB0  +
mov [esp+0A4h+var_98] offset aControltransfe +
mov [esp+0A4h+var_9C] offset aWinusbx_subm_0 +
mov [esp+0A4h+var_A0] 2 +
mov [esp+0A4h+var_94] eax +
mov eax [ebp+var_68] +
mov [esp+0A4h+var_A4] eax +
call sub_43E390  +
lea eax [ebp+var_30] +
mov [esp+0A4h+var_A4] eax +
call sub_44DFA0  +
mov eax 0FFFFFFFFh +
jmp loc_446E97  +
mov eax [ebp+var_64] +
mov edi [ebp+var_5C] +
movzx eax byte ptr [eax+42h] +
cmp [edi+2] ax +
jnz loc_446F74  +
mov dword ptr [edx] 104h +
mov dword ptr [edx+4] 0 +
jmp loc_446E6C  +
mov eax 0FFFFFFFEh +
jmp loc_446E97  +
mov eax 0FFFFFFFDh +
jmp loc_446E97  +
mov eax 0FFFFFFF5h +
jmp loc_446E97  +
mov eax 0FFFFFFFBh +
jmp loc_446E97  +
mov eax [ebp+var_68] +
mov [esp+88h+var_7C] offset aCannotSetConfi +
mov [esp+88h+var_80] offset aWinusbx_subm_0 +
mov [esp+88h+var_84] 2 +
mov [esp+88h+var_88] eax +
call sub_43E390  +
lea eax [ebp+var_30] +
mov [esp+88h+var_88] eax +
call sub_44DFA0  +
mov eax 0FFFFFFFEh +
jmp loc_446E97  +
***
push edi  +
push esi  +
push ebx  +
sub esp 5Ch +
mov edi [ebp+arg_4] +
mov eax [edi+30h] +
mov ebx [edi+50h] +
mov esi [eax+10h] +
mov eax [esi+8] +
mov [ebp+var_30] eax +
movzx eax byte ptr [ebx] +
and eax 1Fh +
cmp al 1 +
jz loc_4471D0  +
cmp al 2 +
jz loc_4470C1  +
xor edx edx +
lea eax [esi+54h] +
mov [ebp+arg_4] edi +
mov edi edx +
mov [ebp+var_2C] eax +
mov ebx [ebp+var_2C] +
xor esi esi +
mov edx [ebx] +
test edx edx +
jz loc_447076  +
test edi edi +
jz loc_447047  +
mov [esp+68h+var_58] esi +
mov [esp+68h+var_5C] offset aUsingInterface +
mov [esp+68h+var_60] offset aComposite_su_1 +
mov [esp+68h+var_64] 4 +
mov [esp+68h+var_68] 0 +
call sub_43E390  +
mov eax [ebx+4] +
mov edx [ebx+8] +
mov ecx [ebp+arg_4] +
mov eax [eax+40h] +
mov [esp+68h+var_68] edx +
mov [esp+68h+var_64] ecx +
call eax  +
cmp eax 0FFFFFFF4h +
jz loc_447076  +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx+14h] +
test eax eax +
jz loc_446FFD  +
mov [esp+68h+var_58] esi +
mov [esp+68h+var_5C] offset aTryingToSkipRe +
mov [esp+68h+var_60] offset aComposite_su_1 +
mov [esp+68h+var_64] 4 +
mov [esp+68h+var_68] 0 +
call sub_43E390  +
add esi 1 +
add ebx 18h +
cmp esi 20h +
jnz loc_446FF3  +
add edi 1 +
cmp edi 2 +
jnz loc_446FEE  +
mov eax [ebp+var_30] +
mov [esp+68h+var_5C] offset aNoLibusbSuppor +
mov [esp+68h+var_60] offset aComposite_su_1 +
mov [esp+68h+var_64] 1 +
mov [esp+68h+var_68] eax +
call sub_43E390  +
lea esp [ebp-0Ch] +
mov eax 0FFFFFFFBh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
lea eax [ebp+var_1C] +
mov [esp+68h+var_60] eax +
movzx eax byte ptr [esi+42h] +
mov [esp+68h+var_68] esi +
sub eax 1 +
movzx eax al +
mov [esp+68h+var_64] eax +
call sub_440C00  +
sub esp 0Ch +
test eax eax +
jnz loc_446FE1  +
movzx eax byte ptr [ebx+4] +
mov ecx eax +
mov [ebp+var_49] al +
mov eax [ebp+var_1C] +
movzx edx byte ptr [eax+4] +
test edx edx +
mov [ebp+var_48] edx +
jz loc_44718E  +
mov eax [eax+0Ch] +
mov [ebp+var_40] esi +
mov esi ecx +
mov [ebp+var_44] 0 +
mov [ebp+arg_4] edi +
mov [ebp+var_38] eax +
mov ecx [ebp+var_38] +
mov eax [ecx+4] +
test eax eax +
mov [ebp+var_3C] eax +
jle loc_447178  +
mov edi [ecx] +
mov [ebp+var_34] 0 +
movzx ebx byte ptr [edi+4] +
test bl bl +
jz loc_447169  +
mov edx [edi+0Ch] +
mov eax esi +
cmp al [edx+2] +
jz loc_447240  +
sub ebx 1 +
xor eax eax +
mov [ebp+var_2C] ebx +
jmp loc_447164  +
movzx ecx byte ptr [edx+16h] +
mov ebx esi +
add eax 1 +
add edx 14h +
cmp bl cl +
jz loc_447240  +
cmp eax [ebp+var_2C] +
jnz loc_447150  +
add [ebp+var_34] 1 +
add edi 18h +
mov eax [ebp+var_3C] +
cmp [ebp+var_34] eax +
jnz loc_44712F  +
add [ebp+var_44] 1 +
mov eax [ebp+var_44] +
add [ebp+var_38] 8 +
cmp [ebp+var_48] eax +
jg loc_447119  +
mov esi [ebp+var_40] +
mov edi [ebp+arg_4] +
movzx eax [ebp+var_49] +
mov ebx 0FFFFFFFBh +
mov [esp+68h+var_5C] offset aEndpoint02xNot +
mov [esp+68h+var_60] offset aGet_interface_ +
mov [esp+68h+var_64] 4 +
mov [esp+68h+var_58] eax +
mov [esp+68h+var_68] 0 +
call sub_43E390  +
mov eax 0FFFFFFFBh +
jmp loc_44727C  +
movzx ebx byte ptr [ebx+4] +
mov eax ebx +
cmp eax 1Fh +
ja loc_446FE1  +
mov [esp+68h+var_58] ebx +
mov [esp+68h+var_5C] offset aAttemptingCont +
mov [esp+68h+var_60] offset aComposite_su_1 +
mov [esp+68h+var_64] 4 +
mov [esp+68h+var_68] 0 +
call sub_43E390  +
lea eax [ebx+ebx*2] +
lea eax [esi+eax*8] +
mov ecx [eax+54h] +
test ecx ecx +
jz loc_446FE1  +
mov edx [eax+58h] +
mov eax [eax+5Ch] +
mov edx [edx+40h] +
mov [esp+68h+var_64] edi +
mov [esp+68h+var_68] eax +
call edx  +
mov edx eax +
xor eax eax +
test edx edx +
jnz loc_446FE1  +
jmp loc_44703F  +
mov eax edi +
mov esi [ebp+var_40] +
mov ebx eax +
movzx eax byte ptr [eax+2] +
mov [esp+68h+var_5C] offset aFoundEndpoint0 +
mov edi [ebp+arg_4] +
mov [esp+68h+var_60] offset aGet_interface_ +
mov [esp+68h+var_64] 4 +
mov [esp+68h+var_58] eax +
mov [esp+68h+var_68] 0 +
call sub_43E390  +
movzx ebx byte ptr [ebx+2] +
mov eax ebx +
mov edx [ebp+var_1C] +
mov [ebp+var_2C] eax +
mov [esp+68h+var_68] edx +
call sub_440EE0  +
mov eax [ebp+var_2C] +
sub esp 4 +
jmp loc_4471D6  +
***
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [ebp+arg_0] +
mov ebx [ebp+arg_4] +
test eax eax +
jz loc_447340  +
cmp eax 1 +
jnz loc_447330  +
lea eax [ebp+var_20] +
mov [esp+48h+var_48] eax +
call ds:GetSystemTimeAsFileTime  +
mov eax [ebp+var_20] +
mov edx [ebp+var_1C] +
sub esp 4 +
add eax 2AC18000h +
adc edx 0FE624E21h +
mov esi eax +
mov [esp+48h+var_40] 989680h +
mov edi edx +
mov [esp+48h+var_3C] 0 +
mov [esp+48h+var_48] eax +
mov [esp+48h+var_44] edx +
call sub_458110  +
mov [ebx] eax +
mov [esp+48h+var_40] 989680h +
mov [esp+48h+var_3C] 0 +
mov [esp+48h+var_48] esi +
mov [esp+48h+var_44] edi +
call sub_458220  +
imul eax eax +
mov [ebx+4] eax +
xor eax eax +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
lea esp [ebp-0Ch] +
mov eax 0FFFFFFFEh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ds:dword_4854B0 +
test eax eax +
jz loc_4472BC  +
mov [ebp+var_20] ebx +
mov [esp+48h+var_3C] 0 +
mov [esp+48h+var_40] 0 +
mov [esp+48h+var_44] 0 +
mov [esp+48h+var_48] 0 +
call ds:CreateEventA  +
sub esp 10h +
test eax eax +
mov [ebp+var_1C] eax +
jz loc_447468  +
lea eax [ebp+var_20] +
mov [esp+48h+var_3C] eax +
mov eax ds:dword_4854AC +
mov [esp+48h+var_40] 0 +
mov [esp+48h+var_44] 401h +
mov [esp+48h+var_48] eax +
call ds:dword_485758  +
sub esp 10h +
test eax eax +
jz loc_447472  +
mov esi ds:WaitForSingleObject +
mov eax [ebp+var_1C] +
mov [esp+58h+var_54] 64h +
mov [esp+58h+var_58] eax +
call esi  +
sub esp 8 +
cmp eax 102h +
mov ebx eax +
jz loc_4473F3  +
cmp eax 0FFFFFFFFh +
jz loc_447420  +
mov eax [ebp+var_1C] +
mov [esp+58h+var_58] eax +
call ds:CloseHandle  +
sub esp 4 +
test ebx ebx +
jz loc_447320  +
jmp loc_44745E  +
mov [esp+58h+var_4C] offset aCouldNotObtain +
mov [esp+58h+var_50] offset aWindows_cloc_0 +
mov [esp+58h+var_54] 4 +
mov [esp+58h+var_58] 0 +
call sub_43E390  +
jmp loc_4473B9  +
xor eax eax +
call sub_442BB0  +
mov [esp+58h+var_4C] offset aWaitforsingleo +
mov [esp+58h+var_48] eax +
mov [esp+58h+var_50] offset aWindows_cloc_0 +
mov [esp+58h+var_54] 1 +
mov [esp+58h+var_58] 0 +
call sub_43E390  +
mov eax [ebp+var_1C] +
mov [esp+58h+var_58] eax +
call ds:CloseHandle  +
sub esp 4 +
mov eax 0FFFFFF9Dh +
jmp loc_447322  +
mov eax 0FFFFFFF5h +
jmp loc_447322  +
call sub_442BB0  +
mov [esp+58h+var_4C] offset aPostthreadmess +
mov [esp+58h+var_48] eax +
jmp loc_447433  +
***
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [ebp+arg_0] +
movzx eax byte ptr [ebx+36h] +
cmp al 4 +
ja loc_447570  +
jmp ds:off_47EBE4[eax*4]  +
***
add esp 2Ch +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
cmp byte ptr [ebx+35h] 0 +
mov eax [ebx+30h] +
mov edi [ebx] +
mov eax [eax+10h] +
mov ecx [eax+8] +
mov eax [eax+48h] +
mov [ebp-1Ch] ecx +
mov eax [eax+3Ch] +
mov [esp-3Ch+arg_3C] ebx +
mov [esp-3Ch+arg_38] 0FFFFFFFFh +
call eax  +
test eax eax +
mov esi eax +
jnz loc_4474B5  +
movsx eax byte ptr [ebx+35h] +
lea edx [edi+edi*2] +
mov edx [ebx+edx*4+58h] +
mov ecx [ebp-1Ch] +
sar eax 1Fh +
and eax 0FFFFFFFDh +
add eax 4 +
mov [esp-3Ch+arg_40] eax +
mov [esp-3Ch+arg_3C] edx +
mov [esp-3Ch+arg_38] ecx +
call sub_450330  +
add esp 2Ch +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [ebx+30h] +
mov edi [ebx] +
mov eax [eax+10h] +
mov esi [eax+8] +
mov eax [eax+48h] +
mov eax [eax+40h] +
mov [esp+arg_0] ebx +
mov dword ptr [esp+0] 0FFFFFFFFh +
call eax  +
test eax eax +
mov edx eax +
jz loc_4475B0  +
mov esi edx +
add esp 2Ch +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edx [ebx+30h] +
mov esi 0FFFFFFFEh +
mov edx [edx+10h] +
mov edx [edx+8] +
mov [esp-3Ch+arg_48] eax +
mov [esp-3Ch+arg_44] offset aUnknownEndpoin +
mov [esp-3Ch+arg_40] offset aWindows_submit +
mov [esp-3Ch+arg_3C] 1 +
mov [esp-3Ch+arg_38] edx +
call sub_43E390  +
add esp 2Ch +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [ebp-1Ch] eax +
lea eax [edi+edi*2] +
mov eax [ebx+eax*4+58h] +
mov [esp+0] esi +
mov [esp+arg_4] 1 +
mov [esp+arg_0] eax +
call sub_450330  +
mov edx [ebp-1Ch] +
mov esi edx +
jmp loc_447566  +
***
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov edi [ebp+arg_0] +
mov ebx [ebp+arg_4] +
mov esi [edi+10h] +
lea eax [ebx+ebx*2] +
lea eax [esi+eax*8] +
mov edx [eax+64h] +
mov [ebp+var_1C] eax +
test edx edx +
jz loc_447614  +
mov [esp+28h+var_28] edx +
call free  +
mov eax [ebp+var_1C] +
mov dword ptr [eax+64h] 0 +
lea eax [ebx+ebx*2] +
mov byte ptr [esi+eax*8+60h] 0 +
mov eax [esi+48h] +
mov eax [eax+24h] +
mov [esp+28h+var_20] ebx +
mov [esp+28h+var_24] edi +
mov [esp+28h+var_28] 0FFFFFFFFh +
call eax  +
test eax eax +
jz loc_447640  +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add esp 1Ch +
mov edx ebx +
mov eax edi +
xor ecx ecx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp sub_443C70  +
***
push esi  +
push ebx  +
sub esp 110h +
test ax ax +
mov esi [ebp+arg_4] +
mov [ebp+var_108] 6 +
mov byte ptr [ebp-107h] 0A0h +
mov [ebp+var_106] 0FFh +
mov [ebp+var_105] 9 +
mov [ebp+var_104] 1 +
mov [ebp+var_103] 0A1h +
mov [ebp+var_102] 1 +
jz loc_447822  +
sub eax 1 +
mov ebx 14h +
mov [ebp+var_F8] al +
mov eax 13h +
mov [ebp+var_101] 9 +
mov [ebp+var_100] 1 +
mov [ebp+var_FF] 15h +
mov [ebp+var_FE] 0 +
mov [ebp+var_FD] 25h +
mov [ebp+var_FC] 0FFh +
mov [ebp+var_FB] 75h +
mov [ebp+var_FA] 8 +
mov [ebp+var_F9] 95h +
mov [ebp+var_F7] 81h +
mov [ebp+var_F6] 0 +
test dx dx +
jz loc_447775  +
sub edx 1 +
mov [ebp+eax+var_108] 9 +
mov [ebp+ebx+var_108] 2 +
lea ebx [eax+0Dh] +
mov [ebp+eax+var_106] 15h +
mov [ebp+eax+var_105] 0 +
mov [ebp+eax+var_104] 25h +
mov [ebp+eax+var_103] 0FFh +
mov [ebp+eax+var_102] 75h +
mov [ebp+eax+var_101] 8 +
mov [ebp+eax+var_100] 95h +
mov [ebp+eax+var_FF] dl +
mov [ebp+eax+var_FE] 91h +
mov [ebp+eax+var_FD] 0 +
add eax 0Ch +
test cx cx +
jz loc_4477EA  +
sub ecx 1 +
mov [ebp+eax+var_108] 9 +
mov [ebp+ebx+var_108] 3 +
lea ebx [eax+0Eh] +
mov [ebp+eax+var_106] 15h +
mov [ebp+eax+var_105] 0 +
mov [ebp+eax+var_104] 25h +
mov [ebp+eax+var_103] 0FFh +
mov [ebp+eax+var_102] 75h +
mov [ebp+eax+var_101] 8 +
mov [ebp+eax+var_100] 95h +
mov [ebp+eax+var_FF] cl +
mov [ebp+eax+var_FE] 0B2h +
mov [ebp+eax+var_FD] 2 +
mov [ebp+eax+var_FC] 1 +
add eax 0Dh +
mov [ebp+eax+var_108] 0C0h +
mov eax [esi] +
cmp eax ebx +
jbe loc_447831  +
mov [esi] ebx +
lea eax [ebp+var_108] +
mov [esp+118h+var_114] eax +
mov eax [ebp+arg_0] +
mov [esp+118h+var_110] ebx +
mov [esp+118h+var_118] eax +
call memcpy  +
add esp 110h +
mov eax 1 +
pop ebx  +
pop esi  +
pop ebp  +
retn   +
mov ebx 8 +
mov eax 7 +
jmp loc_447708  +
mov ebx eax +
jmp loc_4477FA  +
***
push edi  +
mov edi edx +
push esi  +
mov esi ecx +
push ebx  +
mov ebx eax +
sub esp 12Ch +
movzx edx word ptr [ebx+16h] +
movzx ecx word ptr [ebx+18h] +
lea ebx [ebp+var_128] +
movzx eax word ptr [eax+14h] +
mov [esp+138h+var_134] ebx +
lea ebx [ebp+var_118] +
mov [esp+138h+var_138] ebx +
mov [ebp+var_128] 100h +
call sub_447660  +
mov eax 110h +
mov [ebp+var_120] ax +
mov eax [ebp+var_128] +
mov [ebp+var_122] 9 +
mov byte ptr [ebp-121h] 21h +
mov [ebp+var_11E] 0 +
mov [ebp+var_11A] ax +
mov eax [esi] +
mov [ebp+var_11D] 1 +
mov [ebp+var_11C] 22h +
cmp eax 9 +
jbe loc_4478CE  +
mov dword ptr [esi] 9 +
mov eax 9 +
lea edx [ebp+var_122] +
mov [esp+138h+var_138] edi +
mov [esp+138h+var_130] eax +
mov [esp+138h+var_134] edx +
call memcpy  +
add esp 12Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push edi  +
push esi  +
mov esi edx +
push ebx  +
sub esp 0ACh +
test edx edx +
jz loc_447953  +
xor ebx ebx +
lea edi [ebp+var_9C] +
jmp loc_44792D  +
add ebx 1 +
mov eax [ebp+var_9C] +
cmp ebx esi +
jz loc_447953  +
mov [esp+0B8h+var_B0] 0 +
mov [esp+0B8h+var_B4] eax +
mov [esp+0B8h+var_B8] edi +
call ds:dword_485754  +
sub esp 0Ch +
test eax eax +
jz loc_447920  +
lea esp [ebp-0Ch] +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
lea ebx [ebp+var_98] +
mov [esp+0B8h+var_AC] 0 +
mov [esp+0B8h+var_B0] 80h +
mov [esp+0B8h+var_B4] ebx +
mov [esp+0B8h+var_B8] eax +
call ds:dword_485748  +
sub esp 10h +
test eax eax +
jnz loc_447949  +
mov eax ebx +
call sub_444130  +
test eax eax +
mov ebx eax +
jz loc_447949  +
call sub_444270  +
mov [esp+0C8h+var_C8] ebx +
mov esi eax +
call free  +
lea esp [ebp-0Ch] +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov ebp esp +
push edi  +
push esi  +
push ebx  +
sub esp 67Ch +
mov [ebp+var_5DC] offset unk_47EBF8 +
mov [ebp+var_5D8] offset aNusb3 +
mov [ebp+var_5D4] offset aIusb3 +
mov [ebp+eax+var_5A8] 0 +
add eax 4 +
cmp eax 1Ch +
jb loc_4479DC  +
lea ebx [ebp+var_5D0] +
mov [ebp+var_43C] offset unk_480DC0 +
mov [ebp+var_438] offset unk_480DA0 +
mov [ebp+var_434] 0 +
mov [ebp+var_430] offset unk_480DB0 +
mov [esp+688h+var_688] ebx +
call ds:dword_485740  +
mov [ebp+var_42C] ebx +
sub esp 4 +
mov [esp+68Ch+var_688] 4 +
mov [esp+68Ch+var_68C] 40h +
call calloc  +
test eax eax +
mov [ebp+var_640] eax +
jz loc_44990C  +
mov [ebp+var_61C] 0 +
mov [ebp+var_60C] 0 +
mov [ebp+var_648] 0 +
mov [ebp+var_650] 40h +
mov [ebp+var_644] 5 +
mov [ebp+var_608] 0 +
mov eax [ebp+var_61C] +
mov [ebp+var_64C] 1 +
mov [ebp+var_604] 0 +
mov [ebp+var_628] 0 +
mov ecx eax +
sub eax 1 +
shl [ebp+var_64C] cl +
and [ebp+var_64C] 0Bh +
mov [ebp+var_63C] eax +
mov eax [ebp+var_628] +
test eax eax +
jnz loc_447D58  +
cmp [ebp+var_604] 0FFh +
jz loc_448DEA  +
cmp [ebp+var_61C] 2 +
jz loc_447DF1  +
mov esi [ebp+var_604] +
mov eax [ebp+var_61C] +
test esi esi +
mov ebx [ebp+eax*4+var_43C] +
jz loc_448565  +
lea eax [ebp+var_5A8] +
mov [esp+68Ch+var_684] eax +
mov eax [ebp+var_604] +
mov [ebp+var_5A8] 1Ch +
mov [esp+68Ch+var_688] eax +
mov eax [ebp+var_60C] +
mov [esp+68Ch+var_68C] eax +
call ds:dword_485784  +
sub esp 0Ch +
test eax eax +
jz loc_448E28  +
lea eax [ebp+var_33C] +
mov [esp+698h+var_688] eax +
mov eax [ebp+var_604] +
mov [ebp+var_33C] 1Ch +
mov [esp+698h+var_690] ebx +
mov [esp+698h+var_694] 0 +
mov [esp+698h+var_68C] eax +
mov eax [ebp+var_60C] +
mov [esp+698h+var_698] eax +
call ds:dword_485780  +
sub esp 14h +
test eax eax +
jz loc_448A95  +
lea eax [ebp+var_33C] +
mov [esp+6ACh+var_6A8] eax +
mov eax [ebp+var_60C] +
lea ebx [ebp+var_5C0] +
mov [esp+6ACh+var_698] 0 +
mov [esp+6ACh+var_69C] ebx +
mov [esp+6ACh+var_6A0] 0 +
mov [esp+6ACh+var_6A4] 0 +
mov [esp+6ACh+var_6AC] eax +
call ds:dword_48577C  +
sub esp 18h +
test eax eax +
jnz loc_448AC8  +
call ds:GetLastError  +
cmp eax 7Ah +
jnz loc_4487C9  +
mov esi [ebp+var_5C0] +
mov [esp+6C4h+var_6C0] 1 +
mov [esp+6C4h+var_6C4] esi +
call calloc  +
test eax eax +
mov [ebp+var_610] eax +
jz loc_449368  +
mov eax [ebp+var_610] +
mov dword ptr [eax] 5 +
mov [esp+6C4h+var_6BC] eax +
lea eax [ebp+var_33C] +
mov [esp+6C4h+var_6C0] eax +
mov eax [ebp+var_60C] +
mov [esp+6C4h+var_6B0] 0 +
mov [esp+6C4h+var_6B4] ebx +
mov [esp+6C4h+var_6B8] esi +
mov [esp+6C4h+var_6C4] eax +
call ds:dword_48577C  +
sub esp 18h +
test eax eax +
jnz loc_447C7A  +
call sub_442BB0  +
mov [esp+6DCh+var_6D0] offset aCouldNotAcce_1 +
mov [esp+6DCh+var_6D4] offset aGet_interfac_1 +
mov [esp+6DCh+var_6D8] 1 +
mov [esp+6DCh+var_6C8] eax +
mov eax [ebp+var_604] +
mov [esp+6DCh+var_6CC] eax +
mov eax [ebp+arg_0] +
mov [esp+6DCh+var_6DC] eax +
call sub_43E390  +
mov eax [ebp+var_610] +
lea ebx [eax+4] +
mov eax ebx +
call sub_444130  +
test eax eax +
mov [ebp+var_614] eax +
jz loc_448AF0  +
lea eax [ebp+var_53C] +
mov [esp+6DCh+var_6D8] eax +
mov eax [ebp+var_594] +
mov [esp+6DCh+var_6D0] 0 +
mov [esp+6DCh+var_6D4] 80h +
mov [esp+6DCh+var_6DC] eax +
call ds:dword_485748  +
sub esp 10h +
test eax eax +
jz loc_447F03  +
mov eax [ebp+var_594] +
mov [esp+6ECh+var_6E0] offset aCouldNotReadTh +
mov [esp+6ECh+var_6E4] offset aWindows_get_de +
mov [esp+6ECh+var_6E8] 2 +
mov [esp+6ECh+var_6DC] eax +
mov eax [ebp+arg_0] +
mov [esp+6ECh+var_6EC] eax +
call sub_43E390  +
mov [ebp+var_618] 0 +
mov ecx [ebp+var_610] +
add [ebp+var_604] 1 +
test ecx ecx +
jz loc_447D22  +
mov eax [ebp+var_610] +
mov [esp+6ECh+var_6EC] eax +
call free  +
mov eax [ebp+var_614] +
test eax eax +
jz loc_447D34  +
mov [esp+6ECh+var_6EC] eax +
call free  +
mov eax [ebp+var_618] +
test eax eax +
jz loc_447AC9  +
mov [esp+6ECh+var_6EC] eax +
call free  +
mov eax [ebp+var_628] +
test eax eax +
jz loc_447AD7  +
cmp [ebp+var_644] 5 +
jz loc_447D95  +
mov esi [ebp+var_644] +
mov ebx 5 +
lea esi [esi+0] +
mov eax [ebp+ebx*4+var_43C] +
test eax eax +
jz loc_447D8E  +
mov [esp+6ECh+var_6EC] eax +
call free  +
mov [ebp+ebx*4+var_43C] 0 +
add ebx 1 +
cmp ebx esi +
jnz loc_447D70  +
mov edx [ebp+var_640] +
test edx edx +
jz loc_447DE3  +
mov eax [ebp+var_648] +
xor ebx ebx +
mov esi [ebp+var_640] +
test eax eax +
jz loc_447DD5  +
mov eax [esi+ebx*4] +
test eax eax +
jz loc_447DCA  +
mov [esp+6ECh+var_6EC] eax +
call sub_43E740  +
mov dword ptr [esi+ebx*4] 0 +
sub esp 4 +
add ebx 1 +
cmp ebx [ebp+var_648] +
jnz loc_447DB1  +
mov eax [ebp+var_640] +
mov [esp+6ECh+var_6EC] eax +
call free  +
mov eax [ebp+var_628] +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp [ebp+var_608] 2 +
ja loc_448660  +
mov edi [ebp+var_608] +
mov esi [ebp+var_604] +
mov ebx [ebp+var_60C] +
test esi esi +
mov eax [ebp+edi*4+var_5DC] +
jnz loc_447E4A  +
mov [esp+68Ch+var_680] 6 +
mov [esp+68Ch+var_684] 0 +
mov [esp+68Ch+var_688] eax +
mov [esp+68Ch+var_68C] 0 +
call ds:dword_485788  +
sub esp 10h +
cmp eax 0FFFFFFFFh +
mov ebx eax +
jz loc_447EEB  +
lea eax [ebp+var_5A8] +
mov [ebp+var_5A8] 1Ch +
mov [esp+69Ch+var_694] eax +
mov [esp+69Ch+var_698] esi +
mov [esp+69Ch+var_69C] ebx +
call ds:dword_485784  +
sub esp 0Ch +
test eax eax +
jz loc_447EA0  +
mov [ebp+var_608] edi +
mov [ebp+var_604] esi +
mov [ebp+var_60C] ebx +
mov [ebp+var_614] 0 +
mov [ebp+var_610] 0 +
jmp loc_447C98  +
call ds:GetLastError  +
cmp eax 103h +
jz loc_447EDF  +
xor eax eax +
call sub_442BB0  +
mov [esp+6A8h+var_698] esi +
mov [esp+6A8h+var_69C] offset aCouldNotObta_1 +
mov [esp+6A8h+var_6A0] offset aGet_devinfo_da +
mov [esp+6A8h+var_6A4] 1 +
mov [esp+6A8h+var_694] eax +
mov eax [ebp+arg_0] +
mov [esp+6A8h+var_6A8] eax +
call sub_43E390  +
mov [esp+6A8h+var_6A8] ebx +
call ds:dword_485778  +
sub esp 4 +
add edi 1 +
cmp edi 3 +
jz loc_448650  +
xor esi esi +
mov ebx 0FFFFFFFFh +
jmp loc_447E10  +
lea eax [ebp+var_53C] +
call sub_444130  +
test eax eax +
mov [ebp+var_618] eax +
jz loc_448B2D  +
cmp [ebp+var_63C] 1 +
mov [ebp+var_5EC] 0 +
jbe loc_4489B3  +
mov eax [ebp+var_61C] +
cmp eax 2 +
jz loc_448699  +
cmp eax 4 +
jz loc_448680  +
test eax eax +
jz loc_44854C  +
lea eax [ebp+var_5F4] +
mov [esp+6ECh+var_6D4] eax +
lea eax [ebp+var_5E8] +
mov [esp+6ECh+var_6DC] eax +
lea eax [ebp+var_5F0] +
mov [esp+6ECh+var_6E0] eax +
lea eax [ebp+var_5A8] +
mov [esp+6ECh+var_6E8] eax +
mov eax [ebp+var_60C] +
mov [esp+6ECh+var_6D8] 4 +
mov [esp+6ECh+var_6E4] 22h +
mov [esp+6ECh+var_6EC] eax +
call ds:dword_485770  +
sub esp 1Ch +
test eax eax +
jz loc_447FAE  +
cmp [ebp+var_5F4] 4 +
jz loc_448E96  +
xor eax eax +
call sub_442BB0  +
mov [esp+708h+var_6FC] offset aCouldNotDetect +
mov [esp+708h+var_700] offset aWindows_get_de +
mov [esp+708h+var_704] 2 +
mov [esp+708h+var_6F4] eax +
mov eax [ebp+var_618] +
mov [esp+708h+var_6F8] eax +
mov eax [ebp+arg_0] +
mov [esp+708h+var_708] eax +
call sub_43E390  +
lea eax [ebp+var_5E0] +
mov esi offset unk_4612A0 +
mov ecx 0C9h +
lea edi [ebp+var_33C] +
lea ebx [ebp+var_5C0] +
movs   +
lea esi [ebp+var_33C] +
xor edi edi +
mov [ebp+var_5FC] eax +
mov eax [esi+104h] +
mov edx [ebp+var_5FC] +
mov [esp+708h+var_6F4] 100h +
mov [esp+708h+var_6F8] esi +
mov [esp+708h+var_700] eax +
lea eax [ebp+var_5A8] +
mov [esp+708h+var_704] eax +
mov eax [ebp+var_60C] +
mov [esp+708h+var_6F0] edx +
mov [esp+708h+var_6FC] ebx +
mov [esp+708h+var_708] eax +
call ds:dword_485770  +
sub esp 1Ch +
test eax eax +
jz loc_448818  +
cmp dword ptr [esi+104h] 4 +
jz loc_448A4B  +
mov eax 1 +
jmp loc_448078  +
mov byte ptr [esi+eax-1] 3Bh +
add eax 1 +
cmp byte ptr [esi+eax-1] 0 +
jnz loc_448075  +
cmp byte ptr [esi+eax] 0 +
jnz loc_448070  +
mov eax [esi+108h] +
mov [esp+724h+var_710] esi +
mov [esp+724h+var_718] offset aSSS +
mov [esp+724h+var_71C] offset aGet_api_type +
mov [esp+724h+var_714] eax +
mov [esp+724h+var_720] 4 +
mov [esp+724h+var_724] 0 +
call sub_43E390  +
add edi 1 +
add esi 10Ch +
cmp edi 3 +
jnz loc_448012  +
mov [ebp+var_620] offset unk_480B1C +
mov [ebp+var_62C] 1 +
lea eax [ebp+var_33C] +
mov [ebp+var_630] eax +
mov [ebp+var_638] 0 +
mov edx [ebp+var_630] +
mov byte ptr [ebp+var_5E4] 3Bh +
mov byte ptr [ebp+var_5E4+1] 0 +
mov ecx [edx] +
add edx 4 +
lea eax [ecx-1010101h] +
not ecx  +
and eax ecx +
and eax 80808080h +
jz loc_448107  +
mov ecx eax +
mov edi [ebp+var_630] +
shr ecx 10h +
test eax 8080h +
cmovz eax ecx +
lea ecx [edx+2] +
cmovz edx ecx +
add al al +
sbb edx 3 +
sub edx edi +
jz loc_44831E  +
lea ebx [edx+1] +
mov [esp+724h+var_720] 1 +
mov [esp+724h+var_724] ebx +
call calloc  +
test eax eax +
mov [ebp+var_634] eax +
jz loc_44831E  +
mov [esp+724h+var_71C] ebx +
mov ebx eax +
mov [esp+724h+var_720] edi +
mov [esp+724h+var_724] eax +
call memcpy  +
lea eax [ebp+var_5E4] +
mov [esp+724h+var_724] ebx +
mov [esp+724h+var_720] eax +
call strtok  +
test eax eax +
mov ebx eax +
jz loc_448310  +
mov eax [ebp+var_620] +
movzx eax byte ptr [eax] +
mov byte ptr [ebp+var_624] al +
add eax 1 +
mov [ebp+var_600] eax +
cmp byte ptr [ebp+var_624] 0 +
jz loc_4482F0  +
mov eax [ebp+var_620] +
mov esi 1 +
mov edi [eax-4] +
mov eax edi +
mov edi esi +
mov esi eax +
jmp loc_4481DF  +
add edi 1 +
cmp edi [ebp+var_600] +
jz loc_4482F0  +
lea eax [edi-1] +
mov ecx offset aNull +
mov [ebp+var_5FC] eax +
mov eax [esi+edi*4-4] +
mov [esp+724h+var_724] ebx +
test eax eax +
cmovz eax ecx +
mov [esp+724h+var_720] eax +
call ds:_stricmp  +
test eax eax +
jnz loc_4481D0  +
mov eax [ebp+var_634] +
mov [esp+724h+var_724] eax +
call free  +
cmp [ebp+var_62C] 3 +
jz loc_4491E5  +
mov eax [ebp+var_62C] +
lea eax [eax+eax*4] +
shl eax 4 +
mov eax ds:off_480AC4[eax] +
imul edx [ebp+var_638] +
mov [esp+724h+var_710] eax +
mov [esp+724h+var_718] offset aMatchedSNameAg +
mov [esp+724h+var_71C] offset aGet_api_type +
mov edx [ebp+edx+var_234] +
mov [esp+724h+var_720] 4 +
mov [esp+724h+var_724] 0 +
mov [esp+724h+var_714] edx +
call sub_43E390  +
cmp [ebp+var_61C] 3 +
jbe loc_448378  +
mov eax [ebp+var_594] +
mov ebx 1 +
mov edi [ebp+arg_0] +
lea esi [esi+0] +
mov edx ebx +
call sub_447900  +
test eax eax +
jz loc_4482BC  +
mov [esp+724h+var_720] eax +
add ebx 1 +
mov [esp+724h+var_724] edi +
call sub_43DF20  +
test eax eax +
jnz loc_448594  +
test ebx ebx +
mov eax [ebp+var_594] +
jnz loc_448290  +
mov eax [ebp+var_618] +
mov [esp+724h+var_718] offset aUnlistedAncest +
mov [esp+724h+var_71C] offset aWindows_get_de +
mov [esp+724h+var_720] 4 +
mov [esp+724h+var_714] eax +
mov [esp+724h+var_724] 0 +
call sub_43E390  +
jmp loc_447D03  +
lea eax [ebp+var_5E4] +
mov [esp+724h+var_720] eax +
mov [esp+724h+var_724] 0 +
call strtok  +
test eax eax +
mov ebx eax +
jnz loc_4481AA  +
mov eax [ebp+var_634] +
mov [esp+724h+var_724] eax +
call free  +
add [ebp+var_638] 1 +
add [ebp+var_630] 10Ch +
cmp [ebp+var_638] 3 +
jnz loc_4480F3  +
add [ebp+var_62C] 1 +
add [ebp+var_620] 50h +
cmp [ebp+var_62C] 5 +
jnz loc_4480DD  +
cmp [ebp+var_61C] 3 +
mov [ebp+var_5FC] 0FFFFFFFFh +
mov [ebp+var_62C] 0 +
ja loc_44827E  +
mov ebx [ebp+var_64C] +
test ebx ebx +
jz loc_44827E  +
xor ebx ebx +
xor esi esi +
mov eax [ebp+var_618] +
call sub_444270  +
mov [esp+724h+var_720] eax +
mov edi eax +
mov eax [ebp+arg_0] +
mov [esp+724h+var_724] eax +
call sub_43DF20  +
test eax eax +
mov [ebp+var_600] eax +
jz loc_448B5F  +
mov edx [ebp+var_600] +
movzx eax byte ptr [edx+14h] +
mov [esp+724h+var_70C] eax +
movzx eax byte ptr [edx+0Ch] +
mov [esp+724h+var_714] edi +
mov [esp+724h+var_718] offset aFoundExistingD +
mov [esp+724h+var_71C] offset aWindows_get_de +
mov [esp+724h+var_710] eax +
mov [esp+724h+var_720] 4 +
mov [esp+724h+var_724] 0 +
call sub_43E390  +
mov eax [ebp+var_648] +
mov ecx [ebp+var_640] +
mov edi [ebp+var_600] +
lea edx [eax+1] +
cmp edx [ebp+var_650] +
mov [ecx+eax*4] edi +
jnb loc_448E5B  +
mov eax [ebp+var_600] +
mov [ebp+var_648] edx +
lea edi [eax+40h] +
mov eax [ebp+var_61C] +
cmp eax 1 +
jz loc_4485CE  +
jb loc_44895E  +
cmp eax 2 +
jz loc_448864  +
cmp eax 3 +
jz loc_4485CE  +
mov eax [ebx+8] +
movzx eax byte ptr [eax] +
cmp al 4 +
jz loc_449065  +
cmp al 2 +
jz loc_4491F7  +
mov [esp+724h+var_724] esi +
call sub_43E740  +
sub esp 4 +
jmp loc_447D03  +
mov [esp+724h+var_720] 10h +
mov [esp+724h+var_724] 1 +
call calloc  +
test eax eax +
mov ebx eax +
jz loc_449336  +
mov [esp+724h+var_724] esi +
mov [esp+724h+var_720] eax +
call ds:dword_485790  +
movzx edx byte ptr [ebx+0Fh] +
mov eax [ebp+var_644] +
lea esi [eax+1] +
sub esp 8 +
mov [ebp+eax*4+var_43C] ebx +
mov eax [ebx] +
mov [esp+72Ch+var_6FC] edx +
movzx edx byte ptr [ebx+0Eh] +
mov [esp+72Ch+var_700] edx +
movzx edx byte ptr [ebx+0Dh] +
mov [esp+72Ch+var_704] edx +
movzx edx byte ptr [ebx+0Ch] +
mov [esp+72Ch+var_708] edx +
movzx edx byte ptr [ebx+0Bh] +
mov [esp+72Ch+var_70C] edx +
movzx edx byte ptr [ebx+0Ah] +
mov [esp+72Ch+var_710] edx +
movzx edx byte ptr [ebx+9] +
mov [esp+72Ch+var_714] edx +
movzx edx byte ptr [ebx+8] +
mov [esp+72Ch+var_718] edx +
movzx edx word ptr [ebx+6] +
mov [esp+72Ch+var_71C] edx +
movzx edx word ptr [ebx+4] +
mov [esp+72Ch+var_724] eax +
mov [esp+72Ch+var_728] offset a08x04x04x02x02 +
mov [esp+72Ch+var_72C] offset unk_4854C0 +
mov [esp+72Ch+var_720] edx +
call sprintf  +
mov [esp+72Ch+var_71C] offset unk_4854C0 +
mov [esp+72Ch+var_720] offset aExtraGuidS +
mov [esp+72Ch+var_724] offset aWindows_get_de +
mov [esp+72Ch+var_728] 4 +
mov [esp+72Ch+var_72C] 0 +
call sub_43E390  +
mov [ebp+var_644] esi +
mov [ebp+var_5FC] 0FFFFFFFFh +
mov [ebp+var_62C] 0 +
jmp loc_448378  +
mov [esp+68Ch+var_680] 12h +
mov [esp+68Ch+var_684] 0 +
mov [esp+68Ch+var_688] 0 +
mov [esp+68Ch+var_68C] ebx +
call ds:dword_485788  +
sub esp 10h +
mov [ebp+var_60C] eax +
jmp loc_447B0F  +
cmp [ebp+var_61C] 2 +
mov esi eax +
lea ebx [eax+40h] +
jz loc_4489A2  +
cmp [ebp+var_61C] 3 +
jbe loc_44838A  +
mov eax [ebp+var_61C] +
xor edi edi +
mov [ebp+var_600] 0 +
cmp eax 1 +
jnz loc_448434  +
mov eax [edi+0Ch] +
test eax eax +
jnz loc_447D03  +
mov eax [ebp+var_614] +
mov edx [ebp+var_5FC] +
mov [edi+0Ch] eax +
mov eax [ebp+var_62C] +
mov [edi+10h] edx +
lea ebx [eax+eax*4] +
shl ebx 4 +
add ebx offset unk_480AC0 +
cmp eax 1 +
mov [edi+8] ebx +
jl loc_44914F  +
cmp eax 2 +
jle loc_4491D6  +
cmp eax 4 +
jnz loc_44914F  +
mov [esp+724h+var_720] 320h +
mov [esp+724h+var_724] 1 +
call calloc  +
test eax eax +
mov [edi+314h] eax +
jz loc_449AD3  +
mov byte ptr [eax+5] 0 +
mov [ebp+var_614] 0 +
jmp loc_447D03  +
mov [ebp+var_608] edi +
mov [ebp+var_60C] 0FFFFFFFFh +
add [ebp+var_61C] 1 +
mov eax [ebp+var_61C] +
cmp [ebp+var_644] eax +
ja loc_447A8D  +
jmp loc_447D58  +
mov [ebp+var_5FC] 0FFFFFFFFh +
mov [ebp+var_62C] 4 +
jmp loc_44827E  +
lea eax [ebp+var_4BC] +
mov [esp+6ECh+var_6DC] eax +
lea eax [ebp+var_5A8] +
mov [esp+6ECh+var_6E8] eax +
mov eax [ebp+var_60C] +
lea esi [ebp+var_5F4] +
lea ebx [ebp+var_5F0] +
mov [ebp+var_5F4] 80h +
mov [esp+6ECh+var_6D4] esi +
mov [esp+6ECh+var_6D8] 80h +
mov [esp+6ECh+var_6E0] ebx +
mov [esp+6ECh+var_6E4] 9 +
mov [esp+6ECh+var_6EC] eax +
call ds:dword_485770  +
sub esp 1Ch +
test eax eax +
jz loc_448D95  +
lea eax [ebp+var_5A8] +
mov [esp+708h+var_704] eax +
mov eax [ebp+var_60C] +
mov [esp+708h+var_6F4] 20019h +
mov [esp+708h+var_6F8] 1 +
mov [esp+708h+var_6FC] 0 +
mov [esp+708h+var_700] 1 +
mov [esp+708h+var_708] eax +
call ds:dword_485774  +
sub esp 18h +
cmp eax 0FFFFFFFFh +
mov edi eax +
jz loc_44854C  +
mov [esp+720h+var_70C] esi +
lea esi [ebp+var_58C] +
mov [esp+720h+var_714] ebx +
mov [ebp+var_5F4] 50h +
mov [esp+720h+var_710] esi +
mov [esp+720h+var_718] 0 +
mov [esp+720h+var_71C] offset aDeviceinterfac +
mov [esp+720h+var_720] eax +
call ds:dword_485768  +
sub esp 18h +
mov ebx eax +
mov [esp+738h+var_738] edi +
call ds:dword_485764  +
sub esp 4 +
test ebx ebx +
jnz loc_44854C  +
cmp [ebp+var_644] 3Fh +
jbe loc_448472  +
mov eax [ebp+arg_0] +
mov [esp+73Ch+var_730] offset aProgramAsser_9 +
mov [esp+73Ch+var_734] offset aWindows_get_de +
mov [esp+73Ch+var_738] 1 +
mov [esp+73Ch+var_73C] eax +
call sub_43E390  +
mov [ebp+var_628] 0FFFFFFF8h +
jmp loc_447D03  +
xor eax eax +
call sub_442BB0  +
mov [esp+6C4h+var_6B8] offset aCouldNotAccess +
mov [esp+6C4h+var_6B0] eax +
mov eax [ebp+var_604] +
mov [esp+6C4h+var_6B4] eax +
mov eax [ebp+arg_0] +
mov [esp+6C4h+var_6BC] offset aGet_interfac_1 +
mov [esp+6C4h+var_6C0] 1 +
mov [esp+6C4h+var_6C4] eax +
call sub_43E390  +
mov eax [ebp+var_60C] +
mov [esp+6C4h+var_6C4] eax +
call ds:dword_485778  +
sub esp 4 +
jmp loc_448656  +
call ds:GetLastError  +
cmp eax 0Dh +
jz loc_44885C  +
xor eax eax +
call sub_442BB0  +
mov edx [esi+108h] +
mov [esp+724h+var_718] offset aCouldNotAcce_2 +
mov [esp+724h+var_71C] offset aGet_api_type +
mov [esp+724h+var_720] 4 +
mov [esp+724h+var_714] edx +
mov [esp+724h+var_724] 0 +
mov [esp+724h+var_710] eax +
call sub_43E390  +
mov byte ptr [esi] 0 +
jmp loc_4480B7  +
movzx eax byte ptr [ebp+var_5EC] +
test esi esi +
mov edi [ebp+var_594] +
mov [ebp+var_630] eax +
jz loc_4498BE  +
mov eax [ebp+var_600] +
test eax eax +
jz loc_4498BE  +
mov eax [eax+8] +
mov [ebp+var_5FC] eax +
mov eax [esi+48h] +
cmp byte ptr [eax] 1 +
jnz loc_4498CD  +
movzx eax byte ptr [esi+0Ch] +
test al al +
jnz loc_448904  +
mov [ebp+var_620] esi +
mov esi [ebp+var_5FC] +
mov ebx 2 +
mov edx ebx +
mov eax edi +
call sub_447900  +
test eax eax +
jz loc_4488F2  +
mov [esp+724h+var_720] eax +
mov [esp+724h+var_724] esi +
call sub_43DF20  +
test eax eax +
jz loc_4488ED  +
cmp byte ptr [eax+0Ch] 0 +
jnz loc_448ECE  +
mov [esp+724h+var_724] eax +
call sub_43E740  +
sub esp 4 +
add ebx 1 +
jnz loc_4488BB  +
mov esi [ebp+var_620] +
movzx eax byte ptr [esi+0Ch] +
test al al +
jz loc_448F26  +
mov ecx [ebp+var_600] +
mov ebx [ebp+var_630] +
mov edx ecx +
mov [ecx+0Ch] al +
mov [edx+0Dh] bl +
movzx eax byte ptr [esi+40h] +
mov [edx+41h] bl +
cmp byte ptr [ecx+14h] 0 +
mov [ecx+44h] esi +
lea edx [eax+1] +
mov [ecx+40h] dl +
mov [ecx+10h] esi +
jz loc_448C63  +
mov eax [ebp+arg_4] +
mov edx [ebp+var_600] +
mov eax [eax] +
mov [esp+724h+var_720] edx +
mov [esp+724h+var_724] eax +
call sub_43E3C0  +
test eax eax +
jz loc_448EBF  +
mov edx [ebp+arg_4] +
mov [edx] eax +
jmp loc_447D03  +
movzx eax byte ptr [ebp+var_604] +
mov edx [ebp+var_600] +
add eax 1 +
mov [edx+0Ch] al +
mov eax [ebp+var_614] +
mov byte ptr [edx+14h] 0 +
mov byte ptr [edx+15h] 0 +
mov [ebp+var_614] 0 +
mov dword ptr [edi+8] offset unk_480B10 +
mov dword ptr [edi+10h] 0FFFFFFFFh +
mov byte ptr [edi] 0FFh +
mov [edi+0Ch] eax +
jmp loc_447D03  +
mov eax [eax+48h] +
cmp byte ptr [eax] 1 +
jnz loc_448462  +
jmp loc_44838A  +
lea eax [ebp+var_5F4] +
mov [esp+6ECh+var_6D4] eax +
lea eax [ebp+var_5EC] +
mov [esp+6ECh+var_6DC] eax +
lea eax [ebp+var_5F0] +
mov [esp+6ECh+var_6E0] eax +
lea eax [ebp+var_5A8] +
mov [esp+6ECh+var_6E8] eax +
mov eax [ebp+var_60C] +
mov [esp+6ECh+var_6D8] 4 +
mov [esp+6ECh+var_6E4] 1Ch +
mov [esp+6ECh+var_6EC] eax +
call ds:dword_485770  +
sub esp 1Ch +
test eax eax +
jz loc_448A0E  +
cmp [ebp+var_5F4] 4 +
jz loc_447F33  +
xor eax eax +
call sub_442BB0  +
mov [esp+708h+var_6FC] offset aCouldNotRetr_0 +
mov [esp+708h+var_6F4] eax +
mov eax [ebp+var_618] +
mov [esp+708h+var_6F8] eax +
mov eax [ebp+arg_0] +
mov [esp+708h+var_700] offset aWindows_get_de +
mov [esp+708h+var_704] 2 +
mov [esp+708h+var_708] eax +
call sub_43E390  +
jmp loc_447D03  +
mov edx esi +
mov ecx [edx] +
add edx 4 +
lea eax [ecx-1010101h] +
not ecx  +
and eax ecx +
and eax 80808080h +
jz loc_448A4D  +
mov ecx eax +
shr ecx 10h +
test eax 8080h +
cmovz eax ecx +
lea ecx [edx+2] +
cmovz edx ecx +
add al al +
sbb edx 3 +
imul eax edi +
sub edx esi +
lea ecx [ebp+var_18] +
add eax ecx +
mov byte ptr [edx+eax-323h] 0 +
jmp loc_448067  +
call ds:GetLastError  +
cmp eax 103h +
jz loc_448801  +
xor eax eax +
call sub_442BB0  +
mov [esp+6ACh+var_6A0] offset aCouldNotObta_0 +
mov [esp+6ACh+var_698] eax +
mov eax [ebp+var_604] +
mov [esp+6ACh+var_69C] eax +
jmp loc_4487E6  +
mov eax [ebp+arg_0] +
mov [esp+6C4h+var_6B8] offset aProgramAsser_8 +
mov [esp+6C4h+var_6BC] offset aGet_interfac_1 +
mov [esp+6C4h+var_6C0] 1 +
mov [esp+6C4h+var_6C4] eax +
call sub_43E390  +
jmp loc_448801  +
mov eax [ebp+arg_0] +
mov [esp+6DCh+var_6CC] ebx +
mov [esp+6DCh+var_6D0] offset aCouldNotSaniti +
mov [esp+6DCh+var_6D4] offset aWindows_get_de +
mov [esp+6DCh+var_6D8] 2 +
mov [esp+6DCh+var_6DC] eax +
call sub_43E390  +
add [ebp+var_604] 1 +
mov [ebp+var_618] 0 +
jmp loc_447D14  +
mov eax [ebp+var_594] +
mov [esp+6ECh+var_6E0] offset aCouldNotSani_0 +
mov [esp+6ECh+var_6DC] eax +
mov eax [ebp+arg_0] +
mov [esp+6ECh+var_6E4] offset aWindows_get_de +
mov [esp+6ECh+var_6E8] 2 +
mov [esp+6ECh+var_6EC] eax +
call sub_43E390  +
jmp loc_447D03  +
cmp [ebp+var_61C] 3 +
jz loc_44931F  +
mov [esp+724h+var_714] edi +
mov [esp+724h+var_718] offset aAllocatingNewD +
mov [esp+724h+var_71C] offset aWindows_get_de +
mov [esp+724h+var_720] 4 +
mov [esp+724h+var_724] 0 +
call sub_43E390  +
mov eax [ebp+arg_0] +
mov [esp+724h+var_720] edi +
mov [esp+724h+var_724] eax +
call sub_43DE00  +
test eax eax +
mov edx eax +
mov [ebp+var_600] eax +
jz loc_448EBF  +
xor ecx ecx +
mov byte ptr [eax+40h] 0 +
mov byte ptr [eax+41h] 0 +
mov dword ptr [eax+44h] 0 +
mov dword ptr [eax+4Ch] 0 +
mov dword ptr [eax+48h] offset unk_480AC0 +
mov dword ptr [eax+50h] 0FFFFFFFFh +
mov dword ptr [eax+354h] 0 +
mov byte ptr [eax+42h] 0 +
mov dword ptr [eax+36Ch] 0 +
mov dword ptr [edx+358h] 0 +
mov dword ptr [eax+35Ch] 0 +
mov dword ptr [eax+360h] 0 +
mov dword ptr [eax+364h] 0 +
mov [eax+368h] cx +
mov eax edx +
mov edx 20h +
add eax 54h +
lea esi [esi+0] +
mov dword ptr [eax] 0 +
add eax 18h +
mov dword ptr [eax-14h] offset unk_480AC0 +
mov dword ptr [eax-10h] 0FFFFFFFFh +
mov byte ptr [eax-0Ch] 0 +
mov dword ptr [eax-8] 0 +
mov dword ptr [eax-4] 0 +
sub edx 1 +
jnz loc_448C30  +
jmp loc_4483F2  +
xor eax eax +
mov ecx 8 +
lea edi [ebp+var_33C] +
stos   +
xor eax eax +
test dl dl +
mov [edi] ax +
mov byte ptr [edi+2] 0 +
jz loc_448F65  +
mov eax [esi+4Ch] +
mov [esp+724h+var_70C] 0 +
mov [esp+724h+var_710] 40000000h +
mov [esp+724h+var_714] 3 +
mov [esp+724h+var_718] 0 +
mov [esp+724h+var_71C] 2 +
mov [esp+724h+var_720] 40000000h +
mov [esp+724h+var_724] eax +
call ds:CreateFileA  +
sub esp 1Ch +
cmp eax 0FFFFFFFFh +
mov [ebp+var_620] eax +
jz loc_449C28  +
mov eax [ebp+var_630] +
mov [ebp+var_5E4] 23h +
mov [esp+724h+var_708] 0 +
mov [esp+724h+var_710] 23h +
mov [ebp+var_33C] eax +
lea eax [ebp+var_5E4] +
mov [esp+724h+var_70C] eax +
lea eax [ebp+var_33C] +
mov [esp+724h+var_714] eax +
mov [esp+724h+var_71C] eax +
mov eax [ebp+var_620] +
mov [esp+724h+var_718] 23h +
mov [esp+724h+var_720] 220448h +
mov [esp+724h+var_724] eax +
mov eax ds:DeviceIoControl +
mov [ebp+var_638] eax +
call eax  +
sub esp 20h +
test eax eax +
jz loc_44986E  +
mov eax [ebp+var_31D] +
test eax eax +
jnz loc_449484  +
mov eax [ebp+var_618] +
mov [esp+724h+var_718] offset aDeviceSIsNoLon +
mov [esp+724h+var_71C] offset aInit_device +
mov [esp+724h+var_720] 1 +
mov [esp+724h+var_714] eax +
mov eax [ebp+var_5FC] +
mov [esp+724h+var_724] eax +
call sub_43E390  +
mov eax [ebp+var_620] +
mov [esp+724h+var_724] eax +
call ds:CloseHandle  +
sub esp 4 +
jmp loc_447D03  +
mov eax [ebp+var_618] +
mov [esp+708h+var_6FC] offset aTheFollowingDe +
mov [esp+708h+var_700] offset aWindows_get_de +
mov [esp+708h+var_704] 3 +
mov [esp+708h+var_6F8] eax +
mov eax [ebp+arg_0] +
mov [esp+708h+var_708] eax +
call sub_43E390  +
mov eax [ebp+arg_0] +
mov [esp+708h+var_6FC] offset aLibusbWillNotB +
mov [esp+708h+var_700] offset aWindows_get_de +
mov [esp+708h+var_704] 3 +
mov [esp+708h+var_708] eax +
call sub_43E390  +
jmp loc_4486F5  +
mov edi [ebp+var_61C] +
test edi edi +
jnz loc_447AE7  +
mov eax [ebp+arg_0] +
mov [esp+68Ch+var_67C] 0FFh +
mov [esp+68Ch+var_680] offset aProgramAsse_10 +
mov [esp+68Ch+var_684] offset aWindows_get_de +
mov [esp+68Ch+var_688] 2 +
mov [esp+68Ch+var_68C] eax +
call sub_43E390  +
jmp loc_448660  +
call ds:GetLastError  +
cmp eax 103h +
jz loc_448801  +
xor eax eax +
call sub_442BB0  +
mov [esp+698h+var_68C] offset aCouldNotObta_1 +
mov [esp+698h+var_684] eax +
mov eax [ebp+var_604] +
mov [esp+698h+var_688] eax +
jmp loc_4487E6  +
add [ebp+var_650] 40h +
mov eax [ebp+var_650] +
mov [esp+724h+var_724] ecx +
mov [ebp+var_620] edx +
shl eax 2 +
mov [esp+724h+var_720] eax +
call realloc  +
mov edx [ebp+var_620] +
test eax eax +
jz loc_44939A  +
mov [ebp+var_640] eax +
jmp loc_448416  +
mov eax [ebp+var_5E8] +
test eax eax +
jz loc_447FE6  +
mov [esp+708h+var_6F4] eax +
mov eax [ebp+var_618] +
mov [esp+708h+var_6FC] offset aDriverForDevic +
mov [esp+708h+var_6F8] eax +
jmp loc_448A2B  +
mov [ebp+var_628] 0FFFFFFF5h +
jmp loc_447D03  +
mov [esp+724h+var_714] ebx +
mov esi [ebp+var_620] +
mov [esp+724h+var_718] offset aGotBusNumberFr +
mov [esp+724h+var_71C] offset aInit_device +
mov [esp+724h+var_720] 4 +
mov [esp+724h+var_724] 0 +
mov [ebp+var_620] eax +
call sub_43E390  +
mov eax [ebp+var_620] +
movzx edx byte ptr [eax+0Ch] +
mov [esi+0Ch] dl +
mov [esp+724h+var_724] eax +
call sub_43E740  +
movzx eax byte ptr [esi+0Ch] +
sub esp 4 +
test al al +
jnz loc_448904  +
mov eax [ebp+var_618] +
mov [esp+724h+var_718] offset aProgramAsse_11 +
mov [esp+724h+var_71C] offset aInit_device +
mov [esp+724h+var_720] 1 +
mov [esp+724h+var_714] eax +
mov eax [ebp+var_5FC] +
mov [esp+724h+var_724] eax +
call sub_43E390  +
mov [ebp+var_628] 0FFFFFFFBh +
jmp loc_447D03  +
mov eax [ebp+var_600] +
lea edx [ebp+var_5E0] +
lea ebx [ebp+var_5C0] +
mov byte ptr [eax+14h] 1 +
mov edi [eax+8] +
mov byte ptr [eax+15h] 1 +
mov byte ptr [eax+358h] 12h +
mov byte ptr [eax+359h] 1 +
mov byte ptr [eax+369h] 1 +
mov byte ptr [eax+42h] 1 +
mov eax [esi+4Ch] +
mov [esp+724h+var_718] ebx +
mov [esp+724h+var_71C] edx +
mov [esp+724h+var_720] offset a_PciVen_04xDev +
mov [esp+724h+var_724] eax +
call sscanf  +
cmp eax 2 +
jz loc_4493F6  +
mov eax [esi+4Ch] +
mov esi 1D6Bh +
mov [esp+724h+var_724] edi +
mov edi 1 +
mov [esp+724h+var_718] offset aCouldNotInferV +
mov [esp+724h+var_71C] offset aForce_hcd_devi +
mov [esp+724h+var_714] eax +
mov [esp+724h+var_720] 2 +
call sub_43E390  +
mov eax [ebp+var_600] +
mov [eax+360h] si +
mov [eax+362h] di +
mov ebx [ebp+var_600] +
mov [esp+724h+var_724] ebx +
call sub_43E490  +
mov eax [ebp+var_618] +
mov [esp+724h+var_704] eax +
movzx eax byte ptr [ebx+41h] +
mov [esp+724h+var_708] eax +
movzx eax byte ptr [ebx+40h] +
mov [esp+724h+var_70C] eax +
movzx eax byte ptr [ebx+14h] +
mov [esp+724h+var_710] eax +
movzx eax byte ptr [ebx+0Ch] +
mov [esp+724h+var_718] offset aBusDAddrDDepth +
mov [esp+724h+var_71C] offset aInit_device +
mov [esp+724h+var_720] 4 +
mov [esp+724h+var_714] eax +
mov [esp+724h+var_724] 0 +
call sub_43E390  +
jmp loc_448935  +
mov eax [esi+24h] +
mov [esp+724h+var_718] offset aSettingHidInte +
mov [esp+724h+var_71C] offset aWindows_get_de +
mov [esp+724h+var_720] 4 +
mov [esp+724h+var_714] eax +
mov [esp+724h+var_724] 0 +
call sub_43E390  +
mov eax [esi+354h] +
test eax eax +
mov [ebp+var_5FC] eax +
jz loc_449C1E  +
mov eax [ebp+var_5FC] +
movzx ecx byte ptr [eax+5] +
cmp cl 20h +
jz loc_449BEC  +
xor ebx ebx +
test ecx ecx +
lea edi [esi+54h] +
jz loc_449423  +
mov [ebp+var_600] esi +
mov esi ecx +
jmp loc_4490DC  +
add ebx 1 +
add edi 18h +
cmp ebx esi +
jz loc_44941B  +
mov eax [ebp+var_614] +
mov edx offset aNull +
mov ecx offset aNull +
test eax eax +
cmovnz edx eax +
mov eax [edi] +
mov [esp+724h+var_720] edx +
test eax eax +
cmovz eax ecx +
mov [esp+724h+var_724] eax +
call strcmp  +
test eax eax +
jnz loc_4490CE  +
mov eax [ebp+var_614] +
mov [esp+724h+var_714] ebx +
mov esi [ebp+var_600] +
mov [esp+724h+var_718] offset aInterfaceDAlre +
mov [esp+724h+var_71C] offset aSet_hid_interf +
mov [esp+724h+var_710] eax +
mov [esp+724h+var_720] 4 +
mov [esp+724h+var_724] 0 +
call sub_43E390  +
mov [ebp+var_614] 0 +
jmp loc_448462  +
mov eax [ebp+var_614] +
test eax eax +
jz loc_449919  +
mov [esp+724h+var_724] eax +
call strlen  +
mov [esp+724h+var_720] 1 +
add eax 1 +
mov [esp+724h+var_724] eax +
call calloc  +
test eax eax +
mov esi eax +
mov [edi+14h] eax +
jz loc_44993F  +
mov eax [ebp+var_614] +
mov [esp+724h+var_724] eax +
call strlen  +
add eax 1 +
mov [esp+724h+var_71C] eax +
mov eax [ebp+var_614] +
mov [esp+724h+var_724] esi +
mov [esp+724h+var_720] eax +
call memcpy  +
mov eax [edi+0Ch] +
mov esi [edi+14h] +
test eax eax +
jz loc_449AEC  +
mov [esp+724h+var_724] eax +
call strlen  +
mov byte ptr [esi+eax] 0 +
xor eax eax +
mov [edi+eax+18h] ebx +
add eax 18h +
cmp eax 300h +
jnz loc_4491C8  +
mov [ebp+var_614] 0 +
jmp loc_447D03  +
mov eax [ebp+var_5FC] +
mov eax off_461614[eax*4] +
jmp loc_448234  +
mov eax [esi+24h] +
mov [esp+724h+var_718] offset aSettingComposi +
mov [esp+724h+var_71C] offset aWindows_get_de +
mov [esp+724h+var_720] 4 +
mov [esp+724h+var_714] eax +
mov [esp+724h+var_724] 0 +
call sub_43E390  +
mov edx [esi+48h] +
xor eax eax +
mov ebx [ebp+var_618] +
cmp byte ptr [edx] 2 +
jz loc_449245  +
jmp loc_449DE8  +
cmp dl 4Dh +
lea ecx [eax+1] +
jz loc_44930A  +
mov eax ecx +
movzx edx byte ptr [ebx+eax] +
test dl dl +
jnz loc_449237  +
xor edi edi +
mov eax [ebp+var_618] +
mov [esp+724h+var_710] edi +
mov [esp+724h+var_718] offset aFailureToReadI +
mov [esp+724h+var_71C] offset aSet_composite_ +
mov [esp+724h+var_714] eax +
mov eax [ebp+arg_0] +
mov [esp+724h+var_720] 2 +
mov [esp+724h+var_724] eax +
call sub_43E390  +
lea eax [edi+edi*2] +
lea ebx [esi+eax*8] +
mov eax [ebx+54h] +
test eax eax +
jz loc_449D52  +
cmp [ebp+var_62C] 4 +
jz loc_449BB5  +
mov [esp+724h+var_724] eax +
call free  +
mov eax [ebp+var_614] +
mov dword ptr [ebx+54h] 0 +
mov [esp+724h+var_714] edi +
mov [esp+724h+var_718] offset aInterfaceDS +
mov [esp+724h+var_710] eax +
mov [esp+724h+var_71C] offset aSet_composite_ +
mov [esp+724h+var_720] 4 +
mov [esp+724h+var_724] 0 +
call sub_43E390  +
mov eax [ebp+var_614] +
mov [ebx+54h] eax +
mov eax [ebp+var_62C] +
lea eax [eax+eax*4] +
shl eax 4 +
add eax offset unk_480AC0 +
mov [ebx+58h] eax +
mov eax [ebp+var_5FC] +
mov [ebx+5Ch] eax +
jmp loc_449140  +
cmp byte ptr [ebx+eax+1] 49h +
lea edx [eax+2] +
jz loc_449D0E  +
mov eax edx +
jmp loc_449245  +
mov eax [ebp+var_618] +
mov [esp+724h+var_718] offset aSWasOnlyDetect +
mov [esp+724h+var_714] eax +
jmp loc_448B3F  +
mov eax [ebp+arg_0] +
mov [esp+724h+var_718] offset aCouldNotCalloc +
mov [esp+724h+var_71C] offset aWindows_get_de +
mov [esp+724h+var_720] 1 +
mov [esp+724h+var_724] eax +
call sub_43E390  +
mov [ebp+var_628] 0FFFFFFF5h +
jmp loc_447D03  +
mov eax [ebp+var_604] +
mov [esp+6C4h+var_6B8] offset aCouldNotAllo_0 +
mov [esp+6C4h+var_6BC] offset aGet_interfac_1 +
mov [esp+6C4h+var_6C0] 1 +
mov [esp+6C4h+var_6B4] eax +
mov eax [ebp+arg_0] +
mov [esp+6C4h+var_6C4] eax +
call sub_43E390  +
jmp loc_448801  +
mov eax [ebp+var_640] +
mov [ebp+var_5FC] edx +
mov [esp+724h+var_724] eax +
call free  +
mov eax [ebp+arg_0] +
mov [esp+724h+var_718] offset aCouldNotReallo +
mov [esp+724h+var_71C] offset aWindows_get_de +
mov [esp+724h+var_720] 1 +
mov [esp+724h+var_724] eax +
call sub_43E390  +
mov edx [ebp+var_5FC] +
mov [ebp+var_640] 0 +
mov [ebp+var_628] 0FFFFFFF5h +
mov [ebp+var_648] edx +
jmp loc_447D03  +
mov eax [ebp+var_5E0] +
mov edx [ebp+var_600] +
mov [edx+360h] ax +
mov eax [ebp+var_5C0] +
mov [edx+362h] ax +
jmp loc_449004  +
mov ecx esi +
mov esi [ebp+var_600] +
lea eax [ecx+ecx*2] +
mov edx [ebp+var_614] +
mov ecx [ebp+var_5FC] +
mov [esi+eax*8+54h] edx +
movzx eax byte ptr [ecx+5] +
lea eax [eax+eax*2] +
mov dword ptr [esi+eax*8+58h] offset unk_480C00 +
mov [esp+724h+var_710] edx +
movzx eax byte ptr [ecx+5] +
mov [esp+724h+var_718] offset aInterfaceDS +
mov [esp+724h+var_71C] offset aSet_hid_interf +
mov [esp+724h+var_720] 4 +
mov [esp+724h+var_714] eax +
mov [esp+724h+var_724] 0 +
call sub_43E390  +
mov eax [esi+354h] +
add byte ptr [eax+5] 1 +
jmp loc_449140  +
mov ebx [ebp+var_600] +
mov edx [ebp+var_338] +
mov ecx ebx +
mov [ebx+358h] edx +
mov edx [ebp+var_334] +
mov [ebx+35Ch] edx +
mov edx [ebp+var_330] +
mov [ebx+360h] edx +
mov edx [ebp+var_32C] +
mov [ebx+364h] edx +
movzx edx [ebp+var_328] +
mov [ebx+368h] dx +
shr dx 8 +
mov [ecx+15h] dl +
mov eax edx +
movzx edx [ebp+var_326] +
movzx eax al +
mov [ebx+42h] dl +
mov [esp+724h+var_714] eax +
mov [esp+724h+var_710] edx +
mov [esp+724h+var_718] offset aFoundDConfigur +
mov [esp+724h+var_71C] offset aInit_device +
mov [esp+724h+var_720] 4 +
mov [esp+724h+var_724] 0 +
call sub_43E390  +
mov eax [ebx+8] +
mov [ebp+var_624] eax +
movzx eax byte ptr [ebx+15h] +
test al al +
jz loc_4499B4  +
mov [esp+724h+var_720] 4 +
mov [esp+724h+var_724] eax +
call calloc  +
mov ecx ebx +
test eax eax +
mov [ebx+36Ch] eax +
jz loc_4499B4  +
mov edx eax +
xor eax eax +
jmp loc_44954D  +
mov edx [ecx+36Ch] +
movzx ebx al +
add eax 1 +
mov dword ptr [edx+ebx*4] 0 +
movzx edx byte ptr [ecx+15h] +
cmp al dl +
jb loc_449547  +
mov eax edx +
xor esi esi +
mov byte ptr [ebp+var_62C] 0 +
cmp byte ptr [ebp+var_62C] al +
jnb loc_4496AB  +
test esi esi +
jnz loc_4496AB  +
xor eax eax +
mov [ebp+eax+var_5C0] 0 +
add eax 4 +
cmp eax 14h +
jb loc_449583  +
mov byte ptr [ebp+eax+var_5C0] 0 +
mov eax [ebp+var_600] +
movzx eax byte ptr [eax+41h] +
mov [ebp+var_5BC] 80h +
mov byte ptr [ebp-5BBh] 6 +
mov [esp+724h+var_708] 0 +
mov [ebp+var_5C0] eax +
movzx eax byte ptr [ebp+var_62C] +
mov [esp+724h+var_710] 15h +
mov [esp+724h+var_718] 15h +
mov [esp+724h+var_720] 220410h +
mov word ptr [ebp+var_634] ax +
or word ptr [ebp+var_634] 200h +
movzx eax word ptr [ebp+var_634] +
mov [ebp+var_5BA] ax +
mov eax 9 +
mov [ebp+var_5B6] ax +
lea eax [ebp+var_5E0] +
mov [esp+724h+var_70C] eax +
lea eax [ebp+var_5C0] +
mov [esp+724h+var_714] eax +
mov [esp+724h+var_71C] eax +
mov eax [ebp+var_620] +
mov [esp+724h+var_724] eax +
call [ebp+var_638]  +
sub esp 20h +
test eax eax +
jz loc_449728  +
cmp [ebp+var_5E0] 15h +
jnz loc_449659  +
movzx eax [ebp+var_5B2] +
cmp ax 8 +
ja loc_44976B  +
mov eax [ebp+var_618] +
mov esi 0FFFFFFFFh +
mov [esp+744h+var_738] offset aUnexpectedConf +
mov [esp+744h+var_73C] offset aCache_config_d +
mov [esp+744h+var_740] 3 +
mov [esp+744h+var_734] eax +
mov eax [ebp+var_624] +
mov [esp+744h+var_744] eax +
call sub_43E390  +
add byte ptr [ebp+var_62C] 1 +
mov eax [ebp+var_600] +
movzx eax byte ptr [eax+15h] +
cmp byte ptr [ebp+var_62C] al +
jb loc_449579  +
cmp dword_4616C0 61h +
jg loc_4499D2  +
mov eax [ebp+var_620] +
mov [esp+744h+var_744] eax +
call ds:CloseHandle  +
movzx eax [ebp+var_323] +
sub esp 4 +
cmp ax 0FFh +
ja loc_449B83  +
mov edx [ebp+var_600] +
add eax 1 +
cmp al 1 +
mov [edx+14h] al +
jz loc_449B58  +
movzx eax [ebp+var_325] +
cmp al 1 +
jz loc_449B46  +
jb loc_449B34  +
cmp al 2 +
jz loc_449B22  +
cmp al 3 +
nop   +
jnz loc_449AF3  +
mov eax [ebp+var_600] +
mov dword ptr [eax+18h] 4 +
jmp loc_449004  +
call sub_442BB0  +
mov esi 0FFFFFFFFh +
mov [esp+744h+var_738] offset aCouldNotAcce_3 +
mov [esp+744h+var_73C] offset aCache_config_d +
mov [esp+744h+var_740] 3 +
mov [esp+744h+var_730] eax +
mov eax [ebp+var_618] +
mov [esp+744h+var_734] eax +
mov eax [ebp+var_624] +
mov [esp+744h+var_744] eax +
call sub_43E390  +
jmp loc_44968E  +
lea edi [eax+0Ch] +
mov [esp+744h+var_740] edi +
mov [esp+744h+var_744] 1 +
call calloc  +
test eax eax +
mov ebx eax +
jz loc_449A78  +
mov [esp+744h+var_73C] edi +
mov [esp+744h+var_740] 0 +
mov [esp+744h+var_744] eax +
call memset  +
mov eax [ebp+var_600] +
movzx eax byte ptr [eax+41h] +
mov byte ptr [ebx+4] 80h +
mov byte ptr [ebx+5] 6 +
mov [ebx] eax +
movzx eax word ptr [ebp+var_634] +
mov [ebx+6] ax +
xor eax eax +
mov [ebx+8] ax +
lea eax [edi-0Ch] +
mov [ebx+0Ah] ax +
lea eax [ebp+var_5E0] +
mov [esp+744h+var_72C] eax +
mov eax [ebp+var_620] +
mov [esp+744h+var_728] 0 +
mov [esp+744h+var_730] edi +
mov [esp+744h+var_734] ebx +
mov [esp+744h+var_738] edi +
mov [esp+744h+var_73C] ebx +
mov [esp+744h+var_740] 220410h +
mov [esp+744h+var_744] eax +
call [ebp+var_638]  +
sub esp 20h +
test eax eax +
jz loc_449971  +
cmp edi [ebp+var_5E0] +
jnz loc_449825  +
movzx eax word ptr [ebx+0Eh] +
cmp ax [ebp+var_5B2] +
jz loc_449AB2  +
mov eax [ebp+var_618] +
mov [esp+764h+var_758] offset aUnexpectedCo_0 +
mov [esp+764h+var_754] eax +
mov eax [ebp+var_624] +
mov esi 0FFFFFFFFh +
mov [esp+764h+var_75C] offset aCache_config_d +
mov [esp+764h+var_760] 1 +
mov [esp+764h+var_764] eax +
call sub_43E390  +
mov [esp+764h+var_764] ebx +
add byte ptr [ebp+var_62C] 1 +
call free  +
jmp loc_449695  +
call sub_442BB0  +
mov [esp+724h+var_718] offset aCouldNotGetNod +
mov [esp+724h+var_71C] offset aInit_device +
mov [esp+724h+var_720] 2 +
mov [esp+724h+var_710] eax +
mov eax [ebp+var_618] +
mov [esp+724h+var_714] eax +
mov eax [ebp+var_5FC] +
mov [esp+724h+var_724] eax +
call sub_43E390  +
mov eax [ebp+var_620] +
mov [esp+724h+var_724] eax +
call ds:CloseHandle  +
sub esp 4 +
jmp loc_447D03  +
mov [ebp+var_628] 0FFFFFFFBh +
jmp loc_447D03  +
mov eax [ebp+var_618] +
mov [esp+724h+var_718] offset aParentForDevic +
mov [esp+724h+var_71C] offset aInit_device +
mov [esp+724h+var_720] 2 +
mov [esp+724h+var_714] eax +
mov eax [ebp+var_5FC] +
mov [esp+724h+var_724] eax +
call sub_43E390  +
mov [ebp+var_628] 0FFFFFFFBh +
jmp loc_447D03  +
lea esp [ebp-0Ch] +
mov eax 0FFFFFFF5h +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+724h+var_720] 1 +
mov [esp+724h+var_724] 1 +
call calloc  +
mov esi eax +
test esi esi +
mov [edi+14h] eax +
mov eax 1 +
jnz loc_449196  +
mov eax [ebp+var_614] +
mov [esp+724h+var_718] offset aCouldNotDupl_3 +
mov [esp+724h+var_71C] offset aWindows_get_de +
mov [esp+724h+var_720] 2 +
mov [esp+724h+var_714] eax +
mov eax [ebp+arg_0] +
mov [esp+724h+var_724] eax +
call sub_43E390  +
jmp loc_4491C6  +
call sub_442BB0  +
mov esi 0FFFFFFFFh +
mov [esp+764h+var_758] offset aCouldNotAcce_4 +
mov [esp+764h+var_75C] offset aCache_config_d +
mov [esp+764h+var_760] 1 +
mov [esp+764h+var_750] eax +
mov eax [ebp+var_618] +
mov [esp+764h+var_754] eax +
mov eax [ebp+var_624] +
mov [esp+764h+var_764] eax +
call sub_43E390  +
jmp loc_44985A  +
mov eax [ebp+var_600] +
cmp dword_4616C0 61h +
mov byte ptr [eax+15h] 0 +
mov byte ptr [eax+369h] 0 +
jle loc_4496B8  +
mov eax [ebp+var_630] +
lea ebx [ebp+var_5C0] +
mov dword ptr [ebp-5B8h] 0 +
mov dword ptr [ebp-5B4h] 0 +
mov [ebp+var_5E4] 10h +
mov [ebp+var_5C0] eax +
lea eax [ebp+var_5E4] +
mov [esp+724h+var_70C] eax +
mov eax [ebp+var_620] +
mov dword ptr [ebp+var_5BC] 10h +
mov [ebp+var_5B8] 4 +
mov [esp+724h+var_708] 0 +
mov [esp+724h+var_710] 10h +
mov [esp+724h+var_714] ebx +
mov [esp+724h+var_718] 10h +
mov [esp+724h+var_71C] ebx +
mov [esp+724h+var_720] 22045Ch +
mov [esp+724h+var_724] eax +
call [ebp+var_638]  +
sub esp 20h +
test eax eax +
jz loc_449E1A  +
test [ebp+var_5B4] 1 +
jz loc_4496B8  +
mov [ebp+var_325] 3 +
jmp loc_4496B8  +
mov eax [ebp+var_618] +
mov esi 0FFFFFFF5h +
mov [esp+744h+var_738] offset aCouldNotAllo_1 +
mov [esp+744h+var_73C] offset aCache_config_d +
mov [esp+744h+var_740] 1 +
mov [esp+744h+var_734] eax +
mov eax [ebp+var_624] +
mov [esp+744h+var_744] eax +
call sub_43E390  +
jmp loc_44968E  +
cmp byte ptr [ebx+0Dh] 2 +
jz loc_449C6F  +
mov eax [ebp+var_618] +
mov [esp+764h+var_758] offset aNotAConfigurat +
mov [esp+764h+var_754] eax +
jmp loc_449837  +
mov [ebp+var_614] 0 +
mov [ebp+var_628] 0FFFFFFF5h +
jmp loc_447D03  +
xor eax eax +
jmp loc_4491C2  +
mov [esp+744h+var_734] eax +
mov eax [ebp+var_5FC] +
mov [esp+744h+var_738] offset aGotUnknownDevi +
mov [esp+744h+var_73C] offset aInit_device +
mov [esp+744h+var_740] 2 +
mov [esp+744h+var_744] eax +
call sub_43E390  +
jmp loc_449004  +
mov eax [ebp+var_600] +
mov dword ptr [eax+18h] 3 +
jmp loc_449004  +
mov eax [ebp+var_600] +
mov dword ptr [eax+18h] 1 +
jmp loc_449004  +
mov eax [ebp+var_600] +
mov dword ptr [eax+18h] 2 +
jmp loc_449004  +
mov eax [ebp+var_5FC] +
mov [esp+744h+var_738] offset aProgramAsse_12 +
mov [esp+744h+var_73C] offset aInit_device +
mov [esp+744h+var_740] 1 +
mov [esp+744h+var_744] eax +
call sub_43E390  +
jmp loc_4496EF  +
mov eax [ebp+var_5FC] +
mov [esp+744h+var_738] offset aProgramAsse_13 +
mov [esp+744h+var_73C] offset aInit_device +
mov [esp+744h+var_740] 1 +
mov [esp+744h+var_744] eax +
call sub_43E390  +
movzx eax [ebp+var_323] +
jmp loc_4496DB  +
mov eax [ebp+var_618] +
mov [esp+724h+var_714] edi +
mov [esp+724h+var_718] offset aInterfaceDAl_0 +
mov [esp+724h+var_71C] offset aSet_composite_ +
mov [esp+724h+var_710] eax +
mov [esp+724h+var_720] 4 +
mov [esp+724h+var_724] 0 +
call sub_43E390  +
jmp loc_448462  +
mov [esp+724h+var_718] offset aProgramAsse_14 +
mov eax [ebp+arg_0] +
mov [esp+724h+var_71C] offset aSet_hid_interf +
mov [esp+724h+var_720] 1 +
mov [esp+724h+var_724] eax +
call sub_43E390  +
mov [ebp+var_628] 0FFFFFFFCh +
jmp loc_447D03  +
mov [esp+724h+var_718] offset aProgramAsse_15 +
jmp loc_449BF4  +
xor eax eax +
call sub_442BB0  +
mov edx [esi+4Ch] +
mov [esp+724h+var_718] offset aCouldNotOpenHu +
mov [esp+724h+var_71C] offset aInit_device +
mov [esp+724h+var_720] 2 +
mov [esp+724h+var_714] edx +
mov [esp+724h+var_710] eax +
mov eax [ebp+var_5FC] +
mov [esp+724h+var_724] eax +
call sub_43E390  +
mov [ebp+var_628] 0FFFFFFFDh +
jmp loc_447D03  +
movzx edi byte ptr [ebp+var_62C] +
mov [esp+764h+var_74C] eax +
movzx eax byte ptr [ebx+11h] +
mov [esp+764h+var_758] offset aCachedConfigDe +
mov [esp+764h+var_75C] offset aCache_config_d +
mov [esp+764h+var_754] edi +
mov [esp+764h+var_750] eax +
mov [esp+764h+var_760] 4 +
mov [esp+764h+var_764] 0 +
call sub_43E390  +
mov eax [ebp+var_600] +
movzx edx word ptr [ebx+0Eh] +
mov eax [eax+36Ch] +
mov [esp+764h+var_764] edx +
mov [ebp+var_634] edx +
lea ecx [eax+edi*4] +
mov [ebp+var_654] ecx +
call malloc  +
mov ecx [ebp+var_654] +
mov [ecx] eax +
mov eax [ebp+var_600] +
mov eax [eax+36Ch] +
mov eax [eax+edi*4] +
test eax eax +
jz loc_449E58  +
mov edx [ebp+var_634] +
lea ecx [ebx+0Ch] +
mov [esp+764h+var_760] ecx +
mov [esp+764h+var_764] eax +
mov [esp+764h+var_75C] edx +
call memcpy  +
jmp loc_44985A  +
cmp byte ptr [ebx+eax+2] 5Fh +
lea edx [eax+3] +
jnz loc_449318  +
mov ecx [ebp+var_618] +
movsx edx byte ptr [ecx+edx] +
movzx eax byte ptr [ecx+eax+4] +
lea edx [edx+edx*4-0F0h] +
movsx ecx al +
test al al +
lea edi [ecx+edx*2-30h] +
jz loc_44924F  +
lea eax [edi+edi*2] +
lea ebx [esi+eax*8] +
mov eax [ebx+54h] +
test eax eax +
jnz loc_449291  +
mov eax [ebp+var_614] +
mov [esp+724h+var_714] edi +
mov [esp+724h+var_718] offset aInterfaceDS +
mov [esp+724h+var_71C] offset aSet_composite_ +
mov [esp+724h+var_710] eax +
mov [esp+724h+var_720] 4 +
mov [esp+724h+var_724] 0 +
call sub_43E390  +
mov eax [ebp+var_614] +
mov edx [ebp+var_62C] +
mov [ebx+54h] eax +
lea eax [edx+edx*4] +
shl eax 4 +
add eax offset unk_480AC0 +
cmp edx 4 +
mov [ebx+58h] eax +
mov eax [ebp+var_5FC] +
mov [ebx+5Ch] eax +
jnz loc_449140  +
mov ebx [esi+354h] +
test ebx ebx +
jnz loc_449140  +
mov [esp+724h+var_720] 320h +
mov [esp+724h+var_724] 1 +
call calloc  +
test eax eax +
mov [esi+354h] eax +
jnz loc_449140  +
jmp loc_447D03  +
mov eax [ebp+var_618] +
mov [esp+724h+var_718] offset aProgramAsse_16 +
mov [esp+724h+var_71C] offset aSet_composite_ +
mov [esp+724h+var_720] 1 +
mov [esp+724h+var_714] eax +
mov eax [ebp+arg_0] +
mov [esp+724h+var_724] eax +
call sub_43E390  +
jmp loc_447D03  +
call sub_442BB0  +
mov [esp+744h+var_738] offset aCouldNotGetN_0 +
mov [esp+744h+var_73C] offset aInit_device +
mov [esp+744h+var_740] 2 +
mov [esp+744h+var_730] eax +
mov eax [ebp+var_618] +
mov [esp+744h+var_734] eax +
mov eax [ebp+var_5FC] +
mov [esp+744h+var_744] eax +
call sub_43E390  +
jmp loc_4496B8  +
mov esi 0FFFFFFF5h +
jmp loc_44985A  +
***
push edi  +
mov [esp+arg_8] offset aUnsupportedHid +
***
mov eax [ebp-90h] +
mov [esp+arg_4] offset aHid_submit_con +
mov [esp+arg_0] 2 +
mov [esp+0] eax +
call sub_43E390  +
mov eax 0FFFFFFF4h +
lea edx [ebp-5Ch] +
mov [esp+0] edx +
mov [ebp-8Ch] eax +
call sub_44DFA0  +
mov eax [ebp-8Ch] +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov edx [esi+50h] +
lea esi [edx+8] +
mov [ebp+var_98] esi +
mov esi [ebp+var_8C] +
movzx edx word ptr [esi+2] +
movzx esi byte ptr [esi+1] +
mov [ebp+var_8C] esi +
movzx esi dh +
movzx edx dl +
mov word ptr [ebp+var_94] dx +
mov [ebp+var_90] edx +
mov edx eax +
and edx 1Fh +
cmp dl 1 +
ja loc_44A100  +
test al al +
js loc_44A110  +
cmp [ebp+var_8C] 9 +
mov eax 0FFFFFFFEh +
jnz loc_449FFD  +
mov eax [ebx+1Ch] +
mov edx [ebp+var_64] +
test eax eax +
mov [ebp+var_44] edx +
jz loc_44A0B7  +
mov [esp+0C8h+var_BC] offset aProgramAsser_5 +
mov [esp+0C8h+var_C0] offset a_hid_set_repor +
mov [esp+0C8h+var_C4] 4 +
mov [esp+0C8h+var_C8] 0 +
mov [ebp+var_8C] ecx +
call sub_43E390  +
mov edx [ebp+var_64] +
mov ecx [ebp+var_8C] +
lea eax [edx-1] +
cmp eax 3FFh +
ja loc_44ABCF  +
cmp esi 2 +
jz loc_44AB29  +
cmp esi 3 +
jz loc_44A98D  +
mov [esp+0C8h+var_B8] esi +
mov [esp+0C8h+var_BC] offset aUnknownHidRepo +
***
mov [esp-4+arg_8] offset a_hid_set_repor +
mov [esp-4+arg_4] 4 +
mov [esp-4+arg_0] 0 +
call sub_43E390  +
nop   +
mov eax 0FFFFFFFEh +
jmp loc_449FFD  +
***
cmp [ebp+var_8C] 1 +
jnz loc_44A100  +
mov edx [ebx+1Ch] +
mov eax [ebp+var_64] +
test edx edx +
mov [ebp+var_8C] eax +
jz loc_44A15C  +
mov [esp+0C8h+var_BC] offset aProgramAsser_5 +
mov [esp+0C8h+var_C0] offset a_hid_get_repor +
mov [esp+0C8h+var_C4] 4 +
mov [esp+0C8h+var_C8] 0 +
mov [ebp+var_9C] ecx +
call sub_43E390  +
mov eax [ebp+var_64] +
mov ecx [ebp+var_9C] +
lea edx [eax-1] +
cmp edx 3FFh +
ja loc_44AB45  +
cmp esi 1 +
jz loc_44A370  +
cmp esi 3 +
jz loc_44A210  +
mov [esp+0C8h+var_B8] esi +
mov [esp+0C8h+var_BC] offset aUnknownHidRepo +
***
mov [esp-4+arg_8] offset a_hid_get_repor +
mov [esp-4+arg_4] 4 +
mov [esp-4+arg_0] 0 +
call sub_43E390  +
mov eax 0FFFFFFFEh +
jmp loc_449FFD  +
***
mov eax [ebp+var_8C] +
movzx eax byte ptr [eax+1] +
mov byte ptr [ebp+var_98] al +
sub eax 6 +
cmp al 5 +
ja sub_449FD2  +
movzx eax al +
jmp ds:off_47F9E0[eax*4]  +
lea edx [ebp+var_68] +
mov ecx 4 +
lea eax [esi+30h] +
call sub_446250  +
mov edx [ebp+var_68] +
test eax eax +
jz loc_449F2E  +
mov eax 0FFFFFFFBh +
jmp loc_44A014  +
***
mov eax 0FFFFFFFEh +
jmp loc_44A014  +
***
mov [ebp+var_9C] 0B0192h +
mov eax [ebp+var_8C] +
mov [esp+0C8h+var_C4] 1 +
mov [ebp+var_A4] ecx +
lea edx [eax+1] +
mov [esp+0C8h+var_C8] edx +
mov [ebp+var_A0] edx +
call calloc  +
test eax eax +
mov esi eax +
jz loc_44AB83  +
movzx eax byte ptr [ebp+var_94] +
mov ecx [ebp+var_90] +
mov [esi] al +
mov [esp+0C8h+var_B8] ecx +
mov [esp+0C8h+var_BC] offset aReportId0x02_0 +
mov [esp+0C8h+var_C0] offset a_hid_get_repor +
mov [esp+0C8h+var_C4] 4 +
mov [esp+0C8h+var_C8] 0 +
call sub_43E390  +
mov eax [ebp+var_8C] +
mov edx [ebp+var_A0] +
mov ecx [ebp+var_A4] +
mov [ebx+24h] eax +
mov [ebp+var_44] eax +
lea eax [ebp+var_44] +
mov [esp+0C8h+var_B0] eax +
mov eax [ebp+var_9C] +
mov [esp+0C8h+var_AC] edi +
mov [esp+0C8h+var_B4] edx +
mov [esp+0C8h+var_B8] esi +
mov [esp+0C8h+var_BC] edx +
mov [esp+0C8h+var_C0] esi +
mov [esp+0C8h+var_C4] eax +
mov [esp+0C8h+var_C8] ecx +
call ds:DeviceIoControl  +
sub esp 20h +
test eax eax +
jz loc_44A8F0  +
mov eax [ebp+var_44] +
test eax eax +
jz loc_44A940  +
movzx edx byte ptr [esi] +
mov ecx [ebp+var_90] +
cmp ecx edx +
jz loc_44A318  +
mov [esp+0C8h+var_B4] ecx +
mov [esp+0C8h+var_B8] edx +
mov [esp+0C8h+var_BC] offset aMismatchedRepo +
mov [esp+0C8h+var_C0] offset a_hid_get_repor +
mov [esp+0C8h+var_C4] 2 +
mov [esp+0C8h+var_C8] 0 +
call sub_43E390  +
mov eax [ebp+var_44] +
cmp [ebp+var_8C] eax +
mov edi 1 +
jb loc_44A4B1  +
***
mov edx [ebp-64h] +
cmp eax edx +
cmova eax edx +
mov edx [ebp-90h] +
mov [ebp-64h] eax +
test edx edx +
jz loc_44A493  +
mov [esp-4+arg_8] eax +
mov eax [ebp-98h] +
mov [esp-4+arg_4] esi +
mov [esp-4+arg_0] eax +
call memcpy  +
mov [esp-4+arg_0] esi +
call free  +
mov eax edi +
cmp eax 1 +
jz loc_44A3B0  +
test eax eax +
jz loc_44A3BF  +
jmp loc_449FFD  +
***
mov [ebp+var_9C] 0B01A2h +
jmp loc_44A21A  +
***
mov ecx [ebp-8Ch] +
mov eax [esi+30h] +
movzx edx word ptr [ecx+2] +
mov [esp+arg_8] edx +
movzx edx word ptr [ecx+4] +
mov [esp+arg_0] eax +
mov dword ptr [esp+0] 0 +
mov [esp+arg_4] edx +
call sub_442330  +
test eax eax +
jnz loc_44A362  +
lea esi [esi+0] +
***
mov ecx [esi+50h] +
mov esi [ebp-94h] +
mov edx [ebp-58h] +
lea eax [ecx+8] +
mov [ebp-90h] eax +
mov eax [ebp-8Ch] +
mov esi [esi+354h] +
movzx eax word ptr [eax+2] +
movzx edi al +
shr ax 8 +
cmp ax 23h +
ja loc_44A8B5  +
movzx eax ax +
jmp ds:off_47F9F8[eax*4]  +
mov eax [ebp-94h] +
mov ecx [ebp-8Ch] +
movzx eax byte ptr [eax+42h] +
cmp [ecx+2] ax +
jz loc_44A3B0  +
mov [esp-4+arg_C] offset aCannotSetConfi +
jmp loc_449FDA  +
mov eax [esi+30h] +
mov eax [eax+10h] +
movzx eax byte ptr [eax+42h] +
test al al +
jz loc_44A972  +
mov edx [esi+50h] +
mov [edx+8] al +
mov edx 1 +
jmp loc_44A3B3  +
mov eax [esi+50h] +
mov edx 1 +
mov byte ptr [eax+8] 0 +
jmp loc_44A3B3  +
mov [esp-4+arg_8] eax +
mov eax [ebp-98h] +
lea edx [esi+1] +
mov [esp-4+arg_4] edx +
mov [esp-4+arg_0] eax +
call memcpy  +
jmp loc_44A358  +
mov [esp-4+arg_C] offset aOverflow +
mov edi 0FFFFFFF8h +
mov [esp-4+arg_8] offset a_hid_get_repor +
mov [esp-4+arg_4] 4 +
mov [esp-4+arg_0] 0 +
call sub_43E390  +
mov eax [ebp-44h] +
jmp loc_44A329  +
mov [esp-4+arg_C] offset aLibusb_dt_stri +
mov [esp-4+arg_8] offset a_hid_get_descr +
mov [esp-4+arg_4] 4 +
mov [esp-4+arg_0] 0 +
mov [ebp-94h] ecx +
call sub_43E390  +
mov eax [ebp-64h] +
mov byte ptr [ebp-44h] 9 +
mov byte ptr [ebp-43h] 4 +
mov [ebp-90h] eax +
sub eax 2 +
cmp eax 0FDh +
mov [ebp-8Ch] eax +
ja loc_44ABC5  +
test edi edi +
mov ecx [ebp-94h] +
jz loc_44AB38  +
movzx eax byte ptr [esi+31Ah] +
cmp edi eax +
jz loc_44ABEA  +
movzx eax byte ptr [esi+31Bh] +
cmp edi eax +
jz loc_44ABE0  +
movzx edx byte ptr [esi+31Ch] +
mov eax 0FFFFFFFEh +
cmp edi edx +
jnz loc_449FFD  +
mov eax 2 +
shl eax 8 +
lea edx [esi+eax+10h] +
lea eax [edx+0Ah] +
movzx edx word ptr [edx+0Ah] +
test dx dx +
jz loc_44ABF1  +
cmp dx 409h +
jz loc_44ABF1  +
xor edi edi +
jmp loc_44A5A3  +
test si si +
jz loc_44A5B1  +
mov edi edx +
lea edx [edi+1] +
movzx esi word ptr [eax+edx*2] +
cmp si 409h +
jnz loc_44A59C  +
lea edx [edi+edi+4] +
test edx edx +
jz loc_44A100  +
mov esi [ebp-90h] +
cmp esi edx +
jbe loc_44A5D5  +
lea edi [edx-2] +
mov esi edx +
mov [ebp-64h] edx +
mov [ebp-8Ch] edi +
mov edi [ebp-8Ch] +
mov edx esi +
add ecx 0Ah +
mov [ecx-2] dl +
mov byte ptr [ecx-1] 3 +
mov [esp-4+arg_4] eax +
mov [esp-4+arg_8] edi +
mov [esp-4+arg_0] ecx +
call memcpy  +
jmp loc_44A3B0  +
mov [esp-4+arg_C] offset aLibusb_dt_conf +
mov [esp-4+arg_8] offset a_hid_get_descr +
mov [esp-4+arg_4] 4 +
mov [esp-4+arg_0] 0 +
call sub_43E390  +
test edi edi +
jnz loc_44A100  +
cmp word ptr [esi+14h] 0 +
lea ecx [ebp-60h] +
mov dword ptr [ebp-60h] 9 +
setnz al  +
cmp word ptr [esi+16h] 0 +
lea edx [eax+1] +
mov byte ptr [ebp-44h] 9 +
cmovnz eax edx +
movsx edx al +
lea edi ds:0[edx*8] +
sub edi edx +
add edi 1Bh +
mov [ebp-37h] al +
lea edx [ebp-32h] +
mov eax esi +
mov byte ptr [ebp-43h] 2 +
mov [ebp-42h] di +
mov byte ptr [ebp-40h] 1 +
mov byte ptr [ebp-3Fh] 1 +
mov byte ptr [ebp-3Eh] 0 +
mov byte ptr [ebp-3Dh] 80h +
mov byte ptr [ebp-3Ch] 32h +
mov byte ptr [ebp-3Bh] 9 +
mov byte ptr [ebp-3Ah] 4 +
mov byte ptr [ebp-39h] 0 +
mov byte ptr [ebp-38h] 0 +
mov byte ptr [ebp-36h] 3 +
mov byte ptr [ebp-35h] 0 +
mov byte ptr [ebp-34h] 0 +
mov byte ptr [ebp-33h] 0 +
call sub_447840  +
movzx edx word ptr [esi+14h] +
lea eax [ebp-29h] +
test dx dx +
jz loc_44A6CB  +
sub edx 1 +
mov byte ptr [ebp-29h] 7 +
lea eax [ebp-22h] +
mov byte ptr [ebp-28h] 5 +
mov byte ptr [ebp-27h] 81h +
mov byte ptr [ebp-26h] 3 +
mov [ebp-25h] dx +
mov byte ptr [ebp-23h] 0Ah +
movzx edx word ptr [esi+16h] +
test dx dx +
jz loc_44A6EE  +
sub edx 1 +
mov byte ptr [eax] 7 +
mov byte ptr [eax+1] 5 +
mov byte ptr [eax+2] 2 +
mov byte ptr [eax+3] 3 +
mov [eax+4] dx +
mov byte ptr [eax+6] 0Ah +
mov eax [ebp-64h] +
cmp edi eax +
jnb loc_44A6FA  +
mov [ebp-64h] edi +
mov eax edi +
mov [esp-4+arg_8] eax +
mov eax [ebp-90h] +
lea edx [ebp-44h] +
mov [esp-4+arg_4] edx +
mov [esp-4+arg_0] eax +
call memcpy  +
jmp loc_44A3B0  +
mov [esp-4+arg_C] offset aLibusb_dt_devi +
mov [esp-4+arg_8] offset a_hid_get_descr +
mov [esp-4+arg_4] 4 +
mov [esp-4+arg_0] 0 +
call sub_43E390  +
movzx eax byte ptr [esi+31Ah] +
movzx ecx word ptr [esi] +
movzx edx word ptr [esi+2] +
movzx edi byte ptr [esi+31Bh] +
mov [ebp-8Ch] al +
movzx eax byte ptr [esi+31Ch] +
mov esi 200h +
mov [ebp-3Ch] cx +
movzx ecx byte ptr [ebp-8Ch] +
mov [ebp-3Ah] dx +
mov edx 100h +
mov byte ptr [ebp-44h] 12h +
mov [ebp-34h] al +
mov eax [ebp-64h] +
mov [ebp-36h] cl +
mov ecx edi +
mov byte ptr [ebp-43h] 1 +
mov [ebp-42h] si +
cmp eax 12h +
mov byte ptr [ebp-40h] 0 +
mov byte ptr [ebp-3Fh] 0 +
mov byte ptr [ebp-3Eh] 0 +
mov byte ptr [ebp-3Dh] 40h +
mov [ebp-38h] dx +
mov [ebp-35h] cl +
mov byte ptr [ebp-33h] 1 +
jbe loc_44A6FA  +
mov dword ptr [ebp-64h] 12h +
mov eax 12h +
jmp loc_44A6FA  +
mov [esp-4+arg_C] offset aLibusb_dt_repo +
mov [esp-4+arg_8] offset a_hid_get_descr +
mov [esp-4+arg_4] 4 +
mov [esp-4+arg_0] 0 +
call sub_43E390  +
test edi edi +
jnz loc_44A100  +
mov edi [ebp-90h] +
movzx edx word ptr [esi+16h] +
movzx ecx word ptr [esi+18h] +
movzx eax word ptr [esi+14h] +
lea esi [ebp-64h] +
mov [esp-4+arg_4] esi +
mov [esp-4+arg_0] edi +
call sub_447660  +
jmp loc_44A362  +
mov [esp-4+arg_C] offset aLibusb_dt_hid +
mov [esp-4+arg_8] offset a_hid_get_descr +
mov [esp-4+arg_4] 4 +
mov [esp-4+arg_0] 0 +
call sub_43E390  +
test edi edi +
jnz loc_44A100  +
mov edx [ebp-90h] +
lea ecx [ebp-64h] +
mov eax esi +
call sub_447840  +
jmp loc_44A362  +
mov [esp-4+arg_C] offset aLibusb_dt_phys +
mov [esp-4+arg_8] offset a_hid_get_descr +
mov [esp-4+arg_4] 4 +
mov [esp-4+arg_0] 0 +
mov [ebp-8Ch] edx +
call sub_43E390  +
mov eax [ebp-64h] +
mov edx [ebp-8Ch] +
mov [esp-4+arg_8] eax +
mov eax [ebp-90h] +
mov [esp-4+arg_0] edx +
mov [esp-4+arg_4] eax +
call ds:dword_485718  +
sub esp 0Ch +
test eax eax +
jnz loc_44A3B0  +
mov eax 0FFFFFF9Dh +
jmp loc_449FFD  +
mov [esp-4+arg_C] offset aUnsupported +
mov [esp-4+arg_8] offset a_hid_get_descr +
mov [esp-4+arg_4] 4 +
mov [esp-4+arg_0] 0 +
call sub_43E390  +
mov eax 0FFFFFFF4h +
jmp loc_449FFD  +
mov eax 0FFFFFFFDh +
jmp loc_44A014  +
call ds:GetLastError  +
cmp eax 3E5h +
jz loc_44A97C  +
xor eax eax +
call sub_442BB0  +
mov [esp-4+arg_C] offset aFailedToReadHi +
mov [esp-4+arg_8] offset a_hid_get_repor +
mov [esp-4+arg_10] eax +
mov [esp-4+arg_4] 4 +
mov [esp-4+arg_0] 0 +
call sub_43E390  +
mov [esp-4+arg_0] esi +
call free  +
mov eax 0FFFFFFFFh +
jmp loc_449FFD  +
mov [esp-4+arg_C] offset aProgramAsser_6 +
xor edi edi +
mov [esp-4+arg_8] offset a_hid_get_repor +
mov [esp-4+arg_4] 2 +
mov [esp-4+arg_0] 0 +
call sub_43E390  +
mov dword ptr [ebp-64h] 0 +
jmp loc_44A358  +
mov eax 0FFFFFFFBh +
jmp loc_449FFD  +
mov eax [ebp-98h] +
mov [ebx+1Ch] esi +
mov [ebx+20h] eax +
jmp loc_44A3BF  +
mov dword ptr [ebp-94h] 0B0191h +
mov esi [ebp-90h] +
mov [esp-4+arg_C] offset aReportId0x02_0 +
mov [esp-4+arg_8] offset a_hid_set_repor +
mov [esp-4+arg_4] 4 +
mov [esp-4+arg_10] esi +
mov [esp-4+arg_0] 0 +
mov [ebp-8Ch] ecx +
call sub_43E390  +
test esi esi +
mov ecx [ebp-8Ch] +
jz loc_44AAC5  +
mov eax [ebp-44h] +
mov [ebp-8Ch] ecx +
mov [esp-4+arg_0] eax +
mov [ebp-9Ch] eax +
call malloc  +
mov ecx [ebp-8Ch] +
test eax eax +
mov esi eax +
jz loc_44AB83  +
mov eax [ebp-64h] +
mov [esp-4+arg_0] esi +
mov [ebp-8Ch] ecx +
mov [esp-4+arg_8] eax +
mov eax [ebp-98h] +
mov [esp-4+arg_4] eax +
call memcpy  +
movzx edx byte ptr [esi] +
cmp [ebp-90h] edx +
mov eax [ebp-9Ch] +
mov ecx [ebp-8Ch] +
jz loc_44AA71  +
mov eax [ebp-90h] +
mov [esp-4+arg_10] edx +
mov [esp-4+arg_C] offset aMismatchedRepo +
mov [esp-4+arg_8] offset a_hid_set_repor +
mov [esp-4+arg_14] eax +
mov [esp-4+arg_4] 2 +
mov [esp-4+arg_0] 0 +
call sub_43E390  +
mov eax [ebp-44h] +
mov ecx [ebp-8Ch] +
mov [esp-4+arg_14] eax +
lea edx [ebp-44h] +
mov [esp-4+arg_C] eax +
mov eax [ebp-94h] +
mov [esp-4+arg_1C] edi +
mov [esp-4+arg_18] edx +
mov [esp-4+arg_10] esi +
mov [esp-4+arg_8] esi +
mov [esp-4+arg_4] eax +
mov [esp-4+arg_0] ecx +
call ds:DeviceIoControl  +
sub esp 20h +
test eax eax +
jz loc_44AB56  +
mov eax [ebp-44h] +
test eax eax +
mov [ebp-64h] eax +
jz loc_44AB8D  +
mov [esp-4+arg_0] esi +
call free  +
jmp loc_44A3B0  +
mov eax [ebp-44h] +
mov [ebp-90h] ecx +
add eax 1 +
mov [esp-4+arg_0] eax +
mov [ebp-8Ch] eax +
mov [ebp-44h] eax +
call malloc  +
mov ecx [ebp-90h] +
test eax eax +
mov esi eax +
jz loc_44AB83  +
mov [ebp-90h] ecx +
mov edx [ebp-64h] +
lea eax [eax+1] +
mov ecx [ebp-98h] +
mov byte ptr [eax-1] 0 +
mov [esp-4+arg_0] eax +
mov [esp-4+arg_8] edx +
mov [esp-4+arg_4] ecx +
call memcpy  +
mov eax [ebp-8Ch] +
mov ecx [ebp-90h] +
jmp loc_44AA71  +
mov dword ptr [ebp-94h] 0B0195h +
jmp loc_44A997  +
lea eax [ebp-44h] +
mov edx 4 +
jmp loc_44A5BD  +
mov [esp-4+arg_10] eax +
mov [esp-4+arg_C] offset aInvalidSizeD +
jmp loc_44A189  +
call ds:GetLastError  +
cmp eax 3E5h +
jz loc_44ABB6  +
xor eax eax +
call sub_442BB0  +
mov [esp-4+arg_C] offset aFailedToWriteH +
mov [esp-4+arg_8] offset a_hid_set_repor +
mov [esp-4+arg_10] eax +
jmp loc_44A918  +
mov eax 0FFFFFFF5h +
jmp loc_449FFD  +
mov [esp-4+arg_C] offset aProgramAsser_7 +
mov [esp-4+arg_8] offset a_hid_set_repor +
mov [esp-4+arg_4] 4 +
mov [esp-4+arg_0] 0 +
call sub_43E390  +
jmp loc_44AAB8  +
mov [ebx+1Ch] esi +
mov dword ptr [ebx+20h] 0 +
jmp loc_44A3BF  +
mov eax 0FFFFFFF8h +
jmp loc_449FFD  +
mov [esp-4+arg_10] edx +
mov [esp-4+arg_C] offset aInvalidSizeD +
jmp loc_44A0E3  +
mov eax 1 +
jmp loc_44A576  +
xor eax eax +
jmp loc_44A576  +
mov edx 2 +
jmp loc_44A5BD  +
***
push edi  +
push esi  +
push ebx  +
sub esp 19Ch +
call ds:GetCurrentProcessId  +
lea ebx [ebp+var_168] +
mov [esp+1A8h+var_1A4] offset aLibusb_init08x +
mov [esp+1A8h+var_1A8] ebx +
mov [esp+1A8h+var_1A0] eax +
call sprintf  +
mov [esp+1A8h+var_19C] ebx +
mov [esp+1A8h+var_1A0] 1 +
mov [esp+1A8h+var_1A4] 1 +
mov [esp+1A8h+var_1A8] 0 +
call ds:CreateSemaphoreA  +
sub esp 10h +
test eax eax +
mov [ebp+var_17C] eax +
jz loc_44C103  +
mov eax [ebp+var_17C] +
mov [esp+1A8h+var_1A4] 0FFFFFFFFh +
mov [esp+1A8h+var_1A8] eax +
mov eax ds:WaitForSingleObject +
mov [ebp+var_180] eax +
call eax  +
sub esp 8 +
test eax eax +
jnz loc_44BE65  +
mov eax dword_461620 +
xor esi esi +
add eax 1 +
test eax eax +
mov dword_461620 eax +
jz loc_44ACE2  +
mov ebx ds:CloseHandle +
xor edi edi +
test esi esi +
jz loc_44ACAE  +
mov [esp+1A8h+var_1A8] esi +
call ebx  +
sub esp 4 +
mov esi [ebp+var_17C] +
mov [esp+1A8h+var_1A0] 0 +
mov [esp+1A8h+var_1A4] 1 +
mov [esp+1A8h+var_1A8] esi +
call ds:ReleaseSemaphore  +
sub esp 0Ch +
mov [esp+1A8h+var_1A8] esi +
call ebx  +
mov eax edi +
sub esp 4 +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ecx 27h +
mov ebx ds:GetVersionExA +
lea edi [ebp+var_154] +
stos   +
lea eax [ebp+var_154] +
mov [ebp+var_154] 9Ch +
mov [esp+1A8h+var_1A8] eax +
call ebx  +
sub esp 4 +
test eax eax +
jz loc_44B551  +
cmp [ebp+var_144] 2 +
jz loc_44AF00  +
xor ebx ebx +
mov [ebp+var_16C] 0 +
mov [esp+1A8h+var_1A8] offset aKernel32_dll +
call ds:GetModuleHandleA  +
sub esp 4 +
test eax eax +
mov esi eax +
jz loc_44BE40  +
mov edi ds:GetProcAddress +
mov [esp+1A8h+var_1A4] offset aIswow64process +
mov [esp+1A8h+var_1A8] esi +
call edi  +
sub esp 8 +
test eax eax +
mov ds:dword_48578C eax +
jz loc_44B85A  +
mov esi eax +
call ds:GetCurrentProcess  +
lea edx [ebp+var_16C] +
mov [esp+1A8h+var_1A4] edx +
mov [esp+1A8h+var_1A8] eax +
call esi  +
sub esp 8 +
mov esi [ebp+var_16C] +
mov eax offset a32Bit +
mov edx offset a64Bit +
test esi esi +
cmovnz eax edx +
test ebx ebx +
jz loc_44B940  +
movzx edx [ebp+var_BE] +
test dx dx +
jnz loc_44B5B4  +
movzx edx [ebp+var_C0] +
test dx dx +
jz loc_44B583  +
mov [esp+1B0h+var_19C] eax +
mov [esp+1B0h+var_1A0] edx +
mov [esp+1B0h+var_1A4] ebx +
mov [esp+1B0h+var_1A8] offset aSSpUS +
mov [esp+1B0h+var_1AC] 76h +
mov [esp+1B0h+var_1B0] offset aUndefined +
call ds:_snprintf  +
mov byte_4616BD 0 +
mov [esp+1B0h+var_1A4] offset unk_461640 +
mov [esp+1B0h+var_1A8] offset aWindows_init +
mov [esp+1B0h+var_1AC] 4 +
mov [esp+1B0h+var_1B0] 0 +
call sub_43E390  +
mov ecx dword_4616C0 +
test ecx ecx +
jnz loc_44AF92  +
mov eax [ebp+arg_0] +
xor esi esi +
mov edi 0FFFFFFF4h +
mov [esp+1B0h+var_1A4] offset aThisVersionOfW +
mov [esp+1B0h+var_1A8] offset aWindows_init +
mov [esp+1B0h+var_1AC] 1 +
mov [esp+1B0h+var_1B0] eax +
call sub_43E390  +
cmp dword_461620 0 +
mov ebx ds:CloseHandle +
jnz loc_44AEF4  +
mov eax ds:dword_4854B0 +
test eax eax +
jz loc_44AEE3  +
mov eax ds:dword_4854AC +
mov [esp+1B0h+var_1A4] 0 +
mov [esp+1B0h+var_1A8] 0 +
mov [esp+1B0h+var_1AC] 402h +
mov [esp+1B0h+var_1B0] eax +
call ds:dword_485758  +
sub esp 10h +
test eax eax +
jz loc_44AF51  +
mov eax ds:dword_4854B0 +
mov [esp+1C0h+var_1BC] 0FFFFFFFFh +
mov [esp+1C0h+var_1C0] eax +
call [ebp+var_180]  +
sub esp 8 +
test eax eax +
jnz loc_44AF51  +
mov eax ds:dword_4854B0 +
mov ebx ds:CloseHandle +
mov [esp+1C8h+var_1C8] eax +
call ebx  +
mov ds:dword_4854B0 0 +
mov ds:dword_4854AC 0 +
sub esp 4 +
call sub_444DA0  +
mov [esp+1C8h+var_1C8] offset unk_487160 +
call sub_44CB10  +
sub dword_461620 1 +
jmp loc_44ACA2  +
mov eax [ebp+var_150] +
cmp eax 6 +
ja loc_44B769  +
mov edx eax +
jz loc_44B75A  +
mov ecx [ebp+var_14C] +
cmp ecx 0Fh +
ja loc_44AD22  +
mov eax edx +
xor edx edx +
cmp [ebp+var_BA] 1 +
setbe dl  +
shl eax 4 +
or eax ecx +
lea ecx [eax-50h] +
cmp ecx 14h +
mov dword_4616C0 eax +
ja loc_44B91D  +
jmp ds:off_480268[ecx*4]  +
mov eax [ebp+arg_0] +
mov [esp+1C0h+var_1B4] offset aCouldNotWaitFo +
mov [esp+1C0h+var_1B8] offset aWindows_init +
mov [esp+1C0h+var_1BC] 2 +
mov [esp+1C0h+var_1C0] eax +
call sub_43E390  +
mov eax ds:dword_4854B0 +
mov [esp+1C0h+var_1BC] 1 +
mov [esp+1C0h+var_1C0] eax +
call ds:TerminateThread  +
sub esp 8 +
jmp loc_44AEBC  +
mov [esp+1B0h+var_1AC] 0 +
mov [esp+1B0h+var_1B0] offset unk_487160 +
call sub_44CAA0  +
call sub_44D940  +
mov esi ds:GetModuleHandleA +
mov [esp+1B0h+var_1B0] offset aCfgmgr32_dll +
call esi  +
sub esp 4 +
test eax eax +
mov edi eax +
jz loc_44BF70  +
mov ebx ds:GetProcAddress +
mov [esp+1B0h+var_1AC] offset aCm_get_parent +
mov [esp+1B0h+var_1B0] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485754 eax +
jz loc_44BA5D  +
mov [esp+1B0h+var_1B0] offset aCfgmgr32_dll +
call esi  +
sub esp 4 +
test eax eax +
mov edi eax +
jz loc_44BF8F  +
mov [esp+1B0h+var_1AC] offset aCm_get_child +
mov [esp+1B0h+var_1B0] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485750 eax +
jz loc_44BB02  +
mov [esp+1B0h+var_1B0] offset aCfgmgr32_dll +
call esi  +
sub esp 4 +
test eax eax +
mov edi eax +
jz loc_44BFCD  +
mov [esp+1B0h+var_1AC] offset aCm_get_sibling +
mov [esp+1B0h+var_1B0] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_48574C eax +
jz loc_44BAC6  +
mov [esp+1B0h+var_1B0] offset aCfgmgr32_dll +
call esi  +
sub esp 4 +
test eax eax +
mov edi eax +
jz loc_44BFAE  +
mov [esp+1B0h+var_1AC] offset aCm_get_device_ +
mov [esp+1B0h+var_1B0] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485748 eax +
jz loc_44BB80  +
mov [esp+1B0h+var_1B0] offset aOle32_dll +
call esi  +
sub esp 4 +
test eax eax +
mov edi eax +
jz loc_44C00B  +
mov [esp+1B0h+var_1AC] offset aClsidfromstrin +
mov [esp+1B0h+var_1B0] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485790 eax +
jz loc_44BB41  +
mov [esp+1B0h+var_1B0] offset aSetupapi_dll +
call esi  +
sub esp 4 +
test eax eax +
mov edi eax +
jz loc_44BFEC  +
mov [esp+1B0h+var_1AC] offset aSetupdigetclas +
mov [esp+1B0h+var_1B0] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485788 eax +
jz loc_44BC00  +
mov [esp+1B0h+var_1B0] offset aSetupapi_dll +
call esi  +
sub esp 4 +
test eax eax +
mov edi eax +
jz loc_44C049  +
mov [esp+1B0h+var_1AC] offset aSetupdienumdev +
mov [esp+1B0h+var_1B0] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485784 eax +
jz loc_44BBC0  +
mov [esp+1B0h+var_1B0] offset aSetupapi_dll +
call esi  +
sub esp 4 +
test eax eax +
mov edi eax +
jz loc_44C02A  +
mov [esp+1B0h+var_1AC] offset aSetupdienumd_0 +
mov [esp+1B0h+var_1B0] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485780 eax +
jz loc_44BC40  +
mov [esp+1B0h+var_1B0] offset aSetupapi_dll +
call esi  +
sub esp 4 +
test eax eax +
mov edi eax +
jz loc_44C068  +
mov [esp+1B0h+var_1AC] offset aSetupdigetdevi +
mov [esp+1B0h+var_1B0] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_48577C eax +
jz loc_44BC80  +
mov [esp+1B0h+var_1B0] offset aSetupapi_dll +
call esi  +
sub esp 4 +
test eax eax +
mov edi eax +
jz loc_44C087  +
mov [esp+1B0h+var_1AC] offset aSetupdidestroy +
mov [esp+1B0h+var_1B0] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485778 eax +
jz loc_44BCC0  +
mov [esp+1B0h+var_1B0] offset aSetupapi_dll +
call esi  +
sub esp 4 +
test eax eax +
mov edi eax +
jz loc_44C0A6  +
mov [esp+1B0h+var_1AC] offset aSetupdiopendev +
mov [esp+1B0h+var_1B0] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485774 eax +
jz loc_44BD00  +
mov [esp+1B0h+var_1B0] offset aSetupapi_dll +
call esi  +
sub esp 4 +
test eax eax +
mov edi eax +
jz loc_44C139  +
mov [esp+1B0h+var_1AC] offset aSetupdigetde_0 +
mov [esp+1B0h+var_1B0] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485770 eax +
jz loc_44BD40  +
mov [esp+1B0h+var_1B0] offset aSetupapi_dll +
call esi  +
sub esp 4 +
test eax eax +
mov edi eax +
jz loc_44C158  +
mov [esp+1B0h+var_1AC] offset aSetupdiopend_0 +
mov [esp+1B0h+var_1B0] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_48576C eax +
jz loc_44BD80  +
mov [esp+1B0h+var_1B0] offset aAdvapi32_dll +
call esi  +
sub esp 4 +
test eax eax +
mov edi eax +
jz loc_44C177  +
mov [esp+1B0h+var_1AC] offset aRegqueryvaluee +
mov [esp+1B0h+var_1B0] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485768 eax +
jz loc_44BE00  +
mov [esp+1B0h+var_1B0] offset aAdvapi32_dll +
call esi  +
sub esp 4 +
test eax eax +
mov edi eax +
jz loc_44C0C5  +
mov [esp+1B0h+var_1AC] offset aRegclosekey +
mov [esp+1B0h+var_1B0] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485764 eax +
jz loc_44BDC0  +
mov [esp+1B0h+var_1B0] offset aUser32_dll +
call esi  +
sub esp 4 +
test eax eax +
mov edi eax +
jz loc_44C196  +
mov [esp+1B0h+var_1AC] offset aGetmessagea +
mov [esp+1B0h+var_1B0] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485760 eax +
jz loc_44BEF0  +
mov [esp+1B0h+var_1B0] offset aUser32_dll +
call esi  +
sub esp 4 +
test eax eax +
mov edi eax +
jz loc_44C0E4  +
mov [esp+1B0h+var_1AC] offset aPeekmessagea +
mov [esp+1B0h+var_1B0] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_48575C eax +
jz loc_44BEAF  +
mov [esp+1B0h+var_1B0] offset aUser32_dll +
call esi  +
sub esp 4 +
test eax eax +
mov esi eax +
jz loc_44C1B5  +
mov [esp+1B0h+var_1AC] offset aPostthreadme_0 +
mov [esp+1B0h+var_1B0] esi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485758 eax +
jz loc_44BF30  +
mov ebx offset off_480AD0 +
mov edi [ebp+arg_0] +
add ebx 50h +
mov eax [ebx-50h] +
mov [esp+1B0h+var_1B0] 0FFFFFFFFh +
mov [esp+1B0h+var_1AC] edi +
call eax  +
cmp ebx offset aDhid +
jnz loc_44B352  +
lea eax [ebp+var_B8] +
mov [esp+1B0h+var_1B0] eax +
call ds:QueryPerformanceFrequency  +
sub esp 4 +
test eax eax +
jz loc_44B5F4  +
mov edi [ebp+var_B4] +
mov esi [ebp+var_B8] +
mov [esp+1B0h+var_1B0] 0D4A51000h +
mov [esp+1B0h+var_1AC] 0E8h +
mov [esp+1B0h+var_1A4] edi +
mov [esp+1B0h+var_1A8] esi +
mov ds:dword_48716C edi +
mov ds:dword_487168 esi +
call sub_458110  +
mov [esp+1B0h+var_19C] edi +
lea edi [ebp+var_154] +
mov [esp+1B0h+var_1A0] esi +
mov [esp+1B0h+var_1A4] offset aHiresTimerAvai +
mov [esp+1B0h+var_1A8] offset aWindows_init +
mov [esp+1B0h+var_1AC] 4 +
mov [esp+1B0h+var_1B0] 0 +
mov ds:dword_48717C edx +
mov ds:dword_487178 eax +
call sub_43E390  +
call ds:GetCurrentProcess  +
lea edx [ebp+var_16C] +
mov [esp+1B0h+var_1A8] edi +
mov [esp+1B0h+var_1AC] edx +
mov [esp+1B0h+var_1B0] eax +
call ds:GetProcessAffinityMask  +
sub esp 0Ch +
test eax eax +
jz loc_44B820  +
mov eax [ebp+var_16C] +
test eax eax +
jz loc_44B820  +
xor ecx ecx +
test al 1 +
mov edx 1 +
mov ebx 1 +
jnz loc_44B44C  +
add ecx 1 +
mov ebx edx +
shl ebx cl +
test eax ebx +
jz loc_44B441  +
mov [esp+1B0h+var_1A0] ecx +
mov [esp+1B0h+var_1A4] offset aTimerThreadWil +
mov [esp+1B0h+var_1A8] offset aWindows_init +
mov [esp+1B0h+var_1AC] 4 +
mov [esp+1B0h+var_1B0] 0 +
mov [ebp+var_16C] ebx +
call sub_43E390  +
mov [esp+1B0h+var_1A4] 0 +
mov [esp+1B0h+var_1A8] 0 +
mov [esp+1B0h+var_1AC] 0 +
mov [esp+1B0h+var_1B0] 0 +
call ds:CreateEventA  +
sub esp 10h +
test eax eax +
mov esi eax +
jz loc_44C1FC  +
mov [esp+1B0h+var_19C] offset dword_4854AC +
mov [esp+1B0h+var_1A0] 0 +
mov [esp+1B0h+var_1A4] eax +
mov [esp+1B0h+var_1A8] offset sub_442DB0 +
mov [esp+1B0h+var_1AC] 0 +
mov [esp+1B0h+var_1B0] 0 +
call ds:_beginthreadex  +
test eax eax +
mov ds:dword_4854B0 eax +
jz loc_44C234  +
mov edx [ebp+var_16C] +
mov [esp+1B0h+var_1B0] eax +
mov [esp+1B0h+var_1AC] edx +
call ds:SetThreadAffinityMask  +
sub esp 8 +
test eax eax +
jz loc_44C1D4  +
mov [esp+1B0h+var_1AC] 0FFFFFFFFh +
mov [esp+1B0h+var_1B0] esi +
call [ebp+var_180]  +
sub esp 8 +
test eax eax +
jz loc_44B642  +
mov [esp+1B8h+var_1AC] offset aFailedToWaitFo +
mov eax [ebp+arg_0] +
mov edi 0FFFFFFF5h +
mov [esp+1B8h+var_1B0] offset aWindows_init +
mov [esp+1B8h+var_1B4] 1 +
mov [esp+1B8h+var_1B8] eax +
call sub_43E390  +
jmp loc_44AE4E  +
mov ecx 27h +
lea edi [ebp+var_154] +
stos   +
lea eax [ebp+var_154] +
mov [ebp+var_154] 94h +
mov [esp+1A8h+var_1A8] eax +
call ebx  +
sub esp 4 +
test eax eax +
jz loc_44ADF2  +
jmp loc_44AD15  +
mov [esp+1B0h+var_1A0] eax +
mov [esp+1B0h+var_1A4] ebx +
mov [esp+1B0h+var_1A8] offset aSS +
mov [esp+1B0h+var_1AC] 76h +
mov [esp+1B0h+var_1B0] offset aUndefined +
call ds:_snprintf  +
mov byte_4616BD 0 +
jmp loc_44ADF2  +
mov [esp+1B0h+var_198] eax +
movzx eax [ebp+var_C0] +
mov [esp+1B0h+var_19C] edx +
mov [esp+1B0h+var_1A4] ebx +
mov [esp+1B0h+var_1A8] offset aSSpU_US +
mov [esp+1B0h+var_1A0] eax +
mov [esp+1B0h+var_1AC] 76h +
mov [esp+1B0h+var_1B0] offset aUndefined +
call ds:_snprintf  +
mov byte_4616BD 0 +
jmp loc_44ADF2  +
mov [esp+1B0h+var_1A4] offset aNoHiresTimerAv +
xor esi esi +
mov [esp+1B0h+var_1A8] offset aWindows_init +
mov [esp+1B0h+var_1AC] 4 +
mov [esp+1B0h+var_1B0] 0 +
call sub_43E390  +
mov ds:dword_487168 0 +
mov ds:dword_48716C 0 +
mov ds:dword_487178 0 +
mov ds:dword_48717C 0 +
mov edx ds:dword_4854A4 +
test edx edx +
jz loc_44B66F  +
mov eax [ebp+arg_0] +
mov [esp+1B0h+var_1A4] offset aHashTableAlrea +
mov [esp+1B0h+var_1A8] offset aHtab_create +
mov [esp+1B0h+var_1AC] 1 +
mov [esp+1B0h+var_1B0] eax +
call sub_43E390  +
mov [esp+1B0h+var_1AC] 0 +
mov ebx 3FDh +
mov edi 0AAAAAAABh +
mov [esp+1B0h+var_1B0] offset unk_4854A0 +
call sub_44CAA0  +
lea esi [esi+0] +
cmp ebx 9 +
jbe loc_44B999  +
mov eax ebx +
mul  edi +
shr edx 1 +
lea eax [edx+edx*2] +
cmp ebx eax +
jz loc_44B6D0  +
mov ecx 3 +
jmp loc_44B6BA  +
xor edx edx +
mov eax ebx +
div  ecx +
test edx edx +
jz loc_44B6D0  +
add ecx 2 +
mov eax ecx +
imul eax ecx +
cmp ebx eax +
ja loc_44B6B0  +
xor edx edx +
mov eax ebx +
div  ecx +
test edx edx +
jnz loc_44B6D5  +
add ebx 2 +
jmp loc_44B690  +
mov [esp+1B0h+var_1A0] ebx +
mov [esp+1B0h+var_1A4] offset aUsingDEntriesH +
mov [esp+1B0h+var_1A8] offset aHtab_create +
mov [esp+1B0h+var_1AC] 4 +
mov [esp+1B0h+var_1B0] 0 +
mov ds:dword_487180 ebx +
call sub_43E390  +
mov eax ds:dword_487180 +
mov [esp+1B0h+var_1AC] 8 +
mov ds:dword_487170 0 +
add eax 1 +
mov [esp+1B0h+var_1B0] eax +
call calloc  +
test eax eax +
mov ds:dword_4854A4 eax +
jnz loc_44AC9A  +
mov eax [ebp+arg_0] +
mov [esp+1B0h+var_1A4] offset aCouldNotAlloca +
mov [esp+1B0h+var_1A8] offset aHtab_create +
mov [esp+1B0h+var_1AC] 1 +
mov [esp+1B0h+var_1B0] eax +
call sub_43E390  +
jmp loc_44AC9A  +
mov ecx [ebp+var_14C] +
cmp ecx 1 +
jbe loc_44AF28  +
mov eax ds:VerSetConditionMask +
mov [esp+1A8h+var_19C] 1 +
mov [esp+1A8h+var_1A0] 2 +
mov [esp+1A8h+var_1A8] 0 +
mov [esp+1A8h+var_1A4] 0 +
mov [ebp+var_18C] eax +
call eax  +
mov esi [ebp+var_150] +
sub esp 10h +
cmp esi 9 +
mov [ebp+var_188] eax +
mov [ebp+var_184] edx +
ja loc_44C241  +
lea ebx [ebp+var_B8] +
xor eax eax +
mov edi ebx +
mov edx [ebp+var_184] +
mov ecx 27h +
stos   +
mov eax [ebp+var_188] +
mov [ebp+var_B8] 9Ch +
mov [ebp+var_B4] esi +
mov [esp+1B8h+var_1AC] edx +
mov [esp+1B8h+var_1B0] eax +
mov [esp+1B8h+var_1B4] 2 +
mov [esp+1B8h+var_1B8] ebx +
call ds:VerifyVersionInfoA  +
sub esp 10h +
test eax eax +
jnz loc_44B9A3  +
add esi 1 +
cmp esi 0Ah +
jnz loc_44B7B9  +
mov edx [ebp+var_150] +
cmp edx 0Fh +
ja loc_44AD22  +
jmp loc_44AF17  +
xor eax eax +
xor esi esi +
call sub_442BB0  +
mov edi 0FFFFFF9Dh +
mov [esp+1B0h+var_1A4] offset aCouldNotGetPro +
mov [esp+1B0h+var_1A8] offset aWindows_init +
mov [esp+1B0h+var_1AC] 1 +
mov [esp+1B0h+var_1A0] eax +
mov eax [ebp+arg_0] +
mov [esp+1B0h+var_1B0] eax +
call sub_43E390  +
jmp loc_44AE4E  +
mov [esp+1A8h+var_1A4] offset aIswow64proce_0 +
mov [esp+1A8h+var_1A8] esi +
call edi  +
sub esp 8 +
test eax eax +
mov ds:dword_48578C eax +
jnz loc_44AD6B  +
mov [esp+1B0h+var_1B0] esi +
mov [esp+1B0h+var_1AC] offset aIswow64proce_1 +
call edi  +
sub esp 8 +
mov esi eax +
mov ds:dword_48578C eax +
test esi esi +
jz loc_44AD85  +
jmp loc_44AD6D  +
mov ebx offset a10 +
test edx edx +
mov eax offset a2015 +
cmovz ebx eax +
jmp loc_44AD24  +
mov ebx offset a8_1 +
test edx edx +
mov eax offset a2012_r2 +
cmovz ebx eax +
jmp loc_44AD24  +
mov ebx offset a8 +
test edx edx +
mov eax offset a2012 +
cmovz ebx eax +
jmp loc_44AD24  +
mov ebx offset a7 +
test edx edx +
mov eax offset a2008_r2 +
cmovz ebx eax +
jmp loc_44AD24  +
mov ebx offset aVista +
test edx edx +
mov eax offset a2008 +
cmovz ebx eax +
jmp loc_44AD24  +
mov ebx offset a2003 +
jmp loc_44AD24  +
mov ebx offset aXp +
jmp loc_44AD24  +
mov ebx offset a2000 +
jmp loc_44AD24  +
cmp eax 4Fh +
mov ebx offset a11OrLater +
jg loc_44AD24  +
mov dword_4616C0 0 +
jmp loc_44AD22  +
mov [esp+1B0h+var_198] eax +
mov eax [ebp+var_14C] +
mov ecx offset a?? +
cmp [ebp+var_144] 2 +
mov edx offset aNt +
mov [esp+1B0h+var_1A8] offset aSU_US +
mov [esp+1B0h+var_1AC] 76h +
mov [esp+1B0h+var_19C] eax +
mov eax [ebp+var_150] +
cmovnz edx ecx +
mov [esp+1B0h+var_1A4] edx +
mov [esp+1B0h+var_1B0] offset aUndefined +
mov [esp+1B0h+var_1A0] eax +
call ds:_snprintf  +
mov byte_4616BD 0 +
jmp loc_44ADF2  +
mov ecx 3 +
jmp loc_44B6C6  +
cmp [ebp+var_150] esi +
jnb loc_44B9BB  +
mov [ebp+var_150] esi +
mov [ebp+var_14C] 0 +
mov [esp+1C8h+var_1BC] 1 +
mov [esp+1C8h+var_1C0] 1 +
mov [esp+1C8h+var_1C8] 0 +
mov [esp+1C8h+var_1C4] 0 +
call [ebp+var_18C]  +
mov esi [ebp+var_14C] +
sub esp 10h +
cmp esi 9 +
mov [ebp+var_188] eax +
mov [ebp+var_184] edx +
ja loc_44B80C  +
xor eax eax +
mov edi ebx +
mov edx [ebp+var_184] +
mov ecx 27h +
stos   +
mov eax [ebp+var_188] +
mov [ebp+var_B8] 9Ch +
mov [ebp+var_B0] esi +
mov [esp+1D8h+var_1CC] edx +
mov [esp+1D8h+var_1D0] eax +
mov [esp+1D8h+var_1D4] 1 +
mov [esp+1D8h+var_1D8] ebx +
call ds:VerifyVersionInfoA  +
sub esp 10h +
test eax eax +
jnz loc_44BA52  +
add esi 1 +
cmp esi 0Ah +
jnz loc_44B9FE  +
jmp loc_44B80C  +
mov [ebp+var_14C] esi +
jmp loc_44B80C  +
mov [esp+1B0h+var_1AC] offset aCm_get_parenta +
mov [esp+1B0h+var_1B0] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485754 eax +
jnz loc_44AFEA  +
mov [esp+1B8h+var_1B4] offset aCm_get_parentw +
mov [esp+1B8h+var_1B8] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485754 eax +
jnz loc_44AFEA  +
mov eax [ebp+arg_0] +
xor esi esi +
mov edi 0FFFFFF9Dh +
mov [esp+1C0h+var_1B4] offset aCouldNotResolv +
mov [esp+1C0h+var_1B8] offset aWindows_init +
mov [esp+1C0h+var_1BC] 1 +
mov [esp+1C0h+var_1C0] eax +
call sub_43E390  +
jmp loc_44AE4E  +
mov [esp+1B0h+var_1AC] offset aCm_get_sibli_0 +
mov [esp+1B0h+var_1B0] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_48574C eax +
jnz loc_44B050  +
mov [esp+1B8h+var_1B4] offset aCm_get_sibli_1 +
mov [esp+1B8h+var_1B8] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_48574C eax +
jnz loc_44B050  +
jmp loc_44BA97  +
mov [esp+1B0h+var_1AC] offset aCm_get_childa +
mov [esp+1B0h+var_1B0] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485750 eax +
jnz loc_44B01D  +
mov [esp+1B8h+var_1B4] offset aCm_get_childw +
mov [esp+1B8h+var_1B8] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485750 eax +
jnz loc_44B01D  +
jmp loc_44BA97  +
mov [esp+1B0h+var_1AC] offset aClsidfromstr_0 +
mov [esp+1B0h+var_1B0] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485790 eax +
jnz loc_44B0B6  +
mov [esp+1B8h+var_1B4] offset aClsidfromstr_1 +
mov [esp+1B8h+var_1B8] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485790 eax +
jnz loc_44B0B6  +
jmp loc_44BA97  +
mov [esp+1B0h+var_1AC] offset aCm_get_devic_0 +
mov [esp+1B0h+var_1B0] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485748 eax +
jnz loc_44B083  +
mov [esp+1B8h+var_1B4] offset aCm_get_devic_1 +
mov [esp+1B8h+var_1B8] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485748 eax +
jnz loc_44B083  +
jmp loc_44BA97  +
mov [esp+1B0h+var_1AC] offset aSetupdienumd_1 +
mov [esp+1B0h+var_1B0] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485784 eax +
jnz loc_44B11C  +
mov [esp+1B8h+var_1B4] offset aSetupdienumd_2 +
mov [esp+1B8h+var_1B8] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485784 eax +
jnz loc_44B11C  +
jmp loc_44BA97  +
mov [esp+1B0h+var_1AC] offset aSetupdigetcl_0 +
mov [esp+1B0h+var_1B0] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485788 eax +
jnz loc_44B0E9  +
mov [esp+1B8h+var_1B4] offset aSetupdigetcl_1 +
mov [esp+1B8h+var_1B8] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485788 eax +
jnz loc_44B0E9  +
jmp loc_44BA97  +
mov [esp+1B0h+var_1AC] offset aSetupdienumd_3 +
mov [esp+1B0h+var_1B0] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485780 eax +
jnz loc_44B14F  +
mov [esp+1B8h+var_1B4] offset aSetupdienumd_4 +
mov [esp+1B8h+var_1B8] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485780 eax +
jnz loc_44B14F  +
jmp loc_44BA97  +
mov [esp+1B0h+var_1AC] offset aSetupdigetde_1 +
mov [esp+1B0h+var_1B0] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_48577C eax +
jnz loc_44B182  +
mov [esp+1B8h+var_1B4] offset aSetupdigetde_2 +
mov [esp+1B8h+var_1B8] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_48577C eax +
jnz loc_44B182  +
jmp loc_44BA97  +
mov [esp+1B0h+var_1AC] offset aSetupdidestr_0 +
mov [esp+1B0h+var_1B0] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485778 eax +
jnz loc_44B1B5  +
mov [esp+1B8h+var_1B4] offset aSetupdidestr_1 +
mov [esp+1B8h+var_1B8] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485778 eax +
jnz loc_44B1B5  +
jmp loc_44BA97  +
mov [esp+1B0h+var_1AC] offset aSetupdiopend_1 +
mov [esp+1B0h+var_1B0] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485774 eax +
jnz loc_44B1E8  +
mov [esp+1B8h+var_1B4] offset aSetupdiopend_2 +
mov [esp+1B8h+var_1B8] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485774 eax +
jnz loc_44B1E8  +
jmp loc_44BA97  +
mov [esp+1B0h+var_1AC] offset aSetupdigetde_3 +
mov [esp+1B0h+var_1B0] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485770 eax +
jnz loc_44B21B  +
mov [esp+1B8h+var_1B4] offset aSetupdigetde_4 +
mov [esp+1B8h+var_1B8] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485770 eax +
jnz loc_44B21B  +
jmp loc_44BA97  +
mov [esp+1B0h+var_1AC] offset aSetupdiopend_3 +
mov [esp+1B0h+var_1B0] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_48576C eax +
jnz loc_44B24E  +
mov [esp+1B8h+var_1B4] offset aSetupdiopend_4 +
mov [esp+1B8h+var_1B8] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_48576C eax +
jnz loc_44B24E  +
jmp loc_44BA97  +
mov [esp+1B0h+var_1AC] offset aRegclosekeya +
mov [esp+1B0h+var_1B0] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485764 eax +
jnz loc_44B2B4  +
mov [esp+1B8h+var_1B4] offset aRegclosekeyw +
mov [esp+1B8h+var_1B8] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485764 eax +
jnz loc_44B2B4  +
jmp loc_44BA97  +
mov [esp+1B0h+var_1AC] offset aRegqueryvalu_0 +
mov [esp+1B0h+var_1B0] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485768 eax +
jnz loc_44B281  +
mov [esp+1B8h+var_1B4] offset aRegqueryvalu_1 +
mov [esp+1B8h+var_1B8] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485768 eax +
jnz loc_44B281  +
jmp loc_44BA97  +
mov [esp+1A8h+var_1A8] offset aKernel32_dll +
call ds:LoadLibraryA  +
sub esp 4 +
test eax eax +
mov esi eax +
jnz loc_44AD48  +
mov esi ds:dword_48578C +
jmp loc_44B88E  +
xor eax eax +
call sub_442BB0  +
mov [esp+1A8h+var_19C] offset aFailureToAcces +
mov [esp+1A8h+var_1A0] offset aWindows_init +
mov [esp+1A8h+var_1A4] 1 +
mov [esp+1A8h+var_198] eax +
mov eax [ebp+arg_0] +
mov [esp+1A8h+var_1A8] eax +
call sub_43E390  +
mov eax [ebp+var_17C] +
mov [esp+1A8h+var_1A8] eax +
call ds:CloseHandle  +
mov eax 0FFFFFFF5h +
sub esp 4 +
jmp loc_44ACDA  +
mov [esp+1B0h+var_1AC] offset aPeekmessageaa +
mov [esp+1B0h+var_1B0] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_48575C eax +
jnz loc_44B31A  +
mov [esp+1B8h+var_1B4] offset aPeekmessageaw +
mov [esp+1B8h+var_1B8] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_48575C eax +
jnz loc_44B31A  +
jmp loc_44BA97  +
mov [esp+1B0h+var_1AC] offset aGetmessageaa +
mov [esp+1B0h+var_1B0] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485760 eax +
jnz loc_44B2E7  +
mov [esp+1B8h+var_1B4] offset aGetmessageaw +
mov [esp+1B8h+var_1B8] edi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485760 eax +
jnz loc_44B2E7  +
jmp loc_44BA97  +
mov [esp+1B0h+var_1AC] offset aPostthreadme_1 +
mov [esp+1B0h+var_1B0] esi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485758 eax +
jnz loc_44B34D  +
mov [esp+1B8h+var_1B4] offset aPostthreadme_2 +
mov [esp+1B8h+var_1B8] esi +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_485758 eax +
jnz loc_44B34D  +
jmp loc_44BA97  +
mov [esp+1B0h+var_1B0] offset aCfgmgr32_dll +
call ds:LoadLibraryA  +
sub esp 4 +
test eax eax +
mov edi eax +
jnz loc_44AFC7  +
jmp loc_44BA97  +
mov [esp+1B0h+var_1B0] offset aCfgmgr32_dll +
call ds:LoadLibraryA  +
sub esp 4 +
test eax eax +
mov edi eax +
jnz loc_44B000  +
jmp loc_44BA97  +
mov [esp+1B0h+var_1B0] offset aCfgmgr32_dll +
call ds:LoadLibraryA  +
sub esp 4 +
test eax eax +
mov edi eax +
jnz loc_44B066  +
jmp loc_44BA97  +
mov [esp+1B0h+var_1B0] offset aCfgmgr32_dll +
call ds:LoadLibraryA  +
sub esp 4 +
test eax eax +
mov edi eax +
jnz loc_44B033  +
jmp loc_44BA97  +
mov [esp+1B0h+var_1B0] offset aSetupapi_dll +
call ds:LoadLibraryA  +
sub esp 4 +
test eax eax +
mov edi eax +
jnz loc_44B0CC  +
jmp loc_44BA97  +
mov [esp+1B0h+var_1B0] offset aOle32_dll +
call ds:LoadLibraryA  +
sub esp 4 +
test eax eax +
mov edi eax +
jnz loc_44B099  +
jmp loc_44BA97  +
mov [esp+1B0h+var_1B0] offset aSetupapi_dll +
call ds:LoadLibraryA  +
sub esp 4 +
test eax eax +
mov edi eax +
jnz loc_44B132  +
jmp loc_44BA97  +
mov [esp+1B0h+var_1B0] offset aSetupapi_dll +
call ds:LoadLibraryA  +
sub esp 4 +
test eax eax +
mov edi eax +
jnz loc_44B0FF  +
jmp loc_44BA97  +
mov [esp+1B0h+var_1B0] offset aSetupapi_dll +
call ds:LoadLibraryA  +
sub esp 4 +
test eax eax +
mov edi eax +
jnz loc_44B165  +
jmp loc_44BA97  +
mov [esp+1B0h+var_1B0] offset aSetupapi_dll +
call ds:LoadLibraryA  +
sub esp 4 +
test eax eax +
mov edi eax +
jnz loc_44B198  +
jmp loc_44BA97  +
mov [esp+1B0h+var_1B0] offset aSetupapi_dll +
call ds:LoadLibraryA  +
sub esp 4 +
test eax eax +
mov edi eax +
jnz loc_44B1CB  +
jmp loc_44BA97  +
mov [esp+1B0h+var_1B0] offset aAdvapi32_dll +
call ds:LoadLibraryA  +
sub esp 4 +
test eax eax +
mov edi eax +
jnz loc_44B297  +
jmp loc_44BA97  +
mov [esp+1B0h+var_1B0] offset aUser32_dll +
call ds:LoadLibraryA  +
sub esp 4 +
test eax eax +
mov edi eax +
jnz loc_44B2FD  +
jmp loc_44BA97  +
call sub_442BB0  +
mov [esp+1A8h+var_19C] offset aCouldNotCreate +
mov [esp+1A8h+var_1A0] offset aWindows_init +
mov [esp+1A8h+var_1A4] 1 +
mov [esp+1A8h+var_198] eax +
mov eax [ebp+arg_0] +
mov [esp+1A8h+var_1A8] eax +
call sub_43E390  +
mov eax 0FFFFFFF5h +
jmp loc_44ACDA  +
mov [esp+1B0h+var_1B0] offset aSetupapi_dll +
call ds:LoadLibraryA  +
sub esp 4 +
test eax eax +
mov edi eax +
jnz loc_44B1FE  +
jmp loc_44BA97  +
mov [esp+1B0h+var_1B0] offset aSetupapi_dll +
call ds:LoadLibraryA  +
sub esp 4 +
test eax eax +
mov edi eax +
jnz loc_44B231  +
jmp loc_44BA97  +
mov [esp+1B0h+var_1B0] offset aAdvapi32_dll +
call ds:LoadLibraryA  +
sub esp 4 +
test eax eax +
mov edi eax +
jnz loc_44B264  +
jmp loc_44BA97  +
mov [esp+1B0h+var_1B0] offset aUser32_dll +
call ds:LoadLibraryA  +
sub esp 4 +
test eax eax +
mov edi eax +
jnz loc_44B2CA  +
jmp loc_44BA97  +
mov [esp+1B0h+var_1B0] offset aUser32_dll +
call ds:LoadLibraryA  +
sub esp 4 +
test eax eax +
mov esi eax +
jnz loc_44B330  +
jmp loc_44BA97  +
mov eax [ebp+arg_0] +
mov [esp+1B0h+var_1A4] offset aUnableToSetTim +
mov [esp+1B0h+var_1A8] offset aWindows_init +
mov [esp+1B0h+var_1AC] 2 +
mov [esp+1B0h+var_1B0] eax +
call sub_43E390  +
jmp loc_44B508  +
xor eax eax +
mov edi 0FFFFFFF5h +
call sub_442BB0  +
mov [esp+1B0h+var_1A4] offset aCouldNotCrea_0 +
mov [esp+1B0h+var_1A8] offset aWindows_init +
mov [esp+1B0h+var_1AC] 1 +
mov [esp+1B0h+var_1A0] eax +
mov eax [ebp+arg_0] +
mov [esp+1B0h+var_1B0] eax +
call sub_43E390  +
jmp loc_44AE4E  +
mov [esp+1B0h+var_1A4] offset aUnableToCreate +
jmp loc_44B52C  +
mov edx esi +
jmp loc_44B812  +
***
push edi  +
push esi  +
push ebx  +
sub esp 0BCh +
mov eax [ebp+arg_4] +
mov ebx [ebp+arg_0] +
mov eax [eax+10h] +
mov edi [eax+8] +
mov [ebp+var_80] eax +
mov eax [eax+48h] +
mov [ebp+var_84] edi +
cmp byte ptr [eax] 2 +
mov [ebp+var_61] 5C2E5C5Ch +
mov [ebp+var_5D] 7562696Ch +
setz dl  +
cmp ebx 0FFFFFFFFh +
mov [ebp+var_59] 2D306273h +
mov [ebp+var_55] 30303030h +
mov [ebp+var_51] 0 +
jz loc_44C471  +
imul eax ebx +
mov esi ds:dword_485600[eax] +
test esi esi +
jz loc_44C467  +
mov ecx [ebp+arg_8] +
test ecx ecx +
jz loc_44C2C3  +
test dl dl +
jz loc_44C350  +
mov eax [ebp+arg_4] +
mov edi [ebp+arg_8] +
lea eax [eax+edi*8] +
mov [ebp+var_94] eax +
mov eax [eax+1Ch] +
lea edx [eax-1] +
cmp edx 0FFFFFFFDh +
ja loc_44C9E0  +
imul ebx ebx +
lea esi [ebp+var_78] +
mov [esp+0C8h+var_C4] esi +
mov [esp+0C8h+var_C8] eax +
call ds:dword_48562C[ebx]  +
sub esp 8 +
test eax eax +
jz loc_44C480  +
mov eax [ebp+var_78] +
mov edi [ebp+var_94] +
mov [edi+20h] eax +
mov eax [ebp+arg_8] +
mov [esp+0D0h+var_C4] offset aClaimedInterfa +
mov [esp+0D0h+var_C8] offset aWinusbx_claim_ +
mov [esp+0D0h+var_CC] 4 +
mov [esp+0D0h+var_C0] eax +
mov [esp+0D0h+var_D0] 0 +
call sub_43E390  +
mov eax [ebp+arg_4] +
mov esi [ebp+arg_8] +
mov [eax+18h] esi +
xor eax eax +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi [ebp+arg_4] +
mov edx [esi+20h] +
lea ecx [edx-1] +
cmp ecx 0FFFFFFFDh +
mov [ebp+var_78] edx +
jbe loc_44C3BA  +
mov ecx [esi+1Ch] +
lea edx [ebp+var_78] +
mov eax ds:dword_48562C[eax] +
mov [esp+0C8h+var_C4] edx +
mov [esp+0C8h+var_C8] ecx +
call eax  +
sub esp 8 +
test eax eax +
jz loc_44CA19  +
mov eax [ebp+var_78] +
mov esi [ebp+arg_4] +
mov [esi+20h] eax +
mov eax [ebp+arg_8] +
mov [esp+0D0h+var_C4] offset aAutoClaimedI_0 +
mov [esp+0D0h+var_C8] offset aWinusbx_claim_ +
mov [esp+0D0h+var_CC] 2 +
mov [esp+0D0h+var_C0] eax +
mov eax [ebp+var_84] +
mov [esp+0D0h+var_D0] eax +
call sub_43E390  +
mov edx [ebp+var_78] +
mov edi [ebp+arg_4] +
imul ebx ebx +
mov esi [ebp+arg_8] +
mov [esp+0D0h+var_D0] edx +
mov eax ds:dword_485614[ebx] +
lea ecx [edi+esi*8+20h] +
movzx edi byte ptr [ebp+arg_8] +
mov [esp+0D0h+var_C8] ecx +
lea ecx [edi-1] +
movzx ecx cl +
mov [esp+0D0h+var_CC] ecx +
call eax  +
sub esp 0Ch +
test eax eax +
jnz loc_44C30B  +
mov eax [ebp+arg_4] +
mov edi [ebp+arg_8] +
mov dword ptr [eax+edi*8+20h] 0FFFFFFFFh +
call ds:GetLastError  +
mov edx eax +
mov eax 0FFFFFFFAh +
cmp edx 0B7h +
jz loc_44C341  +
cmp edx 103h +
mov al 0FBh +
jz loc_44C341  +
cmp edx 16h +
mov al 0FCh +
jz loc_44C341  +
xor eax eax +
call sub_442BB0  +
mov [esp+0DCh+var_D0] offset aCouldNotClaimI +
mov [esp+0DCh+var_C8] eax +
mov eax [ebp+arg_8] +
mov [esp+0DCh+var_CC] eax +
mov eax [ebp+var_84] +
mov [esp+0DCh+var_D4] offset aWinusbx_claim_ +
mov [esp+0DCh+var_D8] 1 +
mov [esp+0DCh+var_DC] eax +
call sub_43E390  +
mov eax 0FFFFFFFDh +
jmp loc_44C341  +
mov eax [ebp+var_80] +
mov ebx [eax+50h] +
jmp loc_44C2A3  +
mov eax [ebp+var_94] +
mov dword ptr [eax+20h] 0FFFFFFFFh +
mov eax ds:GetLastError +
mov [ebp+var_90] eax +
call eax  +
cmp eax 16h +
mov [ebp+var_A0] eax +
jz loc_44CA5B  +
xor edi edi +
mov esi 0FFFFFFFFh +
mov [ebp+var_88] 0 +
mov [ebp+var_98] ebx +
test edi edi +
jz loc_44C6E8  +
lea eax [ebp+var_50] +
mov [ebp+var_50] 1Ch +
mov [esp+0D0h+var_C8] eax +
mov [esp+0D0h+var_CC] edi +
mov [esp+0D0h+var_D0] esi +
call ds:dword_485784  +
sub esp 0Ch +
test eax eax +
jz loc_44C970  +
lea eax [ebp+var_34] +
mov [ebp+var_34] 1Ch +
mov [esp+0DCh+var_CC] eax +
mov [esp+0DCh+var_D0] edi +
mov [esp+0DCh+var_D4] offset unk_480D90 +
mov [esp+0DCh+var_D8] 0 +
mov [esp+0DCh+var_DC] esi +
call ds:dword_485780  +
sub esp 14h +
test eax eax +
jz loc_44C877  +
lea eax [ebp+var_34] +
lea ebx [ebp+var_74] +
mov [esp+0F0h+var_DC] 0 +
mov [esp+0F0h+var_E0] ebx +
mov [esp+0F0h+var_E4] 0 +
mov [esp+0F0h+var_E8] 0 +
mov [esp+0F0h+var_EC] eax +
mov [esp+0F0h+var_F0] esi +
call ds:dword_48577C  +
sub esp 18h +
test eax eax +
jnz loc_44C8B0  +
mov eax [ebp+var_90] +
call eax  +
cmp eax 7Ah +
jnz loc_44C7C0  +
mov edx [ebp+var_74] +
mov [esp+108h+var_108] edx +
mov [ebp+var_8C] edx +
call malloc  +
mov edx [ebp+var_8C] +
test eax eax +
mov [ebp+var_7C] eax +
jz loc_44C9EA  +
mov eax [ebp+var_7C] +
mov dword ptr [eax] 5 +
mov [esp+108h+var_100] eax +
lea eax [ebp+var_34] +
mov [esp+108h+var_F4] 0 +
mov [esp+108h+var_F8] ebx +
mov [esp+108h+var_FC] edx +
mov [esp+108h+var_104] eax +
mov [esp+108h+var_108] esi +
call ds:dword_48577C  +
sub esp 18h +
test eax eax +
jz loc_44C832  +
lea eax [ebp+var_34] +
mov [esp+120h+var_114] 20019h +
mov [esp+120h+var_118] 0 +
mov [esp+120h+var_11C] eax +
mov [esp+120h+var_120] esi +
call ds:dword_48576C  +
sub esp 10h +
cmp eax 0FFFFFFFFh +
mov ebx eax +
jz loc_44C657  +
lea eax [ebp+var_6C] +
mov [esp+130h+var_11C] eax +
lea eax [ebp+var_70] +
mov [esp+130h+var_120] eax +
lea eax [ebp+var_68] +
mov [ebp+var_70] 0 +
mov [ebp+var_6C] 4 +
mov [ebp+var_68] 0 +
mov [esp+130h+var_124] eax +
mov [esp+130h+var_128] 0 +
mov [esp+130h+var_12C] offset asc_4802DE +
mov [esp+130h+var_130] ebx +
call ds:dword_485768  +
sub esp 18h +
test eax eax +
jnz loc_44C64B  +
mov eax [ebp+var_70] +
cmp eax 0FFh +
jbe loc_44C912  +
mov [esp+148h+var_148] ebx +
call ds:dword_485764  +
sub esp 4 +
mov edx [ebp+var_88] +
test edx edx +
jnz loc_44C2FF  +
mov eax [ebp+var_7C] +
mov [esp+14Ch+var_148] offset asc_48031E +
add eax 4 +
mov [esp+14Ch+var_14C] eax +
call strtok  +
call sub_444130  +
test eax eax +
mov ebx eax +
jz loc_44C870  +
mov [esp+14Ch+var_14C] eax +
call strlen  +
mov ecx [ebp+arg_8] +
lea edx [ecx+ecx*2] +
mov ecx [ebp+var_80] +
mov ecx [ecx+edx*8+54h] +
mov edx offset aNull +
mov [esp+14Ch+var_144] eax +
test ecx ecx +
cmovz ecx edx +
test ebx ebx +
cmovnz edx ebx +
mov [esp+14Ch+var_148] ecx +
mov [esp+14Ch+var_14C] edx +
call strncmp  +
test eax eax +
jz loc_44C717  +
mov eax [ebp+var_7C] +
add edi 1 +
mov [esp+14Ch+var_14C] eax +
call free  +
test ebx ebx +
jz loc_44C4C0  +
mov [esp+14Ch+var_14C] ebx +
call free  +
test edi edi +
jnz loc_44C4C8  +
mov [esp+14Ch+var_140] 12h +
mov [esp+14Ch+var_144] 0 +
mov [esp+14Ch+var_148] 0 +
mov [esp+14Ch+var_14C] offset unk_480D90 +
call ds:dword_485788  +
sub esp 10h +
mov esi eax +
jmp loc_44C4C8  +
lea eax [ebp+var_61] +
mov [esp+14Ch+var_134] 0 +
mov [esp+14Ch+var_138] 40000080h +
mov [esp+14Ch+var_13C] 3 +
mov [esp+14Ch+var_140] 0 +
mov [esp+14Ch+var_144] 3 +
mov [esp+14Ch+var_148] 0C0000000h +
mov [esp+14Ch+var_14C] eax +
call ds:CreateFileA  +
sub esp 1Ch +
cmp eax 0FFFFFFFFh +
jz loc_44C9A0  +
mov [ebp+var_9C] eax +
mov eax [ebp+var_98] +
mov ecx ds:dword_485610[eax] +
mov eax [ebp+var_78] +
mov [esp+14Ch+var_14C] eax +
call ecx  +
mov eax [ebp+var_98] +
mov edx [ebp+var_9C] +
mov eax ds:dword_48562C[eax] +
sub esp 4 +
mov [esp+150h+var_150] edx +
mov [ebp+var_8C] eax +
lea eax [ebp+var_78] +
mov [esp+150h+var_14C] eax +
call [ebp+var_8C]  +
sub esp 8 +
test eax eax +
jz loc_44C8E0  +
mov [ebp+var_88] 1 +
jmp loc_44C6C2  +
xor eax eax +
call sub_442BB0  +
mov [esp+108h+var_F8] edi +
mov [esp+108h+var_FC] offset aCouldNotAccess +
mov [esp+108h+var_F4] eax +
mov eax [ebp+var_84] +
mov [esp+108h+var_100] offset aGet_interfac_0 +
mov [esp+108h+var_104] 1 +
mov [esp+108h+var_108] eax +
call sub_43E390  +
mov [esp+108h+var_108] esi +
call ds:dword_485778  +
mov eax [ebp+var_88] +
sub esp 4 +
test eax eax +
jnz loc_44C2FF  +
mov eax [ebp+var_A0] +
call sub_442BB0  +
mov [esp+10Ch+var_100] offset aCouldNotAcce_0 +
mov [esp+10Ch+var_F8] eax +
mov eax [ebp+arg_8] +
mov [esp+10Ch+var_FC] eax +
jmp loc_44C449  +
call sub_442BB0  +
mov [esp+120h+var_110] edi +
mov [esp+120h+var_114] offset aCouldNotAcce_1 +
mov [esp+120h+var_118] offset aGet_interfac_0 +
mov [esp+120h+var_11C] 1 +
mov [esp+120h+var_10C] eax +
mov eax [ebp+var_84] +
mov [esp+120h+var_120] eax +
call sub_43E390  +
jmp loc_44C5C9  +
xor eax eax +
jmp loc_44C692  +
mov eax [ebp+var_90] +
lea esi [esi+0] +
call eax  +
cmp eax 103h +
jz loc_44C7F5  +
xor eax eax +
call sub_442BB0  +
mov [esp+0F0h+var_E0] edi +
mov [esp+0F0h+var_E4] offset aCouldNotObta_0 +
mov [esp+0F0h+var_DC] eax +
jmp loc_44C7D7  +
mov eax [ebp+var_84] +
mov [esp+108h+var_FC] offset aProgramAsser_8 +
mov [esp+108h+var_100] offset aGet_interfac_0 +
mov [esp+108h+var_104] 1 +
mov [esp+108h+var_108] eax +
call sub_43E390  +
jmp loc_44C7F5  +
lea eax [ebp+var_61] +
mov [esp+158h+var_148] eax +
mov eax [ebp+var_84] +
mov [esp+158h+var_14C] offset aCouldNotInitia +
mov [esp+158h+var_150] offset aWinusbx_claim_ +
mov [esp+158h+var_154] 1 +
mov [esp+158h+var_158] eax +
call sub_43E390  +
jmp loc_44C6C2  +
lea edx [ebp+var_61] +
mov [esp+148h+var_148] edx +
mov [ebp+var_8C] edx +
mov [esp+148h+var_13C] eax +
mov [esp+148h+var_140] offset a_Libusb004d +
mov [esp+148h+var_144] 11h +
call ds:_snprintf  +
mov edx [ebp+var_8C] +
mov [esp+148h+var_13C] offset aAssignedLibusb +
mov [esp+148h+var_140] offset aGet_interfac_0 +
mov [esp+148h+var_144] 4 +
mov [esp+148h+var_138] edx +
mov [esp+148h+var_148] 0 +
mov [ebp+var_51] 0 +
call sub_43E390  +
jmp loc_44C64B  +
mov eax [ebp+var_90] +
call eax  +
cmp eax 103h +
jz loc_44C7F5  +
xor eax eax +
call sub_442BB0  +
mov [esp+0DCh+var_CC] edi +
mov [esp+0DCh+var_D0] offset aCouldNotObta_1 +
mov [esp+0DCh+var_C8] eax +
jmp loc_44C7D7  +
xor eax eax +
call sub_442BB0  +
mov [esp+14Ch+var_140] offset aCouldNotOpen_0 +
mov [esp+14Ch+var_144] offset aWinusbx_claim_ +
mov [esp+14Ch+var_148] 1 +
mov [esp+14Ch+var_138] eax +
lea eax [ebp+var_61] +
mov [esp+14Ch+var_13C] eax +
mov eax [ebp+var_84] +
mov [esp+14Ch+var_14C] eax +
call sub_43E390  +
jmp loc_44C6C2  +
mov eax 0FFFFFFFBh +
jmp loc_44C341  +
mov eax [ebp+var_84] +
mov [esp+108h+var_F8] edi +
mov [esp+108h+var_FC] offset aCouldNotAllo_0 +
mov [esp+108h+var_100] offset aGet_interfac_0 +
mov [esp+108h+var_104] 1 +
mov [esp+108h+var_108] eax +
call sub_43E390  +
jmp loc_44C7F5  +
xor eax eax +
call sub_442BB0  +
mov [esp+0D0h+var_C4] offset aFailedToAutoCl +
mov [esp+0D0h+var_C8] offset aWinusbx_claim_ +
mov [esp+0D0h+var_CC] 2 +
mov [esp+0D0h+var_BC] eax +
mov eax [ebp+arg_8] +
mov [esp+0D0h+var_C0] eax +
mov eax [ebp+var_84] +
mov [esp+0D0h+var_D0] eax +
call sub_43E390  +
mov eax 0FFFFFFFDh +
jmp loc_44C341  +
xor eax eax +
call sub_442BB0  +
mov [esp+0D0h+var_C4] offset aCouldNotAcce_0 +
mov [esp+0D0h+var_C8] offset aWinusbx_claim_ +
mov [esp+0D0h+var_CC] 1 +
mov [esp+0D0h+var_BC] eax +
mov eax [ebp+arg_8] +
mov [esp+0D0h+var_C0] eax +
mov eax [ebp+var_84] +
mov [esp+0D0h+var_D0] eax +
call sub_43E390  +
mov eax 0FFFFFFFCh +
jmp loc_44C341  +
***
push ebx  +
sub esp 14h +
mov ebx [ebp+arg_0] +
test ebx ebx +
jz loc_44CAE0  +
mov [esp+18h+var_10] 0 +
mov [esp+18h+var_14] 0 +
mov [esp+18h+var_18] 0 +
call ds:CreateMutexA  +
mov edx eax +
sub esp 0Ch +
mov [ebx] eax +
xor eax eax +
test edx edx +
jz loc_44CAF6  +
mov ebx [ebp+var_4] +
leave   +
retn   +
call ds:__imp__errno  +
mov ebx [ebp+var_4] +
mov dword ptr [eax] 16h +
mov eax 16h +
leave   +
retn   +
call ds:__imp__errno  +
mov dword ptr [eax] 0Ch +
mov eax 0Ch +
jmp loc_44CAD8  +
***
push ebx  +
sub esp 14h +
mov ebx [ebp+arg_0] +
test ebx ebx +
jz loc_44CB30  +
mov eax [ebx] +
mov [esp+18h+var_18] eax +
call ds:CloseHandle  +
sub esp 4 +
test eax eax +
jnz loc_44CB46  +
call ds:__imp__errno  +
mov ebx [ebp+var_4] +
mov dword ptr [eax] 16h +
mov eax 16h +
leave   +
retn   +
mov dword ptr [ebx] 0 +
xor eax eax +
mov ebx [ebp+var_4] +
leave   +
retn   +
***
sub esp 18h +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_44CB93  +
mov eax [eax] +
mov [esp+18h+var_14] 0 +
mov [esp+18h+var_18] eax +
call ds:WaitForSingleObject  +
xor edx edx +
sub esp 8 +
test eax 0FFFFFF7Fh +
jz loc_44CBA4  +
cmp eax 102h +
jz loc_44CBA8  +
call ds:__imp__errno  +
mov edx 16h +
mov dword ptr [eax] 16h +
mov eax edx +
leave   +
retn   +
call ds:__imp__errno  +
mov edx 10h +
mov dword ptr [eax] 10h +
mov eax edx +
leave   +
retn   +
***
sub esp 18h +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_44CBF0  +
mov eax [eax] +
mov [esp+18h+var_14] 0FFFFFFFFh +
mov [esp+18h+var_18] eax +
call ds:WaitForSingleObject  +
xor edx edx +
sub esp 8 +
test eax 0FFFFFF7Fh +
jnz loc_44CBF0  +
mov eax edx +
leave   +
retn   +
call ds:__imp__errno  +
mov edx 16h +
mov dword ptr [eax] 16h +
mov eax edx +
leave   +
retn   +
***
sub esp 18h +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_44CC50  +
mov eax [eax] +
mov [esp+18h+var_18] eax +
call ds:ReleaseMutex  +
xor edx edx +
sub esp 4 +
test eax eax +
jz loc_44CC35  +
mov eax edx +
leave   +
retn   +
call ds:__imp__errno  +
mov edx 1 +
mov dword ptr [eax] 1 +
mov eax edx +
leave   +
retn   +
call ds:__imp__errno  +
mov edx 16h +
mov dword ptr [eax] 16h +
mov eax edx +
leave   +
retn   +
***
push edi  +
sub esp 8 +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_44CCE7  +
mov dword ptr [eax] 0 +
xor eax eax +
leave   +
retn   +
call ds:__imp__errno  +
mov dword ptr [eax] 16h +
mov eax 16h +
leave   +
retn   +
***
sub esp 8 +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_44CD20  +
lea edx [eax+8] +
mov [eax+4] eax +
mov [eax] eax +
mov [eax+0Ch] edx +
mov [eax+8] edx +
xor eax eax +
leave   +
retn   +
call ds:__imp__errno  +
mov dword ptr [eax] 16h +
mov eax 16h +
leave   +
retn   +
***
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_44CDC5  +
cmp [esi+4] esi +
jz loc_44CD70  +
call ds:__imp__errno  +
mov dword ptr [eax] 10h +
lea esp [ebp-0Ch] +
mov eax 10h +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ebx [esi+0Ch] +
add esi 8 +
cmp ebx esi +
mov edi [ebx+4] +
jnz loc_44CD84  +
jmp loc_44CDBB  +
mov ebx edi +
mov edi eax +
mov eax [ebx+0Ch] +
mov [esp+28h+var_28] eax +
call ds:CloseHandle  +
mov eax [ebx+4] +
mov ecx [ebx] +
mov [eax] ecx +
mov ecx [ebx] +
sub esp 4 +
mov [ecx+4] eax +
mov dword ptr [ebx] 0 +
mov dword ptr [ebx+4] 0 +
mov [esp+28h+var_28] ebx +
call free  +
cmp edi esi +
mov eax [edi+4] +
jnz loc_44CD80  +
lea esp [ebp-0Ch] +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
call ds:__imp__errno  +
mov dword ptr [eax] 16h +
lea esp [ebp-0Ch] +
mov eax 16h +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov ebx [ebp+arg_0] +
test ebx ebx +
jz loc_44CE30  +
mov esi [ebx+4] +
xor edi edi +
cmp ebx esi +
jz loc_44CE24  +
lea esi [esi+0] +
mov eax [esi+0Ch] +
mov [esp+28h+var_28] eax +
call ds:SetEvent  +
mov esi [esi+4] +
sub esp 4 +
test eax eax +
mov eax 1 +
cmovz edi eax +
cmp ebx esi +
jnz loc_44CE00  +
test edi edi +
jnz loc_44CE30  +
lea esp [ebp-0Ch] +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
call ds:__imp__errno  +
mov dword ptr [eax] 16h +
lea esp [ebp-0Ch] +
mov eax 16h +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax [ebp+8] +
test eax eax +
jz loc_44CE80  +
cmp [eax+4] eax +
jz loc_44CE75  +
mov eax [eax+10h] +
mov [esp] eax +
call ds:SetEvent  +
sub esp 4 +
test eax eax +
jz loc_44CE80  +
xor eax eax +
leave   +
retn   +
***
call ds:__imp__errno  +
mov dword ptr [eax] 16h +
mov eax 16h +
leave   +
retn   +
***
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov edx [ebp+arg_0] +
mov [ebp+var_1C] edx +
call ds:GetCurrentThreadId  +
mov edx [ebp+var_1C] +
test edx edx +
jz loc_44CF20  +
mov ecx [ebp+arg_4] +
test ecx ecx +
jz loc_44CF20  +
mov ebx [edx+0Ch] +
lea esi [edx+8] +
mov edi eax +
cmp ebx esi +
jnz loc_44CED8  +
jmp loc_44CF40  +
mov ebx [ebx+4] +
cmp ebx esi +
jz loc_44CF40  +
cmp edi [ebx+8] +
jnz loc_44CED1  +
mov eax [ebx+4] +
mov ecx [ebx] +
mov [ebp+var_1C] edx +
mov [eax] ecx +
mov ecx [ebx] +
mov [ecx+4] eax +
mov dword ptr [ebx+4] 0 +
mov eax [edx+4] +
mov [ebx] edx +
mov [ebx+4] eax +
mov eax [edx+4] +
mov [eax] ebx +
mov eax [ebp+arg_4] +
mov [edx+4] ebx +
mov [esp+38h+var_38] eax +
call sub_44CC10  +
test eax eax +
jz loc_44CFB5  +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
call ds:__imp__errno  +
mov dword ptr [eax] 16h +
lea esp [ebp-0Ch] +
mov eax 16h +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+38h+var_34] 10h +
mov [esp+38h+var_38] 1 +
mov [ebp+var_1C] edx +
call calloc  +
mov edx [ebp+var_1C] +
test eax eax +
mov ebx eax +
jz loc_44D031  +
mov [ebx+8] edi +
mov [ebp+var_1C] edx +
mov [esp+38h+var_2C] 0 +
mov [esp+38h+var_30] 0 +
mov [esp+38h+var_34] 0 +
mov [esp+38h+var_38] 0 +
call ds:CreateEventA  +
mov edx [ebp+var_1C] +
sub esp 10h +
test eax eax +
mov [ebx+0Ch] eax +
jz loc_44D029  +
mov eax [edx+0Ch] +
mov [ebx] esi +
mov [ebx+4] eax +
mov eax [edx+0Ch] +
mov [eax] ebx +
mov [edx+0Ch] ebx +
jmp loc_44CEDD  +
mov eax [ebx+0Ch] +
mov [esp+38h+var_34] 0FFFFFFFFh +
mov [esp+38h+var_38] eax +
call ds:WaitForSingleObject  +
mov edi eax +
mov eax [ebp+arg_4] +
sub esp 8 +
mov [esp+38h+var_38] eax +
call sub_44CBC0  +
test eax eax +
jnz loc_44CF16  +
mov ecx [ebx+4] +
cmp edi 102h +
mov edx [ebx] +
mov [ecx] edx +
mov edx [ebx] +
mov [edx+4] ecx +
mov edx [ebp+var_1C] +
mov dword ptr [ebx+4] 0 +
mov ecx [edx+0Ch] +
mov [ebx] esi +
mov [ebx+4] ecx +
mov ecx [edx+0Ch] +
mov [ecx] ebx +
mov [edx+0Ch] ebx +
jnz loc_44CF16  +
call ds:__imp__errno  +
mov dword ptr [eax] 8Ah +
mov eax 8Ah +
jmp loc_44CF16  +
mov [esp+38h+var_38] ebx +
call free  +
call ds:__imp__errno  +
mov dword ptr [eax] 0Ch +
mov eax 0Ch +
jmp loc_44CF16  +
***
push edi  +
push esi  +
push ebx  +
sub esp 4Ch +
mov esi [ebp+arg_0] +
lea edi [ebp+var_28] +
mov ebx [ebp+arg_8] +
mov [esp+58h+var_58] edi +
call ds:GetSystemTime  +
lea eax [ebp+var_30] +
sub esp 4 +
mov [esp+58h+var_54] eax +
mov [esp+58h+var_58] edi +
call ds:SystemTimeToFileTime  +
sub esp 8 +
test eax eax +
jz loc_44D1AA  +
mov eax [ebp+var_30] +
mov edx [ebp+var_2C] +
sub eax ds:dword_480D88 +
sbb edx ds:dword_480D8C +
mov [esp+58h+var_50] 989680h +
mov [esp+58h+var_4C] 0 +
mov [esp+58h+var_58] eax +
mov [esp+58h+var_54] edx +
mov [ebp+var_40] eax +
mov [ebp+var_3C] edx +
call sub_458110  +
mov edi [ebx] +
mov ecx [ebx+4] +
mov [esp+58h+var_50] 989680h +
mov [esp+58h+var_4C] 0 +
sub edi eax +
mov eax 10624DD3h +
imul  ecx +
mov eax [ebp+var_40] +
sar ecx 1Fh +
mov ebx edx +
mov edx [ebp+var_3C] +
sar ebx 6 +
mov [esp+58h+var_58] eax +
sub ebx ecx +
mov [esp+58h+var_54] edx +
call sub_458220  +
imul ecx eax +
mov eax 10624DD3h +
imul  ecx +
sar ecx 1Fh +
sar edx 6 +
sub edx ecx +
sub ebx edx +
mov ecx ebx +
js loc_44D1D0  +
xor ebx ebx +
test edi edi +
js loc_44D143  +
mov eax ecx +
mov edx 10624DD3h +
imul  edx +
mov eax ecx +
imul edi edi +
sar eax 1Fh +
sar edx 6 +
sub edx eax +
lea ebx [edi+edx] +
imul edx edx +
sub ecx edx +
cmp ecx 1 +
sbb ebx 0FFFFFFFFh +
call ds:GetCurrentThreadId  +
test esi esi +
mov ecx eax +
jz loc_44D1B2  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_44D1B2  +
mov edi [esi+0Ch] +
lea edx [esi+8] +
cmp edi edx +
jnz loc_44D170  +
jmp loc_44D254  +
mov edi [edi+4] +
cmp edi edx +
jz loc_44D254  +
cmp ecx [edi+8] +
jnz loc_44D165  +
mov eax [edi+4] +
mov ecx [edi] +
mov [ebp+var_40] edx +
mov [eax] ecx +
mov ecx [edi] +
mov [ecx+4] eax +
mov dword ptr [edi+4] 0 +
mov eax [esi+4] +
mov [edi] esi +
mov [edi+4] eax +
mov eax [esi+4] +
mov [eax] edi +
mov eax [ebp+arg_4] +
mov [esi+4] edi +
mov [esp+58h+var_58] eax +
call sub_44CC10  +
test eax eax +
jz loc_44D1E8  +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
call ds:__imp__errno  +
mov dword ptr [eax] 16h +
lea esp [ebp-0Ch] +
mov eax 16h +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
sub edi 1 +
add ecx 0F4240h +
xor ebx ebx +
test edi edi +
jns loc_44D119  +
jmp loc_44D143  +
mov eax [edi+0Ch] +
mov [esp+58h+var_54] ebx +
mov [esp+58h+var_58] eax +
call ds:WaitForSingleObject  +
mov ebx eax +
mov eax [ebp+arg_4] +
sub esp 8 +
mov [esp+58h+var_58] eax +
call sub_44CBC0  +
test eax eax +
jnz loc_44D1AA  +
mov ecx [edi+4] +
cmp ebx 102h +
mov edx [edi] +
mov [ecx] edx +
mov edx [edi] +
mov [edx+4] ecx +
mov edx [ebp+var_40] +
mov dword ptr [edi+4] 0 +
mov ecx [esi+0Ch] +
mov [edi] edx +
mov [edi+4] ecx +
mov edx [esi+0Ch] +
mov [edx] edi +
mov [esi+0Ch] edi +
jnz loc_44D1AA  +
call ds:__imp__errno  +
mov dword ptr [eax] 8Ah +
mov eax 8Ah +
jmp loc_44D1AA  +
mov [esp+58h+var_54] 10h +
mov [esp+58h+var_58] 1 +
mov [ebp+var_44] edx +
mov [ebp+var_40] ecx +
call calloc  +
mov ecx [ebp+var_40] +
mov edx [ebp+var_44] +
test eax eax +
mov edi eax +
jz loc_44D2CF  +
mov [edi+8] ecx +
mov [ebp+var_40] edx +
mov [esp+58h+var_4C] 0 +
mov [esp+58h+var_50] 0 +
mov [esp+58h+var_54] 0 +
mov [esp+58h+var_58] 0 +
call ds:CreateEventA  +
mov edx [ebp+var_40] +
sub esp 10h +
test eax eax +
mov [edi+0Ch] eax +
jz loc_44D2C7  +
mov eax [esi+0Ch] +
mov [edi] edx +
mov [edi+4] eax +
mov eax [esi+0Ch] +
mov [eax] edi +
mov [esi+0Ch] edi +
jmp loc_44D175  +
mov [esp+58h+var_58] edi +
call free  +
call ds:__imp__errno  +
mov dword ptr [eax] 0Ch +
mov eax 0Ch +
jmp loc_44D1AA  +
***
mov ebp esp +
pop ebp  +
jmp eax  +
***
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov edi [ebp+arg_0] +
mov [ebp+var_1C] eax +
mov ebx [edi+24h] +
test ebx ebx +
jnz loc_44D376  +
test [edi+14h] ecx +
jz loc_44D32B  +
mov esi [edi+4] +
cmp esi 0FFFFFFFFh +
jz loc_44D335  +
movzx eax word ptr [edx+30h] +
cmp esi eax +
jz loc_44D335  +
lea esp [ebp-0Ch] +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi [edi+8] +
cmp esi 0FFFFFFFFh +
jz loc_44D345  +
movzx eax word ptr [edx+32h] +
cmp esi eax +
jnz loc_44D32B  +
mov esi [edi+0Ch] +
cmp esi 0FFFFFFFFh +
jz loc_44D355  +
movzx eax byte ptr [edx+2Ch] +
cmp esi eax +
jnz loc_44D32B  +
mov esi [edi+20h] +
mov eax [ebp+var_1C] +
mov ebx [edi+18h] +
mov [esp+38h+var_30] ecx +
mov [esp+38h+var_2C] esi +
mov [esp+38h+var_34] edx +
mov [esp+38h+var_38] eax +
call ebx  +
sub esp 10h +
mov ebx eax +
jmp loc_44D32B  +
lea esp [ebp-0Ch] +
mov ebx 1 +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ecx [ebp+arg_4] +
mov eax [ebp+arg_0] +
mov [ebp+var_24] ecx +
mov ecx [ebp+arg_8] +
lea edi [eax+30h] +
mov esi eax +
mov [esp+38h+var_38] edi +
mov [ebp+var_1C] eax +
mov [ebp+var_28] ecx +
call sub_44CBC0  +
mov ecx [esi+2Ch] +
mov eax esi +
lea ebx [ecx-28h] +
mov [ebp+var_20] ecx +
mov ecx [ebx+2Ch] +
cmp eax ebx +
lea esi [ecx-28h] +
jnz loc_44D3DF  +
jmp loc_44D439  +
mov eax [esi+2Ch] +
sub eax 28h +
cmp [ebp+var_1C] esi +
jz loc_44D439  +
mov ebx esi +
mov esi eax +
mov [esp+38h+var_38] edi +
call sub_44CC10  +
mov edx [ebp+var_24] +
mov ecx [ebp+var_28] +
mov eax [ebp+var_1C] +
mov [esp+38h+var_38] ebx +
call sub_44D300  +
mov [esp+38h+var_38] edi +
mov [ebp+var_20] eax +
call sub_44CBC0  +
mov edx [ebp+var_20] +
test edx edx +
jz loc_44D3D0  +
mov eax [ebx+2Ch] +
mov edx [ebx+28h] +
mov [eax] edx +
mov edx [ebx+28h] +
mov [edx+4] eax +
mov dword ptr [ebx+28h] 0 +
mov dword ptr [ebx+2Ch] 0 +
mov [esp+38h+var_38] ebx +
call free  +
mov eax [esi+2Ch] +
sub eax 28h +
cmp [ebp+var_1C] esi +
jnz loc_44D3DB  +
mov [ebp+arg_0] edi +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp sub_44CC10  +
***
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov eax [ebp+arg_8] +
mov [esp+38h+var_34] 10h +
mov edi [ebp+arg_0] +
mov [esp+38h+var_38] 1 +
mov esi [ebp+arg_4] +
mov [ebp+var_1C] eax +
call calloc  +
test eax eax +
mov ebx eax +
jz loc_44D520  +
mov eax [ebp+var_1C] +
mov [ebx+4] esi +
lea esi [edi+68h] +
mov [esp+38h+var_38] esi +
mov [ebx] eax +
call sub_44CBC0  +
mov edx [edi+6Ch] +
test edx edx +
jz loc_44D4D0  +
lea ecx [edi+84h] +
mov [ebx+0Ch] ecx +
mov ecx [edi+84h] +
lea eax [ebx+8] +
mov [ebx+8] ecx +
mov [ecx+4] eax +
mov [edi+84h] eax +
mov [ebp+arg_0] esi +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp sub_44CC10  +
mov eax [edi+80h] +
test eax eax +
jnz loc_44D49D  +
mov eax [edi+88h] +
lea ecx [edi+84h] +
cmp eax ecx +
jnz loc_44D4A3  +
lea edx [edi+8Ch] +
cmp [edi+90h] edx +
jnz loc_44D4A3  +
mov [ebx+0Ch] eax +
mov eax [edi+84h] +
lea ecx [ebx+8] +
mov [ebx+8] eax +
mov [eax+4] ecx +
mov [edi+84h] ecx +
mov [esp+38h+var_38] edi +
call sub_43EA10  +
jmp loc_44D4BB  +
mov [esp+38h+var_38] edi +
mov [esp+38h+var_2C] offset aErrorAllocatin +
mov [esp+38h+var_30] offset aUsbi_hotplug_n +
mov [esp+38h+var_34] 1 +
call sub_43E390  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov ebx [ebp+arg_0] +
mov [esp+28h+var_28] 1 +
mov esi [ebp+arg_4] +
call sub_43E080  +
sub esp 4 +
test eax eax +
jz loc_44D5D2  +
test ebx ebx +
cmovz ebx ds:dword_485488 +
lea edi [ebx+30h] +
mov [esp+28h+var_28] edi +
call sub_44CBC0  +
mov eax [ebx+2Ch] +
sub eax 28h +
cmp ebx eax +
jnz loc_44D59C  +
jmp loc_44D5B2  +
mov eax [eax+2Ch] +
sub eax 28h +
cmp ebx eax +
jz loc_44D5B2  +
cmp [eax+1Ch] esi +
jnz loc_44D592  +
mov dword ptr [eax+24h] 1 +
mov eax [eax+2Ch] +
sub eax 28h +
cmp ebx eax +
jnz loc_44D59C  +
mov [esp+28h+var_28] edi +
call sub_44CC10  +
mov [esp+28h+var_20] 0 +
mov [esp+28h+var_24] 0 +
mov [esp+28h+var_28] ebx +
call sub_44D450  +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
***
push ebp  +
mov ebp esp +
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov edi [ebp+8] +
mov dword ptr [esp] 1 +
mov esi [ebp+14h] +
call sub_43E080  +
sub esp 4 +
test eax eax +
jz loc_44D764  +
cmp esi 0FFFFFFFFh +
jz loc_44D617  +
test esi 0FFFF0000h +
jnz loc_44D755  +
cmp dword ptr [ebp+18h] 0FFFFFFFFh +
jz loc_44D62A  +
test dword ptr [ebp+18h] 0FFFF0000h +
jnz loc_44D755  +
cmp dword ptr [ebp+1Ch] 0FFFFFFFFh +
jz loc_44D63D  +
test dword ptr [ebp+1Ch] 0FFFFFF00h +
jnz loc_44D755  +
mov edx [ebp+20h] +
test edx edx +
jz loc_44D755  +
mov dword ptr [esp+4] 30h +
test edi edi +
mov dword ptr [esp] 1 +
cmovz edi ds:dword_485488 +
call calloc  +
test eax eax +
mov ebx eax +
jz loc_44D785  +
mov [eax+4] esi +
lea esi [edi+30h] +
mov [eax] edi +
mov eax [ebp+18h] +
mov [esp] esi +
mov dword ptr [ebx+24h] 0 +
mov [ebx+8] eax +
mov eax [ebp+1Ch] +
mov [ebx+0Ch] eax +
mov eax [ebp+10h] +
mov [ebx+10h] eax +
mov eax [ebp+0Ch] +
mov [ebx+14h] eax +
mov eax [ebp+20h] +
mov [ebx+18h] eax +
mov eax [ebp+24h] +
mov [ebx+20h] eax +
call sub_44CBC0  +
mov eax dword_4616E0 +
lea edx [eax+1] +
mov dword_4616E0 edx +
mov edx [edi+2Ch] +
mov [ebx+1Ch] eax +
lea eax [ebx+28h] +
mov [ebx+2Ch] edx +
lea edx [edi+28h] +
mov [ebx+28h] edx +
mov edx [edi+2Ch] +
mov [edx] eax +
mov [edi+2Ch] eax +
mov [esp] esi +
call sub_44CC10  +
test byte ptr [ebp+10h] 1 +
jnz loc_44D700  +
mov eax [ebp+28h] +
test eax eax +
jz loc_44D760  +
mov eax [ebx+1Ch] +
mov ecx [ebp+28h] +
mov [ecx] eax +
xor eax eax +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn 24h  +
***
lea eax [ebp-1Ch] +
mov [esp+4] eax +
mov [esp] edi +
call sub_43E850  +
sub esp 8 +
test eax eax +
mov [ebp-2Ch] eax +
js loc_44D76B  +
mov esi 0 +
jz loc_44D73D  +
mov eax [ebp-1Ch] +
mov ecx 1 +
mov edx [eax+esi*4] +
mov eax edi +
add esi 1 +
mov [esp] ebx +
call sub_44D300  +
cmp esi [ebp-2Ch] +
jnz loc_44D720  +
mov eax [ebp-1Ch] +
mov dword ptr [esp+4] 1 +
mov [esp] eax +
call sub_43E800  +
sub esp 8 +
jmp loc_44D6E0  +
***
mov eax 0FFFFFFFEh +
jmp loc_44D6F1  +
***
xor eax eax +
jmp loc_44D6F1  +
***
mov eax 0FFFFFFF4h +
jmp loc_44D6F1  +
***
mov eax [ebx+1Ch] +
mov [esp] edi +
mov [esp+4] eax +
call sub_44D550  +
mov eax [ebp-2Ch] +
sub esp 8 +
jmp loc_44D6F1  +
***
mov eax 0FFFFFFF5h +
jmp loc_44D6F1  +
***
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov ebx [ebp+arg_0] +
lea esi [ebx+30h] +
mov [esp+28h+var_28] esi +
call sub_44CBC0  +
mov eax [ebx+2Ch] +
sub eax 28h +
mov edx [eax+2Ch] +
cmp ebx eax +
lea edi [edx-28h] +
jnz loc_44D7C4  +
jmp loc_44D7EF  +
mov eax edi +
mov edi ecx +
mov ecx [eax+28h] +
mov [edx] ecx +
mov ecx [eax+28h] +
mov [ecx+4] edx +
mov dword ptr [eax+28h] 0 +
mov dword ptr [eax+2Ch] 0 +
mov [esp+28h+var_28] eax +
call free  +
mov edx [edi+2Ch] +
cmp ebx edi +
lea ecx [edx-28h] +
jnz loc_44D7C0  +
mov [ebp+arg_0] esi +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp sub_44CC10  +
***
test eax eax +
js loc_44D87D  +
push ebp  +
mov ebp esp +
push edi  +
xor edi edi +
push esi  +
mov esi offset unk_4889A0 +
push ebx  +
mov ebx offset dword_4871A0 +
sub esp 1Ch +
jmp loc_44D831  +
add edi 1 +
add ebx 18h +
add esi 20h +
cmp edi 100h +
jz loc_44D870  +
cmp [ebx] eax +
jnz loc_44D820  +
mov [ebp+var_1C] eax +
mov [esp+2Ch+var_2C] esi +
call ds:EnterCriticalSection  +
mov eax [ebp+var_1C] +
sub esp 4 +
cmp [ebx] eax +
jz loc_44D860  +
mov [esp+2Ch+var_2C] esi +
call ds:LeaveCriticalSection  +
mov eax [ebp+var_1C] +
sub esp 4 +
jmp loc_44D820  +
lea esp [ebp-0Ch] +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
lea esp [ebp-0Ch] +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax 0FFFFFFFFh +
retn   +
***
push ebx  +
mov ebx eax +
sub esp 14h +
test eax eax +
jz loc_44D8B0  +
mov eax [eax+10h] +
lea edx [eax-1] +
cmp edx 0FFFFFFFDh +
jbe loc_44D8B5  +
mov [esp+18h+var_18] ebx +
call free  +
mov ebx [ebp+var_4] +
leave   +
retn   +
mov [esp+18h+var_18] eax +
call ds:CloseHandle  +
sub esp 4 +
jmp loc_44D8A8  +
***
push ebx  +
sub esp 14h +
mov [esp+18h+var_14] 14h +
mov [esp+18h+var_18] 1 +
call calloc  +
test eax eax +
mov ebx eax +
jz loc_44D927  +
mov [esp+18h+var_C] 0 +
mov [esp+18h+var_10] 0 +
mov [esp+18h+var_14] 1 +
mov [esp+18h+var_18] 0 +
call ds:CreateEventA  +
sub esp 10h +
test eax eax +
mov [ebx+10h] eax +
jz loc_44D92B  +
mov eax ebx +
mov ebx [ebp+var_4] +
leave   +
retn   +
xor eax eax +
jmp loc_44D922  +
mov [esp+18h+var_18] ebx +
call free  +
xor eax eax +
jmp loc_44D922  +
***
push edi  +
push esi  +
push ebx  +
mov ebx 1 +
sub esp 2Ch +
mov esi ds:SleepEx +
jmp loc_44D96A  +
mov [esp+38h+var_34] 1 +
mov [esp+38h+var_38] 0 +
call esi  +
sub esp 8 +
mov eax ebx +
xchg eax ds:dword_4857AC +
cmp eax 1 +
jz loc_44D956  +
cmp ds:byte_4857A4 0 +
jz loc_44D990  +
xor eax eax +
xchg eax ds:dword_4857AC +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+38h+var_38] offset aKernel32 +
call ds:GetModuleHandleA  +
sub esp 4 +
test eax eax +
jz loc_44DA61  +
mov [esp+38h+var_34] offset aCancelioex +
mov [esp+38h+var_38] eax +
call ds:GetProcAddress  +
sub esp 8 +
mov ds:dword_4857A8 eax +
test eax eax +
mov edx offset unk_480E1C +
mov eax offset aEx +
mov ebx offset dword_4871A0 +
cmovnz edx eax +
mov esi offset unk_4889A0 +
mov [esp+38h+var_28] edx +
mov [esp+38h+var_2C] offset aWillUseCanceli +
mov [esp+38h+var_30] offset aSetup_cancel_i +
mov [esp+38h+var_34] 4 +
mov [esp+38h+var_38] 0 +
call sub_43E390  +
mov edi ds:InitializeCriticalSection +
mov dword ptr [ebx] 0FFFFFFFFh +
add ebx 18h +
mov dword ptr [ebx-14h] 0FFFFFFFFh +
mov dword ptr [ebx-10h] 0 +
mov dword ptr [ebx-0Ch] 0 +
mov dword ptr [ebx-8] 0 +
mov dword ptr [ebx-4] 0 +
mov dword ptr [esi+18h] 0FFFFFFFFh +
mov dword ptr [esi+1Ch] 0 +
mov [esp+38h+var_38] esi +
add esi 20h +
call edi  +
sub esp 4 +
cmp ebx offset unk_4889A0 +
jnz loc_44DA08  +
mov ds:byte_4857A4 1 +
jmp loc_44D980  +
mov eax ds:dword_4857A8 +
jmp loc_44D9C1  +
***
push edi  +
push esi  +
push ebx  +
mov ebx 1 +
sub esp 1Ch +
mov esi ds:SleepEx +
jmp loc_44DA9A  +
mov [esp+28h+var_24] 1 +
mov [esp+28h+var_28] 0 +
call esi  +
sub esp 8 +
mov eax ebx +
xchg eax ds:dword_4857AC +
cmp eax 1 +
jz loc_44DA86  +
cmp ds:byte_4857A4 0 +
jz loc_44DBD6  +
mov ds:byte_4857A4 0 +
mov ebx offset dword_4871A0 +
mov esi offset unk_4889A0 +
jmp loc_44DB1A  +
mov dword ptr [ebx] 0FFFFFFFFh +
add ebx 18h +
mov dword ptr [ebx-14h] 0FFFFFFFFh +
mov dword ptr [ebx-10h] 0 +
mov dword ptr [ebx-0Ch] 0 +
mov dword ptr [ebx-8] 0 +
mov dword ptr [ebx-4] 0 +
mov [esp+28h+var_28] esi +
call ds:LeaveCriticalSection  +
sub esp 4 +
mov [esp+28h+var_28] esi +
add esi 20h +
call ds:DeleteCriticalSection  +
sub esp 4 +
cmp ebx offset unk_4889A0 +
jz loc_44DBD6  +
mov edx [ebx] +
test edx edx +
js loc_44DB46  +
mov eax [ebx+4] +
cmp eax 0FFFFFFFFh +
jz loc_44DB46  +
test eax eax +
jz loc_44DB46  +
mov edx [ebx+8] +
test edx edx +
jz loc_44DB46  +
mov ecx [ebx+0Ch] +
test ecx ecx +
jz loc_44DB85  +
mov edi [ebx+10h] +
test edi edi +
jz loc_44DB85  +
mov [esp+28h+var_28] ecx +
call edi  +
mov [esp+28h+var_28] esi +
call ds:EnterCriticalSection  +
mov eax [ebx+8] +
sub esp 4 +
call sub_44D890  +
mov eax ds:dword_4857A8 +
test eax eax +
jnz loc_44DAC7  +
cmp dword ptr [esi+18h] 0FFFFFFFFh +
jz loc_44DAC7  +
mov eax [ebx+4] +
mov [esp+28h+var_28] eax +
call ds:CloseHandle  +
sub esp 4 +
jmp loc_44DAC7  +
mov ecx ds:dword_4857A8 +
test ecx ecx +
jz loc_44DBA0  +
mov [esp+28h+var_24] edx +
mov [esp+28h+var_28] eax +
call ecx  +
sub esp 8 +
jmp loc_44DB46  +
mov edi [esi+1Ch] +
call ds:GetCurrentThreadId  +
cmp edi eax +
jz loc_44DBE6  +
mov [esp+28h+var_1C] offset aUnableToCancel +
mov [esp+28h+var_20] offset aCancel_io +
mov [esp+28h+var_24] 2 +
mov [esp+28h+var_28] 0 +
call sub_43E390  +
jmp loc_44DB46  +
xor eax eax +
xchg eax ds:dword_4857AC +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx+4] +
mov [esp+28h+var_28] eax +
call ds:CancelIo  +
sub esp 4 +
jmp loc_44DB46  +
***
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
cmp ds:byte_4857A4 0 +
jz loc_44DCD6  +
call sub_44D8D0  +
test eax eax +
mov [ebp+var_1C] eax +
jz loc_44DCF5  +
mov dword ptr [eax] 103h +
mov ebx offset dword_4871A0 +
mov edi offset unk_4889A0 +
mov dword ptr [eax+4] 0 +
xor esi esi +
jmp loc_44DC56  +
add esi 1 +
add ebx 18h +
add edi 20h +
cmp esi 100h +
jz loc_44DCE0  +
mov edx [ebx] +
test edx edx +
jns loc_44DC41  +
mov [esp+28h+var_28] edi +
call ds:EnterCriticalSection  +
mov eax [ebx] +
sub esp 4 +
test eax eax +
js loc_44DC80  +
mov [esp+28h+var_28] edi +
call ds:LeaveCriticalSection  +
sub esp 4 +
jmp loc_44DC41  +
mov ecx [ebp+arg_0] +
lea eax [esi+esi*2] +
mov edx esi +
shl eax 3 +
mov ds:dword_4871A0[eax] esi +
shl edx 5 +
mov [ecx] esi +
mov [ecx+4] esi +
mov ecx [ebp+var_1C] +
mov ds:dword_4871A4[eax] 0FFFFFFFEh +
mov ds:dword_4871B4[eax] 1 +
mov ds:dword_4889B8[edx] 0FFFFFFFFh +
mov ds:dword_4871A8[eax] ecx +
mov [esp+28h+var_28] edi +
call ds:LeaveCriticalSection  +
xor eax eax +
sub esp 4 +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
call sub_44D940  +
jmp loc_44DC16  +
mov eax [ebp+var_1C] +
call sub_44D890  +
lea esp [ebp-0Ch] +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax 0FFFFFFFFh +
jmp loc_44DCCE  +
***
push edi  +
push esi  +
push ebx  +
sub esp 5Ch +
mov edi [ebp+arg_0] +
cmp ds:byte_4857A4 0 +
mov [ebp+var_30] 0FFFFFFFFh +
mov [ebp+var_2C] 0FFFFFFFFh +
mov [ebp+var_28] 0 +
mov [ebp+var_24] 0 +
mov [ebp+var_20] 0 +
mov [ebp+var_1C] 0 +
jz loc_44DE50  +
mov eax [ebp+arg_4] +
sub eax 1 +
cmp eax 0FFFFFFFDh +
ja loc_44DDF0  +
mov eax [ebp+arg_C] +
mov [ebp+var_24] eax +
mov eax [ebp+arg_10] +
mov [ebp+var_20] eax +
mov eax [ebp+arg_8] +
sub eax 1 +
cmp eax 1 +
ja loc_44DE23  +
xor eax eax +
mov esi offset unk_4889A0 +
cmp [ebp+arg_8] 1 +
setnz al  +
xor ebx ebx +
add eax 1 +
mov [ebp+var_1C] eax +
call sub_44D8D0  +
mov edx eax +
test edx edx +
mov [ebp+var_3C] eax +
mov eax offset dword_4871A0 +
jz loc_44DDF0  +
mov [ebp+arg_0] edi +
mov edi esi +
mov esi ebx +
mov ebx eax +
jmp loc_44DDB2  +
add esi 1 +
add ebx 18h +
add edi 20h +
cmp esi 100h +
jz loc_44DDE0  +
mov ecx [ebx] +
test ecx ecx +
jns loc_44DDA1  +
mov [esp+68h+var_68] edi +
call ds:EnterCriticalSection  +
mov edx [ebx] +
sub esp 4 +
test edx edx +
js loc_44DE60  +
mov [esp+68h+var_68] edi +
call ds:LeaveCriticalSection  +
sub esp 4 +
jmp loc_44DDA1  +
mov eax [ebp+var_3C] +
mov edi [ebp+arg_0] +
call sub_44D890  +
nop   +
lea esi [esi+0] +
mov dword ptr [edi] 0FFFFFFFFh +
mov eax edi +
mov dword ptr [edi+4] 0FFFFFFFFh +
mov dword ptr [edi+8] 0 +
mov dword ptr [edi+0Ch] 0 +
mov dword ptr [edi+10h] 0 +
mov dword ptr [edi+14h] 0 +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+68h+var_5C] offset aOnlyOneOfRw_re +
mov [esp+68h+var_60] offset aUsbi_create_fd +
mov [esp+68h+var_64] 2 +
mov [esp+68h+var_68] 0 +
call sub_43E390  +
jmp loc_44DDF0  +
call sub_44D940  +
jmp loc_44DD43  +
mov eax ds:dword_4857A8 +
mov ebx esi +
mov esi edi +
mov [ebp+var_30] ebx +
mov edi [ebp+arg_0] +
test eax eax +
jz loc_44DEE8  +
mov eax [ebp+arg_4] +
mov [ebp+var_2C] eax +
lea ecx [ebx+ebx*2] +
mov ebx [ebp+var_30] +
shl ecx 3 +
mov edx [ebp+var_3C] +
lea eax dword_4871A0[ecx] +
mov ds:dword_4871A0[ecx] ebx +
mov ecx [ebp+var_2C] +
mov [eax+8] edx +
mov [ebp+var_28] edx +
mov [eax+4] ecx +
mov ecx [ebp+var_24] +
mov [eax+0Ch] ecx +
mov ecx [ebp+var_20] +
mov [eax+10h] ecx +
mov ecx [ebp+var_1C] +
mov [eax+14h] ecx +
mov [esp+68h+var_68] esi +
call ds:LeaveCriticalSection  +
mov eax [ebp+var_30] +
mov [edi] eax +
mov eax [ebp+var_2C] +
sub esp 4 +
mov [edi+4] eax +
mov eax [ebp+var_28] +
mov [edi+8] eax +
mov eax [ebp+var_24] +
mov [edi+0Ch] eax +
mov eax [ebp+var_20] +
mov [edi+10h] eax +
mov eax [ebp+var_1C] +
mov [edi+14h] eax +
lea esp [ebp-0Ch] +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
call ds:GetCurrentThreadId  +
mov ecx ebx +
shl ecx 5 +
lea edx dword_4889B0[ecx] +
mov [ebp+var_48] edx +
mov ds:dword_4889BC[ecx] eax +
mov ecx ds:GetCurrentProcess +
mov [ebp+var_44] ecx +
call ecx  +
mov ecx [ebp+var_44] +
mov [ebp+var_40] eax +
call ecx  +
mov [esp+68h+var_50] 2 +
mov [esp+68h+var_54] 1 +
mov [esp+68h+var_58] 0 +
mov ecx eax +
lea eax [ebp+var_2C] +
mov [esp+68h+var_5C] eax +
mov eax [ebp+var_40] +
mov [esp+68h+var_68] ecx +
mov [esp+68h+var_60] eax +
mov eax [ebp+arg_4] +
mov [esp+68h+var_64] eax +
call ds:DuplicateHandle  +
sub esp 1Ch +
test eax eax +
jz loc_44DF62  +
mov eax [ebp+var_48] +
mov edx [ebp+arg_4] +
mov [eax+8] edx +
jmp loc_44DE79  +
mov [esp+68h+var_5C] offset aCouldNotDupl_0 +
mov [esp+68h+var_60] offset aUsbi_create_fd +
mov [esp+68h+var_64] 4 +
mov [esp+68h+var_68] 0 +
call sub_43E390  +
mov eax [ebp+arg_4] +
mov [ebp+var_2C] eax +
mov eax [ebp+var_48] +
mov dword ptr [eax+8] 0FFFFFFFFh +
jmp loc_44DE79  +
***
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov esi [ebp+arg_0] +
cmp ds:byte_4857A4 0 +
jz loc_44E0C3  +
mov eax [esi] +
call sub_44D800  +
test eax eax +
mov ebx eax +
js loc_44E0BB  +
cmp eax 0FFh +
ja loc_44E020  +
lea eax [eax+eax*2] +
shl eax 3 +
mov edx ds:dword_4871A0[eax] +
test edx edx +
js loc_44E020  +
mov ecx ds:dword_4871A4[eax] +
cmp ecx 0FFFFFFFFh +
jz loc_44E020  +
test ecx ecx +
jz loc_44E020  +
mov edi ds:dword_4871A8[eax] +
test edi edi +
jz loc_44E020  +
mov edx ds:dword_4871AC[eax] +
test edx edx +
jz loc_44E112  +
mov eax ds:dword_4871B0[eax] +
test eax eax +
jz loc_44E112  +
mov [esp+38h+var_38] edx +
call eax  +
nop   +
lea esi [esi+0] +
mov eax ds:dword_4857A8 +
test eax eax +
jz loc_44E0D0  +
lea edi [ebx+ebx*2] +
shl edi 3 +
mov eax ds:dword_4871A8[edi] +
lea edx dword_4871A0[edi] +
mov [ebp+var_1C] edx +
shl ebx 5 +
add ebx offset unk_4889A0 +
call sub_44D890  +
mov edx [ebp+var_1C] +
mov ds:dword_4871A0[edi] 0FFFFFFFFh +
mov dword ptr [edx+4] 0FFFFFFFFh +
mov dword ptr [edx+8] 0 +
mov dword ptr [edx+0Ch] 0 +
mov ds:dword_4871B0[edi] 0 +
mov ds:dword_4871B4[edi] 0 +
mov dword ptr [esi] 0FFFFFFFFh +
mov dword ptr [esi+4] 0FFFFFFFFh +
mov dword ptr [esi+8] 0 +
mov dword ptr [esi+0Ch] 0 +
mov dword ptr [esi+10h] 0 +
mov dword ptr [esi+14h] 0 +
mov [esp+38h+var_38] ebx +
call ds:LeaveCriticalSection  +
sub esp 4 +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
call sub_44D940  +
jmp loc_44DFB9  +
mov eax ebx +
shl eax 5 +
cmp ds:dword_4889B8[eax] 0FFFFFFFFh +
jz loc_44E0F4  +
lea eax [ebx+ebx*2] +
mov eax ds:dword_4871A4[eax*8] +
mov [esp+38h+var_38] eax +
call ds:CloseHandle  +
sub esp 4 +
mov eax ebx +
shl eax 5 +
mov ds:dword_4889B8[eax] 0FFFFFFFFh +
mov ds:dword_4889BC[eax] 0 +
jmp loc_44E02D  +
mov eax ds:dword_4857A8 +
test eax eax +
jz loc_44E130  +
mov [esp+38h+var_34] edi +
mov [esp+38h+var_38] ecx +
call eax  +
sub esp 8 +
jmp loc_44E020  +
mov eax ebx +
shl eax 5 +
mov edi ds:dword_4889BC[eax] +
call ds:GetCurrentThreadId  +
cmp edi eax +
jz loc_44E16E  +
mov [esp+38h+var_2C] offset aUnableToCancel +
mov [esp+38h+var_30] offset aCancel_io +
mov [esp+38h+var_34] 2 +
mov [esp+38h+var_38] 0 +
call sub_43E390  +
jmp loc_44E020  +
lea eax [ebx+ebx*2] +
mov eax ds:dword_4871A4[eax*8] +
mov [esp+38h+var_38] eax +
call ds:CancelIo  +
sub esp 4 +
jmp loc_44E020  +
***
push ebp  +
mov ebp esp +
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ecx [ebp+0Ch] +
cmp ds:byte_4857A4 0 +
jz loc_44E2A7  +
test ecx ecx +
js loc_44E270  +
mov esi offset dword_4871A0 +
mov ebx offset unk_4889A0 +
xor edi edi +
jmp loc_44E1D5  +
add edi 1 +
add esi 18h +
add ebx 20h +
cmp edi 100h +
jz loc_44E270  +
cmp [esi] ecx +
jnz loc_44E1C0  +
mov [ebp-1Ch] ecx +
mov [esp] ebx +
call ds:EnterCriticalSection  +
mov ecx [ebp-1Ch] +
sub esp 4 +
cmp [esi] ecx +
jz loc_44E200  +
mov [esp] ebx +
call ds:LeaveCriticalSection  +
mov ecx [ebp-1Ch] +
sub esp 4 +
jmp loc_44E1C0  +
***
lea edx [edi+edi*2] +
shl edx 3 +
lea eax dword_4871A0[edx] +
mov ecx ds:dword_4871A0[edx] +
mov edx ds:dword_4871A4[edx] +
mov edi [eax+10h] +
mov [ebp-28h] ecx +
mov [ebp-24h] edx +
mov edx [eax+8] +
mov esi edx +
mov edx [eax+0Ch] +
mov eax [eax+14h] +
mov [esp] ebx +
mov [ebp-1Ch] edx +
mov [ebp-20h] eax +
call ds:LeaveCriticalSection  +
mov eax [ebp+8] +
mov edx [ebp-24h] +
mov ecx [ebp-28h] +
mov [eax+8] esi +
mov [eax+4] edx +
mov edx [ebp-1Ch] +
mov [eax] ecx +
sub esp 4 +
mov [eax+10h] edi +
mov [eax+0Ch] edx +
mov edx eax +
mov eax [ebp-20h] +
mov [edx+14h] eax +
mov eax [ebp+8] +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [ebp+8] +
mov dword ptr [eax] 0FFFFFFFFh +
mov dword ptr [eax+4] 0FFFFFFFFh +
mov dword ptr [eax+8] 0 +
mov dword ptr [eax+0Ch] 0 +
mov dword ptr [eax+10h] 0 +
mov dword ptr [eax+14h] 0 +
mov eax [ebp+8] +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [ebp-1Ch] ecx +
call sub_44D940  +
mov ecx [ebp-1Ch] +
jmp loc_44E1A9  +
***
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ecx [ebp+arg_4] +
cmp ds:byte_4857A4 0 +
jz loc_44E367  +
lea eax [ecx-1] +
cmp eax 0FFFFFFFDh +
ja loc_44E330  +
mov esi offset dword_4871A4 +
mov ebx offset unk_4889A0 +
xor edi edi +
jmp loc_44E301  +
add edi 1 +
add esi 18h +
add ebx 20h +
cmp edi 100h +
jz loc_44E330  +
cmp [esi] ecx +
jnz loc_44E2F0  +
mov [ebp+var_1C] ecx +
mov [esp+38h+var_38] ebx +
call ds:EnterCriticalSection  +
mov ecx [ebp+var_1C] +
sub esp 4 +
cmp [esi] ecx +
jz loc_44E377  +
mov [esp+38h+var_38] ebx +
call ds:LeaveCriticalSection  +
mov ecx [ebp+var_1C] +
sub esp 4 +
jmp loc_44E2F0  +
mov eax [ebp+arg_0] +
mov dword ptr [eax] 0FFFFFFFFh +
mov dword ptr [eax+4] 0FFFFFFFFh +
mov dword ptr [eax+8] 0 +
mov dword ptr [eax+0Ch] 0 +
mov dword ptr [eax+10h] 0 +
mov dword ptr [eax+14h] 0 +
mov eax [ebp+arg_0] +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [ebp+var_1C] ecx +
call sub_44D940  +
mov ecx [ebp+var_1C] +
jmp loc_44E2D9  +
lea edx [edi+edi*2] +
shl edx 3 +
lea eax dword_4871A0[edx] +
mov ecx ds:dword_4871A0[edx] +
mov edx ds:dword_4871A4[edx] +
mov edi [eax+10h] +
mov [ebp+var_28] ecx +
mov [ebp+var_24] edx +
mov edx [eax+8] +
mov esi edx +
mov edx [eax+0Ch] +
mov eax [eax+14h] +
mov [esp+38h+var_38] ebx +
mov [ebp+var_1C] edx +
mov [ebp+var_20] eax +
call ds:LeaveCriticalSection  +
mov eax [ebp+arg_0] +
mov edx [ebp+var_24] +
mov ecx [ebp+var_28] +
mov [eax+8] esi +
mov [eax+4] edx +
mov edx [ebp+var_1C] +
mov [eax] ecx +
sub esp 4 +
mov [eax+10h] edi +
mov [eax+0Ch] edx +
mov edx eax +
mov eax [ebp+var_20] +
mov [edx+14h] eax +
mov eax [ebp+arg_0] +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov esi [ebp+0Ch] +
cmp ds:byte_4857A4 0 +
jz loc_44E502  +
xor edi edi +
test esi esi +
mov eax offset dword_4871A8 +
mov ebx offset unk_4889A0 +
jz loc_44E460  +
mov [ebp+0Ch] esi +
mov esi eax +
mov eax [ebp+0Ch] +
jmp loc_44E434  +
add edi 1 +
add esi 18h +
add ebx 20h +
cmp edi 100h +
jz loc_44E460  +
cmp [esi] eax +
jnz loc_44E423  +
mov [ebp-1Ch] eax +
mov [esp] ebx +
call ds:EnterCriticalSection  +
mov eax [ebp-1Ch] +
sub esp 4 +
cmp [esi] eax +
jz loc_44E497  +
mov [esp] ebx +
call ds:LeaveCriticalSection  +
mov eax [ebp-1Ch] +
sub esp 4 +
jmp loc_44E423  +
***
mov eax [ebp+8] +
mov dword ptr [eax] 0FFFFFFFFh +
mov dword ptr [eax+4] 0FFFFFFFFh +
mov dword ptr [eax+8] 0 +
mov dword ptr [eax+0Ch] 0 +
mov dword ptr [eax+10h] 0 +
mov dword ptr [eax+14h] 0 +
mov eax [ebp+8] +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
lea edx [edi+edi*2] +
shl edx 3 +
mov ecx ds:dword_4871A0[edx] +
lea eax dword_4871A0[edx] +
mov edi [eax+10h] +
mov edx ds:dword_4871A4[edx] +
mov [ebp-28h] ecx +
mov ecx [eax+8] +
mov [ebp-24h] edx +
mov esi ecx +
mov ecx [eax+0Ch] +
mov eax [eax+14h] +
mov [esp] ebx +
mov [ebp-1Ch] ecx +
mov [ebp-20h] eax +
call ds:LeaveCriticalSection  +
mov eax [ebp+8] +
mov ecx [ebp-28h] +
mov edx [ebp-24h] +
mov [eax+8] esi +
mov [eax] ecx +
mov ecx [ebp-1Ch] +
mov [eax+4] edx +
mov edx eax +
sub esp 4 +
mov [eax+10h] edi +
mov [eax+0Ch] ecx +
mov eax [ebp-20h] +
mov [edx+14h] eax +
mov eax [ebp+8] +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
call sub_44D940  +
jmp loc_44E409  +
***
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
cmp ds:byte_4857A4 0 +
jz loc_44E6C8  +
mov eax [ebp+arg_4] +
mov [esp+38h+var_34] 4 +
add eax 1 +
mov [esp+38h+var_38] eax +
call calloc  +
mov [esp+38h+var_34] 4 +
mov [ebp+var_28] eax +
mov edi eax +
mov eax [ebp+arg_4] +
mov [esp+38h+var_38] eax +
call calloc  +
test eax eax +
mov [ebp+var_24] eax +
jz loc_44E7F8  +
test edi edi +
jz loc_44E7F8  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_44E751  +
mov ebx [ebp+arg_0] +
xor edi edi +
mov [ebp+var_20] 0 +
mov [ebp+var_1C] 0 +
jmp loc_44E5B2  +
add [ebp+var_1C] 1 +
mov [ebx+6] dx +
shl eax 5 +
add edi 1 +
add eax offset unk_4889A0 +
add ebx 8 +
mov [esp+38h+var_38] eax +
call ds:LeaveCriticalSection  +
sub esp 4 +
cmp edi [ebp+arg_4] +
jz loc_44E6E5  +
xor eax eax +
mov [ebx+6] ax +
movzx eax word ptr [ebx+4] +
test ax 0FFFEh +
jz loc_44E5CA  +
test al 4 +
jz loc_44E760  +
mov eax [ebx] +
call sub_44D800  +
test eax eax +
js loc_44E6D2  +
lea esi [eax+eax*2] +
shl esi 3 +
mov edx ds:dword_4871A4[esi] +
cmp edx 0FFFFFFFFh +
jz loc_44E650  +
test edx edx +
jz loc_44E650  +
mov ecx ds:dword_4871A8[esi] +
test ecx ecx +
jz loc_44E650  +
movzx edx word ptr [ebx+4] +
test dl 1 +
jz loc_44E60E  +
cmp ds:dword_4871B4[esi] 1 +
jnz loc_44E782  +
test dl 4 +
jz loc_44E624  +
lea esi [eax+eax*2] +
cmp ds:dword_4871B4[esi*8] 2 +
jnz loc_44E7DB  +
cmp dword ptr [ecx] 103h +
jnz loc_44E587  +
mov esi [ebp+var_20] +
mov edx [ecx+10h] +
mov ecx [ebp+var_28] +
add [ebp+var_20] 1 +
mov [ecx+esi*4] edx +
mov ecx [ebp+var_24] +
mov [ecx+esi*4] edi +
jmp loc_44E58F  +
or word ptr [ebx+6] 28h +
mov esi eax +
call ds:__imp__errno  +
shl esi 5 +
add esi offset unk_4889A0 +
mov dword ptr [eax] 9 +
mov [esp+38h+var_38] esi +
call ds:LeaveCriticalSection  +
sub esp 4 +
mov [esp+38h+var_2C] offset aInvalidFd +
mov [esp+38h+var_30] offset aUsbi_poll +
mov [esp+38h+var_34] 2 +
mov [esp+38h+var_38] 0 +
call sub_43E390  +
mov [ebp+var_1C] 0FFFFFFFFh +
mov eax [ebp+var_28] +
mov [esp+38h+var_38] eax +
call free  +
mov eax [ebp+var_24] +
test eax eax +
jz loc_44E6BD  +
mov [esp+38h+var_38] eax +
call free  +
mov eax [ebp+var_1C] +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
call sub_44D940  +
jmp loc_44E526  +
or word ptr [ebx+6] 28h +
call ds:__imp__errno  +
mov dword ptr [eax] 9 +
jmp loc_44E678  +
mov esi [ebp+arg_8] +
test esi esi +
jz loc_44E6A3  +
mov ebx [ebp+var_1C] +
test ebx ebx +
jnz loc_44E6A3  +
mov ecx [ebp+var_20] +
test ecx ecx +
jz loc_44E751  +
mov edx [ebp+arg_8] +
mov eax 0FFFFFFFFh +
mov [esp+38h+var_30] 0 +
test edx edx +
cmovns eax [ebp+arg_8] +
mov [esp+38h+var_2C] eax +
mov eax [ebp+var_28] +
mov [esp+38h+var_34] eax +
mov eax [ebp+var_20] +
mov [esp+38h+var_38] eax +
call ds:WaitForMultipleObjects  +
sub esp 10h +
test eax eax +
jns loc_44E820  +
cmp eax 102h +
jz loc_44E751  +
call ds:__imp__errno  +
mov [ebp+var_1C] 0FFFFFFFFh +
mov dword ptr [eax] 5 +
jmp loc_44E6A3  +
mov [ebp+var_1C] 0 +
jmp loc_44E6A3  +
mov edi 8 +
mov [ebx+6] di +
call ds:__imp__errno  +
mov dword ptr [eax] 0Dh +
mov [esp+38h+var_2C] offset aUnsupportedSet +
jmp loc_44E680  +
or word ptr [ebx+6] 28h +
mov esi eax +
call ds:__imp__errno  +
mov dword ptr [eax] 9 +
mov [esp+38h+var_2C] offset aAttemptedPolli +
mov [esp+38h+var_30] offset aUsbi_poll +
mov [esp+38h+var_34] 2 +
mov [esp+38h+var_38] 0 +
call sub_43E390  +
mov eax esi +
shl eax 5 +
add eax offset unk_4889A0 +
mov [esp+38h+var_38] eax +
call ds:LeaveCriticalSection  +
mov [ebp+var_1C] 0FFFFFFFFh +
sub esp 4 +
jmp loc_44E6A3  +
or word ptr [ebx+6] 28h +
mov esi eax +
call ds:__imp__errno  +
mov dword ptr [eax] 9 +
mov [esp+38h+var_2C] offset aAttemptedPollo +
jmp loc_44E79D  +
call ds:__imp__errno  +
mov [ebp+var_1C] 0FFFFFFFFh +
mov dword ptr [eax] 0Ch +
mov eax [ebp+var_28] +
test eax eax +
jz loc_44E6AE  +
jmp loc_44E6A3  +
cmp [ebp+var_20] eax +
jbe loc_44E732  +
mov edi [ebp+var_24] +
mov eax [edi+eax*4] +
mov edi [ebp+arg_0] +
lea ebx [edi+eax*8] +
mov eax [ebx] +
call sub_44D800  +
movzx edx word ptr [ebx+4] +
mov [ebp+var_1C] 1 +
mov [ebx+6] dx +
test eax eax +
js loc_44E6A3  +
shl eax 5 +
add eax offset unk_4889A0 +
mov [esp+38h+var_38] eax +
call ds:LeaveCriticalSection  +
sub esp 4 +
jmp loc_44E6A3  +
***
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
cmp ds:byte_4857A4 0 +
jz loc_44E907  +
mov eax [ebp+arg_0] +
call sub_44D800  +
test eax eax +
mov ebx eax +
js loc_44E91E  +
lea esi [eax+eax*2] +
shl esi 3 +
mov eax ds:dword_4871A8[esi] +
shl ebx 5 +
add ebx offset unk_4889A0 +
call sub_44D890  +
mov ds:dword_4871A0[esi] 0FFFFFFFFh +
mov ds:dword_4871A4[esi] 0FFFFFFFFh +
mov ds:dword_4871A8[esi] 0 +
mov ds:dword_4871AC[esi] 0 +
mov ds:dword_4871B0[esi] 0 +
mov ds:dword_4871B4[esi] 0 +
mov [esp+28h+var_28] ebx +
call ds:LeaveCriticalSection  +
mov eax 0FFFFFFFFh +
sub esp 4 +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
call sub_44D940  +
mov eax [ebp+arg_0] +
call sub_44D800  +
test eax eax +
mov ebx eax +
jns loc_44E898  +
call ds:__imp__errno  +
mov dword ptr [eax] 9 +
lea esp [ebp-0Ch] +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push esi  +
push ebx  +
sub esp 10h +
cmp ds:byte_4857A4 0 +
jz loc_44E9C0  +
cmp [ebp+arg_8] 1 +
jnz loc_44EA10  +
mov eax [ebp+arg_0] +
call sub_44D800  +
test eax eax +
mov ebx eax +
js loc_44E9F4  +
lea eax [eax+eax*2] +
lea esi dword_4871A0[eax*8] +
mov eax [esi+8] +
test eax eax +
jz loc_44E9C7  +
mov eax [eax+10h] +
shl ebx 5 +
add ebx offset unk_4889A0 +
mov [esp+18h+var_18] eax +
call ds:SetEvent  +
mov eax [esi+8] +
add dword ptr [eax+4] 1 +
sub esp 4 +
mov dword ptr [eax] 0 +
mov [esp+18h+var_18] ebx +
call ds:LeaveCriticalSection  +
mov eax 1 +
sub esp 4 +
lea esp [ebp-8] +
pop ebx  +
pop esi  +
pop ebp  +
retn   +
call sub_44D940  +
jmp loc_44E951  +
call ds:__imp__errno  +
shl ebx 5 +
add ebx offset unk_4889A0 +
mov dword ptr [eax] 9 +
mov [esp+18h+var_18] ebx +
call ds:LeaveCriticalSection  +
mov eax 0FFFFFFFFh +
sub esp 4 +
lea esp [ebp-8] +
pop ebx  +
pop esi  +
pop ebp  +
retn   +
call ds:__imp__errno  +
mov dword ptr [eax] 9 +
lea esp [ebp-8] +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop ebp  +
retn   +
mov [esp+18h+var_C] offset aThisFunctionSh +
mov [esp+18h+var_10] offset aUsbi_write +
mov [esp+18h+var_14] 1 +
mov [esp+18h+var_18] 0 +
call sub_43E390  +
mov eax 0FFFFFFFFh +
jmp loc_44E9B4  +
***
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
cmp ds:byte_4857A4 0 +
jz loc_44EAD0  +
cmp [ebp+arg_8] 1 +
jnz loc_44EB40  +
mov eax [ebp+arg_0] +
call sub_44D800  +
test eax eax +
mov ebx eax +
js loc_44EB70  +
lea eax [eax+eax*2] +
lea esi dword_4871A0[eax*8] +
mov eax [esi+8] +
mov eax [eax+10h] +
mov [esp+38h+var_34] 0FFFFFFFFh +
mov [esp+38h+var_38] eax +
call ds:WaitForSingleObject  +
sub esp 8 +
test eax eax +
jnz loc_44EAE0  +
mov eax [esi+8] +
mov edi 1 +
mov ecx [eax+4] +
lea edx [ecx-1] +
test edx edx +
mov [eax+4] edx +
jz loc_44EB21  +
shl ebx 5 +
add ebx offset unk_4889A0 +
mov [esp+38h+var_38] ebx +
call ds:LeaveCriticalSection  +
mov eax edi +
sub esp 4 +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
call sub_44D940  +
jmp loc_44EA52  +
call ds:GetLastError  +
mov edi 0FFFFFFFFh +
mov [esp+38h+var_2C] offset aWaitingForEven +
mov [esp+38h+var_30] offset aUsbi_read +
mov [esp+38h+var_34] 2 +
mov [esp+38h+var_38] 0 +
mov [esp+38h+var_28] eax +
call sub_43E390  +
call ds:__imp__errno  +
mov dword ptr [eax] 5 +
jmp loc_44EAAB  +
mov eax [eax+10h] +
mov [esp+38h+var_38] eax +
call ds:ResetEvent  +
mov eax [esi+8] +
mov dword ptr [eax] 103h +
sub esp 4 +
jmp loc_44EAAB  +
mov [esp+38h+var_2C] offset aThisFunctionSh +
mov [esp+38h+var_30] offset aUsbi_read +
mov [esp+38h+var_34] 1 +
mov [esp+38h+var_38] 0 +
call sub_43E390  +
mov eax 0FFFFFFFFh +
jmp loc_44EAC2  +
call ds:__imp__errno  +
mov dword ptr [eax] 9 +
mov eax 0FFFFFFFFh +
jmp loc_44EAC2  +
***
mov ecx [eax+6Ch] +
test ecx ecx +
jnz loc_44EBA1  +
mov edx [eax+80h] +
test edx edx +
jz loc_44EBB0  +
mov dword ptr [eax+80h] 1 +
retn   +
lea edx [eax+84h] +
cmp [eax+88h] edx +
jnz loc_44EBA1  +
lea edx [eax+8Ch] +
cmp [eax+90h] edx +
jnz loc_44EBA1  +
push ebp  +
mov ebp esp +
sub esp 18h +
mov dword ptr [eax+80h] 1 +
mov [esp+1Ch+var_1C] eax +
call sub_43EA10  +
leave   +
retn   +
***
push esi  +
push ebx  +
sub esp 20h +
mov eax ds:off_47CBD4 +
mov esi [ebp+arg_0] +
mov eax [eax+84h] +
lea edx [esi+esi*2] +
mov [esp+28h+var_28] 1 +
lea eax [eax+edx*4+58h] +
mov [esp+28h+var_24] eax +
call calloc  +
test eax eax +
mov ebx eax +
jz loc_44EC81  +
mov [eax] esi +
lea eax [eax+28h] +
mov [esp+28h+var_24] 0 +
mov [esp+28h+var_28] eax +
call sub_44CAA0  +
lea eax [ebx+2Ch] +
add ebx 30h +
mov [esp+28h+var_24] 0 +
mov [esp+28h+var_28] eax +
call sub_44CAA0  +
mov [esp+28h+var_18] ebx +
mov [esp+28h+var_1C] offset aTransferP +
mov [esp+28h+var_20] offset aLibusb_alloc_t +
mov [esp+28h+var_24] 4 +
mov [esp+28h+var_28] 0 +
call sub_43E390  +
mov eax ebx +
add esp 20h +
pop ebx  +
pop esi  +
pop ebp  +
retn 4  +
xor eax eax +
jmp loc_44EC78  +
***
push esi  +
push ebx  +
sub esp 20h +
mov ebx [ebp+arg_0] +
test ebx ebx +
jz loc_44ECFD  +
mov [esp+28h+var_18] ebx +
mov [esp+28h+var_1C] offset aTransferP +
mov [esp+28h+var_20] offset aLibusb_free_tr +
mov [esp+28h+var_24] 4 +
mov [esp+28h+var_28] 0 +
call sub_43E390  +
test byte ptr [ebx+4] 2 +
jz loc_44ECDC  +
mov eax [ebx+20h] +
test eax eax +
jz loc_44ECDC  +
mov [esp+28h+var_28] eax +
call free  +
lea eax [ebx-8] +
lea esi [ebx-30h] +
sub ebx 4 +
mov [esp+28h+var_28] eax +
call sub_44CB10  +
mov [esp+28h+var_28] ebx +
call sub_44CB10  +
mov [esp+28h+var_28] esi +
call free  +
add esp 20h +
pop ebx  +
pop esi  +
pop ebp  +
retn 4  +
***
push edi  +
push esi  +
push ebx  +
sub esp 4Ch +
mov ebx [ebp+arg_0] +
mov [esp+58h+var_4C] offset aTransferP +
mov [esp+58h+var_50] offset aLibusb_submit_ +
mov [esp+58h+var_54] 4 +
lea eax [ebx-30h] +
mov [esp+58h+var_48] ebx +
mov [esp+58h+var_58] 0 +
mov [ebp+var_38] eax +
call sub_43E390  +
lea eax [ebx-8] +
mov [esp+58h+var_58] eax +
mov [ebp+var_34] eax +
call sub_44CBC0  +
lea eax [ebx-4] +
mov [esp+58h+var_58] eax +
mov [ebp+var_2C] eax +
call sub_44CBC0  +
test byte ptr [ebx-0Ch] 20h +
jnz loc_44EFDB  +
mov esi [ebx+8] +
mov eax ds:off_47CBD4 +
mov dword ptr [ebx-14h] 0 +
mov byte ptr [ebx-0Ch] 0 +
test esi esi +
mov [ebp+var_30] eax +
mov eax 10h +
jnz loc_44EF14  +
mov [ebx-0Ch] al +
mov eax [ebp+var_2C] +
mov [esp+58h+var_58] eax +
call sub_44CC10  +
mov eax [ebx] +
mov eax [eax+10h] +
mov eax [eax+8] +
mov edi eax +
mov [ebp+var_40] eax +
add eax 3Ch +
mov [esp+58h+var_58] eax +
lea esi [edi+34h] +
mov [ebp+var_3C] eax +
call sub_44CBC0  +
mov ecx [edi+38h] +
cmp ecx esi +
jz loc_44EFE5  +
mov edi [ebx-1Ch] +
test edi edi +
jnz loc_44EDFD  +
mov eax [ebx-18h] +
test eax eax +
jnz loc_44EDFD  +
mov [ebx-28h] esi +
mov esi [ebp+var_40] +
lea eax [ebx-2Ch] +
mov edx [esi+34h] +
mov [ebx-2Ch] edx +
mov edx [esi+34h] +
mov [edx+4] eax +
mov [esi+34h] eax +
jmp loc_44EE37  +
mov edx [ebx-18h] +
cmp [eax+18h] edx +
jg loc_44EE22  +
mov ecx [eax+8] +
cmp esi ecx +
lea eax [ecx-4] +
jz loc_44EFB0  +
mov edx [eax+14h] +
test edx edx +
jnz loc_44EE15  +
cmp dword ptr [eax+18h] 0 +
jz loc_44EE22  +
cmp edi edx +
jl loc_44EE22  +
jnz loc_44EDFA  +
nop   +
lea esi [esi+0] +
jmp loc_44EDF2  +
mov [ebx-28h] ecx +
mov ecx [eax+4] +
lea edx [ebx-2Ch] +
mov [ebx-2Ch] ecx +
mov ecx [eax+4] +
mov [ecx+4] edx +
mov [eax+4] edx +
mov eax [ebp+var_3C] +
mov [esp+58h+var_58] eax +
call sub_44CC10  +
mov eax [ebx] +
mov eax [eax+10h] +
mov [esp+58h+var_58] eax +
call sub_43DFF0  +
mov eax [ebp+var_30] +
mov edi [ebp+var_38] +
mov eax [eax+64h] +
sub esp 4 +
mov [esp+58h+var_58] edi +
call eax  +
mov esi eax +
mov eax [ebp+var_2C] +
mov [esp+58h+var_58] eax +
call sub_44CBC0  +
movzx eax byte ptr [ebx-0Ch] +
mov edx eax +
and edx 0FFFFFFEFh +
test esi esi +
mov [ebx-0Ch] dl +
jnz loc_44EEC0  +
test al 8 +
jnz loc_44EEAB  +
test al 40h +
jz loc_44EFD0  +
mov eax [ebp+var_2C] +
mov [esp+58h+var_58] eax +
call sub_44CC10  +
mov eax [ebp+var_34] +
mov [esp+58h+var_58] eax +
call sub_44CC10  +
lea esp [ebp-0Ch] +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
mov eax [ebp+var_30] +
mov esi [ebp+var_38] +
mov eax [eax+6Ch] +
mov [esp+58h+var_58] esi +
mov esi 0FFFFFFFCh +
call eax  +
nop   +
mov eax [ebp+var_2C] +
mov [esp+58h+var_58] eax +
call sub_44CC10  +
mov eax [ebx] +
mov eax [eax+10h] +
mov [esp+58h+var_58] eax +
call sub_43E740  +
mov eax [ebx] +
mov eax [eax+10h] +
sub esp 4 +
mov edi [eax+8] +
add edi 3Ch +
mov [esp+58h+var_58] edi +
call sub_44CBC0  +
mov edx [ebx-2Ch] +
mov eax [ebx-28h] +
mov [eax] edx +
mov edx [ebx-2Ch] +
mov [edx+4] eax +
mov dword ptr [ebx-2Ch] 0 +
mov dword ptr [ebx-28h] 0 +
mov [esp+58h+var_58] edi +
call sub_44CC10  +
jmp loc_44EE94  +
mov edi [ebp+var_30] +
lea edx [ebp+var_20] +
mov eax [edi+78h] +
mov [esp+58h+var_54] edx +
mov [esp+58h+var_58] 0 +
call eax  +
test eax eax +
js loc_44EFFE  +
mov eax esi +
mov edx 10624DD3h +
mul  edx +
mov eax [ebp+var_20] +
shr edx 6 +
add eax edx +
imul edx edx +
mov [ebp+var_20] eax +
sub esi edx +
imul ecx esi +
add ecx [ebp+var_1C] +
cmp ecx 3B9AC9FFh +
mov [ebp+var_1C] ecx +
jle loc_44F03C  +
lea esi [ecx-3B9ACA00h] +
cmp esi 3B9AC9FFh +
lea edx [eax+1] +
jle loc_44F043  +
sub ecx 77359400h +
lea edx [eax+2] +
mov eax ecx +
mov [ebx-1Ch] edx +
mov edx 10624DD3h +
imul  edx +
movzx eax byte ptr [ebx-0Ch] +
sar ecx 1Fh +
mov [ebp+var_30] edi +
sar edx 6 +
or eax 10h +
sub edx ecx +
mov [ebx-18h] edx +
jmp loc_44ED93  +
mov edi [ebp+var_40] +
lea eax [ebx-2Ch] +
mov [ebx-28h] esi +
mov edx [edi+34h] +
mov [ebx-2Ch] edx +
mov edx [edi+34h] +
mov [edx+4] eax +
mov [edi+34h] eax +
jmp loc_44EE37  +
or edx 20h +
mov [ebx-0Ch] dl +
jmp loc_44EE89  +
mov esi 0FFFFFFFAh +
jmp loc_44EE89  +
mov edi [ebp+var_40] +
lea eax [ebx-2Ch] +
mov [ebx-28h] ecx +
mov [ebx-2Ch] ecx +
mov edx [edi+38h] +
mov [edx] eax +
mov [edi+38h] eax +
jmp loc_44EE37  +
call ds:__imp__errno  +
mov esi 0FFFFFF9Dh +
mov edx [eax] +
mov eax [ebx] +
mov eax [eax+10h] +
mov eax [eax+8] +
mov [esp+58h+var_48] edx +
mov [esp+58h+var_4C] offset aFailedToReadMo +
mov [esp+58h+var_50] offset aCalculate_time +
mov [esp+58h+var_54] 1 +
mov [esp+58h+var_58] eax +
call sub_43E390  +
jmp loc_44EE89  +
mov edx eax +
jmp loc_44EF84  +
mov ecx esi +
jmp loc_44EF84  +
***
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [ebp+arg_0] +
mov [esp+38h+var_2C] offset aTransferP +
mov [esp+38h+var_30] offset aLibusb_cancel_ +
mov [esp+38h+var_34] 4 +
lea eax [ebx-30h] +
mov [esp+38h+var_28] ebx +
lea esi [ebx-8] +
mov [esp+38h+var_38] 0 +
lea edi [ebx-4] +
mov [ebp+var_1C] eax +
call sub_43E390  +
mov [esp+38h+var_38] esi +
call sub_44CBC0  +
mov [esp+38h+var_38] edi +
call sub_44CBC0  +
movzx eax byte ptr [ebx-0Ch] +
and eax 24h +
cmp al 20h +
jnz loc_44F140  +
mov eax ds:off_47CBD4 +
mov ecx [ebp+var_1C] +
mov eax [eax+68h] +
mov [esp+38h+var_38] ecx +
call eax  +
test eax eax +
mov edx eax +
js loc_44F0F1  +
movzx eax byte ptr [ebx-0Ch] +
or eax 4 +
mov [ebx-0Ch] al +
mov [esp+38h+var_38] edi +
mov [ebp+var_1C] edx +
call sub_44CC10  +
mov [esp+38h+var_38] esi +
call sub_44CC10  +
mov edx [ebp+var_1C] +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
mov eax edx +
pop ebp  +
retn 4  +
lea eax [eax+5] +
cmp eax 1 +
jbe loc_44F147  +
mov eax [ebx] +
mov [ebp+var_1C] edx +
mov eax [eax+10h] +
mov eax [eax+8] +
mov [esp+38h+var_28] edx +
mov [esp+38h+var_2C] offset aCancelTransfer +
mov [esp+38h+var_30] offset aLibusb_cancel_ +
mov [esp+38h+var_34] 1 +
mov [esp+38h+var_38] eax +
call sub_43E390  +
mov edx [ebp+var_1C] +
cmp edx 0FFFFFFFCh +
movzx eax byte ptr [ebx-0Ch] +
jnz loc_44F0C9  +
or eax 8 +
jmp loc_44F0C9  +
mov edx 0FFFFFFFBh +
jmp loc_44F0CF  +
mov [esp+38h+var_28] edx +
mov [esp+38h+var_2C] offset aCancelTransfer +
mov [esp+38h+var_30] offset aLibusb_cancel_ +
mov [esp+38h+var_34] 4 +
mov [esp+38h+var_38] 0 +
mov [ebp+var_1C] edx +
call sub_43E390  +
mov edx [ebp+var_1C] +
jmp loc_44F12B  +
***
push edi  +
push esi  +
push ebx  +
mov ebx eax +
sub esp 4Ch +
test eax eax +
cmovz ebx ds:dword_485488 +
lea eax [ebx+3Ch] +
mov [esp+58h+var_58] eax +
lea esi [ebx+34h] +
mov [ebp+var_34] eax +
call sub_44CBC0  +
cmp [ebx+38h] esi +
jz loc_44F2A0  +
mov eax ds:off_47CBD4 +
lea edx [ebp+var_20] +
mov eax [eax+78h] +
mov [esp+58h+var_54] edx +
mov [esp+58h+var_58] 0 +
call eax  +
test eax eax +
js loc_44F2B7  +
mov ecx [ebp+var_1C] +
mov edx 10624DD3h +
mov edi [ebp+var_20] +
mov eax ecx +
imul  edx +
mov eax [ebx+38h] +
sar ecx 1Fh +
mov [ebp+var_2C] edx +
lea ebx [eax-4] +
sar [ebp+var_2C] 6 +
sub [ebp+var_2C] ecx +
cmp esi eax +
jnz loc_44F212  +
jmp loc_44F2A0  +
or byte ptr [ebx+24h] 1 +
mov eax [ebx+8] +
cmp esi eax +
lea ebx [eax-4] +
jz loc_44F2A0  +
mov eax [ebx+14h] +
test eax eax +
jnz loc_44F224  +
mov edx [ebx+18h] +
test edx edx +
jz loc_44F2A0  +
movzx edx byte ptr [ebx+24h] +
test dl 82h +
jnz loc_44F204  +
cmp edi eax +
jl loc_44F2A0  +
jnz loc_44F23B  +
mov eax [ebp+var_2C] +
cmp eax [ebx+18h] +
jl loc_44F2A0  +
or edx 0FFFFFF80h +
lea eax [ebx+30h] +
mov [ebx+24h] dl +
mov [esp+58h+var_58] eax +
call sub_44F050  +
sub esp 4 +
test eax eax +
jz loc_44F200  +
mov [ebp+var_30] eax +
call ds:__imp__errno  +
mov ecx [ebx+30h] +
mov edx [ebp+var_30] +
mov ecx [ecx+10h] +
mov eax [eax] +
mov ecx [ecx+8] +
mov [esp+58h+var_48] edx +
mov [esp+58h+var_44] eax +
mov [esp+58h+var_4C] offset aAsyncCancelFai +
mov [esp+58h+var_50] offset aHandle_timeout +
mov [esp+58h+var_54] 2 +
mov [esp+58h+var_58] ecx +
call sub_43E390  +
mov eax [ebx+8] +
cmp esi eax +
lea ebx [eax-4] +
jnz loc_44F212  +
xor ebx ebx +
mov eax [ebp+var_34] +
mov [esp+58h+var_58] eax +
call sub_44CC10  +
lea esp [ebp-0Ch] +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ebx eax +
jmp loc_44F2A2  +
***
push edi  +
mov edi eax +
push esi  +
push ebx  +
sub esp 4Ch +
lea ebx [eax+68h] +
mov [esp+58h+var_58] ebx +
mov [ebp+var_1C] edx +
call sub_44CBC0  +
mov eax [edi+80h] +
test eax eax +
jz loc_44F3B9  +
mov [esp+58h+var_4C] offset aPollFdsModifie +
mov [esp+58h+var_50] offset aHandle_events +
mov [esp+58h+var_54] 4 +
mov [esp+58h+var_58] 0 +
call sub_43E390  +
mov eax [edi+78h] +
test eax eax +
jz loc_44F321  +
mov [esp+58h+var_58] eax +
call free  +
mov dword ptr [edi+78h] 0 +
mov eax [edi+7Ch] +
test eax eax +
jz loc_44F7C5  +
mov [esp+58h+var_54] 8 +
mov [esp+58h+var_58] eax +
call calloc  +
test eax eax +
mov [ebp+var_20] eax +
mov [edi+78h] eax +
jz loc_44F7FA  +
mov ecx [edi+74h] +
lea esi [edi+70h] +
mov eax [ebp+var_20] +
cmp esi ecx +
lea edx [ecx-8] +
jz loc_44F37A  +
lea esi [esi+0] +
mov ecx [edx] +
add eax 8 +
mov [eax-8] ecx +
movzx ecx word ptr [edx+4] +
mov [eax-4] cx +
mov ecx [edx+0Ch] +
cmp esi ecx +
lea edx [ecx-8] +
jnz loc_44F360  +
mov eax [edi+6Ch] +
mov dword ptr [edi+80h] 0 +
test eax eax +
jnz loc_44F790  +
mov ecx [ebp+var_20] +
lea eax [edi+84h] +
cmp [edi+88h] eax +
mov [ebp+var_24] ecx +
jnz loc_44F3BF  +
lea eax [edi+8Ch] +
cmp [edi+90h] eax +
jnz loc_44F3BF  +
mov [esp+58h+var_58] edi +
call sub_43EA70  +
mov eax [edi+78h] +
mov [ebp+var_24] eax +
mov eax [edi+7Ch] +
mov [esp+58h+var_58] ebx +
mov [ebp+var_28] eax +
call sub_44CC10  +
mov edx [ebp+var_1C] +
mov ecx [edx+4] +
imul esi [edx] +
mov edx 10624DD3h +
mov eax ecx +
imul  edx +
mov eax ecx +
sar eax 1Fh +
sar edx 6 +
sub edx eax +
mov eax [ebp+var_28] +
add esi edx +
imul edx edx +
sub ecx edx +
cmp ecx 1 +
sbb esi 0FFFFFFFFh +
sub eax 1 +
mov [ebp+var_34] eax +
mov eax [ebp+var_28] +
mov [esp+58h+var_44] esi +
mov [esp+58h+var_4C] offset aPollDFdsWithTi +
mov [esp+58h+var_50] offset aHandle_events +
mov [esp+58h+var_48] eax +
mov [esp+58h+var_54] 4 +
mov [esp+58h+var_58] 0 +
call sub_43E390  +
mov eax [ebp+var_28] +
mov [esp+58h+var_50] esi +
mov [esp+58h+var_54] eax +
mov eax [ebp+var_24] +
mov [esp+58h+var_58] eax +
call sub_44E510  +
mov [esp+58h+var_4C] offset aPollReturnedD +
mov [esp+58h+var_50] offset aHandle_events +
mov [esp+58h+var_54] 4 +
mov [esp+58h+var_58] 0 +
mov esi eax +
mov [esp+58h+var_48] eax +
mov [ebp+var_20] eax +
call sub_43E390  +
test esi esi +
jz loc_44F79B  +
cmp [ebp+var_20] 0FFFFFFFFh +
jz loc_44F730  +
mov eax [ebp+var_20] +
test eax eax +
js loc_44F80C  +
mov eax [ebp+var_24] +
cmp word ptr [eax+6] 0 +
jz loc_44F664  +
mov [esp+58h+var_4C] offset aCaughtAFishOnT +
mov [esp+58h+var_50] offset aHandle_events +
mov [esp+58h+var_54] 4 +
mov [esp+58h+var_58] 0 +
call sub_43E390  +
mov [esp+58h+var_58] ebx +
call sub_44CBC0  +
mov eax [edi+80h] +
test eax eax +
jnz loc_44F6D7  +
mov esi [edi+6Ch] +
test esi esi +
jnz loc_44F706  +
lea eax [edi+84h] +
cmp [edi+88h] eax +
mov [ebp+var_38] eax +
jz loc_44F6C4  +
mov [esp+58h+var_4C] offset aHotplugMessage +
mov [esp+58h+var_50] offset aHandle_events +
mov [esp+58h+var_54] 4 +
mov [esp+58h+var_58] 0 +
call sub_43E390  +
mov eax [edi+88h] +
mov [ebp+var_30] 1 +
sub eax 8 +
mov ecx eax +
mov edx [ecx+8] +
mov [ebp+var_2C] eax +
mov eax [eax+0Ch] +
mov [eax] edx +
mov edx [ecx+8] +
mov [edx+4] eax +
mov dword ptr [ecx+8] 0 +
mov dword ptr [ecx+0Ch] 0 +
mov edx [edi+90h] +
lea eax [edi+8Ch] +
mov [ebp+var_1C] eax +
cmp edx eax +
mov esi edx +
jz loc_44F5B4  +
mov edx [esi] +
sub esi 0Ch +
mov eax [esi+10h] +
mov [eax] edx +
mov edx [esi+0Ch] +
mov [edx+4] eax +
mov dword ptr [esi+0Ch] 0 +
mov dword ptr [esi+10h] 0 +
mov [esp+58h+var_58] ebx +
call sub_44CC10  +
mov eax ds:off_47CBD4 +
mov eax [eax+74h] +
mov [esp+58h+var_58] esi +
call eax  +
test eax eax +
jnz loc_44F631  +
mov [esp+58h+var_58] ebx +
call sub_44CBC0  +
mov esi [edi+90h] +
cmp [ebp+var_1C] esi +
jnz loc_44F566  +
xor esi esi +
mov ecx [edi+6Ch] +
test ecx ecx +
jnz loc_44F5D6  +
mov edx [edi+80h] +
test edx edx +
jnz loc_44F5D6  +
mov eax [ebp+var_38] +
cmp eax [edi+88h] +
jz loc_44F7A9  +
mov [esp+58h+var_58] ebx +
call sub_44CC10  +
mov eax [ebp+var_2C] +
test eax eax +
jz loc_44F611  +
mov ecx [eax] +
mov eax [eax+4] +
mov [esp+58h+var_58] edi +
mov [esp+58h+var_50] ecx +
mov [esp+58h+var_54] eax +
call sub_44D390  +
mov eax [ebp+var_2C] +
cmp dword ptr [eax] 2 +
jz loc_44F77D  +
mov eax [ebp+var_2C] +
mov [esp+58h+var_58] eax +
call free  +
test esi esi +
jnz loc_44F6BA  +
sub [ebp+var_20] 1 +
jnz loc_44F66B  +
mov eax [ebp+var_30] +
test eax eax +
jz loc_44F7F3  +
xor esi esi +
jmp loc_44F405  +
mov [esp+58h+var_48] eax +
mov esi eax +
mov [esp+58h+var_4C] offset aBackendHandle_ +
mov [esp+58h+var_50] offset aHandle_events +
mov [esp+58h+var_54] 1 +
mov [esp+58h+var_58] edi +
call sub_43E390  +
mov [esp+58h+var_58] ebx +
call sub_44CBC0  +
jmp loc_44F5B6  +
mov [ebp+var_30] 0 +
mov ecx [ebp+var_20] +
mov eax ds:off_47CBD4 +
mov eax [eax+70h] +
mov [esp+58h+var_4C] ecx +
mov ecx [ebp+var_34] +
mov [esp+58h+var_58] edi +
mov [esp+58h+var_50] ecx +
mov ecx [ebp+var_24] +
lea edx [ecx+8] +
mov [esp+58h+var_54] edx +
call eax  +
test eax eax +
mov esi eax +
jz loc_44F61F  +
mov [esp+58h+var_48] eax +
mov [esp+58h+var_4C] offset aBackendHandl_0 +
mov [esp+58h+var_50] offset aHandle_events +
mov [esp+58h+var_54] 1 +
mov [esp+58h+var_58] edi +
call sub_43E390  +
mov eax esi +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [ebp+var_2C] 0 +
mov [ebp+var_30] 0 +
jmp loc_44F551  +
mov [esp+58h+var_4C] offset aSomeoneUpdated +
mov [esp+58h+var_50] offset aHandle_events +
mov [esp+58h+var_54] 4 +
mov [esp+58h+var_58] 0 +
call sub_43E390  +
mov esi [edi+6Ch] +
test esi esi +
jz loc_44F4E7  +
mov [esp+58h+var_4C] offset aSomeoneIsClosi +
mov [esp+58h+var_50] offset aHandle_events +
mov [esp+58h+var_54] 4 +
mov [esp+58h+var_58] 0 +
call sub_43E390  +
jmp loc_44F4E7  +
mov ebx ds:__imp__errno +
call ebx  +
cmp dword ptr [eax] 4 +
jz loc_44F7E9  +
call ebx  +
mov eax [eax] +
mov [esp+58h+var_58] edi +
mov [esp+58h+var_4C] offset aPollFailedDErr +
mov [esp+58h+var_50] offset aHandle_events +
mov [esp+58h+var_44] eax +
mov eax [ebp+var_20] +
mov [esp+58h+var_54] 1 +
mov [esp+58h+var_48] eax +
call sub_43E390  +
lea esp [ebp-0Ch] +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [eax+4] +
mov [esp+58h+var_58] eax +
call sub_43E740  +
sub esp 4 +
jmp loc_44F606  +
mov eax [ebp+var_20] +
mov [ebp+var_24] eax +
jmp loc_44F3BF  +
lea esp [ebp-0Ch] +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp sub_44F180  +
mov eax [ebp+var_1C] +
cmp eax [edi+90h] +
jnz loc_44F5D6  +
mov [esp+58h+var_58] edi +
call sub_43EA70  +
jmp loc_44F5D6  +
mov [esp+58h+var_50] 814h +
mov [esp+58h+var_54] offset aIo_c +
mov [esp+58h+var_58] offset aCtxPollfds_cnt +
call sub_459F00  +
mov eax [edi+7Ch] +
jmp loc_44F32C  +
mov eax 0FFFFFFF6h +
jmp loc_44F6BC  +
xor eax eax +
jmp loc_44F6BC  +
mov [esp+58h+var_58] ebx +
call sub_44CC10  +
mov eax 0FFFFFFF5h +
jmp loc_44F6BC  +
mov ebx ds:__imp__errno +
jmp loc_44F741  +
***
push ebp  +
mov ebp esp +
mov edx [ebp+0Ch] +
mov eax [ebp+8] +
mov [eax-10h] edx +
pop ebp  +
retn 8  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
pop ebp  +
mov eax [eax-10h] +
retn 4  +
***
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [ebp+arg_0] +
mov esi [ebx+30h] +
lea eax [ebx+30h] +
mov [ebp+var_1C] eax +
mov eax [esi+10h] +
mov edi [eax+8] +
add edi 3Ch +
mov [esp+38h+var_38] edi +
call sub_44CBC0  +
mov ecx [ebx+4] +
mov eax [ebx+8] +
mov [eax] ecx +
mov ecx [ebx+4] +
mov [ecx+4] eax +
mov dword ptr [ebx+4] 0 +
mov dword ptr [ebx+8] 0 +
mov [esp+38h+var_38] edi +
lea edi [ebx+2Ch] +
call sub_44CC10  +
mov [esp+38h+var_38] edi +
call sub_44CBC0  +
movzx eax byte ptr [ebx+24h] +
and eax 0FFFFFFDFh +
or eax 40h +
mov [ebx+24h] al +
mov [esp+38h+var_38] edi +
call sub_44CC10  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_44F930  +
movzx edi byte ptr [ebx+34h] +
mov eax [ebx+1Ch] +
mov [ebx+44h] eax +
mov edx [ebp+arg_4] +
mov eax [ebx+48h] +
mov [ebx+3Ch] edx +
mov [esp+38h+var_24] eax +
mov eax [ebp+var_1C] +
mov [esp+38h+var_2C] offset aTransferPHasCa +
mov [esp+38h+var_30] offset aUsbi_handle_tr +
mov [esp+38h+var_34] 4 +
mov [esp+38h+var_28] eax +
mov [esp+38h+var_38] 0 +
call sub_43E390  +
mov eax [ebx+48h] +
test eax eax +
jz loc_44F905  +
mov edx [ebp+var_1C] +
mov [esp+38h+var_38] edx +
call eax  +
sub esp 4 +
and edi 4 +
jz loc_44F918  +
mov eax [ebp+var_1C] +
mov [esp+3Ch+var_3C] eax +
call sub_44EC90  +
sub esp 4 +
mov eax [esi+10h] +
mov [esp+3Ch+var_3C] eax +
call sub_43E740  +
xor eax eax +
sub esp 4 +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
movzx edx byte ptr [ebx+34h] +
test dl 1 +
jz loc_44F990  +
mov ecx [ebx+40h] +
mov edi edx +
cmp byte ptr [ebx+36h] 0 +
lea eax [ecx-8] +
cmovz ecx eax +
mov eax [ebx+1Ch] +
cmp eax ecx +
jz loc_44F8B8  +
mov [esp+38h+var_2C] offset aInterpretingSh +
mov [esp+38h+var_30] offset aUsbi_handle_tr +
mov [esp+38h+var_34] 4 +
mov [esp+38h+var_38] 0 +
call sub_43E390  +
movzx edi byte ptr [ebx+34h] +
mov eax [ebx+1Ch] +
mov [ebp+arg_4] 1 +
jmp loc_44F8B8  +
mov eax [ebx+1Ch] +
mov edi edx +
jmp loc_44F8B8  +
***
push ebp  +
mov ebp esp +
push ebx  +
sub esp 14h +
mov ebx [ebp+8] +
test byte ptr [ebx+24h] 1 +
jnz loc_44F9C6  +
mov [esp] ebx +
mov dword ptr [esp+4] 3 +
call sub_44F840  +
add esp 14h +
pop ebx  +
pop ebp  +
retn   +
***
mov dword ptr [esp+0Ch] offset aDetectedTime_0 +
mov dword ptr [esp+8] offset aUsbi_handle__0 +
mov dword ptr [esp+4] 4 +
mov dword ptr [esp] 0 +
call sub_43E390  +
mov [esp] ebx +
mov dword ptr [esp+4] 2 +
call sub_44F840  +
add esp 14h +
pop ebx  +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov esi [ebp+8] +
mov eax [esi+30h] +
mov eax [eax+10h] +
mov ebx [eax+8] +
lea edi [ebx+68h] +
mov [esp] edi +
call sub_44CBC0  +
mov edx [ebx+6Ch] +
test edx edx +
jnz loc_44FA31  +
mov eax [ebx+80h] +
test eax eax +
jz loc_44FA64  +
lea edx [ebx+8Ch] +
mov [esi+10h] edx +
mov edx [ebx+8Ch] +
lea eax [esi+0Ch] +
mov [esi+0Ch] edx +
mov edx [ebx+8Ch] +
mov [edx+4] eax +
mov [ebx+8Ch] eax +
mov [ebp+8] edi +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp sub_44CC10  +
***
lea eax [ebx+84h] +
cmp [ebx+88h] eax +
jnz loc_44FA31  +
mov eax [ebx+90h] +
lea edx [ebx+8Ch] +
cmp eax edx +
jnz loc_44FA37  +
mov [esi+10h] eax +
mov eax [ebx+8Ch] +
lea edx [esi+0Ch] +
mov [esi+0Ch] eax +
mov eax [ebx+8Ch] +
mov [eax+4] edx +
mov [ebx+8Ch] edx +
mov [esp] ebx +
call sub_43EA10  +
jmp loc_44FA55  +
***
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov ebx [ebp+arg_0] +
test ebx ebx +
cmovz ebx ds:dword_485488 +
lea esi [ebx+68h] +
mov [esp+28h+var_28] esi +
call sub_44CBC0  +
mov edi [ebx+6Ch] +
mov [esp+28h+var_28] esi +
call sub_44CC10  +
test edi edi +
jnz loc_44FB08  +
lea eax [ebx+4Ch] +
mov [esp+28h+var_28] eax +
call sub_44CB60  +
mov edx 1 +
test eax eax +
jnz loc_44FAFC  +
mov dword ptr [ebx+50h] 1 +
xor dl dl +
add esp 1Ch +
mov eax edx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
mov [esp+28h+var_1C] offset aSomeoneElseIsC +
mov [esp+28h+var_20] offset aLibusb_try_loc +
mov [esp+28h+var_24] 4 +
mov [esp+28h+var_28] 0 +
call sub_43E390  +
add esp 1Ch +
mov edx 1 +
pop ebx  +
mov eax edx +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
push ebx  +
sub esp 14h +
mov ebx [ebp+arg_0] +
test ebx ebx +
cmovz ebx ds:dword_485488 +
lea eax [ebx+4Ch] +
mov [esp+18h+var_18] eax +
call sub_44CBC0  +
mov dword ptr [ebx+50h] 1 +
add esp 14h +
pop ebx  +
pop ebp  +
retn 4  +
***
push esi  +
push ebx  +
sub esp 10h +
mov ebx [ebp+arg_0] +
test ebx ebx +
cmovz ebx ds:dword_485488 +
lea eax [ebx+4Ch] +
mov dword ptr [ebx+50h] 0 +
lea esi [ebx+54h] +
add ebx 58h +
mov [esp+18h+var_18] eax +
call sub_44CC10  +
mov [esp+18h+var_18] esi +
call sub_44CBC0  +
mov [esp+18h+var_18] ebx +
call sub_44CDE0  +
mov [esp+18h+var_18] esi +
call sub_44CC10  +
add esp 10h +
pop ebx  +
pop esi  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push esi  +
push ebx  +
sub esp 10h +
mov ebx [ebp+8] +
test ebx ebx +
cmovz ebx ds:dword_485488 +
lea esi [ebx+68h] +
mov [esp] esi +
call sub_44CBC0  +
mov ebx [ebx+6Ch] +
mov [esp] esi +
call sub_44CC10  +
mov eax 1 +
test ebx ebx +
jz loc_44FC19  +
mov dword ptr [esp+0Ch] offset aSomeoneElseIsC +
mov dword ptr [esp+8] offset aLibusb_event_h +
mov dword ptr [esp+4] 4 +
mov dword ptr [esp] 0 +
call sub_43E390  +
xor eax eax +
add esp 10h +
pop ebx  +
pop esi  +
pop ebp  +
retn 4  +
***
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov ebx [ebp+arg_0] +
test ebx ebx +
cmovz ebx ds:dword_485488 +
lea esi [ebx+68h] +
mov [esp+28h+var_28] esi +
call sub_44CBC0  +
mov edi [ebx+6Ch] +
mov [esp+28h+var_28] esi +
call sub_44CC10  +
test edi edi +
jnz loc_44FC70  +
mov eax [ebx+50h] +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
mov [esp+28h+var_1C] offset aSomeoneElseIsC +
mov [esp+28h+var_20] offset aLibusb_event_0 +
mov [esp+28h+var_24] 4 +
mov [esp+28h+var_28] 0 +
call sub_43E390  +
add esp 1Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax [ebp+8] +
test eax eax +
cmovz eax ds:dword_485488 +
add eax 54h +
mov [esp] eax +
call sub_44CBC0  +
leave   +
retn 4  +
***
jmp loc_44FCE0  +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax [ebp+8] +
test eax eax +
cmovz eax ds:dword_485488 +
add eax 54h +
mov [esp] eax +
call sub_44CC10  +
leave   +
retn 4  +
***
jmp sub_44FD10  +
***
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov ebx [ebp+arg_0] +
mov esi [ebp+arg_4] +
test ebx ebx +
cmovz ebx ds:dword_485488 +
test esi esi +
jz loc_44FDB6  +
mov eax ds:off_47CBD4 +
lea edi [ebp+var_20] +
mov eax [eax+78h] +
mov [esp+48h+var_44] edi +
mov [esp+48h+var_48] 1 +
call eax  +
test eax eax +
js loc_44FDDA  +
imul eax [esi+4] +
mov edx [ebp+var_20] +
add eax [ebp+var_1C] +
add edx [esi] +
cmp eax 3B9AC9FFh +
mov [ebp+var_20] edx +
mov [ebp+var_1C] eax +
jle loc_44FD8B  +
lea ecx [eax-3B9ACA00h] +
cmp ecx 3B9AC9FFh +
lea esi [edx+1] +
jle loc_44FDD4  +
add edx 2 +
sub eax 77359400h +
mov [ebp+var_1C] eax +
mov [ebp+var_20] edx +
lea eax [ebx+54h] +
add ebx 58h +
mov [esp+48h+var_40] edi +
mov [esp+48h+var_44] eax +
mov [esp+48h+var_48] ebx +
call sub_44D050  +
cmp eax 8Ah +
setz al  +
movzx eax al +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
lea eax [ebx+54h] +
add ebx 58h +
mov [esp+48h+var_48] ebx +
mov [esp+48h+var_44] eax +
call sub_44CEA0  +
add esp 3Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
mov edx esi +
mov eax ecx +
jmp loc_44FD85  +
call ds:__imp__errno  +
mov eax [eax] +
mov [esp+48h+var_3C] offset aFailedToReadRe +
mov [esp+48h+var_40] offset aLibusb_wait_fo +
mov [esp+48h+var_44] 1 +
mov [esp+48h+var_38] eax +
mov [esp+48h+var_48] ebx +
call sub_43E390  +
mov eax 0FFFFFF9Dh +
jmp loc_44FDAC  +
***
push ebp  +
xor eax eax +
mov ebp esp +
pop ebp  +
retn 4  +
***
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov ebx [ebp+arg_0] +
test ebx ebx +
cmovz ebx ds:dword_485488 +
lea edx [ebx+3Ch] +
mov [esp+48h+var_48] edx +
mov [ebp+var_2C] edx +
call sub_44CBC0  +
mov esi [ebx+38h] +
lea ecx [ebx+34h] +
mov edx [ebp+var_2C] +
cmp esi ecx +
jz loc_44FFE3  +
cmp ecx esi +
lea eax [esi-4] +
jz loc_44FE81  +
test byte ptr [eax+24h] 82h +
jz loc_44FE73  +
mov esi [eax+8] +
lea edi [esi-4] +
cmp ecx esi +
mov eax edi +
jz loc_44FE81  +
test byte ptr [edi+24h] 82h +
jnz loc_44FE61  +
mov esi [eax+14h] +
mov edi [eax+18h] +
test esi esi +
jnz loc_44FEC0  +
test edi edi +
jnz loc_44FEC0  +
mov [esp+48h+var_48] edx +
call sub_44CC10  +
mov [esp+48h+var_3C] offset aNoUrbWithTimeo +
mov [esp+48h+var_40] offset aLibusb_get_nex +
mov [esp+48h+var_44] 4 +
mov [esp+48h+var_48] 0 +
call sub_43E390  +
add esp 3Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
mov [esp+48h+var_48] edx +
call sub_44CC10  +
mov eax ds:off_47CBD4 +
lea edx [ebp+var_20] +
mov eax [eax+78h] +
mov [esp+48h+var_44] edx +
mov [esp+48h+var_48] 0 +
call eax  +
test eax eax +
js loc_44FFB0  +
mov ecx [ebp+var_1C] +
mov edx 10624DD3h +
mov ebx [ebp+var_20] +
mov eax ecx +
imul  edx +
sar ecx 1Fh +
sar edx 6 +
sub edx ecx +
cmp esi ebx +
jg loc_44FF09  +
jnz loc_44FF54  +
cmp edx edi +
jge loc_44FF54  +
mov eax [ebp+arg_4] +
sub edi edx +
sub esi ebx +
test edi edi +
mov [eax] esi +
mov [eax+4] edi +
js loc_44FF97  +
mov [esp+48h+var_34] edi +
mov [esp+48h+var_38] esi +
mov [esp+48h+var_3C] offset aNextTimeoutInD +
mov [esp+48h+var_40] offset aLibusb_get_nex +
mov [esp+48h+var_44] 4 +
mov [esp+48h+var_48] 0 +
call sub_43E390  +
mov eax 1 +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
mov [esp+48h+var_3C] offset aFirstTimeoutAl +
mov [esp+48h+var_40] offset aLibusb_get_nex +
mov [esp+48h+var_44] 4 +
mov [esp+48h+var_48] 0 +
call sub_43E390  +
mov eax [ebp+arg_4] +
mov dword ptr [eax+4] 0 +
mov dword ptr [eax] 0 +
add esp 3Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
sub esi 1 +
add edi 0F4240h +
mov [eax] esi +
mov [eax+4] edi +
jmp loc_44FF19  +
call ds:__imp__errno  +
mov eax [eax] +
mov [esp+48h+var_3C] offset aFailedToReadMo +
mov [esp+48h+var_40] offset aLibusb_get_nex +
mov [esp+48h+var_44] 1 +
mov [esp+48h+var_38] eax +
mov [esp+48h+var_48] ebx +
call sub_43E390  +
xor eax eax +
jmp loc_44FF4A  +
mov [esp+48h+var_48] edx +
call sub_44CC10  +
mov [esp+48h+var_3C] offset aNoUrbsNoTimeou +
jmp loc_44FE91  +
***
push esi  +
mov esi edx +
push ebx  +
mov ebx ecx +
sub esp 20h +
lea edx [ebp+var_10] +
mov [esp+28h+var_24] edx +
mov [esp+28h+var_28] eax +
call sub_44FE20  +
sub esp 8 +
test eax eax +
jz loc_450032  +
mov edx [ebp+var_10] +
test edx edx +
jz loc_450045  +
cmp edx [esi] +
jl loc_450055  +
lea esi [esi+0] +
jz loc_450070  +
mov eax [esi] +
mov edx [esi+4] +
mov [ebx] eax +
xor eax eax +
mov [ebx+4] edx +
lea esp [ebp-8] +
pop ebx  +
pop esi  +
pop ebp  +
retn   +
mov ecx [ebp+var_C] +
mov eax 1 +
test ecx ecx +
jz loc_45003E  +
cmp edx [esi] +
jge loc_45002D  +
mov eax [ebp+var_10] +
mov edx [ebp+var_C] +
mov [ebx] eax +
xor eax eax +
mov [ebx+4] edx +
lea esp [ebp-8] +
pop ebx  +
pop esi  +
pop ebp  +
retn   +
mov eax [esi+4] +
cmp [ebp+var_C] eax +
jge loc_450032  +
jmp loc_450055  +
***
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [ebp+arg_0] +
mov edx [ebp+arg_4] +
lea ecx [ebp+var_20] +
mov esi [ebp+arg_8] +
test ebx ebx +
cmovz ebx ds:dword_485488 +
mov eax ebx +
call sub_450000  +
test eax eax +
mov edi eax +
jz loc_450121  +
jmp loc_4501E4  +
test ebx ebx +
mov eax ebx +
cmovz eax ds:dword_485488 +
add eax 54h +
mov [esp+38h+var_38] eax +
call sub_44CBC0  +
test esi esi +
jz loc_4500D4  +
mov eax [esi] +
test eax eax +
jnz loc_4501B9  +
mov [esp+38h+var_38] ebx +
call sub_44FC30  +
sub esp 4 +
test eax eax +
jnz loc_450181  +
test ebx ebx +
mov eax ebx +
cmovz eax ds:dword_485488 +
add eax 54h +
mov [esp+38h+var_38] eax +
call sub_44CC10  +
mov [esp+38h+var_2C] offset aEventHandlerWa +
mov [esp+38h+var_30] offset aLibusb_handl_0 +
mov [esp+38h+var_34] 4 +
mov [esp+38h+var_38] 0 +
call sub_43E390  +
mov [esp+38h+var_38] ebx +
call sub_44FAB0  +
sub esp 4 +
test eax eax +
jnz loc_4500B0  +
test esi esi +
jz loc_45013A  +
mov edx [esi] +
test edx edx +
jnz loc_45016A  +
mov [esp+38h+var_2C] offset aDoingOurOwnEve +
mov [esp+38h+var_30] offset aLibusb_handl_0 +
mov [esp+38h+var_34] 4 +
mov [esp+38h+var_38] 0 +
call sub_43E390  +
lea edx [ebp+var_20] +
mov eax ebx +
call sub_44F2C0  +
mov edi eax +
mov [esp+38h+var_38] ebx +
call sub_44FB70  +
mov eax edi +
sub esp 4 +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn 0Ch  +
mov [esp+38h+var_2C] offset aAnotherThreadI +
mov [esp+38h+var_30] offset aLibusb_handl_0 +
mov [esp+38h+var_34] 4 +
mov [esp+38h+var_38] 0 +
call sub_43E390  +
lea eax [ebp+var_20] +
mov [esp+38h+var_34] eax +
mov [esp+38h+var_38] ebx +
call sub_44FD10  +
sub esp 8 +
mov edi eax +
test ebx ebx +
mov eax ebx +
cmovz eax ds:dword_485488 +
add eax 54h +
mov [esp+38h+var_38] eax +
call sub_44CC10  +
test edi edi +
js loc_4501F5  +
xor eax eax +
cmp edi 1 +
jz loc_4501E4  +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn 0Ch  +
mov eax ebx +
call sub_44F180  +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn 0Ch  +
mov eax edi +
jmp loc_4501DA  +
***
sub esp 18h +
mov eax [ebp+arg_4] +
mov [esp+18h+var_10] 0 +
mov [esp+18h+var_14] eax +
mov eax [ebp+arg_0] +
mov [esp+18h+var_18] eax +
call sub_450080  +
sub esp 0Ch +
leave   +
retn 8  +
***
push ebp  +
mov ebp esp +
sub esp 28h +
lea eax [ebp-10h] +
mov [esp+4] eax +
mov eax [ebp+8] +
mov dword ptr [esp+8] 0 +
mov dword ptr [ebp-10h] 3Ch +
mov dword ptr [ebp-0Ch] 0 +
mov [esp] eax +
call sub_450080  +
sub esp 0Ch +
leave   +
retn 4  +
***
sub esp 28h +
mov eax [ebp+arg_4] +
mov [ebp+var_10] 3Ch +
mov [ebp+var_C] 0 +
mov [esp+28h+var_20] eax +
lea eax [ebp+var_10] +
mov [esp+28h+var_24] eax +
mov eax [ebp+arg_0] +
mov [esp+28h+var_28] eax +
call sub_450080  +
sub esp 0Ch +
leave   +
retn 8  +
***
push ebp  +
mov ebp esp +
push ebx  +
sub esp 14h +
mov ebx [ebp+8] +
mov edx [ebp+0Ch] +
lea ecx [ebp-10h] +
test ebx ebx +
cmovz ebx ds:dword_485488 +
mov eax ebx +
call sub_450000  +
test eax eax +
jnz loc_4502E6  +
lea edx [ebp-10h] +
mov eax ebx +
call sub_44F2C0  +
add esp 14h +
pop ebx  +
pop ebp  +
retn 8  +
***
mov eax ebx +
call sub_44F180  +
add esp 14h +
pop ebx  +
pop ebp  +
retn 8  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov edx [ebp+0Ch] +
test eax eax +
cmovz eax ds:dword_485488 +
mov [eax+40h] edx +
mov edx [ebp+10h] +
mov [eax+44h] edx +
mov edx [ebp+14h] +
mov [eax+48h] edx +
pop ebp  +
retn 10h  +
***
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [ebp+arg_0] +
mov [esp+38h+var_38] 10h +
mov edi [ebp+arg_8] +
call malloc  +
test eax eax +
mov esi eax +
jz loc_4503F2  +
mov eax [ebp+arg_4] +
movsx edx di +
mov [esp+38h+var_24] edx +
mov [esp+38h+var_2C] offset aAddFdDEventsD +
mov [esp+38h+var_30] offset aUsbi_add_pollf +
mov [esp+38h+var_28] eax +
mov [esp+38h+var_34] 4 +
mov [esp+38h+var_38] 0 +
mov [ebp+var_1C] edx +
call sub_43E390  +
mov eax [ebp+arg_4] +
mov [esi+4] di +
lea edi [ebx+68h] +
mov [esi] eax +
mov [esp+38h+var_38] edi +
call sub_44CBC0  +
lea ecx [ebx+70h] +
mov [esi+0Ch] ecx +
mov ecx [ebx+70h] +
lea eax [esi+8] +
mov [esi+8] ecx +
xor esi esi +
mov [ecx+4] eax +
add dword ptr [ebx+7Ch] 1 +
mov [ebx+70h] eax +
mov eax ebx +
call sub_44EB90  +
mov [esp+38h+var_38] edi +
call sub_44CC10  +
mov ecx [ebx+40h] +
test ecx ecx +
jz loc_4503E8  +
mov eax [ebx+48h] +
mov edx [ebp+var_1C] +
mov [esp+38h+var_30] eax +
mov eax [ebp+arg_4] +
mov [esp+38h+var_34] edx +
mov [esp+38h+var_38] eax +
call ecx  +
sub esp 0Ch +
lea esp [ebp-0Ch] +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi 0FFFFFFF5h +
jmp loc_4503E8  +
***
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [ebp+arg_0] +
mov [esp+38h+var_34] 0 +
lea edi [ebx+3Ch] +
mov [esp+38h+var_38] edi +
lea esi [ebx+4Ch] +
call sub_44CAA0  +
mov [esp+38h+var_34] 0 +
mov [esp+38h+var_38] esi +
call sub_44CAA0  +
lea eax [ebx+54h] +
mov [esp+38h+var_34] 0 +
mov [esp+38h+var_38] eax +
mov [ebp+var_1C] eax +
call sub_44CAA0  +
lea eax [ebx+58h] +
mov [esp+38h+var_34] 0 +
mov [esp+38h+var_38] eax +
mov [ebp+var_20] eax +
call sub_44CD00  +
lea eax [ebx+68h] +
mov [esp+38h+var_34] 0 +
mov [esp+38h+var_38] eax +
mov [ebp+var_24] eax +
call sub_44CAA0  +
lea eax [ebx+34h] +
mov [ebx+38h] eax +
mov [ebx+34h] eax +
lea eax [ebx+70h] +
mov [ebx+74h] eax +
mov [ebx+70h] eax +
lea eax [ebx+84h] +
mov [ebx+88h] eax +
mov [ebx+84h] eax +
lea eax [ebx+8Ch] +
mov [ebx+90h] eax +
mov [ebx+8Ch] eax +
lea eax [ebx+8] +
mov [esp+38h+var_38] eax +
call sub_44DC00  +
test eax eax +
js loc_4504E4  +
mov eax [ebx+8] +
mov [esp+38h+var_30] 1 +
mov [esp+38h+var_38] ebx +
mov [esp+38h+var_34] eax +
call sub_450330  +
mov ecx eax +
xor eax eax +
test ecx ecx +
js loc_450530  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ecx 0FFFFFF9Dh +
mov [esp+38h+var_38] edi +
mov [ebp+var_28] ecx +
call sub_44CB10  +
mov [esp+38h+var_38] esi +
call sub_44CB10  +
mov eax [ebp+var_1C] +
mov [esp+38h+var_38] eax +
call sub_44CB10  +
mov eax [ebp+var_20] +
mov [esp+38h+var_38] eax +
call sub_44CD40  +
mov eax [ebp+var_24] +
mov [esp+38h+var_38] eax +
call sub_44CB10  +
mov ecx [ebp+var_28] +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
mov eax ecx +
pop ebp  +
retn   +
mov eax [ebx+8] +
mov [ebp+var_28] ecx +
mov [esp+38h+var_38] eax +
call sub_44E870  +
mov eax [ebx+0Ch] +
mov [esp+38h+var_38] eax +
call sub_44E870  +
mov ecx [ebp+var_28] +
jmp loc_4504E9  +
***
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov edi [ebp+arg_4] +
mov esi [ebp+arg_0] +
mov [esp+38h+var_2C] offset aRemoveFdD +
mov [esp+38h+var_30] offset aUsbi_remove_po +
mov [esp+38h+var_28] edi +
mov [esp+38h+var_34] 4 +
mov [esp+38h+var_38] 0 +
call sub_43E390  +
lea eax [esi+68h] +
mov [esp+38h+var_38] eax +
mov [ebp+var_1C] eax +
call sub_44CBC0  +
mov edx [esi+74h] +
lea eax [esi+70h] +
cmp eax edx +
lea ebx [edx-8] +
jnz loc_4505AE  +
jmp loc_450610  +
mov edx [ebx+0Ch] +
cmp eax edx +
lea ebx [edx-8] +
jz loc_450610  +
cmp [edx-8] edi +
jnz loc_4505A4  +
mov eax [ebx+0Ch] +
mov edx [ebx+8] +
mov [eax] edx +
mov edx [ebx+8] +
mov [edx+4] eax +
mov eax esi +
mov dword ptr [ebx+8] 0 +
mov dword ptr [ebx+0Ch] 0 +
sub dword ptr [esi+7Ch] 1 +
call sub_44EB90  +
mov eax [ebp+var_1C] +
mov [esp+38h+var_38] eax +
call sub_44CC10  +
mov [esp+38h+var_38] ebx +
call free  +
mov eax [esi+44h] +
test eax eax +
jz loc_450603  +
mov edx [esi+48h] +
mov [esp+38h+var_38] edi +
mov [esp+38h+var_34] edx +
call eax  +
sub esp 8 +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+38h+var_28] edi +
mov [esp+38h+var_2C] offset aCouldnTFindFdD +
mov [esp+38h+var_30] offset aUsbi_remove_po +
mov [esp+38h+var_34] 4 +
mov [esp+38h+var_38] 0 +
call sub_43E390  +
mov eax [ebp+var_1C] +
mov [ebp+arg_0] eax +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp sub_44CC10  +
***
push ebx  +
sub esp 14h +
mov ebx [ebp+arg_0] +
mov eax [ebx+8] +
mov [esp+18h+var_18] ebx +
mov [esp+18h+var_14] eax +
call sub_450550  +
mov eax [ebx+8] +
mov [esp+18h+var_18] eax +
call sub_44E870  +
mov eax [ebx+0Ch] +
mov [esp+18h+var_18] eax +
call sub_44E870  +
lea eax [ebx+3Ch] +
mov [esp+18h+var_18] eax +
call sub_44CB10  +
lea eax [ebx+4Ch] +
mov [esp+18h+var_18] eax +
call sub_44CB10  +
lea eax [ebx+54h] +
mov [esp+18h+var_18] eax +
call sub_44CB10  +
lea eax [ebx+58h] +
mov [esp+18h+var_18] eax +
call sub_44CD40  +
lea eax [ebx+68h] +
mov [esp+18h+var_18] eax +
call sub_44CB10  +
mov eax [ebx+78h] +
test eax eax +
jz loc_4506D0  +
mov [ebp+arg_0] eax +
add esp 14h +
pop ebx  +
pop ebp  +
jmp free  +
add esp 14h +
pop ebx  +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax [ebp+8] +
mov dword ptr [esp+0Ch] offset aExternalPollin +
mov dword ptr [esp+8] offset aLibusb_get_pol +
mov dword ptr [esp+4] 1 +
mov [esp] eax +
call sub_43E390  +
xor eax eax +
leave   +
retn 4  +
***
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax [ebp+8] +
test eax eax +
jz locret_450725  +
mov [esp] eax +
call free  +
leave   +
retn 4  +
***
push ebp  +
mov ebp esp +
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov esi [ebp+8] +
mov eax [esi+10h] +
movzx edx byte ptr [eax+14h] +
mov [esp+14h] edx +
movzx eax byte ptr [eax+0Ch] +
mov dword ptr [esp+0Ch] offset aDeviceD_D +
mov dword ptr [esp+8] offset aUsbi_handle_di +
mov dword ptr [esp+4] 4 +
mov [esp+10h] eax +
mov dword ptr [esp] 0 +
call sub_43E390  +
mov eax [esi+10h] +
mov eax [eax+8] +
add eax 3Ch +
mov [esp] eax +
call sub_44CBC0  +
mov edi [esi+10h] +
mov edx [edi+8] +
mov eax [edx+38h] +
lea ecx [edx+34h] +
cmp eax ecx +
lea ebx [eax-4] +
jnz loc_4507B0  +
jmp loc_4507F0  +
mov edx [edi+8] +
mov eax [ebx+8] +
lea ecx [edx+34h] +
cmp eax ecx +
lea ebx [eax-4] +
jz loc_4507F0  +
cmp [ebx+30h] esi +
jnz loc_4507A0  +
lea edi [ebx+2Ch] +
mov [esp] edi +
call sub_44CBC0  +
movzx eax byte ptr [ebx+24h] +
test al 20h +
jnz loc_450802  +
or eax 8 +
mov [ebx+24h] al +
mov [esp] edi +
call sub_44CC10  +
mov edi [esi+10h] +
mov eax [ebx+8] +
mov edx [edi+8] +
lea ebx [eax-4] +
lea ecx [edx+34h] +
cmp eax ecx +
jnz loc_4507B0  +
lea esi [esi+0] +
add edx 3Ch +
mov [ebp+8] edx +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp sub_44CC10  +
***
mov [esp] edi +
lea edi [ebx+28h] +
call sub_44CC10  +
mov eax [esi+10h] +
mov eax [eax+8] +
add eax 3Ch +
mov [esp] eax +
call sub_44CC10  +
lea eax [ebx+30h] +
mov [esp+10h] eax +
mov dword ptr [esp+0Ch] offset aCancellingTran +
mov dword ptr [esp+8] offset aUsbi_handle_di +
mov dword ptr [esp+4] 4 +
mov dword ptr [esp] 0 +
call sub_43E390  +
mov [esp] edi +
call sub_44CBC0  +
mov eax ds:off_47CBD4 +
mov eax [eax+6Ch] +
mov [esp] ebx +
call eax  +
mov [esp] edi +
call sub_44CC10  +
mov dword ptr [esp+4] 5 +
mov [esp] ebx +
call sub_44F840  +
jmp loc_450773  +
***
mov [esp+18h+var_18] offset aLibelf_sanity_ +
mov ebx [esp+18h+arg_0] +
call getenv  +
test eax eax +
jz loc_450935  +
mov [esp+18h+var_10] 0 +
mov [esp+18h+var_14] 0 +
mov [esp+18h+var_18] eax +
call strtol  +
mov dword_4616E4 eax +
test ebx ebx +
mov eax 1 +
jz loc_45094F  +
cmp ebx 1 +
jz loc_450954  +
mov ds:dword_4857B4 9 +
xor al al +
add esp 18h +
pop ebx  +
retn   +
mov edx ds:dword_4857B8 +
mov ds:dword_4857B8 1 +
test edx edx +
cmovnz eax edx +
add esp 18h +
pop ebx  +
retn   +
***
test edx edx +
jz loc_4509F3  +
push edi  +
mov edi ecx +
push esi  +
push ebx  +
mov ebx eax +
jmp loc_450988  +
add ebx 1 +
sub edx 1 +
jz loc_4509D2  +
movzx eax byte ptr [ebx] +
cmp al 20h +
jz loc_450980  +
cmp al 2Fh +
jle loc_4509C6  +
movsx esi al +
xor eax eax +
lea ecx [esi-2Fh] +
cmp edi ecx +
jge loc_4509B3  +
jmp loc_4509C8  +
movzx ecx byte ptr [ebx] +
cmp cl 2Fh +
jle loc_4509D8  +
movsx esi cl +
lea ecx [esi-2Fh] +
cmp ecx edi +
jg loc_4509C8  +
imul eax edi +
add ebx 1 +
sub edx 1 +
lea eax [eax+esi-30h] +
jnz loc_4509A1  +
pop ebx  +
pop esi  +
pop edi  +
retn   +
xor eax eax +
mov ecx [esp+0Ch+arg_0] +
mov [ecx] edx +
pop ebx  +
pop esi  +
pop edi  +
retn   +
pop ebx  +
xor eax eax +
pop esi  +
pop edi  +
retn   +
cmp cl 20h +
jz loc_4509E7  +
lea esi [esi+0] +
jmp loc_4509C8  +
cmp byte ptr [ebx] 20h +
jnz loc_4509C8  +
add ebx 1 +
sub edx 1 +
jnz loc_4509E2  +
pop ebx  +
pop esi  +
pop edi  +
retn   +
xor eax eax +
retn   +
***
push esi  +
push ebx  +
mov ebx eax +
sub esp 2Ch +
cmp edx 0Fh +
mov [eax+14h] edx +
jbe loc_450A54  +
mov ebp [eax+0Ch] +
mov [esp+2Ch+var_24] 4 +
mov [esp+2Ch+var_28] offset unk_481738 +
mov [esp+2Ch+var_2C] ebp +
call memcmp  +
test eax eax +
jz loc_450A60  +
mov [esp+2Ch+var_24] 8 +
mov [esp+2Ch+var_28] offset aArch +
mov [esp+2Ch+var_2C] ebp +
call memcmp  +
test eax eax +
jz loc_450A90  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp edx 7 +
jbe loc_450A4C  +
mov ebp [eax+0Ch] +
jmp loc_450A30  +
mov dword ptr [ebx+8] 3 +
mov dword ptr [ebx+14h] 10h +
movsx eax byte ptr [ebp+4] +
mov [ebx+4Ch] eax +
movsx eax byte ptr [ebp+5] +
mov [ebx+50h] eax +
movsx eax byte ptr [ebp+6] +
mov [ebx+54h] eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx+44h] +
mov [esp+2Ch+var_10] 0 +
mov dword ptr [ebx+8] 1 +
mov dword ptr [ebx+14h] 8 +
test eax eax +
mov dword ptr [ebx+34h] 8 +
jnz loc_450A4C  +
cmp dword ptr [ebx] 43h +
jbe loc_450A4C  +
mov edi 44h +
mov esi 8 +
jmp loc_450AF9  +
mov ecx ebp +
cmp cl 20h +
jnz loc_450A4C  +
mov ecx [ebx+3Ch] +
test ecx ecx +
jz loc_450B90  +
and eax 1 +
mov esi eax +
mov eax [ebx+44h] +
add esi edx +
test eax eax +
jnz loc_450A4C  +
lea edi [esi+3Ch] +
cmp edi [esp+2Ch+var_20] +
ja loc_450A4C  +
mov ebp [ebx+0Ch] +
add esi ebp +
lea eax [esi+3Ah] +
mov [esp+2Ch+var_24] 2 +
mov [esp+2Ch+var_28] offset asc_481746 +
mov [esp+2Ch+var_2C] eax +
call memcmp  +
test eax eax +
jnz loc_450A4C  +
cmp byte ptr [esi] 2Fh +
jnz loc_450A4C  +
lea ecx [esp+2Ch+var_10] +
mov edx 0Ah +
mov [esp+2Ch+var_2C] ecx +
lea eax [esi+30h] +
mov ecx 0Ah +
call sub_450970  +
mov ebp [esp+2Ch+var_10] +
test ebp ebp +
jnz loc_450A4C  +
test eax eax +
jz loc_450A4C  +
mov ecx [ebx] +
lea edx [eax+edi] +
cmp edx ecx +
mov [esp+2Ch+var_20] ecx +
ja loc_450A4C  +
movzx ebp byte ptr [esi+1] +
mov ecx ebp +
cmp cl 2Fh +
jnz loc_450AC5  +
cmp byte ptr [esi+2] 20h +
jnz loc_450A4C  +
add edi [ebx+0Ch] +
mov [ebx+48h] eax +
mov [ebx+44h] edi +
jmp loc_450A4C  +
add edi [ebx+0Ch] +
mov [ebx+40h] eax +
mov [ebx+3Ch] edi +
jmp loc_450AD7  +
***
push esi  +
push ebx  +
sub esp 3Ch +
mov eax ds:dword_4857B8 +
mov esi [esp+3Ch+arg_8] +
test eax eax +
jz loc_450F22  +
mov eax [esp+3Ch+arg_4] +
test eax eax +
jz loc_450DE0  +
cmp [esp+3Ch+arg_4] 2 +
jz loc_450DF0  +
cmp [esp+3Ch+arg_4] 7 +
jnz loc_450F47  +
test esi esi +
jz loc_450F81  +
movzx eax byte ptr [esi+78h] +
test al 1 +
jz loc_450F36  +
cmp [esp+3Ch+arg_4] 7 +
jz loc_450D96  +
cmp dword ptr [esi+8] 1 +
jnz loc_450DA8  +
test al 40h +
jz loc_450F63  +
mov eax [esi+18h] +
mov [esp+3Ch+arg_0] eax +
mov edi [esi+34h] +
mov eax [esi] +
mov [esp+3Ch+var_10] 0 +
cmp edi eax +
jz loc_450DE0  +
ja loc_45102D  +
lea edx [edi+3Ch] +
cmp eax edx +
jb loc_45103E  +
add edi [esi+0Ch] +
mov ebx 10h +
mov [esp+3Ch+var_34] 2 +
mov [esp+3Ch+var_38] offset asc_481746 +
lea eax [edi+3Ah] +
mov [esp+3Ch+var_3C] eax +
call memcmp  +
test eax eax +
jz loc_450C66  +
jmp loc_45104F  +
mov ebx eax +
movzx edx byte ptr [edi+ebx-1] +
lea eax [ebx-1] +
cmp dl 20h +
jnz loc_4510DA  +
test eax eax +
jnz loc_450C64  +
cmp byte ptr [edi] 2Fh +
jz loc_45118D  +
mov [esp+3Ch+var_24] edi +
xor ebx ebx +
mov edx 2Eh +
nop   +
mov [esp+3Ch+var_3C] edx +
call malloc  +
test eax eax +
mov [esp+3Ch+var_28] eax +
jz loc_45109F  +
mov ecx [esp+3Ch+var_28] +
lea ebp [esp+3Ch+var_10] +
mov edx 0Ch +
mov eax ecx +
add eax 1Ch +
mov [ecx+18h] eax +
lea eax [edi+10h] +
mov dword ptr [ecx] 0 +
mov ecx 0Ah +
mov [esp+3Ch+var_3C] ebp +
call sub_450970  +
mov ecx [esp+3Ch+var_28] +
mov edx 6 +
mov [ecx+4] eax +
mov ecx 0Ah +
lea eax [edi+1Ch] +
mov [esp+3Ch+var_3C] ebp +
call sub_450970  +
mov ecx [esp+3Ch+var_28] +
mov edx 6 +
mov [ecx+8] eax +
mov ecx 0Ah +
lea eax [edi+22h] +
mov [esp+3Ch+var_3C] ebp +
call sub_450970  +
mov ecx [esp+3Ch+var_28] +
mov edx 8 +
mov [ecx+0Ch] eax +
mov ecx 8 +
lea eax [edi+28h] +
mov [esp+3Ch+var_3C] ebp +
call sub_450970  +
mov ecx [esp+3Ch+var_28] +
mov edx 0Ah +
mov [ecx+10h] eax +
mov ecx 0Ah +
lea eax [edi+30h] +
mov [esp+3Ch+var_3C] ebp +
call sub_450970  +
mov edx [esp+3Ch+var_10] +
mov ecx [esp+3Ch+var_28] +
test edx edx +
mov [ecx+14h] eax +
jnz loc_4510B0  +
mov edx [esi+34h] +
lea eax [eax+edx+3Ch] +
cmp eax [esi] +
ja loc_451060  +
mov ecx [esp+3Ch+var_28] +
test ebx ebx +
mov edx [edi] +
mov eax [ecx+18h] +
mov [eax] edx +
mov edx [edi+4] +
mov [eax+4] edx +
mov edx [edi+8] +
mov [eax+8] edx +
mov edx [edi+0Ch] +
mov [eax+0Ch] edx +
mov eax [ecx+18h] +
mov byte ptr [eax+10h] 0 +
jnz loc_451000  +
mov eax [esp+3Ch+var_28] +
mov edx [eax+14h] +
jmp loc_450DFC  +
test al 2 +
jz loc_450F36  +
cmp dword ptr [esi+8] 1 +
jz loc_45107D  +
add dword ptr [esi+1Ch] 1 +
mov eax esi +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp ebx 1 +
jz loc_45116E  +
cmp ebx 2 +
jnz loc_450DD5  +
cmp al 2Fh +
mov edx 30h +
mov [esp-10h+arg_14] edi +
jz loc_450C90  +
mov ds:dword_4857B4 2Ah +
nop   +
xor eax eax +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
xor edx edx +
xor esi esi +
mov [esp+3Ch+var_28] 0 +
mov [esp+3Ch+var_3C] 80h +
mov [esp+3Ch+var_24] edx +
call malloc  +
mov edx [esp+3Ch+var_24] +
test eax eax +
mov ebp eax +
jz loc_45108E  +
xor eax eax +
mov ecx 20h +
mov edi ebp +
stos   +
mov eax [esp+3Ch+arg_0] +
cmp [esp+3Ch+arg_4] 1 +
mov dword ptr [ebp+1Ch] 1 +
mov dword ptr [ebp+7Ch] 12B649Eh +
mov [ebp+18h] eax +
mov [ebp+20h] esi +
mov [ebp+4] edx +
mov [ebp+0] edx +
jz loc_450E59  +
or byte ptr [ebp+78h] 2 +
cmp [esp+3Ch+arg_4] 2 +
jz loc_450EED  +
or byte ptr [ebp+78h] 1 +
test esi esi +
jz loc_450FB5  +
mov eax [esi+34h] +
mov ecx [esi+38h] +
lea edi [eax+3Ch] +
mov eax [esp+3Ch+var_28] +
mov [ebp+30h] eax +
mov eax [esi+28h] +
add eax edi +
test ecx ecx +
mov [ebp+28h] eax +
jz loc_450E9C  +
cmp eax [ecx+28h] +
mov ebx ecx +
jnz loc_450E95  +
jmp loc_450EF7  +
cmp eax [ebx+28h] +
jz loc_450F00  +
mov ebx [ebx+2Ch] +
test ebx ebx +
jnz loc_450E90  +
test edx edx +
jz loc_450EAB  +
mov eax [esi+0Ch] +
add eax edi +
mov [ebp+10h] eax +
mov [ebp+0Ch] eax +
mov eax edx +
add edi edx +
movzx ebx byte ptr [esi+78h] +
and eax 1 +
add edi eax +
movzx eax byte ptr [ebp+78h] +
mov [ebp+24h] edi +
and ebx 4 +
and eax 0FFFFFFFBh +
or eax ebx +
mov [ebp+78h] al +
movzx ebx byte ptr [esi+78h] +
and eax 0FFFFFFBFh +
mov [ebp+2Ch] ecx +
and ebx 40h +
or eax ebx +
mov [ebp+78h] al +
add dword ptr [esi+1Ch] 1 +
mov [esi+38h] ebp +
mov [esi+34h] edi +
mov eax ebp +
call sub_450A00  +
add esp 3Ch +
mov eax ebp +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ebx ecx +
lea esi [esi+0] +
mov eax [esp+3Ch+var_28] +
mov [esp+3Ch+var_3C] eax +
call free  +
mov [esp+3Ch+var_3C] ebp +
call free  +
mov eax ebx +
add dword ptr [ebx+1Ch] 1 +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ds:dword_4857B4 21h +
add esp 3Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ds:dword_4857B4 0Ah +
xor eax eax +
jmp loc_450DAE  +
cmp [esp+3Ch+arg_4] 1 +
jz loc_450BDA  +
mov ds:dword_4857B4 5 +
xor eax eax +
jmp loc_450DAE  +
mov eax [esp+3Ch+arg_0] +
cmp [esi+18h] eax +
jz loc_450C12  +
mov ds:dword_4857B4 0Ch +
xor eax eax +
jmp loc_450DAE  +
mov eax [esp+3Ch+arg_0] +
mov [esp+3Ch+var_34] 2 +
mov [esp+3Ch+var_38] 0 +
mov [esp+3Ch+var_3C] eax +
call _lseek  +
cmp eax 0FFFFFFFFh +
jz loc_4510C9  +
mov edx eax +
mov [esp+3Ch+var_28] 0 +
jmp loc_450DFC  +
test edx edx +
jz loc_450EE6  +
mov [esp+3Ch+var_30] edx +
mov [esp+3Ch+var_34] 0 +
mov [esp+3Ch+var_38] 0 +
mov [esp+3Ch+var_3C] ebp +
mov [esp+3Ch+var_28] edx +
call sub_451E20  +
mov edx [esp+3Ch+var_28] +
test eax eax +
mov [ebp+0Ch] eax +
jnz loc_450EE6  +
mov [esp+3Ch+var_3C] ebp +
call free  +
xor eax eax +
jmp loc_450DAE  +
mov eax [ecx+18h] +
mov edi ecx +
mov [esp+3Ch+var_20] eax +
add eax 11h +
mov [ecx] eax +
mov ecx [esp+3Ch+var_24] +
mov [esp+3Ch+var_34] ebx +
mov [esp+3Ch+var_3C] eax +
mov [esp+3Ch+var_38] ecx +
call memcpy  +
mov eax [edi] +
mov byte ptr [eax+ebx] 0 +
jmp loc_450D8D  +
mov ds:dword_4857B4 23h +
xor eax eax +
jmp loc_450DE2  +
mov ds:dword_4857B4 24h +
xor eax eax +
jmp loc_450DE2  +
mov ds:dword_4857B4 25h +
xor eax eax +
jmp loc_450DE2  +
mov eax [esp+3Ch+var_28] +
mov [esp+3Ch+var_3C] eax +
call free  +
xor eax eax +
mov ds:dword_4857B4 27h +
jmp loc_450DE2  +
mov ds:dword_4857B4 0Bh +
xor eax eax +
jmp loc_450DAE  +
mov ds:dword_4857B4 3Bh +
xor eax eax +
jmp loc_450DAE  +
mov ds:dword_4857B4 3Dh +
xor eax eax +
jmp loc_450DE2  +
mov [esp+3Ch+var_3C] ecx +
call free  +
xor eax eax +
mov ds:dword_4857B4 26h +
jmp loc_450DE2  +
mov ds:dword_4857B4 1Eh +
xor eax eax +
jmp loc_450DAE  +
cmp byte ptr [edi] 2Fh +
jz loc_4510F0  +
cmp dl 2Fh +
jz loc_451160  +
lea edx [ebx+2Eh] +
mov [esp+3Ch+var_24] edi +
jmp loc_450C90  +
movzx eax byte ptr [edi+1] +
lea edx [eax-30h] +
cmp dl 9 +
ja loc_450DB6  +
mov ebp [esi+44h] +
test ebp ebp +
jz loc_45117C  +
lea ecx [esp+3Ch+var_10] +
mov [esp+3Ch+var_3C] ecx +
lea edx [ebx-1] +
mov ecx 0Ah +
lea eax [edi+1] +
call sub_450970  +
mov ecx [esp+3Ch+var_10] +
test ecx ecx +
jnz loc_450DD5  +
mov edx [esi+48h] +
cmp eax edx +
jnb loc_45117C  +
mov ecx [esi+44h] +
lea ebx [ecx+eax] +
cmp byte ptr [ebx] 2Fh +
mov [esp+3Ch+var_24] ebx +
mov ebx eax +
jnz loc_45114A  +
jmp loc_451152  +
cmp byte ptr [ecx+ebx] 2Fh +
jz loc_451152  +
add ebx 1 +
cmp edx ebx +
nop   +
ja loc_451144  +
cmp edx ebx +
jz loc_45117C  +
sub ebx eax +
lea edx [ebx+2Eh] +
jmp loc_450C90  +
lea edx [ebx+2Dh] +
mov ebx eax +
mov [esp+3Ch+var_24] edi +
jmp loc_450C90  +
mov [esp-10h+arg_14] edi +
mov edx 2Fh +
jmp loc_450C90  +
mov ds:dword_4857B4 29h +
xor eax eax +
jmp loc_450DE2  +
movzx eax byte ptr [edi+1] +
sub eax 30h +
cmp al 9 +
ja loc_450DD5  +
xor ebx ebx +
jmp loc_451100  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov eax ds:dword_4857B8 +
mov ebp [esp+30h] +
mov esi [esp+34h] +
test eax eax +
jz loc_451230  +
test esi esi +
jz loc_451224  +
test ebp ebp +
jz loc_451224  +
mov dword ptr [esp] 80h +
call malloc  +
test eax eax +
mov ebx eax +
jz loc_451244  +
xor eax eax +
mov ecx 20h +
mov edi ebx +
mov edx esi +
stos   +
mov eax ebx +
mov dword ptr [ebx+18h] 0FFFFFFFFh +
mov dword ptr [ebx+1Ch] 1 +
mov dword ptr [ebx+7Ch] 12B649Eh +
mov [ebx+4] esi +
mov [ebx] esi +
mov [ebx+10h] ebp +
mov [ebx+0Ch] ebp +
mov byte ptr [ebx+78h] 45h +
call sub_450A00  +
mov eax ebx +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
add esp 1Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov ds:dword_4857B4 21h +
add esp 1Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov ds:dword_4857B4 3Bh +
xor eax eax +
jmp loc_45121C  +
***
mov eax [esp+arg_0] +
test eax eax +
jz loc_451270  +
mov eax [eax+8] +
retn   +
xor eax eax +
retn   +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov edi [esp+1Ch+arg_0] +
test edi edi +
jz loc_451445  +
mov eax [edi+1Ch] +
sub eax 1 +
test eax eax +
mov [edi+1Ch] eax +
jnz loc_4513F7  +
mov ecx [edi+20h] +
test ecx ecx +
jz loc_451429  +
mov edx [ecx+38h] +
test edx edx +
jz loc_4512D2  +
cmp edi edx +
jnz loc_4512CA  +
jmp loc_45144F  +
cmp edi eax +
jz loc_451419  +
mov edx eax +
mov eax [edx+2Ch] +
test eax eax +
nop   +
jnz loc_4512C0  +
mov [esp+1Ch+var_1C] ecx +
call sub_451280  +
mov eax [edi+30h] +
test eax eax +
jz loc_4512E9  +
mov [esp+1Ch+var_1C] eax +
call free  +
mov esi [edi+64h] +
mov [esp+1Ch+var_10] 0 +
test esi esi +
jz loc_4513A6  +
lea esi [esi+0] +
mov ebx [esi+14h] +
test ebx ebx +
jnz loc_451316  +
jmp loc_451344  +
test ebp ebp +
jz loc_451344  +
mov ebx ebp +
movzx eax byte ptr [ebx+28h] +
mov ebp [ebx+18h] +
test al 2 +
jz loc_451334  +
mov ecx [ebx+20h] +
test ecx ecx +
jz loc_451334  +
mov [esp+1Ch+var_1C] ecx +
call free  +
movzx eax byte ptr [ebx+28h] +
test al 1 +
jz loc_451310  +
mov [esp+1Ch+var_1C] ebx +
call free  +
test ebp ebp +
jnz loc_451314  +
mov ebx [esi+1Ch] +
test ebx ebx +
jz loc_45136E  +
movzx eax byte ptr [ebx+28h] +
test al 2 +
jz loc_451366  +
mov edx [ebx+20h] +
test edx edx +
jz loc_451366  +
mov [esp+1Ch+var_1C] edx +
call free  +
movzx eax byte ptr [ebx+28h] +
test al 1 +
jnz loc_451400  +
test byte ptr [esi+2Ch] 1 +
jz loc_45138C  +
mov eax [esp+1Ch+var_10] +
test eax eax +
jz loc_451410  +
mov [esp+1Ch+var_1C] eax +
call free  +
mov [esp+1Ch+var_10] esi +
mov esi [esi] +
test esi esi +
jnz loc_451300  +
mov eax [esp+1Ch+var_10] +
test eax eax +
jz loc_4513A6  +
mov [esp+1Ch+var_1C] eax +
call free  +
mov eax [edi+10h] +
cmp eax [edi+0Ch] +
jz loc_4513BA  +
test eax eax +
jz loc_4513BA  +
mov [esp+1Ch+var_1C] eax +
call free  +
test byte ptr [edi+78h] 10h +
jz loc_4513CF  +
mov eax [edi+3Ch] +
test eax eax +
jz loc_4513CF  +
mov [esp+1Ch+var_1C] eax +
call free  +
mov eax [edi+58h] +
test eax eax +
jz loc_4513DE  +
mov [esp+1Ch+var_1C] eax +
call free  +
mov eax [edi+5Ch] +
test eax eax +
jz loc_4513ED  +
mov [esp+1Ch+var_1C] eax +
call free  +
mov [esp+1Ch+var_1C] edi +
call free  +
xor eax eax +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+1Ch+var_1C] ebx +
call free  +
jmp loc_45136E  +
mov [esp+1Ch+var_10] esi +
jmp loc_45138C  +
add edx 2Ch +
mov eax [edi+2Ch] +
mov [edx] eax +
mov ecx [edi+20h] +
jmp loc_4512D2  +
test byte ptr [edi+78h] 40h +
jnz loc_4512E9  +
mov eax [edi+0Ch] +
test eax eax +
jnz loc_4512E1  +
nop   +
jmp loc_4512E9  +
add esp 1Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
lea edx [ecx+38h] +
jmp loc_45141C  +
***
push ebx  +
sub esp 20h +
mov esi [esp+20h+arg_4] +
lea eax [esp+20h+var_4] +
mov ebx [esp+20h+arg_0] +
test esi esi +
cmovz esi eax +
test ebx ebx +
jz loc_4514B8  +
cmp dword ptr [ebx+8] 3 +
jz loc_451492  +
mov eax [ebx+14h] +
mov edi [ebx+0Ch] +
mov [esi] eax +
add esp 20h +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov edi [ebx+58h] +
test edi edi +
jz loc_4514A7  +
mov eax [ebx+14h] +
mov [esi] eax +
add esp 20h +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov [esp+20h+var_20] ebx +
call sub_4521A0  +
test eax eax +
jz loc_4514C2  +
mov edi [ebx+58h] +
jmp loc_451499  +
mov dword ptr [esi] 0 +
xor edi edi +
jmp loc_451489  +
mov dword ptr [esi] 0 +
jmp loc_451489  +
***
mov edx [esp+arg_0] +
test edx edx +
jnz loc_4514F0  +
mov edx ds:dword_4857B4 +
test edx edx +
jz loc_451511  +
cmp edx 4Bh +
mov eax offset aUnknownError +
jbe loc_451504  +
retn   +
cmp edx 0FFFFFFFFh +
mov eax offset aUnknownError +
cmovz edx ds:dword_4857B4 +
cmp edx 4Bh +
ja locret_4514EC  +
mov edx ds:off_4822C0[edx*4] +
test edx edx +
cmovnz eax edx +
retn   +
xor eax eax +
retn   +
***
mov ebx [esp+18h+arg_0] +
test ebx ebx +
jz loc_451551  +
cmp dword ptr [ebx+8] 3 +
jnz loc_451547  +
mov eax [esp+18h+arg_4] +
cmp [ebx+4Ch] eax +
jnz loc_451558  +
mov eax [ebx+58h] +
test eax eax +
jz loc_451570  +
add esp 18h +
pop ebx  +
retn   +
mov ds:dword_4857B4 0Dh +
add esp 18h +
xor eax eax +
pop ebx  +
retn   +
mov ds:dword_4857B4 0Eh +
add esp 18h +
xor eax eax +
pop ebx  +
retn   +
mov [esp+18h+var_18] ebx +
call sub_4521A0  +
test eax eax +
jz loc_451551  +
mov eax [ebx+58h] +
jmp loc_451542  +
***
jmp sub_451590  +
***
sub esp 1Ch +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_18] 1 +
mov [esp+1Ch+var_1C] eax +
call sub_451520  +
add esp 1Ch +
retn   +
***
mov ebx [esp+18h+arg_0] +
test ebx ebx +
jz loc_4515FB  +
cmp dword ptr [ebx+8] 3 +
jnz loc_4515E0  +
mov eax [esp+18h+arg_4] +
cmp [ebx+4Ch] eax +
jnz loc_4515F1  +
mov eax [ebx+58h] +
test eax eax +
jz loc_451602  +
mov eax [ebx+5Ch] +
add esp 18h +
pop ebx  +
retn   +
mov ds:dword_4857B4 0Dh +
add esp 18h +
xor eax eax +
pop ebx  +
retn   +
mov ds:dword_4857B4 0Eh +
xor eax eax +
add esp 18h +
pop ebx  +
retn   +
mov [esp+18h+var_18] ebx +
call sub_4521A0  +
test eax eax +
jnz loc_4515D2  +
xor eax eax +
jmp loc_4515FD  +
***
sub esp 1Ch +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_18] 1 +
mov [esp+1Ch+var_1C] eax +
call sub_4515B0  +
add esp 1Ch +
retn   +
***
sub esp 14h +
mov ebx [esp+14h+arg_0] +
mov esi [esp+14h+arg_4] +
test ebx ebx +
jz loc_45167A  +
cmp dword ptr [ebx+8] 3 +
jnz loc_451670  +
mov eax [ebx+58h] +
test eax eax +
jz loc_451685  +
test esi esi +
jz loc_451667  +
mov eax [ebx+60h] +
mov [esi] eax +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
mov ds:dword_4857B4 0Dh +
add esp 14h +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
retn   +
mov [esp+14h+var_14] ebx +
call sub_4521A0  +
test eax eax +
jnz loc_45165E  +
jmp loc_45167A  +
***
sub esp 14h +
mov ebx [esp+14h+arg_0] +
mov esi [esp+14h+arg_4] +
test ebx ebx +
jz loc_4516EA  +
cmp dword ptr [ebx+8] 3 +
jnz loc_4516E0  +
mov eax [ebx+58h] +
test eax eax +
jz loc_451700  +
mov eax [ebx+68h] +
test eax eax +
jz loc_4516CB  +
mov eax [eax+8] +
add eax 1 +
test esi esi +
jz loc_4516F5  +
mov [esi] eax +
xor eax eax +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov ds:dword_4857B4 0Dh +
add esp 14h +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
retn   +
xor eax eax +
jmp loc_4516D3  +
mov [esp+14h+var_14] ebx +
call sub_4521A0  +
test eax eax +
jnz loc_4516BE  +
jmp loc_4516EA  +
***
sub esp 24h +
mov ebx [esp+24h+arg_0] +
mov esi [esp+24h+arg_4] +
test ebx ebx +
jz loc_4517AA  +
test esi esi +
lea eax [esp+24h+var_8] +
cmovz esi eax +
cmp dword ptr [ebx+8] 3 +
jnz loc_4517A0  +
mov eax [ebx+58h] +
test eax eax +
jz loc_4517B5  +
mov eax [ebx+4Ch] +
cmp eax 1 +
jz loc_451760  +
cmp eax 2 +
jz loc_451778  +
mov ds:dword_4857B4 13h +
mov eax 0FFFFFFFFh +
add esp 24h +
pop ebx  +
pop esi  +
retn   +
mov eax [ebx+58h] +
movzx eax word ptr [eax+32h] +
cmp eax 0FFFFh +
jz loc_451790  +
mov [esi] eax +
add esp 24h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
mov ds:dword_4857B4 3 +
add esp 24h +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
retn   +
mov eax [ebx+64h] +
test eax eax +
jz loc_4517C7  +
mov eax [eax+48h] +
jmp loc_45176E  +
mov ds:dword_4857B4 0Dh +
add esp 24h +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
retn   +
mov [esp+24h+var_24] ebx +
call sub_4521A0  +
test eax eax +
jnz loc_45173B  +
jmp loc_4517AA  +
mov ds:dword_4857B4 15h +
or eax 0FFFFFFFFh +
jmp loc_451757  +
***
sub esp 1Ch +
mov eax [esp+24h] +
mov [esp+4] eax +
mov eax [esp+20h] +
mov [esp] eax +
call sub_451640  +
test eax eax +
setz al  +
add esp 1Ch +
movzx eax al +
retn   +
***
sub esp 1Ch +
mov eax [esp+24h] +
mov [esp+4] eax +
mov eax [esp+20h] +
mov [esp] eax +
call sub_4516A0  +
test eax eax +
setz al  +
add esp 1Ch +
movzx eax al +
retn   +
***
sub esp 1Ch +
mov eax [esp+24h] +
mov [esp+4] eax +
mov eax [esp+20h] +
mov [esp] eax +
call sub_451710  +
test eax eax +
setz al  +
add esp 1Ch +
movzx eax al +
retn   +
***
push edi  +
push esi  +
push ebx  +
sub esp 10h +
mov ebx [esp+20h] +
mov esi [esp+24h] +
test ebx ebx +
jz loc_4518DC  +
cmp esi 0FEFFh +
mov edi 0FFFFh +
jbe loc_4518A8  +
cmp dword ptr [ebx+8] 3 +
jz loc_4518B2  +
mov ds:dword_4857B4 0Dh +
xor eax eax +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
mov edi esi +
xor esi esi +
cmp dword ptr [ebx+8] 3 +
jnz loc_451895  +
mov eax [ebx+58h] +
test eax eax +
jz loc_451900  +
mov [esp] ebx +
call sub_452720  +
test eax eax +
jz loc_4518DC  +
mov edx [ebx+4Ch] +
cmp edx 1 +
jz loc_4518E5  +
cmp edx 2 +
jz loc_451910  +
mov ds:dword_4857B4 13h +
xor eax eax +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
mov edx [ebx+58h] +
mov [edx+32h] di +
mov [eax+48h] esi +
or dword ptr [ebx+70h] 1 +
or dword ptr [eax+10h] 1 +
mov eax 1 +
jmp loc_4518A1  +
***
mov [esp] ebx +
call sub_4521A0  +
test eax eax +
jnz loc_4518B9  +
xor eax eax +
jmp loc_4518DE  +
***
mov ds:dword_4857B4 3 +
xor eax eax +
jmp loc_4518A1  +
***
mov ebx [esp+18h+arg_0] +
mov eax [esp+18h+arg_4] +
test ebx ebx +
jz loc_45197B  +
test eax eax +
jz loc_451951  +
cmp [eax+4] ebx +
jnz loc_451940  +
mov eax [eax] +
add esp 18h +
pop ebx  +
retn   +
mov ds:dword_4857B4 14h +
add esp 18h +
xor eax eax +
pop ebx  +
retn   +
cmp dword ptr [ebx+8] 3 +
jnz loc_451980  +
mov eax [ebx+58h] +
test eax eax +
jz loc_45198E  +
mov eax [ebx+64h] +
test eax eax +
jz loc_451971  +
cmp dword ptr [eax+8] 1 +
jz loc_45193B  +
mov eax [eax] +
test eax eax +
jnz loc_451965  +
mov ds:dword_4857B4 15h +
xor eax eax +
jmp loc_45193B  +
mov ds:dword_4857B4 0Dh +
xor eax eax +
jmp loc_45193B  +
mov [esp+18h+var_18] ebx +
call sub_4521A0  +
test eax eax +
jnz loc_45195E  +
xor eax eax +
jmp loc_45193B  +
***
mov eax [esp+arg_0] +
test eax eax +
jz loc_4519B0  +
mov eax [eax+8] +
retn   +
xor eax eax +
retn   +
***
mov eax [esp+arg_0] +
test eax eax +
jz loc_4519E2  +
mov edx [eax+4] +
cmp dword ptr [edx+4Ch] 1 +
jnz loc_4519D5  +
add eax 30h +
retn   +
mov ds:dword_4857B4 0Eh +
xor eax eax +
retn   +
xor eax eax +
retn   +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov ebx [esp+1Ch+arg_0] +
mov edi [esp+1Ch+arg_8] +
test ebx ebx +
jz loc_451B4D  +
mov eax [esp+1Ch+arg_4] +
mov [esp+1Ch+var_1C] ebx +
mov [esp+1Ch+var_18] eax +
call sub_452850  +
test eax eax +
mov esi eax +
jz loc_451B4D  +
mov eax [eax+8] +
test eax eax +
jz loc_451AC4  +
mov eax [ebx+4Ch] +
cmp eax 1 +
jz loc_451A50  +
cmp eax 2 +
jz loc_451AB0  +
mov ds:dword_4857B4 13h +
xor eax eax +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp dword ptr [esi+34h] 3 +
jnz loc_451AC4  +
test byte ptr [ebx+6Ch] 4 +
jnz loc_451AD8  +
xor ebx ebx +
xor ecx ecx +
jmp loc_451A87  +
mov ebp [ecx+10h] +
cmp ebp 1 +
jbe loc_451A76  +
lea ebx [ebx+ebp-1] +
xor edx edx +
mov eax ebx +
div  ebp +
sub ebx edx +
cmp ebx edi +
ja loc_451A99  +
mov eax [ecx+8] +
mov edx edi +
sub edx ebx +
cmp edx eax +
jb loc_451B02  +
add ebx eax +
mov [esp+1Ch+var_18] ecx +
mov [esp+1Ch+var_1C] esi +
call sub_451B70  +
test eax eax +
mov ecx eax +
jnz loc_451A62  +
mov ds:dword_4857B4 19h +
add esp 1Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ds:dword_4857B4 3 +
add esp 1Ch +
xor al al +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ds:dword_4857B4 18h +
add esp 1Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
xor ecx ecx +
lea esi [esi+0] +
mov [esp+1Ch+var_18] ecx +
mov [esp+1Ch+var_1C] esi +
call sub_451B70  +
test eax eax +
mov ecx eax +
jz loc_451A99  +
mov ebx [ecx+0Ch] +
cmp ebx edi +
ja loc_451AE0  +
mov eax edi +
sub eax ebx +
cmp eax [ecx+8] +
jnb loc_451AE0  +
mov esi [ecx] +
test esi esi +
jz loc_451B57  +
sub edi ebx +
test byte ptr dword_4616E4 1 +
lea eax [esi+edi] +
jz loc_451A45  +
mov ecx [ecx+8] +
cmp ecx edi +
jbe loc_451B43  +
cmp byte ptr [eax] 0 +
jz loc_451A45  +
lea edx [esi+edi+1] +
add ecx esi +
jmp loc_451B3F  +
add edx 1 +
cmp byte ptr [edx-1] 0 +
jz loc_451A45  +
cmp edx ecx +
jnz loc_451B32  +
mov ds:dword_4857B4 38h +
add esp 1Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ds:dword_4857B4 12h +
xor eax eax +
jmp loc_451A45  +
***
push esi  +
push ebx  +
sub esp 6Ch +
mov ebx [esp+6Ch+arg_0] +
mov edx [esp+6Ch+arg_4] +
test ebx ebx +
jz loc_451D54  +
mov ecx [ebx+8] +
test ecx ecx +
jz loc_451BF0  +
test edx edx +
jz loc_451BC0  +
mov eax [ebx+14h] +
jmp loc_451BA7  +
cmp eax edx +
mov eax [eax+18h] +
jz loc_451BB7  +
test eax eax +
jnz loc_451BA0  +
mov ds:dword_4857B4 17h +
xor eax eax +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ebp [ebx+14h] +
test ebp ebp +
jz loc_451D54  +
test byte ptr [ebp+28h] 1 +
mov edi [ebx+4] +
jnz loc_451BE2  +
mov edx [ebx+20h] +
test edx edx +
jz loc_451BF0  +
mov eax [ebp+20h] +
test eax eax +
jz loc_451C04  +
mov eax ebp +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ds:dword_4857B4 16h +
add esp 6Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx+24h] +
mov ecx [edi] +
cmp eax ecx +
ja loc_451D7D  +
cmp edx 8 +
jz loc_451BE2  +
mov edx [ebx+28h] +
test edx edx +
jz loc_451BE2  +
add edx eax +
cmp ecx edx +
jb loc_451D8E  +
mov ecx [edi+4Ch] +
lea edx [ecx-1] +
cmp edx 1 +
mov [esp+6Ch+var_50] ecx +
ja loc_451D5B  +
mov esi [ebp+4] +
mov ecx [ebp+0] +
mov edx [edi+54h] +
mov [esp+6Ch+var_4C] esi +
mov [esp+6Ch+var_20] esi +
mov esi [ebp+8] +
mov [esp+6Ch+var_24] ecx +
mov [esp+6Ch+var_48] esi +
mov [esp+6Ch+var_1C] esi +
mov esi [ebp+0Ch] +
mov [esp+6Ch+var_44] esi +
mov [esp+6Ch+var_18] esi +
mov esi [ebp+10h] +
mov [esp+6Ch+var_40] esi +
mov [esp+6Ch+var_14] esi +
mov esi [ebp+14h] +
mov [esp+6Ch+var_10] edx +
mov edx [edi+10h] +
test edx edx +
jz loc_451D9F  +
add eax edx +
mov [esp+6Ch+var_24] eax +
mov eax [esp+6Ch+var_4C] +
cmp [esp+6Ch+var_50] 1 +
mov [esp+6Ch+var_3C] ecx +
mov [esp+6Ch+var_28] esi +
mov [esp+6Ch+var_38] eax +
mov eax [esp+6Ch+var_48] +
mov [esp+6Ch+var_34] eax +
mov eax [esp+6Ch+var_44] +
mov [esp+6Ch+var_30] eax +
mov eax [esp+6Ch+var_40] +
mov [esp+6Ch+var_2C] eax +
jnz loc_451D6C  +
mov eax [edi+50h] +
mov [esp+6Ch+var_68] esi +
lea esi [esp+6Ch+var_24] +
mov [esp+6Ch+var_60] 0 +
mov [esp+6Ch+var_6C] esi +
mov [esp+6Ch+var_64] eax +
call sub_454CC0  +
cmp eax 0FFFFFFFFh +
jz loc_451D54  +
mov edx [edi+0Ch] +
cmp [edi+10h] edx +
mov [esp+6Ch+var_34] eax +
jz loc_451DAB  +
cmp eax [esp+6Ch+var_1C] +
ja loc_451DAB  +
add edx [ebx+24h] +
lea eax [esp+6Ch+var_3C] +
mov [esp+6Ch+var_64] esi +
mov [esp+6Ch+var_68] eax +
mov [esp+6Ch+var_6C] edi +
mov [esp+6Ch+var_3C] edx +
call sub_452160  +
test eax eax +
jz loc_451D54  +
mov eax [esp+6Ch+var_3C] +
mov [ebp+20h] eax +
mov [ebp+0] eax +
mov eax [esp+6Ch+var_38] +
mov [ebp+4] eax +
mov eax [esp+6Ch+var_34] +
mov [ebp+8] eax +
mov eax [esp+6Ch+var_30] +
mov [ebp+0Ch] eax +
mov eax [esp+6Ch+var_2C] +
mov [ebp+10h] eax +
mov eax [esp+6Ch+var_28] +
and byte ptr [ebp+28h] 0FDh +
mov [ebp+14h] eax +
mov eax ebp +
or byte ptr [edi+78h] 8 +
jmp loc_451BE4  +
xor eax eax +
jmp loc_451BB7  +
mov ds:dword_4857B4 13h +
xor eax eax +
jmp loc_451BB7  +
mov ds:dword_4857B4 3 +
xor eax eax +
jmp loc_451BB7  +
mov ds:dword_4857B4 23h +
xor eax eax +
jmp loc_451BB7  +
mov ds:dword_4857B4 2Eh +
xor eax eax +
jmp loc_451BB7  +
add eax [edi+0Ch] +
mov [esp+6Ch+var_24] eax +
jmp loc_451C88  +
mov [esp+6Ch+var_6C] eax +
call malloc  +
test eax eax +
mov [esp+6Ch+var_3C] eax +
jz loc_451DEE  +
mov [esp+6Ch+var_64] esi +
lea esi [esp+6Ch+var_3C] +
mov [esp+6Ch+var_68] esi +
mov [esp+6Ch+var_6C] edi +
call sub_452160  +
test eax eax +
jz loc_451DFD  +
mov eax [esp+6Ch+var_3C] +
mov ecx 6 +
mov edi ebp +
mov [ebp+20h] eax +
mov eax ebp +
movs   +
or byte ptr [ebp+28h] 2 +
jmp loc_451BE4  +
mov ds:dword_4857B4 42h +
jmp loc_451BB7  +
mov edx [esp+6Ch+var_3C] +
mov [esp+6Ch+var_50] eax +
mov [esp+6Ch+var_6C] edx +
call free  +
mov eax [esp+6Ch+var_50] +
jmp loc_451BB7  +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov edi [esp+1Ch+arg_0] +
mov ebx [esp+1Ch+arg_C] +
test byte ptr [edi+78h] 4 +
jnz loc_451F34  +
test ebx ebx +
jz loc_451F00  +
mov eax [edi+18h] +
mov esi [esp+1Ch+arg_8] +
add esi [edi+28h] +
mov [esp+1Ch+var_14] 0 +
mov [esp+1Ch+var_1C] eax +
mov [esp+1Ch+var_18] esi +
call _lseek  +
cmp esi eax +
jnz loc_451F20  +
mov esi [esp+1Ch+arg_4] +
test esi esi +
jz loc_451EE2  +
mov edi [edi+18h] +
xor ebp ebp +
jmp loc_451E80  +
add ebp eax +
cmp ebx ebp +
jbe loc_451F10  +
mov eax ebx +
sub eax ebp +
mov [esp+1Ch+var_14] eax +
lea eax [esi+ebp] +
mov [esp+1Ch+var_18] eax +
mov [esp+1Ch+var_1C] edi +
call _read  +
test eax eax +
jz loc_451EC0  +
cmp eax 0FFFFFFFFh +
jnz loc_451E76  +
call ds:__imp__errno  +
cmp dword ptr [eax] 0Bh +
jz loc_451E78  +
nop   +
lea esi [esi+0] +
call ds:__imp__errno  +
cmp dword ptr [eax] 4 +
jz loc_451E78  +
nop   +
lea esi [esi+0] +
cmp esi [esp+1Ch+arg_4] +
mov ds:dword_4857B4 1Dh +
jz loc_451F00  +
mov [esp+1Ch+var_1C] esi +
call free  +
add esp 1Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+1Ch+var_1C] ebx +
call malloc  +
test eax eax +
mov esi eax +
jnz loc_451E6F  +
mov ds:dword_4857B4 1Ch +
nop   +
add esp 1Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add esp 1Ch +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ds:dword_4857B4 1Bh +
add esp 1Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ds:dword_4857B4 6 +
add esp 1Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
xor eax eax +
retn   +
***
push esi  +
push ebx  +
sub esp 5Ch +
mov ebx [edx] +
cmp ebx [esp+5Ch+arg_0] +
jb loc_452060  +
mov edi [edx+4Ch] +
mov esi eax +
mov eax [edx+54h] +
sub ebx [esp+5Ch+arg_0] +
mov [esp+5Ch+var_38] ecx +
mov [esp+5Ch+var_48] edi +
sub edi 1 +
mov [esp+5Ch+var_28] eax +
lea eax [eax+edi-1] +
mov ebp eax +
shl ebp 4 +
add eax ebp +
add eax ecx +
mov eax ds:dword_4825C4[eax*8] +
cmp eax ebx +
mov [esp+5Ch+var_34] eax +
ja loc_452074  +
mov eax ds:dword_4857B8 +
mov [esp+5Ch+var_24] esi +
mov [esp+5Ch+var_10] eax +
lea eax [edi+eax-1] +
mov ebx eax +
shl ebx 4 +
add eax ebx +
add eax ecx +
test esi esi +
mov eax ds:dword_4825C0[eax*8] +
mov [esp+5Ch+var_1C] eax +
jz loc_452092  +
mov eax [edx+10h] +
test eax eax +
jz loc_452020  +
add eax [esp+5Ch+arg_0] +
cmp [esp+5Ch+var_48] 1 +
mov [esp+5Ch+var_3C] eax +
jz loc_452032  +
mov ds:dword_4857B4 3 +
mov edx [esp+5Ch+var_24] +
xor eax eax +
cmp edx esi +
jz loc_452015  +
mov [esp+5Ch+var_5C] edx +
mov [esp+5Ch+var_48] eax +
call free  +
mov eax [esp+5Ch+var_48] +
add esp 5Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [edx+0Ch] +
add eax [esp+5Ch+arg_0] +
cmp [esp+5Ch+var_48] 1 +
mov [esp+5Ch+var_3C] eax +
jnz loc_451FF1  +
mov eax [edx+50h] +
mov [esp+5Ch+var_54] eax +
lea eax [esp+5Ch+var_3C] +
mov [esp+5Ch+var_58] eax +
lea eax [esp+5Ch+var_24] +
mov [esp+5Ch+var_5C] eax +
call sub_454D60  +
test eax eax +
jz loc_451FFB  +
mov eax [esp+5Ch+var_24] +
add esp 5Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ds:dword_4857B4 23h +
add esp 5Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp ecx 3 +
jz loc_4520D0  +
mov eax 2Ch +
cmp ecx 6 +
mov edx 2 +
cmovnz eax edx +
mov ds:dword_4857B4 eax +
xor eax eax +
jmp loc_452015  +
mov [esp+5Ch+var_5C] eax +
mov [esp+5Ch+var_40] ecx +
mov [esp+5Ch+var_44] edx +
call malloc  +
mov edx [esp+5Ch+var_44] +
mov ecx [esp+5Ch+var_40] +
test eax eax +
mov [esp+5Ch+var_24] eax +
jnz loc_451FDB  +
cmp ecx 3 +
jz loc_4520D7  +
mov al 3Fh +
cmp ecx 6 +
mov edx 2 +
cmovnz eax edx +
jmp loc_452089  +
mov eax 2Bh +
jmp loc_452089  +
mov eax 3Eh +
jmp loc_452089  +
***
mov edx [esp+arg_0] +
cmp edx 9 +
jz loc_452150  +
jbe loc_452106  +
cmp edx 6FFFFFFDh +
jz loc_452156  +
ja loc_452126  +
cmp edx 0Bh +
jz loc_452145  +
cmp edx 12h +
mov eax 0Ch +
jnz loc_452123  +
retn   +
cmp edx 4 +
mov eax 7 +
jz locret_452104  +
jbe loc_452140  +
cmp edx 5 +
mov eax 0Ch +
jz locret_452104  +
cmp edx 6 +
mov al 2 +
jz locret_452104  +
xor eax eax +
retn   +
cmp edx 6FFFFFFEh +
mov eax 10h +
jz locret_452104  +
cmp edx 6FFFFFFFh +
mov al 4 +
jnz loc_452123  +
retn   +
cmp edx 2 +
jnz loc_452123  +
mov eax 0Bh +
retn   +
mov eax 8 +
retn   +
mov eax 0Fh +
retn   +
***
mov eax [esp+arg_0] +
mov edx [esp+arg_4] +
mov ecx [esp+arg_8] +
cmp dword ptr [eax+4Ch] 1 +
jnz loc_452186  +
mov eax [eax+50h] +
mov [esp+arg_4] ecx +
mov [esp+arg_0] edx +
mov [esp+arg_8] eax +
jmp sub_454D60  +
mov ds:dword_4857B4 3 +
xor eax eax +
retn   +
***
push esi  +
push ebx  +
sub esp 9Ch +
mov ebx [esp+9Ch+arg_0] +
cmp dword ptr [ebx+54h] 1 +
jz loc_4521D0  +
mov ds:dword_4857B4 9 +
xor eax eax +
add esp 9Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx+50h] +
sub eax 1 +
cmp eax 1 +
jbe loc_4521F2  +
mov ds:dword_4857B4 10h +
add esp 9Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx+4Ch] +
sub eax 1 +
cmp eax 1 +
jbe loc_452214  +
mov ds:dword_4857B4 13h +
add esp 9Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edx ebx +
xor eax eax +
mov [esp+9Ch+var_9C] 0 +
mov ecx 3 +
call sub_451F60  +
mov edx eax +
mov [ebx+58h] eax +
xor eax eax +
test edx edx +
jz loc_4521C3  +
cmp dword ptr [ebx+4Ch] 1 +
jz loc_45224B  +
mov ds:dword_4857B4 3 +
xor eax eax +
jmp loc_4521C3  +
mov ebp [edx+20h] +
movzx esi word ptr [edx+30h] +
movzx ecx word ptr [edx+2Eh] +
test ebp ebp +
jz loc_452285  +
mov eax [ebx] +
cmp ebp eax +
jbe loc_4522D6  +
mov ds:dword_4857B4 23h +
xor eax eax +
jmp loc_4521C3  +
mov edx [esp+9Ch+var_78] +
mov [ebx+64h] edx +
or byte ptr [edx+2Ch] 1 +
cmp dword ptr [ebx+4Ch] 1 +
jnz loc_45223A  +
mov edx [ebx+58h] +
mov ebp [edx+1Ch] +
movzx esi word ptr [edx+2Ch] +
movzx edx word ptr [edx+2Ah] +
test ebp ebp +
jz loc_452319  +
cmp esi 0FFFFh +
jz loc_45242C  +
movzx eax dx +
mov ecx eax +
mov [esp+9Ch+var_84] eax +
mov eax [ebx+54h] +
sub eax 1 +
imul eax eax +
cmp ecx ds:dword_4825F4[eax] +
jz loc_4523A8  +
mov ds:dword_4857B4 37h +
xor eax eax +
jmp loc_4521C3  +
mov edx [ebx+54h] +
mov edi ecx +
mov [esp+9Ch+var_8C] ecx +
mov [esp+9Ch+var_60] 9 +
mov [esp+9Ch+var_50] edx +
sub edx 1 +
mov ecx edx +
shl ecx 7 +
mov edx ds:dword_48260C[ecx+edx*8] +
cmp edi edx +
mov [esp+9Ch+var_5C] edx +
jz loc_452323  +
mov ds:dword_4857B4 36h +
xor eax eax +
jmp loc_4521C3  +
mov [ebx+5Ch] edi +
mov [ebx+60h] esi +
mov eax 1 +
jmp loc_4521C3  +
test esi esi +
mov [esp+9Ch+var_38] 1 +
jnz loc_452387  +
sub eax ebp +
cmp [esp+9Ch+var_8C] eax +
ja loc_452397  +
mov eax [ebx+10h] +
test eax eax +
jz loc_452618  +
add eax ebp +
mov [esp+9Ch+var_64] eax +
lea eax [esp+9Ch+var_34] +
mov [esp+9Ch+var_4C] eax +
mov eax [ebx+50h] +
mov [esp+9Ch+var_44] 28h +
mov [esp+9Ch+var_94] eax +
lea eax [esp+9Ch+var_64] +
mov [esp+9Ch+var_98] eax +
lea eax [esp+9Ch+var_4C] +
mov [esp+9Ch+var_9C] eax +
call sub_454D60  +
test eax eax +
jz loc_452244  +
cmp dword ptr [ebx+4Ch] 1 +
jz loc_45260F  +
mov eax [ebx] +
sub eax ebp +
xor edx edx +
div  [esp+9Ch+var_8C] +
cmp eax esi +
jnb loc_45243F  +
mov ds:dword_4857B4 2Dh +
xor eax eax +
jmp loc_4521C3  +
mov eax ds:dword_4857B8 +
sub eax 1 +
imul eax eax +
mov eax ds:dword_4825F0[eax] +
mov [esp+9Ch+var_80] eax +
imul eax esi +
mov [esp+9Ch+var_9C] eax +
call malloc  +
test eax eax +
mov edi eax +
jz loc_4525FE  +
test esi esi +
jz loc_452313  +
mov [esp+9Ch+var_8C] eax +
mov [esp+9Ch+var_88] 0 +
jmp loc_452406  +
add [esp+9Ch+var_88] 1 +
mov eax [esp+9Ch+var_80] +
add [esp+9Ch+var_8C] eax +
add ebp [esp+9Ch+var_84] +
cmp [esp+9Ch+var_88] esi +
jz loc_452313  +
mov eax [esp+9Ch+var_8C] +
mov ecx 6 +
mov edx ebx +
mov [esp+9Ch+var_9C] ebp +
call sub_451F60  +
test eax eax +
jnz loc_4523EB  +
mov [esp+9Ch+var_9C] edi +
call free  +
xor eax eax +
jmp loc_4521C3  +
mov eax [ebx+64h] +
test eax eax +
jz loc_45263D  +
mov esi [eax+4Ch] +
jmp loc_4522A4  +
imul edi esi +
mov [esp+9Ch+var_9C] edi +
call malloc  +
test eax eax +
mov edx eax +
jz loc_45262C  +
mov ecx [esp+9Ch+var_8C] +
lea eax [esi-1] +
mov [esp+9Ch+var_84] eax +
lea esi [edx+edi] +
mov [esp+9Ch+var_74] 0 +
mov [esp+9Ch+var_78] edx +
imul ecx eax +
mov eax ecx +
add eax ebp +
xor ebp ebp +
mov [esp+9Ch+var_88] eax +
lea eax [edx+edi-8Ch] +
lea ecx [eax+5Ch] +
add eax 30h +
mov [esp+9Ch+var_80] ecx +
mov [esp+9Ch+var_70] eax +
jmp loc_452577  +
mov eax [ebx+10h] +
test eax eax +
jz loc_4525EE  +
add eax [esp+9Ch+var_88] +
mov [esp+9Ch+var_64] eax +
cmp dword ptr [ebx+4Ch] 1 +
lea eax [esi-5Ch] +
mov [esp+9Ch+var_74] edx +
mov [esp+9Ch+var_4C] eax +
mov [esp+9Ch+var_44] 28h +
jnz loc_4525CA  +
mov eax [ebx+50h] +
mov [esp+9Ch+var_94] eax +
lea eax [esp+9Ch+var_64] +
mov [esp+9Ch+var_98] eax +
lea eax [esp+9Ch+var_4C] +
mov [esp+9Ch+var_9C] eax +
call sub_454D60  +
mov edx [esp+9Ch+var_74] +
test eax eax +
jz loc_452626  +
mov eax [esp+9Ch+var_84] +
mov edi [esp+9Ch+var_7C] +
cmp dword ptr [ebx+4Ch] 1 +
mov [esi-88h] ebx +
mov [esi-84h] eax +
mov eax [esp+9Ch+var_80] +
mov [esi-78h] edx +
mov [esi-74h] edx +
mov [eax+ebp+1Ch] edi +
jnz loc_452548  +
mov edi [esp+9Ch+var_70] +
mov eax [edi+ebp+4] +
mov [esi-6Ch] eax +
mov ecx [edi+ebp+14h] +
mov [esi-64h] ecx +
mov ecx [edi+ebp+10h] +
mov [esi-68h] ecx +
mov ecx [edi+ebp+20h] +
mov edi [esp+9Ch+var_80] +
mov [edi+ebp+10h] ecx +
mov [esp+9Ch+var_9C] eax +
call sub_4520E0  +
mov [edi+ebp+4] eax +
mov eax [esi-64h] +
mov ecx [esp+9Ch+var_80] +
mov esi [esp+9Ch+var_7C] +
sub [esp+9Ch+var_84] 1 +
mov [ecx+ebp+8] eax +
mov eax ds:dword_4857B8 +
mov [esp+9Ch+var_74] esi +
mov [ecx+ebp+14h] eax +
mov eax [esp+9Ch+var_8C] +
sub ebp 8Ch +
sub [esp+9Ch+var_88] eax +
cmp [esp+9Ch+var_84] 0FFFFFFFFh +
jz loc_452271  +
xor eax eax +
mov ecx 17h +
lea edi [esi-8Ch] +
mov [esp+9Ch+var_7C] edi +
lea edx [esi-30h] +
stos   +
mov edi edx +
mov dword ptr [esi-34h] 12C747Dh +
mov cl 0Ch +
stos   +
mov eax [esp+9Ch+var_74] +
mov dword ptr [esi-4] 1072639h +
test eax eax +
mov [esi-8Ch] eax +
jnz loc_452498  +
mov eax [esp+9Ch+var_7C] +
mov [ebx+68h] eax +
jmp loc_452498  +
mov edx [esp+9Ch+var_78] +
mov ds:dword_4857B4 3 +
mov dword ptr [ebx+68h] 0 +
mov [esp+9Ch+var_9C] edx +
call free  +
xor eax eax +
jmp loc_4521C3  +
mov eax [esp+9Ch+var_88] +
add eax [ebx+0Ch] +
mov [esp+9Ch+var_64] eax +
jmp loc_4524AB  +
mov ds:dword_4857B4 3Fh +
xor eax eax +
jmp loc_4521C3  +
mov esi [esp+9Ch+var_20] +
jmp loc_452385  +
mov eax [ebx+0Ch] +
add eax ebp +
mov [esp+9Ch+var_64] eax +
jmp loc_452348  +
mov edx [esp+9Ch+var_78] +
jmp loc_4525D8  +
mov ds:dword_4857B4 41h +
xor eax eax +
jmp loc_4521C3  +
mov ds:dword_4857B4 15h +
xor eax eax +
jmp loc_4521C3  +
***
push edi  +
push esi  +
push ebx  +
mov ebx eax +
sub esp 1Ch +
mov [esp+28h+var_28] 5Ch +
call malloc  +
test eax eax +
jz loc_4526A0  +
mov esi offset unk_482440 +
mov ecx 17h +
mov edi eax +
movs   +
mov [eax+4] ebx +
mov dword ptr [eax+0Ch] 1 +
or byte ptr [eax+2Ch] 1 +
mov dword ptr [eax+10h] 1 +
mov [eax+8] ebp +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ds:dword_4857B4 41h +
jmp loc_452691  +
***
mov edx [esp+arg_4] +
xor ebx ebx +
mov eax [esp+arg_0] +
cmp edx 0FEFFh +
mov esi [eax+64h] +
ja loc_4526CB  +
mov ebx edx +
xor edx edx +
mov ecx [eax+4Ch] +
cmp ecx 1 +
jz loc_452702  +
cmp ecx 2 +
jz loc_4526F0  +
mov eax 0FFFFFFFFh +
pop ebx  +
mov ds:dword_4857B4 13h +
pop esi  +
retn   +
mov eax 0FFFFFFFFh +
pop ebx  +
mov ds:dword_4857B4 3 +
pop esi  +
retn   +
mov ecx [eax+58h] +
mov [ecx+30h] bx +
mov [esi+44h] edx +
or dword ptr [eax+70h] 1 +
xor eax eax +
or dword ptr [esi+10h] 1 +
pop ebx  +
pop esi  +
retn   +
***
push ebx  +
sub esp 10h +
mov esi [esp+10h+arg_0] +
mov ebx [esi+64h] +
test ebx ebx +
jz loc_452740  +
add esp 10h +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
retn   +
xor edx edx +
mov eax esi +
call sub_452650  +
test eax eax +
mov edi eax +
jz loc_452731  +
mov [esi+68h] eax +
mov ebx edi +
mov [esi+64h] eax +
mov [esp+10h+var_C] 1 +
mov [esp+10h+var_10] esi +
call sub_4526B0  +
test eax eax +
jz loc_452731  +
mov [esp+10h+var_10] edi +
xor ebx ebx +
call free  +
mov dword ptr [esi+68h] 0 +
mov dword ptr [esi+64h] 0 +
jmp loc_452731  +
***
push esi  +
push ebx  +
sub esp 14h +
mov ebx [esp+20h] +
test ebx ebx +
jz loc_45282F  +
test byte ptr [ebx+78h] 1 +
jz loc_452800  +
cmp dword ptr [ebx+8] 3 +
jnz loc_452815  +
mov eax [ebx+58h] +
test eax eax +
jz loc_452837  +
mov [esp] ebx +
call sub_452720  +
test eax eax +
jz loc_45282F  +
mov eax [ebx+68h] +
mov edx [eax+8] +
mov eax ebx +
add edx 1 +
call sub_452650  +
test eax eax +
mov esi eax +
jz loc_45282F  +
mov eax [eax+8] +
mov [esp] ebx +
add eax 1 +
mov [esp+4] eax +
call sub_4526B0  +
test eax eax +
jnz loc_452827  +
mov eax [ebx+68h] +
mov [eax] esi +
mov eax esi +
mov [ebx+68h] esi +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
***
mov edx [ebx+58h] +
test edx edx +
jnz loc_4527A7  +
mov ds:dword_4857B4 22h +
xor eax eax +
jmp loc_4527FA  +
***
mov ds:dword_4857B4 0Dh +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
mov [esp] esi +
call free  +
xor eax eax +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
***
mov [esp] ebx +
call sub_4521A0  +
test eax eax +
jnz loc_4527B8  +
xor eax eax +
jmp loc_452831  +
***
sub esp 14h +
mov esi [esp+14h+arg_0] +
mov ebx [esp+14h+arg_4] +
test esi esi +
jz loc_452892  +
cmp dword ptr [esi+8] 3 +
jnz loc_4528A0  +
mov eax [esi+58h] +
test eax eax +
jz loc_4528B2  +
mov eax [esi+64h] +
test eax eax +
jnz loc_45287D  +
jmp loc_452888  +
mov eax [eax] +
test eax eax +
jz loc_452888  +
cmp [eax+8] ebx +
jnz loc_452877  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov ds:dword_4857B4 15h +
xor eax eax +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov ds:dword_4857B4 0Dh +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
mov [esp+14h+var_14] esi +
call sub_4521A0  +
test eax eax +
jnz loc_45286E  +
xor eax eax +
jmp loc_452894  +
***
push ebx  +
mov eax [esp+arg_8] +
mov esi [esp+arg_0] +
mov ecx [esp+arg_4] +
shr eax 2 +
test eax eax +
jz loc_45291F  +
xor edi edi +
test esi esi +
jz loc_45291F  +
lea esi [esi+0] +
movzx edx byte ptr [ecx+3] +
add edi 1 +
add ecx 4 +
movzx ebx byte ptr [ecx-2] +
add esi 4 +
shl edx 18h +
shl ebx 10h +
or edx ebx +
movzx ebx byte ptr [ecx-4] +
or edx ebx +
movzx ebx byte ptr [ecx-3] +
shl ebx 8 +
or edx ebx +
mov [esi-4] edx +
cmp eax edi +
ja loc_4528F0  +
pop ebx  +
shl eax 2 +
pop esi  +
pop edi  +
retn   +
***
mov eax [esp+arg_8] +
mov edx [esp+arg_0] +
mov ecx [esp+arg_4] +
shr eax 2 +
test eax eax +
jz loc_45297D  +
xor esi esi +
test edx edx +
jz loc_45297D  +
nop   +
lea esi [esi+0] +
mov ebx [ecx] +
add esi 1 +
add ecx 4 +
add edx 4 +
shr ebx 18h +
mov [edx-1] bl +
mov ebx [ecx-4] +
shr ebx 10h +
mov [edx-2] bl +
mov ebx [ecx-4] +
shr ebx 8 +
mov [edx-3] bl +
mov ebx [ecx-4] +
mov [edx-4] bl +
cmp eax esi +
ja loc_452950  +
shl eax 2 +
pop ebx  +
pop esi  +
retn   +
***
push ebx  +
mov eax [esp+arg_8] +
mov esi [esp+arg_0] +
mov ecx [esp+arg_4] +
shr eax 2 +
test eax eax +
jz loc_4529DE  +
xor edi edi +
test esi esi +
jz loc_4529DE  +
lea esi [esi+0] +
movzx edx byte ptr [ecx] +
add edi 1 +
add ecx 4 +
movzx ebx byte ptr [ecx-3] +
add esi 4 +
shl edx 18h +
shl ebx 10h +
or edx ebx +
movzx ebx byte ptr [ecx-1] +
or edx ebx +
movzx ebx byte ptr [ecx-2] +
shl ebx 8 +
or edx ebx +
mov [esi-4] edx +
cmp eax edi +
ja loc_4529B0  +
pop ebx  +
shl eax 2 +
pop esi  +
pop edi  +
retn   +
***
mov eax [esp+arg_8] +
mov edx [esp+arg_0] +
mov ecx [esp+arg_4] +
shr eax 2 +
test eax eax +
jz loc_452A3D  +
xor esi esi +
test edx edx +
jz loc_452A3D  +
nop   +
lea esi [esi+0] +
mov ebx [ecx] +
add esi 1 +
add ecx 4 +
add edx 4 +
shr ebx 18h +
mov [edx-4] bl +
mov ebx [ecx-4] +
shr ebx 10h +
mov [edx-3] bl +
mov ebx [ecx-4] +
shr ebx 8 +
mov [edx-2] bl +
mov ebx [ecx-4] +
mov [edx-1] bl +
cmp eax esi +
ja loc_452A10  +
shl eax 2 +
pop ebx  +
pop esi  +
retn   +
***
push ebx  +
mov eax [esp+arg_8] +
mov ebx [esp+arg_0] +
mov ecx [esp+arg_4] +
shr eax 1 +
jz loc_452A8E  +
xor esi esi +
test ebx ebx +
jz loc_452A8E  +
lea esi [esi+0] +
movzx edx byte ptr [ecx+1] +
add esi 1 +
add ecx 2 +
movzx edi byte ptr [ecx-2] +
add ebx 2 +
shl edx 8 +
or edx edi +
mov [ebx-2] dx +
cmp eax esi +
ja loc_452A70  +
pop ebx  +
add eax eax +
pop esi  +
pop edi  +
retn   +
***
mov eax [esp+arg_8] +
mov edx [esp+arg_0] +
mov ecx [esp+arg_4] +
shr eax 1 +
jz loc_452AD6  +
xor esi esi +
test edx edx +
jz loc_452AD6  +
movzx ebx word ptr [ecx] +
add esi 1 +
add ecx 2 +
add edx 2 +
shr bx 8 +
mov [edx-1] bl +
movzx ebx word ptr [ecx-2] +
mov [edx-2] bl +
cmp eax esi +
ja loc_452AB8  +
add eax eax +
pop ebx  +
pop esi  +
retn   +
***
push ebx  +
mov eax [esp+arg_8] +
mov ebx [esp+arg_0] +
mov ecx [esp+arg_4] +
shr eax 1 +
jz loc_452B1D  +
xor esi esi +
test ebx ebx +
jz loc_452B1D  +
lea esi [esi+0] +
movzx edx byte ptr [ecx] +
add esi 1 +
add ecx 2 +
movzx edi byte ptr [ecx-1] +
add ebx 2 +
shl edx 8 +
or edx edi +
mov [ebx-2] dx +
cmp eax esi +
ja loc_452B00  +
pop ebx  +
add eax eax +
pop esi  +
pop edi  +
retn   +
***
mov esi [esp+arg_8] +
mov ecx [esp+arg_0] +
mov ebx [esp+arg_4] +
shr esi 1 +
jz loc_452B61  +
xor edx edx +
test ecx ecx +
jz loc_452B61  +
movzx eax byte ptr [ebx+edx*2+1] +
add ecx 2 +
mov [ecx-2] al +
movzx eax byte ptr [ebx+edx*2] +
add edx 1 +
mov [ecx-1] al +
cmp esi edx +
ja loc_452B48  +
lea eax [esi+esi] +
pop ebx  +
pop esi  +
retn   +
***
push ebx  +
mov eax [esp+arg_8] +
mov esi [esp+arg_0] +
mov ecx [esp+arg_4] +
shr eax 2 +
test eax eax +
jz loc_452BBF  +
xor edi edi +
test esi esi +
jz loc_452BBF  +
lea esi [esi+0] +
movzx edx byte ptr [ecx+3] +
add edi 1 +
add ecx 4 +
movzx ebx byte ptr [ecx-2] +
add esi 4 +
shl edx 18h +
shl ebx 10h +
or edx ebx +
movzx ebx byte ptr [ecx-4] +
or edx ebx +
movzx ebx byte ptr [ecx-3] +
shl ebx 8 +
or edx ebx +
mov [esi-4] edx +
cmp eax edi +
ja loc_452B90  +
pop ebx  +
shl eax 2 +
pop esi  +
pop edi  +
retn   +
***
mov eax [esp+arg_8] +
mov edx [esp+arg_0] +
mov ecx [esp+arg_4] +
shr eax 2 +
test eax eax +
jz loc_452C1D  +
xor esi esi +
test edx edx +
jz loc_452C1D  +
nop   +
lea esi [esi+0] +
mov ebx [ecx] +
add esi 1 +
add ecx 4 +
add edx 4 +
shr ebx 18h +
mov [edx-1] bl +
mov ebx [ecx-4] +
shr ebx 10h +
mov [edx-2] bl +
mov ebx [ecx-4] +
shr ebx 8 +
mov [edx-3] bl +
mov ebx [ecx-4] +
mov [edx-4] bl +
cmp eax esi +
ja loc_452BF0  +
shl eax 2 +
pop ebx  +
pop esi  +
retn   +
***
push ebx  +
mov eax [esp+arg_8] +
mov esi [esp+arg_0] +
mov ecx [esp+arg_4] +
shr eax 2 +
test eax eax +
jz loc_452C7E  +
xor edi edi +
test esi esi +
jz loc_452C7E  +
lea esi [esi+0] +
movzx edx byte ptr [ecx] +
add edi 1 +
add ecx 4 +
movzx ebx byte ptr [ecx-3] +
add esi 4 +
shl edx 18h +
shl ebx 10h +
or edx ebx +
movzx ebx byte ptr [ecx-1] +
or edx ebx +
movzx ebx byte ptr [ecx-2] +
shl ebx 8 +
or edx ebx +
mov [esi-4] edx +
cmp eax edi +
ja loc_452C50  +
pop ebx  +
shl eax 2 +
pop esi  +
pop edi  +
retn   +
***
mov eax [esp+arg_8] +
mov edx [esp+arg_0] +
mov ecx [esp+arg_4] +
shr eax 2 +
test eax eax +
jz loc_452CDD  +
xor esi esi +
test edx edx +
jz loc_452CDD  +
nop   +
lea esi [esi+0] +
mov ebx [ecx] +
add esi 1 +
add ecx 4 +
add edx 4 +
shr ebx 18h +
mov [edx-4] bl +
mov ebx [ecx-4] +
shr ebx 10h +
mov [edx-3] bl +
mov ebx [ecx-4] +
shr ebx 8 +
mov [edx-2] bl +
mov ebx [ecx-4] +
mov [edx-1] bl +
cmp eax esi +
ja loc_452CB0  +
shl eax 2 +
pop ebx  +
pop esi  +
retn   +
***
push ebx  +
mov eax [esp+arg_8] +
mov esi [esp+arg_0] +
mov ecx [esp+arg_4] +
shr eax 2 +
test eax eax +
jz loc_452D3F  +
xor edi edi +
test esi esi +
jz loc_452D3F  +
lea esi [esi+0] +
movzx edx byte ptr [ecx+2] +
add edi 1 +
add ecx 4 +
movzx ebx byte ptr [ecx-3] +
add esi 4 +
shl edx 10h +
shl ebx 8 +
or edx ebx +
movzx ebx byte ptr [ecx-4] +
or edx ebx +
movsx ebx byte ptr [ecx-1] +
shl ebx 18h +
or edx ebx +
mov [esi-4] edx +
cmp eax edi +
ja loc_452D10  +
pop ebx  +
shl eax 2 +
pop esi  +
pop edi  +
retn   +
***
mov eax [esp+arg_8] +
mov edx [esp+arg_0] +
mov ecx [esp+arg_4] +
shr eax 2 +
test eax eax +
jz loc_452D9D  +
xor esi esi +
test edx edx +
jz loc_452D9D  +
nop   +
lea esi [esi+0] +
mov ebx [ecx] +
add esi 1 +
add ecx 4 +
add edx 4 +
sar ebx 18h +
mov [edx-1] bl +
mov ebx [ecx-4] +
sar ebx 10h +
mov [edx-2] bl +
mov ebx [ecx-4] +
sar ebx 8 +
mov [edx-3] bl +
mov ebx [ecx-4] +
mov [edx-4] bl +
cmp eax esi +
ja loc_452D70  +
shl eax 2 +
pop ebx  +
pop esi  +
retn   +
***
push ebx  +
mov eax [esp+arg_8] +
mov esi [esp+arg_0] +
mov ecx [esp+arg_4] +
shr eax 2 +
test eax eax +
jz loc_452DFF  +
xor edi edi +
test esi esi +
jz loc_452DFF  +
lea esi [esi+0] +
movzx edx byte ptr [ecx+1] +
add edi 1 +
add ecx 4 +
movzx ebx byte ptr [ecx-2] +
add esi 4 +
shl edx 10h +
shl ebx 8 +
or edx ebx +
movzx ebx byte ptr [ecx-1] +
or edx ebx +
movsx ebx byte ptr [ecx-4] +
shl ebx 18h +
or edx ebx +
mov [esi-4] edx +
cmp eax edi +
ja loc_452DD0  +
pop ebx  +
shl eax 2 +
pop esi  +
pop edi  +
retn   +
***
mov eax [esp+arg_8] +
mov edx [esp+arg_0] +
mov ecx [esp+arg_4] +
shr eax 2 +
test eax eax +
jz loc_452E5D  +
xor esi esi +
test edx edx +
jz loc_452E5D  +
nop   +
lea esi [esi+0] +
mov ebx [ecx] +
add esi 1 +
add ecx 4 +
add edx 4 +
sar ebx 18h +
mov [edx-4] bl +
mov ebx [ecx-4] +
sar ebx 10h +
mov [edx-3] bl +
mov ebx [ecx-4] +
sar ebx 8 +
mov [edx-2] bl +
mov ebx [ecx-4] +
mov [edx-1] bl +
cmp eax esi +
ja loc_452E30  +
shl eax 2 +
pop ebx  +
pop esi  +
retn   +
***
push ebx  +
mov eax [esp+arg_8] +
mov esi [esp+arg_0] +
mov ecx [esp+arg_4] +
shr eax 2 +
test eax eax +
jz loc_452EBF  +
xor edi edi +
test esi esi +
jz loc_452EBF  +
lea esi [esi+0] +
movzx edx byte ptr [ecx+3] +
add edi 1 +
add ecx 4 +
movzx ebx byte ptr [ecx-2] +
add esi 4 +
shl edx 18h +
shl ebx 10h +
or edx ebx +
movzx ebx byte ptr [ecx-4] +
or edx ebx +
movzx ebx byte ptr [ecx-3] +
shl ebx 8 +
or edx ebx +
mov [esi-4] edx +
cmp eax edi +
ja loc_452E90  +
pop ebx  +
shl eax 2 +
pop esi  +
pop edi  +
retn   +
***
mov eax [esp+arg_8] +
mov edx [esp+arg_0] +
mov ecx [esp+arg_4] +
shr eax 2 +
test eax eax +
jz loc_452F1D  +
xor esi esi +
test edx edx +
jz loc_452F1D  +
nop   +
lea esi [esi+0] +
mov ebx [ecx] +
add esi 1 +
add ecx 4 +
add edx 4 +
shr ebx 18h +
mov [edx-1] bl +
mov ebx [ecx-4] +
shr ebx 10h +
mov [edx-2] bl +
mov ebx [ecx-4] +
shr ebx 8 +
mov [edx-3] bl +
mov ebx [ecx-4] +
mov [edx-4] bl +
cmp eax esi +
ja loc_452EF0  +
shl eax 2 +
pop ebx  +
pop esi  +
retn   +
***
push ebx  +
mov eax [esp+arg_8] +
mov esi [esp+arg_0] +
mov ecx [esp+arg_4] +
shr eax 2 +
test eax eax +
jz loc_452F7E  +
xor edi edi +
test esi esi +
jz loc_452F7E  +
lea esi [esi+0] +
movzx edx byte ptr [ecx] +
add edi 1 +
add ecx 4 +
movzx ebx byte ptr [ecx-3] +
add esi 4 +
shl edx 18h +
shl ebx 10h +
or edx ebx +
movzx ebx byte ptr [ecx-1] +
or edx ebx +
movzx ebx byte ptr [ecx-2] +
shl ebx 8 +
or edx ebx +
mov [esi-4] edx +
cmp eax edi +
ja loc_452F50  +
pop ebx  +
shl eax 2 +
pop esi  +
pop edi  +
retn   +
***
mov eax [esp+arg_8] +
mov edx [esp+arg_0] +
mov ecx [esp+arg_4] +
shr eax 2 +
test eax eax +
jz loc_452FDD  +
xor esi esi +
test edx edx +
jz loc_452FDD  +
nop   +
lea esi [esi+0] +
mov ebx [ecx] +
add esi 1 +
add ecx 4 +
add edx 4 +
shr ebx 18h +
mov [edx-4] bl +
mov ebx [ecx-4] +
shr ebx 10h +
mov [edx-3] bl +
mov ebx [ecx-4] +
shr ebx 8 +
mov [edx-2] bl +
mov ebx [ecx-4] +
mov [edx-1] bl +
cmp eax esi +
ja loc_452FB0  +
shl eax 2 +
pop ebx  +
pop esi  +
retn   +
***
push ebx  +
mov eax [esp+arg_8] +
mov ebx [esp+arg_0] +
mov edx [esp+arg_4] +
shr eax 3 +
test eax eax +
jz loc_453061  +
xor edi edi +
test ebx ebx +
jz loc_453061  +
lea esi [esi+0] +
movzx ecx byte ptr [edx+2] +
add edi 1 +
add edx 8 +
movzx esi byte ptr [edx-7] +
add ebx 8 +
shl ecx 10h +
shl esi 8 +
or ecx esi +
movzx esi byte ptr [edx-8] +
or ecx esi +
movsx esi byte ptr [edx-5] +
shl esi 18h +
or ecx esi +
mov [ebx-8] ecx +
movzx ecx byte ptr [edx-1] +
movzx esi byte ptr [edx-2] +
shl ecx 18h +
shl esi 10h +
or ecx esi +
movzx esi byte ptr [edx-4] +
or ecx esi +
movzx esi byte ptr [edx-3] +
shl esi 8 +
or ecx esi +
mov [ebx-4] ecx +
cmp eax edi +
ja loc_453010  +
pop ebx  +
shl eax 3 +
pop esi  +
pop edi  +
retn   +
***
mov eax [esp+arg_8] +
push ebx  +
mov eax [esp+arg_8] +
mov ebx [esp+arg_0] +
mov edx [esp+arg_4] +
shr eax 3 +
test eax eax +
jz loc_453151  +
xor edi edi +
test ebx ebx +
jz loc_453151  +
lea esi [esi+0] +
movzx ecx byte ptr [edx+1] +
add edi 1 +
add edx 8 +
movzx esi byte ptr [edx-6] +
add ebx 8 +
shl ecx 10h +
shl esi 8 +
or ecx esi +
movzx esi byte ptr [edx-5] +
or ecx esi +
movsx esi byte ptr [edx-8] +
shl esi 18h +
or ecx esi +
mov [ebx-8] ecx +
movzx ecx byte ptr [edx-4] +
movzx esi byte ptr [edx-3] +
shl ecx 18h +
shl esi 10h +
or ecx esi +
movzx esi byte ptr [edx-1] +
or ecx esi +
movzx esi byte ptr [edx-2] +
shl esi 8 +
or ecx esi +
mov [ebx-4] ecx +
cmp eax edi +
ja loc_453100  +
pop ebx  +
shl eax 3 +
pop esi  +
pop edi  +
retn   +
***
mov eax [esp+arg_8] +
push ebx  +
mov eax [esp+arg_8] +
mov ecx [esp+arg_0] +
mov edx [esp+arg_4] +
shr eax 5 +
test eax eax +
jz loc_453313  +
xor esi esi +
test ecx ecx +
jz loc_453313  +
movzx ebx byte ptr [edx+3] +
movzx edi byte ptr [edx+2] +
shl ebx 18h +
shl edi 10h +
or ebx edi +
movzx edi byte ptr [edx] +
or ebx edi +
movzx edi byte ptr [edx+1] +
shl edi 8 +
or ebx edi +
mov [ecx] ebx +
movzx ebx byte ptr [edx+7] +
movzx edi byte ptr [edx+6] +
shl ebx 18h +
shl edi 10h +
or ebx edi +
movzx edi byte ptr [edx+4] +
or ebx edi +
movzx edi byte ptr [edx+5] +
shl edi 8 +
or ebx edi +
mov [ecx+4] ebx +
movzx ebx byte ptr [edx+0Bh] +
movzx edi byte ptr [edx+0Ah] +
shl ebx 18h +
shl edi 10h +
or ebx edi +
movzx edi byte ptr [edx+8] +
or ebx edi +
movzx edi byte ptr [edx+9] +
shl edi 8 +
or ebx edi +
mov [ecx+8] ebx +
movzx ebx byte ptr [edx+0Fh] +
movzx edi byte ptr [edx+0Eh] +
shl ebx 18h +
shl edi 10h +
or ebx edi +
movzx edi byte ptr [edx+0Ch] +
or ebx edi +
movzx edi byte ptr [edx+0Dh] +
shl edi 8 +
or ebx edi +
mov [ecx+0Ch] ebx +
movzx ebx byte ptr [edx+13h] +
movzx edi byte ptr [edx+12h] +
shl ebx 18h +
shl edi 10h +
or ebx edi +
movzx edi byte ptr [edx+10h] +
or ebx edi +
movzx edi byte ptr [edx+11h] +
shl edi 8 +
or ebx edi +
mov [ecx+10h] ebx +
movzx ebx byte ptr [edx+17h] +
movzx edi byte ptr [edx+16h] +
shl ebx 18h +
shl edi 10h +
or ebx edi +
movzx edi byte ptr [edx+14h] +
or ebx edi +
movzx edi byte ptr [edx+15h] +
add esi 1 +
add edx 20h +
add ecx 20h +
shl edi 8 +
or ebx edi +
mov [ecx-0Ch] ebx +
movzx ebx byte ptr [edx-5] +
movzx edi byte ptr [edx-6] +
shl ebx 18h +
shl edi 10h +
or ebx edi +
movzx edi byte ptr [edx-8] +
or ebx edi +
movzx edi byte ptr [edx-7] +
shl edi 8 +
or ebx edi +
mov [ecx-8] ebx +
movzx ebx byte ptr [edx-1] +
movzx edi byte ptr [edx-2] +
shl ebx 18h +
shl edi 10h +
or ebx edi +
movzx edi byte ptr [edx-4] +
or ebx edi +
movzx edi byte ptr [edx-3] +
shl edi 8 +
or ebx edi +
mov [ecx-4] ebx +
cmp eax esi +
ja loc_4531F4  +
pop ebx  +
shl eax 5 +
pop esi  +
pop edi  +
retn   +
***
push ebx  +
mov edi [esp+arg_8] +
mov edx [esp+arg_0] +
mov ecx [esp+arg_4] +
shr edi 5 +
test edi edi +
jz loc_453478  +
xor ebx ebx +
test edx edx +
jz loc_453478  +
mov esi [ecx] +
add ebx 1 +
add ecx 20h +
add edx 20h +
shr esi 18h +
mov eax esi +
mov [edx-1Dh] al +
mov esi [ecx-20h] +
shr esi 10h +
mov eax esi +
mov [edx-1Eh] al +
mov esi [ecx-20h] +
shr esi 8 +
mov eax esi +
mov [edx-1Fh] al +
movzx eax byte ptr [ecx-20h] +
mov [edx-20h] al +
movzx esi byte ptr [ecx-19h] +
mov eax esi +
mov [edx-19h] al +
movzx esi word ptr [ecx-1Ah] +
mov eax esi +
mov [edx-1Ah] al +
mov esi [ecx-1Ch] +
shr esi 8 +
mov eax esi +
mov [edx-1Bh] al +
movzx eax byte ptr [ecx-1Ch] +
mov [edx-1Ch] al +
movzx esi byte ptr [ecx-15h] +
mov eax esi +
mov [edx-15h] al +
movzx esi word ptr [ecx-16h] +
mov eax esi +
mov [edx-16h] al +
mov esi [ecx-18h] +
shr esi 8 +
mov eax esi +
mov [edx-17h] al +
movzx eax byte ptr [ecx-18h] +
mov [edx-18h] al +
movzx esi byte ptr [ecx-11h] +
mov eax esi +
mov [edx-11h] al +
movzx esi word ptr [ecx-12h] +
mov eax esi +
mov [edx-12h] al +
mov esi [ecx-14h] +
shr esi 8 +
mov eax esi +
mov [edx-13h] al +
movzx eax byte ptr [ecx-14h] +
mov [edx-14h] al +
movzx esi byte ptr [ecx-0Dh] +
mov eax esi +
mov [edx-0Dh] al +
movzx esi word ptr [ecx-0Eh] +
mov eax esi +
mov [edx-0Eh] al +
mov esi [ecx-10h] +
shr esi 8 +
mov eax esi +
mov [edx-0Fh] al +
movzx eax byte ptr [ecx-10h] +
mov [edx-10h] al +
movzx esi byte ptr [ecx-9] +
mov eax esi +
mov [edx-9] al +
movzx esi word ptr [ecx-0Ah] +
mov eax esi +
mov [edx-0Ah] al +
mov esi [ecx-0Ch] +
shr esi 8 +
mov eax esi +
mov [edx-0Bh] al +
movzx eax byte ptr [ecx-0Ch] +
mov [edx-0Ch] al +
movzx esi byte ptr [ecx-5] +
mov eax esi +
mov [edx-5] al +
movzx esi word ptr [ecx-6] +
mov eax esi +
mov [edx-6] al +
mov esi [ecx-8] +
shr esi 8 +
mov eax esi +
mov [edx-7] al +
movzx eax byte ptr [ecx-8] +
mov [edx-8] al +
movzx esi byte ptr [ecx-1] +
mov eax esi +
mov [edx-1] al +
movzx esi word ptr [ecx-2] +
mov eax esi +
mov [edx-2] al +
mov esi [ecx-4] +
shr esi 8 +
mov eax esi +
mov [edx-3] al +
movzx eax byte ptr [ecx-4] +
mov [edx-4] al +
cmp edi ebx +
ja loc_453344  +
mov eax edi +
pop ebx  +
shl eax 5 +
pop esi  +
pop edi  +
retn   +
***
jmp sub_453490  +
***
push ebx  +
mov eax [esp+arg_8] +
mov ecx [esp+arg_0] +
mov edx [esp+arg_4] +
shr eax 5 +
test eax eax +
jz loc_4535D3  +
xor esi esi +
test ecx ecx +
jz loc_4535D3  +
movzx ebx byte ptr [edx] +
movzx edi byte ptr [edx+1] +
shl ebx 18h +
shl edi 10h +
or ebx edi +
movzx edi byte ptr [edx+3] +
or ebx edi +
movzx edi byte ptr [edx+2] +
shl edi 8 +
or ebx edi +
mov [ecx] ebx +
movzx ebx byte ptr [edx+4] +
movzx edi byte ptr [edx+5] +
shl ebx 18h +
shl edi 10h +
or ebx edi +
movzx edi byte ptr [edx+7] +
or ebx edi +
movzx edi byte ptr [edx+6] +
shl edi 8 +
or ebx edi +
mov [ecx+4] ebx +
movzx ebx byte ptr [edx+8] +
movzx edi byte ptr [edx+9] +
shl ebx 18h +
shl edi 10h +
or ebx edi +
movzx edi byte ptr [edx+0Bh] +
or ebx edi +
movzx edi byte ptr [edx+0Ah] +
shl edi 8 +
or ebx edi +
mov [ecx+8] ebx +
movzx ebx byte ptr [edx+0Ch] +
movzx edi byte ptr [edx+0Dh] +
shl ebx 18h +
shl edi 10h +
or ebx edi +
movzx edi byte ptr [edx+0Fh] +
or ebx edi +
movzx edi byte ptr [edx+0Eh] +
shl edi 8 +
or ebx edi +
mov [ecx+0Ch] ebx +
movzx ebx byte ptr [edx+10h] +
movzx edi byte ptr [edx+11h] +
shl ebx 18h +
shl edi 10h +
or ebx edi +
movzx edi byte ptr [edx+13h] +
or ebx edi +
movzx edi byte ptr [edx+12h] +
shl edi 8 +
or ebx edi +
mov [ecx+10h] ebx +
movzx ebx byte ptr [edx+14h] +
movzx edi byte ptr [edx+15h] +
shl ebx 18h +
shl edi 10h +
or ebx edi +
movzx edi byte ptr [edx+17h] +
or ebx edi +
movzx edi byte ptr [edx+16h] +
add esi 1 +
add edx 20h +
add ecx 20h +
shl edi 8 +
or ebx edi +
mov [ecx-0Ch] ebx +
movzx ebx byte ptr [edx-8] +
movzx edi byte ptr [edx-7] +
shl ebx 18h +
shl edi 10h +
or ebx edi +
movzx edi byte ptr [edx-5] +
or ebx edi +
movzx edi byte ptr [edx-6] +
shl edi 8 +
or ebx edi +
mov [ecx-8] ebx +
movzx ebx byte ptr [edx-4] +
movzx edi byte ptr [edx-3] +
shl ebx 18h +
shl edi 10h +
or ebx edi +
movzx edi byte ptr [edx-1] +
or ebx edi +
movzx edi byte ptr [edx-2] +
shl edi 8 +
or ebx edi +
mov [ecx-4] ebx +
cmp eax esi +
ja loc_4534B4  +
pop ebx  +
shl eax 5 +
pop esi  +
pop edi  +
retn   +
***
push ebx  +
mov edi [esp+arg_8] +
mov edx [esp+arg_0] +
mov ecx [esp+arg_4] +
shr edi 5 +
test edi edi +
jz loc_453738  +
xor ebx ebx +
test edx edx +
jz loc_453738  +
mov esi [ecx] +
add ebx 1 +
add ecx 20h +
add edx 20h +
shr esi 18h +
mov eax esi +
mov [edx-20h] al +
mov esi [ecx-20h] +
shr esi 10h +
mov eax esi +
mov [edx-1Fh] al +
mov esi [ecx-20h] +
shr esi 8 +
mov eax esi +
mov [edx-1Eh] al +
movzx eax byte ptr [ecx-20h] +
mov [edx-1Dh] al +
movzx esi byte ptr [ecx-19h] +
mov eax esi +
mov [edx-1Ch] al +
movzx esi word ptr [ecx-1Ah] +
mov eax esi +
mov [edx-1Bh] al +
mov esi [ecx-1Ch] +
shr esi 8 +
mov eax esi +
mov [edx-1Ah] al +
movzx eax byte ptr [ecx-1Ch] +
mov [edx-19h] al +
movzx esi byte ptr [ecx-15h] +
mov eax esi +
mov [edx-18h] al +
movzx esi word ptr [ecx-16h] +
mov eax esi +
mov [edx-17h] al +
mov esi [ecx-18h] +
shr esi 8 +
mov eax esi +
mov [edx-16h] al +
movzx eax byte ptr [ecx-18h] +
mov [edx-15h] al +
movzx esi byte ptr [ecx-11h] +
mov eax esi +
mov [edx-14h] al +
movzx esi word ptr [ecx-12h] +
mov eax esi +
mov [edx-13h] al +
mov esi [ecx-14h] +
shr esi 8 +
mov eax esi +
mov [edx-12h] al +
movzx eax byte ptr [ecx-14h] +
mov [edx-11h] al +
movzx esi byte ptr [ecx-0Dh] +
mov eax esi +
mov [edx-10h] al +
movzx esi word ptr [ecx-0Eh] +
mov eax esi +
mov [edx-0Fh] al +
mov esi [ecx-10h] +
shr esi 8 +
mov eax esi +
mov [edx-0Eh] al +
movzx eax byte ptr [ecx-10h] +
mov [edx-0Dh] al +
movzx esi byte ptr [ecx-9] +
mov eax esi +
mov [edx-0Ch] al +
movzx esi word ptr [ecx-0Ah] +
mov eax esi +
mov [edx-0Bh] al +
mov esi [ecx-0Ch] +
shr esi 8 +
mov eax esi +
mov [edx-0Ah] al +
movzx eax byte ptr [ecx-0Ch] +
mov [edx-9] al +
movzx esi byte ptr [ecx-5] +
mov eax esi +
mov [edx-8] al +
movzx esi word ptr [ecx-6] +
mov eax esi +
mov [edx-7] al +
mov esi [ecx-8] +
shr esi 8 +
mov eax esi +
mov [edx-6] al +
movzx eax byte ptr [ecx-8] +
mov [edx-5] al +
movzx esi byte ptr [ecx-1] +
mov eax esi +
mov [edx-4] al +
movzx esi word ptr [ecx-2] +
mov eax esi +
mov [edx-3] al +
mov esi [ecx-4] +
shr esi 8 +
mov eax esi +
mov [edx-2] al +
movzx eax byte ptr [ecx-4] +
mov [edx-1] al +
cmp edi ebx +
ja loc_453604  +
mov eax edi +
pop ebx  +
shl eax 5 +
pop esi  +
pop edi  +
retn   +
***
jmp sub_453750  +
***
push esi  +
push ebx  +
mov eax edx +
mov ecx [esp+4+arg_0] +
mul  [esp+4+arg_8] +
mov ebx [esp+4+arg_4] +
shr edx 3 +
test edx edx +
jz loc_453879  +
xor esi esi +
test ecx ecx +
jz loc_453879  +
mov eax [ebx] +
add esi 1 +
add ebx 0Ch +
add ecx 0Ch +
shr eax 18h +
mov [ecx-9] al +
mov eax [ebx-0Ch] +
shr eax 10h +
mov [ecx-0Ah] al +
mov eax [ebx-0Ch] +
shr eax 8 +
mov [ecx-0Bh] al +
mov eax [ebx-0Ch] +
mov [ecx-0Ch] al +
movzx eax byte ptr [ebx-5] +
mov [ecx-5] al +
movzx eax word ptr [ebx-6] +
mov [ecx-6] al +
mov eax [ebx-8] +
shr eax 8 +
mov [ecx-7] al +
mov eax [ebx-8] +
mov [ecx-8] al +
movsx eax byte ptr [ebx-1] +
mov [ecx-1] al +
movsx eax word ptr [ebx-2] +
mov [ecx-2] al +
mov eax [ebx-4] +
sar eax 8 +
mov [ecx-3] al +
mov eax [ebx-4] +
mov [ecx-4] al +
cmp edx esi +
ja loc_453812  +
lea eax [edx+edx*2] +
shl eax 2 +
pop ebx  +
pop esi  +
retn   +
***
push esi  +
mov eax edx +
push ebx  +
mov ebx [esp+8+arg_0] +
mul  [esp+8+arg_8] +
mov ecx [esp+8+arg_4] +
shr edx 3 +
test edx edx +
jz loc_453925  +
xor esi esi +
test ebx ebx +
jz loc_453925  +
movzx eax byte ptr [ecx] +
add esi 1 +
add ecx 0Ch +
movzx edi byte ptr [ecx-0Bh] +
add ebx 0Ch +
shl eax 18h +
shl edi 10h +
or eax edi +
movzx edi byte ptr [ecx-9] +
or eax edi +
movzx edi byte ptr [ecx-0Ah] +
shl edi 8 +
or eax edi +
mov [ebx-0Ch] eax +
movzx eax byte ptr [ecx-8] +
movzx edi byte ptr [ecx-7] +
shl eax 18h +
shl edi 10h +
or eax edi +
movzx edi byte ptr [ecx-5] +
or eax edi +
movzx edi byte ptr [ecx-6] +
shl edi 8 +
or eax edi +
mov [ebx-8] eax +
movzx eax byte ptr [ecx-3] +
movzx edi byte ptr [ecx-2] +
shl eax 10h +
shl edi 8 +
or eax edi +
movzx edi byte ptr [ecx-1] +
or eax edi +
movsx edi byte ptr [ecx-4] +
shl edi 18h +
or eax edi +
mov [ebx-4] eax +
cmp edx esi +
ja loc_4538B3  +
lea eax [edx+edx*2] +
pop ebx  +
shl eax 2 +
pop esi  +
pop edi  +
retn   +
***
push ebx  +
mov eax edx +
mov ecx [esp+4+arg_0] +
mul  [esp+4+arg_8] +
mov ebx [esp+4+arg_4] +
shr edx 3 +
test edx edx +
jz loc_4539B9  +
xor esi esi +
test ecx ecx +
jz loc_4539B9  +
mov eax [ebx] +
add esi 1 +
add ebx 0Ch +
add ecx 0Ch +
shr eax 18h +
mov [ecx-0Ch] al +
mov eax [ebx-0Ch] +
shr eax 10h +
mov [ecx-0Bh] al +
mov eax [ebx-0Ch] +
shr eax 8 +
mov [ecx-0Ah] al +
mov eax [ebx-0Ch] +
mov [ecx-9] al +
movzx eax byte ptr [ebx-5] +
mov [ecx-8] al +
movzx eax word ptr [ebx-6] +
mov [ecx-7] al +
mov eax [ebx-8] +
shr eax 8 +
mov [ecx-6] al +
mov eax [ebx-8] +
mov [ecx-5] al +
movsx eax byte ptr [ebx-1] +
mov [ecx-4] al +
movsx eax word ptr [ebx-2] +
mov [ecx-3] al +
mov eax [ebx-4] +
sar eax 8 +
mov [ecx-2] al +
mov eax [ebx-4] +
mov [ecx-1] al +
cmp edx esi +
ja loc_453952  +
lea eax [edx+edx*2] +
shl eax 2 +
pop ebx  +
pop esi  +
retn   +
***
push ebx  +
mov eax [esp+arg_8] +
mov ebx [esp+arg_0] +
mov edx [esp+arg_4] +
shr eax 3 +
test eax eax +
jz loc_453A41  +
xor edi edi +
test ebx ebx +
jz loc_453A41  +
lea esi [esi+0] +
movzx ecx byte ptr [edx+3] +
add edi 1 +
add edx 8 +
movzx esi byte ptr [edx-6] +
add ebx 8 +
shl ecx 18h +
shl esi 10h +
or ecx esi +
movzx esi byte ptr [edx-8] +
or ecx esi +
movzx esi byte ptr [edx-7] +
shl esi 8 +
or ecx esi +
mov [ebx-8] ecx +
movzx ecx byte ptr [edx-1] +
movzx esi byte ptr [edx-2] +
shl ecx 18h +
shl esi 10h +
or ecx esi +
movzx esi byte ptr [edx-4] +
or ecx esi +
movzx esi byte ptr [edx-3] +
shl esi 8 +
or ecx esi +
mov [ebx-4] ecx +
cmp eax edi +
ja loc_4539F0  +
pop ebx  +
shl eax 3 +
pop esi  +
pop edi  +
retn   +
***
mov eax [esp+arg_8] +
push ebx  +
mov eax [esp+arg_8] +
mov ebx [esp+arg_0] +
mov edx [esp+arg_4] +
shr eax 3 +
test eax eax +
jz loc_453B30  +
xor edi edi +
test ebx ebx +
jz loc_453B30  +
lea esi [esi+0] +
movzx ecx byte ptr [edx] +
add edi 1 +
add edx 8 +
movzx esi byte ptr [edx-7] +
add ebx 8 +
shl ecx 18h +
shl esi 10h +
or ecx esi +
movzx esi byte ptr [edx-5] +
or ecx esi +
movzx esi byte ptr [edx-6] +
shl esi 8 +
or ecx esi +
mov [ebx-8] ecx +
movzx ecx byte ptr [edx-4] +
movzx esi byte ptr [edx-3] +
shl ecx 18h +
shl esi 10h +
or ecx esi +
movzx esi byte ptr [edx-1] +
or ecx esi +
movzx esi byte ptr [edx-2] +
shl esi 8 +
or ecx esi +
mov [ebx-4] ecx +
cmp eax edi +
ja loc_453AE0  +
pop ebx  +
shl eax 3 +
pop esi  +
pop edi  +
retn   +
***
mov eax [esp+arg_8] +
push esi  +
mov eax edx +
push ebx  +
mov ebx [esp+8+arg_0] +
mul  [esp+8+arg_8] +
mov ecx [esp+8+arg_4] +
shr edx 5 +
test edx edx +
jz loc_453D43  +
xor esi esi +
test ebx ebx +
jz loc_453D43  +
nop   +
lea esi [esi+0] +
movzx eax byte ptr [ecx+3] +
movzx edi byte ptr [ecx+2] +
shl eax 18h +
shl edi 10h +
or eax edi +
movzx edi byte ptr [ecx] +
or eax edi +
movzx edi byte ptr [ecx+1] +
shl edi 8 +
or eax edi +
mov [ebx] eax +
movzx eax byte ptr [ecx+7] +
movzx edi byte ptr [ecx+6] +
shl eax 18h +
shl edi 10h +
or eax edi +
movzx edi byte ptr [ecx+4] +
or eax edi +
movzx edi byte ptr [ecx+5] +
shl edi 8 +
or eax edi +
mov [ebx+4] eax +
movzx eax byte ptr [ecx+0Bh] +
movzx edi byte ptr [ecx+0Ah] +
shl eax 18h +
shl edi 10h +
or eax edi +
movzx edi byte ptr [ecx+8] +
or eax edi +
movzx edi byte ptr [ecx+9] +
shl edi 8 +
or eax edi +
mov [ebx+8] eax +
movzx eax byte ptr [ecx+0Fh] +
movzx edi byte ptr [ecx+0Eh] +
shl eax 18h +
shl edi 10h +
or eax edi +
movzx edi byte ptr [ecx+0Ch] +
or eax edi +
movzx edi byte ptr [ecx+0Dh] +
shl edi 8 +
or eax edi +
mov [ebx+0Ch] eax +
movzx eax byte ptr [ecx+13h] +
movzx edi byte ptr [ecx+12h] +
shl eax 18h +
shl edi 10h +
or eax edi +
movzx edi byte ptr [ecx+10h] +
or eax edi +
movzx edi byte ptr [ecx+11h] +
shl edi 8 +
or eax edi +
mov [ebx+10h] eax +
movzx eax byte ptr [ecx+17h] +
movzx edi byte ptr [ecx+16h] +
shl eax 18h +
shl edi 10h +
or eax edi +
movzx edi byte ptr [ecx+14h] +
or eax edi +
movzx edi byte ptr [ecx+15h] +
add esi 1 +
add ecx 28h +
add ebx 28h +
shl edi 8 +
or eax edi +
mov [ebx-14h] eax +
movzx eax byte ptr [ecx-0Dh] +
movzx edi byte ptr [ecx-0Eh] +
shl eax 18h +
shl edi 10h +
or eax edi +
movzx edi byte ptr [ecx-10h] +
or eax edi +
movzx edi byte ptr [ecx-0Fh] +
shl edi 8 +
or eax edi +
mov [ebx-10h] eax +
movzx eax byte ptr [ecx-9] +
movzx edi byte ptr [ecx-0Ah] +
shl eax 18h +
shl edi 10h +
or eax edi +
movzx edi byte ptr [ecx-0Ch] +
or eax edi +
movzx edi byte ptr [ecx-0Bh] +
shl edi 8 +
or eax edi +
mov [ebx-0Ch] eax +
movzx eax byte ptr [ecx-5] +
movzx edi byte ptr [ecx-6] +
shl eax 18h +
shl edi 10h +
or eax edi +
movzx edi byte ptr [ecx-8] +
or eax edi +
movzx edi byte ptr [ecx-7] +
shl edi 8 +
or eax edi +
mov [ebx-8] eax +
movzx eax byte ptr [ecx-1] +
movzx edi byte ptr [ecx-2] +
shl eax 18h +
shl edi 10h +
or eax edi +
movzx edi byte ptr [ecx-4] +
or eax edi +
movzx edi byte ptr [ecx-3] +
shl edi 8 +
or eax edi +
mov [ebx-4] eax +
cmp edx esi +
ja loc_453BE0  +
lea eax [edx+edx*4] +
pop ebx  +
shl eax 3 +
pop esi  +
pop edi  +
retn   +
***
push ebx  +
mov eax edx +
mov ecx [esp+4+arg_0] +
mul  [esp+4+arg_8] +
mov ebx [esp+4+arg_4] +
shr edx 5 +
test edx edx +
jz loc_453EB6  +
xor esi esi +
test ecx ecx +
jz loc_453EB6  +
lea esi [esi+0] +
mov eax [ebx] +
add esi 1 +
add ebx 28h +
add ecx 28h +
shr eax 18h +
mov [ecx-25h] al +
mov eax [ebx-28h] +
shr eax 10h +
mov [ecx-26h] al +
mov eax [ebx-28h] +
shr eax 8 +
mov [ecx-27h] al +
mov eax [ebx-28h] +
mov [ecx-28h] al +
movzx eax byte ptr [ebx-21h] +
mov [ecx-21h] al +
movzx eax word ptr [ebx-22h] +
mov [ecx-22h] al +
mov eax [ebx-24h] +
shr eax 8 +
mov [ecx-23h] al +
mov eax [ebx-24h] +
mov [ecx-24h] al +
movzx eax byte ptr [ebx-1Dh] +
mov [ecx-1Dh] al +
movzx eax word ptr [ebx-1Eh] +
mov [ecx-1Eh] al +
mov eax [ebx-20h] +
shr eax 8 +
mov [ecx-1Fh] al +
mov eax [ebx-20h] +
mov [ecx-20h] al +
movzx eax byte ptr [ebx-19h] +
mov [ecx-19h] al +
movzx eax word ptr [ebx-1Ah] +
mov [ecx-1Ah] al +
mov eax [ebx-1Ch] +
shr eax 8 +
mov [ecx-1Bh] al +
mov eax [ebx-1Ch] +
mov [ecx-1Ch] al +
movzx eax byte ptr [ebx-15h] +
mov [ecx-15h] al +
movzx eax word ptr [ebx-16h] +
mov [ecx-16h] al +
mov eax [ebx-18h] +
shr eax 8 +
mov [ecx-17h] al +
mov eax [ebx-18h] +
mov [ecx-18h] al +
movzx eax byte ptr [ebx-11h] +
mov [ecx-11h] al +
movzx eax word ptr [ebx-12h] +
mov [ecx-12h] al +
mov eax [ebx-14h] +
shr eax 8 +
mov [ecx-13h] al +
mov eax [ebx-14h] +
mov [ecx-14h] al +
movzx eax byte ptr [ebx-0Dh] +
mov [ecx-0Dh] al +
movzx eax word ptr [ebx-0Eh] +
mov [ecx-0Eh] al +
mov eax [ebx-10h] +
shr eax 8 +
mov [ecx-0Fh] al +
mov eax [ebx-10h] +
mov [ecx-10h] al +
movzx eax byte ptr [ebx-9] +
mov [ecx-9] al +
movzx eax word ptr [ebx-0Ah] +
mov [ecx-0Ah] al +
mov eax [ebx-0Ch] +
shr eax 8 +
mov [ecx-0Bh] al +
mov eax [ebx-0Ch] +
mov [ecx-0Ch] al +
movzx eax byte ptr [ebx-5] +
mov [ecx-5] al +
movzx eax word ptr [ebx-6] +
mov [ecx-6] al +
mov eax [ebx-8] +
shr eax 8 +
mov [ecx-7] al +
mov eax [ebx-8] +
mov [ecx-8] al +
movzx eax byte ptr [ebx-1] +
mov [ecx-1] al +
movzx eax word ptr [ebx-2] +
mov [ecx-2] al +
mov eax [ebx-4] +
shr eax 8 +
mov [ecx-3] al +
mov eax [ebx-4] +
mov [ecx-4] al +
cmp edx esi +
ja loc_453D80  +
lea eax [edx+edx*4] +
shl eax 3 +
pop ebx  +
pop esi  +
retn   +
***
push esi  +
mov eax edx +
push ebx  +
mov ebx [esp+8+arg_0] +
mul  [esp+8+arg_8] +
mov ecx [esp+8+arg_4] +
shr edx 5 +
test edx edx +
jz loc_454053  +
xor esi esi +
test ebx ebx +
jz loc_454053  +
nop   +
lea esi [esi+0] +
movzx eax byte ptr [ecx] +
movzx edi byte ptr [ecx+1] +
shl eax 18h +
shl edi 10h +
or eax edi +
movzx edi byte ptr [ecx+3] +
or eax edi +
movzx edi byte ptr [ecx+2] +
shl edi 8 +
or eax edi +
mov [ebx] eax +
movzx eax byte ptr [ecx+4] +
movzx edi byte ptr [ecx+5] +
shl eax 18h +
shl edi 10h +
or eax edi +
movzx edi byte ptr [ecx+7] +
or eax edi +
movzx edi byte ptr [ecx+6] +
shl edi 8 +
or eax edi +
mov [ebx+4] eax +
movzx eax byte ptr [ecx+8] +
movzx edi byte ptr [ecx+9] +
shl eax 18h +
shl edi 10h +
or eax edi +
movzx edi byte ptr [ecx+0Bh] +
or eax edi +
movzx edi byte ptr [ecx+0Ah] +
shl edi 8 +
or eax edi +
mov [ebx+8] eax +
movzx eax byte ptr [ecx+0Ch] +
movzx edi byte ptr [ecx+0Dh] +
shl eax 18h +
shl edi 10h +
or eax edi +
movzx edi byte ptr [ecx+0Fh] +
or eax edi +
movzx edi byte ptr [ecx+0Eh] +
shl edi 8 +
or eax edi +
mov [ebx+0Ch] eax +
movzx eax byte ptr [ecx+10h] +
movzx edi byte ptr [ecx+11h] +
shl eax 18h +
shl edi 10h +
or eax edi +
movzx edi byte ptr [ecx+13h] +
or eax edi +
movzx edi byte ptr [ecx+12h] +
shl edi 8 +
or eax edi +
mov [ebx+10h] eax +
movzx eax byte ptr [ecx+14h] +
movzx edi byte ptr [ecx+15h] +
shl eax 18h +
shl edi 10h +
or eax edi +
movzx edi byte ptr [ecx+17h] +
or eax edi +
movzx edi byte ptr [ecx+16h] +
add esi 1 +
add ecx 28h +
add ebx 28h +
shl edi 8 +
or eax edi +
mov [ebx-14h] eax +
movzx eax byte ptr [ecx-10h] +
movzx edi byte ptr [ecx-0Fh] +
shl eax 18h +
shl edi 10h +
or eax edi +
movzx edi byte ptr [ecx-0Dh] +
or eax edi +
movzx edi byte ptr [ecx-0Eh] +
shl edi 8 +
or eax edi +
mov [ebx-10h] eax +
movzx eax byte ptr [ecx-0Ch] +
movzx edi byte ptr [ecx-0Bh] +
shl eax 18h +
shl edi 10h +
or eax edi +
movzx edi byte ptr [ecx-9] +
or eax edi +
movzx edi byte ptr [ecx-0Ah] +
shl edi 8 +
or eax edi +
mov [ebx-0Ch] eax +
movzx eax byte ptr [ecx-8] +
movzx edi byte ptr [ecx-7] +
shl eax 18h +
shl edi 10h +
or eax edi +
movzx edi byte ptr [ecx-5] +
or eax edi +
movzx edi byte ptr [ecx-6] +
shl edi 8 +
or eax edi +
mov [ebx-8] eax +
movzx eax byte ptr [ecx-4] +
movzx edi byte ptr [ecx-3] +
shl eax 18h +
shl edi 10h +
or eax edi +
movzx edi byte ptr [ecx-1] +
or eax edi +
movzx edi byte ptr [ecx-2] +
shl edi 8 +
or eax edi +
mov [ebx-4] eax +
cmp edx esi +
ja loc_453EF0  +
lea eax [edx+edx*4] +
pop ebx  +
shl eax 3 +
pop esi  +
pop edi  +
retn   +
***
push ebx  +
mov eax edx +
mov ecx [esp+4+arg_0] +
mul  [esp+4+arg_8] +
mov ebx [esp+4+arg_4] +
shr edx 5 +
test edx edx +
jz loc_4541C6  +
xor esi esi +
test ecx ecx +
jz loc_4541C6  +
lea esi [esi+0] +
mov eax [ebx] +
add esi 1 +
add ebx 28h +
add ecx 28h +
shr eax 18h +
mov [ecx-28h] al +
mov eax [ebx-28h] +
shr eax 10h +
mov [ecx-27h] al +
mov eax [ebx-28h] +
shr eax 8 +
mov [ecx-26h] al +
mov eax [ebx-28h] +
mov [ecx-25h] al +
movzx eax byte ptr [ebx-21h] +
mov [ecx-24h] al +
movzx eax word ptr [ebx-22h] +
mov [ecx-23h] al +
mov eax [ebx-24h] +
shr eax 8 +
mov [ecx-22h] al +
mov eax [ebx-24h] +
mov [ecx-21h] al +
movzx eax byte ptr [ebx-1Dh] +
mov [ecx-20h] al +
movzx eax word ptr [ebx-1Eh] +
mov [ecx-1Fh] al +
mov eax [ebx-20h] +
shr eax 8 +
mov [ecx-1Eh] al +
mov eax [ebx-20h] +
mov [ecx-1Dh] al +
movzx eax byte ptr [ebx-19h] +
mov [ecx-1Ch] al +
movzx eax word ptr [ebx-1Ah] +
mov [ecx-1Bh] al +
mov eax [ebx-1Ch] +
shr eax 8 +
mov [ecx-1Ah] al +
mov eax [ebx-1Ch] +
mov [ecx-19h] al +
movzx eax byte ptr [ebx-15h] +
mov [ecx-18h] al +
movzx eax word ptr [ebx-16h] +
mov [ecx-17h] al +
mov eax [ebx-18h] +
shr eax 8 +
mov [ecx-16h] al +
mov eax [ebx-18h] +
mov [ecx-15h] al +
movzx eax byte ptr [ebx-11h] +
mov [ecx-14h] al +
movzx eax word ptr [ebx-12h] +
mov [ecx-13h] al +
mov eax [ebx-14h] +
shr eax 8 +
mov [ecx-12h] al +
mov eax [ebx-14h] +
mov [ecx-11h] al +
movzx eax byte ptr [ebx-0Dh] +
mov [ecx-10h] al +
movzx eax word ptr [ebx-0Eh] +
mov [ecx-0Fh] al +
mov eax [ebx-10h] +
shr eax 8 +
mov [ecx-0Eh] al +
mov eax [ebx-10h] +
mov [ecx-0Dh] al +
movzx eax byte ptr [ebx-9] +
mov [ecx-0Ch] al +
movzx eax word ptr [ebx-0Ah] +
mov [ecx-0Bh] al +
mov eax [ebx-0Ch] +
shr eax 8 +
mov [ecx-0Ah] al +
mov eax [ebx-0Ch] +
mov [ecx-9] al +
movzx eax byte ptr [ebx-5] +
mov [ecx-8] al +
movzx eax word ptr [ebx-6] +
mov [ecx-7] al +
mov eax [ebx-8] +
shr eax 8 +
mov [ecx-6] al +
mov eax [ebx-8] +
mov [ecx-5] al +
movzx eax byte ptr [ebx-1] +
mov [ecx-4] al +
movzx eax word ptr [ebx-2] +
mov [ecx-3] al +
mov eax [ebx-4] +
shr eax 8 +
mov [ecx-2] al +
mov eax [ebx-4] +
mov [ecx-1] al +
cmp edx esi +
ja loc_454090  +
lea eax [edx+edx*4] +
shl eax 3 +
pop ebx  +
pop esi  +
retn   +
***
push ebx  +
mov eax [esp+arg_8] +
mov ebx [esp+arg_0] +
mov edx [esp+arg_4] +
shr eax 4 +
test eax eax +
jz loc_45428A  +
xor esi esi +
test ebx ebx +
jz loc_45428A  +
movzx ecx byte ptr [edx+3] +
add esi 1 +
add edx 10h +
movzx edi byte ptr [edx-0Eh] +
add ebx 10h +
shl ecx 18h +
shl edi 10h +
or ecx edi +
movzx edi byte ptr [edx-10h] +
or ecx edi +
movzx edi byte ptr [edx-0Fh] +
shl edi 8 +
or ecx edi +
mov [ebx-10h] ecx +
movzx ecx byte ptr [edx-9] +
movzx edi byte ptr [edx-0Ah] +
shl ecx 18h +
shl edi 10h +
or ecx edi +
movzx edi byte ptr [edx-0Ch] +
or ecx edi +
movzx edi byte ptr [edx-0Bh] +
shl edi 8 +
or ecx edi +
mov [ebx-0Ch] ecx +
movzx ecx byte ptr [edx-5] +
movzx edi byte ptr [edx-6] +
shl ecx 18h +
shl edi 10h +
or ecx edi +
movzx edi byte ptr [edx-8] +
or ecx edi +
movzx edi byte ptr [edx-7] +
shl edi 8 +
or ecx edi +
mov [ebx-8] ecx +
movzx ecx byte ptr [edx-4] +
mov [ebx-4] cl +
movzx ecx byte ptr [edx-3] +
mov [ebx-3] cl +
movzx ecx byte ptr [edx-1] +
movzx edi byte ptr [edx-2] +
shl ecx 8 +
or ecx edi +
mov [ebx-2] cx +
cmp eax esi +
ja loc_4541F4  +
pop ebx  +
shl eax 4 +
pop esi  +
pop edi  +
retn   +
***
jmp sub_4542A0  +
***
push ebx  +
mov edi [esp+arg_8] +
mov edx [esp+arg_0] +
mov ecx [esp+arg_4] +
shr edi 4 +
test edi edi +
jz loc_454362  +
xor ebx ebx +
test edx edx +
jz loc_454362  +
mov esi [ecx] +
add ebx 1 +
add ecx 10h +
add edx 10h +
shr esi 18h +
mov eax esi +
mov [edx-0Dh] al +
mov esi [ecx-10h] +
shr esi 10h +
mov eax esi +
mov [edx-0Eh] al +
mov esi [ecx-10h] +
shr esi 8 +
mov eax esi +
mov [edx-0Fh] al +
movzx eax byte ptr [ecx-10h] +
mov [edx-10h] al +
movzx esi byte ptr [ecx-9] +
mov eax esi +
mov [edx-9] al +
movzx esi word ptr [ecx-0Ah] +
mov eax esi +
mov [edx-0Ah] al +
mov esi [ecx-0Ch] +
shr esi 8 +
mov eax esi +
mov [edx-0Bh] al +
movzx eax byte ptr [ecx-0Ch] +
mov [edx-0Ch] al +
movzx esi byte ptr [ecx-5] +
mov eax esi +
mov [edx-5] al +
movzx esi word ptr [ecx-6] +
mov eax esi +
mov [edx-6] al +
mov esi [ecx-8] +
shr esi 8 +
mov eax esi +
mov [edx-7] al +
movzx eax byte ptr [ecx-8] +
mov [edx-8] al +
movzx eax byte ptr [ecx-4] +
mov [edx-4] al +
movzx eax byte ptr [ecx-3] +
mov [edx-3] al +
movzx esi byte ptr [ecx-1] +
mov eax esi +
mov [edx-1] al +
movzx eax byte ptr [ecx-2] +
mov [edx-2] al +
cmp edi ebx +
ja loc_4542C4  +
mov eax edi +
pop ebx  +
shl eax 4 +
pop esi  +
pop edi  +
retn   +
***
push ebx  +
push ebx  +
mov edi [esp+arg_8] +
mov edx [esp+arg_0] +
mov ecx [esp+arg_4] +
shr edi 4 +
test edi edi +
jz loc_4544F2  +
xor ebx ebx +
test edx edx +
jz loc_4544F2  +
mov esi [ecx] +
add ebx 1 +
add ecx 10h +
add edx 10h +
shr esi 18h +
mov eax esi +
mov [edx-10h] al +
mov esi [ecx-10h] +
shr esi 10h +
mov eax esi +
mov [edx-0Fh] al +
mov esi [ecx-10h] +
shr esi 8 +
mov eax esi +
mov [edx-0Eh] al +
movzx eax byte ptr [ecx-10h] +
mov [edx-0Dh] al +
movzx esi byte ptr [ecx-9] +
mov eax esi +
mov [edx-0Ch] al +
movzx esi word ptr [ecx-0Ah] +
mov eax esi +
mov [edx-0Bh] al +
mov esi [ecx-0Ch] +
shr esi 8 +
mov eax esi +
mov [edx-0Ah] al +
movzx eax byte ptr [ecx-0Ch] +
mov [edx-9] al +
movzx esi byte ptr [ecx-5] +
mov eax esi +
mov [edx-8] al +
movzx esi word ptr [ecx-6] +
mov eax esi +
mov [edx-7] al +
mov esi [ecx-8] +
shr esi 8 +
mov eax esi +
mov [edx-6] al +
movzx eax byte ptr [ecx-8] +
mov [edx-5] al +
movzx eax byte ptr [ecx-4] +
mov [edx-4] al +
movzx eax byte ptr [ecx-3] +
mov [edx-3] al +
movzx esi byte ptr [ecx-1] +
mov eax esi +
mov [edx-2] al +
movzx eax byte ptr [ecx-2] +
mov [edx-1] al +
cmp edi ebx +
ja loc_454454  +
mov eax edi +
pop ebx  +
shl eax 4 +
pop esi  +
pop edi  +
retn   +
***
push esi  +
mov esi edx +
push ebx  +
sub esp 1Ch +
test edx edx +
jz loc_4545D0  +
test eax eax +
mov ebx eax +
jz loc_4545D0  +
mov eax [edx] +
test eax eax +
jz loc_454621  +
mov edx [ebx] +
test edx edx +
jz loc_454621  +
lea edx [ecx-1] +
cmp edx 1 +
ja loc_4545B1  +
cmp dword ptr [ebx+14h] 1 +
jnz loc_454610  +
cmp dword ptr [esi+14h] 1 +
jnz loc_454610  +
mov ebp [esi+4] +
cmp ebp 10h +
ja loc_454600  +
mov edx ecx +
shl edx 7 +
lea edx dword_482418[edx+ecx*8] +
mov ecx [esp+20h+arg_0] +
lea ecx [ecx+ebp*2] +
mov edx [edx+ecx*4] +
test edx edx +
jz loc_454600  +
mov ecx [esi+8] +
mov [esp+20h+var_14] edx +
mov [esp+20h+var_1C] eax +
mov [esp+20h+var_20] 0 +
mov [esp+20h+var_18] ecx +
call edx  +
cmp eax 0FFFFFFFFh +
mov edi eax +
jz loc_4545D0  +
cmp eax [ebx+8] +
mov edx [esp+20h+var_14] +
ja loc_4545C5  +
test eax eax +
jnz loc_4545E0  +
mov [ebx+8] edi +
mov eax ebx +
mov [ebx+4] ebp +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ds:dword_4857B4 10h +
add esp 1Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ds:dword_4857B4 11h +
nop   +
xor eax eax +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ecx [esi+8] +
mov eax [ebx] +
mov esi [esi] +
mov [esp+20h+var_18] ecx +
mov [esp+20h+var_20] eax +
mov [esp+20h+var_1C] esi +
call edx  +
cmp eax 0FFFFFFFFh +
jnz loc_4545A1  +
xor eax eax +
jmp loc_4545D2  +
mov ds:dword_4857B4 0Fh +
xor eax eax +
jmp loc_4545A9  +
mov ds:dword_4857B4 9 +
xor eax eax +
jmp loc_4545A9  +
mov ds:dword_4857B4 12h +
xor eax eax +
jmp loc_4545A9  +
***
sub esp 14h +
mov ebx [esp+14h+arg_8] +
mov ecx [esp+14h+arg_0] +
mov esi [esp+14h+arg_4] +
test ebx ebx +
jz loc_454680  +
test ecx ecx +
jz loc_454680  +
cmp ecx esi +
jz loc_454680  +
lea eax [esi+ebx] +
cmp ecx eax +
jnb loc_454688  +
lea eax [ecx+ebx] +
cmp esi eax +
jnb loc_454688  +
cmp ecx esi +
jnb loc_4546A0  +
xor edx edx +
movzx eax byte ptr [esi+edx] +
mov [ecx+edx] al +
add edx 1 +
cmp ebx edx +
ja loc_454671  +
nop   +
add esp 14h +
mov eax ebx +
pop ebx  +
pop esi  +
retn   +
mov [esp+14h+var_C] ebx +
mov [esp+14h+var_10] esi +
mov [esp+14h+var_14] ecx +
call memcpy  +
add esp 14h +
mov eax ebx +
pop ebx  +
pop esi  +
retn   +
mov edx ebx +
sub edx 1 +
jz loc_454680  +
movzx eax byte ptr [esi+edx] +
mov [ecx+edx] al +
sub edx 1 +
jnz loc_4546A7  +
add esp 14h +
mov eax ebx +
pop ebx  +
pop esi  +
retn   +
***
sub esp 1Ch +
mov [esp+1Ch+var_14] 10h +
mov [esp+1Ch+var_18] edx +
mov [esp+1Ch+var_1C] eax +
call sub_454640  +
add esp 1Ch +
retn   +
***
mov edi 4EC4EC4Fh +
push esi  +
mov eax edi +
push ebx  +
sub esp 0Ch +
mul  [esp+14h+arg_8] +
mov esi [esp+14h+arg_0] +
mov ebx [esp+14h+arg_4] +
mov edi edx +
shr edi 4 +
test edi edi +
jz loc_45485D  +
xor ebp ebp +
test esi esi +
jz loc_45485D  +
mov edx ebx +
mov eax esi +
call sub_4546C0  +
movzx eax byte ptr [ebx+11h] +
movzx edx byte ptr [ebx+10h] +
shl eax 8 +
or eax edx +
mov [esi+10h] ax +
movzx eax byte ptr [ebx+13h] +
movzx edx byte ptr [ebx+12h] +
shl eax 8 +
or eax edx +
mov [esi+12h] ax +
movzx eax byte ptr [ebx+17h] +
movzx edx byte ptr [ebx+16h] +
shl eax 18h +
shl edx 10h +
or eax edx +
movzx edx byte ptr [ebx+14h] +
or eax edx +
movzx edx byte ptr [ebx+15h] +
shl edx 8 +
or eax edx +
mov [esi+14h] eax +
movzx eax byte ptr [ebx+1Bh] +
movzx edx byte ptr [ebx+1Ah] +
shl eax 18h +
shl edx 10h +
or eax edx +
movzx edx byte ptr [ebx+18h] +
or eax edx +
movzx edx byte ptr [ebx+19h] +
shl edx 8 +
or eax edx +
mov [esi+18h] eax +
movzx eax byte ptr [ebx+1Fh] +
movzx edx byte ptr [ebx+1Eh] +
shl eax 18h +
shl edx 10h +
or eax edx +
movzx edx byte ptr [ebx+1Ch] +
or eax edx +
movzx edx byte ptr [ebx+1Dh] +
shl edx 8 +
or eax edx +
mov [esi+1Ch] eax +
movzx eax byte ptr [ebx+23h] +
movzx edx byte ptr [ebx+22h] +
shl eax 18h +
shl edx 10h +
or eax edx +
movzx edx byte ptr [ebx+20h] +
or eax edx +
movzx edx byte ptr [ebx+21h] +
shl edx 8 +
or eax edx +
mov [esi+20h] eax +
movzx ecx byte ptr [ebx+27h] +
movzx eax byte ptr [ebx+26h] +
shl ecx 18h +
shl eax 10h +
or ecx eax +
movzx eax byte ptr [ebx+24h] +
or ecx eax +
movzx eax byte ptr [ebx+25h] +
shl eax 8 +
add ebp 1 +
or ecx eax +
add ebx 34h +
mov [esi+24h] ecx +
movzx eax byte ptr [ebx-0Bh] +
add esi 34h +
movzx edx byte ptr [ebx-0Ch] +
shl eax 8 +
or eax edx +
mov [esi-0Ch] ax +
movzx eax byte ptr [ebx-9] +
movzx edx byte ptr [ebx-0Ah] +
shl eax 8 +
or eax edx +
mov [esi-0Ah] ax +
movzx eax byte ptr [ebx-7] +
movzx edx byte ptr [ebx-8] +
shl eax 8 +
or eax edx +
mov [esi-8] ax +
movzx eax byte ptr [ebx-5] +
movzx edx byte ptr [ebx-6] +
shl eax 8 +
or eax edx +
mov [esi-6] ax +
movzx eax byte ptr [ebx-3] +
movzx edx byte ptr [ebx-4] +
shl eax 8 +
or eax edx +
mov [esi-4] ax +
movzx eax byte ptr [ebx-1] +
movzx edx byte ptr [ebx-2] +
shl eax 8 +
or eax edx +
mov [esi-2] ax +
cmp edi ebp +
ja loc_454711  +
add esp 0Ch +
pop ebx  +
imul eax edi +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov edi 4EC4EC4Fh +
push esi  +
mov eax edi +
push ebx  +
sub esp 0Ch +
mul  [esp+14h+arg_8] +
mov ebx [esp+14h+arg_0] +
mov esi [esp+14h+arg_4] +
mov edi edx +
shr edi 4 +
test edi edi +
jz loc_4549BC  +
xor ebp ebp +
test ebx ebx +
jz loc_4549BC  +
mov eax ebx +
mov edx esi +
call sub_4546C0  +
movzx eax byte ptr [esi+11h] +
add ebp 1 +
add esi 34h +
add ebx 34h +
mov [ebx-23h] al +
movzx eax word ptr [esi-24h] +
mov [ebx-24h] al +
movzx eax byte ptr [esi-21h] +
mov [ebx-21h] al +
movzx eax word ptr [esi-22h] +
mov [ebx-22h] al +
movzx eax byte ptr [esi-1Dh] +
mov [ebx-1Dh] al +
movzx eax word ptr [esi-1Eh] +
mov [ebx-1Eh] al +
mov eax [esi-20h] +
shr eax 8 +
mov [ebx-1Fh] al +
mov eax [esi-20h] +
mov [ebx-20h] al +
movzx eax byte ptr [esi-19h] +
mov [ebx-19h] al +
movzx eax word ptr [esi-1Ah] +
mov [ebx-1Ah] al +
mov eax [esi-1Ch] +
shr eax 8 +
mov [ebx-1Bh] al +
mov eax [esi-1Ch] +
mov [ebx-1Ch] al +
movzx eax byte ptr [esi-15h] +
mov [ebx-15h] al +
movzx eax word ptr [esi-16h] +
mov [ebx-16h] al +
mov eax [esi-18h] +
shr eax 8 +
mov [ebx-17h] al +
mov eax [esi-18h] +
mov [ebx-18h] al +
movzx eax byte ptr [esi-11h] +
mov [ebx-11h] al +
movzx eax word ptr [esi-12h] +
mov [ebx-12h] al +
mov eax [esi-14h] +
shr eax 8 +
mov [ebx-13h] al +
mov eax [esi-14h] +
mov [ebx-14h] al +
movzx eax byte ptr [esi-0Dh] +
mov [ebx-0Dh] al +
movzx eax word ptr [esi-0Eh] +
mov [ebx-0Eh] al +
mov ecx [esi-10h] +
shr ecx 8 +
mov [ebx-0Fh] cl +
mov eax [esi-10h] +
mov [ebx-10h] al +
movzx eax byte ptr [esi-0Bh] +
mov [ebx-0Bh] al +
movzx eax word ptr [esi-0Ch] +
mov [ebx-0Ch] al +
movzx eax byte ptr [esi-9] +
mov [ebx-9] al +
movzx eax word ptr [esi-0Ah] +
mov [ebx-0Ah] al +
movzx eax byte ptr [esi-7] +
mov [ebx-7] al +
movzx eax word ptr [esi-8] +
mov [ebx-8] al +
movzx eax byte ptr [esi-5] +
mov [ebx-5] al +
movzx eax word ptr [esi-6] +
mov [ebx-6] al +
movzx eax byte ptr [esi-3] +
mov [ebx-3] al +
movzx eax word ptr [esi-4] +
mov [ebx-4] al +
movzx eax byte ptr [esi-1] +
mov [ebx-1] al +
movzx eax word ptr [esi-2] +
mov [ebx-2] al +
cmp edi ebp +
ja loc_4548A1  +
add esp 0Ch +
pop ebx  +
imul eax edi +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov edi 4EC4EC4Fh +
push esi  +
mov eax edi +
push ebx  +
sub esp 0Ch +
mul  [esp+14h+arg_8] +
mov esi [esp+14h+arg_0] +
mov ebx [esp+14h+arg_4] +
mov edi edx +
shr edi 4 +
test edi edi +
jz loc_454B4D  +
xor ebp ebp +
test esi esi +
jz loc_454B4D  +
mov edx ebx +
mov eax esi +
call sub_4546C0  +
movzx eax byte ptr [ebx+10h] +
movzx edx byte ptr [ebx+11h] +
shl eax 8 +
or eax edx +
mov [esi+10h] ax +
movzx eax byte ptr [ebx+12h] +
movzx edx byte ptr [ebx+13h] +
shl eax 8 +
or eax edx +
mov [esi+12h] ax +
movzx eax byte ptr [ebx+14h] +
movzx edx byte ptr [ebx+15h] +
shl eax 18h +
shl edx 10h +
or eax edx +
movzx edx byte ptr [ebx+17h] +
or eax edx +
movzx edx byte ptr [ebx+16h] +
shl edx 8 +
or eax edx +
mov [esi+14h] eax +
movzx eax byte ptr [ebx+18h] +
movzx edx byte ptr [ebx+19h] +
shl eax 18h +
shl edx 10h +
or eax edx +
movzx edx byte ptr [ebx+1Bh] +
or eax edx +
movzx edx byte ptr [ebx+1Ah] +
shl edx 8 +
or eax edx +
mov [esi+18h] eax +
movzx eax byte ptr [ebx+1Ch] +
movzx edx byte ptr [ebx+1Dh] +
shl eax 18h +
shl edx 10h +
or eax edx +
movzx edx byte ptr [ebx+1Fh] +
or eax edx +
movzx edx byte ptr [ebx+1Eh] +
shl edx 8 +
or eax edx +
mov [esi+1Ch] eax +
movzx eax byte ptr [ebx+20h] +
movzx edx byte ptr [ebx+21h] +
shl eax 18h +
shl edx 10h +
or eax edx +
movzx edx byte ptr [ebx+23h] +
or eax edx +
movzx edx byte ptr [ebx+22h] +
shl edx 8 +
or eax edx +
mov [esi+20h] eax +
movzx ecx byte ptr [ebx+24h] +
movzx eax byte ptr [ebx+25h] +
shl ecx 18h +
shl eax 10h +
or ecx eax +
movzx eax byte ptr [ebx+27h] +
or ecx eax +
movzx eax byte ptr [ebx+26h] +
shl eax 8 +
add ebp 1 +
or ecx eax +
add ebx 34h +
mov [esi+24h] ecx +
movzx eax byte ptr [ebx-0Ch] +
add esi 34h +
movzx edx byte ptr [ebx-0Bh] +
shl eax 8 +
or eax edx +
mov [esi-0Ch] ax +
movzx eax byte ptr [ebx-0Ah] +
movzx edx byte ptr [ebx-9] +
shl eax 8 +
or eax edx +
mov [esi-0Ah] ax +
movzx eax byte ptr [ebx-8] +
movzx edx byte ptr [ebx-7] +
shl eax 8 +
or eax edx +
mov [esi-8] ax +
movzx eax byte ptr [ebx-6] +
movzx edx byte ptr [ebx-5] +
shl eax 8 +
or eax edx +
mov [esi-6] ax +
movzx eax byte ptr [ebx-4] +
movzx edx byte ptr [ebx-3] +
shl eax 8 +
or eax edx +
mov [esi-4] ax +
movzx eax byte ptr [ebx-2] +
movzx edx byte ptr [ebx-1] +
shl eax 8 +
or eax edx +
mov [esi-2] ax +
cmp edi ebp +
ja loc_454A01  +
add esp 0Ch +
pop ebx  +
imul eax edi +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov edi 4EC4EC4Fh +
push esi  +
mov eax edi +
push ebx  +
sub esp 0Ch +
mul  [esp+14h+arg_8] +
mov ebx [esp+14h+arg_0] +
mov esi [esp+14h+arg_4] +
mov edi edx +
shr edi 4 +
test edi edi +
jz loc_454CAC  +
xor ebp ebp +
test ebx ebx +
jz loc_454CAC  +
mov eax ebx +
mov edx esi +
call sub_4546C0  +
movzx eax byte ptr [esi+11h] +
add ebp 1 +
add esi 34h +
add ebx 34h +
mov [ebx-24h] al +
movzx eax word ptr [esi-24h] +
mov [ebx-23h] al +
movzx eax byte ptr [esi-21h] +
mov [ebx-22h] al +
movzx eax word ptr [esi-22h] +
mov [ebx-21h] al +
movzx eax byte ptr [esi-1Dh] +
mov [ebx-20h] al +
movzx eax word ptr [esi-1Eh] +
mov [ebx-1Fh] al +
mov eax [esi-20h] +
shr eax 8 +
mov [ebx-1Eh] al +
mov eax [esi-20h] +
mov [ebx-1Dh] al +
movzx eax byte ptr [esi-19h] +
mov [ebx-1Ch] al +
movzx eax word ptr [esi-1Ah] +
mov [ebx-1Bh] al +
mov eax [esi-1Ch] +
shr eax 8 +
mov [ebx-1Ah] al +
mov eax [esi-1Ch] +
mov [ebx-19h] al +
movzx eax byte ptr [esi-15h] +
mov [ebx-18h] al +
movzx eax word ptr [esi-16h] +
mov [ebx-17h] al +
mov eax [esi-18h] +
shr eax 8 +
mov [ebx-16h] al +
mov eax [esi-18h] +
mov [ebx-15h] al +
movzx eax byte ptr [esi-11h] +
mov [ebx-14h] al +
movzx eax word ptr [esi-12h] +
mov [ebx-13h] al +
mov eax [esi-14h] +
shr eax 8 +
mov [ebx-12h] al +
mov eax [esi-14h] +
mov [ebx-11h] al +
movzx eax byte ptr [esi-0Dh] +
mov [ebx-10h] al +
movzx eax word ptr [esi-0Eh] +
mov [ebx-0Fh] al +
mov ecx [esi-10h] +
shr ecx 8 +
mov [ebx-0Eh] cl +
mov eax [esi-10h] +
mov [ebx-0Dh] al +
movzx eax byte ptr [esi-0Bh] +
mov [ebx-0Ch] al +
movzx eax word ptr [esi-0Ch] +
mov [ebx-0Bh] al +
movzx eax byte ptr [esi-9] +
mov [ebx-0Ah] al +
movzx eax word ptr [esi-0Ah] +
mov [ebx-9] al +
movzx eax byte ptr [esi-7] +
mov [ebx-8] al +
movzx eax word ptr [esi-8] +
mov [ebx-7] al +
movzx eax byte ptr [esi-5] +
mov [ebx-6] al +
movzx eax word ptr [esi-6] +
mov [ebx-5] al +
movzx eax byte ptr [esi-3] +
mov [ebx-4] al +
movzx eax word ptr [esi-4] +
mov [ebx-3] al +
movzx eax byte ptr [esi-1] +
mov [ebx-2] al +
movzx eax word ptr [esi-2] +
mov [ebx-1] al +
cmp edi ebp +
ja loc_454B91  +
add esp 0Ch +
pop ebx  +
imul eax edi +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [esp+arg_0] +
cmp [esp+arg_4] 1 +
mov edx [esp+arg_8] +
mov ecx [esp+arg_C] +
mov ebx [eax+4] +
jz loc_454CF0  +
mov eax 0FFFFFFFFh +
pop ebx  +
mov ds:dword_4857B4 9 +
pop esi  +
retn   +
cmp dword ptr [eax+14h] 1 +
jnz loc_454CD8  +
test ecx ecx +
jz loc_454D16  +
mov edx 1 +
cmp ebx 10h +
jbe loc_454D30  +
mov eax 0FFFFFFFFh +
pop ebx  +
mov ds:dword_4857B4 0Fh +
pop esi  +
retn   +
lea esi [edx-1] +
cmp esi 1 +
jbe loc_454CFF  +
mov eax 0FFFFFFFFh +
pop ebx  +
mov ds:dword_4857B4 10h +
pop esi  +
retn   +
mov esi edx +
shl esi 7 +
lea edx dword_482418[esi+edx*8] +
lea ecx [ecx+ebx*2] +
mov edx [edx+ecx*4] +
test edx edx +
jz loc_454D04  +
mov ecx [eax+8] +
mov eax [eax] +
mov [esp+arg_0] 0 +
mov [esp+arg_8] ecx +
mov [esp+arg_4] eax +
pop ebx  +
pop esi  +
jmp edx  +
***
mov eax [esp+arg_0] +
mov ecx [esp+arg_8] +
mov edx [esp+arg_4] +
mov [esp+arg_0] 0 +
jmp sub_454500  +
***
mov eax [esp+4] +
mov ecx [esp+0Ch] +
mov edx [esp+8] +
mov dword ptr [esp+4] 1 +
jmp sub_454500  +
***
cmp dword ptr [esp+0Ch] 1 +
jz loc_454DB4  +
mov ds:dword_4857B4 9 +
xor eax eax +
retn   +
***
cmp dword ptr [esp+4] 10h +
ja loc_454DCA  +
mov eax [esp+4] +
mov eax ds:dword_4825C4[eax*8] +
test eax eax +
jnz loc_454DD7  +
mov ds:dword_4857B4 0Fh +
xor eax eax +
retn   +
***
imul eax [esp+8] +
retn   +
***
push esi  +
push ebx  +
sub esp 1Ch +
cmp ecx 13h +
mov [esp+1Ch+var_18] eax +
mov [esp+1Ch+var_14] edx +
mov [esp+1Ch+var_1C] ecx +
jbe loc_4550FE  +
mov [esp+1Ch+var_8] 0 +
mov edi [esp+1Ch+var_8] +
mov eax [esp+1Ch+var_14] +
mov edx [esp+1Ch+var_18] +
add eax edi +
add edx edi +
cmp [esp+1Ch+arg_0] 1 +
jz loc_455047  +
movzx edi byte ptr [eax] +
movzx ecx byte ptr [eax+1] +
movzx esi byte ptr [eax+4] +
movzx ebp byte ptr [eax+6] +
mov word ptr [esp+1Ch+var_10] di +
movzx edi byte ptr [eax+2] +
shl word ptr [esp+1Ch+var_10] 8 +
or word ptr [esp+1Ch+var_10] cx +
movzx ecx byte ptr [eax+3] +
shl esi 8 +
mov [esp+1Ch+var_2] di +
shl ebp 8 +
movzx edi byte ptr [eax+8] +
shl [esp+1Ch+var_2] 8 +
or [esp+1Ch+var_2] cx +
movzx ecx byte ptr [eax+5] +
shl edi 18h +
movzx ebx byte ptr [eax+0Ch] +
or esi ecx +
movzx ecx byte ptr [eax+7] +
shl ebx 18h +
or ebp ecx +
movzx ecx byte ptr [eax+9] +
shl ecx 10h +
or edi ecx +
movzx ecx byte ptr [eax+0Bh] +
or edi ecx +
movzx ecx byte ptr [eax+0Ah] +
shl ecx 8 +
or edi ecx +
movzx ecx byte ptr [eax+0Dh] +
shl ecx 10h +
or ebx ecx +
movzx ecx byte ptr [eax+0Fh] +
or ebx ecx +
movzx ecx byte ptr [eax+0Eh] +
shl ecx 8 +
or ebx ecx +
movzx ecx byte ptr [eax+10h] +
mov [esp+1Ch+var_C] ecx +
movzx ecx byte ptr [eax+11h] +
shl [esp+1Ch+var_C] 18h +
shl ecx 10h +
or [esp+1Ch+var_C] ecx +
movzx ecx byte ptr [eax+13h] +
or [esp+1Ch+var_C] ecx +
movzx eax byte ptr [eax+12h] +
shl eax 8 +
or [esp+1Ch+var_C] eax +
cmp word ptr [esp+1Ch+var_10] 1 +
jnz loc_455109  +
test bp bp +
jz loc_455030  +
test ebx ebx +
jz loc_455030  +
mov eax 1 +
mov [edx] ax +
movzx eax [esp+1Ch+var_2] +
mov [edx+0Ch] ebx +
add ebx [esp+1Ch+var_8] +
mov [edx+4] si +
mov [edx+2] ax +
mov eax [esp+1Ch+var_C] +
mov [edx+6] bp +
mov [edx+8] edi +
mov [edx+10h] eax +
lea eax [ebx+8] +
movzx edx bp +
cmp [esp+1Ch+var_1C] eax +
jb loc_455000  +
test bl 3 +
jnz loc_455030  +
lea eax [edx-1] +
xor ebp ebp +
mov [esp+1Ch+var_10] eax +
jmp loc_454FA2  +
movzx edx byte ptr [ecx] +
movzx eax byte ptr [ecx+1] +
movzx esi byte ptr [ecx+5] +
shl edx 18h +
shl eax 10h +
or edx eax +
movzx eax byte ptr [ecx+3] +
shl esi 10h +
or edx eax +
movzx eax byte ptr [ecx+2] +
shl eax 8 +
or edx eax +
movzx eax byte ptr [ecx+4] +
shl eax 18h +
or eax esi +
movzx esi byte ptr [ecx+7] +
movzx ecx byte ptr [ecx+6] +
mov [edi] edx +
or eax esi +
shl ecx 8 +
or eax ecx +
test eax eax +
mov [edi+4] eax +
jz loc_455000  +
add ebx eax +
cmp ebp [esp+1Ch+var_10] +
jz loc_455000  +
lea eax [ebx+8] +
cmp eax [esp+1Ch+var_1C] +
ja loc_455000  +
add ebp 1 +
test bl 3 +
jnz loc_455030  +
mov eax [esp+1Ch+var_14] +
cmp [esp+1Ch+arg_0] 1 +
lea ecx [eax+ebx] +
mov eax [esp+1Ch+var_18] +
lea edi [eax+ebx] +
jnz loc_454F40  +
movzx edx byte ptr [ecx+3] +
movzx eax byte ptr [ecx+2] +
movzx esi byte ptr [ecx+6] +
shl edx 18h +
shl eax 10h +
or edx eax +
movzx eax byte ptr [ecx] +
shl esi 10h +
or edx eax +
movzx eax byte ptr [ecx+1] +
shl eax 8 +
or edx eax +
movzx eax byte ptr [ecx+7] +
shl eax 18h +
or eax esi +
movzx esi byte ptr [ecx+4] +
movzx ecx byte ptr [ecx+5] +
mov [edi] edx +
or eax esi +
shl ecx 8 +
or eax ecx +
test eax eax +
mov [edi+4] eax +
jnz loc_454F86  +
lea esi [esi+0] +
mov eax [esp+1Ch+var_C] +
test eax eax +
jz loc_4550FE  +
add [esp+1Ch+var_8] eax +
mov eax [esp+1Ch+var_8] +
add eax 14h +
cmp [esp+1Ch+var_1C] eax +
jb loc_4550FE  +
test byte ptr [esp+1Ch+var_8] 3 +
jz loc_454E03  +
nop   +
lea esi [esi+0] +
mov ds:dword_4857B4 31h +
add esp 1Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
movzx edi byte ptr [eax+1] +
movzx ecx byte ptr [eax] +
movzx esi byte ptr [eax+5] +
movzx ebp byte ptr [eax+7] +
mov word ptr [esp+1Ch+var_10] di +
movzx edi byte ptr [eax+3] +
shl word ptr [esp+1Ch+var_10] 8 +
or word ptr [esp+1Ch+var_10] cx +
movzx ecx byte ptr [eax+2] +
shl esi 8 +
mov [esp+1Ch+var_2] di +
shl ebp 8 +
movzx edi byte ptr [eax+0Bh] +
shl [esp+1Ch+var_2] 8 +
or [esp+1Ch+var_2] cx +
movzx ecx byte ptr [eax+4] +
shl edi 18h +
movzx ebx byte ptr [eax+0Fh] +
or esi ecx +
movzx ecx byte ptr [eax+6] +
shl ebx 18h +
or ebp ecx +
movzx ecx byte ptr [eax+0Ah] +
shl ecx 10h +
or edi ecx +
movzx ecx byte ptr [eax+8] +
or edi ecx +
movzx ecx byte ptr [eax+9] +
shl ecx 8 +
or edi ecx +
movzx ecx byte ptr [eax+0Eh] +
shl ecx 10h +
or ebx ecx +
movzx ecx byte ptr [eax+0Ch] +
or ebx ecx +
movzx ecx byte ptr [eax+0Dh] +
shl ecx 8 +
or ebx ecx +
movzx ecx byte ptr [eax+13h] +
mov [esp+1Ch+var_C] ecx +
movzx ecx byte ptr [eax+12h] +
shl [esp+1Ch+var_C] 18h +
shl ecx 10h +
or [esp+1Ch+var_C] ecx +
movzx ecx byte ptr [eax+10h] +
or [esp+1Ch+var_C] ecx +
movzx eax byte ptr [eax+11h] +
shl eax 8 +
or [esp+1Ch+var_C] eax +
jmp loc_454ED0  +
mov eax [esp+1Ch+var_1C] +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ds:dword_4857B4 32h +
jmp loc_45503A  +
***
push esi  +
push ebx  +
sub esp 20h +
cmp ecx 0Fh +
mov [esp+20h+var_14] eax +
mov [esp+20h+var_10] edx +
mov [esp+20h+var_18] ecx +
jbe loc_45549E  +
mov [esp+20h+var_4] 0 +
mov edi [esp+20h+var_4] +
mov eax [esp+20h+var_10] +
mov ebx [esp+20h+var_14] +
add eax edi +
add ebx edi +
cmp [esp+20h+arg_0] 1 +
jz loc_455417  +
movzx ecx byte ptr [eax] +
movzx edx byte ptr [eax+1] +
movzx ebp byte ptr [eax+2] +
movzx edi byte ptr [eax+4] +
shl ecx 8 +
movzx esi byte ptr [eax+9] +
or ecx edx +
movzx edx byte ptr [eax+3] +
shl ebp 8 +
shl edi 18h +
shl esi 10h +
or ebp edx +
movzx edx byte ptr [eax+5] +
shl edx 10h +
or edi edx +
movzx edx byte ptr [eax+7] +
or edi edx +
movzx edx byte ptr [eax+6] +
shl edx 8 +
or edi edx +
movzx edx byte ptr [eax+8] +
shl edx 18h +
or edx esi +
movzx esi byte ptr [eax+0Bh] +
or edx esi +
movzx esi byte ptr [eax+0Ah] +
shl esi 8 +
or edx esi +
movzx esi byte ptr [eax+0Ch] +
mov [esp+20h+var_8] esi +
movzx esi byte ptr [eax+0Dh] +
shl [esp+20h+var_8] 18h +
shl esi 10h +
or [esp+20h+var_8] esi +
movzx esi byte ptr [eax+0Fh] +
movzx eax byte ptr [eax+0Eh] +
or [esp+20h+var_8] esi +
shl eax 8 +
or [esp+20h+var_8] eax +
cmp cx 1 +
jnz loc_4554AA  +
test bp bp +
jz loc_455400  +
test edx edx +
jz loc_455400  +
mov eax 1 +
mov [ebx] ax +
mov eax [esp+20h+var_8] +
mov [ebx+4] edi +
mov [ebx+8] edx +
mov [ebx+2] bp +
mov [ebx+0Ch] eax +
mov eax [esp+20h+var_4] +
lea edi [edx+eax] +
movzx edx bp +
lea eax [edi+10h] +
cmp [esp+20h+var_18] eax +
jb loc_4553D0  +
test edi 3 +
jnz loc_455400  +
lea eax [edx-1] +
mov [esp+20h+var_C] eax +
mov [esp+20h+var_1C] 0 +
jmp loc_455328  +
movzx esi byte ptr [eax] +
movzx edx byte ptr [eax+1] +
movzx ecx byte ptr [eax+4] +
movzx ebp byte ptr [eax+0Dh] +
shl esi 18h +
shl edx 10h +
or esi edx +
movzx edx byte ptr [eax+3] +
mov [esp+20h+var_20] cx +
movzx ecx byte ptr [eax+6] +
shl ebp 10h +
shl [esp+20h+var_20] 8 +
or esi edx +
movzx edx byte ptr [eax+2] +
mov [esp+20h+var_1E] cx +
movzx ecx byte ptr [eax+8] +
shl [esp+20h+var_1E] 8 +
shl edx 8 +
or esi edx +
movzx edx byte ptr [eax+5] +
or [esp+20h+var_20] dx +
movzx edx byte ptr [eax+7] +
shl ecx 18h +
or [esp+20h+var_1E] dx +
movzx edx byte ptr [eax+9] +
shl edx 10h +
or ecx edx +
movzx edx byte ptr [eax+0Bh] +
or ecx edx +
movzx edx byte ptr [eax+0Ah] +
shl edx 8 +
or ecx edx +
movzx edx byte ptr [eax+0Ch] +
shl edx 18h +
or edx ebp +
movzx ebp byte ptr [eax+0Fh] +
movzx eax byte ptr [eax+0Eh] +
or edx ebp +
shl eax 8 +
or edx eax +
movzx eax [esp+20h+var_20] +
test edx edx +
mov [ebx] esi +
mov [ebx+8] ecx +
mov [ebx+0Ch] edx +
mov [ebx+4] ax +
movzx eax [esp+20h+var_1E] +
mov [ebx+6] ax +
jz loc_4553D0  +
mov eax [esp+20h+var_C] +
add edi edx +
cmp [esp+20h+var_1C] eax +
jz loc_4553D0  +
lea eax [edi+10h] +
cmp eax [esp+20h+var_18] +
ja loc_4553D0  +
add [esp+20h+var_1C] 1 +
test edi 3 +
jnz loc_455400  +
mov eax [esp+20h+var_10] +
mov ecx [esp+20h+var_14] +
add eax edi +
cmp [esp+20h+arg_0] 1 +
lea ebx [ecx+edi] +
jnz loc_455250  +
movzx esi byte ptr [eax+3] +
movzx edx byte ptr [eax+2] +
movzx ecx byte ptr [eax+5] +
movzx ebp byte ptr [eax+0Eh] +
shl esi 18h +
shl edx 10h +
or esi edx +
movzx edx byte ptr [eax] +
mov [esp+20h+var_20] cx +
movzx ecx byte ptr [eax+7] +
shl ebp 10h +
shl [esp+20h+var_20] 8 +
or esi edx +
movzx edx byte ptr [eax+1] +
mov [esp+20h+var_1E] cx +
movzx ecx byte ptr [eax+0Bh] +
shl [esp+20h+var_1E] 8 +
shl edx 8 +
or esi edx +
movzx edx byte ptr [eax+4] +
or [esp+20h+var_20] dx +
movzx edx byte ptr [eax+6] +
shl ecx 18h +
or [esp+20h+var_1E] dx +
movzx edx byte ptr [eax+0Ah] +
shl edx 10h +
or ecx edx +
movzx edx byte ptr [eax+8] +
or ecx edx +
movzx edx byte ptr [eax+9] +
shl edx 8 +
or ecx edx +
movzx edx byte ptr [eax+0Fh] +
shl edx 18h +
or edx ebp +
movzx ebp byte ptr [eax+0Ch] +
movzx eax byte ptr [eax+0Dh] +
or edx ebp +
shl eax 8 +
or edx eax +
jmp loc_4552D9  +
mov eax [esp+20h+var_8] +
test eax eax +
jz loc_45549E  +
add [esp+20h+var_4] eax +
mov eax [esp+20h+var_4] +
add eax 10h +
cmp [esp+20h+var_18] eax +
jb loc_45549E  +
test byte ptr [esp+20h+var_4] 3 +
jz loc_455144  +
lea esi [esi+0] +
mov ds:dword_4857B4 33h +
add esp 20h +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
movzx ecx byte ptr [eax+1] +
movzx edx byte ptr [eax] +
movzx ebp byte ptr [eax+3] +
movzx edi byte ptr [eax+7] +
shl ecx 8 +
movzx esi byte ptr [eax+0Ah] +
or ecx edx +
movzx edx byte ptr [eax+2] +
shl ebp 8 +
shl edi 18h +
shl esi 10h +
or ebp edx +
movzx edx byte ptr [eax+6] +
shl edx 10h +
or edi edx +
movzx edx byte ptr [eax+4] +
or edi edx +
movzx edx byte ptr [eax+5] +
shl edx 8 +
or edi edx +
movzx edx byte ptr [eax+0Bh] +
shl edx 18h +
or edx esi +
movzx esi byte ptr [eax+8] +
or edx esi +
movzx esi byte ptr [eax+9] +
shl esi 8 +
or edx esi +
movzx esi byte ptr [eax+0Fh] +
mov [esp+20h+var_8] esi +
movzx esi byte ptr [eax+0Eh] +
shl [esp+20h+var_8] 18h +
shl esi 10h +
or [esp+20h+var_8] esi +
movzx esi byte ptr [eax+0Ch] +
movzx eax byte ptr [eax+0Dh] +
or [esp+20h+var_8] esi +
shl eax 8 +
or [esp+20h+var_8] eax +
jmp loc_4551E1  +
mov eax [esp+20h+var_18] +
add esp 20h +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ds:dword_4857B4 34h +
jmp loc_45540A  +
***
mov eax [esp+arg_0] +
mov edx [esp+arg_4] +
mov ecx [esp+arg_8] +
test eax eax +
jz loc_4554F1  +
test edx edx +
jz loc_4554E1  +
mov [esp+arg_0] 1 +
jmp sub_454DE0  +
mov ds:dword_4857B4 12h +
mov eax 0FFFFFFFFh +
retn   +
mov eax ecx +
retn   +
***
mov eax [esp+arg_0] +
mov edx [esp+arg_4] +
mov ecx [esp+arg_8] +
test eax eax +
jz loc_455531  +
test edx edx +
jz loc_455521  +
mov [esp+arg_0] 2 +
jmp sub_454DE0  +
mov ds:dword_4857B4 12h +
mov eax 0FFFFFFFFh +
retn   +
mov eax ecx +
retn   +
***
mov eax [esp+arg_0] +
mov edx [esp+arg_4] +
mov ecx [esp+arg_8] +
test eax eax +
jz loc_455571  +
test edx edx +
jz loc_455561  +
mov [esp+arg_0] 1 +
jmp sub_455120  +
mov ds:dword_4857B4 12h +
mov eax 0FFFFFFFFh +
retn   +
mov eax ecx +
retn   +
***
mov eax [esp+arg_0] +
mov edx [esp+arg_4] +
mov ecx [esp+arg_8] +
test eax eax +
jz loc_4555B1  +
test edx edx +
jz loc_4555A1  +
mov [esp+arg_0] 2 +
jmp sub_455120  +
mov ds:dword_4857B4 12h +
mov eax 0FFFFFFFFh +
retn   +
mov eax ecx +
retn   +
***
push esi  +
push ebx  +
sub esp 18h +
cmp ecx 13h +
mov [esp+18h+var_10] eax +
mov [esp+18h+var_C] edx +
mov [esp+18h+var_14] ecx +
jbe loc_45587A  +
mov [esp+18h+var_8] 0 +
mov esi [esp+18h+var_8] +
mov edx [esp+18h+var_C] +
mov eax [esp+18h+var_10] +
add edx esi +
movzx ecx word ptr [edx+4] +
add eax esi +
mov ebx [edx+10h] +
cmp word ptr [edx] 1 +
movzx esi word ptr [edx+2] +
mov word ptr [esp+18h+var_18] cx +
movzx ebp word ptr [edx+6] +
mov ecx [edx+8] +
mov edi [edx+0Ch] +
mov [esp+18h+var_4] ebx +
jnz loc_455886  +
test bp bp +
jz loc_4557D0  +
test edi edi +
jz loc_4557D0  +
cmp [esp+18h+arg_0] 1 +
jz loc_4557E7  +
mov edx esi +
mov ebx ebp +
shr dx 8 +
mov [eax+2] dl +
mov edx esi +
movzx esi word ptr [esp+18h+var_18] +
mov [eax+3] dl +
mov [eax+0Bh] cl +
mov byte ptr [eax] 0 +
mov edx esi +
shr dx 8 +
mov [eax+4] dl +
mov edx esi +
mov esi [esp+18h+var_4] +
mov [eax+5] dl +
mov edx ebp +
shr dx 8 +
mov [eax+6] dl +
mov edx ecx +
shr edx 18h +
mov [eax+8] dl +
mov edx ecx +
shr edx 10h +
mov [eax+9] dl +
mov edx ecx +
mov ecx edi +
shr edx 8 +
mov [eax+0Ah] dl +
mov edx edi +
shr edx 18h +
mov [eax+0Ch] dl +
mov edx edi +
shr edx 10h +
mov [eax+0Dh] dl +
mov edx edi +
shr edx 8 +
mov [eax+0Eh] dl +
mov edx esi +
shr edx 18h +
mov [eax+10h] dl +
mov edx esi +
shr edx 10h +
mov [eax+11h] dl +
mov edx esi +
mov [eax+0Fh] cl +
shr edx 8 +
mov ecx esi +
mov byte ptr [eax+1] 1 +
mov [eax+7] bl +
mov [eax+12h] dl +
mov [eax+13h] cl +
mov eax [esp+18h+var_8] +
lea ecx [edi+eax] +
lea eax [ecx+8] +
cmp [esp+18h+var_14] eax +
jb loc_4557A4  +
test cl 3 +
jnz loc_4557D0  +
sub ebp 1 +
xor esi esi +
mov [esp+18h+var_18] ecx +
jmp loc_455749  +
mov edi ebx +
shr edi 10h +
mov [eax] cl +
mov ecx edi +
mov edi ebx +
mov [eax+3] bl +
mov ebx edx +
shr ebx 18h +
mov [eax+4] bl +
mov ebx edx +
shr ebx 10h +
shr edi 8 +
mov [eax+5] bl +
mov ebx edx +
shr ebx 8 +
test edx edx +
mov [eax+1] cl +
mov ecx edi +
mov [eax+2] cl +
mov [eax+6] bl +
mov [eax+7] dl +
jz loc_4557A4  +
add [esp+18h+var_18] edx +
cmp esi ebp +
jz loc_4557A4  +
mov ecx [esp+18h+var_18] +
mov eax ecx +
add eax 8 +
cmp eax [esp+18h+var_14] +
ja loc_4557A4  +
add esi 1 +
and ecx 3 +
jnz loc_4557D0  +
mov ecx [esp+18h+var_18] +
mov eax [esp+18h+var_C] +
lea edx [eax+ecx] +
mov eax [esp+18h+var_10] +
mov ebx [edx] +
mov edx [edx+4] +
add eax ecx +
mov edi ebx +
shr edi 18h +
cmp [esp+18h+arg_0] 1 +
mov ecx edi +
jnz loc_4556F0  +
mov edi ebx +
shr edi 10h +
mov [eax+3] cl +
mov ecx edi +
mov edi ebx +
mov [eax] bl +
mov ebx edx +
shr ebx 18h +
mov [eax+7] bl +
mov ebx edx +
shr ebx 10h +
shr edi 8 +
mov [eax+6] bl +
mov ebx edx +
shr ebx 8 +
test edx edx +
mov [eax+2] cl +
mov ecx edi +
mov [eax+1] cl +
mov [eax+5] bl +
mov [eax+4] dl +
jnz loc_455728  +
mov eax [esp+18h+var_4] +
test eax eax +
jz loc_45587A  +
add [esp+18h+var_8] eax +
mov eax [esp+18h+var_8] +
add eax 14h +
cmp [esp+18h+var_14] eax +
jb loc_45587A  +
test byte ptr [esp+18h+var_8] 3 +
jz loc_4555E4  +
mov ds:dword_4857B4 31h +
add esp 18h +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edx esi +
mov ebx ebp +
shr dx 8 +
mov [eax+3] dl +
mov edx esi +
movzx esi word ptr [esp+18h+var_18] +
mov [eax+2] dl +
mov [eax+8] cl +
mov byte ptr [eax+1] 0 +
mov edx esi +
shr dx 8 +
mov [eax+5] dl +
mov edx esi +
mov esi [esp+18h+var_4] +
mov [eax+4] dl +
mov edx ebp +
shr dx 8 +
mov [eax+7] dl +
mov edx ecx +
shr edx 18h +
mov [eax+0Bh] dl +
mov edx ecx +
shr edx 10h +
mov [eax+0Ah] dl +
mov edx ecx +
mov ecx edi +
shr edx 8 +
mov [eax+9] dl +
mov edx edi +
shr edx 18h +
mov [eax+0Fh] dl +
mov edx edi +
shr edx 10h +
mov [eax+0Eh] dl +
mov edx edi +
shr edx 8 +
mov [eax+0Dh] dl +
mov edx esi +
shr edx 18h +
mov [eax+13h] dl +
mov edx esi +
shr edx 10h +
mov [eax+12h] dl +
mov edx esi +
mov [eax+0Ch] cl +
shr edx 8 +
mov ecx esi +
mov byte ptr [eax] 1 +
mov [eax+6] bl +
mov [eax+11h] dl +
mov [eax+10h] cl +
jmp loc_4556C5  +
mov eax [esp+18h+var_14] +
add esp 18h +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ds:dword_4857B4 32h +
jmp loc_4557DA  +
***
push esi  +
push ebx  +
sub esp 22h +
cmp ecx 0Fh +
mov [esp+22h+var_10] eax +
mov [esp+22h+var_14] edx +
mov [esp+22h+var_18] ecx +
jbe loc_455C00  +
mov eax [esp+22h+var_14] +
mov edi [eax+0Ch] +
cmp word ptr [eax] 1 +
movzx esi word ptr [eax+2] +
mov edx [eax+4] +
mov ecx [eax+8] +
mov [esp+22h+var_4] edi +
jnz loc_455B63  +
mov eax [esp+22h+var_10] +
mov ebp edx +
movzx ebx si +
mov [esp+22h+var_8] 0 +
test bx bx +
jz loc_455B70  +
test ecx ecx +
jz loc_455B70  +
cmp [esp+22h+arg_0] 1 +
jz loc_455B87  +
mov esi ebx +
mov edi [esp+22h+var_4] +
shr si 8 +
mov edx esi +
mov esi ebp +
shr esi 18h +
mov [eax+2] dl +
mov edx esi +
mov esi ebp +
shr esi 10h +
mov [eax+4] dl +
mov edx esi +
mov esi ebp +
shr esi 8 +
mov [eax+5] dl +
mov edx esi +
mov [eax+6] dl +
mov edx ebp +
mov [eax+7] dl +
mov edx ecx +
shr edx 18h +
mov [eax+8] dl +
mov edx ecx +
shr edx 10h +
mov [eax+9] dl +
mov edx ecx +
shr edx 8 +
mov [eax+0Ah] dl +
mov edx edi +
shr edx 18h +
mov [eax+0Ch] dl +
mov edx edi +
shr edx 10h +
mov [eax+0Dh] dl +
mov edx edi +
shr edx 8 +
mov [eax+0Eh] dl +
mov edx edi +
mov byte ptr [eax] 0 +
mov byte ptr [eax+1] 1 +
mov [eax+3] bl +
mov [eax+0Bh] cl +
mov [eax+0Fh] dl +
mov eax [esp+22h+var_8] +
lea esi [eax+ecx] +
lea eax [esi+10h] +
cmp [esp+22h+var_18] eax +
jb loc_455B10  +
test esi 3 +
jnz loc_455B70  +
lea eax [ebx-1] +
mov [esp+22h+var_C] eax +
mov [esp+22h+var_1C] 0 +
jmp loc_455A5B  +
mov ebp ebx +
shr ebp 10h +
mov [eax] cl +
mov ecx ebp +
mov ebp ebx +
shr ebp 8 +
mov [eax+1] cl +
mov ecx ebp +
mov [eax+2] cl +
mov ecx edi +
mov [eax+3] bl +
mov ebx edi +
movzx edi [esp+22h+var_22] +
shr bx 8 +
mov [eax+4] bl +
mov [eax+5] cl +
mov ebx edi +
mov ecx edi +
mov edi [esp+22h+var_20] +
shr bx 8 +
mov [eax+7] cl +
mov [eax+6] bl +
mov ecx edi +
mov ebx edi +
mov [eax+0Bh] cl +
mov ecx edx +
shr ebx 18h +
shr ecx 18h +
mov [eax+8] bl +
mov ebx edi +
mov [eax+0Ch] cl +
mov ecx edx +
shr ebx 10h +
shr ecx 10h +
mov [eax+9] bl +
mov ebx edi +
mov [eax+0Dh] cl +
mov ecx edx +
shr ebx 8 +
shr ecx 8 +
test edx edx +
mov [eax+0Ah] bl +
mov [eax+0Eh] cl +
mov [eax+0Fh] dl +
jz loc_455B10  +
mov eax [esp+22h+var_C] +
add esi edx +
cmp [esp+22h+var_1C] eax +
jz loc_455B10  +
lea eax [esi+10h] +
cmp eax [esp+22h+var_18] +
ja loc_455B10  +
add [esp+22h+var_1C] 1 +
test esi 3 +
jnz loc_455B70  +
mov eax [esp+22h+var_14] +
lea edx [eax+esi] +
mov eax [esp+22h+var_10] +
movzx ecx word ptr [edx+6] +
mov ebx [edx] +
movzx edi word ptr [edx+4] +
add eax esi +
mov [esp+22h+var_22] cx +
mov ecx [edx+8] +
mov ebp ebx +
mov edx [edx+0Ch] +
shr ebp 18h +
cmp [esp+22h+arg_0] 1 +
mov [esp+22h+var_20] ecx +
mov ecx ebp +
jnz loc_4559B0  +
mov ebp ebx +
shr ebp 10h +
mov [eax+3] cl +
mov ecx ebp +
mov ebp ebx +
mov [eax] bl +
mov ebx edi +
shr bx 8 +
mov [eax+5] bl +
mov ebx edi +
movzx edi [esp+22h+var_22] +
shr ebp 8 +
mov [eax+2] cl +
mov ecx ebp +
mov [eax+1] cl +
mov [eax+4] bl +
mov ecx edi +
mov ebx edi +
mov edi [esp+22h+var_20] +
shr bx 8 +
mov [eax+6] cl +
mov [eax+7] bl +
mov [eax+0Ch] dl +
mov ecx edi +
mov ebx edi +
mov [eax+8] cl +
mov ecx edx +
shr ebx 18h +
shr ecx 18h +
mov [eax+0Bh] bl +
mov ebx edi +
mov [eax+0Fh] cl +
mov ecx edx +
shr ebx 10h +
shr ecx 10h +
mov [eax+0Ah] bl +
mov ebx edi +
mov [eax+0Eh] cl +
mov ecx edx +
shr ebx 8 +
shr ecx 8 +
test edx edx +
mov [eax+9] bl +
mov [eax+0Dh] cl +
jnz loc_455A2D  +
nop   +
mov eax [esp+22h+var_4] +
test eax eax +
jz loc_455C00  +
add [esp+22h+var_8] eax +
mov eax [esp+22h+var_8] +
add eax 10h +
cmp [esp+22h+var_18] eax +
jb loc_455C00  +
test byte ptr [esp+22h+var_8] 3 +
jnz loc_455B70  +
mov edi [esp+22h+var_8] +
mov esi [esp+22h+var_14] +
mov eax [esp+22h+var_10] +
add esi edi +
add eax edi +
mov edi [esi+0Ch] +
cmp word ptr [esi] 1 +
movzx ebx word ptr [esi+2] +
mov ebp [esi+4] +
mov ecx [esi+8] +
mov [esp+22h+var_4] edi +
jz loc_4558EC  +
mov ds:dword_4857B4 34h +
jmp loc_455B7A  +
mov ds:dword_4857B4 33h +
add esp 22h +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi ebx +
mov edi [esp+22h+var_4] +
shr si 8 +
mov edx esi +
mov esi ebp +
shr esi 18h +
mov [eax+3] dl +
mov edx esi +
mov esi ebp +
shr esi 10h +
mov [eax+7] dl +
mov edx esi +
mov esi ebp +
shr esi 8 +
mov [eax+6] dl +
mov edx esi +
mov [eax+5] dl +
mov edx ebp +
mov [eax+4] dl +
mov edx ecx +
shr edx 18h +
mov [eax+0Bh] dl +
mov edx ecx +
shr edx 10h +
mov [eax+0Ah] dl +
mov edx ecx +
shr edx 8 +
mov [eax+9] dl +
mov edx edi +
shr edx 18h +
mov [eax+0Fh] dl +
mov edx edi +
shr edx 10h +
mov [eax+0Eh] dl +
mov edx edi +
shr edx 8 +
mov [eax+0Dh] dl +
mov edx edi +
mov byte ptr [eax+1] 0 +
mov byte ptr [eax] 1 +
mov [eax+2] bl +
mov [eax+8] cl +
mov [eax+0Ch] dl +
jmp loc_45597C  +
mov eax [esp+22h+var_18] +
add esp 22h +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [esp+arg_0] +
mov edx [esp+arg_4] +
mov ecx [esp+arg_8] +
test eax eax +
jz loc_455C41  +
test edx edx +
jz loc_455C31  +
mov [esp+arg_0] 1 +
jmp sub_4555C0  +
mov ds:dword_4857B4 12h +
mov eax 0FFFFFFFFh +
retn   +
mov eax ecx +
retn   +
***
mov eax [esp+arg_0] +
mov edx [esp+arg_4] +
mov ecx [esp+arg_8] +
test eax eax +
jz loc_455C81  +
test edx edx +
jz loc_455C71  +
mov [esp+arg_0] 2 +
jmp sub_4555C0  +
mov ds:dword_4857B4 12h +
mov eax 0FFFFFFFFh +
retn   +
mov eax ecx +
retn   +
***
mov eax [esp+arg_0] +
mov edx [esp+arg_4] +
mov ecx [esp+arg_8] +
test eax eax +
jz loc_455CC1  +
test edx edx +
jz loc_455CB1  +
mov [esp+arg_0] 1 +
jmp sub_4558A0  +
mov ds:dword_4857B4 12h +
mov eax 0FFFFFFFFh +
retn   +
mov eax ecx +
retn   +
***
mov eax [esp+arg_0] +
mov edx [esp+arg_4] +
mov ecx [esp+arg_8] +
test eax eax +
jz loc_455D01  +
test edx edx +
jz loc_455CF1  +
mov [esp+arg_0] 2 +
jmp sub_4558A0  +
mov ds:dword_4857B4 12h +
mov eax 0FFFFFFFFh +
retn   +
mov eax ecx +
retn   +
***
push esi  +
push ebx  +
mov ebx eax +
sub esp 10h +
mov eax [eax+30h] +
mov esi ds:CloseHandle +
mov [esp+18h+var_18] eax +
call esi  +
mov eax [ebx] +
sub esp 4 +
mov [esp+18h+var_18] eax +
call esi  +
mov eax [ebx+10h] +
sub esp 4 +
mov [esp+18h+var_18] eax +
call ds:LocalFree  +
mov eax [ebx+1Ch] +
sub esp 4 +
mov [esp+18h+var_18] eax +
call free  +
mov [esp+18h+var_18] ebx +
call free  +
lea esp [ebp-8] +
pop ebx  +
pop esi  +
pop ebp  +
retn   +
***
push ebx  +
mov ebx eax +
sub esp 34h +
call ds:GetLastError  +
lea edx [ebp+var_C] +
mov [esp+38h+var_28] edx +
mov [esp+38h+var_20] 0 +
mov [esp+38h+var_24] 0 +
mov [esp+38h+var_2C] 400h +
mov [esp+38h+var_34] 0 +
mov [esp+38h+var_30] eax +
mov [esp+38h+var_38] 1300h +
call ds:FormatMessageW  +
mov edx [ebp+var_C] +
movzx eax word ptr [edx] +
sub esp 1Ch +
test ax ax +
jz loc_455DD1  +
cmp ax 0Dh +
jnz loc_455DC6  +
jmp loc_455DF0  +
cmp cx 0Dh +
jz loc_455DF0  +
add edx 2 +
movzx ecx word ptr [edx] +
test cx cx +
jnz loc_455DC0  +
mov eax [ebx] +
mov [esp+38h+var_38] eax +
call ds:LocalFree  +
mov eax [ebp+var_C] +
mov [ebx] eax +
mov ebx [ebp+var_4] +
sub esp 4 +
leave   +
retn   +
xor eax eax +
mov [edx] ax +
jmp loc_455DD1  +
***
sub esp 18h +
push ebx  +
sub esp 14h +
mov [esp+18h+var_18] offset aHid_dll_0 +
call ds:LoadLibraryA  +
sub esp 4 +
test eax eax +
mov ds:dword_4857C0 eax +
jz loc_455FD0  +
mov ebx ds:GetProcAddress +
mov [esp+18h+var_14] offset aHidd_getattr_2 +
mov [esp+18h+var_18] eax +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_4857EC eax +
jz loc_455FD0  +
mov eax ds:dword_4857C0 +
mov [esp+18h+var_14] offset aHidd_getseri_2 +
mov [esp+18h+var_18] eax +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_4857E8 eax +
jz loc_455FD0  +
mov eax ds:dword_4857C0 +
mov [esp+18h+var_14] offset aHidd_getmanu_2 +
mov [esp+18h+var_18] eax +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_4857E4 eax +
jz loc_455FD0  +
mov eax ds:dword_4857C0 +
mov [esp+18h+var_14] offset aHidd_getprod_2 +
mov [esp+18h+var_18] eax +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_4857E0 eax +
jz loc_455FD0  +
mov eax ds:dword_4857C0 +
mov [esp+18h+var_14] offset aHidd_setfeat_2 +
mov [esp+18h+var_18] eax +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_4857DC eax +
jz loc_455FD0  +
mov eax ds:dword_4857C0 +
mov [esp+18h+var_14] offset aHidd_getfeat_2 +
mov [esp+18h+var_18] eax +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_4857D8 eax +
jz loc_455FD0  +
mov eax ds:dword_4857C0 +
mov [esp+18h+var_14] offset aHidd_getindexe +
mov [esp+18h+var_18] eax +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_4857D4 eax +
jz loc_455FD0  +
mov eax ds:dword_4857C0 +
mov [esp+18h+var_14] offset aHidd_getprep_2 +
mov [esp+18h+var_18] eax +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_4857D0 eax +
jz loc_455FD0  +
mov eax ds:dword_4857C0 +
mov [esp+18h+var_14] offset aHidd_freepre_2 +
mov [esp+18h+var_18] eax +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_4857CC eax +
jz loc_455FD0  +
mov eax ds:dword_4857C0 +
mov [esp+18h+var_14] offset aHidp_getcaps_0 +
mov [esp+18h+var_18] eax +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_4857C8 eax +
jz loc_455FD0  +
mov eax ds:dword_4857C0 +
mov [esp+18h+var_14] offset aHidd_setnumi_2 +
mov [esp+18h+var_18] eax +
call ebx  +
sub esp 8 +
test eax eax +
mov ds:dword_4857C4 eax +
jz loc_455FD0  +
mov ds:byte_4857BC 1 +
xor eax eax +
mov ebx [ebp+var_4] +
leave   +
retn   +
call hid_exit  +
mov eax 0FFFFFFFFh +
mov ebx [ebp+var_4] +
leave   +
retn   +
***
cmp ds:byte_4857BC 0 +
jz loc_455FF0  +
xor eax eax +
retn   +
jmp sub_455E30  +
***
push edi  +
mov edi 0FFFFF16Fh +
push esi  +
push ebx  +
sub esp 4ECh +
movzx eax [ebp+arg_0] +
cmp ds:byte_4857BC 0 +
mov [ebp+var_4A0] 4D1E55B2h +
mov [ebp+var_49C] di +
mov [ebp+var_4C6] ax +
movzx eax [ebp+arg_4] +
mov [ebp+var_498] 88h +
mov [ebp+var_497] 0CBh +
mov [ebp+var_496] 0 +
mov [ebp+var_4C8] ax +
mov eax 11CFh +
mov [ebp+var_49A] ax +
mov [ebp+var_495] 11h +
mov [ebp+var_494] 11h +
mov [ebp+var_493] 0 +
mov [ebp+var_492] 0 +
mov [ebp+var_491] 30h +
jz loc_45635A  +
xor eax eax +
mov [ebp+eax+var_490] 0 +
add eax 4 +
cmp eax 1Ch +
jb loc_45608B  +
lea eax [ebp+var_4A0] +
mov [ebp+var_490] 1Ch +
mov [ebp+var_474] 1Ch +
mov [esp+4F8h+var_4EC] 12h +
mov [esp+4F8h+var_4F0] 0 +
mov [esp+4F8h+var_4F4] 0 +
mov [esp+4F8h+var_4F8] eax +
call ds:SetupDiGetClassDevsA  +
mov [ebp+var_4C0] 0 +
mov [ebp+var_4D0] 0 +
mov [ebp+var_4CC] 0 +
sub esp 10h +
mov [ebp+var_4BC] eax +
lea eax [ebp+var_474] +
mov edi [ebp+var_4BC] +
mov [esp+4F8h+var_4E8] eax +
mov eax [ebp+var_4C0] +
mov [ebp+var_4B8] 0 +
mov [esp+4F8h+var_4F4] 0 +
mov [esp+4F8h+var_4F8] edi +
mov [esp+4F8h+var_4EC] eax +
lea eax [ebp+var_4A0] +
mov [esp+4F8h+var_4F0] eax +
call ds:SetupDiEnumDeviceInterfaces  +
sub esp 14h +
test eax eax +
jz loc_456373  +
lea eax [ebp+var_4B8] +
mov ebx ds:SetupDiGetDeviceInterfaceDetailA +
mov [esp+4F8h+var_4E8] eax +
lea eax [ebp+var_474] +
mov [esp+4F8h+var_4E4] 0 +
mov [esp+4F8h+var_4EC] 0 +
mov [esp+4F8h+var_4F0] 0 +
mov [esp+4F8h+var_4F4] eax +
mov [esp+4F8h+var_4F8] edi +
call ebx  +
mov esi [ebp+var_4B8] +
sub esp 18h +
mov [esp+4F8h+var_4F8] esi +
call malloc  +
mov dword ptr [eax] 5 +
mov [ebp+var_4C4] eax +
mov [esp+4F8h+var_4F0] eax +
lea eax [ebp+var_474] +
mov [esp+4F8h+var_4E4] 0 +
mov [esp+4F8h+var_4E8] 0 +
mov [esp+4F8h+var_4EC] esi +
mov [esp+4F8h+var_4F4] eax +
mov [esp+4F8h+var_4F8] edi +
call ebx  +
sub esp 18h +
test eax eax +
jz loc_456340  +
xor ebx ebx +
jmp loc_4561D7  +
add ebx 1 +
mov edi [ebp+var_4BC] +
lea eax [ebp+var_490] +
mov [esp+4F8h+var_4F0] eax +
mov [esp+4F8h+var_4F4] ebx +
mov [esp+4F8h+var_4F8] edi +
call ds:SetupDiEnumDeviceInfo  +
sub esp 0Ch +
test eax eax +
jz loc_456340  +
lea eax [ebp+var_418] +
mov [esp+4F8h+var_4E8] eax +
lea eax [ebp+var_490] +
mov [esp+4F8h+var_4E0] 0 +
mov [esp+4F8h+var_4E4] 100h +
mov [esp+4F8h+var_4EC] 0 +
mov [esp+4F8h+var_4F0] 7 +
mov [esp+4F8h+var_4F4] eax +
mov [esp+4F8h+var_4F8] edi +
call ds:SetupDiGetDeviceRegistryPropertyA  +
sub esp 1Ch +
test eax eax +
jz loc_456340  +
mov edi offset aHidclass +
mov ecx 9 +
lea esi [ebp+var_418] +
cmps   +
jnz loc_4561D4  +
lea eax [ebp+var_418] +
mov [esp+4F8h+var_4E8] eax +
lea eax [ebp+var_490] +
mov [esp+4F8h+var_4F4] eax +
mov eax [ebp+var_4BC] +
mov [esp+4F8h+var_4E0] 0 +
mov [esp+4F8h+var_4E4] 100h +
mov [esp+4F8h+var_4EC] 0 +
mov [esp+4F8h+var_4F0] 9 +
mov [esp+4F8h+var_4F8] eax +
call ds:SetupDiGetDeviceRegistryPropertyA  +
sub esp 1Ch +
test eax eax +
jz loc_4561D4  +
mov eax [ebp+var_4C4] +
mov [esp+4F8h+var_4E0] 0 +
mov [esp+4F8h+var_4E4] 40000000h +
mov [esp+4F8h+var_4E8] 3 +
lea esi [eax+4] +
mov [esp+4F8h+var_4EC] 0 +
mov [esp+4F8h+var_4F0] 3 +
mov [esp+4F8h+var_4F4] 0 +
mov [esp+4F8h+var_4F8] esi +
call ds:CreateFileA  +
sub esp 1Ch +
cmp eax 0FFFFFFFFh +
mov ebx eax +
jz loc_456333  +
lea eax [ebp+var_4AC] +
mov [ebp+var_4AC] 0Ch +
mov [esp+4F8h+var_4F4] eax +
mov [esp+4F8h+var_4F8] ebx +
call ds:dword_4857EC  +
sub esp 8 +
cmp [ebp+var_4C6] 0 +
jz loc_456393  +
movzx eax [ebp+var_4C6] +
cmp [ebp+var_4A8] ax +
jz loc_456393  +
mov [esp+500h+var_500] ebx +
call ds:CloseHandle  +
sub esp 4 +
nop   +
mov eax [ebp+var_4C4] +
mov [esp+500h+var_500] eax +
call free  +
add [ebp+var_4C0] 1 +
jmp loc_456100  +
call sub_455E30  +
mov edx eax +
xor eax eax +
test edx edx +
jns loc_456089  +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebp+var_4BC] +
mov [esp+4F8h+var_4F8] eax +
call ds:SetupDiDestroyDeviceInfoList  +
mov eax [ebp+var_4CC] +
sub esp 4 +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
movzx eax [ebp+var_4C8] +
test ax ax +
jz loc_4563A8  +
cmp [ebp+var_4A6] ax +
jnz loc_456333  +
mov [esp+500h+var_4FC] 24h +
mov [esp+500h+var_500] 1 +
mov [ebp+var_4B4] 0 +
call calloc  +
mov edi eax +
mov eax [ebp+var_4D0] +
test eax eax +
jz loc_456607  +
mov [eax+20h] edi +
lea eax [ebp+var_4B4] +
mov [esp+500h+var_4FC] eax +
mov [esp+500h+var_500] ebx +
call ds:dword_4857D0  +
sub esp 8 +
test al al +
jnz loc_45659F  +
mov dword ptr [edi+20h] 0 +
mov ecx esi +
mov eax [ecx] +
add ecx 4 +
lea edx [eax-1010101h] +
not eax  +
and edx eax +
and edx 80808080h +
jz loc_456400  +
mov eax edx +
shr eax 10h +
test edx 8080h +
cmovz edx eax +
lea eax [ecx+2] +
cmovz ecx eax +
add dl dl +
sbb ecx 3 +
sub ecx esi +
lea eax [ecx+1] +
mov [esp+508h+var_504] 1 +
mov [esp+508h+var_508] eax +
mov [ebp+var_4D4] ecx +
mov [ebp+var_4D0] eax +
call calloc  +
mov edx eax +
mov [edi] eax +
mov eax [ebp+var_4D0] +
mov [esp+508h+var_504] esi +
xor esi esi +
mov [esp+508h+var_508] edx +
mov [ebp+var_4D0] edx +
mov [esp+508h+var_500] eax +
call strncpy  +
mov edx [ebp+var_4D0] +
lea eax [ebp+var_418] +
mov ecx [ebp+var_4D4] +
mov byte ptr [edx+ecx] 0 +
mov [esp+508h+var_500] 400h +
mov [esp+508h+var_504] eax +
mov [esp+508h+var_508] ebx +
call ds:dword_4857E8  +
mov [ebp+var_1A] si +
sub esp 0Ch +
test al al +
jnz loc_456588  +
lea eax [ebp+var_418] +
mov [esp+514h+var_50C] 400h +
mov [esp+514h+var_510] eax +
mov [esp+514h+var_514] ebx +
call ds:dword_4857E4  +
xor ecx ecx +
mov [ebp+var_1A] cx +
sub esp 0Ch +
test al al +
jnz loc_4565F0  +
lea eax [ebp+var_418] +
mov [esp+520h+var_518] 400h +
mov [esp+520h+var_51C] eax +
mov [esp+520h+var_520] ebx +
call ds:dword_4857E0  +
xor edx edx +
mov [ebp+var_1A] dx +
sub esp 0Ch +
test al al +
jnz loc_4565D9  +
movzx eax [ebp+var_4A8] +
mov dword ptr [edi+1Ch] 0FFFFFFFFh +
mov [edi+4] ax +
movzx eax [ebp+var_4A6] +
mov [edi+6] ax +
movzx eax [ebp+var_4A4] +
mov [edi+0Ch] ax +
mov eax [edi] +
test eax eax +
jz loc_45657D  +
mov [esp+52Ch+var_528] offset aMi_ +
mov [esp+52Ch+var_52C] eax +
call strstr  +
test eax eax +
jz loc_45657D  +
lea esi [eax+4] +
lea eax [ebp+var_4B0] +
mov [esp+52Ch+var_524] 10h +
mov [esp+52Ch+var_528] eax +
mov [esp+52Ch+var_52C] esi +
mov [ebp+var_4B0] 0 +
call strtol  +
cmp [ebp+var_4B0] esi +
mov [edi+1Ch] eax +
jz loc_456612  +
mov [ebp+var_4D0] edi +
jmp loc_456333  +
lea eax [ebp+var_418] +
mov [esp+514h+var_514] eax +
call ds:_wcsdup  +
mov [edi+8] eax +
jmp loc_4564AD  +
lea eax [ebp+var_458] +
mov [esp+508h+var_504] eax +
mov eax [ebp+var_4B4] +
mov [esp+508h+var_508] eax +
call ds:dword_4857C8  +
sub esp 8 +
cmp eax 110000h +
jz loc_45661E  +
mov eax [ebp+var_4B4] +
mov [esp+510h+var_510] eax +
call ds:dword_4857CC  +
sub esp 4 +
jmp loc_4563F7  +
lea eax [ebp+var_418] +
mov [esp+52Ch+var_52C] eax +
call ds:_wcsdup  +
mov [edi+14h] eax +
jmp loc_456505  +
lea eax [ebp+var_418] +
mov [esp+520h+var_520] eax +
call ds:_wcsdup  +
mov [edi+10h] eax +
jmp loc_4564D9  +
mov [ebp+var_4CC] edi +
jmp loc_4563D9  +
mov dword ptr [edi+1Ch] 0FFFFFFFFh +
jmp loc_45657D  +
movzx eax word ptr [ebp+var_458+2] +
mov [edi+18h] ax +
movzx eax word ptr [ebp+var_458] +
mov [edi+1Ah] ax +
jmp loc_4565C2  +
***
sub esp 14h +
mov ebx [esp+14h+arg_0] +
test ebx ebx +
jnz loc_456652  +
jmp loc_45668C  +
mov ebx esi +
mov eax [ebx] +
mov esi [ebx+20h] +
mov [esp+14h+var_14] eax +
call free  +
mov eax [ebx+8] +
mov [esp+14h+var_14] eax +
call free  +
mov eax [ebx+10h] +
mov [esp+14h+var_14] eax +
call free  +
mov eax [ebx+14h] +
mov [esp+14h+var_14] eax +
call free  +
mov [esp+14h+var_14] ebx +
call free  +
test esi esi +
jnz loc_456650  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
***
push ebx  +
sub esp 74h +
cmp ds:byte_4857BC 0 +
mov [ebp+var_4C] 0 +
jz loc_456820  +
mov [esp+78h+var_74] 34h +
mov [esp+78h+var_78] 1 +
call calloc  +
mov dword ptr [eax] 0FFFFFFFFh +
mov ebx eax +
mov dword ptr [eax+4] 1 +
xor eax eax +
mov [ebx+8] ax +
mov dword ptr [ebx+0Ch] 0 +
mov dword ptr [ebx+10h] 0 +
mov dword ptr [ebx+14h] 0 +
mov dword ptr [ebx+18h] 0 +
mov dword ptr [ebx+1Ch] 0 +
mov dword ptr [ebx+20h] 0 +
mov dword ptr [ebx+24h] 0 +
mov dword ptr [ebx+28h] 0 +
mov dword ptr [ebx+2Ch] 0 +
mov dword ptr [ebx+30h] 0 +
mov [esp+78h+var_6C] 0 +
mov [esp+78h+var_70] 0 +
mov [esp+78h+var_74] 0 +
mov [esp+78h+var_78] 0 +
call ds:CreateEventA  +
mov [ebx+30h] eax +
mov eax [ebp+arg_0] +
sub esp 10h +
mov [esp+78h+var_60] 0 +
mov [esp+78h+var_64] 40000000h +
mov [esp+78h+var_68] 3 +
mov [esp+78h+var_6C] 0 +
mov [esp+78h+var_70] 3 +
mov [esp+78h+var_74] 0C0000000h +
mov [esp+78h+var_78] eax +
call ds:CreateFileA  +
sub esp 1Ch +
cmp eax 0FFFFFFFFh +
mov [ebx] eax +
jz loc_456833  +
mov [esp+78h+var_74] 40h +
mov [esp+78h+var_78] eax +
call ds:dword_4857C4  +
sub esp 8 +
test al al +
jz loc_456833  +
mov eax [ebx] +
lea edx [ebp+var_4C] +
mov [esp+80h+var_7C] edx +
mov [esp+80h+var_80] eax +
call ds:dword_4857D0  +
sub esp 8 +
test al al +
jz loc_456833  +
lea eax [ebp+var_48] +
mov [esp+88h+var_84] eax +
mov eax [ebp+var_4C] +
mov [esp+88h+var_88] eax +
call ds:dword_4857C8  +
sub esp 8 +
cmp eax 110000h +
jnz loc_456850  +
movzx eax [ebp+var_42] +
mov [ebx+8] ax +
movzx eax [ebp+var_44] +
mov [ebx+0Ch] eax +
mov eax [ebp+var_4C] +
mov [esp+90h+var_90] eax +
call ds:dword_4857CC  +
mov eax [ebx+0Ch] +
sub esp 4 +
mov [esp+94h+var_94] eax +
call malloc  +
mov [ebx+1Ch] eax +
mov eax ebx +
mov ebx [ebp+var_4] +
leave   +
retn   +
call sub_455E30  +
mov edx eax +
xor eax eax +
test edx edx +
jns loc_4566BB  +
jmp loc_45681B  +
lea eax [ebx+10h] +
call sub_455D60  +
mov eax ebx +
call sub_455D10  +
xor eax eax +
mov ebx [ebp+var_4] +
leave   +
retn   +
lea eax [ebx+10h] +
call sub_455D60  +
mov eax [ebp+var_4C] +
mov [esp+90h+var_90] eax +
call ds:dword_4857CC  +
sub esp 4 +
jmp loc_45683B  +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov eax [esp+1Ch+arg_0] +
mov ecx [esp+1Ch+arg_4] +
mov esi eax +
movzx eax ax +
mov edi ecx +
movzx ecx cx +
mov [esp+1Ch+var_18] ecx +
mov [esp+1Ch+var_1C] eax +
call hid_enumerate  +
test eax eax +
mov ebp eax +
mov ebx eax +
jnz loc_4568A7  +
jmp loc_4568E4  +
mov ebx [ebx+20h] +
test ebx ebx +
jz loc_4568E4  +
cmp [ebx+4] si +
jnz loc_4568A0  +
cmp [ebx+6] di +
jnz loc_4568A0  +
mov eax [esp+1Ch+arg_8] +
test eax eax +
jz loc_4568D2  +
mov eax [ebx+8] +
mov [esp+1Ch+var_18] eax +
mov eax [esp+1Ch+arg_8] +
mov [esp+1Ch+var_1C] eax +
call wcscmp  +
test eax eax +
jnz loc_4568A0  +
mov eax [ebx] +
test eax eax +
jz loc_4568E4  +
mov [esp+1Ch+var_1C] eax +
call hid_open_path  +
mov ebx eax +
jmp loc_4568E6  +
xor ebx ebx +
mov [esp+1Ch+var_1C] ebp +
call hid_free_enumeration  +
add esp 1Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push edi  +
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov ebx [ebp+arg_0] +
mov esi [ebp+arg_C] +
mov [ebp+var_1C] 0 +
mov eax [ebx+18h] +
mov edi [ebx+30h] +
test eax eax +
jz loc_456AC7  +
test esi esi +
js loc_456A50  +
mov [esp+48h+var_44] esi +
mov [esp+48h+var_48] edi +
call ds:WaitForSingleObject  +
mov edx eax +
sub esp 8 +
xor eax eax +
test edx edx +
jnz loc_456ABF  +
mov eax [ebx] +
lea edx [ebp+var_1C] +
mov [esp+48h+var_40] edx +
lea edx [ebx+20h] +
mov [esp+48h+var_3C] 1 +
mov [esp+48h+var_44] edx +
mov [esp+48h+var_48] eax +
call ds:GetOverlappedResult  +
mov dword ptr [ebx+18h] 0 +
sub esp 10h +
test eax eax +
jz loc_456B50  +
mov edx [ebp+var_1C] +
xor eax eax +
test edx edx +
jz loc_456ABF  +
mov ecx [ebx+1Ch] +
cmp byte ptr [ecx] 0 +
jnz loc_456B65  +
sub edx 1 +
mov [ebp+var_1C] edx +
cmp [ebp+arg_8] edx +
cmovbe edx [ebp+arg_8] +
add ecx 1 +
mov ebx edx +
mov eax [ebp+arg_4] +
mov [esp+48h+var_40] ebx +
mov [esp+48h+var_44] ecx +
mov [esp+48h+var_48] eax +
call memcpy  +
mov eax ebx +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edx [ebx+0Ch] +
mov eax [ebx+1Ch] +
mov dword ptr [ebx+18h] 1 +
mov [esp+48h+var_44] 0 +
mov [esp+48h+var_40] edx +
mov [esp+48h+var_48] eax +
call memset  +
mov [esp+48h+var_48] edi +
call ds:ResetEvent  +
mov eax [ebx+1Ch] +
lea ecx [ebx+20h] +
mov edx [ebx+0Ch] +
sub esp 4 +
mov [esp+48h+var_38] ecx +
lea ecx [ebp+var_1C] +
mov [esp+48h+var_3C] ecx +
mov [esp+48h+var_40] edx +
mov [esp+48h+var_44] eax +
mov eax [ebx] +
mov [esp+48h+var_48] eax +
call ds:ReadFile  +
sub esp 14h +
test eax eax +
jnz loc_456A34  +
call ds:GetLastError  +
cmp eax 3E5h +
jz loc_456A34  +
mov eax [ebx] +
mov [esp+48h+var_48] eax +
call ds:CancelIo  +
mov dword ptr [ebx+18h] 0 +
sub esp 4 +
lea esi [esi+0] +
lea eax [ebx+10h] +
call sub_455D60  +
lea esp [ebp-0Ch] +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp [ebp+arg_8] edx +
cmovbe edx [ebp+arg_8] +
mov ebx edx +
jmp loc_456AAA  +
***
sub esp 1Ch +
xor eax eax +
mov edx [esp+1Ch+arg_0] +
mov ecx [edx+4] +
mov [esp+1Ch+var_1C] edx +
test ecx ecx +
setnz al  +
neg eax  +
mov [esp+1Ch+var_10] eax +
mov eax [esp+1Ch+arg_8] +
mov [esp+1Ch+var_14] eax +
mov eax [esp+1Ch+arg_4] +
mov [esp+1Ch+var_18] eax +
call hid_read_timeout  +
add esp 1Ch +
retn   +
***
mov eax [esp+arg_4] +
xor edx edx +
test eax eax +
mov eax [esp+arg_0] +
setz dl  +
mov [eax+4] edx +
xor eax eax +
retn   +
***
push esi  +
push ebx  +
sub esp 10h +
mov esi [ebp+arg_0] +
mov ebx [ebp+arg_8] +
mov edx [ebp+arg_4] +
mov eax [esi] +
mov [esp+18h+var_10] ebx +
mov [esp+18h+var_14] edx +
mov [esp+18h+var_18] eax +
call ds:dword_4857DC  +
sub esp 0Ch +
test al al +
jz loc_456C14  +
mov eax ebx +
lea esp [ebp-8] +
pop ebx  +
pop esi  +
pop ebp  +
retn   +
lea eax [esi+10h] +
call sub_455D60  +
mov eax 0FFFFFFFFh +
jmp loc_456C0D  +
***
push edi  +
push esi  +
push ebx  +
sub esp 4Ch +
mov ebx [ebp+arg_0] +
mov eax [ebp+arg_4] +
lea esi [ebp+var_2C] +
mov edx [ebp+arg_8] +
lea edi [ebp+var_30] +
mov [ebp+var_2C] 0 +
mov ecx [ebx] +
mov [ebp+var_28] 0 +
mov [ebp+var_24] 0 +
mov [ebp+var_20] 0 +
mov [ebp+var_1C] 0 +
mov [esp+58h+var_3C] esi +
mov [esp+58h+var_40] edi +
mov [esp+58h+var_44] edx +
mov [esp+58h+var_48] eax +
mov [esp+58h+var_4C] edx +
mov [esp+58h+var_50] eax +
mov [esp+58h+var_54] 0B0192h +
mov [esp+58h+var_58] ecx +
call ds:DeviceIoControl  +
sub esp 20h +
test eax eax +
jnz loc_456CAA  +
call ds:GetLastError  +
cmp eax 3E5h +
jnz loc_456CE0  +
mov eax [ebx] +
mov [esp+58h+var_4C] 1 +
mov [esp+58h+var_50] edi +
mov [esp+58h+var_54] esi +
mov [esp+58h+var_58] eax +
call ds:GetOverlappedResult  +
sub esp 10h +
test eax eax +
jz loc_456CE0  +
mov eax [ebp+var_30] +
add eax 1 +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
lea eax [ebx+10h] +
call sub_455D60  +
mov eax 0FFFFFFFFh +
jmp loc_456CD2  +
***
push ebx  +
sub esp 14h +
mov ebx [ebp+arg_0] +
test ebx ebx +
jz loc_456D17  +
mov eax [ebx] +
mov [esp+18h+var_18] eax +
call ds:CancelIo  +
mov eax ebx +
mov ebx [ebp+var_4] +
sub esp 4 +
leave   +
jmp sub_455D10  +
mov ebx [ebp+var_4] +
leave   +
retn   +
***
mov ebp esp +
mov ebp esp +
mov ebp esp +
mov ebp esp +
push ebx  +
sub esp 14h +
mov ecx [ebp+arg_C] +
mov ebx [ebp+arg_0] +
cmp ecx 0FFFh +
cmovbe edx ecx +
mov eax [ebx] +
add edx edx +
mov [esp+18h+var_C] edx +
mov edx [ebp+arg_8] +
mov [esp+18h+var_18] eax +
mov [esp+18h+var_10] edx +
mov edx [ebp+arg_4] +
mov [esp+18h+var_14] edx +
call ds:dword_4857D4  +
sub esp 10h +
test al al +
jz loc_456E58  +
xor eax eax +
mov ebx [ebp+var_4] +
leave   +
retn   +
lea eax [ebx+10h] +
call sub_455D60  +
mov eax 0FFFFFFFFh +
jmp loc_456E53  +
***
mov eax [esp+arg_0] +
mov eax [eax+10h] +
retn   +
***
sub esp 1Ch +
mov eax [esp+1Ch+arg_4] +
test eax eax +
jz loc_456EA0  +
cmp eax 3 +
jz loc_456EA0  +
mov eax 1 +
add esp 1Ch +
retn 0Ch  +
mov edx [esp+1Ch+arg_8] +
mov [esp+1Ch+var_18] eax +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_14] edx +
mov [esp+1Ch+var_1C] eax +
call sub_457BA0  +
mov eax 1 +
add esp 1Ch +
retn 0Ch  +
***
cmp dword_4616FC 2 +
mov eax [esp+18h+arg_4] +
jz loc_456EEB  +
mov dword_4616FC 2 +
cmp eax 2 +
jz loc_456F01  +
cmp eax 1 +
jz loc_456F30  +
add esp 18h +
mov eax 1 +
pop ebx  +
retn 0Ch  +
mov ebx offset unk_48E030 +
cmp ebx offset unk_48E030 +
jz loc_456EF5  +
nop   +
mov eax [ebx] +
test eax eax +
jz loc_456F18  +
call eax  +
add ebx 4 +
cmp ebx offset unk_48E030 +
jnz loc_456F10  +
add esp 18h +
mov eax 1 +
pop ebx  +
retn 0Ch  +
mov eax [esp+18h+arg_8] +
mov [esp+18h+var_14] 1 +
mov [esp+18h+var_10] eax +
mov eax [esp+18h+arg_0] +
mov [esp+18h+var_18] eax +
call sub_457BA0  +
jmp loc_456EF5  +
***
xor eax eax +
retn   +
***
mov eax ds:__lconv_init +
jmp eax  +
***
retn   +
***
retn   +
***
mov eax ds:dword_48A9A4 +
mov [esp+28h+var_28] eax +
call sub_456F70  +
cmp eax 0FFFFFFFFh +
mov [esp+28h+var_10] eax +
jz loc_457030  +
mov [esp+28h+var_28] 8 +
call _lock  +
mov eax ds:dword_48A9A4 +
mov [esp+28h+var_28] eax +
call sub_456F70  +
mov [esp+28h+var_10] eax +
mov eax ds:dword_48A9A0 +
mov [esp+28h+var_28] eax +
call sub_456F70  +
mov [esp+28h+var_C] eax +
lea eax [esp+28h+var_C] +
mov [esp+28h+var_20] eax +
lea eax [esp+28h+var_10] +
mov [esp+28h+var_24] eax +
mov eax [esp+28h+arg_0] +
mov [esp+28h+var_28] eax +
call __dllonexit  +
mov ebx eax +
mov eax [esp+28h+var_10] +
mov [esp+28h+var_28] eax +
call sub_456F80  +
mov ds:dword_48A9A4 eax +
mov eax [esp+28h+var_C] +
mov [esp+28h+var_28] eax +
call sub_456F80  +
mov [esp+28h+var_28] 8 +
mov ds:dword_48A9A0 eax +
call _unlock  +
add esp 28h +
mov eax ebx +
pop ebx  +
retn   +
mov eax [esp+28h+arg_0] +
mov [esp+28h+var_28] eax +
call ds:_onexit  +
add esp 28h +
pop ebx  +
retn   +
***
sub esp 1Ch +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_1C] eax +
call sub_456F90  +
test eax eax +
setz al  +
add esp 1Ch +
movzx eax al +
neg eax  +
retn   +
***
push esi  +
push ebx  +
sub esp 10h +
mov ebx [ebp+arg_0] +
mov eax [ebx] +
mov eax [eax] +
cmp eax 0C0000091h +
ja loc_4570C8  +
cmp eax 0C000008Dh +
jnb loc_457130  +
cmp eax 0C0000005h +
jnz loc_457137  +
mov [esp+18h+var_14] 0 +
mov [esp+18h+var_18] 0Bh +
call signal  +
cmp eax 1 +
jz loc_457166  +
test eax eax +
jz loc_4570DD  +
mov [esp+18h+var_18] 0Bh +
call eax  +
jmp loc_45711D  +
cmp eax 0C0000094h +
jz loc_4570F1  +
cmp eax 0C0000096h +
jz loc_45713E  +
cmp eax 0C0000093h +
jz loc_457130  +
mov eax ds:dword_485814 +
test eax eax +
jz loc_457122  +
mov [ebp+arg_0] ebx +
lea esp [ebp-8] +
pop ebx  +
pop esi  +
pop ebp  +
jmp eax  +
xor esi esi +
mov [esp+18h+var_14] 0 +
mov [esp+18h+var_18] 8 +
call signal  +
cmp eax 1 +
jz loc_457196  +
test eax eax +
jz loc_4570DD  +
mov [esp+18h+var_18] 8 +
call eax  +
mov eax 0FFFFFFFFh +
lea esp [ebp-8] +
pop ebx  +
pop esi  +
pop ebp  +
retn 4  +
mov esi 1 +
jmp loc_4570F3  +
cmp eax 0C000001Dh +
jnz loc_4570DD  +
mov [esp+18h+var_14] 0 +
mov [esp+18h+var_18] 4 +
call signal  +
cmp eax 1 +
jz loc_457180  +
test eax eax +
jz loc_4570DD  +
mov [esp+18h+var_18] 4 +
call eax  +
jmp loc_45711D  +
mov [esp+18h+var_14] 1 +
mov [esp+18h+var_18] 0Bh +
call signal  +
jmp loc_45711D  +
mov [esp+18h+var_14] 1 +
mov [esp+18h+var_18] 4 +
call signal  +
jmp loc_45711D  +
mov [esp+18h+var_14] 1 +
mov [esp+18h+var_18] 8 +
call signal  +
test esi esi +
jz loc_45711D  +
call sub_457800  +
jmp loc_45711D  +
***
retn   +
***
sub esp 3Ch +
mov eax ds:dword_485818 +
fld  [esp+3Ch+arg_8] +
fld  [esp+3Ch+arg_10] +
fld  [esp+3Ch+arg_18] +
test eax eax +
jz loc_457211  +
fxch  st(2) +
mov edx [esp+3Ch+arg_0] +
fstp  [esp+3Ch+var_24] +
fstp  [esp+3Ch+var_1C] +
fstp  [esp+3Ch+var_14] +
mov [esp+3Ch+var_2C] edx +
mov edx [esp+3Ch+arg_4] +
mov [esp+3Ch+var_28] edx +
lea edx [esp+3Ch+var_2C] +
mov [esp+3Ch+var_3C] edx +
call eax  +
jmp loc_457217  +
fstp  st +
fstp  st +
fstp  st +
add esp 3Ch +
retn   +
***
mov eax [esp+arg_0] +
mov ds:dword_485818 eax +
jmp loc_45E378  +
***
sub esp 3Ch +
mov eax [esp+3Ch+arg_0] +
mov edx [eax] +
lea ecx [edx-1] +
mov edx offset aUnknownError_0 +
cmp ecx 5 +
ja loc_45724D  +
mov edx ds:off_482900[ecx*4] +
fld  qword ptr [eax+18h] +
fld  qword ptr [eax+10h] +
fld  qword ptr [eax+8] +
fxch  st(2) +
mov eax [eax+4] +
fstp  [esp+3Ch+var_1C] +
fstp  [esp+3Ch+var_24] +
fstp  [esp+3Ch+var_2C] +
mov [esp+3Ch+var_34] edx +
mov [esp+3Ch+var_30] eax +
mov eax ds:_iob +
mov [esp+3Ch+var_38] offset a_matherrSInSGG +
add eax 40h +
mov [esp+3Ch+var_3C] eax +
call fprintf  +
xor eax eax +
add esp 3Ch +
retn   +
***
mov eax ds:_iob +
mov [esp+18h+var_10] 1Bh +
lea ebx [esp+18h+arg_4] +
mov [esp+18h+var_14] 1 +
mov [esp+18h+var_18] offset aMingwW64Runtim +
add eax 40h +
mov [esp+18h+var_C] eax +
call fwrite  +
mov eax [esp+18h+arg_0] +
mov [esp+18h+var_10] ebx +
mov [esp+18h+var_14] eax +
mov eax ds:_iob +
add eax 40h +
mov [esp+18h+var_18] eax +
call vfprintf  +
call abort  +
jmp sub_4572F0  +
***
push edi  +
mov eax ds:dword_48581C +
retn   +
***
mov eax [eax] +
test eax eax +
jz locret_45783A  +
sub esp 0Ch +
nop   +
call eax  +
mov eax off_4616F8 +
lea edx [eax+4] +
mov eax [eax+4] +
mov off_4616F8 edx +
test eax eax +
jnz loc_457820  +
add esp 0Ch +
retn   +
***
mov ebx ds:dword_460820 +
cmp ebx 0FFFFFFFFh +
jz loc_457873  +
test ebx ebx +
jz loc_457862  +
call ds:dword_460820[ebx*4]  +
sub ebx 1 +
lea esi [esi+0] +
jnz loc_457853  +
mov [esp+18h+var_18] offset byte_457810 +
call sub_457050  +
add esp 18h +
pop ebx  +
retn   +
xor ebx ebx +
jmp loc_457879  +
mov ebx eax +
lea eax [ebx+1] +
mov edx ds:dword_460820[eax*4] +
test edx edx +
jnz loc_457877  +
jmp loc_45784F  +
***
mov eax ds:dword_485828 +
test eax eax +
jz loc_4578A0  +
retn   +
mov ds:dword_485828 1 +
jmp sub_457840  +
***
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov eax dword_461748 +
mov [ebp+var_28] 0 +
mov [ebp+var_24] 0 +
cmp eax 0BB40E64Eh +
jz loc_4578E2  +
not eax  +
mov dword_46174C eax +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
lea eax [ebp+var_28] +
mov [esp+38h+var_38] eax +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+var_28] +
mov edi [ebp+var_24] +
xor esi edi +
sub esp 4 +
call ds:GetCurrentProcessId  +
mov ebx eax +
call ds:GetCurrentThreadId  +
mov [ebp+var_2C] eax +
call ds:GetTickCount  +
mov [ebp+var_30] eax +
lea eax [ebp+var_20] +
mov [esp+38h+var_38] eax +
call ds:QueryPerformanceCounter  +
xor esi [ebp+var_20] +
xor esi [ebp+var_1C] +
xor esi ebx +
xor esi [ebp+var_2C] +
sub esp 4 +
xor esi [ebp+var_30] +
cmp esi 0BB40E64Eh +
jz loc_457950  +
mov eax esi +
not eax  +
mov dword_461748 esi +
mov dword_46174C eax +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax 44BF19B0h +
mov esi 0BB40E64Fh +
jmp loc_45793C  +
***
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov [esp+28h+var_28] offset unk_485B88 +
call ds:EnterCriticalSection  +
mov edi ds:dword_485B80 +
mov esi ds:GetLastError +
sub esp 4 +
test edi edi +
jz loc_457A49  +
lea esi [esi+0] +
mov eax [edi] +
mov [esp+28h+var_28] eax +
call ds:TlsGetValue  +
sub esp 4 +
mov ebx eax +
call esi  +
test eax eax +
jnz loc_457A42  +
test ebx ebx +
jz loc_457A42  +
mov eax [edi+4] +
mov [esp+28h+var_28] ebx +
call eax  +
mov edi [edi+8] +
test edi edi +
jnz loc_457A20  +
mov [esp+28h+var_28] offset unk_485B88 +
call ds:LeaveCriticalSection  +
sub esp 4 +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
jmp loc_457A70  +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
push ebx  +
sub esp 10h +
mov eax ds:dword_485B84 +
test eax eax +
jnz loc_457A90  +
lea esp [ebp-8] +
mov eax esi +
pop ebx  +
pop esi  +
pop ebp  +
retn   +
***
mov dword ptr [esp+4] 0Ch +
mov dword ptr [esp] 1 +
call calloc  +
test eax eax +
mov ebx eax +
jz loc_457AEC  +
mov eax [ebp+8] +
mov dword ptr [esp] offset unk_485B88 +
mov [ebx] eax +
mov eax [ebp+0Ch] +
mov [ebx+4] eax +
call ds:EnterCriticalSection  +
mov eax ds:dword_485B80 +
mov ds:dword_485B80 ebx +
mov [ebx+8] eax +
sub esp 4 +
mov dword ptr [esp] offset unk_485B88 +
call ds:LeaveCriticalSection  +
mov eax esi +
sub esp 4 +
lea esp [ebp-8] +
pop ebx  +
pop esi  +
pop ebp  +
retn   +
***
mov esi 0FFFFFFFFh +
jmp loc_457A83  +
***
push ebp  +
mov ebp esp +
push ebx  +
sub esp 14h +
mov eax ds:dword_485B84 +
mov ebx [ebp+8] +
test eax eax +
jnz loc_457B20  +
xor eax eax +
mov ebx [ebp-4] +
leave   +
retn   +
***
mov dword ptr [esp] offset unk_485B88 +
call ds:EnterCriticalSection  +
mov edx ds:dword_485B80 +
sub esp 4 +
test edx edx +
jz loc_457B51  +
mov eax [edx] +
cmp eax ebx +
jnz loc_457B4A  +
jmp loc_457B88  +
mov ecx [eax] +
cmp ecx ebx +
jz loc_457B68  +
mov edx eax +
mov eax [edx+8] +
test eax eax +
jnz loc_457B42  +
mov dword ptr [esp] offset unk_485B88 +
call ds:LeaveCriticalSection  +
sub esp 4 +
xor eax eax +
mov ebx [ebp-4] +
leave   +
retn   +
***
mov ecx [eax+8] +
mov [edx+8] ecx +
mov [esp] eax +
call free  +
mov dword ptr [esp] offset unk_485B88 +
call ds:LeaveCriticalSection  +
sub esp 4 +
jmp loc_457B61  +
***
mov eax [edx+8] +
mov ds:dword_485B80 eax +
mov eax edx +
jmp loc_457B6E  +
***
sub esp 18h +
mov eax [ebp+arg_4] +
cmp eax 1 +
jz loc_457BF4  +
jb loc_457BC5  +
cmp eax 3 +
jnz loc_457BBE  +
mov eax ds:dword_485B84 +
test eax eax +
jnz loc_457C22  +
mov eax 1 +
leave   +
retn   +
mov eax ds:dword_485B84 +
test eax eax +
jnz loc_457C30  +
mov eax ds:dword_485B84 +
cmp eax 1 +
jnz loc_457BBE  +
mov ds:dword_485B84 0 +
mov [esp+18h+var_18] offset unk_485B88 +
call ds:DeleteCriticalSection  +
sub esp 4 +
jmp loc_457BBE  +
mov eax ds:dword_485B84 +
test eax eax +
jz loc_457C10  +
mov ds:dword_485B84 1 +
mov eax 1 +
leave   +
retn   +
mov [esp+18h+var_18] offset unk_485B88 +
call ds:InitializeCriticalSection  +
sub esp 4 +
jmp loc_457BFD  +
call sub_4579F0  +
jmp loc_457BBE  +
call sub_4579F0  +
jmp loc_457BCE  +
***
add eax [eax+3Ch] +
cmp dword ptr [eax] 4550h +
jz loc_457C50  +
xor eax eax +
retn   +
cmp word ptr [eax+18h] 10Bh +
setz al  +
movzx eax al +
retn   +
***
mov eax [esp+4] +
cmp word ptr [eax] 5A4Dh +
jz loc_457C70  +
xor eax eax +
retn   +
***
jmp sub_457C40  +
***
mov edx [esp+arg_0] +
mov ebx [esp+arg_4] +
add edx [edx+3Ch] +
movzx esi word ptr [edx+6] +
movzx eax word ptr [edx+14h] +
test esi esi +
lea eax [edx+eax+18h] +
jz loc_457CB8  +
xor edx edx +
nop   +
mov ecx [eax+0Ch] +
cmp ecx ebx +
ja loc_457CAE  +
add ecx [eax+8] +
cmp ebx ecx +
jb loc_457CBA  +
add edx 1 +
add eax 28h +
cmp edx esi +
jb loc_457CA0  +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
push ebp  +
push edi  +
push esi  +
xor esi esi +
push ebx  +
sub esp 1Ch +
mov edi [esp+30h] +
mov [esp] edi +
call strlen  +
cmp eax 8 +
ja loc_457CE5  +
cmp word ptr ds:400000h 5A4Dh +
jz loc_457CF0  +
add esp 1Ch +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax 400000h +
call sub_457C40  +
test eax eax +
jz loc_457CE5  +
mov eax ds:40003Ch +
lea edx [eax+400000h] +
movzx eax word ptr [eax+400014h] +
movzx ebp word ptr [edx+6] +
lea ebx [edx+eax+18h] +
test ebp ebp +
jnz loc_457D2A  +
jmp loc_457CE5  +
***
add esi 1 +
add ebx 28h +
cmp esi ebp +
jnb loc_457D50  +
mov dword ptr [esp+8] 8 +
mov [esp+4] edi +
mov [esp] ebx +
call strncmp  +
test eax eax +
jnz loc_457D20  +
add esp 1Ch +
mov esi ebx +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
add esp 1Ch +
xor esi esi +
pop ebx  +
mov eax esi +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
sub esp 8 +
cmp word ptr ds:400000h 5A4Dh +
jz loc_457D78  +
add esp 8 +
mov eax ebx +
pop ebx  +
retn   +
mov eax 400000h +
call sub_457C40  +
test eax eax +
jz loc_457D71  +
mov eax [esp+8+arg_0] +
mov [esp+8+var_8] 400000h +
sub eax 400000h +
mov [esp+8+var_4] eax +
call sub_457C80  +
add esp 8 +
mov ebx eax +
mov eax ebx +
pop ebx  +
retn   +
***
cmp word ptr ds:400000h 5A4Dh +
jz loc_457DC2  +
mov eax ebx +
pop ebx  +
retn   +
mov eax 400000h +
call sub_457C40  +
test eax eax +
jz loc_457DBE  +
mov eax ds:40003Ch +
movzx ebx word ptr [eax+400006h] +
mov eax ebx +
pop ebx  +
retn   +
***
push esi  +
xor esi esi +
cmp word ptr ds:400000h 5A4Dh +
push ebx  +
mov ebx [esp+0Ch] +
jz loc_457DF8  +
mov eax esi +
pop ebx  +
pop esi  +
retn   +
***
mov eax 400000h +
call sub_457C40  +
test eax eax +
jz loc_457DF3  +
mov eax ds:40003Ch +
lea ecx [eax+400000h] +
movzx eax word ptr [eax+400014h] +
lea edx [ecx+eax+18h] +
movzx ecx word ptr [ecx+6] +
test ecx ecx +
jz loc_457DF3  +
xor eax eax +
test byte ptr [edx+27h] 20h +
jz loc_457E33  +
test ebx ebx +
jz loc_457E44  +
sub ebx 1 +
add eax 1 +
add edx 28h +
cmp eax ecx +
jb loc_457E26  +
xor esi esi +
mov eax esi +
pop ebx  +
pop esi  +
retn   +
***
mov esi edx +
mov eax esi +
pop ebx  +
pop esi  +
retn   +
***
cmp word ptr ds:400000h 5A4Dh +
jz loc_457E60  +
xor eax eax +
retn   +
mov eax 400000h +
call sub_457C40  +
test eax eax +
jz loc_457E5B  +
mov eax 400000h +
retn   +
***
xor eax eax +
cmp word ptr ds:400000h 5A4Dh +
jz loc_457E90  +
retn   +
***
sub esp 8 +
mov eax 400000h +
call sub_457C40  +
test eax eax +
jz loc_457EC6  +
mov eax [esp+0Ch] +
mov dword ptr [esp] 400000h +
sub eax 400000h +
mov [esp+4] eax +
call sub_457C80  +
test eax eax +
jz loc_457ED0  +
mov eax [eax+24h] +
not eax  +
shr eax 1Fh +
add esp 8 +
retn   +
***
xor eax eax +
jmp loc_457EC6  +
***
push edi  +
xor edi edi +
push esi  +
push ebx  +
sub esp 8 +
cmp word ptr ds:400000h 5A4Dh +
mov ebx [esp+18h] +
jz loc_457F00  +
add esp 8 +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
mov eax 400000h +
call sub_457C40  +
test eax eax +
jz loc_457EF7  +
mov eax ds:40003Ch +
mov esi [eax+400080h] +
test esi esi +
jz loc_457EF7  +
mov [esp+4] esi +
mov dword ptr [esp] 400000h +
call sub_457C80  +
test eax eax +
jz loc_457EF7  +
add esi 400000h +
mov edx esi +
jnz loc_457F46  +
jmp loc_457EF7  +
***
sub ebx 1 +
add edx 14h +
mov ecx [edx+4] +
test ecx ecx +
jnz loc_457F54  +
mov eax [edx+0Ch] +
test eax eax +
jz loc_457F70  +
test ebx ebx +
jg loc_457F40  +
mov edi [edx+0Ch] +
add esp 8 +
pop ebx  +
pop esi  +
add edi 400000h +
mov eax edi +
pop edi  +
retn   +
***
add esp 8 +
xor edi edi +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
cmp eax 1000h +
lea ecx [esp+arg_0] +
jb loc_457FA2  +
sub ecx 1000h +
or dword ptr [ecx] 0 +
sub eax 1000h +
cmp eax 1000h +
ja loc_457F8D  +
sub ecx eax +
or dword ptr [ecx] 0 +
pop eax  +
pop ecx  +
retn   +
***
push esi  +
push ebx  +
sub esp 18h +
mov ebx [esp+18h+arg_4] +
mov esi [esp+18h+arg_C] +
mov ebp [esp+18h+arg_8] +
mov eax [esp+18h+arg_0] +
test ebx ebx +
mov edx ebx +
mov edi esi +
mov [esp+18h+var_18] 0 +
js loc_458060  +
test edi edi +
mov ecx ebp +
mov ebx esi +
js loc_45807A  +
mov esi edx +
mov edx ebx +
test edx edx +
mov ebp eax +
mov edi ecx +
mov ebx eax +
jnz loc_458002  +
cmp ecx esi +
jbe loc_458024  +
mov edx esi +
xor esi esi +
div  ecx +
mov ebx eax +
jmp loc_45800A  +
cmp edx esi +
jbe loc_458043  +
xor esi esi +
xor ebx ebx +
mov ecx [esp+18h+var_18] +
mov eax ebx +
mov edx esi +
test ecx ecx +
jz loc_45801C  +
neg eax  +
adc edx 0 +
neg edx  +
add esp 18h +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test ecx ecx +
jnz loc_458033  +
mov eax 1 +
xor edx edx +
div  ecx +
mov ecx eax +
mov eax esi +
xor edx edx +
div  ecx +
mov esi eax +
mov eax ebx +
div  ecx +
mov ebx eax +
jmp loc_45800A  +
bsr ebx edx +
xor ebx 1Fh +
jnz loc_458090  +
cmp ecx eax +
jbe loc_458053  +
cmp edx esi +
jnb loc_458006  +
xor esi esi +
mov ebx 1 +
jmp loc_45800A  +
neg eax  +
mov ecx ebp +
adc edx 0 +
mov ebx esi +
neg edx  +
test edi edi +
mov [esp+18h+var_18] 0FFFFFFFFh +
jns loc_457FE6  +
neg ecx  +
adc ebx 0 +
not [esp+18h+var_18]  +
neg ebx  +
jmp loc_457FE6  +
mov ecx ebx +
mov eax 20h +
sub eax ebx +
shl edx cl +
mov ecx eax +
mov [esp+18h+var_10] edx +
mov edx edi +
shr edx cl +
mov ecx ebx +
mov [esp+18h+var_14] edx +
mov edx [esp+18h+var_10] +
shl edi cl +
or [esp+18h+var_14] edx +
mov ecx eax +
mov edx esi +
shr edx cl +
mov ecx ebx +
shl esi cl +
mov ecx eax +
mov [esp+18h+var_10] edx +
mov edx ebp +
shr edx cl +
mov eax edx +
or eax esi +
mov esi [esp+18h+var_10] +
mov edx esi +
div  [esp+18h+var_14] +
mov esi edx +
mov [esp+18h+var_14] eax +
mul  edi +
cmp esi edx +
jb loc_458100  +
mov ecx ebx +
shl ebp cl +
cmp ebp eax +
jnb loc_4580EF  +
cmp esi edx +
jz loc_458100  +
mov ebx [esp+18h+var_14] +
xor esi esi +
jmp loc_45800A  +
mov ebx [esp+18h+var_14] +
xor esi esi +
sub ebx 1 +
jmp loc_45800A  +
***
push esi  +
push ebx  +
sub esp 14h +
mov esi [esp+14h+arg_C] +
mov edi [esp+14h+arg_0] +
mov ebp [esp+14h+arg_4] +
mov ecx [esp+14h+arg_8] +
test esi esi +
mov [esp+14h+var_14] edi +
mov eax ebp +
mov edx ecx +
jnz loc_458160  +
cmp ecx ebp +
ja loc_458192  +
test ecx ecx +
mov ebx ecx +
jnz loc_458147  +
mov eax 1 +
xor edx edx +
div  ecx +
mov ebx eax +
mov eax ebp +
xor edx edx +
div  ebx +
mov ebp eax +
mov eax edi +
div  ebx +
mov edx ebp +
add esp 14h +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp esi ebp +
ja loc_458186  +
bsr ebx esi +
xor ebx 1Fh +
jnz loc_4581A2  +
cmp ecx [esp+14h+var_14] +
mov edx 0 +
jbe loc_458200  +
cmp esi ebp +
jb loc_458200  +
xor eax eax +
jmp loc_458155  +
add esp 14h +
xor edx edx +
pop ebx  +
xor eax eax +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add esp 14h +
mov eax edi +
pop ebx  +
mov edx ebp +
pop esi  +
div  ecx +
pop edi  +
xor edx edx +
pop ebp  +
retn   +
mov edi 20h +
mov ecx ebx +
sub edi ebx +
mov ebp edx +
shl esi cl +
mov ecx edi +
shr ebp cl +
mov ecx ebx +
shl edx cl +
or ebp esi +
mov [esp+14h+var_10] edx +
mov edx [esp+14h+var_14] +
mov ecx edi +
mov esi eax +
shr esi cl +
mov ecx ebx +
shl eax cl +
mov ecx edi +
shr edx cl +
mov edi edx +
mov edx esi +
or edi eax +
mov eax edi +
div  ebp +
mov esi edx +
mov edi eax +
mul  [esp+14h+var_10] +
cmp esi edx +
jb loc_458210  +
mov ebp [esp+14h+var_14] +
mov ecx ebx +
shl ebp cl +
cmp ebp eax +
jnb loc_4581F3  +
cmp esi edx +
jz loc_458210  +
mov eax edi +
xor edx edx +
jmp loc_458155  +
mov eax 1 +
jmp loc_458155  +
add esp 14h +
xor edx edx +
pop ebx  +
lea eax [edi-1] +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push esi  +
mov edi eax +
push esi  +
mov eax edx +
push ebx  +
sub eax edi +
sub esp 14h +
mov ebx ecx +
mov [esp+1Ch+var_18] edx +
sub ecx edx +
cdq   +
mov [esp+1Ch+var_10] eax +
mov ebp ecx +
mov esi [esp+1Ch+arg_0] +
idiv  ecx +
mov [esp+1Ch+var_14] ecx +
test edx edx +
mov ecx edx +
jz loc_45840F  +
mov eax ebp +
jmp loc_4583A4  +
mov eax ecx +
mov ecx edx +
cdq   +
idiv  ecx +
test edx edx +
jnz loc_4583A0  +
mov eax ebx +
sub eax edi +
cdq   +
idiv  ecx +
mov [esp+1Ch+var_1C] eax +
mov eax [esp+1Ch+var_18] +
mov ebp eax +
add eax ecx +
test ecx ecx +
mov [esp+1Ch+var_C] eax +
jle loc_458407  +
mov edx [esp+1Ch+var_1C] +
mov eax ebp +
test edx edx +
jle loc_4583FE  +
mov edi [esi+ebp*4] +
xor edx edx +
jmp loc_4583D7  +
mov edi ebx +
mov ebx [esp+1Ch+var_14] +
mov ecx eax +
sub ecx [esp+1Ch+var_10] +
add ebx eax +
cmp [esp+1Ch+var_18] eax +
mov eax ecx +
cmovg eax ebx +
add edx 1 +
lea ecx [esi+eax*4] +
mov ebx [ecx] +
cmp edx [esp+1Ch+var_1C] +
mov [ecx] edi +
mov [esi+ebp*4] ebx +
jnz loc_4583D5  +
add ebp 1 +
cmp ebp [esp+1Ch+var_C] +
jnz loc_4583C5  +
add esp 14h +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ecx [esp+1Ch+var_14] +
jmp loc_4583AB  +
***
mov eax ds:__argv +
mov ebx [esp+18h+arg_0] +
mov eax [eax] +
mov eax [eax] +
mov [esp+18h+var_14] offset aS_1 +
mov [esp+18h+var_10] eax +
mov eax ds:_iob +
add eax 40h +
mov [esp+18h+var_18] eax +
call fprintf  +
test ebx ebx +
jz loc_45846D  +
lea eax [esp+18h+arg_4] +
mov [esp+18h+var_10] eax +
mov eax ds:_iob +
mov [esp+18h+var_14] ebx +
add eax 40h +
mov [esp+18h+var_18] eax +
call vfprintf  +
mov eax ds:_iob +
mov [esp+18h+var_18] 0Ah +
add eax 40h +
mov [esp+18h+var_14] eax +
call fputc  +
add esp 18h +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 4Ch +
mov [esp+4Ch+var_10] eax +
mov eax off_461710 +
mov [esp+4Ch+var_28] ecx +
mov ecx dword_461718 +
mov [esp+4Ch+var_1C] edx +
mov [esp+4Ch+var_48] 3Dh +
mov [esp+4Ch+var_4C] eax +
mov ebx eax +
lea edx [ecx+1] +
mov [esp+4Ch+var_30] eax +
mov [esp+4Ch+var_18] ecx +
mov [esp+4Ch+var_14] edx +
mov dword_461718 edx +
call strchr  +
test eax eax +
mov esi eax +
mov [esp+4Ch+var_20] eax +
jz loc_4586B4  +
add [esp+4Ch+var_20] 1 +
sub esi ebx +
mov eax [esp+4Ch+var_28] +
mov edi [eax] +
test edi edi +
jz loc_4586C7  +
lea ebp [eax+10h] +
xor ebx ebx +
mov [esp+4Ch+var_34] eax +
mov eax ebp +
mov ebp edi +
mov [esp+4Ch+var_2C] 0FFFFFFFFh +
mov edi eax +
mov [esp+4Ch+var_24] 0 +
jmp loc_458551  +
shl eax 4 +
mov ecx [esp+4Ch+var_34] +
add eax [esp+4Ch+var_28] +
mov edx [eax+4] +
cmp [ecx+4] edx +
jz loc_4585E0  +
mov [esp+4Ch+var_24] 1 +
nop   +
mov [esp+4Ch+var_34] edi +
add edi 10h +
mov ebp [edi-10h] +
add ebx 1 +
test ebp ebp +
jz loc_458595  +
mov eax [esp+4Ch+var_30] +
mov [esp+4Ch+var_44] esi +
mov [esp+4Ch+var_48] ebp +
mov [esp+4Ch+var_4C] eax +
call strncmp  +
test eax eax +
jnz loc_458540  +
mov [esp+4Ch+var_4C] ebp +
call strlen  +
cmp eax esi +
jz loc_458612  +
cmp esi 1 +
jnz loc_458586  +
mov eax [esp+4Ch+arg_4] +
test eax eax +
jnz loc_458540  +
mov eax [esp+4Ch+var_2C] +
cmp eax 0FFFFFFFFh +
jnz loc_458520  +
mov [esp+4Ch+var_2C] ebx +
jmp loc_458540  +
mov eax [esp+4Ch+var_24] +
test eax eax +
jz loc_458605  +
mov eax dword_46171C +
test eax eax +
jz loc_4585C7  +
mov eax [esp+4Ch+var_1C] +
cmp byte ptr [eax] 3Ah +
jz loc_4585C7  +
mov eax [esp+4Ch+var_30] +
mov [esp+4Ch+var_48] esi +
mov [esp+4Ch+var_4C] offset aAmbiguousOptio +
mov [esp+4Ch+var_44] eax +
call sub_458420  +
mov dword_461714 0 +
mov eax 3Fh +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edx [eax+8] +
cmp [ecx+8] edx +
jnz loc_458537  +
mov eax [eax+0Ch] +
cmp [ecx+0Ch] eax +
mov eax 1 +
cmovz eax [esp+4Ch+var_24] +
mov [esp+4Ch+var_24] eax +
jmp loc_458540  +
mov ebx [esp+4Ch+var_2C] +
cmp ebx 0FFFFFFFFh +
jz loc_4586C7  +
mov edi ebx +
shl edi 4 +
add edi [esp+4Ch+var_28] +
mov eax [edi+4] +
test eax eax +
jz loc_458656  +
lea edx [eax-1] +
cmp edx 1 +
jbe loc_458707  +
mov eax [esp+4Ch+arg_0] +
test eax eax +
jz loc_45863C  +
mov eax [esp+4Ch+arg_0] +
mov [eax] ebx +
mov eax [edi+8] +
test eax eax +
jz loc_45871A  +
mov edx [edi+0Ch] +
mov [eax] edx +
add esp 4Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+4Ch+var_20] +
test eax eax +
jz loc_45862E  +
mov eax dword_46171C +
test eax eax +
jz loc_458688  +
mov eax [esp+4Ch+var_1C] +
cmp byte ptr [eax] 3Ah +
jz loc_458688  +
mov eax [esp+4Ch+var_30] +
mov [esp+4Ch+var_48] esi +
mov [esp+4Ch+var_4C] offset aOptionDoesnTTa +
mov [esp+4Ch+var_44] eax +
call sub_458420  +
mov ebp [edi+8] +
test ebp ebp +
jz loc_458722  +
mov dword_461714 0 +
mov eax [esp+4Ch+var_1C] +
cmp byte ptr [eax] 3Ah +
jnz loc_4585D1  +
mov eax 3Ah +
jmp loc_4585D6  +
mov eax [esp+4Ch+var_30] +
mov [esp+4Ch+var_4C] eax +
call strlen  +
mov esi eax +
jmp loc_4584EA  +
mov ecx [esp+4Ch+arg_4] +
test ecx ecx +
jnz loc_4587AD  +
mov edx dword_46171C +
test edx edx +
jz loc_4585C7  +
mov eax [esp+4Ch+var_1C] +
cmp byte ptr [eax] 3Ah +
jz loc_4585C7  +
mov eax [esp+4Ch+var_30] +
mov [esp+4Ch+var_4C] offset aUnknownOptionS +
mov [esp+4Ch+var_48] eax +
call sub_458420  +
jmp loc_4585C7  +
mov ecx [esp+4Ch+var_20] +
test ecx ecx +
jz loc_45872F  +
mov ds:dword_48A9C0 ecx +
jmp loc_45862E  +
mov eax [edi+0Ch] +
jmp loc_4585D6  +
mov eax [edi+0Ch] +
mov dword_461714 eax +
jmp loc_45869D  +
cmp eax 1 +
jnz loc_45862E  +
mov eax [esp+4Ch+var_18] +
mov ecx [esp+4Ch+var_14] +
add eax 2 +
mov dword_461718 eax +
mov eax [esp+4Ch+var_10] +
mov eax [eax+ecx*4] +
test eax eax +
mov ds:dword_48A9C0 eax +
jnz loc_45862E  +
mov esi dword_46171C +
test esi esi +
jz loc_458783  +
mov eax [esp+4Ch+var_1C] +
cmp byte ptr [eax] 3Ah +
jz loc_458783  +
mov eax [esp+4Ch+var_30] +
mov [esp+4Ch+var_4C] offset aOptionRequires +
mov [esp+4Ch+var_48] eax +
call sub_458420  +
mov ebx [edi+8] +
test ebx ebx +
jz loc_4587C0  +
mov dword_461714 0 +
mov eax [esp+4Ch+var_1C] +
sub dword_461718 1 +
cmp byte ptr [eax] 3Ah +
jnz loc_4585D1  +
jmp loc_4586AA  +
mov eax [esp+4Ch+var_18] +
mov dword_461718 eax +
mov eax 0FFFFFFFFh +
jmp loc_4585D6  +
mov eax [edi+0Ch] +
mov dword_461714 eax +
jmp loc_458794  +
***
push esi  +
push ebx  +
sub esp 2Ch +
test ecx ecx +
mov [esp+2Ch+var_20] eax +
mov [esp+2Ch+var_10] ecx +
jz loc_458AD3  +
mov esi dword_461718 +
mov ebp edx +
test esi esi +
jz loc_458A60  +
cmp dword_461704 0FFFFFFFFh +
jz loc_458A20  +
mov ebx ds:dword_48A9C4 +
xor eax eax +
test ebx ebx +
jnz loc_458A20  +
mov edi [esp+2Ch+var_10] +
movzx edx byte ptr [edi] +
cmp dl 2Dh +
jz loc_458A4E  +
mov ecx dword_461704 +
test ecx ecx +
jnz loc_458A80  +
cmp dl 2Bh +
jz loc_458BCA  +
test eax eax +
mov ds:dword_48A9C0 0 +
jz loc_45885D  +
mov dword_461708 0FFFFFFFFh +
mov dword_46170C 0FFFFFFFFh +
mov esi [esp+2Ch+arg_8] +
mov edi [esp+2Ch+arg_8] +
and esi 1 +
and edi 2 +
mov [esp+2Ch+var_1C] esi +
jmp loc_4588DF  +
test edi edi +
mov eax edi +
mov off_461710 offset unk_482A35 +
jnz loc_458B25  +
mov edx [esp+2Ch+var_1C] +
test edx edx +
jz loc_458AD3  +
mov ebx dword_46170C +
cmp ebx 0FFFFFFFFh +
jz loc_458A98  +
mov esi dword_461708 +
cmp esi 0FFFFFFFFh +
jz loc_4588D6  +
mov eax ebx +
mov edx esi +
mov [esp+2Ch+var_2C] ebp +
sub ebx esi +
call sub_458370  +
mov ecx dword_461718 +
mov eax ds:dword_48A9C4 +
mov dword_461708 0FFFFFFFFh +
add ebx ecx +
mov dword_46170C ebx +
add ecx 1 +
mov dword_461718 ecx +
test eax eax +
jnz loc_4588F3  +
mov eax off_461710 +
movzx edx byte ptr [eax] +
test dl dl +
jnz loc_458BC3  +
mov ecx dword_461718 +
cmp ecx [esp+2Ch+var_20] +
mov ds:dword_48A9C4 0 +
jge loc_458AE0  +
mov ebx [ebp+ecx*4+0] +
movzx edx byte ptr [ebx] +
mov off_461710 ebx +
cmp dl 2Dh +
jnz loc_458871  +
movzx esi byte ptr [ebx+1] +
mov eax esi +
test al al +
jnz loc_458959  +
mov eax [esp+2Ch+var_10] +
mov [esp+2Ch+var_28] 2Dh +
mov [esp+2Ch+var_14] edx +
mov [esp+2Ch+var_18] ecx +
mov [esp+2Ch+var_2C] eax +
call strchr  +
mov ecx [esp+2Ch+var_18] +
mov edx [esp+2Ch+var_14] +
test eax eax +
jz loc_458871  +
mov eax dword_46170C +
cmp eax 0FFFFFFFFh +
mov [esp+2Ch+var_1C] eax +
jz loc_458974  +
cmp dword_461708 0FFFFFFFFh +
jz loc_458CA8  +
mov eax esi +
test al al +
jz loc_458C91  +
mov edx esi +
lea eax [ebx+1] +
cmp dl 2Dh +
mov [esp+2Ch+var_18] eax +
mov edi eax +
mov off_461710 eax +
jz loc_458CE7  +
mov esi [esp+2Ch+arg_0] +
test esi esi +
jz loc_458B5B  +
mov eax dword_461718 +
cmp [ebp+eax*4+0] edi +
jz loc_458B5B  +
cmp dl 2Dh +
jz loc_458C98  +
test byte ptr [esp+2Ch+arg_8] 4 +
jz loc_458B5B  +
xor eax eax +
cmp dl 3Ah +
jz loc_4589E8  +
mov eax [esp+2Ch+var_10] +
movsx edx dl +
mov [esp+2Ch+var_28] edx +
mov [esp+2Ch+var_2C] eax +
call strchr  +
test eax eax +
setnz al  +
movzx eax al +
mov [esp+2Ch+var_28] eax +
mov eax [esp+2Ch+arg_4] +
mov ecx [esp+2Ch+arg_0] +
mov edx [esp+2Ch+var_10] +
mov [esp+2Ch+var_2C] eax +
mov eax ebp +
call sub_458490  +
cmp eax 0FFFFFFFFh +
jz loc_458B52  +
mov off_461710 offset unk_482A35 +
jmp loc_458AD8  +
mov [esp+2Ch+var_2C] offset aPosixly_correc +
call getenv  +
mov edi [esp+2Ch+var_10] +
movzx edx byte ptr [edi] +
test eax eax +
setnz al  +
movzx eax al +
cmp dl 2Dh +
mov dword_461704 eax +
mov eax ds:dword_48A9C4 +
jnz loc_458824  +
or [esp+2Ch+arg_8] 2 +
add [esp+2Ch+var_10] 1 +
jmp loc_45883B  +
mov ds:dword_48A9C4 1 +
mov dword_461718 1 +
jmp loc_4587F7  +
and [esp+2Ch+arg_8] 0FFFFFFFEh +
cmp dl 2Bh +
jnz loc_45883B  +
add [esp+2Ch+var_10] 1 +
jmp loc_45883B  +
mov dword_46170C ecx +
jmp loc_4588D6  +
cmp byte ptr [edi+1] 0 +
jnz loc_458C5E  +
mov eax [esp+2Ch+var_10] +
mov [esp+2Ch+var_28] 2Dh +
mov [esp+2Ch+var_2C] eax +
call strchr  +
test eax eax +
jnz loc_458B91  +
cmp byte ptr [edi+1] 0 +
jnz loc_458C5E  +
mov eax 0FFFFFFFFh +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ebx dword_461708 +
mov off_461710 offset unk_482A35 +
cmp ebx 0FFFFFFFFh +
jz loc_458B41  +
mov esi dword_46170C +
mov edx ebx +
mov [esp+2Ch+var_2C] ebp +
mov eax esi +
sub esi ebx +
call sub_458370  +
add dword_461718 esi +
mov dword_461708 0FFFFFFFFh +
mov dword_46170C 0FFFFFFFFh +
jmp loc_458AD3  +
add ecx 1 +
mov eax 1 +
mov ds:dword_48A9C0 ebx +
mov dword_461718 ecx +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax dword_46170C +
cmp eax 0FFFFFFFFh +
jz loc_458B0F  +
mov dword_461718 eax +
jmp loc_458B0F  +
mov edi off_461710 +
movzx edx byte ptr [edi] +
movsx esi dl +
lea ebx [edi+1] +
cmp esi 3Ah +
mov off_461710 ebx +
jz loc_458C51  +
cmp esi 2Dh +
jz loc_458AA3  +
mov eax [esp+2Ch+var_10] +
mov [esp+2Ch+var_28] esi +
mov [esp+2Ch+var_2C] eax +
call strchr  +
test eax eax +
jz loc_458C51  +
cmp esi 57h +
movzx edx byte ptr [eax+1] +
jnz loc_458BA2  +
mov ecx [esp+2Ch+arg_0] +
test ecx ecx +
jnz loc_458BD9  +
cmp dl 3Ah +
jz loc_458CB3  +
cmp byte ptr [edi+1] 0 +
mov eax esi +
jnz loc_458AD8  +
add dword_461718 1 +
jmp loc_458AD8  +
mov edi eax +
jmp loc_458997  +
and [esp+2Ch+arg_8] 0FFFFFFFEh +
add [esp+2Ch+var_10] 1 +
jmp loc_45883B  +
cmp dl 3Bh +
jnz loc_458BA2  +
cmp byte ptr [edi+1] 0 +
jnz loc_458D9B  +
mov eax dword_461718 +
add eax 1 +
cmp [esp+2Ch+var_20] eax +
mov dword_461718 eax +
jg loc_458D92  +
mov edx dword_46171C +
mov off_461710 offset unk_482A35 +
test edx edx +
jz loc_458C30  +
mov eax [esp+2Ch+var_10] +
cmp byte ptr [eax] 3Ah +
jz loc_458C30  +
mov [esp+2Ch+var_28] 57h +
mov [esp+2Ch+var_2C] offset aOptionRequir_0 +
call sub_458420  +
mov eax [esp+2Ch+var_10] +
mov dword_461714 57h +
cmp byte ptr [eax] 3Ah +
jz loc_458D88  +
mov eax 3Fh +
jmp loc_458AD8  +
cmp byte ptr [edi+1] 0 +
jnz loc_458C5E  +
add dword_461718 1 +
mov ebx dword_46171C +
test ebx ebx +
jz loc_458C81  +
mov eax [esp+2Ch+var_10] +
cmp byte ptr [eax] 3Ah +
jz loc_458C81  +
mov [esp+2Ch+var_28] esi +
mov [esp+2Ch+var_2C] offset aUnknownOptionC +
call sub_458420  +
mov dword_461714 esi +
mov eax 3Fh +
jmp loc_458AD8  +
mov edi ebx +
jmp loc_458997  +
add edi 1 +
xor eax eax +
mov off_461710 edi +
jmp loc_4589E8  +
mov dword_461708 ecx +
jmp loc_458974  +
mov ds:dword_48A9C0 0 +
cmp byte ptr [edi+1] 0 +
jz loc_458D30  +
mov eax dword_461718 +
mov ds:dword_48A9C0 ebx +
add eax 1 +
mov dword_461718 eax +
mov eax esi +
mov off_461710 offset unk_482A35 +
jmp loc_458AD8  +
cmp byte ptr [ebx+2] 0 +
jnz loc_458997  +
mov ebx dword_461708 +
add ecx 1 +
mov dword_461718 ecx +
mov off_461710 offset unk_482A35 +
cmp ebx 0FFFFFFFFh +
jz loc_458B0F  +
mov [esp+2Ch+var_2C] ebp +
mov ebp [esp+2Ch+var_1C] +
mov edx ebx +
mov eax ebp +
sub ebp ebx +
call sub_458370  +
add dword_461718 ebp +
jmp loc_458B0F  +
cmp byte ptr [eax+2] 3Ah +
mov eax dword_461718 +
jz loc_458CCE  +
add eax 1 +
cmp [esp+2Ch+var_20] eax +
mov dword_461718 eax +
jg loc_458DBE  +
mov eax dword_46171C +
mov off_461710 offset unk_482A35 +
test eax eax +
jz loc_458D75  +
mov eax [esp+2Ch+var_10] +
cmp byte ptr [eax] 3Ah +
jz loc_458D75  +
mov [esp+2Ch+var_28] esi +
mov [esp+2Ch+var_2C] offset aOptionRequir_0 +
call sub_458420  +
mov eax [esp+2Ch+var_10] +
mov dword_461714 esi +
cmp byte ptr [eax] 3Ah +
jnz loc_458C47  +
mov eax 3Ah +
jmp loc_458AD8  +
mov eax [ebp+eax*4+0] +
mov off_461710 eax +
mov eax [esp+2Ch+arg_4] +
mov ecx [esp+2Ch+arg_0] +
mov edx [esp+2Ch+var_10] +
mov [esp+2Ch+var_28] 0 +
mov [esp+2Ch+var_2C] eax +
mov eax ebp +
call sub_458490  +
jmp loc_458A0B  +
mov edx [ebp+eax*4+0] +
mov ds:dword_48A9C0 edx +
jmp loc_458CCE  +
***
mov eax [esp+arg_0] +
mov edx [esp+arg_4] +
mov ecx [esp+arg_8] +
mov [esp+arg_4] 0 +
mov [esp+arg_8] 0 +
mov [esp+arg_0] 0 +
jmp sub_4587D0  +
***
push ebx  +
mov ebx [esp+18h] +
mov edx [esp+0Ch] +
mov eax [esp+8] +
mov ecx [esp+10h] +
mov [esp+0Ch] ebx +
mov ebx [esp+14h] +
mov dword ptr [esp+10h] 1 +
mov [esp+8] ebx +
pop ebx  +
jmp sub_4587D0  +
***
push ebx  +
mov ebx [esp+18h] +
mov edx [esp+0Ch] +
mov eax [esp+8] +
mov ecx [esp+10h] +
mov [esp+0Ch] ebx +
mov ebx [esp+14h] +
mov dword ptr [esp+10h] 5 +
mov [esp+8] ebx +
pop ebx  +
jmp sub_4587D0  +
***
sub esp 3Ch +
lea eax [esp+3Ch+var_14] +
mov [esp+3Ch+var_2C] eax +
lea eax [esp+3Ch+var_18] +
mov [esp+3Ch+var_30] eax +
mov eax [esp+3Ch+arg_4] +
mov [esp+3Ch+var_34] offset unk_461720 +
mov [esp+3Ch+var_38] eax +
mov eax [esp+3Ch+arg_0] +
mov [esp+3Ch+var_3C] eax +
call sub_45A430  +
mov edx eax +
and edx 7 +
cmp edx 6 +
ja loc_458EB6  +
jmp ds:off_482B40[edx*4]  +
mov ecx [esp+3Ch+var_10] +
or ecx 7FF00000h +
mov dword ptr [esp+3Ch+var_24+4] ecx +
mov ecx [esp+3Ch+var_14] +
mov dword ptr [esp+3Ch+var_24] ecx +
test al 8 +
jz loc_458EC2  +
or dword ptr [esp+3Ch+var_24+4] 80000000h +
fld  [esp+3Ch+var_24] +
add esp 3Ch +
retn   +
mov dword ptr [esp+3Ch+var_24] 0 +
mov dword ptr [esp+3Ch+var_24+4] 7FF80000h +
jmp loc_458EB6  +
mov dword ptr [esp+3Ch+var_24] 0 +
mov dword ptr [esp+3Ch+var_24+4] 0 +
jmp loc_458EB6  +
mov ecx [esp+3Ch+var_14] +
mov edx [esp+3Ch+var_10] +
mov dword ptr [esp+3Ch+var_24] ecx +
mov ecx [esp+3Ch+var_18] +
and edx 0FFEFFFFFh +
add ecx 433h +
shl ecx 14h +
or ecx edx +
mov dword ptr [esp+3Ch+var_24+4] ecx +
jmp loc_458EB6  +
mov ecx [esp+3Ch+var_14] +
mov dword ptr [esp+3Ch+var_24] ecx +
mov ecx [esp+3Ch+var_10] +
mov dword ptr [esp+3Ch+var_24+4] ecx +
jmp loc_458EB6  +
mov dword ptr [esp+3Ch+var_24] 0 +
mov dword ptr [esp+3Ch+var_24+4] 7FF00000h +
jmp loc_458EB6  +
***
push esi  +
push ebx  +
sub esp 4Ch +
mov ebx [esp+4Ch+arg_0] +
mov edi [esp+4Ch+arg_4] +
test ebx ebx +
jz loc_458F6A  +
movzx edx byte ptr [ebx] +
test dl dl +
jnz loc_458FD0  +
lea eax [esp+4Ch+var_30] +
mov [esp+4Ch+var_48] eax +
mov [esp+4Ch+var_4C] ebx +
call _stat  +
mov esi eax +
cmp esi 0FFFFFFFFh +
jz loc_4590F0  +
mov eax [esp+4Ch+var_30] +
mov [edi] eax +
mov eax [esp+4Ch+var_2C] +
mov [edi+4] eax +
mov eax [esp+4Ch+var_28] +
mov [edi+8] eax +
mov eax [esp+4Ch+var_24] +
mov [edi+0Ch] eax +
mov eax [esp+4Ch+var_20] +
mov [edi+10h] eax +
mov eax [esp+4Ch+var_1C] +
mov [edi+14h] eax +
mov eax [esp+4Ch+var_18] +
mov [edi+18h] eax +
mov eax [esp+4Ch+var_14] +
mov [edi+1Ch] eax +
mov eax [esp+4Ch+var_10] +
mov [edi+20h] eax +
mov eax esi +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+4Ch+var_4C] ebx +
mov [esp+4Ch+var_40] edx +
call strlen  +
cmp eax 1 +
mov esi eax +
jle loc_458F6A  +
lea eax [eax-2] +
mov edx [esp+4Ch+var_40] +
cmp eax 1 +
jbe loc_4590C5  +
cmp dl 2Fh +
jz loc_458FFD  +
cmp dl 5Ch +
jnz loc_459009  +
movzx eax byte ptr [ebx+1] +
cmp al 2Fh +
jz loc_459063  +
cmp al 5Ch +
jz loc_459063  +
movzx eax byte ptr [ebx+esi-1] +
cmp al 5Ch +
jz loc_45901A  +
cmp al 2Fh +
jnz loc_458F6A  +
mov [esp+4Ch+var_4C] esi +
call malloc  +
mov [esp+4Ch+var_48] ebx +
mov ebp eax +
lea eax [esi-1] +
mov [esp+4Ch+var_44] eax +
mov [esp+4Ch+var_4C] ebp +
call memcpy  +
lea eax [esp+4Ch+var_30] +
mov byte ptr [ebp+esi-1] 0 +
mov [esp+4Ch+var_48] eax +
mov [esp+4Ch+var_4C] ebp +
call _stat  +
cmp ebx ebp +
mov esi eax +
jz loc_458F7C  +
mov [esp+4Ch+var_4C] ebp +
call free  +
jmp loc_458F7C  +
movzx ecx byte ptr [ebx+2] +
lea edx [ebx+2] +
cmp cl 5Ch +
jnz loc_459081  +
jmp loc_459085  +
cmp cl 2Fh +
jz loc_4590D5  +
add edx 1 +
movzx ecx byte ptr [edx] +
cmp cl 5Ch +
jz loc_459085  +
test cl cl +
jnz loc_459071  +
test cl cl +
jnz loc_4590D5  +
movzx eax byte ptr [edx] +
test al al +
nop   +
jz loc_458F6A  +
cmp al 5Ch +
jnz loc_4590AE  +
jmp loc_4590B2  +
add edx 1 +
movzx eax byte ptr [edx] +
cmp al 5Ch +
jz loc_4590E0  +
test al al +
jz loc_4590E0  +
cmp al 2Fh +
jnz loc_4590A0  +
cmp byte ptr [edx+1] 0 +
jnz loc_459009  +
lea esi [esi+0] +
jmp loc_458F6A  +
cmp byte ptr [ebx+1] 3Ah +
jnz loc_458FF3  +
nop   +
jmp loc_458F6A  +
add edx 1 +
jmp loc_459089  +
test al al +
jz loc_458F6A  +
jmp loc_4590B2  +
test edi 1 +
mov edx 24h +
jnz loc_45913C  +
test edi 2 +
jnz loc_45912E  +
mov ecx edx +
xor eax eax +
shr ecx 2 +
test dl 2 +
stos   +
jz loc_45911C  +
xor eax eax +
add edi 2 +
mov [edi-2] ax +
and edx 1 +
jz loc_459124  +
mov byte ptr [edi] 0 +
mov eax 0FFFFFFFFh +
jmp loc_458FC5  +
xor ecx ecx +
add edi 2 +
mov [edi-2] cx +
sub edx 2 +
jmp loc_459105  +
mov byte ptr [edi] 0 +
mov dl 23h +
add edi 1 +
jmp loc_4590FD  +
***
push ebx  +
mov ebx 16h +
sub esp 14h +
mov edx [ebp+arg_0] +
cmp edx 0F423Fh +
jbe loc_459170  +
mov eax ebx +
mov ebx [ebp+var_4] +
leave   +
retn   +
xor bl bl +
test edx edx +
jz loc_459167  +
mov eax edx +
mov ecx 10624DD3h +
mul  ecx +
shr edx 6 +
mov [esp+18h+var_18] edx +
call ds:Sleep  +
mov eax ebx +
mov ebx [ebp+var_4] +
sub esp 4 +
leave   +
retn   +
***
push edi  +
push esi  +
push ebx  +
sub esp 0DCh +
mov esi [ebp+arg_4] +
mov ebx [ebp+arg_0] +
test esi esi +
jz loc_4591F5  +
lea eax [ebp+var_C4] +
mov [esp+0E8h+var_E8] eax +
call ds:GetTimeZoneInformation  +
sub esp 4 +
cmp eax 0FFFFFFFFh +
jz loc_459270  +
mov edx [ebp+var_C4] +
cmp eax 2 +
setz al  +
movzx eax al +
mov [esi+4] eax +
mov [esi] edx +
test ebx ebx +
jz loc_459263  +
lea eax [ebp+var_D0] +
mov [esp+0E8h+var_E8] eax +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+var_D0] +
mov edi [ebp+var_CC] +
sub esp 4 +
add esi 2AC18000h +
adc edi 0FE624E21h +
mov [esp+0E8h+var_E0] 989680h +
mov [esp+0E8h+var_DC] 0 +
mov [esp+0E8h+var_E8] esi +
mov [esp+0E8h+var_E4] edi +
call sub_458110  +
mov [ebx] eax +
mov [esp+0E8h+var_E0] 989680h +
mov [esp+0E8h+var_DC] 0 +
mov [esp+0E8h+var_E8] esi +
mov [esp+0E8h+var_E4] edi +
call sub_458220  +
imul eax eax +
mov [ebx+4] eax +
lea esp [ebp-0Ch] +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov dword ptr [esi] 0 +
mov dword ptr [esi+4] 0 +
jmp loc_4591F5  +
***
sub esp 24h +
mov eax [esp+24h+arg_4] +
mov ebx [esp+24h+arg_0] +
mov [esp+24h+var_20] eax +
lea eax [esp+24h+var_C] +
mov [esp+24h+var_24] eax +
call sub_4591B0  +
test eax eax +
mov ecx eax +
jnz loc_4592E0  +
mov eax [esp+24h+var_C] +
mov edx 10624DD3h +
mov esi [esp+24h+var_8] +
mov [ebx] eax +
mov eax esi +
imul  edx +
sar esi 1Fh +
sar edx 6 +
sub edx esi +
mov [ebx+4] edx +
add esp 24h +
mov eax ecx +
pop ebx  +
pop esi  +
retn   +
mov ecx 0FFFFFFFFh +
jmp loc_4592D1  +
***
push esi  +
push ebx  +
sub esp 24h +
mov eax [esp+34h] +
mov ebx [esp+30h] +
mov [esp+4] eax +
lea eax [esp+18h] +
mov [esp] eax +
call sub_4591B0  +
test eax eax +
mov ecx eax +
jnz loc_459340  +
mov eax [esp+18h] +
mov edx 10624DD3h +
mov esi [esp+1Ch] +
mov [ebx] eax +
mov eax esi +
imul  edx +
sar esi 1Fh +
sar edx 6 +
sub edx esi +
mov [ebx+4] edx +
add esp 24h +
mov eax ecx +
pop ebx  +
pop esi  +
retn   +
***
mov ecx 0FFFFFFFFh +
jmp loc_459331  +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov eax [esp+2Ch+arg_4] +
mov esi [esp+2Ch+arg_0] +
test eax eax +
jz loc_459369  +
mov eax [esp+2Ch+arg_4] +
mov [eax] esi +
cmp [esp+2Ch+arg_8] 1 +
jz loc_459377  +
cmp [esp+2Ch+arg_8] 24h +
jbe loc_459393  +
call _errno  +
xor edx edx +
mov dword ptr [eax] 21h +
xor eax eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add esi 1 +
movzx ebx byte ptr [esi] +
movsx eax bl +
mov [esp+0] eax +
call isspace  +
test eax eax +
jnz loc_459390  +
xor edx edx +
cmp bl 2Dh +
setz dl  +
mov eax esi +
mov [esp-10h+arg_18] edx +
jz loc_4594F0  +
cmp bl 2Bh +
jz loc_4594F0  +
mov ebp [esp-10h+arg_44] +
test ebp ebp +
jnz loc_459503  +
cmp bl 30h +
mov [esp-10h+arg_44] 0Ah +
jz loc_4595F0  +
movsx ebp bl +
lea eax [ebp-30h] +
cmp eax 9 +
ja loc_459580  +
movsx eax bl +
sub eax 30h +
cmp [esp-10h+arg_44] eax +
jle loc_4595E0  +
mov edx eax +
shr edx 1Fh +
test dl dl +
jnz loc_4595E0  +
add esi 1 +
mov edi [esp-10h+arg_44] +
movsx ebx byte ptr [esi] +
mov [esp-10h+arg_C] eax +
sar eax 1Fh +
mov [esp-10h+arg_10] eax +
mov ebp edi +
lea ecx [ebx-30h] +
sar ebp 1Fh +
cmp ecx 9 +
mov [esp-10h+arg_14] 0 +
ja loc_4594CE  +
lea esi [esi+0] +
mov ebx ecx +
cmp [esp-10h+arg_44] ebx +
jle loc_45953C  +
test ebx ebx +
js loc_45953C  +
mov [esp-10h+arg_4] edi +
mov [esp-10h+arg_8] ebp +
mov dword ptr [esp+0] 0FFFFFFFFh +
mov [esp-10h+arg_0] 0FFFFFFFFh +
call sub_458110  +
add eax 1 +
adc edx 0 +
cmp [esp-10h+arg_10] edx +
ja loc_4594B4  +
jb loc_459484  +
cmp [esp-10h+arg_C] eax +
ja loc_4594B4  +
mov edx [esp-10h+arg_10] +
mov eax [esp-10h+arg_C] +
imul edx edi +
imul eax ebp +
lea ecx [edx+eax] +
mov eax [esp-10h+arg_C] +
mul  edi +
add edx ecx +
mov ecx ebx +
sar ebx 1Fh +
add ecx eax +
adc ebx edx +
cmp [esp-10h+arg_10] ebx +
jb loc_4594E2  +
ja loc_4594B4  +
cmp [esp-10h+arg_C] ecx +
jbe loc_4594E2  +
mov [esp-10h+arg_14] 1 +
add esi 1 +
movsx ebx byte ptr [esi] +
lea ecx [ebx-30h] +
cmp ecx 9 +
jbe loc_459440  +
mov [esp+0] ebx +
call isupper  +
test eax eax +
jz loc_459530  +
sub ebx 37h +
jmp loc_459442  +
mov [esp-10h+arg_C] ecx +
mov [esp-10h+arg_10] ebx +
jmp loc_4594BC  +
mov ebp [esp-10h+arg_44] +
add esi 1 +
movzx ebx byte ptr [eax+1] +
test ebp ebp +
jz loc_4593CE  +
cmp [esp-10h+arg_44] 10h +
jnz loc_4593DF  +
cmp bl 30h +
jnz loc_4593DF  +
movzx eax byte ptr [esi+1] +
and eax 0FFFFFFDFh +
cmp al 58h +
jz loc_4595FB  +
mov ebx 30h +
jmp loc_4593EE  +
mov [esp+0] ebx +
call islower  +
test eax eax +
jnz loc_459572  +
mov edi [esp-10h+arg_40] +
test edi edi +
jz loc_45954A  +
mov eax [esp-10h+arg_40] +
mov [eax] esi +
mov ebx [esp-10h+arg_14] +
test ebx ebx +
jnz loc_4595B0  +
mov ecx [esp-10h+arg_18] +
mov eax [esp-10h+arg_C] +
mov edx [esp-10h+arg_10] +
test ecx ecx +
jz loc_459386  +
neg eax  +
adc edx 0 +
neg edx  +
jmp loc_459386  +
sub ebx 57h +
jmp loc_459442  +
mov [esp+0] ebp +
call isupper  +
test eax eax +
jnz loc_4595D0  +
mov [esp+0] ebp +
call islower  +
xor edx edx +
mov ecx eax +
xor eax eax +
test ecx ecx +
jz loc_459386  +
lea eax [ebp-57h] +
jmp loc_4593F4  +
call _errno  +
mov edx 0FFFFFFFFh +
mov dword ptr [eax] 22h +
add esp 2Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
lea eax [ebp-37h] +
cmp [esp-10h+arg_44] eax +
jg loc_4593FE  +
lea esi [esi+0] +
add esp 2Ch +
xor eax eax +
pop ebx  +
xor edx edx +
pop esi  +
pop edi  +
pop ebp  +
retn   +
movzx eax byte ptr [esi+1] +
and eax 0FFFFFFDFh +
cmp al 58h +
jnz loc_45960F  +
movzx ebx byte ptr [esi+2] +
add esi 2 +
mov [esp-10h+arg_44] 10h +
jmp loc_4593DF  +
mov [esp-10h+arg_44] 8 +
jmp loc_4593DF  +
***
fld  [esp+arg_0] +
sub esp 8 +
fstcw  word ptr [esp+8+var_4] +
mov edx 800h +
or edx [esp+8+var_4] +
and edx 0FBFFh +
mov [esp+8+var_8] edx +
fldcw  word ptr [esp+8+var_8] +
frndint   +
fldcw  word ptr [esp+8+var_4] +
add esp 8 +
retn   +
***
fld  [esp+arg_0] +
fld  st +
push eax  +
sub esp 8 +
fnstcw  [esp+0Ch+var_8] +
movzx eax [esp+0Ch+var_8] +
or ah 0Ch +
mov [esp+0Ch+var_C] ax +
fldcw  [esp+0Ch+var_C] +
frndint   +
fldcw  [esp+0Ch+var_8] +
add esp 8 +
pop eax  +
test eax eax +
fld  st +
jz loc_459683  +
fxch  st(1) +
fstp  qword ptr [eax] +
jmp loc_459685  +
fstp  st(1) +
fld  st(1) +
fxam   +
fstsw  ax +
fstp  st +
and ax 4500h +
cmp ax 500h +
jz loc_4596A0  +
fsubp st(1) st +
retn   +
fstp  st +
fstp  st +
fldz   +
retn   +
***
fld  [esp+68h+arg_0] +
fld  [esp+68h+arg_8] +
fld  st(1) +
fxam   +
fstsw  ax +
fstp  st +
mov ecx eax +
fld  st +
fxam   +
fstsw  ax +
fstp  st +
mov edx eax +
and edx 4500h +
cmp edx 4000h +
setz al  +
jz loc_4597F8  +
fld1   +
fucomip st st(2) +
setnp bl  +
cmovz eax ebx +
test al al +
jnz loc_459800  +
and ecx 4500h +
cmp edx 100h +
jnz loc_459770  +
fld  st(1) +
fxam   +
fstsw  ax +
fstp  st +
test ah 2 +
jnz loc_459815  +
fld  ds:flt_482B64 +
fstp  [esp+68h+var_40] +
fstp  [esp+68h+var_30] +
fstp  [esp+68h+var_38] +
call _errno  +
fld  [esp+68h+var_40] +
mov dword ptr [eax] 21h +
fstp  [esp+68h+var_50] +
fld  [esp+68h+var_30] +
fstp  [esp+68h+var_58] +
fld  [esp+68h+var_38] +
fstp  qword ptr [esp+68h+var_68+8] +
mov dword ptr [esp+68h+var_68+4] offset unk_482B60 +
mov dword ptr [esp+68h+var_68] 1 +
call sub_4571D0  +
fld  [esp+68h+var_40] +
add esp 68h +
pop ebx  +
retn   +
cmp ecx 100h +
jz loc_459707  +
cmp ecx 4000h +
jz loc_459945  +
cmp edx 500h +
jz loc_459824  +
cmp ecx 500h +
jnz loc_4599F0  +
fld  st(1) +
fxam   +
fstsw  ax +
fstp  st +
test ah 2 +
lea ebx [esp+68h+var_10] +
jz loc_459890  +
fxch  st(1) +
fstp  [esp+68h+var_38] +
fst  qword ptr [esp+68h+var_68] +
lea ebx [esp+68h+var_10] +
fstp  [esp+68h+var_40] +
mov eax ebx +
call sub_459650  +
fldz   +
fxch  st(1) +
fucomip st st(1) +
fstp  st +
fld  [esp+68h+var_40] +
fld  [esp+68h+var_38] +
jp loc_4597E2  +
jz loc_459892  +
fxch  st(1) +
fxam   +
fstsw  ax +
fstp  st +
test ah 2 +
jnz loc_459B27  +
fchs   +
jmp loc_459810  +
fstp  st +
fstp  st +
jmp loc_459804  +
fstp  st +
fstp  st +
fld1   +
jmp loc_459810  +
fstp  st +
fstp  st(1) +
jmp loc_459810  +
fstp  st +
add esp 68h +
pop ebx  +
retn   +
fld  ds:flt_482B68 +
fstp  [esp+68h+var_40] +
jmp loc_459723  +
cmp ecx 500h +
jz loc_459B60  +
fld  st(1) +
fxam   +
fstsw  ax +
fstp  st +
test ah 2 +
jz loc_459844  +
fxch  st(1) +
fchs   +
fxch  st(1) +
fld1   +
fld  st +
fxch  st(3) +
fucomi st st(3) +
fstp  st(3) +
jnp loc_459C10  +
fstp  st +
jmp loc_45985A  +
fstp  st +
fld1   +
fxch  st(2) +
fucomip st st(2) +
fstp  st(1) +
jbe loc_459C7F  +
fxam   +
fstsw  ax +
fstp  st +
test ah 2 +
jnz loc_459885  +
jmp loc_4599E5  +
fstp  st +
fstp  st +
jmp loc_459885  +
fstp  st +
jmp loc_459885  +
fstp  st +
fldz   +
jmp loc_459810  +
fxch  st(1) +
fstp  [esp+68h+var_38] +
fst  qword ptr [esp+68h+var_68] +
fstp  [esp+68h+var_40] +
mov dword ptr [esp+68h+var_68+8] 0FFFFFFFFh +
call sub_45BF20  +
mov eax ebx +
fstp  qword ptr [esp+68h+var_68] +
call sub_459650  +
xor eax eax +
mov edx 1 +
fldz   +
fucomip st st(1) +
fstp  st +
setp al  +
fld  [esp+68h+var_38] +
cmovz edx eax +
fld  st +
fxam   +
fstsw  ax +
fstp  st +
test ah 2 +
fld  [esp+68h+var_40] +
jz loc_4598F0  +
fld  st +
fxam   +
fstsw  ax +
fstp  st +
test ah 2 +
jz loc_4598F0  +
test edx edx +
jz loc_459879  +
nop   +
fld  st(1) +
fxam   +
fstsw  ax +
fstp  st +
test ah 2 +
jnz loc_459B34  +
fld  st(1) +
fxam   +
fstsw  ax +
fstp  st +
test ah 2 +
jz loc_459926  +
fld  st +
fxam   +
fstsw  ax +
fstp  st +
test ah 2 +
jnz loc_459926  +
test edx edx +
jz loc_4599D9  +
fxam   +
fstsw  ax +
fstp  st +
test ah 2 +
jnz loc_459B80  +
test edx edx +
jnz loc_4599C8  +
fstp  st +
jmp loc_4599E5  +
cmp edx 500h +
jz loc_459BF0  +
fld  st(1) +
fxam   +
fstsw  ax +
fstp  st +
test ah 2 +
lea ebx [esp+68h+var_10] +
jnz loc_459AE5  +
fxch  st(1) +
fstp  [esp+68h+var_38] +
fst  qword ptr [esp+68h+var_68] +
fstp  [esp+68h+var_40] +
mov dword ptr [esp+68h+var_68+8] 0FFFFFFFFh +
call sub_45BF20  +
mov eax ebx +
fstp  qword ptr [esp+68h+var_68] +
call sub_459650  +
xor eax eax +
mov edx 1 +
fldz   +
fucomip st st(1) +
fstp  st +
setp al  +
fld  [esp+68h+var_40] +
cmovz edx eax +
fxam   +
fstsw  ax +
fstp  st +
test ah 2 +
fld  [esp+68h+var_38] +
jz loc_459B80  +
test edx edx +
jz loc_4599DF  +
fld  st +
fxam   +
fstsw  ax +
fstp  st +
test ah 2 +
jz loc_4599E3  +
fxam   +
fstsw  ax +
fstp  st +
test ah 2 +
jz loc_4599E5  +
jmp loc_459B52  +
fstp  st +
fstp  st +
jmp loc_4599E5  +
fstp  st +
jmp loc_4599E5  +
fstp  st +
fld  ds:flt_482B70 +
jmp loc_459810  +
fxch  st(1) +
fstp  [esp+68h+var_38] +
fst  qword ptr [esp+68h+var_68] +
lea ebx [esp+68h+var_10] +
fstp  [esp+68h+var_40] +
mov eax ebx +
call sub_459650  +
fldz   +
fxch  st(1) +
fucomip st st(1) +
fstp  st +
fld  [esp+68h+var_40] +
fld  [esp+68h+var_38] +
jp loc_459A20  +
jz loc_459BA1  +
fld  st +
fxam   +
fstsw  ax +
fstp  st +
test ah 2 +
jnz loc_459C2F  +
fld  ds:flt_482B78 +
fxch  st(2) +
fucomi st st(2) +
fstp  st(2) +
jnp loc_459C20  +
fxch  st(1) +
jmp loc_459A56  +
fstp  st +
fxch  st(1) +
jmp loc_459A56  +
fxch  st(1) +
jmp loc_459A56  +
fxch  st(1) +
fstp  [esp+68h+var_40] +
fld  st +
fstp  [esp+68h+var_38] +
fabs   +
fstp  [esp+68h+var_68] +
call sub_45BFB0  +
fld  [esp+68h+var_40] +
fmulp st(1) st +
fstp  [esp+68h+var_68] +
call sub_45BFE8  +
fstp  [esp+68h+var_20] +
fld  [esp+68h+var_20] +
fld  [esp+68h+var_38] +
fxam   +
fstsw  ax +
fstp  st +
fld  st +
test ah 2 +
fld  [esp+68h+var_40] +
jz loc_459808  +
fstp  st(1) +
fxch  st(1) +
fst  [esp+68h+var_38] +
fstp  [esp+68h+var_40] +
fstp  qword ptr [esp+68h+var_68] +
mov dword ptr [esp+68h+var_68+8] 0FFFFFFFFh +
call sub_45BF20  +
mov eax ebx +
fstp  qword ptr [esp+68h+var_68] +
call sub_459650  +
fldz   +
fxch  st(1) +
fucomip st st(1) +
fstp  st +
fld  [esp+68h+var_40] +
fld  [esp+68h+var_38] +
jp loc_459ADC  +
jz loc_45980E  +
fstp  st(1) +
jmp loc_459ADE  +
fstp  st(1) +
fchs   +
jmp loc_459810  +
fxch  st(1) +
fstp  [esp+68h+var_38] +
fst  qword ptr [esp+68h+var_68] +
lea ebx [esp+68h+var_10] +
fstp  [esp+68h+var_40] +
mov eax ebx +
call sub_459650  +
fldz   +
fxch  st(1) +
fucomip st st(1) +
fstp  st +
fld  [esp+68h+var_40] +
fld  [esp+68h+var_38] +
jp loc_459B15  +
jz loc_459969  +
fxch  st(1) +
fxam   +
fstsw  ax +
fstp  st +
test ah 2 +
jz loc_45987F  +
fchs   +
fdivr  ds:flt_482B6C +
jmp loc_459810  +
fld  st +
fxam   +
fstsw  ax +
fstp  st +
test ah 2 +
jnz loc_459902  +
test edx edx +
jz loc_459902  +
fstp  st +
fstp  st +
fld  ds:flt_482B74 +
jmp loc_459810  +
fstp  st(1) +
fxam   +
fstsw  ax +
fstp  st +
test ah 2 +
jz loc_4599E5  +
fldz   +
jmp loc_459810  +
test edx edx +
jz loc_459883  +
fxam   +
fstsw  ax +
fstp  st +
test ah 2 +
jz loc_459885  +
fldz   +
fchs   +
jmp loc_459810  +
fld  [esp+68h+var_10] +
fld  ds:dbl_482B80 +
fucomip st st(1) +
jb loc_459A48  +
fld  ds:flt_482B88 +
fxch  st(1) +
fucomip st st(1) +
fstp  st +
jb loc_459A50  +
fxch  st(1) +
fnstcw  [esp+68h+var_22] +
movzx eax [esp+68h+var_22] +
mov ah 0Ch +
mov [esp+68h+var_24] ax +
fldcw  [esp+68h+var_24] +
fistp  dword ptr [esp+68h+var_68+8] +
fldcw  [esp+68h+var_22] +
fstp  qword ptr [esp+68h+var_68] +
call sub_45C040  +
jmp loc_459810  +
fstp  st(1) +
fxam   +
fstsw  ax +
fstp  st +
test ah 2 +
jnz loc_4599E5  +
fldz   +
jmp loc_459810  +
jnz loc_459858  +
fstp  st(1) +
fstp  st(1) +
jmp loc_459810  +
jnz loc_459A54  +
fstp  st(1) +
fsqrt   +
jmp loc_459810  +
fxch  st(1) +
fstp  [esp+68h+var_30] +
fstp  [esp+68h+var_38] +
call _errno  +
fld  ds:flt_482B68 +
mov dword ptr [eax] 21h +
fst  [esp+68h+var_50] +
mov dword ptr [esp+68h+var_68+4] offset unk_482B60 +
fstp  dword ptr [esp+68h+var_40] +
fld  [esp+68h+var_30] +
fstp  [esp+68h+var_58] +
fld  [esp+68h+var_38] +
fstp  qword ptr [esp+68h+var_68+8] +
mov dword ptr [esp+68h+var_68] 1 +
call sub_4571D0  +
fld  dword ptr [esp+68h+var_40] +
jmp loc_459810  +
fxam   +
fstsw  ax +
fstp  st +
test ah 2 +
jnz loc_4599E5  +
fldz   +
jmp loc_459810  +
***
sub esp 4Ch +
fld  [esp+4Ch+arg_0] +
fxam   +
fstsw  ax +
mov edx eax +
and edx 4500h +
cmp edx 4000h +
jz loc_459D53  +
fxam   +
fstsw  ax +
test ah 2 +
jnz loc_459D00  +
cmp edx 500h +
jz loc_459D47  +
cmp edx 100h +
jz loc_459CF0  +
fstp  [esp+4Ch+var_4C] +
call sub_45C270  +
fstp  [esp+4Ch+var_14] +
fld  [esp+4Ch+var_14] +
add esp 4Ch +
retn   +
fstp  st +
fld  ds:flt_482B98 +
add esp 4Ch +
retn   +
fstp  [esp+4Ch+var_1C] +
call _errno  +
fld  ds:flt_482B98 +
mov dword ptr [eax] 21h +
fst  [esp+4Ch+var_34] +
mov dword ptr [esp+4Ch+var_4C+4] offset unk_482B90 +
fstp  [esp+4Ch+var_20] +
fldz   +
fstp  [esp+4Ch+var_3C] +
fld  [esp+4Ch+var_1C] +
fstp  qword ptr [esp+4Ch+var_4C+8] +
mov dword ptr [esp+4Ch+var_4C] 1 +
call sub_4571D0  +
fld  [esp+4Ch+var_20] +
add esp 4Ch +
retn   +
fstp  st +
fld  ds:flt_482B9C +
add esp 4Ch +
retn   +
fstp  [esp+4Ch+var_1C] +
call _errno  +
fld  ds:flt_482B94 +
mov dword ptr [eax] 22h +
fst  [esp+4Ch+var_34] +
mov dword ptr [esp+4Ch+var_4C+4] offset unk_482B90 +
fstp  [esp+4Ch+var_20] +
fldz   +
fstp  [esp+4Ch+var_3C] +
fld  [esp+4Ch+var_1C] +
fstp  qword ptr [esp+4Ch+var_4C+8] +
mov dword ptr [esp+4Ch+var_4C] 3 +
call sub_4571D0  +
fld  [esp+4Ch+var_20] +
jmp loc_459CEA  +
***
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov ebp [esp+1Ch+arg_0] +
mov eax [esp+1Ch+arg_8] +
mov edi [esp+1Ch+arg_4] +
mov [esp+1Ch+var_1C] ebp +
mov [esp+1Ch+var_10] eax +
call strlen  +
lea eax [eax+eax+2] +
mov [esp+1Ch+var_1C] eax +
call malloc  +
mov [esp+1Ch+var_1C] edi +
mov esi eax +
call strlen  +
lea eax [eax+eax+2] +
mov [esp+1Ch+var_1C] eax +
call malloc  +
movzx ecx byte ptr [ebp+0] +
test cl cl +
jz loc_459FC2  +
xor ebx ebx +
xor edx edx +
lea esi [esi+0] +
add edx 1 +
mov [esi+ebx*2] cx +
movzx ecx byte ptr [ebp+edx+0] +
mov ebx edx +
test cl cl +
jnz loc_459F50  +
add edx edx +
xor ebx ebx +
mov [esi+edx] bx +
movzx ecx byte ptr [edi] +
test cl cl +
jz loc_459FC6  +
xor ebx ebx +
xor edx edx +
add edx 1 +
mov [eax+ebx*2] cx +
movzx ecx byte ptr [edi+edx] +
mov ebx edx +
test cl cl +
jnz loc_459F75  +
add edx edx +
mov edi [esp+1Ch+var_10] +
xor ecx ecx +
mov [eax+edx] cx +
mov [esp+1Ch+var_18] eax +
mov [esp+1Ch+var_1C] esi +
mov [esp+1Ch+var_14] edi +
mov [esp+1Ch+var_10] eax +
call sub_459DA0  +
mov [esp+1Ch+var_1C] esi +
call free  +
mov eax [esp+1Ch+var_10] +
mov [esp+1Ch+arg_0] eax +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp free  +
xor edx edx +
jmp loc_459F64  +
xor edx edx +
jmp loc_459F88  +
***
push ebx  +
sub esp 10h +
mov esi [esp+10h+arg_0] +
mov edi [esi+10h] +
lea edx [esi+14h] +
lea ebx [edx+edi*4] +
jmp loc_459FF3  +
add edx 4 +
cmp ebx edx +
mov dword ptr [edx-4] 0 +
jbe loc_45A008  +
mov ecx [edx] +
cmp ecx 0FFFFFFFFh +
jz loc_459FE5  +
add ecx 1 +
mov eax esi +
mov [edx] ecx +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
cmp edi [esi+8] +
jge loc_45A024  +
lea eax [edi+1] +
mov [esi+10h] eax +
mov eax esi +
mov dword ptr [esi+edi*4+14h] 1 +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov eax [esi+4] +
add eax 1 +
mov [esp+10h+var_10] eax +
call sub_45C3B0  +
mov edx [esi+10h] +
lea ecx ds:8[edx*4] +
lea edx [esi+0Ch] +
mov ebx eax +
lea eax [eax+0Ch] +
mov [esp+10h+var_8] ecx +
mov [esp+10h+var_C] edx +
mov [esp+10h+var_10] eax +
call memcpy  +
mov [esp+10h+var_10] esi +
mov esi ebx +
call sub_45C480  +
mov edi [ebx+10h] +
jmp loc_45A00D  +
***
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
fld  qword ptr [eax] +
lea eax [esp+48h+var_20] +
mov [esp+48h+var_3C] eax +
lea eax [esp+48h+var_1C] +
mov [esp+48h+var_40] eax +
fstp  [esp+48h+var_48] +
mov [esp+48h+var_38] ecx +
call sub_45CCC0  +
mov esi [esp+48h+var_20] +
mov edi [ebp+0] +
sub esi edi +
mov ebx eax +
mov eax [esp+48h+var_1C] +
mov [esp+48h+var_20] esi +
add eax esi +
test esi esi +
mov [esp+48h+var_1C] eax +
jle loc_45A255  +
cmp edi 35h +
jz loc_45A272  +
cmp [esp+48h+arg_8] 1 +
jz loc_45A110  +
cmp [esp+48h+arg_8] 2 +
jz loc_45A0F2  +
mov ecx esi +
sub ecx 1 +
jnz loc_45A100  +
mov edx [esp+48h+arg_4] +
xor eax eax +
test edx edx +
jz loc_45A20B  +
test byte ptr [ebx+14h] 2 +
mov [esp+48h+var_34] 0 +
jz loc_45A118  +
mov [esp+48h+var_34] 1 +
jmp loc_45A118  +
mov eax ecx +
sar eax 5 +
mov eax [ebx+eax*4+14h] +
shr eax cl +
test al 1 +
jnz loc_45A0F2  +
nop   +
mov [esp+48h+var_34] 0 +
mov dword ptr [esp+48h+var_48+4] esi +
mov dword ptr [esp+48h+var_48] ebx +
call sub_45D030  +
mov dword ptr [esp+48h+var_48] ebx +
cmp eax 1 +
mov [esp+48h+var_30] eax +
mov eax [esp+48h+var_20] +
sbb esi esi +
not esi  +
and esi 10h +
mov dword ptr [esp+48h+var_48+4] eax +
call sub_45D0B0  +
mov eax [esp+48h+var_34] +
test eax eax +
jnz loc_45A290  +
mov eax [esp+48h+var_1C] +
mov ecx [ebp+4] +
cmp ecx eax +
jle loc_45A223  +
mov edx ecx +
sub edx eax +
cmp edi edx +
mov [esp+48h+var_1C] ecx +
jl loc_45A1D1  +
mov eax [ebp+10h] +
test eax eax +
jnz loc_45A1D1  +
mov eax [esp+48h+var_30] +
lea ecx [edx-1] +
test eax eax +
setz al  +
test ecx ecx +
jg loc_45A323  +
test al al +
jz loc_45A192  +
mov ebp [esp+48h+arg_4] +
xor eax eax +
test ebp ebp +
jz loc_45A20B  +
mov ebp 1 +
shl ebp cl +
sar ecx 5 +
and ebp [ebx+ecx*4+14h] +
mov dword ptr [esp+48h+var_48+4] edx +
mov dword ptr [esp+48h+var_48] ebx +
call sub_45D0B0  +
mov eax [esp+48h+arg_C] +
test ebp ebp +
mov dword ptr [eax] 2 +
jnz loc_45A355  +
mov edx [esp+48h+var_30] +
mov eax [esp+48h+var_1C] +
test edx edx +
jz loc_45A1E6  +
mov esi 50h +
jmp loc_45A1E6  +
mov eax [esp+48h+arg_C] +
xor esi esi +
mov dword ptr [ebx+10h] 0 +
mov dword ptr [eax] 50h +
mov eax ecx +
mov edx [esp+48h+var_38] +
mov [edx] eax +
mov eax [esp+48h+arg_0] +
mov [esp+48h+var_40] ebx +
mov dword ptr [esp+48h+var_48+4] edi +
mov dword ptr [esp+48h+var_48] eax +
call sub_45CFC0  +
mov eax [esp+48h+arg_C] +
or [eax] esi +
mov eax 1 +
mov dword ptr [esp+48h+var_48] ebx +
mov [esp+48h+var_38] eax +
call sub_45C480  +
mov eax [esp+48h+var_38] +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edx [ebp+8] +
cmp edx eax +
jge loc_45A1E6  +
mov eax [esp+48h+arg_C] +
add edx 1 +
xor esi esi +
mov [esp+48h+var_1C] edx +
mov dword ptr [eax] 0A3h +
call _errno  +
mov dword ptr [eax] 22h +
mov eax [esp+48h+var_1C] +
mov dword ptr [ebx+10h] 0 +
jmp loc_45A1E6  +
mov edx [esp+48h+arg_4] +
test edx edx +
jz loc_45A287  +
test esi esi +
jnz loc_45A2F2  +
mov [esp+48h+var_30] 0 +
jmp loc_45A152  +
mov ecx [esp+48h+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_45A20B  +
cmp dword ptr [ebp+0Ch] 1 +
jnz loc_45A20B  +
jmp loc_45A110  +
xor eax eax +
jmp loc_45A20B  +
mov dword ptr [esp+48h+var_48] ebx +
call sub_459FD0  +
mov ecx edi +
and ecx 1Fh +
mov ebx eax +
jz loc_45A2AA  +
mov eax 20h +
sub eax ecx +
mov ecx eax +
mov eax [ebx+10h] +
bsr eax [ebx+eax*4+10h] +
xor eax 1Fh +
cmp ecx eax +
jz loc_45A315  +
mov eax [esp+48h+var_30] +
test eax eax +
jnz loc_45A2CD  +
mov eax [ebx+14h] +
mov [esp+48h+var_30] eax +
and [esp+48h+var_30] 1 +
mov dword ptr [esp+48h+var_48+4] 1 +
mov esi 20h +
mov dword ptr [esp+48h+var_48] ebx +
call sub_45D0B0  +
mov eax [esp+48h+var_1C] +
add eax 1 +
mov [esp+48h+var_1C] eax +
jmp loc_45A152  +
neg esi  +
mov dword ptr [esp+48h+var_48+4] esi +
xor esi esi +
mov dword ptr [esp+48h+var_48] ebx +
call sub_45C8F0  +
mov [esp+48h+var_30] 0 +
mov ebx eax +
mov eax [esp+48h+var_1C] +
jmp loc_45A152  +
mov eax [esp+48h+var_1C] +
mov esi 20h +
jmp loc_45A152  +
test al al +
jz loc_45A192  +
mov dword ptr [esp+48h+var_48+4] ecx +
mov dword ptr [esp+48h+var_48] ebx +
mov [esp+48h+var_2C] edx +
mov [esp+48h+var_34] ecx +
call sub_45D030  +
mov edx [esp+48h+var_2C] +
mov ecx [esp+48h+var_34] +
test eax eax +
mov [esp+48h+var_30] eax +
setz al  +
jmp loc_45A184  +
mov dword ptr [esp+48h+var_48] ebx +
mov esi 60h +
call sub_459FD0  +
mov ebx eax +
mov eax [esp+48h+var_1C] +
jmp loc_45A1E6  +
***
mov edx [esp+4] +
lea eax [edx+14h] +
mov edx [edx+10h] +
lea ecx [eax+edx*4] +
jmp loc_45A38E  +
add eax 4 +
cmp ecx eax +
mov dword ptr [eax-4] 0FFFFFFFFh +
jbe locret_45A3A0  +
mov edx [eax] +
test edx edx +
jz loc_45A380  +
sub edx 1 +
mov [eax] edx +
retn   +
***
retn   +
***
sub esp 14h +
mov esi [esp+14h+arg_4] +
mov eax [esp+14h+arg_0] +
lea ebx [esi+1Fh] +
sar ebx 5 +
cmp ebx [eax+4] +
jg loc_45A413  +
mov edx esi +
and esi 1Fh +
sar edx 5 +
cmp esi 1 +
sbb edx 0FFFFFFFFh +
lea ebx [eax+14h] +
lea ecx [ebx+edx*4] +
cmp ebx ecx +
mov [eax+10h] edx +
jnb loc_45A3FF  +
mov edx ebx +
add edx 4 +
cmp ecx edx +
mov dword ptr [edx-4] 0FFFFFFFFh +
ja loc_45A3E5  +
sub ecx eax +
lea edx [ecx-15h] +
shr edx 2 +
lea ebx [ebx+edx*4+4] +
test esi esi +
jz loc_45A40D  +
mov ecx 20h +
sub ecx esi +
shr dword ptr [ebx-4] cl +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov [esp+14h+var_14] eax +
call sub_45C480  +
mov [esp+14h+var_14] ebx +
call sub_45C3B0  +
jmp loc_45A3C8  +
***
push esi  +
push ebx  +
sub esp 0CCh +
call localeconv  +
mov esi [eax] +
mov dword ptr [esp+0CCh+var_CC] esi +
call strlen  +
mov [esp+0CCh+var_28] 0 +
mov [esp+0CCh+var_18] 0 +
mov [esp+0CCh+var_A8] eax +
mov eax [esp+0CCh+arg_8] +
fldz   +
fstp  [esp+0CCh+var_14] +
mov eax [eax] +
mov [esp+0CCh+var_A0] eax +
mov eax [esp+0CCh+arg_0] +
mov ecx eax +
mov [esp+0CCh+var_1C] eax +
movsx edx byte ptr [ecx] +
cmp dl 2Dh +
ja loc_45A5F0  +
movzx eax dl +
jmp ds:off_482C8C[eax*4]  +
mov eax [esp+0CCh+arg_0] +
xor ecx ecx +
mov [esp+0CCh+var_28] 6 +
mov [esp+0CCh+var_90] 0 +
mov [esp+0CCh+var_1C] eax +
mov edx [esp+0CCh+arg_4] +
test edx edx +
jz loc_45A4DE  +
mov eax [esp+0CCh+var_1C] +
mov esi [esp+0CCh+arg_4] +
mov [esi] eax +
mov eax [esp+0CCh+var_90] +
test eax eax +
jnz loc_45A526  +
test ecx ecx +
jz loc_45A514  +
mov eax [esp+0CCh+var_A0] +
mov [esp+0CCh+var_C4] ecx +
mov dword ptr [esp+0CCh+var_CC+4] eax +
mov eax [esp+0CCh+arg_10] +
mov dword ptr [esp+0CCh+var_CC] eax +
call sub_45CFC0  +
mov eax [esp+0CCh+var_18] +
mov dword ptr [esp+0CCh+var_CC] eax +
call sub_45C480  +
mov eax [esp+0CCh+var_28] +
add esp 0CCh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
or [esp+0CCh+var_28] 8 +
jmp loc_45A4E6  +
mov [esp+0CCh+var_90] 0 +
lea eax [ecx+1] +
mov [esp+0CCh+var_1C] eax +
movsx edx byte ptr [ecx+1] +
test dl dl +
jz loc_45A4A0  +
mov ecx eax +
cmp dl 30h +
mov [esp+0CCh+var_A4] ecx +
mov [esp+0CCh+var_94] 0 +
jz loc_45AB82  +
mov eax [esp+0CCh+arg_8] +
mov eax [eax+10h] +
mov [esp+0CCh+var_54] eax +
lea eax [edx-30h] +
cmp al 9 +
ja loc_45BA13  +
mov eax [esp+0CCh+var_A4] +
xor edi edi +
xor ebp ebp +
mov [esp+0CCh+var_AC] esi +
xor ebx ebx +
mov esi edi +
add eax 1 +
jmp loc_45A5B5  +
lea ecx [ebp+ebp*4+0] +
lea ebp [edx+ecx*2-30h] +
mov [esp+0CCh+var_1C] eax +
movsx edx byte ptr [eax] +
add ebx 1 +
mov edi eax +
add eax 1 +
lea ecx [edx-30h] +
cmp cl 9 +
ja loc_45A600  +
cmp ebx 8 +
jle loc_45A593  +
cmp ebx 0Fh +
jg loc_45A59B  +
lea ecx [esi+esi*4] +
lea esi [edx+ecx*2-30h] +
jmp loc_45A59B  +
mov [esp+0CCh+var_90] 1 +
jmp loc_45A538  +
add ecx 1 +
mov [esp+0CCh+var_1C] ecx +
movsx edx byte ptr [ecx] +
cmp dl 2Dh +
jbe loc_45A495  +
nop   +
lea esi [esi+0] +
mov [esp+0CCh+var_90] 0 +
jmp loc_45A550  +
mov dword ptr [esp+0CCh+var_8C] esi +
mov esi [esp+0CCh+var_AC] +
mov ecx edi +
movsx eax byte ptr [esi] +
cmp eax edx +
mov dword ptr [esp+0CCh+var_9C] eax +
jz loc_45ABD0  +
mov [esp+0CCh+var_AC] ebx +
xor edi edi +
mov dword ptr [esp+0CCh+var_9C] 0 +
mov [esp+0CCh+var_84] 0 +
mov eax edx +
and eax 0FFFFFFDFh +
cmp eax 45h +
jnz loc_45A755  +
mov eax [esp+0CCh+var_AC] +
or eax edi +
or eax [esp+0CCh+var_94] +
jz loc_45A850  +
mov eax [esp+0CCh+var_1C] +
mov [esp+0CCh+arg_0] eax +
add eax 1 +
mov [esp+0CCh+var_1C] eax +
mov eax [esp+0CCh+arg_0] +
movsx edx byte ptr [eax+1] +
cmp dl 2Bh +
jz loc_45B9B0  +
cmp dl 2Dh +
jz loc_45AD74  +
mov [esp+0CCh+var_80] 0 +
lea eax [edx-30h] +
cmp eax 9 +
ja loc_45AEA0  +
cmp edx 30h +
jnz loc_45A6B7  +
mov eax [esp+0CCh+var_1C] +
add eax 1 +
mov [esp+0CCh+var_1C] eax +
movsx edx byte ptr [eax] +
add eax 1 +
cmp edx 30h +
jz loc_45A6A5  +
lea ecx [edx-31h] +
xor eax eax +
cmp ecx 8 +
ja loc_45A757  +
mov eax [esp+0CCh+var_1C] +
lea ecx [edx-30h] +
lea esi [eax+1] +
mov [esp+0CCh+var_1C] esi +
mov [esp+0CCh+var_78] eax +
mov [esp+0CCh+var_7C] esi +
mov esi eax +
movzx eax byte ptr [eax+1] +
movsx edx al +
sub eax 30h +
cmp al 9 +
ja loc_45A72B  +
mov eax esi +
mov esi edx +
add eax 2 +
mov [esp+0CCh+var_74] edi +
lea esi [esi+0] +
lea edx [ecx+ecx*4] +
mov edi eax +
lea ecx [esi+edx*2-30h] +
mov [esp+0CCh+var_1C] eax +
movzx edx byte ptr [eax] +
add eax 1 +
movsx esi dl +
sub edx 30h +
cmp dl 9 +
jbe loc_45A700  +
mov [esp+0CCh+var_7C] edi +
mov edi [esp+0CCh+var_74] +
mov edx esi +
mov esi [esp+0CCh+var_7C] +
mov eax 4E1Fh +
sub esi [esp+0CCh+var_78] +
cmp esi 8 +
jg loc_45A746  +
cmp ecx 4E1Fh +
cmovle eax ecx +
mov esi [esp+0CCh+var_80] +
mov ecx eax +
neg ecx  +
test esi esi +
cmovnz eax ecx +
jmp loc_45A757  +
xor eax eax +
mov ecx [esp+0CCh+var_AC] +
test ecx ecx +
jnz loc_45A896  +
mov eax [esp+0CCh+var_94] +
or eax edi +
jnz loc_45A88A  +
mov eax [esp+0CCh+var_84] +
test eax eax +
jnz loc_45A850  +
cmp edx 4Eh +
jz loc_45A798  +
jle loc_45A844  +
cmp edx 69h +
jz loc_45BAE8  +
cmp edx 6Eh +
jnz loc_45A850  +
lea ebx [esp+0CCh+var_1C] +
mov dword ptr [esp+0CCh+var_CC+4] offset aAn +
mov dword ptr [esp+0CCh+var_CC] ebx +
call sub_45CF70  +
test eax eax +
jz loc_45A850  +
mov eax [esp+0CCh+arg_8] +
mov esi [esp+0CCh+arg_C] +
mov edx [esp+0CCh+var_1C] +
mov [esp+0CCh+var_28] 4 +
mov eax [eax+8] +
mov [esp+0CCh+var_94] 0 +
mov [esp+0CCh+var_AC] eax +
add eax 1 +
mov [esi] eax +
cmp byte ptr [edx] 28h +
jz loc_45BE88  +
mov esi [esp+0CCh+arg_C] +
mov [esi] eax +
mov ecx [esp+0CCh+var_18] +
mov edi [esp+0CCh+var_94] +
test edi edi +
jz loc_45A4C3  +
mov esi [esp+0CCh+var_54] +
test esi esi +
jnz loc_45AE70  +
mov edx [esp+0CCh+var_28] +
xor eax eax +
mov ebx [ecx+10h] +
and edx 0FFFFFFF8h +
test ebx ebx +
setnle al  +
add eax eax +
or eax edx +
test al 30h +
jnz loc_45A875  +
mov [esp+0CCh+var_28] eax +
jmp loc_45A4C3  +
cmp edx 49h +
jz loc_45BAE8  +
lea esi [esi+0] +
mov eax [esp+0CCh+arg_0] +
mov [esp+0CCh+var_28] 6 +
mov ecx [esp+0CCh+var_18] +
mov [esp+0CCh+var_1C] eax +
jmp loc_45A4C3  +
or eax 40h +
mov [esp+0CCh+var_28] eax +
call _errno  +
mov dword ptr [eax] 22h +
mov ecx [esp+0CCh+var_18] +
jmp loc_45A4C3  +
sub eax dword ptr [esp+0CCh+var_9C] +
mov edi [esp+0CCh+var_90] +
mov [esp+0CCh+var_28] 1 +
mov [esp+0CCh+var_74] eax +
mov eax [esp+0CCh+arg_8] +
mov eax [eax+0Ch] +
and eax 3 +
mov esi eax +
sub esi edi +
cmp eax 2 +
mov [esp+0CCh+var_64] esi +
jz loc_45A8E1  +
mov esi edi +
add esi 1 +
cmp eax 3 +
mov [esp+0CCh+var_64] esi +
jz loc_45A8E1  +
test eax eax +
setz al  +
movzx eax al +
mov [esp+0CCh+var_64] eax +
mov eax [esp+0CCh+var_AC] +
test ebx ebx +
mov esi 10h +
mov dword ptr [esp+0CCh+var_4C] ebp +
cmovz ebx eax +
cmp eax 10h +
cmovle esi eax +
xor edx edx +
mov dword ptr [esp+0CCh+var_4C+4] edx +
cmp esi 9 +
fild  [esp+0CCh+var_4C] +
fst  [esp+0CCh+var_14] +
jle loc_45A945  +
fmul  ds:dbl_482DD8[esi*8] +
xor edx edx +
mov eax dword ptr [esp+0CCh+var_8C] +
mov dword ptr [esp+0CCh+var_4C+4] edx +
mov dword ptr [esp+0CCh+var_4C] eax +
fild  [esp+0CCh+var_4C] +
faddp st(1) st +
fstp  [esp+0CCh+var_14] +
jmp loc_45A947  +
fstp  st +
cmp [esp+0CCh+var_AC] 0Fh +
jg loc_45A959  +
cmp [esp+0CCh+var_A0] 35h +
jle loc_45AAD3  +
mov eax [esp+0CCh+var_74] +
mov edx [esp+0CCh+var_AC] +
sub edx esi +
add eax edx +
cmp eax 0 +
jle loc_45B8C9  +
mov edx eax +
and edx 0Fh +
jz loc_45A98A  +
fld  [esp+0CCh+var_14] +
fmul  ds:dbl_482E20[edx*8] +
fstp  [esp+0CCh+var_14] +
and eax 0FFFFFFF0h +
jnz loc_45ACB6  +
fld  [esp+0CCh+var_14] +
xor esi esi +
lea eax [esp+0CCh+var_24] +
mov [esp+0CCh+var_C0] eax +
lea eax [esp+0CCh+var_20] +
mov [esp+0CCh+var_C4] eax +
fstp  [esp+0CCh+var_CC] +
call sub_45CCC0  +
mov ecx [esp+0CCh+var_24] +
add esi [esp+0CCh+var_20] +
mov edi [esp+0CCh+var_A0] +
mov edx esi +
mov [esp+0CCh+var_20] esi +
mov esi ecx +
sub esi edi +
test esi esi +
mov [esp+0CCh+var_18] eax +
jle loc_45AA09  +
mov dword ptr [esp+0CCh+var_CC+4] esi +
mov dword ptr [esp+0CCh+var_CC] eax +
call sub_45D0B0  +
mov ecx edi +
add esi [esp+0CCh+var_20] +
mov [esp+0CCh+var_24] edi +
mov edx esi +
mov [esp+0CCh+var_20] esi +
lea eax [ecx+edx] +
mov [esp+0CCh+var_60] eax +
mov eax [esp+0CCh+var_A0] +
sub [esp+0CCh+var_60] eax +
mov eax [esp+0CCh+arg_8] +
mov esi [esp+0CCh+var_60] +
mov eax [eax+8] +
mov [esp+0CCh+var_94] eax +
add eax 1 +
cmp esi eax +
jg loc_45B7E4  +
mov eax [esp+0CCh+arg_8] +
mov eax [eax+4] +
cmp esi eax +
mov [esp+0CCh+var_84] eax +
jge loc_45B9E6  +
mov esi edx +
sub esi eax +
cmp esi 0 +
jle loc_45ADF8  +
mov eax [esp+0CCh+var_18] +
mov dword ptr [esp+0CCh+var_CC+4] esi +
mov dword ptr [esp+0CCh+var_CC] eax +
call sub_45C8F0  +
add [esp+0CCh+var_24] esi +
mov [esp+0CCh+var_18] eax +
mov eax [esp+0CCh+var_84] +
mov [esp+0CCh+var_20] eax +
mov eax [esp+0CCh+var_54] +
test eax eax +
jz loc_45AEB5  +
mov eax [esp+0CCh+var_60] +
add eax 1 +
cmp [esp+0CCh+var_84] eax +
jle loc_45AEB5  +
mov ecx [esp+0CCh+var_18] +
mov eax [esp+0CCh+arg_C] +
mov ebx [esp+0CCh+var_84] +
mov [esp+0CCh+var_28] 50h +
mov dword ptr [ecx+10h] 0 +
mov dword ptr [ecx+14h] 0 +
mov [eax] ebx +
jmp loc_45A810  +
cmp [esp+0CCh+var_74] 0 +
jz loc_45B9F3  +
jle loc_45AE29  +
cmp [esp+0CCh+var_74] 16h +
jg loc_45BA28  +
mov eax [esp+0CCh+var_74] +
mov edx ds:dword_482D60[eax*4] +
mov eax dword ptr [esp+0CCh+var_14] +
test eax eax +
jz loc_45BC20  +
bsf ecx eax +
mov eax 35h +
sub eax ecx +
mov edi [esp+0CCh+var_74] +
add eax edx +
fld  [esp+0CCh+var_14] +
cmp eax 35h +
setle al  +
lea ecx [esp+0CCh+var_28] +
movzx eax al +
fmul  ds:dbl_482E20[edi*8] +
mov edi [esp+0CCh+var_64] +
mov [esp+0CCh+var_C0] ecx +
mov dword ptr [esp+0CCh+var_CC+4] eax +
mov [esp+0CCh+var_C4] edi +
fstp  [esp+0CCh+var_14] +
mov eax [esp+0CCh+arg_10] +
mov ecx [esp+0CCh+arg_C] +
mov edx [esp+0CCh+arg_8] +
mov dword ptr [esp+0CCh+var_CC] eax +
lea eax [esp+0CCh+var_14] +
call sub_45A070  +
test eax eax +
jnz loc_45A88A  +
xor eax eax +
jmp loc_45A95D  +
movzx eax byte ptr [ecx+1] +
cmp al 58h +
jz loc_45B822  +
add ecx 1 +
cmp al 78h +
jz loc_45B822  +
lea esi [esi+0] +
mov eax ecx +
mov [esp+0CCh+var_1C] ecx +
add ecx 1 +
movsx edx byte ptr [ecx-1] +
cmp dl 30h +
jz loc_45ABA0  +
xor ecx ecx +
test dl dl +
jz loc_45A4C3  +
mov [esp+0CCh+var_A4] eax +
mov [esp+0CCh+var_94] 1 +
jmp loc_45A565  +
movzx eax byte ptr [esi+1] +
test al al +
jz loc_45BD72  +
cmp al [ecx+1] +
jnz loc_45A619  +
mov eax 1 +
jmp loc_45ABF9  +
cmp dl [ecx+eax] +
jnz loc_45AC97  +
add eax 1 +
movzx edx byte ptr [esi+eax] +
mov edi eax +
test dl dl +
jnz loc_45ABF0  +
add ecx edi +
test ebx ebx +
mov [esp+0CCh+var_1C] ecx +
movsx edx byte ptr [ecx] +
jz loc_45AD9D  +
mov [esp+0CCh+var_AC] ebx +
xor edi edi +
mov dword ptr [esp+0CCh+var_9C] 0 +
lea esi [edx-30h] +
cmp esi 9 +
mov [esp+0CCh+var_84] 1 +
ja loc_45A62F  +
mov ecx [esp+0CCh+var_1C] +
add edi 1 +
test esi esi +
jz loc_45BAD5  +
add dword ptr [esp+0CCh+var_9C] edi +
cmp edi 1 +
mov eax [esp+0CCh+var_AC] +
jz loc_45BD1B  +
add edi eax +
mov [esp+0CCh+var_AC] edi +
sub edi 1 +
mov [esp+0CCh+var_84] ebx +
mov ebx dword ptr [esp+0CCh+var_8C] +
jmp loc_45AC80  +
lea ebp [ebp+ebp*4+0] +
add ebp ebp +
cmp eax edi +
jz loc_45BD0C  +
add eax 1 +
lea edx [eax-1] +
cmp edx 8 +
jle loc_45AC72  +
cmp eax 10h +
jg loc_45AC78  +
lea ebx [ebx+ebx*4] +
add ebx ebx +
jmp loc_45AC78  +
mov edx dword ptr [esp+0CCh+var_9C] +
xor edi edi +
mov [esp+0CCh+var_AC] ebx +
mov dword ptr [esp+0CCh+var_9C] 0 +
mov [esp+0CCh+var_84] 0 +
jmp loc_45A62F  +
sar eax 4 +
cmp eax 0Fh +
jle loc_45BDFC  +
fld  ds:dbl_482F40 +
mov ecx eax +
xor edi edi +
lea esi [esi+0] +
mov edx dword ptr [esp+0CCh+var_14+4] +
sub ecx 10h +
mov esi edx +
and edx 800FFFFFh +
or edx 3FF00000h +
and esi 7FF00000h +
mov dword ptr [esp+0CCh+var_14+4] edx +
shr esi 14h +
cmp ecx 0Fh +
fld  [esp+0CCh+var_14] +
lea edi [edi+esi-3FFh] +
fmul st st(1) +
fstp  [esp+0CCh+var_14] +
jg loc_45ACD0  +
fstp  st +
and eax 0Fh +
mov ecx dword ptr [esp+0CCh+var_14+4] +
mov edx ecx +
and ecx 800FFFFFh +
and edx 7FF00000h +
or ecx 3FF00000h +
shr edx 14h +
lea esi [edi+edx-3FFh] +
xor edx edx +
mov dword ptr [esp+0CCh+var_14+4] ecx +
test eax eax +
fld  [esp+0CCh+var_14] +
jz loc_45A99C  +
test al 1 +
jz loc_45AD61  +
fmul  ds:dbl_482F20[edx*8] +
add edx 1 +
sar eax 1 +
jnz loc_45AD56  +
fst  [esp+0CCh+var_14] +
jmp loc_45A99C  +
mov [esp+0CCh+var_80] 1 +
mov eax [esp+0CCh+arg_0] +
add eax 2 +
mov [esp+0CCh+var_1C] eax +
mov eax [esp+0CCh+arg_0] +
movsx edx byte ptr [eax+2] +
jmp loc_45A68A  +
cmp edx 30h +
jnz loc_45BE41  +
lea eax [ecx+1] +
lea esi [esi+0] +
mov [esp+0CCh+var_1C] eax +
movsx edx byte ptr [eax] +
mov edi eax +
sub edi ecx +
add eax 1 +
cmp edx 30h +
jz loc_45ADB0  +
lea eax [edx-31h] +
cmp eax 8 +
ja loc_45BAA1  +
mov eax [esp+0CCh+var_1C] +
lea esi [edx-30h] +
mov dword ptr [esp+0CCh+var_9C] edi +
mov edi 1 +
mov [esp+0CCh+var_AC] 0 +
mov [esp+0CCh+var_A4] eax +
mov ecx eax +
jmp loc_45AC46  +
jz loc_45AA79  +
add ecx esi +
test ecx ecx +
mov [esp+0CCh+var_24] ecx +
jle loc_45BE03  +
mov eax [esp+0CCh+var_18] +
neg esi  +
mov dword ptr [esp+0CCh+var_CC+4] esi +
mov dword ptr [esp+0CCh+var_CC] eax +
call sub_45D0B0  +
jmp loc_45AA79  +
mov edi [esp+0CCh+var_74] +
cmp edi 0FFFFFFEAh +
mov eax edi +
jl loc_45A95D  +
neg eax  +
fld  [esp+0CCh+var_14] +
fdiv  ds:dbl_482E20[eax*8] +
lea eax [esp+0CCh+var_28] +
mov [esp+0CCh+var_C0] eax +
mov eax [esp+0CCh+var_64] +
fstp  [esp+0CCh+var_14] +
mov dword ptr [esp+0CCh+var_CC+4] 0 +
mov [esp+0CCh+var_C4] eax +
jmp loc_45AB4F  +
mov dword ptr [ecx+10h] 0 +
mov [esp+0CCh+var_28] 50h +
call _errno  +
mov ecx [esp+0CCh+var_18] +
mov dword ptr [eax] 22h +
jmp loc_45A4C3  +
mov eax [esp+0CCh+arg_0] +
mov [esp+0CCh+var_1C] eax +
xor eax eax +
jmp loc_45A757  +
mov eax [esp+0CCh+var_84] +
mov [esp+0CCh+var_94] 1 +
mov [esp+0CCh+var_60] eax +
mov eax [esp+0CCh+var_A8] +
mov dword ptr [esp+0CCh+var_CC+4] ebx +
xor ebx ebx +
mov [esp+0CCh+var_C0] ebp +
mov [esp+0CCh+var_BC] eax +
mov eax [esp+0CCh+var_AC] +
mov [esp+0CCh+var_C4] eax +
mov eax [esp+0CCh+var_A4] +
mov dword ptr [esp+0CCh+var_CC] eax +
call sub_45CDF0  +
mov esi [esp+0CCh+var_74] +
mov dword ptr [esp+0CCh+var_9C] 0 +
mov [esp+0CCh+var_68] eax +
add eax 0Ch +
mov [esp+0CCh+var_5C] eax +
mov eax [esp+0CCh+var_A0] +
add eax 1 +
mov [esp+0CCh+var_58] eax +
mov eax esi +
neg eax  +
test esi esi +
cmovns eax ebx +
mov [esp+0CCh+var_80] eax +
mov eax [esp+0CCh+var_64] +
and eax 1 +
mov [esp+0CCh+var_50] eax +
jmp loc_45B100  +
mov esi [esp+0CCh+var_64] +
test esi esi +
jz loc_45B2ED  +
mov eax [esp+0CCh+var_50] +
xor eax ebx +
mov [esp+0CCh+var_78] eax +
jz loc_45BB50  +
test ebx ebx +
jz loc_45B560  +
fld1   +
xor esi esi +
fst  [esp+0CCh+var_9C] +
mov [esp+0CCh+var_28] 21h +
fstp  [esp+0CCh+var_8C] +
mov [esp+0CCh+var_70] 20h +
mov [esp+0CCh+var_7C] 0 +
mov eax [esp+0CCh+var_24] +
mov ebx [esp+0CCh+var_20] +
mov edx [esp+0CCh+var_94] +
add ebx eax +
test edx edx +
mov [esp+0CCh+var_6C] ebx +
jnz loc_45AFA1  +
cmp [esp+0CCh+var_A0] eax +
jg loc_45B732  +
lea eax [esp+0CCh+var_2C] +
fld  [esp+0CCh+var_9C] +
mov [esp+0CCh+var_C0] eax +
lea eax [esp+0CCh+var_30] +
mov [esp+0CCh+var_C4] eax +
fstp  [esp+0CCh+var_CC] +
call sub_45CCC0  +
mov ebp eax +
mov eax [esp+0CCh+var_30] +
test eax eax +
js loc_45B767  +
jz loc_45AFE4  +
mov dword ptr [esp+0CCh+var_CC] ebp +
mov dword ptr [esp+0CCh+var_CC+4] eax +
call sub_45C8F0  +
mov ebp eax +
mov eax [esp+0CCh+var_7C] +
mov ebx [esp+0CCh+var_18] +
mov dword ptr [esp+0CCh+var_CC+4] ebp +
test eax eax +
mov dword ptr [esp+0CCh+var_CC] ebx +
jz loc_45B476  +
call sub_45CA50  +
mov ecx [esp+0CCh+var_94] +
mov edx [ebx+10h] +
test ecx ecx +
mov [esp+0CCh+var_18] eax +
jnz loc_45B052  +
lea ecx [edx-1] +
cmp ecx [eax+10h] +
jge loc_45B034  +
add edx 3 +
bsr ecx [eax+edx*4+4] +
bsr edx [ebx+edx*4+4] +
xor ecx 1Fh +
xor edx 1Fh +
cmp ecx edx +
jle loc_45B052  +
mov ecx [esp+0CCh+var_84] +
cmp [esp+0CCh+var_60] ecx +
jnz loc_45B512  +
sub [esp+0CCh+var_24] 1 +
mov [esp+0CCh+var_94] 1 +
mov dword ptr [esp+0CCh+var_CC] ebp +
call sub_45C480  +
mov dword ptr [esp+0CCh+var_CC] ebx +
call sub_45C480  +
mov eax [esp+0CCh+var_78] +
test eax eax +
jnz loc_45B360  +
test esi esi +
jz loc_45B0C0  +
mov eax [esp+0CCh+var_20] +
add eax [esp+0CCh+var_24] +
cmp [esp+0CCh+var_6C] eax +
jnz loc_45B0C0  +
fld  [esp+0CCh+var_9C] +
fmul  ds:dbl_482DD0 +
fld  [esp+0CCh+var_8C] +
fsub  ds:flt_482DC4 +
fld  st(1) +
fchs   +
fucomip st st(1) +
jbe loc_45B700  +
fstp  st +
fld  [esp+0CCh+var_8C] +
fucomip st st(1) +
fstp  st +
jbe loc_45B0C0  +
jmp loc_45B71E  +
fstp  st +
lea esi [esi+0] +
mov eax [esp+0CCh+var_94] +
mov dword ptr [esp+0CCh+var_9C] 0 +
test eax eax +
jz loc_45B546  +
mov eax [esp+0CCh+var_AC] +
mov dword ptr [esp+0CCh+var_CC] eax +
call sub_45C480  +
mov eax [esp+0CCh+var_A4] +
mov dword ptr [esp+0CCh+var_CC] eax +
call sub_45C480  +
mov eax [esp+0CCh+var_A8] +
mov dword ptr [esp+0CCh+var_CC] eax +
call sub_45C480  +
mov dword ptr [esp+0CCh+var_CC] edi +
call sub_45C480  +
mov esi [esp+0CCh+var_68] +
mov eax [esi+4] +
mov dword ptr [esp+0CCh+var_CC] eax +
call sub_45C3B0  +
mov edx [esi+10h] +
mov esi [esp+0CCh+var_5C] +
lea edx ds:8[edx*4] +
mov [esp+0CCh+var_C4] edx +
mov [esp+0CCh+var_A4] eax +
add eax 0Ch +
mov dword ptr [esp+0CCh+var_CC+4] esi +
xor esi esi +
mov dword ptr [esp+0CCh+var_CC] eax +
call memcpy  +
mov eax [esp+0CCh+var_18] +
mov eax [eax+4] +
mov dword ptr [esp+0CCh+var_CC] eax +
call sub_45C3B0  +
mov ebx eax +
mov [esp+0CCh+var_AC] eax +
mov eax [esp+0CCh+var_18] +
lea edx [ebx+0Ch] +
mov ecx [eax+10h] +
add eax 0Ch +
mov dword ptr [esp+0CCh+var_CC] edx +
mov dword ptr [esp+0CCh+var_CC+4] eax +
lea ecx ds:8[ecx*4] +
mov [esp+0CCh+var_C4] ecx +
call memcpy  +
mov edi dword ptr [esp+0CCh+var_9C] +
mov ebp [esp+0CCh+var_24] +
mov dword ptr [esp+0CCh+var_CC] 1 +
sub ebp edi +
add edi [esp+0CCh+var_20] +
call sub_45C5D0  +
mov [esp+0CCh+var_A8] eax +
mov eax [esp+0CCh+var_74] +
test eax eax +
cmovg esi eax +
test edi edi +
js loc_45B505  +
mov eax [esp+0CCh+var_80] +
mov edx esi +
lea ebx [eax+edi] +
mov eax [esp+0CCh+var_58] +
add edi ebp +
sub edi [esp+0CCh+var_A0] +
sub eax ebp +
cmp [esp+0CCh+var_84] edi +
jle loc_45B1CB  +
sub edi [esp+0CCh+var_84] +
add eax edi +
lea edi [ebx+eax] +
add edx eax +
cmp edi edx +
mov eax edx +
cmovle eax edi +
cmp eax ebx +
cmovg eax ebx +
test eax eax +
jle loc_45B1E6  +
sub edi eax +
sub edx eax +
sub ebx eax +
mov eax [esp+0CCh+var_80] +
test eax eax +
jz loc_45B232  +
mov dword ptr [esp+0CCh+var_CC+4] eax +
mov eax [esp+0CCh+var_A8] +
mov [esp+0CCh+var_7C] edx +
mov dword ptr [esp+0CCh+var_CC] eax +
call sub_45C750  +
mov ecx [esp+0CCh+var_AC] +
mov dword ptr [esp+0CCh+var_CC+4] ecx +
mov dword ptr [esp+0CCh+var_CC] eax +
mov [esp+0CCh+var_A8] eax +
call sub_45C600  +
mov ecx [esp+0CCh+var_AC] +
mov dword ptr [esp+0CCh+var_CC] ecx +
mov dword ptr [esp+0CCh+var_8C] eax +
call sub_45C480  +
mov eax dword ptr [esp+0CCh+var_8C] +
mov edx [esp+0CCh+var_7C] +
mov [esp+0CCh+var_AC] eax +
sub edi dword ptr [esp+0CCh+var_9C] +
cmp edi 0 +
jle loc_45B4E0  +
mov eax [esp+0CCh+var_AC] +
mov dword ptr [esp+0CCh+var_CC+4] edi +
mov dword ptr [esp+0CCh+var_9C] edx +
mov dword ptr [esp+0CCh+var_CC] eax +
call sub_45C8F0  +
mov edx dword ptr [esp+0CCh+var_9C] +
mov [esp+0CCh+var_AC] eax +
test esi esi +
jz loc_45B27B  +
mov eax [esp+0CCh+var_A4] +
mov dword ptr [esp+0CCh+var_CC+4] esi +
mov dword ptr [esp+0CCh+var_9C] edx +
mov dword ptr [esp+0CCh+var_CC] eax +
call sub_45C750  +
mov edx dword ptr [esp+0CCh+var_9C] +
mov [esp+0CCh+var_A4] eax +
test edx edx +
jle loc_45B293  +
mov eax [esp+0CCh+var_A4] +
mov dword ptr [esp+0CCh+var_CC+4] edx +
mov dword ptr [esp+0CCh+var_CC] eax +
call sub_45C8F0  +
mov [esp+0CCh+var_A4] eax +
test ebx ebx +
jle loc_45B2AB  +
mov eax [esp+0CCh+var_A8] +
mov dword ptr [esp+0CCh+var_CC+4] ebx +
mov dword ptr [esp+0CCh+var_CC] eax +
call sub_45C8F0  +
mov [esp+0CCh+var_A8] eax +
mov eax [esp+0CCh+var_A4] +
mov dword ptr [esp+0CCh+var_CC+4] eax +
mov eax [esp+0CCh+var_AC] +
mov dword ptr [esp+0CCh+var_CC] eax +
call sub_45CA50  +
cmp dword ptr [eax+10h] 1 +
mov edi eax +
jle loc_45B355  +
mov eax [esp+0CCh+var_A8] +
mov ebx [edi+0Ch] +
mov dword ptr [edi+0Ch] 0 +
mov dword ptr [esp+0CCh+var_CC] edi +
mov dword ptr [esp+0CCh+var_CC+4] eax +
call sub_45CA00  +
test eax eax +
jle loc_45AF30  +
test eax eax +
js loc_45BB6B  +
jz loc_45BC4D  +
mov eax [esp+0CCh+var_A8] +
mov dword ptr [esp+0CCh+var_CC] edi +
mov dword ptr [esp+0CCh+var_CC+4] eax +
call sub_45CEE0  +
fld  ds:flt_482DC0 +
fucomip st st(1) +
jb loc_45B610  +
fstp  st +
test ebx ebx +
jnz loc_45B793  +
mov [esp+0CCh+var_78] 0 +
cmp ebp 1 +
jle loc_45BD39  +
fld1   +
xor esi esi +
fst  [esp+0CCh+var_9C] +
mov [esp+0CCh+var_70] 10h +
fstp  [esp+0CCh+var_8C] +
mov [esp+0CCh+var_7C] 1 +
jmp loc_45AF7B  +
mov eax [eax+14h] +
test eax eax +
jnz loc_45B2CB  +
mov ebp [esp+0CCh+var_AC] +
mov eax [esp+0CCh+var_94] +
test eax eax +
jz loc_45B89F  +
mov eax [esp+0CCh+var_20] +
mov ebx [esp+0CCh+arg_C] +
mov [ebx] eax +
mov dword ptr [esp+0CCh+var_CC] ebp +
call sub_45C480  +
mov eax [esp+0CCh+var_A4] +
mov dword ptr [esp+0CCh+var_CC] eax +
call sub_45C480  +
mov eax [esp+0CCh+var_A8] +
mov dword ptr [esp+0CCh+var_CC] eax +
call sub_45C480  +
mov eax [esp+0CCh+var_68] +
mov dword ptr [esp+0CCh+var_CC] eax +
call sub_45C480  +
mov dword ptr [esp+0CCh+var_CC] edi +
call sub_45C480  +
mov eax [esp+0CCh+arg_8] +
mov esi [esp+0CCh+var_20] +
cmp [eax+8] esi +
jge loc_45A7FD  +
mov eax [esp+0CCh+arg_8] +
mov eax [eax+0Ch] +
and eax 3 +
cmp eax 2 +
jz loc_45BCFB  +
cmp eax 3 +
jz loc_45BC3C  +
cmp eax 1 +
jz loc_45B7EC  +
mov eax [esp+0CCh+var_18] +
mov dword ptr [esp+0CCh+var_CC] eax +
call sub_45C480  +
mov eax [esp+0CCh+arg_8] +
mov ebx [esp+0CCh+arg_C] +
mov [esp+0CCh+var_18] 0 +
mov [esp+0CCh+var_28] 11h +
mov eax [eax+8] +
mov [ebx] eax +
mov eax [esp+0CCh+arg_8] +
mov ebx [esp+0CCh+arg_10] +
mov ecx [eax] +
lea eax [ecx+1Fh] +
sar eax 5 +
lea edx [ebx+eax*4] +
mov eax ebx +
cmp ebx edx +
jnb loc_45B45E  +
lea esi [esi+0] +
add eax 4 +
cmp edx eax +
mov dword ptr [eax-4] 0FFFFFFFFh +
ja loc_45B450  +
and ecx 1Fh +
jz loc_45B46F  +
mov eax 20h +
sub eax ecx +
mov ecx eax +
shr dword ptr [edx-4] cl +
xor ecx ecx +
jmp loc_45A804  +
call sub_45D210  +
mov edx [eax+10h] +
mov [esp+0CCh+var_18] eax +
lea ecx [edx-1] +
cmp ecx [ebx+10h] +
jge loc_45B4A8  +
add edx 3 +
bsr ecx [eax+edx*4+4] +
bsr edx [ebx+edx*4+4] +
xor ecx 1Fh +
xor edx 1Fh +
cmp ecx edx +
jge loc_45B052  +
mov ecx [esp+0CCh+var_94] +
test ecx ecx +
jz loc_45B7C0  +
mov eax [esp+0CCh+var_24] +
add eax 1 +
cmp [esp+0CCh+var_A0] eax +
mov [esp+0CCh+var_24] eax +
mov eax 0 +
cmovnz eax ecx +
mov [esp+0CCh+var_94] eax +
jmp loc_45B052  +
jz loc_45B25B  +
mov eax [esp+0CCh+var_AC] +
neg edi  +
mov dword ptr [esp+0CCh+var_CC+4] edi +
mov dword ptr [esp+0CCh+var_9C] edx +
mov dword ptr [esp+0CCh+var_CC] eax +
call sub_45D0B0  +
mov edx dword ptr [esp+0CCh+var_9C] +
jmp loc_45B25B  +
mov edx esi +
mov ebx [esp+0CCh+var_80] +
sub edx edi +
jmp loc_45B1B3  +
mov dword ptr [esp+0CCh+var_CC+4] 1 +
mov dword ptr [esp+0CCh+var_CC] eax +
call sub_45C8F0  +
mov dword ptr [esp+0CCh+var_CC] ebp +
sub [esp+0CCh+var_20] 1 +
sub [esp+0CCh+var_60] 1 +
mov [esp+0CCh+var_18] eax +
call sub_45C480  +
mov dword ptr [esp+0CCh+var_CC] ebx +
call sub_45C480  +
mov eax [esp+0CCh+var_18] +
mov dword ptr [esp+0CCh+var_CC] eax +
call sub_45D1D0  +
mov dword ptr [esp+0CCh+var_9C] eax +
jmp loc_45B0D4  +
mov eax [esp+0CCh+var_84] +
cmp [esp+0CCh+var_60] eax +
mov [esp+0CCh+var_28] 11h +
jz loc_45B32B  +
xor edx edx +
mov esi [esp+0CCh+var_18] +
cmp [esp+0CCh+var_A0] 1Fh +
mov eax [esp+0CCh+var_A0] +
jle loc_45B5B7  +
mov ebx [esi+14h] +
test ebx ebx +
jnz loc_45B32B  +
mov eax [esp+0CCh+var_A0] +
xor edx edx +
jmp loc_45B5AC  +
mov ecx [esi+edx*4+14h] +
test ecx ecx +
jnz loc_45B32B  +
sub eax 20h +
add edx 1 +
cmp eax 1Fh +
jg loc_45B5A0  +
cmp eax 1 +
jle loc_45B5D6  +
lea edx [esi+edx*4] +
sub eax 1 +
mov ebx [edx+14h] +
bsf ecx ebx +
shr ebx cl +
cmp eax ecx +
mov [edx+14h] ebx +
jg loc_45B32B  +
mov eax [esp+0CCh+var_60] +
mov dword ptr [esp+0CCh+var_CC] esi +
mov ebp [esp+0CCh+var_AC] +
sub eax 1 +
mov [esp+0CCh+var_20] eax +
mov eax [esp+0CCh+var_A0] +
mov dword ptr [esp+0CCh+var_CC+4] eax +
mov [esp+0CCh+var_24] eax +
call sub_45A3B0  +
mov [esp+0CCh+var_18] eax +
jmp loc_45B364  +
fld  ds:flt_482DC4 +
cmp ebx 1 +
fmul st(1) st +
sbb eax eax +
mov [esp+0CCh+var_70] eax +
xor eax eax +
and [esp+0CCh+var_70] 10h +
add [esp+0CCh+var_70] 10h +
cmp ebx 1 +
setb al  +
fld  st(1) +
fstp  [esp+0CCh+var_8C] +
fld  ds:dbl_482DC8 +
fucomip st st(2) +
mov [esp+0CCh+var_7C] eax +
jbe loc_45B780  +
fnstcw  [esp+0CCh+var_42] +
fld  st(1) +
movzx eax [esp+0CCh+var_42] +
mov ah 0Ch +
mov [esp+0CCh+var_44] ax +
mov eax [esp+0CCh+var_64] +
fldcw  [esp+0CCh+var_44] +
fistp  [esp+0CCh+var_40] +
fldcw  [esp+0CCh+var_42] +
mov esi [esp+0CCh+var_40] +
cmp eax 1 +
mov [esp+0CCh+var_40] esi +
fild  [esp+0CCh+var_40] +
fsub st(2) st +
fxch  st(2) +
fst  [esp+0CCh+var_8C] +
jz loc_45B9BD  +
cmp eax 2 +
jnz loc_45B88C  +
fstp  st +
fstp  st +
mov ecx [esp+0CCh+var_7C] +
fstp  [esp+0CCh+var_9C] +
test ecx ecx +
jnz loc_45B6F0  +
fldz   +
fld  [esp+0CCh+var_8C] +
fucomip st st(1) +
fstp  st +
ja loc_45B6CE  +
jmp loc_45B6F0  +
fstp  st +
add esi 1 +
mov eax 30h +
sub eax [esp+0CCh+var_70] +
mov [esp+0CCh+var_40] esi +
fild  [esp+0CCh+var_40] +
mov [esp+0CCh+var_70] eax +
fstp  [esp+0CCh+var_9C] +
mov [esp+0CCh+var_78] 0 +
jmp loc_45AF7B  +
fucomip st st(1) +
jbe loc_45B0B7  +
fsubr  ds:flt_482DBC +
fld  [esp+0CCh+var_8C] +
fxch  st(1) +
fucomip st st(1) +
fstp  st +
jbe loc_45B0C0  +
mov eax [esp+0CCh+var_70] +
mov ebp [esp+0CCh+var_AC] +
or [esp+0CCh+var_28] eax +
jmp loc_45B364  +
mov ebp [esp+0CCh+var_A0] +
mov ebx ebp +
sub ebx eax +
mov eax [esp+0CCh+var_18] +
mov dword ptr [esp+0CCh+var_CC+4] ebx +
mov dword ptr [esp+0CCh+var_CC] eax +
call sub_45C8F0  +
sub [esp+0CCh+var_20] ebx +
mov [esp+0CCh+var_24] ebp +
mov [esp+0CCh+var_18] eax +
jmp loc_45AFA1  +
neg eax  +
mov dword ptr [esp+0CCh+var_CC+4] eax +
mov dword ptr [esp+0CCh+var_CC] ebp +
call sub_45D0B0  +
jmp loc_45AFE4  +
fstp  st +
fstp  st +
fld  [esp+0CCh+var_8C] +
xor esi esi +
fstp  [esp+0CCh+var_9C] +
jmp loc_45B6F0  +
fld1   +
xor esi esi +
fst  [esp+0CCh+var_9C] +
mov [esp+0CCh+var_70] 20h +
fstp  [esp+0CCh+var_8C] +
mov [esp+0CCh+var_78] 0 +
mov [esp+0CCh+var_7C] 0 +
jmp loc_45AF7B  +
mov dword ptr [esp+0CCh+var_CC+4] 1 +
xor esi esi +
mov dword ptr [esp+0CCh+var_CC] eax +
call sub_45D0B0  +
add [esp+0CCh+var_20] 1 +
add [esp+0CCh+var_60] 1 +
jmp loc_45B052  +
mov [esp+0CCh+var_94] 0 +
mov eax [esp+0CCh+var_18] +
mov [esp+0CCh+var_28] 0A3h +
mov dword ptr [eax+10h] 0 +
call _errno  +
mov dword ptr [eax] 22h +
mov eax [esp+0CCh+arg_8] +
mov eax [eax+8] +
add eax 1 +
jmp loc_45A7F4  +
mov eax [esp+0CCh+var_90] +
mov [esp+0CCh+var_BC] eax +
lea eax [esp+0CCh+var_18] +
mov [esp+0CCh+var_C0] eax +
mov eax [esp+0CCh+arg_C] +
mov [esp+0CCh+var_C4] eax +
mov eax [esp+0CCh+arg_8] +
mov dword ptr [esp+0CCh+var_CC+4] eax +
lea eax [esp+0CCh+var_1C] +
mov dword ptr [esp+0CCh+var_CC] eax +
call sub_45D390  +
mov ecx [esp+0CCh+var_18] +
cmp eax 6 +
mov [esp+0CCh+var_28] eax +
jnz loc_45A4C3  +
mov eax [esp+0CCh+arg_0] +
mov [esp+0CCh+var_90] 0 +
mov [esp+0CCh+var_1C] eax +
jmp loc_45A4C3  +
fucomip st st(1) +
fstp  st +
jnb loc_45B6CC  +
fstp  [esp+0CCh+var_9C] +
jmp loc_45B6F0  +
mov eax [esp+0CCh+var_24] +
mov ebx [esp+0CCh+var_A0] +
sub ebx eax +
cmp ebx 0 +
jnz loc_45BA64  +
mov eax [esp+0CCh+var_20] +
mov [esp+0CCh+var_94] 0 +
jmp loc_45B377  +
jz loc_45A993  +
neg eax  +
mov edx eax +
and edx 0Fh +
jz loc_45B8ED  +
fld  [esp+0CCh+var_14] +
fdiv  ds:dbl_482E20[edx*8] +
fstp  [esp+0CCh+var_14] +
and eax 0FFFFFFF0h +
jz loc_45A993  +
sar eax 4 +
cmp eax 0Fh +
mov edi eax +
jle loc_45BEBF  +
fld  ds:dbl_482F00 +
mov edx eax +
xor esi esi +
nop   +
mov eax dword ptr [esp+0CCh+var_14+4] +
sub edx 10h +
mov ecx eax +
and eax 800FFFFFh +
or eax 3FF00000h +
and ecx 7FF00000h +
mov dword ptr [esp+0CCh+var_14+4] eax +
shr ecx 14h +
cmp edx 0Fh +
fld  [esp+0CCh+var_14] +
lea esi [esi+ecx-3FFh] +
fmul st st(1) +
fstp  [esp+0CCh+var_14] +
jg loc_45B910  +
fstp  st +
and edi 0Fh +
mov edx dword ptr [esp+0CCh+var_14+4] +
mov eax edx +
and edx 800FFFFFh +
and eax 7FF00000h +
or edx 3FF00000h +
shr eax 14h +
lea esi [esi+eax-3FFh] +
xor eax eax +
mov dword ptr [esp+0CCh+var_14+4] edx +
test edi edi +
fld  [esp+0CCh+var_14] +
jle loc_45A99C  +
test edi 1 +
jz loc_45B9A2  +
fmul  ds:dbl_482EE0[eax*8] +
sar edi 1 +
add eax 1 +
test edi edi +
jg loc_45B993  +
jmp loc_45AD68  +
mov [esp+0CCh+var_80] 0 +
jmp loc_45AD7C  +
fstp  st +
fstp  st +
mov ebx [esp+0CCh+var_7C] +
fstp  [esp+0CCh+var_9C] +
test ebx ebx +
jz loc_45B6F0  +
fldz   +
fld  [esp+0CCh+var_8C] +
fucomip st st(1) +
fstp  st +
ja loc_45B6CE  +
jmp loc_45B6F0  +
mov [esp+0CCh+var_94] 0 +
jmp loc_45AEC5  +
lea eax [esp+0CCh+var_28] +
mov [esp+0CCh+var_C0] eax +
mov eax [esp+0CCh+var_64] +
mov dword ptr [esp+0CCh+var_CC+4] 1 +
mov [esp+0CCh+var_C4] eax +
jmp loc_45AB4F  +
mov ecx [esp+0CCh+var_A4] +
xor ebp ebp +
xor ebx ebx +
mov dword ptr [esp+0CCh+var_8C] 0 +
jmp loc_45A60A  +
mov edi [esp+0CCh+var_74] +
mov edx 25h +
sub edx [esp+0CCh+var_AC] +
cmp edi edx +
mov eax edi +
jg loc_45A95D  +
mov eax 0Fh +
fld  [esp+0CCh+var_14] +
sub eax [esp+0CCh+var_AC] +
fmul  ds:dbl_482E20[eax*8] +
sub edi eax +
fmul  ds:dbl_482E20[edi*8] +
jmp loc_45AE48  +
jle loc_45BDE0  +
mov eax [esp+0CCh+var_18] +
mov dword ptr [esp+0CCh+var_CC+4] ebx +
mov dword ptr [esp+0CCh+var_CC] eax +
call sub_45C8F0  +
mov [esp+0CCh+var_18] eax +
mov eax [esp+0CCh+var_20] +
mov [esp+0CCh+var_94] 0 +
sub eax ebx +
mov [esp+0CCh+var_20] eax +
jmp loc_45B377  +
mov [esp+0CCh+var_AC] 0 +
mov dword ptr [esp+0CCh+var_9C] 0 +
mov [esp+0CCh+var_84] 1 +
jmp loc_45A62F  +
xor edi edi +
cmp [esp+0CCh+var_AC] 10h +
jg loc_45BAD5  +
mov eax dword ptr [esp+0CCh+var_8C] +
lea eax [eax+eax*4] +
lea eax [esi+eax*2] +
mov dword ptr [esp+0CCh+var_8C] eax +
lea eax [ecx+1] +
mov [esp+0CCh+var_1C] eax +
movsx edx byte ptr [ecx+1] +
jmp loc_45AC28  +
lea ebx [esp+0CCh+var_1C] +
mov dword ptr [esp+0CCh+var_CC+4] offset aNf +
mov dword ptr [esp+0CCh+var_CC] ebx +
call sub_45CF70  +
test eax eax +
jz loc_45A850  +
mov dword ptr [esp+0CCh+var_CC+4] offset aInity +
mov dword ptr [esp+0CCh+var_CC] ebx +
sub [esp+0CCh+var_1C] 1 +
call sub_45CF70  +
test eax eax +
jnz loc_45BB2B  +
add [esp+0CCh+var_1C] 1 +
mov eax [esp+0CCh+arg_8] +
mov [esp+0CCh+var_28] 3 +
mov [esp+0CCh+var_94] 0 +
mov eax [eax+8] +
add eax 1 +
jmp loc_45A7F4  +
cmp ebx 1 +
mov ebp [esp+0CCh+var_AC] +
sbb eax eax +
and eax 10h +
add eax 11h +
mov [esp+0CCh+var_28] eax +
jmp loc_45B364  +
cmp ebx 1 +
sbb eax eax +
and eax 10h +
add eax 11h +
test ebx ebx +
mov dword ptr [esp+0CCh+var_9C] ebp +
mov ebp [esp+0CCh+var_AC] +
mov [esp+0CCh+var_28] eax +
jnz loc_45B364  +
cmp dword ptr [esp+0CCh+var_9C] 1 +
jg loc_45B364  +
mov eax [esp+0CCh+var_94] +
test eax eax +
jnz loc_45B364  +
mov eax [esp+0CCh+var_84] +
cmp [esp+0CCh+var_60] eax +
jz loc_45B364  +
mov dword ptr [esp+0CCh+var_CC] edi +
mov dword ptr [esp+0CCh+var_CC+4] 1 +
call sub_45C8F0  +
mov edi eax +
mov eax [esp+0CCh+var_A8] +
mov dword ptr [esp+0CCh+var_CC] edi +
mov dword ptr [esp+0CCh+var_CC+4] eax +
call sub_45CA00  +
test eax eax +
jle loc_45B89F  +
mov [esp+0CCh+var_28] 11h +
mov [esp+0CCh+var_94] 0 +
mov eax [esp+0CCh+var_A0] +
sub [esp+0CCh+var_20] eax +
mov [esp+0CCh+var_24] eax +
mov dword ptr [esp+0CCh+var_CC+4] eax +
mov eax [esp+0CCh+var_18] +
mov dword ptr [esp+0CCh+var_CC] eax +
call sub_45A3B0  +
mov [esp+0CCh+var_18] eax +
jmp loc_45B364  +
mov eax dword ptr [esp+0CCh+var_14+4] +
or eax 100000h +
bsf ecx eax +
mov eax 15h +
sub eax ecx +
jmp loc_45AB14  +
mov ebp [esp+0CCh+var_90] +
test ebp ebp +
jnz loc_45B7EC  +
jmp loc_45B3F3  +
test ebx ebx +
mov dword ptr [esp+0CCh+var_9C] ebp +
mov ebp [esp+0CCh+var_AC] +
jz loc_45BD7C  +
mov eax [esp+0CCh+var_94] +
test eax eax +
jz loc_45BE31  +
mov ecx [esp+0CCh+var_24] +
mov esi [esp+0CCh+var_18] +
mov edx ecx +
lea eax [esi+14h] +
sar edx 5 +
lea edx [eax+edx*4] +
cmp eax edx +
jnb loc_45BCA5  +
cmp dword ptr [esi+14h] 0FFFFFFFFh +
lea eax [esi+18h] +
jz loc_45BCA1  +
jmp loc_45BE31  +
add eax 4 +
cmp dword ptr [eax-4] 0FFFFFFFFh +
jnz loc_45BE31  +
cmp edx eax +
ja loc_45BC94  +
and ecx 1Fh +
jz loc_45BCBA  +
or edx 0FFFFFFFFh +
shl edx cl +
or edx [eax] +
add edx 1 +
jnz loc_45BE31  +
mov eax [esp+0CCh+var_A0] +
mov ebx [esp+0CCh+var_84] +
mov dword ptr [esi+10h] 1 +
mov dword ptr [esi+14h] 1 +
mov [esp+0CCh+var_24] 1 +
lea eax [eax+ebx-1] +
mov [esp+0CCh+var_20] eax +
mov eax 1 +
mov [esp+0CCh+var_28] 21h +
jmp loc_45B8A6  +
mov eax [esp+0CCh+var_90] +
test eax eax +
jz loc_45B7EC  +
jmp loc_45B3F3  +
mov eax [esp+0CCh+var_AC] +
mov dword ptr [esp+0CCh+var_8C] ebx +
mov ebx [esp+0CCh+var_84] +
sub eax 1 +
lea edi [eax+1] +
cmp eax 8 +
mov [esp+0CCh+var_AC] edi +
jg loc_45BABE  +
lea eax [ebp+ebp*4+0] +
xor edi edi +
lea ebp [esi+eax*2] +
jmp loc_45BAD5  +
mov esi [esp+0CCh+var_94] +
test esi esi +
jz loc_45B334  +
mov ebp [esp+0CCh+var_AC] +
mov eax [esp+0CCh+var_18] +
mov dword ptr [eax+10h] 0 +
mov eax [esp+0CCh+var_84] +
mov [esp+0CCh+var_28] 50h +
mov [esp+0CCh+var_20] eax +
jmp loc_45B364  +
mov edi 1 +
jmp loc_45AC06  +
cmp dword ptr [esp+0CCh+var_9C] 1 +
jz loc_45BE48  +
mov [esp+0CCh+var_28] 21h +
mov eax [esp+0CCh+var_94] +
test eax eax +
jnz loc_45BDA8  +
mov eax dword ptr [esp+0CCh+var_9C] +
cmp [esp+0CCh+var_A0] eax +
jg loc_45B89F  +
mov eax [esp+0CCh+var_18] +
mov edx [eax+14h] +
test dl 1 +
jz loc_45B364  +
test ebx ebx +
jnz loc_45BEC6  +
cmp dword ptr [esp+0CCh+var_9C] 1 +
jz loc_45BD50  +
sub edx 1 +
mov [eax+14h] edx +
mov [esp+0CCh+var_28] 11h +
jmp loc_45B364  +
mov eax ebx +
neg eax  +
mov dword ptr [esp+0CCh+var_CC+4] eax +
mov eax [esp+0CCh+var_18] +
mov dword ptr [esp+0CCh+var_CC] eax +
call sub_45D0B0  +
jmp loc_45BA84  +
xor edi edi +
jmp loc_45AD19  +
cmp ecx 0FFFFFFFFh +
jl loc_45AAA1  +
mov eax [esp+0CCh+var_18] +
mov [esp+0CCh+var_24] 1 +
mov dword ptr [eax+10h] 1 +
mov dword ptr [eax+14h] 1 +
jmp loc_45AA79  +
mov [esp+0CCh+var_28] 11h +
jmp loc_45BD92  +
xor edi edi +
jmp loc_45ADC6  +
mov eax [esp+0CCh+var_84] +
cmp [esp+0CCh+var_60] eax +
jnz loc_45BF0C  +
mov eax [esp+0CCh+var_18] +
mov [esp+0CCh+var_28] 21h +
cmp dword ptr [eax+10h] 1 +
jnz loc_45B364  +
cmp dword ptr [eax+14h] 1 +
mov eax dword ptr [esp+0CCh+var_9C] +
cmovnz eax [esp+0CCh+var_54] +
mov [esp+0CCh+var_54] eax +
jmp loc_45B364  +
mov eax [esp+0CCh+arg_10] +
mov dword ptr [esp+0CCh+var_CC] ebx +
mov [esp+0CCh+var_C4] eax +
mov eax [esp+0CCh+arg_8] +
mov dword ptr [esp+0CCh+var_CC+4] eax +
call sub_45DCE0  +
mov [esp+0CCh+var_28] eax +
mov eax [esp+0CCh+arg_8] +
mov eax [eax+8] +
add eax 1 +
jmp loc_45A7F4  +
xor esi esi +
jmp loc_45B957  +
mov dword ptr [esp+0CCh+var_CC] eax +
call sub_459FD0  +
mov ecx [esp+0CCh+var_24] +
mov edx [eax+10h] +
mov [esp+0CCh+var_18] eax +
bsr eax [eax+edx*4+10h] +
mov edx ecx +
neg edx  +
and edx 1Fh +
xor eax 1Fh +
cmp edx eax +
jz loc_45BEFC  +
add ecx 1 +
mov [esp+0CCh+var_24] ecx +
mov [esp+0CCh+var_28] 21h +
jmp loc_45B364  +
mov [esp+0CCh+var_28] 1 +
jmp loc_45BBEF  +
***
sub esp 1Ch +
fld  [esp+1Ch+arg_0] +
fld  st +
fxam   +
fstsw  ax +
fstp  st +
test ah 1 +
fld  st +
jnz loc_45BF67  +
fstp  st +
fldz   +
fxch  st(1) +
fucomi st st(1) +
fstp  st(1) +
jp loc_45BF47  +
jmp loc_45BF70  +
fstp  st +
fild  [esp+1Ch+arg_8] +
fxch  st(1) +
fscale   +
fstp  st(1) +
fxam   +
fstsw  ax +
test ah 1 +
jnz loc_45BF7A  +
fldz   +
fxch  st(1) +
fucomi st st(1) +
fstp  st(1) +
jnp loc_45BF78  +
jmp loc_45BF69  +
fstp  st(1) +
add esp 1Ch +
retn   +
fld  st +
jnz loc_45BF45  +
fstp  st(1) +
jmp loc_45BF69  +
jnz loc_45BF69  +
fstp  [esp+1Ch+var_1C] +
lea esi [esi+0] +
call _errno  +
fld  [esp+1Ch+var_1C] +
mov dword ptr [eax] 22h +
add esp 1Ch +
retn   +
***
fld  ds:dbl_45BFA0 +
fld  [esp+arg_0] +
fxam   +
fnstsw  ax +
fld  st +
sahf   +
jb loc_45BFE0  +
fsub st st(2) +
fld  st +
fabs   +
fcomp  ds:dbl_45BFA8 +
fnstsw  ax +
and ah 45h +
jz loc_45BFDB  +
fstp  st(1) +
fyl2xp1   +
retn   +
fstp  st +
fyl2x   +
retn   +
jp loc_45BFC3  +
fstp  st(1) +
fstp  st(1) +
retn   +
***
fld  [esp+arg_0] +
fxam   +
fstsw  ax +
mov dh 45h +
and dh ah +
cmp dh 5 +
jz loc_45C02A  +
fld  st +
sub esp 8 +
fnstcw  [esp+8+var_4] +
movzx eax [esp+8+var_4] +
or ah 0Ch +
mov [esp+8+var_8] ax +
fldcw  [esp+8+var_8] +
frndint   +
fldcw  [esp+8+var_4] +
add esp 8 +
fsub st(1) st +
fxch  st(1) +
f2xm1   +
fld1   +
faddp st(1) st +
fscale   +
fstp  st(1) +
retn   +
test eax 200h +
jz locret_45C035  +
fstp  st +
fldz   +
retn   +
***
fld  [esp+48h+arg_0] +
mov ebx [esp+48h+arg_8] +
fxam   +
fstsw  ax +
fld1   +
mov edx 0 +
fucomi st st(1) +
setnp cl  +
cmovz edx ecx +
test dl dl +
jnz loc_45C0E0  +
test ebx ebx +
jz loc_45C0E6  +
and eax 4500h +
cmp eax 100h +
jz loc_45C0F1  +
mov edx ebx +
and edx 1 +
cmp eax 4000h +
jz loc_45C160  +
cmp eax 500h +
jz loc_45C190  +
fld  st(1) +
test ebx ebx +
fabs   +
js loc_45C153  +
fstp  st(1) +
cmp ebx 1 +
jz loc_45C0C5  +
test bl 1 +
fld  st +
jz loc_45C214  +
fxch  st(1) +
mov eax ebx +
sar eax 1 +
test al 1 +
fmul st st +
jz loc_45C0BB  +
fmul st(1) st +
sar eax 1 +
jnz loc_45C0B3  +
fstp  st +
fxch  st(1) +
jmp loc_45C0C7  +
fxch  st(1) +
fxam   +
fstsw  ax +
fstp  st +
test ah 2 +
jz loc_45C0EC  +
test edx edx +
jz loc_45C0EC  +
fchs   +
jmp loc_45C0EC  +
fstp  st +
fstp  st +
jmp loc_45C0EA  +
fstp  st +
fstp  st +
fld1   +
add esp 48h +
pop ebx  +
retn   +
fstp  st +
fxam   +
fstsw  ax +
test ah 2 +
jnz loc_45C205  +
fld  ds:flt_482DEC +
fstp  [esp+48h+var_20] +
fstp  [esp+48h+var_18] +
call _errno  +
fld  [esp+48h+var_20] +
mov dword ptr [eax] 21h +
fstp  [esp+48h+var_30] +
mov [esp+48h+var_C] ebx +
fild  [esp+48h+var_C] +
fstp  [esp+48h+var_38] +
fld  [esp+48h+var_18] +
fstp  [esp+48h+var_40] +
mov [esp+48h+var_44] offset a__powi +
mov [esp+48h+var_48] 1 +
call sub_4571D0  +
fld  [esp+48h+var_20] +
add esp 48h +
pop ebx  +
retn   +
fdivp st(1) st +
neg ebx  +
jmp loc_45C09D  +
fstp  st +
test ebx ebx +
js loc_45C240  +
test edx edx +
jz loc_45C180  +
fxam   +
fstsw  ax +
fstp  st +
test ah 2 +
jz loc_45C186  +
jmp loc_45C220  +
fstp  st +
jmp loc_45C186  +
fstp  st +
fldz   +
jmp loc_45C0EC  +
fstp  st +
fxam   +
fstsw  ax +
test ah 2 +
jz loc_45C1B0  +
mov eax ebx +
shr eax 1Fh +
test al al +
jz loc_45C1B0  +
test edx edx +
jz loc_45C184  +
lea esi [esi+0] +
fxam   +
fstsw  ax +
test ah 2 +
jz loc_45C1D3  +
test ebx ebx +
lea esi [esi+0] +
js loc_45C1D3  +
test edx edx +
jz loc_45C1D3  +
fstp  st +
fld  ds:flt_482DF4 +
jmp loc_45C0EC  +
fxam   +
fstsw  ax +
test ah 2 +
jnz loc_45C230  +
test ebx ebx +
js loc_45C16A  +
test edx edx +
jz loc_45C1F4  +
fxam   +
fstsw  ax +
fstp  st +
test ah 2 +
nop   +
jz loc_45C1FA  +
jmp loc_45C1C8  +
fstp  st +
jmp loc_45C1FA  +
fstp  st +
fld  ds:flt_482DF0 +
jmp loc_45C0EC  +
fld  ds:flt_482DE8 +
fstp  [esp+48h+var_20] +
jmp loc_45C10B  +
fstp  st +
fld1   +
jmp loc_45C0AD  +
fldz   +
fchs   +
jmp loc_45C0EC  +
test ebx ebx +
js loc_45C1DD  +
test edx edx +
jnz loc_45C1DD  +
fstp  st +
jmp loc_45C1FA  +
test edx edx +
jz loc_45C1F8  +
fxam   +
fstsw  ax +
test ah 2 +
lea esi [esi+0] +
jnz loc_45C1E5  +
fstp  st +
jmp loc_45C1FA  +
***
fldln2   +
fld  [esp+arg_0] +
fld  st +
fsub  ds:dbl_45C260 +
fld  st +
fabs   +
fcomp  ds:dbl_45C268 +
fnstsw  ax +
and ah 45h +
jz loc_45C294  +
fstp  st(1) +
fyl2xp1   +
retn   +
fstp  st +
fyl2x   +
retn   +
***
push esi  +
mov esi eax +
push ebx  +
sub esp 10h +
mov edx ds:dword_486508 +
cmp edx 2 +
jz loc_45C32A  +
test edx edx +
jz loc_45C2E7  +
cmp edx 1 +
jnz loc_45C2DB  +
mov ebx ds:Sleep +
mov [esp+18h+var_18] 1 +
call ebx  +
mov edx ds:dword_486508 +
sub esp 4 +
cmp edx 1 +
jz loc_45C2C4  +
cmp edx 2 +
jz loc_45C32A  +
lea esp [ebp-8] +
pop ebx  +
pop esi  +
pop ebp  +
retn   +
mov eax 1 +
xchg eax ds:dword_486508 +
test eax eax +
jnz loc_45C347  +
mov ebx ds:InitializeCriticalSection +
mov [esp+18h+var_18] offset unk_486520 +
call ebx  +
sub esp 4 +
mov [esp+18h+var_18] offset unk_486538 +
call ebx  +
sub esp 4 +
mov [esp+18h+var_18] offset loc_45C370 +
call sub_457050  +
mov ds:dword_486508 2 +
lea eax [esi+esi*2] +
lea eax unk_486520[eax*8] +
mov [esp+18h+var_18] eax +
call ds:EnterCriticalSection  +
sub esp 4 +
lea esp [ebp-8] +
pop ebx  +
pop esi  +
pop ebp  +
retn   +
cmp eax 2 +
mov edx ds:dword_486508 +
jnz loc_45C2B9  +
mov ds:dword_486508 2 +
jmp loc_45C32A  +
***
mov eax 3 +
xchg eax ds:dword_486508 +
cmp eax 2 +
jz loc_45C381  +
retn   +
***
push ebp  +
mov ebp esp +
push ebx  +
sub esp 14h +
mov ebx ds:DeleteCriticalSection +
mov dword ptr [esp] offset unk_486520 +
call ebx  +
sub esp 4 +
mov dword ptr [esp] offset unk_486538 +
call ebx  +
mov ebx [ebp-4] +
sub esp 4 +
leave   +
retn   +
***
mov ebp esp +
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov esi [ebp+arg_0] +
call sub_45C2A0  +
cmp esi 9 +
jg loc_45C3F7  +
mov ebx ds:dword_4864E0[esi*4] +
test ebx ebx +
jz loc_45C442  +
mov eax [ebx] +
cmp ds:dword_486508 2 +
mov ds:dword_4864E0[esi*4] eax +
jnz loc_45C42A  +
mov [esp+28h+var_28] offset unk_486520 +
call ds:LeaveCriticalSection  +
sub esp 4 +
jmp loc_45C42A  +
mov edi 1 +
mov ecx esi +
shl edi cl +
lea eax ds:1Bh[edi*4] +
shr eax 3 +
shl eax 3 +
mov [esp+28h+var_28] eax +
call malloc  +
test eax eax +
mov ebx eax +
jz loc_45C47A  +
cmp ds:dword_486508 2 +
mov [ebx+4] esi +
mov [ebx+8] edi +
jz loc_45C3E5  +
mov dword ptr [ebx+10h] 0 +
mov eax ebx +
mov dword ptr [ebx+0Ch] 0 +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ebx off_46173C +
mov edi 1 +
mov ecx esi +
shl edi cl +
lea eax ds:1Bh[edi*4] +
shr eax 3 +
mov edx ebx +
sub edx offset unk_485BE0 +
sar edx 3 +
add edx eax +
cmp edx 120h +
ja loc_45C40A  +
lea eax [ebx+eax*8] +
mov off_46173C eax +
jmp loc_45C41B  +
xor eax eax +
jmp loc_45C43A  +
***
push ebx  +
sub esp 14h +
mov ebx [ebp+arg_0] +
test ebx ebx +
jz loc_45C4B7  +
cmp dword ptr [ebx+4] 9 +
jg loc_45C4C0  +
xor eax eax +
call sub_45C2A0  +
mov eax [ebx+4] +
cmp ds:dword_486508 2 +
mov edx ds:dword_4864E0[eax*4] +
mov ds:dword_4864E0[eax*4] ebx +
mov [ebx] edx +
jz loc_45C4D0  +
mov ebx [ebp+var_4] +
leave   +
retn   +
mov ebx [ebp+var_4] +
leave   +
jmp free  +
mov [esp+18h+var_18] offset unk_486520 +
call ds:LeaveCriticalSection  +
mov ebx [ebp+var_4] +
sub esp 4 +
leave   +
retn   +
***
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov eax [esp+38h+arg_0] +
mov edi [esp+38h+arg_8] +
mov eax [eax+10h] +
mov ebp edi +
sar ebp 1Fh +
mov [esp+38h+var_1C] eax +
mov eax [esp+38h+arg_0] +
lea ebx [eax+14h] +
mov eax [esp+38h+arg_4] +
mov [esp+38h+var_28] eax +
sar eax 1Fh +
mov [esp+38h+var_24] eax +
mov eax [ebx+ecx*4] +
mov esi [esp+38h+var_24] +
imul esi eax +
mul  [esp+38h+var_28] +
add edx esi +
add eax edi +
adc edx ebp +
xor ebp ebp +
mov [ebx+ecx*4] eax +
add ecx 1 +
mov edi edx +
cmp [esp+38h+var_1C] ecx +
jg loc_45C523  +
mov edx ebp +
mov eax [esp+38h+arg_0] +
or edx edi +
jz loc_45C56E  +
mov edx [esp+38h+var_1C] +
cmp edx [eax+8] +
jge loc_45C576  +
mov edx [esp+38h+arg_0] +
mov eax [esp+38h+var_1C] +
mov [edx+eax*4+14h] edi +
add eax 1 +
mov [edx+10h] eax +
mov eax edx +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [eax+4] +
mov [esp+38h+var_28] eax +
add eax 1 +
mov [esp+38h+var_38] eax +
call sub_45C3B0  +
test eax eax +
mov ebx eax +
jz loc_45C5C8  +
lea ecx [eax+0Ch] +
mov eax [esp+38h+arg_0] +
mov eax [eax+10h] +
mov [esp+38h+var_38] ecx +
lea edx ds:8[eax*4] +
mov eax [esp+38h+arg_0] +
mov [esp+38h+var_30] edx +
add eax 0Ch +
mov [esp+38h+var_34] eax +
call memcpy  +
mov eax [esp+38h+arg_0] +
mov [esp+38h+var_38] eax +
call sub_45C480  +
mov [esp+38h+arg_0] ebx +
jmp loc_45C55A  +
xor eax eax +
jmp loc_45C56E  +
***
sub esp 1Ch +
mov [esp+1Ch+var_1C] 1 +
call sub_45C3B0  +
test eax eax +
jz loc_45C5F1  +
mov edx [esp+1Ch+arg_0] +
mov dword ptr [eax+10h] 1 +
mov [eax+14h] edx +
add esp 1Ch +
retn   +
***
push esi  +
push ebx  +
sub esp 3Ch +
mov edi [esp+3Ch+arg_0] +
mov ebp [esp+3Ch+arg_4] +
mov esi [edi+10h] +
mov ebx [ebp+10h] +
cmp esi ebx +
jge loc_45C625  +
mov eax esi +
mov esi ebx +
mov ebx eax +
mov eax edi +
mov edi ebp +
mov ebp eax +
lea eax [esi+ebx] +
cmp eax [edi+8] +
mov [esp+3Ch+var_1C] eax +
setnle al  +
movzx eax al +
add eax [edi+4] +
mov [esp+3Ch+var_3C] eax +
call sub_45C3B0  +
test eax eax +
mov [esp+3Ch+var_10] eax +
jz loc_45C74B  +
mov ecx [esp+3Ch+var_1C] +
lea eax [eax+14h] +
mov [esp+3Ch+var_24] eax +
lea ecx [eax+ecx*4] +
mov edx ecx +
cmp eax edx +
mov [esp+3Ch+var_14] ecx +
jnb loc_45C675  +
mov edx [esp+3Ch+var_14] +
mov dword ptr [eax] 0 +
add eax 4 +
cmp edx eax +
ja loc_45C668  +
lea eax [edi+14h] +
mov [esp+3Ch+var_18] eax +
lea eax [eax+esi*4] +
mov [esp+3Ch+var_2C] eax +
lea eax [ebp+14h] +
lea ebx [eax+ebx*4] +
cmp eax ebx +
mov [esp+3Ch+var_28] eax +
mov [esp+3Ch+var_20] ebx +
jnb loc_45C705  +
add [esp+3Ch+var_28] 4 +
mov eax [esp+3Ch+var_28] +
mov ebp [eax-4] +
test ebp ebp +
jz loc_45C6F6  +
mov edi [esp+3Ch+var_24] +
mov esi [esp+3Ch+var_18] +
mov [esp+3Ch+var_34] 0 +
mov [esp+3Ch+var_30] 0 +
jmp loc_45C6C2  +
mov edi eax +
add esi 4 +
mov ecx [edi] +
mov eax ebp +
mul  dword ptr [esi-4] +
xor ebx ebx +
add ecx eax +
adc ebx edx +
add ecx [esp+3Ch+var_34] +
adc ebx [esp+3Ch+var_30] +
xor edx edx +
cmp [esp+3Ch+var_2C] esi +
mov [esp+3Ch+var_30] edx +
lea eax [edi+4] +
mov [esp+3Ch+var_34] ebx +
mov [edi] ecx +
ja loc_45C6C0  +
mov eax [esp+3Ch+var_34] +
mov [edi+4] eax +
mov eax [esp+3Ch+var_28] +
add [esp+3Ch+var_24] 4 +
cmp [esp+3Ch+var_20] eax +
ja loc_45C695  +
mov esi [esp+3Ch+var_1C] +
test esi esi +
jle loc_45C738  +
mov ebx [esp+3Ch+var_14] +
mov esi [ebx-4] +
test esi esi +
jnz loc_45C738  +
mov edx [esp+3Ch+var_1C] +
mov eax edx +
shl eax 2 +
sub ebx eax +
mov eax ebx +
jmp loc_45C72F  +
mov ecx [eax+edx*4-4] +
test ecx ecx +
jnz loc_45C734  +
sub edx 1 +
jnz loc_45C727  +
mov [esp+3Ch+var_1C] edx +
mov eax [esp+3Ch+var_10] +
mov ebx [esp+3Ch+var_1C] +
mov [eax+10h] ebx +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
xor eax eax +
jmp loc_45C743  +
***
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov ebx [ebp+arg_4] +
mov edx [ebp+arg_0] +
mov eax ebx +
and eax 3 +
jnz loc_45C810  +
sar ebx 2 +
mov eax edx +
test ebx ebx +
jz loc_45C7C5  +
mov edi ds:dword_485BC0 +
test edi edi +
jz loc_45C85E  +
test bl 1 +
jnz loc_45C799  +
sar ebx 1 +
jz loc_45C7C3  +
mov esi [edi] +
test esi esi +
nop   +
jz loc_45C7D0  +
mov edi esi +
test bl 1 +
jz loc_45C786  +
mov [esp+28h+var_24] edi +
mov [esp+28h+var_28] edx +
mov [ebp+var_1C] edx +
call sub_45C600  +
test eax eax +
mov esi eax +
jz loc_45C835  +
mov edx [ebp+var_1C] +
mov [esp+28h+var_28] edx +
call sub_45C480  +
sar ebx 1 +
mov edx esi +
jnz loc_45C78A  +
mov eax edx +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax 1 +
mov [ebp+var_1C] edx +
call sub_45C2A0  +
mov esi [edi] +
mov edx [ebp+var_1C] +
test esi esi +
jz loc_45C83F  +
cmp ds:dword_486508 2 +
jnz loc_45C792  +
mov [ebp+var_1C] edx +
mov edi esi +
mov [esp+28h+var_28] offset unk_486538 +
call ds:LeaveCriticalSection  +
mov edx [ebp+var_1C] +
sub esp 4 +
jmp loc_45C794  +
mov eax ds:dword_482DFC[eax*4] +
mov [esp+28h+var_28] edx +
mov [esp+28h+var_20] 0 +
mov [esp+28h+var_24] eax +
call sub_45C4F0  +
test eax eax +
mov edx eax +
jnz loc_45C76A  +
xor eax eax +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+28h+var_24] edi +
mov [esp+28h+var_28] edi +
call sub_45C600  +
test eax eax +
mov esi eax +
mov [edi] eax +
jz loc_45C835  +
mov dword ptr [eax] 0 +
mov edx [ebp+var_1C] +
jmp loc_45C7E6  +
mov eax 1 +
mov [ebp+var_1C] edx +
call sub_45C2A0  +
mov edi ds:dword_485BC0 +
mov edx [ebp+var_1C] +
test edi edi +
jz loc_45C8A0  +
cmp ds:dword_486508 2 +
jnz loc_45C781  +
mov [ebp+var_1C] edx +
mov [esp+28h+var_28] offset unk_486538 +
call ds:LeaveCriticalSection  +
mov edx [ebp+var_1C] +
sub esp 4 +
jmp loc_45C781  +
mov [esp+28h+var_28] 1 +
call sub_45C3B0  +
test eax eax +
mov edi eax +
jz loc_45C8D0  +
mov dword ptr [eax+14h] 271h +
mov edx [ebp+var_1C] +
mov dword ptr [eax+10h] 1 +
mov ds:dword_485BC0 eax +
mov dword ptr [eax] 0 +
jmp loc_45C878  +
mov ds:dword_485BC0 0 +
xor eax eax +
jmp loc_45C837  +
***
jmp sub_45C8F0  +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov eax [esp+2Ch+arg_0] +
mov esi [esp+2Ch+arg_4] +
mov edi eax +
mov edx [eax+4] +
mov eax [eax+10h] +
mov ebx esi +
sar ebx 5 +
add eax ebx +
lea ebp [eax+1] +
mov [esp+2Ch+var_14] eax +
mov eax [edi+8] +
cmp ebp eax +
jle loc_45C929  +
lea esi [esi+0] +
add eax eax +
add edx 1 +
cmp ebp eax +
jg loc_45C920  +
mov [esp+2Ch+var_2C] edx +
call sub_45C3B0  +
test eax eax +
mov [esp+2Ch+var_18] eax +
jz loc_45C9FA  +
test ebx ebx +
lea edx [eax+14h] +
jle loc_45C957  +
xor eax eax +
mov dword ptr [edx+eax*4] 0 +
add eax 1 +
cmp eax ebx +
jnz loc_45C946  +
lea edx [edx+eax*4] +
mov edi [esp+2Ch+arg_0] +
mov eax [esp+2Ch+arg_0] +
mov ecx [edi+10h] +
add eax 14h +
and esi 1Fh +
mov [esp+2Ch+var_20] esi +
lea edi [eax+ecx*4] +
mov ecx edi +
jz loc_45C9E6  +
mov [esp+2Ch+var_1C] 20h +
mov [esp+2Ch+var_10] ebp +
mov ebp ecx +
sub [esp+2Ch+var_1C] esi +
xor esi esi +
jmp loc_45C992  +
mov edx edi +
mov ebx [eax] +
add eax 4 +
movzx ecx byte ptr [esp+2Ch+var_20] +
lea edi [edx+4] +
shl ebx cl +
movzx ecx byte ptr [esp+2Ch+var_1C] +
or ebx esi +
mov [edx] ebx +
mov esi [eax-4] +
shr esi cl +
cmp ebp eax +
ja loc_45C990  +
mov eax [esp+2Ch+var_14] +
mov ebp [esp+2Ch+var_10] +
mov [edx+4] esi +
add eax 2 +
test esi esi +
cmovnz ebp eax +
mov edi [esp+2Ch+var_18] +
lea eax [ebp-1] +
mov [edi+10h] eax +
mov eax [esp+2Ch+arg_0] +
mov [esp+2Ch+var_2C] eax +
call sub_45C480  +
mov eax edi +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ebx edi +
add eax 4 +
mov ecx [eax-4] +
add edx 4 +
cmp ebx eax +
mov [edx-4] ecx +
ja loc_45C9E8  +
jmp loc_45C9C6  +
xor eax eax +
jmp loc_45C9DE  +
***
mov edx [esp+arg_4] +
mov eax [ecx+10h] +
mov ebx [edx+10h] +
sub eax ebx +
test eax eax +
jnz loc_45CA39  +
shl ebx 2 +
add ecx 14h +
lea eax [ecx+ebx] +
lea edx [edx+ebx+14h] +
jmp loc_45CA28  +
cmp ecx eax +
jnb loc_45CA40  +
sub edx 4 +
sub eax 4 +
mov ebx [edx] +
cmp [eax] ebx +
jz loc_45CA24  +
sbb eax eax +
or eax 1 +
pop ebx  +
retn   +
xor eax eax +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov esi [esp+2Ch+arg_0] +
mov ebx [esp+2Ch+arg_4] +
mov [esp+2Ch+var_2C] esi +
mov [esp+2Ch+var_28] ebx +
call sub_45CA00  +
test eax eax +
jz loc_45CB92  +
js loc_45CBB8  +
xor edi edi +
mov eax [esi+4] +
mov [esp+2Ch+var_2C] eax +
call sub_45C3B0  +
test eax eax +
mov edx eax +
mov [esp+2Ch+var_10] eax +
jz loc_45CBC8  +
mov [eax+0Ch] edi +
mov eax [esi+10h] +
add esi 14h +
lea ebp [ebx+14h] +
lea edi [edx+14h] +
mov [esp+2Ch+var_24] 0 +
mov [esp+2Ch+var_14] eax +
lea eax [esi+eax*4] +
mov [esp+2Ch+var_1C] eax +
mov eax [ebx+10h] +
mov [esp+2Ch+var_20] 0 +
lea eax [ebp+eax*4+0] +
mov [esp+2Ch+var_18] eax +
lea esi [esi+0] +
add ebp 4 +
add esi 4 +
mov ecx [ebp-4] +
mov eax [esi-4] +
xor edx edx +
xor ebx ebx +
sub eax ecx +
sbb edx ebx +
sub eax [esp+2Ch+var_24] +
sbb edx [esp+2Ch+var_20] +
add edi 4 +
mov [esp+2Ch+var_20] 0 +
mov ecx edx +
and ecx 1 +
cmp [esp+2Ch+var_18] ebp +
mov [esp+2Ch+var_24] ecx +
mov [edi-4] eax +
ja loc_45CAD0  +
cmp [esp+2Ch+var_1C] esi +
jbe loc_45CB5A  +
mov ebx [esp+2Ch+var_20] +
mov ecx [esp+2Ch+var_24] +
mov [esp+2Ch+var_18] edi +
mov [esp+2Ch+var_24] esi +
nop   +
add esi 4 +
mov eax [esi-4] +
xor edx edx +
sub eax ecx +
sbb edx ebx +
add edi 4 +
mov ebp edx +
xor ebx ebx +
and ebp 1 +
cmp [esp+2Ch+var_1C] esi +
mov ecx ebp +
mov [edi-4] eax +
ja loc_45CB20  +
mov ebp [esp+2Ch+var_24] +
mov edi [esp+2Ch+var_1C] +
mov ebx [esp+2Ch+var_18] +
not ebp  +
lea edx [ebp+edi+0] +
shr edx 2 +
lea edi [ebx+edx*4+4] +
test eax eax +
jnz loc_45CB7F  +
mov edx [esp+2Ch+var_14] +
mov eax edx +
shl eax 2 +
sub edi eax +
mov eax edx +
nop   +
lea esi [esi+0] +
sub eax 1 +
mov edx [edi+eax*4-4] +
test edx edx +
jz loc_45CB70  +
mov [esp+2Ch+var_14] eax +
mov eax [esp+2Ch+var_10] +
mov edx [esp+2Ch+var_14] +
mov [eax+10h] edx +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+2Ch+var_2C] 0 +
call sub_45C3B0  +
test eax eax +
jz loc_45CBC8  +
mov dword ptr [eax+10h] 1 +
mov dword ptr [eax+14h] 0 +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax esi +
mov edi 1 +
mov esi ebx +
mov ebx eax +
jmp loc_45CA7B  +
xor eax eax +
jmp loc_45CB8A  +
***
push edi  +
push esi  +
push ebx  +
sub esp 14h +
mov eax [esp+20h+arg_0] +
mov edi [esp+20h+arg_4] +
lea ebx [eax+14h] +
mov eax [eax+10h] +
lea ebp [ebx+eax*4] +
mov edx [ebp-4] +
lea esi [ebp-4] +
bsr eax edx +
xor eax 1Fh +
sub ecx eax +
cmp eax 0Ah +
mov [edi] ecx +
jg loc_45CC40  +
mov ecx 0Bh +
mov edi edx +
sub ecx eax +
shr edi cl +
or edi 3FF00000h +
mov dword ptr [esp+20h+var_20+4] edi +
xor edi edi +
cmp ebx esi +
mov dword ptr [esp+20h+var_20] 0 +
jnb loc_45CC29  +
mov edi [ebp-8] +
shr edi cl +
lea ecx [eax+15h] +
shl edx cl +
or edi edx +
mov dword ptr [esp+20h+var_20] edi +
fld  [esp+20h+var_20] +
add esp 14h +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
xor edi edi +
cmp ebx esi +
jnb loc_45CC4C  +
mov edi [ebp-8] +
lea esi [ebp-8] +
mov ecx eax +
sub ecx 0Bh +
mov [esp+20h+var_14] ecx +
jz loc_45CCA0  +
movzx ecx byte ptr [esp+20h+var_14] +
mov ebp 2Bh +
sub ebp eax +
mov eax edi +
mov dword ptr [esp+20h+var_20] 0 +
shl edx cl +
mov ecx ebp +
shr eax cl +
or edx 3FF00000h +
or edx eax +
xor eax eax +
cmp esi ebx +
mov dword ptr [esp+20h+var_20+4] edx +
jbe loc_45CC89  +
mov eax [esi-4] +
shr eax cl +
movzx ecx byte ptr [esp+20h+var_14] +
shl edi cl +
or eax edi +
mov dword ptr [esp+20h+var_20] eax +
fld  [esp+20h+var_20] +
add esp 14h +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
or edx 3FF00000h +
mov dword ptr [esp+20h+var_20] edi +
mov dword ptr [esp+20h+var_20+4] edx +
fld  [esp+20h+var_20] +
add esp 14h +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push esi  +
push ebx  +
sub esp 1Ch +
fld  [esp+1Ch+arg_0] +
mov [esp+1Ch+var_1C] 1 +
fstp  [esp+1Ch+var_14] +
call sub_45C3B0  +
test eax eax +
jz loc_45CDB5  +
mov ebx dword ptr [esp+1Ch+var_14+4] +
mov edi dword ptr [esp+1Ch+var_14] +
mov edx ebx +
and ebx 7FFFFFFFh +
and edx 0FFFFFh +
mov ecx edx +
shr ebx 14h +
or ecx 100000h +
test ebx ebx +
cmovnz edx ecx +
test edi edi +
jnz loc_45CD50  +
bsf ecx edx +
shr edx cl +
test ebx ebx +
mov [eax+14h] edx +
lea esi [ecx+20h] +
mov edx 1 +
mov dword ptr [eax+10h] 1 +
jz loc_45CD84  +
mov edi [esp+1Ch+arg_8] +
lea edx [esi+ebx-433h] +
mov [edi] edx +
mov edx 35h +
sub edx esi +
mov esi [esp+1Ch+arg_C] +
mov [esi] edx +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
bsf esi edi +
mov ecx esi +
shr edi cl +
test esi esi +
jz loc_45CDB0  +
mov ecx 20h +
mov ebp edx +
sub ecx esi +
shl ebp cl +
mov ecx ebp +
or ecx edi +
mov [eax+14h] ecx +
mov ecx esi +
shr edx cl +
cmp edx 1 +
mov [eax+18h] edx +
sbb edx edx +
add edx 2 +
test ebx ebx +
mov [eax+10h] edx +
jnz loc_45CD29  +
mov edi [esp+1Ch+arg_8] +
sub esi 432h +
bsr ecx [eax+edx*4+10h] +
shl edx 5 +
mov [edi] esi +
mov esi [esp+1Ch+arg_C] +
xor ecx 1Fh +
sub edx ecx +
mov [esi] edx +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [eax+14h] edi +
jmp loc_45CD72  +
xor eax eax +
jmp loc_45CD43  +
***
add edx 1 +
movzx ecx byte ptr [edx-1] +
add eax 1 +
test cl cl +
mov [eax] cl +
jnz loc_45CDD4  +
retn   +
***
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov edi [esp+28h+arg_8] +
mov ebx [esp+28h+arg_0] +
mov esi [esp+28h+arg_4] +
lea ecx [edi+8] +
mov eax ecx +
imul  edx +
sar ecx 1Fh +
sar edx 1 +
sub edx ecx +
cmp edx 1 +
jle loc_45CECF  +
mov eax 1 +
xor ecx ecx +
add eax eax +
add ecx 1 +
cmp edx eax +
jg loc_45CE26  +
mov [esp+28h+var_28] ecx +
call sub_45C3B0  +
mov edx [esp+28h+arg_C] +
cmp esi 9 +
mov [eax+14h] edx +
mov dword ptr [eax+10h] 1 +
jle loc_45CEC0  +
lea ecx [ebx+9] +
add ebx esi +
mov [esp+28h+var_1C] ecx +
mov ebp ecx +
add ebp 1 +
movsx ecx byte ptr [ebp-1] +
mov [esp+28h+var_24] 0Ah +
mov [esp+28h+var_28] eax +
sub ecx 30h +
mov [esp+28h+var_20] ecx +
call sub_45C4F0  +
cmp ebp ebx +
jnz loc_45CE55  +
mov ebx [esp+28h+var_1C] +
lea ebx [ebx+esi-9] +
add ebx [esp+28h+arg_10] +
cmp edi esi +
jle loc_45CEB2  +
sub edi esi +
add edi ebx +
nop   +
lea esi [esi+0] +
add ebx 1 +
movsx edx byte ptr [ebx-1] +
mov [esp+28h+var_24] 0Ah +
mov [esp+28h+var_28] eax +
sub edx 30h +
mov [esp+28h+var_20] edx +
call sub_45C4F0  +
cmp ebx edi +
jnz loc_45CE90  +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi [esp+28h+arg_10] +
lea ebx [ebx+esi+9] +
mov esi 9 +
jmp loc_45CE83  +
xor ecx ecx +
jmp loc_45CE2F  +
***
sub esp 34h +
mov esi [esp+34h+arg_0] +
lea eax [esp+34h+var_C] +
mov [esp+34h+var_30] eax +
mov ebx [esp+34h+arg_4] +
mov [esp+34h+var_34] esi +
call sub_45CBD0  +
lea eax [esp+34h+var_8] +
mov [esp+34h+var_30] eax +
mov [esp+34h+var_34] ebx +
fst  [esp+34h+var_2C] +
fstp  [esp+34h+var_24] +
call sub_45CBD0  +
mov eax [esi+10h] +
sub eax [ebx+10h] +
mov edx [esp+34h+var_C] +
sub edx [esp+34h+var_8] +
shl eax 5 +
add eax edx +
fst  [esp+34h+var_1C] +
test eax eax +
fld  [esp+34h+var_24] +
jle loc_45CF50  +
fstp  st +
shl eax 14h +
add dword ptr [esp+34h+var_2C+4] eax +
fld  [esp+34h+var_2C] +
add esp 34h +
fdivrp st(1) st +
pop ebx  +
pop esi  +
retn   +
fstp  st(1) +
shl eax 14h +
sub dword ptr [esp+34h+var_1C+4] eax +
fld  [esp+34h+var_1C] +
add esp 34h +
fdivp st(1) st +
pop ebx  +
pop esi  +
retn   +
***
push esi  +
push ebx  +
mov ebp [esp+arg_0] +
mov edx [esp+arg_4] +
mov ecx [ebp+0] +
jmp loc_45CF97  +
movzx ebx byte ptr [ecx] +
movsx eax bl +
sub ebx 41h +
cmp bl 19h +
lea edi [eax+20h] +
cmovbe eax edi +
cmp eax esi +
jnz loc_45CFB2  +
add edx 1 +
movsx esi byte ptr [edx-1] +
add ecx 1 +
test esi esi +
jnz loc_45CF81  +
mov [ebp+0] ecx +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
pop ebx  +
xor eax eax +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push esi  +
push ebx  +
mov edi [esp+arg_8] +
mov esi [esp+arg_4] +
mov eax [esp+arg_0] +
mov ecx [edi+10h] +
lea edx [esi-1] +
sar edx 5 +
lea esi [eax+edx*4+4] +
lea edx [edi+14h] +
lea ebx [edx+ecx*4] +
cmp edx ebx +
jnb loc_45D01A  +
mov ecx eax +
lea esi [esi+0] +
add edx 4 +
mov ebp [edx-4] +
add ecx 4 +
cmp ebx edx +
mov [ecx-4] ebp +
ja loc_45CFF0  +
sub ebx edi +
lea edx [ebx-15h] +
shr edx 2 +
lea eax [eax+edx*4+4] +
cmp esi eax +
jbe loc_45D01E  +
add eax 4 +
mov dword ptr [eax-4] 0 +
cmp esi eax +
ja loc_45D010  +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push ebx  +
mov eax [esp+arg_0] +
mov ebx [esp+arg_4] +
lea edx [eax+14h] +
mov eax [eax+10h] +
sar ebx 5 +
cmp eax ebx +
jge loc_45D073  +
lea ebx [edx+eax*4] +
cmp edx ebx +
jnb loc_45D06D  +
lea eax [ebx-4] +
mov ebx [ebx-4] +
test ebx ebx +
jz loc_45D069  +
jmp loc_45D0A0  +
sub eax 4 +
mov ecx [eax] +
test ecx ecx +
jnz loc_45D0A0  +
cmp edx eax +
jb loc_45D060  +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
retn   +
jle loc_45D094  +
mov ecx [esp+arg_4] +
lea ebx [edx+ebx*4] +
and ecx 1Fh +
jz loc_45D04B  +
mov edi [ebx] +
mov eax 1 +
mov esi edi +
shr esi cl +
shl esi cl +
cmp esi edi +
jnz loc_45D06F  +
jmp loc_45D04B  +
lea ebx [edx+ebx*4] +
jmp loc_45D04B  +
pop ebx  +
mov eax 1 +
pop esi  +
pop edi  +
retn   +
***
push esi  +
push ebx  +
sub esp 10h +
mov esi [esp+10h+arg_0] +
mov eax [esp+10h+arg_0] +
mov ecx [esp+10h+arg_4] +
mov edx [esi+10h] +
lea ebp [eax+14h] +
mov eax ecx +
sar eax 5 +
cmp eax edx +
jge loc_45D160  +
lea eax [ebp+eax*4+0] +
and ecx 1Fh +
lea edi [ebp+edx*4+0] +
mov [esp+10h+var_C] eax +
mov [esp+10h+var_10] ecx +
jz loc_45D180  +
mov esi [esp+10h+var_C] +
mov eax [esp+10h+var_10] +
mov [esp+10h+var_8] 20h +
sub [esp+10h+var_8] eax +
mov ebx [esi] +
lea edx [esi+4] +
mov ecx eax +
shr ebx cl +
cmp edi edx +
jbe loc_45D1BE  +
mov esi ebp +
mov [esp+10h+var_4] ebp +
mov ebp [esp+10h+var_8] +
lea esi [esi+0] +
mov eax [edx] +
mov ecx ebp +
add esi 4 +
add edx 4 +
shl eax cl +
movzx ecx byte ptr [esp+10h+var_10] +
or eax ebx +
mov [esi-4] eax +
mov ebx [edx-4] +
shr ebx cl +
cmp edi edx +
ja loc_45D120  +
sub edi [esp+10h+var_C] +
mov ebp [esp+10h+var_4] +
lea eax [edi-5] +
shr eax 2 +
lea eax [ebp+eax*4+4] +
test ebx ebx +
mov [eax] ebx +
jz loc_45D159  +
add eax 4 +
sub eax ebp +
sar eax 2 +
jmp loc_45D1AB  +
mov eax [esp+10h+arg_0] +
mov dword ptr [eax+10h] 0 +
mov eax [esp+10h+arg_0] +
mov dword ptr [eax+14h] 0 +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp edi eax +
mov edx ebp +
jbe loc_45D160  +
add eax 4 +
mov ecx [eax-4] +
add edx 4 +
cmp edi eax +
mov [edx-4] ecx +
ja loc_45D186  +
mov eax [esp+10h+var_C] +
not eax  +
add eax edi +
shr eax 2 +
lea eax ds:4[eax*4] +
sar eax 2 +
mov esi [esp+10h+arg_0] +
test eax eax +
mov [esi+10h] eax +
jz loc_45D16B  +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ebp +
jmp loc_45D150  +
***
mov ecx [eax+10h] +
lea edx [eax+14h] +
lea ebx [edx+ecx*4] +
cmp edx ebx +
jnb loc_45D20A  +
mov ecx [eax+14h] +
xor eax eax +
test ecx ecx +
jz loc_45D1F6  +
jmp loc_45D202  +
mov ecx [edx] +
test ecx ecx +
jnz loc_45D202  +
add edx 4 +
add eax 20h +
cmp ebx edx +
ja loc_45D1F0  +
pop ebx  +
retn   +
bsf ecx ecx +
add eax ecx +
pop ebx  +
retn   +
xor eax eax +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+2Ch+arg_4] +
mov eax [esp+2Ch+arg_0] +
mov ecx [ebx+10h] +
cmp [eax+10h] ecx +
jge loc_45D22D  +
mov [esp+2Ch+arg_0] ebx +
mov ebx eax +
mov eax [esp+2Ch+arg_0] +
lea ebp [ebx+14h] +
mov eax [eax+4] +
mov [esp+2Ch+var_2C] eax +
call sub_45C3B0  +
mov ecx [esp+2Ch+arg_0] +
xor edx edx +
mov ecx [ecx+10h] +
mov [esp+2Ch+var_18] eax +
add eax 14h +
mov [eax-4] ecx +
mov edi [ebx+10h] +
mov [esp+2Ch+var_14] ecx +
mov ecx [esp+2Ch+arg_0] +
mov [esp+2Ch+var_10] edi +
lea edi [eax+edi*4] +
add ecx 14h +
mov [esp+2Ch+var_1C] edi +
nop   +
lea esi [esi+0] +
mov esi [ebp+0] +
add ecx 4 +
add ebp 4 +
mov ebx [ecx-4] +
add eax 4 +
movzx edi si +
mov [esp+2Ch+var_20] edi +
movzx edi bx +
add edi [esp+2Ch+var_20] +
shr esi 10h +
shr ebx 10h +
add edi edx +
add ebx esi +
mov edx edi +
and edx 10000h +
shr edx 10h +
add ebx edx +
mov edx ebx +
and edx 10000h +
mov [eax-2] bx +
shr edx 10h +
mov [eax-4] di +
cmp [esp+2Ch+var_1C] eax +
ja loc_45D270  +
mov edi [esp+2Ch+arg_0] +
mov ebx [edi+10h] +
mov edi [esp+2Ch+var_1C] +
sub ebx [esp+2Ch+var_10] +
lea edi [edi+ebx*4] +
cmp edi eax +
jbe loc_45D301  +
mov esi [ecx] +
add eax 4 +
add ecx 4 +
movzx ebx si +
add ebx edx +
mov edx ebx +
and edx 10000h +
shr edx 10h +
shr esi 10h +
add esi edx +
mov [eax-2] si +
mov edx esi +
mov [eax-4] bx +
shr edx 10h +
cmp edi eax +
ja loc_45D2D3  +
test edx edx +
jz loc_45D32A  +
mov eax [esp+2Ch+var_18] +
mov ecx [esp+2Ch+var_14] +
cmp ecx [eax+8] +
jz loc_45D336  +
mov ecx [esp+2Ch+var_14] +
mov edi [esp+2Ch+var_18] +
mov eax ecx +
add eax 1 +
mov [edi+10h] eax +
mov dword ptr [edi+ecx*4+14h] 1 +
mov eax [esp+2Ch+var_18] +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edi eax +
mov eax [eax+4] +
mov [esp+2Ch+var_20] eax +
add eax 1 +
mov [esp+2Ch+var_2C] eax +
call sub_45C3B0  +
mov edx [edi+10h] +
lea ecx ds:8[edx*4] +
lea edx [edi+0Ch] +
mov ebx eax +
lea eax [eax+0Ch] +
mov [esp+2Ch+var_24] ecx +
mov [esp+2Ch+var_28] edx +
mov [esp+2Ch+var_2C] eax +
call memcpy  +
mov [esp+2Ch+var_2C] edi +
call sub_45C480  +
mov eax [ebx+10h] +
mov [esp+2Ch+var_18] ebx +
mov [esp+2Ch+var_14] eax +
jmp loc_45D312  +
***
push esi  +
push ebx  +
sub esp 3Ch +
call localeconv  +
cmp ds:byte_48AA10 0 +
mov ebp [eax] +
jz loc_45D823  +
mov eax [esp+3Ch+arg_C] +
mov dword ptr [eax] 0 +
mov eax [esp+3Ch+arg_0] +
mov edx [eax] +
movzx ecx byte ptr [edx+2] +
lea edi [edx+2] +
cmp cl 30h +
jnz loc_45D980  +
add edx 3 +
xor eax eax +
mov edi edx +
add edx 1 +
movzx ecx byte ptr [edx-1] +
add eax 1 +
cmp cl 30h +
jz loc_45D3D0  +
cmp ds:byte_48A9E0[ecx] 0 +
jnz loc_45D474  +
movzx esi byte ptr [ebp+0] +
mov ebx esi +
test bl bl +
jz loc_45DAB9  +
movzx edx byte ptr [edi] +
cmp bl dl +
jnz loc_45D832  +
xor edx edx +
jmp loc_45D419  +
cmp cl [edi+edx] +
jnz loc_45D830  +
add edx 1 +
movzx ecx byte ptr [ebp+edx+0] +
mov ebx edx +
test cl cl +
jnz loc_45D410  +
add ebx edi +
movzx edx byte ptr [ebx] +
movzx ecx dl +
movzx ecx ds:byte_48A9E0[ecx] +
test cl cl +
jz loc_45D924  +
cmp dl 30h +
mov edi ebx +
jnz loc_45D45A  +
add edi 1 +
movzx edx byte ptr [edi] +
cmp dl 30h +
jz loc_45D445  +
movzx eax dl +
movzx ecx ds:byte_48A9E0[eax] +
xor eax eax +
test cl cl +
setz al  +
mov [esp+3Ch+var_28] eax +
mov eax esi +
mov esi ebx +
mov byte ptr [esp+3Ch+var_24] al +
mov eax 1 +
jmp loc_45D496  +
movzx edx byte ptr [edi] +
add eax 1 +
xor esi esi +
movzx ebx byte ptr [ebp+0] +
mov [esp+3Ch+var_28] 0 +
movzx ecx dl +
movzx ecx ds:byte_48A9E0[ecx] +
mov byte ptr [esp+3Ch+var_24] bl +
test cl cl +
mov ebx edi +
jz loc_45D4B2  +
lea esi [esi+0] +
add ebx 1 +
movzx edx byte ptr [ebx] +
movzx ecx dl +
cmp ds:byte_48A9E0[ecx] 0 +
jnz loc_45D4A0  +
cmp dl byte ptr [esp+3Ch+var_24] +
jz loc_45D850  +
test esi esi +
movzx edx byte ptr [ebx] +
jz loc_45D973  +
sub esi ebx +
lea esi ds:0[esi*4] +
mov [esp+3Ch+var_24] esi +
cmp dl 50h +
jz loc_45D5E0  +
cmp dl 70h +
jz loc_45D5E0  +
mov ecx ebx +
mov [esp+3Ch+var_20] 0 +
mov [esp+3Ch+var_1C] 0 +
test eax eax +
jz loc_45D5D0  +
mov eax [esp+3Ch+arg_0] +
mov [eax] ecx +
mov esi [esp+3Ch+var_28] +
xor eax eax +
test esi esi +
jnz loc_45D5C6  +
mov ecx [esp+3Ch+var_1C] +
test ecx ecx +
jz loc_45D6B0  +
mov edx [esp+3Ch+var_20] +
mov eax [esp+3Ch+arg_4] +
test edx edx +
mov eax [eax+0Ch] +
jnz loc_45D891  +
cmp eax 2 +
jz loc_45DB5E  +
cmp eax 3 +
jz loc_45DB4D  +
cmp eax 1 +
jz loc_45D90C  +
mov eax [esp+3Ch+arg_4] +
mov edi [eax] +
mov ebx edi +
and edi 1Fh +
sar ebx 5 +
cmp edi 1 +
mov esi ebx +
sbb esi 0FFFFFFFFh +
xor edx edx +
mov eax esi +
sar eax 1 +
jz loc_45D577  +
lea esi [esi+0] +
add edx 1 +
sar eax 1 +
jnz loc_45D570  +
mov [esp+3Ch+var_3C] edx +
call sub_45C3B0  +
mov ecx [esp+3Ch+arg_C] +
xor edx edx +
test ebx ebx +
mov [ecx] eax +
mov [eax+10h] esi +
jle loc_45D5A1  +
nop   +
mov dword ptr [eax+edx*4+14h] 0FFFFFFFFh +
add edx 1 +
cmp edx ebx +
jnz loc_45D590  +
mov edx ebx +
cmp esi ebx +
jle loc_45D5B4  +
mov ebx 20h +
mov ecx ebx +
sub ecx edi +
sar ebx cl +
mov [eax+edx*4+14h] ebx +
mov eax [esp+3Ch+arg_4] +
mov esi [esp+3Ch+arg_8] +
mov eax [eax+4] +
mov [esi] eax +
mov eax 11h +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi [esp+3Ch+arg_0] +
lea eax [edi-1] +
mov [esi] eax +
jmp loc_45D506  +
movzx edx byte ptr [ebx+1] +
cmp dl 2Bh +
jz loc_45D963  +
cmp dl 2Dh +
jz loc_45D860  +
movzx edx ds:byte_48A9E0[edx] +
lea esi [ebx+1] +
mov [esp+3Ch+var_20] 0 +
lea ecx [edx-1] +
cmp cl 18h +
ja loc_45D882  +
lea ecx [edx-10h] +
mov [esp+3Ch+var_18] ecx +
lea ecx [esi+1] +
movzx esi byte ptr [esi+1] +
movzx esi ds:byte_48A9E0[esi] +
mov edx esi +
sub esi 1 +
movzx edx dl +
mov [esp+3Ch+var_1C] edx +
mov edx esi +
cmp dl 18h +
ja loc_45DCC4  +
mov [esp+3Ch+var_10] edi +
mov edx [esp+3Ch+var_18] +
xor esi esi +
mov edi [esp+3Ch+var_1C] +
mov [esp+3Ch+var_14] ebp +
mov ebp eax +
test edx 0F8000000h +
mov eax 1 +
cmovnz esi eax +
add ecx 1 +
lea eax [edx+edx*4] +
lea edx [edi+eax*2-10h] +
movzx eax byte ptr [ecx] +
movzx eax ds:byte_48A9E0[eax] +
movzx edi al +
sub eax 1 +
cmp al 18h +
jbe loc_45D654  +
mov eax ebp +
mov edi [esp+3Ch+var_10] +
mov ebp [esp+3Ch+var_14] +
mov [esp+3Ch+var_1C] esi +
mov [esp+3Ch+var_18] edx +
mov edx [esp+3Ch+var_18] +
mov esi edx +
neg esi  +
cmp [esp+3Ch+var_20] 0 +
cmovz esi edx +
add [esp+3Ch+var_24] esi +
jmp loc_45D4F8  +
mov eax ebx +
xor edx edx +
sub eax edi +
sub eax 1 +
cmp eax 7 +
jle loc_45D6CA  +
nop   +
sar eax 1 +
add edx 1 +
cmp eax 7 +
jg loc_45D6C0  +
mov [esp+3Ch+var_3C] edx +
call sub_45C3B0  +
mov [esp+3Ch+var_1C] eax +
add eax 14h +
cmp byte ptr [ebp+1] 0 +
mov [esp+3Ch+var_18] eax +
jz loc_45DB6F  +
xor eax eax +
lea esi [esi+0] +
add eax 1 +
cmp byte ptr [ebp+eax+1] 0 +
jnz loc_45D6F0  +
mov [esp+3Ch+var_20] eax +
cmp edi ebx +
jnb loc_45DB7C  +
mov eax [esp+3Ch+var_18] +
xor edx edx +
add ebp [esp+3Ch+var_20] +
mov [esp+3Ch+var_28] eax +
xor eax eax +
jmp loc_45D73D  +
cmp eax 20h +
jz loc_45D804  +
movzx ebx cl +
mov ecx eax +
add eax 4 +
movzx ebx ds:byte_48A9E0[ebx] +
and ebx 0Fh +
shl ebx cl +
or edx ebx +
mov ebx esi +
cmp edi ebx +
jnb loc_45D753  +
movzx ecx byte ptr [ebx-1] +
lea esi [ebx-1] +
cmp cl [ebp+0] +
jnz loc_45D718  +
sub esi [esp+3Ch+var_20] +
mov ebx esi +
cmp edi ebx +
jb loc_45D73D  +
bsr eax edx +
xor eax 1Fh +
mov esi [esp+3Ch+var_28] +
lea edi [esi+4] +
mov [esi] edx +
mov esi [esp+3Ch+var_1C] +
sub edi [esp+3Ch+var_18] +
sar edi 2 +
mov [esi+10h] edi +
shl edi 5 +
sub edi eax +
mov eax [esp+3Ch+arg_4] +
mov ebx [eax] +
cmp edi ebx +
jg loc_45D987  +
mov esi 0 +
jl loc_45D939  +
mov eax [esp+3Ch+arg_4] +
mov edi [esp+3Ch+var_24] +
cmp edi [eax+8] +
jg loc_45D900  +
mov eax [esp+3Ch+arg_4] +
mov eax [eax+4] +
cmp [esp+3Ch+var_24] eax +
jge loc_45D9F6  +
mov edi eax +
sub edi [esp+3Ch+var_24] +
cmp ebx edi +
jg loc_45DA53  +
mov esi [esp+3Ch+arg_4] +
mov edx [esi+0Ch] +
cmp edx 2 +
jz loc_45DC51  +
cmp edx 3 +
jz loc_45DC2B  +
cmp edx 1 +
jz loc_45DC5E  +
mov eax [esp+3Ch+var_1C] +
mov [esp+3Ch+var_3C] eax +
call sub_45C480  +
call _errno  +
mov dword ptr [eax] 22h +
add esp 3Ch +
mov eax 50h +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+3Ch+var_28] +
xor ecx ecx +
mov [eax] edx +
add eax 4 +
movzx ebx byte ptr [ebx-1] +
mov [esp+3Ch+var_28] eax +
xor edx edx +
mov eax 4 +
jmp loc_45D729  +
call sub_45E0D0  +
jmp loc_45D3AB  +
mov edx esi +
mov ebx edi +
mov [esp+3Ch+var_24] 0 +
mov [esp+3Ch+var_28] 1 +
jmp loc_45D4D4  +
test esi esi +
jz loc_45DB90  +
movzx edx byte ptr [ebx] +
jmp loc_45D4C7  +
mov [esp+3Ch+var_20] 1 +
movzx edx byte ptr [ebx+2] +
lea esi [ebx+2] +
movzx edx ds:byte_48A9E0[edx] +
lea ecx [edx-1] +
cmp cl 18h +
jbe loc_45D614  +
mov ecx ebx +
mov [esp+3Ch+var_1C] 0 +
jmp loc_45D4F8  +
cmp eax 2 +
jz loc_45DA42  +
cmp eax 3 +
jnz loc_45D7EC  +
mov edi [esp+3Ch+arg_10] +
test edi edi +
jz loc_45D7EC  +
mov [esp+3Ch+var_3C] 0 +
call sub_45C3B0  +
mov [esp+3Ch+var_1C] eax +
mov dword ptr [eax+10h] 1 +
mov dword ptr [eax+14h] 1 +
mov eax [esp+3Ch+arg_4] +
mov eax [eax+4] +
mov esi [esp+3Ch+arg_C] +
mov edi [esp+3Ch+var_1C] +
mov [esi] edi +
mov esi [esp+3Ch+arg_8] +
mov [esi] eax +
call _errno  +
mov dword ptr [eax] 22h +
mov eax 62h +
jmp loc_45D5C6  +
mov eax [esp+3Ch+var_1C] +
mov [esp+3Ch+var_3C] eax +
call sub_45C480  +
call _errno  +
mov dword ptr [eax] 22h +
add esp 3Ch +
mov eax 0A3h +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+3Ch+var_24] 0 +
mov [esp+3Ch+var_28] 1 +
jmp loc_45D4D4  +
mov eax ebx +
sub eax edi +
mov edi eax +
mov [esp+3Ch+var_38] eax +
mov eax [esp+3Ch+var_1C] +
mov [esp+3Ch+var_3C] eax +
call sub_45C8F0  +
sub [esp+3Ch+var_24] edi +
mov [esp+3Ch+var_1C] eax +
add eax 14h +
mov [esp+3Ch+var_18] eax +
jmp loc_45D78E  +
mov [esp+3Ch+var_20] 0 +
jmp loc_45D868  +
movzx edx byte ptr [ebx] +
mov [esp+3Ch+var_24] 0 +
jmp loc_45D4D4  +
xor eax eax +
jmp loc_45D3E1  +
sub edi ebx +
mov [esp+3Ch+var_3C] esi +
xor esi esi +
mov [esp+3Ch+var_38] edi +
call sub_45D030  +
test eax eax +
jz loc_45D9DD  +
mov ebp [esp+3Ch+var_18] +
lea ecx [edi-1] +
mov eax 1 +
mov edx ecx +
mov si 1 +
sar edx 5 +
shl eax cl +
test [ebp+edx*4+0] eax +
jz loc_45D9DD  +
test ecx ecx +
jle loc_45DC01  +
mov eax [esp+3Ch+var_1C] +
mov [esp+3Ch+var_38] ecx +
mov [esp+3Ch+var_3C] eax +
call sub_45D030  +
test eax eax +
jz loc_45DC01  +
mov esi 3 +
mov eax [esp+3Ch+var_1C] +
mov [esp+3Ch+var_38] edi +
mov [esp+3Ch+var_3C] eax +
call sub_45D0B0  +
add [esp+3Ch+var_24] edi +
jmp loc_45D78E  +
mov edi 1 +
test esi esi +
jz loc_45DA24  +
mov eax [esp+3Ch+arg_4] +
mov eax [eax+0Ch] +
cmp eax 2 +
jz loc_45DAC0  +
cmp eax 3 +
jz loc_45DACD  +
cmp eax 1 +
jz loc_45DC0B  +
or edi 10h +
mov eax [esp+3Ch+arg_C] +
mov esi [esp+3Ch+var_1C] +
mov [eax] esi +
mov eax [esp+3Ch+arg_8] +
mov esi [esp+3Ch+var_24] +
mov [eax] esi +
add esp 3Ch +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ebp [esp+3Ch+arg_10] +
test ebp ebp +
jnz loc_45D7EC  +
jmp loc_45D8AF  +
test esi esi +
lea ebp [edi-1] +
jnz loc_45DBF7  +
test ebp ebp +
jle loc_45DA74  +
mov eax [esp+3Ch+var_1C] +
mov [esp+3Ch+var_38] ebp +
mov [esp+3Ch+var_3C] eax +
call sub_45D030  +
mov esi eax +
mov ecx ebp +
mov edx ebp +
mov ebp [esp+3Ch+var_18] +
mov eax 1 +
shl eax cl +
mov ecx esi +
sar edx 5 +
or ecx 2 +
test [ebp+edx*4+0] eax +
mov eax [esp+3Ch+var_1C] +
mov [esp+3Ch+var_38] edi +
cmovnz esi ecx +
sub ebx edi +
mov edi 2 +
mov [esp+3Ch+var_3C] eax +
call sub_45D0B0  +
mov eax [esp+3Ch+arg_4] +
mov eax [eax+4] +
mov [esp+3Ch+var_24] eax +
jmp loc_45D9FB  +
xor ebx ebx +
jmp loc_45D427  +
mov eax 1 +
sub eax [esp+3Ch+arg_10] +
mov [esp+3Ch+arg_10] eax +
mov eax [esp+3Ch+arg_10] +
test eax eax +
jz loc_45DA21  +
mov eax [esp+3Ch+var_1C] +
mov esi [eax+10h] +
mov [esp+3Ch+var_3C] eax +
call sub_459FD0  +
mov [esp+3Ch+var_1C] eax +
add eax 14h +
cmp edi 2 +
jz loc_45DC8F  +
mov edi [esp+3Ch+var_1C] +
cmp esi [edi+10h] +
jl loc_45DB19  +
and ebx 1Fh +
jz loc_45DB43  +
bsr eax [eax+esi*4-4] +
mov edx 20h +
sub edx ebx +
xor eax 1Fh +
cmp edx eax +
jle loc_45DB43  +
mov eax [esp+3Ch+var_1C] +
mov [esp+3Ch+var_38] 1 +
mov [esp+3Ch+var_3C] eax +
call sub_45D0B0  +
mov eax [esp+3Ch+arg_4] +
add [esp+3Ch+var_24] 1 +
mov esi [esp+3Ch+var_24] +
cmp esi [eax+8] +
jg loc_45D900  +
mov edi 21h +
jmp loc_45DA24  +
mov ebx [esp+3Ch+arg_10] +
test ebx ebx +
jnz loc_45D90C  +
jmp loc_45D54E  +
mov esi [esp+3Ch+arg_10] +
test esi esi +
jz loc_45D90C  +
jmp loc_45D54E  +
mov [esp+3Ch+var_20] 0 +
jmp loc_45D6FE  +
mov eax [esp+3Ch+var_18] +
xor edx edx +
mov [esp+3Ch+var_28] eax +
mov eax 20h +
jmp loc_45D759  +
movzx edx byte ptr [ebp+1] +
test dl dl +
jz loc_45DCD1  +
cmp dl [ebx+1] +
jnz loc_45D970  +
mov edx 1 +
jmp loc_45DBB9  +
cmp cl [ebx+edx] +
jnz loc_45D970  +
add edx 1 +
movzx ecx byte ptr [ebp+edx+0] +
mov esi edx +
test cl cl +
jnz loc_45DBB0  +
add esi ebx +
movzx edx byte ptr [esi] +
mov ebx esi +
movzx ecx dl +
cmp ds:byte_48A9E0[ecx] 0 +
jz loc_45D4C7  +
nop   +
add ebx 1 +
movzx edx byte ptr [ebx] +
movzx ecx dl +
cmp ds:byte_48A9E0[ecx] 0 +
jnz loc_45DBE0  +
jmp loc_45D4C7  +
mov esi 1 +
jmp loc_45DA74  +
mov esi 2 +
jmp loc_45D9DD  +
test esi 2 +
jz loc_45DA21  +
mov eax [esp+3Ch+var_18] +
or esi [eax] +
and esi 1 +
jnz loc_45DAD9  +
jmp loc_45DA21  +
mov edx [esp+3Ch+arg_10] +
test edx edx +
jz loc_45D7E0  +
mov esi [esp+3Ch+var_1C] +
mov dword ptr [esi+10h] 1 +
mov esi [esp+3Ch+var_18] +
mov dword ptr [esi] 1 +
jmp loc_45D8D4  +
mov ecx [esp+3Ch+arg_10] +
test ecx ecx +
jz loc_45DC37  +
jmp loc_45D7E0  +
cmp edi ebx +
jnz loc_45D7E0  +
cmp ebx 1 +
jle loc_45DC37  +
mov eax [esp+3Ch+var_1C] +
sub ebx 1 +
mov [esp+3Ch+var_38] ebx +
mov [esp+3Ch+var_3C] eax +
call sub_45D030  +
test eax eax +
jz loc_45D7E0  +
mov eax [esp+3Ch+arg_4] +
mov eax [eax+4] +
jmp loc_45DC37  +
mov esi [esp+3Ch+arg_4] +
mov di 22h +
mov edx [esi] +
sub edx 1 +
cmp edx ebx +
jnz loc_45DA24  +
mov esi ebx +
mov edx 1 +
sar esi 5 +
mov ecx ebx +
shl edx cl +
and edx [eax+esi*4] +
cmp edx 1 +
sbb edi edi +
not edi  +
add edi 22h +
jmp loc_45DA24  +
mov [esp+3Ch+var_1C] 0 +
jmp loc_45D692  +
mov esi 1 +
jmp loc_45DBC7  +
***
push esi  +
push ebx  +
sub esp 3Ch +
cmp ds:byte_48AA10 0 +
jz loc_45E04A  +
mov eax [esp+3Ch+arg_4] +
mov esi [esp+3Ch+arg_8] +
mov eax [eax] +
mov edx eax +
sar edx 5 +
and eax 1Fh +
lea edi [esi+edx*4] +
lea edx [edi+4] +
cmovz edx edi +
mov [esp+3Ch+var_10] eax +
lea eax [edx-4] +
mov [esp+3Ch+var_24] eax +
mov eax [esp+3Ch+arg_0] +
mov [esp+3Ch+var_14] edx +
mov dword ptr [edx-4] 0 +
mov eax [eax] +
movzx edx byte ptr [eax+1] +
lea ecx [edx-1] +
cmp cl 1Fh +
ja loc_45DD46  +
add eax 1 +
movzx edx byte ptr [eax+1] +
lea ecx [edx-1] +
cmp cl 1Fh +
jbe loc_45DD37  +
cmp dl 30h +
jz loc_45E054  +
movzx edx byte ptr [eax+1] +
mov edi [esp+3Ch+var_24] +
xor ebx ebx +
test edx edx +
mov [esp+3Ch+var_2C] 0 +
mov [esp+3Ch+var_30] 0 +
mov [esp+3Ch+var_28] edi +
mov ebp edi +
lea edi [eax+1] +
jz loc_45DE34  +
lea esi [esi+0] +
movzx ecx ds:byte_48A9E0[edx] +
test cl cl +
jnz loc_45DEC5  +
cmp edx 20h +
ja loc_45DFF7  +
mov esi [esp+3Ch+var_2C] +
cmp [esp+3Ch+var_30] esi +
jle loc_45DF01  +
cmp ebx 7 +
jg loc_45DE14  +
cmp ebp [esp+3Ch+var_28] +
jnb loc_45DE14  +
mov edx 8 +
mov ecx 20h +
sub edx ebx +
lea esi ds:0[edx*4] +
mov edx ebp +
mov ebx esi +
sub ecx esi +
mov esi [ebp+0] +
mov [esp+3Ch+var_20] ebp +
mov ebp [esp+3Ch+var_28] +
mov [esp+3Ch+var_18] edi +
mov edi ebx +
mov [esp+3Ch+var_1C] eax +
mov [esp+3Ch+var_34] ebp +
mov ebp ecx +
jmp loc_45DDE9  +
mov esi eax +
mov eax [edx+4] +
mov ecx ebp +
add edx 4 +
mov ebx eax +
shl ebx cl +
mov ecx ebx +
or ecx esi +
mov [edx-4] ecx +
mov ecx edi +
shr eax cl +
mov [edx] eax +
cmp [esp+3Ch+var_34] edx +
ja loc_45DDE7  +
mov ebp [esp+3Ch+var_20] +
mov eax [esp+3Ch+var_1C] +
mov edi [esp+3Ch+var_18] +
cmp ebp [esp+3Ch+arg_8] +
ja loc_45DEE7  +
mov eax edi +
mov ebx 8 +
movzx edx byte ptr [eax+1] +
lea edi [eax+1] +
test edx edx +
jnz loc_45DD80  +
mov esi [esp+3Ch+var_30] +
mov edi ebp +
mov eax 4 +
test esi esi +
jz loc_45DEBD  +
cmp ebx 7 +
jle loc_45DF91  +
cmp [esp+3Ch+arg_8] edi +
jnb loc_45DF66  +
mov eax [esp+3Ch+arg_8] +
mov ecx [esp+3Ch+var_24] +
nop   +
add edi 4 +
mov edx [edi-4] +
add eax 4 +
cmp ecx edi +
mov [eax-4] edx +
jnb loc_45DE60  +
mov edx ecx +
add eax 4 +
cmp edx eax +
mov dword ptr [eax-4] 0 +
jnb loc_45DE72  +
mov eax [esp+3Ch+var_14] +
mov [esp+3Ch+var_24] edx +
mov eax [eax-4] +
test eax eax +
jnz loc_45DEB8  +
mov eax [esp+3Ch+var_24] +
cmp [esp+3Ch+arg_8] eax +
jz loc_45E07D  +
mov eax [esp+3Ch+var_24] +
mov edx [esp+3Ch+arg_8] +
jmp loc_45DEAF  +
cmp edx eax +
jz loc_45E079  +
sub eax 4 +
mov ecx [eax] +
test ecx ecx +
jz loc_45DEA7  +
mov eax 5 +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add ebx 1 +
add [esp+3Ch+var_30] 1 +
cmp ebx 8 +
jg loc_45DF44  +
mov eax [ebp+0] +
shl eax 4 +
and ecx 0Fh +
or ecx eax +
mov eax edi +
mov [ebp+0] ecx +
jmp loc_45DE25  +
mov ebx [esp+3Ch+var_30] +
lea esi [ebp-4] +
mov dword ptr [ebp-4] 0 +
mov ebp esi +
mov [esp+3Ch+var_28] esi +
mov [esp+3Ch+var_2C] ebx +
xor ebx ebx +
movzx edx byte ptr [eax+2] +
mov eax edi +
cmp dl 20h +
ja loc_45DF1C  +
lea esi [esi+0] +
add eax 1 +
movzx edx byte ptr [eax+1] +
cmp dl 20h +
jbe loc_45DF10  +
cmp dl 30h +
jnz loc_45DE25  +
movzx edx byte ptr [eax+2] +
and edx 0FFFFFFDFh +
cmp dl 58h +
jnz loc_45DE25  +
cmp byte ptr [eax+3] 21h +
lea edx [eax+2] +
cmovnb eax edx +
jmp loc_45DE25  +
cmp ebp [esp+3Ch+arg_8] +
mov eax edi +
jbe loc_45DE25  +
mov dword ptr [ebp-4] 0 +
xor eax eax +
sub ebp 4 +
mov ebx 1 +
jmp loc_45DED8  +
mov ebx [esp+3Ch+var_10] +
test ebx ebx +
jz loc_45E0B3  +
mov edi [esp+3Ch+var_14] +
mov ecx 20h +
mov eax 0FFFFFFFFh +
sub ecx [esp+3Ch+var_10] +
shr eax cl +
and eax [edi-4] +
mov [edi-4] eax +
jmp loc_45DE8B  +
cmp edi [esp+3Ch+var_28] +
jnb loc_45DE4C  +
mov eax 8 +
mov esi 20h +
sub eax ebx +
mov ebx [edi] +
lea ebp ds:0[eax*4] +
mov eax edi +
sub esi ebp +
mov [esp+3Ch+var_30] edi +
mov edi [esp+3Ch+var_28] +
mov [esp+3Ch+var_34] esi +
jmp loc_45DFC4  +
mov ebx edx +
mov edx [eax+4] +
add eax 4 +
movzx ecx byte ptr [esp+3Ch+var_34] +
mov esi edx +
shl esi cl +
mov ecx esi +
or ecx ebx +
mov [eax-4] ecx +
mov ecx ebp +
shr edx cl +
mov [eax] edx +
cmp edi eax +
ja loc_45DFC2  +
mov edi [esp+3Ch+var_30] +
cmp [esp+3Ch+arg_8] edi +
jb loc_45DE56  +
jmp loc_45DF66  +
mov ecx [esp+3Ch+var_30] +
cmp edx 29h +
mov esi edi +
setz dl  +
mov edi ebp +
mov ebp esi +
test ecx ecx +
jnz loc_45E094  +
test dl dl +
jnz loc_45E037  +
lea ebp [eax+2] +
movsx eax byte ptr [eax+2] +
test eax eax +
jnz loc_45E032  +
jmp loc_45E0BF  +
add ebp 1 +
movsx eax byte ptr [ebp+0] +
test eax eax +
jz loc_45E0BF  +
cmp eax 29h +
jnz loc_45E023  +
mov edi [esp+3Ch+arg_0] +
lea eax [ebp+1] +
mov [edi] eax +
mov eax 4 +
jmp loc_45DEBD  +
call sub_45E0D0  +
jmp loc_45DCF4  +
movzx edx byte ptr [eax+2] +
and edx 0FFFFFFDFh +
cmp dl 58h +
jnz loc_45DD4F  +
movzx edx byte ptr [eax+3] +
cmp dl 20h +
jbe loc_45DD4F  +
add eax 2 +
jmp loc_45DD53  +
mov [esp+3Ch+var_24] eax +
mov eax [esp+3Ch+var_24] +
mov dword ptr [eax] 1 +
add esp 3Ch +
mov eax 5 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test dl dl +
jz loc_45E013  +
mov esi [esp+3Ch+arg_0] +
add eax 2 +
cmp ebx 7 +
mov [esi] eax +
jg loc_45DE4C  +
jmp loc_45DF91  +
mov eax [esp+3Ch+var_14] +
mov eax [eax-4] +
jmp loc_45DE8B  +
mov eax 4 +
jmp loc_45DEBD  +
***
mov ecx offset a123456789 +
mov edx 10h +
mov eax 30h +
nop   +
mov ds:byte_48A9E0[eax] dl +
movzx eax byte ptr [ecx] +
add edx 1 +
add ecx 1 +
test al al +
jnz loc_45E0E0  +
mov ecx offset aBcdef +
mov edx 1Ah +
mov eax 61h +
mov ds:byte_48A9E0[eax] dl +
movzx eax byte ptr [ecx] +
add edx 1 +
add ecx 1 +
test al al +
jnz loc_45E102  +
mov ecx offset aBcdef_0 +
mov edx 1Ah +
mov eax 41h +
mov ds:byte_48A9E0[eax] dl +
movzx eax byte ptr [ecx] +
add edx 1 +
add ecx 1 +
test al al +
jnz loc_45E124  +
retn   +
***
retn   +
***
mov eax [esp+4] +
xchg eax ds:dword_486560 +
retn   +
***
jmp ds:__setusermatherr  +
***
sub esp 28h +
mov [esp+28h+var_28] edx +
mov [esp+28h+var_10] eax +
mov [esp+28h+var_C] offset asc_462075 +
call sub_407F60  +
lea eax [esp+28h+var_10] +
mov [esp+28h+var_28] ebx +
mov [esp+28h+var_20] eax +
mov [esp+28h+var_24] offset loc_4016B0 +
call sub_407EF0  +
add esp 28h +
pop ebx  +
retn   +
***
push edi  +
push esi  +
push ebx  +
and esp 0FFFFFFF0h +
sub esp 2B0h +
mov ebx [ebp+arg_4] +
mov esi [ebp+arg_0] +
call sub_457890  +
mov eax ds:_iob +
mov dword ptr [esp+2BCh+var_2B0] 0 +
mov [esp+2BCh+var_2B4] 40h +
mov [esp+2BCh+var_2B8] 0 +
add eax 20h +
mov [esp+2BCh+var_2BC] eax +
mov byte ptr [esp+2BCh+var_258] 0FFh +
mov byte ptr [esp+2BCh+var_258+1] 0FFh +
mov byte ptr [esp+2BCh+var_258+2] 0FFh +
mov byte ptr [esp+2BCh+var_258+3] 0FFh +
call setvbuf  +
mov eax ds:_iob +
mov dword ptr [esp+2BCh+var_2B0] 0 +
mov [esp+2BCh+var_2B4] 40h +
mov [esp+2BCh+var_2B8] 0 +
add eax 40h +
mov [esp+2BCh+var_2BC] eax +
call setvbuf  +
mov [esp+2BCh+var_2B8] 2Fh +
mov eax [ebx] +
mov [esp+2BCh+var_2BC] eax +
call strrchr  +
test eax eax +
mov ds:dword_486584 eax +
jz loc_45F003  +
add eax 1 +
mov ds:dword_486584 eax +
fldz   +
fstp  ds:dbl_486D28 +
mov ds:byte_486800 0 +
mov ds:byte_4866E0 0 +
mov ds:dword_4866C4 0FFFFFFFFh +
call sub_403560  +
mov [esp+2BCh+var_2BC] offset sub_401580 +
call sub_457050  +
mov [esp+2BCh+var_2B8] 0 +
mov [esp+2BCh+var_2BC] 0 +
call sub_406BF0  +
test eax eax +
mov ds:dword_484088 eax +
jz loc_4603F7  +
mov [esp+2BCh+var_2B8] 0 +
mov [esp+2BCh+var_2BC] 0 +
call sub_406BF0  +
test eax eax +
mov ds:dword_484084 eax +
jz loc_4604D0  +
mov [esp+2BCh+var_2B8] 0 +
mov [esp+2BCh+var_2BC] 0 +
call sub_406BF0  +
test eax eax +
mov ds:dword_484080 eax +
jz loc_460420  +
lea eax [esp+2BCh+var_214] +
mov [esp+2BCh+var_2BC] eax +
mov ds:dword_4866A4 0 +
mov ds:dword_4866A8 0 +
mov ds:dword_48407C 0 +
mov ds:dword_486580 0 +
call sub_408270  +
lea eax [esp+2BCh+var_110] +
mov [esp+2BCh+var_2BC] eax +
call sub_4082C0  +
mov eax ds:dword_486584 +
mov [esp+2BCh+var_2BC] eax +
call strlen  +
lea edx [eax+2] +
test edx edx +
jle loc_45FB5D  +
xor eax eax +
lea esi [esi+0] +
mov ds:byte_4865A0[eax] 20h +
add eax 1 +
cmp eax edx +
jnz loc_45E5B0  +
cmp esi 1 +
mov ds:byte_4865A0[edx] 0 +
jz loc_45F047  +
fldz   +
mov [esp+2BCh+var_264] 2 +
fstp  [esp+2BCh+var_26C] +
mov [esp+2BCh+var_294] 0 +
mov [esp+2BCh+var_280] 0 +
mov [esp+2BCh+var_270] 1 +
mov [esp+2BCh+var_27C] 0 +
mov [esp+2BCh+var_290] 0 +
mov [esp+2BCh+var_288] 0 +
mov [esp+2BCh+var_278] offset unk_486920 +
mov [esp+2BCh+var_28C] 0 +
mov [esp+2BCh+var_260] 1 +
mov [esp+2BCh+var_29C] 0 +
mov [esp+2BCh+var_274] 0 +
mov [esp+2BCh+var_298] 0 +
mov [esp+2BCh+var_284] 0 +
mov [esp+2BCh+var_2B4] offset a?bBCCDeeFiLNpO +
mov [esp+2BCh+var_2B8] ebx +
mov [esp+2BCh+var_2BC] esi +
call sub_458DD0  +
cmp eax 0FFFFFFFFh +
jz loc_45EA47  +
lea edx [eax-3Fh] +
cmp edx 3Ah +
ja loc_45E9B2  +
jmp ds:off_4637E0[edx*4]  +
mov eax ds:dword_486584 +
mov [esp+2BCh+var_2B8] offset aSEraseCycleCou +
mov [esp+2BCh+var_2BC] 0 +
mov [esp+2BCh+var_2B4] eax +
call sub_401740  +
jmp loc_45E644  +
mov [esp+2BCh+var_280] 1 +
mov [esp+2BCh+var_270] 1 +
jmp loc_45E644  +
add ds:dword_4866A8 1 +
jmp loc_45E644  +
mov eax ds:dword_48A9C0 +
mov [esp+2BCh+var_288] eax +
jmp loc_45E644  +
or [esp+2BCh+var_264] 1 +
jmp loc_45E644  +
mov eax ds:dword_48A9C0 +
mov [esp+2BCh+var_294] eax +
jmp loc_45E644  +
lea eax [esp+2BCh+var_252+2] +
mov [esp+2BCh+var_2B8] eax +
mov eax ds:dword_48A9C0 +
mov [esp+2BCh+var_2B4] 0Ah +
mov [esp+2BCh+var_2BC] eax +
call strtol  +
mov edx ds:dword_48A9C0 +
mov [esp+2BCh+var_27C] eax +
mov eax [esp+2BCh+var_252+2] +
cmp eax edx +
jz loc_45E70D  +
cmp byte ptr [eax] 0 +
jnz loc_45E70D  +
cmp [esp+2BCh+var_27C] 0 +
jnz loc_45E644  +
mov eax ds:dword_486584 +
mov dword ptr [esp+2BCh+var_2B0] edx +
mov [esp+2BCh+var_2B8] offset aSInvalidIspClo +
mov [esp+2BCh+var_2BC] 0 +
mov [esp+2BCh+var_2B4] eax +
call sub_401740  +
mov [esp+2BCh+var_2BC] 1 +
call exit  +
and [esp+2BCh+var_264] 0FFFFFFFDh +
mov [esp+2BCh+var_284] 1 +
jmp loc_45E644  +
mov eax ds:dword_48A9C0 +
mov [esp+2BCh+var_278] eax +
jmp loc_45E644  +
lea eax [esp+2BCh+var_252+2] +
mov [esp+2BCh+var_2B8] eax +
mov eax ds:dword_48A9C0 +
mov [esp+2BCh+var_2B4] 0 +
mov [esp+2BCh+var_2BC] eax +
call strtol  +
mov edx ds:dword_48A9C0 +
mov [esp+2BCh+var_290] eax +
mov eax [esp+2BCh+var_252+2] +
cmp eax edx +
jz loc_45E792  +
cmp byte ptr [eax] 0 +
jz loc_45E644  +
mov eax ds:dword_486584 +
mov dword ptr [esp+2BCh+var_2B0] edx +
mov [esp+2BCh+var_2B8] offset aSInvalidBaudRa +
mov [esp+2BCh+var_2BC] 0 +
mov [esp+2BCh+var_2B4] eax +
call sub_401740  +
mov [esp+2BCh+var_2BC] 1 +
call exit  +
mov [esp+2BCh+var_260] 0 +
jmp loc_45E644  +
mov eax ds:dword_48A9C0 +
mov [esp+2BCh+var_2BC] eax +
call sub_405E90  +
test eax eax +
mov edi eax +
jz loc_4603C5  +
mov [esp+2BCh+var_2B8] eax +
mov eax ds:dword_484088 +
mov [esp+2BCh+var_2BC] eax +
call sub_406D30  +
cmp [esp+2BCh+var_260] 0 +
jz loc_45E644  +
cmp dword ptr [edi+4] 1 +
mov [esp+2BCh+var_260] 1 +
jnz loc_45E644  +
mov [esp+2BCh+var_2BC] edi +
call sub_406230  +
mov dword ptr [eax+4] 2 +
mov [esp+2BCh+var_2B8] eax +
mov eax ds:dword_484088 +
mov [esp+2BCh+var_2BC] eax +
call sub_406D30  +
jmp loc_45E644  +
mov eax ds:dword_48A9C0 +
mov [esp+2BCh+var_274] eax +
jmp loc_45E644  +
mov [esp+2BCh+var_298] 1 +
jmp loc_45E644  +
mov ds:dword_4866A4 1 +
jmp loc_45E644  +
mov eax ds:dword_48A9C0 +
mov [esp+2BCh+var_28C] eax +
jmp loc_45E644  +
and [esp+2BCh+var_264] 0FFFFFFFDh +
jmp loc_45E644  +
mov eax ds:dword_48A9C0 +
cmp byte ptr [eax] 2Bh +
jz loc_45F02E  +
mov [esp+2BCh+var_2B8] eax +
lea eax [esp+2BCh+var_214] +
mov [esp+2BCh+var_2B4] 104h +
mov [esp+2BCh+var_2BC] eax +
call strncpy  +
mov [esp+2BCh+var_111] 0 +
jmp loc_45E644  +
lea eax [esp+2BCh+var_252+2] +
mov [esp+2BCh+var_2B8] eax +
mov eax ds:dword_48A9C0 +
mov [esp+2BCh+var_2BC] eax +
call sub_458E60  +
mov edx [esp+2BCh+var_252+2] +
movzx eax byte ptr [edx] +
fstp  [esp+2BCh+var_26C] +
test al al +
mov [esp+2BCh+var_29D] al +
jz loc_45E98D  +
xor eax eax +
or ecx 0FFFFFFFFh +
mov edi edx +
scas   +
not ecx  +
sub ecx 1 +
cmp ecx 2 +
jz loc_45E9E4  +
cmp ecx 3 +
jnz loc_45F2E8  +
movzx eax byte ptr [edx+1] +
and eax 0FFFFFFDFh +
cmp al 48h +
jnz loc_45E9F4  +
cmp byte ptr [edx+2] 7Ah +
jnz loc_45E9F4  +
movzx eax [esp+2BCh+var_29D] +
cmp al 6Bh +
jz loc_46050C  +
cmp al 6Dh +
jz loc_4604F9  +
cmp al 4Dh +
jz loc_4604F9  +
fldz   +
fstp  [esp+2BCh+var_26C] +
jmp loc_45F2EE  +
call sub_401A70  +
mov [esp+2BCh+var_2BC] 0 +
call exit  +
mov eax ds:dword_48A9C0 +
mov [esp+2BCh+var_2B8] eax +
mov eax ds:dword_484084 +
mov [esp+2BCh+var_2BC] eax +
call sub_406D30  +
jmp loc_45E644  +
add ds:dword_486580 1 +
jmp loc_45E644  +
mov [esp+2BCh+var_270] 0 +
jmp loc_45E644  +
mov [esp+2BCh+var_29C] 1 +
jmp loc_45E644  +
mov eax ds:dword_48A9C0 +
cmp edx eax +
jz loc_45EA1A  +
fldz   +
fld  [esp+2BCh+var_26C] +
fucomip st st(1) +
fstp  st +
jp loc_45E644  +
jnz loc_45E644  +
jmp loc_45EA1A  +
mov dword ptr [esp+2BCh+var_2B0] eax +
mov eax ds:dword_486584 +
mov [esp+2BCh+var_2B8] offset aSInvalidOption +
mov [esp+2BCh+var_2BC] 0 +
mov [esp+2BCh+var_2B4] eax +
call sub_401740  +
call sub_401A70  +
mov [esp+2BCh+var_2BC] 1 +
call exit  +
movzx eax [esp+2BCh+var_29D] +
and eax 0FFFFFFDFh +
cmp al 48h +
jz loc_45F5D2  +
mov eax ds:dword_486584 +
mov dword ptr [esp+2BCh+var_2B0] edx +
mov [esp+2BCh+var_2B8] offset aSInvalidBitClo +
mov [esp+2BCh+var_2BC] 0 +
mov [esp+2BCh+var_2B4] eax +
call sub_401740  +
mov eax ds:dword_48A9C0 +
mov dword ptr [esp+2BCh+var_2B0] eax +
mov eax ds:dword_486584 +
mov [esp+2BCh+var_2B8] offset aSInvalidBitC_0 +
mov [esp+2BCh+var_2BC] 0 +
mov [esp+2BCh+var_2B4] eax +
call sub_401740  +
mov [esp+2BCh+var_2BC] 1 +
call exit  +
mov ecx [esp+2BCh+var_294] +
test ecx ecx +
jz loc_45EA73  +
mov eax ds:_iob +
mov [esp+2BCh+var_2B8] offset aW +
mov [esp+2BCh+var_2BC] ecx +
add eax 40h +
mov [esp+2BCh+var_2B4] eax +
call freopen  +
test eax eax +
jz loc_45FB2B  +
cmp ds:dword_4866A8 0 +
jz loc_45F39B  +
mov eax off_461004 +
mov [esp+2BCh+var_2A8] offset byte_4865A0 +
mov dword ptr [esp+2BCh+var_2B0+4] offset byte_4865A0 +
mov [esp+2BCh+var_2B8] offset aSVersionSScopy +
mov dword ptr [esp+2BCh+var_2B0] eax +
mov eax ds:dword_486584 +
mov [esp+2BCh+var_2BC] 1 +
mov [esp+2BCh+var_2B4] eax +
call sub_401740  +
lea eax [esp+2BCh+var_214] +
mov dword ptr [esp+2BCh+var_2B0] eax +
mov [esp+2BCh+var_2B4] offset byte_4865A0 +
mov [esp+2BCh+var_2B8] offset aSsystemWideCon +
mov [esp+2BCh+var_2BC] 1 +
call sub_401740  +
lea eax [esp+2BCh+var_214] +
mov [esp+2BCh+var_2BC] eax +
call sub_4039D0  +
test eax eax +
jnz loc_460476  +
cmp byte ptr [esp+2BCh+var_110] 0 +
jz loc_45EB6E  +
lea eax [esp+2BCh+var_110] +
mov dword ptr [esp+2BCh+var_2B0] eax +
mov [esp+2BCh+var_2B4] offset byte_4865A0 +
mov [esp+2BCh+var_2B8] offset aSuserConfigura +
mov [esp+2BCh+var_2BC] 1 +
call sub_401740  +
lea eax [esp+2BCh+var_238] +
mov [esp+2BCh+var_2B8] eax +
lea eax [esp+2BCh+var_110] +
mov [esp+2BCh+var_2BC] eax +
call sub_458F50  +
test eax eax +
js loc_45EB52  +
cmp [esp+2BCh+var_232] 0 +
js loc_45FAE0  +
mov [esp+2BCh+var_2B4] offset byte_4865A0 +
mov [esp+2BCh+var_2B8] offset aSuserConfigu_0 +
mov [esp+2BCh+var_2BC] 1 +
call sub_401740  +
mov eax ds:dword_484080 +
mov [esp+2BCh+var_2BC] eax +
call sub_406F70  +
test eax eax +
jle loc_45EBDA  +
mov eax ds:dword_484080 +
mov [esp+2BCh+var_2BC] eax +
call sub_406F20  +
test eax eax +
mov esi eax +
jz loc_45EBDA  +
mov [esp+2BCh+var_2BC] esi +
call sub_406F60  +
mov [esp+2BCh+var_2B4] offset byte_4865A0 +
mov [esp+2BCh+var_2B8] offset aSadditionalCon +
mov [esp+2BCh+var_2BC] 1 +
mov ebx eax +
mov dword ptr [esp+2BCh+var_2B0] eax +
call sub_401740  +
mov [esp+2BCh+var_2BC] ebx +
call sub_4039D0  +
test eax eax +
jnz loc_460449  +
mov [esp+2BCh+var_2BC] esi +
call sub_406F40  +
test eax eax +
mov esi eax +
jnz loc_45EB92  +
fld  ds:dbl_486D28 +
fldz   +
fxch  st(1) +
fucomi st st(1) +
jbe loc_45EBFC  +
fld  [esp+2BCh+var_26C] +
fucomi st st(2) +
fstp  st(2) +
jp loc_45EC02  +
fcmovne st st(1) +
fstp  st(1) +
fstp  [esp+2BCh+var_26C] +
jmp loc_45EC06  +
fstp  st +
fstp  st +
jmp loc_45EC06  +
fstp  st +
fstp  st +
mov [esp+2BCh+var_2B8] offset asc_462093 +
mov [esp+2BCh+var_2BC] 1 +
call sub_401740  +
mov eax [esp+2BCh+var_288] +
test eax eax +
jz loc_45EC3A  +
mov [esp+2BCh+var_2B8] offset a?_0 +
mov [esp+2BCh+var_2BC] eax +
call strcmp  +
test eax eax +
jz loc_4603AC  +
mov eax [esp+2BCh+var_278] +
test eax eax +
jz loc_45EC76  +
mov [esp+2BCh+var_2B8] offset a?_0 +
mov [esp+2BCh+var_2BC] eax +
call strcmp  +
test eax eax +
jz loc_460345  +
mov eax [esp+2BCh+var_278] +
mov [esp+2BCh+var_2B8] offset a?type +
mov [esp+2BCh+var_2BC] eax +
call strcmp  +
test eax eax +
jz loc_4602F0  +
mov eax [esp+2BCh+var_278] +
cmp byte ptr [eax] 0 +
jz loc_4602AB  +
mov eax [esp+2BCh+var_278] +
mov [esp+2BCh+var_2B8] eax +
mov eax ds:dword_4866C0 +
mov [esp+2BCh+var_2BC] eax +
call sub_408B00  +
test eax eax +
mov ds:dword_48407C eax +
jz loc_460588  +
mov edx [eax+178h] +
test edx edx +
jz loc_46055F  +
mov [esp+2BCh+var_2BC] eax +
call edx  +
mov eax ds:dword_48407C +
mov edx [eax+94Ch] +
test edx edx +
jz loc_45ECD1  +
mov [esp+2BCh+var_2BC] eax +
call edx  +
mov eax ds:dword_48407C +
cmp dword ptr [eax+950h] 0 +
jz loc_45ECE6  +
mov [esp+2BCh+var_2BC] offset byte_401560 +
call sub_457050  +
mov eax ds:dword_484084 +
mov [esp+2BCh+var_2BC] eax +
call sub_406F70  +
test eax eax +
jle loc_45ED22  +
mov edx ds:dword_48407C +
mov eax [edx+948h] +
test eax eax +
jz loc_45F7FB  +
mov ecx ds:dword_484084 +
mov [esp+2BCh+var_2BC] edx +
mov [esp+2BCh+var_2B8] ecx +
call eax  +
test eax eax +
js loc_4601E1  +
cmp [esp+2BCh+var_274] 0 +
jz loc_45F735  +
cmp [esp+2BCh+var_288] 0 +
jz loc_46020A  +
mov eax [esp+2BCh+var_288] +
mov [esp+2BCh+var_2B8] eax +
mov eax ds:dword_486D20 +
mov [esp+2BCh+var_2BC] eax +
call sub_407DB0  +
test eax eax +
mov [esp+2BCh+var_260] eax +
jz loc_46016E  +
cmp [esp+2BCh+var_28C] 0 +
jz loc_45ED89  +
mov edx ds:dword_48407C +
mov eax [edx+940h] +
test eax eax +
jz loc_45F765  +
mov ecx [esp+2BCh+var_28C] +
mov [esp+2BCh+var_2BC] edx +
mov [esp+2BCh+var_2B8] ecx +
call eax  +
test eax eax +
js loc_46029A  +
cmp ds:dword_4866C4 0 +
jnz loc_45EDA0  +
xor eax eax +
cmp [esp+2BCh+var_270] 0 +
setz al  +
mov [esp+2BCh+var_270] eax +
mov [esp+2BCh+var_2BC] 0 +
call _isatty  +
test eax eax +
jnz loc_45EDBE  +
cmp [esp+2BCh+var_280] 0 +
cmovnz eax [esp+2BCh+var_270] +
mov [esp+2BCh+var_270] eax +
mov ecx [esp+2BCh+var_260] +
xor eax eax +
mov edi [esp+2BCh+var_270] +
mov edx [ecx+84h] +
mov [esp+2BCh+var_2BC] ecx +
test dh 1 +
cmovnz edi eax +
and edx 880h +
cmovz eax edi +
mov [esp+2BCh+var_270] eax +
call sub_407820  +
test eax eax +
jnz loc_460271  +
mov eax ds:dword_484088 +
mov [esp+2BCh+var_2BC] eax +
call sub_406F20  +
test eax eax +
mov ebx eax +
jnz loc_45EE22  +
jmp loc_45EEC8  +
mov [esp+2BCh+var_2BC] ebx +
call sub_406F40  +
test eax eax +
mov ebx eax +
jz loc_45EEC8  +
mov [esp+2BCh+var_2BC] ebx +
call sub_406F60  +
mov esi eax +
mov eax [eax] +
test eax eax +
jnz loc_45EE10  +
mov eax [esp+2BCh+var_260] +
mov edi offset aApplication +
mov edx [esi+4] +
mov ecx [esi+8] +
test byte ptr [eax+84h] 80h +
mov eax offset aFlash_0 +
cmovz edi eax +
test edx edx +
mov eax 72h +
jz loc_45EE64  +
xor eax eax +
sub edx 1 +
setz al  +
add eax 76h +
mov dword ptr [esp+2BCh+var_2B0] eax +
mov eax ds:dword_486584 +
mov dword ptr [esp+2BCh+var_2B0+4] ecx +
mov [esp+2BCh+var_2A8] edi +
mov [esp+2BCh+var_2B8] offset aSDefaultingMem +
mov [esp+2BCh+var_2B4] eax +
mov [esp+2BCh+var_2BC] 2 +
call sub_401740  +
mov [esp+2BCh+var_2BC] edi +
call _strdup  +
test eax eax +
mov [esi] eax +
jnz loc_45EE10  +
mov eax ds:dword_486584 +
mov [esp+2BCh+var_2B8] offset aSOutOfMemory_0 +
mov [esp+2BCh+var_2BC] 0 +
mov [esp+2BCh+var_2B4] eax +
call sub_401740  +
mov [esp+2BCh+var_2BC] 1 +
call exit  +
mov eax [esp+2BCh+var_274] +
cmp byte ptr [eax] 0 +
jz loc_46022C  +
cmp ds:dword_486580 0 +
jnz loc_45F3F2  +
cmp [esp+2BCh+var_290] 0 +
jnz loc_45F3BE  +
fldz   +
fld  [esp+2BCh+var_26C] +
fucomip st st(1) +
fstp  st +
jp loc_45F35D  +
jnz loc_45F35D  +
cmp [esp+2BCh+var_27C] 0 +
mov eax ds:dword_48407C +
jnz loc_45F329  +
mov ecx [esp+2BCh+var_274] +
mov edx [eax+8F8h] +
mov [esp+2BCh+var_2BC] eax +
mov [esp+2BCh+var_2B8] ecx +
call edx  +
test eax eax +
js loc_45F310  +
cmp [esp+2BCh+var_298] 0 +
jz loc_45F052  +
mov eax ds:dword_48407C +
cmp dword ptr [eax+944h] 0 +
mov eax ds:dword_486584 +
mov [esp+2BCh+var_2B4] eax +
jz loc_45FA46  +
mov [esp+2BCh+var_2B8] offset aSPerformingRcO +
mov [esp+2BCh+var_2BC] 0 +
call sub_401740  +
mov eax ds:dword_48407C +
mov edx [eax+944h] +
mov [esp+2BCh+var_2BC] eax +
call edx  +
test eax eax +
mov ebx eax +
jnz loc_45EFA4  +
cmp ds:dword_4866A8 1 +
jg loc_45EFA4  +
mov eax ds:dword_486584 +
mov [esp+2BCh+var_2B8] offset aSCalibrationVa +
mov [esp+2BCh+var_2BC] 0 +
mov [esp+2BCh+var_2B4] eax +
call sub_401740  +
mov eax ds:dword_48407C +
mov edx [eax+8DCh] +
mov [esp+2BCh+var_2BC] eax +
call edx  +
mov eax ds:dword_48407C +
mov edx [eax+8D4h] +
mov [esp+2BCh+var_2BC] eax +
call edx  +
mov eax ds:dword_48407C +
mov edx [eax+8B8h] +
mov [esp+2BCh+var_2B8] 0 +
mov [esp+2BCh+var_2BC] eax +
call edx  +
mov eax ds:dword_48407C +
mov edx [eax+8FCh] +
mov [esp+2BCh+var_2BC] eax +
call edx  +
cmp ds:dword_4866A8 1 +
jle loc_45F7D9  +
lea esp [ebp-0Ch] +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+2BCh+var_2B8] 5Ch +
mov eax [ebx] +
mov [esp+2BCh+var_2BC] eax +
call strrchr  +
test eax eax +
mov ds:dword_486584 eax +
jnz loc_45E4AD  +
mov eax [ebx] +
mov ds:dword_486584 eax +
jmp loc_45E4B5  +
add eax 1 +
mov [esp+2BCh+var_2B8] eax +
mov eax ds:dword_484080 +
mov [esp+2BCh+var_2BC] eax +
call sub_406D30  +
jmp loc_45E644  +
call sub_401A70  +
xor ebx ebx +
nop   +
jmp loc_45EFF9  +
mov eax ds:dword_486580 +
test eax eax +
jnz loc_45F787  +
cmp ds:dword_4866A8 1 +
jle loc_45F965  +
mov eax ds:dword_48407C +
mov edx [eax+8D0h] +
mov [esp+2BCh+var_2BC] eax +
call edx  +
mov eax ds:dword_48407C +
mov edx [eax+8B8h] +
mov [esp+2BCh+var_2B8] 0 +
mov [esp+2BCh+var_2BC] eax +
call edx  +
mov eax ds:dword_48407C +
mov edx [eax+8BCh] +
mov [esp+2BCh+var_2B8] 0 +
mov [esp+2BCh+var_2BC] eax +
call edx  +
mov eax ds:dword_48407C +
mov edx [eax+8C0h] +
mov [esp+2BCh+var_2B8] 0 +
mov [esp+2BCh+var_2BC] eax +
call edx  +
mov eax ds:dword_48407C +
mov edx [eax+8C4h] +
mov [esp+2BCh+var_2B8] 0 +
mov [esp+2BCh+var_2BC] eax +
call edx  +
mov eax ds:dword_48407C +
mov ecx [esp+2BCh+var_260] +
mov edx [eax+8C8h] +
mov [esp+2BCh+var_2B8] ecx +
mov [esp+2BCh+var_2BC] eax +
call edx  +
mov ecx eax +
not ecx  +
mov [esp+2BCh+var_274] ecx +
shr [esp+2BCh+var_274] 1Fh +
movzx ecx byte ptr [esp+2BCh+var_274] +
test ecx ecx +
mov [esp+2BCh+var_288] ecx +
jnz loc_45F166  +
mov dword ptr [esp+2BCh+var_2B0] eax +
mov eax ds:dword_486584 +
mov [esp+2BCh+var_2B8] offset aSInitializatio +
mov [esp+2BCh+var_2BC] 0 +
mov [esp+2BCh+var_2B4] eax +
call sub_401740  +
cmp ds:dword_4866A4 0 +
jnz loc_45F166  +
mov dword ptr [esp+2BCh+var_2B0] offset byte_4865A0 +
mov ebx 1 +
mov [esp+2BCh+var_2B4] offset byte_4865A0 +
mov [esp+2BCh+var_2B8] offset aSdoubleCheckCo +
mov [esp+2BCh+var_2BC] 0 +
call sub_401740  +
jmp loc_45EFA4  +
mov eax ds:dword_48407C +
mov edx [eax+8B8h] +
mov [esp+2BCh+var_2B8] 1 +
mov [esp+2BCh+var_2BC] eax +
call edx  +
cmp ds:dword_4866A8 1 +
jle loc_45FAA4  +
mov eax [esp+2BCh+var_260] +
test byte ptr [eax+85h] 1 +
jnz loc_45F4C7  +
mov eax [esp+2BCh+var_264] +
mov [esp+2BCh+var_27C] 2710h +
mov dword ptr [esp+2BCh+var_26C] 0 +
and eax 1 +
mov [esp+2BCh+var_28C] eax +
mov eax [esp+2BCh+var_27C] +
mov [esp+2BCh+var_2BC] eax +
call sub_459150  +
cmp [esp+2BCh+var_288] 0 +
jz loc_45F64E  +
mov eax [esp+2BCh+var_260] +
mov [esp+2BCh+var_2B8] eax +
mov eax ds:dword_48407C +
mov [esp+2BCh+var_2BC] eax +
call sub_405DF0  +
test eax eax +
mov ebx eax +
jz loc_45F64E  +
lea eax [eax+44h] +
cmp eax 1 +
ja loc_45F99B  +
mov eax [esp+2BCh+var_260] +
test byte ptr [eax+85h] 20h +
jz loc_45F99B  +
cmp dword ptr [esp+2BCh+var_26C] 0 +
jnz loc_45F99B  +
mov edx ds:dword_48407C +
mov eax [edx+91Ch] +
test eax eax +
jz loc_45F293  +
lea ecx [esp+2BCh+var_24C] +
mov [esp+2BCh+var_2B4] ecx +
mov ecx [esp+2BCh+var_260] +
mov [esp+2BCh+var_2BC] edx +
mov [esp+2BCh+var_2B8] ecx +
call eax  +
lea eax [esp+2BCh+var_24C] +
mov dword ptr [esp+2BCh+var_2B0] eax +
mov eax ds:dword_486584 +
mov [esp+2BCh+var_2B8] offset aSSystemInforma +
mov [esp+2BCh+var_2BC] 1 +
mov [esp+2BCh+var_2B4] eax +
call sub_401740  +
cmp ds:dword_4866A8 1 +
jle loc_460601  +
mov eax [esp+2BCh+var_260] +
mov [esp+2BCh+var_2B4] 7 +
lea esi [eax+60h] +
lea eax [esp+2BCh+var_24C] +
mov [esp+2BCh+var_2B8] eax +
mov [esp+2BCh+var_2BC] esi +
call strncmp  +
test eax eax +
jnz loc_4605CE  +
cmp [esp+2BCh+var_284] 0 +
jz loc_45F99B  +
cmp [esp+2BCh+var_28C] 0 +
jnz loc_45F97E  +
cmp ds:dword_4866A8 1 +
jle loc_4606E8  +
mov eax [esp+2BCh+var_260] +
mov [esp+2BCh+var_2B8] eax +
mov eax ds:dword_48407C +
mov [esp+2BCh+var_2BC] eax +
call sub_405000  +
test eax eax +
jnz loc_4601DA  +
mov dword ptr [esp+2BCh+var_26C] 1 +
mov [esp+2BCh+var_284] 0 +
jmp loc_45F1B7  +
fldz   +
fstp  [esp+2BCh+var_26C] +
fldz   +
fld  [esp+2BCh+var_26C] +
fucomip st st(1) +
fstp  st +
jnp loc_460692  +
mov eax ds:dword_48A9C0 +
cmp edx eax +
jnz loc_45E644  +
jmp loc_45EA1A  +
mov eax ds:dword_48407C +
mov ebx 1 +
mov dword ptr [eax+478h] 0 +
jmp loc_45EFEC  +
mov edi [esp+2BCh+var_27C] +
mov [esp+2BCh+var_2B4] offset byte_4865A0 +
mov [esp+2BCh+var_2B8] offset aSsettingIspClo +
mov [esp+2BCh+var_2BC] 1 +
mov dword ptr [esp+2BCh+var_2B0] edi +
call sub_401740  +
mov eax ds:dword_48407C +
mov [eax+898h] edi +
jmp loc_45EF13  +
fld  [esp+2BCh+var_26C] +
fstp  [esp+2BCh+var_2B0] +
mov [esp+2BCh+var_2B4] offset byte_4865A0 +
mov [esp+2BCh+var_2B8] offset aSsettingBitClk +
mov [esp+2BCh+var_2BC] 1 +
call sub_401740  +
mov eax ds:dword_48407C +
fld  [esp+2BCh+var_26C] +
fmul  ds:dbl_4638E8 +
fstp  qword ptr [eax+890h] +
jmp loc_45EF03  +
mov [esp+2BCh+var_2BC] 2 +
call _isatty  +
test eax eax +
jz loc_45F5EF  +
mov ds:dword_487140 offset loc_4018C0 +
jmp loc_45EA80  +
mov edi [esp+2BCh+var_290] +
mov [esp+2BCh+var_2B4] offset byte_4865A0 +
mov [esp+2BCh+var_2B8] offset aSoverridingBau +
mov [esp+2BCh+var_2BC] 1 +
mov dword ptr [esp+2BCh+var_2B0] edi +
call sub_401740  +
mov eax ds:dword_48407C +
mov [eax+480h] edi +
jmp loc_45EEED  +
mov eax [esp+2BCh+var_274] +
mov [esp+2BCh+var_2B4] offset byte_4865A0 +
mov [esp+2BCh+var_2B8] offset aSusingPortS +
mov [esp+2BCh+var_2BC] 1 +
mov dword ptr [esp+2BCh+var_2B0] eax +
call sub_401740  +
mov eax [esp+2BCh+var_278] +
mov [esp+2BCh+var_2B4] offset byte_4865A0 +
mov [esp+2BCh+var_2B8] offset aSusingProgramm +
mov [esp+2BCh+var_2BC] 1 +
mov dword ptr [esp+2BCh+var_2B0] eax +
call sub_401740  +
mov eax ds:dword_48407C +
mov [esp+2BCh+var_2B8] offset aAvr910 +
add eax 54h +
mov [esp+2BCh+var_2BC] eax +
call strcmp  +
test eax eax +
jnz loc_45EEE2  +
mov [esp+2BCh+var_2B4] offset byte_4865A0 +
mov [esp+2BCh+var_2B8] offset aSavr910_devcod +
mov [esp+2BCh+var_2BC] 1 +
call sub_401740  +
mov eax [esp+2BCh+var_260] +
mov eax [eax+6Ch] +
test eax eax +
jz loc_45FDD5  +
mov [esp+2BCh+var_2B4] eax +
mov [esp+2BCh+var_2B8] offset a0xX +
mov [esp+2BCh+var_2BC] 0 +
call sub_401740  +
jmp loc_45EEE2  +
mov eax [esp+2BCh+var_260] +
mov [esp+2BCh+var_2B8] offset aSWarningSignat +
mov [esp+2BCh+var_2BC] 0 +
mov dword ptr [esp+2BCh+var_2B0] eax +
mov eax ds:dword_486584 +
mov [esp+2BCh+var_2B4] eax +
call sub_401740  +
cmp [esp+2BCh+var_270] 1 +
setz byte ptr [esp+2BCh+var_26C]  +
cmp byte ptr [esp+2BCh+var_274] 0 +
jnz loc_45F9C6  +
test byte ptr [esp+2BCh+var_264] 2 +
jz loc_45F558  +
mov eax [esp+2BCh+var_260] +
test byte ptr [eax+84h] 80h +
jnz loc_45F8FF  +
mov ebx offset aFlash_0 +
mov eax ds:dword_484088 +
and [esp+2BCh+var_264] 0FFFFFFFDh +
mov [esp+2BCh+var_2BC] eax +
call sub_406F20  +
mov edi eax +
jmp loc_45F554  +
mov [esp+2BCh+var_2BC] edi +
call sub_406F60  +
mov esi eax +
mov eax [eax] +
mov [esp+2BCh+var_2B8] eax +
mov eax [esp+2BCh+var_260] +
mov [esp+2BCh+var_2BC] eax +
call sub_407980  +
test eax eax +
jz loc_45F54A  +
mov [esp+2BCh+var_2B8] ebx +
mov [esp+2BCh+var_2BC] eax +
call ds:_stricmp  +
test eax eax +
jnz loc_45F54A  +
cmp dword ptr [esi+4] 1 +
jz loc_4606A5  +
mov [esp+2BCh+var_2BC] edi +
call sub_406F40  +
mov edi eax +
test edi edi +
jnz loc_45F50F  +
cmp [esp+2BCh+var_284] 0 +
jz loc_45F59D  +
cmp byte ptr [esp+2BCh+var_274] 0 +
jz loc_45F59D  +
test byte ptr [esp+2BCh+var_264] 1 +
jnz loc_460670  +
cmp ds:dword_4866A8 1 +
jle loc_46064E  +
mov eax [esp+2BCh+var_260] +
mov [esp+2BCh+var_2B8] eax +
mov eax ds:dword_48407C +
mov [esp+2BCh+var_2BC] eax +
call sub_404FF0  +
test eax eax +
mov ebx eax +
jnz loc_45EFA4  +
xor ebx ebx +
cmp [esp+2BCh+var_29C] 0 +
jz loc_45F5BD  +
mov eax [esp+2BCh+var_260] +
mov [esp+2BCh+var_2B8] eax +
mov eax ds:dword_48407C +
mov [esp+2BCh+var_2BC] eax +
call sub_403050  +
mov ebx eax +
cmp [esp+2BCh+var_288] 0 +
jnz loc_45FB64  +
mov ebx 1 +
jmp loc_45EFA4  +
cmp byte ptr [edx+1] 7Ah +
jnz loc_45E9F4  +
fld  [esp+2BCh+var_26C] +
fdivr  ds:flt_4638DC +
fstp  [esp+2BCh+var_26C] +
jmp loc_45F2EE  +
mov eax ds:_iob +
mov dword ptr [esp+2BCh+var_2B0] 0 +
mov [esp+2BCh+var_2B4] 4 +
mov [esp+2BCh+var_2B8] 0 +
add eax 40h +
mov [esp+2BCh+var_2BC] eax +
mov ds:dword_487140 offset loc_401780 +
call setvbuf  +
mov eax ds:_iob +
mov dword ptr [esp+2BCh+var_2B0] 0 +
mov [esp+2BCh+var_2B4] 4 +
mov [esp+2BCh+var_2B8] 0 +
add eax 20h +
mov [esp+2BCh+var_2BC] eax +
call setvbuf  +
jmp loc_45EA80  +
mov eax [esp+2BCh+var_260] +
mov [esp+2BCh+var_2B8] offset aSignature_0 +
mov [esp+2BCh+var_2BC] eax +
call sub_407980  +
test eax eax +
mov esi eax +
jz loc_45F4A2  +
cmp ds:dword_4866A8 1 +
jle loc_45F8DD  +
mov [esp+2BCh+var_278] 1 +
mov edi 1 +
xor ebx ebx +
mov eax [esi+44h] +
jmp loc_45F696  +
xor edi edi +
test dl dl +
jnz loc_45F6AF  +
add ebx 1 +
cmp ebx eax +
jge loc_45F6DD  +
cmp ds:dword_4866A8 1 +
jle loc_45F6B9  +
mov edx [esi+78h] +
movzx edx byte ptr [edx+ebx] +
cmp dl 0FFh +
jnz loc_45F68D  +
mov [esp+2BCh+var_278] 0 +
jmp loc_45F693  +
mov eax [esi+78h] +
movzx eax byte ptr [eax+ebx] +
mov [esp+2BCh+var_2B8] offset a02x_2 +
mov [esp+2BCh+var_2BC] 0 +
mov [esp+2BCh+var_2B4] eax +
call sub_401740  +
mov eax [esi+44h] +
jmp loc_45F6A3  +
cmp ds:dword_4866A8 1 +
jle loc_45FA64  +
mov eax [esp+2BCh+var_278] +
or eax edi +
jz loc_4604AA  +
add dword ptr [esp+2BCh+var_26C] 1 +
cmp dword ptr [esp+2BCh+var_26C] 3 +
jz loc_45F81D  +
imul eax [esp+2BCh+var_27C] +
cmp ds:dword_4866A8 1 +
mov [esp+2BCh+var_27C] eax +
jg loc_45F1B7  +
mov [esp+2BCh+var_2B8] offset aRetrying +
mov [esp+2BCh+var_2BC] 0 +
call sub_401740  +
jmp loc_45F1B7  +
mov eax ds:dword_48407C +
mov eax [eax+474h] +
cmp eax 1 +
jz loc_45FAD3  +
jb loc_45FAC6  +
cmp eax 2 +
mov eax offset aUsb +
cmovnz eax [esp+2BCh+var_274] +
mov [esp+2BCh+var_274] eax +
jmp loc_45ED2D  +
mov eax ds:dword_486584 +
mov [esp+2BCh+var_2B8] offset aSWarningEOptio +
mov [esp+2BCh+var_2BC] 0 +
mov [esp+2BCh+var_2B4] eax +
call sub_401740  +
jmp loc_45ED89  +
mov dword ptr [esp+2BCh+var_2B0] eax +
mov eax [esp+2BCh+var_260] +
mov [esp+2BCh+var_2B4] offset byte_4865A0 +
mov [esp+2BCh+var_2B8] eax +
mov eax ds:_iob +
add eax 40h +
mov [esp+2BCh+var_2BC] eax +
call sub_407F80  +
mov [esp+2BCh+var_2B8] offset asc_462093 +
mov [esp+2BCh+var_2BC] 1 +
call sub_401740  +
mov eax ds:dword_48407C +
mov [esp+2BCh+var_2B8] offset byte_4865A0 +
mov [esp+2BCh+var_2BC] eax +
call sub_408830  +
jmp loc_45F05F  +
mov eax ds:dword_486584 +
mov [esp+2BCh+var_2B8] offset aSDone_ThankYou +
mov [esp+2BCh+var_2BC] 0 +
mov [esp+2BCh+var_2B4] eax +
call sub_401740  +
jmp loc_45EFF9  +
mov eax ds:dword_486584 +
mov [esp+2BCh+var_2B8] offset aSWarningProgra +
mov [esp+2BCh+var_2BC] 0 +
mov [esp+2BCh+var_2B4] eax +
call sub_401740  +
jmp loc_45ED22  +
cmp ds:dword_4866A8 1 +
jle loc_46051F  +
mov eax ds:dword_486584 +
mov [esp+2BCh+var_2B8] offset aSYikesInvalidD +
mov [esp+2BCh+var_2BC] 0 +
mov [esp+2BCh+var_2B4] eax +
call sub_401740  +
cmp ds:dword_4866A4 0 +
jz loc_45F138  +
cmp dword ptr [esi+44h] 3 +
jnz loc_45F86D  +
mov ecx [esp+2BCh+var_260] +
mov eax [esi+78h] +
movzx ecx byte ptr [ecx+76h] +
cmp [eax] cl +
jz loc_460538  +
mov ecx [esp+2BCh+var_260] +
movzx eax byte ptr [ecx+78h] +
mov [esp+2BCh+var_2A4] eax +
movzx eax byte ptr [ecx+77h] +
mov [esp+2BCh+var_2A8] eax +
movzx eax byte ptr [ecx+76h] +
mov dword ptr [esp+2BCh+var_2B0] ecx +
mov [esp+2BCh+var_2B8] offset aSExpectedSigna +
mov [esp+2BCh+var_2BC] 0 +
mov dword ptr [esp+2BCh+var_2B0+4] eax +
mov eax ds:dword_486584 +
mov [esp+2BCh+var_2B4] eax +
call sub_401740  +
cmp ds:dword_4866A4 0 +
jnz loc_45F4C7  +
mov [esp+2BCh+var_2B4] offset byte_4865A0 +
mov ebx 1 +
mov [esp+2BCh+var_2B8] offset aSdoubleCheckCh +
mov [esp+2BCh+var_2BC] 0 +
call sub_401740  +
jmp loc_45EFA4  +
mov eax ds:dword_486584 +
mov [esp+2BCh+var_2B8] offset aSDeviceSignatu +
mov [esp+2BCh+var_2BC] 0 +
mov [esp+2BCh+var_2B4] eax +
call sub_401740  +
jmp loc_45F679  +
mov eax ds:dword_48407C +
cmp dword ptr [eax+908h] 0 +
jz loc_460644  +
mov eax ds:dword_484088 +
mov [esp+2BCh+var_2BC] eax +
call sub_406F70  +
test eax eax +
jle loc_460633  +
cmp ds:dword_4866A8 1 +
jg loc_45F558  +
mov eax ds:dword_486584 +
mov dword ptr [esp+2BCh+var_2B0+4] offset byte_4865A0 +
mov dword ptr [esp+2BCh+var_2B0] offset byte_4865A0 +
mov [esp+2BCh+var_2B8] offset aSNoteProgramme +
mov [esp+2BCh+var_2B4] eax +
mov [esp+2BCh+var_2BC] 0 +
call sub_401740  +
jmp loc_45F558  +
mov [esp+2BCh+var_2B8] offset asc_462093 +
mov [esp+2BCh+var_2BC] 0 +
call sub_401740  +
jmp loc_45F06C  +
mov eax ds:dword_486584 +
mov [esp+2BCh+var_2B8] offset aSConflictingEA +
mov [esp+2BCh+var_2BC] 0 +
mov [esp+2BCh+var_2B4] eax +
call sub_401740  +
mov eax ds:dword_486584 +
mov dword ptr [esp+2BCh+var_2B0] ebx +
mov ebx 1 +
mov [esp+2BCh+var_2B8] offset aSErrorReadin_0 +
mov [esp+2BCh+var_2BC] 0 +
mov [esp+2BCh+var_2B4] eax +
call sub_401740  +
jmp loc_45EFA4  +
cmp byte ptr [esp+2BCh+var_26C] 0 +
jz loc_45F4DC  +
mov eax [esp+2BCh+var_260] +
lea edx [esp+2BCh+var_258] +
lea esi [esp+2BCh+var_258+3] +
lea ebx [esp+2BCh+var_258+2] +
lea edi [esp+65h] +
mov [esp+2BCh+var_2A8] eax +
mov eax ds:dword_48407C +
mov [esp+2BCh+var_2BC] edx +
mov dword ptr [esp+2BCh+var_2B0] esi +
mov [esp+2BCh+var_2B4] ebx +
mov dword ptr [esp+2BCh+var_2B0+4] eax +
mov [esp+2BCh+var_2B8] edi +
mov [esp+2BCh+var_270] edx +
call sub_408DC0  +
mov edx [esp+2BCh+var_270] +
test eax eax +
jz loc_460723  +
cmp eax 0FFFFFFFBh +
mov eax ds:dword_486584 +
mov [esp+2BCh+var_2B4] eax +
jz loc_46070A  +
mov [esp+2BCh+var_2B8] offset aSSafemodeToPro +
mov ebx 1 +
mov [esp+2BCh+var_2BC] 0 +
call sub_401740  +
jmp loc_45EFA4  +
mov [esp+2BCh+var_2B8] offset aSProgrammerDoe +
mov ebx 1 +
mov [esp+2BCh+var_2BC] 0 +
call sub_401740  +
jmp loc_45EFA4  +
mov edx [esi+78h] +
mov [esp+2BCh+var_2B4] eax +
mov eax ds:dword_486D20 +
mov [esp+2BCh+var_2B8] edx +
mov [esp+2BCh+var_2BC] eax +
call sub_407E90  +
test eax eax +
jz loc_45F6EA  +
add eax 40h +
mov [esp+2BCh+var_2B4] eax +
mov [esp+2BCh+var_2B8] offset aProbablyS +
mov [esp+2BCh+var_2BC] 0 +
call sub_401740  +
jmp loc_45F6EA  +
mov eax ds:dword_486584 +
mov [esp+2BCh+var_2B8] offset aSAvrDeviceInit +
mov [esp+2BCh+var_2BC] 0 +
mov [esp+2BCh+var_2B4] eax +
call sub_401740  +
jmp loc_45F18B  +
mov [esp+2BCh+var_274] offset byte_486800 +
jmp loc_45ED2D  +
mov [esp+2BCh+var_274] offset byte_4866E0 +
jmp loc_45ED2D  +
lea eax [esp+2BCh+var_110] +
mov [esp+2BCh+var_2BC] eax +
call sub_4039D0  +
test eax eax +
jz loc_45EB6E  +
lea eax [esp+2BCh+var_110] +
mov dword ptr [esp+2BCh+var_2B0] eax +
mov eax ds:dword_486584 +
mov [esp+2BCh+var_2B8] offset aSErrorReadingU +
mov [esp+2BCh+var_2BC] 0 +
mov [esp+2BCh+var_2B4] eax +
call sub_401740  +
mov [esp+2BCh+var_2BC] 1 +
call exit  +
call ds:__imp__errno  +
mov ebx 1 +
mov eax [eax] +
mov [esp+2BCh+var_2BC] eax +
call strerror  +
mov [esp+2BCh+var_2BC] offset aCannotCreateLo +
mov [esp+2BCh+var_2B4] eax +
mov eax [esp+2BCh+var_294] +
mov [esp+2BCh+var_2B8] eax +
call printf  +
jmp loc_45EFF9  +
xor edx edx +
jmp loc_45E5BE  +
mov eax ds:dword_484088 +
mov [esp+2BCh+var_2BC] eax +
call sub_406F20  +
mov esi eax +
jmp loc_45FBB0  +
mov [esp+2BCh+var_2BC] esi +
call sub_406F60  +
mov ecx [esp+2BCh+var_264] +
mov dword ptr [esp+2BCh+var_2B0] ecx +
mov [esp+2BCh+var_2B4] eax +
mov eax [esp+2BCh+var_260] +
mov [esp+2BCh+var_2B8] eax +
mov eax ds:dword_48407C +
mov [esp+2BCh+var_2BC] eax +
call sub_406390  +
test eax eax +
jnz loc_460164  +
mov [esp+2BCh+var_2BC] esi +
call sub_406F40  +
mov esi eax +
test esi esi +
jnz loc_45FB75  +
cmp byte ptr [esp+2BCh+var_26C] 0 +
jz loc_45EFA4  +
cmp ds:dword_4866A8 1 +
mov [esp+2BCh+var_254] 0FFh +
mov [esp+2BCh+var_253] 0FFh +
mov byte ptr [esp+2BCh+var_252] 0FFh +
mov byte ptr [esp+2BCh+var_252+1] 0FFh +
mov byte ptr [esp+2BCh+var_24C] 79h +
jg loc_45FBF5  +
mov [esp+2BCh+var_2B8] offset asc_462093 +
mov [esp+2BCh+var_2BC] 0 +
call sub_401740  +
lea eax [esp+2BCh+var_258+3] +
mov dword ptr [esp+2BCh+var_2B0+4] eax +
lea eax [esp+2BCh+var_258+2] +
mov dword ptr [esp+2BCh+var_2B0] eax +
lea eax [esp+65h] +
mov [esp+2BCh+var_2B4] eax +
lea eax [esp+2BCh+var_258] +
mov [esp+2BCh+var_2B8] eax +
lea edi [esp+69h] +
mov [esp+2BCh+var_2BC] 0 +
lea esi [esp+68h] +
call sub_4094E0  +
mov eax [esp+2BCh+var_260] +
lea ecx [esp+2BCh+var_252+1] +
lea edx [esp+2BCh+var_252] +
mov dword ptr [esp+2BCh+var_2B0] ecx +
mov [esp+2BCh+var_2B4] edx +
mov [esp+2BCh+var_2A8] eax +
mov eax ds:dword_48407C +
mov [esp+2BCh+var_2B8] edi +
mov [esp+2BCh+var_2BC] esi +
mov [esp+2BCh+var_264] ecx +
mov dword ptr [esp+2BCh+var_2B0+4] eax +
mov dword ptr [esp+2BCh+var_26C] edx +
call sub_408DC0  +
mov edx dword ptr [esp+2BCh+var_26C] +
mov ecx [esp+2BCh+var_264] +
test eax eax +
jz loc_45FC97  +
mov eax [esp+2BCh+var_260] +
mov dword ptr [esp+2BCh+var_2B0] ecx +
mov [esp+2BCh+var_2B4] edx +
mov [esp+2BCh+var_2B8] edi +
mov [esp+2BCh+var_2A8] eax +
mov eax ds:dword_48407C +
mov [esp+2BCh+var_2BC] esi +
mov dword ptr [esp+2BCh+var_2B0+4] eax +
call sub_408DC0  +
test eax eax +
jnz loc_45FDEE  +
mov eax [esp+2BCh+var_260] +
mov [esp+2BCh+var_2B8] offset aFuse_2 +
mov [esp+2BCh+var_2BC] eax +
call sub_407980  +
movzx edx byte ptr [esp+2BCh+var_258+3] +
mov [esp+2BCh+var_2B4] edx +
movzx edx byte ptr [esp+2BCh+var_252+1] +
mov [esp+2BCh+var_2BC] eax +
mov [esp+2BCh+var_2B8] edx +
call sub_404C60  +
test eax eax +
jnz loc_46007B  +
xor esi esi +
mov eax [esp+2BCh+var_260] +
mov [esp+2BCh+var_2B8] offset aLfuse_2 +
mov [esp+2BCh+var_2BC] eax +
call sub_407980  +
movzx edx byte ptr [esp+2BCh+var_258] +
mov [esp+2BCh+var_2B4] edx +
movzx edx [esp+2BCh+var_254] +
mov [esp+2BCh+var_2BC] eax +
mov [esp+2BCh+var_2B8] edx +
call sub_404C60  +
test eax eax +
jnz loc_45FFC8  +
mov eax [esp+2BCh+var_260] +
mov [esp+2BCh+var_2B8] offset aHfuse_2 +
mov [esp+2BCh+var_2BC] eax +
call sub_407980  +
movzx edx byte ptr [esp+2BCh+var_258+1] +
mov [esp+2BCh+var_2B4] edx +
movzx edx [esp+2BCh+var_253] +
mov [esp+2BCh+var_2BC] eax +
mov [esp+2BCh+var_2B8] edx +
call sub_404C60  +
test eax eax +
jnz loc_45FEE1  +
mov eax [esp+2BCh+var_260] +
mov [esp+2BCh+var_2B8] offset aEfuse_2 +
mov [esp+2BCh+var_2BC] eax +
call sub_407980  +
movzx edx byte ptr [esp+2BCh+var_258+2] +
mov [esp+2BCh+var_2B4] edx +
movzx edx byte ptr [esp+2BCh+var_252] +
mov [esp+2BCh+var_2BC] eax +
mov [esp+2BCh+var_2B8] edx +
call sub_404C60  +
test eax eax +
jnz loc_45FE2E  +
cmp ds:dword_4866A8 1 +
jg loc_45EFA4  +
mov eax ds:dword_486584 +
mov [esp+2BCh+var_2B8] offset aSSafemode +
mov [esp+2BCh+var_2BC] 0 +
mov [esp+2BCh+var_2B4] eax +
call sub_401740  +
mov eax esi +
test al al +
jnz loc_45FE15  +
movzx eax byte ptr [esp+2BCh+var_258] +
mov [esp+2BCh+var_2B8] offset aFusesOkE02xH02 +
mov [esp+2BCh+var_2BC] 0 +
mov dword ptr [esp+2BCh+var_2B0+4] eax +
movzx eax byte ptr [esp+2BCh+var_258+1] +
mov dword ptr [esp+2BCh+var_2B0] eax +
movzx eax byte ptr [esp+2BCh+var_258+2] +
mov [esp+2BCh+var_2B4] eax +
call sub_401740  +
jmp loc_45EFA4  +
mov [esp+2BCh+var_2B8] offset aNone +
mov [esp+2BCh+var_2BC] 1 +
call sub_401740  +
jmp loc_45EEE2  +
mov eax ds:dword_486584 +
mov ebx 1 +
mov [esp+2BCh+var_2B8] offset aSSafemodeSorry +
mov [esp+2BCh+var_2BC] 0 +
mov [esp+2BCh+var_2B4] eax +
call sub_401740  +
jmp loc_45EFA4  +
mov [esp+2BCh+var_2B8] offset aFusesNotRecove +
mov [esp+2BCh+var_2BC] 0 +
call sub_401740  +
jmp loc_45EFA4  +
movzx eax byte ptr [esp+2BCh+var_252] +
mov [esp+2BCh+var_2B8] offset aSSafemodeEfu_0 +
mov [esp+2BCh+var_2BC] 0 +
mov dword ptr [esp+2BCh+var_2B0+4] eax +
movzx eax byte ptr [esp+2BCh+var_258+2] +
mov dword ptr [esp+2BCh+var_2B0] eax +
mov eax ds:dword_486584 +
mov [esp+2BCh+var_2B4] eax +
call sub_401740  +
lea eax [esp+2BCh+var_24C] +
cmp [esp+2BCh+var_280] 0 +
jnz loc_45FE74  +
mov [esp+2BCh+var_2BC] offset aWouldYouLikeTh +
call sub_403000  +
movsx eax byte ptr [eax] +
mov [esp+2BCh+var_2BC] eax +
call ds:tolower  +
cmp eax 79h +
jnz loc_45FD71  +
mov eax [esp+2BCh+var_260] +
mov dword ptr [esp+2BCh+var_2B0+4] 0Ah +
mov [esp+2BCh+var_2B8] offset aEfuse_2 +
mov dword ptr [esp+2BCh+var_2B0] eax +
mov eax ds:dword_48407C +
mov [esp+2BCh+var_2B4] eax +
movzx eax byte ptr [esp+2BCh+var_258+2] +
mov [esp+2BCh+var_2BC] eax +
call sub_408C90  +
test eax eax +
mov eax ds:dword_486584 +
mov [esp+2BCh+var_2B4] eax +
jnz loc_45FF90  +
mov [esp+2BCh+var_2B8] offset aSSafemodeAndIs +
mov [esp+2BCh+var_2BC] 0 +
call sub_401740  +
jmp loc_45FD71  +
movzx eax [esp+2BCh+var_253] +
mov [esp+2BCh+var_2B8] offset aSSafemodeHfu_0 +
mov [esp+2BCh+var_2BC] 0 +
mov dword ptr [esp+2BCh+var_2B0+4] eax +
movzx eax byte ptr [esp+2BCh+var_258+1] +
mov dword ptr [esp+2BCh+var_2B0] eax +
mov eax ds:dword_486584 +
mov [esp+2BCh+var_2B4] eax +
call sub_401740  +
lea eax [esp+2BCh+var_24C] +
cmp [esp+2BCh+var_280] 0 +
jnz loc_45FF27  +
mov [esp+2BCh+var_2BC] offset aWouldYouLikeTh +
call sub_403000  +
movsx eax byte ptr [eax] +
mov [esp+2BCh+var_2BC] eax +
call ds:tolower  +
cmp eax 79h +
jnz loc_45FD3B  +
mov eax [esp+2BCh+var_260] +
mov dword ptr [esp+2BCh+var_2B0+4] 0Ah +
mov [esp+2BCh+var_2B8] offset aHfuse_2 +
mov dword ptr [esp+2BCh+var_2B0] eax +
mov eax ds:dword_48407C +
mov [esp+2BCh+var_2B4] eax +
movzx eax byte ptr [esp+2BCh+var_258+1] +
mov [esp+2BCh+var_2BC] eax +
call sub_408C90  +
test eax eax +
mov eax ds:dword_486584 +
mov [esp+2BCh+var_2B4] eax +
jnz loc_45FFAC  +
mov [esp+2BCh+var_2B8] offset aSSafemodeAndIs +
mov [esp+2BCh+var_2BC] 0 +
call sub_401740  +
jmp loc_45FD3B  +
mov [esp+2BCh+var_2B8] offset aSAndCouldNotBe +
add esi 1 +
mov [esp+2BCh+var_2BC] 0 +
call sub_401740  +
jmp loc_45FD71  +
mov [esp+2BCh+var_2B8] offset aSAndCouldNotBe +
add esi 1 +
mov [esp+2BCh+var_2BC] 0 +
call sub_401740  +
jmp loc_45FD3B  +
movzx eax [esp+2BCh+var_254] +
mov [esp+2BCh+var_2B8] offset aSSafemodeLfu_0 +
mov [esp+2BCh+var_2BC] 0 +
mov dword ptr [esp+2BCh+var_2B0+4] eax +
movzx eax byte ptr [esp+2BCh+var_258] +
mov dword ptr [esp+2BCh+var_2B0] eax +
mov eax ds:dword_486584 +
mov [esp+2BCh+var_2B4] eax +
call sub_401740  +
lea eax [esp+2BCh+var_24C] +
cmp [esp+2BCh+var_280] 0 +
jnz loc_46000E  +
mov [esp+2BCh+var_2BC] offset aWouldYouLikeTh +
call sub_403000  +
movsx eax byte ptr [eax] +
mov [esp+2BCh+var_2BC] eax +
call ds:tolower  +
cmp eax 79h +
jnz loc_45FD05  +
mov eax [esp+2BCh+var_260] +
mov dword ptr [esp+2BCh+var_2B0+4] 0Ah +
mov [esp+2BCh+var_2B8] offset aLfuse_2 +
mov dword ptr [esp+2BCh+var_2B0] eax +
mov eax ds:dword_48407C +
mov [esp+2BCh+var_2B4] eax +
movzx eax byte ptr [esp+2BCh+var_258] +
mov [esp+2BCh+var_2BC] eax +
call sub_408C90  +
test eax eax +
mov eax ds:dword_486584 +
mov [esp+2BCh+var_2B4] eax +
jnz loc_46012A  +
mov [esp+2BCh+var_2B8] offset aSSafemodeAndIs +
mov [esp+2BCh+var_2BC] 0 +
call sub_401740  +
jmp loc_45FD05  +
movzx eax byte ptr [esp+2BCh+var_252+1] +
mov [esp+2BCh+var_2B8] offset aSSafemodeFuseC +
mov [esp+2BCh+var_2BC] 0 +
mov dword ptr [esp+2BCh+var_2B0+4] eax +
movzx eax byte ptr [esp+2BCh+var_258+3] +
mov dword ptr [esp+2BCh+var_2B0] eax +
mov eax ds:dword_486584 +
mov [esp+2BCh+var_2B4] eax +
call sub_401740  +
lea eax [esp+2BCh+var_24C] +
cmp [esp+2BCh+var_280] 0 +
jnz loc_4600C1  +
mov [esp+2BCh+var_2BC] offset aWouldYouLikeTh +
call sub_403000  +
movsx eax byte ptr [eax] +
mov [esp+2BCh+var_2BC] eax +
call ds:tolower  +
cmp eax 79h +
jnz loc_45FCCD  +
mov eax [esp+2BCh+var_260] +
mov dword ptr [esp+2BCh+var_2B0+4] 0Ah +
mov [esp+2BCh+var_2B8] offset aFuse_2 +
mov dword ptr [esp+2BCh+var_2B0] eax +
mov eax ds:dword_48407C +
mov [esp+2BCh+var_2B4] eax +
movzx eax byte ptr [esp+2BCh+var_258+3] +
mov [esp+2BCh+var_2BC] eax +
call sub_408C90  +
test eax eax +
mov eax ds:dword_486584 +
mov [esp+2BCh+var_2B4] eax +
jnz loc_460146  +
mov [esp+2BCh+var_2B8] offset aSSafemodeAndIs +
mov [esp+2BCh+var_2BC] 0 +
call sub_401740  +
jmp loc_45FCCD  +
mov [esp+2BCh+var_2B8] offset aSAndCouldNotBe +
add esi 1 +
mov [esp+2BCh+var_2BC] 0 +
call sub_401740  +
jmp loc_45FD05  +
mov [esp+2BCh+var_2B8] offset aSAndCouldNotBe +
mov esi 1 +
mov [esp+2BCh+var_2BC] 0 +
call sub_401740  +
jmp loc_45FCCF  +
mov ebx 1 +
jmp loc_45FBB4  +
mov eax [esp+2BCh+var_288] +
mov [esp+2BCh+var_2B8] offset aSAvrPartSNotFo +
mov [esp+2BCh+var_2BC] 0 +
mov dword ptr [esp+2BCh+var_2B0] eax +
mov eax ds:dword_486584 +
mov [esp+2BCh+var_2B4] eax +
call sub_401740  +
mov [esp+2BCh+var_2B8] offset aValidPartsAre +
mov [esp+2BCh+var_2BC] 0 +
call sub_401740  +
mov eax ds:_iob +
mov edx ds:dword_486D20 +
add eax 40h +
call sub_45E3D8  +
mov [esp+2BCh+var_2B8] offset asc_462093 +
mov [esp+2BCh+var_2BC] 0 +
call sub_401740  +
mov [esp+2BCh+var_2BC] 1 +
call exit  +
mov ebx eax +
jmp loc_45EFA4  +
mov eax ds:dword_486584 +
mov [esp+2BCh+var_2B8] offset aSErrorParsingE +
mov [esp+2BCh+var_2BC] 0 +
mov [esp+2BCh+var_2B4] eax +
call sub_401740  +
mov [esp+2BCh+var_2BC] 1 +
call exit  +
mov eax ds:dword_486584 +
mov [esp+2BCh+var_2B8] offset aSNoAvrPartHasB +
mov [esp+2BCh+var_2BC] 0 +
mov [esp+2BCh+var_2B4] eax +
call sub_401740  +
jmp loc_460193  +
mov eax ds:dword_486584 +
mov [esp+2BCh+var_2B8] offset aSNoPortHasBeen +
mov [esp+2BCh+var_2BC] 0 +
mov [esp+2BCh+var_2B4] eax +
call sub_401740  +
mov [esp+2BCh+var_2B4] offset byte_4865A0 +
mov [esp+2BCh+var_2B8] offset aSspecifyAPortU +
mov [esp+2BCh+var_2BC] 0 +
call sub_401740  +
mov [esp+2BCh+var_2BC] 1 +
call exit  +
mov eax ds:dword_486584 +
mov [esp+2BCh+var_2B8] offset aSFailedToIniti +
mov [esp+2BCh+var_2BC] 0 +
mov [esp+2BCh+var_2B4] eax +
call sub_401740  +
mov [esp+2BCh+var_2BC] 1 +
call exit  +
call sub_401A70  +
mov [esp+2BCh+var_2BC] 1 +
call exit  +
mov eax ds:dword_486584 +
mov [esp+2BCh+var_2B8] offset aSNoProgrammerH +
mov [esp+2BCh+var_2BC] 0 +
mov [esp+2BCh+var_2B4] eax +
call sub_401740  +
mov [esp+2BCh+var_2B4] offset byte_4865A0 +
mov [esp+2BCh+var_2B8] offset aSspecifyAProgr +
mov [esp+2BCh+var_2BC] 0 +
call sub_401740  +
mov [esp+2BCh+var_2BC] 1 +
call exit  +
mov [esp+2BCh+var_2B8] offset asc_462093 +
mov [esp+2BCh+var_2BC] 0 +
call sub_401740  +
mov [esp+2BCh+var_2B8] offset aValidProgramme +
mov [esp+2BCh+var_2BC] 0 +
call sub_401740  +
mov eax ds:_iob +
mov [esp+2BCh+var_2BC] offset sub_4015F0 +
mov [esp+2BCh+var_248] offset asc_462075 +
add eax 40h +
mov [esp+2BCh+var_24C] eax +
lea eax [esp+2BCh+var_24C] +
mov [esp+2BCh+var_2B8] eax +
call sub_4095A0  +
jmp loc_4601BA  +
mov [esp+2BCh+var_2B8] offset asc_462093 +
mov [esp+2BCh+var_2BC] 0 +
call sub_401740  +
mov [esp+2BCh+var_2B8] offset aValidProgram_0 +
mov [esp+2BCh+var_2BC] 0 +
call sub_401740  +
mov ebx ds:dword_4866C0 +
mov eax ds:_iob +
mov [esp+2BCh+var_248] offset asc_462075 +
mov [esp+2BCh+var_2BC] ebx +
add eax 40h +
mov [esp+2BCh+var_24C] eax +
call sub_408C70  +
lea eax [esp+2BCh+var_24C] +
mov [esp+2BCh+var_2B4] eax +
mov [esp+2BCh+var_2B8] offset loc_401630 +
mov [esp+2BCh+var_2BC] ebx +
call sub_408BC0  +
jmp loc_4601BA  +
mov [esp+2BCh+var_2B8] offset asc_462093 +
mov [esp+2BCh+var_2BC] 0 +
call sub_401740  +
jmp loc_460193  +
mov eax ds:dword_48A9C0 +
mov [esp+2BCh+var_2B8] offset aSErrorParsingU +
mov [esp+2BCh+var_2BC] 0 +
mov dword ptr [esp+2BCh+var_2B0] eax +
mov eax ds:dword_486584 +
mov [esp+2BCh+var_2B4] eax +
call sub_401740  +
mov [esp+2BCh+var_2BC] 1 +
call exit  +
mov eax ds:dword_486584 +
mov [esp+2BCh+var_2B8] offset aSCannotInitial +
mov [esp+2BCh+var_2BC] 0 +
mov [esp+2BCh+var_2B4] eax +
call sub_401740  +
mov [esp+2BCh+var_2BC] 1 +
call exit  +
mov eax ds:dword_486584 +
mov [esp+2BCh+var_2B8] offset aSCannotIniti_0 +
mov [esp+2BCh+var_2BC] 0 +
mov [esp+2BCh+var_2B4] eax +
call sub_401740  +
mov [esp+2BCh+var_2BC] 1 +
call exit  +
mov eax ds:dword_486584 +
mov dword ptr [esp+2BCh+var_2B0] ebx +
mov [esp+2BCh+var_2B8] offset aSErrorReadingA +
mov [esp+2BCh+var_2BC] 0 +
mov [esp+2BCh+var_2B4] eax +
call sub_401740  +
mov [esp+2BCh+var_2BC] 1 +
call exit  +
lea eax [esp+2BCh+var_214] +
mov dword ptr [esp+2BCh+var_2B0] eax +
mov eax ds:dword_486584 +
mov [esp+2BCh+var_2B8] offset aSErrorReadin_1 +
mov [esp+2BCh+var_2BC] 0 +
mov [esp+2BCh+var_2B4] eax +
call sub_401740  +
mov [esp+2BCh+var_2BC] 1 +
call exit  +
cmp ds:dword_4866A8 1 +
jg loc_45F854  +
mov [esp+2BCh+var_2B8] offset asc_462093 +
mov [esp+2BCh+var_2BC] 0 +
call sub_401740  +
jmp loc_45F854  +
mov eax ds:dword_486584 +
mov [esp+2BCh+var_2B8] offset aSCannotIniti_1 +
mov [esp+2BCh+var_2BC] 0 +
mov [esp+2BCh+var_2B4] eax +
call sub_401740  +
mov [esp+2BCh+var_2BC] 1 +
call exit  +
fld  [esp+2BCh+var_26C] +
fdivr  ds:flt_4638E0 +
fstp  [esp+2BCh+var_26C] +
jmp loc_45F2EE  +
fld  [esp+2BCh+var_26C] +
fdivr  ds:flt_4638E4 +
fstp  [esp+2BCh+var_26C] +
jmp loc_45F2EE  +
mov [esp+2BCh+var_2B8] offset asc_462093 +
mov [esp+2BCh+var_2BC] 0 +
call sub_401740  +
jmp loc_45F82A  +
mov ecx [esp+2BCh+var_260] +
movzx ecx byte ptr [ecx+77h] +
cmp [eax+1] cl +
jnz loc_45F86D  +
mov ecx [esp+2BCh+var_260] +
movzx ecx byte ptr [ecx+78h] +
cmp [eax+2] cl +
jnz loc_45F86D  +
jmp loc_45F4C7  +
mov eax ds:dword_486584 +
mov [esp+2BCh+var_2B8] offset aSCanTInitializ +
mov [esp+2BCh+var_2BC] 0 +
mov [esp+2BCh+var_2B4] eax +
call sub_401740  +
mov [esp+2BCh+var_2BC] 1 +
call exit  +
mov [esp+2BCh+var_2B8] offset asc_462093 +
mov [esp+2BCh+var_2BC] 0 +
call sub_401740  +
mov eax [esp+2BCh+var_278] +
mov [esp+2BCh+var_2B8] offset aSCanTFindProgr +
mov [esp+2BCh+var_2BC] 0 +
mov dword ptr [esp+2BCh+var_2B0] eax +
mov eax ds:dword_486584 +
mov [esp+2BCh+var_2B4] eax +
call sub_401740  +
mov [esp+2BCh+var_2B8] offset aValidProgram_1 +
jmp loc_460361  +
mov eax ds:dword_486584 +
mov dword ptr [esp+2BCh+var_2B0] esi +
mov [esp+2BCh+var_2B8] offset aSExpectedFamil +
mov [esp+2BCh+var_2BC] 0 +
mov [esp+2BCh+var_2B4] eax +
call sub_401740  +
cmp ds:dword_4866A4 0 +
jnz loc_45F293  +
jmp loc_45F8B7  +
lea eax [esp+2BCh+var_24C] +
mov dword ptr [esp+2BCh+var_2B0+4] eax +
mov eax ds:dword_486584 +
mov dword ptr [esp+2BCh+var_2B0] 7 +
mov [esp+2BCh+var_2B8] offset aSReceivedFamil +
mov [esp+2BCh+var_2BC] 0 +
mov [esp+2BCh+var_2B4] eax +
call sub_401740  +
jmp loc_45F26C  +
mov eax [esp+2BCh+var_260] +
test byte ptr [eax+84h] 80h +
jz loc_45F4F4  +
mov ebx offset aApplication +
jmp loc_45F4F9  +
mov eax ds:dword_486584 +
mov [esp+2BCh+var_2B8] offset aSErasingChip +
mov [esp+2BCh+var_2BC] 0 +
mov [esp+2BCh+var_2B4] eax +
call sub_401740  +
jmp loc_45F57E  +
mov eax ds:dword_486584 +
mov [esp+2BCh+var_2B8] offset aSConflictingEA +
mov [esp+2BCh+var_2BC] 0 +
mov [esp+2BCh+var_2B4] eax +
call sub_401740  +
jmp loc_45F59D  +
jnz loc_45F2FE  +
nop   +
lea esi [esi+0] +
jmp loc_45E9F4  +
cmp ds:dword_4866A8 1 +
mov [esp+2BCh+var_284] 1 +
jg loc_45F558  +
mov eax ds:dword_486584 +
mov dword ptr [esp+2BCh+var_2B0+4] offset byte_4865A0 +
mov dword ptr [esp+2BCh+var_2B0] ebx +
mov [esp+2BCh+var_2B8] offset aSNoteSMemoryHa +
mov [esp+2BCh+var_2B4] eax +
mov [esp+2BCh+var_2BC] 0 +
call sub_401740  +
jmp loc_45F558  +
mov eax ds:dword_486584 +
mov [esp+2BCh+var_2B8] offset aSErasingChip +
mov [esp+2BCh+var_2BC] 0 +
mov [esp+2BCh+var_2B4] eax +
call sub_401740  +
jmp loc_45F2B6  +
mov [esp+2BCh+var_2B8] offset aSSafemodeFus_0 +
mov [esp+2BCh+var_2BC] 1 +
call sub_401740  +
jmp loc_45F4DC  +
mov dword ptr [esp+2BCh+var_2B0+4] esi +
mov dword ptr [esp+2BCh+var_2B0] ebx +
mov [esp+2BCh+var_2B4] edi +
mov [esp+2BCh+var_2B8] edx +
mov [esp+2BCh+var_2BC] 1 +
call sub_4094E0  +
jmp loc_45F4DC  +
***
push esi  +
push ebx  +
sub esp 8 +
mov esi ds:dword_484194 +
mov eax ds:dword_48418C +
mov edi ds:dword_487148 +
mov ebp ds:dword_484184 +
mov [esp+8+var_4] esi +
mov esi ds:dword_484180 +
mov [esp+8+var_8] esi +
cmp edi [esp+8+var_4] +
jnb loc_4607E7  +
movzx edx byte ptr [edi] +
mov esi 1 +
test dl dl +
jz loc_460794  +
mov esi ds:dword_468AE0[edx*4] +
mov edx [esp+8+var_8] +
cmp ds:word_468EE0[eax+eax] 0 +
cmovnz edx edi +
cmovnz ebp eax +
mov [esp+8+var_8] edx +
movsx ecx ds:word_4682E0[eax+eax] +
mov ebx esi +
movzx edx bl +
add ecx edx +
movsx ebx ds:word_466B40[ecx+ecx] +
cmp ebx eax +
jz loc_4607DC  +
movsx eax ds:word_467BC0[eax+eax] +
cmp eax 37Dh +
jle loc_4607A9  +
mov esi ds:dword_468A00[edx*4] +
jmp loc_4607A9  +
movsx eax ds:word_467380[ecx+ecx] +
inc edi  +
jmp loc_46077B  +
mov edi [esp+8+var_8] +
mov ds:dword_484184 ebp +
mov ds:dword_484180 edi +
add esp 8 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
sub esp 18h +
call sub_401500  +
mov [esp+18h+var_18] offset sub_401550 +
call sub_457050  +
leave   +
retn   +
***
