retf 0  +
***
retn   +
***
retn 0  +
***
retf   +
***
add edi edi +
add bh bh +
add edi edi +
add al 0FFh +
add eax 7FF06FFh +
dec dword ptr [eax]  +
dec dword ptr [ecx]  +
dec dword ptr [edx]  +
dec dword ptr [ebx]  +
dec dword ptr [edi+edi*8]  +
or eax 0FFF0EFFh +
call dword ptr [eax]  +
call dword ptr [ecx]  +
call dword ptr [edx]  +
call dword ptr [ebx]  +
call dword ptr [edi+edi*8]  +
adc eax 17FF16FFh +
call fword ptr [eax]  +
call fword ptr [ecx]  +
call fword ptr [edx]  +
call fword ptr [ebx]  +
call fword ptr [edi+edi*8]  +
sbb eax 1FFF1EFFh +
jmp dword ptr [eax]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
jz loc_100FA02  +
push dword ptr [ebp+8]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_10] +
xor ebx ebx +
mov [ebp+lpMem] ebx +
cmp edi ebx +
jnz loc_100FA2F  +
mov eax 80070057h +
push eax  +
mov esi eax +
push 56h  +
jmp loc_100FAF8  +
lea eax [ebp+lpMem] +
push eax  +
push [ebp+arg_0]  +
call sub_1011735  +
mov esi eax +
cmp esi ebx +
jge loc_100FA49  +
push esi  +
push 5Ah  +
jmp loc_100FAF8  +
mov eax [ebp+arg_4] +
push ebx  +
push [ebp+lpMem]  +
mov dword_10496B4 eax +
mov eax [ebp+arg_8] +
push 14h  +
push Protseq  +
mov dword_10496B8 eax +
mov eax [ebp+arg_C] +
mov dword_10496B0 edi +
mov dword_10496BC eax +
call ds:RpcServerUseProtseqEpW  +
cmp eax ebx +
jz loc_100FA90  +
jle loc_100FA89  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
push esi  +
push 6Dh  +
jmp loc_100FAF8  +
push ebx  +
push ebx  +
push IfSpec  +
call ds:RpcServerRegisterIf  +
cmp eax ebx +
jz loc_100FAB5  +
jle loc_100FAAE  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
push esi  +
push 72h  +
jmp loc_100FAF8  +
push ebx  +
push ebx  +
push 0Ah  +
push ebx  +
call ds:RpcServerRegisterAuthInfoW  +
cmp eax ebx +
jz loc_100FAD7  +
jle loc_100FAD0  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
push esi  +
push 75h  +
jmp loc_100FAF8  +
push 1  +
push 14h  +
push 1  +
call ds:RpcServerListen  +
cmp eax ebx +
jz loc_100FB07  +
jle loc_100FAF3  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
push esi  +
push 7Ah  +
push offset aDW7rtmBaseNtse  +
push offset aRpccommspawnse  +
call sub_101167D  +
cmp [ebp+lpMem] ebx +
jz loc_100FB1D  +
push [ebp+lpMem]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push esi  +
xor esi esi +
push esi  +
call ds:RpcMgmtStopServerListening  +
cmp eax esi +
jz loc_100FB60  +
jle loc_100FB47  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
push esi  +
push 9Ah  +
push offset aDW7rtmBaseNtse  +
push offset aRpccommshutdow  +
call sub_101167D  +
jmp loc_100FB86  +
call ds:RpcMgmtWaitServerListen  +
cmp eax esi +
jz loc_100FB80  +
jle loc_100FB76  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
push esi  +
push 9Dh  +
jmp loc_100FB4F  +
call ds:RpcRevertToSelf  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
mov eax dword_1049010 +
xor eax ebp +
mov [ebp-4] eax +
or dword ptr [ebp-24h] 0FFFFFFFFh +
push ebx  +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
xor ebx ebx +
xor eax eax +
mov [ebp-14h] ebx +
lea edi [ebp-10h] +
stos   +
stos   +
stos   +
push esi  +
xor eax eax +
push offset aReceivedMountR  +
mov [ebp-30h] ebx +
lea edi [ebp-2Ch] +
push 10000h  +
stos   +
mov [ebp-18h] ebx +
mov [ebp-1Ch] ebx +
mov [ebp-28h] ebx +
mov [ebp-20h] ebx +
call sub_1011628  +
add esp 0Ch +
lea eax [ebp-14h] +
push eax  +
push esi  +
call ds:UuidFromStringW  +
cmp eax ebx +
jz loc_100FC17  +
jle loc_100FBFB  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
push esi  +
push 0D4h  +
push offset aDW7rtmBaseNtse  +
push offset aAddimage  +
call sub_101167D  +
jmp loc_100FD4D  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
call sub_1013363  +
mov esi eax +
cmp esi ebx +
jge loc_100FC32  +
push esi  +
push 0DBh  +
jmp loc_100FC03  +
***
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
call sub_10132AB  +
mov esi eax +
cmp esi ebx +
jge loc_100FC4D  +
push esi  +
push 0DEh  +
jmp loc_100FC03  +
***
lea eax [ebp-24h] +
push eax  +
push dword ptr [ebp-18h]  +
lea eax [ebp-30h] +
push offset aWimmountdata  +
push eax  +
call sub_1013022  +
mov esi eax +
cmp esi ebx +
jge loc_100FC70  +
push esi  +
push 0E9h  +
jmp loc_100FC03  +
***
lea eax [ebp-28h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
push dword ptr [ebp-24h]  +
call sub_1012E2E  +
mov esi eax +
cmp esi ebx +
jge loc_100FC91  +
push esi  +
push 0EEh  +
jmp loc_100FC03  +
***
push ebx  +
call ds:RpcImpersonateClient  +
cmp eax ebx +
jz loc_100FCB5  +
jle loc_100FCA8  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
push esi  +
push 0F6h  +
jmp loc_100FC03  +
***
lea eax [ebp-20h] +
push eax  +
push 1  +
push 1  +
push ebx  +
push ebx  +
push ebx  +
push dword ptr [ebp-28h]  +
push dword ptr [ebp-1Ch]  +
call sub_10121CC  +
mov esi eax +
cmp esi ebx +
jge loc_100FCDC  +
push esi  +
push 104h  +
jmp loc_100FC03  +
***
push dword ptr [ebp-20h]  +
push dword_10496B0  +
call sub_1012817  +
mov esi eax +
cmp esi ebx +
jge loc_100FCFB  +
push esi  +
push 10Ch  +
jmp loc_100FC03  +
***
push dword_10496B8  +
mov [ebp-20h] ebx +
call ds:SetEvent  +
test eax eax +
jnz loc_100FD38  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_100FD22  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
cmp esi ebx +
jnz loc_100FD2D  +
mov esi 80004005h +
push esi  +
push 117h  +
jmp loc_100FC03  +
***
push dword ptr [ebp-18h]  +
push offset aMountedImageAt  +
push 20000h  +
call sub_1011628  +
add esp 0Ch +
cmp [ebp-18h] ebx +
mov edi ds:HeapFree +
mov ebx ds:GetProcessHeap +
jz loc_100FD70  +
push dword ptr [ebp-18h]  +
push 0  +
call ebx  +
push eax  +
call edi  +
test eax eax +
jz loc_100FD70  +
and dword ptr [ebp-18h] 0 +
cmp dword ptr [ebp-1Ch] 0 +
jz loc_100FD88  +
push dword ptr [ebp-1Ch]  +
push 0  +
call ebx  +
push eax  +
call edi  +
test eax eax +
jz loc_100FD88  +
and dword ptr [ebp-1Ch] 0 +
cmp dword ptr [ebp-24h] 0FFFFFFFFh +
jz loc_100FD97  +
push dword ptr [ebp-24h]  +
call ds:CloseHandle  +
test esi esi +
jge loc_100FDA7  +
push dword_10496B4  +
call ds:SetEvent  +
push dword ptr [ebp-20h]  +
call sub_1011F16  +
mov ecx [ebp-4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010796  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_1049010 +
xor eax ebp +
mov [ebp-4] eax +
and dword ptr [ebp-14h] 0 +
mov ecx [ebp+0Ch] +
and dword ptr [ebp-18h] 0 +
push esi  +
mov esi [ebp+10h] +
push edi  +
xor eax eax +
lea edi [ebp-10h] +
stos   +
stos   +
stos   +
lea eax [ebp-14h] +
push eax  +
push ecx  +
call ds:UuidFromStringW  +
test eax eax +
jz loc_100FE25  +
jle loc_100FE0C  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
push edi  +
push 15Eh  +
push offset aDW7rtmBaseNtse  +
push offset aIsimagemounted  +
call sub_101167D  +
jmp loc_100FE50  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
push dword_10496B0  +
call sub_101287E  +
mov edi eax +
cmp edi 0C1420111h +
jnz loc_100FE49  +
mov byte ptr [esi] 0 +
xor edi edi +
jmp loc_100FE50  +
test edi edi +
setnl al  +
mov [esi] al +
mov ecx [ebp-4] +
mov eax edi +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1010796  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_1049010 +
xor eax ebp +
mov [ebp-4] eax +
and dword ptr [ebp-14h] 0 +
and dword ptr [ebp-18h] 0 +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
xor eax eax +
lea edi [ebp-10h] +
stos   +
push esi  +
stos   +
push offset aReceivedUnmoun  +
push 10000h  +
stos   +
call sub_1011628  +
add esp 0Ch +
lea eax [ebp-14h] +
push eax  +
push esi  +
call ds:UuidFromStringW  +
test eax eax +
jz loc_100FED5  +
jle loc_100FEBC  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
push esi  +
push 1A2h  +
push offset aDW7rtmBaseNtse  +
push offset aRemoveimage  +
call sub_101167D  +
jmp loc_100FF2A  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
push dword_10496B0  +
call sub_101287E  +
mov esi eax +
test esi esi +
jge loc_100FEF6  +
push esi  +
push 1A9h  +
jmp loc_100FEC4  +
***
push dword ptr [ebp-18h]  +
push dword_10496B0  +
call sub_1012A2B  +
mov esi eax +
test esi esi +
jge loc_100FF12  +
push esi  +
push 1ACh  +
jmp loc_100FEC4  +
***
mov eax [ebp-18h] +
push dword ptr [eax+8]  +
push offset aUnmountForImag  +
push 20000h  +
call sub_1011628  +
add esp 0Ch +
test esi esi +
jl loc_100FF50  +
push dword_10496B4  +
call ds:SetEvent  +
push 0FFFFFFFFh  +
push dword_10496BC  +
call ds:WaitForSingleObject  +
push dword ptr [ebp-18h]  +
call sub_1011F16  +
mov ecx [ebp-4] +
pop edi  +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_1010796  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+lpMem] 0 +
cmp dword ptr [ebp+arg_0] 0 +
push ebx  +
push esi  +
push edi  +
jz loc_101007F  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jz loc_101007F  +
mov edi offset unk_10496C4 +
push edi  +
call sub_10127C9  +
mov esi eax +
test esi esi +
jge loc_100FFA2  +
push esi  +
push 4Dh  +
jmp loc_1010087  +
push dword ptr [ebp+arg_0]  +
lea eax [ebp+lpMem] +
push offset aGlobalSinglein  +
push eax  +
mov dword_10496E8 1 +
mov hEvent ebx +
call sub_101160D  +
mov esi eax +
add esp 0Ch +
test esi esi +
jge loc_100FFD4  +
push esi  +
push 5Ah  +
jmp loc_1010087  +
push [ebp+lpMem]  +
push 0  +
push 0  +
call ds:CreateMutexW  +
mov hObject eax +
test eax eax +
jnz loc_101000E  +
call ds:GetLastError  +
test eax eax +
jle loc_100FFFE  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
test esi esi +
jnz loc_1010009  +
mov esi 80004005h +
push esi  +
push 5Fh  +
jmp loc_1010087  +
call ds:GetLastError  +
cmp eax 0B7h +
jnz loc_1010025  +
mov esi 0C1420126h +
push esi  +
push 63h  +
jmp loc_1010087  +
push offset hHandle  +
push dword ptr [ebp+arg_0]  +
push edi  +
push hEvent  +
call sub_1013DB5  +
mov esi eax +
test esi esi +
jge loc_1010044  +
push esi  +
push 6Eh  +
jmp loc_1010087  +
push edi  +
push hHandle  +
push [ebp+arg_8]  +
push ebx  +
push dword ptr [ebp+arg_0]  +
call sub_100FA0B  +
mov esi eax +
test esi esi +
jge loc_1010062  +
push esi  +
push 75h  +
jmp loc_1010087  +
push offset aWimservStarted  +
push 20000h  +
mov dword_10496F4 1 +
call sub_1011628  +
pop ecx  +
pop ecx  +
jmp loc_1010096  +
mov esi 80070057h +
push esi  +
push 45h  +
push offset aDW7rtmBaseNt_0  +
push offset aServicestart  +
call sub_101167D  +
cmp [ebp+lpMem] 0 +
jz loc_10100AE  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
cmp dword_10496F4 0 +
jz loc_10100CA  +
call sub_100FB2B  +
push hEvent  +
call ds:SetEvent  +
mov eax hHandle +
test eax eax +
jz loc_10100EB  +
push 2710h  +
push eax  +
call ds:WaitForSingleObject  +
mov eax hObject +
test eax eax +
jz loc_1010102  +
push eax  +
call ds:CloseHandle  +
and hObject 0 +
cmp dword_10496E8 0 +
jz loc_101011C  +
push offset unk_10496C4  +
call sub_1012A8A  +
and dword_10496E8 0 +
call sub_101483B  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
and [ebp+Msg.hwnd] 0 +
push edi  +
push 6  +
xor eax eax +
pop ecx  +
lea edi [ebp+Msg.message] +
stos   +
xor edi edi +
inc edi  +
push 0  +
push 0  +
push 0  +
lea eax [ebp+Msg] +
push eax  +
call ds:GetMessageW  +
test eax eax +
jz loc_1010183  +
movzx eax word ptr [ebp+Msg.message] +
dec eax  +
dec eax  +
jz loc_1010169  +
sub eax 0Eh +
jz loc_1010169  +
sub eax 6 +
jnz loc_101016B  +
xor edi edi +
lea eax [ebp+Msg] +
push eax  +
call ds:TranslateMessage  +
lea eax [ebp+Msg] +
push eax  +
call ds:DispatchMessageW  +
test edi edi +
jnz loc_1010143  +
push dword_10496F8  +
call ds:SetEvent  +
mov eax [ebp+Msg.wParam] +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
xor eax eax +
lea edi [ebp+var_1C] +
mov [ebp+Handles] ebx +
stos   +
mov eax dword ptr [ebp+StringUuid] +
mov [ebp+hObject] ebx +
mov [ebp+var_10] ebx +
mov [ebp+var_C] ebx +
mov [ebp+var_8] ebx +
mov [ebp+ThreadId] ebx +
mov [ebp+var_14] ebx +
cmp eax ebx +
jz loc_101041E  +
cmp [eax] bx +
jz loc_101041E  +
push eax  +
push offset aWimservServici  +
push 20000h  +
call sub_1011628  +
mov esi ds:CreateEventW +
add esp 0Ch +
push ebx  +
push ebx  +
push 1  +
push ebx  +
call esi  +
mov dword_10496F8 eax +
cmp eax ebx +
jnz loc_1010226  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1010213  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
cmp esi ebx +
jnz loc_101021E  +
mov esi 80004005h +
push esi  +
push 65h  +
jmp loc_1010426  +
push ebx  +
push ebx  +
push 1  +
push ebx  +
call esi  +
mov edi eax +
mov [ebp+var_10] edi +
cmp edi ebx +
jnz loc_101025D  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_101024A  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
cmp esi ebx +
jnz loc_1010255  +
mov esi 80004005h +
push esi  +
push 6Bh  +
jmp loc_1010426  +
lea eax [ebp+var_8] +
push eax  +
call sub_10117A7  +
mov esi eax +
cmp esi ebx +
jge loc_1010274  +
push esi  +
push 6Fh  +
jmp loc_1010426  +
lea eax [ebp+ThreadId] +
push eax  +
push ebx  +
push ebx  +
push offset StartAddress  +
push ebx  +
push ebx  +
call ds:CreateThread  +
mov [ebp+var_C] eax +
cmp eax ebx +
jnz loc_10102B5  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_10102A2  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
cmp esi ebx +
jnz loc_10102AD  +
mov esi 80004005h +
push esi  +
push 7Bh  +
jmp loc_1010426  +
lea eax [ebp+hObject] +
push eax  +
push dword ptr [ebp+StringUuid]  +
call sub_1011B02  +
mov esi eax +
cmp esi ebx +
jge loc_10102CF  +
push esi  +
push 7Fh  +
jmp loc_1010426  +
push edi  +
push dword_10496F8  +
push dword ptr [ebp+StringUuid]  +
call sub_100FF67  +
mov esi eax +
cmp esi ebx +
jge loc_10102EF  +
push esi  +
push 85h  +
jmp loc_1010426  +
push [ebp+hObject]  +
call ds:SetEvent  +
test eax eax +
jnz loc_1010326  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1010310  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
cmp esi ebx +
jnz loc_101031B  +
mov esi 80004005h +
push esi  +
push 8Fh  +
jmp loc_1010426  +
push [ebp+hObject]  +
call ds:CloseHandle  +
mov eax dword_10496F8 +
push 493E0h  +
mov [ebp+Handles] eax +
push ebx  +
lea eax [ebp+Handles] +
push eax  +
mov [ebp+var_1C] edi +
mov edi ds:WaitForMultipleObjects +
push 2  +
mov [ebp+hObject] ebx +
call edi  +
cmp eax 1 +
jz loc_101039F  +
cmp eax ebx +
jz loc_1010435  +
cmp eax 102h +
jnz loc_1010375  +
mov esi 800705B4h +
push esi  +
push 0B0h  +
jmp loc_1010426  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1010389  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
cmp esi ebx +
jnz loc_1010394  +
mov esi 80004005h +
push esi  +
push 0B4h  +
jmp loc_1010426  +
mov eax dword_10496F8 +
mov [ebp+Handles] eax +
mov eax [ebp+var_8] +
mov [ebp+var_1C] eax +
push 0FFFFFFFFh  +
push ebx  +
lea eax [ebp+Handles] +
push eax  +
push 2  +
call edi  +
cmp eax ebx +
jz loc_1010435  +
cmp eax 1 +
jnz loc_10103F7  +
lea eax [ebp+var_14] +
push eax  +
push dword ptr [ebp+StringUuid]  +
call sub_1014931  +
mov esi eax +
cmp esi ebx +
jl loc_10103EF  +
cmp [ebp+var_14] ebx +
jnz loc_10103AD  +
push dword ptr [ebp+StringUuid]  +
push offset aWimservForMoun  +
push 20000h  +
call sub_1011628  +
add esp 0Ch +
jmp loc_1010435  +
push esi  +
push 0CEh  +
jmp loc_1010426  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_101040B  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
cmp esi ebx +
jnz loc_1010416  +
mov esi 80004005h +
push esi  +
push 0DAh  +
jmp loc_1010426  +
mov esi 80070057h +
push esi  +
push 5Ah  +
push offset aDW7rtmBaseNt_1  +
push offset aWwinmain  +
call sub_101167D  +
call sub_10100BC  +
mov edi ds:CloseHandle +
cmp [ebp+var_C] ebx +
jz loc_101044A  +
push [ebp+var_C]  +
call edi  +
cmp [ebp+hObject] ebx +
jz loc_1010454  +
push [ebp+hObject]  +
call edi  +
cmp [ebp+var_8] ebx +
jz loc_101045E  +
push [ebp+var_8]  +
call edi  +
cmp [ebp+var_10] ebx +
jz loc_1010468  +
push [ebp+var_10]  +
call edi  +
push dword_10496F8  +
call edi  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_101049A  +
test eax eax +
jnz loc_101049F  +
mov ecx [esi] +
test ecx ecx +
jz loc_1010497  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_101048B  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_1049720 +
push offset dword_1049710  +
push dword_104971C  +
mov dword_1049710 eax +
push offset unk_1049700  +
push offset unk_1049704  +
push offset unk_10496FC  +
call ds:__wgetmainargs  +
add esp 14h +
mov dword_104970C eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+var_1C] ebx +
mov [ebp+ms_exc.disabled] ebx +
lea eax [ebp+StartupInfo] +
push eax  +
call ds:GetStartupInfoW  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [ebp+ms_exc.disabled] 1 +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp+var_20] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
cmp eax ebx +
jz loc_1010542  +
cmp eax esi +
jnz loc_1010535  +
xor esi esi +
inc esi  +
mov [ebp+var_20] esi +
jmp loc_1010545  +
push 3E8h  +
call ds:Sleep  +
jmp loc_101051C  +
xor esi esi +
inc esi  +
mov eax dword_104A180 +
cmp eax esi +
jnz loc_1010558  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_1010587  +
mov eax dword_104A180 +
test eax eax +
jnz loc_1010581  +
mov dword_104A180 esi +
push offset dword_10012B0  +
push offset dword_10012A4  +
call sub_101047E  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1010587  +
jmp loc_10106AB  +
mov dword_1049718 esi +
mov eax dword_104A180 +
cmp eax esi +
jnz loc_10105AB  +
push offset dword_10012A0  +
push offset dword_1001294  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_104A180 2 +
cmp [ebp+var_20] ebx +
jnz loc_10105B8  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_104A18C ebx +
jz loc_10105D9  +
push offset dword_104A18C  +
call sub_1010B89  +
pop ecx  +
test eax eax +
jz loc_10105D9  +
push ebx  +
push 2  +
push ebx  +
call dword_104A18C  +
mov eax ds:_wcmdln +
cmp [eax] ebx +
jz loc_10106AB  +
mov eax [eax] +
mov [ebp+var_24] eax +
movzx ecx word ptr [eax] +
cmp cx 20h +
ja $LN58  +
cmp cx bx +
jz loc_10105FE  +
cmp [ebp+var_1C] ebx +
jnz $LN58  +
movzx ecx word ptr [eax] +
cmp cx bx +
jz loc_1010613  +
cmp cx 20h +
ja loc_1010613  +
inc eax  +
inc eax  +
mov [ebp+var_24] eax +
jmp loc_10105FE  +
test byte ptr [ebp+StartupInfo.dwFlags] 1 +
jz loc_101061F  +
movzx ecx [ebp+StartupInfo.wShowWindow] +
jmp loc_1010622  +
push 0Ah  +
pop ecx  +
push ecx  +
push eax  +
push ebx  +
push 1000000h  +
call _wWinMain@16  +
mov dword_1049714 eax +
cmp dword_1049708 ebx +
jnz $LN59  +
push eax  +
call ds:exit  +
cmp cx 22h +
jnz loc_1010654  +
xor ecx ecx +
cmp [ebp+var_1C] ebx +
setz cl  +
mov [ebp+var_1C] ecx +
inc eax  +
inc eax  +
jmp loc_10105E8  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-28h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-28h] +
mov dword_1049714 eax +
xor ebx ebx +
cmp dword_1049708 ebx +
jnz $LN59  +
push eax  +
call ds:_exit  +
cmp dword_1049718 ebx +
jnz loc_1010696  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_1049714 +
jmp loc_10106B7  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_10106D4  +
xor eax eax +
jmp loc_1010721  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_10106D0  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_101070E  +
cmp ecx 20Bh +
jnz loc_10106D0  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_10106D0  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_101071C  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_10106D0  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 2  +
mov dword_1049708 eax +
call sub_1010DC8  +
push eax  +
call ds:__set_app_type  +
or dword_104A178 0FFFFFFFFh +
or dword_104A17C 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_1049728 +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_1049724 +
mov [eax] ecx +
call sub_1010CB4  +
cmp dword_1049028 0 +
jnz loc_101077A  +
push offset sub_1010CB4  +
call ds:__setusermatherr  +
pop ecx  +
call sub_1010C9C  +
xor eax eax +
retn   +
***
call sub_1010E07  +
jmp ___tmainCRTStartup  +
***
cmp ecx dword_1049010 +
jnz loc_10107A1  +
retn 0  +
jmp loc_1010E9D  +
***
push edi  +
mov ebp [ecx] +
push edi  +
mov ebp edx +
push ebx  +
push edx  +
push ecx  +
push [esp+8+arg_4]  +
call __local_unwind4  +
add esp 0Ch +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
mov esi [ebx+8] +
xor esi [eax] +
push edi  +
mov eax [esi] +
mov [ebp+var_1] 0 +
mov [ebp+var_C] 1 +
lea edi [ebx+10h] +
cmp eax 0FFFFFFFEh +
jz loc_1010946  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call [ebp+arg_4]  +
mov ecx [esi+0Ch] +
mov edx [esi+8] +
add ecx edi +
xor ecx [edx+edi] +
call [ebp+arg_4]  +
mov eax [ebp+arg_8] +
test byte ptr [eax+4] 66h +
jnz loc_1010A73  +
lea ecx [ebp+var_18] +
mov [ebx-4] ecx +
mov ebx [ebx+0Ch] +
mov [ebp+var_18] eax +
mov eax [ebp+arg_10] +
mov [ebp+var_14] eax +
cmp ebx 0FFFFFFFEh +
jz loc_10109D8  +
jmp loc_1010980  +
lea edx [ebx+ebx*2] +
mov ecx [esi+edx*4+14h] +
lea eax [esi+edx*4+10h] +
mov [ebp+var_10] eax +
mov eax [eax] +
mov [ebp+var_8] eax +
test ecx ecx +
jz loc_10109AB  +
mov edx edi +
call @_EH4_CallFilterFunc@8  +
mov [ebp+var_1] 1 +
test eax eax +
jl loc_10109E2  +
jg loc_10109EB  +
mov eax [ebp+var_8] +
mov ebx eax +
cmp eax 0FFFFFFFEh +
jnz loc_1010980  +
cmp [ebp+var_1] 0 +
jz loc_10109D8  +
mov eax [esi] +
cmp eax 0FFFFFFFEh +
jz loc_10109CA  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call [ebp+arg_4]  +
mov ecx [esi+0Ch] +
mov edx [esi+8] +
add ecx edi +
xor ecx [edx+edi] +
call [ebp+arg_4]  +
mov eax [ebp+var_C] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
mov [ebp+var_C] 0 +
jmp loc_10109B8  +
mov eax [ebp+arg_8] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_1010A1F  +
cmp dword_104A188 0 +
jz loc_1010A1F  +
push offset dword_104A188  +
call sub_1010B89  +
add esp 4 +
test eax eax +
jz loc_1010A1F  +
mov ecx [ebp+arg_8] +
push 1  +
push ecx  +
call dword_104A188  +
add esp 8 +
mov ecx [ebp+arg_C] +
call @_EH4_GlobalUnwind@4  +
mov eax [ebp+arg_C] +
cmp [eax+0Ch] ebx +
jz loc_1010A40  +
mov edx [ebp+arg_0] +
push edx  +
push edi  +
mov edx ebx +
mov ecx eax +
call @_EH4_LocalUnwind@16  +
mov eax [ebp+arg_C] +
mov ecx [ebp+var_8] +
mov [eax+0Ch] ecx +
mov eax [esi] +
cmp eax 0FFFFFFFEh +
jz loc_1010A58  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call [ebp+arg_4]  +
mov ecx [esi+0Ch] +
mov edx [esi+8] +
add ecx edi +
xor ecx [edx+edi] +
call [ebp+arg_4]  +
mov eax [ebp+var_10] +
mov ecx [eax+8] +
mov edx edi +
call @_EH4_TransferToHandler@8  +
mov edx 0FFFFFFFEh +
cmp [ebx+0Ch] edx +
jz loc_10109D8  +
mov ecx [ebp+arg_0] +
push ecx  +
push edi  +
mov ecx ebx +
call @_EH4_LocalUnwind@16  +
jmp loc_10109B8  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_1010AD4  +
cmp dword ptr [eax+10h] 3 +
jnz loc_1010AD4  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_1010ACE  +
cmp eax 19930521h +
jz loc_1010ACE  +
cmp eax 19930522h +
jz loc_1010ACE  +
cmp eax 1994000h +
jnz loc_1010AD4  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset dword_1010A94+3)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_1010B16  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_1010B12  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_1010B7D  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1010B75  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_1010B7F  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_1010B65  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_1010B00  +
pop ecx  +
test eax eax +
jz loc_1010BE6  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_1010B40  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1010BE6  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_1010BEF  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_1010796  +
push offset dword_1049010  +
call sub_1010910  +
add esp 18h +
pop ebp  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
pop ecx  +
retn   +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
call sub_1010CBC  +
neg eax  +
sbb eax eax +
neg eax  +
pop ecx  +
dec eax  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1010DBB  +
cmp ecx 0FFFFFFFFh +
jz loc_1010DBB  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_1010DB4  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_1010DB4  +
cmp edx 10000000h +
jnb loc_1010DB4  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_1010DB4  +
jmp loc_1010DAF  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_1010DFD  +
push eax  +
call sub_1010D62  +
test eax eax +
jz loc_1010DFD  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_1010DF2  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_1010DFD  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1049010 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_1010E39  +
test eax ebx +
jz loc_1010E39  +
not eax  +
mov dword_1049014 eax +
jmp loc_1010E94  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_1010E80  +
test dword_1049010 ebx +
jnz loc_1010E85  +
mov esi 0BB40E64Fh +
mov dword_1049010 esi +
not esi  +
mov dword_1049014 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_1049830 eax +
mov dword_104982C ecx +
mov dword_1049828 edx +
mov dword_1049824 ebx +
mov dword_1049820 esi +
mov dword_104981C edi +
mov word_1049848 ss +
mov word_104983C cs +
mov word_1049818 ds +
mov word_1049814 es +
mov word_1049810 fs +
mov word_104980C gs +
pushf   +
pop dword_1049840  +
mov eax [ebp+0] +
mov dword_1049834 eax +
mov eax [ebp+4] +
mov dword_1049838 eax +
lea eax [ebp+8] +
mov dword_1049844 eax +
mov eax [ebp-320h] +
mov dword_1049780 10001h +
mov eax dword_1049838 +
mov dword_104973C eax +
mov dword_1049730 0C0000409h +
mov dword_1049734 1 +
mov eax dword_1049010 +
mov [ebp-328h] eax +
mov eax dword_1049014 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
push esi  +
mov eax [esp+14h] +
or eax eax +
jnz loc_1010FC1  +
mov ecx [esp+10h] +
mov eax [esp+0Ch] +
xor edx edx +
div  ecx +
mov ebx eax +
mov eax [esp+8] +
div  ecx +
mov esi eax +
mov eax ebx +
mul  dword ptr [esp+10h] +
mov ecx eax +
mov eax esi +
mul  dword ptr [esp+10h] +
add edx ecx +
jmp loc_1011008  +
mov ecx eax +
mov ebx [esp+10h] +
mov edx [esp+0Ch] +
mov eax [esp+8] +
shr ecx 1 +
rcr ebx 1 +
shr edx 1 +
rcr eax 1 +
or ecx ecx +
jnz loc_1010FCF  +
div  ebx +
mov esi eax +
mul  dword ptr [esp+14h] +
mov ecx eax +
mov eax [esp+10h] +
mul  esi +
add edx ecx +
jb loc_1010FFD  +
cmp edx [esp+0Ch] +
ja loc_1010FFD  +
jb loc_1011006  +
cmp eax [esp+8] +
jbe loc_1011006  +
dec esi  +
sub eax [esp+10h] +
sbb edx [esp+14h] +
xor ebx ebx +
sub eax [esp+8] +
sbb edx [esp+0Ch] +
neg edx  +
neg eax  +
sbb edx 0 +
mov ecx edx +
mov edx ebx +
mov ebx ecx +
mov ecx eax +
mov eax esi +
pop esi  +
retn 10h  +
***
mov ebx offset unk_1049030 +
retn   +
***
mov eax [esp+arg_4] +
mov ecx [esp+arg_C] +
or ecx eax +
mov ecx [esp+arg_8] +
jnz loc_10110C9  +
mov eax [esp+arg_0] +
mul  ecx +
retn 10h  +
push ebx  +
mul  ecx +
mov ebx eax +
mov eax [esp+4+arg_0] +
mul  [esp+4+arg_C] +
add ebx eax +
mov eax [esp+4+arg_0] +
mul  ecx +
add edx ebx +
pop ebx  +
retn 10h  +
***
jmp ds:NdrServerCall2  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
ja loc_101111F  +
mov eax [ebp+arg_0] +
jb loc_1011116  +
cmp eax 0FFFFFFFFh +
ja loc_101111F  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_101112A  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_1011168  +
cmp [ebp+arg_4] eax +
jz loc_1011164  +
movzx edx word ptr [ebx] +
test dx dx +
jz loc_1011164  +
mov [ecx] dx +
inc ecx  +
inc ecx  +
inc ebx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_1011147  +
test esi esi +
jnz loc_1011170  +
dec ecx  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
xor edx edx +
mov [ecx] dx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_101117E  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jz loc_1011296  +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1011296  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10111AB  +
sub eax edx +
sar eax 1 +
mov [ebp+var_4] eax +
mov eax edi +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_10111C1  +
sub eax ecx +
sar eax 1 +
cmp [ebp+arg_8] 0 +
push ebx  +
mov ebx eax +
push esi  +
mov [ebp+var_8] ebx +
jz loc_10111E8  +
xor eax eax +
cmp [ebp+var_4] ebx +
setz al  +
mov esi eax +
jmp loc_10111EE  +
cmp [ebp+var_4] ebx +
sbb esi esi +
inc esi  +
test esi esi +
jz loc_1011290  +
cmp [ebp+arg_C] 0 +
jz loc_101127B  +
push 3Fh  +
push edi  +
call ds:wcschr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_101127B  +
and [ebp+arg_4] 0 +
test ebx ebx +
jbe loc_1011290  +
mov ebx [ebp+arg_0] +
sub ebx edi +
mov eax [ebp+arg_4] +
cmp eax [ebp+var_4] +
jnb loc_1011290  +
test esi esi +
jz loc_1011290  +
movzx edx word ptr [edi] +
push 3Fh  +
pop eax  +
cmp ax dx +
jz loc_1011269  +
movzx eax word ptr [ebx+edi] +
cmp ax 61h +
jb loc_1011247  +
cmp ax 7Ah +
ja loc_1011247  +
movzx ecx ax +
sub ecx 20h +
jmp loc_101124A  +
movzx ecx ax +
cmp dx 61h +
jb loc_101125E  +
cmp dx 7Ah +
ja loc_101125E  +
movzx eax dx +
sub eax 20h +
jmp loc_1011261  +
movzx eax dx +
cmp ecx eax +
jz loc_1011269  +
xor esi esi +
jmp loc_101126C  +
xor esi esi +
inc esi  +
inc [ebp+arg_4]  +
mov eax [ebp+arg_4] +
inc edi  +
inc edi  +
cmp eax [ebp+var_8] +
jb loc_1011218  +
jmp loc_1011290  +
push ebx  +
push edi  +
push [ebp+arg_0]  +
call ds:_wcsnicmp  +
add esp 0Ch +
mov esi eax +
neg esi  +
sbb esi esi +
inc esi  +
mov eax esi +
pop esi  +
pop ebx  +
jmp loc_10112A5  +
mov eax large fs:18h +
mov dword ptr [eax+34h] 57h +
xor eax eax +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_1011307  +
cmp [ebp+arg_4] 0 +
jz loc_1011307  +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10112C7  +
mov ecx [ebp+arg_4] +
sub eax edx +
sar eax 1 +
lea edx [ecx+2] +
push esi  +
mov si [ecx] +
inc ecx  +
inc ecx  +
test si si +
jnz loc_10112DC  +
sub ecx edx +
sar ecx 1 +
pop esi  +
cmp ecx eax +
ja loc_1011314  +
push [ebp+arg_4]  +
sub eax ecx +
lea eax [edi+eax*2] +
push eax  +
call ds:_wcsicmp  +
neg eax  +
pop ecx  +
sbb eax eax +
pop ecx  +
inc eax  +
jmp loc_1011316  +
mov eax large fs:18h +
mov dword ptr [eax+34h] 57h +
xor eax eax +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
test edx edx +
jz loc_1011336  +
cmp edx 7FFFFFFFh +
jbe loc_101133B  +
mov eax 80070057h +
test eax eax +
jl loc_1011351  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_1011133  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
mov ecx 80070057h +
test edx edx +
jz loc_1011375  +
cmp edx 7FFFFFFFh +
jbe loc_1011377  +
mov eax ecx +
test eax eax +
jl loc_10113A0  +
cmp [ebp+arg_C] 7FFFFFFEh +
jbe loc_1011390  +
mov edx [ebp+arg_0] +
mov eax ecx +
xor ecx ecx +
mov [edx] cx +
jmp loc_10113A0  +
push [ebp+arg_C]  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 0  +
call sub_1011133  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
shr ecx 1 +
push 0  +
pop eax  +
jz loc_10113C0  +
cmp ecx 7FFFFFFFh +
jbe loc_10113C5  +
mov eax 80070057h +
test eax eax +
jl loc_1011401  +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_C]  +
mov edi [ebp+arg_0] +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_10113F1  +
cmp eax esi +
ja loc_10113F1  +
jnz loc_10113FC  +
jmp loc_10113F6  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jnz loc_1011426  +
mov eax large fs:18h +
mov dword ptr [eax+34h] 57h +
xor eax eax +
jmp loc_1011495  +
mov eax [ebp+arg_0] +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_101142C  +
sub eax ecx +
push esi  +
sar eax 1 +
lea esi [eax+1] +
mov eax large fs:18h +
mov eax [eax+30h] +
push edi  +
lea ecx [esi+esi] +
push ecx  +
push 8  +
push dword ptr [eax+18h]  +
call ds:RtlAllocateHeap  +
mov edi eax +
test edi edi +
jz loc_1011491  +
push [ebp+arg_0]  +
push esi  +
push edi  +
call sub_1011320  +
mov esi eax +
test esi esi +
jge loc_1011491  +
mov eax large fs:18h +
mov eax [eax+30h] +
push edi  +
push 0  +
push dword ptr [eax+18h]  +
call ds:RtlFreeHeap  +
mov ecx large fs:18h +
movzx eax si +
xor edi edi +
mov [ecx+34h] eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
push ebx  +
push edi  +
mov [ebp+var_4] 8007000Eh +
test eax eax +
jz loc_101151D  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10114B7  +
mov ebx [ebp+arg_C] +
sub eax edx +
sar eax 1 +
test ebx ebx +
jz loc_101151D  +
mov ecx [ebp+arg_8] +
mov edi [ebp+arg_4] +
cmp ecx edi +
jb loc_101151D  +
cmp edi eax +
ja loc_101151D  +
cmp ecx eax +
ja loc_101151D  +
mov eax large fs:18h +
mov eax [eax+30h] +
sub ecx edi +
push esi  +
inc ecx  +
mov esi ecx +
lea ecx [esi+esi] +
push ecx  +
push 8  +
push dword ptr [eax+18h]  +
call ds:RtlAllocateHeap  +
mov [ebx] eax +
test eax eax +
jz loc_1011517  +
lea ecx [esi-1] +
push ecx  +
mov ecx [ebp+arg_0] +
lea ecx [ecx+edi*2] +
push ecx  +
push esi  +
push eax  +
call sub_101135A  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
pop esi  +
jmp loc_1011522  +
mov eax 80070057h +
pop edi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101118A  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
and [ebp+var_4] 0 +
test eax eax +
jz loc_10115FF  +
cmp [ebp+arg_4] 0 +
jz loc_10115FF  +
and dword ptr [eax] 0 +
push edi  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call ds:_vscwprintf  +
pop ecx  +
pop ecx  +
test eax eax +
jge loc_1011586  +
mov edi 80004005h +
jmp loc_10115FA  +
lea ecx [ebp+var_4] +
push ecx  +
push 2  +
pop ecx  +
inc eax  +
mul  ecx +
push edx  +
push eax  +
call sub_1011101  +
mov edi eax +
test edi edi +
jl loc_10115FA  +
mov eax large fs:18h +
mov eax [eax+30h] +
push esi  +
push [ebp+var_4]  +
push 8  +
push dword ptr [eax+18h]  +
call ds:RtlAllocateHeap  +
mov esi eax +
test esi esi +
jnz loc_10115C0  +
mov edi 8007000Eh +
test edi edi +
jl loc_10115E0  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+var_4]  +
push esi  +
call sub_10113A9  +
mov edi eax +
test edi edi +
jl loc_10115E0  +
mov eax [ebp+arg_0] +
mov [eax] esi +
jmp loc_10115F9  +
test esi esi +
jz loc_10115F9  +
mov eax large fs:18h +
mov eax [eax+30h] +
push esi  +
push 0  +
push dword ptr [eax+18h]  +
call ds:RtlFreeHeap  +
pop esi  +
mov eax edi +
pop edi  +
jmp locret_1011604  +
mov eax 80070057h +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101154A  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
lea eax [ebp+lpMem] +
xor esi esi +
push eax  +
mov [ebp+lpMem] esi +
call sub_101154A  +
test eax eax +
jl loc_101165D  +
push esi  +
lea eax [ebp+lpMem] +
push eax  +
push 4144012Ch  +
push 9576h  +
push esi  +
call sub_1014D12  +
cmp [ebp+lpMem] esi +
jz loc_1011673  +
push [ebp+lpMem]  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
xor eax eax +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
push [ebp+arg_8]  +
lea eax [ebp+lpMem] +
push dword ptr [ebp+arg_0]  +
xor esi esi +
push offset aSD  +
push eax  +
mov [ebp+lpMem] esi +
call sub_101160D  +
mov edi eax +
add esp 10h +
cmp edi esi +
jl loc_10116B9  +
push esi  +
push [ebp+lpMem]  +
push [ebp+arg_C]  +
push 9577h  +
push esi  +
call sub_1014D12  +
cmp [ebp+lpMem] esi +
jz loc_10116CF  +
push [ebp+lpMem]  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
push esi  +
push [ebp+lpFileName]  +
call sub_101509B  +
test eax eax +
jnz loc_1011724  +
call ds:GetLastError  +
test eax eax +
jle loc_1011705  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
test esi esi +
jnz loc_1011710  +
mov esi 80004005h +
push esi  +
push 3Ah  +
push offset aDW7rtmBaseNt_2  +
push offset aUtilexpandpath  +
call sub_101167D  +
jmp loc_1011729  +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+lpMem] 0 +
push esi  +
push [ebp+arg_0]  +
lea eax [ebp+lpMem] +
push off_1049334  +
push offset aSS  +
push eax  +
call sub_101160D  +
mov esi eax +
add esp 10h +
test esi esi +
jge loc_1011777  +
push esi  +
push 0E3h  +
push offset aDW7rtmBaseNt_2  +
push offset aUtilbuildendpo  +
call sub_101167D  +
jmp loc_1011783  +
mov eax [ebp+lpMem] +
mov ecx [ebp+arg_4] +
and [ebp+lpMem] 0 +
mov [ecx] eax +
cmp [ebp+lpMem] 0 +
jz loc_101179B  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
mov eax dword_1049010 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
mov ecx [ebp+arg_0] +
xor eax eax +
mov byte ptr [ebp+pSecurityDescriptor] bl +
push esi  +
push edi  +
lea edi [ebp+pSecurityDescriptor+1] +
stos   +
stos   +
stos   +
stos   +
stos   +
stos   +
xor eax eax +
mov [ebp+EventAttributes.nLength] ebx +
lea edi [ebp+EventAttributes.lpSecurityDescriptor] +
stos   +
mov [ebp+var_2C] ecx +
mov [ebp+var_10] ebx +
mov [ebp+lpMem] ebx +
stos   +
mov [ebp+pIdentifierAuthority.Value] bl +
mov [ebp+pIdentifierAuthority.Value+1] bl +
mov [ebp+pIdentifierAuthority.Value+2] bl +
mov [ebp+pIdentifierAuthority.Value+3] bl +
mov [ebp+pIdentifierAuthority.Value+4] bl +
mov [ebp+pIdentifierAuthority.Value+5] 5 +
mov [ebp+pSid] ebx +
mov [ebp+var_18] ebx +
cmp ecx ebx +
jnz loc_1011813  +
mov eax 80070057h +
push eax  +
mov [ebp+var_10] eax +
push 164h  +
jmp loc_1011AA3  +
mov esi ds:AllocateAndInitializeSid +
lea eax [ebp+pSid] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 12h  +
push 1  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
mov [ecx] ebx +
call esi  +
test eax eax +
jnz loc_1011863  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1011848  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_10] eax +
cmp eax ebx +
jnz loc_1011856  +
mov [ebp+var_10] 80004005h +
push [ebp+var_10]  +
push 173h  +
jmp loc_1011AA3  +
lea eax [ebp+var_18] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 220h  +
push 20h  +
push 2  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
call esi  +
test eax eax +
jnz loc_10118AF  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1011894  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_10] eax +
cmp eax ebx +
jnz loc_10118A2  +
mov [ebp+var_10] 80004005h +
push [ebp+var_10]  +
push 17Fh  +
jmp loc_1011AA3  +
push [ebp+pSid]  +
mov edi ds:GetLengthSid +
call edi  +
push [ebp+var_18]  +
mov esi eax +
add esi 10h +
call edi  +
lea esi [esi+eax+8] +
push esi  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov edi eax +
mov [ebp+lpMem] edi +
cmp edi ebx +
jnz loc_1011910  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_10118F5  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_10] eax +
cmp eax ebx +
jnz loc_1011903  +
mov [ebp+var_10] 80004005h +
push [ebp+var_10]  +
push 18Fh  +
jmp loc_1011AA3  +
push 2  +
push esi  +
push edi  +
call ds:InitializeAcl  +
test eax eax +
jnz loc_101194D  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1011932  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_10] eax +
cmp eax ebx +
jnz loc_1011940  +
mov [ebp+var_10] 80004005h +
push [ebp+var_10]  +
push 194h  +
jmp loc_1011AA3  +
push [ebp+pSid]  +
mov esi 1F0003h +
push esi  +
push ebx  +
push 2  +
push edi  +
mov edi ds:AddAccessAllowedAceEx +
call edi  +
test eax eax +
jnz loc_1011995  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_101197A  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_10] eax +
cmp eax ebx +
jnz loc_1011988  +
mov [ebp+var_10] 80004005h +
push [ebp+var_10]  +
push 1A1h  +
jmp loc_1011AA3  +
push [ebp+var_18]  +
push esi  +
push ebx  +
push 2  +
push [ebp+lpMem]  +
call edi  +
test eax eax +
jnz loc_10119D4  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_10119B9  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_10] eax +
cmp eax ebx +
jnz loc_10119C7  +
mov [ebp+var_10] 80004005h +
push [ebp+var_10]  +
push 1AEh  +
jmp loc_1011AA3  +
push 1  +
lea eax [ebp+pSecurityDescriptor] +
push eax  +
call ds:InitializeSecurityDescriptor  +
test eax eax +
jnz loc_1011A13  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_10119F8  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_10] eax +
cmp eax ebx +
jnz loc_1011A06  +
mov [ebp+var_10] 80004005h +
push [ebp+var_10]  +
push 1B7h  +
jmp loc_1011AA3  +
push ebx  +
push [ebp+lpMem]  +
lea eax [ebp+pSecurityDescriptor] +
push 1  +
push eax  +
call ds:SetSecurityDescriptorDacl  +
test eax eax +
jnz loc_1011A53  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1011A3B  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_10] eax +
cmp eax ebx +
jnz loc_1011A49  +
mov [ebp+var_10] 80004005h +
push [ebp+var_10]  +
push 1BEh  +
jmp loc_1011AA3  +
push offset Name  +
lea eax [ebp+pSecurityDescriptor] +
push ebx  +
mov [ebp+EventAttributes.lpSecurityDescriptor] eax +
push 1  +
lea eax [ebp+EventAttributes] +
push eax  +
mov [ebp+EventAttributes.nLength] 0Ch +
mov [ebp+EventAttributes.bInheritHandle] ebx +
call ds:CreateEventW  +
cmp eax ebx +
jnz loc_1011AB4  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1011A8D  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_10] eax +
cmp eax ebx +
jnz loc_1011A9B  +
mov [ebp+var_10] 80004005h +
push [ebp+var_10]  +
push 1CCh  +
push offset aDW7rtmBaseNt_2  +
push offset aUtilgetcleanup  +
call sub_101167D  +
jmp loc_1011AB9  +
mov ecx [ebp+var_2C] +
mov [ecx] eax +
mov esi ds:FreeSid +
cmp [ebp+pSid] ebx +
jz loc_1011AC9  +
push [ebp+pSid]  +
call esi  +
cmp [ebp+var_18] ebx +
jz loc_1011AD3  +
push [ebp+var_18]  +
call esi  +
cmp [ebp+lpMem] ebx +
jz loc_1011AE9  +
push [ebp+lpMem]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_10] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010796  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
push dword ptr [ebp+arg_0]  +
lea eax [ebp+lpMem] +
push offset aLocalWimmount_  +
xor edi edi +
push eax  +
mov [ebp+lpMem] edi +
call sub_101160D  +
mov esi eax +
add esp 0Ch +
cmp esi edi +
jge loc_1011B31  +
push esi  +
push 211h  +
jmp loc_1011B67  +
push [ebp+lpMem]  +
push edi  +
push 1  +
push edi  +
call ds:CreateEventW  +
cmp eax edi +
jnz loc_1011B78  +
call ds:GetLastError  +
cmp eax edi +
jle loc_1011B56  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
cmp esi edi +
jnz loc_1011B61  +
mov esi 80004005h +
push esi  +
push 216h  +
push offset aDW7rtmBaseNt_2  +
push offset aUtilgetreadyev  +
call sub_101167D  +
jmp loc_1011B7D  +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
cmp [ebp+lpMem] edi +
jz loc_1011B93  +
push [ebp+lpMem]  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_4] +
add eax ecx +
cmp eax ecx +
jb loc_1011BBA  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_1011BC5  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
xor esi esi +
push edi  +
cmp eax esi +
jz loc_1011C58  +
cmp [eax+30h] esi +
jnz loc_1011C58  +
cmp [ebp+arg_C] esi +
jz loc_1011C58  +
cmp [ebp+arg_4] esi +
jz loc_1011C58  +
mov edi [ebp+arg_8] +
lea ebx [edi+8] +
push ebx  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
test esi esi +
jnz loc_1011C17  +
mov edi 8007000Eh +
push edi  +
push 15Fh  +
jmp loc_1011C63  +
push edi  +
push [ebp+arg_4]  +
lea eax [esi+8] +
push eax  +
call memcpy  +
mov eax [ebp+arg_0] +
add esp 0Ch +
push 0  +
push ebx  +
push esi  +
mov dword ptr [esi] 80000008h +
mov [esi+4] di +
push dword ptr [eax+24h]  +
call sub_1016DAB  +
mov edi eax +
mov eax [ebp+arg_C] +
test edi edi +
jge loc_1011C50  +
and dword ptr [eax] 0 +
xor edi edi +
jmp loc_1011C72  +
mov dword ptr [eax] 1 +
jmp loc_1011C72  +
mov edi 80070057h +
push edi  +
push 157h  +
push offset aDW7rtmBaseNt_3  +
push offset aImageisfileown  +
call sub_101167D  +
test esi esi +
jz loc_1011C86  +
push esi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
xor esi esi +
push edi  +
cmp eax esi +
jz loc_1011D18  +
cmp [eax+30h] esi +
jnz loc_1011D18  +
cmp [ebp+arg_4] esi +
jz loc_1011D18  +
cmp [ebp+arg_4] 0FFFFFFFFh +
jz loc_1011D18  +
mov edi [ebp+arg_C] +
lea ebx [edi+8] +
push ebx  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
test esi esi +
jnz loc_1011CDE  +
mov edi 8007000Eh +
push edi  +
push 1E3h  +
jmp loc_1011D23  +
push edi  +
push [ebp+arg_8]  +
lea eax [esi+8] +
push eax  +
call memcpy  +
mov eax [ebp+arg_0] +
add esp 0Ch +
push 0  +
push [ebp+arg_4]  +
mov dword ptr [esi] 80000008h +
push ebx  +
push esi  +
mov [esi+4] di +
push dword ptr [eax+24h]  +
call sub_1017976  +
mov edi eax +
test edi edi +
jge loc_1011D32  +
push edi  +
push 1EEh  +
jmp loc_1011D23  +
mov edi 80070057h +
push edi  +
push 1DBh  +
push offset aDW7rtmBaseNt_3  +
push offset aImageextractto  +
call sub_101167D  +
test esi esi +
jz loc_1011D46  +
push esi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
xor ebx ebx +
push esi  +
mov esi [ebp+arg_0] +
mov [ebp+var_8] ebx +
mov byte ptr [ebp+var_1] bl +
cmp esi ebx +
jz loc_1011E17  +
cmp [esi+30h] ebx +
jnz loc_1011E17  +
cmp [esi+38h] ebx +
jz loc_1011E0E  +
push edi  +
mov edi ds:RtlAdjustPrivilege +
lea eax [ebp+var_1] +
push eax  +
push ebx  +
push 1  +
push 1Dh  +
call edi  +
cmp eax ebx +
jge loc_1011DB7  +
or eax 10000000h +
push eax  +
push 217h  +
push offset aDW7rtmBaseNt_3  +
push offset aImagebeginimpe  +
mov [ebp+var_8] eax +
call sub_101167D  +
jmp loc_1011E0D  +
push dword ptr [esi+38h]  +
push ebx  +
call ds:SetThreadToken  +
test eax eax +
jnz loc_1011DFE  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1011DD9  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_8] eax +
cmp eax ebx +
jnz loc_1011DE7  +
mov [ebp+var_8] 80004005h +
push [ebp+var_8]  +
push 21Dh  +
push offset aDW7rtmBaseNt_3  +
push offset aImagebeginimpe  +
call sub_101167D  +
cmp byte ptr [ebp+var_1] bl +
jnz loc_1011E0D  +
lea eax [ebp+var_1] +
push eax  +
push ebx  +
push ebx  +
push 1Dh  +
call edi  +
pop edi  +
mov eax [ebp+var_8] +
pop esi  +
pop ebx  +
leave   +
retn 4  +
mov eax 80070057h +
push eax  +
push 207h  +
push offset aDW7rtmBaseNt_3  +
push offset aImagebeginimpe  +
mov [ebp+var_8] eax +
call sub_101167D  +
jmp loc_1011E0E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push edi  +
xor edi edi +
mov byte ptr [ebp+var_1] bl +
cmp eax ebx +
jz loc_1011EF3  +
cmp [eax+30h] ebx +
jnz loc_1011EF3  +
cmp [eax+38h] ebx +
jz loc_1011EEB  +
push esi  +
mov esi ds:RtlAdjustPrivilege +
lea eax [ebp-1] +
push eax  +
push ebx  +
push 1  +
push 1Dh  +
call esi  +
cmp eax ebx +
jge loc_1011E9B  +
or eax 10000000h +
mov edi eax +
push edi  +
push 24Dh  +
push offset aDW7rtmBaseNt_3  +
push offset aImageendimpers  +
call sub_101167D  +
jmp loc_1011EEA  +
push ebx  +
push ebx  +
call ds:SetThreadToken  +
test eax eax +
jnz loc_1011EDB  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1011EBB  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
cmp edi ebx +
jnz loc_1011EC6  +
mov edi 80004005h +
push edi  +
push 253h  +
push offset aDW7rtmBaseNt_3  +
push offset aImageendimpers  +
call sub_101167D  +
cmp byte ptr [ebp+var_1] bl +
jnz loc_1011EEA  +
lea eax [ebp+var_1] +
push eax  +
push ebx  +
push ebx  +
push 1Dh  +
call esi  +
pop esi  +
mov eax edi +
pop edi  +
pop ebx  +
leave   +
retn 4  +
mov eax 80070057h +
push eax  +
push 23Dh  +
push offset aDW7rtmBaseNt_3  +
push offset aImageendimpers  +
mov edi eax +
call sub_101167D  +
jmp loc_1011EEB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_1011FA9  +
mov eax [esi+8] +
push ebx  +
mov ebx ds:GetProcessHeap +
push edi  +
mov edi ds:HeapFree +
test eax eax +
jz loc_1011F4C  +
push eax  +
push 0  +
call ebx  +
push eax  +
call edi  +
test eax eax +
jz loc_1011F4C  +
and dword ptr [esi+8] 0 +
mov eax [esi+0Ch] +
test eax eax +
jz loc_1011F63  +
push eax  +
push 0  +
call ebx  +
push eax  +
call edi  +
test eax eax +
jz loc_1011F63  +
and dword ptr [esi+0Ch] 0 +
cmp dword ptr [esi+2Ch] 0 +
jz loc_1011F83  +
mov eax [esi+24h] +
test eax eax +
jz loc_1011F76  +
push eax  +
call sub_101ABFF  +
mov eax [esi+28h] +
test eax eax +
jz loc_1011F83  +
push eax  +
call sub_101ABFF  +
mov eax [esi+38h] +
test eax eax +
jz loc_1011F91  +
push eax  +
call ds:CloseHandle  +
mov eax [esi+34h] +
test eax eax +
jz loc_1011F9F  +
push eax  +
call ds:CloseHandle  +
push esi  +
push 0  +
call ebx  +
push eax  +
call edi  +
pop edi  +
pop ebx  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push edi  +
test eax eax +
jz loc_1011FD7  +
mov edi [ebp+arg_4] +
test edi edi +
jz loc_1011FD7  +
push esi  +
lea esi [eax+14h] +
movs   +
movs   +
movs   +
movs   +
pop esi  +
jmp loc_1011FF3  +
mov eax 80070057h +
push eax  +
push 3F0h  +
push offset aDW7rtmBaseNt_3  +
push offset aImagegetmountg  +
mov ebx eax +
call sub_101167D  +
pop edi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push edi  +
xor edi edi +
cmp eax edi +
jz loc_10120C8  +
mov edx [ebp+0Ch] +
cmp edx edi +
jz loc_10120C8  +
mov ecx [eax] +
push esi  +
mov esi ecx +
dec esi  +
jz loc_10120A1  +
dec esi  +
jz loc_1012099  +
dec esi  +
jz loc_1012091  +
dec esi  +
jz loc_1012083  +
push dword ptr [eax+4]  +
lea eax [ebp+8] +
push ecx  +
push offset aUnknownMarshal  +
push eax  +
mov [ebp+8] edi +
call sub_101160D  +
add esp 10h +
cmp [ebp+8] edi +
jz loc_10120C3  +
push 4E6h  +
push offset aUnmarshallcall  +
push 8000FFFFh  +
push dword ptr [ebp+8]  +
push offset aMarshallData  +
push edi  +
push 2  +
call sub_1015538  +
cmp [ebp+8] edi +
jz loc_10120C3  +
push dword ptr [ebp+8]  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
jmp loc_10120C3  +
lea ecx [eax+8] +
mov [edx+0Ch] ecx +
mov eax [eax+4] +
mov [edx+10h] eax +
jmp loc_10120C3  +
lea ecx [eax+8] +
mov [edx+8] ecx +
jmp loc_10120A6  +
lea ecx [eax+8] +
mov [edx+4] ecx +
jmp loc_10120A6  +
lea ecx [eax+8] +
mov [edx] ecx +
mov eax [eax+4] +
shr eax 1 +
xor edx edx +
cmp eax edi +
jle loc_10120BE  +
xor esi esi +
cmp si [ecx+edx*2] +
jz loc_10120C3  +
inc edx  +
cmp edx eax +
jl loc_10120B1  +
mov edi 0C1420132h +
mov eax edi +
pop esi  +
jmp loc_10120CD  +
mov eax 80070057h +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
cmp ecx eax +
jz loc_101213D  +
cmp [ebp+arg_4] eax +
jz loc_101213D  +
mov edx [ecx] +
cmp edx 24h +
jb loc_1012136  +
cmp edx 8 +
jb loc_1012136  +
push ebx  +
push esi  +
lea esi [ecx+2Bh] +
push edi  +
and esi 0FFFFFFF8h +
lea ebx [edx+ecx] +
cmp eax 1 +
jz loc_1012131  +
lea edi [esi+8] +
cmp edi ebx +
jnb loc_1012131  +
mov ecx [esi+4] +
add ecx edi +
cmp ecx ebx +
ja loc_1012131  +
cmp dword ptr [esi] 0 +
jz loc_1012131  +
push [ebp+arg_8]  +
push esi  +
call [ebp+arg_4]  +
mov ecx [esi+4] +
lea esi [ecx+edi+7] +
and esi 0FFFFFFF8h +
test eax eax +
jge loc_1012102  +
pop edi  +
pop esi  +
pop ebx  +
jmp loc_1012142  +
mov eax 0C1420132h +
jmp loc_1012142  +
mov eax 80070057h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+8] +
test edi edi +
jz loc_10121AB  +
cmp dword ptr [edi+30h] 0 +
jnz loc_10121AB  +
push edi  +
call sub_1011D54  +
mov esi eax +
test esi esi +
jge loc_1012173  +
push esi  +
push 1A1h  +
jmp loc_10121B6  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push edi  +
call sub_1011C94  +
mov esi eax +
test esi esi +
jge loc_101219D  +
push esi  +
push 1A9h  +
push offset aDW7rtmBaseNt_3  +
push offset aImageextract  +
call sub_101167D  +
push edi  +
call sub_1011E3B  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 10h  +
***
mov esi 80070057h +
push esi  +
push 19Dh  +
push offset aDW7rtmBaseNt_3  +
push offset aImageextract  +
call sub_101167D  +
jmp loc_10121A3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push ebx  +
push esi  +
push edi  +
xor esi esi +
xor eax eax +
mov [ebp+var_30] esi +
lea edi [ebp+lpFileName] +
stos   +
stos   +
stos   +
xor ebx ebx +
mov [ebp+var_14] esi +
mov [ebp+lpMem] esi +
mov [ebp+dwBytes] esi +
mov [ebp+var_C] 20000000h +
stos   +
cmp [ebp+arg_1C] esi +
jz loc_1012783  +
mov eax [ebp+arg_0] +
cmp eax esi +
jz loc_1012783  +
mov ecx [ebp+arg_4] +
cmp ecx 24h +
jb loc_1012773  +
cmp dword ptr [eax+4] 5D6h +
jnz loc_1012773  +
cmp [eax] ecx +
ja loc_1012773  +
push 40h  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov ebx eax +
cmp ebx esi +
jnz loc_1012264  +
mov eax 8007000Eh +
push eax  +
push 55Ch  +
mov edi eax +
push offset aDW7rtmBaseNt_3  +
push offset aImageunmarshal  +
call sub_101167D  +
jmp loc_10127B5  +
mov eax [ebp+arg_0] +
mov dword ptr [ebx+2Ch] 1 +
mov ecx [eax+20h] +
mov [ebx+3Ch] ecx +
mov ecx [ebp+nBufferLength] +
mov [ebx+30h] ecx +
mov ecx [eax+8] +
mov [ebx+10h] ecx +
lea esi [eax+10h] +
lea edi [ebx+14h] +
movs   +
movs   +
lea ecx [ebp+var_30] +
push ecx  +
movs   +
push offset loc_1012000  +
push eax  +
movs   +
call sub_10120D7  +
mov edi eax +
test edi edi +
jge loc_10122A7  +
push edi  +
push 56Ch  +
jmp loc_1012250  +
mov edx [ebp+var_28] +
mov eax [ebp+var_30] +
mov ecx [ebp+lpFileName] +
mov esi [ebp+var_24] +
mov [ebp+var_18] edx +
mov edx [ebp+var_20] +
mov [ebp+arg_4] eax +
mov [ebp+var_1C] ecx +
mov [ebp+var_10] edx +
test eax eax +
jz loc_1012763  +
test ecx ecx +
jz loc_1012763  +
cmp [ebp+var_28] 0 +
jz loc_1012763  +
push 0  +
push ecx  +
call sub_101509B  +
mov [ebx+8] eax +
test eax eax +
jnz loc_10122FB  +
mov eax 8007000Eh +
push eax  +
push 57Dh  +
jmp loc_101224E  +
cmp [ebp+arg_14] 0 +
jz loc_101234C  +
test esi esi +
jnz loc_1012315  +
mov edi 0C1420132h +
push edi  +
push 587h  +
jmp loc_1012250  +
push [ebp+var_10]  +
push esi  +
call sub_101486E  +
test eax eax +
jnz loc_101234C  +
call ds:GetLastError  +
test eax eax +
jle loc_1012336  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
test edi edi +
jnz loc_1012341  +
mov edi 80004005h +
push edi  +
push 58Dh  +
jmp loc_1012250  +
cmp [ebp+arg_18] 0 +
jz loc_1012370  +
push 0  +
push 2000001h  +
push 3  +
push 0  +
push 3  +
push 80000000h  +
push dword ptr [ebx+8]  +
call ds:CreateFileW  +
mov [ebx+34h] eax +
lea eax [ebx+34h] +
cmp dword ptr [eax] 0FFFFFFFFh +
jz loc_101237E  +
cmp [ebp+arg_18] 0 +
jnz loc_1012398  +
push eax  +
push dword ptr [ebx+8]  +
call sub_1012F60  +
mov edi eax +
test edi edi +
jge loc_1012398  +
push edi  +
push 5A8h  +
jmp loc_1012250  +
push [ebp+arg_4]  +
mov esi offset aImageunmarshal +
push esi  +
push offset aSReconstitutin  +
push 10000h  +
call sub_1011628  +
add esp 10h +
cmp [ebp+nBufferLength] 0 +
jnz loc_10123D6  +
cmp [ebp+arg_C] 0 +
jz loc_10123CF  +
mov eax [ebp+arg_0] +
cmp dword ptr [eax+20h] 0 +
mov [ebp+var_C] 0E0000000h +
jz loc_10123D6  +
mov [ebp+var_C] 0A0000000h +
push 0  +
push [ebp+arg_4]  +
call sub_101509B  +
mov [ebx+0Ch] eax +
test eax eax +
jnz loc_10123FF  +
mov eax 8007000Eh +
push eax  +
push 5BBh  +
push offset aDW7rtmBaseNt_3  +
mov edi eax +
push esi  +
jmp loc_101225A  +
lea eax [ebp+var_14] +
push eax  +
mov eax [ebp+arg_8] +
push 0  +
or eax 40h +
push eax  +
push 3  +
push [ebp+var_C]  +
push [ebp+arg_4]  +
call sub_101AECD  +
mov esi ds:GetLastError +
mov [ebx+28h] eax +
test eax eax +
jnz loc_101245B  +
call esi  +
cmp eax 3 +
jz loc_101243C  +
cmp eax 2 +
jz loc_101243C  +
cmp eax 35h +
jz loc_101243C  +
cmp eax 0Bh +
jnz loc_101243E  +
xor eax eax +
test eax eax +
jz loc_101245B  +
jle loc_101244E  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
push edi  +
push 5D5h  +
jmp loc_1012250  +
cmp [ebp+nBufferLength] 0 +
jnz loc_101275A  +
mov eax [ebx+28h] +
test eax eax +
jz loc_10125ED  +
push [ebp+var_18]  +
push eax  +
call sub_1019517  +
test eax eax +
jnz loc_10125AE  +
push eax  +
push eax  +
call ds:GetTempPathW  +
mov [ebp+nBufferLength] eax +
test eax eax +
jnz loc_10124B6  +
call esi  +
test eax eax +
jle loc_10124A0  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
test edi edi +
jnz loc_10124AB  +
mov edi 80004005h +
push edi  +
push 5E6h  +
jmp loc_1012250  +
lea eax [ebp+dwBytes] +
push eax  +
push 2  +
push [ebp+nBufferLength]  +
call sub_1011BA0  +
mov edi eax +
test edi edi +
jge loc_10124D5  +
push edi  +
push 5EAh  +
jmp loc_1012250  +
mov eax [ebp+dwBytes] +
push 2  +
pop ecx  +
mul  ecx +
lea ecx [ebp+dwBytes] +
push ecx  +
push edx  +
push eax  +
call sub_1011101  +
mov edi eax +
test edi edi +
jge loc_10124F9  +
push edi  +
push 5EDh  +
jmp loc_1012250  +
push [ebp+dwBytes]  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+lpMem] eax +
test eax eax +
jnz loc_1012524  +
mov eax 8007000Eh +
push eax  +
mov edi eax +
push 5F0h  +
jmp loc_101278E  +
lea eax [ebp+nBufferLength] +
push eax  +
push 1  +
push [ebp+nBufferLength]  +
call sub_1011BA0  +
mov edi eax +
test edi edi +
jge loc_1012543  +
push edi  +
push 5F3h  +
jmp loc_101278E  +
push [ebp+lpMem]  +
push [ebp+nBufferLength]  +
call ds:GetTempPathW  +
test eax eax +
jnz loc_1012579  +
call esi  +
test eax eax +
jle loc_1012563  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
test edi edi +
jnz loc_101256E  +
mov edi 80004005h +
push edi  +
push 5F8h  +
jmp loc_101278E  +
push [ebp+lpMem]  +
push dword ptr [ebx+28h]  +
call sub_1019517  +
test eax eax +
jnz loc_10125AE  +
call esi  +
test eax eax +
jle loc_1012598  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
test edi edi +
jnz loc_10125A3  +
mov edi 80004005h +
push edi  +
push 600h  +
jmp loc_101278E  +
mov eax [ebp+arg_0] +
push dword ptr [eax+8]  +
push dword ptr [ebx+28h]  +
call sub_1015F45  +
mov [ebx+24h] eax +
test eax eax +
jnz loc_1012656  +
call esi  +
test eax eax +
jle loc_10125D7  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
test edi edi +
jnz loc_10125E2  +
mov edi 80004005h +
push edi  +
push 607h  +
jmp loc_101278E  +
mov eax [ebp+arg_0] +
push 0  +
push dword ptr [eax+8]  +
push 0  +
call sub_101A142  +
mov [ebx+24h] eax +
test eax eax +
jnz loc_1012629  +
call esi  +
test eax eax +
jle loc_1012613  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
test edi edi +
jnz loc_101261E  +
mov edi 80004005h +
push edi  +
push 611h  +
jmp loc_1012250  +
mov esi [ebp+arg_0] +
push 0  +
add esi 0Ch +
push esi  +
push eax  +
mov dword ptr [ebx+3Ch] 1 +
call sub_101965B  +
or dword ptr [esi] 40000h +
push 0  +
push esi  +
push dword ptr [ebx+24h]  +
call sub_1019AE7  +
mov esi ds:GetLastError +
push [ebp+var_1C]  +
push dword ptr [ebx+24h]  +
call sub_10196CB  +
test eax eax +
jnz loc_101268B  +
call esi  +
test eax eax +
jle loc_1012675  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
test edi edi +
jnz loc_1012680  +
mov edi 80004005h +
push edi  +
push 626h  +
jmp loc_101278E  +
mov eax [ebp+arg_0] +
add eax 10h +
push eax  +
push dword ptr [ebx+24h]  +
call sub_1019A85  +
test eax eax +
jnz loc_10126C4  +
call esi  +
test eax eax +
jle loc_10126AE  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
test edi edi +
jnz loc_10126B9  +
mov edi 80004005h +
push edi  +
push 631h  +
jmp loc_101278E  +
mov eax [ebp+arg_0] +
push 0  +
add eax 0Ch +
push eax  +
push dword ptr [ebx+24h]  +
call sub_1019AE7  +
test eax eax +
jnz loc_10126FF  +
call esi  +
test eax eax +
jle loc_10126E9  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
test edi edi +
jnz loc_10126F4  +
mov edi 80004005h +
push edi  +
push 63Dh  +
jmp loc_101278E  +
cmp dword ptr [ebx+28h] 0 +
jz loc_101273C  +
push 1000008h  +
push dword ptr [ebx+8]  +
push dword ptr [ebx+24h]  +
call sub_10191DE  +
test eax eax +
jnz loc_101273C  +
call esi  +
test eax eax +
jle loc_1012729  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
test edi edi +
jnz loc_1012734  +
mov edi 80004005h +
push edi  +
push 64Ah  +
jmp loc_101278E  +
lea esi [ebx+38h] +
push esi  +
push 1  +
push 2000Ch  +
call ds:GetCurrentThread  +
push eax  +
call ds:OpenThreadToken  +
test eax eax +
jnz loc_101275A  +
and [esi] eax +
mov eax [ebp+arg_1C] +
mov [eax] ebx +
xor ebx ebx +
jmp loc_101279D  +
mov edi 0C1420132h +
push edi  +
push 575h  +
jmp loc_1012250  +
mov edi 0C1420132h +
push edi  +
push 558h  +
jmp loc_1012250  +
mov edi 80070057h +
push edi  +
push 551h  +
push offset aDW7rtmBaseNt_3  +
push offset aImageunmarshal  +
call sub_101167D  +
cmp [ebp+lpMem] 0 +
jz loc_10127B5  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
push ebx  +
call sub_1011F16  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
test esi esi +
jnz loc_10127F4  +
mov eax 80070057h +
push eax  +
push 70h  +
push offset aDW7rtmBaseNt_4  +
push offset aMgrinitialize  +
mov edi eax +
call sub_101167D  +
jmp loc_101280A  +
lea eax [esi+8] +
push eax  +
call ds:InitializeCriticalSection  +
mov [esi+4] esi +
mov [esi] esi +
mov dword ptr [esi+20h] 1 +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_101285A  +
mov esi [ebp+arg_4] +
test esi esi +
jz loc_101285A  +
push ebx  +
lea ebx [edi+8] +
push ebx  +
call ds:EnterCriticalSection  +
mov eax [edi+4] +
mov [esi] edi +
mov [esi+4] eax +
mov [eax] esi +
push ebx  +
mov [edi+4] esi +
call ds:LeaveCriticalSection  +
pop ebx  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 8  +
mov eax 80070057h +
push eax  +
push 9Ch  +
push offset aDW7rtmBaseNt_4  +
push offset aMgrinsertmount  +
mov [ebp+var_4] eax +
call sub_101167D  +
jmp loc_1012851  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
mov eax dword_1049010 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_14] 0 +
mov ecx [ebp+arg_8] +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
xor eax eax +
lea edi [ebp+var_10] +
stos   +
stos   +
mov [ebp+var_20] ecx +
stos   +
test ebx ebx +
jz loc_101294E  +
test ecx ecx +
jz loc_101294E  +
lea eax [ebx+8] +
push esi  +
push eax  +
mov [ebp+lpCriticalSection] eax +
call ds:EnterCriticalSection  +
mov eax ebx +
cmp ebx [ebx] +
jz loc_101293E  +
jmp loc_10128D0  +
mov eax [ebp+var_1C] +
mov eax [eax+4] +
lea ecx [ebp+var_14] +
push ecx  +
push eax  +
mov [ebp+var_1C] eax +
call sub_1011FB5  +
mov [ebp+var_18] eax +
test eax eax +
jl loc_1012908  +
mov edi [ebp+arg_4] +
push 10h  +
pop ecx  +
lea esi [ebp+var_14] +
xor eax eax +
cmps   +
jz loc_10128FB  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
mov eax [ebp+var_1C] +
jz loc_101293A  +
cmp eax [ebx] +
jnz loc_10128CD  +
jmp loc_101293E  +
push eax  +
push 0FBh  +
push offset aDW7rtmBaseNt_4  +
push offset aMgrfindimage  +
call sub_101167D  +
push [ebp+lpCriticalSection]  +
call ds:LeaveCriticalSection  +
pop esi  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_18] +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_1010796  +
leave   +
retn 0Ch  +
test eax eax +
jnz loc_1012947  +
mov [ebp+var_18] 0C1420111h +
jmp loc_101291D  +
mov ecx [ebp+var_20] +
mov [ecx] eax +
jmp loc_101291D  +
mov eax 80070057h +
push eax  +
push 0E2h  +
push offset aDW7rtmBaseNt_4  +
push offset aMgrfindimage  +
mov [ebp+var_18] eax +
call sub_101167D  +
jmp loc_1012927  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
xor ebx ebx +
push edi  +
mov edi [ebp+8] +
mov [ebp-8] ebx +
mov [ebp-4] ebx +
cmp edi ebx +
jz loc_1012A08  +
cmp [ebp+14h] ebx +
jz loc_1012A08  +
lea eax [edi+8] +
push esi  +
push eax  +
mov [ebp+8] eax +
call ds:EnterCriticalSection  +
mov esi edi +
cmp edi [edi] +
jz loc_10129F2  +
mov esi [esi+4] +
lea eax [ebp-4] +
push eax  +
push dword ptr [ebp+10h]  +
mov [ebp-8] esi +
push dword ptr [ebp+0Ch]  +
push esi  +
call sub_1011BCE  +
mov ebx eax +
test ebx ebx +
jl loc_10129CB  +
cmp dword ptr [ebp-4] 0 +
jnz loc_10129FE  +
cmp esi [edi] +
jnz loc_10129A3  +
jmp loc_10129F7  +
push ebx  +
push 162h  +
push offset aDW7rtmBaseNt_4  +
push offset aMgrfindowningi  +
call sub_101167D  +
push dword ptr [ebp+8]  +
call ds:LeaveCriticalSection  +
pop esi  +
pop edi  +
mov eax ebx +
pop ebx  +
leave   +
retn 10h  +
***
cmp [ebp-4] ebx +
jnz loc_10129FE  +
mov ebx 0C142010Ah +
jmp loc_10129E0  +
***
mov eax [ebp-8] +
mov ecx [ebp+14h] +
mov [ecx] eax +
jmp loc_10129E0  +
***
mov eax 80070057h +
push eax  +
push 146h  +
push offset aDW7rtmBaseNt_4  +
push offset aMgrfindowningi  +
mov ebx eax +
call sub_101167D  +
jmp loc_10129EA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
test eax eax +
jz loc_1012A67  +
mov esi [ebp+arg_4] +
test esi esi +
jz loc_1012A67  +
push edi  +
lea edi [eax+8] +
push edi  +
call ds:EnterCriticalSection  +
mov eax [esi] +
mov ecx [esi+4] +
mov [ecx] eax +
push edi  +
mov [eax+4] ecx +
call ds:LeaveCriticalSection  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 8  +
mov eax 80070057h +
push eax  +
push 1A8h  +
push offset aDW7rtmBaseNt_4  +
push offset aMgrremovemount  +
mov ebx eax +
call sub_101167D  +
jmp loc_1012A5F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
test esi esi +
jnz loc_1012AB6  +
mov edi 80070057h +
push edi  +
push 1E8h  +
push offset aDW7rtmBaseNt_4  +
push offset aMgrcleanup  +
call sub_101167D  +
jmp loc_1012AEE  +
and [esi+20h] edi +
jmp loc_1012AEA  +
mov eax [esi] +
mov ecx [eax] +
mov edx [eax+4] +
mov [edx] ecx +
push eax  +
mov [ecx+4] edx +
call sub_1011F16  +
mov edi eax +
test edi edi +
jge loc_1012AEA  +
push edi  +
push 203h  +
push offset aDW7rtmBaseNt_4  +
push offset aMgrcleanup  +
call sub_101167D  +
xor edi edi +
cmp [esi] esi +
jnz loc_1012ABB  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
xor eax eax +
push ebx  +
xor ebx ebx +
push edi  +
mov [ebp+var_34] ebx +
lea edi [ebp+var_30] +
stos   +
stos   +
stos   +
stos   +
stos   +
xor eax eax +
mov word ptr [ebp+var_14] ax +
lea edi [ebp+var_14+2] +
stos   +
mov [ebp+var_C] ebx +
stos   +
mov [ebp+var_5] bl +
mov [ebp+var_6] bl +
mov [ebp+var_7] bl +
mov byte ptr [ebp+var_4+3] bl +
mov byte ptr [ebp+var_4+2] bl +
mov byte ptr [ebp+var_4+1] bl +
mov byte ptr [ebp+var_4] bl +
cmp [ebp+arg_0] ebx +
jz loc_1012CF6  +
cmp [ebp+arg_10] ebx +
jz loc_1012CF6  +
cmp [ebp+arg_4] ebx +
jz loc_1012CF6  +
cmp [ebp+arg_4] 0FFFFFFFFh +
jz loc_1012CF6  +
push esi  +
mov esi ds:RtlAdjustPrivilege +
lea eax [ebp+var_4+3] +
push eax  +
push ebx  +
xor edi edi +
inc edi  +
push edi  +
push 11h  +
call esi  +
cmp eax ebx +
jge loc_1012B94  +
or eax 10000000h +
push eax  +
push 2B3h  +
push offset aDW7rtmBaseNt_5  +
push offset aFiofileopenbyi  +
mov [ebp+var_C] eax +
call sub_101167D  +
jmp loc_1012C0A  +
lea eax [ebp+var_4+2] +
push eax  +
push ebx  +
push edi  +
push 12h  +
call esi  +
cmp eax ebx +
jge loc_1012C14  +
or eax 10000000h +
push eax  +
push 2BAh  +
push offset aDW7rtmBaseNt_5  +
push offset aFiofileopenbyi  +
mov [ebp+var_C] eax +
call sub_101167D  +
cmp byte ptr [ebp+var_4+3] bl +
jnz loc_1012BCE  +
lea eax [ebp+var_4+3] +
push eax  +
push ebx  +
push ebx  +
push 11h  +
call esi  +
cmp [ebp+var_5] bl +
jz loc_1012BE2  +
cmp byte ptr [ebp+var_4+2] bl +
jnz loc_1012BE2  +
lea eax [ebp+var_4+2] +
push eax  +
push ebx  +
push ebx  +
push 12h  +
call esi  +
cmp [ebp+var_6] bl +
jz loc_1012BF6  +
cmp byte ptr [ebp+var_4+1] bl +
jnz loc_1012BF6  +
lea eax [ebp+var_4+1] +
push eax  +
push ebx  +
push ebx  +
push 8  +
call esi  +
cmp [ebp+var_7] bl +
jz loc_1012C0A  +
cmp byte ptr [ebp+var_4] bl +
jnz loc_1012C0A  +
lea eax [ebp+var_4] +
push eax  +
push ebx  +
push ebx  +
push 9  +
call esi  +
pop esi  +
mov eax [ebp+var_C] +
pop edi  +
pop ebx  +
leave   +
retn 14h  +
lea eax [ebp+var_4+1] +
push eax  +
push ebx  +
push edi  +
push 8  +
mov [ebp+var_5] 1 +
call esi  +
cmp eax ebx +
jge loc_1012C36  +
or eax 10000000h +
push eax  +
push 2C1h  +
jmp loc_1012BAD  +
lea eax [ebp+var_4] +
push eax  +
push ebx  +
push edi  +
push 9  +
mov [ebp+var_6] 1 +
call esi  +
cmp eax ebx +
jge loc_1012C58  +
or eax 10000000h +
push eax  +
push 2C8h  +
jmp loc_1012BAD  +
push 6  +
pop ecx  +
xor eax eax +
push 8  +
lea edi [ebp+var_34] +
stos   +
lea edi [ebp+var_1C] +
stos   +
stos   +
mov eax [ebp+arg_0] +
mov [ebp-10h] eax +
pop eax  +
mov word ptr [ebp+var_14] ax +
mov word ptr [ebp+var_14+2] ax +
mov eax [ebp+arg_4] +
mov [ebp+var_30] eax +
push ebx  +
push ebx  +
lea eax [ebp+var_14] +
mov [ebp+var_2C] eax +
mov eax [ebp+arg_C] +
or eax 6020h +
push eax  +
push 1  +
push 3  +
push 80h  +
push ebx  +
lea eax [ebp+var_1C] +
push eax  +
lea eax [ebp+var_34] +
push eax  +
mov eax [ebp+arg_8] +
or eax 100000h +
push eax  +
push [ebp+arg_10]  +
mov [ebp+var_7] 1 +
mov [ebp+var_34] 18h +
mov [ebp+var_28] ebx +
mov [ebp+var_24] ebx +
mov [ebp+var_20] ebx +
call ds:NtCreateFile  +
cmp eax ebx +
jge loc_1012CDB  +
or eax 10000000h +
push eax  +
push 2EDh  +
jmp loc_1012BAD  +
mov eax [ebp+var_1C] +
cmp eax ebx +
jge loc_1012BBF  +
or eax 10000000h +
push eax  +
push 2EEh  +
jmp loc_1012BAD  +
mov eax 80070057h +
push eax  +
push 2A8h  +
push offset aDW7rtmBaseNt_5  +
push offset aFiofileopenbyi  +
mov [ebp+var_C] eax +
call sub_101167D  +
jmp loc_1012C0B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
and [ebp+var_C] 0 +
and [ebp+var_4] 0 +
push ebx  +
mov ebx ds:GetProcessHeap +
push esi  +
push edi  +
xor eax eax +
lea edi [ebp+var_8] +
stos   +
xor edi edi +
mov esi 10Ch +
test edi edi +
jz loc_1012D53  +
push edi  +
push 0  +
call ebx  +
push eax  +
call ds:HeapFree  +
add esi esi +
push esi  +
push 8  +
call ebx  +
push eax  +
call ds:HeapAlloc  +
mov edi eax +
test edi edi +
jz loc_1012DB2  +
push 9  +
push esi  +
push edi  +
lea eax [ebp+var_C] +
push eax  +
push [ebp+arg_0]  +
call ds:NtQueryInformationFile  +
cmp eax 80000005h +
jz loc_1012D8A  +
test eax eax +
jl loc_1012DD1  +
mov ecx [ebp+var_C] +
test ecx ecx +
jl loc_1012DDE  +
test eax eax +
jl loc_1012D43  +
mov esi [edi] +
inc esi  +
inc esi  +
push esi  +
push 8  +
call ebx  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+arg_0] eax +
test eax eax +
jnz loc_1012DEF  +
mov eax 8007000Eh +
push eax  +
push 366h  +
jmp loc_1012DBD  +
mov eax 8007000Eh +
push eax  +
push 34Dh  +
mov [ebp+var_4] eax +
push offset aDW7rtmBaseNt_5  +
push offset aFiogetfilename  +
call sub_101167D  +
jmp loc_1012E0F  +
or eax 10000000h +
push eax  +
push 35Ah  +
jmp loc_1012DBD  +
or ecx 10000000h +
push ecx  +
mov [ebp+var_4] ecx +
push 35Bh  +
jmp loc_1012DC0  +
push esi  +
push 0  +
push eax  +
call memset  +
push dword ptr [edi]  +
mov esi [ebp+arg_0] +
lea eax [edi+4] +
push eax  +
push esi  +
call memcpy  +
mov eax [ebp+arg_4] +
add esp 18h +
mov [eax] esi +
test edi edi +
jz loc_1012E1F  +
push edi  +
push 0  +
call ebx  +
push eax  +
call ds:HeapFree  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
push edi  +
xor esi esi +
xor eax eax +
mov [ebp+dwBytes] esi +
lea edi [ebp+var_8] +
stos   +
lea eax [ebp+dwBytes] +
push eax  +
push [ebp+hFile]  +
xor ebx ebx +
mov [ebp+NumberOfBytesRead] esi +
call ds:GetFileSizeEx  +
test eax eax +
jnz loc_1012E93  +
call ds:GetLastError  +
test eax eax +
jle loc_1012E6E  +
and eax 0FFFFh +
or eax 80070000h +
mov ebx eax +
test ebx ebx +
jnz loc_1012E79  +
mov ebx 80004005h +
push ebx  +
push 5F7h  +
push offset aDW7rtmBaseNt_5  +
push offset aFioreadhandlei  +
call sub_101167D  +
jmp loc_1012F28  +
cmp [ebp+var_8] ebx +
jz loc_1012EA7  +
mov eax 8007007Ah +
push eax  +
mov ebx eax +
push 602h  +
jmp loc_1012E7F  +
push [ebp+dwBytes]  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov edi eax +
test edi edi +
jnz loc_1012EDD  +
mov eax 8007000Eh +
push eax  +
mov ebx eax +
push 606h  +
push offset aDW7rtmBaseNt_5  +
push offset aFioreadhandlei  +
call sub_101167D  +
jmp loc_1012F14  +
mov eax [ebp+dwBytes] +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
test eax eax +
jbe loc_1012F0D  +
push 0  +
lea ecx [ebp+NumberOfBytesRead] +
push ecx  +
sub eax esi +
push eax  +
lea eax [esi+edi] +
push eax  +
push [ebp+hFile]  +
call ds:ReadFile  +
test eax eax +
jz loc_1012F31  +
add esi [ebp+NumberOfBytesRead] +
mov eax [ebp+dwBytes] +
cmp esi eax +
jb loc_1012EE9  +
mov eax [ebp+arg_4] +
mov [eax] edi +
xor edi edi +
test edi edi +
jz loc_1012F28  +
push edi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 0Ch  +
call ds:GetLastError  +
test eax eax +
jle loc_1012F45  +
and eax 0FFFFh +
or eax 80070000h +
mov ebx eax +
test ebx ebx +
jnz loc_1012F50  +
mov ebx 80004005h +
push ebx  +
push 618h  +
jmp loc_1012ECC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
mov [ebp+lpMem] ebx +
cmp eax ebx +
jz loc_1012FE2  +
cmp [eax] bx +
jz loc_1012FE2  +
mov edi [ebp+arg_4] +
cmp edi ebx +
jz loc_1012FE2  +
lea ecx [ebp+lpMem] +
push ecx  +
push eax  +
call sub_1015DB2  +
mov esi eax +
cmp esi ebx +
jge loc_1012F99  +
push esi  +
push 746h  +
jmp loc_1012FEF  +
push ebx  +
push 2000001h  +
push 3  +
push ebx  +
push 3  +
push 40000000h  +
push [ebp+lpMem]  +
call ds:CreateFileW  +
cmp eax 0FFFFFFFFh +
jnz loc_1012FDE  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1012FCB  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
cmp esi ebx +
jnz loc_1012FD6  +
mov esi 80004005h +
push esi  +
push 751h  +
jmp loc_1012FEF  +
mov [edi] eax +
jmp loc_1012FFE  +
mov eax 80070057h +
push eax  +
mov esi eax +
push 740h  +
push offset aDW7rtmBaseNt_5  +
push offset aFiovolumeopen  +
call sub_101167D  +
cmp [ebp+lpMem] ebx +
jz loc_1013014  +
push [ebp+lpMem]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+arg_8]  +
or edi 0FFFFFFFFh +
xor ebx ebx +
mov [ebp+hObject] edi +
mov [ebp+var_14] edi +
mov [ebp+var_18] edi +
mov [ebp+var_1C] ebx +
mov [ebp+lpMem] ebx +
mov dword ptr [ebp+var_C] ebx +
call sub_1012F60  +
cmp eax ebx +
mov [ebp+var_4] eax +
jge loc_1013071  +
push eax  +
push 54Dh  +
push offset aDW7rtmBaseNt_5  +
push offset aFioopenstreamb  +
call sub_101167D  +
jmp loc_1013147  +
lea eax [ebp+var_C] +
push eax  +
push [ebp+arg_8]  +
call sub_1015DB2  +
cmp eax ebx +
mov [ebp+var_4] eax +
jge loc_101308C  +
push eax  +
push 552h  +
jmp loc_101305D  +
lea eax [ebp+hObject] +
push eax  +
push ebx  +
mov esi 80000000h +
push esi  +
push [ebp+var_14]  +
push [ebp+arg_0]  +
call sub_1012AFB  +
cmp eax ebx +
mov [ebp+var_4] eax +
jge loc_10130B1  +
push eax  +
push 55Dh  +
jmp loc_101305D  +
lea eax [ebp+var_1C] +
push eax  +
push [ebp+hObject]  +
call sub_1012D1D  +
cmp eax ebx +
mov [ebp+var_4] eax +
jge loc_10130CC  +
push eax  +
push 565h  +
jmp loc_101305D  +
push [ebp+arg_4]  +
lea eax [ebp+lpMem] +
push [ebp+var_1C]  +
push dword ptr [ebp+var_C]  +
push offset aSSS  +
push eax  +
call sub_101160D  +
add esp 14h +
cmp eax ebx +
mov [ebp+var_4] eax +
jge loc_10130F8  +
push eax  +
push 56Ch  +
jmp loc_101305D  +
push ebx  +
push ebx  +
push 3  +
push ebx  +
push 3  +
push esi  +
push [ebp+lpMem]  +
call ds:CreateFileW  +
mov [ebp+var_18] eax +
cmp eax edi +
jnz loc_101313F  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1013124  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_4] eax +
cmp eax ebx +
jnz loc_1013132  +
mov [ebp+var_4] 80004005h +
push [ebp+var_4]  +
push 577h  +
jmp loc_101305D  +
mov ecx [ebp+arg_C] +
mov [ecx] eax +
mov [ebp+var_18] edi +
mov esi ds:CloseHandle +
cmp [ebp+hObject] edi +
jz loc_1013157  +
push [ebp+hObject]  +
call esi  +
cmp [ebp+var_14] edi +
jz loc_1013161  +
push [ebp+var_14]  +
call esi  +
cmp [ebp+var_18] edi +
jz loc_101316B  +
push [ebp+var_18]  +
call esi  +
mov esi ds:HeapFree +
mov edi ds:GetProcessHeap +
cmp [ebp+lpMem] ebx +
jz loc_101318C  +
push [ebp+lpMem]  +
push ebx  +
call edi  +
push eax  +
call esi  +
test eax eax +
jz loc_101318C  +
mov [ebp+lpMem] ebx +
cmp dword ptr [ebp+var_C] ebx +
jz loc_10131A1  +
push dword ptr [ebp+var_C]  +
push ebx  +
call edi  +
push eax  +
call esi  +
test eax eax +
jz loc_10131A1  +
mov dword ptr [ebp+var_C] ebx +
cmp [ebp+var_1C] ebx +
jz loc_10131AF  +
push [ebp+var_1C]  +
push ebx  +
call edi  +
push eax  +
call esi  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
mov esi ds:RegOpenKeyExW +
push edi  +
lea eax [ebp+hKey] +
push eax  +
xor ebx ebx +
push 20119h  +
push ebx  +
push offset SubKey  +
push 80000002h  +
mov [ebp+hKey] ebx +
mov [ebp+phkResult] ebx +
xor edi edi +
mov [ebp+String] ebx +
call esi  +
cmp eax ebx +
jz loc_1013218  +
jle loc_1013202  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
push edi  +
push 69h  +
push offset aDW7rtmBaseNt_6  +
push offset aGetmountentry  +
call sub_101167D  +
jmp loc_1013274  +
lea eax [ebp+String] +
push eax  +
push [ebp+Uuid]  +
call ds:UuidToStringW  +
cmp eax ebx +
jz loc_101323C  +
jle loc_1013235  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
push edi  +
push 6Eh  +
jmp loc_1013207  +
lea eax [ebp+phkResult] +
push eax  +
mov eax [ebp+arg_4] +
or eax 100h +
push eax  +
push ebx  +
push [ebp+String]  +
push [ebp+hKey]  +
call esi  +
cmp eax ebx +
jz loc_1013269  +
jle loc_1013262  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
push edi  +
push 76h  +
jmp loc_1013207  +
mov eax [ebp+phkResult] +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
mov [ebp+phkResult] ebx +
mov esi ds:RegCloseKey +
cmp [ebp+hKey] ebx +
jz loc_1013284  +
push [ebp+hKey]  +
call esi  +
cmp [ebp+phkResult] ebx +
jz loc_101328E  +
push [ebp+phkResult]  +
call esi  +
cmp [ebp+String] ebx +
jz loc_101329D  +
lea eax [ebp+String] +
push eax  +
call ds:RpcStringFreeW  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push edi  +
lea eax [ebp+dwErrCode] +
push eax  +
push 20019h  +
push [ebp+Uuid]  +
xor edi edi +
mov [ebp+dwErrCode] edi +
call sub_10131BE  +
mov ebx eax +
cmp ebx edi +
jge loc_10132E6  +
push ebx  +
push 289h  +
push offset aDW7rtmBaseNt_6  +
push offset aStatestoregetm  +
call sub_101167D  +
jmp loc_1013348  +
push esi  +
push offset ValueName  +
push edi  +
push [ebp+dwErrCode]  +
call sub_102BCFA  +
mov esi eax +
cmp esi edi +
jnz loc_1013308  +
mov eax 8007000Eh +
push eax  +
push 290h  +
jmp loc_1013323  +
push edi  +
push esi  +
call sub_101509B  +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
cmp eax edi +
jnz loc_1013334  +
mov eax 8007000Eh +
push eax  +
push 293h  +
push offset aDW7rtmBaseNt_6  +
push offset aStatestoregetm  +
mov ebx eax +
call sub_101167D  +
cmp esi edi +
jz loc_1013347  +
push esi  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop esi  +
cmp [ebp+dwErrCode] edi +
jz loc_1013356  +
push [ebp+dwErrCode]  +
call ds:RegCloseKey  +
pop edi  +
mov eax ebx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+hKey] 0 +
push ebx  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push [ebp+Uuid]  +
call sub_10131BE  +
mov ebx eax +
test ebx ebx +
jge loc_101339F  +
push ebx  +
push 2C3h  +
push offset aDW7rtmBaseNt_6  +
push offset aStatestorege_0  +
call sub_101167D  +
jmp loc_101342E  +
push esi  +
push edi  +
push offset aMountPathHigh  +
push 0  +
push [ebp+hKey]  +
call sub_102BD18  +
mov edi [ebp+arg_4] +
mov esi ds:GetLastError +
mov [edi+4] eax +
call esi  +
test eax eax +
jz loc_10133E5  +
call esi  +
test eax eax +
jle loc_10133D2  +
and eax 0FFFFh +
or eax 80070000h +
mov ebx eax +
test ebx ebx +
jnz loc_10133DD  +
mov ebx 80004005h +
push ebx  +
push 2CEh  +
jmp loc_101341D  +
push offset aMountPathLow  +
push 0  +
push [ebp+hKey]  +
call sub_102BD18  +
mov [edi] eax +
call esi  +
test eax eax +
jz loc_101342C  +
call esi  +
test eax eax +
jle loc_101340C  +
and eax 0FFFFh +
or eax 80070000h +
mov ebx eax +
test ebx ebx +
jnz loc_1013417  +
mov ebx 80004005h +
push ebx  +
push 2D6h  +
push offset aDW7rtmBaseNt_6  +
push offset aStatestorege_0  +
call sub_101167D  +
pop edi  +
pop esi  +
cmp [ebp+hKey] 0 +
jz loc_101343D  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov eax ebx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+hKey] 0 +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jnz loc_101347A  +
mov eax 80070057h +
push eax  +
push 33Ah  +
push offset aDW7rtmBaseNt_6  +
push offset aStatestorege_1  +
mov esi eax +
call sub_101167D  +
jmp loc_10134F1  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push [ebp+Uuid]  +
call sub_10131BE  +
mov esi eax +
test esi esi +
jge loc_1013499  +
push esi  +
push 340h  +
jmp loc_10134D3  +
push offset aStatus  +
push 0  +
push [ebp+hKey]  +
call sub_102BD18  +
mov [edi] eax +
test eax eax +
jnz loc_10134E2  +
call ds:GetLastError  +
test eax eax +
jle loc_10134C2  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
test esi esi +
jnz loc_10134CD  +
mov esi 80004005h +
push esi  +
push 349h  +
push offset aDW7rtmBaseNt_6  +
push offset aStatestorege_1  +
call sub_101167D  +
cmp [ebp+hKey] 0 +
jz loc_10134F1  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_1013535  +
mov eax [esi+18h] +
test eax eax +
jz loc_101351D  +
push eax  +
call ds:CloseHandle  +
and dword ptr [esi+18h] 0 +
push dword ptr [esi]  +
call ds:FreeLibrary  +
push esi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
test ecx ecx +
jz loc_1013550  +
mov eax [ecx+18h] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
push 1Ch  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov ebx eax +
test ebx ebx +
jnz loc_101359D  +
mov eax 8007000Eh +
push eax  +
push 0B0h  +
push offset aDW7rtmBaseNt_7  +
push offset aLoadfilterlibp  +
mov [ebp+var_4] eax +
call sub_101167D  +
jmp loc_1013748  +
push edi  +
push 7  +
pop ecx  +
xor eax eax +
mov edi ebx +
push offset LibFileName  +
stos   +
call ds:LoadLibraryW  +
mov [ebx] eax +
test eax eax +
jnz loc_10135F6  +
call ds:GetLastError  +
test eax eax +
jle loc_10135CC  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_4] eax +
test eax eax +
jnz loc_10135DA  +
mov [ebp+var_4] 80004005h +
push [ebp+var_4]  +
push 0B7h  +
push offset aDW7rtmBaseNt_7  +
push offset aLoadfilterlibp  +
call sub_101167D  +
jmp loc_1013747  +
push esi  +
mov esi ds:GetProcAddress +
push offset ProcName  +
push eax  +
call esi  +
xor edi edi +
mov [ebx+4] eax +
cmp eax edi +
jnz loc_101363D  +
call ds:GetLastError  +
cmp eax edi +
jle loc_1013622  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_4] eax +
cmp eax edi +
jnz loc_1013630  +
mov [ebp+var_4] 80004005h +
push [ebp+var_4]  +
push 0BEh  +
jmp loc_101372E  +
push offset aFilterconnectc  +
push dword ptr [ebx]  +
call esi  +
mov [ebx+8] eax +
cmp eax edi +
jnz loc_101367C  +
call ds:GetLastError  +
cmp eax edi +
jle loc_1013661  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_4] eax +
cmp eax edi +
jnz loc_101366F  +
mov [ebp+var_4] 80004005h +
push [ebp+var_4]  +
push 0C5h  +
jmp loc_101372E  +
push offset aFiltersendmess  +
push dword ptr [ebx]  +
call esi  +
mov [ebx+0Ch] eax +
cmp eax edi +
jnz loc_10136B8  +
call ds:GetLastError  +
cmp eax edi +
jle loc_10136A0  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_4] eax +
cmp eax edi +
jnz loc_10136AE  +
mov [ebp+var_4] 80004005h +
push [ebp+var_4]  +
push 0CCh  +
jmp loc_101372E  +
push offset aFilterreplymes  +
push dword ptr [ebx]  +
call esi  +
mov [ebx+10h] eax +
cmp eax edi +
jnz loc_10136F4  +
call ds:GetLastError  +
cmp eax edi +
jle loc_10136DC  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_4] eax +
cmp eax edi +
jnz loc_10136EA  +
mov [ebp+var_4] 80004005h +
push [ebp+var_4]  +
push 0D3h  +
jmp loc_101372E  +
push offset aFiltergetmessa  +
push dword ptr [ebx]  +
call esi  +
mov [ebx+14h] eax +
cmp eax edi +
jnz loc_101373F  +
call ds:GetLastError  +
cmp eax edi +
jle loc_1013718  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_4] eax +
cmp eax edi +
jnz loc_1013726  +
mov [ebp+var_4] 80004005h +
push [ebp+var_4]  +
push 0DAh  +
push offset aDW7rtmBaseNt_7  +
push offset aLoadfilterlibp  +
call sub_101167D  +
jmp loc_1013746  +
mov eax [ebp+arg_0] +
mov [eax] ebx +
xor ebx ebx +
pop esi  +
pop edi  +
push ebx  +
call sub_10134FE  +
mov eax [ebp+var_4] +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
mov eax dword_1049010 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_28] 0 +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
xor eax eax +
and [ebp+var_2C] eax +
push 8  +
pop ecx  +
lea edi [ebp+var_24] +
stos   +
test ebx ebx +
jnz loc_1013792  +
mov eax 80070057h +
jmp loc_10137F9  +
push 3  +
pop eax  +
mov word ptr [ebp+var_24] ax +
xor eax eax +
mov [ebp+var_1C] 2 +
mov word ptr [ebp+var_24+2] ax +
mov [ebp+var_28] 42424242h +
mov [ebp+var_20] 24h +
call ds:GetCurrentProcessId  +
mov [ebp+var_8] eax +
lea edi [ebp+var_18] +
movs   +
lea eax [ebp+var_2C] +
push eax  +
push 0  +
movs   +
push 0  +
push 24h  +
lea eax [ebp+var_28] +
movs   +
push eax  +
push ebx  +
movs   +
call sub_101353F  +
push eax  +
call dword ptr [ebx+0Ch]  +
mov esi eax +
test esi esi +
jge loc_10137F7  +
push esi  +
push 102h  +
push offset aDW7rtmBaseNt_7  +
push offset aAssociateguid  +
call sub_101167D  +
mov eax esi +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010796  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 50h +
push ebx  +
push esi  +
push edi  +
xor esi esi +
xor eax eax +
push 6  +
mov [ebp+Handles] esi +
lea edi [ebp+var_18] +
stos   +
pop ecx  +
mov [ebp+var_50] esi +
lea edi [ebp+var_48] +
stos   +
mov [ebp+Overlapped.Internal] esi +
lea edi [ebp+Overlapped.InternalHigh] +
stos   +
stos   +
stos   +
push 78h  +
push 8  +
mov [ebp+var_14] esi +
mov [ebp+NumberOfBytesTransferred] esi +
mov [ebp+var_10] esi +
stos   +
mov [ebp+var_C] esi +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+lpMem] eax +
cmp eax esi +
jnz loc_101387F  +
push 8007000Eh  +
push 1BCh  +
push offset aDW7rtmBaseNt_7  +
push offset aListenfltthrea  +
call sub_101167D  +
mov ebx [ebp+arg_0] +
jmp loc_1013AC5  +
push esi  +
push esi  +
push esi  +
push esi  +
call ds:CreateEventW  +
mov [ebp+Overlapped.hEvent] eax +
cmp eax esi +
jnz loc_10138D7  +
mov edi ds:GetLastError +
call edi  +
cmp eax esi +
jle loc_10138A8  +
and eax 0FFFFh +
or eax 80070000h +
cmp eax esi +
jge loc_10138D7  +
call edi  +
cmp eax esi +
jle loc_10138BA  +
and eax 0FFFFh +
or eax 80070000h +
push eax  +
push 1C1h  +
push offset aDW7rtmBaseNt_7  +
push offset aListenfltthrea  +
call sub_101167D  +
mov ebx [ebp+arg_0] +
jmp loc_1013AAF  +
mov ebx [ebp+arg_0] +
mov eax [ebx] +
mov [ebp+Handles] eax +
mov eax [ebp+Overlapped.hEvent] +
mov [ebp+var_18] eax +
mov edi offset aDW7rtmBaseNt_7 +
mov esi offset aListenfltthrea +
jmp loc_10138F4  +
mov ebx [ebp+arg_0] +
mov edx [ebx+0Ch] +
lea eax [ebp+Overlapped] +
push eax  +
push 78h  +
push [ebp+lpMem]  +
push edx  +
call sub_101353F  +
push eax  +
call dword ptr [edx+14h]  +
cmp eax 800703E5h +
jz loc_1013919  +
test eax eax +
jl loc_1013A4D  +
push 0FFFFFFFFh  +
push 0  +
lea eax [ebp+Handles] +
push eax  +
push 2  +
call ds:WaitForMultipleObjects  +
test eax eax +
jz loc_1013A55  +
cmp eax 0FFFFFFFFh +
jz loc_1013A5E  +
push 0  +
lea eax [ebp+NumberOfBytesTransferred] +
push eax  +
lea eax [ebp+Overlapped] +
push eax  +
push dword ptr [ebx+0Ch]  +
call sub_101353F  +
push eax  +
call ds:GetOverlappedResult  +
test eax eax +
jz loc_1013A83  +
cmp [ebp+NumberOfBytesTransferred] 30h +
jnb loc_1013968  +
mov ebx 0C1420109h +
jmp loc_10139DE  +
mov eax [ebp+lpMem] +
cmp dword ptr [eax+1Ch] 0 +
mov [ebp+var_10] eax +
jz loc_1013981  +
mov ebx 0C1420109h +
push ebx  +
push 22Fh  +
jmp loc_10139D7  +
lea edx [ebp+var_C] +
push edx  +
push dword ptr [eax+28h]  +
lea ecx [eax+2Ch] +
push ecx  +
push dword ptr [ebx+10h]  +
call dword ptr [ebx+4]  +
mov ebx eax +
mov eax [ebp+lpMem] +
test ebx ebx +
jge loc_10139AC  +
push dword ptr [eax+20h]  +
call ds:CloseHandle  +
push ebx  +
push 20Ah  +
jmp loc_10139D7  +
push dword ptr [eax+28h]  +
lea ecx [eax+2Ch] +
push ecx  +
push dword ptr [eax+20h]  +
mov eax [ebp+arg_0] +
push [ebp+var_C]  +
call dword ptr [eax+8]  +
mov ebx eax +
mov eax [ebp+lpMem] +
push dword ptr [eax+20h]  +
call ds:CloseHandle  +
test ebx ebx +
jge loc_10139DE  +
push ebx  +
push 21Ah  +
push edi  +
push esi  +
call sub_101167D  +
mov eax [ebp+var_10] +
mov ecx [eax+8] +
mov [ebp+var_48] ecx +
mov eax [eax+0Ch] +
and [ebp+var_50] 0 +
mov [ebp+var_44] eax +
push 3  +
pop eax  +
mov [ebp+var_3C] ax +
xor eax eax +
mov [ebp+var_40] 42424242h +
mov [ebp+var_3A] ax +
mov [ebp+var_38] 10h +
test ebx ebx +
jge loc_1013A19  +
mov [ebp+var_34] 0C0000267h +
jmp loc_1013A1D  +
and [ebp+var_34] 0 +
mov eax [ebp+arg_0] +
mov edx [eax+0Ch] +
push 20h  +
lea eax [ebp+var_50] +
push eax  +
push edx  +
call sub_101353F  +
push eax  +
call dword ptr [edx+10h]  +
test eax eax +
jge loc_10138F1  +
push eax  +
push 24Ch  +
push edi  +
push esi  +
call sub_101167D  +
jmp loc_10138F1  +
push eax  +
push 1D4h  +
jmp loc_1013AA6  +
mov [ebp+var_14] 1 +
jmp loc_1013AAD  +
call ds:GetLastError  +
test eax eax +
jle loc_1013A74  +
and eax 0FFFFh +
or eax 80070000h +
test eax eax +
jnz loc_1013A7B  +
mov eax 80004005h +
push eax  +
push 1E3h  +
jmp loc_1013AA6  +
call ds:GetLastError  +
test eax eax +
jle loc_1013A99  +
and eax 0FFFFh +
or eax 80070000h +
test eax eax +
jnz loc_1013AA0  +
mov eax 80004005h +
push eax  +
push 1ECh  +
push edi  +
push esi  +
call sub_101167D  +
xor esi esi +
push [ebp+lpMem]  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp [ebp+var_14] esi +
jnz loc_1013ADE  +
push dword ptr [ebx]  +
call ds:SetEvent  +
push offset aFilterCommunic  +
push 40000h  +
call sub_1011628  +
pop ecx  +
pop ecx  +
cmp ebx esi +
jz loc_1013AF9  +
push dword ptr [ebx+0Ch]  +
call sub_10134FE  +
push ebx  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
shr ecx 1 +
push 0  +
pop eax  +
jz loc_1013B1E  +
cmp ecx 7FFFFFFFh +
jbe loc_1013B23  +
mov eax 80070057h +
test eax eax +
jl loc_1013B6E  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_1013B5E  +
mov edx [ebp+arg_8] +
push edi  +
mov edi 7FFFFFFEh +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_1013B59  +
movzx ecx word ptr [edx+eax] +
test cx cx +
jz loc_1013B59  +
mov [eax] cx +
inc eax  +
inc eax  +
dec esi  +
jnz loc_1013B41  +
pop edi  +
test esi esi +
jnz loc_1013B65  +
dec eax  +
dec eax  +
mov ebx 8007007Ah +
xor ecx ecx +
mov [eax] cx +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 234h +
mov eax dword_1049010 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov [ebp+var_234] eax +
mov eax [ebp+arg_8] +
push edi  +
mov [ebp+var_218] eax +
xor eax eax +
push 206h  +
mov word ptr [ebp+var_20C] ax +
xor ebx ebx +
lea eax [ebp+var_20C+2] +
push ebx  +
push eax  +
mov [ebp+var_21C] esi +
call memset  +
xor eax eax +
mov [ebp+var_22C] ebx +
lea edi [ebp+var_228] +
stos   +
stos   +
add esp 0Ch +
mov byte ptr [ebp+var_214] bl +
mov [ebp+var_210] ebx +
stos   +
mov [ebp+var_230] ebx +
cmp esi ebx +
jnz loc_1013C10  +
mov esi 80070057h +
push esi  +
push 120h  +
push offset aDW7rtmBaseNt_7  +
push offset aOpenfilterport  +
call sub_101167D  +
jmp loc_1013CA4  +
lea eax [ebp+var_210] +
push eax  +
mov [esi] ebx +
call sub_1013559  +
mov esi eax +
cmp esi ebx +
jge loc_1013C2C  +
push esi  +
push 12Ch  +
jmp loc_1013BFC  +
mov edi ds:RtlAdjustPrivilege +
lea eax [ebp+var_214] +
push eax  +
push ebx  +
push 1  +
push 0Ah  +
call edi  +
cmp eax ebx +
jge loc_1013C53  +
or eax 10000000h +
mov esi eax +
push esi  +
push 136h  +
jmp loc_1013BFC  +
push [ebp+var_234]  +
mov eax [ebp+var_210] +
call dword ptr [eax+4]  +
mov esi eax +
cmp esi 80070420h +
jz loc_1013CC2  +
cmp esi 80070002h +
jnz loc_1013C79  +
mov esi 0C1420121h +
cmp esi ebx +
jge loc_1013CC2  +
push esi  +
push 146h  +
push offset aDW7rtmBaseNt_7  +
push offset aOpenfilterport  +
call sub_101167D  +
lea eax [ebp+var_214] +
push eax  +
push ebx  +
push [ebp+var_214]  +
push 0Ah  +
call edi  +
push [ebp+var_210]  +
call sub_10134FE  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010796  +
leave   +
retn 0Ch  +
lea eax [ebp+var_214] +
push eax  +
push ebx  +
push [ebp+var_214]  +
push 0Ah  +
call edi  +
cmp eax ebx +
jge loc_1013CE7  +
or eax 10000000h +
mov esi eax +
push esi  +
push 150h  +
jmp loc_1013C83  +
push [ebp+var_218]  +
lea eax [ebp+var_20C] +
push 208h  +
push eax  +
call sub_1013B07  +
mov esi eax +
cmp esi ebx +
jge loc_1013D0F  +
push esi  +
push 158h  +
jmp loc_1013BFC  +
mov edi [ebp+var_210] +
lea eax [edi+18h] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+var_20C] +
push eax  +
call dword ptr [edi+8]  +
mov esi eax +
cmp esi ebx +
jge loc_1013D38  +
push esi  +
push 164h  +
jmp loc_1013BFC  +
push 3  +
pop eax  +
push 10h  +
mov [ebp+var_220] eax +
mov word ptr [ebp+var_228] ax +
xor eax eax +
mov word ptr [ebp+var_228+2] ax +
pop eax  +
lea ecx [ebp+var_230] +
push ecx  +
push ebx  +
push ebx  +
push eax  +
mov [ebp+var_224] eax +
lea eax [ebp+var_22C] +
push eax  +
push edi  +
mov [ebp+var_22C] 42424242h +
call sub_101353F  +
push eax  +
call dword ptr [edi+0Ch]  +
mov esi eax +
cmp esi 80070057h +
jnz loc_1013D8E  +
mov esi 0C1420132h +
cmp esi ebx +
jge loc_1013D9D  +
push esi  +
push 17Dh  +
jmp loc_1013BFC  +
mov eax [ebp+var_21C] +
mov [eax] edi +
mov [ebp+var_210] ebx +
jmp loc_1013CA4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax dword_1049010 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
and [ebp+Uuid.Data1] 0 +
and [ebp+var_18] 0 +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
push edi  +
mov [ebp+StringUuid] eax +
xor eax eax +
lea edi [ebp+Uuid.Data2] +
stos   +
stos   +
push 14h  +
push 8  +
stos   +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
test esi esi +
jnz loc_1013E19  +
mov edi 8007000Eh +
push edi  +
push 291h  +
push offset aDW7rtmBaseNt_7  +
push offset aFltcommspawnli  +
call sub_101167D  +
jmp loc_1013EE4  +
mov eax [ebp+arg_0] +
mov [esi] eax +
mov eax [ebp+arg_4] +
push offset aPfport  +
mov [esi+10h] eax +
push offset aWimmount  +
lea eax [ebp+var_18] +
push eax  +
mov dword ptr [esi+4] offset loc_1012972 +
mov dword ptr [esi+8] offset loc_101214B +
call sub_1013B77  +
mov edi eax +
test edi edi +
jge loc_1013E53  +
push edi  +
push 29Fh  +
jmp loc_1013E05  +
lea eax [ebp+Uuid] +
push eax  +
push [ebp+StringUuid]  +
call ds:UuidFromStringW  +
test eax eax +
jz loc_1013E7A  +
jle loc_1013E70  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
push edi  +
push 2A7h  +
jmp loc_1013E05  +
lea eax [ebp+Uuid] +
push eax  +
push [ebp+var_18]  +
call sub_101375B  +
mov edi eax +
xor eax eax +
cmp edi eax +
jge loc_1013E99  +
push edi  +
push 2AAh  +
jmp loc_1013E05  +
mov ecx [ebp+var_18] +
push eax  +
push eax  +
push esi  +
push offset sub_101380F  +
push eax  +
push eax  +
mov [esi+0Ch] ecx +
call ds:CreateThread  +
test eax eax +
jnz loc_1013EDD  +
call ds:GetLastError  +
test eax eax +
jle loc_1013EC7  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
test edi edi +
jnz loc_1013ED2  +
mov edi 80004005h +
push edi  +
push 2BCh  +
jmp loc_1013E05  +
xor esi esi +
and [ebp+var_18] esi +
mov [ebx] eax +
push [ebp+var_18]  +
call sub_10134FE  +
test esi esi +
jz loc_1013F00  +
push esi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010796  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_1013F73  +
mov eax [esi+8] +
push ebx  +
push edi  +
mov edi ds:CloseHandle +
cmp eax 0FFFFFFFFh +
jz loc_1013F3C  +
test eax eax +
jz loc_1013F3C  +
push eax  +
call edi  +
mov eax [esi+10h] +
test eax eax +
jz loc_1013F46  +
push eax  +
call edi  +
mov eax [esi+0Ch] +
mov edi ds:HeapFree +
mov ebx ds:GetProcessHeap +
test eax eax +
jz loc_1013F69  +
push eax  +
push 0  +
call ebx  +
push eax  +
call edi  +
test eax eax +
jz loc_1013F69  +
and dword ptr [esi+0Ch] 0 +
push esi  +
push 0  +
call ebx  +
push eax  +
call edi  +
pop edi  +
pop ebx  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax [ebp+arg_4] +
jb loc_1013F98  +
sub eax [ebp+arg_4] +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_1013FA3  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+lpMem] 0 +
cmp dword_1049A54 0 +
push ebx  +
push esi  +
mov esi offset dword_1049A4C +
jnz loc_1013FDC  +
mov dword_1049A50 esi +
mov dword_1049A4C esi +
mov dword_1049A54 1 +
lea eax [ebp+lpMem] +
push eax  +
push [ebp+lpFileName]  +
call sub_10116DC  +
mov ebx eax +
test ebx ebx +
jl loc_101401A  +
cmp dword_1049A4C esi +
jz loc_101401A  +
push [ebp+lpMem]  +
mov esi [esi+4] +
push dword ptr [esi+0Ch]  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1014015  +
cmp esi dword_1049A4C +
jnz loc_1013FF6  +
jmp loc_101401A  +
mov eax [ebp+arg_4] +
mov [eax] esi +
cmp [ebp+lpMem] 0 +
jz loc_1014032  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
xor ebx ebx +
mov [ebp+lpMem] ebx +
mov [ebp+hMem] ebx +
mov [ebp+var_8] ebx +
mov [ebp+dwFlags] 1900h +
cmp [ebp+arg_C] ebx +
jnz loc_101406B  +
mov dword ptr [ebp+dwMessageId] 80070057h +
jmp loc_10141A5  +
cmp [ebp+Arguments] ebx +
jz loc_1014077  +
mov [ebp+dwFlags] 3900h +
push esi  +
mov esi ds:FormatMessageW +
push edi  +
push [ebp+Arguments]  +
lea eax [ebp+hMem] +
push ebx  +
push eax  +
mov edi 400h +
push edi  +
push dword ptr [ebp+dwMessageId]  +
push ebx  +
push [ebp+dwFlags]  +
call esi  +
cmp eax ebx +
jz loc_101409F  +
cmp [ebp+hMem] ebx +
jnz loc_10140B1  +
push ebx  +
push ebx  +
lea eax [ebp+hMem] +
push eax  +
push edi  +
push dword ptr [ebp+dwMessageId]  +
push ebx  +
push 1100h  +
call esi  +
cmp eax ebx +
jz loc_10140BA  +
cmp [ebp+hMem] ebx +
jnz loc_10140FA  +
push dword ptr [ebp+dwMessageId]  +
lea eax [ebp+lpMem] +
push offset a0x08x  +
push eax  +
call sub_101160D  +
add esp 0Ch +
cmp eax ebx +
mov dword ptr [ebp+dwMessageId] eax +
jl loc_1014166  +
mov eax [ebp+lpMem] +
mov [ebp+Arguments] eax +
lea eax [ebp+Arguments] +
push eax  +
push ebx  +
lea eax [ebp+hMem] +
push eax  +
mov eax [ebp+dwFlags] +
push edi  +
push 8144012Ah  +
push ebx  +
or eax 2000h +
push eax  +
call esi  +
cmp eax ebx +
jnz loc_1014117  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1014112  +
and eax 0FFFFh +
or eax 80070000h +
mov dword ptr [ebp+dwMessageId] eax +
jmp loc_1014166  +
push [ebp+hMem]  +
cmp [ebp+arg_8] ebx +
jnz loc_1014139  +
call ds:GetCurrentProcessId  +
push eax  +
lea eax [ebp+var_8] +
push offset aDS  +
push eax  +
call sub_101160D  +
add esp 10h +
jmp loc_1014154  +
push [ebp+arg_8]  +
call ds:GetCurrentProcessId  +
push eax  +
lea eax [ebp+var_8] +
push offset aDSS  +
push eax  +
call sub_101160D  +
add esp 14h +
cmp eax ebx +
mov dword ptr [ebp+dwMessageId] eax +
jl loc_1014166  +
mov eax [ebp+var_8] +
mov ecx [ebp+arg_C] +
mov [ecx] eax +
mov [ebp+var_8] ebx +
cmp [ebp+hMem] ebx +
jz loc_1014174  +
push [ebp+hMem]  +
call ds:LocalFree  +
mov esi ds:HeapFree +
mov edi ds:GetProcessHeap +
cmp [ebp+lpMem] ebx +
jz loc_1014195  +
push [ebp+lpMem]  +
push ebx  +
call edi  +
push eax  +
call esi  +
test eax eax +
jz loc_1014195  +
mov [ebp+lpMem] ebx +
cmp [ebp+var_8] ebx +
jz loc_10141A3  +
push [ebp+var_8]  +
push ebx  +
call edi  +
push eax  +
call esi  +
pop edi  +
pop esi  +
mov eax dword ptr [ebp+dwMessageId] +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 50h +
push esi  +
push edi  +
xor esi esi +
push 30h  +
lea eax [ebp+FileInformation.ftCreationTime] +
push esi  +
push eax  +
mov [ebp+Buffer] esi +
mov [ebp+NumberOfBytesWritten] esi +
mov [ebp+FileInformation.dwFileAttributes] esi +
call memset  +
xor eax eax +
mov [ebp+Overlapped.Internal] esi +
lea edi [ebp+Overlapped.InternalHigh] +
stos   +
stos   +
stos   +
stos   +
mov edi [ebp+arg_0] +
add esp 0Ch +
cmp edi esi +
jnz loc_10141F3  +
mov esi 80004005h +
jmp loc_10142C2  +
push 3E8h  +
push dword ptr [edi+10h]  +
call ds:WaitForSingleObject  +
cmp eax esi +
jz loc_101423F  +
cmp eax 80h +
jz loc_101423F  +
cmp eax 102h +
jz loc_1014235  +
cmp eax 0FFFFFFFFh +
jnz loc_10141E9  +
call ds:GetLastError  +
cmp eax esi +
jg loc_1014229  +
mov esi eax +
jmp loc_10142C2  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1014222  +
mov esi 800705B4h +
jmp loc_10142C2  +
lea eax [ebp+FileInformation] +
push eax  +
push dword ptr [edi+8]  +
call ds:GetFileInformationByHandle  +
test eax eax +
jz loc_10142A3  +
cmp [ebp+FileInformation.nFileSizeLow] esi +
jz loc_1014287  +
cmp [ebp+FileInformation.nFileIndexHigh] esi +
jz loc_1014287  +
lea eax [ebp+Overlapped] +
push eax  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push 2  +
lea eax [ebp+Buffer] +
push eax  +
push dword ptr [edi+8]  +
call ds:ReadFile  +
test eax eax +
jz loc_10142A3  +
mov eax 0FEFFh +
cmp word ptr [ebp+Buffer] ax +
jz loc_10142B9  +
mov esi 0C1440129h +
jmp loc_10142B9  +
lea eax [ebp+Overlapped] +
push eax  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push 2  +
push offset dword_1002530  +
push dword ptr [edi+8]  +
call ds:WriteFile  +
test eax eax +
jnz loc_10142B9  +
call ds:GetLastError  +
cmp eax esi +
jle loc_10142B7  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
push dword ptr [edi+10h]  +
call ds:ReleaseMutex  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
xor ebx ebx +
push esi  +
mov esi [ebp+arg_0] +
mov [ebp+NumberOfBytesWritten] ebx +
mov [ebp+nNumberOfBytesToWrite] ebx +
cmp esi ebx +
jz loc_10143D3  +
cmp [ebp+lpBuffer] ebx +
jz loc_10143D3  +
push 3E8h  +
push dword ptr [esi+10h]  +
call ds:WaitForSingleObject  +
cmp eax ebx +
jz loc_1014341  +
cmp eax 80h +
jz loc_1014341  +
cmp eax 102h +
jz loc_101433A  +
cmp eax 0FFFFFFFFh +
jz loc_1014320  +
mov esi 80004005h +
jmp loc_1014378  +
call ds:GetLastError  +
cmp eax ebx +
jg loc_101432E  +
mov esi eax +
jmp loc_1014378  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_101432A  +
mov esi 800705B4h +
jmp loc_1014378  +
push edi  +
push 2  +
push ebx  +
push ebx  +
push dword ptr [esi+8]  +
call ds:SetFilePointer  +
mov edi ds:GetLastError +
mov [ebp+NumberOfBytesWritten] eax +
cmp eax 0FFFFFFFFh +
jnz loc_101438C  +
call edi  +
test eax eax +
jz loc_101438C  +
call edi  +
cmp eax ebx +
jg loc_1014380  +
mov esi eax +
mov eax [ebp+arg_0] +
push dword ptr [eax+10h]  +
call ds:ReleaseMutex  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1014369  +
mov eax [ebp+lpBuffer] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_1014392  +
lea ecx [ebp+nNumberOfBytesToWrite] +
push ecx  +
push 2  +
sub eax edx +
pop ecx  +
sar eax 1 +
mul  ecx +
push edx  +
push eax  +
call sub_1011101  +
mov esi eax +
cmp esi ebx +
jl loc_101436B  +
push ebx  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push [ebp+nNumberOfBytesToWrite]  +
mov eax [ebp+arg_0] +
push [ebp+lpBuffer]  +
push dword ptr [eax+8]  +
call ds:WriteFile  +
test eax eax +
jnz loc_101436B  +
jmp loc_1014363  +
mov esi 80070057h +
jmp loc_1014378  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-8] 0 +
push ebx  +
mov ebx [ebp+10h] +
push esi  +
mov esi [ebp+8] +
and esi 0BEFFFFFFh +
push edi  +
mov edi 947Fh +
cmp esi 9484h +
jz loc_101441E  +
cmp esi 9485h +
jz loc_101441E  +
cmp esi edi +
jz loc_101441E  +
cmp esi 9481h +
jnz loc_1014451  +
cmp ebx 11Ah +
jnz loc_1014434  +
mov esi 9576h +
mov dword ptr [ebp+0Ch] 0C144012Fh +
jmp loc_1014451  +
push ebx  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-8] +
push offset aSErrorD  +
push eax  +
call sub_101160D  +
add esp 10h +
test eax eax +
jl loc_10144FC  +
sub esi edi +
jz loc_10144BD  +
dec esi  +
dec esi  +
jz loc_10144AC  +
sub esi 3 +
jz loc_101449B  +
dec esi  +
jz loc_101448A  +
sub esi 0F1h +
jz loc_1014481  +
dec esi  +
jz loc_1014475  +
and dword ptr [ebp-4] 0 +
jmp loc_10144FC  +
lea eax [ebp-4] +
push eax  +
push ebx  +
push 0  +
push dword ptr [ebp+0Ch]  +
jmp loc_10144CC  +
lea eax [ebp-4] +
push eax  +
push 0  +
push ebx  +
jmp loc_101447C  +
***
lea eax [ebp-4] +
push eax  +
push 0  +
lea eax [ebp-8] +
push eax  +
push 8144012Dh  +
jmp loc_10144CC  +
lea eax [ebp-4] +
push eax  +
push 0  +
lea eax [ebp-8] +
push eax  +
push 4144012Ch  +
jmp loc_10144CC  +
lea eax [ebp-4] +
push eax  +
push 0  +
lea eax [ebp-8] +
push eax  +
push 81440133h  +
jmp loc_10144CC  +
lea eax [ebp-4] +
push eax  +
push 0  +
lea eax [ebp-8] +
push eax  +
push 0C144012Eh  +
call sub_101403F  +
test eax eax +
jl loc_10144FC  +
cmp dword ptr [ebp-4] 0 +
jz loc_10144FC  +
mov esi offset dword_1049A4C +
cmp dword_1049A4C esi +
jz loc_10144FC  +
push dword ptr [ebp-4]  +
mov esi [esi+4] +
push esi  +
call sub_10142CF  +
cmp esi dword_1049A4C +
jnz loc_10144E8  +
cmp dword ptr [ebp-8] 0 +
mov esi ds:HeapFree +
mov edi ds:GetProcessHeap +
jz loc_1014520  +
push dword ptr [ebp-8]  +
push 0  +
call edi  +
push eax  +
call esi  +
test eax eax +
jz loc_1014520  +
and dword ptr [ebp-8] 0 +
cmp dword ptr [ebp-4] 0 +
jz loc_1014530  +
push dword ptr [ebp-4]  +
push 0  +
call edi  +
push eax  +
call esi  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
push ebx  +
push esi  +
push edi  +
xor edi edi +
push 30h  +
lea eax [ebp+FileInformation.ftCreationTime] +
push edi  +
push eax  +
xor esi esi +
mov [ebp+lpMem] edi +
mov [ebp+FileInformation.dwFileAttributes] edi +
call memset  +
add esp 0Ch +
cmp [ebp+lpFileName] edi +
jz loc_101465A  +
cmp [ebp+arg_4] edi +
jz loc_101465A  +
push 28h  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
cmp esi edi +
jnz loc_1014595  +
mov ebx 8007000Eh +
jmp loc_101465F  +
push 0Ah  +
pop ecx  +
xor eax eax +
mov edi esi +
stos   +
lea edi [esi+0Ch] +
push edi  +
push [ebp+lpFileName]  +
call sub_10116DC  +
mov ebx eax +
test ebx ebx +
jl loc_101465F  +
push 0  +
push 80h  +
push 4  +
push 0  +
push 3  +
push 0C0000000h  +
push dword ptr [edi]  +
call ds:CreateFileW  +
mov [esi+8] eax +
cmp eax 0FFFFFFFFh +
jz loc_10145E5  +
lea ecx [ebp+FileInformation] +
push ecx  +
push eax  +
call ds:GetFileInformationByHandle  +
test eax eax +
jnz loc_10145FD  +
call ds:GetLastError  +
test eax eax +
jle loc_10145F9  +
and eax 0FFFFh +
or eax 80070000h +
mov ebx eax +
jmp loc_101465F  +
mov eax [ebp+FileInformation.nFileIndexLow] +
mov [esi+18h] eax +
mov eax [ebp+FileInformation.nFileIndexHigh] +
push eax  +
push dword ptr [esi+18h]  +
mov [esi+1Ch] eax +
mov eax [edi] +
mov dword ptr [esi+20h] 1 +
movzx eax word ptr [eax] +
push eax  +
lea eax [ebp+lpMem] +
push offset aGlobalWimgapiL  +
push eax  +
call sub_101160D  +
mov ebx eax +
add esp 14h +
test ebx ebx +
jl loc_101465F  +
push [ebp+lpMem]  +
push 0  +
push 0  +
call ds:CreateMutexW  +
mov [esi+10h] eax +
test eax eax +
jz loc_10145E5  +
push esi  +
call sub_10141B2  +
mov ebx eax +
test ebx ebx +
jl loc_101465F  +
mov eax [ebp+arg_4] +
mov [eax] esi +
xor esi esi +
jmp loc_101465F  +
mov ebx 80070057h +
xor edi edi +
cmp [ebp+lpMem] edi +
jz loc_101467E  +
push [ebp+lpMem]  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
test eax eax +
jz loc_101467E  +
mov [ebp+lpMem] edi +
push esi  +
call sub_1013F18  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+lpFileName]  +
call sub_1013FAC  +
mov esi eax +
test esi esi +
jl loc_101472F  +
mov eax [ebp+var_4] +
test eax eax +
jnz loc_1014718  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+lpFileName]  +
call sub_101453E  +
mov esi eax +
test esi esi +
jl loc_101472F  +
mov edi offset dword_1049A4C +
cmp dword_1049A4C edi +
jnz loc_1014701  +
push 0  +
push offset loc_10143DF  +
push 0  +
call sub_1014EB0  +
cmp eax 0FFFFFFFFh +
jnz loc_1014701  +
call ds:GetLastError  +
test eax eax +
jle loc_10146FD  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
jmp loc_101472F  +
mov ecx dword_1049A50 +
mov eax [ebp+var_4] +
mov [eax] edi +
mov [eax+4] ecx +
mov [ecx] eax +
mov dword_1049A50 eax +
jmp loc_101472B  +
add eax 20h +
push eax  +
push 1  +
push dword ptr [eax]  +
call sub_1011BA0  +
mov esi eax +
test esi esi +
jl loc_101472F  +
and [ebp+var_4] 0 +
push [ebp+var_4]  +
call sub_1013F18  +
test esi esi +
jge loc_1014772  +
test esi 10000000h +
jz loc_1014758  +
mov edi ds:RtlNtStatusToDosError +
push esi  +
call edi  +
cmp eax 13Dh +
jz loc_1014769  +
push esi  +
call edi  +
jmp loc_101476B  +
mov eax esi +
and eax 1FFF0000h +
cmp eax 70000h +
movzx eax si +
jz loc_101476B  +
mov eax esi +
push eax  +
call ds:SetLastError  +
xor eax eax +
test esi esi +
pop edi  +
setnl al  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+lpFileName]  +
call sub_1013FAC  +
mov ebx eax +
test ebx ebx +
jl loc_10147AF  +
mov edi [ebp+var_4] +
test edi edi +
jnz loc_10147CC  +
mov ebx 80070002h +
test ebx 10000000h +
jz loc_101480E  +
mov esi ds:RtlNtStatusToDosError +
push ebx  +
call esi  +
cmp eax 13Dh +
jz loc_101481F  +
push ebx  +
call esi  +
jmp loc_1014821  +
lea esi [edi+20h] +
push esi  +
push 1  +
push dword ptr [esi]  +
call sub_1013F7F  +
mov ebx eax +
test ebx ebx +
jl loc_10147AF  +
cmp dword ptr [esi] 0 +
jnz loc_1014828  +
mov eax [edi] +
mov ecx [edi+4] +
mov [ecx] eax +
push edi  +
mov [eax+4] ecx +
call sub_1013F18  +
cmp dword_1049A4C offset dword_1049A4C +
jnz loc_1014828  +
push offset loc_10143DF  +
push 0  +
call sub_1014AF3  +
jmp loc_1014828  +
mov eax ebx +
and eax 1FFF0000h +
cmp eax 70000h +
movzx eax bx +
jz loc_1014821  +
mov eax ebx +
push eax  +
call ds:SetLastError  +
pop edi  +
xor eax eax +
test ebx ebx +
pop esi  +
setnl al  +
pop ebx  +
leave   +
retn 4  +
***
cmp dword_1049A54 0 +
jz locret_1014868  +
cmp dword_1049A4C offset dword_1049A4C +
jz locret_1014868  +
push esi  +
mov esi dword_1049A50 +
push dword ptr [esi+0Ch]  +
call sub_1014784  +
cmp esi dword_1049A4C +
jnz loc_1014851  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
cmp eax 8 +
jb loc_10148DE  +
mov esi [ebp+arg_0] +
cmp esi ebx +
jz loc_10148DE  +
cmp eax [esi] +
jb loc_10148DE  +
mov [ebp+arg_0] ebx +
cmp [esi+4] ebx +
jbe loc_101491E  +
lea edi [esi+8] +
mov eax [edi] +
cmp eax [ebp+arg_4] +
ja loc_10148BF  +
add eax esi +
push 0  +
push eax  +
call sub_1014692  +
test eax eax +
jz loc_10148C6  +
inc [ebp+arg_0]  +
mov eax [ebp+arg_0] +
add edi 4 +
cmp eax [esi+4] +
jb loc_101489A  +
jmp loc_101491E  +
mov ebx 80070057h +
jmp loc_10148E7  +
call ds:GetLastError  +
test eax eax +
jle loc_10148DA  +
and eax 0FFFFh +
or eax 80070000h +
mov ebx eax +
jmp loc_10148E3  +
mov ebx 80070057h +
test ebx ebx +
jge loc_101491E  +
test ebx 10000000h +
jz loc_1014904  +
mov esi ds:RtlNtStatusToDosError +
push ebx  +
call esi  +
cmp eax 13Dh +
jz loc_1014915  +
push ebx  +
call esi  +
jmp loc_1014917  +
mov eax ebx +
and eax 1FFF0000h +
cmp eax 70000h +
movzx eax bx +
jz loc_1014917  +
mov eax ebx +
push eax  +
call ds:SetLastError  +
pop edi  +
xor eax eax +
test ebx ebx +
pop esi  +
setnl al  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_1049010 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+Uuid.Data1] 0 +
mov ecx [ebp+StringUuid] +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
xor eax eax +
lea edi [ebp+Uuid.Data2] +
stos   +
stos   +
stos   +
mov [ebp+var_18] 4 +
test ecx ecx +
jz loc_10149C8  +
cmp word ptr [ecx] 0 +
jz loc_10149C8  +
test ebx ebx +
jz loc_10149C8  +
lea eax [ebp+Uuid] +
push eax  +
push ecx  +
call ds:UuidFromStringW  +
test eax eax +
jz loc_1014992  +
jle loc_1014988  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
push esi  +
push 38Fh  +
jmp loc_10149D3  +
lea eax [ebp+var_18] +
push eax  +
lea eax [ebp+Uuid] +
push eax  +
call sub_1013449  +
mov esi eax +
test esi esi +
jge loc_10149BB  +
cmp esi 80070002h +
jnz loc_10149B3  +
xor esi esi +
and [ebx] esi +
jmp loc_10149E2  +
push esi  +
push 39Ch  +
jmp loc_10149D3  +
xor eax eax +
cmp [ebp+var_18] 2 +
setz al  +
mov [ebx] eax +
jmp loc_10149E2  +
mov esi 80070057h +
push esi  +
push 38Bh  +
push offset aDW7rtmBaseNt_8  +
push offset aCleanupismount  +
call sub_101167D  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010796  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1014A10  +
cmp ecx 7FFFFFFFh +
jbe loc_1014A15  +
mov eax 80070057h +
test eax eax +
jl loc_1014A52  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_1014A42  +
cmp eax esi +
ja loc_1014A42  +
jnz loc_1014A4D  +
jmp loc_1014A47  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
cmp [ebp+arg_0] esi +
jz loc_1014A86  +
push [ebp+arg_0]  +
call sub_1019699  +
cmp eax 0FEEDF001h +
jnz loc_1014A86  +
push [ebp+arg_0]  +
call sub_1019D98  +
cmp eax esi +
jz loc_1014A8C  +
mov esi [eax+4] +
jmp loc_1014A8C  +
mov esi dword_1049A5C +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
xor edi edi +
cmp [ebp+arg_0] edi +
jz loc_1014AC9  +
push [ebp+arg_0]  +
call sub_1019699  +
cmp eax 0FEEDF001h +
jnz loc_1014ADF  +
push [ebp+arg_0]  +
call sub_1019D98  +
cmp eax edi +
jz loc_1014AE7  +
cmp esi [eax+4] +
jnb loc_1014AE7  +
mov eax [eax] +
jmp loc_1014ADA  +
mov eax lpMem +
cmp eax edi +
jz loc_1014AE7  +
cmp esi dword_1049A5C +
jnb loc_1014AE7  +
lea edi [eax+esi*8] +
jmp loc_1014AE7  +
push 6  +
call ds:SetLastError  +
mov eax edi +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov ecx [ebp+lpMem] +
push ebx  +
push esi  +
xor esi esi +
push edi  +
xor ebx ebx +
xor edi edi +
mov [ebp+var_8] esi +
mov [ebp+var_4] esi +
cmp ecx esi +
jnz loc_1014B83  +
cmp [ebp+arg_0] esi +
jz loc_1014B57  +
push [ebp+arg_0]  +
call sub_1019D98  +
mov ebx eax +
test ebx ebx +
jz loc_1014B7B  +
push edi  +
push [ebp+arg_0]  +
call sub_1019DC6  +
mov eax [ebx] +
mov esi ds:HeapFree +
mov edi ds:GetProcessHeap +
test eax eax +
jz loc_1014B4D  +
push eax  +
push 0  +
call edi  +
push eax  +
call esi  +
test eax eax +
jz loc_1014B4D  +
and dword ptr [ebx] 0 +
push ebx  +
push 0  +
call edi  +
push eax  +
call esi  +
jmp loc_1014B7B  +
mov eax lpMem +
cmp eax esi +
jz loc_1014B7B  +
push eax  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
and lpMem ebx +
and dword_1049A5C ebx +
xor eax eax +
inc eax  +
jmp loc_1014D06  +
cmp [ebp+arg_0] esi +
jz loc_1014BB8  +
push [ebp+arg_0]  +
call sub_1019D98  +
mov esi eax +
test esi esi +
jz loc_1014BE5  +
mov ecx [esi+4] +
test ecx ecx +
jbe loc_1014BE5  +
mov eax [esi] +
mov edx [ebp+lpMem] +
cmp [eax] edx +
jz loc_1014BA9  +
inc edi  +
jmp loc_1014BB0  +
mov [ebp+var_4] 1 +
add eax 8 +
dec ecx  +
jnz loc_1014B9F  +
jmp loc_1014BE0  +
xor eax eax +
cmp dword_1049A5C esi +
jbe loc_1014BE5  +
mov edx lpMem +
cmp [edx+eax*8] ecx +
jz loc_1014BD0  +
inc edi  +
jmp loc_1014BD7  +
mov [ebp+var_4] 1 +
inc eax  +
cmp eax dword_1049A5C +
jb loc_1014BC2  +
cmp [ebp+var_4] ebx +
jnz loc_1014BF4  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_1014D06  +
test edi edi +
jz loc_1014C83  +
mov eax edi +
shl eax 3 +
push eax  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov ebx eax +
xor ecx ecx +
cmp ebx ecx +
jz loc_1014C75  +
xor edi edi +
cmp esi ecx +
jz loc_1014C44  +
cmp [esi+4] ecx +
jbe loc_1014C83  +
mov eax [esi] +
mov eax [eax+ecx*8] +
cmp eax [ebp+lpMem] +
jz loc_1014C3C  +
mov [ebx+edi*8] eax +
mov eax [esi] +
mov eax [eax+ecx*8+4] +
mov [ebx+edi*8+4] eax +
inc edi  +
inc ecx  +
cmp ecx [esi+4] +
jb loc_1014C24  +
jmp loc_1014C83  +
cmp dword_1049A5C ecx +
jbe loc_1014C83  +
mov eax lpMem +
mov eax [eax+ecx*8] +
cmp eax [ebp+lpMem] +
jz loc_1014C6A  +
mov [ebx+edi*8] eax +
mov eax lpMem +
mov eax [eax+ecx*8+4] +
mov [ebx+edi*8+4] eax +
inc edi  +
inc ecx  +
cmp ecx dword_1049A5C +
jb loc_1014C4C  +
jmp loc_1014C83  +
call ds:GetLastError  +
test eax eax +
jnz loc_1014D03  +
and [ebp+lpMem] 0 +
test esi esi +
jz loc_1014CD0  +
test edi edi +
jz loc_1014C98  +
mov eax [esi] +
mov [esi] ebx +
mov [esi+4] edi +
jmp loc_1014CE1  +
push 0  +
push [ebp+arg_0]  +
call sub_1019DC6  +
mov eax [esi] +
xor edi edi +
cmp eax edi +
jz loc_1014CBF  +
push eax  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
test eax eax +
jz loc_1014CBF  +
mov [esi] edi +
push esi  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
jmp loc_1014CE4  +
mov eax lpMem +
mov lpMem ebx +
mov dword_1049A5C edi +
mov [ebp+lpMem] eax +
cmp [ebp+lpMem] 0 +
jz loc_1014CFC  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov [ebp+var_8] 1 +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
call __SEH_prolog4  +
mov [ebp+var_20] 1 +
xor ebx ebx +
mov [ebp+var_1C] ebx +
mov [ebp+var_24] ebx +
mov [ebp+var_28] ebx +
mov esi [ebp+arg_0] +
cmp esi ebx +
jz loc_1014D59  +
push esi  +
call sub_1019699  +
cmp eax 0FEEDF002h +
jnz loc_1014D4F  +
push esi  +
call sub_101A106  +
mov [ebp+var_24] eax +
jmp loc_1014D59  +
cmp eax 0FEEDF001h +
jnz loc_1014D59  +
mov [ebp+var_24] esi +
cmp [ebp+var_24] ebx +
jz loc_1014DFC  +
mov [ebp+arg_0] ebx +
push [ebp+var_24]  +
call sub_1014A59  +
mov [ebp+var_2C] eax +
push 0FFFFFFFEh  +
pop edi  +
cmp [ebp+var_20] 0 +
jz loc_1014DFF  +
mov esi [ebp+arg_0] +
cmp esi [ebp+var_2C] +
jnb loc_1014DFF  +
and [ebp+ms_exc.disabled] 0 +
push [ebp+var_24]  +
call sub_1014A98  +
xor esi esi +
cmp eax esi +
jz loc_1014DF1  +
mov ecx [eax] +
cmp ecx esi +
jz loc_1014DF1  +
push dword ptr [eax+4]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call ecx  +
mov [ebp+var_30] eax +
cmp eax 0FFFFFFF0h +
jz loc_1014DD2  +
cmp eax edi +
jz loc_1014DCA  +
cmp eax 0FFFFFFFFh +
jz loc_1014DC1  +
mov [ebp+var_1C] eax +
jmp loc_1014DF1  +
mov [ebp+var_20] esi +
or [ebp+var_1C] 0FFFFFFFFh +
jmp loc_1014DF1  +
mov [ebp+var_20] esi +
mov [ebp+var_1C] edi +
jmp loc_1014DF1  +
mov [ebp+var_20] esi +
mov [ebp+var_1C] esi +
jmp loc_1014DF1  +
mov eax [ebp-14h] +
mov [ebp-28h] eax +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-28h] +
mov eax [eax] +
mov ebx [eax] +
push 0FFFFFFFEh  +
pop edi  +
mov [ebp+ms_exc.disabled] edi +
inc [ebp+arg_0]  +
jmp loc_1014D73  +
push 0FFFFFFFEh  +
pop edi  +
and [ebp+arg_0] 0 +
mov eax dword_1049A5C +
mov [ebp+var_2C] eax +
cmp [ebp+var_20] 0 +
jz loc_1014E96  +
mov esi [ebp+arg_0] +
cmp esi [ebp+var_2C] +
jnb loc_1014E96  +
mov [ebp+ms_exc.disabled] 1 +
push 0  +
call sub_1014A98  +
xor esi esi +
cmp eax esi +
jz loc_1014E8B  +
mov ecx [eax] +
cmp ecx esi +
jz loc_1014E8B  +
push dword ptr [eax+4]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call ecx  +
mov [ebp+var_30] eax +
cmp eax 0FFFFFFF0h +
jz loc_1014E6C  +
cmp eax edi +
jz loc_1014E64  +
cmp eax 0FFFFFFFFh +
jz loc_1014E5B  +
mov [ebp+var_1C] eax +
jmp loc_1014E8B  +
mov [ebp+var_20] esi +
or [ebp+var_1C] 0FFFFFFFFh +
jmp loc_1014E8B  +
mov [ebp+var_20] esi +
mov [ebp+var_1C] edi +
jmp loc_1014E8B  +
mov [ebp+var_20] esi +
mov [ebp+var_1C] esi +
jmp loc_1014E8B  +
mov eax [ebp-14h] +
mov [ebp-28h] eax +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-28h] +
mov eax [eax] +
mov ebx [eax] +
push 0FFFFFFFEh  +
pop edi  +
mov [ebp+ms_exc.disabled] edi +
inc [ebp+arg_0]  +
jmp loc_1014E0B  +
mov eax [ebp+arg_10] +
test eax eax +
jz loc_1014E9F  +
mov [eax] ebx +
mov eax [ebp+var_1C] +
call __SEH_epilog4  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
or [ebp+var_4] 0FFFFFFFFh +
push ebx  +
push edi  +
mov edi [ebp+dwBytes] +
xor ebx ebx +
cmp edi ebx +
jz loc_101508D  +
push esi  +
cmp [ebp+arg_0] ebx +
jz loc_1014FB6  +
push [ebp+arg_0]  +
call sub_1019D98  +
mov esi eax +
cmp esi ebx +
jz loc_1014F53  +
lea eax [ebp+arg_0] +
push eax  +
push 1  +
push dword ptr [esi+4]  +
mov [ebp+arg_0] ebx +
mov [ebp+dwBytes] ebx +
call sub_1011BA0  +
test eax eax +
jl loc_101503C  +
mov ebx [ebp+arg_0] +
lea eax [ebp+dwBytes] +
push eax  +
push 8  +
pop ecx  +
mov eax ebx +
mul  ecx +
push edx  +
push eax  +
call sub_1011101  +
test eax eax +
jl loc_101503C  +
push [ebp+dwBytes]  +
push dword ptr [esi]  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapReAlloc  +
test eax eax +
jz loc_101508C  +
mov ecx [esi+4] +
mov edx [ebp+arg_8] +
mov [esi] eax +
mov [eax+ecx*8] edi +
mov ecx [esi+4] +
mov [eax+ecx*8+4] edx +
mov eax [esi+4] +
mov [esi+4] ebx +
jmp loc_1015089  +
mov edi ds:GetProcessHeap +
push 8  +
push 8  +
call edi  +
mov ebx ds:HeapAlloc +
push eax  +
call ebx  +
mov esi eax +
test esi esi +
jz loc_101508C  +
push 8  +
push 8  +
call edi  +
push eax  +
call ebx  +
mov [esi] eax +
push esi  +
test eax eax +
jz loc_1014FA6  +
mov ecx [ebp+dwBytes] +
push [ebp+arg_0]  +
mov [eax] ecx +
mov eax [esi] +
mov ecx [ebp+arg_8] +
mov [eax+4] ecx +
mov eax [esi+4] +
mov [ebp+var_4] eax +
inc eax  +
mov [esi+4] eax +
call sub_1019DC6  +
jmp loc_101508C  +
push 0  +
call edi  +
push eax  +
call ds:HeapFree  +
jmp loc_101508C  +
mov esi lpMem +
cmp esi ebx +
jz loc_1015049  +
lea eax [ebp+arg_0] +
push eax  +
push 1  +
push dword_1049A5C  +
mov [ebp+arg_0] ebx +
mov [ebp+dwBytes] ebx +
call sub_1011BA0  +
test eax eax +
jl loc_101503C  +
mov ebx [ebp+arg_0] +
lea eax [ebp+dwBytes] +
push eax  +
push 8  +
pop ecx  +
mov eax ebx +
mul  ecx +
push edx  +
push eax  +
call sub_1011101  +
test eax eax +
jl loc_101503C  +
push [ebp+dwBytes]  +
push esi  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapReAlloc  +
test eax eax +
jz loc_101508C  +
mov ecx dword_1049A5C +
mov lpMem eax +
mov [eax+ecx*8] edi +
mov eax dword_1049A5C +
mov ecx [ebp+arg_8] +
mov edx lpMem +
mov [edx+eax*8+4] ecx +
mov eax dword_1049A5C +
mov dword_1049A5C ebx +
jmp loc_1015089  +
push 216h  +
call ds:SetLastError  +
jmp loc_101508C  +
push 8  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov lpMem eax +
cmp eax ebx +
jz loc_101508C  +
mov ecx dword_1049A5C +
mov [eax+ecx*8] edi +
mov eax dword_1049A5C +
mov ecx [ebp+arg_8] +
mov edx lpMem +
mov [edx+eax*8+4] ecx +
mov eax dword_1049A5C +
inc dword_1049A5C  +
mov [ebp+var_4] eax +
pop esi  +
mov eax [ebp+var_4] +
pop edi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
xor esi esi +
push edi  +
mov edi [ebp+lpFileName] +
mov [ebp+lpMem] esi +
mov [ebp+dwErrCode] esi +
cmp edi esi +
jz loc_10151AC  +
cmp [edi] si +
jz loc_10151AC  +
push ebx  +
push esi  +
push esi  +
push esi  +
push edi  +
call ds:GetFullPathNameW  +
mov ebx eax +
cmp ebx esi +
jz loc_10151A6  +
mov [ebp+var_10] esi +
push 4  +
mov esi offset a? +
push esi  +
push edi  +
inc ebx  +
call ds:wcsncmp  +
add esp 0Ch +
test eax eax +
jz loc_1015102  +
cmp ebx 0F8h +
jbe loc_1015102  +
mov [ebp+var_10] 1 +
add ebx 4 +
mov edi ds:GetProcessHeap +
lea eax [ebx+ebx] +
push eax  +
push 8  +
call edi  +
push eax  +
call ds:HeapAlloc  +
xor ecx ecx +
mov [ebp+lpMem] eax +
cmp eax ecx +
jz loc_10151A6  +
mov [ebp+var_8] ecx +
mov [ebp+FilePart] ecx +
cmp [ebp+var_10] ecx +
jz loc_101513F  +
push [ebp+lpFileName]  +
push esi  +
call sub_102B5C8  +
mov [ebp+var_8] eax +
test eax eax +
jnz loc_1015142  +
mov eax [ebp+lpFileName] +
lea ecx [ebp+FilePart] +
push ecx  +
push [ebp+lpMem]  +
push ebx  +
push eax  +
call ds:GetFullPathNameW  +
mov esi ds:HeapFree +
test eax eax +
jz loc_1015173  +
mov eax [ebp+lpMem] +
xor ebx ebx +
cmp [eax] bx +
jz loc_1015175  +
mov eax [ebp+arg_4] +
cmp eax ebx +
jz loc_101518A  +
mov ecx [ebp+FilePart] +
mov [eax] ecx +
jmp loc_101518A  +
xor ebx ebx +
call ds:GetLastError  +
push [ebp+lpMem]  +
mov [ebp+dwErrCode] eax +
push ebx  +
call edi  +
push eax  +
call esi  +
mov [ebp+lpMem] ebx +
cmp [ebp+var_8] ebx +
jz loc_1015198  +
push [ebp+var_8]  +
push ebx  +
call edi  +
push eax  +
call esi  +
cmp [ebp+dwErrCode] ebx +
jz loc_10151A6  +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
mov eax [ebp+lpMem] +
pop ebx  +
jmp loc_10151B6  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi 947Dh +
push esi  +
push 0  +
push [ebp+arg_0]  +
call sub_1019EB6  +
push 0  +
push 0  +
push 0  +
push esi  +
push [ebp+arg_0]  +
call sub_1014D12  +
push esi  +
push 1  +
push [ebp+arg_0]  +
call sub_1019EB6  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 5Ch +
push esi  +
push edi  +
xor esi esi +
xor eax eax +
mov [ebp+nNumberOfBytesToRead] esi +
lea edi [ebp+var_20] +
stos   +
mov [ebp+var_34] esi +
lea edi [ebp+var_30] +
stos   +
lea edi [ebp+var_28] +
mov [ebp+var_2C] esi +
stos   +
mov edi ds:GetFileSizeEx +
lea eax [ebp+nNumberOfBytesToRead] +
push eax  +
push [ebp+hFile]  +
mov [ebp+var_4] esi +
call edi  +
test eax eax +
jz loc_10153E9  +
lea eax [ebp+var_34] +
push eax  +
push [ebp+arg_8]  +
call edi  +
test eax eax +
jz loc_10153E9  +
mov eax [ebp+nNumberOfBytesToRead] +
cmp eax [ebp+var_34] +
jnz loc_10153E9  +
mov eax [ebp+var_20] +
cmp eax [ebp+var_30] +
jnz loc_10153E9  +
xor eax eax +
mov [ebp+Overlapped.Internal] esi +
lea edi [ebp+Overlapped.InternalHigh] +
stos   +
stos   +
stos   +
stos   +
xor eax eax +
mov [ebp+var_5C] esi +
lea edi [ebp+var_58] +
stos   +
stos   +
stos   +
stos   +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+NumberOfBytesTransferred]  +
mov [ebp+var_18] esi +
mov [ebp+var_1C] esi +
mov [ebp+lpBuffer] esi +
mov [ebp+var_8] esi +
mov [ebp+var_10] esi +
mov [ebp+var_14] esi +
call sub_1019C9C  +
test eax eax +
jz loc_10153E9  +
cmp [ebp+var_10] esi +
jz loc_10153E9  +
cmp [ebp+var_14] esi +
jz loc_10153E9  +
lea eax [ebp+var_1C] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_18] +
push eax  +
lea eax [ebp+lpBuffer] +
push eax  +
push [ebp+NumberOfBytesTransferred]  +
mov [ebp+var_4] 1 +
call sub_1019CD7  +
test eax eax +
jz loc_10153E9  +
cmp [ebp+lpBuffer] esi +
jz loc_10153E9  +
cmp [ebp+var_8] esi +
jz loc_10153E9  +
push ebx  +
mov eax [ebp+nNumberOfBytesToRead] +
or eax [ebp+var_20] +
jz loc_10153E8  +
mov ebx [ebp+var_18] +
xor eax eax +
cmp eax [ebp+var_20] +
jl loc_101530F  +
jg loc_101530C  +
cmp ebx [ebp+nNumberOfBytesToRead] +
jbe loc_101530F  +
mov ebx [ebp+nNumberOfBytesToRead] +
mov eax [ebp+var_2C] +
mov edi ds:ReadFile +
mov [ebp+Overlapped.Offset] eax +
mov eax [ebp+var_28] +
mov [ebp+Overlapped.OffsetHigh] eax +
mov eax [ebp+var_10] +
mov [ebp+Overlapped.hEvent] eax +
lea eax [ebp+Overlapped] +
push eax  +
lea eax [ebp+NumberOfBytesTransferred] +
push eax  +
push ebx  +
push [ebp+lpBuffer]  +
mov [ebp+NumberOfBytesTransferred] esi +
push [ebp+hFile]  +
mov [ebp+var_4] esi +
mov [ebp+Overlapped.Internal] esi +
mov [ebp+Overlapped.InternalHigh] esi +
call edi  +
test eax eax +
jnz loc_1015355  +
call ds:GetLastError  +
cmp eax 3E5h +
jnz loc_10153D3  +
mov eax [ebp+var_2C] +
mov [ebp+var_54] eax +
mov eax [ebp+var_28] +
mov [ebp+var_50] eax +
mov eax [ebp+var_14] +
mov [ebp+var_4C] eax +
lea eax [ebp+var_5C] +
push eax  +
lea eax [ebp+NumberOfBytesTransferred] +
push eax  +
push ebx  +
push [ebp+var_8]  +
mov [ebp+var_5C] esi +
push [ebp+arg_8]  +
mov [ebp+var_58] esi +
call edi  +
test eax eax +
jnz loc_101538F  +
call ds:GetLastError  +
cmp eax 3E5h +
jnz loc_10153D3  +
mov esi ds:GetOverlappedResult +
push 1  +
lea eax [ebp+NumberOfBytesTransferred] +
push eax  +
lea eax [ebp+Overlapped] +
push eax  +
push [ebp+hFile]  +
call esi  +
push 1  +
lea eax [ebp+NumberOfBytesTransferred] +
push eax  +
lea eax [ebp+var_5C] +
push eax  +
push [ebp+arg_8]  +
call esi  +
mov edi [ebp+var_8] +
mov esi [ebp+lpBuffer] +
mov ecx ebx +
xor eax eax +
cmps   +
jz loc_10153C6  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
xor esi esi +
test eax eax +
jnz loc_10153D3  +
mov [ebp+var_4] 1 +
add [ebp+var_2C] ebx +
adc [ebp+var_28] esi +
sub [ebp+nNumberOfBytesToRead] ebx +
sbb [ebp+var_20] esi +
cmp [ebp+var_4] esi +
jnz loc_10152EF  +
pop ebx  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+lpFileName] +
xor ebx ebx +
test esi esi +
jz loc_1015456  +
cmp [esi] bx +
jz loc_1015456  +
push 80h  +
push esi  +
call ds:SetFileAttributesW  +
push ebx  +
push 6200000h  +
push 3  +
push ebx  +
push 7  +
push 10000h  +
push esi  +
call ds:CreateFileW  +
cmp eax 0FFFFFFFFh +
jz loc_1015441  +
push eax  +
call ds:CloseHandle  +
mov ebx eax +
test ebx ebx +
jnz loc_1015452  +
call ds:GetLastError  +
test eax eax +
jz loc_1015452  +
push eax  +
call ds:SetLastError  +
mov eax ebx +
jmp loc_1015460  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
call sub_101C437  +
test eax eax +
jz loc_101549D  +
mov ecx [ebp+14h] +
add ecx [ebp+1Ch] +
mov edx [ebp+18h] +
adc edx [ebp+20h] +
push 0  +
push eax  +
push edx  +
push ecx  +
call __allmul  +
mov ecx [ebp+0Ch] +
add [ecx] eax +
adc [ecx+4] edx +
xor eax eax +
inc eax  +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
call sub_101C437  +
test eax eax +
jz loc_10154D3  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push 0  +
push eax  +
call __allmul  +
mov ecx [ebp+0Ch] +
add [ecx] eax +
adc [ecx+4] edx +
xor eax eax +
inc eax  +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_8] 0 +
push edi  +
push [ebp+arg_0]  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
call sub_101990E  +
pop edi  +
test eax eax +
jz loc_1015529  +
cmp [ebp+arg_4] 0 +
mov eax offset loc_101546B +
jnz loc_101550E  +
mov eax offset loc_10154A9 +
lea ecx [ebp+var_8] +
push ecx  +
push 2  +
push eax  +
push [ebp+arg_0]  +
call sub_101C5F8  +
test eax eax +
jge loc_1015529  +
and [ebp+var_8] 0 +
and [ebp+var_4] 0 +
mov eax [ebp+var_8] +
mov edx [ebp+var_4] +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
and [ebp+lpMem] 0 +
dec eax  +
push ebx  +
push esi  +
push edi  +
jz loc_1015566  +
dec eax  +
jz loc_101555F  +
dec eax  +
jz loc_1015558  +
mov ebx 9477h +
jmp loc_101556B  +
mov ebx 9484h +
jmp loc_101556B  +
mov ebx 9485h +
jmp loc_101556B  +
mov ebx 947Fh +
push [ebp+arg_8]  +
lea eax [ebp+lpMem] +
push [ebp+arg_C]  +
or ebx 41000000h +
push [ebp+arg_18]  +
push dword ptr [ebp+arg_14]  +
push offset aSDSS  +
push eax  +
call sub_101160D  +
mov edi [ebp+arg_10] +
mov esi ds:RtlNtStatusToDosError +
add esp 18h +
cmp [ebp+lpMem] 0 +
jz loc_10155F5  +
test edi 10000000h +
jz loc_10155B4  +
push edi  +
call esi  +
cmp eax 13Dh +
jz loc_10155C5  +
push edi  +
call esi  +
jmp loc_10155C7  +
mov eax edi +
and eax 1FFF0000h +
cmp eax 70000h +
movzx eax di +
jz loc_10155C7  +
mov eax edi +
push 0  +
push eax  +
push [ebp+lpMem]  +
push ebx  +
push [ebp+arg_4]  +
call sub_1014D12  +
xor ebx ebx +
cmp [ebp+lpMem] ebx +
jz loc_10155F5  +
push [ebp+lpMem]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
test eax eax +
jz loc_10155F5  +
mov [ebp+lpMem] ebx +
test edi 10000000h +
jz loc_101560C  +
push edi  +
call esi  +
cmp eax 13Dh +
jz loc_101561D  +
push edi  +
call esi  +
jmp loc_101561F  +
mov eax edi +
and eax 1FFF0000h +
cmp eax 70000h +
movzx eax di +
jz loc_101561F  +
mov eax edi +
push eax  +
call ds:SetLastError  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor eax eax +
mov edi offset unk_1049A60 +
xor edx edx +
cmps   +
pop edi  +
pop esi  +
jnz loc_101564F  +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
test esi esi +
jz loc_1015756  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jz loc_1015756  +
push 0Ch  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov edi eax +
test edi edi +
jnz loc_10156AF  +
call ds:GetLastError  +
test eax eax +
jle loc_101575B  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_101575B  +
and dword ptr [edi+8] 0 +
mov [edi] ebx +
cmp dword ptr [esi+24h] 0FFFFFFFFh +
jz loc_1015708  +
mov [ebp+arg_0] 1 +
lea ebx [esi+8] +
push ebx  +
call ds:EnterCriticalSection  +
mov eax [esi+20h] +
cmp eax [esi+24h] +
jnz loc_10156F1  +
push dword ptr [esi+28h]  +
call ds:ResetEvent  +
push ebx  +
call ds:LeaveCriticalSection  +
push 0FFFFFFFFh  +
push dword ptr [esi+28h]  +
call ds:WaitForSingleObject  +
jmp loc_10156FC  +
and [ebp+arg_0] 0 +
mov [ebp+var_4] 1 +
cmp [ebp+arg_0] 0 +
jnz loc_10156C5  +
cmp [ebp+var_4] 0 +
jnz loc_1015712  +
lea ebx [esi+8] +
push ebx  +
call ds:EnterCriticalSection  +
mov eax [esi+4] +
mov [edi+4] eax +
cmp dword ptr [esi+4] 0 +
jnz loc_101573E  +
mov eax [esi+30h] +
mov [esi] edi +
test eax eax +
jz loc_101572E  +
push eax  +
call ds:SetEvent  +
mov eax [esi+2Ch] +
test eax eax +
jz loc_1015745  +
push eax  +
call ds:ResetEvent  +
jmp loc_1015745  +
test eax eax +
jz loc_1015745  +
mov [eax+8] edi +
inc dword ptr [esi+20h]  +
push ebx  +
mov [esi+4] edi +
call ds:LeaveCriticalSection  +
xor eax eax +
jmp loc_101575B  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
mov esi [ebp+lpCriticalSection] +
test esi esi +
jz loc_1015813  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jz loc_1015813  +
lea eax [esi+8] +
push edi  +
push eax  +
mov [ebp+lpCriticalSection] eax +
call ds:EnterCriticalSection  +
mov edi [esi] +
test edi edi +
jz loc_10157E9  +
mov eax [edi] +
mov [ebx] eax +
mov eax [edi+8] +
mov ebx ds:SetEvent +
mov [esi] eax +
test eax eax +
jz loc_10157B6  +
and dword ptr [eax+4] 0 +
jmp loc_10157D2  +
mov eax [esi+2Ch] +
and dword ptr [esi+4] 0 +
test eax eax +
jz loc_10157C4  +
push eax  +
call ebx  +
mov eax [esi+30h] +
test eax eax +
jz loc_10157D2  +
push eax  +
call ds:ResetEvent  +
mov eax [esi+28h] +
test eax eax +
jz loc_10157E4  +
mov ecx [esi+24h] +
cmp ecx [esi+20h] +
jnz loc_10157E4  +
push eax  +
call ebx  +
dec dword ptr [esi+20h]  +
jmp loc_10157F0  +
mov [ebp+var_4] 80070103h +
push [ebp+lpCriticalSection]  +
call ds:LeaveCriticalSection  +
test edi edi +
jz loc_101580D  +
push edi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax [ebp+var_4] +
pop edi  +
jmp loc_1015818  +
mov eax 80070057h +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_1015836  +
mov eax 80070057h +
jmp loc_101588D  +
push esi  +
mov esi [eax] +
and dword ptr [eax] 0 +
push edi  +
lea eax [ebp+arg_0] +
push eax  +
push esi  +
call sub_1015767  +
test eax eax +
jge loc_101583D  +
mov eax [esi+28h] +
mov edi ds:CloseHandle +
test eax eax +
jz loc_101585B  +
push eax  +
call edi  +
mov eax [esi+2Ch] +
test eax eax +
jz loc_1015865  +
push eax  +
call edi  +
mov eax [esi+30h] +
test eax eax +
jz loc_101586F  +
push eax  +
call edi  +
lea eax [esi+8] +
push eax  +
call ds:DeleteCriticalSection  +
push esi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop edi  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp [ebp+arg_0] 0 +
push edi  +
jz loc_10159C2  +
mov edi [ebp+arg_4] +
test edi edi +
jz loc_10159C2  +
push ebx  +
push esi  +
push 34h  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
mov [ebp+var_4] esi +
mov ebx 80070000h +
test esi esi +
jz loc_10158D9  +
and [ebp+arg_4] 0 +
jmp loc_10158F5  +
call ds:GetLastError  +
test eax eax +
jle loc_10158EA  +
and eax 0FFFFh +
or eax ebx +
mov [ebp+arg_4] eax +
test eax eax +
jl loc_10159BB  +
lea eax [esi+8] +
push eax  +
call ds:InitializeCriticalSection  +
mov [esi+24h] edi +
cmp edi 0FFFFFFFFh +
mov edi ds:CreateEventW +
jz loc_1015931  +
xor eax eax +
push eax  +
push eax  +
push 1  +
push eax  +
call edi  +
mov [esi+28h] eax +
test eax eax +
jnz loc_1015931  +
call ds:GetLastError  +
test eax eax +
jle loc_101592E  +
and eax 0FFFFh +
or eax ebx +
mov [ebp+arg_4] eax +
xor eax eax +
cmp [ebp+arg_4] eax +
jl loc_10159B2  +
cmp [ebp+arg_8] eax +
jz loc_101595F  +
push eax  +
push eax  +
push 1  +
push eax  +
call edi  +
mov [esi+2Ch] eax +
test eax eax +
jnz loc_101595F  +
call ds:GetLastError  +
test eax eax +
jle loc_101595C  +
and eax 0FFFFh +
or eax ebx +
mov [ebp+arg_4] eax +
xor eax eax +
cmp [ebp+arg_4] eax +
jl loc_10159B2  +
cmp [ebp+arg_C] eax +
jz loc_101598D  +
push eax  +
push eax  +
push 1  +
push eax  +
call edi  +
mov [esi+30h] eax +
test eax eax +
jnz loc_101598D  +
call ds:GetLastError  +
test eax eax +
jle loc_101598A  +
and eax 0FFFFh +
or eax ebx +
mov [ebp+arg_4] eax +
cmp [ebp+arg_4] 0 +
jl loc_10159B2  +
mov eax [ebp+arg_0] +
mov [eax] esi +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_10159A4  +
mov ecx [esi+2Ch] +
mov [eax] ecx +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_10159BB  +
mov ecx [esi+30h] +
mov [eax] ecx +
jmp loc_10159BB  +
lea eax [ebp+var_4] +
push eax  +
call sub_1015823  +
mov eax [ebp+arg_4] +
pop esi  +
pop ebx  +
jmp loc_10159C7  +
mov eax 80070057h +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 264h +
mov eax dword_1049010 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
mov edx [ebp+arg_C] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi [ebp+arg_8] +
mov [ebp+var_25C] eax +
mov [ebp+var_260] ecx +
mov [ebp+var_264] edx +
mov [ebp+var_258] ebx +
cmp eax ebx +
jz loc_1015B47  +
cmp ecx ebx +
jz loc_1015B47  +
cmp esi ebx +
jz loc_1015B47  +
cmp edx ebx +
jz loc_1015B47  +
push 24Ch  +
lea eax [ebp+var_250] +
push ebx  +
push eax  +
call memset  +
mov ecx [esi+30h] +
mov eax [esi+10h] +
mov [ebp+var_250] ecx +
mov ecx [esi+34h] +
mov [ebp+var_24C] ecx +
mov ecx [esi+38h] +
mov [ebp+var_248] ecx +
mov ecx [esi+3Ch] +
mov [ebp+var_244] ecx +
mov ecx [esi+40h] +
mov [ebp+var_240] ecx +
mov ecx [esi+44h] +
add esp 0Ch +
mov [ebp+var_254] eax +
mov [ebp+var_23C] ecx +
test eax 400h +
jnz loc_1015AA4  +
mov eax [esi+54h] +
cmp eax ebx +
jnz loc_1015A95  +
cmp [esi+58h] ebx +
jz loc_1015AA4  +
mov [ebp+var_230] eax +
mov eax [esi+58h] +
mov [ebp+var_22C] eax +
push edi  +
push 14h  +
lea edi [esi+14h] +
push edi  +
call sub_1015632  +
test eax eax +
jnz loc_1015ADD  +
push ebx  +
push 1  +
push edi  +
push [ebp+var_25C]  +
call sub_101D093  +
cmp eax ebx +
jz loc_1015B5D  +
mov ecx [eax+18h] +
mov [ebp+var_234] ecx +
mov eax [eax+1Ch] +
mov [ebp+var_238] eax +
mov eax [esi] +
cmp eax ebx +
jz loc_1015AFF  +
push eax  +
push 104h  +
lea eax [ebp+var_228] +
push eax  +
call sub_1011320  +
cmp eax ebx +
mov [ebp+var_258] eax +
jl loc_1015B46  +
mov esi [esi+8] +
cmp esi ebx +
jz loc_1015B18  +
push esi  +
push 0Eh  +
lea eax [ebp+var_20] +
push eax  +
call sub_1011320  +
mov [ebp+var_258] eax +
cmp [ebp+var_258] ebx +
jl loc_1015B46  +
push ebx  +
lea eax [ebp+var_254] +
push eax  +
push [ebp+var_260]  +
push 9483h  +
push [ebp+var_25C]  +
call sub_1014D12  +
mov ecx [ebp+var_264] +
mov [ecx] eax +
pop edi  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_258] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010796  +
leave   +
retn 10h  +
mov [ebp+var_258] 80070714h +
jmp loc_1015B46  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
xor esi esi +
cmp [ebp+arg_0] 0FFFFFFFFh +
mov [ebp+var_4] esi +
jz loc_1015C49  +
cmp [ebp+dwBytes] esi +
jz loc_1015C49  +
push ebx  +
push edi  +
mov edi [ebp+arg_8] +
push 8  +
pop ebx  +
cmp edi esi +
jnz loc_1015BA5  +
mov edi offset String +
mov [ebp+dwBytes] ebx +
jmp loc_1015BB6  +
push edi  +
call ds:lstrlenW  +
mov esi eax +
add esi esi +
lea eax [esi+0Ah] +
mov [ebp+dwBytes] eax +
push [ebp+dwBytes]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov ebx eax +
test ebx ebx +
jnz loc_1015BE8  +
call ds:GetLastError  +
test eax eax +
jle loc_1015BE1  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1015C2E  +
mov [ebx] esi +
test esi esi +
jz loc_1015BFF  +
shr esi 1 +
push edi  +
inc esi  +
push esi  +
lea eax [ebx+4] +
push eax  +
call sub_1011320  +
mov [ebp+var_4] eax +
cmp [ebp+var_4] 0 +
jl loc_1015C2E  +
and [ebp+var_C] 0 +
push 28h  +
push [ebp+dwBytes]  +
xor eax eax +
lea edi [ebp+var_8] +
stos   +
push ebx  +
lea eax [ebp+var_C] +
push eax  +
push [ebp+arg_0]  +
call ds:NtSetInformationFile  +
test eax eax +
jge loc_1015C2E  +
or eax 10000000h +
mov [ebp+var_4] eax +
test ebx ebx +
jz loc_1015C42  +
push ebx  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax [ebp+var_4] +
pop edi  +
pop ebx  +
jmp loc_1015C4E  +
mov eax 80070057h +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+lpMem] 0 +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
test ebx ebx +
jz loc_1015D02  +
cmp word ptr [ebx] 0 +
jz loc_1015D02  +
mov eax ebx +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_1015C7F  +
mov edi ds:GetProcessHeap +
sub eax ecx +
sar eax 1 +
lea esi [eax+1] +
lea eax [esi+esi] +
push eax  +
push 8  +
call edi  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+lpMem] eax +
test eax eax +
jz loc_1015D10  +
push ebx  +
push esi  +
push eax  +
call sub_1011320  +
mov ebx eax +
test ebx ebx +
jge loc_1015D10  +
push [ebp+lpMem]  +
push 0  +
call edi  +
push eax  +
call ds:HeapFree  +
test eax eax +
jz loc_1015CD0  +
and [ebp+lpMem] 0 +
test ebx 10000000h +
jz loc_1015CEF  +
mov esi ds:RtlNtStatusToDosError +
push ebx  +
call esi  +
cmp eax 13Dh +
jz loc_1015D05  +
push ebx  +
call esi  +
mov ebx eax +
jmp loc_1015D05  +
mov eax ebx +
and eax 1FFF0000h +
cmp eax 70000h +
jnz loc_1015D05  +
movzx ebx bx +
jmp loc_1015D05  +
push 57h  +
pop ebx  +
test ebx ebx +
jz loc_1015D10  +
push ebx  +
call ds:SetLastError  +
mov eax [ebp+lpMem] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
xor edi edi +
cmp [ebp+arg_0] edi +
jnz loc_1015D38  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_1015DA8  +
mov eax [ebp+arg_4] +
test eax eax +
jnz loc_1015D44  +
mov eax offset Mem +
push esi  +
push eax  +
push [ebp+arg_0]  +
call sub_102B5C8  +
mov esi eax +
test esi esi +
jz loc_1015DA5  +
push 4  +
push offset a?  +
push esi  +
call ds:wcsncmp  +
add esp 0Ch +
test eax eax +
jz loc_1015D8D  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1015D6E  +
sub eax edx +
sar eax 1 +
cmp eax 0F8h +
jb loc_1015D8D  +
push 0  +
push esi  +
call sub_101509B  +
jmp loc_1015D93  +
push esi  +
call sub_1015C58  +
push esi  +
push 0  +
mov edi eax +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax edi +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
xor esi esi +
xor ebx ebx +
mov [ebp+var_4] esi +
mov [ebp+var_8] 1 +
cmp [ebp+arg_0] esi +
jz loc_1015EBA  +
cmp [ebp+arg_4] esi +
jz loc_1015EBA  +
push edi  +
push esi  +
push [ebp+arg_0]  +
call sub_1015D1F  +
mov edi eax +
cmp edi esi +
jz loc_1015DFA  +
push 5Ch  +
push edi  +
call ds:wcsrchr  +
pop ecx  +
pop ecx  +
mov ebx eax +
jmp loc_1015E19  +
call ds:GetLastError  +
cmp eax esi +
jle loc_1015E0E  +
and eax 0FFFFh +
or eax 80070000h +
cmp eax esi +
mov [ebp+var_4] eax +
jl loc_1015EA1  +
cmp [ebp+var_8] esi +
jz loc_1015E95  +
cmp [ebp+var_4] esi +
mov [ebp+var_8] esi +
jl loc_1015E4F  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
push edi  +
call ds:GetVolumeInformationW  +
test eax eax +
jnz loc_1015E4F  +
call ds:GetLastError  +
cmp eax esi +
jle loc_1015E4C  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_4] eax +
cmp [ebp+var_4] 80070090h +
jz loc_1015E6A  +
cmp [ebp+var_4] 80070002h +
jz loc_1015E6A  +
cmp [ebp+var_4] 80070003h +
jnz loc_1015E90  +
xor eax eax +
push 5Ch  +
push edi  +
mov [ebx] ax +
call ds:wcsrchr  +
mov ebx eax +
pop ecx  +
pop ecx  +
cmp ebx esi +
jz loc_1015E90  +
xor eax eax +
mov [ebx+2] ax +
mov [ebp+var_4] esi +
mov [ebp+var_8] 1 +
cmp [ebp+var_4] esi +
jge loc_1015E19  +
cmp [ebp+var_4] esi +
jl loc_1015EA1  +
mov eax [ebp+arg_4] +
mov [eax] edi +
xor edi edi +
cmp edi esi +
jz loc_1015EB4  +
push edi  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax [ebp+var_4] +
pop edi  +
jmp loc_1015EBF  +
mov eax 80070057h +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
xor esi esi +
mov [ebp+FileSystemFlags] esi +
cmp [ebp+arg_4] esi +
jz loc_1015F2B  +
lea eax [ebp+lpMem] +
push eax  +
push [ebp+arg_4]  +
mov [ebp+lpMem] esi +
call sub_1015DB2  +
cmp eax esi +
jl loc_1015F13  +
push esi  +
push esi  +
lea eax [ebp+FileSystemFlags] +
push eax  +
push esi  +
push esi  +
push esi  +
push esi  +
push [ebp+lpMem]  +
call ds:GetVolumeInformationW  +
cmp eax esi +
jz loc_1015F13  +
lea eax [ebp+FileSystemFlags] +
push eax  +
push esi  +
push [ebp+arg_0]  +
call sub_1019AE7  +
cmp [ebp+lpMem] esi +
jz loc_1015F38  +
push [ebp+lpMem]  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
jmp loc_1015F38  +
lea eax [ebp+FileSystemFlags] +
push eax  +
push esi  +
push [ebp+arg_0]  +
call sub_101965B  +
mov eax [ebp+FileSystemFlags] +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 428h +
mov eax dword_1049010 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor ebx ebx +
mov esi 204h +
push esi  +
lea eax [ebp+var_208] +
push ebx  +
push eax  +
mov [ebp+var_424] ebx +
mov [ebp+dwBytes] ebx +
call memset  +
push esi  +
lea eax [ebp+var_410] +
push ebx  +
push eax  +
mov dword ptr [ebp+PathName] ebx +
call memset  +
add esp 18h +
push edi  +
mov [ebp+var_428] 104h +
mov [ebp+dwErrCode] ebx +
mov [ebp+var_418] ebx +
call sub_1019699  +
cmp eax 0FEEDF001h +
jnz loc_1015FCC  +
mov esi [ebp+arg_4] +
cmp esi ebx +
jz loc_1015FCC  +
push edi  +
call sub_101958B  +
cmp esi eax +
jbe loc_1015FDB  +
mov [ebp+dwErrCode] 57h +
jmp loc_1016115  +
push ebx  +
push esi  +
push edi  +
call sub_101A142  +
mov [ebp+var_418] eax +
cmp eax ebx +
jz loc_1016121  +
push edi  +
call sub_10198F1  +
test eax eax +
jns loc_1016121  +
lea eax [ebp+var_428] +
push eax  +
lea eax [ebp+PathName] +
push eax  +
push edi  +
call sub_101ACA2  +
mov edi ds:GetLastError +
test eax eax +
jz loc_10160DE  +
xor eax eax +
cmp ax [ebp+PathName] +
jz loc_10160DE  +
lea eax [ebp+dwBytes] +
push eax  +
push ebx  +
push offset PrefixString  +
lea eax [ebp+PathName] +
push eax  +
call ds:GetTempFileNameW  +
test eax eax +
jz loc_10160DE  +
or [ebp+hFile] 0FFFFFFFFh +
lea eax [ebp+hFile] +
push eax  +
lea eax [ebp+dwBytes] +
push eax  +
push esi  +
push [ebp+var_418]  +
call sub_101E491  +
test eax eax +
jz loc_10160B2  +
push [ebp+hFile]  +
push [ebp+var_418]  +
call sub_101F98B  +
mov esi eax +
mov [ebp+var_424] esi +
cmp esi ebx +
jz loc_10160B2  +
push esi  +
push [ebp+var_418]  +
call sub_10199DA  +
test eax eax +
jnz loc_10160BA  +
push esi  +
call sub_101EF07  +
mov [ebp+var_424] ebx +
jmp loc_10160BA  +
call edi  +
mov [ebp+dwErrCode] eax +
cmp [ebp+hFile] 0FFFFFFFFh +
jz loc_10160CF  +
push [ebp+hFile]  +
call ds:CloseHandle  +
lea eax [ebp+dwBytes] +
push eax  +
call ds:DeleteFileW  +
jmp loc_10160E8  +
mov [ebp+dwErrCode] 660h +
cmp [ebp+var_424] ebx +
jnz loc_101610D  +
push [ebp+var_418]  +
call sub_101ABFF  +
test eax eax +
jnz loc_1016107  +
call edi  +
mov [ebp+dwErrCode] eax +
mov [ebp+var_418] ebx +
cmp [ebp+dwErrCode] ebx +
jz loc_1016121  +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_418] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010796  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_1016160  +
cmp [ebp+arg_4] 0 +
jz loc_1016160  +
push [ebp+arg_4]  +
call sub_101EF07  +
push 0  +
push [ebp+arg_0]  +
call sub_10199DA  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push edi  +
mov edi ds:CloseHandle +
jmp loc_10161A3  +
lea ecx [ebp+var_4] +
push ecx  +
push eax  +
call sub_1015767  +
test eax eax +
jl loc_10161D3  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_10161D3  +
cmp dword ptr [eax+4] 0FFFFFFFFh +
jz loc_10161A3  +
push dword ptr [eax+4]  +
call edi  +
mov eax [ebp+var_4] +
or dword ptr [eax+4] 0FFFFFFFFh +
mov eax [esi+20h] +
test eax eax +
jnz loc_101617C  +
jmp loc_10161D3  +
lea ecx [ebp+var_4] +
push ecx  +
push eax  +
call sub_1015767  +
test eax eax +
jl loc_10161DA  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_10161DA  +
cmp dword ptr [eax+4] 0FFFFFFFFh +
jz loc_10161D3  +
push dword ptr [eax+4]  +
call edi  +
mov eax [ebp+var_4] +
or dword ptr [eax+4] 0FFFFFFFFh +
mov eax [esi+10h] +
test eax eax +
jnz loc_10161AC  +
mov eax [esi+1Ch] +
push ebx  +
mov ebx ds:WaitForSingleObject +
test eax eax +
jz loc_10161F2  +
push 0FFFFFFFFh  +
push eax  +
call ebx  +
push dword ptr [esi+1Ch]  +
call edi  +
mov eax [esi+0Ch] +
test eax eax +
jz loc_1016203  +
push 0FFFFFFFFh  +
push eax  +
call ebx  +
push dword ptr [esi+0Ch]  +
call edi  +
lea eax [esi+10h] +
cmp dword ptr [eax] 0 +
pop ebx  +
jz loc_1016212  +
push eax  +
call sub_1015823  +
lea eax [esi+20h] +
cmp dword ptr [eax] 0 +
jz loc_1016220  +
push eax  +
call sub_1015823  +
mov eax [esi+18h] +
test eax eax +
jz loc_101622A  +
push eax  +
call edi  +
mov eax [esi+8] +
test eax eax +
jz loc_1016234  +
push eax  +
call edi  +
push 0  +
push [ebp+arg_0]  +
call sub_1019857  +
push esi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
xor eax eax +
pop edi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
push edi  +
xor edi edi +
push edi  +
push [ebp+arg_0]  +
mov esi eax +
call sub_1015ECA  +
test al 10h +
jz loc_10162FE  +
push edi  +
lea eax [ebp+BytesReturned] +
push eax  +
push 2  +
lea eax [ebp+OutBuffer] +
push eax  +
push edi  +
push edi  +
shr esi 0Ah +
and esi 2 +
push 9003Ch  +
push [ebp+hDevice]  +
mov [ebp+InBuffer] esi +
mov esi ds:DeviceIoControl +
mov [ebp+OutBuffer] edi +
call esi  +
test eax eax +
jz loc_10162FE  +
mov ax word ptr [ebp+OutBuffer] +
cmp ax word ptr [ebp+InBuffer] +
jz loc_10162FE  +
push edi  +
lea eax [ebp+BytesReturned] +
push eax  +
push edi  +
push edi  +
push 2  +
lea eax [ebp+InBuffer] +
push eax  +
push 9C040h  +
push [ebp+hDevice]  +
call esi  +
test eax eax +
jnz loc_10162FE  +
call ds:GetLastError  +
cmp eax edi +
jle loc_10162DF  +
and eax 0FFFFh +
or eax 80070000h +
push 0EC6h  +
push offset aRestorefilecom  +
mov edi eax +
push edi  +
push offset aErrorSettingCo  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
push 1  +
call sub_1015538  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
push edi  +
push 0Ah  +
pop ecx  +
xor eax eax +
lea edi [ebp+var_34] +
stos   +
mov [ebp+var_4] 8000FFFFh +
pop edi  +
test edx edx +
jz loc_1016339  +
and edx 3127h +
or edx 80h +
mov [ebp+var_14] edx +
test esi esi +
jz loc_1016348  +
mov eax [esi] +
mov [ebp+var_34] eax +
mov eax [esi+4] +
mov [ebp+var_30] eax +
test ebx ebx +
jz loc_1016357  +
mov eax [ebx] +
mov [ebp+var_2C] eax +
mov eax [ebx+4] +
mov [ebp+var_28] eax +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_1016369  +
mov ecx [eax] +
mov eax [eax+4] +
mov [ebp+var_24] ecx +
mov [ebp+var_20] eax +
push 4  +
push 28h  +
lea eax [ebp+var_34] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
push [ebp+arg_0]  +
call ds:NtSetInformationFile  +
test eax eax +
jge loc_1016389  +
cmp eax 0C000000Dh +
jnz loc_101638D  +
and [ebp+var_4] 0 +
mov eax [ebp+var_4] +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 48h +
push ebx  +
push esi  +
xor esi esi +
push edi  +
mov edi ecx +
mov ebx eax +
mov eax [edi+48h] +
mov [ebp+var_8] esi +
mov [ebp+var_20] esi +
mov [ebp+bOwnerDefaulted] esi +
mov [ebp+bGroupDefaulted] esi +
mov [ebp+bDaclDefaulted] esi +
mov [ebp+bDaclPresent] esi +
mov [ebp+bSaclDefaulted] esi +
mov [ebp+bSaclPresent] esi +
mov [ebp+psidOowner] esi +
mov [ebp+psidGroup] esi +
mov [ebp+pDacl] esi +
mov [ebp+pSacl] esi +
mov [ebp+dwRevision] esi +
mov dword ptr [ebp+pControl] esi +
mov [ebp+var_C] esi +
cmp eax esi +
jz loc_1016645  +
cmp [eax] esi +
jz loc_1016645  +
lea eax [ebp+var_20] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_0]  +
call sub_101965B  +
test byte ptr [ebp+var_20] 8 +
jz loc_1016645  +
mov eax [edi+10h] +
and eax 10h +
jz loc_1016416  +
test byte ptr [ebp+var_8] 10h +
jnz loc_1016645  +
cmp eax esi +
jnz loc_1016424  +
test byte ptr [ebp+var_8] 20h +
jnz loc_1016645  +
mov eax [edi+48h] +
mov edi [eax] +
lea eax [ebp+bOwnerDefaulted] +
push eax  +
lea eax [ebp+psidOowner] +
push eax  +
push edi  +
call ds:GetSecurityDescriptorOwner  +
test eax eax +
jz loc_101660E  +
lea eax [ebp+bGroupDefaulted] +
push eax  +
lea eax [ebp+psidGroup] +
push eax  +
push edi  +
call ds:GetSecurityDescriptorGroup  +
test eax eax +
jz loc_101660E  +
lea eax [ebp+bDaclDefaulted] +
push eax  +
lea eax [ebp+pDacl] +
push eax  +
lea eax [ebp+bDaclPresent] +
push eax  +
push edi  +
call ds:GetSecurityDescriptorDacl  +
test eax eax +
jz loc_101660E  +
lea eax [ebp+bSaclDefaulted] +
push eax  +
lea eax [ebp+pSacl] +
push eax  +
lea eax [ebp+bSaclPresent] +
push eax  +
push edi  +
call ds:GetSecurityDescriptorSacl  +
test eax eax +
jz loc_101660E  +
lea eax [ebp+dwRevision] +
push eax  +
lea eax [ebp+pControl] +
push eax  +
push edi  +
call ds:GetSecurityDescriptorControl  +
test eax eax +
jz loc_101660E  +
cmp [ebp+bDaclPresent] esi +
jz loc_10164D1  +
cmp [ebp+pDacl] esi +
jz loc_10164D1  +
test dword ptr [ebp+pControl] 1000h +
jz loc_10164BE  +
mov ebx 80000004h +
jmp loc_10164D4  +
neg ebx  +
sbb ebx ebx +
and ebx 60000000h +
add ebx 20000004h +
mov [ebp+var_C] ebx +
mov ebx [ebp+var_C] +
cmp [ebp+bSaclPresent] esi +
jz loc_10165B1  +
cmp [ebp+pSacl] esi +
jz loc_10165B1  +
mov eax dword_1049A74 +
or ebx 8 +
cmp eax esi +
jnz loc_1016506  +
push offset aNtdll_dll  +
call ds:LoadLibraryW  +
mov dword_1049A74 eax +
cmp eax esi +
jz loc_101651F  +
cmp dword_1049A78 esi +
jnz loc_1016527  +
push offset aRtlfindacebyty  +
push eax  +
call ds:GetProcAddress  +
mov dword_1049A78 eax +
cmp dword_1049A78 esi +
jz loc_1016595  +
push esi  +
mov [ebp+pAclInformation] esi +
xor eax eax +
lea edi [ebp+var_44] +
stos   +
push 11h  +
push [ebp+pSacl]  +
stos   +
call dword_1049A78  +
test eax eax +
jz loc_1016595  +
push 2  +
push 0Ch  +
lea eax [ebp+pAclInformation] +
push eax  +
push [ebp+pSacl]  +
or ebx 10h +
call ds:GetAclInformation  +
test eax eax +
jz loc_1016564  +
cmp [ebp+pAclInformation] 1 +
jnz loc_1016595  +
and ebx 0FFFFFFF7h +
jmp loc_1016595  +
call ds:GetLastError  +
cmp eax esi +
jle loc_1016578  +
and eax 0FFFFh +
or eax 80070000h +
push 1003h  +
push offset aRestoresecurit  +
push eax  +
push offset aGetaclinfoFail  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
push 1  +
call sub_1015538  +
test bl 8 +
jz loc_10165B1  +
test dword ptr [ebp+pControl] 2000h +
jz loc_10165AB  +
or ebx 40000000h +
jmp loc_10165B1  +
or ebx 10000000h +
cmp [ebp+psidOowner] esi +
jz loc_10165B9  +
or ebx 1 +
cmp [ebp+psidGroup] esi +
jz loc_10165C1  +
or ebx 2 +
push [ebp+pSacl]  +
push [ebp+pDacl]  +
push [ebp+psidGroup]  +
push [ebp+psidOowner]  +
push ebx  +
push 1  +
push [ebp+handle]  +
call ds:SetSecurityInfo  +
cmp eax esi +
jle loc_10165E7  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
cmp edi esi +
jge loc_101660A  +
push 1037h  +
push offset aRestoresecurit  +
push edi  +
push offset aSetsecurityinf  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
push 1  +
call sub_1015538  +
mov eax edi +
jmp loc_1016647  +
call ds:GetLastError  +
cmp eax esi +
jle loc_1016622  +
and eax 0FFFFh +
or eax 80070000h +
push 0FC0h  +
push offset aRestoresecurit  +
mov esi eax +
push esi  +
push offset aGetsecuritydes  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
push 1  +
call sub_1015538  +
mov eax esi +
jmp loc_1016647  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_8] +
push ebx  +
push esi  +
mov esi [eax+4Ch] +
push edi  +
xor edi edi +
xor ebx ebx +
cmp esi edi +
jz loc_101679A  +
push edi  +
push [ebp+arg_0]  +
call sub_1015ECA  +
test eax 40000h +
jz loc_101679A  +
push 80h  +
push dword ptr [ebp+lpFileName]  +
call ds:SetFileAttributesW  +
cmp esi edi +
jz loc_1016787  +
mov [ebp+lpMem] edi +
mov eax [esi] +
mov [ebp+dwBytes] edi +
cmp [eax] di +
jz loc_10166C0  +
push eax  +
push dword ptr [ebp+lpFileName]  +
lea eax [ebp+lpMem] +
push offset aSS_0  +
push eax  +
call sub_101160D  +
add esp 10h +
mov [ebp+arg_C] edi +
jmp loc_10166E1  +
cmp [ebp+arg_C] edi +
jz loc_10166E3  +
mov eax [ebp+arg_C] +
cmp dword ptr [eax] 0FFFFFFFFh +
jz loc_10166E3  +
push dword ptr [ebp+lpFileName]  +
lea eax [ebp+lpMem] +
push offset aS  +
push eax  +
call sub_101160D  +
add esp 0Ch +
mov ebx eax +
cmp ebx edi +
jl loc_1016749  +
cmp [ebp+lpMem] edi +
jz loc_1016712  +
push edi  +
push [ebp+lpMem]  +
call sub_101509B  +
mov [ebp+dwBytes] eax +
cmp eax edi +
jnz loc_1016712  +
call ds:GetLastError  +
cmp eax edi +
jle loc_1016710  +
and eax 0FFFFh +
or eax 80070000h +
mov ebx eax +
cmp ebx edi +
jl loc_1016749  +
cmp [ebp+dwBytes] edi +
jz loc_1016749  +
push edi  +
push [ebp+arg_C]  +
lea eax [esi+10h] +
push edi  +
push [ebp+dwBytes]  +
push eax  +
push [ebp+arg_0]  +
call sub_101E358  +
test eax eax +
jnz loc_1016749  +
call ds:GetLastError  +
cmp eax edi +
jle loc_1016747  +
and eax 0FFFFh +
or eax 80070000h +
mov ebx eax +
cmp [ebp+lpMem] edi +
jz loc_1016766  +
push [ebp+lpMem]  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
test eax eax +
jz loc_1016766  +
mov [ebp+lpMem] edi +
cmp [ebp+dwBytes] edi +
jz loc_101677C  +
push [ebp+dwBytes]  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp ebx edi +
mov esi [esi+24h] +
jge loc_1016691  +
mov eax [ebp+arg_8] +
push dword ptr [eax+10h]  +
push dword ptr [ebp+lpFileName]  +
call ds:SetFileAttributesW  +
mov eax ebx +
jmp loc_101679C  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
xor ecx ecx +
xor eax eax +
push esi  +
push edi  +
lea edi [ebp-8] +
mov [ebp-0Ch] ecx +
stos   +
mov [ebp-20h] ecx +
lea edi [ebp-1Ch] +
stos   +
stos   +
stos   +
stos   +
mov edi [ebp+10h] +
mov [ebp-4] ecx +
cmp edi ecx +
jz loc_1016841  +
mov edx [edi] +
cmp edx ecx +
jz loc_1016841  +
mov esi [ebp+0Ch] +
cmp esi ecx +
jz loc_1016841  +
mov ecx [esi+8] +
sub ecx [esi+10h] +
mov eax [esi+0Ch] +
sbb eax [esi+14h] +
push ebx  +
mov ebx [ebp-8] +
cmp ebx eax +
jl loc_10167FD  +
jg loc_10167F8  +
cmp edx ecx +
jbe loc_10167FD  +
mov [ebp-8] eax +
mov [edi] ecx +
mov eax [esi+10h] +
mov [ebp-18h] eax +
mov eax [esi+14h] +
mov [ebp-14h] eax +
lea eax [ebp-20h] +
push eax  +
push dword ptr [edi]  +
xor ebx ebx +
push dword ptr [ebp+8]  +
mov [ebp-20h] ebx +
push dword ptr [esi]  +
mov [ebp-1Ch] ebx +
mov [ebp-10h] ebx +
call sub_101FCCF  +
test eax eax +
jz loc_1016832  +
mov eax [edi] +
add [esi+10h] eax +
adc [esi+14h] ebx +
jmp loc_101683B  +
call ds:GetLastError  +
mov [ebp-4] eax +
mov eax [ebp-4] +
pop ebx  +
jmp loc_1016846  +
mov eax 0C000000Dh +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push ebx  +
push esi  +
xor ecx ecx +
push edi  +
mov edi eax +
mov eax [ebp+arg_4] +
mov [ebp+var_4] ecx +
mov [ebp+var_18] ecx +
mov [ebp+var_14] 1 +
mov [ebp+var_10] ecx +
mov [ebp+lpMem] ecx +
cmp eax ecx +
jz loc_1016881  +
mov eax [eax] +
mov [ebp+hObject] eax +
jmp loc_1016885  +
or [ebp+hObject] 0FFFFFFFFh +
test byte ptr [edi+10h] 10h +
mov ebx 0FFFFh +
mov esi 80070000h +
jz loc_10168D2  +
push [ebp+lpFileName]  +
mov [ebp+var_14] 3 +
call ds:GetFileAttributesW  +
cmp eax 0FFFFFFFFh +
jnz loc_10168D2  +
push 0  +
push [ebp+lpFileName]  +
call ds:CreateDirectoryW  +
test eax eax +
jnz loc_10168D2  +
call ds:GetLastError  +
test eax eax +
jle loc_10168C7  +
and eax ebx +
or eax esi +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1016996  +
cmp [ebp+hObject] 0FFFFFFFFh +
jnz loc_1016920  +
push [ebp+arg_0]  +
call sub_101A106  +
push eax  +
call sub_101FCF0  +
mov [ebp+lpMem] eax +
test eax eax +
jz loc_101690F  +
push 0  +
lea ecx [ebp+hObject] +
push ecx  +
push 0  +
push eax  +
add edi 14h +
push edi  +
push [ebp+arg_0]  +
call sub_101E358  +
test eax eax +
jz loc_101690F  +
mov [ebp+var_18] 1 +
jmp loc_1016920  +
call ds:GetLastError  +
test eax eax +
jle loc_101691D  +
and eax ebx +
or eax esi +
mov [ebp+var_4] eax +
cmp [ebp+var_4] 0 +
jl loc_1016996  +
push 0  +
push [ebp+arg_0]  +
call sub_1015ECA  +
test eax 20000h +
jz loc_1016996  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+var_14]  +
push [ebp+lpFileName]  +
call ds:OpenEncryptedFileRawW  +
test eax eax +
jnz loc_101698D  +
lea edi [ebp+var_28] +
stos   +
stos   +
stos   +
stos   +
mov eax [ebp+hObject] +
lea ecx [ebp+var_28] +
push ecx  +
push eax  +
mov [ebp+var_30] eax +
call ds:GetFileSizeEx  +
push [ebp+var_10]  +
lea eax [ebp+var_30] +
push eax  +
push offset loc_10167A8  +
call ds:WriteEncryptedFileRaw  +
test eax eax +
jz loc_1016982  +
jle loc_101697F  +
and eax ebx +
or eax esi +
mov [ebp+var_4] eax +
push [ebp+var_10]  +
call ds:CloseEncryptedFileRaw  +
jmp loc_1016996  +
jle loc_1016993  +
and eax ebx +
or eax esi +
mov [ebp+var_4] eax +
cmp [ebp+hObject] 0FFFFFFFFh +
mov edi ds:CloseHandle +
jz loc_10169AD  +
cmp [ebp+var_18] 0 +
jz loc_10169AD  +
push [ebp+hObject]  +
call edi  +
cmp [ebp+lpMem] 0 +
jz loc_10169CE  +
push [ebp+lpMem]  +
call ds:DeleteFileW  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp [ebp+var_4] 0 +
jl loc_1016A1B  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_1016A1B  +
mov eax [eax] +
cmp eax 0FFFFFFFFh +
jz loc_10169E5  +
push eax  +
call edi  +
push 0  +
push 2200000h  +
push 3  +
push 0  +
push 7  +
push 11E0100h  +
push [ebp+lpFileName]  +
call ds:CreateFileW  +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1016A1B  +
call ds:GetLastError  +
test eax eax +
jle loc_1016A18  +
and eax ebx +
or eax esi +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [eax+50h] +
push edi  +
xor ebx ebx +
xor edi edi +
cmp esi ebx +
jz loc_1016A8C  +
push ebx  +
push [ebp+BytesReturned]  +
call sub_1015ECA  +
test eax 10000h +
jz loc_1016A8C  +
push ebx  +
lea eax [ebp+BytesReturned] +
push eax  +
push ebx  +
push ebx  +
push 40h  +
push esi  +
push 90098h  +
push [ebp+hDevice]  +
mov [ebp+BytesReturned] ebx +
call ds:DeviceIoControl  +
test eax eax +
jnz loc_1016A8C  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1016A80  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
cmp edi 800700B7h +
jnz loc_1016A8C  +
xor edi edi +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push edi  +
push [ebp+lpFileName]  +
xor eax eax +
mov word ptr [ebp+var_8] ax +
lea edi [ebp+var_8+2] +
stos   +
stos   +
call ds:GetFileAttributesW  +
cmp eax 0FFFFFFFFh +
jz loc_1016AC5  +
push [ebp+lpFileName]  +
call sub_10153F7  +
xor edi edi +
push edi  +
push edi  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+lpFileName]  +
call ds:RtlDosPathNameToNtPathName_U  +
test al al +
jz loc_1016BC8  +
movzx eax word ptr [ebp+var_8] +
push ebx  +
mov ebx ds:GetProcessHeap +
push esi  +
add eax 10h +
push eax  +
push 8  +
call ebx  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
cmp esi edi +
jz loc_1016B7A  +
mov [ebp+var_10] edi +
xor eax eax +
lea edi [ebp+var_C] +
stos   +
movzx eax word ptr [ebp+var_8] +
push eax  +
push [ebp+var_4]  +
lea eax [esi+0Ch] +
push eax  +
call ds:__imp_memmove  +
mov byte ptr [esi] 0 +
xor edi edi +
mov [esi+4] edi +
movzx eax word ptr [ebp+var_8] +
mov [esi+8] eax +
movzx eax word ptr [ebp+var_8] +
add esp 0Ch +
push 0Bh  +
add eax 10h +
push eax  +
push esi  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+arg_8]  +
call ds:NtSetInformationFile  +
cmp eax edi +
jge loc_1016B6C  +
push 13F5h  +
push offset aRestorehardlin  +
or eax 10000000h +
mov edi eax +
push edi  +
push offset aSettingHardlin  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push 1  +
call sub_1015538  +
push esi  +
push 0  +
call ebx  +
push eax  +
call ds:HeapFree  +
jmp loc_1016BAD  +
call ds:GetLastError  +
cmp eax edi +
jle loc_1016B8E  +
and eax 0FFFFh +
or eax 80070000h +
push 13FFh  +
push offset aRestorehardlin  +
mov edi eax +
push edi  +
push offset aMallocFailed  +
push [ebp+lpFileName]  +
push [ebp+arg_0]  +
push 1  +
call sub_1015538  +
push [ebp+var_4]  +
mov eax large fs:18h +
mov eax [eax+30h] +
push 0  +
push dword ptr [eax+18h]  +
call ds:RtlFreeHeap  +
pop esi  +
pop ebx  +
jmp loc_1016BEC  +
push 1409h  +
push offset aRestorehardlin  +
mov eax 80070003h +
push eax  +
push offset aConvertingToNt  +
push [ebp+lpFileName]  +
mov edi eax +
push [ebp+arg_0]  +
push 1  +
call sub_1015538  +
test edi edi +
jl loc_1016BF4  +
xor eax eax +
jmp loc_1016BF6  +
mov eax edi +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
mov eax dword_1049010 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_34] 0 +
push esi  +
push edi  +
push 0Ah  +
pop ecx  +
xor eax eax +
and [ebp+BytesReturned] eax +
push 24h  +
lea edi [ebp+var_2C] +
stos   +
pop eax  +
push edx  +
mov [ebp+var_38] edx +
mov [ebp+InBuffer] 80000008h +
mov word ptr [ebp+var_2C] ax +
call sub_1019A60  +
mov esi eax +
lea edi [ebp+var_28] +
movs   +
movs   +
movs   +
push 5  +
pop ecx  +
movs   +
lea esi [ebx+0Ch] +
lea edi [ebp+var_18] +
movs   +
xor esi esi +
push esi  +
lea eax [ebp+BytesReturned] +
push eax  +
push esi  +
push esi  +
push 2Ch  +
lea eax [ebp+InBuffer] +
push eax  +
push 900A4h  +
push dword ptr [ebx+4]  +
call ds:DeviceIoControl  +
test eax eax +
jnz loc_1016CAA  +
call ds:GetLastError  +
cmp eax esi +
jle loc_1016C85  +
and eax 0FFFFh +
or eax 80070000h +
push 14CDh  +
push offset aRestoremountst  +
push eax  +
push offset aRestoremount_0  +
push dword ptr [ebx+8]  +
mov [ebp+var_34] eax +
push [ebp+var_38]  +
push 1  +
call sub_1015538  +
cmp [ebp+var_34] esi +
jl loc_1016CE8  +
mov eax [ebx] +
or dword ptr [ebx+20h] 2 +
push esi  +
push 1  +
add eax 14h +
push eax  +
push [ebp+var_38]  +
call sub_101D093  +
cmp eax esi +
jz loc_1016CE8  +
test byte ptr [eax+0Fh] 4 +
mov ecx [eax+18h] +
mov edx [eax+1Ch] +
jz loc_1016CDE  +
mov esi [eax+8] +
mov eax [eax+0Ch] +
and eax 0FFFFFFh +
add ecx esi +
adc edx eax +
push edx  +
push ecx  +
push [ebp+var_38]  +
call sub_101A384  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_34] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1010796  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi eax +
xor eax eax +
test edx edx +
jz loc_1016D11  +
cmp edx [ebp+arg_4] +
jbe loc_1016D16  +
mov eax 80070057h +
test eax eax +
jl loc_1016D24  +
mov eax [ebp+arg_0] +
call sub_102CA0D  +
jmp loc_1016D27  +
and dword ptr [edi] 0 +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
xor esi esi +
mov [ebp+var_4] esi +
cmp [ebp+arg_0] esi +
jz loc_1016D5C  +
push esi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
call sub_101965B  +
test eax eax +
jz loc_1016D5C  +
mov eax [ebp+var_4] +
test [ebp+arg_4] eax +
jz loc_1016D5C  +
inc esi  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
xor esi esi +
mov [ebp+var_4] esi +
cmp [ebp+arg_0] esi +
jz loc_1016D9F  +
push esi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
call sub_101965B  +
test eax eax +
jz loc_1016D9F  +
mov eax [ebp+arg_4] +
or [ebp+var_4] eax +
push esi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
call sub_1019AE7  +
mov esi eax +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push ebx  +
jz loc_1016E49  +
push [ebp+arg_0]  +
call sub_1019699  +
cmp eax 0FEEDF002h +
jnz loc_1016E49  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jz loc_1016E49  +
cmp [ebp+arg_8] 2Ch +
jnz loc_1016E49  +
cmp dword ptr [ebx] 80000008h +
jnz loc_1016E42  +
push 24h  +
pop eax  +
cmp ax [ebx+4] +
jnz loc_1016E42  +
push esi  +
push edi  +
push [ebp+arg_0]  +
call sub_1019A60  +
push 10h  +
mov edi eax +
pop ecx  +
lea esi [ebx+8] +
xor eax eax +
cmps   +
pop edi  +
pop esi  +
jz loc_1016E07  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_1016E42  +
push [ebp+arg_0]  +
call sub_1019933  +
test eax eax +
jz loc_1016E39  +
add ebx 18h +
push ebx  +
push eax  +
call sub_10202F8  +
test eax eax +
jz loc_1016E32  +
mov ecx [ebp+arg_C] +
xor edx edx +
test ecx ecx +
jz loc_1016E3E  +
mov [ecx] eax +
jmp loc_1016E3E  +
mov edx 80070002h +
jmp loc_1016E3E  +
mov edx 80070032h +
mov eax edx +
jmp loc_1016E4E  +
mov eax 8007000Dh +
jmp loc_1016E4E  +
mov eax 80070057h +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
push edi  +
xor edi edi +
mov esi eax +
mov [ebp+var_8] edi +
mov [ebp+var_4] 1 +
cmp esi edi +
jz loc_1016E78  +
mov eax [esi+8] +
jmp loc_1016E7B  +
mov eax [ebp+arg_4] +
push edi  +
lea ecx [ebp+var_4] +
push ecx  +
push eax  +
push 9479h  +
push [ebp+arg_0]  +
call sub_1014D12  +
mov [ebp+var_8] eax +
cmp eax edi +
jnz loc_1016EAC  +
cmp [ebp+var_4] edi +
jnz loc_1016EAC  +
cmp esi edi +
jz loc_1016EA5  +
or dword ptr [esi+20h] 10001000h +
mov eax 800704C7h +
jmp loc_1016EF1  +
cmp eax 0FFFFFFFFh +
jnz loc_1016EC2  +
push 8  +
push [ebp+arg_0]  +
call sub_1016D68  +
mov eax 800704D3h +
jmp loc_1016EF1  +
test [ebp+arg_C] 80h +
jz loc_1016EEF  +
cmp esi edi +
jz loc_1016ED0  +
mov eax [esi] +
jmp loc_1016ED3  +
mov eax [ebp+arg_8] +
cmp esi edi +
jz loc_1016EDC  +
mov esi [esi+8] +
jmp loc_1016EDF  +
mov esi [ebp+arg_4] +
lea ecx [ebp+var_8] +
push ecx  +
push eax  +
push esi  +
push [ebp+arg_0]  +
call sub_10159D1  +
mov edi eax +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
test [ebp+arg_4] 8 +
jz loc_1016F3B  +
push edi  +
push [ebp+BytesReturned]  +
call sub_1017739  +
mov esi eax +
test esi esi +
jge loc_1016F3B  +
push 8C7h  +
push offset aRestorefilemet  +
push esi  +
push offset aRestorefilem_0  +
push dword ptr [edi+8]  +
push [ebp+BytesReturned]  +
push 1  +
call sub_1015538  +
jmp loc_10170A2  +
test [ebp+arg_4] 7 +
push ebx  +
jz loc_1016FA8  +
mov ecx dword ptr [ebp+arg_4] +
and ecx 4 +
jz loc_1016F51  +
mov eax [edi] +
add eax 40h +
jmp loc_1016F53  +
xor eax eax +
test ecx ecx +
jz loc_1016F5E  +
mov ebx [edi] +
add ebx 38h +
jmp loc_1016F60  +
xor ebx ebx +
test ecx ecx +
jz loc_1016F6B  +
mov esi [edi] +
add esi 30h +
jmp loc_1016F6D  +
xor esi esi +
test [ebp+arg_4] 1 +
jz loc_1016F7A  +
mov ecx [edi] +
mov edx [ecx+10h] +
jmp loc_1016F7C  +
xor edx edx +
push eax  +
push dword ptr [edi+4]  +
call sub_101630B  +
mov esi eax +
test esi esi +
jge loc_1016FB0  +
push 8DAh  +
push offset aRestorefilemet  +
push esi  +
push offset aRestorefilem_1  +
push dword ptr [edi+8]  +
push [ebp+BytesReturned]  +
push 1  +
call sub_1015538  +
test esi esi +
jl loc_10170A1  +
mov bl [ebp+arg_4] +
test bl 2 +
jz loc_1016FD1  +
mov eax [edi] +
test dword ptr [eax+10h] 4000h +
jnz loc_1016FD1  +
push dword ptr [eax+8]  +
push dword ptr [edi+8]  +
push dword ptr [edi+4]  +
call sub_1015B6E  +
test esi esi +
jl loc_10170A1  +
test bl 1 +
jz loc_1016FF8  +
test bl 40h +
jz loc_1016FF8  +
push dword ptr [edi+8]  +
mov eax [edi] +
push dword ptr [edi+4]  +
mov eax [eax+10h] +
push [ebp+BytesReturned]  +
call sub_101625A  +
mov esi eax +
test esi esi +
jl loc_10170A1  +
test bl 10h +
jz loc_1017062  +
mov eax [edi] +
cmp dword ptr [eax+50h] 0 +
jz loc_1017062  +
push dword ptr [edi+4]  +
push [ebp+BytesReturned]  +
call sub_1016A2A  +
mov esi eax +
test esi esi +
jge loc_1017066  +
test esi 10000000h +
jz loc_101703B  +
mov ebx ds:RtlNtStatusToDosError +
push esi  +
call ebx  +
cmp eax 13Dh +
jz loc_101704C  +
push esi  +
call ebx  +
jmp loc_101704E  +
mov eax esi +
and eax 1FFF0000h +
cmp eax 70000h +
movzx eax si +
jz loc_101704E  +
mov eax esi +
xor esi esi +
push esi  +
push eax  +
push dword ptr [edi+8]  +
push 9487h  +
push [ebp+BytesReturned]  +
call sub_1014D12  +
test esi esi +
jl loc_10170A1  +
test [ebp+arg_4] 20h +
jz loc_10170A1  +
push dword ptr [edi+8]  +
mov ecx [edi] +
push dword ptr [edi+4]  +
xor eax eax +
push [ebp+BytesReturned]  +
call sub_1016399  +
mov esi eax +
test esi esi +
jge loc_10170A1  +
push 922h  +
push offset aRestorefilemet  +
push esi  +
push offset aRestoresecur_0  +
push dword ptr [edi+8]  +
push [ebp+BytesReturned]  +
push 1  +
call sub_1015538  +
pop ebx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
xor eax eax +
mov [ebp+var_20] ebx +
lea edi [ebp+var_1C] +
stos   +
mov [ebp+dwBytes] ecx +
mov [ebp+lpMem] ebx +
stos   +
mov [ebp+var_10] ebx +
cmp ecx ebx +
jnz loc_10170E3  +
push ebx  +
push ebx  +
call sub_101509B  +
mov [ebp+lpMem] eax +
cmp eax ebx +
jz loc_10170E3  +
mov [ebp+dwBytes] eax +
push ebx  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+BytesReturned]  +
call sub_101965B  +
mov edi [ebp+var_10] +
push 80h  +
push [ebp+dwBytes]  +
and edi 1000000h +
mov [ebp+var_14] edi +
call ds:SetFileAttributesW  +
or [ebp+arg_8] 1 +
push ebx  +
push 2200000h  +
push 3  +
push ebx  +
push 7  +
push 0C10D0000h  +
push [ebp+dwBytes]  +
call ds:CreateFileW  +
mov [ebp+handle] eax +
cmp eax 0FFFFFFFFh +
jz loc_1017289  +
mov edi [ebp+arg_4] +
xor esi esi +
test byte ptr [ebp+arg_8] 7 +
jz loc_10171A3  +
test byte ptr [ebp+arg_8] 1 +
jz loc_1017149  +
mov edx [edi+10h] +
jmp loc_101714B  +
xor edx edx +
mov esi [ebp+arg_8] +
and esi 4 +
mov ecx esi +
neg ecx  +
sbb ecx ecx +
lea ebx [edi+40h] +
and ecx ebx +
mov ebx esi +
push ecx  +
neg ebx  +
sbb ebx ebx +
lea ecx [edi+38h] +
and ebx ecx +
neg esi  +
lea ecx [edi+30h] +
sbb esi esi +
and esi ecx +
push eax  +
call sub_101630B  +
mov esi eax +
test esi esi +
jge loc_10171A1  +
push 997h  +
push offset aRestoredirmeta  +
push esi  +
push offset aRestoredirme_0  +
push [ebp+dwBytes]  +
push [ebp+BytesReturned]  +
push 1  +
call sub_1015538  +
xor ebx ebx +
jmp loc_101727B  +
xor ebx ebx +
test byte ptr [ebp+arg_8] 2 +
jz loc_10171C0  +
test dword ptr [edi+10h] 4000h +
jnz loc_10171C0  +
push dword ptr [edi+8]  +
push [ebp+dwBytes]  +
push [ebp+handle]  +
call sub_1015B6E  +
cmp esi ebx +
jl loc_101727B  +
test byte ptr [ebp+arg_8] 1 +
jz loc_10171E7  +
test byte ptr [ebp+arg_8] 40h +
jz loc_10171E7  +
push [ebp+dwBytes]  +
mov eax [edi+10h] +
push [ebp+handle]  +
push [ebp+BytesReturned]  +
call sub_101625A  +
mov esi eax +
cmp esi ebx +
jl loc_101727B  +
test byte ptr [ebp+arg_8] 10h +
jz loc_1017257  +
cmp [edi+50h] ebx +
jz loc_1017257  +
push [ebp+handle]  +
mov eax edi +
push [ebp+BytesReturned]  +
call sub_1016A2A  +
mov esi eax +
cmp esi ebx +
jge loc_101725B  +
test esi 10000000h +
jz loc_1017230  +
mov ebx ds:RtlNtStatusToDosError +
push esi  +
call ebx  +
cmp eax 13Dh +
jnz loc_1017229  +
xor ebx ebx +
jmp loc_1017241  +
push esi  +
call ebx  +
xor ebx ebx +
jmp loc_1017243  +
mov eax esi +
and eax 1FFF0000h +
cmp eax 70000h +
movzx eax si +
jz loc_1017243  +
mov eax esi +
push ebx  +
push eax  +
push [ebp+dwBytes]  +
push 9487h  +
push [ebp+BytesReturned]  +
call sub_1014D12  +
xor esi esi +
cmp esi ebx +
jl loc_101727B  +
test byte ptr [ebp+arg_8] 20h +
jz loc_101727B  +
xor eax eax +
cmp [edi+60h] ebx +
jnz loc_1017269  +
inc eax  +
push [ebp+dwBytes]  +
mov ecx edi +
push [ebp+handle]  +
push [ebp+BytesReturned]  +
call sub_1016399  +
mov esi eax +
push [ebp+handle]  +
call ds:CloseHandle  +
mov edi [ebp+var_14] +
jmp loc_101729F  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_101729D  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
cmp esi ebx +
jge loc_10172C0  +
push 9FCh  +
push offset aRestoredirmeta  +
push esi  +
push offset aErrorRestoring  +
push [ebp+dwBytes]  +
push [ebp+BytesReturned]  +
push 2  +
call sub_1015538  +
cmp edi ebx +
jz loc_101730A  +
mov eax 80070020h +
cmp esi eax +
jnz loc_101735B  +
cmp [ebp+var_20] ebx +
jnz loc_10172EB  +
mov [ebp+var_1C] 4 +
mov esi 3E8h +
mov [ebp+var_20] 1 +
jmp loc_10172EE  +
mov esi [ebp+dwMilliseconds] +
mov ecx [ebp+var_1C] +
dec [ebp+var_1C]  +
test ecx ecx +
jz loc_1017314  +
push esi  +
call ds:Sleep  +
lea eax [esi+esi] +
mov [ebp+dwMilliseconds] eax +
jmp loc_101710E  +
cmp esi 80070020h +
jnz loc_101735B  +
mov eax esi +
cmp edi ebx +
jnz loc_1017339  +
push 0A0Fh  +
push offset aRestoredirmeta  +
push eax  +
push offset aErrorRestori_0  +
push [ebp+dwBytes]  +
push [ebp+BytesReturned]  +
push 2  +
call sub_1015538  +
xor esi esi +
jmp loc_101735B  +
push 0A14h  +
push offset aRestoredirmeta  +
push eax  +
push offset aErrorRestoring  +
push [ebp+dwBytes]  +
push [ebp+BytesReturned]  +
push 1  +
call sub_1015538  +
mov esi 0C1420135h +
cmp [ebp+lpMem] ebx +
jz loc_1017371  +
push [ebp+lpMem]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpCriticalSection] 0 +
jz loc_1017393  +
push [ebp+lpCriticalSection]  +
call ds:EnterCriticalSection  +
push ebx  +
push esi  +
push edi  +
push [ebp+lpFileName]  +
call sub_102B542  +
mov edi ds:RtlNtStatusToDosError +
mov ebx 947Fh +
test eax eax +
jnz loc_101740F  +
push 0  +
push [ebp+lpFileName]  +
call ds:CreateDirectoryW  +
test eax eax +
jnz loc_101740F  +
call ds:GetLastError  +
test eax eax +
jle loc_10173D0  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
test esi 10000000h +
jz loc_10173E9  +
push esi  +
call edi  +
cmp eax 13Dh +
jz loc_10173FA  +
push esi  +
call edi  +
jmp loc_10173FC  +
mov eax esi +
and eax 1FFF0000h +
cmp eax 70000h +
movzx eax si +
jz loc_10173FC  +
mov eax esi +
push 0  +
push eax  +
push [ebp+lpFileName]  +
push ebx  +
push [ebp+BytesReturned]  +
call sub_1014D12  +
test esi esi +
jl loc_1017465  +
mov ecx [ebp+lpFileName] +
push 0FFFFFFFFh  +
push [ebp+arg_4]  +
push [ebp+BytesReturned]  +
call sub_10170AE  +
mov esi eax +
test esi esi +
jge loc_1017465  +
test esi 10000000h +
jz loc_101743C  +
push esi  +
call edi  +
cmp eax 13Dh +
jz loc_101744D  +
push esi  +
call edi  +
jmp loc_101744F  +
mov eax esi +
and eax 1FFF0000h +
cmp eax 70000h +
movzx eax si +
jz loc_101744F  +
mov eax esi +
push 0  +
push eax  +
push [ebp+lpFileName]  +
push ebx  +
push [ebp+BytesReturned]  +
call sub_1014D12  +
cmp eax 0FFFFFFFEh +
jnz loc_1017465  +
xor esi esi +
cmp [ebp+lpCriticalSection] 0 +
jz loc_1017474  +
push [ebp+lpCriticalSection]  +
call ds:LeaveCriticalSection  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
mov eax dword_1049010 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
push edi  +
mov esi offset a?_0 +
lea edi [ebp+var_10] +
movs   +
mov [ebp+lpFileName] eax +
mov eax [ebp+arg_C] +
xor edx edx +
movs   +
mov [ebp+var_24] eax +
mov eax [ebp+arg_14] +
mov [ebp+BytesReturned] ecx +
mov [ebp+lpCriticalSection] eax +
mov [ebp+var_14] edx +
mov [ebp+var_20] edx +
movs   +
mov [ebp+var_38] edx +
mov [ebp+var_34] edx +
cmp eax edx +
jz loc_10174DD  +
push ecx  +
call sub_1019C4C  +
mov [ebp+var_14] eax +
test eax eax +
jl loc_10174FE  +
cmp ebx [ebp+var_24] +
jnz loc_10174FE  +
test byte ptr [ebp+arg_10] 8 +
jnz loc_10174FE  +
push [ebp+lpCriticalSection]  +
and dword ptr [ebx+10h] 0FFFFFFF9h +
push [ebp+lpFileName]  +
push ebx  +
push [ebp+BytesReturned]  +
call sub_101737F  +
mov [ebp+var_14] eax +
mov eax [ebp+arg_10] +
and eax 1000000h +
mov [ebp+var_30] eax +
jz loc_101755B  +
mov eax [ebp+var_24] +
push dword ptr [eax]  +
call ds:lstrlenW  +
mov esi [ebp+var_24] +
mov [ebp+var_20] eax +
push 4  +
lea eax [ebp+var_10] +
push eax  +
push dword ptr [esi]  +
call ds:wcsncmp  +
add esp 0Ch +
test eax eax +
jnz loc_1017538  +
mov [ebp+var_38] 1 +
cmp [ebp+var_20] 0 +
jbe loc_1017550  +
mov eax [esi] +
mov edx [ebp+var_20] +
push 5Ch  +
pop ecx  +
cmp cx [eax+edx*2-2] +
jnz loc_1017550  +
dec [ebp+var_20]  +
push [ebp+BytesReturned]  +
call sub_1019933  +
mov [ebp+var_34] eax +
mov eax [ebx+70h] +
jmp loc_1017630  +
mov edi [ebp+var_1C] +
test edi edi +
jz loc_101763D  +
push edi  +
push [ebp+BytesReturned]  +
call sub_101C45B  +
test eax eax +
jnz loc_101762A  +
push edi  +
push [ebp+BytesReturned]  +
call sub_101C4EF  +
mov esi eax +
test esi esi +
jz loc_101759F  +
push dword ptr [edi]  +
push [ebp+lpFileName]  +
call sub_1015D1F  +
mov [esi+8] eax +
test eax eax +
jnz loc_10175B6  +
call ds:GetLastError  +
test eax eax +
jle loc_10175B3  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_14] eax +
cmp [ebp+var_14] 0 +
jl loc_101762A  +
cmp [ebp+var_30] 0 +
jz loc_101762A  +
cmp [ebp+var_38] 0 +
mov eax [esi+8] +
mov ecx [ebp+var_20] +
lea edi [eax+ecx*2] +
jnz loc_10175E8  +
push 4  +
lea ecx [ebp+var_10] +
push ecx  +
push eax  +
call ds:wcsncmp  +
add esp 0Ch +
test eax eax +
jnz loc_10175E8  +
add edi 8 +
lea eax [esi+0Ch] +
push eax  +
push edi  +
mov [ebp+var_3C] eax +
call ds:lstrlenW  +
add eax eax +
push eax  +
push edi  +
call sub_101FE24  +
test eax eax +
jz loc_1017613  +
push esi  +
push [ebp+var_3C]  +
push [ebp+var_34]  +
call sub_102027D  +
test eax eax +
jnz loc_101762A  +
call ds:GetLastError  +
test eax eax +
jle loc_1017627  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_14] eax +
mov eax [ebp+var_1C] +
mov eax [eax+64h] +
cmp [ebp+var_14] 0 +
mov [ebp+var_1C] eax +
jge loc_1017563  +
cmp [ebp+var_14] 0 +
mov esi [ebx+68h] +
jl loc_10176FF  +
test esi esi +
jz loc_10176F9  +
push dword ptr [esi]  +
xor ebx ebx +
push [ebp+lpFileName]  +
call sub_1015D1F  +
mov edi eax +
test edi edi +
jz loc_101771E  +
cmp [ebp+var_14] ebx +
jl loc_10176DC  +
mov eax [ebp+arg_10] +
mov [ebp+var_1C] eax +
and [ebp+var_1C] 8 +
jnz loc_101769C  +
cmp [ebp+var_30] ebx +
jnz loc_101769C  +
push eax  +
push esi  +
push edi  +
push [ebp+BytesReturned]  +
xor eax eax +
call sub_1016E58  +
mov ebx eax +
test ebx ebx +
jge loc_101769C  +
cmp ebx 800704C7h +
jz loc_101769C  +
mov [ebp+var_14] ebx +
cmp [ebp+var_14] 0 +
jl loc_10176DC  +
test ebx ebx +
jl loc_10176BC  +
cmp [ebp+var_1C] 0 +
jnz loc_10176BC  +
push [ebp+lpCriticalSection]  +
push edi  +
push esi  +
push [ebp+BytesReturned]  +
call sub_101737F  +
mov [ebp+var_14] eax +
cmp [ebp+var_14] 0 +
jl loc_10176DC  +
test ebx ebx +
jl loc_10176DC  +
push [ebp+lpCriticalSection]  +
push [ebp+arg_10]  +
push [ebp+var_24]  +
push esi  +
push edi  +
push [ebp+BytesReturned]  +
call sub_1017482  +
mov [ebp+var_14] eax +
push edi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp [ebp+var_14] 0 +
mov esi [esi+64h] +
jge loc_101764A  +
cmp [ebp+var_14] 0 +
jge loc_101770A  +
push [ebp+var_14]  +
push [ebp+BytesReturned]  +
call sub_1019C71  +
mov eax [ebp+var_14] +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010796  +
leave   +
retn 18h  +
call ds:GetLastError  +
test eax eax +
jle loc_101770D  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_101770D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
xor ebx ebx +
and [ebp+var_C] ebx +
xor eax eax +
lea edi [ebp+var_8] +
stos   +
mov eax [esi+24h] +
test eax eax +
jz loc_101789B  +
mov eax [eax+8] +
test eax eax +
jz loc_101789B  +
cmp [esi+28h] ebx +
jnz loc_1017779  +
cmp esi eax +
jz loc_101789B  +
mov edi eax +
test edi edi +
jz loc_1017896  +
mov eax [edi+20h] +
test al 4 +
jz loc_1017889  +
test eax 10000000h +
jnz loc_1017889  +
mov eax [edi] +
mov ecx [esi] +
mov edx [eax+54h] +
cmp edx [ecx+54h] +
jnz loc_1017889  +
mov eax [eax+58h] +
cmp eax [ecx+58h] +
jnz loc_1017889  +
push dword ptr [edi+8]  +
push dword ptr [esi+4]  +
push dword ptr [esi+8]  +
push [ebp+BytesReturned]  +
call sub_1016A9A  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1017889  +
push 0  +
push 2200000h  +
push 3  +
push 0  +
push 7  +
push 11E0100h  +
push dword ptr [edi+8]  +
call ds:CreateFileW  +
mov [edi+4] eax +
cmp eax 0FFFFFFFFh +
jz loc_1017810  +
push 7  +
push [ebp+BytesReturned]  +
call sub_1016EFC  +
push dword ptr [edi+4]  +
mov [ebp+var_4] eax +
call ds:CloseHandle  +
or dword ptr [edi+4] 0FFFFFFFFh +
jmp loc_1017827  +
call ds:GetLastError  +
test eax eax +
jle loc_1017824  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_4] eax +
cmp [ebp+var_4] 0 +
jl loc_1017889  +
or dword ptr [edi+20h] 10000003h +
test ebx ebx +
jnz loc_1017873  +
mov eax [esi] +
push ebx  +
push 1  +
add eax 14h +
push eax  +
push [ebp+BytesReturned]  +
call sub_101D093  +
mov ebx eax +
test ebx ebx +
jz loc_1017881  +
test byte ptr [ebx+0Fh] 4 +
mov eax [ebx+18h] +
mov [ebp+var_C] eax +
mov eax [ebx+1Ch] +
mov [ebp+var_8] eax +
jz loc_1017873  +
mov ecx [ebx+0Ch] +
mov eax [ebx+8] +
and ecx 0FFFFFFh +
add [ebp+var_C] eax +
adc [ebp+var_8] ecx +
push [ebp+var_8]  +
push [ebp+var_C]  +
push [ebp+BytesReturned]  +
call sub_101A384  +
push [ebp+BytesReturned]  +
call sub_10151C1  +
cmp [ebp+var_4] 0 +
mov edi [edi+28h] +
jge loc_101777B  +
mov eax [ebp+var_4] +
jmp loc_101789D  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi 7FFFFFFFh +
push esi  +
push edi  +
lea eax [ebp+arg_0] +
call sub_1016CFE  +
test eax eax +
jl loc_10178DF  +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_4] +
push esi  +
sub edx eax +
lea ecx [edi+eax*2] +
mov eax [ebp+arg_8] +
push 0  +
call sub_1011133  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
push 7FFFFFFFh  +
push esi  +
lea eax [ebp+arg_0] +
call sub_1016CFE  +
test eax eax +
jl loc_1017930  +
cmp [ebp+arg_C] 7FFFFFFEh +
jbe loc_1017918  +
mov eax 80070057h +
jmp loc_1017930  +
mov eax [ebp+arg_0] +
push [ebp+arg_C]  +
mov edx [ebp+arg_4] +
sub edx eax +
lea ecx [esi+eax*2] +
mov eax [ebp+arg_8] +
push 0  +
call sub_1011133  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_8] +
test eax eax +
jz loc_101795C  +
mov edx [ebp+arg_4] +
cmp edx 7FFFFFFFh +
ja loc_101795C  +
call sub_102CA0D  +
jmp loc_1017961  +
mov eax 80070057h +
test eax eax +
jge loc_101796C  +
test edi edi +
jz loc_101796C  +
and dword ptr [edi] 0 +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+BytesReturned] +
push edi  +
xor edi edi +
mov [ebp+var_4] edi +
cmp esi edi +
jz loc_1017A0A  +
push esi  +
call sub_1019699  +
cmp eax 0FEEDF002h +
jnz loc_1017A0A  +
cmp [ebp+arg_10] edi +
jnz loc_1017A0A  +
mov ebx [ebp+arg_C] +
cmp ebx 0FFFFFFFFh +
jnz loc_10179AC  +
mov eax 80070006h +
jmp loc_1017A0F  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push esi  +
call sub_1016DAB  +
cmp eax edi +
jl loc_1017A0F  +
push edi  +
mov edi [ebp+var_4] +
push dword ptr [edi+8]  +
mov eax [edi] +
push ebx  +
add eax 14h +
push eax  +
push esi  +
call sub_101E405  +
test eax eax +
jz loc_10179F4  +
mov esi [edi+4] +
push ebx  +
call ds:FlushFileBuffers  +
push 4  +
push [ebp+BytesReturned]  +
mov [edi+4] ebx +
call sub_1016EFC  +
mov [edi+4] esi +
jmp loc_1017A0F  +
call ds:GetLastError  +
test eax eax +
jle loc_1017A0F  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1017A0F  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 6A0h +
mov eax dword_1049010 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov [ebp+var_624] eax +
mov eax [ebp+arg_4] +
push ebx  +
mov [ebp+var_648] eax +
mov eax [ebp+arg_8] +
push esi  +
push edi  +
mov [ebp+lpFileName] eax +
xor ebx ebx +
xor eax eax +
mov [ebp+Overlapped.Internal] ebx +
lea edi [ebp+Overlapped.InternalHigh] +
stos   +
stos   +
stos   +
push 30h  +
stos   +
lea eax [ebp+FileInformation.ftCreationTime] +
push ebx  +
push eax  +
mov [ebp+var_644] 1 +
mov [ebp+BytesReturned] ebx +
mov [ebp+var_64C] ebx +
mov [ebp+FileInformation.dwFileAttributes] ebx +
call memset  +
add esp 0Ch +
push [ebp+lpFileName]  +
xor esi esi +
mov [ebp+lpInBuffer] ebx +
call ds:GetFileAttributesW  +
cmp eax 0FFFFFFFFh +
jz loc_1017AFC  +
test al 10h +
jnz loc_1017AFC  +
push [ebp+lpFileName]  +
call sub_10153F7  +
test eax eax +
jnz loc_1017AFC  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1017AD0  +
and eax 0FFFFh +
or eax 80070000h +
push 11DDh  +
push offset aRestorereparse  +
mov esi eax +
push esi  +
push offset aDeletefileFail  +
push [ebp+lpFileName]  +
push [ebp+var_624]  +
push 1  +
call sub_1015538  +
mov eax esi +
jmp loc_1018274  +
mov eax [ebp+arg_C] +
test byte ptr [eax+10h] 10h +
mov edi ds:GetLastError +
jz loc_1017B56  +
push ebx  +
push [ebp+lpFileName]  +
call ds:CreateDirectoryW  +
test eax eax +
jnz loc_1017B56  +
call edi  +
cmp eax 0B7h +
jz loc_1017B50  +
call edi  +
cmp eax 5 +
jz loc_1017B50  +
call edi  +
cmp eax ebx +
jle loc_1017B3C  +
and eax 0FFFFh +
or eax 80070000h +
push 11EBh  +
push offset aRestorereparse  +
mov esi eax +
push esi  +
push offset aCreatedirector  +
jmp loc_1017AE2  +
mov [ebp+var_644] ebx +
push ebx  +
push 4A200000h  +
push 4  +
push ebx  +
push 7  +
push 0C10D0000h  +
push [ebp+lpFileName]  +
call ds:CreateFileW  +
mov [ebp+hObject] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1017BB7  +
call edi  +
cmp eax ebx +
jle loc_1017B8D  +
and eax 0FFFFh +
or eax 80070000h +
push 11FDh  +
push offset aRestorereparse  +
mov edi eax +
push edi  +
push offset aCreatefileFail  +
push [ebp+lpFileName]  +
push [ebp+var_624]  +
push 1  +
call sub_1015538  +
jmp loc_101820D  +
lea eax [ebp+FileInformation] +
push eax  +
mov eax [ebp+var_648] +
push dword ptr [eax]  +
call ds:GetFileInformationByHandle  +
test eax eax +
jnz loc_1017BF4  +
call edi  +
cmp eax ebx +
jle loc_1017BE0  +
and eax 0FFFFh +
or eax 80070000h +
push 1206h  +
push offset aRestorereparse  +
mov edi eax +
push edi  +
push offset aStat_Failed  +
jmp loc_1017B9F  +
mov eax [ebp+FileInformation.nFileSizeLow] +
add eax 8 +
movzx eax ax +
mov [ebp+var_62C] eax +
movzx eax ax +
push eax  +
push 8  +
mov [ebp+nInBufferSize] eax +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
mov [ebp+lpMem] esi +
cmp esi ebx +
jnz loc_1017C52  +
call edi  +
cmp eax ebx +
jle loc_1017C3B  +
and eax 0FFFFh +
or eax 80070000h +
push 1211h  +
push offset aRestorereparse  +
mov edi eax +
push edi  +
push offset aMallocFailed  +
jmp loc_1017B9F  +
mov eax [ebp+arg_C] +
mov ecx [eax+54h] +
mov [esi] ecx +
mov cx word ptr [ebp+FileInformation.nFileSizeLow] +
mov [esi+4] cx +
mov ax [eax+58h] +
mov [esi+6] ax +
mov eax [esi] +
cmp eax 0A0000003h +
jnz loc_1017C7C  +
cmp cx 0Ah +
jb loc_1017C89  +
cmp eax 0A000000Ch +
jnz loc_1017CB8  +
cmp cx 10h +
jnb loc_1017CB8  +
push 1223h  +
push offset aRestorereparse  +
mov eax 8007000Dh +
push eax  +
push offset aReparsePointTa  +
push [ebp+lpFileName]  +
mov edi eax +
push [ebp+var_624]  +
push 1  +
call sub_1015538  +
jmp loc_1018211  +
lea ecx [ebp+Overlapped] +
push ecx  +
movzx ecx word ptr [esi+4] +
push ecx  +
lea eax [esi+8] +
push eax  +
mov eax [ebp+var_648] +
push dword ptr [eax]  +
call sub_101FCCF  +
test eax eax +
jnz loc_1017D00  +
call edi  +
cmp eax ebx +
jle loc_1017CE9  +
and eax 0FFFFh +
or eax 80070000h +
push 122Fh  +
push offset aRestorereparse  +
mov edi eax +
push edi  +
push offset aReaddataRepars  +
jmp loc_1017B9F  +
push ebx  +
lea eax [ebp+var_64C] +
push eax  +
push [ebp+var_624]  +
call sub_101965B  +
push [ebp+var_624]  +
call sub_101A106  +
push eax  +
call sub_101987A  +
test al al +
jns loc_1018178  +
test [ebp+var_64C] 100h +
jnz loc_1018178  +
mov eax [ebp+arg_C] +
test dword ptr [eax+58h] 10000h +
jnz loc_1018178  +
mov eax [esi] +
cmp eax 0A0000003h +
jz loc_1017D6A  +
cmp eax 0A000000Ch +
jnz loc_1018178  +
test byte ptr [esi+10h] 1 +
jnz loc_1018178  +
xor eax eax +
mov edi 206h +
push edi  +
mov word ptr [ebp+var_414] ax +
lea eax [ebp+var_414+2] +
push ebx  +
push eax  +
call memset  +
xor eax eax +
push edi  +
mov word ptr [ebp+var_20C] ax +
lea eax [ebp+var_20C+2] +
push ebx  +
push eax  +
call memset  +
xor eax eax +
push edi  +
mov word ptr [ebp+var_61C] ax +
lea eax [ebp+var_61C+2] +
push ebx  +
push eax  +
call memset  +
add esp 24h +
push [ebp+var_624]  +
mov [ebp+var_638] ebx +
mov [ebp+var_640] ebx +
mov [ebp+var_634] ebx +
call sub_10199B4  +
push dword ptr [eax]  +
mov ebx 104h +
push ebx  +
lea eax [ebp+var_414] +
push eax  +
call sub_10178A9  +
lea eax [ebp+var_638] +
push eax  +
push ebx  +
lea eax [ebp+var_414] +
push eax  +
call sub_101793A  +
mov eax [ebp+var_638] +
push 5Ch  +
lea eax [ebp+eax*2-416h] +
pop ecx  +
cmp cx [eax] +
jnz loc_1017E16  +
xor ecx ecx +
mov [eax] cx +
cmp dword ptr [esi] 0A0000003h +
lea edi [esi+10h] +
jz loc_1017E24  +
lea edi [esi+14h] +
mov eax [ebp+lpMem] +
movzx esi word ptr [eax+8] +
movzx ecx word ptr [eax+0Ah] +
movzx edx word ptr [eax+0Ch] +
movzx eax word ptr [eax+0Eh] +
shr ecx 1 +
shr edx 1 +
shr eax 1 +
shr esi 1 +
mov [ebp+var_638] ecx +
mov [ebp+var_62C] edx +
mov [ebp+var_650] eax +
cmp ecx 5 +
jbe loc_1017F4C  +
cmp word ptr [edi+esi*2] 5Ch +
jnz loc_1017F4C  +
cmp word ptr [edi+esi*2+2] 3Fh +
jnz loc_1017F4C  +
cmp word ptr [edi+esi*2+4] 3Fh +
jnz loc_1017F4C  +
cmp word ptr [edi+esi*2+6] 5Ch +
jnz loc_1017F4C  +
cmp word ptr [edi+esi*2+0Ah] 3Ah +
jnz loc_1017F4C  +
push offset a??  +
push ebx  +
lea eax [ebp+var_20C] +
push eax  +
call sub_10178A9  +
test eax eax +
jl loc_1017F93  +
lea eax [ebp+var_414] +
push eax  +
push ebx  +
lea eax [ebp+var_20C] +
push eax  +
call sub_10178A9  +
test eax eax +
jl loc_1017F93  +
cmp [ebp+var_638] 7 +
jbe loc_1017F2C  +
mov eax [ebp+var_638] +
inc eax  +
push eax  +
lea eax [edi+esi*2+0Ch] +
push eax  +
push ebx  +
lea eax [ebp+var_20C] +
push eax  +
call sub_10178EA  +
test eax eax +
jge loc_1017F2C  +
push 12A6h  +
push offset aRestorereparse  +
mov eax 8007000Dh +
push eax  +
push offset aSubstitueNameS  +
push [ebp+lpFileName]  +
mov edi eax +
push [ebp+var_624]  +
push 1  +
call sub_1015538  +
mov esi [ebp+lpMem] +
xor ebx ebx +
jmp loc_1018211  +
lea eax [ebp+var_640] +
push eax  +
push ebx  +
lea eax [ebp+var_20C] +
push eax  +
call sub_101793A  +
mov edx [ebp+var_62C] +
mov eax [ebp+var_650] +
cmp eax 1 +
jbe loc_1017FF1  +
cmp word ptr [edi+edx*2+2] 3Ah +
jnz loc_1017FF1  +
lea eax [ebp+var_414] +
push eax  +
push ebx  +
lea eax [ebp+var_61C] +
push eax  +
call sub_10178A9  +
test eax eax +
jge loc_1017FAD  +
push 12C3h  +
push offset aRestorereparse  +
mov eax 8007000Dh +
push eax  +
push offset aPrintedNameStr  +
jmp loc_1017F0A  +
push 129Ch  +
push offset aRestorereparse  +
mov eax 8007000Dh +
push eax  +
push offset aSubstituteName  +
jmp loc_1017F0A  +
mov eax [ebp+var_650] +
cmp eax 3 +
jbe loc_1017FDD  +
inc eax  +
push eax  +
mov eax [ebp+var_62C] +
lea eax [edi+eax*2+4] +
push eax  +
push ebx  +
lea eax [ebp+var_61C] +
push eax  +
call sub_10178EA  +
test eax eax +
jge loc_1017FDD  +
push 12CDh  +
jmp loc_1017F7E  +
lea eax [ebp+var_634] +
push eax  +
push ebx  +
lea eax [ebp+var_61C] +
push eax  +
call sub_101793A  +
cmp [ebp+var_640] 0 +
jnz loc_1018007  +
cmp [ebp+var_634] 0 +
jz loc_101813F  +
mov eax [ebp+var_634] +
mov ecx [ebp+var_640] +
mov esi [ebp+lpMem] +
add ecx eax +
lea eax [ecx+ecx+4] +
movzx eax ax +
sub edi esi +
add edi eax +
mov [ebp+var_62C] eax +
movzx eax di +
push eax  +
push 8  +
mov [ebp+nInBufferSize] eax +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov ebx eax +
mov [ebp+lpInBuffer] ebx +
test ebx ebx +
jnz loc_1018097  +
call ds:GetLastError  +
test eax eax +
jle loc_1018065  +
and eax 0FFFFh +
or eax 80070000h +
push 12EBh  +
push offset aRestorereparse  +
mov edi eax +
push edi  +
push offset aMallocPrpFaile  +
push [ebp+lpFileName]  +
push [ebp+var_624]  +
push 1  +
call sub_1015538  +
mov esi [ebp+lpMem] +
xor ebx ebx +
jmp loc_101820D  +
mov eax [esi] +
mov [ebx] eax +
mov ax [esi+4] +
mov edx [ebx] +
mov [ebx+4] ax +
mov ax [esi+6] +
mov esi [ebp+lpMem] +
mov [ebx+6] ax +
lea eax [ebx+8] +
add esi 8 +
mov edi eax +
movs   +
mov ecx 0A0000003h +
movs   +
cmp edx ecx +
jnz loc_10180CA  +
movs   +
jmp loc_10180CC  +
movs   +
movs   +
lea esi [ebx+10h] +
cmp edx ecx +
jz loc_10180D6  +
lea esi [ebx+14h] +
mov edi [ebp+var_640] +
xor ecx ecx +
mov [eax] cx +
lea eax [edi+edi] +
mov [ebx+0Ah] ax +
add eax 2 +
mov [ebx+0Ch] ax +
mov eax [ebp+var_634] +
add eax eax +
mov [ebx+0Eh] ax +
lea eax [edi+1] +
push eax  +
lea ecx [ebp+var_20C] +
push ecx  +
push eax  +
push esi  +
call sub_101135A  +
test eax eax +
jl loc_101815E  +
mov eax [ebp+var_634] +
inc eax  +
push eax  +
lea ecx [ebp+var_61C] +
push ecx  +
push eax  +
lea eax [esi+edi*2+2] +
push eax  +
call sub_101135A  +
test eax eax +
jl loc_101815E  +
mov eax [ebp+var_62C] +
sub esi ebx +
lea eax [esi+eax-8] +
mov [ebx+4] ax +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov edi ds:GetLastError +
xor ebx ebx +
jmp loc_101819B  +
push 1309h  +
push offset aRestorereparse  +
mov eax 8007000Dh +
push eax  +
push offset aStringcchcopyn  +
jmp loc_1017F0A  +
test dword ptr [esi] 80000000h +
mov [ebp+lpInBuffer] esi +
jnz loc_101819B  +
mov eax [ebp+var_62C] +
push 18h  +
pop ecx  +
cmp cx ax +
ja loc_101819B  +
add eax 0FFFFFFE8h +
mov [esi+4] ax +
push ebx  +
lea eax [ebp+BytesReturned] +
push eax  +
push ebx  +
push ebx  +
push [ebp+nInBufferSize]  +
xor esi esi +
push [ebp+lpInBuffer]  +
push 900A4h  +
push [ebp+hObject]  +
call ds:DeviceIoControl  +
test eax eax +
jnz loc_10181EF  +
call edi  +
cmp eax ebx +
jle loc_10181D8  +
and eax 0FFFFh +
or eax 80070000h +
push 132Ah  +
push offset aRestorereparse  +
mov edi eax +
push edi  +
push offset aIoctlSettingRe  +
jmp loc_1017B9F  +
mov edi [ebp+var_648] +
push dword ptr [edi]  +
call ds:CloseHandle  +
mov eax [ebp+hObject] +
mov [edi] eax +
xor edi edi +
mov [ebp+var_644] ebx +
cmp edi ebx +
jge loc_1018226  +
cmp [ebp+hObject] 0FFFFFFFFh +
jz loc_1018226  +
push [ebp+hObject]  +
call ds:CloseHandle  +
mov eax [ebp+arg_C] +
test byte ptr [eax+10h] 10h +
jz loc_1018243  +
cmp [ebp+var_644] ebx +
jz loc_1018243  +
push [ebp+lpFileName]  +
call ds:RemoveDirectoryW  +
cmp esi ebx +
jz loc_1018256  +
push esi  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp [ebp+lpInBuffer] ebx +
jz loc_1018272  +
push [ebp+lpInBuffer]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax edi +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010796  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
mov ebx eax +
xor eax eax +
push esi  +
push edi  +
mov [ebp+lpMem] eax +
mov [ebp+var_C] eax +
mov [ebp+var_8] eax +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
push [ebp+arg_0]  +
call sub_101965B  +
mov eax [ebx] +
mov esi [eax+10h] +
mov edi esi +
and edi 400h +
jz loc_10182CE  +
test byte ptr [ebp+var_8] 80h +
jnz loc_10182CE  +
xor eax eax +
jmp loc_1018414  +
and esi 4000h +
mov [ebp+var_10] esi +
jz loc_10182E2  +
test [ebp+var_8] 20000h +
jz loc_10182C7  +
test byte ptr [ebx+20h] 2 +
jnz loc_1018397  +
lea esi [ebx+4] +
mov ecx [esi] +
cmp ecx 0FFFFFFFFh +
jz loc_1018343  +
test [ebp+var_C] 1000000h +
jz loc_101830D  +
test edi edi +
jnz loc_101830D  +
mov edx [ebp+arg_0] +
call sub_1016C00  +
jmp loc_101833F  +
push 1  +
push dword ptr [ebx+8]  +
add eax 14h +
push ecx  +
push eax  +
push [ebp+arg_0]  +
call sub_101E405  +
test eax eax +
jz loc_101832B  +
or dword ptr [ebx+20h] 2 +
xor esi esi +
jmp loc_101839D  +
call ds:GetLastError  +
test eax eax +
jle loc_101833F  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
jmp loc_1018399  +
test edi edi +
jnz loc_101834C  +
cmp [ebp+var_10] edi +
jz loc_1018367  +
push [ebp+arg_0]  +
call sub_101A106  +
push eax  +
call sub_101FCF0  +
mov [ebp+lpMem] eax +
test eax eax +
jnz loc_1018393  +
call ds:GetLastError  +
mov eax [ebx] +
mov ecx [eax+8] +
mov eax [ebp+lpMem] +
test eax eax +
jnz loc_1018376  +
mov eax [ebx+8] +
push 1  +
push esi  +
push ecx  +
push eax  +
mov eax [ebx] +
add eax 14h +
push eax  +
push [ebp+arg_0]  +
call sub_101E358  +
test eax eax +
jz loc_101832B  +
or dword ptr [ebx+20h] 3 +
jmp loc_1018327  +
xor ecx ecx +
jmp loc_101836C  +
xor esi esi +
test esi esi +
jl loc_10183F1  +
cmp [ebp+arg_4] 0 +
jz loc_10183F1  +
cmp [ebp+var_10] 0 +
jz loc_10183BC  +
push dword ptr [ebx+8]  +
lea eax [ebx+4] +
push eax  +
push [ebp+arg_0]  +
mov eax [ebx] +
call sub_1016851  +
jmp loc_10183D1  +
test edi edi +
jz loc_10183D3  +
push dword ptr [ebx]  +
lea eax [ebx+4] +
push dword ptr [ebx+8]  +
push eax  +
push [ebp+arg_0]  +
call sub_1017A1B  +
mov esi eax +
test esi esi +
jl loc_10183F1  +
mov eax [ebx] +
cmp dword ptr [eax+4Ch] 0 +
jz loc_10183F1  +
lea ecx [ebx+4] +
push ecx  +
push eax  +
push dword ptr [ebx+8]  +
push [ebp+arg_0]  +
call sub_1016653  +
mov esi eax +
cmp [ebp+lpMem] 0 +
jz loc_1018412  +
push [ebp+lpMem]  +
call ds:DeleteFileW  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push 1  +
push [ebp+BytesReturned]  +
mov edi eax +
call sub_101828A  +
mov ebx eax +
or esi 0FFFFFFFFh +
test ebx ebx +
jl loc_101844D  +
cmp [edi+4] esi +
jz loc_101844D  +
push esi  +
push [ebp+BytesReturned]  +
call sub_1016EFC  +
mov ebx eax +
mov eax [edi+4] +
cmp eax esi +
jz loc_101845E  +
push eax  +
call ds:CloseHandle  +
mov [edi+4] esi +
test ebx ebx +
jl loc_1018473  +
push [ebp+BytesReturned]  +
or dword ptr [edi+20h] 10000000h +
call sub_10151C1  +
jmp loc_10184BD  +
test ebx 10000000h +
jz loc_1018490  +
mov esi ds:RtlNtStatusToDosError +
push ebx  +
call esi  +
cmp eax 13Dh +
jz loc_10184A1  +
push ebx  +
call esi  +
jmp loc_10184A3  +
mov eax ebx +
and eax 1FFF0000h +
cmp eax 70000h +
movzx eax bx +
jz loc_10184A3  +
mov eax ebx +
push 0  +
push eax  +
push dword ptr [edi+8]  +
push 947Fh  +
push [ebp+BytesReturned]  +
call sub_1014D12  +
cmp eax 0FFFFFFFEh +
jnz loc_10184BD  +
xor ebx ebx +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
push dword ptr [ebx]  +
xor esi esi +
xor eax eax +
mov [ebp+Handles] esi +
lea edi [ebp+var_C] +
stos   +
mov [ebp+var_8] 1 +
mov [ebp+lpCriticalSection] esi +
call sub_101AC58  +
mov edi eax +
mov [ebp+arg_0] edi +
test edi edi +
jnz loc_101851B  +
call ds:GetLastError  +
test eax eax +
jle loc_10185F8  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_10185F8  +
mov eax [ebx+8] +
mov [ebp+Handles] eax +
mov eax [ebx+4] +
mov [ebp+var_C] eax +
cmp [ebp+var_8] 0 +
jz loc_101859B  +
push 0FFFFFFFFh  +
push 0  +
lea eax [ebp+Handles] +
push eax  +
push 2  +
call ds:WaitForMultipleObjects  +
test eax eax +
jnz loc_1018544  +
and [ebp+var_8] eax +
push edi  +
call sub_1019C4C  +
mov esi eax +
jmp loc_1018589  +
mov eax [ebx+10h] +
lea ecx [ebp+lpCriticalSection] +
push ecx  +
push eax  +
call sub_1015767  +
mov esi eax +
test esi esi +
jl loc_101858D  +
cmp [ebp+lpCriticalSection] 0 +
jz loc_101858D  +
push edi  +
call sub_1019C4C  +
mov esi eax +
test esi esi +
jl loc_1018582  +
mov eax [ebp+lpCriticalSection] +
push edi  +
call sub_1018420  +
mov esi eax +
test esi esi +
jge loc_101854E  +
push esi  +
push edi  +
call sub_1019C71  +
test esi esi +
jge loc_101854E  +
cmp esi 80070103h +
jnz loc_1018597  +
xor esi esi +
test esi esi +
jge loc_1018527  +
mov eax [ebp+lpCriticalSection] +
mov edi ds:CloseHandle +
test eax eax +
jz loc_10185BA  +
cmp dword ptr [eax+4] 0FFFFFFFFh +
jz loc_10185BA  +
push dword ptr [eax+4]  +
call edi  +
mov eax [ebp+lpCriticalSection] +
or dword ptr [eax+4] 0FFFFFFFFh +
test esi esi +
jge loc_10185EE  +
jmp loc_10185E7  +
lea ecx [ebp+lpCriticalSection] +
push ecx  +
push eax  +
call sub_1015767  +
test eax eax +
jl loc_10185EE  +
mov eax [ebp+lpCriticalSection] +
test eax eax +
jz loc_10185EE  +
cmp dword ptr [eax+4] 0FFFFFFFFh +
jz loc_10185E7  +
push dword ptr [eax+4]  +
call edi  +
mov eax [ebp+lpCriticalSection] +
or dword ptr [eax+4] 0FFFFFFFFh +
mov eax [ebx+10h] +
test eax eax +
jnz loc_10185C0  +
push [ebp+arg_0]  +
call sub_101ABFF  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
push dword ptr [ebx]  +
xor esi esi +
xor eax eax +
mov [ebp+Handles] esi +
lea edi [ebp+var_C] +
stos   +
mov [ebp+var_8] 1 +
mov [ebp+lpCriticalSection] esi +
call sub_101AC58  +
xor edi edi +
mov [ebp+arg_0] eax +
cmp eax edi +
jnz loc_1018654  +
call ds:GetLastError  +
cmp eax edi +
jle loc_10187B6  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_10187B6  +
mov eax [ebx+18h] +
mov [ebp+Handles] eax +
mov eax [ebx+14h] +
mov [ebp+var_C] eax +
cmp [ebp+var_8] edi +
jz loc_1018759  +
push 0FFFFFFFFh  +
push edi  +
lea eax [ebp+Handles] +
push eax  +
push 2  +
call ds:WaitForMultipleObjects  +
test eax eax +
jnz loc_101867F  +
mov [ebp+var_8] edi +
push [ebp+arg_0]  +
call sub_1019C4C  +
mov esi eax +
cmp esi edi +
jl loc_1018747  +
mov eax [ebx+20h] +
lea ecx [ebp+lpCriticalSection] +
push ecx  +
push eax  +
call sub_1015767  +
mov esi eax +
cmp esi edi +
jl loc_1018747  +
cmp [ebp+lpCriticalSection] edi +
jz loc_1018747  +
push [ebp+arg_0]  +
call sub_1019C4C  +
mov esi eax +
cmp esi edi +
jl loc_10186E8  +
mov eax [ebp+lpCriticalSection] +
push edi  +
push [ebp+arg_0]  +
call sub_101828A  +
mov esi eax +
cmp esi edi +
jl loc_10186E8  +
push [ebp+lpCriticalSection]  +
mov eax [ebx+10h] +
push eax  +
call sub_1015658  +
mov esi eax +
cmp esi edi +
jl loc_10186E8  +
mov [ebp+lpCriticalSection] edi +
jmp loc_1018691  +
test esi 10000000h +
jz loc_1018707  +
push esi  +
call ds:RtlNtStatusToDosError  +
cmp eax 13Dh +
jz loc_1018718  +
push esi  +
call ds:RtlNtStatusToDosError  +
jmp loc_101871A  +
mov eax esi +
and eax 1FFF0000h +
cmp eax 70000h +
movzx eax si +
jz loc_101871A  +
mov eax esi +
push edi  +
push eax  +
mov eax [ebp+lpCriticalSection] +
push dword ptr [eax+8]  +
push 947Fh  +
push [ebp+arg_0]  +
call sub_1014D12  +
cmp eax 0FFFFFFFEh +
jnz loc_1018736  +
xor esi esi +
cmp esi edi +
jge loc_1018691  +
push esi  +
push [ebp+arg_0]  +
call sub_1019C71  +
cmp esi 80070103h +
jnz loc_1018751  +
xor esi esi +
cmp esi edi +
jge loc_1018660  +
mov eax [ebp+lpCriticalSection] +
cmp eax edi +
mov edi ds:CloseHandle +
jz loc_1018778  +
cmp dword ptr [eax+4] 0FFFFFFFFh +
jz loc_1018778  +
push dword ptr [eax+4]  +
call edi  +
mov eax [ebp+lpCriticalSection] +
or dword ptr [eax+4] 0FFFFFFFFh +
test esi esi +
jge loc_10187AC  +
jmp loc_10187A5  +
lea ecx [ebp+lpCriticalSection] +
push ecx  +
push eax  +
call sub_1015767  +
test eax eax +
jl loc_10187AC  +
mov eax [ebp+lpCriticalSection] +
test eax eax +
jz loc_10187AC  +
cmp dword ptr [eax+4] 0FFFFFFFFh +
jz loc_10187A5  +
push dword ptr [eax+4]  +
call edi  +
mov eax [ebp+lpCriticalSection] +
or dword ptr [eax+4] 0FFFFFFFFh +
mov eax [ebx+20h] +
test eax eax +
jnz loc_101877E  +
push [ebp+arg_0]  +
call sub_101ABFF  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push edi  +
push [ebp+BytesReturned]  +
xor ebx ebx +
mov [ebp+var_4] ebx +
mov [ebp+var_10] ebx +
call sub_101983A  +
mov edi eax +
test byte ptr [edi+28h] 80h +
mov [ebp+var_C] edi +
jz loc_10187EE  +
mov [ebp+var_10] 1 +
cmp dword ptr [edi+2Ch] 1 +
jbe loc_1018807  +
push [ebp+BytesReturned]  +
call sub_1019C4C  +
cmp eax ebx +
mov [ebp+var_4] eax +
jl loc_1018A7B  +
push esi  +
mov esi [ebp+arg_4] +
jmp loc_1018A2A  +
cmp esi ebx +
jz loc_101883F  +
test byte ptr [esi+20h] 5 +
jnz loc_1018A27  +
push dword ptr [edi+24h]  +
mov eax esi +
push ebx  +
push ebx  +
push [ebp+BytesReturned]  +
call sub_1016E58  +
cmp eax ebx +
jge loc_1018892  +
cmp eax 800704C7h +
jz loc_1018A27  +
mov [ebp+var_4] eax +
cmp [ebp+var_4] ebx +
mov esi [ebp+arg_4] +
mov edi 100h +
jl loc_1018A56  +
cmp esi ebx +
jz loc_1018A51  +
mov eax [esi+20h] +
test eax edi +
jnz loc_1018A45  +
test al 4 +
jnz loc_1018A45  +
test al 1 +
jz loc_1018A45  +
or eax edi +
mov [esi+20h] eax +
mov eax [ebp+var_C] +
mov eax [eax+20h] +
cmp eax ebx +
jz loc_1018A38  +
push esi  +
push eax  +
call sub_1015658  +
jmp loc_1018A42  +
cmp [ebp+var_4] ebx +
jl loc_10189D1  +
cmp [ebp+var_10] ebx +
jz loc_10188E3  +
mov eax [esi] +
test dword ptr [eax+10h] 400h +
jnz loc_10188E3  +
cmp [eax+54h] ebx +
jnz loc_10188B5  +
cmp [eax+58h] ebx +
jz loc_10188E3  +
mov ecx [ebp+arg_4] +
cmp [ecx+28h] ebx +
jz loc_10188E3  +
test byte ptr [ecx+20h] 1 +
jz loc_10188D9  +
mov edx [ecx] +
mov edi [edx+54h] +
cmp edi [eax+54h] +
jnz loc_10188D9  +
mov edx [edx+58h] +
cmp edx [eax+58h] +
jz loc_101895F  +
mov ecx [ecx+28h] +
cmp ecx ebx +
jnz loc_10188BD  +
mov [ebp+var_4] ebx +
cmp [ebp+var_4] ebx +
jl loc_10189D1  +
test byte ptr [esi+20h] 4 +
jnz loc_10189CC  +
mov eax [esi] +
test dword ptr [eax+10h] 4400h +
mov [ebp+lpMem] ebx +
mov edi 4A200000h +
jz loc_101893A  +
push [ebp+BytesReturned]  +
mov edi 4E200100h +
call sub_101A106  +
push eax  +
call sub_101FCF0  +
mov [ebp+lpMem] eax +
cmp eax ebx +
jnz loc_101893A  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1018937  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_4] eax +
cmp [ebp+var_4] ebx +
jl loc_10189B6  +
mov eax [esi] +
push ebx  +
push 1  +
add eax 14h +
push eax  +
push [ebp+BytesReturned]  +
call sub_101D093  +
cmp eax ebx +
jz loc_10189AF  +
mov ecx [ebp+lpMem] +
cmp ecx ebx +
jz loc_1018968  +
xor edx edx +
jmp loc_101896D  +
or dword ptr [esi+20h] 4 +
mov [ebp+var_4] ebx +
jmp loc_10188EC  +
mov edx [esi] +
mov edx [edx+8] +
cmp ecx ebx +
jnz loc_1018974  +
mov ecx [esi+8] +
push ebx  +
lea ebx [esi+4] +
push ebx  +
add eax 18h +
push eax  +
push edi  +
push edx  +
push ecx  +
push [ebp+BytesReturned]  +
call sub_101CE78  +
test eax eax +
jz loc_1018994  +
or dword ptr [esi+20h] 1 +
xor ebx ebx +
jmp loc_10189B6  +
call ds:GetLastError  +
xor ebx ebx +
cmp eax ebx +
jle loc_10189AA  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_4] eax +
jmp loc_10189B6  +
mov [ebp+var_4] 80070714h +
cmp [ebp+lpMem] ebx +
jz loc_10189CC  +
push [ebp+lpMem]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp [ebp+var_4] ebx +
jge loc_1018A24  +
mov eax [ebp+var_4] +
test eax 10000000h +
jz loc_10189F7  +
mov edi ds:RtlNtStatusToDosError +
push eax  +
call edi  +
cmp eax 13Dh +
jnz loc_10189F0  +
mov eax [ebp+var_4] +
jmp loc_1018A0A  +
push [ebp+var_4]  +
call edi  +
jmp loc_1018A0A  +
mov ecx eax +
and ecx 1FFF0000h +
cmp ecx 70000h +
jnz loc_1018A0A  +
movzx eax ax +
push ebx  +
push eax  +
push dword ptr [esi+8]  +
push 947Fh  +
push [ebp+BytesReturned]  +
call sub_1014D12  +
cmp eax 0FFFFFFFEh +
jnz loc_1018A24  +
mov [ebp+var_4] ebx +
mov edi [ebp+var_C] +
mov esi [esi+28h] +
cmp [ebp+var_4] ebx +
jge loc_1018810  +
jmp loc_101883F  +
push [ebp+BytesReturned]  +
mov eax esi +
call sub_1018420  +
mov [ebp+var_4] eax +
cmp [ebp+var_4] ebx +
mov esi [esi+28h] +
jge loc_1018850  +
cmp [ebp+var_4] ebx +
jge loc_1018A7A  +
mov esi [ebp+arg_4] +
jmp loc_1018A76  +
test [esi+20h] edi +
jnz loc_1018A73  +
mov eax [esi+4] +
cmp eax 0FFFFFFFFh +
jz loc_1018A73  +
push eax  +
call ds:CloseHandle  +
or dword ptr [esi+4] 0FFFFFFFFh +
mov esi [esi+28h] +
cmp esi ebx +
jnz loc_1018A5B  +
pop esi  +
mov eax [ebp+var_4] +
pop edi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
cmp [ebp+10h] esi +
jz loc_1018AC4  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
call sub_101C402  +
test eax eax +
jz loc_1018AC4  +
mov eax [eax+8] +
test eax eax +
jz loc_1018AC4  +
push eax  +
push dword ptr [ebp+8]  +
call sub_10187C2  +
mov esi eax +
test esi esi +
jge loc_1018AC4  +
push esi  +
push dword ptr [ebp+8]  +
call sub_1019C71  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
push 30h  +
xor edi edi +
push 8  +
mov [ebp+var_4] edi +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
cmp esi edi +
jnz loc_1018B11  +
call ds:GetLastError  +
cmp eax edi +
jle loc_1018C6B  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1018C6B  +
mov eax [ebp+arg_0] +
push ebx  +
lea ecx [esi+28h] +
push ecx  +
lea ecx [esi+24h] +
push ecx  +
push eax  +
mov [esi] eax +
call sub_101965B  +
mov eax [ebp+arg_4] +
cmp eax 1 +
jbe loc_1018C4F  +
mov [esi+2Ch] eax +
lea eax [esi+4] +
push eax  +
push edi  +
push 40h  +
lea eax [esi+10h] +
push eax  +
call sub_1015896  +
cmp eax edi +
mov [ebp+var_4] eax +
jl loc_1018C5F  +
lea eax [esi+14h] +
push eax  +
push edi  +
push 100h  +
lea eax [esi+20h] +
push eax  +
call sub_1015896  +
cmp eax edi +
mov [ebp+var_4] eax +
jl loc_1018C5F  +
mov ebx ds:CreateEventW +
push edi  +
push edi  +
push 1  +
push edi  +
call ebx  +
mov [esi+18h] eax +
cmp eax edi +
jnz loc_1018B98  +
call ds:GetLastError  +
cmp eax edi +
jle loc_1018B95  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_4] eax +
cmp [ebp+var_4] edi +
jl loc_1018C5F  +
push edi  +
push edi  +
push 1  +
push edi  +
call ebx  +
mov [esi+8] eax +
cmp eax edi +
jnz loc_1018BC6  +
call ds:GetLastError  +
cmp eax edi +
jle loc_1018BC3  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_4] eax +
cmp [ebp+var_4] edi +
jl loc_1018C5F  +
push edi  +
push edi  +
push esi  +
push offset sub_1018604  +
push edi  +
push edi  +
call ds:CreateThread  +
mov [esi+1Ch] eax +
cmp eax edi +
jnz loc_1018BFD  +
call ds:GetLastError  +
cmp eax edi +
jle loc_1018BFA  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_4] eax +
cmp [ebp+var_4] edi +
jl loc_1018C5F  +
push edi  +
call ds:GetCurrentThread  +
mov ebx ds:SetThreadIdealProcessor +
push eax  +
call ebx  +
mov eax [ebp+arg_4] +
dec eax  +
push eax  +
push dword ptr [esi+1Ch]  +
call ebx  +
push edi  +
push edi  +
push esi  +
push offset sub_10184CB  +
push edi  +
push edi  +
call ds:CreateThread  +
mov [esi+0Ch] eax +
cmp eax edi +
jnz loc_1018C4A  +
call ds:GetLastError  +
cmp eax edi +
jle loc_1018C47  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_4] eax +
cmp [ebp+var_4] edi +
jl loc_1018C5F  +
mov eax [ebp+arg_8] +
push esi  +
push [ebp+arg_0]  +
mov [eax] esi +
call sub_1019857  +
jmp loc_1018C67  +
push [ebp+arg_0]  +
call sub_1016169  +
mov eax [ebp+var_4] +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
push 8  +
push [ebp+arg_0]  +
call sub_1016D31  +
test eax eax +
jnz loc_1018D1C  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_4]  +
xor edi edi +
push [ebp+arg_0]  +
mov [ebp+var_4] edi +
call sub_1018AD0  +
cmp eax edi +
mov [ebp+arg_4] eax +
jl loc_1018D20  +
mov esi [ebp+var_4] +
cmp esi edi +
jz loc_1018D20  +
push ebx  +
push esi  +
push 1  +
push offset loc_1018A89  +
push [ebp+arg_0]  +
call sub_101C5F8  +
mov ebx ds:SetEvent +
mov [ebp+arg_4] eax +
cmp [esi+18h] edi +
jz loc_1018CD6  +
push dword ptr [esi+18h]  +
call ebx  +
cmp [esi+1Ch] edi +
mov edi ds:WaitForSingleObject +
jz loc_1018CE8  +
push 0FFFFFFFFh  +
push dword ptr [esi+1Ch]  +
call edi  +
cmp dword ptr [esi+8] 0 +
jz loc_1018CF3  +
push dword ptr [esi+8]  +
call ebx  +
cmp dword ptr [esi+0Ch] 0 +
pop ebx  +
jz loc_1018D01  +
push 0FFFFFFFFh  +
push dword ptr [esi+0Ch]  +
call edi  +
cmp [ebp+arg_4] 0 +
jl loc_1018D12  +
push [ebp+arg_0]  +
call sub_1019C4C  +
mov [ebp+arg_4] eax +
push [ebp+arg_0]  +
call sub_1016169  +
jmp loc_1018D20  +
and [ebp+arg_4] 0 +
mov eax [ebp+arg_4] +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor esi esi +
push esi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+BytesReturned]  +
mov [ebp+var_4] esi +
call sub_101965B  +
test byte ptr [ebp+var_4] 8 +
push esi  +
push [ebp+lpFileName]  +
jz loc_1018D5B  +
call sub_1015D1F  +
jmp loc_1018D60  +
call sub_101509B  +
mov edi eax +
cmp edi esi +
jz loc_1018D9D  +
push [ebp+var_4]  +
xor eax eax +
push [ebp+arg_8]  +
push edi  +
push [ebp+BytesReturned]  +
call sub_1016E58  +
push edi  +
push 0  +
mov ebx eax +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
test ebx ebx +
jge loc_1018D9D  +
mov esi 800704D3h +
cmp ebx esi +
jz loc_1018D9D  +
xor eax eax +
jmp loc_1018FCE  +
mov eax [ebp+arg_8] +
mov edi [eax+70h] +
jmp loc_1018EC9  +
test edi edi +
jz loc_1018E00  +
push edi  +
push [ebp+BytesReturned]  +
call sub_101C45B  +
mov ebx eax +
test ebx ebx +
jz loc_1018EC6  +
test dword ptr [ebx+20h] 10000000h +
jnz loc_1018EC6  +
test [ebp+var_4] 1000000h +
jnz loc_1018EAA  +
push [ebp+var_4]  +
push 0  +
push 0  +
push [ebp+BytesReturned]  +
call sub_1016E58  +
mov [ebp+var_8] eax +
test eax eax +
jge loc_1018EAA  +
cmp eax 800704C7h +
jz loc_1018EC6  +
mov esi eax +
mov eax [ebp+arg_8] +
mov edi [eax+68h] +
test esi esi +
jl loc_1018FCC  +
test edi edi +
jz loc_1018E55  +
push dword ptr [edi]  +
push [ebp+lpFileName]  +
call sub_1015D1F  +
mov ebx eax +
test ebx ebx +
jnz loc_1018E27  +
mov esi 8007000Eh +
test esi esi +
jl loc_1018E3A  +
push [ebp+arg_C]  +
push edi  +
push ebx  +
push [ebp+BytesReturned]  +
call sub_1018D2E  +
mov esi eax +
test ebx ebx +
jz loc_1018E4E  +
push ebx  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov edi [edi+64h] +
test esi esi +
jge loc_1018E0E  +
test esi esi +
jl loc_1018FCC  +
test byte ptr [ebp+var_4] 8 +
mov edi ds:RtlNtStatusToDosError +
mov ebx 947Fh +
jnz loc_1018EFF  +
mov eax [ebp+arg_8] +
cmp dword ptr [eax+4Ch] 0 +
jz loc_1018EFF  +
push 0  +
push eax  +
push [ebp+lpFileName]  +
push [ebp+BytesReturned]  +
call sub_1016653  +
mov esi eax +
test esi esi +
jge loc_1018F07  +
test esi 10000000h +
jz loc_1018ED6  +
push esi  +
call edi  +
cmp eax 13Dh +
jz loc_1018EE7  +
push esi  +
call edi  +
jmp loc_1018EE9  +
test esi esi +
jl loc_1018EC6  +
cmp [ebp+var_8] 0 +
jl loc_1018EC6  +
test byte ptr [ebp+var_4] 8 +
jnz loc_1018EC6  +
push [ebp+BytesReturned]  +
mov eax ebx +
call sub_1018420  +
mov esi eax +
mov edi [edi+64h] +
test esi esi +
jge loc_1018DA8  +
jmp loc_1018E00  +
mov eax esi +
and eax 1FFF0000h +
cmp eax 70000h +
movzx eax si +
jz loc_1018EE9  +
mov eax esi +
push 0  +
push eax  +
push [ebp+lpFileName]  +
push ebx  +
push [ebp+BytesReturned]  +
call sub_1014D12  +
cmp eax 0FFFFFFFEh +
jnz loc_1018EFF  +
xor esi esi +
test esi esi +
jl loc_1018FCC  +
test byte ptr [ebp+var_4] 8 +
jnz loc_1018F6C  +
mov eax [ebp+arg_8] +
test dword ptr [eax+10h] 4000h +
jz loc_1018F6C  +
push [ebp+lpFileName]  +
push 0  +
push [ebp+BytesReturned]  +
call sub_1016851  +
mov esi eax +
test esi esi +
jge loc_1018F70  +
test esi 10000000h +
jz loc_1018F43  +
push esi  +
call edi  +
cmp eax 13Dh +
jz loc_1018F54  +
push esi  +
call edi  +
jmp loc_1018F56  +
mov eax esi +
and eax 1FFF0000h +
cmp eax 70000h +
movzx eax si +
jz loc_1018F56  +
mov eax esi +
push 0  +
push eax  +
push [ebp+lpFileName]  +
push ebx  +
push [ebp+BytesReturned]  +
call sub_1014D12  +
cmp eax 0FFFFFFFEh +
jnz loc_1018F6C  +
xor esi esi +
test esi esi +
jl loc_1018FCC  +
test byte ptr [ebp+var_4] 8 +
jnz loc_1018FCC  +
mov ecx [ebp+lpFileName] +
push 4  +
push [ebp+arg_8]  +
push [ebp+BytesReturned]  +
call sub_10170AE  +
mov esi eax +
test esi esi +
jge loc_1018FCC  +
test esi 10000000h +
jz loc_1018FA3  +
push esi  +
call edi  +
cmp eax 13Dh +
jz loc_1018FB4  +
push esi  +
call edi  +
jmp loc_1018FB6  +
mov eax esi +
and eax 1FFF0000h +
cmp eax 70000h +
movzx eax si +
jz loc_1018FB6  +
mov eax esi +
push 0  +
push eax  +
push [ebp+lpFileName]  +
push ebx  +
push [ebp+BytesReturned]  +
call sub_1014D12  +
cmp eax 0FFFFFFFEh +
jnz loc_1018FCC  +
xor esi esi +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
push ebx  +
lea eax [ebp+var_C] +
push eax  +
push [ebp+arg_0]  +
mov [ebp+var_10] ebx +
mov [ebp+var_14] ebx +
mov [ebp+var_18] ebx +
mov [ebp+var_1C] ebx +
mov byte ptr [ebp+var_4+3] 1 +
mov byte ptr [ebp+var_4+2] 1 +
mov byte ptr [ebp+var_4+1] 1 +
mov byte ptr [ebp+var_4] 1 +
mov [ebp+var_C] ebx +
call sub_101965B  +
test byte ptr [ebp+var_C] 8 +
mov esi ds:RtlAdjustPrivilege +
jnz loc_1019072  +
lea eax [ebp+var_4+3] +
push eax  +
push ebx  +
xor edi edi +
inc edi  +
push edi  +
push 11h  +
call esi  +
cmp eax ebx +
jl loc_1019068  +
lea eax [ebp+var_4+2] +
push eax  +
push ebx  +
push edi  +
push 12h  +
mov [ebp+var_10] edi +
call esi  +
cmp eax ebx +
jl loc_1019068  +
lea eax [ebp+var_4+1] +
push eax  +
push ebx  +
push edi  +
push 8  +
mov [ebp+var_14] edi +
call esi  +
cmp eax ebx +
jl loc_1019068  +
lea eax [ebp+var_4] +
push eax  +
push ebx  +
push edi  +
push 9  +
mov [ebp+var_18] edi +
call esi  +
cmp eax ebx +
jl loc_1019068  +
mov [ebp+var_1C] edi +
jmp loc_101907E  +
or eax 10000000h +
mov [ebp+var_8] eax +
jmp loc_1019075  +
mov [ebp+var_8] ebx +
cmp [ebp+var_8] ebx +
jl loc_101917F  +
push 8  +
pop ecx  +
xor eax eax +
mov dword ptr [ebp+SystemInfo.anonymous_0] ebx +
lea edi [ebp+SystemInfo.dwPageSize] +
stos   +
mov edi [ebp+arg_0] +
push ebx  +
push edi  +
call sub_1019C71  +
lea eax [ebp+SystemInfo] +
push eax  +
call ds:GetSystemInfo  +
mov eax [ebp+arg_4] +
push ebx  +
push [ebp+var_C]  +
push eax  +
push eax  +
push dword ptr [eax]  +
push edi  +
call sub_1017482  +
cmp eax ebx +
mov [ebp+var_8] eax +
jl loc_1019140  +
push ebx  +
push ebx  +
push edi  +
call sub_10195CD  +
push eax  +
push ebx  +
push 947Bh  +
push edi  +
call sub_1014D12  +
push ebx  +
push ebx  +
push ebx  +
push 947Ch  +
push edi  +
call sub_1014D12  +
test byte ptr [ebp+var_C] 8 +
jnz loc_101912B  +
push ebx  +
push ebx  +
push ebx  +
push 9478h  +
push edi  +
call sub_1014D12  +
test byte ptr [ebp+var_C] 8 +
jnz loc_101912B  +
push 1  +
push edi  +
call sub_10154DF  +
push edx  +
push eax  +
push edi  +
call sub_1019DF8  +
push 1  +
push 1  +
push edi  +
call sub_1019E41  +
push [ebp+SystemInfo.dwNumberOfProcessors]  +
push edi  +
call sub_1018C76  +
cmp eax ebx +
mov [ebp+var_8] eax +
jl loc_1019140  +
push edi  +
call sub_1019C4C  +
mov [ebp+var_8] eax +
cmp [ebp+var_8] ebx +
jl loc_1019140  +
mov eax [ebp+arg_4] +
push eax  +
push eax  +
push dword ptr [eax]  +
push edi  +
call sub_1018D2E  +
mov [ebp+var_8] eax +
push ebx  +
push 1  +
push edi  +
call sub_1019E41  +
push ebx  +
push edi  +
call sub_1019C71  +
cmp [ebp+var_8] ebx +
jl loc_101917F  +
test byte ptr [ebp+var_C] 8 +
jnz loc_101916A  +
push ebx  +
push ebx  +
push 64h  +
push 9478h  +
push edi  +
call sub_1014D12  +
push ebx  +
push ebx  +
push edi  +
call sub_10195CD  +
push eax  +
push ebx  +
push 947Ch  +
push edi  +
call sub_1014D12  +
cmp [ebp+var_10] ebx +
jz loc_1019193  +
cmp byte ptr [ebp+var_4+3] bl +
jnz loc_1019193  +
lea eax [ebp+var_4+3] +
push eax  +
push ebx  +
push ebx  +
push 11h  +
call esi  +
cmp [ebp+var_14] ebx +
jz loc_10191A7  +
cmp byte ptr [ebp+var_4+2] bl +
jnz loc_10191A7  +
lea eax [ebp+var_4+2] +
push eax  +
push ebx  +
push ebx  +
push 12h  +
call esi  +
cmp [ebp+var_18] ebx +
jz loc_10191BB  +
cmp byte ptr [ebp+var_4+1] bl +
jnz loc_10191BB  +
lea eax [ebp+var_4+1] +
push eax  +
push ebx  +
push ebx  +
push 8  +
call esi  +
cmp [ebp+var_1C] ebx +
jz loc_10191CF  +
cmp byte ptr [ebp+var_4] bl +
jnz loc_10191CF  +
lea eax [ebp+var_4] +
push eax  +
push ebx  +
push ebx  +
push 9  +
call esi  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
and [ebp+dwErrCode] 0 +
push ebx  +
mov ebx [ebp+lpMem] +
push esi  +
push edi  +
mov [ebp+var_8] 1 +
test ebx ebx +
jz loc_10194A7  +
push ebx  +
call sub_1019699  +
cmp eax 0FEEDF002h +
jnz loc_10194A7  +
test [ebp+arg_8] 0FEFFFE41h +
jnz loc_10194A7  +
mov esi [ebp+lpFileName] +
test esi esi +
jz loc_101922A  +
cmp word ptr [esi] 0 +
jnz loc_101923F  +
test byte ptr [ebp+arg_8] 8 +
jnz loc_101923A  +
push 0A1h  +
jmp loc_10194A9  +
mov esi offset a?_1 +
push ebx  +
call sub_10199B4  +
mov [ebp+var_C] eax +
test eax eax +
jnz loc_1019253  +
push 6  +
jmp loc_10194A9  +
mov edi [ebp+arg_8] +
and edi 8 +
jnz loc_1019269  +
push esi  +
call sub_102B542  +
test eax eax +
jz loc_10194AF  +
push 0  +
push esi  +
call sub_101509B  +
mov esi eax +
mov [ebp+lpFileName] esi +
test esi esi +
jz loc_10194AF  +
test edi edi +
jz loc_101928B  +
test [ebp+arg_8] 1000000h +
jz loc_1019292  +
push esi  +
push ebx  +
call sub_1015ECA  +
test edi edi +
jnz loc_1019327  +
and [ebp+lpMem] edi +
lea eax [ebp+lpMem] +
push eax  +
push esi  +
call sub_1015DB2  +
mov esi eax +
test esi esi +
jl loc_10192C9  +
push [ebp+lpMem]  +
call ds:GetDriveTypeW  +
cmp eax 1 +
jbe loc_10192C0  +
cmp eax 4 +
jnz loc_1019305  +
mov [ebp+dwErrCode] 0A1h +
jmp loc_1019301  +
test esi 10000000h +
jz loc_10192E8  +
push esi  +
call ds:RtlNtStatusToDosError  +
cmp eax 13Dh +
jz loc_10192FE  +
push esi  +
call ds:RtlNtStatusToDosError  +
jmp loc_10192F9  +
mov eax esi +
and eax 1FFF0000h +
cmp eax 70000h +
jnz loc_10192FE  +
movzx eax si +
mov [ebp+dwErrCode] eax +
jmp loc_1019301  +
mov [ebp+dwErrCode] esi +
and [ebp+var_8] 0 +
cmp [ebp+lpMem] 0 +
jz loc_101931D  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp [ebp+var_8] 0 +
jz loc_1019481  +
test byte ptr [ebp+arg_8] 4 +
jz loc_101934A  +
push ebx  +
call sub_101A106  +
push eax  +
call sub_101DAEF  +
test eax eax +
jnz loc_101934A  +
call ds:GetLastError  +
and [ebp+var_8] 0 +
mov [ebp+dwErrCode] eax +
xor eax eax +
cmp [ebp+var_8] eax +
jz loc_1019481  +
push eax  +
mov [ebp+lpMem] eax +
lea eax [ebp+lpMem] +
push eax  +
push ebx  +
call sub_101965B  +
test edi edi +
jz loc_101936F  +
push 8  +
push ebx  +
call sub_1016D68  +
test byte ptr [ebp+arg_8] 2 +
jz loc_101937D  +
push 2  +
push ebx  +
call sub_1016D68  +
test byte ptr [ebp+arg_8] 10h +
jz loc_101938B  +
push 10h  +
push ebx  +
call sub_1016D68  +
test byte ptr [ebp+arg_8] 20h +
jz loc_1019399  +
push 20h  +
push ebx  +
call sub_1016D68  +
test byte ptr [ebp+arg_8] 80h +
jz loc_10193AA  +
push 80h  +
push ebx  +
call sub_1016D68  +
mov eax 100h +
test [ebp+arg_8] eax +
jz loc_10193BB  +
push eax  +
push ebx  +
call sub_1016D68  +
mov eax 1000000h +
test [ebp+arg_8] eax +
jz loc_10193E6  +
push eax  +
push ebx  +
call sub_1016D68  +
push 0  +
push ebx  +
call sub_1019933  +
push eax  +
call sub_102010C  +
call sub_10200DC  +
push eax  +
push ebx  +
call sub_101997A  +
push 10000h  +
push ebx  +
call sub_1016D68  +
push ebx  +
call sub_101C5C9  +
call sub_10200DC  +
push eax  +
push ebx  +
call sub_1019958  +
mov esi [ebp+var_C] +
mov eax [esi] +
xor edi edi +
cmp eax edi +
jz loc_1019423  +
push eax  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
test eax eax +
jz loc_1019423  +
mov [esi] edi +
push edi  +
push [ebp+lpFileName]  +
call sub_101509B  +
push esi  +
push ebx  +
mov [esi] eax +
call sub_1018FDA  +
mov esi eax +
push 0  +
lea eax [ebp+lpMem] +
push eax  +
push ebx  +
call sub_1019AE7  +
test esi esi +
jge loc_1019481  +
test esi 10000000h +
jz loc_1019464  +
mov edi ds:RtlNtStatusToDosError +
push esi  +
call edi  +
cmp eax 13Dh +
jz loc_101947A  +
push esi  +
call edi  +
jmp loc_1019475  +
mov eax esi +
and eax 1FFF0000h +
cmp eax 70000h +
jnz loc_101947A  +
movzx eax si +
mov [ebp+dwErrCode] eax +
jmp loc_101947D  +
mov [ebp+dwErrCode] esi +
and [ebp+var_8] 0 +
push [ebp+lpFileName]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp [ebp+dwErrCode] 0 +
jz loc_10194A2  +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
mov eax [ebp+var_8] +
jmp loc_10194B1  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_1019503  +
cmp dword ptr [esi] 0FEEDF001h +
jnz loc_1019503  +
mov eax [esi+1D0h] +
test eax eax +
jz loc_10194FE  +
push eax  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
test eax eax +
jz loc_10194F7  +
and dword ptr [esi+1D0h] 0 +
and dword ptr [esi+1D0h] 0 +
xor eax eax +
inc eax  +
jmp loc_101950D  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
push edi  +
cmp esi ebx +
jz loc_1019575  +
cmp dword ptr [esi] 0FEEDF001h +
jnz loc_1019575  +
mov edi [ebp+lpFileName] +
cmp edi ebx +
jz loc_1019575  +
cmp [edi] bx +
jz loc_1019575  +
push edi  +
call sub_102B542  +
test eax eax +
jz loc_1019560  +
push esi  +
call sub_10194BD  +
push ebx  +
push edi  +
call sub_101509B  +
mov [esi+1D0h] eax +
test eax eax +
jz loc_1019560  +
inc ebx  +
jmp loc_1019571  +
call ds:GetLastError  +
test eax eax +
jz loc_1019571  +
push eax  +
call ds:SetLastError  +
mov eax ebx +
jmp loc_101957F  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
xor eax eax +
test edx edx +
jz loc_10195BA  +
cmp dword ptr [edx] 0FEEDF001h +
jnz loc_10195BA  +
mov ecx [edx+1BCh] +
test ecx ecx +
jz loc_10195B5  +
mov ecx [ecx+4] +
inc eax  +
test ecx ecx +
jnz loc_10195AB  +
jmp loc_10195C4  +
mov eax [edx+44h] +
jmp loc_10195C4  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
test ecx ecx +
jz loc_10195EE  +
cmp [ebp+arg_4] 0 +
mov eax [ecx+28h] +
jz loc_10195EE  +
lea edx [eax+1] +
cmp edx eax +
jbe loc_10195EE  +
mov [ecx+28h] edx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
test ecx ecx +
jz loc_1019618  +
cmp [ebp+arg_4] 0 +
mov eax [ecx+2Ch] +
jz loc_1019618  +
lea edx [eax+1] +
cmp edx eax +
jbe loc_1019618  +
mov [ecx+2Ch] edx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
test ecx ecx +
jz loc_1019632  +
mov eax [ecx+74h] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
test ecx ecx +
jz loc_1019652  +
mov eax [ebp+arg_4] +
mov [ecx+74h] eax +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
test ecx ecx +
jz loc_1019690  +
mov edx [ecx+34h] +
test edx edx +
jz loc_1019672  +
mov ecx edx +
mov edx [ebp+arg_4] +
test edx edx +
jz loc_1019681  +
mov eax [ecx+1Ch] +
mov [edx] eax +
xor eax eax +
inc eax  +
mov edx [ebp+arg_8] +
test edx edx +
jz loc_1019690  +
mov eax [ecx+20h] +
mov [edx] eax +
xor eax eax +
inc eax  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
or eax 0FFFFFFFFh +
cmp dword_1049AA0 0 +
jz loc_10196BC  +
cmp ecx dword_1049348 +
jnz loc_10196BC  +
mov eax 0FEEDF002h +
jmp loc_10196C2  +
test ecx ecx +
jz loc_10196C2  +
mov eax [ecx] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push esi  +
xor edi edi +
call sub_1019699  +
cmp eax 0FEEDF002h +
jnz loc_101971E  +
mov eax [esi+68h] +
cmp eax edi +
jz loc_1019704  +
push eax  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
test eax eax +
jz loc_1019701  +
mov [esi+68h] edi +
mov [esi+68h] edi +
cmp [ebp+lpFileName] edi +
jz loc_1019719  +
push edi  +
push [ebp+lpFileName]  +
call sub_101509B  +
mov [esi+68h] eax +
cmp eax edi +
jz loc_1019726  +
xor edi edi +
inc edi  +
jmp loc_1019726  +
push 6  +
call ds:SetLastError  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
xor eax eax +
test edx edx +
jz loc_101974C  +
mov ecx [ebp+arg_4] +
test ecx ecx +
jz loc_101974C  +
mov [edx+4] ecx +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push esi  +
xor esi esi +
test edx edx +
jz loc_101978B  +
push edx  +
call sub_1019699  +
cmp eax 0FEEDF002h +
jnz loc_1019776  +
mov esi [edx+24h] +
jmp loc_1019793  +
push edx  +
call sub_1019699  +
cmp eax 0FEEDF001h +
jnz loc_1019793  +
mov esi [edx+190h] +
jmp loc_1019793  +
push 6  +
call ds:SetLastError  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push esi  +
xor esi esi +
test edx edx +
jz loc_10197DE  +
push edx  +
call sub_1019699  +
cmp eax 0FEEDF002h +
jnz loc_10197C3  +
mov eax [ebp+arg_4] +
mov [edx+24h] eax +
jmp loc_10197D9  +
push edx  +
call sub_1019699  +
cmp eax 0FEEDF001h +
jnz loc_10197E6  +
mov eax [ebp+arg_4] +
mov [edx+190h] eax +
xor esi esi +
inc esi  +
jmp loc_10197E6  +
push 6  +
call ds:SetLastError  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call sub_1019755  +
or eax [ebp+arg_4] +
push eax  +
push [ebp+arg_0]  +
call sub_101979F  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call sub_1019755  +
mov ecx [ebp+arg_4] +
not ecx  +
and eax ecx +
push eax  +
push [ebp+arg_0]  +
call sub_101979F  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
test ecx ecx +
jz loc_101984E  +
mov eax [ecx+80h] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
test ecx ecx +
jz loc_1019871  +
mov eax [ebp+arg_4] +
mov [ecx+80h] eax +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
test ecx ecx +
jz loc_101988B  +
mov eax [ecx+28h] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
test ecx ecx +
jz loc_10198A8  +
mov eax [ecx+1B0h] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
test ecx ecx +
jz loc_10198C5  +
mov eax [ecx+1E8h] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
test ecx ecx +
jz loc_10198E8  +
mov eax [ebp+arg_4] +
mov [ecx+1E8h] eax +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
test ecx ecx +
jz loc_1019905  +
mov eax [ecx+194h] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
mov edx ecx +
test ecx ecx +
jz loc_101992A  +
mov ecx [ecx+34h] +
test ecx ecx +
jz loc_1019927  +
mov edx ecx +
mov eax [edx+78h] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
mov edx ecx +
test ecx ecx +
jz loc_101994F  +
mov ecx [ecx+34h] +
test ecx ecx +
jz loc_101994C  +
mov edx ecx +
mov eax [edx+7Ch] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
xor eax eax +
test edx edx +
jz loc_1019971  +
mov ecx [ebp+arg_4] +
test ecx ecx +
jz loc_1019971  +
mov [edx+78h] ecx +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
test ecx ecx +
jz loc_1019991  +
mov eax [ebp+arg_4] +
mov [ecx+7Ch] eax +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
test ecx ecx +
jz loc_10199AB  +
lea eax [ecx+70h] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
test ecx ecx +
jz loc_10199D1  +
mov eax [ecx+34h] +
test eax eax +
jz loc_10199CE  +
mov eax [eax+6Ch] +
jmp loc_10199D1  +
mov eax [ecx+6Ch] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
test ecx ecx +
jz loc_10199F1  +
mov eax [ebp+arg_4] +
mov [ecx+6Ch] eax +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
test ecx ecx +
jz loc_1019A0E  +
mov eax [ecx+1B4h] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
test ecx ecx +
jz loc_1019A31  +
mov eax [ebp+arg_4] +
mov [ecx+1B4h] eax +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
or eax 0FFFFFFFFh +
mov edx ecx +
test ecx ecx +
jz loc_1019A57  +
mov ecx [ecx+34h] +
test ecx ecx +
jz loc_1019A54  +
mov edx ecx +
mov eax [edx+18h] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
mov edx ecx +
test ecx ecx +
jz loc_1019A7C  +
mov ecx [ecx+34h] +
test ecx ecx +
jz loc_1019A79  +
mov edx ecx +
lea eax [edx+8] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
mov edx ecx +
test ecx ecx +
jz loc_1019AB3  +
push esi  +
mov esi [ebp+arg_4] +
test esi esi +
jz loc_1019AB2  +
mov ecx [ecx+34h] +
test ecx ecx +
jz loc_1019AA6  +
mov edx ecx +
push edi  +
lea edi [edx+8] +
movs   +
movs   +
movs   +
xor eax eax +
movs   +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
mov edx ecx +
test ecx ecx +
jz loc_1019ADE  +
mov ecx [ecx+34h] +
test ecx ecx +
jz loc_1019AD5  +
mov edx ecx +
mov eax [ebp+arg_4] +
mov [edx+18h] eax +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
test ecx ecx +
jz loc_1019B13  +
mov edx [ebp+arg_4] +
test edx edx +
jz loc_1019B04  +
mov eax [edx] +
mov [ecx+1Ch] eax +
xor eax eax +
inc eax  +
mov edx [ebp+arg_8] +
test edx edx +
jz loc_1019B13  +
mov eax [edx] +
mov [ecx+20h] eax +
xor eax eax +
inc eax  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push edi  +
xor edi edi +
test edx edx +
jz loc_1019BB8  +
push edx  +
call sub_1019699  +
cmp eax 0FEEDF001h +
jnz loc_1019BB8  +
mov ecx [edx+1BCh] +
push ebx  +
push esi  +
test ecx ecx +
jz loc_1019BAC  +
xor esi esi +
inc esi  +
test edi edi +
jnz loc_1019BB2  +
mov eax [ecx] +
cmp [eax+24h] edi +
jz loc_1019BA2  +
cmp esi [edx+108h] +
jnz loc_1019BA2  +
mov ebx [eax+8] +
cmp ebx [edx+0D0h] +
jnz loc_1019BA2  +
mov ebx [eax+0Ch] +
cmp ebx [edx+0D4h] +
jnz loc_1019BA2  +
mov ebx [eax+10h] +
cmp ebx [edx+0D8h] +
jnz loc_1019BA2  +
mov ebx [eax+14h] +
cmp ebx [edx+0DCh] +
jnz loc_1019BA2  +
mov ebx [eax+18h] +
cmp ebx [edx+0E0h] +
jnz loc_1019BA2  +
mov eax [eax+1Ch] +
cmp eax [edx+0E4h] +
jnz loc_1019BA2  +
mov edi esi +
mov ecx [ecx+4] +
inc esi  +
test ecx ecx +
jnz loc_1019B4B  +
jmp loc_1019BB2  +
mov edi [edx+108h] +
pop esi  +
mov eax edi +
pop ebx  +
jmp loc_1019BC2  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
test ecx ecx +
jz loc_1019BE0  +
mov eax [ecx+94h] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
test ecx ecx +
jz loc_1019C03  +
mov eax [ebp+arg_4] +
mov [ecx+94h] eax +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
test ecx ecx +
jz loc_1019C20  +
mov eax [ecx+98h] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
test ecx ecx +
jz loc_1019C43  +
mov eax [ebp+arg_4] +
mov [ecx+98h] eax +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
mov edx ecx +
test ecx ecx +
jz loc_1019C68  +
mov ecx [ecx+34h] +
test ecx ecx +
jz loc_1019C65  +
mov edx ecx +
mov eax [edx+38h] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
mov edx ecx +
test ecx ecx +
jz loc_1019C93  +
mov ecx [ecx+34h] +
test ecx ecx +
jz loc_1019C8A  +
mov edx ecx +
mov eax [ebp+arg_4] +
mov [edx+38h] eax +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
test ecx ecx +
jz loc_1019CCE  +
mov edx [ebp+arg_4] +
test edx edx +
jz loc_1019CBC  +
mov eax [ecx+9Ch] +
mov [edx] eax +
xor eax eax +
inc eax  +
mov edx [ebp+arg_8] +
test edx edx +
jz loc_1019CCE  +
mov eax [ecx+0A0h] +
mov [edx] eax +
xor eax eax +
inc eax  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
mov [ebp+var_4] eax +
cmp esi eax +
jz loc_1019D8B  +
push ebx  +
push edi  +
mov edi 100000h +
cmp [ebp+arg_4] eax +
jz loc_1019D3F  +
cmp [ebp+arg_8] eax +
jz loc_1019D3F  +
lea ebx [esi+84h] +
cmp [ebx] eax +
jnz loc_1019D22  +
push edi  +
push eax  +
mov [esi+8Ch] edi +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebx] eax +
xor eax eax +
mov ebx [ebx] +
cmp ebx eax +
jz loc_1019D3F  +
mov ecx [ebp+arg_4] +
mov edx [ebp+arg_8] +
mov [ecx] ebx +
mov ecx [esi+8Ch] +
mov [edx] ecx +
mov [ebp+var_4] 1 +
cmp [ebp+arg_C] eax +
jz loc_1019D89  +
cmp [ebp+arg_10] eax +
jz loc_1019D89  +
lea ebx [esi+88h] +
cmp dword ptr [ebx] 0 +
jnz loc_1019D6C  +
push edi  +
push 0  +
mov [esi+90h] edi +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebx] eax +
mov ebx [ebx] +
test ebx ebx +
jz loc_1019D89  +
mov eax [ebp+arg_C] +
mov ecx [ebp+arg_10] +
mov [eax] ebx +
mov eax [esi+90h] +
mov [ecx] eax +
mov [ebp+var_4] 1 +
pop edi  +
pop ebx  +
mov eax [ebp+var_4] +
pop esi  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push esi  +
xor esi esi +
test edx edx +
jz loc_1019DBA  +
push edx  +
call sub_1019699  +
cmp eax 0FEEDF001h +
jnz loc_1019DBA  +
mov esi [edx+1C4h] +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push esi  +
xor esi esi +
test edx edx +
jz loc_1019DEC  +
push edx  +
call sub_1019699  +
cmp eax 0FEEDF001h +
jnz loc_1019DEC  +
mov eax [ebp+arg_4] +
mov [edx+1C4h] eax +
inc esi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_1019E34  +
mov eax [esi+34h] +
test eax eax +
jz loc_1019E0E  +
mov esi eax +
mov eax [ebp+arg_4] +
mov [esi+40h] eax +
mov eax [ebp+arg_8] +
and dword ptr [esi+48h] 0 +
and dword ptr [esi+4Ch] 0 +
mov [esi+44h] eax +
lea eax [esi+58h] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
and dword ptr [esi+60h] 0 +
and dword ptr [esi+64h] 0 +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
mov edx ecx +
test ecx ecx +
jz loc_1019E69  +
mov ecx [ecx+34h] +
test ecx ecx +
jz loc_1019E5A  +
mov edx ecx +
cmp [ebp+arg_4] 0 +
mov eax [edx+3Ch] +
jz loc_1019E69  +
mov ecx [ebp+arg_8] +
mov [edx+3Ch] ecx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_8] 0 +
mov ecx [ebp+arg_0] +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
pop edi  +
test ecx ecx +
jz loc_1019EA5  +
cmp [ebp+arg_4] eax +
jz loc_1019E9D  +
mov eax [ebp+arg_8] +
add [ecx+50h] eax +
mov eax [ebp+arg_C] +
adc [ecx+54h] eax +
mov eax [ecx+50h] +
mov ecx [ecx+54h] +
jmp loc_1019EAB  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_8] +
mov edx ecx +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_1019ECC  +
push 57h  +
call ds:SetLastError  +
jmp loc_1019F07  +
mov ecx [ebp+arg_8] +
sub ecx 9478h +
jz loc_1019EE3  +
sub ecx 5 +
jnz loc_1019F07  +
add eax 0BCh +
jmp loc_1019EE8  +
add eax 0A4h +
test eax eax +
jz loc_1019F07  +
mov ecx [ebp+arg_4] +
sub ecx 0 +
jz loc_1019F00  +
dec ecx  +
jnz loc_1019F07  +
push eax  +
call ds:LeaveCriticalSection  +
jmp loc_1019F07  +
push eax  +
call ds:EnterCriticalSection  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push edi  +
xor edi edi +
test esi esi +
jz loc_1019F49  +
cmp dword ptr [esi] 0FEEDF001h +
jnz loc_1019F49  +
inc edi  +
jmp loc_1019F3F  +
lea ecx [eax+1F0h] +
mov edx [ecx] +
mov [esi+1ECh] edx +
and dword ptr [ecx] 0 +
cmp eax esi +
jz loc_1019F3F  +
push eax  +
call sub_101ABFF  +
mov eax [esi+1ECh] +
test eax eax +
jnz loc_1019F24  +
mov eax edi +
pop edi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
call ds:GetLastError  +
test eax eax +
jnz loc_1019F64  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_C] +
push esi  +
mov esi [ebp+arg_4] +
push 0  +
sub eax edx +
push 2710h  +
sbb ecx esi +
push ecx  +
push eax  +
call __aulldiv  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 2710h +
jnb loc_1019FAD  +
xor eax eax +
jmp loc_1019FC7  +
cmp [ebp+arg_4] 2 +
jb loc_1019FA9  +
cmp [ebp+arg_C] 0 +
jg loc_1019FC4  +
jl loc_1019FA9  +
cmp [ebp+arg_8] 100000h +
jb loc_1019FA9  +
xor eax eax +
inc eax  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax dword_1049348 +
cmp ecx eax +
jnz loc_101A005  +
cmp dword_1049AA0 0 +
jz loc_1019FFB  +
push [ebp+arg_4]  +
push dword_104934C  +
call dword_1049AB8  +
jmp loc_101A00F  +
cmp ecx eax +
jnz loc_101A005  +
mov ecx dword_104934C +
push [ebp+arg_4]  +
push ecx  +
call ds:GetFileSizeEx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax dword_1049348 +
cmp ecx eax +
jnz loc_101A056  +
cmp dword_1049AA0 0 +
jz loc_101A04C  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push dword_104934C  +
call dword_1049AB4  +
jmp loc_101A069  +
cmp ecx eax +
jnz loc_101A056  +
mov ecx dword_104934C +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push ecx  +
call ds:SetFilePointerEx  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax dword_1049348 +
cmp ecx eax +
jnz loc_101A0C0  +
cmp dword_1049AA0 0 +
jz loc_101A0A8  +
push dword_104934C  +
call dword_1049AAC  +
or dword_104934C 0FFFFFFFFh +
or dword_1049348 0FFFFFFFFh +
jmp loc_101A0C7  +
cmp ecx eax +
jnz loc_101A0C0  +
mov ecx dword_104934C +
or dword_104934C 0FFFFFFFFh +
or dword_1049348 0FFFFFFFFh +
push ecx  +
call ds:CloseHandle  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx dword_1049348 +
xor eax eax +
cmp [ebp+arg_0] ecx +
jnz loc_101A0EA  +
cmp dword_1049AA0 eax +
jnz loc_101A0FD  +
mov eax [ebp+arg_0] +
cmp eax ecx +
jnz loc_101A0F6  +
mov eax dword_104934C +
push eax  +
call ds:SetEndOfFile  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push esi  +
xor esi esi +
test edx edx +
jz loc_101A136  +
push edx  +
call sub_1019699  +
cmp eax 0FEEDF002h +
jnz loc_101A127  +
mov esi [edx+4] +
jmp loc_101A136  +
push edx  +
call sub_1019699  +
cmp eax 0FEEDF001h +
jnz loc_101A136  +
mov esi edx +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+dwErrCode] +
push edi  +
xor edi edi +
mov [ebp+var_4] edi +
mov [ebp+var_8] edi +
mov ebx 0D8h +
cmp esi edi +
jnz loc_101A17D  +
push ebx  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
cmp esi edi +
jnz loc_101A17D  +
xor eax eax +
jmp loc_101A2A4  +
push ebx  +
push edi  +
push esi  +
call memset  +
add esp 0Ch +
push [ebp+arg_0]  +
mov dword ptr [esi] 0FEEDF002h +
push esi  +
call sub_1019733  +
push [ebp+arg_4]  +
push esi  +
call sub_1019ABC  +
mov ebx ds:CreateEventW +
push edi  +
push edi  +
push edi  +
push edi  +
mov [ebp+dwErrCode] 6 +
call ebx  +
push edi  +
push edi  +
push edi  +
push edi  +
mov [esi+9Ch] eax +
call ebx  +
mov [esi+0A0h] eax +
cmp [esi+9Ch] edi +
jz loc_101A241  +
cmp eax edi +
jz loc_101A241  +
lea eax [esi+8] +
push eax  +
call ds:UuidCreate  +
mov [ebp+dwErrCode] eax +
cmp eax edi +
jnz loc_101A241  +
mov ebx ds:InitializeCriticalSectionAndSpinCount +
push edi  +
lea eax [esi+0A4h] +
push eax  +
call ebx  +
mov [ebp+var_4] eax +
cmp eax edi +
jz loc_101A20A  +
push edi  +
lea eax [esi+0BCh] +
push eax  +
call ebx  +
mov [ebp+var_8] eax +
cmp eax edi +
jnz loc_101A21E  +
call ds:GetLastError  +
mov [ebp+dwErrCode] eax +
cmp eax edi +
jnz loc_101A241  +
mov [ebp+dwErrCode] 1Fh +
cmp [ebp+dwErrCode] edi +
jnz loc_101A241  +
cmp [ebp+arg_0] edi +
jz loc_101A2A2  +
push [ebp+arg_0]  +
call sub_10198B1  +
push esi  +
push [ebp+arg_0]  +
mov [esi+0D4h] eax +
call sub_10198CE  +
jmp loc_101A2A2  +
mov eax [esi+9Ch] +
mov ebx ds:CloseHandle +
cmp eax edi +
jz loc_101A254  +
push eax  +
call ebx  +
mov eax [esi+0A0h] +
cmp eax edi +
jz loc_101A261  +
push eax  +
call ebx  +
mov ebx ds:DeleteCriticalSection +
cmp [ebp+var_4] edi +
jz loc_101A275  +
lea eax [esi+0A4h] +
push eax  +
call ebx  +
cmp [ebp+var_8] edi +
jz loc_101A283  +
lea eax [esi+0BCh] +
push eax  +
call ebx  +
push esi  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
xor esi esi +
cmp [ebp+dwErrCode] edi +
jz loc_101A2A2  +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
xor esi esi +
call sub_1019699  +
cmp eax 0FEEDF001h +
jnz loc_101A2CC  +
mov eax [ebp+arg_0] +
jmp loc_101A2DB  +
cmp eax 0FEEDF002h +
jnz loc_101A2E5  +
push [ebp+arg_0]  +
call sub_101A106  +
test eax eax +
jz loc_101A2E5  +
mov esi [eax+1D0h] +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
call sub_1019699  +
xor esi esi +
cmp eax 0FEEDF001h +
jnz loc_101A30D  +
mov eax [ebp+arg_0] +
jmp loc_101A31C  +
cmp eax 0FEEDF002h +
jnz loc_101A339  +
push [ebp+arg_0]  +
call sub_101A106  +
test eax eax +
jz loc_101A339  +
mov eax [eax+28h] +
test eax 40000h +
jz loc_101A32F  +
push 2  +
pop esi  +
jmp loc_101A339  +
test eax 20000h +
jz loc_101A339  +
xor esi esi +
inc esi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
or esi 0FFFFFFFFh +
call sub_1019699  +
cmp eax 0FEEDF001h +
jnz loc_101A362  +
mov eax [ebp+arg_0] +
jmp loc_101A371  +
cmp eax 0FEEDF002h +
jnz loc_101A378  +
push [ebp+arg_0]  +
call sub_101A106  +
test eax eax +
jz loc_101A378  +
mov esi [eax+4] +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor ebx ebx +
mov esi edi +
cmp edi ebx +
jz loc_101A4CD  +
mov eax [ebp+arg_4] +
or eax [ebp+arg_8] +
jz loc_101A4CD  +
push ebx  +
push ebx  +
push edi  +
call sub_1019E41  +
test eax eax +
jz loc_101A4CD  +
mov eax [edi+34h] +
cmp eax ebx +
jz loc_101A3C2  +
mov esi eax +
push 9478h  +
push ebx  +
push edi  +
call sub_1019EB6  +
mov edi [esi+40h] +
mov ebx [esi+44h] +
mov eax edi +
or eax ebx +
jz loc_101A4BE  +
mov eax [ebp+arg_4] +
add [esi+48h] eax +
mov eax [ebp+arg_8] +
push 0  +
adc [esi+4Ch] eax +
mov ecx [esi+4Ch] +
mov eax [esi+48h] +
push 64h  +
push ecx  +
push eax  +
call __allmul  +
push ebx  +
push edi  +
push edx  +
push eax  +
call __alldiv  +
mov edi eax +
cmp edi 64h +
jb loc_101A41F  +
cmp [esi+4Ch] ebx +
jl loc_101A424  +
jg loc_101A41A  +
mov eax [esi+48h] +
cmp eax [esi+40h] +
jbe loc_101A424  +
push 64h  +
pop edi  +
jmp loc_101A424  +
test edi edi +
jnz loc_101A424  +
inc edi  +
cmp edi [esi+64h] +
jbe loc_101A4BE  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
push [ebp+SystemTimeAsFileTime.dwHighDateTime]  +
push [ebp+SystemTimeAsFileTime.dwLowDateTime]  +
push dword ptr [esi+5Ch]  +
push dword ptr [esi+58h]  +
call sub_1019F6D  +
push dword ptr [esi+4Ch]  +
mov ebx eax +
push dword ptr [esi+48h]  +
push edi  +
push ebx  +
call sub_1019F9B  +
test eax eax +
jz loc_101A4A3  +
mov eax ebx +
cmp edi 64h +
jnb loc_101A49E  +
mov ecx [esi+60h] +
imul eax eax +
xor edx edx +
div  edi +
test ecx ecx +
jz loc_101A494  +
lea edx [ecx-7D0h] +
cmp edx eax +
jbe loc_101A482  +
sub ecx eax +
shr ecx 1 +
add eax ecx +
jmp loc_101A494  +
lea edx [ecx+7D0h] +
cmp edx eax +
jnb loc_101A494  +
mov edx eax +
sub edx ecx +
shr edx 1 +
sub eax edx +
cmp eax ebx +
jb loc_101A49E  +
mov ecx eax +
sub ecx ebx +
jnz loc_101A4A7  +
xor ecx ecx +
inc ecx  +
jmp loc_101A4A7  +
xor eax eax +
xor ecx ecx +
push 0  +
push ecx  +
push edi  +
push 9478h  +
push [ebp+arg_0]  +
mov [esi+64h] edi +
mov [esi+60h] eax +
call sub_1014D12  +
push 9478h  +
push 1  +
push [ebp+arg_0]  +
call sub_1019EB6  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
push ebx  +
mov [ebp+var_4] 1 +
call sub_101A106  +
xor edi edi +
mov esi eax +
mov [ebp+dwErrCode] edi +
cmp ebx edi +
jnz loc_101A50E  +
push 6  +
call ds:SetLastError  +
xor eax eax +
jmp loc_101A773  +
cmp [ebx+34h] edi +
jz loc_101A51B  +
xor eax eax +
inc eax  +
jmp loc_101A773  +
cmp esi edi +
jz loc_101A513  +
test byte ptr [ebx+24h] 1 +
jz loc_101A723  +
mov eax [esi+190h] +
test al 11h +
jnz loc_101A723  +
test al 6 +
jz loc_101A723  +
lea eax [ebp+lpMem] +
push eax  +
lea eax [ebp+hMem] +
push eax  +
push ebx  +
mov [ebp+hMem] edi +
mov [ebp+lpMem] edi +
call sub_101C25C  +
test eax eax +
jz loc_101A575  +
cmp [ebp+hMem] edi +
jz loc_101A58A  +
cmp [ebp+lpMem] 2 +
jb loc_101A575  +
push [ebp+lpMem]  +
push [ebp+hMem]  +
push ebx  +
call sub_101BAD7  +
test eax eax +
jnz loc_101A575  +
mov [ebp+var_4] edi +
cmp [ebp+hMem] edi +
jz loc_101A58A  +
push [ebp+hMem]  +
call ds:LocalFree  +
test eax eax +
jz loc_101A58A  +
mov [ebp+hMem] edi +
push esi  +
call sub_1019B1C  +
test eax eax +
jnz loc_101A5AC  +
push 40h  +
lea eax [esi+0C8h] +
push edi  +
push eax  +
mov [esi+108h] edi +
call memset  +
add esp 0Ch +
mov ecx [esi+8] +
cmp ecx edi +
jz loc_101A5CA  +
cmp [esi+1BCh] edi +
jnz loc_101A5CA  +
mov eax [esi+28h] +
test al 8 +
jnz loc_101A5CA  +
or eax 10h +
mov [esi+28h] eax +
jmp loc_101A5CE  +
and dword ptr [esi+28h] 0FFFFFFEFh +
cmp ecx edi +
jz loc_101A5FF  +
cmp [esi+1BCh] edi +
jz loc_101A5FF  +
xor edx edx +
mov eax ecx +
cmp edx edi +
jnz loc_101A5FB  +
test byte ptr [eax+0Fh] 2 +
jnz loc_101A5EB  +
xor edx edx +
inc edx  +
mov eax [eax] +
cmp eax edi +
jnz loc_101A5DE  +
cmp edx edi +
jnz loc_101A5FB  +
or dword ptr [esi+28h] 20h +
jmp loc_101A5FF  +
and dword ptr [esi+28h] 0FFFFFFDFh +
cmp [ebp+var_4] edi +
jz loc_101A715  +
push ebx  +
call sub_101EAA7  +
mov edi ds:GetLastError +
mov ebx offset aWimcommitimage +
test eax eax +
jz loc_101A646  +
push [ebp+arg_0]  +
call sub_101EBE7  +
test eax eax +
jz loc_101A646  +
push esi  +
call sub_101CAFC  +
test eax eax +
jz loc_101A646  +
push esi  +
call sub_101C9DA  +
test eax eax +
jz loc_101A646  +
and dword ptr [esi+190h] 0FFFFFFE9h +
jmp loc_101A679  +
and [ebp+var_4] 0 +
call edi  +
mov [ebp+dwErrCode] eax +
test eax eax +
jle loc_101A65D  +
and eax 0FFFFh +
or eax 80070000h +
push 0F4Ch  +
push ebx  +
push eax  +
push offset aSaveoffsetFail  +
push dword ptr [esi+1CCh]  +
push [ebp+arg_0]  +
push 1  +
call sub_1015538  +
cmp [ebp+var_4] 0 +
jz loc_101A713  +
push 0  +
push esi  +
call sub_101D69C  +
test eax eax +
jz loc_101A6B7  +
mov eax [esi+1D8h] +
and dword ptr [esi+190h] 0FFFFFFF7h +
mov [esi+1E0h] eax +
mov eax [esi+1DCh] +
mov [esi+1E4h] eax +
mov eax [ebp+arg_0] +
and dword ptr [eax+24h] 0FFFFFFFEh +
jmp loc_101A6EA  +
and [ebp+var_4] 0 +
call edi  +
mov [ebp+dwErrCode] eax +
test eax eax +
jle loc_101A6CE  +
and eax 0FFFFh +
or eax 80070000h +
push 0F68h  +
push ebx  +
push eax  +
push offset aUpdatewimheade  +
push dword ptr [esi+1CCh]  +
push [ebp+arg_0]  +
push 1  +
call sub_1015538  +
cmp [ebp+var_4] 0 +
jz loc_101A713  +
push esi  +
call sub_1019755  +
xor edi edi +
test eax 100h +
jz loc_101A71C  +
mov eax [esi+58h] +
mov [esi+1D8h] eax +
mov eax [esi+5Ch] +
mov [esi+1DCh] eax +
jmp loc_101A71C  +
xor edi edi +
or dword ptr [esi+190h] 10h +
and dword ptr [esi+190h] 0FFFFFFF1h +
test byte ptr [esi+190h] 1 +
jnz loc_101A762  +
push esi  +
call sub_1019755  +
test al 10h +
jz loc_101A762  +
lea eax [esi+1E0h] +
mov ecx [eax] +
push edi  +
push edi  +
mov [esi+1D8h] ecx +
mov ecx [eax+4] +
push ecx  +
push dword ptr [eax]  +
mov [esi+1DCh] ecx +
push dword ptr [esi+4]  +
call sub_101A018  +
push dword ptr [esi+4]  +
call sub_101A0D0  +
cmp [ebp+dwErrCode] edi +
jz loc_101A770  +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
call sub_101A106  +
xor ebx ebx +
mov [ebp+var_4] eax +
cmp esi ebx +
jnz loc_101A7A5  +
push 6  +
call ds:SetLastError  +
xor eax eax +
jmp loc_101A8F8  +
push esi  +
call sub_101A4D9  +
mov [ebp+var_8] eax +
mov eax [esi+7Ch] +
cmp eax ebx +
jz loc_101A7C3  +
push ebx  +
push eax  +
call sub_102010C  +
push ebx  +
push esi  +
call sub_101997A  +
cmp [esi+78h] ebx +
jz loc_101A7CE  +
push esi  +
call sub_101C5C9  +
push edi  +
push esi  +
call sub_101999A  +
push eax  +
call sub_10200A8  +
push dword ptr [esi+6Ch]  +
push esi  +
call sub_101613D  +
push esi  +
call sub_101ED58  +
mov eax [esi+9Ch] +
mov edi ds:CloseHandle +
cmp eax ebx +
jz loc_101A7FD  +
push eax  +
call edi  +
mov eax [esi+0A0h] +
cmp eax ebx +
jz loc_101A80A  +
push eax  +
call edi  +
mov edi ds:DeleteCriticalSection +
lea eax [esi+0A4h] +
push eax  +
call edi  +
lea eax [esi+0BCh] +
push eax  +
call edi  +
mov eax [esi+84h] +
mov edi ds:HeapFree +
cmp eax ebx +
jz loc_101A847  +
push eax  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call edi  +
test eax eax +
jz loc_101A847  +
mov [esi+84h] ebx +
mov eax [esi+88h] +
cmp eax ebx +
jz loc_101A866  +
push eax  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call edi  +
test eax eax +
jz loc_101A866  +
mov [esi+88h] ebx +
mov eax [esi+94h] +
cmp eax ebx +
jz loc_101A876  +
push eax  +
call sub_102053D  +
mov eax [esi+98h] +
cmp eax ebx +
jz loc_101A886  +
push eax  +
call sub_102053D  +
push ebx  +
push esi  +
call sub_10196CB  +
cmp [esi+34h] ebx +
jnz loc_101A8D4  +
push [ebp+var_4]  +
call sub_10198B1  +
cmp eax ebx +
jz loc_101A8D4  +
cmp esi eax +
jnz loc_101A8B2  +
push dword ptr [eax+0D4h]  +
push [ebp+var_4]  +
call sub_10198CE  +
jmp loc_101A8D4  +
xor edx edx +
inc edx  +
cmp eax ebx +
jz loc_101A8D4  +
add eax 0D4h +
mov ecx [eax] +
cmp ecx esi +
jnz loc_101A8CE  +
mov ecx [ecx+0D4h] +
mov [eax] ecx +
xor edx edx +
mov eax [eax] +
cmp edx ebx +
jnz loc_101A8B5  +
push 0D8h  +
push ebx  +
push esi  +
call memset  +
add esp 0Ch +
test [ebp+arg_0] 1 +
jz loc_101A8F4  +
push esi  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call edi  +
mov eax [ebp+var_8] +
pop edi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
mov [ebp+var_8] 1 +
mov [ebp+dwErrCode] ebx +
call sub_101958B  +
mov esi eax +
cmp edi ebx +
jnz loc_101A933  +
push 6  +
call ds:SetLastError  +
xor eax eax +
jmp loc_101ABAB  +
cmp [edi+1E8h] ebx +
jz loc_101A93F  +
push 20h  +
jmp loc_101A926  +
push edi  +
call sub_1019755  +
test al 11h +
jnz loc_101A99F  +
test al 0Eh +
jz loc_101A99F  +
cmp esi ebx +
jz loc_101A99F  +
push ebx  +
push ebx  +
push edi  +
call sub_101A142  +
mov esi eax +
cmp esi ebx +
jz loc_101A97D  +
push 1  +
push esi  +
call sub_10197F2  +
push 1  +
call sub_101A77F  +
mov [ebp+var_8] eax +
cmp eax ebx +
jnz loc_101A98D  +
call ds:GetLastError  +
jmp loc_101A986  +
call ds:GetLastError  +
mov [ebp+var_8] ebx +
mov [ebp+dwErrCode] eax +
cmp eax ebx +
jnz loc_101A99F  +
mov eax [edi+58h] +
mov [edi+1D8h] eax +
mov eax [edi+5Ch] +
mov [edi+1DCh] eax +
push edi  +
call sub_1019755  +
mov [ebp+var_C] eax +
and [ebp+var_C] 10h +
mov [ebp+var_10] eax +
jz loc_101AA75  +
lea eax [edi+1E0h] +
mov ecx [eax] +
push ebx  +
push ebx  +
mov [edi+1D8h] ecx +
mov ecx [eax+4] +
push ecx  +
push dword ptr [eax]  +
mov [edi+1DCh] ecx +
push dword ptr [edi+4]  +
call sub_101A018  +
push dword ptr [edi+4]  +
call sub_101A0D0  +
test byte ptr [ebp+var_10] 8 +
jz loc_101AA75  +
push ebx  +
push edi  +
call sub_101D32E  +
test eax eax +
jz loc_101AA40  +
mov eax [edi+28h] +
test al 40h +
jz loc_101AA40  +
push ebx  +
and eax 0FFFFFFBFh +
push edi  +
mov [edi+28h] eax +
call sub_101D69C  +
test eax eax +
jz loc_101AA17  +
and dword ptr [edi+190h] 0FFFFFFF7h +
jmp loc_101AA75  +
call ds:GetLastError  +
cmp eax ebx +
mov [ebp+dwErrCode] eax +
jle loc_101AA2E  +
and eax 0FFFFh +
or eax 80070000h +
push 10A4h  +
push offset aWimclosewim  +
push eax  +
push offset aFailToUpdateWi  +
jmp loc_101AA67  +
call ds:GetLastError  +
cmp eax ebx +
mov [ebp+dwErrCode] eax +
jle loc_101AA57  +
and eax 0FFFFh +
or eax 80070000h +
push 10ACh  +
push offset aWimclosewim  +
push eax  +
push offset aFailToReadWimH  +
push dword ptr [edi+1CCh]  +
push ebx  +
push 1  +
call sub_1015538  +
mov esi edi +
call sub_1019F10  +
push dword ptr [edi+4]  +
call sub_101A072  +
push dword ptr [edi+1BCh]  +
call sub_1021C16  +
push ebx  +
push dword ptr [edi+1B0h]  +
call sub_102010C  +
mov eax [edi+1B8h] +
mov esi ds:HeapFree +
cmp eax ebx +
jz loc_101AAC0  +
push eax  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call esi  +
test eax eax +
jz loc_101AAC0  +
mov [edi+1B8h] ebx +
push dword ptr [edi+8]  +
call sub_1021C47  +
push dword ptr [edi+10h]  +
call sub_1021C47  +
cmp [ebp+var_C] ebx +
jz loc_101AB22  +
mov eax [edi+1E0h] +
or eax [edi+1E4h] +
jnz loc_101AAF0  +
push dword ptr [edi+1CCh]  +
call sub_10153F7  +
jmp loc_101AB22  +
test byte ptr [ebp+var_10] 2 +
jz loc_101AB22  +
push 10DFh  +
push offset aWimclosewim  +
push 80070570h  +
push offset aTheExistingWim  +
push dword ptr [edi+1CCh]  +
mov [ebp+var_8] ebx +
push ebx  +
push 1  +
mov [ebp+dwErrCode] 570h +
call sub_1015538  +
cmp [edi+1C4h] ebx +
jz loc_101AB31  +
push ebx  +
push edi  +
call sub_1014AF3  +
push dword ptr [edi+1B4h]  +
call sub_101B730  +
mov eax [edi+1CCh] +
mov [edi+1B4h] ebx +
cmp eax ebx +
jz loc_101AB61  +
push eax  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call esi  +
test eax eax +
jz loc_101AB61  +
mov [edi+1CCh] ebx +
mov eax [edi+1D0h] +
cmp eax ebx +
jz loc_101AB80  +
push eax  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call esi  +
test eax eax +
jz loc_101AB80  +
mov [edi+1D0h] ebx +
push 1F8h  +
push ebx  +
push edi  +
call memset  +
add esp 0Ch +
push edi  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call esi  +
cmp [ebp+dwErrCode] ebx +
jz loc_101ABA8  +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
mov eax [ebp+var_8] +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push edi  +
xor edi edi +
cmp esi edi +
jz loc_101ABF6  +
cmp dword ptr [esi] 0FEEDF002h +
jnz loc_101ABF6  +
push edi  +
push dword ptr [esi+18h]  +
push edi  +
call sub_101A142  +
cmp eax edi +
jz loc_101ABF6  +
mov ecx [esi+1Ch] +
mov [eax+1Ch] ecx +
mov ecx [esi+20h] +
mov [eax+20h] ecx +
mov ecx [esi+28h] +
mov [eax+28h] ecx +
mov ecx [esi+2Ch] +
mov [eax+2Ch] ecx +
mov [eax+34h] esi +
mov ecx [esi+4] +
mov [eax+4] ecx +
mov edi eax +
mov eax edi +
pop edi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
test esi esi +
jnz loc_101AC1B  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_101AC4D  +
push esi  +
call sub_1019699  +
cmp eax 0FEEDF001h +
jz loc_101AC38  +
cmp eax 0FEEDF002h +
jnz loc_101AC43  +
push 1  +
call sub_101A77F  +
jmp loc_101AC3F  +
mov edi esi +
call sub_101A902  +
mov edi eax +
jmp loc_101AC4B  +
push 6  +
call ds:SetLastError  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
test esi esi +
jz loc_101AC8D  +
push esi  +
call sub_1019699  +
cmp eax 0FEEDF001h +
jz loc_101AC89  +
cmp eax 0FEEDF002h +
jz loc_101AC80  +
push 6  +
jmp loc_101AC8F  +
call sub_101ABB4  +
mov edi eax +
jmp loc_101AC95  +
push 78h  +
jmp loc_101AC8F  +
push 57h  +
call ds:SetLastError  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
mov [ebp+var_4] edi +
cmp esi edi +
jz loc_101AD57  +
cmp dword ptr [esi] 0FEEDF001h +
jnz loc_101AD57  +
mov ebx [ebp+arg_8] +
cmp ebx edi +
jz loc_101AD57  +
mov eax [esi+1D0h] +
cmp eax edi +
jz loc_101AD35  +
cmp [eax] di +
jz loc_101AD35  +
push eax  +
call sub_102B542  +
test eax eax +
jz loc_101AD35  +
cmp [ebp+arg_4] edi +
mov edi ds:lstrlenW +
jz loc_101AD25  +
push dword ptr [esi+1D0h]  +
call edi  +
cmp [ebx] eax +
jbe loc_101AD25  +
push dword ptr [esi+1D0h]  +
call edi  +
inc eax  +
mov [ebx] eax +
push dword ptr [esi+1D0h]  +
push eax  +
push [ebp+arg_4]  +
call sub_1011320  +
mov [ebp+var_4] 1 +
jmp loc_101AD52  +
push dword ptr [esi+1D0h]  +
call edi  +
inc eax  +
push 7Ah  +
mov [ebx] eax +
pop eax  +
jmp loc_101AD4B  +
mov esi [esi+1D0h] +
mov eax 660h +
cmp esi edi +
jz loc_101AD49  +
cmp [esi] di +
jnz loc_101AD4B  +
mov [ebx] edi +
push eax  +
call ds:SetLastError  +
mov eax [ebp+var_4] +
jmp loc_101AD61  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push edi  +
mov edi [ebp+arg_0] +
xor ebx ebx +
mov [ebp+dwErrCode] ebx +
cmp edi ebx +
jz loc_101AEBF  +
cmp [edi] bx +
jz loc_101AEBF  +
push esi  +
push 1F8h  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
cmp esi ebx +
jz loc_101ADD8  +
or dword ptr [esi+4] 0FFFFFFFFh +
push ebx  +
push edi  +
mov dword ptr [esi] 0FEEDF001h +
mov dword ptr [esi+194h] 0C0000000h +
mov dword ptr [esi+198h] 3 +
call sub_101509B  +
mov [esi+1CCh] eax +
cmp eax ebx +
jnz loc_101ADEA  +
push 0Eh  +
call sub_1019F52  +
mov [ebp+dwErrCode] eax +
cmp eax ebx +
jnz loc_101AEA0  +
push dword_1049A84  +
push dword_1049A80  +
push esi  +
call sub_101D8DE  +
test eax eax +
jz loc_101AE06  +
cmp dword ptr [esi+4] 0FFFFFFFFh +
jnz loc_101AE12  +
mov [ebp+dwErrCode] 20h +
jmp loc_101AEA0  +
push ebx  +
push esi  +
call sub_101D32E  +
mov ebx 80070000h +
mov edi offset aValidateandcle +
test eax eax +
jnz loc_101AE5A  +
push 0Eh  +
call sub_1019F52  +
mov [ebp+dwErrCode] eax +
test eax eax +
jle loc_101AE3C  +
and eax 0FFFFh +
or eax ebx +
push 11F7h  +
push edi  +
push eax  +
push offset aFailToReadWimH  +
push [ebp+arg_0]  +
push 0  +
push 1  +
call sub_1015538  +
cmp [ebp+dwErrCode] 0 +
jnz loc_101AEA0  +
mov eax [esi+28h] +
test al 40h +
jz loc_101AEA0  +
push 0  +
and eax 0FFFFFFBFh +
push esi  +
mov [esi+28h] eax +
call sub_101D69C  +
test eax eax +
jnz loc_101AEA0  +
push 0Eh  +
call sub_1019F52  +
mov [ebp+dwErrCode] eax +
test eax eax +
jle loc_101AE88  +
and eax 0FFFFh +
or eax ebx +
push 1209h  +
push edi  +
push eax  +
push offset aFailToUpdateTh  +
push [ebp+arg_0]  +
push 0  +
push 1  +
call sub_1015538  +
test esi esi +
jz loc_101AEAA  +
push esi  +
call sub_101ABFF  +
cmp [ebp+dwErrCode] 0 +
pop esi  +
jz loc_101AEBA  +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
mov eax [ebp+dwErrCode] +
jmp loc_101AEC2  +
push 57h  +
pop eax  +
pop edi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 234h +
mov eax dword_1049010 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_14] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov [ebp+var_230] eax +
xor eax eax +
push 206h  +
mov [ebp+FileName] ax +
xor esi esi +
lea eax [ebp-20Ah] +
push esi  +
push eax  +
mov [ebp+var_22C] edi +
call memset  +
mov ebx ds:SetLastError +
add esp 0Ch +
push esi  +
mov [ebp+FilePart] esi +
mov [ebp+dwErrCode] esi +
mov [ebp+var_218] 1 +
mov [ebp+var_220] esi +
mov [ebp+var_214] esi +
call ebx  +
cmp edi esi +
jz loc_101B67F  +
cmp [edi] si +
jz loc_101B67F  +
lea eax [ebp+FilePart] +
push eax  +
lea eax [ebp+FileName] +
push eax  +
push 104h  +
push edi  +
call ds:GetFullPathNameW  +
test eax eax +
jz loc_101B67F  +
cmp [ebp+FileName] si +
jz loc_101B67F  +
mov eax [ebp+FilePart] +
cmp eax esi +
jz loc_101B67F  +
cmp [eax] si +
jz loc_101B67F  +
mov edi ds:GetProcessHeap +
mov ebx 1F8h +
push ebx  +
push 8  +
call edi  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
test esi esi +
jz loc_101B689  +
push ebx  +
push 0  +
push esi  +
call memset  +
add esp 0Ch +
test [ebp+arg_4] 80000000h +
mov dword ptr [esi] 0FEEDF001h +
jz loc_101AFDF  +
or dword ptr [esi+194h] 80000000h +
mov eax [ebp+arg_4] +
and eax 40000000h +
mov [ebp+var_234] eax +
jz loc_101B003  +
or dword ptr [esi+194h] 0C0000000h +
mov [ebp+var_220] 1 +
mov eax 20000000h +
test [ebp+arg_4] eax +
jz loc_101B017  +
or [esi+194h] eax +
or [ebp+arg_C] 40h +
mov eax [ebp+arg_8] +
dec eax  +
push 2  +
pop ecx  +
jz loc_101B062  +
dec eax  +
jz loc_101B05A  +
dec eax  +
jz loc_101B04E  +
dec eax  +
jz loc_101B042  +
push esi  +
push 0  +
call edi  +
push eax  +
call ds:HeapFree  +
push 57h  +
call ds:SetLastError  +
jmp loc_101B689  +
mov dword ptr [esi+198h] 4 +
jmp loc_101B06C  +
mov dword ptr [esi+198h] 3 +
jmp loc_101B06C  +
mov [esi+198h] ecx +
jmp loc_101B06C  +
mov dword ptr [esi+198h] 1 +
mov eax [ebp+arg_10] +
cmp eax ecx +
ja loc_101B029  +
test [ebp+arg_C] 0FFFFFFBDh +
mov [esi+1A0h] eax +
jnz loc_101B029  +
test byte ptr [ebp+arg_C] 2 +
jz loc_101B08E  +
or [esi+19Ch] ecx +
test byte ptr [ebp+arg_C] 40h +
jz loc_101B09B  +
or dword ptr [esi+19Ch] 40h +
push 0  +
lea eax [ebp+FileName] +
push eax  +
call sub_101509B  +
mov [esi+1CCh] eax +
test eax eax +
jnz loc_101B0CD  +
call ds:GetLastError  +
push esi  +
push 0  +
mov ebx eax +
call edi  +
push eax  +
call ds:HeapFree  +
push ebx  +
jmp loc_101B037  +
or ebx 0FFFFFFFFh +
mov [esi+4] ebx +
push dword_1049A84  +
push dword_1049A80  +
push esi  +
call sub_101D8DE  +
test eax eax +
jz loc_101B62D  +
cmp [esi+4] ebx +
jz loc_101B62D  +
mov ebx ds:GetLastError +
push 3  +
pop eax  +
cmp [ebp+arg_8] eax +
jnz loc_101B116  +
mov [esi+198h] eax +
mov [ebp+var_224] 1 +
jmp loc_101B15B  +
cmp [ebp+arg_8] 4 +
jnz loc_101B143  +
call ebx  +
cmp eax 0B7h +
jnz loc_101B143  +
push 0  +
mov dword ptr [esi+198h] 3 +
mov [ebp+var_224] 1 +
call ds:SetLastError  +
jmp loc_101B15B  +
and [ebp+var_224] 0 +
and [ebp+var_218] 0 +
mov dword ptr [esi+198h] 1 +
push esi  +
call sub_101B6D7  +
call sub_10200DC  +
cmp [ebp+var_218] 0 +
mov [esi+1B0h] eax +
mov eax dword_1049A80 +
mov [esi+1E0h] eax +
mov eax dword_1049A84 +
mov [esi+1E4h] eax +
jz loc_101B514  +
and [ebp+var_21C] 0 +
xor eax eax +
lea edi [ebp+var_218] +
stos   +
mov edi [ebp+var_220] +
test edi edi +
jnz loc_101B1B0  +
or dword ptr [esi+190h] 1 +
lea eax [ebp+var_21C] +
push eax  +
push dword ptr [esi+4]  +
call sub_1019FD0  +
test eax eax +
jnz loc_101B1D0  +
push 0Dh  +
call sub_1019F52  +
mov [ebp+dwErrCode] eax +
test edi edi +
jz loc_101B1F8  +
cmp [ebp+dwErrCode] 0 +
jnz loc_101B27F  +
test byte ptr [esi+19Ch] 40h +
jz loc_101B201  +
push dword ptr [esi+4]  +
call sub_101C6F0  +
mov [ebp+var_214] eax +
cmp [ebp+dwErrCode] 0 +
jnz loc_101B27F  +
push [ebp+var_214]  +
push esi  +
call sub_101D32E  +
test eax eax +
jnz loc_101B266  +
test edi edi +
jz loc_101B22F  +
mov eax dword_1049A80 +
cmp eax [ebp+var_21C] +
jnz loc_101B22F  +
mov eax dword_1049A84 +
cmp eax [ebp+var_218] +
jz loc_101B27F  +
call ebx  +
mov [ebp+dwErrCode] eax +
test eax eax +
jle loc_101B245  +
and eax 0FFFFh +
or eax 80070000h +
push 187h  +
push offset aWimcreatefile  +
push eax  +
push offset aFailToReadWimH  +
push dword ptr [esi+1CCh]  +
push 0  +
push 1  +
call sub_1015538  +
jmp loc_101B27F  +
test byte ptr [esi+28h] 8 +
jz loc_101B27F  +
cmp [ebp+var_234] 0 +
jz loc_101B27F  +
mov [ebp+dwErrCode] 5 +
test edi edi +
jz loc_101B2F4  +
cmp [ebp+dwErrCode] 0 +
jnz loc_101B399  +
test byte ptr [esi+19Ch] 40h +
jz loc_101B307  +
test byte ptr [esi+28h] 40h +
jz loc_101B307  +
cmp [ebp+var_214] 0 +
jz loc_101B2B0  +
push dword ptr [esi+4]  +
call sub_101C770  +
or dword ptr [esi+190h] 1 +
push esi  +
call sub_101ABFF  +
push [ebp+var_22C]  +
call sub_101AD6D  +
test eax eax +
jnz loc_101B2EE  +
push [ebp+var_230]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+var_22C]  +
call sub_101AECD  +
jmp loc_101B68B  +
push eax  +
jmp loc_101B037  +
cmp [ebp+dwErrCode] 0 +
jnz loc_101B4FA  +
mov edi [ebp+var_220] +
push esi  +
call sub_101C8B2  +
test eax eax +
jz loc_101B31B  +
push esi  +
call sub_101CCDC  +
test eax eax +
jnz loc_101B333  +
call ebx  +
mov [ebp+dwErrCode] eax +
test eax eax +
jnz loc_101B399  +
mov [ebp+dwErrCode] 570h +
jmp loc_101B399  +
test dword ptr [esi+194h] 80000000h +
jz loc_101B367  +
push esi  +
call sub_101D9B4  +
test eax eax +
jnz loc_101B367  +
test edi edi +
jz loc_101B38F  +
mov eax dword_1049A80 +
cmp eax [ebp+var_21C] +
jnz loc_101B38F  +
mov eax dword_1049A84 +
cmp eax [ebp+var_218] +
jnz loc_101B38F  +
push esi  +
call sub_101C7B0  +
test eax eax +
jnz loc_101B399  +
test edi edi +
jz loc_101B38F  +
mov eax dword_1049A80 +
cmp eax [ebp+var_21C] +
jnz loc_101B38F  +
mov eax dword_1049A84 +
cmp eax [ebp+var_218] +
jz loc_101B399  +
mov [ebp+dwErrCode] 0Dh +
test edi edi +
jz loc_101B3E1  +
cmp [ebp+dwErrCode] 0 +
jnz loc_101B4FA  +
test byte ptr [esi+19Ch] 40h +
jz loc_101B3EE  +
push [ebp+var_214]  +
or dword ptr [esi+28h] 40h +
push esi  +
call sub_101D69C  +
test eax eax +
jz loc_101B3D0  +
or dword ptr [esi+190h] 8 +
jmp loc_101B3DD  +
push 0Eh  +
call sub_1019F52  +
mov [ebp+dwErrCode] eax +
and dword ptr [esi+28h] 0FFFFFFBFh +
cmp [ebp+dwErrCode] 0 +
jnz loc_101B4FA  +
mov eax [esi+60h] +
add eax [esi+58h] +
mov ecx [esi+64h] +
adc ecx [esi+5Ch] +
mov edx [esi+9Ch] +
cmp edx ecx +
mov edi [esi+98h] +
mov [esi+1D8h] eax +
mov [esi+1DCh] ecx +
jl loc_101B43E  +
jg loc_101B41C  +
cmp edi eax +
jb loc_101B43E  +
mov eax [esi+0A0h] +
mov ecx [esi+0A4h] +
mov ebx eax +
or ebx ecx +
jz loc_101B43E  +
add eax edi +
adc ecx edx +
mov [esi+1D8h] eax +
mov [esi+1DCh] ecx +
mov edx [esi+124h] +
cmp edx [esi+1DCh] +
mov edi [esi+120h] +
jl loc_101B47E  +
jg loc_101B45C  +
cmp edi [esi+1D8h] +
jb loc_101B47E  +
mov eax [esi+128h] +
mov ecx [esi+12Ch] +
mov ebx eax +
or ebx ecx +
jz loc_101B47E  +
add eax edi +
adc ecx edx +
mov [esi+1D8h] eax +
mov [esi+1DCh] ecx +
mov eax [esi+1D8h] +
mov [esi+1E0h] eax +
mov eax [esi+1DCh] +
push esi  +
mov [esi+1E4h] eax +
call sub_1019755  +
test eax 100h +
jz loc_101B4B5  +
mov eax [esi+58h] +
mov [esi+1D8h] eax +
mov eax [esi+5Ch] +
mov [esi+1DCh] eax +
xor edi edi +
cmp [ebp+var_220] edi +
jz loc_101B4FA  +
push edi  +
push edi  +
push dword ptr [esi+1E4h]  +
push dword ptr [esi+1E0h]  +
push dword ptr [esi+4]  +
call sub_101A018  +
push dword ptr [esi+4]  +
call sub_101A0D0  +
push edi  +
push edi  +
push dword ptr [esi+1DCh]  +
push dword ptr [esi+1D8h]  +
push dword ptr [esi+4]  +
call sub_101A018  +
or dword ptr [esi+190h] 10h +
cmp [ebp+var_214] 0 +
jz loc_101B5B3  +
push dword ptr [esi+4]  +
call sub_101C770  +
jmp loc_101B5B3  +
mov eax ds:dword_1003090 +
mov ecx ds:dword_1003094 +
mov [esi+18h] eax +
mov eax [ebp+arg_10] +
dec eax  +
mov edi 0D0h +
mov [esi+1Ch] ecx +
mov [esi+20h] edi +
mov dword ptr [esi+24h] 10D00h +
jz loc_101B550  +
dec eax  +
jnz loc_101B568  +
or dword ptr [esi+28h] 40002h +
mov dword ptr [esi+1A0h] 2 +
jmp loc_101B561  +
or dword ptr [esi+28h] 20002h +
mov dword ptr [esi+1A0h] 1 +
mov dword ptr [esi+2Ch] 8000h +
xor eax eax +
inc eax  +
mov [esi+40h] ax +
mov [esi+42h] ax +
lea eax [esi+30h] +
push eax  +
call ds:UuidCreate  +
mov [ebp+dwErrCode] eax +
test eax eax +
jnz loc_101B59F  +
push eax  +
push esi  +
call sub_101D69C  +
test eax eax +
jnz loc_101B59F  +
push 0Eh  +
call sub_1019F52  +
mov [ebp+dwErrCode] eax +
and dword ptr [esi+1DCh] 0 +
or dword ptr [esi+190h] 10h +
mov [esi+1D8h] edi +
cmp [ebp+dwErrCode] 0 +
jnz loc_101B61C  +
mov eax [esi+28h] +
test eax 40000h +
jz loc_101B5D2  +
mov dword ptr [esi+1A0h] 2 +
jmp loc_101B5DE  +
shr eax 11h +
and eax 1 +
mov [esi+1A0h] eax +
mov ax [esi+40h] +
mov [esi+1ACh] ax +
mov ax [esi+42h] +
mov [esi+1AEh] ax +
mov eax [ebp+var_230] +
mov [esi+1ECh] esi +
test eax eax +
jz loc_101B60C  +
mov ecx [ebp+var_224] +
mov [eax] ecx +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
mov eax esi +
jmp loc_101B68B  +
or dword ptr [esi+190h] 1 +
push esi  +
call sub_101ABFF  +
xor esi esi +
jmp loc_101B60C  +
call ds:GetLastError  +
mov [ebp+dwErrCode] eax +
mov eax [esi+4] +
cmp eax ebx +
jz loc_101B649  +
push eax  +
call sub_101A072  +
mov [esi+4] ebx +
mov eax [esi+1CCh] +
mov ebx ds:HeapFree +
test eax eax +
jz loc_101B66C  +
push eax  +
push 0  +
call edi  +
push eax  +
call ebx  +
test eax eax +
jz loc_101B66C  +
and dword ptr [esi+1CCh] 0 +
push esi  +
push 0  +
call edi  +
push eax  +
call ebx  +
push [ebp+dwErrCode]  +
jmp loc_101B037  +
push 57h  +
call sub_1019F52  +
push eax  +
call ebx  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010796  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp sub_1015658  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jge loc_101B6CE  +
movzx eax word ptr [ebp+arg_0] +
test eax eax +
jnz loc_101B6C7  +
push 1Fh  +
pop eax  +
push eax  +
call ds:SetLastError  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_101B726  +
push edi  +
call sub_1019699  +
cmp eax 0FEEDF001h +
jnz loc_101B726  +
push edi  +
call sub_10199FA  +
test eax eax +
jnz loc_101B726  +
push esi  +
push 4  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
push esi  +
push edi  +
call sub_1019A17  +
test esi esi +
jz loc_101B725  +
push offset dword_10030B8  +
push esi  +
call sub_102C447  +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpMem] 0 +
jz loc_101B755  +
push [ebp+lpMem]  +
call sub_102BE93  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
xor edi edi +
mov [ebp+lpMem] ebx +
cmp eax ebx +
jbe loc_101B775  +
lea edi [eax-1] +
push eax  +
lea eax [ebp+lpMem] +
push offset aU  +
push eax  +
call sub_101160D  +
mov esi eax +
add esp 0Ch +
cmp esi ebx +
jl loc_101B894  +
push edi  +
push [ebp+lpMem]  +
push offset aIndex  +
push offset aWimImage  +
push [ebp+arg_0]  +
call sub_102C491  +
mov esi eax +
add esp 14h +
cmp esi ebx +
jl loc_101B894  +
push edi  +
push [ebp+arg_4]  +
push ebx  +
push offset aWimImageDircou  +
push [ebp+arg_0]  +
call sub_102C491  +
mov esi eax +
add esp 14h +
cmp esi ebx +
jl loc_101B894  +
push edi  +
push [ebp+arg_8]  +
push ebx  +
push offset aWimImageFileco  +
push [ebp+arg_0]  +
call sub_102C491  +
mov esi eax +
add esp 14h +
cmp esi ebx +
jl loc_101B894  +
push edi  +
push [ebp+arg_C]  +
push ebx  +
push offset aWimImageTotalb  +
push [ebp+arg_0]  +
call sub_102C491  +
mov esi eax +
add esp 14h +
cmp esi ebx +
jl loc_101B894  +
push edi  +
push [ebp+arg_10]  +
push ebx  +
push offset aWimImageHardli  +
push [ebp+arg_0]  +
call sub_102C491  +
mov esi eax +
add esp 14h +
cmp esi ebx +
jl loc_101B894  +
push edi  +
push [ebp+arg_14]  +
push ebx  +
push offset aWimImageCreati  +
push [ebp+arg_0]  +
call sub_102C491  +
mov esi eax +
add esp 14h +
cmp esi ebx +
jl loc_101B894  +
push edi  +
push [ebp+arg_18]  +
push ebx  +
push offset aWimImageCrea_0  +
push [ebp+arg_0]  +
call sub_102C491  +
mov esi eax +
add esp 14h +
cmp esi ebx +
jl loc_101B894  +
push edi  +
push [ebp+arg_1C]  +
push ebx  +
push offset aWimImageLastmo  +
push [ebp+arg_0]  +
call sub_102C491  +
mov esi eax +
add esp 14h +
cmp esi ebx +
jl loc_101B894  +
push edi  +
push [ebp+arg_20]  +
push ebx  +
push offset aWimImageLast_0  +
push [ebp+arg_0]  +
call sub_102C491  +
add esp 14h +
mov esi eax +
cmp [ebp+lpMem] ebx +
jz loc_101B8AA  +
push [ebp+lpMem]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push ebx  +
push esi  +
xor esi esi +
push edi  +
xor eax eax +
mov dword ptr [ebp+SystemTimeAsFileTime] esi +
lea edi [ebp-28h] +
stos   +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
mov [ebp+lpMem] esi +
mov [ebp+var_C] esi +
mov [ebp+var_10] esi +
mov [ebp+var_14] esi +
mov [ebp+var_18] esi +
mov [ebp+var_1C] esi +
mov [ebp+var_20] esi +
mov [ebp+var_24] esi +
xor ebx ebx +
call ds:GetSystemTimeAsFileTime  +
push dword ptr [ebp-28h]  +
mov edi offset a0x08x_0 +
lea eax [ebp+var_20] +
push edi  +
push eax  +
call sub_101160D  +
add esp 0Ch +
cmp eax esi +
mov [ebp+var_4] eax +
jl loc_101B921  +
push dword ptr [ebp+SystemTimeAsFileTime]  +
lea eax [ebp+var_24] +
push edi  +
push eax  +
call sub_101160D  +
add esp 0Ch +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
cmp eax esi +
jbe loc_101B92B  +
lea ebx [eax-1] +
cmp [ebp+var_4] esi +
jl loc_101BA07  +
mov edi [ebp+arg_0] +
push ebx  +
lea eax [ebp+lpMem] +
push eax  +
push esi  +
push offset aWimImageDircou  +
push edi  +
call sub_102C4D0  +
add esp 14h +
cmp eax esi +
mov [ebp+var_4] eax +
jl loc_101BA07  +
push ebx  +
lea eax [ebp+var_C] +
push eax  +
push esi  +
push offset aWimImageFileco  +
push edi  +
call sub_102C4D0  +
add esp 14h +
cmp eax esi +
mov [ebp+var_4] eax +
jl loc_101BA07  +
push ebx  +
lea eax [ebp+var_10] +
push eax  +
push esi  +
push offset aWimImageTotalb  +
push edi  +
call sub_102C4D0  +
add esp 14h +
cmp eax esi +
mov [ebp+var_4] eax +
jl loc_101BA07  +
push ebx  +
lea eax [ebp+var_14] +
push eax  +
push esi  +
push offset aWimImageHardli  +
push edi  +
call sub_102C4D0  +
add esp 14h +
cmp eax esi +
mov [ebp+var_4] eax +
jl loc_101BA07  +
push ebx  +
lea eax [ebp+var_18] +
push eax  +
push esi  +
push offset aWimImageCreati  +
push edi  +
call sub_102C4D0  +
add esp 14h +
cmp eax esi +
mov [ebp+var_4] eax +
jl loc_101BA07  +
push ebx  +
lea eax [ebp+var_1C] +
push eax  +
push esi  +
push offset aWimImageCrea_0  +
push edi  +
call sub_102C4D0  +
add esp 14h +
cmp eax esi +
mov [ebp+var_4] eax +
jl loc_101BA07  +
push [ebp+var_24]  +
mov eax [ebp+arg_4] +
push [ebp+var_20]  +
push [ebp+var_1C]  +
push [ebp+var_18]  +
push [ebp+var_14]  +
push [ebp+var_10]  +
push [ebp+var_C]  +
push [ebp+lpMem]  +
push [ebp+arg_8]  +
call sub_101B75E  +
mov [ebp+var_4] eax +
mov edi ds:HeapFree +
mov ebx ds:GetProcessHeap +
cmp [ebp+lpMem] esi +
jz loc_101BA28  +
push [ebp+lpMem]  +
push esi  +
call ebx  +
push eax  +
call edi  +
test eax eax +
jz loc_101BA28  +
mov [ebp+lpMem] esi +
cmp [ebp+var_C] esi +
jz loc_101BA3D  +
push [ebp+var_C]  +
push esi  +
call ebx  +
push eax  +
call edi  +
test eax eax +
jz loc_101BA3D  +
mov [ebp+var_C] esi +
cmp [ebp+var_10] esi +
jz loc_101BA52  +
push [ebp+var_10]  +
push esi  +
call ebx  +
push eax  +
call edi  +
test eax eax +
jz loc_101BA52  +
mov [ebp+var_10] esi +
cmp [ebp+var_14] esi +
jz loc_101BA67  +
push [ebp+var_14]  +
push esi  +
call ebx  +
push eax  +
call edi  +
test eax eax +
jz loc_101BA67  +
mov [ebp+var_14] esi +
cmp [ebp+var_18] esi +
jz loc_101BA7C  +
push [ebp+var_18]  +
push esi  +
call ebx  +
push eax  +
call edi  +
test eax eax +
jz loc_101BA7C  +
mov [ebp+var_18] esi +
cmp [ebp+var_1C] esi +
jz loc_101BA91  +
push [ebp+var_1C]  +
push esi  +
call ebx  +
push eax  +
call edi  +
test eax eax +
jz loc_101BA91  +
mov [ebp+var_1C] esi +
cmp [ebp+var_20] esi +
jz loc_101BAA6  +
push [ebp+var_20]  +
push esi  +
call ebx  +
push eax  +
call edi  +
test eax eax +
jz loc_101BAA6  +
mov [ebp+var_20] esi +
cmp [ebp+var_24] esi +
jz loc_101BABB  +
push [ebp+var_24]  +
push esi  +
call ebx  +
push eax  +
call edi  +
test eax eax +
jz loc_101BABB  +
mov [ebp+var_24] esi +
push [ebp+var_4]  +
call sub_101B6B1  +
xor eax eax +
cmp [ebp+var_4] esi +
pop edi  +
pop esi  +
setnl al  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 54h +
push ebx  +
push esi  +
push edi  +
xor esi esi +
xor eax eax +
mov [ebp+var_54] esi +
lea edi [ebp+var_50] +
stos   +
stos   +
stos   +
stos   +
mov edi [ebp+arg_0] +
mov [ebp+var_18] esi +
mov [ebp+var_8] esi +
mov [ebp+var_4] esi +
cmp edi esi +
jz loc_101BEDF  +
cmp [ebp+arg_4] esi +
jz loc_101BEDF  +
cmp [ebp+lpMem] esi +
jz loc_101BEDF  +
push edi  +
call sub_1019699  +
mov ebx 0FEEDF001h +
mov [ebp+var_14] eax +
cmp eax ebx +
jnz loc_101BB2D  +
mov [ebp+var_C] edi +
jmp loc_101BB44  +
cmp eax 0FEEDF002h +
jnz loc_101BEDF  +
push edi  +
mov [ebp+var_18] edi +
call sub_101A106  +
mov [ebp+var_C] eax +
push [ebp+var_C]  +
call sub_10199FA  +
mov [ebp+var_10] eax +
cmp eax esi +
jz loc_101BEDB  +
push [ebp+lpMem]  +
lea eax [ebp+var_8] +
push [ebp+arg_4]  +
push eax  +
call sub_102BDE3  +
mov esi eax +
test esi esi +
jl loc_101BEB1  +
cmp [ebp+var_14] ebx +
jnz loc_101BB86  +
mov eax [ebp+var_8] +
mov [ebp+var_4] eax +
xor eax eax +
lea edi [ebp+var_8] +
stos   +
jmp loc_101BCFF  +
and [ebp+var_2C] 0 +
xor eax eax +
push [ebp+arg_0]  +
lea edi [ebp+var_28] +
stos   +
stos   +
stos   +
stos   +
xor ecx ecx +
mov [ebp+var_40] ecx +
xor eax eax +
lea edi [ebp+var_3C] +
stos   +
stos   +
stos   +
stos   +
mov [ebp+lpMem] ecx +
mov [ebp+arg_4] ecx +
call sub_1019A3A  +
mov edi eax +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebp+lpMem] +
push eax  +
push [ebp+var_10]  +
call sub_102BE5A  +
mov esi eax +
test esi esi +
jl loc_101BCB7  +
lea eax [ebp+var_8] +
push eax  +
call sub_102C0C6  +
mov esi eax +
test esi esi +
jl loc_101BCB7  +
lea eax [ebp+var_2C] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
call sub_102C792  +
mov esi eax +
test esi esi +
jl loc_101BCB7  +
push offset aImage  +
lea eax [ebp+var_2C] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
call sub_102C1C5  +
mov esi eax +
test esi esi +
jl loc_101BCB7  +
lea eax [ebp+var_2C] +
push eax  +
call sub_102C5E9  +
lea eax [ebp+var_8] +
push eax  +
call sub_102C0ED  +
mov esi eax +
test esi esi +
jl loc_101BCB7  +
push [ebp+lpMem]  +
lea eax [ebp+var_4] +
push eax  +
call sub_102C447  +
mov esi eax +
test esi esi +
jl loc_101BCB7  +
lea eax [ebp+var_4] +
push eax  +
call sub_102C0C6  +
mov esi eax +
test esi esi +
jl loc_101BCB7  +
dec edi  +
push edi  +
lea eax [ebp+var_40] +
push eax  +
lea eax [ebp+var_4] +
push offset aWimImage  +
push eax  +
call sub_102C9EF  +
mov esi eax +
add esp 10h +
cmp esi 1 +
jnz loc_101BC71  +
mov esi 8007000Dh +
test esi esi +
jl loc_101BCB7  +
lea eax [ebp+var_2C] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
call sub_102C792  +
mov esi eax +
test esi esi +
jl loc_101BCB7  +
lea eax [ebp+var_2C] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_40] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
call sub_102C869  +
mov esi eax +
test esi esi +
jl loc_101BCB7  +
lea eax [ebp+var_40] +
push eax  +
call sub_102C5E9  +
lea eax [ebp+var_4] +
push eax  +
call sub_102C0ED  +
mov esi eax +
cmp [ebp+lpMem] 0 +
jz loc_101BCD7  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
test eax eax +
jz loc_101BCD7  +
and [ebp+lpMem] 0 +
lea eax [ebp+var_40] +
push eax  +
call sub_102C5E9  +
lea eax [ebp+var_2C] +
push eax  +
call sub_102C5E9  +
lea eax [ebp+var_8] +
push eax  +
call sub_102BE93  +
test esi esi +
jge loc_101BD07  +
lea eax [ebp+var_4] +
push eax  +
call sub_102BE93  +
test esi esi +
jl loc_101BEB1  +
lea eax [ebp+var_54] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
call sub_102C792  +
mov esi eax +
test esi esi +
jl loc_101BEB1  +
lea eax [ebp+var_4] +
push eax  +
call sub_102C0C6  +
mov esi eax +
test esi esi +
jl loc_101BEB1  +
push offset PrefixString  +
lea eax [ebp+var_54] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
call sub_102C1C5  +
mov esi eax +
test esi esi +
jl loc_101BEB1  +
lea eax [ebp+var_54] +
push eax  +
call sub_102C5E9  +
lea eax [ebp+var_4] +
push eax  +
call sub_102C0ED  +
mov esi eax +
test esi esi +
jl loc_101BEB1  +
cmp [ebp+var_14] 0FEEDF002h +
jnz loc_101BDCA  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
call sub_1019A3A  +
push eax  +
push [ebp+var_10]  +
call sub_101B8B8  +
test eax eax +
jnz loc_101BE69  +
mov esi ds:GetLastError +
call esi  +
mov ebx 0FFFFh +
mov edi 80070000h +
test eax eax +
jle loc_101BDAB  +
and eax ebx +
or eax edi +
test eax eax +
jge loc_101BDC0  +
call esi  +
test eax eax +
jg loc_101BDBA  +
mov esi eax +
jmp loc_101BE69  +
and eax ebx +
or eax edi +
jmp loc_101BDB3  +
mov esi 80004005h +
jmp loc_101BE69  +
cmp [ebp+var_14] ebx +
jnz loc_101BE69  +
push [ebp+arg_0]  +
call sub_101958B  +
mov [ebp+lpMem] eax +
mov ebx 0FFFFh +
mov edi 80070000h +
test eax eax +
jnz loc_101BE13  +
mov esi ds:GetLastError +
call esi  +
test eax eax +
jle loc_101BDFE  +
and eax ebx +
or eax edi +
test eax eax +
jge loc_101BE0E  +
call esi  +
test eax eax +
jle loc_101BE0A  +
and eax ebx +
or eax edi +
mov esi eax +
jmp loc_101BE13  +
mov esi 80004005h +
mov [ebp+arg_0] 1 +
test esi esi +
jl loc_101BEB1  +
mov eax [ebp+arg_0] +
cmp eax [ebp+lpMem] +
ja loc_101BE69  +
lea ecx [ebp+var_4] +
push ecx  +
push eax  +
push [ebp+var_10]  +
call sub_101B8B8  +
test eax eax +
jnz loc_101BE62  +
mov esi ds:GetLastError +
call esi  +
test eax eax +
jle loc_101BE4D  +
and eax ebx +
or eax edi +
test eax eax +
jge loc_101BE5D  +
call esi  +
test eax eax +
jle loc_101BE59  +
and eax ebx +
or eax edi +
mov esi eax +
jmp loc_101BE62  +
mov esi 80004005h +
inc [ebp+arg_0]  +
test esi esi +
jge loc_101BE22  +
test esi esi +
jl loc_101BEB1  +
mov edi [ebp+var_10] +
push edi  +
call sub_102BE93  +
mov eax [ebp+var_4] +
push [ebp+var_C]  +
mov [edi] eax +
call sub_1019755  +
test al 1 +
jnz loc_101BEAB  +
push 4  +
push [ebp+var_C]  +
call sub_10197F2  +
cmp [ebp+var_18] 0 +
jz loc_101BEA1  +
push 1  +
push [ebp+var_18]  +
call sub_10197F2  +
push 10h  +
push [ebp+var_C]  +
call sub_1019814  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
lea eax [ebp+var_54] +
push eax  +
call sub_102C5E9  +
lea eax [ebp+var_8] +
push eax  +
call sub_102BE93  +
lea eax [ebp+var_4] +
push eax  +
call sub_102BE93  +
push esi  +
call sub_101B6B1  +
xor eax eax +
test esi esi +
setnl al  +
jmp loc_101BEE9  +
push 6  +
jmp loc_101BEE1  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
xor esi esi +
mov [ebp+lpMem] esi +
mov [ebp+var_8] esi +
cmp [ebp+arg_0] esi +
jz loc_101C0D5  +
cmp [ebp+arg_C] esi +
jnz loc_101BF1E  +
cmp [ebp+hFile] 0FFFFFFFFh +
jz loc_101C0D5  +
push ebx  +
push edi  +
mov ebx 80070000h +
cmp [ebp+NumberOfBytesWritten] esi +
jz loc_101BFE8  +
push [ebp+NumberOfBytesWritten]  +
call sub_101987A  +
test al 8 +
jnz loc_101BFE8  +
push [ebp+NumberOfBytesWritten]  +
call sub_101A345  +
mov ecx eax +
xor eax eax +
and [ebp+NumberOfBytesWritten] eax +
mov dword ptr [ebp+var_10] esi +
lea edi [ebp+var_C] +
stos   +
lea eax [ebp+var_10] +
push eax  +
push ecx  +
call ds:GetFileSizeEx  +
test eax eax +
jnz loc_101BF95  +
mov esi ds:GetLastError +
call esi  +
mov edi 0FFFFh +
test eax eax +
jle loc_101BF7A  +
and eax edi +
or eax ebx +
test eax eax +
jge loc_101BF8A  +
call esi  +
test eax eax +
jle loc_101BF86  +
and eax edi +
or eax ebx +
mov esi eax +
jmp loc_101BF8F  +
mov esi 80004005h +
test esi esi +
jl loc_101BFCE  +
jmp loc_101BF9A  +
mov edi 0FFFFh +
push [ebp+var_C]  +
lea eax [ebp+NumberOfBytesWritten] +
push dword ptr [ebp+var_10]  +
push offset aI64u  +
push eax  +
call sub_101160D  +
mov esi eax +
add esp 10h +
test esi esi +
jl loc_101BFCE  +
push [ebp+NumberOfBytesWritten]  +
push 0  +
push offset aWimTotalbytes  +
push [ebp+arg_0]  +
call sub_102C491  +
add esp 10h +
mov esi eax +
cmp [ebp+NumberOfBytesWritten] 0 +
jz loc_101BFED  +
push [ebp+NumberOfBytesWritten]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
jmp loc_101BFED  +
mov edi 0FFFFh +
test esi esi +
jl loc_101C0A4  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+lpMem] +
push eax  +
push [ebp+arg_0]  +
call sub_102BE5A  +
mov esi eax +
test esi esi +
jl loc_101C0A4  +
mov eax [ebp+lpMem] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_101C015  +
sub eax edx +
sar eax 1 +
cmp [ebp+hFile] 0FFFFFFFFh +
lea esi [eax+eax+2] +
jnz loc_101C056  +
push esi  +
push 40h  +
call ds:LocalAlloc  +
mov ecx [ebp+arg_C] +
mov [ecx] eax +
test eax eax +
jz loc_101C07D  +
push esi  +
push [ebp+lpMem]  +
push eax  +
call memcpy  +
mov eax [ebp+arg_10] +
add esp 0Ch +
add esi 0FFFFFFFEh +
mov [eax] esi +
jmp loc_101C079  +
and [ebp+NumberOfBytesWritten] 0 +
push 0  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
add esi 0FFFFFFFEh +
push esi  +
push [ebp+lpMem]  +
push [ebp+hFile]  +
call ds:WriteFile  +
test eax eax +
jz loc_101C07D  +
cmp [ebp+NumberOfBytesWritten] esi +
jnz loc_101C07D  +
xor esi esi +
jmp loc_101C0A4  +
mov esi ds:GetLastError +
call esi  +
test eax eax +
jle loc_101C08F  +
and eax edi +
or eax ebx +
test eax eax +
jge loc_101C09F  +
call esi  +
test eax eax +
jle loc_101C09B  +
and eax edi +
or eax ebx +
mov esi eax +
jmp loc_101C0A4  +
mov esi 80004005h +
cmp [ebp+lpMem] 0 +
pop edi  +
pop ebx  +
jz loc_101C0C6  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
test eax eax +
jz loc_101C0C6  +
and [ebp+lpMem] 0 +
push esi  +
call sub_101B6B1  +
xor eax eax +
test esi esi +
setnl al  +
jmp loc_101C0DF  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop esi  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+dwBytes] +
push eax  +
push [ebp+arg_18]  +
xor edi edi +
push [ebp+arg_14]  +
mov [ebp+lpMem] edi +
mov [ebp+dwBytes] edi +
mov [ebp+var_C] edi +
call sub_1011101  +
cmp [ebp+NumberOfBytesRead] edi +
jz loc_101C246  +
mov ebx [ebp+arg_4] +
cmp [ebp+DistanceToMoveHigh] edi +
jnz loc_101C128  +
cmp ebx 0FFFFFFFFh +
jz loc_101C246  +
cmp eax edi +
jl loc_101C246  +
cmp [ebp+arg_14] edi +
jnz loc_101C13E  +
cmp [ebp+arg_18] edi +
jz loc_101C246  +
push [ebp+NumberOfBytesRead]  +
call sub_10199FA  +
mov esi eax +
mov [ebp+arg_4] esi +
cmp esi edi +
jz loc_101C246  +
push esi  +
call sub_102BE93  +
cmp ebx 0FFFFFFFFh +
jnz loc_101C167  +
push [ebp+dwBytes]  +
push [ebp+DistanceToMoveHigh]  +
push esi  +
jmp loc_101C1BD  +
mov eax [ebp+arg_10] +
mov [ebp+NumberOfBytesRead] edi +
mov edi [ebp+dwBytes] +
push edi  +
push 8  +
mov [ebp+DistanceToMoveHigh] eax +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
mov [ebp+lpMem] esi +
test esi esi +
jz loc_101C1C4  +
push 0  +
lea eax [ebp+DistanceToMoveHigh] +
push eax  +
push [ebp+lDistanceToMove]  +
push ebx  +
call ds:SetFilePointer  +
test eax eax +
jz loc_101C1C4  +
push 0  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push edi  +
push esi  +
push ebx  +
call ds:ReadFile  +
test eax eax +
jz loc_101C1C4  +
cmp [ebp+NumberOfBytesRead] edi +
jnz loc_101C1C4  +
push edi  +
push esi  +
push [ebp+arg_4]  +
call sub_102BDE3  +
jmp loc_101C1EC  +
mov ebx ds:GetLastError +
call ebx  +
mov edi 0FFFFh +
mov esi 80070000h +
test eax eax +
jle loc_101C1E0  +
and eax edi +
or eax esi +
test eax eax +
jge loc_101C1F0  +
call ebx  +
test eax eax +
jle loc_101C1EC  +
and eax edi +
or eax esi +
mov esi eax +
jmp loc_101C1F5  +
mov esi 80004005h +
test esi esi +
jl loc_101C21F  +
lea eax [ebp+var_C] +
push eax  +
push offset aWimImage_0  +
push [ebp+arg_4]  +
call sub_102C4B2  +
mov esi eax +
add esp 0Ch +
test esi esi +
jl loc_101C21F  +
mov eax [ebp+arg_1C] +
test eax eax +
jz loc_101C21F  +
mov ecx [ebp+var_C] +
mov [eax] ecx +
cmp [ebp+lpMem] 0 +
jz loc_101C237  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
push esi  +
call sub_101B6B1  +
xor eax eax +
test esi esi +
setnl al  +
jmp loc_101C250  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor ecx ecx +
xor eax eax +
mov [ebp+var_1C] ecx +
lea edi [ebp+var_18] +
stos   +
stos   +
stos   +
stos   +
mov [ebp+lpMem] ecx +
mov [ebp+var_8] ecx +
cmp esi ecx +
jz loc_101C3EC  +
cmp [ebp+arg_4] ecx +
jz loc_101C3EC  +
cmp [ebp+arg_8] ecx +
jz loc_101C3EC  +
push esi  +
call sub_1019699  +
mov ebx eax +
mov edi 0FEEDF002h +
cmp ebx 0FEEDF001h +
jz loc_101C2BD  +
cmp ebx edi +
jnz loc_101C3EC  +
push esi  +
call sub_101A106  +
jmp loc_101C2BF  +
mov eax esi +
push eax  +
call sub_10199FA  +
mov esi eax +
test esi esi +
jz loc_101C3E8  +
cmp ebx edi +
jnz loc_101C2FD  +
push [ebp+arg_0]  +
call sub_1019A3A  +
dec eax  +
push eax  +
lea eax [ebp+var_1C] +
push eax  +
push offset aWimImage  +
push esi  +
call sub_102C9EF  +
mov ebx eax +
add esp 10h +
cmp ebx 1 +
jnz loc_101C309  +
mov ebx 8007000Dh +
jmp loc_101C309  +
lea eax [ebp+var_1C] +
push eax  +
push esi  +
call sub_102C792  +
mov ebx eax +
test ebx ebx +
jl loc_101C3B1  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+lpMem] +
push eax  +
lea eax [ebp+var_1C] +
push eax  +
push esi  +
call sub_102C05B  +
test eax eax +
jge loc_101C33B  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+lpMem] +
push eax  +
push esi  +
call sub_102BE5A  +
mov ebx eax +
test ebx ebx +
jl loc_101C3B1  +
mov eax [ebp+lpMem] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_101C341  +
sub eax edx +
sar eax 1 +
lea esi [eax+eax+2] +
push esi  +
push 40h  +
xor ebx ebx +
call ds:LocalAlloc  +
mov edi eax +
test edi edi +
jz loc_101C380  +
push esi  +
push [ebp+lpMem]  +
push edi  +
call memcpy  +
mov eax [ebp+arg_4] +
mov [eax] edi +
mov eax [ebp+arg_8] +
add esp 0Ch +
add esi 0FFFFFFFEh +
mov [eax] esi +
jmp loc_101C3B1  +
mov ebx ds:GetLastError +
call ebx  +
mov edi 0FFFFh +
mov esi 80070000h +
test eax eax +
jle loc_101C39C  +
and eax edi +
or eax esi +
test eax eax +
jge loc_101C3AC  +
call ebx  +
test eax eax +
jle loc_101C3A8  +
and eax edi +
or eax esi +
mov ebx eax +
jmp loc_101C3B1  +
mov ebx 80004005h +
xor esi esi +
cmp [ebp+lpMem] esi +
jz loc_101C3D0  +
push [ebp+lpMem]  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
test eax eax +
jz loc_101C3D0  +
mov [ebp+lpMem] esi +
lea eax [ebp+var_1C] +
push eax  +
call sub_102C5E9  +
push ebx  +
call sub_101B6B1  +
xor eax eax +
cmp ebx esi +
setnl al  +
jmp loc_101C3F6  +
push 6  +
jmp loc_101C3EE  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
cmp [ebp+arg_0] esi +
jz loc_101C42B  +
cmp [ebp+arg_4] esi +
jz loc_101C42B  +
push [ebp+arg_0]  +
call sub_101990E  +
cmp eax esi +
jz loc_101C42B  +
push [ebp+arg_4]  +
push eax  +
call sub_10202F8  +
mov esi eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101C402  +
test eax eax +
jz loc_101C450  +
mov eax [eax+4] +
jmp loc_101C452  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
lea eax [edi+14h] +
push eax  +
push [ebp+arg_0]  +
xor esi esi +
call sub_101C402  +
test eax eax +
jz loc_101C487  +
mov esi [eax+8] +
jmp loc_101C483  +
cmp [esi] edi +
jz loc_101C487  +
mov esi [esi+28h] +
test esi esi +
jnz loc_101C47C  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
cmp [ebp+arg_0] esi +
jz loc_101C4E3  +
push edi  +
mov edi [ebp+arg_4] +
cmp edi esi +
jz loc_101C4E2  +
push ebx  +
push [ebp+arg_0]  +
call sub_101990E  +
mov ebx eax +
test ebx ebx +
jz loc_101C4E1  +
push 10h  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
test esi esi +
jz loc_101C4E1  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
push esi  +
push edi  +
push ebx  +
mov [esi] edi +
call sub_102027D  +
pop ebx  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
add ebx 14h +
push ebx  +
push [ebp+arg_0]  +
xor edi edi +
call sub_101C402  +
mov esi eax +
test esi esi +
jnz loc_101C51D  +
push ebx  +
push [ebp+arg_0]  +
call sub_101C494  +
mov esi eax +
test esi esi +
jz loc_101C54C  +
push 2Ch  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov edi eax +
test edi edi +
jz loc_101C54C  +
mov eax [ebp+arg_4] +
or dword ptr [edi+4] 0FFFFFFFFh +
mov [edi] eax +
mov eax [esi+8] +
mov [edi+28h] eax +
mov [edi+24h] esi +
inc dword ptr [esi+4]  +
mov [esi+8] edi +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jz loc_101C5C0  +
push ebx  +
mov ebx ds:GetProcessHeap +
push esi  +
push edi  +
mov edi ds:HeapFree +
mov esi [eax+8] +
test esi esi +
jz loc_101C5B5  +
mov ecx [esi+28h] +
mov [eax+8] ecx +
mov eax [esi+4] +
cmp eax 0FFFFFFFFh +
jz loc_101C591  +
push eax  +
call ds:CloseHandle  +
mov eax [esi+8] +
test eax eax +
jz loc_101C5A8  +
push eax  +
push 0  +
call ebx  +
push eax  +
call edi  +
test eax eax +
jz loc_101C5A8  +
and dword ptr [esi+8] 0 +
push esi  +
push 0  +
call ebx  +
push eax  +
call edi  +
mov eax [ebp+8] +
jmp loc_101C575  +
***
push eax  +
push 0  +
call ebx  +
push eax  +
call edi  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call sub_101990E  +
test eax eax +
jz loc_101C5EF  +
push offset loc_101C55A  +
push eax  +
call sub_102010C  +
push 0  +
push [ebp+arg_0]  +
call sub_1019958  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor ebx ebx +
push esi  +
mov [ebp+var_4] ebx +
call sub_1019699  +
cmp eax 0FEEDF001h +
jnz loc_101C61B  +
mov [ebp+var_4] esi +
jmp loc_101C62B  +
cmp eax 0FEEDF002h +
jnz loc_101C62B  +
push esi  +
call sub_101A106  +
mov [ebp+var_4] eax +
cmp [ebp+arg_4] ebx +
jz loc_101C6DD  +
mov eax [ebp+var_4] +
cmp eax ebx +
jz loc_101C6DD  +
cmp [ebp+arg_8] ebx +
jz loc_101C6DD  +
mov edi [eax+1ECh] +
cmp edi ebx +
jz loc_101C6E2  +
mov esi [edi+8] +
jmp loc_101C6C9  +
test esi esi +
jz loc_101C6CD  +
mov cl [esi+0Fh] +
test cl 3 +
jnz loc_101C6C7  +
mov eax [ebp+arg_8] +
dec eax  +
jz loc_101C69D  +
dec eax  +
jnz loc_101C6C7  +
test cl 4 +
jz loc_101C682  +
mov eax [esi+0Ch] +
mov ecx [esi+8] +
and eax 0FFFFFFh +
jmp loc_101C686  +
xor ecx ecx +
xor eax eax +
push eax  +
push ecx  +
push dword ptr [esi+1Ch]  +
lea eax [esi+28h] +
push dword ptr [esi+18h]  +
push eax  +
push [ebp+arg_C]  +
push [ebp+arg_0]  +
call [ebp+arg_4]  +
jmp loc_101C6C5  +
cmp esi [edi+8] +
jnz loc_101C6B8  +
mov eax [ebp+var_4] +
cmp edi [eax+1ECh] +
jz loc_101C6B8  +
push 0  +
push [ebp+arg_C]  +
push [ebp+arg_0]  +
call [ebp+arg_4]  +
lea eax [esi+28h] +
push eax  +
push [ebp+arg_C]  +
push [ebp+arg_0]  +
call [ebp+arg_4]  +
mov ebx eax +
mov esi [esi] +
test ebx ebx +
jge loc_101C65B  +
mov edi [edi+1F0h] +
test edi edi +
jnz loc_101C656  +
jmp loc_101C6E2  +
mov ebx 80070057h +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
push edi  +
xor esi esi +
mov [ebp+hObject] esi +
xor eax eax +
lea edi [ebp-10h] +
stos   +
stos   +
push esi  +
push esi  +
stos   +
push esi  +
push esi  +
stos   +
call ds:CreateEventW  +
mov [ebp-4] eax +
cmp eax esi +
jz loc_101C763  +
lea eax [ebp+hObject] +
push eax  +
push esi  +
push 0D0h  +
push esi  +
push 2  +
push [ebp+NumberOfBytesTransferred]  +
call ds:LockFileEx  +
cmp eax esi +
jnz loc_101C757  +
call ds:GetLastError  +
cmp eax 3E5h +
jnz loc_101C75A  +
push 1  +
lea eax [ebp+NumberOfBytesTransferred] +
push eax  +
lea eax [ebp+hObject] +
push eax  +
push [ebp+NumberOfBytesTransferred]  +
call ds:GetOverlappedResult  +
test eax eax +
jz loc_101C75A  +
xor esi esi +
inc esi  +
push dword ptr [ebp-4]  +
call ds:CloseHandle  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
push edi  +
xor ecx ecx +
xor eax eax +
mov [ebp+Overlapped.Internal] ecx +
lea edi [ebp+Overlapped.InternalHigh] +
stos   +
stos   +
stos   +
stos   +
lea eax [ebp+Overlapped] +
push eax  +
push ecx  +
push 0D0h  +
push ecx  +
push [ebp+hFile]  +
xor esi esi +
call ds:UnlockFileEx  +
test eax eax +
jz loc_101C7A3  +
inc esi  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push esi  +
mov esi [ebp+hFile] +
push edi  +
xor edi edi +
mov [ebp+var_C] edi +
mov [ebp+var_8] edi +
cmp esi edi +
jz loc_101C8A4  +
push esi  +
call sub_1019699  +
cmp eax 0FEEDF001h +
jnz loc_101C8A4  +
mov [ebp+Overlapped.Internal] edi +
xor eax eax +
lea edi [ebp+Overlapped.InternalHigh] +
stos   +
stos   +
stos   +
stos   +
mov eax [esi+4] +
mov edi [esi+94h] +
mov [ebp+hFile] eax +
mov eax [esi+9Ch] +
push ebx  +
mov ebx [esi+98h] +
mov [ebp+var_18] eax +
mov eax [esi+90h] +
push eax  +
push 8  +
mov [ebp+nNumberOfBytesToWrite] eax +
and edi 0FFFFFFh +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+DistanceToMoveHigh] eax +
test eax eax +
jz loc_101C84D  +
mov ecx [ebp+var_18] +
mov [ebp+Overlapped.OffsetHigh] ecx +
lea ecx [ebp+Overlapped] +
push ecx  +
push [ebp+nNumberOfBytesToWrite]  +
mov [ebp+Overlapped.Offset] ebx +
push eax  +
push [ebp+hFile]  +
call sub_101FCCF  +
test eax eax +
jz loc_101C84D  +
or [ebp+hFile] 0FFFFFFFFh +
lea eax [ebp+var_8] +
push eax  +
push edi  +
push [ebp+nNumberOfBytesToWrite]  +
push [ebp+var_18]  +
push ebx  +
push [ebp+DistanceToMoveHigh]  +
push [ebp+hFile]  +
push esi  +
call sub_101C0E9  +
pop ebx  +
test eax eax +
jz loc_101C88C  +
cmp dword ptr [esi+1B4h] 0 +
jz loc_101C88C  +
push esi  +
call sub_101958B  +
xor ecx ecx +
inc ecx  +
cmp [ebp+var_8] eax +
jz loc_101C889  +
mov eax ecx +
cmp ax [esi+40h] +
jnb loc_101C88C  +
mov [ebp+var_C] ecx +
cmp [ebp+DistanceToMoveHigh] 0 +
jz loc_101C8A4  +
push [ebp+DistanceToMoveHigh]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax [ebp+var_C] +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push ebx  +
push esi  +
mov esi [ebp+lpMem] +
xor ebx ebx +
mov [ebp+var_4] 1 +
cmp esi ebx +
jz loc_101C9CC  +
mov eax [esi+118h] +
mov ecx [esi+11Ch] +
or eax ecx +
jz loc_101C9CC  +
mov edx [esi+128h] +
cmp edx ebx +
jz loc_101C9CC  +
cmp [esi+12Ch] ebx +
jnz loc_101C9CC  +
push edi  +
xor eax eax +
mov [ebp+Overlapped.Internal] ebx +
lea edi [ebp+Overlapped.InternalHigh] +
stos   +
stos   +
stos   +
stos   +
mov eax [esi+4] +
mov edi ds:GetProcessHeap +
mov [ebp+hFile] eax +
mov eax [esi+124h] +
mov [ebp+var_14] eax +
mov eax [esi+118h] +
push edx  +
and ecx 0FFFFFFh +
mov [ebp+var_4] ebx +
mov ebx [esi+120h] +
push 8  +
mov [ebp+nNumberOfBytesToWrite] eax +
mov [ebp+var_C] ecx +
call edi  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+lpMem] eax +
test eax eax +
jz loc_101C9CB  +
mov ecx [ebp+var_14] +
mov [ebp+Overlapped.OffsetHigh] ecx +
lea ecx [ebp+Overlapped] +
push ecx  +
push [ebp+nNumberOfBytesToWrite]  +
mov [ebp+Overlapped.Offset] ebx +
push eax  +
push [ebp+hFile]  +
call sub_101FCCF  +
test eax eax +
jz loc_101C97D  +
mov eax [ebp+lpMem] +
mov [esi+1B8h] eax +
mov [ebp+var_4] 1 +
jmp loc_101C9CB  +
call ds:GetLastError  +
mov ebx eax +
test ebx ebx +
jle loc_101C993  +
and eax 0FFFFh +
or eax 80070000h +
push 0AB2h  +
push offset aLoadintegrityi  +
push eax  +
push offset aFailed  +
push dword ptr [esi+1CCh]  +
push 0  +
push 1  +
call sub_1015538  +
push [ebp+lpMem]  +
push 0  +
call edi  +
push eax  +
call ds:HeapFree  +
test ebx ebx +
jz loc_101C9CB  +
push ebx  +
call ds:SetLastError  +
pop edi  +
mov eax [ebp+var_4] +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_101C9F2  +
xor eax eax +
jmp loc_101CAF1  +
push esi  +
call sub_1019755  +
test al 1 +
jnz loc_101CAEE  +
test al 0Eh +
jz loc_101CAEE  +
mov eax dword_1049A80 +
mov ebx [esi+1B8h] +
mov [esi+120h] eax +
mov eax dword_1049A84 +
and dword ptr [esi+118h] 0 +
and dword ptr [esi+11Ch] 0 +
mov [esi+124h] eax +
mov eax dword_1049A80 +
mov [esi+128h] eax +
mov eax dword_1049A84 +
mov [esi+12Ch] eax +
xor eax eax +
test ebx ebx +
jz loc_101CAF0  +
mov ecx [esi+0A4h] +
push edi  +
lea edi [ebp+Overlapped.InternalHigh] +
stos   +
stos   +
stos   +
stos   +
mov eax [esi+0A0h] +
add eax [esi+98h] +
adc ecx [esi+9Ch] +
mov [esi+1D8h] eax +
mov [ebp+Overlapped.Offset] eax +
mov eax ecx +
mov [ebp+Overlapped.OffsetHigh] eax +
lea eax [ebp+Overlapped] +
push eax  +
mov [esi+1DCh] ecx +
push dword ptr [ebx]  +
xor edi edi +
push ebx  +
push dword ptr [esi+4]  +
mov [ebp+Overlapped.Internal] edi +
mov [ebp+Overlapped.InternalHigh] edi +
mov [ebp+Overlapped.hEvent] edi +
call sub_101FCAE  +
mov [ebp+arg_0] eax +
cmp eax edi +
jz loc_101CAD7  +
mov eax [esi+1D8h] +
mov [esi+120h] eax +
mov eax [esi+1DCh] +
mov [esi+124h] eax +
mov eax [ebx] +
mov [esi+118h] eax +
mov [esi+11Ch] edi +
mov eax [ebx] +
mov [esi+128h] eax +
jmp loc_101CAE8  +
call ds:GetLastError  +
cmp eax edi +
jz loc_101CAE8  +
push eax  +
call ds:SetLastError  +
mov eax [ebp+arg_0] +
pop edi  +
jmp loc_101CAF1  +
xor eax eax +
inc eax  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push esi  +
mov esi [ebp+lpMem] +
push edi  +
xor edi edi +
mov [ebp+var_4] edi +
mov [ebp+var_8] edi +
cmp esi edi +
jnz loc_101CB1C  +
xor eax eax +
jmp loc_101CCD1  +
push esi  +
call sub_1019755  +
test al 1 +
jnz loc_101CCCE  +
test al 0Eh +
jz loc_101CCCE  +
test al 2 +
jnz loc_101CB46  +
test al 4 +
jz loc_101CB46  +
cmp [esi+1B8h] edi +
jnz loc_101CCCE  +
mov eax [esi+1B8h] +
mov [ebp+lpMem] eax +
cmp eax edi +
jz loc_101CB6B  +
push eax  +
push edi  +
mov [esi+1B8h] edi +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov [ebp+lpMem] edi +
test byte ptr [esi+19Ch] 2 +
jz loc_101CCCE  +
push 100000h  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+var_C] eax +
cmp eax edi +
jz loc_101CB15  +
mov edi [esi+60h] +
add edi [esi+58h] +
push ebx  +
mov ebx [esi+64h] +
adc ebx [esi+5Ch] +
push 0  +
pop ecx  +
mov eax 0D0h +
sub edi eax +
sbb ebx ecx +
mov [ebp+var_14] eax +
push ecx  +
mov eax edi +
add eax 9FFFFFh +
mov edx ebx +
push 0A00000h  +
adc edx ecx +
push edx  +
push eax  +
mov [ebp+var_10] ecx +
call __alldiv  +
mov ecx eax +
mov [ebp+var_1C] ecx +
test ecx ecx +
jz loc_101CC02  +
test edx edx +
jnz loc_101CC02  +
mov edx ecx +
imul edx edx +
add edx 0Ch +
mov [ebp+var_8] edx +
cmp edx ecx +
jbe loc_101CBFD  +
push edx  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov ecx [ebp+var_1C] +
mov [ebp+lpMem] eax +
jmp loc_101CC05  +
mov eax [ebp+lpMem] +
jmp loc_101CC08  +
mov eax [ebp+lpMem] +
mov edx [ebp+var_8] +
test eax eax +
jz loc_101CC86  +
mov [eax+4] ecx +
lea ecx [eax+0Ch] +
mov [eax] edx +
mov dword ptr [eax+8] 0A00000h +
mov [ebp+var_8] ecx +
mov ecx edi +
or ecx ebx +
mov [ebp+var_4] 1 +
jz loc_101CC94  +
and [ebp+var_4] 0 +
test ebx ebx +
jg loc_101CC42  +
jl loc_101CC3D  +
cmp edi 0A00000h +
jnb loc_101CC42  +
mov [ebp+var_1C] edi +
jmp loc_101CC49  +
mov [ebp+var_1C] 0A00000h +
push 100000h  +
push [ebp+var_C]  +
xor eax eax +
push [ebp+var_8]  +
push [ebp+var_10]  +
push [ebp+var_14]  +
push eax  +
push [ebp+var_1C]  +
push dword ptr [esi+4]  +
push esi  +
call sub_101FEA4  +
test eax eax +
jz loc_101CC86  +
add [ebp+var_8] 14h +
mov ecx [ebp+var_1C] +
add [ebp+var_14] ecx +
push 0  +
pop eax  +
adc [ebp+var_10] eax +
sub edi ecx +
sbb ebx eax +
mov eax [ebp+lpMem] +
jmp loc_101CC1E  +
push 570h  +
call ds:SetLastError  +
mov eax [ebp+lpMem] +
pop ebx  +
test eax eax +
jz loc_101CCB7  +
cmp [ebp+var_4] 0 +
jz loc_101CCA7  +
mov [esi+1B8h] eax +
jmp loc_101CCB7  +
push eax  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
push [ebp+var_C]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax [ebp+var_4] +
jmp loc_101CCD1  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
mov eax dword_1049010 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_1C] 0 +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov [ebp+var_38] esi +
test esi esi +
jz loc_101CE2D  +
test dword ptr [esi+194h] 80000000h +
jz loc_101CE2D  +
mov edi [esi+1B8h] +
test edi edi +
jz loc_101CE2D  +
test byte ptr [esi+19Ch] 2 +
jz loc_101CE2D  +
push 100000h  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+lpMem] eax +
test eax eax +
jz loc_101CE30  +
mov eax [esi+64h] +
push ebx  +
mov ebx [esi+60h] +
add ebx [esi+58h] +
mov ecx 0D0h +
adc eax [esi+5Ch] +
sub ebx ecx +
sbb eax 0 +
and [ebp+var_20] 0 +
mov [ebp+var_24] ecx +
mov ecx [edi+8] +
mov [ebp+var_3C] eax +
mov [ebp+var_44] ecx +
test ecx ecx +
jz loc_101CE0A  +
add edi 0Ch +
mov [ebp+var_28] edi +
mov edx ebx +
or edx eax +
mov [ebp+var_1C] 1 +
jz loc_101CE15  +
xor edx edx +
cmp eax edx +
mov [ebp+var_1C] edx +
jg loc_101CDA6  +
jl loc_101CDA1  +
cmp ebx ecx +
jnb loc_101CDA6  +
mov [ebp+var_30] ebx +
jmp loc_101CDA9  +
mov [ebp+var_30] ecx +
push 100000h  +
push [ebp+lpMem]  +
lea eax [ebp+var_18] +
push eax  +
push [ebp+var_20]  +
mov [ebp+var_2C] edx +
push [ebp+var_24]  +
push edx  +
push [ebp+var_30]  +
push dword ptr [esi+4]  +
push esi  +
call sub_101FEA4  +
test eax eax +
jz loc_101CE0A  +
mov edi [ebp+var_28] +
push 14h  +
pop ecx  +
lea esi [ebp+var_18] +
xor eax eax +
cmps   +
jz loc_101CDE3  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_101CE0A  +
mov ecx [ebp+var_30] +
add [ebp+var_28] 14h +
add [ebp+var_24] ecx +
mov eax [ebp+var_2C] +
mov esi [ebp+var_38] +
adc [ebp+var_20] eax +
sub ebx ecx +
sbb [ebp+var_3C] eax +
mov ecx [ebp+var_44] +
mov eax [ebp+var_3C] +
jmp loc_101CD81  +
push 570h  +
call ds:SetLastError  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax [ebp+var_1C] +
pop ebx  +
jmp loc_101CE30  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1010796  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_24]  +
push 0  +
push [ebp+arg_20]  +
push [ebp+arg_1C]  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_102035C  +
pop ebp  +
retn 28h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
xor ebx ebx +
mov [ebp+var_C] ebx +
mov [ebp+dwErrCode] ebx +
mov [ebp+var_10] ebx +
cmp [ebp+arg_0] ebx +
jz loc_101D07F  +
cmp [ebp+dwBytes] ebx +
jz loc_101D07F  +
cmp [ebp+arg_14] ebx +
jz loc_101D07F  +
push [ebp+dwBytes]  +
call ds:GetFileAttributesW  +
cmp eax 0FFFFFFFFh +
jz loc_101CEBD  +
push [ebp+dwBytes]  +
call sub_10153F7  +
or [ebp+BytesReturned] 2200020h +
push esi  +
push edi  +
push ebx  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+arg_0]  +
mov esi 0C0110100h +
call sub_101965B  +
test [ebp+var_10] 10000h +
jz loc_101CEE6  +
mov esi 0C11D0100h +
push ebx  +
push [ebp+BytesReturned]  +
push 2  +
push ebx  +
push 7  +
push esi  +
push [ebp+dwBytes]  +
call ds:CreateFileW  +
mov [ebp+hObject] eax +
cmp eax 0FFFFFFFFh +
jz loc_101D014  +
mov esi [ebp+arg_10] +
cmp esi ebx +
jz loc_101CF50  +
mov edi ds:SetFilePointerEx +
push ebx  +
push ebx  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
push eax  +
call edi  +
test eax eax +
jz loc_101CFD5  +
push [ebp+hObject]  +
call ds:SetEndOfFile  +
test eax eax +
jz loc_101CFD5  +
push ebx  +
push ebx  +
push dword_1049A84  +
push dword_1049A80  +
push [ebp+hObject]  +
call edi  +
test eax eax +
jz loc_101CFD5  +
mov [ebp+var_C] 1 +
cmp esi ebx +
jz loc_101CFFE  +
test [ebp+var_10] 1000000h +
jz loc_101CFFE  +
test [ebp+BytesReturned] 4000100h +
jnz loc_101CFFE  +
push ebx  +
lea eax [ebp+BytesReturned] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 900C4h  +
push [ebp+hObject]  +
mov [ebp+var_C] ebx +
call ds:DeviceIoControl  +
test eax eax +
jz loc_101CFCF  +
xor eax eax +
mov [ebp+InBuffer] ebx +
lea edi [ebp+var_1C] +
stos   +
stos   +
stos   +
mov eax [esi] +
mov [ebp+var_18] eax +
mov eax [esi+4] +
push ebx  +
mov [ebp+var_14] eax +
lea eax [ebp+BytesReturned] +
push eax  +
push ebx  +
push ebx  +
push 10h  +
lea eax [ebp+InBuffer] +
push eax  +
push 980C8h  +
push [ebp+hObject]  +
call ds:DeviceIoControl  +
mov [ebp+var_C] eax +
cmp eax ebx +
jnz loc_101CFFE  +
call ds:GetLastError  +
call ds:GetLastError  +
cmp eax ebx +
mov [ebp+dwErrCode] eax +
jle loc_101CFEC  +
and eax 0FFFFh +
or eax 80070000h +
push 114Dh  +
push offset aCreatedestinat  +
push eax  +
push offset aSetfilesizeFai  +
jmp loc_101D040  +
push [ebp+arg_8]  +
mov eax [ebp+hObject] +
push [ebp+dwBytes]  +
mov ecx [ebp+arg_14] +
push eax  +
mov [ecx] eax +
call sub_1015B6E  +
jmp loc_101D04D  +
call ds:GetLastError  +
mov [ebp+dwErrCode] eax +
cmp [ebp+arg_18] ebx +
jz loc_101D06A  +
cmp eax ebx +
jle loc_101D030  +
and eax 0FFFFh +
or eax 80070000h +
push 1157h  +
push offset aCreatedestinat  +
push eax  +
push offset aCreatefileFail  +
push [ebp+dwBytes]  +
push [ebp+arg_0]  +
push 1  +
call sub_1015538  +
cmp [ebp+var_C] ebx +
jnz loc_101D06A  +
cmp [ebp+hObject] 0FFFFFFFFh +
jz loc_101D06A  +
push [ebp+hObject]  +
call ds:CloseHandle  +
push [ebp+dwBytes]  +
call ds:DeleteFileW  +
pop edi  +
pop esi  +
cmp [ebp+dwErrCode] ebx +
jz loc_101D07A  +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
mov eax [ebp+var_C] +
jmp loc_101D089  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop ebx  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
push edi  +
mov [ebp+var_4] ebx +
cmp esi ebx +
jz loc_101D12C  +
cmp [ebp+arg_4] ebx +
jz loc_101D12C  +
push 14h  +
push [ebp+arg_4]  +
call sub_1015632  +
test eax eax +
jnz loc_101D12C  +
push esi  +
call sub_1019699  +
cmp eax 0FEEDF001h +
jnz loc_101D0D0  +
mov eax esi +
jmp loc_101D0DD  +
cmp eax 0FEEDF002h +
jnz loc_101D134  +
push esi  +
call sub_101A106  +
cmp eax ebx +
jz loc_101D134  +
cmp [ebp+arg_8] ebx +
jz loc_101D0EE  +
mov esi [eax+1ECh] +
jmp loc_101D0F0  +
mov esi eax +
mov edi [ebp+arg_C] +
test esi esi +
jz loc_101D134  +
push esi  +
call sub_1019894  +
push [ebp+arg_4]  +
push eax  +
call sub_10202F8  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_101D116  +
xor ebx ebx +
inc ebx  +
test edi edi +
jz loc_101D116  +
mov [edi] esi +
cmp [ebp+arg_8] 0 +
jz loc_101D124  +
mov esi [esi+1F0h] +
jmp loc_101D126  +
xor esi esi +
test ebx ebx +
jz loc_101D0F3  +
jmp loc_101D134  +
push 57h  +
call ds:SetLastError  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
xor eax eax +
push ebx  +
push esi  +
push edi  +
xor esi esi +
mov [ebp+var_40] esi +
lea edi [ebp+var_3C] +
stos   +
stos   +
stos   +
stos   +
xor eax eax +
mov [ebp+var_2C] esi +
lea edi [ebp+var_28] +
stos   +
stos   +
stos   +
stos   +
mov eax [ebp+arg_4] +
or edi 0FFFFFFFFh +
mov [ebp+var_4] 1 +
mov [ebp+var_14] esi +
mov [ebp+var_18] esi +
mov [ebp+dwErrCode] esi +
mov [ebp+var_C] esi +
cmp eax esi +
jz loc_101D189  +
mov ebx [eax] +
jmp loc_101D18B  +
mov ebx edi +
mov eax [ebp+arg_10] +
cmp eax esi +
jz loc_101D199  +
mov eax [eax] +
mov [ebp+hObject] eax +
jmp loc_101D19C  +
mov [ebp+hObject] edi +
cmp ebx edi +
jnz loc_101D1BD  +
push esi  +
push [ebp+dwFlagsAndAttributes]  +
push 3  +
push esi  +
push 7  +
push 80000000h  +
push [ebp+lpFileName]  +
call ds:CreateFileW  +
mov ebx eax +
cmp ebx edi +
jz loc_101D1D8  +
cmp [ebp+arg_30] edi +
jnz loc_101D1D1  +
cmp [ebp+arg_34] edi +
jnz loc_101D1D1  +
lea eax [ebp+arg_30] +
push eax  +
push ebx  +
call sub_1019FD0  +
mov [ebp+var_4] 1 +
cmp [ebp+hObject] edi +
mov edi [ebp+arg_0] +
jnz loc_101D204  +
push 1  +
lea eax [ebp+hObject] +
push eax  +
lea eax [ebp+arg_30] +
push eax  +
push [ebp+BytesReturned]  +
push [ebp+arg_18]  +
push [ebp+dwBytes]  +
push edi  +
call sub_101CE78  +
mov [ebp+var_4] eax +
cmp eax esi +
jz loc_101D2B5  +
lea eax [ebp+var_18] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
push edi  +
call sub_1019C9C  +
mov ecx [ebp+var_18] +
test eax eax +
mov eax [ebp+var_14] +
jz loc_101D224  +
cmp eax esi +
jz loc_101D224  +
cmp ecx esi +
jnz loc_101D227  +
mov [ebp+var_4] esi +
cmp [ebp+var_4] esi +
jz loc_101D2B5  +
mov edx [ebp+arg_20] +
mov [ebp+var_30] eax +
mov eax [ebp+arg_28] +
mov [ebp+var_24] eax +
mov eax [ebp+arg_2C] +
push esi  +
mov [ebp+var_20] eax +
push esi  +
lea eax [ebp+dwFlagsAndAttributes] +
push eax  +
lea eax [ebp+var_C] +
mov [ebp+var_38] edx +
mov edx [ebp+arg_24] +
push eax  +
push edi  +
mov [ebp+var_34] edx +
mov [ebp+var_1C] ecx +
call sub_1019CD7  +
test eax eax +
jz loc_101D26C  +
cmp [ebp+var_C] esi +
jz loc_101D26C  +
cmp [ebp+dwFlagsAndAttributes] esi +
jnz loc_101D26F  +
mov [ebp+var_4] esi +
cmp [ebp+var_4] esi +
jz loc_101D2B5  +
mov [ebp+var_4] esi +
cmp [ebp+var_C] esi +
jz loc_101D2B5  +
cmp ebx 0FFFFFFFFh +
jz loc_101D2B5  +
cmp [ebp+hObject] 0FFFFFFFFh +
jz loc_101D2B5  +
push [ebp+arg_38]  +
lea eax [ebp+var_2C] +
push [ebp+dwFlagsAndAttributes]  +
push [ebp+var_C]  +
push [ebp+arg_34]  +
push [ebp+arg_30]  +
push eax  +
push [ebp+hObject]  +
lea eax [ebp+var_40] +
push eax  +
push ebx  +
push edi  +
call sub_101CE45  +
test eax eax +
jz loc_101D2B5  +
mov [ebp+var_4] 1 +
jmp loc_101D2C3  +
call ds:GetLastError  +
mov [ebp+dwErrCode] eax +
cmp [ebp+var_4] esi +
jz loc_101D2CE  +
mov eax [ebp+arg_4] +
cmp eax esi +
jz loc_101D2D1  +
mov [eax] ebx +
jmp loc_101D2E6  +
mov eax [ebp+arg_4] +
cmp ebx 0FFFFFFFFh +
jz loc_101D2E6  +
cmp eax esi +
jz loc_101D2DF  +
cmp dword ptr [eax] 0FFFFFFFFh +
jnz loc_101D2E6  +
push ebx  +
call ds:CloseHandle  +
mov eax [ebp+arg_10] +
cmp [ebp+var_4] esi +
jz loc_101D2F9  +
cmp eax esi +
jz loc_101D2F9  +
mov ecx [ebp+hObject] +
mov [eax] ecx +
jmp loc_101D311  +
cmp [ebp+hObject] 0FFFFFFFFh +
jz loc_101D311  +
cmp eax esi +
jz loc_101D308  +
cmp dword ptr [eax] 0FFFFFFFFh +
jnz loc_101D311  +
push [ebp+hObject]  +
call ds:CloseHandle  +
cmp [ebp+dwErrCode] esi +
pop edi  +
pop esi  +
pop ebx  +
jz loc_101D322  +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
mov eax [ebp+var_4] +
leave   +
retn 3Ch  +
***
call __SEH_prolog4_GS  +
cmp [ebp-100h] esi +
jz locret_101D696  +
mov eax [ebp-104h] +
push dword ptr [eax+4]  +
call sub_101C770  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0F0h +
mov eax dword_1049010 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
xor edi edi +
mov esi 0D0h +
mov [ebp+var_D8] edi +
mov [ebp+var_DC] edi +
cmp [ebx+20h] esi +
jnz loc_101D8C2  +
push 0CFh  +
lea eax [ebp+var_D3] +
push edi  +
push eax  +
call memset  +
mov [ebp+Overlapped.Internal] edi +
add esp 0Ch +
xor eax eax +
lea edi [ebp+Overlapped.InternalHigh] +
stos   +
stos   +
stos   +
stos   +
mov eax [ebx+18h] +
mov [ebp-0D4h] eax +
mov eax [ebx+1Ch] +
mov [ebp+var_D3+3] eax +
mov eax [ebx+24h] +
mov [ebp+var_C8] eax +
mov eax [ebx+28h] +
mov [ebp+var_C4] eax +
mov eax [ebx+2Ch] +
mov [ebp+var_C0] eax +
mov ax [ebx+40h] +
mov [ebp+nNumberOfBytesToWrite] esi +
lea esi [ebx+30h] +
lea edi [ebp+var_BC] +
movs   +
movs   +
movs   +
movs   +
mov [ebp+var_AC] ax +
mov ax [ebx+42h] +
mov [ebp+var_AA] ax +
mov eax [ebx+44h] +
mov [ebp+var_A8] eax +
mov eax [ebx+50h] +
mov [ebp+var_A4] eax +
mov eax [ebx+54h] +
mov [ebp+var_A0] eax +
mov al [ebx+57h] +
mov byte ptr [ebp+var_A0+3] al +
mov eax [ebx+58h] +
mov [ebp+var_9C] eax +
mov eax [ebx+5Ch] +
mov [ebp+var_98] eax +
mov eax [ebx+60h] +
mov [ebp+var_94] eax +
mov eax [ebx+64h] +
mov [ebp+var_90] eax +
mov eax [ebx+90h] +
mov [ebp+var_8C] eax +
mov eax [ebx+94h] +
mov [ebp+var_88] eax +
mov al [ebx+97h] +
mov byte ptr [ebp+var_88+3] al +
mov eax [ebx+98h] +
mov [ebp+var_84] eax +
mov eax [ebx+9Ch] +
mov [ebp+var_80] eax +
mov eax [ebx+0A0h] +
mov [ebp+var_7C] eax +
mov eax [ebx+0A4h] +
mov [ebp+var_78] eax +
mov eax [ebx+0D0h] +
mov [ebp+var_74] eax +
mov eax [ebx+0D4h] +
mov [ebp+var_70] eax +
mov al [ebx+0D7h] +
mov byte ptr [ebp+var_70+3] al +
mov eax [ebx+0D8h] +
mov [ebp+var_6C] eax +
mov eax [ebx+0DCh] +
mov [ebp+var_68] eax +
mov eax [ebx+0E0h] +
mov [ebp+var_64] eax +
mov eax [ebx+0E4h] +
mov [ebp+var_60] eax +
mov eax [ebx+118h] +
mov [ebp+var_58] eax +
mov eax [ebx+11Ch] +
cmp [ebp+arg_4] 0 +
mov [ebp+var_54] eax +
mov al [ebx+11Fh] +
mov byte ptr [ebp+var_54+3] al +
mov eax [ebx+120h] +
mov [ebp+var_50] eax +
mov eax [ebx+124h] +
mov [ebp+var_4C] eax +
mov eax [ebx+128h] +
mov [ebp+var_48] eax +
mov eax [ebx+12Ch] +
mov [ebp+var_44] eax +
mov eax [ebx+108h] +
mov [ebp+var_5C] eax +
jnz loc_101D887  +
test byte ptr [ebx+19Ch] 40h +
jz loc_101D887  +
push dword ptr [ebx+4]  +
call sub_101C6F0  +
mov [ebp+var_DC] eax +
lea eax [ebp+Overlapped] +
push eax  +
push [ebp+nNumberOfBytesToWrite]  +
lea eax [ebp-0D4h] +
push eax  +
push dword ptr [ebx+4]  +
call sub_101FCAE  +
test eax eax +
jz loc_101D8B1  +
mov [ebp+var_D8] 1 +
cmp [ebp+var_DC] 0 +
jz loc_101D8C2  +
push dword ptr [ebx+4]  +
call sub_101C770  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_D8] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010796  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
mov esi [ebp+Buffer] +
xor ebx ebx +
cmp esi ebx +
jnz loc_101D900  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_101D9A9  +
mov ecx [esi+4] +
cmp ecx 0FFFFFFFFh +
jz loc_101D95B  +
push edi  +
xor eax eax +
lea edi [ebp+Overlapped.InternalHigh] +
stos   +
stos   +
stos   +
stos   +
mov eax [ebp+arg_4] +
mov [ebp+Overlapped.Offset] eax +
mov eax [ebp+arg_8] +
mov [ebp+Overlapped.OffsetHigh] eax +
lea eax [ebp+Overlapped] +
push eax  +
push 4  +
lea eax [ebp+Buffer] +
push eax  +
push ecx  +
mov [ebp+Buffer] 0BEADF00Dh +
mov [ebp+Overlapped.Internal] ebx +
mov [ebp+Overlapped.InternalHigh] ebx +
mov [ebp+Overlapped.hEvent] ebx +
call sub_101FCCF  +
pop edi  +
test eax eax +
jz loc_101D94F  +
push ebx  +
call ds:SetLastError  +
xor eax eax +
inc eax  +
jmp loc_101D9A9  +
push dword ptr [esi+4]  +
call sub_101A072  +
or dword ptr [esi+4] 0FFFFFFFFh +
xor eax eax +
test dword ptr [esi+194h] 40000000h +
jz loc_101D970  +
mov ecx 0C0000000h +
jmp loc_101D976  +
mov ecx 80000000h +
inc eax  +
test byte ptr [esi+19Ch] 40h +
jz loc_101D982  +
push 3  +
pop eax  +
push ebx  +
push 48000000h  +
push dword ptr [esi+198h]  +
push ebx  +
push eax  +
push ecx  +
push dword ptr [esi+1CCh]  +
call sub_101FB37  +
xor ecx ecx +
cmp eax 0FFFFFFFFh +
setnz cl  +
mov [esi+4] eax +
mov eax ecx +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
and [ebp+var_C] 0 +
push esi  +
mov esi [ebp+hObject] +
test esi esi +
jz loc_101DAE2  +
push esi  +
call sub_1019699  +
cmp eax 0FEEDF001h +
jnz loc_101DAE2  +
mov eax [esi+4] +
or [ebp+hObject] 0FFFFFFFFh +
mov [ebp+var_4] eax +
mov eax [esi+5Ch] +
push ebx  +
mov ebx [esi+58h] +
push edi  +
mov edi [esi+54h] +
mov [ebp+var_14] eax +
mov eax [esi+50h] +
mov [ebp+var_20] eax +
and edi 0FFFFFFh +
call sub_101FB7C  +
test eax eax +
jz loc_101DA9F  +
call sub_101FB87  +
test eax eax +
jz loc_101DA1E  +
push eax  +
push esi  +
call sub_1019517  +
push 0  +
push 0  +
push esi  +
call sub_101A142  +
mov [ebp+var_8] eax +
test eax eax +
jz loc_101DA9F  +
push esi  +
call sub_101FCF0  +
xor ecx ecx +
mov [ebp+lpMem] eax +
cmp eax ecx +
jz loc_101DA97  +
cmp [eax] cx +
jz loc_101DA85  +
push ecx  +
push edi  +
push [ebp+var_20]  +
push dword_1049A84  +
push dword_1049A80  +
push [ebp+var_14]  +
push ebx  +
push 0C000100h  +
push ecx  +
push eax  +
lea eax [ebp+hObject] +
push eax  +
push ecx  +
push ecx  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+var_8]  +
call sub_101D143  +
test eax eax +
jz loc_101DA85  +
mov eax [ebp+hObject] +
cmp eax 0FFFFFFFFh +
jz loc_101DA85  +
xor ebx ebx +
mov [ebp+var_4] eax +
mov [ebp+var_14] ebx +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
push [ebp+var_8]  +
call sub_101ABFF  +
push edi  +
push [ebp+var_20]  +
push [ebp+var_14]  +
push ebx  +
push [ebp+var_4]  +
push esi  +
call sub_1021FF2  +
pop edi  +
pop ebx  +
test eax eax +
jz loc_101DAD3  +
xor eax eax +
inc eax  +
cmp dword ptr [esi+1BCh] 0 +
jnz loc_101DAD0  +
mov ecx eax +
cmp cx [esi+40h] +
jb loc_101DAD0  +
test byte ptr [esi+28h] 10h +
jz loc_101DAD3  +
mov [ebp+var_C] eax +
cmp [ebp+hObject] 0FFFFFFFFh +
jz loc_101DAE2  +
push [ebp+hObject]  +
call ds:CloseHandle  +
mov eax [ebp+var_C] +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push esi  +
push edi  +
xor eax eax +
xor esi esi +
mov [ebp+var_14] esi +
lea edi [ebp+var_10] +
stos   +
mov [ebp+Overlapped.Internal] esi +
lea edi [ebp+Overlapped.InternalHigh] +
stos   +
stos   +
stos   +
stos   +
lea eax [ebp+var_14] +
push eax  +
mov eax [ebp+arg_0] +
push dword ptr [eax+4]  +
mov [ebp+dwErrCode] esi +
mov [ebp+var_8] 1 +
call sub_1019FD0  +
test eax eax +
jz loc_101DBAA  +
cmp [ebp+var_10] esi +
jl loc_101DBAA  +
jg loc_101DB38  +
cmp [ebp+var_14] 4 +
jbe loc_101DBAA  +
xor edi edi +
add [ebp+var_14] 0FFFFFFFCh +
mov esi 100000h +
adc [ebp+var_10] 0FFFFFFFFh +
cmp edi [ebp+var_10] +
jg loc_101DB9B  +
jl loc_101DB53  +
cmp esi [ebp+var_14] +
jnb loc_101DB9B  +
xor eax eax +
mov [ebp+Overlapped.Internal] eax +
mov [ebp+Overlapped.InternalHigh] eax +
mov [ebp+Overlapped.hEvent] eax +
lea eax [ebp+Overlapped] +
push eax  +
push 4  +
lea eax [ebp+Buffer] +
push eax  +
mov eax [ebp+arg_0] +
push dword ptr [eax+4]  +
mov [ebp+Overlapped.Offset] esi +
mov [ebp+Overlapped.OffsetHigh] edi +
call sub_101FCCF  +
test eax eax +
jz loc_101DB88  +
add esi 100000h +
adc edi 0 +
jmp loc_101DB95  +
call ds:GetLastError  +
and [ebp+var_8] 0 +
mov [ebp+dwErrCode] eax +
cmp [ebp+var_8] 0 +
jnz loc_101DB47  +
cmp [ebp+dwErrCode] 0 +
jz loc_101DBAA  +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 48h +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_0]  +
call sub_101A106  +
mov edi eax +
xor eax eax +
xor esi esi +
inc eax  +
mov [ebp+var_14] edi +
mov [ebp+var_4] eax +
mov [ebp+var_8] eax +
mov [ebp+var_C] esi +
mov [ebp+var_10] esi +
cmp [ebp+arg_0] esi +
jz loc_101DE89  +
cmp edi esi +
jz loc_101DE89  +
mov ecx [ebp+arg_10] +
cmp ecx esi +
jz loc_101DE89  +
cmp [ebp+arg_14] esi +
jz loc_101DE89  +
mov ebx [ebp+arg_18] +
cmp ebx esi +
jz loc_101DE89  +
cmp [ebp+arg_1C] esi +
jz loc_101DE89  +
mov eax [ebp+arg_C] +
dec eax  +
jz loc_101DC26  +
dec eax  +
jnz loc_101DC2A  +
mov [ebp+var_8] esi +
or byte ptr [ebx+0Fh] 2 +
cmp [ecx] esi +
jz loc_101DC39  +
test dword ptr [edi+28h] 60000h +
jnz loc_101DC39  +
mov [ecx] esi +
push esi  +
push esi  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+arg_0]  +
call sub_1019CD7  +
test eax eax +
jz loc_101DE70  +
push [ebp+arg_1C]  +
push [ebp+lpMem]  +
call sub_1019FD0  +
test eax eax +
jz loc_101DE70  +
mov eax [ebp+arg_1C] +
mov ecx [eax] +
mov [ebx+18h] ecx +
mov ecx [eax+4] +
push eax  +
push ebx  +
mov [ebx+1Ch] ecx +
call sub_1021B94  +
mov ecx [ebx+8] +
xor edx edx +
inc edx  +
mov [ebx+24h] edx +
mov ax [edi+1ACh] +
mov [ebx+20h] ax +
mov eax [ebx+0Ch] +
and eax 0FFFFFFh +
cmp ecx esi +
jnz loc_101DCA9  +
cmp eax esi +
jnz loc_101DCA9  +
mov eax [ebp+arg_14] +
mov [eax] edx +
jmp loc_101DE84  +
push 30h  +
lea eax [ebp+FileInformation.ftCreationTime] +
push esi  +
push eax  +
mov [ebp+arg_C] esi +
mov [ebp+arg_18] esi +
mov [ebp+FileInformation.dwFileAttributes] esi +
call memset  +
add esp 0Ch +
lea eax [ebp+FileInformation] +
push eax  +
push [ebp+lpMem]  +
call ds:GetFileInformationByHandle  +
test eax eax +
jz loc_101DD19  +
xor eax eax +
inc eax  +
cmp [ebp+FileInformation.nNumberOfLinks] eax +
jbe loc_101DD19  +
push [ebp+FileInformation.nFileIndexLow]  +
mov [ebp+arg_C] eax +
push [ebp+FileInformation.nFileIndexHigh]  +
push [ebp+arg_0]  +
call sub_101999A  +
push eax  +
call sub_1020070  +
mov [ebp+arg_18] eax +
cmp eax esi +
jz loc_101DD19  +
push 5  +
pop ecx  +
mov esi eax +
mov eax [ebp+arg_1C] +
lea edi [ebx+28h] +
movs   +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
push 1  +
push [ebp+arg_0]  +
call sub_1019E72  +
mov edi [ebp+var_14] +
xor esi esi +
cmp [ebp+var_8] esi +
jz loc_101DDB8  +
cmp [ebp+arg_18] esi +
jnz loc_101DD58  +
push [ebp+var_C]  +
lea eax [ebx+28h] +
push [ebp+var_10]  +
push eax  +
push dword_1049A84  +
mov eax [ebp+arg_1C] +
push dword_1049A80  +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
push [ebp+lpMem]  +
push [ebp+arg_0]  +
call sub_101FEA4  +
test eax eax +
jz loc_101DE70  +
lea ecx [ebp+arg_1C] +
push ecx  +
push 1  +
lea eax [ebx+28h] +
push eax  +
push edi  +
mov [ebp+arg_1C] esi +
call sub_101D093  +
cmp eax esi +
jz loc_101DD93  +
cmp [ebp+arg_1C] edi +
jnz loc_101DD77  +
inc dword ptr [eax+24h]  +
mov ecx [ebp+arg_14] +
mov dword ptr [ecx] 1 +
cmp [ebp+arg_20] esi +
jz loc_101DD93  +
push dword ptr [eax+1Ch]  +
push dword ptr [eax+18h]  +
push [ebp+arg_0]  +
call sub_101A384  +
cmp [ebp+arg_C] esi +
jz loc_101DDB8  +
cmp [ebp+arg_18] esi +
jnz loc_101DDB8  +
lea eax [ebx+28h] +
push eax  +
push [ebp+FileInformation.nFileIndexLow]  +
push [ebp+FileInformation.nFileIndexHigh]  +
push [ebp+arg_0]  +
call sub_101999A  +
push eax  +
push [ebp+arg_0]  +
call sub_1020019  +
mov eax [ebp+arg_14] +
cmp [eax] esi +
jnz loc_101DE84  +
mov eax [ebp+arg_10] +
cmp [eax] esi +
jz loc_101DE84  +
push esi  +
push [ebp+lpFileName]  +
call sub_101509B  +
mov [ebp+lpMem] eax +
cmp eax esi +
jz loc_101DE70  +
push esi  +
lea ecx [ebp+arg_1C] +
push ecx  +
push eax  +
push 947Eh  +
push [ebp+arg_0]  +
mov [ebp+arg_1C] 1 +
mov [ebp+arg_14] esi +
call sub_1014D12  +
test eax eax +
jnz loc_101DE0D  +
cmp [ebp+arg_1C] esi +
jnz loc_101DE0D  +
mov eax [ebp+arg_10] +
mov [eax] esi +
push esi  +
lea eax [ebp+arg_14] +
push eax  +
push [ebp+lpMem]  +
push 9480h  +
push [ebp+arg_0]  +
call sub_1014D12  +
test eax eax +
jnz loc_101DE5D  +
mov ecx [ebp+arg_14] +
cmp ecx esi +
jz loc_101DE5D  +
mov eax [edi+1D8h] +
xor edx edx +
div  ecx +
mov eax ecx +
sub eax edx +
cmp eax ecx +
jnb loc_101DE5D  +
add [edi+1D8h] eax +
mov eax [edi+1D8h] +
adc [edi+1DCh] esi +
mov [ebx+10h] eax +
mov eax [edi+1DCh] +
mov [ebx+14h] eax +
push [ebp+lpMem]  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
jmp loc_101DE84  +
mov [ebp+var_4] esi +
call ds:GetLastError  +
cmp eax esi +
jz loc_101DE84  +
push eax  +
call ds:SetLastError  +
mov eax [ebp+var_4] +
jmp loc_101DE93  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
mov eax dword_1049010 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
xor eax eax +
push esi  +
push edi  +
mov esi [ebp+arg_0] +
mov byte ptr [ebp+var_18] bl +
lea edi [ebp+var_18+1] +
stos   +
stos   +
stos   +
stos   +
stos   +
stos   +
xor eax eax +
lea edi [ebp+var_24] +
mov [ebp+var_28] ebx +
mov [ebp+var_20] ecx +
mov [ebp+var_34] edx +
mov [ebp+var_1C] ebx +
stos   +
mov [ebp+var_2C] ebx +
mov [ebp+var_30] ebx +
cmp ecx ebx +
jz loc_101DFE4  +
cmp edx 0FFFFFFFFh +
jz loc_101DFE4  +
cmp esi ebx +
jz loc_101DFE4  +
cmp [esi] bx +
jz loc_101DFE4  +
cmp [ebp+arg_4] ebx +
jz loc_101DFE4  +
lea eax [ebp+var_28] +
push eax  +
push edx  +
call ds:GetFileSizeEx  +
test eax eax +
jz loc_101DF30  +
mov eax [ebp+arg_8] +
mov edi [ebp+var_28] +
cmp eax ebx +
jz loc_101DF57  +
cmp edi [eax] +
jnz loc_101DF30  +
mov ecx [ebp+var_24] +
cmp ecx [eax+4] +
jz loc_101DF57  +
push 0Dh  +
pop edi  +
push 1017h  +
push offset aVerifyfilebyha  +
push 8007000Dh  +
push offset aIncorrectFiles  +
push esi  +
push [ebp+var_20]  +
push 1  +
call sub_1015538  +
jmp loc_101DFD8  +
push 14h  +
push [ebp+arg_4]  +
mov [ebp+var_1C] ebx +
call sub_1015632  +
test eax eax +
jz loc_101DF7A  +
cmp edi ebx +
jnz loc_101DF7A  +
cmp [ebp+var_24] ebx +
jnz loc_101DF7A  +
mov [ebp+var_1C] 1 +
jmp loc_101DFDF  +
push ebx  +
push ebx  +
lea eax [ebp+var_30] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
push [ebp+var_20]  +
call sub_1019CD7  +
test eax eax +
jz loc_101DFD3  +
push [ebp+var_30]  +
lea eax [ebp+var_18] +
push [ebp+var_2C]  +
push eax  +
push dword_1049A84  +
push dword_1049A80  +
push [ebp+var_24]  +
push [ebp+var_28]  +
push [ebp+var_34]  +
push [ebp+var_20]  +
call sub_101FEA4  +
test eax eax +
jz loc_101DFD3  +
mov esi [ebp+arg_4] +
push 14h  +
pop ecx  +
lea edi [ebp+var_18] +
xor eax eax +
cmps   +
jz loc_101DFCF  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax ebx +
jz loc_101DF71  +
mov edi 241h +
push edi  +
call ds:SetLastError  +
mov eax [ebp+var_1C] +
jmp loc_101DFEE  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010796  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
xor ecx ecx +
push esi  +
mov esi eax +
mov [ebp+var_8] ecx +
mov [ebp+dwErrCode] ecx +
mov [ebp+dwMilliseconds] 3E8h +
mov [ebp+var_C] 1 +
cmp esi ecx +
jz loc_101E035  +
movzx eax byte ptr [esi+0Fh] +
and eax 4 +
mov [ebp+var_1C] eax +
jmp loc_101E03A  +
mov [ebp+var_1C] ecx +
mov eax ecx +
cmp [ebp+arg_0] ecx +
jz loc_101E2A2  +
cmp ebx ecx +
jz loc_101E2A2  +
cmp [ebp+dwBytes] ecx +
jz loc_101E2A2  +
push edi  +
cmp eax ecx +
jz loc_101E105  +
push [ebp+arg_0]  +
call sub_101A2F1  +
push [ebp+arg_C]  +
mov ecx [esi+0Ch] +
push [ebp+dwBytes]  +
mov edx [esi+8] +
push [ebp+arg_4]  +
and ecx 0FFFFFFh +
push eax  +
push dword ptr [esi+1Ch]  +
push dword ptr [esi+18h]  +
push ecx  +
push edx  +
push dword ptr [esi+14h]  +
push dword ptr [esi+10h]  +
push dword ptr [ebx+4]  +
push [ebp+arg_0]  +
call sub_1021070  +
mov [ebp+var_8] eax +
test eax eax +
jnz loc_101E258  +
call ds:GetLastError  +
mov edi eax +
mov [ebp+dwErrCode] edi +
test edi edi +
jle loc_101E0B8  +
and eax 0FFFFh +
or eax 80070000h +
push 11C6h  +
push offset aResextracttoha  +
push eax  +
push offset aUncompressfi_0  +
push [ebp+dwBytes]  +
push [ebp+arg_0]  +
push 2  +
call sub_1015538  +
lea eax [ebp+dwMilliseconds] +
push eax  +
push edi  +
push [ebp+var_C]  +
call sub_102B4E4  +
test eax eax +
jz loc_101E252  +
push dword ptr [ebx+4]  +
mov [ebp+var_18] 1 +
call sub_101A072  +
or dword ptr [ebx+4] 0FFFFFFFFh +
push 0  +
push edi  +
jmp loc_101E1DB  +
mov edx dword_1049A80 +
xor eax eax +
mov [ebp+var_28] ecx +
mov ecx dword_1049A84 +
lea edi [ebp+var_24] +
stos   +
test esi esi +
jz loc_101E13D  +
mov eax [esi+8] +
mov edi [esi+10h] +
mov [ebp+var_28] eax +
mov eax [esi+0Ch] +
mov [ebp+var_30] edi +
mov edi [esi+14h] +
and eax 0FFFFFFh +
mov [ebp+var_24] eax +
mov [ebp+var_2C] edi +
jmp loc_101E146  +
mov eax [ebp+var_24] +
mov [ebp+var_30] edx +
mov [ebp+var_2C] ecx +
push [ebp+arg_C]  +
lea edi [ebx+4] +
push eax  +
push [ebp+var_28]  +
xor eax eax +
push ecx  +
push edx  +
push [ebp+var_2C]  +
lea ecx [ebp+arg_4] +
push [ebp+var_30]  +
push 4A200000h  +
push eax  +
push [ebp+dwBytes]  +
push ecx  +
push eax  +
push eax  +
push edi  +
push [ebp+arg_0]  +
call sub_101D143  +
test eax eax +
jnz loc_101E249  +
call ds:GetLastError  +
mov [ebp+dwErrCode] eax +
test eax eax +
jle loc_101E191  +
and eax 0FFFFh +
or eax 80070000h +
push 120Ah  +
push offset aResextracttoha  +
push eax  +
push offset aWimcopyfileexF  +
push [ebp+dwBytes]  +
push [ebp+arg_0]  +
push 2  +
call sub_1015538  +
lea eax [ebp+dwMilliseconds] +
push eax  +
push [ebp+dwErrCode]  +
push [ebp+var_C]  +
call sub_102B4E4  +
test eax eax +
jz loc_101E28D  +
push dword ptr [edi]  +
mov [ebp+var_18] 1 +
call sub_101A072  +
or dword ptr [edi] 0FFFFFFFFh +
push 0  +
push [ebp+dwErrCode]  +
push [ebp+dwBytes]  +
push 9481h  +
push [ebp+arg_0]  +
call sub_1014D12  +
and [ebp+var_38] 0 +
and [ebp+var_20] 0 +
xor eax eax +
lea edi [ebp+var_34] +
mov [ebp+var_10] 5 +
stos   +
xor eax eax +
cmp [ebp+var_20] eax +
jnz loc_101E237  +
mov ecx [ebp+var_10] +
dec [ebp+var_10]  +
test ecx ecx +
jz loc_101E234  +
push [ebp+dwMilliseconds]  +
call ds:Sleep  +
push [ebp+var_34]  +
push [ebp+var_38]  +
push ebx  +
call sub_101D8DE  +
mov [ebp+var_20] eax +
call ds:GetLastError  +
mov [ebp+dwErrCode] eax +
jmp loc_101E200  +
mov [ebp+var_18] eax +
inc [ebp+var_C]  +
cmp [ebp+var_18] eax +
jz loc_101E28D  +
mov eax [ebp+var_1C] +
xor ecx ecx +
jmp loc_101E055  +
mov [ebp+var_8] 1 +
jmp loc_101E258  +
cmp [ebp+var_8] 0 +
jz loc_101E28D  +
test esi esi +
jz loc_101E28D  +
mov edx [ebp+arg_4] +
cmp edx 0FFFFFFFFh +
jz loc_101E28D  +
mov ecx [ebp+arg_0] +
test byte ptr [ecx+1Ch] 2 +
jz loc_101E28D  +
lea eax [esi+18h] +
push eax  +
add esi 28h +
push esi  +
push [ebp+dwBytes]  +
call sub_101DE9F  +
mov [ebp+var_8] eax +
test eax eax +
jnz loc_101E28D  +
call ds:GetLastError  +
mov [ebp+dwErrCode] eax +
cmp [ebp+dwErrCode] 0 +
pop edi  +
jz loc_101E29D  +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
mov eax [ebp+var_8] +
jmp loc_101E2AC  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
or [ebp+var_4] 0FFFFFFFFh +
push edi  +
xor edi edi +
cmp [ebp+arg_0] edi +
jz loc_101E344  +
cmp [ebp+arg_4] edi +
jz loc_101E344  +
cmp [ebp+dwBytes] edi +
jz loc_101E344  +
push ebx  +
push 1  +
lea eax [ebp+var_4] +
push eax  +
mov eax esi +
neg eax  +
lea ecx [esi+18h] +
sbb eax eax +
and eax ecx +
push eax  +
push 4A200000h  +
push [ebp+arg_C]  +
push [ebp+dwBytes]  +
push [ebp+arg_0]  +
call sub_101CE78  +
mov ebx eax +
cmp ebx edi +
mov edi [ebp+var_4] +
jz loc_101E326  +
push [ebp+arg_14]  +
mov ebx [ebp+arg_4] +
push [ebp+dwBytes]  +
mov eax esi +
push edi  +
push [ebp+arg_0]  +
call sub_101E004  +
mov ebx eax +
test ebx ebx +
jz loc_101E326  +
mov eax [ebp+arg_10] +
test eax eax +
jz loc_101E326  +
mov [eax] edi +
jmp loc_101E33F  +
cmp edi 0FFFFFFFFh +
jz loc_101E33F  +
push edi  +
call ds:CloseHandle  +
test ebx ebx +
jnz loc_101E33F  +
push [ebp+dwBytes]  +
call ds:DeleteFileW  +
mov eax ebx +
pop ebx  +
jmp loc_101E34E  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_0]  +
call sub_101A106  +
xor esi esi +
mov [ebp+var_8] eax +
mov [ebp+var_4] esi +
cmp [ebp+arg_4] esi +
jz loc_101E389  +
push 14h  +
push [ebp+arg_4]  +
call sub_1015632  +
test eax eax +
jnz loc_101E389  +
xor ebx ebx +
jmp loc_101E38C  +
xor ebx ebx +
inc ebx  +
mov edi ds:SetLastError +
push esi  +
call edi  +
test ebx ebx +
jnz loc_101E3C2  +
lea eax [ebp+var_4] +
push eax  +
push 1  +
push [ebp+arg_4]  +
push [ebp+var_8]  +
call sub_101D093  +
mov esi eax +
test esi esi +
jnz loc_101E3BB  +
push 714h  +
call edi  +
xor eax eax +
jmp loc_101E3F9  +
mov ebx [ebp+var_4] +
test ebx ebx +
jnz loc_101E3C5  +
mov ebx [ebp+var_8] +
mov ecx [ebp+arg_10] +
test ecx ecx +
jz loc_101E3E6  +
mov eax [ecx] +
cmp eax 0FFFFFFFFh +
jz loc_101E3E6  +
push [ebp+arg_14]  +
push [ebp+dwBytes]  +
push eax  +
push [ebp+arg_0]  +
mov eax esi +
call sub_101E004  +
jmp loc_101E3F9  +
push [ebp+arg_14]  +
push ecx  +
push [ebp+arg_C]  +
push [ebp+dwBytes]  +
push ebx  +
push [ebp+arg_0]  +
call sub_101E2B6  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_0]  +
call sub_101A106  +
xor edi edi +
mov [ebp+var_8] eax +
mov [ebp+var_4] edi +
cmp [ebp+arg_4] edi +
jz loc_101E436  +
push 14h  +
push [ebp+arg_4]  +
call sub_1015632  +
test eax eax +
jnz loc_101E436  +
xor ebx ebx +
jmp loc_101E439  +
xor ebx ebx +
inc ebx  +
mov esi ds:SetLastError +
push edi  +
call esi  +
test ebx ebx +
jnz loc_101E46F  +
lea eax [ebp+var_4] +
push eax  +
push 1  +
push [ebp+arg_4]  +
push [ebp+var_8]  +
call sub_101D093  +
mov edi eax +
test edi edi +
jnz loc_101E468  +
push 714h  +
call esi  +
xor eax eax +
jmp loc_101E485  +
mov ebx [ebp+var_4] +
test ebx ebx +
jnz loc_101E472  +
mov ebx [ebp+var_8] +
push [ebp+arg_10]  +
mov eax edi +
push [ebp+dwBytes]  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call sub_101E004  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+arg_0]  +
xor esi esi +
xor edi edi +
inc esi  +
call sub_101A106  +
cmp eax edi +
jz loc_101E4E5  +
mov eax [eax+1BCh] +
cmp eax edi +
jz loc_101E4DE  +
cmp [ebp+arg_4] esi +
jz loc_101E4C0  +
mov eax [eax+4] +
inc esi  +
cmp eax edi +
jnz loc_101E4B3  +
cmp eax edi +
jz loc_101E4DE  +
mov eax [eax] +
push edi  +
push [ebp+arg_C]  +
add eax 28h +
push edi  +
push [ebp+dwBytes]  +
push eax  +
push [ebp+arg_0]  +
call sub_101E358  +
mov edi eax +
jmp loc_101E4ED  +
push 714h  +
jmp loc_101E4E7  +
push 57h  +
call ds:SetLastError  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
xor edi edi +
push ebx  +
mov [ebp+var_4] edi +
call sub_101A106  +
mov esi eax +
xor eax eax +
and [ebp+var_8] eax +
mov [ebp+var_C] edi +
mov [ebp+var_10] edi +
mov [ebp+var_18] edi +
lea edi [ebp+var_14] +
stos   +
test ebx ebx +
jz loc_101E7BF  +
cmp [ebp+arg_4] eax +
jz loc_101E7BF  +
cmp [ebp+lpMem] 0FFFFFFFFh +
jz loc_101E7BF  +
mov edi [ebp+hObject] +
test edi edi +
jz loc_101E7BF  +
lea ecx [ebp+var_C] +
push ecx  +
push 1  +
lea eax [edi+28h] +
push eax  +
push ebx  +
call sub_101A106  +
push eax  +
call sub_101D093  +
xor ecx ecx +
mov [ebp+arg_0] eax +
cmp eax ecx +
jz loc_101E58D  +
cmp [ebp+var_C] esi +
jnz loc_101E574  +
inc dword ptr [eax+24h]  +
cmp [ebp+arg_18] ecx +
jz loc_101E585  +
push dword ptr [edi+1Ch]  +
push dword ptr [edi+18h]  +
push ebx  +
call sub_101A384  +
xor eax eax +
inc eax  +
jmp loc_101E7C9  +
push ecx  +
push ecx  +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push ebx  +
call sub_1019CD7  +
test eax eax +
jz loc_101E7C7  +
lea eax [ebp+var_18] +
push eax  +
push [ebp+lpMem]  +
call sub_1019FD0  +
test eax eax +
jz loc_101E7C7  +
cmp [ebp+arg_14] 2 +
mov eax [esi+1D8h] +
mov [edi+10h] eax +
mov eax [esi+1DCh] +
mov [edi+14h] eax +
jz loc_101E5EC  +
lea eax [esi+0Ch] +
push eax  +
lea eax [esi+8] +
push eax  +
push 1  +
push edi  +
call sub_1021E70  +
mov [ebp+arg_0] eax +
test eax eax +
jz loc_101E6A9  +
and [ebp+var_40] 0 +
xor eax eax +
lea edi [ebp+var_3C] +
stos   +
stos   +
stos   +
stos   +
xor eax eax +
xor ecx ecx +
mov [ebp+var_2C] ecx +
lea edi [ebp+var_28] +
stos   +
stos   +
stos   +
stos   +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+arg_4] +
push eax  +
push ebx  +
mov [ebp+arg_4] ecx +
mov [ebp+var_C] ecx +
call sub_1019C9C  +
test eax eax +
jz loc_101E68B  +
mov ecx [ebp+arg_4] +
test ecx ecx +
jz loc_101E68B  +
mov eax [ebp+var_C] +
test eax eax +
jz loc_101E68B  +
or dword ptr [esi+190h] 2 +
mov [ebp+var_30] ecx +
mov ecx [esi+1D8h] +
xor edx edx +
inc edx  +
mov [ebp+var_24] ecx +
mov ecx [esi+1DCh] +
or [ebx+24h] edx +
cmp [ebp+var_8] 0 +
mov [ebp+var_4] edx +
mov [ebp+var_20] ecx +
mov [ebp+var_1C] eax +
jz loc_101E6B1  +
push [ebp+arg_18]  +
lea eax [ebp+var_2C] +
push [ebp+var_10]  +
push [ebp+var_8]  +
push [ebp+var_14]  +
push [ebp+var_18]  +
push eax  +
push dword ptr [esi+4]  +
lea eax [ebp+var_40] +
push eax  +
push [ebp+lpMem]  +
push ebx  +
call sub_101CE45  +
mov [ebp+var_4] eax +
test eax eax +
jnz loc_101E6B1  +
call ds:GetLastError  +
mov edi [ebp+hObject] +
cmp [ebp+arg_0] 0 +
jz loc_101E6A9  +
cmp edi [ebp+arg_0] +
jz loc_101E6A9  +
push [ebp+arg_0]  +
lea eax [esi+0Ch] +
push eax  +
add esi 8 +
push esi  +
call sub_1021C9E  +
mov eax [ebp+var_4] +
jmp loc_101E7C9  +
mov eax [ebp+arg_0] +
push eax  +
add eax 28h +
push eax  +
push esi  +
call sub_1019894  +
push eax  +
call sub_102027D  +
test eax eax +
jnz loc_101E6CC  +
and [ebp+var_4] eax +
cmp [ebp+var_4] 0 +
mov edi [ebp+hObject] +
jz loc_101E68E  +
mov eax [edi+1Ch] +
cmp eax [ebp+var_14] +
jl loc_101E701  +
jg loc_101E6E7  +
mov eax [edi+18h] +
cmp eax [ebp+var_18] +
jbe loc_101E701  +
cmp [ebp+arg_18] 0 +
jz loc_101E701  +
mov eax [edi+18h] +
sub eax [ebp+var_18] +
mov ecx [edi+1Ch] +
sbb ecx [ebp+var_14] +
push ecx  +
push eax  +
push ebx  +
call sub_101A384  +
mov eax [ebp+var_18] +
add [esi+1D8h] eax +
mov eax [ebp+var_14] +
mov [ebp+arg_0] edi +
adc [esi+1DCh] eax +
cmp [ebp+arg_14] 2 +
jz loc_101E7B0  +
test byte ptr [ebx+1Ch] 2 +
jz loc_101E7B0  +
or [ebp+hObject] 0FFFFFFFFh +
and [ebp+var_4] 0 +
push ebx  +
call sub_101A106  +
push eax  +
call sub_101FCF0  +
mov ecx eax +
xor eax eax +
mov [ebp+lpMem] ecx +
cmp ecx eax +
jz loc_101E68E  +
cmp [ecx] ax +
jz loc_101E795  +
push eax  +
lea edx [ebp+hObject] +
push edx  +
push eax  +
push ecx  +
lea eax [edi+28h] +
push eax  +
push ebx  +
call sub_101E358  +
test eax eax +
jz loc_101E795  +
cmp [ebp+hObject] 0FFFFFFFFh +
jz loc_101E795  +
push [ebp+hObject]  +
push [ebp+hFile]  +
push ebx  +
call sub_10151FB  +
test eax eax +
jz loc_101E786  +
mov [ebp+var_4] 1 +
jmp loc_101E78C  +
call ds:GetLastError  +
push [ebp+hObject]  +
call ds:CloseHandle  +
push [ebp+lpMem]  +
call ds:DeleteFileW  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp [ebp+var_4] 0 +
jnz loc_101E6A9  +
jmp loc_101E68E  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 74h +
mov eax dword_1049010 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
mov [ebp+lpFileName] ecx +
mov ecx [ebp+arg_C] +
mov ebx edx +
push eax  +
mov [ebp+var_50] eax +
mov [ebp+lpMem] ebx +
mov [ebp+var_6C] ecx +
call sub_101A106  +
or [ebp+hObject] 0FFFFFFFFh +
xor ecx ecx +
mov esi eax +
xor eax eax +
mov [ebp+var_68] ecx +
lea edi [ebp+var_64] +
push 38h  +
stos   +
push ecx  +
lea eax [ebp+var_3C] +
push eax  +
mov [ebp+var_5C] ecx +
mov [ebp+hFile] ebx +
mov [ebp+var_44] ecx +
call memset  +
xor ebx ebx +
xor edi edi +
add esp 0Ch +
mov [ebp+dwErrCode] ebx +
mov [ebp+var_70] ebx +
cmp [ebp+var_50] edi +
jz loc_101EA87  +
cmp esi edi +
jz loc_101EA87  +
push [ebp+arg_14]  +
lea eax [ebp+var_68] +
push eax  +
lea eax [ebp+var_44] +
push eax  +
lea eax [ebp+var_5C] +
push eax  +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
push [ebp+lpMem]  +
push [ebp+lpFileName]  +
push [ebp+var_50]  +
call sub_101DBB8  +
mov [ebp+var_4C] eax +
cmp eax edi +
jnz loc_101E881  +
call ds:GetLastError  +
mov [ebp+dwErrCode] eax +
jmp loc_101EA64  +
cmp [ebp+var_5C] edi +
jnz loc_101E956  +
push [ebp+var_50]  +
call sub_101983A  +
mov [ebp+var_70] eax +
cmp eax edi +
jz loc_101E956  +
push 68h  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov ebx eax +
cmp ebx edi +
jz loc_101E94A  +
push 10h  +
pop ecx  +
lea edi [ebx+18h] +
lea esi [ebp+var_44] +
movs   +
mov eax [ebp+var_68] +
mov [ebx+10h] eax +
mov eax [ebp+var_64] +
mov [ebx+14h] eax +
mov eax [ebp+arg_4] +
mov [ebx+58h] eax +
mov eax [ebp+arg_8] +
xor edi edi +
push edi  +
push [ebp+lpFileName]  +
mov [ebx+5Ch] eax +
mov eax [ebp+arg_14] +
mov [ebx+60h] eax +
call sub_101509B  +
mov [ebx+8] eax +
cmp eax edi +
jz loc_101E918  +
mov esi ds:GetCurrentProcess +
push 2  +
push edi  +
push edi  +
push ebx  +
call esi  +
push eax  +
push [ebp+lpMem]  +
call esi  +
push eax  +
call ds:DuplicateHandle  +
test eax eax +
jz loc_101E918  +
mov eax [ebx] +
mov [ebx+4] eax +
jmp loc_101E956  +
mov eax [ebx+8] +
mov esi ds:HeapFree +
cmp eax edi +
jz loc_101E937  +
push eax  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call esi  +
test eax eax +
jz loc_101E937  +
mov [ebx+8] edi +
push ebx  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call esi  +
test eax eax +
jz loc_101E956  +
xor ebx ebx +
jmp loc_101E956  +
mov [ebp+var_4C] edi +
call ds:GetLastError  +
mov [ebp+dwErrCode] eax +
cmp [ebp+var_4C] 0 +
jz loc_101EA64  +
cmp [ebp+var_5C] 0 +
jnz loc_101E9CF  +
test ebx ebx +
jz loc_101E9CF  +
push [ebp+var_50]  +
call sub_1019C4C  +
mov esi eax +
test esi esi +
jl loc_101E98A  +
mov eax [ebp+var_70] +
push ebx  +
push dword ptr [eax+0Ch]  +
call sub_101B6A1  +
mov esi eax +
test esi esi +
jge loc_101E9CF  +
and [ebp+var_4C] 0 +
test esi 10000000h +
jz loc_101E9B6  +
mov edi ds:RtlNtStatusToDosError +
push esi  +
call edi  +
cmp eax 13Dh +
jnz loc_101E9AE  +
mov [ebp+dwErrCode] esi +
jmp loc_101EA64  +
push esi  +
call edi  +
jmp loc_101E879  +
mov eax esi +
and eax 1FFF0000h +
cmp eax 70000h +
jnz loc_101E9CC  +
movzx eax si +
jmp loc_101E879  +
mov [ebp+dwErrCode] esi +
xor esi esi +
cmp [ebp+var_4C] esi +
jz loc_101EA64  +
cmp ebx esi +
jnz loc_101EA48  +
cmp [ebp+var_5C] esi +
jnz loc_101EA48  +
cmp [ebp+arg_8] esi +
jz loc_101EA2A  +
push 3  +
push [ebp+var_50]  +
call sub_101A2F1  +
push eax  +
lea eax [ebp+var_68] +
push eax  +
lea eax [ebp+hObject] +
push eax  +
push [ebp+lpMem]  +
push [ebp+lpFileName]  +
push [ebp+var_50]  +
call sub_1020E9E  +
test eax eax +
jz loc_101EA2A  +
cmp [ebp+hObject] 0FFFFFFFFh +
jz loc_101EA2A  +
lea eax [ebp+var_68] +
push eax  +
lea eax [ebp+var_44] +
push eax  +
call sub_1021B94  +
mov eax [ebp+hObject] +
or [ebp+var_35] 4 +
mov [ebp+lpMem] eax +
push [ebp+arg_14]  +
lea eax [ebp+var_44] +
push [ebp+arg_4]  +
push eax  +
push [ebp+hFile]  +
push [ebp+lpMem]  +
push [ebp+lpFileName]  +
push [ebp+var_50]  +
call sub_101E4FA  +
mov [ebp+var_4C] eax +
cmp [ebp+var_4C] esi +
jz loc_101EA64  +
cmp [ebp+var_6C] esi +
jz loc_101EA64  +
push [ebp+arg_10]  +
lea eax [ebp+var_44] +
push eax  +
push [ebp+var_6C]  +
call memcpy  +
add esp 0Ch +
cmp [ebp+hObject] 0FFFFFFFFh +
jz loc_101EA73  +
push [ebp+hObject]  +
call ds:CloseHandle  +
cmp [ebp+dwErrCode] 0 +
jz loc_101EA82  +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
mov eax [ebp+var_4C] +
jmp loc_101EA91  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010796  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push esi  +
push edi  +
push [ebp+arg_0]  +
xor edi edi +
mov [ebp+var_C] edi +
call sub_101A106  +
mov esi eax +
mov [ebp+dwErrCode] edi +
cmp esi edi +
jnz loc_101EACE  +
xor eax eax +
jmp loc_101EBDC  +
push esi  +
call sub_1019755  +
test al 1 +
jnz loc_101EBD9  +
test al 2 +
jz loc_101EBD9  +
push ebx  +
lea eax [ebp+lpMem] +
push eax  +
push esi  +
call sub_101FDA6  +
mov ebx eax +
cmp ebx 0FFFFFFFFh +
jz loc_101EBD3  +
push dword ptr [esi+10h]  +
push dword ptr [esi+8]  +
push dword ptr [esi+1BCh]  +
push ebx  +
call sub_1021F8C  +
mov [ebp+var_C] eax +
cmp eax edi +
jz loc_101EB98  +
mov [ebp+var_18] edi +
xor eax eax +
lea edi [ebp+var_14] +
stos   +
lea eax [ebp+var_18] +
push eax  +
push ebx  +
call ds:GetFileSizeEx  +
push esi  +
call sub_1019755  +
mov ecx [ebp+lpMem] +
xor edi edi +
push edi  +
push 40h  +
mov [ebp+var_10] eax +
lea eax [esi+48h] +
push eax  +
push edi  +
push 2  +
push [ebp+arg_0]  +
mov edx ebx +
call sub_101E7D5  +
mov [ebp+var_C] eax +
cmp eax edi +
jz loc_101EB6D  +
push esi  +
call sub_1019755  +
test al 2 +
jz loc_101EB76  +
test byte ptr [ebp+var_10] 2 +
jnz loc_101EB76  +
and dword ptr [esi+190h] 0FFFFFFFDh +
jmp loc_101EB76  +
call ds:GetLastError  +
mov [ebp+dwErrCode] eax +
push edi  +
push edi  +
push dword ptr [esi+1DCh]  +
push dword ptr [esi+1D8h]  +
push dword ptr [esi+4]  +
call sub_101A018  +
push dword ptr [esi+4]  +
call sub_101A0D0  +
xor edi edi +
jmp loc_101EBA1  +
call ds:GetLastError  +
mov [ebp+dwErrCode] eax +
push ebx  +
call ds:CloseHandle  +
cmp [ebp+lpMem] edi +
jz loc_101EBC5  +
push [ebp+lpMem]  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
test eax eax +
jz loc_101EBC5  +
mov [ebp+lpMem] edi +
cmp [ebp+dwErrCode] edi +
jz loc_101EBD3  +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
mov eax [ebp+var_C] +
pop ebx  +
jmp loc_101EBDC  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push edi  +
push [ebp+arg_0]  +
xor edi edi +
mov [ebp+var_C] edi +
call sub_101A106  +
mov esi eax +
mov [ebp+dwErrCode] edi +
cmp esi edi +
jnz loc_101EC0E  +
xor eax eax +
jmp loc_101ECFA  +
push esi  +
call sub_1019755  +
mov [ebp+var_10] eax +
test al 1 +
jnz loc_101ECF7  +
test al 0Eh +
jz loc_101ECF7  +
push ebx  +
lea eax [ebp+lpMem] +
push eax  +
push [ebp+arg_0]  +
call sub_101A106  +
push eax  +
call sub_101FDA6  +
mov ebx eax +
cmp ebx 0FFFFFFFFh +
jz loc_101ECF1  +
push edi  +
push edi  +
push esi  +
push ebx  +
push dword ptr [esi+1B4h]  +
call sub_101BEF5  +
mov [ebp+var_C] eax +
cmp eax edi +
jz loc_101ECB6  +
test byte ptr [esi+19Ch] 40h +
jnz loc_101EC7C  +
mov eax [esi+60h] +
add eax [esi+58h] +
mov ecx [esi+64h] +
adc ecx [esi+5Ch] +
mov [esi+1D8h] eax +
mov [esi+1DCh] ecx +
mov ecx [ebp+lpMem] +
push edi  +
push 40h  +
lea eax [esi+88h] +
push eax  +
push edi  +
push 2  +
push [ebp+arg_0]  +
mov edx ebx +
call sub_101E7D5  +
mov [ebp+var_C] eax +
cmp eax edi +
jz loc_101ECB6  +
push esi  +
call sub_1019755  +
test al 2 +
jz loc_101ECBF  +
test byte ptr [ebp+var_10] 2 +
jnz loc_101ECBF  +
and dword ptr [esi+190h] 0FFFFFFFDh +
jmp loc_101ECBF  +
call ds:GetLastError  +
mov [ebp+dwErrCode] eax +
push ebx  +
call ds:CloseHandle  +
cmp [ebp+lpMem] edi +
jz loc_101ECE3  +
push [ebp+lpMem]  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
test eax eax +
jz loc_101ECE3  +
mov [ebp+lpMem] edi +
cmp [ebp+dwErrCode] edi +
jz loc_101ECF1  +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
mov eax [ebp+var_C] +
pop ebx  +
jmp loc_101ECFA  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx eax +
test ebx ebx +
jz loc_101ED50  +
push esi  +
mov esi ds:HeapFree +
push edi  +
mov edi ds:GetProcessHeap +
mov eax ebx +
mov ebx [ebx+24h] +
mov [ebp+lpMem] eax +
mov eax [eax] +
test eax eax +
jz loc_101ED40  +
push eax  +
push 0  +
call edi  +
push eax  +
call esi  +
test eax eax +
jz loc_101ED40  +
mov eax [ebp+lpMem] +
and dword ptr [eax] 0 +
push [ebp+lpMem]  +
push 0  +
call edi  +
push eax  +
call esi  +
test ebx ebx +
jnz loc_101ED20  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
xor eax eax +
cmp [ebp+arg_0] eax +
jz locret_101EDC0  +
push esi  +
push [ebp+arg_0]  +
call sub_1019621  +
mov esi eax +
test esi esi +
jz loc_101EDB2  +
push ebx  +
mov ebx ds:GetProcessHeap +
push edi  +
mov edi ds:HeapFree +
mov eax esi +
mov esi [esi+0Ch] +
mov [ebp+lpMem] eax +
mov eax [eax] +
test eax eax +
jz loc_101EDA2  +
push eax  +
push 0  +
call ebx  +
push eax  +
call edi  +
test eax eax +
jz loc_101EDA2  +
mov eax [ebp+lpMem] +
and dword ptr [eax] 0 +
push [ebp+lpMem]  +
push 0  +
call ebx  +
push eax  +
call edi  +
test esi esi +
jnz loc_101ED82  +
pop edi  +
pop ebx  +
push 0  +
push [ebp+arg_0]  +
call sub_101963B  +
xor eax eax +
inc eax  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_0]  +
call sub_1019621  +
test eax eax +
jz loc_101EE10  +
mov ebx [ebp+arg_8] +
cmp [ebp+arg_10] 0 +
jz loc_101EDEE  +
mov ecx [ebp+arg_C] +
cmp ecx [eax+8] +
jmp loc_101EE07  +
cmp [eax+4] ebx +
jnz loc_101EE09  +
mov edi [ebp+arg_4] +
mov esi [eax] +
mov ecx ebx +
xor edx edx +
cmps   +
jz loc_101EE05  +
sbb edx edx +
sbb edx 0FFFFFFFFh +
test edx edx +
jz loc_101EE12  +
mov eax [eax+0Ch] +
test eax eax +
jnz loc_101EDE0  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
xor esi esi +
push edi  +
cmp [ebp+arg_4] esi +
jz loc_101EEF1  +
cmp [ebp+dwBytes] esi +
jz loc_101EEF1  +
cmp [ebp+arg_C] 0FFFFFFFFh +
jnz loc_101EE59  +
push esi  +
push 0FFFFFFFFh  +
push [ebp+dwBytes]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101EDC9  +
cmp eax esi +
jnz loc_101EEFB  +
mov edi ds:GetProcessHeap +
push 10h  +
push 8  +
call edi  +
mov ebx ds:HeapAlloc +
push eax  +
call ebx  +
mov esi eax +
test esi esi +
jz loc_101EEF9  +
push [ebp+dwBytes]  +
push 8  +
call edi  +
push eax  +
call ebx  +
xor ebx ebx +
mov [esi] eax +
cmp eax ebx +
jnz loc_101EE97  +
push esi  +
push ebx  +
call edi  +
push eax  +
call ds:HeapFree  +
jmp loc_101EEF9  +
mov edi [ebp+dwBytes] +
push edi  +
push [ebp+arg_4]  +
push eax  +
call memcpy  +
add esp 0Ch +
push [ebp+arg_0]  +
mov [esi+4] edi +
call sub_1019621  +
cmp eax ebx +
jnz loc_101EED0  +
push esi  +
push [ebp+arg_0]  +
call sub_101963B  +
mov eax [ebp+arg_C] +
cmp eax ebx +
jge loc_101EEC8  +
xor eax eax +
mov [esi+8] eax +
mov [esi+0Ch] ebx +
jmp loc_101EEED  +
cmp [ebp+arg_C] ebx +
mov [esi+0Ch] eax +
jge loc_101EEDE  +
mov eax [eax+8] +
inc eax  +
jmp loc_101EEE1  +
mov eax [ebp+arg_C] +
push esi  +
push [ebp+arg_0]  +
mov [esi+8] eax +
call sub_101963B  +
mov eax esi +
jmp loc_101EEFB  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_101F012  +
push ebx  +
push esi  +
mov esi ds:HeapFree +
push edi  +
mov edi ds:GetProcessHeap +
jmp loc_101EF2B  +
mov eax [ebp+arg_0] +
cmp dword ptr [eax+70h] 0 +
jz loc_101EF96  +
mov ebx [eax+70h] +
mov ecx [ebx+64h] +
mov [eax+70h] ecx +
mov eax [ebx+50h] +
test eax eax +
jz loc_101EF51  +
push eax  +
push 0  +
call edi  +
push eax  +
call esi  +
test eax eax +
jz loc_101EF51  +
and dword ptr [ebx+50h] 0 +
mov eax [ebx+4Ch] +
call sub_101ED05  +
mov eax [ebx+8] +
test eax eax +
jz loc_101EF70  +
push eax  +
push 0  +
call edi  +
push eax  +
call esi  +
test eax eax +
jz loc_101EF70  +
and dword ptr [ebx+8] 0 +
mov eax [ebx] +
test eax eax +
jz loc_101EF85  +
push eax  +
push 0  +
call edi  +
push eax  +
call esi  +
test eax eax +
jz loc_101EF85  +
and dword ptr [ebx] 0 +
push ebx  +
push 0  +
call edi  +
push eax  +
call esi  +
mov eax [ebp+arg_0] +
cmp dword ptr [eax+70h] 0 +
jnz loc_101EF31  +
mov ecx [eax+68h] +
test ecx ecx +
jz loc_101EFA6  +
push ecx  +
call sub_101EF07  +
mov eax [ebp+arg_0] +
mov ebx eax +
mov eax [eax+64h] +
mov [ebp+arg_0] eax +
mov eax [ebx+50h] +
test eax eax +
jz loc_101EFC5  +
push eax  +
push 0  +
call edi  +
push eax  +
call esi  +
test eax eax +
jz loc_101EFC5  +
and dword ptr [ebx+50h] 0 +
mov eax [ebx+4Ch] +
test eax eax +
jz loc_101EFD1  +
call sub_101ED05  +
mov eax [ebx+8] +
test eax eax +
jz loc_101EFE8  +
push eax  +
push 0  +
call edi  +
push eax  +
call esi  +
test eax eax +
jz loc_101EFE8  +
and dword ptr [ebx+8] 0 +
mov eax [ebx] +
test eax eax +
jz loc_101EFFD  +
push eax  +
push 0  +
call edi  +
push eax  +
call esi  +
test eax eax +
jz loc_101EFFD  +
and dword ptr [ebx] 0 +
push ebx  +
push 0  +
call edi  +
push eax  +
call esi  +
cmp [ebp+arg_0] 0 +
jnz loc_101EF28  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
and [ebp+arg_0] 0 +
push esi  +
push edi  +
mov edi [eax+4] +
lea esi [eax+edi*8+8] +
test esi esi +
jz loc_101F07B  +
add eax 8 +
mov [ebp+var_4] eax +
push ebx  +
cmp [ebp+arg_0] edi +
jnb loc_101F06E  +
mov ebx [eax] +
test ebx ebx +
jz loc_101F05E  +
push [ebp+arg_0]  +
push ebx  +
push esi  +
push [ebp+arg_4]  +
call sub_101EE1E  +
test eax eax +
jz loc_101F05C  +
add esi ebx +
jmp loc_101F05E  +
xor esi esi +
mov eax [ebp+var_4] +
inc [ebp+arg_0]  +
add eax 8 +
mov [ebp+var_4] eax +
test esi esi +
jnz loc_101F03C  +
pop ebx  +
test esi esi +
jz loc_101F07B  +
add esi 7 +
and esi 0FFFFFFF8h +
jmp loc_101F092  +
call ds:GetLastError  +
push [ebp+arg_4]  +
mov edi eax +
call sub_101ED58  +
push edi  +
call ds:SetLastError  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov edx [ebp+arg_0] +
push ebx  +
push esi  +
movzx esi word ptr [edx+64h] +
xor ecx ecx +
xor eax eax +
push edi  +
test si si +
jz loc_101F0BE  +
movzx ecx si +
inc ecx  +
inc ecx  +
movzx esi word ptr [edx+62h] +
test si si +
jz loc_101F0CC  +
movzx eax si +
inc eax  +
inc eax  +
mov ebx [edx] +
and [ebp+var_4] 0 +
mov edi [edx+4] +
lea ecx [eax+ecx+6Dh] +
and ecx 0FFFFFFF8h +
mov esi ebx +
sub esi ecx +
mov eax edi +
sbb eax [ebp+var_4] +
test eax eax +
jg loc_101F0F0  +
jl loc_101F127  +
cmp esi 8 +
jb loc_101F127  +
cmp [ebp+var_4] edi +
jg loc_101F127  +
jge loc_101F123  +
lea eax [ecx+edx] +
mov esi [eax] +
cmp [ebp+arg_4] esi +
jz loc_101F129  +
test esi esi +
jz loc_101F127  +
mov eax [eax+4] +
xor esi esi +
add eax ecx +
adc esi [ebp+var_4] +
add eax 0Fh +
adc esi 0 +
and eax 0FFFFFFF8h +
cmp esi edi +
mov ecx eax +
mov [ebp+var_4] esi +
jl loc_101F0F7  +
jg loc_101F127  +
cmp ecx ebx +
jb loc_101F0F7  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax [ebp+arg_8] +
xor edx edx +
xor ecx ecx +
inc edx  +
push ebx  +
mov [ebp+var_4] edx +
mov ebx eax +
mov [ebp+dwErrCode] ecx +
cmp [eax] ecx +
jnz loc_101F15E  +
cmp [eax+4] ecx +
jnz loc_101F15E  +
mov eax edx +
jmp loc_101F976  +
mov ecx [ebp+arg_C] +
push esi  +
push edi  +
mov edi ds:HeapAlloc +
cmp ecx [ebp+arg_10] +
jnz loc_101F349  +
add eax [eax] +
push 78h  +
mov edi ecx +
push 0  +
push edi  +
mov [ebp+arg_8] eax +
call memset  +
mov eax [ebx+8] +
mov [edi+10h] eax +
mov eax [ebx+28h] +
mov [edi+30h] eax +
mov eax [ebx+2Ch] +
mov [edi+34h] eax +
mov eax [ebx+30h] +
mov [edi+38h] eax +
mov eax [ebx+34h] +
mov [edi+3Ch] eax +
mov eax [ebx+38h] +
mov [edi+40h] eax +
mov eax [ebx+3Ch] +
add esp 0Ch +
mov [edi+44h] eax +
push 5  +
add edi 14h +
lea esi [ebx+40h] +
pop ecx  +
movs   +
mov eax [ebx+0Ch] +
cmp eax 0FFFFFFFFh +
jz loc_101F1D8  +
push 1  +
push eax  +
push 0  +
push 0  +
push [ebp+arg_0]  +
call sub_101EDC9  +
mov ecx [ebp+arg_C] +
mov [ecx+48h] eax +
push 1  +
push ebx  +
call sub_101F09F  +
mov esi eax +
test esi esi +
jz loc_101F211  +
cmp dword ptr [esi+4] 40h +
jnz loc_101F211  +
push 40h  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov ecx [ebp+arg_C] +
mov [ecx+50h] eax +
test eax eax +
jz loc_101F211  +
push 10h  +
add esi 8 +
pop ecx  +
mov edi eax +
movs   +
movzx eax word ptr [ebx+60h] +
xor ecx ecx +
cmp ax cx +
jz loc_101F32E  +
cmp [ebp+arg_8] ecx +
jz loc_101F32E  +
mov [ebp+var_18] ecx +
mov [ebp+var_14] ecx +
cmp cx ax +
jnb loc_101F32E  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_101F32E  +
mov esi eax +
add eax [eax] +
push 28h  +
push 8  +
mov [ebp+arg_8] eax +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+lpMem] eax +
test eax eax +
jz loc_101F2FC  +
mov edx [ebp+lpMem] +
push 0Ah  +
xor eax eax +
pop ecx  +
mov edi edx +
stos   +
mov ax [esi+24h] +
mov [edx+4] ax +
movzx eax word ptr [esi+24h] +
inc eax  +
inc eax  +
push eax  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov ecx [ebp+lpMem] +
mov [ecx] eax +
test eax eax +
jz loc_101F307  +
movzx ecx word ptr [esi+24h] +
inc ecx  +
inc ecx  +
push ecx  +
push 0  +
push eax  +
call memset  +
movzx eax word ptr [esi+24h] +
mov edi [ebp+lpMem] +
push eax  +
lea eax [esi+26h] +
push eax  +
push dword ptr [edi]  +
call memcpy  +
add esp 18h +
push 5  +
add esi 10h +
add edi 10h +
cmp [ebp+var_18] 0 +
pop ecx  +
movs   +
jz loc_101F2DA  +
mov eax [ebp+var_18] +
mov ecx [ebp+lpMem] +
mov [eax+24h] ecx +
jmp loc_101F2E3  +
mov eax [ebp+lpMem] +
mov ecx [ebp+arg_C] +
mov [ecx+4Ch] eax +
mov eax [ebp+lpMem] +
inc [ebp+var_14]  +
mov [ebp+var_18] eax +
mov ax word ptr [ebp+var_14] +
cmp ax [ebx+60h] +
jb loc_101F238  +
jmp loc_101F32E  +
call ds:GetLastError  +
mov [ebp+dwErrCode] eax +
jmp loc_101F322  +
call ds:GetLastError  +
push [ebp+lpMem]  +
mov [ebp+dwErrCode] eax +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
push [ebp+arg_C]  +
call sub_101EF07  +
and [ebp+var_4] 0 +
mov ebx [ebp+arg_8] +
add ebx 8 +
mov eax [ebx] +
or eax [ebx+4] +
mov [ebp+arg_8] ebx +
jnz loc_101F340  +
xor ebx ebx +
mov eax [ebp+arg_8] +
mov edi ds:HeapAlloc +
test ebx ebx +
jz loc_101F962  +
cmp [ebp+var_4] 0 +
jz loc_101F962  +
add eax [ebx] +
mov ecx [eax] +
or ecx [eax+4] +
mov [ebp+arg_8] eax +
mov [ebp+var_C] eax +
jnz loc_101F36D  +
and [ebp+var_C] ecx +
mov eax [ebx+8] +
test al 10h +
jz loc_101F65B  +
test eax 400h +
jnz loc_101F65B  +
push 78h  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call edi  +
mov esi eax +
mov [ebp+lpMem] esi +
test esi esi +
jz loc_101F97B  +
push 78h  +
push 0  +
push esi  +
call memset  +
movzx eax word ptr [ebx+64h] +
movzx ecx ax +
add esp 0Ch +
inc ecx  +
inc ecx  +
push ecx  +
shr ax 1 +
push 8  +
mov [esi+4] ax +
call ds:GetProcessHeap  +
push eax  +
call edi  +
mov [esi] eax +
test eax eax +
jz loc_101F94F  +
movzx ecx word ptr [ebx+64h] +
inc ecx  +
inc ecx  +
push ecx  +
push 0  +
push eax  +
call memset  +
movzx eax word ptr [ebx+64h] +
push eax  +
lea eax [ebx+66h] +
push eax  +
push dword ptr [esi]  +
call memcpy  +
add esp 18h +
cmp word ptr [ebx+62h] 0 +
jz loc_101F44A  +
movzx eax word ptr [ebx+62h] +
movzx ecx ax +
inc ecx  +
inc ecx  +
push ecx  +
shr ax 1 +
push 8  +
mov [esi+0Ch] ax +
call ds:GetProcessHeap  +
push eax  +
call edi  +
mov [esi+8] eax +
test eax eax +
jz loc_101F94F  +
movzx ecx word ptr [ebx+62h] +
inc ecx  +
inc ecx  +
push ecx  +
push 0  +
push eax  +
call memset  +
movzx eax word ptr [ebx+62h] +
push eax  +
movzx eax word ptr [ebx+64h] +
shr eax 1 +
lea eax [ebx+eax*2+68h] +
push eax  +
push dword ptr [esi+8]  +
call memcpy  +
add esp 18h +
mov ecx [ebx+8] +
mov eax [ebp+lpMem] +
mov [eax+10h] ecx +
mov ecx [ebx+28h] +
mov [eax+30h] ecx +
mov ecx [ebx+2Ch] +
mov [eax+34h] ecx +
mov ecx [ebx+30h] +
mov [eax+38h] ecx +
mov ecx [ebx+34h] +
mov [eax+3Ch] ecx +
mov ecx [ebx+38h] +
mov [eax+40h] ecx +
mov ecx [ebx+3Ch] +
mov [eax+44h] ecx +
push 5  +
lea edi [eax+14h] +
lea esi [ebx+40h] +
pop ecx  +
movs   +
mov eax [ebx+0Ch] +
cmp eax 0FFFFFFFFh +
jz loc_101F4A1  +
push 1  +
push eax  +
push 0  +
push 0  +
push [ebp+arg_0]  +
call sub_101EDC9  +
mov esi [ebp+lpMem] +
mov [esi+48h] eax +
jmp loc_101F4A4  +
mov esi [ebp+lpMem] +
push 1  +
push ebx  +
call sub_101F09F  +
mov edi eax +
test edi edi +
jz loc_101F4DD  +
cmp dword ptr [edi+4] 40h +
jnz loc_101F4DD  +
push 40h  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [esi+50h] eax +
test eax eax +
jz loc_101F4DD  +
lea esi [edi+8] +
push 10h  +
pop ecx  +
mov edi eax +
movs   +
mov esi [ebp+lpMem] +
movzx eax word ptr [ebx+60h] +
xor ecx ecx +
cmp ax cx +
jz loc_101F5DB  +
cmp [ebp+var_C] ecx +
jz loc_101F5DB  +
mov [ebp+var_18] ecx +
mov [ebp+var_1C] ecx +
cmp cx ax +
jnb loc_101F5DB  +
mov esi [ebp+var_C] +
test esi esi +
jz loc_101F5D8  +
mov eax [ebp+arg_8] +
add eax [esi] +
mov ecx [eax] +
or ecx [eax+4] +
mov [ebp+arg_8] eax +
mov [ebp+var_C] eax +
jnz loc_101F524  +
and [ebp+var_C] ecx +
push 28h  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+var_14] eax +
test eax eax +
jz loc_101F940  +
mov edx [ebp+var_14] +
push 0Ah  +
xor eax eax +
pop ecx  +
mov edi edx +
stos   +
mov ax [esi+24h] +
mov [edx+4] ax +
movzx eax word ptr [esi+24h] +
inc eax  +
inc eax  +
push eax  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov ecx [ebp+var_14] +
mov [ecx] eax +
test eax eax +
jz loc_101F61C  +
movzx ecx word ptr [esi+24h] +
inc ecx  +
inc ecx  +
push ecx  +
push 0  +
push eax  +
call memset  +
movzx eax word ptr [esi+24h] +
mov edi [ebp+var_14] +
push eax  +
lea eax [esi+26h] +
push eax  +
push dword ptr [edi]  +
call memcpy  +
add esp 18h +
push 5  +
add esi 10h +
add edi 10h +
cmp [ebp+var_18] 0 +
pop ecx  +
movs   +
jz loc_101F5B8  +
mov eax [ebp+var_18] +
mov ecx [ebp+var_14] +
mov [eax+24h] ecx +
jmp loc_101F5C1  +
mov eax [ebp+var_14] +
mov ecx [ebp+lpMem] +
mov [ecx+4Ch] eax +
mov eax [ebp+var_14] +
inc [ebp+var_1C]  +
mov [ebp+var_18] eax +
mov ax word ptr [ebp+var_1C] +
cmp ax [ebx+60h] +
jb loc_101F504  +
mov esi [ebp+lpMem] +
cmp [ebp+var_4] 0 +
jz loc_101F94F  +
mov eax [ebx+10h] +
add eax [ebp+arg_4] +
push esi  +
push [ebp+arg_C]  +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101F135  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_101F94F  +
mov eax [ebp+arg_10] +
mov [esi+60h] eax +
test eax eax +
jz loc_101F64C  +
mov ecx [eax+6Ch] +
test ecx ecx +
jz loc_101F646  +
mov [ecx+64h] esi +
jmp loc_101F649  +
call ds:GetLastError  +
push [ebp+var_14]  +
mov [ebp+dwErrCode] eax +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov esi [ebp+lpMem] +
push esi  +
call sub_101EF07  +
and [ebp+var_4] 0 +
jmp loc_101F5DB  +
mov [eax+68h] esi +
mov [eax+6Ch] esi +
push 1  +
push [ebp+arg_0]  +
call sub_10195F7  +
jmp loc_101F92B  +
push 78h  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call edi  +
mov esi eax +
mov [ebp+lpMem] esi +
test esi esi +
jz loc_101F97B  +
push 78h  +
push 0  +
push esi  +
call memset  +
movzx eax word ptr [ebx+64h] +
movzx ecx ax +
add esp 0Ch +
inc ecx  +
inc ecx  +
push ecx  +
shr ax 1 +
push 8  +
mov [esi+4] ax +
call ds:GetProcessHeap  +
push eax  +
call edi  +
mov [esi] eax +
test eax eax +
jz loc_101F94F  +
movzx ecx word ptr [ebx+64h] +
inc ecx  +
inc ecx  +
push ecx  +
push 0  +
push eax  +
call memset  +
movzx eax word ptr [ebx+64h] +
push eax  +
lea eax [ebx+66h] +
push eax  +
push dword ptr [esi]  +
call memcpy  +
add esp 18h +
cmp word ptr [ebx+62h] 0 +
jz loc_101F722  +
movzx eax word ptr [ebx+62h] +
movzx ecx ax +
inc ecx  +
inc ecx  +
push ecx  +
shr ax 1 +
push 8  +
mov [esi+0Ch] ax +
call ds:GetProcessHeap  +
push eax  +
call edi  +
mov [esi+8] eax +
test eax eax +
jz loc_101F94F  +
movzx ecx word ptr [ebx+62h] +
inc ecx  +
inc ecx  +
push ecx  +
push 0  +
push eax  +
call memset  +
movzx eax word ptr [ebx+62h] +
push eax  +
movzx eax word ptr [ebx+64h] +
shr eax 1 +
lea eax [ebx+eax*2+68h] +
push eax  +
push dword ptr [esi+8]  +
call memcpy  +
add esp 18h +
mov eax [ebx+8] +
mov [esi+10h] eax +
mov eax [ebx+28h] +
mov [esi+30h] eax +
mov eax [ebx+2Ch] +
mov [esi+34h] eax +
mov eax [ebx+30h] +
mov [esi+38h] eax +
mov eax [ebx+34h] +
mov [esi+3Ch] eax +
mov eax [ebx+38h] +
mov [esi+40h] eax +
mov eax [ebx+3Ch] +
mov [esi+44h] eax +
mov eax [ebx+0Ch] +
cmp eax 0FFFFFFFFh +
jz loc_101F766  +
push 1  +
push eax  +
push 0  +
push 0  +
push [ebp+arg_0]  +
call sub_101EDC9  +
mov [esi+48h] eax +
mov eax [ebx+58h] +
mov [esi+54h] eax +
mov eax [ebx+5Ch] +
mov [esi+58h] eax +
mov eax [ebp+arg_10] +
mov [esi+60h] eax +
test eax eax +
jz loc_101F78E  +
mov ecx [eax+74h] +
test ecx ecx +
jz loc_101F788  +
mov [ecx+64h] esi +
jmp loc_101F78B  +
mov [eax+70h] esi +
mov [eax+74h] esi +
mov edi [ebp+lpMem] +
push 5  +
pop ecx  +
push 1  +
add edi 14h +
lea esi [ebx+40h] +
push ebx  +
movs   +
call sub_101F09F  +
mov esi eax +
test esi esi +
jz loc_101F7D5  +
cmp dword ptr [esi+4] 40h +
jnz loc_101F7D5  +
push 40h  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov ecx [ebp+lpMem] +
mov [ecx+50h] eax +
test eax eax +
jz loc_101F7D5  +
push 10h  +
add esi 8 +
pop ecx  +
mov edi eax +
movs   +
movzx eax word ptr [ebx+60h] +
xor ecx ecx +
cmp ax cx +
jz loc_101F921  +
cmp [ebp+var_C] ecx +
jz loc_101F921  +
mov [ebp+var_1C] ecx +
mov [ebp+var_18] ecx +
cmp cx ax +
jnb loc_101F921  +
mov esi [ebp+var_C] +
test esi esi +
jz loc_101F921  +
mov eax [ebp+arg_8] +
add eax [esi] +
mov ecx [eax] +
or ecx [eax+4] +
mov [ebp+arg_8] eax +
mov [ebp+var_C] eax +
jnz loc_101F81C  +
and [ebp+var_C] ecx +
xor eax eax +
cmp ax [esi+24h] +
jnz loc_101F83D  +
cmp ax word ptr [ebp+var_18] +
jnz loc_101F83D  +
mov edi [ebp+lpMem] +
add esi 10h +
push 5  +
pop ecx  +
add edi 14h +
movs   +
jmp loc_101F8DC  +
push 28h  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+var_14] eax +
test eax eax +
jz loc_101F8EF  +
mov edx [ebp+var_14] +
push 0Ah  +
xor eax eax +
pop ecx  +
mov edi edx +
stos   +
mov ax [esi+24h] +
mov [edx+4] ax +
movzx eax word ptr [esi+24h] +
inc eax  +
inc eax  +
push eax  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov ecx [ebp+var_14] +
mov [ecx] eax +
test eax eax +
jz loc_101F8FA  +
movzx ecx word ptr [esi+24h] +
inc ecx  +
inc ecx  +
push ecx  +
push 0  +
push eax  +
call memset  +
movzx eax word ptr [esi+24h] +
mov edi [ebp+var_14] +
push eax  +
lea eax [esi+26h] +
push eax  +
push dword ptr [edi]  +
call memcpy  +
add esp 18h +
push 5  +
add esi 10h +
add edi 10h +
cmp [ebp+var_1C] 0 +
pop ecx  +
movs   +
jz loc_101F8CD  +
mov eax [ebp+var_1C] +
mov ecx [ebp+var_14] +
mov [eax+24h] ecx +
jmp loc_101F8D6  +
mov eax [ebp+var_14] +
mov ecx [ebp+lpMem] +
mov [ecx+4Ch] eax +
mov eax [ebp+var_14] +
mov [ebp+var_1C] eax +
inc [ebp+var_18]  +
mov ax word ptr [ebp+var_18] +
cmp ax [ebx+60h] +
jb loc_101F7FC  +
jmp loc_101F921  +
call ds:GetLastError  +
mov [ebp+dwErrCode] eax +
jmp loc_101F915  +
call ds:GetLastError  +
push [ebp+var_14]  +
mov [ebp+dwErrCode] eax +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
push [ebp+lpMem]  +
call sub_101EF07  +
and [ebp+var_4] 0 +
push 1  +
push [ebp+arg_0]  +
call sub_10195CD  +
mov ebx [ebp+var_C] +
test ebx ebx +
jz loc_101F962  +
mov eax [ebp+arg_8] +
mov edi ds:HeapAlloc +
jmp loc_101F351  +
call ds:GetLastError  +
mov esi [ebp+lpMem] +
push esi  +
call sub_101EF07  +
call ds:GetLastError  +
push esi  +
mov [ebp+dwErrCode] eax +
call sub_101EF07  +
and [ebp+var_4] 0 +
cmp [ebp+dwErrCode] 0 +
pop edi  +
pop esi  +
jz loc_101F973  +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
mov eax [ebp+var_4] +
pop ebx  +
leave   +
retn 14h  +
call ds:GetLastError  +
mov [ebp+dwErrCode] eax +
jmp loc_101F95E  +
***
call __SEH_prolog4  +
xor esi esi +
mov [ebp+var_1C] esi +
mov [ebp+dwErrCode] esi +
mov [ebp+var_24] esi +
cmp [ebp+arg_0] esi +
jz loc_101FB1E  +
cmp [ebp+hFile] 0FFFFFFFFh +
jz loc_101FB1E  +
lea eax [ebp+dwMaximumSizeLow] +
push eax  +
push [ebp+hFile]  +
call ds:GetFileSizeEx  +
test eax eax +
jnz loc_101F9D3  +
call ds:GetLastError  +
mov esi eax +
jmp loc_101FB21  +
cmp [ebp+var_34] esi +
jz loc_101F9DF  +
push 0Dh  +
jmp loc_101FB20  +
push esi  +
push [ebp+dwMaximumSizeLow]  +
push esi  +
push 2  +
push esi  +
push [ebp+hFile]  +
call ds:CreateFileMappingW  +
mov edi eax +
mov [ebp+hObject] edi +
cmp edi esi +
jz loc_101F9C6  +
push esi  +
push esi  +
push esi  +
push 4  +
push edi  +
call ds:MapViewOfFile  +
mov ebx eax +
mov [ebp+lpBaseAddress] ebx +
cmp ebx esi +
jnz loc_101FA22  +
call ds:GetLastError  +
mov esi eax +
push edi  +
call ds:CloseHandle  +
jmp loc_101FB21  +
mov [ebp+ms_exc.disabled] esi +
push [ebp+arg_0]  +
push ebx  +
call sub_101F01B  +
mov [ebp+hFile] eax +
cmp eax esi +
jz loc_101FA88  +
push 78h  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+var_1C] eax +
cmp eax esi +
jz loc_101FA88  +
push 78h  +
push esi  +
mov edi eax +
push edi  +
call memset  +
add esp 0Ch +
mov dword ptr [edi+10h] 10h +
push edi  +
push edi  +
push [ebp+hFile]  +
push ebx  +
push [ebp+arg_0]  +
call sub_101F135  +
cmp eax esi +
jnz loc_101FAF2  +
call ds:GetLastError  +
mov [ebp+dwErrCode] eax +
push edi  +
call sub_101EF07  +
mov [ebp+var_1C] esi +
jmp loc_101FAF2  +
call ds:GetLastError  +
mov [ebp+dwErrCode] eax +
jmp loc_101FAF2  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
mov [ebp-30h] eax +
mov [ebp-24h] eax +
mov eax [ebp-24h] +
cmp eax 0C0000006h +
jz loc_101FAB7  +
mov eax [ebp-24h] +
cmp eax 0C0000005h +
jz loc_101FAB7  +
xor eax eax +
retn   +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor esi esi +
cmp [ebp-1Ch] esi +
jz loc_101FAD0  +
push dword ptr [ebp-1Ch]  +
call sub_101EF07  +
mov [ebp+var_1C] esi +
cmp [ebp+var_24] 0C0000005h +
jz loc_101FAEB  +
cmp [ebp+var_24] 0C0000006h +
jnz loc_101FAF2  +
mov [ebp+dwErrCode] 45Dh +
jmp loc_101FAF2  +
mov [ebp+dwErrCode] 1E7h +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
push [ebp+lpBaseAddress]  +
call ds:UnmapViewOfFile  +
push [ebp+hObject]  +
call ds:CloseHandle  +
cmp [ebp+dwErrCode] esi +
jz loc_101FB19  +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
mov eax [ebp+var_1C] +
jmp loc_101FB2A  +
push 57h  +
pop esi  +
push esi  +
call ds:SetLastError  +
xor eax eax +
call __SEH_epilog4  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
or eax 0FFFFFFFFh +
cmp dword_1049AA0 0 +
jnz loc_101FB4F  +
pop ebp  +
jmp ds:CreateFileW  +
cmp dword_1049348 0FFFFFFFFh +
jnz loc_101FB73  +
push [ebp+arg_0]  +
call dword_1049AA8  +
cmp eax 0FFFFFFFFh +
jz loc_101FB73  +
push 0FFFFFFF0h  +
mov dword_104934C eax +
pop eax  +
mov dword_1049348 eax +
pop ebp  +
retn 1Ch  +
***
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax dword_1049348 +
cmp ecx eax +
jnz loc_101FBD0  +
cmp dword_1049AA0 0 +
jz loc_101FBC6  +
push [ebp+lpOverlapped]  +
push [ebp+lpNumberOfBytesRead]  +
push [ebp+nNumberOfBytesToRead]  +
push [ebp+lpBuffer]  +
push dword_104934C  +
call dword_1049AB0  +
jmp loc_101FBE3  +
cmp ecx eax +
jnz loc_101FBD0  +
mov ecx dword_104934C +
push [ebp+lpOverlapped]  +
push [ebp+lpNumberOfBytesRead]  +
push [ebp+nNumberOfBytesToRead]  +
push [ebp+lpBuffer]  +
push ecx  +
call ds:ReadFile  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax dword_1049348 +
jnz loc_101FC01  +
mov eax dword_104934C +
push [ebp+lpOverlapped]  +
push [ebp+lpNumberOfBytesWritten]  +
push [ebp+nNumberOfBytesToWrite]  +
push [ebp+lpBuffer]  +
push eax  +
call ds:WriteFile  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
push [ebp+lpOverlapped]  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push [ebp+nNumberOfBytesToWrite]  +
xor ebx ebx +
push [ebp+lpBuffer]  +
mov [ebp+NumberOfBytesWritten] ebx +
push [ebp+hFile]  +
cmp [ebp+arg_10] ebx +
jz loc_101FC47  +
call sub_101FBEC  +
jmp loc_101FC4C  +
call sub_101FB92  +
mov edi eax +
cmp edi ebx +
jnz loc_101FC85  +
mov esi ds:GetLastError +
call esi  +
cmp [ebp+lpOverlapped] 0 +
mov ebx eax +
jz loc_101FC8F  +
cmp ebx 3E5h +
jnz loc_101FC8F  +
push 1  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push [ebp+lpOverlapped]  +
push [ebp+hFile]  +
call ds:GetOverlappedResult  +
test eax eax +
jz loc_101FCA3  +
xor edi edi +
inc edi  +
xor ebx ebx +
mov eax [ebp+nNumberOfBytesToWrite] +
cmp eax [ebp+NumberOfBytesWritten] +
jz loc_101FC9A  +
xor edi edi +
test ebx ebx +
jz loc_101FC9A  +
push ebx  +
call ds:SetLastError  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
call esi  +
mov ebx eax +
jmp loc_101FC8F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 1  +
push [ebp+lpOverlapped]  +
push [ebp+nNumberOfBytesToWrite]  +
push [ebp+lpBuffer]  +
push [ebp+hFile]  +
call sub_101FC1D  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+lpOverlapped]  +
push [ebp+nNumberOfBytesToWrite]  +
push [ebp+lpBuffer]  +
push [ebp+hFile]  +
call sub_101FC1D  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_1049010 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push esi  +
xor edi edi +
call sub_1019699  +
test esi esi +
jz loc_101FD86  +
cmp eax 0FEEDF001h +
jz loc_101FD24  +
cmp eax 0FEEDF002h +
jnz loc_101FD86  +
push esi  +
call sub_101A2B0  +
test eax eax +
jz loc_101FD82  +
lea ecx [ebp+String] +
push ecx  +
push 0  +
push offset PrefixString  +
push eax  +
call ds:GetTempFileNameW  +
test eax eax +
jz loc_101FD82  +
mov esi ds:lstrlenW +
lea eax [ebp+String] +
push eax  +
call esi  +
lea eax [eax+eax+2] +
push eax  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov edi eax +
test edi edi +
jz loc_101FD82  +
lea eax [ebp+String] +
push eax  +
push eax  +
call esi  +
inc eax  +
push eax  +
push edi  +
call sub_1011320  +
mov eax edi +
jmp loc_101FD91  +
push 6  +
call ds:SetLastError  +
or eax 0FFFFFFFFh +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1010796  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push edi  +
xor edi edi +
or ebx 0FFFFFFFFh +
cmp [ebp+arg_0] edi +
jz loc_101FE0F  +
push [ebp+arg_0]  +
call sub_1019699  +
cmp eax 0FEEDF001h +
jnz loc_101FE0F  +
push esi  +
push [ebp+arg_0]  +
call sub_101FCF0  +
mov esi eax +
cmp esi edi +
jz loc_101FE0C  +
push edi  +
push 0C000100h  +
push 2  +
push edi  +
push edi  +
push 0C0000000h  +
push esi  +
call ds:CreateFileW  +
mov ebx eax +
cmp ebx 0FFFFFFFFh +
jz loc_101FDFD  +
mov eax [ebp+arg_4] +
cmp eax edi +
jz loc_101FDFD  +
mov [eax] esi +
jmp loc_101FE0C  +
push esi  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop esi  +
jmp loc_101FE17  +
push 6  +
call ds:SetLastError  +
pop edi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 64h +
mov eax dword_1049010 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_8] +
mov [ebp+var_64] 1 +
test ebx ebx +
jz loc_101FE80  +
cmp [ebp+arg_4] 0 +
jz loc_101FE80  +
test esi esi +
jz loc_101FE80  +
push edi  +
xor eax eax +
mov edi esi +
stos   +
stos   +
stos   +
stos   +
stos   +
lea eax [ebp+var_60] +
push eax  +
call sub_1022240  +
push [ebp+arg_4]  +
lea eax [ebp+var_60] +
push ebx  +
push eax  +
call sub_1022300  +
push esi  +
lea eax [ebp+var_60] +
push eax  +
call sub_1022410  +
pop edi  +
jmp loc_101FE8C  +
and [ebp+var_64] 0 +
push 57h  +
call ds:SetLastError  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_64] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010796  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 94h +
mov eax dword_1049010 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov [ebp+var_7C] eax +
mov eax [ebp+arg_4] +
mov [ebp+hFile] eax +
mov eax [ebp+arg_1C] +
push ebx  +
mov [ebp+lpBuffer] eax +
mov eax [ebp+arg_8] +
push edi  +
mov edi [ebp+arg_18] +
xor ebx ebx +
or eax [ebp+arg_C] +
mov [ebp+var_74] edi +
mov [ebp+var_6C] 1 +
mov [ebp+dwErrCode] ebx +
jz loc_1020001  +
mov eax [ebp+arg_10] +
mov [ebp+var_68] eax +
mov eax [ebp+arg_14] +
mov [ebp+var_64] eax +
cmp edi ebx +
jz loc_101FF0B  +
lea eax [ebp+var_60] +
push eax  +
call sub_1022240  +
xor eax eax +
stos   +
stos   +
stos   +
stos   +
stos   +
mov edi ds:SetLastError +
push esi  +
mov eax [ebp+arg_8] +
or eax [ebp+arg_C] +
jz loc_101FFE5  +
mov esi [ebp+arg_20] +
cmp [ebp+arg_C] ebx +
jnz loc_101FF2E  +
cmp esi [ebp+arg_8] +
jbe loc_101FF2E  +
mov esi [ebp+arg_8] +
mov eax [ebp+var_68] +
or eax [ebp+var_64] +
jz loc_101FF6E  +
push ebx  +
push 0A00000h  +
push [ebp+var_64]  +
push [ebp+var_68]  +
call __allrem  +
cmp eax ebx +
jnz loc_101FF6E  +
cmp edx ebx +
jnz loc_101FF6E  +
push ebx  +
push ebx  +
push ebx  +
push 948Eh  +
push [ebp+var_7C]  +
call sub_1014D12  +
cmp eax 0FFFFFFFFh +
jnz loc_101FF6E  +
push 4D3h  +
call edi  +
mov [ebp+var_6C] ebx +
cmp [ebp+var_6C] ebx +
jz loc_101FFD0  +
mov eax [ebp+var_68] +
mov [ebp+Overlapped.Offset] eax +
mov eax [ebp+var_64] +
mov [ebp+Overlapped.OffsetHigh] eax +
lea eax [ebp+Overlapped] +
push eax  +
push esi  +
push [ebp+lpBuffer]  +
mov [ebp+Overlapped.Internal] ebx +
push [ebp+hFile]  +
mov [ebp+Overlapped.InternalHigh] ebx +
mov [ebp+Overlapped.hEvent] ebx +
call sub_101FCCF  +
test eax eax +
jz loc_101FFD0  +
xor eax eax +
add [ebp+var_68] esi +
adc [ebp+var_64] eax +
sub [ebp+arg_8] esi +
sbb [ebp+arg_C] eax +
cmp [ebp+var_74] ebx +
jz loc_101FFDC  +
push esi  +
push [ebp+lpBuffer]  +
lea eax [ebp+var_60] +
push eax  +
call sub_1022300  +
jmp loc_101FFDC  +
call ds:GetLastError  +
mov [ebp+dwErrCode] eax +
mov [ebp+var_6C] ebx +
cmp [ebp+var_6C] ebx +
jnz loc_101FF12  +
pop esi  +
cmp [ebp+var_74] ebx +
jz loc_101FFF7  +
push [ebp+var_74]  +
lea eax [ebp+var_60] +
push eax  +
call sub_1022410  +
cmp [ebp+dwErrCode] ebx +
jz loc_1020001  +
push [ebp+dwErrCode]  +
call edi  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_6C] +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_1010796  +
leave   +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
xor esi esi +
inc esi  +
test ebx ebx +
jz loc_1020063  +
push 20h  +
push 8  +
xor esi esi +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
test eax eax +
jz loc_1020063  +
mov ecx [ebp+arg_8] +
mov esi [ebp+arg_10] +
push edi  +
mov [eax] ecx +
mov ecx [ebp+arg_C] +
mov [eax+4] ecx +
push 5  +
pop ecx  +
lea edi [eax+8] +
movs   +
mov ecx [ebx] +
xor esi esi +
mov [eax+1Ch] ecx +
mov [ebx] eax +
inc esi  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
test ecx ecx +
jz loc_102009F  +
mov ecx [ecx] +
jmp loc_102009B  +
test eax eax +
jnz loc_102009F  +
mov edx [ecx] +
cmp edx [ebp+arg_4] +
jnz loc_1020098  +
mov edx [ecx+4] +
cmp edx [ebp+arg_8] +
jnz loc_1020098  +
lea eax [ecx+8] +
mov ecx [ecx+1Ch] +
test ecx ecx +
jnz loc_1020082  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_10200D2  +
mov eax [esi] +
test eax eax +
jz loc_10200D2  +
mov ecx [eax+1Ch] +
push eax  +
push 0  +
mov [esi] ecx +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
jmp loc_10200B5  +
pop esi  +
pop ebp  +
retn 4  +
***
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
test eax eax +
jz locret_1020106  +
xor ecx ecx +
mov edx eax +
mov [edx] cl +
inc ecx  +
add edx 0Ch +
cmp ecx 0FFh +
jbe loc_10200F8  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+lpMem] +
test esi esi +
jz loc_102017A  +
push ebx  +
mov ebx ds:HeapFree +
push edi  +
add esi 4 +
mov [ebp+var_4] 100h +
jmp loc_102014D  +
cmp [ebp+arg_4] 0 +
mov edi [esi] +
mov eax [edi+8] +
mov [esi] eax +
jz loc_1020141  +
push dword ptr [edi+4]  +
call [ebp+arg_4]  +
push edi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ebx  +
cmp dword ptr [esi] 0 +
jnz loc_102012E  +
mov eax [esi+4] +
test eax eax +
jz loc_1020162  +
push [ebp+arg_4]  +
push eax  +
call sub_102010C  +
add esi 0Ch +
dec [ebp+var_4]  +
jnz loc_102014D  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ebx  +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
push edi  +
mov edi ecx +
cmp ecx eax +
jz loc_10201E2  +
push esi  +
mov esi [ebp+arg_4] +
cmp esi eax +
jz loc_10201E1  +
mov cl [ecx+1] +
movzx edx cl +
push ebx  +
mov bl [edx+esi] +
mov [ebp+arg_0] eax +
test edi edi +
jz loc_10201E0  +
cmp cl 14h +
jnb loc_10201E0  +
movzx eax bl +
imul eax eax +
add eax edi +
mov edx [eax+8] +
test edx edx +
jz loc_10201D3  +
inc cl  +
mov edi edx +
cmp cl 14h +
jnb loc_10201DA  +
movzx edx cl +
mov bl [edx+esi] +
jmp loc_10201DA  +
mov [ebp+arg_0] 1 +
cmp [ebp+arg_0] 0 +
jz loc_10201AA  +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi eax +
test esi esi +
jz loc_1020271  +
cmp [ebp+arg_0] 0 +
jz loc_1020271  +
push 0C00h  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
test eax eax +
jz loc_1020271  +
mov cl [esi+1] +
push edi  +
inc cl  +
xor edx edx +
mov edi eax +
mov [edi] dl +
mov [edi+1] cl +
inc edx  +
add edi 0Ch +
cmp edx 0FFh +
jbe loc_1020220  +
mov edx [esi+4] +
mov [esi+8] eax +
test edx edx +
jz loc_1020266  +
movzx ecx cl +
mov [ebp+arg_0] ecx +
push ebx  +
mov ecx [edx] +
mov ebx [ebp+arg_0] +
movzx ecx byte ptr [ebx+ecx] +
mov edi [edx+8] +
imul ecx ecx +
add ecx eax +
mov ebx [ecx+4] +
inc byte ptr [ecx+2]  +
mov [edx+8] ebx +
mov [ecx+4] edx +
mov edx edi +
test edi edi +
jnz loc_1020242  +
pop ebx  +
and dword ptr [esi+4] 0 +
mov byte ptr [esi+2] 0 +
mov esi eax +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_10202EC  +
push ebx  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jz loc_10202EB  +
cmp [ebp+arg_8] 0 +
jz loc_10202EB  +
push esi  +
push 0Ch  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
test esi esi +
jz loc_10202EA  +
mov eax [ebp+arg_8] +
push ebx  +
push edi  +
mov [esi] ebx +
mov [esi+4] eax +
call sub_1020184  +
mov edi eax +
test edi edi +
jz loc_10202EA  +
cmp byte ptr [edi+2] 20h +
jnz loc_10202DA  +
push ebx  +
call sub_10201EC  +
push ebx  +
push eax  +
call sub_1020184  +
mov edi eax +
test edi edi +
jz loc_10202EA  +
mov eax [edi+4] +
inc byte ptr [edi+2]  +
mov [esi+8] eax +
mov [edi+4] esi +
pop esi  +
pop ebx  +
mov eax edi +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
xor ebx ebx +
mov [ebp+var_4] ebx +
cmp [ebp+arg_0] ebx +
jz loc_102034F  +
cmp [ebp+arg_4] ebx +
jz loc_102034F  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1020184  +
cmp eax ebx +
jz loc_102034F  +
mov eax [eax+4] +
push esi  +
push edi  +
test eax eax +
jz loc_102034D  +
mov edi [eax] +
mov esi [ebp+arg_4] +
push 14h  +
pop ecx  +
xor edx edx +
cmps   +
jz loc_1020339  +
sbb edx edx +
sbb edx 0FFFFFFFFh +
test edx edx +
jnz loc_1020346  +
mov ecx [eax+4] +
xor ebx ebx +
mov [ebp+var_4] ecx +
inc ebx  +
mov eax [eax+8] +
test ebx ebx +
jz loc_1020322  +
pop edi  +
pop esi  +
mov eax [ebp+var_4] +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 88h +
mov eax dword_1049010 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
and [ebp+var_74] 0 +
mov ecx [ebp+arg_24] +
and [ebp+dwErrCode] 0 +
mov [ebp+var_78] eax +
mov eax [ebp+arg_4] +
mov [ebp+var_88] eax +
mov eax [ebp+arg_C] +
push ebx  +
mov ebx [ebp+arg_10] +
mov [ebp+hFile] eax +
mov eax [ebp+arg_1C] +
push esi  +
mov esi [ebp+arg_8] +
mov [ebp+lpBuffer] eax +
push edi  +
xor eax eax +
lea edi [ebp+var_70] +
stos   +
mov eax [ebp+arg_14] +
or eax [ebp+arg_18] +
mov [ebp+var_6C] ecx +
mov [ebp+var_68] 1 +
jz loc_1020524  +
test ecx ecx +
jz loc_10203D6  +
lea eax [ebp+var_60] +
push eax  +
call sub_1022240  +
mov edi [ebp+var_6C] +
xor eax eax +
stos   +
stos   +
stos   +
stos   +
stos   +
mov eax [ebp+arg_14] +
mov ecx eax +
or ecx [ebp+arg_18] +
jz loc_1020503  +
cmp [ebp+arg_18] 0 +
mov ecx [ebp+arg_20] +
mov [ebp+nNumberOfBytesToWrite] ecx +
jnz loc_10203F7  +
cmp ecx eax +
jbe loc_10203F7  +
mov [ebp+nNumberOfBytesToWrite] eax +
mov eax [ebp+var_74] +
or eax [ebp+var_70] +
jz loc_102043D  +
push 0  +
push 0A00000h  +
push [ebp+var_70]  +
push [ebp+var_74]  +
call __allrem  +
test eax eax +
jnz loc_102043D  +
test edx edx +
jnz loc_102043D  +
push eax  +
push eax  +
push eax  +
push 948Eh  +
push [ebp+var_78]  +
call sub_1014D12  +
cmp eax 0FFFFFFFFh +
jnz loc_102043D  +
push 4D3h  +
call ds:SetLastError  +
and [ebp+var_68] 0 +
cmp [ebp+var_68] 0 +
jz loc_10204EC  +
push esi  +
push [ebp+nNumberOfBytesToWrite]  +
push [ebp+lpBuffer]  +
push [ebp+var_88]  +
call sub_101FCCF  +
test eax eax +
jz loc_10204EC  +
cmp [ebp+var_6C] 0 +
jz loc_1020476  +
push [ebp+nNumberOfBytesToWrite]  +
lea eax [ebp+var_60] +
push [ebp+lpBuffer]  +
push eax  +
call sub_1022300  +
push ebx  +
push [ebp+nNumberOfBytesToWrite]  +
push [ebp+lpBuffer]  +
push [ebp+hFile]  +
call sub_101FCAE  +
test eax eax +
jz loc_10204EC  +
mov eax [ebp+nNumberOfBytesToWrite] +
xor edi edi +
cmp [ebp+var_78] edi +
jz loc_10204A5  +
cmp [ebp+arg_28] edi +
jz loc_10204A5  +
push edi  +
push eax  +
push [ebp+var_78]  +
call sub_101A384  +
mov edx [ebp+nNumberOfBytesToWrite] +
test esi esi +
jz loc_10204C3  +
mov eax [esi+8] +
mov ecx [esi+0Ch] +
add eax edx +
adc ecx edi +
and dword ptr [esi] 0 +
and dword ptr [esi+4] 0 +
mov [esi+8] eax +
mov [esi+0Ch] ecx +
test ebx ebx +
jz loc_10204DE  +
mov eax [ebx+8] +
mov ecx [ebx+0Ch] +
add eax edx +
adc ecx edi +
and dword ptr [ebx] 0 +
and dword ptr [ebx+4] 0 +
mov [ebx+8] eax +
mov [ebx+0Ch] ecx +
sub [ebp+arg_14] edx +
sbb [ebp+arg_18] edi +
add [ebp+var_74] edx +
adc [ebp+var_70] edi +
jmp loc_10204F9  +
and [ebp+var_68] 0 +
call ds:GetLastError  +
mov [ebp+dwErrCode] eax +
cmp [ebp+var_68] 0 +
jnz loc_10203D6  +
cmp [ebp+var_6C] 0 +
jz loc_1020515  +
push [ebp+var_6C]  +
lea eax [ebp+var_60] +
push eax  +
call sub_1022410  +
cmp [ebp+dwErrCode] 0 +
jz loc_1020524  +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_68] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010796  +
leave   +
retn 2Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+lpMem] +
xor eax eax +
test ecx ecx +
jz loc_1020569  +
mov eax [ecx+0Ch] +
push ecx  +
test eax eax +
jz loc_1020557  +
call eax  +
jmp loc_1020566  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
xor eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
jz loc_10205AD  +
push dword ptr [ebp+8]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push esi  +
mov esi [eax] +
test esi esi +
jz loc_10205E1  +
mov ecx [eax+4] +
test ecx ecx +
jz loc_10205E1  +
mov edx [ebp+10h] +
mov [eax+8] edx +
cmp edx ecx +
jnb loc_10205E1  +
push edx  +
push dword ptr [ebp+0Ch]  +
push esi  +
call memcpy  +
add esp 0Ch +
xor eax eax +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+14h] +
and dword ptr [ebp-4] 0 +
push ebx  +
push esi  +
mov esi [ebp+8] +
and dword ptr [esi+8] 0 +
push edi  +
push 0B71B00h  +
push dword ptr [ebp+1Ch]  +
mov [esi] eax +
push dword ptr [ebp+10h]  +
mov eax [ebp+18h] +
push dword ptr [ebp+0Ch]  +
lea edi [esi+14h] +
push edi  +
mov [esi+4] eax +
call sub_10224D1  +
push edi  +
mov ebx eax +
call sub_1022523  +
push edi  +
call sub_10224C1  +
test ebx ebx +
jnz loc_102064B  +
mov esi [esi+8] +
cmp esi [ebp+10h] +
jnb loc_102064B  +
mov eax [ebp+1Ch] +
test eax eax +
jz loc_1020644  +
mov [eax] esi +
mov dword ptr [ebp-4] 1 +
mov eax [ebp-4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
lea eax [esi+14h] +
push eax  +
call sub_10224B1  +
test esi esi +
jz loc_1020680  +
push esi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ds:GetProcessHeap +
push 4364h  +
push 0  +
call edi  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
test esi esi +
jz loc_10206EC  +
push esi  +
push offset loc_10205B4  +
push offset loc_1020590  +
push offset loc_1020572  +
mov eax 8000h +
push eax  +
push eax  +
lea eax [esi+14h] +
push eax  +
call sub_1022544  +
test eax eax +
jz loc_10206E0  +
mov dword ptr [esi+10h] offset loc_10205EB +
mov dword ptr [esi+0Ch] offset loc_102065A +
mov eax esi +
jmp loc_10206EE  +
push esi  +
push 0  +
call edi  +
push eax  +
call ds:HeapFree  +
xor eax eax +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and dword ptr [ebp-4] 0 +
push ebx  +
mov ebx [ebp+1Ch] +
test ebx ebx +
jz loc_1020742  +
push esi  +
mov esi [ebp+8] +
push edi  +
mov edi [ebp+18h] +
push ebx  +
push edi  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push edi  +
push dword ptr [esi+14h]  +
call sub_1022608  +
push dword ptr [esi+14h]  +
mov [ebp+1Ch] eax +
call sub_10225DC  +
cmp dword ptr [ebp+1Ch] 0 +
jnz loc_1020740  +
cmp [ebx] edi +
jnz loc_1020740  +
mov dword ptr [ebp-4] 1 +
pop edi  +
pop esi  +
mov eax [ebp-4] +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push dword ptr [esi+14h]  +
call nullsub_1  +
push esi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi 8000h +
push edi  +
call sub_10225BE  +
mov ebx ds:GetProcessHeap +
mov [ebp+var_4] eax +
add eax 1Bh +
push eax  +
push 0  +
call ebx  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
test esi esi +
jz loc_10207DE  +
push edi  +
push [ebp+var_4]  +
lea eax [esi+18h] +
push eax  +
call sub_102266B  +
mov [esi+14h] eax +
test eax eax +
jz loc_10207D2  +
mov dword ptr [esi+10h] offset loc_10206F6 +
mov dword ptr [esi+0Ch] offset loc_102074F +
mov eax esi +
jmp loc_10207E0  +
push esi  +
push 0  +
call ebx  +
push eax  +
call ds:HeapFree  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+0Ch]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_1020827  +
push dword ptr [ebp+0Ch]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+8] +
test edi edi +
jz loc_1020874  +
mov eax [edi+14h] +
push esi  +
mov esi offset loc_102080A +
test eax eax +
jz loc_1020853  +
push esi  +
push 0  +
push eax  +
call nullsub_2  +
mov eax [edi+18h] +
test eax eax +
jz loc_1020863  +
push esi  +
push 0  +
push eax  +
call sub_1023DC0  +
push edi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push edi  +
xor edi edi +
test eax eax +
jz loc_10208BA  +
mov eax [eax+14h] +
test eax eax +
jz loc_10208BA  +
push esi  +
mov esi [ebp+1Ch] +
test esi esi +
jz loc_10208B9  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push eax  +
call sub_1024330  +
mov [esi] eax +
cmp eax [ebp+18h] +
jnz loc_10208B9  +
inc edi  +
pop esi  +
mov eax edi +
pop edi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
xor eax eax +
test ecx ecx +
jz loc_102090B  +
mov ecx [ecx+18h] +
test ecx ecx +
jz loc_102090B  +
push esi  +
mov esi [ebp+1Ch] +
test esi esi +
jz loc_102090A  +
push eax  +
push eax  +
push eax  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push ecx  +
call sub_1023C70  +
mov [esi] eax +
test eax eax +
jz loc_1020908  +
cmp eax [ebp+10h] +
jnb loc_1020908  +
xor eax eax +
inc eax  +
jmp loc_102090A  +
xor eax eax +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push esi  +
push 1Ch  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
test esi esi +
jz loc_1020953  +
push offset loc_10207EA  +
push 0  +
mov dword ptr [esi+10h] offset loc_102087E +
call sub_10244C0  +
mov [esi+14h] eax +
test eax eax +
jz loc_102094F  +
mov dword ptr [esi+0Ch] offset loc_1020830 +
and dword ptr [esi+18h] 0 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push 1Ch  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
test esi esi +
jz loc_10209A2  +
push 4  +
push offset loc_10207EA  +
push 0  +
push 8000h  +
mov dword ptr [esi+10h] offset loc_10208C6 +
call sub_1023CC0  +
mov [esi+18h] eax +
test eax eax +
jz loc_102099E  +
mov dword ptr [esi+0Ch] offset loc_1020830 +
and dword ptr [esi+14h] 0 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
add eax [ebp+arg_8] +
mov ecx [ebp+arg_4] +
adc ecx [ebp+arg_C] +
cmp ecx [ebp+arg_4] +
jb loc_10209D4  +
ja loc_10209C8  +
cmp eax [ebp+arg_0] +
jb loc_10209D4  +
mov edx [ebp+arg_10] +
mov [edx] eax +
mov [edx+4] ecx +
xor eax eax +
jmp loc_10209E3  +
mov eax [ebp+arg_10] +
or dword ptr [eax] 0FFFFFFFFh +
or dword ptr [eax+4] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 494h +
xor eax eax +
push ebx  +
push esi  +
push edi  +
xor esi esi +
lea edi [ebp+var_7C] +
mov [ebp+var_80] esi +
stos   +
lea edi [ebp+var_24] +
mov [ebp+var_28] esi +
stos   +
lea edi [ebp+var_38] +
mov [ebp+var_3C] esi +
stos   +
lea edi [ebp+var_40] +
mov ebx [ebp+arg_0] +
mov [ebp+var_44] esi +
stos   +
lea edi [ebp+var_18] +
mov [ebp+var_1C] esi +
stos   +
mov [ebp+var_94] esi +
lea edi [ebp+var_90] +
stos   +
stos   +
stos   +
stos   +
xor eax eax +
mov [ebp+Overlapped.Internal] esi +
lea edi [ebp+Overlapped.InternalHigh] +
stos   +
stos   +
stos   +
mov [ebp+var_4] esi +
mov [ebp+var_34] esi +
mov [ebp+nNumberOfBytesToWrite] esi +
mov [ebp+var_20] esi +
mov [ebp+var_14] esi +
mov [ebp+var_10] esi +
mov [ebp+var_70] esi +
mov [ebp+var_50] 4 +
mov [ebp+dwErrCode] esi +
mov [ebp+lpBuffer] esi +
stos   +
mov [ebp+var_78] esi +
mov [ebp+var_30] esi +
cmp ebx esi +
jz loc_1020E8F  +
cmp [ebp+arg_8] 0FFFFFFFFh +
jz loc_1020E8F  +
cmp [ebp+hFile] 0FFFFFFFFh +
jz loc_1020E8F  +
lea eax [ebp+var_1C] +
push eax  +
push [ebp+arg_8]  +
call ds:GetFileSizeEx  +
test eax eax +
jz loc_1020E8F  +
mov eax [ebp+var_1C] +
or eax [ebp+var_18] +
jz loc_1020E8F  +
lea eax [ebp+var_30] +
push eax  +
lea eax [ebp+var_78] +
push eax  +
push ebx  +
mov [ebp+var_4] esi +
call sub_1019C9C  +
lea eax [ebp+var_70] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+var_20] +
push eax  +
push ebx  +
call sub_1019CD7  +
test eax eax +
jnz loc_1020AD9  +
call ds:GetLastError  +
mov [ebp+dwErrCode] eax +
cmp [ebp+var_20] esi +
jz loc_1020E81  +
cmp [ebp+var_14] esi +
jz loc_1020E81  +
mov edi 8000h +
cmp [ebp+var_10] edi +
jb loc_1020E81  +
cmp [ebp+var_70] edi +
jb loc_1020E81  +
push ebx  +
mov [ebp+var_4] 1 +
call sub_101A2F1  +
cmp eax 1 +
jnz loc_1020B1A  +
mov [ebp+var_10] edi +
mov [ebp+var_70] edi +
mov eax [ebp+var_1C] +
mov ecx [ebp+var_18] +
push esi  +
add eax 7FFFh +
push edi  +
adc ecx esi +
push ecx  +
push eax  +
call __alldiv  +
mov edi eax +
dec edi  +
cmp [ebp+var_18] esi +
jz loc_1020B3F  +
mov [ebp+var_50] 8 +
cmp edi esi +
jz loc_1020C1B  +
lea eax [ebp+nNumberOfBytesToWrite] +
push eax  +
mov eax [ebp+var_50] +
mul  edi +
push edx  +
push eax  +
mov [ebp+var_4] esi +
call sub_1011101  +
mov ebx eax +
cmp ebx esi +
jge loc_1020B9E  +
test ebx 10000000h +
jz loc_1020B8B  +
mov edi ds:RtlNtStatusToDosError +
push ebx  +
call edi  +
cmp eax 13Dh +
jnz loc_1020B80  +
mov [ebp+dwErrCode] ebx +
jmp loc_1020E81  +
push ebx  +
call edi  +
mov [ebp+dwErrCode] eax +
jmp loc_1020E81  +
mov eax ebx +
and eax 1FFF0000h +
cmp eax 70000h +
jnz loc_1020B78  +
movzx eax bx +
jmp loc_1020B83  +
mov ebx [ebp+nNumberOfBytesToWrite] +
cmp ebx edi +
jbe loc_1020E81  +
cmp ebx 400h +
ja loc_1020BBC  +
lea eax [ebp+var_494] +
mov [ebp+lpBuffer] eax +
jmp loc_1020BD6  +
push ebx  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+lpBuffer] eax +
cmp eax esi +
jz loc_1020E81  +
mov eax [ebp+var_30] +
mov [ebp+Overlapped.hEvent] eax +
lea eax [ebp+Overlapped] +
push eax  +
push ebx  +
push [ebp+lpBuffer]  +
mov [ebp+Overlapped.Internal] esi +
push [ebp+hFile]  +
mov [ebp+Overlapped.InternalHigh] esi +
mov [ebp+Overlapped.Offset] esi +
mov [ebp+Overlapped.OffsetHigh] esi +
call sub_101FCAE  +
test eax eax +
jz loc_1020E60  +
xor eax eax +
mov [ebp+var_80] ebx +
mov [ebp+var_7C] eax +
mov [ebp+var_3C] ebx +
mov [ebp+var_38] eax +
mov [ebp+var_44] ebx +
mov [ebp+var_40] eax +
mov [ebp+var_4] 1 +
mov eax [ebp+var_18] +
mov edi [ebp+var_1C] +
mov [ebp+var_48] eax +
jmp loc_1020C29  +
mov edi [ebp+var_4C] +
mov eax edi +
or eax [ebp+var_48] +
jz loc_1020E0B  +
cmp esi [ebp+var_48] +
jl loc_1020C43  +
jg loc_1020C40  +
cmp [ebp+var_10] edi +
jbe loc_1020C43  +
mov [ebp+var_10] edi +
mov eax [ebp+var_28] +
or eax [ebp+var_24] +
jz loc_1020C87  +
push esi  +
push 0A00000h  +
push [ebp+var_24]  +
push [ebp+var_28]  +
call __allrem  +
cmp eax esi +
jnz loc_1020C87  +
cmp edx esi +
jnz loc_1020C87  +
push esi  +
push esi  +
push esi  +
push 948Eh  +
push [ebp+arg_0]  +
call sub_1014D12  +
cmp eax 0FFFFFFFFh +
jnz loc_1020C87  +
push 4D3h  +
call ds:SetLastError  +
mov [ebp+var_4] esi +
cmp [ebp+var_4] esi +
jz loc_1020DFF  +
mov eax [ebp+var_28] +
mov [ebp+var_8C] eax +
mov eax [ebp+var_24] +
mov [ebp+var_88] eax +
mov eax [ebp+var_78] +
mov [ebp+var_84] eax +
lea eax [ebp+var_94] +
push eax  +
push [ebp+var_10]  +
mov [ebp+var_94] esi +
push [ebp+var_20]  +
mov [ebp+var_90] esi +
push [ebp+arg_8]  +
call sub_101FCCF  +
test eax eax +
jz loc_1020DFF  +
mov eax [ebp+var_10] +
xor ebx ebx +
sub edi eax +
sbb [ebp+var_48] esi +
add [ebp+var_28] eax +
mov [ebp+var_2C] esi +
mov [ebp+var_4] eax +
adc [ebp+var_24] esi +
mov [ebp+var_4C] edi +
cmp eax esi +
jbe loc_1020D9F  +
mov eax [ebp+lpBuffer] +
mov ecx [ebp+var_34] +
lea eax [eax+ecx*8] +
mov [ebp+var_54] eax +
mov edi 8000h +
cmp [ebp+var_4] edi +
jnb loc_1020D0E  +
mov edi [ebp+var_4] +
mov ecx [ebp+var_2C] +
lea eax [ebp+var_74] +
push eax  +
mov eax [ebp+var_14] +
push edi  +
add eax ebx +
push eax  +
mov eax [ebp+var_20] +
push edi  +
add ecx eax +
mov eax [ebp+arg_4] +
push ecx  +
push eax  +
mov [ebp+var_74] esi +
call dword ptr [eax+10h]  +
test eax eax +
jnz loc_1020D4C  +
mov eax [ebp+var_20] +
mov ecx [ebp+var_2C] +
add ecx eax +
mov eax [ebp+var_14] +
push edi  +
push ecx  +
add eax ebx +
push eax  +
call memcpy  +
add esp 0Ch +
mov [ebp+var_74] edi +
mov eax [ebp+var_74] +
add [ebp+var_2C] edi +
add ebx eax +
add [ebp+var_44] eax +
mov eax [ebp+var_4C] +
adc [ebp+var_40] esi +
sub [ebp+var_4] edi +
or eax [ebp+var_48] +
jnz loc_1020D6A  +
cmp [ebp+var_4] esi +
jz loc_1020D9F  +
mov eax [ebp+var_44] +
sub eax [ebp+var_80] +
mov ecx [ebp+var_40] +
sbb ecx [ebp+var_7C] +
cmp [ebp+var_50] 4 +
jnz loc_1020D87  +
mov ecx [ebp+lpBuffer] +
mov edx [ebp+var_34] +
mov [ecx+edx*4] eax +
jmp loc_1020D8F  +
mov edx [ebp+var_54] +
mov [edx] eax +
mov [edx+4] ecx +
inc [ebp+var_34]  +
add [ebp+var_54] 8 +
cmp [ebp+var_4] esi +
ja loc_1020D01  +
mov ecx [ebp+var_3C] +
mov eax [ebp+var_38] +
mov edx [ebp+var_30] +
mov [ebp+Overlapped.Offset] ecx +
add ecx ebx +
mov [ebp+Overlapped.OffsetHigh] eax +
adc eax esi +
cmp eax [ebp+var_18] +
mov [ebp+Overlapped.Internal] esi +
mov [ebp+Overlapped.InternalHigh] esi +
mov [ebp+Overlapped.hEvent] edx +
mov [ebp+var_3C] ecx +
mov [ebp+var_38] eax +
jg loc_1020DF3  +
jl loc_1020DCD  +
cmp ecx [ebp+var_1C] +
ja loc_1020DF3  +
lea eax [ebp+Overlapped] +
push eax  +
push ebx  +
push [ebp+var_14]  +
push [ebp+hFile]  +
call sub_101FCAE  +
mov [ebp+var_4] eax +
cmp eax esi +
jnz loc_1020C26  +
call ds:GetLastError  +
mov [ebp+dwErrCode] eax +
jmp loc_1020E60  +
mov [ebp+dwErrCode] 0DFh +
mov [ebp+var_4] esi +
jmp loc_1020E60  +
call ds:GetLastError  +
mov [ebp+dwErrCode] eax +
mov [ebp+var_4] esi +
cmp [ebp+var_4] esi +
jz loc_1020E60  +
cmp [ebp+lpBuffer] esi +
jz loc_1020E49  +
mov eax [ebp+var_30] +
mov [ebp+Overlapped.hEvent] eax +
lea eax [ebp+Overlapped] +
push eax  +
push [ebp+nNumberOfBytesToWrite]  +
mov [ebp+Overlapped.Internal] esi +
push [ebp+lpBuffer]  +
mov [ebp+Overlapped.InternalHigh] esi +
push [ebp+hFile]  +
mov [ebp+Overlapped.Offset] esi +
mov [ebp+Overlapped.OffsetHigh] esi +
call sub_101FCAE  +
mov [ebp+var_4] eax +
cmp eax esi +
jnz loc_1020E4E  +
call ds:GetLastError  +
mov [ebp+dwErrCode] eax +
cmp [ebp+var_4] esi +
jz loc_1020E60  +
mov eax [ebp+arg_10] +
cmp eax esi +
jz loc_1020E60  +
mov ecx [ebp+var_3C] +
mov [eax] ecx +
mov ecx [ebp+var_38] +
mov [eax+4] ecx +
cmp [ebp+lpBuffer] esi +
jz loc_1020E81  +
lea eax [ebp+var_494] +
cmp [ebp+lpBuffer] eax +
jz loc_1020E81  +
push [ebp+lpBuffer]  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp [ebp+dwErrCode] esi +
jz loc_1020E8F  +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
or [ebp+hObject] 0FFFFFFFFh +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
xor eax eax +
lea edi [ebp+var_14] +
mov [ebp+var_18] ebx +
mov [ebp+var_4] ebx +
stos   +
mov [ebp+lpMem] ebx +
mov [ebp+dwErrCode] ebx +
cmp [ebp+arg_0] ebx +
jz loc_102105A  +
cmp [ebp+arg_4] ebx +
jz loc_102105A  +
cmp [ebp+hFile] 0FFFFFFFFh +
jz loc_102105A  +
cmp [ebp+arg_C] ebx +
jz loc_102105A  +
mov esi [ebp+arg_10] +
cmp esi ebx +
jz loc_102105A  +
cmp [esi+4] ebx +
jl loc_1021010  +
jg loc_1020F05  +
cmp dword ptr [esi] 40h +
jbe loc_1021010  +
push [ebp+hFile]  +
call sub_10244D8  +
test eax eax +
jz loc_1020F19  +
mov [ebp+var_4] ebx +
jmp loc_1021010  +
push [ebp+arg_0]  +
call sub_101A106  +
push eax  +
call sub_101FCF0  +
mov [ebp+lpMem] eax +
cmp eax ebx +
jz loc_1020F11  +
cmp [eax] bx +
jz loc_1020F11  +
push ebx  +
push 4C000100h  +
push 2  +
push ebx  +
push 7  +
push 0C0010000h  +
push eax  +
call ds:CreateFileW  +
mov [ebp+hObject] eax +
mov [ebp+var_4] ebx +
cmp eax 0FFFFFFFFh +
jz loc_1021010  +
push [ebp+arg_0]  +
call sub_1019BCC  +
mov edi eax +
cmp edi ebx +
jnz loc_1020F8F  +
mov eax [ebp+arg_14] +
dec eax  +
jz loc_1020F77  +
dec eax  +
jnz loc_1020F7E  +
call sub_102068A  +
jmp loc_1020F7C  +
call sub_102095C  +
mov edi eax +
push edi  +
push [ebp+arg_0]  +
call sub_1019BE9  +
cmp edi ebx +
jz loc_1021010  +
lea eax [ebp+var_18] +
push eax  +
push [ebp+hObject]  +
push [ebp+hFile]  +
push edi  +
push [ebp+arg_0]  +
call sub_10209EC  +
mov [ebp+var_4] eax +
cmp eax ebx +
jz loc_1021010  +
mov edi [esi+4] +
cmp [ebp+var_14] edi +
mov [ebp+var_4] ebx +
mov ebx [esi] +
jg loc_1020FDD  +
jl loc_1020FBD  +
cmp [ebp+var_18] ebx +
jnb loc_1020FDD  +
mov eax ebx +
sub eax [ebp+var_18] +
push 0  +
mov ecx edi +
sbb ecx [ebp+var_14] +
push 64h  +
push ecx  +
push eax  +
call __allmul  +
push edi  +
push ebx  +
push edx  +
push eax  +
call __alldiv  +
jmp loc_1020FE1  +
xor eax eax +
xor edx edx +
mov ecx [ebp+arg_18] +
xor edi edi +
cmp edx edi +
jl loc_102100E  +
jg loc_1020FF0  +
cmp eax ecx +
jb loc_102100E  +
mov eax [ebp+var_18] +
mov ecx [ebp+arg_C] +
mov [esi] eax +
mov eax [ebp+var_14] +
mov [esi+4] eax +
mov eax [ebp+hObject] +
mov [ecx] eax +
mov [ebp+var_4] 1 +
xor ebx ebx +
jmp loc_1021036  +
xor ebx ebx +
call ds:GetLastError  +
cmp [ebp+hObject] 0FFFFFFFFh +
mov [ebp+dwErrCode] eax +
jz loc_1021028  +
push [ebp+hObject]  +
call ds:CloseHandle  +
cmp [ebp+lpMem] ebx +
jz loc_1021047  +
push [ebp+lpMem]  +
call ds:DeleteFileW  +
push [ebp+lpMem]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp [ebp+dwErrCode] ebx +
jz loc_1021055  +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
mov eax [ebp+var_4] +
jmp loc_1021064  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 540h +
mov eax dword_1049010 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
mov [ebp+var_100] eax +
mov eax [ebp+arg_24] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov [ebp+hFile] eax +
mov eax [ebp+arg_28] +
mov [ebp+var_A0] eax +
xor eax eax +
lea edi [ebp+var_CC] +
mov [ebp+var_D0] ebx +
stos   +
lea edi [ebp+var_E0] +
mov [ebp+var_E4] ebx +
stos   +
lea edi [ebp+var_BC] +
mov [ebp+var_C0] ebx +
stos   +
lea edi [ebp+var_A4] +
push 3FCh  +
mov [ebp+var_A8] ebx +
stos   +
lea eax [ebp+var_53C] +
push ebx  +
push eax  +
mov [ebp+var_94] esi +
mov [ebp+var_B4] ebx +
mov [ebp+var_C4] 4 +
mov [ebp+var_F4] ebx +
mov [ebp+var_E8] ebx +
mov [ebp+dwErrCode] ebx +
mov [ebp+var_D4] ebx +
mov [ebp+lpBuffer] ebx +
mov [ebp+Buffer] ebx +
call memset  +
xor eax eax +
mov [ebp+var_128] ebx +
lea edi [ebp+var_124] +
stos   +
stos   +
stos   +
stos   +
xor eax eax +
mov [ebp+Overlapped.Internal] ebx +
lea edi [ebp+Overlapped.InternalHigh] +
stos   +
stos   +
stos   +
add esp 0Ch +
stos   +
lea eax [ebp+var_E8] +
push eax  +
lea eax [ebp+lpBuffer] +
push eax  +
lea eax [ebp+var_F4] +
push eax  +
lea eax [ebp+var_D4] +
push eax  +
push esi  +
mov [ebp+lpMem] ebx +
mov [ebp+var_B8] ebx +
mov [ebp+var_D8] ebx +
mov [ebp+var_DC] ebx +
call sub_1019CD7  +
test eax eax +
jz loc_102119F  +
cmp [ebp+var_D4] ebx +
jz loc_102119F  +
cmp [ebp+lpBuffer] ebx +
jnz loc_10211C8  +
push 17Fh  +
push offset aUncompressfile  +
push 8007000Dh  +
push offset aFailedToGetImg  +
push [ebp+var_A0]  +
push esi  +
push 1  +
call sub_1015538  +
xor eax eax +
jmp loc_1021B7E  +
lea eax [ebp+var_DC] +
push eax  +
lea eax [ebp+var_D8] +
push eax  +
push esi  +
call sub_1019C9C  +
test eax eax +
jz loc_10211F0  +
cmp [ebp+var_D8] ebx +
jz loc_10211F0  +
cmp [ebp+var_DC] ebx +
jnz loc_1021206  +
push 193h  +
push offset aUncompressfile  +
push 80070006h  +
push offset aFailedToGetI_0  +
jmp loc_10211B3  +
mov eax [ebp+arg_18] +
mov ecx [ebp+arg_1C] +
push ebx  +
add eax 7FFFh +
push 8000h  +
adc ecx ebx +
push ecx  +
push eax  +
call __alldiv  +
sub eax 1 +
sbb edx ebx +
mov [ebp+var_F0] eax +
mov [ebp+var_EC] edx +
cmp [ebp+arg_1C] ebx +
jz loc_1021240  +
mov [ebp+var_C4] 8 +
mov esi offset aUncompressfile +
cmp [ebp+var_F0] ebx +
jz loc_102144F  +
lea eax [ebp+var_90] +
push eax  +
mov eax [ebp+var_F0] +
mul  [ebp+var_C4] +
push edx  +
push eax  +
mov [ebp+var_90] ebx +
mov [ebp+var_88] ebx +
call sub_1011101  +
mov edi eax +
cmp edi ebx +
jge loc_10212C1  +
test edi 10000000h +
jz loc_102129A  +
mov esi ds:RtlNtStatusToDosError +
push edi  +
call esi  +
cmp eax 13Dh +
jz loc_10212B6  +
push edi  +
call esi  +
jmp loc_10212AB  +
mov eax edi +
and eax 1FFF0000h +
cmp eax 70000h +
jnz loc_10212B6  +
movzx eax di +
mov [ebp+dwErrCode] eax +
jmp loc_10214D7  +
mov [ebp+dwErrCode] edi +
jmp loc_10214D7  +
mov eax [ebp+var_90] +
cmp eax [ebp+var_F0] +
jbe loc_10214D7  +
cmp eax 400h +
ja loc_102139E  +
lea edi [ebp+Buffer] +
mov [ebp+lpMem] edi +
mov eax [ebp+arg_8] +
mov [ebp+var_120] eax +
mov eax [ebp+arg_C] +
mov [ebp+var_11C] eax +
mov eax [ebp+var_D8] +
mov [ebp+var_118] eax +
lea eax [ebp+var_128] +
push eax  +
push [ebp+var_90]  +
mov [ebp+var_128] ebx +
push edi  +
push [ebp+var_100]  +
mov [ebp+var_124] ebx +
call sub_101FCCF  +
mov [ebp+var_88] eax +
cmp eax ebx +
jz loc_102140A  +
lea ecx [ebp+arg_8] +
push ecx  +
xor eax eax +
push eax  +
push [ebp+var_90]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
call sub_10209AB  +
test eax eax +
jl loc_10213E8  +
cmp [ebp+var_C4] 4 +
mov eax [edi] +
mov [ebp+var_D0] eax +
jz loc_1021375  +
mov eax [edi+4] +
mov [ebp+var_CC] eax +
mov ecx [ebp+var_90] +
sub [ebp+arg_10] ecx +
push 0  +
pop eax  +
sbb [ebp+arg_14] eax +
cmp [ebp+arg_2C] ebx +
jz loc_1021443  +
add [ebp+var_A8] ecx +
adc [ebp+var_A4] eax +
jmp loc_1021443  +
push eax  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov edi eax +
mov [ebp+lpMem] edi +
cmp edi ebx +
jnz loc_10212EA  +
call ds:GetLastError  +
cmp eax ebx +
mov [ebp+dwErrCode] eax +
jle loc_10213D7  +
and eax 0FFFFh +
or eax 80070000h +
push 1CFh  +
push esi  +
push eax  +
push offset aFmallocFailed  +
jmp loc_10214C4  +
push 202h  +
push esi  +
push 80070216h  +
mov [ebp+var_88] ebx +
mov [ebp+dwErrCode] 216h +
push offset aIntegerOverflo  +
jmp loc_1021430  +
call ds:GetLastError  +
cmp eax ebx +
mov [ebp+dwErrCode] eax +
jle loc_1021424  +
and eax 0FFFFh +
or eax 80070000h +
push 20Dh  +
push esi  +
push eax  +
push offset aReaddataFailed  +
push [ebp+var_A0]  +
push [ebp+var_94]  +
push 2  +
call sub_1015538  +
cmp [ebp+var_88] ebx +
jz loc_10214D7  +
push [ebp+var_94]  +
call sub_1019C0C  +
mov [ebp+var_B8] eax +
cmp eax ebx +
jnz loc_1021498  +
mov eax [ebp+arg_20] +
dec eax  +
jz loc_1021474  +
dec eax  +
jnz loc_102147F  +
call sub_102077A  +
jmp loc_1021479  +
call sub_1020914  +
mov [ebp+var_B8] eax +
push [ebp+var_B8]  +
push [ebp+var_94]  +
call sub_1019C29  +
cmp [ebp+var_B8] ebx +
jz loc_10214A4  +
mov [ebp+var_88] 1 +
jmp loc_10214D7  +
push 23Bh  +
push esi  +
push 80070008h  +
mov [ebp+var_88] ebx +
mov [ebp+dwErrCode] 8 +
push offset aFailedToGetZCx  +
push [ebp+var_A0]  +
push [ebp+var_94]  +
push 1  +
call sub_1015538  +
mov eax [ebp+arg_18] +
mov [ebp+nNumberOfBytesToWrite] eax +
mov eax [ebp+arg_1C] +
mov [ebp+var_98] eax +
cmp [ebp+var_88] ebx +
jz loc_1021B26  +
mov eax [ebp+nNumberOfBytesToWrite] +
or eax [ebp+var_98] +
jz loc_1021AF2  +
mov eax [ebp+var_D4] +
mov ecx [ebp+var_F4] +
xor edx edx +
cmp edx [ebp+var_98] +
mov dword ptr [ebp+var_C8] eax +
jg loc_10215F2  +
jl loc_1021535  +
cmp ecx [ebp+nNumberOfBytesToWrite] +
jnb loc_10215F2  +
xor eax eax +
add ecx [ebp+var_E4] +
lea edi [ebp+var_12C] +
mov [ebp+var_130] ebx +
stos   +
mov eax [ebp+var_E0] +
mov edi [ebp+var_B4] +
adc edx eax +
mov [ebp+var_13C] eax +
mov eax [ebp+lpMem] +
mov [ebp+var_138] ecx +
mov ecx [ebp+var_E4] +
mov [ebp+var_90] 1 +
mov [ebp+var_134] edx +
lea eax [eax+edi*8] +
cmp edi [ebp+var_F0] +
jnb loc_10215E4  +
cmp [ebp+var_C4] 4 +
jnz loc_102159F  +
mov edx [ebp+lpMem] +
mov esi [edx+edi*4] +
jmp loc_10215AA  +
mov edx [eax+4] +
mov esi [eax] +
mov [ebp+var_12C] edx +
mov edx [ebp+var_134] +
cmp [ebp+var_12C] edx +
jg loc_10215D6  +
jl loc_10215C2  +
cmp esi [ebp+var_138] +
ja loc_10215D6  +
mov edx [ebp+var_12C] +
inc edi  +
add eax 8 +
mov ecx esi +
mov [ebp+var_13C] edx +
jmp loc_10215DC  +
mov [ebp+var_90] ebx +
cmp [ebp+var_90] ebx +
jnz loc_1021583  +
sub ecx [ebp+var_E4] +
mov [ebp+var_90] ecx +
jmp loc_10215FB  +
mov eax [ebp+arg_10] +
mov [ebp+var_90] eax +
mov esi [ebp+var_90] +
cmp esi ebx +
jz loc_10216E0  +
mov eax [ebp+arg_8] +
mov [ebp+var_120] eax +
mov eax [ebp+arg_C] +
mov [ebp+var_11C] eax +
mov eax [ebp+var_D8] +
mov [ebp+var_118] eax +
lea eax [ebp+var_128] +
push eax  +
push esi  +
push [ebp+var_D4]  +
mov [ebp+var_128] ebx +
push [ebp+var_100]  +
mov [ebp+var_124] ebx +
call sub_101FCCF  +
mov [ebp+var_88] eax +
cmp eax ebx +
jz loc_102169E  +
xor eax eax +
sub [ebp+arg_10] esi +
sbb [ebp+arg_14] eax +
add [ebp+arg_8] esi +
adc [ebp+arg_C] eax +
cmp [ebp+arg_2C] ebx +
jz loc_10217FE  +
mov ecx [ebp+var_A8] +
add ecx esi +
adc [ebp+var_A4] eax +
push [ebp+var_A4]  +
push ecx  +
push [ebp+var_94]  +
call sub_101A384  +
mov [ebp+var_A8] ebx +
mov [ebp+var_A4] ebx +
jmp loc_10217FE  +
call ds:GetLastError  +
cmp eax ebx +
mov [ebp+dwErrCode] eax +
jle loc_10216B8  +
and eax 0FFFFh +
or eax 80070000h +
push 2B4h  +
push offset aUncompressfile  +
push eax  +
push offset aReaddataFailed  +
push [ebp+var_A0]  +
push [ebp+var_94]  +
push 1  +
call sub_1015538  +
jmp loc_10217FE  +
push [ebp+var_E8]  +
mov [ebp+var_88] 1 +
push ebx  +
push [ebp+lpBuffer]  +
call memset  +
add esp 0Ch +
cmp [ebp+var_98] ebx +
jl loc_10217FE  +
jg loc_1021719  +
cmp [ebp+nNumberOfBytesToWrite] ebx +
jbe loc_10217FE  +
cmp ebx [ebp+var_98] +
mov esi [ebp+var_E8] +
jg loc_1021731  +
jl loc_1021737  +
cmp esi [ebp+nNumberOfBytesToWrite] +
jb loc_1021737  +
mov esi [ebp+nNumberOfBytesToWrite] +
mov eax [ebp+var_C0] +
mov [ebp+Overlapped.Offset] eax +
mov eax [ebp+var_BC] +
mov [ebp+Overlapped.OffsetHigh] eax +
mov eax [ebp+var_DC] +
mov [ebp+Overlapped.hEvent] eax +
lea eax [ebp+Overlapped] +
push eax  +
push esi  +
push [ebp+lpBuffer]  +
mov [ebp+Overlapped.Internal] ebx +
push [ebp+hFile]  +
mov [ebp+Overlapped.InternalHigh] ebx +
call sub_101FCAE  +
mov [ebp+var_88] eax +
cmp eax ebx +
jz loc_10217B5  +
cmp [ebp+arg_2C] ebx +
jz loc_102179B  +
add [ebp+var_A8] esi +
adc [ebp+var_A4] ebx +
sub [ebp+nNumberOfBytesToWrite] esi +
sbb [ebp+var_98] ebx +
add [ebp+var_C0] esi +
adc [ebp+var_BC] ebx +
jmp loc_10217F2  +
call ds:GetLastError  +
cmp eax ebx +
mov [ebp+dwErrCode] eax +
jle loc_10217CF  +
and eax 0FFFFh +
or eax 80070000h +
push 2F1h  +
push offset aUncompressfile  +
push eax  +
push offset aWritedataFaile  +
push [ebp+var_A0]  +
push [ebp+var_94]  +
push 1  +
call sub_1015538  +
cmp [ebp+var_88] ebx +
jnz loc_10216FF  +
cmp [ebp+var_88] ebx +
jz loc_1021B26  +
mov eax [ebp+lpMem] +
mov ecx [ebp+var_B4] +
lea eax [eax+ecx*8] +
mov [ebp+var_FC] eax +
cmp [ebp+var_90] ebx +
jz loc_1021AE6  +
cmp [ebp+var_98] ebx +
mov eax 8000h +
mov esi eax +
jg loc_102184A  +
jl loc_1021844  +
cmp [ebp+nNumberOfBytesToWrite] eax +
jnb loc_102184A  +
mov esi [ebp+nNumberOfBytesToWrite] +
mov ecx [ebp+var_F0] +
cmp [ebp+var_B4] ecx +
jnb loc_1021866  +
mov edi [ebp+var_D0] +
sub edi [ebp+var_E4] +
jmp loc_102186C  +
mov edi [ebp+var_90] +
cmp edi eax +
jnb loc_1021940  +
cmp edi ebx +
jz loc_1021928  +
cmp [ebp+var_B4] ecx +
jb loc_1021890  +
cmp edi [ebp+nNumberOfBytesToWrite] +
jz loc_1021940  +
lea eax [ebp+var_13C] +
push eax  +
mov eax [ebp+var_B8] +
push esi  +
push [ebp+lpBuffer]  +
mov [ebp+var_13C] ebx +
push edi  +
push dword ptr [ebp+var_C8]  +
push eax  +
call dword ptr [eax+10h]  +
mov [ebp+var_88] eax +
cmp eax ebx +
jnz loc_1021938  +
xor eax eax +
push 7Eh  +
mov [ebp+var_84] ax +
lea eax [ebp-82h] +
push ebx  +
push eax  +
call memset  +
push dword ptr [ebp+var_C8]  +
lea eax [ebp+var_84] +
push offset aFileCorruptedI  +
push 40h  +
push eax  +
mov [ebp+dwErrCode] 570h +
call sub_10149FA  +
add esp 1Ch +
push 33Ch  +
push offset aUncompressfile  +
push 80070570h  +
lea eax [ebp+var_84] +
push eax  +
push [ebp+var_A0]  +
push [ebp+var_94]  +
push 2  +
call sub_1015538  +
jmp loc_1021938  +
push esi  +
push ebx  +
push [ebp+lpBuffer]  +
call memset  +
add esp 0Ch +
mov eax [ebp+lpBuffer] +
jmp loc_1021946  +
mov eax dword ptr [ebp+var_C8] +
cmp [ebp+var_88] ebx +
jz loc_1021B26  +
mov ecx [ebp+var_C0] +
mov [ebp+Overlapped.Offset] ecx +
mov ecx [ebp+var_BC] +
mov [ebp+Overlapped.OffsetHigh] ecx +
mov ecx [ebp+var_DC] +
mov [ebp+Overlapped.hEvent] ecx +
lea ecx [ebp+Overlapped] +
push ecx  +
push esi  +
push eax  +
push [ebp+hFile]  +
mov [ebp+Overlapped.Internal] ebx +
mov [ebp+Overlapped.InternalHigh] ebx +
call sub_101FCAE  +
mov [ebp+var_88] eax +
cmp eax ebx +
jz loc_1021A9D  +
xor eax eax +
sub [ebp+nNumberOfBytesToWrite] esi +
sbb [ebp+var_98] eax +
add [ebp+var_C0] esi +
adc [ebp+var_BC] eax +
cmp [ebp+arg_2C] ebx +
jz loc_10219CF  +
add [ebp+var_A8] esi +
adc [ebp+var_A4] eax +
lea eax [ebp+var_90] +
push eax  +
push edi  +
push [ebp+var_90]  +
call sub_1013F7F  +
test eax eax +
jl loc_1021A77  +
cmp [ebp+var_90] ebx +
jnz loc_1021A04  +
mov eax [ebp+nNumberOfBytesToWrite] +
or eax [ebp+var_98] +
jz loc_1021ADA  +
mov eax [ebp+var_D0] +
mov ecx [ebp+var_B4] +
add dword ptr [ebp+var_C8] edi +
mov [ebp+var_E4] eax +
mov eax [ebp+var_CC] +
mov [ebp+var_E0] eax +
mov eax [ebp+var_FC] +
inc ecx  +
add eax 8 +
mov [ebp+var_B4] ecx +
mov [ebp+var_FC] eax +
cmp ecx [ebp+var_F0] +
jnb loc_1021ADA  +
cmp [ebp+var_C4] 4 +
jnz loc_1021A64  +
mov eax [ebp+lpMem] +
mov eax [eax+ecx*4] +
mov [ebp+var_D0] eax +
jmp loc_1021ADA  +
mov ecx [eax] +
mov eax [eax+4] +
mov [ebp+var_D0] ecx +
mov [ebp+var_CC] eax +
jmp loc_1021ADA  +
push 392h  +
push offset aUncompressfile  +
push 80070216h  +
mov [ebp+var_88] ebx +
mov [ebp+dwErrCode] 216h +
push offset aIntegerOverf_0  +
jmp loc_1021AC7  +
call ds:GetLastError  +
cmp eax ebx +
mov [ebp+dwErrCode] eax +
jle loc_1021AB7  +
and eax 0FFFFh +
or eax 80070000h +
push 39Ah  +
push offset aUncompressfile  +
push eax  +
push offset aWritedataFai_0  +
push [ebp+var_A0]  +
push [ebp+var_94]  +
push 2  +
call sub_1015538  +
cmp [ebp+var_88] ebx +
jnz loc_102181F  +
cmp [ebp+var_88] ebx +
jnz loc_10214F5  +
cmp [ebp+var_88] ebx +
jz loc_1021B26  +
cmp [ebp+arg_2C] ebx +
jz loc_1021B3A  +
mov eax [ebp+var_A8] +
or eax [ebp+var_A4] +
jz loc_1021B3A  +
push [ebp+var_A4]  +
push [ebp+var_A8]  +
push [ebp+var_94]  +
call sub_101A384  +
jmp loc_1021B3A  +
cmp [ebp+dwErrCode] ebx +
jnz loc_1021B3A  +
call ds:GetLastError  +
mov [ebp+dwErrCode] eax +
cmp [ebp+lpMem] ebx +
jz loc_1021B64  +
lea eax [ebp+Buffer] +
cmp [ebp+lpMem] eax +
jz loc_1021B64  +
push [ebp+lpMem]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp [ebp+dwErrCode] ebx +
jz loc_1021B78  +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
mov eax [ebp+var_88] +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010796  +
leave   +
retn 30h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_4] +
mov cl [eax+0Fh] +
push esi  +
mov esi [edx] +
mov [eax+8] esi +
mov edx [edx+4] +
mov [eax+0Ch] edx +
mov [eax+0Fh] cl +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_1021BD4  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_1021C0C  +
push 8  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
test eax eax +
jz loc_1021BD0  +
mov ecx [ebp+arg_4] +
mov [eax] ecx +
lea ecx [esi+1BCh] +
cmp dword ptr [ecx] 0 +
jnz loc_1021BFD  +
mov [ecx] eax +
jmp loc_1021C06  +
mov ecx [esi+1C0h] +
mov [ecx+4] eax +
mov [esi+1C0h] eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+lpMem] +
jmp loc_1021C36  +
mov eax esi +
mov esi [esi+4] +
push eax  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
test esi esi +
jnz loc_1021C21  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+lpMem] +
jmp loc_1021C66  +
mov eax esi +
mov esi [esi] +
push eax  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
test esi esi +
jnz loc_1021C52  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
and dword ptr [eax] 0 +
mov edx [ebp+arg_4] +
mov ecx [edx] +
test ecx ecx +
jnz loc_1021C8E  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
mov [edx] eax +
xor eax eax +
inc eax  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+lpMem] +
push esi  +
xor esi esi +
cmp [eax] esi +
jz loc_1021CC0  +
mov ecx [eax] +
cmp ecx ebx +
jz loc_1021CC0  +
mov eax ecx +
cmp dword ptr [eax] 0 +
mov esi ecx +
jnz loc_1021CB1  +
mov ecx [eax] +
test ecx ecx +
jz loc_1021CD5  +
mov edx [ebp+arg_4] +
cmp ecx [edx] +
jnz loc_1021CCF  +
mov [edx] esi +
mov ecx [eax] +
mov ecx [ecx] +
mov [eax] ecx +
and dword ptr [ebx] 0 +
push ebx  +
call sub_1021C47  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
mov eax dword_1049010 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
mov [ebp+hFile] eax +
xor eax eax +
push 2Ah  +
push eax  +
mov [ebp+Buffer] eax +
mov [ebp+var_34] eax +
lea eax [ebp+var_30] +
xor esi esi +
push eax  +
mov ebx ecx +
inc esi  +
call memset  +
add esp 0Ch +
test ebx ebx +
jz loc_1021D83  +
mov eax [ebx] +
mov ecx [eax+8] +
mov [ebp+Buffer] ecx +
mov ecx [eax+0Ch] +
mov [ebp+var_34] ecx +
mov cl [eax+0Fh] +
mov byte ptr [ebp+var_34+3] cl +
mov ecx [eax+10h] +
mov [ebp+var_30] ecx +
mov ecx [eax+14h] +
mov [ebp+var_2C] ecx +
mov cx [eax+20h] +
mov [ebp+var_20] cx +
mov [ebp+var_1E] 1 +
mov ecx [eax+18h] +
mov [ebp+var_28] ecx +
mov ecx [eax+1Ch] +
push 5  +
mov [ebp+var_24] ecx +
pop ecx  +
push 0  +
lea esi [eax+28h] +
push 32h  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+hFile]  +
lea edi [ebp+var_1A] +
movs   +
call sub_101FCAE  +
mov ebx [ebx+4] +
mov esi eax +
test esi esi +
jnz loc_1021D20  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010796  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
mov eax dword_1049010 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
and [ebp+var_38] 0 +
and [ebp+var_34] 0 +
push ebx  +
push esi  +
push edi  +
push 2Ah  +
mov [ebp+hFile] eax +
lea eax [ebp+var_30] +
push 0  +
xor esi esi +
push eax  +
mov ebx ecx +
inc esi  +
call memset  +
mov eax [ebp+nNumberOfBytesToWrite] +
add esp 0Ch +
mov [ebp+var_40] eax +
cmp eax 40h +
jnz loc_1021DE5  +
mov [ebp+nNumberOfBytesToWrite] 32h +
test ebx ebx +
jz loc_1021E58  +
cmp [ebp+var_40] 40h +
jnz loc_1021E42  +
test byte ptr [ebx+0Fh] 2 +
jnz loc_1021E52  +
mov eax [ebx+8] +
mov [ebp+var_38] eax +
mov eax [ebx+0Ch] +
mov [ebp+var_34] eax +
mov al [ebx+0Fh] +
mov byte ptr [ebp+var_34+3] al +
mov eax [ebx+10h] +
mov [ebp+var_30] eax +
mov eax [ebx+14h] +
mov [ebp+var_2C] eax +
mov ax [ebx+20h] +
mov [ebp+var_20] ax +
mov eax [ebx+24h] +
mov [ebp+var_1E] eax +
mov eax [ebx+18h] +
push 5  +
pop ecx  +
mov [ebp+var_28] eax +
mov eax [ebx+1Ch] +
push 0  +
mov [ebp+var_24] eax +
lea esi [ebx+28h] +
lea edi [ebp+var_1A] +
push 32h  +
lea eax [ebp+var_38] +
movs   +
push eax  +
jmp loc_1021E48  +
push 0  +
push [ebp+nNumberOfBytesToWrite]  +
push ebx  +
push [ebp+hFile]  +
call sub_101FCAE  +
mov esi eax +
mov ebx [ebx] +
test esi esi +
jnz loc_1021DE5  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010796  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
neg esi  +
sbb esi esi +
push edi  +
mov edi ds:GetProcessHeap +
and esi 28h +
add esi 18h +
push esi  +
push 8  +
call edi  +
push eax  +
call ds:HeapAlloc  +
mov ebx eax +
test ebx ebx +
jz loc_1021ECD  +
push esi  +
push [ebp+arg_0]  +
push ebx  +
call memcpy  +
add esp 0Ch +
cmp [ebp+arg_8] 0 +
jz loc_1021ECD  +
push ebx  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
call sub_1021C77  +
test eax eax +
jnz loc_1021ECD  +
push ebx  +
push eax  +
call edi  +
push eax  +
call ds:HeapFree  +
xor ebx ebx +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
movzx edi byte ptr [esi+0Fh] +
not edi  +
and edi 1 +
mov eax edi +
neg eax  +
sbb eax eax +
and eax 28h +
add eax 18h +
push eax  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov ebx eax +
test ebx ebx +
jz loc_1021F7E  +
mov eax [esi] +
mov [ebx+8] eax +
mov eax [esi+4] +
mov [ebx+0Ch] eax +
mov al [esi+7] +
mov [ebx+0Fh] al +
mov eax [esi+8] +
mov [ebx+10h] eax +
mov eax [esi+0Ch] +
mov [ebx+14h] eax +
test edi edi +
jz loc_1021F57  +
mov eax [esi+10h] +
mov [ebx+18h] eax +
mov eax [esi+14h] +
mov [ebx+1Ch] eax +
mov ax [esi+18h] +
mov [ebx+20h] ax +
mov eax [esi+1Ah] +
push 5  +
add esi 1Eh +
lea edi [ebx+28h] +
pop ecx  +
mov [ebx+24h] eax +
movs   +
cmp [ebp+arg_4] 0 +
jz loc_1021F7E  +
push ebx  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1021C77  +
test eax eax +
jnz loc_1021F7E  +
push ebx  +
xor ebx ebx +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
push esi  +
push [ebp+arg_0]  +
xor esi esi +
call sub_1021CE9  +
test eax eax +
jz loc_1021FC6  +
mov ecx [ebp+arg_8] +
push 40h  +
push [ebp+arg_0]  +
call sub_1021D9B  +
test eax eax +
jz loc_1021FC6  +
mov ecx [ebp+arg_C] +
push 18h  +
push [ebp+arg_0]  +
call sub_1021D9B  +
test eax eax +
jz loc_1021FC6  +
inc esi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 10h  +
***
test byte ptr [esi+0Fh] 1 +
lea ecx [eax+8] +
lea edx [eax+0Ch] +
jz loc_1021FE4  +
lea ecx [eax+10h] +
lea edx [eax+14h] +
push edx  +
push ecx  +
push esi  +
call sub_1021EDB  +
retn   +
***
call __SEH_prolog4_GS  +
cmp [ebp-2Ch] ebx +
jz loc_1022224  +
push dword ptr [ebp-2Ch]  +
call ds:UnmapViewOfFile  +
cmp [ebp-34h] ebx +
jz locret_1022232  +
push dword ptr [ebp-34h]  +
call ds:CloseHandle  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 8 +
cmp dword_1049AC0 0 +
push ebx  +
jnz loc_10222BD  +
push eax  +
push ebx  +
push ecx  +
push edx  +
xor eax eax +
cpuid   +
xor eax eax +
xor ebx 756E6547h +
setz al  +
xor ebx ebx +
xor ecx 6C65746Eh +
setz bl  +
and eax ebx +
xor ecx ecx +
xor edx 49656E69h +
setz cl  +
and eax ecx +
mov [ebp+var_4] eax +
mov eax 1 +
cpuid   +
xor ecx ecx +
xor edx edx +
mov ebx 0FF0h +
and ebx eax +
mov [ebp+var_8] ebx +
pop edx  +
pop ecx  +
pop ebx  +
pop eax  +
cmp [ebp+var_4] 0 +
mov eax 1 +
jz loc_10222B1  +
cmp [ebp+var_8] 660h +
jnb loc_10222B1  +
xor eax eax +
mov eax off_1049358[eax*4] +
mov dword_1049AC0 eax +
mov eax [ebp+arg_0] +
mov dword ptr [eax+54h] 0 +
mov dword ptr [eax+58h] 0 +
mov dword ptr [eax+40h] 67452301h +
mov dword ptr [eax+44h] 0EFCDAB89h +
mov dword ptr [eax+48h] 98BADCFEh +
mov dword ptr [eax+4Ch] 10325476h +
mov dword ptr [eax+50h] 0C3D2E1F0h +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 8 +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
mov edi [ebp+arg_0] +
mov ecx [edi+58h] +
mov eax ecx +
add ecx esi +
and eax 3Fh +
mov [ebp+var_4] eax +
mov [edi+58h] ecx +
cmp ecx esi +
jnb loc_1022328  +
inc dword ptr [edi+54h]  +
test eax eax +
jbe loc_102237B  +
lea ecx [eax+esi] +
mov [ebp+var_8] ecx +
cmp ecx 40h +
jb loc_102237B  +
mov ebx [ebp+arg_4] +
mov ecx 40h +
sub ecx eax +
push ecx  +
add eax edi +
push ebx  +
push eax  +
call memcpy  +
mov eax [ebp+var_8] +
add esp 0Ch +
mov edx 40h +
sub edx [ebp+var_4] +
push edi  +
lea ecx [edi+40h] +
add eax 0FFFFFFC0h +
push ecx  +
add ebx edx +
mov [ebp+arg_8] eax +
call dword_1049AC0  +
mov esi [ebp+arg_8] +
mov [ebp+var_4] 0 +
mov eax [ebp+var_4] +
jmp loc_102237E  +
mov ebx [ebp+arg_4] +
test bl 3 +
jz loc_10223BC  +
cmp esi 40h +
jb loc_10223EA  +
shr esi 6 +
mov [ebp+arg_4] esi +
mov edi edi +
mov eax [ebp+arg_0] +
push eax  +
add eax 40h +
mov ecx 10h +
mov esi ebx +
push eax  +
movs   +
call dword_1049AC0  +
sub [ebp+arg_8] 40h +
mov edi [ebp+arg_0] +
add ebx 40h +
sub [ebp+arg_4] 1 +
jnz loc_1022390  +
mov esi [ebp+arg_8] +
jmp loc_10223E7  +
cmp esi 40h +
jb loc_10223EA  +
mov eax esi +
shr eax 6 +
mov [ebp+arg_8] eax +
lea esp [esp+0] +
push ebx  +
lea eax [edi+40h] +
push eax  +
call dword_1049AC0  +
add ebx 40h +
sub esi 40h +
sub [ebp+arg_8] 1 +
jnz loc_10223D0  +
mov eax [ebp+var_4] +
test esi esi +
jz loc_10223FB  +
push esi  +
add eax edi +
push ebx  +
push eax  +
call memcpy  +
add esp 0Ch +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 50h +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+58h] +
push edi  +
and eax 3Fh +
mov edi 40h +
sub edi eax +
cmp edi 8 +
ja loc_1022432  +
add edi 40h +
lea ecx [edi-8] +
push ecx  +
lea edx [ebp+var_50] +
push 0  +
push edx  +
call memset  +
mov ecx [esi+54h] +
mov eax [esi+58h] +
add ecx ecx +
mov edx eax +
add ecx ecx +
add ecx ecx +
shr edx 1Dh +
or ecx edx +
add esp 0Ch +
add eax eax +
mov [ebp+var_8] ecx +
push 2  +
lea ecx [ebp+var_8] +
add eax eax +
push ecx  +
lea edx [ebp+edi+var_58] +
add eax eax +
push edx  +
mov byte ptr [ebp+var_50] 80h +
mov [ebp+var_4] eax +
call sub_1026350  +
push edi  +
lea eax [ebp+var_50] +
push eax  +
push esi  +
call sub_1022300  +
mov edx [ebp+arg_4] +
push 5  +
lea ecx [esi+40h] +
push ecx  +
push edx  +
call sub_1026350  +
push 40h  +
push 0  +
push esi  +
call memset  +
add esp 0Ch +
push esi  +
call sub_1022240  +
pop edi  +
pop esi  +
mov esp ebp +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp sub_102656B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp sub_10263C8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
mov [esi+994h] eax +
mov eax [ebp+arg_8] +
mov [esi+998h] eax +
mov eax [ebp+arg_10] +
push esi  +
mov [esi+874h] eax +
call sub_102731B  +
cmp dword ptr [esi+1Ch] 0 +
jz loc_102250C  +
mov eax [ebp+arg_C] +
and dword ptr [eax] 0 +
push 2  +
pop eax  +
jmp loc_1022519  +
push esi  +
call sub_1026995  +
mov ecx [ebp+arg_C] +
mov [ecx] eax +
xor eax eax +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push esi  +
call sub_10269C3  +
xor eax eax +
cmp [esi+1Ch] eax +
pop esi  +
setz al  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_8] +
mov eax [ebp+arg_18] +
mov edx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
mov [esi+4340h] eax +
mov [esi+4] edx +
test ecx 7FFFh +
jz loc_102256D  +
and ecx 0FFFF8000h +
mov eax 8000h +
cmp ecx eax +
jge loc_1022578  +
mov ecx eax +
cmp edx eax +
jge loc_1022580  +
xor eax eax +
jmp loc_10225B4  +
mov eax [ebp+arg_14] +
mov [esi+434Ch] eax +
mov eax [ebp+arg_C] +
mov [esi+4344h] eax +
mov eax [ebp+arg_10] +
push esi  +
mov [esi+988h] ecx +
mov [esi+4348h] eax +
call sub_1026632  +
test eax eax +
jz loc_102257C  +
push esi  +
call sub_10263C8  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
add eax 2FE5h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push esi  +
call sub_102747D  +
push esi  +
call sub_1027506  +
push esi  +
call sub_1027353  +
and dword ptr [esi+2ECCh] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_C] +
push esi  +
mov esi [ebp+arg_0] +
mov [esi+2B04h] eax +
lea eax [eax+ecx+4] +
mov [esi+2B08h] eax +
mov eax [ebp+arg_10] +
push esi  +
mov [esi+2B0Ch] eax +
call sub_10277D1  +
push [ebp+arg_4]  +
push esi  +
call sub_1027555  +
inc dword ptr [esi+2ECCh]  +
test eax eax +
jge loc_1022654  +
mov eax [ebp+arg_18] +
and dword ptr [eax] 0 +
xor eax eax +
inc eax  +
jmp loc_1022661  +
mov ecx [ebp+arg_18] +
mov [ecx] eax +
add [esi+2B10h] eax +
xor eax eax +
pop esi  +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
lea ecx [eax+2FE5h] +
cmp [ebp+arg_4] ecx +
jge loc_1022682  +
xor eax eax +
jmp loc_10226C1  +
mov edx [ebp+arg_0] +
lea ecx [eax-1] +
push esi  +
lea esi [edx+eax+108h] +
mov [esi+4] eax +
mov [esi+8] ecx +
mov [esi] edx +
test ecx eax +
jnz loc_10226BE  +
cmp eax 1000h +
jb loc_10226BE  +
cmp eax 10000h +
ja loc_10226BE  +
push esi  +
call sub_1027434  +
test eax eax +
jz loc_10226BE  +
push esi  +
call sub_10225DC  +
mov eax esi +
jmp loc_10226C0  +
xor eax eax +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
cmp dword_104A0C8 0 +
jnz loc_1022776  +
push ebx  +
push esi  +
push edi  +
mov ecx 13579BDFh +
mov edx 87654321h +
mov [ebp+var_C] offset word_1049AC8 +
lea esp [esp+0] +
mov edi edx +
mov esi ecx +
xor eax eax +
mov [ebp+var_8] 20h +
jmp loc_1022713  +
mov edi [ebp+var_4] +
sub eax 61C88647h +
add edi eax +
mov [ebp+var_4] edi +
lea edi [edi+edx*8] +
mov ebx edx +
sar ebx 5 +
add esi eax +
add ebx esi +
xor ebx edi +
lea edi [eax+edx] +
xor ebx edi +
add ecx ebx +
mov ebx ecx +
sar ebx 5 +
add ebx [ebp+var_4] +
lea edi [esi+ecx*8] +
xor edi ebx +
lea ebx [eax+ecx] +
xor edi ebx +
add edx edi +
mov edi 1 +
sub [ebp+var_8] edi +
jnz loc_1022710  +
mov eax [ebp+var_C] +
add ecx edx +
mov esi ecx +
and esi 7FFFh +
mov [eax] si +
add eax 2 +
mov [ebp+var_C] eax +
cmp eax offset dword_104A0C8 +
jb loc_1022700  +
mov dword_104A0C8 edi +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov ecx [esi-10h] +
mov eax [esi-14h] +
push edi  +
sub ecx 2 +
xor edi edi +
cmp eax ecx +
jnb loc_10227D3  +
push ebx  +
movzx edx byte ptr [eax+2] +
movzx ebx byte ptr [eax] +
movzx ebx word_1049AC8[ebx*2] +
movzx edx word_1049EC8[edx*2] +
xor edx ebx +
movzx ebx byte ptr [eax+1] +
movzx ebx word_1049CC8[ebx*2] +
xor edx ebx +
mov bx [esi+edx*2-15A5Ch] +
mov [esi+edi*2] bx +
mov [esi+edx*2-15A5Ch] di +
inc eax  +
inc edi  +
cmp eax ecx +
jb loc_1022791  +
pop ebx  +
add ecx 2 +
cmp eax ecx +
jnb loc_10227F4  +
sub ecx eax +
xor eax eax +
movzx edx ax +
mov eax edx +
shl edx 10h +
or eax edx +
shr ecx 1 +
lea edi [esi+edi*2] +
stos   +
adc ecx ecx +
stos   +
pop edi  +
retn   +
***
mov edi edi +
push esi  +
mov esi [eax-3Ch] +
mov edx [eax-34h] +
lea ecx [edx+edx] +
or ecx 1 +
test edx edx +
jge loc_1022826  +
mov edx [eax-38h] +
mov [edx] ecx +
mov [eax-38h] esi +
add esi 4 +
inc dword ptr [eax-54h]  +
mov ecx 1 +
mov [eax-34h] ecx +
cmp esi [eax-3Ch] +
jz loc_1022806  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push ebp  +
sub esp 0Ch +
mov ebx [ebp+arg_0] +
mov edi [ebx-44h] +
mov esi [ebx-40h] +
lea eax [edi+2] +
mov [esp+1Ch+var_18] eax +
add eax 2 +
mov [esp+1Ch+var_1C] eax +
xor ebp ebp +
mov ch 10h +
xor edx edx +
jmp loc_1022950  +
mov eax [ebx+eax*4-525Ch] +
shl ebp cl +
inc esi  +
add ebp eax +
sub ch cl +
jge loc_102289A  +
mov cl ch +
add ch 10h +
mov eax [esp+1Ch+var_1C] +
rol ebp cl +
mov [edi] bp +
mov edi [esp+1Ch+var_18] +
ror ebp cl +
mov [esp+1Ch+var_18] eax +
add eax 2 +
mov [esp+1Ch+var_1C] eax +
movzx eax byte ptr [esi] +
add edx edx +
mov cl [ebx+eax-4A5Ch] +
jnb loc_102286D  +
jz loc_1022950  +
mov cl [ebx+eax-495Ch] +
mov [esp+1Ch+var_14] edx +
cmp esi [ebx-3Ch] +
jnb loc_10229A3  +
shl ebp cl +
mov dl al +
add ebp [ebx+eax*4-4E5Ch] +
mov eax [esp+1Ch+var_1C] +
sub ch cl +
jge loc_10228EB  +
mov cl ch +
add ch 10h +
rol ebp cl +
mov [edi] bp +
mov edi [esp+1Ch+var_18] +
ror ebp cl +
mov [esp+1Ch+var_18] eax +
add eax 2 +
mov cl dl +
and dl 0Fh +
shr cl 4 +
cmp dl 0Fh +
jz loc_1022980  +
movzx edx byte ptr [esi+1] +
shl ebp cl +
cmp cl 8 +
jbe loc_102290C  +
movzx edx word ptr [esi+1] +
inc esi  +
add ebp edx +
sub ch cl +
jge loc_1022929  +
mov cl ch +
add ch 10h +
rol ebp cl +
mov [edi] bp +
mov edi [esp+1Ch+var_18] +
ror ebp cl +
mov [esp+1Ch+var_18] eax +
add eax 2 +
mov edx [esp+1Ch+var_14] +
add esi 2 +
mov [esp+1Ch+var_1C] eax +
movzx eax byte ptr [esi] +
add edx edx +
mov cl [ebx+eax-4A5Ch] +
jnb loc_102286D  +
jnz loc_10228AE  +
jmp loc_1022950  +
mov edx [esi] +
movzx eax byte ptr [esi+4] +
add esi 4 +
test edx edx +
mov cl [ebx+eax-4A5Ch] +
lea edx ds:1[edx*2] +
jge loc_102286D  +
jmp loc_10228AE  +
jmp loc_1022980  +
mov dl [esi+1] +
inc esi  +
mov [eax] dl +
inc eax  +
cmp dl 0FFh +
jnz loc_10228FC  +
mov dx [esi+1] +
add eax 2 +
add esi 2 +
mov [eax-2] dx +
jmp loc_10228FC  +
mov cl [ebx-495Ch] +
mov eax [esp+1Ch+var_1C] +
shl ebp cl +
mov edx [esp+1Ch+var_18] +
add ebp [ebx-4E5Ch] +
sub ch cl +
jge loc_10229D1  +
mov cl ch +
neg cl  +
add ch 10h +
ror ebp cl +
mov [edi] bp +
mov edi edx +
rol ebp cl +
mov edx eax +
add eax 2 +
mov cl ch +
shl ebp cl +
mov [edi] bp +
mov word ptr [edx] 0 +
mov [ebx-44h] eax +
add esp 0Ch +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
push edi  +
mov edi eax +
mov eax [ebp+arg_C] +
push edi  +
push 0  +
push eax  +
call memset  +
mov edx [ebp+arg_14] +
lea ecx [edi+1] +
sar ecx 1 +
push ecx  +
push 0  +
push edx  +
call memset  +
mov eax [ebp+arg_8] +
mov ebx [ebp+arg_4] +
add esp 18h +
test eax eax +
jz loc_1022A3E  +
cmp eax ebx +
jz loc_1022A3E  +
lea ecx ds:0[edi*4] +
push ecx  +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
mov esi [ebp+arg_0] +
xor ecx ecx +
mov eax esi +
test edi edi +
jle loc_1022A71  +
lea esp [esp+0] +
mov edx [ebx+ecx*4] +
mov [eax+8] edx +
test edx edx +
jz loc_1022A6C  +
lea edx [eax+10h] +
mov [eax] edx +
mov dword ptr [eax+4] 0 +
mov [eax+0Ch] cx +
mov eax edx +
inc ecx  +
cmp ecx edi +
jl loc_1022A50  +
mov edx [ebp+arg_18] +
lea ecx [esi+10h] +
mov dword ptr [edx] 0 +
cmp eax ecx +
ja loc_1022AAD  +
cmp eax esi +
jz loc_1022DF6  +
mov ecx [ebp+arg_8] +
movzx eax word ptr [eax-4] +
test ecx ecx +
jz loc_1022A9B  +
mov dword ptr [ecx+eax*4] 0 +
mov edx [ebp+arg_14] +
pop edi  +
sar eax 1 +
pop esi  +
mov byte ptr [eax+edx] 11h +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 1Ch  +
mov [ebp+var_14] eax +
add eax 0FFFFFFF0h +
mov [ebp+var_18] eax +
mov dword ptr [eax] 0 +
mov edx esi +
lea eax [esi+4000h] +
mov ecx 100h +
lea esp [esp+0] +
mov [eax+400h] eax +
mov dword ptr [eax] 0 +
add eax 4 +
sub ecx 1 +
jnz loc_1022AD0  +
mov [ebp+var_10] ecx +
jmp loc_1022AF0  +
mov eax [edx+8] +
shr eax cl +
and eax 0FFh +
mov edi [esi+eax*4+4400h] +
mov [edi] edx +
mov [esi+eax*4+4400h] edx +
mov edx [edx] +
test edx edx +
jnz loc_1022AF0  +
xor eax eax +
cmp [esi+4000h] eax +
lea edx [esi+4000h] +
jnz loc_1022B29  +
add edx 4 +
inc eax  +
cmp dword ptr [edx] 0 +
jz loc_1022B20  +
mov edx [esi+eax*4+4000h] +
mov ebx eax +
mov dword ptr [esi+eax*4+4000h] 0 +
inc eax  +
cmp eax 100h +
mov [ebp+var_4] ebx +
jge loc_1022BA9  +
lea edi ds:0[ebx*4] +
mov ebx 0FFFFC000h +
lea ecx [esi+eax*4+4000h] +
sub ebx esi +
mov [ebp+var_C] ecx +
mov [ebp+var_8] ebx +
mov ebx [ecx] +
test ebx ebx +
jz loc_1022B95  +
mov ecx [edi+esi+4400h] +
mov [ecx] ebx +
lea ecx [edi+esi+4000h] +
mov [edi+esi+4400h] ecx +
mov ecx [ebp+var_C] +
mov edi [ebp+var_8] +
mov ebx eax +
mov dword ptr [ecx] 0 +
mov [ebp+var_4] ebx +
add edi ecx +
jmp loc_1022B98  +
mov ebx [ebp+var_4] +
inc eax  +
add ecx 4 +
cmp eax 100h +
mov [ebp+var_C] ecx +
jl loc_1022B63  +
mov ecx [ebp+var_10] +
mov eax [esi+ebx*4+4400h] +
mov dword ptr [eax] 0 +
add ecx 8 +
cmp ecx 10h +
lea eax [esi+ebx*4+4000h] +
mov [esi+ebx*4+4400h] eax +
mov [ebp+var_10] ecx +
jl loc_1022AF0  +
lea ecx [edx+0Eh] +
mov [ebp+var_10] edx +
mov [ebp+var_C] ecx +
lea esp [esp+0] +
mov ecx [ebp+var_14] +
mov eax [ebp+var_18] +
test edx edx +
jnz loc_1022BEE  +
cmp ecx eax +
jz loc_1022C43  +
add eax 10h +
test edx edx +
jz loc_1022C0D  +
cmp ecx eax +
jz loc_1022C01  +
mov edi [edx+8] +
cmp edi [ecx+8] +
ja loc_1022C0D  +
mov [eax] edx +
mov edi [edx+8] +
mov [eax+8] edi +
mov edx [edx] +
jmp loc_1022C18  +
mov [eax] ecx +
mov edi [ecx+8] +
mov [eax+8] edi +
add ecx 10h +
test edx edx +
jz loc_1022C35  +
cmp ecx eax +
jz loc_1022C28  +
mov edi [edx+8] +
cmp edi [ecx+8] +
ja loc_1022C35  +
mov [eax+4] edx +
mov edi [edx+8] +
add [eax+8] edi +
mov edx [edx] +
jmp loc_1022BE6  +
mov [eax+4] ecx +
mov edi [ecx+8] +
add [eax+8] edi +
add ecx 10h +
jmp loc_1022BE6  +
or edi 0FFFFFFFFh +
xor ebx ebx +
mov ecx [eax+4] +
test ecx ecx +
jz loc_1022C74  +
lea esi [esi+edi*4+4000h] +
inc ebx  +
movzx edx bx +
add esi 4 +
mov [esi] ecx +
mov [ecx+0Eh] dx +
mov eax [eax] +
mov [eax+0Eh] dx +
mov ecx [eax+4] +
inc edi  +
test ecx ecx +
jnz loc_1022C56  +
mov esi [ebp+arg_0] +
movzx edx word ptr [eax+0Ch] +
mov eax [ebp+arg_C] +
mov [edx+eax] bl +
test edi edi +
jl loc_1022C90  +
mov eax [esi+edi*4+4000h] +
movzx ebx word ptr [eax+0Eh] +
dec edi  +
jmp loc_1022C48  +
mov ecx [ebp+var_C] +
movzx ecx word ptr [ecx] +
mov eax [ebp+var_10] +
mov edx eax +
cmp ecx [ebp+arg_10] +
jbe loc_1022CB4  +
mov ecx [eax+8] +
inc ecx  +
shr ecx 1 +
mov [eax+8] ecx +
mov eax [eax] +
test eax eax +
jnz loc_1022CA0  +
jmp loc_1022BE0  +
push 80h  +
push 0  +
add esi 4000h +
push esi  +
call memset  +
mov ecx [ebp+arg_0] +
add esp 0Ch +
lea eax [ecx+4400h] +
mov edx 20h +
jmp loc_1022CE0  +
lea esi [eax-400h] +
mov [eax] esi +
add eax 4 +
sub edx 1 +
jnz loc_1022CE0  +
mov eax ecx +
movzx edx word ptr [eax+0Eh] +
mov esi [ecx+edx*4+4400h] +
mov [esi] eax +
mov [ecx+edx*4+4400h] eax +
add eax 10h +
cmp eax [ebp+var_14] +
jnz loc_1022CF2  +
xor eax eax +
cmp [ecx+4000h] eax +
lea edx [ecx+4000h] +
jnz loc_1022D29  +
mov edi edi +
add edx 4 +
inc eax  +
cmp dword ptr [edx] 0 +
jz loc_1022D20  +
mov esi [ecx+eax*4+4000h] +
mov edx eax +
inc eax  +
cmp eax 20h +
mov [ebp+var_4] edx +
jge loc_1022D76  +
mov ebx 0FFFFC000h +
sub ebx ecx +
lea edi ds:0[edx*4] +
lea edx [ecx+eax*4+4000h] +
mov [ebp+var_8] ebx +
mov ebx [edx] +
test ebx ebx +
jz loc_1022D6A  +
mov edi [edi+ecx+4400h] +
mov [edi] ebx +
mov edi [ebp+var_8] +
mov [ebp+var_4] eax +
add edi edx +
inc eax  +
add edx 4 +
cmp eax 20h +
jl loc_1022D53  +
mov edx [ebp+var_4] +
mov edx [ecx+edx*4+4400h] +
mov ecx [ebp+arg_8] +
mov dword ptr [edx] 0 +
cmp ecx [ebp+arg_4] +
jnz loc_1022D9B  +
add eax eax +
add eax eax +
push eax  +
push 0  +
push ecx  +
call memset  +
add esp 0Ch +
xor edi edi +
lea edx [edi+1] +
movzx eax word ptr [esi+0Eh] +
movzx ecx word ptr [esi+0Ch] +
mov ebx eax +
mov eax [ebp+arg_4] +
imul ebx [eax+ecx*4] +
mov eax [ebp+arg_18] +
add [eax] ebx +
movzx eax word ptr [esi+0Ch] +
mov bl [esi+0Eh] +
mov ecx eax +
and ecx 1 +
add ecx ecx +
add ecx ecx +
shl bl cl +
mov ecx [ebp+arg_14] +
shr eax 1 +
or bl [eax+ecx] +
movzx eax word ptr [esi+0Ch] +
shr eax 1 +
mov [eax+ecx] bl +
movzx ecx word ptr [esi+0Eh] +
sub ecx edx +
mov edx [ebp+arg_8] +
shl edi cl +
movzx ecx word ptr [esi+0Ch] +
mov [edx+ecx*4] edi +
movzx edx word ptr [esi+0Eh] +
mov esi [esi] +
inc edi  +
test esi esi +
jnz loc_1022DA0  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push ebp  +
mov edx [ebp+8] +
mov esi [edx-14h] +
mov eax [edx-1Ch] +
add eax esi +
mov [edx-4] eax +
add esi [edx-24h] +
mov ebx [edx-3Ch] +
mov ebp [edx-34h] +
cmp esi [edx-14h] +
jnz loc_1022E57  +
jmp loc_1022E40  +
movzx eax byte ptr [esi] +
inc ebx  +
inc esi  +
inc dword ptr [edx+eax*4-5A5Ch]  +
mov [ebx-1] al +
add ebp ebp +
jb loc_1023034  +
cmp esi [edx-4] +
jnb loc_1023087  +
movzx ecx byte ptr [esi] +
movzx edi byte ptr [esi+1] +
movzx eax byte ptr [esi+2] +
lea eax [eax+ecx*8] +
lea eax [eax+edi*2] +
mov edi [edx+eax*4] +
mov [edx+eax*4] esi +
mov eax [esi] +
sub eax [edi] +
jz loc_1022F90  +
test eax 0FFFFFFh +
jnz loc_1022E40  +
mov ecx 3 +
sub edi esi +
neg edi  +
bsr eax edi +
add dword ptr [edx-5Ch] 3 +
sub edi dword_1049380[eax*4] +
add [edx-58h] eax +
shl eax 4 +
add ebx 3 +
lea eax [eax+ecx-3] +
inc dword ptr [edx+eax*4-565Ch]  +
mov [ebx-3] al +
cmp eax 90h +
sbb eax eax +
mov [ebx-2] di +
add ebx eax +
add [edx-5Ch] eax +
stc   +
lea eax [esi+ecx] +
adc ebp ebp +
jb loc_102301C  +
cmp eax [edx-8] +
ja loc_1023060  +
push ebp  +
lea ebp [eax-3] +
movzx eax byte ptr [esi] +
movzx ecx byte ptr [esi+1] +
movzx edi byte ptr [esi+2] +
cmp esi ebp +
jbe loc_1022F50  +
lea eax [ecx+eax*4] +
lea eax [edi+eax*2] +
mov [edx+eax*4] esi +
movzx eax byte ptr [esi+3] +
lea ecx [edi+ecx*4] +
inc esi  +
lea ecx [eax+ecx*2] +
mov [edx+ecx*4] esi +
inc esi  +
pop ebp  +
cmp esi [edx-4] +
jnb loc_1023087  +
movzx ecx byte ptr [esi+2] +
lea eax [eax+edi*4] +
lea eax [ecx+eax*2] +
mov edi [edx+eax*4] +
mov [edx+eax*4] esi +
jmp loc_1022E77  +
***
lea eax [ecx+eax*4] +
lea eax [edi+eax*2] +
mov [edx+eax*4] esi +
inc esi  +
cmp esi ebp +
jz loc_1022F41  +
movzx eax byte ptr [esi+2] +
lea ecx [edi+ecx*4] +
lea ecx [eax+ecx*2] +
mov [edx+ecx*4] esi +
inc esi  +
pop ebp  +
jmp loc_1022E57  +
***
jmp loc_1022F50  +
push ebx  +
lea ebx [ecx+eax*4] +
movzx eax byte ptr [esi+3] +
lea ebx [edi+ebx*2] +
mov [edx+ebx*4] esi +
inc esi  +
lea ebx [edi+ecx*4] +
movzx ecx byte ptr [esi+3] +
lea ebx [eax+ebx*2] +
mov [edx+ebx*4] esi +
inc esi  +
lea ebx [eax+edi*4] +
movzx edi byte ptr [esi+3] +
lea ebx [ecx+ebx*2] +
mov [edx+ebx*4] esi +
inc esi  +
cmp esi ebp +
jbe loc_1022F51  +
add ebp 3 +
pop ebx  +
cmp esi ebp +
jnz loc_1022F25  +
pop ebp  +
jmp loc_1022E57  +
***
mov eax [esi+4] +
sub eax [edi+4] +
jz loc_1022FA8  +
bsf ecx eax +
sub edi esi +
shr ecx 3 +
add ecx 4 +
jmp loc_1022E8F  +
***
mov eax esi +
mov ecx [edx-10h] +
add esi 8 +
add edi 8 +
sub ecx esi +
cmps   +
jz loc_102304C  +
lea ecx [esi-1] +
sub edi esi +
sub ecx eax +
mov esi eax +
cmp ecx 12h +
jb loc_1022E8F  +
neg edi  +
sub ecx 12h +
bsr eax edi +
add dword ptr [edx-5Ch] 3 +
sub edi dword_1049380[eax*4] +
add [edx-58h] eax +
shl eax 4 +
add ebx 4 +
add eax 0Fh +
inc dword ptr [edx+eax*4-565Ch]  +
mov [ebx-4] al +
mov [ebx-3] cl +
cmp ecx 0FFh +
jb loc_1023014  +
add ebx 2 +
add ecx 0Fh +
mov byte ptr [ebx-5] 0FFh +
mov [ebx-4] cx +
sub ecx 0Fh +
add ecx 12h +
jmp loc_1022EB6  +
***
mov ecx [edx-38h] +
mov [edx-38h] ebx +
add ebx 4 +
mov [ecx] ebp +
inc dword ptr [edx-54h]  +
mov ebp 1 +
jmp loc_1022ED2  +
***
mov ecx [edx-38h] +
mov [edx-38h] ebx +
add ebx 4 +
mov [ecx] ebp +
inc dword ptr [edx-54h]  +
mov ebp 1 +
jmp loc_1022E57  +
***
inc esi  +
inc edi  +
jmp loc_1022FBD  +
***
jmp loc_1023060  +
push ebx  +
push eax  +
mov ebx [edx-8] +
jmp loc_102307C  +
movzx ecx byte ptr [esi] +
movzx edi byte ptr [esi+1] +
movzx eax byte ptr [esi+2] +
lea eax [eax+ecx*8] +
lea eax [eax+edi*2] +
mov [edx+eax*4] esi +
inc esi  +
cmp esi ebx +
jb loc_1023067  +
pop esi  +
pop ebx  +
jmp loc_1022E57  +
***
mov [edx-3Ch] ebx +
mov [edx-34h] ebp +
sub esi [edx-14h] +
mov [edx-24h] esi +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push ebp  +
mov edx [ebp+8] +
mov esi [edx-14h] +
mov eax [edx-1Ch] +
add eax esi +
mov [edx-4] eax +
add esi [edx-24h] +
mov ebx [edx-3Ch] +
mov ebp [edx-34h] +
cmp esi [edx-14h] +
jnz loc_10230E7  +
jmp loc_10230D0  +
movzx eax byte ptr [esi] +
inc ebx  +
inc esi  +
inc dword ptr [edx+eax*4-5A5Ch]  +
mov [ebx-1] al +
add ebp ebp +
jb loc_1023274  +
cmp esi [edx-4] +
jnb loc_10232E3  +
movzx eax byte ptr [esi] +
movzx ecx byte ptr [esi+1] +
movzx edi byte ptr [esi+2] +
movzx eax word_1049AC8[eax*2] +
movzx ecx word_1049CC8[ecx*2] +
movzx edi word_1049EC8[edi*2] +
xor eax ecx +
xor eax edi +
mov ecx [edx-14h] +
movzx edi word ptr [edx+eax*2] +
sub esi ecx +
add edi ecx +
mov [edx+eax*2] si +
add esi ecx +
mov eax [esi] +
sub eax [edi] +
jz loc_10231D0  +
test eax 0FFFFFFh +
jnz loc_10230D0  +
mov ecx 3 +
sub edi esi +
neg edi  +
bsr eax edi +
add dword ptr [edx-5Ch] 3 +
sub edi dword_1049380[eax*4] +
add [edx-58h] eax +
shl eax 4 +
add ebx 3 +
lea eax [eax+ecx-3] +
inc dword ptr [edx+eax*4-565Ch]  +
mov [ebx-3] al +
cmp eax 90h +
sbb eax eax +
mov [ebx-2] di +
add ebx eax +
add [edx-5Ch] eax +
stc   +
lea eax [esi+ecx] +
adc ebp ebp +
jb loc_102325C  +
cmp eax [edx-8] +
ja loc_10232A0  +
push ebx  +
push ebp  +
mov ebx esi +
mov ebp eax +
sub ebx [edx-14h] +
movzx eax byte ptr [esi] +
movzx ecx byte ptr [esi+1] +
movzx edi byte ptr [esi+2] +
movzx eax word_1049AC8[eax*2] +
movzx ecx word_1049CC8[ecx*2] +
movzx edi word_1049EC8[edi*2] +
xor eax ecx +
xor eax edi +
inc esi  +
mov [edx+eax*2] bx +
inc ebx  +
cmp esi ebp +
jnz loc_1023195  +
pop ebp  +
pop ebx  +
jmp loc_10230E7  +
***
mov eax [esi+4] +
sub eax [edi+4] +
jz loc_10231E8  +
bsf ecx eax +
sub edi esi +
shr ecx 3 +
add ecx 4 +
jmp loc_1023140  +
***
mov eax esi +
mov ecx [edx-10h] +
add esi 8 +
add edi 8 +
sub ecx esi +
cmps   +
jz loc_102328C  +
lea ecx [esi-1] +
sub edi esi +
sub ecx eax +
mov esi eax +
cmp ecx 12h +
jb loc_1023140  +
neg edi  +
sub ecx 12h +
bsr eax edi +
add dword ptr [edx-5Ch] 3 +
sub edi dword_1049380[eax*4] +
add [edx-58h] eax +
shl eax 4 +
add ebx 4 +
add eax 0Fh +
inc dword ptr [edx+eax*4-565Ch]  +
mov [ebx-4] al +
mov [ebx-3] cl +
cmp ecx 0FFh +
jb loc_1023254  +
add ebx 2 +
add ecx 0Fh +
mov byte ptr [ebx-5] 0FFh +
mov [ebx-4] cx +
sub ecx 0Fh +
add ecx 12h +
jmp loc_1023167  +
***
mov ecx [edx-38h] +
mov [edx-38h] ebx +
add ebx 4 +
mov [ecx] ebp +
inc dword ptr [edx-54h]  +
mov ebp 1 +
jmp loc_1023183  +
***
mov ecx [edx-38h] +
mov [edx-38h] ebx +
add ebx 4 +
mov [ecx] ebp +
inc dword ptr [edx-54h]  +
mov ebp 1 +
jmp loc_10230E7  +
***
inc esi  +
inc edi  +
jmp loc_10231FD  +
***
jmp loc_10232A0  +
push ebx  +
push eax  +
mov ebx [edx-8] +
jmp loc_10232D8  +
movzx eax byte ptr [esi] +
movzx ecx byte ptr [esi+1] +
movzx edi byte ptr [esi+2] +
movzx eax word_1049AC8[eax*2] +
movzx ecx word_1049CC8[ecx*2] +
movzx edi word_1049EC8[edi*2] +
xor eax ecx +
xor eax edi +
mov ecx esi +
sub ecx [edx-14h] +
mov [edx+eax*2] cx +
inc esi  +
cmp esi ebx +
jb loc_10232A7  +
pop esi  +
pop ebx  +
jmp loc_10230E7  +
***
mov [edx-3Ch] ebx +
mov [edx-34h] ebp +
sub esi [edx-14h] +
mov [edx-24h] esi +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push ebp  +
mov edx [ebp+8] +
mov esi [edx-14h] +
mov eax [edx-1Ch] +
add eax esi +
mov [edx-4] eax +
add esi [edx-24h] +
mov ebx [edx-3Ch] +
mov ebp [edx-34h] +
cmp esi [edx-14h] +
jnz loc_1023349  +
jmp loc_1023332  +
jmp loc_1023330  +
add esi ecx +
movzx eax byte ptr [esi] +
inc ebx  +
inc esi  +
inc dword ptr [edx+eax*4-5A5Ch]  +
mov [ebx-1] al +
add ebp ebp +
jb loc_10234E3  +
cmp esi [edx-4] +
jnb loc_1023502  +
mov ecx [edx-14h] +
sub esi ecx +
movzx edi word ptr [edx+esi*2] +
test edi edi +
jz loc_1023330  +
mov ax [ecx+esi+1] +
cmp ax [ecx+edi+1] +
jz loc_10233D8  +
mov [edx] si +
movzx edi word ptr [edx+edi*2] +
cmp ax [ecx+edi+1] +
jz loc_10233D0  +
movzx edi word ptr [edx+edi*2] +
cmp ax [ecx+edi+1] +
jz loc_10233D0  +
movzx edi word ptr [edx+edi*2] +
cmp ax [ecx+edi+1] +
jz loc_10233D0  +
movzx edi word ptr [edx+edi*2] +
cmp ax [ecx+edi+1] +
jz loc_10233D0  +
movzx edi word ptr [edx+edi*2] +
cmp ax [ecx+edi+1] +
jz loc_10233D0  +
movzx edi word ptr [edx+edi*2] +
cmp ax [ecx+edi+1] +
jz loc_10233D0  +
movzx edi word ptr [edx+edi*2] +
cmp ax [ecx+edi+1] +
jz loc_10233D0  +
movzx edi word ptr [edx+edi*2] +
cmp ax [ecx+edi+1] +
jnz loc_1023330  +
lea ebx [ebx+0] +
cmp edi esi +
jz loc_1023330  +
movzx eax byte ptr [esi+ecx] +
add esi ecx +
cmp al [edi+ecx] +
jnz loc_1023335  +
add edi ecx +
mov al [esi+3] +
cmp al [edi+3] +
jz loc_1023442  +
mov ecx 3 +
sub edi esi +
neg edi  +
bsr eax edi +
add dword ptr [edx-5Ch] 3 +
sub edi dword_1049380[eax*4] +
add [edx-58h] eax +
shl eax 4 +
add ebx 3 +
lea eax [eax+ecx-3] +
inc dword ptr [edx+eax*4-565Ch]  +
mov [ebx-3] al +
cmp eax 90h +
sbb eax eax +
mov [ebx-2] di +
add ebx eax +
add [edx-5Ch] eax +
stc   +
lea eax [esi+ecx] +
adc ebp ebp +
jb loc_10234CB  +
mov esi eax +
jmp loc_1023349  +
***
mov eax [esi+4] +
sub eax [edi+4] +
jz loc_1023457  +
bsf ecx eax +
sub edi esi +
shr ecx 3 +
add ecx 4 +
jmp loc_10233F8  +
***
mov eax esi +
mov ecx [edx-10h] +
add esi 8 +
add edi 8 +
sub ecx esi +
cmps   +
jz loc_10234FB  +
lea ecx [esi-1] +
sub edi esi +
sub ecx eax +
mov esi eax +
cmp ecx 12h +
jb loc_10233F8  +
neg edi  +
sub ecx 12h +
bsr eax edi +
add dword ptr [edx-5Ch] 3 +
sub edi dword_1049380[eax*4] +
add [edx-58h] eax +
shl eax 4 +
add ebx 4 +
add eax 0Fh +
inc dword ptr [edx+eax*4-565Ch]  +
mov [ebx-4] al +
mov [ebx-3] cl +
cmp ecx 0FFh +
jb loc_10234C3  +
add ebx 2 +
add ecx 0Fh +
mov byte ptr [ebx-5] 0FFh +
mov [ebx-4] cx +
sub ecx 0Fh +
add ecx 12h +
jmp loc_102341F  +
***
mov ecx [edx-38h] +
mov [edx-38h] ebx +
add ebx 4 +
mov [ecx] ebp +
inc dword ptr [edx-54h]  +
mov ebp 1 +
jmp loc_102343B  +
***
mov ecx [edx-38h] +
mov [edx-38h] ebx +
add ebx 4 +
mov [ecx] ebp +
inc dword ptr [edx-54h]  +
mov ebp 1 +
jmp loc_1023349  +
***
inc esi  +
inc edi  +
jmp loc_102346C  +
***
mov [edx-3Ch] ebx +
mov [edx-34h] ebp +
sub esi [edx-14h] +
mov [edx-24h] esi +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push ebp  +
mov edx [ebp+8] +
mov esi [edx-14h] +
mov eax [edx-1Ch] +
add eax esi +
mov [edx-4] eax +
add esi [edx-24h] +
mov ebx [edx-3Ch] +
mov ebp [edx-34h] +
cmp esi [edx-14h] +
jnz loc_1023569  +
jmp loc_1023552  +
jmp loc_1023550  +
add esi ecx +
movzx eax byte ptr [esi] +
inc ebx  +
inc esi  +
inc dword ptr [edx+eax*4-5A5Ch]  +
mov [ebx-1] al +
add ebp ebp +
jb loc_1023830  +
cmp esi [edx-4] +
jnb loc_102384F  +
mov ecx [edx-14h] +
sub esi ecx +
movzx edi word ptr [edx+esi*2] +
test edi edi +
jz loc_1023550  +
mov ax [ecx+esi+1] +
mov [edx] si +
mov dword ptr [edx-2Ch] 2 +
cmp ax [ecx+edi+1] +
jz loc_10235F8  +
movzx edi word ptr [edx+edi*2] +
cmp ax [ecx+edi+1] +
jz loc_10235F0  +
movzx edi word ptr [edx+edi*2] +
cmp ax [ecx+edi+1] +
jz loc_10235F0  +
movzx edi word ptr [edx+edi*2] +
cmp ax [ecx+edi+1] +
jz loc_10235F0  +
movzx edi word ptr [edx+edi*2] +
cmp ax [ecx+edi+1] +
jz loc_10235F0  +
movzx edi word ptr [edx+edi*2] +
cmp ax [ecx+edi+1] +
jz loc_10235F0  +
movzx edi word ptr [edx+edi*2] +
cmp ax [ecx+edi+1] +
jz loc_10235F0  +
movzx edi word ptr [edx+edi*2] +
cmp ax [ecx+edi+1] +
jz loc_10235F0  +
add esi ecx +
mov eax [edx-50h] +
add edi ecx +
dec eax  +
mov [edx-30h] eax +
jmp loc_1023630  +
cmp edi esi +
jz loc_1023550  +
mov al [esi+ecx] +
add esi ecx +
cmp al [edi+ecx] +
jnz loc_10235E4  +
mov eax [edx-50h] +
add edi ecx +
dec eax  +
mov [edx-30h] eax +
mov al [esi+3] +
cmp al [edi+3] +
jz loc_102373A  +
cmp dword ptr [edx-2Ch] 3 +
jnb loc_1023630  +
mov dword ptr [edx-2Ch] 3 +
mov [edx-28h] edi +
jmp loc_1023630  +
dec dword ptr [edx-30h]  +
jl loc_10237B0  +
mov ecx [edx-2Ch] +
mov ax [esi+ecx-1] +
add ecx [edx-14h] +
sub edi [edx-14h] +
dec ecx  +
movzx edi word ptr [edx+edi*2] +
cmp ax [ecx+edi] +
jz loc_10236B0  +
movzx edi word ptr [edx+edi*2] +
cmp ax [ecx+edi] +
jz loc_10236B0  +
movzx edi word ptr [edx+edi*2] +
cmp ax [ecx+edi] +
jz loc_10236B0  +
movzx edi word ptr [edx+edi*2] +
cmp ax [ecx+edi] +
jz loc_10236B0  +
movzx edi word ptr [edx+edi*2] +
cmp ax [ecx+edi] +
jz loc_10236B0  +
movzx edi word ptr [edx+edi*2] +
cmp ax [ecx+edi] +
jz loc_10236B0  +
movzx edi word ptr [edx+edi*2] +
cmp ax [ecx+edi] +
jz loc_10236B0  +
movzx edi word ptr [edx+edi*2] +
cmp ax [ecx+edi] +
jz loc_10236B0  +
dec dword ptr [edx-30h]  +
jge loc_1023648  +
jmp loc_10237B0  +
jmp loc_10236B0  +
lea esp [esp+0] +
jmp loc_10236B0  +
mov eax [edx-14h] +
inc ecx  +
add edi eax +
sub ecx eax +
cmp esi edi +
jz loc_10237B0  +
mov eax [esi] +
sub eax [edi] +
jz loc_102373A  +
test eax 0FFFFFFh +
jnz loc_1023630  +
cmp ecx 3 +
jnb loc_1023630  +
mov ecx 3 +
mov dword ptr [edx-2Ch] 3 +
mov [edx-28h] edi +
jmp loc_1023630  +
***
neg edi  +
bsr eax edi +
add dword ptr [edx-5Ch] 3 +
sub edi dword_1049380[eax*4] +
add [edx-58h] eax +
shl eax 4 +
add ebx 3 +
lea eax [eax+ecx-3] +
inc dword ptr [edx+eax*4-565Ch]  +
mov [ebx-3] al +
cmp eax 90h +
sbb eax eax +
mov [ebx-2] di +
add ebx eax +
add [edx-5Ch] eax +
stc   +
lea eax [esi+ecx] +
adc ebp ebp +
jb loc_1023818  +
mov esi eax +
jmp loc_1023569  +
***
mov eax [esi+4] +
sub eax [edi+4] +
jz loc_102375F  +
bsf ecx eax +
shr ecx 3 +
add ecx 4 +
cmp ecx [edx-2Ch] +
jbe loc_1023630  +
mov [edx-2Ch] ecx +
mov [edx-28h] edi +
jmp loc_1023630  +
***
mov eax esi +
mov ecx [edx-10h] +
add esi 8 +
add edi 8 +
sub ecx esi +
cmps   +
jz loc_1023848  +
lea ecx [esi-1] +
cmp esi [edx-10h] +
ja loc_1023797  +
mov esi eax +
dec edi  +
sub ecx eax +
sub edi ecx +
cmp ecx [edx-2Ch] +
jbe loc_1023630  +
mov [edx-2Ch] ecx +
mov [edx-28h] edi +
jmp loc_1023630  +
***
mov esi eax +
dec edi  +
sub ecx eax +
sub edi ecx +
mov [edx-2Ch] ecx +
mov [edx-28h] edi +
jmp loc_10237B0  +
jmp loc_10237B0  +
cmp dword ptr [edx-2Ch] 2 +
jbe loc_1023552  +
mov edi [edx-28h] +
mov ecx [edx-2Ch] +
sub edi esi +
cmp ecx 12h +
jb loc_10236F0  +
neg edi  +
sub ecx 12h +
bsr eax edi +
add dword ptr [edx-5Ch] 3 +
sub edi dword_1049380[eax*4] +
add [edx-58h] eax +
shl eax 4 +
add ebx 4 +
add eax 0Fh +
inc dword ptr [edx+eax*4-565Ch]  +
mov [ebx-4] al +
mov [ebx-3] cl +
cmp ecx 0FFh +
jb loc_1023810  +
add ebx 2 +
add ecx 0Fh +
mov byte ptr [ebx-5] 0FFh +
mov [ebx-4] cx +
sub ecx 0Fh +
add ecx 12h +
jmp loc_1023717  +
***
mov ecx [edx-38h] +
mov [edx-38h] ebx +
add ebx 4 +
mov [ecx] ebp +
inc dword ptr [edx-54h]  +
mov ebp 1 +
jmp loc_1023733  +
***
mov ecx [edx-38h] +
mov [edx-38h] ebx +
add ebx 4 +
mov [ecx] ebp +
inc dword ptr [edx-54h]  +
mov ebp 1 +
jmp loc_1023569  +
***
inc esi  +
inc edi  +
jmp loc_1023774  +
***
mov [edx-3Ch] ebx +
mov [edx-34h] ebp +
sub esi [edx-14h] +
mov [edx-24h] esi +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
jnz loc_1023883  +
push esi  +
call [ebp+arg_0]  +
pop ebp  +
retn 0Ch  +
push edi  +
mov edi [esi-1Ch] +
mov eax [esi-24h] +
mov ecx eax +
sub ecx [esi-18h] +
cmp ecx ebx +
jl loc_10238A1  +
mov edx [ebp+arg_8] +
push eax  +
push edx  +
call [ebp+arg_4]  +
mov eax [esi-24h] +
mov [esi-18h] eax +
cmp eax edi +
mov [esi-1Ch] edi +
jge loc_10238C7  +
mov eax [esi-18h] +
mov ecx edi +
sub ecx eax +
cmp ecx ebx +
jle loc_10238B8  +
add eax ebx +
mov [esi-1Ch] eax +
mov edx [esi-14h] +
add edx [esi-1Ch] +
push esi  +
mov [esi-4] edx +
call [ebp+arg_0]  +
jmp loc_1023887  +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 118h +
mov eax dword_1049010 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_10] +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_C] +
mov [ebp+var_10C] eax +
mov [ebp+var_114] ecx +
mov [ebp+var_110] edx +
test ebx ebx +
jz loc_1023C49  +
cmp dword ptr [ebx] 53E7C0DEh +
jnz loc_1023C49  +
cmp [ebp+arg_8] eax +
jl loc_1023931  +
lea ecx [eax-1] +
mov [ebp+arg_8] ecx +
lea edx [eax-1] +
cmp edx [ebx+10h] +
ja loc_1023C4B  +
cmp eax 105h +
jle loc_1023C4B  +
cmp [ebp+arg_8] 105h +
jl loc_1023C4B  +
cmp [ebp+arg_4] 0 +
jz loc_1023C4B  +
test esi esi +
jz loc_1023C4B  +
push edi  +
mov edi [ebx+8] +
push 5A5Ch  +
lea eax [edi-5A5Ch] +
push 0  +
push eax  +
mov [ebp+var_118] edi +
call memset  +
mov ecx [ebp+arg_18] +
add esp 0Ch +
test ecx ecx +
jge loc_102399A  +
mov [ebp+arg_18] 0 +
mov ecx [ebp+arg_18] +
jmp loc_10239A3  +
mov eax [ebx+18h] +
cmp ecx eax +
jle loc_10239A3  +
mov ecx eax +
mov eax [ebp+var_10C] +
mov [edi-1Ch] eax +
mov [edi-20h] eax +
add eax esi +
mov [edi-10h] eax +
lea edx [eax-10h] +
add eax 0FFFFFFFDh +
mov [edi-8] eax +
mov eax [ebp+arg_4] +
mov [edi-50h] ecx +
mov [edi-14h] esi +
mov [edi-0Ch] edx +
mov [edi-48h] eax +
mov [edi-44h] eax +
mov dword ptr [edi-24h] 0 +
mov ebx [ebx+0Ch] +
mov [edi-3Ch] ebx +
mov [edi-40h] ebx +
mov [ebp+var_108] offset loc_1022E10 +
test ecx ecx +
jg loc_1023A30  +
mov ecx 0AF6h +
mov eax edi +
mov [eax] esi +
add eax 4 +
sub ecx 1 +
jz loc_1023A98  +
test cl 7 +
jnz loc_10239F4  +
lea ecx [eax+ecx*4] +
lea ebx [ebx+0] +
mov [eax] esi +
mov [eax+4] esi +
mov [eax+8] esi +
mov [eax+0Ch] esi +
mov [eax+10h] esi +
mov [eax+14h] esi +
mov [eax+18h] esi +
mov [eax+1Ch] esi +
add eax 20h +
cmp eax ecx +
jnz loc_1023A10  +
jmp loc_1023A98  +
cmp dword_104A0C8 0 +
jnz loc_1023A3E  +
call sub_10226D0  +
mov eax [edi-50h] +
cmp eax 1 +
jnz loc_1023A62  +
push 10000h  +
push 0  +
push edi  +
mov [ebp+var_108] offset loc_10230A0 +
call memset  +
add esp 0Ch +
jmp loc_1023A98  +
cmp eax 3 +
mov [ebp+var_108] offset loc_1023300 +
jl loc_1023A7B  +
mov [ebp+var_108] offset loc_1023520 +
push 10000h  +
lea eax [edi-15A5Ch] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
mov esi edi +
call sub_1022780  +
mov ebx [ebp+arg_14] +
test ebx ebx +
jle loc_1023AA7  +
cmp ebx [ebp+var_10C] +
jle loc_1023AAF  +
mov ecx [ebp+var_10C] +
mov ebx ecx +
mov esi [ebp+var_114] +
test esi esi +
jz loc_1023ACB  +
mov edx [ebp+var_110] +
push 0  +
push edx  +
mov dword ptr [edi-18h] 0 +
call esi  +
mov ecx [ebp+var_110] +
mov eax [edi-3Ch] +
mov edx [ebp+var_108] +
add dword ptr [edi-1Ch] 0FFFFFFF9h +
add dword ptr [edi-3Ch] 4 +
push ecx  +
push esi  +
push edx  +
mov esi edi +
mov [edi-38h] eax +
mov dword ptr [edi-34h] 1 +
call sub_1023870  +
mov eax [edi-24h] +
cmp eax [edi-20h] +
jge loc_1023B53  +
mov edi edi +
mov ecx [edi-24h] +
mov edx [edi-14h] +
mov cl [ecx+edx] +
mov eax [edi-3Ch] +
mov [eax] cl +
mov edx [edi-3Ch] +
movzx eax byte ptr [edx] +
lea eax [edi+eax*4-5A5Ch] +
mov ebx 1 +
add [eax] ebx +
mov eax [edi-34h] +
add [edi-3Ch] ebx +
lea ecx [eax+eax] +
test eax eax +
jge loc_1023B43  +
mov edx [edi-38h] +
mov [edx] ecx +
mov eax [edi-3Ch] +
add dword ptr [edi-3Ch] 4 +
add [edi-54h] ebx +
mov [edi-38h] eax +
mov ecx ebx +
add [edi-24h] ebx +
mov [edi-34h] ecx +
mov ecx [edi-24h] +
cmp ecx [edi-20h] +
jl loc_1023B00  +
jmp loc_1023B58  +
mov ebx 1 +
mov eax edi +
call sub_1022800  +
cmp dword ptr [edi-5Ch] 0 +
jz loc_1023BE9  +
add [edi-565Ch] ebx +
lea edx [ebp+var_108] +
push edx  +
lea eax [ebp+var_104] +
push eax  +
push 0Fh  +
lea ecx [edi-4A5Ch] +
push ecx  +
lea edx [edi-525Ch] +
push edx  +
lea esi [edi-5A5Ch] +
push esi  +
lea eax [edi-485Ch] +
push eax  +
mov eax 200h +
call sub_10229F0  +
mov eax [edi-58h] +
add eax [ebp+var_108] +
jnz loc_1023BB2  +
mov eax ebx +
mov ecx [edi-3Ch] +
dec eax  +
shr eax 3 +
and eax 1FFFFFFEh +
sub eax [edi-40h] +
mov edx 100h +
sub eax [edi-5Ch] +
lea eax [eax+ecx+104h] +
mov ecx esi +
sub eax [ecx] +
add ecx 4 +
sub edx ebx +
jnz loc_1023BD2  +
mov edx [edi-54h] +
add edx edx +
add edx edx +
sub eax edx +
cmp eax [ebp+arg_8] +
jb loc_1023BF1  +
mov edi [ebp+var_10C] +
jmp loc_1023C1A  +
mov edi [edi-44h] +
mov ecx 40h +
lea esi [ebp+var_104] +
movs   +
mov esi [ebp+var_118] +
add dword ptr [esi-44h] 100h +
push esi  +
call sub_1022840  +
mov edi [esi-44h] +
sub edi [esi-48h] +
mov eax [ebp+var_114] +
test eax eax +
jz loc_1023C34  +
mov ecx [ebp+var_10C] +
mov edx [ebp+var_110] +
push ecx  +
push edx  +
call eax  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1010796  +
mov esp ebp +
pop ebp  +
retn 1Ch  +
xor eax eax +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010796  +
mov esp ebp +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1023CAC  +
cmp dword ptr [eax] 53E7C0DEh +
jnz loc_1023CAC  +
mov ecx [eax+14h] +
mov edx [ebp+arg_1C] +
push ecx  +
mov ecx [ebp+arg_10] +
push edx  +
mov edx [ebp+arg_C] +
push ecx  +
mov ecx [ebp+arg_8] +
push edx  +
mov edx [ebp+arg_4] +
push ecx  +
mov ecx [ebp+arg_14] +
push edx  +
mov edx [ebp+arg_18] +
push eax  +
call sub_10238E0  +
pop ebp  +
retn 20h  +
xor eax eax +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_8] +
test esi esi +
jz loc_1023DB1  +
mov edx [ebp+arg_0] +
lea eax [edx-1] +
mov [ebp+arg_0] eax +
cmp eax 0FFFFh +
ja loc_1023DB1  +
lea eax [edx+7] +
sar eax 3 +
push ebx  +
mov ebx [ebp+arg_C] +
add eax edx +
cmp ebx 9 +
mov ecx 2BD8h +
jle loc_1023D00  +
mov ebx 9 +
cmp ebx 1 +
mov [ebp+arg_8] ebx +
jl loc_1023D28  +
cmp ebx 2 +
mov ecx 10000h +
jl loc_1023D28  +
mov [ebp+arg_8] 9 +
lea ecx [edx+edx] +
cmp eax 10000h +
jnb loc_1023D28  +
mov eax 10000h +
push edi  +
lea edi [eax+5D5Bh] +
and edi 0FFFFFF00h +
lea eax [ecx+edi+220h] +
mov ecx [ebp+arg_4] +
push eax  +
push ecx  +
call esi  +
test eax eax +
jnz loc_1023D4E  +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn 10h  +
mov ecx [ebp+arg_0] +
mov edx eax +
and edx 0FFh +
mov esi eax +
sub esi edx +
mov edx [ebp+arg_8] +
add esi 100h +
mov [esi+10h] ecx +
mov [esi+4] eax +
lea ecx [esi+20h] +
and ecx 0FFh +
mov eax esi +
sub eax ecx +
add eax 120h +
cmp dword_104A0C8 0 +
mov [esi+18h] edx +
lea edx [eax+edi] +
mov [esi+14h] ebx +
mov dword ptr [esi] 53E7C0DEh +
mov dword ptr [esi+1Ch] offset unk_1049400 +
mov [esi+8] edx +
mov [esi+0Ch] eax +
jnz loc_1023DA8  +
call sub_10226D0  +
pop edi  +
pop ebx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 10h  +
xor eax eax +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1023DEB  +
mov ecx [ebp+arg_8] +
test ecx ecx +
jz loc_1023DEB  +
cmp dword ptr [eax] 53E7C0DEh +
jnz loc_1023DEB  +
mov edx [ebp+arg_4] +
mov dword ptr [eax] 0 +
mov eax [eax+4] +
push eax  +
push edx  +
call ecx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 84h +
push 40h  +
lea eax [ebp+var_44] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
mov ecx 100h +
mov edx [ebp+arg_0] +
movzx eax byte ptr [ecx+edx-1] +
dec ecx  +
mov edx eax +
and edx 0Fh +
inc [ebp+edx*4+var_44]  +
sar eax 4 +
inc [ebp+eax*4+var_44]  +
lea edx [ebp+edx*4+var_44] +
lea eax [ebp+eax*4+var_44] +
test ecx ecx +
jnz loc_1023E20  +
cmp [ebp+var_44] 1FFh +
push esi  +
push edi  +
jge loc_1023E7B  +
mov ecx 10h +
lea esi [ebp+var_44] +
lea edi [ebp+var_84] +
movs   +
xor eax eax +
mov ecx 0Fh +
add eax [ebp+ecx*4+var_44] +
test al 1 +
jnz loc_1023E7B  +
sar eax 1 +
sub ecx 1 +
jnz loc_1023E67  +
cmp eax 1 +
jz loc_1023E85  +
pop edi  +
xor eax eax +
pop esi  +
mov esp ebp +
pop ebp  +
retn 4  +
xor ecx ecx +
mov eax 1 +
lea esp [esp+0] +
add [ebp+eax*4+var_44] ecx +
mov ecx [ebp+eax*4+var_44] +
inc eax  +
cmp eax 10h +
jl loc_1023E90  +
mov edi [ebp+var_8] +
mov [ebp+var_4] edi +
mov eax 2000h +
lea esp [esp+0] +
mov esi [ebp+arg_0] +
sub eax 10h +
mov ecx eax +
sar ecx 5 +
movzx ecx byte ptr [ecx+esi] +
shr ecx 4 +
test ecx ecx +
jz loc_1023ED9  +
dec [ebp+ecx*4+var_44]  +
mov edx [ebp+ecx*4+var_44] +
mov edi eax +
or edi ecx +
mov [ebx+edx*2] di +
mov edi [ebp+var_4] +
sub eax 10h +
mov edx eax +
sar edx 5 +
movzx ecx byte ptr [edx+esi] +
and ecx 0Fh +
jz loc_1023EFA  +
dec [ebp+ecx*4+var_44]  +
mov edx [ebp+ecx*4+var_44] +
mov esi eax +
or esi ecx +
mov [ebx+edx*2] si +
test eax eax +
jnz loc_1023EB0  +
mov ecx 800h +
mov eax ecx +
mov [ebp+arg_0] 0Fh +
lea esp [esp+0] +
cmp eax ecx +
mov edx ecx +
jle loc_1023F2A  +
sub eax 2 +
mov esi eax +
dec ecx  +
or esi 8000h +
cmp eax edx +
mov [ebx+ecx*2] si +
jg loc_1023F16  +
mov eax [ebp+arg_0] +
mov eax [ebp+eax*4+var_84] +
sub eax 1 +
js loc_1023F50  +
lea esp [esp+0] +
mov si [ebx+edi*2-2] +
dec edi  +
dec ecx  +
sub eax 1 +
mov [ebx+ecx*2] si +
jns loc_1023F40  +
mov eax edx +
mov edx [ebp+arg_0] +
dec edx  +
cmp edx 0Ah +
mov [ebp+arg_0] edx +
jg loc_1023F10  +
cmp eax ecx +
mov edx 400h +
jle loc_1023F7B  +
sub eax 2 +
mov esi eax +
dec edx  +
or esi 8000h +
cmp eax ecx +
mov [ebx+edx*2] si +
jg loc_1023F67  +
test edi edi +
jle loc_1023FA5  +
nop   +
movzx esi word ptr [ebx+edi*2-2] +
dec edi  +
mov ecx esi +
and ecx 0Fh +
mov eax 400h +
sar eax cl +
mov ecx eax +
mov eax edx +
sub eax ecx +
dec edx  +
mov [ebx+edx*2] si +
cmp edx eax +
jnz loc_1023F98  +
test edi edi +
jg loc_1023F80  +
pop edi  +
mov eax 1 +
pop esi  +
mov esp ebp +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov eax [ebp+arg_0] +
push esi  +
push edi  +
push edx  +
push ecx  +
push ebx  +
push ebp  +
mov ebp eax +
mov ebx [ebp+arg_10] +
mov edi [ebp+4] +
xor esi esi +
mov si [ebx] +
shl esi 10h +
mov si [ebx+2] +
add ebx 4 +
mov ch 10h +
cmp ebx [ebp+arg_14] +
jnb loc_10241F0  +
cmp edi [ebp+arg_0] +
jnb loc_10241F0  +
jmp loc_1024027  +
mov edx esi +
mov [edi] al +
shr edx 16h +
inc edi  +
movsx eax [ebp+edx*2+arg_34] +
mov cl 0Fh +
test eax eax +
jl loc_102404B  +
and cl al +
shr eax 4 +
shl esi cl +
sub ch cl +
jl loc_1024071  +
sub eax 100h +
jl loc_1024000  +
jmp loc_10240A1  +
mov edx esi +
mov cl 0Fh +
shr edx 16h +
movsx eax [ebp+edx*2+arg_34] +
test eax eax +
jl loc_102404B  +
and cl al +
shr eax 4 +
shl esi cl +
sub ch cl +
jl loc_1024071  +
sub eax 100h +
jl loc_1024000  +
jmp loc_10240A1  +
shl esi 0Ah +
add esi esi +
adc eax 0 +
movsx eax [ebp+eax*2+arg_10034] +
test eax eax +
jl loc_102404E  +
and cl al +
shr eax 4 +
sub ch cl +
jl loc_1024071  +
sub eax 100h +
jl loc_1024000  +
jmp loc_10240A1  +
cmp ebx [ebp+arg_14] +
jnb loc_102423A  +
cmp edi [ebp+arg_0] +
jnb loc_102423A  +
mov cl ch +
xor edx edx +
mov dx [ebx] +
neg cl  +
add ebx 2 +
shl edx cl +
add ch 10h +
add esi edx +
sub eax 100h +
jl loc_1024000  +
mov cl al +
mov edx esi +
shr cl 4 +
or edx 1 +
shl esi cl +
sub ch cl +
ror edx 1 +
xor cl 1Fh +
and eax 0Fh +
shr edx cl +
push esi  +
neg edx  +
cmp eax 5 +
ja loc_1024131  +
lea esi [edi+edx] +
cmp edx 0FFFFFFFDh +
jnb loc_10240EB  +
cmp esi [ebp+4] +
jb loc_10242F8  +
mov edx [esi] +
mov [edi] edx +
mov edx [esi+4] +
mov [edi+4] edx +
pop esi  +
lea edi [edi+eax+3] +
test ch ch +
jge loc_1024027  +
jmp loc_1024168  +
cmp esi [ebp+4] +
jb loc_10242F8  +
mov dl [esi] +
mov [edi] dl +
mov dl [esi+1] +
mov [edi+1] dl +
mov dl [esi+2] +
mov [edi+2] dl +
mov dl [esi+3] +
mov [edi+3] dl +
mov dl [esi+4] +
mov [edi+4] dl +
mov dl [esi+5] +
mov [edi+5] dl +
mov dl [esi+6] +
mov [edi+6] dl +
mov dl [esi+7] +
mov [edi+7] dl +
pop esi  +
lea edi [edi+eax+3] +
test ch ch +
jge loc_1024027  +
jmp loc_1024168  +
cmp eax 0Fh +
jz loc_1024192  +
lea esi [edi+edx] +
add eax 3 +
lea edx [edi+eax] +
cmp esi [ebp+4] +
jb loc_10242F8  +
xchg eax ecx +
cmp edx [ebp+arg_0] +
jnb loc_1024299  +
movs   +
mov ch ah +
pop esi  +
cmp edi [ebp+arg_0] +
jnb loc_10242AD  +
test ch ch +
jge loc_1024027  +
cmp ebx [ebp+arg_14] +
jnb loc_10242B5  +
cmp edi [ebp+arg_0] +
jnb loc_10242B5  +
mov cl ch +
xor edx edx +
mov dx [ebx] +
neg cl  +
add ebx 2 +
shl edx cl +
add ch 10h +
add esi edx +
jmp loc_1024027  +
xor eax eax +
mov al [ebx] +
inc ebx  +
cmp al 0FFh +
lea eax [eax+0Fh] +
jnz loc_1024136  +
xor eax eax +
mov ax [ebx] +
add ebx 2 +
cmp ax 10Eh +
jnb loc_1024136  +
jmp loc_10242F8  +
jmp loc_10241C0  +
cmp edi [ebp+arg_4] +
jnb loc_102430E  +
mov edx esi +
mov [edi] al +
shr edx 16h +
inc edi  +
movsx eax [ebp+edx*2+arg_34] +
mov cl 0Fh +
test eax eax +
jl loc_1024214  +
and cl al +
shr eax 4 +
shl esi cl +
sub ch cl +
jl loc_102423A  +
sub eax 100h +
jl loc_10241C0  +
jmp loc_1024261  +
mov edx esi +
mov cl 0Fh +
shr edx 16h +
movsx eax [ebp+edx*2+arg_34] +
test eax eax +
jl loc_1024214  +
and cl al +
shr eax 4 +
shl esi cl +
sub ch cl +
jl loc_102423A  +
sub eax 100h +
jl loc_10241C0  +
jmp loc_1024261  +
shl esi 0Ah +
add esi esi +
adc eax 0 +
movsx eax [ebp+eax*2+arg_10034] +
test eax eax +
jl loc_1024217  +
and cl al +
shr eax 4 +
sub ch cl +
jl loc_102423A  +
sub eax 100h +
jl loc_10241C0  +
jmp loc_1024261  +
cmp ebx [ebp+arg_20] +
jnb loc_10242F9  +
mov cl ch +
xor edx edx +
mov dx [ebx] +
neg cl  +
add ebx 2 +
shl edx cl +
add ch 10h +
add esi edx +
sub eax 100h +
jl loc_10241C0  +
cmp edi [ebp+arg_4] +
jnb loc_10242FD  +
mov cl al +
mov edx esi +
shr cl 4 +
or edx 1 +
shl esi cl +
sub ch cl +
ror edx 1 +
xor cl 1Fh +
and eax 0Fh +
shr edx cl +
push esi  +
neg edx  +
cmp eax 0Fh +
jz loc_10242D2  +
lea esi [edi+edx] +
add eax 3 +
lea edx [edi+eax] +
cmp esi [ebp+4] +
jb loc_10242F8  +
xchg eax ecx +
cmp edx [ebp+arg_4] +
jbe loc_10242A8  +
sub edx [ebp+arg_4] +
sub ecx edx +
movs   +
pop esi  +
jmp loc_102430E  +
movs   +
mov ch ah +
pop esi  +
test ch ch +
jge loc_10241F0  +
cmp ebx [ebp+arg_20] +
jnb loc_10242F9  +
mov cl ch +
xor edx edx +
mov dx [ebx] +
neg cl  +
add ebx 2 +
shl edx cl +
add ch 10h +
add esi edx +
jmp loc_10241F0  +
cmp ebx [ebp+arg_C] +
jnb loc_10242F8  +
xor eax eax +
mov al [ebx] +
inc ebx  +
cmp al 0FFh +
lea eax [eax+0Fh] +
jnz loc_102428A  +
cmp ebx [ebp+arg_18] +
jnb loc_10242F8  +
xor eax eax +
mov ax [ebx] +
add ebx 2 +
cmp ax 10Eh +
jnb loc_102428A  +
jmp $+2  +
pop eax  +
xor eax eax +
jmp loc_1024313  +
cmp edi [ebp+0] +
jnz loc_102430E  +
test eax eax +
jnz loc_102430E  +
mov eax 1 +
mov [ebp+arg_2C] eax +
mov eax 1 +
mov [ebp+arg_28] eax +
mov [ebp+arg_24] ebx +
mov [ebp+arg_8] edi +
pop ebp  +
pop ebx  +
pop ecx  +
pop edx  +
pop edi  +
pop esi  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 114Ch +
call __alloca_probe  +
mov eax dword_1049010 +
xor eax ebp +
mov [ebp+var_4] eax +
mov edx [ebp+arg_0] +
mov ecx [ebp+arg_10] +
push ebx  +
push esi  +
lea eax [ebp+var_1148] +
and eax 0FFh +
lea esi [ebp+var_1048] +
sub esi eax +
push edi  +
mov edi [ebp+arg_C] +
mov [esi+18h] edx +
mov edx [ebp+arg_8] +
cmp edi edx +
mov [ebp+var_114C] ecx +
jle loc_102437D  +
mov edi edx +
mov [ebp+arg_C] edi +
mov ebx [ebp+arg_14] +
cmp ebx edx +
jz loc_10244A1  +
test edi edi +
jz loc_10244A1  +
cmp edx ebx +
jl loc_102448B  +
test ebx ebx +
jl loc_102448B  +
cmp edx 105h +
jle loc_102448B  +
cmp ebx 105h +
jl loc_102448B  +
cmp edx 10000h +
jg loc_102448B  +
test edi edi +
jl loc_102448B  +
mov eax [ebp+arg_4] +
add edx eax +
add ecx ebx +
mov [esi] edx +
lea edx [eax+edi] +
lea edi [ecx-3] +
mov [esi+24h] edi +
mov edi edx +
lea ebx [ecx-1] +
sub edi eax +
mov [esi+4] eax +
mov [esi+0Ch] edx +
mov [esi+14h] ecx +
mov [esi+20h] ebx +
mov [esi+28h] ebx +
mov dword ptr [esi+1040h] offset unk_1049580 +
mov [esi+8] eax +
cmp edi 108h +
jbe loc_1024412  +
add edx 0FFFFFEF8h +
mov [esi+8] edx +
mov eax [ebp+arg_0] +
mov edx ecx +
sub edx eax +
mov [esi+1Ch] eax +
cmp edx 0E8h +
jbe loc_102442D  +
add ecx 0FFFFFF18h +
mov [esi+1Ch] ecx +
mov edi [ebp+var_114C] +
push edi  +
lea ebx [esi+3Ch] +
call sub_1023E00  +
test eax eax +
jz loc_102448B  +
add edi 100h +
mov [esi+18h] edi +
xor edi edi +
push esi  +
mov [esi+30h] edi +
mov [esi+34h] edi +
call sub_1023FC0  +
cmp [esi+30h] edi +
jz loc_102448B  +
mov eax [esi+0Ch] +
cmp [esi+10h] eax +
ja loc_102448B  +
mov ecx [esi+2Ch] +
cmp ecx [esi+14h] +
ja loc_102448B  +
cmp eax [esi] +
jnz loc_1024475  +
cmp [esi+34h] edi +
jz loc_102448B  +
mov eax [ebp+arg_C] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1010796  +
mov esp ebp +
pop ebp  +
retn 18h  +
pop edi  +
pop esi  +
or eax 0FFFFFFFFh +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1010796  +
mov esp ebp +
pop ebp  +
retn 18h  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010796  +
mov esp ebp +
pop ebp  +
retn 18h  +
***
mov eax 1 +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
push esi  +
xor esi esi +
cmp [ebp+hFile] 0FFFFFFFFh +
jz loc_102452D  +
push edi  +
push 8  +
xor eax eax +
pop ecx  +
mov [ebp+Buffer] esi +
lea edi [ebp+var_34] +
stos   +
mov [ebp+Overlapped.Internal] esi +
lea edi [ebp+Overlapped.InternalHigh] +
stos   +
stos   +
stos   +
stos   +
lea eax [ebp+Overlapped] +
push eax  +
push 24h  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+hFile]  +
call sub_101FCCF  +
pop edi  +
test eax eax +
jz loc_102452D  +
cmp [ebp+Buffer] 4643534Dh +
jnz loc_102452D  +
mov eax 103h +
cmp ax [ebp+var_20] +
jnz loc_102452D  +
inc esi  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
push ebx  +
push ebp  +
mov edx [esp+arg_4] +
sub esp 140h +
mov esi 10h +
lea ecx [esp+140h+var_144] +
mov eax [edx] +
add ecx 4 +
add edx 4 +
bswap eax  +
mov [ecx] eax +
dec esi  +
jnz loc_1024557  +
mov ebp [esp+140h+arg_0] +
lea ecx [esp+140h+var_138] +
mov edx 20h +
xor eax eax +
xor ebx ebx +
mov eax [ecx-8] +
mov ebx [ecx-4] +
mov esi [ecx] +
mov edi [ecx+4] +
xor eax esi +
xor ebx edi +
mov esi [ecx+18h] +
mov edi [ecx+1Ch] +
xor eax esi +
xor ebx edi +
mov esi [ecx+2Ch] +
mov edi [ecx+30h] +
xor eax esi +
add ecx 8 +
rol eax 1 +
xor ebx edi +
rol ebx 1 +
mov [ecx+30h] eax +
dec edx  +
mov [ecx+34h] ebx +
jnz loc_102457A  +
mov eax [ebp+0] +
mov ebx [ebp+4] +
mov ecx [ebp+8] +
mov edx [ebp+0Ch] +
mov edi [ebp+10h] +
mov ebp ecx +
xor ebp edx +
and ebp ebx +
mov esi eax +
rol esi 5 +
add edi esi +
mov esi [esp+140h+var_140] +
ror ebx 1 +
xor ebp edx +
ror ebx 1 +
lea edi [esi+edi+5A827999h] +
add edi ebp +
mov esi ebx +
xor esi ecx +
mov ebp edi +
rol ebp 5 +
and esi eax +
add edx ebp +
ror eax 1 +
mov ebp [esp+140h+var_13C] +
ror eax 1 +
xor esi ecx +
lea edx [ebp+edx+5A827999h] +
mov ebp eax +
add edx esi +
xor ebp ebx +
and ebp edi +
mov esi edx +
rol esi 5 +
add ecx esi +
mov esi [esp+140h+var_138] +
ror edi 1 +
xor ebp ebx +
ror edi 1 +
lea ecx [esi+ecx+5A827999h] +
add ecx ebp +
mov esi edi +
xor esi eax +
mov ebp ecx +
rol ebp 5 +
and esi edx +
add ebx ebp +
ror edx 1 +
mov ebp [esp+140h+var_134] +
ror edx 1 +
xor esi eax +
lea ebx [ebp+ebx+5A827999h] +
mov ebp edx +
add ebx esi +
xor ebp edi +
and ebp ecx +
mov esi ebx +
rol esi 5 +
add eax esi +
mov esi [esp+140h+var_130] +
ror ecx 1 +
xor ebp edi +
ror ecx 1 +
lea eax [esi+eax+5A827999h] +
add eax ebp +
mov esi ecx +
xor esi edx +
mov ebp eax +
rol ebp 5 +
and esi ebx +
add edi ebp +
ror ebx 1 +
mov ebp [esp+140h+var_12C] +
ror ebx 1 +
xor esi edx +
lea edi [ebp+edi+5A827999h] +
mov ebp ebx +
add edi esi +
xor ebp ecx +
and ebp eax +
mov esi edi +
rol esi 5 +
add edx esi +
mov esi [esp+140h+var_128] +
ror eax 1 +
xor ebp ecx +
ror eax 1 +
lea edx [esi+edx+5A827999h] +
add edx ebp +
mov esi eax +
xor esi ebx +
mov ebp edx +
rol ebp 5 +
and esi edi +
add ecx ebp +
ror edi 1 +
mov ebp [esp+140h+var_124] +
ror edi 1 +
xor esi ebx +
lea ecx [ebp+ecx+5A827999h] +
mov ebp edi +
add ecx esi +
xor ebp eax +
and ebp edx +
mov esi ecx +
rol esi 5 +
add ebx esi +
mov esi [esp+140h+var_120] +
ror edx 1 +
xor ebp eax +
ror edx 1 +
lea ebx [esi+ebx+5A827999h] +
add ebx ebp +
mov esi edx +
xor esi edi +
mov ebp ebx +
rol ebp 5 +
and esi ecx +
add eax ebp +
ror ecx 1 +
mov ebp [esp+140h+var_11C] +
ror ecx 1 +
xor esi edi +
lea eax [ebp+eax+5A827999h] +
mov ebp ecx +
add eax esi +
xor ebp edx +
and ebp ebx +
mov esi eax +
rol esi 5 +
add edi esi +
mov esi [esp+140h+var_118] +
ror ebx 1 +
xor ebp edx +
ror ebx 1 +
lea edi [esi+edi+5A827999h] +
add edi ebp +
mov esi ebx +
xor esi ecx +
mov ebp edi +
rol ebp 5 +
and esi eax +
add edx ebp +
ror eax 1 +
mov ebp [esp+140h+var_114] +
ror eax 1 +
xor esi ecx +
lea edx [ebp+edx+5A827999h] +
mov ebp eax +
add edx esi +
xor ebp ebx +
and ebp edi +
mov esi edx +
rol esi 5 +
add ecx esi +
mov esi [esp+140h+var_110] +
ror edi 1 +
xor ebp ebx +
ror edi 1 +
lea ecx [esi+ecx+5A827999h] +
add ecx ebp +
mov esi edi +
xor esi eax +
mov ebp ecx +
rol ebp 5 +
and esi edx +
add ebx ebp +
ror edx 1 +
mov ebp [esp+140h+var_10C] +
ror edx 1 +
xor esi eax +
lea ebx [ebp+ebx+5A827999h] +
mov ebp edx +
add ebx esi +
xor ebp edi +
and ebp ecx +
mov esi ebx +
rol esi 5 +
add eax esi +
mov esi [esp+140h+var_108] +
ror ecx 1 +
xor ebp edi +
ror ecx 1 +
lea eax [esi+eax+5A827999h] +
add eax ebp +
mov esi ecx +
xor esi edx +
mov ebp eax +
rol ebp 5 +
and esi ebx +
add edi ebp +
ror ebx 1 +
mov ebp [esp+140h+var_104] +
ror ebx 1 +
xor esi edx +
lea edi [ebp+edi+5A827999h] +
mov ebp ebx +
add edi esi +
xor ebp ecx +
and ebp eax +
mov esi edi +
rol esi 5 +
add edx esi +
mov esi [esp+140h+var_100] +
ror eax 1 +
xor ebp ecx +
ror eax 1 +
lea edx [esi+edx+5A827999h] +
add edx ebp +
mov esi eax +
xor esi ebx +
mov ebp edx +
rol ebp 5 +
and esi edi +
add ecx ebp +
ror edi 1 +
mov ebp [esp+140h+var_FC] +
ror edi 1 +
xor esi ebx +
lea ecx [ebp+ecx+5A827999h] +
mov ebp edi +
add ecx esi +
xor ebp eax +
and ebp edx +
mov esi ecx +
rol esi 5 +
add ebx esi +
mov esi [esp+140h+var_F8] +
ror edx 1 +
xor ebp eax +
ror edx 1 +
lea ebx [esi+ebx+5A827999h] +
add ebx ebp +
mov esi edx +
xor esi edi +
mov ebp ebx +
rol ebp 5 +
and esi ecx +
add eax ebp +
ror ecx 1 +
mov ebp [esp+140h+var_F4] +
ror ecx 1 +
xor esi edi +
lea eax [ebp+eax+5A827999h] +
mov ebp ecx +
add eax esi +
xor ebp ebx +
xor ebp edx +
mov esi eax +
rol esi 5 +
ror ebx 1 +
add edi esi +
ror ebx 1 +
mov esi [esp+140h+var_F0] +
lea edi [ebp+edi+6ED9EBA1h] +
mov ebp ebx +
add edi esi +
xor ebp eax +
xor ebp ecx +
mov esi edi +
rol esi 5 +
ror eax 1 +
add edx esi +
ror eax 1 +
mov esi [esp+140h+var_EC] +
lea edx [ebp+edx+6ED9EBA1h] +
mov ebp eax +
add edx esi +
xor ebp edi +
xor ebp ebx +
mov esi edx +
rol esi 5 +
ror edi 1 +
add ecx esi +
ror edi 1 +
mov esi [esp+140h+var_E8] +
lea ecx [ebp+ecx+6ED9EBA1h] +
mov ebp edi +
add ecx esi +
xor ebp edx +
xor ebp eax +
mov esi ecx +
rol esi 5 +
ror edx 1 +
add ebx esi +
ror edx 1 +
mov esi [esp+140h+var_E4] +
lea ebx [ebp+ebx+6ED9EBA1h] +
mov ebp edx +
add ebx esi +
xor ebp ecx +
xor ebp edi +
mov esi ebx +
rol esi 5 +
ror ecx 1 +
add eax esi +
ror ecx 1 +
mov esi [esp+140h+var_E0] +
lea eax [ebp+eax+6ED9EBA1h] +
mov ebp ecx +
add eax esi +
xor ebp ebx +
xor ebp edx +
mov esi eax +
rol esi 5 +
ror ebx 1 +
add edi esi +
ror ebx 1 +
mov esi [esp+140h+var_DC] +
lea edi [ebp+edi+6ED9EBA1h] +
mov ebp ebx +
add edi esi +
xor ebp eax +
xor ebp ecx +
mov esi edi +
rol esi 5 +
ror eax 1 +
add edx esi +
ror eax 1 +
mov esi [esp+140h+var_D8] +
lea edx [ebp+edx+6ED9EBA1h] +
mov ebp eax +
add edx esi +
xor ebp edi +
xor ebp ebx +
mov esi edx +
rol esi 5 +
ror edi 1 +
add ecx esi +
ror edi 1 +
mov esi [esp+140h+var_D4] +
lea ecx [ebp+ecx+6ED9EBA1h] +
mov ebp edi +
add ecx esi +
xor ebp edx +
xor ebp eax +
mov esi ecx +
rol esi 5 +
ror edx 1 +
add ebx esi +
ror edx 1 +
mov esi [esp+140h+var_D0] +
lea ebx [ebp+ebx+6ED9EBA1h] +
mov ebp edx +
add ebx esi +
xor ebp ecx +
xor ebp edi +
mov esi ebx +
rol esi 5 +
ror ecx 1 +
add eax esi +
ror ecx 1 +
mov esi [esp+140h+var_CC] +
lea eax [ebp+eax+6ED9EBA1h] +
mov ebp ecx +
add eax esi +
xor ebp ebx +
xor ebp edx +
mov esi eax +
rol esi 5 +
ror ebx 1 +
add edi esi +
ror ebx 1 +
mov esi [esp+140h+var_C8] +
lea edi [ebp+edi+6ED9EBA1h] +
mov ebp ebx +
add edi esi +
xor ebp eax +
xor ebp ecx +
mov esi edi +
rol esi 5 +
ror eax 1 +
add edx esi +
ror eax 1 +
mov esi [esp+140h+var_C4] +
lea edx [ebp+edx+6ED9EBA1h] +
mov ebp eax +
add edx esi +
xor ebp edi +
xor ebp ebx +
mov esi edx +
rol esi 5 +
ror edi 1 +
add ecx esi +
ror edi 1 +
mov esi [esp+140h+var_C0] +
lea ecx [ebp+ecx+6ED9EBA1h] +
mov ebp edi +
add ecx esi +
xor ebp edx +
xor ebp eax +
mov esi ecx +
rol esi 5 +
ror edx 1 +
add ebx esi +
ror edx 1 +
mov esi [esp+140h+var_BC] +
lea ebx [ebp+ebx+6ED9EBA1h] +
mov ebp edx +
add ebx esi +
xor ebp ecx +
xor ebp edi +
mov esi ebx +
rol esi 5 +
ror ecx 1 +
add eax esi +
ror ecx 1 +
mov esi [esp+140h+var_B8] +
lea eax [ebp+eax+6ED9EBA1h] +
mov ebp ecx +
add eax esi +
xor ebp ebx +
xor ebp edx +
mov esi eax +
rol esi 5 +
ror ebx 1 +
add edi esi +
ror ebx 1 +
mov esi [esp+140h+var_B4] +
lea edi [ebp+edi+6ED9EBA1h] +
mov ebp ebx +
add edi esi +
xor ebp eax +
xor ebp ecx +
mov esi edi +
rol esi 5 +
ror eax 1 +
add edx esi +
ror eax 1 +
mov esi [esp+140h+var_B0] +
lea edx [ebp+edx+6ED9EBA1h] +
mov ebp eax +
add edx esi +
xor ebp edi +
xor ebp ebx +
mov esi edx +
rol esi 5 +
ror edi 1 +
add ecx esi +
ror edi 1 +
mov esi [esp+140h+var_AC] +
lea ecx [ebp+ecx+6ED9EBA1h] +
mov ebp edi +
add ecx esi +
xor ebp edx +
xor ebp eax +
mov esi ecx +
rol esi 5 +
ror edx 1 +
add ebx esi +
ror edx 1 +
mov esi [esp+140h+var_A8] +
lea ebx [ebp+ebx+6ED9EBA1h] +
mov ebp edx +
add ebx esi +
xor ebp ecx +
xor ebp edi +
mov esi ebx +
rol esi 5 +
ror ecx 1 +
add eax esi +
ror ecx 1 +
mov esi [esp+140h+var_A4] +
lea eax [ebp+eax+6ED9EBA1h] +
mov ebp ecx +
add eax esi +
mov ebp ebx +
mov esi eax +
or ebp ecx +
rol esi 5 +
and ebp edx +
add edi esi +
mov esi [esp+140h+var_A0] +
add edi esi +
mov esi ebx +
and esi ecx +
add edi 8F1BBCDCh +
ror ebx 1 +
or esi ebp +
ror ebx 1 +
add edi esi +
mov ebp eax +
mov esi edi +
rol esi 5 +
or ebp ebx +
add edx esi +
and ebp ecx +
mov esi [esp+140h+var_9C] +
add edx esi +
mov esi eax +
and esi ebx +
add edx 8F1BBCDCh +
ror eax 1 +
or esi ebp +
ror eax 1 +
add edx esi +
mov ebp edi +
mov esi edx +
rol esi 5 +
or ebp eax +
add ecx esi +
and ebp ebx +
mov esi [esp+140h+var_98] +
add ecx esi +
mov esi edi +
and esi eax +
add ecx 8F1BBCDCh +
ror edi 1 +
or esi ebp +
ror edi 1 +
add ecx esi +
mov ebp edx +
mov esi ecx +
rol esi 5 +
or ebp edi +
add ebx esi +
and ebp eax +
mov esi [esp+140h+var_94] +
add ebx esi +
mov esi edx +
and esi edi +
add ebx 8F1BBCDCh +
ror edx 1 +
or esi ebp +
ror edx 1 +
add ebx esi +
mov ebp ecx +
mov esi ebx +
rol esi 5 +
or ebp edx +
add eax esi +
and ebp edi +
mov esi [esp+140h+var_90] +
add eax esi +
mov esi ecx +
and esi edx +
add eax 8F1BBCDCh +
ror ecx 1 +
or esi ebp +
ror ecx 1 +
add eax esi +
mov ebp ebx +
mov esi eax +
rol esi 5 +
or ebp ecx +
add edi esi +
and ebp edx +
mov esi [esp+140h+var_8C] +
add edi esi +
mov esi ebx +
and esi ecx +
add edi 8F1BBCDCh +
ror ebx 1 +
or esi ebp +
ror ebx 1 +
add edi esi +
mov ebp eax +
mov esi edi +
rol esi 5 +
or ebp ebx +
add edx esi +
and ebp ecx +
mov esi [esp+140h+var_88] +
add edx esi +
mov esi eax +
and esi ebx +
add edx 8F1BBCDCh +
ror eax 1 +
or esi ebp +
ror eax 1 +
add edx esi +
mov ebp edi +
mov esi edx +
rol esi 5 +
or ebp eax +
add ecx esi +
and ebp ebx +
mov esi [esp+140h+var_84] +
add ecx esi +
mov esi edi +
and esi eax +
add ecx 8F1BBCDCh +
ror edi 1 +
or esi ebp +
ror edi 1 +
add ecx esi +
mov ebp edx +
mov esi ecx +
rol esi 5 +
or ebp edi +
add ebx esi +
and ebp eax +
mov esi [esp+140h+var_80] +
add ebx esi +
mov esi edx +
and esi edi +
add ebx 8F1BBCDCh +
ror edx 1 +
or esi ebp +
ror edx 1 +
add ebx esi +
mov ebp ecx +
mov esi ebx +
rol esi 5 +
or ebp edx +
add eax esi +
and ebp edi +
mov esi [esp+140h+var_7C] +
add eax esi +
mov esi ecx +
and esi edx +
add eax 8F1BBCDCh +
ror ecx 1 +
or esi ebp +
ror ecx 1 +
add eax esi +
mov ebp ebx +
mov esi eax +
rol esi 5 +
or ebp ecx +
add edi esi +
and ebp edx +
mov esi [esp+140h+var_78] +
add edi esi +
mov esi ebx +
and esi ecx +
add edi 8F1BBCDCh +
ror ebx 1 +
or esi ebp +
ror ebx 1 +
add edi esi +
mov ebp eax +
mov esi edi +
rol esi 5 +
or ebp ebx +
add edx esi +
and ebp ecx +
mov esi [esp+140h+var_74] +
add edx esi +
mov esi eax +
and esi ebx +
add edx 8F1BBCDCh +
ror eax 1 +
or esi ebp +
ror eax 1 +
add edx esi +
mov ebp edi +
mov esi edx +
rol esi 5 +
or ebp eax +
add ecx esi +
and ebp ebx +
mov esi [esp+140h+var_70] +
add ecx esi +
mov esi edi +
and esi eax +
add ecx 8F1BBCDCh +
ror edi 1 +
or esi ebp +
ror edi 1 +
add ecx esi +
mov ebp edx +
mov esi ecx +
rol esi 5 +
or ebp edi +
add ebx esi +
and ebp eax +
mov esi [esp+140h+var_6C] +
add ebx esi +
mov esi edx +
and esi edi +
add ebx 8F1BBCDCh +
ror edx 1 +
or esi ebp +
ror edx 1 +
add ebx esi +
mov ebp ecx +
mov esi ebx +
rol esi 5 +
or ebp edx +
add eax esi +
and ebp edi +
mov esi [esp+140h+var_68] +
add eax esi +
mov esi ecx +
and esi edx +
add eax 8F1BBCDCh +
ror ecx 1 +
or esi ebp +
ror ecx 1 +
add eax esi +
mov ebp ebx +
mov esi eax +
rol esi 5 +
or ebp ecx +
add edi esi +
and ebp edx +
mov esi [esp+140h+var_64] +
add edi esi +
mov esi ebx +
and esi ecx +
add edi 8F1BBCDCh +
ror ebx 1 +
or esi ebp +
ror ebx 1 +
add edi esi +
mov ebp eax +
mov esi edi +
rol esi 5 +
or ebp ebx +
add edx esi +
and ebp ecx +
mov esi [esp+140h+var_60] +
add edx esi +
mov esi eax +
and esi ebx +
add edx 8F1BBCDCh +
ror eax 1 +
or esi ebp +
ror eax 1 +
add edx esi +
mov ebp edi +
mov esi edx +
rol esi 5 +
or ebp eax +
add ecx esi +
and ebp ebx +
mov esi [esp+140h+var_5C] +
add ecx esi +
mov esi edi +
and esi eax +
add ecx 8F1BBCDCh +
ror edi 1 +
or esi ebp +
ror edi 1 +
add ecx esi +
mov ebp edx +
mov esi ecx +
rol esi 5 +
or ebp edi +
add ebx esi +
and ebp eax +
mov esi [esp+140h+var_58] +
add ebx esi +
mov esi edx +
and esi edi +
add ebx 8F1BBCDCh +
ror edx 1 +
or esi ebp +
ror edx 1 +
add ebx esi +
mov ebp ecx +
mov esi ebx +
rol esi 5 +
or ebp edx +
add eax esi +
and ebp edi +
mov esi [esp+140h+var_54] +
add eax esi +
mov esi ecx +
and esi edx +
add eax 8F1BBCDCh +
ror ecx 1 +
or esi ebp +
ror ecx 1 +
add eax esi +
mov ebp ecx +
xor ebp ebx +
xor ebp edx +
mov esi eax +
rol esi 5 +
ror ebx 1 +
add edi esi +
ror ebx 1 +
mov esi [esp+140h+var_50] +
lea edi [ebp+edi-359D3E2Ah] +
mov ebp ebx +
add edi esi +
xor ebp eax +
xor ebp ecx +
mov esi edi +
rol esi 5 +
ror eax 1 +
add edx esi +
ror eax 1 +
mov esi [esp+140h+var_4C] +
lea edx [ebp+edx-359D3E2Ah] +
mov ebp eax +
add edx esi +
xor ebp edi +
xor ebp ebx +
mov esi edx +
rol esi 5 +
ror edi 1 +
add ecx esi +
ror edi 1 +
mov esi [esp+140h+var_48] +
lea ecx [ebp+ecx-359D3E2Ah] +
mov ebp edi +
add ecx esi +
xor ebp edx +
xor ebp eax +
mov esi ecx +
rol esi 5 +
ror edx 1 +
add ebx esi +
ror edx 1 +
mov esi [esp+140h+var_44] +
lea ebx [ebp+ebx-359D3E2Ah] +
mov ebp edx +
add ebx esi +
xor ebp ecx +
xor ebp edi +
mov esi ebx +
rol esi 5 +
ror ecx 1 +
add eax esi +
ror ecx 1 +
mov esi [esp+140h+var_40] +
lea eax [ebp+eax-359D3E2Ah] +
mov ebp ecx +
add eax esi +
xor ebp ebx +
xor ebp edx +
mov esi eax +
rol esi 5 +
ror ebx 1 +
add edi esi +
ror ebx 1 +
mov esi [esp+140h+var_3C] +
lea edi [ebp+edi-359D3E2Ah] +
mov ebp ebx +
add edi esi +
xor ebp eax +
xor ebp ecx +
mov esi edi +
rol esi 5 +
ror eax 1 +
add edx esi +
ror eax 1 +
mov esi [esp+140h+var_38] +
lea edx [ebp+edx-359D3E2Ah] +
mov ebp eax +
add edx esi +
xor ebp edi +
xor ebp ebx +
mov esi edx +
rol esi 5 +
ror edi 1 +
add ecx esi +
ror edi 1 +
mov esi [esp+140h+var_34] +
lea ecx [ebp+ecx-359D3E2Ah] +
mov ebp edi +
add ecx esi +
xor ebp edx +
xor ebp eax +
mov esi ecx +
rol esi 5 +
ror edx 1 +
add ebx esi +
ror edx 1 +
mov esi [esp+140h+var_30] +
lea ebx [ebp+ebx-359D3E2Ah] +
mov ebp edx +
add ebx esi +
xor ebp ecx +
xor ebp edi +
mov esi ebx +
rol esi 5 +
ror ecx 1 +
add eax esi +
ror ecx 1 +
mov esi [esp+140h+var_2C] +
lea eax [ebp+eax-359D3E2Ah] +
mov ebp ecx +
add eax esi +
xor ebp ebx +
xor ebp edx +
mov esi eax +
rol esi 5 +
ror ebx 1 +
add edi esi +
ror ebx 1 +
mov esi [esp+140h+var_28] +
lea edi [ebp+edi-359D3E2Ah] +
mov ebp ebx +
add edi esi +
xor ebp eax +
xor ebp ecx +
mov esi edi +
rol esi 5 +
ror eax 1 +
add edx esi +
ror eax 1 +
mov esi [esp+140h+var_24] +
lea edx [ebp+edx-359D3E2Ah] +
mov ebp eax +
add edx esi +
xor ebp edi +
xor ebp ebx +
mov esi edx +
rol esi 5 +
ror edi 1 +
add ecx esi +
ror edi 1 +
mov esi [esp+140h+var_20] +
lea ecx [ebp+ecx-359D3E2Ah] +
mov ebp edi +
add ecx esi +
xor ebp edx +
xor ebp eax +
mov esi ecx +
rol esi 5 +
ror edx 1 +
add ebx esi +
ror edx 1 +
mov esi [esp+140h+var_1C] +
lea ebx [ebp+ebx-359D3E2Ah] +
mov ebp edx +
add ebx esi +
xor ebp ecx +
xor ebp edi +
mov esi ebx +
rol esi 5 +
ror ecx 1 +
add eax esi +
ror ecx 1 +
mov esi [esp+140h+var_18] +
lea eax [ebp+eax-359D3E2Ah] +
mov ebp ecx +
add eax esi +
xor ebp ebx +
xor ebp edx +
mov esi eax +
rol esi 5 +
ror ebx 1 +
add edi esi +
ror ebx 1 +
mov esi [esp+140h+var_14] +
lea edi [ebp+edi-359D3E2Ah] +
mov ebp ebx +
add edi esi +
xor ebp eax +
xor ebp ecx +
mov esi edi +
rol esi 5 +
ror eax 1 +
add edx esi +
ror eax 1 +
mov esi [esp+140h+var_10] +
lea edx [ebp+edx-359D3E2Ah] +
mov ebp eax +
add edx esi +
xor ebp edi +
xor ebp ebx +
mov esi edx +
rol esi 5 +
ror edi 1 +
add ecx esi +
ror edi 1 +
mov esi [esp+140h+var_C] +
lea ecx [ebp+ecx-359D3E2Ah] +
mov ebp edi +
add ecx esi +
xor ebp edx +
xor ebp eax +
mov esi ecx +
rol esi 5 +
ror edx 1 +
add ebx esi +
ror edx 1 +
mov esi [esp+140h+var_8] +
lea ebx [ebp+ebx-359D3E2Ah] +
mov ebp edx +
add ebx esi +
xor ebp ecx +
xor ebp edi +
mov esi ebx +
rol esi 5 +
ror ecx 1 +
add eax esi +
ror ecx 1 +
mov esi [esp+140h+var_4] +
add eax 0CA62C1D6h +
add esi ebp +
add eax esi +
mov esi [esp+140h+arg_0] +
add esp 140h +
mov ebp [esi] +
add eax ebp +
mov ebp [esi+4] +
add ebx ebp +
mov ebp [esi+8] +
add ecx ebp +
mov ebp [esi+0Ch] +
add edx ebp +
mov ebp [esi+10h] +
add edi ebp +
mov [esi] eax +
mov [esi+4] ebx +
mov [esi+8] ecx +
mov [esi+0Ch] edx +
mov [esi+10h] edi +
pop ebp  +
pop ebx  +
pop edi  +
pop esi  +
retn 8  +
***
push ebx  +
push ebp  +
sub esp 140h +
mov ebp [esp+140h+arg_0] +
mov eax [ebp+0] +
mov ebx [ebp+4] +
mov ecx [ebp+8] +
mov edx [ebp+0Ch] +
mov edi [ebp+10h] +
mov ebp [esp+140h+arg_4] +
mov esi [ebp+0] +
bswap esi  +
mov [esp+140h+var_140] esi +
add edi esi +
mov esi eax +
rol esi 5 +
lea edi [edi+esi+5A827999h] +
mov esi ecx +
xor esi edx +
and esi ebx +
xor esi edx +
ror ebx 2 +
add edi esi +
mov esi [ebp+4] +
bswap esi  +
mov [esp+140h+var_13C] esi +
add edx esi +
mov esi edi +
rol esi 5 +
lea edx [edx+esi+5A827999h] +
mov esi ebx +
xor esi ecx +
and esi eax +
xor esi ecx +
ror eax 2 +
add edx esi +
mov esi [ebp+8] +
bswap esi  +
mov [esp+140h+var_138] esi +
add ecx esi +
mov esi edx +
rol esi 5 +
lea ecx [ecx+esi+5A827999h] +
mov esi eax +
xor esi ebx +
and esi edi +
xor esi ebx +
ror edi 2 +
add ecx esi +
mov esi [ebp+0Ch] +
bswap esi  +
mov [esp+140h+var_134] esi +
add ebx esi +
mov esi ecx +
rol esi 5 +
lea ebx [ebx+esi+5A827999h] +
mov esi edi +
xor esi eax +
and esi edx +
xor esi eax +
ror edx 2 +
add ebx esi +
mov esi [ebp+10h] +
bswap esi  +
mov [esp+140h+var_130] esi +
add eax esi +
mov esi ebx +
rol esi 5 +
lea eax [eax+esi+5A827999h] +
mov esi edx +
xor esi edi +
and esi ecx +
xor esi edi +
ror ecx 2 +
add eax esi +
mov esi [ebp+14h] +
bswap esi  +
mov [esp+140h+var_12C] esi +
add edi esi +
mov esi eax +
rol esi 5 +
lea edi [edi+esi+5A827999h] +
mov esi ecx +
xor esi edx +
and esi ebx +
xor esi edx +
ror ebx 2 +
add edi esi +
mov esi [ebp+18h] +
bswap esi  +
mov [esp+140h+var_128] esi +
add edx esi +
mov esi edi +
rol esi 5 +
lea edx [edx+esi+5A827999h] +
mov esi ebx +
xor esi ecx +
and esi eax +
xor esi ecx +
ror eax 2 +
add edx esi +
mov esi [ebp+1Ch] +
bswap esi  +
mov [esp+140h+var_124] esi +
add ecx esi +
mov esi edx +
rol esi 5 +
lea ecx [ecx+esi+5A827999h] +
mov esi eax +
xor esi ebx +
and esi edi +
xor esi ebx +
ror edi 2 +
add ecx esi +
mov esi [ebp+20h] +
bswap esi  +
mov [esp+140h+var_120] esi +
add ebx esi +
mov esi ecx +
rol esi 5 +
lea ebx [ebx+esi+5A827999h] +
mov esi edi +
xor esi eax +
and esi edx +
xor esi eax +
ror edx 2 +
add ebx esi +
mov esi [ebp+24h] +
bswap esi  +
mov [esp+140h+var_11C] esi +
add eax esi +
mov esi ebx +
rol esi 5 +
lea eax [eax+esi+5A827999h] +
mov esi edx +
xor esi edi +
and esi ecx +
xor esi edi +
ror ecx 2 +
add eax esi +
mov esi [ebp+28h] +
bswap esi  +
mov [esp+140h+var_118] esi +
add edi esi +
mov esi eax +
rol esi 5 +
lea edi [edi+esi+5A827999h] +
mov esi ecx +
xor esi edx +
and esi ebx +
xor esi edx +
ror ebx 2 +
add edi esi +
mov esi [ebp+2Ch] +
bswap esi  +
mov [esp+140h+var_114] esi +
add edx esi +
mov esi edi +
rol esi 5 +
lea edx [edx+esi+5A827999h] +
mov esi ebx +
xor esi ecx +
and esi eax +
xor esi ecx +
ror eax 2 +
add edx esi +
mov esi [ebp+30h] +
bswap esi  +
mov [esp+140h+var_110] esi +
add ecx esi +
mov esi edx +
rol esi 5 +
lea ecx [ecx+esi+5A827999h] +
mov esi eax +
xor esi ebx +
and esi edi +
xor esi ebx +
ror edi 2 +
add ecx esi +
mov esi [ebp+34h] +
bswap esi  +
mov [esp+140h+var_10C] esi +
add ebx esi +
mov esi ecx +
rol esi 5 +
lea ebx [ebx+esi+5A827999h] +
mov esi edi +
xor esi eax +
and esi edx +
xor esi eax +
ror edx 2 +
add ebx esi +
mov esi [ebp+38h] +
bswap esi  +
mov [esp+140h+var_108] esi +
add eax esi +
mov esi ebx +
rol esi 5 +
lea eax [eax+esi+5A827999h] +
mov esi edx +
xor esi edi +
and esi ecx +
xor esi edi +
ror ecx 2 +
add eax esi +
mov esi [ebp+3Ch] +
bswap esi  +
mov [esp+140h+var_104] esi +
add edi esi +
mov esi eax +
rol esi 5 +
lea edi [edi+esi+5A827999h] +
mov esi ecx +
xor esi edx +
and esi ebx +
xor esi edx +
ror ebx 2 +
add edi esi +
mov esi [esp+140h+var_140] +
mov ebp [esp+140h+var_138] +
xor esi ebp +
mov ebp [esp+140h+var_120] +
xor esi ebp +
mov ebp [esp+140h+var_10C] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_100] esi +
mov ebp edi +
rol ebp 5 +
lea edx [edx+ebp+5A827999h] +
add edx esi +
mov ebp ebx +
xor ebp ecx +
and ebp eax +
xor ebp ecx +
ror eax 2 +
add edx ebp +
mov esi [esp+140h+var_13C] +
mov ebp [esp+140h+var_134] +
xor esi ebp +
mov ebp [esp+140h+var_11C] +
xor esi ebp +
mov ebp [esp+140h+var_108] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_FC] esi +
mov ebp edx +
rol ebp 5 +
lea ecx [ecx+ebp+5A827999h] +
add ecx esi +
mov ebp eax +
xor ebp ebx +
and ebp edi +
xor ebp ebx +
ror edi 2 +
add ecx ebp +
mov esi [esp+140h+var_138] +
mov ebp [esp+140h+var_130] +
xor esi ebp +
mov ebp [esp+140h+var_118] +
xor esi ebp +
mov ebp [esp+140h+var_104] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_F8] esi +
mov ebp ecx +
rol ebp 5 +
lea ebx [ebx+ebp+5A827999h] +
add ebx esi +
mov ebp edi +
xor ebp eax +
and ebp edx +
xor ebp eax +
ror edx 2 +
add ebx ebp +
mov esi [esp+140h+var_134] +
mov ebp [esp+140h+var_12C] +
xor esi ebp +
mov ebp [esp+140h+var_114] +
xor esi ebp +
mov ebp [esp+140h+var_100] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_F4] esi +
mov ebp ebx +
rol ebp 5 +
lea eax [eax+ebp+5A827999h] +
add eax esi +
mov ebp edx +
xor ebp edi +
and ebp ecx +
xor ebp edi +
ror ecx 2 +
add eax ebp +
mov esi [esp+140h+var_130] +
mov ebp [esp+140h+var_128] +
xor esi ebp +
mov ebp [esp+140h+var_110] +
xor esi ebp +
mov ebp [esp+140h+var_FC] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_F0] esi +
mov ebp eax +
rol ebp 5 +
lea edi [edi+ebp+6ED9EBA1h] +
add edi esi +
mov ebp ebx +
xor ebp ecx +
xor ebp edx +
ror ebx 2 +
add edi ebp +
mov esi [esp+140h+var_12C] +
mov ebp [esp+140h+var_124] +
xor esi ebp +
mov ebp [esp+140h+var_10C] +
xor esi ebp +
mov ebp [esp+140h+var_F8] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_EC] esi +
mov ebp edi +
rol ebp 5 +
lea edx [edx+ebp+6ED9EBA1h] +
add edx esi +
mov ebp eax +
xor ebp ebx +
xor ebp ecx +
ror eax 2 +
add edx ebp +
mov esi [esp+140h+var_128] +
mov ebp [esp+140h+var_120] +
xor esi ebp +
mov ebp [esp+140h+var_108] +
xor esi ebp +
mov ebp [esp+140h+var_F4] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_E8] esi +
mov ebp edx +
rol ebp 5 +
lea ecx [ecx+ebp+6ED9EBA1h] +
add ecx esi +
mov ebp edi +
xor ebp eax +
xor ebp ebx +
ror edi 2 +
add ecx ebp +
mov esi [esp+140h+var_124] +
mov ebp [esp+140h+var_11C] +
xor esi ebp +
mov ebp [esp+140h+var_104] +
xor esi ebp +
mov ebp [esp+140h+var_F0] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_E4] esi +
mov ebp ecx +
rol ebp 5 +
lea ebx [ebx+ebp+6ED9EBA1h] +
add ebx esi +
mov ebp edx +
xor ebp edi +
xor ebp eax +
ror edx 2 +
add ebx ebp +
mov esi [esp+140h+var_120] +
mov ebp [esp+140h+var_118] +
xor esi ebp +
mov ebp [esp+140h+var_100] +
xor esi ebp +
mov ebp [esp+140h+var_EC] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_E0] esi +
mov ebp ebx +
rol ebp 5 +
lea eax [eax+ebp+6ED9EBA1h] +
add eax esi +
mov ebp ecx +
xor ebp edx +
xor ebp edi +
ror ecx 2 +
add eax ebp +
mov esi [esp+140h+var_11C] +
mov ebp [esp+140h+var_114] +
xor esi ebp +
mov ebp [esp+140h+var_FC] +
xor esi ebp +
mov ebp [esp+140h+var_E8] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_DC] esi +
mov ebp eax +
rol ebp 5 +
lea edi [edi+ebp+6ED9EBA1h] +
add edi esi +
mov ebp ebx +
xor ebp ecx +
xor ebp edx +
ror ebx 2 +
add edi ebp +
mov esi [esp+140h+var_118] +
mov ebp [esp+140h+var_110] +
xor esi ebp +
mov ebp [esp+140h+var_F8] +
xor esi ebp +
mov ebp [esp+140h+var_E4] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_D8] esi +
mov ebp edi +
rol ebp 5 +
lea edx [edx+ebp+6ED9EBA1h] +
add edx esi +
mov ebp eax +
xor ebp ebx +
xor ebp ecx +
ror eax 2 +
add edx ebp +
mov esi [esp+140h+var_114] +
mov ebp [esp+140h+var_10C] +
xor esi ebp +
mov ebp [esp+140h+var_F4] +
xor esi ebp +
mov ebp [esp+140h+var_E0] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_D4] esi +
mov ebp edx +
rol ebp 5 +
lea ecx [ecx+ebp+6ED9EBA1h] +
add ecx esi +
mov ebp edi +
xor ebp eax +
xor ebp ebx +
ror edi 2 +
add ecx ebp +
mov esi [esp+140h+var_110] +
mov ebp [esp+140h+var_108] +
xor esi ebp +
mov ebp [esp+140h+var_F0] +
xor esi ebp +
mov ebp [esp+140h+var_DC] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_D0] esi +
mov ebp ecx +
rol ebp 5 +
lea ebx [ebx+ebp+6ED9EBA1h] +
add ebx esi +
mov ebp edx +
xor ebp edi +
xor ebp eax +
ror edx 2 +
add ebx ebp +
mov esi [esp+140h+var_10C] +
mov ebp [esp+140h+var_104] +
xor esi ebp +
mov ebp [esp+140h+var_EC] +
xor esi ebp +
mov ebp [esp+140h+var_D8] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_CC] esi +
mov ebp ebx +
rol ebp 5 +
lea eax [eax+ebp+6ED9EBA1h] +
add eax esi +
mov ebp ecx +
xor ebp edx +
xor ebp edi +
ror ecx 2 +
add eax ebp +
mov esi [esp+140h+var_108] +
mov ebp [esp+140h+var_100] +
xor esi ebp +
mov ebp [esp+140h+var_E8] +
xor esi ebp +
mov ebp [esp+140h+var_D4] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_C8] esi +
mov ebp eax +
rol ebp 5 +
lea edi [edi+ebp+6ED9EBA1h] +
add edi esi +
mov ebp ebx +
xor ebp ecx +
xor ebp edx +
ror ebx 2 +
add edi ebp +
mov esi [esp+140h+var_104] +
mov ebp [esp+140h+var_FC] +
xor esi ebp +
mov ebp [esp+140h+var_E4] +
xor esi ebp +
mov ebp [esp+140h+var_D0] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_C4] esi +
mov ebp edi +
rol ebp 5 +
lea edx [edx+ebp+6ED9EBA1h] +
add edx esi +
mov ebp eax +
xor ebp ebx +
xor ebp ecx +
ror eax 2 +
add edx ebp +
mov esi [esp+140h+var_100] +
mov ebp [esp+140h+var_F8] +
xor esi ebp +
mov ebp [esp+140h+var_E0] +
xor esi ebp +
mov ebp [esp+140h+var_CC] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_C0] esi +
mov ebp edx +
rol ebp 5 +
lea ecx [ecx+ebp+6ED9EBA1h] +
add ecx esi +
mov ebp edi +
xor ebp eax +
xor ebp ebx +
ror edi 2 +
add ecx ebp +
mov esi [esp+140h+var_FC] +
mov ebp [esp+140h+var_F4] +
xor esi ebp +
mov ebp [esp+140h+var_DC] +
xor esi ebp +
mov ebp [esp+140h+var_C8] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_BC] esi +
mov ebp ecx +
rol ebp 5 +
lea ebx [ebx+ebp+6ED9EBA1h] +
add ebx esi +
mov ebp edx +
xor ebp edi +
xor ebp eax +
ror edx 2 +
add ebx ebp +
mov esi [esp+140h+var_F8] +
mov ebp [esp+140h+var_F0] +
xor esi ebp +
mov ebp [esp+140h+var_D8] +
xor esi ebp +
mov ebp [esp+140h+var_C4] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_B8] esi +
mov ebp ebx +
rol ebp 5 +
lea eax [eax+ebp+6ED9EBA1h] +
add eax esi +
mov ebp ecx +
xor ebp edx +
xor ebp edi +
ror ecx 2 +
add eax ebp +
mov esi [esp+140h+var_F4] +
mov ebp [esp+140h+var_EC] +
xor esi ebp +
mov ebp [esp+140h+var_D4] +
xor esi ebp +
mov ebp [esp+140h+var_C0] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_B4] esi +
mov ebp eax +
rol ebp 5 +
lea edi [edi+ebp+6ED9EBA1h] +
add edi esi +
mov ebp ebx +
xor ebp ecx +
xor ebp edx +
ror ebx 2 +
add edi ebp +
mov esi [esp+140h+var_F0] +
mov ebp [esp+140h+var_E8] +
xor esi ebp +
mov ebp [esp+140h+var_D0] +
xor esi ebp +
mov ebp [esp+140h+var_BC] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_B0] esi +
mov ebp edi +
rol ebp 5 +
lea edx [edx+ebp+6ED9EBA1h] +
add edx esi +
mov ebp eax +
xor ebp ebx +
xor ebp ecx +
ror eax 2 +
add edx ebp +
mov esi [esp+140h+var_EC] +
mov ebp [esp+140h+var_E4] +
xor esi ebp +
mov ebp [esp+140h+var_CC] +
xor esi ebp +
mov ebp [esp+140h+var_B8] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_AC] esi +
mov ebp edx +
rol ebp 5 +
lea ecx [ecx+ebp+6ED9EBA1h] +
add ecx esi +
mov ebp edi +
xor ebp eax +
xor ebp ebx +
ror edi 2 +
add ecx ebp +
mov esi [esp+140h+var_E8] +
mov ebp [esp+140h+var_E0] +
xor esi ebp +
mov ebp [esp+140h+var_C8] +
xor esi ebp +
mov ebp [esp+140h+var_B4] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_A8] esi +
mov ebp ecx +
rol ebp 5 +
lea ebx [ebx+ebp+6ED9EBA1h] +
add ebx esi +
mov ebp edx +
xor ebp edi +
xor ebp eax +
ror edx 2 +
add ebx ebp +
mov esi [esp+140h+var_E4] +
mov ebp [esp+140h+var_DC] +
xor esi ebp +
mov ebp [esp+140h+var_C4] +
xor esi ebp +
mov ebp [esp+140h+var_B0] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_A4] esi +
mov ebp ebx +
rol ebp 5 +
lea eax [eax+ebp+6ED9EBA1h] +
add eax esi +
mov ebp ecx +
xor ebp edx +
xor ebp edi +
ror ecx 2 +
add eax ebp +
mov esi [esp+140h+var_E0] +
mov ebp [esp+140h+var_D8] +
xor esi ebp +
mov ebp [esp+140h+var_C0] +
xor esi ebp +
mov ebp [esp+140h+var_AC] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_A0] esi +
mov ebp eax +
rol ebp 5 +
lea edi [edi+ebp-70E44324h] +
add edi esi +
mov ebp ebx +
mov esi ebx +
and ebp ecx +
or esi ecx +
and esi edx +
or ebp esi +
ror ebx 2 +
add edi ebp +
mov esi [esp+140h+var_DC] +
mov ebp [esp+140h+var_D4] +
xor esi ebp +
mov ebp [esp+140h+var_BC] +
xor esi ebp +
mov ebp [esp+140h+var_A8] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_9C] esi +
mov ebp edi +
rol ebp 5 +
lea edx [edx+ebp-70E44324h] +
add edx esi +
mov ebp eax +
mov esi eax +
and ebp ebx +
or esi ebx +
and esi ecx +
or ebp esi +
ror eax 2 +
add edx ebp +
mov esi [esp+140h+var_D8] +
mov ebp [esp+140h+var_D0] +
xor esi ebp +
mov ebp [esp+140h+var_B8] +
xor esi ebp +
mov ebp [esp+140h+var_A4] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_98] esi +
mov ebp edx +
rol ebp 5 +
lea ecx [ecx+ebp-70E44324h] +
add ecx esi +
mov ebp edi +
mov esi edi +
and ebp eax +
or esi eax +
and esi ebx +
or ebp esi +
ror edi 2 +
add ecx ebp +
mov esi [esp+140h+var_D4] +
mov ebp [esp+140h+var_CC] +
xor esi ebp +
mov ebp [esp+140h+var_B4] +
xor esi ebp +
mov ebp [esp+140h+var_A0] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_94] esi +
mov ebp ecx +
rol ebp 5 +
lea ebx [ebx+ebp-70E44324h] +
add ebx esi +
mov ebp edx +
mov esi edx +
and ebp edi +
or esi edi +
and esi eax +
or ebp esi +
ror edx 2 +
add ebx ebp +
mov esi [esp+140h+var_D0] +
mov ebp [esp+140h+var_C8] +
xor esi ebp +
mov ebp [esp+140h+var_B0] +
xor esi ebp +
mov ebp [esp+140h+var_9C] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_90] esi +
mov ebp ebx +
rol ebp 5 +
lea eax [eax+ebp-70E44324h] +
add eax esi +
mov ebp ecx +
mov esi ecx +
and ebp edx +
or esi edx +
and esi edi +
or ebp esi +
ror ecx 2 +
add eax ebp +
mov esi [esp+140h+var_CC] +
mov ebp [esp+140h+var_C4] +
xor esi ebp +
mov ebp [esp+140h+var_AC] +
xor esi ebp +
mov ebp [esp+140h+var_98] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_8C] esi +
mov ebp eax +
rol ebp 5 +
lea edi [edi+ebp-70E44324h] +
add edi esi +
mov ebp ebx +
mov esi ebx +
and ebp ecx +
or esi ecx +
and esi edx +
or ebp esi +
ror ebx 2 +
add edi ebp +
mov esi [esp+140h+var_C8] +
mov ebp [esp+140h+var_C0] +
xor esi ebp +
mov ebp [esp+140h+var_A8] +
xor esi ebp +
mov ebp [esp+140h+var_94] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_88] esi +
mov ebp edi +
rol ebp 5 +
lea edx [edx+ebp-70E44324h] +
add edx esi +
mov ebp eax +
mov esi eax +
and ebp ebx +
or esi ebx +
and esi ecx +
or ebp esi +
ror eax 2 +
add edx ebp +
mov esi [esp+140h+var_C4] +
mov ebp [esp+140h+var_BC] +
xor esi ebp +
mov ebp [esp+140h+var_A4] +
xor esi ebp +
mov ebp [esp+140h+var_90] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_84] esi +
mov ebp edx +
rol ebp 5 +
lea ecx [ecx+ebp-70E44324h] +
add ecx esi +
mov ebp edi +
mov esi edi +
and ebp eax +
or esi eax +
and esi ebx +
or ebp esi +
ror edi 2 +
add ecx ebp +
mov esi [esp+140h+var_C0] +
mov ebp [esp+140h+var_B8] +
xor esi ebp +
mov ebp [esp+140h+var_A0] +
xor esi ebp +
mov ebp [esp+140h+var_8C] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_80] esi +
mov ebp ecx +
rol ebp 5 +
lea ebx [ebx+ebp-70E44324h] +
add ebx esi +
mov ebp edx +
mov esi edx +
and ebp edi +
or esi edi +
and esi eax +
or ebp esi +
ror edx 2 +
add ebx ebp +
mov esi [esp+140h+var_BC] +
mov ebp [esp+140h+var_B4] +
xor esi ebp +
mov ebp [esp+140h+var_9C] +
xor esi ebp +
mov ebp [esp+140h+var_88] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_7C] esi +
mov ebp ebx +
rol ebp 5 +
lea eax [eax+ebp-70E44324h] +
add eax esi +
mov ebp ecx +
mov esi ecx +
and ebp edx +
or esi edx +
and esi edi +
or ebp esi +
ror ecx 2 +
add eax ebp +
mov esi [esp+140h+var_B8] +
mov ebp [esp+140h+var_B0] +
xor esi ebp +
mov ebp [esp+140h+var_98] +
xor esi ebp +
mov ebp [esp+140h+var_84] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_78] esi +
mov ebp eax +
rol ebp 5 +
lea edi [edi+ebp-70E44324h] +
add edi esi +
mov ebp ebx +
mov esi ebx +
and ebp ecx +
or esi ecx +
and esi edx +
or ebp esi +
ror ebx 2 +
add edi ebp +
mov esi [esp+140h+var_B4] +
mov ebp [esp+140h+var_AC] +
xor esi ebp +
mov ebp [esp+140h+var_94] +
xor esi ebp +
mov ebp [esp+140h+var_80] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_74] esi +
mov ebp edi +
rol ebp 5 +
lea edx [edx+ebp-70E44324h] +
add edx esi +
mov ebp eax +
mov esi eax +
and ebp ebx +
or esi ebx +
and esi ecx +
or ebp esi +
ror eax 2 +
add edx ebp +
mov esi [esp+140h+var_B0] +
mov ebp [esp+140h+var_A8] +
xor esi ebp +
mov ebp [esp+140h+var_90] +
xor esi ebp +
mov ebp [esp+140h+var_7C] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_70] esi +
mov ebp edx +
rol ebp 5 +
lea ecx [ecx+ebp-70E44324h] +
add ecx esi +
mov ebp edi +
mov esi edi +
and ebp eax +
or esi eax +
and esi ebx +
or ebp esi +
ror edi 2 +
add ecx ebp +
mov esi [esp+140h+var_AC] +
mov ebp [esp+140h+var_A4] +
xor esi ebp +
mov ebp [esp+140h+var_8C] +
xor esi ebp +
mov ebp [esp+140h+var_78] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_6C] esi +
mov ebp ecx +
rol ebp 5 +
lea ebx [ebx+ebp-70E44324h] +
add ebx esi +
mov ebp edx +
mov esi edx +
and ebp edi +
or esi edi +
and esi eax +
or ebp esi +
ror edx 2 +
add ebx ebp +
mov esi [esp+140h+var_A8] +
mov ebp [esp+140h+var_A0] +
xor esi ebp +
mov ebp [esp+140h+var_88] +
xor esi ebp +
mov ebp [esp+140h+var_74] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_68] esi +
mov ebp ebx +
rol ebp 5 +
lea eax [eax+ebp-70E44324h] +
add eax esi +
mov ebp ecx +
mov esi ecx +
and ebp edx +
or esi edx +
and esi edi +
or ebp esi +
ror ecx 2 +
add eax ebp +
mov esi [esp+140h+var_A4] +
mov ebp [esp+140h+var_9C] +
xor esi ebp +
mov ebp [esp+140h+var_84] +
xor esi ebp +
mov ebp [esp+140h+var_70] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_64] esi +
mov ebp eax +
rol ebp 5 +
lea edi [edi+ebp-70E44324h] +
add edi esi +
mov ebp ebx +
mov esi ebx +
and ebp ecx +
or esi ecx +
and esi edx +
or ebp esi +
ror ebx 2 +
add edi ebp +
mov esi [esp+140h+var_A0] +
mov ebp [esp+140h+var_98] +
xor esi ebp +
mov ebp [esp+140h+var_80] +
xor esi ebp +
mov ebp [esp+140h+var_6C] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_60] esi +
mov ebp edi +
rol ebp 5 +
lea edx [edx+ebp-70E44324h] +
add edx esi +
mov ebp eax +
mov esi eax +
and ebp ebx +
or esi ebx +
and esi ecx +
or ebp esi +
ror eax 2 +
add edx ebp +
mov esi [esp+140h+var_9C] +
mov ebp [esp+140h+var_94] +
xor esi ebp +
mov ebp [esp+140h+var_7C] +
xor esi ebp +
mov ebp [esp+140h+var_68] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_5C] esi +
mov ebp edx +
rol ebp 5 +
lea ecx [ecx+ebp-70E44324h] +
add ecx esi +
mov ebp edi +
mov esi edi +
and ebp eax +
or esi eax +
and esi ebx +
or ebp esi +
ror edi 2 +
add ecx ebp +
mov esi [esp+140h+var_98] +
mov ebp [esp+140h+var_90] +
xor esi ebp +
mov ebp [esp+140h+var_78] +
xor esi ebp +
mov ebp [esp+140h+var_64] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_58] esi +
mov ebp ecx +
rol ebp 5 +
lea ebx [ebx+ebp-70E44324h] +
add ebx esi +
mov ebp edx +
mov esi edx +
and ebp edi +
or esi edi +
and esi eax +
or ebp esi +
ror edx 2 +
add ebx ebp +
mov esi [esp+140h+var_94] +
mov ebp [esp+140h+var_8C] +
xor esi ebp +
mov ebp [esp+140h+var_74] +
xor esi ebp +
mov ebp [esp+140h+var_60] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_54] esi +
mov ebp ebx +
rol ebp 5 +
lea eax [eax+ebp-70E44324h] +
add eax esi +
mov ebp ecx +
mov esi ecx +
and ebp edx +
or esi edx +
and esi edi +
or ebp esi +
ror ecx 2 +
add eax ebp +
mov esi [esp+140h+var_90] +
mov ebp [esp+140h+var_88] +
xor esi ebp +
mov ebp [esp+140h+var_70] +
xor esi ebp +
mov ebp [esp+140h+var_5C] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_50] esi +
mov ebp eax +
rol ebp 5 +
lea edi [edi+ebp-359D3E2Ah] +
add edi esi +
mov ebp ebx +
xor ebp ecx +
xor ebp edx +
ror ebx 2 +
add edi ebp +
mov esi [esp+140h+var_8C] +
mov ebp [esp+140h+var_84] +
xor esi ebp +
mov ebp [esp+140h+var_6C] +
xor esi ebp +
mov ebp [esp+140h+var_58] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_4C] esi +
mov ebp edi +
rol ebp 5 +
lea edx [edx+ebp-359D3E2Ah] +
add edx esi +
mov ebp eax +
xor ebp ebx +
xor ebp ecx +
ror eax 2 +
add edx ebp +
mov esi [esp+140h+var_88] +
mov ebp [esp+140h+var_80] +
xor esi ebp +
mov ebp [esp+140h+var_68] +
xor esi ebp +
mov ebp [esp+140h+var_54] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_48] esi +
mov ebp edx +
rol ebp 5 +
lea ecx [ecx+ebp-359D3E2Ah] +
add ecx esi +
mov ebp edi +
xor ebp eax +
xor ebp ebx +
ror edi 2 +
add ecx ebp +
mov esi [esp+140h+var_84] +
mov ebp [esp+140h+var_7C] +
xor esi ebp +
mov ebp [esp+140h+var_64] +
xor esi ebp +
mov ebp [esp+140h+var_50] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_44] esi +
mov ebp ecx +
rol ebp 5 +
lea ebx [ebx+ebp-359D3E2Ah] +
add ebx esi +
mov ebp edx +
xor ebp edi +
xor ebp eax +
ror edx 2 +
add ebx ebp +
mov esi [esp+140h+var_80] +
mov ebp [esp+140h+var_78] +
xor esi ebp +
mov ebp [esp+140h+var_60] +
xor esi ebp +
mov ebp [esp+140h+var_4C] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_40] esi +
mov ebp ebx +
rol ebp 5 +
lea eax [eax+ebp-359D3E2Ah] +
add eax esi +
mov ebp ecx +
xor ebp edx +
xor ebp edi +
ror ecx 2 +
add eax ebp +
mov esi [esp+140h+var_7C] +
mov ebp [esp+140h+var_74] +
xor esi ebp +
mov ebp [esp+140h+var_5C] +
xor esi ebp +
mov ebp [esp+140h+var_48] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_3C] esi +
mov ebp eax +
rol ebp 5 +
lea edi [edi+ebp-359D3E2Ah] +
add edi esi +
mov ebp ebx +
xor ebp ecx +
xor ebp edx +
ror ebx 2 +
add edi ebp +
mov esi [esp+140h+var_78] +
mov ebp [esp+140h+var_70] +
xor esi ebp +
mov ebp [esp+140h+var_58] +
xor esi ebp +
mov ebp [esp+140h+var_44] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_38] esi +
mov ebp edi +
rol ebp 5 +
lea edx [edx+ebp-359D3E2Ah] +
add edx esi +
mov ebp eax +
xor ebp ebx +
xor ebp ecx +
ror eax 2 +
add edx ebp +
mov esi [esp+140h+var_74] +
mov ebp [esp+140h+var_6C] +
xor esi ebp +
mov ebp [esp+140h+var_54] +
xor esi ebp +
mov ebp [esp+140h+var_40] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_34] esi +
mov ebp edx +
rol ebp 5 +
lea ecx [ecx+ebp-359D3E2Ah] +
add ecx esi +
mov ebp edi +
xor ebp eax +
xor ebp ebx +
ror edi 2 +
add ecx ebp +
mov esi [esp+140h+var_70] +
mov ebp [esp+140h+var_68] +
xor esi ebp +
mov ebp [esp+140h+var_50] +
xor esi ebp +
mov ebp [esp+140h+var_3C] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_30] esi +
mov ebp ecx +
rol ebp 5 +
lea ebx [ebx+ebp-359D3E2Ah] +
add ebx esi +
mov ebp edx +
xor ebp edi +
xor ebp eax +
ror edx 2 +
add ebx ebp +
mov esi [esp+140h+var_6C] +
mov ebp [esp+140h+var_64] +
xor esi ebp +
mov ebp [esp+140h+var_4C] +
xor esi ebp +
mov ebp [esp+140h+var_38] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_2C] esi +
mov ebp ebx +
rol ebp 5 +
lea eax [eax+ebp-359D3E2Ah] +
add eax esi +
mov ebp ecx +
xor ebp edx +
xor ebp edi +
ror ecx 2 +
add eax ebp +
mov esi [esp+140h+var_68] +
mov ebp [esp+140h+var_60] +
xor esi ebp +
mov ebp [esp+140h+var_48] +
xor esi ebp +
mov ebp [esp+140h+var_34] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_28] esi +
mov ebp eax +
rol ebp 5 +
lea edi [edi+ebp-359D3E2Ah] +
add edi esi +
mov ebp ebx +
xor ebp ecx +
xor ebp edx +
ror ebx 2 +
add edi ebp +
mov esi [esp+140h+var_64] +
mov ebp [esp+140h+var_5C] +
xor esi ebp +
mov ebp [esp+140h+var_44] +
xor esi ebp +
mov ebp [esp+140h+var_30] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_24] esi +
mov ebp edi +
rol ebp 5 +
lea edx [edx+ebp-359D3E2Ah] +
add edx esi +
mov ebp eax +
xor ebp ebx +
xor ebp ecx +
ror eax 2 +
add edx ebp +
mov esi [esp+140h+var_60] +
mov ebp [esp+140h+var_58] +
xor esi ebp +
mov ebp [esp+140h+var_40] +
xor esi ebp +
mov ebp [esp+140h+var_2C] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_20] esi +
mov ebp edx +
rol ebp 5 +
lea ecx [ecx+ebp-359D3E2Ah] +
add ecx esi +
mov ebp edi +
xor ebp eax +
xor ebp ebx +
ror edi 2 +
add ecx ebp +
mov esi [esp+140h+var_5C] +
mov ebp [esp+140h+var_54] +
xor esi ebp +
mov ebp [esp+140h+var_3C] +
xor esi ebp +
mov ebp [esp+140h+var_28] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_1C] esi +
mov ebp ecx +
rol ebp 5 +
lea ebx [ebx+ebp-359D3E2Ah] +
add ebx esi +
mov ebp edx +
xor ebp edi +
xor ebp eax +
ror edx 2 +
add ebx ebp +
mov esi [esp+140h+var_58] +
mov ebp [esp+140h+var_50] +
xor esi ebp +
mov ebp [esp+140h+var_38] +
xor esi ebp +
mov ebp [esp+140h+var_24] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_18] esi +
mov ebp ebx +
rol ebp 5 +
lea eax [eax+ebp-359D3E2Ah] +
add eax esi +
mov ebp ecx +
xor ebp edx +
xor ebp edi +
ror ecx 2 +
add eax ebp +
mov esi [esp+140h+var_54] +
mov ebp [esp+140h+var_4C] +
xor esi ebp +
mov ebp [esp+140h+var_34] +
xor esi ebp +
mov ebp [esp+140h+var_20] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_14] esi +
mov ebp eax +
rol ebp 5 +
lea edi [edi+ebp-359D3E2Ah] +
add edi esi +
mov ebp ebx +
xor ebp ecx +
xor ebp edx +
ror ebx 2 +
add edi ebp +
mov esi [esp+140h+var_50] +
mov ebp [esp+140h+var_48] +
xor esi ebp +
mov ebp [esp+140h+var_30] +
xor esi ebp +
mov ebp [esp+140h+var_1C] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_10] esi +
mov ebp edi +
rol ebp 5 +
lea edx [edx+ebp-359D3E2Ah] +
add edx esi +
mov ebp eax +
xor ebp ebx +
xor ebp ecx +
ror eax 2 +
add edx ebp +
mov esi [esp+140h+var_4C] +
mov ebp [esp+140h+var_44] +
xor esi ebp +
mov ebp [esp+140h+var_2C] +
xor esi ebp +
mov ebp [esp+140h+var_18] +
xor esi ebp +
rol esi 1 +
mov ebp edx +
rol ebp 5 +
lea ecx [ecx+ebp-359D3E2Ah] +
add ecx esi +
mov ebp edi +
xor ebp eax +
xor ebp ebx +
ror edi 2 +
add ecx ebp +
mov esi [esp+140h+var_48] +
mov ebp [esp+140h+var_40] +
xor esi ebp +
mov ebp [esp+140h+var_28] +
xor esi ebp +
mov ebp [esp+140h+var_14] +
xor esi ebp +
rol esi 1 +
mov ebp ecx +
rol ebp 5 +
lea ebx [ebx+ebp-359D3E2Ah] +
add ebx esi +
mov ebp edx +
xor ebp edi +
xor ebp eax +
ror edx 2 +
add ebx ebp +
mov esi [esp+140h+var_44] +
mov ebp [esp+140h+var_3C] +
xor esi ebp +
mov ebp [esp+140h+var_24] +
xor esi ebp +
mov ebp [esp+140h+var_10] +
xor esi ebp +
rol esi 1 +
mov ebp ebx +
rol ebp 5 +
lea eax [eax+ebp-359D3E2Ah] +
add eax esi +
mov ebp ecx +
xor ebp edx +
xor ebp edi +
ror ecx 2 +
add eax ebp +
mov esi [esp+140h+arg_0] +
add esp 140h +
mov ebp [esi] +
add eax ebp +
mov ebp [esi+4] +
add ebx ebp +
mov ebp [esi+8] +
add ecx ebp +
mov ebp [esi+0Ch] +
add edx ebp +
mov ebp [esi+10h] +
add edi ebp +
mov [esi] eax +
mov [esi+4] ebx +
mov [esi+8] ecx +
mov [esi+0Ch] edx +
mov [esi+10h] edi +
pop ebp  +
pop ebx  +
pop edi  +
pop esi  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_8] +
test edx edx +
jbe loc_1026375  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
sub ecx eax +
push esi  +
mov esi [ecx+eax] +
bswap esi  +
mov [eax] esi +
add eax 4 +
sub edx 1 +
jnz loc_1026365  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
lea ecx [ebp+var_4] +
push ecx  +
push dword ptr [esi+4]  +
mov eax 1101h +
push eax  +
mov [ebp+var_4] eax +
call sub_1011BA0  +
test eax eax +
jl loc_10263B7  +
lea eax [ebp+var_4] +
push eax  +
push dword ptr [esi+988h]  +
push [ebp+var_4]  +
call sub_1011BA0  +
test eax eax +
jge loc_10263BB  +
and [ebp+var_4] 0 +
mov eax [ebp+var_4] +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push 40000h  +
xor edi edi +
push edi  +
push dword ptr [esi+8]  +
call memset  +
mov eax [esi+4] +
mov ecx [esi+4330h] +
mov edx [esi+4334h] +
sub ecx eax +
mov [esi] ecx +
mov ecx eax +
mov [esi+458h] eax +
mov [esi+86Ch] eax +
mov eax [esi+870h] +
shl ecx 2 +
sub edx ecx +
lea eax ds:100h[eax*8] +
push eax  +
mov [esi+0Ch] edx +
mov edx [esi+4338h] +
xor ebx ebx +
inc ebx  +
lea eax [esi+3960h] +
sub edx ecx +
push edi  +
push eax  +
mov [esi+10h] edx +
mov [esi+44h] ebx +
mov [esi+48h] ebx +
mov [esi+4Ch] ebx +
mov [esi+38h] ebx +
mov [esi+3Ch] ebx +
mov [esi+40h] ebx +
mov [esi+97Dh] bl +
mov [esi+980h] ebx +
mov byte ptr [esi+18h] 20h +
mov [esi+14h] edi +
mov [esi+1Ch] edi +
call memset  +
mov edi 0F9h +
push edi  +
lea eax [esi+41F4h] +
push 0  +
push eax  +
call memset  +
push 100h  +
lea eax [esi+2540h] +
push 8  +
push eax  +
call memset  +
mov eax [esi+870h] +
shl eax 3 +
push eax  +
lea eax [esi+2640h] +
push 9  +
push eax  +
call memset  +
push edi  +
lea eax [esi+27FDh] +
push 6  +
push eax  +
call memset  +
mov eax 3030303h +
lea edi [esi+431Eh] +
stos   +
add esp 48h +
push esi  +
stos   +
call sub_1027E81  +
mov eax [esi+458h] +
xor edi edi +
push 2000h  +
mov [esi+990h] eax +
mov [esi+98Ch] eax +
mov [esi+868h] edi +
mov [esi+984h] ebx +
push edi  +
push dword ptr [esi+34h]  +
call memset  +
add esp 0Ch +
push esi  +
mov [esi+24h] edi +
mov [esi+28h] edi +
mov byte ptr [esi+87Ch] 0 +
mov [esi+38h] ebx +
mov [esi+3Ch] ebx +
mov [esi+40h] ebx +
call sub_10279AE  +
push 0AF0h  +
lea eax [esi+28F8h] +
push edi  +
push eax  +
mov [esi+433Ch] edi +
call memset  +
push 3E4h  +
lea eax [esi+3C1Eh] +
push edi  +
push eax  +
call memset  +
add esp 18h +
push 8  +
pop ecx  +
xor eax eax +
lea edi [esi+42EEh] +
push esi  +
stos   +
call sub_102637E  +
push eax  +
push 0  +
push dword ptr [esi+4330h]  +
call memset  +
add esp 0Ch +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+8] +
xor ebx ebx +
push edi  +
cmp eax ebx +
jz loc_102658A  +
push eax  +
call dword ptr [esi+4348h]  +
pop ecx  +
mov [esi+8] ebx +
lea edi [esi+4334h] +
mov eax [edi] +
cmp eax ebx +
jz loc_10265A0  +
push eax  +
call dword ptr [esi+4348h]  +
pop ecx  +
mov [edi] ebx +
lea edi [esi+4338h] +
mov eax [edi] +
cmp eax ebx +
jz loc_10265B6  +
push eax  +
call dword ptr [esi+4348h]  +
pop ecx  +
mov [edi] ebx +
lea edi [esi+4330h] +
mov eax [edi] +
cmp eax ebx +
jz loc_10265CE  +
push eax  +
call dword ptr [esi+4348h]  +
pop ecx  +
mov [edi] ebx +
mov [esi] ebx +
mov eax [esi+30h] +
cmp eax ebx +
jz loc_10265E0  +
push eax  +
call dword ptr [esi+4348h]  +
pop ecx  +
mov [esi+30h] ebx +
mov eax [esi+2Ch] +
cmp eax ebx +
jz loc_10265F2  +
push eax  +
call dword ptr [esi+4348h]  +
pop ecx  +
mov [esi+2Ch] ebx +
mov eax [esi+34h] +
cmp eax ebx +
jz loc_1026604  +
push eax  +
call dword ptr [esi+4348h]  +
pop ecx  +
mov [esi+34h] ebx +
lea edi [esi+253Ch] +
mov eax [edi] +
cmp eax ebx +
jz loc_102661A  +
push eax  +
call dword ptr [esi+4348h]  +
pop ecx  +
mov [edi] ebx +
push esi  +
call sub_1027984  +
pop edi  +
mov [esi+878h] ebx +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov edx [esi+4] +
push edi  +
xor edi edi +
push 4  +
pop eax  +
mov [esi+8] edi +
mov [esi+4334h] edi +
mov [esi+4338h] edi +
mov [esi] edi +
mov [esi+4330h] edi +
mov [esi+253Ch] edi +
mov [esi+30h] edi +
mov [esi+2Ch] edi +
mov [esi+34h] edi +
mov [esi+85Ch] edi +
mov [esi+870h] eax +
mov [ebp+arg_0] eax +
push ebx  +
mov eax [esi+870h] +
mov cl ds:byte_100393C[eax] +
xor ebx ebx +
inc ebx  +
shl ebx cl +
add [ebp+arg_0] ebx +
inc eax  +
mov [esi+870h] eax +
cmp [ebp+arg_0] edx +
jb loc_102667A  +
push 40000h  +
call dword ptr [esi+4344h]  +
pop ecx  +
mov [esi+8] eax +
pop ebx  +
cmp eax edi +
jnz loc_10266BB  +
push esi  +
call sub_102656B  +
xor eax eax +
jmp loc_1026795  +
lea eax [ebp+arg_0] +
push eax  +
push esi  +
call sub_102637E  +
push 4  +
pop ecx  +
mul  ecx +
push edx  +
push eax  +
call sub_1011101  +
test eax eax +
jl loc_10266AE  +
push [ebp+arg_0]  +
call dword ptr [esi+4344h]  +
pop ecx  +
mov [esi+4334h] eax +
cmp eax edi +
jz loc_10266AE  +
push [ebp+arg_0]  +
call dword ptr [esi+4344h]  +
pop ecx  +
mov [esi+4338h] eax +
push esi  +
cmp eax edi +
jz loc_10266AF  +
call sub_102637E  +
push eax  +
call dword ptr [esi+4344h]  +
pop ecx  +
mov [esi+4330h] eax +
cmp eax edi +
jz loc_10266AE  +
push 10000h  +
mov [esi] eax +
call dword ptr [esi+4344h]  +
pop ecx  +
mov [esi+30h] eax +
cmp eax edi +
jz loc_10266AE  +
push 20000h  +
call dword ptr [esi+4344h]  +
pop ecx  +
mov [esi+2Ch] eax +
cmp eax edi +
jz loc_10266AE  +
push 2000h  +
call dword ptr [esi+4344h]  +
pop ecx  +
mov [esi+34h] eax +
push esi  +
cmp eax edi +
jz loc_10266AF  +
call sub_1027FCB  +
push esi  +
call sub_102804B  +
push esi  +
call sub_1027947  +
test eax eax +
jz loc_10266AE  +
push 18150h  +
call dword ptr [esi+4344h]  +
pop ecx  +
mov [esi+253Ch] eax +
cmp eax edi +
jz loc_10266AE  +
xor eax eax +
inc eax  +
mov [esi+878h] eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push [ebp+arg_0]  +
push 0  +
push 0  +
push esi  +
call sub_1028C21  +
push [ebp+arg_4]  +
mov ebx eax +
push esi  +
call sub_1028A79  +
push 1  +
push esi  +
mov [ebp+var_4] eax +
call sub_1027E00  +
push esi  +
call sub_1028102  +
cmp eax ebx +
jb loc_10267E9  +
mov eax [esi+990h] +
cmp eax [esi+98Ch] +
jb loc_10267E9  +
mov [ebp+var_4] 3 +
movzx eax byte ptr [ebp+var_4] +
push eax  +
push 3  +
push esi  +
call sub_10278C5  +
cmp ebx 8000h +
jnz loc_1026804  +
push 1  +
push 1  +
jmp loc_1026827  +
push 0  +
push 1  +
push esi  +
call sub_10278C5  +
mov eax ebx +
shr eax 8 +
and eax 0FFh +
push eax  +
push 8  +
push esi  +
call sub_10278C5  +
movzx eax bl +
push eax  +
push 8  +
push esi  +
call sub_10278C5  +
cmp [ebp+var_4] 1 +
jnz loc_1026844  +
push esi  +
call sub_1027EB8  +
push [ebp+arg_0]  +
push esi  +
call sub_10282E1  +
jmp loc_102685F  +
cmp [ebp+var_4] 2 +
jnz loc_102686A  +
push esi  +
call sub_1027F15  +
push esi  +
call sub_1027EB8  +
push [ebp+arg_0]  +
push esi  +
call sub_1028624  +
push [ebp+arg_4]  +
push esi  +
call sub_1028080  +
jmp loc_1026886  +
cmp [ebp+var_4] 3 +
jnz loc_1026886  +
push [ebp+arg_4]  +
push esi  +
call sub_1028080  +
push ebx  +
push dword ptr [esi+990h]  +
push esi  +
call sub_1028230  +
add [esi+990h] ebx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
push dword ptr [esi+28h]  +
xor ebx ebx +
push dword ptr [esi+24h]  +
mov [esi+97Dh] bl +
push ebx  +
push esi  +
call sub_1028F73  +
push [ebp+var_4]  +
push [ebp+arg_0]  +
call sub_10267A0  +
mov eax [esi+24h] +
mov edx [ebp+arg_0] +
cmp edx eax +
jnz loc_10268EC  +
push 2000h  +
push ebx  +
push dword ptr [esi+34h]  +
call memset  +
add esp 0Ch +
mov [esi+24h] ebx +
mov [esi+28h] ebx +
jmp loc_102695E  +
mov ecx [esi+34h] +
shr edx 3 +
shr eax 3 +
sub eax edx +
inc eax  +
push eax  +
add edx ecx +
push edx  +
push ecx  +
call memmove  +
mov eax [esi+24h] +
sub eax [ebp+arg_0] +
mov ecx 1FFFh +
shr eax 3 +
sub ecx eax +
push ecx  +
mov ecx [esi+34h] +
lea eax [eax+ecx+1] +
push ebx  +
push eax  +
call memset  +
mov ecx [ebp+arg_0] +
mov edx [esi+24h] +
mov eax [esi+30h] +
sub edx ecx +
push edx  +
add ecx eax +
push ecx  +
push eax  +
call memmove  +
mov ecx [ebp+var_4] +
mov edx [esi+28h] +
mov eax [esi+2Ch] +
sub edx ecx +
shl edx 2 +
push edx  +
lea ecx [eax+ecx*4] +
push ecx  +
push eax  +
call memmove  +
mov eax [ebp+arg_0] +
sub [esi+24h] eax +
mov eax [ebp+var_4] +
add esp 30h +
sub [esi+28h] eax +
push esi  +
call sub_1027F60  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov al [ecx+18h] +
cmp al 20h +
jge loc_102698C  +
sub al 10h +
movzx eax al +
push 0  +
push eax  +
push ecx  +
call sub_10278C5  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0  +
push [ebp+arg_0]  +
call sub_1027E00  +
push [ebp+arg_0]  +
call sub_1028102  +
push [ebp+arg_0]  +
mov esi eax +
call sub_1027F60  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
jmp loc_10269D3  +
call sub_1026896  +
cmp dword ptr [esi+24h] 0 +
push esi  +
ja loc_10269CE  +
call sub_10281CA  +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax [esi+24h] +
push ebx  +
xor ebx ebx +
cmp eax ebx +
jz loc_1026A3D  +
push edi  +
lea edi [esi+980h] +
push eax  +
cmp [edi] ebx +
jz loc_1026A0B  +
push ebx  +
push ebx  +
push esi  +
call sub_1028C21  +
mov [edi] ebx +
jmp loc_1026A1D  +
push dword ptr [esi+2538h]  +
push dword ptr [esi+2534h]  +
push esi  +
call sub_1028C75  +
push ebx  +
push esi  +
call sub_1027E00  +
push esi  +
call sub_1027F60  +
mov eax [esi+24h] +
mov [esi+2534h] eax +
mov eax [esi+28h] +
mov [esi+2538h] eax +
pop edi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov byte ptr [esi+97Dh] 0 +
mov dword ptr [esi+980h] 1 +
call sub_1026896  +
mov eax [esi+24h] +
mov ecx 1000h +
cmp eax ecx +
jnb loc_1026A74  +
mov [esi+2530h] ecx +
jmp loc_1026A7F  +
add eax 1000h +
mov [esi+2530h] eax +
mov eax [ebp+arg_0] +
mov [esi+86Ch] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
mov ecx [esi+4] +
push ebx  +
push edi  +
mov edi [esi+86Ch] +
xor ebx ebx +
mov [esi+97Dh] bl +
mov eax [eax] +
mov edx edi +
sub edx ecx +
sub eax edi +
cmp edx ecx +
jnb loc_1026ABD  +
add eax edx +
jmp loc_1026ABF  +
add eax ecx +
mov ecx [esi] +
sub ecx [esi+4330h] +
mov edx [ebp+arg_0] +
add ecx [edx] +
cmp eax ecx +
jg loc_1026B54  +
push ebx  +
lea eax [ebp+var_4] +
push eax  +
push dword ptr [esi+28h]  +
push dword ptr [esi+24h]  +
push ebx  +
push esi  +
call sub_1028F73  +
push [ebp+var_4]  +
push ebx  +
push ebx  +
push esi  +
call sub_1028C21  +
push ebx  +
push esi  +
call sub_1027E00  +
push esi  +
call sub_1027F60  +
push 40000h  +
push ebx  +
push dword ptr [esi+8]  +
call memset  +
push 2000h  +
push ebx  +
push dword ptr [esi+34h]  +
call memset  +
mov ecx [ebp+var_4] +
xor eax eax +
add esp 18h +
inc eax  +
mov [esi+2530h] ecx +
mov ecx [ebp+arg_0] +
mov [esi+44h] eax +
mov [esi+48h] eax +
mov [esi+4Ch] eax +
mov [esi+38h] eax +
mov [esi+3Ch] eax +
mov [esi+40h] eax +
mov [esi+868h] ebx +
mov [esi+24h] ebx +
mov [esi+28h] ebx +
mov [esi+980h] eax +
mov [ecx] edi +
jmp loc_1026B56  +
xor eax eax +
pop edi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov ebx [esi+458h] +
add eax ebx +
mov [ebp+var_14] eax +
lea eax [esi+984h] +
cmp dword ptr [eax] 0 +
push edi  +
mov [ebp+var_4] ebx +
jz loc_1026B9A  +
and dword ptr [eax] 0 +
mov dword ptr [esi+2530h] 2710h +
jmp loc_1026BC3  +
mov [ebp+arg_0] 32h +
lea edi [ebx-32h] +
mov eax ebx +
sub eax [esi+4] +
add eax 4 +
push eax  +
push edi  +
push esi  +
call sub_10294B5  +
dec [ebp+arg_0]  +
inc edi  +
cmp [ebp+arg_0] 0 +
ja loc_1026BA4  +
jmp loc_1026BC3  +
mov ebx [ebp+var_4] +
lea eax [ebx+8000h] +
mov [ebp+arg_0] eax +
cmp ebx [ebp+var_14] +
jnb loc_1027206  +
mov edi [ebp+arg_0] +
and edi 0FFFF8000h +
mov [ebp+var_1C] edi +
cmp edi [ebp+var_14] +
jbe loc_1026BEC  +
mov edi [ebp+var_14] +
mov [ebp+var_1C] edi +
push ebx  +
push esi  +
call sub_1029230  +
cmp eax 2 +
mov [ebp+var_4] eax +
jl loc_1026C0E  +
lea ecx [eax+ebx] +
cmp ecx edi +
jbe loc_1026C3B  +
mov eax edi +
sub eax ebx +
cmp eax 2 +
mov [ebp+var_4] eax +
jge loc_1026C38  +
mov eax [esi] +
mov al [ebx+eax] +
mov edx [esi+24h] +
mov ecx [esi+30h] +
mov [ecx+edx] al +
inc dword ptr [esi+24h]  +
mov eax [esi+24h] +
inc ebx  +
inc [ebp+arg_0]  +
mov [ebp+var_4] ebx +
cmp eax 0FFF8h +
jb loc_1026BCC  +
push ebx  +
call sub_1026A44  +
jmp loc_1026BCC  +
mov eax [ebp+var_4] +
cmp eax 32h +
jge loc_1027132  +
mov edx [esi+253Ch] +
lea ecx [eax+ebx] +
mov [ebp+var_C] ecx +
lea ecx [ebx+0EFDh] +
mov [ebp+var_30] ecx +
mov ecx [esi] +
movzx ecx byte ptr [ecx+ebx] +
movzx ecx byte ptr [ecx+esi+2540h] +
push 2  +
mov [edx+2Ch] ecx +
mov ecx [esi+253Ch] +
pop edi  +
mov [ebp+var_24] ebx +
mov [ecx+1Ch] ebx +
mov [ebp+arg_0] edi +
cmp eax edi +
jb loc_1026D41  +
push 30h  +
lea ecx [esi+58h] +
pop edx  +
mov [ebp+var_8] ecx +
mov ecx [ebp+var_8] +
mov ecx [ecx] +
cmp ecx 400h +
jnb loc_1026CA3  +
mov cl [ecx+esi+45Ch] +
jmp loc_1026CC0  +
cmp ecx 80000h +
jnb loc_1026CBA  +
shr ecx 9 +
mov cl [ecx+esi+45Ch] +
add cl 12h +
jmp loc_1026CC0  +
shr ecx 11h +
add cl 22h +
movzx ecx cl +
cmp edi 9 +
jnb loc_1026CE8  +
lea edi [edi+ecx*8] +
movzx ecx ds:byte_100393C[ecx] +
movzx edi byte ptr [edi+esi+263Eh] +
add edi ecx +
mov ecx [esi+253Ch] +
mov [edx+ecx+14h] edi +
jmp loc_1026D13  +
movzx edi byte ptr [edi+esi+27F4h] +
mov [ebp+var_2C] ecx +
movzx ecx byte ptr [esi+ecx*8+2647h] +
add ecx edi +
mov edi [ebp+var_2C] +
movzx edi ds:byte_100393C[edi] +
add ecx edi +
mov edi [esi+253Ch] +
mov [edx+edi+14h] ecx +
mov ecx [esi+253Ch] +
mov edi [ebp+var_8] +
add [ebp+var_8] 4 +
mov [edx+ecx+4] ebx +
mov edi [edi] +
mov ecx [esi+253Ch] +
mov [edx+ecx] edi +
mov edi [ebp+arg_0] +
inc edi  +
add edx 18h +
mov [ebp+arg_0] edi +
cmp edi eax +
jbe loc_1026C8D  +
mov eax [esi+253Ch] +
and dword ptr [eax+14h] 0 +
mov eax [esi+253Ch] +
mov ecx [esi+44h] +
mov [eax+8] ecx +
mov eax [esi+253Ch] +
mov ecx [esi+48h] +
mov [eax+0Ch] ecx +
mov eax [esi+253Ch] +
mov ecx [esi+4Ch] +
mov [eax+10h] ecx +
mov edi [esi+253Ch] +
mov eax ebx +
imul eax eax +
lea ecx [ebx-1] +
mov [ebp+var_18] ecx +
mov ecx [ebp+var_1C] +
sub edi eax +
sub ecx ebx +
lea eax [eax+edi+4] +
mov [ebp+var_20] ecx +
mov [ebp+var_8] eax +
mov ecx [ebp+var_8] +
add ecx 18h +
mov eax [ecx] +
inc ebx  +
inc [ebp+var_18]  +
dec [ebp+var_20]  +
mov [ebp+var_8] ecx +
cmp eax [ebp+var_18] +
jz loc_1026DFF  +
mov edx [ecx-4] +
imul eax eax +
cmp edx 3 +
jb loc_1026DC6  +
add edx 0FFFFFFFEh +
add eax edi +
mov [esi+44h] edx +
mov edx [eax+8] +
mov [esi+48h] edx +
mov eax [eax+0Ch] +
jmp loc_1026DFC  +
add eax edi +
test edx edx +
jnz loc_1026DDD  +
mov edx [eax+8] +
mov [esi+44h] edx +
mov edx [eax+0Ch] +
mov [esi+48h] edx +
mov eax [eax+10h] +
jmp loc_1026DFC  +
cmp edx 1 +
jnz loc_1026DED  +
mov edx [eax+0Ch] +
mov [esi+44h] edx +
mov edx [eax+8] +
jmp loc_1026DD5  +
mov edx [eax+10h] +
mov [esi+44h] edx +
mov edx [eax+0Ch] +
mov [esi+48h] edx +
mov eax [eax+8] +
mov [esi+4Ch] eax +
mov eax [esi+44h] +
mov [ecx+4] eax +
mov eax [esi+48h] +
mov [ecx+8] eax +
mov eax [esi+4Ch] +
mov [ecx+0Ch] eax +
cmp [ebp+var_C] ebx +
jz loc_102701A  +
push ebx  +
push esi  +
call sub_1029230  +
mov [ebp+var_4] eax +
add eax ebx +
cmp eax [ebp+var_1C] +
jbe loc_1026E3D  +
mov edx [ebp+var_20] +
cmp edx 2 +
mov [ebp+var_4] edx +
jge loc_1026E40  +
xor edx edx +
mov [ebp+var_4] edx +
jmp loc_1026E40  +
mov edx [ebp+var_4] +
cmp edx 32h +
jg loc_1026F8A  +
lea eax [edx+ebx] +
cmp eax [ebp+var_30] +
jnb loc_1026F8A  +
cmp edx 2 +
jg loc_1026E65  +
jnz loc_1026EAD  +
cmp dword ptr [esi+58h] 800h +
jnb loc_1026EAD  +
cmp [ebp+var_C] eax +
jnb loc_1026EAD  +
mov eax edx +
sub eax [ebp+var_24] +
mov ecx 0EFCh +
add eax ebx +
cmp eax ecx +
jnb loc_1026E7C  +
mov ecx eax +
mov eax [ebp+var_C] +
sub eax [ebp+var_24] +
inc eax  +
cmp eax ecx +
mov [ebp+arg_0] eax +
jg loc_1026EA7  +
sub ecx [ebp+arg_0] +
imul eax eax +
inc ecx  +
mov [ebp+arg_0] ecx +
mov ecx [esi+253Ch] +
or dword ptr [eax+ecx+14h] 0FFFFFFFFh +
add eax 18h +
dec [ebp+arg_0]  +
jnz loc_1026E94  +
lea eax [edx+ebx] +
mov [ebp+var_C] eax +
mov ecx [ebp+var_8] +
mov eax [ecx+10h] +
mov [ebp+var_28] eax +
mov eax [esi] +
movzx eax byte ptr [eax+ebx] +
movzx eax byte ptr [eax+esi+2540h] +
add eax [ebp+var_28] +
cmp eax [ecx+28h] +
jnb loc_1026ED2  +
mov [ecx+28h] eax +
mov [ecx+18h] ebx +
push 2  +
pop eax  +
mov [ebp+arg_0] eax +
cmp edx eax +
jb loc_1026D91  +
mov edx [ebp+var_8] +
lea eax [esi+58h] +
add edx 40h +
mov [ebp+var_10] eax +
mov [ebp+var_2C] edx +
mov eax [ebp+var_10] +
mov eax [eax] +
cmp eax 400h +
jnb loc_1026F04  +
mov al [eax+esi+45Ch] +
jmp loc_1026F1E  +
cmp eax 80000h +
jnb loc_1026F19  +
shr eax 9 +
mov al [eax+esi+45Ch] +
add al 12h +
jmp loc_1026F1E  +
shr eax 11h +
add al 22h +
cmp [ebp+arg_0] 9 +
movzx ecx al +
jnb loc_1026F37  +
mov eax [ebp+arg_0] +
lea eax [eax+ecx*8] +
movzx eax byte ptr [eax+esi+263Eh] +
jmp loc_1026F4F  +
mov edx [ebp+arg_0] +
movzx edx byte ptr [edx+esi+27F4h] +
movzx eax byte ptr [esi+ecx*8+2647h] +
add eax edx +
mov edx [ebp+var_2C] +
movzx ecx ds:byte_100393C[ecx] +
add eax ecx +
add eax [ebp+var_28] +
cmp eax [edx] +
jnb loc_1026F6C  +
mov [edx] eax +
mov eax [ebp+var_10] +
mov [edx-10h] ebx +
mov eax [eax] +
mov [edx-14h] eax +
inc [ebp+arg_0]  +
mov eax [ebp+arg_0] +
add [ebp+var_10] 4 +
add edx 18h +
mov [ebp+var_2C] edx +
cmp eax [ebp+var_4] +
jbe loc_1026EEF  +
jmp loc_1026D91  +
mov ecx [esi+edx*4+50h] +
lea eax [edx+ebx] +
mov [ebp+var_30] eax +
imul eax eax +
add eax edi +
mov [ebp+var_8] ecx +
mov [eax] ecx +
mov [eax+4] ebx +
cmp ecx 3 +
jnz loc_1026FBE  +
cmp edx 10h +
jle loc_1026FBE  +
mov eax ebx +
sub eax [esi+4] +
add eax 5 +
push eax  +
inc ebx  +
push ebx  +
push esi  +
call sub_10294B5  +
jmp loc_1026FE9  +
xor eax eax +
inc eax  +
mov [ebp+arg_0] eax +
cmp edx eax +
jbe loc_1026FE9  +
mov eax [ebp+arg_0] +
mov ecx eax +
sub ecx [esi+4] +
add eax ebx +
lea ecx [ecx+ebx+4] +
push ecx  +
push eax  +
push esi  +
call sub_10294B5  +
inc [ebp+arg_0]  +
mov eax [ebp+arg_0] +
cmp eax [ebp+var_4] +
jb loc_1026FC8  +
mov eax [ebp+var_8] +
mov ebx [ebp+var_30] +
cmp eax 3 +
jb loc_1027008  +
mov ecx [esi+48h] +
mov [esi+4Ch] ecx +
mov ecx [esi+44h] +
add eax 0FFFFFFFEh +
mov [esi+48h] ecx +
mov [esi+44h] eax +
jmp loc_102701A  +
test eax eax +
jz loc_102701A  +
mov ecx [esi+44h] +
lea eax [esi+eax*4+44h] +
mov edx [eax] +
mov [esi+44h] edx +
mov [eax] ecx +
and [ebp+arg_0] 0 +
mov eax ebx +
imul eax eax +
mov ecx [eax+edi+4] +
mov eax ecx +
imul eax eax +
inc [ebp+arg_0]  +
mov edx ecx +
mov ecx [eax+edi+4] +
mov [eax+edi+4] ebx +
mov [ebp+var_30] edx +
mov ebx edx +
cmp edx [ebp+var_24] +
jnz loc_1027027  +
mov eax [esi+24h] +
add eax [ebp+arg_0] +
cmp eax 0FFF8h +
jnb loc_102705D  +
mov eax [esi+28h] +
add eax [ebp+arg_0] +
cmp eax 7FF8h +
jb loc_1027067  +
push [ebp+var_30]  +
call sub_1026A44  +
jmp loc_1027043  +
mov eax ebx +
imul eax eax +
lea ecx [ebx+1] +
lea eax [eax+edi+4] +
mov [ebp+var_30] ecx +
cmp [eax] ecx +
jbe loc_10270C2  +
mov ecx [esi+24h] +
mov edx [esi+34h] +
shr ecx 3 +
add ecx edx +
mov [ebp+var_30] ecx +
mov ecx [esi+24h] +
and ecx 7 +
mov dl 1 +
shl dl cl +
mov ecx [ebp+var_30] +
or [ecx] dl +
mov cl [eax] +
mov edx [esi+30h] +
sub cl bl +
mov ebx [esi+24h] +
sub cl 2 +
mov [edx+ebx] cl +
inc dword ptr [esi+24h]  +
mov ecx [eax] +
mov edx [esi+28h] +
imul ecx ecx +
mov ebx [esi+2Ch] +
mov ecx [ecx+edi] +
mov [ebx+edx*4] ecx +
inc dword ptr [esi+28h]  +
mov ebx [eax] +
jmp loc_10270D6  +
mov eax [esi] +
mov al [ebx+eax] +
mov edx [esi+24h] +
mov ecx [esi+30h] +
mov ebx [ebp+var_30] +
mov [ecx+edx] al +
inc dword ptr [esi+24h]  +
dec [ebp+arg_0]  +
jnz loc_1027067  +
mov eax [esi+24h] +
lea edi [esi+2530h] +
mov [ebp+var_4] ebx +
cmp eax [edi] +
jb loc_10270F6  +
call sub_10269E9  +
add dword ptr [edi] 1000h +
cmp byte ptr [esi+97Dh] 0 +
jz loc_1026BC3  +
cmp dword ptr [esi+24h] 0FE00h +
jnb loc_1027119  +
cmp dword ptr [esi+28h] 7E00h +
jb loc_1026BC3  +
lea eax [ebp+var_4] +
push eax  +
call sub_1026A91  +
test eax eax +
jnz loc_1026BC0  +
mov ebx [ebp+var_4] +
jmp loc_10271FB  +
mov ecx [esi+eax*4+50h] +
mov [ebp+var_8] ecx +
cmp ecx 3 +
jnz loc_1027158  +
cmp eax 10h +
jle loc_1027158  +
mov eax ebx +
sub eax [esi+4] +
add eax 5 +
push eax  +
lea eax [ebx+1] +
push eax  +
push esi  +
call sub_10294B5  +
jmp loc_1027179  +
xor edi edi +
inc edi  +
cmp eax edi +
jbe loc_102717C  +
mov eax edi +
sub eax [esi+4] +
lea eax [eax+ebx+4] +
push eax  +
lea eax [edi+ebx] +
push eax  +
push esi  +
call sub_10294B5  +
inc edi  +
cmp edi [ebp+var_4] +
jb loc_102715F  +
mov eax [ebp+var_4] +
mov ecx [esi+24h] +
mov edi [esi+34h] +
mov edx ecx +
shr edx 3 +
add edi edx +
and ecx 7 +
mov dl 1 +
shl dl cl +
add ebx eax +
sub al 2 +
mov [ebp+var_4] ebx +
or [edi] dl +
mov edx [esi+24h] +
mov ecx [esi+30h] +
mov [ecx+edx] al +
inc dword ptr [esi+24h]  +
mov ecx [esi+28h] +
mov eax [ebp+var_8] +
mov edx [esi+2Ch] +
mov [edx+ecx*4] eax +
inc dword ptr [esi+28h]  +
cmp eax 3 +
jb loc_10271D0  +
mov eax [esi+48h] +
mov [esi+4Ch] eax +
mov eax [esi+44h] +
mov [esi+48h] eax +
mov eax [ebp+var_8] +
add eax 0FFFFFFFEh +
mov [esi+44h] eax +
jmp loc_10271E5  +
mov eax [ebp+var_8] +
test eax eax +
jz loc_10271E5  +
mov ecx [esi+44h] +
lea eax [esi+eax*4+44h] +
mov edx [eax] +
mov [esi+44h] edx +
mov [eax] ecx +
cmp dword ptr [esi+24h] 0FFF8h +
jnb loc_10271FB  +
cmp dword ptr [esi+28h] 7FF8h +
jb loc_1026BC3  +
push ebx  +
call sub_1026A44  +
jmp loc_1026BC3  +
mov eax ebx +
sub eax [esi+4] +
cmp [ebp+arg_4] 8000h +
mov [esi+98Ch] eax +
jge loc_1027240  +
cmp byte ptr [esi+97Dh] 0 +
jz loc_1027309  +
lea eax [ebp+var_4] +
push eax  +
call sub_1026A91  +
mov ebx [ebp+var_4] +
test eax eax +
jz loc_1027309  +
jmp loc_1026BC3  +
add eax 36h +
mov [ebp+var_30] eax +
lea edi [ebx-1] +
mov [ebp+arg_0] 32h +
push [ebp+var_30]  +
push edi  +
push esi  +
call sub_10295E9  +
dec edi  +
dec [ebp+arg_0]  +
jnz loc_1027250  +
mov eax [esi] +
sub eax [esi+4330h] +
mov ecx [esi+988h] +
add ecx [esi+4] +
add eax ebx +
cmp eax ecx +
jb loc_1027309  +
cmp byte ptr [esi+97Dh] 0 +
jz loc_1027298  +
lea eax [ebp+var_4] +
push eax  +
call sub_1026A91  +
test eax eax +
jnz loc_1026BC0  +
mov ebx [ebp+var_4] +
mov eax [esi+4330h] +
push dword ptr [esi+4]  +
mov ecx [esi+988h] +
add ecx eax +
push ecx  +
push eax  +
call memmove  +
mov ecx [esi+4] +
mov eax [esi+4334h] +
shl ecx 2 +
push ecx  +
mov ecx [esi+988h] +
lea ecx [eax+ecx*4] +
push ecx  +
push eax  +
call memmove  +
mov ecx [esi+4] +
mov eax [esi+4338h] +
shl ecx 2 +
push ecx  +
mov ecx [esi+988h] +
lea ecx [eax+ecx*4] +
push ecx  +
push eax  +
call memmove  +
mov eax ebx +
sub eax [esi+4] +
add esp 24h +
mov [esi+98Ch] eax +
mov eax [esi+988h] +
sub [esi] eax +
shl eax 2 +
sub [esi+0Ch] eax +
sub [esi+10h] eax +
pop edi  +
mov [esi+458h] ebx +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+458h] +
sub eax [esi+4330h] +
push 8000h  +
add eax [esi] +
push eax  +
push esi  +
call sub_1027AF8  +
test eax eax +
jle loc_1027349  +
push eax  +
push esi  +
call sub_1026B61  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
and dword ptr [eax+2EC8h] 0 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_1049010 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_0] +
mov edx [ebp+arg_4] +
push ebx  +
mov ebx [ebp+arg_8] +
cmp ebx 6 +
jg loc_1027397  +
add [ecx+2EC8h] ebx +
jmp loc_1027420  +
push esi  +
push edi  +
lea eax [edx+ebx] +
lea esi [eax-6] +
lea edi [ebp+var_C] +
movs   +
mov [ebp+var_10] eax +
movs   +
mov edi [ebp+var_10] +
add edi 0FFFFFFFAh +
mov eax 0E8E8E8E8h +
stos   +
stos   +
mov eax [ecx+2EC8h] +
lea ebx [eax+ebx-0Ah] +
mov [ebp+var_14] ebx +
jmp loc_10273CC  +
inc edx  +
inc dword ptr [ecx+2EC8h]  +
cmp byte ptr [edx] 0E8h +
jnz loc_10273C5  +
mov edi [ecx+2EC8h] +
inc edx  +
cmp edi ebx +
jnb loc_1027409  +
mov eax [edx] +
mov esi [ecx+2EC4h] +
cmp eax esi +
jnb loc_10273EE  +
sub eax edi +
mov [edx] eax +
jmp loc_10273FA  +
mov ebx eax +
neg ebx  +
cmp ebx edi +
ja loc_10273FA  +
add esi eax +
mov [edx] esi +
mov ebx [ebp+var_14] +
add edx 4 +
add dword ptr [ecx+2EC8h] 5 +
jmp loc_10273CC  +
mov edi [ebp+var_10] +
add ebx 0Ah +
add edi 0FFFFFFFAh +
mov [ecx+2EC8h] ebx +
lea esi [ebp+var_C] +
movs   +
movs   +
pop edi  +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop ebx  +
call sub_1010796  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push ebx  +
push esi  +
mov esi [edx+4] +
push edi  +
push 4  +
mov byte ptr [edx+2EB5h] 4 +
pop edi  +
mov al [edx+2EB5h] +
movzx ecx al +
mov cl ds:byte_1003970[ecx] +
xor ebx ebx +
inc ebx  +
shl ebx cl +
add edi ebx +
inc al  +
mov [edx+2EB5h] al +
cmp edi esi +
jb loc_102744C  +
pop edi  +
xor eax eax +
pop esi  +
inc eax  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
movzx eax byte ptr [esi+2EB5h] +
push edi  +
lea eax ds:100h[eax*8] +
mov edi 2A0h +
cmp eax edi +
jl loc_10274A0  +
mov eax edi +
push eax  +
lea eax [esi+0A18h] +
push 0  +
push eax  +
call memset  +
movzx eax byte ptr [esi+2EB5h] +
lea eax ds:100h[eax*8] +
add esp 0Ch +
cmp eax edi +
jl loc_10274C6  +
mov eax edi +
push eax  +
lea eax [esi+2B14h] +
push 0  +
push eax  +
call memset  +
mov edi 0F9h +
push edi  +
lea eax [esi+0CB8h] +
push 0  +
push eax  +
call memset  +
push edi  +
push 0  +
add esi 2DB4h +
push esi  +
call memset  +
add esp 24h +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor ecx ecx +
inc ecx  +
xor edx edx +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
mov [eax+2EC0h] edx +
mov [eax+2B10h] edx +
mov [eax+2EDCh] ecx +
mov [eax+2ED4h] edx +
mov [eax+2ED8h] edx +
mov [eax+2EB8h] ecx +
mov [eax+2EC4h] edx +
mov [eax+2EBCh] edx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
xor edi edi +
mov [ebp+var_4] edi +
jmp loc_1027732  +
cmp dword ptr [ebx+2EDCh] 1 +
jnz loc_102770D  +
lea eax [ebx+2EB8h] +
cmp [eax] edi +
jz loc_102758E  +
mov [eax] edi +
mov dword ptr [ebx+2EC4h] 0B71B00h +
cmp dword ptr [ebx+2ED8h] 3 +
jnz loc_10275BF  +
test byte ptr [ebx+2ED0h] 1 +
jz loc_10275B3  +
lea eax [ebx+2B04h] +
mov ecx [eax] +
cmp ecx [ebx+2B08h] +
jnb loc_10275B3  +
inc ecx  +
mov [eax] ecx +
push ebx  +
mov [ebx+2ED8h] edi +
call sub_1027771  +
push 3  +
push ebx  +
call sub_1027899  +
push 1  +
push ebx  +
mov [ebx+2ED8h] eax +
call sub_1027899  +
test eax eax +
jz loc_10275E5  +
mov dword ptr [ebx+2ED4h] 8000h +
jmp loc_1027602  +
push 8  +
push ebx  +
call sub_1027899  +
push 8  +
push ebx  +
mov esi eax +
call sub_1027899  +
shl esi 8 +
add eax esi +
mov [ebx+2ED4h] eax +
cmp dword ptr [ebx+2ED8h] 2 +
mov eax [ebx+2ED4h] +
mov [ebx+2ED0h] eax +
jnz loc_102761D  +
push ebx  +
call sub_102A64A  +
mov eax [ebx+2ED8h] +
cmp eax 1 +
jz loc_1027644  +
cmp eax 2 +
jz loc_1027644  +
cmp eax 3 +
jnz loc_102763C  +
push ebx  +
call sub_102970C  +
test eax eax +
jnz loc_102768E  +
or eax 0FFFFFFFFh +
jmp loc_1027765  +
movzx ecx byte ptr [ebx+2EB5h] +
lea ecx ds:100h[ecx*8] +
mov eax 2A0h +
cmp ecx eax +
jge loc_102765D  +
mov eax ecx +
push eax  +
lea eax [ebx+0A18h] +
push eax  +
lea eax [ebx+2B14h] +
push eax  +
call memcpy  +
add esp 0Ch +
push 3Eh  +
pop ecx  +
lea esi [ebx+0CB8h] +
lea edi [ebx+2DB4h] +
movs   +
push ebx  +
movs   +
call sub_102A57B  +
xor edi edi +
mov dword ptr [ebx+2EDCh] 2 +
jmp loc_102770D  +
cmp [ebp+arg_4] edi +
jle loc_1027715  +
mov esi [ebx+2ED4h] +
cmp esi [ebp+arg_4] +
jl loc_10276AD  +
mov esi [ebp+arg_4] +
cmp esi edi +
jz loc_102763C  +
mov eax [ebx+2EC0h] +
mov edx [ebx+2ED8h] +
lea ecx [eax+esi] +
cmp ecx eax +
jl loc_10276F6  +
cmp ecx [ebx+4] +
jg loc_10276F6  +
cmp edx 2 +
jnz loc_10276D8  +
push esi  +
push eax  +
push ebx  +
call sub_102A2AC  +
jmp loc_10276F9  +
cmp edx 1 +
jnz loc_10276E7  +
push esi  +
push eax  +
push ebx  +
call sub_1029C46  +
jmp loc_10276F9  +
cmp edx 3 +
jnz loc_10276F6  +
push esi  +
push eax  +
push ebx  +
call sub_1029687  +
jmp loc_10276F9  +
or eax 0FFFFFFFFh +
cmp eax edi +
jnz loc_102763C  +
sub [ebx+2ED4h] esi +
sub [ebp+arg_4] esi +
add [ebp+var_4] esi +
cmp [ebx+2ED4h] edi +
jg loc_102769A  +
cmp [ebx+2ED4h] edi +
jnz loc_1027727  +
mov dword ptr [ebx+2EDCh] 1 +
cmp [ebp+arg_4] edi +
jnz loc_1027735  +
push ebx  +
call sub_1027771  +
cmp [ebp+arg_4] edi +
jg loc_102756B  +
mov eax [ebx+2EC0h] +
cmp eax edi +
jnz loc_1027748  +
mov eax [ebx+4] +
sub eax [ebp+var_4] +
mov ecx 9800h +
add eax [ebx] +
cmp [ebp+var_4] ecx +
jge loc_102775A  +
mov ecx [ebp+var_4] +
push eax  +
push ecx  +
push ebx  +
call sub_102A2FE  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
cmp dword ptr [ecx+2ED8h] 3 +
jz loc_10277C8  +
mov eax [ecx+2B04h] +
lea edx [eax+4] +
cmp edx [ecx+2B08h] +
ja loc_10277C8  +
push esi  +
movzx esi byte ptr [eax+1] +
push edi  +
movzx edi byte ptr [eax] +
shl esi 8 +
or esi edi +
movzx edi byte ptr [eax+3] +
movzx eax byte ptr [eax+2] +
shl esi 8 +
or esi edi +
shl esi 8 +
or esi eax +
pop edi  +
mov [ecx+2EB0h] esi +
mov byte ptr [ecx+2EB4h] 10h +
mov [ecx+2B04h] edx +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp sub_1027771  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
sub [eax+2EB4h] cl +
shl dword ptr [eax+2EB0h] cl +
push ebx  +
mov bl [eax+2EB4h] +
push esi  +
mov esi [eax+2EB0h] +
test bl bl +
jg loc_102788E  +
mov edx [eax+2B04h] +
cmp edx [eax+2B08h] +
jb loc_1027828  +
mov dword ptr [eax+2EBCh] 1 +
jmp loc_102788E  +
movzx ecx byte ptr [edx] +
push edi  +
movzx edi byte ptr [edx+1] +
shl edi 8 +
or edi ecx +
movsx ecx bl +
neg ecx  +
shl edi cl +
add bl 10h +
add edx 2 +
mov [eax+2B04h] edx +
or edi esi +
mov [eax+2EB0h] edi +
mov [eax+2EB4h] bl +
pop edi  +
test bl bl +
jg loc_102788E  +
cmp edx [eax+2B08h] +
jnb loc_102781C  +
movzx esi byte ptr [edx+1] +
movzx ecx byte ptr [edx] +
shl esi 8 +
or esi ecx +
movsx ecx bl +
neg ecx  +
shl esi cl +
add edx 2 +
mov [eax+2B04h] edx +
or [eax+2EB0h] esi +
add bl 10h +
mov [eax+2EB4h] bl +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi [eax+2EB0h] +
push 20h  +
pop ecx  +
push [ebp+arg_4]  +
sub ecx [ebp+arg_4] +
push eax  +
shr esi cl +
call sub_10277E1  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov dl [eax+18h] +
movsx ecx dl +
sub ecx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_8] +
shl esi cl +
mov cl dl +
sub cl byte ptr [ebp+arg_4] +
or [eax+14h] esi +
cmp cl 10h +
mov [eax+18h] cl +
pop esi  +
jg loc_102793E  +
mov ecx [eax+860h] +
cmp ecx [eax+864h] +
jb loc_102790E  +
mov ecx [eax+85Ch] +
mov dword ptr [eax+1Ch] 1 +
mov [eax+860h] ecx +
mov ecx [eax+860h] +
mov dl [eax+16h] +
mov [ecx] dl +
inc dword ptr [eax+860h]  +
mov ecx [eax+860h] +
mov dl [eax+17h] +
mov [ecx] dl +
inc dword ptr [eax+860h]  +
shl dword ptr [eax+14h] 10h +
add byte ptr [eax+18h] 10h +
cmp byte ptr [eax+18h] 10h +
jle loc_10278ED  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push 9800h  +
call dword ptr [esi+4344h]  +
pop ecx  +
mov [esi+85Ch] eax +
test eax eax +
jz loc_102797A  +
mov [esi+860h] eax +
add eax 97C0h +
mov [esi+864h] eax +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
lea esi [eax+85Ch] +
mov ecx [esi] +
test ecx ecx +
jz loc_10279A4  +
push ecx  +
call dword ptr [eax+4348h]  +
and dword ptr [esi] 0 +
pop ecx  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
and dword ptr [eax+99Ch] 0 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [esi+998h] +
cmp ebx eax +
push edi  +
mov [ebp+var_4] eax +
jg loc_10279FA  +
push ebx  +
lea edi [esi+994h] +
push dword ptr [edi]  +
push [ebp+arg_0]  +
call memcpy  +
sub [esi+998h] ebx +
add esp 0Ch +
add [edi] ebx +
mov eax ebx +
jmp loc_1027A28  +
test eax eax +
jg loc_1027A02  +
xor eax eax +
jmp loc_1027A28  +
push eax  +
lea edi [esi+994h] +
push dword ptr [edi]  +
push [ebp+arg_0]  +
call memcpy  +
mov eax [esi+998h] +
add [edi] eax +
mov eax [ebp+var_4] +
add esp 0Ch +
and dword ptr [esi+998h] 0 +
pop edi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_1049010 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
cmp ebx 9 +
jg loc_1027A58  +
add [ecx+99Ch] ebx +
jmp loc_1027AE4  +
lea eax [edx+ebx] +
mov [ebp+var_10] eax +
push esi  +
push edi  +
add eax 0FFFFFFFAh +
mov esi eax +
lea edi [ebp+var_C] +
movs   +
movs   +
mov edi [ebp+var_10] +
add edi 0FFFFFFFAh +
mov eax 0E8E8E8E8h +
stos   +
stos   +
mov eax [ecx+99Ch] +
lea ebx [eax+ebx-0Ah] +
mov [ebp+var_14] ebx +
jmp loc_1027A8F  +
inc edx  +
inc dword ptr [ecx+99Ch]  +
cmp byte ptr [edx] 0E8h +
jnz loc_1027A88  +
mov eax [ecx+99Ch] +
inc edx  +
cmp eax ebx +
jnb loc_1027ACD  +
mov esi [edx] +
lea edi [eax+esi] +
test edi edi +
jl loc_1027ABE  +
mov ebx [ecx+874h] +
add eax ebx +
cmp edi eax +
jnb loc_1027ABE  +
cmp edi ebx +
jb loc_1027ABC  +
sub esi ebx +
mov edi esi +
mov [edx] edi +
mov ebx [ebp+var_14] +
add edx 4 +
add dword ptr [ecx+99Ch] 5 +
jmp loc_1027A8F  +
mov edi [ebp+var_10] +
add edi 0FFFFFFFAh +
lea esi [ebp+var_C] +
movs   +
movs   +
add ebx 0Ah +
pop edi  +
mov [ecx+99Ch] ebx +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop ebx  +
call sub_1010796  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_8] +
test ebx ebx +
jg loc_1027B09  +
xor eax eax +
jmp loc_1027B5D  +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+4330h] +
add eax [ebp+arg_4] +
push eax  +
call sub_10279C6  +
mov ebx eax +
test ebx ebx +
jge loc_1027B26  +
xor eax eax +
jmp loc_1027B5C  +
cmp dword ptr [esi+874h] 0 +
push edi  +
jz loc_1027B55  +
lea edi [esi+433Ch] +
cmp dword ptr [edi] 8000h +
jnb loc_1027B55  +
mov edx [esi+4330h] +
add edx [ebp+arg_4] +
push ebx  +
mov ecx esi +
call sub_1027A32  +
inc dword ptr [edi]  +
mov eax ebx +
jmp loc_1027B5B  +
inc dword ptr [esi+433Ch]  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0CCh +
mov eax dword_1049010 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
push 60h  +
mov [ebp+var_B4] eax +
lea eax [ebp+var_7C] +
mov ebx ecx +
mov esi edx +
push 0  +
push eax  +
mov [ebp+var_C0] ebx +
mov [ebp+var_C4] esi +
mov [ebp+var_BC] edi +
call memset  +
add edi ebx +
mov al [edi] +
mov [ebp+var_B5] al +
xor eax eax +
add esp 0Ch +
cmp [ebp+var_BC] eax +
mov [ebp+var_CC] edi +
mov byte ptr [edi] 7Bh +
jle loc_1027C95  +
mov cl [ebx+eax] +
and [ebp+var_B0] 0 +
lea edx [ebx+eax+1] +
cmp [edx] cl +
jnz loc_1027C70  +
mov [ebp+var_C8] edx +
inc [ebp+var_B0]  +
inc [ebp+var_C8]  +
mov edx [ebp+var_C8] +
cmp [edx] cl +
jz loc_1027BEE  +
cmp [ebp+var_B0] 4 +
jl loc_1027C70  +
test cl cl +
jnz loc_1027C37  +
push 33h  +
pop ecx  +
cmp [ebp+var_B0] ecx +
jle loc_1027C22  +
mov [ebp+var_B0] ecx +
cmp [ebp+var_B0] 13h +
jg loc_1027C31  +
inc [ebp+var_5A]  +
jmp loc_1027C64  +
inc [ebp+var_58]  +
jmp loc_1027C64  +
push 5  +
pop ecx  +
cmp [ebp+var_B0] ecx +
jle loc_1027C48  +
mov [ebp+var_B0] ecx +
movzx ecx byte ptr [esi+eax] +
movzx edx byte ptr [ebx+eax] +
sub ecx edx +
movzx ecx ds:byte_1003A85[ecx] +
lea ecx [ebp+ecx*2+var_7C] +
inc word ptr [ecx]  +
inc [ebp+var_56]  +
mov ecx [ebp+var_B0] +
lea eax [eax+ecx-1] +
jmp loc_1027C88  +
movzx ecx byte ptr [esi+eax] +
movzx edx byte ptr [ebx+eax] +
sub ecx edx +
movzx ecx ds:byte_1003A85[ecx] +
lea ecx [ebp+ecx*2+var_7C] +
inc word ptr [ecx]  +
inc eax  +
cmp eax [ebp+var_BC] +
jl loc_1027BD2  +
push 1  +
lea eax [ebp+var_AC] +
push eax  +
lea eax [ebp+var_1C] +
push eax  +
lea eax [ebp+var_7C] +
push eax  +
push 14h  +
push [ebp+var_B4]  +
call sub_102AA3A  +
xor esi esi +
movsx eax byte ptr [ebp+esi+var_1C] +
push eax  +
push 4  +
push [ebp+var_B4]  +
call sub_10278C5  +
inc esi  +
cmp esi 14h +
jl loc_1027CB5  +
xor esi esi +
cmp [ebp+var_BC] esi +
jle loc_1027DCD  +
lea eax [ebx+esi+1] +
mov bl [ebx+esi] +
xor edi edi +
cmp [eax] bl +
jnz loc_1027D17  +
inc edi  +
inc eax  +
cmp [eax] bl +
jz loc_1027CE9  +
cmp edi 4 +
jl loc_1027D17  +
test bl bl +
jnz loc_1027D0B  +
cmp edi 33h +
jle loc_1027D00  +
push 33h  +
pop edi  +
cmp edi 13h +
setnle bl  +
add bl 11h +
jmp loc_1027D2C  +
cmp edi 5 +
jle loc_1027D13  +
push 5  +
pop edi  +
mov bl 13h +
jmp loc_1027D2C  +
mov eax [ebp+var_C4] +
movzx eax byte ptr [eax+esi] +
movzx ecx bl +
sub eax ecx +
mov bl ds:byte_1003A85[eax] +
movsx eax bl +
movzx ecx word ptr [ebp+eax*2+var_AC] +
movsx eax byte ptr [ebp+eax+var_1C] +
push ecx  +
push eax  +
push [ebp+var_B4]  +
call sub_10278C5  +
cmp bl 11h +
jnz loc_1027D56  +
lea eax [edi-4] +
push eax  +
push 4  +
jmp loc_1027DA5  +
cmp bl 12h +
jnz loc_1027D63  +
lea eax [edi-14h] +
push eax  +
push 5  +
jmp loc_1027DA5  +
cmp bl 13h +
jnz loc_1027DB4  +
lea eax [edi-4] +
push eax  +
push 1  +
push [ebp+var_B4]  +
call sub_10278C5  +
mov eax [ebp+var_C4] +
movzx eax byte ptr [eax+esi] +
mov ecx [ebp+var_C0] +
movzx ecx byte ptr [ecx+esi] +
sub eax ecx +
movsx eax ds:byte_1003A85[eax] +
movzx ecx word ptr [ebp+eax*2+var_AC] +
movsx eax byte ptr [ebp+eax+var_1C] +
push ecx  +
push eax  +
push [ebp+var_B4]  +
call sub_10278C5  +
lea esi [esi+edi-1] +
mov ebx [ebp+var_C0] +
inc esi  +
cmp esi [ebp+var_BC] +
jl loc_1027CDC  +
mov edi [ebp+var_CC] +
push [ebp+var_BC]  +
mov al [ebp+var_B5] +
push ebx  +
push [ebp+var_C4]  +
mov [edi] al +
call memcpy  +
mov ecx [ebp+var_4] +
add esp 0Ch +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010796  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi [ebp+arg_0] +
lea eax [esi+33E8h] +
push eax  +
lea eax [esi+2540h] +
push eax  +
lea eax [esi+28F8h] +
push eax  +
mov eax [esi+870h] +
lea eax ds:100h[eax*8] +
push eax  +
push esi  +
call sub_102AA3A  +
push [ebp+arg_4]  +
lea eax [esi+4002h] +
push eax  +
lea eax [esi+27FDh] +
push eax  +
lea eax [esi+3C1Eh] +
push eax  +
push 0F9h  +
push esi  +
call sub_102AA3A  +
push 1  +
lea eax [esi+430Eh] +
push eax  +
lea eax [esi+431Eh] +
push eax  +
lea eax [esi+42EEh] +
push eax  +
push 8  +
push esi  +
call sub_102AA3A  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
movzx eax byte ptr [ecx+55Ch] +
add eax 12h +
lea edx [ecx+870h] +
cmp eax [edx] +
jnb loc_1027EAF  +
lea ecx [ecx+eax*8+2640h] +
mov byte ptr [ecx] 64h +
inc eax  +
add ecx 8 +
cmp eax [edx] +
jb loc_1027EA4  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push 100h  +
lea edx [esi+3960h] +
lea ecx [esi+2540h] +
push esi  +
call sub_1027B67  +
mov eax [esi+870h] +
shl eax 3 +
push eax  +
lea edx [esi+3A60h] +
lea ecx [esi+2640h] +
push esi  +
call sub_1027B67  +
push 0F9h  +
lea edx [esi+41F4h] +
lea ecx [esi+27FDh] +
push esi  +
call sub_1027B67  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push 1  +
lea eax [esi+430Eh] +
push eax  +
lea edi [esi+431Eh] +
push edi  +
lea eax [esi+42EEh] +
push eax  +
push 8  +
push esi  +
call sub_102AA3A  +
xor ebx ebx +
movzx eax byte ptr [edi+ebx] +
push eax  +
push 3  +
push esi  +
call sub_10278C5  +
inc ebx  +
cmp ebx 8 +
jl loc_1027F41  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor ecx ecx +
lea edx [eax+ecx+2540h] +
cmp byte ptr [edx] 0 +
jnz loc_1027F79  +
mov byte ptr [edx] 0Bh +
inc ecx  +
cmp ecx 100h +
jb loc_1027F6A  +
jmp loc_1027F94  +
lea edx [eax+ecx+2540h] +
cmp byte ptr [edx] 0 +
jnz loc_1027F93  +
mov byte ptr [edx] 0Ch +
inc ecx  +
mov edx [eax+870h] +
lea edx ds:100h[edx*8] +
cmp ecx edx +
jb loc_1027F84  +
lea ecx [eax+27FDh] +
mov edx 0F9h +
cmp byte ptr [ecx] 0 +
jnz loc_1027FB8  +
mov byte ptr [ecx] 8 +
inc ecx  +
dec edx  +
jnz loc_1027FB0  +
push eax  +
call sub_1027E81  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push 2  +
pop ebx  +
push 4  +
mov byte ptr [esi+45Ch] 0 +
mov byte ptr [esi+45Dh] 1 +
mov [esi+45Eh] bl +
mov byte ptr [esi+45Fh] 3 +
mov byte ptr [ebp+arg_0] 4 +
pop edi  +
test ebx ebx +
jle loc_1028015  +
push ebx  +
push [ebp+arg_0]  +
lea eax [edi+esi+45Ch] +
push eax  +
call memset  +
add esp 0Ch +
add edi ebx +
inc byte ptr [ebp+arg_0]  +
test ebx ebx +
jle loc_1028032  +
push ebx  +
push [ebp+arg_0]  +
lea eax [edi+esi+45Ch] +
push eax  +
call memset  +
add esp 0Ch +
add edi ebx +
inc byte ptr [ebp+arg_0]  +
add ebx ebx +
cmp edi 400h +
jl loc_1027FFB  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
xor cl cl +
mov edx eax +
test eax eax +
jz loc_1028065  +
test dl 1 +
jz loc_1028061  +
inc cl  +
sar edx 1 +
jnz loc_102805A  +
mov edx [ebp+arg_0] +
mov [edx+eax+87Dh] cl +
inc eax  +
cmp eax 100h +
jl loc_1028052  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
lea ecx [edi-1] +
xor dl dl +
test ecx ecx +
jl loc_10280B9  +
mov esi [eax+2Ch] +
lea esi [esi+ecx*4] +
cmp dword ptr [esi] 2 +
jbe loc_10280AA  +
inc dl  +
cmp dl 3 +
jnb loc_10280BB  +
jmp loc_10280AC  +
xor dl dl +
dec ecx  +
sub esi 4 +
test ecx ecx +
jge loc_102809C  +
cmp dl 3 +
jnb loc_10280BB  +
xor ecx ecx +
cmp ecx edi +
jge loc_10280F7  +
push ebx  +
mov edx [eax+2Ch] +
mov edx [edx+ecx*4] +
test edx edx +
jz loc_10280F1  +
cmp edx 2 +
ja loc_10280DF  +
mov ebx [eax+38h] +
lea edx [eax+edx*4+38h] +
mov esi [edx] +
mov [edx] ebx +
mov [eax+38h] esi +
jmp loc_10280F1  +
mov esi [eax+3Ch] +
mov [eax+40h] esi +
mov esi [eax+38h] +
add edx 0FFFFFFFEh +
mov [eax+3Ch] esi +
mov [eax+38h] edx +
inc ecx  +
cmp ecx edi +
jl loc_10280C0  +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
push esi  +
mov [ebp+var_4] 4B0h +
xor edx edx +
lea ecx [eax+28F8h] +
push edi  +
movzx edi word ptr [ecx] +
movzx esi byte ptr [eax+edx+2540h] +
imul esi edi +
add [ebp+var_4] esi +
inc edx  +
inc ecx  +
inc ecx  +
cmp edx 100h +
jb loc_102811D  +
cmp dword ptr [eax+870h] 0 +
mov byte ptr [ebp+arg_0+3] 0 +
jbe loc_1028192  +
xor edx edx +
push ebx  +
movzx esi ds:byte_100393C[edx] +
lea ecx ds:100h[edx*8] +
lea edx [ecx+eax+2540h] +
lea ecx [eax+ecx*2+28F8h] +
mov [ebp+var_8] 8 +
movzx edi byte ptr [edx] +
movzx ebx word ptr [ecx] +
add edi esi +
imul edi ebx +
add [ebp+var_4] edi +
inc ecx  +
inc ecx  +
inc edx  +
dec [ebp+var_8]  +
jnz loc_102816C  +
inc byte ptr [ebp+arg_0+3]  +
movzx edx byte ptr [ebp+arg_0+3] +
cmp edx [eax+870h] +
jb loc_1028149  +
pop ebx  +
xor edx edx +
lea ecx [eax+3C1Eh] +
movzx edi word ptr [ecx] +
movzx esi byte ptr [eax+edx+27FDh] +
imul esi edi +
add [ebp+var_4] esi +
inc edx  +
inc ecx  +
inc ecx  +
cmp edx 0F9h +
jb loc_102819A  +
mov eax [ebp+var_4] +
add eax 7 +
pop edi  +
shr eax 3 +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi+868h] 0 +
jbe loc_102820B  +
push esi  +
call sub_102696F  +
mov ecx [esi+85Ch] +
mov eax [esi+860h] +
sub eax ecx +
test eax eax +
jle loc_102820B  +
push dword ptr [esi+868h]  +
push eax  +
push ecx  +
push dword ptr [esi+4340h]  +
call dword ptr [esi+434Ch]  +
add esp 10h +
mov eax [esi+85Ch] +
and dword ptr [esi+868h] 0 +
and dword ptr [esi+14h] 0 +
mov [esi+860h] eax +
mov byte ptr [esi+18h] 20h +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
movsx eax byte ptr [esi+18h] +
push edi  +
push 0  +
sub eax 10h +
push eax  +
push esi  +
call sub_10278C5  +
push 3  +
pop edi  +
lea ecx [esi+38h] +
push ebx  +
mov eax [ecx] +
push 4  +
pop edx  +
mov ebx [esi+860h] +
mov [ebx] al +
inc dword ptr [esi+860h]  +
shr eax 8 +
dec edx  +
jnz loc_1028256  +
add ecx 4 +
dec edi  +
jnz loc_1028251  +
mov edi [ebp+arg_8] +
and edi 1 +
cmp [ebp+arg_8] edx +
jbe loc_10282BA  +
mov ebx [ebp+arg_4] +
mov eax [esi] +
mov al [ebx+eax] +
mov ecx [esi+860h] +
mov [ecx] al +
inc dword ptr [esi+860h]  +
inc ebx  +
dec [ebp+arg_8]  +
inc dword ptr [esi+868h]  +
cmp dword ptr [esi+868h] 8000h +
jnz loc_10282B4  +
push esi  +
call sub_10281CA  +
mov byte ptr [esi+87Ch] 0 +
cmp [ebp+arg_8] 0 +
ja loc_102827E  +
pop ebx  +
test edi edi +
jz loc_10282CE  +
mov eax [esi+860h] +
mov byte ptr [eax] 0 +
inc dword ptr [esi+860h]  +
and dword ptr [esi+14h] 0 +
pop edi  +
mov byte ptr [esi+18h] 20h +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push edi  +
xor edi edi +
cmp [ebp+arg_4] edi +
jbe loc_102861A  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov [ebp+arg_0] edi +
mov edx [esi+34h] +
xor eax eax +
mov ecx edi +
and ecx 7 +
inc eax  +
shl eax cl +
mov ecx edi +
shr ecx 3 +
mov cl [ecx+edx] +
test al cl +
mov eax [esi+30h] +
jnz loc_10283A2  +
movzx eax byte ptr [edi+eax] +
movsx ecx byte ptr [esi+18h] +
lea edx [eax+esi+2540h] +
movzx ebx byte ptr [edx] +
movzx eax word ptr [esi+eax*2+33E8h] +
sub ecx ebx +
shl eax cl +
or [esi+14h] eax +
mov al [edx] +
sub [esi+18h] al +
jmp loc_1028390  +
mov eax [esi+860h] +
cmp eax [esi+864h] +
jb loc_1028366  +
mov eax [esi+85Ch] +
mov dword ptr [esi+1Ch] 1 +
mov [esi+860h] eax +
mov eax [esi+860h] +
mov cl [esi+16h] +
mov [eax] cl +
inc dword ptr [esi+860h]  +
mov eax [esi+860h] +
mov cl [esi+17h] +
mov [eax] cl +
inc dword ptr [esi+860h]  +
shl dword ptr [esi+14h] 10h +
add byte ptr [esi+18h] 10h +
cmp byte ptr [esi+18h] 10h +
jle loc_1028345  +
inc edi  +
inc dword ptr [esi+868h]  +
jmp loc_10285F6  +
mov bl [edi+eax] +
mov ecx [ebp+arg_0] +
mov eax [esi+2Ch] +
mov eax [ecx+eax] +
add [ebp+arg_0] 4 +
inc edi  +
mov [ebp+var_C] edi +
mov [ebp+var_8] eax +
cmp eax 400h +
jnb loc_10283C9  +
mov al [eax+esi+45Ch] +
jmp loc_10283E3  +
cmp eax 80000h +
jnb loc_10283DE  +
shr eax 9 +
mov al [eax+esi+45Ch] +
add al 12h +
jmp loc_10283E3  +
shr eax 11h +
add al 22h +
movzx eax al +
cmp bl 7 +
jnb loc_1028477  +
movzx edx bl +
lea ecx [edx+eax*8+2640h] +
add ecx esi +
movzx ebx byte ptr [ecx] +
mov [ebp+var_4] ecx +
movsx ecx byte ptr [esi+18h] +
lea edi [edx+eax*8] +
movzx edi word ptr [esi+edi*2+35E8h] +
sub ecx ebx +
shl edi cl +
mov ecx [ebp+var_4] +
or [esi+14h] edi +
mov cl [ecx] +
sub [esi+18h] cl +
jmp loc_102846C  +
mov ecx [esi+860h] +
cmp ecx [esi+864h] +
jb loc_1028442  +
mov ecx [esi+85Ch] +
mov dword ptr [esi+1Ch] 1 +
mov [esi+860h] ecx +
mov ecx [esi+860h] +
mov bl [esi+16h] +
mov [ecx] bl +
inc dword ptr [esi+860h]  +
mov edi [esi+860h] +
mov cl [esi+17h] +
mov [edi] cl +
inc dword ptr [esi+860h]  +
shl dword ptr [esi+14h] 10h +
add byte ptr [esi+18h] 10h +
cmp byte ptr [esi+18h] 10h +
jle loc_1028421  +
jmp loc_102856C  +
movsx ecx byte ptr [esi+18h] +
lea edx [esi+eax*8+2647h] +
movzx edi byte ptr [edx] +
sub ecx edi +
mov edi eax +
shl edi 4 +
movzx edi word ptr [edi+esi+35F6h] +
shl edi cl +
or [esi+14h] edi +
mov cl [edx] +
sub [esi+18h] cl +
jmp loc_10284EB  +
mov ecx [esi+860h] +
cmp ecx [esi+864h] +
jb loc_10284C1  +
mov ecx [esi+85Ch] +
mov dword ptr [esi+1Ch] 1 +
mov [esi+860h] ecx +
mov ecx [esi+860h] +
mov dl [esi+16h] +
mov [ecx] dl +
inc dword ptr [esi+860h]  +
mov ecx [esi+860h] +
mov dl [esi+17h] +
mov [ecx] dl +
inc dword ptr [esi+860h]  +
shl dword ptr [esi+14h] 10h +
add byte ptr [esi+18h] 10h +
cmp byte ptr [esi+18h] 10h +
jle loc_10284A0  +
movsx ecx byte ptr [esi+18h] +
movzx edx bl +
movzx ebx byte ptr [edx+esi+27F6h] +
movzx edi word ptr [esi+edx*2+3FF4h] +
sub ecx ebx +
shl edi cl +
or [esi+14h] edi +
mov cl [edx+esi+27F6h] +
sub [esi+18h] cl +
jmp loc_1028566  +
mov ecx [esi+860h] +
cmp ecx [esi+864h] +
jb loc_102853C  +
mov ecx [esi+85Ch] +
mov dword ptr [esi+1Ch] 1 +
mov [esi+860h] ecx +
mov ecx [esi+860h] +
mov bl [esi+16h] +
mov [ecx] bl +
inc dword ptr [esi+860h]  +
mov edi [esi+860h] +
mov cl [esi+17h] +
mov [edi] cl +
inc dword ptr [esi+860h]  +
shl dword ptr [esi+14h] 10h +
add byte ptr [esi+18h] 10h +
cmp byte ptr [esi+18h] 10h +
jle loc_102851B  +
mov cl ds:byte_100393C[eax] +
test cl cl +
jz loc_10285EA  +
mov edi ds:dword_1003870[eax*4] +
and edi [ebp+var_8] +
movzx ebx cl +
movsx ecx byte ptr [esi+18h] +
sub ecx ebx +
shl edi cl +
or [esi+14h] edi +
mov al ds:byte_100393C[eax] +
sub [esi+18h] al +
jmp loc_10285E4  +
mov eax [esi+860h] +
cmp eax [esi+864h] +
jb loc_10285BA  +
mov eax [esi+85Ch] +
mov dword ptr [esi+1Ch] 1 +
mov [esi+860h] eax +
mov eax [esi+860h] +
mov cl [esi+16h] +
mov [eax] cl +
inc dword ptr [esi+860h]  +
mov eax [esi+860h] +
mov cl [esi+17h] +
mov [eax] cl +
inc dword ptr [esi+860h]  +
shl dword ptr [esi+14h] 10h +
add byte ptr [esi+18h] 10h +
cmp byte ptr [esi+18h] 10h +
jle loc_1028599  +
mov edi [ebp+var_C] +
add edx 2 +
add [esi+868h] edx +
cmp dword ptr [esi+868h] 8000h +
jnz loc_102860F  +
push esi  +
call sub_10281CA  +
mov byte ptr [esi+87Ch] 0 +
cmp edi [ebp+arg_4] +
jb loc_10282FD  +
pop esi  +
pop ebx  +
pop edi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push edi  +
xor edi edi +
cmp [ebp+arg_4] edi +
jbe loc_1028A6F  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov [ebp+var_4] edi +
mov edx [esi+34h] +
xor eax eax +
mov ecx edi +
and ecx 7 +
inc eax  +
shl eax cl +
mov ecx edi +
shr ecx 3 +
mov cl [ecx+edx] +
test al cl +
mov eax [esi+30h] +
jnz loc_10286E5  +
movzx eax byte ptr [edi+eax] +
movsx ecx byte ptr [esi+18h] +
lea edx [eax+esi+2540h] +
movzx ebx byte ptr [edx] +
movzx eax word ptr [esi+eax*2+33E8h] +
sub ecx ebx +
shl eax cl +
or [esi+14h] eax +
mov al [edx] +
sub [esi+18h] al +
jmp loc_10286D3  +
mov eax [esi+860h] +
cmp eax [esi+864h] +
jb loc_10286A9  +
mov eax [esi+85Ch] +
mov dword ptr [esi+1Ch] 1 +
mov [esi+860h] eax +
mov eax [esi+860h] +
mov cl [esi+16h] +
mov [eax] cl +
inc dword ptr [esi+860h]  +
mov eax [esi+860h] +
mov cl [esi+17h] +
mov [eax] cl +
inc dword ptr [esi+860h]  +
shl dword ptr [esi+14h] 10h +
add byte ptr [esi+18h] 10h +
cmp byte ptr [esi+18h] 10h +
jle loc_1028688  +
inc edi  +
inc dword ptr [esi+868h]  +
jmp loc_1028A4B  +
mov cl [edi+eax] +
mov edx [ebp+var_4] +
mov eax [esi+2Ch] +
mov eax [edx+eax] +
add [ebp+var_4] 4 +
inc edi  +
mov byte ptr [ebp+arg_0+3] cl +
mov [ebp+var_C] edi +
mov [ebp+var_8] eax +
cmp eax 400h +
jnb loc_102870F  +
mov al [eax+esi+45Ch] +
jmp loc_1028729  +
cmp eax 80000h +
jnb loc_1028724  +
shr eax 9 +
mov al [eax+esi+45Ch] +
add al 12h +
jmp loc_1028729  +
shr eax 11h +
add al 22h +
movzx eax al +
cmp cl 7 +
jnb loc_10287BD  +
movzx edi cl +
lea ecx [edi+eax*8+2640h] +
add ecx esi +
movzx ebx byte ptr [ecx] +
mov [ebp+arg_0] ecx +
movsx ecx byte ptr [esi+18h] +
lea edx [edi+eax*8] +
movzx edx word ptr [esi+edx*2+35E8h] +
sub ecx ebx +
shl edx cl +
mov ecx [ebp+arg_0] +
or [esi+14h] edx +
mov cl [ecx] +
sub [esi+18h] cl +
jmp loc_10287B2  +
mov ecx [esi+860h] +
cmp ecx [esi+864h] +
jb loc_1028788  +
mov ecx [esi+85Ch] +
mov dword ptr [esi+1Ch] 1 +
mov [esi+860h] ecx +
mov ecx [esi+860h] +
mov dl [esi+16h] +
mov [ecx] dl +
inc dword ptr [esi+860h]  +
mov ecx [esi+860h] +
mov dl [esi+17h] +
mov [ecx] dl +
inc dword ptr [esi+860h]  +
shl dword ptr [esi+14h] 10h +
add byte ptr [esi+18h] 10h +
cmp byte ptr [esi+18h] 10h +
jle loc_1028767  +
jmp loc_10288B3  +
mov ecx eax +
shl ecx 4 +
movzx edi word ptr [ecx+esi+35F6h] +
movsx ecx byte ptr [esi+18h] +
lea edx [esi+eax*8+2647h] +
movzx ebx byte ptr [edx] +
sub ecx ebx +
shl edi cl +
or [esi+14h] edi +
mov cl [edx] +
sub [esi+18h] cl +
jmp loc_1028831  +
mov ecx [esi+860h] +
cmp ecx [esi+864h] +
jb loc_1028807  +
mov ecx [esi+85Ch] +
mov dword ptr [esi+1Ch] 1 +
mov [esi+860h] ecx +
mov ecx [esi+860h] +
mov dl [esi+16h] +
mov [ecx] dl +
inc dword ptr [esi+860h]  +
mov ecx [esi+860h] +
mov dl [esi+17h] +
mov [ecx] dl +
inc dword ptr [esi+860h]  +
shl dword ptr [esi+14h] 10h +
add byte ptr [esi+18h] 10h +
cmp byte ptr [esi+18h] 10h +
jle loc_10287E6  +
movzx edi byte ptr [ebp+arg_0+3] +
movzx ebx byte ptr [edi+esi+27F6h] +
movsx ecx byte ptr [esi+18h] +
movzx edx word ptr [esi+edi*2+3FF4h] +
sub ecx ebx +
shl edx cl +
or [esi+14h] edx +
mov cl [edi+esi+27F6h] +
sub [esi+18h] cl +
jmp loc_10288AD  +
mov ecx [esi+860h] +
cmp ecx [esi+864h] +
jb loc_1028883  +
mov ecx [esi+85Ch] +
mov dword ptr [esi+1Ch] 1 +
mov [esi+860h] ecx +
mov ecx [esi+860h] +
mov dl [esi+16h] +
mov [ecx] dl +
inc dword ptr [esi+860h]  +
mov ecx [esi+860h] +
mov dl [esi+17h] +
mov [ecx] dl +
inc dword ptr [esi+860h]  +
shl dword ptr [esi+14h] 10h +
add byte ptr [esi+18h] 10h +
cmp byte ptr [esi+18h] 10h +
jle loc_1028862  +
mov cl ds:byte_100393C[eax] +
cmp cl 3 +
jb loc_10289C7  +
jbe loc_1028948  +
movzx edx cl +
xor ebx ebx +
inc ebx  +
lea ecx [edx-3] +
shl ebx cl +
mov ecx [ebp+var_8] +
shr ecx 3 +
dec ebx  +
and ebx ecx +
movsx ecx byte ptr [esi+18h] +
sub ecx edx +
add ecx 3 +
shl ebx cl +
mov cl 3 +
or [esi+14h] ebx +
sub cl ds:byte_100393C[eax] +
add [esi+18h] cl +
jmp loc_1028942  +
mov eax [esi+860h] +
cmp eax [esi+864h] +
jb loc_1028918  +
mov eax [esi+85Ch] +
mov dword ptr [esi+1Ch] 1 +
mov [esi+860h] eax +
mov eax [esi+860h] +
mov cl [esi+16h] +
mov [eax] cl +
inc dword ptr [esi+860h]  +
mov eax [esi+860h] +
mov cl [esi+17h] +
mov [eax] cl +
inc dword ptr [esi+860h]  +
shl dword ptr [esi+14h] 10h +
add byte ptr [esi+18h] 10h +
cmp byte ptr [esi+18h] 10h +
jle loc_10288F7  +
mov al byte ptr [ebp+var_8] +
movsx ecx byte ptr [esi+18h] +
and al 7 +
movzx eax al +
lea edx [eax+esi+431Eh] +
movzx ebx byte ptr [edx] +
movzx eax word ptr [esi+eax*2+430Eh] +
sub ecx ebx +
shl eax cl +
or [esi+14h] eax +
mov al [edx] +
sub [esi+18h] al +
jmp loc_10289BF  +
mov eax [esi+860h] +
cmp eax [esi+864h] +
jb loc_1028995  +
mov eax [esi+85Ch] +
mov dword ptr [esi+1Ch] 1 +
mov [esi+860h] eax +
mov eax [esi+860h] +
mov cl [esi+16h] +
mov [eax] cl +
inc dword ptr [esi+860h]  +
mov eax [esi+860h] +
mov cl [esi+17h] +
mov [eax] cl +
inc dword ptr [esi+860h]  +
shl dword ptr [esi+14h] 10h +
add byte ptr [esi+18h] 10h +
cmp byte ptr [esi+18h] 10h +
jle loc_1028974  +
jmp loc_1028A3F  +
test cl cl +
jz loc_1028A3F  +
mov edx ds:dword_1003870[eax*4] +
and edx [ebp+var_8] +
movzx ebx cl +
movsx ecx byte ptr [esi+18h] +
sub ecx ebx +
shl edx cl +
or [esi+14h] edx +
mov al ds:byte_100393C[eax] +
sub [esi+18h] al +
jmp loc_1028A39  +
mov eax [esi+860h] +
cmp eax [esi+864h] +
jb loc_1028A0F  +
mov eax [esi+85Ch] +
mov dword ptr [esi+1Ch] 1 +
mov [esi+860h] eax +
mov eax [esi+860h] +
mov cl [esi+16h] +
mov [eax] cl +
inc dword ptr [esi+860h]  +
mov eax [esi+860h] +
mov cl [esi+17h] +
mov [eax] cl +
inc dword ptr [esi+860h]  +
shl dword ptr [esi+14h] 10h +
add byte ptr [esi+18h] 10h +
cmp byte ptr [esi+18h] 10h +
jle loc_10289EE  +
add edi 2 +
add [esi+868h] edi +
mov edi [ebp+var_C] +
cmp dword ptr [esi+868h] 8000h +
jnz loc_1028A64  +
push esi  +
call sub_10281CA  +
mov byte ptr [esi+87Ch] 0 +
cmp edi [ebp+arg_4] +
jb loc_1028640  +
pop esi  +
pop ebx  +
pop edi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
xor eax eax +
lea edx [ecx+42EEh] +
mov edi edx +
stos   +
stos   +
stos   +
stos   +
mov edi [ebp+arg_4] +
mov esi [ecx+2Ch] +
xor ebx ebx +
mov [ebp+var_4] ebx +
test edi edi +
jbe loc_1028ABC  +
mov eax [esi] +
add esi 4 +
cmp eax 10h +
jb loc_1028AB9  +
and eax 7 +
lea eax [ecx+eax*2+42EEh] +
inc word ptr [eax]  +
dec edi  +
jnz loc_1028AA2  +
push 8  +
pop ecx  +
movzx eax word ptr [edx] +
cmp eax [ebp+var_4] +
jbe loc_1028ACA  +
mov [ebp+var_4] eax +
add ebx eax +
inc edx  +
inc edx  +
dec ecx  +
jnz loc_1028ABF  +
push 5  +
pop ecx  +
mov eax ebx +
xor edx edx +
div  ecx +
pop edi  +
pop esi  +
pop ebx  +
cmp [ebp+var_4] eax +
jbe loc_1028AED  +
cmp [ebp+arg_4] 64h +
jb loc_1028AED  +
push 2  +
pop eax  +
jmp locret_1028AF0  +
xor eax eax +
inc eax  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_4] 0 +
push edi  +
mov edi ecx +
cmp edi [ebp+arg_0] +
jnb loc_1028C14  +
push ebx  +
shl eax 2 +
push esi  +
mov [ebp+var_8] eax +
mov ebx 400h +
mov esi [edx+34h] +
xor eax eax +
mov ecx edi +
and ecx 7 +
inc eax  +
shl eax cl +
mov ecx edi +
shr ecx 3 +
mov cl [ecx+esi] +
test al cl +
mov eax [edx+30h] +
jnz loc_1028B4F  +
movzx eax byte ptr [eax+edi] +
lea ecx [edx+eax*2+28F8h] +
inc word ptr [ecx]  +
inc [ebp+var_4]  +
jmp loc_1028C08  +
mov ecx [ebp+var_8] +
cmp byte ptr [edi+eax] 7 +
mov eax [edx+2Ch] +
lea esi [eax+ecx] +
mov ecx [esi] +
jnb loc_1028BA4  +
cmp ecx ebx +
jnb loc_1028B70  +
mov eax ecx +
movzx ecx byte ptr [edx+eax+45Ch] +
jmp loc_1028B91  +
cmp ecx 80000h +
jnb loc_1028B88  +
shr ecx 9 +
movzx ecx byte ptr [ecx+edx+45Ch] +
add ecx 12h +
jmp loc_1028B91  +
shr ecx 11h +
movzx ecx cl +
add ecx 22h +
mov eax [edx+30h] +
movzx eax byte ptr [eax+edi] +
lea eax [eax+ecx*8] +
lea ecx [edx+eax*2+2AF8h] +
jmp loc_1028BF0  +
cmp ecx ebx +
jnb loc_1028BB4  +
mov eax ecx +
movzx ecx byte ptr [edx+eax+45Ch] +
jmp loc_1028BD5  +
cmp ecx 80000h +
jnb loc_1028BCC  +
shr ecx 9 +
movzx ecx byte ptr [ecx+edx+45Ch] +
add ecx 12h +
jmp loc_1028BD5  +
shr ecx 11h +
movzx ecx cl +
add ecx 22h +
shl ecx 4 +
lea ecx [ecx+edx+2B06h] +
inc word ptr [ecx]  +
mov eax [edx+30h] +
movzx eax byte ptr [eax+edi] +
lea ecx [edx+eax*2+3C10h] +
inc word ptr [ecx]  +
mov eax [edx+30h] +
movzx eax byte ptr [eax+edi] +
mov ecx [ebp+var_4] +
add [ebp+var_8] 4 +
lea eax [ecx+eax+2] +
mov [ebp+var_4] eax +
inc edi  +
cmp edi [ebp+arg_0] +
jb loc_1028B1D  +
pop esi  +
pop ebx  +
mov eax [ebp+var_4] +
pop edi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+870h] +
add eax 20h +
shl eax 4 +
push eax  +
lea eax [esi+28F8h] +
push 0  +
push eax  +
call memset  +
push 1F2h  +
lea eax [esi+3C1Eh] +
push 0  +
push eax  +
call memset  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_4] +
add esp 18h +
push [ebp+arg_C]  +
mov edx esi +
call sub_1028AF9  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_4] +
mov edx [ebp+arg_0] +
call sub_1028AF9  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0C9Ch +
mov eax dword_1049010 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov [ebp+var_C8C] eax +
mov eax [ebp+arg_4] +
push esi  +
mov esi ecx +
mov [ebp+var_C88] eax +
mov eax [esi+870h] +
add eax 20h +
mov ecx eax +
shl ecx 3 +
mov [ebp+var_C98] ecx +
cmp ecx 320h +
jb loc_1028CE1  +
xor eax eax +
jmp loc_1028F5F  +
push ebx  +
push edi  +
mov edi eax +
shl edi 4 +
push edi  +
lea eax [ebp+var_644] +
push 0  +
push eax  +
call memset  +
push edi  +
lea eax [ebp+var_C84] +
push 0  +
push eax  +
call memset  +
mov eax [ebp+arg_10] +
add esp 18h +
test eax eax +
jbe loc_1028EDC  +
mov ecx [ebp+arg_C] +
mov ebx [esi+30h] +
shl ecx 2 +
mov [ebp+var_C90] ecx +
mov ecx [ebp+arg_8] +
shl ecx 2 +
mov [ebp+var_C94] ecx +
mov [ebp+var_C9C] eax +
mov edi 400h +
mov ecx [ebp+var_C8C] +
mov eax [esi+34h] +
xor edx edx +
and ecx 7 +
inc edx  +
shl edx cl +
mov ecx [ebp+var_C8C] +
shr ecx 3 +
mov al [ecx+eax] +
test dl al +
mov eax [ebp+var_C8C] +
jnz loc_1028D6A  +
movzx eax byte ptr [ebx+eax] +
jmp loc_1028DF5  +
mov dl [ebx+eax] +
mov eax [esi+2Ch] +
mov ecx [ebp+var_C94] +
add ecx eax +
mov eax [ecx] +
cmp dl 7 +
jnb loc_1028DB9  +
cmp eax edi +
jnb loc_1028D8D  +
movzx eax byte ptr [eax+esi+45Ch] +
jmp loc_1028DAD  +
cmp eax 80000h +
jnb loc_1028DA4  +
shr eax 9 +
movzx eax byte ptr [eax+esi+45Ch] +
add eax 12h +
jmp loc_1028DAD  +
shr eax 11h +
movzx eax al +
add eax 22h +
movzx ecx dl +
lea eax [ecx+eax*8+100h] +
jmp loc_1028DEE  +
cmp eax edi +
jnb loc_1028DC7  +
movzx eax byte ptr [eax+esi+45Ch] +
jmp loc_1028DE7  +
cmp eax 80000h +
jnb loc_1028DDE  +
shr eax 9 +
movzx eax byte ptr [eax+esi+45Ch] +
add eax 12h +
jmp loc_1028DE7  +
shr eax 11h +
movzx eax al +
add eax 22h +
lea eax ds:107h[eax*8] +
add [ebp+var_C94] 4 +
mov ecx [ebp+var_C88] +
inc [ebp+var_C8C]  +
xor edx edx +
and ecx 7 +
lea eax [ebp+eax*2+var_644] +
inc word ptr [eax]  +
mov eax [esi+34h] +
inc edx  +
shl edx cl +
mov ecx [ebp+var_C88] +
shr ecx 3 +
mov al [ecx+eax] +
test dl al +
mov eax [ebp+var_C88] +
jnz loc_1028E35  +
movzx eax byte ptr [ebx+eax] +
jmp loc_1028EC0  +
mov dl [ebx+eax] +
mov eax [esi+2Ch] +
mov ecx [ebp+var_C90] +
add ecx eax +
mov eax [ecx] +
cmp dl 7 +
jnb loc_1028E84  +
cmp eax edi +
jnb loc_1028E58  +
movzx eax byte ptr [eax+esi+45Ch] +
jmp loc_1028E78  +
cmp eax 80000h +
jnb loc_1028E6F  +
shr eax 9 +
movzx eax byte ptr [eax+esi+45Ch] +
add eax 12h +
jmp loc_1028E78  +
shr eax 11h +
movzx eax al +
add eax 22h +
movzx ecx dl +
lea eax [ecx+eax*8+100h] +
jmp loc_1028EB9  +
cmp eax edi +
jnb loc_1028E92  +
movzx eax byte ptr [eax+esi+45Ch] +
jmp loc_1028EB2  +
cmp eax 80000h +
jnb loc_1028EA9  +
shr eax 9 +
movzx eax byte ptr [eax+esi+45Ch] +
add eax 12h +
jmp loc_1028EB2  +
shr eax 11h +
movzx eax al +
add eax 22h +
lea eax ds:107h[eax*8] +
add [ebp+var_C90] 4 +
inc [ebp+var_C88]  +
lea eax [ebp+eax*2+var_C84] +
inc word ptr [eax]  +
dec [ebp+var_C9C]  +
jnz loc_1028D3A  +
xor esi esi +
xor ebx ebx +
cmp [ebp+var_C98] esi +
jbe loc_1028F5B  +
mov edi 100h +
movzx eax word ptr [ebp+esi*2+var_644] +
mov ecx edi +
cmp ax cx +
movzx eax ax +
jnb loc_1028F08  +
movzx eax ds:byte_1003AE0[eax] +
jmp loc_1028F15  +
shr eax 8 +
movzx eax ds:byte_1003AE0[eax] +
add eax 8 +
movzx ecx word ptr [ebp+esi*2+var_C84] +
mov edx edi +
cmp cx dx +
movzx ecx cx +
jnb loc_1028F30  +
movzx ecx ds:byte_1003AE0[ecx] +
jmp loc_1028F3D  +
shr ecx 8 +
movzx ecx ds:byte_1003AE0[ecx] +
add ecx 8 +
mov eax ds:dword_1003A98[eax*4] +
sub eax ds:dword_1003A98[ecx*4] +
cdq   +
xor eax edx +
sub eax edx +
add ebx eax +
inc esi  +
cmp esi [ebp+var_C98] +
jb loc_1028EED  +
pop edi  +
mov eax ebx +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1010796  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 838h +
mov eax dword_1049010 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov edx [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_14] +
push edi  +
xor edi edi +
mov [ebp+var_824] ecx +
mov [ebp+var_82C] eax +
mov [ebp+var_830] esi +
mov [eax] edx +
cmp esi edi +
jz loc_1028FB5  +
mov eax [ebp+arg_C] +
mov [esi] eax +
mov eax edx +
sub eax [ebp+arg_4] +
cmp eax 1800h +
jnb loc_1028FC8  +
xor eax eax +
jmp loc_10291E3  +
mov al [ecx+87Ch] +
mov [ebp+var_81D] al +
cmp al 4 +
jnb loc_1028FC1  +
mov [ebp+var_81C] edx +
shr [ebp+var_81C] 3 +
xor eax eax +
push ebx  +
mov [ebp+var_818] edi +
cmp [ebp+var_81C] edi +
jbe loc_1029034  +
mov esi [ecx+34h] +
test al 7 +
jnz loc_102901D  +
cmp [ebp+var_818] 408h +
jnb loc_102901D  +
mov ebx [ebp+var_818] +
inc [ebp+var_818]  +
mov [ebp+ebx*2+var_814] di +
movzx ebx byte ptr [esi+eax] +
movzx ebx byte ptr [ebx+ecx+87Dh] +
add edi ebx +
inc eax  +
cmp eax [ebp+var_81C] +
jb loc_1028FF9  +
mov eax [ebp+arg_4] +
add eax 3Fh +
and eax 0FFFFFFC0h +
mov [ebp+arg_4] eax +
add eax 800h +
add edx 0FFFFF000h +
mov [ebp+var_818] eax +
mov [ebp+var_834] edx +
cmp eax edx +
jnb loc_10291E0  +
lea esi [eax+400h] +
mov edi 400h +
jmp loc_1029078  +
mov ecx [ebp+var_824] +
mov eax [ebp+var_818] +
mov edx esi +
shr edx 6 +
movzx edx [ebp+edx*2+var_814] +
push edi  +
push edx  +
mov edx eax +
shr edx 6 +
movzx edx [ebp+edx*2+var_814] +
push edx  +
push esi  +
push eax  +
call sub_1028C94  +
mov ebx 578h +
cmp eax ebx +
jbe loc_10291C6  +
lea eax [esi+400h] +
mov edx eax +
shr edx 6 +
movzx edx [ebp+edx*2+var_814] +
push edi  +
push edx  +
lea ecx [esi-800h] +
mov edx ecx +
shr edx 6 +
movzx edx [ebp+edx*2+var_814] +
push edx  +
push eax  +
push ecx  +
mov ecx [ebp+var_824] +
call sub_1028C94  +
cmp eax ebx +
jbe loc_10291C6  +
lea eax [esi+800h] +
mov edx eax +
shr edx 6 +
movzx edx [ebp+edx*2+var_814] +
push edi  +
push edx  +
lea ecx [esi-0C00h] +
mov edx ecx +
shr edx 6 +
movzx edx [ebp+edx*2+var_814] +
push edx  +
push eax  +
push ecx  +
mov ecx [ebp+var_824] +
call sub_1028C94  +
cmp eax ebx +
jbe loc_10291C6  +
and [ebp+var_828] 0 +
lea ebx [esi-200h] +
lea eax [esi+600h] +
cmp ebx eax +
jnb loc_10291C6  +
lea eax [esi-600h] +
mov [ebp+var_81C] eax +
mov ecx [ebp+var_824] +
mov eax ebx +
shr eax 6 +
movzx eax [ebp+eax*2+var_814] +
push edi  +
push eax  +
mov eax [ebp+var_81C] +
shr eax 6 +
movzx eax [ebp+eax*2+var_814] +
push eax  +
push ebx  +
push [ebp+var_81C]  +
call sub_1028C94  +
cmp eax [ebp+var_828] +
jbe loc_1029193  +
mov [ebp+var_828] eax +
mov [ebp+var_838] ebx +
add [ebp+var_81C] 40h +
add ebx 40h +
lea eax [esi+600h] +
cmp ebx eax +
jb loc_102914C  +
cmp [ebp+var_828] 6A4h +
jb loc_10291C6  +
mov eax [ebp+var_838] +
mov ecx eax +
sub ecx [ebp+arg_4] +
cmp ecx 1000h +
jnb loc_10291F3  +
add [ebp+var_818] edi +
mov eax [ebp+var_818] +
add esi edi +
cmp eax [ebp+var_834] +
jb loc_102906C  +
xor eax eax +
pop ebx  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1010796  +
leave   +
retn 18h  +
mov cl [ebp+var_81D] +
mov edx [ebp+var_824] +
inc cl  +
mov [edx+87Ch] cl +
mov ecx [ebp+var_82C] +
mov [ecx] eax +
mov ecx [ebp+var_830] +
test ecx ecx +
jz loc_1029226  +
shr eax 6 +
movzx eax [ebp+eax*2+var_814] +
mov [ecx] eax +
xor eax eax +
inc eax  +
jmp loc_10291E2  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov ecx [ebp+arg_0] +
mov eax [ecx] +
mov edx [ecx+8] +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
movzx eax word ptr [edi+eax] +
lea eax [edx+eax*4] +
mov esi [eax] +
mov [eax] edi +
mov eax edi +
sub eax [ecx+4] +
add eax 4 +
mov [ebp+var_1C] eax +
cmp esi eax +
ja loc_1029277  +
mov eax [ecx+10h] +
shl edi 2 +
and dword ptr [edi+eax] 0 +
mov eax [ecx+0Ch] +
and dword ptr [edi+eax] 0 +
xor eax eax +
jmp loc_10294AA  +
push ebx  +
push 2  +
pop eax  +
mov edx edi +
sub edx esi +
add edx eax +
mov ebx eax +
mov [ebp+arg_0] eax +
mov [ebp+var_10] eax +
mov [ebp+var_14] eax +
mov eax [ecx+0Ch] +
mov [ecx+58h] edx +
mov edx edi +
shl edx 2 +
add eax edx +
mov [ebp+var_8] eax +
mov eax [ecx+10h] +
add eax edx +
mov [ebp+var_4] ebx +
mov [ebp+var_C] eax +
mov eax [ebp+var_4] +
lea edx [eax+edi] +
mov eax [ecx] +
movzx edx byte ptr [eax+edx] +
mov [ebp+arg_4] ebx +
add ebx esi +
mov [ebp+var_18] edx +
movzx edx byte ptr [eax+ebx] +
mov eax [ebp+var_18] +
sub edx eax +
jnz loc_10292F9  +
mov eax ebx +
sub eax esi +
add eax edi +
sub ebx [ebp+var_4] +
mov [ebp+var_18] ebx +
jmp loc_10292D7  +
mov ebx [ebp+var_18] +
inc eax  +
inc [ebp+arg_4]  +
cmp [ebp+arg_4] 101h +
jge loc_102930A  +
mov edx [ecx] +
add ebx edx +
mov edx [ebp+arg_4] +
movzx edx byte ptr [ebx+edx] +
mov ebx [ecx] +
movzx ebx byte ptr [eax+ebx] +
sub edx ebx +
jz loc_10292D4  +
test edx edx +
jge loc_1029356  +
mov edx [ebp+arg_4] +
cmp edx [ebp+var_14] +
jle loc_1029341  +
cmp edx [ebp+arg_0] +
jle loc_1029331  +
mov eax edi +
sub eax esi +
lea ebx [eax+2] +
mov eax [ebp+arg_0] +
lea eax [ecx+eax*4+50h] +
inc [ebp+arg_0]  +
mov edx [ebp+arg_4] +
add eax 4 +
cmp [ebp+arg_0] edx +
mov [eax] ebx +
jl loc_1029318  +
cmp edx 32h +
jge loc_10293B5  +
mov eax [ebp+var_10] +
cmp eax edx +
mov [ebp+var_14] edx +
mov [ebp+var_4] eax +
jl loc_1029341  +
mov [ebp+var_4] edx +
mov eax [ebp+var_C] +
mov [eax] esi +
mov eax [ecx+0Ch] +
lea edx [eax+esi*4] +
mov esi [edx] +
mov eax [ebp+var_8] +
mov [ebp+var_C] edx +
jmp loc_10293A8  +
mov ebx [ebp+arg_4] +
cmp ebx [ebp+var_10] +
jle loc_1029395  +
mov edx [ebp+arg_0] +
cmp ebx edx +
jle loc_1029385  +
mov eax edi +
sub eax esi +
add eax 2 +
lea edx [ecx+edx*4+50h] +
inc [ebp+arg_0]  +
mov ebx [ebp+arg_4] +
add edx 4 +
cmp [ebp+arg_0] ebx +
mov [edx] eax +
jl loc_1029370  +
cmp ebx 32h +
jge loc_10293B5  +
mov eax [ebp+var_14] +
cmp ebx eax +
mov [ebp+var_10] ebx +
mov [ebp+var_4] ebx +
jl loc_1029395  +
mov [ebp+var_4] eax +
mov eax [ebp+var_8] +
mov edx [ebp+var_C] +
mov [eax] esi +
mov eax [ecx+10h] +
lea eax [eax+esi*4] +
mov esi [eax] +
mov [ebp+var_8] eax +
cmp esi [ebp+var_1C] +
jbe loc_10293D0  +
mov ebx [ebp+var_4] +
jmp loc_10292A7  +
mov eax [ecx+0Ch] +
mov edx [ebp+var_8] +
shl esi 2 +
mov eax [esi+eax] +
mov [edx] eax +
mov eax [ecx+10h] +
mov eax [esi+eax] +
mov edx [ebp+var_C] +
mov [edx] eax +
jmp loc_10293D6  +
and dword ptr [eax] 0 +
and dword ptr [edx] 0 +
xor esi esi +
cmp [ebp+arg_0] esi +
jle loc_10293F6  +
mov eax [ecx] +
mov edx eax +
sub edx [ecx+44h] +
add edx edi +
add eax edi +
mov bl [eax+esi] +
cmp bl [edx] +
jnz loc_10293F6  +
inc esi  +
inc edx  +
cmp esi [ebp+arg_0] +
jl loc_10293E8  +
cmp esi 2 +
mov [ebp+arg_4] esi +
jl loc_1029414  +
lea eax [ecx+esi*4+50h] +
and dword ptr [eax] 0 +
dec esi  +
sub eax 4 +
cmp esi 2 +
jge loc_1029402  +
cmp [ebp+arg_4] 32h +
jg loc_102948C  +
xor ebx ebx +
cmp [ebp+arg_0] ebx +
jle loc_1029435  +
mov eax [ecx] +
mov edx eax +
sub edx [ecx+48h] +
lea esi [eax+edi] +
add edx edi +
mov al [esi+ebx] +
cmp al [edx] +
jnz loc_1029435  +
inc ebx  +
inc edx  +
cmp ebx [ebp+arg_0] +
jl loc_1029427  +
cmp ebx [ebp+arg_4] +
jle loc_1029452  +
mov eax [ebp+arg_4] +
lea eax [ecx+eax*4+50h] +
inc [ebp+arg_4]  +
add eax 4 +
cmp [ebp+arg_4] ebx +
mov dword ptr [eax] 1 +
jl loc_1029441  +
xor ebx ebx +
cmp [ebp+arg_0] ebx +
jle loc_1029473  +
mov eax [ecx] +
mov edx eax +
sub edx [ecx+4Ch] +
lea esi [eax+edi] +
add edx edi +
mov al [esi+ebx] +
cmp al [edx] +
jnz loc_1029473  +
inc ebx  +
inc edx  +
cmp ebx [ebp+arg_0] +
jl loc_1029465  +
mov eax [ebp+arg_4] +
cmp ebx eax +
jle loc_102948C  +
lea ecx [ecx+eax*4+50h] +
inc eax  +
add ecx 4 +
cmp eax ebx +
mov dword ptr [ecx] 2 +
jl loc_102947E  +
mov ecx 7FFFh +
and edi ecx +
sub ecx edi +
cmp [ebp+arg_0] ecx +
pop ebx  +
jle loc_10294A7  +
cmp ecx 2 +
mov [ebp+arg_0] ecx +
jge loc_10294A7  +
and [ebp+arg_0] 0 +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax] +
mov ecx [ebp+arg_4] +
movzx edx word ptr [ecx+edx] +
sub esp 14h +
push esi  +
mov esi [eax+8] +
lea esi [esi+edx*4] +
mov edx [esi] +
cmp edx [ebp+arg_8] +
mov [esi] ecx +
jg loc_10294EF  +
mov edx [eax+10h] +
shl ecx 2 +
and dword ptr [ecx+edx] 0 +
mov eax [eax+0Ch] +
and dword ptr [ecx+eax] 0 +
jmp loc_10295DF  +
push ebx  +
push edi  +
mov edi [eax+10h] +
push 2  +
pop esi  +
mov [ebp+arg_0] esi +
mov [ebp+var_C] esi +
mov [ebp+var_10] esi +
mov esi [eax+0Ch] +
mov ebx ecx +
shl ebx 2 +
add esi ebx +
add edi ebx +
mov ebx [ebp+arg_0] +
mov [ebp+var_8] ebx +
add ebx ecx +
mov ecx [eax] +
mov [ebp+var_14] ebx +
mov ebx [ebp+arg_0] +
add ebx edx +
add ebx ecx +
mov [ebp+var_4] ebx +
mov ebx [ebp+var_14] +
movzx ebx byte ptr [ecx+ebx] +
mov ecx [ebp+var_4] +
movzx ecx byte ptr [ecx] +
sub ecx ebx +
jnz loc_1029562  +
mov ebx [ebp+var_4] +
mov [ebp+var_4] ebx +
mov ebx [ebp+arg_4] +
sub ebx edx +
mov [ebp+var_14] ebx +
mov ebx [ebp+var_8] +
inc [ebp+var_4]  +
inc ebx  +
cmp ebx 32h +
mov [ebp+var_8] ebx +
jge loc_1029565  +
mov ecx [ebp+var_4] +
mov ebx [ebp+var_14] +
movzx ebx byte ptr [ebx+ecx] +
movzx ecx byte ptr [ecx] +
sub ecx ebx +
jz loc_1029542  +
mov ebx [ebp+var_8] +
test ecx ecx +
jge loc_102958F  +
cmp ebx [ebp+var_10] +
jle loc_1029583  +
cmp ebx 32h +
jge loc_10295C0  +
mov ecx [ebp+var_C] +
cmp ecx ebx +
mov [ebp+var_10] ebx +
mov [ebp+arg_0] ecx +
jl loc_1029583  +
mov [ebp+arg_0] ebx +
mov [edi] edx +
mov ecx [eax+0Ch] +
lea edi [ecx+edx*4] +
mov edx [edi] +
jmp loc_10295B3  +
cmp ebx [ebp+var_C] +
jle loc_10295A9  +
cmp ebx 32h +
jge loc_10295C0  +
mov ecx [ebp+var_10] +
cmp ebx ecx +
mov [ebp+var_C] ebx +
mov [ebp+arg_0] ebx +
jl loc_10295A9  +
mov [ebp+arg_0] ecx +
mov [esi] edx +
mov ecx [eax+10h] +
lea esi [ecx+edx*4] +
mov edx [esi] +
cmp edx [ebp+arg_8] +
jle loc_10295D7  +
mov ecx [ebp+arg_4] +
jmp loc_102950C  +
mov ecx edx +
mov edx [eax+0Ch] +
shl ecx 2 +
mov edx [ecx+edx] +
mov [esi] edx +
mov eax [eax+10h] +
mov eax [ecx+eax] +
mov [edi] eax +
jmp loc_10295DD  +
and dword ptr [esi] 0 +
and dword ptr [edi] 0 +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
mov edx [eax] +
movzx edx word ptr [ecx+edx] +
push esi  +
mov esi [eax+8] +
push edi  +
lea edi [esi+edx*4] +
cmp [edi] ecx +
jnz loc_1029622  +
push ebx  +
mov ebx [ebp+arg_8] +
cmp [edi] ebx +
ja loc_1029628  +
xor edx edx +
mov [edi] edx +
mov esi [eax+10h] +
shl ecx 2 +
mov [ecx+esi] edx +
mov eax [eax+0Ch] +
mov [ecx+eax] edx +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
mov edx [eax+0Ch] +
shl ecx 2 +
lea esi [edx+ecx] +
mov edx [esi] +
cmp edx ebx +
ja loc_102963B  +
xor edx edx +
mov [esi] edx +
mov esi [eax+10h] +
add esi ecx +
mov ecx [esi] +
cmp ecx ebx +
ja loc_102964A  +
xor ecx ecx +
mov [esi] ecx +
cmp edx ecx +
jbe loc_1029667  +
cmp edx ebx +
ja loc_1029654  +
xor edx edx +
mov [edi] edx +
test edx edx +
jz loc_1029621  +
mov esi [eax+10h] +
mov edi edx +
shl edi 2 +
mov edx [edi+esi] +
jmp loc_102967E  +
cmp ecx ebx +
ja loc_102966D  +
xor ecx ecx +
mov [edi] ecx +
test ecx ecx +
jz loc_1029621  +
mov esi [eax+0Ch] +
mov edi ecx +
shl edi 2 +
mov ecx [edi+esi] +
add edi esi +
jmp loc_102964A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
mov edx [ecx+2B04h] +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
lea edi [esi+eax] +
cmp esi edi +
mov ebx esi +
mov [ebp+arg_4] ebx +
jge loc_10296C2  +
cmp edx [ecx+2B08h] +
jnb loc_10296D9  +
mov bl [edx] +
mov eax [ecx] +
mov [esi+eax] bl +
inc esi  +
inc edx  +
cmp esi edi +
jl loc_10296AA  +
mov ebx [ebp+arg_4] +
mov eax 101h +
cmp edi eax +
mov [ecx+2B04h] edx +
mov [ebp+arg_4] eax +
jg loc_10296EC  +
mov [ebp+arg_4] edi +
jmp loc_10296EC  +
or eax 0FFFFFFFFh +
jmp loc_1029700  +
mov eax [ecx] +
mov edx [ecx+4] +
add edx eax +
mov al [eax+ebx] +
mov [edx+ebx] al +
inc ebx  +
cmp ebx [ebp+arg_4] +
jb loc_10296DE  +
mov eax [ecx+8] +
and eax esi +
mov [ecx+2EC0h] eax +
mov eax esi +
sub eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
add dword ptr [eax+2B04h] 0FFFFFFFEh +
mov ecx [eax+2B04h] +
add ecx 4 +
cmp ecx [eax+2B08h] +
jb loc_1029730  +
xor eax eax +
jmp loc_1029772  +
push ebx  +
push esi  +
push edi  +
push 3  +
lea edx [eax+0Ch] +
pop esi  +
mov ecx [eax+2B04h] +
movzx edi byte ptr [ecx+3] +
movzx ebx byte ptr [ecx+2] +
shl edi 8 +
or edi ebx +
movzx ebx byte ptr [ecx+1] +
movzx ecx byte ptr [ecx] +
shl edi 8 +
or edi ebx +
shl edi 8 +
or edi ecx +
mov [edx] edi +
add dword ptr [eax+2B04h] 4 +
add edx 4 +
dec esi  +
jnz loc_1029739  +
pop edi  +
xor eax eax +
pop esi  +
inc eax  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov ecx [ebp+arg_0] +
mov al [edx+2EB4h] +
push ebx  +
mov ebx [edx+2B08h] +
mov [ebp+var_C] ebx +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [edx+2EB0h] +
add ebx ecx +
cmp ecx ebx +
push edi  +
mov edi [edx+2B04h] +
mov [ebp+var_14] ebx +
jge loc_10299B7  +
mov ecx esi +
shr ecx 16h +
movsx ebx word ptr [edx+ecx*2+18h] +
test ebx ebx +
jge loc_10297E5  +
mov ecx 200000h +
neg ebx  +
test ecx esi +
jz loc_10297D7  +
movsx ebx word ptr [edx+ebx*4+0E3Eh] +
jmp loc_10297DF  +
movsx ebx word ptr [edx+ebx*4+0E3Ch] +
shr ecx 1 +
test ebx ebx +
jl loc_10297C7  +
cmp edi [ebp+var_C] +
jnb loc_10299D2  +
mov cl [ebx+edx+0A18h] +
shl esi cl +
sub al cl +
mov byte ptr [ebp+arg_4+3] al +
mov [ebp+var_4] esi +
test al al +
jg loc_1029820  +
movzx esi byte ptr [edi+1] +
movzx ecx byte ptr [edi] +
shl esi 8 +
or esi ecx +
movsx ecx al +
neg ecx  +
shl esi cl +
or [ebp+var_4] esi +
inc edi  +
inc edi  +
add al 10h +
mov byte ptr [ebp+arg_4+3] al +
sub ebx 100h +
jns loc_102983E  +
mov esi [edx] +
mov ecx [ebp+arg_0] +
mov [ecx+esi] bl +
mov esi [edx+4] +
add esi [edx] +
mov [esi+ecx] bl +
inc ecx  +
jmp loc_10299A8  +
mov ecx ebx +
and ecx 7 +
mov [ebp+var_8] ecx +
cmp ecx 7 +
jnz loc_10298B9  +
mov ecx [ebp+var_4] +
mov eax ecx +
shr eax 18h +
movsx esi word ptr [edx+eax*2+818h] +
mov [ebp+var_8] esi +
test esi esi +
jge loc_1029888  +
mov eax 800000h +
neg esi  +
test eax ecx +
jz loc_1029877  +
movsx esi word ptr [edx+esi*4+233Eh] +
jmp loc_102987F  +
movsx esi word ptr [edx+esi*4+233Ch] +
shr eax 1 +
test esi esi +
jl loc_1029867  +
mov [ebp+var_8] esi +
mov cl [esi+edx+0CB8h] +
mov al byte ptr [ebp+arg_4+3] +
shl [ebp+var_4] cl +
sub al cl +
test al al +
jg loc_10298B5  +
movzx esi byte ptr [edi+1] +
movzx ecx byte ptr [edi] +
shl esi 8 +
or esi ecx +
movsx ecx al +
neg ecx  +
shl esi cl +
or [ebp+var_4] esi +
inc edi  +
inc edi  +
add al 10h +
add [ebp+var_8] 7 +
sar ebx 3 +
cmp bl 2 +
jle loc_1029948  +
cmp bl 3 +
jle loc_1029937  +
mov esi [ebp+var_4] +
movsx ecx bl +
movzx ebx ds:byte_1003970[ecx] +
mov [ebp+arg_4] ecx +
push 20h  +
pop ecx  +
sub ecx ebx +
shr esi cl +
mov ecx ebx +
shl [ebp+var_4] cl +
mov ecx [ebp+arg_4] +
sub al ds:byte_1003970[ecx] +
test al al +
jg loc_102992B  +
movzx ebx byte ptr [edi+1] +
movzx ecx byte ptr [edi] +
shl ebx 8 +
or ebx ecx +
movsx ecx al +
neg ecx  +
shl ebx cl +
add al 10h +
or [ebp+var_4] ebx +
inc edi  +
inc edi  +
test al al +
jg loc_102992B  +
movzx ebx byte ptr [edi+1] +
movzx ecx byte ptr [edi] +
shl ebx 8 +
or ebx ecx +
movsx ecx al +
neg ecx  +
shl ebx cl +
or [ebp+var_4] ebx +
inc edi  +
inc edi  +
add al 10h +
mov ecx [ebp+arg_4] +
add esi ds:dword_10039A8[ecx*4] +
jmp loc_102993A  +
xor esi esi +
inc esi  +
mov ecx [edx+10h] +
mov [edx+14h] ecx +
mov ecx [edx+0Ch] +
mov [edx+10h] ecx +
jmp loc_102995A  +
movsx ecx bl +
lea ecx [edx+ecx*4+0Ch] +
mov esi [ecx] +
test bl bl +
jz loc_102995D  +
mov ebx [edx+0Ch] +
mov [ecx] ebx +
mov [edx+0Ch] esi +
mov ecx [ebp+arg_0] +
add [ebp+var_8] 2 +
mov ebx ecx +
sub ebx esi +
mov [ebp+arg_4] ecx +
mov [ebp+arg_0] ebx +
mov ebx [edx+8] +
and ebx [ebp+arg_0] +
cmp [ebp+arg_4] 100h +
mov esi [edx] +
mov bl [ebx+esi] +
mov [esi+ecx] bl +
ja loc_1029998  +
mov esi [edx] +
mov ebx [edx+4] +
mov [ebp+var_10] eax +
mov al [esi+ecx] +
add ebx esi +
mov [ebx+ecx] al +
mov eax [ebp+var_10] +
inc ecx  +
inc [ebp+arg_0]  +
inc [ebp+arg_4]  +
dec [ebp+var_8]  +
cmp [ebp+var_8] 0 +
jg loc_102996E  +
cmp ecx [ebp+var_14] +
mov esi [ebp+var_4] +
mov [ebp+arg_0] ecx +
jl loc_10297B4  +
mov [edx+2EB4h] al +
mov [edx+2EB0h] esi +
mov [edx+2B04h] edi +
mov eax ecx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
or eax 0FFFFFFFFh +
jmp loc_10299CB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov edx [ebp+arg_0] +
mov al [edx+2EB4h] +
mov ecx [ebp+arg_8] +
mov byte ptr [ebp+arg_0+3] al +
mov eax [edx+2B08h] +
push ebx  +
mov [ebp+var_10] eax +
mov eax [ebp+arg_4] +
push esi  +
mov esi [edx+2B04h] +
add ecx eax +
cmp eax ecx +
push edi  +
mov edi [edx+2EB0h] +
mov [ebp+var_C] ecx +
jge loc_1029C12  +
mov eax edi +
shr eax 16h +
movsx ebx word ptr [edx+eax*2+18h] +
test ebx ebx +
jge loc_1029A4C  +
mov eax 200000h +
neg ebx  +
test eax edi +
jz loc_1029A3E  +
movsx ebx word ptr [edx+ebx*4+0E3Eh] +
jmp loc_1029A46  +
movsx ebx word ptr [edx+ebx*4+0E3Ch] +
shr eax 1 +
test ebx ebx +
jl loc_1029A2E  +
cmp esi [ebp+var_10] +
jnb loc_1029C3C  +
mov cl [ebx+edx+0A18h] +
mov al byte ptr [ebp+arg_0+3] +
shl edi cl +
sub al cl +
mov byte ptr [ebp+arg_0+3] al +
mov [ebp+var_4] edi +
test al al +
jg loc_1029A8A  +
movzx edi byte ptr [esi+1] +
movzx ecx byte ptr [esi] +
shl edi 8 +
or edi ecx +
movsx ecx al +
neg ecx  +
shl edi cl +
or [ebp+var_4] edi +
inc esi  +
inc esi  +
add al 10h +
mov byte ptr [ebp+arg_0+3] al +
sub ebx 100h +
jns loc_1029AA0  +
mov eax [ebp+arg_4] +
mov ecx [edx] +
mov [eax+ecx] bl +
inc eax  +
jmp loc_1029C03  +
mov ecx ebx +
and ecx 7 +
mov [ebp+arg_8] ecx +
cmp ecx 7 +
jnz loc_1029B32  +
mov ecx [ebp+var_4] +
shr ecx 18h +
movsx ecx word ptr [edx+ecx*2+818h] +
mov [ebp+arg_8] ecx +
test ecx ecx +
jge loc_1029AF3  +
mov ecx 800000h +
mov edi [ebp+var_4] +
neg [ebp+arg_8]  +
test ecx edi +
mov edi [ebp+arg_8] +
jz loc_1029AE2  +
movsx edi word ptr [edx+edi*4+233Eh] +
jmp loc_1029AEA  +
movsx edi word ptr [edx+edi*4+233Ch] +
shr ecx 1 +
mov [ebp+arg_8] edi +
test edi edi +
jl loc_1029ACB  +
mov ecx [ebp+arg_8] +
mov cl [ecx+edx+0CB8h] +
shl [ebp+var_4] cl +
mov ecx [ebp+arg_8] +
sub al [ecx+edx+0CB8h] +
mov byte ptr [ebp+arg_0+3] al +
test al al +
jg loc_1029B2E  +
movzx edi byte ptr [esi+1] +
movzx ecx byte ptr [esi] +
shl edi 8 +
or edi ecx +
movsx ecx al +
neg ecx  +
shl edi cl +
or [ebp+var_4] edi +
inc esi  +
inc esi  +
add al 10h +
mov byte ptr [ebp+arg_0+3] al +
add [ebp+arg_8] 7 +
sar ebx 3 +
cmp bl 2 +
jle loc_1029BCD  +
cmp bl 3 +
jle loc_1029BB9  +
mov edi [ebp+var_4] +
movsx ecx bl +
movzx ebx ds:byte_1003970[ecx] +
mov [ebp+var_8] ecx +
push 20h  +
pop ecx  +
sub ecx ebx +
shr edi cl +
mov ecx ebx +
shl [ebp+var_4] cl +
mov ecx [ebp+var_8] +
sub al ds:byte_1003970[ecx] +
mov byte ptr [ebp+arg_0+3] al +
test al al +
jg loc_1029BAD  +
movzx ebx byte ptr [esi+1] +
movzx ecx byte ptr [esi] +
shl ebx 8 +
or ebx ecx +
movsx ecx al +
neg ecx  +
shl ebx cl +
add al 10h +
mov byte ptr [ebp+arg_0+3] al +
or [ebp+var_4] ebx +
inc esi  +
inc esi  +
test al al +
jg loc_1029BAD  +
movzx ebx byte ptr [esi+1] +
movzx ecx byte ptr [esi] +
shl ebx 8 +
or ebx ecx +
movsx ecx al +
neg ecx  +
shl ebx cl +
or [ebp+var_4] ebx +
inc esi  +
inc esi  +
add al 10h +
mov byte ptr [ebp+arg_0+3] al +
mov eax [ebp+var_8] +
add edi ds:dword_10039A8[eax*4] +
jmp loc_1029BBF  +
mov edi ds:dword_10039B4 +
mov eax [edx+10h] +
mov [edx+14h] eax +
mov eax [edx+0Ch] +
mov [edx+10h] eax +
jmp loc_1029BDF  +
movsx eax bl +
lea eax [edx+eax*4+0Ch] +
mov edi [eax] +
test bl bl +
jz loc_1029BE2  +
mov ecx [edx+0Ch] +
mov [eax] ecx +
mov [edx+0Ch] edi +
mov eax [ebp+arg_4] +
add [ebp+arg_8] 2 +
mov ecx eax +
sub ecx edi +
and ecx [edx+8] +
mov edi [edx] +
mov bl [edi+ecx] +
mov [edi+eax] bl +
inc eax  +
inc ecx  +
dec [ebp+arg_8]  +
cmp [ebp+arg_8] 0 +
jg loc_1029BF0  +
cmp eax [ebp+var_C] +
mov edi [ebp+var_4] +
mov [ebp+arg_4] eax +
jl loc_1029A1B  +
mov cl byte ptr [ebp+arg_0+3] +
mov [edx+2EB4h] cl +
mov ecx [edx+8] +
and ecx eax +
sub eax [ebp+var_C] +
mov [edx+2EB0h] edi +
mov [edx+2B04h] esi +
mov [edx+2EC0h] ecx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
or eax 0FFFFFFFFh +
jmp loc_1029C35  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
mov eax 101h +
cmp esi eax +
jge loc_1029C84  +
sub eax esi +
cmp eax [ebp+arg_8] +
jl loc_1029C65  +
mov eax [ebp+arg_8] +
push eax  +
push esi  +
call sub_102977B  +
sub esi eax +
add [ebp+arg_8] esi +
cmp [ebp+arg_8] 0 +
mov esi eax +
mov [edx+2EC0h] eax +
jg loc_1029C84  +
mov eax [ebp+arg_8] +
jmp loc_1029C8E  +
push [ebp+arg_8]  +
push esi  +
push edx  +
call sub_10299DC  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov ecx [ebp+arg_0] +
mov al [edx+2EB4h] +
push ebx  +
mov ebx [edx+2B08h] +
mov [ebp+var_14] ebx +
mov ebx [edx] +
mov [ebp+var_10] ebx +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [edx+2EB0h] +
add ebx ecx +
cmp ecx ebx +
push edi  +
mov edi [edx+2B04h] +
mov [ebp+var_18] ebx +
jge loc_1029F7D  +
mov ecx esi +
shr ecx 16h +
movsx ebx word ptr [edx+ecx*2+18h] +
test ebx ebx +
jge loc_1029D07  +
mov ecx 200000h +
neg ebx  +
test ecx esi +
jz loc_1029CF9  +
movsx ebx word ptr [edx+ebx*4+0E3Eh] +
jmp loc_1029D01  +
movsx ebx word ptr [edx+ebx*4+0E3Ch] +
shr ecx 1 +
test ebx ebx +
jl loc_1029CE9  +
cmp edi [ebp+var_14] +
jnb loc_1029F98  +
mov cl [ebx+edx+0A18h] +
shl esi cl +
sub al cl +
mov byte ptr [ebp+arg_4+3] al +
mov [ebp+var_4] esi +
test al al +
jg loc_1029D42  +
movzx esi byte ptr [edi+1] +
movzx ecx byte ptr [edi] +
shl esi 8 +
or esi ecx +
movsx ecx al +
neg ecx  +
shl esi cl +
or [ebp+var_4] esi +
inc edi  +
inc edi  +
add al 10h +
mov byte ptr [ebp+arg_4+3] al +
sub ebx 100h +
jns loc_1029D61  +
mov ecx [ebp+arg_0] +
mov eax [ebp+var_10] +
mov [eax+ecx] bl +
mov esi [edx+4] +
add esi eax +
mov [esi+ecx] bl +
inc ecx  +
jmp loc_1029F6B  +
mov ecx ebx +
and ecx 7 +
mov [ebp+var_8] ecx +
cmp ecx 7 +
jnz loc_1029DF3  +
mov ecx [ebp+var_4] +
shr ecx 18h +
movsx ecx word ptr [edx+ecx*2+818h] +
mov [ebp+var_8] ecx +
test ecx ecx +
jge loc_1029DB4  +
mov ecx 800000h +
mov esi [ebp+var_4] +
neg [ebp+var_8]  +
test ecx esi +
mov esi [ebp+var_8] +
jz loc_1029DA3  +
movsx esi word ptr [edx+esi*4+233Eh] +
jmp loc_1029DAB  +
movsx esi word ptr [edx+esi*4+233Ch] +
shr ecx 1 +
mov [ebp+var_8] esi +
test esi esi +
jl loc_1029D8C  +
mov ecx [ebp+var_8] +
mov cl [ecx+edx+0CB8h] +
shl [ebp+var_4] cl +
mov ecx [ebp+var_8] +
sub al [ecx+edx+0CB8h] +
mov byte ptr [ebp+arg_4+3] al +
test al al +
jg loc_1029DEF  +
movzx esi byte ptr [edi+1] +
movzx ecx byte ptr [edi] +
shl esi 8 +
or esi ecx +
movsx ecx al +
neg ecx  +
shl esi cl +
or [ebp+var_4] esi +
inc edi  +
inc edi  +
add al 10h +
mov byte ptr [ebp+arg_4+3] al +
add [ebp+var_8] 7 +
sar ebx 3 +
cmp bl 2 +
jle loc_1029F18  +
movsx ecx bl +
mov [ebp+var_C] ecx +
mov cl ds:byte_1003970[ecx] +
cmp cl 3 +
jb loc_1029EB8  +
movzx ebx cl +
lea ecx [ebx-3] +
test ecx ecx +
jz loc_1029E5B  +
mov esi [ebp+var_4] +
push 23h  +
pop ecx  +
sub ecx ebx +
shr esi cl +
lea ecx [ebx-3] +
shl [ebp+var_4] cl +
mov ebx [ebp+var_C] +
mov cl 3 +
sub cl ds:byte_1003970[ebx] +
add al cl +
test al al +
jg loc_1029E5D  +
movzx ebx byte ptr [edi+1] +
movzx ecx byte ptr [edi] +
shl ebx 8 +
or ebx ecx +
movsx ecx al +
neg ecx  +
shl ebx cl +
or [ebp+var_4] ebx +
inc edi  +
inc edi  +
add al 10h +
jmp loc_1029E5D  +
xor esi esi +
mov ecx [ebp+var_C] +
mov ecx ds:dword_10039A8[ecx*4] +
lea esi [ecx+esi*8] +
mov ecx [ebp+var_4] +
shr ecx 19h +
movsx ecx byte ptr [ecx+edx+0DB4h] +
mov [ebp+var_C] ecx +
mov cl [ecx+edx+0E34h] +
shl [ebp+var_4] cl +
mov ecx [ebp+var_C] +
sub al [ecx+edx+0E34h] +
mov byte ptr [ebp+arg_4+3] al +
test al al +
jg loc_1029EB3  +
movzx ebx byte ptr [edi+1] +
movzx ecx byte ptr [edi] +
shl ebx 8 +
or ebx ecx +
movsx ecx al +
neg ecx  +
shl ebx cl +
or [ebp+var_4] ebx +
inc edi  +
inc edi  +
add al 10h +
mov byte ptr [ebp+arg_4+3] al +
add esi [ebp+var_C] +
jmp loc_1029F0A  +
test cl cl +
jz loc_1029F07  +
mov esi [ebp+var_4] +
movzx ebx cl +
push 20h  +
pop ecx  +
sub ecx ebx +
shr esi cl +
mov ecx ebx +
shl [ebp+var_4] cl +
mov ecx [ebp+var_C] +
sub al ds:byte_1003970[ecx] +
mov byte ptr [ebp+arg_4+3] al +
test al al +
jg loc_1029EFB  +
movzx ebx byte ptr [edi+1] +
movzx ecx byte ptr [edi] +
shl ebx 8 +
or ebx ecx +
movsx ecx al +
neg ecx  +
shl ebx cl +
or [ebp+var_4] ebx +
inc edi  +
inc edi  +
add al 10h +
mov byte ptr [ebp+arg_4+3] al +
mov eax [ebp+var_C] +
add esi ds:dword_10039A8[eax*4] +
jmp loc_1029F0A  +
xor esi esi +
inc esi  +
mov eax [edx+10h] +
mov [edx+14h] eax +
mov eax [edx+0Ch] +
mov [edx+10h] eax +
jmp loc_1029F2A  +
movsx eax bl +
lea eax [edx+eax*4+0Ch] +
mov esi [eax] +
test bl bl +
jz loc_1029F2D  +
mov ecx [edx+0Ch] +
mov [eax] ecx +
mov [edx+0Ch] esi +
mov ecx [ebp+arg_0] +
add [ebp+var_8] 2 +
mov eax ecx +
sub eax esi +
mov ebx ecx +
mov [ebp+arg_0] eax +
mov eax [ebp+arg_0] +
and eax [edx+8] +
mov esi [ebp+var_10] +
mov al [eax+esi] +
mov [ebx+esi] al +
cmp ebx 100h +
ja loc_1029F5D  +
mov esi [edx+4] +
add esi [ebp+var_10] +
mov [esi+ecx] al +
inc ecx  +
inc [ebp+arg_0]  +
inc ebx  +
dec [ebp+var_8]  +
cmp [ebp+var_8] 0 +
jg loc_1029F3D  +
cmp ecx [ebp+var_18] +
mov esi [ebp+var_4] +
mov al byte ptr [ebp+arg_4+3] +
mov [ebp+arg_0] ecx +
jl loc_1029CD6  +
mov [edx+2EB4h] al +
mov [edx+2EB0h] esi +
mov [edx+2B04h] edi +
mov eax ecx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
or eax 0FFFFFFFFh +
jmp loc_1029F91  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov edx [ebp+arg_0] +
mov ecx [edx+2B08h] +
mov al [edx+2EB4h] +
mov [ebp+var_18] ecx +
mov ecx [edx] +
push ebx  +
mov ebx [ebp+arg_4] +
mov [ebp+var_10] ecx +
mov ecx [ebp+arg_8] +
add ecx ebx +
cmp ebx ecx +
push esi  +
push edi  +
mov edi [edx+2B04h] +
mov byte ptr [ebp+arg_0+3] al +
mov eax [edx+2EB0h] +
mov [ebp+var_14] ecx +
jge loc_102A276  +
mov ecx eax +
shr ecx 16h +
movsx esi word ptr [edx+ecx*2+18h] +
mov [ebp+var_8] esi +
test esi esi +
jge loc_102A01D  +
mov ecx 200000h +
neg esi  +
test ecx eax +
jz loc_102A00C  +
movsx esi word ptr [edx+esi*4+0E3Eh] +
jmp loc_102A014  +
movsx esi word ptr [edx+esi*4+0E3Ch] +
shr ecx 1 +
test esi esi +
jl loc_1029FFC  +
mov [ebp+var_8] esi +
cmp edi [ebp+var_18] +
jnb loc_102A2A2  +
mov cl [esi+edx+0A18h] +
mov bl byte ptr [ebp+arg_0+3] +
sub bl cl +
shl eax cl +
mov byte ptr [ebp+arg_8+3] cl +
mov byte ptr [ebp+arg_0+3] bl +
test bl bl +
jg loc_102A05B  +
movzx esi byte ptr [edi+1] +
movzx ecx byte ptr [edi] +
shl esi 8 +
or esi ecx +
movsx ecx bl +
neg ecx  +
shl esi cl +
or eax esi +
inc edi  +
inc edi  +
add bl 10h +
mov byte ptr [ebp+arg_0+3] bl +
mov ecx [ebp+var_8] +
sub ecx 100h +
mov [ebp+var_8] ecx +
jns loc_102A078  +
mov ebx [ebp+arg_4] +
mov esi [ebp+var_10] +
mov [esi+ebx] cl +
inc ebx  +
jmp loc_102A26A  +
and ecx 7 +
mov [ebp+var_4] ecx +
cmp ecx 7 +
jnz loc_102A0F0  +
mov ecx eax +
shr ecx 18h +
movsx esi word ptr [edx+ecx*2+818h] +
mov [ebp+var_4] esi +
test esi esi +
jge loc_102A0BD  +
mov ecx 800000h +
neg esi  +
test ecx eax +
jz loc_102A0AC  +
movsx esi word ptr [edx+esi*4+233Eh] +
jmp loc_102A0B4  +
movsx esi word ptr [edx+esi*4+233Ch] +
shr ecx 1 +
test esi esi +
jl loc_102A09C  +
mov [ebp+var_4] esi +
mov cl [esi+edx+0CB8h] +
sub bl cl +
shl eax cl +
mov byte ptr [ebp+arg_0+3] bl +
test bl bl +
jg loc_102A0EC  +
movzx esi byte ptr [edi+1] +
movzx ecx byte ptr [edi] +
shl esi 8 +
or esi ecx +
movsx ecx bl +
neg ecx  +
shl esi cl +
or eax esi +
inc edi  +
inc edi  +
add bl 10h +
mov byte ptr [ebp+arg_0+3] bl +
add [ebp+var_4] 7 +
mov ecx [ebp+var_8] +
sar ecx 3 +
cmp cl 2 +
jle loc_102A22A  +
movsx ecx cl +
mov [ebp+var_8] ecx +
mov cl ds:byte_1003970[ecx] +
mov byte ptr [ebp+arg_8+3] cl +
cmp cl 3 +
jb loc_102A1C2  +
movzx esi cl +
lea ecx [esi-3] +
mov [ebp+var_C] esi +
test ecx ecx +
jz loc_102A1BE  +
push 23h  +
pop ecx  +
sub ecx esi +
mov esi eax +
shr esi cl +
mov ecx [ebp+var_C] +
add ecx 0FFFFFFFDh +
shl eax cl +
mov cl 3 +
sub cl byte ptr [ebp+arg_8+3] +
add byte ptr [ebp+arg_0+3] cl +
cmp byte ptr [ebp+arg_0+3] 0 +
jg loc_102A163  +
movzx ebx byte ptr [edi+1] +
movzx ecx byte ptr [edi] +
shl ebx 8 +
or ebx ecx +
movsx ecx byte ptr [ebp+arg_0+3] +
neg ecx  +
shl ebx cl +
or eax ebx +
inc edi  +
inc edi  +
add byte ptr [ebp+arg_0+3] 10h +
mov bl byte ptr [ebp+arg_0+3] +
mov ecx [ebp+var_8] +
mov ecx ds:dword_10039A8[ecx*4] +
lea esi [ecx+esi*8] +
mov ecx eax +
shr ecx 19h +
movsx ecx byte ptr [ecx+edx+0DB4h] +
mov [ebp+arg_8] ecx +
mov cl [ecx+edx+0E34h] +
shl eax cl +
mov ecx [ebp+arg_8] +
sub bl [ecx+edx+0E34h] +
mov byte ptr [ebp+arg_0+3] bl +
test bl bl +
jg loc_102A1B9  +
movzx ebx byte ptr [edi+1] +
movzx ecx byte ptr [edi] +
shl ebx 8 +
or ebx ecx +
movsx ecx byte ptr [ebp+arg_0+3] +
neg ecx  +
shl ebx cl +
or eax ebx +
inc edi  +
inc edi  +
add byte ptr [ebp+arg_0+3] 10h +
add esi [ebp+arg_8] +
jmp loc_102A21C  +
xor esi esi +
jmp loc_102A166  +
test cl cl +
jz loc_102A212  +
movzx esi cl +
push 20h  +
mov [ebp+var_C] esi +
pop ecx  +
sub ecx esi +
mov esi eax +
shr esi cl +
mov ecx [ebp+var_C] +
shl eax cl +
mov ecx [ebp+var_8] +
sub bl ds:byte_1003970[ecx] +
mov byte ptr [ebp+arg_0+3] bl +
test bl bl +
jg loc_102A206  +
movzx ebx byte ptr [edi+1] +
movzx ecx byte ptr [edi] +
shl ebx 8 +
or ebx ecx +
movsx ecx byte ptr [ebp+arg_0+3] +
neg ecx  +
shl ebx cl +
or eax ebx +
inc edi  +
inc edi  +
add byte ptr [ebp+arg_0+3] 10h +
mov ecx [ebp+var_8] +
add esi ds:dword_10039A8[ecx*4] +
jmp loc_102A21C  +
mov ecx [ebp+var_8] +
mov esi ds:dword_10039A8[ecx*4] +
mov ecx [edx+10h] +
mov [edx+14h] ecx +
mov ecx [edx+0Ch] +
mov [edx+10h] ecx +
jmp loc_102A23C  +
movsx esi cl +
lea ebx [edx+esi*4+0Ch] +
mov esi [ebx] +
test cl cl +
jz loc_102A23F  +
mov ecx [edx+0Ch] +
mov [ebx] ecx +
mov [edx+0Ch] esi +
mov ebx [ebp+arg_4] +
add [ebp+var_4] 2 +
mov ecx ebx +
sub ecx esi +
and ecx [edx+8] +
mov esi [ebp+var_10] +
add ecx esi +
mov [ebp+arg_4] ecx +
mov ecx [ebp+arg_4] +
mov cl [ecx] +
mov [esi+ebx] cl +
inc ebx  +
inc [ebp+arg_4]  +
dec [ebp+var_4]  +
cmp [ebp+var_4] 0 +
jg loc_102A255  +
cmp ebx [ebp+var_14] +
mov [ebp+arg_4] ebx +
jl loc_1029FE6  +
mov cl byte ptr [ebp+arg_0+3] +
mov [edx+2EB0h] eax +
mov eax [edx+8] +
and eax ebx +
mov [edx+2EC0h] eax +
mov eax ebx +
sub eax [ebp+var_14] +
mov [edx+2EB4h] cl +
mov [edx+2B04h] edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
or eax 0FFFFFFFFh +
jmp loc_102A29B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
mov eax 101h +
cmp esi eax +
jge loc_102A2EA  +
sub eax esi +
cmp eax [ebp+arg_8] +
jl loc_102A2CB  +
mov eax [ebp+arg_8] +
push eax  +
push esi  +
call sub_1029C98  +
sub esi eax +
add [ebp+arg_8] esi +
cmp [ebp+arg_8] 0 +
mov esi eax +
mov [edx+2EC0h] eax +
jg loc_102A2EA  +
mov eax [ebp+arg_8] +
jmp loc_102A2F4  +
push [ebp+arg_8]  +
push esi  +
push edx  +
call sub_1029FA2  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+2B0Ch] +
test eax eax +
jz loc_102A344  +
push [ebp+arg_4]  +
push [ebp+arg_8]  +
push eax  +
call memcpy  +
add esp 0Ch +
cmp dword ptr [esi+2EC4h] 0 +
jz loc_102A344  +
cmp dword ptr [esi+2ECCh] 8000h +
jnb loc_102A344  +
push [ebp+arg_4]  +
push dword ptr [esi+2B0Ch]  +
push esi  +
call sub_102736B  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2E8h +
mov eax dword_1049010 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push ebx  +
mov ebx ecx +
push esi  +
mov [ebp+var_2E0] ebx +
mov [ebp+var_2DC] eax +
xor esi esi +
push 4  +
push ebx  +
call sub_1027899  +
mov byte ptr [ebp+esi+var_1C] al +
inc esi  +
cmp esi 14h +
jl loc_102A378  +
cmp dword ptr [ebx+2EBCh] 0 +
jz loc_102A39A  +
xor eax eax +
jmp loc_102A562  +
push edi  +
lea eax [ebp+var_D8] +
push eax  +
lea eax [ebp+var_2D8] +
push eax  +
push 8  +
lea eax [ebp+var_1C] +
push eax  +
push 14h  +
push ebx  +
call sub_102AB1E  +
xor esi esi +
cmp [ebp+arg_0] esi +
jle loc_102A556  +
mov edx [ebx+2EB0h] +
mov eax edx +
shr eax 18h +
movzx edi word ptr [ebp+eax*2+var_2D8] +
test di di +
jge loc_102A402  +
mov ecx 800000h +
neg edi  +
movzx eax di +
cwde   +
test edx ecx +
jz loc_102A3F3  +
movzx edi word ptr [ebp+eax*4+var_D8+2] +
jmp loc_102A3FB  +
movzx edi word ptr [ebp+eax*4+var_D8] +
shr ecx 1 +
test di di +
jl loc_102A3DF  +
movsx eax di +
mov [ebp+var_2E4] eax +
movzx eax byte ptr [ebp+eax+var_1C] +
push eax  +
push ebx  +
call sub_10277E1  +
cmp dword ptr [ebx+2EBCh] 0 +
jnz loc_102A572  +
cmp di 11h +
jnz loc_102A43A  +
push 4  +
push ebx  +
call sub_1027899  +
movzx edi al +
add edi 4 +
jmp loc_102A44E  +
cmp di 12h +
jnz loc_102A47B  +
push 5  +
push ebx  +
call sub_1027899  +
movzx edi al +
add edi 14h +
lea eax [edi+esi] +
cmp eax [ebp+arg_0] +
jl loc_102A45B  +
mov edi [ebp+arg_0] +
sub edi esi +
test edi edi +
jle loc_102A475  +
mov eax [ebp+var_2DC] +
push edi  +
add eax esi +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
add esi edi +
dec esi  +
jmp loc_102A54C  +
cmp di 13h +
jnz loc_102A530  +
push 1  +
push ebx  +
call sub_1027899  +
movzx edi al +
add edi 4 +
lea eax [edi+esi] +
cmp eax [ebp+arg_0] +
jl loc_102A4A0  +
mov edi [ebp+arg_0] +
sub edi esi +
mov ebx [ebx+2EB0h] +
mov eax ebx +
shr eax 18h +
movzx eax word ptr [ebp+eax*2+var_2D8] +
test ax ax +
jge loc_102A4E0  +
mov ecx 800000h +
neg eax  +
movzx eax ax +
cwde   +
test ebx ecx +
jz loc_102A4D1  +
movzx eax word ptr [ebp+eax*4+var_D8+2] +
jmp loc_102A4D9  +
movzx eax word ptr [ebp+eax*4+var_D8] +
shr ecx 1 +
test ax ax +
jl loc_102A4BD  +
movsx ebx ax +
movzx eax byte ptr [ebp+ebx+var_1C] +
push eax  +
push [ebp+var_2E0]  +
call sub_10277E1  +
mov eax [ebp+arg_4] +
movzx eax byte ptr [esi+eax] +
sub eax ebx +
mov al ds:byte_1003BF1[eax] +
mov byte ptr [ebp+var_2E8] al +
test edi edi +
jle loc_102A527  +
mov eax [ebp+var_2DC] +
push edi  +
push [ebp+var_2E8]  +
add eax esi +
push eax  +
call memset  +
add esp 0Ch +
add esi edi +
mov ebx [ebp+var_2E0] +
dec esi  +
jmp loc_102A54C  +
mov eax [ebp+arg_4] +
movzx eax byte ptr [esi+eax] +
sub eax [ebp+var_2E4] +
mov ecx [ebp+var_2DC] +
mov al ds:byte_1003BF1[eax] +
mov [ecx+esi] al +
inc esi  +
cmp esi [ebp+arg_0] +
jl loc_102A3C2  +
xor eax eax +
cmp [ebx+2EBCh] eax +
setz al  +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010796  +
leave   +
retn 0Ch  +
xor eax eax +
jmp loc_102A561  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea edi [esi+0A18h] +
push edi  +
lea eax [esi+2B14h] +
push eax  +
push 100h  +
mov ecx esi +
call sub_102A34E  +
test eax eax +
jnz loc_102A5AA  +
xor eax eax +
jmp loc_102A63F  +
lea eax [esi+0B18h] +
push eax  +
lea eax [esi+2C14h] +
push eax  +
movzx eax byte ptr [esi+2EB5h] +
shl eax 3 +
push eax  +
mov ecx esi +
call sub_102A34E  +
test eax eax +
jz loc_102A5A3  +
movzx ecx byte ptr [esi+2EB5h] +
lea ecx ds:100h[ecx*8] +
mov eax 2A0h +
cmp ecx eax +
jge loc_102A5E7  +
mov eax ecx +
lea ecx [esi+0E3Ch] +
push ecx  +
lea ecx [esi+18h] +
push ecx  +
push 0Ah  +
push edi  +
push eax  +
push esi  +
call sub_102AB1E  +
test eax eax +
jz loc_102A5A3  +
push ebx  +
lea ebx [esi+0CB8h] +
push ebx  +
lea eax [esi+2DB4h] +
push eax  +
mov edi 0F9h +
push edi  +
mov ecx esi +
call sub_102A34E  +
test eax eax +
jz loc_102A63E  +
lea eax [esi+233Ch] +
push eax  +
lea eax [esi+818h] +
push eax  +
push 8  +
push ebx  +
push edi  +
push esi  +
call sub_102AB1E  +
neg eax  +
sbb eax eax +
neg eax  +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor ebx ebx +
lea edi [esi+0E34h] +
push 3  +
push esi  +
call sub_1027899  +
mov [edi+ebx] al +
inc ebx  +
cmp ebx 8 +
jl loc_102A65D  +
cmp dword ptr [esi+2EBCh] 0 +
jz loc_102A67B  +
xor eax eax +
jmp loc_102A68F  +
lea eax [esi+0DB4h] +
push eax  +
push edi  +
push esi  +
call sub_102AD39  +
neg eax  +
sbb eax eax +
neg eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
movsx ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
cmp ebx [esi+2528h] +
jge loc_102A6CF  +
mov al [esi+252Eh] +
cmp al 10h +
jge loc_102A6C0  +
movsx eax al +
jmp loc_102A6C3  +
push 10h  +
pop eax  +
lea eax [esi+eax*2+2504h] +
inc word ptr [eax]  +
jmp loc_102A6F9  +
push edi  +
lea edi [esi+252Eh] +
inc byte ptr [edi]  +
movzx eax word ptr [esi+ebx*4+0F28h] +
push eax  +
push esi  +
call sub_102A69B  +
movzx eax word ptr [esi+ebx*4+0F2Ah] +
push eax  +
push esi  +
call sub_102A69B  +
dec byte ptr [edi]  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
xor eax eax +
push edi  +
movzx esi ax +
push 8  +
mov eax esi +
pop ecx  +
push [ebp+arg_0]  +
shl esi 10h +
or eax esi +
lea edi [edx+2504h] +
stos   +
push edx  +
stos   +
call sub_102A69B  +
and [ebp+arg_0] 0 +
and [ebp+var_4] 0 +
lea esi [edx+2524h] +
mov bl 10h +
mov eax esi +
mov di [eax] +
mov ecx [ebp+var_4] +
shl di cl +
add word ptr [ebp+arg_0] di +
dec bl  +
dec eax  +
dec eax  +
inc [ebp+var_4]  +
test bl bl +
ja loc_102A741  +
xor edi edi +
cmp word ptr [ebp+arg_0] di +
jz loc_102A7A1  +
mov ecx 0FFFFh +
mov eax ecx +
add [esi] ax +
mov al 0Fh +
movzx ebx al +
cmp [edx+ebx*2+2504h] di +
jnz loc_102A780  +
dec al  +
jnz loc_102A76D  +
jmp loc_102A798  +
movzx eax al +
mov ebx ecx +
add [edx+eax*2+2504h] bx +
lea eax [edx+eax*2+2506h] +
add word ptr [eax] 2 +
add [ebp+arg_0] ecx +
cmp word ptr [ebp+arg_0] di +
jnz loc_102A766  +
mov cl 10h +
mov [ebp+arg_0] esi +
mov eax [ebp+arg_0] +
mov ax [eax] +
dec ax  +
movzx edi ax +
test di di +
jl loc_102A7D3  +
lea eax [edx+9A4h] +
mov esi [eax] +
movzx esi word ptr [esi] +
mov ebx [edx+9A8h] +
mov [esi+ebx] cl +
add dword ptr [eax] 2 +
dec edi  +
test di di +
jge loc_102A7BC  +
sub [ebp+arg_0] 2 +
dec cl  +
test cl cl +
ja loc_102A7A6  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov ecx [ebp+arg_0] +
movsx edx cx +
add ecx ecx +
push esi  +
movzx esi word ptr [eax+edx*2+9ACh] +
movzx edx word ptr [eax+252Ch] +
movzx ecx cx +
cmp cx dx +
mov [ebp+var_8] esi +
jg loc_102A88B  +
push ebx  +
push edi  +
movsx edi si +
add edi edi +
mov [ebp+var_4] edi +
jmp loc_102A822  +
mov edi [ebp+var_4] +
cmp cx dx +
jge loc_102A84B  +
mov esi [eax+9A0h] +
movsx edx cx +
movsx ebx word ptr [eax+edx*2+9AEh] +
movsx edx word ptr [eax+edx*2+9ACh] +
mov dx [esi+edx*2] +
cmp dx [esi+ebx*2] +
jbe loc_102A84B  +
inc ecx  +
movsx edx cx +
movzx esi word ptr [eax+edx*2+9ACh] +
mov edx [eax+9A0h] +
mov di [edi+edx] +
movsx ebx si +
cmp di [edx+ebx*2] +
jbe loc_102A889  +
movsx edx word ptr [ebp+arg_0] +
mov [eax+edx*2+9ACh] si +
movzx edx cx +
mov [ebp+arg_0] edx +
movzx edx word ptr [eax+252Ch] +
add ecx ecx +
cmp cx dx +
jle loc_102A81F  +
pop edi  +
pop ebx  +
movsx ecx word ptr [ebp+arg_0] +
mov dx word ptr [ebp+var_8] +
mov [eax+ecx*2+9ACh] dx +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
mov eax dword_1049010 +
xor eax ebp +
mov [ebp+var_4] eax +
xor eax eax +
test edi edi +
jle loc_102A8C8  +
cmp byte ptr [edx+eax] 12h +
jnb loc_102A91A  +
inc eax  +
cmp eax edi +
jl loc_102A8BD  +
xor eax eax +
mov word ptr [ebp+var_28] ax +
mov word ptr [ebp+var_28+2] ax +
mov eax [ebp+arg_0] +
xor ecx ecx +
inc ecx  +
add eax 2506h +
push ebx  +
mov bx word ptr [ebp+ecx*2+var_28] +
add bx [eax] +
add bx bx +
mov word ptr [ebp+ecx*2+var_28+2] bx +
inc ecx  +
inc eax  +
inc eax  +
cmp ecx 10h +
jle loc_102A8DE  +
xor ecx ecx +
pop ebx  +
test edi edi +
jle loc_102A91A  +
movsx eax byte ptr [edx+ecx] +
mov ax word ptr [ebp+eax*2+var_28] +
mov [esi+ecx*2] ax +
movsx eax byte ptr [edx+ecx] +
lea eax [ebp+eax*2+var_28] +
inc word ptr [eax]  +
inc ecx  +
cmp ecx edi +
jl loc_102A8FD  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1010796  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov cx [eax+252Ch] +
sub esp 0Ch +
push esi  +
sar cx 1 +
push edi  +
movzx esi cx +
jmp loc_102A94D  +
push esi  +
call sub_102A7E9  +
dec esi  +
cmp si 1 +
jge loc_102A946  +
mov ecx [ebp+arg_4] +
mov [eax+9A4h] ecx +
movzx ecx word ptr [eax+9AEh] +
movsx edx cx +
cmp edx [eax+2528h] +
mov [ebp+var_8] ecx +
mov [ebp+var_4] edx +
jge loc_102A984  +
mov edx [eax+9A4h] +
mov [edx] cx +
add dword ptr [eax+9A4h] 2 +
movzx ecx word ptr [eax+252Ch] +
movsx edx cx +
mov dx [eax+edx*2+9ACh] +
dec ecx  +
push 1  +
mov [eax+9AEh] dx +
mov [eax+252Ch] cx +
call sub_102A7E9  +
movzx edx word ptr [eax+9AEh] +
movsx ecx dx +
cmp ecx [eax+2528h] +
mov [ebp+var_C] edx +
jge loc_102A9D1  +
mov esi [eax+9A4h] +
mov [esi] dx +
add dword ptr [eax+9A4h] 2 +
movzx edi word ptr [ebp+arg_0] +
mov cx [ebx+ecx*2] +
mov edx [ebp+var_4] +
add cx [ebx+edx*2] +
inc [ebp+arg_0]  +
movsx esi di +
mov [ebx+esi*2] cx +
push 1  +
mov [eax+9AEh] di +
call sub_102A7E9  +
mov cx word ptr [ebp+var_8] +
mov [eax+esi*4+0F28h] cx +
mov cx word ptr [ebp+var_C] +
mov [eax+esi*4+0F2Ah] cx +
cmp word ptr [eax+252Ch] 1 +
jg loc_102A95C  +
mov ecx [ebp+arg_4] +
push edi  +
mov edx eax +
mov [eax+9A4h] ecx +
call sub_102A704  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
mov eax [ebp+arg_C] +
mov [esi+9A8h] eax +
xor eax eax +
xor ecx ecx +
mov [esi+2528h] edi +
mov [esi+9A0h] ebx +
movzx edx di +
mov byte ptr [esi+252Eh] 0 +
mov [esi+252Ch] ax +
mov [esi+9AEh] ax +
test edi edi +
jle loc_102AAE3  +
mov edi [esi+9A8h] +
mov byte ptr [eax+edi] 0 +
cmp word ptr [ebx+eax*2] 0 +
jz loc_102AAA8  +
inc word ptr [esi+252Ch]  +
movzx eax word ptr [esi+252Ch] +
cwde   +
mov [esi+eax*2+9ACh] cx +
mov edi [ebp+arg_4] +
inc ecx  +
movsx eax cx +
cmp eax edi +
jl loc_102AA80  +
movzx eax word ptr [esi+252Ch] +
cmp ax 2 +
jge loc_102AAF5  +
test ax ax +
jz loc_102AAE3  +
xor eax eax +
inc eax  +
cmp word ptr [esi+9AEh] 0 +
jnz loc_102AADB  +
mov [ebx+2] ax +
jmp loc_102AA4B  +
mov [ebx] ax +
jmp loc_102AA4B  +
movsx eax word ptr [esi+9AEh] +
mov edx [ebp+arg_10] +
xor ecx ecx +
mov [edx+eax*2] cx +
jmp loc_102AB12  +
push [ebp+arg_10]  +
mov eax esi +
push edx  +
call sub_102A92D  +
cmp [ebp+arg_14] 0 +
jz loc_102AB12  +
mov edx [ebp+arg_C] +
push esi  +
mov esi [ebp+arg_10] +
call sub_102A8A5  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 9Ch +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
xor edi edi +
xor eax eax +
cmp esi edi +
jbe loc_102AB48  +
mov ecx [ebp+arg_8] +
cmp byte ptr [eax+ecx] 11h +
jnb loc_102ABC3  +
inc eax  +
cmp eax esi +
jb loc_102AB36  +
push 44h  +
lea eax [ebp+var_9C] +
push edi  +
push eax  +
call memset  +
add esp 0Ch +
xor ecx ecx +
cmp esi edi +
jbe loc_102AB75  +
mov eax [ebp+arg_8] +
movzx eax byte ptr [ecx+eax] +
lea eax [ebp+eax*4+var_9C] +
inc dword ptr [eax]  +
inc ecx  +
cmp ecx esi +
jb loc_102AB60  +
xor edx edx +
inc edx  +
mov [ebp+var_54] edi +
mov eax edx +
mov esi [ebp+eax*4+var_9C] +
push 10h  +
pop ecx  +
sub ecx eax +
shl esi cl +
add esi [ebp+eax*4+var_58] +
inc eax  +
mov [ebp+eax*4+var_58] esi +
cmp eax 10h +
jbe loc_102AB7D  +
cmp [ebp+var_14] 10000h +
jz loc_102ABCA  +
cmp [ebp+var_14] edi +
jnz loc_102ABC3  +
mov cl [ebp+arg_C] +
shl edx cl +
add edx edx +
push edx  +
push edi  +
push [ebp+arg_10]  +
call memset  +
xor eax eax +
add esp 0Ch +
inc eax  +
jmp loc_102AD2A  +
xor eax eax +
jmp loc_102AD2A  +
movzx esi [ebp+arg_C] +
push ebx  +
mov bl 10h +
sub bl [ebp+arg_C] +
mov eax edx +
mov [ebp+var_C] esi +
cmp esi edx +
jb loc_102AC02  +
lea edi [esi-1] +
movzx ecx bl +
lea edx [ebp+eax*4+var_58] +
shr dword ptr [edx] cl +
xor edx edx +
inc edx  +
mov ecx edi +
shl edx cl +
inc eax  +
dec edi  +
mov [ebp+eax*4+var_A0] edx +
cmp eax esi +
jbe loc_102ABE0  +
cmp eax 10h +
ja loc_102AC1A  +
push 10h  +
pop ecx  +
sub ecx eax +
xor edx edx +
inc edx  +
shl edx cl +
inc eax  +
dec ecx  +
mov [ebp+eax*4+var_A0] edx +
cmp eax 10h +
jbe loc_102AC07  +
mov eax [ebp+esi*4+var_54] +
movzx ecx bl +
shr eax cl +
mov [ebp+var_10] ecx +
cmp eax 10000h +
jz loc_102AC4A  +
xor edx edx +
inc edx  +
mov ecx esi +
shl edx cl +
mov ecx [ebp+arg_10] +
sub edx eax +
add edx edx +
push edx  +
lea eax [ecx+eax*2] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
mov ecx [ebp+arg_4] +
xor eax eax +
mov [ebp+var_4] ecx +
mov [ebp+var_8] eax +
test ecx ecx +
jle loc_102AD26  +
mov ecx [ebp+arg_8] +
mov cl [eax+ecx] +
test cl cl +
jz loc_102AD16  +
movzx eax cl +
mov esi [ebp+eax*4+var_9C] +
lea edx [ebp+eax*4+var_58] +
mov edi [edx] +
add esi edi +
cmp cl [ebp+arg_C] +
ja loc_102ACBC  +
mov ecx [ebp+var_C] +
xor eax eax +
inc eax  +
shl eax cl +
cmp esi eax +
ja loc_102AD30  +
cmp edi esi +
jnb loc_102ACB8  +
mov eax [ebp+arg_10] +
lea ebx [eax+edi*2] +
mov eax [ebp+var_8] +
mov ecx esi +
sub ecx edi +
mov edi ebx +
movzx ebx ax +
mov eax ebx +
shl ebx 10h +
or eax ebx +
shr ecx 1 +
stos   +
adc ecx ecx +
stos   +
mov [edx] esi +
jmp loc_102AD16  +
mov ecx [ebp+var_10] +
mov [edx] esi +
mov edx edi +
shr edx cl +
mov ecx [ebp+arg_10] +
lea edx [ecx+edx*2] +
mov ecx [ebp+var_C] +
sub eax ecx +
shl edi cl +
mov ecx [ebp+arg_14] +
cmp word ptr [edx] 0 +
jnz loc_102ACF7  +
mov esi [ebp+var_4] +
shl esi 2 +
xor ebx ebx +
mov [esi+ecx+2] bx +
mov [esi+ecx] bx +
mov esi [ebp+var_4] +
neg esi  +
inc [ebp+var_4]  +
mov [edx] si +
movsx edx word ptr [edx] +
shl edx 2 +
mov esi ecx +
sub esi edx +
test di di +
jge loc_102AD08  +
inc esi  +
inc esi  +
add edi edi +
dec eax  +
mov edx esi +
jnz loc_102ACD5  +
mov ax word ptr [ebp+var_8] +
mov [edx] ax +
mov eax [ebp+var_8] +
inc eax  +
cmp eax [ebp+arg_4] +
mov [ebp+var_8] eax +
jl loc_102AC5D  +
xor eax eax +
inc eax  +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 18h  +
xor eax eax +
jmp loc_102AD29  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 58h +
mov eax dword_1049010 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov [ebp+var_54] eax +
push 8  +
xor eax eax +
pop ecx  +
lea edi [ebp+var_4C] +
stos   +
mov [ebp+var_58] esi +
stos   +
xor ecx ecx +
movzx eax cx +
add eax esi +
cmp byte ptr [eax] 11h +
jnb loc_102AE6E  +
movzx eax byte ptr [eax] +
lea eax [ebp+eax*2+var_4C] +
inc word ptr [eax]  +
inc ecx  +
cmp cx 8 +
jb loc_102AD67  +
push 0Fh  +
pop ecx  +
xor eax eax +
push 10h  +
mov [ebp+var_26] ax +
pop edx  +
mov di word ptr [ebp+eax+var_4C+2] +
shl di cl +
add di [ebp+eax+var_26] +
dec ecx  +
mov [ebp+eax+var_24] di +
inc eax  +
inc eax  +
dec edx  +
jnz loc_102AD92  +
xor eax eax +
cmp [ebp+var_6] ax +
jnz loc_102AE5E  +
push 6  +
pop ecx  +
push 7  +
pop edx  +
shr [ebp+eax+var_26] 9 +
xor edi edi +
inc edi  +
shl edi cl +
dec ecx  +
inc eax  +
inc eax  +
dec edx  +
mov word ptr [ebp+eax+var_4C] di +
jnz loc_102ADBC  +
push 8  +
pop ecx  +
push 9  +
lea eax [ebp+var_3C] +
pop edx  +
xor edi edi +
inc edi  +
shl edi cl +
dec ecx  +
mov [eax] di +
inc eax  +
inc eax  +
dec edx  +
jnz loc_102ADDB  +
push 80h  +
push edx  +
push [ebp+var_54]  +
call memset  +
add esp 0Ch +
mov byte ptr [ebp+var_50] 0 +
movzx eax byte ptr [ebp+var_50] +
mov al [eax+esi] +
test al al +
jz loc_102AE52  +
movzx eax al +
add eax eax +
lea edi [ebp+eax-28h] +
movzx ecx word ptr [edi] +
mov ax word ptr [ebp+eax+var_4C] +
add ax cx +
movzx esi ax +
mov eax 80h +
cmp si ax +
ja loc_102AE6E  +
movzx ecx cx +
cmp cx si +
jnb loc_102AE4C  +
mov edx esi +
movzx eax cx +
add eax [ebp+var_54] +
sub edx ecx +
movzx ecx dx +
push ecx  +
push [ebp+var_50]  +
push eax  +
call memset  +
add esp 0Ch +
mov [edi] si +
mov esi [ebp+var_58] +
inc byte ptr [ebp+var_50]  +
cmp byte ptr [ebp+var_50] 8 +
jb loc_102ADFE  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1010796  +
leave   +
retn 0Ch  +
xor eax eax +
jmp loc_102AE5E  +
***
mov eax [esp+arg_C] +
or eax eax +
jnz loc_102AEA2  +
mov ecx [esp+arg_8] +
mov eax [esp+arg_4] +
xor edx edx +
div  ecx +
mov ebx eax +
mov eax [esp+arg_0] +
div  ecx +
mov edx ebx +
jmp loc_102AEE3  +
mov ecx eax +
mov ebx [esp+arg_8] +
mov edx [esp+arg_4] +
mov eax [esp+arg_0] +
shr ecx 1 +
rcr ebx 1 +
shr edx 1 +
rcr eax 1 +
or ecx ecx +
jnz loc_102AEB0  +
div  ebx +
mov esi eax +
mul  [esp+arg_C] +
mov ecx eax +
mov eax [esp+arg_8] +
mul  esi +
add edx ecx +
jb loc_102AEDE  +
cmp edx [esp+arg_4] +
ja loc_102AEDE  +
jb loc_102AEDF  +
cmp eax [esp+arg_0] +
jbe loc_102AEDF  +
dec esi  +
xor edx edx +
mov eax esi +
pop esi  +
pop ebx  +
retn 10h  +
***
push ebx  +
xor edi edi +
mov eax [esp+arg_4] +
or eax eax +
jge loc_102AF11  +
inc edi  +
mov edx [esp+arg_0] +
neg eax  +
neg edx  +
sbb eax 0 +
mov [esp+arg_4] eax +
mov [esp+arg_0] edx +
mov eax [esp+arg_C] +
or eax eax +
jge loc_102AF2D  +
inc edi  +
mov edx [esp+arg_8] +
neg eax  +
neg edx  +
sbb eax 0 +
mov [esp+arg_C] eax +
mov [esp+arg_8] edx +
or eax eax +
jnz loc_102AF49  +
mov ecx [esp+arg_8] +
mov eax [esp+arg_4] +
xor edx edx +
div  ecx +
mov ebx eax +
mov eax [esp+arg_0] +
div  ecx +
mov edx ebx +
jmp loc_102AF8A  +
mov ebx eax +
mov ecx [esp+arg_8] +
mov edx [esp+arg_4] +
mov eax [esp+arg_0] +
shr ebx 1 +
rcr ecx 1 +
shr edx 1 +
rcr eax 1 +
or ebx ebx +
jnz loc_102AF57  +
div  ecx +
mov esi eax +
mul  [esp+arg_C] +
mov ecx eax +
mov eax [esp+arg_8] +
mul  esi +
add edx ecx +
jb loc_102AF85  +
cmp edx [esp+arg_4] +
ja loc_102AF85  +
jb loc_102AF86  +
cmp eax [esp+arg_0] +
jbe loc_102AF86  +
dec esi  +
xor edx edx +
mov eax esi +
dec edi  +
jnz loc_102AF94  +
neg edx  +
neg eax  +
sbb edx 0 +
pop ebx  +
pop esi  +
pop edi  +
retn 10h  +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-1Ch] +
xor ecx ebp +
call sub_1010796  +
jmp __SEH_epilog4  +
***
xor edi edi +
mov eax [esp+arg_4] +
or eax eax +
jge loc_102B020  +
inc edi  +
mov edx [esp+arg_0] +
neg eax  +
neg edx  +
sbb eax 0 +
mov [esp+arg_4] eax +
mov [esp+arg_0] edx +
mov eax [esp+arg_C] +
or eax eax +
jge loc_102B03B  +
mov edx [esp+arg_8] +
neg eax  +
neg edx  +
sbb eax 0 +
mov [esp+arg_C] eax +
mov [esp+arg_8] edx +
or eax eax +
jnz loc_102B05A  +
mov ecx [esp+arg_8] +
mov eax [esp+arg_4] +
xor edx edx +
div  ecx +
mov eax [esp+arg_0] +
div  ecx +
mov eax edx +
xor edx edx +
dec edi  +
jns loc_102B0A6  +
jmp loc_102B0AD  +
mov ebx eax +
mov ecx [esp+arg_8] +
mov edx [esp+arg_4] +
mov eax [esp+arg_0] +
shr ebx 1 +
rcr ecx 1 +
shr edx 1 +
rcr eax 1 +
or ebx ebx +
jnz loc_102B068  +
div  ecx +
mov ecx eax +
mul  [esp+arg_C] +
xchg eax ecx +
mul  [esp+arg_8] +
add edx ecx +
jb loc_102B093  +
cmp edx [esp+arg_4] +
ja loc_102B093  +
jb loc_102B09B  +
cmp eax [esp+arg_0] +
jbe loc_102B09B  +
sub eax [esp+arg_8] +
sbb edx [esp+arg_C] +
sub eax [esp+arg_0] +
sbb edx [esp+arg_4] +
dec edi  +
jns loc_102B0AD  +
neg edx  +
neg eax  +
sbb edx 0 +
pop edi  +
pop ebx  +
retn 10h  +
***
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb cs20  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp+0] eax +
retn   +
sub eax 1000h +
test [eax] eax +
jmp cs10  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1F4h +
mov edx 1388h +
push ebx  +
push esi  +
push edi  +
push 5  +
pop ecx  +
xor eax eax +
mov [ebp+var_1F4] ecx +
mov [ebp+var_1F0] ecx +
mov [ebp+var_1EC] edx +
mov [ebp+var_1E8] 6CFh +
mov [ebp+var_1E4] 6 +
mov [ebp+var_1E0] ecx +
mov [ebp+var_1DC] edx +
mov [ebp+var_1D8] 6D0h +
mov [ebp+var_1D4] 35h +
mov [ebp+var_1D0] ecx +
mov [ebp+var_1CC] edx +
mov [ebp+var_1C8] 6D1h +
mov [ebp+var_1C4] 43h +
mov [ebp+var_1C0] ecx +
mov [ebp+var_1BC] edx +
mov [ebp+var_1B8] 6D2h +
mov [ebp+var_1B4] 3Ah +
mov [ebp+var_1B0] ecx +
mov [ebp+var_1AC] edx +
mov [ebp+var_1A8] 6D3h +
mov [ebp+var_1A4] 4B4h +
mov [ebp+var_1A0] ecx +
mov [ebp+var_19C] edx +
mov [ebp+var_198] 6D4h +
mov [ebp+var_194] 547h +
mov [ebp+var_190] ecx +
mov [ebp+var_18C] edx +
mov [ebp+var_188] 6D5h +
mov [ebp+var_184] 4D4h +
mov [ebp+var_180] ecx +
mov [ebp+var_17C] edx +
mov [ebp+var_178] 6D6h +
mov [ebp+var_174] 4CDh +
mov [ebp+var_170] ecx +
mov [ebp+var_16C] edx +
mov [ebp+var_168] 6D7h +
mov [ebp+var_164] 4C9h +
mov [ebp+var_160] ecx +
mov [ebp+var_15C] edx +
mov [ebp+var_158] 6D8h +
mov [ebp+var_154] 4CAh +
mov [ebp+var_150] ecx +
mov [ebp+var_14C] edx +
mov [ebp+var_148] 6D9h +
mov [ebp+var_144] 4E8h +
mov [ebp+var_140] ecx +
mov [ebp+var_13C] edx +
mov [ebp+var_138] 6DAh +
mov [ebp+var_134] 4D0h +
mov [ebp+var_130] ecx +
mov [ebp+var_12C] edx +
mov [ebp+var_128] 6DBh +
mov [ebp+var_124] 52Eh +
mov [ebp+var_120] ecx +
mov [ebp+var_11C] edx +
mov [ebp+var_118] 6DCh +
mov [ebp+var_114] 40h +
mov [ebp+var_110] ecx +
mov [ebp+var_10C] edx +
mov [ebp+var_108] 6DDh +
mov [ebp+var_104] 41h +
mov [ebp+var_100] ecx +
mov [ebp+var_FC] edx +
mov [ebp+var_F8] 6DEh +
mov [ebp+var_F4] 4CFh +
mov [ebp+var_F0] ecx +
mov [ebp+var_EC] edx +
mov [ebp+var_E8] 6DFh +
mov [ebp+var_E4] 4B3h +
mov [ebp+var_E0] ecx +
mov [ebp+var_DC] edx +
mov [ebp+var_D8] 6E0h +
mov [ebp+var_D4] 4C6h +
mov [ebp+var_D0] ecx +
mov esi [ebp+arg_8] +
mov edi [ebp+arg_4] +
mov [ebp+var_CC] edx +
mov [ebp+var_BC] edx +
mov [ebp+var_AC] edx +
mov [ebp+var_9C] edx +
mov [ebp+var_8C] edx +
mov [ebp+var_7C] edx +
mov edx 4E20h +
mov [ebp+var_6C] edx +
mov [ebp+var_5C] edx +
mov [ebp+var_4C] edx +
mov [ebp+var_3C] edx +
mov edx 1F4h +
mov [ebp+var_C0] ecx +
mov [ebp+var_B0] ecx +
mov [ebp+var_A0] ecx +
mov [ebp+var_90] ecx +
mov [ebp+var_80] ecx +
mov [ebp+var_70] ecx +
mov [ebp+var_60] ecx +
mov [ebp+var_50] ecx +
mov [ebp+var_40] ecx +
mov [ebp+var_30] ecx +
mov [ebp+var_2C] edx +
mov [ebp+var_20] ecx +
mov [ebp+var_1C] edx +
mov [ebp+var_10] ecx +
mov [ebp+var_C] edx +
mov edx [ebp+arg_C] +
mov [ebp+var_C8] 6E1h +
mov [ebp+var_C4] 4D2h +
mov [ebp+var_B8] 6E2h +
mov [ebp+var_B4] 47h +
mov [ebp+var_A8] 6E3h +
mov [ebp+var_A4] 79h +
mov [ebp+var_98] 6E4h +
mov [ebp+var_94] 20h +
mov [ebp+var_88] 6E5h +
mov [ebp+var_84] 3Bh +
mov [ebp+var_78] 6E6h +
mov [ebp+var_74] 4D6h +
mov [ebp+var_68] 6E7h +
mov [ebp+var_64] 36h +
mov [ebp+var_58] 6E8h +
mov [ebp+var_54] 46Ah +
mov [ebp+var_48] 6E9h +
mov [ebp+var_44] 4C4h +
mov [ebp+var_38] 6EAh +
mov [ebp+var_34] 17h +
mov [ebp+var_28] 6EBh +
mov [ebp+var_24] 570h +
mov [ebp+var_18] 6ECh +
mov [ebp+var_14] 241h +
mov [ebp+var_8] 6EDh +
mov [ebp+var_4] eax +
lea ecx [ebp+var_1F0] +
test eax eax +
jnz loc_102B4D8  +
mov ebx [ecx-4] +
cmp ebx [ebp+arg_0] +
jnz loc_102B4CC  +
test edi edi +
jz loc_102B4B7  +
mov eax [ecx] +
mov [edi] eax +
test esi esi +
jz loc_102B4C0  +
mov eax [ecx+4] +
mov [esi] eax +
test edx edx +
jz loc_102B4C9  +
mov eax [ecx+8] +
mov [edx] eax +
xor eax eax +
inc eax  +
inc [ebp+var_4]  +
add ecx 10h +
cmp [ebp+var_4] 1Fh +
jb loc_102B4A3  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_4] 0 +
and [ebp+var_8] 0 +
push 0  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_4]  +
call sub_102B0F0  +
test eax eax +
jz loc_102B523  +
mov eax [ebp+arg_0] +
cmp eax [ebp+var_4] +
jb loc_102B515  +
xor eax eax +
jmp locret_102B539  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_102B536  +
mov ecx [ebp+var_8] +
mov [eax] ecx +
jmp loc_102B536  +
cmp [ebp+arg_0] 2 +
jnb loc_102B511  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_102B536  +
mov dword ptr [eax] 0BB8h +
xor eax eax +
inc eax  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+lpFileName] +
push ebx  +
push esi  +
xor esi esi +
xor ebx ebx +
cmp eax esi +
jz loc_102B5B3  +
xor ecx ecx +
cmp cx [eax] +
jz loc_102B5B3  +
push edi  +
push esi  +
push eax  +
call sub_102B929  +
mov edi eax +
cmp edi esi +
jz loc_102B5AE  +
push edi  +
call ds:GetFileAttributesW  +
cmp eax 0FFFFFFFFh +
jz loc_102B57C  +
test al 10h +
jz loc_102B57C  +
inc ebx  +
jmp loc_102B597  +
xor ebx ebx +
call ds:GetLastError  +
mov esi eax +
test esi esi +
jnz loc_102B58F  +
mov esi 10Bh +
cmp esi 2 +
jnz loc_102B597  +
push 3  +
pop esi  +
push edi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
push esi  +
call ds:SetLastError  +
mov eax ebx +
pop edi  +
jmp loc_102B5BD  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
push edi  +
mov edi dword ptr [ebp+arg_0] +
test edi edi +
jz loc_102B6B6  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jz loc_102B6B6  +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_102B5F0  +
sub eax edx +
sar eax 1 +
mov ecx eax +
mov eax ebx +
lea edx [eax+2] +
mov si [eax] +
inc eax  +
inc eax  +
test si si +
jnz loc_102B605  +
sub eax edx +
sar eax 1 +
test ecx ecx +
jz loc_102B639  +
push 5Ch  +
pop edx  +
cmp dx [edi+ecx*2-2] +
push edx  +
pop edx  +
jnz loc_102B62D  +
cmp dx [ebx] +
jnz loc_102B639  +
inc ebx  +
inc ebx  +
dec eax  +
jmp loc_102B639  +
cmp dx [ebx] +
jz loc_102B639  +
mov [ebp+var_4] 1 +
mov edx [ebp+var_4] +
add edx eax +
mov eax large fs:18h +
mov eax [eax+30h] +
lea esi [edx+ecx+1] +
lea ecx [esi+esi] +
push ecx  +
push 8  +
push dword ptr [eax+18h]  +
call ds:RtlAllocateHeap  +
mov edi eax +
test edi edi +
jz loc_102B6C3  +
cmp [ebp+var_4] 0 +
mov eax offset asc_10019A0 +
ja loc_102B670  +
mov eax offset Mem +
push ebx  +
push eax  +
push dword ptr [ebp+arg_0]  +
push offset aSSS  +
push esi  +
push edi  +
call sub_10149FA  +
mov esi eax +
mov eax large fs:18h +
add esp 18h +
test esi esi +
jge loc_102B6AE  +
mov eax [eax+30h] +
push edi  +
push 0  +
push dword ptr [eax+18h]  +
call ds:RtlFreeHeap  +
mov ecx large fs:18h +
movzx eax si +
mov [ecx+34h] eax +
jmp loc_102B6C3  +
and dword ptr [eax+34h] 0 +
mov eax edi +
jmp loc_102B6C5  +
mov eax large fs:18h +
mov dword ptr [eax+34h] 57h +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_8] +
test esi esi +
jnz loc_102B6E5  +
mov eax 80070057h +
jmp loc_102B72D  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_102B5C8  +
mov [esi] eax +
test eax eax +
jz loc_102B6FA  +
xor eax eax +
jmp loc_102B72D  +
push ebx  +
mov ebx ds:GetLastError +
push edi  +
call ebx  +
mov edi 0FFFFh +
mov esi 80070000h +
test eax eax +
jle loc_102B718  +
and eax edi +
or eax esi +
test eax eax +
jge loc_102B726  +
call ebx  +
test eax eax +
jle loc_102B72B  +
and eax edi +
or eax esi +
jmp loc_102B72B  +
mov eax 80004005h +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
xor eax eax +
push ebx  +
mov ebx [ebp+lpFileName] +
mov [ebp+var_8] eax +
mov [ebp+dwErrCode] eax +
cmp ebx eax +
jz loc_102B7A8  +
xor ecx ecx +
cmp cx [ebx] +
jz loc_102B7A8  +
push esi  +
mov esi ds:GetFullPathNameW +
push edi  +
push eax  +
push eax  +
push eax  +
push ebx  +
call esi  +
mov edi eax +
test edi edi +
jz loc_102B78F  +
lea eax [edi+edi] +
push eax  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+var_8] eax +
test eax eax +
jz loc_102B798  +
push [ebp+lpFilePart]  +
push eax  +
push edi  +
push ebx  +
call esi  +
test eax eax +
jnz loc_102B798  +
call ds:GetLastError  +
mov [ebp+dwErrCode] eax +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
jmp loc_102B7B2  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
xor edi edi +
cmp ebx edi +
jnz loc_102B7D8  +
mov eax 80070057h +
jmp loc_102B900  +
push esi  +
push offset asc_1006D14  +
push ebx  +
call sub_101152D  +
test eax eax +
jz loc_102B8DE  +
mov esi ds:wcschr +
lea eax [ebx+4] +
push 5Ch  +
push eax  +
call esi  +
pop ecx  +
pop ecx  +
cmp eax edi +
jnz loc_102B80C  +
mov [ebp+arg_0] 8007000Dh +
jmp loc_102B8FC  +
mov ecx ebx +
mov [ebp+lpMem] edi +
mov [ebp+var_8] edi +
lea edx [ecx+2] +
mov di [ecx] +
inc ecx  +
inc ecx  +
test di di +
jnz loc_102B817  +
sub ecx edx +
add eax 2 +
sar ecx 1 +
push 5Ch  +
push eax  +
mov edi ecx +
call esi  +
pop ecx  +
pop ecx  +
xor ecx ecx +
cmp eax ecx +
jnz loc_102B83B  +
mov esi edi +
jmp loc_102B841  +
sub eax ebx +
sar eax 1 +
mov esi eax +
cmp [ebp+arg_8] ecx +
jz loc_102B859  +
lea eax [ebp+lpMem] +
push eax  +
push esi  +
push ecx  +
push ebx  +
call sub_101149E  +
mov [ebp+arg_0] eax +
xor ecx ecx +
jmp loc_102B85C  +
mov [ebp+arg_0] ecx +
cmp [ebp+arg_0] ecx +
jl loc_102B8A9  +
cmp [ebp+arg_C] ecx +
jz loc_102B879  +
lea eax [ebp+var_8] +
push eax  +
sub edi esi +
push edi  +
push esi  +
push ebx  +
call sub_101149E  +
mov [ebp+arg_0] eax +
xor ecx ecx +
cmp [ebp+arg_0] ecx +
jl loc_102B8A9  +
mov eax [ebp+arg_8] +
cmp eax ecx +
jz loc_102B88D  +
mov edx [ebp+lpMem] +
mov [eax] edx +
mov [ebp+lpMem] ecx +
mov eax [ebp+arg_C] +
cmp eax ecx +
jz loc_102B89C  +
mov edx [ebp+var_8] +
mov [eax] edx +
mov [ebp+var_8] ecx +
mov eax [ebp+arg_4] +
cmp eax ecx +
jz loc_102B8A9  +
mov dword ptr [eax] 1 +
mov esi ds:HeapFree +
mov edi ds:GetProcessHeap +
cmp [ebp+lpMem] ecx +
jz loc_102B8CC  +
push [ebp+lpMem]  +
push 0  +
call edi  +
push eax  +
call esi  +
test eax eax +
jz loc_102B8CC  +
and [ebp+lpMem] 0 +
cmp [ebp+var_8] 0 +
jz loc_102B8FC  +
push [ebp+var_8]  +
push 0  +
call edi  +
push eax  +
call esi  +
jmp loc_102B8FC  +
mov eax [ebp+arg_4] +
mov [ebp+arg_0] edi +
cmp eax edi +
jz loc_102B8EA  +
mov [eax] edi +
mov eax [ebp+arg_8] +
cmp eax edi +
jz loc_102B8F3  +
mov [eax] edi +
mov eax [ebp+arg_C] +
cmp eax edi +
jz loc_102B8FC  +
mov [eax] edi +
mov eax [ebp+arg_0] +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_102B7BC  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
mov eax dword_1049010 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+lpFileName] +
mov ecx [ebp+arg_4] +
push esi  +
mov esi ds:dword_1006D2C +
mov dword ptr [ebp+var_C] esi +
mov esi ds:dword_1006D30 +
push edi  +
mov [ebp+var_8] esi +
mov esi offset a?Unc +
lea edi [ebp+var_1C] +
movs   +
movs   +
movs   +
xor edx edx +
mov [ebp+var_30] eax +
mov [ebp+var_28] ecx +
mov [ebp+var_20] edx +
movs   +
cmp eax edx +
jz loc_102BB0C  +
xor esi esi +
cmp si [eax] +
jz loc_102BB0C  +
cmp ecx edx +
jz loc_102B985  +
mov [ecx] edx +
push ebx  +
push edx  +
push eax  +
call sub_102B737  +
mov [ebp+lpMem] eax +
mov ebx 0FFFFh +
mov edi 80070000h +
test eax eax +
jnz loc_102B9CD  +
mov esi ds:GetLastError +
call esi  +
test eax eax +
jle loc_102B9B0  +
and eax ebx +
or eax edi +
test eax eax +
jge loc_102B9C0  +
call esi  +
test eax eax +
jle loc_102B9BC  +
and eax ebx +
or eax edi +
mov esi eax +
jmp loc_102B9C5  +
mov esi 80004005h +
test esi esi +
jl loc_102BAE0  +
mov eax [ebp+lpMem] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_102B9D3  +
sub eax edx +
sar eax 1 +
cmp eax 104h +
jb loc_102BA94  +
mov esi ds:_wcsnicmp +
push 3  +
lea eax [ebp+var_C] +
push eax  +
push [ebp+lpMem]  +
call esi  +
add esp 0Ch +
test eax eax +
jz loc_102BA94  +
push 7  +
lea eax [ebp+var_1C] +
push eax  +
push [ebp+lpMem]  +
call esi  +
add esp 0Ch +
test eax eax +
jz loc_102BA94  +
and [ebp+var_2C] 0 +
push 0  +
lea eax [ebp+var_2C] +
push eax  +
push [ebp+lpMem]  +
call sub_102B90B  +
mov esi eax +
test esi esi +
jl loc_102BAE0  +
cmp [ebp+var_2C] 1 +
lea eax [ebp+var_20] +
push eax  +
jnz loc_102BA6B  +
mov eax [ebp+lpMem] +
add eax 2 +
push eax  +
lea eax [ebp+var_1C] +
push eax  +
call sub_102B6D1  +
mov esi eax +
test esi esi +
jl loc_102BAE0  +
mov eax [ebp+var_28] +
test eax eax +
jz loc_102BA8E  +
mov ecx [ebp+var_20] +
add ecx 10h +
mov [eax] ecx +
jmp loc_102BA8E  +
push [ebp+lpMem]  +
lea eax [ebp+var_C] +
push eax  +
call sub_102B6D1  +
mov esi eax +
test esi esi +
jl loc_102BAE0  +
cmp [ebp+var_28] 0 +
jz loc_102BA8E  +
mov eax [ebp+var_20] +
mov ecx [ebp+var_28] +
add eax 8 +
mov [ecx] eax +
cmp [ebp+var_20] 0 +
jnz loc_102BAE4  +
push [ebp+var_30]  +
call sub_101140A  +
mov [ebp+var_20] eax +
test eax eax +
jz loc_102BAA7  +
xor esi esi +
jmp loc_102BAD2  +
mov esi ds:GetLastError +
call esi  +
test eax eax +
jle loc_102BAB9  +
and eax ebx +
or eax edi +
test eax eax +
jge loc_102BAC9  +
call esi  +
test eax eax +
jle loc_102BAC5  +
and eax ebx +
or eax edi +
mov esi eax +
jmp loc_102BACE  +
mov esi 80004005h +
test esi esi +
jl loc_102BAE0  +
mov eax [ebp+var_28] +
test eax eax +
jz loc_102BAE4  +
mov ecx [ebp+var_20] +
mov [eax] ecx +
jmp loc_102BAE4  +
and [ebp+var_20] 0 +
cmp [ebp+lpMem] 0 +
pop ebx  +
jz loc_102BAFD  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
movzx eax si +
push eax  +
call ds:SetLastError  +
mov eax [ebp+var_20] +
jmp loc_102BB16  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1010796  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+dwErrCode] +
push edi  +
xor edi edi +
mov [ebp+hKey] edi +
mov [ebp+lpMem] edi +
mov [ebp+nSize] edi +
mov [ebp+Type] edi +
cmp eax edi +
jnz loc_102BB58  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
leave   +
retn 10h  +
cmp [ebp+lpSubKey] edi +
jz loc_102BB8A  +
lea ecx [ebp+hKey] +
push ecx  +
push 20019h  +
push edi  +
push [ebp+lpSubKey]  +
push eax  +
call ds:RegOpenKeyExW  +
mov [ebp+dwErrCode] eax +
cmp eax edi +
jnz loc_102BB7D  +
cmp [ebp+hKey] edi +
jnz loc_102BB8D  +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
mov eax edi +
jmp loc_102BB53  +
mov [ebp+hKey] eax +
push ebx  +
mov ebx ds:RegQueryValueExW +
lea eax [ebp+nSize] +
push eax  +
push edi  +
lea eax [ebp+Type] +
push eax  +
push edi  +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call ebx  +
mov [ebp+dwErrCode] eax +
cmp eax edi +
jnz loc_102BCDE  +
cmp [ebp+Type] 1 +
jz loc_102BBC9  +
cmp [ebp+Type] 2 +
jz loc_102BBC9  +
mov [ebp+dwErrCode] 0Dh +
jmp loc_102BCDE  +
push esi  +
push [ebp+nSize]  +
mov esi ds:GetProcessHeap +
push 8  +
call esi  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+lpMem] eax +
cmp eax edi +
jz loc_102BCD4  +
lea ecx [ebp+nSize] +
push ecx  +
push eax  +
push edi  +
push edi  +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call ebx  +
mov [ebp+dwErrCode] eax +
cmp eax edi +
jnz loc_102BC12  +
cmp [ebp+Type] 1 +
jz loc_102BC27  +
cmp [ebp+Type] 2 +
jz loc_102BC27  +
mov [ebp+dwErrCode] 0Dh +
push [ebp+lpMem]  +
push edi  +
call esi  +
push eax  +
call ds:HeapFree  +
mov [ebp+lpMem] edi +
jmp loc_102BCDD  +
cmp [ebp+arg_C] 1 +
jnz loc_102BCDD  +
cmp [ebp+Type] 2 +
jnz loc_102BCDD  +
mov ebx ds:ExpandEnvironmentStringsW +
push edi  +
push edi  +
push [ebp+lpMem]  +
call ebx  +
mov [ebp+nSize] eax +
cmp eax edi +
jz loc_102BCB5  +
add eax eax +
push eax  +
push 8  +
call esi  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+lpValueName] eax +
cmp eax edi +
jz loc_102BC86  +
push [ebp+nSize]  +
push eax  +
push [ebp+lpMem]  +
call ebx  +
test eax eax +
jz loc_102BC86  +
push [ebp+lpMem]  +
push edi  +
call esi  +
push eax  +
call ds:HeapFree  +
mov eax [ebp+lpValueName] +
mov [ebp+lpMem] eax +
jmp loc_102BCDD  +
call ds:GetLastError  +
push [ebp+lpMem]  +
mov [ebp+dwErrCode] eax +
push edi  +
call esi  +
mov ebx ds:HeapFree +
push eax  +
call ebx  +
cmp [ebp+lpValueName] edi +
jz loc_102BC1F  +
push [ebp+lpValueName]  +
push edi  +
call esi  +
push eax  +
call ebx  +
jmp loc_102BC1F  +
call ds:GetLastError  +
push [ebp+lpMem]  +
mov [ebp+dwErrCode] eax +
push edi  +
call esi  +
push eax  +
call ds:HeapFree  +
test eax eax +
jz loc_102BCDD  +
jmp loc_102BC1F  +
call ds:GetLastError  +
mov [ebp+dwErrCode] eax +
pop esi  +
pop ebx  +
cmp [ebp+lpSubKey] edi +
jz loc_102BCED  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov edi [ebp+lpMem] +
jmp loc_102BB7D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+lpValueName]  +
push [ebp+lpSubKey]  +
push [ebp+dwErrCode]  +
call sub_102BB2B  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+arg_0] +
push esi  +
xor esi esi +
mov [ebp+hKey] esi +
mov dword ptr [ebp+Data] esi +
mov [ebp+cbData] 4 +
mov [ebp+Type] esi +
cmp eax esi +
jnz loc_102BD46  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_102BDB3  +
cmp [ebp+lpSubKey] esi +
jz loc_102BD6B  +
lea ecx [ebp+hKey] +
push ecx  +
push 20019h  +
push esi  +
push [ebp+lpSubKey]  +
push eax  +
call ds:RegOpenKeyExW  +
cmp eax esi +
jnz loc_102BD68  +
cmp [ebp+hKey] esi +
jnz loc_102BD6E  +
push eax  +
jmp loc_102BD3C  +
mov [ebp+hKey] eax +
push edi  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push esi  +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call ds:RegQueryValueExW  +
mov edi eax +
cmp edi esi +
jnz loc_102BD97  +
cmp [ebp+cbData] 4 +
jz loc_102BD9A  +
push 0Dh  +
pop edi  +
mov dword ptr [ebp+Data] esi +
cmp [ebp+lpSubKey] esi +
jz loc_102BDA8  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
push edi  +
call ds:SetLastError  +
mov eax dword ptr [ebp+Data] +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_102F917  +
test [ebp+arg_0] 1 +
jz loc_102BDD7  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
xor edi edi +
cmp ebx edi +
jz loc_102BE4A  +
cmp [ebp+arg_4] edi +
jz loc_102BE4A  +
cmp [ebp+arg_8] edi +
jz loc_102BE4A  +
push esi  +
push 10h  +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax edi +
jz loc_102BE15  +
mov ecx eax +
call sub_102FC1F  +
mov esi eax +
jmp loc_102BE17  +
xor esi esi +
cmp esi edi +
jz loc_102BE40  +
push edi  +
push [ebp+arg_8]  +
mov ecx esi +
push [ebp+arg_4]  +
call sub_102DC36  +
mov edi eax +
test edi edi +
jl loc_102BE35  +
mov [ebx] esi +
xor edi edi +
jmp loc_102BE45  +
push 1  +
mov ecx esi +
call sub_102BDBD  +
jmp loc_102BE45  +
mov edi 8007000Eh +
mov eax edi +
pop esi  +
jmp loc_102BE4F  +
mov eax 80070057h +
pop edi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_102BE85  +
mov ecx [eax] +
test ecx ecx +
jz loc_102BE85  +
cmp [ebp+arg_4] 0 +
jz loc_102BE85  +
cmp [ebp+arg_8] 0 +
jz loc_102BE85  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_102FC31  +
jmp loc_102BE8A  +
mov eax 80070057h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_102BEC2  +
mov esi [edi] +
test esi esi +
jz loc_102BEC2  +
mov ecx esi +
call sub_102D3D3  +
test esi esi +
jz loc_102BEBB  +
push 1  +
mov ecx esi +
call sub_102BDBD  +
and dword ptr [edi] 0 +
xor eax eax +
jmp loc_102BEC7  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_102BF0A  +
mov eax [eax] +
test eax eax +
jz loc_102BF0A  +
mov ecx [ebp+lpMem] +
test ecx ecx +
jz loc_102BF0A  +
xor edx edx +
cmp dx [ecx] +
jz loc_102BF0A  +
cmp [ebp+arg_10] edx +
jz loc_102BF0A  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push ecx  +
mov ecx eax +
call sub_102FABF  +
jmp loc_102BF0F  +
mov eax 80070057h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor edx edx +
cmp eax edx +
jz loc_102BF5A  +
mov eax [eax] +
cmp eax edx +
jz loc_102BF5A  +
mov ecx [ebp+arg_4] +
cmp ecx edx +
jz loc_102BF5A  +
push esi  +
xor esi esi +
cmp si [ecx] +
pop esi  +
jz loc_102BF5A  +
cmp [ebp+arg_8] edx +
jz loc_102BF5A  +
cmp [ebp+arg_C] edx +
jz loc_102BF5A  +
push [ebp+arg_C]  +
push 1  +
push [ebp+arg_8]  +
push edx  +
push edx  +
push ecx  +
mov ecx eax +
call sub_102F725  +
jmp loc_102BF5F  +
mov eax 80070057h +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor edx edx +
cmp eax edx +
jz loc_102BFA7  +
mov ecx [eax] +
cmp ecx edx +
jz loc_102BFA7  +
mov eax [ebp+arg_4] +
cmp eax edx +
jz loc_102BFA7  +
push esi  +
xor esi esi +
cmp si [eax] +
pop esi  +
jz loc_102BFA7  +
cmp [ebp+arg_14] edx +
jz loc_102BFA7  +
push [ebp+arg_14]  +
push edx  +
push [ebp+arg_10]  +
push edx  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push eax  +
call sub_102F6D2  +
jmp loc_102BFAC  +
mov eax 80070057h +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_10]  +
push 0  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_102BF68  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
lea ecx [ebp+var_14] +
call sub_102D2FF  +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_102C04B  +
mov ebx [eax] +
test ebx ebx +
jz loc_102C04B  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_102C04B  +
mov esi [eax] +
test esi esi +
jz loc_102C04B  +
cmp [ebp+arg_C] 0 +
jz loc_102C04B  +
cmp [ebp+arg_10] 0 +
jz loc_102C04B  +
push edi  +
lea edi [ebp+var_14] +
movs   +
movs   +
lea eax [ebp+var_4] +
movs   +
push eax  +
lea eax [ebp+var_14] +
push eax  +
mov ecx ebx +
movs   +
call sub_102E03B  +
pop edi  +
test eax eax +
jl loc_102C050  +
mov eax [ebp+arg_8] +
cmp eax [ebp+var_4] +
jnb loc_102C04B  +
push 0  +
push [ebp+arg_10]  +
mov ecx ebx +
push [ebp+arg_C]  +
push eax  +
lea eax [ebp+var_14] +
push eax  +
call sub_102E0B2  +
jmp loc_102C050  +
mov eax 80070057h +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push edi  +
lea ecx [ebp+var_10] +
call sub_102D2FF  +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_102C0B6  +
mov ecx [eax] +
test ecx ecx +
jz loc_102C0B6  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_102C0B6  +
mov eax [eax] +
test eax eax +
jz loc_102C0B6  +
cmp [ebp+arg_8] 0 +
jz loc_102C0B6  +
cmp [ebp+arg_C] 0 +
jz loc_102C0B6  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push 1  +
push [ebp+arg_C]  +
movs   +
push [ebp+arg_8]  +
mov esi eax +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
call sub_102F936  +
jmp loc_102C0BB  +
mov eax 80070057h +
pop edi  +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_102C0D8  +
mov ecx [eax] +
test ecx ecx +
jnz loc_102C0DF  +
mov eax 80070057h +
jmp loc_102C0E4  +
call sub_102E4C5  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_102C0FF  +
mov ecx [eax] +
test ecx ecx +
jnz loc_102C106  +
mov eax 80070057h +
jmp loc_102C10B  +
call sub_102FBAA  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push edi  +
lea ecx [ebp+var_10] +
call sub_102D2FF  +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_102C15B  +
mov ecx [eax] +
test ecx ecx +
jz loc_102C15B  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_102C15B  +
mov eax [eax] +
test eax eax +
jz loc_102C15B  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
movs   +
sub esp 10h +
mov esi eax +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
call sub_102F74C  +
jmp loc_102C160  +
mov eax 80070057h +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push edi  +
lea ecx [ebp+var_10] +
call sub_102D2FF  +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_102C1B5  +
mov ecx [eax] +
test ecx ecx +
jz loc_102C1B5  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_102C1B5  +
mov eax [eax] +
test eax eax +
jz loc_102C1B5  +
push [ebp+arg_8]  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
movs   +
sub esp 10h +
mov esi eax +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
call sub_102F7A0  +
jmp loc_102C1BA  +
mov eax 80070057h +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push edi  +
lea ecx [ebp+var_10] +
call sub_102D2FF  +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_102C215  +
mov ecx [eax] +
test ecx ecx +
jz loc_102C215  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_102C215  +
mov eax [eax] +
test eax eax +
jz loc_102C215  +
cmp [ebp+arg_8] 0 +
jz loc_102C215  +
push [ebp+arg_8]  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
movs   +
sub esp 10h +
mov esi eax +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
call sub_102F7F7  +
jmp loc_102C21A  +
mov eax 80070057h +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push edi  +
test eax eax +
jz loc_102C26F  +
mov ecx [eax] +
test ecx ecx +
jz loc_102C26F  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_102C26F  +
mov esi [eax] +
test esi esi +
jz loc_102C26F  +
cmp [ebp+lpMem] 0 +
jz loc_102C26F  +
cmp [ebp+arg_10] 0 +
jz loc_102C26F  +
lea eax [ebp+arg_14] +
push eax  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+lpMem]  +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
call sub_102E500  +
jmp loc_102C274  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push edi  +
lea ecx [ebp+var_10] +
call sub_102D2FF  +
lea ecx [ebp+var_20] +
call sub_102D2FF  +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_102C2FA  +
mov ecx [eax] +
test ecx ecx +
jz loc_102C2FA  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_102C2FA  +
mov edx [eax] +
test edx edx +
jz loc_102C2FA  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_102C2FA  +
mov esi [eax] +
test esi esi +
jz loc_102C2FA  +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_102C2FA  +
mov eax [eax] +
test eax eax +
jz loc_102C2FA  +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
movs   +
mov esi eax +
lea edi [ebp+var_20] +
movs   +
movs   +
movs   +
movs   +
sub esp 10h +
mov edi esp +
mov esi eax +
movs   +
movs   +
movs   +
movs   +
push edx  +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_10] +
movs   +
movs   +
movs   +
movs   +
call sub_102F84E  +
jmp loc_102C2FF  +
mov eax 80070057h +
pop edi  +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx ds:GetProcessHeap +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+4] +
push edi  +
mov edi ds:HeapFree +
test eax eax +
jz loc_102C338  +
push eax  +
push 0  +
call ebx  +
push eax  +
call edi  +
test eax eax +
jz loc_102C338  +
and dword ptr [esi+4] 0 +
mov eax [esi+8] +
test eax eax +
jz loc_102C34F  +
push eax  +
push 0  +
call ebx  +
push eax  +
call edi  +
test eax eax +
jz loc_102C34F  +
and dword ptr [esi+8] 0 +
mov eax [esi+0Ch] +
test eax eax +
jz loc_102C366  +
push eax  +
push 0  +
call ebx  +
push eax  +
call edi  +
test eax eax +
jz loc_102C366  +
and dword ptr [esi+0Ch] 0 +
mov eax [esi+10h] +
test eax eax +
jz loc_102C37D  +
push eax  +
push 0  +
call ebx  +
push eax  +
call edi  +
test eax eax +
jz loc_102C37D  +
and dword ptr [esi+10h] 0 +
mov eax [esi+14h] +
test eax eax +
jz loc_102C394  +
push eax  +
push 0  +
call ebx  +
push eax  +
call edi  +
test eax eax +
jz loc_102C394  +
and dword ptr [esi+14h] 0 +
push 20h  +
pop eax  +
mov byte ptr [esi] 0 +
inc esi  +
dec eax  +
jnz loc_102C397  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_102C420  +
cmp dword ptr [esi] 0 +
jl loc_102C420  +
cmp [ebp+arg_4] 0 +
jge loc_102C420  +
push ebx  +
push edi  +
lea ebx [esi+4] +
push ebx  +
call sub_102C30A  +
mov edi [ebp+arg_8] +
test edi edi +
jz loc_102C417  +
push dword ptr [edi+4]  +
call sub_101140A  +
mov [esi+8] eax +
push dword ptr [edi+8]  +
call sub_101140A  +
mov [esi+0Ch] eax +
push dword ptr [edi+0Ch]  +
call sub_101140A  +
mov [esi+10h] eax +
push dword ptr [edi+10h]  +
call sub_101140A  +
mov [esi+14h] eax +
push dword ptr [edi+14h]  +
call sub_101140A  +
mov [esi+18h] eax +
mov eax [edi+18h] +
mov [esi+1Ch] eax +
mov eax [edi+1Ch] +
mov [esi+20h] eax +
mov eax [ebp+arg_4] +
pop edi  +
mov [ebx] eax +
mov [esi] eax +
pop ebx  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_102C43E  +
push [ebp+arg_0]  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
jz loc_102C482  +
mov esi [ebp+arg_4] +
test esi esi +
jz loc_102C482  +
xor eax eax +
cmp ax [esi] +
jz loc_102C482  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_102C466  +
sub eax edx +
sar eax 1 +
add eax eax +
push eax  +
push esi  +
push [ebp+arg_0]  +
call sub_102BDE3  +
jmp loc_102C487  +
mov eax 80070057h +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+lpMem]  +
push [ebp+arg_0]  +
call sub_102BED2  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_102BF18  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_102BFB5  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
and [ebp+lpMem] 0 +
test ebx ebx +
jnz loc_102C50B  +
mov eax 80070057h +
jmp locret_102C5E0  +
push esi  +
push edi  +
xor eax eax +
mov edi ebx +
stos   +
stos   +
stos   +
stos   +
push 10h  +
stos   +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_102C52E  +
mov ecx eax +
call sub_102D2FF  +
mov [ebp+var_8] eax +
jmp loc_102C532  +
and [ebp+var_8] 0 +
mov edi [ebp+var_8] +
test edi edi +
jz loc_102C5B0  +
lea esi [ebp+arg_8] +
movs   +
movs   +
movs   +
lea eax [ebp+lpMem] +
push eax  +
movs   +
mov esi [ebp+arg_0] +
lea eax [ebp+arg_8] +
push eax  +
mov ecx esi +
call sub_102DE22  +
mov edi eax +
test edi edi +
jl loc_102C5B5  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+arg_8] +
push eax  +
mov ecx esi +
call sub_102DD8B  +
mov edi eax +
test edi edi +
jl loc_102C5B5  +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+arg_8] +
push eax  +
mov ecx esi +
call sub_102E03B  +
mov edi eax +
test edi edi +
jl loc_102C5B5  +
mov eax [ebp+var_8] +
mov [ebx] eax +
mov eax [ebp+lpMem] +
mov [ebx+4] eax +
mov eax [ebp+var_C] +
mov [ebx+8] eax +
mov eax [ebp+var_10] +
mov [ebx+0Ch] eax +
mov eax [ebp+arg_4] +
mov ecx esi +
mov [ebx+10h] eax +
call sub_102D3C1  +
and [ebp+lpMem] 0 +
and [ebp+var_8] 0 +
jmp loc_102C5B5  +
mov edi 8007000Eh +
xor esi esi +
cmp [ebp+lpMem] esi +
jz loc_102C5D4  +
push [ebp+lpMem]  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
test eax eax +
jz loc_102C5D4  +
mov [ebp+lpMem] esi +
push [ebp+var_8]  +
call sub_102C42A  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_102C5FD  +
mov eax 80070057h +
jmp loc_102C647  +
push edi  +
mov edi [esi] +
test edi edi +
jnz loc_102C609  +
xor eax eax +
inc eax  +
jmp loc_102C646  +
mov eax [esi+10h] +
mov ecx [eax] +
test ecx ecx +
jz loc_102C617  +
call sub_102D3CA  +
mov eax [esi+4] +
test eax eax +
jz loc_102C636  +
push eax  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
test eax eax +
jz loc_102C636  +
and dword ptr [esi+4] 0 +
push edi  +
call sub_102C42A  +
push 14h  +
pop eax  +
mov byte ptr [esi] 0 +
inc esi  +
dec eax  +
jnz loc_102C63F  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
push esi  +
push edi  +
lea ecx [ebp+var_14] +
call sub_102D2FF  +
lea ecx [ebp+var_24] +
call sub_102D2FF  +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_102C6DC  +
mov ebx [eax] +
test ebx ebx +
jz loc_102C6DC  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_102C6DC  +
mov esi [eax] +
test esi esi +
jz loc_102C6DC  +
cmp [ebp+arg_C] 0 +
jz loc_102C6DC  +
lea edi [ebp+var_14] +
movs   +
movs   +
lea eax [ebp+var_4] +
movs   +
push eax  +
lea eax [ebp+var_14] +
push eax  +
mov ecx ebx +
movs   +
call sub_102DD8B  +
test eax eax +
jl loc_102C6E1  +
mov eax [ebp+arg_8] +
cmp eax [ebp+var_4] +
jnb loc_102C6DC  +
lea ecx [ebp+var_24] +
push ecx  +
push eax  +
lea eax [ebp+var_14] +
push eax  +
mov ecx ebx +
call sub_102DDCB  +
test eax eax +
jl loc_102C6E1  +
sub esp 10h +
mov edi esp +
push [ebp+arg_0]  +
lea esi [ebp+var_24] +
movs   +
movs   +
movs   +
push ebx  +
mov ebx [ebp+arg_C] +
movs   +
call sub_102C4F1  +
jmp loc_102C6E1  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
lea ecx [ebp+var_14] +
call sub_102D2FF  +
mov ebx [ebp+arg_0] +
xor edi edi +
cmp ebx edi +
jz loc_102C781  +
mov eax [ebx] +
mov [ebp+arg_0] eax +
cmp eax edi +
jz loc_102C781  +
cmp [ebp+arg_4] edi +
jz loc_102C781  +
cmp [ebp+arg_8] edi +
jz loc_102C781  +
push [ebp+arg_C]  +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+lpMem] +
push eax  +
push edi  +
push [ebp+arg_4]  +
push ebx  +
call sub_102BF68  +
mov esi eax +
cmp esi 1 +
jnz loc_102C747  +
mov eax [ebp+arg_8] +
push 14h  +
pop ecx  +
mov byte ptr [eax] 0 +
inc eax  +
dec ecx  +
jnz loc_102C73E  +
jmp loc_102C77D  +
cmp esi edi +
jl loc_102C77D  +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_14] +
movs   +
movs   +
movs   +
push ebx  +
push [ebp+arg_0]  +
mov ebx [ebp+arg_8] +
movs   +
call sub_102C4F1  +
cmp [ebp+lpMem] 0 +
mov esi eax +
jz loc_102C77D  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax esi +
jmp loc_102C786  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
lea ecx [ebp+var_10] +
call sub_102D2FF  +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_102C7E1  +
mov ebx [eax] +
test ebx ebx +
jz loc_102C7E1  +
cmp [ebp+arg_4] 0 +
jz loc_102C7E1  +
lea eax [ebp+var_10] +
push eax  +
mov ecx ebx +
call sub_102DCE1  +
test eax eax +
jl loc_102C7E6  +
sub esp 10h +
mov edi esp +
push [ebp+arg_0]  +
lea esi [ebp+var_10] +
movs   +
movs   +
movs   +
push ebx  +
mov ebx [ebp+arg_4] +
movs   +
call sub_102C4F1  +
jmp loc_102C7E6  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
sub esp 14h +
push esi  +
push edi  +
xor esi esi +
xor edi edi +
cmp eax esi +
jz loc_102C859  +
cmp [eax] esi +
jz loc_102C859  +
cmp ebx esi +
jz loc_102C859  +
cmp [ebx] esi +
jz loc_102C859  +
cmp esi [ebx+8] +
jnb loc_102C855  +
and [ebp+var_14] 0 +
xor eax eax +
lea edi [ebp+var_10] +
stos   +
stos   +
stos   +
stos   +
lea eax [ebp+var_14] +
push eax  +
push esi  +
push ebx  +
push [ebp+arg_0]  +
call sub_102C651  +
mov edi eax +
test edi edi +
jl loc_102C847  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+arg_0]  +
call sub_102C114  +
mov edi eax +
lea eax [ebp+var_14] +
push eax  +
call sub_102C5E9  +
inc esi  +
test edi edi +
jge loc_102C813  +
mov eax edi +
jmp loc_102C85E  +
mov eax 80070057h +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
sub esp 20h +
push ebx  +
xor ebx ebx +
push esi  +
cmp edx ebx +
jz loc_102C9DF  +
cmp [edx] ebx +
jz loc_102C9DF  +
mov ecx [ebp+arg_4] +
cmp ecx ebx +
jz loc_102C9DF  +
cmp [ecx] ebx +
jz loc_102C9DF  +
mov eax [ebp+arg_8] +
cmp eax ebx +
jz loc_102C9DF  +
cmp [eax] ebx +
jz loc_102C9DF  +
mov esi [ebp+arg_C] +
cmp esi ebx +
jz loc_102C9DF  +
cmp [esi] ebx +
jz loc_102C9DF  +
push edi  +
push dword ptr [esi+4]  +
push ecx  +
push edx  +
call sub_102C1C5  +
mov edi eax +
test edi edi +
jl loc_102C8FC  +
mov eax [ebp+arg_4] +
cmp ebx [eax+0Ch] +
jnb loc_102C8EB  +
push ebx  +
push eax  +
push [ebp+arg_0]  +
call sub_102C16B  +
mov edi eax +
inc ebx  +
test edi edi +
jge loc_102C8D2  +
test edi edi +
jl loc_102C8FC  +
push [ebp+arg_0]  +
mov ebx [ebp+arg_4] +
call sub_102C7F2  +
mov edi eax +
and [ebp+var_C] 0 +
test edi edi +
jl loc_102C98E  +
mov ebx ds:HeapFree +
mov esi ds:GetProcessHeap +
mov ecx [ebp+arg_C] +
mov eax [ebp+var_C] +
cmp eax [ecx+0Ch] +
jnb loc_102C98B  +
lea ecx [ebp+var_8] +
push ecx  +
lea ecx [ebp+lpMem] +
push ecx  +
push eax  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
call sub_102BFD9  +
mov edi eax +
test edi edi +
jl loc_102C954  +
push [ebp+var_8]  +
push [ebp+lpMem]  +
push offset Mem  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_102C225  +
add esp 14h +
mov edi eax +
cmp [ebp+lpMem] 0 +
jz loc_102C96C  +
push [ebp+lpMem]  +
push 0  +
call esi  +
push eax  +
call ebx  +
test eax eax +
jz loc_102C96C  +
and [ebp+lpMem] 0 +
cmp [ebp+var_8] 0 +
jz loc_102C984  +
push [ebp+var_8]  +
push 0  +
call esi  +
push eax  +
call ebx  +
test eax eax +
jz loc_102C984  +
and [ebp+var_8] 0 +
inc [ebp+var_C]  +
test edi edi +
jge loc_102C914  +
mov esi [ebp+arg_C] +
xor ebx ebx +
jmp loc_102C9D6  +
cmp ebx [esi+8] +
jnb loc_102C9DA  +
and [ebp+var_20] 0 +
xor eax eax +
lea edi [ebp+var_1C] +
stos   +
stos   +
stos   +
stos   +
lea eax [ebp+var_20] +
push eax  +
push ebx  +
push esi  +
push [ebp+arg_8]  +
call sub_102C651  +
mov edi eax +
test edi edi +
jl loc_102C9CC  +
lea eax [ebp+var_20] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_102C27D  +
mov edi eax +
lea eax [ebp+var_20] +
push eax  +
call sub_102C5E9  +
inc ebx  +
test edi edi +
jge loc_102C992  +
mov eax edi +
pop edi  +
jmp loc_102C9E4  +
mov eax 80070057h +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_102C6ED  +
pop ebp  +
retn   +
***
mov edi edi +
push esi  +
mov esi eax +
xor eax eax +
mov ecx edx +
test edx edx +
jz loc_102CA28  +
cmp [esi] ax +
jz loc_102CA24  +
inc esi  +
inc esi  +
dec edx  +
jnz loc_102CA1A  +
test edx edx +
jnz loc_102CA2D  +
mov eax 80070057h +
pop esi  +
test edi edi +
jz locret_102CA3E  +
test eax eax +
jl loc_102CA3B  +
sub ecx edx +
mov [edi] ecx +
retn   +
and dword ptr [edi] 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call ds:RtlNtStatusToDosError  +
test eax eax +
jle loc_102CA60  +
and eax 0FFFFh +
or eax 80070000h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_102CA9F  +
cmp [ebp+arg_8] 0 +
jz loc_102CA9F  +
mov eax [ebp+arg_0] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_102CA80  +
push [ebp+arg_8]  +
sub eax edx +
sar eax 1 +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101149E  +
jmp loc_102CAA4  +
mov eax 80070057h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
test eax eax +
jnz loc_102CAC3  +
mov eax 80070057h +
jmp loc_102CB3B  +
movzx eax word ptr [eax] +
xor ecx ecx +
cmp cx ax +
jnz loc_102CAD2  +
xor eax eax +
inc eax  +
jmp loc_102CB3B  +
cmp ax 5Ch +
jnz loc_102CAE3  +
add dword ptr [esi] 2 +
mov eax [esi] +
cmp word ptr [eax] 5Ch +
jz loc_102CAD8  +
mov eax [esi] +
xor ecx ecx +
cmp cx [eax] +
jz loc_102CABC  +
push edi  +
push 5Ch  +
push eax  +
call ds:wcschr  +
pop ecx  +
mov edi eax +
pop ecx  +
push [ebp+arg_4]  +
test edi edi +
jnz loc_102CB27  +
push eax  +
push dword ptr [esi]  +
call sub_102CA69  +
mov edx [esi] +
mov ecx edx +
lea edi [ecx+2] +
push ebx  +
mov bx [ecx] +
inc ecx  +
inc ecx  +
test bx bx +
jnz loc_102CB11  +
sub ecx edi +
sar ecx 1 +
lea ecx [edx+ecx*2] +
mov [esi] ecx +
pop ebx  +
jmp loc_102CB3A  +
mov eax [esi] +
mov ecx edi +
sub ecx eax +
sar ecx 1 +
push ecx  +
push 0  +
push eax  +
call sub_101149E  +
mov [esi] edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
xor ebx ebx +
cmp [ebp+arg_0] ebx +
jz loc_102CBF5  +
cmp [ebp+arg_4] ebx +
jz loc_102CBF5  +
push esi  +
push edi  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_0]  +
call sub_102FEB6  +
cmp eax ebx +
jl loc_102CBEB  +
lea eax [ebp+dwBytes] +
push eax  +
push 2  +
push [ebp+var_8]  +
mov [ebp+dwBytes] ebx +
call sub_1011BA0  +
cmp eax ebx +
jl loc_102CBF1  +
mov edi [ebp+dwBytes] +
mov esi ds:GetProcessHeap +
push edi  +
push 8  +
call esi  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+lpMem] eax +
cmp eax ebx +
jz loc_102CBE4  +
mov ecx [ebp+arg_0] +
lea edx [ebp+var_14] +
mov [ebp+var_14] ebx +
mov [ebp+var_10] edi +
call sub_103005E  +
mov edi eax +
cmp edi ebx +
jl loc_102CBC8  +
mov eax [ebp+lpMem] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
xor eax eax +
jmp loc_102CBF1  +
cmp [ebp+lpMem] ebx +
jz loc_102CBE1  +
push [ebp+lpMem]  +
push ebx  +
call esi  +
push eax  +
call ds:HeapFree  +
test eax eax +
jz loc_102CBE1  +
mov [ebp+lpMem] ebx +
push edi  +
jmp loc_102CBEC  +
mov eax 8007000Eh +
jmp loc_102CBF1  +
push eax  +
call sub_102CA44  +
pop edi  +
pop esi  +
jmp loc_102CBFA  +
mov eax 80070057h +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov eax [ebp+arg_0] +
mov [ebp+var_4] eax +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_102CC15  +
sub eax edx +
mov edx [ebp+arg_4] +
sar eax 1 +
add eax eax +
lea ecx [ebp+var_C] +
mov [ebp+var_C] eax +
mov [ebp+var_8] eax +
call sub_10301B9  +
test eax eax +
jl loc_102CC3E  +
xor eax eax +
jmp locret_102CC44  +
push eax  +
call sub_102CA44  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov ecx esi +
call sub_102FCA1  +
xor eax eax +
mov [esi+8] eax +
mov [esi+4] eax +
mov [esi] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor ecx ecx +
cmp [ebp+lpMem] ecx +
jz loc_102CCC1  +
cmp [ebp+arg_4] ecx +
jz loc_102CCC1  +
push ebx  +
push esi  +
mov esi ds:HeapFree +
xor ebx ebx +
push edi  +
mov edi ds:GetProcessHeap +
cmp [ebp+arg_4] ecx +
jbe loc_102CCB1  +
mov eax [ebp+lpMem] +
mov eax [eax+ebx*4] +
cmp eax ecx +
jz loc_102CCAB  +
push eax  +
push ecx  +
call edi  +
push eax  +
call esi  +
xor ecx ecx +
inc ebx  +
cmp ebx [ebp+arg_4] +
jb loc_102CC98  +
push [ebp+lpMem]  +
push ecx  +
call edi  +
push eax  +
call esi  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
jmp loc_102CCC4  +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
xor esi esi +
push edi  +
mov [ebp+lpMem] esi +
mov [ebp+var_18] esi +
mov [ebp+var_2C] esi +
cmp ebx esi +
jz loc_102CF49  +
xor eax eax +
cmp ax [ebx] +
jz loc_102CF49  +
mov edi [ebp+arg_4] +
cmp edi esi +
jz loc_102CF49  +
push offset dword_1007424  +
push ebx  +
call sub_10112AF  +
test eax eax +
jz loc_102CF3B  +
mov edi ds:wcschr +
mov [ebp+var_C] esi +
mov [ebp+var_10] esi +
mov eax ebx +
push 5Bh  +
push eax  +
call edi  +
pop ecx  +
pop ecx  +
cmp eax esi +
jz loc_102CD53  +
push 5Dh  +
push eax  +
call edi  +
pop ecx  +
pop ecx  +
cmp eax esi +
jz loc_102CD40  +
inc [ebp+var_10]  +
jmp loc_102CD4E  +
mov [ebp+var_C] 1 +
mov [ebp+var_4] 80070057h +
cmp [ebp+var_C] esi +
jz loc_102CD25  +
push 5Bh  +
push ebx  +
call edi  +
pop ecx  +
pop ecx  +
cmp eax esi +
jz loc_102CF34  +
cmp [ebp+var_C] esi +
jnz loc_102CF34  +
cmp [ebp+arg_8] esi +
jz loc_102CD83  +
lea ecx [ebp+lpMem] +
push ecx  +
sub eax ebx +
sar eax 1 +
push eax  +
push esi  +
push ebx  +
call sub_101149E  +
mov [ebp+var_4] eax +
mov ebx [ebp+var_10] +
shl ebx 2 +
push ebx  +
push 8  +
call ds:GetProcessHeap  +
mov esi ds:HeapAlloc +
push eax  +
call esi  +
push ebx  +
push 8  +
mov [ebp+var_1C] eax +
call ds:GetProcessHeap  +
push eax  +
call esi  +
mov esi [ebp+var_1C] +
and [ebp+var_20] 0 +
mov ecx eax +
mov eax [ebp+arg_0] +
mov [ebp+var_14] ecx +
sub [ebp+var_14] esi +
mov [ebp+var_24] ecx +
jmp loc_102CDC4  +
mov eax [ebp+var_28] +
push 5Bh  +
push eax  +
call edi  +
pop ecx  +
pop ecx  +
mov [ebp+arg_0] eax +
test eax eax +
jz loc_102CE89  +
mov ebx [ebp+var_10] +
cmp [ebp+var_20] ebx +
jnb loc_102CE8C  +
mov ecx [ebp+var_14] +
and dword ptr [esi] 0 +
and dword ptr [ecx+esi] 0 +
push 5Dh  +
push eax  +
call edi  +
pop ecx  +
pop ecx  +
mov [ebp+var_28] eax +
test eax eax +
jz loc_102CE72  +
mov ebx eax +
sub ebx [ebp+arg_0] +
push 3Dh  +
push [ebp+arg_0]  +
sar ebx 1 +
inc ebx  +
call edi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_102CE58  +
cmp eax [ebp+var_28] +
jnb loc_102CE58  +
sub eax [ebp+arg_0] +
lea ecx [ebp+var_18] +
push ecx  +
sar eax 1 +
push eax  +
push 1  +
push [ebp+arg_0]  +
mov [ebp+var_30] eax +
call sub_101149E  +
mov ecx [ebp+var_18] +
mov [ebp+var_4] eax +
mov [esi] ecx +
test eax eax +
jl loc_102CE79  +
lea eax [ebp+var_2C] +
push eax  +
mov eax [ebp+var_30] +
dec ebx  +
push ebx  +
inc eax  +
push eax  +
push [ebp+arg_0]  +
call sub_101149E  +
mov ecx [ebp+var_14] +
mov [ebp+var_4] eax +
mov eax [ebp+var_2C] +
mov [ecx+esi] eax +
jmp loc_102CE79  +
lea eax [ebp+var_18] +
push eax  +
dec ebx  +
push ebx  +
push 1  +
push [ebp+arg_0]  +
call sub_101149E  +
mov [ebp+var_4] eax +
mov eax [ebp+var_18] +
mov [esi] eax +
jmp loc_102CE79  +
mov [ebp+var_C] 1 +
inc [ebp+var_20]  +
add esi 4 +
cmp [ebp+var_C] 0 +
jz loc_102CDC1  +
mov ebx [ebp+var_10] +
xor esi esi +
cmp [ebp+var_4] esi +
jl loc_102CF03  +
mov eax [ebp+arg_4] +
mov dword ptr [eax] 1 +
mov eax [ebp+arg_8] +
mov [ebp+var_4] esi +
cmp eax esi +
jz loc_102CEAD  +
mov ecx [ebp+lpMem] +
mov [eax] ecx +
jmp loc_102CECA  +
cmp [ebp+lpMem] esi +
jz loc_102CECA  +
push [ebp+lpMem]  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
test eax eax +
jz loc_102CECA  +
mov [ebp+lpMem] esi +
mov eax [ebp+arg_C] +
cmp eax esi +
jz loc_102CED8  +
mov ecx [ebp+var_1C] +
mov [eax] ecx +
jmp loc_102CEE1  +
push ebx  +
push [ebp+var_1C]  +
call sub_102CC71  +
mov eax [ebp+arg_10] +
cmp eax esi +
jz loc_102CEEF  +
mov ecx [ebp+var_24] +
mov [eax] ecx +
jmp loc_102CEF8  +
push ebx  +
push [ebp+var_24]  +
call sub_102CC71  +
mov eax [ebp+arg_14] +
cmp eax esi +
jz loc_102CF44  +
mov [eax] ebx +
jmp loc_102CF44  +
cmp [ebp+lpMem] esi +
jz loc_102CF20  +
push [ebp+lpMem]  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
test eax eax +
jz loc_102CF20  +
mov [ebp+lpMem] esi +
push ebx  +
push [ebp+var_1C]  +
call sub_102CC71  +
push ebx  +
push [ebp+var_24]  +
call sub_102CC71  +
jmp loc_102CF44  +
mov eax [ebp+arg_4] +
mov [eax] esi +
jmp loc_102CF3D  +
mov [edi] esi +
mov [ebp+var_4] 1 +
mov eax [ebp+var_4] +
jmp loc_102CF4E  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+lpMem] +
push esi  +
mov [ebp+var_4] eax +
push edi  +
lea eax [ebp+lpMem] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
call sub_102CAAD  +
mov esi eax +
test esi esi +
jl loc_102CFB8  +
cmp esi 1 +
jz loc_102CFBD  +
mov ecx [ebp+arg_18] +
mov eax [ecx] +
sub esp 10h +
mov edi esp +
push [ebp+arg_4]  +
lea esi [ebp+arg_8] +
push [ebp+var_4]  +
movs   +
push [ebp+lpMem]  +
movs   +
movs   +
movs   +
call dword ptr [eax]  +
cmp [ebp+lpMem] 0 +
mov esi eax +
jz loc_102CFD6  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
jmp loc_102CFD6  +
cmp esi 1 +
jnz loc_102CFD6  +
mov ecx [ebp+arg_18] +
mov eax [ecx] +
sub esp 10h +
mov edi esp +
push [ebp+arg_4]  +
lea esi [ebp+arg_8] +
movs   +
movs   +
movs   +
movs   +
call dword ptr [eax+4]  +
mov esi eax +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 1Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+18h] +
mov dword ptr [esi] offset off_1007428 +
test eax eax +
jz loc_102D00D  +
push eax  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
test eax eax +
jz loc_102D00D  +
and dword ptr [esi+18h] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi+4] 0 +
jnz loc_102D069  +
cmp dword ptr [ebp+14h] 0C0000001h +
mov eax [ebp+8] +
mov [esi+8] eax +
mov eax [ebp+0Ch] +
mov [esi+0Ch] eax +
mov eax [ebp+10h] +
mov dword ptr [esi+4] 1 +
mov [esi+10h] eax +
jnz loc_102D04B  +
mov eax 8030000Dh +
jmp loc_102D053  +
push dword ptr [ebp+14h]  +
call sub_102CA44  +
mov [esi+14h] eax +
add esi 18h +
push esi  +
push dword ptr [ebp+18h]  +
call sub_102CB45  +
test eax eax +
jge loc_102D069  +
and dword ptr [esi] 0 +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
and [ebp+var_20] 0 +
push edi  +
push 7  +
mov edx ecx +
pop ecx  +
xor eax eax +
lea edi [ebp+var_1C] +
stos   +
pop edi  +
cmp [ebp+arg_4] eax +
jz locret_102D0B3  +
mov eax [ebp+arg_0] +
mov [ebp+var_1C] eax +
mov eax [edx+8] +
mov [ebp+var_8] eax +
mov eax [edx+0Ch] +
mov [ebp+var_4] eax +
lea eax [ebp+var_20] +
push eax  +
push dword ptr [edx+14h]  +
push [ebp+arg_4]  +
call sub_102C3AA  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
push edi  +
xor edi edi +
cmp eax edi +
jz loc_102D0EA  +
push eax  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
test eax eax +
jz loc_102D0E1  +
mov [esi+4] edi +
mov [esi+4] edi +
mov [esi+0Ch] edi +
mov [esi+8] edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push esi  +
push edi  +
lea eax [ebp+var_18] +
push eax  +
push [ebp+arg_4]  +
mov esi ecx +
call sub_102CC04  +
mov edi eax +
test edi edi +
jl loc_102D180  +
lea eax [ebp+var_C] +
push eax  +
push [ebp+arg_8]  +
call sub_102CC04  +
mov edi eax +
test edi edi +
jl loc_102D177  +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebp+var_18] +
push eax  +
push dword ptr [esi+38h]  +
xor edx edx +
xor ecx ecx +
call sub_10349A6  +
test eax eax +
jl loc_102D166  +
push [ebp+arg_4]  +
lea ecx [ebp+var_C] +
push dword ptr [esi+38h]  +
call sub_1032DFD  +
test eax eax +
jl loc_102D166  +
push [ebp+arg_4]  +
xor edx edx +
push [ebp+arg_0]  +
xor ecx ecx +
push dword ptr [esi+38h]  +
call sub_1033CA2  +
test eax eax +
jl loc_102D166  +
xor edi edi +
jmp loc_102D16E  +
push eax  +
call sub_102CA44  +
mov edi eax +
lea eax [ebp+var_C] +
push eax  +
call sub_102CC4D  +
lea eax [ebp+var_18] +
push eax  +
call sub_102CC4D  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push edi  +
lea eax [ebp+var_10] +
mov esi ecx +
push eax  +
push dword ptr [esi+3Ch]  +
call sub_102CC04  +
mov edi eax +
test edi edi +
jl loc_102D1E8  +
push dword ptr [esi+38h]  +
lea edx [ebp+var_4] +
lea ecx [ebp+var_10] +
call sub_10348CC  +
test eax eax +
jl loc_102D1D7  +
push [ebp+var_4]  +
xor edx edx +
push [ebp+arg_4]  +
xor ecx ecx +
push dword ptr [esi+38h]  +
call sub_1033CA2  +
test eax eax +
jl loc_102D1D7  +
xor edi edi +
jmp loc_102D1DF  +
push eax  +
call sub_102CA44  +
mov edi eax +
lea eax [ebp+var_10] +
push eax  +
call sub_102CC4D  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
and [ebp+var_C] 0 +
push esi  +
push edi  +
xor eax eax +
lea edi [ebp+var_8] +
stos   +
stos   +
lea eax [ebp+var_C] +
push eax  +
push [ebp+arg_4]  +
mov esi ecx +
call sub_102CC04  +
mov edi eax +
test edi edi +
jl loc_102D261  +
push ebx  +
mov ebx [ebp+arg_8] +
push dword ptr [esi+38h]  +
mov edx ebx +
lea ecx [ebp+var_C] +
call sub_10348CC  +
test eax eax +
jge loc_102D23F  +
push eax  +
call sub_102CA44  +
mov edi eax +
test edi edi +
jl loc_102D260  +
push dword ptr [ebx]  +
xor edx edx +
push [ebp+arg_0]  +
xor ecx ecx +
push dword ptr [esi+38h]  +
call sub_1033CA2  +
test eax eax +
jl loc_102D258  +
xor edi edi +
jmp loc_102D260  +
push eax  +
call sub_102CA44  +
mov edi eax +
pop ebx  +
lea eax [ebp+var_C] +
push eax  +
call sub_102CC4D  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
and [ebp+var_C] 0 +
push esi  +
push edi  +
xor eax eax +
lea edi [ebp+var_8] +
stos   +
stos   +
lea eax [ebp+var_C] +
push eax  +
push [ebp+arg_4]  +
mov esi ecx +
call sub_102CC04  +
mov edi eax +
test edi edi +
jl loc_102D2E9  +
push ebx  +
mov ebx [ebp+arg_8] +
push ebx  +
lea eax [ebp+var_C] +
push eax  +
push 0  +
push dword ptr [esi+38h]  +
xor edx edx +
xor ecx ecx +
call sub_1034736  +
test eax eax +
jge loc_102D2C7  +
push eax  +
call sub_102CA44  +
mov edi eax +
test edi edi +
jl loc_102D2E8  +
push dword ptr [ebx]  +
xor edx edx +
push [ebp+arg_0]  +
xor ecx ecx +
push dword ptr [esi+38h]  +
call sub_1033CA2  +
test eax eax +
jl loc_102D2E0  +
xor edi edi +
jmp loc_102D2E8  +
push eax  +
call sub_102CA44  +
mov edi eax +
pop ebx  +
lea eax [ebp+var_C] +
push eax  +
call sub_102CC4D  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
retn   +
***
mov esi ecx +
call ds:RtlInitializeCriticalSection  +
mov dword_10496A8 eax +
mov eax esi +
pop esi  +
retn   +
***
call ds:RtlDeleteCriticalSection  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
mov eax large fs:18h +
mov eax [eax+30h] +
push 0  +
push dword ptr [eax+18h]  +
call ds:RtlAllocateHeap  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
mov eax large fs:18h +
push [ebp+arg_4]  +
mov eax [eax+30h] +
push 0  +
push dword ptr [eax+18h]  +
call ds:RtlReAllocateHeap  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_10496A8 +
test eax eax +
jl loc_102D3B8  +
cmp [ebp+arg_0] 0 +
push offset unk_104A0DC  +
jz loc_102D3B2  +
call ds:RtlEnterCriticalSection  +
jmp loc_102D3B8  +
call ds:RtlLeaveCriticalSection  +
pop ebp  +
retn 4  +
***
retn   +
***
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+8] 0 +
jnz loc_102D3E3  +
xor eax eax +
inc eax  +
pop esi  +
retn   +
push dword ptr [esi+4]  +
call sub_10346CB  +
and dword ptr [esi+8] 0 +
xor eax eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push edi  +
mov edi [ebp+arg_0] +
xor ebx ebx +
cmp edi ebx +
jz loc_102D469  +
cmp [ebp+arg_4] ebx +
jz loc_102D469  +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_102D412  +
sub eax edx +
sar eax 1 +
push esi  +
mov esi eax +
jz loc_102D45B  +
movzx eax word ptr [edi+ebx*2] +
push eax  +
call ds:iswspace  +
pop ecx  +
test eax eax +
jz loc_102D43A  +
inc ebx  +
cmp ebx esi +
jb loc_102D425  +
cmp esi ebx +
jbe loc_102D45B  +
lea edi [edi+esi*2-2] +
movzx eax word ptr [edi] +
push eax  +
call ds:iswspace  +
pop ecx  +
test eax eax +
jz loc_102D458  +
dec esi  +
dec edi  +
dec edi  +
cmp esi ebx +
ja loc_102D442  +
mov edi [ebp+arg_0] +
push [ebp+arg_4]  +
push esi  +
push ebx  +
push edi  +
call sub_101149E  +
pop esi  +
jmp loc_102D46E  +
mov eax 80070057h +
pop edi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
sub esp 0Ch +
cmp [ecx+8] eax +
jz locret_102D4A4  +
push esi  +
push edi  +
mov esi ecx +
lea edi [ebp+var_C] +
movs   +
movs   +
movs   +
mov [ecx+4] eax +
mov [ecx] eax +
mov [ecx+8] eax +
lea ecx [ebp+var_C] +
call sub_103070B  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_0] +
and [ebp+arg_4] 0 +
shr edx 1 +
test eax eax +
jz loc_102D4D4  +
cmp edx 7FFFFFFFh +
ja loc_102D4D4  +
push edi  +
lea edi [ebp+arg_4] +
call sub_102CA0D  +
pop edi  +
jmp loc_102D4D9  +
mov eax 80070057h +
mov ecx [ebp+arg_8] +
test ecx ecx +
jz loc_102D4F0  +
test eax eax +
jl loc_102D4ED  +
mov edx [ebp+arg_4] +
add edx edx +
mov [ecx] edx +
jmp loc_102D4F0  +
and dword ptr [ecx] 0 +
pop ebp  +
retn 0Ch  +
***
mov eax ecx +
xor ecx ecx +
mov dword ptr [eax] offset off_1007428 +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov dword ptr [eax+14h] 1 +
mov [eax+18h] ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push offset dword_1007460  +
push [ebp+arg_0]  +
call sub_1031D82  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp edi [esi+0Ch] +
ja loc_102D552  +
xor eax eax +
jmp loc_102D59C  +
mov eax [esi+4] +
test eax eax +
jz loc_102D571  +
mov ecx [esi+10h] +
add ecx edi +
push ecx  +
push eax  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapReAlloc  +
jmp loc_102D586  +
mov eax [esi+10h] +
add eax edi +
push eax  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
test eax eax +
jz loc_102D597  +
mov [esi+4] eax +
mov eax [esi+10h] +
add eax edi +
mov [esi+0Ch] eax +
jmp loc_102D54E  +
mov eax 0C0000017h +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
mov eax [esi+8] +
add eax edi +
push eax  +
call sub_102D53D  +
test eax eax +
jl loc_102D5E3  +
mov eax [esi+4] +
add eax [esi+8] +
push edi  +
push [ebp+arg_4]  +
push eax  +
call memcpy  +
mov eax [ebp+arg_8] +
add [esi+8] edi +
add esp 0Ch +
test eax eax +
jz loc_102D5E1  +
mov [eax] edi +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1007470 +
call sub_102D0BC  +
mov dword ptr [esi] offset off_1007418 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
and dword ptr [eax+10h] 0 +
and dword ptr [eax+14h] 0 +
mov [eax+4] ecx +
mov ecx [ebp+arg_4] +
mov [eax+8] ecx +
mov ecx [ebp+arg_8] +
mov dword ptr [eax] offset off_1007480 +
mov [eax+0Ch] ecx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
xor eax eax +
mov [ebp+var_14] ebx +
lea edi [ebp+var_10] +
stos   +
mov esi ecx +
mov [ebp+var_4] ebx +
stos   +
mov [ebp+var_8] ebx +
cmp [esi+14h] ebx +
jz loc_102D673  +
xor eax eax +
jmp loc_102D6C9  +
lea eax [ebp+var_14] +
push eax  +
push offset dword_10074B4  +
call sub_102CC04  +
test eax eax +
jge loc_102D68C  +
mov eax 0C0000001h +
jmp loc_102D6C9  +
xor edi edi +
cmp [esi+10h] ebx +
jbe loc_102D6B6  +
mov ebx [ebp+arg_0] +
cmp [ebp+var_4] 0 +
jl loc_102D6B6  +
mov eax [ebx] +
lea ecx [ebp+var_8] +
push ecx  +
push [ebp+var_C]  +
mov ecx ebx +
push [ebp+var_14]  +
call dword ptr [eax+0Ch]  +
inc edi  +
mov [ebp+var_4] eax +
cmp edi [esi+10h] +
jb loc_102D696  +
lea eax [ebp+var_14] +
push eax  +
mov dword ptr [esi+14h] 1 +
call sub_102CC4D  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
and [ebp+var_10] 0 +
and dword ptr [ecx+14h] 0 +
push edi  +
xor eax eax +
lea edi [ebp+var_C] +
stos   +
stos   +
lea eax [ebp+var_10] +
push eax  +
push offset asc_10074B8  +
call sub_102CC04  +
pop edi  +
test eax eax +
jge loc_102D707  +
mov eax 0C0000001h +
jmp locret_102D728  +
mov ecx [ebp+arg_0] +
mov eax [ecx] +
push esi  +
lea edx [ebp+var_4] +
push edx  +
push [ebp+var_8]  +
push [ebp+var_10]  +
call dword ptr [eax+0Ch]  +
mov esi eax +
lea eax [ebp+var_10] +
push eax  +
call sub_102CC4D  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+arg_14]  +
mov esi ecx +
call sub_102D64B  +
test eax eax +
jl loc_102D760  +
mov ecx [esi+0Ch] +
push [ebp+arg_14]  +
mov eax [ecx] +
sub esp 10h +
mov edi esp +
push [ebp+arg_0]  +
lea esi [ebp+arg_4] +
movs   +
movs   +
movs   +
movs   +
call dword ptr [eax+0Ch]  +
pop edi  +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+0Ch] +
push esi  +
mov eax [ecx] +
push edi  +
push [ebp+arg_14]  +
lea esi [ebp+arg_4] +
sub esp 10h +
mov edi esp +
push [ebp+arg_0]  +
movs   +
movs   +
movs   +
movs   +
call dword ptr [eax+18h]  +
pop edi  +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+arg_14]  +
mov esi ecx +
call sub_102D64B  +
test eax eax +
jl loc_102D7C6  +
mov ecx [esi+0Ch] +
push [ebp+arg_14]  +
mov eax [ecx] +
sub esp 10h +
mov edi esp +
push [ebp+arg_0]  +
lea esi [ebp+arg_4] +
movs   +
movs   +
movs   +
movs   +
call dword ptr [eax+1Ch]  +
pop edi  +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+0Ch] +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+24h]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+0Ch] +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+28h]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+0Ch] +
push esi  +
mov eax [ecx] +
push edi  +
push [ebp+arg_14]  +
lea esi [ebp+arg_4] +
sub esp 10h +
mov edi esp +
push [ebp+arg_0]  +
movs   +
movs   +
movs   +
movs   +
call dword ptr [eax+2Ch]  +
pop edi  +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+0Ch] +
push esi  +
mov eax [ecx] +
push edi  +
push [ebp+arg_14]  +
lea esi [ebp+arg_4] +
sub esp 10h +
mov edi esp +
push [ebp+arg_0]  +
movs   +
movs   +
movs   +
movs   +
call dword ptr [eax+30h]  +
pop edi  +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_102D860  +
inc eax  +
jmp loc_102D874  +
inc eax  +
inc eax  +
push 5Ch  +
pop ecx  +
cmp cx [eax] +
jz loc_102D85E  +
xor edx edx +
xor ecx ecx +
cmp cx [eax] +
setz dl  +
mov eax edx +
pop ebp  +
retn 4  +
***
mov eax ecx +
xor ecx ecx +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov [eax+28h] ecx +
mov dword ptr [eax] offset off_10074C8 +
mov [eax+30h] cl +
mov [eax+3Ch] ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ecx+3Ch]  +
push dword ptr [ecx+0Ch]  +
push [ebp+arg_4]  +
call sub_102D0F2  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp byte ptr [esi+30h] 0 +
jnz loc_102D8E3  +
mov eax [ebp+arg_0] +
mov edx [eax] +
lea eax [esi+38h] +
push eax  +
xor ecx ecx +
call sub_10353FE  +
mov [esi+34h] eax +
mov byte ptr [esi+30h] 1 +
mov eax [esi+34h] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_102D8BE  +
test eax eax +
jl loc_102D920  +
cmp dword ptr [esi+0Ch] 0 +
push [ebp+arg_4]  +
mov ecx esi +
push [ebp+arg_0]  +
jnz loc_102D919  +
call sub_102D18D  +
jmp loc_102D926  +
call sub_102D8A2  +
jmp loc_102D926  +
push eax  +
call sub_102CA44  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_0]  +
mov ebx ecx +
call sub_102D8BE  +
test eax eax +
jl loc_102D965  +
mov ecx [ebp+arg_14] +
sub esp 10h +
mov edi esp +
push dword ptr [ebx+38h]  +
lea esi [ebp+arg_4] +
movs   +
movs   +
movs   +
movs   +
call sub_1034D91  +
test eax eax +
jl loc_102D965  +
xor eax eax +
jmp loc_102D96B  +
push eax  +
call sub_102CA44  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_0]  +
mov [ebp+var_28] ecx +
mov [ebp+var_2C] eax +
call sub_102D8BE  +
xor ebx ebx +
cmp eax ebx +
jl loc_102DC20  +
mov byte ptr [ebp+arg_0+3] bl +
mov [ebp+var_10] ebx +
mov esi [ebp+arg_8] +
push offset asc_1007404  +
push esi  +
mov [ebp+var_20] ebx +
mov [ebp+var_8] ebx +
mov [ebp+var_24] ebx +
mov [ebp+var_14] ebx +
mov [ebp+var_C] ebx +
mov [ebp+lpMem] ebx +
call sub_10112AF  +
test eax eax +
jz loc_102D9FE  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_102D9CC  +
sub eax edx +
sar eax 1 +
lea ecx [ebp+var_8] +
push ecx  +
add eax 0FFFFFFFDh +
push eax  +
push ebx  +
push esi  +
call sub_101149E  +
mov edi eax +
cmp edi ebx +
jl loc_102DC02  +
mov eax [ebp+var_8] +
mov [ebp+var_1C] eax +
jmp loc_102DA86  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+var_24] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_20] +
push eax  +
push esi  +
call sub_102CCCD  +
mov edi eax +
cmp edi ebx +
jl loc_102DC02  +
cmp [ebp+var_20] ebx +
jz loc_102DA83  +
mov eax [ebp+var_8] +
xor esi esi +
mov [ebp+var_1C] eax +
cmp [ebp+var_C] ebx +
jbe loc_102DA86  +
mov eax [ebp+var_14] +
mov eax [eax+esi*4] +
mov [ebp+lpMem] eax +
cmp eax ebx +
jnz loc_102DA7B  +
lea eax [ebp+lpMem] +
push eax  +
push ebx  +
push ebx  +
push offset Mem  +
call sub_101149E  +
mov edi eax +
xor eax eax +
cmp edi ebx +
setnl al  +
cmp eax ebx +
jz loc_102DA7B  +
cmp [ebp+lpMem] ebx +
jz loc_102DA7B  +
push [ebp+lpMem]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
test eax eax +
jz loc_102DA7B  +
mov [ebp+lpMem] ebx +
inc esi  +
cmp esi [ebp+var_C] +
jb loc_102DA34  +
jmp loc_102DA86  +
mov [ebp+var_1C] esi +
cmp edi ebx +
jl loc_102DC02  +
lea eax [ebp+var_38] +
push eax  +
push [ebp+var_1C]  +
call sub_102CC04  +
mov edi eax +
cmp edi ebx +
jl loc_102DB88  +
mov esi [ebp+var_28] +
lea eax [ebp+var_18] +
push eax  +
lea eax [ebp+var_38] +
push eax  +
push ebx  +
push dword ptr [esi+38h]  +
xor edx edx +
xor ecx ecx +
call sub_1034736  +
cmp eax ebx +
jl loc_102DB73  +
push [ebp+var_18]  +
xor edx edx +
push [ebp+var_2C]  +
xor ecx ecx +
push dword ptr [esi+38h]  +
call sub_1033CA2  +
cmp eax ebx +
jl loc_102DB73  +
mov byte ptr [ebp+arg_0+3] 0 +
cmp [ebp+var_20] ebx +
jz loc_102DB6F  +
mov eax [ebp+var_C] +
cmp eax ebx +
jbe loc_102DB7F  +
mov esi [ebp+var_14] +
mov ecx [ebp+var_24] +
sub ecx esi +
mov [ebp+var_1C] ecx +
mov [ebp+var_20] eax +
jmp loc_102DB09  +
mov ecx [ebp+var_1C] +
mov eax [esi] +
mov edi [ecx+esi] +
mov [ebp+lpMem] eax +
test eax eax +
jnz loc_102DB2E  +
lea eax [ebp+lpMem] +
push eax  +
push 0  +
push 0  +
push offset Mem  +
call sub_101149E  +
xor ebx ebx +
test eax eax +
setnl bl  +
push [ebp+lpMem]  +
mov ecx [ebp+var_28] +
push edi  +
push [ebp+var_18]  +
call sub_102D0F2  +
mov edi eax +
test ebx ebx +
jz loc_102DB63  +
cmp [ebp+lpMem] 0 +
jz loc_102DB63  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
test eax eax +
jz loc_102DB63  +
and [ebp+lpMem] 0 +
add esi 4 +
xor ebx ebx +
dec [ebp+var_20]  +
jnz loc_102DB06  +
jmp loc_102DB7F  +
xor edi edi +
jmp loc_102DB7F  +
push eax  +
mov byte ptr [ebp+arg_0+3] 1 +
call sub_102CA44  +
mov edi eax +
lea eax [ebp+var_38] +
push eax  +
call sub_102CC4D  +
cmp [ebp+var_8] ebx +
jz loc_102DBA5  +
push [ebp+var_8]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
test eax eax +
jz loc_102DBA5  +
mov [ebp+var_8] ebx +
push [ebp+var_C]  +
push [ebp+var_24]  +
call sub_102CC71  +
push [ebp+var_C]  +
push [ebp+var_14]  +
call sub_102CC71  +
cmp edi ebx +
jl loc_102DC02  +
cmp [ebp+var_10] ebx +
jz loc_102DBDC  +
push [ebp+var_10]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
test eax eax +
jz loc_102DBDC  +
mov [ebp+var_10] ebx +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+arg_C] +
push eax  +
call sub_102CAAD  +
mov edi eax +
cmp edi 1 +
jz loc_102DC14  +
cmp edi ebx +
jl loc_102DC02  +
mov eax [ebp+var_10] +
mov [ebp+arg_8] eax +
mov eax [ebp+var_18] +
mov [ebp+var_2C] eax +
jmp loc_102DC06  +
mov byte ptr [ebp+arg_0+3] 1 +
cmp byte ptr [ebp+arg_0+3] 0 +
jz loc_102D9A3  +
cmp edi ebx +
jl loc_102DC28  +
mov eax [ebp+arg_10] +
mov ecx [ebp+var_18] +
mov [eax] ecx +
xor edi edi +
jmp loc_102DC28  +
push eax  +
call sub_102CA44  +
mov edi eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
and [ebp+var_C] 0 +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
xor eax eax +
lea edi [ebp+var_8] +
stos   +
stos   +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_4] +
push eax  +
push esi  +
push edi  +
mov ebx ecx +
call sub_102D4AB  +
test eax eax +
jl loc_102DC66  +
mov esi [ebp+arg_4] +
test esi esi +
jnz loc_102DC71  +
mov eax 80070018h +
jmp loc_102DCD5  +
push 6  +
mov [ebp+var_4] edi +
pop ecx  +
xor eax eax +
lea edi [ebp+var_24] +
stos   +
lea ecx [ebp+var_44] +
mov [ebp+var_C] esi +
mov [ebp+var_8] esi +
call sub_102D4F9  +
xor eax eax +
inc eax  +
mov [ebp+var_28] eax +
mov [ebp+var_24] eax +
lea eax [ebp+var_C] +
mov [ebp+var_20] eax +
lea eax [ebp+var_44] +
mov [ebp+var_10] eax +
push ebx  +
lea eax [ebp+var_28] +
push eax  +
call sub_103ACC8  +
push eax  +
call sub_102CA44  +
mov esi eax +
xor eax eax +
cmp [ebp+arg_8] eax +
jz loc_102DCCB  +
cmp [ebp+var_40] eax +
jz loc_102DCCB  +
push [ebp+arg_8]  +
lea ecx [ebp+var_44] +
push eax  +
call sub_102D073  +
lea ecx [ebp+var_44] +
call sub_102CFE3  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
mov esi ecx +
mov ecx [esi] +
mov eax [ecx] +
push edi  +
lea edx [ebp+var_10] +
push edx  +
call dword ptr [eax+10h]  +
test eax eax +
jl loc_102DD21  +
mov ecx [esi] +
mov eax [ecx] +
lea edx [ebp+var_20] +
push edx  +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_10] +
movs   +
movs   +
movs   +
movs   +
call dword ptr [eax+0Ch]  +
test eax eax +
jl loc_102DD21  +
mov edi [ebp+arg_0] +
lea esi [ebp+var_20] +
movs   +
movs   +
movs   +
movs   +
push eax  +
call sub_102CA44  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov edx [ebp+arg_8] +
mov eax [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
mov ecx [ecx] +
push edi  +
mov [ebp+var_8] edx +
lea edx [ebp+var_8] +
push edx  +
lea edx [ebp+var_10] +
push edx  +
sub esp 10h +
mov edi esp +
movs   +
mov [ebp+arg_4] eax +
movs   +
lea eax [ebp+arg_4] +
mov [ebp+var_10] eax +
xor eax eax +
inc eax  +
movs   +
mov [ebp+var_C] eax +
mov [ebp+var_4] eax +
mov eax [ecx] +
movs   +
call dword ptr [eax+50h]  +
test eax eax +
jl loc_102DD7A  +
xor eax eax +
jmp loc_102DD80  +
push eax  +
call sub_102CA44  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
lea eax [ebp+var_18] +
push eax  +
push 2001h  +
push [ebp+arg_0]  +
call sub_102DD32  +
test eax eax +
jl locret_102DDC2  +
cmp [ebp+var_18] 2 +
jnz loc_102DDBD  +
mov eax [ebp+var_10] +
mov eax [eax+4] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
xor eax eax +
jmp locret_102DDC2  +
mov eax 8007000Dh +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push esi  +
lea eax [ebp+var_18] +
push eax  +
push 2001h  +
push [ebp+arg_0]  +
call sub_102DD32  +
test eax eax +
jl loc_102DE18  +
cmp [ebp+var_18] 2 +
jnz loc_102DE13  +
mov esi [ebp+arg_4] +
mov eax [ebp+var_10] +
cmp esi [eax+4] +
jb loc_102DE01  +
mov eax 80070057h +
jmp loc_102DE18  +
shl esi 4 +
add esi [eax] +
push edi  +
mov edi [ebp+arg_8] +
movs   +
movs   +
movs   +
movs   +
xor eax eax +
pop edi  +
jmp loc_102DE18  +
mov eax 8007000Dh +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push esi  +
mov esi [ebp+arg_4] +
test esi esi +
jnz loc_102DE39  +
mov eax 80070057h +
jmp loc_102DE71  +
lea eax [ebp+var_18] +
push eax  +
push 2004h  +
push [ebp+arg_0]  +
call sub_102DD32  +
test eax eax +
jl loc_102DE71  +
xor eax eax +
inc eax  +
cmp [ebp+var_18] eax +
jnz loc_102DE6C  +
cmp [ebp+var_10] 0 +
jnz loc_102DE61  +
and dword ptr [esi] 0 +
jmp loc_102DE71  +
push esi  +
push [ebp+var_10]  +
call sub_102CB45  +
jmp loc_102DE71  +
mov eax 8007000Dh +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push esi  +
mov esi [ebp+arg_4] +
test esi esi +
jnz loc_102DE92  +
mov eax 80070057h +
jmp loc_102DEC2  +
lea eax [ebp+var_18] +
push eax  +
push 2008h  +
push [ebp+arg_0]  +
call sub_102DD32  +
test eax eax +
jl loc_102DEC2  +
cmp [ebp+var_18] 6 +
jnz loc_102DEBD  +
xor eax eax +
cmp [ebp+var_10] 3 +
setz al  +
mov [esi] eax +
xor eax eax +
jmp loc_102DEC2  +
mov eax 8007000Dh +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push esi  +
mov esi [ebp+arg_4] +
test esi esi +
jnz loc_102DEE3  +
mov eax 80070057h +
jmp loc_102DF13  +
lea eax [ebp+var_18] +
push eax  +
push 2008h  +
push [ebp+arg_0]  +
call sub_102DD32  +
test eax eax +
jl loc_102DF13  +
cmp [ebp+var_18] 6 +
jnz loc_102DF0E  +
xor eax eax +
cmp [ebp+var_10] 8 +
setz al  +
mov [esi] eax +
xor eax eax +
jmp loc_102DF13  +
mov eax 8007000Dh +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
cmp [ebp+arg_4] 0 +
push edi  +
mov edi ecx +
jnz loc_102DF35  +
mov eax 80070057h +
jmp loc_102DFAE  +
push esi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+lpMem]  +
call sub_102DE7B  +
mov esi eax +
test esi esi +
jl loc_102DFAB  +
cmp [ebp+var_4] 0 +
jz loc_102DFA6  +
lea eax [ebp+var_1C] +
push eax  +
push 2009h  +
push [ebp+lpMem]  +
mov ecx edi +
call sub_102DD32  +
mov esi eax +
test esi esi +
jl loc_102DFAB  +
cmp [ebp+var_1C] 1 +
jnz loc_102DFA6  +
lea eax [ebp+lpMem] +
push eax  +
push [ebp+var_14]  +
call sub_102CB45  +
mov esi eax +
test esi esi +
jl loc_102DFAB  +
push [ebp+arg_4]  +
push [ebp+lpMem]  +
call sub_102D3F8  +
cmp [ebp+lpMem] 0 +
mov esi eax +
jz loc_102DFAB  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
jmp loc_102DFAB  +
mov esi 8007000Dh +
mov eax esi +
pop esi  +
pop edi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_0]  +
mov ebx ecx +
mov [ebp+var_1] 0 +
call sub_102DD8B  +
test eax eax +
jl loc_102E031  +
push esi  +
push edi  +
xor esi esi +
cmp esi [ebp+var_8] +
jnb loc_102E022  +
lea eax [ebp+var_1C] +
push eax  +
push esi  +
push [ebp+arg_0]  +
mov ecx ebx +
call sub_102DDCB  +
test eax eax +
jl loc_102E01D  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_1C] +
push eax  +
mov ecx ebx +
call sub_102DE7B  +
test eax eax +
jl loc_102E01D  +
cmp [ebp+var_C] 0 +
jz loc_102E01D  +
mov edi [ebp+arg_4] +
lea esi [ebp+var_1C] +
movs   +
movs   +
movs   +
movs   +
mov esi [ebp+var_8] +
mov [ebp+var_1] 1 +
inc esi  +
test eax eax +
jge loc_102DFDB  +
pop edi  +
pop esi  +
test eax eax +
jl loc_102E031  +
cmp [ebp+var_1] 0 +
jnz loc_102E031  +
xor eax eax +
inc eax  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push esi  +
push edi  +
lea eax [ebp+var_18] +
push eax  +
push 2000h  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_102DD32  +
test eax eax +
jl loc_102E0A7  +
cmp [ebp+var_18] 3 +
jnz loc_102E0A2  +
cmp [ebp+var_8] 0FFFFFFFFh +
jnz loc_102E073  +
mov ecx [ebp+arg_4] +
xor eax eax +
inc eax  +
and dword ptr [ecx] 0 +
jmp loc_102E0A7  +
mov ecx [esi] +
mov eax [ecx] +
lea edx [ebp+arg_0] +
push edx  +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_10] +
movs   +
movs   +
movs   +
movs   +
call dword ptr [eax+68h]  +
test eax eax +
jl loc_102E09A  +
mov ecx [ebp+arg_4] +
mov edx [ebp+arg_0] +
xor eax eax +
mov [ecx] edx +
jmp loc_102E0A7  +
push eax  +
call sub_102CA44  +
jmp loc_102E0A7  +
mov eax 8007000Dh +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 60h +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_0]  +
mov ebx ecx +
call sub_102E03B  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_102E23C  +
mov esi [ebp+arg_4] +
cmp esi [ebp+var_8] +
jb loc_102E0EA  +
mov [ebp+var_4] 80070057h +
jmp loc_102E23C  +
lea eax [ebp+var_30] +
push eax  +
push 2000h  +
push [ebp+arg_0]  +
mov ecx ebx +
call sub_102DD32  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_102E23C  +
cmp [ebp+var_30] 3 +
jnz loc_102E235  +
cmp [ebp+var_20] 0FFFFFFFFh +
jz loc_102E235  +
mov ecx [ebx] +
mov eax [ecx] +
lea edx [ebp+var_18] +
push edx  +
push esi  +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_28] +
movs   +
movs   +
movs   +
movs   +
call dword ptr [eax+64h]  +
xor esi esi +
cmp eax esi +
jl loc_102E22A  +
mov edi [ebp+arg_8] +
cmp edi esi +
jz loc_102E17D  +
lea eax [ebp+var_48] +
push eax  +
push 2007h  +
lea eax [ebp+var_18] +
push eax  +
mov ecx ebx +
mov [edi] esi +
call sub_102DD32  +
cmp eax esi +
mov [ebp+var_4] eax +
jl loc_102E1C4  +
cmp [ebp+var_48] 1 +
jnz loc_102E176  +
push edi  +
push [ebp+var_40]  +
call sub_102CB45  +
mov [ebp+var_4] eax +
jmp loc_102E17D  +
mov [ebp+var_4] 8007000Dh +
cmp [ebp+var_4] esi +
jl loc_102E1C4  +
mov esi [ebp+arg_C] +
test esi esi +
jz loc_102E1CE  +
and dword ptr [esi] 0 +
lea eax [ebp+var_60] +
push eax  +
push 2009h  +
lea eax [ebp+var_18] +
push eax  +
mov ecx ebx +
call sub_102DD32  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_102E1E4  +
cmp [ebp+var_60] 1 +
jnz loc_102E1BB  +
push esi  +
push [ebp+var_58]  +
call sub_102CB45  +
mov [ebp+var_4] eax +
jmp loc_102E1CE  +
mov [ebp+var_4] 8007000Dh +
jmp loc_102E1CE  +
cmp [ebp+arg_C] esi +
jz loc_102E1CE  +
mov eax [ebp+arg_C] +
mov [eax] esi +
cmp [ebp+var_4] 0 +
jl loc_102E1E4  +
mov edi [ebp+arg_10] +
test edi edi +
jz loc_102E23C  +
lea esi [ebp+var_18] +
movs   +
movs   +
movs   +
movs   +
jmp loc_102E23C  +
mov esi ds:HeapFree +
test edi edi +
mov edi ds:GetProcessHeap +
jz loc_102E20C  +
mov ebx [ebp+arg_8] +
mov eax [ebx] +
test eax eax +
jz loc_102E20C  +
push eax  +
push 0  +
call edi  +
push eax  +
call esi  +
test eax eax +
jz loc_102E20C  +
and dword ptr [ebx] 0 +
mov ebx [ebp+arg_C] +
test ebx ebx +
jz loc_102E23C  +
mov eax [ebx] +
test eax eax +
jz loc_102E23C  +
push eax  +
push 0  +
call edi  +
push eax  +
call esi  +
test eax eax +
jz loc_102E23C  +
and dword ptr [ebx] 0 +
jmp loc_102E23C  +
push eax  +
call sub_102CA44  +
mov [ebp+var_4] eax +
jmp loc_102E23C  +
mov [ebp+var_4] 8007000Dh +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push edi  +
xor edi edi +
mov [ebp+var_18] ecx +
mov [ebp+var_1] 0 +
cmp [ebp+arg_8] edi +
jz loc_102E351  +
cmp [ebp+lpString1] edi +
jz loc_102E351  +
push esi  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+arg_0]  +
call sub_102E03B  +
mov esi eax +
cmp esi edi +
jl loc_102E34C  +
push ebx  +
mov ebx ds:HeapFree +
mov [ebp+var_10] edi +
mov eax [ebp+var_10] +
cmp eax [ebp+var_14] +
jnb loc_102E339  +
lea ecx [ebp+var_28] +
push ecx  +
lea ecx [ebp+var_8] +
push ecx  +
lea ecx [ebp+lpMem] +
push ecx  +
mov ecx [ebp+var_18] +
push eax  +
push [ebp+arg_0]  +
call sub_102E0B2  +
mov esi eax +
cmp esi edi +
jl loc_102E32E  +
push 0FFFFFFFFh  +
push [ebp+lpMem]  +
push 0FFFFFFFFh  +
push [ebp+lpString1]  +
push 1  +
push 409h  +
call ds:CompareStringW  +
dec eax  +
dec eax  +
jnz loc_102E2FC  +
mov eax [ebp+var_8] +
mov ecx [ebp+arg_8] +
mov [ebp+var_8] edi +
mov edi [ebp+arg_C] +
mov [ebp+var_1] 1 +
mov [ecx] eax +
test edi edi +
jz loc_102E2F2  +
lea esi [ebp+var_28] +
movs   +
movs   +
movs   +
movs   +
mov eax [ebp+var_14] +
xor esi esi +
mov [ebp+var_10] eax +
xor edi edi +
cmp [ebp+lpMem] edi +
jz loc_102E315  +
push [ebp+lpMem]  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ebx  +
test eax eax +
jz loc_102E315  +
mov [ebp+lpMem] edi +
cmp [ebp+var_8] edi +
jz loc_102E32E  +
push [ebp+var_8]  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ebx  +
test eax eax +
jz loc_102E32E  +
mov [ebp+var_8] edi +
inc [ebp+var_10]  +
cmp esi edi +
jge loc_102E290  +
cmp [ebp+var_1] 0 +
pop ebx  +
jnz loc_102E34C  +
cmp esi edi +
jl loc_102E34C  +
mov eax [ebp+arg_8] +
xor esi esi +
inc esi  +
mov [eax] edi +
mov eax esi +
pop esi  +
jmp loc_102E356  +
mov eax 80070057h +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_8] +
mov eax [eax] +
mov ecx [ebp+lpString1] +
push esi  +
push [ebp+lpMem]  +
mov [ebp+var_4] eax +
call sub_102DCE1  +
mov esi eax +
test esi esi +
jl loc_102E420  +
mov ecx [ebp+lpString1] +
lea eax [ebp+lpString1] +
push eax  +
push [ebp+lpMem]  +
call sub_102DE22  +
mov esi eax +
test esi esi +
jl loc_102E420  +
push ebx  +
push edi  +
lea eax [ebp+lpMem] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
call sub_102CAAD  +
mov edi ds:HeapFree +
mov ebx ds:GetProcessHeap +
mov esi eax +
cmp esi 1 +
jnz loc_102E3C6  +
mov esi 8007000Dh +
jmp loc_102E40E  +
test esi esi +
jl loc_102E40E  +
push 0FFFFFFFFh  +
push [ebp+lpMem]  +
push 0FFFFFFFFh  +
push [ebp+lpString1]  +
push 1  +
push 409h  +
call ds:CompareStringW  +
dec eax  +
dec eax  +
jnz loc_102E3F1  +
mov eax [ebp+var_4] +
mov ecx [ebp+arg_8] +
xor esi esi +
mov [ecx] eax +
jmp loc_102E3F6  +
mov esi 8007000Dh +
cmp [ebp+lpMem] 0 +
jz loc_102E40E  +
push [ebp+lpMem]  +
push 0  +
call ebx  +
push eax  +
call edi  +
test eax eax +
jz loc_102E40E  +
and [ebp+lpMem] 0 +
cmp [ebp+lpString1] 0 +
jz loc_102E41E  +
push [ebp+lpString1]  +
push 0  +
call ebx  +
push eax  +
call edi  +
pop edi  +
pop ebx  +
mov eax esi +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
mov eax [ebp+arg_14] +
push esi  +
mov [ebp+var_24] eax +
mov eax [ebp+arg_28] +
push edi  +
and [ebp+var_2C] 0 +
and [ebp+lpMem] 0 +
mov [ebp+var_8] eax +
mov eax [ebp+arg_24] +
mov [ebp+var_28] eax +
lea eax [ebp+var_30] +
push eax  +
sub esp 10h +
mov edi esp +
lea esi [ebp+arg_0] +
movs   +
movs   +
movs   +
push ecx  +
push [ebp+arg_10]  +
mov [ebp+var_30] offset off_10074C0 +
movs   +
call sub_102CF5A  +
mov [ebp+arg_14] eax +
test eax eax +
jl loc_102E4B7  +
mov eax [ebp+arg_1C] +
test eax eax +
jz loc_102E483  +
mov ecx [ebp+var_2C] +
mov [eax] ecx +
mov edi [ebp+arg_20] +
test edi edi +
jz loc_102E491  +
lea esi [ebp+var_18] +
movs   +
movs   +
movs   +
movs   +
mov eax [ebp+arg_18] +
test eax eax +
jz loc_102E49F  +
mov ecx [ebp+lpMem] +
mov [eax] ecx +
jmp loc_102E4B7  +
cmp [ebp+lpMem] 0 +
jz loc_102E4B7  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax [ebp+arg_14] +
pop edi  +
pop esi  +
leave   +
retn 2Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+8] 0 +
jz loc_102E4D7  +
mov eax 80070020h +
pop esi  +
retn   +
mov edx [esi] +
lea eax [esi+4] +
push eax  +
xor ecx ecx +
call sub_10353FE  +
test eax eax +
jl loc_102E4F3  +
mov dword ptr [esi+8] 1 +
xor eax eax +
pop esi  +
retn   +
push eax  +
call sub_102CA44  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
push ebx  +
push esi  +
mov ebx ecx +
push edi  +
lea ecx [ebp+var_40] +
call sub_102D87D  +
xor ecx ecx +
cmp [ebx+8] ecx +
jnz loc_102E523  +
mov eax 80070020h +
jmp loc_102E55E  +
mov eax [ebx+4] +
mov [ebp+var_8] eax +
mov eax [ebp+arg_14] +
mov [ebp+var_34] eax +
mov eax [ebp+arg_1C] +
mov [ebp+var_18] eax +
mov eax [ebp+arg_18] +
mov [ebp+var_4] eax +
lea eax [ebp+var_40] +
push eax  +
sub esp 10h +
mov edi esp +
lea esi [ebp+arg_0] +
movs   +
movs   +
movs   +
push ebx  +
push [ebp+lpMem]  +
mov [ebp+var_10] 1 +
mov [ebp+var_C] ecx +
mov [ebp+var_38] ecx +
movs   +
call sub_102CF5A  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
push edi  +
xor edi edi +
mov [ebp+var_8] edi +
mov [ebp+var_1] 0 +
cmp [ebp+arg_0] edi +
jz loc_102E593  +
cmp [ebp+arg_0] 1 +
jz loc_102E593  +
cmp [ebp+arg_0] 2 +
jnz loc_102E6D9  +
cmp [ebp+lpString1] edi +
jz loc_102E6D9  +
cmp [ebp+arg_C] edi +
jz loc_102E6D9  +
cmp [ebp+arg_24] edi +
jz loc_102E6D9  +
mov ebx [ebp+arg_10] +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+arg_14] +
push eax  +
mov ecx ebx +
call sub_102DD8B  +
mov esi eax +
cmp esi edi +
jl loc_102E6D5  +
mov eax [ebp+arg_8] +
cmp eax [ebp+var_8] +
ja loc_102E6D9  +
or [ebp+var_10] 0FFFFFFFFh +
mov [ebp+arg_10] edi +
mov eax [ebp+var_8] +
cmp [ebp+arg_10] eax +
jnb loc_102E6C8  +
lea eax [ebp+var_20] +
push eax  +
push [ebp+arg_10]  +
lea eax [ebp+arg_14] +
push eax  +
mov ecx ebx +
call sub_102DDCB  +
mov esi eax +
cmp esi edi +
jl loc_102E6BD  +
lea eax [ebp+lpMem] +
push eax  +
lea eax [ebp+var_20] +
push eax  +
mov ecx ebx +
call sub_102DE22  +
mov esi eax +
cmp esi edi +
jl loc_102E6BD  +
cmp [ebp+lpMem] edi +
jz loc_102E69E  +
push 0FFFFFFFFh  +
push [ebp+lpMem]  +
push 0FFFFFFFFh  +
push [ebp+lpString1]  +
push 1  +
push 409h  +
call ds:CompareStringW  +
dec eax  +
dec eax  +
jnz loc_102E69E  +
mov eax [ebp+arg_0] +
sub eax edi +
jz loc_102E656  +
dec eax  +
jz loc_102E67E  +
dec eax  +
jnz loc_102E6A0  +
inc [ebp+var_10]  +
mov eax [ebp+arg_8] +
cmp eax [ebp+var_10] +
jnz loc_102E6A0  +
push [ebp+arg_24]  +
lea esi [ebp+var_20] +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
push ebx  +
push [ebp+arg_C]  +
mov [ebp+var_1] 1 +
movs   +
call sub_102CF5A  +
mov esi eax +
mov eax [ebp+var_8] +
mov [ebp+arg_10] eax +
xor edi edi +
jmp loc_102E6A0  +
push [ebp+arg_24]  +
lea esi [ebp+var_20] +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
push ebx  +
push [ebp+arg_C]  +
mov [ebp+var_1] 1 +
movs   +
call sub_102CF5A  +
mov esi eax +
jmp loc_102E67A  +
xor esi esi +
cmp [ebp+lpMem] edi +
jz loc_102E6BD  +
push [ebp+lpMem]  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
test eax eax +
jz loc_102E6BD  +
mov [ebp+lpMem] edi +
inc [ebp+arg_10]  +
cmp esi edi +
jge loc_102E5DD  +
cmp [ebp+var_1] 0 +
jnz loc_102E6D5  +
cmp esi edi +
jl loc_102E6D5  +
xor esi esi +
inc esi  +
mov eax esi +
jmp loc_102E6DE  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 28h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
and [ebp+var_8] 0 +
cmp [ebp+lpString1] 0 +
push ebx  +
push esi  +
push edi  +
lea esi [ebp+arg_C] +
lea edi [ebp+var_1C] +
movs   +
movs   +
movs   +
movs   +
mov [ebp+var_1] 0 +
jz loc_102E7F4  +
cmp [ebp+lpMem] 0 +
jz loc_102E7F4  +
cmp [ebp+arg_1C] 0 +
jz loc_102E7F4  +
mov ecx [ebp+arg_8] +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_1C] +
push eax  +
call sub_102DD8B  +
mov esi eax +
test esi esi +
jl loc_102E7F0  +
xor edi edi +
cmp edi [ebp+var_8] +
jnb loc_102E7E3  +
mov ecx [ebp+arg_8] +
lea eax [ebp+var_2C] +
push eax  +
push edi  +
lea eax [ebp+var_1C] +
push eax  +
call sub_102DDCB  +
mov esi eax +
test esi esi +
jl loc_102E7DA  +
mov ecx [ebp+arg_8] +
lea eax [ebp+lpString2] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
call sub_102DE22  +
mov esi eax +
test esi esi +
jl loc_102E7DA  +
mov ebx [ebp+lpString2] +
test ebx ebx +
jz loc_102E7BC  +
push 0FFFFFFFFh  +
push ebx  +
push 0FFFFFFFFh  +
push [ebp+lpString1]  +
push 1  +
push 409h  +
call ds:CompareStringW  +
dec eax  +
dec eax  +
jnz loc_102E7BC  +
push [ebp+arg_1C]  +
lea esi [ebp+var_2C] +
sub esp 10h +
mov edi esp +
push [ebp+arg_8]  +
movs   +
push [ebp+lpMem]  +
movs   +
movs   +
mov [ebp+var_1] 1 +
movs   +
call sub_102CF5A  +
mov edi [ebp+var_8] +
mov esi eax +
jmp loc_102E7BE  +
xor esi esi +
test ebx ebx +
jz loc_102E7DA  +
push ebx  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
test eax eax +
jz loc_102E7DA  +
and [ebp+lpString2] 0 +
inc edi  +
test esi esi +
jge loc_102E741  +
cmp [ebp+var_1] 0 +
jnz loc_102E7F0  +
test esi esi +
jl loc_102E7F0  +
xor esi esi +
inc esi  +
mov eax esi +
jmp loc_102E7F9  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push ebx  +
push esi  +
push edi  +
lea esi [ebp+arg_C] +
lea edi [ebp+var_20] +
movs   +
movs   +
movs   +
movs   +
xor edi edi +
mov [ebp+var_C] edi +
mov [ebp+var_1] 0 +
cmp [ebp+lpString1] edi +
jz loc_102E912  +
cmp [ebp+lpMem] edi +
jz loc_102E912  +
cmp [ebp+arg_1C] edi +
jz loc_102E912  +
mov ecx [ebp+arg_8] +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_20] +
push eax  +
call sub_102DD8B  +
mov esi eax +
cmp esi edi +
jl loc_102E90E  +
mov [ebp+var_8] edi +
mov eax [ebp+var_8] +
cmp eax [ebp+var_C] +
jnb loc_102E901  +
mov ecx [ebp+arg_8] +
lea eax [ebp+var_30] +
push eax  +
push [ebp+var_8]  +
lea eax [ebp+var_20] +
push eax  +
call sub_102DDCB  +
mov esi eax +
cmp esi edi +
jl loc_102E8F6  +
mov ecx [ebp+arg_8] +
lea eax [ebp+lpString2] +
push eax  +
lea eax [ebp+var_30] +
push eax  +
call sub_102DE22  +
mov esi eax +
cmp esi edi +
jl loc_102E8F6  +
mov ebx [ebp+lpString2] +
cmp ebx edi +
jz loc_102E8DA  +
push 0FFFFFFFFh  +
push ebx  +
push 0FFFFFFFFh  +
push [ebp+lpString1]  +
push 1  +
push 409h  +
call ds:CompareStringW  +
dec eax  +
dec eax  +
jnz loc_102E8DA  +
push [ebp+arg_1C]  +
lea esi [ebp+var_30] +
sub esp 10h +
mov edi esp +
push [ebp+arg_8]  +
movs   +
push [ebp+lpMem]  +
movs   +
movs   +
mov [ebp+var_1] 1 +
movs   +
call sub_102CF5A  +
mov esi eax +
xor edi edi +
jmp loc_102E8DC  +
xor esi esi +
cmp ebx edi +
jz loc_102E8F6  +
push ebx  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
test eax eax +
jz loc_102E8F6  +
mov [ebp+lpString2] edi +
inc [ebp+var_8]  +
cmp esi edi +
jge loc_102E85B  +
cmp [ebp+var_1] 0 +
jnz loc_102E90E  +
cmp esi edi +
jl loc_102E90E  +
xor esi esi +
inc esi  +
mov eax esi +
jmp loc_102E917  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+arg_20]  +
lea esi [ebp+arg_10] +
sub esp 10h +
mov edi esp +
push [ebp+arg_C]  +
movs   +
push [ebp+arg_4]  +
movs   +
push [ebp+arg_8]  +
movs   +
push [ebp+lpString1]  +
movs   +
push 2  +
call sub_102E56A  +
pop edi  +
pop esi  +
pop ebp  +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push ebx  +
push esi  +
push edi  +
xor edi edi +
mov [ebp+var_1] 0 +
cmp [ebp+lpString1] edi +
jz loc_102EB34  +
cmp [ebp+arg_4] edi +
jz loc_102EB34  +
cmp [ebp+arg_8] edi +
jz loc_102EB34  +
cmp [ebp+arg_10] edi +
jz loc_102EB34  +
cmp [ebp+arg_28] edi +
jz loc_102EB34  +
mov ecx [ebp+arg_14] +
lea eax [ebp+var_20] +
push eax  +
lea eax [ebp+arg_18] +
push eax  +
call sub_102DD8B  +
cmp eax edi +
mov [ebp+var_8] eax +
jl loc_102EB2F  +
mov [ebp+var_C] edi +
mov eax [ebp+var_C] +
cmp eax [ebp+var_20] +
jnb loc_102EB1D  +
mov ecx [ebp+arg_14] +
lea eax [ebp+var_30] +
push eax  +
push [ebp+var_C]  +
xor esi esi +
lea eax [ebp+arg_18] +
inc esi  +
push eax  +
mov [ebp+var_14] esi +
call sub_102DDCB  +
cmp eax edi +
mov [ebp+var_8] eax +
jl loc_102EB11  +
mov ecx [ebp+arg_14] +
lea eax [ebp+lpString2] +
push eax  +
lea eax [ebp+var_30] +
push eax  +
call sub_102DE22  +
cmp eax edi +
mov [ebp+var_8] eax +
jl loc_102EB11  +
cmp [ebp+lpString2] edi +
jz loc_102EB11  +
push 0FFFFFFFFh  +
push [ebp+lpString2]  +
push 0FFFFFFFFh  +
push [ebp+lpString1]  +
push esi  +
push 409h  +
call ds:CompareStringW  +
dec eax  +
dec eax  +
jnz loc_102EAF9  +
mov [ebp+var_1C] edi +
cmp [ebp+arg_C] edi +
jbe loc_102EAC5  +
mov esi [ebp+arg_8] +
mov ebx [ebp+arg_4] +
sub ebx esi +
cmp [ebp+var_14] 1 +
jnz loc_102EAC5  +
mov eax [ebx+esi] +
mov edi [esi] +
push 0  +
lea ecx [ebp+lpMem] +
push ecx  +
mov ecx [ebp+arg_14] +
push eax  +
lea eax [ebp+var_30] +
push eax  +
call sub_102E24B  +
mov [ebp+var_8] eax +
test eax eax +
jl loc_102EA91  +
cmp eax 1 +
jz loc_102EA8D  +
test edi edi +
jz loc_102EA84  +
push 0FFFFFFFFh  +
push [ebp+lpMem]  +
push 0FFFFFFFFh  +
push edi  +
push 1  +
push 409h  +
call ds:CompareStringW  +
dec eax  +
dec eax  +
jnz loc_102EA8D  +
mov [ebp+var_14] 1 +
jmp loc_102EA91  +
and [ebp+var_14] 0 +
cmp [ebp+lpMem] 0 +
jz loc_102EAB1  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
test eax eax +
jz loc_102EAB1  +
and [ebp+lpMem] 0 +
inc [ebp+var_1C]  +
mov eax [ebp+var_1C] +
add esi 4 +
xor edi edi +
cmp eax [ebp+arg_C] +
jb loc_102EA39  +
cmp [ebp+var_8] edi +
jl loc_102EAF9  +
cmp [ebp+var_14] 1 +
jnz loc_102EAF9  +
push [ebp+arg_28]  +
lea esi [ebp+var_30] +
sub esp 10h +
mov edi esp +
push [ebp+arg_14]  +
movs   +
push [ebp+arg_10]  +
movs   +
movs   +
mov [ebp+var_1] 1 +
movs   +
call sub_102CF5A  +
mov [ebp+var_8] eax +
mov eax [ebp+var_20] +
mov [ebp+var_C] eax +
xor edi edi +
push [ebp+lpString2]  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
test eax eax +
jz loc_102EB11  +
mov [ebp+lpString2] edi +
inc [ebp+var_C]  +
cmp [ebp+var_8] edi +
jge loc_102E9B3  +
cmp [ebp+var_8] edi +
jl loc_102EB2F  +
cmp [ebp+var_1] 0 +
jnz loc_102EB2F  +
mov [ebp+var_8] 1 +
mov eax [ebp+var_8] +
jmp loc_102EB39  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 2Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov eax ecx +
push 4  +
pop ecx  +
mov edi offset dword_100751C +
xor edx edx +
cmps   +
jz loc_102EBA0  +
mov esi [ebp+arg_0] +
push 4  +
pop ecx  +
mov edi offset dword_100750C +
xor edx edx +
cmps   +
jz loc_102EBA0  +
and [ebp+var_4] edx +
lea eax [ebp+var_10] +
push eax  +
lea ecx [ebp+arg_0] +
mov [ebp+arg_0] 0C00002B9h +
mov [ebp+var_10] offset aDW7rtmBaseNt_9 +
mov [ebp+var_C] offset aCbufferrtlwofo +
mov [ebp+var_8] 5C7h +
call sub_103D6FE  +
jmp loc_102EBA9  +
mov ecx [ebp+arg_4] +
and [ebp+arg_0] 0 +
mov [ecx] eax +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
cmp [ebp+arg_10] 0 +
push ebx  +
mov ebx ecx +
jnz loc_102EBCF  +
mov eax 0C000000Dh +
jmp loc_102EC49  +
mov ecx [ebx+4] +
push esi  +
push edi  +
lea esi [ebp+arg_0] +
lea edi [ebp+var_14] +
movs   +
movs   +
lea eax [ebp+var_4] +
movs   +
push eax  +
lea eax [ebp+var_14] +
push eax  +
movs   +
call sub_102DD8B  +
xor esi esi +
cmp eax esi +
jl loc_102EC42  +
xor eax eax +
inc eax  +
cmp [ebp+var_4] eax +
ja loc_102EC39  +
cmp [ebp+var_4] esi +
jnz loc_102EC05  +
mov eax [ebp+arg_10] +
mov [eax] esi +
jmp loc_102EC3E  +
mov ecx [ebx+4] +
lea eax [ebp+var_24] +
push eax  +
push esi  +
lea eax [ebp+var_14] +
push eax  +
mov [ebp+var_4] esi +
call sub_102DDCB  +
cmp eax esi +
jl loc_102EC42  +
mov ecx [ebx+4] +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_24] +
push eax  +
call sub_102DE7B  +
cmp eax esi +
jl loc_102EC42  +
xor eax eax +
cmp [ebp+var_4] esi +
setz al  +
mov ecx [ebp+arg_10] +
mov [ecx] eax +
xor eax eax +
jmp loc_102EC47  +
mov eax 0C0000001h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_14]  +
lea esi [ebp+arg_4] +
sub esp 10h +
mov edi esp +
push [ebp+arg_0]  +
movs   +
movs   +
mov ebx ecx +
mov ecx [ebx+0Ch] +
mov eax [ecx] +
movs   +
movs   +
call dword ptr [eax+10h]  +
test eax eax +
jl loc_102ECAA  +
lea eax [ebp+arg_0] +
push eax  +
sub esp 10h +
mov edi esp +
lea esi [ebp+arg_4] +
movs   +
movs   +
movs   +
mov ecx ebx +
movs   +
call sub_102EBB7  +
test eax eax +
jl loc_102ECAA  +
cmp [ebp+arg_0] 0 +
jz loc_102ECAA  +
push [ebp+arg_14]  +
mov ecx ebx +
call sub_102D6D5  +
add dword ptr [ebx+10h] 2 +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
sub esp 10h +
mov edi esp +
lea esi [ebp+arg_4] +
movs   +
movs   +
movs   +
mov ebx ecx +
movs   +
call sub_102EBB7  +
test eax eax +
jl loc_102ED1A  +
cmp [ebp+var_4] 0 +
jz loc_102ECEE  +
push [ebp+arg_14]  +
add dword ptr [ebx+10h] 0FFFFFFFEh +
mov ecx ebx +
call sub_102D64B  +
test eax eax +
jl loc_102ED1A  +
push [ebp+arg_14]  +
mov ecx [ebx+0Ch] +
mov eax [ecx] +
sub esp 10h +
mov edi esp +
push [ebp+arg_0]  +
lea esi [ebp+arg_4] +
movs   +
movs   +
movs   +
movs   +
call dword ptr [eax+14h]  +
test eax eax +
jl loc_102ED1A  +
push [ebp+arg_14]  +
mov ecx ebx +
call sub_102D6D5  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
and [ebp+var_8] 0 +
push ebx  +
push esi  +
push edi  +
lea esi [ebp+arg_4] +
lea edi [ebp+Mem] +
movs   +
movs   +
lea eax [ebp+lpMem] +
movs   +
push eax  +
mov ebx ecx +
mov ecx [ebx+4] +
lea eax [ebp+Mem] +
push eax  +
movs   +
call sub_102DF1D  +
test eax eax +
jge loc_102ED5C  +
mov eax 0C0000001h +
jmp loc_102EDC9  +
mov esi [ebp+lpMem] +
jmp loc_102ED78  +
movzx eax word ptr [esi] +
push eax  +
push offset asc_1007554  +
call ds:wcschr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_102ED80  +
inc esi  +
inc esi  +
cmp word ptr [esi] 0 +
jnz loc_102ED61  +
jmp loc_102EDAE  +
push [ebp+arg_14]  +
mov ecx ebx +
call sub_102D64B  +
mov [ebp+var_8] eax +
test eax eax +
jl loc_102EDAE  +
push [ebp+arg_14]  +
mov ecx [ebx+0Ch] +
mov eax [ecx] +
sub esp 10h +
mov edi esp +
push [ebp+arg_0]  +
lea esi [ebp+arg_4] +
movs   +
movs   +
movs   +
movs   +
call dword ptr [eax+20h]  +
mov [ebp+var_8] eax +
cmp [ebp+lpMem] 0 +
jz loc_102EDC6  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov eax ecx +
push 4  +
pop ecx  +
mov edi offset dword_100751C +
xor edx edx +
cmps   +
jz loc_102EE30  +
mov esi [ebp+arg_0] +
push 4  +
pop ecx  +
mov edi offset dword_1007584 +
xor edx edx +
cmps   +
jz loc_102EE30  +
and [ebp+var_4] edx +
lea eax [ebp+var_10] +
push eax  +
lea ecx [ebp+arg_0] +
mov [ebp+arg_0] 0C00002B9h +
mov [ebp+var_10] offset aDW7rtmBaseNt_9 +
mov [ebp+var_C] offset aCprettyprintud +
mov [ebp+var_8] 70Fh +
call sub_103D6FE  +
jmp loc_102EE39  +
mov ecx [ebp+arg_4] +
and [ebp+arg_0] 0 +
mov [ecx] eax +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+lpString1] +
push offset asc_1007404  +
push edi  +
mov esi ecx +
call sub_10112AF  +
xor ebx ebx +
test eax eax +
jz loc_102EF0B  +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_102EE71  +
sub eax edx +
sar eax 1 +
lea ecx [ebp+lpString1] +
push ecx  +
add eax 0FFFFFFFDh +
push eax  +
push ebx  +
push edi  +
call sub_101149E  +
mov edi eax +
cmp edi ebx +
jl loc_102EEEC  +
cmp [esi+8] ebx +
jz loc_102EEC4  +
push [ebp+lpMem]  +
mov ecx esi +
call sub_102D84F  +
test eax eax +
jz loc_102EEC4  +
push esi  +
sub esp 10h +
mov edi esp +
push [ebp+arg_8]  +
lea esi [ebp+arg_C] +
push [ebp+lpMem]  +
movs   +
push [ebp+lpString1]  +
movs   +
movs   +
movs   +
call sub_102E805  +
jmp loc_102EEEA  +
add dword ptr [esi+28h] 4 +
mov eax [esi+28h] +
mov eax [eax-4] +
push esi  +
sub esp 10h +
mov edi esp +
push [ebp+arg_8]  +
lea esi [ebp+arg_C] +
movs   +
movs   +
push eax  +
push [ebp+lpMem]  +
movs   +
push [ebp+lpString1]  +
movs   +
call sub_102E923  +
mov edi eax +
cmp [ebp+lpString1] ebx +
jz loc_102EFE1  +
push [ebp+lpString1]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
jmp loc_102EFE1  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
push edi  +
mov [ebp+var_4] ebx +
mov [ebp+var_C] ebx +
mov [ebp+var_10] ebx +
mov [ebp+var_8] ebx +
call sub_102CCCD  +
mov edi eax +
cmp edi ebx +
jl loc_102EFE1  +
cmp [ebp+var_14] ebx +
jz loc_102EF94  +
push esi  +
sub esp 10h +
mov edi esp +
push [ebp+arg_8]  +
lea esi [ebp+arg_C] +
push [ebp+lpMem]  +
movs   +
push [ebp+var_8]  +
movs   +
push [ebp+var_10]  +
movs   +
push [ebp+var_C]  +
movs   +
push [ebp+var_4]  +
call sub_102E957  +
mov edi eax +
cmp [ebp+var_4] ebx +
jz loc_102EF7C  +
push [ebp+var_4]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
push [ebp+var_8]  +
push [ebp+var_C]  +
call sub_102CC71  +
push [ebp+var_8]  +
push [ebp+var_10]  +
call sub_102CC71  +
jmp loc_102EFE1  +
cmp [esi+8] ebx +
jz loc_102EFC4  +
push [ebp+lpMem]  +
mov ecx esi +
call sub_102D84F  +
test eax eax +
jz loc_102EFC4  +
push esi  +
sub esp 10h +
mov edi esp +
push [ebp+arg_8]  +
lea esi [ebp+arg_C] +
push [ebp+lpMem]  +
movs   +
push [ebp+lpString1]  +
movs   +
movs   +
movs   +
call sub_102E805  +
jmp loc_102EFDF  +
push esi  +
sub esp 10h +
mov edi esp +
push [ebp+arg_8]  +
lea esi [ebp+arg_C] +
push [ebp+lpMem]  +
movs   +
push [ebp+lpString1]  +
movs   +
movs   +
movs   +
call sub_102E6EA  +
mov edi eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+arg_0] +
push eax  +
sub esp 10h +
mov edi esp +
push [ebp+arg_0]  +
lea esi [ebp+arg_4] +
movs   +
movs   +
movs   +
mov ebx ecx +
movs   +
call sub_102D930  +
test eax eax +
jl loc_102F02E  +
push [ebp+arg_0]  +
push dword ptr [ebx+38h]  +
call sub_1032FFA  +
test eax eax +
jl loc_102F028  +
xor eax eax +
jmp loc_102F02E  +
push eax  +
call sub_102CA44  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
lea eax [ebp+var_14] +
push eax  +
push 0  +
push 0  +
push [ebp+arg_14]  +
lea eax [ebp+arg_4] +
mov [ebp+var_4] ecx +
push eax  +
mov ecx ebx +
call sub_102E0B2  +
test eax eax +
jl loc_102F0EF  +
mov ecx [ebp+var_4] +
lea eax [ebp+arg_0] +
push eax  +
sub esp 10h +
mov edi esp +
lea esi [ebp+arg_4] +
movs   +
movs   +
movs   +
push ebx  +
movs   +
call sub_102D930  +
test eax eax +
jl loc_102F0EF  +
mov ecx [ebx] +
mov eax [ecx] +
lea edx [ebp+var_24] +
push edx  +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_14] +
movs   +
movs   +
movs   +
movs   +
call dword ptr [eax+20h]  +
test eax eax +
jge loc_102F0AB  +
push eax  +
call sub_102CA44  +
test eax eax +
jl loc_102F0EF  +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_24] +
movs   +
movs   +
movs   +
movs   +
mov esi [ebp+var_4] +
push dword ptr [esi+38h]  +
lea ecx [ebp+arg_14] +
call sub_1035216  +
test eax eax +
jge loc_102F0D3  +
push eax  +
call sub_102CA44  +
test eax eax +
jl loc_102F0EF  +
push [ebp+arg_14]  +
push [ebp+arg_0]  +
push dword ptr [esi+38h]  +
call sub_1032F57  +
test eax eax +
jl loc_102F0E9  +
xor eax eax +
jmp loc_102F0EF  +
push eax  +
call sub_102CA44  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
and [ebp+var_C] 0 +
push ebx  +
push esi  +
push edi  +
xor eax eax +
lea edi [ebp+var_8] +
stos   +
stos   +
lea eax [ebp+arg_0] +
push eax  +
sub esp 10h +
mov edi esp +
push [ebp+arg_0]  +
lea esi [ebp+arg_4] +
movs   +
movs   +
movs   +
mov ebx ecx +
movs   +
call sub_102D930  +
mov esi eax +
test esi esi +
jl loc_102F15B  +
lea eax [ebp+var_C] +
push eax  +
push [ebp+arg_14]  +
call sub_102CC04  +
push [ebp+arg_0]  +
lea ecx [ebp+var_C] +
push dword ptr [ebx+38h]  +
call sub_1032EAC  +
test eax eax +
jl loc_102F153  +
xor esi esi +
jmp loc_102F15B  +
push eax  +
call sub_102CA44  +
mov esi eax +
lea eax [ebp+var_C] +
push eax  +
call sub_102CC4D  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
lea eax [ebp+var_C] +
push eax  +
xor ebx ebx +
lea eax [ebp+Mem] +
mov [ebp+var_10] ecx +
push eax  +
mov ecx edi +
mov [ebp+var_C] ebx +
mov [ebp+lpMem] ebx +
mov [ebp+var_4] ebx +
call sub_102DE7B  +
mov esi eax +
cmp esi ebx +
jl loc_102F30C  +
mov ecx edi +
cmp [ebp+var_C] ebx +
jz loc_102F1DE  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+Mem] +
push eax  +
call sub_102DF1D  +
mov esi eax +
cmp esi ebx +
jl loc_102F30C  +
mov ecx [ebp+var_10] +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+var_4]  +
push [ebp+arg_4]  +
call sub_102D1F5  +
mov esi eax +
jmp loc_102F30C  +
lea eax [ebp+lpMem] +
push eax  +
lea eax [ebp+Mem] +
push eax  +
call sub_102DECC  +
mov esi eax +
cmp esi ebx +
jl loc_102F30C  +
cmp [ebp+lpMem] ebx +
jnz loc_102F30C  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+Mem] +
push eax  +
mov ecx edi +
call sub_102DE22  +
mov esi eax +
cmp esi ebx +
jl loc_102F251  +
mov ecx [ebp+var_10] +
lea eax [ebp+var_14] +
push eax  +
push [ebp+var_4]  +
push [ebp+arg_4]  +
call sub_102D277  +
mov esi eax +
cmp esi ebx +
jl loc_102F251  +
lea eax [ebp+var_1C] +
push eax  +
lea eax [ebp+Mem] +
push eax  +
mov ecx edi +
call sub_102DD8B  +
mov esi eax +
cmp esi ebx +
jl loc_102F251  +
lea eax [ebp+var_18] +
push eax  +
lea eax [ebp+Mem] +
push eax  +
mov ecx edi +
call sub_102E03B  +
mov esi eax +
xor edi edi +
jmp loc_102F2BC  +
cmp edi [ebp+var_18] +
jnb loc_102F2C0  +
mov ecx [ebp+arg_8] +
push ebx  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+lpMem] +
push eax  +
push edi  +
lea eax [ebp+Mem] +
push eax  +
mov [ebp+lpMem] ebx +
mov [ebp+var_C] ebx +
call sub_102E0B2  +
mov esi eax +
cmp esi ebx +
jl loc_102F28F  +
push [ebp+var_C]  +
mov ecx [ebp+var_10] +
push [ebp+lpMem]  +
push [ebp+var_14]  +
call sub_102D0F2  +
mov esi eax +
cmp [ebp+lpMem] ebx +
jz loc_102F2A5  +
push [ebp+lpMem]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp [ebp+var_C] ebx +
jz loc_102F2BB  +
push [ebp+var_C]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
inc edi  +
cmp esi ebx +
jge loc_102F255  +
mov [ebp+var_C] ebx +
jmp loc_102F308  +
mov eax [ebp+var_C] +
cmp eax [ebp+var_1C] +
jnb loc_102F30C  +
mov ecx [ebp+arg_8] +
lea eax [ebp+var_2C] +
push eax  +
push [ebp+var_C]  +
lea eax [ebp+Mem] +
push eax  +
call sub_102DDCB  +
mov esi eax +
cmp esi ebx +
jl loc_102F305  +
mov ecx [ebp+var_10] +
sub esp 10h +
mov edi esp +
push [ebp+arg_8]  +
lea esi [ebp+var_2C] +
push [ebp+var_14]  +
movs   +
push [ebp+arg_0]  +
movs   +
movs   +
movs   +
call sub_102F172  +
mov esi eax +
inc [ebp+var_C]  +
cmp esi ebx +
jge loc_102F2C5  +
cmp [ebp+var_4] ebx +
jz loc_102F322  +
push [ebp+var_4]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
sub esp 10h +
mov edi esp +
push dword ptr [ebp+10h]  +
lea esi [ebp+14h] +
push dword ptr [ebp+0Ch]  +
movs   +
push dword ptr [ebp+8]  +
movs   +
movs   +
mov ebx ecx +
movs   +
call sub_102EE47  +
cmp eax 1 +
jnz loc_102F3AB  +
cmp dword ptr [ebx+3Ch] 0 +
jz loc_102F3A8  +
lea eax [ebp-4] +
push eax  +
sub esp 10h +
mov edi esp +
push dword ptr [ebp+10h]  +
lea esi [ebp+14h] +
movs   +
movs   +
movs   +
mov ecx ebx +
movs   +
call sub_102D930  +
test eax eax +
jl loc_102F3AB  +
lea eax [ebp+0Ch] +
push eax  +
push dword ptr [ebp+0Ch]  +
mov ecx ebx +
push dword ptr [ebp+8]  +
push dword ptr [ebp-4]  +
push dword ptr [ebp+10h]  +
call sub_102D977  +
test eax eax +
jl loc_102F3AB  +
push dword ptr [ebp+0Ch]  +
mov ecx ebx +
push dword ptr [ebp+10h]  +
call sub_102D8F0  +
jmp loc_102F3AB  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+arg_4] +
mov ebx ecx +
mov ecx [ebp+arg_0] +
push eax  +
call sub_102DD8B  +
mov esi eax +
test esi esi +
jl loc_102F49E  +
lea eax [ebp+var_4] +
push eax  +
sub esp 10h +
mov edi esp +
push [ebp+arg_0]  +
lea esi [ebp+arg_4] +
movs   +
movs   +
movs   +
mov ecx ebx +
movs   +
call sub_102D930  +
mov esi eax +
test esi esi +
jl loc_102F49E  +
mov ecx [ebp+arg_0] +
lea eax [ebp+var_18] +
push eax  +
lea eax [ebp+arg_4] +
push eax  +
call sub_102DFB8  +
xor esi esi +
inc esi  +
cmp eax esi +
jnz loc_102F430  +
cmp dword ptr [ebx+3Ch] 0 +
jz loc_102F49E  +
push [ebp+var_4]  +
mov ecx ebx +
push [ebp+arg_0]  +
call sub_102D18D  +
mov esi eax +
jmp loc_102F49E  +
lea eax [ebp+arg_0] +
push eax  +
sub esp 10h +
mov edi esp +
push [ebp+arg_0]  +
lea esi [ebp+var_18] +
movs   +
movs   +
movs   +
mov ecx ebx +
movs   +
call sub_102D930  +
mov esi eax +
test esi esi +
jl loc_102F49E  +
mov eax [ebx+3Ch] +
xor edi edi +
test eax eax +
jz loc_102F46E  +
lea ecx [ebp+var_14] +
push ecx  +
push eax  +
call sub_102CC04  +
mov esi eax +
test esi esi +
jl loc_102F49E  +
lea edi [ebp+var_14] +
jmp loc_102F470  +
xor esi esi +
test esi esi +
jl loc_102F49E  +
push [ebp+arg_0]  +
mov ecx edi +
push dword ptr [ebx+38h]  +
call sub_1032DFD  +
test eax eax +
jl loc_102F489  +
xor esi esi +
jmp loc_102F491  +
push eax  +
call sub_102CA44  +
mov esi eax +
test edi edi +
jz loc_102F49E  +
lea eax [ebp+var_14] +
push eax  +
call sub_102CC4D  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea eax [ebp+var_20] +
push eax  +
lea eax [ebp+lpMem] +
push eax  +
mov ebx ecx +
push dword ptr [ebx+0Ch]  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx esi +
call sub_102E24B  +
mov [ebp+var_4] eax +
xor eax eax +
inc eax  +
cmp [ebp+var_4] eax +
jnz loc_102F51D  +
cmp dword ptr [ebx+3Ch] 0 +
jz loc_102F515  +
lea eax [ebp+lpMem] +
push eax  +
sub esp 10h +
mov edi esp +
push [ebp+arg_0]  +
lea esi [ebp+arg_4] +
movs   +
movs   +
movs   +
mov ecx ebx +
movs   +
call sub_102D930  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_102F625  +
push [ebp+lpMem]  +
mov ecx ebx +
push [ebp+arg_0]  +
call sub_102D8A2  +
mov [ebp+var_4] eax +
jmp loc_102F625  +
cmp [ebp+var_4] 0 +
jl loc_102F625  +
mov ecx [esi] +
mov eax [ecx] +
lea edx [ebp+var_30] +
push edx  +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_20] +
movs   +
movs   +
movs   +
movs   +
call dword ptr [eax+20h]  +
test eax eax +
jl loc_102F60D  +
sub esp 10h +
mov edi esp +
push dword ptr [ebx+38h]  +
lea esi [ebp+var_30] +
movs   +
movs   +
movs   +
lea ecx [ebp+var_C] +
movs   +
call sub_1035216  +
xor esi esi +
cmp eax esi +
jl loc_102F604  +
mov eax [ebx+3Ch] +
mov [ebp+var_8] esi +
cmp eax esi +
jz loc_102F58E  +
lea ecx [ebp+var_1C] +
push ecx  +
push eax  +
call sub_102CC04  +
cmp eax esi +
mov [ebp+var_4] eax +
jl loc_102F60D  +
lea eax [ebp+var_1C] +
mov [ebp+var_8] eax +
jmp loc_102F591  +
mov [ebp+var_4] esi +
cmp [ebp+var_4] esi +
jl loc_102F60D  +
mov ecx [ebp+var_8] +
cmp ecx esi +
jz loc_102F5B1  +
push [ebp+var_C]  +
push dword ptr [ebx+38h]  +
call sub_1032DFD  +
cmp eax esi +
jl loc_102F5EA  +
mov [ebp+var_4] esi +
jmp loc_102F5F3  +
lea eax [ebp+arg_0] +
push eax  +
sub esp 10h +
mov edi esp +
push [ebp+arg_0]  +
lea esi [ebp+arg_4] +
movs   +
movs   +
movs   +
mov ecx ebx +
movs   +
call sub_102D930  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_102F60D  +
push [ebp+var_C]  +
push [ebp+arg_0]  +
push dword ptr [ebx+38h]  +
call sub_1032F57  +
test eax eax +
jl loc_102F5EA  +
and [ebp+var_4] 0 +
jmp loc_102F60D  +
push eax  +
call sub_102CA44  +
mov [ebp+var_4] eax +
cmp [ebp+var_8] 0 +
jz loc_102F60D  +
lea eax [ebp+var_1C] +
push eax  +
call sub_102CC4D  +
jmp loc_102F60D  +
push eax  +
call sub_102CA44  +
mov [ebp+var_4] eax +
cmp [ebp+lpMem] 0 +
jz loc_102F625  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push dword ptr [ebp+8]  +
mov ebx ecx +
call sub_102D8BE  +
test eax eax +
jl loc_102F66F  +
sub esp 10h +
cmp dword ptr [ebx+0Ch] 0 +
mov edi esp +
push dword ptr [ebp+8]  +
lea esi [ebp+0Ch] +
movs   +
movs   +
movs   +
mov ecx ebx +
movs   +
jnz loc_102F668  +
call sub_102F3B7  +
jmp loc_102F675  +
call sub_102F4AC  +
jmp loc_102F675  +
push eax  +
call sub_102CA44  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
lea eax [ebp+Mem] +
push eax  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_102DFB8  +
cmp eax 1 +
jnz loc_102F6B0  +
push [ebp+arg_4]  +
push 0  +
push 0  +
push offset Mem  +
call sub_101149E  +
jmp loc_102F6C8  +
test eax eax +
jl loc_102F6C8  +
push [ebp+arg_4]  +
lea eax [ebp+Mem] +
push eax  +
mov ecx esi +
call sub_102DF1D  +
test eax eax +
jl loc_102F6C8  +
xor eax eax +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ebp+Mem] +
mov ebx ecx +
push eax  +
push ebx  +
call sub_102E360  +
test eax eax +
jl loc_102F719  +
push [ebp+arg_18]  +
lea esi [ebp+Mem] +
push [ebp+arg_14]  +
mov ecx ebx +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
call sub_102E42C  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push 0  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_102F6D2  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
push ebx  +
push esi  +
mov ebx ecx +
push edi  +
lea ecx [ebp+var_40] +
call sub_102D87D  +
xor ecx ecx +
cmp [ebx+8] ecx +
jnz loc_102F76F  +
mov eax 80070020h +
jmp loc_102F794  +
mov eax [ebx+4] +
sub esp 10h +
mov edi esp +
lea esi [ebp+arg_0] +
movs   +
movs   +
movs   +
mov [ebp+var_C] ecx +
mov [ebp+var_4] ecx +
push ebx  +
lea ecx [ebp+var_40] +
mov [ebp+var_10] 1 +
mov [ebp+var_8] eax +
movs   +
call sub_102EFEF  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
push ebx  +
push esi  +
mov ebx ecx +
push edi  +
lea ecx [ebp+var_40] +
call sub_102D87D  +
xor ecx ecx +
cmp [ebx+8] ecx +
jnz loc_102F7C3  +
mov eax 80070020h +
jmp loc_102F7EB  +
push [ebp+arg_10]  +
mov eax [ebx+4] +
sub esp 10h +
mov edi esp +
lea esi [ebp+arg_0] +
movs   +
movs   +
movs   +
mov [ebp+var_C] ecx +
mov [ebp+var_4] ecx +
push ebx  +
lea ecx [ebp+var_40] +
mov [ebp+var_10] 1 +
mov [ebp+var_8] eax +
movs   +
call sub_102F03A  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
push ebx  +
push esi  +
mov ebx ecx +
push edi  +
lea ecx [ebp+var_40] +
call sub_102D87D  +
xor ecx ecx +
cmp [ebx+8] ecx +
jnz loc_102F81A  +
mov eax 80070020h +
jmp loc_102F842  +
push [ebp+arg_10]  +
mov eax [ebx+4] +
sub esp 10h +
mov edi esp +
lea esi [ebp+arg_0] +
movs   +
movs   +
movs   +
mov [ebp+var_C] ecx +
mov [ebp+var_4] ecx +
push ebx  +
lea ecx [ebp+var_40] +
mov [ebp+var_10] 1 +
mov [ebp+var_8] eax +
movs   +
call sub_102F0FB  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
push ebx  +
push esi  +
mov ebx ecx +
push edi  +
lea ecx [ebp+var_44] +
call sub_102D87D  +
xor ecx ecx +
cmp [ebx+8] ecx +
jnz loc_102F871  +
mov eax 80070020h +
jmp loc_102F8B9  +
mov eax [ebx+4] +
mov [ebp+var_C] eax +
lea eax [ebp+var_4] +
push eax  +
sub esp 10h +
mov edi esp +
lea esi [ebp+arg_0] +
movs   +
movs   +
movs   +
mov [ebp+var_10] ecx +
mov [ebp+var_8] ecx +
push ebx  +
lea ecx [ebp+var_44] +
mov [ebp+var_14] 1 +
movs   +
call sub_102D930  +
test eax eax +
jl loc_102F8B9  +
sub esp 10h +
mov edi esp +
push [ebp+arg_10]  +
lea esi [ebp+arg_14] +
push [ebp+var_4]  +
movs   +
movs   +
movs   +
push ebx  +
lea ecx [ebp+var_44] +
movs   +
call sub_102F172  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
inc dword ptr [ecx+4]  +
cmp dword ptr [ecx+8] 0 +
push esi  +
push edi  +
lea edi [ecx+18h] +
lea esi [ebp+arg_4] +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
jz loc_102F8E5  +
xor eax eax +
jmp loc_102F90E  +
mov eax [ecx+0Ch] +
add ecx 10h +
test eax eax +
jz loc_102F901  +
push 0  +
push ecx  +
mov ecx [ebp+arg_0] +
push eax  +
lea eax [ebp+arg_4] +
push eax  +
call sub_102E24B  +
jmp loc_102F90E  +
push ecx  +
mov ecx [ebp+arg_0] +
lea eax [ebp+arg_4] +
push eax  +
call sub_102F681  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_102D3D3  +
mov ecx [esi] +
test ecx ecx +
jz loc_102F92F  +
and dword ptr [esi] 0 +
mov eax [ecx] +
pop esi  +
jmp dword ptr [eax]  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
mov [ebp+var_8] ecx +
mov [ebp+var_28] offset off_1007470 +
mov [ebp+var_24] ebx +
mov [ebp+var_20] ebx +
mov [ebp+var_1C] ebx +
mov [ebp+var_18] ebx +
cmp [ebp+arg_10] ebx +
jz loc_102FAA6  +
cmp [ebp+arg_14] ebx +
jz loc_102FAA6  +
lea ecx [ebp+var_28] +
mov edi 8007000Eh +
call sub_102D0BC  +
mov esi 10000h +
push esi  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+var_24] eax +
cmp eax ebx +
jz loc_102F99F  +
mov [ebp+var_20] ebx +
mov [ebp+var_1C] esi +
mov [ebp+var_18] esi +
xor edi edi +
cmp edi ebx +
mov esi edi +
jl loc_102FA9A  +
lea eax [ebp+var_4] +
push eax  +
push ebx  +
mov [ebp+var_4] ebx +
call sub_103C670  +
cmp eax ebx +
jl loc_102FA84  +
push [ebp+var_4]  +
mov esi [ebp+var_8] +
lea eax [ebp+var_28] +
push eax  +
push esi  +
lea ecx [ebp+var_40] +
call sub_102D61B  +
lea ecx [ebp+var_40] +
cmp [ebp+lpMem] ebx +
jnz loc_102F9DC  +
mov ecx [ebp+var_4] +
mov eax [esi] +
lea edx [ebp+var_28] +
push edx  +
sub esp 10h +
mov edi esp +
lea esi [ebp+arg_0] +
movs   +
movs   +
push eax  +
movs   +
push ecx  +
push ebx  +
movs   +
call sub_103D03A  +
cmp eax ebx +
jl loc_102FA84  +
xor eax eax +
lea edi [ebp+var_10] +
stos   +
stos   +
mov eax [ebp+var_20] +
mov [ebp+var_10] eax +
mov [ebp+var_14] eax +
mov eax [ebp+var_24] +
mov [ebp+var_C] eax +
lea eax [ebp+lpMem] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
mov [ebp+lpMem] ebx +
mov [ebp+var_8] ebx +
call sub_102CB45  +
mov esi eax +
cmp esi ebx +
jl loc_102FA6C  +
push [ebp+lpMem]  +
lea eax [ebp+var_8] +
push 0FEFFh  +
push offset aCS  +
push eax  +
call sub_101160D  +
mov esi eax +
add esp 10h +
cmp esi ebx +
jl loc_102FA6C  +
mov eax [ebp+var_8] +
mov ecx [ebp+arg_10] +
mov [ecx] eax +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx bx +
jnz loc_102FA57  +
sub eax ecx +
mov ecx [ebp+arg_14] +
sar eax 1 +
add eax eax +
mov [ecx] eax +
cmp [ebp+lpMem] ebx +
jz loc_102FA8C  +
push [ebp+lpMem]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
jmp loc_102FA8C  +
push eax  +
call sub_102CA44  +
mov esi eax +
mov ecx [ebp+var_4] +
cmp ecx ebx +
jz loc_102FA9A  +
mov [ebp+var_4] ebx +
mov eax [ecx] +
call dword ptr [eax]  +
lea ecx [ebp+var_28] +
call sub_102D5FE  +
mov eax esi +
jmp loc_102FAB3  +
lea ecx [ebp+var_28] +
call sub_102D5FE  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 50h +
push ebx  +
push esi  +
mov ebx ecx +
push edi  +
lea ecx [ebp+var_50] +
call sub_102D87D  +
xor esi esi +
cmp [ebx+0Ch] esi +
jnz loc_102FB99  +
cmp [ebx+8] esi +
jnz loc_102FB99  +
lea eax [ebp+lpMem] +
push eax  +
lea eax [ebp+Mem] +
push eax  +
push ebx  +
call sub_102E360  +
mov edi eax +
cmp edi esi +
jl loc_102FB95  +
mov eax [ebp+arg_4] +
mov [ebp+var_44] eax +
mov eax [ebp+arg_C] +
mov [ebp+var_28] eax +
mov eax [ebp+arg_8] +
mov [ebp+var_14] eax +
lea eax [ebp+var_50] +
push eax  +
mov [ebp+var_48] esi +
sub esp 10h +
mov edi esp +
lea esi [ebp+Mem] +
movs   +
movs   +
movs   +
push ebx  +
push [ebp+lpMem]  +
movs   +
call sub_102CF5A  +
mov edi eax +
xor esi esi +
cmp edi esi +
jl loc_102FB95  +
cmp [ebp+var_20] 0 +
jz loc_102FB95  +
cmp [ebp+var_1C] esi +
jl loc_102FB8B  +
push [ebp+var_18]  +
lea edx [ebp+lpMem] +
xor ecx ecx +
mov [ebp+lpMem] esi +
call sub_103532A  +
cmp eax esi +
jl loc_102FB73  +
mov ecx [ebx] +
cmp ecx esi +
jz loc_102FB61  +
mov [ebx] esi +
mov eax [ecx] +
call dword ptr [eax]  +
mov eax [ebp+lpMem] +
push [ebp+var_18]  +
mov [ebp+lpMem] esi +
mov [ebx] eax +
call sub_10346CB  +
jmp loc_102FB7B  +
push eax  +
call sub_102CA44  +
mov edi eax +
mov ecx [ebp+lpMem] +
cmp ecx esi +
jz loc_102FB95  +
mov [ebp+lpMem] esi +
mov eax [ecx] +
call dword ptr [eax]  +
jmp loc_102FB95  +
push [ebp+var_1C]  +
call sub_102CA44  +
mov edi eax +
mov eax edi +
jmp loc_102FB9E  +
mov eax 80070020h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+8] edi +
jz loc_102FC11  +
cmp [esi+0Ch] edi +
jnz loc_102FC11  +
push dword ptr [esi+4]  +
lea edx [ebp+var_4] +
xor ecx ecx +
mov [ebp+var_4] edi +
call sub_103532A  +
cmp eax edi +
jl loc_102FBF7  +
mov ecx [esi] +
cmp ecx edi +
jz loc_102FBE0  +
mov [esi] edi +
mov eax [ecx] +
call dword ptr [eax]  +
mov eax [ebp+var_4] +
push dword ptr [esi+4]  +
mov [ebp+var_4] edi +
mov [esi] eax +
call sub_10346CB  +
mov [esi+8] edi +
xor esi esi +
jmp loc_102FBFF  +
push eax  +
call sub_102CA44  +
mov esi eax +
mov ecx [ebp+var_4] +
cmp ecx edi +
jz loc_102FC0D  +
mov [ebp+var_4] edi +
mov eax [ecx] +
call dword ptr [eax]  +
mov eax esi +
jmp loc_102FC16  +
mov eax 80070020h +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov eax ecx +
xor ecx ecx +
mov [eax] ecx +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
xor esi esi +
push edi  +
mov ebx ecx +
cmp [ebp+arg_0] esi +
jz loc_102FC73  +
cmp [ebp+arg_4] esi +
jz loc_102FC73  +
lea eax [ebp+var_10] +
push eax  +
call sub_102DCE1  +
cmp eax esi +
jl loc_102FC78  +
push esi  +
push [ebp+arg_4]  +
lea esi [ebp+var_10] +
push [ebp+arg_0]  +
mov ecx ebx +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
call sub_102F936  +
jmp loc_102FC78  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
push edx  +
push offset sub_1031DC3  +
push ecx  +
call sub_1030B2B  +
pop ebp  +
retn 4  +
***
test ecx ecx +
jnz loc_102FCB2  +
xor al al +
retn   +
mov eax [ecx] +
cmp eax [ecx+4] +
ja loc_102FCAF  +
cmp dword ptr [ecx+8] 0 +
jnz loc_102FCC3  +
test eax eax +
jnz loc_102FCAF  +
mov al 1 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp sub_1030902  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
mov eax offset sub_1031DC3 +
push [ebp+arg_8]  +
push eax  +
push [ebp+arg_4]  +
push eax  +
push [ebp+arg_0]  +
call sub_1030972  +
pop ebp  +
retn 10h  +
***
mov dword ptr [ecx] 0C000000Dh +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
mov ebx [ebp+arg_14] +
push esi  +
mov esi [ebp+arg_C] +
xor edx edx +
push edi  +
mov [ebp+var_4] 0C00000E5h +
cmp ebx edx +
jz loc_102FD2D  +
mov [ebx] esi +
cmp [ebp+arg_0] edx +
jz loc_102FD41  +
mov esi 38Bh +
mov edi offset aValidFlagsChec +
jmp loc_102FDD7  +
mov ecx [ebp+arg_4] +
cmp ecx edx +
jnz loc_102FD54  +
mov esi 38Ch +
mov edi offset aNotNullCheckFa +
jmp loc_102FDA3  +
call sub_102FCAB  +
test al al +
jnz loc_102FD69  +
mov esi 38Dh +
mov edi offset aRtlislutf8stri +
jmp loc_102FDD7  +
mov edi [ebp+arg_10] +
cmp esi edx +
jz loc_102FD80  +
cmp edi edx +
jnz loc_102FD80  +
mov esi 38Eh +
mov edi offset aCandidatecount +
jmp loc_102FDD7  +
test esi esi +
jbe loc_102FD95  +
mov ecx [edi+edx*4] +
call sub_102FCAB  +
test al al +
jz loc_102FDCD  +
inc edx  +
cmp edx esi +
jb loc_102FD84  +
test ebx ebx +
jnz loc_102FDE1  +
mov esi 395h +
mov edi offset aNotNullCheck_0 +
lea ecx [ebp+var_4] +
call sub_102FD01  +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_14] offset aDW7rtmBaseLstr +
mov [ebp+var_10] offset aRtlmatchlutf8s +
mov [ebp+var_C] esi +
mov [ebp+var_8] edi +
call sub_103D6FE  +
jmp loc_102FE05  +
mov esi 392h +
mov edi offset aRtlislutf8st_0 +
lea ecx [ebp+var_4] +
call sub_102FD01  +
jmp loc_102FDAB  +
push ebx  +
mov eax offset sub_1031DC3 +
push eax  +
push edi  +
push esi  +
push [ebp+arg_8]  +
push eax  +
push [ebp+arg_4]  +
push 0  +
call sub_1031057  +
test eax eax +
jge loc_102FE01  +
mov [ebp+var_4] eax +
jmp loc_102FE05  +
and [ebp+var_4] 0 +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
xor esi esi +
push edi  +
mov [ebp+var_4] 0C00000E5h +
cmp [ebp+arg_0] esi +
jz loc_102FE38  +
mov esi 3DFh +
mov edi offset aValidFlagsChec +
jmp loc_102FE6A  +
mov ecx [ebp+arg_8] +
cmp ecx esi +
jnz loc_102FE57  +
lea ecx [ebp+var_4] +
call sub_102FD01  +
mov [ebp+var_C] 3E0h +
mov [ebp+var_8] offset aNotNullCheck_1 +
jmp loc_102FE78  +
call sub_102FCAB  +
test al al +
jnz loc_102FE94  +
mov esi 3E1h +
mov edi offset aRtlislutf8st_1 +
lea ecx [ebp+var_4] +
call sub_102FD01  +
mov [ebp+var_C] esi +
mov [ebp+var_8] edi +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_10] offset aRtlreallocatel +
mov [ebp+var_14] offset aDW7rtmBaseLstr +
call sub_103D6FE  +
jmp loc_102FEA8  +
push ecx  +
push [ebp+arg_4]  +
push esi  +
call sub_10310C6  +
cmp eax esi +
mov [ebp+var_4] eax +
jl loc_102FEA8  +
mov [ebp+var_4] esi +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov edx [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] 0C00000E5h +
test edx edx +
jz loc_102FEF9  +
mov ecx [ebp+arg_0] +
or dword ptr [edx] 0FFFFFFFFh +
call sub_102FCAB  +
test al al +
jnz loc_102FF0D  +
lea ecx [ebp+var_4] +
call sub_102FD01  +
mov [ebp+var_10] 409h +
mov [ebp+var_C] offset aRtlislutf8st_2 +
jmp loc_102FF8E  +
lea ecx [ebp+var_4] +
mov esi 408h +
mov edi offset aNotNullCheck_2 +
call sub_102FD01  +
jmp loc_102FF88  +
mov edi [ecx+8] +
mov esi [ecx] +
add esi edi +
xor ebx ebx +
cmp edi esi +
jz loc_102FF4A  +
mov edx esi +
mov ecx edi +
call sub_1031DC3  +
mov [ebp+var_4] edx +
cmp eax 0FFFFFFFFh +
jz loc_102FF5A  +
mov edi edx +
cmp eax 110000h +
jnb loc_102FF64  +
mov ecx eax +
call sub_10324AA  +
add eax ebx +
cmp eax ebx +
jbe loc_102FF77  +
mov ebx eax +
cmp edi esi +
jnz loc_102FF1A  +
mov edx [ebp+arg_4] +
and [ebp+var_4] 0 +
mov [edx] ebx +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
test edx edx +
jl loc_102FF5F  +
int 3  +
mov [ebp+var_4] edx +
jmp loc_102FF50  +
mov esi 416h +
mov edi offset aRv_ucscharacte +
mov [ebp+var_4] 0C0000161h +
jmp loc_102FF88  +
mov esi 418h +
mov edi offset aNewtempbytesre +
mov [ebp+var_4] 0C0000095h +
mov [ebp+var_10] esi +
mov [ebp+var_C] edi +
lea eax [ebp+var_18] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_14] offset aRtlcalculateut +
mov [ebp+var_18] offset aDW7rtmBaseLstr +
call sub_103D6FE  +
jmp loc_102FF50  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
mov esi edx +
xor edx edx +
mov ebx ecx +
mov [ebp+var_4] 0C00000E5h +
cmp esi edx +
jz loc_103000D  +
mov [esi+8] edx +
mov [esi] edx +
mov [esi+4] edx +
call sub_102FCAB  +
test al al +
jnz loc_1030025  +
lea ecx [ebp+var_4] +
call sub_102FD01  +
mov [ebp+var_C] 92h +
mov [ebp+var_8] offset aRtlislutf8st_3 +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_10] offset aRtlduplicatelu +
mov [ebp+var_14] offset aDW7rtmBaseLstr +
call sub_103D6FE  +
jmp loc_1030052  +
lea ecx [ebp+var_4] +
call sub_102FD01  +
mov [ebp+var_C] 91h +
mov [ebp+var_8] offset aNotNullCheck_3 +
jmp loc_102FFF1  +
push edi  +
mov edi [ebx] +
cmp edi edx +
jz loc_103004D  +
push esi  +
push edi  +
call sub_1030902  +
test eax eax +
jge loc_103003C  +
mov [ebp+var_4] eax +
jmp loc_1030051  +
push edi  +
push dword ptr [ebx+8]  +
push dword ptr [esi+8]  +
call memcpy  +
add esp 0Ch +
mov [esi] edi +
and [ebp+var_4] 0 +
pop edi  +
mov eax [ebp+var_4] +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
xor esi esi +
mov [ebp+var_4] 0C00000E5h +
cmp edx esi +
jz loc_103008D  +
mov [edx] esi +
push edi  +
cmp [edx+8] esi +
jnz loc_10300BF  +
cmp [edx+4] esi +
jz loc_10300BF  +
mov esi 0F7h +
mov edi offset aDestinationBuf +
jmp loc_10300D2  +
lea ecx [ebp+var_4] +
call sub_102FD01  +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_14] offset aDW7rtmBaseLstr +
mov [ebp+var_10] offset aRtlcopylutf8st +
mov [ebp+var_C] 0F6h +
mov [ebp+var_8] offset aNotNullCheck_3 +
call sub_103D6FE  +
jmp loc_1030117  +
call sub_102FCAB  +
test al al +
jnz loc_10300FC  +
mov esi 0F8h +
mov edi offset aRtlislutf8st_3 +
lea ecx [ebp+var_4] +
call sub_102FD01  +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_14] offset aDW7rtmBaseLstr +
mov [ebp+var_10] offset aRtlcopylutf8st +
mov [ebp+var_C] esi +
mov [ebp+var_8] edi +
call sub_103D6FE  +
jmp loc_1030116  +
push edx  +
push 3F6h  +
push ecx  +
push 6Ah  +
push esi  +
push esi  +
call sub_103171D  +
cmp eax esi +
mov [ebp+var_4] eax +
jl loc_1030116  +
mov [ebp+var_4] esi +
pop edi  +
mov eax [ebp+var_4] +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
xor esi esi +
mov [ebp+var_4] 0C00000E5h +
cmp edx esi +
jz loc_103017B  +
mov [edx+8] esi +
mov [edx] esi +
mov [edx+4] esi +
call sub_102FCAB  +
test al al +
jnz loc_1030193  +
lea ecx [ebp+var_4] +
call sub_102FD01  +
mov [ebp+var_C] 13Eh +
mov [ebp+var_8] offset aRtlislutf8stri +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_10] offset aRtlduplicate_0 +
mov [ebp+var_14] offset aDW7rtmBaseLstr +
call sub_103D6FE  +
jmp loc_10301AE  +
lea ecx [ebp+var_4] +
call sub_102FD01  +
mov [ebp+var_C] 13Dh +
mov [ebp+var_8] offset aNotNullCheck_3 +
jmp loc_103015F  +
push edx  +
push 3F6h  +
push ecx  +
push 6Ah  +
push esi  +
push 1  +
call sub_103171D  +
cmp eax esi +
mov [ebp+var_4] eax +
jl loc_10301AE  +
mov [ebp+var_4] esi +
mov eax [ebp+var_4] +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
mov esi edx +
xor edi edi +
mov ebx ecx +
mov [ebp+var_4] 0C00000E5h +
cmp esi edi +
jz loc_1030218  +
mov [esi+8] edi +
mov [esi] edi +
mov [esi+4] edi +
call sub_10323CB  +
test al al +
jnz loc_1030230  +
lea ecx [ebp+var_4] +
call sub_102FD01  +
mov [ebp+var_C] 15Eh +
mov [ebp+var_8] offset aRtlislunicodes +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_10] offset aRtlduplicate_1 +
mov [ebp+var_14] offset aDW7rtmBaseLstr +
call sub_103D6FE  +
jmp loc_103024B  +
lea ecx [ebp+var_4] +
call sub_102FD01  +
mov [ebp+var_C] 15Dh +
mov [ebp+var_8] offset aNotNullCheck_3 +
jmp loc_10301FC  +
push esi  +
push 6Ah  +
push ebx  +
push 3F6h  +
push edi  +
push 1  +
call sub_103171D  +
cmp eax edi +
mov [ebp+var_4] eax +
jl loc_103024B  +
mov [ebp+var_4] edi +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_14] +
xor ebx ebx +
mov [ebp+var_4] 0C00000E5h +
cmp edi ebx +
jz loc_103027B  +
mov [edi] ebx +
mov [edi+4] ebx +
mov [edi+8] ebx +
mov edx [ebp+arg_18] +
cmp edx ebx +
jz loc_103028A  +
mov [edx] ebx +
mov [edx+4] ebx +
mov [edx+8] ebx +
mov eax [ebp+arg_0] +
test eax 0FFFFFFF8h +
jz loc_10302A0  +
mov esi 1C2h +
mov edi offset aValidFlagsChec +
jmp loc_10302F5  +
and eax 3 +
jnz loc_10302B1  +
mov esi 1C4h +
mov edi offset a__e0 +
jmp loc_10302F5  +
and eax 3 +
lea ecx [eax-1] +
test ecx eax +
jz loc_10302C7  +
mov esi 1C4h +
mov edi offset aNoMoreThanOneF +
jmp loc_10302F5  +
mov ecx [ebp+arg_4] +
cmp ecx ebx +
jnz loc_10302E2  +
mov esi 1C6h +
mov edi offset aNotNullCheck_1 +
lea ecx [ebp+var_4] +
call sub_102FD01  +
jmp loc_1030342  +
call sub_102FCAB  +
test al al +
jnz loc_10302FF  +
mov esi 1C7h +
mov edi offset aRtlislutf8st_1 +
lea ecx [ebp+var_4] +
call sub_102FD01  +
jmp loc_1030342  +
cmp edi ebx +
jnz loc_103030F  +
mov esi 1C8h +
mov edi offset aNotNullCheck_4 +
jmp loc_10302D8  +
cmp edx ebx +
jnz loc_103031F  +
mov esi 1C9h +
mov edi offset aNotNullCheck_5 +
jmp loc_10302D8  +
mov esi [ebp+arg_10] +
cmp [ebp+arg_C] ebx +
jnz loc_1030364  +
lea eax [esi-0D800h] +
cmp eax 7FFh +
ja loc_1030364  +
mov esi 1CCh +
xor edi edi +
mov [ebp+var_4] 0C0000161h +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_14] offset aDW7rtmBaseLstr +
mov [ebp+var_10] offset aRtlsplitlutf8s +
mov [ebp+var_C] esi +
mov [ebp+var_8] edi +
call sub_103D6FE  +
jmp loc_1030399  +
test byte ptr [ebp+arg_0] 1 +
push 0  +
pop eax  +
setz al  +
inc eax  +
test byte ptr [ebp+arg_0] 4 +
jz loc_1030378  +
or eax 4 +
push edx  +
push edi  +
push esi  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push offset sub_1031DC3  +
push ecx  +
push eax  +
call sub_1031388  +
test eax eax +
jge loc_1030396  +
mov [ebp+var_4] eax +
jmp loc_1030399  +
and [ebp+var_4] ebx +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+14h] +
xor edx edx +
xor esi esi +
mov dword ptr [ebp-4] 0C00000E5h +
cmp edi edx +
jz loc_10303EF  +
mov eax [ebp+8] +
mov [ebp+14h] eax +
and dword ptr [ebp+14h] 1 +
mov [edi] edx +
jnz loc_10303D9  +
mov [edi+4] edx +
mov [edi+8] edx +
test eax 0FFFFFFFEh +
jz loc_1030406  +
mov esi 202h +
mov edi offset aValidFlagsChec +
jmp loc_1030478  +
lea ecx [ebp-4] +
mov esi 1FFh +
mov edi offset aNotNullCheck_3 +
call sub_102FD01  +
jmp loc_1030493  +
cmp [ebp+0Ch] edx +
jz loc_1030436  +
cmp [ebp+10h] edx +
jnz loc_103041C  +
mov esi 204h +
mov edi offset aStringcount0St +
jmp loc_1030478  +
cmp [ebp+0Ch] edx +
jbe loc_1030436  +
mov ecx [ebp+10h] +
call sub_102FCAB  +
test al al +
jz loc_103046E  +
inc edx  +
add ecx 0Ch +
cmp edx [ebp+0Ch] +
jb loc_1030424  +
xor ebx ebx +
cmp [ebp+0Ch] ebx +
jbe loc_1030458  +
mov edx [ebp+10h] +
mov eax [edx] +
lea ecx [eax+esi] +
cmp ecx esi +
jb loc_1030482  +
cmp ecx eax +
jb loc_1030482  +
inc ebx  +
add edx 0Ch +
mov esi ecx +
cmp ebx [ebp+0Ch] +
jb loc_1030440  +
cmp dword ptr [ebp+14h] 0 +
jz loc_10304B5  +
cmp esi [edi+4] +
jbe loc_10304C5  +
push edi  +
push esi  +
push 0  +
call sub_102FE14  +
jmp loc_10304BC  +
mov esi 208h +
mov edi offset aRtlislutf8st_4 +
lea ecx [ebp-4] +
call sub_102FD01  +
jmp loc_1030493  +
mov esi 20Ch +
mov edi offset aBuclRtlAddinpl +
mov dword ptr [ebp-4] 0C0000095h +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-4] +
mov dword ptr [ebp-14h] offset aDW7rtmBaseLstr +
mov dword ptr [ebp-10h] offset aRtlconcatenate +
mov [ebp-0Ch] esi +
mov [ebp-8] edi +
call sub_103D6FE  +
jmp loc_1030509  +
push edi  +
push esi  +
call sub_1030902  +
test eax eax +
jge loc_10304C5  +
mov [ebp-4] eax +
jmp loc_1030509  +
and dword ptr [ebp+14h] 0 +
cmp dword ptr [ebp+0Ch] 0 +
mov esi [edi+8] +
jbe loc_1030500  +
mov ebx [ebp+10h] +
mov ecx [edi+8] +
mov eax [ebx] +
sub ecx esi +
add ecx [edi+4] +
cmp ecx eax +
jb near ptr byte_1030513  +
push eax  +
push dword ptr [ebx+8]  +
push esi  +
call memcpy  +
add esi [ebx] +
add esp 0Ch +
inc dword ptr [ebp+14h]  +
mov eax [ebp+14h] +
add ebx 0Ch +
cmp eax [ebp+0Ch] +
jb loc_10304D5  +
sub esi [edi+8] +
and dword ptr [ebp-4] 0 +
mov [edi] esi +
mov eax [ebp-4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
mov esi edx +
push edi  +
mov edx ecx +
mov [ebp+var_4] 0C00000E5h +
test esi esi +
jnz loc_1030547  +
mov esi 231h +
mov edi offset aNotNullCheck_3 +
lea ecx [ebp+var_4] +
call sub_102FD01  +
jmp loc_10305A8  +
mov ecx esi +
call sub_102FCAB  +
test al al +
jnz loc_103055E  +
mov esi 232h +
mov edi offset aRtlislutf8st_5 +
jmp loc_1030583  +
test edx edx +
jnz loc_103056E  +
mov esi 233h +
mov edi offset aNotNullCheck_6 +
jmp loc_103053D  +
mov ecx edx +
call sub_102FCAB  +
test al al +
jnz loc_103058D  +
mov esi 234h +
mov edi offset aRtlislutf8st_2 +
lea ecx [ebp+var_4] +
call sub_102FD01  +
jmp loc_10305A8  +
mov edi [esi] +
mov eax [esi+4] +
mov ebx [edx] +
sub eax edi +
cmp eax ebx +
jnb loc_10305CA  +
mov esi 23Ch +
xor edi edi +
mov [ebp+var_4] 80000005h +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_14] offset aDW7rtmBaseLstr +
mov [ebp+var_10] offset aRtlappendlutf8 +
mov [ebp+var_C] esi +
mov [ebp+var_8] edi +
call sub_103D6FE  +
jmp loc_10305E4  +
mov eax [esi+8] +
push ebx  +
push dword ptr [edx+8]  +
add eax edi +
push eax  +
call memcpy  +
add ebx edi +
add esp 0Ch +
and [ebp+var_4] 0 +
mov [esi] ebx +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov [ebp+var_4] 0C00000E5h +
test esi esi +
jnz loc_103061D  +
lea ecx [ebp+var_4] +
mov esi 2A7h +
mov edi offset aNotNullCheck_3 +
call sub_102FD01  +
jmp loc_103066B  +
mov ecx esi +
call sub_102FCAB  +
test al al +
jnz loc_1030640  +
lea ecx [ebp+var_4] +
call sub_102FD01  +
mov [ebp+var_C] 2A8h +
mov [ebp+var_8] offset aRtlislutf8st_5 +
jmp loc_1030671  +
mov eax [esi+8] +
mov ecx [esi+4] +
mov edx [esi] +
add ecx eax +
push ecx  +
mov ecx [ebp+arg_0] +
add edx eax +
call sub_10324BE  +
test eax eax +
jnz loc_103068D  +
test edx edx +
jl loc_103065E  +
int 3  +
mov esi 2ADh +
mov edi offset a__rv_newcursor +
mov [ebp+var_4] edx +
mov [ebp+var_C] esi +
mov [ebp+var_8] edi +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_10] offset aRtlappenducsch +
mov [ebp+var_14] offset aDW7rtmBaseLstr +
call sub_103D6FE  +
jmp loc_1030696  +
sub eax [esi+8] +
and [ebp+var_4] 0 +
mov [esi] eax +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax [ebp+arg_4] +
jnb loc_10306B6  +
or eax 0FFFFFFFFh +
jmp loc_10306C0  +
xor ecx ecx +
cmp eax [ebp+arg_4] +
setnz cl  +
mov eax ecx +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
push 2Ch  +
mov esi ecx +
push 0  +
push esi  +
call memset  +
and dword ptr [esi+24h] 0 +
or dword ptr [esi+28h] 0FFFFFFFFh +
add esp 0Ch +
pop esi  +
retn   +
***
test ecx ecx +
jnz loc_10306F1  +
xor al al +
retn   +
cmp dword ptr [ecx+8] 0 +
jnz loc_10306FC  +
cmp dword ptr [ecx] 0 +
jnz loc_10306EE  +
mov eax [ecx] +
cmp [ecx+4] eax +
sbb al al +
inc al  +
retn   +
***
test ecx ecx +
jz locret_103071D  +
mov eax [ecx+8] +
test eax eax +
jz locret_103071D  +
push eax  +
call ds:off_1007410  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
mov eax ecx +
ja loc_1030741  +
mov ecx [ebp+arg_0] +
jb loc_103073A  +
cmp ecx 0FFFFFFFFh +
ja loc_1030741  +
and dword ptr [eax] 0 +
mov [edx] ecx +
jmp loc_1030747  +
mov dword ptr [eax] 0C0000095h +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mul  [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push edx  +
mov edx [ebp+arg_C] +
push eax  +
call sub_1030723  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
xor edx edx +
push esi  +
push edi  +
mov [ebp+var_4] 0C00000E5h +
cmp [ebp+arg_0] edx +
jz loc_103079C  +
mov esi 6BBh +
mov edi offset aValidFlagsChec +
jmp loc_103083C  +
mov ebx [ebp+arg_8] +
cmp ebx edx +
jnz loc_10307B9  +
mov edi [ebp+arg_C] +
cmp edi edx +
jnz loc_10307D7  +
mov esi 6BCh +
mov edi offset aFixedsizebuffe +
jmp loc_103083C  +
mov ecx ebx +
call sub_10306EA  +
test al al +
jnz loc_10307D0  +
mov esi 6BDh +
mov edi offset aFixedsizebuf_0 +
jmp loc_103083C  +
mov edi [ebp+arg_C] +
cmp edi edx +
jz loc_10307E7  +
cmp [edi] edx +
jz loc_10307E7  +
mov esi 6BEh +
mov edi offset aDynamicbuffer0 +
jmp loc_103083C  +
cmp [ebp+arg_10] edx +
jnz loc_1030800  +
cmp ebx edx +
jz loc_1030800  +
cmp edi edx +
jz loc_1030800  +
mov esi 6BFh +
mov edi offset aReturnedbuffer +
jmp loc_103083C  +
mov esi [ebp+arg_14] +
cmp esi edx +
jnz loc_103081B  +
lea ecx [ebp+var_4] +
mov esi 6C1h +
mov edi offset aNotNullCheck_7 +
call sub_102FD01  +
jmp loc_103088D  +
cmp [esi+24h] edx +
jz loc_103082C  +
mov esi 6C4h +
mov edi offset aContextReserve +
jmp loc_103083C  +
cmp dword ptr [esi+28h] 0FFFFFFFFh +
jz loc_103085D  +
mov esi 6C5h +
mov edi offset aContextReser_0 +
lea ecx [ebp+var_4] +
call sub_102FD01  +
mov [ebp+var_14] offset aDW7rtmBaseLs_0 +
mov [ebp+var_10] offset aRtlinitializes +
mov [ebp+var_C] esi +
mov [ebp+var_8] edi +
lea eax [ebp+var_14] +
jmp loc_10308A4  +
mov eax large fs:18h +
mov eax [eax+30h] +
push 100h  +
push edx  +
push dword ptr [eax+18h]  +
call ds:RtlAllocateHeap  +
mov [esi+24h] eax +
test eax eax +
jnz loc_10308AF  +
mov esi 6D3h +
mov edi offset aContextReser_1 +
mov [ebp+var_4] 0C0000017h +
mov [ebp+var_24] offset aDW7rtmBaseLs_0 +
mov [ebp+var_20] offset aRtlinitializes +
mov [ebp+var_1C] esi +
mov [ebp+var_18] edi +
lea eax [ebp+var_24] +
push eax  +
lea ecx [ebp+var_4] +
call sub_103D6FE  +
jmp loc_10308F3  +
and dword ptr [esi+8] 0 +
not eax  +
mov [esi+28h] eax +
mov eax [ebp+arg_4] +
mov [esi+0Ch] eax +
mov eax [ebp+arg_10] +
mov [esi+14h] ebx +
mov [esi+18h] edi +
mov [esi+1Ch] eax +
test ebx ebx +
jz loc_10308D3  +
mov [esi+10h] ebx +
jmp loc_10308D6  +
mov [esi+10h] edi +
test eax eax +
jz loc_10308DF  +
mov ecx [esi+10h] +
mov [eax] ecx +
mov eax [esi+10h] +
mov ecx [eax+8] +
mov [esi] ecx +
mov eax [eax+4] +
add eax ecx +
and [ebp+var_4] 0 +
mov [esi+4] eax +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
xor ebx ebx +
push edi  +
mov edi [ebp+arg_0] +
mov [esi] ebx +
mov [esi+4] ebx +
mov [esi+8] ebx +
cmp edi ebx +
jz loc_1030964  +
push edi  +
call ds:off_100740C  +
mov [esi+8] eax +
cmp eax ebx +
jnz loc_1030961  +
lea eax [ebp+var_10] +
mov ebx 0C0000017h +
push eax  +
lea ecx [ebp+arg_4] +
mov [ebp+arg_4] ebx +
mov [ebp+var_10] offset aDW7rtmBaseLs_0 +
mov [ebp+var_C] offset aRtlallocatelbl +
mov [ebp+var_8] 80Eh +
mov [ebp+var_4] offset aBlobBufferPuch +
call sub_103D6FE  +
jmp loc_1030964  +
mov [esi+4] edi +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov ecx [ebp+arg_14] +
push ebx  +
xor eax eax +
push esi  +
push edi  +
mov [ebp+var_4] 0C00000E5h +
cmp ecx eax +
jz loc_10309A2  +
mov edx [ebp+arg_0] +
mov [ecx] eax +
cmp edx eax +
jnz loc_10309B9  +
mov esi 915h +
mov edi offset aNotNullCheck_8 +
jmp loc_10309AC  +
mov esi 914h +
mov edi offset aNotNullCheck_9 +
lea ecx [ebp+var_4] +
call sub_102FD01  +
jmp loc_1030AEA  +
cmp [ebp+arg_4] eax +
jnz loc_10309CA  +
mov esi 916h +
mov edi offset aNotNullChec_10 +
jmp loc_10309AC  +
mov ecx [ebp+arg_8] +
cmp ecx eax +
jnz loc_10309DD  +
mov esi 917h +
mov edi offset aNotNullChec_11 +
jmp loc_10309AC  +
cmp [ebp+arg_C] eax +
jnz loc_10309EE  +
mov esi 918h +
mov edi offset aNotNullChec_12 +
jmp loc_10309AC  +
mov edi [edx+8] +
mov esi [edx] +
mov ebx [ecx+8] +
add esi edi +
mov [ebp+arg_0] edi +
mov edi [ecx] +
add edi ebx +
cmp [ebp+arg_10] eax +
jz loc_1030A8D  +
cmp [ebp+arg_0] esi +
jz loc_1030B0C  +
cmp ebx edi +
jz loc_1030A61  +
mov ecx [ebp+arg_0] +
mov edx esi +
call [ebp+arg_4]  +
mov [ebp+var_8] eax +
mov [ebp+var_4] edx +
cmp eax 0FFFFFFFFh +
jz loc_1030A76  +
mov [ebp+arg_0] edx +
mov edx edi +
mov ecx ebx +
call [ebp+arg_C]  +
mov [ebp+var_10] eax +
cmp eax 0FFFFFFFFh +
jz loc_1030A82  +
mov ecx [ebp+var_8] +
mov ebx edx +
call [ebp+arg_10]  +
mov ecx [ebp+var_10] +
mov [ebp+arg_8] eax +
call [ebp+arg_10]  +
push eax  +
push [ebp+arg_8]  +
call sub_10306A4  +
test eax eax +
jnz loc_1030B13  +
cmp [ebp+var_4] esi +
jnz loc_1030A11  +
cmp [ebp+arg_0] esi +
jz loc_1030B0C  +
cmp ebx edi +
jnz loc_1030A7A  +
xor eax eax +
inc eax  +
jmp loc_1030B13  +
test edx edx +
jl loc_1030A7B  +
int 3  +
mov esi 928h +
jmp loc_1030AE2  +
test edx edx +
jge loc_1030A7A  +
mov esi 929h +
jmp loc_1030AE2  +
cmp [ebp+arg_0] esi +
jz loc_1030B0C  +
cmp ebx edi +
jz loc_1030A61  +
mov ecx [ebp+arg_0] +
mov edx esi +
call [ebp+arg_4]  +
mov [ebp+var_8] eax +
mov [ebp+var_4] edx +
cmp eax 0FFFFFFFFh +
jz loc_1030ACE  +
mov [ebp+arg_0] edx +
mov edx edi +
mov ecx ebx +
call [ebp+arg_C]  +
cmp eax 0FFFFFFFFh +
jz loc_1030AD9  +
push eax  +
push [ebp+var_8]  +
mov ebx edx +
call sub_10306A4  +
test eax eax +
jnz loc_1030B13  +
cmp [ebp+var_4] esi +
jnz loc_1030A92  +
jmp loc_1030A61  +
test edx edx +
jge loc_1030A7A  +
mov esi 939h +
jmp loc_1030AE2  +
test edx edx +
jge loc_1030A7A  +
mov esi 93Ah +
mov [ebp+var_4] edx +
mov edi offset a__rv_ucscharac +
lea eax [ebp+var_18] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_18] offset aDW7rtmBaseLs_0 +
mov [ebp+var_14] offset aRtlcompareenco +
mov [ebp+var_10] esi +
mov [ebp+var_C] edi +
call sub_103D6FE  +
jmp loc_1030B1C  +
cmp ebx edi +
jz loc_1030B13  +
or eax 0FFFFFFFFh +
mov ecx [ebp+arg_14] +
and [ebp+var_4] 0 +
mov [ecx] eax +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
mov edx [ebp+arg_C] +
push esi  +
xor esi esi +
push edi  +
mov [ebp+var_14] 0C00000E5h +
mov [ebp+var_4] esi +
mov [ebp+var_8] esi +
mov [ebp+var_C] esi +
mov [ebp+var_10] esi +
cmp edx esi +
jz loc_1030B56  +
mov [edx] esi +
mov [edx+4] esi +
mov ecx [ebp+arg_0] +
cmp ecx esi +
jnz loc_1030B69  +
mov esi 966h +
mov edi offset aNotNullChec_13 +
jmp loc_1030BA9  +
call sub_10306EA  +
test al al +
jnz loc_1030B8A  +
lea ecx [ebp+var_14] +
call sub_102FD01  +
mov [ebp+var_1C] 967h +
mov [ebp+var_18] offset aRtlislblobvali +
jmp loc_1030BB7  +
cmp [ebp+arg_4] esi +
jnz loc_1030B9B  +
mov esi 968h +
mov edi offset aNotNullChec_14 +
jmp loc_1030BA9  +
cmp edx esi +
jnz loc_1030BD9  +
mov esi 969h +
mov edi offset aNotNullChec_15 +
lea ecx [ebp+var_14] +
call sub_102FD01  +
mov [ebp+var_1C] esi +
mov [ebp+var_18] edi +
lea eax [ebp+var_24] +
push eax  +
lea ecx [ebp+var_14] +
mov [ebp+var_20] offset aRtlhashencoded +
mov [ebp+var_24] offset aDW7rtmBaseLs_0 +
call sub_103D6FE  +
mov eax [ebp+var_14] +
jmp loc_1030D2D  +
cmp [ebp+arg_4] offset loc_10320AE +
mov eax [ecx] +
push ebx  +
mov ebx [ecx+8] +
mov [ebp+arg_0] ebx +
lea esi [eax+ebx] +
jnz loc_1030D4E  +
test al 1 +
jnz loc_1030D4E  +
test bl 1 +
jnz loc_1030D4E  +
cmp [ebp+arg_8] offset loc_1032A73 +
push 2  +
pop edi  +
push 7Fh  +
mov eax ebx +
pop edx  +
jnz loc_1030D33  +
cmp ebx esi +
jz loc_1030CE0  +
movzx ecx word ptr [eax] +
add eax edi +
cmp cx dx +
ja loc_1030D33  +
lea ebx [ecx-41h] +
cmp bx 19h +
ja loc_1030C3A  +
add ecx 20h +
mov ebx [ebp+var_4] +
imul ebx ebx +
movzx ecx cx +
add ebx ecx +
mov [ebp+var_4] ebx +
cmp eax esi +
jz loc_1030CE0  +
movzx ecx word ptr [eax] +
add eax edi +
cmp cx dx +
ja loc_1030D33  +
lea ebx [ecx-41h] +
cmp bx 19h +
ja loc_1030C6D  +
add ecx 20h +
mov ebx [ebp+var_8] +
imul ebx ebx +
movzx ecx cx +
add ebx ecx +
mov [ebp+var_8] ebx +
cmp eax esi +
jz loc_1030CE0  +
movzx ecx word ptr [eax] +
add eax edi +
cmp cx dx +
ja loc_1030D33  +
lea ebx [ecx-41h] +
cmp bx 19h +
ja loc_1030C9C  +
add ecx 20h +
mov ebx [ebp+var_C] +
imul ebx ebx +
movzx ecx cx +
add ebx ecx +
mov [ebp+var_C] ebx +
cmp eax esi +
jz loc_1030CE0  +
movzx ecx word ptr [eax] +
add eax edi +
cmp cx dx +
ja loc_1030D33  +
lea ebx [ecx-41h] +
cmp bx 19h +
ja loc_1030CC7  +
add ecx 20h +
mov ebx [ebp+var_10] +
imul ebx ebx +
movzx ecx cx +
add ebx ecx +
mov [ebp+var_10] ebx +
cmp eax esi +
jnz loc_1030C20  +
push 1E5h  +
push 0FFFFFD27h  +
xor esi esi +
push esi  +
push [ebp+var_4]  +
call __allmul  +
push 0FFFFFFDCh  +
push 51h  +
push esi  +
push [ebp+var_8]  +
mov edi eax +
mov ebx edx +
call __allmul  +
push 1  +
push 0FFFFFFF7h  +
push esi  +
push [ebp+var_C]  +
add edi eax +
adc ebx edx +
call __allmul  +
add edi eax +
adc ebx edx +
xor eax eax +
add edi [ebp+var_10] +
adc ebx eax +
mov eax [ebp+arg_C] +
mov [eax] edi +
mov [eax+4] ebx +
xor eax eax +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 10h  +
cmp [ebp+arg_8] 0 +
jz loc_1030EAC  +
mov ebx [ebp+arg_0] +
xor eax eax +
mov [ebp+var_4] eax +
mov [ebp+var_8] eax +
mov [ebp+var_C] eax +
mov [ebp+var_10] eax +
cmp [ebp+arg_8] 0 +
jz loc_1030EC5  +
cmp ebx esi +
jz loc_1030CE0  +
or ebx 0FFFFFFFFh +
mov ecx [ebp+arg_0] +
mov edx esi +
call [ebp+arg_4]  +
mov edi edx +
cmp eax ebx +
jz loc_1030EB9  +
mov ecx eax +
call [ebp+arg_8]  +
mov ecx [ebp+var_4] +
imul ecx ecx +
add eax ecx +
mov [ebp+var_4] eax +
cmp edi esi +
jz loc_1030CE0  +
mov edx esi +
mov ecx edi +
call [ebp+arg_4]  +
mov edi edx +
cmp eax ebx +
jz loc_1030EB9  +
mov ecx eax +
call [ebp+arg_8]  +
mov ecx [ebp+var_8] +
imul ecx ecx +
add eax ecx +
mov [ebp+var_8] eax +
cmp edi esi +
jz loc_1030CE0  +
mov edx esi +
mov ecx edi +
call [ebp+arg_4]  +
mov edi edx +
cmp eax ebx +
jz loc_1030EB9  +
mov ecx eax +
call [ebp+arg_8]  +
mov ecx [ebp+var_C] +
imul ecx ecx +
add eax ecx +
mov [ebp+var_C] eax +
cmp edi esi +
jz loc_1030CE0  +
mov edx esi +
mov ecx edi +
call [ebp+arg_4]  +
mov edi edx +
cmp eax ebx +
jz loc_1030EB9  +
mov ecx eax +
mov [ebp+arg_0] edi +
call [ebp+arg_8]  +
mov ecx [ebp+var_10] +
imul ecx ecx +
add eax ecx +
mov [ebp+var_10] eax +
cmp edi esi +
jnz loc_1030D5F  +
jmp loc_1030CE0  +
movzx ecx word ptr [eax] +
add eax edi +
cmp cx dx +
ja loc_1030D3D  +
mov ebx [ebp+var_4] +
imul ebx ebx +
movzx ecx cx +
add ebx ecx +
mov [ebp+var_4] ebx +
cmp eax esi +
jz loc_1030CE0  +
movzx ecx word ptr [eax] +
add eax edi +
cmp cx dx +
ja loc_1030D3D  +
mov ebx [ebp+var_8] +
imul ebx ebx +
movzx ecx cx +
add ebx ecx +
mov [ebp+var_8] ebx +
cmp eax esi +
jz loc_1030CE0  +
movzx ecx word ptr [eax] +
add eax edi +
cmp cx dx +
ja loc_1030D3D  +
mov ebx [ebp+var_C] +
imul ebx ebx +
movzx ecx cx +
add ebx ecx +
mov [ebp+var_C] ebx +
cmp eax esi +
jz loc_1030CE0  +
movzx ecx word ptr [eax] +
add eax edi +
cmp cx dx +
ja loc_1030D3D  +
mov ebx [ebp+var_10] +
imul ebx ebx +
movzx ecx cx +
add ebx ecx +
mov [ebp+var_10] ebx +
cmp eax esi +
jnz loc_1030E18  +
jmp loc_1030CE0  +
test edi edi +
jl loc_1030EBE  +
int 3  +
mov eax edi +
jmp loc_1030D2C  +
cmp ebx esi +
jz loc_1030CE0  +
or ebx 0FFFFFFFFh +
mov ecx [ebp+arg_0] +
mov edi [ebp+arg_4] +
mov edx esi +
call edi  +
mov ecx edx +
cmp eax ebx +
jz loc_1030F5C  +
mov edx [ebp+var_4] +
imul edx edx +
add edx eax +
mov [ebp+var_4] edx +
cmp ecx esi +
jz loc_1030CE0  +
mov edx esi +
call edi  +
mov ecx edx +
cmp eax ebx +
jz loc_1030F5C  +
mov edx [ebp+var_8] +
imul edx edx +
add edx eax +
mov [ebp+var_8] edx +
cmp ecx esi +
jz loc_1030CE0  +
mov edx esi +
call edi  +
mov ecx edx +
cmp eax ebx +
jz loc_1030F5C  +
mov edx [ebp+var_C] +
imul edx edx +
add edx eax +
mov [ebp+var_C] edx +
cmp ecx esi +
jz loc_1030CE0  +
mov edx esi +
call edi  +
cmp eax ebx +
jz loc_1030F6B  +
mov ecx [ebp+var_10] +
imul ecx ecx +
add ecx eax +
mov [ebp+arg_0] edx +
mov [ebp+var_10] ecx +
cmp edx esi +
jnz loc_1030ED0  +
jmp loc_1030CE0  +
test ecx ecx +
jge loc_1030EBD  +
mov eax ecx +
jmp loc_1030D2C  +
test edx edx +
jge loc_1030EBD  +
mov eax edx +
jmp loc_1030D2C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
mov esi edx +
push edi  +
mov edx ecx +
mov [ebp+var_4] 0C00000E5h +
test esi esi +
jnz loc_1030FAD  +
mov esi 0A74h +
mov edi offset aNotNullCheck_3 +
lea ecx [ebp+var_4] +
call sub_102FD01  +
jmp loc_103100E  +
mov ecx esi +
call sub_10306EA  +
test al al +
jnz loc_1030FC4  +
mov esi 0A75h +
mov edi offset aRtlislblobva_0 +
jmp loc_1030FE9  +
test edx edx +
jnz loc_1030FD4  +
mov esi 0A76h +
mov edi offset aNotNullCheck_6 +
jmp loc_1030FA3  +
mov ecx edx +
call sub_10306EA  +
test al al +
jnz loc_1030FF3  +
mov esi 0A77h +
mov edi offset aRtlislblobva_1 +
lea ecx [ebp+var_4] +
call sub_102FD01  +
jmp loc_103100E  +
mov edi [esi] +
mov eax [esi+4] +
mov ebx [edx] +
sub eax edi +
cmp eax ebx +
jnb loc_1031030  +
mov esi 0A7Fh +
xor edi edi +
mov [ebp+var_4] 80000005h +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_14] offset aDW7rtmBaseLs_0 +
mov [ebp+var_10] offset aRtlappendlblob +
mov [ebp+var_C] esi +
mov [ebp+var_8] edi +
call sub_103D6FE  +
jmp loc_103104A  +
mov eax [esi+8] +
push ebx  +
push dword ptr [edx+8]  +
add eax edi +
push eax  +
call memcpy  +
add ebx edi +
add esp 0Ch +
and [ebp+var_4] 0 +
mov [esi] ebx +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
xor esi esi +
cmp [ebp+arg_10] esi +
jbe loc_1031094  +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_C]  +
mov eax [ebp+arg_14] +
push [ebp+arg_18]  +
push dword ptr [eax+esi*4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1030972  +
test eax eax +
jl loc_103109B  +
cmp [ebp+var_4] 0 +
jz loc_1031094  +
inc esi  +
cmp esi [ebp+arg_10] +
jb loc_1031065  +
mov eax [ebp+arg_1C] +
mov [eax] esi +
xor eax eax +
pop esi  +
leave   +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
push edx  +
push esi  +
call sub_1030750  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
cmp [ebp+arg_0] 0 +
push esi  +
push edi  +
mov [ebp+var_4] 0C00000E5h +
jz loc_10310E9  +
mov esi 82h +
mov edi offset aValidFlagsChec +
jmp loc_1031119  +
mov esi [ebp+arg_8] +
test esi esi +
jnz loc_1031104  +
lea ecx [ebp+var_4] +
mov esi 83h +
mov edi offset aNotNullChec_13 +
call sub_102FD01  +
jmp loc_103117D  +
mov ecx esi +
call sub_10306EA  +
test al al +
jnz loc_1031123  +
mov esi 84h +
mov edi offset aRtlislblobvali +
lea ecx [ebp+var_4] +
call sub_102FD01  +
jmp loc_103117D  +
mov eax [esi+8] +
mov edi [ebp+arg_4] +
test eax eax +
jz loc_103115E  +
push eax  +
push edi  +
call ds:off_1007414  +
test eax eax +
jnz loc_1031145  +
mov esi 89h +
mov edi offset aTempRtlrealloc +
jmp loc_1031176  +
mov [esi+8] eax +
mov [esi+4] edi +
cmp [esi] edi +
jbe loc_1031151  +
mov [esi] edi +
and [ebp+var_4] 0 +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
push edi  +
call ds:off_100740C  +
mov [esi+8] eax +
test eax eax +
jnz loc_1031148  +
mov esi 8Eh +
mov edi offset aBlobBufferPuch +
mov [ebp+var_4] 0C0000017h +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_14] offset aDW7rtmBaseLs_0 +
mov [ebp+var_10] offset aRtlreallocat_0 +
mov [ebp+var_C] esi +
mov [ebp+var_8] edi +
call sub_103D6FE  +
jmp loc_1031155  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
mov esi edx +
push edi  +
mov [ebp+var_4] 0C00000E5h +
test esi esi +
jz loc_10311F9  +
and dword ptr [esi] 0 +
test ecx ecx +
jnz loc_1031205  +
mov esi 0B9h +
mov edi offset aNotNullCheck_6 +
lea ecx [ebp+var_4] +
call sub_102FD01  +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_14] offset aDW7rtmBaseLs_0 +
mov [ebp+var_10] offset aRtlcopylblob +
mov [ebp+var_C] esi +
mov [ebp+var_8] edi +
call sub_103D6FE  +
jmp loc_1031285  +
mov esi 0B8h +
mov edi offset aNotNullCheck_3 +
jmp loc_10311CC  +
mov eax [esi+4] +
mov edx [esi+8] +
push ebx  +
test eax eax +
jz loc_1031220  +
test edx edx +
jnz loc_1031220  +
mov esi 0BCh +
mov edi offset aDestinationmax +
jmp loc_1031249  +
mov edi [ecx] +
mov ebx [ecx+8] +
call sub_10306EA  +
test al al +
jnz loc_103123A  +
mov esi 0BFh +
mov edi offset aRtlislblobva_2 +
jmp loc_1031249  +
cmp [esi+4] edi +
jnb loc_1031273  +
mov esi 0C0h +
mov edi offset aDestinationm_0 +
lea ecx [ebp+var_4] +
call sub_102FD01  +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_14] offset aDW7rtmBaseLs_0 +
mov [ebp+var_10] offset aRtlcopylblob +
mov [ebp+var_C] esi +
mov [ebp+var_8] edi +
call sub_103D6FE  +
jmp loc_1031284  +
push edi  +
push ebx  +
push edx  +
call memcpy  +
add esp 0Ch +
and [ebp+var_4] 0 +
mov [esi] edi +
pop ebx  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
mov [ebp+var_8] edx +
mov esi ecx +
mov [ebp+var_4] 0C00000E5h +
cmp edx ebx +
jz loc_10312D4  +
mov [edx] ebx +
mov [edx+4] ebx +
mov [edx+8] ebx +
cmp esi ebx +
jnz loc_10312E0  +
mov esi 0EEh +
mov edi offset aNotNullCheck_6 +
lea ecx [ebp+var_4] +
call sub_102FD01  +
mov [ebp+var_1C] esi +
mov [ebp+var_18] edi +
jmp loc_10312FF  +
mov esi 0EDh +
mov edi offset aNotNullCheck_3 +
jmp loc_10312C4  +
call sub_10306EA  +
test al al +
jnz loc_103131B  +
lea ecx [ebp+var_4] +
call sub_102FD01  +
mov [ebp+var_1C] 0EFh +
mov [ebp+var_18] offset aRtlislblobva_2 +
lea eax [ebp+var_24] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_20] offset aRtlduplicatelb +
mov [ebp+var_24] offset aDW7rtmBaseLs_0 +
call sub_103D6FE  +
jmp loc_103137B  +
mov eax [esi] +
cmp eax ebx +
jz loc_1031378  +
lea ecx [ebp+var_14] +
push ecx  +
push eax  +
mov [ebp+var_10] ebx +
mov [ebp+var_14] ebx +
mov [ebp+var_C] ebx +
call sub_1030902  +
cmp eax ebx +
jge loc_103133D  +
lea ecx [ebp+var_14] +
jmp loc_103134E  +
lea edx [ebp+var_14] +
mov ecx esi +
call sub_10311A4  +
cmp eax ebx +
lea ecx [ebp+var_14] +
jge loc_1031358  +
mov [ebp+var_4] eax +
call sub_102D479  +
jmp loc_103137B  +
lea esi [ebp+var_14] +
lea edi [ebp+var_20] +
movs   +
movs   +
movs   +
mov edi [ebp+var_8] +
lea esi [ebp+var_20] +
movs   +
movs   +
mov [ebp+var_10] ebx +
mov [ebp+var_14] ebx +
mov [ebp+var_C] ebx +
movs   +
call sub_102D479  +
mov [ebp+var_4] ebx +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_18] +
xor esi esi +
mov [ebp+var_4] 0C00000E5h +
cmp edi esi +
jz loc_10313AB  +
mov [edi] esi +
mov [edi+4] esi +
mov [edi+8] esi +
mov edx [ebp+arg_1C] +
cmp edx esi +
jz loc_10313BA  +
mov [edx] esi +
mov [edx+4] esi +
mov [edx+8] esi +
mov ebx [ebp+arg_0] +
test ebx 0FFFFFFF8h +
jz loc_10313D4  +
mov esi 1DAh +
mov edi offset aValidFlagsChec +
jmp loc_10316B0  +
cmp ebx esi +
jnz loc_10313E7  +
mov esi 1DCh +
mov edi offset aFlags0 +
jmp loc_10316B0  +
lea eax [ebx-1] +
test eax ebx +
jz loc_10313FD  +
mov esi 1DDh +
mov edi offset aFlagsFlags10 +
jmp loc_10316B0  +
mov ecx [ebp+arg_4] +
cmp ecx esi +
jz loc_10316A6  +
call sub_10306EA  +
test al al +
jz loc_10316A6  +
cmp edi esi +
jnz loc_1031430  +
mov edi 1DFh +
mov esi offset aNotNullChec_16 +
lea ecx [ebp+var_4] +
call sub_102FD01  +
jmp loc_103169E  +
cmp edx esi +
jnz loc_1031440  +
mov edi 1E0h +
mov esi offset aNotNullChec_17 +
jmp loc_1031423  +
cmp [ebp+arg_10] esi +
jnz loc_1031465  +
mov eax [ebp+arg_14] +
add eax 0FFFF2800h +
cmp eax 7FFh +
ja loc_1031465  +
mov edi 1E3h +
mov [ebp+var_4] 0C0000161h +
jmp loc_103169E  +
mov edx [ecx] +
mov eax ebx +
mov ebx [ecx+8] +
shr eax 2 +
and al 1 +
mov byte ptr [ebp+arg_4+3] al +
mov [ebp+var_8] edx +
mov [ebp+var_2C] esi +
mov [ebp+var_28] edx +
mov [ebp+var_24] ebx +
mov [ebp+var_1C] esi +
mov [ebp+var_20] esi +
mov [ebp+var_18] esi +
mov ecx ebx +
lea edi [ebx+edx] +
cmp [ebp+arg_10] esi +
jz loc_1031544  +
cmp ebx edi +
jz loc_1031500  +
jmp loc_10314A0  +
mov ecx [ebp+var_4] +
mov edx edi +
mov [ebp+var_C] ecx +
call [ebp+arg_8]  +
mov [ebp+var_10] edx +
cmp eax 0FFFFFFFFh +
jz loc_1031535  +
cmp [ebp+arg_C] 0 +
mov [ebp+var_4] edx +
jz loc_10314C2  +
mov ecx eax +
call [ebp+arg_C]  +
mov edx [ebp+arg_14] +
mov ecx eax +
call [ebp+arg_10]  +
test al al +
setnz al  +
cmp al byte ptr [ebp+arg_4+3] +
jz loc_10314F2  +
mov eax [ebp+var_C] +
sub eax ebx +
mov [ebp+var_2C] eax +
mov eax [ebp+var_10] +
mov esi edi +
sub esi eax +
test byte ptr [ebp+arg_0] 1 +
mov [ebp+var_18] eax +
mov [ebp+var_20] esi +
mov [ebp+var_1C] esi +
jnz loc_1031503  +
cmp [ebp+var_10] edi +
jnz loc_103149D  +
cmp [ebp+var_2C] 0 +
jnz loc_1031510  +
mov edx [ebp+var_8] +
mov [ebp+var_2C] edx +
xor eax eax +
cmp [ebp+var_2C] eax +
jnz loc_1031510  +
mov [ebp+var_24] eax +
mov [ebp+var_28] eax +
test esi esi +
jnz loc_103151A  +
and [ebp+var_18] esi +
and [ebp+var_1C] esi +
mov edi [ebp+arg_18] +
and [ebp+var_4] 0 +
lea esi [ebp+var_2C] +
movs   +
movs   +
movs   +
mov edi [ebp+arg_1C] +
lea esi [ebp+var_20] +
movs   +
movs   +
movs   +
jmp loc_10316D8  +
test edx edx +
jl loc_103153A  +
int 3  +
mov edi 207h +
jmp loc_1031696  +
mov edx [ebp+arg_14] +
mov [ebp+arg_10] edx +
cmp [ebp+arg_C] esi +
jz loc_103155C  +
mov ecx edx +
call [ebp+arg_C]  +
mov [ebp+arg_10] eax +
mov al byte ptr [ebp+arg_4+3] +
mov ecx ebx +
cmp [ebp+arg_10] 7Fh +
jnb loc_103161C  +
cmp [ebp+arg_8] offset loc_10320AE +
jnz loc_103161C  +
test al al +
jnz loc_103161C  +
xor eax eax +
cmp [ebp+arg_10] eax +
jz loc_103161C  +
mov edx edi +
sub edx ebx +
test dl 1 +
jnz loc_103161C  +
cmp [ebp+arg_C] eax +
jnz loc_103161C  +
test bl 1 +
jnz loc_103161C  +
test byte ptr [ebp+arg_0] 2 +
jz loc_10315E4  +
cmp [ebp+var_8] eax +
jz loc_103150A  +
mov eax edi +
cmp edi ebx +
jz loc_103167E  +
dec eax  +
dec eax  +
movzx ecx word ptr [eax] +
cmp ecx [ebp+arg_10] +
jz loc_10315CA  +
cmp eax ebx +
jnz loc_10315BA  +
jmp loc_10315E0  +
mov ecx eax +
sub ecx ebx +
inc eax  +
inc eax  +
sub edi eax +
mov esi edi +
mov [ebp+var_2C] ecx +
mov [ebp+var_18] eax +
mov [ebp+var_20] esi +
mov [ebp+var_1C] esi +
cmp eax ebx +
jmp loc_1031614  +
cmp ebx edi +
jz loc_103167E  +
movzx eax word ptr [ecx] +
inc ecx  +
inc ecx  +
cmp eax [ebp+arg_10] +
jz loc_10315FC  +
cmp ecx edi +
jnz loc_10315EC  +
jmp loc_1031612  +
mov esi edi +
sub esi ecx +
mov [ebp+var_18] ecx +
dec ecx  +
dec ecx  +
mov eax ecx +
sub eax ebx +
mov [ebp+var_20] esi +
mov [ebp+var_1C] esi +
mov [ebp+var_2C] eax +
cmp ecx edi +
jnz loc_1031503  +
jmp loc_103167E  +
cmp ebx edi +
jz loc_103167E  +
jmp loc_1031625  +
mov ecx [ebp+var_4] +
mov edx edi +
mov [ebp+arg_14] ecx +
call [ebp+arg_8]  +
mov [ebp+var_10] edx +
cmp eax 0FFFFFFFFh +
jz loc_1031689  +
cmp [ebp+arg_C] 0 +
mov [ebp+var_4] edx +
jz loc_1031646  +
mov ecx eax +
call [ebp+arg_C]  +
mov edx [ebp+var_10] +
cmp eax [ebp+arg_10] +
setz al  +
cmp al byte ptr [ebp+arg_4+3] +
jz loc_1031670  +
mov eax [ebp+arg_14] +
mov esi edi +
sub esi edx +
sub eax ebx +
test byte ptr [ebp+arg_0] 1 +
mov [ebp+var_2C] eax +
mov [ebp+var_18] edx +
mov [ebp+var_20] esi +
mov [ebp+var_1C] esi +
jnz loc_1031503  +
cmp edx edi +
jnz loc_1031622  +
cmp [ebp+var_2C] 0 +
jnz loc_1031510  +
mov eax [ebp+var_8] +
mov [ebp+var_2C] eax +
jmp loc_1031503  +
test edx edx +
jge loc_1031539  +
mov edi 27Fh +
mov [ebp+var_4] edx +
mov esi offset a__rv_ucscharac +
mov [ebp+var_28] edi +
mov [ebp+var_24] esi +
jmp loc_10316BE  +
mov esi 1DEh +
mov edi offset aBlob0Rtlislblo +
lea ecx [ebp+var_4] +
call sub_102FD01  +
mov [ebp+var_28] esi +
mov [ebp+var_24] edi +
lea eax [ebp+var_30] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_30] offset aDW7rtmBaseLs_0 +
mov [ebp+var_2C] offset aRtlsplitencode +
call sub_103D6FE  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 20h  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+28h] +
mov eax [esi+24h] +
not ecx  +
cmp eax ecx +
jz loc_10316F9  +
int 3  +
push eax  +
mov eax large fs:18h +
mov eax [eax+30h] +
push 0  +
push dword ptr [eax+18h]  +
call ds:RtlFreeHeap  +
and dword ptr [esi+24h] 0 +
and dword ptr [esi+28h] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
mov edx [ebp+arg_14] +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
mov [ebp+var_4] 0C00000E5h +
mov [ebp+var_20] ebx +
mov [ebp+var_24] ebx +
mov [ebp+var_1C] ebx +
mov [ebp+var_C] ebx +
mov [ebp+var_14] ebx +
mov [ebp+var_10] ebx +
mov [ebp+var_18] ebx +
cmp edx ebx +
jz loc_103174F  +
mov [edx] ebx +
mov esi [ebp+arg_C] +
mov ecx esi +
call sub_10306EA  +
test al al +
jnz loc_103176C  +
mov esi 874h +
mov edi offset aRtlislblobva_1 +
jmp loc_1031843  +
mov ecx edx +
call sub_10306EA  +
test al al +
jnz loc_1031786  +
mov esi 875h +
mov edi offset aRtlislblobva_0 +
jmp loc_1031843  +
test [ebp+arg_0] 0FFFFFFF0h +
jz loc_103179E  +
mov esi 87Bh +
mov edi offset aValidFlagsChec +
jmp loc_1031843  +
mov eax [ebp+arg_0] +
and eax 9 +
mov [ebp+arg_C] eax +
jz loc_10317C2  +
and eax 9 +
lea ecx [eax-1] +
test ecx eax +
jz loc_10317C2  +
mov esi 87Eh +
mov edi offset aNoMoreThanOneF +
jmp loc_1031843  +
mov eax [ebp+arg_0] +
and eax 6 +
cmp al 6 +
jnz loc_10317D8  +
mov esi 884h +
mov edi offset aFlags0x0000000 +
jmp loc_1031843  +
lea edi [ebp+var_30] +
movs   +
lea eax [ebp+var_C] +
push eax  +
push [ebp+arg_8]  +
movs   +
push 1  +
movs   +
call sub_10322B2  +
cmp eax ebx +
jge loc_10317F8  +
mov [ebp+var_4] eax +
jmp loc_1031974  +
cmp [ebp+var_C] ebx +
jnz loc_1031809  +
mov esi 88Fh +
mov edi offset aDecoder0 +
jmp loc_1031843  +
lea eax [ebp+var_18] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+arg_10]  +
push 1  +
call sub_10328DF  +
cmp eax ebx +
jl loc_10317F0  +
cmp [ebp+var_14] ebx +
jnz loc_1031834  +
mov esi 899h +
mov edi offset aEncoder0 +
jmp loc_1031843  +
cmp [ebp+var_10] ebx +
jnz loc_1031850  +
mov esi 89Ah +
mov edi offset aEncodingsizer0 +
lea ecx [ebp+var_4] +
call sub_102FD01  +
jmp loc_1031AA1  +
cmp [ebp+arg_C] ebx +
jz loc_10318D1  +
mov eax [ebp+var_28] +
mov ecx [ebp+var_30] +
xor esi esi +
test byte ptr [ebp+arg_0] 2 +
mov [ebp+arg_C] eax +
lea edi [ecx+eax] +
jz loc_1031872  +
mov ecx [ebp+var_18] +
cmp ecx ebx +
jz loc_1031872  +
mov esi [ecx] +
cmp [ebp+arg_4] ebx +
jnz loc_10319B3  +
cmp eax edi +
jnb loc_10318B5  +
mov ecx [ebp+arg_C] +
mov edx edi +
call [ebp+var_C]  +
mov ebx edx +
cmp eax 0FFFFFFFFh +
jz loc_1031986  +
mov ecx eax +
mov [ebp+arg_C] ebx +
call [ebp+var_10]  +
lea ecx [eax+esi] +
cmp ecx esi +
jb loc_103199D  +
cmp ecx eax +
jb loc_103199D  +
mov esi ecx +
cmp ebx edi +
jb loc_103187F  +
xor ebx ebx +
test byte ptr [ebp+arg_0] 8 +
jz loc_1031A04  +
push [ebp+arg_14]  +
push esi  +
push ebx  +
call sub_10310C6  +
cmp eax ebx +
jl loc_10317F0  +
mov ebx [ebp+arg_14] +
test byte ptr [ebp+arg_0] 2 +
jz loc_10318F0  +
mov ecx [ebp+var_18] +
test ecx ecx +
jz loc_10318F0  +
mov edx ebx +
call sub_1030F7F  +
test eax eax +
jl loc_10317F0  +
mov esi [ebx] +
add esi [ebx+8] +
mov eax [ebp+var_28] +
mov edi [ebx+4] +
mov ecx [ebp+var_30] +
add ecx eax +
add edi esi +
cmp [ebp+arg_4] 0 +
mov [ebp+arg_C] eax +
mov [ebp+arg_8] ecx +
jnz loc_1031A41  +
cmp eax ecx +
jz loc_1031948  +
mov edx [ebp+arg_8] +
mov ecx [ebp+arg_C] +
call [ebp+var_C]  +
mov [ebp+var_4] edx +
cmp eax 0FFFFFFFFh +
jz loc_1031A1E  +
mov [ebp+arg_C] edx +
push edi  +
mov edx esi +
mov ecx eax +
call [ebp+var_14]  +
test eax eax +
jz loc_1031A32  +
mov esi eax +
mov eax [ebp+arg_8] +
cmp [ebp+var_4] eax +
jnz loc_1031916  +
sub esi [ebx+8] +
test byte ptr [ebp+arg_0] 1 +
mov [ebx] esi +
jz loc_1031970  +
lea esi [ebp+var_24] +
lea edi [ebp+var_30] +
movs   +
movs   +
movs   +
mov edi [ebp+arg_14] +
lea esi [ebp+var_30] +
movs   +
movs   +
xor eax eax +
mov [ebp+var_20] eax +
mov [ebp+var_24] eax +
mov [ebp+var_1C] eax +
movs   +
and [ebp+var_4] 0 +
lea ecx [ebp+var_24] +
call sub_102D479  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
test ebx ebx +
jl loc_103198B  +
int 3  +
mov esi 8ADh +
mov edi offset a__rv_ucscharac +
mov [ebp+var_4] ebx +
jmp loc_1031AA1  +
mov esi 8AEh +
mov edi offset aBuclRtlAddin_0 +
mov [ebp+var_4] 0C0000095h +
jmp loc_1031AA1  +
cmp eax edi +
jnb loc_10318B5  +
mov ecx [ebp+arg_C] +
mov edx edi +
call [ebp+var_C]  +
mov ebx edx +
cmp eax 0FFFFFFFFh +
jz loc_10319ED  +
mov ecx eax +
mov [ebp+arg_C] ebx +
call [ebp+arg_4]  +
mov ecx eax +
call [ebp+var_10]  +
lea ecx [eax+esi] +
cmp ecx esi +
jb loc_10319F8  +
cmp ecx eax +
jb loc_10319F8  +
mov esi ecx +
cmp ebx edi +
jb loc_10319BB  +
jmp loc_10318B3  +
test ebx ebx +
jge loc_103198A  +
mov esi 8B6h +
jmp loc_1031990  +
mov esi 8B7h +
mov edi offset aBuclRtlAddin_1 +
jmp loc_10319A7  +
lea eax [ebp+var_24] +
push eax  +
push esi  +
call sub_1030902  +
cmp eax ebx +
jl loc_10317F0  +
lea ebx [ebp+var_24] +
jmp loc_10318D4  +
test edx edx +
jge loc_103198A  +
mov esi 8E2h +
mov edi offset a__rv_ucscharac +
jmp loc_1031A9E  +
test edx edx +
jge loc_103198A  +
mov esi 8E3h +
jmp loc_1031A99  +
cmp eax ecx +
jz loc_1031948  +
mov edx [ebp+arg_8] +
mov ecx [ebp+arg_C] +
call [ebp+var_C]  +
mov [ebp+var_4] edx +
cmp eax 0FFFFFFFFh +
jz loc_1031A7D  +
mov ecx eax +
mov [ebp+arg_C] edx +
call [ebp+arg_4]  +
push edi  +
mov edx esi +
mov ecx eax +
call [ebp+var_14]  +
test eax eax +
jz loc_1031A8C  +
mov esi eax +
mov eax [ebp+arg_8] +
cmp [ebp+var_4] eax +
jnz loc_1031A49  +
jmp loc_1031948  +
test edx edx +
jge loc_103198A  +
mov esi 8EBh +
jmp loc_1031A2B  +
test edx edx +
jge loc_103198A  +
mov esi 8EDh +
mov edi offset a__rv_newcursor +
mov [ebp+var_4] edx +
lea ecx [ebp+var_24] +
call sub_102D479  +
lea eax [ebp+var_34] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_34] offset aDW7rtmBaseLs_0 +
mov [ebp+var_30] offset aRtltranscodelb +
mov [ebp+var_2C] esi +
mov [ebp+var_28] edi +
call sub_103D6FE  +
jmp loc_103197C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+arg_0] +
mov ecx 1000h +
mov [ebp+arg_0] eax +
cmp eax ecx +
jnb loc_1031AEF  +
mov eax ecx +
mov [ebp+arg_0] eax +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
cmp eax [ebp+arg_4] +
jnb loc_1031B68  +
mov esi 200000h +
cmp eax 400000h +
jnb loc_1031B22  +
push 2  +
pop ecx  +
mul  ecx +
push edx  +
push eax  +
lea edx [ebp+arg_0] +
lea ecx [ebp+arg_8] +
call sub_1030723  +
cmp [ebp+arg_8] 0 +
jl loc_1031B36  +
mov eax [ebp+arg_0] +
jmp loc_1031B2F  +
mov ecx edi +
sub ecx eax +
cmp ecx esi +
jb loc_1031B66  +
add eax esi +
mov [ebp+arg_0] eax +
cmp eax [ebp+arg_4] +
jb loc_1031AFE  +
jmp loc_1031B68  +
mov esi [ebp+arg_8] +
lea eax [ebp+var_10] +
push eax  +
lea ecx [ebp+arg_4] +
mov [ebp+arg_4] esi +
mov [ebp+var_10] offset aDW7rtmBaseLs_0 +
mov [ebp+var_C] offset aRtlpsmartlblob +
mov [ebp+var_8] 70Dh +
mov [ebp+var_4] offset aBuclRtlMultipl +
call sub_103D6FE  +
jmp loc_1031B75  +
mov eax edi +
cmp eax edi +
jbe loc_1031B6E  +
mov eax edi +
mov ecx [ebp+arg_C] +
mov [ecx] eax +
xor esi esi +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
push esi  +
mov esi edx +
xor edx edx +
push edi  +
mov [ebp-0Ch] ecx +
mov dword ptr [ebp-4] 0C00000E5h +
cmp ecx edx +
jnz loc_1031BB6  +
mov esi 73Fh +
mov edi offset aNotNullChec_18 +
lea ecx [ebp-4] +
call sub_102FD01  +
jmp loc_1031C8C  +
call sub_10306EA  +
test al al +
jnz loc_1031BDA  +
lea ecx [ebp-4] +
call sub_102FD01  +
mov dword ptr [ebp-14h] 740h +
mov dword ptr [ebp-10h] offset aRtlislblobva_3 +
jmp loc_1031C92  +
cmp esi edx +
jnz loc_1031BEA  +
mov esi 741h +
mov edi offset aNotNullCheck_7 +
jmp loc_1031BA9  +
***
mov edi [esi] +
mov eax [esi+4] +
mov ebx [ecx] +
sub eax edi +
cmp ebx eax +
jbe loc_1031D51  +
cmp [esi+18h] edx +
jnz loc_1031C13  +
mov esi 74Ch +
mov edi offset aContextDynamic +
mov dword ptr [ebp-4] 0C0000023h +
jmp loc_1031C8C  +
mov eax [esi+10h] +
mov eax [eax] +
lea edi [eax+ebx] +
mov [ebp-14h] edx +
mov [ebp-18h] edx +
mov [ebp-10h] edx +
cmp edi ebx +
jb loc_1031C2C  +
cmp edi eax +
jnb loc_1031C3F  +
mov esi 753h +
mov edi offset aBuclRtlAddSize +
mov dword ptr [ebp-4] 0C0000095h +
jmp loc_1031C84  +
mov edx [esi+0Ch] +
cmp edi edx +
jbe loc_1031C54  +
mov esi 756h +
mov dword ptr [ebp-4] 0C000042Bh +
jmp loc_1031C82  +
mov ecx [esi+20h] +
test ecx ecx +
jnz loc_1031CB1  +
lea ecx [ebp-8] +
push ecx  +
push edx  +
push edi  +
push eax  +
call sub_1031AD3  +
test eax eax +
jl loc_1031CF4  +
mov edx [ebp-8] +
cmp edx edi +
jnb loc_1031CBB  +
mov esi 766h +
mov dword ptr [ebp-4] 0C0000023h +
xor edi edi +
lea ecx [ebp-18h] +
call sub_102D479  +
mov [ebp-14h] esi +
mov [ebp-10h] edi +
lea eax [ebp-1Ch] +
push eax  +
lea ecx [ebp-4] +
mov dword ptr [ebp-18h] offset aRtlwritedatain +
mov dword ptr [ebp-1Ch] offset aDW7rtmBaseLs_0 +
call sub_103D6FE  +
jmp loc_1031D74  +
lea eax [ebp-8] +
push eax  +
push edi  +
push esi  +
call ecx  +
jmp loc_1031C67  +
***
mov eax [esi+10h] +
mov ecx [esi+18h] +
cmp eax ecx +
jnz loc_1031CD9  +
cmp [eax+4] edx +
jnb loc_1031D30  +
push ecx  +
push edx  +
push 0  +
call sub_10310C6  +
test eax eax +
jge loc_1031D30  +
jmp loc_1031CF4  +
cmp eax [esi+14h] +
jnz near ptr dword_1031D7C  +
cmp [ecx+4] edx +
jnb loc_1031D01  +
push ecx  +
push edx  +
push 0  +
call sub_10310C6  +
test eax eax +
jge loc_1031D01  +
lea ecx [ebp-18h] +
mov [ebp-4] eax +
call sub_102D479  +
jmp loc_1031D74  +
mov eax [esi+10h] +
push dword ptr [eax]  +
push dword ptr [eax+8]  +
mov eax [esi+18h] +
push dword ptr [eax+8]  +
call memcpy  +
mov eax [esi+10h] +
mov eax [eax] +
mov ecx [esi+18h] +
mov [ecx] eax +
mov ecx [esi+1Ch] +
mov eax [esi+18h] +
add esp 0Ch +
mov [esi+10h] eax +
test ecx ecx +
jz loc_1031D30  +
mov [ecx] eax +
mov eax [esi+10h] +
mov ecx [eax] +
mov edx [eax+8] +
lea edi [ecx+edx] +
mov [esi] edi +
mov ecx [eax+4] +
add ecx [eax+8] +
mov [esi+4] ecx +
lea ecx [ebp-18h] +
call sub_102D479  +
mov ecx [ebp-0Ch] +
test ebx ebx +
jbe loc_1031D70  +
push ebx  +
push dword ptr [ecx+8]  +
push edi  +
call memcpy  +
mov eax [esi+10h] +
add edi ebx +
mov ecx edi +
add esp 0Ch +
sub ecx [eax+8] +
mov [eax] ecx +
mov [esi] edi +
and dword ptr [ebp-4] 0 +
mov eax [ebp-4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_104A0F4 +
push esi  +
mov esi [ebp+arg_8] +
cmp esi dword_104A0F8 +
jnz loc_1031D99  +
int 3  +
test eax eax +
jz loc_1031DA6  +
push esi  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call eax  +
cmp esi 0C00000E5h +
pop esi  +
jnz loc_1031DBA  +
push 0C0000420h  +
call ds:RtlRaiseStatus  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
mov esi edx +
xor eax eax +
lea edi [ebp+var_C] +
stos   +
cmp ecx esi +
jnb loc_1032071  +
mov al [ecx] +
mov ebx 80h +
inc ecx  +
mov [ebp+var_1] al +
test al bl +
jnz loc_1031DF5  +
movzx eax al +
jmp loc_103206D  +
mov dl al +
and dl 0E0h +
mov al 0C0h +
cmp dl al +
jnz loc_1031E32  +
cmp ecx esi +
jnb loc_1032071  +
mov dl [ecx] +
mov [ebp+var_6] dl +
and dl al +
inc ecx  +
cmp dl bl +
jnz loc_1032071  +
movzx eax [ebp+var_1] +
movzx edx [ebp+var_6] +
and eax 1Fh +
shl eax 6 +
and edx 3Fh +
or eax edx +
cmp eax ebx +
jmp loc_103206B  +
mov dl [ebp+var_1] +
and dl 0F0h +
cmp dl 0E0h +
jnz loc_1031E96  +
dec esi  +
cmp ecx esi +
jnb loc_1032071  +
mov dl [ecx] +
inc ecx  +
mov [ebp+var_2] dl +
mov dl [ecx] +
mov [ebp+var_3] dl +
mov dl [ebp+var_2] +
and dl al +
inc ecx  +
cmp dl bl +
jnz loc_1032071  +
mov dl [ebp+var_3] +
and dl al +
cmp dl bl +
jnz loc_1032071  +
movzx eax [ebp+var_1] +
movzx edx [ebp+var_2] +
and eax 0Fh +
push 3Fh  +
shl eax 6 +
pop esi  +
and edx esi +
or eax edx +
movzx edx [ebp+var_3] +
shl eax 6 +
and edx esi +
or eax edx +
cmp eax 800h +
jmp loc_103206B  +
mov dl [ebp+var_1] +
and dl 0F8h +
cmp dl 0F0h +
jnz loc_1031F1A  +
add esi 0FFFFFFFEh +
cmp ecx esi +
jnb loc_1032071  +
mov dl [ecx] +
inc ecx  +
mov [ebp+var_3] dl +
mov dl [ecx] +
inc ecx  +
mov [ebp+var_2] dl +
mov dl [ecx] +
mov [ebp+var_4] dl +
mov dl [ebp+var_3] +
and dl al +
inc ecx  +
cmp dl bl +
jnz loc_1032071  +
mov dl [ebp+var_2] +
and dl al +
cmp dl bl +
jnz loc_1032071  +
mov dl [ebp+var_4] +
and dl al +
cmp dl bl +
jnz loc_1032071  +
movzx eax [ebp+var_1] +
movzx edx [ebp+var_3] +
and eax 7 +
shl eax 6 +
push 3Fh  +
pop esi  +
and edx esi +
or eax edx +
movzx edx [ebp+var_2] +
shl eax 6 +
and edx esi +
or eax edx +
movzx edx [ebp+var_4] +
shl eax 6 +
and edx esi +
or eax edx +
cmp eax 10000h +
jmp loc_103206B  +
mov dl [ebp+var_1] +
and dl 0FCh +
cmp dl 0F8h +
jnz loc_1031FC0  +
add esi 0FFFFFFFDh +
cmp ecx esi +
jnb loc_1032071  +
mov dl [ecx] +
inc ecx  +
mov [ebp+var_4] dl +
mov dl [ecx] +
inc ecx  +
mov [ebp+var_3] dl +
mov dl [ecx] +
inc ecx  +
mov [ebp+var_2] dl +
mov dl [ecx] +
mov [ebp+var_5] dl +
mov dl [ebp+var_4] +
and dl al +
inc ecx  +
cmp dl bl +
jnz loc_1032071  +
mov dl [ebp+var_3] +
and dl al +
cmp dl bl +
jnz loc_1032071  +
mov dl [ebp+var_2] +
and dl al +
cmp dl bl +
jnz loc_1032071  +
mov dl [ebp+var_5] +
and dl al +
cmp dl bl +
jnz loc_1032071  +
movzx eax [ebp+var_1] +
movzx edx [ebp+var_4] +
and eax 3 +
shl eax 6 +
push 3Fh  +
pop esi  +
and edx esi +
or eax edx +
movzx edx [ebp+var_3] +
shl eax 6 +
and edx esi +
or eax edx +
movzx edx [ebp+var_2] +
shl eax 6 +
and edx esi +
or eax edx +
movzx edx [ebp+var_5] +
shl eax 6 +
and edx esi +
or eax edx +
cmp eax 200000h +
jmp loc_103206B  +
mov dl [ebp+var_1] +
and dl 0FEh +
cmp dl 0FCh +
jnz loc_1032071  +
add esi 0FFFFFFFCh +
cmp ecx esi +
jnb loc_1032071  +
mov dl [ecx] +
inc ecx  +
mov [ebp+var_5] dl +
mov dl [ecx] +
inc ecx  +
mov [ebp+var_4] dl +
mov dl [ecx] +
inc ecx  +
mov [ebp+var_3] dl +
mov dl [ecx] +
inc ecx  +
mov [ebp+var_2] dl +
mov dl [ecx] +
mov [ebp+var_6] dl +
mov dl [ebp+var_5] +
and dl al +
inc ecx  +
cmp dl bl +
jnz loc_1032071  +
mov dl [ebp+var_4] +
and dl al +
cmp dl bl +
jnz loc_1032071  +
mov dl [ebp+var_3] +
and dl al +
cmp dl bl +
jnz loc_1032071  +
mov dl [ebp+var_2] +
and dl al +
cmp dl bl +
jnz loc_1032071  +
mov dl [ebp+var_6] +
and dl al +
cmp dl bl +
jnz loc_1032071  +
movzx eax [ebp+var_1] +
movzx edx [ebp+var_5] +
and eax 1 +
shl eax 6 +
push 3Fh  +
pop esi  +
and edx esi +
or eax edx +
movzx edx [ebp+var_4] +
shl eax 6 +
and edx esi +
or eax edx +
movzx edx [ebp+var_3] +
shl eax 6 +
and edx esi +
or eax edx +
movzx edx [ebp+var_2] +
shl eax 6 +
and edx esi +
or eax edx +
movzx edx [ebp+var_6] +
shl eax 6 +
and edx esi +
or eax edx +
cmp eax 4000000h +
jb loc_1032071  +
mov edx ecx +
jmp loc_1032079  +
or eax 0FFFFFFFFh +
mov edx 0C0000161h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edx [ecx] +
lea eax [edx+4] +
mov [ecx] eax +
movzx eax byte ptr [edx] +
movzx ecx byte ptr [edx+1] +
shl eax 8 +
or eax ecx +
movzx ecx byte ptr [edx+2] +
shl eax 8 +
or eax ecx +
movzx ecx byte ptr [edx+3] +
shl eax 8 +
or eax ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
push edi  +
xor eax eax +
lea edi [ebp-4] +
stos   +
cmp ecx edx +
jnb loc_103211B  +
sub edx ecx +
cmp edx 2 +
jb loc_103211B  +
mov eax ecx +
movzx eax word ptr [eax] +
inc ecx  +
mov esi 0D800h +
inc ecx  +
cmp ax si +
jb loc_1032125  +
mov esi 0DBFFh +
cmp ax si +
ja loc_1032111  +
cmp edx 4 +
jb loc_103211B  +
mov edx ecx +
movzx edx word ptr [edx] +
inc ecx  +
lea esi [edx+2400h] +
mov edi 3FFh +
inc ecx  +
cmp si di +
ja loc_103211B  +
movzx eax ax +
sub eax 0D7F7h +
movzx edx dx +
shl eax 0Ah +
add eax edx +
jmp loc_1032128  +
mov edx 0DFFFh +
cmp ax dx +
ja loc_1032125  +
or eax 0FFFFFFFFh +
mov edx 0C0000161h +
jmp loc_103212A  +
movzx eax ax +
mov edx ecx +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
push edi  +
xor eax eax +
lea edi [ebp-4] +
stos   +
cmp ecx edx +
jnb loc_10321C0  +
sub edx ecx +
cmp edx 2 +
jb loc_10321C0  +
mov eax ecx +
movzx si byte ptr [eax] +
movzx ax byte ptr [eax+1] +
shl si 8 +
or si ax +
inc ecx  +
movzx esi si +
mov eax 0D800h +
inc ecx  +
cmp si ax +
jb loc_10321CA  +
mov eax 0DBFFh +
cmp si ax +
ja loc_10321B6  +
cmp edx 4 +
jb loc_10321C0  +
mov eax ecx +
movzx dx byte ptr [eax] +
movzx ax byte ptr [eax+1] +
shl dx 8 +
or dx ax +
movzx edx dx +
inc ecx  +
lea eax [edx+2400h] +
mov edi 3FFh +
inc ecx  +
cmp ax di +
ja loc_10321C0  +
movzx eax si +
sub eax 0D7F7h +
movzx edx dx +
shl eax 0Ah +
add eax edx +
jmp loc_10321CD  +
mov eax 0DFFFh +
cmp si ax +
ja loc_10321CA  +
or eax 0FFFFFFFFh +
mov edx 0C0000161h +
jmp loc_10321CF  +
movzx eax si +
mov edx ecx +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp-4] +
stos   +
pop edi  +
cmp ecx edx +
jnb loc_10321F2  +
sub edx ecx +
cmp edx 2 +
jnb loc_10321FC  +
or eax 0FFFFFFFFh +
mov edx 0C0000161h +
leave   +
retn   +
***
movzx eax word ptr [ecx] +
lea edx [ecx+2] +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp-4] +
stos   +
pop edi  +
cmp ecx edx +
jnb loc_1032223  +
sub edx ecx +
cmp edx 2 +
jnb loc_103222D  +
or eax 0FFFFFFFFh +
mov edx 0C0000161h +
leave   +
retn   +
***
movzx ax byte ptr [ecx] +
movzx edx byte ptr [ecx+1] +
shl ax 8 +
movzx eax ax +
or eax edx +
lea edx [ecx+2] +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push edi  +
xor eax eax +
lea edi [ebp-8] +
stos   +
mov [ebp-4] ecx +
pop edi  +
cmp ecx edx +
jnb loc_1032266  +
sub edx ecx +
cmp edx 4 +
jnb loc_1032270  +
or eax 0FFFFFFFFh +
mov edx 0C0000161h +
leave   +
retn   +
***
lea ecx [ebp-4] +
call sub_1032083  +
mov edx [ebp-4] +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp-4] +
stos   +
pop edi  +
cmp ecx edx +
jnb loc_103229C  +
sub edx ecx +
cmp edx 4 +
jnb loc_10322A6  +
or eax 0FFFFFFFFh +
mov edx 0C0000161h +
leave   +
retn   +
***
mov eax [ecx] +
lea edx [ecx+4] +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
mov [ebp+var_4] 0C00000E5h +
test esi esi +
jz loc_10322CD  +
and dword ptr [esi] 0 +
xor ecx ecx +
test [ebp+arg_0] 0FFFFFFFEh +
jz loc_10322E7  +
mov esi 1C0h +
mov edi offset aValidFlagsChec +
jmp loc_103238D  +
test esi esi +
jnz loc_1032306  +
lea ecx [ebp+var_4] +
call sub_102FD01  +
mov [ebp+var_C] 1C2h +
mov [ebp+var_8] offset aNotNullChec_19 +
jmp loc_103239B  +
mov edx [ebp+arg_4] +
mov eax 3FBh +
cmp edx eax +
ja loc_103234D  +
jz loc_1032346  +
mov eax edx +
sub eax 6Ah +
jz loc_103233F  +
sub eax 38Bh +
jz loc_1032338  +
dec eax  +
jz loc_1032331  +
sub eax 4 +
jnz loc_1032379  +
mov ecx offset loc_1032248 +
jmp loc_1032379  +
mov ecx offset loc_10320AE +
jmp loc_1032379  +
mov ecx offset loc_1032133 +
jmp loc_1032379  +
mov ecx offset sub_1031DC3 +
jmp loc_1032379  +
mov ecx offset loc_1032282 +
jmp loc_1032379  +
mov eax edx +
sub eax 7D0h +
jz loc_1032374  +
dec eax  +
jz loc_103236D  +
dec eax  +
jz loc_1032366  +
dec eax  +
jnz loc_1032379  +
mov ecx offset loc_1032248 +
jmp loc_1032379  +
mov ecx offset loc_1032282 +
jmp loc_1032379  +
mov ecx offset loc_1032209 +
jmp loc_1032379  +
mov ecx offset loc_10321D8 +
test byte ptr [ebp+arg_0] 1 +
jnz loc_10323B7  +
test ecx ecx +
jnz loc_10323B7  +
mov esi 1D2h +
mov edi offset aTempdecoder0 +
lea ecx [ebp+var_4] +
call sub_102FD01  +
mov [ebp+var_C] esi +
mov [ebp+var_8] edi +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_10] offset aRtlgetcharacte +
mov [ebp+var_14] offset aDW7rtmBaseLs_1 +
call sub_103D6FE  +
jmp loc_10323BD  +
and [ebp+var_4] 0 +
mov [esi] ecx +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
test ecx ecx +
jz loc_10323EE  +
mov edx [ecx] +
test dl 1 +
jnz loc_10323EE  +
mov eax [ecx+4] +
test al 1 +
jnz loc_10323EE  +
cmp edx eax +
ja loc_10323EE  +
cmp dword ptr [ecx+8] 0 +
jnz loc_10323EB  +
test edx edx +
jnz loc_10323EE  +
mov al 1 +
retn   +
xor al al +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
cmp dword ptr [ecx+8] 0 +
jz loc_1032409  +
call sub_103070B  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
cmp edx 0FFFFh +
ja loc_103242C  +
mov ecx [ebp+arg_0] +
and dword ptr [eax] 0 +
mov [ecx] dx +
jmp loc_1032432  +
mov dword ptr [eax] 0C0000095h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
push edi  +
mov esi ecx +
lea edi [ebp+var_C] +
movs   +
movs   +
xor eax eax +
movs   +
mov [ecx] eax +
mov [ecx+4] eax +
mov [ecx+8] eax +
lea eax [ebp+var_C] +
push eax  +
call sub_10323F6  +
pop edi  +
pop esi  +
leave   +
retn   +
***
cmp ecx 80h +
jnb loc_1032475  +
xor eax eax +
inc eax  +
retn   +
cmp ecx 800h +
jnb loc_1032481  +
push 2  +
pop eax  +
retn   +
cmp ecx 10000h +
jnb loc_103248D  +
push 3  +
pop eax  +
retn   +
cmp ecx 200000h +
jnb loc_1032499  +
push 4  +
pop eax  +
retn   +
cmp ecx 4000000h +
sbb eax eax +
add eax 6 +
retn   +
***
cmp ecx 10000h +
sbb eax eax +
and eax 0FFFFFFFEh +
add eax 4 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax edx +
jnb loc_10324D6  +
xor eax eax +
mov edx 0C000000Dh +
jmp loc_10325D3  +
sub eax edx +
push ebx  +
push esi  +
mov esi eax +
mov eax 80h +
cmp ecx eax +
jnb loc_10324F3  +
cmp esi 1 +
jb loc_103257C  +
jmp loc_10325CA  +
cmp ecx 800h +
jnb loc_1032510  +
cmp esi 2 +
jb loc_103257C  +
mov ebx ecx +
shr ebx 6 +
and bl 1Fh +
or bl 0C0h +
jmp loc_10325C2  +
cmp ecx 10000h +
jnb loc_1032546  +
push edi  +
lea edi [ecx-0DC00h] +
cmp edi 3FFh +
pop edi  +
ja loc_1032534  +
xor eax eax +
mov edx 0C0000161h +
jmp loc_10325D1  +
cmp esi 3 +
jb loc_103257C  +
mov ebx ecx +
shr ebx 0Ch +
and bl 0Fh +
or bl 0E0h +
jmp loc_10325B5  +
cmp ecx 200000h +
jnb loc_1032560  +
cmp esi 4 +
jb loc_103257C  +
mov ebx ecx +
shr ebx 12h +
and bl 7 +
or bl 0F0h +
jmp loc_10325A8  +
cmp ecx 4000000h +
jnb loc_1032577  +
cmp esi 5 +
jb loc_103257C  +
mov ebx ecx +
shr ebx 18h +
and bl 3 +
jmp loc_1032598  +
cmp esi 6 +
jnb loc_1032585  +
xor eax eax +
mov edx 0C0000023h +
jmp loc_10325D1  +
mov ebx ecx +
shr ebx 1Eh +
and bl 1 +
or bl 0FCh +
mov [edx] bl +
mov ebx ecx +
inc edx  +
shr ebx 18h +
or bl 0F8h +
mov [edx] bl +
mov ebx ecx +
shr ebx 12h +
and bl 3Fh +
inc edx  +
or bl al +
mov [edx] bl +
mov ebx ecx +
shr ebx 0Ch +
and bl 3Fh +
inc edx  +
or bl al +
mov [edx] bl +
mov ebx ecx +
shr ebx 6 +
and bl 3Fh +
inc edx  +
or bl al +
mov [edx] bl +
and cl 3Fh +
inc edx  +
or cl al +
mov [edx] cl +
inc edx  +
mov eax edx +
xor edx edx +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
cmp ecx 10000h +
jnb loc_10325E8  +
push 2  +
pop eax  +
retn   +
***
cmp ecx 10FFFFh +
sbb eax eax +
and eax 5 +
dec eax  +
retn   +
***
cmp ecx 10FFFFh +
sbb eax eax +
and eax 5 +
dec eax  +
retn   +
***
cmp ecx 10000h +
sbb eax eax +
and eax 3 +
dec eax  +
retn   +
***
push 4  +
pop eax  +
retn   +
***
mov eax [ecx] +
push ebx  +
push esi  +
lea esi [eax+4] +
mov [ecx] esi +
mov ecx edx +
shr ecx 8 +
movzx ecx cl +
movzx esi dl +
shl esi 8 +
or ecx esi +
mov ebx edx +
shr ebx 10h +
movzx esi bl +
shl ecx 8 +
or ecx esi +
shl ecx 8 +
shr edx 18h +
or ecx edx +
pop esi  +
mov [eax] ecx +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
sub eax edx +
cmp ecx 10000h +
jnb loc_103268C  +
cmp eax 2 +
jb loc_1032699  +
cmp ecx 0DC00h +
jb loc_1032686  +
cmp ecx 0DFFFh +
jbe loc_10326CC  +
mov eax edx +
inc edx  +
inc edx  +
jmp loc_10326C3  +
cmp ecx 110000h +
jnb loc_10326CC  +
cmp eax 4 +
jnb loc_10326A0  +
mov edx 0C0000023h +
jmp loc_10326D1  +
lea eax [ecx-10000h] +
shr eax 0Ah +
sub eax 2800h +
mov [edx] ax +
lea eax [edx+2] +
and ecx 3FFh +
lea edx [eax+2] +
sub ecx 2400h +
mov [eax] cx +
mov eax edx +
xor edx edx +
jmp loc_10326D3  +
mov edx 0C0000161h +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
sub eax edx +
cmp ecx 10000h +
jnb loc_1032711  +
cmp eax 2 +
jb loc_103271E  +
cmp ecx 0DC00h +
jb loc_1032703  +
cmp ecx 0DFFFh +
jbe loc_1032765  +
mov eax ecx +
shr eax 8 +
mov [edx] al +
mov [edx+1] cl +
inc edx  +
inc edx  +
jmp loc_103275F  +
cmp ecx 110000h +
jnb loc_1032765  +
cmp eax 4 +
jnb loc_1032725  +
mov edx 0C0000023h +
jmp loc_103276A  +
lea eax [ecx-10000h] +
shr eax 0Ah +
sub eax 2800h +
movzx eax ax +
and ecx 3FFh +
sub ecx 2400h +
push ebx  +
mov [edx+1] al +
mov ebx eax +
movzx eax cx +
shr ebx 8 +
mov [edx] bl +
mov ecx eax +
shr ecx 8 +
mov [edx+2] cl +
mov [edx+3] al +
add edx 4 +
pop ebx  +
mov eax edx +
xor edx edx +
jmp loc_103276C  +
mov edx 0C0000161h +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp ecx 10000h +
jnb loc_10327AD  +
mov eax [ebp+8] +
sub eax edx +
cmp eax 2 +
jnb loc_1032793  +
mov edx 0C0000023h +
jmp loc_10327B2  +
cmp ecx 0DC00h +
jb loc_10327A3  +
cmp ecx 0DFFFh +
jbe loc_10327AD  +
mov [edx] cx +
lea eax [edx+2] +
xor edx edx +
jmp loc_10327B4  +
mov edx 0C0000161h +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp ecx 110000h +
jnb loc_10327F4  +
mov eax [ebp+8] +
sub eax edx +
cmp eax 4 +
jnb loc_10327DB  +
mov edx 0C0000023h +
jmp loc_10327F9  +
cmp ecx 0DC00h +
jb loc_10327EB  +
cmp ecx 0DFFFh +
jbe loc_10327F4  +
mov [edx] ecx +
lea eax [edx+4] +
xor edx edx +
jmp loc_10327FB  +
mov edx 0C0000161h +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov [ebp-4] edx +
cmp ecx 110000h +
jnb loc_1032847  +
mov eax [ebp+8] +
sub eax edx +
cmp eax 4 +
jnb loc_1032826  +
mov edx 0C0000023h +
jmp loc_103284C  +
cmp ecx 0DC00h +
jb loc_1032836  +
cmp ecx 0DFFFh +
jbe loc_1032847  +
mov edx ecx +
lea ecx [ebp-4] +
call sub_1032627  +
mov eax [ebp-4] +
xor edx edx +
jmp locret_103284E  +
mov edx 0C0000161h +
xor eax eax +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
sub eax edx +
cmp eax 4 +
jnb loc_103286F  +
xor eax eax +
mov edx 0C0000023h +
jmp loc_103288C  +
lea eax [ecx-0DC00h] +
cmp eax 3FFh +
ja loc_1032885  +
xor eax eax +
mov edx 0C0000161h +
jmp loc_103288C  +
mov [edx] ecx +
lea eax [edx+4] +
xor edx edx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+8] +
sub eax edx +
mov [ebp-4] edx +
cmp eax 4 +
jnb loc_10328B1  +
xor eax eax +
mov edx 0C0000023h +
jmp locret_10328D6  +
lea eax [ecx-0DC00h] +
cmp eax 3FFh +
ja loc_10328C7  +
xor eax eax +
mov edx 0C0000161h +
jmp locret_10328D6  +
mov edx ecx +
lea ecx [ebp-4] +
call sub_1032627  +
mov eax [ebp-4] +
xor edx edx +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
push edi  +
xor ecx ecx +
xor esi esi +
xor edi edi +
mov [ebp+var_4] 0C00000E5h +
cmp ebx ecx +
jz loc_1032900  +
mov [ebx] ecx +
mov eax [ebp+arg_C] +
cmp eax ecx +
jz loc_1032909  +
mov [eax] ecx +
mov eax [ebp+arg_10] +
cmp eax ecx +
jz loc_1032912  +
mov [eax] ecx +
test [ebp+arg_0] 0FFFFFFFEh +
jz loc_1032927  +
push 5Bh  +
mov edi offset aValidFlagsChec +
jmp loc_1032A1D  +
mov edx [ebp+arg_4] +
mov eax 3FBh +
cmp edx eax +
ja loc_10329AA  +
jz loc_1032999  +
mov eax edx +
sub eax 6Ah +
jz loc_1032988  +
sub eax 38Bh +
jz loc_1032977  +
dec eax  +
jz loc_1032963  +
sub eax 4 +
jnz loc_10329F9  +
mov ecx offset loc_1032804 +
mov esi offset loc_10325FA +
mov edi offset dword_1008454 +
jmp loc_10329F9  +
mov ecx offset loc_103265F +
mov esi offset loc_10325DC +
mov edi offset dword_1008434 +
jmp loc_10329F9  +
mov ecx offset loc_10326DC +
mov esi offset loc_10325DC +
mov edi offset dword_1008444 +
jmp loc_10329F9  +
mov ecx offset sub_10324BE +
mov esi offset sub_1032469 +
mov edi offset dword_1008424 +
jmp loc_10329F9  +
mov ecx offset loc_10327BD +
mov esi offset loc_10325FA +
mov edi offset dword_1008464 +
jmp loc_10329F9  +
mov eax edx +
sub eax 7D0h +
jz loc_10329EA  +
dec eax  +
jz loc_10329DE  +
dec eax  +
jz loc_10329CD  +
dec eax  +
jnz loc_10329F9  +
mov ecx offset loc_1032895 +
mov esi offset loc_103261E +
mov edi offset dword_10084A4 +
jmp loc_10329F9  +
mov ecx offset loc_1032857 +
mov esi offset loc_103261E +
mov edi offset dword_1008494 +
jmp loc_10329F9  +
mov ecx offset loc_1032775 +
mov edi offset dword_1008484 +
jmp loc_10329F4  +
mov ecx offset loc_1032775 +
mov edi offset dword_1008474 +
mov esi offset loc_103260C +
xor eax eax +
test esi esi +
setnz al  +
xor edx edx +
test ecx ecx +
setnz dl  +
cmp edx eax +
jz loc_1032A0C  +
int 3  +
test byte ptr [ebp+arg_0] 1 +
jnz loc_1032A48  +
test ecx ecx +
jnz loc_1032A48  +
push 6Dh  +
mov edi offset aEncoder0 +
pop esi  +
lea ecx [ebp+var_4] +
call sub_102FD01  +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_14] offset aDW7rtmBaseLs_2 +
mov [ebp+var_10] offset aRtlgetcharac_0 +
mov [ebp+var_C] esi +
mov [ebp+var_8] edi +
call sub_103D6FE  +
jmp loc_1032A64  +
test ebx ebx +
jz loc_1032A4E  +
mov [ebx] ecx +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_1032A57  +
mov [eax] esi +
mov eax [ebp+arg_10] +
test eax eax +
jz loc_1032A60  +
mov [eax] edi +
and [ebp+var_4] 0 +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov eax ecx +
cmp eax 80h +
jnb loc_1032A88  +
lea ecx [eax-41h] +
cmp ecx 19h +
ja locret_1032A98  +
add eax 20h +
retn   +
***
cmp eax 10000h +
jnb locret_1032A98  +
push eax  +
call sub_1032A9E  +
movzx eax ax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 2500h +
cmp cx ax +
jnb loc_1032ACC  +
movzx eax cx +
mov edx eax +
shr edx 7 +
mov edx ds:off_10095F8[edx*4] +
test edx edx +
jz loc_1032AE5  +
and eax 7Fh +
movzx eax word ptr [edx+eax*2] +
jmp loc_1032AE8  +
lea eax [ecx+100h] +
cmp ax 7Fh +
ja loc_1032AE5  +
and ecx 7Fh +
movzx eax ds:word_10094F8[ecx*2] +
jmp loc_1032AE8  +
movzx eax cx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 0 +
mov edx [ebp+arg_0] +
mov eax [ebp+arg_4] +
push esi  +
mov esi [edx+4] +
mov [eax+4] esi +
mov [eax] edx +
mov esi [edx+4] +
mov [esi] eax +
mov [edx+4] eax +
mov [eax+8] ecx +
pop esi  +
jz loc_1032B1A  +
inc dword ptr [ecx+0Ch]  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
cmp dword ptr [ecx+8] 0 +
jz loc_1032B36  +
call sub_102FCA1  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi [ecx] +
xor edx edx +
cmp esi edx +
jz loc_1032B66  +
mov eax [ecx+4] +
lea eax [esi+eax*4] +
push eax  +
push esi  +
mov [ecx] edx +
mov [ecx+4] edx +
mov [ecx+8] edx +
call sub_1035708  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
push edi  +
mov esi ecx +
lea edi [ebp+var_C] +
movs   +
movs   +
xor eax eax +
movs   +
mov [ecx] eax +
mov [ecx+4] eax +
mov [ecx+8] eax +
lea eax [ebp+var_C] +
push eax  +
call sub_1032B23  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_1032BC4  +
cmp eax esi +
jz loc_1032BC4  +
push edi  +
mov edi [eax] +
mov ecx eax +
sub ecx esi +
neg ecx  +
sbb ecx ecx +
and ecx eax +
call [ebp+arg_0]  +
mov eax edi +
cmp edi esi +
jnz loc_1032BAE  +
pop edi  +
and dword ptr [esi+0Ch] 0 +
mov [esi] esi +
mov [esi+4] esi +
mov [esi+8] esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_4] +
push edi  +
mov [ebp+var_4] 0C00000E5h +
test ecx ecx +
jz loc_1032C09  +
call sub_102FCAB  +
test al al +
jnz loc_1032C09  +
mov esi 17Dh +
mov edi offset aNewnamespace0R +
jmp loc_1032C3F  +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1032C25  +
call sub_102FCAB  +
test al al +
jnz loc_1032C25  +
mov esi 17Eh +
mov edi offset aNewprefix0Rtli +
jmp loc_1032C3F  +
mov ecx [ebp+arg_8] +
test ecx ecx +
jz loc_1032C6C  +
call sub_102FCAB  +
test al al +
jnz loc_1032C6C  +
mov esi 17Fh +
mov edi offset aNewname0Rtlisl +
lea ecx [ebp+var_4] +
call sub_102FD01  +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_14] offset aDW7rtmBaseXmlU +
mov [ebp+var_10] offset aCbasicnodetype +
mov [ebp+var_C] esi +
mov [ebp+var_8] edi +
call sub_103D6FE  +
mov eax [ebp+var_4] +
jmp loc_1032CC4  +
lea edi [esi+4] +
push ebx  +
mov ecx edi +
call sub_1032B6D  +
lea ebx [esi+10h] +
mov ecx ebx +
call sub_1032B6D  +
add esi 1Ch +
mov ecx esi +
call sub_1032B6D  +
mov ecx [ebp+arg_8] +
test ecx ecx +
jz loc_1032C9D  +
mov edx esi +
call sub_102FFAF  +
test eax eax +
jl loc_1032CC3  +
mov ecx [ebp+arg_4] +
test ecx ecx +
jz loc_1032CAF  +
mov edx edi +
call sub_102FFAF  +
test eax eax +
jl loc_1032CC3  +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1032CC1  +
mov edx ebx +
call sub_102FFAF  +
test eax eax +
jl loc_1032CC3  +
xor eax eax +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
mov [ebp+var_4] 0C00000E5h +
test edi edi +
jz loc_1032D26  +
mov ecx edi +
call sub_102FCAB  +
test al al +
jnz loc_1032D26  +
lea ecx [ebp+var_4] +
call sub_102FD01  +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_14] offset aDW7rtmBaseXmlU +
mov [ebp+var_10] offset aCbasicnodety_0 +
mov [ebp+var_C] 19Bh +
mov [ebp+var_8] offset aValue0Rtlislut +
call sub_103D6FE  +
jmp loc_1032D4A  +
add esi 28h +
mov ecx esi +
call sub_1032B6D  +
test edi edi +
jz loc_1032D46  +
mov edx esi +
mov ecx edi +
call sub_102FFAF  +
test eax eax +
jge loc_1032D46  +
mov [ebp+var_4] eax +
jmp loc_1032D4A  +
and [ebp+var_4] 0 +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
push edi  +
mov edi [ebx] +
xor esi esi +
test edi edi +
jz loc_1032D9D  +
mov eax [ebp+arg_4] +
mov ecx [eax+esi*4] +
cmp ecx [ebp+arg_0] +
jz loc_1032D7D  +
inc esi  +
cmp esi edi +
jnz loc_1032D6E  +
jmp loc_1032D99  +
mov ecx edi +
sub ecx esi +
lea ecx ds:0FFFFFFFCh[ecx*4] +
lea eax [eax+esi*4] +
push ecx  +
lea ecx [eax+4] +
push ecx  +
push eax  +
call memmove  +
add esp 0Ch +
cmp esi edi +
jnz loc_1032D9E  +
int 3  +
dec dword ptr [ebx]  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi+10h] 0 +
jz loc_1032DD1  +
mov eax [ecx+58h] +
lea edx [ecx+54h] +
push edx  +
push eax  +
push esi  +
call sub_1032D58  +
test eax eax +
jge loc_1032DE3  +
jmp loc_1032DF3  +
mov eax [ecx+68h] +
lea edx [ecx+64h] +
push edx  +
push eax  +
push esi  +
call sub_1032D58  +
test eax eax +
jl loc_1032DF3  +
mov ecx [esi+1Ch] +
mov eax [ecx] +
call dword ptr [eax]  +
mov eax [esi+1Ch] +
and dword ptr [eax+38h] 0 +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
cmp [ebp+arg_0] 0 +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi ecx +
mov [ebp+var_4] 0C00000E5h +
jnz loc_1032E25  +
mov esi 67Fh +
mov edi offset aRtlismicrodomu +
jmp loc_1032E5E  +
test esi esi +
jnz loc_1032E35  +
mov esi 680h +
mov edi offset aObjectcookie_o +
jmp loc_1032E5E  +
test edi edi +
jz loc_1032E4E  +
call sub_102FCAB  +
test al al +
jnz loc_1032E4E  +
mov esi 681h +
mov edi offset aValue0Rtlislut +
jmp loc_1032E5E  +
cmp dword ptr [esi+1Ch] 0 +
jnz loc_1032E88  +
mov esi 683h +
mov edi offset aPchildPbasicno +
lea ecx [ebp+var_4] +
call sub_102FD01  +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_14] offset aDW7rtmBaseXmlU +
mov [ebp+var_10] offset aWindowsUdomRtl +
mov [ebp+var_C] esi +
mov [ebp+var_8] edi +
call sub_103D6FE  +
jmp loc_1032E9E  +
mov ecx [esi+1Ch] +
mov eax [ecx] +
push edi  +
call dword ptr [eax+24h]  +
test eax eax +
jge loc_1032E9A  +
mov [ebp+var_4] eax +
jmp loc_1032E9E  +
and [ebp+var_4] 0 +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
cmp [ebp+arg_0] 0 +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi ecx +
mov [ebp+var_4] 0C00000E5h +
jnz loc_1032ED4  +
mov esi 697h +
mov edi offset aRtlismicrodomu +
jmp loc_1032F09  +
test esi esi +
jnz loc_1032EE4  +
mov esi 698h +
mov edi offset aObjectcookie_o +
jmp loc_1032F09  +
call sub_102FCAB  +
test al al +
jnz loc_1032EF9  +
mov esi 699h +
mov edi offset aRtlislutf8st_6 +
jmp loc_1032F09  +
cmp dword ptr [esi+1Ch] 0 +
jnz loc_1032F33  +
mov esi 69Bh +
mov edi offset aPchildPbasicno +
lea ecx [ebp+var_4] +
call sub_102FD01  +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_14] offset aDW7rtmBaseXmlU +
mov [ebp+var_10] offset aWindowsUdomR_0 +
mov [ebp+var_C] esi +
mov [ebp+var_8] edi +
call sub_103D6FE  +
jmp loc_1032F49  +
mov ecx [esi+1Ch] +
mov eax [ecx] +
push edi  +
call dword ptr [eax+18h]  +
test eax eax +
jge loc_1032F45  +
mov [ebp+var_4] eax +
jmp loc_1032F49  +
and [ebp+var_4] 0 +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
xor esi esi +
push edi  +
mov [ebp+var_4] 0C00000E5h +
cmp [ebp+arg_0] esi +
jnz loc_1032F7B  +
mov esi 70Dh +
mov edi offset aRtlismicrodomu +
jmp loc_1032FB0  +
mov eax [ebp+arg_4] +
cmp eax esi +
jnz loc_1032F8E  +
mov esi 70Eh +
mov edi offset aPtoremovefrom0 +
jmp loc_1032FB0  +
cmp [ebp+arg_8] esi +
jnz loc_1032F9F  +
mov esi 70Fh +
mov edi offset aPtoremove0 +
jmp loc_1032FB0  +
mov ecx [eax+14h] +
cmp ecx esi +
jnz loc_1032FDA  +
mov esi 710h +
mov edi offset aPtoremovefromE +
lea ecx [ebp+var_4] +
call sub_102FD01  +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_14] offset aDW7rtmBaseXmlU +
mov [ebp+var_10] offset aWindowsUdomR_1 +
mov [ebp+var_C] esi +
mov [ebp+var_8] edi +
call sub_103D6FE  +
jmp loc_1032FEC  +
push [ebp+arg_8]  +
call sub_1032DAE  +
cmp eax esi +
mov [ebp+var_4] eax +
jl loc_1032FEC  +
mov [ebp+var_4] esi +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
cmp [ebp+arg_0] 0 +
push esi  +
push edi  +
mov [ebp+var_4] 0C00000E5h +
jnz loc_103301D  +
mov esi 723h +
mov edi offset aRtlismicrodomu +
jmp loc_103302E  +
mov eax [ebp+arg_4] +
test eax eax +
jnz loc_1033058  +
mov esi 724h +
mov edi offset aPtoremove0 +
lea ecx [ebp+var_4] +
call sub_102FD01  +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_14] offset aDW7rtmBaseXmlU +
mov [ebp+var_10] offset aWindowsUdomR_2 +
mov [ebp+var_C] esi +
mov [ebp+var_8] edi +
call sub_103D6FE  +
jmp loc_1033075  +
mov ecx [eax+1Ch] +
mov ecx [ecx+38h] +
test ecx ecx +
jz loc_1033071  +
push eax  +
call sub_1032DAE  +
test eax eax +
jge loc_1033071  +
mov [ebp+var_4] eax +
jmp loc_1033075  +
and [ebp+var_4] 0 +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 0 +
jz loc_1033091  +
int 3  +
mov edx [ecx] +
push eax  +
push offset dword_100AE44  +
call dword ptr [edx+4]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+28h] +
call sub_1032B6D  +
lea ecx [esi+1Ch] +
call sub_1032B6D  +
lea ecx [esi+10h] +
call sub_1032B6D  +
lea ecx [esi+4] +
pop esi  +
jmp sub_1032B6D  +
***
mov eax ecx +
xor ecx ecx +
mov [eax] ecx +
lea edx [eax+4] +
mov [edx+0Ch] ecx +
mov [edx] edx +
mov [edx+4] edx +
mov [edx+8] edx +
mov [eax+14h] ecx +
mov [eax+18h] ecx +
mov [eax+1Ch] ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [esi+4] +
push edi  +
mov edi [ebp+arg_4] +
cmp edi ecx +
jbe loc_103312D  +
push edi  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx esi +
call sub_1036C55  +
mov ecx [ebp+arg_4] +
test ecx ecx +
jl loc_1033143  +
mov eax [esi] +
lea ecx [eax+edi*4] +
push ecx  +
mov ecx [esi+4] +
lea eax [eax+ecx*4] +
push eax  +
call sub_1035708  +
jmp loc_103313E  +
jnb loc_103313E  +
mov eax [esi] +
lea ecx [eax+ecx*4] +
push ecx  +
lea eax [eax+edi*4] +
push eax  +
call sub_1035708  +
mov [esi+4] edi +
xor ecx ecx +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] ecx +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
push 20h  +
mov esi ecx +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_103316D  +
mov ecx eax +
call sub_10330D0  +
jmp loc_103316F  +
xor eax eax +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+68h] +
call sub_1032B3F  +
lea ecx [esi+58h] +
call sub_1032B3F  +
mov ecx esi +
pop esi  +
jmp sub_10330A5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_4] +
push eax  +
call sub_1033083  +
mov esi eax +
test esi esi +
jl loc_10331CC  +
mov edx [ebp+var_4] +
test edx edx +
jnz loc_10331C2  +
mov esi 0C00002B9h +
jmp loc_10331DB  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
mov [eax] edx +
mov [ebp+var_4] ecx +
mov ecx [ebp+var_4] +
test ecx ecx +
jz loc_10331DB  +
and [ebp+var_4] 0 +
mov eax [ecx] +
call dword ptr [eax]  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov eax ecx +
xor ecx ecx +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
mov [eax+18h] ecx +
mov [eax+1Ch] ecx +
mov [eax+20h] ecx +
mov [eax+24h] ecx +
mov [eax+28h] ecx +
mov [eax+2Ch] ecx +
mov [eax+30h] ecx +
mov [eax+34h] ecx +
mov [eax+38h] ecx +
mov [eax+3Ch] cl +
mov [eax+3Dh] cl +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10331E7  +
mov dword ptr [esi] offset off_100AE54 +
or dword ptr [esi+48h] 0FFFFFFFFh +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov ecx [esi+8] +
mov edx [esi] +
add edx ecx +
call sub_1031DC3  +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1033261  +
mov eax edx +
jmp loc_103326D  +
mov eax [esi+8] +
sub eax edx +
add [esi] eax +
mov [esi+8] edx +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
call sub_102FCAB  +
xor ecx ecx +
test al al +
setnz cl  +
mov al cl +
pop ebp  +
retn 4  +
***
cmp al 1 +
retn   +
***
mov eax 0C0000024h +
retn 4  +
***
lea eax [ecx+4] +
retn   +
***
lea eax [ecx+10h] +
retn   +
***
lea eax [ecx+1Ch] +
retn   +
***
lea eax [ecx+28h] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
lea esi [ecx+28h] +
mov ecx esi +
call sub_1032B6D  +
mov ecx [ebp+8] +
test ecx ecx +
jz loc_10332F3  +
mov edx esi +
call sub_102FFAF  +
test eax eax +
jl loc_10332F5  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
mov eax [ebp+0Ch] +
push ebx  +
push esi  +
push edi  +
lea edx [ebp-8] +
push edx  +
mov ebx ecx +
mov [ebx+48h] eax +
mov eax [ebp+8] +
lea edx [ebp-10h] +
push edx  +
mov [ebx+38h] eax +
sub esp 10h +
mov edi esp +
lea esi [ebx+40h] +
movs   +
lea eax [ebp-28h] +
mov [ebp-8] eax +
xor eax eax +
inc eax  +
movs   +
mov [ebp-4] eax +
mov [ebp-0Ch] eax +
mov eax [ebx+34h] +
lea ecx [ebp+0Ch] +
mov dword ptr [ebp+0Ch] 2009h +
mov [ebp-10h] ecx +
mov ecx [eax] +
mov eax [ecx] +
movs   +
movs   +
call dword ptr [eax+38h]  +
test eax eax +
jl loc_1033366  +
push dword ptr [ebp-20h]  +
mov ecx ebx +
call sub_1032CCF  +
test eax eax +
jl loc_1033366  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
mov [ebp+var_4] 0C00000E5h +
call sub_1033277  +
test al al +
jnz loc_10333C4  +
lea ecx [ebp+var_4] +
call sub_102FD01  +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_14] offset aDW7rtmBaseXmlI +
mov [ebp+var_10] offset aIsolationpPars +
mov [ebp+var_C] 81h +
mov [ebp+var_8] offset aWindowsRtlIsva +
call sub_103D6FE  +
jmp loc_10333CA  +
and [ebp+var_4] 0 +
mov [esi] edi +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
lea eax [ecx+4] +
cmp dword ptr [eax] 0 +
jbe loc_10333F0  +
add ecx 10h +
push ecx  +
push eax  +
call sub_103323E  +
test eax eax +
jge loc_10333F4  +
jmp loc_10333F6  +
mov byte ptr [ecx+14h] 1 +
xor eax eax +
test eax eax +
jge locret_1033401  +
push eax  +
call ds:RtlRaiseStatus  +
retn   +
***
mov edi edi +
push esi  +
mov esi [ecx] +
push edi  +
xor edx edx +
lea eax [ecx+4] +
mov [ecx+14h] dl +
mov [ecx+10h] edx +
mov edi eax +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
cmp [eax] edx +
jbe loc_1033428  +
jmp sub_10333D8  +
mov byte ptr [ecx+14h] 1 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
mov eax [ebp+arg_8] +
push ebx  +
xor ebx ebx +
push esi  +
mov [ebp+var_4] 0C00000E5h +
mov [ebp+var_10] ebx +
mov [ebp+var_C] ebx +
mov [ebp+var_8] ebx +
test al 1 +
jz loc_10334B6  +
mov ecx [ebp+arg_0] +
cmp ecx ebx +
jnz loc_103349C  +
lea ecx [ebp+var_4] +
call sub_102FD01  +
lea ecx [ebp+var_10] +
call sub_1032B6D  +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_14] offset aDW7rtmBaseXmlU +
mov [ebp+var_10] offset aCbasicnodety_1 +
mov [ebp+var_C] 8Fh +
mov [ebp+var_8] offset aNotNullCheck_6 +
call sub_103D6FE  +
mov esi [ebp+var_4] +
jmp loc_10335F3  +
mov edx [ebp+arg_4] +
call sub_102FFAF  +
cmp eax ebx +
lea ecx [ebp+var_10] +
jge loc_10335EC  +
mov esi eax +
jmp loc_10335EE  +
shr eax 1 +
and al 1 +
mov byte ptr [ebp+arg_8+3] al +
mov eax [ebp+arg_0] +
cmp eax ebx +
jz loc_10335DE  +
cmp [eax] ebx +
jz loc_10335DE  +
push eax  +
lea ecx [ebp+var_2C] +
xor esi esi +
mov [ebp+var_28] ebx +
mov [ebp+var_24] ebx +
mov [ebp+var_20] ebx +
mov [ebp+var_1C] ebx +
mov [ebp+var_2C] ebx +
mov [ebp+var_18] bl +
call sub_1033372  +
cmp eax ebx +
jge loc_10334FB  +
mov esi eax +
lea ecx [ebp+var_10] +
jmp loc_10335EE  +
lea ecx [ebp+var_2C] +
call sub_1033407  +
jmp loc_103354D  +
mov ecx [ebp+var_1C] +
mov eax ecx +
sub eax 22h +
jz loc_103352A  +
sub eax 4 +
jz loc_1033525  +
dec eax  +
jz loc_103352A  +
sub eax 15h +
jz loc_1033520  +
dec eax  +
dec eax  +
jnz loc_103353E  +
add esi 4 +
jmp loc_1033545  +
add esi 5 +
jmp loc_1033545  +
cmp byte ptr [ebp+arg_8+3] bl +
jnz loc_103353E  +
cmp ecx 22h +
jz loc_1033539  +
cmp ecx 27h +
jnz loc_1033545  +
add esi 6 +
jmp loc_1033545  +
call sub_1032469  +
add esi eax +
lea ecx [ebp+var_2C] +
call sub_10333D8  +
cmp [ebp+var_18] bl +
jz loc_1033505  +
lea eax [ebp+var_10] +
push eax  +
push esi  +
call sub_102FCCB  +
cmp eax ebx +
jl loc_10334F1  +
lea ecx [ebp+var_2C] +
call sub_1033407  +
jmp loc_10335D9  +
mov ecx [ebp+var_1C] +
mov eax ecx +
sub eax 22h +
jz loc_10335A2  +
sub eax 4 +
jz loc_103359B  +
dec eax  +
jz loc_10335A2  +
sub eax 15h +
jz loc_1033594  +
dec eax  +
dec eax  +
jnz loc_10335BF  +
mov ecx offset dword_100AB04 +
lea edx [ebp+var_10] +
call sub_1030519  +
jmp loc_10335C9  +
mov ecx offset dword_100AB10 +
jmp loc_103358A  +
mov ecx offset dword_100AAEC +
jmp loc_103358A  +
cmp byte ptr [ebp+arg_8+3] bl +
jnz loc_10335BF  +
cmp ecx 22h +
jz loc_10335B8  +
cmp ecx 27h +
jnz loc_10335D1  +
mov ecx offset dword_100AAF8 +
jmp loc_103358A  +
mov ecx offset dword_100AB1C +
jmp loc_103358A  +
lea eax [ebp+var_10] +
push eax  +
push ecx  +
call sub_10305F1  +
cmp eax ebx +
jl loc_10334F1  +
lea ecx [ebp+var_2C] +
call sub_10333D8  +
cmp [ebp+var_18] bl +
jz loc_103356A  +
push [ebp+arg_4]  +
lea ecx [ebp+var_10] +
call sub_1035D7C  +
lea ecx [ebp+var_10] +
xor esi esi +
call sub_1032B6D  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
or eax 2 +
push eax  +
push dword ptr [ebp+8]  +
mov eax [ecx] +
call dword ptr [eax+10h]  +
push eax  +
call sub_1033432  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10331E7  +
mov dword ptr [esi] offset off_100AF34 +
or dword ptr [esi+48h] 0FFFFFFFFh +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
mov eax [ebp+0Ch] +
push ebx  +
push esi  +
push edi  +
lea edx [ebp-8] +
push edx  +
mov ebx ecx +
mov [ebx+48h] eax +
mov eax [ebp+8] +
lea edx [ebp-10h] +
push edx  +
mov [ebx+38h] eax +
sub esp 10h +
mov edi esp +
lea esi [ebx+40h] +
movs   +
lea eax [ebp-28h] +
mov [ebp-8] eax +
xor eax eax +
inc eax  +
movs   +
mov [ebp-4] eax +
mov [ebp-0Ch] eax +
mov eax [ebx+34h] +
lea ecx [ebp+0Ch] +
mov dword ptr [ebp+0Ch] 2009h +
mov [ebp-10h] ecx +
mov ecx [eax] +
mov eax [ecx] +
movs   +
movs   +
call dword ptr [eax+34h]  +
test eax eax +
jl loc_10336A7  +
push dword ptr [ebp-20h]  +
mov ecx ebx +
call sub_1032CCF  +
test eax eax +
jl loc_10336A7  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
mov eax [ebp+0Ch] +
push ebx  +
or eax 2 +
push eax  +
lea eax [ebp-0Ch] +
xor ebx ebx +
push eax  +
mov eax [ecx] +
mov [ebp-0Ch] ebx +
mov [ebp-8] ebx +
mov [ebp-4] ebx +
call dword ptr [eax+10h]  +
push eax  +
call sub_1033432  +
cmp eax ebx +
jge loc_10336E5  +
mov ebx eax +
jmp loc_103373C  +
push esi  +
push edi  +
mov esi offset dword_100AB28 +
lea edi [ebp-3Ch] +
movs   +
movs   +
movs   +
lea esi [ebp-0Ch] +
lea edi [ebp-30h] +
movs   +
movs   +
movs   +
mov esi offset dword_100AB34 +
lea edi [ebp-24h] +
movs   +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-3Ch] +
push eax  +
movs   +
push 3  +
push ebx  +
movs   +
mov [ebp-18h] ebx +
mov [ebp-14h] ebx +
mov [ebp-10h] ebx +
call loc_10303A8  +
cmp eax ebx +
pop edi  +
pop esi  +
lea ecx [ebp-18h] +
jge loc_103372C  +
mov ebx eax +
jmp loc_1033737  +
push dword ptr [ebp+8]  +
call sub_1035D7C  +
lea ecx [ebp-18h] +
call sub_1032B6D  +
lea ecx [ebp-0Ch] +
call sub_1032B6D  +
mov eax ebx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10331E7  +
mov dword ptr [esi] offset off_100AF60 +
xor eax eax +
mov [esi+48h] eax +
mov [esi+40h] eax +
mov [esi+44h] eax +
or dword ptr [esi+58h] 0FFFFFFFFh +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
push edi  +
mov edi [ebp+8] +
mov esi ecx +
mov dword ptr [ebp-4] 0C00000E5h +
test edi edi +
jz loc_10337CF  +
mov ecx edi +
call sub_102FCAB  +
test al al +
jnz loc_10337CF  +
lea ecx [ebp-4] +
call sub_102FD01  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-4] +
mov dword ptr [ebp-14h] offset aDW7rtmBaseXmlU +
mov dword ptr [ebp-10h] offset aCbasicnodety_2 +
mov dword ptr [ebp-0Ch] 1AFh +
mov dword ptr [ebp-8] offset aNewname0Rtlisl +
call sub_103D6FE  +
jmp loc_10337F3  +
add esi 1Ch +
mov ecx esi +
call sub_1032B6D  +
test edi edi +
jz loc_10337EF  +
mov edx esi +
mov ecx edi +
call sub_102FFAF  +
test eax eax +
jge loc_10337EF  +
mov [ebp-4] eax +
jmp loc_10337F3  +
and dword ptr [ebp-4] 0 +
mov eax [ebp-4] +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
push edi  +
mov edi [ebp+8] +
mov esi ecx +
mov dword ptr [ebp-4] 0C00000E5h +
test edi edi +
jz loc_1033858  +
mov ecx edi +
call sub_102FCAB  +
test al al +
jnz loc_1033858  +
lea ecx [ebp-4] +
call sub_102FD01  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-4] +
mov dword ptr [ebp-14h] offset aDW7rtmBaseXmlU +
mov dword ptr [ebp-10h] offset aCbasicnodety_3 +
mov dword ptr [ebp-0Ch] 1BBh +
mov dword ptr [ebp-8] offset aNew0Rtlislutf8 +
call sub_103D6FE  +
jmp loc_103387C  +
add esi 4 +
mov ecx esi +
call sub_1032B6D  +
test edi edi +
jz loc_1033878  +
mov edx esi +
mov ecx edi +
call sub_102FFAF  +
test eax eax +
jge loc_1033878  +
mov [ebp-4] eax +
jmp loc_103387C  +
and dword ptr [ebp-4] 0 +
mov eax [ebp-4] +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
push edi  +
mov edi [ebp+8] +
mov esi ecx +
mov dword ptr [ebp-4] 0C00000E5h +
test edi edi +
jz loc_10338E1  +
mov ecx edi +
call sub_102FCAB  +
test al al +
jnz loc_10338E1  +
lea ecx [ebp-4] +
call sub_102FD01  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-4] +
mov dword ptr [ebp-14h] offset aDW7rtmBaseXmlU +
mov dword ptr [ebp-10h] offset aCbasicnodety_4 +
mov dword ptr [ebp-0Ch] 1C7h +
mov dword ptr [ebp-8] offset aNew0Rtlislutf8 +
call sub_103D6FE  +
jmp loc_1033905  +
add esi 10h +
mov ecx esi +
call sub_1032B6D  +
test edi edi +
jz loc_1033901  +
mov edx esi +
mov ecx edi +
call sub_102FFAF  +
test eax eax +
jge loc_1033901  +
mov [ebp-4] eax +
jmp loc_1033905  +
and dword ptr [ebp-4] 0 +
mov eax [ebp-4] +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 80h +
mov eax [ebp+0Ch] +
push ebx  +
push esi  +
mov ebx ecx +
mov [ebx+58h] eax +
mov eax [ebp+8] +
push edi  +
mov [ebx+38h] eax +
mov eax [ebx+34h] +
mov dword ptr [ebp-20h] 200Ch +
mov dword ptr [ebp-1Ch] 2005h +
mov dword ptr [ebp-18h] 2004h +
mov dword ptr [ebp-14h] 203h +
mov ecx [eax] +
push 4  +
lea eax [ebp-80h] +
lea edx [ebp-20h] +
mov [ebp-10h] edx +
mov [ebp-8] eax +
pop eax  +
lea edx [ebp-8] +
push edx  +
lea edx [ebp-10h] +
push edx  +
sub esp 10h +
mov edi esp +
lea esi [ebx+50h] +
movs   +
movs   +
movs   +
mov [ebp-4] eax +
mov [ebp-0Ch] eax +
mov eax [ecx] +
movs   +
call dword ptr [eax+48h]  +
test eax eax +
jl loc_10339A6  +
push dword ptr [ebp-48h]  +
mov ecx ebx +
push dword ptr [ebp-60h]  +
push dword ptr [ebp-78h]  +
call sub_1032BDA  +
test eax eax +
jl loc_10339A6  +
push dword ptr [ebp-30h]  +
mov ecx ebx +
call sub_1032CCF  +
test eax eax +
jl loc_10339A6  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 64h +
push ebx  +
push esi  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-64h] +
xor esi esi +
mov [ebp-4] eax +
lea eax [ebp-1Ch] +
mov ebx ecx +
push eax  +
mov eax [ebx] +
mov [ebp-1Ch] esi +
mov [ebp-18h] esi +
mov [ebp-14h] esi +
mov [ebp-10h] esi +
mov [ebp-0Ch] esi +
mov [ebp-8] esi +
call dword ptr [eax+10h]  +
push eax  +
call sub_1033432  +
cmp eax esi +
jge loc_10339F5  +
mov esi eax +
jmp loc_1033A84  +
mov eax [ebx] +
push edi  +
mov ecx ebx +
call dword ptr [eax+8]  +
cmp [eax] esi +
jz loc_1033A21  +
mov eax [ebx] +
mov ecx ebx +
call dword ptr [eax+8]  +
mov esi eax +
lea edi [ebp-64h] +
movs   +
movs   +
movs   +
mov esi offset dword_100AABC +
lea edi [ebp-58h] +
movs   +
movs   +
lea eax [ebp-4Ch] +
movs   +
mov [ebp-4] eax +
mov eax [ebx] +
mov ecx ebx +
call dword ptr [eax+0Ch]  +
mov edi [ebp-4] +
mov esi eax +
mov eax [ebp-4] +
movs   +
movs   +
movs   +
push 0Ch  +
pop ecx  +
add eax ecx +
mov edi eax +
mov esi offset dword_100AAC8 +
movs   +
movs   +
movs   +
add eax ecx +
mov edi eax +
lea esi [ebp-1Ch] +
movs   +
movs   +
movs   +
add eax ecx +
mov edi eax +
lea edx [ebp-10h] +
push edx  +
lea edx [ebp-64h] +
sub eax edx +
push edx  +
add eax ecx +
cdq   +
idiv  ecx +
mov esi offset dword_100AAD4 +
movs   +
movs   +
movs   +
xor esi esi +
push eax  +
push esi  +
call loc_10303A8  +
cmp eax esi +
pop edi  +
lea ecx [ebp-10h] +
jge loc_1033A7C  +
mov esi eax +
jmp loc_1033A87  +
push dword ptr [ebp+8]  +
call sub_1035D7C  +
lea ecx [ebp-10h] +
call sub_1032B6D  +
lea ecx [ebp-1Ch] +
call sub_1032B6D  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10331E7  +
xor eax eax +
mov dword ptr [esi] offset off_100B01C +
or dword ptr [esi+48h] 0FFFFFFFFh +
mov [esi+50h] al +
mov [esi+54h] eax +
mov [esi+58h] eax +
mov [esi+5Ch] eax +
mov [esi+60h] eax +
mov [esi+64h] eax +
mov [esi+68h] eax +
mov [esi+6Ch] eax +
mov [esi+70h] eax +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
lea eax [ebp+var_28] +
push esi  +
mov ebx ecx +
mov [ebp+var_4] eax +
mov eax [ebx] +
push edi  +
call dword ptr [eax+8]  +
cmp dword ptr [eax] 0 +
jz loc_1033B18  +
mov eax [ebx] +
mov ecx ebx +
call dword ptr [eax+8]  +
mov esi eax +
lea edi [ebp+var_28] +
movs   +
movs   +
movs   +
mov esi offset dword_100AABC +
lea edi [ebp+var_1C] +
movs   +
movs   +
lea eax [ebp+var_10] +
movs   +
mov [ebp+var_4] eax +
mov eax [ebx] +
mov ecx ebx +
call dword ptr [eax+0Ch]  +
push [ebp+arg_0]  +
mov esi eax +
lea eax [ebp+var_28] +
push eax  +
mov eax [ebp+var_4] +
lea ecx [ebp+var_28] +
sub eax ecx +
add eax 0Ch +
push 0Ch  +
pop ecx  +
cdq   +
idiv  ecx +
mov edi [ebp+var_4] +
movs   +
movs   +
movs   +
push eax  +
push 0  +
call loc_10303A8  +
pop edi  +
pop esi  +
pop ebx  +
test eax eax +
jl locret_1033B50  +
xor eax eax +
leave   +
retn 4  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
mov ebx [esi+64h] +
push edi  +
xor edi edi +
test ebx ebx +
jbe loc_1033B81  +
mov eax [esi+68h] +
lea eax [eax+edi*4] +
push dword ptr [eax]  +
mov ecx esi +
call sub_1032DAE  +
test eax eax +
jl loc_1033B83  +
inc edi  +
cmp edi ebx +
jb loc_1033B69  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor ecx ecx +
cmp eax ecx +
jz loc_1033BA2  +
mov [eax] ecx +
mov [eax+4] ecx +
mov [eax+8] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1032B6D  +
test [ebp+arg_0] 1 +
jz loc_1033BC5  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call sub_1033B8C  +
push [ebp+arg_4]  +
mov ecx [ebp+arg_0] +
call sub_1035D7C  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
cmp dword ptr [ebx+10h] 0 +
push esi  +
mov esi ecx +
jz loc_1033C30  +
mov eax [esi+54h] +
cmp eax [esi+5Ch] +
jnz loc_1033C22  +
add eax 5 +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
lea ecx [esi+58h] +
call sub_10330F3  +
mov eax [eax] +
test eax eax +
jl loc_1033C97  +
mov eax [esi+54h] +
mov ecx [esi+58h] +
mov [ecx+eax*4] ebx +
inc dword ptr [esi+54h]  +
jmp loc_1033C88  +
mov eax [esi+64h] +
cmp eax [esi+6Ch] +
jnz loc_1033C4E  +
add eax 5 +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
lea ecx [esi+68h] +
call sub_10330F3  +
mov eax [eax] +
test eax eax +
jl loc_1033C97  +
mov ecx [ebp+arg_4] +
cmp ecx 0FFFFFFFFh +
jz loc_1033C7C  +
mov eax [esi+64h] +
test eax eax +
jz loc_1033C7C  +
push edi  +
mov edi [esi+68h] +
sub eax ecx +
shl eax 2 +
push eax  +
lea edi [edi+ecx*4] +
lea eax [edi+4] +
push edi  +
push eax  +
call memmove  +
add esp 0Ch +
mov [edi] ebx +
pop edi  +
jmp loc_1033C85  +
mov eax [esi+64h] +
mov ecx [esi+68h] +
mov [ecx+eax*4] ebx +
inc dword ptr [esi+64h]  +
mov eax [ebx+1Ch] +
mov byte ptr [eax+3Ch] 0 +
mov eax [ebx+1Ch] +
mov [eax+38h] esi +
xor eax eax +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
cmp [ebp+arg_0] 0 +
push ebx  +
push esi  +
push edi  +
mov edi edx +
mov edx [ebp+arg_8] +
mov eax ecx +
mov [ebp+var_4] 0C00000E5h +
mov ebx edx +
jnz loc_1033CCF  +
mov esi 6E1h +
mov edi offset aRtlismicrodomu +
jmp loc_1033D1A  +
mov esi [ebp+arg_4] +
test esi esi +
jnz loc_1033CE2  +
mov esi 6E2h +
mov edi offset aPtoinsertinto0 +
jmp loc_1033D1A  +
test edx edx +
jnz loc_1033CF2  +
mov esi 6E3h +
mov edi offset aPtoinsert0 +
jmp loc_1033D1A  +
and eax 1 +
lea ecx [eax-1] +
test ecx eax +
jz loc_1033D08  +
mov esi 6E4h +
mov edi offset aNoMoreThanOn_0 +
jmp loc_1033D1A  +
add esi 14h +
cmp dword ptr [esi] 0 +
jnz loc_1033D47  +
mov esi 6E5h +
mov edi offset aPtoinsertintoE +
lea ecx [ebp+var_4] +
call sub_102FD01  +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_14] offset aDW7rtmBaseXmlU +
mov [ebp+var_10] offset aWindowsUdomR_3 +
mov [ebp+var_C] esi +
mov [ebp+var_8] edi +
call sub_103D6FE  +
mov eax [ebp+var_4] +
jmp loc_1033D71  +
test eax eax +
jnz loc_1033D4E  +
or edi 0FFFFFFFFh +
mov eax [edx+1Ch] +
mov ecx [eax+38h] +
test ecx ecx +
jz loc_1033D62  +
push edx  +
call sub_1032DAE  +
test eax eax +
jl loc_1033D71  +
mov ecx [esi] +
push edi  +
push ebx  +
call sub_1033BF2  +
test eax eax +
jl loc_1033D71  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push esi  +
push 50h  +
mov esi ecx +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1033D97  +
mov ecx eax +
call sub_1033221  +
jmp loc_1033D99  +
xor eax eax +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push 60h  +
mov esi ecx +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1033DBC  +
mov ecx eax +
call sub_1033750  +
jmp loc_1033DBE  +
xor eax eax +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push 78h  +
mov esi ecx +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1033DE1  +
mov ecx eax +
call sub_1033AA1  +
jmp loc_1033DE3  +
xor eax eax +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push 50h  +
mov esi ecx +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1033E06  +
mov ecx eax +
call sub_1033623  +
jmp loc_1033E08  +
xor eax eax +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
jmp loc_1033E25  +
push esi  +
call sub_1033B8C  +
add esi 0Ch +
cmp esi [ebp+arg_4] +
jnz loc_1033E1C  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1033E47  +
push 0  +
call sub_1033BAB  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10330A5  +
test [ebp+arg_0] 1 +
jz loc_1033E6A  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
and dword ptr [esi+48h] 0 +
call sub_10330A5  +
test [ebp+arg_0] 1 +
jz loc_1033E94  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1033178  +
test [ebp+arg_0] 1 +
jz loc_1033EBA  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_8] +
test esi esi +
jz loc_1033EE9  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1033BD1  +
add [ebp+arg_0] 0Ch +
add [ebp+arg_4] 0Ch +
dec esi  +
jnz loc_1033ED3  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
jmp loc_1033F04  +
push esi  +
call sub_1033E34  +
sub esi 0Ch +
cmp esi [ebp+arg_0] +
jnb loc_1033EFE  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1033F29  +
push 1  +
call sub_1033E50  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1033F45  +
push 1  +
call sub_1033E76  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1033F61  +
push 1  +
call sub_1033EA0  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi [ecx] +
xor edx edx +
cmp esi edx +
jz loc_1033F93  +
mov eax [ecx+4] +
imul eax eax +
add eax esi +
push eax  +
push esi  +
mov [ecx] edx +
mov [ecx+4] edx +
mov [ecx+8] edx +
call sub_1033EF3  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
mov esi ecx +
cmp eax [esi+8] +
jbe loc_103400F  +
push 0Ch  +
pop ecx  +
mul  ecx +
push edx  +
push eax  +
lea edx [ebp+var_8] +
lea ecx [ebp+var_4] +
call sub_1030723  +
mov ecx [ebp+var_4] +
test ecx ecx +
jl loc_1034011  +
push [ebp+var_8]  +
call ??2@YAPAXI@Z  +
mov ebx eax +
pop ecx  +
test ebx ebx +
jnz loc_1033FDC  +
mov ecx 0C0000017h +
jmp loc_1034011  +
push edi  +
mov edi [esi] +
test edi edi +
jz loc_1034006  +
push dword ptr [esi+4]  +
and dword ptr [esi] 0 +
push edi  +
push ebx  +
call sub_1033EC6  +
mov eax [esi+4] +
imul eax eax +
add eax edi +
push eax  +
push edi  +
call sub_1033EF3  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax [ebp+arg_4] +
mov [esi] ebx +
mov [esi+8] eax +
pop edi  +
xor ecx ecx +
mov eax [ebp+arg_0] +
pop esi  +
mov [eax] ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+4] +
push edi  +
mov edi [ebp+arg_4] +
cmp edi eax +
jbe loc_103405F  +
push edi  +
lea eax [ebp+arg_4] +
push eax  +
call sub_1033F9A  +
mov ecx [ebp+arg_4] +
test ecx ecx +
jl loc_103407B  +
mov eax [esi] +
mov ecx edi +
imul ecx ecx +
add ecx eax +
push ecx  +
mov ecx [esi+4] +
imul ecx ecx +
add ecx eax +
push ecx  +
call sub_1033E11  +
jmp loc_1034076  +
jnb loc_1034076  +
mov ecx [esi] +
imul eax eax +
add eax ecx +
push eax  +
mov eax edi +
imul eax eax +
add eax ecx +
push eax  +
call sub_1033EF3  +
mov [esi+4] edi +
xor ecx ecx +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] ecx +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A4h +
push ebx  +
xor ebx ebx +
push esi  +
lea eax [ebp-2Ch] +
push eax  +
mov esi ecx +
mov [ebp-2Ch] ebx +
mov [ebp-28h] ebx +
mov [ebp-24h] ebx +
mov [ebp-20h] ebx +
mov [ebp-1Ch] ebx +
mov [ebp-18h] ebx +
mov [ebp-38h] ebx +
mov [ebp-34h] ebx +
mov [ebp-30h] ebx +
mov [ebp-14h] ebx +
mov [ebp-10h] ebx +
mov [ebp-0Ch] ebx +
mov [ebp-44h] ebx +
mov [ebp-40h] ebx +
mov [ebp-3Ch] ebx +
call sub_1033ADB  +
cmp eax ebx +
jge loc_1034105  +
lea ecx [ebp-44h] +
mov ebx eax +
call sub_1032B6D  +
lea ecx [ebp-14h] +
call sub_1033F6A  +
lea ecx [ebp-38h] +
call sub_1032B6D  +
lea ecx [ebp-20h] +
call sub_1032B6D  +
lea ecx [ebp-2Ch] +
call sub_1032B6D  +
jmp loc_1034337  +
mov eax [esi+64h] +
push edi  +
cmp eax ebx +
jz loc_10341B6  +
push eax  +
lea eax [ebp-4] +
push eax  +
lea ecx [ebp-14h] +
mov [ebp-8] ebx +
call sub_1034021  +
mov eax [eax] +
cmp eax ebx +
jge loc_103412E  +
mov ebx eax +
jmp loc_103430E  +
xor edi edi +
cmp [esi+64h] ebx +
jz loc_103416A  +
mov eax [ebp-14h] +
mov [ebp-4] eax +
mov eax [esi+68h] +
mov eax [eax+edi*4] +
mov ecx [eax+1Ch] +
cmp [ecx+3Ch] bl +
jnz loc_1034160  +
push dword ptr [ebp+0Ch]  +
mov eax [ecx] +
push dword ptr [ebp-4]  +
call dword ptr [eax+14h]  +
cmp eax ebx +
jl loc_1034127  +
mov eax [ebp-4] +
mov eax [eax] +
add [ebp-8] eax +
add dword ptr [ebp-4] 0Ch +
inc edi  +
cmp edi [esi+64h] +
jnz loc_103413B  +
lea eax [ebp-38h] +
push eax  +
push dword ptr [ebp-8]  +
call sub_102FCCB  +
cmp eax ebx +
jl loc_1034127  +
xor edi edi +
cmp [esi+64h] ebx +
jz loc_10341B6  +
mov eax [ebp-14h] +
mov [ebp-4] eax +
mov eax [esi+68h] +
mov eax [eax+edi*4] +
mov eax [eax+1Ch] +
cmp [eax+3Ch] bl +
jnz loc_10341AC  +
mov ecx [ebp-4] +
lea edx [ebp-38h] +
call sub_1030519  +
cmp eax ebx +
jl loc_1034127  +
mov ecx [ebp-4] +
call sub_1032B6D  +
add dword ptr [ebp-4] 0Ch +
inc edi  +
cmp edi [esi+64h] +
jnz loc_1034187  +
mov eax [esi+54h] +
cmp eax ebx +
jz loc_1034290  +
mov [ebp-8] ebx +
cmp eax [ebp-10h] +
jbe loc_10341E0  +
push eax  +
lea eax [ebp-4] +
push eax  +
lea ecx [ebp-14h] +
call sub_1034021  +
mov eax [eax] +
cmp eax ebx +
jl loc_1034127  +
xor edi edi +
cmp [esi+54h] ebx +
jz loc_1034227  +
mov eax [ebp-14h] +
mov [ebp-4] eax +
mov eax [esi+58h] +
mov eax [eax+edi*4] +
mov ecx [eax+1Ch] +
cmp [ecx+3Ch] bl +
jnz loc_103421D  +
push dword ptr [ebp+0Ch]  +
mov eax [ecx] +
push dword ptr [ebp-4]  +
call dword ptr [eax+14h]  +
cmp eax ebx +
jl loc_1034127  +
mov eax [ebp-4] +
mov ecx [ebp-8] +
mov eax [eax] +
lea eax [ecx+eax+1] +
mov [ebp-8] eax +
add dword ptr [ebp-4] 0Ch +
inc edi  +
cmp edi [esi+54h] +
jnz loc_10341ED  +
lea eax [ebp-20h] +
push eax  +
push dword ptr [ebp-8]  +
call sub_102FCCB  +
cmp eax ebx +
jl loc_1034127  +
xor edi edi +
cmp [esi+54h] ebx +
jz loc_1034290  +
mov eax [ebp-14h] +
mov [ebp+0Ch] eax +
mov eax [esi+58h] +
mov eax [eax+edi*4] +
mov eax [eax+1Ch] +
cmp [eax+3Ch] bl +
jnz loc_1034286  +
lea edx [ebp-20h] +
mov ecx offset dword_100AAE0 +
call sub_1030519  +
cmp eax ebx +
jl loc_1034127  +
mov ecx [ebp+0Ch] +
lea edx [ebp-20h] +
call sub_1030519  +
cmp eax ebx +
jl loc_1034127  +
mov ecx [ebp+0Ch] +
call sub_1032B6D  +
add dword ptr [ebp+0Ch] 0Ch +
inc edi  +
cmp edi [esi+54h] +
jnz loc_1034248  +
mov esi offset dword_100AA98 +
lea edi [ebp-0A4h] +
movs   +
movs   +
movs   +
lea esi [ebp-2Ch] +
lea edi [ebp-98h] +
movs   +
movs   +
movs   +
lea esi [ebp-20h] +
lea edi [ebp-8Ch] +
movs   +
movs   +
movs   +
mov eax offset dword_100AAA4 +
mov esi eax +
lea edi [ebp-80h] +
movs   +
movs   +
movs   +
lea esi [ebp-38h] +
lea edi [ebp-74h] +
movs   +
movs   +
movs   +
mov esi offset dword_100AAB0 +
lea edi [ebp-68h] +
movs   +
movs   +
movs   +
lea esi [ebp-2Ch] +
lea edi [ebp-5Ch] +
movs   +
movs   +
movs   +
mov esi eax +
lea edi [ebp-50h] +
movs   +
lea eax [ebp-44h] +
push eax  +
lea eax [ebp-0A4h] +
push eax  +
movs   +
push 8  +
push ebx  +
movs   +
call loc_10303A8  +
cmp eax ebx +
lea ecx [ebp-44h] +
jge loc_1034306  +
mov ebx eax +
jmp loc_1034311  +
push dword ptr [ebp+8]  +
call sub_1035D7C  +
lea ecx [ebp-44h] +
call sub_1032B6D  +
lea ecx [ebp-14h] +
call sub_1033F6A  +
lea ecx [ebp-38h] +
call sub_1032B6D  +
lea ecx [ebp-20h] +
call sub_1032B6D  +
lea ecx [ebp-2Ch] +
call sub_1032B6D  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+18h] +
push edi  +
xor edi edi +
cmp eax edi +
jz loc_103435C  +
push eax  +
mov [esi+18h] edi +
call sub_1033F16  +
mov eax [esi+14h] +
cmp eax edi +
jz loc_103436C  +
push eax  +
mov [esi+14h] edi +
call sub_1033F4E  +
mov eax [esi+10h] +
cmp eax edi +
jz loc_103437C  +
push eax  +
mov [esi+10h] edi +
call sub_1033F32  +
mov eax [esi+0Ch] +
cmp eax edi +
jz loc_103438C  +
push eax  +
mov [esi+0Ch] edi +
call sub_1033F16  +
mov [esi+8] edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push 20h  +
mov esi ecx +
call ??2@YAPAXI@Z  +
pop ecx  +
xor ecx ecx +
cmp eax ecx +
jz loc_10343C0  +
mov [eax+8] ecx +
mov [eax] ecx +
mov [eax+4] ecx +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
mov [eax+18h] ecx +
jmp loc_10343C2  +
xor eax eax +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1034344  +
test [ebp+arg_0] 1 +
jz loc_10343E5  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1034404  +
push 1  +
call sub_10343CB  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ecx  +
call sub_10343F1  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+4] +
push offset loc_103440D  +
mov ecx edi +
call sub_1032B9B  +
lea ecx [esi+14h] +
call sub_1032B3F  +
xor eax eax +
mov [edi+0Ch] eax +
mov [edi+8] eax +
mov ecx [esi] +
pop edi  +
cmp ecx eax +
jz loc_103444E  +
mov [esi] eax +
mov eax [ecx] +
pop esi  +
jmp dword ptr [eax]  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_103441B  +
test [ebp+arg_0] 1 +
jz loc_103446F  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_103448E  +
push 1  +
call sub_1034455  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
xor esi esi +
lea ecx [ebp+var_4] +
mov [ebp+var_4] esi +
mov [eax] esi +
call sub_1034397  +
test eax eax +
jnz loc_10344D5  +
mov edi 4B8h +
mov ebx offset aNewchild_alloc +
mov [ebp+arg_0] 0C0000017h +
cmp [ebp+var_4] esi +
jz loc_1034501  +
push [ebp+var_4]  +
jmp loc_10344FC  +
mov esi [ebp+var_4] +
lea ebx [esi+0Ch] +
mov ecx ebx +
call sub_1033D7D  +
test eax eax +
jnz loc_1034523  +
mov edi 4B9h +
mov ebx offset aNewchildText_a +
mov [ebp+arg_0] 0C0000017h +
test esi esi +
jz loc_1034501  +
push esi  +
call sub_10343F1  +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+arg_0] +
mov [ebp+var_14] offset aDW7rtmBaseXmlU +
mov [ebp+var_10] offset aCmicrodomupdat +
mov [ebp+var_C] edi +
mov [ebp+var_8] ebx +
call sub_103D6FE  +
jmp loc_1034544  +
mov eax [ebx] +
and dword ptr [eax+38h] 0 +
mov [eax+34h] edi +
push 1  +
mov [esi+1Ch] eax +
mov eax [ebp+arg_0] +
lea ecx [edi+4] +
push esi  +
push ecx  +
mov [eax] esi +
call sub_1032AF1  +
and [ebp+arg_0] 0 +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
xor esi esi +
lea ecx [ebp+var_4] +
mov [ebp+var_4] esi +
mov [eax] esi +
call sub_1034397  +
test eax eax +
jnz loc_1034591  +
mov edi 4D3h +
mov ebx offset aNewchild_alloc +
mov [ebp+arg_0] 0C0000017h +
cmp [ebp+var_4] esi +
jz loc_10345BD  +
push [ebp+var_4]  +
jmp loc_10345B8  +
mov esi [ebp+var_4] +
lea ebx [esi+14h] +
mov ecx ebx +
call sub_1033DC7  +
test eax eax +
jnz loc_10345DF  +
mov edi 4D4h +
mov ebx offset aNewchildElemen +
mov [ebp+arg_0] 0C0000017h +
test esi esi +
jz loc_10345BD  +
push esi  +
call sub_10343F1  +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+arg_0] +
mov [ebp+var_14] offset aDW7rtmBaseXmlU +
mov [ebp+var_10] offset aCmicrodomupd_0 +
mov [ebp+var_C] edi +
mov [ebp+var_8] ebx +
call sub_103D6FE  +
jmp loc_1034600  +
mov eax [ebx] +
and dword ptr [eax+38h] 0 +
mov [eax+34h] edi +
push 1  +
mov [esi+1Ch] eax +
mov eax [ebp+arg_0] +
lea ecx [edi+4] +
push esi  +
push ecx  +
mov [eax] esi +
call sub_1032AF1  +
and [ebp+arg_0] 0 +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
xor esi esi +
lea ecx [ebp+var_4] +
mov [ebp+var_4] esi +
mov [eax] esi +
call sub_1034397  +
test eax eax +
jnz loc_103464D  +
mov edi 4F1h +
mov ebx offset aNewchild_alloc +
mov [ebp+arg_0] 0C0000017h +
cmp [ebp+var_4] esi +
jz loc_1034679  +
push [ebp+var_4]  +
jmp loc_1034674  +
mov esi [ebp+var_4] +
lea ebx [esi+10h] +
mov ecx ebx +
call sub_1033DA2  +
test eax eax +
jnz loc_103469B  +
mov edi 4F2h +
mov ebx offset aNewchildAttrib +
mov [ebp+arg_0] 0C0000017h +
test esi esi +
jz loc_1034679  +
push esi  +
call sub_10343F1  +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+arg_0] +
mov [ebp+var_14] offset aDW7rtmBaseXmlU +
mov [ebp+var_10] offset aCmicrodomupd_1 +
mov [ebp+var_C] edi +
mov [ebp+var_8] ebx +
call sub_103D6FE  +
jmp loc_10346BC  +
mov eax [ebx] +
and dword ptr [eax+38h] 0 +
mov [eax+34h] edi +
push 1  +
mov [esi+1Ch] eax +
mov eax [ebp+arg_0] +
lea ecx [edi+4] +
push esi  +
push ecx  +
mov [eax] esi +
call sub_1032AF1  +
and [ebp+arg_0] 0 +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
cmp [ebp+arg_0] 0 +
mov [ebp+var_4] 0C00000E5h +
jnz loc_1034712  +
lea ecx [ebp+var_4] +
call sub_102FD01  +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_14] offset aDW7rtmBaseXmlU +
mov [ebp+var_10] offset aWindowsUdomR_4 +
mov [ebp+var_C] 598h +
mov [ebp+var_8] offset aRtlismicrodo_0 +
call sub_103D6FE  +
jmp loc_103471E  +
push [ebp+arg_0]  +
call sub_103447B  +
and [ebp+var_4] 0 +
cmp [ebp+var_4] 0 +
jge locret_103472D  +
push [ebp+var_4]  +
call ds:RtlRaiseStatus  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
push esi  +
push edi  +
xor eax eax +
lea edi [ebp+var_10] +
xor ebx ebx +
stos   +
mov edi [ebp+arg_C] +
mov [ebp+var_8] edx +
mov [ebp+var_14] ecx +
mov [ebp+var_4] 0C00000E5h +
mov [ebp+var_C] ebx +
cmp edi ebx +
jz loc_1034765  +
mov eax [ebp+var_10] +
mov [edi] eax +
cmp [ebp+arg_0] ebx +
jnz loc_1034776  +
mov esi 5B5h +
mov edi offset aRtlismicrodomu +
jmp loc_10347DA  +
cmp edx ebx +
jz loc_1034791  +
mov ecx edx +
call sub_102FCAB  +
test al al +
jnz loc_1034791  +
mov esi 5B6h +
mov edi offset aNamespace0Rtli +
jmp loc_10347DA  +
mov esi [ebp+arg_4] +
cmp esi ebx +
jz loc_10347AF  +
mov ecx esi +
call sub_102FCAB  +
test al al +
jnz loc_10347AF  +
mov esi 5B7h +
mov edi offset aPrefix0Rtlislu +
jmp loc_10347DA  +
cmp [ebp+var_8] ebx +
jnz loc_10347C4  +
cmp esi ebx +
jz loc_10347C4  +
mov esi 5B8h +
mov edi offset aNamespace0Name +
jmp loc_10347DA  +
mov ecx [ebp+arg_8] +
call sub_102FCAB  +
test al al +
jnz loc_10347EA  +
mov esi 5B9h +
mov edi offset aRtlislutf8st_7 +
lea ecx [ebp+var_4] +
call sub_102FD01  +
mov [ebp+var_1C] esi +
mov [ebp+var_18] edi +
jmp loc_1034804  +
cmp edi ebx +
jnz loc_1034826  +
lea ecx [ebp+var_4] +
call sub_102FD01  +
mov [ebp+var_1C] 5BAh +
mov [ebp+var_18] offset aNotNullChec_20 +
lea eax [ebp+var_24] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_20] offset aWindowsUdomR_5 +
mov [ebp+var_24] offset aDW7rtmBaseXmlU +
call sub_103D6FE  +
mov eax [ebp+var_4] +
jmp loc_10348C0  +
mov ecx [ebp+arg_0] +
lea eax [ebp+var_C] +
push eax  +
mov [ebp+arg_4] ecx +
call sub_1034553  +
cmp eax ebx +
jl loc_10348C0  +
mov edi [ebp+var_C] +
cmp edi ebx +
jnz loc_1034845  +
int 3  +
push [ebp+arg_8]  +
mov ecx [edi+1Ch] +
push [ebp+var_8]  +
push esi  +
call sub_1032BDA  +
cmp eax ebx +
jl loc_10348C0  +
test byte ptr [ebp+var_14] 1 +
mov eax [ebp+arg_C] +
mov [eax] edi +
jz loc_10348BE  +
cmp [ebp+var_8] ebx +
jz loc_10348BE  +
mov ecx [ebp+arg_4] +
lea eax [ebp+arg_8] +
push eax  +
mov [ebp+arg_8] ebx +
call sub_103460F  +
cmp eax ebx +
jl loc_10348C0  +
mov eax esi +
neg eax  +
sbb eax eax +
mov ecx offset dword_100B24C +
and eax ecx +
cmp esi ebx +
jz loc_103488E  +
mov ecx esi +
mov esi [ebp+arg_8] +
push ecx  +
mov ecx [esi+1Ch] +
push ebx  +
push eax  +
call sub_1032BDA  +
cmp eax ebx +
jl loc_10348C0  +
mov ecx [esi+1Ch] +
push [ebp+var_8]  +
mov eax [ecx] +
call dword ptr [eax+24h]  +
cmp eax ebx +
jl loc_10348C0  +
mov ecx [edi+14h] +
push 0FFFFFFFFh  +
push esi  +
call sub_1033BF2  +
cmp eax ebx +
jl loc_10348C0  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
and [ebp+var_8] 0 +
push ebx  +
push esi  +
push edi  +
mov ebx edx +
xor eax eax +
lea edi [ebp+var_C] +
mov [ebp+var_10] ecx +
mov [ebp+var_4] 0C00000E5h +
stos   +
test ebx ebx +
jz loc_10348F6  +
mov eax [ebp+var_C] +
mov [ebx] eax +
cmp [ebp+arg_0] 0 +
jnz loc_1034908  +
mov esi 5EEh +
mov edi offset aRtlismicrodomu +
jmp loc_103491F  +
test ecx ecx +
jnz loc_103492F  +
call sub_102FCAB  +
test al al +
jnz loc_103492F  +
mov esi 5EFh +
mov edi offset aValue0Rtlisl_0 +
lea ecx [ebp+var_4] +
call sub_102FD01  +
mov [ebp+var_18] esi +
mov [ebp+var_14] edi +
jmp loc_1034949  +
test ebx ebx +
jnz loc_1034965  +
lea ecx [ebp+var_4] +
call sub_102FD01  +
mov [ebp+var_18] 5F0h +
mov [ebp+var_14] offset aNotNullChec_20 +
lea eax [ebp+var_20] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_1C] offset aWindowsUdomR_6 +
mov [ebp+var_20] offset aDW7rtmBaseXmlU +
call sub_103D6FE  +
jmp loc_1034997  +
mov ecx [ebp+arg_0] +
lea eax [ebp+var_8] +
push eax  +
call sub_1034497  +
test eax eax +
jl loc_103498C  +
mov esi [ebp+var_8] +
test esi esi +
jnz loc_103497D  +
int 3  +
push [ebp+var_10]  +
mov ecx [esi+1Ch] +
call sub_1032CCF  +
test eax eax +
jge loc_1034991  +
mov [ebp+var_4] eax +
jmp loc_1034997  +
and [ebp+var_4] 0 +
mov [ebx] esi +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
and [ebp+var_8] 0 +
push ebx  +
push esi  +
push edi  +
xor eax eax +
lea edi [ebp+var_C] +
stos   +
mov edi [ebp+arg_8] +
mov ebx edx +
mov [ebp+var_10] ecx +
mov [ebp+var_4] 0C00000E5h +
test edi edi +
jz loc_10349D3  +
mov eax [ebp+var_C] +
mov [edi] eax +
cmp [ebp+arg_0] 0 +
jnz loc_10349E5  +
mov esi 60Eh +
mov edi offset aRtlismicrodomu +
jmp loc_1034A2F  +
test ecx ecx +
jz loc_10349FE  +
call sub_102FCAB  +
test al al +
jnz loc_10349FE  +
mov esi 60Fh +
mov edi offset aNamespace0Rtli +
jmp loc_1034A2F  +
test ebx ebx +
jz loc_1034A19  +
mov ecx ebx +
call sub_102FCAB  +
test al al +
jnz loc_1034A19  +
mov esi 610h +
mov edi offset aPrefix0Rtlislu +
jmp loc_1034A2F  +
mov ecx [ebp+arg_4] +
call sub_102FCAB  +
test al al +
jnz loc_1034A3F  +
mov esi 611h +
mov edi offset aRtlislutf8st_7 +
lea ecx [ebp+var_4] +
call sub_102FD01  +
mov [ebp+var_18] esi +
mov [ebp+var_14] edi +
jmp loc_1034A59  +
test edi edi +
jnz loc_1034A75  +
lea ecx [ebp+var_4] +
call sub_102FD01  +
mov [ebp+var_18] 612h +
mov [ebp+var_14] offset aNotNullChec_20 +
lea eax [ebp+var_20] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_1C] offset aWindowsUdomR_7 +
mov [ebp+var_20] offset aDW7rtmBaseXmlU +
call sub_103D6FE  +
jmp loc_1034AAB  +
mov ecx [ebp+arg_0] +
lea eax [ebp+var_8] +
push eax  +
call sub_103460F  +
test eax eax +
jl loc_1034AA0  +
mov esi [ebp+var_8] +
test esi esi +
jnz loc_1034A8D  +
int 3  +
push [ebp+arg_4]  +
mov ecx [esi+1Ch] +
push [ebp+var_10]  +
push ebx  +
call sub_1032BDA  +
test eax eax +
jge loc_1034AA5  +
mov [ebp+var_4] eax +
jmp loc_1034AAB  +
and [ebp+var_4] 0 +
mov [edi] esi +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
mov esi ecx +
mov ecx [esi+64h] +
xor edx edx +
push edi  +
mov dword ptr [ebp-4] 0C00000E5h +
test ecx ecx +
jz loc_1034AE9  +
mov eax [esi+68h] +
mov edi [eax] +
cmp dword ptr [edi+0Ch] 0 +
jz loc_1034B30  +
inc edx  +
add eax 4 +
cmp edx ecx +
jnz loc_1034AD9  +
mov ecx esi +
call sub_1033B59  +
test eax eax +
jl loc_1034B2A  +
mov ecx [esi+34h] +
and dword ptr [ebp-4] 0 +
lea eax [ebp-4] +
push eax  +
call sub_1034497  +
test eax eax +
jl loc_1034B2A  +
mov edi [ebp-4] +
push dword ptr [ebp+8]  +
mov ecx [edi+1Ch] +
call sub_1032CCF  +
test eax eax +
jl loc_1034B2A  +
push 0FFFFFFFFh  +
push edi  +
mov ecx esi +
call sub_1033BF2  +
test eax eax +
jl loc_1034B2A  +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
lea ecx [ebp-4] +
call sub_102FD01  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-4] +
mov dword ptr [ebp-14h] offset aDW7rtmBaseXmlU +
mov dword ptr [ebp-10h] offset aCelementmodifi +
mov dword ptr [ebp-0Ch] 44Fh +
mov dword ptr [ebp-8] offset aThisChildlistU +
call sub_103D6FE  +
mov eax [ebp-4] +
jmp loc_1034B2A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
xor esi esi +
lea ecx [ebp+var_4] +
mov [ebp+var_4] esi +
mov [eax] esi +
call sub_1034397  +
test eax eax +
jnz loc_1034BA8  +
mov edi 49Dh +
mov ebx offset aNewchild_alloc +
mov [ebp+arg_0] 0C0000017h +
cmp [ebp+var_4] esi +
jz loc_1034BD4  +
push [ebp+var_4]  +
jmp loc_1034BCF  +
mov esi [ebp+var_4] +
lea ebx [esi+18h] +
mov ecx ebx +
call sub_1033DEC  +
test eax eax +
jnz loc_1034BF6  +
mov edi 49Eh +
mov ebx offset aNewchildCommen +
mov [ebp+arg_0] 0C0000017h +
test esi esi +
jz loc_1034BD4  +
push esi  +
call sub_10343F1  +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+arg_0] +
mov [ebp+var_14] offset aDW7rtmBaseXmlU +
mov [ebp+var_10] offset aCmicrodomupd_2 +
mov [ebp+var_C] edi +
mov [ebp+var_8] ebx +
call sub_103D6FE  +
jmp loc_1034C17  +
mov eax [ebx] +
and dword ptr [eax+38h] 0 +
mov [eax+34h] edi +
push 1  +
mov [esi+1Ch] eax +
mov eax [ebp+arg_0] +
lea ecx [edi+4] +
push esi  +
push ecx  +
mov [eax] esi +
call sub_1032AF1  +
and [ebp+arg_0] 0 +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
mov eax [ebp+arg_8] +
push ebx  +
mov ebx ecx +
mov ecx [ebp+arg_14] +
and dword ptr [ecx] 0 +
push esi  +
push edi  +
mov [ebp+var_4] 0C00000E5h +
mov [ebp+var_10] eax +
cmp eax [ebx+18h] +
jb loc_1034C57  +
mov esi 52Dh +
mov edi offset aUlindexUpdatec +
jmp loc_1034CCB  +
mov ecx [ebx+14h] +
shl eax 2 +
cmp dword ptr [eax+ecx] 0 +
mov [ebp+var_8] eax +
jnz loc_1034D78  +
lea edx [ebp+var_18] +
push edx  +
lea edx [ebp+var_20] +
push edx  +
sub esp 10h +
mov edi esp +
lea esi [ebp+arg_0] +
movs   +
movs   +
lea eax [ebp+var_40] +
mov [ebp+var_18] eax +
xor eax eax +
inc eax  +
lea ecx [ebp+var_C] +
mov [ebp+var_20] ecx +
mov ecx [ebx] +
movs   +
mov [ebp+var_14] eax +
mov [ebp+var_C] 2008h +
mov [ebp+var_1C] eax +
mov eax [ecx] +
movs   +
call dword ptr [eax+50h]  +
xor esi esi +
cmp eax esi +
jl loc_1034D85  +
movzx eax [ebp+var_38] +
dec eax  +
jz loc_1034D41  +
dec eax  +
jz loc_1034D2A  +
dec eax  +
jz loc_1034D13  +
sub eax 5 +
jz loc_1034CFB  +
mov esi 54Dh +
mov edi offset aFalse +
lea ecx [ebp+var_4] +
call sub_102FD01  +
lea eax [ebp+var_28] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_28] offset aDW7rtmBaseXmlU +
mov [ebp+var_24] offset aCmicrodomupd_3 +
mov [ebp+var_20] esi +
mov [ebp+var_1C] edi +
call sub_103D6FE  +
mov eax [ebp+var_4] +
jmp loc_1034D85  +
lea eax [ebp+var_4] +
push eax  +
mov ecx ebx +
call sub_1034B6A  +
cmp eax esi +
jl loc_1034D85  +
mov eax [ebp+var_4] +
cmp [eax+18h] esi +
jnz loc_1034D58  +
int 3  +
lea eax [ebp+var_4] +
push eax  +
mov ecx ebx +
call sub_1034497  +
cmp eax esi +
jl loc_1034D85  +
mov eax [ebp+var_4] +
cmp [eax+0Ch] esi +
jmp loc_1034D10  +
lea eax [ebp+var_4] +
push eax  +
mov ecx ebx +
call sub_103460F  +
cmp eax esi +
jl loc_1034D85  +
mov eax [ebp+var_4] +
cmp [eax+10h] esi +
jmp loc_1034D10  +
lea eax [ebp+var_4] +
push eax  +
mov ecx ebx +
call sub_1034553  +
cmp eax esi +
jl loc_1034D85  +
mov eax [ebp+var_4] +
cmp [eax+14h] esi +
jmp loc_1034D10  +
mov ecx [ebx+14h] +
mov edx [ebp+var_8] +
push [ebp+var_10]  +
mov [edx+ecx] eax +
mov eax [eax+1Ch] +
push [ebp+arg_10]  +
mov edx [eax] +
mov ecx eax +
call dword ptr [edx+28h]  +
cmp eax esi +
jl loc_1034D85  +
mov eax [ebp+var_8] +
mov ecx [ebx+14h] +
mov eax [eax+ecx] +
mov ecx [ebp+arg_14] +
mov [ecx] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
xor eax eax +
lea edi [ebp+var_8] +
mov [ebp+var_4] 0C00000E5h +
stos   +
test ebx ebx +
jz loc_1034DB4  +
mov eax [ebp+var_8] +
mov [ebx] eax +
mov ecx [ebp+arg_0] +
and [ebp+var_8] 0 +
test ecx ecx +
jnz loc_1034DF1  +
lea ecx [ebp+var_4] +
call sub_102FD01  +
lea eax [ebp+var_18] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_18] offset aDW7rtmBaseXmlU +
mov [ebp+var_14] offset aWindowsUdomR_8 +
mov [ebp+var_10] 632h +
mov [ebp+var_C] offset aPcontext0 +
call sub_103D6FE  +
jmp loc_1034E1A  +
lea eax [ebp+var_8] +
push eax  +
push 0  +
sub esp 10h +
mov edi esp +
lea esi [ebp+arg_4] +
movs   +
movs   +
movs   +
movs   +
call sub_1034C26  +
test eax eax +
jge loc_1034E11  +
mov [ebp+var_4] eax +
jmp loc_1034E1A  +
mov eax [ebp+var_8] +
and [ebp+var_4] 0 +
mov [ebx] eax +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov ecx [ebp+arg_14] +
push esi  +
push edi  +
xor eax eax +
lea edi [ebp+var_8] +
mov [ebp+var_4] 0C00000E5h +
stos   +
test ecx ecx +
jz loc_1034E4C  +
mov eax [ebp+var_8] +
mov [ecx] eax +
cmp [ebp+arg_C] 0FFFFFFFFh +
jnz loc_1034E84  +
lea ecx [ebp+var_4] +
call sub_102FD01  +
lea eax [ebp+var_18] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_18] offset aDW7rtmBaseXmlU +
mov [ebp+var_14] offset aRtlpgenericmic +
mov [ebp+var_10] 647h +
mov [ebp+var_C] offset aTempnodeWindow +
call sub_103D6FE  +
jmp loc_1034EA5  +
sub esp 10h +
mov edi esp +
push [ebp+arg_0]  +
lea esi [ebp+arg_4] +
movs   +
movs   +
movs   +
movs   +
call sub_1034D91  +
test eax eax +
jge loc_1034EA1  +
mov [ebp+var_4] eax +
jmp loc_1034EA5  +
and [ebp+var_4] 0 +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
sub esp 5Ch +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
lea ecx [ebp-4] +
push ecx  +
lea ecx [ebp-8] +
push ecx  +
lea ecx [ebp-0Ch] +
mov [ebx+48h] eax +
mov eax [ebp+8] +
push ecx  +
sub esp 10h +
mov edi esp +
lea esi [ebx+40h] +
movs   +
movs   +
mov [ebx+38h] eax +
mov eax [ebx+34h] +
mov eax [eax] +
movs   +
push eax  +
movs   +
call sub_103D159  +
test eax eax +
jl loc_1035054  +
push dword ptr [ebp-4]  +
mov ecx ebx +
push dword ptr [ebp-8]  +
push dword ptr [ebp-0Ch]  +
call sub_1032BDA  +
test eax eax +
jl loc_1035054  +
mov eax [ebx+34h] +
mov dword ptr [ebp-14h] 2000h +
mov dword ptr [ebp-10h] 2001h +
mov ecx [eax] +
push 2  +
lea eax [ebp-5Ch] +
lea edx [ebp-14h] +
mov [ebp-24h] edx +
mov [ebp-1Ch] eax +
pop eax  +
lea edx [ebp-1Ch] +
push edx  +
lea edx [ebp-24h] +
push edx  +
sub esp 10h +
mov edi esp +
lea esi [ebx+40h] +
movs   +
movs   +
movs   +
mov [ebp-18h] eax +
mov [ebp-20h] eax +
mov eax [ecx] +
movs   +
call dword ptr [eax+4Ch]  +
test eax eax +
jl loc_1035054  +
mov eax [ebx+34h] +
mov ecx [eax] +
mov edx [ecx] +
lea eax [ebx+54h] +
push eax  +
sub esp 10h +
mov edi esp +
lea esi [ebp-54h] +
movs   +
movs   +
movs   +
movs   +
call dword ptr [edx+68h]  +
test eax eax +
jl loc_1035054  +
mov eax [ebp-3Ch] +
mov eax [eax+4] +
push dword ptr [ebx+54h]  +
mov [ebx+64h] eax +
lea eax [ebp+0Ch] +
lea ecx [ebx+58h] +
push eax  +
call sub_10330F3  +
mov eax [eax] +
test eax eax +
jl loc_1035054  +
and dword ptr [ebp+0Ch] 0 +
cmp dword ptr [ebx+54h] 0 +
jz loc_1034FF9  +
mov eax [ebx+34h] +
mov ecx [eax] +
mov eax [ecx] +
lea edx [ebp-2Ch] +
push edx  +
push dword ptr [ebp+0Ch]  +
lea esi [ebp-54h] +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
call dword ptr [eax+64h]  +
test eax eax +
jl loc_1035054  +
mov eax [ebx+58h] +
mov ecx [ebp+0Ch] +
lea eax [eax+ecx*4] +
mov ecx [ebx+34h] +
push eax  +
push ebx  +
sub esp 10h +
mov edi esp +
lea esi [ebp-2Ch] +
movs   +
movs   +
movs   +
movs   +
call sub_1034C26  +
test eax eax +
jl loc_1035054  +
inc dword ptr [ebp+0Ch]  +
mov eax [ebp+0Ch] +
cmp eax [ebx+54h] +
jnz loc_1034FA6  +
push dword ptr [ebx+64h]  +
lea eax [ebp+0Ch] +
lea ecx [ebx+68h] +
push eax  +
call sub_10330F3  +
mov eax [eax] +
xor ecx ecx +
cmp eax ecx +
jl loc_1035054  +
mov [ebp+0Ch] ecx +
cmp [ebx+64h] ecx +
jz loc_1035052  +
mov [ebp+8] ecx +
mov eax [ebx+68h] +
mov ecx [ebp+0Ch] +
lea eax [eax+ecx*4] +
mov ecx [ebx+34h] +
push eax  +
mov eax [ebp-3Ch] +
mov esi [eax] +
add esi [ebp+8] +
push ebx  +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
call sub_1034C26  +
test eax eax +
jl loc_1035054  +
inc dword ptr [ebp+0Ch]  +
mov eax [ebp+0Ch] +
add dword ptr [ebp+8] 10h +
cmp eax [ebx+64h] +
jnz loc_103501B  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
push esi  +
mov ebx ecx +
mov ecx [ebp+arg_0] +
xor esi esi +
push edi  +
mov [ebp+var_4] 0C00000E5h +
cmp ecx esi +
jnz loc_10350B5  +
lea ecx [ebp+var_4] +
call sub_102FD01  +
lea eax [ebp+var_18] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_18] offset aDW7rtmBaseXmlU +
mov [ebp+var_14] offset aCmicrodomupd_4 +
mov [ebp+var_10] 475h +
mov [ebp+var_C] offset aSourcedom0 +
call sub_103D6FE  +
mov edi [ebp+var_4] +
jmp loc_103518D  +
push ebx  +
call sub_103319A  +
cmp eax esi +
jge loc_10350C6  +
mov edi eax +
jmp loc_103518D  +
mov ecx [ebx] +
lea edx [ebp+var_18] +
mov [ebp+var_8] esi +
mov [ebp+var_4] esi +
mov eax [ecx] +
push edx  +
call dword ptr [eax+10h]  +
cmp eax esi +
jge loc_10350F3  +
mov edi eax +
mov eax [ebp+var_8] +
cmp eax esi +
jz loc_103518D  +
mov [ebp+var_8] esi +
mov [ebp+var_4] esi +
jmp loc_1035187  +
mov ecx [ebx] +
mov eax [ecx] +
lea edx [ebp+var_28] +
push edx  +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_18] +
movs   +
movs   +
movs   +
movs   +
call dword ptr [eax+0Ch]  +
test eax eax +
jge loc_1035121  +
mov edi eax +
mov eax [ebp+var_8] +
test eax eax +
jz loc_103518D  +
and [ebp+var_8] 0 +
and [ebp+var_4] 0 +
jmp loc_1035187  +
mov ecx [ebx] +
mov eax [ecx] +
lea edx [ebp+var_8] +
push edx  +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_18] +
movs   +
movs   +
movs   +
movs   +
call dword ptr [eax+0A4h]  +
xor esi esi +
cmp eax esi +
jl loc_10350DB  +
push [ebp+var_4]  +
lea eax [ebp+arg_0] +
push eax  +
lea ecx [ebx+14h] +
call sub_10330F3  +
mov eax [eax] +
cmp eax esi +
jl loc_10350DB  +
lea eax [ebp+arg_0] +
push eax  +
push esi  +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_28] +
movs   +
movs   +
movs   +
mov ecx ebx +
movs   +
call sub_1034C26  +
xor ecx ecx +
cmp eax ecx +
jge loc_1035178  +
mov edi eax +
jmp loc_103517A  +
xor edi edi +
mov eax [ebp+var_8] +
cmp eax ecx +
jz loc_103518D  +
mov [ebp+var_4] ecx +
mov [ebp+var_8] ecx +
push eax  +
call sub_1035730  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
mov ebx ecx +
mov ecx [ebx] +
mov eax [ecx] +
push edi  +
lea edx [ebp+var_14] +
push edx  +
call dword ptr [eax+10h]  +
test eax eax +
jl loc_103520A  +
mov ecx [ebx] +
mov eax [ecx] +
lea edx [ebp+var_24] +
push edx  +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_14] +
movs   +
movs   +
movs   +
movs   +
call dword ptr [eax+0Ch]  +
test eax eax +
jl loc_103520A  +
lea eax [ebp+var_4] +
push eax  +
push 0  +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_24] +
movs   +
movs   +
movs   +
mov ecx ebx +
movs   +
call sub_1034C26  +
test eax eax +
jl loc_103520A  +
mov eax [ebp+var_4] +
push [ebp+arg_4]  +
mov ecx [eax+1Ch] +
push [ebp+arg_0]  +
mov eax [ecx] +
call dword ptr [eax+14h]  +
test eax eax +
jl loc_103520A  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push ecx  +
sub esp 10h +
mov edi esp +
push [ebp+arg_0]  +
lea esi [ebp+arg_4] +
movs   +
movs   +
movs   +
movs   +
call sub_1034E29  +
pop edi  +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
push esi  +
push edi  +
xor eax eax +
lea edi [ebp+var_18] +
stos   +
stos   +
xor ebx ebx +
mov [ebp+var_C] edx +
mov [ebp+var_8] ecx +
mov [ebp+var_4] 0C00000E5h +
stos   +
cmp edx ebx +
jz loc_103526B  +
lea esi [ebp+var_18] +
mov edi edx +
movs   +
movs   +
movs   +
mov ecx [ebp+arg_0] +
cmp ecx ebx +
jnz loc_103527E  +
mov esi 845h +
mov edi offset aRtlismicrodo_0 +
jmp loc_1035291  +
test [ebp+var_8] 0FFFFFFFCh +
jz loc_10352A1  +
mov esi 846h +
mov edi offset aValidFlagsCh_0 +
lea ecx [ebp+var_4] +
call sub_102FD01  +
mov [ebp+var_20] esi +
mov [ebp+var_1C] edi +
jmp loc_10352BB  +
cmp edx ebx +
jnz loc_10352D7  +
lea ecx [ebp+var_4] +
call sub_102FD01  +
mov [ebp+var_20] 847h +
mov [ebp+var_1C] offset aNotNullChec_21 +
lea eax [ebp+var_28] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_24] offset aWindowsUdomR_9 +
mov [ebp+var_28] offset aDW7rtmBaseXmlU +
call sub_103D6FE  +
jmp loc_103531B  +
push [ebp+var_8]  +
lea eax [ebp+var_18] +
push eax  +
mov [ebp+var_18] ebx +
mov [ebp+var_14] ebx +
mov [ebp+var_10] ebx +
call sub_103519B  +
cmp eax ebx +
lea ecx [ebp+var_18] +
jge loc_10352F8  +
mov [ebp+var_4] eax +
jmp loc_1035316  +
lea esi [ebp+var_18] +
lea edi [ebp+var_24] +
movs   +
movs   +
movs   +
mov edi [ebp+var_C] +
lea esi [ebp+var_24] +
movs   +
movs   +
mov [ebp+var_18] ebx +
mov [ebp+var_14] ebx +
mov [ebp+var_10] ebx +
movs   +
mov [ebp+var_4] ebx +
call sub_1032B6D  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push esi  +
xor esi esi +
push edi  +
mov edi edx +
mov [ebp+var_4] 0C00000E5h +
mov [ebp+var_10] esi +
mov [ebp+var_C] esi +
mov [ebp+var_8] esi +
cmp edi esi +
jnz loc_103536C  +
lea ecx [ebp+var_4] +
call sub_102FD01  +
lea ecx [ebp+var_10] +
call sub_1032B6D  +
mov [ebp+var_C] 85Fh +
mov [ebp+var_8] offset aNotNullChec_22 +
jmp loc_103538F  +
cmp [ebp+arg_0] esi +
jnz loc_10353AB  +
lea ecx [ebp+var_4] +
call sub_102FD01  +
lea ecx [ebp+var_10] +
call sub_1032B6D  +
mov [ebp+var_C] 860h +
mov [ebp+var_8] offset aRtlismicrodo_0 +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_10] offset aWindowsUdom_10 +
mov [ebp+var_14] offset aDW7rtmBaseXmlU +
call sub_103D6FE  +
jmp loc_10353F0  +
push [ebp+arg_0]  +
lea edx [ebp+var_10] +
call sub_103523D  +
cmp eax esi +
jge loc_10353BF  +
mov [ebp+var_4] eax +
jmp loc_10353E8  +
xor eax eax +
inc eax  +
mov [ebp+var_2C] eax +
mov [ebp+var_30] eax +
lea eax [ebp+var_10] +
mov [ebp+var_28] eax +
push edi  +
lea eax [ebp+var_30] +
push eax  +
mov [ebp+var_18] esi +
mov [ebp+var_1C] esi +
call sub_103ACC8  +
cmp eax esi +
mov [ebp+var_4] eax +
jl loc_10353E8  +
mov [ebp+var_4] esi +
lea ecx [ebp+var_10] +
call sub_1032B6D  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push esi  +
push edi  +
xor eax eax +
lea edi [ebp+var_8] +
stos   +
mov edi [ebp+arg_0] +
mov esi edx +
mov [ebp+var_4] 0C00000E5h +
test edi edi +
jz loc_1035423  +
mov eax [ebp+var_8] +
mov [edi] eax +
test ecx ecx +
jz loc_1035433  +
mov esi 57Fh +
mov edi offset aUlflags0 +
jmp loc_1035441  +
test esi esi +
jnz loc_103544B  +
mov esi 580h +
mov edi offset aSourcemicrodom +
lea ecx [ebp+var_4] +
call sub_102FD01  +
jmp loc_1035491  +
test edi edi +
jnz loc_1035463  +
lea ecx [ebp+var_4] +
mov esi 581h +
mov edi offset aNotNullChec_23 +
call sub_102FD01  +
jmp loc_1035491  +
and [ebp+arg_0] 0 +
lea ecx [ebp+arg_0] +
call sub_1033153  +
test eax eax +
jnz loc_10354B3  +
mov esi 589h +
mov edi offset aNewcontext_all +
mov [ebp+var_4] 0C0000017h +
cmp [ebp+arg_0] eax +
jz loc_1035491  +
push [ebp+arg_0]  +
call sub_103447B  +
lea eax [ebp+var_18] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_18] offset aDW7rtmBaseXmlU +
mov [ebp+var_14] offset aWindowsUdom_11 +
mov [ebp+var_10] esi +
mov [ebp+var_C] edi +
call sub_103D6FE  +
jmp loc_10354D7  +
push esi  +
mov esi [ebp+arg_0] +
mov ecx esi +
call sub_1035060  +
test eax eax +
jge loc_10354D1  +
mov [ebp+var_4] eax +
test esi esi +
jz loc_10354D7  +
push esi  +
call sub_103447B  +
jmp loc_10354D7  +
and [ebp+var_4] 0 +
mov [edi] esi +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1035518  +
cmp [eax+8] ecx +
jnz loc_1035518  +
cmp eax ecx +
jz loc_1035518  +
mov edx [eax] +
push esi  +
mov esi [eax+4] +
mov [edx+4] esi +
mov esi [eax] +
mov edx [eax+4] +
mov [edx] esi +
and dword ptr [eax+8] 0 +
cmp [ebp+arg_4] 0 +
pop esi  +
jz loc_1035518  +
dec dword ptr [ecx+0Ch]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_0] +
test edx edx +
jz loc_103553E  +
and dword ptr [edx] 0 +
mov ecx [eax+8] +
test ecx ecx +
jz loc_103553E  +
add ecx eax +
mov [edx] ecx +
mov edx [ebp+arg_8] +
test edx edx +
jz loc_1035553  +
and dword ptr [edx] 0 +
mov ecx [eax+0Ch] +
test ecx ecx +
jz loc_1035553  +
add ecx eax +
mov [edx] ecx +
mov edx [ebp+arg_C] +
test edx edx +
jz loc_1035568  +
and dword ptr [edx] 0 +
mov ecx [eax+10h] +
test ecx ecx +
jz loc_1035568  +
add ecx eax +
mov [edx] ecx +
mov edx [ebp+arg_10] +
test edx edx +
jz loc_103557D  +
and dword ptr [edx] 0 +
mov ecx [eax+14h] +
test ecx ecx +
jz loc_103557D  +
add ecx eax +
mov [edx] ecx +
pop ebp  +
retn 14h  +
***
mov eax ecx +
and dword ptr [eax] 0 +
and dword ptr [eax+4] 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [ecx] +
push esi  +
mov esi [ecx+4] +
push edi  +
mov edi [eax] +
mov [ecx] edi +
mov edi [eax+4] +
mov [ecx+4] edi +
pop edi  +
mov [eax+4] esi +
mov [eax] edx +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [ecx+8] +
push esi  +
mov esi [eax+8] +
mov [ecx+8] esi +
mov esi [eax+4] +
mov [eax+8] edx +
mov edx [ecx+4] +
mov [ecx+4] esi +
mov esi [eax] +
mov [eax+4] edx +
mov edx [ecx] +
mov [ecx] esi +
mov [eax] edx +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
dec [ebp+arg_8]  +
js loc_103560D  +
push esi  +
mov esi [ebp+arg_0] +
mov ecx esi +
call [ebp+arg_C]  +
add esi [ebp+arg_4] +
dec [ebp+arg_8]  +
jns loc_10355FF  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
imul eax [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_0] +
add esi eax +
jmp loc_1035632  +
sub esi [ebp+arg_4] +
mov ecx esi +
call [ebp+arg_C]  +
dec [ebp+arg_8]  +
jns loc_103562A  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi [ebp+arg_0] +
cmp esi 0FFFFFFFh +
jbe loc_1035659  +
xor eax eax +
jmp loc_1035694  +
mov eax large fs:18h +
mov eax [eax+30h] +
mov ecx esi +
shl ecx 4 +
push ecx  +
push 0  +
push dword ptr [eax+18h]  +
call ds:RtlAllocateHeap  +
test eax eax +
jz loc_1035694  +
test esi esi +
jbe loc_1035694  +
mov ecx eax +
mov edx esi +
push edi  +
or [ebp+var_8] 0FFFFFFFFh +
mov edi ecx +
lea esi [ebp+var_10] +
movs   +
movs   +
movs   +
add ecx 10h +
dec edx  +
movs   +
jnz loc_1035680  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor ecx ecx +
push 0Ch  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
xor ecx ecx +
push 8  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
mov esi eax +
pop ecx  +
test esi esi +
jz loc_10356FC  +
push offset unknown_libname_1  +
push [ebp+arg_0]  +
push 8  +
push esi  +
call sub_10355F1  +
mov eax esi +
jmp loc_10356FE  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub eax [ebp+arg_0] +
sar eax 2 +
shl eax 2 +
push eax  +
push 0  +
push [ebp+arg_0]  +
call memset  +
add esp 0Ch +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
mov eax large fs:18h +
mov eax [eax+30h] +
push 0  +
push dword ptr [eax+18h]  +
call ds:RtlFreeHeap  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor ecx ecx +
cmp eax ecx +
jz loc_1035775  +
or dword ptr [eax] 0FFFFFFFFh +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
mov ecx [ebp+8] +
mov eax [ecx+eax*4] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
mov ecx [ebp+8] +
movzx eax word ptr [ecx+eax*2] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
mov ecx [ebp+8] +
movzx eax byte ptr [ecx+eax] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
shl eax 2 +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call memmove  +
add esp 0Ch +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
call sub_1035755  +
mov esi [ebp+arg_4] +
push 6  +
pop ecx  +
movs   +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_103581E  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1035839  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push [ebp+arg_8]  +
mov ecx [eax] +
xor edx edx +
call sub_102FC84  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
mov eax ecx +
pop ebp  +
retn 0Ch  +
***
mov eax ecx +
mov dword ptr [eax] offset off_100D768 +
xor ecx ecx +
lea edx [eax+10h] +
mov [eax+0Ch] ecx +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [edx+0Ch] ecx +
mov [edx] edx +
mov [edx+4] edx +
mov [edx+8] edx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
push 4  +
mov eax ecx +
xor edx edx +
pop ecx  +
mov edi offset dword_100B7F8 +
cmps   +
setnz dl  +
pop edi  +
pop esi  +
dec edx  +
and eax edx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
cmp eax 0FFFFFFFFh +
jnz loc_10358C7  +
xor al al +
jmp loc_10358D0  +
cmp eax [ecx+164h] +
setb al  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
and dword ptr [esi+0Ch] 0 +
test byte ptr [ebp+8] 1 +
mov dword ptr [esi] offset off_100B7F4 +
jz loc_10358F8  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jz loc_1035915  +
xor eax eax +
jmp loc_1035934  +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_103592E  +
push edi  +
call sub_1035641  +
test eax eax +
jz loc_1035933  +
mov [esi] eax +
mov [esi+4] edi +
jmp loc_1035933  +
mov eax offset dword_100B8B4 +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jz loc_103594F  +
xor eax eax +
jmp loc_103596E  +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_1035968  +
push edi  +
call sub_103569E  +
test eax eax +
jz loc_103596D  +
mov [esi] eax +
mov [esi+4] edi +
jmp loc_103596D  +
mov eax offset dword_100B8B4 +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jz loc_1035989  +
xor eax eax +
jmp loc_10359A8  +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_10359A2  +
push edi  +
call sub_10356C4  +
test eax eax +
jz loc_10359A7  +
mov [esi] eax +
mov [esi+4] edi +
jmp loc_10359A7  +
mov eax offset dword_100B8B4 +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax [ecx] +
test eax eax +
jz locret_10359C6  +
and dword ptr [ecx] 0 +
and dword ptr [ecx+4] 0 +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
jmp loc_10359E0  +
push esi  +
call sub_1035755  +
add esi 18h +
cmp esi [ebp+arg_4] +
jnz loc_10359D7  +
pop esi  +
pop ebp  +
retn 8  +
***
mov eax ecx +
and dword ptr [eax+0Ch] 0 +
mov [eax] eax +
mov [eax+4] eax +
mov [eax+8] eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_8] +
test esi esi +
jz loc_1035A26  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10357E8  +
add [ebp+arg_0] 18h +
add [ebp+arg_4] 18h +
dec esi  +
jnz loc_1035A10  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_1035A55  +
push esi  +
push edi  +
mov esi [ebp+arg_4] +
mov edi [ebp+arg_0] +
add [ebp+arg_0] 10h +
add [ebp+arg_4] 10h +
dec eax  +
movs   +
movs   +
movs   +
movs   +
jnz loc_1035A3E  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push 1  +
add eax 4 +
push eax  +
push ecx  +
call sub_1032AF1  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_8] +
mov eax ecx +
mov [eax+0Ch] edx +
mov edx [ebp+arg_0] +
xor ecx ecx +
mov [eax+10h] edx +
mov edx [ebp+arg_4] +
mov [eax+8] ecx +
mov [eax] ecx +
mov [eax+4] ecx +
mov [eax+14h] edx +
mov [eax+18h] ecx +
mov [eax+1Ch] ecx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
xor ecx ecx +
test eax eax +
setz cl  +
xor edx edx +
test esi esi +
setz dl  +
cmp ecx edx +
jz loc_1035AE5  +
test eax eax +
jnz loc_1035AD7  +
cmp [esi] eax +
jz loc_1035AFA  +
or [ebp+var_4] 0FFFFFFFFh +
jmp loc_1035AFA  +
cmp dword ptr [eax] 0 +
jz loc_1035AFA  +
mov [ebp+var_4] 1 +
jmp loc_1035AFA  +
test eax eax +
jz loc_1035AFA  +
lea ecx [ebp+var_4] +
push ecx  +
push 0  +
push esi  +
push eax  +
call sub_102FCDB  +
test eax eax +
jl locret_1035B04  +
mov eax [ebp+arg_0] +
mov ecx [ebp+var_4] +
mov [eax] ecx +
xor eax eax +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_4] +
push eax  +
mov eax [ebp+arg_0] +
mov esi ecx +
call sub_1035AAD  +
test eax eax +
jl loc_1035B4D  +
cmp [ebp+var_4] 0 +
jnz loc_1035B43  +
mov esi [ebp+arg_8] +
lea eax [ebp+var_4] +
push eax  +
mov eax [ebp+arg_4] +
call sub_1035AAD  +
test eax eax +
jl loc_1035B4D  +
mov eax [ebp+arg_C] +
mov ecx [ebp+var_4] +
mov [eax] ecx +
xor eax eax +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+arg_0] +
push eax  +
push offset off_100B7C8  +
push 5  +
push 0  +
push [ebp+arg_0]  +
push 0  +
call sub_102FD0D  +
test eax eax +
jl loc_1035B95  +
mov eax [ebp+arg_0] +
cmp eax 5 +
jnz loc_1035B87  +
mov eax [ebp+arg_4] +
or dword ptr [eax] 0FFFFFFFFh +
jmp loc_1035B93  +
mov eax ds:dword_100B7DC[eax*4] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
mov eax [esi] +
mov edx [esi+4] +
push edi  +
mov edi [ebp+arg_0] +
mov ecx [edi] +
sub edx eax +
cmp edx ecx +
jnb loc_1035BE3  +
lea edx [eax+ecx] +
cmp edx eax +
jb loc_1035BC3  +
cmp edx ecx +
jnb loc_1035BCA  +
mov eax 0C0000095h +
jmp loc_1035BF2  +
lea eax [edx+64h] +
cmp eax edx +
jb loc_1035BC3  +
cmp eax 64h +
jb loc_1035BC3  +
push esi  +
push eax  +
push 0  +
call sub_102FE14  +
test eax eax +
jl loc_1035BF2  +
mov edx esi +
mov ecx edi +
call sub_1030519  +
test eax eax +
jl loc_1035BF2  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push esi  +
call sub_1032469  +
mov esi [ebp+arg_4] +
mov ecx [esi] +
mov edx [esi+4] +
sub edx ecx +
cmp edx eax +
jnb loc_1035C44  +
lea edx [ecx+eax] +
cmp edx ecx +
jb loc_1035C24  +
cmp edx eax +
jnb loc_1035C2B  +
mov eax 0C0000095h +
jmp loc_1035C53  +
lea eax [edx+64h] +
cmp eax edx +
jb loc_1035C24  +
cmp eax 64h +
jb loc_1035C24  +
push esi  +
push eax  +
push 0  +
call sub_102FE14  +
test eax eax +
jl loc_1035C53  +
push esi  +
push [ebp+arg_0]  +
call sub_10305F1  +
test eax eax +
jl loc_1035C53  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax [ebp+arg_8] +
push esi  +
push edi  +
mov [ebp+var_4] 0C00000E5h +
cmp eax [ecx+164h] +
jb loc_1035C85  +
mov esi 932h +
mov edi offset aM_reservedM_na +
jmp loc_1035CA0  +
mov ecx [ecx+160h] +
mov eax [ecx+eax*4] +
mov esi [ebp+arg_10] +
cmp esi [eax+4] +
jb loc_1035CCA  +
mov esi 936h +
mov edi offset aUlwhichThemapL +
lea ecx [ebp+var_4] +
call sub_102FD01  +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_14] offset aDW7rtmBaseXm_0 +
mov [ebp+var_10] offset aMicrodomimplem +
mov [ebp+var_C] esi +
mov [ebp+var_8] edi +
call sub_103D6FE  +
jmp loc_1035CDA  +
mov edi [ebp+arg_14] +
shl esi 4 +
add esi [eax] +
and [ebp+var_4] 0 +
movs   +
movs   +
movs   +
movs   +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax [ebp+arg_8] +
mov [ebp+var_4] 0C00000E5h +
cmp eax [ecx+164h] +
jb loc_1035D34  +
lea ecx [ebp+var_4] +
call sub_102FD01  +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_14] offset aDW7rtmBaseXm_0 +
mov [ebp+var_10] offset aMicrodomimpl_0 +
mov [ebp+var_C] 945h +
mov [ebp+var_8] offset aM_reservedM_na +
call sub_103D6FE  +
jmp loc_1035D49  +
mov ecx [ecx+160h] +
mov eax [ecx+eax*4] +
mov eax [eax+4] +
mov ecx [ebp+arg_10] +
and [ebp+var_4] 0 +
mov [ecx] eax +
mov eax [ebp+var_4] +
leave   +
retn 14h  +
***
mov eax ecx +
xor ecx ecx +
mov [eax+0Ch] ecx +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov dword ptr [eax+3Ch] offset off_100B808 +
mov dword ptr [eax] offset off_100D7A4 +
mov dword ptr [eax+3Ch] offset off_100B990 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea edi [ebp+var_C] +
movs   +
movs   +
movs   +
mov edi [ebp+arg_0] +
mov esi ecx +
movs   +
movs   +
movs   +
lea esi [ebp+var_C] +
mov edi ecx +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
and dword ptr [esi+0Ch] 0 +
test byte ptr [ebp+8] 1 +
mov dword ptr [esi+3Ch] offset off_1007418 +
mov dword ptr [esi] offset off_100B7F4 +
jz loc_1035DD0  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_100BA3C +
call sub_10306C9  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov edx [ebp+18h] +
mov dword ptr [ebp-4] 0C00000E5h +
test edx edx +
jz loc_1035E5F  +
or dword ptr [ebp-0Ch] 0FFFFFFFFh +
push esi  +
push edi  +
lea esi [ebp-14h] +
mov edi edx +
movs   +
movs   +
movs   +
movs   +
mov eax [ecx-2Ch] +
mov eax [eax+70h] +
mov ecx [ebp+10h] +
pop edi  +
pop esi  +
cmp ecx [eax+10h] +
jz loc_1035E77  +
lea ecx [ebp-4] +
call sub_102FD01  +
mov dword ptr [ebp-0Ch] 0A17h +
mov dword ptr [ebp-8] offset aThedocument_re +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-4] +
mov dword ptr [ebp-10h] offset aMicrodomimpl_1 +
mov dword ptr [ebp-14h] offset aDW7rtmBaseXm_0 +
call sub_103D6FE  +
jmp loc_1035E81  +
lea ecx [ebp-4] +
call sub_102FD01  +
mov dword ptr [ebp-0Ch] 0A16h +
mov dword ptr [ebp-8] offset aNotNullChec_24 +
jmp loc_1035E43  +
***
mov eax [eax+0Ch] +
and dword ptr [ebp-4] 0 +
mov [edx+8] eax +
mov eax [ebp-4] +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax [ebp+8] +
mov dword ptr [ebp-4] 0C00000E5h +
test eax eax +
jz loc_1035ECB  +
or dword ptr [ebp-0Ch] 0FFFFFFFFh +
push esi  +
and dword ptr [ebp-4] 0 +
push edi  +
lea esi [ebp-14h] +
mov edi eax +
movs   +
movs   +
movs   +
movs   +
mov ecx [ecx-2Ch] +
mov ecx [ecx+70h] +
mov ecx [ecx+10h] +
pop edi  +
pop esi  +
mov [eax+8] ecx +
mov eax [ebp-4] +
leave   +
retn 4  +
***
lea ecx [ebp-4] +
call sub_102FD01  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-4] +
mov dword ptr [ebp-14h] offset aDW7rtmBaseXm_0 +
mov dword ptr [ebp-10h] offset aMicrodomimpl_2 +
mov dword ptr [ebp-0Ch] 0A27h +
mov dword ptr [ebp-8] offset aNotNullChec_25 +
call sub_103D6FE  +
jmp loc_1035EC4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
mov eax [ebp+arg_C] +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
mov [ebp+var_8] ecx +
mov [ebp+var_4] 0C00000E5h +
cmp [eax] ebx +
jz loc_1035F44  +
xor edx edx +
cmp [eax+4] ebx +
jbe loc_1035F44  +
mov edi [eax] +
and [ebp+var_20] 0 +
and [ebp+var_18] 0 +
add edi ebx +
push 6  +
pop ecx  +
lea esi [ebp+var_20] +
inc edx  +
movs   +
add ebx 18h +
cmp edx [eax+4] +
jb loc_1035F27  +
mov ecx [ebp+arg_4] +
mov edx [ecx+4] +
mov [ebp+arg_4] edx +
cmp edx [eax+4] +
jz loc_1035F5E  +
mov esi 0A9Ch +
mov edi offset aProperties_len +
jmp loc_1035FDA  +
mov ecx [ecx] +
test ecx ecx +
jz loc_1035FD0  +
cmp dword ptr [eax] 0 +
jz loc_1035FD0  +
and [ebp+arg_C] 0 +
test edx edx +
jbe loc_1035FA1  +
mov edi [ebp+arg_8] +
mov edx [edi+4] +
mov esi ecx +
xor ebx ebx +
test edx edx +
jbe loc_1035FBE  +
mov ecx [esi] +
mov eax [edi] +
cmp [eax] ecx +
jz loc_1035F8F  +
inc ebx  +
add eax 4 +
cmp ebx edx +
jb loc_1035F83  +
cmp ebx edx +
jnb loc_1035FBE  +
inc [ebp+arg_C]  +
mov eax [ebp+arg_C] +
add esi 4 +
cmp eax [ebp+arg_4] +
jb loc_1035F79  +
mov eax [ebp+var_8] +
mov eax [eax+10h] +
mov eax [eax+70h] +
mov ecx [ebp+arg_0] +
cmp ecx [eax+8] +
jb loc_1035FCA  +
mov esi 0AACh +
mov edi offset aNodeindexM_pta +
jmp loc_1035FDA  +
mov esi 0AA9h +
mov edi offset aJValidproperti +
jmp loc_1035FDA  +
and [ebp+var_4] 0 +
jmp loc_1036002  +
mov esi 0A9Dh +
mov edi offset aProperties_ele +
lea ecx [ebp+var_4] +
call sub_102FD01  +
lea eax [ebp+var_18] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_18] offset aDW7rtmBaseXm_0 +
mov [ebp+var_14] offset aMicrodomimpl_3 +
mov [ebp+var_10] esi +
mov [ebp+var_C] edi +
call sub_103D6FE  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov eax [ebp+arg_0] +
mov [ebp+var_C] eax +
mov [ebp+var_8] eax +
mov eax [ebp+arg_4] +
lea edx [ecx+4] +
lea ecx [ebp+var_C] +
mov [ebp+var_4] eax +
call loc_1031B82  +
test eax eax +
jl locret_1036045  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_1036043  +
mov ecx [ebp+var_C] +
mov [eax] ecx +
xor eax eax +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
cmp dword ptr [ebp+1Ch] 0 +
push esi  +
push edi  +
mov dword ptr [ebp-4] 0C00000E5h +
jz loc_10360BD  +
or dword ptr [ebp-0Ch] 0FFFFFFFFh +
mov edi [ebp+1Ch] +
lea esi [ebp-14h] +
movs   +
movs   +
movs   +
movs   +
mov ecx [ecx-2Ch] +
sub esp 10h +
mov edi esp +
lea esi [ebp+8] +
movs   +
movs   +
movs   +
movs   +
call sub_10358B6  +
test al al +
jnz loc_10360D5  +
lea ecx [ebp-4] +
call sub_102FD01  +
mov dword ptr [ebp-0Ch] 0C92h +
mov dword ptr [ebp-8] offset aM_ptargetobjec +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-4] +
mov dword ptr [ebp-10h] offset aMicrodomimpl_4 +
mov dword ptr [ebp-14h] offset aDW7rtmBaseXm_0 +
call sub_103D6FE  +
jmp loc_10360F9  +
lea ecx [ebp-4] +
call sub_102FD01  +
mov dword ptr [ebp-0Ch] 0C91h +
mov dword ptr [ebp-8] offset aNotNullChec_26 +
jmp loc_10360A1  +
***
push dword ptr [ebp+1Ch]  +
lea esi [ebp+8] +
push dword ptr [ebp+18h]  +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
call sub_1035C5D  +
test eax eax +
jge loc_10360F5  +
mov [ebp-4] eax +
jmp loc_10360F9  +
and dword ptr [ebp-4] 0 +
mov eax [ebp-4] +
pop edi  +
pop esi  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov edx [ebp+18h] +
push esi  +
push edi  +
mov dword ptr [ebp-4] 0C00000E5h +
test edx edx +
jz loc_103616C  +
and dword ptr [edx] 0 +
mov ecx [ecx-2Ch] +
sub esp 10h +
mov edi esp +
lea esi [ebp+8] +
movs   +
movs   +
movs   +
movs   +
call sub_10358B6  +
test al al +
jnz loc_1036184  +
lea ecx [ebp-4] +
call sub_102FD01  +
mov dword ptr [ebp-0Ch] 0CA0h +
mov dword ptr [ebp-8] offset aM_ptargetobjec +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-4] +
mov dword ptr [ebp-10h] offset aMicrodomimpl_5 +
mov dword ptr [ebp-14h] offset aDW7rtmBaseXm_0 +
call sub_103D6FE  +
jmp loc_10361A3  +
lea ecx [ebp-4] +
call sub_102FD01  +
mov dword ptr [ebp-0Ch] 0C9Fh +
mov dword ptr [ebp-8] offset aNotNullChec_27 +
jmp loc_1036150  +
***
push edx  +
sub esp 10h +
mov edi esp +
lea esi [ebp+8] +
movs   +
movs   +
movs   +
movs   +
call sub_1035CE8  +
test eax eax +
jge loc_103619F  +
mov [ebp-4] eax +
jmp loc_10361A3  +
and dword ptr [ebp-4] 0 +
mov eax [ebp-4] +
pop edi  +
pop esi  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
or dword ptr [ebp-0Ch] 0FFFFFFFFh +
push ebx  +
push esi  +
mov esi [ebp+1Ch] +
push edi  +
mov ebx ecx +
mov dword ptr [ebp-4] 0C00000E5h +
test esi esi +
jz loc_10361D3  +
mov byte ptr [esi] 0 +
cmp dword ptr [ebp+10h] 0FFFFFFFFh +
jnz loc_10361E5  +
mov esi 0D86h +
mov edi offset aTheelementThee +
jmp loc_10361FB  +
mov ecx [ebp+18h] +
call sub_102FCAB  +
test al al +
jnz loc_103620B  +
mov esi 0D87h +
mov edi offset aRtlislutf8st_6 +
lea ecx [ebp-4] +
call sub_102FD01  +
mov [ebp-0Ch] esi +
mov [ebp-8] edi +
jmp loc_1036225  +
test esi esi +
jnz loc_1036241  +
lea ecx [ebp-4] +
call sub_102FD01  +
mov dword ptr [ebp-0Ch] 0D88h +
mov dword ptr [ebp-8] offset aNotNullChec_28 +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-4] +
mov dword ptr [ebp-10h] offset aMicrodomimpl_6 +
mov dword ptr [ebp-14h] offset aDW7rtmBaseXm_0 +
call sub_103D6FE  +
jmp loc_1036277  +
mov eax [ebx] +
lea ecx [ebp-14h] +
push ecx  +
push dword ptr [ebp+18h]  +
lea esi [ebp+8] +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
mov ecx ebx +
movs   +
call dword ptr [eax+90h]  +
test eax eax +
jge loc_1036267  +
mov [ebp-4] eax +
jmp loc_1036277  +
cmp dword ptr [ebp-0Ch] 0FFFFFFFFh +
jz loc_1036273  +
mov eax [ebp+1Ch] +
mov byte ptr [eax] 1 +
and dword ptr [ebp-4] 0 +
mov eax [ebp-4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
or dword ptr [ebp-0Ch] 0FFFFFFFFh +
push ebx  +
push esi  +
mov esi [ebp+20h] +
push edi  +
mov ebx ecx +
mov dword ptr [ebp-4] 0C00000E5h +
test esi esi +
jz loc_10362A8  +
mov byte ptr [esi] 0 +
cmp dword ptr [ebp+10h] 0FFFFFFFFh +
jnz loc_10362BA  +
mov esi 0DA0h +
mov edi offset aTheelementThee +
jmp loc_10362E8  +
mov ecx [ebp+18h] +
call sub_102FCAB  +
test al al +
jnz loc_10362D2  +
mov esi 0DA1h +
mov edi offset aRtlislutf8st_8 +
jmp loc_10362E8  +
mov ecx [ebp+1Ch] +
call sub_102FCAB  +
test al al +
jnz loc_10362F8  +
mov esi 0DA2h +
mov edi offset aRtlislutf8st_7 +
lea ecx [ebp-4] +
call sub_102FD01  +
mov [ebp-0Ch] esi +
mov [ebp-8] edi +
jmp loc_1036312  +
test esi esi +
jnz loc_103632E  +
lea ecx [ebp-4] +
call sub_102FD01  +
mov dword ptr [ebp-0Ch] 0DA3h +
mov dword ptr [ebp-8] offset aNotNullChec_28 +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-4] +
mov dword ptr [ebp-10h] offset aMicrodomimpl_7 +
mov dword ptr [ebp-14h] offset aDW7rtmBaseXm_0 +
call sub_103D6FE  +
jmp loc_1036367  +
mov eax [ebx] +
lea ecx [ebp-14h] +
push ecx  +
push dword ptr [ebp+1Ch]  +
lea esi [ebp+8] +
push dword ptr [ebp+18h]  +
mov ecx ebx +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
call dword ptr [eax+94h]  +
test eax eax +
jge loc_1036357  +
mov [ebp-4] eax +
jmp loc_1036367  +
cmp dword ptr [ebp-0Ch] 0FFFFFFFFh +
jz loc_1036363  +
mov eax [ebp+20h] +
mov byte ptr [eax] 1 +
and dword ptr [ebp-4] 0 +
mov eax [ebp-4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax [ebp+0Ch] +
xor edx edx +
mov dword ptr [ebp-4] 0C00000E5h +
cmp eax edx +
jz loc_1036390  +
mov [eax] edx +
cmp [ebp+8] edx +
jz loc_10363AD  +
lea ecx [ebp-4] +
call sub_102FD01  +
mov dword ptr [ebp-0Ch] 0DBCh +
mov dword ptr [ebp-8] offset aValidFlagsChec +
jmp loc_10363C7  +
cmp eax edx +
jnz loc_10363E3  +
lea ecx [ebp-4] +
call sub_102FD01  +
mov dword ptr [ebp-0Ch] 0DBDh +
mov dword ptr [ebp-8] offset aNotNullChec_29 +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-4] +
mov dword ptr [ebp-10h] offset aMicrodomimpl_8 +
mov dword ptr [ebp-14h] offset aDW7rtmBaseXm_0 +
call sub_103D6FE  +
jmp loc_10363F1  +
mov ecx [ecx-2Ch] +
add ecx 13Ch +
mov [eax] ecx +
mov [ebp-4] edx +
mov eax [ebp-4] +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
and dword ptr [edi] 0 +
mov [ebp+var_4] 0C00000E5h +
cmp esi [ecx+8] +
jb loc_103644E  +
lea ecx [ebp+var_4] +
call sub_102FD01  +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_14] offset aDW7rtmBaseXm_0 +
mov [ebp+var_10] offset aMicrodomimpl_9 +
mov [ebp+var_C] 0DEDh +
mov [ebp+var_8] offset aUllocationM_po +
call sub_103D6FE  +
jmp loc_10364BD  +
cmp dword ptr [ecx+14h] 0 +
jnz loc_1036455  +
int 3  +
push ebx  +
jmp loc_10364AB  +
mov eax [ecx+0Ch] +
lea edx [eax+1] +
mov [ecx+0Ch] edx +
mov edx [ecx+4] +
lea eax [edx+eax*8] +
mov edx [ecx+10h] +
dec edx  +
jz loc_1036493  +
dec edx  +
jz loc_1036482  +
dec edx  +
jnz loc_1036454  +
mov edx [ecx+14h] +
mov ebx [edx] +
mov [eax] ebx +
mov ebx [edx+4] +
add edx 0Fh +
jmp loc_10364A2  +
mov edx [ecx+14h] +
movzx ebx word ptr [edx] +
mov [eax] ebx +
movzx ebx word ptr [edx+2] +
add edx 9 +
jmp loc_10364A2  +
mov edx [ecx+14h] +
movzx ebx byte ptr [edx] +
mov [eax] ebx +
movzx ebx byte ptr [edx+1] +
add edx 6 +
and edx 0FFFFFFFCh +
mov [eax+4] ebx +
mov [ecx+14h] edx +
cmp [ecx+0Ch] esi +
jbe loc_1036458  +
mov eax [ecx+4] +
and [ebp+var_4] 0 +
lea eax [eax+esi*8] +
mov [edi] eax +
pop ebx  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax [ebp+arg_0] +
push esi  +
push edi  +
mov [ebp+var_4] 0C00000E5h +
test eax eax +
jnz loc_10364EF  +
mov esi 0E25h +
mov edi offset aLocationheader +
jmp loc_1036516  +
cmp dword ptr [eax] 634C644Dh +
jz loc_1036503  +
mov esi 0E26h +
mov edi offset aLocationhead_0 +
jmp loc_1036516  +
test dword ptr [eax+4] 0FFFFFFFCh +
jz loc_1036526  +
mov esi 0E27h +
mov edi offset aLocationhead_1 +
lea ecx [ebp+var_4] +
call sub_102FD01  +
mov [ebp+var_C] esi +
mov [ebp+var_8] edi +
jmp loc_1036562  +
cmp dword ptr [ecx+14h] 0 +
jz loc_103652D  +
int 3  +
lea edx [eax+0Ch] +
mov [ecx+14h] edx +
mov [ecx] eax +
mov edx [eax+4] +
and edx 3 +
mov [ecx+10h] edx +
push dword ptr [eax+8]  +
add ecx 4 +
call sub_1035978  +
test eax eax +
jnz loc_103657E  +
mov [ebp+var_4] 0C0000017h +
mov [ebp+var_C] 0E2Fh +
mov [ebp+var_8] offset aThisM_position +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_10] offset aMicrodomimp_10 +
mov [ebp+var_14] offset aDW7rtmBaseXm_0 +
call sub_103D6FE  +
jmp loc_1036582  +
and [ebp+var_4] 0 +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ecx +
mov [ebp+var_4] 0C00000E5h +
test esi esi +
jnz loc_10365B6  +
mov esi 0FE4h +
mov edi offset aPoolheader0 +
jmp loc_10365C8  +
cmp dword ptr [esi] 7053644Dh +
jz loc_10365D8  +
mov esi 0FE5h +
mov edi offset aPoolheaderSign +
lea ecx [ebp+var_4] +
call sub_102FD01  +
mov [ebp+var_C] esi +
mov [ebp+var_8] edi +
jmp loc_10365F9  +
push dword ptr [esi+8]  +
call sub_103593E  +
test eax eax +
jnz loc_1036615  +
mov [ebp+var_4] 0C0000017h +
mov [ebp+var_C] 0FE7h +
mov [ebp+var_8] offset aM_entries_allo +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_10] offset aMicrodomimp_11 +
mov [ebp+var_14] offset aDW7rtmBaseXm_0 +
call sub_103D6FE  +
jmp loc_103665C  +
mov edx [esi+4] +
add edx esi +
lea eax [esi+0Ch] +
xor ecx ecx +
push ebx  +
mov ebx eax +
mov [ebp+arg_0] ecx +
jmp loc_1036653  +
mov esi [ebp+arg_0] +
cmp esi [edi+4] +
jnb loc_1036657  +
cmp byte ptr [eax] 0 +
jnz loc_1036652  +
mov esi [edi] +
mov [ecx+esi+8] ebx +
mov esi eax +
sub esi ebx +
mov ebx [edi] +
inc [ebp+arg_0]  +
mov [ecx+ebx] esi +
mov ebx [edi] +
mov [ecx+ebx+4] esi +
lea ebx [eax+1] +
add ecx 0Ch +
inc eax  +
cmp eax edx +
jb loc_1036627  +
and [ebp+var_4] 0 +
pop ebx  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_0] +
and dword ptr [edx] 0 +
mov [ebp+var_4] 0C00000E5h +
cmp eax 0FFFFFFFFh +
jnz loc_1036688  +
int 3  +
cmp eax [ecx+4] +
jb loc_10366BF  +
lea ecx [ebp+var_4] +
call sub_102FD01  +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_14] offset aDW7rtmBaseXm_0 +
mov [ebp+var_10] offset aMicrodomimp_12 +
mov [ebp+var_C] 100Fh +
mov [ebp+var_8] offset aStringidM_entr +
call sub_103D6FE  +
jmp loc_10366CA  +
imul eax eax +
add eax [ecx] +
and [ebp+var_4] 0 +
mov [edx] eax +
mov eax [ebp+var_4] +
leave   +
retn 8  +
***
mov eax [ecx] +
xor edx edx +
cmp eax edx +
jz locret_10366ED  +
push eax  +
mov [ecx] edx +
mov [ecx+4] edx +
mov [ecx+8] edx +
call ??3@YAXPAX@Z  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
lea eax [esi+4] +
xor ecx ecx +
test [ebp+arg_0] 1 +
mov [eax] eax +
mov [eax+4] eax +
mov [eax+0Ch] ecx +
mov [eax+8] ecx +
jz loc_1036718  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp byte ptr [esi] 0 +
jz loc_103672F  +
int 3  +
push 1  +
call sub_102D391  +
test eax eax +
jl loc_103673F  +
mov byte ptr [esi] 1 +
xor eax eax +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp byte ptr [esi] 0 +
jnz loc_1036751  +
int 3  +
push 0  +
call sub_102D391  +
test eax eax +
jl loc_1036761  +
mov byte ptr [esi] 0 +
xor eax eax +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1035D55  +
mov dword ptr [esi] offset off_100D7A4 +
mov dword ptr [esi+3Ch] offset off_100C140 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push 1  +
add eax 4 +
push eax  +
call sub_10354E5  +
pop ebp  +
retn 4  +
***
mov eax ecx +
xor ecx ecx +
mov [eax+0Ch] ecx +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov dword ptr [eax+3Ch] offset off_100C1EC +
mov dword ptr [eax] offset off_100D7A4 +
mov dword ptr [eax+3Ch] offset off_100C1FC +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 0 +
jz loc_10367D9  +
int 3  +
mov edx [ecx] +
push eax  +
push offset dword_100C20C  +
call dword ptr [edx+4]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 0 +
jz loc_10367FB  +
int 3  +
mov edx [ecx] +
push eax  +
push offset dword_100C21C  +
call dword ptr [edx+4]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
push edi  +
push [ebp+arg_0]  +
mov esi ecx +
lea ecx [ebp+arg_4] +
call sub_10310A5  +
mov eax [ebp+arg_4] +
cmp eax 0C0000095h +
jnz loc_103683F  +
or dword ptr [edi] 0FFFFFFFFh +
mov eax [ebp+arg_8] +
and dword ptr [esi] 0 +
mov byte ptr [eax] 1 +
jmp loc_1036841  +
mov [esi] eax +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10367A4  +
mov dword ptr [esi] offset off_100D7A4 +
mov dword ptr [esi+3Ch] offset off_100C22C +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx-2Ch] +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
xor esi esi +
push esi  +
push 5  +
xor eax eax +
push eax  +
push [ebp+arg_4]  +
mov edi ecx +
mov dword ptr [ebx] 0C00000E5h +
call __allmul  +
push edx  +
push eax  +
lea edx [ebp+var_10] +
lea ecx [ebp+var_C] +
call sub_1030723  +
mov eax [ebp+var_C] +
cmp eax esi +
jge loc_10368C1  +
mov [ebx] eax +
jmp loc_1036954  +
push [ebp+arg_4]  +
call sub_103D81D  +
mov [ebp+var_C] eax +
cmp eax esi +
jnz loc_10368D8  +
mov dword ptr [ebx] 0C0000017h +
jmp loc_1036954  +
mov [ebp+var_8] esi +
cmp [edi+0Ch] esi +
jz loc_1036930  +
mov [ebp+var_4] esi +
mov esi [edi+4] +
add esi [ebp+var_4] +
cmp [esi] esi +
jz loc_103691F  +
mov ecx esi +
call sub_103AFD7  +
mov ebx eax +
xor eax eax +
push eax  +
push [ebp+arg_4]  +
push dword ptr [ebx+14h]  +
push dword ptr [ebx+10h]  +
call __aullrem  +
shl eax 4 +
add eax [ebp+var_C] +
push 1  +
push ebx  +
push eax  +
mov ecx eax +
call sub_1032AF1  +
cmp [esi] esi +
jnz loc_10368ED  +
mov ebx [ebp+arg_0] +
inc [ebp+var_8]  +
mov eax [ebp+var_8] +
add [ebp+var_4] 10h +
cmp eax [edi+0Ch] +
jnz loc_10368E3  +
xor esi esi +
mov eax [edi+4] +
lea ecx [edi+18h] +
cmp ecx eax +
jz loc_1036940  +
push eax  +
call sub_103DC88  +
mov eax [ebp+var_C] +
mov [edi+4] eax +
mov eax [ebp+arg_4] +
mov [edi+0Ch] eax +
mov eax [ebp+var_10] +
mov [edi+14h] eax +
mov [ebx] esi +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 8  +
***
mov eax ecx +
mov ecx [eax] +
test ecx ecx +
jz locret_1036978  +
and dword ptr [eax] 0 +
test ecx ecx +
jz locret_1036978  +
push 1  +
call sub_103E4B6  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 20h  +
mov esi ecx +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_10369A8  +
mov ecx [ebp+arg_4] +
push dword ptr [ecx]  +
mov edx [ebp+arg_0] +
push dword ptr [edx+4]  +
mov ecx eax +
push dword ptr [edx]  +
call sub_1035A7B  +
jmp loc_10369AA  +
xor eax eax +
mov [esi] eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+arg_8] +
push eax  +
mov eax [ebp+arg_8] +
push 0  +
push dword ptr [eax]  +
mov eax [ebp+arg_4] +
push dword ptr [eax]  +
call sub_102FCDB  +
test eax eax +
jge loc_10369D8  +
mov ecx eax +
jmp loc_10369E6  +
cmp [ebp+arg_8] 0 +
mov ecx [ebp+arg_C] +
setz al  +
mov [ecx] al +
xor ecx ecx +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push edi  +
mov edi [ebp+0Ch] +
test edi edi +
jz loc_1036A08  +
and dword ptr [edi] 0 +
mov esi [ebp+10h] +
test esi esi +
jz loc_1036A12  +
and dword ptr [esi] 0 +
mov ecx [ebp+8] +
test byte ptr [ecx+1] 1 +
jz loc_1036A29  +
mov edx [ecx+4] +
mov eax [ecx+18h] +
and edx 3FFFFFh +
jmp loc_1036A38  +
test byte ptr [ecx] 70h +
jnz loc_1036A5D  +
mov eax [ecx+4] +
xor edx edx +
and eax 3FFFFFh +
test byte ptr [ecx] 80h +
jz loc_1036A4F  +
test esi esi +
jz loc_1036A43  +
mov [esi] edx +
test edi edi +
jz loc_1036A49  +
mov [edi] eax +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
test edi edi +
jz loc_1036A55  +
mov [edi] edx +
test esi esi +
jz loc_1036A49  +
mov [esi] eax +
jmp loc_1036A49  +
***
and dword ptr [ebp-4] 0 +
lea eax [ebp-10h] +
mov esi 0C0000002h +
push eax  +
lea ecx [ebp+0Ch] +
mov [ebp+0Ch] esi +
mov dword ptr [ebp-10h] offset aDW7rtmBaseXm_0 +
mov dword ptr [ebp-0Ch] offset aMicrodomimp_13 +
mov dword ptr [ebp-8] 0E63h +
call sub_103D6FE  +
push esi  +
call ds:RtlRaiseStatus  +
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
sub esp 18h +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+18h] +
cmp edx [eax+8] +
jb loc_1036B84  +
int 3  +
mov esi [edi+0Ch] +
mov eax [edi+10h] +
imul esi esi +
add esi [edi] +
mov [esi+4] eax +
mov ebx [edi+10h] +
movzx eax byte ptr [ebx] +
and eax 0Fh +
cmp eax 2 +
jz loc_1036AF2  +
cmp eax 3 +
jz loc_1036AF2  +
cmp eax 5 +
jz loc_1036AF2  +
cmp eax 1 +
jz loc_1036AF2  +
cmp eax 6 +
jz loc_1036AF2  +
cmp eax 7 +
jz loc_1036AF2  +
cmp eax 4 +
jnz loc_1036B9B  +
dec eax  +
jz loc_1036B2C  +
dec eax  +
jz loc_1036B27  +
dec eax  +
jz loc_1036B1F  +
dec eax  +
jz loc_1036B23  +
dec eax  +
jz loc_1036B23  +
dec eax  +
jz loc_1036B1F  +
dec eax  +
jnz loc_1036AB3  +
lea eax [ebx+4] +
mov [esi+10h] eax +
movzx ecx word ptr [ebx+2] +
mov [esi+8] ecx +
mov eax [edi+14h] +
imul eax ecx +
add eax 7 +
jmp loc_1036B7B  +
push 8  +
jmp loc_1036B29  +
push 0Ch  +
jmp loc_1036B29  +
push 14h  +
pop eax  +
jmp loc_1036B7E  +
test byte ptr [ebx+1] 1 +
mov [ebp+var_4] 18h +
jz loc_1036B40  +
mov [ebp+var_4] 1Ch +
lea eax [esi+0Ch] +
lea ecx [esi+8] +
push eax  +
push ecx  +
mov [ebp+var_8] ecx +
push ebx  +
mov ecx edi +
call loc_10369F4  +
mov eax [ebp+var_4] +
mov ecx [esi+0Ch] +
add ebx eax +
mov [esi+14h] ebx +
mov edx [edi+14h] +
imul edx ecx +
add edx ebx +
mov [esi+10h] edx +
mov edx [ebp+var_8] +
mov edx [edx] +
add edx ecx +
imul edx [edi+14h] +
lea eax [edx+eax+3] +
mov edx [ebp+arg_0] +
and eax 0FFFFFFFCh +
add [edi+10h] eax +
inc dword ptr [edi+0Ch]  +
cmp [edi+0Ch] edx +
jbe loc_1036AB4  +
and [ebp+arg_0] 0 +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
lea eax [ebp+var_18] +
push eax  +
lea ecx [ebp+arg_0] +
mov [ebp+arg_0] 0C000003Eh +
mov [ebp+var_18] offset aDW7rtmBaseXm_0 +
mov [ebp+var_14] offset aMicrodomimp_14 +
mov [ebp+var_10] 0E96h +
mov [ebp+var_C] offset aUlelementtype0 +
call sub_103D6FE  +
jmp loc_1036B91  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
mov ebx [ebp+arg_4] +
and dword ptr [ebx] 0 +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ecx +
mov eax [edi+18h] +
mov [ebp+var_4] 0C00000E5h +
cmp esi [eax+8] +
jb loc_1036C28  +
lea ecx [ebp+var_4] +
call sub_102FD01  +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_14] offset aDW7rtmBaseXm_0 +
mov [ebp+var_10] offset aMicrodomimp_15 +
mov [ebp+var_C] 0F42h +
mov [ebp+var_8] offset aUlindexM_heade +
call sub_103D6FE  +
jmp loc_1036C46  +
push esi  +
call sub_1036A97  +
test eax eax +
jge loc_1036C37  +
mov [ebp+var_4] eax +
jmp loc_1036C46  +
mov eax [edi] +
imul esi esi +
mov eax [esi+eax+4] +
and [ebp+var_4] 0 +
mov [ebx] eax +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
mov esi ecx +
cmp eax [esi+8] +
jbe loc_1036CC8  +
push 4  +
pop ecx  +
mul  ecx +
push edx  +
push eax  +
lea edx [ebp+var_8] +
lea ecx [ebp+var_4] +
call sub_1030723  +
mov ecx [ebp+var_4] +
test ecx ecx +
jl loc_1036CCA  +
push [ebp+var_8]  +
call ??2@YAPAXI@Z  +
mov ebx eax +
pop ecx  +
test ebx ebx +
jnz loc_1036C97  +
mov ecx 0C0000017h +
jmp loc_1036CCA  +
push edi  +
mov edi [esi] +
test edi edi +
jz loc_1036CBF  +
push dword ptr [esi+4]  +
and dword ptr [esi] 0 +
push edi  +
push ebx  +
call sub_10357C5  +
mov eax [esi+4] +
lea eax [edi+eax*4] +
push eax  +
push edi  +
call sub_1035708  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax [ebp+arg_4] +
mov [esi] ebx +
mov [esi+8] eax +
pop edi  +
xor ecx ecx +
mov eax [ebp+arg_0] +
pop esi  +
mov [eax] ecx +
pop ebx  +
leave   +
retn 8  +
***
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
xchg eax [ebp-4] +
mov ecx [esi] +
test ecx ecx +
jz loc_1036CF6  +
push 0  +
call sub_10366F3  +
and dword ptr [esi] 0 +
mov dword ptr [esi+20h] 0 +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
mov esi ecx +
cmp eax [esi+8] +
jbe loc_1036D6B  +
push 18h  +
pop ecx  +
mul  ecx +
push edx  +
push eax  +
lea edx [ebp+var_8] +
lea ecx [ebp+var_4] +
call sub_1030723  +
mov ecx [ebp+var_4] +
test ecx ecx +
jl loc_1036D6D  +
push [ebp+var_8]  +
call ??2@YAPAXI@Z  +
mov ebx eax +
pop ecx  +
test ebx ebx +
jnz loc_1036D47  +
mov ecx 0C0000017h +
jmp loc_1036D6D  +
push edi  +
mov edi [esi] +
test edi edi +
jz loc_1036D62  +
push dword ptr [esi+4]  +
and dword ptr [esi] 0 +
push edi  +
push ebx  +
call sub_1035A03  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax [ebp+arg_4] +
mov [esi] ebx +
mov [esi+8] eax +
pop edi  +
xor ecx ecx +
mov eax [ebp+arg_0] +
pop esi  +
mov [eax] ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
mov esi ecx +
cmp eax [esi+8] +
jbe loc_1036DE3  +
push 10h  +
pop ecx  +
mul  ecx +
push edx  +
push eax  +
lea edx [ebp+var_8] +
lea ecx [ebp+var_4] +
call sub_1030723  +
mov ecx [ebp+var_4] +
test ecx ecx +
jl loc_1036DE5  +
push [ebp+var_8]  +
call ??2@YAPAXI@Z  +
mov ebx eax +
pop ecx  +
test ebx ebx +
jnz loc_1036DBF  +
mov ecx 0C0000017h +
jmp loc_1036DE5  +
push edi  +
mov edi [esi] +
test edi edi +
jz loc_1036DDA  +
push dword ptr [esi+4]  +
and dword ptr [esi] 0 +
push edi  +
push ebx  +
call sub_1035A30  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax [ebp+arg_4] +
mov [esi] ebx +
mov [esi+8] eax +
pop edi  +
xor ecx ecx +
mov eax [ebp+arg_0] +
pop esi  +
mov [eax] ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_C] +
and dword ptr [edi] 0 +
mov dword ptr [esi] 0C00000E5h +
cmp edx 1F4h +
jnb loc_1036E34  +
lea eax [edx+32h] +
cmp eax edx +
jb loc_1036E2C  +
cmp eax 32h +
jnb loc_1036E57  +
mov dword ptr [esi] 0C0000095h +
jmp loc_1036E64  +
push 0  +
lea eax [ebp+arg_4] +
push eax  +
shr edx 1 +
push 3  +
lea ecx [ebp+arg_0] +
mov [ebp+arg_4] edx +
call sub_103680F  +
mov eax [ebp+arg_0] +
test eax eax +
jge loc_1036E54  +
mov [esi] eax +
jmp loc_1036E64  +
mov eax [ebp+arg_4] +
cmp eax [ebp+arg_8] +
jbe loc_1036E5F  +
mov eax [ebp+arg_8] +
and dword ptr [esi] 0 +
mov [edi] eax +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push esi  +
push 40h  +
mov esi ecx +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1036E8B  +
mov ecx eax +
call sub_1036768  +
jmp loc_1036E8D  +
xor eax eax +
mov [esi] eax +
pop esi  +
retn   +
***
cmp byte ptr [ecx] 0 +
jz loc_1036EA4  +
call sub_1036746  +
test eax eax +
jl loc_1036EAA  +
xor eax eax +
test eax eax +
jge locret_1036EB1  +
push eax  +
call ds:RtlRaiseStatus  +
retn   +
***
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi ecx +
lea ecx [ebp-1] +
mov byte ptr [ebp-2] 0 +
mov byte ptr [ebp-1] 0 +
call sub_1036724  +
test eax eax +
jge loc_1036EE1  +
lea ecx [ebp-1] +
mov esi eax +
call sub_1036E96  +
jmp loc_1036F32  +
push ebx  +
mov ebx [ebp+0Ch] +
push dword ptr [ebp+8]  +
lea esi [ebx+10h] +
mov ecx esi +
call sub_1036788  +
cmp [esi] esi +
jnz loc_1036F03  +
push ebx  +
lea ecx [edi+4] +
call sub_1036788  +
mov byte ptr [ebp-2] 1 +
lea ecx [ebp-1] +
call sub_1036746  +
test eax eax +
jge loc_1036F13  +
mov esi eax +
jmp loc_1036F29  +
push dword ptr [ebp+8]  +
call sub_1035827  +
cmp byte ptr [ebp-2] 0 +
jz loc_1036F27  +
push ebx  +
call sub_103580B  +
xor esi esi +
lea ecx [ebp-1] +
call sub_1036E96  +
pop ebx  +
test esi esi +
jge loc_1036F3D  +
push esi  +
call ds:RtlRaiseStatus  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
lea eax [ebp+var_8] +
push eax  +
mov esi ecx +
push dword ptr [esi+10h]  +
lea eax [ebp+var_4] +
push eax  +
call sub_103B1A5  +
mov ecx [ebp+var_4] +
test ecx ecx +
jl loc_1036F86  +
mov eax [ebp+var_8] +
cmp eax [esi+10h] +
jz loc_1036F84  +
push eax  +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
call sub_1036880  +
mov ecx [ebp+var_8] +
test ecx ecx +
jl loc_1036F86  +
xor ecx ecx +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
push 40h  +
mov esi ecx +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1036FAF  +
mov ecx eax +
call sub_103684E  +
jmp loc_1036FB1  +
xor eax eax +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
lea ecx [ebp-1] +
mov byte ptr [ebp+var_1] 0 +
call sub_1036724  +
test eax eax +
jge loc_1036FD5  +
mov esi eax +
jmp loc_1036FF1  +
mov ecx [ebp+arg_4] +
push [ebp+arg_0]  +
add ecx 10h +
call sub_1035A5E  +
lea ecx [ebp+var_1] +
call sub_1036746  +
test eax eax +
jl loc_1036FD1  +
xor esi esi +
lea ecx [ebp+var_1] +
call sub_1036E96  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
and [ebp+arg_0] 0 +
push edi  +
mov edi [ebp+arg_14] +
and dword ptr [edi] 0 +
lea eax [ebp+arg_14] +
push eax  +
lea eax [ebp+arg_4] +
mov [ebp+arg_14] ecx +
push eax  +
lea ecx [ebp+arg_0] +
mov dword ptr [esi] 0C00000E5h +
call sub_103697E  +
test eax eax +
jnz loc_103703E  +
mov dword ptr [esi] 0C0000017h +
jmp loc_103705A  +
mov eax [ebp+arg_C] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
and [ebp+arg_0] 0 +
and dword ptr [esi] 0 +
mov [eax+18h] ecx +
mov ecx [ebp+arg_10] +
mov ecx [ecx] +
mov [eax+1Ch] ecx +
mov [edi] eax +
lea ecx [ebp+arg_0] +
call sub_1036962  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
mov ecx [ebp+arg_0] +
mov eax [ecx+8] +
mov edx [ecx] +
and [ebp+arg_0] 0 +
cmp byte ptr [eax] 23h +
push esi  +
lea esi [edx+eax] +
push edi  +
mov [ebp+var_4] 0C00000E5h +
mov [ebp+var_C] esi +
mov [ebp+var_8] 0Ah +
jz loc_103709F  +
int 3  +
cmp edx 2 +
jnb loc_10370B3  +
mov esi 0F5h +
mov edi offset aSource_length2 +
jmp loc_103718E  +
mov ecx eax +
lea eax [ecx+1] +
cmp byte ptr [eax] 78h +
jnz loc_10370DB  +
lea edi [ecx+2] +
mov [ebp+var_8] 10h +
cmp edx 3 +
jnb loc_10370DD  +
mov esi 0FBh +
mov edi offset aSource_length3 +
jmp loc_103718E  +
mov edi eax +
cmp edi esi +
jz loc_1037154  +
mov edx [ebp+var_C] +
mov ecx edi +
call sub_1031DC3  +
mov edi edx +
cmp eax 0FFFFFFFFh +
jz loc_1037169  +
xor esi esi +
cmp eax 30h +
jb loc_1037103  +
cmp eax 39h +
ja loc_1037103  +
lea esi [eax-30h] +
jmp loc_103711F  +
cmp eax 61h +
jb loc_1037112  +
cmp eax 66h +
ja loc_1037112  +
lea esi [eax-57h] +
jmp loc_103711F  +
cmp eax 41h +
jb loc_103711F  +
cmp eax 46h +
ja loc_103711F  +
lea esi [eax-37h] +
cmp esi [ebp+var_8] +
jnb loc_1037184  +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+var_8]  +
lea eax [ebp+var_10] +
push [ebp+arg_0]  +
push eax  +
call sub_1030750  +
mov eax [ebp+var_10] +
test eax eax +
jl loc_10371B8  +
mov ecx [ebp+arg_0] +
lea eax [esi+ecx] +
cmp eax ecx +
jb loc_10371BD  +
cmp eax esi +
jb loc_10371BD  +
mov [ebp+arg_0] eax +
cmp edi [ebp+var_C] +
jnz loc_10370E1  +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
mov [eax] ecx +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 8  +
test edi edi +
jge loc_103709E  +
mov [ebp+var_4] edi +
mov [ebp+var_18] 105h +
mov [ebp+var_14] offset a__rv_ucscharac +
jmp loc_103719C  +
mov esi 115h +
mov edi offset aUlvalueMultfac +
lea ecx [ebp+var_4] +
call sub_102FD01  +
mov [ebp+var_18] esi +
mov [ebp+var_14] edi +
lea eax [ebp+var_20] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_1C] offset aMicrodomimp_16 +
mov [ebp+var_20] offset aDW7rtmBaseXm_0 +
call sub_103D6FE  +
jmp loc_1037160  +
mov [ebp+var_4] eax +
jmp loc_1037160  +
mov [ebp+var_4] 0C0000095h +
jmp loc_1037160  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
and [ebp+var_8] 0 +
push ebx  +
mov ebx [ebp+arg_10] +
mov [ebp+var_4] 0C00000E5h +
test ebx ebx +
jz loc_103720F  +
or [ebp+var_10] 0FFFFFFFFh +
push esi  +
push edi  +
lea esi [ebp+var_18] +
mov edi ebx +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_8]  +
add ecx 58h +
call sub_1036BD1  +
test eax eax +
jge loc_1037241  +
mov [ebp+var_4] eax +
jmp loc_103725D  +
lea ecx [ebp+var_4] +
call sub_102FD01  +
lea eax [ebp+var_18] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_18] offset aDW7rtmBaseXm_0 +
mov [ebp+var_14] offset aMicrodomimp_17 +
mov [ebp+var_10] 30Ah +
mov [ebp+var_C] offset aNotNullChec_30 +
call sub_103D6FE  +
jmp loc_103725D  +
mov eax [ebp+var_8] +
test eax eax +
jz loc_1037259  +
movzx eax byte ptr [eax] +
and eax 0Fh +
cmp eax [ebp+arg_14] +
jnz loc_1037259  +
mov eax [ebp+arg_8] +
mov [ebx+8] eax +
and [ebp+var_4] 0 +
mov eax [ebp+var_4] +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov dl [eax] +
and dl 0Fh +
cmp dl 1 +
jnz loc_1037281  +
mov eax [eax+14h] +
jmp loc_1037289  +
cmp dl 2 +
jnz loc_103729E  +
mov eax [eax+0Ch] +
cmp eax 0FFFFFFFFh +
jz loc_103729E  +
push [ebp+arg_8]  +
add ecx 50h +
push eax  +
call sub_103666A  +
test eax eax +
jl loc_10372A0  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
push ebx  +
mov ebx [ebp+arg_0] +
imul ebx ebx +
add ebx [ecx+16Ch] +
push esi  +
lea esi [ebx+40h] +
push edi  +
or edi 0FFFFFFFFh +
cmp dword ptr [esi] 0 +
mov [ebp+var_4] esi +
jnz loc_10372F2  +
mov eax [ebp+arg_4] +
movzx edx byte ptr [eax] +
and edx 0Fh +
dec edx  +
jz loc_1037321  +
dec edx  +
jz loc_1037319  +
dec edx  +
jz loc_1037311  +
dec edx  +
jz loc_103730C  +
dec edx  +
jz loc_103730C  +
dec edx  +
jz loc_1037304  +
dec edx  +
jnz loc_10372F2  +
mov dword ptr [esi] offset dword_100B774 +
mov eax [esi] +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor esi esi +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
mov dword ptr [esi] offset asc_100B768 +
jmp loc_10372F2  +
mov eax [eax+4] +
jmp loc_1037327  +
mov dword ptr [esi] offset dword_100B780 +
jmp loc_10372F2  +
mov edi [eax+4] +
mov eax [eax+0Ch] +
jmp loc_1037327  +
mov edi [eax+0Ch] +
mov eax [eax+14h] +
mov [ebp+arg_0] eax +
cmp eax 0FFFFFFFFh +
jz loc_10372F2  +
add ecx 50h +
cmp edi 0FFFFFFFFh +
jz loc_10373CE  +
lea eax [ebp+arg_4] +
xor esi esi +
push eax  +
push edi  +
mov [ebp+arg_4] esi +
mov [ebp+var_14] esi +
mov [ebp+var_10] esi +
mov [ebp+var_C] esi +
mov [ebp+var_8] ecx +
call sub_103666A  +
cmp eax esi +
jge loc_1037366  +
lea ecx [ebp+var_14] +
mov esi eax +
call sub_1032B6D  +
jmp loc_10372FB  +
mov esi [ebp+arg_4] +
mov ecx [ebp+var_8] +
lea edi [ebp+var_38] +
movs   +
movs   +
movs   +
mov esi offset dword_100B78C +
lea edi [ebp+var_2C] +
movs   +
lea eax [ebp+arg_4] +
movs   +
push eax  +
push [ebp+arg_0]  +
movs   +
call sub_103666A  +
test eax eax +
jl loc_103735A  +
mov esi [ebp+arg_4] +
lea edi [ebp+var_20] +
movs   +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+var_38] +
push eax  +
movs   +
push 3  +
push 0  +
movs   +
call loc_10303A8  +
test eax eax +
jl loc_103735A  +
lea eax [ebp+var_14] +
add ebx 44h +
push eax  +
mov ecx ebx +
call sub_1035D7C  +
mov eax [ebp+var_4] +
lea ecx [ebp+var_14] +
mov [eax] ebx +
call sub_1032B6D  +
mov esi [ebp+var_4] +
jmp loc_10372F2  +
push esi  +
push [ebp+arg_0]  +
call sub_103666A  +
test eax eax +
jge loc_10372F2  +
mov esi eax +
jmp loc_10372FB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov dl [eax] +
and dl 0Fh +
cmp dl 1 +
jnz loc_1037402  +
mov eax [eax+10h] +
jmp loc_103740A  +
cmp dl 2 +
jnz loc_103741F  +
mov eax [eax+8] +
cmp eax 0FFFFFFFFh +
jz loc_103741F  +
push [ebp+arg_8]  +
add ecx 50h +
push eax  +
call sub_103666A  +
test eax eax +
jl loc_1037421  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
movzx eax byte ptr [edx] +
and eax 0Fh +
dec eax  +
jz loc_1037443  +
dec eax  +
jnz loc_103745B  +
mov edx [edx+4] +
jmp loc_1037446  +
mov edx [edx+0Ch] +
cmp edx 0FFFFFFFFh +
jz loc_103745B  +
push [ebp+arg_8]  +
add ecx 50h +
push edx  +
call sub_103666A  +
test eax eax +
jl loc_103745D  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
mov eax [ebp+arg_8] +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
mov [ebp+var_8] ecx +
cmp eax ebx +
jz loc_103747F  +
mov [eax] bl +
mov esi [ebp+arg_0] +
cmp esi ebx +
jnz loc_1037487  +
int 3  +
cmp [ebp+arg_4] ebx +
jz loc_1037486  +
cmp eax ebx +
jz loc_1037486  +
xor eax eax +
mov [ebp+var_14] ebx +
lea edi [ebp+var_10] +
stos   +
stos   +
xor eax eax +
mov [ebp+var_20] ebx +
lea edi [ebp+var_1C] +
stos   +
stos   +
lea eax [ebp+var_4] +
push eax  +
push ebx  +
push offset dword_100B7BC  +
push [ebp+arg_4]  +
call sub_102FCDB  +
cmp eax ebx +
jl loc_103756D  +
cmp [ebp+var_4] ebx +
jnz loc_10374CE  +
mov eax [ebp+arg_8] +
mov byte ptr [eax] 1 +
jmp loc_103757C  +
mov edi [ebp+arg_4] +
lea eax [ebp+var_20] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
push 3Ah  +
push ebx  +
push ebx  +
push edi  +
push 1  +
call sub_1030258  +
cmp eax ebx +
jl loc_103756D  +
mov eax [ebp+var_14] +
cmp eax [edi] +
jnz loc_1037508  +
lea esi [ebp+var_14] +
lea edi [ebp+var_20] +
movs   +
movs   +
movs   +
mov esi [ebp+arg_0] +
xor eax eax +
lea edi [ebp+var_14] +
stos   +
stos   +
stos   +
mov edi [ebp+var_8] +
mov eax [esi+14h] +
lea ecx [ebp+arg_4] +
push ecx  +
add edi 50h +
push eax  +
mov ecx edi +
call sub_103666A  +
cmp eax ebx +
jl loc_103756D  +
lea eax [ebp+var_4] +
push eax  +
push ebx  +
lea eax [ebp+var_20] +
push eax  +
push [ebp+arg_4]  +
call sub_102FCDB  +
cmp eax ebx +
jl loc_103756D  +
cmp [ebp+var_4] ebx +
jnz loc_103757C  +
mov eax [esi+0Ch] +
cmp eax 0FFFFFFFFh +
jnz loc_1037548  +
cmp [ebp+var_14] ebx +
jmp loc_1037574  +
lea ecx [ebp+arg_4] +
push ecx  +
push eax  +
mov ecx edi +
call sub_103666A  +
cmp eax ebx +
jl loc_103756D  +
lea eax [ebp+var_4] +
push eax  +
push ebx  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+arg_4]  +
call sub_102FCDB  +
cmp eax ebx +
jge loc_1037571  +
mov ebx eax +
jmp loc_103757C  +
cmp [ebp+var_4] ebx +
mov ecx [ebp+arg_8] +
setz al  +
mov [ecx] al +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov eax [ebp+arg_C] +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
mov [ebp+var_C] ecx +
cmp eax ebx +
jz loc_10375A3  +
mov [eax] bl +
mov edi [ebp+arg_0] +
cmp edi ebx +
jnz loc_10375AB  +
int 3  +
cmp [ebp+arg_8] ebx +
jz loc_10375AA  +
cmp eax ebx +
jz loc_10375AA  +
lea eax [ebp+var_4] +
push eax  +
push ebx  +
mov esi offset dword_100B7BC +
push esi  +
push [ebp+arg_4]  +
mov [ebp+var_4] ebx +
mov byte ptr [ebp+arg_0+3] bl +
call sub_102FCDB  +
cmp eax ebx +
jl loc_103767D  +
cmp [ebp+var_4] ebx +
jnz loc_10375DE  +
mov byte ptr [ebp+arg_0+3] 1 +
lea eax [ebp+var_4] +
push eax  +
push ebx  +
push esi  +
push [ebp+arg_8]  +
call sub_102FCDB  +
cmp eax ebx +
jl loc_103767D  +
cmp [ebp+var_4] ebx +
jz loc_1037629  +
mov eax [edi+14h] +
lea ecx [ebp+var_8] +
push ecx  +
mov ecx [ebp+var_C] +
push eax  +
add ecx 50h +
call sub_103666A  +
cmp eax ebx +
jl loc_103767D  +
lea eax [ebp+var_4] +
push eax  +
push ebx  +
push [ebp+arg_8]  +
push [ebp+var_8]  +
call sub_102FCDB  +
cmp eax ebx +
jl loc_103767D  +
cmp [ebp+var_4] ebx +
jnz loc_103767B  +
cmp byte ptr [ebp+arg_0+3] bl +
jnz loc_1037675  +
mov eax [edi+10h] +
mov [ebp+var_4] 1 +
cmp eax 0FFFFFFFFh +
jnz loc_1037648  +
mov eax [ebp+arg_4] +
cmp eax ebx +
jz loc_1037675  +
cmp [eax] ebx +
jmp loc_1037673  +
lea ecx [ebp+var_8] +
push ecx  +
mov ecx [ebp+var_C] +
push eax  +
add ecx 50h +
call sub_103666A  +
cmp eax ebx +
jl loc_103767D  +
lea eax [ebp+var_4] +
push eax  +
push ebx  +
push [ebp+arg_4]  +
push [ebp+var_8]  +
call sub_102FCDB  +
cmp eax ebx +
jl loc_103767D  +
cmp [ebp+var_4] ebx +
jnz loc_103767B  +
mov eax [ebp+arg_C] +
mov byte ptr [eax] 1 +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push ebx  +
push esi  +
push edi  +
xor edi edi +
xor ebx ebx +
mov esi ecx +
mov [ebp+var_1C] ebx +
mov [ebp+var_18] edi +
mov [ebp+var_C] edi +
cmp [ebp+arg_4] edi +
jnz loc_10376A9  +
int 3  +
cmp [ebp+arg_C] edi +
jz loc_10376A8  +
mov eax [esi+70h] +
mov [ebp+var_8] edi +
cmp [eax+8] edi +
jz loc_10377B0  +
mov [ebp+var_10] edi +
lea eax [ebp+var_14] +
push eax  +
push [ebp+var_8]  +
lea ecx [esi+58h] +
mov [ebp+var_14] edi +
call sub_1036BD1  +
cmp eax edi +
jl loc_10377D9  +
mov eax [ebp+var_14] +
mov cl [eax] +
and cl 0Fh +
cmp cl 1 +
jnz loc_103779E  +
cmp byte ptr [ebp+arg_8] 0 +
lea ecx [ebp-1] +
push ecx  +
push [ebp+arg_4]  +
mov ecx esi +
jz loc_1037705  +
push [ebp+arg_0]  +
push eax  +
call sub_103758A  +
jmp loc_103770B  +
push eax  +
call sub_1037466  +
cmp eax edi +
jl loc_10377D9  +
cmp [ebp+var_1] 0 +
jz loc_103779E  +
mov ecx [ebp+var_C] +
cmp [ebp+var_18] ecx +
jnz loc_1037781  +
lea eax [ecx+0Ah] +
mov [ebp+var_24] edi +
mov [ebp+var_20] edi +
cmp eax ecx +
jb loc_10377E2  +
cmp eax 0Ah +
jb loc_10377E2  +
push eax  +
lea ecx [ebp+var_24] +
call sub_1035904  +
test eax eax +
jz loc_10377F6  +
push [ebp+var_10]  +
push ebx  +
push [ebp+var_24]  +
call memcpy  +
add esp 0Ch +
lea eax [ebp+var_1C] +
push eax  +
lea ecx [ebp+var_24] +
call sub_1035595  +
mov eax [ebp+var_24] +
cmp eax edi +
jz loc_103777E  +
push eax  +
mov [ebp+var_24] edi +
mov [ebp+var_20] edi +
call sub_1035730  +
mov ebx [ebp+var_1C] +
mov eax [ebp+var_C] +
cmp eax [ebp+var_18] +
jnb loc_10376A8  +
mov ecx [ebp+var_10] +
mov eax [ebp+var_8] +
inc [ebp+var_C]  +
add [ebp+var_10] 10h +
mov [ecx+ebx+8] eax +
inc [ebp+var_8]  +
mov eax [esi+70h] +
mov ecx [ebp+var_8] +
cmp ecx [eax+8] +
jnz loc_10376C0  +
mov eax [ebp+var_C] +
push [ebp+arg_C]  +
lea ecx [ebp+var_1C] +
mov [ebp+var_18] eax +
call sub_1035595  +
xor esi esi +
cmp [ebp+var_1C] edi +
jz loc_10377D0  +
push [ebp+var_1C]  +
call sub_1035730  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
mov esi eax +
cmp ebx edi +
jz loc_10377D0  +
push ebx  +
jmp loc_10377CB  +
mov esi 0C0000095h +
mov edi 89Bh +
mov ebx offset aBuclRtlAddSi_0 +
mov [ebp+arg_8] esi +
jmp loc_1037816  +
cmp [ebp+var_24] 0 +
mov esi 0C0000017h +
mov edi 89Dh +
mov ebx offset aTemptempelemen +
mov [ebp+arg_8] esi +
jz loc_1037816  +
push [ebp+var_24]  +
call sub_1035730  +
cmp [ebp+var_1C] 0 +
jz loc_1037824  +
push [ebp+var_1C]  +
call sub_1035730  +
lea eax [ebp+var_2C] +
push eax  +
lea ecx [ebp+arg_8] +
mov [ebp+var_2C] offset aDW7rtmBaseXm_0 +
mov [ebp+var_28] offset aMicrodomimp_18 +
mov [ebp+var_24] edi +
mov [ebp+var_20] ebx +
call sub_103D6FE  +
jmp loc_10377D0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
mov eax [ebp+arg_8] +
push ebx  +
mov ebx ecx +
mov [ebp+var_4] 0C00000E5h +
cmp eax [ebx+164h] +
jb loc_10378A0  +
lea ecx [ebp+var_4] +
call sub_102FD01  +
lea eax [ebp+var_28] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_28] offset aDW7rtmBaseXm_0 +
mov [ebp+var_24] offset aMicrodomimp_19 +
mov [ebp+var_20] 954h +
mov [ebp+var_1C] offset aM_reservedM_na +
call sub_103D6FE  +
mov eax [ebp+var_4] +
jmp loc_103794A  +
mov ecx [ebx+160h] +
push esi  +
push edi  +
mov edi [ecx+eax*4] +
xor eax eax +
mov [ebp+var_4] eax +
cmp [edi+4] eax +
jbe loc_1037946  +
mov [ebp+var_C] eax +
mov eax [edi] +
mov ecx [ebp+var_C] +
mov esi [eax+ecx+8] +
xor eax eax +
mov [ebp+var_8] eax +
mov [ebp+var_10] eax +
mov [ebp+var_14] eax +
lea eax [ebp+var_8] +
push eax  +
push esi  +
lea ecx [ebx+58h] +
call sub_1036BD1  +
test eax eax +
jl loc_1037948  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+var_8]  +
mov ecx ebx +
push esi  +
call sub_103726A  +
test eax eax +
jl loc_1037948  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+var_8]  +
mov ecx ebx +
push esi  +
call sub_10373EB  +
test eax eax +
jl loc_1037948  +
mov ecx [ebp+arg_10] +
lea eax [ebp+var_18] +
push eax  +
push [ebp+arg_14]  +
push [ebp+var_10]  +
push [ebp+var_14]  +
call sub_1035B0D  +
test eax eax +
jl loc_1037948  +
cmp [ebp+var_18] 0 +
jz loc_1037937  +
inc [ebp+var_4]  +
mov eax [ebp+var_4] +
add [ebp+var_C] 10h +
cmp eax [edi+4] +
jb loc_10378BC  +
jmp loc_1037946  +
mov esi [ebp+var_4] +
shl esi 4 +
add esi [edi] +
mov edi [ebp+arg_18] +
movs   +
movs   +
movs   +
movs   +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov ecx [ecx-2Ch] +
push 1  +
push dword ptr [ebp+18h]  +
lea esi [ebp+8] +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
call sub_10371CB  +
pop edi  +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov ecx [ecx-2Ch] +
push 3  +
push dword ptr [ebp+18h]  +
lea esi [ebp+8] +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
call sub_10371CB  +
pop edi  +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov ecx [ecx-2Ch] +
push 2  +
push dword ptr [ebp+18h]  +
lea esi [ebp+8] +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
call sub_10371CB  +
pop edi  +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov ecx [ecx-2Ch] +
push 5  +
push dword ptr [ebp+18h]  +
lea esi [ebp+8] +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
call sub_10371CB  +
pop edi  +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov ecx [ecx-2Ch] +
push 6  +
push dword ptr [ebp+18h]  +
lea esi [ebp+8] +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
call sub_10371CB  +
pop edi  +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov ecx [ecx-2Ch] +
push 7  +
push dword ptr [ebp+18h]  +
lea esi [ebp+8] +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
call sub_10371CB  +
pop edi  +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax [ebp+arg_4] +
mov [ebp+var_8] ecx +
mov [ebp+var_4] 0C00000E5h +
test eax eax +
jnz loc_1037AA1  +
lea ecx [ebp+var_4] +
call sub_102FD01  +
lea eax [ebp+var_18] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_18] offset aDW7rtmBaseXm_0 +
mov [ebp+var_14] offset aMicrodomimp_20 +
mov [ebp+var_10] 0C0Eh +
mov [ebp+var_C] offset aNotNullChec_31 +
call sub_103D6FE  +
jmp loc_1037ADE  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edx edx +
push 4  +
pop ecx  +
mov edi offset dword_100750C +
xor ebx ebx +
cmps   +
jz loc_1037AC8  +
mov esi [ebp+arg_0] +
push 4  +
pop ecx  +
mov edi offset dword_100751C +
xor ebx ebx +
cmps   +
jnz loc_1037ACB  +
mov edx [ebp+var_8] +
mov ecx [eax] +
and [ebp+var_4] 0 +
pop edi  +
pop esi  +
mov [eax] edx +
pop ebx  +
test ecx ecx +
jz loc_1037ADE  +
mov eax [ecx] +
call dword ptr [eax]  +
mov eax [ebp+var_4] +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+1Ch] +
mov ebx ecx +
mov dword ptr [ebp-4] 0C00000E5h +
test edi edi +
jz loc_1037B22  +
or dword ptr [ebp-0Ch] 0FFFFFFFFh +
cmp dword ptr [ebp+10h] 0FFFFFFFFh +
lea esi [ebp-14h] +
movs   +
movs   +
movs   +
movs   +
jnz loc_1037B3A  +
mov esi 0C68h +
mov edi offset aNodemapWindows +
jmp loc_1037B50  +
lea ecx [ebp-4] +
call sub_102FD01  +
mov dword ptr [ebp-0Ch] 0C67h +
mov dword ptr [ebp-8] offset aNotNullChec_26 +
jmp loc_1037B5E  +
mov ecx [ebp+18h] +
call sub_102FCAB  +
test al al +
jnz loc_1037B7A  +
mov esi 0C69h +
mov edi offset aRtlislutf8st_6 +
lea ecx [ebp-4] +
call sub_102FD01  +
mov [ebp-0Ch] esi +
mov [ebp-8] edi +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-4] +
mov dword ptr [ebp-10h] offset aMicrodomimp_21 +
mov dword ptr [ebp-14h] offset aDW7rtmBaseXm_0 +
call sub_103D6FE  +
jmp loc_1037BB0  +
and dword ptr [ebp-10h] 0 +
push dword ptr [ebp+1Ch]  +
mov ecx [ebx-2Ch] +
push dword ptr [ebp+18h]  +
xor eax eax +
lea edi [ebp-0Ch] +
stos   +
stos   +
lea eax [ebp-10h] +
push eax  +
sub esp 10h +
mov edi esp +
lea esi [ebp+8] +
movs   +
movs   +
movs   +
movs   +
call sub_103784B  +
test eax eax +
jge loc_1037BAC  +
mov [ebp-4] eax +
jmp loc_1037BB0  +
and dword ptr [ebp-4] 0 +
mov eax [ebp-4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+20h] +
mov ebx ecx +
mov dword ptr [ebp-4] 0C00000E5h +
test edi edi +
jz loc_1037BF7  +
or dword ptr [ebp-0Ch] 0FFFFFFFFh +
cmp dword ptr [ebp+10h] 0FFFFFFFFh +
lea esi [ebp-14h] +
movs   +
movs   +
movs   +
movs   +
jnz loc_1037C0F  +
mov esi 0C7Eh +
mov edi offset aNodemapWindows +
jmp loc_1037C3D  +
lea ecx [ebp-4] +
call sub_102FD01  +
mov dword ptr [ebp-0Ch] 0C7Dh +
mov dword ptr [ebp-8] offset aNotNullChec_26 +
jmp loc_1037C4B  +
mov ecx [ebp+1Ch] +
call sub_102FCAB  +
test al al +
jnz loc_1037C27  +
mov esi 0C7Fh +
mov edi offset aRtlislutf8st_7 +
jmp loc_1037C3D  +
mov ecx [ebp+18h] +
call sub_102FCAB  +
test al al +
jnz loc_1037C67  +
mov esi 0C80h +
mov edi offset aRtlislutf8st_8 +
lea ecx [ebp-4] +
call sub_102FD01  +
mov [ebp-0Ch] esi +
mov [ebp-8] edi +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-4] +
mov dword ptr [ebp-10h] offset aMicrodomimp_22 +
mov dword ptr [ebp-14h] offset aDW7rtmBaseXm_0 +
call sub_103D6FE  +
jmp loc_1037C91  +
push dword ptr [ebp+20h]  +
mov ecx [ebx-2Ch] +
push dword ptr [ebp+1Ch]  +
lea esi [ebp+8] +
push dword ptr [ebp+18h]  +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
call sub_103784B  +
test eax eax +
jge loc_1037C8D  +
mov [ebp-4] eax +
jmp loc_1037C91  +
and dword ptr [ebp-4] 0 +
mov eax [ebp-4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
push edi  +
mov edi ecx +
mov ecx [ebp+8] +
xor esi esi +
mov dword ptr [ebp-4] 0C00000E5h +
mov [ebp-0Ch] esi +
mov [ebp-8] esi +
call sub_102FCAB  +
test al al +
jnz loc_1037CE4  +
cmp [ebp+8] esi +
jz loc_1037CE4  +
lea ecx [ebp-4] +
call sub_102FD01  +
mov dword ptr [ebp-0Ch] 0CC3h +
mov dword ptr [ebp-8] offset aRtlislutf8st_9 +
jmp loc_1037CFF  +
cmp [ebp+0Ch] esi +
jnz loc_1037D1B  +
lea ecx [ebp-4] +
call sub_102FD01  +
mov dword ptr [ebp-0Ch] 0CC4h +
mov dword ptr [ebp-8] offset aNotNullChec_32 +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-4] +
mov dword ptr [ebp-10h] offset aMicrodomimp_23 +
mov dword ptr [ebp-14h] offset aDW7rtmBaseXm_0 +
call sub_103D6FE  +
jmp loc_1037D50  +
mov ecx [edi-2Ch] +
lea eax [ebp-0Ch] +
push eax  +
push esi  +
push dword ptr [ebp+8]  +
push esi  +
call sub_1037689  +
cmp eax esi +
jge loc_1037D35  +
mov [ebp-4] eax +
jmp loc_1037D43  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-0Ch] +
call sub_1035595  +
mov [ebp-4] esi +
cmp [ebp-0Ch] esi +
jz loc_1037D50  +
push dword ptr [ebp-0Ch]  +
call sub_1035730  +
mov eax [ebp-4] +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
push edi  +
mov esi ecx +
mov ecx [ebp+8] +
xor edi edi +
mov dword ptr [ebp-4] 0C00000E5h +
mov [ebp-0Ch] edi +
mov [ebp-8] edi +
call sub_102FCAB  +
test al al +
jnz loc_1037D96  +
cmp [ebp+8] edi +
jz loc_1037D96  +
mov esi 0CD6h +
mov edi offset aRtlislutf8s_10 +
jmp loc_1037DB1  +
mov ecx [ebp+0Ch] +
call sub_102FCAB  +
test al al +
jnz loc_1037DC1  +
cmp [ebp+0Ch] edi +
jz loc_1037DC1  +
mov esi 0CD7h +
mov edi offset aRtlislutf8s_11 +
lea ecx [ebp-4] +
call sub_102FD01  +
mov [ebp-0Ch] esi +
mov [ebp-8] edi +
jmp loc_1037DDC  +
cmp [ebp+10h] edi +
jnz loc_1037DF8  +
lea ecx [ebp-4] +
call sub_102FD01  +
mov dword ptr [ebp-0Ch] 0CD8h +
mov dword ptr [ebp-8] offset aNotNullChec_32 +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-4] +
mov dword ptr [ebp-10h] offset aMicrodomimp_24 +
mov dword ptr [ebp-14h] offset aDW7rtmBaseXm_0 +
call sub_103D6FE  +
jmp loc_1037E30  +
mov ecx [esi-2Ch] +
lea eax [ebp-0Ch] +
push eax  +
push 1  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1037689  +
cmp eax edi +
jge loc_1037E15  +
mov [ebp-4] eax +
jmp loc_1037E23  +
push dword ptr [ebp+10h]  +
lea ecx [ebp-0Ch] +
call sub_1035595  +
mov [ebp-4] edi +
cmp [ebp-0Ch] edi +
jz loc_1037E30  +
push dword ptr [ebp-0Ch]  +
call sub_1035730  +
mov eax [ebp-4] +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
lea edx [eax+8] +
mov [ecx+0A8h] eax +
mov [ecx+9Ch] edx +
mov [ecx+0A0h] edx +
push dword ptr [eax+4]  +
lea eax [ebp+arg_0] +
push eax  +
add ecx 8Ch +
call sub_1036C55  +
mov eax [eax] +
test eax eax +
jl loc_1037E75  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov esi ecx +
cmp edi [esi+4] +
jbe loc_1037EC7  +
push edi  +
lea eax [ebp+arg_4] +
push eax  +
call sub_1036D05  +
mov ecx [ebp+arg_4] +
test ecx ecx +
jl loc_1037ECC  +
mov eax [esi] +
mov ecx edi +
imul ecx ecx +
add ecx eax +
push ecx  +
mov ecx [esi+4] +
imul ecx ecx +
add ecx eax +
push ecx  +
call sub_10359CC  +
mov [esi+4] edi +
xor ecx ecx +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] ecx +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+8] +
mov ecx eax +
sub ecx [esi+4] +
jnz loc_1037F1F  +
lea ecx [ebp+var_8] +
push ecx  +
push 3FFFFFFFh  +
push eax  +
lea eax [ebp+var_4] +
push eax  +
call sub_1036DFF  +
mov ecx [ebp+var_4] +
test ecx ecx +
jl loc_1037F21  +
push [ebp+var_8]  +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
call sub_1036C55  +
mov ecx [ebp+var_8] +
test ecx ecx +
jl loc_1037F21  +
xor ecx ecx +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov esi ecx +
cmp edi [esi+4] +
jbe loc_1037F52  +
push edi  +
lea eax [ebp+arg_4] +
push eax  +
call sub_1036D7D  +
mov ecx [ebp+arg_4] +
test ecx ecx +
jl loc_1037F57  +
mov [esi+4] edi +
xor ecx ecx +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] ecx +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+0Ch] +
mov edx [ebp+arg_4] +
push offset loc_103ECF9  +
push [ebp+arg_0]  +
mov [edx] eax +
call sub_103B03C  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
and [ebp+var_4] 0 +
push esi  +
mov esi [ebp+arg_4] +
and dword ptr [esi] 0 +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
add ecx 58h +
call sub_1036BD1  +
test eax eax +
jge loc_1037FB4  +
mov esi eax +
jmp loc_1037FF7  +
mov eax [ebp+var_4] +
mov cl [eax] +
and cl 0Fh +
cmp cl 1 +
jz loc_1037FF3  +
lea eax [ebp+var_14] +
mov esi 0C0000024h +
push eax  +
lea ecx [ebp+arg_4] +
mov [ebp+arg_4] esi +
mov [ebp+var_14] offset aDW7rtmBaseXm_0 +
mov [ebp+var_10] offset aMicrodomimp_25 +
mov [ebp+var_C] 980h +
mov [ebp+var_8] offset aObjectheaderUe +
call sub_103D6FE  +
jmp loc_1037FF7  +
mov [esi] eax +
xor esi esi +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_4] +
push eax  +
call sub_10367CB  +
mov esi eax +
test esi esi +
jl loc_1038035  +
mov edx [ebp+var_4] +
test edx edx +
jnz loc_103802B  +
mov esi 0C00002B9h +
jmp loc_1038044  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
mov [eax] edx +
mov [ebp+var_4] ecx +
mov ecx [ebp+var_4] +
test ecx ecx +
jz loc_1038044  +
and [ebp+var_4] 0 +
mov eax [ecx] +
call dword ptr [eax]  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_4] +
push eax  +
call sub_10367ED  +
mov esi eax +
test esi esi +
jl loc_1038082  +
mov edx [ebp+var_4] +
test edx edx +
jnz loc_1038078  +
mov esi 0C00002B9h +
jmp loc_1038091  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
mov [eax] edx +
mov [ebp+var_4] ecx +
mov ecx [ebp+var_4] +
test ecx ecx +
jz loc_1038091  +
and [ebp+var_4] 0 +
mov eax [ecx] +
call dword ptr [eax]  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
push esi  +
mov esi [ebp+arg_0] +
lea edx [eax+1] +
mov dword ptr [esi] 0C00000E5h +
cmp edx eax +
jb loc_10380BB  +
cmp edx 1 +
jnb loc_10380C3  +
mov dword ptr [esi] 0C0000095h +
jmp loc_10380DB  +
push edx  +
lea eax [ebp+arg_0] +
push eax  +
call sub_10330F3  +
mov eax [ebp+arg_0] +
test eax eax +
jge loc_10380D8  +
mov [esi] eax +
jmp loc_10380DB  +
and dword ptr [esi] 0 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
and [ebp+var_4] 0 +
push edi  +
mov edi ecx +
lea ecx [ebp+var_4] +
call sub_1036E71  +
test eax eax +
jnz loc_1038157  +
mov edi 0C0000017h +
mov [ebp+arg_0] edi +
cmp [ebp+var_4] eax +
jz loc_103812D  +
push [ebp+var_4]  +
call sub_1035827  +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+arg_0] +
mov [ebp+var_14] offset aDW7rtm_public_ +
mov [ebp+var_10] offset aWindowsRtlCrtl +
mov [ebp+var_C] 12Ah +
mov [ebp+var_8] offset aNewtearoff_all +
call sub_103D6FE  +
jmp loc_103818B  +
mov eax [ebp+arg_0] +
push esi  +
mov esi [ebp+var_4] +
push eax  +
push esi  +
mov ecx edi +
mov [esi+10h] eax +
call sub_1036FBA  +
test eax eax +
jge loc_1038178  +
push esi  +
mov edi eax +
call sub_1035827  +
jmp loc_103818A  +
mov ecx [ebp+arg_4] +
mov eax esi +
add esi 3Ch +
neg eax  +
sbb eax eax +
and eax esi +
mov [ecx] eax +
xor edi edi +
pop esi  +
mov eax edi +
pop edi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+10h] +
push esi  +
mov esi [ebp+arg_0] +
mov dword ptr [esi] 0C00000E5h +
mov byte ptr [ebp+arg_0+3] 0 +
cmp eax [ebp+arg_8] +
jnz loc_10381D9  +
mov eax [ecx+14h] +
cmp eax [ebp+arg_C] +
jnz loc_10381D9  +
lea eax [ebp+arg_0+3] +
push eax  +
add ecx 18h +
push ecx  +
push [ebp+arg_4]  +
lea eax [ebp+arg_4] +
push eax  +
call sub_10369B6  +
mov eax [ebp+arg_4] +
test eax eax +
jge loc_10381D9  +
mov [esi] eax +
jmp loc_10381E4  +
mov eax [ebp+arg_10] +
mov cl byte ptr [ebp+arg_0+3] +
and dword ptr [esi] 0 +
mov [eax] cl +
mov eax esi +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
lea edx [eax+14h] +
mov [ecx+10h] edx +
mov [ecx+18h] eax +
mov edx [eax+4] +
and edx 3 +
dec edx  +
jz loc_1038230  +
dec edx  +
jz loc_1038220  +
dec edx  +
jnz loc_103823E  +
mov dword ptr [ecx+14h] 4 +
mov dword ptr [ecx+1Ch] offset loc_103577E +
jmp loc_103823E  +
mov dword ptr [ecx+14h] 2 +
mov dword ptr [ecx+1Ch] offset loc_1035795 +
jmp loc_103823E  +
mov dword ptr [ecx+14h] 1 +
mov dword ptr [ecx+1Ch] offset loc_10357AD +
push dword ptr [eax+8]  +
lea eax [ebp+arg_0] +
push eax  +
call sub_1037E8D  +
mov eax [eax] +
test eax eax +
jl loc_1038252  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov eax ecx +
or dword ptr [eax+8] 0FFFFFFFFh +
xor ecx ecx +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
mov [eax+18h] ecx +
mov [eax+1Ch] ecx +
mov [eax+20h] ecx +
mov [eax+24h] ecx +
mov [eax+28h] ecx +
or dword ptr [eax+38h] 0FFFFFFFFh +
mov [eax+40h] ecx +
mov [eax+44h] ecx +
mov [eax+48h] ecx +
mov [eax+4Ch] ecx +
mov [eax+5Ch] cl +
mov [eax+5Dh] cl +
mov [eax+20h] ecx +
mov [eax+1Ch] ecx +
mov [eax+28h] ecx +
mov [eax+24h] ecx +
mov [eax+54h] ecx +
mov [eax+50h] ecx +
mov [eax+58h] ecx +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp byte ptr [esi+5Ch] 0 +
jz loc_10382BC  +
lea ecx [esi+50h] +
call sub_102FCA1  +
lea ecx [esi+44h] +
call sub_1032B6D  +
lea ecx [esi+10h] +
pop esi  +
jmp sub_10366D6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi ecx +
mov eax [esi+70h] +
push edi  +
push dword ptr [eax+8]  +
xor edi edi +
lea ecx [ebp+var_8] +
mov [ebp+var_8] edi +
mov [ebp+var_4] edi +
call sub_1035904  +
test eax eax +
jnz loc_1038336  +
mov [ebp+arg_0] 0C0000017h +
cmp [ebp+var_8] edi +
jz loc_103830C  +
push [ebp+var_8]  +
call sub_1035730  +
lea eax [ebp+var_10] +
push eax  +
lea ecx [ebp+arg_0] +
mov [ebp+var_10] offset aDW7rtmBaseXm_0 +
mov [ebp+var_C] offset aMicrodomimp_26 +
mov [ebp+var_8] 45Dh +
mov [ebp+var_4] offset aTempnodes_allo +
call sub_103D6FE  +
jmp loc_103836F  +
mov ecx [esi+70h] +
xor eax eax +
cmp [ecx+8] edi +
jz loc_1038354  +
mov ecx [ebp+var_8] +
add ecx 8 +
mov [ecx] eax +
mov edx [esi+70h] +
inc eax  +
add ecx 10h +
cmp eax [edx+8] +
jnz loc_1038346  +
push [ebp+arg_0]  +
lea ecx [ebp+var_8] +
call sub_1035595  +
mov [ebp+arg_0] edi +
cmp [ebp+var_8] edi +
jz loc_103836F  +
push [ebp+var_8]  +
call sub_1035730  +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
xor ebx ebx +
cmp dword ptr [ebp+10h] 0FFFFFFFFh +
push esi  +
push edi  +
mov dword ptr [ebp-4] 0C00000E5h +
mov [ebp-1Ch] ebx +
mov [ebp-18h] ebx +
mov [ebp-14h] ebx +
mov [ebp-10h] ebx +
mov [ebp-0Ch] ebx +
mov [ebp-8] ebx +
jnz loc_10383D1  +
lea ecx [ebp-4] +
call sub_102FD01  +
lea ecx [ebp-10h] +
call sub_103243B  +
lea ecx [ebp-1Ch] +
call sub_1032B6D  +
mov dword ptr [ebp-18h] 0BFCh +
mov dword ptr [ebp-14h] offset aRootRoot_inval +
jmp loc_10383FC  +
cmp [ebp+18h] ebx +
jnz loc_1038418  +
lea ecx [ebp-4] +
call sub_102FD01  +
lea ecx [ebp-10h] +
call sub_103243B  +
lea ecx [ebp-1Ch] +
call sub_1032B6D  +
mov dword ptr [ebp-18h] 0BFDh +
mov dword ptr [ebp-14h] offset aNotNullChec_26 +
lea eax [ebp-20h] +
push eax  +
lea ecx [ebp-4] +
mov dword ptr [ebp-1Ch] offset aMicrodomimp_27 +
mov dword ptr [ebp-20h] offset aDW7rtmBaseXm_0 +
call sub_103D6FE  +
jmp loc_1038468  +
mov eax [ecx] +
lea edx [ebp-1Ch] +
push edx  +
sub esp 10h +
mov edi esp +
lea esi [ebp+8] +
movs   +
movs   +
movs   +
movs   +
call dword ptr [eax+54h]  +
cmp eax ebx +
jge loc_1038436  +
mov [ebp-4] eax +
jmp loc_1038458  +
lea edx [ebp-10h] +
lea ecx [ebp-1Ch] +
call sub_1030122  +
cmp eax ebx +
lea ecx [ebp-10h] +
jge loc_103844D  +
mov [ebp-4] eax +
jmp loc_103845B  +
push dword ptr [ebp+18h]  +
call sub_1035D7C  +
mov [ebp-4] ebx +
lea ecx [ebp-10h] +
call sub_103243B  +
lea ecx [ebp-1Ch] +
call sub_1032B6D  +
mov eax [ebp-4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 5Ch +
push ebx  +
push esi  +
xor ebx ebx +
mov esi ecx +
push edi  +
lea ecx [ebp-5Ch] +
mov [ebp-0Ch] esi +
mov dword ptr [ebp-8] 0C00000E5h +
mov [ebp-14h] ebx +
mov [ebp-18h] ebx +
mov [ebp-10h] ebx +
mov [ebp-4] ebx +
call sub_1035DDC  +
cmp dword ptr [ebp+10h] 0FFFFFFFFh +
jnz loc_10384B6  +
mov esi 0C43h +
mov edi offset aRootRoot_inval +
jmp loc_103852C  +
cmp [ebp+18h] ebx +
jnz loc_10384F8  +
lea ecx [ebp-8] +
call sub_102FD01  +
lea ecx [ebp-58h] +
call sub_10316E7  +
mov ecx [ebp-4] +
mov dword ptr [ebp-5Ch] offset off_1007418 +
cmp ecx ebx +
jz loc_10384E0  +
mov [ebp-4] ebx +
mov eax [ecx] +
call dword ptr [eax]  +
lea ecx [ebp-18h] +
call sub_102D479  +
mov dword ptr [ebp-14h] 0C44h +
mov dword ptr [ebp-10h] offset aNotNullChec_26 +
jmp loc_103855F  +
mov eax [esi] +
lea ecx [ebp-2Ch] +
push ecx  +
mov ecx [ebp-0Ch] +
sub esp 10h +
mov edi esp +
lea esi [ebp+8] +
movs   +
movs   +
movs   +
movs   +
call dword ptr [eax+30h]  +
cmp eax ebx +
jge loc_103851C  +
mov [ebp-8] eax +
jmp loc_10385E2  +
cmp dword ptr [ebp-24h] 0FFFFFFFFh +
jnz loc_103857E  +
mov esi 0C47h +
mov edi offset aTheelementThee +
lea ecx [ebp-8] +
call sub_102FD01  +
lea ecx [ebp-58h] +
call sub_10316E7  +
mov ecx [ebp-4] +
mov dword ptr [ebp-5Ch] offset off_1007418 +
cmp ecx ebx +
jz loc_1038551  +
mov [ebp-4] ebx +
mov eax [ecx] +
call dword ptr [eax]  +
lea ecx [ebp-18h] +
call sub_102D479  +
mov [ebp-14h] esi +
mov [ebp-10h] edi +
lea eax [ebp-1Ch] +
push eax  +
lea ecx [ebp-8] +
mov dword ptr [ebp-18h] offset aMicrodomimp_27 +
mov dword ptr [ebp-1Ch] offset aDW7rtmBaseXm_0 +
call sub_103D6FE  +
jmp loc_1038607  +
lea eax [ebp-4] +
push eax  +
push ebx  +
call sub_103C670  +
cmp eax ebx +
jl loc_1038514  +
lea eax [ebp-58h] +
push eax  +
push ebx  +
lea eax [ebp-18h] +
push eax  +
push ebx  +
push 0FFFFFFFFh  +
push ebx  +
call sub_1030774  +
cmp eax ebx +
jl loc_1038514  +
lea eax [ebp-5Ch] +
push eax  +
mov eax [ebp-0Ch] +
sub esp 10h +
mov edi esp +
lea esi [ebp+8] +
movs   +
lea ecx [eax-3Ch] +
neg ecx  +
movs   +
sbb ecx ecx +
and ecx eax +
push ecx  +
push dword ptr [ebp-4]  +
movs   +
push ebx  +
movs   +
call sub_103D03A  +
cmp eax ebx +
jl loc_1038514  +
push dword ptr [ebp+18h]  +
lea ecx [ebp-18h] +
call sub_1035D7C  +
mov [ebp-8] ebx +
lea ecx [ebp-58h] +
call sub_10316E7  +
mov ecx [ebp-4] +
mov dword ptr [ebp-5Ch] offset off_1007418 +
cmp ecx ebx +
jz loc_10385FF  +
mov [ebp-4] ebx +
mov eax [ecx] +
call dword ptr [eax]  +
lea ecx [ebp-18h] +
call sub_102D479  +
mov eax [ebp-8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov ecx [ecx-2Ch] +
mov eax [ecx+70h] +
mov edx [ebp+10h] +
mov dword ptr [ebp-4] 0C00000E5h +
cmp edx [eax+10h] +
jz loc_103864B  +
lea ecx [ebp-4] +
call sub_102FD01  +
mov dword ptr [ebp-0Ch] 0DCBh +
mov dword ptr [ebp-8] offset aWhichdoc_reser +
jmp loc_1038667  +
cmp dword ptr [ebp+18h] 0 +
jnz loc_1038683  +
lea ecx [ebp-4] +
call sub_102FD01  +
mov dword ptr [ebp-0Ch] 0DCCh +
mov dword ptr [ebp-8] offset aNotNullChec_33 +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-4] +
mov dword ptr [ebp-10h] offset aMicrodomimp_28 +
mov dword ptr [ebp-14h] offset aDW7rtmBaseXm_0 +
call sub_103D6FE  +
jmp loc_1038698  +
push dword ptr [ebp+18h]  +
call sub_10382D2  +
test eax eax +
jge loc_1038694  +
mov [ebp-4] eax +
jmp loc_1038698  +
and dword ptr [ebp-4] 0 +
mov eax [ebp-4] +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push esi  +
mov ebx ecx +
call sub_1036A97  +
xor edi edi +
cmp eax edi +
jge loc_10386C8  +
mov [ebp+arg_4] eax +
jmp loc_10387F5  +
imul esi esi +
add esi [ebx] +
mov eax [esi+8] +
cmp eax edi +
ja loc_10386F0  +
cmp [esi+0Ch] edi +
ja loc_10386F0  +
mov ecx [ebp+arg_4] +
call sub_10366D6  +
mov eax [ebp+arg_8] +
mov [eax] edi +
mov eax [ebp+arg_C] +
mov [eax] edi +
jmp loc_10387F2  +
mov ecx [esi+0Ch] +
lea edx [eax+ecx] +
cmp edx eax +
jb loc_10386FE  +
cmp edx ecx +
jnb loc_1038711  +
mov esi 0F18h +
mov edi offset aBuclRtlAddPcac +
mov [ebp+arg_4] 0C0000095h +
jmp loc_1038742  +
push edx  +
lea eax [ebp+arg_0] +
push eax  +
lea ecx [ebp+var_10] +
mov [ebp+var_10] edi +
mov [ebp+var_C] edi +
mov [ebp+var_8] edi +
call sub_1037F30  +
mov eax [eax] +
cmp eax edi +
jge loc_1038767  +
lea ecx [ebp+var_10] +
mov esi 0F1Ch +
mov edi offset aTmpnodes_resiz +
mov [ebp+arg_4] eax +
call sub_10366D6  +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+arg_4] +
mov [ebp+var_14] offset aDW7rtmBaseXm_0 +
mov [ebp+var_10] offset aMicrodomimp_29 +
mov [ebp+var_C] esi +
mov [ebp+var_8] edi +
call sub_103D6FE  +
jmp loc_10387F5  +
mov [ebp+arg_0] edi +
cmp [esi+8] edi +
jbe loc_1038791  +
mov eax [ebp+var_10] +
add eax 8 +
mov [ebp+var_4] eax +
push edi  +
push dword ptr [esi+10h]  +
call dword ptr [ebx+1Ch]  +
mov ecx [ebp+var_4] +
inc [ebp+arg_0]  +
add [ebp+var_4] 10h +
inc edi  +
mov [ecx] eax +
cmp edi [esi+8] +
jb loc_1038778  +
and [ebp+var_4] 0 +
cmp dword ptr [esi+0Ch] 0 +
jbe loc_10387C4  +
mov eax [ebp+arg_0] +
mov ecx [ebp+var_10] +
shl eax 4 +
lea edi [eax+ecx+8] +
push [ebp+var_4]  +
push dword ptr [esi+14h]  +
call dword ptr [ebx+1Ch]  +
inc [ebp+arg_0]  +
mov [edi] eax +
add edi 10h +
inc [ebp+var_4]  +
mov eax [ebp+var_4] +
cmp eax [esi+0Ch] +
jb loc_10387A8  +
mov eax [ebp+arg_0] +
cmp eax [ebp+var_C] +
jz loc_10387CD  +
int 3  +
push [ebp+arg_4]  +
lea ecx [ebp+var_10] +
call sub_10355BE  +
mov eax [esi+8] +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
mov eax [esi+0Ch] +
mov ecx [ebp+arg_C] +
mov [ecx] eax +
lea ecx [ebp+var_10] +
call sub_10366D6  +
xor edi edi +
mov [ebp+arg_4] edi +
mov eax [ebp+arg_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
xor ecx ecx +
push 60h  +
pop edx  +
mov eax edi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
xor eax eax +
add ecx 4 +
setb al  +
neg eax  +
or eax ecx +
push eax  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_103884D  +
push esi  +
push offset loc_103825B  +
push edi  +
lea esi [eax+4] +
push 60h  +
push esi  +
mov [eax] edi +
call sub_10355F1  +
mov eax esi +
pop esi  +
jmp loc_103884F  +
xor eax eax +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test [ebp+arg_0] 2 +
push edi  +
mov edi ecx +
jz loc_103888C  +
push esi  +
push offset sub_10382A9  +
lea esi [edi-4] +
push dword ptr [esi]  +
push 60h  +
push edi  +
call sub_1035616  +
test [ebp+arg_0] 1 +
jz loc_1038887  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
jmp loc_10388A0  +
call sub_10382A9  +
test [ebp+arg_0] 1 +
jz loc_103889E  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax edi +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_10388BD  +
push 3  +
call sub_1038859  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
lea eax [ebp+var_4] +
mov esi ecx +
mov edi [esi+4] +
push eax  +
call sub_103809D  +
mov ecx [ebp+var_4] +
test ecx ecx +
jl loc_10388EF  +
mov ecx [ebp+arg_4] +
mov ecx [ecx] +
mov eax [esi] +
mov [eax+edi*4] ecx +
xor ecx ecx +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] ecx +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_10] +
and dword ptr [eax] 0 +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov ebx ecx +
mov esi [ebx] +
mov dword ptr [edi] 0C00000E5h +
mov byte ptr [ebp+arg_0+3] 0 +
test esi esi +
jz loc_103895C  +
cmp esi ebx +
jz loc_103895C  +
lea eax [ebp+arg_0+3] +
push eax  +
push [ebp+arg_C]  +
lea eax [ebp+var_4] +
push [ebp+arg_8]  +
mov ecx esi +
push [ebp+arg_4]  +
push eax  +
call sub_1038197  +
mov eax [ebp+var_4] +
test eax eax +
jl loc_1038950  +
cmp byte ptr [ebp+arg_0+3] 0 +
jnz loc_1038954  +
mov esi [esi] +
jmp loc_103891F  +
mov [edi] eax +
jmp loc_103895F  +
mov eax [ebp+arg_10] +
add esi 1Ch +
mov [eax] esi +
and dword ptr [edi] 0 +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov ebx ecx +
mov esi [ebx] +
mov dword ptr [edi] 0C00000E5h +
mov byte ptr [ebp+arg_0+3] 0 +
test esi esi +
jz loc_10389C9  +
cmp esi ebx +
jz loc_10389C9  +
lea eax [ebp+arg_0+3] +
push eax  +
push [ebp+arg_14]  +
lea eax [ebp+var_8] +
push [ebp+arg_10]  +
mov ecx esi +
push [ebp+arg_8]  +
push eax  +
call sub_1038197  +
mov eax [ebp+var_8] +
test eax eax +
jl loc_10389BD  +
cmp byte ptr [ebp+arg_0+3] 0 +
jnz loc_10389C1  +
mov esi [esi] +
jmp loc_103898C  +
mov [edi] eax +
jmp loc_1038A1B  +
mov dword ptr [edi] 0C00000BDh +
jmp loc_1038A1B  +
mov esi [ebp+arg_4] +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_C]  +
lea eax [ebp+arg_8] +
push [ebp+arg_8]  +
mov ecx esi +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push eax  +
call sub_1037005  +
mov eax [ebp+arg_8] +
test eax eax +
jl loc_10389BD  +
push 1  +
push [ebp+var_4]  +
mov ecx ebx +
push ebx  +
call sub_1032AF1  +
inc dword ptr [esi+10h]  +
mov eax [esi+10h] +
cmp eax [esi+14h] +
jbe loc_1038A18  +
lea eax [ebp+arg_8] +
push eax  +
mov ecx esi +
call sub_1036F48  +
mov eax [ebp+arg_8] +
test eax eax +
jl loc_10389BD  +
and dword ptr [edi] 0 +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
and [ebp+var_4] 0 +
push edi  +
mov edi ecx +
lea ecx [ebp+var_4] +
call sub_1036F95  +
test eax eax +
jnz loc_1038A83  +
mov edi 0C0000017h +
mov [ebp+arg_0] edi +
cmp [ebp+var_4] eax +
jz loc_1038A59  +
push [ebp+var_4]  +
call sub_1035827  +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+arg_0] +
mov [ebp+var_14] offset aDW7rtm_public_ +
mov [ebp+var_10] offset aWindowsRtlCrtl +
mov [ebp+var_C] 12Ah +
mov [ebp+var_8] offset aNewtearoff_all +
call sub_103D6FE  +
jmp loc_1038AB7  +
mov eax [ebp+arg_0] +
push esi  +
mov esi [ebp+var_4] +
push eax  +
push esi  +
mov ecx edi +
mov [esi+10h] eax +
call sub_1036FBA  +
test eax eax +
jge loc_1038AA4  +
push esi  +
mov edi eax +
call sub_1035827  +
jmp loc_1038AB6  +
mov ecx [ebp+arg_4] +
mov eax esi +
add esi 3Ch +
neg eax  +
sbb eax eax +
and eax esi +
mov [ecx] eax +
xor edi edi +
pop esi  +
mov eax edi +
pop edi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
imul esi esi +
add esi [ecx+16Ch] +
xor ebx ebx +
cmp [esi+5Dh] bl +
jnz loc_1038B45  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+arg_0]  +
add ecx 58h +
mov [ebp+var_10] ebx +
mov [ebp+var_C] ebx +
mov [ebp+var_8] ebx +
call sub_10386A4  +
cmp eax ebx +
jge loc_1038B10  +
lea ecx [ebp+var_10] +
mov ebx eax +
call sub_10366D6  +
jmp loc_1038B45  +
push edi  +
lea eax [ebp+var_10] +
lea edi [esi+10h] +
push eax  +
mov ecx edi +
call sub_10355BE  +
mov eax [ebp+arg_0] +
mov edi [edi] +
mov ecx [ebp+var_4] +
mov [esi+20h] eax +
shl eax 4 +
mov [esi+28h] ecx +
add eax edi +
lea ecx [ebp+var_10] +
mov [esi+1Ch] edi +
mov [esi+24h] eax +
mov byte ptr [esi+5Dh] 1 +
call sub_10366D6  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_1038AC3  +
test eax eax +
jl loc_1038BC9  +
mov eax [ebp+arg_4] +
imul edi edi +
mov al [eax] +
add edi [esi+16Ch] +
and al 0Fh +
push ebx  +
cmp al 1 +
jnz loc_1038BBE  +
cmp dword ptr [edi+8] 0FFFFFFFFh +
jnz loc_1038BBE  +
mov ebx [esi+164h] +
lea eax [ebp+arg_0] +
add esi 160h +
push eax  +
mov ecx esi +
call sub_1037EDC  +
mov eax [eax] +
test eax eax +
jl loc_1038BC8  +
lea eax [edi+24h] +
mov [ebp+arg_0] eax +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx esi +
call sub_10388C6  +
mov eax [eax] +
test eax eax +
jl loc_1038BC8  +
mov [edi+8] ebx +
mov eax [edi+8] +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
or [ebp+var_C] 0FFFFFFFFh +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
mov ebx ecx +
lea ecx [ebx+58h] +
call sub_1036BD1  +
test eax eax +
jl loc_1038C35  +
lea eax [ebp+var_C] +
push eax  +
push [ebp+var_4]  +
mov ecx ebx +
push [ebp+arg_0]  +
call sub_1038B52  +
test eax eax +
jl loc_1038C35  +
cmp [ebp+var_C] 0FFFFFFFFh +
jz loc_1038C33  +
push [ebp+arg_C]  +
lea esi [ebp+var_14] +
push [ebp+arg_8]  +
mov ecx ebx +
push [ebp+arg_4]  +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
call sub_103784B  +
test eax eax +
jl loc_1038C35  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push esi  +
mov edi ecx +
call sub_1038AC3  +
test eax eax +
jl loc_1038C7A  +
mov eax [ebp+arg_4] +
imul esi esi +
add esi [edi+16Ch] +
test eax eax +
jz loc_1038C6C  +
lea ecx [esi+1Ch] +
mov [eax] ecx +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_1038C78  +
add esi 24h +
mov [eax] esi +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
xor edi edi +
mov [ebp+var_4] ecx +
cmp [ebp+arg_8] edi +
jnz loc_1038C9B  +
int 3  +
mov esi [ebp+arg_14] +
cmp esi edi +
jz loc_1038C9A  +
mov ebx [ebp+arg_18] +
cmp ebx edi +
jz loc_1038C9A  +
mov eax [ebx] +
cmp eax [esi+4] +
ja loc_1038C9A  +
lea eax [ebp+arg_18] +
push eax  +
push [ebp+arg_0]  +
mov [ebp+arg_18] edi +
call sub_1037F8A  +
cmp eax edi +
jl loc_1038CEC  +
cmp byte ptr [ebp+arg_10] 0 +
jz loc_1038DCB  +
cmp byte ptr [ebp+arg_C] 0 +
mov ecx [ebp+var_4] +
lea eax [ebp+1Bh] +
push eax  +
push [ebp+arg_8]  +
jz loc_1038CF3  +
push [ebp+arg_4]  +
push [ebp+arg_18]  +
call sub_103758A  +
cmp eax edi +
jge loc_1038CFD  +
mov esi eax +
jmp loc_1038E4E  +
push [ebp+arg_18]  +
call sub_1037466  +
jmp loc_1038CE8  +
cmp byte ptr [ebp+arg_10+3] 0 +
jz loc_1038DCB  +
mov eax [ebx] +
cmp [esi+4] eax +
jnz loc_1038DB2  +
lea ecx [eax+0Ah] +
mov [ebp+var_C] edi +
mov [ebp+var_8] edi +
cmp ecx eax +
jb loc_1038D24  +
cmp ecx 0Ah +
jnb loc_1038D38  +
mov esi 0C0000095h +
mov ebx 758h +
mov edi offset aBuclRtlAddSi_1 +
mov [ebp+arg_10] esi +
jmp loc_1038D64  +
push ecx  +
lea ecx [ebp+var_C] +
call sub_1035904  +
test eax eax +
jnz loc_1038D89  +
mov esi 0C0000017h +
mov ebx 75Ah +
mov edi offset aTempelements_a +
mov [ebp+arg_10] esi +
cmp [ebp+var_C] eax +
jz loc_1038D64  +
push [ebp+var_C]  +
call sub_1035730  +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+arg_10] +
mov [ebp+var_14] offset aDW7rtmBaseXm_0 +
mov [ebp+var_10] offset aMicrodomimp_30 +
mov [ebp+var_C] ebx +
mov [ebp+var_8] edi +
call sub_103D6FE  +
jmp loc_1038E4E  +
mov eax [ebx] +
shl eax 4 +
push eax  +
push dword ptr [esi]  +
push [ebp+var_C]  +
call memcpy  +
add esp 0Ch +
push esi  +
lea ecx [ebp+var_C] +
call sub_1035595  +
cmp [ebp+var_C] edi +
jz loc_1038DB2  +
push [ebp+var_C]  +
call sub_1035730  +
mov eax [ebx] +
cmp eax [esi+4] +
jnb loc_1038C9A  +
mov ecx [esi] +
mov edx [ebp+arg_0] +
shl eax 4 +
mov [eax+ecx+8] edx +
inc dword ptr [ebx]  +
mov ecx [ebp+var_4] +
push edi  +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+arg_0]  +
call sub_1038C41  +
cmp eax edi +
jl loc_1038CEC  +
mov esi [ebp+arg_0] +
mov [ebp+arg_10] edi +
cmp [esi+4] edi +
jbe loc_1038E4C  +
mov eax [esi] +
mov eax [eax+edi+8] +
lea ecx [ebp+arg_0] +
push ecx  +
mov ecx [ebp+var_4] +
push eax  +
add ecx 58h +
call sub_1036BD1  +
test eax eax +
jl loc_1038CEC  +
mov eax [ebp+arg_0] +
mov al [eax] +
and al 0Fh +
cmp al 1 +
jnz loc_1038E3C  +
mov eax [esi] +
mov ecx [ebp+var_4] +
push ebx  +
push [ebp+arg_14]  +
push 1  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push dword ptr [eax+edi+8]  +
call sub_1038C85  +
test eax eax +
jl loc_1038CEC  +
inc [ebp+arg_10]  +
mov eax [ebp+arg_10] +
add edi 10h +
cmp eax [esi+4] +
jb loc_1038DEE  +
xor edi edi +
xor esi esi +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
xor esi esi +
push edi  +
mov [ebp+var_C] esi +
mov [ebp+var_8] esi +
mov [ebp+var_4] esi +
cmp [ebp+arg_8] esi +
jnz loc_1038E77  +
int 3  +
cmp [ebp+arg_10] esi +
jz loc_1038E76  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
push esi  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1038C85  +
cmp eax esi +
jge loc_1038E9E  +
mov edi eax +
jmp loc_1038EB6  +
mov eax [ebp+var_4] +
cmp eax [ebp+var_8] +
ja loc_1038E76  +
push [ebp+arg_10]  +
lea ecx [ebp+var_C] +
mov [ebp+var_8] eax +
call sub_1035595  +
xor edi edi +
mov eax [ebp+var_C] +
cmp eax esi +
jz loc_1038EC9  +
push eax  +
mov [ebp+var_C] esi +
mov [ebp+var_8] esi +
call sub_1035730  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+70h] +
xor ebx ebx +
mov [ebp+var_20] edi +
mov [ebp+var_1] bl +
mov [ebp+var_8] ebx +
cmp [eax+8] ebx +
jz loc_1039052  +
cmp [ebp+var_1] bl +
jnz loc_1039052  +
lea eax [ebp+var_18] +
push eax  +
push [ebp+var_8]  +
lea ecx [edi+58h] +
mov [ebp+var_18] ebx +
call sub_1036BD1  +
cmp eax ebx +
jl loc_1039090  +
mov eax [ebp+var_18] +
mov al [eax] +
and al 0Fh +
cmp al 1 +
jnz loc_1039040  +
lea eax [ebp+var_14] +
push eax  +
push ebx  +
push [ebp+var_8]  +
mov ecx edi +
call sub_1038C41  +
cmp eax ebx +
jl loc_1039090  +
mov eax [ebp+var_14] +
mov [ebp+var_18] ebx +
cmp [eax+4] ebx +
jbe loc_1039040  +
mov [ebp+var_10] ebx +
mov eax [ebp+var_14] +
mov eax [eax] +
mov ecx [ebp+var_10] +
mov eax [eax+ecx+8] +
lea ecx [ebp+var_1C] +
push ecx  +
push eax  +
lea ecx [edi+58h] +
mov [ebp+var_C] ebx +
mov [ebp+var_1C] ebx +
call sub_1036BD1  +
cmp eax ebx +
jl loc_1039090  +
mov esi [ebp+var_1C] +
mov al [esi] +
and al 0Fh +
cmp al 2 +
jnz loc_103905D  +
cmp dword ptr [esi+8] 0FFFFFFFFh +
jnz loc_1039025  +
cmp dword ptr [esi+10h] 0FFFFFFFFh +
jz loc_1039025  +
mov eax [esi+0Ch] +
lea ecx [ebp+var_C] +
push ecx  +
add edi 50h +
push eax  +
mov ecx edi +
call sub_103666A  +
cmp eax ebx +
jl loc_1039090  +
lea eax [ebp+var_24] +
push eax  +
push offset off_100CC54  +
push 3  +
push ebx  +
push [ebp+var_C]  +
push ebx  +
call sub_102FD0D  +
cmp eax ebx +
jl loc_1039090  +
cmp [ebp+var_24] 3 +
jnb loc_1039022  +
cmp [ebp+var_1] bl +
jnz loc_103905E  +
mov esi [esi+10h] +
lea eax [ebp+var_C] +
push eax  +
push esi  +
mov ecx edi +
call sub_103666A  +
cmp eax ebx +
jl loc_1039090  +
lea eax [ebp+var_28] +
push eax  +
push ebx  +
push [ebp+var_C]  +
push [ebp+arg_0]  +
call sub_102FCDB  +
cmp eax ebx +
jl loc_1039090  +
cmp [ebp+var_28] ebx +
jnz loc_1039022  +
mov eax [ebp+arg_4] +
mov ecx [ebp+var_8] +
mov [eax+8] ecx +
mov [ebp+var_1] 1 +
mov edi [ebp+var_20] +
inc [ebp+var_18]  +
mov eax [ebp+var_14] +
mov ecx [ebp+var_18] +
add [ebp+var_10] 10h +
cmp ecx [eax+4] +
jb loc_1038F55  +
cmp [ebp+var_1] bl +
jnz loc_1039052  +
inc [ebp+var_8]  +
mov eax [edi+70h] +
mov ecx [ebp+var_8] +
cmp ecx [eax+8] +
jnz loc_1038EFA  +
xor esi esi +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
int 3  +
lea eax [ebp+var_38] +
mov esi 0C000022Ah +
push eax  +
lea ecx [ebp+arg_0] +
mov [ebp+arg_0] esi +
mov [ebp+var_38] offset aDW7rtmBaseXm_0 +
mov [ebp+var_34] offset aMicrodomimp_31 +
mov [ebp+var_30] 8E4h +
mov [ebp+var_2C] offset aFfound +
call sub_103D6FE  +
jmp loc_1039054  +
mov esi eax +
jmp loc_1039054  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push esi  +
mov edi ecx +
call sub_1038AC3  +
test eax eax +
jl loc_10390C7  +
mov eax [edi+16Ch] +
imul esi esi +
cmp dword ptr [eax+esi+28h] 0 +
mov ecx [ebp+arg_4] +
setnz al  +
mov [ecx] al +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push esi  +
mov edi ecx +
call sub_1038AC3  +
test eax eax +
jl loc_1039100  +
mov eax [edi+16Ch] +
imul esi esi +
cmp dword ptr [eax+esi+20h] 0 +
mov ecx [ebp+arg_4] +
setnz al  +
mov [ecx] al +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
mov ebx [ebp+0Ch] +
mov eax ecx +
mov dword ptr [ebp-4] 0C00000E5h +
test ebx ebx +
jnz loc_1039156  +
lea ecx [ebp-4] +
call sub_102FD01  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-4] +
mov dword ptr [ebp-14h] offset aDW7rtmBaseXm_0 +
mov dword ptr [ebp-10h] offset aMicrodomimp_32 +
mov dword ptr [ebp-0Ch] 9F1h +
mov dword ptr [ebp-8] offset aNotNullChec_31 +
call sub_103D6FE  +
jmp loc_10391AE  +
and dword ptr [ebp+0Ch] 0 +
push esi  +
mov esi [ebp+8] +
push edi  +
push 4  +
pop ecx  +
mov edi offset dword_100751C +
xor edx edx +
cmps   +
jz loc_103917E  +
mov esi [ebp+8] +
push 4  +
pop ecx  +
mov edi offset dword_100AE44 +
xor edx edx +
cmps   +
jnz loc_1039199  +
lea ecx [ebp+0Ch] +
push ecx  +
push dword ptr [eax+20h]  +
mov ecx [eax+4Ch] +
call sub_10380FD  +
test eax eax +
jge loc_1039199  +
mov ecx [ebp+0Ch] +
mov [ebp-4] eax +
jmp loc_10391A4  +
mov eax [ebp+0Ch] +
mov ecx [ebx] +
and dword ptr [ebp-4] 0 +
mov [ebx] eax +
test ecx ecx +
jz loc_10391AC  +
mov eax [ecx] +
call dword ptr [eax]  +
pop edi  +
pop esi  +
mov eax [ebp-4] +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push edi  +
mov edi [ebp+0Ch] +
mov ebx ecx +
mov dword ptr [ebp-4] 0C00000E5h +
test edi edi +
jz loc_10391E2  +
or dword ptr [ebp-0Ch] 0FFFFFFFFh +
push esi  +
lea esi [ebp-14h] +
movs   +
movs   +
movs   +
movs   +
pop esi  +
mov ecx [ebp+8] +
call sub_102FCAB  +
test al al +
jnz loc_1039206  +
lea ecx [ebp-4] +
call sub_102FD01  +
mov dword ptr [ebp-0Ch] 0CB2h +
mov dword ptr [ebp-8] offset aRtlislutf8s_12 +
jmp loc_1039222  +
cmp dword ptr [ebp+0Ch] 0 +
jnz loc_103923E  +
lea ecx [ebp-4] +
call sub_102FD01  +
mov dword ptr [ebp-0Ch] 0CB3h +
mov dword ptr [ebp-8] offset aNotNullChec_26 +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-4] +
mov dword ptr [ebp-10h] offset aMicrodomimp_33 +
mov dword ptr [ebp-14h] offset aDW7rtmBaseXm_0 +
call sub_103D6FE  +
jmp loc_1039259  +
push dword ptr [ebp+0Ch]  +
mov ecx [ebx-2Ch] +
push dword ptr [ebp+8]  +
call sub_1038ED6  +
test eax eax +
jge loc_1039255  +
mov [ebp-4] eax +
jmp loc_1039259  +
and dword ptr [ebp-4] 0 +
mov eax [ebp-4] +
pop edi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax [ebp+18h] +
mov dword ptr [ebp-4] 0C00000E5h +
test eax eax +
jz loc_1039280  +
mov byte ptr [eax] 0 +
cmp dword ptr [ebp+10h] 0FFFFFFFFh +
jnz loc_103929E  +
lea ecx [ebp-4] +
call sub_102FD01  +
mov dword ptr [ebp-0Ch] 0CEDh +
mov dword ptr [ebp-8] offset aThenodeThenode +
jmp loc_10392B8  +
test eax eax +
jnz loc_10392D4  +
lea ecx [ebp-4] +
call sub_102FD01  +
mov dword ptr [ebp-0Ch] 0CEEh +
mov dword ptr [ebp-8] offset aNotNullChec_34 +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-4] +
mov dword ptr [ebp-10h] offset aMicrodomimp_34 +
mov dword ptr [ebp-14h] offset aDW7rtmBaseXm_0 +
call sub_103D6FE  +
jmp loc_10392ED  +
mov ecx [ecx-2Ch] +
push eax  +
push dword ptr [ebp+10h]  +
call sub_1039099  +
test eax eax +
jge loc_10392E9  +
mov [ebp-4] eax +
jmp loc_10392ED  +
and dword ptr [ebp-4] 0 +
mov eax [ebp-4] +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax [ebp+18h] +
mov dword ptr [ebp-4] 0C00000E5h +
test eax eax +
jz loc_1039312  +
mov byte ptr [eax] 0 +
cmp dword ptr [ebp+10h] 0FFFFFFFFh +
jnz loc_1039330  +
lea ecx [ebp-4] +
call sub_102FD01  +
mov dword ptr [ebp-0Ch] 0CFFh +
mov dword ptr [ebp-8] offset aThenodeThenode +
jmp loc_103934A  +
test eax eax +
jnz loc_1039366  +
lea ecx [ebp-4] +
call sub_102FD01  +
mov dword ptr [ebp-0Ch] 0D00h +
mov dword ptr [ebp-8] offset aNotNullChec_35 +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-4] +
mov dword ptr [ebp-10h] offset aMicrodomimp_35 +
mov dword ptr [ebp-14h] offset aDW7rtmBaseXm_0 +
call sub_103D6FE  +
jmp loc_103937F  +
mov ecx [ecx-2Ch] +
push eax  +
push dword ptr [ebp+10h]  +
call sub_10390D2  +
test eax eax +
jge loc_103937B  +
mov [ebp-4] eax +
jmp loc_103937F  +
and dword ptr [ebp-4] 0 +
mov eax [ebp-4] +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push edi  +
mov edi [ebp+1Ch] +
mov ebx ecx +
mov dword ptr [ebp-4] 0C00000E5h +
test edi edi +
jz loc_10393F0  +
or dword ptr [ebp-0Ch] 0FFFFFFFFh +
mov ecx [ebp+18h] +
push esi  +
lea esi [ebp-14h] +
movs   +
movs   +
movs   +
movs   +
pop esi  +
call sub_102FCAB  +
test al al +
jnz loc_1039408  +
lea ecx [ebp-4] +
call sub_102FD01  +
mov dword ptr [ebp-0Ch] 0D39h +
mov dword ptr [ebp-8] offset aRtlislutf8st_6 +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-4] +
mov dword ptr [ebp-10h] offset aMicrodomimp_36 +
mov dword ptr [ebp-14h] offset aDW7rtmBaseXm_0 +
call sub_103D6FE  +
jmp loc_1039428  +
lea ecx [ebp-4] +
call sub_102FD01  +
mov dword ptr [ebp-0Ch] 0D38h +
mov dword ptr [ebp-8] offset aNotNullChec_36 +
jmp loc_10393D4  +
***
push dword ptr [ebp+1Ch]  +
mov ecx [ebx-2Ch] +
push dword ptr [ebp+18h]  +
push 0  +
push dword ptr [ebp+10h]  +
call sub_1038BD4  +
test eax eax +
jge loc_1039424  +
mov [ebp-4] eax +
jmp loc_1039428  +
and dword ptr [ebp-4] 0 +
mov eax [ebp-4] +
pop edi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push edi  +
mov edi [ebp+20h] +
mov ebx ecx +
mov dword ptr [ebp-4] 0C00000E5h +
test edi edi +
jz loc_103947A  +
or dword ptr [ebp-0Ch] 0FFFFFFFFh +
cmp dword ptr [ebp+18h] 0 +
push esi  +
lea esi [ebp-14h] +
movs   +
movs   +
movs   +
movs   +
jz loc_10394AC  +
mov ecx [ebp+18h] +
call sub_102FCAB  +
test al al +
jnz loc_10394AC  +
mov esi 0D49h +
mov edi offset aNamespaceuri0R +
jmp loc_10394C2  +
lea ecx [ebp-4] +
call sub_102FD01  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-4] +
mov dword ptr [ebp-14h] offset aDW7rtmBaseXm_0 +
mov dword ptr [ebp-10h] offset aMicrodomimp_37 +
mov dword ptr [ebp-0Ch] 0D48h +
mov dword ptr [ebp-8] offset aNotNullChec_36 +
call sub_103D6FE  +
jmp loc_103950E  +
mov ecx [ebp+1Ch] +
call sub_102FCAB  +
test al al +
jnz loc_10394EC  +
mov esi 0D4Ah +
mov edi offset aRtlislutf8st_7 +
lea ecx [ebp-4] +
call sub_102FD01  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-4] +
mov dword ptr [ebp-14h] offset aDW7rtmBaseXm_0 +
mov dword ptr [ebp-10h] offset aMicrodomimp_37 +
mov [ebp-0Ch] esi +
mov [ebp-8] edi +
call sub_103D6FE  +
jmp loc_103950D  +
push dword ptr [ebp+20h]  +
mov ecx [ebx-2Ch] +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+10h]  +
call sub_1038BD4  +
test eax eax +
jge loc_1039509  +
mov [ebp-4] eax +
jmp loc_103950D  +
and dword ptr [ebp-4] 0 +
pop esi  +
mov eax [ebp-4] +
pop edi  +
pop ebx  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
push edi  +
xor edi edi +
cmp dword ptr [ebp+10h] 0FFFFFFFFh +
mov esi ecx +
mov dword ptr [ebp-4] 0C00000E5h +
mov [ebp-0Ch] edi +
mov [ebp-8] edi +
jnz loc_1039549  +
mov esi 0D59h +
mov edi offset aTheelementThee +
jmp loc_103955F  +
mov ecx [ebp+18h] +
call sub_102FCAB  +
test al al +
jnz loc_103956F  +
mov esi 0D5Ah +
mov edi offset aRtlislutf8st_6 +
lea ecx [ebp-4] +
call sub_102FD01  +
mov [ebp-0Ch] esi +
mov [ebp-8] edi +
jmp loc_103958A  +
cmp [ebp+1Ch] edi +
jnz loc_10395A6  +
lea ecx [ebp-4] +
call sub_102FD01  +
mov dword ptr [ebp-0Ch] 0D5Bh +
mov dword ptr [ebp-8] offset aNotNullChec_37 +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-4] +
mov dword ptr [ebp-10h] offset aMicrodomimp_23 +
mov dword ptr [ebp-14h] offset aDW7rtmBaseXm_0 +
call sub_103D6FE  +
jmp loc_10395DE  +
mov ecx [esi-2Ch] +
lea eax [ebp-0Ch] +
push eax  +
push edi  +
push dword ptr [ebp+18h]  +
push edi  +
push dword ptr [ebp+10h]  +
call sub_1038E5C  +
cmp eax edi +
jge loc_10395C3  +
mov [ebp-4] eax +
jmp loc_10395D1  +
push dword ptr [ebp+1Ch]  +
lea ecx [ebp-0Ch] +
call sub_1035595  +
mov [ebp-4] edi +
cmp [ebp-0Ch] edi +
jz loc_10395DE  +
push dword ptr [ebp-0Ch]  +
call sub_1035730  +
mov eax [ebp-4] +
pop edi  +
pop esi  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
push edi  +
xor edi edi +
cmp dword ptr [ebp+10h] 0FFFFFFFFh +
mov esi ecx +
mov dword ptr [ebp-4] 0C00000E5h +
mov [ebp-0Ch] edi +
mov [ebp-8] edi +
jnz loc_1039619  +
mov esi 0D6Eh +
mov edi offset aTheelementThee +
jmp loc_1039647  +
mov ecx [ebp+18h] +
call sub_102FCAB  +
test al al +
jnz loc_1039631  +
mov esi 0D6Fh +
mov edi offset aRtlislutf8st_8 +
jmp loc_1039647  +
mov ecx [ebp+1Ch] +
call sub_102FCAB  +
test al al +
jnz loc_1039657  +
mov esi 0D70h +
mov edi offset aRtlislutf8st_7 +
lea ecx [ebp-4] +
call sub_102FD01  +
mov [ebp-0Ch] esi +
mov [ebp-8] edi +
jmp loc_1039672  +
cmp [ebp+20h] edi +
jnz loc_103968E  +
lea ecx [ebp-4] +
call sub_102FD01  +
mov dword ptr [ebp-0Ch] 0D71h +
mov dword ptr [ebp-8] offset aNotNullChec_37 +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-4] +
mov dword ptr [ebp-10h] offset aMicrodomimp_24 +
mov dword ptr [ebp-14h] offset aDW7rtmBaseXm_0 +
call sub_103D6FE  +
jmp loc_10396C9  +
mov ecx [esi-2Ch] +
lea eax [ebp-0Ch] +
push eax  +
push 1  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+10h]  +
call sub_1038E5C  +
cmp eax edi +
jge loc_10396AE  +
mov [ebp-4] eax +
jmp loc_10396BC  +
push dword ptr [ebp+20h]  +
lea ecx [ebp-0Ch] +
call sub_1035595  +
mov [ebp-4] edi +
cmp [ebp-0Ch] edi +
jz loc_10396C9  +
push dword ptr [ebp-0Ch]  +
call sub_1035730  +
mov eax [ebp-4] +
pop edi  +
pop esi  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
xor ebx ebx +
xor edi edi +
cmp [esi+0Ch] ebx +
jbe loc_1039703  +
mov ecx [esi+4] +
lea eax [ebp+var_4] +
push eax  +
push esi  +
add ecx ebx +
call sub_1037F67  +
inc edi  +
add ebx 10h +
cmp edi [esi+0Ch] +
jb loc_10396EB  +
mov eax [esi+4] +
lea edi [esi+18h] +
cmp eax edi +
jz loc_1039721  +
test eax eax +
jz loc_1039721  +
push eax  +
call sub_103DC88  +
and dword ptr [esi+0Ch] 0 +
and dword ptr [esi+4] 0 +
jmp loc_1039725  +
and dword ptr [esi+0Ch] 0 +
and dword ptr [esi+4] 0 +
push offset loc_103AFFF  +
push 7  +
push 10h  +
push edi  +
call sub_1035616  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jz loc_1039753  +
xor eax eax +
jmp loc_1039772  +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_103976C  +
push edi  +
call sub_1038804  +
test eax eax +
jz loc_1039771  +
mov [esi] eax +
mov [esi+4] edi +
jmp loc_1039771  +
mov eax offset dword_100B8B4 +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax [ecx] +
test eax eax +
jz locret_103978F  +
and dword ptr [ecx] 0 +
and dword ptr [ecx+4] 0 +
push eax  +
call sub_10388AA  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
and dword ptr [edi] 0 +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_0]  +
lea eax [ebp+arg_4] +
push eax  +
mov esi ecx +
call sub_1035842  +
mov eax [ebp+arg_4] +
test eax eax +
jl loc_10397F1  +
push edi  +
push [ebp+var_4]  +
lea eax [ebp+arg_0] +
push [ebp+var_8]  +
push [ebp+arg_0]  +
push eax  +
push 0  +
push dword ptr [esi+0Ch]  +
push [ebp+var_4]  +
push [ebp+var_8]  +
call __aullrem  +
mov ecx eax +
shl ecx 4 +
add ecx [esi+4] +
call sub_10388FF  +
mov eax [ebp+arg_0] +
test eax eax +
jl loc_10397F1  +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
and [ebp+var_C] 0 +
and [ebp+var_8] 0 +
push esi  +
lea eax [ebp+var_C] +
push eax  +
push [ebp+arg_0]  +
lea eax [ebp+var_4] +
push eax  +
mov esi ecx +
call sub_1035842  +
mov eax [ebp+var_4] +
test eax eax +
jl loc_103985D  +
push [ebp+var_8]  +
lea eax [ebp+arg_0] +
push [ebp+var_C]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push esi  +
push eax  +
push 0  +
push dword ptr [esi+0Ch]  +
push [ebp+var_8]  +
push [ebp+var_C]  +
call __aullrem  +
mov ecx eax +
shl ecx 4 +
add ecx [esi+4] +
call sub_103896D  +
mov eax [ebp+arg_0] +
test eax eax +
jl loc_103985D  +
xor eax eax +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 0 +
jz loc_1039875  +
int 3  +
push eax  +
push dword ptr [ecx+20h]  +
mov ecx [ecx+4Ch] +
call sub_1038A29  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
push 4  +
mov eax ecx +
pop ecx  +
mov edi offset dword_100CF20 +
xor edx edx +
cmps   +
pop edi  +
pop esi  +
jnz loc_10398B5  +
push dword ptr [ebp+0Ch]  +
mov ecx [eax-2Ch] +
call sub_1039867  +
pop ebp  +
retn 8  +
***
mov ecx [eax-2Ch] +
pop ebp  +
jmp loc_103910B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi edi +
imul esi esi +
add esi [ecx+16Ch] +
mov [ebp+var_4] ecx +
cmp dword ptr [esi+38h] 0FFFFFFFFh +
jnz loc_103996D  +
mov ebx edi +
test edi edi +
jz loc_103996D  +
jmp loc_10398F4  +
mov ecx [ebp+var_4] +
lea eax [ebp+arg_0] +
push eax  +
dec edi  +
push edi  +
add ecx 58h +
call sub_1036BD1  +
test eax eax +
jl loc_1039977  +
mov eax [ebp+arg_0] +
mov al [eax] +
and al 0Fh +
cmp al 1 +
jz loc_1039915  +
cmp al 7 +
jnz loc_1039964  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push edi  +
call sub_1038C41  +
test eax eax +
jl loc_1039977  +
mov eax [ebp+var_8] +
mov ecx [eax+4] +
xor edx edx +
test ecx ecx +
jbe loc_1039947  +
mov eax [eax] +
add eax 8 +
cmp [eax] ebx +
jz loc_103996A  +
inc edx  +
add eax 10h +
cmp edx ecx +
jb loc_103993B  +
mov eax [ebp+var_C] +
mov ecx [eax+4] +
xor edx edx +
test ecx ecx +
jbe loc_1039964  +
mov eax [eax] +
add eax 8 +
cmp [eax] ebx +
jz loc_103996A  +
inc edx  +
add eax 10h +
cmp edx ecx +
jb loc_1039958  +
test edi edi +
jnz loc_10398F1  +
jmp loc_103996D  +
mov [esi+38h] edi +
mov eax [esi+38h] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_C] +
or dword ptr [edi] 0FFFFFFFFh +
mov al [eax] +
and al 0Fh +
mov esi ecx +
cmp al 7 +
jz loc_1039A16  +
cmp al 2 +
jz loc_1039A16  +
mov ebx [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push ebx  +
call sub_10398C3  +
test eax eax +
jl loc_1039A18  +
push 0  +
lea eax [ebp+arg_4] +
push eax  +
push [ebp+arg_C]  +
mov ecx esi +
call sub_1038C41  +
test eax eax +
jl loc_1039A18  +
cmp [ebp+arg_C] ebx +
jz loc_1039A16  +
mov ecx [ebp+arg_4] +
test ecx ecx +
jz loc_1039A16  +
mov esi [ecx+4] +
cmp esi 1 +
jnb loc_10399DC  +
int 3  +
xor eax eax +
test esi esi +
jbe loc_1039A16  +
mov ecx [ecx] +
lea edx [ecx+8] +
cmp [edx] ebx +
jz loc_10399F5  +
inc eax  +
add edx 10h +
cmp eax esi +
jb loc_10399E7  +
jmp loc_1039A16  +
cmp [ebp+arg_8] 1 +
jnz loc_1039A09  +
dec esi  +
cmp eax esi +
jnb loc_1039A16  +
shl eax 4 +
mov eax [eax+ecx+18h] +
jmp loc_1039A14  +
test eax eax +
jbe loc_1039A16  +
shl eax 4 +
mov eax [eax+ecx-8] +
mov [edi] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
mov ebx [ebp+arg_0] +
xor eax eax +
push esi  +
mov esi ecx +
mov ecx [ebx+0Ch] +
push edi  +
mov [ebp+var_4] 0C00000E5h +
mov [ebp+var_C] eax +
mov [ebp+var_10] eax +
mov [ebp+var_14] eax +
mov [ebp+var_8] eax +
cmp ecx eax +
jz loc_1039A9A  +
lea edi [esi+158h] +
push edi  +
call sub_1038003  +
test eax eax +
jl loc_1039BE1  +
mov ecx [edi] +
mov eax [ecx] +
lea edi [esi+13Ch] +
push edi  +
lea edx [esi+15Ch] +
push edx  +
push dword ptr [ebx+14h]  +
push dword ptr [ebx+10h]  +
call dword ptr [eax+0Ch]  +
test eax eax +
jl loc_1039BE1  +
mov edi [edi] +
cmp edi 18h +
jnb loc_1039AAB  +
mov esi 9B2h +
mov edi offset aM_microdomdata +
jmp loc_1039B09  +
lea edi [esi+13Ch] +
mov edx edi +
mov ecx ebx +
call sub_1031291  +
jmp loc_1039A7F  +
mov eax [esi+144h] +
mov ecx [eax+4] +
cmp ecx edi +
jz loc_1039AC4  +
mov esi 9B5h +
mov edi offset aPheaderUltotal +
jmp loc_1039B09  +
cmp dword ptr [eax] 6448644Dh +
jz loc_1039AD8  +
mov esi 9B6h +
mov edi offset aPheaderUlsigna +
jmp loc_1039B09  +
cmp [eax+0Ch] ecx +
jb loc_1039AE9  +
mov esi 9B7h +
mov edi offset aPheaderUloffse +
jmp loc_1039B09  +
cmp [eax+8] ecx +
jb loc_1039AFA  +
mov esi 9B8h +
mov edi offset aPheaderUloff_0 +
jmp loc_1039B09  +
cmp [eax+10h] ecx +
jb loc_1039B1C  +
mov esi 9B9h +
mov edi offset aPheaderUloff_1 +
lea ecx [ebp+var_4] +
call sub_102FD01  +
mov [ebp+var_1C] esi +
mov [ebp+var_18] edi +
jmp loc_1039C12  +
lea ecx [ebp+var_14] +
push ecx  +
lea ecx [ebp+var_8] +
push ecx  +
lea ecx [ebp+var_10] +
push ecx  +
lea ecx [ebp+var_C] +
push ecx  +
push eax  +
mov [esi+154h] eax +
call sub_1035521  +
mov eax [ebp+var_C] +
test eax eax +
jz loc_1039B5D  +
cmp dword ptr [eax] 7053644Dh +
jz loc_1039B5D  +
mov eax 9C9h +
mov ecx offset aPstringpoolSig +
mov [ebp+var_4] 0C000007Bh +
jmp loc_1039C0C  +
mov edi [ebp+var_10] +
test edi edi +
jz loc_1039B78  +
cmp dword ptr [edi] 6C44644Dh +
jz loc_1039B78  +
mov eax 9CCh +
mov ecx offset aPdomlayoutUlsi +
jmp loc_1039B51  +
mov ebx [ebp+var_14] +
test ebx ebx +
jz loc_1039B93  +
cmp dword ptr [ebx] 7444644Dh +
jz loc_1039B93  +
mov eax 9CFh +
mov ecx offset aPdoctypeUlsign +
jmp loc_1039B51  +
push eax  +
lea ecx [esi+50h] +
call sub_1036590  +
test eax eax +
jl loc_1039BE1  +
push edi  +
lea ecx [esi+58h] +
call sub_10381F0  +
test eax eax +
jl loc_1039BE1  +
lea edi [esi+78h] +
push 7  +
mov ecx edi +
call sub_103E44D  +
test eax eax +
jl loc_1039BE1  +
push ebx  +
mov ecx edi +
call sub_1037E3E  +
test eax eax +
jl loc_1039BE1  +
cmp [ebp+var_8] 0 +
jz loc_1039BE6  +
push [ebp+var_8]  +
lea ecx [esi+124h] +
call sub_10364CB  +
test eax eax +
jge loc_1039BE6  +
mov [ebp+var_4] eax +
jmp loc_1039C32  +
mov eax [esi+70h] +
push dword ptr [eax+8]  +
lea ecx [esi+16Ch] +
call sub_1039742  +
test eax eax +
jnz loc_1039C2E  +
mov eax 9DFh +
mov ecx offset aM_propertycach +
mov [ebp+var_4] 0C0000017h +
mov [ebp+var_1C] eax +
mov [ebp+var_18] ecx +
lea eax [ebp+var_24] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_20] offset aMicrodomimp_38 +
mov [ebp+var_24] offset aDW7rtmBaseXm_0 +
call sub_103D6FE  +
jmp loc_1039C32  +
and [ebp+var_4] 0 +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx [ebp+arg_4] +
and dword ptr [ebx] 0 +
push esi  +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
mov esi ecx +
call sub_1039795  +
test eax eax +
jl loc_1039D0E  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_1039C79  +
mov eax [eax] +
mov [ebx] eax +
xor eax eax +
jmp loc_1039D0E  +
push edi  +
jmp loc_1039CF0  +
mov edi [esi+0A0h] +
mov eax [edi] +
and eax 0Fh +
jnz loc_1039CDD  +
mov ecx [esi+98h] +
lea eax [edi+18h] +
mov [esi+0A0h] eax +
lea eax [ebp+arg_4] +
push eax  +
push dword ptr [edi+4]  +
mov [ebp+var_8] edi +
call sub_103666A  +
test eax eax +
jl loc_1039D0D  +
lea eax [ebp+var_4] +
push eax  +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_102FCDB  +
test eax eax +
jl loc_1039D0D  +
cmp [ebp+var_4] 0 +
jnz loc_1039CF0  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx esi +
call sub_10397FC  +
test eax eax +
jl loc_1039D0D  +
mov [ebx] edi +
jmp loc_1039CF0  +
cmp eax 1 +
jz loc_1039CE7  +
cmp eax 2 +
jnz loc_1039CF0  +
add edi 10h +
mov [esi+0A0h] edi +
mov ecx [esi+0A4h] +
mov eax [esi+0A8h] +
cmp ecx [eax+4] +
inc dword ptr [esi+0A4h]  +
jb loc_1039C7C  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+8Ch] +
call sub_1032B3F  +
mov ecx esi +
pop esi  +
jmp sub_10396D7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_103DA12  +
lea eax [esi+8Ch] +
xor ecx ecx +
mov [eax] ecx +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov eax [ebp+arg_0] +
mov [esi+98h] eax +
mov [esi+0A4h] ecx +
mov [esi+0A8h] ecx +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 64h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
lea eax [ecx+148h] +
xor ebx ebx +
mov [ebp+var_10] eax +
mov [eax] ebx +
lea eax [ebp+var_48] +
push eax  +
lea eax [ebp+var_54] +
push eax  +
push 26h  +
push ebx  +
push ebx  +
push esi  +
push 1  +
mov [ebp+var_18] ecx +
mov [ebp+var_4] 0C00000E5h +
call sub_1030258  +
cmp eax ebx +
jge loc_1039DB7  +
mov ebx eax +
jmp loc_1039F73  +
mov eax [ebp+var_54] +
push edi  +
cmp eax [esi] +
jnz loc_1039EFB  +
mov ecx [ebp+arg_4] +
jmp loc_1039F6D  +
lea eax [ebp+var_48] +
push eax  +
lea eax [ebp+var_54] +
push eax  +
push 26h  +
push ebx  +
push ebx  +
lea eax [ebp+var_3C] +
push eax  +
push 1  +
call sub_1030258  +
cmp eax ebx +
jl loc_1039F5E  +
mov edi [ebp+var_10] +
push edi  +
lea eax [ebp+var_54] +
push eax  +
call sub_1035B9E  +
cmp eax ebx +
jl loc_1039F5E  +
cmp [ebp+var_48] ebx +
jz loc_1039EF8  +
lea eax [ebp+var_60] +
push eax  +
lea eax [ebp+var_24] +
push eax  +
push 3Bh  +
push ebx  +
push ebx  +
lea eax [ebp+var_48] +
push eax  +
push 1  +
mov [ebp+var_8] ebx +
call sub_1030258  +
cmp eax ebx +
jl loc_1039F5E  +
cmp [ebp+var_24] ebx +
jz loc_1039F29  +
mov eax [ebp+var_1C] +
cmp byte ptr [eax] 23h +
jnz loc_1039E5E  +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+var_24] +
push eax  +
call sub_103706F  +
cmp eax ebx +
jl loc_1039F5E  +
push edi  +
push [ebp+var_14]  +
call sub_1035BFD  +
jmp loc_1039EEF  +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ebp+var_24] +
push eax  +
call sub_1035B57  +
cmp eax ebx +
jl loc_1039F5E  +
cmp [ebp+arg_0] 0FFFFFFFFh +
jz loc_1039E7F  +
push edi  +
push [ebp+arg_0]  +
jmp loc_1039E54  +
mov esi [ebp+var_18] +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_24] +
push eax  +
lea ecx [esi+78h] +
call sub_1039C41  +
cmp eax ebx +
jl loc_1039F5E  +
mov eax [ebp+var_8] +
cmp eax ebx +
jnz loc_1039EC8  +
push edi  +
push 26h  +
call sub_1035BFD  +
cmp eax ebx +
jl loc_1039F5E  +
push edi  +
lea eax [ebp+var_24] +
push eax  +
call sub_1035B9E  +
cmp eax ebx +
jl loc_1039F5E  +
push edi  +
push 3Bh  +
jmp loc_1039E54  +
mov eax [eax+8] +
cmp eax 0FFFFFFFFh +
jz loc_1039EF3  +
lea ecx [ebp+var_C] +
push ecx  +
push eax  +
lea ecx [esi+50h] +
call sub_103666A  +
cmp eax ebx +
jl loc_1039F5E  +
cmp [ebp+var_C] ebx +
jz loc_1039EF3  +
push edi  +
push [ebp+var_C]  +
call sub_1035B9E  +
cmp eax ebx +
jl loc_1039F5E  +
lea esi [ebp+var_60] +
jmp loc_1039EFB  +
lea esi [ebp+var_48] +
lea edi [ebp+var_3C] +
movs   +
movs   +
movs   +
cmp [ebp+var_3C] ebx +
jnz loc_1039DCB  +
mov ecx [ebp+var_10] +
lea edx [ebp+var_30] +
mov [ebp+var_30] ebx +
mov [ebp+var_2C] ebx +
mov [ebp+var_28] ebx +
call sub_102FFAF  +
cmp eax ebx +
lea ecx [ebp+var_30] +
jge loc_1039F62  +
mov ebx eax +
jmp loc_1039F6D  +
lea ecx [ebp+var_4] +
call sub_102FD01  +
lea eax [ebp+var_64] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_64] offset aDW7rtmBaseXm_0 +
mov [ebp+var_60] offset aMicrodomimp_39 +
mov [ebp+var_5C] 4DBh +
mov [ebp+var_58] offset aEntity_length0 +
call sub_103D6FE  +
mov ebx [ebp+var_4] +
jmp loc_1039F72  +
mov ebx eax +
jmp loc_1039F72  +
push [ebp+arg_4]  +
call sub_1035D7C  +
lea ecx [ebp+var_30] +
call sub_1032B6D  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_8]  +
mov esi ecx +
xor edi edi +
lea ecx [esi+58h] +
mov [ebp+var_4] edi +
call sub_1036BD1  +
cmp eax edi +
jge loc_1039FAB  +
mov esi eax +
jmp loc_103A067  +
or [ebp+var_18] 0FFFFFFFFh +
lea eax [ebp+var_18] +
push eax  +
push 1  +
push [ebp+var_4]  +
mov ecx esi +
push [ebp+arg_8]  +
call sub_1039983  +
cmp eax edi +
jl loc_1039FA4  +
cmp [ebp+var_18] 0FFFFFFFFh +
jnz loc_1039FD4  +
mov eax [esi+70h] +
mov esi [eax+8] +
jmp loc_1039FD7  +
mov esi [ebp+var_18] +
mov [ebp+var_8] edi +
mov [ebp+var_4] edi +
cmp esi [ebp+arg_8] +
jnb loc_1039FE3  +
int 3  +
mov eax esi +
sub eax [ebp+arg_8] +
lea ecx [ebp+var_8] +
push eax  +
call sub_1035904  +
test eax eax +
jnz loc_103A034  +
mov esi 0C0000017h +
mov [ebp+arg_10] esi +
cmp [ebp+var_8] edi +
jz loc_103A00A  +
push [ebp+var_8]  +
call sub_1035730  +
lea eax [ebp+var_10] +
push eax  +
lea ecx [ebp+arg_10] +
mov [ebp+var_10] offset aDW7rtmBaseXm_0 +
mov [ebp+var_C] offset aMicrodomimp_40 +
mov [ebp+var_8] 544h +
mov [ebp+var_4] offset aTempnodes_al_0 +
call sub_103D6FE  +
jmp loc_103A067  +
mov eax [ebp+arg_8] +
jmp loc_103A049  +
mov edx [ebp+var_8] +
mov ecx eax +
sub ecx [ebp+arg_8] +
shl ecx 4 +
mov [ecx+edx+8] eax +
inc eax  +
cmp eax esi +
jb loc_103A039  +
push [ebp+arg_10]  +
lea ecx [ebp+var_8] +
call sub_1035595  +
xor esi esi +
cmp [ebp+var_8] edi +
jz loc_103A067  +
push [ebp+var_8]  +
call sub_1035730  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
imul esi esi +
push edi  +
mov edi ecx +
add esi [edi+16Ch] +
xor ebx ebx +
lea eax [esi+50h] +
mov [ebp+var_4] eax +
cmp [eax] ebx +
jnz loc_103A145  +
mov ecx [ebp+arg_4] +
movzx eax byte ptr [ecx] +
and eax 0Fh +
dec eax  +
dec eax  +
jz loc_103A0C2  +
dec eax  +
jz loc_103A0B8  +
dec eax  +
dec eax  +
jz loc_103A0BD  +
dec eax  +
jnz loc_103A156  +
mov eax [ecx+4] +
jmp loc_103A0C5  +
mov eax [ecx+8] +
jmp loc_103A0C5  +
mov eax [ecx+10h] +
cmp eax 0FFFFFFFFh +
jz loc_103A145  +
lea ecx [ebp+arg_0] +
push ecx  +
push eax  +
lea ecx [edi+50h] +
call sub_103666A  +
cmp eax ebx +
jge loc_103A0DF  +
mov ebx eax +
jmp loc_103A14D  +
cmp [ebp+arg_0] ebx +
jz loc_103A145  +
cmp [esi+5Ch] bl +
jz loc_103A0EA  +
int 3  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+arg_0]  +
mov ecx edi +
mov [ebp+var_10] ebx +
mov [ebp+var_C] ebx +
mov [ebp+var_8] ebx +
call sub_1039D74  +
cmp eax ebx +
jge loc_103A111  +
lea ecx [ebp+var_10] +
mov ebx eax +
call sub_1032B6D  +
jmp loc_103A14D  +
cmp [ebp+var_10] ebx +
jnz loc_103A11E  +
mov [esi+5Ch] bl +
mov esi [ebp+arg_0] +
jmp loc_103A137  +
mov byte ptr [esi+5Ch] 1 +
lea esi [ebp+var_10] +
lea edi [ebp+var_1C] +
movs   +
movs   +
movs   +
mov [ebp+var_10] ebx +
mov [ebp+var_C] ebx +
mov [ebp+var_8] ebx +
lea esi [ebp+var_1C] +
mov edi [ebp+var_4] +
movs   +
movs   +
lea ecx [ebp+var_10] +
movs   +
call sub_1032B6D  +
mov eax [ebp+arg_8] +
mov ecx [ebp+var_4] +
mov [eax] ecx +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 0Ch  +
mov eax [ebp+arg_8] +
mov [eax] ebx +
jmp loc_103A14D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
cmp dword ptr [ebp+10h] 0FFFFFFFFh +
push esi  +
push edi  +
mov dword ptr [ebp-4] 0C00000E5h +
jnz loc_103A191  +
lea ecx [ebp-4] +
call sub_102FD01  +
mov dword ptr [ebp-0Ch] 0DDAh +
mov dword ptr [ebp-8] offset aWhichelementWi +
jmp loc_103A1AD  +
cmp dword ptr [ebp+18h] 0 +
jnz loc_103A1C9  +
lea ecx [ebp-4] +
call sub_102FD01  +
mov dword ptr [ebp-0Ch] 0DDBh +
mov dword ptr [ebp-8] offset aNotNullChec_33 +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-4] +
mov dword ptr [ebp-10h] offset aMicrodomimp_41 +
mov dword ptr [ebp-14h] offset aDW7rtmBaseXm_0 +
call sub_103D6FE  +
jmp loc_103A1ED  +
push dword ptr [ebp+18h]  +
mov ecx [ecx-2Ch] +
sub esp 10h +
mov edi esp +
lea esi [ebp+8] +
movs   +
movs   +
movs   +
movs   +
call sub_1039F80  +
test eax eax +
jge loc_103A1E9  +
mov [ebp-4] eax +
jmp loc_103A1ED  +
and dword ptr [ebp-4] 0 +
mov eax [ebp-4] +
pop edi  +
pop esi  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 90h +
and [ebp+var_4] 0 +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+var_4] +
mov esi ecx +
push eax  +
push edi  +
lea ecx [esi+58h] +
mov [ebp+var_C] esi +
call sub_1036BD1  +
test eax eax +
jl loc_103A567  +
xor eax eax +
push ebx  +
mov [ebp+var_8] eax +
cmp [ebp+arg_4] eax +
jz loc_103A564  +
mov ebx [ebp+arg_C] +
add ebx 8 +
jmp loc_103A246  +
mov edi [ebp+arg_0] +
mov esi [ebp+var_C] +
mov ecx [ebp+arg_8] +
mov eax [ecx+eax*4] +
mov ecx 2005h +
cmp eax ecx +
ja loc_103A3F4  +
jz loc_103A3DC  +
add ecx 0FFFFFFFBh +
cmp eax ecx +
ja loc_103A2FE  +
jz loc_103A2CE  +
sub eax 100h +
jz loc_103A2AD  +
sub eax 103h +
jz loc_103A499  +
sub eax 4FDh +
jz loc_103A409  +
dec eax  +
jz loc_103A499  +
sub eax 1FFh +
jnz loc_103A551  +
mov dword ptr [ebx-8] 4 +
mov eax [esi+70h] +
mov eax [eax+0Ch] +
jmp loc_103A4BE  +
and [ebp+var_90] 0 +
and [ebp+var_88] 0 +
push 6  +
lea edi [ebx-8] +
pop ecx  +
lea esi [ebp+var_90] +
movs   +
jmp loc_103A551  +
or [ebp+var_20] 0FFFFFFFFh +
lea eax [ebp+var_20] +
push eax  +
push [ebp+var_4]  +
mov ecx esi +
push edi  +
call sub_1038B52  +
test eax eax +
jl loc_103A566  +
mov dword ptr [ebx-8] 3 +
lea esi [ebp+var_28] +
mov edi ebx +
movs   +
movs   +
movs   +
movs   +
jmp loc_103A551  +
sub eax 2001h +
jz loc_103A3B7  +
dec eax  +
jz loc_103A37C  +
dec eax  +
jz loc_103A33C  +
dec eax  +
jnz loc_103A551  +
and [ebp+arg_C] eax +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+var_4]  +
mov ecx esi +
push edi  +
call sub_103726A  +
test eax eax +
jl loc_103A566  +
mov dword ptr [ebx-8] 1 +
jmp loc_103A54C  +
push 0  +
lea eax [ebp+var_14] +
push eax  +
push edi  +
mov ecx esi +
call sub_1038C41  +
test eax eax +
jl loc_103A566  +
mov ecx [ebp+var_14] +
mov dword ptr [ebx-8] 4 +
mov eax [ecx+4] +
mov edi ebx +
test eax eax +
jbe loc_103A370  +
mov ecx [ecx] +
shl eax 4 +
lea esi [eax+ecx-10h] +
jmp loc_103A2F5  +
or [ebp+var_60] 0FFFFFFFFh +
lea esi [ebp+var_68] +
jmp loc_103A2F5  +
push 0  +
lea eax [ebp+var_10] +
push eax  +
push edi  +
mov ecx esi +
call sub_1038C41  +
test eax eax +
jl loc_103A566  +
mov eax [ebp+var_10] +
mov dword ptr [ebx-8] 4 +
cmp dword ptr [eax+4] 0 +
mov edi ebx +
jbe loc_103A3AB  +
mov esi [eax] +
jmp loc_103A2F5  +
or [ebp+var_70] 0FFFFFFFFh +
lea esi [ebp+var_78] +
jmp loc_103A2F5  +
push 0  +
lea eax [ebp+var_18] +
push eax  +
push edi  +
mov ecx esi +
call sub_1038C41  +
test eax eax +
jl loc_103A566  +
mov eax [ebp+var_18] +
mov dword ptr [ebx-8] 2 +
jmp loc_103A54F  +
and [ebp+arg_C] 0 +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+var_4]  +
mov ecx esi +
push edi  +
call sub_10373EB  +
jmp loc_103A328  +
sub eax 2006h +
cmp eax 8 +
ja loc_103A551  +
jmp ds:off_103A56F[eax*4]  +
and [ebp+arg_C] 0 +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+var_4]  +
mov ecx esi +
push edi  +
call sub_10372A9  +
jmp loc_103A328  +
or [ebp+var_50] 0FFFFFFFFh +
lea eax [ebp+var_50] +
push eax  +
push 1  +
push [ebp+var_4]  +
mov ecx esi +
push edi  +
call sub_1039983  +
test eax eax +
jl loc_103A566  +
mov dword ptr [ebx-8] 4 +
lea esi [ebp+var_58] +
jmp loc_103A2F3  +
mov eax [ebp+var_4] +
movzx eax byte ptr [eax] +
and eax 0Fh +
dec eax  +
push 20h  +
pop ecx  +
jz loc_103A487  +
dec eax  +
jz loc_103A482  +
dec eax  +
jz loc_103A47E  +
dec eax  +
jz loc_103A47A  +
dec eax  +
jz loc_103A476  +
dec eax  +
jz loc_103A472  +
dec eax  +
jnz loc_103A48A  +
push 9  +
jmp loc_103A484  +
push 8  +
jmp loc_103A484  +
push 7  +
jmp loc_103A484  +
push 5  +
jmp loc_103A484  +
push 3  +
jmp loc_103A484  +
push 2  +
pop ecx  +
jmp loc_103A48A  +
xor ecx ecx +
inc ecx  +
mov dword ptr [ebx-8] 6 +
mov [ebx] cx +
jmp loc_103A551  +
and [ebp+arg_C] 0 +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+var_4]  +
mov ecx esi +
push edi  +
call sub_103A074  +
jmp loc_103A328  +
mov dword ptr [ebx-8] 9 +
mov eax [esi+70h] +
mov eax [eax+10h] +
mov [ebx+8] eax +
jmp loc_103A551  +
or [ebp+var_40] 0FFFFFFFFh +
lea eax [ebp+var_40] +
push eax  +
push edi  +
mov ecx esi +
call sub_10398C3  +
test eax eax +
jl loc_103A566  +
mov dword ptr [ebx-8] 4 +
lea esi [ebp+var_48] +
jmp loc_103A2F3  +
and [ebp+arg_C] 0 +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+var_4]  +
mov ecx esi +
push edi  +
call sub_103742A  +
jmp loc_103A328  +
or [ebp+var_30] 0FFFFFFFFh +
lea eax [ebp+var_30] +
push eax  +
push 0FFFFFFFFh  +
push [ebp+var_4]  +
mov ecx esi +
push edi  +
call sub_1039983  +
test eax eax +
jl loc_103A566  +
mov dword ptr [ebx-8] 4 +
lea esi [ebp+var_38] +
jmp loc_103A2F3  +
and [ebp+arg_C] 0 +
lea eax [ebp+arg_C] +
push eax  +
push edi  +
lea ecx [esi+124h] +
call sub_10363FD  +
test eax eax +
jl loc_103A566  +
mov dword ptr [ebx-8] 0Ah +
mov eax [ebp+arg_C] +
mov [ebx] eax +
mov eax [ebp+var_8] +
inc eax  +
add ebx 18h +
mov [ebp+var_8] eax +
cmp eax [ebp+arg_4] +
jnz loc_103A240  +
xor eax eax +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
or [ebp+var_8] 0FFFFFFFFh +
push esi  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+arg_8]  +
mov esi ecx +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1038BD4  +
test eax eax +
jl loc_103A5F0  +
cmp [ebp+var_8] 0FFFFFFFFh +
jz loc_103A5EE  +
and [ebp+arg_8] 0 +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+var_8]  +
lea ecx [esi+58h] +
call sub_1036BD1  +
test eax eax +
jl loc_103A5F0  +
push [ebp+arg_C]  +
mov ecx esi +
push [ebp+arg_8]  +
push [ebp+var_8]  +
call sub_103A074  +
test eax eax +
jl loc_103A5F0  +
xor eax eax +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+18h] +
push ebx  +
push esi  +
mov esi [eax] +
push edi  +
mov edi [eax+4] +
push dword ptr [ebp+1Ch]  +
lea eax [ebp-8] +
push eax  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+10h]  +
mov ebx ecx +
lea ecx [ebx-3Ch] +
mov dword ptr [ebp-8] offset dword_100D288 +
mov dword ptr [ebp-4] 0Fh +
mov [ebp-10h] esi +
mov [ebp-0Ch] edi +
call sub_1035F02  +
test eax eax +
jl loc_103A655  +
mov eax [ebp+1Ch] +
push dword ptr [eax]  +
mov ecx [ebx-2Ch] +
push esi  +
push edi  +
push dword ptr [ebp+10h]  +
call sub_103A1FB  +
test eax eax +
jl loc_103A655  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+18h] +
push ebx  +
push esi  +
mov esi [eax] +
push edi  +
mov edi [eax+4] +
push dword ptr [ebp+1Ch]  +
lea eax [ebp-8] +
push eax  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+10h]  +
mov ebx ecx +
lea ecx [ebx-3Ch] +
mov dword ptr [ebp-8] offset dword_100D2C8 +
mov dword ptr [ebp-4] 10h +
mov [ebp-10h] esi +
mov [ebp-0Ch] edi +
call sub_1035F02  +
test eax eax +
jl loc_103A6BC  +
mov eax [ebp+1Ch] +
push dword ptr [eax]  +
mov ecx [ebx-2Ch] +
push esi  +
push edi  +
push dword ptr [ebp+10h]  +
call sub_103A1FB  +
test eax eax +
jl loc_103A6BC  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+18h] +
push ebx  +
push esi  +
mov esi [eax] +
push edi  +
mov edi [eax+4] +
push dword ptr [ebp+1Ch]  +
lea eax [ebp-8] +
push eax  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+10h]  +
mov ebx ecx +
lea ecx [ebx-3Ch] +
mov dword ptr [ebp-8] offset dword_100D308 +
mov dword ptr [ebp-4] 13h +
mov [ebp-10h] esi +
mov [ebp-0Ch] edi +
call sub_1035F02  +
test eax eax +
jl loc_103A723  +
mov eax [ebp+1Ch] +
push dword ptr [eax]  +
mov ecx [ebx-2Ch] +
push esi  +
push edi  +
push dword ptr [ebp+10h]  +
call sub_103A1FB  +
test eax eax +
jl loc_103A723  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+18h] +
push ebx  +
push esi  +
mov esi [eax] +
push edi  +
mov edi [eax+4] +
push dword ptr [ebp+1Ch]  +
lea eax [ebp-8] +
push eax  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+10h]  +
mov ebx ecx +
lea ecx [ebx-3Ch] +
mov dword ptr [ebp-8] offset dword_100D358 +
mov dword ptr [ebp-4] 11h +
mov [ebp-10h] esi +
mov [ebp-0Ch] edi +
call sub_1035F02  +
test eax eax +
jl loc_103A78A  +
mov eax [ebp+1Ch] +
push dword ptr [eax]  +
mov ecx [ebx-2Ch] +
push esi  +
push edi  +
push dword ptr [ebp+10h]  +
call sub_103A1FB  +
test eax eax +
jl loc_103A78A  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+18h] +
push ebx  +
push esi  +
mov esi [eax] +
push edi  +
mov edi [eax+4] +
push dword ptr [ebp+1Ch]  +
lea eax [ebp-8] +
push eax  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+10h]  +
mov ebx ecx +
lea ecx [ebx-3Ch] +
mov dword ptr [ebp-8] offset dword_100D3A0 +
mov dword ptr [ebp-4] 11h +
mov [ebp-10h] esi +
mov [ebp-0Ch] edi +
call sub_1035F02  +
test eax eax +
jl loc_103A7F1  +
mov eax [ebp+1Ch] +
push dword ptr [eax]  +
mov ecx [ebx-2Ch] +
push esi  +
push edi  +
push dword ptr [ebp+10h]  +
call sub_103A1FB  +
test eax eax +
jl loc_103A7F1  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+18h] +
push ebx  +
push esi  +
mov esi [eax] +
push edi  +
mov edi [eax+4] +
push dword ptr [ebp+1Ch]  +
lea eax [ebp-8] +
push eax  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+10h]  +
mov ebx ecx +
lea ecx [ebx-3Ch] +
mov dword ptr [ebp-8] offset dword_100D3E8 +
mov dword ptr [ebp-4] 11h +
mov [ebp-10h] esi +
mov [ebp-0Ch] edi +
call sub_1035F02  +
test eax eax +
jl loc_103A858  +
mov eax [ebp+1Ch] +
push dword ptr [eax]  +
mov ecx [ebx-2Ch] +
push esi  +
push edi  +
push dword ptr [ebp+10h]  +
call sub_103A1FB  +
test eax eax +
jl loc_103A858  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
push edi  +
mov edi [ebp+1Ch] +
mov esi ecx +
mov dword ptr [ebp-4] 0C00000E5h +
test edi edi +
jz loc_103A8BF  +
mov ecx [ebp+18h] +
and dword ptr [edi] 0 +
call sub_102FCAB  +
test al al +
jnz loc_103A8D7  +
lea ecx [ebp-4] +
call sub_102FD01  +
mov dword ptr [ebp-0Ch] 0D14h +
mov dword ptr [ebp-8] offset aRtlislutf8st_6 +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-4] +
mov dword ptr [ebp-10h] offset aMicrodomimp_42 +
mov dword ptr [ebp-14h] offset aDW7rtmBaseXm_0 +
call sub_103D6FE  +
jmp loc_103A8F5  +
lea ecx [ebp-4] +
call sub_102FD01  +
mov dword ptr [ebp-0Ch] 0D13h +
mov dword ptr [ebp-8] offset aNotNullChec_36 +
jmp loc_103A8A3  +
***
mov ecx [esi-2Ch] +
push edi  +
push dword ptr [ebp+18h]  +
push 0  +
push dword ptr [ebp+10h]  +
call sub_103A598  +
test eax eax +
jge loc_103A8F1  +
mov [ebp-4] eax +
jmp loc_103A8F5  +
and dword ptr [ebp-4] 0 +
mov eax [ebp-4] +
pop edi  +
pop esi  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
push edi  +
mov edi [ebp+20h] +
mov esi ecx +
mov dword ptr [ebp-4] 0C00000E5h +
test edi edi +
jz loc_103A93E  +
and dword ptr [edi] 0 +
cmp dword ptr [ebp+18h] 0 +
jz loc_103A956  +
mov ecx [ebp+18h] +
call sub_102FCAB  +
test al al +
jnz loc_103A956  +
mov esi 0D26h +
mov edi offset aNamespaceuri0R +
jmp loc_103A96C  +
lea ecx [ebp-4] +
call sub_102FD01  +
mov dword ptr [ebp-0Ch] 0D25h +
mov dword ptr [ebp-8] offset aNotNullChec_36 +
jmp loc_103A97A  +
mov ecx [ebp+1Ch] +
call sub_102FCAB  +
test al al +
jnz loc_103A996  +
mov esi 0D27h +
mov edi offset aRtlislutf8st_7 +
lea ecx [ebp-4] +
call sub_102FD01  +
mov [ebp-0Ch] esi +
mov [ebp-8] edi +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-4] +
mov dword ptr [ebp-10h] offset aMicrodomimp_43 +
mov dword ptr [ebp-14h] offset aDW7rtmBaseXm_0 +
call sub_103D6FE  +
jmp loc_103A9B5  +
mov ecx [esi-2Ch] +
push edi  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+10h]  +
call sub_103A598  +
test eax eax +
jge loc_103A9B1  +
mov [ebp-4] eax +
jmp loc_103A9B5  +
and dword ptr [ebp-4] 0 +
mov eax [ebp-4] +
pop edi  +
pop esi  +
leave   +
retn 1Ch  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
call sub_1035866  +
mov dword ptr [esi] offset off_100D4C0 +
xor edi edi +
lea eax [esi+50h] +
mov [eax] edi +
mov [eax+4] edi +
push eax  +
lea ecx [esi+78h] +
mov [esi+58h] edi +
mov [esi+5Ch] edi +
mov [esi+60h] edi +
mov [esi+64h] edi +
mov [esi+70h] edi +
call sub_1039D36  +
lea eax [esi+124h] +
mov [eax] edi +
mov [eax+4] edi +
mov [eax+8] edi +
mov [eax+0Ch] edi +
mov [eax+10h] edi +
mov [eax+14h] edi +
lea eax [esi+148h] +
mov [eax] edi +
mov [eax+4] edi +
mov [eax+8] edi +
mov [esi+158h] edi +
mov [esi+15Ch] edi +
lea eax [esi+160h] +
mov [eax] edi +
mov [eax+4] edi +
mov [eax+8] edi +
lea eax [esi+16Ch] +
mov [eax] edi +
mov [eax+4] edi +
xor eax eax +
lea edi [esi+13Ch] +
stos   +
stos   +
stos   +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
mov ecx [esi+158h] +
xor ebx ebx +
push edi  +
mov dword ptr [esi] offset off_100D4C0 +
cmp ecx ebx +
jz loc_103AA84  +
lea edi [esi+15Ch] +
mov eax [edi] +
cmp eax ebx +
jz loc_103AA84  +
mov edx [ecx] +
push eax  +
call dword ptr [edx+10h]  +
mov [edi] ebx +
jmp loc_103AA8F  +
lea ecx [esi+13Ch] +
call sub_103070B  +
xor eax eax +
lea edi [esi+13Ch] +
stos   +
stos   +
lea ecx [esi+16Ch] +
stos   +
call sub_103977C  +
lea ecx [esi+160h] +
call sub_1032B3F  +
mov ecx [esi+158h] +
cmp ecx ebx +
jz loc_103AAC4  +
mov [esi+158h] ebx +
mov eax [ecx] +
call dword ptr [eax]  +
lea ecx [esi+148h] +
call sub_1032B6D  +
lea ecx [esi+128h] +
call sub_10359B2  +
lea ecx [esi+78h] +
call sub_1039D19  +
lea ecx [esi+58h] +
call sub_10366D6  +
lea ecx [esi+50h] +
call sub_10359B2  +
mov [esi+1Ch] ebx +
mov [esi+18h] ebx +
pop edi  +
mov [esi+0Ch] ebx +
mov dword ptr [esi] offset off_100B7F0 +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_103AA55  +
test byte ptr [ebp+8] 1 +
jz loc_103AB24  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push 174h  +
mov esi ecx +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_103AB4D  +
mov ecx eax +
call sub_103A9C3  +
jmp loc_103AB4F  +
xor eax eax +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
mov ebx ecx +
call sub_103B11F  +
test eax eax +
jge loc_103AB73  +
mov ebx eax +
jmp loc_103ACBC  +
and [ebp+var_8] 0 +
and [ebp+var_C] 0 +
push esi  +
push edi  +
lea ecx [ebp+var_8] +
mov byte ptr [ebp+var_1] 0 +
call sub_103AB30  +
test eax eax +
jnz loc_103ABB7  +
mov ebx 0C0000017h +
lea ecx [ebp+var_1] +
mov edi 0FCh +
mov esi offset aNewinstance_al +
mov [ebp+arg_0] ebx +
call sub_1036E96  +
cmp [ebp+var_8] 0 +
jz loc_103AC24  +
push [ebp+var_8]  +
call sub_103580B  +
jmp loc_103AC24  +
mov esi [ebp+var_8] +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1039A24  +
test eax eax +
jge loc_103ABDF  +
lea ecx [ebp+var_1] +
mov ebx eax +
call sub_1036E96  +
test esi esi +
jz loc_103ACBA  +
jmp loc_103AC71  +
mov [esi+20h] esi +
lea ecx [ebp+var_C] +
mov [esi+4Ch] ebx +
call sub_1036E71  +
test eax eax +
jnz loc_103AC46  +
mov ebx 0C0000017h +
lea ecx [ebp+var_1] +
mov edi 10Bh +
mov [ebp+arg_4] offset aNewtearoff_all +
mov [ebp+arg_0] ebx +
call sub_1036E96  +
cmp [ebp+var_C] 0 +
jz loc_103AC1B  +
push [ebp+var_C]  +
call sub_1035827  +
push esi  +
call sub_103580B  +
mov esi [ebp+arg_4] +
lea eax [ebp+var_1C] +
push eax  +
lea ecx [ebp+arg_0] +
mov [ebp+var_1C] offset aDW7rtm_public_ +
mov [ebp+var_18] offset aWindowsRtlCr_0 +
mov [ebp+var_14] edi +
mov [ebp+var_10] esi +
call sub_103D6FE  +
jmp loc_103ACBA  +
mov edi [ebp+var_C] +
push edi  +
lea ecx [esi+10h] +
mov [edi+10h] esi +
call sub_1035A5E  +
lea ecx [ebp+var_1] +
call sub_1036724  +
test eax eax +
jge loc_103AC79  +
lea ecx [ebp+var_1] +
mov ebx eax +
call sub_1036E96  +
push edi  +
call sub_1035827  +
push esi  +
call sub_103580B  +
jmp loc_103ACBA  +
push esi  +
lea ecx [ebx+4] +
call sub_1035A5E  +
lea ecx [ebp+var_1] +
call sub_1036746  +
test eax eax +
jge loc_103ACA0  +
lea ecx [ebp+var_1] +
mov ebx eax +
call sub_1036E96  +
push edi  +
call sub_1035827  +
jmp loc_103ACBA  +
mov ecx [ebp+arg_4] +
mov eax edi +
add edi 3Ch +
neg eax  +
sbb eax eax +
and eax edi +
mov [ecx] eax +
lea ecx [ebp+var_1] +
xor ebx ebx +
call sub_1036E96  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 48h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
mov [ebp+var_4] 0C00000E5h +
mov [ebp+var_10] edi +
mov [ebp+var_14] edi +
mov [ebp+var_C] edi +
cmp esi edi +
jnz loc_103AD03  +
mov esi 102Bh +
mov edi offset aNotNullChec_38 +
lea ecx [ebp+var_4] +
call sub_102FD01  +
jmp loc_103AF2E  +
mov ecx offset unk_104A108 +
call sub_103C1E2  +
cmp eax edi +
jge loc_103AD19  +
mov [ebp+var_4] eax +
jmp loc_103AF81  +
mov ebx [esi] +
cmp ebx edi +
jz loc_103AD30  +
cmp ebx 1 +
jz loc_103AD30  +
mov esi 1031h +
mov edi offset aParamsInputtyp +
jmp loc_103AD4B  +
mov edx [esi+4] +
cmp edx edi +
jz loc_103AD5C  +
cmp edx 2 +
jz loc_103AD58  +
cmp edx 1 +
jz loc_103AD58  +
mov esi 1036h +
mov edi offset aParamsSourcety +
lea ecx [ebp+var_4] +
call sub_102FD01  +
jmp loc_103AF2E  +
cmp edx edi +
jnz loc_103AD6D  +
cmp [esi+8] edi +
jnz loc_103AD6D  +
mov esi 1039h +
mov edi offset aNotNullChec_39 +
jmp loc_103ACF6  +
cmp edx 1 +
jnz loc_103AD86  +
cmp [esi+8] edi +
jnz loc_103AD86  +
mov esi 103Ch +
mov edi offset aNotNullChec_40 +
jmp loc_103ACF6  +
push 6  +
xor eax eax +
pop ecx  +
lea edi [ebp+var_48] +
stos   +
xor edi edi +
cmp ebx edi +
jnz loc_103ADD6  +
cmp edx 1 +
jnz loc_103ADA9  +
mov esi [esi+8] +
lea edi [ebp+var_48] +
movs   +
movs   +
movs   +
jmp loc_103AF5D  +
cmp edx 2 +
jnz loc_103ADC5  +
mov eax [esi+8] +
mov [ebp+var_3C] eax +
mov eax [esi+0Ch] +
mov [ebp+var_38] eax +
mov eax [esi+10h] +
mov [ebp+var_34] eax +
jmp loc_103AF5F  +
mov esi 104Eh +
mov [ebp+var_4] 0C0000002h +
jmp loc_103AF2E  +
cmp ebx 1 +
jnz loc_103AF5F  +
mov [ebp+var_1C] edi +
mov [ebp+var_20] edi +
mov [ebp+var_18] edi +
cmp edx edi +
jnz loc_103AEEC  +
lea eax [ebp+var_2C] +
push eax  +
push 400h  +
mov [ebp+var_8] edi +
mov [ebp+arg_0] edi +
mov [ebp+var_28] edi +
mov [ebp+var_2C] edi +
mov [ebp+var_24] edi +
call sub_1030902  +
cmp eax edi +
jge loc_103AE29  +
mov [ebp+var_4] eax +
lea ecx [ebp+var_2C] +
call sub_102D479  +
lea ecx [ebp+var_20] +
call sub_102D479  +
jmp loc_103AF81  +
mov edi [ebp+var_24] +
push 4  +
pop ebx  +
mov ecx [esi+8] +
mov eax [ecx] +
lea edx [ebp+arg_0] +
push edx  +
push edi  +
push ebx  +
call dword ptr [eax+0Ch]  +
test eax eax +
jl loc_103AE11  +
mov eax [ebp+arg_0] +
add [ebp+var_8] eax +
cmp eax ebx +
jz loc_103AE2F  +
lea eax [ebp+var_20] +
push eax  +
push [ebp+var_8]  +
call sub_1030902  +
test eax eax +
jl loc_103AE11  +
mov ecx [esi+8] +
and [ebp+var_8] 0 +
lea eax [ebp+var_8] +
push eax  +
call sub_1038050  +
test eax eax +
jge loc_103AE7F  +
mov ecx [ebp+var_8] +
mov [ebp+var_4] eax +
test ecx ecx +
jz loc_103AE14  +
mov eax [ecx] +
call dword ptr [eax]  +
jmp loc_103AE14  +
mov ecx [esi+8] +
mov eax [ecx] +
lea edx [ebp+arg_0] +
push edx  +
push edi  +
push ebx  +
call dword ptr [eax+0Ch]  +
test eax eax +
jl loc_103AE6F  +
cmp [ebp+arg_0] 0 +
jbe loc_103AEB2  +
push [ebp+arg_0]  +
mov eax [ebp+var_20] +
mov ecx [ebp+var_18] +
add ecx eax +
push edi  +
push ecx  +
call memcpy  +
mov eax [ebp+arg_0] +
add esp 0Ch +
add [ebp+var_20] eax +
cmp [ebp+arg_0] ebx +
jz loc_103AE7F  +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+var_20] +
push eax  +
push dword ptr [esi+14h]  +
push dword ptr [esi+18h]  +
call sub_104191A  +
mov ecx [ebp+var_8] +
test eax eax +
jl loc_103AE72  +
lea esi [ebp+var_14] +
lea edi [ebp+var_48] +
movs   +
movs   +
movs   +
test ecx ecx +
jz loc_103AEE2  +
mov eax [ecx] +
call dword ptr [eax]  +
lea ecx [ebp+var_2C] +
call sub_102D479  +
jmp loc_103AF13  +
lea eax [ebp+var_14] +
push eax  +
push dword ptr [esi+8]  +
push dword ptr [esi+14h]  +
push dword ptr [esi+18h]  +
call sub_104191A  +
cmp eax edi +
jge loc_103AF0A  +
mov [ebp+var_4] eax +
jmp loc_103AE1C  +
lea esi [ebp+var_14] +
lea edi [ebp+var_48] +
movs   +
movs   +
movs   +
xor edi edi +
lea ecx [ebp+var_20] +
cmp [ebp+var_48] edi +
jnz loc_103AF58  +
mov esi 109Ah +
mov [ebp+var_4] 0C000A083h +
call sub_102D479  +
lea ecx [ebp+var_14] +
call sub_102D479  +
lea eax [ebp+var_30] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_30] offset aDW7rtmBaseXm_0 +
mov [ebp+var_2C] offset aRtlcreatemicro +
mov [ebp+var_28] esi +
mov [ebp+var_24] edi +
call sub_103D6FE  +
jmp loc_103AF89  +
call sub_102D479  +
xor edi edi +
push [ebp+arg_4]  +
lea eax [ebp+var_48] +
push eax  +
mov ecx offset unk_104A108 +
call sub_103AFBC  +
mov ecx eax +
call sub_103AB58  +
cmp eax edi +
mov [ebp+var_4] eax +
jl loc_103AF81  +
mov [ebp+var_4] edi +
lea ecx [ebp+var_14] +
call sub_102D479  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_103AFB0  +
push [ebp+arg_4]  +
xor edx edx +
call sub_102FC84  +
jmp loc_103AFB3  +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov eax [ecx+20h] +
cmp eax 2 +
jz loc_103AFCF  +
push 0C00000E5h  +
call ds:RtlRaiseStatus  +
mov eax [ecx] +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
mov edi [esi] +
xor eax eax +
cmp edi esi +
jz loc_103AFF7  +
push 1  +
push edi  +
call sub_10354E5  +
mov eax edi +
sub eax esi +
neg eax  +
sbb eax eax +
and eax edi +
pop edi  +
pop esi  +
retn   +
***
and dword ptr [ecx+0Ch] 0 +
and dword ptr [ecx+8] 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_103B033  +
push esi  +
push edi  +
mov esi [ebp+arg_4] +
mov edi [ebp+arg_0] +
add [ebp+arg_0] 18h +
add [ebp+arg_4] 18h +
dec eax  +
push 6  +
pop ecx  +
movs   +
jnz loc_103B01B  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [esi] +
test ecx ecx +
jz loc_103B069  +
cmp ecx esi +
jz loc_103B069  +
push edi  +
mov edi [ecx] +
mov eax ecx +
sub eax esi +
neg eax  +
sbb eax eax +
and eax ecx +
mov ecx [ebp+arg_0] +
push eax  +
call [ebp+arg_4]  +
mov ecx edi +
cmp edi esi +
jnz loc_103B04F  +
pop edi  +
and dword ptr [esi+0Ch] 0 +
mov [esi] esi +
mov [esi+4] esi +
mov [esi+8] esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_8] +
mov eax ecx +
mov [eax+0Ch] edx +
mov edx [ebp+arg_0] +
xor ecx ecx +
mov [eax+10h] edx +
mov edx [ebp+arg_4] +
mov [eax+8] ecx +
mov [eax] ecx +
mov [eax+4] ecx +
mov [eax+14h] edx +
mov [eax+18h] ecx +
mov [eax+1Ch] cl +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jnz loc_103B0CA  +
cmp [ebp+arg_4] 0 +
jnz loc_103B0CA  +
mov eax [ebp+arg_8] +
mov byte ptr [eax] 1 +
jmp loc_103B0EB  +
lea eax [ebp+arg_4] +
push eax  +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_102FCDB  +
test eax eax +
jl loc_103B0ED  +
cmp [ebp+arg_4] 0 +
mov ecx [ebp+arg_8] +
setz al  +
mov [ecx] al +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
and dword ptr [esi+18h] 0 +
and dword ptr [esi+8] 0 +
test [ebp+arg_0] 1 +
jz loc_103B113  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jnz loc_103B14A  +
xor ecx ecx +
inc ecx  +
mov edx esi +
cmpxchg [edx] ecx +
test eax eax +
jnz loc_103B14A  +
push 2  +
pop eax  +
mov ecx esi +
xchg eax [ecx] +
jmp loc_103B14A  +
call ds:NtYieldExecution  +
test eax eax +
jl loc_103B153  +
mov eax [esi] +
cmp eax 2 +
jnz loc_103B140  +
xor eax eax +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1035866  +
mov dword ptr [esi] offset off_100D768 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov [esi+1Ch] eax +
mov [esi+18h] eax +
mov [esi+0Ch] eax +
mov dword ptr [esi] offset off_100B7F0 +
jz loc_103B199  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0FFFFFFFFh +
push esi  +
mov esi [ebp+arg_0] +
mov dword ptr [esi] 0C00000E5h +
jnz loc_103B1CA  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
and dword ptr [esi] 0 +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
push [ebp+arg_8]  +
lea eax [ebp+arg_8] +
push 2  +
push [ebp+arg_4]  +
push eax  +
call sub_1030750  +
mov eax [ebp+arg_8] +
test eax eax +
jge loc_103B1C0  +
mov [esi] eax +
jmp loc_103B1C3  +
***
mov eax ecx +
mov ecx [eax] +
test ecx ecx +
jz locret_103B201  +
and dword ptr [eax] 0 +
test ecx ecx +
jz locret_103B201  +
push 1  +
call sub_103B0F6  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
mov eax [ebp+arg_8] +
push dword ptr [eax]  +
mov eax [ebp+arg_4] +
push dword ptr [eax]  +
call sub_103B0B1  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
mov eax ecx +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 20h  +
mov esi ecx +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_103B258  +
mov ecx [ebp+arg_4] +
push dword ptr [ecx]  +
mov edx [ebp+arg_0] +
push dword ptr [edx+4]  +
mov ecx eax +
push dword ptr [edx]  +
call sub_103B07F  +
jmp loc_103B25A  +
xor eax eax +
mov [esi] eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
mov esi ecx +
cmp eax [esi+8] +
jbe loc_103B2CC  +
push 18h  +
pop ecx  +
mul  ecx +
push edx  +
push eax  +
lea edx [ebp+var_8] +
lea ecx [ebp+var_4] +
call sub_1030723  +
mov ecx [ebp+var_4] +
test ecx ecx +
jl loc_103B2CE  +
push [ebp+var_8]  +
call ??2@YAPAXI@Z  +
mov ebx eax +
pop ecx  +
test ebx ebx +
jnz loc_103B2A8  +
mov ecx 0C0000017h +
jmp loc_103B2CE  +
push edi  +
mov edi [esi] +
test edi edi +
jz loc_103B2C3  +
push dword ptr [esi+4]  +
and dword ptr [esi] 0 +
push edi  +
push ebx  +
call sub_103B00D  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax [ebp+arg_4] +
mov [esi] ebx +
mov [esi+8] eax +
pop edi  +
xor ecx ecx +
mov eax [ebp+arg_0] +
pop esi  +
mov [eax] ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
test ecx ecx +
jz loc_103B2F1  +
push 1  +
call sub_103B0F6  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push 50h  +
mov esi ecx +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_103B314  +
mov ecx eax +
call sub_103B15A  +
jmp loc_103B316  +
xor eax eax +
mov [esi] eax +
pop esi  +
retn   +
***
mov eax ecx +
xor ecx ecx +
mov [eax+0Ch] ecx +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov dword ptr [eax+3Ch] offset off_100742C +
mov dword ptr [eax] offset off_100D7A4 +
mov dword ptr [eax+3Ch] offset off_100D770 +
retn   +
***
mov eax [ecx-2Ch] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+0Ch] +
xor ebx ebx +
cmp [edi+4] ebx +
jz loc_103B38C  +
mov eax [edi] +
mov esi [eax+ebx*4] +
test esi esi +
jz loc_103B386  +
mov ecx [ebp+10h] +
mov eax [ecx] +
lea edx [ebp+0Ch] +
push edx  +
push dword ptr [esi+8]  +
push dword ptr [esi]  +
call dword ptr [eax+0Ch]  +
test eax eax +
jl loc_103B38E  +
mov eax [ebp+0Ch] +
cmp eax [esi] +
jnz near ptr byte_103B395  +
inc ebx  +
cmp ebx [edi+4] +
jnz loc_103B361  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 60h +
push ebx  +
push esi  +
push edi  +
push 2  +
pop ebx  +
lea edx [ebp+var_14] +
push edx  +
lea edx [ebp+var_1C] +
push edx  +
sub esp 10h +
mov edi esp +
lea esi [ebp+arg_4] +
movs   +
movs   +
lea eax [ebp+var_60] +
mov [ebp+var_14] eax +
movs   +
mov [ebp+var_4] ecx +
mov ecx [ebp+arg_0] +
lea eax [ebp+var_C] +
mov [ebp+var_1C] eax +
mov eax [ecx] +
mov [ebp+var_C] 700h +
mov [ebp+var_8] 701h +
mov [ebp+var_10] ebx +
mov [ebp+var_18] ebx +
movs   +
call dword ptr [eax+40h]  +
test eax eax +
jl loc_103B439  +
mov eax [ebp+var_58] +
mov ecx [ebp+var_40] +
mov [ebp+var_2C] eax +
mov [ebp+var_30] offset dword_100D7B4 +
mov eax ebx +
test ecx ecx +
jz loc_103B40F  +
push 4  +
mov [ebp+var_28] offset dword_100DE04 +
mov [ebp+var_24] ecx +
pop eax  +
push [ebp+arg_14]  +
mov [ebp+eax*4+var_30] offset dword_100D7A8 +
inc eax  +
mov [ebp+var_18] eax +
lea eax [ebp+var_1C] +
lea ecx [ebp+var_30] +
push eax  +
push [ebp+arg_0]  +
mov [ebp+var_1C] ecx +
mov ecx [ebp+var_4] +
call loc_103B34F  +
test eax eax +
jl loc_103B439  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 48h +
push ebx  +
push esi  +
mov ebx [ebp+arg_0] +
push edi  +
mov [ebp+var_8] ecx +
lea ecx [ebp+var_4] +
mov [ebp+var_18] ecx +
lea ecx [ebp+var_10] +
push ecx  +
lea ecx [ebp+var_18] +
push ecx  +
sub esp 10h +
mov edi esp +
lea esi [ebp+arg_4] +
movs   +
movs   +
lea eax [ebp+var_48] +
mov [ebp+var_10] eax +
xor eax eax +
inc eax  +
movs   +
mov [ebp+var_C] eax +
mov [ebp+var_14] eax +
mov eax [ebx] +
mov ecx ebx +
mov [ebp+var_4] 2009h +
movs   +
call dword ptr [eax+50h]  +
test eax eax +
jl loc_103B4E0  +
and [ebp+var_24] 0 +
mov esi [ebp+var_40] +
xor eax eax +
lea edi [ebp+var_20] +
stos   +
stos   +
test esi esi +
jz loc_103B4A9  +
lea edi [ebp+var_24] +
movs   +
movs   +
movs   +
push [ebp+arg_14]  +
mov ecx [ebp+var_8] +
lea eax [ebp+var_24] +
mov [ebp+var_2C] eax +
lea eax [ebp+var_30] +
mov [ebp+var_18] eax +
lea eax [ebp+var_18] +
push eax  +
push ebx  +
mov [ebp+var_30] offset dword_100D7D4 +
mov [ebp+var_28] offset dword_100D7C8 +
mov [ebp+var_14] 3 +
call loc_103B34F  +
test eax eax +
jl loc_103B4E0  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
xor esi esi +
push edi  +
mov dword ptr [ebp-4] 0C00000E5h +
cmp [ebp+8] esi +
jnz loc_103B510  +
mov esi 23Ah +
mov edi offset aNotNullChec_41 +
jmp loc_103B51F  +
cmp [ebp+10h] esi +
jnz loc_103B549  +
mov esi 23Bh +
mov edi offset aNotNullChec_42 +
lea ecx [ebp-4] +
call sub_102FD01  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-4] +
mov dword ptr [ebp-14h] offset aDW7rtmBaseXm_1 +
mov dword ptr [ebp-10h] offset aMicrodomwriter +
mov [ebp-0Ch] esi +
mov [ebp-8] edi +
call sub_103D6FE  +
jmp loc_103B564  +
push dword ptr [ebp+10h]  +
mov ecx [ecx-2Ch] +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call loc_103B34F  +
cmp eax esi +
mov [ebp-4] eax +
jl loc_103B564  +
mov [ebp-4] esi +
mov eax [ebp-4] +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
cmp dword ptr [ebp+8] 0 +
push esi  +
push edi  +
mov dword ptr [ebp-4] 0C00000E5h +
jnz loc_103B595  +
mov esi 24Ah +
mov edi offset aNotNullChec_41 +
jmp loc_103B5A5  +
cmp dword ptr [ebp+1Ch] 0 +
jnz loc_103B5CF  +
mov esi 24Bh +
mov edi offset aNotNullChec_42 +
lea ecx [ebp-4] +
call sub_102FD01  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-4] +
mov dword ptr [ebp-14h] offset aDW7rtmBaseXm_1 +
mov dword ptr [ebp-10h] offset aMicrodomwrit_0 +
mov [ebp-0Ch] esi +
mov [ebp-8] edi +
call sub_103D6FE  +
jmp loc_103B5F6  +
push dword ptr [ebp+1Ch]  +
mov ecx [ecx-2Ch] +
sub esp 10h +
mov edi esp +
push dword ptr [ebp+8]  +
lea esi [ebp+0Ch] +
movs   +
movs   +
movs   +
movs   +
call sub_103B39B  +
test eax eax +
jge loc_103B5F2  +
mov [ebp-4] eax +
jmp loc_103B5F6  +
and dword ptr [ebp-4] 0 +
mov eax [ebp-4] +
pop edi  +
pop esi  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
cmp dword ptr [ebp+8] 0 +
push esi  +
push edi  +
mov dword ptr [ebp-4] 0C00000E5h +
jnz loc_103B627  +
mov esi 257h +
mov edi offset aNotNullChec_41 +
jmp loc_103B637  +
cmp dword ptr [ebp+1Ch] 0 +
jnz loc_103B661  +
mov esi 258h +
mov edi offset aNotNullChec_42 +
lea ecx [ebp-4] +
call sub_102FD01  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-4] +
mov dword ptr [ebp-14h] offset aDW7rtmBaseXm_1 +
mov dword ptr [ebp-10h] offset aMicrodomwrit_1 +
mov [ebp-0Ch] esi +
mov [ebp-8] edi +
call sub_103D6FE  +
jmp loc_103B688  +
push dword ptr [ebp+1Ch]  +
mov ecx [ecx-2Ch] +
sub esp 10h +
mov edi esp +
push dword ptr [ebp+8]  +
lea esi [ebp+0Ch] +
movs   +
movs   +
movs   +
movs   +
call sub_103B445  +
test eax eax +
jge loc_103B684  +
mov [ebp-4] eax +
jmp loc_103B688  +
and dword ptr [ebp-4] 0 +
mov eax [ebp-4] +
pop edi  +
pop esi  +
leave   +
retn 18h  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10367A4  +
mov dword ptr [esi] offset off_100D7A4 +
mov dword ptr [esi+3Ch] offset off_100D94C +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 54h +
push ebx  +
push esi  +
push edi  +
mov ebx [ebp+arg_0] +
push 2  +
mov [ebp+var_4] ecx +
lea eax [ebp+var_54] +
mov [ebp+var_C] eax +
pop eax  +
lea ecx [ebp+var_C] +
push ecx  +
lea ecx [ebp+var_14] +
push ecx  +
sub esp 10h +
mov edi esp +
lea esi [ebp+arg_4] +
movs   +
movs   +
movs   +
mov [ebp+var_8] eax +
mov [ebp+var_10] eax +
mov eax [ebx] +
mov ecx ebx +
mov [ebp+var_14] offset dword_100D95C +
movs   +
call dword ptr [eax+4Ch]  +
test eax eax +
jl loc_103B741  +
mov ecx [ebp+var_4C] +
xor eax eax +
inc eax  +
mov [ebp+var_24] offset dword_100DDC4 +
test ecx ecx +
jz loc_103B71A  +
push 3  +
mov [ebp+var_20] ecx +
mov [ebp+var_1C] offset dword_100DDD4 +
pop eax  +
mov ecx [ebp+var_34] +
push [ebp+arg_14]  +
mov [ebp+eax*4+var_24] ecx +
inc eax  +
mov [ebp+var_10] eax +
lea eax [ebp+var_14] +
lea ecx [ebp+var_24] +
push eax  +
mov [ebp+var_14] ecx +
mov ecx [ebp+var_4] +
push ebx  +
call loc_103B34F  +
test eax eax +
jl loc_103B741  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push [ebp+arg_14]  +
lea eax [ebp+var_4] +
mov [ebp+var_C] eax +
lea eax [ebp+var_C] +
push eax  +
push [ebp+arg_0]  +
mov [ebp+var_4] offset dword_100DDE4 +
mov [ebp+var_8] 1 +
call loc_103B34F  +
test eax eax +
jl locret_103B77E  +
xor eax eax +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 5Ch +
push ebx  +
push esi  +
push edi  +
push 2  +
pop ebx  +
lea edx [ebp+var_C] +
push edx  +
lea edx [ebp+var_14] +
push edx  +
sub esp 10h +
mov edi esp +
lea esi [ebp+arg_4] +
movs   +
movs   +
movs   +
mov [ebp+var_4] ecx +
mov ecx [ebp+arg_0] +
lea eax [ebp+var_5C] +
mov [ebp+var_C] eax +
mov eax [ecx] +
mov [ebp+var_8] ebx +
mov [ebp+var_14] offset dword_100D95C +
mov [ebp+var_10] ebx +
movs   +
call dword ptr [eax+4Ch]  +
test eax eax +
jl loc_103B821  +
mov ecx [ebp+var_54] +
mov [ebp+var_2C] offset dword_100DDC4 +
mov [ebp+var_28] offset dword_100DDF4 +
mov eax ebx +
test ecx ecx +
jz loc_103B7EF  +
push 4  +
mov [ebp+var_24] ecx +
mov [ebp+var_20] offset dword_100DDD4 +
pop eax  +
mov ecx [ebp+var_3C] +
push [ebp+arg_14]  +
mov [ebp+eax*4+var_2C] ecx +
inc eax  +
mov [ebp+eax*4+var_2C] offset dword_100DDE4 +
inc eax  +
mov [ebp+var_10] eax +
lea eax [ebp+var_14] +
lea ecx [ebp+var_2C] +
push eax  +
push [ebp+arg_0]  +
mov [ebp+var_14] ecx +
mov ecx [ebp+var_4] +
call loc_103B34F  +
test eax eax +
jl loc_103B821  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push ebx  +
push esi  +
push edi  +
lea edx [ebp+var_10] +
push edx  +
lea edx [ebp+var_18] +
push edx  +
sub esp 10h +
mov edi esp +
lea esi [ebp+arg_4] +
movs   +
movs   +
lea eax [ebp+var_30] +
mov [ebp+var_10] eax +
movs   +
mov [ebp+var_8] ecx +
mov ecx [ebp+arg_0] +
lea eax [ebp+var_4] +
xor ebx ebx +
inc ebx  +
mov [ebp+var_18] eax +
mov eax [ecx] +
mov [ebp+var_4] 400h +
mov [ebp+var_C] ebx +
mov [ebp+var_14] ebx +
movs   +
call dword ptr [eax+3Ch]  +
test eax eax +
jl loc_103B898  +
push [ebp+arg_14]  +
mov ecx [ebp+var_8] +
lea eax [ebp+var_28] +
mov [ebp+var_18] eax +
lea eax [ebp+var_18] +
push eax  +
push [ebp+arg_0]  +
mov [ebp+var_14] ebx +
call loc_103B34F  +
test eax eax +
jl loc_103B898  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
and [ebp+var_4] 0 +
push ebx  +
mov [ebp+var_C] ecx +
mov ecx [ebp+arg_4] +
cmp dword ptr [ecx+4] 0 +
push esi  +
push edi  +
mov [ebp+var_20] offset dword_100DE34 +
mov [ebp+var_18] offset dword_100DE44 +
jz loc_103B99B  +
mov esi [ebp+arg_8] +
mov eax [ecx] +
mov edx [ebp+var_4] +
mov eax [eax+edx*4] +
test eax eax +
jz loc_103B98C  +
mov edi [eax+8] +
mov ebx [eax] +
add ebx edi +
cmp edi ebx +
jz loc_103B98C  +
mov cl [edi] +
movzx eax cl +
inc edi  +
sub eax 22h +
mov byte ptr [ebp+arg_8+3] cl +
jz loc_103B940  +
sub eax 4 +
jz loc_103B937  +
dec eax  +
jz loc_103B940  +
sub eax 15h +
jz loc_103B92E  +
dec eax  +
dec eax  +
jz loc_103B925  +
mov eax [esi] +
lea ecx [ebp+var_8] +
push ecx  +
lea ecx [ebp+arg_8+3] +
push ecx  +
push 1  +
mov ecx esi +
call dword ptr [eax+0Ch]  +
jmp loc_103B97D  +
mov [ebp+var_1C] offset dword_100DE74 +
jmp loc_103B960  +
mov [ebp+var_1C] offset dword_100DE64 +
jmp loc_103B960  +
mov [ebp+var_1C] offset dword_100DE54 +
jmp loc_103B960  +
cmp [ebp+arg_C] 0 +
jz loc_103B912  +
cmp cl 22h +
jz loc_103B959  +
cmp cl 27h +
jnz loc_103B981  +
mov [ebp+var_1C] offset dword_100DE88 +
jmp loc_103B960  +
mov [ebp+var_1C] offset dword_100DE9C +
mov ecx [ebp+var_C] +
lea eax [ebp+var_20] +
mov [ebp+var_14] eax +
push esi  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+arg_0]  +
mov [ebp+var_10] 3 +
call loc_103B34F  +
test eax eax +
jl loc_103B99D  +
cmp edi ebx +
jnz loc_103B8F3  +
mov ecx [ebp+arg_4] +
inc [ebp+var_4]  +
mov eax [ebp+var_4] +
cmp eax [ecx+4] +
jnz loc_103B8D4  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 1  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_103B8A4  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
cmp dword ptr [ebp+8] 0 +
push esi  +
push edi  +
mov dword ptr [ebp-4] 0C00000E5h +
jnz loc_103B9EA  +
mov esi 1D1h +
mov edi offset aNotNullChec_41 +
jmp loc_103B9FA  +
cmp dword ptr [ebp+1Ch] 0 +
jnz loc_103BA24  +
mov esi 1D2h +
mov edi offset aNotNullChec_42 +
lea ecx [ebp-4] +
call sub_102FD01  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-4] +
mov dword ptr [ebp-14h] offset aDW7rtmBaseXm_1 +
mov dword ptr [ebp-10h] offset aMicrodomwrit_2 +
mov [ebp-0Ch] esi +
mov [ebp-8] edi +
call sub_103D6FE  +
jmp loc_103BA4B  +
push dword ptr [ebp+1Ch]  +
mov ecx [ecx-2Ch] +
sub esp 10h +
mov edi esp +
push dword ptr [ebp+8]  +
lea esi [ebp+0Ch] +
movs   +
movs   +
movs   +
movs   +
call sub_103B6B6  +
test eax eax +
jge loc_103BA47  +
mov [ebp-4] eax +
jmp loc_103BA4B  +
and dword ptr [ebp-4] 0 +
mov eax [ebp-4] +
pop edi  +
pop esi  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
cmp dword ptr [ebp+8] 0 +
push esi  +
push edi  +
mov dword ptr [ebp-4] 0C00000E5h +
jnz loc_103BA7C  +
mov esi 1DEh +
mov edi offset aNotNullChec_41 +
jmp loc_103BA8C  +
cmp dword ptr [ebp+1Ch] 0 +
jnz loc_103BAB6  +
mov esi 1DFh +
mov edi offset aNotNullChec_42 +
lea ecx [ebp-4] +
call sub_102FD01  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-4] +
mov dword ptr [ebp-14h] offset aDW7rtmBaseXm_1 +
mov dword ptr [ebp-10h] offset aMicrodomwrit_3 +
mov [ebp-0Ch] esi +
mov [ebp-8] edi +
call sub_103D6FE  +
jmp loc_103BADD  +
push dword ptr [ebp+1Ch]  +
mov ecx [ecx-2Ch] +
sub esp 10h +
mov edi esp +
push dword ptr [ebp+8]  +
lea esi [ebp+0Ch] +
movs   +
movs   +
movs   +
movs   +
call sub_103B74D  +
test eax eax +
jge loc_103BAD9  +
mov [ebp-4] eax +
jmp loc_103BADD  +
and dword ptr [ebp-4] 0 +
mov eax [ebp-4] +
pop edi  +
pop esi  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
cmp dword ptr [ebp+8] 0 +
push esi  +
push edi  +
mov dword ptr [ebp-4] 0C00000E5h +
jnz loc_103BB0E  +
mov esi 1EBh +
mov edi offset aNotNullChec_41 +
jmp loc_103BB1E  +
cmp dword ptr [ebp+1Ch] 0 +
jnz loc_103BB48  +
mov esi 1ECh +
mov edi offset aNotNullChec_42 +
lea ecx [ebp-4] +
call sub_102FD01  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-4] +
mov dword ptr [ebp-14h] offset aDW7rtmBaseXm_1 +
mov dword ptr [ebp-10h] offset aMicrodomwrit_4 +
mov [ebp-0Ch] esi +
mov [ebp-8] edi +
call sub_103D6FE  +
jmp loc_103BB6F  +
push dword ptr [ebp+1Ch]  +
mov ecx [ecx-2Ch] +
sub esp 10h +
mov edi esp +
push dword ptr [ebp+8]  +
lea esi [ebp+0Ch] +
movs   +
movs   +
movs   +
movs   +
call sub_103B787  +
test eax eax +
jge loc_103BB6B  +
mov [ebp-4] eax +
jmp loc_103BB6F  +
and dword ptr [ebp-4] 0 +
mov eax [ebp-4] +
pop edi  +
pop esi  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
cmp dword ptr [ebp+8] 0 +
push esi  +
push edi  +
mov dword ptr [ebp-4] 0C00000E5h +
jnz loc_103BBA0  +
mov esi 219h +
mov edi offset aNotNullChec_41 +
jmp loc_103BBB0  +
cmp dword ptr [ebp+1Ch] 0 +
jnz loc_103BBDA  +
mov esi 21Ah +
mov edi offset aNotNullChec_42 +
lea ecx [ebp-4] +
call sub_102FD01  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-4] +
mov dword ptr [ebp-14h] offset aDW7rtmBaseXm_1 +
mov dword ptr [ebp-10h] offset aMicrodomwrit_5 +
mov [ebp-0Ch] esi +
mov [ebp-8] edi +
call sub_103D6FE  +
jmp loc_103BC01  +
push dword ptr [ebp+1Ch]  +
mov ecx [ecx-2Ch] +
sub esp 10h +
mov edi esp +
push dword ptr [ebp+8]  +
lea esi [ebp+0Ch] +
movs   +
movs   +
movs   +
movs   +
call sub_103B82D  +
test eax eax +
jge loc_103BBFD  +
mov [ebp-4] eax +
jmp loc_103BC01  +
and dword ptr [ebp-4] 0 +
mov eax [ebp-4] +
pop edi  +
pop esi  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
xor esi esi +
push edi  +
mov dword ptr [ebp-4] 0C00000E5h +
cmp [ebp+8] esi +
jnz loc_103BC33  +
mov esi 229h +
mov edi offset aNotNullChec_41 +
jmp loc_103BC42  +
cmp [ebp+10h] esi +
jnz loc_103BC6C  +
mov esi 22Ah +
mov edi offset aNotNullChec_42 +
lea ecx [ebp-4] +
call sub_102FD01  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-4] +
mov dword ptr [ebp-14h] offset aDW7rtmBaseXm_1 +
mov dword ptr [ebp-10h] offset aMicrodomwrit_6 +
mov [ebp-0Ch] esi +
mov [ebp-8] edi +
call sub_103D6FE  +
jmp loc_103BC87  +
push dword ptr [ebp+10h]  +
mov ecx [ecx-2Ch] +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_103B9A9  +
cmp eax esi +
mov [ebp-4] eax +
jl loc_103BC87  +
mov [ebp-4] esi +
mov eax [ebp-4] +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+10h] +
push esi  +
mov esi [ebp+arg_0] +
mov dword ptr [esi] 0C00000E5h +
mov byte ptr [ebp+arg_0+3] 0 +
cmp eax [ebp+arg_8] +
jnz loc_103BCDA  +
mov eax [ecx+14h] +
cmp eax [ebp+arg_C] +
jnz loc_103BCDA  +
lea eax [ebp+arg_0+3] +
push eax  +
lea eax [ecx+18h] +
mov ecx [ecx+0Ch] +
push eax  +
push [ebp+arg_4]  +
lea eax [ebp+arg_4] +
push eax  +
call sub_103B207  +
mov eax [ebp+arg_4] +
test eax eax +
jge loc_103BCDA  +
mov [esi] eax +
jmp loc_103BCE5  +
mov eax [ebp+arg_10] +
mov cl byte ptr [ebp+arg_0+3] +
and dword ptr [esi] 0 +
mov [eax] cl +
mov eax esi +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
and [ebp+arg_0] 0 +
push edi  +
mov edi [ebp+arg_14] +
and dword ptr [edi] 0 +
lea eax [ebp+arg_14] +
push eax  +
lea eax [ebp+arg_4] +
mov [ebp+arg_14] ecx +
push eax  +
lea ecx [ebp+arg_0] +
mov dword ptr [esi] 0C00000E5h +
call sub_103B22E  +
test eax eax +
jnz loc_103BD2A  +
mov dword ptr [esi] 0C0000017h +
jmp loc_103BD46  +
mov eax [ebp+arg_C] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
and [ebp+arg_0] 0 +
and dword ptr [esi] 0 +
mov [eax+18h] ecx +
mov ecx [ebp+arg_10] +
mov cl [ecx] +
mov [eax+1Ch] cl +
mov [edi] eax +
lea ecx [ebp+arg_0] +
call sub_103B1EB  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push esi  +
push 40h  +
mov esi ecx +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_103BD75  +
mov ecx eax +
call sub_103B696  +
jmp loc_103BD77  +
xor eax eax +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 74h +
push ebx  +
push esi  +
push edi  +
mov ebx [ebp+arg_0] +
push 3  +
mov [ebp+var_4] ecx +
lea eax [ebp+var_74] +
mov [ebp+var_C] eax +
pop eax  +
lea ecx [ebp+var_C] +
push ecx  +
lea ecx [ebp+var_14] +
push ecx  +
sub esp 10h +
mov edi esp +
lea esi [ebp+arg_4] +
movs   +
movs   +
movs   +
mov [ebp+var_8] eax +
mov [ebp+var_10] eax +
mov eax [ebx] +
mov ecx ebx +
mov [ebp+var_14] offset dword_100DB18 +
movs   +
call dword ptr [eax+48h]  +
test eax eax +
jl loc_103BE62  +
mov ecx [ebp+var_6C] +
xor edi edi +
inc edi  +
mov [ebp+var_2C] offset dword_100DE04 +
mov eax edi +
test ecx ecx +
jz loc_103BDEA  +
push 3  +
mov [ebp+var_28] ecx +
mov [ebp+var_24] offset dword_100DDD4 +
pop eax  +
mov ecx [ebp+var_54] +
push [ebp+arg_14]  +
mov [ebp+eax*4+var_2C] ecx +
inc eax  +
mov [ebp+eax*4+var_2C] offset dword_100DE14 +
inc eax  +
mov esi offset dword_100DE24 +
mov [ebp+eax*4+var_2C] esi +
inc eax  +
mov [ebp+var_10] eax +
lea eax [ebp+var_14] +
lea ecx [ebp+var_2C] +
push eax  +
mov [ebp+var_14] ecx +
mov ecx [ebp+var_4] +
push ebx  +
call loc_103B34F  +
test eax eax +
jl loc_103BE62  +
mov ecx [ebp+var_4] +
push edi  +
push [ebp+arg_14]  +
lea eax [ebp+var_3C] +
mov [ebp+var_14] eax +
lea eax [ebp+var_14] +
push eax  +
push ebx  +
mov [ebp+var_10] edi +
call sub_103B8A4  +
test eax eax +
jl loc_103BE62  +
push [ebp+arg_14]  +
mov ecx [ebp+var_4] +
lea eax [ebp+arg_0] +
mov [ebp+var_14] eax +
lea eax [ebp+var_14] +
push eax  +
push ebx  +
mov [ebp+arg_0] esi +
mov [ebp+var_10] edi +
call loc_103B34F  +
test eax eax +
jl loc_103BE62  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push ebx  +
push esi  +
push edi  +
lea edx [ebp+var_10] +
push edx  +
lea edx [ebp+var_18] +
push edx  +
sub esp 10h +
mov edi esp +
lea esi [ebp+arg_4] +
movs   +
movs   +
lea eax [ebp+var_30] +
mov [ebp+var_10] eax +
movs   +
mov [ebp+var_8] ecx +
mov ecx [ebp+arg_0] +
lea eax [ebp+var_4] +
xor ebx ebx +
inc ebx  +
mov [ebp+var_18] eax +
mov eax [ecx] +
mov [ebp+var_C] ebx +
mov [ebp+var_4] 2009h +
mov [ebp+var_14] ebx +
movs   +
call dword ptr [eax+38h]  +
test eax eax +
jl loc_103BEE1  +
cmp [ebp+var_28] 0 +
jz loc_103BEDF  +
mov ecx [ebp+var_8] +
push 0  +
push [ebp+arg_14]  +
lea eax [ebp+var_28] +
mov [ebp+var_18] eax +
lea eax [ebp+var_18] +
push eax  +
push [ebp+arg_0]  +
mov [ebp+var_14] ebx +
call sub_103B8A4  +
test eax eax +
jl loc_103BEE1  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
cmp dword ptr [ebp+8] 0 +
push esi  +
push edi  +
mov dword ptr [ebp-4] 0C00000E5h +
jnz loc_103BF10  +
mov esi 1FBh +
mov edi offset aNotNullChec_41 +
jmp loc_103BF20  +
cmp dword ptr [ebp+1Ch] 0 +
jnz loc_103BF4A  +
mov esi 1FCh +
mov edi offset aNotNullChec_42 +
lea ecx [ebp-4] +
call sub_102FD01  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-4] +
mov dword ptr [ebp-14h] offset aDW7rtmBaseXm_1 +
mov dword ptr [ebp-10h] offset aMicrodomwrit_7 +
mov [ebp-0Ch] esi +
mov [ebp-8] edi +
call sub_103D6FE  +
jmp loc_103BF71  +
push dword ptr [ebp+1Ch]  +
mov ecx [ecx-2Ch] +
sub esp 10h +
mov edi esp +
push dword ptr [ebp+8]  +
lea esi [ebp+0Ch] +
movs   +
movs   +
movs   +
movs   +
call sub_103BD80  +
test eax eax +
jge loc_103BF6D  +
mov [ebp-4] eax +
jmp loc_103BF71  +
and dword ptr [ebp-4] 0 +
mov eax [ebp-4] +
pop edi  +
pop esi  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
cmp dword ptr [ebp+8] 0 +
push esi  +
push edi  +
mov dword ptr [ebp-4] 0C00000E5h +
jnz loc_103BFA2  +
mov esi 208h +
mov edi offset aNotNullChec_41 +
jmp loc_103BFB2  +
cmp dword ptr [ebp+1Ch] 0 +
jnz loc_103BFDC  +
mov esi 209h +
mov edi offset aNotNullChec_42 +
lea ecx [ebp-4] +
call sub_102FD01  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-4] +
mov dword ptr [ebp-14h] offset aDW7rtmBaseXm_1 +
mov dword ptr [ebp-10h] offset aMicrodomwrit_8 +
mov [ebp-0Ch] esi +
mov [ebp-8] edi +
call sub_103D6FE  +
jmp loc_103C003  +
push dword ptr [ebp+1Ch]  +
mov ecx [ecx-2Ch] +
sub esp 10h +
mov edi esp +
push dword ptr [ebp+8]  +
lea esi [ebp+0Ch] +
movs   +
movs   +
movs   +
movs   +
call sub_103BE6E  +
test eax eax +
jge loc_103BFFF  +
mov [ebp-4] eax +
jmp loc_103C003  +
and dword ptr [ebp-4] 0 +
mov eax [ebp-4] +
pop edi  +
pop esi  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov esi ecx +
cmp edi [esi+4] +
jbe loc_103C033  +
push edi  +
lea eax [ebp+arg_4] +
push eax  +
call sub_103B266  +
mov ecx [ebp+arg_4] +
test ecx ecx +
jl loc_103C038  +
mov [esi+4] edi +
xor ecx ecx +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] ecx +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+0Ch] +
mov edx [ebp+arg_4] +
push offset loc_103B2DE  +
push [ebp+arg_0]  +
mov [edx] eax +
call sub_103B03C  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov ebx ecx +
mov esi [ebx] +
push edi  +
mov dword ptr [eax] 0C00000E5h +
mov [ebp+var_1] 0 +
mov edi [ebp+arg_4] +
test esi esi +
jz loc_103C0C1  +
cmp esi ebx +
jz loc_103C0C1  +
lea eax [ebp-1] +
push eax  +
push [ebp+arg_14]  +
lea eax [ebp+var_8] +
push [ebp+arg_10]  +
mov ecx esi +
push [ebp+arg_8]  +
push eax  +
call sub_103BC95  +
mov eax [ebp+var_8] +
test eax eax +
jl loc_103C0BA  +
cmp [ebp+var_1] 0 +
jnz loc_103C0F8  +
mov esi [esi] +
jmp loc_103C086  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
jmp loc_103C130  +
and [ebp+arg_4] 0 +
lea eax [ebp+arg_4] +
push eax  +
push [ebp+arg_C]  +
lea eax [ebp+arg_8] +
push [ebp+arg_8]  +
mov ecx edi +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push eax  +
call sub_103BCF1  +
mov eax [ebp+arg_8] +
test eax eax +
jl loc_103C0BA  +
mov esi [ebp+arg_4] +
push 1  +
push esi  +
push ebx  +
mov ecx ebx +
call sub_1032AF1  +
inc dword ptr [edi+10h]  +
mov eax [ebp+arg_18] +
test eax eax +
jz loc_103C104  +
add esi 1Ch +
mov [eax] esi +
mov eax [edi+10h] +
cmp eax [edi+14h] +
jbe loc_103C11E  +
lea eax [ebp+arg_8] +
push eax  +
mov ecx edi +
call sub_1036F48  +
mov eax [ebp+arg_8] +
test eax eax +
jl loc_103C0BA  +
mov eax [ebp+arg_1C] +
test eax eax +
jz loc_103C12A  +
mov cl [ebp+var_1] +
mov [eax] cl +
mov eax [ebp+arg_0] +
and dword ptr [eax] 0 +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 20h  +
***
mov edi edi +
push esi  +
push 40h  +
mov esi ecx +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_103C159  +
mov ecx eax +
call sub_103B31F  +
jmp loc_103C15B  +
xor eax eax +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_8] +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
mov esi ecx +
mov [ebp+var_8] ebx +
mov [ebp+var_4] ebx +
cmp eax ebx +
jz loc_103C181  +
mov [eax] ebx +
mov eax [ebp+arg_C] +
cmp eax ebx +
jz loc_103C18A  +
mov [eax] bl +
mov edi [ebp+arg_0] +
lea eax [ebp+var_8] +
push eax  +
push dword ptr [edi]  +
call sub_103AF98  +
cmp eax ebx +
jl loc_103C1D6  +
push [ebp+arg_C]  +
lea eax [ebp+arg_C] +
push [ebp+arg_8]  +
push [ebp+var_4]  +
push [ebp+var_8]  +
push [ebp+arg_4]  +
push edi  +
push esi  +
push eax  +
push ebx  +
push dword ptr [esi+0Ch]  +
push [ebp+var_4]  +
push [ebp+var_8]  +
call __aullrem  +
mov ecx eax +
shl ecx 4 +
add ecx [esi+4] +
call sub_103C06B  +
mov eax [ebp+arg_C] +
cmp eax ebx +
jl loc_103C1D6  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+20h] +
mov eax [edi] +
mov [ebp+var_C] 0C00000E5h +
cmp eax 2 +
jz loc_103C26C  +
xchg eax [ebp+var_4] +
xor ecx ecx +
inc ecx  +
mov edx edi +
xor eax eax +
cmpxchg [edx] ecx +
test eax eax +
jnz loc_103C255  +
lea eax [esi+24h] +
push eax  +
mov [esi+2Ch] esi +
mov dword ptr [esi+30h] offset byte_1036DF5 +
call nullsub_1  +
cmp dword ptr [esi] 0 +
jz loc_103C22A  +
int 3  +
lea ecx [esi+8] +
test ecx ecx +
jz loc_103C248  +
lea eax [ecx+4] +
mov dword ptr [ecx] 0 +
and dword ptr [eax+0Ch] 0 +
mov [eax] eax +
mov [eax+4] eax +
mov [eax+8] eax +
jmp loc_103C24A  +
xor ecx ecx +
push 2  +
mov [esi] ecx +
pop eax  +
mov ecx edi +
xchg eax [ecx] +
jmp loc_103C269  +
cmp eax 1 +
jnz loc_103C269  +
jmp loc_103C262  +
call ds:NtYieldExecution  +
mov eax [edi] +
cmp eax 2 +
jnz loc_103C25C  +
xchg eax [ebp+var_8] +
mov eax [edi] +
pop edi  +
pop esi  +
cmp eax 2 +
jnz loc_103C229  +
xor eax eax +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
and [ebp+var_4] 0 +
push edi  +
mov edi ecx +
lea ecx [ebp+var_4] +
call sub_103C13F  +
test eax eax +
jnz loc_103C2D8  +
mov edi 0C0000017h +
mov [ebp+arg_0] edi +
cmp [ebp+var_4] eax +
jz loc_103C2AE  +
push [ebp+var_4]  +
call sub_1035827  +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+arg_0] +
mov [ebp+var_14] offset aDW7rtm_public_ +
mov [ebp+var_10] offset aWindowsRtlCr_1 +
mov [ebp+var_C] 12Ah +
mov [ebp+var_8] offset aNewtearoff_all +
call sub_103D6FE  +
jmp loc_103C30C  +
mov eax [ebp+arg_0] +
push esi  +
mov esi [ebp+var_4] +
push eax  +
push esi  +
mov ecx edi +
mov [esi+10h] eax +
call sub_1036FBA  +
test eax eax +
jge loc_103C2F9  +
push esi  +
mov edi eax +
call sub_1035827  +
jmp loc_103C30B  +
mov ecx [ebp+arg_4] +
mov eax esi +
add esi 3Ch +
neg eax  +
sbb eax eax +
and eax esi +
mov [ecx] eax +
xor edi edi +
pop esi  +
mov eax edi +
pop edi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
mov ebx ecx +
call sub_103B11F  +
test eax eax +
jge loc_103C333  +
mov ebx eax +
jmp loc_103C457  +
and [ebp+var_8] 0 +
and [ebp+var_C] 0 +
push esi  +
push edi  +
lea ecx [ebp+var_8] +
mov byte ptr [ebp+var_1] 0 +
call sub_103B2FA  +
test eax eax +
jnz loc_103C377  +
mov ebx 0C0000017h +
lea ecx [ebp+var_1] +
mov edi 0FCh +
mov esi offset aNewinstance_al +
mov [ebp+arg_4] ebx +
call sub_1036E96  +
cmp [ebp+var_8] 0 +
jz loc_103C3BF  +
push [ebp+var_8]  +
call sub_103580B  +
jmp loc_103C3BF  +
mov esi [ebp+var_8] +
mov [esi+20h] esi +
lea ecx [ebp+var_C] +
mov [esi+4Ch] ebx +
call sub_103C13F  +
test eax eax +
jnz loc_103C3E1  +
mov ebx 0C0000017h +
lea ecx [ebp+var_1] +
mov edi 10Bh +
mov [ebp+var_8] offset aNewtearoff_all +
mov [ebp+arg_4] ebx +
call sub_1036E96  +
cmp [ebp+var_C] 0 +
jz loc_103C3B6  +
push [ebp+var_C]  +
call sub_1035827  +
push esi  +
call sub_103580B  +
mov esi [ebp+var_8] +
lea eax [ebp+var_1C] +
push eax  +
lea ecx [ebp+arg_4] +
mov [ebp+var_1C] offset aDW7rtm_public_ +
mov [ebp+var_18] offset aWindowsRtlCr_2 +
mov [ebp+var_14] edi +
mov [ebp+var_10] esi +
call sub_103D6FE  +
jmp loc_103C455  +
mov edi [ebp+var_C] +
push edi  +
lea ecx [esi+10h] +
mov [edi+10h] esi +
call sub_1035A5E  +
lea ecx [ebp+var_1] +
call sub_1036724  +
test eax eax +
jge loc_103C414  +
lea ecx [ebp+var_1] +
mov ebx eax +
call sub_1036E96  +
push edi  +
call sub_1035827  +
push esi  +
call sub_103580B  +
jmp loc_103C455  +
push esi  +
lea ecx [ebx+4] +
call sub_1035A5E  +
lea ecx [ebp+var_1] +
call sub_1036746  +
test eax eax +
jge loc_103C43B  +
lea ecx [ebp+var_1] +
mov ebx eax +
call sub_1036E96  +
push edi  +
call sub_1035827  +
jmp loc_103C455  +
mov ecx [ebp+arg_4] +
mov eax edi +
add edi 3Ch +
neg eax  +
sbb eax eax +
and eax edi +
mov [ecx] eax +
lea ecx [ebp+var_1] +
xor ebx ebx +
call sub_1036E96  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
and [ebp+var_4] 0 +
push edi  +
mov edi ecx +
lea ecx [ebp+var_4] +
call sub_103BD5B  +
test eax eax +
jnz loc_103C4BD  +
mov edi 0C0000017h +
mov [ebp+arg_0] edi +
cmp [ebp+var_4] eax +
jz loc_103C493  +
push [ebp+var_4]  +
call sub_1035827  +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+arg_0] +
mov [ebp+var_14] offset aDW7rtm_public_ +
mov [ebp+var_10] offset aWindowsRtlCr_1 +
mov [ebp+var_C] 12Ah +
mov [ebp+var_8] offset aNewtearoff_all +
call sub_103D6FE  +
jmp loc_103C4F1  +
mov eax [ebp+arg_0] +
push esi  +
mov esi [ebp+var_4] +
push eax  +
push esi  +
mov ecx edi +
mov [esi+10h] eax +
call sub_1036FBA  +
test eax eax +
jge loc_103C4DE  +
push esi  +
mov edi eax +
call sub_1035827  +
jmp loc_103C4F0  +
mov ecx [ebp+arg_4] +
mov eax esi +
add esi 3Ch +
neg eax  +
sbb eax eax +
and eax esi +
mov [ecx] eax +
xor edi edi +
pop esi  +
mov eax edi +
pop edi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
xor ebx ebx +
xor edi edi +
cmp [esi+0Ch] ebx +
jbe loc_103C529  +
mov ecx [esi+4] +
lea eax [ebp+var_4] +
push eax  +
push esi  +
add ecx ebx +
call sub_103C048  +
inc edi  +
add ebx 10h +
cmp edi [esi+0Ch] +
jb loc_103C511  +
mov eax [esi+4] +
lea edi [esi+18h] +
cmp eax edi +
jz loc_103C547  +
test eax eax +
jz loc_103C547  +
push eax  +
call sub_103DC88  +
and dword ptr [esi+0Ch] 0 +
and dword ptr [esi+4] 0 +
jmp loc_103C54B  +
and dword ptr [esi+0Ch] 0 +
and dword ptr [esi+4] 0 +
push offset loc_103AFFF  +
push 7  +
push 10h  +
push edi  +
call sub_1035616  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_103C1E2  +
test eax eax +
jl loc_103C593  +
push [ebp+arg_4]  +
mov ecx esi +
push [ebp+arg_0]  +
call sub_103AFBC  +
mov ecx eax +
call sub_103C318  +
test eax eax +
jl loc_103C593  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 0 +
jz loc_103C5AB  +
int 3  +
push eax  +
push dword ptr [ecx+20h]  +
mov ecx [ecx+4Ch] +
call sub_103C463  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
mov ebx [ebp+0Ch] +
mov eax ecx +
mov dword ptr [ebp-4] 0C00000E5h +
test ebx ebx +
jnz loc_103C60B  +
lea ecx [ebp-4] +
call sub_102FD01  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-4] +
mov dword ptr [ebp-14h] offset aDW7rtmBaseXm_1 +
mov dword ptr [ebp-10h] offset aMicrodomwrit_9 +
mov dword ptr [ebp-0Ch] 24h +
mov dword ptr [ebp-8] offset aNotNullChec_31 +
call sub_103D6FE  +
jmp loc_103C663  +
and dword ptr [ebp+0Ch] 0 +
push esi  +
mov esi [ebp+8] +
push edi  +
push 4  +
pop ecx  +
mov edi offset dword_100751C +
xor edx edx +
cmps   +
jz loc_103C633  +
mov esi [ebp+8] +
push 4  +
pop ecx  +
mov edi offset dword_1007584 +
xor edx edx +
cmps   +
jnz loc_103C64E  +
lea ecx [ebp+0Ch] +
push ecx  +
push dword ptr [eax+20h]  +
mov ecx [eax+4Ch] +
call sub_103C27E  +
test eax eax +
jge loc_103C64E  +
mov ecx [ebp+0Ch] +
mov [ebp-4] eax +
jmp loc_103C659  +
mov eax [ebp+0Ch] +
mov ecx [ebx] +
and dword ptr [ebp-4] 0 +
mov [ebx] eax +
test ecx ecx +
jz loc_103C661  +
mov eax [ecx] +
call dword ptr [eax]  +
pop edi  +
pop esi  +
mov eax [ebp-4] +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
cmp [ebp+arg_0] 0 +
mov [ebp+var_4] 0C00000E5h +
jz loc_103C69D  +
lea ecx [ebp+var_4] +
call sub_102FD01  +
mov [ebp+var_C] 3BDh +
mov [ebp+var_8] offset aValidFlagsChec +
jmp loc_103C6B9  +
cmp [ebp+arg_4] 0 +
jnz loc_103C6D5  +
lea ecx [ebp+var_4] +
call sub_102FD01  +
mov [ebp+var_C] 3BEh +
mov [ebp+var_8] offset aNotNullChec_43 +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_10] offset aRtlcreatedefau +
mov [ebp+var_14] offset aDW7rtmBaseXm_1 +
call sub_103D6FE  +
jmp loc_103C6F7  +
push [ebp+arg_4]  +
and [ebp+arg_0] 0 +
lea eax [ebp+arg_0] +
push eax  +
mov ecx offset unk_104A140 +
call sub_103C568  +
test eax eax +
jge loc_103C6F3  +
mov [ebp+var_4] eax +
jmp loc_103C6F7  +
and [ebp+var_4] 0 +
mov eax [ebp+var_4] +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
push 4  +
mov eax ecx +
pop ecx  +
mov edi offset dword_100CF20 +
xor edx edx +
cmps   +
pop edi  +
pop esi  +
jnz loc_103C72E  +
push dword ptr [ebp+0Ch]  +
mov ecx [eax-2Ch] +
call sub_103C59D  +
pop ebp  +
retn 8  +
***
mov ecx [eax-2Ch] +
pop ebp  +
jmp loc_103C5C0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 158h +
push ebx  +
push esi  +
push edi  +
lea ecx [ebp+var_158] +
call sub_103DA12  +
mov ebx [ebp+arg_4] +
lea esi [ebp+arg_8] +
lea edi [ebp+var_54] +
movs   +
movs   +
movs   +
movs   +
lea esi [ebp+arg_8] +
lea ecx [ebp+var_4] +
mov [ebp+var_20] ecx +
lea ecx [ebp+var_18] +
push ecx  +
lea ecx [ebp+var_20] +
push ecx  +
sub esp 10h +
mov edi esp +
movs   +
movs   +
lea eax [ebp+var_7C] +
mov [ebp+var_18] eax +
xor eax eax +
inc eax  +
movs   +
mov [ebp+var_14] eax +
mov [ebp+var_1C] eax +
mov eax [ebx] +
mov ecx ebx +
movs   +
mov [ebp+var_4] 2000h +
call dword ptr [eax+4Ch]  +
test eax eax +
jl loc_103C9B1  +
mov eax [ebx] +
lea ecx [ebp+var_10] +
push ecx  +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_74] +
movs   +
movs   +
movs   +
mov ecx ebx +
movs   +
call dword ptr [eax+68h]  +
test eax eax +
jl loc_103C9B1  +
and [ebp+var_4] 0 +
cmp [ebp+var_10] 0 +
jz loc_103C93C  +
mov eax [ebx] +
or [ebp+var_C] 0FFFFFFFFh +
lea ecx [ebp+var_8C] +
push ecx  +
push [ebp+var_4]  +
lea esi [ebp+var_74] +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
mov ecx ebx +
movs   +
call dword ptr [eax+64h]  +
test eax eax +
jl loc_103C9B1  +
push 2  +
lea eax [ebp+var_CC] +
mov [ebp+var_44] eax +
pop eax  +
lea ecx [ebp+var_44] +
push ecx  +
lea ecx [ebp+var_2C] +
push ecx  +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_8C] +
movs   +
movs   +
movs   +
mov [ebp+var_40] eax +
mov [ebp+var_28] eax +
mov eax [ebx] +
mov ecx ebx +
mov [ebp+var_2C] offset dword_100D95C +
movs   +
call dword ptr [eax+50h]  +
xor esi esi +
cmp eax esi +
jl loc_103C9B1  +
mov eax [ebp+var_C4] +
cmp eax esi +
jz loc_103C860  +
lea ecx [ebp+var_C] +
push ecx  +
push esi  +
push offset dword_100DEB0  +
push eax  +
call sub_102FCDB  +
cmp eax esi +
jl loc_103C9B1  +
mov eax [ebp+var_C4] +
cmp [ebp+var_C] esi +
jz loc_103C899  +
cmp [ebp+var_AC] esi +
jz loc_103C890  +
lea eax [ebp+var_C] +
push eax  +
push esi  +
push offset dword_100DEB0  +
push [ebp+var_AC]  +
call sub_102FCDB  +
cmp eax esi +
jl loc_103C9B1  +
mov eax [ebp+var_C4] +
cmp [ebp+var_C] esi +
jnz loc_103C92D  +
neg eax  +
sbb eax eax +
and eax [ebp+var_AC] +
lea ecx [ebp+var_158] +
mov [ebp+var_24] eax +
lea eax [ebp-5] +
push eax  +
push esi  +
lea eax [ebp+arg_4+3] +
push eax  +
lea eax [ebp+var_24] +
push eax  +
mov byte ptr [ebp+arg_4+3] 1 +
call sub_103C164  +
cmp eax esi +
jl loc_103C9B1  +
cmp [ebp+var_5] 0 +
jnz loc_103C92D  +
mov eax [ebp+var_4C] +
cmp eax [ebp+arg_10] +
jz loc_103C92D  +
mov eax [ebx] +
lea ecx [ebp+var_9C] +
push ecx  +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_8C] +
movs   +
movs   +
movs   +
mov ecx ebx +
movs   +
call dword ptr [eax+20h]  +
test eax eax +
jl loc_103C9B1  +
cmp [ebp+var_94] 0FFFFFFFFh +
jz loc_103C9B5  +
push [ebp+arg_18]  +
mov ecx [ebp+arg_0] +
mov eax [ecx] +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_9C] +
movs   +
movs   +
movs   +
push ebx  +
movs   +
call dword ptr [eax+18h]  +
test eax eax +
jl loc_103C9B1  +
inc [ebp+var_4]  +
mov eax [ebp+var_4] +
cmp eax [ebp+var_10] +
jnz loc_103C7CE  +
lea ecx [ebp+arg_4] +
mov [ebp+var_3C] ecx +
lea ecx [ebp+var_34] +
push ecx  +
lea ecx [ebp+var_3C] +
push ecx  +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_54] +
movs   +
movs   +
lea eax [ebp+var_7C] +
mov [ebp+var_34] eax +
xor eax eax +
inc eax  +
movs   +
mov [ebp+var_30] eax +
mov [ebp+var_38] eax +
mov eax [ebx] +
mov ecx ebx +
mov [ebp+arg_4] 200Bh +
movs   +
call dword ptr [eax+4Ch]  +
test eax eax +
jl loc_103C9B1  +
mov eax [ebx] +
lea ecx [ebp+var_64] +
push ecx  +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_74] +
movs   +
movs   +
movs   +
mov ecx ebx +
movs   +
call dword ptr [eax+30h]  +
test eax eax +
jl loc_103C9B1  +
mov eax [ebp+var_5C] +
cmp eax 0FFFFFFFFh +
jz loc_103C9B6  +
cmp eax [ebp+var_4C] +
jz loc_103C9B6  +
lea esi [ebp+var_64] +
lea edi [ebp+var_54] +
movs   +
movs   +
movs   +
movs   +
lea esi [ebp+var_64] +
jmp loc_103C765  +
mov esi eax +
jmp loc_103C9B8  +
int 3  +
xor esi esi +
lea ecx [ebp+var_158] +
call sub_103C4FD  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
mov ecx [ebp+arg_0] +
push ebx  +
push esi  +
mov ebx [ebp+arg_4] +
mov eax [ecx] +
push edi  +
push [ebp+arg_18]  +
lea esi [ebp+arg_8] +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
push ebx  +
movs   +
call dword ptr [eax+0Ch]  +
test eax eax +
jl loc_103CB14  +
lea ecx [ebp+arg_4] +
mov [ebp+var_1C] ecx +
lea ecx [ebp+var_C] +
push ecx  +
lea ecx [ebp+var_1C] +
push ecx  +
sub esp 10h +
mov edi esp +
lea esi [ebp+arg_8] +
movs   +
movs   +
lea eax [ebp+var_3C] +
mov [ebp+var_C] eax +
xor eax eax +
inc eax  +
movs   +
mov [ebp+var_8] eax +
mov [ebp+var_18] eax +
mov eax [ebx] +
mov ecx ebx +
mov [ebp+arg_4] 2000h +
movs   +
call dword ptr [eax+4Ch]  +
test eax eax +
jl loc_103CB14  +
mov eax [ebx] +
lea ecx [ebp+var_4] +
push ecx  +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_34] +
movs   +
movs   +
movs   +
mov ecx ebx +
movs   +
call dword ptr [eax+68h]  +
test eax eax +
jl loc_103CB14  +
and [ebp+arg_4] 0 +
cmp [ebp+var_4] 0 +
jz loc_103CAD1  +
mov eax [ebx] +
lea ecx [ebp+var_14] +
push ecx  +
push [ebp+arg_4]  +
lea esi [ebp+var_34] +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
mov ecx ebx +
movs   +
call dword ptr [eax+64h]  +
test eax eax +
jl loc_103CB14  +
mov eax [ebx] +
lea ecx [ebp+var_24] +
push ecx  +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_14] +
movs   +
movs   +
movs   +
mov ecx ebx +
movs   +
call dword ptr [eax+20h]  +
test eax eax +
jl loc_103CB14  +
cmp [ebp+var_1C] 0FFFFFFFFh +
jz loc_103CAC6  +
push [ebp+arg_18]  +
mov ecx [ebp+arg_0] +
mov eax [ecx] +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_24] +
movs   +
movs   +
movs   +
push ebx  +
movs   +
call dword ptr [eax+18h]  +
test eax eax +
jl loc_103CB14  +
inc [ebp+arg_4]  +
mov eax [ebp+arg_4] +
cmp eax [ebp+var_4] +
jnz loc_103CA67  +
cmp [ebp+arg_1C] 0 +
jz loc_103CAF3  +
push [ebp+arg_18]  +
lea esi [ebp+arg_8] +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
push ebx  +
push [ebp+arg_0]  +
movs   +
call sub_103C73C  +
test eax eax +
jl loc_103CB14  +
push [ebp+arg_18]  +
mov eax [ebp+arg_0] +
mov eax [eax] +
mov ecx [ebp+arg_0] +
sub esp 10h +
mov edi esp +
lea esi [ebp+arg_8] +
movs   +
movs   +
movs   +
push ebx  +
movs   +
call dword ptr [eax+10h]  +
test eax eax +
jl loc_103CB14  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 98h +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
push 0Ah  +
lea eax [ebp-1Ch] +
push eax  +
lea ecx [ebp-14h] +
mov [ebp-14h] ebx +
mov [ebp-10h] ebx +
mov [ebp-0Ch] ebx +
call sub_103C011  +
mov esi [eax] +
cmp esi ebx +
jl loc_103CCC2  +
mov eax [ebp-14h] +
lea esi [ebp+14h] +
mov edi eax +
movs   +
movs   +
movs   +
movs   +
mov [eax+10h] ebx +
mov [eax+14h] ebx +
mov dword ptr [ebp-8] 1 +
mov ecx [ebp-8] +
imul ecx ecx +
lea ebx [ecx+eax-18h] +
cmp dword ptr [ebx+10h] 0 +
mov byte ptr [ebp-1] 0 +
mov [ebp-1Ch] ecx +
jnz loc_103CBF6  +
cmp dword ptr [ebp-8] 1 +
mov esi ebx +
setz al  +
movzx eax al +
push eax  +
push dword ptr [ebp+24h]  +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
mov esi [ebp+10h] +
push esi  +
push dword ptr [ebp+0Ch]  +
call sub_103C9D1  +
test eax eax +
jl loc_103CCC0  +
lea ecx [ebp-18h] +
mov [ebp-34h] ecx +
lea eax [ebp-68h] +
mov [ebp-3Ch] eax +
lea ecx [ebp-3Ch] +
push ecx  +
xor eax eax +
inc eax  +
lea ecx [ebp-34h] +
push ecx  +
mov ecx [ebp+10h] +
mov [ebp-38h] eax +
mov [ebp-30h] eax +
mov eax [esi] +
sub esp 10h +
mov edi esp +
mov esi ebx +
movs   +
movs   +
movs   +
mov dword ptr [ebp-18h] 2001h +
movs   +
call dword ptr [eax+4Ch]  +
test eax eax +
jl loc_103CCC0  +
mov eax [ebp-60h] +
mov ecx [ebp-1Ch] +
mov [ebx+10h] eax +
mov esi [ebx+10h] +
mov eax [ebx+14h] +
cmp eax [esi+4] +
jz loc_103CDDF  +
mov [ebp-18h] ecx +
cmp byte ptr [ebp-1] 0 +
jnz loc_103CE0E  +
mov ecx [esi] +
shl eax 4 +
add eax ecx +
mov esi eax +
lea edi [ebp-4Ch] +
movs   +
movs   +
movs   +
movs   +
lea esi [ebp-24h] +
push esi  +
lea esi [ebp-2Ch] +
push esi  +
sub esp 10h +
mov esi eax +
mov edi esp +
movs   +
lea ecx [ebp-68h] +
mov [ebp-24h] ecx +
movs   +
xor ecx ecx +
inc ecx  +
movs   +
mov [ebp-20h] ecx +
lea edx [ebp-1Ch] +
mov [ebp-28h] ecx +
mov ecx [ebp+10h] +
mov [ebp-2Ch] edx +
mov edx [ecx] +
mov dword ptr [ebp-1Ch] 2008h +
movs   +
call dword ptr [edx+50h]  +
test eax eax +
jl loc_103CCC0  +
movzx eax word ptr [ebp-60h] +
dec eax  +
jz loc_103CD4C  +
dec eax  +
dec eax  +
jz loc_103CD0B  +
sub eax 4 +
jz loc_103CCD3  +
dec eax  +
jnz loc_103CDC7  +
mov ecx [ebp+10h] +
mov eax [ecx] +
lea edx [ebp-98h] +
push edx  +
sub esp 10h +
mov edi esp +
lea esi [ebp-4Ch] +
movs   +
movs   +
movs   +
movs   +
call dword ptr [eax+14h]  +
test eax eax +
jl loc_103CCC0  +
push dword ptr [ebp+24h]  +
mov ecx [ebp+0Ch] +
mov eax [ecx] +
sub esp 10h +
mov edi esp +
push dword ptr [ebp+10h]  +
lea esi [ebp-98h] +
movs   +
movs   +
movs   +
movs   +
call dword ptr [eax+30h]  +
test eax eax +
jge loc_103CDC7  +
mov esi eax +
lea ecx [ebp-14h] +
call sub_10366D6  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 20h  +
***
mov ecx [ebp+10h] +
mov eax [ecx] +
lea edx [ebp-78h] +
push edx  +
sub esp 10h +
mov edi esp +
lea esi [ebp-4Ch] +
movs   +
movs   +
movs   +
movs   +
call dword ptr [eax+1Ch]  +
test eax eax +
jl loc_103CCC0  +
push dword ptr [ebp+24h]  +
mov ecx [ebp+0Ch] +
mov eax [ecx] +
sub esp 10h +
mov edi esp +
push dword ptr [ebp+10h]  +
lea esi [ebp-78h] +
movs   +
movs   +
movs   +
movs   +
call dword ptr [eax+2Ch]  +
jmp loc_103CCB8  +
***
mov ecx [ebp+10h] +
mov eax [ecx] +
lea edx [ebp-88h] +
push edx  +
sub esp 10h +
mov edi esp +
lea esi [ebp-4Ch] +
movs   +
movs   +
movs   +
movs   +
call dword ptr [eax+24h]  +
test eax eax +
jl loc_103CCC0  +
push dword ptr [ebp+24h]  +
mov ecx [ebp+0Ch] +
mov eax [ecx] +
sub esp 10h +
mov edi esp +
push dword ptr [ebp+10h]  +
lea esi [ebp-88h] +
movs   +
movs   +
movs   +
movs   +
call dword ptr [eax+20h]  +
jmp loc_103CCB8  +
***
mov ecx [ebp-10h] +
cmp [ebp-8] ecx +
jnz loc_103CD89  +
lea eax [ecx+0Ah] +
cmp eax ecx +
jb loc_103CE21  +
cmp eax 0Ah +
jb loc_103CE21  +
push eax  +
lea eax [ebp-50h] +
push eax  +
lea ecx [ebp-14h] +
call sub_103C011  +
mov esi [eax] +
test esi esi +
jl loc_103CCC2  +
mov eax [ebp-14h] +
mov ecx [ebp-18h] +
lea ebx [ecx+eax-18h] +
mov ecx [ebp-14h] +
mov eax [ebp-18h] +
add eax ecx +
mov ecx [ebp+10h] +
mov edx [ecx] +
push eax  +
sub esp 10h +
mov edi esp +
lea esi [ebp-4Ch] +
movs   +
movs   +
movs   +
mov [ebp-1Ch] eax +
movs   +
call dword ptr [edx+30h]  +
test eax eax +
jl loc_103CCC0  +
mov eax [ebp-1Ch] +
and dword ptr [eax+10h] 0 +
and dword ptr [eax+14h] 0 +
inc dword ptr [ebp-8]  +
add dword ptr [ebp-18h] 18h +
mov byte ptr [ebp-1] 1 +
inc dword ptr [ebx+14h]  +
mov esi [ebx+10h] +
mov eax [ebx+14h] +
cmp eax [esi+4] +
jnz loc_103CC08  +
cmp byte ptr [ebp-1] 0 +
jnz loc_103CE0E  +
mov eax [ebx+10h] +
mov ecx [ebx+14h] +
cmp ecx [eax+4] +
jnz near ptr byte_103CE2B  +
push dword ptr [ebp+24h]  +
mov ecx [ebp+0Ch] +
mov eax [ecx] +
sub esp 10h +
mov edi esp +
push dword ptr [ebp+10h]  +
mov esi ebx +
movs   +
movs   +
movs   +
movs   +
call dword ptr [eax+14h]  +
test eax eax +
jl loc_103CCC0  +
dec dword ptr [ebp-8]  +
xor esi esi +
cmp [ebp-8] esi +
jbe loc_103CCC2  +
mov eax [ebp-14h] +
jmp loc_103CB6A  +
***
mov esi 0C0000095h +
jmp loc_103CCC2  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A0h +
push ebx  +
mov ebx [ebp+arg_8] +
mov eax [ebx] +
push esi  +
push edi  +
lea ecx [ebp+var_90] +
push ecx  +
mov ecx ebx +
call dword ptr [eax+10h]  +
test eax eax +
jl loc_103D02E  +
lea ecx [ebp+arg_8] +
mov [ebp+var_C] ecx +
lea ecx [ebp+var_14] +
push ecx  +
lea ecx [ebp+var_C] +
push ecx  +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_90] +
movs   +
movs   +
lea eax [ebp+var_50] +
mov [ebp+var_14] eax +
xor eax eax +
inc eax  +
movs   +
mov [ebp+var_10] eax +
mov [ebp+var_8] eax +
mov eax [ebx] +
mov ecx ebx +
mov [ebp+arg_8] 2001h +
movs   +
call dword ptr [eax+44h]  +
xor ecx ecx +
cmp eax ecx +
jl loc_103D02E  +
mov eax [ebp+var_48] +
cmp eax ecx +
jnz loc_103CEA4  +
int 3  +
mov [ebp+var_18] eax +
add eax 4 +
mov [ebp+var_4] ecx +
mov [ebp+var_10] eax +
cmp [eax] ecx +
jbe loc_103D02C  +
mov [ebp+arg_8] ecx +
mov eax [ebp+var_18] +
mov eax [eax] +
mov ecx [ebp+arg_8] +
add ecx eax +
mov esi ecx +
lea edi [ebp+var_38] +
movs   +
movs   +
movs   +
lea edx [ebp+var_8] +
mov [ebp+var_28] edx +
lea edx [ebp+var_20] +
push edx  +
movs   +
lea edx [ebp+var_28] +
push edx  +
sub esp 10h +
mov esi ecx +
mov edi esp +
movs   +
movs   +
lea eax [ebp+var_50] +
mov [ebp+var_20] eax +
xor eax eax +
inc eax  +
movs   +
mov [ebp+var_1C] eax +
mov [ebp+var_24] eax +
mov eax [ebx] +
mov ecx ebx +
mov [ebp+var_8] 2008h +
movs   +
call dword ptr [eax+50h]  +
test eax eax +
jl loc_103D02E  +
cmp [ebp+var_50] 6 +
jnz loc_103CEA3  +
mov eax [ebp+var_48] +
cmp ax 1 +
jnz loc_103CF60  +
mov eax [ebx] +
lea ecx [ebp+var_A0] +
push ecx  +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_38] +
movs   +
movs   +
movs   +
mov ecx ebx +
movs   +
call dword ptr [eax+30h]  +
test eax eax +
jl loc_103D02E  +
push [ebp+arg_C]  +
lea esi [ebp+var_A0] +
sub esp 10h +
mov edi esp +
movs   +
movs   +
push ebx  +
push [ebp+arg_4]  +
movs   +
push [ebp+arg_0]  +
movs   +
call loc_103CB20  +
jmp loc_103D013  +
cmp ax 3 +
jnz loc_103CF9F  +
mov eax [ebx] +
lea ecx [ebp+var_60] +
push ecx  +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_38] +
movs   +
movs   +
movs   +
mov ecx ebx +
movs   +
call dword ptr [eax+24h]  +
test eax eax +
jl loc_103D02E  +
push [ebp+arg_C]  +
mov ecx [ebp+arg_4] +
mov eax [ecx] +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_60] +
movs   +
movs   +
movs   +
push ebx  +
movs   +
call dword ptr [eax+20h]  +
jmp loc_103D013  +
cmp ax 7 +
jnz loc_103CFDA  +
mov eax [ebx] +
lea ecx [ebp+var_70] +
push ecx  +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_38] +
movs   +
movs   +
movs   +
mov ecx ebx +
movs   +
call dword ptr [eax+1Ch]  +
test eax eax +
jl loc_103D02E  +
push [ebp+arg_C]  +
mov ecx [ebp+arg_4] +
mov eax [ecx] +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_70] +
movs   +
movs   +
movs   +
push ebx  +
movs   +
call dword ptr [eax+2Ch]  +
jmp loc_103D013  +
cmp ax 8 +
jnz loc_103D017  +
mov eax [ebx] +
lea ecx [ebp+var_80] +
push ecx  +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_38] +
movs   +
movs   +
movs   +
mov ecx ebx +
movs   +
call dword ptr [eax+14h]  +
test eax eax +
jl loc_103D02E  +
push [ebp+arg_C]  +
mov ecx [ebp+arg_4] +
mov eax [ecx] +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_80] +
movs   +
movs   +
movs   +
push ebx  +
movs   +
call dword ptr [eax+30h]  +
test eax eax +
jl loc_103D02E  +
inc [ebp+var_4]  +
mov eax [ebp+var_10] +
mov ecx [ebp+var_4] +
add [ebp+arg_8] 10h +
cmp ecx [eax] +
jb loc_103CEBB  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
push esi  +
xor esi esi +
push edi  +
mov [ebp+var_4] 0C00000E5h +
cmp [ebp+arg_0] esi +
jz loc_103D062  +
mov esi 3D5h +
mov edi offset aValidFlagsChec +
jmp loc_103D0F8  +
cmp [ebp+arg_4] esi +
jnz loc_103D073  +
mov esi 3D6h +
mov edi offset aNotNullChec_44 +
jmp loc_103D095  +
mov ebx [ebp+arg_8] +
cmp ebx esi +
jnz loc_103D086  +
mov esi 3D7h +
mov edi offset aNotNullChec_45 +
jmp loc_103D095  +
cmp [ebp+arg_1C] esi +
jnz loc_103D09F  +
mov esi 3D8h +
mov edi offset aNotNullChec_46 +
lea ecx [ebp+var_4] +
call sub_102FD01  +
jmp loc_103D100  +
mov eax [ebx] +
lea ecx [ebp+var_24] +
push ecx  +
mov ecx ebx +
call dword ptr [eax+10h]  +
cmp eax esi +
jl loc_103D140  +
mov eax [ebp+var_1C] +
cmp eax [ebp+arg_14] +
jnz loc_103D0CD  +
push [ebp+arg_1C]  +
push ebx  +
push [ebp+arg_4]  +
push esi  +
call sub_103CE31  +
cmp eax esi +
jge loc_103D147  +
jmp loc_103D140  +
mov eax [ebx] +
lea ecx [ebp+var_14] +
push ecx  +
sub esp 10h +
mov edi esp +
lea esi [ebp+arg_C] +
movs   +
movs   +
movs   +
mov ecx ebx +
movs   +
call dword ptr [eax+30h]  +
test eax eax +
jl loc_103D140  +
cmp [ebp+var_C] 0FFFFFFFFh +
jnz loc_103D122  +
mov esi 3E6h +
mov edi offset aTheelementThee +
lea ecx [ebp+var_4] +
call sub_102FD01  +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_14] offset aDW7rtmBaseXm_1 +
mov [ebp+var_10] offset aRtlwritemicrod +
mov [ebp+var_C] esi +
mov [ebp+var_8] edi +
call sub_103D6FE  +
jmp loc_103D14A  +
push [ebp+arg_1C]  +
lea esi [ebp+var_14] +
sub esp 10h +
mov edi esp +
movs   +
movs   +
push ebx  +
push [ebp+arg_4]  +
movs   +
push 0  +
movs   +
call loc_103CB20  +
test eax eax +
jge loc_103D145  +
mov [ebp+var_4] eax +
jmp loc_103D14A  +
xor esi esi +
mov [ebp+var_4] esi +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_14] +
sub esp 58h +
push ebx  +
xor ecx ecx +
push esi  +
push edi  +
cmp eax ecx +
jz loc_103D16F  +
mov [eax] ecx +
mov eax [ebp+arg_18] +
cmp eax ecx +
jz loc_103D178  +
mov [eax] ecx +
mov ebx [ebp+arg_1C] +
cmp ebx ecx +
jz loc_103D181  +
mov [ebx] ecx +
mov ecx [ebp+arg_0] +
push 3  +
lea eax [ebp+var_58] +
mov [ebp+var_8] eax +
pop eax  +
lea edx [ebp+var_8] +
push edx  +
lea edx [ebp+var_10] +
push edx  +
sub esp 10h +
mov edi esp +
lea esi [ebp+arg_4] +
movs   +
movs   +
movs   +
mov [ebp+var_4] eax +
mov [ebp+var_C] eax +
mov eax [ecx] +
mov [ebp+var_10] offset dword_100DDB4 +
movs   +
call dword ptr [eax+4Ch]  +
test eax eax +
jl loc_103D1DA  +
mov eax [ebp+arg_14] +
test eax eax +
jz loc_103D1C3  +
mov ecx [ebp+var_50] +
mov [eax] ecx +
mov eax [ebp+arg_18] +
test eax eax +
jz loc_103D1CF  +
mov ecx [ebp+var_38] +
mov [eax] ecx +
test ebx ebx +
jz loc_103D1D8  +
mov eax [ebp+var_20] +
mov [ebx] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 0 +
mov edx [ebp+arg_0] +
mov eax [ebp+arg_4] +
push esi  +
mov esi [edx] +
mov [eax] esi +
mov [eax+4] edx +
mov esi [edx] +
mov [esi+4] eax +
mov [edx] eax +
mov [eax+8] ecx +
pop esi  +
jz loc_103D20D  +
inc dword ptr [ecx+0Ch]  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp byte ptr [esi+2E8h] 0 +
jz loc_103D23C  +
push esi  +
call sub_1041AC5  +
test eax eax +
jge loc_103D235  +
push eax  +
call ds:RtlRaiseStatus  +
mov byte ptr [esi+2E8h] 0 +
pop esi  +
retn   +
***
mov eax ecx +
xor ecx ecx +
mov [eax+8] ecx +
mov [eax] ecx +
mov [eax+4] ecx +
mov [eax+14h] ecx +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov [eax+20h] ecx +
mov [eax+24h] ecx +
mov [eax+28h] ecx +
mov [eax+2Ch] ecx +
mov [eax+30h] ecx +
mov [eax+3Ch] ecx +
lea ecx [eax+18h] +
mov [ecx+4] ecx +
mov [ecx] ecx +
lea ecx [eax+34h] +
mov [ecx+4] ecx +
mov [ecx] ecx +
retn   +
***
and dword ptr [ecx+14h] 0 +
and dword ptr [ecx+8] 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor edx edx +
push esi  +
mov esi [ebp+arg_C] +
cmp ecx [ebp+arg_4] +
jnb loc_103D2AB  +
mov eax ecx +
mov ecx [ebp+arg_4] +
mov byte ptr [esi] 1 +
jmp loc_103D2B0  +
mov eax [ebp+arg_4] +
mov [esi] dl +
cmp eax edx +
jnz loc_103D2BD  +
mov eax ecx +
mov ecx [ebp+arg_8] +
mov [ecx] dl +
jmp loc_103D2CC  +
xor edx edx +
shld edx eax +
shl eax 16h +
xor esi esi +
or eax ecx +
or edx esi +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_0] +
add eax 0FFFFFFF9h +
push 4  +
pop ecx  +
cmp ecx eax +
sbb al al +
inc al  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ecx  +
call sub_1042203  +
test eax eax +
jge locret_103D307  +
push eax  +
call ds:RtlRaiseStatus  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push 1  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
push ecx  +
call sub_104213C  +
test eax eax +
jge loc_103D331  +
push eax  +
call ds:RtlRaiseStatus  +
mov eax [ebp+var_4] +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax+0Ch] 0 +
jz loc_103D37F  +
mov edx [eax] +
test edx edx +
jz loc_103D35C  +
jmp loc_103D358  +
mov [edx+8] ecx +
mov edx [edx] +
cmp edx eax +
jnz loc_103D353  +
mov edx [eax] +
mov [ecx] edx +
mov edx [eax+4] +
mov [ecx+4] edx +
mov edx [eax] +
mov [edx+4] ecx +
mov edx [eax+4] +
mov [edx] ecx +
mov edx [eax+0Ch] +
mov [eax] eax +
mov [eax+4] eax +
mov [ecx+0Ch] edx +
and dword ptr [eax+0Ch] 0 +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push 5Ch  +
mov esi ecx +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_103D3A2  +
mov ecx eax +
call sub_103D243  +
jmp loc_103D3A4  +
xor eax eax +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push offset loc_103D280  +
push 200h  +
mov esi ecx +
push 5Ch  +
lea eax [esi+0Ch] +
push eax  +
call sub_1035616  +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor ecx ecx +
push 8  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax ecx +
jnz loc_103D408  +
xor eax eax +
jmp loc_103D40B  +
add eax 0FFFFFFF4h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
and dword ptr [esi+14h] 0 +
and dword ptr [esi+8] 0 +
test [ebp+arg_0] 1 +
jz loc_103D431  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
mov eax [eax] +
mov ecx [ecx] +
cmp eax ecx +
jnz loc_103D454  +
xor al al +
jmp loc_103D45A  +
sbb al al +
and al 0FEh +
inc al  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax] +
mov ecx [ebp+arg_4] +
cmp edx [ecx] +
ja loc_103D476  +
mov eax ecx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
cmp edx 0FFh +
ja loc_103D498  +
mov ecx [ebp+arg_0] +
and dword ptr [eax] 0 +
mov [ecx] dl +
jmp loc_103D49E  +
mov dword ptr [eax] 0C0000095h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+4] +
mov edx [eax+8] +
imul ecx ecx +
imul edx edx +
add ecx edx +
mov edx [eax] +
imul edx edx +
add ecx edx +
add ecx [eax+0Ch] +
mov eax [ebp+arg_4] +
mov [eax] ecx +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax] +
mov ecx [ebp+arg_4] +
cmp edx [ecx] +
jnz loc_103D50E  +
mov edx [eax+4] +
cmp edx [ecx+4] +
jnz loc_103D50E  +
mov edx [eax+8] +
cmp edx [ecx+8] +
jnz loc_103D50E  +
mov eax [eax+0Ch] +
cmp eax [ecx+0Ch] +
jnz loc_103D50E  +
xor eax eax +
inc eax  +
jmp loc_103D510  +
xor eax eax +
mov ecx [ebp+arg_8] +
mov [ecx] al +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
mov eax [ebp+arg_0] +
mov edx [eax] +
push esi  +
mov esi [eax+4] +
push edi  +
mov edi [ecx] +
mov [eax] edi +
mov edi [ecx+4] +
mov [eax+4] edi +
pop edi  +
mov [ecx+4] esi +
mov [ecx] edx +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
test eax eax +
jl loc_103D578  +
mov eax [ebp+arg_4] +
mov eax [eax] +
mov byte ptr [ebp+var_8] 1 +
test eax eax +
jnz loc_103D56C  +
mov byte ptr [ebp+var_8+1] al +
jmp loc_103D57F  +
setnl al  +
lea eax [eax+eax-1] +
mov byte ptr [ebp+var_8+1] al +
jmp loc_103D57F  +
mov byte ptr [ebp+var_8] 0 +
mov [ebp+var_4] eax +
mov eax [ebp+var_8] +
mov edx [ebp+var_4] +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+17C8h] +
cmp eax [ebp+arg_0] +
jz loc_103D5A9  +
push 0C00000E5h  +
call ds:RtlRaiseStatus  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push 3  +
mov esi ecx +
call sub_103D58E  +
lea eax [esi+17E8h] +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push 0Dh  +
mov esi ecx +
call sub_103D58E  +
lea eax [esi+17E8h] +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push 7  +
mov esi ecx +
call sub_103D58E  +
lea eax [esi+17E8h] +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push 8  +
mov esi ecx +
call sub_103D58E  +
lea eax [esi+17E8h] +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_103D43D  +
movsx eax al +
mov [ebp+0Ch] eax +
lea eax [ebp+0Ch] +
push eax  +
push 0  +
call sub_103D54C  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
and dword ptr [esi+8] 0 +
and dword ptr [esi] 0 +
and dword ptr [esi+4] 0 +
push edi  +
lea edi [esi+0Ch] +
mov [ebp+var_4] 1FFh +
mov ecx edi +
call sub_103D243  +
add edi 5Ch +
dec [ebp+var_4]  +
jns loc_103D65F  +
and dword ptr [esi+0B80Ch] 0 +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov ecx [ebp+arg_8] +
call sub_103D33D  +
mov eax [ebp+arg_0] +
and dword ptr [eax] 0 +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax ecx +
cmp edx eax +
jz loc_103D6C7  +
xor ecx ecx +
cmp [eax] ecx +
jz loc_103D6BD  +
cmp [eax+4] ecx +
jz loc_103D6BB  +
mov [eax+4] ecx +
mov [eax] ecx +
mov ecx [edx] +
mov [eax] ecx +
mov ecx [edx+4] +
mov [eax+4] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
lea esi [ecx+298h] +
call sub_103D463  +
push eax  +
push esi  +
call sub_103D463  +
mov eax [eax] +
mov [esi] eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ecx]  +
push [ebp+arg_0]  +
call sub_102D51F  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jz loc_103D727  +
xor eax eax +
jmp loc_103D746  +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_103D740  +
push edi  +
call sub_103D3D2  +
test eax eax +
jz loc_103D745  +
mov [esi] eax +
mov [esi+4] edi +
jmp loc_103D745  +
mov eax offset dword_100B8B4 +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push 0B810h  +
mov esi ecx +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_103D76D  +
mov ecx eax +
call sub_103D640  +
jmp loc_103D76F  +
xor eax eax +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_103D3AD  +
test [ebp+arg_0] 1 +
jz loc_103D792  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push 1  +
add eax 0Ch +
push eax  +
push ecx  +
call sub_1032AF1  +
pop ebp  +
retn 4  +
***
xor eax eax +
mov [ecx+4] eax +
mov [ecx+8] al +
cmp [ecx+0Ch] eax +
jz loc_103D7D3  +
cmp [ecx+10h] eax +
jz loc_103D7D0  +
mov [ecx+10h] eax +
mov [ecx+0Ch] eax +
mov [ecx] eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+4] 0 +
jz loc_103D7EA  +
and dword ptr [ecx+4] 0 +
mov eax [ebp+arg_0] +
mov [ecx] eax +
test eax eax +
jz loc_103D7F8  +
mov eax [eax] +
mov [ecx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_103D814  +
push 1  +
call sub_103D414  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
xor ecx ecx +
push 10h  +
pop edx  +
mov eax edi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
xor eax eax +
add ecx 4 +
setb al  +
neg eax  +
or eax ecx +
push eax  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_103D866  +
push esi  +
push offset loc_10359EF  +
push edi  +
lea esi [eax+4] +
push 10h  +
push esi  +
mov [eax] edi +
call sub_10355F1  +
mov eax esi +
pop esi  +
jmp loc_103D868  +
xor eax eax +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test [ebp+arg_0] 2 +
push esi  +
mov esi ecx +
jz loc_103D8A5  +
push edi  +
push offset loc_103AFFF  +
lea edi [esi-4] +
push dword ptr [edi]  +
push 10h  +
push esi  +
call sub_1035616  +
test [ebp+arg_0] 1 +
jz loc_103D8A0  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax edi +
pop edi  +
jmp loc_103D8BC  +
and dword ptr [esi+0Ch] 0 +
and dword ptr [esi+8] 0 +
test [ebp+arg_0] 1 +
jz loc_103D8BA  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
lea edi [ecx+14h] +
movs   +
movs   +
movs   +
movs   +
mov ax [eax] +
mov [ecx+24h] ax +
mov eax [ebp+arg_0] +
and dword ptr [eax] 0 +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov eax [eax] +
push esi  +
mov esi [ebp+arg_0] +
mov [ecx+18h] eax +
add ecx 1Ch +
push ecx  +
push [ebp+arg_8]  +
lea eax [ebp+arg_0] +
push eax  +
mov dword ptr [esi] 0C00000E5h +
call sub_103D680  +
mov eax [ebp+arg_0] +
test eax eax +
jge loc_103D924  +
mov [esi] eax +
jmp loc_103D927  +
and dword ptr [esi] 0 +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_8] +
mov [eax+0Ch] ecx +
mov ecx [ebp+arg_0] +
mov [eax+10h] ecx +
mov ecx [ebp+arg_4] +
xor edx edx +
mov [eax+14h] ecx +
lea ecx [eax+1Ch] +
mov [eax+8] edx +
mov [eax] edx +
mov [eax+4] edx +
mov [ecx+0Ch] edx +
mov [ecx] ecx +
mov [ecx+4] ecx +
mov [ecx+8] ecx +
or dword ptr [eax+18h] 0FFFFFFFFh +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
mov edx [ebp+arg_4] +
cmp ecx [edx] +
jnz loc_103D995  +
push esi  +
mov esi [eax+8] +
push edi  +
mov edi [edx+8] +
xor eax eax +
cmps   +
pop edi  +
pop esi  +
jnz loc_103D995  +
inc eax  +
jmp loc_103D997  +
xor eax eax +
mov ecx [ebp+arg_8] +
mov [ecx] al +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+arg_4] +
movzx edx word ptr [eax] +
mov eax [eax+4] +
push 0  +
push [ebp+arg_8]  +
mov [ebp+var_4] eax +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_0]  +
mov [ebp+var_8] edx +
push ecx  +
call dword ptr [ecx+0C8h]  +
test eax eax +
jge loc_103DA02  +
mov [ebp+arg_4] eax +
lea eax [ebp+var_10] +
push eax  +
lea ecx [ebp+arg_4] +
mov [ebp+var_10] offset aDW7rtmBaseXm_2 +
mov [ebp+var_C] offset aCxmlcursorComp +
mov [ebp+var_8] 102h +
mov [ebp+var_4] offset aM_state_parses +
call sub_103D6FE  +
jmp loc_103DA06  +
and [ebp+arg_4] 0 +
mov eax [ebp+arg_4] +
leave   +
retn 0Ch  +
***
mov eax ecx +
push esi  +
xor edx edx +
lea ecx [eax+18h] +
push 6  +
mov [eax+4] ecx +
mov [eax+8] edx +
mov dword ptr [eax+0Ch] 7 +
mov [eax+10h] edx +
mov dword ptr [eax+14h] 23h +
pop esi  +
mov [ecx+0Ch] edx +
mov [ecx] ecx +
mov [ecx+4] ecx +
mov [ecx+8] ecx +
add ecx 10h +
dec esi  +
jns loc_103DA34  +
pop esi  +
retn   +
***
mov eax ecx +
push esi  +
xor edx edx +
lea ecx [eax+18h] +
push 24h  +
mov [eax+4] ecx +
mov [eax+8] edx +
mov dword ptr [eax+0Ch] 25h +
mov [eax+10h] edx +
mov dword ptr [eax+14h] 0B9h +
pop esi  +
mov [ecx+0Ch] edx +
mov [ecx] ecx +
mov [ecx+4] ecx +
mov [ecx+8] ecx +
add ecx 10h +
dec esi  +
jns loc_103DA6E  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_103DA99  +
push 1  +
call sub_103D778  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ecx +
mov eax [edi] +
mov ecx [eax+4] +
mov eax [eax+0Ch] +
shl esi 4 +
shl eax 4 +
add esi ecx +
add eax ecx +
jmp loc_103DAC9  +
cmp [esi] esi +
jnz loc_103DACF  +
add esi 10h +
cmp esi eax +
jb loc_103DAC2  +
jmp loc_103DAD8  +
push esi  +
lea ecx [edi+0Ch] +
call sub_103D7DB  +
mov eax [edi] +
sub esi [eax+4] +
sar esi 4 +
mov [edi+4] esi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
mov ecx [eax+28h] +
push ebx  +
mov ebx [ebp+8] +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
add ecx ebx +
and dword ptr [esi] 0 +
lea edi [eax+34h] +
mov eax [edi] +
jmp loc_103DB5F  +
movzx edx word ptr [eax+2Ah] +
test dx dx +
jz loc_103DB4C  +
cmp dx 5 +
jz loc_103DB4C  +
cmp dx 4 +
jz loc_103DB4C  +
cmp dx 0Dh +
jz loc_103DB4C  +
cmp dx 0Eh +
jz loc_103DB4C  +
cmp dx 0Ch +
jz loc_103DB4C  +
cmp dx 1 +
jnz loc_103DB5D  +
cmp dword ptr [eax+0Ch] 0FFh +
ja near ptr dword_103DB6C  +
mov dl [eax+0Ch] +
mov [ebx] dl +
inc ebx  +
jmp loc_103DB5B  +
cmp dword ptr [eax+0Ch] 0FFh +
ja near ptr dword_103DB6C  +
mov dl [eax+0Ch] +
mov [ecx] dl +
inc ecx  +
inc dword ptr [esi]  +
mov eax [eax] +
cmp eax edi +
jnz loc_103DB0E  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
mov edx [eax+28h] +
mov ecx [ebp+8] +
push ebx  +
push esi  +
lea esi [ecx+edx*2] +
mov ebx ecx +
mov ecx [ebp+0Ch] +
and dword ptr [ecx] 0 +
lea edx [eax+34h] +
mov eax [edx] +
cmp eax edx +
jz loc_103DBF4  +
push edi  +
movzx edi word ptr [eax+2Ah] +
test di di +
jz loc_103DBD8  +
cmp di 5 +
jz loc_103DBD8  +
cmp di 4 +
jz loc_103DBD8  +
cmp di 0Dh +
jz loc_103DBD8  +
cmp di 0Eh +
jz loc_103DBD8  +
cmp di 0Ch +
jz loc_103DBD8  +
cmp di 1 +
jnz loc_103DBED  +
cmp dword ptr [eax+0Ch] 0FFFFh +
ja near ptr dword_103DBFC  +
mov di [eax+0Ch] +
mov [ebx] di +
inc ebx  +
inc ebx  +
jmp loc_103DBEA  +
cmp dword ptr [eax+0Ch] 0FFFFh +
ja near ptr dword_103DBFC  +
mov di [eax+0Ch] +
mov [esi] di +
inc esi  +
inc esi  +
add dword ptr [ecx] 2 +
mov eax [eax] +
cmp eax edx +
jnz loc_103DB97  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
mov edx [eax+28h] +
mov ecx [ebp+8] +
push ebx  +
push edi  +
lea edi [ecx+edx*4] +
mov ebx ecx +
mov ecx [ebp+0Ch] +
and dword ptr [ecx] 0 +
lea edx [eax+34h] +
mov eax [edx] +
cmp eax edx +
jz loc_103DC7A  +
push esi  +
movzx esi word ptr [eax+2Ah] +
test si si +
jz loc_103DC63  +
cmp si 5 +
jz loc_103DC63  +
cmp si 4 +
jz loc_103DC63  +
cmp si 0Dh +
jz loc_103DC63  +
cmp si 0Eh +
jz loc_103DC63  +
cmp si 0Ch +
jz loc_103DC63  +
cmp si 1 +
jnz loc_103DC73  +
mov esi [eax+0Ch] +
cmp esi 0FFFFFFFFh +
ja near ptr word_103DC82  +
mov [ebx] esi +
add ebx 4 +
jmp loc_103DC70  +
mov esi [eax+0Ch] +
cmp esi 0FFFFFFFFh +
ja near ptr word_103DC82  +
mov [edi] esi +
add edi 4 +
add dword ptr [ecx] 4 +
mov eax [eax] +
cmp eax edx +
jnz loc_103DC27  +
pop esi  +
pop edi  +
xor eax eax +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_103DC9B  +
push 3  +
call sub_103D872  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub esp 10h +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
push 5  +
mov edi ecx +
pop ecx  +
mul  ecx +
push edx  +
push eax  +
lea edx [ebp+var_10] +
lea ecx [ebp+var_C] +
mov dword ptr [ebx] 0C00000E5h +
call sub_1030723  +
mov eax [ebp+var_C] +
xor esi esi +
cmp eax esi +
jge loc_103DCDF  +
mov [ebx] eax +
jmp loc_103DD68  +
push [ebp+arg_4]  +
call sub_103D81D  +
mov [ebp+var_C] eax +
cmp eax esi +
jnz loc_103DCF6  +
mov dword ptr [ebx] 0C0000017h +
jmp loc_103DD68  +
mov [ebp+var_8] esi +
cmp [edi+0Ch] esi +
jz loc_103DD43  +
mov [ebp+var_4] esi +
mov esi [edi+4] +
add esi [ebp+var_4] +
cmp [esi] esi +
jz loc_103DD34  +
mov ecx esi +
call sub_103AFD7  +
mov ebx eax +
mov eax [ebx+10h] +
xor edx edx +
div  [ebp+arg_4] +
push 1  +
push ebx  +
mov ecx edx +
shl ecx 4 +
add ecx [ebp+var_C] +
push ecx  +
call sub_1032AF1  +
cmp [esi] esi +
jnz loc_103DD0B  +
mov ebx [ebp+arg_0] +
inc [ebp+var_8]  +
mov eax [ebp+var_8] +
add [ebp+var_4] 10h +
cmp eax [edi+0Ch] +
jnz loc_103DD01  +
mov eax [edi+4] +
lea ecx [edi+18h] +
cmp ecx eax +
jz loc_103DD53  +
push eax  +
call sub_103DC88  +
mov eax [ebp+var_C] +
and dword ptr [ebx] 0 +
mov [edi+4] eax +
mov eax [ebp+arg_4] +
mov [edi+0Ch] eax +
mov eax [ebp+var_10] +
mov [edi+14h] eax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+10h] +
push esi  +
mov esi [ebp+arg_0] +
mov dword ptr [esi] 0C00000E5h +
mov byte ptr [ebp+arg_0+3] 0 +
cmp eax [ebp+arg_8] +
jnz loc_103DDA9  +
lea eax [ebp+arg_0+3] +
push eax  +
add ecx 14h +
push ecx  +
push [ebp+arg_4]  +
call sub_103D4E0  +
test eax eax +
jge loc_103DDA9  +
mov [esi] eax +
jmp loc_103DDB4  +
mov eax [ebp+arg_C] +
mov cl byte ptr [ebp+arg_0+3] +
and dword ptr [esi] 0 +
mov [eax] cl +
mov eax esi +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi [ecx+10h] +
xor dl dl +
mov dword ptr [eax] 0C00000E5h +
cmp esi [ebp+arg_8] +
jnz loc_103DDEC  +
mov esi [ecx+14h] +
cmp esi [ebp+arg_C] +
jnz loc_103DDEC  +
mov edx [ebp+arg_4] +
mov edx [edx] +
cmp edx [ecx+18h] +
setz dl  +
mov ecx [ebp+arg_10] +
and dword ptr [eax] 0 +
mov [ecx] dl +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
push edi  +
mov dword ptr [eax] 0C00000E5h +
jmp loc_103DE3C  +
mov esi [ebp+arg_4] +
jmp loc_103DE29  +
push edi  +
push esi  +
call [ebp+arg_C]  +
test al al +
jz loc_103DE51  +
shr eax 8 +
test al al +
jl loc_103DE2B  +
mov edi esi +
add esi 8 +
cmp esi ebx +
jbe loc_103DE19  +
push ebx  +
push edi  +
call sub_103D520  +
sub ebx 8 +
cmp ebx [ebp+arg_4] +
ja loc_103DE14  +
mov eax [ebp+arg_0] +
and dword ptr [eax] 0 +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 14h  +
mov eax [ebp+arg_0] +
mov [eax] edx +
jmp loc_103DE47  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 30h  +
mov esi ecx +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_103DE87  +
mov ecx [ebp+arg_4] +
push dword ptr [ecx]  +
mov edx [ebp+arg_0] +
push dword ptr [edx+4]  +
mov ecx eax +
push dword ptr [edx]  +
call sub_103D933  +
jmp loc_103DE89  +
xor eax eax +
mov [esi] eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
xor ecx ecx +
mov [eax+8] ecx +
mov [eax] ecx +
mov [eax+4] ecx +
mov ecx [ebp+arg_4] +
mov [eax+0Ch] ecx +
mov ecx [ebp+arg_0] +
mov [eax+10h] ecx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
mov esi ecx +
cmp byte ptr [esi+5D4h] 0 +
jz loc_103DF0F  +
push esi  +
call sub_104226D  +
test eax eax +
jge loc_103DF08  +
mov esi eax +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-4] +
mov [ebp-4] esi +
mov dword ptr [ebp-14h] offset aDW7rtmBaseXm_2 +
mov dword ptr [ebp-10h] offset aCxmllogicalsta +
mov dword ptr [ebp-0Ch] 9Dh +
mov dword ptr [ebp-8] offset aRtlxmldestroyn +
call sub_103D6FE  +
jmp loc_103DF11  +
mov byte ptr [esi+5D4h] 0 +
xor esi esi +
test esi esi +
jge loc_103DF1C  +
push esi  +
call ds:RtlRaiseStatus  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+8C4h] +
call sub_103D2F4  +
lea ecx [esi+5D8h] +
call sub_103D216  +
mov ecx esi +
pop esi  +
jmp loc_103DEBB  +
***
mov edi edi +
push ecx  +
call sub_103DA86  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
mov ebx [ebp+arg_0] +
mov edx [ebx+8] +
mov eax [ebx] +
push esi  +
mov esi [ebx+4] +
add esi edx +
add eax edx +
mov edx [ecx+298h] +
push edi  +
lea edi [ecx+284h] +
mov [ebp+var_4] esi +
mov [ebp+var_1C] edi +
cmp edx 0FFh +
ja loc_103DF9D  +
xor edx edx +
mov [ebp+arg_0] 3 +
inc edx  +
jmp loc_103DFBA  +
cmp edx 0FFFFh +
ja loc_103DFB0  +
mov [ebp+arg_0] 6 +
push 2  +
jmp loc_103DFB9  +
mov [ebp+arg_0] 0Ch +
push 3  +
pop edx  +
sub esi eax +
cmp esi 0Ch +
jnb loc_103DFC2  +
int 3  +
mov dword ptr [eax] 634C644Dh +
mov [eax+4] edx +
mov ecx [ecx+290h] +
mov [eax+8] ecx +
lea esi [eax+0Fh] +
and esi 0FFFFFFFCh +
mov edi [edi] +
test edi edi +
jz loc_103E0B8  +
cmp edi [ebp+var_1C] +
jz loc_103E0B8  +
movzx eax word ptr [edi+42h] +
cmp eax 0Eh +
ja loc_103DFC1  +
movzx eax ds:byte_103E0D9[eax] +
jmp ds:off_103E0D1[eax*4]  +
cmp [ebp+arg_0] 3 +
jz loc_103E075  +
cmp [ebp+arg_0] 6 +
jz loc_103E034  +
cmp [ebp+arg_0] 0Ch +
jnz loc_103DFDA  +
mov eax [ebp+var_4] +
sub eax esi +
cmp eax 0Ch +
jb loc_103DFC1  +
mov eax [edi+30h] +
mov [esi+4] eax +
mov eax [edi+2Ch] +
and dword ptr [esi+8] 0 +
mov [esi] eax +
add esi 0Fh +
jmp loc_103DFD7  +
mov eax [ebp+var_4] +
sub eax esi +
cmp eax 6 +
jb loc_103DFC1  +
mov edx [edi+30h] +
lea eax [esi+2] +
push eax  +
lea ecx [ebp+var_8] +
call sub_1032412  +
mov eax [ebp+var_8] +
test eax eax +
jl loc_103E0C8  +
mov edx [edi+2Ch] +
push esi  +
lea ecx [ebp+var_C] +
call sub_1032412  +
mov eax [ebp+var_C] +
test eax eax +
jl loc_103E0C8  +
xor eax eax +
mov [esi+4] ax +
add esi 9 +
jmp loc_103DFD7  +
mov eax [ebp+var_4] +
sub eax esi +
cmp eax 3 +
jb loc_103DFC1  +
mov edx [edi+30h] +
lea eax [esi+1] +
push eax  +
lea ecx [ebp+var_10] +
call sub_103D47F  +
mov eax [ebp+var_10] +
test eax eax +
jl loc_103E0C8  +
mov edx [edi+2Ch] +
push esi  +
lea ecx [ebp+var_14] +
call sub_103D47F  +
mov eax [ebp+var_14] +
test eax eax +
jl loc_103E0C8  +
mov byte ptr [esi+2] 0 +
add esi 6 +
jmp loc_103DFD7  +
sub esi [ebx+8] +
mov [ebx] esi +
cmp esi [ebx+4] +
ja loc_103DFC1  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
mov ebx [ebp+arg_0] +
mov eax [ebx+4] +
mov edx [ebx+8] +
push esi  +
mov esi [ebx] +
push edi  +
xor edi edi +
sub eax esi +
add ecx 284h +
add edx esi +
mov [ebp+var_C] edi +
mov [ebp+var_28] ecx +
mov [ebp+var_24] edi +
mov [ebp+var_18] edx +
mov [ebp+var_14] edi +
mov [ebp+var_10] edi +
mov [ebp+var_1] 0 +
cmp eax 8 +
jnb loc_103E12B  +
int 3  +
sub eax 8 +
mov dword ptr [edx] 7444644Dh +
mov edi [ecx] +
lea esi [edx+8] +
mov [ebp+var_8] eax +
mov [ebp+var_24] edi +
test edi edi +
jz loc_103E3F2  +
cmp edi [ebp+var_28] +
jz loc_103E15E  +
movzx eax word ptr [edi+42h] +
push eax  +
call sub_103D2D6  +
test al al +
jnz loc_103E15E  +
mov edi [edi] +
jmp loc_103E13C  +
test edi edi +
jz loc_103E3F2  +
cmp edi [ebp+var_28] +
jz loc_103E3F2  +
movzx eax word ptr [edi+42h] +
and [ebp+var_20] 0 +
xor ebx ebx +
sub eax 7 +
mov [ebp+var_1C] ebx +
jz loc_103E375  +
dec eax  +
jz loc_103E340  +
dec eax  +
jz loc_103E226  +
dec eax  +
jz loc_103E1A6  +
dec eax  +
jnz loc_103E3EF  +
mov [ebp+var_1] 1 +
jmp loc_103E3E2  +
cmp [ebp+var_1] 0 +
jnz loc_103E3E2  +
cmp [ebp+var_8] 10h +
jb loc_103E12A  +
mov ecx [esi] +
and ecx 0FFFFFF02h +
or ecx 2 +
mov [esi] ecx +
mov eax [edi+4Ch] +
shl eax 8 +
xor eax ecx +
and eax 0F00h +
xor eax ecx +
mov [esi] eax +
mov ecx [edi+50h] +
shl ecx 0Ch +
xor ecx eax +
and ecx 0F000h +
xor ecx eax +
mov [esi] ecx +
mov eax [edi+48h] +
mov [esi+8] eax +
mov eax [edi+44h] +
mov [esi+4] eax +
mov eax ecx +
shr eax 0Ch +
and eax 0Fh +
cmp eax 2 +
jz loc_103E20E  +
cmp eax 3 +
jz loc_103E20E  +
or dword ptr [esi+0Ch] 0FFFFFFFFh +
jmp loc_103E214  +
mov eax [edi+54h] +
mov [esi+0Ch] eax +
inc [ebp+var_10]  +
sub [ebp+var_8] 18h +
add esi 10h +
inc [ebp+var_C]  +
jmp loc_103E3E2  +
cmp [ebp+var_14] 0 +
jz loc_103E12A  +
lea eax [ebp+var_28] +
push eax  +
lea ecx [ebp+var_20] +
call sub_103D69F  +
mov ebx [ebp+var_1C] +
test ebx ebx +
jz loc_103E321  +
cmp ebx [ebp+var_20] +
jz loc_103E321  +
movzx eax word ptr [ebx+42h] +
cmp eax 7 +
jz loc_103E26D  +
cmp eax 8 +
jz loc_103E271  +
jle loc_103E321  +
cmp eax 0Bh +
jg loc_103E321  +
mov ebx [ebx] +
jmp loc_103E23F  +
mov ecx [ebx+48h] +
mov eax [ebp+var_14] +
cmp ecx [eax+8] +
jnz loc_103E26D  +
mov ecx [ebx+44h] +
cmp ecx [eax+4] +
jnz loc_103E26D  +
push 0Bh  +
pop eax  +
mov [ebx+42h] ax +
mov ebx [ebx] +
mov eax ebx +
sub eax [ebp+var_20] +
neg eax  +
sbb eax eax +
and eax ebx +
cmp word ptr [eax+42h] 0Ah +
jnz loc_103E26D  +
cmp [ebp+var_8] 10h +
jb loc_103E12A  +
mov edx [esi] +
mov eax ebx +
sub eax [ebp+var_20] +
neg eax  +
sbb eax eax +
and edx 0FFFFFF02h +
or edx 2 +
mov [esi] edx +
and eax ebx +
mov ecx [eax+4Ch] +
shl ecx 8 +
xor ecx edx +
and ecx 0F00h +
xor ecx edx +
mov [esi] ecx +
mov edx [eax+50h] +
shl edx 0Ch +
xor edx ecx +
and edx 0F000h +
xor edx ecx +
mov [esi] edx +
mov ecx [eax+48h] +
mov [esi+8] ecx +
mov ecx [eax+44h] +
mov [esi+4] ecx +
mov ecx edx +
shr ecx 0Ch +
and ecx 0Fh +
cmp ecx 2 +
jz loc_103E309  +
cmp ecx 3 +
jz loc_103E309  +
or dword ptr [esi+0Ch] 0FFFFFFFFh +
jmp loc_103E30F  +
mov eax [eax+54h] +
mov [esi+0Ch] eax +
inc [ebp+var_10]  +
sub [ebp+var_8] 18h +
add esi 10h +
inc [ebp+var_C]  +
jmp loc_103E28B  +
cmp [ebp+var_1] 0 +
mov edx [ebp+var_18] +
jnz loc_103E3DA  +
mov eax [ebp+var_10] +
mov ecx [ebp+var_14] +
and [ebp+var_10] 0 +
mov [ecx+0Ch] eax +
jmp loc_103E3DA  +
cmp [ebp+var_8] 10h +
mov [ebp+var_14] esi +
jb loc_103E12A  +
mov eax [esi] +
sub [ebp+var_8] 18h +
and eax 0FFFFFF01h +
or eax 1 +
mov [esi] eax +
mov eax [edi+48h] +
mov [esi+8] eax +
mov eax [edi+44h] +
mov [esi+4] eax +
add esi 10h +
inc [ebp+var_C]  +
mov [ebp+var_1] 0 +
jmp loc_103E3E2  +
cmp [ebp+var_8] 18h +
jb loc_103E12A  +
and dword ptr [esi] 0FFFFFFF0h +
mov ecx [edi+44h] +
mov eax [esi] +
mov [esi+4] ecx +
mov ecx [edi+4Ch] +
mov [esi+8] ecx +
mov ecx [edi+50h] +
mov [esi+10h] ecx +
mov ecx [edi+54h] +
mov [esi+0Ch] ecx +
mov ecx [edi+58h] +
mov [esi+14h] ecx +
cmp word ptr [edi+48h] 0 +
jnz loc_103E3B2  +
and eax 0FFFFFF0Fh +
mov [esi] eax +
jmp loc_103E3D0  +
and eax 0FFFFFF1Fh +
or eax 10h +
mov [esi] eax +
cmp dword ptr [edi+50h] 0FFFFFFFFh +
jz loc_103E3C7  +
or eax 20h +
mov [esi] eax +
cmp dword ptr [edi+58h] 0FFFFFFFFh +
jz loc_103E3D0  +
or dword ptr [esi] 40h +
sub [ebp+var_8] 18h +
add esi 18h +
inc [ebp+var_C]  +
test ebx ebx +
jz loc_103E3E2  +
and [ebp+var_1C] 0 +
mov edi [edi] +
mov ebx [ebp+arg_0] +
mov [ebp+var_24] edi +
jmp loc_103E15E  +
mov ebx [ebp+arg_0] +
mov eax [ebp+var_C] +
mov [edx+4] eax +
sub esi [ebx+8] +
pop edi  +
mov [ebx] esi +
pop esi  +
xor eax eax +
pop ebx  +
leave   +
retn 4  +
***
xor edx edx +
cmp [ecx+0Ch] edx +
jz locret_103E447  +
cmp [ecx+8] dl +
jnz loc_103E41F  +
mov eax [ecx+10h] +
mov eax [eax] +
mov [ecx+10h] eax +
mov [ecx+8] dl +
mov eax [ecx+10h] +
cmp eax edx +
jz loc_103E42E  +
cmp eax [ecx+0Ch] +
jnz locret_103E447  +
cmp [ecx+0Ch] edx +
jz loc_103E43D  +
cmp eax edx +
jz loc_103E43A  +
mov [ecx+10h] edx +
mov [ecx+0Ch] edx +
mov eax [ecx+4] +
inc eax  +
push eax  +
call sub_103DAA2  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
test edi edi +
jnz loc_103E464  +
mov eax 0C000000Dh +
jmp loc_103E4AB  +
lea eax [esi+18h] +
cmp [esi+4] eax +
jz loc_103E474  +
int 3  +
mov eax 0C00000E5h +
jmp loc_103E4AB  +
cmp edi 7 +
jbe loc_103E490  +
push edi  +
call sub_103D81D  +
mov [esi+4] eax +
test eax eax +
jnz loc_103E48D  +
mov eax 0C0000017h +
jmp loc_103E4AB  +
mov [esi+0Ch] edi +
lea eax [esi+14h] +
push eax  +
push 5  +
push dword ptr [esi+0Ch]  +
lea eax [ebp+arg_0] +
push eax  +
call sub_1030750  +
mov eax [ebp+arg_0] +
test eax eax +
jl loc_103E4AB  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
and dword ptr [esi+8] 0 +
test [ebp+arg_0] 1 +
jz loc_103E4CF  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
lea eax [esi+1Ch] +
xor ecx ecx +
test [ebp+arg_0] 1 +
mov [eax] eax +
mov [eax+4] eax +
mov [eax+0Ch] ecx +
mov [eax+8] ecx +
mov [esi+8] ecx +
jz loc_103E503  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_C] +
and dword ptr [eax] 0 +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov ebx ecx +
mov esi [ebx] +
mov dword ptr [edi] 0C00000E5h +
mov byte ptr [ebp+arg_0+3] 0 +
test esi esi +
jz loc_103E569  +
cmp esi ebx +
jz loc_103E569  +
lea eax [ebp+arg_0+3] +
push eax  +
push [ebp+arg_8]  +
lea eax [ebp+var_4] +
push [ebp+arg_4]  +
mov ecx esi +
push eax  +
call sub_103DD76  +
mov eax [ebp+var_4] +
test eax eax +
jl loc_103E55D  +
cmp byte ptr [ebp+arg_0+3] 0 +
jnz loc_103E561  +
mov esi [esi] +
jmp loc_103E52F  +
mov [edi] eax +
jmp loc_103E56C  +
mov eax [ebp+arg_C] +
add esi 24h +
mov [eax] esi +
and dword ptr [edi] 0 +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_10] +
and dword ptr [eax] 0 +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov ebx ecx +
mov esi [ebx] +
mov dword ptr [edi] 0C00000E5h +
mov byte ptr [ebp+arg_0+3] 0 +
test esi esi +
jz loc_103E5D7  +
cmp esi ebx +
jz loc_103E5D7  +
lea eax [ebp+arg_0+3] +
push eax  +
push [ebp+arg_C]  +
lea eax [ebp+var_4] +
push [ebp+arg_8]  +
mov ecx esi +
push [ebp+arg_4]  +
push eax  +
call sub_103DDC0  +
mov eax [ebp+var_4] +
test eax eax +
jl loc_103E5CB  +
cmp byte ptr [ebp+arg_0+3] 0 +
jnz loc_103E5CF  +
mov esi [esi] +
jmp loc_103E59A  +
mov [edi] eax +
jmp loc_103E5DA  +
mov eax [ebp+arg_10] +
add esi 1Ch +
mov [eax] esi +
and dword ptr [edi] 0 +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
lea eax [ebp+var_8] +
push eax  +
mov esi ecx +
push dword ptr [esi+10h]  +
lea eax [ebp+var_4] +
push eax  +
call sub_103B1A5  +
mov ecx [ebp+var_4] +
test ecx ecx +
jl loc_103E626  +
mov eax [ebp+var_8] +
cmp eax [esi+10h] +
jz loc_103E624  +
push eax  +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
call sub_103DCA4  +
mov ecx [ebp+var_8] +
test ecx ecx +
jl loc_103E626  +
xor ecx ecx +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+10h] +
push esi  +
mov esi [ebp+arg_0] +
mov dword ptr [esi] 0C00000E5h +
mov byte ptr [ebp+arg_0+3] 0 +
cmp eax [ebp+arg_8] +
jnz loc_103E670  +
mov eax [ecx+14h] +
cmp eax [ebp+arg_C] +
jnz loc_103E670  +
lea eax [ebp+arg_0+3] +
push eax  +
add ecx 18h +
push ecx  +
push [ebp+arg_4]  +
call sub_103D971  +
test eax eax +
jge loc_103E670  +
mov [esi] eax +
jmp loc_103E67B  +
mov eax [ebp+arg_10] +
mov cl byte ptr [ebp+arg_0+3] +
and dword ptr [esi] 0 +
mov [eax] cl +
mov eax esi +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0F8h +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_8] +
push ebx  +
mov [ebp+var_4] eax +
push esi  +
lea eax [eax+ecx*8-8] +
push edi  +
mov [ebp+arg_8] eax +
cmp ecx 1 +
jbe loc_103E87B  +
and [ebp+arg_4] 0 +
mov edi [ebp+arg_8] +
mov ebx [ebp+var_4] +
mov eax edi +
sub eax ebx +
sar eax 3 +
inc eax  +
cmp eax 8 +
ja loc_103E708  +
push [ebp+arg_10]  +
lea eax [ebp+var_8] +
push [ebp+arg_C]  +
push edi  +
push ebx  +
push eax  +
call sub_103DDFE  +
mov ecx [ebp+var_8] +
test ecx ecx +
jl loc_103E87D  +
mov eax [ebp+arg_4] +
dec [ebp+arg_4]  +
test eax eax +
jbe loc_103E87B  +
mov eax [ebp+arg_4] +
shl eax 2 +
mov ecx [ebp+eax+var_80] +
mov eax [ebp+eax+var_F8] +
mov [ebp+var_4] ecx +
mov [ebp+arg_8] eax +
jmp loc_103E6B2  +
shr eax 1 +
lea esi [ebx+eax*8] +
push esi  +
push ebx  +
call [ebp+arg_C]  +
test al al +
jz loc_103E877  +
shr eax 8 +
test al al +
jle loc_103E728  +
push esi  +
push ebx  +
call sub_103D520  +
push edi  +
push ebx  +
call [ebp+arg_C]  +
test al al +
jz loc_103E877  +
shr eax 8 +
test al al +
jle loc_103E743  +
push edi  +
push ebx  +
call sub_103D520  +
push edi  +
push esi  +
call [ebp+arg_C]  +
test al al +
jz loc_103E877  +
shr eax 8 +
test al al +
jle loc_103E75E  +
push edi  +
push esi  +
call sub_103D520  +
cmp esi ebx +
jbe loc_103E783  +
push esi  +
add ebx 8 +
push ebx  +
call [ebp+arg_C]  +
mov ecx edx +
test al al +
jz loc_103E87D  +
cmp ebx esi +
jnb loc_103E783  +
shr eax 8 +
test al al +
jle loc_103E762  +
cmp esi ebx +
ja loc_103E7A1  +
push esi  +
add ebx 8 +
push ebx  +
call [ebp+arg_C]  +
mov ecx edx +
test al al +
jz loc_103E87D  +
cmp ebx [ebp+arg_8] +
jnb loc_103E7A1  +
shr eax 8 +
test al al +
jle loc_103E783  +
push esi  +
sub edi 8 +
push edi  +
call [ebp+arg_C]  +
mov ecx edx +
test al al +
jz loc_103E87D  +
cmp edi esi +
jbe loc_103E7BE  +
shr eax 8 +
test al al +
jg loc_103E7A1  +
cmp edi ebx +
jb loc_103E7D1  +
push edi  +
push ebx  +
call sub_103D520  +
cmp esi edi +
jnz loc_103E75E  +
mov esi ebx +
jmp loc_103E75E  +
add edi 8 +
cmp esi edi +
jnb loc_103E7F7  +
push esi  +
sub edi 8 +
push edi  +
call [ebp+arg_C]  +
test al al +
jz loc_103E877  +
cmp edi esi +
jbe loc_103E7F7  +
shr eax 8 +
test al al +
jz loc_103E7D8  +
cmp esi edi +
jb loc_103E80F  +
push esi  +
sub edi 8 +
push edi  +
call [ebp+arg_C]  +
test al al +
jz loc_103E877  +
cmp edi [ebp+var_4] +
jbe loc_103E80F  +
shr eax 8 +
test al al +
jz loc_103E7F7  +
mov eax [ebp+arg_8] +
mov ecx [ebp+var_4] +
mov edx eax +
mov esi edi +
sub edx ebx +
sub esi ecx +
and edx 0FFFFFFF8h +
and esi 0FFFFFFF8h +
cmp esi edx +
jl loc_103E84F  +
cmp ecx edi +
jnb loc_103E83F  +
mov edx [ebp+arg_4] +
shl edx 2 +
inc [ebp+arg_4]  +
mov [ebp+edx+var_80] ecx +
mov [ebp+edx+var_F8] edi +
cmp ebx eax +
jnb loc_103E6E1  +
mov [ebp+var_4] ebx +
jmp loc_103E6B2  +
cmp ebx eax +
jnb loc_103E867  +
mov edx [ebp+arg_4] +
shl edx 2 +
inc [ebp+arg_4]  +
mov [ebp+edx+var_80] ebx +
mov [ebp+edx+var_F8] eax +
cmp ecx edi +
jnb loc_103E6E1  +
mov [ebp+arg_8] edi +
jmp loc_103E6B2  +
mov ecx edx +
jmp loc_103E87D  +
xor ecx ecx +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
mov [eax] ecx +
pop ebx  +
leave   +
retn 14h  +
***
mov eax ecx +
mov ecx [eax] +
test ecx ecx +
jz locret_103E8A4  +
and dword ptr [eax] 0 +
test ecx ecx +
jz locret_103E8A4  +
push 1  +
call sub_103E4DB  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 28h  +
mov esi ecx +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_103E8D1  +
mov ecx [ebp+arg_4] +
push dword ptr [ecx]  +
mov ecx [ebp+arg_0] +
push dword ptr [ecx]  +
mov ecx eax +
call sub_103DE95  +
jmp loc_103E8D3  +
xor eax eax +
mov [esi] eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
push edi  +
xor esi esi +
mov edi ecx +
mov ecx [ebp+arg_0] +
lea edx [ebp+var_C] +
mov [ebp+var_C] esi +
mov [ebp+var_8] esi +
mov [ebp+var_4] esi +
call sub_102FFAF  +
cmp eax esi +
jge loc_103E917  +
mov esi eax +
lea ecx [ebp+var_C] +
call sub_1032B6D  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
push edi  +
lea ecx [ebp+var_C] +
call sub_1035D7C  +
jmp loc_103E907  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push 7  +
add ecx 29Ch +
call sub_103E44D  +
test eax eax +
jge loc_103E96D  +
mov [ebp+var_4] eax +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_14] offset aDW7rtmBaseXm_3 +
mov [ebp+var_10] offset aCmicrodombuild +
mov [ebp+var_C] 302h +
mov [ebp+var_8] offset aM_attdeflistta +
call sub_103D6FE  +
jmp loc_103E971  +
and [ebp+var_4] 0 +
mov eax [ebp+var_4] +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1044365  +
mov eax [ebp+arg_0] +
and dword ptr [esi+1874h] 0 +
mov [esi+186Ch] eax +
mov byte ptr [esi+1870h] 0 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
sub esp 0B8h +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
push 26h  +
lea esi [eax+17C8h] +
pop ecx  +
lea edi [ebp+var_B8] +
movs   +
xor esi esi +
cmp [ebx+1874h] esi +
jz loc_103EA46  +
mov [ebp+var_C] esi +
mov [ebp+var_8] esi +
mov [ebp+var_4] esi +
cmp [ebp+var_94] esi +
jz loc_103EA19  +
lea esi [ebp+var_98] +
lea edi [ebp+var_20] +
movs   +
movs   +
lea ecx [ebp+var_C] +
push ecx  +
movs   +
lea ecx [ebp+var_20] +
push ecx  +
mov ecx eax +
movs   +
call sub_1044419  +
test eax eax +
jge loc_103EA17  +
lea ecx [ebp+var_C] +
mov [ebp+arg_0] eax +
call sub_1032B6D  +
jmp loc_103EA71  +
xor esi esi +
mov ecx [ebx+1874h] +
mov eax [ecx] +
lea edx [ebp+var_C] +
push edx  +
push 0C000A083h  +
push [ebp+var_8C]  +
push [ebp+var_84]  +
push [ebp+var_88]  +
call dword ptr [eax]  +
lea ecx [ebp+var_C] +
call sub_1032B6D  +
lea eax [ebp+var_10] +
push eax  +
lea ecx [ebp+arg_0] +
mov [ebp+arg_0] 0C000A083h +
mov [ebp+var_10] offset aDW7rtmBaseXm_3 +
mov [ebp+var_C] offset aCmicrodomxmlwa +
mov [ebp+var_8] 38Eh +
mov [ebp+var_4] esi +
call sub_103D6FE  +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ecx+298h] +
push esi  +
xor esi esi +
mov [ebp+var_4] esi +
cmp eax 0FFh +
ja loc_103EA9F  +
push 3  +
pop eax  +
jmp loc_103EAAE  +
mov edx 0FFFFh +
cmp edx eax +
sbb eax eax +
and eax 6 +
add eax 6 +
lea edx [ebp+var_4] +
push edx  +
push dword ptr [ecx+290h]  +
add eax 3 +
and eax 0FFFFFFFCh +
push eax  +
lea eax [ebp+var_8] +
push eax  +
call sub_1030750  +
cmp [ebp+var_8] esi +
jl loc_103EADE  +
mov ecx [ebp+var_4] +
lea eax [ecx+0Ch] +
cmp eax ecx +
jb loc_103EADE  +
cmp eax 0Ch +
jb loc_103EADE  +
mov esi eax +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
mov eax [ecx+294h] +
and [ebp+var_14] 0 +
mov [ebp+var_10] ecx +
mov [ebp+var_18] 0C00000E5h +
mov [ebp+var_C] 14h +
cmp eax 0FFh +
ja loc_103EB1B  +
mov [ebp+var_8] 1 +
jmp loc_103EB2C  +
mov edx 0FFFFh +
cmp edx eax +
sbb eax eax +
and eax 2 +
inc eax  +
inc eax  +
mov [ebp+var_8] eax +
push ebx  +
mov ebx [ecx+284h] +
push esi  +
push edi  +
test ebx ebx +
jz loc_103EC1B  +
lea eax [ecx+284h] +
cmp ebx eax +
jz loc_103EC1B  +
movzx eax word ptr [ebx+42h] +
xor esi esi +
test ax ax +
jnz loc_103EB91  +
mov eax [ebx+28h] +
mov edi [ebx+3Ch] +
push 18h  +
pop esi  +
lea edx [ebp-1] +
push edx  +
lea edx [ebp-2] +
push edx  +
mov edx edi +
sub edx eax +
push edx  +
push eax  +
call sub_103D28E  +
test edx edx +
ja loc_103EB7D  +
cmp eax 400000h +
jb loc_103EB80  +
push 1Ch  +
pop esi  +
imul edi [ebp+var_8] +
mov ecx [ebp+var_10] +
add edi 3 +
and edi 0FFFFFFFCh +
add esi edi +
jmp loc_103EBD2  +
cmp ax 0Eh +
jnz loc_103EBA9  +
mov esi [ebx+3Ch] +
imul esi [ebp+var_8] +
add esi 3 +
and esi 0FFFFFFFCh +
add esi 4 +
jmp loc_103EBD2  +
cmp ax 1 +
jnz loc_103EBB3  +
push 14h  +
jmp loc_103EBD1  +
cmp ax 4 +
jz loc_103EBCF  +
cmp ax 5 +
jz loc_103EBCF  +
cmp ax 0Ch +
jnz loc_103EBC9  +
push 0Ch  +
jmp loc_103EBD1  +
cmp ax 0Dh +
jnz loc_103EBD2  +
push 8  +
pop esi  +
mov edx [ebp+var_C] +
lea eax [esi+edx] +
cmp eax edx +
jb loc_103EBEA  +
cmp eax esi +
jb loc_103EBEA  +
mov ebx [ebx] +
mov [ebp+var_C] eax +
jmp loc_103EB35  +
lea eax [ebp+var_28] +
push eax  +
lea ecx [ebp+var_18] +
mov [ebp+var_18] 0C0000095h +
mov [ebp+var_28] offset aDW7rtmBaseXm_3 +
mov [ebp+var_24] offset aCmicrodombui_0 +
mov [ebp+var_20] 95Bh +
mov [ebp+var_1C] offset aBuclRtlAddCbre +
call sub_103D6FE  +
jmp loc_103EC21  +
mov eax [ebp+var_C] +
mov [ebp+var_14] eax +
mov eax [ebp+var_14] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push 7  +
call sub_103E44D  +
test eax eax +
jge loc_103EC6E  +
mov [ebp+var_4] eax +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_14] offset aDW7rtmBaseXm_3 +
mov [ebp+var_10] offset aCmicrodombui_1 +
mov [ebp+var_C] 0ADh +
mov [ebp+var_8] offset aM_storedtable_ +
call sub_103D6FE  +
jmp loc_103EC72  +
and [ebp+var_4] 0 +
mov eax [ebp+var_4] +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push 7  +
call sub_103E44D  +
test eax eax +
jge loc_103ECBC  +
mov [ebp+var_4] eax +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_14] offset aDW7rtmBaseXm_3 +
mov [ebp+var_10] offset aCmicrodombui_2 +
mov [ebp+var_C] 0ADh +
mov [ebp+var_8] offset aM_storedtable_ +
call sub_103D6FE  +
jmp loc_103ECC0  +
and [ebp+var_4] 0 +
mov eax [ebp+var_4] +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi+0Ch] 0 +
jz loc_103ECDD  +
call sub_103D7BB  +
mov eax [ebp+arg_0] +
push 0  +
mov ecx esi +
mov [esi] eax +
call sub_103DAA2  +
mov byte ptr [esi+8] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
test ecx ecx +
jz loc_103ED0C  +
push 1  +
call sub_103E4B6  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
test ecx ecx +
jz loc_103ED28  +
push 1  +
call sub_103E4DB  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+18h] +
call sub_1032B6D  +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
and dword ptr [edi] 0 +
lea eax [ebp+arg_4] +
push eax  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_103D4A7  +
test eax eax +
jl loc_103ED8F  +
mov eax [ebp+arg_4] +
push edi  +
push eax  +
xor edx edx +
div  dword ptr [esi+0Ch] +
push [ebp+arg_0]  +
lea ecx [ebp+arg_0] +
push ecx  +
mov ecx edx +
shl ecx 4 +
add ecx [esi+4] +
call sub_103E50F  +
mov eax [ebp+arg_0] +
test eax eax +
jl loc_103ED8F  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push esi  +
push edi  +
mov esi ecx +
mov ecx [ebp+arg_4] +
push ecx  +
xor edi edi +
push edi  +
mov [ecx] edi +
mov eax [edx] +
push eax  +
push edx  +
lea ecx [ebp+arg_4] +
push ecx  +
push edi  +
push dword ptr [esi+0Ch]  +
push edi  +
push eax  +
call __aullrem  +
mov ecx eax +
shl ecx 4 +
add ecx [esi+4] +
call sub_103E57A  +
mov eax [ebp+arg_4] +
cmp eax edi +
jl loc_103EDD8  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_10] +
and dword ptr [eax] 0 +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov ebx ecx +
mov esi [ebx] +
mov dword ptr [edi] 0C00000E5h +
mov byte ptr [ebp+arg_0+3] 0 +
test esi esi +
jz loc_103EE40  +
cmp esi ebx +
jz loc_103EE40  +
lea eax [ebp+arg_0+3] +
push eax  +
push [ebp+arg_C]  +
lea eax [ebp+var_4] +
push [ebp+arg_8]  +
mov ecx esi +
push [ebp+arg_4]  +
push eax  +
call sub_103E635  +
mov eax [ebp+var_4] +
test eax eax +
jl loc_103EE34  +
cmp byte ptr [ebp+arg_0+3] 0 +
jnz loc_103EE38  +
mov esi [esi] +
jmp loc_103EE03  +
mov [edi] eax +
jmp loc_103EE43  +
mov eax [ebp+arg_10] +
add esi 24h +
mov [eax] esi +
and dword ptr [edi] 0 +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
and [ebp+arg_0] 0 +
push edi  +
mov edi [ebp+arg_10] +
and dword ptr [edi] 0 +
lea eax [ebp+arg_10] +
push eax  +
lea eax [ebp+arg_4] +
mov [ebp+arg_10] ecx +
push eax  +
lea ecx [ebp+arg_0] +
mov dword ptr [esi] 0C00000E5h +
call sub_103E8AA  +
test eax eax +
jnz loc_103EE8A  +
mov dword ptr [esi] 0C0000017h +
jmp loc_103EEB3  +
push [ebp+arg_C]  +
mov ecx [ebp+arg_0] +
push [ebp+arg_8]  +
lea eax [ebp+arg_10] +
push eax  +
call sub_103D8C6  +
mov eax [ebp+arg_10] +
test eax eax +
jge loc_103EEA7  +
mov [esi] eax +
jmp loc_103EEB3  +
mov eax [ebp+arg_0] +
and [ebp+arg_0] 0 +
and dword ptr [esi] 0 +
mov [edi] eax +
lea ecx [ebp+arg_0] +
call sub_1036962  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_10] +
and dword ptr [eax] 0 +
push ebx  +
mov ebx [ebp+arg_0] +
and [ebp+arg_0] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+arg_4] +
mov [ebp+var_4] ecx +
push eax  +
lea ecx [ebp+arg_0] +
mov dword ptr [ebx] 0C00000E5h +
call sub_103E8AA  +
test eax eax +
jnz loc_103EF01  +
mov dword ptr [ebx] 0C0000017h +
jmp loc_103EF26  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_C] +
push esi  +
mov esi [ebp+arg_8] +
and [ebp+arg_0] 0 +
and dword ptr [ebx] 0 +
push edi  +
lea edi [eax+14h] +
movs   +
movs   +
movs   +
movs   +
mov ecx [ecx] +
mov [eax+24h] ecx +
mov ecx [ebp+arg_10] +
pop edi  +
mov [ecx] eax +
pop esi  +
lea ecx [ebp+arg_0] +
call sub_1036962  +
mov eax ebx +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
and [ebp+arg_0] 0 +
push edi  +
mov edi [ebp+arg_14] +
and dword ptr [edi] 0 +
lea eax [ebp+arg_14] +
push eax  +
lea eax [ebp+arg_4] +
mov [ebp+arg_14] ecx +
push eax  +
lea ecx [ebp+arg_0] +
mov dword ptr [esi] 0C00000E5h +
call sub_103DE5D  +
test eax eax +
jnz loc_103EF73  +
mov dword ptr [esi] 0C0000017h +
jmp loc_103EF9C  +
push [ebp+arg_10]  +
mov ecx [ebp+arg_0] +
push [ebp+arg_C]  +
lea eax [ebp+arg_14] +
push eax  +
call sub_103D8F2  +
mov eax [ebp+arg_14] +
test eax eax +
jge loc_103EF90  +
mov [esi] eax +
jmp loc_103EF9C  +
mov eax [ebp+arg_0] +
and [ebp+arg_0] 0 +
and dword ptr [esi] 0 +
mov [edi] eax +
lea ecx [ebp+arg_0] +
call sub_103E88E  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_8] +
mov eax ecx +
mov [eax+0Ch] edx +
mov edx [ebp+arg_0] +
xor ecx ecx +
mov [eax+10h] edx +
mov edx [ebp+arg_4] +
mov [eax+8] ecx +
mov [eax] ecx +
mov [eax+4] ecx +
mov [eax+14h] edx +
mov [eax+18h] ecx +
mov [eax+1Ch] ecx +
mov [eax+20h] ecx +
or dword ptr [eax+24h] 0FFFFFFFFh +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+arg_0] +
mov edx [eax] +
mov eax [eax+4] +
push [ebp+arg_8]  +
mov [ebp+var_C] eax +
mov eax [ebp+arg_4] +
mov [ebp+var_10] edx +
mov edx [eax] +
mov eax [eax+4] +
mov [ebp+var_4] eax +
lea eax [ebp+var_10] +
push eax  +
mov [ebp+var_8] edx +
call sub_103ED49  +
test eax eax +
jge loc_103F04B  +
mov [ebp+arg_0] eax +
lea eax [ebp+var_10] +
push eax  +
lea ecx [ebp+arg_0] +
mov [ebp+var_10] offset aDW7rtmBaseXm_3 +
mov [ebp+var_C] offset aCmicrodombui_3 +
mov [ebp+var_8] 0F1h +
mov [ebp+var_4] offset aM_storedtabl_0 +
call sub_103D6FE  +
jmp loc_103F04F  +
and [ebp+arg_0] 0 +
mov eax [ebp+arg_0] +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+arg_0] +
mov edx [eax] +
mov eax [eax+4] +
push [ebp+arg_4]  +
or [ebp+var_8] 0FFFFFFFFh +
or [ebp+var_4] 0FFFFFFFFh +
mov [ebp+var_C] eax +
lea eax [ebp+var_10] +
push eax  +
mov [ebp+var_10] edx +
call sub_103ED49  +
test eax eax +
jge loc_103F0B6  +
mov [ebp+arg_0] eax +
lea eax [ebp+var_10] +
push eax  +
lea ecx [ebp+arg_0] +
mov [ebp+var_10] offset aDW7rtmBaseXm_3 +
mov [ebp+var_C] offset aCmicrodombui_4 +
mov [ebp+var_8] 138h +
mov [ebp+var_4] offset aM_storedtabl_1 +
call sub_103D6FE  +
jmp loc_103F0BA  +
and [ebp+arg_0] 0 +
mov eax [ebp+arg_0] +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
mov [esi] eax +
mov [esi+8] al +
mov [esi+0Ch] eax +
mov [esi+10h] eax +
call sub_103ECCA  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+0Ch] +
mov edx [ebp+arg_4] +
push offset loc_103ED15  +
push [ebp+arg_0]  +
mov [edx] eax +
call sub_103B03C  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_103ED31  +
test [ebp+arg_0] 1 +
jz loc_103F12C  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
and dword ptr [edi] 0 +
lea eax [ebp+var_8] +
mov esi ecx +
mov ecx [ebp+arg_0] +
push eax  +
xor edx edx +
call sub_102FC84  +
test eax eax +
jl loc_103F18F  +
push edi  +
push [ebp+var_4]  +
lea eax [ebp+arg_0] +
push [ebp+var_8]  +
push [ebp+arg_0]  +
push eax  +
push 0  +
push dword ptr [esi+0Ch]  +
push [ebp+var_4]  +
push [ebp+var_8]  +
call __aullrem  +
mov ecx eax +
shl ecx 4 +
add ecx [esi+4] +
call sub_103EDE3  +
mov eax [ebp+arg_0] +
test eax eax +
jl loc_103F18F  +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov ebx ecx +
mov esi [ebx] +
push edi  +
mov dword ptr [eax] 0C00000E5h +
mov [ebp+var_1] 0 +
mov edi [ebp+arg_4] +
test esi esi +
jz loc_103F1ED  +
cmp esi ebx +
jz loc_103F1ED  +
lea eax [ebp-1] +
push eax  +
push [ebp+arg_10]  +
lea eax [ebp+var_8] +
push [ebp+arg_8]  +
mov ecx esi +
push eax  +
call sub_103DD76  +
mov eax [ebp+var_8] +
test eax eax +
jl loc_103F1E6  +
cmp [ebp+var_1] 0 +
jnz loc_103F221  +
mov esi [esi] +
jmp loc_103F1B5  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
jmp loc_103F259  +
and [ebp+arg_4] 0 +
lea eax [ebp+arg_4] +
push eax  +
push [ebp+arg_C]  +
lea eax [ebp+arg_8] +
push [ebp+arg_8]  +
mov ecx edi +
push [ebp+arg_10]  +
push eax  +
call sub_103EE51  +
mov eax [ebp+arg_8] +
test eax eax +
jl loc_103F1E6  +
mov esi [ebp+arg_4] +
push 1  +
push esi  +
push ebx  +
mov ecx ebx +
call sub_1032AF1  +
inc dword ptr [edi+10h]  +
mov eax [ebp+arg_14] +
test eax eax +
jz loc_103F22D  +
add esi 24h +
mov [eax] esi +
mov eax [edi+10h] +
cmp eax [edi+14h] +
jbe loc_103F247  +
lea eax [ebp+arg_8] +
push eax  +
mov ecx edi +
call sub_103E5E8  +
mov eax [ebp+arg_8] +
test eax eax +
jl loc_103F1E6  +
mov eax [ebp+arg_18] +
test eax eax +
jz loc_103F253  +
mov cl [ebp+var_1] +
mov [eax] cl +
mov eax [ebp+arg_0] +
and dword ptr [eax] 0 +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov ebx ecx +
mov esi [ebx] +
push edi  +
mov dword ptr [eax] 0C00000E5h +
mov [ebp+var_1] 0 +
mov edi [ebp+arg_4] +
test esi esi +
jz loc_103F2BB  +
cmp esi ebx +
jz loc_103F2BB  +
lea eax [ebp-1] +
push eax  +
push [ebp+arg_10]  +
lea eax [ebp+var_8] +
push [ebp+arg_8]  +
mov ecx esi +
push eax  +
call sub_103DD76  +
mov eax [ebp+var_8] +
test eax eax +
jl loc_103F2B4  +
cmp [ebp+var_1] 0 +
jnz loc_103F2EF  +
mov esi [esi] +
jmp loc_103F283  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
jmp loc_103F327  +
and [ebp+arg_4] 0 +
lea eax [ebp+arg_4] +
push eax  +
push [ebp+arg_C]  +
lea eax [ebp+arg_8] +
push [ebp+arg_8]  +
mov ecx edi +
push [ebp+arg_10]  +
push eax  +
call sub_103EEC8  +
mov eax [ebp+arg_8] +
test eax eax +
jl loc_103F2B4  +
mov esi [ebp+arg_4] +
push 1  +
push esi  +
push ebx  +
mov ecx ebx +
call sub_1032AF1  +
inc dword ptr [edi+10h]  +
mov eax [ebp+arg_14] +
test eax eax +
jz loc_103F2FB  +
add esi 24h +
mov [eax] esi +
mov eax [edi+10h] +
cmp eax [edi+14h] +
jbe loc_103F315  +
lea eax [ebp+arg_8] +
push eax  +
mov ecx edi +
call sub_103E5E8  +
mov eax [ebp+arg_8] +
test eax eax +
jl loc_103F2B4  +
mov eax [ebp+arg_18] +
test eax eax +
jz loc_103F321  +
mov cl [ebp+var_1] +
mov [eax] cl +
mov eax [ebp+arg_0] +
and dword ptr [eax] 0 +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov ebx ecx +
mov esi [ebx] +
push edi  +
mov dword ptr [eax] 0C00000E5h +
mov [ebp+var_1] 0 +
mov edi [ebp+arg_4] +
test esi esi +
jz loc_103F38C  +
cmp esi ebx +
jz loc_103F38C  +
lea eax [ebp-1] +
push eax  +
push [ebp+arg_14]  +
lea eax [ebp+var_8] +
push [ebp+arg_10]  +
mov ecx esi +
push [ebp+arg_8]  +
push eax  +
call sub_103DDC0  +
mov eax [ebp+var_8] +
test eax eax +
jl loc_103F385  +
cmp [ebp+var_1] 0 +
jnz loc_103F3C3  +
mov esi [esi] +
jmp loc_103F351  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
jmp loc_103F3FB  +
and [ebp+arg_4] 0 +
lea eax [ebp+arg_4] +
push eax  +
push [ebp+arg_C]  +
lea eax [ebp+arg_8] +
push [ebp+arg_8]  +
mov ecx edi +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push eax  +
call sub_103EF3A  +
mov eax [ebp+arg_8] +
test eax eax +
jl loc_103F385  +
mov esi [ebp+arg_4] +
push 1  +
push esi  +
push ebx  +
mov ecx ebx +
call sub_1032AF1  +
inc dword ptr [edi+10h]  +
mov eax [ebp+arg_18] +
test eax eax +
jz loc_103F3CF  +
add esi 1Ch +
mov [eax] esi +
mov eax [edi+10h] +
cmp eax [edi+14h] +
jbe loc_103F3E9  +
lea eax [ebp+arg_8] +
push eax  +
mov ecx edi +
call sub_1036F48  +
mov eax [ebp+arg_8] +
test eax eax +
jl loc_103F385  +
mov eax [ebp+arg_1C] +
test eax eax +
jz loc_103F3F5  +
mov cl [ebp+var_1] +
mov [eax] cl +
mov eax [ebp+arg_0] +
and dword ptr [eax] 0 +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 20h  +
***
mov eax ecx +
mov ecx [eax] +
test ecx ecx +
jz locret_103F420  +
and dword ptr [eax] 0 +
test ecx ecx +
jz locret_103F420  +
push 1  +
call sub_103F112  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 28h  +
mov esi ecx +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_103F450  +
mov ecx [ebp+arg_4] +
push dword ptr [ecx]  +
mov edx [ebp+arg_0] +
push dword ptr [edx+4]  +
mov ecx eax +
push dword ptr [edx]  +
call sub_103EFB1  +
jmp loc_103F452  +
xor eax eax +
mov [esi] eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
or dword ptr [esi] 0FFFFFFFFh +
lea eax [ebp+arg_4] +
push eax  +
push [ebp+arg_0]  +
add ecx 4 +
call sub_103F138  +
test eax eax +
jl loc_103F48A  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_103F488  +
mov eax [eax] +
mov [esi] eax +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
push esi  +
push 0Ch  +
xor ebx ebx +
add ecx 4 +
pop esi  +
push ecx  +
lea ecx [ebp+var_1C] +
mov [ebp+var_8] 0C00000E5h +
mov [ebp+var_4] ebx +
mov [ebp+var_1C] ebx +
mov byte ptr [ebp+var_14] bl +
mov [ebp+var_10] ebx +
mov [ebp+var_C] ebx +
call sub_103ECCA  +
jmp loc_103F4F6  +
mov eax [ebp+var_C] +
sub eax [ebp+var_10] +
neg eax  +
sbb eax eax +
and eax [ebp+var_C] +
mov eax [eax+18h] +
lea ecx [eax+esi] +
cmp ecx esi +
jb loc_103F505  +
cmp ecx eax +
jb loc_103F505  +
lea esi [ecx+1] +
cmp esi ecx +
jb loc_103F505  +
cmp esi 1 +
jb loc_103F505  +
lea ecx [ebp+var_1C] +
call sub_103E40B  +
cmp [ebp+var_10] ebx +
jnz loc_103F4C7  +
mov [ebp+var_4] esi +
mov eax [ebp+var_4] +
pop esi  +
pop ebx  +
leave   +
retn   +
lea eax [ebp+var_18] +
push eax  +
lea ecx [ebp+var_8] +
mov [ebp+var_8] 0C0000095h +
mov [ebp+var_18] offset aDW7rtmBaseXm_3 +
mov [ebp+var_14] offset aCmicrodombui_5 +
mov [ebp+var_10] 19Eh +
mov [ebp+var_C] offset aBuclRtlAddSi_2 +
call sub_103D6FE  +
jmp loc_103F4FE  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
lea eax [esi+4] +
push eax  +
lea ecx [ebp-2Ch] +
call sub_103F0C6  +
push dword ptr [esi+14h]  +
xor ebx ebx +
lea ecx [ebp-10h] +
mov [ebp-10h] ebx +
mov [ebp-0Ch] ebx +
call sub_103D716  +
test eax eax +
jnz loc_103F5AF  +
mov esi 1C2h +
mov edi offset aPairs_allocate +
mov dword ptr [ebp+8] 0C0000017h +
cmp [ebp-10h] ebx +
jz loc_103F58A  +
push dword ptr [ebp-10h]  +
call ??3@YAXPAX@Z  +
pop ecx  +
lea eax [ebp-18h] +
push eax  +
lea ecx [ebp+8] +
mov dword ptr [ebp-18h] offset aDW7rtmBaseXm_3 +
mov dword ptr [ebp-14h] offset aCmicrodombui_6 +
mov [ebp-10h] esi +
mov [ebp-0Ch] edi +
call sub_103D6FE  +
jmp loc_103F6BF  +
push ebx  +
lea ecx [ebp-2Ch] +
call sub_103DAA2  +
mov [ebp-24h] bl +
cmp [ebp-20h] ebx +
jz loc_103F5F7  +
mov esi [ebp-10h] +
mov ecx [ebp-1Ch] +
mov eax ecx +
sub eax [ebp-20h] +
neg eax  +
sbb eax eax +
and eax ecx +
mov eax [eax+24h] +
mov [esi] eax +
mov eax ecx +
sub eax [ebp-20h] +
neg eax  +
sbb eax eax +
and eax ecx +
add eax 18h +
lea ecx [ebp-2Ch] +
mov [esi+4] eax +
call sub_103E40B  +
add esi 8 +
cmp [ebp-20h] ebx +
jnz loc_103F5C3  +
push dword ptr [ebp+8]  +
lea eax [ebp-4] +
push offset loc_103D616  +
push dword ptr [ebp-0Ch]  +
push dword ptr [ebp-10h]  +
push eax  +
call sub_103E687  +
mov eax [ebp-4] +
cmp eax ebx +
jge loc_103F627  +
mov esi 1CAh +
mov edi offset aBuclRtlQuickso +
mov [ebp+8] eax +
jmp loc_103F57C  +
***
mov edi [ebp+8] +
mov ecx [edi+8] +
mov esi [edi] +
mov eax [edi+4] +
and dword ptr [ebp-4] 0 +
add esi ecx +
add eax ecx +
cmp dword ptr [ebp-0Ch] 0 +
lea ebx [esi+0Ch] +
mov [ebp-8] eax +
jbe loc_103F68D  +
mov ecx [ebp-10h] +
add ecx 4 +
mov [ebp+8] ecx +
jmp loc_103F657  +
mov eax [ebp-8] +
mov ecx [ebp+8] +
mov edx [ecx] +
sub eax ebx +
cmp eax [edx] +
jbe near ptr byte_103F6C9  +
mov eax edx +
push dword ptr [eax]  +
push dword ptr [eax+8]  +
push ebx  +
call memcpy  +
mov eax [ebp+8] +
mov eax [eax] +
mov eax [eax] +
add dword ptr [ebp+8] 8 +
add eax ebx +
add esp 0Ch +
inc dword ptr [ebp-4]  +
mov byte ptr [eax] 0 +
lea ebx [eax+1] +
mov eax [ebp-4] +
cmp eax [ebp-0Ch] +
jb loc_103F651  +
mov eax ebx +
sub eax [edi+8] +
sub ebx esi +
mov [edi] eax +
mov eax [ebp-0Ch] +
mov [esi+8] eax +
mov [esi+4] ebx +
mov dword ptr [esi] 7053644Dh +
mov eax [edi] +
cmp eax [edi+4] +
ja near ptr byte_103F6C9  +
and dword ptr [ebp+8] 0 +
cmp dword ptr [ebp-10h] 0 +
jz loc_103F6BF  +
push dword ptr [ebp-10h]  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax [ebp+8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
lea esi [ecx+270h] +
mov ecx [esi] +
mov eax ecx +
sub eax esi +
neg eax  +
sbb eax eax +
and eax ecx +
jz loc_103F6F6  +
cmp dword ptr [eax+0B80Ch] 200h +
jnz loc_103F730  +
and [ebp+var_4] 0 +
lea ecx [ebp+var_4] +
call sub_103D750  +
test eax eax +
jnz loc_103F717  +
cmp [ebp+var_4] eax +
jz loc_103F713  +
push [ebp+var_4]  +
call sub_103DA86  +
xor eax eax +
jmp loc_103F744  +
push 1  +
push [ebp+var_4]  +
mov ecx esi +
push esi  +
call sub_103D1E6  +
mov ecx [esi] +
mov eax ecx +
sub eax esi +
neg eax  +
sbb eax eax +
and eax ecx +
lea ecx [eax+0B80Ch] +
mov edx [ecx] +
mov esi edx +
imul esi esi +
inc edx  +
lea eax [esi+eax+0Ch] +
mov [ecx] edx +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
push edi  +
mov edi ecx +
call sub_103F6CF  +
mov esi eax +
test esi esi +
jnz loc_103F794  +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_4] 0C0000017h +
mov [ebp+var_14] offset aDW7rtmBaseXm_3 +
mov [ebp+var_10] offset aCmicrodombui_7 +
mov [ebp+var_C] 487h +
mov [ebp+var_8] offset aNewdocumentThi +
call sub_103D6FE  +
jmp loc_103F7E7  +
push ebx  +
lea eax [edi+294h] +
mov ecx [eax] +
xor ebx ebx +
inc ebx  +
mov [esi+24h] ecx +
inc dword ptr [eax]  +
push ebx  +
push ebx  +
mov ecx edi +
mov [esi+2Ch] ebx +
mov [esi+30h] ebx +
call sub_103D6D0  +
push 4  +
pop eax  +
mov [esi+40h] ax +
push 0Eh  +
pop eax  +
mov [esi+42h] ax +
lea eax [edi+280h] +
cmp dword ptr [eax] 0 +
jz loc_103F7CE  +
int 3  +
and dword ptr [esi+20h] 0 +
push ebx  +
lea ecx [edi+284h] +
push esi  +
push ecx  +
mov [eax] esi +
call sub_1032AF1  +
and [ebp+var_4] 0 +
pop ebx  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+280h] +
xor ebx ebx +
cmp [eax+42h] bx +
jz loc_103F811  +
int 3  +
mov ecx [eax+44h] +
shl ecx 10h +
or ecx [eax+4Ch] +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
mov [ebp+var_8] ecx +
push eax  +
lea ecx [edi+29Ch] +
call sub_103ED9A  +
cmp eax ebx +
jge loc_103F846  +
mov esi 5B7h +
mov edi offset aM_attdeflist_0 +
mov [ebp+var_4] eax +
jmp loc_103F9A1  +
mov eax [ebp+var_4] +
cmp eax ebx +
jz loc_103F9C3  +
mov eax [eax] +
mov [ebp+var_C] eax +
cmp eax ebx +
jz loc_103F9C3  +
mov ecx [ebp+var_4] +
cmp eax ecx +
jz loc_103F9C3  +
push eax  +
call sub_103D3F8  +
mov esi eax +
mov edx [esi+50h] +
add esi 40h +
cmp edx 1 +
jz loc_103F957  +
mov eax [edi+280h] +
lea ecx [eax+34h] +
mov eax [ecx] +
jmp loc_103F8B3  +
cmp word ptr [eax+2Ah] 1 +
jnz loc_103F8A8  +
mov ecx [eax+2Ch] +
cmp ecx [esi+4] +
jnz loc_103F8A8  +
mov ecx [eax+34h] +
cmp ecx [esi+8] +
jz loc_103F95F  +
mov ecx [edi+280h] +
mov eax [eax] +
add ecx 34h +
cmp eax ecx +
jnz loc_103F88D  +
cmp edx ebx +
jz loc_103F993  +
cmp edx 1 +
jle loc_103F810  +
cmp edx 3 +
jg loc_103F810  +
lea ecx [ebp+var_8] +
mov [ebp+var_8] ebx +
call sub_103D388  +
test eax eax +
jz loc_103F973  +
mov eax [ebp+var_8] +
lea ecx [edi+294h] +
mov edx [ecx] +
mov [eax+24h] edx +
inc dword ptr [ecx]  +
mov [eax+2Ch] ebx +
mov [eax+30h] ebx +
push 18h  +
pop ecx  +
mov [eax+40h] cx +
xor ecx ecx +
inc ecx  +
mov [eax+42h] cx +
mov ecx [esi+4] +
or dword ptr [eax+48h] 0FFFFFFFFh +
mov [eax+44h] ecx +
mov ecx [esi+8] +
mov [eax+4Ch] ecx +
mov ecx [esi+14h] +
mov [eax+50h] ecx +
mov [eax+54h] bl +
mov ecx [edi+280h] +
inc dword ptr [ecx+28h]  +
mov edx [edi+280h] +
lea ecx [eax+18h] +
lea esi [edx+34h] +
mov ebx [esi+4] +
mov [ecx] esi +
mov [ecx+4] ebx +
mov [ebx] ecx +
push 1  +
mov [esi+4] ecx +
inc dword ptr [edx+3Ch]  +
lea ecx [edi+284h] +
push eax  +
push ecx  +
call sub_1032AF1  +
xor ebx ebx +
mov eax [ebp+var_C] +
jmp loc_103F851  +
cmp edx 2 +
jnz loc_103F957  +
mov ecx [esi+14h] +
cmp ecx [eax+38h] +
jz loc_103F957  +
mov esi 5E4h +
jmp loc_103F998  +
mov esi 602h +
mov edi offset aDefaultattribu +
mov [ebp+var_4] 0C0000017h +
cmp [ebp+var_8] ebx +
jz loc_103F9A1  +
push [ebp+var_8]  +
call sub_103D801  +
jmp loc_103F9A1  +
mov esi 5F9h +
mov [ebp+var_4] 0C000A083h +
xor edi edi +
lea eax [ebp+var_18] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_18] offset aDW7rtmBaseXm_3 +
mov [ebp+var_14] offset aCmicrodombui_8 +
mov [ebp+var_10] esi +
mov [ebp+var_C] edi +
call sub_103D6FE  +
jmp loc_103F9C6  +
mov [ebp+var_4] ebx +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
mov esi ecx +
cmp dword ptr [esi+280h] 0 +
jnz loc_103F9E8  +
int 3  +
call sub_103F6CF  +
test eax eax +
jnz loc_103FA22  +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_4] 0C0000017h +
mov [ebp+var_14] offset aDW7rtmBaseXm_3 +
mov [ebp+var_10] offset aCmicrodombui_9 +
mov [ebp+var_C] 636h +
mov [ebp+var_8] offset aTheendelementT +
call sub_103D6FE  +
jmp loc_103FA5B  +
mov ecx [esi+280h] +
push 4  +
mov [eax+20h] ecx +
pop ecx  +
push 2  +
mov [eax+40h] cx +
pop ecx  +
push 1  +
mov [eax+42h] cx +
lea ecx [esi+284h] +
push eax  +
push ecx  +
call sub_1032AF1  +
mov eax [esi+280h] +
mov eax [eax+20h] +
and [ebp+var_4] 0 +
mov [esi+280h] eax +
mov eax [ebp+var_4] +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A8h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov ebx ecx +
push 26h  +
add esi 17C8h +
pop ecx  +
lea edi [ebp+var_A8] +
movs   +
cmp [ebp+var_A8] 0Ch +
jz loc_103FA94  +
int 3  +
mov ecx ebx +
call sub_103F6CF  +
test eax eax +
jnz loc_103FAD0  +
lea eax [ebp+var_10] +
push eax  +
lea ecx [ebp+arg_0] +
mov [ebp+arg_0] 0C0000017h +
mov [ebp+var_10] offset aDW7rtmBaseXm_3 +
mov [ebp+var_C] offset aCmicrodombu_10 +
mov [ebp+var_8] 7DFh +
mov [ebp+var_4] offset aNewattlistclos +
call sub_103D6FE  +
jmp loc_103FB03  +
lea ecx [ebx+280h] +
mov edx [ecx] +
mov [eax+20h] edx +
push 4  +
pop edx  +
push 9  +
mov [eax+40h] dx +
pop edx  +
mov [eax+42h] dx +
mov edx [ecx] +
mov edx [edx+20h] +
push 1  +
mov [ecx] edx +
lea ecx [ebx+284h] +
push eax  +
push ecx  +
call sub_1032AF1  +
and [ebp+arg_0] 0 +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
test ecx ecx +
jz loc_103FB25  +
push 1  +
call sub_103F112  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
push edi  +
mov esi ecx +
test ebx ebx +
jz loc_103FB47  +
and dword ptr [ebx] 0 +
mov edi [ebp+arg_C] +
test edi edi +
jz loc_103FB51  +
mov byte ptr [edi] 0 +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
call sub_103D4A7  +
test eax eax +
jl loc_103FB8D  +
mov eax [ebp+var_4] +
push edi  +
push ebx  +
push eax  +
xor edx edx +
div  dword ptr [esi+0Ch] +
push [ebp+arg_4]  +
lea ecx [ebp+arg_0] +
push [ebp+arg_0]  +
push esi  +
push ecx  +
mov ecx edx +
shl ecx 4 +
add ecx [esi+4] +
call sub_103F19A  +
mov eax [ebp+arg_0] +
test eax eax +
jl loc_103FB8D  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
push edi  +
mov esi ecx +
test ebx ebx +
jz loc_103FBB2  +
and dword ptr [ebx] 0 +
mov edi [ebp+arg_C] +
test edi edi +
jz loc_103FBBC  +
mov byte ptr [edi] 0 +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
call sub_103D4A7  +
test eax eax +
jl loc_103FBF8  +
mov eax [ebp+var_4] +
push edi  +
push ebx  +
push eax  +
xor edx edx +
div  dword ptr [esi+0Ch] +
push [ebp+arg_4]  +
lea ecx [ebp+arg_0] +
push [ebp+arg_0]  +
push esi  +
push ecx  +
mov ecx edx +
shl ecx 4 +
add ecx [esi+4] +
call sub_103F268  +
mov eax [ebp+arg_0] +
test eax eax +
jl loc_103FBF8  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
push edi  +
mov esi ecx +
test ebx ebx +
jz loc_103FC18  +
and dword ptr [ebx] 0 +
mov edi [ebp+arg_C] +
test edi edi +
jz loc_103FC22  +
mov byte ptr [edi] 0 +
mov ecx [ebp+arg_0] +
mov eax [ecx] +
push edi  +
push ebx  +
xor edx edx +
push edx  +
push eax  +
push [ebp+arg_4]  +
push ecx  +
push esi  +
lea ecx [ebp+arg_8] +
push ecx  +
push edx  +
push dword ptr [esi+0Ch]  +
push edx  +
push eax  +
call __aullrem  +
mov ecx eax +
shl ecx 4 +
add ecx [esi+4] +
call sub_103F336  +
mov eax [ebp+arg_8] +
pop edi  +
pop esi  +
pop ebx  +
test eax eax +
jl loc_103FC5A  +
xor eax eax +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push [ebp+arg_4]  +
mov edi ecx +
lea ecx [edi+18h] +
mov dword ptr [esi] 0C00000E5h +
call sub_103E8DF  +
test eax eax +
jge loc_103FC88  +
mov [esi] eax +
jmp loc_103FC93  +
mov eax [ebp+arg_8] +
mov eax [eax] +
and dword ptr [esi] 0 +
mov [edi+24h] eax +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+arg_0] +
or [ebp+var_8] 0FFFFFFFFh +
or [ebp+var_4] 0FFFFFFFFh +
mov [ebp+var_10] eax +
mov eax [ebp+arg_4] +
push ebx  +
mov [ebp+var_C] eax +
lea eax [ebp+arg_0+3] +
push eax  +
xor ebx ebx +
push ebx  +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
mov [ebp+arg_4] ebx +
call sub_103FB2E  +
cmp eax ebx +
jge loc_103FCE6  +
mov ecx 0CCh +
mov edx offset aM_storedtabl_2 +
mov ebx eax +
jmp loc_103FCFA  +
cmp byte ptr [ebp+arg_0+3] bl +
jz loc_103FD1D  +
mov ecx 0CEh +
mov edx offset aFexisted +
mov ebx 0C000A083h +
lea eax [ebp+var_10] +
mov [ebp+var_8] ecx +
push eax  +
lea ecx [ebp+arg_0] +
mov [ebp+arg_0] ebx +
mov [ebp+var_10] offset aDW7rtmBaseXm_3 +
mov [ebp+var_C] offset aCmicrodombu_11 +
mov [ebp+var_4] edx +
call sub_103D6FE  +
mov eax ebx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+arg_0] +
mov edx [eax] +
mov eax [eax+4] +
mov [ebp+var_C] eax +
mov eax [ebp+arg_4] +
mov [ebp+var_10] edx +
mov edx [eax] +
mov eax [eax+4] +
push 0  +
mov [ebp+var_4] eax +
push 0  +
lea eax [ebp+arg_8] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
mov [ebp+var_8] edx +
call sub_103FB99  +
test eax eax +
jge loc_103FD8F  +
mov [ebp+arg_0] eax +
lea eax [ebp+var_10] +
push eax  +
lea ecx [ebp+arg_0] +
mov [ebp+var_10] offset aDW7rtmBaseXm_3 +
mov [ebp+var_C] offset aCmicrodombu_12 +
mov [ebp+var_8] 106h +
mov [ebp+var_4] offset aM_storedtabl_3 +
call sub_103D6FE  +
jmp loc_103FD93  +
and [ebp+arg_0] 0 +
mov eax [ebp+arg_0] +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+arg_0] +
mov edx [eax] +
mov eax [eax+4] +
push [ebp+arg_8]  +
or [ebp+var_8] 0FFFFFFFFh +
or [ebp+var_4] 0FFFFFFFFh +
mov [ebp+var_C] eax +
push 0  +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
mov [ebp+var_10] edx +
call sub_103FB2E  +
test eax eax +
jge loc_103FE00  +
mov [ebp+arg_4] eax +
lea eax [ebp+var_10] +
push eax  +
lea ecx [ebp+arg_4] +
mov [ebp+var_10] offset aDW7rtmBaseXm_3 +
mov [ebp+var_C] offset aCmicrodombu_13 +
mov [ebp+var_8] 124h +
mov [ebp+var_4] offset aM_storedtabl_4 +
call sub_103D6FE  +
jmp loc_103FE04  +
and [ebp+arg_4] 0 +
mov eax [ebp+arg_4] +
leave   +
retn 0Ch  +
***
mov ecx [ecx+186Ch] +
call sub_103F9D3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+186Ch] +
pop ebp  +
jmp loc_103FA66  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+186Ch] +
pop ebp  +
jmp loc_103F74C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
xor ebx ebx +
xor edi edi +
cmp [esi+0Ch] ebx +
jbe loc_103FE7B  +
mov ecx [esi+4] +
lea eax [ebp+var_4] +
push eax  +
push esi  +
add ecx ebx +
call sub_1037F67  +
inc edi  +
add ebx 10h +
cmp edi [esi+0Ch] +
jb loc_103FE63  +
mov eax [esi+4] +
lea edi [esi+18h] +
cmp eax edi +
jz loc_103FE95  +
push eax  +
call sub_103DC88  +
mov [esi+4] edi +
mov dword ptr [esi+0Ch] 7 +
and dword ptr [esi+10h] 0 +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
xor ebx ebx +
xor edi edi +
cmp [esi+0Ch] ebx +
jbe loc_103FECF  +
mov ecx [esi+4] +
lea eax [ebp+var_4] +
push eax  +
push esi  +
add ecx ebx +
call sub_103F0EF  +
inc edi  +
add ebx 10h +
cmp edi [esi+0Ch] +
jb loc_103FEB7  +
mov eax [esi+4] +
lea edi [esi+18h] +
cmp eax edi +
jz loc_103FEED  +
test eax eax +
jz loc_103FEED  +
push eax  +
call sub_103DC88  +
and dword ptr [esi+0Ch] 0 +
and dword ptr [esi+4] 0 +
jmp loc_103FEF1  +
and dword ptr [esi+0Ch] 0 +
and dword ptr [esi+4] 0 +
push offset loc_103AFFF  +
push 7  +
push 10h  +
push edi  +
call sub_1035616  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+0Ch] +
mov edx [ebp+arg_4] +
push offset loc_103FB12  +
push [ebp+arg_0]  +
mov [edx] eax +
call sub_103B03C  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
and [ebp+arg_0] 0 +
push edi  +
mov edi [ebp+arg_14] +
and dword ptr [edi] 0 +
lea eax [ebp+arg_14] +
push eax  +
lea eax [ebp+arg_4] +
mov [ebp+arg_14] ecx +
push eax  +
lea ecx [ebp+arg_0] +
mov dword ptr [esi] 0C00000E5h +
call sub_103F426  +
test eax eax +
jnz loc_103FF6A  +
mov dword ptr [esi] 0C0000017h +
jmp loc_103FF93  +
push [ebp+arg_10]  +
mov ecx [ebp+arg_0] +
push [ebp+arg_C]  +
lea eax [ebp+arg_14] +
push eax  +
call sub_103FC63  +
mov eax [ebp+arg_14] +
test eax eax +
jge loc_103FF87  +
mov [esi] eax +
jmp loc_103FF93  +
mov eax [ebp+arg_0] +
and [ebp+arg_0] 0 +
and dword ptr [esi] 0 +
mov [edi] eax +
lea ecx [ebp+arg_0] +
call sub_103F40A  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov ebx ecx +
mov esi [ebx] +
push edi  +
mov dword ptr [eax] 0C00000E5h +
mov [ebp+var_1] 0 +
mov edi [ebp+arg_4] +
test esi esi +
jz loc_103FFFE  +
cmp esi ebx +
jz loc_103FFFE  +
lea eax [ebp-1] +
push eax  +
push [ebp+arg_14]  +
lea eax [ebp+var_8] +
push [ebp+arg_10]  +
mov ecx esi +
push [ebp+arg_8]  +
push eax  +
call sub_103E635  +
mov eax [ebp+var_8] +
test eax eax +
jl loc_103FFF7  +
cmp [ebp+var_1] 0 +
jnz loc_1040035  +
mov esi [esi] +
jmp loc_103FFC3  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
jmp loc_104006D  +
and [ebp+arg_4] 0 +
lea eax [ebp+arg_4] +
push eax  +
push [ebp+arg_C]  +
lea eax [ebp+arg_8] +
push [ebp+arg_8]  +
mov ecx edi +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push eax  +
call sub_103FF31  +
mov eax [ebp+arg_8] +
test eax eax +
jl loc_103FFF7  +
mov esi [ebp+arg_4] +
push 1  +
push esi  +
push ebx  +
mov ecx ebx +
call sub_1032AF1  +
inc dword ptr [edi+10h]  +
mov eax [ebp+arg_18] +
test eax eax +
jz loc_1040041  +
add esi 24h +
mov [eax] esi +
mov eax [edi+10h] +
cmp eax [edi+14h] +
jbe loc_104005B  +
lea eax [ebp+arg_8] +
push eax  +
mov ecx edi +
call sub_1036F48  +
mov eax [ebp+arg_8] +
test eax eax +
jl loc_103FFF7  +
mov eax [ebp+arg_1C] +
test eax eax +
jz loc_1040067  +
mov cl [ebp+var_1] +
mov [eax] cl +
mov eax [ebp+arg_0] +
and dword ptr [eax] 0 +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
xor ebx ebx +
xor edi edi +
cmp [esi+0Ch] ebx +
jbe loc_10400A8  +
mov ecx [esi+4] +
lea eax [ebp-4] +
push eax  +
push esi  +
add ecx ebx +
call sub_103FF0E  +
inc edi  +
add ebx 10h +
cmp edi [esi+0Ch] +
jb loc_1040090  +
mov eax [esi+4] +
lea edi [esi+18h] +
cmp eax edi +
jz loc_10400C6  +
test eax eax +
jz loc_10400C6  +
push eax  +
call sub_103DC88  +
and dword ptr [esi+0Ch] 0 +
and dword ptr [esi+4] 0 +
jmp loc_10400CA  +
and dword ptr [esi+0Ch] 0 +
and dword ptr [esi+4] 0 +
push offset loc_103AFFF  +
push 25h  +
push 10h  +
push edi  +
call sub_1035616  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_8] +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
mov esi ecx +
mov [ebp+var_8] ebx +
mov [ebp+var_4] ebx +
cmp eax ebx +
jz loc_1040104  +
mov [eax] ebx +
mov edi [ebp+arg_C] +
cmp edi ebx +
jz loc_104010D  +
mov [edi] bl +
mov ecx [ebp+arg_0] +
lea eax [ebp+var_8] +
push eax  +
xor edx edx +
call sub_102FC84  +
cmp eax ebx +
jl loc_1040159  +
push edi  +
push [ebp+arg_8]  +
lea eax [ebp+arg_8] +
push [ebp+var_4]  +
push [ebp+var_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push esi  +
push eax  +
push ebx  +
push dword ptr [esi+0Ch]  +
push [ebp+var_4]  +
push [ebp+var_8]  +
call __aullrem  +
mov ecx eax +
shl ecx 4 +
add ecx [esi+4] +
call sub_103FFA8  +
mov eax [ebp+arg_8] +
cmp eax ebx +
jl loc_1040159  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
lea eax [ebp+arg_3] +
push eax  +
lea eax [ebp+var_4] +
mov esi ecx +
push eax  +
push esi  +
push dword ptr [ebp+8]  +
lea ecx [esi+4] +
call sub_10400E7  +
test eax eax +
jge loc_104018C  +
mov esi eax +
jmp loc_10401A8  +
cmp byte ptr [ebp+arg_3] 0 +
jnz loc_104019C  +
mov eax [esi] +
cmp eax 0FFFFFFFFh +
jz loc_10401AF  +
inc eax  +
mov [esi] eax +
mov eax [ebp+var_4] +
mov eax [eax] +
mov ecx [ebp+arg_3+1] +
mov [ecx] eax +
xor esi esi +
mov eax esi +
pop esi  +
leave   +
retn 8  +
lea eax [ebp+var_14] +
mov esi 0C0000095h +
push eax  +
lea ecx [ebp+8] +
mov [ebp+8] esi +
mov [ebp+var_14] offset aDW7rtmBaseXm_3 +
mov [ebp+var_10] offset aCmicrodombu_14 +
mov [ebp+var_C] 187h +
mov [ebp+var_8] offset aBuclRtlIncreme +
call sub_103D6FE  +
jmp loc_10401A8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_8] +
or dword ptr [ebx] 0FFFFFFFFh +
push esi  +
push edi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
lea edi [esi+328h] +
push edi  +
push [ebp+arg_4]  +
call sub_1044419  +
test eax eax +
jl loc_104021B  +
push ebx  +
push edi  +
mov ecx esi +
call sub_1040165  +
test eax eax +
jl loc_104021B  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
xor esi esi +
push edi  +
mov edi ecx +
cmp [eax+0Ch] esi +
jz loc_1040254  +
mov esi [ebp+arg_10] +
push esi  +
push eax  +
push [ebp+arg_0]  +
call sub_10401E6  +
test eax eax +
jge loc_10402BE  +
jmp loc_1040301  +
mov eax [ebx+0Ch] +
cmp eax 3 +
jnz loc_104028D  +
mov ecx [ebp+arg_0] +
lea eax [ebp+arg_4] +
push eax  +
push offset dword_100DF30  +
push ebx  +
call sub_103D9A7  +
cmp eax esi +
jl loc_1040301  +
cmp [ebp+arg_4] esi +
mov esi [ebp+arg_10] +
jnz loc_10402BB  +
push esi  +
push offset asc_100DF18  +
mov ecx edi +
call sub_1040165  +
jmp loc_104024B  +
cmp eax 5 +
jnz loc_10402B8  +
mov ecx [ebp+arg_0] +
lea eax [ebp+arg_4] +
push eax  +
push offset dword_100DF38  +
push ebx  +
call sub_103D9A7  +
cmp eax esi +
jl loc_1040301  +
cmp [ebp+arg_4] esi +
mov esi [ebp+arg_10] +
jnz loc_10402BB  +
push esi  +
push offset dword_100DF24  +
jmp loc_1040284  +
mov esi [ebp+arg_10] +
or dword ptr [esi] 0FFFFFFFFh +
cmp dword ptr [ebx+0Ch] 0 +
jz loc_10402D9  +
lea eax [esi+4] +
push eax  +
push ebx  +
push [ebp+arg_0]  +
mov ecx edi +
call sub_10401E6  +
test eax eax +
jge loc_10402DD  +
jmp loc_1040301  +
or dword ptr [esi+4] 0FFFFFFFFh +
mov eax [ebp+arg_C] +
cmp dword ptr [eax+0Ch] 0 +
jz loc_10402FB  +
add esi 8 +
push esi  +
push eax  +
push [ebp+arg_0]  +
mov ecx edi +
call sub_10401E6  +
test eax eax +
jge loc_10402FF  +
jmp loc_1040301  +
or dword ptr [esi+8] 0FFFFFFFFh +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
push edi  +
call sub_103D5B2  +
mov ebx eax +
mov ecx esi +
mov [ebp+var_8] ebx +
call sub_103F6CF  +
mov edi eax +
test edi edi +
jnz loc_1040343  +
mov eax 524h +
mov ecx offset aNewelementThis +
jmp loc_1040525  +
mov eax [esi+294h] +
mov [edi+24h] eax +
inc dword ptr [esi+294h]  +
mov eax [ebx+30h] +
mov [edi+2Ch] eax +
mov eax [ebx+34h] +
push eax  +
push dword ptr [edi+2Ch]  +
mov ecx esi +
mov [edi+30h] eax +
call sub_103D6D0  +
push 10h  +
pop eax  +
mov [edi+40h] ax +
xor eax eax +
mov [edi+42h] ax +
lea eax [ebp+var_14] +
push eax  +
push ebx  +
lea eax [ebx+20h] +
push eax  +
lea eax [ebx+10h] +
push eax  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1040227  +
test eax eax +
jl loc_10404F6  +
mov eax [ebp+var_14] +
mov [edi+48h] eax +
mov eax [ebp+var_10] +
mov [edi+44h] eax +
mov eax [ebp+var_C] +
push 1  +
mov [edi+4Ch] eax +
mov eax [esi+280h] +
lea ecx [esi+284h] +
push edi  +
push ecx  +
mov [edi+20h] eax +
call sub_1032AF1  +
mov ecx [esi+280h] +
test ecx ecx +
jz loc_10403E5  +
mov edx [ecx+38h] +
lea eax [edi+18h] +
mov [ebp+var_4] edx +
lea edx [ecx+34h] +
mov [eax] edx +
mov edx [ebp+var_4] +
mov [eax+4] edx +
mov [edx] eax +
mov [ecx+38h] eax +
inc dword ptr [ecx+3Ch]  +
and [ebp+var_4] 0 +
mov [esi+280h] edi +
cmp dword ptr [ebx+38h] 0 +
jz loc_10404EB  +
mov ecx [ebp+arg_0] +
push [ebp+var_4]  +
add ecx 8C4h +
call sub_103D30D  +
mov ecx esi +
mov ebx eax +
call sub_103F6CF  +
mov edi eax +
test edi edi +
jz loc_10404FE  +
mov eax [esi+294h] +
mov [edi+24h] eax +
inc dword ptr [esi+294h]  +
mov eax [ebx+40h] +
mov [edi+2Ch] eax +
mov eax [ebx+44h] +
push eax  +
push dword ptr [edi+2Ch]  +
mov ecx esi +
mov [edi+30h] eax +
call sub_103D6D0  +
mov eax [esi+280h] +
inc dword ptr [eax+28h]  +
push 18h  +
pop eax  +
mov [edi+40h] ax +
xor eax eax +
inc eax  +
mov [edi+42h] ax +
mov [edi+54h] al +
lea eax [ebp+var_14] +
push eax  +
push ebx  +
lea eax [ebx+30h] +
push eax  +
lea eax [ebx+10h] +
push eax  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1040227  +
test eax eax +
jl loc_10404F6  +
mov eax [ebp+var_14] +
mov [edi+48h] eax +
mov eax [ebp+var_10] +
mov [edi+44h] eax +
mov eax [ebp+var_C] +
mov [edi+4Ch] eax +
cmp dword ptr [ebx+2Ch] 0 +
jz loc_10404A8  +
lea eax [edi+50h] +
push eax  +
add ebx 20h +
push ebx  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_10401E6  +
test eax eax +
jl loc_10404F6  +
jmp loc_10404AC  +
or dword ptr [edi+50h] 0FFFFFFFFh +
mov ecx [esi+280h] +
lea edx [ecx+34h] +
mov ebx [edx+4] +
lea eax [edi+18h] +
mov [eax] edx +
mov [eax+4] ebx +
mov [ebx] eax +
push 1  +
mov [edx+4] eax +
inc dword ptr [ecx+3Ch]  +
push edi  +
lea ecx [esi+284h] +
push ecx  +
call sub_1032AF1  +
inc [ebp+var_4]  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_4] +
cmp ecx [eax+38h] +
jnz loc_10403F9  +
mov ebx eax +
mov ecx esi +
call sub_103F7F5  +
test eax eax +
jge loc_104050A  +
mov [ebp+arg_0] eax +
jmp loc_104057E  +
mov eax 555h +
mov ecx offset aNewattributeTh +
jmp loc_1040525  +
cmp byte ptr [ebx+3Ch] 0 +
jz loc_104057A  +
mov ecx esi +
call sub_103F6CF  +
test eax eax +
jnz loc_104054E  +
mov eax 593h +
mov ecx offset aCloserelementT +
mov [ebp+var_10] eax +
lea eax [ebp+var_18] +
mov [ebp+var_C] ecx +
push eax  +
lea ecx [ebp+arg_0] +
mov [ebp+arg_0] 0C0000017h +
mov [ebp+var_18] offset aDW7rtmBaseXm_3 +
mov [ebp+var_14] offset aCmicrodombu_15 +
call sub_103D6FE  +
jmp loc_104057E  +
push 4  +
pop ecx  +
push 3  +
mov [eax+40h] cx +
pop ecx  +
push 1  +
mov [eax+42h] cx +
push eax  +
lea ecx [esi+284h] +
push ecx  +
call sub_1032AF1  +
mov eax [esi+280h] +
mov eax [eax+20h] +
mov [esi+280h] eax +
and [ebp+arg_0] 0 +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov ecx [ebp+arg_0] +
call sub_103D5E4  +
cmp dword ptr [edi+280h] 0 +
mov ebx eax +
jz loc_1040696  +
mov ecx [ebp+arg_0] +
lea esi [edi+328h] +
push esi  +
push ebx  +
call sub_1044419  +
test eax eax +
jl loc_1040658  +
cmp dword ptr [esi] 0 +
jz loc_1040696  +
mov ecx edi +
call sub_103F6CF  +
mov esi eax +
test esi esi +
jnz loc_1040614  +
lea eax [ebp+var_10] +
mov esi 0C0000017h +
push eax  +
lea ecx [ebp+arg_0] +
mov [ebp+arg_0] esi +
mov [ebp+var_10] offset aDW7rtmBaseXm_3 +
mov [ebp+var_C] offset aCmicrodombu_16 +
mov [ebp+var_8] 663h +
mov [ebp+var_4] offset aNewpcdataThisA +
call sub_103D6FE  +
jmp loc_1040698  +
mov eax [edi+280h] +
mov [esi+20h] eax +
mov eax [ebx+10h] +
mov [esi+2Ch] eax +
mov eax [ebx+14h] +
push eax  +
push dword ptr [esi+2Ch]  +
mov ecx edi +
mov [esi+30h] eax +
call sub_103D6D0  +
push 8  +
pop eax  +
push 4  +
mov [esi+40h] ax +
pop eax  +
mov [esi+42h] ax +
lea eax [esi+44h] +
push eax  +
lea eax [edi+328h] +
push eax  +
mov ecx edi +
call sub_1040165  +
test eax eax +
jge loc_104065C  +
mov esi eax +
jmp loc_1040698  +
mov ecx [edi+280h] +
lea edx [ecx+34h] +
mov ebx [edx+4] +
lea eax [esi+18h] +
mov [eax] edx +
mov [eax+4] ebx +
mov [ebx] eax +
mov [edx+4] eax +
inc dword ptr [ecx+3Ch]  +
lea eax [edi+294h] +
mov ecx [eax] +
push 1  +
add edi 284h +
mov [esi+24h] ecx +
inc dword ptr [eax]  +
push esi  +
push edi  +
mov ecx edi +
call sub_1032AF1  +
xor esi esi +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov ecx [ebp+arg_0] +
call sub_103D5FD  +
cmp dword ptr [edi+280h] 0 +
mov ebx eax +
jnz loc_10406D9  +
mov eax 68Fh +
mov ecx offset aM_currentstrea +
mov [ebp+arg_0] 0C000A083h +
jmp loc_10406F7  +
mov ecx edi +
call sub_103F6CF  +
mov esi eax +
test esi esi +
jnz loc_104071C  +
mov eax 694h +
mov ecx offset aNewcdataThisAl +
mov [ebp+arg_0] 0C0000017h +
mov [ebp+var_8] eax +
lea eax [ebp+var_10] +
mov [ebp+var_4] ecx +
push eax  +
lea ecx [ebp+arg_0] +
mov [ebp+var_10] offset aDW7rtmBaseXm_3 +
mov [ebp+var_C] offset aCmicrodombu_17 +
call sub_103D6FE  +
jmp loc_104079E  +
lea eax [edi+294h] +
mov ecx [eax] +
mov [esi+24h] ecx +
inc dword ptr [eax]  +
mov eax [edi+280h] +
mov [esi+20h] eax +
mov eax [ebx+10h] +
mov [esi+2Ch] eax +
mov eax [ebx+14h] +
push eax  +
push dword ptr [esi+2Ch]  +
mov ecx edi +
mov [esi+30h] eax +
call sub_103D6D0  +
push 8  +
pop eax  +
push 5  +
mov [esi+40h] ax +
pop eax  +
mov [esi+42h] ax +
lea eax [esi+44h] +
push eax  +
push ebx  +
push [ebp+arg_0]  +
mov ecx edi +
call sub_10401E6  +
test eax eax +
jge loc_104076F  +
mov [ebp+arg_0] eax +
jmp loc_104079E  +
mov ecx [edi+280h] +
lea edx [ecx+34h] +
mov ebx [edx+4] +
lea eax [esi+18h] +
mov [eax] edx +
mov [eax+4] ebx +
mov [ebx] eax +
push 1  +
mov [edx+4] eax +
inc dword ptr [ecx+3Ch]  +
lea ecx [edi+284h] +
push esi  +
push ecx  +
call sub_1032AF1  +
and [ebp+arg_0] 0 +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A8h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov ebx ecx +
push 26h  +
add esi 17C8h +
pop ecx  +
lea edi [ebp+var_A8] +
movs   +
cmp [ebp+var_A8] 9 +
jz loc_10407DB  +
int 3  +
mov ecx ebx +
call sub_103F6CF  +
mov esi eax +
test esi esi +
jnz loc_104081D  +
lea eax [ebp+var_10] +
mov esi 0C0000017h +
push eax  +
lea ecx [ebp+arg_0] +
mov [ebp+arg_0] esi +
mov [ebp+var_10] offset aDW7rtmBaseXm_3 +
mov [ebp+var_C] offset aCmicrodombu_18 +
mov [ebp+var_8] 6BCh +
mov [ebp+var_4] offset aNewentitydeclT +
call sub_103D6FE  +
jmp loc_10408E6  +
mov eax [ebx+280h] +
push 1Ch  +
mov [esi+20h] eax +
pop eax  +
push 7  +
mov [esi+40h] ax +
pop eax  +
mov [esi+42h] ax +
lea eax [esi+44h] +
push eax  +
lea eax [ebp+var_80] +
push eax  +
push [ebp+arg_0]  +
mov ecx ebx +
call sub_10401E6  +
test eax eax +
jl loc_10408C5  +
or dword ptr [esi+58h] 0FFFFFFFFh +
xor eax eax +
inc eax  +
mov [esi+48h] ax +
lea eax [esi+4Ch] +
or dword ptr [eax] 0FFFFFFFFh +
lea ecx [esi+50h] +
or dword ptr [ecx] 0FFFFFFFFh +
lea edi [esi+54h] +
or dword ptr [edi] 0FFFFFFFFh +
mov edx [ebp+var_84] +
sub edx 0 +
jz loc_10408C9  +
dec edx  +
jz loc_1040896  +
dec edx  +
jnz loc_10407DA  +
push 2  +
pop eax  +
push ecx  +
mov [esi+48h] ax +
lea eax [ebp+var_50] +
push eax  +
push [ebp+arg_0]  +
mov ecx ebx +
call sub_10401E6  +
test eax eax +
jl loc_10408C5  +
push edi  +
lea eax [ebp+var_60] +
push eax  +
push [ebp+arg_0]  +
mov ecx ebx +
call sub_10401E6  +
test eax eax +
jl loc_10408C5  +
cmp [ebp+var_3C] 0 +
jbe loc_10408D5  +
lea eax [esi+58h] +
push eax  +
lea eax [ebp+var_40] +
push eax  +
push [ebp+arg_0]  +
mov ecx ebx +
call sub_10401E6  +
test eax eax +
jge loc_10408D5  +
mov esi eax +
jmp loc_10408E6  +
xor ecx ecx +
push eax  +
mov [esi+48h] cx +
lea eax [ebp+var_70] +
jmp loc_104089A  +
push 1  +
lea ecx [ebx+284h] +
push esi  +
push ecx  +
call sub_1032AF1  +
xor esi esi +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A8h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov ebx ecx +
push 26h  +
add esi 17C8h +
pop ecx  +
lea edi [ebp+var_A8] +
movs   +
cmp [ebp+var_A8] 0Ah +
jz loc_1040922  +
int 3  +
mov ecx ebx +
call sub_103F6CF  +
mov esi eax +
test esi esi +
jnz loc_1040961  +
lea eax [ebp+var_10] +
mov esi 0C0000017h +
push eax  +
lea ecx [ebp+arg_0] +
mov [ebp+arg_0] esi +
mov [ebp+var_10] offset aDW7rtmBaseXm_3 +
mov [ebp+var_C] offset aCmicrodombu_19 +
mov [ebp+var_8] 715h +
mov [ebp+var_4] offset aNewattlistThis +
call sub_103D6FE  +
jmp loc_10409CC  +
mov eax [ebx+280h] +
push 0Ch  +
mov [esi+20h] eax +
pop eax  +
push 8  +
mov [esi+40h] ax +
pop eax  +
mov [esi+42h] ax +
lea eax [esi+48h] +
push eax  +
lea eax [ebp+var_78] +
push eax  +
push [ebp+arg_0]  +
mov ecx ebx +
call sub_10401E6  +
test eax eax +
jl loc_10409AD  +
cmp [ebp+var_7C] 0 +
jbe loc_10409B1  +
lea eax [esi+44h] +
push eax  +
lea eax [ebp+var_88] +
push eax  +
push [ebp+arg_0]  +
mov ecx ebx +
call sub_10401E6  +
test eax eax +
jge loc_10409B5  +
mov esi eax +
jmp loc_10409CC  +
or dword ptr [esi+44h] 0FFFFFFFFh +
push 1  +
lea ecx [ebx+284h] +
push esi  +
push ecx  +
mov [ebx+280h] esi +
call sub_1032AF1  +
xor esi esi +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0ACh +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov ebx ecx +
push 26h  +
add esi 17C8h +
pop ecx  +
lea edi [ebp+var_AC] +
movs   +
cmp [ebp+var_AC] 0Bh +
jz loc_1040A08  +
int 3  +
mov ecx ebx +
call sub_103F6CF  +
mov esi eax +
test esi esi +
jnz loc_1040A29  +
mov ecx 746h +
mov edx offset aNewattdefThisA +
mov esi 0C0000017h +
jmp loc_1040B70  +
mov eax [ebx+280h] +
push 18h  +
mov [esi+20h] eax +
pop eax  +
push 0Ah  +
mov [esi+40h] ax +
pop eax  +
mov [esi+42h] ax +
lea eax [esi+48h] +
push eax  +
lea eax [ebp+var_7C] +
push eax  +
push [ebp+arg_0]  +
mov ecx ebx +
call sub_10401E6  +
test eax eax +
jl loc_1040BAF  +
mov eax [ebp+var_6C] +
push 9  +
pop ecx  +
cmp eax ecx +
ja loc_1040A07  +
push 2  +
pop edi  +
jmp ds:off_1040BD6[eax*4]  +
and dword ptr [esi+4Ch] 0 +
jmp loc_1040ABB  +
mov dword ptr [esi+4Ch] 1 +
jmp loc_1040ABB  +
mov [esi+4Ch] edi +
jmp loc_1040ABB  +
mov dword ptr [esi+4Ch] 3 +
jmp loc_1040ABB  +
mov dword ptr [esi+4Ch] 4 +
jmp loc_1040ABB  +
mov dword ptr [esi+4Ch] 5 +
jmp loc_1040ABB  +
mov dword ptr [esi+4Ch] 6 +
jmp loc_1040ABB  +
mov dword ptr [esi+4Ch] 7 +
jmp loc_1040ABB  +
mov [esi+4Ch] ecx +
jmp loc_1040ABB  +
mov dword ptr [esi+4Ch] 8 +
mov eax [ebp+var_58] +
xor ecx ecx +
sub eax ecx +
jz loc_1040AE8  +
dec eax  +
jz loc_1040ADF  +
dec eax  +
jz loc_1040ADA  +
dec eax  +
jnz loc_1040A07  +
mov dword ptr [esi+50h] 3 +
jmp loc_1040AEB  +
mov [esi+50h] edi +
jmp loc_1040AEB  +
mov dword ptr [esi+50h] 1 +
jmp loc_1040AEB  +
mov [esi+50h] ecx +
cmp [ebp+var_80] ecx +
jbe loc_1040B0E  +
lea eax [esi+44h] +
push eax  +
lea eax [ebp+var_8C] +
push eax  +
push [ebp+arg_0]  +
mov ecx ebx +
call sub_10401E6  +
test eax eax +
jge loc_1040B12  +
jmp loc_1040BAF  +
or dword ptr [esi+44h] 0FFFFFFFFh +
mov eax [esi+50h] +
cmp eax edi +
jz loc_1040B95  +
cmp eax 3 +
jz loc_1040B95  +
or dword ptr [esi+54h] 0FFFFFFFFh +
mov eax [ebx+280h] +
mov ecx [eax+44h] +
add eax 40h +
shl ecx 10h +
or ecx [eax+8] +
and [ebp+var_4] 0 +
lea eax [ebp+var_10] +
mov [ebp+var_10] eax +
mov [ebp+var_C] eax +
mov [ebp+var_8] eax +
push 0  +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+arg_0] +
mov [ebp+arg_0] ecx +
push eax  +
lea ecx [ebx+29Ch] +
call sub_103FC04  +
test eax eax +
jge loc_1040BB3  +
mov ecx 7C5h +
mov edx offset aM_attdeflist_1 +
mov esi eax +
lea eax [ebp+var_10] +
mov [ebp+var_8] ecx +
push eax  +
lea ecx [ebp+arg_0] +
mov [ebp+arg_0] esi +
mov [ebp+var_10] offset aDW7rtmBaseXm_3 +
mov [ebp+var_C] offset aCmicrodombu_20 +
mov [ebp+var_4] edx +
call sub_103D6FE  +
jmp loc_1040BCD  +
lea eax [esi+54h] +
push eax  +
lea eax [ebp+var_54] +
push eax  +
push [ebp+arg_0]  +
mov ecx ebx +
call sub_10401E6  +
test eax eax +
jge loc_1040B22  +
mov esi eax +
jmp loc_1040BCD  +
mov ecx [ebp+var_14] +
push esi  +
call sub_103D79E  +
push 1  +
lea ecx [ebx+284h] +
push esi  +
push ecx  +
call sub_1032AF1  +
xor esi esi +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov ecx [ebp+arg_0] +
call sub_103D5CB  +
mov ebx eax +
mov ecx edi +
mov [ebp+var_4] ebx +
call sub_103F6CF  +
mov esi eax +
test esi esi +
jnz loc_1040C5F  +
lea eax [ebp+var_14] +
mov esi 0C0000017h +
push eax  +
lea ecx [ebp+arg_0] +
mov [ebp+arg_0] esi +
mov [ebp+var_14] offset aDW7rtmBaseXm_3 +
mov [ebp+var_10] offset aCmicrodombu_21 +
mov [ebp+var_C] 7FAh +
mov [ebp+var_8] offset aNewcommentThis +
call sub_103D6FE  +
jmp loc_1040CF4  +
mov eax [edi+280h] +
mov [esi+20h] eax +
mov eax [ebx+10h] +
mov [esi+2Ch] eax +
mov eax [ebx+14h] +
push eax  +
push dword ptr [esi+2Ch]  +
mov ecx edi +
mov [esi+30h] eax +
call sub_103D6D0  +
cmp dword ptr [edi+280h] 0 +
jz loc_1040CB4  +
lea eax [edi+294h] +
mov ecx [eax] +
mov [esi+24h] ecx +
mov ecx [edi+280h] +
inc dword ptr [eax]  +
lea edx [ecx+34h] +
mov ebx [edx+4] +
lea eax [esi+18h] +
mov [eax+4] ebx +
mov [eax] edx +
mov [ebx] eax +
mov ebx [ebp+var_4] +
mov [edx+4] eax +
inc dword ptr [ecx+3Ch]  +
push 8  +
pop eax  +
mov [esi+40h] ax +
push 0Dh  +
pop eax  +
mov [esi+42h] ax +
cmp dword ptr [ebx+4] 0 +
jbe loc_1040CDF  +
lea eax [esi+44h] +
push eax  +
push ebx  +
push [ebp+arg_0]  +
mov ecx edi +
call sub_10401E6  +
test eax eax +
jge loc_1040CE3  +
mov esi eax +
jmp loc_1040CF4  +
or dword ptr [esi+44h] 0FFFFFFFFh +
push 1  +
lea ecx [edi+284h] +
push esi  +
push ecx  +
call sub_1032AF1  +
xor esi esi +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A8h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov ebx ecx +
push 26h  +
add esi 17C8h +
pop ecx  +
lea edi [ebp+var_A8] +
movs   +
cmp [ebp+var_A8] 5 +
jz loc_1040D30  +
int 3  +
mov ecx ebx +
call sub_103F6CF  +
mov esi eax +
test esi esi +
jnz loc_1040D72  +
lea eax [ebp+var_10] +
mov esi 0C0000017h +
push eax  +
lea ecx [ebp+arg_0] +
mov [ebp+arg_0] esi +
mov [ebp+var_10] offset aDW7rtmBaseXm_3 +
mov [ebp+var_C] offset aCmicrodombu_22 +
mov [ebp+var_8] 82Fh +
mov [ebp+var_4] offset aNewprocessingi +
call sub_103D6FE  +
jmp loc_1040E06  +
mov eax [ebx+280h] +
mov [esi+20h] eax +
push 0Ch  +
pop eax  +
mov [esi+40h] ax +
mov [esi+42h] ax +
cmp dword ptr [ebx+280h] 0 +
jz loc_1040DB8  +
lea eax [ebx+294h] +
mov ecx [eax] +
mov [esi+24h] ecx +
mov ecx [ebx+280h] +
inc dword ptr [eax]  +
lea edx [ecx+34h] +
mov edi [edx+4] +
lea eax [esi+18h] +
mov [eax] edx +
mov [eax+4] edi +
mov [edi] eax +
mov [edx+4] eax +
inc dword ptr [ecx+3Ch]  +
lea eax [esi+44h] +
push eax  +
lea eax [ebp+var_88] +
push eax  +
push [ebp+arg_0]  +
mov ecx ebx +
call sub_10401E6  +
test eax eax +
jl loc_1040DED  +
cmp [ebp+var_74] 0 +
jbe loc_1040DF1  +
lea eax [esi+48h] +
push eax  +
lea eax [ebp+var_78] +
push eax  +
push [ebp+arg_0]  +
mov ecx ebx +
call sub_10401E6  +
test eax eax +
jge loc_1040DF5  +
mov esi eax +
jmp loc_1040E06  +
or dword ptr [esi+48h] 0FFFFFFFFh +
push 1  +
lea ecx [ebx+284h] +
push esi  +
push ecx  +
call sub_1032AF1  +
xor esi esi +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A0h +
and [ebp+var_10] 0 +
push edi  +
lea edi [ecx+284h] +
lea ecx [ebp+var_A0] +
call sub_103DA12  +
lea ecx [ebp+var_A0] +
call sub_103EC2E  +
test eax eax +
jge loc_1040E54  +
lea ecx [ebp+var_A0] +
call sub_10396D7  +
jmp loc_1040ED8  +
push ebx  +
push esi  +
mov esi [edi] +
push 8  +
pop ebx  +
test esi esi +
jz loc_1040EC8  +
cmp esi edi +
jz loc_1040E75  +
movzx eax word ptr [esi+42h] +
push eax  +
call sub_103D2D6  +
test al al +
jnz loc_1040E75  +
mov esi [esi] +
jmp loc_1040E5B  +
test esi esi +
jz loc_1040EC8  +
cmp esi edi +
jz loc_1040EC8  +
movzx eax word ptr [esi+42h] +
sub eax 7 +
jz loc_1040EC1  +
dec eax  +
jz loc_1040E94  +
dec eax  +
jz loc_1040EC4  +
dec eax  +
jnz loc_1040EC8  +
add ebx 10h +
jmp loc_1040EC4  +
mov eax [esi+44h] +
mov [ebp+var_C] eax +
mov eax [esi+48h] +
mov [ebp+var_8] eax +
lea eax [ebp-1] +
push eax  +
push 0  +
lea eax [ebp+var_C] +
push eax  +
lea ecx [ebp+var_A0] +
call sub_103FD9F  +
test eax eax +
jl loc_1040ECB  +
cmp [ebp+var_1] 0 +
jnz loc_1040EC4  +
jmp loc_1040E8F  +
add ebx 18h +
mov esi [esi] +
jmp loc_1040E75  +
mov [ebp+var_10] ebx +
lea ecx [ebp+var_A0] +
call sub_10396D7  +
pop esi  +
pop ebx  +
mov eax [ebp+var_10] +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+284h] +
push offset nullsub_3  +
mov ecx edi +
call sub_1032B9B  +
lea ebx [esi+270h] +
push offset loc_103DF4C  +
mov ecx ebx +
call sub_1032B9B  +
lea ecx [esi+328h] +
call sub_1032B6D  +
lea ecx [esi+29Ch] +
call sub_103FEA3  +
xor eax eax +
mov [edi+0Ch] eax +
mov [edi+8] eax +
pop edi  +
lea ecx [esi+4] +
pop esi  +
mov [ebx+0Ch] eax +
mov [ebx+8] eax +
pop ebx  +
jmp loc_104007C  +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
xor edi edi +
lea ecx [esi+4] +
mov [esi] edi +
call sub_103DA4C  +
lea eax [esi+270h] +
mov [eax+0Ch] edi +
mov [eax] eax +
mov [eax+4] eax +
mov [eax+8] eax +
lea eax [esi+284h] +
mov [esi+280h] edi +
mov [eax+0Ch] edi +
mov [eax] eax +
mov [eax+4] eax +
mov [eax+8] eax +
lea ecx [esi+29Ch] +
mov [esi+294h] edi +
mov [esi+298h] edi +
call sub_103DA12  +
lea eax [esi+328h] +
mov [eax] edi +
mov [eax+4] edi +
mov [eax+8] edi +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov byte ptr [ecx+1870h] 1 +
mov ecx [ecx+186Ch] +
pop ebp  +
jmp loc_104030D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+186Ch] +
pop ebp  +
jmp loc_1040C03  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+186Ch] +
pop ebp  +
jmp loc_10406A6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+186Ch] +
pop ebp  +
jmp loc_104058D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+186Ch] +
pop ebp  +
jmp loc_10407AD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+186Ch] +
pop ebp  +
jmp loc_10408F4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+186Ch] +
pop ebp  +
jmp loc_10409DA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+186Ch] +
pop ebp  +
jmp loc_1040D02  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 218h +
mov eax [ebp+arg_0] +
and [ebp+var_10] 0 +
push ebx  +
push esi  +
mov esi [eax+4] +
mov ebx ecx +
mov ecx [eax+8] +
push edi  +
mov edi [eax] +
or eax 0FFFFFFFFh +
add esi ecx +
add edi ecx +
lea ecx [ebp+var_218] +
mov [ebp+var_1C] ebx +
mov [ebp+var_8] esi +
mov [ebp+var_18] eax +
mov [ebp+var_38] eax +
mov [ebp+var_34] eax +
mov [ebp+var_24] eax +
mov [ebp+var_20] eax +
call sub_103DA12  +
lea ecx [ebp+var_18C] +
call sub_103DA12  +
lea ecx [ebp+var_100] +
call sub_103DA12  +
lea ecx [ebp+var_218] +
call sub_103EC2E  +
test eax eax +
jge loc_10410D4  +
mov esi eax +
jmp loc_104156C  +
lea ecx [ebp+var_18C] +
call sub_103EC2E  +
lea ecx [ebp+var_100] +
test eax eax +
jge loc_10410F0  +
mov esi eax +
jmp loc_1041572  +
call sub_103EC7C  +
test eax eax +
jl loc_10410CD  +
lea eax [ebp+var_64] +
push eax  +
push offset dword_100EAB0  +
mov ecx ebx +
call sub_103F45E  +
test eax eax +
jl loc_10410CD  +
lea eax [ebp+var_4C] +
push eax  +
push offset dword_100EAA4  +
mov ecx ebx +
call sub_103F45E  +
test eax eax +
jl loc_10410CD  +
sub esi edi +
cmp esi 14h +
jnb loc_1041129  +
int 3  +
mov dword ptr [edi] 6C44644Dh +
mov eax [ebx+294h] +
mov [edi+8] eax +
cmp dword ptr [ebx+294h] 0FFh +
ja loc_1041154  +
mov dword ptr [edi+4] 1 +
mov [ebp+var_14] offset loc_103DAEE +
jmp loc_104117E  +
cmp dword ptr [ebx+294h] 0FFFFh +
ja loc_1041170  +
mov dword ptr [edi+4] 2 +
mov [ebp+var_14] offset loc_103DB72 +
jmp loc_104117E  +
mov dword ptr [edi+4] 3 +
mov [ebp+var_14] offset loc_103DC02 +
lea ecx [ebx+284h] +
mov edx [ecx] +
mov eax edx +
sub eax ecx +
lea esi [edi+17h] +
and esi 0FFFFFFFCh +
neg eax  +
sbb eax eax +
and eax edx +
cmp word ptr [eax+42h] 0Eh +
jnz loc_1041128  +
mov ecx [eax+24h] +
add eax 34h +
mov [edi+10h] ecx +
mov ecx [eax] +
jmp loc_10411B3  +
cmp word ptr [ecx+2Ah] 0 +
jz loc_10411BC  +
mov ecx [ecx] +
cmp ecx eax +
jnz loc_10411AA  +
jmp loc_1041128  +
mov eax [ecx+0Ch] +
mov [edi+0Ch] eax +
mov edi [ebx+284h] +
mov eax [ebp+arg_0] +
test edi edi +
jz loc_104155C  +
lea ecx [ebx+284h] +
cmp edi ecx +
jz loc_104155C  +
movzx eax word ptr [edi+42h] +
cmp eax 0Eh +
ja loc_1041128  +
jmp ds:off_1041596[eax*4]  +
mov eax [edi+28h] +
lea ecx [ebp-2] +
push ecx  +
lea ecx [ebp-9] +
push ecx  +
mov ecx [edi+3Ch] +
sub ecx eax +
push ecx  +
mov ecx [ebp+var_1C] +
push eax  +
mov ebx esi +
call sub_103D28E  +
lea ecx [ebp+var_18C] +
mov [ebp+var_2C] eax +
mov [ebp+var_28] edx +
call sub_103FE4F  +
cmp [ebp+var_2] 0 +
mov cl [ebp+var_9] +
setnz al  +
shl al 3 +
and cl 7 +
or al cl +
shl al 4 +
or al 1 +
mov [esi] al +
mov ecx [edi+44h] +
lea eax [esi+0Ch] +
mov [eax] ecx +
mov edx [edi+48h] +
mov eax [eax] +
lea ecx [esi+10h] +
mov [ecx] edx +
mov edx [edi+4Ch] +
mov [ebp+var_18] ecx +
lea ecx [esi+14h] +
mov [ecx] edx +
mov edx [ebp+var_18] +
mov edx [edx] +
mov [ebp+var_24] eax +
mov eax [ecx] +
mov [ebp+var_20] eax +
lea eax [ebp+var_40] +
push eax  +
lea eax [ebp+var_24] +
add esi 1Bh +
push eax  +
lea ecx [ebp+var_218] +
and esi 0FFFFFFFCh +
mov [ebp+var_18] edx +
call sub_103F05B  +
test eax eax +
jl loc_10410CD  +
mov eax [ebp+var_40] +
test eax eax +
jnz loc_1041297  +
mov eax 0FFFFh +
jmp loc_104129A  +
mov ax [eax] +
mov [ebx+8] ax +
mov eax [ebp+var_28] +
test eax eax +
ja loc_10412C4  +
jb loc_10412B0  +
cmp [ebp+var_2C] 400000h +
jnb loc_10412C4  +
mov eax [ebx+4] +
xor eax [ebp+var_2C] +
and eax 3FFFFFh +
xor [ebx+4] eax +
and byte ptr [ebx+1] 0FEh +
jmp loc_10412FA  +
mov ecx [ebp+var_8] +
sub ecx esi +
cmp ecx 4 +
jb loc_1041128  +
mov edx [ebp+var_2C] +
mov ecx 3FFFFFh +
and edx ecx +
mov [esi] edx +
mov edx [ebp+var_2C] +
or byte ptr [ebx+1] 1 +
shrd edx eax +
xor edx [ebx+4] +
add esi 7 +
and edx ecx +
xor [ebx+4] edx +
shr eax 16h +
and esi 0FFFFFFFCh +
mov ecx [ebp+var_1C] +
push edi  +
lea eax [ebp+var_48] +
push eax  +
push esi  +
call [ebp+var_14]  +
test eax eax +
jl loc_10410CD  +
mov eax [ebp+var_48] +
lea esi [eax+esi+3] +
and esi 0FFFFFFFCh +
jmp loc_1041501  +
or [ebp+var_24] 0FFFFFFFFh +
or [ebp+var_20] 0FFFFFFFFh +
jmp loc_1041501  +
mov eax [ebp+var_8] +
sub eax esi +
cmp eax 4 +
jb loc_1041128  +
mov edx [edi+3Ch] +
lea eax [esi+2] +
push eax  +
lea ecx [ebp+var_30] +
call sub_1032412  +
cmp [ebp+var_30] 0 +
jl loc_104150B  +
mov byte ptr [esi] 7 +
push edi  +
lea eax [ebp+var_3C] +
add esi 7 +
push eax  +
and esi 0FFFFFFFCh +
push esi  +
mov ecx ebx +
call [ebp+var_14]  +
test eax eax +
jl loc_10410CD  +
mov eax [ebp+var_3C] +
jmp loc_1041311  +
mov eax [ebp+var_8] +
sub eax esi +
cmp eax 14h +
jb loc_1041128  +
push dword ptr [edi+4Ch]  +
lea ecx [ebp+var_18C] +
push dword ptr [edi+48h]  +
call sub_103FCA0  +
test eax eax +
jl loc_10410CD  +
mov al 2 +
mov [esi] al +
mov ecx [edi+4Ch] +
mov [esi+0Ch] ecx +
mov ecx [edi+48h] +
mov [esi+8] ecx +
mov ecx [edi+44h] +
mov [esi+4] ecx +
mov ecx [edi+50h] +
mov [esi+10h] ecx +
cmp byte ptr [edi+54h] 0 +
jnz loc_10413BF  +
or al 20h +
mov [esi] al +
mov eax [edi+44h] +
mov [ebp+var_6C] eax +
mov eax [edi+4Ch] +
mov [ebp+var_68] eax +
lea eax [ebp+var_50] +
push eax  +
lea eax [ebp+var_6C] +
push eax  +
lea eax [ebp+var_24] +
push eax  +
lea ecx [ebp+var_100] +
call sub_103EFEA  +
test eax eax +
jl loc_10410CD  +
mov eax [ebp+var_50] +
test eax eax +
jz loc_10413FC  +
mov eax [eax] +
cmp dword ptr [eax+0Ch] 1 +
jnz loc_10413FC  +
or byte ptr [esi] 10h +
mov eax [esi+8] +
mov ecx [ebp+var_64] +
cmp eax ecx +
jz loc_1041410  +
cmp eax 0FFFFFFFFh +
jnz loc_104141B  +
cmp [ebp+var_18] ecx +
jnz loc_104141B  +
mov eax [esi+0Ch] +
cmp eax [ebp+var_4C] +
jnz loc_104141B  +
or byte ptr [esi] 10h +
add esi 17h +
jmp loc_1041315  +
mov eax [ebp+var_8] +
sub eax esi +
cmp eax 8 +
jb loc_1041128  +
mov byte ptr [esi] 13h +
mov eax [edi+44h] +
mov [esi+4] eax +
add esi 0Bh +
jmp loc_1041315  +
mov eax [ebp+var_8] +
sub eax esi +
cmp eax 8 +
jb loc_1041128  +
mov byte ptr [esi] 3 +
jmp loc_1041434  +
mov eax [ebp+var_8] +
sub eax esi +
cmp eax 8 +
jb loc_1041128  +
mov byte ptr [esi] 6 +
jmp loc_1041434  +
cmp dword ptr [edi+20h] 0 +
jz loc_1041501  +
mov eax [ebp+var_8] +
sub eax esi +
cmp eax 0Ch +
jb loc_1041128  +
mov byte ptr [esi] 5 +
mov eax [edi+44h] +
mov [esi+4] eax +
mov eax [edi+48h] +
mov [esi+8] eax +
add esi 0Fh +
jmp loc_1041315  +
mov eax [edi+44h] +
mov [ebp+var_74] eax +
mov eax [edi+48h] +
mov [ebp+var_70] eax +
lea eax [ebp-1] +
push eax  +
push [ebp+var_10]  +
lea eax [ebp+var_74] +
push eax  +
lea ecx [ebp+var_218] +
call sub_103FD9F  +
test eax eax +
jl loc_10410CD  +
cmp [ebp+var_1] 0 +
jnz loc_1041501  +
inc [ebp+var_10]  +
jmp loc_1041501  +
mov eax [edi+44h] +
mov [ebp+var_58] eax +
mov eax [edi+48h] +
mov [ebp+var_54] eax +
lea eax [edi+40h] +
push eax  +
lea eax [ebp+var_58] +
push eax  +
lea eax [ebp+var_38] +
push eax  +
lea ecx [ebp+var_100] +
call sub_103FD29  +
test eax eax +
jl loc_10410CD  +
jmp loc_10414C7  +
or [ebp+var_38] 0FFFFFFFFh +
or [ebp+var_34] 0FFFFFFFFh +
mov edi [edi] +
mov ebx [ebp+var_1C] +
jmp loc_10411C8  +
mov esi [ebp+var_30] +
lea ecx [ebp+var_100] +
mov [ebp+arg_0] esi +
call sub_10396D7  +
lea ecx [ebp+var_18C] +
call sub_10396D7  +
lea ecx [ebp+var_218] +
call sub_10396D7  +
lea eax [ebp+var_60] +
push eax  +
lea ecx [ebp+arg_0] +
mov [ebp+var_60] offset aDW7rtmBaseXm_3 +
mov [ebp+var_5C] offset aCmicrodombu_23 +
mov [ebp+var_58] 0A7Dh +
mov [ebp+var_54] offset aBuclRtlConvert +
call sub_103D6FE  +
jmp loc_104158D  +
sub esi [eax+8] +
mov [eax] esi +
cmp esi [eax+4] +
ja loc_1041128  +
xor esi esi +
lea ecx [ebp+var_100] +
call sub_10396D7  +
lea ecx [ebp+var_18C] +
call sub_10396D7  +
lea ecx [ebp+var_218] +
call sub_10396D7  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1040F42  +
push esi  +
lea ecx [esi+334h] +
call sub_103E97B  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
call sub_10443B1  +
test eax eax +
jl loc_10416C2  +
push esi  +
mov ecx esi +
call sub_103FE39  +
jmp loc_10416A1  +
mov ecx esi +
call sub_1044285  +
test eax eax +
jl loc_10416C2  +
mov eax [esi+17C8h] +
cmp eax 0Dh +
ja loc_10416A5  +
jmp ds:off_10416CA[eax*4]  +
push esi  +
mov ecx esi +
call sub_1040FAB  +
jmp loc_10416A1  +
push esi  +
mov ecx esi +
call sub_103FE10  +
jmp loc_10416A1  +
push esi  +
mov ecx esi +
call sub_1040FDE  +
jmp loc_10416A1  +
push esi  +
mov ecx esi +
call sub_1040FF4  +
jmp loc_10416A1  +
push esi  +
mov ecx esi +
call sub_104100A  +
jmp loc_10416A1  +
push esi  +
mov ecx esi +
call sub_1041020  +
jmp loc_10416A1  +
push esi  +
mov ecx esi +
call sub_1041036  +
jmp loc_10416A1  +
push esi  +
mov ecx esi +
call sub_103FE23  +
jmp loc_10416A1  +
push esi  +
mov ecx esi +
call sub_104104C  +
jmp loc_10416A1  +
push esi  +
mov ecx esi +
call sub_1040FC8  +
test eax eax +
jl loc_10416C2  +
cmp dword ptr [esi+17C8h] 1 +
jnz loc_104161E  +
jmp loc_10416C0  +
push esi  +
mov ecx esi +
call sub_103E9AB  +
test eax eax +
jl loc_10416C2  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
push 1BACh  +
mov esi ecx +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1041724  +
mov ecx eax +
call sub_10415D7  +
jmp loc_1041726  +
xor eax eax +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+334h] +
call sub_103DF24  +
mov ecx esi +
pop esi  +
jmp loc_1040EE3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
mov ebx ecx +
push edi  +
mov [ebp+var_4] ebx +
call sub_103F494  +
mov esi eax +
add esi 3 +
mov ecx ebx +
and esi 0FFFFFFFCh +
call sub_103EAE8  +
mov edi eax +
add edi 3 +
mov ecx ebx +
and edi 0FFFFFFFCh +
call sub_1040E14  +
mov ecx [ebp+var_4] +
mov ebx eax +
add ebx 3 +
and ebx 0FFFFFFFCh +
call sub_103EA80  +
add eax 3 +
lea ecx [esi+18h] +
and eax 0FFFFFFFCh +
cmp ecx 18h +
jb loc_10417C2  +
cmp ecx esi +
jb loc_10417C2  +
lea edx [ecx+edi] +
cmp edx ecx +
jb loc_10417C2  +
cmp edx edi +
jb loc_10417C2  +
lea ecx [edx+eax] +
cmp ecx edx +
jb loc_10417C2  +
cmp ecx eax +
jb loc_10417C2  +
lea eax [ecx+ebx] +
cmp eax ecx +
jb loc_10417C2  +
cmp eax ebx +
jnb loc_10417F9  +
mov eax 41Ch +
mov ecx offset aBuclRtlAddSi_3 +
mov esi 0C0000095h +
mov [ebp+var_C] eax +
lea eax [ebp+var_14] +
mov [ebp+var_8] ecx +
push eax  +
lea ecx [ebp+arg_4] +
mov [ebp+arg_4] esi +
mov [ebp+var_14] offset aDW7rtmBaseXm_3 +
mov [ebp+var_10] offset aCmicrodombu_24 +
call sub_103D6FE  +
jmp loc_10418CA  +
cmp eax 0FFFFFFFFh +
jbe loc_104180F  +
mov eax 41Eh +
mov ecx offset aCbrequiredsize +
mov esi 0C000042Bh +
jmp loc_10417D1  +
mov ebx [ebp+arg_4] +
cmp [ebx+4] eax +
jnb loc_1041828  +
push ebx  +
push eax  +
push 0  +
call sub_10310C6  +
test eax eax +
jl loc_10418BC  +
mov esi ebx +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push [ebp+var_C]  +
mov esi [ebp+var_8] +
push 0  +
push esi  +
call memset  +
mov edi [ebp+var_4] +
add esp 0Ch +
push 18h  +
pop eax  +
mov [ebp+var_10] eax +
mov [esi+8] eax +
lea eax [ebp+var_10] +
push eax  +
mov ecx edi +
mov dword ptr [esi] 6448644Dh +
call loc_103F53B  +
test eax eax +
jl loc_10418BC  +
mov eax [ebp+var_10] +
add eax 3 +
and eax 0FFFFFFFCh +
mov [ebp+var_10] eax +
mov [esi+0Ch] eax +
lea eax [ebp+var_10] +
push eax  +
mov ecx edi +
call sub_1041062  +
test eax eax +
jl loc_10418BC  +
mov eax [ebp+var_10] +
add eax 3 +
and eax 0FFFFFFFCh +
mov [ebp+var_10] eax +
mov [esi+14h] eax +
lea eax [ebp+var_10] +
push eax  +
mov ecx edi +
call sub_103E0ED  +
test eax eax +
jl loc_10418BC  +
mov eax [ebp+var_10] +
add eax 3 +
and eax 0FFFFFFFCh +
mov [ebp+var_10] eax +
mov [esi+10h] eax +
lea eax [ebp+var_10] +
push eax  +
mov ecx edi +
call sub_103DF5D  +
test eax eax +
jge loc_10418C0  +
mov esi eax +
jmp loc_10418CA  +
mov eax [ebp+var_10] +
mov [esi+4] eax +
mov [ebx] eax +
xor esi esi +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_104172F  +
test [ebp+arg_0] 1 +
jz loc_10418F2  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1041911  +
push 1  +
call sub_10418D8  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
push edi  +
mov edi [ebp+arg_8] +
xor ebx ebx +
mov ecx edi +
mov [ebp+var_4] 0C00000E5h +
mov [ebp+var_10] ebx +
mov [ebp+var_14] ebx +
mov [ebp+var_C] ebx +
mov [ebp+var_8] ebx +
call sub_10306EA  +
test al al +
jnz loc_1041967  +
lea ecx [ebp+var_4] +
call sub_102FD01  +
lea ecx [ebp+var_14] +
call sub_102D479  +
mov [ebp+var_1C] 0C99h +
mov [ebp+var_18] offset aRtlislblobva_4 +
jmp loc_104199D  +
lea ecx [ebp+var_8] +
call sub_1041707  +
test eax eax +
jnz loc_10419BC  +
mov [ebp+var_4] 0C0000017h +
cmp [ebp+var_8] ebx +
jz loc_1041987  +
push [ebp+var_8]  +
call sub_10418FE  +
lea ecx [ebp+var_14] +
call sub_102D479  +
mov [ebp+var_1C] 0C9Bh +
mov [ebp+var_18] offset aLocals_allocat +
lea eax [ebp+var_24] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_20] offset aMicrodomimp_44 +
mov [ebp+var_24] offset aDW7rtmBaseXm_3 +
call sub_103D6FE  +
jmp loc_1041A53  +
push esi  +
mov esi [ebp+var_8] +
mov ecx esi +
call sub_103E927  +
cmp eax ebx +
jge loc_10419D4  +
mov [ebp+var_4] eax +
cmp esi ebx +
jz loc_1041A4A  +
jmp loc_1041A44  +
mov ebx [ebp+arg_0] +
mov [esi+1BA8h] ebx +
push dword ptr [edi]  +
lea ecx [esi+334h] +
push dword ptr [edi+8]  +
call sub_10415F6  +
test eax eax +
jge loc_10419F6  +
mov [ebp+var_4] eax +
jmp loc_1041A44  +
cmp byte ptr [esi+1BA4h] 0 +
jnz loc_1041A24  +
test ebx ebx +
jz loc_1041A35  +
and [ebp+var_20] 0 +
mov edx [ebx] +
xor eax eax +
lea edi [ebp+var_1C] +
stos   +
stos   +
lea eax [ebp+var_20] +
push eax  +
push 0C000000Dh  +
xor eax eax +
push eax  +
push eax  +
push eax  +
mov ecx ebx +
call dword ptr [edx]  +
jmp loc_1041A35  +
lea eax [ebp+var_14] +
push eax  +
push 0  +
mov ecx esi +
call sub_104174C  +
test eax eax +
jl loc_10419F1  +
push [ebp+arg_C]  +
lea ecx [ebp+var_14] +
call sub_1035D7C  +
and [ebp+var_4] 0 +
push esi  +
call sub_10418FE  +
lea ecx [ebp+var_14] +
call sub_102D479  +
pop esi  +
mov eax [ebp+var_4] +
pop edi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push [ebp+arg_C]  +
xor eax eax +
push 64h  +
mov edi esi +
stos   +
lea eax [esi+284h] +
push eax  +
push 32h  +
push 14h  +
lea eax [esi+4] +
push eax  +
call sub_1041FED  +
test eax eax +
jl loc_1041ABA  +
push [ebp+arg_C]  +
lea eax [esi+68h] +
push 21Ch  +
push eax  +
push 32h  +
push 6Ch  +
lea eax [esi+34h] +
push eax  +
call sub_1041FED  +
test eax eax +
jl loc_1041ABA  +
mov ecx [ebp+arg_8] +
and dword ptr [esi+30h] 0 +
mov [esi+64h] ecx +
mov ecx [ebp+arg_4] +
mov [esi+60h] ecx +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_1041AE2  +
push esi  +
push esi  +
push 3Fh  +
push 0C000000Dh  +
call sub_104450C  +
jmp loc_1041AF4  +
lea eax [esi+4] +
push eax  +
call sub_1042203  +
add esi 34h +
push esi  +
call sub_1042203  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
xor ebx ebx +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
mov [ebp+var_C] ebx +
mov [ebp+var_4] ebx +
mov [ebp+var_8] ebx +
mov [ebp+var_10] ebx +
cmp [esi+30h] ebx +
jbe loc_1041B7E  +
push ebx  +
lea eax [ebp+var_4] +
push eax  +
push edi  +
lea eax [esi+34h] +
push eax  +
call sub_104213C  +
cmp eax ebx +
jl loc_1041C64  +
mov eax [ebp+var_4] +
cmp [eax] bl +
jnz loc_1041B49  +
cmp [ebp+var_8] ebx +
jnz loc_1041B67  +
mov [ebp+var_8] eax +
jmp loc_1041B67  +
lea ecx [ebp+var_10] +
push ecx  +
add eax 4 +
push eax  +
push [ebp+arg_C]  +
push dword ptr [esi+64h]  +
call dword ptr [esi+60h]  +
cmp eax ebx +
jl loc_1041C64  +
cmp [ebp+var_10] ebx +
jz loc_1041B72  +
inc edi  +
mov [ebp+var_4] ebx +
cmp edi [esi+30h] +
jb loc_1041B21  +
jmp loc_1041B79  +
mov eax [ebp+var_4] +
cmp eax ebx +
jnz loc_1041BEE  +
cmp [ebp+var_8] ebx +
jnz loc_1041BCF  +
mov eax [esi+30h] +
lea ecx [eax+1] +
push 1  +
mov [esi+30h] ecx +
lea ecx [ebp+var_8] +
push ecx  +
push eax  +
lea eax [esi+34h] +
push eax  +
call sub_104213C  +
cmp eax ebx +
jl loc_1041C64  +
push 6Ch  +
push ebx  +
push [ebp+var_8]  +
call memset  +
mov eax [ebp+var_8] +
add esp 0Ch +
add esi 4Ch +
push esi  +
push 28h  +
lea ecx [eax+44h] +
push ecx  +
push 14h  +
push 14h  +
add eax 18h +
push eax  +
call sub_1041FED  +
cmp eax ebx +
jl loc_1041C64  +
mov eax [ebp+var_8] +
mov esi [ebp+arg_C] +
mov [ebp+var_4] eax +
mov byte ptr [eax] 1 +
mov eax [ebp+var_4] +
mov [eax+14h] ebx +
mov edi [ebp+var_4] +
add edi 4 +
movs   +
movs   +
movs   +
movs   +
mov eax [ebp+var_4] +
mov ecx [eax+14h] +
mov esi [ebp+arg_4] +
cmp ecx ebx +
jbe loc_1041C2E  +
push ebx  +
lea edx [ebp+var_C] +
push edx  +
dec ecx  +
push ecx  +
add eax 18h +
push eax  +
call sub_104213C  +
cmp eax ebx +
jl loc_1041C64  +
mov eax [ebp+var_4] +
cmp [eax] bl +
jz loc_1041C2E  +
mov ecx [ebp+var_C] +
cmp [ecx+10h] esi +
jnz loc_1041C2E  +
push ebx  +
push ebx  +
push 0E0h  +
push 0C00000BDh  +
call sub_104450C  +
jmp loc_1041C64  +
mov ecx [eax+14h] +
lea edx [ecx+1] +
mov [eax+14h] edx +
push 1  +
lea eax [ebp+var_C] +
push eax  +
mov eax [ebp+var_4] +
push ecx  +
add eax 18h +
push eax  +
call sub_104213C  +
cmp eax ebx +
jl loc_1041C64  +
mov ecx [ebp+var_4] +
mov byte ptr [ecx] 1 +
mov ecx [ebp+var_C] +
mov [ecx+10h] esi +
mov edi [ebp+var_C] +
mov esi [ebp+arg_8] +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
push edi  +
cmp esi ebx +
jz loc_1041CFC  +
cmp [ebp+arg_4] ebx +
jz loc_1041CFC  +
mov edi [esi] +
lea eax [ebp+arg_0] +
cmp edi ebx +
jnz loc_1041CA0  +
push 1  +
push eax  +
push ebx  +
lea eax [esi+4] +
push eax  +
call sub_104213C  +
cmp eax ebx +
jmp loc_1041CCE  +
push 0  +
push eax  +
lea eax [edi-1] +
push eax  +
lea ebx [esi+4] +
push ebx  +
call sub_104213C  +
test eax eax +
jl loc_1041D0D  +
mov ecx [ebp+arg_4] +
mov edx [ebp+arg_0] +
cmp [edx+10h] ecx +
jnb loc_1041CD2  +
push 1  +
lea eax [ebp+arg_0] +
push eax  +
push edi  +
push ebx  +
call sub_104213C  +
test eax eax +
jl loc_1041D0D  +
inc dword ptr [esi]  +
mov edx [ebp+arg_4] +
mov ecx [ebp+arg_0] +
cmp [ecx+10h] edx +
jnz loc_1041CED  +
push 0  +
push 0  +
push 178h  +
push 0C00000BDh  +
jmp loc_1041D08  +
mov esi [ebp+arg_8] +
mov [ecx+10h] edx +
mov edi [ebp+arg_0] +
movs   +
movs   +
movs   +
movs   +
jmp loc_1041D0D  +
push ebx  +
push ebx  +
push 12Ch  +
push 0C000000Dh  +
call sub_104450C  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea edi [esi+4] +
push 0  +
lea eax [ebp+var_4] +
push eax  +
mov eax [esi] +
dec eax  +
push eax  +
push edi  +
call sub_104213C  +
test eax eax +
jl loc_1041D52  +
mov ecx [ebp+var_4] +
mov edx [ecx+10h] +
cmp edx [ebp+arg_4] +
jb loc_1041D52  +
or dword ptr [ecx+10h] 0FFFFFFFFh +
dec dword ptr [esi]  +
jnz loc_1041D2B  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor ebx ebx +
xor eax eax +
mov [ebp+var_4] ebx +
cmp [edi+30h] ebx +
jbe loc_1041DD8  +
push ebx  +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+var_4]  +
lea eax [edi+34h] +
push eax  +
call sub_104213C  +
cmp eax ebx +
jl loc_1041DD8  +
mov ecx [ebp+arg_0] +
cmp [ecx] bl +
jz loc_1041DCD  +
xor esi esi +
cmp [ecx+14h] ebx +
jbe loc_1041DC0  +
push ebx  +
lea eax [ebp+var_8] +
push eax  +
push esi  +
add ecx 18h +
push ecx  +
call sub_104213C  +
cmp eax ebx +
jl loc_1041DD8  +
mov ecx [ebp+var_8] +
mov ecx [ecx+10h] +
cmp ecx [ebp+arg_4] +
mov ecx [ebp+arg_0] +
jnb loc_1041DC0  +
inc esi  +
cmp esi [ecx+14h] +
jb loc_1041D99  +
mov [ecx+14h] esi +
mov ecx [ebp+arg_0] +
cmp [ecx+14h] ebx +
jnz loc_1041DCD  +
mov [ecx] bl +
inc [ebp+var_4]  +
mov ecx [ebp+var_4] +
cmp ecx [edi+30h] +
jb loc_1041D76  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
test esi esi +
jnz loc_1041E06  +
push esi  +
push esi  +
push 22Ch  +
push 0C000000Dh  +
call sub_104450C  +
jmp loc_1041E26  +
cmp [esi] eax +
jbe loc_1041E17  +
push [ebp+arg_4]  +
push esi  +
call sub_1041D19  +
test eax eax +
jl loc_1041E26  +
cmp dword ptr [esi+30h] 0 +
jbe loc_1041E26  +
push [ebp+arg_4]  +
push esi  +
call sub_1041D5D  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_8] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
push edi  +
mov [eax] ebx +
xor edi edi +
cmp [esi+30h] ebx +
jbe loc_1041E94  +
push ebx  +
lea eax [ebp+arg_0] +
push eax  +
push edi  +
lea eax [esi+34h] +
push eax  +
mov [ebp+var_4] ebx +
mov [ebp+arg_0] ebx +
call sub_104213C  +
cmp eax ebx +
jl loc_1041E96  +
mov eax [ebp+arg_0] +
cmp [eax] bl +
jz loc_1041E84  +
lea ecx [ebp+var_4] +
push ecx  +
push [ebp+arg_4]  +
add eax 4 +
push eax  +
push dword ptr [esi+64h]  +
call dword ptr [esi+60h]  +
cmp eax ebx +
jl loc_1041E96  +
cmp [ebp+var_4] ebx +
jz loc_1041E8C  +
inc edi  +
cmp edi [esi+30h] +
jb loc_1041E4A  +
jmp loc_1041E94  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push edi  +
cmp ecx ebx +
jz loc_1041F4F  +
mov edx [ebp+arg_8] +
cmp edx ebx +
jz loc_1041F4F  +
mov edi [ebp+arg_C] +
cmp edi ebx +
jz loc_1041F4F  +
xor eax eax +
stos   +
stos   +
stos   +
stos   +
push esi  +
mov [ebp+arg_0] ebx +
cmp [edx+4] ebx +
jnz loc_1041EFE  +
mov eax [ecx] +
cmp eax ebx +
jz loc_1041F4A  +
push ebx  +
lea edx [ebp+arg_0] +
push edx  +
dec eax  +
push eax  +
add ecx 4 +
push ecx  +
call sub_104213C  +
cmp eax ebx +
jl loc_1041F4C  +
mov esi [ebp+arg_0] +
cmp esi ebx +
jz loc_1041F4A  +
jmp loc_1041F43  +
lea eax [ebp+arg_0] +
push eax  +
push edx  +
push ecx  +
mov [ebp+arg_8] ebx +
call sub_1041E30  +
cmp eax ebx +
jl loc_1041F4C  +
mov eax [ebp+arg_0] +
push ebx  +
cmp eax ebx +
jnz loc_1041F2A  +
push ebx  +
push 2D5h  +
push 0C0000225h  +
call sub_104450C  +
jmp loc_1041F4C  +
lea ecx [ebp+arg_8] +
push ecx  +
mov ecx [eax+14h] +
dec ecx  +
push ecx  +
add eax 18h +
push eax  +
call sub_104213C  +
cmp eax ebx +
jl loc_1041F4C  +
mov esi [ebp+arg_8] +
mov edi [ebp+arg_C] +
movs   +
movs   +
movs   +
movs   +
xor eax eax +
pop esi  +
jmp loc_1041F60  +
push ebx  +
push ebx  +
push 298h  +
push 0C000000Dh  +
call sub_104450C  +
pop edi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
xor ebx ebx +
push edi  +
cmp esi ebx +
jz loc_1041F7E  +
mov [esi] ebx +
mov edi [ebp+arg_C] +
cmp edi ebx +
jz loc_1041F87  +
mov [edi] ebx +
cmp esi ebx +
jz loc_1041FD3  +
mov ecx [ebp+arg_0] +
cmp ecx ebx +
jz loc_1041FD3  +
mov eax [ecx+10h] +
mov edx [ebp+arg_4] +
cmp edx eax +
jb loc_1041FD3  +
sub edx eax +
mov eax [ecx+24h] +
mov ecx [ecx+0Ch] +
jmp loc_1041FAF  +
cmp eax ebx +
jz loc_1041FB3  +
mov eax [eax+4] +
sub edx ecx +
cmp edx ecx +
jnb loc_1041FA6  +
cmp edx ecx +
jnb loc_1041FB9  +
mov [esi] eax +
cmp edi ebx +
jz loc_1041FC3  +
cmp [esi] ebx +
jz loc_1041FC3  +
mov [edi] edx +
neg eax  +
sbb eax eax +
and eax 3FFFFDDBh +
add eax 0C0000225h +
jmp loc_1041FE1  +
push ebx  +
push ebx  +
push 33h  +
push 0C000000Dh  +
call sub_104450C  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
xor eax eax +
push esi  +
push edi  +
cmp ebx eax +
jz loc_1042043  +
mov edi [ebp+arg_8] +
cmp edi eax +
jz loc_1042043  +
mov esi [ebp+arg_4] +
cmp esi eax +
jz loc_1042043  +
push 2Ch  +
push eax  +
push ebx  +
call memset  +
mov eax [ebp+arg_C] +
mov [ebx+8] esi +
mov esi [ebp+arg_14] +
mov [ebx+0Ch] edi +
lea edi [ebx+18h] +
movs   +
movs   +
add esp 0Ch +
movs   +
test eax eax +
jz loc_104203F  +
mov [ebx+14h] eax +
mov eax [ebp+arg_10] +
xor edx edx +
div  [ebp+arg_4] +
mov [ebx+10h] eax +
mov [ebx+4] eax +
xor eax eax +
jmp loc_1042051  +
push eax  +
push eax  +
push 6Ch  +
push 0C000000Dh  +
call sub_104450C  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
push edi  +
cmp esi eax +
jz loc_104211F  +
cmp [esi+18h] eax +
jz loc_104211F  +
mov ecx [esi+4] +
mov eax [ebp+arg_4] +
cmp ecx eax +
jbe loc_104208C  +
xor eax eax +
jmp loc_1042130  +
mov ebx [esi+0Ch] +
sub eax ecx +
xor edx edx +
div  ebx +
mov ecx [esi+8] +
mov edi eax +
inc edi  +
test ecx ecx +
jz loc_10420BA  +
push 0FFFFFFF7h  +
xor edx edx +
pop eax  +
div  ecx +
cmp eax ebx +
jnb loc_10420BA  +
push 0  +
push 0  +
push 0CFh  +
push 0C0000095h  +
jmp loc_104212B  +
imul ecx ebx +
add ecx 8 +
mov ebx ecx +
jmp loc_1042106  +
push dword ptr [esi+20h]  +
and [ebp+arg_0] 0 +
lea edx [ebp+arg_0] +
mov ecx ebx +
dec edi  +
call dword ptr [esi+18h]  +
test eax eax +
jl loc_104210F  +
mov eax [ebp+arg_0] +
mov [eax] esi +
mov eax [ebp+arg_0] +
and dword ptr [eax+4] 0 +
mov eax [esi+28h] +
test eax eax +
jz loc_10420F1  +
mov ecx [ebp+arg_0] +
mov [eax+4] ecx +
mov ecx [esi+0Ch] +
mov eax [ebp+arg_0] +
add [esi+4] ecx +
cmp dword ptr [esi+24h] 0 +
mov [esi+28h] eax +
jnz loc_1042106  +
mov [esi+24h] eax +
test edi edi +
jnz loc_10420C4  +
jmp loc_1042085  +
push 0  +
push 0  +
push 0DDh  +
push 0C0000017h  +
jmp loc_104212B  +
push eax  +
push eax  +
push 0B3h  +
push 0C000000Dh  +
call sub_104450C  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
push edi  +
cmp esi ebx +
jz loc_10421E6  +
mov ecx [ebp+arg_8] +
cmp ecx ebx +
jz loc_10421E6  +
mov edi [ebp+arg_4] +
mov [ecx] ebx +
cmp edi [esi+4] +
jb loc_1042179  +
cmp [ebp+arg_C] bl +
jnz loc_1042179  +
push ebx  +
push ebx  +
push 118h  +
push 0C0000225h  +
jmp loc_10421F2  +
mov eax [esi+10h] +
cmp edi eax +
jnb loc_1042193  +
cmp eax ebx +
jz loc_1042193  +
mov eax [esi+8] +
imul eax edi +
add eax [esi+14h] +
mov [ecx] eax +
xor eax eax +
jmp loc_10421F7  +
lea eax [ebp+arg_C] +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
push edi  +
push esi  +
mov [ebp+arg_0] ebx +
mov dword ptr [ebp+arg_C] ebx +
call sub_1041F6B  +
cmp eax ebx +
jge loc_10421D1  +
cmp eax 0C0000225h +
jnz loc_10421F7  +
push edi  +
push esi  +
call sub_104205D  +
cmp eax ebx +
jl loc_10421F7  +
lea eax [ebp+arg_C] +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
push edi  +
push esi  +
call sub_1041F6B  +
cmp eax ebx +
jl loc_10421F7  +
mov ecx [esi+8] +
imul ecx dword ptr [ebp+arg_C] +
mov edx [ebp+arg_0] +
lea ecx [ecx+edx+8] +
mov edx [ebp+arg_8] +
mov [edx] ecx +
jmp loc_10421F7  +
push ebx  +
push ebx  +
push 10Dh  +
push 0C000000Dh  +
call sub_104450C  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
xor eax eax +
cmp esi edi +
jz loc_1042251  +
mov ecx [esi+24h] +
cmp ecx edi +
jz loc_1042243  +
cmp [esi+1Ch] edi +
jz loc_1042251  +
cmp ecx edi +
jz loc_1042243  +
mov ecx [esi+24h] +
mov eax [ecx+4] +
mov edx [esi+20h] +
mov [esi+24h] eax +
call dword ptr [esi+1Ch]  +
cmp eax edi +
jl loc_1042262  +
mov ecx [esi+0Ch] +
sub [esi+4] ecx +
cmp [esi+24h] edi +
jnz loc_1042225  +
mov ecx [esi+10h] +
mov [esi+24h] edi +
mov [esi+28h] edi +
mov [esi+4] ecx +
jmp loc_1042262  +
push edi  +
push edi  +
push 18Eh  +
push 0C000000Dh  +
call sub_104450C  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
add eax 0E8h +
push eax  +
call sub_1042203  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
push edi  +
cmp esi ebx +
jz loc_10422A9  +
push 5D4h  +
push ebx  +
push esi  +
call memset  +
add esp 0Ch +
mov edi [ebp+arg_4] +
cmp edi ebx +
jnz loc_10422C0  +
push ebx  +
push ebx  +
push 5Eh  +
push 0C000000Dh  +
call sub_104450C  +
jmp loc_1042322  +
cmp esi ebx +
jnz loc_10422CA  +
push ebx  +
push ebx  +
push 61h  +
jmp loc_10422B4  +
mov ecx [edi+28h] +
cmp ecx ebx +
jz loc_10422DA  +
mov edx esi +
call sub_10468E5  +
jmp loc_10422E4  +
lea eax [edi+8] +
push eax  +
push esi  +
call sub_10467F1  +
cmp eax ebx +
jl loc_1042322  +
push dword ptr [edi+4]  +
lea eax [esi+114h] +
push 4C0h  +
push eax  +
push 28h  +
push 98h  +
lea eax [esi+0E8h] +
push eax  +
call sub_1041FED  +
cmp eax ebx +
jl loc_1042322  +
lea eax [ebp+arg_0] +
push eax  +
push esi  +
call sub_1047904  +
cmp eax ebx +
jl loc_1042322  +
mov ecx [ebp+arg_0] +
add [esi+14h] ecx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
mov esi [ebp+arg_10] +
push edi  +
mov edi [ebp+arg_14] +
xor ebx ebx +
xor eax eax +
mov [esi] ebx +
stos   +
stos   +
stos   +
xor ecx ecx +
mov [ebp+var_8] ebx +
stos   +
cmp [ebp+arg_0] ebx +
jz loc_1042468  +
mov eax [ebp+arg_8] +
mov ecx [eax] +
cmp ecx 3 +
jz loc_104237C  +
cmp ecx 4 +
jz loc_1042381  +
push ebx  +
push ebx  +
push 0B6h  +
push 0C000000Dh  +
call sub_104450C  +
jmp loc_104246A  +
lea edi [eax+30h] +
jmp loc_1042384  +
lea edi [eax+20h] +
lea eax [ebp+var_18] +
push eax  +
push edi  +
push [ebp+arg_C]  +
push [ebp+arg_0]  +
call sub_1041EA2  +
mov ecx eax +
cmp ecx ebx +
jl loc_104243E  +
lea esi [ebp+var_18] +
movs   +
movs   +
movs   +
movs   +
cmp [ebp+arg_4] ebx +
jz loc_104241A  +
mov esi [ebp+arg_8] +
cmp dword ptr [esi] 3 +
jnz loc_104241A  +
mov [ebp+var_4] ebx +
cmp [esi+58h] ebx +
jbe loc_104241A  +
push ebx  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+var_4]  +
push [ebp+arg_4]  +
call sub_104213C  +
mov ecx eax +
cmp ecx ebx +
jl loc_1042468  +
mov eax [ebp+var_8] +
cmp [eax+14h] ebx +
jz loc_104240F  +
cmp [eax+48h] bl +
jnz loc_104240F  +
cmp [eax+49h] bl +
jnz loc_104240F  +
lea ecx [ebp+var_18] +
push ecx  +
add eax 10h +
push eax  +
push [ebp+arg_C]  +
push [ebp+arg_0]  +
call sub_1041EA2  +
mov ecx eax +
cmp ecx ebx +
jl loc_104241E  +
mov edi [ebp+var_8] +
add edi 10h +
lea esi [ebp+var_18] +
movs   +
movs   +
movs   +
movs   +
mov esi [ebp+arg_8] +
inc [ebp+var_4]  +
mov eax [ebp+var_4] +
cmp eax [esi+58h] +
jb loc_10423BA  +
xor ecx ecx +
jmp loc_1042468  +
cmp ecx 0C0000225h +
jnz loc_1042468  +
mov eax [ebp+arg_10] +
mov esi [ebp+var_8] +
push ebx  +
push ebx  +
mov dword ptr [eax] 0Ah +
add esi 10h +
push 0FBh  +
jmp loc_1042455  +
cmp ecx 0C0000225h +
jnz loc_1042468  +
push ebx  +
push ebx  +
mov dword ptr [esi] 0Ah +
mov esi edi +
push 0CDh  +
mov edi [ebp+arg_14] +
movs   +
movs   +
movs   +
push 0C000A083h  +
movs   +
call sub_104450C  +
mov ecx eax +
mov eax ecx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A0h +
lea eax [ebp+var_10] +
push eax  +
push [ebp+arg_0]  +
call sub_10466DC  +
mov [ebp+var_4] eax +
test eax eax +
jl locret_10427C6  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
xor edi edi +
inc edi  +
push edi  +
push esi  +
push [ebp+arg_0]  +
call sub_10469D6  +
test eax eax +
jl loc_10427AB  +
cmp byte ptr [esi+14h] 0 +
jnz loc_10427AB  +
mov eax [esi+10h] +
cmp eax 68h +
jnz loc_10424C9  +
mov [ebx+20h] edi +
jmp loc_10424D9  +
cmp eax 69h +
jnz loc_104279F  +
mov dword ptr [ebx+20h] 2 +
push edi  +
push esi  +
push [ebp+arg_0]  +
call sub_10469D6  +
test eax eax +
jl loc_10427AB  +
cmp byte ptr [esi+14h] 0 +
jnz loc_10427AB  +
cmp dword ptr [esi+10h] 67h +
jz loc_1042507  +
mov dword ptr [ebx+38h] 15h +
jmp loc_10427AB  +
lea edi [ebx+28h] +
movs   +
movs   +
push 1  +
push [ebp+arg_4]  +
movs   +
push [ebp+arg_0]  +
movs   +
call sub_10469D6  +
test eax eax +
jl loc_10427A8  +
mov eax [ebp+arg_4] +
cmp byte ptr [eax+14h] 0 +
jnz loc_10427A8  +
mov eax [eax+10h] +
cmp eax 6Ah +
jnz loc_10425A9  +
xor edi edi +
mov [ebp+var_8] edi +
lea esi [ebp+var_44] +
mov [ebp+var_4] edi +
push 1  +
lea eax [esi-14h] +
push eax  +
push [ebp+arg_0]  +
call sub_10469D6  +
test eax eax +
jl loc_104257B  +
cmp byte ptr [esi] 0 +
jnz loc_104257B  +
mov ecx [esi-4] +
mov edx [ebp+var_4] +
cmp ecx ds:dword_100EC60[edx] +
jnz loc_1042578  +
add [ebp+var_4] 0Ch +
inc [ebp+var_8]  +
add esi 18h +
cmp [ebp+var_4] 24h +
jnz loc_1042543  +
mov edi [ebp+var_8] +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1042593  +
cmp edi 3 +
jnz loc_1042593  +
mov dword ptr [ebx+24h] 1 +
jmp loc_1042620  +
and dword ptr [ebx] 0 +
imul edi edi +
lea esi [ebp+edi+var_58] +
mov dword ptr [ebx+38h] 16h +
jmp loc_10427AE  +
cmp eax 6Eh +
jnz loc_1042700  +
xor edi edi +
mov [ebp+var_8] edi +
lea esi [ebp+var_8C] +
mov [ebp+var_4] edi +
push 1  +
lea eax [esi-14h] +
push eax  +
push [ebp+arg_0]  +
call sub_10469D6  +
test eax eax +
jl loc_10425F8  +
cmp byte ptr [esi] 0 +
jnz loc_10425F8  +
mov ecx [esi-4] +
mov edx [ebp+var_4] +
cmp ecx ds:dword_100EC90[edx] +
jnz loc_10425F5  +
add [ebp+var_4] 0Ch +
inc [ebp+var_8]  +
add esi 18h +
cmp [ebp+var_4] 48h +
jnz loc_10425C0  +
mov edi [ebp+var_8] +
mov [ebp+var_4] eax +
test eax eax +
jl loc_10426E0  +
cmp edi 6 +
jnz loc_10426E0  +
lea edi [ebx+58h] +
lea esi [ebp+var_88] +
movs   +
movs   +
movs   +
mov dword ptr [ebx+24h] 2 +
movs   +
lea edi [ebx+48h] +
lea esi [ebp+var_40] +
movs   +
movs   +
movs   +
movs   +
push 1  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10469D6  +
test eax eax +
jl loc_10427A8  +
mov eax [ebp+arg_4] +
cmp byte ptr [eax+14h] 0 +
jnz loc_10427A8  +
cmp dword ptr [eax+10h] 72h +
jnz loc_104278A  +
xor edi edi +
mov [ebp+var_8] edi +
lea esi [ebp+var_14] +
mov [ebp+var_4] edi +
push 1  +
lea eax [esi-14h] +
push eax  +
push [ebp+arg_0]  +
call sub_10469D6  +
test eax eax +
jl loc_1042699  +
cmp byte ptr [esi] 0 +
jnz loc_1042699  +
mov ecx [esi-4] +
mov edx [ebp+var_4] +
cmp ecx ds:dword_100EC84[edx] +
jnz loc_1042696  +
add [ebp+var_4] 0Ch +
inc [ebp+var_8]  +
add esi 18h +
cmp [ebp+var_4] 0Ch +
jnz loc_1042661  +
mov edi [ebp+var_8] +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1042777  +
cmp edi 1 +
jnz loc_1042777  +
lea edi [ebx+68h] +
lea esi [ebp+var_28] +
movs   +
movs   +
push 1  +
push [ebp+arg_4]  +
movs   +
push [ebp+arg_0]  +
movs   +
call sub_10469D6  +
test eax eax +
jl loc_10427A8  +
mov eax [ebp+arg_4] +
cmp byte ptr [eax+14h] 0 +
jz loc_104278A  +
mov esi eax +
jmp loc_10427AB  +
and dword ptr [ebx] 0 +
imul edi edi +
lea esi [ebp+edi+var_A0] +
lea edi [ebx+20h] +
movs   +
movs   +
movs   +
movs   +
mov dword ptr [ebx+38h] 17h +
jmp loc_10427C1  +
cmp eax 74h +
jnz loc_104262A  +
xor edi edi +
mov [ebp+var_8] edi +
lea esi [ebp+var_2C] +
mov [ebp+var_4] edi +
push 1  +
lea eax [esi-14h] +
push eax  +
push [ebp+arg_0]  +
call sub_10469D6  +
test eax eax +
jl loc_104274C  +
cmp byte ptr [esi] 0 +
jnz loc_104274C  +
mov ecx [esi-4] +
mov edx [ebp+var_4] +
cmp ecx ds:dword_100ECD8[edx] +
jnz loc_1042749  +
add [ebp+var_4] 0Ch +
inc [ebp+var_8]  +
add esi 18h +
cmp [ebp+var_4] 18h +
jnz loc_1042714  +
mov edi [ebp+var_8] +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1042764  +
cmp edi 2 +
jnz loc_1042764  +
and dword ptr [ebx+24h] 0 +
lea edi [ebx+38h] +
jmp loc_1042623  +
and dword ptr [ebx] 0 +
imul edi edi +
lea esi [ebp+edi+var_40] +
mov dword ptr [ebx+38h] 18h +
jmp loc_10427AE  +
and dword ptr [ebx] 0 +
imul edi edi +
lea esi [ebp+edi+var_28] +
mov dword ptr [ebx+38h] 19h +
jmp loc_10427AE  +
mov eax [ebp+arg_4] +
cmp dword ptr [eax+10h] 77h +
jz loc_10427C1  +
mov dword ptr [ebx+38h] 1Ah +
jmp loc_10426D9  +
mov dword ptr [ebx+38h] 1Bh +
jmp loc_10427AB  +
mov esi [ebp+arg_4] +
and dword ptr [ebx] 0 +
mov eax [ebp+var_10] +
lea edi [ebx+20h] +
movs   +
movs   +
movs   +
movs   +
mov [ebx+30h] eax +
mov eax [ebp+var_C] +
mov [ebx+34h] eax +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0DCh +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
cmp esi edi +
jz loc_1043ABC  +
mov ebx [ebp+arg_8] +
cmp ebx edi +
jz loc_1043ABC  +
mov eax [ebp+arg_C] +
cmp eax edi +
jz loc_104280E  +
cmp dword ptr [eax+8] 4Ch +
jnb loc_104280E  +
push edi  +
push edi  +
push 1E8h  +
jmp loc_1043AC3  +
push 98h  +
push edi  +
push ebx  +
call memset  +
add esp 0Ch +
lea eax [ebp+var_8] +
push eax  +
push esi  +
call sub_10466DC  +
push 1  +
lea eax [ebp+var_28] +
push eax  +
push esi  +
call sub_10469D6  +
cmp eax edi +
mov [ebp+arg_8] eax +
jl loc_1043AAE  +
cmp [ebp+var_14] 0 +
jnz loc_1043ACD  +
mov eax [ebp+var_28] +
mov [ebx+10h] eax +
mov eax [esi+0E4h] +
mov [ebx+4] eax +
mov eax [ebp+var_18] +
cmp eax 30h +
jle loc_10429DA  +
cmp eax 4Ch +
jg loc_1043786  +
jz loc_1043799  +
cmp eax 33h +
jz loc_10436BF  +
cmp eax 3Fh +
jle loc_1043A74  +
cmp eax 41h +
jle loc_104289B  +
cmp eax 44h +
jle loc_1043A74  +
cmp eax 46h +
jg loc_1043A74  +
push 1  +
lea eax [ebp+var_28] +
push eax  +
push esi  +
call sub_10469D6  +
cmp eax edi +
mov [ebp+arg_8] eax +
jl loc_1043A74  +
cmp [ebp+var_14] 0 +
jnz loc_1043A74  +
cmp [ebp+var_18] 66h +
jz loc_10428D9  +
cmp [ebp+var_18] 4Bh +
jz loc_1042905  +
cmp [ebp+var_18] 47h +
jz loc_10429BC  +
mov esi [ebp+arg_0] +
xor edi edi +
jmp loc_104289B  +
lea eax [ebp+var_28] +
push eax  +
push [ebp+arg_0]  +
mov dword ptr [ebx] 9 +
call sub_1042476  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1043A74  +
cmp [ebp+var_14] 0 +
jnz loc_1043A74  +
jmp loc_10429BC  +
mov dword ptr [ebx] 0Ah +
push 1  +
lea eax [ebp+var_28] +
push eax  +
push [ebp+arg_0]  +
call sub_10469D6  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1043A74  +
cmp [ebp+var_14] 0 +
jnz loc_1043A74  +
cmp [ebp+var_18] 4Bh +
jz loc_104290B  +
cmp [ebp+var_18] 4Ch +
jnz loc_1042944  +
and dword ptr [ebx+24h] 0 +
and dword ptr [ebx+2Ch] 0 +
jmp loc_10429B2  +
cmp [ebp+var_18] 4Dh +
jnz loc_10436B1  +
lea edi [ebx+20h] +
lea esi [ebp+var_28] +
movs   +
movs   +
push 1  +
lea eax [ebp+var_28] +
movs   +
push eax  +
push [ebp+arg_0]  +
movs   +
call sub_10469D6  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1043A74  +
cmp [ebp+var_14] 0 +
jnz loc_1043A74  +
cmp [ebp+var_18] 4Eh +
jnz loc_1043695  +
push 1  +
lea eax [ebp+var_28] +
push eax  +
push [ebp+arg_0]  +
call sub_10469D6  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1043A74  +
cmp [ebp+var_14] 0 +
jnz loc_1043A74  +
cmp [ebp+var_18] 4Ch +
jnz loc_10436A3  +
lea edi [ebx+30h] +
lea esi [ebp+var_28] +
movs   +
movs   +
movs   +
movs   +
mov eax [ebx] +
cmp eax 9 +
jz loc_1043A74  +
cmp eax 0Ah +
jz loc_1043A74  +
mov esi [ebp+arg_0] +
xor edi edi +
jmp loc_104280E  +
jz loc_1043601  +
dec eax  +
dec eax  +
jz loc_104359D  +
dec eax  +
dec eax  +
jz loc_1043571  +
dec eax  +
jz loc_1042D5C  +
sub eax 1Dh +
jz loc_1042B4A  +
sub eax 6 +
jz loc_1042AA5  +
sub eax 5 +
jnz loc_1043A74  +
mov [ebp+var_10] eax +
mov [ebp+arg_4] eax +
lea edi [ebp+var_68] +
mov [ebp+arg_C] eax +
push 1  +
lea eax [edi-14h] +
push eax  +
push esi  +
call sub_10469D6  +
test eax eax +
jl loc_1042A57  +
cmp byte ptr [edi] 0 +
jnz loc_1042A57  +
mov ecx [edi-4] +
mov edx [ebp+arg_C] +
cmp ecx ds:dword_100ECF0[edx] +
jnz loc_1042A51  +
inc [ebp+arg_4]  +
add [ebp+arg_C] 0Ch +
add edi 18h +
cmp [ebp+arg_C] 18h +
jnz loc_1042A1E  +
mov ecx [ebp+arg_4] +
mov [ebp+var_10] ecx +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1042A72  +
cmp [ebp+var_10] 2 +
jnz loc_1042A72  +
mov dword ptr [ebx] 0Dh +
lea esi [ebp+var_7C] +
jmp loc_1042B3E  +
mov eax [ebp+var_10] +
and dword ptr [ebx] 0 +
mov ecx eax +
imul ecx ecx +
imul eax eax +
lea esi [ebp+ecx+var_7C] +
lea edi [ebx+20h] +
movs   +
movs   +
movs   +
movs   +
mov eax ds:dword_100ECF4[eax] +
mov [ebx+38h] eax +
mov eax [ebp+var_8] +
mov [ebx+30h] eax +
mov eax [ebp+var_4] +
mov [ebx+34h] eax +
jmp loc_1043A74  +
push 1  +
lea eax [ebp+var_28] +
push eax  +
push esi  +
call sub_10469D6  +
cmp eax edi +
mov [ebp+arg_8] eax +
jl loc_1042B31  +
cmp [ebp+var_14] 0 +
jnz loc_1042B31  +
cmp [ebp+var_18] 2Ah +
jnz loc_1042B31  +
mov eax [ebp+var_8] +
lea edi [ebx+20h] +
lea esi [ebp+var_28] +
movs   +
movs   +
movs   +
mov [ebx+40h] eax +
mov eax [ebp+var_4] +
mov dword ptr [ebx] 5 +
movs   +
mov [ebx+44h] eax +
jmp loc_1042B0A  +
cmp [ebp+var_14] 0 +
jnz loc_1042B1F  +
cmp [ebp+var_18] 2Bh +
jnz loc_1042AFA  +
lea edi [ebx+30h] +
lea esi [ebp+var_28] +
movs   +
movs   +
movs   +
movs   +
jmp loc_1042B0A  +
cmp [ebp+var_18] 29h +
jz loc_1043A74  +
cmp [ebp+var_18] 4 +
jz loc_1042B28  +
push 1  +
lea eax [ebp+var_28] +
push eax  +
push [ebp+arg_0]  +
call sub_10469D6  +
mov [ebp+arg_8] eax +
test eax eax +
jge loc_1042AE2  +
mov dword ptr [ebx+38h] 10h +
jmp loc_1042B38  +
mov dword ptr [ebx+38h] 11h +
jmp loc_1042B38  +
mov dword ptr [ebx+38h] 12h +
and dword ptr [ebx] 0 +
lea esi [ebp+var_28] +
lea edi [ebx+20h] +
movs   +
movs   +
movs   +
movs   +
jmp loc_1042A94  +
push edi  +
lea eax [esi+0E4h] +
dec dword ptr [eax]  +
mov eax [eax] +
lea ecx [ebp+arg_C] +
push ecx  +
push eax  +
lea eax [esi+0E8h] +
push eax  +
mov [ebp+arg_C] edi +
call sub_104213C  +
cmp eax edi +
jl loc_1043ACD  +
push 1  +
lea eax [ebp+var_28] +
push eax  +
push esi  +
call sub_10469D6  +
cmp eax edi +
mov [ebp+arg_8] eax +
jl loc_1042D43  +
cmp [ebp+var_14] 0 +
jnz loc_1042D43  +
cmp [ebp+var_18] 23h +
jz loc_1042BA2  +
cmp [ebp+var_18] 26h +
jnz loc_1042D43  +
cmp [ebp+var_18] 26h +
jnz loc_1042C17  +
lea edi [ebx+20h] +
lea esi [ebp+var_28] +
movs   +
movs   +
movs   +
movs   +
lea edi [ebx+40h] +
lea esi [ebp+var_28] +
movs   +
movs   +
push 1  +
lea eax [ebp+var_28] +
movs   +
push eax  +
push [ebp+arg_0]  +
movs   +
call sub_10469D6  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1042BFE  +
cmp [ebp+var_14] 0 +
jnz loc_1042BFE  +
cmp [ebp+var_18] 27h +
jnz loc_1042BFE  +
push 1  +
lea eax [ebp+var_28] +
push eax  +
push [ebp+arg_0]  +
call sub_10469D6  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1042BFE  +
cmp [ebp+var_14] 0 +
jnz loc_1042BFE  +
cmp [ebp+var_18] 23h +
jz loc_1042C17  +
and dword ptr [ebx] 0 +
lea esi [ebp+var_28] +
lea edi [ebx+20h] +
movs   +
movs   +
movs   +
movs   +
mov dword ptr [ebx+38h] 7 +
jmp loc_1042A94  +
mov eax [ebp+var_8] +
lea edi [ebx+30h] +
lea esi [ebp+var_28] +
movs   +
movs   +
movs   +
movs   +
mov esi [ebp+arg_C] +
push 10h  +
add esi 20h +
lea edi [ebx+58h] +
pop ecx  +
movs   +
dec dword ptr [ebx+4]  +
mov [ebx+50h] eax +
mov eax [ebp+var_4] +
mov [ebx+54h] eax +
mov dword ptr [ebx] 4 +
jmp loc_1042C58  +
cmp [ebp+var_14] 0 +
jnz loc_1042C6D  +
cmp [ebp+var_18] 4 +
jz loc_1042C6D  +
cmp [ebp+var_18] 25h +
jz loc_1042C86  +
push 1  +
lea eax [ebp+var_28] +
push eax  +
push [ebp+arg_0]  +
call sub_10469D6  +
mov [ebp+arg_8] eax +
test eax eax +
jge loc_1042C46  +
and dword ptr [ebx] 0 +
lea edi [ebx+20h] +
lea esi [ebp+var_28] +
movs   +
movs   +
movs   +
movs   +
mov dword ptr [ebx+38h] 6 +
jmp loc_1042A94  +
cmp [ebp+arg_4] 0 +
jz loc_1042CE2  +
lea eax [ebp+var_3C] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
mov eax [ebp+arg_C] +
mov eax [eax+4] +
inc eax  +
push eax  +
push ebx  +
push 0  +
push [ebp+arg_4]  +
call sub_104232E  +
mov [ebp+arg_8] eax +
cmp eax 0C000A083h +
jnz loc_1042CBF  +
mov eax [ebp+var_2C] +
lea esi [ebp+var_3C] +
mov [ebx+38h] eax +
jmp loc_10435D7  +
test eax eax +
jl loc_1043A74  +
mov eax [ebp+arg_C] +
mov eax [eax+4] +
inc eax  +
push eax  +
push [ebp+arg_4]  +
call sub_1041DE4  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1043A74  +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebx+30h] +
push eax  +
lea eax [ebx+58h] +
push eax  +
mov eax [ebp+arg_0] +
push eax  +
call dword ptr [eax+0C0h]  +
cmp [ebp+arg_4] 0 +
mov [ebp+arg_8] eax +
jnz loc_1042D22  +
test eax eax +
jl loc_1043A74  +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebx+40h] +
push eax  +
lea eax [ebx+78h] +
push eax  +
mov eax [ebp+arg_0] +
push eax  +
call dword ptr [eax+0C0h]  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1043A74  +
cmp [ebp+arg_4] 0 +
jz loc_1043A74  +
lea esi [ebx+10h] +
mov dword ptr [ebx+38h] 1Ch +
jmp loc_10435D7  +
and dword ptr [ebx] 0 +
lea edi [ebx+20h] +
lea esi [ebp+var_28] +
movs   +
movs   +
movs   +
movs   +
mov dword ptr [ebx+38h] 8 +
jmp loc_1042A94  +
mov al [esi+0E0h] +
test al al +
jz loc_1042D72  +
cmp [esi+0E4h] edi +
jz loc_10435CD  +
mov [ebp+var_C] edi +
mov [ebp+var_2C] edi +
test al al +
jnz loc_1042D83  +
mov byte ptr [esi+0E0h] 1 +
push 1  +
lea eax [ebp+var_28] +
push eax  +
push esi  +
call sub_10469D6  +
cmp eax edi +
mov [ebp+arg_8] eax +
jl loc_1042E1A  +
cmp [ebp+var_14] 0 +
jnz loc_1042E1A  +
cmp [ebp+var_18] 6 +
jz loc_1042DAC  +
cmp [ebp+var_18] 16h +
jnz loc_1042E1A  +
cmp [ebp+var_18] 16h +
mov eax [ebp+var_8] +
mov [ebx+50h] eax +
mov eax [ebp+var_4] +
mov dword ptr [ebx] 3 +
mov [ebx+54h] eax +
jnz loc_1042E32  +
lea edi [ebx+30h] +
lea esi [ebp+var_28] +
movs   +
movs   +
movs   +
movs   +
lea edi [ebx+40h] +
lea esi [ebp+var_28] +
movs   +
movs   +
push 1  +
lea eax [ebp+var_28] +
movs   +
push eax  +
push [ebp+arg_0]  +
movs   +
call sub_10469D6  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1042E26  +
cmp [ebp+var_14] 0 +
jnz loc_1042E26  +
cmp [ebp+var_18] 17h +
jnz loc_1042E26  +
push 1  +
lea eax [ebp+var_28] +
push eax  +
push [ebp+arg_0]  +
call sub_10469D6  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1042E1A  +
cmp [ebp+var_14] 0 +
jnz loc_1042E1A  +
cmp [ebp+var_18] 6 +
jz loc_1042E32  +
mov dword ptr [ebx+38h] 4 +
jmp loc_1042B38  +
mov dword ptr [ebx+38h] 5 +
jmp loc_1042B38  +
mov eax [ebp+var_8] +
and dword ptr [ebx+58h] 0 +
lea edi [ebx+20h] +
lea esi [ebp+var_28] +
movs   +
movs   +
movs   +
mov [ebp+var_34] eax +
mov eax [ebp+var_4] +
movs   +
mov [ebp+var_30] eax +
cmp [ebp+arg_8] 0 +
jl loc_1042E82  +
push 0  +
lea eax [ebp+var_28] +
push eax  +
push [ebp+arg_0]  +
call sub_10469D6  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1042E82  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_0]  +
call sub_10466DC  +
lea eax [ebp+var_28] +
push eax  +
push [ebp+arg_0]  +
call sub_1046737  +
mov [ebp+arg_8] eax +
mov eax [ebp+var_18] +
cmp eax 1Ah +
jz loc_104349E  +
cmp eax 1Bh +
jz loc_104349E  +
cmp eax 4 +
jz loc_104349E  +
cmp [ebp+var_14] 0 +
jnz loc_104349E  +
xor edi edi +
cmp [ebp+arg_8] edi +
jl loc_104349E  +
sub eax 7 +
jz loc_10431D6  +
dec eax  +
jz loc_10430F1  +
sub eax 7 +
jz loc_104302B  +
sub eax 9 +
jz loc_1042F6E  +
sub eax 4 +
jnz loc_1042E4C  +
mov [ebp+var_10] edi +
mov [ebp+arg_8] edi +
lea esi [ebp+var_98] +
push 1  +
lea eax [esi-14h] +
push eax  +
push [ebp+arg_0]  +
call sub_10469D6  +
test eax eax +
jl loc_1042F22  +
cmp byte ptr [esi] 0 +
jnz loc_1042F22  +
mov ecx [esi-4] +
cmp ecx ds:dword_100EE28[edi] +
jnz loc_1042F1C  +
inc [ebp+arg_8]  +
add edi 0Ch +
add esi 18h +
cmp edi 30h +
jnz loc_1042EEC  +
mov ecx [ebp+arg_8] +
mov [ebp+var_10] ecx +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_10432ED  +
cmp [ebp+var_10] 4 +
jnz loc_104330E  +
cmp [ebp+arg_C] 0 +
jz loc_10432E5  +
push 1  +
lea eax [ebp+var_C] +
push eax  +
push dword ptr [ebx+58h]  +
push [ebp+arg_C]  +
call sub_104213C  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1043ACD  +
push 4Ch  +
push 0  +
push [ebp+var_C]  +
call memset  +
jmp loc_10431B7  +
mov [ebp+var_10] edi +
mov [ebp+arg_8] edi +
lea esi [ebp+var_C8] +
push 1  +
lea eax [esi-14h] +
push eax  +
push [ebp+arg_0]  +
call sub_10469D6  +
test eax eax +
jl loc_1042FB0  +
cmp byte ptr [esi] 0 +
jnz loc_1042FB0  +
mov ecx [esi-4] +
cmp ecx ds:dword_100ED98[edi] +
jnz loc_1042FAA  +
inc [ebp+arg_8]  +
add edi 0Ch +
add esi 18h +
cmp edi 48h +
jnz loc_1042F7A  +
mov ecx [ebp+arg_8] +
mov [ebp+var_10] ecx +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1043341  +
cmp [ebp+var_10] 6 +
jnz loc_1043362  +
cmp [ebp+arg_C] 0 +
jz loc_10432E5  +
push 1  +
lea eax [ebp+var_C] +
push eax  +
push dword ptr [ebx+58h]  +
push [ebp+arg_C]  +
call sub_104213C  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1043ACD  +
mov edi [ebp+var_C] +
lea esi [ebp+var_C4] +
movs   +
movs   +
movs   +
movs   +
mov edi [ebp+var_C] +
add edi 10h +
lea esi [ebp+var_28] +
movs   +
movs   +
movs   +
movs   +
mov edi [ebp+var_C] +
add edi 30h +
lea esi [ebp+var_28] +
movs   +
movs   +
movs   +
movs   +
mov edi [ebp+var_C] +
add edi 20h +
lea esi [ebp+var_7C] +
movs   +
movs   +
movs   +
movs   +
mov eax [ebp+var_C] +
mov byte ptr [eax+48h] 0 +
jmp loc_10432CC  +
xor edi edi +
mov [ebp+var_10] edi +
mov [ebp+arg_8] edi +
lea esi [ebp+var_C8] +
push 1  +
lea eax [esi-14h] +
push eax  +
push [ebp+arg_0]  +
call sub_10469D6  +
test eax eax +
jl loc_104306F  +
cmp byte ptr [esi] 0 +
jnz loc_104306F  +
mov ecx [esi-4] +
cmp ecx ds:dword_100EDE0[edi] +
jnz loc_1043069  +
inc [ebp+arg_8]  +
add edi 0Ch +
add esi 18h +
cmp edi 48h +
jnz loc_1043039  +
mov ecx [ebp+arg_8] +
mov [ebp+var_10] ecx +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1043395  +
cmp [ebp+var_10] 6 +
jnz loc_10433B3  +
cmp [ebp+arg_C] 0 +
jz loc_10432E5  +
push 1  +
lea eax [ebp+var_C] +
push eax  +
push dword ptr [ebx+58h]  +
push [ebp+arg_C]  +
call sub_104213C  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1043ACD  +
mov edi [ebp+var_C] +
lea esi [ebp+var_C4] +
movs   +
movs   +
movs   +
movs   +
mov edi [ebp+var_C] +
add edi 10h +
lea esi [ebp+var_28] +
movs   +
movs   +
movs   +
movs   +
mov edi [ebp+var_C] +
add edi 30h +
lea esi [ebp+var_28] +
movs   +
movs   +
movs   +
movs   +
mov edi [ebp+var_C] +
add edi 20h +
lea esi [ebp+var_7C] +
movs   +
movs   +
movs   +
movs   +
mov eax [ebp+var_C] +
mov byte ptr [eax+48h] 0 +
mov eax [ebp+var_C] +
mov byte ptr [eax+49h] 1 +
jmp loc_10432D3  +
xor edi edi +
mov [ebp+var_10] edi +
mov [ebp+arg_8] edi +
lea esi [ebp+var_98] +
push 1  +
lea eax [esi-14h] +
push eax  +
push [ebp+arg_0]  +
call sub_10469D6  +
test eax eax +
jl loc_1043135  +
cmp byte ptr [esi] 0 +
jnz loc_1043135  +
mov ecx [esi-4] +
cmp ecx ds:dword_100ED20[edi] +
jnz loc_104312F  +
inc [ebp+arg_8]  +
add edi 0Ch +
add esi 18h +
cmp edi 30h +
jnz loc_10430FF  +
mov ecx [ebp+arg_8] +
mov [ebp+var_10] ecx +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_10433E3  +
cmp [ebp+var_10] 4 +
jnz loc_1043412  +
cmp [ebp+arg_4] 0 +
jz loc_1043177  +
lea eax [ebp+var_7C] +
push eax  +
mov eax [ebx+4] +
inc eax  +
push eax  +
push [ebp+arg_4]  +
call sub_1041C70  +
mov [ebp+arg_8] eax +
cmp eax 0C00000BDh +
jz loc_1043448  +
test eax eax +
jl loc_1043ACD  +
cmp [ebp+arg_C] 0 +
jz loc_10432E5  +
push 1  +
lea eax [ebp+var_C] +
push eax  +
push dword ptr [ebx+58h]  +
push [ebp+arg_C]  +
call sub_104213C  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1043ACD  +
push 4Ch  +
push 0  +
push [ebp+var_C]  +
call memset  +
mov eax [ebp+var_C] +
mov byte ptr [eax+48h] 1 +
mov eax [ebp+var_C] +
mov byte ptr [eax+49h] 0 +
mov edi [ebp+var_C] +
lea esi [ebp+var_28] +
movs   +
movs   +
movs   +
movs   +
mov edi [ebp+var_C] +
add esp 0Ch +
add edi 20h +
lea esi [ebp+var_7C] +
movs   +
movs   +
movs   +
movs   +
jmp loc_10432D3  +
lea esi [ebp+var_28] +
lea edi [ebp+var_4C] +
movs   +
movs   +
movs   +
movs   +
xor edi edi +
mov [ebp+var_10] edi +
mov [ebp+arg_8] edi +
lea esi [ebp+var_C8] +
push 1  +
lea eax [esi-14h] +
push eax  +
push [ebp+arg_0]  +
call sub_10469D6  +
test eax eax +
jl loc_1043224  +
cmp byte ptr [esi] 0 +
jnz loc_1043224  +
mov ecx [esi-4] +
cmp ecx ds:dword_100ED50[edi] +
jnz loc_104321E  +
inc [ebp+arg_8]  +
add edi 0Ch +
add esi 18h +
cmp edi 48h +
jnz loc_10431EE  +
mov ecx [ebp+arg_8] +
mov [ebp+var_10] ecx +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1043457  +
cmp [ebp+var_10] 6 +
jnz loc_104345C  +
cmp [ebp+arg_4] 0 +
jz loc_104326D  +
lea eax [ebp+var_C4] +
push eax  +
lea eax [ebp+var_7C] +
push eax  +
mov eax [ebx+4] +
inc eax  +
push eax  +
push [ebp+arg_4]  +
call sub_1041AFE  +
mov [ebp+arg_8] eax +
cmp eax 0C00000BDh +
jz loc_104348C  +
test eax eax +
jl loc_1043ACD  +
cmp [ebp+arg_C] 0 +
jz loc_10432E5  +
push 1  +
lea eax [ebp+var_C] +
push eax  +
push dword ptr [ebx+58h]  +
push [ebp+arg_C]  +
call sub_104213C  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1043ACD  +
push 4Ch  +
push 0  +
push [ebp+var_C]  +
call memset  +
mov edi [ebp+var_C] +
lea esi [ebp+var_C4] +
movs   +
movs   +
movs   +
movs   +
mov edi [ebp+var_C] +
add edi 30h +
lea esi [ebp+var_4C] +
movs   +
movs   +
movs   +
movs   +
mov edi [ebp+var_C] +
add esp 0Ch +
add edi 20h +
lea esi [ebp+var_7C] +
movs   +
movs   +
movs   +
movs   +
mov eax [ebp+var_C] +
mov byte ptr [eax+48h] 1 +
mov eax [ebp+var_C] +
mov byte ptr [eax+49h] 0 +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [ecx+40h] eax +
mov eax [ebp+var_4] +
mov ecx [ebp+var_C] +
mov [ecx+44h] eax +
inc dword ptr [ebx+58h]  +
jmp loc_1042E4C  +
mov eax [ebp+var_8] +
and dword ptr [ebx] 0 +
mov [ebx+30h] eax +
mov eax [ebp+var_4] +
mov [ebx+34h] eax +
mov eax [ebp+var_10] +
imul eax eax +
lea esi [ebp+eax+var_AC] +
jmp loc_10433FF  +
mov eax [ebp+var_8] +
and dword ptr [ebx] 0 +
mov [ebx+30h] eax +
mov eax [ebp+var_4] +
mov [ebx+34h] eax +
mov eax [ebp+var_10] +
mov ecx eax +
imul ecx ecx +
imul eax eax +
lea esi [ebp+ecx+var_AC] +
lea edi [ebx+20h] +
movs   +
movs   +
movs   +
movs   +
mov eax ds:dword_100EE2C[eax] +
jmp loc_1043440  +
mov eax [ebp+var_8] +
and dword ptr [ebx] 0 +
mov [ebx+30h] eax +
mov eax [ebp+var_4] +
mov [ebx+34h] eax +
mov eax [ebp+var_10] +
imul eax eax +
lea esi [ebp+eax+var_DC] +
jmp loc_10433FF  +
mov eax [ebp+var_8] +
and dword ptr [ebx] 0 +
mov [ebx+30h] eax +
mov eax [ebp+var_4] +
mov [ebx+34h] eax +
mov eax [ebp+var_10] +
mov ecx eax +
imul ecx ecx +
imul eax eax +
lea esi [ebp+ecx+var_DC] +
lea edi [ebx+20h] +
movs   +
movs   +
movs   +
movs   +
mov eax ds:dword_100ED9C[eax] +
jmp loc_1043440  +
mov eax [ebp+var_8] +
and dword ptr [ebx] 0 +
mov [ebx+30h] eax +
mov eax [ebp+var_4] +
mov [ebx+34h] eax +
mov eax [ebp+var_10] +
imul eax eax +
lea esi [ebp+eax+var_DC] +
jmp loc_10433FF  +
mov eax [ebp+var_8] +
and dword ptr [ebx] 0 +
mov [ebx+30h] eax +
mov eax [ebp+var_4] +
mov [ebx+34h] eax +
mov eax [ebp+var_10] +
mov ecx eax +
imul ecx ecx +
imul eax eax +
lea esi [ebp+ecx+var_DC] +
lea edi [ebx+20h] +
movs   +
movs   +
movs   +
movs   +
mov eax ds:dword_100EDE4[eax] +
jmp loc_1043440  +
mov eax [ebp+var_8] +
and dword ptr [ebx] 0 +
mov [ebx+30h] eax +
mov eax [ebp+var_4] +
mov [ebx+34h] eax +
mov eax [ebp+var_10] +
imul eax eax +
lea esi [ebp+eax+var_AC] +
lea edi [ebx+20h] +
movs   +
movs   +
movs   +
movs   +
mov dword ptr [ebx+38h] 0Bh +
jmp loc_1043A74  +
mov eax [ebp+var_8] +
and dword ptr [ebx] 0 +
mov [ebx+30h] eax +
mov eax [ebp+var_4] +
mov [ebx+34h] eax +
mov eax [ebp+var_10] +
mov ecx eax +
imul ecx ecx +
imul eax eax +
lea esi [ebp+ecx+var_AC] +
lea edi [ebx+20h] +
movs   +
movs   +
movs   +
movs   +
mov eax ds:dword_100ED24[eax] +
mov [ebx+38h] eax +
jmp loc_1043A74  +
lea esi [ebp+var_7C] +
mov dword ptr [ebx+38h] 1Fh +
jmp loc_10435D7  +
and dword ptr [ebx] 0 +
jmp loc_1043406  +
mov eax [ebp+var_8] +
and dword ptr [ebx] 0 +
mov [ebx+30h] eax +
mov eax [ebp+var_4] +
mov [ebx+34h] eax +
mov eax [ebp+var_10] +
mov ecx eax +
imul ecx ecx +
imul eax eax +
lea esi [ebp+ecx+var_DC] +
lea edi [ebx+20h] +
movs   +
movs   +
movs   +
movs   +
mov eax ds:dword_100ED54[eax] +
jmp loc_1043440  +
mov dword ptr [ebx+38h] 1Eh +
lea esi [ebp+var_C4] +
jmp loc_10435D7  +
cmp [ebp+var_14] 0 +
mov eax [ebp+var_34] +
mov [ebp+var_8] eax +
mov eax [ebp+var_30] +
mov [ebp+var_4] eax +
jnz loc_1043A74  +
cmp [ebp+arg_8] 0 +
jl loc_1043A74  +
xor esi esi +
mov [ebp+var_10] esi +
cmp [ebp+arg_4] esi +
jz loc_10434E4  +
lea eax [ebp+var_4C] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
mov eax [ebx+4] +
inc eax  +
push eax  +
push ebx  +
push [ebp+arg_C]  +
push [ebp+arg_4]  +
call sub_104232E  +
mov [ebp+arg_8] eax +
mov eax [ebp+arg_8] +
cmp eax 0C000A083h +
jnz loc_10434FC  +
mov eax [ebp+var_10] +
mov [ebx+38h] eax +
lea esi [ebp+var_4C] +
jmp loc_10435D7  +
cmp eax esi +
jl loc_1043ACD  +
cmp [ebp+var_18] 1Bh +
jnz loc_1043537  +
mov byte ptr [ebx+5Ch] 1 +
cmp [ebp+arg_4] esi +
jz loc_1043A74  +
mov eax [ebx+4] +
inc eax  +
push eax  +
push [ebp+arg_4]  +
call sub_1041DE4  +
mov [ebp+arg_8] eax +
test eax eax +
jge loc_1043A74  +
mov eax [ebp+arg_8] +
jmp loc_1043ACD  +
push 1  +
lea eax [ebp+var_2C] +
push eax  +
push dword ptr [ebx+4]  +
mov eax [ebp+arg_0] +
add eax 0E8h +
push eax  +
call sub_104213C  +
cmp eax esi +
mov [ebp+arg_8] eax +
jl loc_1043ACD  +
mov eax [ebp+arg_0] +
mov edi [ebp+var_2C] +
inc dword ptr [eax+0E4h]  +
push 26h  +
pop ecx  +
mov esi ebx +
movs   +
jmp loc_1043A74  +
cmp [esi+0E4h] edi +
jnz loc_1043584  +
mov dword ptr [ebx] 1 +
jmp loc_1043A74  +
and dword ptr [ebx] 0 +
lea edi [ebx+20h] +
lea esi [ebp+var_28] +
movs   +
movs   +
movs   +
movs   +
mov dword ptr [ebx+38h] 9 +
jmp loc_1042A94  +
cmp byte ptr [esi+0E0h] 0 +
jz loc_10435F6  +
cmp [esi+0E4h] edi +
jnz loc_10435F6  +
lea eax [ebp+arg_C+3] +
push eax  +
lea eax [ebp+var_28] +
push eax  +
push esi  +
call sub_1046919  +
cmp eax edi +
mov [ebp+arg_8] eax +
jl loc_1043A74  +
cmp byte ptr [ebp+arg_C+3] 0 +
jnz loc_10435F6  +
mov dword ptr [ebx+38h] 1Dh +
lea esi [ebp+var_28] +
mov eax [ebp+var_8] +
and dword ptr [ebx] 0 +
and [ebp+arg_8] 0 +
lea edi [ebx+20h] +
movs   +
movs   +
movs   +
mov [ebx+30h] eax +
mov eax [ebp+var_4] +
mov [ebx+34h] eax +
movs   +
jmp loc_1043A74  +
mov dword ptr [ebx] 7 +
jmp loc_1042B3B  +
cmp byte ptr [esi+0E0h] 0 +
jz loc_1043612  +
cmp [esi+0E4h] edi +
jz loc_10435CD  +
xor eax eax +
mov [ebp+var_10] eax +
mov [ebp+arg_4] eax +
lea edi [ebp+var_68] +
mov [ebp+arg_C] eax +
push 1  +
lea eax [edi-14h] +
push eax  +
push esi  +
call sub_10469D6  +
test eax eax +
jl loc_1043659  +
cmp byte ptr [edi] 0 +
jnz loc_1043659  +
mov ecx [edi-4] +
mov edx [ebp+arg_C] +
cmp ecx ds:dword_100ED08[edx] +
jnz loc_1043653  +
inc [ebp+arg_4]  +
add [ebp+arg_C] 0Ch +
add edi 18h +
cmp [ebp+arg_C] 18h +
jnz loc_1043620  +
mov ecx [ebp+arg_4] +
mov [ebp+var_10] ecx +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1043671  +
cmp [ebp+var_10] 2 +
jnz loc_1043671  +
mov dword ptr [ebx] 8 +
jmp loc_1042A6A  +
mov eax [ebp+var_10] +
and dword ptr [ebx] 0 +
mov ecx eax +
imul ecx ecx +
imul eax eax +
lea esi [ebp+ecx+var_7C] +
lea edi [ebx+20h] +
movs   +
movs   +
movs   +
movs   +
mov eax ds:dword_100ED0C[eax] +
jmp loc_1042A91  +
push 0  +
push 0  +
push 23Bh  +
jmp loc_1043A67  +
push 0  +
push 0  +
push 246h  +
jmp loc_1043A67  +
push 0  +
push 0  +
push 24Eh  +
jmp loc_1043A67  +
cmp byte ptr [esi+0E0h] 0 +
mov eax [ebp+var_8] +
jz loc_10436E4  +
and dword ptr [ebx] 0 +
lea edi [ebx+20h] +
lea esi [ebp+var_28] +
movs   +
movs   +
movs   +
mov dword ptr [ebx+38h] 14h +
movs   +
jmp loc_1042A97  +
mov [ebx+50h] eax +
mov eax [ebp+var_4] +
mov [ebx+54h] eax +
push 1  +
lea eax [ebp+var_28] +
push eax  +
push esi  +
mov dword ptr [ebx] 2 +
call sub_10469D6  +
cmp eax edi +
jmp loc_104375A  +
cmp [ebp+var_14] 0 +
mov eax [ebp+var_18] +
jnz loc_1043764  +
cmp eax 4 +
jz loc_1043764  +
cmp eax 34h +
jz loc_1043A74  +
cmp eax 1 +
jz loc_1043764  +
sub eax 37h +
jz loc_1043747  +
dec eax  +
jz loc_1043742  +
dec eax  +
jz loc_104373D  +
dec eax  +
dec eax  +
jnz loc_104374A  +
test edi edi +
jz loc_104374A  +
lea esi [ebp+var_28] +
movs   +
movs   +
movs   +
movs   +
xor edi edi +
jmp loc_104374A  +
lea edi [ebx+30h] +
jmp loc_104374A  +
lea edi [ebx+40h] +
jmp loc_104374A  +
lea edi [ebx+20h] +
push 1  +
lea eax [ebp+var_28] +
push eax  +
push [ebp+arg_0]  +
call sub_10469D6  +
test eax eax +
mov [ebp+arg_8] eax +
jge loc_1043703  +
jmp loc_1043ACD  +
cmp eax 34h +
jz loc_1043A74  +
and dword ptr [ebx] 0 +
lea edi [ebx+20h] +
lea esi [ebp+var_28] +
movs   +
movs   +
movs   +
movs   +
mov dword ptr [ebx+38h] 13h +
jmp loc_1042A94  +
cmp eax 4Fh +
jz loc_1043799  +
cmp eax 65h +
jnz loc_1043A74  +
jmp loc_10437C6  +
mov esi [ebp+arg_0] +
push 1  +
lea eax [ebp+var_28] +
push eax  +
push esi  +
call sub_10469D6  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1043A74  +
cmp [ebp+var_14] 0 +
jnz loc_1043A74  +
cmp [ebp+var_18] 4Fh +
jz loc_1043796  +
cmp [ebp+var_18] 65h +
jnz loc_10437D1  +
mov dword ptr [ebx] 0Ch +
jmp loc_1043A74  +
and dword ptr [ebx+2Ch] 0 +
and dword ptr [ebx+24h] 0 +
cmp [ebp+var_18] 51h +
jnz loc_1043843  +
lea edi [ebx+20h] +
lea esi [ebp+var_28] +
movs   +
movs   +
push 1  +
lea eax [ebp+var_28] +
movs   +
push eax  +
push [ebp+arg_0]  +
movs   +
call sub_10469D6  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1043A74  +
cmp [ebp+var_14] 0 +
jnz loc_1043A74  +
cmp [ebp+var_18] 52h +
jz loc_1043820  +
push 0  +
push 0  +
push 281h  +
jmp loc_1043A67  +
push 1  +
lea eax [ebp+var_28] +
push eax  +
push [ebp+arg_0]  +
call sub_10469D6  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1043A74  +
cmp [ebp+var_14] 0 +
jnz loc_1043A74  +
cmp [ebp+var_18] 50h +
jz loc_1043857  +
push 0  +
push 0  +
push 28Dh  +
jmp loc_1043A67  +
lea edi [ebx+30h] +
lea esi [ebp+var_28] +
movs   +
movs   +
push 1  +
lea eax [ebp+var_28] +
movs   +
push eax  +
push [ebp+arg_0]  +
mov dword ptr [ebx] 0Bh +
movs   +
call sub_10469D6  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1043A74  +
cmp [ebp+var_14] 0 +
jnz loc_1043A74  +
mov eax [ebp+var_18] +
add eax 0FFFFFFADh +
cmp eax 0Bh +
ja loc_1043A5E  +
jmp ds:off_1043AD7[eax*4]  +
and dword ptr [ebx+40h] 0 +
push 1  +
lea eax [ebp+var_28] +
push eax  +
push [ebp+arg_0]  +
call sub_10469D6  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1043A74  +
cmp [ebp+var_14] 0 +
jnz loc_1043A74  +
mov eax [ebp+var_18] +
sub eax 5Fh +
mov dword ptr [ebx+54h] 3 +
jz loc_1043A58  +
dec eax  +
jz loc_1043A4F  +
dec eax  +
jz loc_10439E7  +
dec eax  +
jz loc_1043A09  +
push 0  +
push 0  +
push 318h  +
jmp loc_1043A67  +
mov dword ptr [ebx+40h] 1 +
jmp loc_10438A4  +
mov dword ptr [ebx+40h] 2 +
jmp loc_10438A4  +
mov dword ptr [ebx+40h] 3 +
jmp loc_10438A4  +
mov dword ptr [ebx+40h] 4 +
jmp loc_10438A4  +
mov dword ptr [ebx+40h] 5 +
jmp loc_10438A4  +
mov dword ptr [ebx+40h] 6 +
jmp loc_10438A4  +
mov dword ptr [ebx+40h] 7 +
jmp loc_10438A4  +
push 1  +
lea eax [ebp+var_28] +
push eax  +
push [ebp+arg_0]  +
call sub_10469D6  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1043A74  +
cmp [ebp+var_14] 0 +
jnz loc_1043A74  +
cmp [ebp+var_18] 5Ch +
jnz loc_1043945  +
mov dword ptr [ebx+40h] 9 +
lea edi [ebx+44h] +
lea esi [ebp+var_28] +
movs   +
movs   +
push 1  +
lea eax [ebp+var_28] +
movs   +
push eax  +
push [ebp+arg_0]  +
movs   +
call sub_10469D6  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1043A74  +
cmp [ebp+var_14] 0 +
jz loc_10438A4  +
jmp loc_1043A74  +
push 1  +
lea eax [ebp+var_28] +
push eax  +
push [ebp+arg_0]  +
call sub_10469D6  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1043A74  +
cmp [ebp+var_14] 0 +
jnz loc_1043A74  +
cmp [ebp+var_18] 5Ch +
jz loc_10439DE  +
push 0  +
push 0  +
push 2D6h  +
jmp loc_1043A67  +
mov dword ptr [ebx+40h] 8 +
jmp loc_1043975  +
push 1  +
lea eax [ebp+var_28] +
push eax  +
push [ebp+arg_0]  +
mov dword ptr [ebx+54h] 2 +
call sub_10469D6  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1043A74  +
cmp [ebp+var_14] 0 +
jnz loc_1043A74  +
push 1  +
lea eax [ebp+var_28] +
push eax  +
push [ebp+arg_0]  +
call sub_10469D6  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1043A74  +
cmp [ebp+var_14] 0 +
jnz loc_1043A74  +
cmp [ebp+var_18] 63h +
jz loc_1043A35  +
push 0  +
push 0  +
push 30Ah  +
jmp loc_1043A67  +
lea edi [ebx+58h] +
lea esi [ebp+var_28] +
movs   +
movs   +
push 1  +
lea eax [ebp+var_28] +
movs   +
push eax  +
push [ebp+arg_0]  +
movs   +
call sub_10469D6  +
jmp loc_1043A71  +
mov dword ptr [ebx+54h] 1 +
jmp loc_1043A74  +
and dword ptr [ebx+54h] 0 +
jmp loc_1043A74  +
push 0  +
push 0  +
push 2E5h  +
push 0C000A083h  +
call sub_104450C  +
mov [ebp+arg_8] eax +
mov eax [ebp+arg_0] +
mov eax [eax+14h] +
sub eax [ebx+10h] +
cmp [ebp+var_14] 0 +
mov [ebx+14h] eax +
jz loc_104352F  +
xor eax eax +
cmp [ebp+arg_8] eax +
jl loc_104352F  +
push eax  +
push eax  +
push 761h  +
push 0C000A083h  +
call sub_104450C  +
mov [ebp+arg_8] eax +
jmp loc_104352F  +
push edi  +
push edi  +
push 1F4h  +
push 0C000A083h  +
jmp loc_1043AC8  +
push edi  +
push edi  +
push 1E1h  +
push 0C000000Dh  +
call sub_104450C  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor edx edx +
lea esi [eax-30h] +
mov [ecx] edx +
cmp esi 9 +
ja loc_1043B27  +
add eax 0FFFFFFD0h +
mov [ecx] eax +
xor eax eax +
jmp loc_1043B57  +
cmp [ebp+arg_0] dl +
jz loc_1043B46  +
lea esi [eax-61h] +
cmp esi 5 +
ja loc_1043B39  +
add eax 0FFFFFFA9h +
jmp loc_1043B21  +
lea esi [eax-41h] +
cmp esi 5 +
ja loc_1043B46  +
add eax 0FFFFFFC9h +
jmp loc_1043B21  +
push edx  +
push edx  +
push 783h  +
push 0C000A083h  +
call sub_104450C  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax [ebp+arg_4] +
mov edx [ebp+arg_0] +
push esi  +
xor esi esi +
mov [eax] esi +
mov byte ptr [ebp+var_5] 0 +
mov [ebp+var_1] 0 +
mov [ebp+var_C] esi +
mov [ebx] esi +
call dword ptr [edi+18h]  +
mov [ebp+var_14] edx +
cmp eax 0FFFFFFFFh +
jnz loc_1043B93  +
mov eax edx +
jmp loc_1043C5C  +
cmp eax 78h +
jnz loc_1043B9E  +
mov byte ptr [ebp+var_5] 1 +
jmp loc_1043BB7  +
push 0  +
lea ecx [ebp+var_C] +
call sub_1043B0C  +
test eax eax +
jl loc_1043C5C  +
mov esi [ebp+var_C] +
mov [ebp+var_1] 1 +
xor eax eax +
cmp byte ptr [ebp+var_5] al +
setz al  +
dec eax  +
and eax 6 +
add eax 0Ah +
mov [ebp+var_C] eax +
mov edx [ebp+arg_0] +
mov ecx [ebp+var_14] +
call dword ptr [edi+18h]  +
mov [ebp+var_18] eax +
mov [ebp+var_14] edx +
cmp eax 0FFFFFFFFh +
jz loc_1043B8C  +
cmp eax 3Bh +
jz loc_1043C14  +
push [ebp+var_5]  +
lea ecx [ebp+var_10] +
call sub_1043B0C  +
test eax eax +
jl loc_1043C5C  +
or eax 0FFFFFFFFh +
xor edx edx +
div  [ebp+var_C] +
mov [ebp+var_1] 1 +
cmp esi eax +
ja loc_1043C30  +
mov eax [ebp+var_C] +
imul esi eax +
or eax 0FFFFFFFFh +
sub eax [ebp+var_10] +
cmp esi eax +
ja loc_1043C45  +
add esi [ebp+var_10] +
cmp [ebp+var_18] 3Bh +
jnz loc_1043BC9  +
cmp [ebp+var_1] 0 +
jnz loc_1043C50  +
push 0  +
push 0  +
push 7D9h  +
push 0C000A083h  +
jmp loc_1043C3E  +
push 0  +
push 0  +
push 7C8h  +
push 0C0000095h  +
call sub_104450C  +
jmp loc_1043C5C  +
push 0  +
push 0  +
push 7CEh  +
jmp loc_1043C39  +
mov eax [ebp+arg_4] +
mov ecx [ebp+var_14] +
mov [eax] ecx +
mov [ebx] esi +
xor eax eax +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
mov eax dword_1049010 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_4] +
push edi  +
mov [ebp+var_10] eax +
mov eax 1010101h +
lea edi [ebp+var_C] +
stos   +
stos   +
xor edi edi +
mov [ebx] edi +
mov [ebp+var_18] edx +
mov [edx] edi +
mov edx [ebp+var_10] +
call dword ptr [esi+18h]  +
mov ecx edx +
cmp eax 0FFFFFFFFh +
jnz loc_1043CAA  +
mov eax ecx +
jmp loc_1043D88  +
cmp eax 26h +
jz loc_1043CC0  +
push edi  +
push edi  +
push 814h  +
push 0C00000E5h  +
jmp loc_1043D83  +
mov edx [ebp+var_10] +
mov edi ecx +
call dword ptr [esi+18h]  +
cmp eax 0FFFFFFFFh +
jnz loc_1043CD4  +
mov eax edx +
jmp loc_1043D88  +
cmp eax 23h +
jnz loc_1043CEE  +
push ebx  +
push [ebp+var_10]  +
mov ebx [ebp+var_18] +
mov ecx edx +
mov edi esi +
call sub_1043B61  +
jmp loc_1043D88  +
and [ebp+var_14] 0 +
mov edx [ebp+var_10] +
mov ecx edi +
call dword ptr [esi+18h]  +
mov [ebp+var_24] eax +
mov [ebp+var_20] edx +
cmp eax 0FFFFFFFFh +
jz loc_1043CCD  +
cmp eax 3Bh +
jz loc_1043D43  +
xor edx edx +
lea ecx [ebp+edx+var_C] +
cmp byte ptr [ecx] 0 +
jz loc_1043D3D  +
mov edi [ebp+var_14] +
mov eax ds:off_100EE58[edx*8] +
movzx eax word ptr [edi+eax] +
movzx edi ax +
mov [ebp+var_1C] eax +
mov eax [ebp+var_24] +
cmp eax edi +
jz loc_1043D33  +
mov byte ptr [ecx] 0 +
cmp word ptr [ebp+var_1C] 0 +
jnz loc_1043D3D  +
mov byte ptr [ecx] 0 +
inc edx  +
cmp edx 5 +
jb loc_1043D0C  +
add [ebp+var_14] 2 +
mov edi [ebp+var_20] +
cmp eax 3Bh +
jnz loc_1043CF2  +
xor ecx ecx +
cmp byte ptr [ebp+ecx+var_C] 0 +
jnz loc_1043D5E  +
inc ecx  +
cmp ecx 5 +
jb loc_1043D51  +
cmp ecx 5 +
jnb loc_1043D75  +
mov [ebx] edi +
mov eax ds:dword_100EE5C[ecx*8] +
mov ecx [ebp+var_18] +
mov [ecx] eax +
xor eax eax +
jmp loc_1043D88  +
push 0  +
push 0  +
push 85Ah  +
push 0C000A083h  +
call sub_104450C  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_1010796  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov esi [ebp+arg_C] +
push edi  +
xor edi edi +
xor ecx ecx +
mov [ebp+var_4] ecx +
cmp esi edi +
jz loc_1043DB8  +
mov [esi] edi +
mov eax [ebp+arg_10] +
cmp eax edi +
jz loc_1043DC1  +
mov [eax] edi +
mov ebx [ebp+arg_0] +
test ebx 0FFFFFFFEh +
jz loc_1043DDD  +
push edi  +
push edi  +
push 879h  +
push 0C000000Dh  +
jmp loc_1044057  +
cmp [ebp+arg_4] edi +
jnz loc_1043DEB  +
push edi  +
push edi  +
push 87Ch  +
jmp loc_1043DD3  +
mov eax [ebp+arg_8] +
cmp eax edi +
jnz loc_1043DFB  +
push edi  +
push edi  +
push 87Fh  +
jmp loc_1043DD3  +
cmp esi edi +
jz loc_1043E12  +
cmp [esi+8] edi +
jnz loc_1043E12  +
cmp [esi+4] edi +
jz loc_1043E12  +
push edi  +
push edi  +
push 882h  +
jmp loc_1043DD3  +
mov edx [eax] +
mov eax [eax+4] +
add eax edx +
mov [ebp+var_8] edx +
mov [ebp+var_C] eax +
cmp esi edi +
jz loc_1043E33  +
mov edi [esi+8] +
mov ecx [esi+4] +
add ecx edi +
mov [ebp+arg_8] ecx +
mov ecx [ebp+var_4] +
jmp loc_1043E36  +
mov [ebp+arg_8] edi +
and bl 1 +
mov byte ptr [ebp+arg_0+3] bl +
cmp edx eax +
jnb loc_104402F  +
mov ebx 80h +
jmp loc_1043E4E  +
mov eax [ebp+var_C] +
mov ecx [ebp+var_8] +
mov edx eax +
mov eax [ebp+arg_4] +
call dword ptr [eax+18h]  +
cmp eax 0FFFFFFFFh +
jz loc_1044047  +
cmp eax 26h +
jnz loc_1043E92  +
cmp byte ptr [ebp+arg_0+3] 0 +
jz loc_1043E92  +
mov ecx [ebp+var_8] +
mov esi [ebp+arg_4] +
lea eax [ebp+var_8] +
push eax  +
push [ebp+var_C]  +
lea edx [ebp+var_10] +
call sub_1043C66  +
test eax eax +
jl loc_104405C  +
mov eax [ebp+var_10] +
mov esi [ebp+arg_C] +
jmp loc_1043E98  +
mov [ebp+var_8] edx +
mov [ebp+var_10] eax +
cmp eax ebx +
jnb loc_1043EAC  +
cmp edi [ebp+arg_8] +
jnb loc_1043EA4  +
mov [edi] al +
inc edi  +
inc [ebp+var_4]  +
jmp loc_1044020  +
cmp eax 800h +
jnb loc_1043EDE  +
lea esi [edi+1] +
cmp esi [ebp+arg_8] +
jnb loc_1043ED2  +
mov ecx eax +
shr ecx 6 +
and cl 1Fh +
or cl 0C0h +
and al 3Fh +
or al bl +
mov [edi] cl +
inc edi  +
mov [esi] al +
inc edi  +
jmp loc_1043ED5  +
mov edi [ebp+arg_8] +
add [ebp+var_4] 2 +
jmp loc_104401D  +
cmp eax 10000h +
jnb loc_1043F1E  +
lea esi [edi+2] +
cmp esi [ebp+arg_8] +
jnb loc_1043F12  +
mov ecx eax +
shr ecx 0Ch +
and cl 0Fh +
or cl 0E0h +
mov [edi] cl +
mov ecx eax +
shr ecx 6 +
and cl 3Fh +
and al 3Fh +
or cl bl +
or al bl +
mov [edi+1] cl +
mov [esi] al +
add edi 3 +
jmp loc_1043F15  +
mov edi [ebp+arg_8] +
add [ebp+var_4] 3 +
jmp loc_104401D  +
cmp eax 200000h +
jnb loc_1043F6B  +
lea esi [edi+3] +
cmp esi [ebp+arg_8] +
jnb loc_1043F5F  +
mov ecx eax +
shr ecx 12h +
and cl 7 +
or cl 0F0h +
mov [edi] cl +
mov ecx eax +
shr ecx 0Ch +
and cl 3Fh +
or cl bl +
mov [edi+1] cl +
mov ecx eax +
shr ecx 6 +
and cl 3Fh +
and al 3Fh +
or cl bl +
or al bl +
mov [edi+2] cl +
mov [esi] al +
add edi 4 +
jmp loc_1043F62  +
mov edi [ebp+arg_8] +
add [ebp+var_4] 4 +
jmp loc_104401D  +
cmp eax 4000000h +
jnb loc_1043FC2  +
lea esi [edi+4] +
cmp esi [ebp+arg_8] +
jnb loc_1043FB9  +
mov ecx eax +
shr ecx 18h +
and cl 3 +
or cl 0F8h +
mov [edi] cl +
mov ecx eax +
shr ecx 12h +
and cl 3Fh +
or cl bl +
mov [edi+1] cl +
mov ecx eax +
shr ecx 0Ch +
and cl 3Fh +
or cl bl +
mov [edi+2] cl +
mov ecx eax +
shr ecx 6 +
and cl 3Fh +
and al 3Fh +
or cl bl +
or al bl +
mov [edi+3] cl +
mov [esi] al +
add edi 5 +
jmp loc_1043FBC  +
mov edi [ebp+arg_8] +
add [ebp+var_4] 5 +
jmp loc_104401D  +
lea esi [edi+5] +
cmp esi [ebp+arg_8] +
jnb loc_1044016  +
mov ecx eax +
shr ecx 1Eh +
and cl 1 +
or cl 0FCh +
mov [edi] cl +
mov ecx eax +
shr ecx 18h +
and cl 3Fh +
or cl bl +
mov [edi+1] cl +
mov ecx eax +
shr ecx 12h +
and cl 3Fh +
or cl bl +
mov [edi+2] cl +
mov ecx eax +
shr ecx 0Ch +
and cl 3Fh +
or cl bl +
mov [edi+3] cl +
mov ecx eax +
shr ecx 6 +
and cl 3Fh +
and al 3Fh +
or cl bl +
or al bl +
mov [edi+4] cl +
mov [esi] al +
add edi 6 +
jmp loc_1044019  +
mov edi [ebp+arg_8] +
add [ebp+var_4] 6 +
mov esi [ebp+arg_C] +
mov eax [ebp+var_8] +
cmp eax [ebp+var_C] +
jb loc_1043E4B  +
mov ecx [ebp+var_4] +
mov edx [ebp+arg_10] +
xor eax eax +
cmp edx eax +
jz loc_104403A  +
mov [edx] ecx +
cmp esi eax +
jz loc_104404B  +
cmp ecx [esi+4] +
ja loc_104404B  +
mov [esi] ecx +
jmp loc_104405C  +
mov eax edx +
jmp loc_104405C  +
push eax  +
push eax  +
push 903h  +
push 0C0000023h  +
call sub_104450C  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push esi  +
push 2E8h  +
mov esi ecx +
push 0  +
push esi  +
mov byte ptr [esi+2E8h] 0 +
call memset  +
add esp 0Ch +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push 5D4h  +
mov esi ecx +
push 0  +
push esi  +
mov byte ptr [esi+5D4h] 0 +
call memset  +
add esp 0Ch +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push [ebp+arg_8]  +
mov esi ecx +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push esi  +
call sub_1041A61  +
test eax eax +
jge loc_10440FD  +
mov [ebp+arg_8] eax +
lea eax [ebp+var_10] +
push eax  +
lea ecx [ebp+arg_8] +
mov [ebp+var_10] offset aDW7rtmBaseXm_2 +
mov [ebp+var_C] offset aCxmlnamespacem +
mov [ebp+var_8] 66h +
mov [ebp+var_4] offset aRtlnsinitializ +
call sub_103D6FE  +
jmp loc_1044108  +
and [ebp+arg_8] 0 +
mov byte ptr [esi+2E8h] 1 +
mov eax [ebp+arg_8] +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
push esi  +
push edi  +
push 0Ah  +
xor eax eax +
mov esi ecx +
pop ecx  +
mov [ebp+var_3C] 2Ch +
lea edi [ebp+var_38] +
stos   +
mov eax [ebp+arg_8] +
mov [ebp+var_38] eax +
mov eax [ebp+arg_0] +
mov [ebp+var_30] eax +
mov eax [ebp+arg_4] +
mov [ebp+var_2C] eax +
lea eax [ebp+var_3C] +
push eax  +
push esi  +
mov [ebp+var_34] 20h +
mov [ebp+var_28] 1 +
call sub_1042289  +
test eax eax +
jge loc_104418A  +
mov [ebp+arg_8] eax +
lea eax [ebp+var_10] +
push eax  +
lea ecx [ebp+arg_8] +
mov [ebp+var_10] offset aDW7rtmBaseXm_2 +
mov [ebp+var_C] offset aCxmllogicals_0 +
mov [ebp+var_8] 93h +
mov [ebp+var_4] offset aRtlxmlinitiali +
call sub_103D6FE  +
jmp loc_1044195  +
and [ebp+arg_8] 0 +
mov byte ptr [esi+5D4h] 1 +
mov eax [ebp+arg_8] +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax large fs:18h +
mov eax [eax+30h] +
sub esp 14h +
push esi  +
push ecx  +
push 0  +
push dword ptr [eax+18h]  +
mov esi edx +
call ds:RtlAllocateHeap  +
mov [esi] eax +
pop esi  +
test eax eax +
jnz loc_10441FB  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-4] +
mov dword ptr [ebp-4] 0C0000017h +
mov dword ptr [ebp-14h] offset aDW7rtmBaseXm_2 +
mov dword ptr [ebp-10h] offset aCxmlcursorXmla +
mov dword ptr [ebp-0Ch] 0B4h +
mov dword ptr [ebp-8] offset aPpvallocRtlall +
call sub_103D6FE  +
jmp loc_10441FF  +
and dword ptr [ebp-4] 0 +
mov eax [ebp-4] +
leave   +
retn 4  +
***
mov eax large fs:18h +
mov eax [eax+30h] +
push ecx  +
push 0  +
push dword ptr [eax+18h]  +
call ds:RtlFreeHeap  +
test al al +
jnz loc_1044225  +
int 3  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push ecx  +
call sub_104451D  +
test eax eax +
jge loc_1044275  +
mov [ebp+arg_8] eax +
lea eax [ebp+var_10] +
push eax  +
lea ecx [ebp+arg_8] +
mov [ebp+var_10] offset aDW7rtmBaseXm_2 +
mov [ebp+var_C] offset aCxmlcursorCo_0 +
mov [ebp+var_8] 10Dh +
mov [ebp+var_4] offset aRtlxmldefaultc +
call sub_103D6FE  +
jmp loc_1044279  +
and [ebp+arg_8] 0 +
mov eax [ebp+arg_8] +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
lea eax [ecx+8C4h] +
push eax  +
lea eax [ecx+17C8h] +
push eax  +
lea eax [ecx+5D8h] +
push eax  +
push ecx  +
call sub_10427CF  +
test eax eax +
jge loc_10442D9  +
mov [ebp+var_4] eax +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_14] offset aDW7rtmBaseXm_4 +
mov [ebp+var_10] offset aCxmlcursorNext +
mov [ebp+var_C] 2Fh +
mov [ebp+var_8] offset aRtlxmlnextlogi +
call sub_103D6FE  +
jmp loc_10442DD  +
and [ebp+var_4] 0 +
mov eax [ebp+var_4] +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push [ebp+arg_0]  +
lea eax [ecx+2Ch] +
push 0ED8h  +
push eax  +
push 6  +
push 4Ch  +
push ecx  +
call sub_1041FED  +
test eax eax +
jge loc_1044336  +
mov [ebp+arg_0] eax +
lea eax [ebp+var_10] +
push eax  +
lea ecx [ebp+arg_0] +
mov [ebp+var_10] offset aDW7rtmBaseXm_2 +
mov [ebp+var_C] offset aCrtlgrowinglis +
mov [ebp+var_8] 2Ah +
mov [ebp+var_4] offset aRtlinitializeg +
call sub_103D6FE  +
jmp loc_104433A  +
and [ebp+arg_0] 0 +
mov eax [ebp+arg_0] +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_104422D  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_104408D  +
lea ecx [esi+5D8h] +
call sub_1044068  +
push 2Ch  +
lea eax [esi+8C4h] +
push 0  +
push eax  +
call memset  +
and dword ptr [esi+1868h] 0 +
add esp 0Ch +
mov dword ptr [esi+1860h] offset loc_10441A3 +
mov dword ptr [esi+1864h] offset loc_104420B +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
lea edi [esi+1860h] +
push edi  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1044115  +
test eax eax +
jl loc_104440E  +
push edi  +
push esi  +
push offset loc_1044346  +
lea ecx [esi+5D8h] +
call sub_10440B2  +
test eax eax +
jl loc_104440E  +
push edi  +
lea ecx [esi+8C4h] +
call sub_10442E7  +
test eax eax +
jl loc_104440E  +
push 98h  +
push 0  +
add esi 17C8h +
push esi  +
call memset  +
add esp 0Ch +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
xor edi edi +
mov [ebp+var_4] ecx +
cmp [esi+8] edi +
jnz loc_1044449  +
push esi  +
push dword ptr [ebx+4]  +
call sub_102FCCB  +
cmp eax edi +
jge loc_1044449  +
mov [ebp+arg_4] eax +
jmp loc_10444CF  +
lea eax [ebp+arg_0] +
push eax  +
push esi  +
push ebx  +
push [ebp+var_4]  +
mov [esi] edi +
push edi  +
call sub_1043D9D  +
cmp eax 0C0000023h +
jnz loc_10444D9  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+arg_0]  +
mov [ebp+var_10] edi +
mov [ebp+var_C] edi +
mov [ebp+var_8] edi +
call sub_102FCCB  +
cmp eax edi +
jge loc_1044487  +
lea ecx [ebp+var_10] +
mov [ebp+arg_4] eax +
call sub_1032B6D  +
jmp loc_10444CF  +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
push ebx  +
push [ebp+var_4]  +
push edi  +
call sub_1043D9D  +
cmp eax edi +
jge loc_10444B2  +
push 61h  +
pop esi  +
lea ecx [ebp+var_10] +
mov edi offset aRtlxmlextentto +
mov [ebp+arg_4] eax +
call sub_1032B6D  +
jmp loc_10444E5  +
mov eax [ebp+arg_0] +
cmp eax [ebp+var_C] +
jbe loc_10444BB  +
int 3  +
push esi  +
lea ecx [ebp+var_10] +
call sub_1035D7C  +
lea ecx [ebp+var_10] +
call sub_1032B6D  +
mov [ebp+arg_4] edi +
mov eax [ebp+arg_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
cmp eax edi +
jz loc_10444CC  +
jge loc_10444BA  +
push 68h  +
pop esi  +
mov [ebp+arg_4] eax +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+arg_4] +
mov [ebp+var_14] offset aDW7rtmBaseXm_4 +
mov [ebp+var_10] offset aCxmlcursorDeco +
mov [ebp+var_C] esi +
mov [ebp+var_8] edi +
call sub_103D6FE  +
jmp loc_10444CF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+arg_4] +
push esi  +
xor esi esi +
mov [ebp+var_4] esi +
cmp ecx esi +
jz loc_10445C5  +
mov eax [ebp+arg_8] +
cmp eax esi +
jz loc_10445C5  +
mov edx [ebp+arg_C] +
cmp edx esi +
jz loc_10445C5  +
mov [edx] esi +
mov esi [ebp+arg_0] +
mov esi [esi+18h] +
push ebx  +
mov ebx [ecx] +
push edi  +
mov edi [ecx+4] +
mov ecx [eax] +
mov [ebp+arg_8] esi +
mov esi [eax+4] +
add edi ebx +
mov [ebp+arg_4] ecx +
add esi ecx +
cmp ebx edi +
jnb loc_10445AA  +
cmp [ebp+arg_4] esi +
jnb loc_10445B4  +
mov edx edi +
mov ecx ebx +
call [ebp+arg_8]  +
cmp eax 0FFFFFFFFh +
jz loc_1044598  +
mov ecx [ebp+arg_4] +
mov ebx edx +
mov edx esi +
mov [ebp+arg_0] eax +
call [ebp+arg_8]  +
cmp eax 0FFFFFFFFh +
jz loc_1044598  +
mov [ebp+arg_4] edx +
cmp eax [ebp+arg_0] +
jnz loc_104459D  +
mov edx [ebp+arg_C] +
jmp loc_1044564  +
mov [ebp+var_4] edx +
jmp loc_10445BE  +
mov ecx [ebp+arg_C] +
sbb eax eax +
and eax 2 +
dec eax  +
mov [ecx] eax +
jmp loc_10445BE  +
cmp [ebp+arg_4] esi +
jnb loc_10445B4  +
or dword ptr [edx] 0FFFFFFFFh +
jmp loc_10445BE  +
cmp ebx edi +
jnb loc_10445BE  +
mov dword ptr [edx] 1 +
mov eax [ebp+var_4] +
pop edi  +
pop ebx  +
jmp loc_10445D3  +
push esi  +
push esi  +
push 31h  +
push 0C000000Dh  +
call sub_104450C  +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov ecx [ebp+8] +
push ebx  +
push esi  +
xor esi esi +
push edi  +
cmp ecx esi +
jz loc_10446AC  +
mov edx [ebp+0Ch] +
cmp edx esi +
jz loc_10446AC  +
mov eax [ebp+10h] +
cmp eax esi +
jz loc_10446AC  +
cmp [ebp+14h] esi +
jz loc_10446AC  +
mov ecx [ecx+18h] +
mov esi [edx+4] +
mov edi [eax+4] +
mov ebx [eax] +
mov [ebp+0Ch] ecx +
mov ecx [edx] +
add esi ecx +
add ebx edi +
cmp ecx esi +
jnb loc_104469D  +
cmp edi ebx +
jnb loc_1044675  +
movzx eax word ptr [edi] +
inc edi  +
mov edx esi +
mov [ebp+8] eax +
inc edi  +
call dword ptr [ebp+0Ch]  +
mov [ebp-8] eax +
mov [ebp-4] edx +
cmp eax 0FFFFFFFFh +
jz loc_1044681  +
cmp dword ptr [ebp+18h] 0 +
jz loc_104465F  +
mov ecx [ebp+8] +
call dword ptr [ebp+18h]  +
mov ecx [ebp-8] +
mov [ebp+8] eax +
call dword ptr [ebp+18h]  +
mov [ebp-8] eax +
mov eax [ebp+8] +
mov ecx [ebp-4] +
cmp eax 0FFFFh +
ja loc_1044685  +
cmp [ebp-8] eax +
jnz loc_1044695  +
cmp ecx esi +
jb loc_104462B  +
cmp ecx esi +
jnb loc_104469D  +
mov eax [ebp+14h] +
or dword ptr [eax] 0FFFFFFFFh +
jmp loc_10446A8  +
mov eax edx +
jmp loc_10446BD  +
push 0  +
push 0  +
push 0C2h  +
push 0C0000095h  +
jmp loc_10446B8  +
sbb eax eax +
and eax 0FFFFFFFEh +
inc eax  +
jmp loc_10446A3  +
cmp edi ebx +
sbb eax eax +
neg eax  +
mov ecx [ebp+14h] +
mov [ecx] eax +
xor eax eax +
jmp loc_10446BD  +
push esi  +
push esi  +
push 9Eh  +
push 0C000000Dh  +
call sub_104450C  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi edx +
sub esi ecx +
cmp ecx edx +
jb loc_10446E6  +
or eax 0FFFFFFFFh +
mov edx 0C0000011h +
jmp loc_1044973  +
mov al [ecx] +
lea edx [ecx+1] +
mov ecx 80h +
push ebx  +
mov [ebp-1] al +
test al cl +
jnz loc_1044708  +
movzx eax al +
test eax eax +
jz loc_104496A  +
jmp loc_1044972  +
mov bl al +
and bl 0E0h +
mov al 0C0h +
cmp bl al +
jnz loc_1044746  +
cmp esi 2 +
jb loc_104496A  +
mov bl [edx] +
mov [ebp-5] bl +
and bl al +
inc edx  +
cmp bl cl +
jnz loc_104496A  +
movzx eax byte ptr [ebp-1] +
movzx esi byte ptr [ebp-5] +
and eax 1Fh +
shl eax 6 +
and esi 3Fh +
or eax esi +
cmp eax ecx +
jmp loc_1044968  +
mov bl [ebp-1] +
and bl 0F0h +
cmp bl 0E0h +
jnz loc_10447AA  +
cmp esi 3 +
jb loc_104496A  +
mov bl [edx] +
mov [ebp-2] bl +
mov bl [edx+1] +
mov [ebp-3] bl +
mov bl [ebp-2] +
inc edx  +
and bl al +
inc edx  +
cmp bl cl +
jnz loc_104496A  +
mov bl [ebp-3] +
and bl al +
cmp bl cl +
jnz loc_104496A  +
movzx eax byte ptr [ebp-1] +
movzx ecx byte ptr [ebp-2] +
and eax 0Fh +
shl eax 6 +
and ecx 3Fh +
or eax ecx +
movzx ecx byte ptr [ebp-3] +
shl eax 6 +
and ecx 3Fh +
or eax ecx +
cmp eax 800h +
jmp loc_1044968  +
mov bl [ebp-1] +
and bl 0F8h +
cmp bl 0F0h +
jnz loc_104482E  +
cmp esi 4 +
jb loc_104496A  +
mov bl [edx] +
mov [ebp-3] bl +
mov bl [edx+1] +
mov [ebp-2] bl +
mov bl [edx+2] +
mov [ebp-4] bl +
mov bl [ebp-3] +
and bl al +
add edx 3 +
cmp bl cl +
jnz loc_104496A  +
mov bl [ebp-2] +
and bl al +
cmp bl cl +
jnz loc_104496A  +
mov bl [ebp-4] +
and bl al +
cmp bl cl +
jnz loc_104496A  +
movzx eax byte ptr [ebp-1] +
movzx ecx byte ptr [ebp-3] +
and eax 7 +
and ecx 3Fh +
shl eax 6 +
or eax ecx +
movzx ecx byte ptr [ebp-2] +
and ecx 3Fh +
shl eax 6 +
or eax ecx +
movzx ecx byte ptr [ebp-4] +
shl eax 6 +
and ecx 3Fh +
or eax ecx +
cmp eax 10000h +
jmp loc_1044968  +
mov bl [ebp-1] +
and bl 0FCh +
cmp bl 0F8h +
jnz loc_10448C7  +
cmp esi 5 +
jb loc_104496A  +
mov bl [edx] +
mov [ebp-4] bl +
mov bl [edx+1] +
mov [ebp-3] bl +
mov bl [edx+2] +
mov [ebp-2] bl +
mov bl [edx+3] +
mov [ebp-5] bl +
mov bl [ebp-4] +
and bl al +
add edx 4 +
cmp bl cl +
jnz loc_104496A  +
mov bl [ebp-3] +
and bl al +
cmp bl cl +
jnz loc_104496A  +
mov bl [ebp-2] +
and bl al +
cmp bl cl +
jnz loc_104496A  +
mov bl [ebp-5] +
and bl al +
cmp bl cl +
jnz loc_104496A  +
movzx eax byte ptr [ebp-1] +
movzx ecx byte ptr [ebp-4] +
and eax 3 +
shl eax 6 +
and ecx 3Fh +
or eax ecx +
movzx ecx byte ptr [ebp-3] +
shl eax 6 +
and ecx 3Fh +
or eax ecx +
movzx ecx byte ptr [ebp-2] +
shl eax 6 +
and ecx 3Fh +
or eax ecx +
shl eax 6 +
jmp loc_1044824  +
***
mov bl [ebp-1] +
and bl 0FEh +
cmp bl 0FCh +
jnz loc_104496A  +
cmp esi 6 +
jb loc_104496A  +
mov bl [edx] +
mov [ebp-4] bl +
mov bl [edx+1] +
mov [ebp-3] bl +
mov bl [edx+2] +
mov [ebp-2] bl +
mov bl [edx+3] +
mov [ebp-6] bl +
mov bl [edx+4] +
mov [ebp-5] bl +
mov bl [ebp-4] +
and bl al +
add edx 5 +
cmp bl cl +
jnz loc_104496A  +
mov bl [ebp-3] +
and bl al +
cmp bl cl +
jnz loc_104496A  +
mov bl [ebp-2] +
and bl al +
cmp bl cl +
jnz loc_104496A  +
mov bl [ebp-6] +
and bl al +
cmp bl cl +
jnz loc_104496A  +
mov bl [ebp-5] +
and bl al +
cmp bl cl +
jnz loc_104496A  +
movzx eax byte ptr [ebp-1] +
movzx ecx byte ptr [ebp-4] +
and eax 1 +
shl eax 6 +
and ecx 3Fh +
or eax ecx +
movzx ecx byte ptr [ebp-3] +
shl eax 6 +
and ecx 3Fh +
or eax ecx +
movzx ecx byte ptr [ebp-2] +
shl eax 6 +
and ecx 3Fh +
or eax ecx +
movzx ecx byte ptr [ebp-5] +
shl eax 0Ch +
and ecx 3Fh +
or eax ecx +
cmp eax 4000000h +
jnb loc_1044972  +
mov edx 0C0000161h +
or eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
leave   +
retn   +
***
sub edx ecx +
cmp edx 4 +
jnb loc_104498B  +
or eax 0FFFFFFFFh +
mov edx 0C0000011h +
retn   +
***
mov eax [ecx] +
lea edx [ecx+4] +
retn   +
***
sub edx ecx +
cmp edx 4 +
jnb loc_10449A6  +
or eax 0FFFFFFFFh +
mov edx 0C0000011h +
retn   +
***
movzx eax byte ptr [ecx] +
movzx edx byte ptr [ecx+1] +
shl eax 8 +
or eax edx +
movzx edx byte ptr [ecx+2] +
shl eax 8 +
or eax edx +
movzx edx byte ptr [ecx+3] +
shl eax 8 +
or eax edx +
lea edx [ecx+4] +
retn   +
***
sub edx ecx +
cmp edx 2 +
jnb loc_10449DD  +
or eax 0FFFFFFFFh +
mov edx 0C0000011h +
retn   +
***
movzx ax byte ptr [ecx] +
push esi  +
movzx si byte ptr [ecx+1] +
shl ax 8 +
or ax si +
movzx esi ax +
mov eax 0D800h +
cmp si ax +
mov eax 0DC00h +
jb loc_1044A2F  +
cmp si ax +
jnb loc_1044A34  +
cmp edx 4 +
jb loc_1044A3E  +
movzx ax byte ptr [ecx+2] +
movzx edx byte ptr [ecx+3] +
shl ax 8 +
movzx eax ax +
or eax edx +
movzx edx si +
sub edx 0D7F7h +
shl edx 0Ah +
add eax edx +
lea edx [ecx+4] +
pop esi  +
retn   +
***
cmp si ax +
jb loc_1044A48  +
mov eax 0DFFFh +
cmp si ax +
ja loc_1044A48  +
or eax 0FFFFFFFFh +
mov edx 0C0000161h +
pop esi  +
retn   +
***
movzx eax si +
lea edx [ecx+2] +
pop esi  +
retn   +
***
sub edx ecx +
cmp edx 2 +
jnb loc_1044A65  +
or eax 0FFFFFFFFh +
mov edx 0C0000011h +
retn   +
***
movzx eax word ptr [ecx] +
push esi  +
mov esi 0D800h +
cmp ax si +
jb loc_1044A98  +
mov esi 0DC00h +
cmp ax si +
jnb loc_1044AA2  +
cmp edx 4 +
jb loc_1044AAC  +
movzx edx word ptr [ecx+2] +
movzx eax ax +
sub eax 0D7F7h +
shl eax 0Ah +
add eax edx +
lea edx [ecx+4] +
pop esi  +
retn   +
***
mov edx 0DC00h +
cmp ax dx +
jb loc_1044AB6  +
mov edx 0DFFFh +
cmp ax dx +
ja loc_1044AB6  +
or eax 0FFFFFFFFh +
mov edx 0C0000161h +
pop esi  +
retn   +
***
movzx eax ax +
lea edx [ecx+2] +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
mov ecx [edi+14h] +
mov esi edx +
mov edx [edi+10h] +
cmp ecx edx +
jb loc_1044AF4  +
and dword ptr [esi+8] 0 +
mov eax [edi+10h] +
mov [esi+4] eax +
mov eax [edi+1Ch] +
and dword ptr [esi+10h] 0 +
mov [esi+0Ch] eax +
mov dword ptr [esi] 3 +
jmp loc_1044C1C  +
call dword ptr [edi+18h]  +
cmp eax 0FFFFFFFFh +
jnz loc_1044B03  +
mov eax edx +
jmp loc_1044C1E  +
mov ecx [edi+14h] +
mov [esi+4] ecx +
sub edx [edi+14h] +
mov [esi+8] edx +
mov ecx [edi+1Ch] +
mov [esi+0Ch] ecx +
xor ecx ecx +
inc ecx  +
mov [esi+10h] ecx +
cmp eax 2Eh +
ja loc_1044BA6  +
jz loc_1044BA2  +
cmp eax 25h +
ja loc_1044B7B  +
jz loc_1044B74  +
cmp eax 9 +
jb loc_1044BF5  +
cmp eax 0Ah +
jbe loc_1044B6D  +
cmp eax 0Dh +
jz loc_1044B6D  +
cmp eax 20h +
jz loc_1044B6D  +
cmp eax 21h +
jz loc_1044B66  +
cmp eax 22h +
jz loc_1044B5F  +
cmp eax 23h +
jnz loc_1044BF5  +
push 19h  +
jmp loc_1044C0B  +
push 0Ah  +
jmp loc_1044C0B  +
push 10h  +
jmp loc_1044C0B  +
push 0Dh  +
jmp loc_1044C0B  +
push 1Ah  +
jmp loc_1044C0B  +
sub eax 26h +
jz loc_1044B9E  +
dec eax  +
jz loc_1044B9A  +
dec eax  +
jz loc_1044B96  +
dec eax  +
jz loc_1044B92  +
sub eax 4 +
jnz loc_1044BF5  +
mov eax ecx +
jmp loc_1044C0C  +
push 14h  +
jmp loc_1044C0B  +
push 13h  +
jmp loc_1044C0B  +
push 9  +
jmp loc_1044C0B  +
push 18h  +
jmp loc_1044C0B  +
push 2  +
jmp loc_1044C0B  +
cmp eax 3Fh +
ja loc_1044BDF  +
jz loc_1044BDB  +
sub eax 2Fh +
jz loc_1044BD7  +
sub eax 0Bh +
jz loc_1044BD3  +
dec eax  +
jz loc_1044BCF  +
dec eax  +
jz loc_1044BCB  +
dec eax  +
jz loc_1044BC7  +
dec eax  +
jnz loc_1044BF5  +
push 6  +
jmp loc_1044C0B  +
push 4  +
jmp loc_1044C0B  +
push 7  +
jmp loc_1044C0B  +
push 16h  +
jmp loc_1044C0B  +
push 15h  +
jmp loc_1044C0B  +
push 5  +
jmp loc_1044C0B  +
push 8  +
jmp loc_1044C0B  +
sub eax 5Bh +
jz loc_1044C09  +
dec eax  +
dec eax  +
jz loc_1044C05  +
dec eax  +
dec eax  +
jz loc_1044C01  +
sub eax 1Ch +
jz loc_1044BFD  +
dec eax  +
dec eax  +
jz loc_1044BF9  +
push 0Ch  +
jmp loc_1044C0B  +
push 12h  +
jmp loc_1044C0B  +
push 11h  +
jmp loc_1044C0B  +
push 17h  +
jmp loc_1044C0B  +
push 0Fh  +
jmp loc_1044C0B  +
push 0Eh  +
pop eax  +
mov [esi] eax +
mov eax [edi+14h] +
mov [edi+38h] eax +
push 5  +
add edi 24h +
pop ecx  +
movs   +
xor eax eax +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
mov ecx [esi+14h] +
mov ebx [esi+10h] +
xor eax eax +
push edi  +
mov edi edx +
mov [ebp+var_8] eax +
mov [ebp+var_4] ecx +
cmp ecx ebx +
jb loc_1044C73  +
mov [edi+8] eax +
mov ecx [esi+10h] +
mov [edi+4] ecx +
mov ecx [esi+1Ch] +
mov [edi+0Ch] ecx +
mov [edi+10h] eax +
mov dword ptr [edi] 3 +
mov edi [ebp+arg_0] +
cmp edi eax +
jz loc_1044E0F  +
stos   +
stos   +
stos   +
stos   +
stos   +
jmp loc_1044E0F  +
mov ecx [ebp+var_4] +
mov edx ebx +
call dword ptr [esi+18h]  +
cmp eax 9 +
jb loc_1044CD9  +
cmp eax 0Ah +
jbe loc_1044C8F  +
cmp eax 0Dh +
jz loc_1044C8F  +
cmp eax 20h +
jnz loc_1044CCD  +
inc [ebp+var_8]  +
mov ecx edx +
mov [ebp+var_4] ecx +
cmp edx ebx +
jb loc_1044C73  +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1044DF1  +
cmp edx ebx +
jnz loc_1044DF1  +
and dword ptr [eax+8] 0 +
mov edx [esi+10h] +
mov [eax+4] edx +
mov edx [esi+1Ch] +
and dword ptr [eax+10h] 0 +
mov [eax+0Ch] edx +
mov dword ptr [eax] 3 +
jmp loc_1044DF1  +
cmp eax 0FFFFFFFFh +
jnz loc_1044CD9  +
mov eax edx +
jmp loc_1044E11  +
mov ebx [ebp+arg_0] +
mov ecx [ebp+var_4] +
test ebx ebx +
jz loc_1044DF1  +
sub edx ecx +
mov [ebx+4] ecx +
mov [ebx+8] edx +
mov ecx [esi+1Ch] +
mov [ebx+0Ch] ecx +
xor ecx ecx +
inc ecx  +
mov [ebx+10h] ecx +
cmp eax 2Eh +
ja loc_1044D86  +
jz loc_1044D82  +
cmp eax 25h +
ja loc_1044D5B  +
jz loc_1044D54  +
cmp eax 9 +
jb loc_1044DD5  +
cmp eax 0Ah +
jbe loc_1044D4D  +
cmp eax 0Dh +
jz loc_1044D4D  +
cmp eax 20h +
jz loc_1044D4D  +
cmp eax 21h +
jz loc_1044D46  +
cmp eax 22h +
jz loc_1044D3F  +
cmp eax 23h +
jnz loc_1044DD5  +
push 19h  +
jmp loc_1044DEB  +
push 0Ah  +
jmp loc_1044DEB  +
push 10h  +
jmp loc_1044DEB  +
push 0Dh  +
jmp loc_1044DEB  +
push 1Ah  +
jmp loc_1044DEB  +
sub eax 26h +
jz loc_1044D7E  +
dec eax  +
jz loc_1044D7A  +
dec eax  +
jz loc_1044D76  +
dec eax  +
jz loc_1044D72  +
sub eax 4 +
jnz loc_1044DD5  +
mov eax ecx +
jmp loc_1044DEC  +
push 14h  +
jmp loc_1044DEB  +
push 13h  +
jmp loc_1044DEB  +
push 9  +
jmp loc_1044DEB  +
push 18h  +
jmp loc_1044DEB  +
push 2  +
jmp loc_1044DEB  +
cmp eax 3Fh +
ja loc_1044DBF  +
jz loc_1044DBB  +
sub eax 2Fh +
jz loc_1044DB7  +
sub eax 0Bh +
jz loc_1044DB3  +
dec eax  +
jz loc_1044DAF  +
dec eax  +
jz loc_1044DAB  +
dec eax  +
jz loc_1044DA7  +
dec eax  +
jnz loc_1044DD5  +
push 6  +
jmp loc_1044DEB  +
push 4  +
jmp loc_1044DEB  +
push 7  +
jmp loc_1044DEB  +
push 16h  +
jmp loc_1044DEB  +
push 15h  +
jmp loc_1044DEB  +
push 5  +
jmp loc_1044DEB  +
push 8  +
jmp loc_1044DEB  +
sub eax 5Bh +
jz loc_1044DE9  +
dec eax  +
dec eax  +
jz loc_1044DE5  +
dec eax  +
dec eax  +
jz loc_1044DE1  +
sub eax 1Ch +
jz loc_1044DDD  +
dec eax  +
dec eax  +
jz loc_1044DD9  +
push 0Ch  +
jmp loc_1044DEB  +
push 12h  +
jmp loc_1044DEB  +
push 11h  +
jmp loc_1044DEB  +
push 17h  +
jmp loc_1044DEB  +
push 0Fh  +
jmp loc_1044DEB  +
push 0Eh  +
pop eax  +
mov ecx [ebp+var_4] +
mov [ebx] eax +
mov eax [esi+14h] +
mov [edi+4] eax +
sub ecx [esi+14h] +
mov eax [ebp+var_8] +
mov [edi+8] ecx +
mov [edi+10h] eax +
mov eax [esi+1Ch] +
mov [edi+0Ch] eax +
mov dword ptr [edi] 0Dh +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
xor eax eax +
push esi  +
push edi  +
mov ebx edx +
mov edi ebx +
stos   +
stos   +
stos   +
stos   +
mov esi ecx +
stos   +
mov eax [esi+14h] +
mov [ebx+4] eax +
mov eax [esi+1Ch] +
mov [ebx+0Ch] eax +
mov eax [esi+10h] +
mov edi [esi+14h] +
xor ecx ecx +
mov [ebp+var_8] ecx +
mov [ebp+var_4] eax +
cmp edi eax +
jb loc_1044E6C  +
mov [ebx+8] ecx +
mov eax [esi+10h] +
mov [ebx+4] eax +
mov eax [esi+1Ch] +
mov [ebx+0Ch] eax +
mov [ebx+10h] ecx +
mov dword ptr [ebx] 3 +
jmp loc_1044EDF  +
mov edx [ebp+var_4] +
mov ecx edi +
call dword ptr [esi+18h]  +
mov ecx [ebp+arg_0] +
cmp eax 3Ch +
jz loc_1044E91  +
cmp eax 0FFFFFFFFh +
jz loc_1044E8D  +
inc [ebp+var_8]  +
mov edi edx +
cmp edx [ebp+var_4] +
jb loc_1044E6C  +
jmp loc_1044EB0  +
mov eax edx +
jmp loc_1044EE1  +
test ecx ecx +
jz loc_1044ED3  +
sub edx edi +
mov [ecx+8] edx +
mov [ecx+4] edi +
mov eax [esi+1Ch] +
mov [ecx+0Ch] eax +
mov dword ptr [ecx+10h] 1 +
mov dword ptr [ecx] 7 +
test ecx ecx +
jz loc_1044ED3  +
cmp edi [ebp+var_4] +
jb loc_1044ED3  +
and dword ptr [ecx+8] 0 +
mov eax [esi+10h] +
mov [ecx+4] eax +
mov eax [esi+1Ch] +
and dword ptr [ecx+10h] 0 +
mov [ecx+0Ch] eax +
mov dword ptr [ecx] 3 +
sub edi [esi+14h] +
mov eax [ebp+var_8] +
mov [ebx+8] edi +
mov [ebx+10h] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp [ebp+arg_0] 0 +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+10h] +
mov ebx [edi+14h] +
mov esi edx +
mov [ebp+var_4] eax +
jz loc_104507D  +
cmp ebx eax +
jnb loc_1045052  +
mov edx [ebp+var_4] +
mov ecx ebx +
call dword ptr [edi+18h]  +
cmp eax 0FFFFFFFFh +
jz loc_1045056  +
cmp eax 2Eh +
ja loc_1044FB1  +
jz loc_1044FAD  +
cmp eax 25h +
ja loc_1044F85  +
jz loc_1044F7E  +
cmp eax 9 +
jb loc_1045000  +
push 0Ah  +
pop ecx  +
cmp eax ecx +
jbe loc_1044F77  +
cmp eax 0Dh +
jz loc_1044F77  +
cmp eax 20h +
jz loc_1044F77  +
cmp eax 21h +
jz loc_1044F70  +
cmp eax 22h +
jz loc_1045017  +
cmp eax 23h +
jnz loc_1045000  +
push 19h  +
jmp loc_1045016  +
push 10h  +
jmp loc_1045016  +
push 0Dh  +
jmp loc_1045016  +
push 1Ah  +
jmp loc_1045016  +
sub eax 26h +
jz loc_1044FA9  +
dec eax  +
jz loc_1044FA5  +
dec eax  +
jz loc_1044FA1  +
dec eax  +
jz loc_1044F9D  +
sub eax 4 +
jnz loc_1045000  +
xor ecx ecx +
inc ecx  +
jmp loc_1045017  +
push 14h  +
jmp loc_1045016  +
push 13h  +
jmp loc_1045016  +
push 9  +
jmp loc_1045016  +
push 18h  +
jmp loc_1045016  +
push 2  +
jmp loc_1045016  +
cmp eax 3Fh +
ja loc_1044FEA  +
jz loc_1044FE6  +
sub eax 2Fh +
jz loc_1044FE2  +
sub eax 0Bh +
jz loc_1044FDE  +
dec eax  +
jz loc_1044FDA  +
dec eax  +
jz loc_1044FD6  +
dec eax  +
jz loc_1044FD2  +
dec eax  +
jnz loc_1045000  +
push 6  +
jmp loc_1045016  +
push 4  +
jmp loc_1045016  +
push 7  +
jmp loc_1045016  +
push 16h  +
jmp loc_1045016  +
push 15h  +
jmp loc_1045016  +
push 5  +
jmp loc_1045016  +
push 8  +
jmp loc_1045016  +
sub eax 5Bh +
jz loc_1045014  +
dec eax  +
dec eax  +
jz loc_1045010  +
dec eax  +
dec eax  +
jz loc_104500C  +
sub eax 1Ch +
jz loc_1045008  +
dec eax  +
dec eax  +
jz loc_1045004  +
push 0Ch  +
jmp loc_1045016  +
push 12h  +
jmp loc_1045016  +
push 11h  +
jmp loc_1045016  +
push 17h  +
jmp loc_1045016  +
push 0Fh  +
jmp loc_1045016  +
push 0Eh  +
pop ecx  +
mov eax edx +
sub eax ebx +
mov [esi+8] eax +
mov [esi+4] ebx +
mov [esi] ecx +
mov dword ptr [esi+10h] 1 +
mov eax [edi+1Ch] +
mov [esi+0Ch] eax +
mov eax [ebp+arg_0] +
add esi 14h +
dec [ebp+arg_0]  +
mov ebx edx +
test eax eax +
jz loc_1045048  +
cmp edx [ebp+var_4] +
jb loc_1044F15  +
cmp [ebp+arg_0] 0FFFFFFFFh +
jnz loc_1045052  +
and [ebp+arg_0] 0 +
xor eax eax +
jmp loc_1045078  +
mov eax edx +
jmp loc_104507F  +
dec [ebp+arg_0]  +
mov [esi+8] eax +
mov ecx [edi+10h] +
mov [esi+4] ecx +
mov ecx [edi+1Ch] +
mov [esi+0Ch] ecx +
mov [esi+10h] eax +
mov dword ptr [esi] 3 +
add esi 14h +
cmp [ebp+arg_0] eax +
jnz loc_104505A  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
mov ebx edx +
push edi  +
mov edi ecx +
mov edx [edi+10h] +
mov esi [edi+14h] +
xor eax eax +
mov [ebx+8] eax +
mov [ebx+10h] eax +
mov ecx [edi+1Ch] +
mov [ebp+var_4] edx +
mov [ebx+0Ch] ecx +
cmp esi edx +
jb loc_10450D2  +
mov [ebx+8] eax +
mov ecx [edi+10h] +
mov [ebx+4] ecx +
mov ecx [edi+1Ch] +
mov [ebx+0Ch] ecx +
mov [ebx+10h] eax +
mov dword ptr [ebx] 3 +
jmp loc_10453FC  +
mov ecx esi +
mov [ebx+4] esi +
mov [ebx] eax +
call dword ptr [edi+18h]  +
mov ecx edx +
cmp eax 0FFFFFFFFh +
jnz loc_10450EA  +
mov eax ecx +
jmp loc_10453FE  +
cmp eax 5Fh +
jz loc_1045224  +
cmp eax 61h +
jb loc_1045101  +
cmp eax 7Ah +
jbe loc_1045224  +
lea edx [eax-41h] +
cmp edx 19h +
jbe loc_1045224  +
mov edx [ebp+arg_0] +
test edx edx +
jz loc_10453FC  +
sub ecx esi +
mov [edx+8] ecx +
xor ecx ecx +
inc ecx  +
mov [edx+4] esi +
mov [edx+10h] ecx +
mov esi [edi+1Ch] +
mov [edx+0Ch] esi +
cmp eax 2Eh +
ja loc_10451B7  +
jz loc_10451B3  +
cmp eax 25h +
ja loc_104518C  +
jz loc_1045185  +
cmp eax 9 +
jb loc_1045206  +
cmp eax 0Ah +
jbe loc_104517E  +
cmp eax 0Dh +
jz loc_104517E  +
cmp eax 20h +
jz loc_104517E  +
cmp eax 21h +
jz loc_1045177  +
cmp eax 22h +
jz loc_1045170  +
cmp eax 23h +
jnz loc_1045206  +
push 19h  +
jmp loc_104521C  +
push 0Ah  +
jmp loc_104521C  +
push 10h  +
jmp loc_104521C  +
push 0Dh  +
jmp loc_104521C  +
push 1Ah  +
jmp loc_104521C  +
sub eax 26h +
jz loc_10451AF  +
dec eax  +
jz loc_10451AB  +
dec eax  +
jz loc_10451A7  +
dec eax  +
jz loc_10451A3  +
sub eax 4 +
jnz loc_1045206  +
mov eax ecx +
jmp loc_104521D  +
push 14h  +
jmp loc_104521C  +
push 13h  +
jmp loc_104521C  +
push 9  +
jmp loc_104521C  +
push 18h  +
jmp loc_104521C  +
push 2  +
jmp loc_104521C  +
cmp eax 3Fh +
ja loc_10451F0  +
jz loc_10451EC  +
sub eax 2Fh +
jz loc_10451E8  +
sub eax 0Bh +
jz loc_10451E4  +
dec eax  +
jz loc_10451E0  +
dec eax  +
jz loc_10451DC  +
dec eax  +
jz loc_10451D8  +
dec eax  +
jnz loc_1045206  +
push 6  +
jmp loc_104521C  +
push 4  +
jmp loc_104521C  +
push 7  +
jmp loc_104521C  +
push 16h  +
jmp loc_104521C  +
push 15h  +
jmp loc_104521C  +
push 5  +
jmp loc_104521C  +
push 8  +
jmp loc_104521C  +
sub eax 5Bh +
jz loc_104521A  +
dec eax  +
dec eax  +
jz loc_1045216  +
dec eax  +
dec eax  +
jz loc_1045212  +
sub eax 1Ch +
jz loc_104520E  +
dec eax  +
dec eax  +
jz loc_104520A  +
push 0Ch  +
jmp loc_104521C  +
push 12h  +
jmp loc_104521C  +
push 11h  +
jmp loc_104521C  +
push 17h  +
jmp loc_104521C  +
push 0Fh  +
jmp loc_104521C  +
push 0Eh  +
pop eax  +
mov [edx] eax +
jmp loc_10453FC  +
mov esi [ebp+arg_0] +
mov [ebp+var_C] 1 +
mov [ebp+var_8] ecx +
test esi esi +
jz loc_1045259  +
cmp ecx [ebp+var_4] +
jb loc_1045259  +
and dword ptr [esi+8] 0 +
mov eax [edi+10h] +
mov [esi+4] eax +
mov eax [edi+1Ch] +
and dword ptr [esi+10h] 0 +
mov [esi+0Ch] eax +
mov dword ptr [esi] 3 +
jmp loc_10453B5  +
mov edx [ebp+var_4] +
call dword ptr [edi+18h]  +
mov ecx edx +
cmp eax 2Dh +
jb loc_1045279  +
cmp eax 2Eh +
jbe loc_1045293  +
cmp eax 5Fh +
jz loc_1045293  +
cmp eax 0FFFFFFFFh +
jz loc_10450E3  +
cmp eax 61h +
jb loc_1045283  +
cmp eax 7Ah +
jbe loc_1045293  +
lea edx [eax-41h] +
cmp edx 19h +
jbe loc_1045293  +
lea edx [eax-30h] +
cmp edx 9 +
ja loc_10452A3  +
inc [ebp+var_C]  +
mov [ebp+var_8] ecx +
cmp ecx [ebp+var_4] +
jb loc_1045259  +
jmp loc_10453B5  +
test esi esi +
jz loc_10453DB  +
mov edx [ebp+var_8] +
sub ecx edx +
mov [esi+8] ecx +
xor ecx ecx +
inc ecx  +
mov [esi+4] edx +
mov [esi+10h] ecx +
mov edx [edi+1Ch] +
mov [esi+0Ch] edx +
cmp eax 2Eh +
ja loc_104534D  +
jz loc_1045349  +
cmp eax 25h +
ja loc_1045322  +
jz loc_104531B  +
cmp eax 9 +
jb loc_104539C  +
cmp eax 0Ah +
jbe loc_1045314  +
cmp eax 0Dh +
jz loc_1045314  +
cmp eax 20h +
jz loc_1045314  +
cmp eax 21h +
jz loc_104530D  +
cmp eax 22h +
jz loc_1045306  +
cmp eax 23h +
jnz loc_104539C  +
push 19h  +
jmp loc_10453B2  +
push 0Ah  +
jmp loc_10453B2  +
push 10h  +
jmp loc_10453B2  +
push 0Dh  +
jmp loc_10453B2  +
push 1Ah  +
jmp loc_10453B2  +
sub eax 26h +
jz loc_1045345  +
dec eax  +
jz loc_1045341  +
dec eax  +
jz loc_104533D  +
dec eax  +
jz loc_1045339  +
sub eax 4 +
jnz loc_104539C  +
mov eax ecx +
jmp loc_10453B3  +
push 14h  +
jmp loc_10453B2  +
push 13h  +
jmp loc_10453B2  +
push 9  +
jmp loc_10453B2  +
push 18h  +
jmp loc_10453B2  +
push 2  +
jmp loc_10453B2  +
cmp eax 3Fh +
ja loc_1045386  +
jz loc_1045382  +
sub eax 2Fh +
jz loc_104537E  +
sub eax 0Bh +
jz loc_104537A  +
dec eax  +
jz loc_1045376  +
dec eax  +
jz loc_1045372  +
dec eax  +
jz loc_104536E  +
dec eax  +
jnz loc_104539C  +
push 6  +
jmp loc_10453B2  +
push 4  +
jmp loc_10453B2  +
push 7  +
jmp loc_10453B2  +
push 16h  +
jmp loc_10453B2  +
push 15h  +
jmp loc_10453B2  +
push 5  +
jmp loc_10453B2  +
push 8  +
jmp loc_10453B2  +
sub eax 5Bh +
jz loc_10453B0  +
dec eax  +
dec eax  +
jz loc_10453AC  +
dec eax  +
dec eax  +
jz loc_10453A8  +
sub eax 1Ch +
jz loc_10453A4  +
dec eax  +
dec eax  +
jz loc_10453A0  +
push 0Ch  +
jmp loc_10453B2  +
push 12h  +
jmp loc_10453B2  +
push 11h  +
jmp loc_10453B2  +
push 17h  +
jmp loc_10453B2  +
push 0Fh  +
jmp loc_10453B2  +
push 0Eh  +
pop eax  +
mov [esi] eax +
test esi esi +
jz loc_10453DB  +
mov eax [ebp+var_4] +
cmp [ebp+var_8] eax +
jb loc_10453DB  +
and dword ptr [esi+8] 0 +
mov eax [edi+10h] +
mov [esi+4] eax +
mov eax [edi+1Ch] +
and dword ptr [esi+10h] 0 +
mov [esi+0Ch] eax +
mov dword ptr [esi] 3 +
mov eax [ebp+var_8] +
sub eax [edi+14h] +
mov [ebx+8] eax +
mov eax [edi+14h] +
mov [ebx+4] eax +
mov eax [ebp+var_C] +
mov [ebx+10h] eax +
mov eax [edi+1Ch] +
mov [ebx+0Ch] eax +
mov dword ptr [ebx] 0Ch +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
mov ebx ecx +
mov eax [ebx+10h] +
mov ecx [ebx+14h] +
push esi  +
mov esi edx +
xor edx edx +
push edi  +
mov edi [ebp+arg_8] +
mov [ebp+var_8] eax +
mov [esi+8] edx +
mov [esi+4] ecx +
mov eax [ebx+1Ch] +
mov [ebp+var_4] ecx +
mov [ebp+var_C] edx +
mov [esi+0Ch] eax +
mov [esi+10h] edx +
cmp edi edx +
jz loc_1045447  +
xor eax eax +
stos   +
stos   +
stos   +
stos   +
stos   +
cmp ecx [ebp+var_8] +
jb loc_1045469  +
mov [esi+8] edx +
mov eax [ebx+10h] +
mov [esi+4] eax +
mov eax [ebx+1Ch] +
mov [esi+0Ch] eax +
mov [esi+10h] edx +
mov dword ptr [esi] 3 +
jmp loc_10455E4  +
push 2  +
pop edi  +
mov edx [ebp+var_8] +
call dword ptr [ebx+18h]  +
cmp eax 2Eh +
ja loc_10454FB  +
jz loc_10454F7  +
cmp eax 25h +
ja loc_10454CC  +
jz loc_10454C8  +
cmp eax 9 +
jb loc_104554E  +
push 0Ah  +
pop ecx  +
cmp eax ecx +
jbe loc_10454C1  +
cmp eax 0Dh +
jz loc_10454C1  +
cmp eax 20h +
jz loc_10454C1  +
cmp eax 21h +
jz loc_10454BD  +
cmp eax 22h +
jz loc_1045576  +
cmp eax 23h +
jnz loc_104554E  +
push 19h  +
pop ecx  +
jmp loc_1045576  +
push 10h  +
jmp loc_10454B7  +
push 0Dh  +
jmp loc_1045570  +
push 1Ah  +
jmp loc_10454B7  +
mov ecx eax +
sub ecx 26h +
jz loc_10454F3  +
dec ecx  +
jz loc_10454EF  +
dec ecx  +
jz loc_10454EB  +
dec ecx  +
jz loc_10454E7  +
sub ecx 4 +
jnz loc_104554E  +
inc ecx  +
jmp loc_1045576  +
push 14h  +
jmp loc_10454B7  +
push 13h  +
jmp loc_10454B7  +
push 9  +
jmp loc_10454B7  +
push 18h  +
jmp loc_10454B7  +
mov ecx edi +
jmp loc_1045576  +
cmp eax 3Fh +
ja loc_1045536  +
jz loc_1045532  +
mov ecx eax +
sub ecx 2Fh +
jz loc_104552E  +
sub ecx 0Bh +
jz loc_104552A  +
dec ecx  +
jz loc_1045526  +
dec ecx  +
jz loc_1045522  +
dec ecx  +
jz loc_104551E  +
dec ecx  +
jnz loc_104554E  +
push 6  +
jmp loc_10454B7  +
push 4  +
jmp loc_10454B7  +
push 7  +
jmp loc_10454B7  +
push 16h  +
jmp loc_10454B7  +
push 15h  +
jmp loc_10454B7  +
push 5  +
jmp loc_10454B7  +
push 8  +
jmp loc_10454B7  +
mov ecx eax +
sub ecx 5Bh +
jz loc_104556E  +
sub ecx edi +
jz loc_1045567  +
sub ecx edi +
jz loc_1045560  +
sub ecx 1Ch +
jz loc_1045559  +
sub ecx edi +
jz loc_1045552  +
push 0Ch  +
jmp loc_1045570  +
push 12h  +
jmp loc_10454B7  +
push 11h  +
jmp loc_10454B7  +
push 17h  +
jmp loc_10454B7  +
push 0Fh  +
jmp loc_10454B7  +
push 0Eh  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_1045594  +
cmp ecx [ebp+arg_0] +
jz loc_1045598  +
cmp ecx [ebp+arg_4] +
jz loc_1045598  +
inc [ebp+var_C]  +
mov eax edx +
mov [ebp+var_4] eax +
cmp edx [ebp+var_8] +
jnb loc_10455D0  +
mov ecx edx +
jmp loc_104546C  +
mov eax edx +
jmp loc_10455E6  +
mov edi [ebp+arg_8] +
mov eax [ebp+var_4] +
test edi edi +
jz loc_10455AC  +
sub edx eax +
mov [edi+8] edx +
mov [edi+4] eax +
mov [edi] ecx +
cmp eax [ebp+var_8] +
jb loc_10455D5  +
mov eax [ebp+var_4] +
xor ecx ecx +
cmp edi ecx +
jz loc_10455D8  +
mov edx [ebp+var_8] +
mov [edi+8] ecx +
mov [edi+4] edx +
mov [edi+10h] ecx +
mov edx [ebx+1Ch] +
mov [edi+0Ch] edx +
mov [edi] ecx +
jmp loc_10455D8  +
mov edi [ebp+arg_8] +
jmp loc_10455B4  +
mov eax [ebp+var_4] +
sub eax [ebx+14h] +
mov [esi+8] eax +
mov eax [ebp+var_C] +
mov [esi+10h] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
mov ebx [esi+14h] +
xor eax eax +
push edi  +
mov edi edx +
mov edx [esi+10h] +
mov [edi+8] eax +
mov ecx [esi+14h] +
mov [edi+4] ecx +
mov ecx [esi+1Ch] +
mov [edi+0Ch] ecx +
mov [edi+10h] eax +
mov [ebp+var_4] eax +
mov eax [esi+10h] +
mov [ebp+var_8] edx +
cmp [esi+14h] eax +
jb loc_1045636  +
mov [edi+4] eax +
mov dword ptr [edi] 3 +
jmp loc_10456BD  +
mov ecx ebx +
jmp loc_10456D2  +
cmp eax 61h +
jb loc_1045647  +
cmp eax 7Ah +
jbe loc_10456C4  +
lea edx [eax-41h] +
cmp edx 19h +
jbe loc_10456C4  +
lea edx [eax-30h] +
cmp edx 9 +
jbe loc_10456C4  +
cmp eax 2Fh +
ja loc_104568D  +
cmp eax 28h +
jnb loc_10456CA  +
cmp eax 0Ah +
jz loc_10456CA  +
cmp eax 0Dh +
jz loc_10456CA  +
cmp eax 1Fh +
jbe loc_10456AB  +
cmp eax 21h +
jbe loc_10456CA  +
cmp eax 22h +
jbe loc_10456AB  +
cmp eax 25h +
jbe loc_10456CA  +
cmp eax 27h +
jnz loc_10456AB  +
cmp dword ptr [esi+24h] 0Ah +
setz al  +
jmp loc_10456C6  +
cmp eax 3Ah +
jb loc_10456AB  +
cmp eax 3Bh +
jbe loc_10456CA  +
cmp eax 3Dh +
jz loc_10456CA  +
cmp eax 3Eh +
jbe loc_10456AB  +
cmp eax 40h +
jbe loc_10456CA  +
cmp eax 5Fh +
jz loc_10456CA  +
mov eax [ebp+var_4] +
mov dword ptr [edi] 0Ch +
sub ebx [esi+14h] +
mov [edi+10h] eax +
mov [edi+8] ebx +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
mov al 1 +
test al al +
jz loc_10456AB  +
inc [ebp+var_4]  +
mov edx [ebp+var_8] +
mov ebx ecx +
call dword ptr [esi+18h]  +
mov ecx edx +
cmp eax 0FFFFFFFFh +
jnz loc_104563D  +
mov eax ecx +
jmp loc_10456BF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
mov ebx ecx +
mov eax [ebx+14h] +
push esi  +
mov esi [ebp+arg_4] +
xor ecx ecx +
mov [ebp+var_4] eax +
mov eax [ebx+10h] +
push edi  +
mov [ebp+var_10] edx +
mov [ebp+var_C] ecx +
mov [ebp+var_8] eax +
cmp esi ecx +
jz loc_104572A  +
xor eax eax +
lea edi [esi+4] +
stos   +
stos   +
stos   +
stos   +
mov eax [ebp+var_8] +
cmp [ebp+var_4] eax +
sbb eax eax +
and eax 0FFFFFFFDh +
add eax 3 +
mov [esi] eax +
mov [edx+8] ecx +
mov eax [ebx+14h] +
mov [edx+4] eax +
mov eax [ebx+1Ch] +
mov [edx+0Ch] eax +
mov [edx+10h] ecx +
mov eax [ebx+10h] +
cmp [ebx+14h] eax +
jb loc_1045752  +
mov [edx+4] eax +
mov dword ptr [edx] 3 +
jmp loc_10458BE  +
xor edi edi +
inc edi  +
mov edx [ebp+var_8] +
mov ecx [ebp+var_4] +
call dword ptr [ebx+18h]  +
cmp eax 0FFFFFFFFh +
jz loc_104586F  +
cmp eax 2Eh +
ja loc_10457F1  +
jz loc_10457ED  +
cmp eax 25h +
ja loc_10457C6  +
jz loc_10457BF  +
cmp eax 9 +
jb loc_1045840  +
push 0Ah  +
pop ecx  +
cmp eax ecx +
jbe loc_10457B8  +
cmp eax 0Dh +
jz loc_10457B8  +
cmp eax 20h +
jz loc_10457B8  +
cmp eax 21h +
jz loc_10457B1  +
cmp eax 22h +
jz loc_1045857  +
cmp eax 23h +
jnz loc_1045840  +
push 19h  +
jmp loc_1045856  +
push 10h  +
jmp loc_1045856  +
push 0Dh  +
jmp loc_1045856  +
push 1Ah  +
jmp loc_1045856  +
sub eax 26h +
jz loc_10457E9  +
dec eax  +
jz loc_10457E5  +
dec eax  +
jz loc_10457E1  +
dec eax  +
jz loc_10457DD  +
sub eax 4 +
jnz loc_1045840  +
mov ecx edi +
jmp loc_1045857  +
push 14h  +
jmp loc_1045856  +
push 13h  +
jmp loc_1045856  +
push 9  +
jmp loc_1045856  +
push 18h  +
jmp loc_1045856  +
push 2  +
jmp loc_1045856  +
cmp eax 3Fh +
ja loc_104582A  +
jz loc_1045826  +
sub eax 2Fh +
jz loc_1045822  +
sub eax 0Bh +
jz loc_104581E  +
dec eax  +
jz loc_104581A  +
dec eax  +
jz loc_1045816  +
dec eax  +
jz loc_1045812  +
dec eax  +
jnz loc_1045840  +
push 6  +
jmp loc_1045856  +
push 4  +
jmp loc_1045856  +
push 7  +
jmp loc_1045856  +
push 16h  +
jmp loc_1045856  +
push 15h  +
jmp loc_1045856  +
push 5  +
jmp loc_1045856  +
push 8  +
jmp loc_1045856  +
sub eax 5Bh +
jz loc_1045854  +
dec eax  +
dec eax  +
jz loc_1045850  +
dec eax  +
dec eax  +
jz loc_104584C  +
sub eax 1Ch +
jz loc_1045848  +
dec eax  +
dec eax  +
jz loc_1045844  +
push 0Ch  +
jmp loc_1045856  +
push 12h  +
jmp loc_1045856  +
push 11h  +
jmp loc_1045856  +
push 17h  +
jmp loc_1045856  +
push 0Fh  +
jmp loc_1045856  +
push 0Eh  +
pop ecx  +
cmp ecx [ebp+arg_0] +
jz loc_1045873  +
inc [ebp+var_C]  +
mov eax edx +
mov [ebp+var_4] eax +
cmp edx [ebp+var_8] +
jb loc_1045755  +
jmp loc_1045895  +
mov eax edx +
jmp loc_10458C0  +
mov eax [ebp+var_4] +
test esi esi +
jz loc_104588D  +
sub edx eax +
mov [esi+8] edx +
mov [esi+4] eax +
mov [esi+10h] edi +
mov edx [ebx+1Ch] +
mov [esi+0Ch] edx +
mov [esi] ecx +
cmp eax [ebp+var_8] +
mov eax [ebp+var_4] +
jb loc_10458AF  +
xor ecx ecx +
cmp esi ecx +
jz loc_10458AF  +
mov edx [ebp+var_8] +
mov [esi+8] ecx +
mov [esi+4] edx +
mov [esi+10h] ecx +
mov edx [ebx+1Ch] +
mov [esi+0Ch] edx +
mov [esi] ecx +
sub eax [ebx+14h] +
mov ecx [ebp+var_10] +
mov [ecx+8] eax +
mov eax [ebp+var_C] +
mov [ecx+10h] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov ebx edx +
push 0  +
mov edx edi +
mov esi ecx +
call sub_104508B  +
mov ecx [ebp+arg_4] +
test ecx ecx +
jz loc_10458EE  +
or dword ptr [ecx] 0FFFFFFFFh +
test eax eax +
jl loc_104590C  +
cmp dword ptr [edi] 0Ch +
jnz loc_104590C  +
push 0  +
push ecx  +
push ebx  +
add edi 4 +
push edi  +
push esi  +
call dword ptr [esi+0C8h]  +
test eax eax +
jl loc_104590C  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
lea eax [ebx+5Ch] +
mov [ebp+var_C] eax +
mov eax [ebp+arg_8] +
mov eax [eax] +
mov [ebp+var_8] eax +
mov eax [ebp+arg_0] +
mov eax [eax+10h] +
push esi  +
mov [ebp+var_10] eax +
xor esi esi +
add eax 0FFFFFFC0h +
push edi  +
mov [ebp+var_4] esi +
lea edi [ebx+48h] +
cmp eax 3Ah +
ja loc_10465ED  +
movzx eax ds:byte_104669C[eax] +
jmp ds:off_1046608[eax*4]  +
push [ebp+var_C]  +
mov edx edi +
mov ecx ebx +
call sub_1044C26  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
cmp [edi+8] esi +
jz loc_104597D  +
mov eax [ebp+var_C] +
mov esi [eax+8] +
mov eax [ebp+var_C] +
mov eax [eax] +
cmp eax 1Ah +
jnz loc_1045999  +
mov eax [ebp+var_C] +
add esi [eax+8] +
mov [ebp+var_8] 68h +
jmp loc_10460FC  +
cmp eax 0Ch +
jnz loc_10465E6  +
mov [ebp+var_8] 69h +
jmp loc_10465ED  +
push 0  +
mov edx edi +
mov ecx ebx +
call sub_104508B  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
cmp dword ptr [edi] 0Ch +
mov esi [edi+8] +
jnz loc_10465E6  +
test esi esi +
jz loc_10465E6  +
mov [ebp+var_8] 67h +
jmp loc_10465ED  +
push [ebp+var_C]  +
mov edx edi +
mov ecx ebx +
call sub_1044C26  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
mov ecx [ebp+var_C] +
mov eax [ecx] +
mov esi [edi+8] +
cmp eax 9 +
jz loc_1045AAE  +
cmp eax 0Ah +
jz loc_1045AAE  +
cmp eax 0Ch +
jnz loc_10465ED  +
add [ebx+14h] esi +
lea eax [ebp+var_10] +
push eax  +
push edi  +
mov edx offset dword_100F3E0 +
mov ecx ebx +
call sub_10458CC  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
cmp [ebp+var_10] 0 +
jnz loc_1045A4C  +
mov [ebp+var_8] 6Eh +
jmp loc_1045A7E  +
lea eax [ebp+var_10] +
push eax  +
push edi  +
mov edx offset dword_100F3E8 +
mov ecx ebx +
call sub_10458CC  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
cmp [ebp+var_10] 0 +
jnz loc_1045A77  +
mov [ebp+var_8] 6Ah +
jmp loc_1045A7E  +
mov eax [ebp+arg_0] +
mov byte ptr [eax+14h] 1 +
mov eax [edi+8] +
mov ecx [ebp+arg_0] +
add esi eax +
cmp byte ptr [ecx+14h] 0 +
jnz loc_10465ED  +
add [ebx+14h] eax +
push 0  +
mov edx edi +
mov ecx ebx +
call sub_1044C26  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_10465FE  +
jmp loc_1046115  +
add esi [ecx+8] +
mov [ebx+0D0h] eax +
mov [ebp+var_8] 74h +
jmp loc_10465ED  +
push [ebp+var_C]  +
mov edx edi +
mov ecx ebx +
call sub_1044C26  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
mov eax [ebp+var_C] +
mov esi [eax+8] +
mov eax [eax] +
add esi [edi+8] +
cmp eax 9 +
jz loc_1045AF3  +
cmp eax 0Ah +
jnz loc_10465E6  +
mov [ebx+0D0h] eax +
mov [ebp+var_8] 6Bh +
jmp loc_10465ED  +
push 0  +
push dword ptr [ebx+0D0h]  +
mov edx edi +
mov ecx ebx +
call sub_10456E9  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
cmp [ebp+var_10] 6Bh +
mov esi [edi+8] +
jz loc_1045B40  +
cmp [ebp+var_10] 74h +
jnz loc_10465ED  +
mov [ebp+var_8] 75h +
jmp loc_10465ED  +
mov [ebp+var_8] 6Ch +
jmp loc_10465ED  +
mov edx edi +
mov ecx ebx +
call sub_1044AC3  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
mov eax [edi] +
mov esi [edi+8] +
cmp eax [ebx+0D0h] +
jnz loc_10465E6  +
mov [ebp+var_8] 6Dh +
jmp loc_10460FC  +
mov edx edi +
mov ecx ebx +
call sub_1044AC3  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
mov eax [edi] +
mov esi [edi+8] +
cmp eax 6 +
jnz loc_1045BA7  +
mov [ebp+var_8] 77h +
jmp loc_10465ED  +
cmp eax 0Ch +
jnz loc_10465ED  +
lea eax [ebp+var_10] +
push eax  +
push edi  +
mov edx offset dword_100F3D8 +
mov ecx ebx +
call sub_10458CC  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
cmp [ebp+var_10] 0 +
mov esi [edi+8] +
jnz loc_10465E6  +
add [ebx+14h] esi +
push 0  +
mov edx edi +
mov ecx ebx +
call sub_1044C26  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
add esi [edi+8] +
mov [ebp+var_8] 72h +
jmp loc_10465ED  +
mov edx edi +
mov ecx ebx +
call sub_1044AC3  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
mov esi [edi+8] +
mov edi [edi] +
cmp edi 9 +
jz loc_1045C28  +
cmp edi 0Ah +
jnz loc_10465E6  +
mov [ebp+var_8] 6Fh +
jmp loc_1045CAD  +
mov edx edi +
mov ecx ebx +
call sub_10455F2  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
mov esi [edi+8] +
mov [ebp+var_8] 70h +
jmp loc_10465ED  +
mov edx edi +
mov ecx ebx +
call sub_1044AC3  +
test eax eax +
jl loc_1046601  +
mov eax [edi] +
mov esi [edi+8] +
cmp eax [ebx+0D0h] +
jnz loc_10465E6  +
mov [ebp+var_8] 71h +
jmp loc_10460FC  +
mov edx edi +
mov ecx ebx +
call sub_1044AC3  +
test eax eax +
jl loc_1046601  +
mov esi [edi+8] +
mov edi [edi] +
cmp edi 9 +
jz loc_1045CA6  +
cmp edi 0Ah +
jnz loc_10465E6  +
mov [ebp+var_8] 6Bh +
mov [ebx+0D0h] edi +
jmp loc_10465ED  +
push 0  +
mov edx edi +
mov ecx ebx +
call sub_104508B  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
cmp dword ptr [edi] 0Ch +
mov esi [edi+8] +
jnz loc_10465E6  +
mov [ebp+var_8] 73h +
jmp loc_10465ED  +
push [ebp+var_C]  +
mov edx edi +
mov ecx ebx +
call sub_1044C26  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
mov eax [ebp+var_C] +
mov esi [eax+8] +
add esi [edi+8] +
cmp dword ptr [eax] 6 +
jnz loc_10465E6  +
jmp loc_1045B9B  +
mov edx edi +
mov ecx ebx +
call sub_1044AC3  +
test eax eax +
jl loc_1046601  +
mov eax [edi] +
mov esi [edi+8] +
cmp eax [ebx+0D0h] +
jnz loc_10465E6  +
mov [ebp+var_8] 76h +
jmp loc_10465ED  +
push [ebp+var_C]  +
mov edx edi +
mov ecx ebx +
call sub_1044C26  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
mov esi [edi+8] +
test esi esi +
jbe loc_1045D6C  +
mov [ebp+var_8] 4Bh +
jmp loc_10465ED  +
push [ebp+var_C]  +
add [ebx+14h] esi +
mov edx edi +
mov ecx ebx +
call sub_104508B  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
mov eax [edi+8] +
add esi eax +
cmp dword ptr [edi] 0Ch +
jnz loc_10465E6  +
test eax eax +
jz loc_10465E6  +
mov ecx [ebp+var_C] +
xor eax eax +
cmp dword ptr [ecx] 15h +
setz al  +
add eax 4Ch +
mov [ebp+var_8] eax +
jmp loc_10465ED  +
push [ebp+var_C]  +
mov edx edi +
mov ecx ebx +
call sub_104508B  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
cmp dword ptr [edi] 0Ch +
mov esi [edi+8] +
jnz loc_10465E6  +
test esi esi +
jz loc_10465E6  +
mov [ebp+var_8] 4Ch +
jmp loc_10465ED  +
mov edx edi +
mov ecx ebx +
call sub_1044AC3  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
cmp dword ptr [edi] 15h +
jz loc_1045E09  +
mov eax [ebp+arg_0] +
mov byte ptr [eax+14h] 1 +
mov esi [edi+8] +
mov [ebp+var_8] 4Eh +
jmp loc_10465ED  +
push [ebp+var_C]  +
mov edx edi +
mov ecx ebx +
call sub_1044C26  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
mov eax [edi+8] +
test eax eax +
jbe loc_1045E44  +
mov esi eax +
mov [ebp+var_8] 4Fh +
jmp loc_10465ED  +
mov eax [ebp+var_C] +
mov ecx [eax] +
cmp ecx 6 +
jnz loc_1045E5D  +
mov esi [eax+8] +
mov [ebp+var_8] 65h +
jmp loc_10465ED  +
cmp ecx 0Ch +
jnz loc_10465E6  +
push eax  +
mov edx edi +
mov ecx ebx +
call sub_104508B  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
mov ecx [ebp+var_C] +
mov esi [edi+8] +
xor eax eax +
cmp dword ptr [ecx] 15h +
setz al  +
add eax 50h +
jmp loc_1045DAA  +
push [ebp+var_C]  +
mov edx edi +
mov ecx ebx +
call sub_104508B  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
cmp dword ptr [edi] 0Ch +
mov esi [edi+8] +
jnz loc_10465E6  +
test esi esi +
jz loc_10465E6  +
mov [ebp+var_8] 50h +
jmp loc_10465ED  +
mov edx edi +
mov ecx ebx +
call sub_1044AC3  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
cmp dword ptr [edi] 15h +
jz loc_1045EE8  +
mov eax [ebp+arg_0] +
mov byte ptr [eax+14h] 1 +
mov esi [edi+8] +
mov [ebp+var_8] 52h +
jmp loc_10465ED  +
push [ebp+var_C]  +
mov edx edi +
mov ecx ebx +
call sub_1044C26  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
mov eax [ebp+var_C] +
mov ecx [eax] +
mov esi [edi+8] +
cmp ecx 13h +
jnz loc_1045F2A  +
add esi [eax+8] +
mov [ebp+var_8] 5Bh +
jmp loc_10465ED  +
cmp ecx 0Ch +
jnz loc_10465ED  +
add [ebx+14h] esi +
lea eax [ebp+var_C] +
push eax  +
push edi  +
mov edx offset asc_100F380 +
mov ecx ebx +
call sub_10458CC  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
cmp [ebp+var_C] 0 +
jnz loc_1045F67  +
add esi [edi+8] +
mov [ebp+var_8] 53h +
jmp loc_10465ED  +
lea eax [ebp+var_C] +
push eax  +
push edi  +
mov edx offset dword_100F3F0 +
mov ecx ebx +
call sub_10458CC  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
cmp [ebp+var_C] 0 +
jnz loc_1045F98  +
add esi [edi+8] +
mov [ebp+var_8] 54h +
jmp loc_10465ED  +
lea eax [ebp+var_C] +
push eax  +
push edi  +
mov edx offset dword_100F3F8 +
mov ecx ebx +
call sub_10458CC  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
cmp [ebp+var_C] 0 +
jnz loc_1045FC9  +
add esi [edi+8] +
mov [ebp+var_8] 55h +
jmp loc_10465ED  +
lea eax [ebp+var_C] +
push eax  +
push edi  +
mov edx offset dword_100F400 +
mov ecx ebx +
call sub_10458CC  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
cmp [ebp+var_C] 0 +
jnz loc_1045FFA  +
add esi [edi+8] +
mov [ebp+var_8] 56h +
jmp loc_10465ED  +
lea eax [ebp+var_C] +
push eax  +
push edi  +
mov edx offset dword_100F3D0 +
mov ecx ebx +
call sub_10458CC  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
cmp [ebp+var_C] 0 +
jnz loc_104602B  +
add esi [edi+8] +
mov [ebp+var_8] 57h +
jmp loc_10465ED  +
lea eax [ebp+var_C] +
push eax  +
push edi  +
mov edx offset dword_100F408 +
mov ecx ebx +
call sub_10458CC  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
cmp [ebp+var_C] 0 +
jnz loc_104605C  +
add esi [edi+8] +
mov [ebp+var_8] 58h +
jmp loc_10465ED  +
lea eax [ebp+var_C] +
push eax  +
push edi  +
mov edx offset dword_100F410 +
mov ecx ebx +
call sub_10458CC  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
cmp [ebp+var_C] 0 +
jnz loc_104608D  +
add esi [edi+8] +
mov [ebp+var_8] 59h +
jmp loc_10465ED  +
lea eax [ebp+var_C] +
push eax  +
push edi  +
mov edx offset dword_100F418 +
mov ecx ebx +
call sub_10458CC  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
cmp [ebp+var_C] 0 +
jnz loc_10460BE  +
add esi [edi+8] +
mov [ebp+var_8] 5Ah +
jmp loc_10465ED  +
lea eax [ebp+var_C] +
push eax  +
push edi  +
mov edx offset dword_100F3C8 +
mov ecx ebx +
call sub_10458CC  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
add esi [edi+8] +
cmp [ebp+var_C] 0 +
jnz loc_10460EF  +
mov [ebp+var_8] 5Eh +
jmp loc_10465ED  +
mov eax [ebp+arg_0] +
cmp byte ptr [eax+14h] 0 +
jnz loc_10465ED  +
add [ebx+14h] esi +
push 0  +
mov edx edi +
mov ecx ebx +
call sub_1044C26  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
add esi [edi+8] +
jmp loc_10465ED  +
push [ebp+var_C]  +
mov edx edi +
mov ecx ebx +
call sub_1044C26  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
mov eax [ebp+var_C] +
cmp dword ptr [eax] 13h +
jnz loc_10465E6  +
mov esi [edi+8] +
inc esi  +
jmp loc_1045F1E  +
push 0  +
push 14h  +
mov edx edi +
mov ecx ebx +
call sub_10456E9  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
mov esi [edi+8] +
mov [ebp+var_8] 5Ch +
jmp loc_10465ED  +
mov edx edi +
mov ecx ebx +
call sub_1044AC3  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
cmp dword ptr [edi] 14h +
jnz loc_10465E6  +
mov esi [edi+8] +
mov [ebp+var_8] 5Dh +
jmp loc_10465ED  +
push [ebp+var_C]  +
mov edx edi +
mov ecx ebx +
call sub_1044C26  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
mov esi [edi+8] +
add [ebx+14h] esi +
mov ecx [ebp+var_C] +
mov eax [ecx] +
cmp eax 19h +
jnz loc_1046299  +
mov edx edi +
mov ecx ebx +
call sub_1044AC3  +
test eax eax +
jl loc_1046601  +
mov eax [edi+8] +
add [ebx+14h] eax +
add esi eax +
lea eax [ebp+var_10] +
push eax  +
push edi  +
mov edx offset dword_100F428 +
mov ecx ebx +
call sub_10458CC  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
cmp [ebp+var_10] 0 +
jnz loc_1046211  +
add esi [edi+8] +
mov [ebp+var_8] 60h +
jmp loc_10465ED  +
lea eax [ebp+var_10] +
push eax  +
push edi  +
mov edx offset dword_100F420 +
mov ecx ebx +
call sub_10458CC  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
cmp [ebp+var_10] 0 +
jnz loc_1046242  +
add esi [edi+8] +
mov [ebp+var_8] 5Fh +
jmp loc_10465ED  +
lea eax [ebp+var_10] +
push eax  +
push edi  +
mov edx offset dword_100F430 +
mov ecx ebx +
call sub_10458CC  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
cmp [ebp+var_10] 0 +
jnz loc_10465E6  +
add esi [edi+8] +
mov [ebp+var_8] 61h +
jmp loc_10465ED  +
push [ebp+var_C]  +
mov edx edi +
mov ecx ebx +
call sub_1044C26  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
mov esi [edi+8] +
mov ecx [ebp+var_C] +
add [ebx+14h] esi +
mov eax [ecx] +
cmp eax 9 +
jz loc_10462A7  +
cmp eax 0Ah +
jnz loc_10465E6  +
mov [ebx+0D0h] eax +
add esi [ecx+8] +
mov [ebp+var_8] 62h +
jmp loc_10465ED  +
push 0  +
push dword ptr [ebx+0D0h]  +
mov edx edi +
mov ecx ebx +
call sub_10456E9  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
mov esi [edi+8] +
mov [ebp+var_8] 63h +
jmp loc_10465ED  +
mov edx edi +
mov ecx ebx +
call sub_1044AC3  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
mov eax [edi] +
cmp eax [ebx+0D0h] +
jz loc_104631D  +
push 0  +
push 0  +
push 910h  +
push 0C000A083h  +
call sub_104450C  +
jmp loc_1046601  +
mov esi [edi+8] +
mov [ebp+var_8] 64h +
jmp loc_10465ED  +
push 0  +
push 6  +
mov edx edi +
mov ecx ebx +
call sub_10456E9  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
cmp [ebp+var_10] 48h +
mov esi [edi+8] +
jz loc_1046363  +
cmp [ebp+var_10] 78h +
jnz loc_10465ED  +
mov [ebp+var_8] 79h +
jmp loc_10465ED  +
mov [ebp+var_8] 49h +
jmp loc_10465ED  +
mov edx edi +
mov ecx ebx +
call sub_1044AC3  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
cmp dword ptr [edi] 6 +
mov esi [edi+8] +
jnz loc_10465E6  +
cmp [ebp+var_10] 49h +
jz loc_10463AB  +
cmp [ebp+var_10] 79h +
jnz loc_10465ED  +
mov [ebp+var_8] 7Ah +
jmp loc_10465ED  +
mov [ebp+var_8] 4Ah +
jmp loc_10465ED  +
push [ebp+var_C]  +
mov edx edi +
mov ecx ebx +
call sub_1044C26  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
cmp [edi] esi +
jz loc_10465E6  +
mov eax [ebp+var_C] +
mov esi [eax+8] +
add esi [edi+8] +
cmp dword ptr [eax] 6 +
jnz loc_10465E6  +
jmp loc_10464E0  +
push 0  +
mov edx edi +
mov ecx ebx +
call sub_1044C26  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
mov esi [edi+8] +
test esi esi +
jbe loc_10465E6  +
cmp dword ptr [edi] 0Dh +
jnz loc_10465E6  +
jmp loc_104643F  +
mov esi [ebp+var_C] +
push esi  +
mov edx edi +
mov ecx ebx +
call sub_1044C26  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
mov eax [edi+8] +
test eax eax +
jbe loc_104644B  +
cmp dword ptr [edi] 0Dh +
jnz loc_104644B  +
mov esi eax +
mov [ebp+var_8] 41h +
jmp loc_10465ED  +
cmp dword ptr [esi] 0Ch +
jnz loc_1046492  +
add [ebx+14h] eax +
push esi  +
mov edx edi +
mov ecx ebx +
call sub_104508B  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
mov esi [edi+8] +
test esi esi +
jz loc_1046480  +
cmp dword ptr [edi] 0Ch +
jnz loc_1046480  +
mov [ebp+var_8] 42h +
jmp loc_10465ED  +
mov eax [ebp+arg_0] +
mov byte ptr [eax+14h] 1 +
mov eax [ebp+var_C] +
mov esi [eax+8] +
jmp loc_10465ED  +
mov esi eax +
jmp loc_10465E6  +
push 0  +
push 6  +
push 0Eh  +
mov edx edi +
mov ecx ebx +
call sub_104540A  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
mov esi [edi+8] +
mov [ebp+var_8] 43h +
jmp loc_10465ED  +
mov edx edi +
mov ecx ebx +
call sub_1044AC3  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
mov esi [edi+8] +
mov edi [edi] +
cmp edi 6 +
jnz loc_10464EC  +
mov [ebp+var_8] 47h +
jmp loc_10465ED  +
cmp edi 0Eh +
jnz loc_10465E6  +
mov [ebp+var_8] 44h +
jmp loc_10465ED  +
mov edx edi +
mov ecx ebx +
call sub_1044AC3  +
test eax eax +
jl loc_1046601  +
mov eax [edi] +
mov esi [edi+8] +
cmp eax 0Dh +
jnz loc_1046544  +
mov esi [ebp+var_C] +
push 0  +
mov edx esi +
mov ecx ebx +
call sub_1044C26  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1046601  +
mov esi [esi+8] +
mov [ebp+var_8] 45h +
jmp loc_10465ED  +
cmp eax 3 +
jz loc_10465E6  +
cmp eax 0Fh +
jnz loc_104655E  +
mov [ebp+var_8] 46h +
jmp loc_10465ED  +
cmp eax 1Ah +
jnz loc_1046576  +
push 0  +
push 0  +
push 0A2Ch  +
push 0C0000002h  +
jmp loc_1046313  +
cmp eax 7 +
jnz loc_10465E6  +
mov edx [ebp+var_C] +
add [ebx+14h] esi +
mov ecx ebx +
call sub_1044AC3  +
test eax eax +
jl loc_1046601  +
mov ecx [ebp+var_C] +
mov eax [ecx+8] +
add esi eax +
cmp dword ptr [ecx] 10h +
jnz loc_10465E6  +
add [ebx+14h] eax +
and [ebp+var_10] 0 +
lea eax [ebp+var_C] +
push eax  +
mov eax [ebp+var_10] +
mov edx ds:off_100F438[eax*8] +
push edi  +
mov ecx ebx +
call sub_10458CC  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_10465FE  +
cmp [ebp+var_C] 0 +
jz loc_10465CE  +
inc [ebp+var_10]  +
cmp [ebp+var_10] 4 +
jnz loc_10465A0  +
jmp loc_10465E3  +
mov eax [ebp+var_10] +
mov ecx ds:dword_100F43C[eax*8] +
add esi [edi+8] +
mov [ebp+var_8] ecx +
cmp eax 4 +
jnz loc_10465ED  +
add esi [edi+8] +
mov eax [ebp+arg_0] +
mov byte ptr [eax+14h] 1 +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_8] +
mov [eax] esi +
mov eax [ebp+var_8] +
cmp [ecx] eax +
jz loc_10465FE  +
mov [ecx] eax +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
xor edx edx +
cmp eax edx +
jz loc_10466EF  +
mov [eax] edx +
mov [eax+4] edx +
mov ecx [ebp+arg_0] +
cmp ecx edx +
jnz loc_1046709  +
push edx  +
push edx  +
push 127Fh  +
push 0C00000EFh  +
call sub_104450C  +
jmp loc_104672E  +
cmp eax edx +
jnz loc_104671B  +
push edx  +
push edx  +
push 1283h  +
push 0C00000F0h  +
jmp loc_1046702  +
mov edx [ecx+0D8h] +
mov [eax] edx +
mov ecx [ecx+0DCh] +
mov [eax+4] ecx +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
xor ecx ecx +
cmp esi ecx +
jnz loc_104675E  +
push ecx  +
push ecx  +
push 129Ch  +
push 0C00000EFh  +
call sub_104450C  +
jmp loc_10467E7  +
mov eax [ebp+arg_4] +
cmp eax ecx +
jnz loc_1046773  +
push ecx  +
push ecx  +
push 12A0h  +
push 0C00000F0h  +
jmp loc_1046754  +
push ebx  +
push edi  +
cmp [esi+0D4h] cl +
jz loc_10467D7  +
mov ecx [esi+18h] +
mov edi [eax+4] +
mov ebx [esi+0DCh] +
mov [ebp+arg_0] ecx +
mov ecx [esi+0D8h] +
mov [ebp+var_8] ecx +
mov ecx [esi+14h] +
add edi ecx +
cmp ecx edi +
jnb loc_10467BF  +
mov edx edi +
call [ebp+arg_0]  +
cmp eax 0FFFFFFFFh +
jz loc_10467D3  +
cmp eax 0Ah +
jnz loc_10467B5  +
inc [ebp+var_8]  +
xor ebx ebx +
inc ebx  +
jmp loc_10467B6  +
inc ebx  +
mov ecx edx +
cmp edx edi +
jb loc_104679E  +
mov eax [ebp+arg_4] +
mov edx [ebp+var_8] +
mov [esi+0D8h] edx +
mov [esi+0DCh] ebx +
mov [esi+14h] ecx +
jmp loc_10467DD  +
mov eax edx +
jmp loc_10467E5  +
mov ecx [eax+4] +
add [esi+14h] ecx +
mov eax [eax+10h] +
mov [esi+44h] eax +
xor eax eax +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
cmp esi ebx +
jnz loc_1046817  +
push ebx  +
push ebx  +
push 12D5h  +
push 0C00000EFh  +
call sub_104450C  +
jmp loc_10468C7  +
push edi  +
mov edi [ebp+arg_4] +
cmp edi ebx +
jnz loc_1046835  +
push ebx  +
push ebx  +
push 12D9h  +
push 0C00000F0h  +
call sub_104450C  +
jmp loc_10468C6  +
push 0E0h  +
push ebx  +
push esi  +
call memset  +
mov eax [edi+4] +
mov [esi] eax +
mov eax [edi+8] +
mov [esi+4] eax +
mov eax [edi+4] +
mov [esi+14h] eax +
mov eax [edi+8] +
add eax [edi+4] +
mov [esi+18h] ebx +
mov [esi+10h] eax +
mov eax [edi+18h] +
add esp 0Ch +
cmp eax ebx +
jz loc_1046870  +
mov [esi+0C8h] eax +
jmp loc_104687A  +
mov dword ptr [esi+0C8h] offset loc_10445DD +
mov eax [edi+14h] +
cmp eax ebx +
jz loc_1046889  +
mov [esi+0C0h] eax +
jmp loc_1046893  +
mov dword ptr [esi+0C0h] offset sub_104451D +
mov eax [edi+1Ch] +
mov [esi+0C4h] eax +
mov eax [edi+10h] +
mov [esi+0CCh] eax +
xor eax eax +
inc eax  +
mov [esi+0D8h] eax +
mov [esi+0DCh] eax +
mov dword ptr [esi+44h] 3 +
mov al [edi+0Ch] +
mov [esi+0D4h] al +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov eax ecx +
lea ecx [eax-61h] +
cmp ecx 19h +
ja locret_10468DF  +
add eax 0FFFFFFE0h +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
test esi esi +
jz loc_10468FF  +
test edx edx +
jz loc_10468FF  +
push edi  +
push 38h  +
pop ecx  +
mov edi edx +
movs   +
pop edi  +
xor eax eax +
pop esi  +
retn   +
push 0  +
push 0  +
push 141Eh  +
push 0C000000Dh  +
call sub_104450C  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_8] +
xor ecx ecx +
push esi  +
push edi  +
cmp ebx ecx +
jz loc_104692C  +
mov [ebx] cl +
mov edi [ebp+arg_0] +
cmp edi ecx +
jz loc_10469B9  +
cmp ebx ecx +
jz loc_10469B9  +
mov eax [ebp+arg_4] +
cmp eax ecx +
jz loc_10469B9  +
mov ecx [eax] +
mov esi [eax+4] +
add esi ecx +
jmp loc_1046979  +
mov edx esi +
call dword ptr [edi+18h]  +
mov ecx edx +
cmp eax 0FFFFFFFFh +
jz loc_10469B5  +
cmp eax 2Eh +
ja loc_1046992  +
jz loc_1046980  +
cmp eax 25h +
ja loc_1046984  +
jz loc_1046980  +
cmp eax 9 +
jb loc_1046980  +
cmp eax 0Ah +
jbe loc_1046979  +
cmp eax 0Dh +
jz loc_1046979  +
cmp eax 20h +
jnz loc_1046980  +
cmp ecx esi +
jb loc_104694B  +
mov byte ptr [ebx] 1 +
xor eax eax +
jmp loc_10469CA  +
sub eax 26h +
jz loc_1046980  +
dec eax  +
jz loc_1046980  +
dec eax  +
jz loc_1046980  +
dec eax  +
jmp loc_1046980  +
cmp eax 3Fh +
ja loc_10469A3  +
jz loc_1046980  +
sub eax 2Fh +
jz loc_1046980  +
sub eax 0Bh +
jmp loc_1046987  +
sub eax 5Bh +
jz loc_1046980  +
dec eax  +
dec eax  +
jz loc_1046980  +
dec eax  +
dec eax  +
jz loc_1046980  +
sub eax 1Ch +
jmp loc_1046980  +
mov eax ecx +
jmp loc_10469CA  +
push ecx  +
push ecx  +
push 1488h  +
push 0C000000Dh  +
call sub_104450C  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
or [ebp+var_8] 0FFFFFFFFh +
push ebx  +
xor ebx ebx +
push esi  +
mov esi [ebp+arg_0] +
mov [ebp+var_C] ebx +
mov [ebp+var_4] ebx +
cmp esi ebx +
jnz loc_1046A09  +
push ebx  +
push ebx  +
push 0AA6h  +
push 0C00000EFh  +
call sub_104450C  +
jmp loc_1046CD1  +
cmp [ebp+arg_4] ebx +
jnz loc_1046A1C  +
push ebx  +
push ebx  +
push 0AAAh  +
push 0C00000F0h  +
jmp loc_10469FF  +
mov ecx [ebp+arg_4] +
and [ecx+4] ebx +
mov eax [esi+14h] +
and [ecx+0Ch] ebx +
push edi  +
mov [ecx] eax +
mov eax [esi+1Ch] +
push 4  +
mov [ecx+8] eax +
mov [ecx+14h] bl +
mov eax [esi+44h] +
pop edx  +
lea edi [esi+48h] +
mov [ebp+arg_0] eax +
cmp eax edx +
jnz loc_1046A4E  +
mov [ecx+10h] edx +
xor eax eax +
jmp loc_1046CD0  +
mov edx [esi+14h] +
mov [ecx+10h] eax +
add eax 0FFFFFFFEh +
mov [ebp+var_10] edx +
cmp eax 78h +
ja loc_10477D6  +
movzx eax ds:byte_1047886[eax] +
jmp ds:off_10477EA[eax*4]  +
mov edx edi +
mov ecx esi +
call sub_1044AC3  +
test eax eax +
jge loc_1046A8A  +
mov ecx [ebp+arg_4] +
mov byte ptr [ecx+14h] 1 +
jmp loc_1046CD0  +
mov ecx [edi] +
mov ebx [edi+8] +
cmp ecx 3 +
jnz loc_1046AB8  +
cmp [ebp+arg_0] 47h +
jz loc_1046AA5  +
cmp [ebp+arg_0] 34h +
jz loc_1046AA5  +
cmp [ebp+arg_0] ecx +
jnz loc_1046AAC  +
mov ecx [ebp+arg_4] +
mov byte ptr [ecx+14h] 1 +
mov [ebp+var_4] 4 +
jmp loc_1046C9F  +
cmp ecx 7 +
mov edx edi +
mov ecx esi +
jnz loc_1046C73  +
add [esi+14h] ebx +
call sub_1044AC3  +
test eax eax +
jl loc_1046CD0  +
mov ecx [edi] +
push 5  +
pop edx  +
cmp ecx edx +
jz loc_1046C67  +
cmp ecx 8 +
jz loc_1046C0E  +
cmp ecx 10h +
jz loc_1046AFB  +
mov ebx [edi+8] +
mov [ebp+var_4] edx +
jmp loc_1046C9F  +
mov eax [edi+8] +
add [esi+14h] eax +
add ebx [edi+8] +
lea edx [esi+70h] +
push 2  +
mov ecx esi +
call sub_1044EED  +
test eax eax +
jl loc_1046CD0  +
lea ecx [esi+70h] +
mov edx [ecx] +
cmp edx 1 +
jnz loc_1046B3B  +
cmp [ecx+14h] edx +
jnz loc_1046B3B  +
mov edx [ecx+1Ch] +
add edx [ecx+8] +
mov [ebp+var_4] 2Dh +
add ebx edx +
jmp loc_1046C9F  +
cmp edx 0Eh +
jnz loc_1046BB3  +
lea edx [ecx+14h] +
cmp dword ptr [edx] 0Ch +
jnz loc_1046BB3  +
mov eax [esi+78h] +
add [esi+14h] eax +
lea eax [ebp+var_8] +
push eax  +
push edx  +
mov edx offset asc_100F380 +
mov ecx esi +
call sub_10458CC  +
test eax eax +
jl loc_1046CD0  +
mov ecx [esi+8Ch] +
mov edx [esi+78h] +
add edx ecx +
add ebx edx +
cmp [ebp+var_8] 0 +
jnz loc_1046C02  +
add [esi+14h] ecx +
lea edx [esi+98h] +
mov ecx esi +
mov [ebp+arg_0] edx +
call sub_1044AC3  +
test eax eax +
jl loc_1046CD0  +
mov ecx [ebp+arg_0] +
add ebx [esi+0A0h] +
cmp dword ptr [ecx] 0Eh +
jnz loc_1046C02  +
mov [ebp+var_4] 30h +
jmp loc_1046C9F  +
cmp dword ptr [ecx] 0Ch +
jnz loc_1046BFF  +
push 0  +
lea edx [esi+70h] +
mov ecx esi +
call sub_104508B  +
test eax eax +
jl loc_1046CD0  +
push 0  +
lea eax [ebp+var_8] +
push eax  +
push offset dword_100F3B0  +
lea eax [esi+74h] +
push eax  +
push esi  +
call dword ptr [esi+0C8h]  +
test eax eax +
jl loc_1046CD0  +
add ebx [esi+78h] +
cmp [ebp+var_8] 0 +
jnz loc_1046C02  +
mov [ebp+var_4] 40h +
jmp loc_1046C9F  +
add ebx [ecx+8] +
mov ecx [ebp+arg_4] +
mov byte ptr [ecx+14h] 1 +
jmp loc_1046C9F  +
mov eax [edi+8] +
add [esi+14h] eax +
push 0  +
mov edx edi +
mov ecx esi +
add ebx eax +
mov [ebp+var_4] 28h +
call sub_104508B  +
test eax eax +
jl loc_1046CD0  +
cmp dword ptr [edi+8] 0 +
jz loc_1046C9F  +
cmp dword ptr [edi] 0Ch +
jnz loc_1046C9F  +
push 0  +
lea eax [ebp+var_8] +
push eax  +
push offset dword_100F388  +
lea eax [edi+4] +
push eax  +
push esi  +
call dword ptr [esi+0C8h]  +
test eax eax +
jl loc_1046CD0  +
cmp [ebp+var_8] 0 +
jnz loc_1046C9F  +
add ebx [edi+8] +
mov [ebp+var_4] 33h +
jmp loc_1046C9F  +
add ebx [edi+8] +
mov [ebp+var_4] 22h +
jmp loc_1046C9F  +
lea eax [esi+5Ch] +
push eax  +
call sub_1044E1D  +
mov ebx [edi+8] +
mov [ebp+var_4] 2 +
jmp loc_1046C9F  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
push ecx  +
mov ebx esi +
call sub_1045918  +
test eax eax +
jl loc_1046CD0  +
mov ebx [ebp+var_C] +
mov ecx [ebp+arg_4] +
mov edx [ebp+var_10] +
mov [esi+14h] edx +
mov [ecx] edx +
mov edx [ebp+var_4] +
mov [ecx+4] ebx +
mov [ecx+10h] edx +
mov edx [edi+10h] +
add [ecx+0Ch] edx +
mov edx [edi+0Ch] +
mov [ecx+8] edx +
test eax eax +
jl loc_1046CD0  +
cmp [ebp+arg_8] 0 +
jz loc_1046CD0  +
push ecx  +
push esi  +
call sub_1046737  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
push 0  +
mov edx edi +
mov ecx esi +
call sub_1044C26  +
test eax eax +
jl loc_1046CD0  +
mov ebx [edi+8] +
test ebx ebx +
jbe loc_1046C02  +
cmp dword ptr [edi] 0Dh +
jnz loc_1046C02  +
mov [ebp+var_4] 35h +
jmp loc_1046C9F  +
lea eax [esi+5Ch] +
push eax  +
mov edx edi +
mov ecx esi +
call sub_1044C26  +
test eax eax +
jl loc_1046CD0  +
mov eax [edi+8] +
add [esi+14h] eax +
mov edx edi +
mov ecx esi +
call sub_1044AC3  +
test eax eax +
jl loc_1046CD0  +
cmp dword ptr [edi] 4 +
mov ebx [edi+8] +
jnz loc_1046C02  +
mov [ebp+var_4] 36h +
jmp loc_1046C9F  +
lea eax [esi+5Ch] +
push eax  +
mov edx edi +
mov ecx esi +
call sub_1044C26  +
test eax eax +
jl loc_1046CD0  +
mov eax [edi+8] +
add [esi+14h] eax +
mov edx edi +
mov ecx esi +
call sub_1044AC3  +
test eax eax +
jl loc_1046CD0  +
mov ecx [edi] +
mov ebx [edi+8] +
cmp ecx 9 +
jz loc_1046D7A  +
cmp ecx 0Ah +
jnz loc_1046C02  +
mov [esi+0D0h] ecx +
mov [ebp+var_4] 3Ah +
jmp loc_1046C9F  +
mov edx edi +
mov ecx esi +
call sub_1044AC3  +
test eax eax +
jl loc_1046CD0  +
mov ecx [edi] +
mov ebx [edi+8] +
cmp ecx [esi+0D0h] +
jnz loc_1046C02  +
mov [ebp+var_4] 3Ch +
jmp loc_1046C9F  +
lea eax [esi+5Ch] +
push eax  +
push dword ptr [esi+0D0h]  +
mov edx edi +
mov ecx esi +
call sub_10456E9  +
test eax eax +
jl loc_1046CD0  +
mov ecx [esi+5Ch] +
cmp ecx [esi+0D0h] +
jnz loc_1046C02  +
mov ebx [edi+8] +
mov [ebp+var_4] 3Bh +
jmp loc_1046C9F  +
lea eax [esi+5Ch] +
push eax  +
mov edx edi +
mov ecx esi +
call sub_1044C26  +
test eax eax +
jl loc_1046CD0  +
mov ecx [edi+8] +
test ecx ecx +
jbe loc_1046E1B  +
cmp dword ptr [edi] 0Dh +
jnz loc_1046E1B  +
mov ebx ecx +
jmp loc_1046CFA  +
mov ecx [esi+5Ch] +
cmp ecx 8 +
jnz loc_1046E52  +
mov ebx [esi+64h] +
add [esi+14h] ebx +
mov edx edi +
mov ecx esi +
call sub_1044AC3  +
test eax eax +
jl loc_1046CD0  +
add ebx [edi+8] +
cmp dword ptr [edi] 6 +
jnz loc_1046C02  +
mov [ebp+var_4] 34h +
jmp loc_1046C9F  +
cmp ecx 0Ch +
jnz loc_1046C02  +
cmp [ebp+arg_0] 35h +
jnz loc_1046C02  +
push 0  +
mov edx edi +
mov ecx esi +
call sub_104508B  +
test eax eax +
jl loc_1046CD0  +
mov ebx [edi+8] +
and [ebp+arg_0] 0 +
push 0  +
lea eax [ebp+var_8] +
push eax  +
mov eax [ebp+arg_0] +
push ds:off_100F458[eax*8]  +
lea eax [edi+4] +
push eax  +
push esi  +
call dword ptr [esi+0C8h]  +
test eax eax +
jl loc_1046CD0  +
cmp [ebp+var_8] 0 +
jz loc_1046EB3  +
inc [ebp+arg_0]  +
cmp [ebp+arg_0] 3 +
jb loc_1046E7F  +
jmp loc_1046EC0  +
mov ecx [ebp+arg_0] +
mov ecx ds:dword_100F45C[ecx*8] +
mov [ebp+var_4] ecx +
cmp [ebp+var_8] 0 +
jz loc_1046C9F  +
jmp loc_1046C02  +
push 0  +
mov edx edi +
mov ecx esi +
call sub_104508B  +
test eax eax +
jl loc_1046CD0  +
mov ebx [edi+8] +
test ebx ebx +
jbe loc_1046C02  +
cmp dword ptr [edi] 0Ch +
jnz loc_1046C02  +
mov [ebp+var_4] 2Ah +
jmp loc_1046C9F  +
lea edx [esi+70h] +
push 2  +
mov ecx esi +
call sub_1044EED  +
test eax eax +
jl loc_1046CD0  +
lea ecx [esi+70h] +
mov ebx [ecx+1Ch] +
add ebx [ecx+8] +
cmp dword ptr [ecx] 8 +
jnz loc_1046C02  +
cmp dword ptr [ecx+14h] 6 +
jnz loc_1046C02  +
mov [ebp+var_4] 29h +
jmp loc_1046C9F  +
lea eax [esi+5Ch] +
push eax  +
mov edx edi +
mov ecx esi +
call sub_1044C26  +
test eax eax +
jl loc_1046CD0  +
mov ebx [edi+8] +
test ebx ebx +
jz loc_1046F6B  +
cmp dword ptr [edi] 0Dh +
jnz loc_1046F6B  +
mov [ebp+var_4] 2Ch +
jmp loc_1046C9F  +
cmp dword ptr [esi+5Ch] 8 +
jnz loc_1046C02  +
jmp loc_1046F02  +
xor ebx ebx +
mov [ebp+var_4] ebx +
lea eax [esi+5Ch] +
push eax  +
push 8  +
mov edx edi +
mov ecx esi +
call sub_10456E9  +
test eax eax +
jl loc_1046CD0  +
mov ecx [edi+8] +
add [esi+14h] ecx +
mov edx [esi+5Ch] +
mov [ebp+arg_0] ecx +
cmp edx 8 +
jnz loc_1046FE1  +
mov eax [esi+64h] +
add eax [esi+14h] +
mov edx edi +
mov ecx esi +
mov [esi+14h] eax +
call sub_1044AC3  +
test eax eax +
jl loc_1046CD0  +
cmp dword ptr [edi] 6 +
jz loc_1046FD5  +
mov eax [edi+8] +
mov ecx [esi+64h] +
add ecx eax +
add ecx [ebp+arg_0] +
add ebx ecx +
add [esi+14h] eax +
jmp loc_1046F7C  +
mov ecx [ebp+arg_0] +
mov [ebp+var_4] 2Bh +
jmp loc_1046FF4  +
cmp edx 3 +
jnz loc_1046FF4  +
mov edx [ebp+arg_4] +
mov [ebp+var_4] 1 +
mov byte ptr [edx+14h] 1 +
add ebx ecx +
cmp [ebp+var_4] 0 +
jz loc_1046F7C  +
jmp loc_1046C9F  +
and [ebp+var_4] ebx +
lea eax [esi+5Ch] +
push eax  +
push 1  +
mov edx edi +
mov ecx esi +
call sub_10456E9  +
test eax eax +
jl loc_1046CD0  +
mov ecx [edi+8] +
mov [ebp+arg_0] ecx +
mov ecx [esi+5Ch] +
cmp ecx 1 +
jnz loc_1047061  +
mov eax [esi+64h] +
add eax [ebp+arg_0] +
mov edx edi +
add [esi+14h] eax +
mov ecx esi +
call sub_1044AC3  +
test eax eax +
jl loc_1046CD0  +
cmp dword ptr [edi] 1 +
jnz loc_1047050  +
mov ecx [esi+64h] +
sub [esi+14h] ecx +
jmp loc_104706A  +
mov ecx [edi+8] +
add [esi+14h] ecx +
mov ecx [esi+64h] +
add ecx [edi+8] +
add [ebp+arg_0] ecx +
jmp loc_1047071  +
cmp ecx 3 +
jz loc_104706A  +
test ecx ecx +
jnz loc_1047071  +
mov [ebp+var_4] 2Eh +
add ebx [ebp+arg_0] +
cmp [ebp+var_4] 0 +
jz loc_1047004  +
jmp loc_1046C9F  +
lea edx [esi+70h] +
push 3  +
mov ecx esi +
call sub_1044EED  +
test eax eax +
jl loc_1046CD0  +
lea ecx [esi+70h] +
mov ebx [ecx+30h] +
add ebx [ecx+1Ch] +
add ebx [ecx+8] +
cmp dword ptr [ecx] 1 +
jnz loc_1046C02  +
cmp dword ptr [ecx+14h] 1 +
jnz loc_1046C02  +
cmp dword ptr [ecx+28h] 6 +
jnz loc_1046C02  +
mov [ebp+var_4] 2Fh +
jmp loc_1046C9F  +
lea eax [esi+5Ch] +
push eax  +
mov edx edi +
mov ecx esi +
call sub_104508B  +
test eax eax +
jl loc_1046CD0  +
mov ebx [edi+8] +
test ebx ebx +
jz loc_1046C02  +
xor ecx ecx +
cmp dword ptr [esi+5Ch] 15h +
setnz cl  +
dec ecx  +
and ecx 3 +
add ecx 23h +
mov [ebp+var_4] ecx +
jmp loc_1046C9F  +
mov edx edi +
mov ecx esi +
call sub_1044AC3  +
test eax eax +
jl loc_1046CD0  +
cmp dword ptr [edi] 15h +
mov ebx [edi+8] +
jnz loc_1046C02  +
mov [ebp+var_4] 27h +
jmp loc_1046C9F  +
push 0  +
mov edx edi +
mov ecx esi +
call sub_104508B  +
test eax eax +
jl loc_1046CD0  +
mov ebx [edi+8] +
test ebx ebx +
jbe loc_1046C02  +
mov [ebp+var_4] 23h +
jmp loc_1046C9F  +
lea eax [esi+5Ch] +
push eax  +
mov edx edi +
mov ecx esi +
call sub_1044C26  +
test eax eax +
jl loc_1046CD0  +
mov ebx [esi+64h] +
add ebx [edi+8] +
cmp dword ptr [esi+5Ch] 6 +
jnz loc_1046C02  +
mov [ebp+var_4] 25h +
jmp loc_1046C9F  +
lea eax [esi+5Ch] +
push eax  +
mov edx edi +
mov ecx esi +
call sub_104508B  +
test eax eax +
jl loc_1046CD0  +
mov ebx [edi+8] +
test ebx ebx +
jbe loc_1046C02  +
xor ecx ecx +
cmp dword ptr [esi+5Ch] 15h +
setnz cl  +
dec ecx  +
and ecx 10h +
add ecx 6 +
jmp loc_10470F8  +
mov edx edi +
mov ecx esi +
call sub_1044AC3  +
test eax eax +
jl loc_1046CD0  +
cmp dword ptr [edi] 15h +
mov ebx [edi+8] +
jnz loc_1046C02  +
mov [ebp+var_4] 17h +
jmp loc_1046C9F  +
push 0  +
mov edx edi +
mov ecx esi +
call sub_104508B  +
test eax eax +
jl loc_1046CD0  +
mov ebx [edi+8] +
test ebx ebx +
jbe loc_1046C02  +
mov [ebp+var_4] 6 +
jmp loc_1046C9F  +
lea eax [esi+5Ch] +
push eax  +
mov edx edi +
mov ecx esi +
call sub_1044C26  +
test eax eax +
jl loc_1046CD0  +
mov ebx [edi+8] +
test ebx ebx +
jbe loc_1047234  +
mov [ebp+var_4] 21h +
jmp loc_1046C9F  +
mov ecx [esi+5Ch] +
cmp ecx 6 +
jnz loc_104724B  +
add ebx [esi+64h] +
mov [ebp+var_4] 1Ah +
jmp loc_1046C9F  +
cmp ecx 5 +
jnz loc_1046C02  +
lea edx [esi+70h] +
push 2  +
mov ecx esi +
call sub_1044EED  +
test eax eax +
jl loc_1046CD0  +
lea ecx [esi+70h] +
mov ebx [ecx+1Ch] +
add ebx [ecx+8] +
cmp dword ptr [ecx+14h] 6 +
jnz loc_1046C02  +
cmp dword ptr [ecx] 5 +
jnz loc_1046C02  +
mov [ebp+var_4] 1Bh +
jmp loc_1046C9F  +
lea eax [esi+5Ch] +
push eax  +
mov edx edi +
mov ecx esi +
call sub_1044C26  +
test eax eax +
jl loc_1046CD0  +
mov ebx [edi+8] +
add [esi+14h] ebx +
mov edx edi +
mov ecx esi +
call sub_1044AC3  +
test eax eax +
jl loc_1046CD0  +
add ebx [edi+8] +
cmp dword ptr [edi] 4 +
jnz loc_1046C02  +
mov [ebp+var_4] 1Dh +
jmp loc_1046C9F  +
lea eax [esi+5Ch] +
push eax  +
mov edx edi +
mov ecx esi +
call sub_1044C26  +
test eax eax +
jl loc_1046CD0  +
mov ebx [edi+8] +
add [esi+14h] ebx +
mov edx edi +
mov ecx esi +
call sub_1044AC3  +
test eax eax +
jl loc_1046CD0  +
mov ecx [edi] +
add ebx [edi+8] +
cmp ecx 9 +
jz loc_1047313  +
cmp ecx 0Ah +
jnz loc_1046C02  +
mov [esi+0D0h] ecx +
mov [ebp+var_4] 1Fh +
jmp loc_1046C9F  +
push 0  +
push dword ptr [esi+0D0h]  +
mov edx edi +
mov ecx esi +
call sub_10456E9  +
test eax eax +
jl loc_1046CD0  +
mov ebx [edi+8] +
mov [ebp+var_4] 1Eh +
jmp loc_1046C9F  +
mov edx edi +
mov ecx esi +
call sub_1044AC3  +
test eax eax +
jl loc_1046CD0  +
mov ecx [edi] +
mov ebx [edi+8] +
cmp ecx [esi+0D0h] +
jnz loc_1046C02  +
mov [ebp+var_4] 20h +
jmp loc_1046C9F  +
mov edx edi +
mov ecx esi +
call sub_1044AC3  +
test eax eax +
jl loc_1046CD0  +
cmp dword ptr [edi] 15h +
mov ebx [edi+8] +
jnz loc_1046C02  +
mov [ebp+var_4] 19h +
jmp loc_1046C9F  +
push 0  +
mov edx edi +
mov ecx esi +
call sub_104508B  +
test eax eax +
jl loc_1046CD0  +
mov ebx [edi+8] +
test ebx ebx +
jbe loc_1046C02  +
mov [ebp+var_4] 1Ch +
jmp loc_1046C9F  +
lea ebx [esi+5Ch] +
push ebx  +
mov edx edi +
mov ecx esi +
call sub_1044C26  +
test eax eax +
jl loc_1046CD0  +
mov ecx [edi+8] +
test ecx ecx +
jbe loc_10473F1  +
mov ebx ecx +
jmp loc_1047228  +
mov ecx [ebx] +
cmp ecx 6 +
jnz loc_1047400  +
mov ebx [esi+64h] +
jmp loc_104723F  +
cmp ecx 5 +
mov ecx esi +
jnz loc_1047434  +
lea edx [esi+70h] +
push 2  +
call sub_1044EED  +
test eax eax +
jl loc_1046CD0  +
lea ecx [esi+70h] +
mov ebx [ecx+1Ch] +
add ebx [ecx+8] +
cmp dword ptr [ecx] 5 +
jnz loc_1046C02  +
cmp dword ptr [ecx+14h] 6 +
jmp loc_104727E  +
push ebx  +
mov edx edi +
call sub_104508B  +
test eax eax +
jl loc_1046CD0  +
mov ebx [edi+8] +
test ebx ebx +
jbe loc_1046C02  +
push 0  +
lea ecx [ebp+var_8] +
push ecx  +
push offset dword_100F3A8  +
lea eax [edi+4] +
push eax  +
push esi  +
call dword ptr [esi+0C8h]  +
test eax eax +
jl loc_1046CD0  +
cmp [ebp+var_8] 0 +
jnz loc_104749D  +
mov ecx [esi+5Ch] +
cmp ecx 4 +
jz loc_1047491  +
cmp ecx 0Dh +
jz loc_1047491  +
cmp ecx 15h +
jnz loc_10474FE  +
mov [ebp+var_4] 7 +
jmp loc_1046C9F  +
mov [ebp+var_4] 8 +
jmp loc_1046C9F  +
push 0  +
lea eax [ebp+var_8] +
push eax  +
push offset dword_100F388  +
lea eax [edi+4] +
push eax  +
push esi  +
call dword ptr [esi+0C8h]  +
test eax eax +
jl loc_1046CD0  +
cmp [ebp+var_8] 0 +
mov ecx [esi+5Ch] +
jnz loc_10474E7  +
cmp ecx 4 +
jz loc_10473C2  +
cmp ecx 0Dh +
jz loc_10473C2  +
cmp ecx 15h +
jnz loc_10474FE  +
mov [ebp+var_4] 0Fh +
jmp loc_1046C9F  +
cmp ecx 4 +
jz loc_10473C2  +
cmp ecx 0Dh +
jz loc_10473C2  +
cmp ecx 15h +
jz loc_104750A  +
mov [ebp+var_4] 1 +
jmp loc_1046C02  +
mov [ebp+var_4] 18h +
jmp loc_1046C9F  +
mov edx edi +
mov ecx esi +
call sub_1044AC3  +
test eax eax +
jl loc_1046CD0  +
cmp dword ptr [edi] 15h +
mov ebx [edi+8] +
jnz loc_1046C02  +
xor ecx ecx +
cmp [ebp+arg_0] 7 +
setnz cl  +
dec ecx  +
and ecx 0FFFFFFFAh +
add ecx 10h +
jmp loc_10470F8  +
lea eax [esi+5Ch] +
push eax  +
mov edx edi +
mov ecx esi +
call sub_104508B  +
test eax eax +
jl loc_1046CD0  +
mov ebx [edi+8] +
test ebx ebx +
jbe loc_1046C02  +
xor ecx ecx +
cmp [ebp+arg_0] 0Ah +
setnz cl  +
lea ecx ds:9[ecx*8] +
jmp loc_10470F8  +
lea eax [esi+5Ch] +
push eax  +
mov edx edi +
mov ecx esi +
call sub_1044C26  +
test eax eax +
jl loc_1046CD0  +
mov ebx [edi+8] +
add [esi+14h] ebx +
mov edx edi +
mov ecx esi +
call sub_1044AC3  +
test eax eax +
jl loc_1046CD0  +
add ebx [edi+8] +
cmp dword ptr [edi] 4 +
jnz loc_1046C02  +
xor ecx ecx +
cmp [ebp+arg_0] 9 +
setnz cl  +
dec ecx  +
and ecx 0FFFFFFF9h +
add ecx 12h +
jmp loc_10470F8  +
lea eax [esi+5Ch] +
push eax  +
mov edx edi +
mov ecx esi +
call sub_1044C26  +
test eax eax +
jl loc_1046CD0  +
mov ebx [edi+8] +
add [esi+14h] ebx +
mov edx edi +
mov ecx esi +
call sub_1044AC3  +
test eax eax +
jl loc_1046CD0  +
mov ecx [edi] +
add ebx [edi+8] +
cmp ecx 9 +
jz loc_1047609  +
cmp ecx 0Ah +
jnz loc_1046C02  +
mov [esi+0D0h] ecx +
xor ecx ecx +
cmp [ebp+arg_0] 0Bh +
setnz cl  +
dec ecx  +
and ecx 0FFFFFFF9h +
add ecx 13h +
jmp loc_10470F8  +
lea eax [esi+5Ch] +
push eax  +
push dword ptr [esi+0D0h]  +
mov edx edi +
mov ecx esi +
call sub_10456E9  +
test eax eax +
jl loc_1046CD0  +
mov ebx [edi+8] +
xor ecx ecx +
cmp [ebp+arg_0] 0Ch +
setnz cl  +
dec ecx  +
and ecx 0FFFFFFFAh +
add ecx 14h +
jmp loc_10470F8  +
mov edx edi +
mov ecx esi +
call sub_1044AC3  +
test eax eax +
jl loc_1046CD0  +
mov ecx [edi] +
mov ebx [edi+8] +
cmp ecx [esi+0D0h] +
jnz loc_1046C02  +
xor ecx ecx +
cmp [ebp+arg_0] 0Eh +
setnz cl  +
lea ecx ds:0Dh[ecx*8] +
jmp loc_10470F8  +
lea eax [esi+5Ch] +
push eax  +
mov edx edi +
mov ecx esi +
call sub_1044C26  +
test eax eax +
jl loc_1046CD0  +
mov ebx [edi+8] +
add [esi+14h] ebx +
mov edx edi +
mov ecx esi +
call sub_1044AC3  +
test eax eax +
jl loc_1046CD0  +
add ebx [edi+8] +
cmp dword ptr [edi] 4 +
jnz loc_1046C02  +
mov [ebp+var_4] 0Bh +
jmp loc_1046C9F  +
and [ebp+var_4] ebx +
and [ebp+arg_0] 0 +
lea eax [esi+5Ch] +
push eax  +
push 0Fh  +
mov edx edi +
mov ecx esi +
call sub_10456E9  +
test eax eax +
jl loc_1046CD0  +
mov ecx [esi+5Ch] +
cmp ecx 0Fh +
jnz loc_104775E  +
mov eax [edi+8] +
add [esi+14h] eax +
push 3  +
lea edx [esi+5Ch] +
mov ecx esi +
call sub_1044EED  +
test eax eax +
jl loc_1046CD0  +
lea edx [esi+5Ch] +
mov ecx [edx] +
cmp ecx 0Fh +
jnz loc_1047733  +
cmp [edx+14h] ecx +
jnz loc_1047733  +
cmp dword ptr [edx+28h] 6 +
jnz loc_1047733  +
mov ecx [edi+8] +
mov [ebp+var_4] 31h +
jmp loc_104777C  +
cmp ecx 3 +
jz loc_1047727  +
cmp dword ptr [edx+14h] 3 +
jz loc_1047727  +
cmp dword ptr [edx+28h] 3 +
jz loc_1047727  +
mov ecx [edx+8] +
add [esi+14h] ecx +
add ecx [edi+8] +
mov edx [edx+10h] +
add edx [edi+10h] +
mov [ebp+arg_0] ecx +
mov ecx [ebp+arg_4] +
add [ecx+0Ch] edx +
jmp loc_104777F  +
cmp ecx 3 +
jnz loc_104776C  +
mov [ebp+var_4] 31h +
jmp loc_104777F  +
test ecx ecx +
jnz loc_1047779  +
mov [ebp+var_4] 1 +
jmp loc_104777F  +
mov ecx [esi+64h] +
mov [ebp+arg_0] ecx +
add ebx [ebp+arg_0] +
cmp [ebp+var_4] 0 +
jz loc_10476D5  +
jmp loc_1046C9F  +
push 3  +
mov edx edi +
mov ecx esi +
call sub_1044EED  +
test eax eax +
jl loc_1046CD0  +
mov ebx [edi+30h] +
add ebx [edi+1Ch] +
add ebx [edi+8] +
cmp dword ptr [edi] 0Fh +
jnz loc_1046C02  +
cmp dword ptr [edi+14h] 0Fh +
jnz loc_1046C02  +
cmp dword ptr [edi+28h] 6 +
jnz loc_1046C02  +
mov [ebp+var_4] 32h +
jmp loc_1046C9F  +
mov [ebp+var_4] 1 +
mov eax 0C00000E5h +
jmp loc_1046C05  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 104h +
push ebx  +
mov ebx [ebp+arg_0] +
xor ecx ecx +
cmp ebx ecx +
jz loc_1047921  +
mov eax [ebx+14h] +
mov [ebp+var_4] eax +
jmp loc_1047924  +
mov [ebp+var_4] ecx +
cmp ebx ecx +
jz loc_104792D  +
mov eax [ebx+10h] +
jmp loc_104792F  +
xor eax eax +
sub eax [ebp+var_4] +
mov [ebp+var_C] eax +
cmp ebx ecx +
jnz loc_104794F  +
push ecx  +
push ecx  +
push 1366h  +
push 0C000000Dh  +
call sub_104450C  +
jmp loc_1047ABE  +
push esi  +
push edi  +
push 38h  +
xor eax eax +
pop ecx  +
mov esi ebx +
lea edi [ebp+var_104] +
movs   +
cmp [ebp+arg_4] eax +
jnz loc_1047976  +
push eax  +
push eax  +
push 136Bh  +
push 0C000000Dh  +
jmp loc_1047AD1  +
mov edx offset dword_100F4B4 +
mov [ebp+var_8] eax +
mov ecx [edx] +
lea eax [edx-4] +
cmp [ebp+var_C] ecx +
jb loc_104799A  +
test ecx ecx +
jz loc_104799A  +
mov edi [eax] +
mov esi [ebp+var_4] +
xor ebx ebx +
cmps   +
mov ebx [ebp+arg_0] +
jz loc_1047A05  +
add [ebp+var_8] 20h +
add edx 20h +
cmp [ebp+var_8] 100h +
jnz loc_104797E  +
mov esi offset off_100F4B0 +
mov eax [esi+0Ch] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
mov eax [esi+10h] +
mov ecx [esi+0Ch] +
add [ebp+var_F0] ecx +
xor edi edi +
mov [ebp+var_EC] eax +
mov [ebx+18h] eax +
inc edi  +
push edi  +
lea eax [ebp+var_24] +
push eax  +
lea eax [ebp+var_104] +
push eax  +
call sub_10469D6  +
test eax eax +
jl loc_1047ABA  +
cmp [ebp+var_14] 33h +
mov byte ptr [ebp+arg_0+3] 0 +
jnz loc_1047ABC  +
cmp [ebp+var_10] 0 +
jnz loc_1047ABC  +
jmp loc_1047AA1  +
mov esi eax +
jmp loc_10479AF  +
cmp [ebp+var_10] 0 +
jnz loc_1047ABA  +
mov eax [ebp+var_14] +
cmp eax edi +
jz loc_1047ABA  +
cmp eax 4 +
jz loc_1047ABA  +
cmp eax 34h +
jz loc_1047ABA  +
cmp eax 37h +
jnz loc_1047A3B  +
mov byte ptr [ebp+arg_0+3] 1 +
jmp loc_1047AA1  +
cmp eax 3Bh +
jnz loc_1047AA1  +
cmp byte ptr [ebp+arg_0+3] 0 +
jz loc_1047AA1  +
mov [ebp+arg_0] edi +
xor edi edi +
cmp [esi+14h] edi +
jz loc_1047A7E  +
push offset loc_10468D2  +
lea eax [ebp+arg_0] +
push eax  +
mov eax [esi+18h] +
lea eax [eax+edi*8] +
push eax  +
lea eax [ebp+var_24] +
push eax  +
lea eax [ebp+var_104] +
push eax  +
call [ebp+var_3C]  +
test eax eax +
jl loc_1047ABC  +
cmp [ebp+arg_0] 0 +
jz loc_1047A9A  +
inc edi  +
cmp edi [esi+14h] +
jnz loc_1047A50  +
mov eax [ebx+0C4h] +
test eax eax +
jz loc_1047AC3  +
lea ecx [ebp+var_24] +
call eax  +
test eax eax +
jz loc_1047AD8  +
mov [ebp+var_EC] eax +
mov [ebx+18h] eax +
xor edi edi +
mov byte ptr [ebp+arg_0+3] 0 +
inc edi  +
push edi  +
lea eax [ebp+var_24] +
push eax  +
lea eax [ebp+var_104] +
push eax  +
call sub_10469D6  +
test eax eax +
jge loc_1047A09  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
push 0  +
push 0  +
push 13DEh  +
push 0C0150021h  +
call sub_104450C  +
jmp loc_1047ABC  +
push 0  +
push 0  +
push 13E8h  +
jmp loc_1047ACC  +
***
jmp ds:_purecall  +
***
or eax eax +
jnz loc_1047B31  +
mov ecx [esp+arg_8] +
mov eax [esp+arg_4] +
xor edx edx +
div  ecx +
mov eax [esp+arg_0] +
div  ecx +
mov eax edx +
xor edx edx +
jmp loc_1047B81  +
mov ecx eax +
mov ebx [esp+arg_8] +
mov edx [esp+arg_4] +
mov eax [esp+arg_0] +
shr ecx 1 +
rcr ebx 1 +
shr edx 1 +
rcr eax 1 +
or ecx ecx +
jnz loc_1047B3F  +
div  ebx +
mov ecx eax +
mul  [esp+arg_C] +
xchg eax ecx +
mul  [esp+arg_8] +
add edx ecx +
jb loc_1047B6A  +
cmp edx [esp+arg_4] +
ja loc_1047B6A  +
jb loc_1047B72  +
cmp eax [esp+arg_0] +
jbe loc_1047B72  +
sub eax [esp+arg_8] +
sbb edx [esp+arg_C] +
sub eax [esp+arg_0] +
sbb edx [esp+arg_4] +
neg edx  +
neg eax  +
sbb edx 0 +
pop ebx  +
retn 10h  +
***
and al 89h +
add al 0 +
adc al 89h +
add al 0 +
add [ecx-770FFFFCh] cl +
add al 0 +
setalc   +
mov [eax+eax] al +
retn 488h  +
***
retf   +
***
