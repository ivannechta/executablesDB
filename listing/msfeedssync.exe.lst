mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push 0Ah  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
call ds:wcstoul  +
mov ecx [ebp+arg_4] +
add esp 0Ch +
mov [ecx] eax +
test eax eax +
jz loc_100134A  +
xor eax eax +
jmp locret_1001386  +
mov ecx [ebp+arg_0] +
mov eax offset dword_100110C +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1001378  +
test dx dx +
jz loc_1001374  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1001378  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_1001352  +
xor eax eax +
jmp loc_100137D  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
neg eax  +
sbb eax eax +
and eax 8007000Dh +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
cmp [ebp+lptstrFilename] 0 +
push ebx  +
push esi  +
push edi  +
push 4  +
pop esi  +
jnz loc_10015AD  +
mov edi [ebp+arg_0] +
mov ecx offset aSync +
mov eax edi +
mov dx [eax] +
or ebx 0FFFFFFFFh +
cmp dx [ecx] +
jnz loc_10013DA  +
test dx dx +
jz loc_10013D6  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_10013DA  +
add eax esi +
add ecx esi +
test dx dx +
jnz loc_10013B3  +
xor eax eax +
jmp loc_10013DE  +
sbb eax eax +
sbb eax ebx +
test eax eax +
jnz loc_10013ED  +
mov eax [ebp+arg_8] +
and dword ptr [eax] 0 +
jmp loc_10015A3  +
mov ecx offset aSchedule +
mov eax edi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1001418  +
test dx dx +
jz loc_1001414  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1001418  +
add eax esi +
add ecx esi +
test dx dx +
jnz loc_10013F4  +
xor eax eax +
jmp loc_100141C  +
sbb eax eax +
sbb eax ebx +
test eax eax +
jnz loc_100142E  +
mov eax [ebp+arg_8] +
mov dword ptr [eax] 2 +
jmp loc_10015A3  +
mov ecx offset aEnable +
mov eax edi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1001459  +
test dx dx +
jz loc_1001455  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1001459  +
add eax esi +
add ecx esi +
test dx dx +
jnz loc_1001435  +
xor eax eax +
jmp loc_100145D  +
sbb eax eax +
sbb eax ebx +
test eax eax +
jnz loc_100146F  +
mov eax [ebp+arg_8] +
mov dword ptr [eax] 3 +
jmp loc_10015A3  +
mov ecx offset aDisable +
mov eax edi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100149A  +
test dx dx +
jz loc_1001496  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100149A  +
add eax esi +
add ecx esi +
test dx dx +
jnz loc_1001476  +
xor eax eax +
jmp loc_100149E  +
sbb eax eax +
sbb eax ebx +
test eax eax +
jnz loc_10014AC  +
mov eax [ebp+arg_8] +
mov [eax] esi +
jmp loc_10015A3  +
mov ecx offset aForcesync +
mov eax edi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_10014D7  +
test dx dx +
jz loc_10014D3  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_10014D7  +
add eax esi +
add ecx esi +
test dx dx +
jnz loc_10014B3  +
xor eax eax +
jmp loc_10014DB  +
sbb eax eax +
sbb eax ebx +
test eax eax +
jnz loc_10014ED  +
mov eax [ebp+arg_8] +
mov dword ptr [eax] 1 +
jmp loc_10015A3  +
mov ecx offset aRebuild +
mov eax edi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1001518  +
test dx dx +
jz loc_1001514  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1001518  +
add eax esi +
add ecx esi +
test dx dx +
jnz loc_10014F4  +
xor eax eax +
jmp loc_100151C  +
sbb eax eax +
sbb eax ebx +
test eax eax +
jnz loc_100152B  +
mov eax [ebp+arg_8] +
mov dword ptr [eax] 5 +
jmp loc_10015A3  +
mov ecx offset aDiag +
mov eax edi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1001556  +
test dx dx +
jz loc_1001552  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1001556  +
add eax esi +
add ecx esi +
test dx dx +
jnz loc_1001532  +
xor eax eax +
jmp loc_100155A  +
sbb eax eax +
sbb eax ebx +
test eax eax +
jnz loc_1001569  +
mov eax [ebp+arg_8] +
mov dword ptr [eax] 7 +
jmp loc_10015A3  +
mov ecx offset aUninstall +
mov eax edi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1001594  +
test dx dx +
jz loc_1001590  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1001594  +
add eax esi +
add ecx esi +
test dx dx +
jnz loc_1001570  +
xor eax eax +
jmp loc_1001598  +
sbb eax eax +
sbb eax ebx +
test eax eax +
jz loc_10015FA  +
mov [ebp+var_4] 80070667h +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
mov eax [ebp+arg_0] +
mov edx offset aUninstall +
mov cx [eax] +
cmp cx [edx] +
jnz loc_10015D9  +
test cx cx +
jz loc_10015D5  +
mov cx [eax+2] +
cmp cx [edx+2] +
jnz loc_10015D9  +
add eax esi +
add edx esi +
test cx cx +
jnz loc_10015B5  +
xor eax eax +
jmp loc_10015DE  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_100159C  +
push 25h  +
call ds:IsOS  +
test eax eax +
jnz loc_1001605  +
push [ebp+lptstrFilename]  +
call sub_100293F  +
test al al +
jz loc_1001605  +
mov eax [ebp+arg_8] +
mov dword ptr [eax] 8 +
jmp loc_10015A3  +
mov eax [ebp+arg_8] +
mov dword ptr [eax] 9 +
jmp loc_10015A3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
mov eax dword_1003000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_10] +
mov edx [ebp+arg_4] +
mov [ebp+var_1C] eax +
mov eax [ebp+arg_14] +
mov [ebp+var_24] eax +
mov eax [ebp+arg_18] +
push ebx  +
mov ebx [ebp+pclsid] +
mov [ebp+var_20] eax +
mov eax [ebp+arg_1C] +
push esi  +
push edi  +
mov edi [ebp+lpsz] +
mov [ebp+var_18] eax +
mov eax [ebp+arg_0] +
mov ecx offset aProcessenclosu +
mov si [eax] +
cmp si [ecx] +
jnz loc_1001679  +
test si si +
jz loc_1001675  +
mov si [eax+2] +
cmp si [ecx+2] +
jnz loc_1001679  +
add eax 4 +
add ecx 4 +
test si si +
jnz loc_1001653  +
xor eax eax +
jmp loc_100167E  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_10016CF  +
mov esi ds:CLSIDFromString +
push ebx  +
push edi  +
mov dword ptr [edx] 6 +
call esi  +
mov ecx eax +
test ecx ecx +
jl loc_10016D4  +
push [ebp+var_24]  +
push [ebp+var_1C]  +
call sub_1001325  +
mov ecx eax +
test ecx ecx +
jl loc_10016D4  +
push [ebp+var_18]  +
push [ebp+var_20]  +
call esi  +
mov ecx eax +
test ecx ecx +
jge loc_10016D4  +
and [ebp+var_14] 0 +
xor eax eax +
lea edi [ebp+var_10] +
stos   +
stos   +
stos   +
mov edi [ebp+var_18] +
lea esi [ebp+var_14] +
movs   +
movs   +
movs   +
movs   +
jmp loc_10016D4  +
mov ecx 80070667h +
mov eax ecx +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001C4B  +
leave   +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp [ebp+arg_0] 0 +
push esi  +
jz loc_100176A  +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ebp+hMem] +
push eax  +
push 0  +
push [ebp+arg_0]  +
call sub_1002855  +
mov esi eax +
test esi esi +
jl loc_100176F  +
cmp [ebp+arg_0] 1 +
mov eax [ebp+hMem] +
jz loc_1001750  +
cmp [ebp+arg_0] 2 +
jz loc_100174B  +
cmp [ebp+arg_0] 4 +
jnz loc_1001744  +
push [ebp+arg_10]  +
push dword ptr [eax+0Ch]  +
push [ebp+arg_C]  +
push dword ptr [eax+8]  +
push [ebp+pclsid]  +
push dword ptr [eax+4]  +
push [ebp+arg_4]  +
push dword ptr [eax]  +
call sub_1001615  +
jmp loc_100175D  +
mov esi 80070667h +
jmp loc_100175F  +
mov ecx [eax+4] +
jmp loc_1001752  +
xor ecx ecx +
push [ebp+arg_4]  +
push ecx  +
push dword ptr [eax]  +
call sub_100138F  +
mov esi eax +
push [ebp+hMem]  +
call ds:LocalFree  +
jmp loc_100176F  +
mov esi 80070667h +
mov eax esi +
pop esi  +
leave   +
retn 14h  +
***
call ds:GetVersion  +
test eax eax +
jns loc_1001788  +
xor eax eax +
retn   +
movzx eax al +
retn   +
***
call sub_100177B  +
cmp eax 6 +
jb locret_10017C4  +
push offset ModuleName  +
call ds:GetModuleHandleW  +
test eax eax +
jz locret_10017C4  +
push offset ProcName  +
push eax  +
call ds:GetProcAddress  +
test eax eax +
jz locret_10017C4  +
push 0  +
push 0  +
push 1  +
push 0  +
call eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
mov eax dword_1003000 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_8] +
call sub_1001791  +
lea eax [ebp+var_24] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
lea eax [ebp+pclsid] +
push eax  +
lea eax [ebp+ppv] +
push eax  +
push esi  +
call sub_10016EC  +
mov esi eax +
test esi esi +
jl loc_10018EF  +
push 2  +
push 0  +
call ds:CoInitializeEx  +
mov esi eax +
test esi esi +
jl loc_10018EF  +
push ebx  +
mov ebx [ebp+ppv] +
lea eax [ebp+ppv] +
push eax  +
cmp ebx 6 +
jz loc_10018AF  +
push offset riid  +
push 1  +
push 0  +
push offset rclsid  +
call ds:CoCreateInstance  +
mov esi eax +
test esi esi +
jl loc_10018E8  +
cmp ebx 9 +
ja loc_10018A8  +
jmp ds:off_1001906[ebx*4]  +
push 0  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
jmp loc_10018DD  +
push 1  +
jmp loc_1001856  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
jmp loc_10018DD  +
push 1  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+1Ch]  +
jmp loc_10018DD  +
push 0  +
jmp loc_1001872  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push 1  +
push eax  +
call dword ptr [ecx+18h]  +
jmp loc_10018DD  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+20h]  +
jmp loc_10018DD  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+24h]  +
jmp loc_10018DD  +
xor esi esi +
jmp loc_10018DF  +
mov esi 80004001h +
jmp loc_10018DF  +
push offset stru_10011E8  +
push 1  +
push 0  +
push offset stru_1001274  +
call ds:CoCreateInstance  +
mov esi eax +
test esi esi +
jl loc_10018E8  +
push [ebp+var_2C]  +
mov eax [ebp+ppv] +
mov ecx [eax] +
lea edx [ebp+pclsid] +
push edx  +
lea edx [ebp+var_24] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
mov eax [ebp+ppv] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
call ds:CoUninitialize  +
pop ebx  +
mov ecx [ebp+var_4] +
xor eax eax +
test esi esi +
setl al  +
xor ecx ebp +
pop esi  +
call sub_1001C4B  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_100194F  +
test eax eax +
jnz loc_1001954  +
mov ecx [esi] +
test ecx ecx +
jz loc_100194C  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_1001940  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_1003344 +
push offset dword_1003334  +
push dword_1003340  +
mov dword_1003334 eax +
push offset unk_1003324  +
push offset unk_1003328  +
push offset unk_1003320  +
call ds:__wgetmainargs  +
add esp 14h +
mov dword_1003330 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+var_1C] ebx +
mov [ebp+ms_exc.disabled] ebx +
lea eax [ebp+StartupInfo] +
push eax  +
call ds:GetStartupInfoW  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [ebp+ms_exc.disabled] 1 +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp+var_20] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
cmp eax ebx +
jz loc_10019F7  +
cmp eax esi +
jnz loc_10019EA  +
xor esi esi +
inc esi  +
mov [ebp+var_20] esi +
jmp loc_10019FA  +
push 3E8h  +
call ds:Sleep  +
jmp loc_10019D1  +
xor esi esi +
inc esi  +
mov eax dword_1003678 +
cmp eax esi +
jnz loc_1001A0D  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_1001A3C  +
mov eax dword_1003678 +
test eax eax +
jnz loc_1001A36  +
mov dword_1003678 esi +
push offset dword_10010E0  +
push offset dword_10010D4  +
call sub_1001933  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1001A3C  +
jmp loc_1001B60  +
mov dword_100333C esi +
mov eax dword_1003678 +
cmp eax esi +
jnz loc_1001A60  +
push offset dword_10010D0  +
push offset dword_10010C8  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_1003678 2 +
cmp [ebp+var_20] ebx +
jnz loc_1001A6D  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_1003684 ebx +
jz loc_1001A8E  +
push offset dword_1003684  +
call sub_1002039  +
pop ecx  +
test eax eax +
jz loc_1001A8E  +
push ebx  +
push 2  +
push ebx  +
call dword_1003684  +
mov eax ds:_wcmdln +
cmp [eax] ebx +
jz loc_1001B60  +
mov eax [eax] +
mov [ebp+var_24] eax +
movzx ecx word ptr [eax] +
cmp cx 20h +
ja $LN58  +
cmp cx bx +
jz loc_1001AB3  +
cmp [ebp+var_1C] ebx +
jnz $LN58  +
movzx ecx word ptr [eax] +
cmp cx bx +
jz loc_1001AC8  +
cmp cx 20h +
ja loc_1001AC8  +
inc eax  +
inc eax  +
mov [ebp+var_24] eax +
jmp loc_1001AB3  +
test byte ptr [ebp+StartupInfo.dwFlags] 1 +
jz loc_1001AD4  +
movzx ecx [ebp+StartupInfo.wShowWindow] +
jmp loc_1001AD7  +
push 0Ah  +
pop ecx  +
push ecx  +
push eax  +
push ebx  +
push 1000000h  +
call _wWinMain@16  +
mov dword_1003338 eax +
cmp dword_100332C ebx +
jnz $LN59  +
push eax  +
call ds:exit  +
cmp cx 22h +
jnz loc_1001B09  +
xor ecx ecx +
cmp [ebp+var_1C] ebx +
setz cl  +
mov [ebp+var_1C] ecx +
inc eax  +
inc eax  +
jmp loc_1001A9D  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-28h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-28h] +
mov dword_1003338 eax +
xor ebx ebx +
cmp dword_100332C ebx +
jnz $LN59  +
push eax  +
call ds:_exit  +
cmp dword_100333C ebx +
jnz loc_1001B4B  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_1003338 +
jmp loc_1001B6C  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_1001B89  +
xor eax eax +
jmp loc_1001BD6  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_1001B85  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_1001BC3  +
cmp ecx 20Bh +
jnz loc_1001B85  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_1001B85  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_1001BD1  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_1001B85  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 2  +
mov dword_100332C eax +
call sub_10021D2  +
push eax  +
call ds:__set_app_type  +
or dword_1003670 0FFFFFFFFh +
or dword_1003674 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_100334C +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_1003348 +
mov [eax] ecx +
call sub_1002164  +
cmp dword_1003018 0 +
jnz loc_1001C2F  +
push offset sub_1002164  +
call ds:__setusermatherr  +
pop ecx  +
call sub_100214C  +
xor eax eax +
retn   +
***
call sub_1002211  +
jmp ___tmainCRTStartup  +
***
cmp ecx dword_1003000 +
jnz loc_1001C56  +
retn 0  +
jmp loc_10022A7  +
***
push edi  +
mov ebp [ecx] +
push edi  +
mov ebp edx +
push ebx  +
push edx  +
push ecx  +
push [esp+8+arg_4]  +
call __local_unwind4  +
add esp 0Ch +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
mov esi [ebx+8] +
xor esi [eax] +
push edi  +
mov eax [esi] +
mov [ebp+var_1] 0 +
mov [ebp+var_C] 1 +
lea edi [ebx+10h] +
cmp eax 0FFFFFFFEh +
jz loc_1001DF6  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call [ebp+arg_4]  +
mov ecx [esi+0Ch] +
mov edx [esi+8] +
add ecx edi +
xor ecx [edx+edi] +
call [ebp+arg_4]  +
mov eax [ebp+arg_8] +
test byte ptr [eax+4] 66h +
jnz loc_1001F23  +
lea ecx [ebp+var_18] +
mov [ebx-4] ecx +
mov ebx [ebx+0Ch] +
mov [ebp+var_18] eax +
mov eax [ebp+arg_10] +
mov [ebp+var_14] eax +
cmp ebx 0FFFFFFFEh +
jz loc_1001E88  +
jmp loc_1001E30  +
lea edx [ebx+ebx*2] +
mov ecx [esi+edx*4+14h] +
lea eax [esi+edx*4+10h] +
mov [ebp+var_10] eax +
mov eax [eax] +
mov [ebp+var_8] eax +
test ecx ecx +
jz loc_1001E5B  +
mov edx edi +
call @_EH4_CallFilterFunc@8  +
mov [ebp+var_1] 1 +
test eax eax +
jl loc_1001E92  +
jg loc_1001E9B  +
mov eax [ebp+var_8] +
mov ebx eax +
cmp eax 0FFFFFFFEh +
jnz loc_1001E30  +
cmp [ebp+var_1] 0 +
jz loc_1001E88  +
mov eax [esi] +
cmp eax 0FFFFFFFEh +
jz loc_1001E7A  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call [ebp+arg_4]  +
mov ecx [esi+0Ch] +
mov edx [esi+8] +
add ecx edi +
xor ecx [edx+edi] +
call [ebp+arg_4]  +
mov eax [ebp+var_C] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
mov [ebp+var_C] 0 +
jmp loc_1001E68  +
mov eax [ebp+arg_8] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_1001ECF  +
cmp dword_1003680 0 +
jz loc_1001ECF  +
push offset dword_1003680  +
call sub_1002039  +
add esp 4 +
test eax eax +
jz loc_1001ECF  +
mov ecx [ebp+arg_8] +
push 1  +
push ecx  +
call dword_1003680  +
add esp 8 +
mov ecx [ebp+arg_C] +
call @_EH4_GlobalUnwind@4  +
mov eax [ebp+arg_C] +
cmp [eax+0Ch] ebx +
jz loc_1001EF0  +
mov edx [ebp+arg_0] +
push edx  +
push edi  +
mov edx ebx +
mov ecx eax +
call @_EH4_LocalUnwind@16  +
mov eax [ebp+arg_C] +
mov ecx [ebp+var_8] +
mov [eax+0Ch] ecx +
mov eax [esi] +
cmp eax 0FFFFFFFEh +
jz loc_1001F08  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call [ebp+arg_4]  +
mov ecx [esi+0Ch] +
mov edx [esi+8] +
add ecx edi +
xor ecx [edx+edi] +
call [ebp+arg_4]  +
mov eax [ebp+var_10] +
mov ecx [eax+8] +
mov edx edi +
call @_EH4_TransferToHandler@8  +
mov edx 0FFFFFFFEh +
cmp [ebx+0Ch] edx +
jz loc_1001E88  +
mov ecx [ebp+arg_0] +
push ecx  +
push edi  +
mov ecx ebx +
call @_EH4_LocalUnwind@16  +
jmp loc_1001E68  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_1001F84  +
cmp dword ptr [eax+10h] 3 +
jnz loc_1001F84  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_1001F7E  +
cmp eax 19930521h +
jz loc_1001F7E  +
cmp eax 19930522h +
jz loc_1001F7E  +
cmp eax 1994000h +
jnz loc_1001F84  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset dword_1001F44+3)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_1001FC6  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_1001FC2  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_100202D  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1002025  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_100202F  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_1002015  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_1001FB0  +
pop ecx  +
test eax eax +
jz loc_1002096  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_1001FF0  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1002096  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_100209F  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_1001C4B  +
push offset dword_1003000  +
call sub_1001DC0  +
add esp 18h +
pop ebp  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_10021C5  +
cmp ecx 0FFFFFFFFh +
jz loc_10021C5  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_10021BE  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_10021BE  +
cmp edx 10000000h +
jnb loc_10021BE  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_10021BE  +
jmp loc_10021B9  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_1002207  +
push eax  +
call sub_100216C  +
test eax eax +
jz loc_1002207  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_10021FC  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_1002207  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1003000 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_1002243  +
test eax ebx +
jz loc_1002243  +
not eax  +
mov dword_1003004 eax +
jmp loc_100229E  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_100228A  +
test dword_1003000 ebx +
jnz loc_100228F  +
mov esi 0BB40E64Fh +
mov dword_1003000 esi +
not esi  +
mov dword_1003004 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_1003450 eax +
mov dword_100344C ecx +
mov dword_1003448 edx +
mov dword_1003444 ebx +
mov dword_1003440 esi +
mov dword_100343C edi +
mov word_1003468 ss +
mov word_100345C cs +
mov word_1003438 ds +
mov word_1003434 es +
mov word_1003430 fs +
mov word_100342C gs +
pushf   +
pop dword_1003460  +
mov eax [ebp+0] +
mov dword_1003454 eax +
mov eax [ebp+4] +
mov dword_1003458 eax +
lea eax [ebp+8] +
mov dword_1003464 eax +
mov eax [ebp-320h] +
mov dword_10033A0 10001h +
mov eax dword_1003458 +
mov dword_100335C eax +
mov dword_1003350 0C0000409h +
mov dword_1003354 1 +
mov eax dword_1003000 +
mov [ebp-328h] eax +
mov eax dword_1003004 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
push esi  +
mov eax [esp+14h] +
or eax eax +
jnz loc_10023C1  +
mov ecx [esp+10h] +
mov eax [esp+0Ch] +
xor edx edx +
div  ecx +
mov ebx eax +
mov eax [esp+8] +
div  ecx +
mov esi eax +
mov eax ebx +
mul  dword ptr [esp+10h] +
mov ecx eax +
mov eax esi +
mul  dword ptr [esp+10h] +
add edx ecx +
jmp loc_1002408  +
mov ecx eax +
mov ebx [esp+10h] +
mov edx [esp+0Ch] +
mov eax [esp+8] +
shr ecx 1 +
rcr ebx 1 +
shr edx 1 +
rcr eax 1 +
or ecx ecx +
jnz loc_10023CF  +
div  ebx +
mov esi eax +
mul  dword ptr [esp+14h] +
mov ecx eax +
mov eax [esp+10h] +
mul  esi +
add edx ecx +
jb loc_10023FD  +
cmp edx [esp+0Ch] +
ja loc_10023FD  +
jb loc_1002406  +
cmp eax [esp+8] +
jbe loc_1002406  +
dec esi  +
sub eax [esp+10h] +
sbb edx [esp+14h] +
xor ebx ebx +
sub eax [esp+8] +
sbb edx [esp+0Ch] +
neg edx  +
neg eax  +
sbb edx 0 +
mov ecx edx +
mov edx ebx +
mov ebx ecx +
mov ecx eax +
mov eax esi +
pop esi  +
retn 10h  +
***
mov ebx offset unk_1003020 +
retn   +
***
mov eax [esp+8] +
mov ecx [esp+10h] +
or ecx eax +
mov ecx [esp+0Ch] +
jnz loc_1002489  +
mov eax [esp+4] +
mul  ecx +
retn 10h  +
***
push ebx  +
mul  ecx +
mov ebx eax +
mov eax [esp+8] +
mul  dword ptr [esp+14h] +
add ebx eax +
mov eax [esp+8] +
mul  ecx +
add edx ebx +
pop ebx  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 20h  +
pop eax  +
cmp ax [ebp+arg_0] +
jz loc_10024C4  +
push 9  +
pop eax  +
cmp ax [ebp+arg_0] +
jz loc_10024C4  +
xor eax eax +
jmp loc_10024C7  +
xor eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi eax +
movzx ecx word ptr [esi] +
push 22h  +
pop edi  +
mov eax edi +
cmp ax cx +
jnz loc_1002517  +
lea edx [esi+2] +
movzx ecx word ptr [edx] +
push ebx  +
mov ebx edi +
mov eax edx +
cmp bx cx +
jz loc_100250C  +
movzx ecx cx +
xor ebx ebx +
cmp bx cx +
jz loc_100250C  +
inc eax  +
inc eax  +
movzx ecx word ptr [eax] +
mov ebx edi +
cmp bx cx +
jnz loc_10024F9  +
pop ebx  +
cmp di [eax] +
jnz loc_1002529  +
lea ecx [eax+2] +
jmp loc_100252B  +
mov edx esi +
mov eax esi +
cmp cx 20h +
jbe loc_1002529  +
inc eax  +
inc eax  +
cmp word ptr [eax] 20h +
ja loc_1002521  +
mov ecx eax +
cmp edx eax +
jnb loc_1002562  +
mov edi [ebp+arg_8] +
sub ecx esi +
mov esi [ebp+arg_0] +
sar ecx 1 +
sub eax edx +
sar eax 1 +
mov [esi] ecx +
mov ecx [ebp+arg_4] +
inc eax  +
mov [ecx] eax +
test edi edi +
jz loc_100255E  +
lea esi [eax+eax-2] +
push esi  +
push edx  +
push edi  +
call memcpy  +
add esp 0Ch +
xor eax eax +
mov [esi+edi] ax +
xor eax eax +
jmp loc_1002567  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
ja loc_1002590  +
mov eax [ebp+arg_0] +
jb loc_1002587  +
cmp eax 0FFFFFFFFh +
ja loc_1002590  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_100259B  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_4] +
add eax ecx +
cmp eax ecx +
jb loc_10025BE  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_10025C9  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [esi] +
movzx eax word ptr [edi+ecx*2] +
push ebx  +
push eax  +
xor edx edx +
xor bl bl +
call sub_10024A9  +
test al al +
jz loc_100260D  +
inc bl  +
push esi  +
push 1  +
push ecx  +
call sub_10025A4  +
mov edx eax +
test edx edx +
jl loc_100262F  +
mov ecx [esi] +
movzx eax word ptr [edi+ecx*2] +
push eax  +
call sub_10024A9  +
test al al +
jnz loc_10025EE  +
mov eax [esi] +
xor ecx ecx +
cmp cx [edi+eax*2] +
jz loc_100261F  +
mov eax [ebp+arg_0] +
mov byte ptr [eax] 1 +
jmp loc_100262F  +
test bl bl +
jnz loc_100262A  +
mov eax [ebp+arg_0] +
mov [eax] bl +
jmp loc_100262F  +
mov edx 80070057h +
mov eax edx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
xor eax eax +
mov [ebx] eax +
mov [ebp+var_1] al +
push esi  +
mov ecx [edi] +
mov edx [ebp+arg_0] +
xor esi esi +
inc esi  +
cmp [ebp+var_1] 0 +
mov [ebp+var_8] esi +
jnz loc_100267B  +
movzx edx word ptr [edx+ecx*2] +
movzx ecx dx +
sub ecx 0 +
jz loc_10026DB  +
sub ecx 9 +
jz loc_10026DB  +
sub ecx 17h +
jz loc_10026DB  +
dec ecx  +
dec ecx  +
jnz loc_10026A7  +
mov [ebp+var_1] 1 +
jmp loc_10026C2  +
lea ecx [edx+ecx*2] +
movzx edx word ptr [ecx] +
movzx esi dx +
test esi esi +
jz loc_10026A2  +
cmp esi 22h +
jnz loc_10026A7  +
cmp si [ecx+2] +
jz loc_1002699  +
mov [ebp+var_1] 0 +
jmp loc_10026C2  +
mov [ebp+var_8] 2 +
jmp loc_10026A7  +
mov eax 80070057h +
test eax eax +
jl loc_10026F7  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_10026B8  +
mov ecx [ebx] +
mov [eax+ecx*2] dx +
push ebx  +
push 1  +
push dword ptr [ebx]  +
call sub_10025A4  +
test eax eax +
jl loc_10026F7  +
push edi  +
push [ebp+var_8]  +
push dword ptr [edi]  +
call sub_10025A4  +
test eax eax +
jge loc_100264A  +
jmp loc_10026F7  +
test eax eax +
jl loc_10026F7  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_10026EE  +
mov ecx [ebx] +
xor edx edx +
mov [eax+ecx*2] dx +
push ebx  +
push esi  +
push dword ptr [ebx]  +
call sub_10025A4  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov edi ecx +
movzx ecx word ptr [ebx] +
push ecx  +
mov esi eax +
call sub_10024A9  +
test al al +
jnz loc_100280B  +
xor eax eax +
mov [ebp+var_8] edi +
mov [ebp+var_10] esi +
mov byte ptr [ebp+var_1] 1 +
cmp [ebp+arg_4] eax +
jz loc_1002782  +
push esi  +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
mov eax ebx +
call sub_10024D0  +
test eax eax +
jl loc_1002778  +
mov eax [ebp+arg_4] +
test edi edi +
jz loc_100275E  +
mov [edi] esi +
add edi 4 +
lea ecx [esi+eax*2] +
mov [ebp+var_8] edi +
mov [ebp+var_10] ecx +
mov [ebp+var_C] eax +
lea eax [ebp+var_1] +
push eax  +
lea esi [ebp+var_14] +
mov edi ebx +
mov [ebp+arg_4] 1 +
call sub_10025D2  +
jmp loc_1002794  +
or [ebp+arg_4] 0FFFFFFFFh +
or [ebp+var_C] 0FFFFFFFFh +
jmp loc_1002794  +
xor edx edx +
cmp dx cx +
mov [ebp+var_14] eax +
mov [ebp+arg_4] eax +
mov [ebp+var_C] eax +
setnz byte ptr [ebp+var_1]  +
test eax eax +
jl loc_1002810  +
cmp byte ptr [ebp+var_1] 0 +
jz loc_10027F5  +
push [ebp+var_10]  +
lea ebx [ebp+var_18] +
push [ebp+arg_0]  +
lea edi [ebp+var_14] +
call sub_100263B  +
test eax eax +
jl loc_1002810  +
cmp [ebp+var_8] 0 +
mov ecx [ebp+var_18] +
jz loc_10027CE  +
mov eax [ebp+var_10] +
mov edx [ebp+var_8] +
add [ebp+var_8] 4 +
mov [edx] eax +
lea eax [eax+ecx*2] +
mov [ebp+var_10] eax +
inc [ebp+arg_4]  +
lea eax [ebp+var_C] +
push eax  +
push ecx  +
push [ebp+var_C]  +
call sub_10025A4  +
test eax eax +
jl loc_1002810  +
mov edi [ebp+arg_0] +
lea eax [ebp+var_1] +
push eax  +
lea esi [ebp+var_14] +
call sub_10025D2  +
test eax eax +
jge loc_1002798  +
test eax eax +
jl loc_1002810  +
mov ecx [ebp+arg_8] +
mov edx [ebp+arg_4] +
mov [ecx] edx +
mov ecx [ebp+arg_C] +
mov edx [ebp+var_C] +
mov [ecx] edx +
jmp loc_1002810  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+uBytes] 0FFFFFFFFh +
ja loc_1002847  +
push [ebp+uBytes]  +
push [ebp+uFlags]  +
call ds:LocalAlloc  +
test eax eax +
jz loc_1002840  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_100284C  +
mov eax 8007000Eh +
jmp loc_100284C  +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+arg_8] +
push ebx  +
xor ebx ebx +
mov [eax] ebx +
mov eax [ebp+arg_C] +
push esi  +
mov [eax] ebx +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_4]  +
xor eax eax +
push [ebp+arg_0]  +
xor ecx ecx +
mov [ebp+var_4] ebx +
mov [ebp+var_8] ebx +
call sub_1002701  +
mov esi eax +
cmp esi ebx +
jl loc_1002927  +
lea eax [ebp+var_C] +
push eax  +
mov eax [ebp+var_4] +
push 4  +
pop ecx  +
mul  ecx +
push edx  +
push eax  +
call sub_1002572  +
mov esi eax +
cmp esi ebx +
jl loc_1002927  +
lea eax [ebp+uBytes] +
push eax  +
mov eax [ebp+var_8] +
push 2  +
pop ecx  +
mul  ecx +
push edx  +
push eax  +
call sub_1002572  +
mov esi eax +
cmp esi ebx +
jl loc_1002927  +
lea eax [ebp+uBytes] +
push eax  +
push [ebp+uBytes]  +
push [ebp+var_C]  +
call sub_10025A4  +
mov esi eax +
cmp esi ebx +
jl loc_1002927  +
lea eax [ebp+uBytes] +
push eax  +
push [ebp+uBytes]  +
push ebx  +
call sub_100281C  +
mov esi eax +
cmp esi ebx +
jl loc_1002927  +
push edi  +
mov edi [ebp+uBytes] +
lea eax [ebp+var_8] +
push eax  +
mov eax [ebp+var_C] +
lea ecx [ebp+var_4] +
push ecx  +
push [ebp+arg_4]  +
add eax edi +
push [ebp+arg_0]  +
mov ecx edi +
call sub_1002701  +
mov esi eax +
cmp esi ebx +
jl loc_100291F  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_C] +
mov [eax] edi +
mov eax [ebp+var_4] +
mov [ecx] eax +
jmp loc_1002926  +
push edi  +
call ds:LocalFree  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
lea eax [ebp+dwHandle] +
push eax  +
push [ebp+lptstrFilename]  +
xor ebx ebx +
call GetFileVersionInfoSizeW  +
mov esi eax +
cmp esi ebx +
jz loc_10029B1  +
push edi  +
push esi  +
push 40h  +
call ds:LocalAlloc  +
mov edi eax +
cmp edi ebx +
jz loc_10029B0  +
push edi  +
push esi  +
push [ebp+dwHandle]  +
push [ebp+lptstrFilename]  +
call GetFileVersionInfoW  +
test eax eax +
jz loc_10029A9  +
lea eax [ebp+puLen] +
push eax  +
lea eax [ebp+lpBuffer] +
push eax  +
push offset SubBlock  +
push edi  +
call VerQueryValueW  +
test eax eax +
jz loc_10029A9  +
cmp [ebp+puLen] ebx +
jz loc_10029A9  +
mov ecx [ebp+lpBuffer] +
mov eax 6FFFFh +
cmp eax [ecx+8] +
sbb bl bl +
inc bl  +
push edi  +
call ds:LocalFree  +
pop edi  +
pop esi  +
mov al bl +
pop ebx  +
leave   +
retn 4  +
***
