retf 0  +
***
retn   +
***
retn 0  +
***
retf   +
***
add bh bh +
xor edi edi +
adc eax offset SysFreeString +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
add eax eax +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
add eax eax +
push eax  +
push [ebp+arg_0]  +
call sub_1021264  +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push edi  +
xor edi edi +
mov [ebp+hKey] edi +
mov dword ptr [ebp+Data] edi +
cmp esi edi +
jnz loc_1014366  +
push 57h  +
pop eax  +
jmp loc_10143E7  +
lea eax [ebp+var_C] +
push eax  +
push edi  +
mov [esi] edi +
call sub_1033F85  +
test eax eax +
jz loc_101437D  +
mov eax 65Bh +
jmp loc_10143E7  +
xor eax eax +
inc eax  +
cmp [ebp+var_C] eax +
jnz loc_1014389  +
mov [esi] eax +
jmp loc_10143E5  +
cmp [ebp+var_C] 2 +
jnz loc_10143E5  +
mov [esi] eax +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push edi  +
push offset SubKey  +
push 80000002h  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_10143E5  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
push edi  +
push edi  +
push offset ValueName  +
push [ebp+hKey]  +
mov [ebp+cbData] 4 +
call ds:RegQueryValueExW  +
test eax eax +
jz loc_10143D5  +
mov dword ptr [ebp+Data] edi +
push [ebp+hKey]  +
call ds:RegCloseKey  +
cmp dword ptr [ebp+Data] edi +
jz loc_10143E5  +
mov [esi] edi +
xor eax eax +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
dec eax  +
dec eax  +
jz loc_1014402  +
pop ebp  +
jmp ds:DefWindowProcW  +
***
push 0  +
call ds:PostQuitMessage  +
xor eax eax +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov [ebp+8] eax +
push offset dword_105A998  +
lea eax [ebp+8] +
push eax  +
call sub_10212E6  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_101446C  +
cmp eax 0Ch +
jz loc_1014465  +
cmp eax 16h +
jz loc_101445E  +
cmp eax 22h +
jz loc_101445E  +
cmp eax 50h +
jz loc_101446C  +
push 80004005h  +
call loc_1014415  +
push 80070057h  +
jmp loc_1014459  +
push 8007000Eh  +
jmp loc_1014459  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1014323  +
add esp 10h +
push eax  +
call sub_1014434  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ax word_1063004 +
test ax ax +
jz loc_10144CE  +
movzx eax ax +
mov edx offset word_1063004 +
cmp ax [ebp+arg_C] +
jz loc_10144C9  +
add edx 0Ch +
movzx ecx word ptr [edx] +
movzx eax cx +
test cx cx +
jnz loc_10144B3  +
jmp loc_10144CE  +
mov eax [ebp+arg_10] +
inc dword ptr [eax]  +
xor eax eax +
inc eax  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+hResInfo]  +
push [ebp+hModule]  +
call ds:LoadResource  +
test eax eax +
jz loc_1014533  +
push esi  +
push eax  +
call ds:LockResource  +
mov esi eax +
test esi esi +
jz loc_1014525  +
push [ebp+hResInfo]  +
push [ebp+hModule]  +
call ds:SizeofResource  +
mov ecx [ebp+arg_8] +
add eax esi +
and ecx 0Fh +
jbe loc_1014521  +
cmp esi eax +
jnb loc_1014525  +
dec ecx  +
movzx edx word ptr [esi] +
lea esi [esi+edx*2+2] +
jnz loc_1014513  +
cmp esi eax +
jb loc_1014529  +
xor eax eax +
jmp loc_1014532  +
movzx eax word ptr [esi] +
neg eax  +
sbb eax eax +
and eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
shr eax 4 +
inc eax  +
movzx eax ax +
push 6  +
push eax  +
push [ebp+hModule]  +
call ds:FindResourceW  +
test eax eax +
jz loc_1014567  +
push [ebp+arg_4]  +
push eax  +
push [ebp+hModule]  +
call sub_10144DA  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push dword ptr [ebp+wLanguage]  +
shr eax 4 +
inc eax  +
movzx eax ax +
push eax  +
push 6  +
push [ebp+hModule]  +
call ds:FindResourceExW  +
test eax eax +
jz loc_101459E  +
push [ebp+arg_4]  +
push eax  +
push [ebp+hModule]  +
call sub_10144DA  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov esi offset unk_1064B34 +
push 0  +
mov ecx esi +
call sub_1020B1A  +
xor ebx ebx +
inc ebx  +
jmp loc_10145DB  +
push dword ptr [ebp+wLanguage]  +
push [ebp+arg_0]  +
push edi  +
call sub_1014570  +
test eax eax +
jnz loc_10145E8  +
push ebx  +
mov ecx esi +
call sub_1020B1A  +
inc ebx  +
mov edi eax +
test edi edi +
jnz loc_10145C2  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
mov eax edi +
jmp loc_10145E1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
xor esi esi +
inc esi  +
call ds:GetProcessWindowStation  +
test eax eax +
jnz loc_101460A  +
inc eax  +
jmp loc_1014629  +
lea ecx [ebp+nLengthNeeded] +
push ecx  +
push 0Ch  +
lea ecx [ebp+pvInfo] +
push ecx  +
push 1  +
push eax  +
call ds:GetUserObjectInformationW  +
test eax eax +
jz loc_1014627  +
mov esi [ebp+var_8] +
and esi 1 +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax dword_1063194 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
push edi  +
lea eax [ebp+hObject] +
push eax  +
push 20008h  +
mov [ebp+var_1C] ebx +
mov [ebp+hObject] ebx +
xor edi edi +
mov [ebp+ReturnLength] ebx +
mov [ebp+pSid] ebx +
mov [ebp+pIdentifierAuthority.Value] bl +
mov [ebp+pIdentifierAuthority.Value+1] bl +
mov [ebp+pIdentifierAuthority.Value+2] bl +
mov [ebp+pIdentifierAuthority.Value+3] bl +
mov [ebp+pIdentifierAuthority.Value+4] bl +
mov [ebp+pIdentifierAuthority.Value+5] 5 +
call ds:GetCurrentProcess  +
push eax  +
call ds:OpenProcessToken  +
test eax eax +
jz loc_10146F9  +
push esi  +
mov esi ds:GetTokenInformation +
lea eax [ebp+ReturnLength] +
push eax  +
push [ebp+ReturnLength]  +
push ebx  +
push 1  +
push [ebp+hObject]  +
call esi  +
call ds:GetLastError  +
cmp eax 7Ah +
jnz loc_10146F8  +
push [ebp+ReturnLength]  +
call sub_1021488  +
mov edi eax +
pop ecx  +
cmp edi ebx +
jz loc_10146F8  +
lea eax [ebp+ReturnLength] +
push eax  +
push [ebp+ReturnLength]  +
push edi  +
push 1  +
push [ebp+hObject]  +
call esi  +
test eax eax +
jz loc_10146F8  +
lea eax [ebp+pSid] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 12h  +
push 1  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
call ds:AllocateAndInitializeSid  +
test eax eax +
jz loc_10146F8  +
push [ebp+pSid]  +
push dword ptr [edi]  +
call ds:EqualSid  +
xor ecx ecx +
test eax eax +
setnz cl  +
inc ecx  +
mov [ebp+var_1C] ecx +
pop esi  +
cmp [ebp+pSid] ebx +
jz loc_1014707  +
push [ebp+pSid]  +
call ds:FreeSid  +
cmp edi ebx +
jz loc_1014712  +
push edi  +
call sub_10213A1  +
pop ecx  +
cmp [ebp+hObject] ebx +
pop edi  +
pop ebx  +
jz loc_1014722  +
push [ebp+hObject]  +
call ds:CloseHandle  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_1C] +
xor ecx ebp +
call sub_1021557  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_1014744  +
pop ebp  +
retn   +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1014747  +
sub eax edx +
sar eax 1 +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
add eax eax +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
add eax eax +
push eax  +
push [ebp+arg_0]  +
call sub_102156C  +
add esp 10h +
pop ebp  +
retn   +
***
push 8007000Eh  +
call loc_1014415  +
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_0]  +
call sub_10145A7  +
pop ebp  +
retn 4  +
***
test ecx ecx +
jz locret_10147C7  +
push esi  +
mov esi [ecx] +
push ecx  +
call sub_10213A1  +
pop ecx  +
mov ecx esi +
test esi esi +
jnz loc_10147B7  +
pop esi  +
retn   +
***
lea eax [ecx+0Ch] +
or edx 0FFFFFFFFh +
xadd [eax] edx +
dec edx  +
test edx edx +
jg locret_10147E6  +
mov eax [ecx] +
mov edx [eax] +
push ecx  +
mov ecx eax +
call dword ptr [edx+4]  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
mov eax [ebp+arg_0] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_101481D  +
test dx dx +
jz loc_1014819  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_101481D  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_10147F7  +
xor eax eax +
pop ebp  +
retn   +
sbb eax eax +
sbb eax 0FFFFFFFFh +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10218DC  +
neg eax  +
sbb eax eax +
pop ecx  +
not eax  +
and eax [ebp+arg_0] +
pop ecx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
push eax  +
push eax  +
push 0FFFFFFFFh  +
push [ebp+lpMultiByteStr]  +
push eax  +
push 3  +
call ds:MultiByteToWideChar  +
dec eax  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+cchWideChar]  +
push [ebp+lpWideCharStr]  +
push [ebp+cchMultiByte]  +
push [ebp+lpMultiByteStr]  +
push 0  +
push 3  +
call ds:MultiByteToWideChar  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
cmp eax 0FFFFFFFFh +
jnz loc_10148AE  +
mov eax [ebp+arg_8] +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_101489F  +
sub eax ecx +
sar eax 1 +
inc eax  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1014475  +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push esi  +
mov esi eax +
xor eax eax +
mov ecx edx +
test edx edx +
jz loc_10148E2  +
cmp [esi] ax +
jz loc_10148DE  +
inc esi  +
inc esi  +
dec edx  +
jnz loc_10148D4  +
test edx edx +
jnz loc_10148E7  +
mov eax 80070057h +
pop esi  +
test edi edi +
jz locret_10148F8  +
test eax eax +
jl loc_10148F5  +
sub ecx edx +
mov [edi] ecx +
retn   +
and dword ptr [edi] 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_8] +
or edx 0FFFFFFFFh +
sub edx eax +
cmp edx ecx +
jnb loc_1014919  +
mov eax 80070057h +
jmp loc_1014922  +
add eax ecx +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jnz loc_1014940  +
push 80004005h  +
call loc_1014415  +
push [ebp+arg_0]  +
push dword ptr [ecx]  +
call sub_10147EC  +
pop ecx  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi [ecx] +
mov ebx [esi-0Ch] +
sub esi 10h +
mov [ebp+var_8] ecx +
mov ecx [esi] +
mov eax [ecx] +
push edi  +
mov [ebp+var_4] ebx +
call dword ptr [eax+10h]  +
mov edx [eax] +
push 2  +
push [ebp+arg_0]  +
mov ecx eax +
call dword ptr [edx]  +
mov edi eax +
test edi edi +
jnz loc_101498A  +
call loc_1014782  +
mov eax [ebp+arg_0] +
cmp ebx eax +
jge loc_1014993  +
mov eax ebx +
inc eax  +
push eax  +
lea ecx [esi+10h] +
push ecx  +
push eax  +
lea ebx [edi+10h] +
push ebx  +
call sub_1014323  +
mov eax [ebp+var_4] +
add esp 10h +
mov ecx esi +
mov [edi+4] eax +
call sub_10147CD  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
mov [eax] ebx +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jl loc_10149E6  +
mov edx [ecx] +
cmp eax [edx-8] +
jg loc_10149E6  +
mov [edx-0Ch] eax +
mov ecx [ecx] +
xor edx edx +
mov [ecx+eax*2] dx +
pop ebp  +
retn 4  +
***
push 80070057h  +
call loc_1014415  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov ecx [esi] +
mov eax [ecx] +
push edi  +
call dword ptr [eax+10h]  +
lea edx [esi+0Ch] +
cmp dword ptr [edx] 0 +
jl loc_1014A1E  +
cmp eax [esi] +
jnz loc_1014A1E  +
xor eax eax +
mov edi esi +
inc eax  +
xadd [edx] eax +
jmp loc_1014A50  +
mov edx [eax] +
push 2  +
push dword ptr [esi+4]  +
mov ecx eax +
call dword ptr [edx]  +
mov edi eax +
test edi edi +
jnz loc_1014A34  +
call loc_1014782  +
mov eax [esi+4] +
mov [edi+4] eax +
mov eax [esi+4] +
inc eax  +
push eax  +
add esi 10h +
push esi  +
push eax  +
lea eax [edi+10h] +
push eax  +
call sub_1014323  +
add esp 10h +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push dword ptr [eax]  +
mov ecx [ebp+arg_0] +
call sub_101492B  +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push esi  +
mov esi ecx +
mov eax [esi] +
sub eax 10h +
cmp [eax+8] edx +
mov ecx [eax] +
jge loc_1014AA5  +
test edx edx +
jle loc_1014AA5  +
push edi  +
mov edi [ecx] +
push 2  +
push edx  +
push eax  +
call dword ptr [edi+8]  +
pop edi  +
test eax eax +
jnz loc_1014AAA  +
call loc_1014782  +
add eax 10h +
mov [esi] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
jmp loc_1014AD5  +
mov eax [esi] +
cmp eax edi +
jz loc_1014AF4  +
mov ecx [eax] +
mov [esi] ecx +
push eax  +
mov ecx esi +
call sub_1015A47  +
cmp [esi+8] edi +
ja loc_1014AC3  +
mov ecx [esi+0Ch] +
mov [esi] edi +
mov [esi+4] edi +
mov [esi+10h] edi +
cmp ecx edi +
jz loc_1014AF1  +
call sub_10147B2  +
mov [esi+0Ch] edi +
pop edi  +
pop esi  +
retn   +
***
push 80004005h  +
call loc_1014415  +
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
jmp loc_1014B20  +
mov eax [esi] +
cmp eax edi +
jz loc_1014B3F  +
mov ecx [eax] +
mov [esi] ecx +
push eax  +
mov ecx esi +
call sub_1015A7B  +
cmp [esi+8] edi +
ja loc_1014B0E  +
mov ecx [esi+0Ch] +
mov [esi] edi +
mov [esi+4] edi +
mov [esi+10h] edi +
cmp ecx edi +
jz loc_1014B3C  +
call sub_10147B2  +
mov [esi+0Ch] edi +
pop edi  +
pop esi  +
retn   +
***
push 80004005h  +
call loc_1014415  +
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_8]  +
and [ebp+var_4] 0 +
push [ebp+arg_4]  +
lea eax [ebp+var_4] +
push eax  +
call sub_1020D98  +
test eax eax +
jl loc_1014B96  +
push 4  +
push [ebp+var_4]  +
lea eax [ebp+var_4] +
push eax  +
call sub_10148FE  +
test eax eax +
jl loc_1014B96  +
push [ebp+var_4]  +
call sub_1021488  +
pop ecx  +
test eax eax +
jz loc_1014B96  +
mov ecx [ebp+arg_0] +
mov edx [ecx] +
mov [eax] edx +
mov [ecx] eax +
jmp locret_1014B98  +
xor eax eax +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
test edx edx +
jz loc_1014BB7  +
cmp edx 7FFFFFFFh +
jbe loc_1014BBC  +
mov eax 80070057h +
test eax eax +
jl loc_1014BD2  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_104F45B  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
push ebx  +
xor eax eax +
push esi  +
mov esi 7FFFFFFFh +
test edx edx +
jz loc_1014BF4  +
cmp edx esi +
jbe loc_1014BF9  +
mov eax 80070057h +
mov ebx [ebp+arg_0] +
test eax eax +
jl loc_1014C11  +
push edi  +
lea edi [ebp+arg_0] +
mov eax ebx +
call sub_10148C7  +
mov ecx [ebp+arg_0] +
pop edi  +
jmp loc_1014C13  +
xor ecx ecx +
test eax eax +
jl loc_1014C2A  +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_8] +
push esi  +
sub edx ecx +
push 0  +
lea ecx [ebx+ecx*2] +
call sub_104F45B  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_8] +
test eax eax +
jz loc_1014C57  +
mov edx [ebp+arg_4] +
cmp edx 7FFFFFFFh +
ja loc_1014C57  +
call sub_10148C7  +
jmp loc_1014C5C  +
mov eax 80070057h +
test eax eax +
jge loc_1014C67  +
test edi edi +
jz loc_1014C67  +
and dword ptr [edi] 0 +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push esi  +
push 0Ah  +
mov esi ecx +
call sub_101C247  +
push 0Ah  +
lea ecx [ebp+var_18] +
call sub_101C247  +
lea ecx [ebp+var_18] +
call loc_1014AB9  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
xor esi esi +
mov [ebp+pNumArgs] esi +
mov [ebp+var_10] esi +
mov [ebp+var_8] esi +
cmp [ebp+arg_0] esi +
jz loc_1014E2F  +
cmp [ebp+arg_4] esi +
jz loc_1014E2F  +
push edi  +
call ds:GetCommandLineW  +
cmp eax esi +
jnz loc_1014CDA  +
mov edi 65Bh +
jmp loc_1014E17  +
push ebx  +
lea ecx [ebp+pNumArgs] +
push ecx  +
push eax  +
call ds:CommandLineToArgvW  +
mov ebx eax +
mov [ebp+hMem] ebx +
cmp ebx esi +
jnz loc_1014CFC  +
call ds:GetLastError  +
mov edi eax +
jmp loc_1014DE7  +
lea eax [ebp+var_14] +
push eax  +
push 7FFFFFFFh  +
push dword ptr [ebx]  +
call sub_1014C35  +
test eax eax +
jl loc_1014E28  +
mov esi [ebp+var_14] +
mov edi ds:LocalAlloc +
inc esi  +
lea eax [esi+esi] +
push eax  +
push 40h  +
call edi  +
mov [ebp+var_10] eax +
test eax eax +
jz loc_1014D88  +
push dword ptr [ebx]  +
push esi  +
push eax  +
call sub_1014BA1  +
test eax eax +
jl loc_1014E28  +
xor ebx ebx +
inc ebx  +
cmp [ebp+pNumArgs] ebx +
jle loc_1014DD5  +
xor esi esi +
cmp [ebp+pNumArgs] ebx +
jle loc_1014D79  +
lea eax [ebp+var_14] +
push eax  +
mov eax [ebp+hMem] +
push 7FFFFFFFh  +
push dword ptr [eax+ebx*4]  +
call sub_1014C35  +
test eax eax +
jl loc_1014E28  +
inc [ebp+var_14]  +
add esi [ebp+var_14] +
inc ebx  +
cmp ebx [ebp+pNumArgs] +
jl loc_1014D51  +
lea eax [esi+esi] +
push eax  +
push 40h  +
call edi  +
mov [ebp+var_8] eax +
test eax eax +
jnz loc_1014D8D  +
push 8  +
pop edi  +
jmp loc_1014DE7  +
mov ecx [ebp+hMem] +
push dword ptr [ecx+4]  +
push esi  +
push eax  +
call sub_1014BA1  +
test eax eax +
jl loc_1014E28  +
push 2  +
pop edi  +
cmp [ebp+pNumArgs] edi +
jle loc_1014DD5  +
push offset asc_1001D58  +
push esi  +
push [ebp+var_8]  +
call sub_1014BDB  +
test eax eax +
jl loc_1014E28  +
mov eax [ebp+hMem] +
push dword ptr [eax+edi*4]  +
push esi  +
push [ebp+var_8]  +
call sub_1014BDB  +
test eax eax +
jl loc_1014E28  +
inc edi  +
cmp edi [ebp+pNumArgs] +
jl loc_1014DAA  +
mov eax [ebp+var_10] +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
mov eax [ebp+var_8] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
xor edi edi +
cmp [ebp+hMem] 0 +
pop ebx  +
jz loc_1014DF7  +
push [ebp+hMem]  +
call ds:GlobalFree  +
test edi edi +
jz loc_1014E23  +
cmp [ebp+var_10] 0 +
mov esi ds:LocalFree +
jz loc_1014E0C  +
push [ebp+var_10]  +
call esi  +
cmp [ebp+var_8] 0 +
jz loc_1014E17  +
push [ebp+var_8]  +
call esi  +
mov eax [ebp+arg_0] +
and dword ptr [eax] 0 +
mov eax [ebp+arg_4] +
and dword ptr [eax] 0 +
mov eax edi +
pop edi  +
jmp loc_1014E32  +
mov edi 65Bh +
jmp loc_1014DE7  +
push 57h  +
pop eax  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 78h +
push esi  +
push edi  +
xor esi esi +
push 3Ch  +
lea eax [ebp+hHandle] +
push esi  +
push eax  +
mov [ebp+ExitCode] esi +
mov [ebp+hMem] esi +
mov [ebp+var_C] esi +
call sub_10219E0  +
push 30h  +
pop edi  +
push edi  +
lea eax [ebp+var_3C] +
push esi  +
push eax  +
call sub_10219E0  +
mov eax hInstance +
mov [ebp+var_3C.hInstance] eax +
add esp 18h +
mov [ebp+var_3C.cbSize] edi +
lea eax [ebp+var_3C] +
mov edi offset aDummywindow +
push eax  +
mov [ebp+var_3C.style] 3 +
mov [ebp+var_3C.lpfnWndProc] offset loc_10143EF +
mov [ebp+var_3C.cbClsExtra] esi +
mov [ebp+var_3C.cbWndExtra] esi +
mov [ebp+var_3C.hIcon] esi +
mov [ebp+var_3C.hIconSm] esi +
mov [ebp+var_3C.hCursor] esi +
mov [ebp+var_3C.lpszMenuName] esi +
mov [ebp+var_3C.lpszClassName] edi +
call ds:RegisterClassExW  +
xor ecx ecx +
cmp cx ax +
jz loc_1014F7D  +
push esi  +
push hInstance  +
mov eax 80000000h +
push esi  +
push esi  +
push esi  +
push esi  +
push eax  +
push eax  +
push eax  +
push offset WindowName  +
push edi  +
push 80h  +
call ds:CreateWindowExW  +
mov edi eax +
cmp edi esi +
jz loc_1014F7D  +
push [ebp+nCmdShow]  +
push edi  +
call ds:ShowWindow  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+hMem] +
push eax  +
call sub_1014C9F  +
mov [ebp+ExitCode] eax +
cmp eax esi +
jnz loc_1014F86  +
mov eax [ebp+hMem] +
mov [ebp-68h] eax +
mov eax [ebp+var_C] +
push 0FFFFFFFFh  +
mov [ebp+hHandle] 3Ch +
mov dword ptr [ebp-74h] 4040h +
mov [ebp-70h] edi +
mov dword ptr [ebp-6Ch] offset aRunas +
mov [ebp-64h] eax +
mov dword ptr [ebp-5Ch] 5 +
call ds:AllowSetForegroundWindow  +
lea eax [ebp+hHandle] +
push eax  +
call ds:ShellExecuteExW  +
test eax eax +
jz loc_1014F7D  +
cmp [ebp-40h] esi +
jnz loc_1014F55  +
mov [ebp+ExitCode] 65Bh +
jmp loc_1014F94  +
push 0FFFFFFFFh  +
push dword ptr [ebp-40h]  +
call ds:WaitForSingleObject  +
mov [ebp+ExitCode] eax +
cmp eax esi +
jz loc_1014F6C  +
cmp eax 0FFFFFFFFh +
jmp loc_1014F7B  +
lea eax [ebp+ExitCode] +
push eax  +
push dword ptr [ebp-40h]  +
call ds:GetExitCodeProcess  +
test eax eax +
jnz loc_1014F86  +
call ds:GetLastError  +
mov [ebp+ExitCode] eax +
cmp [ebp-40h] esi +
jz loc_1014F94  +
push dword ptr [ebp-40h]  +
call ds:CloseHandle  +
mov edi ds:LocalFree +
cmp [ebp+hMem] esi +
jz loc_1014FA4  +
push [ebp+hMem]  +
call edi  +
cmp [ebp+var_C] esi +
jz loc_1014FAE  +
push [ebp+var_C]  +
call edi  +
mov eax [ebp+ExitCode] +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
sub ecx 10h +
xor eax eax +
push edi  +
mov edi [ecx] +
cmp [ecx+4] eax +
jz loc_1014FFA  +
cmp [ecx+0Ch] eax +
jge loc_1014FE9  +
push eax  +
mov ecx esi +
call loc_10149C4  +
jmp loc_1014FFA  +
call sub_10147CD  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+0Ch]  +
add eax 10h +
mov [esi] eax +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
sub eax 10h +
cmp dword ptr [eax+0Ch] 1 +
jle loc_101501A  +
push dword ptr [eax+4]  +
call sub_1014955  +
mov eax [esi] +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
cmp eax 0FFFFFFFFh +
jnz loc_101503B  +
push dword ptr [esi]  +
call sub_1014736  +
pop ecx  +
push eax  +
mov ecx esi +
call loc_10149C4  +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax [ecx] +
mov ecx [eax-10h] +
test ecx ecx +
jz loc_101505D  +
mov eax [ecx] +
call dword ptr [eax+10h]  +
jmp loc_101505F  +
xor eax eax +
test eax eax +
jnz locret_1015070  +
mov ecx offset dword_1064BA8 +
mov eax dword_1064BA8 +
jmp dword ptr [eax+10h]  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jnz loc_101508F  +
push 80004005h  +
call loc_1014415  +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
add eax 10h +
mov [esi] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push esi  +
sub eax 10h +
push eax  +
mov esi ecx +
call sub_10149F6  +
add eax 10h +
mov [esi] eax +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
mov edx [eax-0Ch] +
sub eax 10h +
push esi  +
mov esi [ebp+arg_0] +
cmp edx esi +
jle loc_10150E4  +
mov esi edx +
cmp dword ptr [eax+0Ch] 1 +
jle loc_10150F2  +
push esi  +
call sub_1014955  +
jmp loc_1015116  +
mov eax [eax+8] +
cmp eax esi +
jge loc_1015116  +
mov edx eax +
mov eax 400h +
cmp edx eax +
jle loc_1015108  +
add edx eax +
jmp loc_101510A  +
add edx edx +
cmp edx esi +
jge loc_1015110  +
mov edx esi +
push edx  +
call sub_1014A7B  +
pop esi  +
pop ebp  +
retn 4  +
***
jmp loc_1014B04  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+10h] 0 +
jnz loc_101516D  +
push 0Ch  +
push dword ptr [esi+14h]  +
lea eax [esi+0Ch] +
push eax  +
call sub_1014B4F  +
test eax eax +
jnz loc_1015151  +
push 8007000Eh  +
call loc_1014415  +
mov ecx [esi+14h] +
mov edx ecx +
imul edx edx +
lea eax [edx+eax-8] +
jmp loc_101516A  +
mov edx [esi+10h] +
mov [eax] edx +
mov [esi+10h] eax +
sub eax 0Ch +
dec ecx  +
jns loc_101515F  +
pop esi  +
retn   +
***
mov ecx [ecx] +
sub ecx 10h +
jmp sub_10147CD  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+48h] +
sub ecx 10h +
call sub_10147CD  +
mov ecx [esi+34h] +
sub ecx 10h +
call sub_10147CD  +
mov ecx [esi+24h] +
sub ecx 10h +
call sub_10147CD  +
mov ecx [esi+4] +
sub ecx 10h +
pop esi  +
jmp sub_10147CD  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+4] +
sub ecx 10h +
call sub_10147CD  +
mov ecx [esi] +
sub ecx 10h +
pop esi  +
jmp sub_10147CD  +
***
mov edi edi +
push esi  +
push offset dword_1064BA8  +
mov esi ecx +
call sub_1015076  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10150A5  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1015076  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [esi] +
sub ecx 10h +
call sub_10147CD  +
test [ebp+arg_0] 1 +
jz loc_1015249  +
push esi  +
call sub_1021179  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
xor ecx ecx +
sub eax 10h +
inc ecx  +
sub ecx [eax+0Ch] +
mov eax [eax+8] +
sub eax [ebp+arg_0] +
or ecx eax +
jge loc_101527C  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_10150CD  +
mov eax [esi] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
call sub_10151DA  +
lea ecx [esi+24h] +
call sub_10151DA  +
lea ecx [esi+34h] +
call sub_10151DA  +
lea ecx [esi+48h] +
call sub_10151DA  +
mov eax esi +
pop esi  +
retn   +
***
call sub_1021EB9  +
mov esi offset dword_1064BA8 +
push esi  +
lea ecx [ebp-14h] +
xor edi edi +
call sub_1015076  +
push esi  +
lea ecx [ebp-10h] +
mov [ebp-4] edi +
call sub_1015076  +
lea eax [ebp-14h] +
push eax  +
push 13A5h  +
mov byte ptr [ebp-4] 1 +
call sub_10208E1  +
test eax eax +
jz loc_101531B  +
lea eax [ebp-10h] +
push eax  +
push 13A4h  +
call sub_10208E1  +
test eax eax +
jz loc_101531B  +
push 24h  +
push dword ptr [ebp-10h]  +
push dword ptr [ebp-14h]  +
push edi  +
call ds:MessageBoxW  +
cmp eax 6 +
jnz loc_101531B  +
inc edi  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov eax edi +
call sub_1021FA5  +
retn   +
***
call sub_1021EB9  +
and dword ptr [ebp-4] 0 +
mov esi offset dword_1064BA8 +
push esi  +
lea ecx [ebp-14h] +
call sub_1015076  +
push esi  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 1 +
call sub_1015076  +
push esi  +
lea ecx [ebp-18h] +
mov byte ptr [ebp-4] 2 +
call sub_1015076  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp+8] +
push eax  +
mov byte ptr [ebp-4] 3 +
call sub_1036032  +
test al al +
jnz loc_10153C5  +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
xor eax eax +
call sub_1021FA5  +
retn 8  +
push 0  +
lea eax [ebp-14h] +
push eax  +
push ecx  +
lea eax [ebp-10h] +
mov [ebp-1Ch] esp +
mov ecx esp +
push eax  +
call sub_10150A5  +
call sub_1036735  +
test eax eax +
jnz loc_101538F  +
cmp [ebp+0Ch] eax +
jz loc_1015427  +
push dword ptr [ebp-14h]  +
call ds:SetCurrentDirectoryW  +
test eax eax +
jnz loc_1015427  +
xor esi esi +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov eax esi +
jmp loc_10153BD  +
xor esi esi +
inc esi  +
jmp loc_10153F7  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10151DA  +
lea ecx [esi+4] +
call sub_10151DA  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
push ebx  +
mov ebx ecx +
jnz loc_1015461  +
call sub_1014FC6  +
jmp loc_10154B6  +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_1015473  +
push 80070057h  +
call loc_1014415  +
mov eax [ebx] +
push edi  +
push [ebp+arg_4]  +
mov edi [eax-0Ch] +
sub esi eax +
sar esi 1 +
call sub_1015255  +
cmp esi edi +
pop edi  +
push [ebp+arg_4]  +
ja loc_101549C  +
lea ecx [eax+esi*2] +
push ecx  +
push [ebp+arg_4]  +
push eax  +
call sub_101475C  +
jmp loc_10154A8  +
push [ebp+arg_0]  +
push [ebp+arg_4]  +
push eax  +
call sub_1014323  +
add esp 10h +
push [ebp+arg_4]  +
mov ecx ebx +
call loc_10149C4  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
mov edi [ebp+arg_10] +
lea ebx [esi+edi] +
push ebx  +
call sub_1015255  +
push esi  +
push [ebp+arg_4]  +
mov [ebp+arg_8] eax +
push esi  +
push eax  +
call sub_1014323  +
mov eax [ebp+arg_8] +
push edi  +
push [ebp+arg_C]  +
lea eax [eax+esi*2] +
push edi  +
push eax  +
call sub_1014323  +
mov ecx [ebp+arg_0] +
add esp 20h +
push ebx  +
call loc_10149C4  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
cmp [esi] ebx +
jz loc_101553F  +
push edi  +
xor edi edi +
cmp [esi+8] ebx +
jle loc_1015534  +
mov eax [esi] +
push ebx  +
lea ecx [eax+edi*4] +
call sub_101522A  +
inc edi  +
cmp edi [esi+8] +
jl loc_1015523  +
push dword ptr [esi]  +
call sub_10213A1  +
pop ecx  +
mov [esi] ebx +
pop edi  +
mov eax [esi+4] +
cmp eax ebx +
jz loc_1015550  +
push eax  +
call sub_10213A1  +
pop ecx  +
mov [esi+4] ebx +
mov [esi+8] ebx +
pop esi  +
pop ebx  +
retn   +
***
call sub_1021EB9  +
mov esi ecx +
mov [ebp-10h] esi +
mov eax [esi] +
mov edi [ebp+8] +
lea ecx [eax+edi*4] +
mov [ebp-14h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_1015587  +
push dword ptr [ebp+0Ch]  +
call sub_101C726  +
mov eax [esi+4] +
lea eax [eax+edi*2] +
test eax eax +
jz loc_101559A  +
mov ecx [ebp+10h] +
mov cx [ecx] +
mov [eax] cx +
call sub_1021FA5  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_4]  +
mov ebx ecx +
push [ebp+hModule]  +
call sub_101453C  +
mov esi eax +
test esi esi +
jz loc_10155EB  +
push edi  +
movzx edi word ptr [esi] +
push edi  +
mov ecx ebx +
call sub_1015255  +
movzx ecx word ptr [esi] +
push ecx  +
add esi 2 +
push esi  +
push edi  +
push eax  +
call sub_101488C  +
add esp 10h +
push edi  +
mov ecx ebx +
call loc_10149C4  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov ebx ecx +
mov eax [ebx] +
push edi  +
mov edi [eax-0Ch] +
sub esi eax +
mov eax [ebp+arg_4] +
add eax edi +
push eax  +
sar esi 1 +
mov [ebp+var_4] eax +
call sub_1015255  +
cmp esi edi +
lea esi [eax+esi*2] +
jbe loc_1015625  +
mov esi [ebp+arg_0] +
push [ebp+arg_4]  +
lea eax [eax+edi*2] +
push esi  +
push [ebp+arg_4]  +
push eax  +
call sub_1014323  +
add esp 10h +
push [ebp+var_4]  +
mov ecx ebx +
call loc_10149C4  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ecx] +
push ebx  +
push esi  +
mov esi [eax-0Ch] +
push edi  +
push [ebp+arg_4]  +
mov [ebp+var_4] ecx +
push [ebp+arg_0]  +
call sub_1021954  +
mov edi eax +
pop ecx  +
pop ecx  +
cmp edi 0FFFFFFFFh +
jnz loc_101567D  +
push 8007000Eh  +
call loc_1014415  +
mov ecx [ebp+var_4] +
lea ebx [edi+esi] +
push ebx  +
call sub_1015255  +
push [ebp+arg_4]  +
inc edi  +
push [ebp+arg_0]  +
lea eax [eax+esi*2] +
push edi  +
push eax  +
call sub_1021975  +
mov ecx [ebp+var_4] +
add esp 10h +
push ebx  +
call loc_10149C4  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [esi+8] +
sub ecx 10h +
call sub_10147CD  +
test [ebp+arg_0] 1 +
jz loc_10156D2  +
push esi  +
call sub_1021179  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
lea ecx [esi+8] +
call sub_10151BA  +
test [ebp+arg_0] 1 +
jz loc_10156FB  +
push esi  +
call sub_1021179  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpMultiByteStr] 0 +
push esi  +
push edi  +
mov edi ecx +
jz loc_1015723  +
push [ebp+lpMultiByteStr]  +
call sub_101484B  +
pop ecx  +
mov esi eax +
jmp loc_1015725  +
xor esi esi +
mov ecx edi +
test esi esi +
jle loc_101574A  +
push esi  +
call sub_1015255  +
push 0FFFFFFFFh  +
push [ebp+lpMultiByteStr]  +
push esi  +
push eax  +
call sub_101486A  +
add esp 10h +
push esi  +
mov ecx edi +
call loc_10149C4  +
jmp loc_101574F  +
call sub_1014FC6  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi] +
mov esi [eax-0Ch] +
push esi  +
call sub_1015255  +
lea ecx [esi+1] +
push ecx  +
push eax  +
call sub_1014829  +
pop ecx  +
pop ecx  +
push esi  +
mov ecx edi +
call loc_10149C4  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
push edi  +
mov edi ecx +
jnz loc_10157A4  +
push 80070057h  +
call loc_1014415  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1021954  +
mov esi eax +
pop ecx  +
pop ecx  +
cmp esi 0FFFFFFFFh +
jnz loc_10157BF  +
push 8007000Eh  +
jmp loc_101579F  +
push esi  +
mov ecx edi +
call sub_1015255  +
push [ebp+arg_4]  +
lea ecx [esi+1] +
push [ebp+arg_0]  +
push ecx  +
push eax  +
call sub_1021975  +
add esp 10h +
push esi  +
mov ecx edi +
call loc_10149C4  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
call sub_1021EB9  +
mov esi [ebp+0Ch] +
and dword ptr [ebp-10h] 0 +
mov ecx esi +
call sub_101504D  +
mov ecx [ebp+8] +
push eax  +
call sub_101520E  +
mov eax [ebp+10h] +
mov eax [eax] +
mov edx [eax-0Ch] +
mov ecx [esi] +
mov esi [ecx-0Ch] +
and dword ptr [ebp-4] 0 +
push edx  +
push eax  +
push esi  +
push ecx  +
push dword ptr [ebp+8]  +
mov dword ptr [ebp-10h] 1 +
call sub_10154C0  +
mov eax [ebp+8] +
add esp 14h +
call sub_1021FA5  +
retn 0Ch  +
***
call sub_1021EB9  +
mov esi [ebp+0Ch] +
and dword ptr [ebp-10h] 0 +
mov ecx esi +
call sub_101504D  +
mov ecx [ebp+8] +
push eax  +
call sub_101520E  +
mov esi [esi] +
push dword ptr [ebp+10h]  +
and dword ptr [ebp-4] 0 +
mov edi [esi-0Ch] +
mov dword ptr [ebp-10h] 1 +
call sub_1014736  +
push eax  +
push dword ptr [ebp+10h]  +
push edi  +
push esi  +
push dword ptr [ebp+8]  +
call sub_10154C0  +
mov eax [ebp+8] +
add esp 18h +
call sub_1021FA5  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1015255  +
push [ebp+arg_0]  +
mov ecx esi +
mov edi eax +
call loc_10149C4  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1014736  +
pop ecx  +
push eax  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_101544C  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+8] +
push 4  +
inc eax  +
push eax  +
push dword ptr [esi]  +
call sub_1022206  +
add esp 0Ch +
test eax eax +
jnz loc_101591E  +
xor eax eax +
jmp loc_101594F  +
mov [esi] eax +
mov eax [esi+8] +
push 2  +
inc eax  +
push eax  +
push dword ptr [esi+4]  +
call sub_1022206  +
add esp 0Ch +
test eax eax +
jz loc_101591A  +
push [ebp+arg_4]  +
mov ecx esi +
push [ebp+arg_0]  +
mov [esi+4] eax +
push dword ptr [esi+8]  +
call sub_101555B  +
inc dword ptr [esi+8]  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push esi  +
push edi  +
mov edi ecx +
mov esi [edi] +
lea ecx [eax-10h] +
sub esi 10h +
cmp ecx esi +
jz loc_10159A3  +
cmp dword ptr [esi+0Ch] 0 +
jl loc_1015998  +
mov edx [ecx] +
cmp edx [esi] +
jnz loc_1015998  +
push ebx  +
push ecx  +
call sub_10149F6  +
pop ecx  +
mov ecx esi +
mov ebx eax +
call sub_10147CD  +
add ebx 10h +
mov [edi] ebx +
pop ebx  +
jmp loc_10159A3  +
push dword ptr [eax-0Ch]  +
mov ecx edi +
push eax  +
call sub_101544C  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10158CD  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1014792  +
test eax eax +
jz loc_10159EB  +
push [ebp+arg_0]  +
mov ecx esi +
push eax  +
call sub_10155A7  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push dword ptr [eax-0Ch]  +
push eax  +
call sub_10155F6  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
call sub_101578B  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
call sub_101564E  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
push 0  +
mov ecx edi +
call sub_10156B2  +
mov eax [esi+10h] +
mov [edi] eax +
dec dword ptr [esi+8]  +
mov [esi+10h] edi +
jnz loc_1015A70  +
mov ecx esi +
call loc_1014AB9  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
push 0  +
mov ecx edi +
call sub_10156DE  +
mov eax [esi+10h] +
mov [edi] eax +
dec dword ptr [esi+8]  +
mov [esi+10h] edi +
jnz loc_1015AA4  +
mov ecx esi +
call loc_1014B04  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1015959  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10159B0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_0] eax +
jz loc_1015B08  +
test [ebp+arg_0] 0FFFF0000h +
jnz loc_1015B08  +
movzx eax word ptr [ebp+arg_0] +
push eax  +
call sub_10159CC  +
mov al 1 +
pop ebp  +
retn 4  +
***
call sub_1021EB9  +
mov ecx [ebp+10h] +
call sub_1014FC6  +
xor edi edi +
inc edi  +
cmp [ebp+8] edi +
jle loc_1015F56  +
mov ecx [ebp+0Ch] +
mov ebx [ecx+edi*4] +
movzx eax word ptr [ebx] +
cmp ax 2Fh +
jz loc_1015B4A  +
cmp ax 2Dh +
jnz loc_1015F61  +
inc ebx  +
push offset aU_0  +
inc ebx  +
push ebx  +
call sub_10354E5  +
test eax eax +
jnz loc_1015BCF  +
mov eax [esi] +
test eax eax +
jz loc_1015B89  +
cmp eax 4 +
jnz loc_1015B6C  +
inc edi  +
jmp loc_1015F4C  +
push off_1063134[eax*4]  +
push off_106313C  +
push offset aConflictingCom  +
push dword ptr [ebp+10h]  +
call sub_1015A11  +
add esp 10h +
inc edi  +
cmp edi [ebp+8] +
jz loc_1015F64  +
mov eax [ebp+0Ch] +
mov dword ptr [esi] 2 +
push dword ptr [eax+edi*4]  +
lea ebx [esi+4] +
mov ecx ebx +
call sub_10158CD  +
push ebx  +
call sub_1035549  +
test al al +
jnz loc_1015F4C  +
push dword ptr [esi+4]  +
push offset aFileSNotFound_  +
push dword ptr [ebp+10h]  +
call sub_1015A11  +
add esp 0Ch +
jmp loc_1015F71  +
push offset aUs  +
push ebx  +
call sub_10354E5  +
test eax eax +
jnz loc_1015C45  +
mov eax [esi] +
test eax eax +
jz loc_1015C0A  +
cmp eax 4 +
jz loc_1015B66  +
push off_1063134[eax*4]  +
push off_1063140  +
push offset aConflictingCom  +
push dword ptr [ebp+10h]  +
call sub_1015A11  +
add esp 10h +
inc edi  +
cmp edi [ebp+8] +
jz loc_1015F75  +
mov eax [ebp+0Ch] +
mov dword ptr [esi] 3 +
push dword ptr [eax+edi*4]  +
lea ebx [esi+4] +
mov ecx ebx +
call sub_10158CD  +
push ebx  +
call sub_1035549  +
test al al +
jnz loc_1015F4C  +
push dword ptr [esi+4]  +
push offset aUninstallScrip  +
jmp loc_1015BBF  +
push offset aSe  +
push ebx  +
call sub_10354E5  +
test eax eax +
jnz loc_1015C60  +
mov dword ptr [esi+18h] 1 +
jmp loc_1015F4C  +
push offset aQ  +
push ebx  +
call sub_10354E5  +
test eax eax +
jz loc_1015F45  +
push offset aS  +
push ebx  +
call sub_10354E5  +
test eax eax +
jz loc_1015F45  +
push offset aSw  +
push ebx  +
call sub_10354E5  +
test eax eax +
jnz loc_1015CA1  +
mov dword ptr [esi+0Ch] 1 +
jmp loc_1015F4C  +
push offset aLm  +
push ebx  +
call sub_10354E5  +
test eax eax +
jnz loc_1015CBC  +
mov dword ptr [esi+14h] 1 +
jmp loc_1015F4C  +
push offset aP  +
push ebx  +
call sub_10354E5  +
test eax eax +
jnz loc_1015CD7  +
mov dword ptr [esi+1Ch] 1 +
jmp loc_1015F4C  +
push offset aF  +
push ebx  +
call sub_10354E5  +
test eax eax +
jnz loc_1015CF2  +
mov dword ptr [esi+20h] 1 +
jmp loc_1015F4C  +
push offset aCs  +
push ebx  +
call sub_10354E5  +
test eax eax +
jnz loc_1015D8D  +
inc edi  +
cmp edi [ebp+8] +
jz loc_1015F7C  +
mov eax [ebp+0Ch] +
push dword ptr [eax+edi*4]  +
lea ebx [esi+24h] +
mov ecx ebx +
call sub_10158CD  +
push offset dword_1064BA8  +
lea ecx [ebp-10h] +
call sub_1015076  +
and dword ptr [ebp-4] 0 +
push offset dword_1064BA8  +
lea ecx [ebp-14h] +
call sub_1015076  +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-10h] +
push eax  +
push ebx  +
mov byte ptr [ebp-4] 1 +
call sub_1036032  +
push ebx  +
call sub_1035549  +
test al al +
jnz loc_1015F83  +
lea eax [ebp-10h] +
push eax  +
call sub_1035522  +
test al al +
jz loc_1015FAE  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
jmp loc_1015F4C  +
push offset aSh  +
push ebx  +
call sub_10354E5  +
test eax eax +
jnz loc_1015DA8  +
mov dword ptr [esi+28h] 1 +
jmp loc_1015F4C  +
push offset aSa  +
push ebx  +
call sub_10354E5  +
test eax eax +
jnz loc_1015DC3  +
mov dword ptr [esi+2Ch] 1 +
jmp loc_1015F4C  +
push offset aI_0  +
push ebx  +
call sub_10354E5  +
test eax eax +
jz loc_1015F3C  +
push offset aA  +
push ebx  +
call sub_10354E5  +
test eax eax +
jz loc_1015F3C  +
push offset aPath  +
push ebx  +
call sub_10354E5  +
test eax eax +
jnz loc_1015E2D  +
inc edi  +
cmp edi [ebp+8] +
jz loc_1015FC6  +
mov eax [ebp+0Ch] +
push dword ptr [eax+edi*4]  +
lea ebx [esi+34h] +
mov ecx ebx +
call sub_10158CD  +
push ebx  +
call sub_1035522  +
test al al +
jnz loc_1015F4C  +
push dword ptr [esi+34h]  +
push offset aPathSNotFound_  +
jmp loc_1015BBF  +
push offset asc_10020F4  +
push ebx  +
call sub_10354E5  +
test eax eax +
jnz loc_1015E5A  +
inc edi  +
cmp edi [ebp+8] +
jz loc_1015FCD  +
mov eax [ebp+0Ch] +
push dword ptr [eax+edi*4]  +
call sub_1035167  +
mov [esi+8] ax +
jmp loc_1015F4C  +
push offset aW  +
push ebx  +
call sub_10354E5  +
test eax eax +
jnz loc_1015E71  +
and [esi+3Ch] eax +
jmp loc_1015F4C  +
push offset aEl  +
push ebx  +
call sub_10354E5  +
test eax eax +
jnz loc_1015E8C  +
mov dword ptr [esi+38h] 1 +
jmp loc_1015F4C  +
push offset aC  +
push ebx  +
call sub_10354E5  +
test eax eax +
jnz loc_1015EA7  +
mov dword ptr [esi+40h] 1 +
jmp loc_1015F4C  +
push offset aD_0  +
push ebx  +
call sub_10354E5  +
test eax eax +
jnz loc_1015EC2  +
mov dword ptr [esi+44h] 1 +
jmp loc_1015F4C  +
push offset aLogtitle  +
push ebx  +
call sub_10354E5  +
test eax eax +
jnz loc_1015EEB  +
inc edi  +
cmp edi [ebp+8] +
jz loc_1015FD4  +
mov eax [ebp+0Ch] +
push dword ptr [eax+edi*4]  +
lea ecx [esi+48h] +
call sub_10158CD  +
jmp loc_1015F4C  +
push offset aTw  +
push ebx  +
call sub_10354E5  +
test eax eax +
jnz loc_1015F03  +
mov dword ptr [esi+4Ch] 1 +
jmp loc_1015F4C  +
push offset a?  +
push ebx  +
call sub_10354E5  +
test eax eax +
jz loc_1015F34  +
push offset asc_10020BC  +
push ebx  +
call sub_10354E5  +
test eax eax +
jz loc_1015F34  +
push offset aHelp  +
push ebx  +
call sub_10354E5  +
test eax eax +
jnz loc_1015FDB  +
mov dword ptr [esi] 4 +
jmp loc_1015F4C  +
mov dword ptr [esi+30h] 1 +
jmp loc_1015F4C  +
mov dword ptr [esi+10h] 1 +
inc edi  +
cmp edi [ebp+8] +
jl loc_1015B31  +
xor eax eax +
inc eax  +
call sub_1021FA5  +
retn 0Ch  +
push ebx  +
jmp loc_1015FE1  +
push offset aMissingUninsta  +
mov ecx [ebp+10h] +
call sub_10158CD  +
xor eax eax +
jmp loc_1015F59  +
push offset aMissingUnins_0  +
jmp loc_1015F69  +
push offset aMissingScriptF  +
jmp loc_1015F69  +
push dword ptr [esi+24h]  +
push offset aAFileWithTheNa  +
push dword ptr [ebp+10h]  +
call sub_1015A11  +
add esp 0Ch +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
jmp loc_1015F71  +
push dword ptr [esi+24h]  +
push dword ptr [ebp-10h]  +
push offset aDirectorySInSN  +
push dword ptr [ebp+10h]  +
call sub_1015A11  +
add esp 10h +
jmp loc_1015F96  +
push offset aMissingPathFor  +
jmp loc_1015F69  +
push offset aMissingLanguag  +
jmp loc_1015F69  +
push offset aMissingTitle_  +
jmp loc_1015F69  +
mov eax [ebp+0Ch] +
push dword ptr [eax+edi*4]  +
push offset aInvalidCommand  +
jmp loc_1015BBF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_1015AAF  +
lea eax [edi+4] +
push eax  +
lea ecx [esi+4] +
call sub_1015AAF  +
mov eax [edi+8] +
mov [esi+8] eax +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1021EB9  +
push offset dword_1064BA8  +
lea ecx [ebp-10h] +
call sub_1015076  +
mov eax [ebp+0Ch] +
xor edi edi +
sub eax 110h +
mov [ebp-4] edi +
jz loc_1016085  +
dec eax  +
jz loc_1016061  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov eax edi +
call sub_1021FA5  +
retn 10h  +
cmp [ebp+10h] edi +
jbe loc_1016134  +
cmp dword ptr [ebp+10h] 2 +
ja loc_1016134  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
call ds:EndDialog  +
jmp loc_1016134  +
push 7E0h  +
push dword ptr [ebp+8]  +
call ds:GetDlgItem  +
mov esi ds:SendMessageW +
push edi  +
push edi  +
push 1009h  +
push eax  +
mov [ebp+10h] eax +
call esi  +
lea eax [ebp-30h] +
push eax  +
push edi  +
push 1061h  +
push dword ptr [ebp+10h]  +
mov [ebp-30h] edi +
mov [ebp-1Ch] edi +
call esi  +
mov eax [ebp+14h] +
mov eax [eax] +
xor ebx ebx +
mov [ebp+8] eax +
cmp eax edi +
jz loc_101610B  +
mov ecx [ebp+14h] +
lea eax [ebp+8] +
push eax  +
call sub_105038C  +
push eax  +
lea ecx [ebp-10h] +
call sub_1015959  +
lea ecx [ebp-10h] +
call sub_1015002  +
mov [ebp-44h] eax +
lea eax [ebp-58h] +
push eax  +
push edi  +
push 104Dh  +
push dword ptr [ebp+10h]  +
mov [ebp-54h] ebx +
mov dword ptr [ebp-58h] 1 +
inc ebx  +
mov [ebp-50h] edi +
call esi  +
cmp [ebp+8] edi +
jnz loc_10160C9  +
push edi  +
push edi  +
push 1013h  +
push dword ptr [ebp+10h]  +
call esi  +
push 0FFFEh  +
push edi  +
push 101Eh  +
push dword ptr [ebp+10h]  +
call esi  +
push 20h  +
push edi  +
push 1036h  +
push dword ptr [ebp+10h]  +
call esi  +
xor edi edi +
inc edi  +
jmp loc_101604C  +
***
call sub_1021EB9  +
mov edi [ebp+8] +
and dword ptr [ebp-10h] 0 +
mov ecx edi +
call sub_10151DA  +
mov eax [ebp+0Ch] +
and dword ptr [ebp-4] 0 +
sub eax 0 +
mov dword ptr [ebp-10h] 1 +
jz loc_101618C  +
dec eax  +
jz loc_1016185  +
dec eax  +
jz loc_101617E  +
dec eax  +
jnz loc_1016198  +
push offset aError  +
jmp loc_1016191  +
push offset aWarning  +
jmp loc_1016191  +
push offset aInfo  +
jmp loc_1016191  +
push offset aSuccess  +
mov ecx edi +
call sub_10158CD  +
mov eax edi +
call sub_1021FA5  +
retn 8  +
***
call sub_1021EB9  +
mov esi ecx +
mov [ebp-10h] esi +
push offset dword_1064BA8  +
call sub_1015076  +
push dword ptr [ebp+8]  +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_1015AE7  +
test al al +
jnz loc_10161DE  +
push dword ptr [ebp+8]  +
mov ecx esi +
call sub_1015ACB  +
mov eax esi +
call sub_1021FA5  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
lea ecx [esi+8] +
call sub_10161A7  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1021F2C  +
mov eax [ebp+0Ch] +
mov ebx [ebp+8] +
xor edi edi +
sub eax 110h +
mov [ebp-21Ch] edi +
jz loc_1016252  +
dec eax  +
jz loc_101623A  +
xor eax eax +
jmp loc_1016331  +
mov eax [ebp+10h] +
dec eax  +
jnz loc_101632E  +
push 1  +
push ebx  +
call ds:EndDialog  +
jmp loc_101632E  +
push offset dword_1064BA8  +
lea ecx [ebp-220h] +
call sub_1015076  +
mov eax lpString +
mov esi ds:SetDlgItemTextW +
mov [ebp-4] edi +
cmp [eax-0Ch] edi +
jz loc_101627E  +
push eax  +
push 2F44h  +
push ebx  +
call esi  +
push 104h  +
lea eax [ebp-218h] +
push eax  +
push edi  +
call ds:GetModuleFileNameW  +
dec eax  +
cmp eax 102h +
ja loc_10162B7  +
lea eax [ebp-218h] +
push eax  +
push 2FA8h  +
push ebx  +
call esi  +
lea eax [ebp-218h] +
push eax  +
push 300Ch  +
push ebx  +
call esi  +
lea eax [ebp-220h] +
push eax  +
push ds:dword_1001C08[edi]  +
call sub_10208E1  +
test eax eax +
jz loc_10162D5  +
lea eax [ebp-220h] +
jmp loc_10162EC  +
push offset word_10022EC  +
lea ecx [ebp-224h] +
call sub_10161A7  +
or dword ptr [ebp-21Ch] 1 +
push dword ptr [eax]  +
push ds:dword_1001C0C[edi]  +
push ebx  +
call esi  +
test byte ptr [ebp-21Ch] 1 +
jz loc_1016315  +
mov ecx [ebp-224h] +
and dword ptr [ebp-21Ch] 0FFFFFFFEh +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
add edi 8 +
cmp edi 0A0h +
jb loc_10162B7  +
mov ecx [ebp-220h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
xor eax eax +
inc eax  +
call sub_1021FBE  +
retn 10h  +
***
call sub_1021F2C  +
mov esi ecx +
xor ebx ebx +
push offset dword_1064BA8  +
lea ecx [ebp-220h] +
mov [ebp-21Ch] ebx +
call sub_1015076  +
mov eax [esi] +
mov [ebp-4] ebx +
cmp [eax-0Ch] ebx +
jz loc_101638C  +
push offset Buffer  +
call sub_102023E  +
push dword ptr [esi]  +
call sub_102023E  +
push offset asc_10022F8  +
call sub_102023E  +
push 104h  +
lea eax [ebp-218h] +
push eax  +
push ebx  +
call ds:GetModuleFileNameW  +
dec eax  +
mov edi 102h +
mov [ebp-228h] eax +
cmp eax edi +
ja loc_10163BB  +
lea eax [ebp-218h] +
push eax  +
call sub_102023E  +
lea eax [ebp-220h] +
push eax  +
push 1770h  +
call sub_10208E1  +
mov esi offset word_10022EC +
test eax eax +
jz loc_10163DD  +
lea eax [ebp-220h] +
jmp loc_10163F7  +
push esi  +
lea ecx [ebp-224h] +
call sub_10161A7  +
mov byte ptr [ebp-4] 1 +
mov dword ptr [ebp-21Ch] 1 +
push dword ptr [eax]  +
call sub_102023E  +
test byte ptr [ebp-21Ch] 1 +
mov [ebp-4] ebx +
jz loc_101641F  +
mov ecx [ebp-224h] +
and dword ptr [ebp-21Ch] 0FFFFFFFEh +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
lea eax [ebp-220h] +
push eax  +
push 17D4h  +
call sub_10208E1  +
test eax eax +
jz loc_101643C  +
lea eax [ebp-220h] +
jmp loc_1016453  +
push esi  +
lea ecx [ebp-224h] +
call sub_10161A7  +
or dword ptr [ebp-21Ch] 2 +
mov byte ptr [ebp-4] 2 +
push dword ptr [eax]  +
call sub_102023E  +
test byte ptr [ebp-21Ch] 2 +
mov [ebp-4] ebx +
jz loc_101647B  +
mov ecx [ebp-224h] +
and dword ptr [ebp-21Ch] 0FFFFFFFDh +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
lea eax [ebp-220h] +
push eax  +
push 1838h  +
call sub_10208E1  +
test eax eax +
jz loc_1016498  +
lea eax [ebp-220h] +
jmp loc_10164AF  +
push esi  +
lea ecx [ebp-224h] +
call sub_10161A7  +
or dword ptr [ebp-21Ch] 4 +
mov byte ptr [ebp-4] 3 +
push dword ptr [eax]  +
call sub_102023E  +
test byte ptr [ebp-21Ch] 4 +
mov [ebp-4] ebx +
jz loc_10164D7  +
mov ecx [ebp-224h] +
and dword ptr [ebp-21Ch] 0FFFFFFFBh +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
cmp [ebp-228h] edi +
ja loc_10164EB  +
lea eax [ebp-218h] +
push eax  +
call sub_102023E  +
push 18h  +
pop edi  +
lea eax [ebp-220h] +
push eax  +
push ds:dword_1001C08[edi]  +
call sub_10208E1  +
test eax eax +
jz loc_101650C  +
lea eax [ebp-220h] +
jmp loc_1016523  +
push esi  +
lea ecx [ebp-228h] +
call sub_10161A7  +
or dword ptr [ebp-21Ch] 8 +
mov byte ptr [ebp-4] 4 +
push dword ptr [eax]  +
call sub_102023E  +
test byte ptr [ebp-21Ch] 8 +
mov [ebp-4] ebx +
jz loc_101654B  +
mov ecx [ebp-228h] +
and dword ptr [ebp-21Ch] 0FFFFFFF7h +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
add edi 8 +
cmp edi 0A0h +
jb loc_10164EE  +
push offset asc_10022F0  +
call sub_102023E  +
mov ecx [ebp-220h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
call sub_1021FBE  +
retn   +
***
call sub_1021EB9  +
lea ecx [ebp-1Ch] +
mov esi 80000000h +
call sub_1015431  +
xor edx edx +
xor edi edi +
xor ebx ebx +
mov [ebp-4] edx +
mov [ebp-10h] edx +
cmp [ebp+0Ch] edx +
jnz loc_1016629  +
mov ecx [ebp+10h] +
cmp [ecx+8] edx +
jz loc_1016629  +
mov eax [ecx] +
mov [ebp+0Ch] eax +
cmp eax edx +
jz loc_101660E  +
jmp loc_10165BD  +
mov ecx [ebp+10h] +
lea eax [ebp+0Ch] +
push eax  +
call sub_105038C  +
push eax  +
lea ecx [ebp-1Ch] +
call sub_1015FF0  +
mov eax [ebp-14h] +
cmp eax 1 +
jnz loc_10165DC  +
inc dword ptr [ebp-10h]  +
jmp loc_10165EF  +
cmp eax 2 +
jz loc_10165EE  +
cmp eax 3 +
jz loc_10165EE  +
cmp eax 4 +
jz loc_10165EF  +
inc ebx  +
jmp loc_10165EF  +
inc edi  +
cmp dword ptr [ebp+0Ch] 0 +
jnz loc_10165BA  +
mov eax 0FFh +
cmp ebx eax +
jbe loc_1016600  +
mov ebx eax +
cmp edi eax +
jbe loc_1016606  +
mov edi eax +
cmp [ebp-10h] eax +
jbe loc_101660E  +
mov [ebp-10h] eax +
xor edx edx +
xor esi esi +
cmp ebx edx +
jz loc_1016621  +
or ebx 0FFFF8000h +
shl ebx 10h +
mov esi ebx +
shl edi 8 +
or edi [ebp-10h] +
or esi edi +
cmp [ebp+8] edx +
jz loc_1016634  +
or esi 40000000h +
lea ecx [ebp-1Ch] +
call sub_10151BA  +
mov eax esi +
call sub_1021FA5  +
retn 0Ch  +
***
call sub_1021EB9  +
mov esi offset dword_1064BA8 +
push esi  +
lea ecx [ebp-10h] +
call sub_1015076  +
and dword ptr [ebp-4] 0 +
mov edi 105h +
push edi  +
lea ecx [ebp-10h] +
call sub_10158A3  +
push edi  +
push eax  +
call ds:GetWindowsDirectoryW  +
test eax eax +
jz loc_101670E  +
push 0FFFFFFFFh  +
lea ecx [ebp-10h] +
call sub_1015023  +
push esi  +
lea ecx [ebp-14h] +
call sub_1015076  +
push off_106312C  +
lea ecx [ebp-18h] +
mov byte ptr [ebp-4] 1 +
call sub_10161A7  +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-10h] +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_10360F6  +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
mov bl al +
mov byte ptr [ebp-4] 1 +
call sub_10147CD  +
test bl bl +
jz loc_1016703  +
push dword ptr [ebp-14h]  +
mov ecx offset unk_1064714 +
call sub_101FE9C  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
mov esi eax +
call sub_10147CD  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov eax esi +
call sub_1021FA5  +
retn   +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
xor esi esi +
jmp loc_10166F0  +
***
call sub_1021EB9  +
push offset dword_1064BA8  +
lea ecx [ebp-10h] +
call sub_1015076  +
push dword ptr [ebp+8]  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-18h] +
push eax  +
call sub_1016141  +
push dword ptr [ebp+0Ch]  +
mov byte ptr [ebp-4] 1 +
push eax  +
lea eax [ebp-14h] +
push eax  +
call sub_1015847  +
push offset asc_10022F0  +
push eax  +
lea eax [ebp+8] +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_1015847  +
push eax  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 3 +
call sub_1015959  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 0 +
call sub_10147CD  +
mov esi [ebp-10h] +
push dword ptr [esi-0Ch]  +
mov ecx offset unk_1064714 +
push esi  +
call sub_101FDE6  +
cmp dword_106470C 0 +
jz loc_10167B6  +
push esi  +
call sub_102023E  +
lea ecx [esi-10h] +
call sub_10147CD  +
call sub_1021FA5  +
retn 8  +
***
call sub_1021EB9  +
mov esi offset dword_1064BA8 +
push esi  +
lea ecx [ebp-10h] +
call sub_1015076  +
and dword ptr [ebp-4] 0 +
push esi  +
lea ecx [ebp-14h] +
call sub_1015076  +
lea eax [ebp-14h] +
push eax  +
push dword ptr [ebp+0Ch]  +
mov byte ptr [ebp-4] 1 +
call sub_10368B7  +
test eax eax +
lea eax [ebp-10h] +
jz loc_101681F  +
push dword ptr [ebp-14h]  +
push dword ptr [ebp+0Ch]  +
push offset aErrorCode0xXS  +
push eax  +
call sub_1015A11  +
add esp 10h +
jmp loc_1016830  +
push dword ptr [ebp+0Ch]  +
push offset aErrorCode0xX_  +
push eax  +
call sub_1015A11  +
add esp 0Ch +
push 0FFFFFFFFh  +
lea ecx [ebp-10h] +
call sub_1015023  +
push dword ptr [ebp+8]  +
lea eax [ebp-1Ch] +
push eax  +
call sub_1016141  +
push dword ptr [ebp+10h]  +
mov byte ptr [ebp-4] 2 +
push eax  +
lea eax [ebp-18h] +
push eax  +
call sub_1015847  +
lea ecx [ebp-10h] +
push ecx  +
push eax  +
lea eax [ebp+8] +
push eax  +
mov byte ptr [ebp-4] 3 +
call sub_10157ED  +
push offset asc_10022F0  +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
mov byte ptr [ebp-4] 4 +
call sub_1015847  +
push eax  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 5 +
call sub_1015959  +
mov ecx [ebp+0Ch] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-1Ch] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 1 +
call sub_10147CD  +
mov esi [ebp-10h] +
push dword ptr [esi-0Ch]  +
mov ecx offset unk_1064714 +
push esi  +
call sub_101FDE6  +
cmp dword_106470C 0 +
jz loc_10168D9  +
push esi  +
call sub_102023E  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
lea ecx [esi-10h] +
call sub_10147CD  +
call sub_1021FA5  +
retn 0Ch  +
***
call sub_1021EB9  +
push offset dword_1064BA8  +
lea ecx [ebp-10h] +
call sub_1015076  +
and dword ptr [ebp-4] 0 +
lea eax [ebp+10h] +
push eax  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-10h] +
call sub_101578B  +
push dword ptr [ebp+8]  +
lea eax [ebp-1Ch] +
push eax  +
call sub_1016141  +
lea ecx [ebp-10h] +
push ecx  +
push eax  +
lea eax [ebp-18h] +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_10157ED  +
push offset asc_10022F0  +
push eax  +
lea eax [ebp-14h] +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_1015847  +
push eax  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 3 +
call sub_1015959  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-1Ch] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 0 +
call sub_10147CD  +
mov esi [ebp-10h] +
push dword ptr [esi-0Ch]  +
mov ecx offset unk_1064714 +
push esi  +
call sub_101FDE6  +
cmp dword_106470C 0 +
jz loc_10169A8  +
push esi  +
call sub_102023E  +
lea ecx [esi-10h] +
call sub_10147CD  +
call sub_1021FA5  +
retn   +
***
call sub_1021EB9  +
mov esi offset dword_1064BA8 +
push esi  +
lea ecx [ebp-10h] +
call sub_1015076  +
and dword ptr [ebp-4] 0 +
lea eax [ebp+14h] +
push eax  +
push dword ptr [ebp+10h]  +
lea ecx [ebp-10h] +
call sub_101578B  +
push esi  +
lea ecx [ebp-14h] +
call sub_1015076  +
lea eax [ebp-14h] +
push eax  +
push dword ptr [ebp+0Ch]  +
mov byte ptr [ebp-4] 1 +
call sub_10368B7  +
test eax eax +
lea eax [ebp-10h] +
jz loc_1016A1E  +
push dword ptr [ebp-14h]  +
push dword ptr [ebp+0Ch]  +
push offset aErrorCode0xXS  +
push eax  +
call sub_1015A2C  +
add esp 10h +
jmp loc_1016A2F  +
push dword ptr [ebp+0Ch]  +
push offset aErrorCode0xX_  +
push eax  +
call sub_1015A2C  +
add esp 0Ch +
push 0FFFFFFFFh  +
lea ecx [ebp-10h] +
call sub_1015023  +
push dword ptr [ebp+8]  +
lea eax [ebp-20h] +
push eax  +
call sub_1016141  +
lea ecx [ebp-10h] +
push ecx  +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_10157ED  +
push offset asc_10022F0  +
push eax  +
lea eax [ebp-18h] +
push eax  +
mov byte ptr [ebp-4] 3 +
call sub_1015847  +
push eax  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 4 +
call sub_1015959  +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-1Ch] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-20h] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 1 +
call sub_10147CD  +
mov esi [ebp-10h] +
push dword ptr [esi-0Ch]  +
mov ecx offset unk_1064714 +
push esi  +
call sub_101FDE6  +
cmp dword_106470C 0 +
jz loc_1016ABC  +
push esi  +
call sub_102023E  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
lea ecx [esi-10h] +
call sub_10147CD  +
call sub_1021FA5  +
retn   +
***
call sub_1021EB9  +
lea eax [ebp-20h] +
push eax  +
call ds:GetLocalTime  +
push offset dword_1064BA8  +
lea ecx [ebp-10h] +
call sub_1015076  +
movzx eax word ptr [ebp-14h] +
push eax  +
movzx eax word ptr [ebp-16h] +
push eax  +
movzx eax word ptr [ebp-18h] +
and dword ptr [ebp-4] 0 +
push eax  +
movzx eax word ptr [ebp-20h] +
push eax  +
movzx eax word ptr [ebp-1Ah] +
push eax  +
movzx eax word ptr [ebp-1Eh] +
push eax  +
lea eax [ebp-10h] +
push offset a02d02d04d02d02  +
push eax  +
call sub_1015A11  +
mov esi [ebp-10h] +
add esp 20h +
push esi  +
push 1  +
call sub_1016717  +
lea ecx [esi-10h] +
call sub_10147CD  +
call sub_1021FA5  +
retn   +
***
call sub_1021F2C  +
push offset dword_1064BA8  +
lea ecx [ebp-130h] +
call sub_1015076  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-130h] +
push eax  +
push lptstrFilename  +
call sub_1035F52  +
xor edi edi +
push offset asc_10025F8  +
inc edi  +
push edi  +
call sub_1016717  +
call sub_1016ADA  +
push dword ptr [ebp-130h]  +
push offset aProductVersion  +
push edi  +
call sub_10168F9  +
mov esi 11Ch +
push esi  +
lea eax [ebp-12Ch] +
push 0  +
push eax  +
call sub_10219E0  +
add esp 18h +
lea eax [ebp-12Ch] +
mov [ebp-12Ch] esi +
mov esi ds:GetVersionExW +
push eax  +
call esi  +
test eax eax +
jnz loc_1016BF2  +
lea eax [ebp-12Ch] +
push eax  +
mov dword ptr [ebp-12Ch] 114h +
call esi  +
test eax eax +
jz loc_1016C78  +
cmp dword ptr [ebp-11Ch] 2 +
mov eax [ebp-120h] +
jz loc_1016C04  +
movzx eax ax +
lea ecx [ebp-118h] +
push ecx  +
push eax  +
push dword ptr [ebp-124h]  +
push dword ptr [ebp-128h]  +
push offset aVersionU_U_US  +
push edi  +
call sub_10168F9  +
add esp 18h +
cmp dword ptr [ebp-11Ch] 2 +
mov eax offset aNt +
jz loc_1016C39  +
mov eax offset a9x +
push eax  +
push dword ptr [ebp-11Ch]  +
push offset aPlatformIdUS  +
push edi  +
call sub_10168F9  +
movzx eax word ptr [ebp-16h] +
push eax  +
movzx eax word ptr [ebp-18h] +
push eax  +
push offset aServicePackU_U  +
push edi  +
call sub_10168F9  +
movzx eax byte ptr [ebp-12h] +
push eax  +
movzx eax word ptr [ebp-14h] +
push eax  +
push offset aSuite0x04xProd  +
push edi  +
call sub_10168F9  +
add esp 30h +
push offset aArchitectureX8  +
push edi  +
call sub_1016717  +
call sub_1014631  +
cmp eax edi +
jz loc_1016CA5  +
cmp eax 2 +
jnz loc_1016C99  +
push offset aRunningUnderLo  +
push edi  +
jmp loc_1016CA0  +
push offset aFailedToCheckI  +
push 2  +
call sub_1016717  +
call sub_10145F1  +
test eax eax +
jz loc_1016CB5  +
push offset aInteractiveWin  +
jmp loc_1016CBA  +
push offset aNonInteractive  +
push edi  +
call sub_1016717  +
mov ecx [ebp-130h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
call sub_1021FBE  +
retn   +
***
call sub_1021EB9  +
mov esi ecx +
call sub_101512A  +
mov edi [esi+10h] +
mov ebx [edi] +
mov [ebp-10h] edi +
mov [ebp-14h] edi +
and dword ptr [ebp-4] 0 +
test edi edi +
jz loc_1016D09  +
push dword ptr [ebp+8]  +
mov ecx edi +
call sub_10161ED  +
mov eax [ebp+0Ch] +
mov [esi+10h] ebx +
mov [edi+4] eax +
mov eax [ebp+10h] +
mov [edi] eax +
inc dword ptr [esi+8]  +
mov eax edi +
call sub_1021FA5  +
retn 0Ch  +
***
call sub_1021EB9  +
mov esi offset dword_1064BA8 +
xor ebx ebx +
push esi  +
lea ecx [ebp-14h] +
mov [ebp-10h] ebx +
call sub_1015076  +
push esi  +
lea ecx [ebp-18h] +
mov [ebp-4] ebx +
call sub_1015076  +
mov eax [ebp+8] +
mov eax [eax] +
mov byte ptr [ebp-4] 1 +
mov [ebp-24h] eax +
cmp eax ebx +
jz loc_1016EA1  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call sub_105038C  +
push eax  +
lea ecx [ebp-14h] +
call sub_1015959  +
xor esi esi +
cmp [ebp+14h] ebx +
jnz loc_1016DF7  +
lea ecx [ebp-3Ch] +
call sub_1014C71  +
lea eax [ebp-3Ch] +
push eax  +
push ecx  +
lea eax [ebp-14h] +
mov [ebp-20h] esp +
mov ecx esp +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_10150A5  +
call sub_1037E47  +
cmp eax ebx +
jz loc_1016DE0  +
lea eax [ebp-3Ch] +
push eax  +
push offset DialogFunc  +
push ebx  +
push 3ECh  +
push hInstance  +
call ds:DialogBoxParamW  +
cmp eax 1 +
jz loc_1016DE0  +
push dword ptr [ebp-14h]  +
push offset aUserCancelledU  +
push 1  +
call sub_10168F9  +
add esp 0Ch +
jmp loc_1016DE3  +
xor esi esi +
inc esi  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 1 +
call loc_1014AB9  +
cmp esi ebx +
jz loc_1016E93  +
mov [ebp-20h] ebx +
cmp [ebp+10h] ebx +
jnz loc_1016E17  +
lea eax [ebp-18h] +
push eax  +
push ecx  +
lea eax [ebp-14h] +
mov [ebp-1Ch] esp +
mov ecx esp +
push eax  +
call sub_10150A5  +
call sub_103633A  +
mov esi ds:off_1013E38 +
mov [ebp-1Ch] ebx +
jmp loc_1016E35  +
cmp eax 2 +
jz loc_1016E7D  +
cmp eax 20h +
jnz loc_1016E88  +
inc dword ptr [ebp-1Ch]  +
cmp dword ptr [ebp-1Ch] 3 +
ja loc_1016E88  +
lea eax [ebp-20h] +
push eax  +
push ebx  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp-14h]  +
call esi  +
cmp eax ebx +
jnz loc_1016E22  +
mov eax [ebp+18h] +
inc dword ptr [eax]  +
cmp [ebp+10h] ebx +
jnz loc_1016E6F  +
lea eax [ebp-18h] +
push eax  +
call sub_1037003  +
test eax eax +
jnz loc_1016E6F  +
push dword ptr [ebp-18h]  +
push offset aFailedToDelete  +
push 2  +
call sub_10168F9  +
add esp 0Ch +
cmp [ebp-20h] ebx +
jz loc_1016E98  +
or dword ptr [ebp-10h] 40000000h +
jmp loc_1016E98  +
or dword ptr [ebp-10h] 80000000h +
inc dword ptr [edi]  +
jmp loc_1016E4B  +
or dword ptr [ebp-10h] 80000000h +
inc dword ptr [edi]  +
jmp loc_1016E6F  +
mov eax [ebp+1Ch] +
inc dword ptr [eax]  +
cmp [ebp-24h] ebx +
jnz loc_1016D68  +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov eax [ebp-10h] +
call sub_1021FA5  +
retn 18h  +
***
call sub_1021EB9  +
push offset dword_1064BA8  +
lea ecx [ebp-10h] +
call sub_1015076  +
and dword ptr [ebp-4] 0 +
call sub_10200AD  +
test eax eax +
jz loc_1016EFB  +
mov ecx edi +
call sub_101633E  +
call sub_101FFAF  +
jmp loc_1016F44  +
mov eax [edi] +
cmp dword ptr [eax-0Ch] 0 +
mov esi offset lpString +
jz loc_1016F21  +
push offset Buffer  +
mov ecx esi +
call sub_10158CD  +
mov eax [edi] +
push dword ptr [eax-0Ch]  +
mov ecx esi +
push eax  +
call sub_10155F6  +
push 0  +
push offset sub_101620C  +
push 0  +
push 2EE0h  +
push dword ptr [ebp+8]  +
call ds:DialogBoxParamW  +
push offset word_10022EC  +
mov ecx esi +
call sub_10158CD  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EB9  +
call sub_1035328  +
cmp eax 3 +
jz loc_1016F83  +
cmp eax 4 +
jz loc_1016F83  +
cmp eax 5 +
jz loc_1016F83  +
xor eax eax +
jmp loc_1017005  +
call sub_1035240  +
test eax eax +
jnz loc_1016F7C  +
cmp [ebp+8] eax +
jnz loc_1016FF6  +
mov esi offset dword_1064BA8 +
push esi  +
lea ecx [ebp-10h] +
call sub_1015076  +
and dword ptr [ebp-4] 0 +
push esi  +
lea ecx [ebp+8] +
call sub_1015076  +
lea eax [ebp-10h] +
push eax  +
push 1388h  +
mov byte ptr [ebp-4] 1 +
call sub_10208E1  +
lea eax [ebp+8] +
push eax  +
push 138Bh  +
call sub_10208E1  +
push 30h  +
push dword ptr [ebp-10h]  +
push dword ptr [ebp+8]  +
push 0  +
call ds:MessageBoxW  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
push offset aAccessDeniedTo  +
push 3  +
call sub_1016717  +
push 5  +
pop eax  +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EB9  +
call sub_1035328  +
cmp eax 3 +
jz loc_10170C2  +
cmp eax 4 +
jz loc_10170C2  +
cmp eax 5 +
jz loc_10170C2  +
cmp eax 6 +
jge loc_10170C2  +
cmp dword ptr [ebp+8] 0 +
jnz loc_10170AE  +
mov esi offset dword_1064BA8 +
push esi  +
lea ecx [ebp-10h] +
call sub_1015076  +
and dword ptr [ebp-4] 0 +
push esi  +
lea ecx [ebp+8] +
call sub_1015076  +
lea eax [ebp+8] +
push eax  +
push 13C2h  +
mov byte ptr [ebp-4] 1 +
call sub_10208E1  +
lea eax [ebp-10h] +
push eax  +
push 1388h  +
call sub_10208E1  +
push 30h  +
push dword ptr [ebp-10h]  +
push dword ptr [ebp+8]  +
push 0  +
call ds:MessageBoxW  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
push offset aDpinst_exeNotS  +
push 3  +
call sub_1016717  +
push 0Ah  +
pop eax  +
jmp loc_1017158  +
call sub_10352BF  +
test eax eax +
jz loc_1017150  +
cmp dword ptr [ebp+8] 0 +
jnz loc_101713D  +
mov esi offset dword_1064BA8 +
push esi  +
lea ecx [ebp-18h] +
call sub_1015076  +
push esi  +
lea ecx [ebp-14h] +
mov dword ptr [ebp-4] 2 +
call sub_1015076  +
lea eax [ebp-18h] +
push eax  +
push 1388h  +
mov byte ptr [ebp-4] 3 +
call sub_10208E1  +
lea eax [ebp-14h] +
push eax  +
push 13ACh  +
call sub_10208E1  +
push 30h  +
push dword ptr [ebp-18h]  +
push dword ptr [ebp-14h]  +
push 0  +
call ds:MessageBoxW  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-18h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
push offset aSystemRequires  +
push 3  +
call sub_1016717  +
mov eax 0E0000235h +
jmp loc_1017158  +
push dword ptr [ebp+8]  +
call sub_1016F5C  +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EB9  +
xor ebx ebx +
xor eax eax +
mov [ebp-10h] ebx +
cmp ax di +
jnz loc_101723C  +
call sub_101A853  +
test eax eax +
jz loc_10172C2  +
call ds:GetUserDefaultUILanguage  +
movzx esi ax +
push esi  +
call sub_101B74A  +
test eax eax +
movzx eax si +
push eax  +
jz loc_10171B1  +
push offset aUserUiLanguage  +
push 1  +
jmp loc_10172BA  +
cmp [ebp+0Ch] ebx +
jz loc_10171BD  +
push offset aWillEnableLang  +
jmp loc_10171AA  +
push offset aCurrentConfigu  +
push 3  +
call sub_10168F9  +
add esp 0Ch +
cmp [ebp+8] ebx +
jnz loc_1017230  +
mov esi offset dword_1064BA8 +
push esi  +
lea ecx [ebp+8] +
call sub_1015076  +
push esi  +
lea ecx [ebp+0Ch] +
mov [ebp-4] ebx +
call sub_1015076  +
lea eax [ebp+8] +
push eax  +
push 1388h  +
mov byte ptr [ebp-4] 1 +
call sub_10208E1  +
lea eax [ebp+0Ch] +
push eax  +
push 13C7h  +
call sub_10208E1  +
push 30h  +
push dword ptr [ebp+8]  +
push dword ptr [ebp+0Ch]  +
push ebx  +
call ds:MessageBoxW  +
mov ecx [ebp+0Ch] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov dword ptr [ebp-10h] 717h +
jmp loc_10172C2  +
mov esi ds:GetUserDefaultUILanguage +
call esi  +
cmp ax di +
jz loc_10172C2  +
push 1  +
push 10h  +
push edi  +
call sub_1020728  +
test eax eax +
jnz loc_10172AF  +
movzx ebx di +
push ebx  +
push offset aRunningWithLan  +
push 1  +
call sub_10168F9  +
add esp 0Ch +
call sub_101A853  +
test eax eax +
jz loc_10172C2  +
push edi  +
call sub_101B864  +
test eax eax +
jz loc_10172A7  +
call esi  +
cmp ax di +
jnz loc_101728F  +
push ebx  +
push offset aWillReadDescri  +
jmp loc_10171AA  +
call esi  +
movzx eax ax +
push eax  +
push ebx  +
push offset aWillReadDesc_0  +
push 1  +
call sub_10168F9  +
add esp 10h +
jmp loc_10172C2  +
push ebx  +
push offset aDescriptorDpin  +
jmp loc_10172B8  +
movzx eax di +
push eax  +
push offset aRequestedLangu  +
push 2  +
call sub_10168F9  +
add esp 0Ch +
mov eax [ebp-10h] +
call sub_1021FA5  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+0Ch] 0 +
push dword ptr [ebp+10h]  +
jnz loc_10172EA  +
push dword ptr [ebp+8]  +
call sub_1016717  +
pop ebp  +
retn   +
***
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_10167CB  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0  +
mov esi ecx +
push dword ptr [esi+4]  +
push [ebp+arg_0]  +
call sub_1016CD9  +
mov ecx [esi+4] +
test ecx ecx +
jz loc_101731C  +
mov [ecx] eax +
jmp loc_101731E  +
mov [esi] eax +
mov [esi+4] eax +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1021EB9  +
mov esi ecx +
push 0Ah  +
lea ecx [ebp-2Ch] +
call sub_101C247  +
lea edi [esi+34h] +
mov eax [edi] +
xor ebx ebx +
mov [ebp-4] ebx +
cmp [eax-0Ch] ebx +
jnz loc_1017361  +
push edi  +
call sub_1036816  +
test eax eax +
jz loc_101737C  +
jmp loc_101773C  +
push ebx  +
push edi  +
push ecx  +
mov ecx esp +
mov [ebp-10h] esp +
push edi  +
call sub_10151F2  +
call sub_1036735  +
cmp eax ebx +
jnz loc_101773C  +
push edi  +
call sub_1035522  +
push dword ptr [edi]  +
test al al +
jz loc_101772D  +
xor edi edi +
push offset aRunningOnPathW  +
inc edi  +
push edi  +
call sub_10168F9  +
pop ecx  +
pop ecx  +
mov ecx esp +
mov [ebp-14h] esp +
push off_1063130  +
call sub_10161A7  +
call sub_101C023  +
cmp eax ebx +
jnz loc_10173C9  +
push off_1063130  +
push offset aNoValidSFilePr  +
push edi  +
call sub_10168F9  +
add esp 0Ch +
call sub_101A853  +
test eax eax +
jz loc_10174BB  +
cmp [esi+0Ch] ebx +
jnz loc_10173E6  +
push 8  +
call sub_101B408  +
test eax eax +
jz loc_10173E8  +
mov eax edi +
mov [esi+0Ch] eax +
cmp [esi+10h] ebx +
jnz loc_10173FA  +
push ebx  +
call sub_101B408  +
test eax eax +
jz loc_10173FC  +
mov eax edi +
mov [esi+10h] eax +
cmp [esi+1Ch] ebx +
jnz loc_101740E  +
push edi  +
call sub_101B408  +
test eax eax +
jz loc_1017410  +
mov eax edi +
mov [esi+1Ch] eax +
cmp [esi+20h] ebx +
jnz loc_1017423  +
push 2  +
call sub_101B408  +
test eax eax +
jz loc_1017425  +
mov eax edi +
mov [esi+20h] eax +
cmp [esi+28h] ebx +
jnz loc_1017438  +
push 6  +
call sub_101B408  +
test eax eax +
jz loc_101743A  +
mov eax edi +
mov [esi+28h] eax +
cmp [esi+2Ch] ebx +
jnz loc_101744D  +
push 4  +
call sub_101B408  +
test eax eax +
jz loc_101744F  +
mov eax edi +
mov [esi+2Ch] eax +
cmp [esi+30h] ebx +
jnz loc_1017462  +
push 3  +
call sub_101B408  +
test eax eax +
jz loc_1017464  +
mov eax edi +
mov [esi+30h] eax +
cmp [esi+38h] ebx +
jnz loc_1017477  +
push 5  +
call sub_101B408  +
test eax eax +
jz loc_1017479  +
mov eax edi +
mov [esi+38h] eax +
cmp [esi+44h] ebx +
jnz loc_101748C  +
push 9  +
call sub_101B408  +
test eax eax +
jz loc_101748E  +
mov eax edi +
mov [esi+44h] eax +
cmp [esi+14h] ebx +
jnz loc_10174A1  +
push 7  +
call sub_101B408  +
test eax eax +
jz loc_10174A3  +
mov eax edi +
mov [esi+14h] eax +
cmp [esi+50h] ebx +
jnz loc_10174B6  +
push 0Ah  +
call sub_101B408  +
test eax eax +
jz loc_10174B8  +
mov eax edi +
mov [esi+50h] eax +
cmp [esi+0Ch] ebx +
jnz loc_10174C9  +
cmp [esi+10h] ebx +
jnz loc_10174C9  +
xor eax eax +
jmp loc_10174CB  +
mov eax edi +
push dword ptr [esi+38h]  +
mov di [esi+8] +
push eax  +
call sub_1017165  +
test eax eax +
jz loc_10174E6  +
call sub_101ABAE  +
jmp loc_101773C  +
cmp [esi+0Ch] ebx +
jnz loc_10174F4  +
cmp [esi+10h] ebx +
jnz loc_10174F4  +
xor eax eax +
jmp loc_10174F7  +
xor eax eax +
inc eax  +
push eax  +
call sub_1017012  +
cmp eax ebx +
jnz loc_10174DC  +
cmp [esi+1Ch] ebx +
jz loc_101751A  +
cmp [esi+20h] ebx +
jz loc_101751A  +
push offset aInstallOptionR  +
push 2  +
mov [esi+20h] ebx +
call sub_1016717  +
cmp [esi+0Ch] ebx +
jnz loc_1017524  +
cmp [esi+10h] ebx +
jz loc_101753B  +
cmp [esi+1Ch] ebx +
jz loc_101753B  +
push offset aInstallOptio_0  +
push 2  +
mov [esi+0Ch] ebx +
mov [esi+10h] ebx +
call sub_1016717  +
cmp [esi+0Ch] ebx +
jnz loc_1017545  +
cmp [esi+10h] ebx +
jz loc_1017565  +
cmp [esi+18h] ebx +
jnz loc_1017565  +
call sub_101B9B2  +
test eax eax +
jz loc_1017565  +
push offset aInstallOptio_1  +
push 2  +
mov [esi+0Ch] ebx +
mov [esi+10h] ebx +
call sub_1016717  +
cmp [esi+50h] ebx +
jz loc_101757E  +
cmp [esi+28h] ebx +
jnz loc_101757E  +
push offset aInstallOptio_2  +
push 2  +
mov [esi+50h] ebx +
call sub_1016717  +
cmp [esi+0Ch] ebx +
jnz loc_1017588  +
cmp [esi+10h] ebx +
jz loc_101759C  +
cmp [esi+4Ch] ebx +
jz loc_101759C  +
push offset aInstallOptio_3  +
push 2  +
mov [esi+4Ch] ebx +
call sub_1016717  +
cmp [esi+0Ch] ebx +
jz loc_10175AD  +
push offset aInstallOptionS  +
push 1  +
call sub_1016717  +
cmp [esi+10h] ebx +
jz loc_10175BE  +
push offset aInstallOptio_4  +
push 1  +
call sub_1016717  +
cmp [esi+14h] ebx +
jz loc_10175CF  +
push offset aInstallOptio_5  +
push 1  +
call sub_1016717  +
cmp [esi+18h] ebx +
jz loc_10175E0  +
push offset aInstallOptio_6  +
push 1  +
call sub_1016717  +
lea edi [esi+24h] +
mov eax [edi] +
cmp [eax-0Ch] ebx +
jz loc_10175FA  +
push eax  +
push offset aInstallOptio_7  +
push 1  +
call sub_10168F9  +
add esp 0Ch +
cmp [esi+1Ch] ebx +
jz loc_101760B  +
push offset aInstallOptio_8  +
push 1  +
call sub_1016717  +
cmp [esi+20h] ebx +
jz loc_101761C  +
push offset aInstallOptio_9  +
push 1  +
call sub_1016717  +
cmp [esi+28h] ebx +
jz loc_101762D  +
push offset aInstallOpti_10  +
push 1  +
call sub_1016717  +
cmp [esi+2Ch] ebx +
jz loc_101763E  +
push offset aInstallOpti_11  +
push 1  +
call sub_1016717  +
cmp [esi+30h] ebx +
jz loc_101764F  +
push offset aInstallOpti_12  +
push 1  +
call sub_1016717  +
cmp [esi+44h] ebx +
jz loc_1017660  +
push offset aInstallOpti_13  +
push 1  +
call sub_1016717  +
cmp [esi+4Ch] ebx +
jz loc_1017671  +
push offset aInstallOpti_14  +
push 1  +
call sub_1016717  +
cmp [esi+50h] ebx +
jz loc_1017682  +
push offset aInstallOpti_15  +
push 1  +
call sub_1016717  +
push dword ptr [esi+44h]  +
push dword ptr [esi+2Ch]  +
push dword ptr [esi+30h]  +
push dword ptr [esi+28h]  +
push dword ptr [esi+20h]  +
push dword ptr [esi+1Ch]  +
push ecx  +
mov ecx esp +
mov [ebp-14h] esp +
push edi  +
call sub_10151F2  +
push dword ptr [esi+14h]  +
lea eax [esi+34h] +
push dword ptr [esi+10h]  +
push dword ptr [esi+0Ch]  +
push eax  +
call sub_101D04F  +
cmp [esi+0Ch] ebx +
jnz loc_10176DA  +
cmp [esi+10h] ebx +
jnz loc_10176DA  +
push dword ptr [esi+50h]  +
push dword ptr [esi+4Ch]  +
push dword ptr [esi+18h]  +
call sub_101A254  +
test eax eax +
jnz loc_10176E1  +
call sub_1018253  +
call sub_101822D  +
jmp loc_10176E1  +
push ebx  +
push ebx  +
call sub_101EE89  +
lea eax [ebp-2Ch] +
push eax  +
lea eax [ebp-10h] +
push eax  +
call sub_101D292  +
mov edi eax +
cmp edi ebx +
jz loc_1017708  +
cmp [esi+0Ch] ebx +
jnz loc_1017708  +
cmp [esi+10h] ebx +
jnz loc_1017708  +
push 2  +
push ebx  +
push ebx  +
call ds:SHELL32_59  +
lea eax [ebp-2Ch] +
push eax  +
push dword ptr [ebp-10h]  +
push edi  +
call sub_1016579  +
mov esi eax +
call sub_101C325  +
call sub_101ABAE  +
lea ecx [ebp-2Ch] +
call loc_1014B04  +
mov eax esi +
jmp loc_1017749  +
push offset aInvalidPathWs  +
push 3  +
call sub_10168F9  +
add esp 0Ch +
lea ecx [ebp-2Ch] +
call loc_1014B04  +
mov eax 80000000h +
call sub_1021FA5  +
retn   +
***
call sub_1021EB9  +
xor edi edi +
lea ecx [ebp-20h] +
mov [ebp-14h] edi +
call sub_10202A1  +
push offset dword_1064BA8  +
lea ecx [ebp-10h] +
mov [ebp-4] edi +
call sub_1015076  +
mov ecx ebx +
mov byte ptr [ebp-4] 1 +
call loc_1014AB9  +
push dword ptr [esi]  +
lea ecx [ebp-20h] +
call sub_10202B3  +
test eax eax +
jz loc_1017865  +
jmp loc_1017836  +
push eax  +
lea ecx [ebp-10h] +
call sub_1015707  +
lea ecx [ebp-10h] +
call sub_101575C  +
push offset aInf  +
lea ecx [ebp-10h] +
call sub_101492B  +
test eax eax +
jnz loc_10177DE  +
lea ecx [ebp-20h] +
call sub_10202E5  +
cmp eax edi +
jz loc_1017887  +
push eax  +
lea ecx [ebp-10h] +
call sub_1015707  +
mov ecx ebx +
jmp loc_101780B  +
push offset aUscript  +
lea ecx [ebp-10h] +
call sub_101492B  +
test eax eax +
jnz loc_1017815  +
lea ecx [ebp-20h] +
call sub_10202E5  +
cmp eax edi +
jz loc_101789A  +
push eax  +
lea ecx [ebp-10h] +
call sub_1015707  +
mov ecx [ebp+8] +
push dword ptr [ebp-10h]  +
call sub_10172FC  +
jmp loc_1017836  +
push offset aId  +
lea ecx [ebp-10h] +
call sub_101492B  +
test eax eax +
jnz loc_10178AC  +
lea ecx [ebp-20h] +
call sub_10202E5  +
cmp eax edi +
jz loc_10178A3  +
lea ecx [ebp-20h] +
call sub_10202E5  +
cmp eax edi +
jnz loc_101779F  +
cmp [ebx+8] edi +
jnz loc_1017856  +
mov eax [ebp+8] +
mov [ebp-14h] edi +
cmp [eax+8] edi +
jz loc_101785D  +
mov dword ptr [ebp-14h] 1 +
lea ecx [ebp-20h] +
call sub_10203E4  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call sub_1020416  +
mov eax [ebp-14h] +
call sub_1021FA5  +
retn 4  +
push dword ptr [esi]  +
push offset aInvalidUninsta  +
push 3  +
call sub_10168F9  +
add esp 0Ch +
jmp loc_101785D  +
push dword ptr [esi]  +
push offset aInvalidUnins_0  +
jmp loc_101788E  +
push dword ptr [esi]  +
push offset aInvalidUnins_1  +
jmp loc_101788E  +
push dword ptr [ebp-10h]  +
push dword ptr [esi]  +
push offset aInvalidUnins_2  +
push 3  +
call sub_10168F9  +
add esp 10h +
jmp loc_101785D  +
***
call sub_1021EB9  +
mov esi offset dword_1064BA8 +
push esi  +
lea ecx [ebp-10h] +
call sub_1015076  +
xor ebx ebx +
lea ecx [ebp-60h] +
mov [ebp-4] ebx +
call sub_1014C71  +
lea ecx [ebp-48h] +
call sub_1014C71  +
push esi  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 2 +
call sub_1015076  +
push esi  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 3 +
mov [ebp-20h] ebx +
mov [ebp-28h] ebx +
mov [ebp-2Ch] ebx +
mov [ebp-24h] ebx +
call sub_1015076  +
push esi  +
lea ecx [ebp-18h] +
mov byte ptr [ebp-4] 4 +
call sub_1015076  +
mov edi [ebp+8] +
push ebx  +
lea eax [ebp-10h] +
push eax  +
push ecx  +
mov ecx esp +
mov [ebp-30h] esp +
push edi  +
mov byte ptr [ebp-4] 5 +
call sub_10151F2  +
call sub_1036735  +
cmp eax ebx +
jz loc_1017990  +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-1Ch] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
lea ecx [ebp-48h] +
call loc_1014AB9  +
lea ecx [ebp-60h] +
call loc_1014AB9  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov eax 80000000h +
jmp loc_1017BA5  +
lea ecx [ebp-10h] +
call sub_101575C  +
mov ecx [ebp+14h] +
lea eax [ebp-10h] +
push eax  +
call sub_101CB94  +
cmp eax 0FFFFFFFFh +
jnz loc_1017B56  +
mov ecx [ebp+14h] +
lea eax [ebp+8] +
push eax  +
lea eax [ebp-10h] +
push eax  +
mov dword ptr [ebp+8] 1 +
call sub_10158FD  +
lea eax [ebp-10h] +
push eax  +
call sub_1035549  +
test al al +
jz loc_1017B14  +
lea eax [ebp-48h] +
push eax  +
lea ebx [ebp-60h] +
lea esi [ebp-10h] +
call sub_1017754  +
test eax eax +
jnz loc_10179FE  +
push dword ptr [edi]  +
push offset aInvalidUnins_3  +
push 3  +
call sub_10168F9  +
add esp 0Ch +
jmp loc_101794A  +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-10h] +
push eax  +
call sub_1036032  +
lea eax [ebp-14h] +
push eax  +
call sub_10370E1  +
test eax eax +
jz loc_1017A23  +
mov dword ptr [ebp-20h] 1 +
lea eax [ebp-24h] +
push eax  +
lea eax [ebp-28h] +
push eax  +
push dword ptr [ebp+10h]  +
lea eax [ebp-60h] +
push dword ptr [ebp-20h]  +
lea edi [ebp-2Ch] +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_1016D29  +
cmp dword ptr [ebp-20h] 0 +
mov edi [ebp-28h] +
mov ebx [ebp-2Ch] +
mov [ebp+8] eax +
jz loc_1017A81  +
cmp dword ptr [ebp-24h] 0 +
jnz loc_1017A81  +
cmp edi ebx +
jbe loc_1017A81  +
lea eax [ebp-14h] +
push eax  +
call sub_1037003  +
test eax eax +
jnz loc_1017A78  +
push dword ptr [ebp-14h]  +
push offset aFailedToDelete  +
push 2  +
call sub_10168F9  +
add esp 0Ch +
lea eax [ebp-10h] +
push eax  +
call sub_103559E  +
mov esi [ebp+18h] +
add [esi] edi +
mov edi [ebp+1Ch] +
add [edi] ebx +
mov eax [ebp-24h] +
mov ebx [ebp+20h] +
add [ebx] eax +
mov eax [ebp-48h] +
mov [ebp+18h] eax +
test eax eax +
jz loc_1017AD0  +
lea eax [ebp+18h] +
push eax  +
lea ecx [ebp-48h] +
call sub_105038C  +
push eax  +
lea ecx [ebp-1Ch] +
call sub_1015959  +
push ebx  +
push edi  +
push esi  +
push dword ptr [ebp+14h]  +
lea eax [ebp-1Ch] +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_10178C7  +
or [ebp+8] eax +
cmp dword ptr [ebp+18h] 0 +
jnz loc_1017A9D  +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-1Ch] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
lea ecx [ebp-48h] +
call loc_1014AB9  +
lea ecx [ebp-60h] +
call loc_1014AB9  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov eax [ebp+8] +
jmp loc_1017BA5  +
push dword ptr [edi]  +
push offset aUninstallScrip  +
push 3  +
call sub_10168F9  +
add esp 0Ch +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-10h] +
push eax  +
call sub_1036032  +
lea eax [ebp-14h] +
push eax  +
call sub_1037003  +
test eax eax +
jnz loc_101794A  +
push dword ptr [ebp-14h]  +
push offset aFailedToDelete  +
push 2  +
jmp loc_10179F1  +
push dword ptr [edi]  +
push offset aUninstallScr_0  +
push 2  +
call sub_10168F9  +
mov ecx [ebp-18h] +
add esp 0Ch +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-1Ch] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
lea ecx [ebp-48h] +
call loc_1014AB9  +
lea ecx [ebp-60h] +
call loc_1014AB9  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
xor eax eax +
call sub_1021FA5  +
retn 1Ch  +
***
call sub_1021EB9  +
xor ebx ebx +
xor edi edi +
mov [ebp-18h] ebx +
mov [ebp-1Ch] ebx +
mov [ebp-14h] ebx +
cmp [esi+0Ch] ebx +
jnz loc_1017BD9  +
cmp [esi+10h] ebx +
jnz loc_1017BD9  +
xor eax eax +
jmp loc_1017BDC  +
xor eax eax +
inc eax  +
push eax  +
call sub_1016F5C  +
test eax eax +
jz loc_1017BF0  +
mov eax 80000000h +
jmp loc_1017D78  +
cmp [esi+0Ch] ebx +
jz loc_1017C01  +
push offset aUninstallOptio  +
push 1  +
call sub_1016717  +
cmp [esi+10h] ebx +
jz loc_1017C12  +
push offset aUninstallOpt_0  +
push 1  +
call sub_1016717  +
mov eax [esi] +
cmp eax 2 +
jnz loc_1017C23  +
push dword ptr [esi+4]  +
push offset aUninstallComma  +
jmp loc_1017C30  +
cmp eax 3 +
jnz loc_1017C3A  +
push dword ptr [esi+4]  +
push offset aUninstallCom_0  +
push 1  +
call sub_10168F9  +
add esp 0Ch +
cmp [esi+44h] ebx +
jz loc_1017C4B  +
push offset aUninstallOpt_1  +
push 1  +
call sub_1016717  +
cmp [esi+0Ch] ebx +
jnz loc_1017C71  +
cmp [esi+10h] ebx +
jnz loc_1017C71  +
call sub_10152B6  +
test eax eax +
jnz loc_1017C71  +
push offset aUserCancelle_0  +
push 1  +
call sub_1016717  +
xor eax eax +
jmp loc_1017D78  +
xor eax eax +
cmp [esi+10h] ebx +
setnz al  +
lea eax [eax+eax+4] +
mov [ebp-10h] eax +
cmp [esi+44h] ebx +
jz loc_1017C89  +
or dword ptr [ebp-10h] 20h +
mov eax [esi] +
cmp eax 2 +
jnz loc_1017CF2  +
lea ecx [ebp-34h] +
call sub_1014C71  +
push dword ptr [esi+4]  +
lea ecx [ebp-34h] +
mov [ebp-4] ebx +
call sub_10172FC  +
push dword ptr [esi+4]  +
push offset aStartingUninst  +
push 1  +
call sub_10168F9  +
add esp 0Ch +
cmp [esi+0Ch] ebx +
jnz loc_1017CC6  +
cmp [esi+10h] ebx +
jnz loc_1017CC6  +
xor eax eax +
jmp loc_1017CC9  +
xor eax eax +
inc eax  +
lea ecx [ebp-14h] +
push ecx  +
lea ecx [ebp-1Ch] +
push ecx  +
push eax  +
push ebx  +
push dword ptr [ebp-10h]  +
lea eax [ebp-34h] +
push eax  +
lea edi [ebp-18h] +
call sub_1016D29  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-34h] +
mov edi eax +
call loc_1014AB9  +
jmp loc_1017D4E  +
cmp eax 3 +
jnz loc_1017D4E  +
lea edi [esi+4] +
push dword ptr [edi]  +
push offset aStartingUnin_0  +
push 1  +
call sub_10168F9  +
add esp 0Ch +
mov [ebp-28h] ebx +
mov [ebp-24h] ebx +
mov [ebp-20h] ebx +
xor eax eax +
inc eax  +
mov [ebp-4] eax +
cmp [esi+0Ch] ebx +
jnz loc_1017D26  +
cmp [esi+10h] ebx +
jnz loc_1017D26  +
xor eax eax +
lea ecx [ebp-14h] +
push ecx  +
lea ecx [ebp-18h] +
push ecx  +
lea ecx [ebp-1Ch] +
push ecx  +
lea ecx [ebp-28h] +
push ecx  +
push eax  +
push dword ptr [ebp-10h]  +
push edi  +
call sub_10178C7  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-28h] +
mov edi eax +
call sub_101550F  +
test edi 40000000h +
jz loc_1017D76  +
push offset aMachineHasToBe  +
push 1  +
call sub_1016717  +
cmp [esi+0Ch] ebx +
jnz loc_1017D76  +
cmp [esi+10h] ebx +
jnz loc_1017D76  +
push 2  +
push ebx  +
push ebx  +
call ds:SHELL32_59  +
mov eax edi +
call sub_1021FA5  +
retn   +
***
call sub_1021F2C  +
mov eax [ebp+8] +
lea ecx [ebp-28Ch] +
mov [ebp-234h] eax +
mov dword ptr [ebp-228h] 80000000h +
call sub_1015288  +
mov esi offset dword_1064BA8 +
xor ebx ebx +
push esi  +
lea ecx [ebp-22Ch] +
mov [ebp-4] ebx +
call sub_1015076  +
push esi  +
lea ecx [ebp-230h] +
mov byte ptr [ebp-4] 1 +
mov [ebp-238h] ebx +
mov [ebp-224h] ebx +
call sub_1015076  +
push ebx  +
mov byte ptr [ebp-4] 2 +
call ds:CoInitialize  +
lea ecx [ebp-288h] +
mov [ebp-28Ch] ebx +
call sub_1014FC6  +
xor eax eax +
lea ecx [ebp-258h] +
mov [ebp-284h] ax +
mov [ebp-280h] ebx +
mov [ebp-27Ch] ebx +
mov [ebp-278h] ebx +
mov [ebp-274h] ebx +
mov [ebp-270h] ebx +
mov [ebp-26Ch] ebx +
mov [ebp-264h] ebx +
mov [ebp-260h] ebx +
mov [ebp-25Ch] ebx +
mov [ebp-254h] ebx +
call sub_1014FC6  +
xor edi edi +
inc edi  +
lea ecx [ebp-244h] +
mov [ebp-250h] edi +
mov [ebp-24Ch] ebx +
mov [ebp-248h] ebx +
call sub_1014FC6  +
push offset lptstrFilename  +
push hInstance  +
mov [ebp-240h] ebx +
mov [ebp-23Ch] ebx +
call sub_1035F03  +
test eax eax +
jz loc_101814D  +
call sub_1035328  +
mov dword_1063148 eax +
call sub_101664B  +
call sub_1016B4E  +
call ds:GetCommandLineW  +
mov esi eax +
lea eax [ebp-238h] +
push eax  +
push esi  +
call ds:CommandLineToArgvW  +
mov [ebp-224h] eax +
cmp eax ebx +
jnz loc_1017EE2  +
push offset asc_10025F8  +
push edi  +
call sub_1016717  +
push offset aFailedToGetCom  +
push 3  +
call sub_1016717  +
jmp loc_101814D  +
push esi  +
push offset aCommandLineS  +
push edi  +
call sub_10168F9  +
add esp 0Ch +
lea eax [ebp-21Ch] +
push eax  +
push offset EnumFunc  +
push edi  +
push 10h  +
push ebx  +
mov [ebp-21Ch] ebx +
call ds:EnumResourceLanguagesW  +
test eax eax +
jz loc_1017F2D  +
cmp dword ptr [ebp-21Ch] 18h +
jnz loc_1017F2D  +
push offset aDpinstIsAMulti  +
push edi  +
call sub_1016717  +
mov [ebp-220h] edi +
jmp loc_1017F42  +
push offset aDpinstIsNotMul  +
push edi  +
call sub_1016717  +
mov dword ptr [ebp-220h] 2 +
mov esi 104h +
push esi  +
lea eax [ebp-218h] +
push eax  +
push ebx  +
call ds:GetModuleFileNameW  +
mov [ebp-21Ch] eax +
call ds:GetLastError  +
cmp [ebp-21Ch] esi +
jnz loc_1017F7C  +
push offset aTheModuleNameW  +
push eax  +
push 3  +
call sub_10167CB  +
jmp loc_101814D  +
cmp [ebp-21Ch] ebx +
jnz loc_1017F8B  +
push offset aThereWasAnErro  +
jmp loc_1017F6F  +
push dword ptr [ebp-220h]  +
lea eax [ebp-218h] +
push hInstance  +
push eax  +
call sub_102083E  +
cmp eax ebx +
jz loc_1017FAE  +
push offset aFailedToInitia  +
jmp loc_1017F6F  +
lea eax [ebp-22Ch] +
push eax  +
push dword ptr [ebp-224h]  +
lea esi [ebp-28Ch] +
push dword ptr [ebp-238h]  +
call sub_1015B11  +
mov esi eax +
mov eax [ebp-244h] +
cmp [eax-0Ch] ebx +
jz loc_1017FE8  +
push eax  +
push offset aTitleS_  +
push edi  +
call sub_10168F9  +
add esp 0Ch +
push offset asc_10025F8  +
push edi  +
call sub_1016717  +
cmp esi ebx +
jnz loc_101801A  +
push dword ptr [ebp-22Ch]  +
push 3  +
call sub_1016717  +
push dword ptr [ebp-234h]  +
lea edi [ebp-22Ch] +
call sub_1016EC7  +
jmp loc_101814A  +
cmp [ebp-28Ch] ebx +
jnz loc_1018028  +
mov [ebp-28Ch] edi +
cmp dword ptr [ebp-28Ch] 4 +
jnz loc_101806D  +
push offset word_10022EC  +
lea ecx [ebp-220h] +
call sub_10161A7  +
push dword ptr [ebp-234h]  +
lea edi [ebp-220h] +
mov byte ptr [ebp-4] 3 +
call sub_1016EC7  +
mov ecx [ebp-220h] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 2 +
call sub_10147CD  +
jmp loc_101814A  +
cmp [ebp-24Ch] ebx +
jz loc_10180AA  +
cmp dword_1063148 3 +
jnz loc_1018087  +
push offset aOptionToDumpLo  +
push 2  +
jmp loc_10180A5  +
call sub_10200AD  +
test eax eax +
jz loc_101809E  +
push offset aOptionSetDumpi  +
mov dword_106470C edi +
push edi  +
jmp loc_10180A5  +
push offset aFailedToSetOpt  +
push 3  +
call sub_1016717  +
push dword ptr [ebp-250h]  +
mov esi [ebp-224h] +
push ecx  +
mov ecx esp +
mov [ebp-234h] esp +
push dword ptr [esi]  +
call sub_10161A7  +
call sub_101533E  +
cmp eax ebx +
jnz loc_10180E2  +
push dword ptr [esi]  +
push offset aFailedToSetThe  +
push 3  +
call sub_10168F9  +
add esp 0Ch +
jmp loc_101814D  +
lea eax [ebp-230h] +
push eax  +
call sub_1036816  +
test eax eax +
jnz loc_1018106  +
push dword ptr [ebp-230h]  +
push offset aCurrentWorking  +
push edi  +
call sub_10168F9  +
add esp 0Ch +
mov edi ds:off_1013E3C +
push ebx  +
push offset loc_10172D2  +
call edi  +
cmp dword ptr [ebp-28Ch] 1 +
jz loc_1018135  +
jle loc_1018146  +
cmp dword ptr [ebp-28Ch] 3 +
jg loc_1018146  +
lea esi [ebp-28Ch] +
call sub_1017BB2  +
jmp loc_1018140  +
lea ecx [ebp-28Ch] +
call sub_101732B  +
mov [ebp-228h] eax +
push ebx  +
push ebx  +
call edi  +
xor edi edi +
inc edi  +
push dword ptr [ebp-228h]  +
push offset aReturningWithC  +
push edi  +
call sub_10168F9  +
add esp 0Ch +
call sub_1020426  +
cmp dword_106470C ebx +
jz loc_1018173  +
call sub_101FFAF  +
cmp [ebp-224h] ebx +
jz loc_1018187  +
push dword ptr [ebp-224h]  +
call ds:GlobalFree  +
call sub_1016ADA  +
mov ecx offset unk_1064714 +
call sub_101FDB7  +
call ds:CoUninitialize  +
mov ecx [ebp-230h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-22Ch] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
lea ecx [ebp-28Ch] +
call sub_1015183  +
mov eax [ebp-228h] +
call sub_1021FBE  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
mov hInstance edi +
call sub_1035328  +
cmp eax 3 +
jz loc_1018209  +
cmp eax 4 +
jz loc_1018209  +
cmp eax 5 +
jz loc_1018209  +
push esi  +
lea esi [ebp+arg_0] +
call sub_1014349  +
pop esi  +
test eax eax +
jnz loc_1018223  +
jmp loc_101820D  +
and [ebp+arg_0] 0 +
cmp [ebp+arg_0] 0 +
jz loc_101821D  +
push [ebp+nCmdShow]  +
call sub_1014E3C  +
jmp loc_1018223  +
push edi  +
call sub_1017D83  +
pop edi  +
pop ebp  +
retn 10h  +
***
mov eax dword_1064734 +
test eax eax +
jz loc_101823D  +
push eax  +
call ds:DeleteObject  +
mov eax hIcon +
test eax eax +
jz locret_101824D  +
push eax  +
call ds:DestroyIcon  +
retn   +
***
cmp eax 0FFFFFFFFh +
jnz loc_101827D  +
push esi  +
call ds:GetLastError  +
push offset aWizardFailedTo  +
mov esi eax +
push esi  +
push 3  +
call sub_10167CB  +
mov eax esi +
pop esi  +
retn   +
xor eax eax +
retn   +
***
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+0Ch] +
mov eax 100h +
cmp ebx 204h +
jz loc_10182B7  +
cmp ebx 201h +
jz loc_10182B7  +
cmp ebx 207h +
jz loc_10182B7  +
cmp ebx eax +
jz loc_10182B7  +
cmp ebx 104h +
jnz loc_10182BE  +
and dword_1063170 0 +
cmp ebx eax +
jz loc_10182CA  +
cmp ebx 200h +
jnz loc_10182D4  +
mov dword_1063170 1 +
cmp ebx 0B1h +
jnz loc_1018300  +
mov ecx [ebp+10h] +
cmp ecx [ebp+14h] +
jz loc_10183AA  +
cmp dword_1063170 0 +
jz loc_10183AA  +
or dword ptr [ebp+14h] 0FFFFFFFFh +
mov dword ptr [ebp+10h] 0FFFFh +
cmp ebx eax +
jnz loc_10183AA  +
push esi  +
mov esi ds:GetParent +
push edi  +
mov edi [ebp+10h] +
cmp edi 0Dh +
jz loc_101831D  +
cmp edi 1Bh +
jnz loc_101832E  +
push dword ptr [ebp+14h]  +
push edi  +
push eax  +
push dword ptr [ebp+8]  +
call esi  +
push eax  +
call ds:PostMessageW  +
cmp edi 9 +
jnz loc_10183A8  +
cmp dword_106316C 0 +
jz loc_10183A8  +
and dword_106316C 0 +
mov edi 7DAh +
push edi  +
push dword ptr [ebp+8]  +
call esi  +
mov ebx ds:IsDlgButtonChecked +
push eax  +
call ebx  +
cmp eax 1 +
jz loc_10183A5  +
push 7DBh  +
push dword ptr [ebp+8]  +
call esi  +
push eax  +
call ebx  +
cmp eax 1 +
jz loc_10183A5  +
push 1  +
push edi  +
push dword ptr [ebp+8]  +
call esi  +
push eax  +
call ds:CheckDlgButton  +
push 0  +
push edi  +
push 111h  +
push dword ptr [ebp+8]  +
call esi  +
push eax  +
call ds:PostMessageW  +
push edi  +
push dword ptr [ebp+8]  +
call esi  +
push eax  +
call ds:GetDlgItem  +
push eax  +
call ds:SetFocus  +
mov ebx [ebp+0Ch] +
pop edi  +
pop esi  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push ebx  +
push dword ptr [ebp+8]  +
push dword_106477C  +
call ds:CallWindowProcW  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
dec eax  +
dec eax  +
jnz loc_10183F7  +
mov eax [ebp+10h] +
test eax eax +
jz loc_10183F7  +
mov ecx 0FFFFh +
cmp [eax+2] cx +
jnz loc_10183F1  +
and dword ptr [eax+0Ch] 0FFF7DFFFh +
jmp loc_10183F7  +
and dword ptr [eax] 0FFF7DFFFh +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax-0Ch] 1 +
jnz loc_1018420  +
mov ax [eax] +
cmp ax [ebp+0Ch] +
jnz loc_1018420  +
xor eax eax +
inc eax  +
jmp loc_1018422  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+10h] 0 +
jnz loc_101846E  +
push 14h  +
push dword ptr [esi+14h]  +
lea eax [esi+0Ch] +
push eax  +
call sub_1014B4F  +
test eax eax +
jnz loc_1018452  +
push 8007000Eh  +
call loc_1014415  +
mov ecx [esi+14h] +
mov edx ecx +
imul edx edx +
lea eax [edx+eax-10h] +
jmp loc_101846B  +
mov edx [esi+10h] +
mov [eax] edx +
mov [esi+10h] eax +
sub eax 14h +
dec ecx  +
jns loc_1018460  +
pop esi  +
retn   +
***
call sub_1021EB9  +
mov esi ecx +
mov [ebp-10h] esi +
mov edi [ebp+8] +
push edi  +
call sub_10151F2  +
and dword ptr [ebp-4] 0 +
lea eax [edi+4] +
push eax  +
lea ecx [esi+4] +
call sub_10151F2  +
mov eax [edi+8] +
mov [esi+8] eax +
mov eax esi +
call sub_1021FA5  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
push offset dword_106478C  +
call sub_10150A5  +
mov eax [ebp+arg_0] +
leave   +
retn 4  +
***
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+8] +
and dword ptr [ebp-4] 0 +
push offset dword_1064790  +
call sub_10150A5  +
mov eax [ebp+8] +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
push offset dword_10647A0  +
call sub_10150A5  +
mov eax [ebp+arg_0] +
leave   +
retn 4  +
***
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+8] +
and dword ptr [ebp-4] 0 +
push offset dword_10647A4  +
call sub_10150A5  +
mov eax [ebp+8] +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
push offset dword_10647A8  +
call sub_10150A5  +
mov eax [ebp+arg_0] +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
push offset dword_10647AC  +
call sub_10150A5  +
mov eax [ebp+arg_0] +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
push offset dword_10647B0  +
call sub_10150A5  +
mov eax [ebp+arg_0] +
leave   +
retn 4  +
***
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+8] +
and dword ptr [ebp-4] 0 +
push offset dword_1064798  +
call sub_10150A5  +
mov eax [ebp+8] +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
push offset dword_106479C  +
call sub_10150A5  +
mov eax [ebp+arg_0] +
leave   +
retn 4  +
***
mov ecx [ebp+14h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
push 1  +
push dword_1064734  +
push 30h  +
push esi  +
call ds:SendMessageW  +
lea eax [ebp-10h] +
push eax  +
call sub_1018540  +
push dword ptr [eax]  +
mov esi ds:SetDlgItemTextW +
push 7D5h  +
push dword ptr [ebp+8]  +
call esi  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
push offset dword_1064BA8  +
lea ecx [ebp+0Ch] +
call sub_1015076  +
and dword ptr [ebp-4] 0 +
lea eax [ebp+0Ch] +
push eax  +
push 13C3h  +
call sub_10208E1  +
test eax eax +
jz loc_10186A6  +
push dword ptr [ebp+0Ch]  +
push 7E1h  +
push dword ptr [ebp+8]  +
call esi  +
mov ecx [ebp+0Ch] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
jmp loc_10186EE  +
mov eax [ebp+14h] +
mov eax [eax+8] +
cmp eax 0FFFFFF35h +
jz loc_10186E2  +
cmp eax 0FFFFFF38h +
jnz loc_10186EE  +
push 2  +
push 0  +
push 470h  +
push dword ptr [ebp+8]  +
call ds:GetParent  +
push eax  +
call ds:PostMessageW  +
jmp loc_10186EE  +
push offset aWizardCancelle  +
push 1  +
call sub_1016717  +
xor eax eax +
call sub_1021FA5  +
retn 10h  +
***
call sub_1021EB9  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-90h] +
call sub_101F44B  +
push dword ptr [ebp+8]  +
lea ecx [ebp-90h] +
mov byte ptr [ebp-4] 1 +
call sub_101F4B6  +
test eax eax +
jnz loc_1018757  +
xor esi esi +
lea ecx [ebp-90h] +
mov byte ptr [ebp-4] 0 +
call sub_101F481  +
mov ecx [ebp+0Ch] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov eax esi +
call sub_1021FA5  +
retn 8  +
***
push offset dword_1064BA8  +
lea ecx [ebp-10h] +
call sub_1015076  +
lea eax [ebp-10h] +
push eax  +
push 13CBh  +
mov byte ptr [ebp-4] 2 +
call sub_10208E1  +
lea eax [ebp-10h] +
push eax  +
lea ecx [ebp-90h] +
call sub_101F5C6  +
lea eax [ebp+0Ch] +
push eax  +
lea ecx [ebp-90h] +
call sub_101F6ED  +
lea ecx [ebp-90h] +
call sub_101F574  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
xor esi esi +
inc esi  +
jmp loc_1018733  +
***
push 0  +
mov eax offset loc_1054D57 +
call sub_1021EB9  +
mov edi [ebp+0Ch] +
xor esi esi +
cmp edi esi +
jz loc_1018839  +
push offset dword_1064BA8  +
lea ecx [ebp+0Ch] +
call sub_1015076  +
mov eax [ebp+8] +
sub eax esi +
mov [ebp-4] esi +
jz loc_10187FC  +
dec eax  +
jz loc_10187F1  +
dec eax  +
jnz loc_101882E  +
lea eax [ebp+0Ch] +
push eax  +
push 13D5h  +
jmp loc_1018805  +
lea eax [ebp+0Ch] +
push eax  +
push 1394h  +
jmp loc_1018805  +
lea eax [ebp+0Ch] +
push eax  +
push 1392h  +
call sub_10208E1  +
mov eax [ebp+0Ch] +
cmp [eax-0Ch] esi +
jz loc_101882E  +
mov esi ds:SetDlgItemTextW +
push eax  +
push 7D8h  +
push edi  +
call esi  +
push offset word_10022EC  +
push 7DCh  +
push edi  +
call esi  +
mov ecx [ebp+0Ch] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
call sub_1021FA5  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push esi  +
mov esi [eax+4] +
push edi  +
mov edi [eax] +
call ds:GetThreadLocale  +
cmp eax esi +
jz loc_1018864  +
push esi  +
call ds:SetThreadLocale  +
push edi  +
push offset loc_10187B4  +
call sub_101EE89  +
push 0  +
push 0  +
push 401h  +
push edi  +
call ds:PostMessageW  +
pop edi  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
push 0  +
mov eax offset loc_1054D57 +
call sub_1021EB9  +
cmp dword ptr [ebp+0Ch] 4Eh +
jz loc_10188F6  +
cmp dword ptr [ebp+0Ch] 110h +
jz loc_1018A47  +
cmp dword ptr [ebp+0Ch] 401h +
jz loc_10188BB  +
xor eax eax +
jmp loc_1018A4A  +
xor esi esi +
push esi  +
push esi  +
push 466h  +
push 7D7h  +
push dword ptr [ebp+8]  +
call ds:GetDlgItem  +
push eax  +
call ds:SendMessageW  +
push esi  +
push 1  +
push 471h  +
push dword ptr [ebp+8]  +
call ds:GetParent  +
push eax  +
call ds:PostMessageW  +
jmp loc_1018A47  +
mov eax [ebp+14h] +
mov eax [eax+8] +
cmp eax 0FFFFFF2Fh +
jz loc_10189D7  +
cmp eax 0FFFFFF31h +
jz loc_10189A1  +
cmp eax 0FFFFFF38h +
jnz loc_1018A47  +
xor esi esi +
push esi  +
push esi  +
push 470h  +
push dword ptr [ebp+8]  +
call ds:GetParent  +
push eax  +
call ds:PostMessageW  +
mov edi ds:GetDlgItem +
push 67h  +
push esi  +
push 467h  +
push 7D7h  +
push dword ptr [ebp+8]  +
call edi  +
mov ebx ds:SendMessageW +
push eax  +
call ebx  +
push 0FFFF0000h  +
push 0FFFFFFFFh  +
push 465h  +
push 7D7h  +
push dword ptr [ebp+8]  +
call edi  +
push eax  +
call ebx  +
mov eax [ebp+8] +
mov dword_10647BC eax +
call ds:GetThreadLocale  +
push esi  +
push esi  +
push offset dword_10647BC  +
push offset loc_1018844  +
push esi  +
push esi  +
mov dword_10647C0 eax +
call ds:CreateThread  +
mov dword_1064720 eax +
jmp loc_1018A47  +
xor esi esi +
push esi  +
push esi  +
push 466h  +
push 7D7h  +
push dword ptr [ebp+8]  +
call ds:GetDlgItem  +
push eax  +
call ds:SendMessageW  +
mov eax dword_1064720 +
cmp eax esi +
jz loc_1018A47  +
push eax  +
call ds:CloseHandle  +
mov dword_1064720 esi +
jmp loc_1018A47  +
call sub_101C205  +
push offset dword_1064BA8  +
lea ecx [ebp+0Ch] +
call sub_1015076  +
lea eax [ebp+0Ch] +
push eax  +
xor esi esi +
push 13D5h  +
mov [ebp-4] esi +
call sub_10208E1  +
mov eax [ebp+0Ch] +
cmp [eax-0Ch] esi +
jz loc_1018A24  +
mov edi ds:SetDlgItemTextW +
push eax  +
push 7D8h  +
push dword ptr [ebp+8]  +
call edi  +
push offset word_10022EC  +
push 7DCh  +
push dword ptr [ebp+8]  +
call edi  +
push offset aUserRequesting  +
push 1  +
call sub_1016717  +
push 1  +
push esi  +
push dword ptr [ebp+8]  +
call ds:SetWindowLongW  +
mov ecx [ebp+0Ch] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
xor eax eax +
inc eax  +
call sub_1021FA5  +
retn 10h  +
***
call sub_1021F2C  +
xor ebx ebx +
push 1F0h  +
lea eax [ebp-25Ch] +
mov edi ecx +
push ebx  +
push eax  +
mov [ebp-274h] edi +
mov [ebp-260h] ebx +
call sub_10219E0  +
add esp 0Ch +
mov esi offset dword_1064BA8 +
push esi  +
lea ecx [ebp-264h] +
call sub_1015076  +
push esi  +
lea ecx [ebp-26Ch] +
mov [ebp-4] ebx +
call sub_1015076  +
push esi  +
lea ecx [ebp-268h] +
mov byte ptr [ebp-4] 1 +
call sub_1015076  +
lea eax [ebp-264h] +
push eax  +
push 13C8h  +
mov byte ptr [ebp-4] 2 +
mov [edi] ebx +
call sub_10208E1  +
lea eax [ebp-268h] +
push eax  +
push 13C9h  +
call sub_10208E1  +
lea eax [ebp-26Ch] +
push eax  +
push 13CAh  +
call sub_10208E1  +
push ebx  +
lea eax [ebp-260h] +
push eax  +
push ebx  +
push 29h  +
mov dword ptr [ebp-260h] 1F4h +
call ds:SystemParametersInfoW  +
push 17h  +
pop ecx  +
push dword ptr [ebp-26Ch]  +
lea esi [ebp-0C8h] +
lea edi [ebp-6Ch] +
movs   +
call sub_10223B0  +
pop ecx  +
push dword ptr [ebp-264h]  +
mov [ebp-5Ch] eax +
push 20h  +
lea eax [ebp-50h] +
push eax  +
call sub_1014BA1  +
push ebx  +
call ds:GetDC  +
mov esi [ebp-268h] +
mov edi eax +
push 5Ah  +
push edi  +
call ds:GetDeviceCaps  +
push esi  +
mov [ebp-270h] eax +
call sub_10223B0  +
pop ecx  +
mov ecx [ebp-270h] +
imul eax ecx +
push 0FFFFFFB8h  +
cdq   +
pop ecx  +
idiv  ecx +
mov [ebp-6Ch] eax +
lea eax [ebp-6Ch] +
push eax  +
call ds:CreateFontIndirectW  +
mov ecx [ebp-274h] +
push edi  +
push ebx  +
mov [ecx] eax +
call ds:ReleaseDC  +
mov ecx [ebp-268h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-26Ch] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-264h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
call sub_1021FBE  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
lea ecx [esi+8] +
call sub_1018475  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1021EB9  +
mov esi [ebp+10h] +
and dword ptr [ebp-10h] 0 +
mov ecx esi +
call sub_101504D  +
mov ecx [ebp+8] +
push eax  +
call sub_101520E  +
mov eax [esi] +
push dword ptr [eax-0Ch]  +
and dword ptr [ebp-4] 0 +
push eax  +
push dword ptr [ebp+0Ch]  +
mov dword ptr [ebp-10h] 1 +
call sub_1014736  +
pop ecx  +
push eax  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_10154C0  +
mov eax [ebp+8] +
add esp 14h +
call sub_1021FA5  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1014736  +
pop ecx  +
push eax  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_10155F6  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1021EB9  +
mov esi ecx +
call sub_101842B  +
mov edi [esi+10h] +
mov ebx [edi] +
mov [ebp-10h] edi +
mov [ebp-14h] edi +
and dword ptr [ebp-4] 0 +
test edi edi +
jz loc_1018C94  +
push dword ptr [ebp+8]  +
mov ecx edi +
call sub_1018BC3  +
mov eax [ebp+0Ch] +
mov [esi+10h] ebx +
mov [edi+4] eax +
mov eax [ebp+10h] +
mov [edi] eax +
inc dword ptr [esi+8]  +
mov eax edi +
call sub_1021FA5  +
retn 0Ch  +
***
call ds:CloseHandle  +
jmp loc_1018DFD  +
push 0FFFFFFFFh  +
lea ecx [ebp-10h] +
call sub_1015023  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp+0Ch] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp+10h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov eax [ebp-18h] +
call sub_1021FA5  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0  +
mov esi ecx +
push dword ptr [esi+4]  +
push [ebp+arg_0]  +
call sub_1018C64  +
mov ecx [esi+4] +
test ecx ecx +
jz loc_1018E63  +
mov [ecx] eax +
jmp loc_1018E65  +
mov [esi] eax +
mov [esi+4] eax +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1021EB9  +
lea ecx [ebp-28h] +
call sub_1015431  +
xor ebx ebx +
push offset dword_1064BA8  +
lea ecx [ebp-10h] +
mov [ebp-4] ebx +
call sub_1015076  +
push 7DEh  +
push dword ptr [ebp+8]  +
mov byte ptr [ebp-4] 1 +
call ds:GetDlgItem  +
mov esi ds:SendMessageW +
push ebx  +
push ebx  +
push 0Bh  +
push eax  +
mov [ebp-14h] eax +
call esi  +
push ebx  +
push ebx  +
push 1009h  +
push dword ptr [ebp-14h]  +
call esi  +
mov eax [ebp+0Ch] +
mov eax [eax] +
mov [ebp-1Ch] eax +
mov [ebp-18h] ebx +
cmp eax ebx +
jz loc_1019023  +
mov ecx [ebp+0Ch] +
lea eax [ebp-1Ch] +
push eax  +
call sub_105038C  +
push eax  +
lea ecx [ebp-28h] +
call sub_1015FF0  +
mov eax [ebp-20h] +
cmp eax 1 +
jz loc_1018F04  +
jle loc_1018F22  +
cmp eax 4 +
jle loc_1018F0E  +
cmp eax 5 +
jz loc_1018F18  +
jmp loc_1018F22  +
test byte ptr [ebp+10h] 0Ah +
jz loc_101901A  +
test byte ptr [ebp+10h] 2 +
jz loc_101901A  +
test byte ptr [ebp+10h] 1 +
jz loc_101901A  +
test byte ptr [ebp+10h] 4 +
jz loc_101901A  +
mov eax [ebp-18h] +
lea ecx [ebp-24h] +
mov dword ptr [ebp-50h] 7 +
mov [ebp-4Ch] eax +
mov [ebp-48h] ebx +
call sub_1015002  +
mov [ebp-3Ch] eax +
mov eax [ebp-20h] +
dec eax  +
mov [ebp-30h] ebx +
cmp eax 8 +
ja loc_1018FD1  +
jmp ds:off_1019072[eax*4]  +
mov eax [ebp+14h] +
mov [ebp-34h] eax +
lea eax [ebp-10h] +
push eax  +
push 13BBh  +
jmp loc_1018FE0  +
mov eax [ebp+14h] +
mov [ebp-34h] eax +
lea eax [ebp-10h] +
push eax  +
push 13BCh  +
jmp loc_1018FE0  +
mov eax [ebp+14h] +
mov [ebp-34h] eax +
lea eax [ebp-10h] +
push eax  +
push 13D4h  +
jmp loc_1018FE0  +
mov eax [ebp+18h] +
mov [ebp-34h] eax +
lea eax [ebp-10h] +
push eax  +
push 13C6h  +
jmp loc_1018FE0  +
mov eax [ebp+18h] +
mov [ebp-34h] eax +
lea eax [ebp-10h] +
push eax  +
push 13BDh  +
jmp loc_1018FE0  +
mov eax [ebp+18h] +
mov [ebp-34h] eax +
lea eax [ebp-10h] +
push eax  +
push 13BEh  +
jmp loc_1018FE0  +
mov eax [ebp+18h] +
mov [ebp-34h] eax +
lea eax [ebp-10h] +
push eax  +
push 13D7h  +
jmp loc_1018FE0  +
mov eax [ebp+18h] +
mov [ebp-34h] eax +
lea eax [ebp-10h] +
push eax  +
push 13BFh  +
call sub_10208E1  +
lea eax [ebp-50h] +
push eax  +
push ebx  +
push 104Dh  +
push dword ptr [ebp-14h]  +
call esi  +
lea ecx [ebp-10h] +
mov edi eax +
mov dword ptr [ebp-70h] 1 +
call sub_1015002  +
mov [ebp-64h] eax +
lea eax [ebp-78h] +
push eax  +
push edi  +
push 1074h  +
push dword ptr [ebp-14h]  +
call esi  +
inc dword ptr [ebp-18h]  +
cmp [ebp-1Ch] ebx +
jnz loc_1018ED9  +
push 96h  +
push ebx  +
mov edi 101Eh +
push edi  +
push dword ptr [ebp-14h]  +
call esi  +
push 0FFFEh  +
push 1  +
push edi  +
push dword ptr [ebp-14h]  +
call esi  +
push ebx  +
push 1  +
push 0Bh  +
push dword ptr [ebp-14h]  +
call esi  +
push 1  +
push ebx  +
push dword ptr [ebp+8]  +
call ds:InvalidateRect  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
lea ecx [ebp-28h] +
call sub_10151BA  +
call sub_1021FA5  +
retn 14h  +
***
push 14h  +
mov eax offset loc_1054E83 +
call sub_1021EB9  +
mov eax [ebp+0Ch] +
sub eax 4Eh +
jz loc_10192B0  +
sub eax 0C2h +
jz loc_101916C  +
dec eax  +
jz loc_10190C8  +
xor eax eax +
jmp loc_1019634  +
movzx ecx word ptr [ebp+10h] +
mov eax 7D9h +
cmp ecx eax +
jz loc_1019153  +
jle loc_1019631  +
cmp ecx 7DBh +
jle loc_101911F  +
cmp ecx 7DDh +
jnz loc_1019631  +
push ecx  +
mov eax esp +
mov [ebp+10h] esp +
push eax  +
call near ptr dword_10184D4+3  +
push ecx  +
mov eax esp +
mov [ebp+14h] esp +
push eax  +
mov dword ptr [ebp-4] 3 +
call sub_10184B4  +
push dword ptr [ebp+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
call near ptr byte_1018CB4  +
jmp loc_1019631  +
push 7DAh  +
push dword ptr [ebp+8]  +
call ds:IsDlgButtonChecked  +
test eax eax +
jz loc_1019135  +
push 3  +
jmp loc_1019137  +
push 1  +
push 0  +
push 470h  +
push dword ptr [ebp+8]  +
call ds:GetParent  +
push eax  +
call ds:PostMessageW  +
jmp loc_1019631  +
push ecx  +
mov eax esp +
mov [ebp+10h] esp +
push eax  +
call near ptr dword_10184D4+3  +
push dword ptr [ebp+8]  +
call near ptr dword_10186F8+5  +
jmp loc_1019631  +
mov esi offset dword_1064BA8 +
push esi  +
lea ecx [ebp+10h] +
call sub_1015076  +
and dword ptr [ebp-4] 0 +
push esi  +
lea ecx [ebp+14h] +
call sub_1015076  +
lea eax [ebp+10h] +
push eax  +
push 13CCh  +
mov byte ptr [ebp-4] 1 +
call sub_10208E1  +
lea eax [ebp+14h] +
push eax  +
push 13CDh  +
call sub_10208E1  +
push offset asc_1001D58  +
lea ecx [ebp+10h] +
call sub_1018C3E  +
mov eax [ebp+14h] +
push dword ptr [eax-0Ch]  +
lea ecx [ebp+10h] +
push eax  +
call sub_10155F6  +
push dword ptr [ebp+10h]  +
mov ebx [ebp+8] +
mov esi ds:GetDlgItem +
push 7E2h  +
push ebx  +
call esi  +
push eax  +
call ds:SetWindowTextW  +
lea eax [ebp-10h] +
push eax  +
call sub_10185CC  +
push dword ptr [eax]  +
mov edi ds:SetDlgItemTextW +
push 7DBh  +
push ebx  +
call edi  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
lea eax [ebp-14h] +
push eax  +
call near ptr byte_10185A8+1  +
push dword ptr [eax]  +
push 7DAh  +
push ebx  +
call edi  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov edi ds:CheckDlgButton +
push 0  +
push 7DAh  +
push ebx  +
call edi  +
push 0  +
push 7DBh  +
push ebx  +
call edi  +
push 0FFFFFFFCh  +
mov edi 7D3h +
push edi  +
push ebx  +
call esi  +
push eax  +
call ds:GetWindowLongW  +
push (offset byte_1018284+1)  +
push 0FFFFFFFCh  +
push edi  +
push ebx  +
mov dword_106477C eax +
call esi  +
push eax  +
call ds:SetWindowLongW  +
push 0  +
push hIcon  +
push 170h  +
push 7D2h  +
push ebx  +
call ds:SendDlgItemMessageW  +
lea eax [ebp-18h] +
push eax  +
call near ptr dword_10184D4+3  +
push dword ptr [eax]  +
push edi  +
push ebx  +
call esi  +
push eax  +
call ds:SetWindowTextW  +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp+14h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp+10h] +
jmp loc_1019629  +
mov eax [ebp+14h] +
mov eax [eax+8] +
cmp eax 0FFFFFF2Fh +
jz loc_10193C0  +
cmp eax 0FFFFFF31h +
jz loc_101937E  +
cmp eax 0FFFFFF38h +
jnz loc_1019631  +
mov ebx [ebp+8] +
push 7DAh  +
push ebx  +
call ds:IsDlgButtonChecked  +
mov esi ds:GetParent +
test eax eax +
jz loc_10192F4  +
push 3  +
jmp loc_10192F6  +
push 1  +
push 0  +
push 470h  +
push ebx  +
call esi  +
mov edi ds:PostMessageW +
push eax  +
call edi  +
cmp dword_1064780 0 +
jnz loc_101933D  +
call sub_101BA11  +
test eax eax +
jnz loc_101933D  +
lea eax [ebp-1Ch] +
push eax  +
call near ptr dword_10184D4+3  +
mov eax [eax] +
mov ecx [ebp-1Ch] +
mov eax [eax-0Ch] +
add ecx 0FFFFFFF0h +
mov [ebp+8] eax +
call sub_10147CD  +
cmp dword ptr [ebp+8] 0 +
jnz loc_101934C  +
push 0  +
push 1  +
push 471h  +
push ebx  +
call esi  +
push eax  +
call edi  +
mov esi ds:GetDlgItem +
push 7DAh  +
push ebx  +
call esi  +
push eax  +
call ds:SetFocus  +
push 0  +
push 0FFFFFFFFh  +
push 0B1h  +
push 7D3h  +
push ebx  +
call esi  +
push eax  +
call ds:SendMessageW  +
jmp loc_1019631  +
cmp dword_1064780 0 +
jnz loc_1019631  +
call sub_101BA11  +
test eax eax +
jz loc_1019631  +
cmp dword_1064724 3 +
jz loc_10193AB  +
mov dword_1064724 1 +
push 3EBh  +
push 0  +
push dword ptr [ebp+8]  +
call ds:SetWindowLongW  +
jmp loc_1019631  +
push offset dword_1064BA8  +
lea ecx [ebp+0Ch] +
call sub_1015076  +
lea eax [ebp+0Ch] +
push eax  +
push 13AFh  +
mov dword ptr [ebp-4] 2 +
call sub_10208E1  +
mov eax [ebp+0Ch] +
mov edi [ebp+8] +
xor ebx ebx +
cmp [eax-0Ch] ebx +
jz loc_1019535  +
lea eax [ebp-20h] +
push eax  +
call sub_10184FA  +
mov eax [eax] +
push 34h  +
push eax  +
push dword ptr [ebp+0Ch]  +
push edi  +
call ds:MessageBoxW  +
mov ecx [ebp-20h] +
add ecx 0FFFFFFF0h +
mov esi eax +
call sub_10147CD  +
cmp esi 6 +
jz loc_1019535  +
cmp esi 7 +
jnz loc_1019535  +
push 132h  +
lea eax [ebp+0Ch] +
push eax  +
call near ptr dword_1018400+2  +
test al al +
jnz loc_1019626  +
push 133h  +
lea eax [ebp+0Ch] +
push eax  +
call near ptr dword_1018400+2  +
test al al +
jnz loc_1019626  +
push 134h  +
lea eax [ebp+0Ch] +
push eax  +
call near ptr dword_1018400+2  +
test al al +
jnz loc_1019626  +
push 135h  +
lea eax [ebp+0Ch] +
push eax  +
call near ptr dword_1018400+2  +
test al al +
jnz loc_1019626  +
push 136h  +
lea eax [ebp+0Ch] +
push eax  +
call near ptr dword_1018400+2  +
test al al +
jnz loc_1019626  +
push 137h  +
lea eax [ebp+0Ch] +
push eax  +
call near ptr dword_1018400+2  +
test al al +
jnz loc_1019626  +
push 138h  +
lea eax [ebp+0Ch] +
push eax  +
call near ptr dword_1018400+2  +
test al al +
jnz loc_1019626  +
push 39h  +
lea eax [ebp+0Ch] +
push eax  +
call near ptr dword_1018400+2  +
test al al +
jnz loc_1019626  +
push 2Eh  +
lea eax [ebp+0Ch] +
push eax  +
call near ptr dword_1018400+2  +
test al al +
jnz loc_1019626  +
push 2Fh  +
lea eax [ebp+0Ch] +
push eax  +
call near ptr dword_1018400+2  +
test al al +
jnz loc_1019626  +
push 37h  +
lea eax [ebp+0Ch] +
push eax  +
call near ptr dword_1018400+2  +
test al al +
jnz loc_1019626  +
push 110h  +
lea eax [ebp+0Ch] +
push eax  +
call near ptr dword_1018400+2  +
test al al +
jnz loc_1019626  +
push 1  +
push ebx  +
push edi  +
call ds:SetWindowLongW  +
jmp loc_1019626  +
push 132h  +
lea eax [ebp+0Ch] +
push eax  +
call near ptr dword_1018400+2  +
test al al +
jnz loc_101961A  +
push 133h  +
lea eax [ebp+0Ch] +
push eax  +
call near ptr dword_1018400+2  +
test al al +
jnz loc_101961A  +
push 134h  +
lea eax [ebp+0Ch] +
push eax  +
call near ptr dword_1018400+2  +
test al al +
jnz loc_101961A  +
push 135h  +
lea eax [ebp+0Ch] +
push eax  +
call near ptr dword_1018400+2  +
test al al +
jnz loc_101961A  +
push 136h  +
lea eax [ebp+0Ch] +
push eax  +
call near ptr dword_1018400+2  +
test al al +
jnz loc_101961A  +
push 137h  +
lea eax [ebp+0Ch] +
push eax  +
call near ptr dword_1018400+2  +
test al al +
jnz loc_101961A  +
push 138h  +
lea eax [ebp+0Ch] +
push eax  +
call near ptr dword_1018400+2  +
test al al +
jnz loc_101961A  +
push 39h  +
lea eax [ebp+0Ch] +
push eax  +
call near ptr dword_1018400+2  +
test al al +
jnz loc_101961A  +
push 2Eh  +
lea eax [ebp+0Ch] +
push eax  +
call near ptr dword_1018400+2  +
test al al +
jnz loc_101961A  +
push 2Fh  +
lea eax [ebp+0Ch] +
push eax  +
call near ptr dword_1018400+2  +
test al al +
jnz loc_101961A  +
push 37h  +
lea eax [ebp+0Ch] +
push eax  +
call near ptr dword_1018400+2  +
test al al +
jnz loc_101961A  +
push 110h  +
lea eax [ebp+0Ch] +
push eax  +
call near ptr dword_1018400+2  +
test al al +
jnz loc_101961A  +
push ebx  +
push ebx  +
push edi  +
call ds:SetWindowLongW  +
push offset aWizardCancel_0  +
push 1  +
call sub_1016717  +
mov ecx [ebp+0Ch] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
xor eax eax +
inc eax  +
call sub_1021FA5  +
retn 10h  +
***
call sub_1021EB9  +
xor ebx ebx +
mov [ebp-1Ch] ebx +
mov ecx [ebp+8] +
call sub_10151DA  +
xor esi esi +
inc esi  +
lea ecx [ebp-28h] +
mov [ebp-1Ch] esi +
call sub_1015431  +
mov eax [edi] +
and [ebp-10h] ebx +
mov [ebp-4] esi +
mov [ebp-18h] ebx +
mov [ebp-14h] eax +
test eax eax +
jz loc_101971E  +
lea eax [ebp-14h] +
push eax  +
mov ecx edi +
call sub_105038C  +
push eax  +
lea ecx [ebp-28h] +
call sub_1015FF0  +
mov eax [ebp-20h] +
test eax eax +
jle loc_10196B0  +
cmp eax 4 +
jg loc_10196B0  +
inc dword ptr [ebp-10h]  +
test ebx ebx +
jnz loc_10196A9  +
mov ebx eax +
jmp loc_10196B0  +
cmp eax ebx +
jz loc_10196B0  +
mov [ebp-18h] esi +
cmp dword ptr [ebp-14h] 0 +
jnz loc_101967E  +
cmp dword ptr [ebp-10h] 0 +
jz loc_101971E  +
cmp dword ptr [ebp-18h] 0 +
jz loc_10196CC  +
push dword ptr [ebp+8]  +
push 13B4h  +
jmp loc_10196F6  +
mov eax ebx +
dec eax  +
jz loc_10196FD  +
dec eax  +
jz loc_10196EE  +
dec eax  +
jz loc_10196E4  +
dec eax  +
jnz loc_101971E  +
push dword ptr [ebp+8]  +
push 13D3h  +
jmp loc_10196F6  +
push dword ptr [ebp+8]  +
push 13A0h  +
jmp loc_10196F6  +
push dword ptr [ebp+8]  +
push 139Fh  +
call sub_10208E1  +
jmp loc_101971E  +
lea eax [ebp-18h] +
push eax  +
call sub_1018586  +
mov ecx [ebp+8] +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_1015AAF  +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
lea ecx [ebp-28h] +
call sub_10151BA  +
mov eax [ebp+8] +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EB9  +
lea ecx [ebp-24h] +
call sub_1015431  +
mov ecx dword_1064788 +
mov eax [ebp+1Ch] +
mov edx [ebp+24h] +
xor ebx ebx +
xor esi esi +
inc esi  +
neg ecx  +
sbb ecx ecx +
mov [eax] ebx +
mov eax [ebp+20h] +
and ecx 0FFFFFFF1h +
add ecx 0Fh +
mov [eax] ebx +
mov [edx] ecx +
mov ecx dword_1064724 +
mov [ebp-4] ebx +
mov [ebp-10h] ebx +
mov [ebp-14h] ebx +
mov [ebp-18h] esi +
cmp ecx ebx +
jnz loc_10197A3  +
push dword ptr [ebp+14h]  +
push 13C5h  +
call sub_10208E1  +
push dword ptr [ebp+18h]  +
push 139Ch  +
call sub_10208E1  +
jmp loc_101997F  +
cmp ecx esi +
jnz loc_10197BE  +
push dword ptr [ebp+14h]  +
push 13C5h  +
call sub_10208E1  +
push dword ptr [ebp+18h]  +
push 13AEh  +
jmp loc_1019799  +
cmp [ebp+0Ch] ebx +
jz loc_1019819  +
push dword ptr [ebp+14h]  +
push 13C5h  +
call sub_10208E1  +
push dword ptr [ebp+18h]  +
push 13D6h  +
call sub_10208E1  +
cmp [ebp+8] ebx +
jz loc_101997F  +
push offset dword_1064BA8  +
lea ecx [ebp+14h] +
call sub_1015076  +
lea eax [ebp+14h] +
push eax  +
push 13A3h  +
mov byte ptr [ebp-4] 1 +
call sub_10208E1  +
mov eax [ebp+14h] +
push dword ptr [eax-0Ch]  +
mov ecx [ebp+18h] +
push eax  +
call sub_10155F6  +
jmp loc_1019974  +
mov edi [ebp+10h] +
cmp [edi+8] ebx +
jnz loc_101983B  +
push dword ptr [ebp+14h]  +
push 13C5h  +
call sub_10208E1  +
push dword ptr [ebp+18h]  +
push 139Dh  +
jmp loc_1019799  +
mov [eax] esi +
mov eax [edi] +
mov [ebp+20h] eax +
cmp eax ebx +
jz loc_10198A7  +
lea eax [ebp+20h] +
push eax  +
mov ecx edi +
call sub_105038C  +
push eax  +
lea ecx [ebp-24h] +
call sub_1015FF0  +
cmp [ebp-1Ch] ebx +
jle loc_101986B  +
cmp dword ptr [ebp-1Ch] 3 +
jle loc_10198A2  +
cmp dword ptr [ebp-1Ch] 4 +
jz loc_101986E  +
inc dword ptr [ebp-10h]  +
cmp [ebp+20h] ebx +
jnz loc_1019846  +
cmp [ebp-10h] ebx +
jz loc_10198A7  +
cmp [ebp-14h] ebx +
jnz loc_10198A7  +
push dword ptr [ebp+14h]  +
push 13C5h  +
call sub_10208E1  +
push dword ptr [ebp+18h]  +
push 13A1h  +
call sub_10208E1  +
mov eax [ebp+24h] +
mov dword ptr [eax] 4 +
jmp loc_1019910  +
inc dword ptr [ebp-14h]  +
jmp loc_101986E  +
lea eax [ebp+24h] +
push eax  +
call sub_1018563  +
mov ecx [ebp+14h] +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_1015AAF  +
mov ecx [ebp+24h] +
add ecx 0FFFFFFF0h +
mov [ebp-4] bl +
call sub_10147CD  +
cmp [ebp-10h] ebx +
jz loc_10198E7  +
push dword ptr [ebp+18h]  +
push 13BAh  +
call sub_10208E1  +
cmp [ebp+8] ebx +
jz loc_1019956  +
mov [ebp-18h] ebx +
jmp loc_1019910  +
lea eax [ebp+14h] +
push eax  +
call sub_1019641  +
mov ecx [ebp+18h] +
push eax  +
mov byte ptr [ebp-4] 3 +
call sub_1015AAF  +
mov ecx [ebp+14h] +
add ecx 0FFFFFFF0h +
mov [ebp-4] bl +
call sub_10147CD  +
mov eax [ebp+1Ch] +
mov [eax] esi +
cmp [ebp+8] ebx +
jz loc_1019951  +
push offset dword_1064BA8  +
lea ecx [ebp+14h] +
call sub_1015076  +
lea eax [ebp+14h] +
push eax  +
push 13A3h  +
mov byte ptr [ebp-4] 4 +
call sub_10208E1  +
mov eax [ebp+14h] +
push dword ptr [eax-0Ch]  +
mov ecx [ebp+18h] +
push eax  +
call sub_10155F6  +
mov ecx [ebp+14h] +
add ecx 0FFFFFFF0h +
mov [ebp-4] bl +
call sub_10147CD  +
cmp [ebp-18h] ebx +
jz loc_101997F  +
push dword ptr [ebp+18h]  +
lea eax [ebp+14h] +
push offset asc_10022F0  +
push eax  +
call sub_1018BE2  +
mov ecx [ebp+18h] +
push eax  +
mov byte ptr [ebp-4] 5 +
call sub_1015AAF  +
mov ecx [ebp+14h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
lea ecx [ebp-24h] +
call sub_10151BA  +
call sub_1021FA5  +
retn 20h  +
***
call sub_1021EB9  +
mov esi ecx +
test edi edi +
jz loc_1019DDB  +
test esi esi +
jz loc_1019DDB  +
inc dword_10647C4  +
xor ebx ebx +
inc ebx  +
cmp dword_10647C4 0Ah +
jnz loc_10199CA  +
mov dword_10647C4 ebx +
and dword ptr [esi] 0 +
mov ecx edi +
call loc_1014B04  +
mov eax dword_10647C4 +
dec eax  +
cmp eax 8 +
ja loc_1019DD7  +
jmp ds:off_1019DE4[eax*4]  +
lea ecx [ebp-18h] +
call sub_1015431  +
and dword ptr [ebp-4] 0 +
push offset aA_inf  +
lea ecx [ebp-18h] +
call sub_10158CD  +
mov esi offset aLocalizationTe +
push esi  +
lea ecx [ebp-14h] +
call sub_10158CD  +
lea eax [ebp-18h] +
push eax  +
mov ecx edi +
mov [ebp-10h] ebx +
call sub_1018E43  +
push offset aB_inf  +
lea ecx [ebp-18h] +
call sub_10158CD  +
push esi  +
lea ecx [ebp-14h] +
call sub_10158CD  +
lea eax [ebp-18h] +
push eax  +
mov ecx edi +
mov dword ptr [ebp-10h] 2 +
call sub_1018E43  +
push offset aC_inf  +
lea ecx [ebp-18h] +
call sub_10158CD  +
push esi  +
lea ecx [ebp-14h] +
call sub_10158CD  +
lea eax [ebp-18h] +
push eax  +
mov ecx edi +
mov dword ptr [ebp-10h] 3 +
call sub_1018E43  +
push offset aD_inf  +
lea ecx [ebp-18h] +
call sub_10158CD  +
push esi  +
lea ecx [ebp-14h] +
call sub_10158CD  +
lea eax [ebp-18h] +
push eax  +
mov ecx edi +
mov dword ptr [ebp-10h] 4 +
call sub_1018E43  +
push offset aE_inf  +
lea ecx [ebp-18h] +
call sub_10158CD  +
push esi  +
lea ecx [ebp-14h] +
call sub_10158CD  +
lea eax [ebp-18h] +
push eax  +
mov ecx edi +
mov dword ptr [ebp-10h] 6 +
call sub_1018E43  +
push offset aF_inf  +
lea ecx [ebp-18h] +
call sub_10158CD  +
push esi  +
lea ecx [ebp-14h] +
call sub_10158CD  +
lea eax [ebp-18h] +
push eax  +
mov ecx edi +
mov dword ptr [ebp-10h] 7 +
call sub_1018E43  +
push offset aG_inf  +
lea ecx [ebp-18h] +
call sub_10158CD  +
push esi  +
lea ecx [ebp-14h] +
call sub_10158CD  +
lea eax [ebp-18h] +
mov dword ptr [ebp-10h] 8 +
push eax  +
mov ecx edi +
call sub_1018E43  +
push offset aH_inf  +
lea ecx [ebp-18h] +
call sub_10158CD  +
push esi  +
lea ecx [ebp-14h] +
call sub_10158CD  +
mov dword ptr [ebp-10h] 9 +
lea eax [ebp-18h] +
push eax  +
mov ecx edi +
call sub_1018E43  +
lea ecx [ebp-18h] +
call sub_10151BA  +
jmp loc_1019DD7  +
lea ecx [ebp-18h] +
call sub_1015431  +
push offset aA_inf  +
lea ecx [ebp-18h] +
mov [ebp-4] ebx +
call sub_10158CD  +
mov esi offset aLocalizationTe +
push esi  +
lea ecx [ebp-14h] +
call sub_10158CD  +
lea eax [ebp-18h] +
push eax  +
mov ecx edi +
mov [ebp-10h] ebx +
call sub_1018E43  +
push offset aB_inf  +
lea ecx [ebp-18h] +
call sub_10158CD  +
push esi  +
lea ecx [ebp-14h] +
call sub_10158CD  +
mov [ebp-10h] ebx +
jmp loc_1019B2C  +
lea ecx [ebp-18h] +
call sub_1015431  +
push offset aA_inf  +
lea ecx [ebp-18h] +
mov dword ptr [ebp-4] 2 +
call sub_10158CD  +
mov esi offset aLocalizationTe +
push esi  +
lea ecx [ebp-14h] +
call sub_10158CD  +
lea eax [ebp-18h] +
push eax  +
mov ecx edi +
mov dword ptr [ebp-10h] 2 +
call sub_1018E43  +
push offset aB_inf  +
lea ecx [ebp-18h] +
call sub_10158CD  +
push esi  +
lea ecx [ebp-14h] +
call sub_10158CD  +
mov dword ptr [ebp-10h] 2 +
jmp loc_1019B2C  +
lea ecx [ebp-18h] +
call sub_1015431  +
push offset aA_inf  +
lea ecx [ebp-18h] +
mov dword ptr [ebp-4] 3 +
call sub_10158CD  +
mov esi offset aLocalizationTe +
push esi  +
lea ecx [ebp-14h] +
call sub_10158CD  +
lea eax [ebp-18h] +
push eax  +
mov ecx edi +
mov dword ptr [ebp-10h] 3 +
call sub_1018E43  +
push offset aB_inf  +
lea ecx [ebp-18h] +
call sub_10158CD  +
push esi  +
lea ecx [ebp-14h] +
call sub_10158CD  +
mov dword ptr [ebp-10h] 3 +
jmp loc_1019B2C  +
lea ecx [ebp-18h] +
call sub_1015431  +
push offset aA_inf  +
lea ecx [ebp-18h] +
mov dword ptr [ebp-4] 4 +
call sub_10158CD  +
mov esi offset aLocalizationTe +
push esi  +
lea ecx [ebp-14h] +
call sub_10158CD  +
lea eax [ebp-18h] +
push eax  +
mov ecx edi +
mov dword ptr [ebp-10h] 4 +
call sub_1018E43  +
push offset aB_inf  +
lea ecx [ebp-18h] +
call sub_10158CD  +
push esi  +
lea ecx [ebp-14h] +
call sub_10158CD  +
mov dword ptr [ebp-10h] 4 +
jmp loc_1019B2C  +
lea ecx [ebp-18h] +
call sub_1015431  +
push offset aA_inf  +
lea ecx [ebp-18h] +
mov dword ptr [ebp-4] 5 +
call sub_10158CD  +
mov esi offset aLocalizationTe +
push esi  +
lea ecx [ebp-14h] +
call sub_10158CD  +
lea eax [ebp-18h] +
push eax  +
mov ecx edi +
mov [ebp-10h] ebx +
call sub_1018E43  +
push offset aB_inf  +
lea ecx [ebp-18h] +
call sub_10158CD  +
push esi  +
lea ecx [ebp-14h] +
call sub_10158CD  +
lea eax [ebp-18h] +
push eax  +
mov ecx edi +
mov dword ptr [ebp-10h] 2 +
call sub_1018E43  +
push offset aC_inf  +
lea ecx [ebp-18h] +
call sub_10158CD  +
push esi  +
lea ecx [ebp-14h] +
call sub_10158CD  +
lea eax [ebp-18h] +
push eax  +
mov ecx edi +
mov dword ptr [ebp-10h] 3 +
call sub_1018E43  +
push offset aD_inf  +
jmp loc_1019C90  +
lea ecx [ebp-18h] +
call sub_1015431  +
push offset aA_inf  +
lea ecx [ebp-18h] +
mov dword ptr [ebp-4] 6 +
call sub_10158CD  +
mov esi offset aLocalizationTe +
push esi  +
lea ecx [ebp-14h] +
call sub_10158CD  +
lea eax [ebp-18h] +
push eax  +
mov ecx edi +
mov dword ptr [ebp-10h] 6 +
call sub_1018E43  +
push offset aB_inf  +
lea ecx [ebp-18h] +
call sub_10158CD  +
push esi  +
lea ecx [ebp-14h] +
call sub_10158CD  +
lea eax [ebp-18h] +
push eax  +
mov ecx edi +
mov dword ptr [ebp-10h] 7 +
call sub_1018E43  +
push offset aC_inf  +
lea ecx [ebp-18h] +
call sub_10158CD  +
push esi  +
lea ecx [ebp-14h] +
call sub_10158CD  +
lea eax [ebp-18h] +
push eax  +
mov ecx edi +
mov dword ptr [ebp-10h] 8 +
call sub_1018E43  +
push offset aD_inf  +
jmp loc_1019B14  +
mov [esi] ebx +
mov eax ebx +
jmp loc_1019DDD  +
xor eax eax +
call sub_1021FA5  +
retn   +
***
push ebp  +
mov ebp esp +
push ecx  +
test byte ptr dword_10647FC 1 +
push ebx  +
push esi  +
push edi  +
mov esi offset dword_1064BA8 +
jnz loc_1019E41  +
or dword_10647FC 1 +
push esi  +
mov ecx offset dword_10647F8 +
call sub_1015076  +
push offset loc_105A86C  +
call sub_1022394  +
pop ecx  +
test byte ptr dword_10647FC 2 +
mov ebx offset dword_10647F4 +
jnz loc_1019E69  +
or dword_10647FC 2 +
push esi  +
mov ecx ebx +
call sub_1015076  +
push offset loc_105A859  +
call sub_1022394  +
pop ecx  +
test byte ptr dword_10647FC 4 +
mov edi offset unk_10647DC +
jnz loc_1019E92  +
or dword_10647FC 4 +
push 0Ah  +
mov ecx edi +
call sub_101C247  +
push offset loc_105A740  +
call sub_1022394  +
pop ecx  +
mov esi 7DFh +
push esi  +
push dword ptr [ebp+8]  +
call ds:GetDlgItem  +
push 1  +
push dword_1064734  +
push 30h  +
push eax  +
call ds:SendMessageW  +
mov ecx offset dword_10647D8 +
call sub_1019994  +
push offset dword_10647D4  +
push offset dword_10647D0  +
lea ecx [ebp-4] +
push ecx  +
push ebx  +
push offset dword_10647F8  +
push edi  +
push dword_10647D8  +
push eax  +
call sub_1019736  +
mov eax dword_10647F8 +
cmp dword ptr [eax-0Ch] 0 +
mov ebx ds:SetDlgItemTextW +
jz loc_1019EF5  +
push eax  +
push esi  +
push dword ptr [ebp+8]  +
call ebx  +
mov eax dword_10647F4 +
cmp dword ptr [eax-0Ch] 0 +
jz loc_1019F0B  +
push eax  +
push 7D6h  +
push dword ptr [ebp+8]  +
call ebx  +
cmp dword_10647D0 0 +
jz loc_1019F2F  +
push dword_10647CC  +
push dword_10647C8  +
push dword_10647D4  +
push edi  +
push dword ptr [ebp+8]  +
call sub_1018E72  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
push 20h  +
mov eax offset loc_1054F9C +
call sub_1021EB9  +
test byte ptr dword_1064838 1 +
jnz loc_1019F71  +
or dword_1064838 1 +
push offset dword_1064BA8  +
mov ecx offset dword_1064834 +
call sub_1015076  +
push offset loc_105A846  +
call sub_1022394  +
pop ecx  +
test byte ptr dword_1064838 2 +
jnz loc_1019F9B  +
or dword_1064838 2 +
push offset dword_1064BA8  +
mov ecx offset dword_1064830 +
call sub_1015076  +
push offset loc_105A833  +
call sub_1022394  +
pop ecx  +
test byte ptr dword_1064838 4 +
mov edi offset unk_1064818 +
jnz loc_1019FC4  +
or dword_1064838 4 +
push 0Ah  +
mov ecx edi +
call sub_101C247  +
push offset loc_105A731  +
call sub_1022394  +
pop ecx  +
cmp dword ptr [ebp+0Ch] 4Eh +
jz loc_101A1D1  +
cmp dword ptr [ebp+0Ch] 110h +
jnz loc_101A222  +
mov esi ds:GetDlgItem +
push 7DFh  +
push dword ptr [ebp+8]  +
call esi  +
mov ebx ds:SendMessageW +
push 1  +
push dword_1064734  +
push 30h  +
push eax  +
call ebx  +
cmp dword_1064784 0 +
jz loc_101A013  +
mov ecx offset dword_1064814 +
call sub_1019994  +
jmp loc_101A01E  +
push edi  +
push offset dword_1064814  +
call sub_101D292  +
push offset dword_1064810  +
push offset dword_106480C  +
lea ecx [ebp+14h] +
push ecx  +
push offset dword_1064830  +
push offset dword_1064834  +
push edi  +
push dword_1064814  +
push eax  +
call sub_1019736  +
mov eax dword_1064834 +
cmp dword ptr [eax-0Ch] 0 +
mov edi ds:SetDlgItemTextW +
jz loc_101A05F  +
push eax  +
push 7DFh  +
push dword ptr [ebp+8]  +
call edi  +
mov eax dword_1064830 +
cmp dword ptr [eax-0Ch] 0 +
jz loc_101A075  +
push eax  +
push 7D6h  +
push dword ptr [ebp+8]  +
call edi  +
cmp dword_106480C 0 +
jz loc_101A1BE  +
push offset dword_1064BA8  +
lea ecx [ebp+0Ch] +
call sub_1015076  +
and dword ptr [ebp-4] 0 +
push 7DEh  +
push dword ptr [ebp+8]  +
call esi  +
mov esi ds:GetSystemMetrics +
push 1  +
push 1  +
push 1  +
push 32h  +
mov [ebp+8] eax +
call esi  +
push eax  +
push 31h  +
call esi  +
push eax  +
call ds:ImageList_Create  +
xor edi edi +
mov dword_1064808 eax +
cmp eax edi +
jz loc_101A142  +
push 5  +
call ds:GetSysColor  +
push eax  +
push dword_1064808  +
call ds:ImageList_SetBkColor  +
push 68h  +
call sub_1020497  +
mov esi ds:ImageList_ReplaceIcon +
mov [ebp+14h] eax +
cmp eax edi +
jz loc_101A115  +
call sub_10204D7  +
push dword ptr [ebp+14h]  +
test eax eax +
jz loc_101A106  +
call sub_10204FD  +
cmp eax edi +
jz loc_101A115  +
push eax  +
push 0FFFFFFFFh  +
push dword_1064808  +
call esi  +
mov dword_1064804 eax +
push 69h  +
call sub_1020497  +
cmp eax edi +
jz loc_101A130  +
push eax  +
push 0FFFFFFFFh  +
push dword_1064808  +
call esi  +
mov dword_1064800 eax +
push dword_1064808  +
push 1  +
push 1003h  +
push dword ptr [ebp+8]  +
call ebx  +
lea eax [ebp+0Ch] +
push eax  +
push 13B9h  +
mov dword ptr [ebp-2Ch] 0Fh +
mov [ebp-28h] edi +
call sub_10208E1  +
lea ecx [ebp+0Ch] +
call sub_1015002  +
mov [ebp-20h] eax +
lea eax [ebp-2Ch] +
push eax  +
push edi  +
mov esi 1061h +
push esi  +
push dword ptr [ebp+8]  +
mov [ebp-18h] edi +
call ebx  +
lea eax [ebp+0Ch] +
push eax  +
push 13C0h  +
call sub_10208E1  +
lea ecx [ebp+0Ch] +
call sub_1015002  +
mov [ebp-20h] eax +
xor eax eax +
lea ecx [ebp-2Ch] +
push ecx  +
inc eax  +
push eax  +
push esi  +
push dword ptr [ebp+8]  +
mov [ebp-18h] eax +
call ebx  +
push edi  +
push edi  +
push 1036h  +
push dword ptr [ebp+8]  +
call ebx  +
mov ecx [ebp+0Ch] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
jmp loc_101A24A  +
push 7DEh  +
push dword ptr [ebp+8]  +
call esi  +
push eax  +
call ds:DestroyWindow  +
jmp loc_101A24A  +
mov eax [ebp+14h] +
mov eax [eax+8] +
cmp eax 0FFFFFF30h +
jz loc_101A22C  +
cmp eax 0FFFFFF38h +
jnz loc_101A222  +
push 4  +
push 0  +
push 470h  +
push dword ptr [ebp+8]  +
call ds:GetParent  +
push eax  +
call ds:PostMessageW  +
cmp dword_106480C 0 +
jz loc_101A222  +
push dword_1064800  +
push dword_1064804  +
push dword_1064810  +
push edi  +
push dword ptr [ebp+8]  +
call sub_1018E72  +
xor eax eax +
call sub_1021FA5  +
retn 10h  +
***
cmp dword_1064784 0 +
jz loc_101A222  +
push dword ptr [ebp+8]  +
call near ptr byte_1019E0C+1  +
push 1  +
push 0  +
push dword ptr [ebp+8]  +
call ds:SetWindowLongW  +
xor eax eax +
inc eax  +
jmp loc_101A224  +
***
call sub_1021EB9  +
xor ebx ebx +
push 2Ch  +
lea eax [ebp-40h] +
push ebx  +
push eax  +
mov [ebp-44h] ebx +
call sub_10219E0  +
add esp 0Ch +
push offset dword_1064BA8  +
lea ecx [ebp-10h] +
mov [ebp-14h] ebx +
call sub_1015076  +
or dword_1064720 0FFFFFFFFh +
push 2  +
pop edi  +
mov ecx offset dword_1064734 +
mov [ebp-4] ebx +
mov dword_1064724 edi +
call sub_1018A57  +
mov eax [ebp+8] +
mov dword_1064780 eax +
mov eax [ebp+0Ch] +
mov dword_1064784 eax +
mov eax [ebp+10h] +
mov dword_1064788 eax +
lea eax [ebp+8] +
push eax  +
call sub_101BB51  +
push eax  +
mov ecx offset dword_106478C +
mov byte ptr [ebp-4] 1 +
call sub_1015959  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
mov [ebp-4] bl +
call sub_10147CD  +
lea eax [ebp+8] +
push eax  +
call sub_101BC9D  +
push eax  +
mov ecx offset dword_1064790 +
mov byte ptr [ebp-4] 2 +
call sub_1015959  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
mov [ebp-4] bl +
call sub_10147CD  +
push ebx  +
lea eax [ebp+8] +
push eax  +
call sub_101BCDE  +
mov esi offset dword_10647A0 +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 3 +
call sub_1015959  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
mov [ebp-4] bl +
call sub_10147CD  +
mov eax dword_10647A0 +
cmp [eax-0Ch] ebx +
jnz loc_101A36E  +
push esi  +
push 1388h  +
call sub_10208E1  +
test eax eax +
jnz loc_101A36E  +
push offset aWizardFailed_0  +
mov esi 714h +
push esi  +
push 3  +
call sub_10167CB  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov eax esi +
call sub_1021FA5  +
retn 0Ch  +
push 1  +
lea eax [ebp+8] +
push eax  +
call sub_101BCDE  +
mov esi offset dword_10647A4 +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 4 +
call sub_1015959  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
mov [ebp-4] bl +
call sub_10147CD  +
mov eax dword_10647A4 +
cmp [eax-0Ch] ebx +
jnz loc_101A3B1  +
push esi  +
push 138Ch  +
call sub_10208E1  +
test eax eax +
jz loc_101A347  +
push edi  +
lea eax [ebp+8] +
push eax  +
call sub_101BCDE  +
mov esi offset dword_10647A8 +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 5 +
call sub_1015959  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
mov [ebp-4] bl +
call sub_10147CD  +
mov eax dword_10647A8 +
cmp [eax-0Ch] ebx +
jnz loc_101A3F7  +
push esi  +
push 138Dh  +
call sub_10208E1  +
test eax eax +
jz loc_101A347  +
push 7  +
lea eax [ebp+8] +
push eax  +
call sub_101BCDE  +
mov esi offset dword_10647AC +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 6 +
call sub_1015959  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
mov [ebp-4] bl +
call sub_10147CD  +
mov eax dword_10647AC +
cmp [eax-0Ch] ebx +
jnz loc_101A43E  +
push esi  +
push 138Eh  +
call sub_10208E1  +
test eax eax +
jz loc_101A347  +
push 8  +
lea eax [ebp+8] +
push eax  +
call sub_101BCDE  +
mov esi offset dword_10647B0 +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 7 +
call sub_1015959  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
mov [ebp-4] bl +
call sub_10147CD  +
mov eax dword_10647B0 +
cmp [eax-0Ch] ebx +
jnz loc_101A485  +
push esi  +
push 139Eh  +
call sub_10208E1  +
test eax eax +
jz loc_101A347  +
push 3  +
lea eax [ebp+8] +
push eax  +
call sub_101BCDE  +
mov esi offset dword_10647B4 +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 8 +
call sub_1015959  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
mov [ebp-4] bl +
call sub_10147CD  +
mov eax dword_10647B4 +
cmp [eax-0Ch] ebx +
jnz loc_101A4CC  +
push esi  +
push 138Ah  +
call sub_10208E1  +
test eax eax +
jz loc_101A347  +
push 5  +
lea eax [ebp+8] +
push eax  +
call sub_101BCDE  +
mov esi offset dword_1064798 +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 9 +
call sub_1015959  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
mov [ebp-4] bl +
call sub_10147CD  +
mov eax dword_1064798 +
cmp [eax-0Ch] ebx +
jnz loc_101A513  +
push esi  +
push 13A6h  +
call sub_10208E1  +
test eax eax +
jz loc_101A347  +
push 6  +
lea eax [ebp+8] +
push eax  +
call sub_101BCDE  +
mov esi offset dword_106479C +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 0Ah +
call sub_1015959  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
mov [ebp-4] bl +
call sub_10147CD  +
mov eax dword_106479C +
cmp [eax-0Ch] ebx +
jnz loc_101A55A  +
push esi  +
push 13A7h  +
call sub_10208E1  +
test eax eax +
jz loc_101A347  +
push 4  +
lea eax [ebp+8] +
push eax  +
call sub_101BCDE  +
mov esi offset dword_1064794 +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 0Bh +
call sub_1015959  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
mov [ebp-4] bl +
call sub_10147CD  +
mov eax dword_1064794 +
cmp [eax-0Ch] ebx +
jnz loc_101A5A1  +
push esi  +
push 1389h  +
call sub_10208E1  +
test eax eax +
jz loc_101A347  +
push 1  +
push 1  +
lea eax [ebp+8] +
push eax  +
call sub_101BD38  +
push eax  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 0Ch +
call sub_1015959  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
mov [ebp-4] bl +
call sub_10147CD  +
mov ecx [ebp-10h] +
mov eax [ecx-0Ch] +
mov esi ds:LoadImageW +
mov edi 0A050h +
cmp eax ebx +
jz loc_101A5EF  +
push edi  +
push ebx  +
push ebx  +
push ebx  +
push ecx  +
push ebx  +
call esi  +
mov dword_1064728 eax +
cmp eax ebx +
jnz loc_101A603  +
push 66h  +
call sub_1020457  +
mov dword_1064728 eax +
cmp eax ebx +
jz loc_101A347  +
push 1  +
push 2  +
lea eax [ebp+8] +
push eax  +
call sub_101BD38  +
push eax  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 0Dh +
call sub_1015959  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
mov [ebp-4] bl +
call sub_10147CD  +
mov eax [ebp-10h] +
cmp [eax-0Ch] ebx +
jz loc_101A644  +
push edi  +
push ebx  +
push ebx  +
push ebx  +
push eax  +
push ebx  +
call esi  +
mov dword_106472C eax +
cmp eax ebx +
jnz loc_101A658  +
push 65h  +
call sub_1020457  +
mov dword_106472C eax +
cmp eax ebx +
jz loc_101A347  +
push 1  +
push ebx  +
lea eax [ebp+8] +
push eax  +
mov hIcon ebx +
call sub_101BD38  +
mov edi offset dword_10647B8 +
push eax  +
mov ecx edi +
mov byte ptr [ebp-4] 0Eh +
call sub_1015959  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
mov [ebp-4] bl +
call sub_10147CD  +
mov eax dword_10647B8 +
cmp [eax-0Ch] ebx +
jz loc_101A6A5  +
push 8050h  +
push ebx  +
push ebx  +
push 1  +
push eax  +
push ebx  +
call esi  +
mov hIcon eax +
cmp hIcon ebx +
jnz loc_101A6CC  +
push 64h  +
call sub_1020497  +
mov ecx edi +
mov hIcon eax +
call sub_1014FC6  +
cmp hIcon ebx +
jz loc_101A347  +
lea eax [ebp+8] +
push eax  +
mov dword ptr [ebp-44h] 30h +
mov dword ptr [ebp-40h] 809h +
call sub_10184FA  +
mov ecx [ebp+8] +
mov eax [eax] +
add ecx 0FFFFFFF0h +
mov [ebp-30h] eax +
call sub_10147CD  +
push 3E8h  +
mov dword ptr [ebp-2Ch] offset byte_10185EF +
mov [ebp-3Ch] ebx +
call sub_1020691  +
mov [ebp-38h] eax +
cmp eax ebx +
jz loc_101A347  +
mov esi ds:CreatePropertySheetPageW +
lea eax [ebp-44h] +
push eax  +
call esi  +
mov dword_1064738 eax +
mov eax dword_1064794 +
mov edi 3009h +
push 3E9h  +
mov [ebp-40h] edi +
mov dword ptr [ebp-2Ch] offset loc_101909B +
mov [ebp-1Ch] eax +
mov [ebp-18h] ebx +
mov [ebp-3Ch] ebx +
call sub_1020691  +
mov [ebp-38h] eax +
cmp eax ebx +
jz loc_101A347  +
lea eax [ebp-44h] +
push eax  +
call esi  +
mov dword_106473C eax +
mov eax dword_10647B4 +
push 3EAh  +
mov [ebp-40h] edi +
mov dword ptr [ebp-2Ch] offset loc_101888C +
mov [ebp-1Ch] eax +
mov [ebp-18h] ebx +
mov [ebp-3Ch] ebx +
call sub_1020691  +
mov [ebp-38h] eax +
cmp eax ebx +
jz loc_101A347  +
lea eax [ebp-44h] +
push eax  +
call esi  +
push 3EBh  +
mov dword_1064740 eax +
mov dword ptr [ebp-40h] 809h +
mov dword ptr [ebp-2Ch] offset loc_1019F3B +
mov [ebp-3Ch] ebx +
call sub_1020691  +
mov [ebp-38h] eax +
cmp eax ebx +
jz loc_101A347  +
lea eax [ebp-44h] +
push eax  +
call esi  +
mov dword_1064744 eax +
mov eax hIcon +
mov dword ptr stru_1064748.anonymous_0 eax +
lea eax [ebp+8] +
push eax  +
mov stru_1064748.dwSize 34h +
mov stru_1064748.dwFlags 11D8122h +
mov stru_1064748.hwndParent ebx +
mov stru_1064748.hInstance ebx +
call sub_10184FA  +
mov ecx [ebp+8] +
mov eax [eax] +
add ecx 0FFFFFFF0h +
mov stru_1064748.pszCaption eax +
call sub_10147CD  +
mov eax dword_1064728 +
mov esi [ebp-14h] +
mov dword ptr stru_1064748.anonymous_3 eax +
mov eax dword_106472C +
mov stru_1064748.nPages 4 +
mov dword ptr stru_1064748.anonymous_1 ebx +
mov dword ptr stru_1064748.anonymous_2 offset dword_1064738 +
mov stru_1064748.pfnCallback offset loc_10183CA +
mov dword ptr stru_1064748.anonymous_4 eax +
jmp loc_101A359  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
xor ecx ecx +
inc esi  +
xor edx edx +
cmp [ebp+arg_4] ecx +
jle loc_101A88E  +
mov eax [ebp+arg_0] +
mov al [ecx+eax] +
test al al +
jns loc_101A87C  +
xor esi esi +
test edx edx +
jnz loc_101A892  +
cmp al 80h +
jb loc_101A899  +
add al al +
inc edx  +
test al al +
js loc_101A884  +
dec edx  +
jnz loc_101A899  +
xor eax eax +
jmp loc_101A8AA  +
and al 0C0h +
cmp al 80h +
jnz loc_101A88E  +
dec edx  +
inc ecx  +
cmp ecx [ebp+arg_4] +
jl loc_101A870  +
test edx edx +
ja loc_101A88E  +
test esi esi +
jnz loc_101A88E  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1021264  +
add esp 10h +
push eax  +
call sub_1014434  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_102156C  +
add esp 10h +
push eax  +
call sub_1014434  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_101A911  +
xor eax eax +
jmp loc_101A930  +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jz loc_101A91F  +
mov eax [edi] +
push edi  +
call dword ptr [eax+4]  +
mov eax [esi] +
test eax eax +
jz loc_101A92B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [esi] edi +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_101A959  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_101A949  +
sub eax edx +
sar eax 1 +
pop ebp  +
retn   +
xor eax eax +
pop ebp  +
retn   +
***
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+4] +
push eax  +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
test eax eax +
jnz loc_101A9A5  +
test esi esi +
jz loc_101A9A5  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx] +
push [ebp+arg_0]  +
push ecx  +
call sub_10224ED  +
pop ecx  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_8] +
push edi  +
test ecx ecx +
jnz loc_101A9F3  +
push 80004005h  +
call loc_1014415  +
cmp [ebp+arg_0] 0 +
mov edi [ebp+arg_4] +
jnz loc_101AA07  +
test edi edi +
jz loc_101AA07  +
push 80070057h  +
jmp loc_101A9EE  +
mov eax [ecx] +
push 2  +
push edi  +
call dword ptr [eax]  +
test eax eax +
jnz loc_101AA17  +
call loc_1014782  +
add eax 10h +
push edi  +
mov ecx esi +
mov [esi] eax +
call loc_10149C4  +
push edi  +
push [ebp+arg_0]  +
push edi  +
push dword ptr [esi]  +
call sub_1014323  +
add esp 10h +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
jmp loc_101AA5C  +
mov eax [esi] +
cmp eax edi +
jz loc_101AA7B  +
mov ecx [eax] +
mov [esi] ecx +
push eax  +
mov ecx esi +
call sub_101AF8C  +
cmp [esi+8] edi +
ja loc_101AA4A  +
mov ecx [esi+0Ch] +
mov [esi] edi +
mov [esi+4] edi +
mov [esi+10h] edi +
cmp ecx edi +
jz loc_101AA78  +
call sub_10147B2  +
mov [esi+0Ch] edi +
pop edi  +
pop esi  +
retn   +
***
push 80004005h  +
call loc_1014415  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax] +
mov eax [ecx] +
cmp eax edx +
jz loc_101AAAC  +
push edx  +
push ecx  +
call sub_101A900  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
cmp eax [ebp+arg_0] +
jz loc_101AACA  +
push [ebp+arg_0]  +
push ecx  +
call sub_101A900  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_8]  +
mov esi ecx +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101A9D9  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
lea ecx [esi+8] +
call sub_101C334  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push 0  +
mov esi ecx +
call sub_101AAB5  +
mov eax [esi] +
pop esi  +
test eax eax +
jz locret_101AB2D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
and dword ptr [esi] 0 +
call sub_101AA95  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push 0  +
lea ecx [esi+4] +
call sub_101AAB5  +
push 0  +
mov ecx esi +
call sub_101AAB5  +
pop esi  +
retn   +
***
call sub_1021EB9  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
call sub_101AB52  +
lea ecx [esi+4] +
call sub_101AB14  +
mov esi [esi] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jz loc_101ABA3  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
call sub_1021FA5  +
retn   +
***
mov edi edi +
push esi  +
xor esi esi +
cmp dword_1064850 esi +
jz loc_101ABC6  +
push esi  +
push offset dword_1064850  +
call sub_101A900  +
cmp dword_106484C esi +
jz loc_101ABD9  +
push esi  +
push offset dword_106484C  +
call sub_101A900  +
mov ecx offset unk_1064844 +
call sub_101AB52  +
xor eax eax +
mov dword_106483C esi +
inc eax  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jge loc_101AC08  +
xor edi edi +
mov esi [ecx] +
cmp edi [esi-0Ch] +
jl loc_101AC1A  +
push ecx  +
mov ecx [ebp+arg_0] +
call sub_10151F2  +
jmp loc_101AC2A  +
call sub_101504D  +
mov ecx [ebp+arg_0] +
push eax  +
push edi  +
push esi  +
call sub_101AAD3  +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+8] +
push esi  +
push edi  +
mov esi ecx +
test ebx ebx +
jl loc_101AC6E  +
mov eax [esi] +
mov edi [eax-0Ch] +
cmp ebx edi +
jge loc_101AC6E  +
call sub_1015002  +
mov cx [ebp+0Ch] +
mov [eax+ebx*2] cx +
push edi  +
mov ecx esi +
call loc_10149C4  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
push 80070057h  +
call loc_1014415  +
mov edi edi +
push esi  +
mov esi ecx +
and dword ptr [esi+4] 0 +
push 0Ah  +
lea ecx [esi+8] +
mov dword ptr [esi] offset off_10045C8 +
call sub_101C247  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
and dword ptr [esi+4] 0 +
lea ecx [esi+8] +
mov dword ptr [esi] offset off_10045CC +
call sub_10151DA  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+8] +
call loc_101C2DA  +
mov dword ptr [esi] offset off_10058A4 +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+8] +
sub ecx 10h +
call sub_10147CD  +
mov dword ptr [esi] offset off_10058A4 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
call sub_101512A  +
mov esi [edi+10h] +
mov ebx [esi] +
test esi esi +
jz loc_101AD19  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_101AAF5  +
mov eax [ebp+arg_4] +
mov [edi+10h] ebx +
mov [esi+4] eax +
mov eax [ebp+arg_8] +
mov [esi] eax +
inc dword ptr [edi+8]  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
push 28h  +
mov esi ecx +
call sub_10225EB  +
pop ecx  +
test eax eax +
jz loc_101AD52  +
mov ecx eax +
call sub_101AC7E  +
jmp loc_101AD54  +
xor eax eax +
push eax  +
mov ecx esi +
call sub_104B66E  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push 0Ch  +
mov esi ecx +
call sub_10225EB  +
pop ecx  +
test eax eax +
jz loc_101AD7F  +
mov ecx eax +
call sub_101ACA0  +
jmp loc_101AD81  +
xor eax eax +
push eax  +
mov ecx esi +
call sub_104B66E  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101ACC0  +
test byte ptr [ebp+8] 1 +
jz loc_101ADAC  +
push esi  +
call sub_1021179  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101ACDA  +
test byte ptr [ebp+8] 1 +
jz loc_101ADD2  +
push esi  +
call sub_1021179  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0  +
mov esi ecx +
push dword ptr [esi+4]  +
push [ebp+arg_0]  +
call sub_101ACF7  +
mov ecx [esi+4] +
test ecx ecx +
jz loc_101ADFE  +
mov [ecx] eax +
jmp loc_101AE00  +
mov [esi] eax +
mov [esi+4] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
lea ecx [esi+8] +
call sub_101AB14  +
test [ebp+arg_0] 1 +
jz loc_101AE2A  +
push esi  +
call sub_1021179  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
push [ebp+arg_0]  +
mov ebx ecx +
mov [ebp+var_1C] ebx +
call sub_101A93A  +
pop ecx  +
mov [ebp+var_C] eax +
test eax eax +
jz loc_101AF82  +
push esi  +
push edi  +
push [ebp+arg_4]  +
call sub_101A93A  +
mov esi [ebx] +
and [ebp+var_8] 0 +
mov [ebp+var_10] eax +
mov eax [esi-0Ch] +
lea edi [esi+eax*2] +
pop ecx  +
cmp esi edi +
jnb loc_101AF7D  +
jmp loc_101AE85  +
mov ecx [ebp+var_C] +
inc [ebp+var_8]  +
lea esi [eax+ecx*2] +
push [ebp+arg_0]  +
push esi  +
call sub_1022585  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_101AE7C  +
push esi  +
call sub_101A93A  +
lea esi [esi+eax*2+2] +
pop ecx  +
cmp esi edi +
jb loc_101AE85  +
cmp [ebp+var_8] 0 +
jle loc_101AF7D  +
mov esi [ebp+var_10] +
sub esi [ebp+var_C] +
mov eax [ebx] +
imul esi [ebp+var_8] +
mov edi [eax-0Ch] +
add esi edi +
cmp esi edi +
mov [ebp+var_14] edi +
mov [ebp+var_20] esi +
mov eax esi +
jg loc_101AECC  +
mov eax edi +
push eax  +
mov ecx ebx +
call sub_1015255  +
lea edi [eax+edi*2] +
mov [ebp+var_18] eax +
mov [ebp+var_24] edi +
cmp eax edi +
jmp loc_101AF6C  +
push [ebp+arg_0]  +
push [ebp+var_4]  +
call sub_1022585  +
mov edi eax +
pop ecx  +
pop ecx  +
test edi edi +
jz loc_101AF5B  +
mov ebx [ebp+var_10] +
add ebx ebx +
mov esi [ebp+var_14] +
mov edx [ebp+var_C] +
mov eax edi +
sub eax [ebp+var_18] +
lea ecx [ebx+edi] +
sar eax 1 +
sub esi eax +
sub esi edx +
lea eax [esi+esi] +
push eax  +
lea edx [edi+edx*2] +
push edx  +
push eax  +
push ecx  +
call sub_101A8DA  +
push ebx  +
push [ebp+arg_4]  +
push ebx  +
push edi  +
call sub_101A8B4  +
push [ebp+arg_0]  +
lea eax [ebx+edi] +
mov [ebp+var_4] eax +
mov eax [ebp+var_10] +
push [ebp+var_4]  +
add esi eax +
sub eax [ebp+var_C] +
xor ecx ecx +
add [ebp+var_14] eax +
mov [edi+esi*2] cx +
call sub_1022585  +
mov edi eax +
add esp 28h +
test edi edi +
jnz loc_101AEFC  +
mov ebx [ebp+var_1C] +
mov esi [ebp+var_20] +
mov edi [ebp+var_4] +
push edi  +
call sub_101A93A  +
lea eax [edi+eax*2+2] +
cmp eax [ebp+var_24] +
pop ecx  +
mov [ebp+var_4] eax +
jb loc_101AEE4  +
push esi  +
mov ecx ebx +
call loc_10149C4  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
push 0  +
mov ecx edi +
call sub_101AE0D  +
mov eax [esi+10h] +
mov [edi] eax +
dec dword ptr [esi+8]  +
mov [esi+10h] edi +
jnz loc_101AFB5  +
mov ecx esi +
call loc_101AA40  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1021EB9  +
xor esi esi +
mov [ebp-20h] esi +
mov ecx [ebp+8] +
mov [ebp-10h] esi +
call sub_10151DA  +
mov ecx [ebp+8] +
xor edi edi +
inc edi  +
mov [ebp-4] esi +
mov [ebp-20h] edi +
call sub_1014FC6  +
mov eax [ebp+0Ch] +
mov eax [eax] +
push esi  +
push esi  +
push 3  +
push esi  +
push edi  +
push 80000000h  +
push eax  +
call ds:CreateFileW  +
mov ebx eax +
mov [ebp-28h] ebx +
cmp ebx 0FFFFFFFFh +
jz loc_101B1F9  +
push esi  +
push ebx  +
call ds:GetFileSize  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jz loc_101B1F0  +
push esi  +
push edi  +
push esi  +
push 2  +
push esi  +
push ebx  +
call ds:CreateFileMappingW  +
mov [ebp-24h] eax +
cmp eax esi +
jz loc_101B1F0  +
push edi  +
push esi  +
push esi  +
push 4  +
push eax  +
call ds:MapViewOfFile  +
mov ebx eax +
mov [ebp-18h] ebx +
test ebx ebx +
jz loc_101B1E7  +
movzx eax word ptr [ebx] +
mov [ebp-1Ch] eax +
movzx eax ax +
mov [ebp+0Ch] ebx +
cmp eax 0BBEFh +
jz loc_101B085  +
cmp eax 0FEFFh +
jz loc_101B07B  +
cmp eax 0FFFEh +
jnz loc_101B130  +
shr edi 1 +
dec edi  +
mov esi edi +
jmp loc_101B16A  +
cmp edi 2 +
jbe loc_101B130  +
cmp byte ptr [ebx+2] 0BFh +
jnz loc_101B130  +
add ebx 3 +
mov dword ptr [ebp-10h] 0FDE9h +
mov [ebp+0Ch] ebx +
sub edi 3 +
mov ebx ds:MultiByteToWideChar +
xor eax eax +
push eax  +
push eax  +
push edi  +
push dword ptr [ebp+0Ch]  +
push eax  +
push dword ptr [ebp-10h]  +
call ebx  +
mov esi eax +
test esi esi +
jz loc_101B1DD  +
mov ecx [ebp+8] +
lea eax [esi+1] +
push eax  +
call sub_10158A3  +
push esi  +
push eax  +
push edi  +
push dword ptr [ebp+0Ch]  +
mov [ebp-14h] eax +
push 0  +
push dword ptr [ebp-10h]  +
call ebx  +
test eax eax +
jnz loc_101B0F4  +
mov ecx [ebp+8] +
push 0FFFFFFFFh  +
call sub_1015023  +
and dword ptr [ebp-14h] 0 +
mov ebx [ebp-18h] +
mov edx [ebp-14h] +
test edx edx +
jz loc_101B1E0  +
mov eax edx +
test esi esi +
jbe loc_101B11B  +
mov ecx esi +
cmp word ptr [eax] 0 +
jnz loc_101B116  +
push 20h  +
pop edi  +
mov [eax] di +
inc eax  +
inc eax  +
dec ecx  +
jnz loc_101B10A  +
mov ecx [ebp+8] +
xor eax eax +
push 0FFFFFFFFh  +
mov [edx+esi*2] ax +
call sub_1015023  +
jmp loc_101B1E0  +
or dword ptr [ebp-14h] 0FFFFFFFFh +
lea eax [ebp-14h] +
push eax  +
push edi  +
push ebx  +
call ds:IsTextUnicode  +
mov [ebp-14h] eax +
test eax eax +
jz loc_101B14D  +
mov esi edi +
shr esi 1 +
jmp loc_101B160  +
push edi  +
push ebx  +
call sub_101A85E  +
neg eax  +
sbb eax eax +
and eax 0FDE9h +
mov [ebp-10h] eax +
cmp dword ptr [ebp-14h] 0 +
jz loc_101B0A8  +
mov ecx [ebp+8] +
lea eax [esi+1] +
push eax  +
call sub_10158A3  +
mov ecx eax +
mov eax 0FEFFh +
mov [ebp-14h] ecx +
cmp [ebp-1Ch] ax +
jnz loc_101B190  +
lea eax [esi+esi] +
push eax  +
lea eax [ebx+2] +
push eax  +
jmp loc_101B1CF  +
mov eax 0FFFEh +
cmp [ebp-1Ch] ax +
jnz loc_101B1CA  +
lea eax [ebx+2] +
test esi esi +
jbe loc_101B0F7  +
sub ecx eax +
mov [ebp+0Ch] esi +
movzx dx byte ptr [eax+1] +
mov di [eax] +
shl di 8 +
xor dx di +
mov [ecx+eax] dx +
inc eax  +
inc eax  +
dec dword ptr [ebp+0Ch]  +
jnz loc_101B1AB  +
jmp loc_101B0F7  +
lea eax [esi+esi] +
push eax  +
push ebx  +
push ecx  +
call loc_1022620  +
add esp 0Ch +
jmp loc_101B0F7  +
mov ebx [ebp-18h] +
push ebx  +
call ds:UnmapViewOfFile  +
push dword ptr [ebp-24h]  +
call ds:CloseHandle  +
push dword ptr [ebp-28h]  +
call ds:CloseHandle  +
mov eax [ebp+8] +
call sub_1021FA5  +
retn 8  +
***
call sub_1021EB9  +
mov ecx [ebp+10h] +
xor esi esi +
inc esi  +
mov [ebp-4] esi +
call loc_101AA40  +
lea eax [ebp+0Ch] +
push eax  +
push dword ptr [ebp+10h]  +
lea ecx [ebp+8] +
call sub_101FCE1  +
push esi  +
lea eax [ebp-10h] +
push eax  +
lea ecx [ebp+0Ch] +
call sub_101ABF3  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 2 +
call sub_101575C  +
mov esi [ebp-10h] +
mov eax [esi-0Ch] +
test eax eax +
jge loc_101B25F  +
push 80070057h  +
call loc_1014415  +
movzx eax word ptr [esi] +
push eax  +
push 0  +
lea ecx [ebp+0Ch] +
call loc_101AC38  +
lea eax [ebp+0Ch] +
push eax  +
push dword ptr [ebp+10h]  +
lea ecx [ebp+8] +
call sub_101FCE1  +
lea ecx [esi-10h] +
call sub_10147CD  +
lea ecx [ebp+8] +
mov byte ptr [ebp-4] 0 +
call sub_101AB14  +
mov ecx [ebp+0Ch] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
call sub_1021FA5  +
retn 0Ch  +
***
call sub_1021EB9  +
mov eax [ebp+0Ch] +
and dword ptr [ebp-4] 0 +
lea eax unk_106486C[eax*4] +
push eax  +
lea ecx [ebp+0Ch] +
call sub_10150A5  +
push dword ptr [ebp+10h]  +
lea eax [ebp+0Ch] +
push eax  +
lea ecx [ebp+8] +
mov byte ptr [ebp-4] 1 +
call sub_101FB3B  +
test eax eax +
jnz loc_101B351  +
push 1  +
lea eax [ebp-10h] +
push eax  +
lea ecx [ebp+0Ch] +
call sub_101ABF3  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 2 +
call sub_101575C  +
mov esi [ebp-10h] +
cmp dword ptr [esi-0Ch] 0 +
jge loc_101B30F  +
push 80070057h  +
call loc_1014415  +
movzx eax word ptr [esi] +
push eax  +
push 0  +
lea ecx [ebp+0Ch] +
call loc_101AC38  +
push dword ptr [ebp+10h]  +
lea eax [ebp+0Ch] +
push eax  +
lea ecx [ebp+8] +
call sub_101FB3B  +
lea ecx [esi-10h] +
mov edi eax +
call sub_10147CD  +
mov ecx [ebp+0Ch] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_101AB14  +
mov eax edi +
jmp loc_101B36B  +
mov ecx [ebp+0Ch] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_101AB14  +
xor eax eax +
inc eax  +
call sub_1021FA5  +
retn 0Ch  +
***
call sub_1021EB9  +
mov eax [ebp+0Ch] +
and dword ptr [ebp-4] 0 +
lea eax unk_1064878[eax*4] +
push eax  +
lea ecx [ebp+0Ch] +
call sub_10150A5  +
push 0Ah  +
lea ecx [ebp-28h] +
call sub_101C247  +
lea eax [ebp-28h] +
push eax  +
push ecx  +
lea eax [ebp+0Ch] +
mov [ebp-10h] esp +
mov ecx esp +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_10150A5  +
push ecx  +
lea eax [ebp+8] +
mov ecx esp +
mov [ebp-10h] esp +
push eax  +
call sub_101AB33  +
call sub_101B209  +
xor eax eax +
cmp [ebp-28h] eax +
lea ecx [ebp-28h] +
setnz al  +
mov esi eax +
call loc_101AA40  +
mov ecx [ebp+0Ch] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_101AB14  +
mov eax esi +
call sub_1021FA5  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_106484C 0 +
jnz loc_101B41A  +
xor eax eax +
jmp loc_101B432  +
push [ebp+arg_0]  +
push ecx  +
mov ecx esp +
mov [ebp+arg_0] esp +
push offset dword_106484C  +
call sub_101AB33  +
call sub_101B378  +
pop ebp  +
retn 4  +
***
call sub_1021EB9  +
xor esi esi +
mov [ebp-18h] esi +
push offset dword_1064BA8  +
lea ecx [ebp-10h] +
mov [ebp-4] esi +
call sub_1015076  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 1 +
call sub_1014FC6  +
cmp dword_1064850 esi +
jnz loc_101B480  +
lea eax [ebp-10h] +
push eax  +
mov ecx edi +
call sub_10150A5  +
jmp loc_101B55C  +
push 0Ah  +
lea ecx [ebp-30h] +
call sub_101C247  +
lea eax [ebp-30h] +
push eax  +
push ecx  +
lea eax [ebp+8] +
mov [ebp-18h] esp +
mov ecx esp +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_10150A5  +
push ecx  +
mov ecx esp +
mov [ebp-18h] esp +
push offset dword_1064850  +
call sub_101AB33  +
call sub_101B209  +
mov eax [ebp-30h] +
mov [ebp-18h] eax +
cmp eax esi +
jz loc_101B527  +
lea eax [ebp-18h] +
push eax  +
lea ecx [ebp-30h] +
call sub_105038C  +
push eax  +
lea ecx [ebp-14h] +
call sub_101AB33  +
lea eax [ebp-18h] +
push eax  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 3 +
call sub_101FC2A  +
push eax  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 4 +
call sub_1015959  +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 3 +
call sub_10147CD  +
mov eax [ebp-10h] +
cmp [eax-0Ch] esi +
jz loc_101B51B  +
push offset asc_10022F0  +
push offset dword_10045D0  +
lea ecx [ebp-10h] +
call sub_101AE36  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 2 +
call sub_101AB14  +
cmp [ebp+0Ch] esi +
jz loc_101B549  +
mov eax [ebp-10h] +
cmp [eax-0Ch] esi +
jz loc_101B549  +
lea eax [ebp-10h] +
push eax  +
call sub_1035549  +
test al al +
jnz loc_101B549  +
lea ecx [ebp-10h] +
call sub_1014FC6  +
lea eax [ebp-10h] +
push eax  +
mov ecx edi +
call sub_10150A5  +
lea ecx [ebp-30h] +
call loc_101AA40  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov eax edi +
call sub_1021FA5  +
retn 8  +
***
call sub_1021EB9  +
xor esi esi +
mov [ebp-18h] esi +
push offset dword_1064BA8  +
lea ecx [ebp-10h] +
mov [ebp-4] esi +
call sub_1015076  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 1 +
call sub_1014FC6  +
cmp dword_106484C esi +
jnz loc_101B5C6  +
lea eax [ebp-10h] +
push eax  +
mov ecx edi +
call sub_10150A5  +
jmp loc_101B6B4  +
push 0Ah  +
lea ecx [ebp-30h] +
call sub_101C247  +
lea eax [ebp-30h] +
push eax  +
push ecx  +
lea eax [ebp+8] +
mov [ebp-18h] esp +
mov ecx esp +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_10150A5  +
push ecx  +
mov ecx esp +
mov [ebp-18h] esp +
push offset dword_106484C  +
call sub_101AB33  +
call sub_101B209  +
mov eax [ebp-30h] +
mov [ebp-18h] eax +
cmp eax esi +
jz loc_101B66D  +
lea eax [ebp-18h] +
push eax  +
lea ecx [ebp-30h] +
call sub_105038C  +
push eax  +
lea ecx [ebp-14h] +
call sub_101AB33  +
lea eax [ebp-18h] +
push eax  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 3 +
call sub_101FC2A  +
push eax  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 4 +
call sub_1015959  +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 3 +
call sub_10147CD  +
mov eax [ebp-10h] +
cmp [eax-0Ch] esi +
jz loc_101B661  +
push offset asc_10022F0  +
push offset dword_10045D0  +
lea ecx [ebp-10h] +
call sub_101AE36  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 2 +
call sub_101AB14  +
cmp [ebp+0Ch] esi +
jz loc_101B6A1  +
mov eax [ebp-10h] +
cmp [eax-0Ch] esi +
jz loc_101B6A1  +
lea eax [ebp-10h] +
push eax  +
call sub_1035549  +
test al al +
jnz loc_101B6A1  +
push dword ptr [ebp-10h]  +
push offset aFileSDoesNotEx  +
push 2  +
call sub_10168F9  +
add esp 0Ch +
lea ecx [ebp-10h] +
call sub_1014FC6  +
lea eax [ebp-10h] +
push eax  +
mov ecx edi +
call sub_10150A5  +
lea ecx [ebp-30h] +
call loc_101AA40  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov eax edi +
call sub_1021FA5  +
retn 8  +
***
call sub_1021EB9  +
mov eax [ebp+0Ch] +
and dword ptr [ebp-4] 0 +
lea eax unk_1064854[eax*4] +
push eax  +
lea ecx [ebp+0Ch] +
call sub_10150A5  +
push dword ptr [ebp+10h]  +
lea eax [ebp+0Ch] +
push ecx  +
mov [ebp+10h] esp +
mov ecx esp +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_10150A5  +
push ecx  +
lea eax [ebp+8] +
mov ecx esp +
mov [ebp+10h] esp +
push eax  +
call sub_101AB33  +
call sub_101B209  +
mov ecx [ebp+0Ch] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_101AB14  +
call sub_1021FA5  +
retn 0Ch  +
***
call sub_1021EB9  +
xor edi edi +
cmp dword_106484C edi +
jnz loc_101B76A  +
xor eax eax +
call sub_1021FA5  +
retn 4  +
mov esi offset dword_1064BA8 +
push esi  +
lea ecx [ebp-1Ch] +
call sub_1015076  +
push 0Ah  +
lea ecx [ebp-38h] +
mov [ebp-4] edi +
call sub_101C247  +
lea eax [ebp-38h] +
push eax  +
push edi  +
push ecx  +
mov ecx esp +
mov [ebp-18h] esp +
push offset dword_106484C  +
mov byte ptr [ebp-4] 1 +
call sub_101AB33  +
call sub_101B6D9  +
cmp [ebp-30h] edi +
jnz loc_101B7C2  +
xor esi esi +
inc esi  +
lea ecx [ebp-38h] +
call loc_101AA40  +
mov ecx [ebp-1Ch] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov eax esi +
jmp loc_101B762  +
push esi  +
lea ecx [ebp-10h] +
call sub_1015076  +
mov eax [ebp-38h] +
xor esi esi +
mov byte ptr [ebp-4] 2 +
mov [ebp-18h] eax +
cmp eax edi +
jz loc_101B84F  +
lea eax [ebp-18h] +
push eax  +
lea ecx [ebp-38h] +
call sub_105038C  +
push eax  +
lea ecx [ebp-14h] +
call sub_101AB33  +
lea eax [ebp-10h] +
push eax  +
push edi  +
push ecx  +
lea eax [ebp-14h] +
mov ecx esp +
mov [ebp-20h] esp +
push eax  +
mov byte ptr [ebp-4] 3 +
call sub_101AB33  +
call sub_101B2A8  +
cmp eax edi +
jz loc_101B83E  +
mov eax [ebp-10h] +
cmp [eax-0Ch] edi +
jz loc_101B83E  +
push offset asc_10022F0  +
push offset dword_10045D0  +
lea ecx [ebp-10h] +
call sub_101AE36  +
push dword ptr [ebp-10h]  +
call sub_1035167  +
movzx ecx word ptr [ebp+8] +
cmp eax ecx +
jnz loc_101B83E  +
xor esi esi +
inc esi  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 2 +
call sub_101AB14  +
cmp [ebp-18h] edi +
jnz loc_101B7DB  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
jmp loc_101B7AB  +
***
call sub_1021EB9  +
xor edi edi +
cmp dword_106484C edi +
jnz loc_101B881  +
xor eax eax +
jmp loc_101B9A5  +
lea eax [ebp-14h] +
mov ebx offset dword_1064850 +
push eax  +
mov ecx ebx +
mov [ebp-14h] edi +
call sub_101AA95  +
mov ax [ebp+8] +
cmp ax di +
jnz loc_101B8A3  +
call ds:GetUserDefaultUILanguage  +
mov esi offset dword_1064BA8 +
push esi  +
lea ecx [ebp-18h] +
mov word_1064840 ax +
call sub_1015076  +
push 0Ah  +
lea ecx [ebp-34h] +
mov [ebp-4] edi +
call sub_101C247  +
lea eax [ebp-34h] +
push eax  +
push edi  +
push ecx  +
mov ecx esp +
mov [ebp+8] esp +
push offset dword_106484C  +
mov byte ptr [ebp-4] 1 +
call sub_101AB33  +
call sub_101B6D9  +
push esi  +
lea ecx [ebp-10h] +
call sub_1015076  +
mov eax [ebp-34h] +
xor esi esi +
mov byte ptr [ebp-4] 2 +
mov [ebp-14h] eax +
cmp eax edi +
jz loc_101B985  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-34h] +
call sub_105038C  +
push eax  +
lea ecx [ebp+8] +
call sub_101AB33  +
lea eax [ebp-10h] +
push eax  +
push edi  +
push ecx  +
lea eax [ebp+8] +
mov ecx esp +
mov [ebp-1Ch] esp +
push eax  +
mov byte ptr [ebp-4] 3 +
call sub_101AB33  +
call sub_101B2A8  +
cmp eax edi +
jz loc_101B970  +
mov eax [ebp-10h] +
cmp [eax-0Ch] edi +
jz loc_101B970  +
push offset asc_10022F0  +
push offset dword_10045D0  +
lea ecx [ebp-10h] +
call sub_101AE36  +
push dword ptr [ebp-10h]  +
call sub_1035167  +
movzx ecx word_1064840 +
cmp eax ecx +
jnz loc_101B970  +
lea eax [ebp+8] +
push eax  +
mov ecx ebx +
call sub_101AA95  +
xor esi esi +
inc esi  +
lea ecx [ebp+8] +
mov byte ptr [ebp-4] 2 +
call sub_101AB14  +
cmp [ebp-14h] edi +
jnz loc_101B8FF  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
lea ecx [ebp-34h] +
call loc_101AA40  +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov eax esi +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EB9  +
xor esi esi +
cmp dword_1064850 esi +
jnz loc_101B9CC  +
xor eax eax +
jmp loc_101BA06  +
push 0Ah  +
lea ecx [ebp-28h] +
call sub_101C247  +
lea eax [ebp-28h] +
push eax  +
push 1  +
push ecx  +
mov ecx esp +
mov [ebp-10h] esp +
push offset dword_1064850  +
mov [ebp-4] esi +
call sub_101AB33  +
call sub_101B6D9  +
cmp [ebp-28h] esi +
jz loc_101B9FC  +
xor esi esi +
inc esi  +
lea ecx [ebp-28h] +
call loc_101AA40  +
mov eax esi +
call sub_1021FA5  +
retn   +
***
call sub_1021EB9  +
cmp dword_10648D8 0 +
jz loc_101BA31  +
mov eax dword_10648D4 +
call sub_1021FA5  +
retn   +
mov esi offset dword_1064BA8 +
push esi  +
lea ecx [ebp-10h] +
call sub_1015076  +
and dword ptr [ebp-4] 0 +
cmp dword_1064850 0 +
jnz loc_101BA5D  +
xor esi esi +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov eax esi +
jmp loc_101BA2B  +
push 0Ah  +
lea ecx [ebp-34h] +
call sub_101C247  +
lea eax [ebp-34h] +
push eax  +
xor ebx ebx +
inc ebx  +
push ebx  +
push ecx  +
mov ecx esp +
mov [ebp-18h] esp +
push offset dword_1064850  +
mov [ebp-4] bl +
call sub_101AB33  +
call sub_101B6D9  +
mov eax [ebp-34h] +
mov [ebp-18h] eax +
test eax eax +
jz loc_101BB17  +
lea eax [ebp-18h] +
push eax  +
lea ecx [ebp-34h] +
call sub_105038C  +
push eax  +
lea ecx [ebp-18h] +
call sub_101AB33  +
push esi  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 2 +
call sub_1015076  +
lea eax [ebp-14h] +
push eax  +
push ebx  +
push ecx  +
lea eax [ebp-18h] +
mov ecx esp +
mov [ebp-1Ch] esp +
push eax  +
mov byte ptr [ebp-4] 3 +
call sub_101AB33  +
call sub_101B2A8  +
push offset aTxt  +
push dword ptr [ebp-14h]  +
call sub_10224ED  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_101BB01  +
lea eax [ebp-10h] +
push eax  +
push 2  +
push ecx  +
lea eax [ebp-18h] +
mov ecx esp +
mov [ebp-1Ch] esp +
push eax  +
call sub_101AB33  +
call sub_101B2A8  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
lea ecx [ebp-18h] +
mov [ebp-4] bl +
call sub_101AB14  +
mov eax [ebp-10h] +
cmp dword ptr [eax-0Ch] 0 +
jz loc_101BB33  +
lea eax [ebp-10h] +
push eax  +
call sub_1035549  +
test al al +
jnz loc_101BB33  +
mov dword_10648D4 ebx +
mov esi dword_10648D4 +
lea ecx [ebp-34h] +
mov dword_10648D8 ebx +
call loc_101AA40  +
jmp loc_101BA4E  +
***
call sub_1021EB9  +
and dword ptr [ebp-18h] 0 +
mov esi offset dword_1064BA8 +
push esi  +
lea ecx [ebp-10h] +
call sub_1015076  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-10h] +
call sub_1014FC6  +
cmp dword_1064850 0 +
jnz loc_101BB95  +
mov ecx [ebp+8] +
lea eax [ebp-10h] +
push eax  +
call sub_10150A5  +
jmp loc_101BC82  +
push 0Ah  +
lea ecx [ebp-34h] +
call sub_101C247  +
lea eax [ebp-34h] +
push eax  +
push 1  +
push ecx  +
mov ecx esp +
mov [ebp-18h] esp +
push offset dword_1064850  +
mov byte ptr [ebp-4] 1 +
call sub_101AB33  +
call sub_101B6D9  +
mov eax [ebp-34h] +
mov [ebp-18h] eax +
test eax eax +
jz loc_101BC50  +
lea eax [ebp-18h] +
push eax  +
lea ecx [ebp-34h] +
call sub_105038C  +
push eax  +
lea ecx [ebp-18h] +
call sub_101AB33  +
push esi  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 2 +
call sub_1015076  +
lea eax [ebp-14h] +
push eax  +
push 1  +
push ecx  +
lea eax [ebp-18h] +
mov ecx esp +
mov [ebp-1Ch] esp +
push eax  +
mov byte ptr [ebp-4] 3 +
call sub_101AB33  +
call sub_101B2A8  +
push offset aTxt  +
push dword ptr [ebp-14h]  +
call sub_10224ED  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_101BC39  +
lea eax [ebp-10h] +
push eax  +
push 2  +
push ecx  +
lea eax [ebp-18h] +
mov ecx esp +
mov [ebp-1Ch] esp +
push eax  +
call sub_101AB33  +
call sub_101B2A8  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
lea ecx [ebp-18h] +
mov byte ptr [ebp-4] 1 +
call sub_101AB14  +
mov eax [ebp-10h] +
cmp dword ptr [eax-0Ch] 0 +
jz loc_101BC6E  +
lea eax [ebp-10h] +
push eax  +
call sub_1035549  +
test al al +
jnz loc_101BC6E  +
lea ecx [ebp-10h] +
call sub_1014FC6  +
mov ecx [ebp+8] +
lea eax [ebp-10h] +
push eax  +
call sub_10150A5  +
lea ecx [ebp-34h] +
call loc_101AA40  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov eax [ebp+8] +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EB9  +
and dword ptr [ebp-10h] 0 +
lea eax [ebp-10h] +
push eax  +
call sub_101BB51  +
and dword ptr [ebp-4] 0 +
push eax  +
push dword ptr [ebp+8]  +
call sub_101AFC0  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov eax [ebp+8] +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EB9  +
mov eax [ebp+0Ch] +
and dword ptr [ebp-10h] 0 +
lea eax unk_10648A4[eax*4] +
push eax  +
lea ecx [ebp+0Ch] +
call sub_10150A5  +
and dword ptr [ebp-4] 0 +
push 0  +
push ecx  +
lea eax [ebp+0Ch] +
mov [ebp-10h] esp +
mov ecx esp +
push eax  +
call sub_10150A5  +
mov edi [ebp+8] +
call sub_101B43B  +
mov ecx [ebp+0Ch] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov eax edi +
call sub_1021FA5  +
retn 8  +
***
call sub_1021EB9  +
and dword ptr [ebp-10h] 0 +
mov eax [ebp+0Ch] +
lea eax unk_10648C8[eax*4] +
push eax  +
lea ecx [ebp-10h] +
call sub_10150A5  +
push dword ptr [ebp+10h]  +
and dword ptr [ebp-4] 0 +
push ecx  +
lea eax [ebp-10h] +
mov [ebp-14h] esp +
mov ecx esp +
push eax  +
call sub_10150A5  +
lea edi [ebp+0Ch] +
call sub_101B43B  +
mov eax [ebp+0Ch] +
cmp dword ptr [eax-0Ch] 0 +
mov byte ptr [ebp-4] 1 +
jz loc_101BDD8  +
cmp dword ptr [ebp+10h] 0 +
jz loc_101BDB1  +
mov eax edi +
push eax  +
call sub_1035549  +
test al al +
jnz loc_101BDB1  +
push dword ptr [ebp+0Ch]  +
push offset aFileSDoesNotEx  +
push 2  +
call sub_10168F9  +
add esp 0Ch +
mov ecx edi +
call sub_1014FC6  +
mov ecx [ebp+8] +
lea eax [ebp+0Ch] +
push eax  +
call sub_10150A5  +
mov ecx [ebp+0Ch] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov eax [ebp+8] +
jmp loc_101BE0A  +
push dword ptr [ebp+10h]  +
lea eax [ebp-10h] +
push ecx  +
mov [ebp+10h] esp +
mov ecx esp +
push eax  +
call sub_10150A5  +
mov edi [ebp+8] +
call sub_101B581  +
mov ecx [ebp+0Ch] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov eax edi +
call sub_1021FA5  +
retn 0Ch  +
***
call sub_1021EB9  +
xor ebx ebx +
cmp dword_106484C ebx +
jnz loc_101BE34  +
xor eax eax +
jmp loc_101C016  +
push offset dword_1064BA8  +
lea ecx [ebp-28h] +
call sub_1015076  +
push 0Ah  +
lea ecx [ebp-44h] +
mov [ebp-4] ebx +
call sub_101C247  +
lea eax [ebp-44h] +
push eax  +
push 4  +
push ecx  +
mov ecx esp +
mov [ebp-24h] esp +
push offset dword_106484C  +
mov byte ptr [ebp-4] 1 +
call sub_101AB33  +
call sub_101B6D9  +
cmp [ebp-3Ch] ebx +
jz loc_101C000  +
mov eax [ebp-44h] +
mov [ebp-24h] eax +
cmp eax ebx +
jz loc_101C000  +
lea eax [ebp-24h] +
push eax  +
lea ecx [ebp-44h] +
call sub_105038C  +
push eax  +
lea ecx [ebp-14h] +
call sub_101AB33  +
mov [ebp-1Ch] ebx +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 3 +
call sub_101AD38  +
push 0Ah  +
lea ecx [ebp-5Ch] +
call sub_101C247  +
lea eax [ebp-5Ch] +
push eax  +
push 5  +
push ecx  +
lea eax [ebp-14h] +
mov ecx esp +
mov [ebp-20h] esp +
push eax  +
mov byte ptr [ebp-4] 4 +
call sub_101AB33  +
call sub_101B6D9  +
mov esi [ebp-1Ch] +
cmp [ebp-54h] ebx +
jz loc_101BFD4  +
mov eax [ebp-5Ch] +
mov [ebp-20h] eax +
cmp eax ebx +
jz loc_101BF91  +
mov [ebp-10h] ebx +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 5 +
call sub_101AD65  +
lea eax [ebp-20h] +
push eax  +
lea ecx [ebp-5Ch] +
call sub_105038C  +
push eax  +
lea ecx [ebp-18h] +
call sub_101AB33  +
mov edi [ebp-10h] +
add edi 8 +
push edi  +
push 2  +
push ecx  +
lea eax [ebp-18h] +
mov ecx esp +
mov [ebp-2Ch] esp +
push eax  +
mov byte ptr [ebp-4] 6 +
call sub_101AB33  +
call sub_101B2A8  +
cmp eax ebx +
jnz loc_101BF4C  +
lea ecx [ebp-18h] +
mov byte ptr [ebp-4] 5 +
call sub_101AB14  +
mov ecx [ebp-10h] +
mov byte ptr [ebp-4] 4 +
cmp ecx ebx +
jz loc_101BF88  +
jmp loc_101BF83  +
mov eax [edi] +
cmp [eax-0Ch] ebx +
jz loc_101BF70  +
push offset asc_10022F0  +
push offset dword_10045D0  +
mov ecx edi +
call sub_101AE36  +
lea eax [ebp-10h] +
push eax  +
lea ecx [esi+8] +
call sub_101ADDE  +
lea ecx [ebp-18h] +
mov byte ptr [ebp-4] 5 +
call sub_101AB14  +
mov ecx [ebp-10h] +
mov byte ptr [ebp-4] 4 +
call sub_101A986  +
cmp [ebp-20h] ebx +
jnz loc_101BEEA  +
push 3  +
push ecx  +
lea eax [ebp-14h] +
mov ecx esp +
mov [ebp-2Ch] esp +
push eax  +
call sub_101AB33  +
call sub_101B378  +
push 4  +
push ecx  +
mov [esi+20h] eax +
lea eax [ebp-14h] +
mov ecx esp +
mov [ebp-2Ch] esp +
push eax  +
call sub_101AB33  +
call sub_101B378  +
mov [esi+24h] eax +
cmp [esi+10h] ebx +
jz loc_101BFD4  +
mov ecx [ebp+8] +
lea eax [ebp-1Ch] +
push eax  +
call sub_101ADDE  +
lea ecx [ebp-5Ch] +
call loc_101AA40  +
mov byte ptr [ebp-4] 2 +
cmp esi ebx +
jz loc_101BFEB  +
mov ecx esi +
call sub_101A986  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 1 +
call sub_101AB14  +
cmp [ebp-24h] ebx +
jnz loc_101BE84  +
lea ecx [ebp-44h] +
call loc_101AA40  +
mov ecx [ebp-28h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
xor eax eax +
inc eax  +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EF1  +
retn   +
***
call sub_1021EB9  +
xor esi esi +
cmp [ebp+8] esi +
jnz loc_101C0E9  +
xor eax eax +
jmp loc_101C1F8  +
push 0Ah  +
lea ecx [ebp-4Ch] +
call sub_101C247  +
push 0Ah  +
lea ecx [ebp-34h] +
mov [ebp-4] esi +
call sub_101C247  +
mov byte ptr [ebp-4] 1 +
cmp dword_106484C esi +
jnz loc_101C11E  +
lea ecx [ebp-34h] +
call loc_101AA40  +
lea ecx [ebp-4Ch] +
call loc_101AA40  +
jmp loc_101C0E2  +
lea eax [ebp-4Ch] +
push eax  +
push 2  +
push ecx  +
mov ecx esp +
mov [ebp-1Ch] esp +
push offset dword_106484C  +
call sub_101AB33  +
call sub_101B6D9  +
cmp [ebp-44h] esi +
jz loc_101C10C  +
lea eax [ebp-34h] +
push eax  +
mov eax [ebp-4Ch] +
xor ecx ecx +
cmp eax esi +
setnz cl  +
push 3  +
cmp ecx esi +
jnz loc_101C15C  +
push 80004005h  +
call loc_1014415  +
push ecx  +
add eax 8 +
mov ecx esp +
mov [ebp-1Ch] esp +
push eax  +
call sub_101AB33  +
call sub_101B6D9  +
push offset dword_1064BA8  +
lea ecx [ebp-1Ch] +
call sub_1015076  +
mov eax [ebp-34h] +
mov byte ptr [ebp-4] 2 +
mov [ebp-14h] eax +
cmp eax esi +
jz loc_101C1DA  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-34h] +
call sub_105038C  +
push eax  +
lea ecx [ebp-10h] +
call sub_101AB33  +
lea eax [ebp-18h] +
push eax  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 3 +
call sub_101FC2A  +
push dword ptr [eax]  +
mov ecx [ebp+8] +
mov byte ptr [ebp-4] 4 +
call sub_10172FC  +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 2 +
call sub_101AB14  +
cmp [ebp-14h] esi +
jnz loc_101C18B  +
mov ecx [ebp-1Ch] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
lea ecx [ebp-34h] +
call loc_101AA40  +
lea ecx [ebp-4Ch] +
call loc_101AA40  +
xor eax eax +
inc eax  +
call sub_1021FA5  +
retn 4  +
***
mov dword_10648FC 1 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jl loc_101C230  +
cmp eax [ecx+8] +
jge loc_101C230  +
mov ecx [ecx+4] +
lea eax [ecx+eax*4] +
pop ebp  +
retn 4  +
***
push 0  +
push 0  +
push 1  +
push 0C000008Ch  +
call ds:RaiseException  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
xor ecx ecx +
mov [eax] ecx +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov ecx [ebp+arg_0] +
mov [eax+14h] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ecx] +
test eax eax +
jnz loc_101C285  +
push 80004005h  +
call loc_1014415  +
mov edx [eax+4] +
mov [ecx] edx +
add eax 8 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_101C2AC  +
push 80004005h  +
call loc_1014415  +
add eax 8 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1022B59  +
neg eax  +
sbb eax eax +
pop ecx  +
not eax  +
and eax [ebp+arg_0] +
pop ecx  +
pop ebp  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
jmp loc_101C2F6  +
mov eax [esi] +
cmp eax edi +
jz loc_101C315  +
mov ecx [eax] +
mov [esi] ecx +
push eax  +
mov ecx esi +
call sub_101CC65  +
cmp [esi+8] edi +
ja loc_101C2E4  +
mov ecx [esi+0Ch] +
mov [esi] edi +
mov [esi+4] edi +
mov [esi+10h] edi +
cmp ecx edi +
jz loc_101C312  +
call sub_10147B2  +
mov [esi+0Ch] edi +
pop edi  +
pop esi  +
retn   +
***
push 80004005h  +
call loc_1014415  +
mov ecx offset dword_1063178 +
jmp loc_1014B04  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push dword ptr [eax]  +
mov esi ecx +
call sub_104B64A  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_103EAEC  +
test [ebp+arg_0] 1 +
jz loc_101C36C  +
push esi  +
call sub_1021179  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_101C334  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call ss:LocalFree  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
call sub_1021EB9  +
xor edi edi +
mov [ebp-4] edi +
mov [ebp-14h] edi +
mov [ebp-18h] edi +
mov [ebp-10h] edi +
cmp dword_10648DC edi +
jz loc_101C3DE  +
mov dword ptr [ebp-10h] 2 +
cmp dword_1064900 edi +
jz loc_101C3EA  +
or dword ptr [ebp-10h] 20h +
mov eax [ebp+8] +
mov eax [eax+8] +
mov [ebp-20h] eax +
cmp eax edi +
jz loc_101C46E  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
add ecx 8 +
call sub_105038C  +
push eax  +
lea ecx [ebp-1Ch] +
call sub_101C334  +
mov esi [ebp-1Ch] +
mov eax [esi+14h] +
dec eax  +
cmp eax 3 +
ja loc_101C422  +
mov dword ptr [esi+14h] 5 +
mov eax [esi+18h] +
cmp eax 2 +
jz loc_101C435  +
cmp dword ptr [esi+1Ch] 1 +
jnz loc_101C459  +
cmp eax 4 +
jnz loc_101C459  +
mov eax [esi+8] +
lea ecx [ebp-18h] +
push ecx  +
push edi  +
push dword ptr [ebp-10h]  +
push eax  +
call ds:off_1013E38  +
cmp eax edi +
jnz loc_101C459  +
mov dword ptr [esi+18h] 3 +
mov dword ptr [esi+1Ch] 2 +
mov eax [ebp-18h] +
or [ebp-14h] eax +
mov ecx esi +
call sub_101A986  +
mov [ebp-1Ch] edi +
cmp [ebp-20h] edi +
jnz loc_101C3F7  +
mov ecx [ebp+8] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp ecx edi +
jz loc_101C47E  +
call sub_101A986  +
mov eax [ebp-14h] +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EB9  +
mov edi [ebp+0Ch] +
or dword ptr [ebp-10h] 0FFFFFFFFh +
xor eax eax +
stos   +
stos   +
stos   +
push 14h  +
pop ecx  +
stos   +
xor ebx ebx +
push ecx  +
mov [ebp-4] ebx +
mov [ebp-18h] ecx +
stos   +
call sub_1021488  +
pop ecx  +
mov [ebp-1Ch] eax +
cmp eax ebx +
jnz loc_101C4D8  +
mov ecx [ebp+8] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp ecx ebx +
jz loc_101C4D1  +
call sub_101A986  +
xor eax eax +
jmp loc_101C60A  +
mov eax [ebp+8] +
mov eax [eax+8] +
mov [ebp-24h] eax +
cmp eax ebx +
jz loc_101C5D8  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
add ecx 8 +
call sub_105038C  +
push eax  +
lea ecx [ebp-20h] +
call sub_101C334  +
mov edi [ebp-20h] +
mov eax [edi+0Ch] +
push ebx  +
push ebx  +
push 3  +
push ebx  +
push 1  +
mov byte ptr [ebp-4] 1 +
push 80000000h  +
cmp [eax-0Ch] ebx +
jnz loc_101C51F  +
mov eax [edi+8] +
push eax  +
call ds:CreateFileW  +
mov [ebp-10h] eax +
cmp eax 0FFFFFFFFh +
jnz loc_101C568  +
mov ecx edi +
xor esi esi +
mov [ebp-4] bl +
call sub_101A986  +
jmp loc_101C5DB  +
cmp eax 7Ah +
jnz loc_101C52E  +
push ebx  +
push ebx  +
lea eax [ebp-18h] +
push eax  +
push dword ptr [ebp-10h]  +
call CryptCATAdminCalcHashFromFileHandle  +
cmp eax ebx +
jz loc_101C568  +
push dword ptr [ebp-18h]  +
push esi  +
call sub_1021FE6  +
pop ecx  +
pop ecx  +
cmp eax ebx +
jz loc_101C52E  +
mov [ebp-1Ch] eax +
mov eax [ebp-18h] +
mov esi [ebp-1Ch] +
push ebx  +
mov [ebp-14h] eax +
push esi  +
lea eax [ebp-14h] +
push eax  +
push dword ptr [ebp-10h]  +
call CryptCATAdminCalcHashFromFileHandle  +
cmp eax ebx +
jz loc_101C53F  +
lea eax [edi+10h] +
push eax  +
push dword ptr [ebp-18h]  +
push esi  +
call sub_103626E  +
test eax eax +
jz loc_101C52E  +
push 14h  +
pop eax  +
cmp [ebp-14h] eax +
jbe loc_101C59F  +
mov [ebp-14h] eax +
cmp [ebp-14h] ebx +
jbe loc_101C5B5  +
mov eax [ebp+0Ch] +
mov ecx [ebp-14h] +
sub esi eax +
mov dl [esi+eax] +
xor [eax] dl +
inc eax  +
dec ecx  +
jnz loc_101C5AC  +
push dword ptr [ebp-10h]  +
call ds:CloseHandle  +
or dword ptr [ebp-10h] 0FFFFFFFFh +
mov ecx edi +
mov [ebp-4] bl +
call sub_101A986  +
mov [ebp-20h] ebx +
cmp [ebp-24h] ebx +
jnz loc_101C4E9  +
xor esi esi +
inc esi  +
cmp [ebp-1Ch] ebx +
jz loc_101C5E9  +
push dword ptr [ebp-1Ch]  +
call sub_10213A1  +
pop ecx  +
cmp dword ptr [ebp-10h] 0FFFFFFFFh +
jz loc_101C5F8  +
push dword ptr [ebp-10h]  +
call ds:CloseHandle  +
mov ecx [ebp+8] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp ecx ebx +
jz loc_101C608  +
call sub_101A986  +
mov eax esi +
call sub_1021FA5  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
and dword ptr [esi+4] 0 +
push 0Ah  +
lea ecx [esi+8] +
mov dword ptr [esi] offset off_1004A6C +
call sub_101C247  +
lea ecx [esi+28h] +
call sub_10151DA  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
and dword ptr [esi+4] 0 +
lea ecx [esi+8] +
mov dword ptr [esi] offset off_1004A70 +
call sub_10151DA  +
lea ecx [esi+0Ch] +
call sub_10151DA  +
lea ecx [esi+10h] +
call sub_10151DA  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+28h] +
sub ecx 10h +
call sub_10147CD  +
lea ecx [esi+8] +
call loc_101C2DA  +
mov dword ptr [esi] offset off_10058A4 +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+10h] +
sub ecx 10h +
call sub_10147CD  +
mov ecx [esi+0Ch] +
sub ecx 10h +
call sub_10147CD  +
mov ecx [esi+8] +
sub ecx 10h +
call sub_10147CD  +
mov dword ptr [esi] offset off_10058A4 +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi] edi +
jz loc_101C70A  +
cmp [esi+8] edi +
jle loc_101C700  +
push ebx  +
mov ecx [esi] +
mov ebx edi +
shl ebx 2 +
push 0  +
add ecx ebx +
call sub_101522A  +
mov ecx [esi+4] +
push 0  +
add ecx ebx +
call sub_101C352  +
inc edi  +
cmp edi [esi+8] +
jl loc_101C6DB  +
xor edi edi +
pop ebx  +
push dword ptr [esi]  +
call sub_10213A1  +
pop ecx  +
mov [esi] edi +
mov eax [esi+4] +
cmp eax edi +
jz loc_101C71B  +
push eax  +
call sub_10213A1  +
pop ecx  +
mov [esi+4] edi +
mov [esi+8] edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10151F2  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
lea ecx [esi+8] +
call sub_103EAEC  +
test [ebp+arg_0] 1 +
jz loc_101C75F  +
push esi  +
call sub_1021179  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1021EB9  +
xor ebx ebx +
xor edi edi +
mov [ebp-4] ebx +
cmp [ebp+0Ch] ebx +
jz loc_101C78D  +
push dword ptr [ebp+10h]  +
push 2  +
call dword ptr [ebp+0Ch]  +
pop ecx  +
pop ecx  +
mov eax [ebp+8] +
lea ecx [ebp+0Ch] +
cmp [eax+24h] ebx +
jz loc_101C835  +
mov esi offset dword_1064BA8 +
push esi  +
call sub_1015076  +
push esi  +
lea ecx [ebp+10h] +
mov byte ptr [ebp-4] 1 +
call sub_1015076  +
lea eax [ebp+0Ch] +
push eax  +
lea eax [ebp+10h] +
push eax  +
mov eax [ebp+8] +
add eax 28h +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_1036032  +
lea eax [ebp+0Ch] +
push eax  +
call sub_1037003  +
mov eax [ebp+8] +
add eax 28h +
push eax  +
call sub_103559E  +
mov ecx [ebp+8] +
add ecx 28h +
call sub_1014FC6  +
mov ecx [ebp+10h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp+0Ch] +
add ecx 0FFFFFFF0h +
mov [ebp-4] bl +
call sub_10147CD  +
push ecx  +
lea eax [ebp+8] +
mov ecx esp +
mov [ebp+10h] esp +
push eax  +
call sub_101C334  +
call sub_101C3B5  +
mov edi eax +
mov ecx [ebp+8] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp ecx ebx +
jz loc_101C82B  +
call sub_101A986  +
mov eax edi +
call sub_1021FA5  +
retn 0Ch  +
push offset dword_1064BA8  +
call sub_1015076  +
mov eax [ebp+8] +
mov eax [eax+8] +
mov [ebp-10h] eax +
cmp eax ebx +
jz loc_101C7F7  +
mov ecx [ebp+8] +
lea eax [ebp-10h] +
push eax  +
add ecx 8 +
call sub_105038C  +
push eax  +
lea ecx [ebp+10h] +
call sub_101C334  +
mov esi [ebp+10h] +
cmp dword ptr [esi+1Ch] 1 +
mov byte ptr [ebp-4] 4 +
jnz loc_101C877  +
cmp dword ptr [esi+18h] 4 +
jz loc_101C87D  +
cmp dword ptr [esi+18h] 2 +
jnz loc_101C8A7  +
cmp [esi+20h] ebx +
jz loc_101C8A7  +
lea eax [ebp+0Ch] +
push eax  +
push ecx  +
lea eax [esi+0Ch] +
mov ecx esp +
mov [ebp-14h] esp +
push eax  +
call sub_10151F2  +
call sub_103633A  +
cmp eax ebx +
jz loc_101C8BF  +
lea eax [ebp+0Ch] +
push eax  +
call sub_1037003  +
mov ecx esi +
mov byte ptr [ebp-4] 3 +
call sub_101A986  +
mov [ebp+10h] ebx +
cmp [ebp-10h] ebx +
jnz loc_101C84C  +
jmp loc_101C7F7  +
mov ecx esi +
mov byte ptr [ebp-4] 3 +
call sub_101A986  +
mov ecx [ebp+0Ch] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
jmp loc_101C81B  +
***
call sub_1021EB9  +
mov esi ecx +
mov edi offset dword_1064BA8 +
push edi  +
lea ecx [ebp-10h] +
call sub_1015076  +
and dword ptr [ebp-4] 0 +
push edi  +
lea ecx [ebp-14h] +
call sub_1015076  +
xor edi edi +
mov [ebp-1Ch] edi +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-10h] +
push eax  +
push esi  +
mov byte ptr [ebp-4] 2 +
call sub_1036032  +
push esi  +
call sub_1035549  +
test al al +
jz loc_101C95A  +
push dword ptr [esi]  +
push offset aUninstallScr_1  +
push 3  +
call sub_10168F9  +
mov ecx [ebp-14h] +
add esp 0Ch +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
xor eax eax +
call sub_1021FA5  +
retn 4  +
lea eax [ebp-10h] +
push eax  +
call sub_1035522  +
test al al +
jnz loc_101C970  +
push dword ptr [esi]  +
push offset aDirectoryInSNo  +
jmp loc_101C930  +
mov esi [esi] +
push offset aWt  +
push esi  +
call sub_1022DE6  +
pop ecx  +
pop ecx  +
mov [ebp-18h] eax +
test eax eax +
jnz loc_101C9A2  +
xor esi esi +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov eax esi +
jmp loc_101C952  +
mov eax [ebp+8] +
mov eax [eax] +
mov [ebp-28h] eax +
test eax eax +
jz loc_101CA3E  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call sub_105038C  +
push eax  +
lea ecx [ebp-1Ch] +
call sub_103ECA6  +
mov edi [ebp-1Ch] +
mov eax [edi+28h] +
cmp dword ptr [eax-0Ch] 0 +
jnz loc_101CA23  +
lea esi [edi+8] +
mov eax [esi] +
mov [ebp-24h] eax +
test eax eax +
jz loc_101CA34  +
lea eax [ebp-24h] +
push eax  +
mov ecx esi +
call sub_105038C  +
push eax  +
lea ecx [ebp-20h] +
call sub_101C334  +
mov ebx [ebp-20h] +
mov eax [ebx+0Ch] +
cmp dword ptr [eax-0Ch] 0 +
jz loc_101CA10  +
push eax  +
push offset aInfS  +
push dword ptr [ebp-18h]  +
call sub_1022C72  +
add esp 0Ch +
mov ecx ebx +
call sub_101A986  +
and dword ptr [ebp-20h] 0 +
cmp dword ptr [ebp-24h] 0 +
jnz loc_101C9DF  +
jmp loc_101CA34  +
push eax  +
push offset aUscriptS  +
push dword ptr [ebp-18h]  +
call sub_1022C72  +
add esp 0Ch +
cmp dword ptr [ebp-28h] 0 +
jnz loc_101C9B2  +
push dword ptr [ebp-18h]  +
call sub_1022BF1  +
pop ecx  +
mov byte ptr [ebp-4] 1 +
test edi edi +
jz loc_101CA56  +
mov ecx edi +
call sub_101A986  +
xor esi esi +
inc esi  +
jmp loc_101C988  +
***
mov edi edi +
push esi  +
push 2Ch  +
mov esi ecx +
call sub_10225EB  +
pop ecx  +
test eax eax +
jz loc_101CA7D  +
mov ecx eax +
call sub_101C617  +
jmp loc_101CA7F  +
xor eax eax +
push eax  +
mov ecx esi +
call sub_104B66E  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push 24h  +
mov esi ecx +
call sub_10225EB  +
pop ecx  +
test eax eax +
jz loc_101CAAA  +
mov ecx eax +
call sub_101C641  +
jmp loc_101CAAC  +
xor eax eax +
push eax  +
mov ecx esi +
call sub_104B66E  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi ecx +
test ebx ebx +
jl loc_101CB87  +
cmp ebx [esi+8] +
jge loc_101CB87  +
mov ecx [esi] +
push edi  +
mov edi ebx +
shl edi 2 +
push 0  +
add ecx edi +
call sub_101522A  +
mov ecx [esi+4] +
push 0  +
add ecx edi +
call sub_101C352  +
mov eax [esi+8] +
lea ecx [eax-1] +
cmp ebx ecx +
jz loc_101CB42  +
mov ecx [esi] +
sub eax ebx +
shl eax 2 +
lea edx [eax-4] +
push edx  +
add ecx edi +
lea edx [ecx+4] +
push edx  +
push eax  +
push ecx  +
call sub_101A8DA  +
mov eax [esi+8] +
mov ecx [esi+4] +
sub eax ebx +
shl eax 2 +
lea edx [eax-4] +
push edx  +
add ecx edi +
lea edx [ecx+4] +
push edx  +
push eax  +
push ecx  +
call sub_101A8DA  +
add esp 20h +
mov eax [esi+8] +
push 4  +
dec eax  +
push eax  +
push dword ptr [esi]  +
call sub_1022206  +
add esp 0Ch +
pop edi  +
test eax eax +
jnz loc_101CB5E  +
cmp dword ptr [esi+8] 1 +
jnz loc_101CB60  +
mov [esi] eax +
mov eax [esi+8] +
push 4  +
dec eax  +
push eax  +
push dword ptr [esi+4]  +
call sub_1022206  +
add esp 0Ch +
test eax eax +
jnz loc_101CB7C  +
cmp dword ptr [esi+8] 1 +
jnz loc_101CB7F  +
mov [esi+4] eax +
dec dword ptr [esi+8]  +
xor eax eax +
inc eax  +
jmp loc_101CB89  +
xor eax eax +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+8] edi +
jle loc_101CBBC  +
mov eax [esi] +
push [ebp+arg_0]  +
lea eax [eax+edi*4] +
push eax  +
call sub_1014A5B  +
test al al +
jnz loc_101CBC5  +
inc edi  +
cmp edi [esi+8] +
jl loc_101CBA4  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
mov eax edi +
jmp loc_101CBBF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101C671  +
test byte ptr [ebp+8] 1 +
jz loc_101CBE8  +
push esi  +
call sub_1021179  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101C696  +
test byte ptr [ebp+8] 1 +
jz loc_101CC0E  +
push esi  +
call sub_1021179  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1021EB9  +
mov esi ecx +
mov [ebp-10h] esi +
mov edi [ebp+8] +
mov ecx [esi] +
shl edi 2 +
add ecx edi +
mov [ebp-14h] ecx +
mov dword ptr [ebp-4] 0 +
jz loc_101CC49  +
push dword ptr [ebp+0Ch]  +
call sub_101C726  +
mov ecx [esi+4] +
add ecx edi +
jz loc_101CC58  +
push dword ptr [ebp+10h]  +
call sub_101C378  +
call sub_1021FA5  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
push 0  +
mov ecx edi +
call sub_101C742  +
mov eax [esi+10h] +
mov [edi] eax +
dec dword ptr [esi+8]  +
mov [esi+10h] edi +
jnz loc_101CC8E  +
mov ecx esi +
call loc_101C2DA  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi] +
mov esi [eax-0Ch] +
push esi  +
call sub_1015255  +
lea ecx [esi+1] +
push ecx  +
push eax  +
call sub_101C2B8  +
pop ecx  +
pop ecx  +
push esi  +
mov ecx edi +
call loc_10149C4  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+8] +
push 4  +
inc eax  +
push eax  +
push dword ptr [esi]  +
call sub_1022206  +
add esp 0Ch +
test eax eax +
jnz loc_101CCE9  +
xor eax eax +
jmp loc_101CD1A  +
mov [esi] eax +
mov eax [esi+8] +
push 4  +
inc eax  +
push eax  +
push dword ptr [esi+4]  +
call sub_1022206  +
add esp 0Ch +
test eax eax +
jz loc_101CCE5  +
push [ebp+arg_4]  +
mov ecx esi +
push [ebp+arg_0]  +
mov [esi+4] eax +
push dword ptr [esi+8]  +
call sub_101CC1A  +
inc dword ptr [esi+8]  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 8  +
***
call sub_1021EB9  +
xor ebx ebx +
mov [ebp-4] ebx +
mov dword ptr [ebp-10h] 1 +
mov [ebp-38h] ebx +
mov [ebp-34h] ebx +
mov [ebp-30h] ebx +
mov [ebp-44h] ebx +
mov [ebp-40h] ebx +
mov [ebp-3Ch] ebx +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 2 +
call sub_10202A1  +
mov esi offset dword_1064BA8 +
push esi  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 3 +
call sub_1015076  +
push esi  +
lea ecx [ebp-18h] +
mov byte ptr [ebp-4] 4 +
call sub_1015076  +
mov eax [ebp+8] +
mov eax [eax+8] +
mov byte ptr [ebp-4] 5 +
mov [ebp-20h] eax +
cmp eax ebx +
jz loc_101CDD0  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
add ecx 8 +
call sub_105038C  +
push eax  +
lea ecx [ebp-1Ch] +
call sub_101C334  +
mov esi [ebp-1Ch] +
lea eax [ebp-1Ch] +
push eax  +
lea eax [esi+10h] +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 6 +
call sub_101CCC8  +
mov byte ptr [ebp-4] 5 +
cmp esi ebx +
jz loc_101CDCB  +
mov ecx esi +
call sub_101A986  +
mov [ebp-1Ch] ebx +
cmp [ebp-20h] ebx +
jnz loc_101CD8A  +
mov esi [ebp+0Ch] +
push dword ptr [esi]  +
lea ecx [ebp-2Ch] +
call sub_10202B3  +
test eax eax +
jnz loc_101CF0A  +
mov [ebp-10h] ebx +
cmp [ebp-10h] ebx +
jz loc_101CDF8  +
xor eax eax +
cmp [ebp-30h] ebx +
setz al  +
mov [ebp-10h] eax +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 2 +
call sub_1020416  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 1 +
call sub_101C6C9  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call sub_101C6C9  +
mov ecx [ebp+8] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp ecx ebx +
jz loc_101CE41  +
call sub_101A986  +
mov eax [ebp-10h] +
call sub_1021FA5  +
retn 8  +
push eax  +
lea ecx [ebp-14h] +
call sub_1015707  +
lea ecx [ebp-14h] +
call sub_101575C  +
push offset aId  +
lea ecx [ebp-14h] +
call sub_101492B  +
test eax eax +
jnz loc_101CEC7  +
lea ecx [ebp-2Ch] +
call sub_10202E5  +
cmp eax ebx +
jz loc_101CF1C  +
push eax  +
lea ecx [ebp-18h] +
call sub_1015707  +
lea ecx [ebp-18h] +
call sub_101575C  +
lea eax [ebp-18h] +
push eax  +
lea ecx [ebp-38h] +
call sub_101CB94  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jz loc_101CF32  +
push edi  +
lea ecx [ebp-38h] +
call loc_101C215  +
push eax  +
lea eax [ebp-18h] +
push eax  +
lea ecx [ebp-44h] +
call sub_101CCC8  +
push edi  +
lea ecx [ebp-38h] +
call sub_101CAC7  +
jmp loc_101CF0A  +
push offset aInf  +
lea ecx [ebp-14h] +
call sub_101492B  +
test eax eax +
jnz loc_101CEED  +
lea ecx [ebp-2Ch] +
call sub_10202E5  +
cmp eax ebx +
jnz loc_101CF0A  +
push dword ptr [esi]  +
push offset aInvalidUninsta  +
jmp loc_101CF23  +
push offset aUscript  +
lea ecx [ebp-14h] +
call sub_101492B  +
test eax eax +
jnz loc_101CF40  +
lea ecx [ebp-2Ch] +
call sub_10202E5  +
cmp eax ebx +
jz loc_101CF37  +
lea ecx [ebp-2Ch] +
call sub_10202E5  +
cmp eax ebx +
jnz loc_101CE4C  +
jmp loc_101CF57  +
push dword ptr [esi]  +
push offset aInvalidUnins_1  +
push 3  +
mov [ebp-10h] ebx +
call sub_10168F9  +
add esp 0Ch +
jmp loc_101CF57  +
mov [ebp-10h] ebx +
jmp loc_101CF57  +
push dword ptr [esi]  +
push offset aInvalidUnins_0  +
jmp loc_101CF23  +
push dword ptr [ebp-14h]  +
mov [ebp-10h] ebx +
push dword ptr [esi]  +
push offset aInvalidUnins_2  +
push 3  +
call sub_10168F9  +
add esp 10h +
lea ecx [ebp-2Ch] +
call sub_10203E4  +
jmp loc_101CDE8  +
***
call sub_1021EB9  +
mov edi ecx +
push offset dword_1064BA8  +
lea ecx [ebp-14h] +
mov dword ptr [ebp-10h] 104h +
call sub_1015076  +
push dword ptr [ebp-10h]  +
mov ecx [ebp+8] +
and dword ptr [ebp-4] 0 +
call sub_10158A3  +
mov ecx [edi] +
mov esi ds:off_1013E40 +
lea edx [ebp-10h] +
push edx  +
push eax  +
push ecx  +
call esi  +
mov ebx eax +
cmp ebx 7Ah +
jnz loc_101CFD2  +
mov ecx [ebp+8] +
push 0FFFFFFFFh  +
call sub_1015023  +
push dword ptr [ebp-10h]  +
mov ecx [ebp+8] +
call sub_10158A3  +
mov edi [edi] +
lea ecx [ebp-10h] +
push ecx  +
push eax  +
push edi  +
call esi  +
mov ebx eax +
mov ecx [ebp+8] +
push 0FFFFFFFFh  +
call sub_1015023  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov eax ebx +
call sub_1021FA5  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
push edi  +
mov edi ecx +
mov esi [edi] +
xor eax eax +
test esi esi +
setnz al  +
test eax eax +
jnz loc_101D01B  +
push 80004005h  +
call loc_1014415  +
mov ecx [ebp+arg_0] +
lea eax [esi+8] +
push eax  +
call sub_10151F2  +
mov eax [esi] +
mov [edi] eax +
test eax eax +
jz loc_101D035  +
and dword ptr [eax+4] 0 +
jmp loc_101D039  +
and dword ptr [edi+4] 0 +
push esi  +
mov ecx edi +
call sub_1015A47  +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
call sub_1021EB9  +
push dword ptr [ebp+8]  +
xor esi esi +
mov ecx offset dword_1064904 +
mov [ebp-4] esi +
call sub_1015959  +
mov eax [ebp+10h] +
cmp [ebp+0Ch] esi +
jnz loc_101D083  +
mov dword_1063174 1 +
cmp eax esi +
jz loc_101D089  +
mov dword_1063174 esi +
mov dword_10648DC eax +
mov eax [ebp+14h] +
mov dword_10648E0 eax +
mov eax [ebp+28h] +
mov dword_10648E4 eax +
lea eax [ebp+18h] +
push eax  +
mov ecx offset dword_1064908 +
call sub_1015959  +
mov edx [ebp+24h] +
mov eax [ebp+1Ch] +
mov ecx [ebp+20h] +
mov dword_10648F0 edx +
mov edx [ebp+2Ch] +
mov dword_10648F4 edx +
mov edx [ebp+30h] +
mov dword_10648E8 eax +
mov dword_10648EC ecx +
mov dword_10648F8 esi +
mov dword_10648FC esi +
mov dword_1064900 edx +
cmp dword_1063174 esi +
jnz loc_101D0F7  +
cmp eax esi +
jz loc_101D105  +
xor eax eax +
mov dword_10648E8 eax +
cmp eax esi +
jz loc_101D105  +
cmp ecx esi +
jz loc_101D105  +
mov dword_10648EC esi +
mov ecx [ebp+18h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
xor eax eax +
inc eax  +
call sub_1021FA5  +
retn 2Ch  +
***
call sub_1021EB9  +
mov esi ecx +
mov ecx [ebp+0Ch] +
and dword ptr [ebp-4] 0 +
call sub_1014FC6  +
mov eax [esi] +
mov edi offset aWt +
push edi  +
push eax  +
call sub_1022DE6  +
pop ecx  +
pop ecx  +
mov [ebp-10h] eax +
test eax eax +
jnz loc_101D188  +
mov eax [esi] +
push 80h  +
push eax  +
call ds:SetFileAttributesW  +
mov esi [esi] +
push edi  +
push esi  +
call sub_1022DE6  +
pop ecx  +
pop ecx  +
mov [ebp-10h] eax +
test eax eax +
jnz loc_101D188  +
mov ecx [ebp+8] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test ecx ecx +
jz loc_101D181  +
call sub_101A986  +
xor eax eax +
jmp loc_101D22E  +
mov eax [ebp+8] +
mov eax [eax+8] +
mov [ebp-18h] eax +
test eax eax +
jz loc_101D212  +
mov ebx offset aIdS +
mov ecx [ebp+8] +
lea eax [ebp-18h] +
push eax  +
add ecx 8 +
call sub_105038C  +
push eax  +
lea ecx [ebp-14h] +
call sub_101C334  +
mov edi [ebp-14h] +
push dword ptr [edi+10h]  +
lea esi [edi+0Ch] +
mov eax [esi] +
cmp dword ptr [eax-0Ch] 0 +
push ebx  +
push dword ptr [ebp-10h]  +
mov byte ptr [ebp-4] 1 +
jnz loc_101D1D5  +
call sub_1022C72  +
add esp 0Ch +
jmp loc_101D1FD  +
call sub_1022C72  +
push dword ptr [esi]  +
push offset aInfS  +
push dword ptr [ebp-10h]  +
call sub_1022C72  +
mov ecx [ebp+0Ch] +
mov eax [ecx] +
add esp 18h +
cmp dword ptr [eax-0Ch] 0 +
jnz loc_101D1FD  +
push esi  +
call sub_1015AAF  +
mov ecx edi +
mov byte ptr [ebp-4] 0 +
call sub_101A986  +
and dword ptr [ebp-14h] 0 +
cmp dword ptr [ebp-18h] 0 +
jnz loc_101D19A  +
push dword ptr [ebp-10h]  +
call sub_1022BF1  +
or dword ptr [ebp-4] 0FFFFFFFFh +
pop ecx  +
mov ecx [ebp+8] +
test ecx ecx +
jz loc_101D22B  +
call sub_101A986  +
xor eax eax +
inc eax  +
call sub_1021FA5  +
retn 8  +
***
call sub_1021EB9  +
mov esi ecx +
xor eax eax +
mov [ebp-10h] eax +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-10h] +
push eax  +
push ecx  +
push eax  +
push eax  +
push dword ptr [ebp+8]  +
mov [ebp-4] eax +
push 500h  +
call ds:FormatMessageW  +
test eax eax +
jnz loc_101D272  +
call loc_1014782  +
push dword ptr [ebp-10h]  +
mov ecx esi +
call sub_1015ACB  +
push dword ptr [ebp-10h]  +
call ds:LocalFree  +
call sub_1021FA5  +
retn 8  +
***
call sub_1021EB9  +
mov eax dword_10648FC +
xor esi esi +
test eax eax +
jz loc_101D2BC  +
cmp dword_1063180 esi +
jnz loc_101D2BC  +
mov eax [ebp+8] +
mov dword ptr [eax] 1 +
jmp loc_101D315  +
mov eax [ebp+8] +
mov [eax] esi +
cmp [ebp+0Ch] esi +
jz loc_101D315  +
lea ecx [ebp-1Ch] +
call sub_1015431  +
mov ecx [ebp+0Ch] +
mov [ebp-4] esi +
call loc_1014B04  +
mov eax dword_1063178 +
mov [ebp-10h] eax +
cmp eax esi +
jz loc_101D30D  +
lea eax [ebp-10h] +
push eax  +
mov ecx offset dword_1063178 +
call sub_105038C  +
push eax  +
lea ecx [ebp-1Ch] +
call sub_1015FF0  +
mov ecx [ebp+0Ch] +
lea eax [ebp-1Ch] +
push eax  +
call sub_1018E43  +
cmp [ebp-10h] esi +
jnz loc_101D2E5  +
lea ecx [ebp-1Ch] +
call sub_10151BA  +
mov eax dword_10648F8 +
call sub_1021FA5  +
retn 8  +
***
call sub_1021EB9  +
and dword ptr [ebp-4] 0 +
mov esi offset dword_1064BA8 +
push esi  +
lea ecx [ebp-10h] +
call sub_1015076  +
mov byte ptr [ebp-4] 1 +
test ebx ebx +
jnz loc_101D373  +
test edi edi +
jnz loc_101D37E  +
xor esi esi +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov eax esi +
call sub_1021FA5  +
retn 0Ch  +
mov ecx ebx +
call sub_1014FC6  +
test edi edi +
jz loc_101D385  +
mov ecx edi +
call sub_1014FC6  +
push dword ptr [ebp+10h]  +
lea eax [ebp-10h] +
push 0  +
push dword ptr [ebp+0Ch]  +
push eax  +
push dword ptr [ebp+8]  +
call sub_1037ED2  +
test eax eax +
jz loc_101D351  +
test ebx ebx +
jz loc_101D3AC  +
lea eax [ebp-10h] +
push eax  +
mov ecx ebx +
call sub_1015959  +
test edi edi +
jz loc_101D425  +
push esi  +
lea ecx [ebp+10h] +
call sub_1015076  +
push esi  +
lea ecx [ebp+0Ch] +
mov byte ptr [ebp-4] 2 +
call sub_1015076  +
lea eax [ebp+10h] +
push eax  +
push 13D1h  +
mov byte ptr [ebp-4] 3 +
call sub_10208E1  +
lea eax [ebp+0Ch] +
push eax  +
push 13D2h  +
call sub_10208E1  +
mov eax [ebp+0Ch] +
push dword ptr [eax-0Ch]  +
lea ecx [ebp+10h] +
push eax  +
call sub_10155F6  +
mov eax [ebp-10h] +
push dword ptr [eax-0Ch]  +
lea ecx [ebp+10h] +
push eax  +
call sub_10155F6  +
lea eax [ebp+10h] +
push eax  +
mov ecx edi +
call sub_1015959  +
mov ecx [ebp+0Ch] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp+10h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
xor esi esi +
inc esi  +
jmp loc_101D353  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp [ebp+arg_4] 0 +
jnz loc_101D448  +
push 80070057h  +
call loc_1014415  +
mov ecx [ebp+arg_0] +
lea eax [ebp+arg_8] +
mov [ebp+var_4] eax +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_4]  +
call sub_101D23B  +
leave   +
retn   +
***
call sub_1021EB9  +
lea ecx [ebp-34h] +
call sub_1015431  +
and dword ptr [ebp-4] 0 +
push offset dword_1064BA8  +
lea ecx [ebp-20h] +
call sub_1015076  +
mov ecx offset dword_1063178 +
mov byte ptr [ebp-4] 1 +
call loc_1014B04  +
mov eax [ebp+8] +
mov eax [eax] +
mov [ebp-1Ch] eax +
test eax eax +
jz loc_101D569  +
mov ecx [ebp+8] +
lea eax [ebp-1Ch] +
push eax  +
call sub_105038C  +
push eax  +
lea ecx [ebp-10h] +
call sub_101C334  +
mov eax [ebp-10h] +
add eax 8 +
mov eax [eax] +
mov [ebp-18h] eax +
test eax eax +
jz loc_101D54F  +
mov ecx [ebp-10h] +
lea eax [ebp-18h] +
push eax  +
add ecx 8 +
call sub_105038C  +
push eax  +
lea ecx [ebp-14h] +
call sub_101C334  +
mov esi [ebp-14h] +
lea eax [ebp-34h] +
push eax  +
lea eax [ebp-20h] +
push eax  +
lea edi [esi+8] +
push edi  +
mov byte ptr [ebp-4] 3 +
call sub_1036032  +
mov eax [esi+14h] +
mov [ebp-2Ch] eax +
xor eax eax +
push eax  +
push eax  +
push ecx  +
mov ecx esp +
mov [ebp-28h] esp +
push edi  +
mov edi eax +
lea ebx [ebp-30h] +
call sub_10151F2  +
call sub_101D327  +
test eax eax +
jnz loc_101D52E  +
lea eax [ebp-34h] +
push eax  +
mov ecx ebx +
call sub_1015959  +
lea eax [ebp-34h] +
push eax  +
mov ecx offset dword_1063178 +
call sub_1018E43  +
mov ecx esi +
mov byte ptr [ebp-4] 2 +
call sub_101A986  +
and [ebp-14h] edi +
cmp [ebp-18h] edi +
jnz loc_101D4CF  +
mov ecx [ebp-10h] +
mov byte ptr [ebp-4] 1 +
call sub_101A986  +
and dword ptr [ebp-10h] 0 +
cmp dword ptr [ebp-1Ch] 0 +
jnz loc_101D4A7  +
mov ecx [ebp-20h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
lea ecx [ebp-34h] +
call sub_10151BA  +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EB9  +
mov esi offset dword_1064BA8 +
push esi  +
lea ecx [ebp-20h] +
call sub_1015076  +
and dword ptr [ebp-4] 0 +
push esi  +
lea ecx [ebp-18h] +
call sub_1015076  +
push esi  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 1 +
call sub_1015076  +
push esi  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call sub_1015076  +
push esi  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 3 +
call sub_1015076  +
push esi  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 4 +
call sub_1015076  +
push esi  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 5 +
call sub_1015076  +
push esi  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 6 +
call sub_1015076  +
mov byte ptr [ebp-4] 7 +
call sub_10524A0  +
test eax eax +
jz loc_101D674  +
cmp eax 0B7h +
jz loc_101D674  +
mov ecx [ebp-1Ch] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-2Ch] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-28h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-24h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-20h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
xor eax eax +
call sub_1021FA5  +
retn 8  +
push 105h  +
lea ecx [ebp-18h] +
call sub_10158A3  +
push 104h  +
push eax  +
call sub_105235C  +
push 0FFFFFFFFh  +
lea ecx [ebp-18h] +
test eax eax +
jz loc_101D69F  +
call sub_1015023  +
jmp loc_101D612  +
call sub_1015023  +
push 0  +
lea ecx [ebp-30h] +
call sub_10161A7  +
push dword ptr [ebp+8]  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
mov edi offset lptstrFilename +
push edi  +
mov byte ptr [ebp-4] 8 +
call sub_10364E8  +
mov ecx [ebp-30h] +
mov ebx eax +
neg ebx  +
sbb bl bl +
add ecx 0FFFFFFF0h +
inc bl  +
mov byte ptr [ebp-4] 7 +
call sub_10147CD  +
test bl bl +
jz loc_101D744  +
xor esi esi +
mov ecx [ebp-1Ch] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-2Ch] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-28h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-24h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-20h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov eax esi +
jmp loc_101D66C  +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-24h] +
push eax  +
push edi  +
call sub_1036032  +
test al al +
jz loc_101D850  +
push offset a_mui  +
lea ecx [ebp-1Ch] +
call sub_1018C3E  +
lea eax [ebp-2Ch] +
push eax  +
lea eax [ebp-28h] +
push eax  +
push dword ptr [ebp+8]  +
call sub_1036032  +
test al al +
jz loc_101D850  +
xor ebx ebx +
cmp off_1063000 ebx +
jz loc_101D850  +
mov edi offset off_1063008 +
push dword ptr [edi]  +
lea ecx [ebp-30h] +
call sub_10161A7  +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-24h] +
push eax  +
mov byte ptr [ebp-4] 9 +
call sub_10360F6  +
mov ecx [ebp-30h] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 7 +
call sub_10147CD  +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-14h] +
push eax  +
call sub_10360F6  +
lea eax [ebp-14h] +
push eax  +
call sub_1035549  +
test al al +
jz loc_101D844  +
push dword ptr [edi]  +
lea ecx [ebp-34h] +
call sub_10161A7  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-34h] +
push eax  +
lea eax [ebp-28h] +
push eax  +
mov byte ptr [ebp-4] 0Ah +
call sub_10360F6  +
mov ecx [ebp-34h] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 7 +
call sub_10147CD  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-10h] +
push eax  +
call sub_10360F6  +
lea eax [ebp-10h] +
push eax  +
call sub_1035549  +
test al al +
jnz loc_101D844  +
lea eax [ebp-10h] +
push eax  +
call sub_10373CE  +
test al al +
jz loc_101D844  +
push ebx  +
push dword ptr [ebp-10h]  +
push dword ptr [ebp-14h]  +
call ds:CopyFileW  +
add edi 0Ch +
cmp [edi-8] ebx +
jnz loc_101D792  +
push 1  +
xor edi edi +
push edi  +
lea eax [ebp-34h] +
push eax  +
call sub_101BD38  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 0Bh +
call sub_1015959  +
mov ecx [ebp-34h] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 7 +
call sub_10147CD  +
mov eax [ebp-20h] +
cmp [eax-0Ch] edi +
jz loc_101D8FD  +
push esi  +
lea ecx [ebp-30h] +
call sub_1015076  +
push offset aIcons  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 0Ch +
call sub_10161A7  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-34h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
mov byte ptr [ebp-4] 0Dh +
call sub_10360F6  +
mov ecx [ebp-34h] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 0Ch +
call sub_10147CD  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push ecx  +
mov [ebp-34h] esp +
mov ecx esp +
push eax  +
call sub_10150A5  +
push ecx  +
lea eax [ebp-20h] +
mov [ebp-38h] esp +
mov ecx esp +
push eax  +
mov byte ptr [ebp-4] 0Eh +
call sub_10150A5  +
mov byte ptr [ebp-4] 0Ch +
call sub_103743C  +
mov ecx [ebp-30h] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 7 +
call sub_10147CD  +
mov ecx [ebp+0Ch] +
mov eax [ecx] +
cmp [eax-0Ch] edi +
jnz loc_101D90F  +
push dword ptr [ebp+8]  +
call sub_1015AAF  +
xor esi esi +
inc esi  +
jmp loc_101D6E5  +
***
call sub_1021EB9  +
mov ebx ecx +
mov edi offset dword_1064BA8 +
xor esi esi +
push edi  +
lea ecx [ebp-28h] +
mov [ebp-2Ch] esi +
call sub_1015076  +
push edi  +
lea ecx [ebp-10h] +
mov [ebp-4] esi +
call sub_1015076  +
push edi  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 1 +
call sub_1015076  +
push edi  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call sub_1015076  +
push edi  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 3 +
call sub_1015076  +
push edi  +
lea ecx [ebp-18h] +
mov byte ptr [ebp-4] 4 +
call sub_1015076  +
push edi  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 5 +
call sub_1015076  +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-24h] +
push eax  +
mov byte ptr [ebp-4] 6 +
call sub_101D589  +
test eax eax +
jz loc_101DA9D  +
lea eax [ebp-28h] +
push eax  +
push ecx  +
mov ecx esp +
mov [ebp-30h] esp +
push ebx  +
call sub_10151F2  +
call sub_103633A  +
cmp eax esi +
jz loc_101DA9D  +
lea eax [ebp-24h] +
push eax  +
lea ecx [ebp-10h] +
call sub_1015959  +
push offset asc_1001D58  +
lea ecx [ebp-10h] +
call sub_1018C3E  +
cmp dword_1064900 esi +
jz loc_101D9EE  +
push offset aD  +
lea ecx [ebp-10h] +
call sub_1018C3E  +
push offset aU  +
lea ecx [ebp-10h] +
call sub_1018C3E  +
mov eax [ebx] +
push dword ptr [eax-0Ch]  +
lea ecx [ebp-10h] +
push eax  +
call sub_10155F6  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
push ecx  +
mov ecx esp +
mov [ebp-30h] esp +
push ebx  +
lea edi [ebp-1Ch] +
call sub_10151F2  +
mov ebx esi +
call sub_101D327  +
cmp eax esi +
jz loc_101DA9D  +
push ecx  +
lea eax [ebp-14h] +
mov [ebp-30h] esp +
mov ecx esp +
push eax  +
call sub_10150A5  +
push ecx  +
lea eax [ebp-18h] +
mov [ebp-34h] esp +
mov ecx esp +
push eax  +
mov byte ptr [ebp-4] 7 +
call sub_10150A5  +
push ecx  +
lea eax [ebp-20h] +
mov [ebp-38h] esp +
mov ecx esp +
push eax  +
mov byte ptr [ebp-4] 8 +
call sub_10150A5  +
push ecx  +
lea eax [ebp-10h] +
mov [ebp-3Ch] esp +
mov ecx esp +
push eax  +
mov byte ptr [ebp-4] 9 +
call sub_10150A5  +
push ecx  +
mov eax edi +
mov [ebp-40h] esp +
mov ecx esp +
push eax  +
mov byte ptr [ebp-4] 0Ah +
call sub_10150A5  +
lea eax [ebp-28h] +
push eax  +
mov byte ptr [ebp-4] 6 +
call sub_1036973  +
cmp eax esi +
jz loc_101DA9D  +
mov dword ptr [ebp-2Ch] 1 +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-1Ch] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-20h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-24h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-28h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov eax [ebp-2Ch] +
call sub_1021FA5  +
retn   +
***
call sub_1021F2C  +
mov edi offset dword_1064BA8 +
xor ebx ebx +
push edi  +
lea ecx [ebp-484h] +
mov [ebp-4] ebx +
call sub_1015076  +
push edi  +
lea ecx [ebp-4ACh] +
mov byte ptr [ebp-4] 1 +
mov [ebp-4C4h] ebx +
call sub_1015076  +
push edi  +
lea ecx [ebp-480h] +
mov byte ptr [ebp-4] 2 +
call sub_1015076  +
push edi  +
lea ecx [ebp-4B4h] +
mov byte ptr [ebp-4] 3 +
call sub_1015076  +
push edi  +
lea ecx [ebp-48Ch] +
mov byte ptr [ebp-4] 4 +
call sub_1015076  +
push edi  +
lea ecx [ebp-49Ch] +
mov byte ptr [ebp-4] 5 +
call sub_1015076  +
push edi  +
lea ecx [ebp-498h] +
mov byte ptr [ebp-4] 6 +
call sub_1015076  +
push edi  +
lea ecx [ebp-4A0h] +
mov byte ptr [ebp-4] 7 +
call sub_1015076  +
push edi  +
lea ecx [ebp-490h] +
mov byte ptr [ebp-4] 8 +
call sub_1015076  +
push edi  +
lea ecx [ebp-494h] +
mov byte ptr [ebp-4] 9 +
call sub_1015076  +
push edi  +
lea ecx [ebp-488h] +
mov byte ptr [ebp-4] 0Ah +
call sub_1015076  +
push edi  +
lea ecx [ebp-4A4h] +
mov byte ptr [ebp-4] 0Bh +
call sub_1015076  +
lea eax [ebp-24h] +
push eax  +
push ecx  +
lea eax [ebp+8] +
mov ecx esp +
mov [ebp-4B0h] esp +
push eax  +
mov byte ptr [ebp-4] 0Ch +
call sub_101C334  +
call sub_101C48E  +
cmp eax ebx +
jnz loc_101DCC5  +
push offset aFailedToGetGro  +
push 3  +
call sub_1016717  +
mov ecx [ebp-4A4h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-488h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-494h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-490h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-4A0h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-498h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-49Ch] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-48Ch] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-4B4h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-480h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-4ACh] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-484h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp+8] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp ecx ebx +
jz loc_101DCBE  +
call sub_101A986  +
xor eax eax +
jmp loc_101E26B  +
lea eax [ebp-488h] +
push eax  +
push 14h  +
lea eax [ebp-24h] +
push eax  +
call sub_103626E  +
test eax eax +
jz loc_101DC06  +
call sub_10524A0  +
cmp eax ebx +
jz loc_101DD01  +
cmp eax 0B7h +
jz loc_101DD01  +
push offset aFailedToCreate  +
push eax  +
push 3  +
call sub_10167CB  +
jmp loc_101DC06  +
push 105h  +
lea ecx [ebp-484h] +
call sub_10158A3  +
push 104h  +
push eax  +
call sub_105235C  +
push 0FFFFFFFFh  +
lea ecx [ebp-484h] +
test eax eax +
jz loc_101DD32  +
call sub_1015023  +
jmp loc_101DC06  +
call sub_1015023  +
push offset aUninstallscrip  +
lea ecx [ebp-4A8h] +
call sub_10161A7  +
lea eax [ebp-484h] +
push eax  +
lea eax [ebp-4A8h] +
push eax  +
lea eax [ebp-484h] +
push eax  +
mov byte ptr [ebp-4] 0Dh +
call sub_10360F6  +
mov ecx [ebp-4A8h] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 0Ch +
call sub_10147CD  +
lea eax [ebp-484h] +
push eax  +
call sub_10371A4  +
test al al +
jnz loc_101DDA1  +
push dword ptr [ebp-484h]  +
push offset aFailedToCrea_0  +
push 3  +
call sub_10168F9  +
add esp 0Ch +
jmp loc_101DC06  +
lea eax [ebp-480h] +
push eax  +
lea eax [ebp-488h] +
push eax  +
lea eax [ebp-484h] +
push eax  +
call sub_10360F6  +
lea eax [ebp-480h] +
push eax  +
call sub_1035549  +
test al al +
jz loc_101DE83  +
push dword ptr [ebp-488h]  +
push offset aAScriptWithIdS  +
push 1  +
call sub_10168F9  +
add esp 0Ch +
lea eax [ebp-480h] +
push eax  +
push ecx  +
lea eax [ebp+8] +
mov ecx esp +
mov [ebp-4B0h] esp +
push eax  +
call sub_101C334  +
call sub_101CD24  +
cmp eax ebx +
jz loc_101DE17  +
push offset aScriptMatchesG  +
push 1  +
call sub_1016717  +
jmp loc_101E00F  +
lea eax [ebp-22Ch] +
push eax  +
push ebx  +
push dword ptr [ebp-488h]  +
push dword ptr [ebp-484h]  +
call ds:GetTempFileNameW  +
test eax eax +
jz loc_101DC06  +
lea eax [ebp-22Ch] +
push eax  +
lea ecx [ebp-480h] +
call sub_10158CD  +
push edi  +
lea ecx [ebp-4B8h] +
call sub_1015076  +
lea eax [ebp-488h] +
push eax  +
lea eax [ebp-4B8h] +
push eax  +
lea eax [ebp-480h] +
push eax  +
mov byte ptr [ebp-4] 0Eh +
call sub_1036032  +
mov ecx [ebp-4B8h] +
add ecx 0FFFFFFF0h +
jmp loc_101E006  +
push edi  +
lea ecx [ebp-4B8h] +
call sub_1015076  +
push edi  +
lea ecx [ebp-4A8h] +
mov byte ptr [ebp-4] 0Fh +
call sub_1015076  +
push offset a_tmp  +
lea eax [ebp-484h] +
push eax  +
lea eax [ebp-4B0h] +
push eax  +
mov byte ptr [ebp-4] 10h +
call sub_1015847  +
push eax  +
lea ecx [ebp-4B8h] +
mov byte ptr [ebp-4] 11h +
call sub_1015959  +
mov ecx [ebp-4B0h] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 10h +
call sub_10147CD  +
mov ebx [ebp-4B8h] +
lea eax [ebp-47Ch] +
push eax  +
push ebx  +
call ds:FindFirstFileW  +
mov [ebp-4B0h] eax +
cmp eax 0FFFFFFFFh +
jz loc_101DFF5  +
test byte ptr [ebp-47Ch] 10h +
jnz loc_101DF6D  +
lea eax [ebp-450h] +
push eax  +
lea ecx [ebp-4BCh] +
call sub_10161A7  +
lea eax [ebp-4A8h] +
push eax  +
lea eax [ebp-4BCh] +
push eax  +
lea eax [ebp-484h] +
push eax  +
mov byte ptr [ebp-4] 12h +
call sub_10360F6  +
mov ecx [ebp-4BCh] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 10h +
call sub_10147CD  +
lea eax [ebp-4A8h] +
push eax  +
push ecx  +
lea eax [ebp+8] +
mov ecx esp +
mov [ebp-4C0h] esp +
push eax  +
call sub_101C334  +
call sub_101CD24  +
test eax eax +
jnz loc_101DF8A  +
lea eax [ebp-47Ch] +
push eax  +
push dword ptr [ebp-4B0h]  +
call ds:FindNextFileW  +
test eax eax +
jnz loc_101DF00  +
jmp loc_101DFE9  +
push dword ptr [ebp-4A8h]  +
push offset aGroupMatchesSc  +
push 1  +
call sub_10168F9  +
add esp 0Ch +
lea eax [ebp-4A8h] +
push eax  +
lea ecx [ebp-480h] +
call sub_1015959  +
push edi  +
lea ecx [ebp-4BCh] +
call sub_1015076  +
lea eax [ebp-488h] +
push eax  +
lea eax [ebp-4BCh] +
push eax  +
lea eax [ebp-480h] +
push eax  +
mov byte ptr [ebp-4] 13h +
call sub_1036032  +
mov ecx [ebp-4BCh] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
push dword ptr [ebp-4B0h]  +
call ds:FindClose  +
mov ecx [ebp-4A8h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
lea ecx [ebx-10h] +
mov byte ptr [ebp-4] 0Ch +
call sub_10147CD  +
push dword ptr [ebp-480h]  +
push dword ptr [ebp-488h]  +
push offset aGroupWithIdSWi  +
push 1  +
call sub_10168F9  +
mov ecx [ebp+8] +
add esp 10h +
lea eax [ebp-480h] +
add ecx 28h +
push eax  +
call sub_1015959  +
lea eax [ebp-4A4h] +
push eax  +
push ecx  +
lea eax [ebp+8] +
mov ecx esp +
mov [ebp-4C0h] esp +
push eax  +
call sub_101C334  +
lea ecx [ebp-480h] +
call sub_101D120  +
xor ebx ebx +
cmp eax ebx +
jz loc_101E1AD  +
lea eax [ebp-498h] +
push eax  +
lea eax [ebp-49Ch] +
push eax  +
call sub_101D589  +
test eax eax +
jz loc_101E1AD  +
lea eax [ebp-49Ch] +
push eax  +
lea ecx [ebp-48Ch] +
call sub_1015959  +
push offset asc_1001D58  +
lea ecx [ebp-48Ch] +
call sub_1018C3E  +
cmp dword_1064900 ebx +
jz loc_101E0BF  +
push offset aD  +
lea ecx [ebp-48Ch] +
call sub_1018C3E  +
push offset aUs_0  +
lea ecx [ebp-48Ch] +
call sub_1018C3E  +
mov eax [ebp-480h] +
push dword ptr [eax-0Ch]  +
lea ecx [ebp-48Ch] +
push eax  +
call sub_10155F6  +
lea eax [ebp-490h] +
push eax  +
lea eax [ebp-494h] +
push eax  +
push ecx  +
lea eax [ebp-4A4h] +
mov [ebp-4C0h] esp +
mov ecx esp +
push eax  +
lea edi [ebp-4A0h] +
call sub_10150A5  +
call sub_101D327  +
test eax eax +
jz loc_101E1AD  +
push ecx  +
lea eax [ebp-494h] +
mov [ebp-4C0h] esp +
mov ecx esp +
push eax  +
call sub_10150A5  +
push ecx  +
lea eax [ebp-490h] +
mov [ebp-4B0h] esp +
mov ecx esp +
push eax  +
mov byte ptr [ebp-4] 14h +
call sub_10150A5  +
push ecx  +
lea eax [ebp-498h] +
mov [ebp-4B8h] esp +
mov ecx esp +
push eax  +
mov byte ptr [ebp-4] 15h +
call sub_10150A5  +
push ecx  +
lea eax [ebp-48Ch] +
mov [ebp-4C8h] esp +
mov ecx esp +
push eax  +
mov byte ptr [ebp-4] 16h +
call sub_10150A5  +
push ecx  +
mov eax edi +
mov [ebp-4CCh] esp +
mov ecx esp +
push eax  +
mov byte ptr [ebp-4] 17h +
call sub_10150A5  +
lea eax [ebp-488h] +
push eax  +
mov byte ptr [ebp-4] 0Ch +
call sub_1036973  +
test eax eax +
jz loc_101E1AD  +
mov dword ptr [ebp-4C4h] 1 +
mov ecx [ebp-4A4h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-488h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-494h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-490h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-4A0h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-498h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-49Ch] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-48Ch] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-4B4h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-480h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-4ACh] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-484h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp+8] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test ecx ecx +
jz loc_101E265  +
call sub_101A986  +
mov eax [ebp-4C4h] +
call sub_1021FBE  +
retn 4  +
***
call sub_1021EB9  +
xor eax eax +
mov [ebp-4] eax +
mov [ebp-18h] eax +
mov [ebp-10h] eax +
mov [ebp-20h] eax +
mov eax dword_10648FC +
test eax eax +
jnz loc_101E978  +
xor esi esi +
cmp [ebp+0Ch] esi +
jz loc_101E2B0  +
push dword ptr [ebp+10h]  +
push 1  +
call dword ptr [ebp+0Ch]  +
pop ecx  +
pop ecx  +
cmp dword_10648DC esi +
jz loc_101E2BF  +
mov dword ptr [ebp-10h] 2 +
cmp dword_10648F0 esi +
jz loc_101E2CB  +
or dword ptr [ebp-10h] 8 +
cmp dword_10648E0 esi +
jz loc_101E2D7  +
or dword ptr [ebp-10h] 10h +
mov eax [ebp+8] +
mov eax [eax+8] +
mov [ebp-24h] eax +
cmp eax esi +
jz loc_101E4B4  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
add ecx 8 +
call sub_105038C  +
push eax  +
lea ecx [ebp-1Ch] +
call sub_101C334  +
mov edi [ebp-1Ch] +
lea eax [edi+14h] +
mov dword ptr [eax] 1 +
mov [ebp+10h] eax +
xor eax eax +
lea ebx [edi+18h] +
mov [ebx] eax +
mov [edi+1Ch] eax +
lea esi [edi+8] +
push dword ptr [esi]  +
mov byte ptr [ebp-4] 1 +
push offset aPreinstallingS  +
push 1  +
mov [ebp+0Ch] eax +
call sub_10168F9  +
mov eax [esi] +
add esp 0Ch +
push dword ptr [ebp-10h]  +
push eax  +
call ds:off_1013E48  +
test eax eax +
jz loc_101E3EA  +
xor edi edi +
inc edi  +
cmp eax 0B7h +
jz loc_101E3FD  +
cmp eax edi +
jz loc_101E412  +
cmp eax 800B0100h +
jz loc_101E438  +
cmp eax 800B0101h +
jz loc_101E449  +
cmp eax 800B0110h +
jz loc_101E45A  +
cmp eax 103h +
jz loc_101E470  +
cmp eax 0E000020Bh +
jz loc_101E470  +
cmp eax 0E0000301h +
jz loc_101E470  +
cmp eax 20h +
jnz loc_101E465  +
inc dword ptr [ebp+0Ch]  +
cmp dword ptr [ebp+0Ch] 10h +
ja loc_101E465  +
mov eax dword_10648FC +
test eax eax +
jnz loc_101E61B  +
push dword ptr [esi]  +
push offset aPreinstallingS  +
push edi  +
call sub_10168F9  +
mov eax [esi] +
add esp 0Ch +
push dword ptr [ebp-10h]  +
push eax  +
call ds:off_1013E48  +
test eax eax +
jnz loc_101E34B  +
mov edi [ebp-1Ch] +
add edi 0Ch +
push edi  +
mov ecx esi +
mov dword ptr [ebx] 2 +
call sub_101CF69  +
jmp loc_101E40D  +
mov eax [ebp-1Ch] +
add eax 0Ch +
push eax  +
mov ecx esi +
call sub_101CF69  +
mov [ebx] edi +
inc dword ptr [ebp-20h]  +
jmp loc_101E48C  +
mov eax [ebp-1Ch] +
add eax 0Ch +
push eax  +
mov ecx esi +
call sub_101CF69  +
test eax eax +
jz loc_101E40B  +
cmp eax 0E0000302h +
jnz loc_101E433  +
mov dword ptr [ebx] 4 +
jmp loc_101E48C  +
and dword ptr [ebx] 0 +
jmp loc_101E48C  +
mov eax [ebp+10h] +
mov dword ptr [ebx] 3 +
mov dword ptr [eax] 6 +
jmp loc_101E47F  +
mov eax [ebp+10h] +
mov dword ptr [ebx] 3 +
mov dword ptr [eax] 7 +
jmp loc_101E47F  +
mov eax [ebp+10h] +
mov dword ptr [eax] 8 +
jmp loc_101E479  +
mov eax [ebp+10h] +
mov dword ptr [eax] 9 +
jmp loc_101E479  +
mov eax [ebp+10h] +
mov dword ptr [eax] 4 +
mov dword ptr [ebx] 3 +
mov eax [ebp+8] +
cmp dword ptr [eax+20h] 0 +
jnz loc_101E64B  +
mov eax dword_10648FC +
test eax eax +
jnz loc_101E64B  +
mov ecx [ebp-1Ch] +
mov [ebp-4] al +
call sub_101A986  +
and dword ptr [ebp-1Ch] 0 +
cmp dword ptr [ebp-24h] 0 +
jnz loc_101E2E8  +
xor esi esi +
cmp dword_10648DC esi +
jz loc_101E4C3  +
mov dword ptr [ebp-10h] 2 +
cmp dword_10648F0 esi +
jz loc_101E4CF  +
or dword ptr [ebp-10h] 8 +
cmp dword_10648E0 esi +
jz loc_101E4DB  +
or dword ptr [ebp-10h] 10h +
cmp dword_10648EC esi +
jz loc_101E4E7  +
or dword ptr [ebp-10h] 4 +
mov eax [ebp+8] +
mov [ebp-28h] esi +
mov eax [eax+8] +
mov [ebp-24h] eax +
cmp eax esi +
jz loc_101E88E  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
add ecx 8 +
call sub_105038C  +
push eax  +
lea ecx [ebp-14h] +
call sub_101C334  +
mov ecx [ebp-14h] +
lea edi [ecx+14h] +
cmp dword ptr [edi] 1 +
mov byte ptr [ebp-4] 2 +
mov [ebp-44h] edi +
jnz loc_101E875  +
lea ebx [ecx+18h] +
mov eax [ebx] +
mov [ebp-40h] ebx +
cmp eax 1 +
jz loc_101E544  +
cmp eax 2 +
jz loc_101E544  +
cmp eax 4 +
jnz loc_101E875  +
and dword ptr [ebp+0Ch] 0 +
lea esi [ecx+8] +
mov eax [esi] +
lea ecx [ebp-28h] +
push ecx  +
push 0  +
push dword ptr [ebp-10h]  +
push eax  +
call ds:off_1013E44  +
mov [ebp+10h] eax +
cmp eax 103h +
jnz loc_101E6F7  +
xor ecx ecx +
cmp dword_10648EC ecx +
jnz loc_101E6F7  +
cmp dword_1063174 ecx +
jz loc_101E6F7  +
cmp dword_10648E8 ecx +
jz loc_101E6F7  +
mov edi offset dword_1064BA8 +
push edi  +
lea ecx [ebp-34h] +
call sub_1015076  +
push edi  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 3 +
call sub_1015076  +
push edi  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 4 +
call sub_1015076  +
push edi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 5 +
call sub_1015076  +
lea eax [ebp-34h] +
push eax  +
push 13CEh  +
mov byte ptr [ebp-4] 6 +
call sub_10208E1  +
xor edi edi +
push edi  +
push edi  +
push ecx  +
mov ecx esp +
mov [ebp-1Ch] esp +
push esi  +
lea ebx [ebp-38h] +
call sub_10151F2  +
call sub_101D327  +
mov ebx [ebp-38h] +
cmp eax edi +
jz loc_101E66B  +
lea eax [ebp-30h] +
push eax  +
push 13CFh  +
call sub_10208E1  +
test eax eax +
jz loc_101E679  +
push ebx  +
push dword ptr [ebp-30h]  +
lea eax [ebp-2Ch] +
push eax  +
call sub_101D432  +
add esp 0Ch +
jmp loc_101E679  +
push ecx  +
lea eax [ebp+8] +
mov ecx esp +
mov [ebp+0Ch] esp +
push eax  +
call sub_101C334  +
call sub_101C3B5  +
mov ecx [ebp-1Ch] +
mov [ebp-18h] eax +
mov byte ptr [ebp-4] 0 +
test ecx ecx +
jz loc_101E978  +
call sub_101A986  +
jmp loc_101E978  +
push ecx  +
lea eax [ebp+8] +
mov ecx esp +
mov [ebp+0Ch] esp +
push eax  +
call sub_101C334  +
call sub_101C3B5  +
mov ecx [ebp-1Ch] +
mov [ebp-18h] eax +
mov byte ptr [ebp-4] 0 +
jmp loc_101E641  +
lea eax [ebp-2Ch] +
push eax  +
push 13D0h  +
call sub_10208E1  +
mov ecx [ebp-2Ch] +
cmp [ecx-0Ch] edi +
jz loc_101E6C1  +
mov eax [ebp-34h] +
cmp [eax-0Ch] edi +
jz loc_101E6C1  +
push 24h  +
push eax  +
push ecx  +
push edi  +
call ds:MessageBoxW  +
cmp eax 6 +
jnz loc_101E6C1  +
push offset aUserAcceptedTo  +
push 1  +
call sub_1016717  +
or dword ptr [ebp-10h] 4 +
mov eax [esi] +
lea ecx [ebp-28h] +
push ecx  +
push edi  +
push dword ptr [ebp-10h]  +
push eax  +
call ds:off_1013E44  +
and dword ptr [ebp-10h] 0FFFFFFFBh +
mov [ebp+10h] eax +
lea ecx [ebx-10h] +
call sub_10147CD  +
mov ecx [ebp-30h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-2Ch] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-34h] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 2 +
call sub_10147CD  +
mov ebx [ebp-40h] +
mov edi [ebp-44h] +
mov eax [ebp+10h] +
mov ecx [ebp-28h] +
or [ebp-18h] ecx +
test eax eax +
jz loc_101E836  +
cmp eax 20h +
jnz loc_101E747  +
inc dword ptr [ebp+0Ch]  +
cmp dword ptr [ebp+0Ch] 10h +
ja loc_101E824  +
mov eax dword_10648FC +
test eax eax +
jz loc_101E54B  +
push ecx  +
lea eax [ebp+8] +
mov ecx esp +
mov [ebp+0Ch] esp +
push eax  +
call sub_101C334  +
call sub_101C3B5  +
mov ecx [ebp-14h] +
mov [ebp-18h] eax +
mov byte ptr [ebp-4] 0 +
jmp loc_101E641  +
cmp eax 103h +
jz loc_101E810  +
cmp eax 0E000020Bh +
jz loc_101E7F7  +
cmp eax 0E0000301h +
jz loc_101E7DE  +
cmp eax 800B0110h +
jz loc_101E773  +
mov dword ptr [edi] 9 +
jmp loc_101E779  +
mov dword ptr [edi] 8 +
mov edi [ebp-14h] +
mov dword ptr [edi+1Ch] 3 +
mov eax [ebp+8] +
cmp dword ptr [eax+20h] 0 +
jnz loc_101E8C1  +
cmp dword ptr [ebx] 2 +
jnz loc_101E865  +
xor eax eax +
cmp dword_10648DC eax +
jz loc_101E7A6  +
push 2  +
pop eax  +
cmp dword_1064900 0 +
jz loc_101E7B2  +
or eax 20h +
mov esi [esi] +
lea ecx [ebp-28h] +
push ecx  +
push 0  +
push eax  +
push esi  +
call ds:off_1013E38  +
test eax eax +
jnz loc_101E7D3  +
mov dword ptr [ebx] 3 +
mov dword ptr [edi+1Ch] 2 +
mov eax [ebp-28h] +
or [ebp-18h] eax +
jmp loc_101E865  +
mov ecx [ebp-14h] +
push 2  +
pop eax  +
mov dword ptr [edi] 4 +
mov [ecx+1Ch] eax +
push dword ptr [esi]  +
push offset aNoDeviceIdsFou  +
push eax  +
jmp loc_101E85D  +
mov eax [ebp-14h] +
mov dword ptr [edi] 3 +
mov dword ptr [eax+1Ch] 2 +
push dword ptr [esi]  +
push offset aNoMatchingDevi  +
jmp loc_101E85B  +
mov ecx [ebp-14h] +
push 2  +
pop eax  +
mov [edi] eax +
mov [ecx+1Ch] eax +
push dword ptr [esi]  +
push offset aDidNotInstallW  +
jmp loc_101E85B  +
mov eax [ebp-14h] +
mov dword ptr [edi] 9 +
mov dword ptr [eax+1Ch] 2 +
jmp loc_101E865  +
mov eax [ebp-14h] +
xor ecx ecx +
inc ecx  +
mov [edi] ecx +
mov [eax+1Ch] ecx +
cmp dword ptr [ebx] 4 +
jnz loc_101E854  +
add eax 0Ch +
push eax  +
mov ecx esi +
call sub_101CF69  +
inc dword ptr [ebp-20h]  +
push dword ptr [esi]  +
push offset aSuccessfullIns  +
push 1  +
call sub_10168F9  +
add esp 0Ch +
mov eax dword_10648FC +
test eax eax +
jnz loc_101E724  +
mov ecx [ebp-14h] +
mov byte ptr [ebp-4] 0 +
call sub_101A986  +
and dword ptr [ebp-14h] 0 +
cmp dword ptr [ebp-24h] 0 +
jnz loc_101E4FB  +
xor esi esi +
cmp [ebp-20h] esi +
jz loc_101E978  +
mov eax [ebp+8] +
cmp dword ptr [eax+24h] 0 +
jz loc_101E8F4  +
push ecx  +
lea eax [ebp+8] +
mov ecx esp +
mov [ebp+0Ch] esp +
push eax  +
call sub_101C334  +
call sub_101DAF8  +
test eax eax +
jz loc_101E8E3  +
push offset aCreatedGroupEn  +
push 1  +
jmp loc_101E8EA  +
push ecx  +
lea eax [ebp+8] +
mov ecx esp +
mov [ebp+0Ch] esp +
push eax  +
call sub_101C334  +
call sub_101C3B5  +
mov [ebp-18h] eax +
mov byte ptr [ebp-4] 0 +
mov ecx edi +
jmp loc_101E641  +
push offset aFailedToGroupC  +
push 2  +
call sub_1016717  +
jmp loc_101E978  +
mov eax [eax+8] +
mov [ebp-24h] eax +
test eax eax +
jz loc_101E978  +
xor ebx ebx +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
add ecx 8 +
call sub_105038C  +
push eax  +
lea ecx [ebp-3Ch] +
call sub_101C334  +
mov esi [ebp-3Ch] +
mov eax [esi+18h] +
mov byte ptr [ebp-4] 7 +
cmp eax 4 +
jnz loc_101E92D  +
cmp dword ptr [esi+1Ch] 1 +
jz loc_101E93D  +
cmp eax 2 +
jnz loc_101E965  +
cmp dword ptr [esi+1Ch] 3 +
jz loc_101E965  +
cmp [esi+20h] ebx +
jz loc_101E965  +
lea edi [esi+0Ch] +
mov ecx edi +
call sub_101D91C  +
push dword ptr [edi]  +
test eax eax +
jz loc_101E956  +
push offset aCreatedEntryIn  +
push 1  +
jmp loc_101E95D  +
push offset aFailedToCrea_1  +
push 2  +
call sub_10168F9  +
add esp 0Ch +
mov ecx esi +
mov byte ptr [ebp-4] 0 +
call sub_101A986  +
mov [ebp-3Ch] ebx +
cmp [ebp-24h] ebx +
jnz loc_101E900  +
mov ecx [ebp+8] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test ecx ecx +
jz loc_101E988  +
call sub_101A986  +
mov eax [ebp-18h] +
call sub_1021FA5  +
retn 0Ch  +
***
call sub_1021F2C  +
mov eax [ebp+8] +
mov edi ecx +
mov [ebp-280h] eax +
mov eax [ebp+0Ch] +
mov esi offset dword_1064BA8 +
push esi  +
lea ecx [ebp-264h] +
mov [ebp-274h] edi +
mov [ebp-284h] eax +
call sub_1015076  +
and dword ptr [ebp-4] 0 +
push esi  +
lea ecx [ebp-268h] +
call sub_1015076  +
push esi  +
lea ecx [ebp-270h] +
mov byte ptr [ebp-4] 1 +
call sub_1015076  +
push 105h  +
lea ecx [ebp-268h] +
mov byte ptr [ebp-4] 2 +
call sub_10158A3  +
mov ecx [ebp-268h] +
push dword ptr [ecx-0Ch]  +
push eax  +
call ds:GetWindowsDirectoryW  +
test eax eax +
jz loc_101ECAB  +
push 0FFFFFFFFh  +
lea ecx [ebp-268h] +
call sub_1015023  +
push offset aInf  +
lea ecx [ebp-26Ch] +
call sub_10161A7  +
lea eax [ebp-270h] +
push eax  +
lea eax [ebp-26Ch] +
push eax  +
lea eax [ebp-268h] +
push eax  +
mov byte ptr [ebp-4] 3 +
call sub_10360F6  +
mov ecx [ebp-26Ch] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 2 +
call sub_10147CD  +
push dword ptr [ebp-270h]  +
mov ecx edi +
call sub_101A9BE  +
test eax eax +
jz loc_101ECAB  +
push offset a_  +
push edi  +
lea eax [ebp-26Ch] +
push eax  +
call sub_1015847  +
push eax  +
lea ecx [ebp-264h] +
mov byte ptr [ebp-4] 4 +
call sub_1015959  +
mov ecx [ebp-26Ch] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 2 +
call sub_10147CD  +
mov esi [ebp-264h] +
lea eax [ebp-260h] +
push eax  +
push esi  +
call ds:FindFirstFileW  +
mov [ebp-26Ch] eax +
cmp eax 0FFFFFFFFh +
jnz loc_101EAF7  +
mov ecx [ebp-270h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-268h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
lea ecx [esi-10h] +
jmp loc_101ECD0  +
mov edi ds:lstrlenW +
mov esi offset SubBlock +
test byte ptr [ebp-260h] 10h +
jz loc_101EBAC  +
mov ebx ds:lstrcmpW +
push offset String2  +
lea eax [ebp-234h] +
push eax  +
call ebx  +
test eax eax +
jz loc_101EB9F  +
push offset a__  +
lea eax [ebp-234h] +
push eax  +
call ebx  +
test eax eax +
jz loc_101EB9F  +
push esi  +
push dword ptr [ebp-274h]  +
lea eax [ebp-28Ch] +
push eax  +
call sub_1015847  +
lea ecx [ebp-234h] +
push ecx  +
push eax  +
lea eax [ebp-278h] +
push eax  +
mov byte ptr [ebp-4] 5 +
call sub_1015847  +
push eax  +
lea ecx [ebp-264h] +
mov byte ptr [ebp-4] 6 +
call sub_1015959  +
mov ecx [ebp-278h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-28Ch] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 2 +
call sub_10147CD  +
mov ecx [ebp-280h] +
jmp loc_101EC79  +
test byte ptr [ebp-260h] 10h +
jnz loc_101EC84  +
push offset String  +
call edi  +
mov ebx eax +
lea eax [ebp-234h] +
push eax  +
call edi  +
cmp eax ebx +
jle loc_101EC84  +
push 0FFFFFFFFh  +
mov eax offset String +
push eax  +
push 0FFFFFFFFh  +
push eax  +
call edi  +
mov ebx eax +
lea eax [ebp-234h] +
push eax  +
call edi  +
sub eax ebx +
mov ebx ds:CompareStringW +
lea eax [ebp+eax*2-234h] +
push eax  +
push 1  +
push 7Fh  +
call ebx  +
cmp eax 2 +
jnz loc_101EC84  +
push 0FFFFFFFFh  +
push offset aAutorun_inf  +
push 0FFFFFFFFh  +
lea eax [ebp-234h] +
push eax  +
push 1  +
push 7Fh  +
call ebx  +
cmp eax 2 +
jz loc_101EC84  +
push esi  +
push dword ptr [ebp-274h]  +
lea eax [ebp-27Ch] +
push eax  +
call sub_1015847  +
lea ecx [ebp-234h] +
push ecx  +
push eax  +
lea eax [ebp-288h] +
push eax  +
mov byte ptr [ebp-4] 7 +
call sub_1015847  +
push eax  +
lea ecx [ebp-264h] +
mov byte ptr [ebp-4] 8 +
call sub_1015959  +
mov ecx [ebp-288h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-27Ch] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 2 +
call sub_10147CD  +
mov ecx [ebp-284h] +
push dword ptr [ebp-264h]  +
call sub_10172FC  +
lea eax [ebp-260h] +
push eax  +
push dword ptr [ebp-26Ch]  +
call ds:FindNextFileW  +
test eax eax +
jnz loc_101EB02  +
push dword ptr [ebp-26Ch]  +
call ds:FindClose  +
mov ecx [ebp-270h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-268h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-264h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
call sub_1021FBE  +
retn 8  +
***
call sub_1021EB9  +
lea ecx [ebp-54h] +
call sub_1014C71  +
xor edi edi +
lea ecx [ebp-3Ch] +
mov [ebp-4] edi +
call sub_1014C71  +
push dword ptr [ebp+8]  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 1 +
call sub_10150A5  +
lea ecx [ebp-6Ch] +
call sub_1014C71  +
lea eax [ebp-6Ch] +
push eax  +
mov byte ptr [ebp-4] 3 +
call sub_101C0CF  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-54h] +
push eax  +
lea ecx [ebp-10h] +
call sub_101E998  +
cmp [ebp-4Ch] edi +
jz loc_101EE57  +
mov esi offset dword_1064BA8 +
lea eax [ebp-1Ch] +
push eax  +
lea ecx [ebp-54h] +
call sub_101CFF6  +
push eax  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 4 +
call sub_1015959  +
mov ecx [ebp-1Ch] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 3 +
call sub_10147CD  +
push esi  +
lea ecx [ebp-18h] +
call sub_1015076  +
push esi  +
lea ecx [ebp+8] +
mov byte ptr [ebp-4] 5 +
call sub_1015076  +
lea eax [ebp+8] +
push eax  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-10h] +
push eax  +
mov byte ptr [ebp-4] 6 +
call sub_1036032  +
mov eax [ebp-6Ch] +
mov [ebp-14h] eax +
cmp eax edi +
jz loc_101EE34  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-6Ch] +
call sub_105038C  +
push eax  +
lea ecx [ebp-20h] +
call sub_10150A5  +
push dword ptr [ebp+8]  +
mov ebx [ebp-20h] +
push ebx  +
mov byte ptr [ebp-4] 7 +
call sub_10224ED  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_101EE0B  +
push offset asc_1005268  +
push ebx  +
call sub_10224ED  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_101EE1F  +
jmp loc_101EE0B  +
lea eax [ebp-24h] +
push eax  +
lea ecx [ebp-3Ch] +
call sub_101CFF6  +
push eax  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 8 +
call sub_1015959  +
mov ecx [ebp-24h] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 7 +
call sub_10147CD  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-3Ch] +
push eax  +
lea ecx [ebp-10h] +
call sub_101E998  +
cmp [ebp-34h] edi +
jnz loc_101EDE3  +
lea ecx [ebx-10h] +
mov byte ptr [ebp-4] 6 +
call sub_10147CD  +
cmp [ebp-14h] edi +
jnz loc_101EDA5  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 3 +
call sub_10147CD  +
cmp [ebp-4Ch] edi +
jnz loc_101ED44  +
lea ecx [ebp-6Ch] +
call loc_1014AB9  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
lea ecx [ebp-3Ch] +
call loc_1014AB9  +
lea ecx [ebp-54h] +
call loc_1014AB9  +
xor eax eax +
call sub_1021FA5  +
retn 8  +
***
call sub_1021EB9  +
push 0Ah  +
lea ecx [ebp-9Ch] +
call sub_101C247  +
xor edi edi +
push 0Ah  +
lea ecx [ebp-6Ch] +
mov [ebp-4] edi +
call sub_101C247  +
mov [ebp-48h] edi +
mov [ebp-44h] edi +
mov [ebp-40h] edi +
mov ecx offset dword_1063178 +
mov byte ptr [ebp-4] 2 +
call loc_1014B04  +
cmp [ebp+8] edi +
jz loc_101EED9  +
push dword ptr [ebp+0Ch]  +
push edi  +
call dword ptr [ebp+8]  +
pop ecx  +
pop ecx  +
lea ecx [ebp-84h] +
call sub_1014C71  +
lea eax [ebp-84h] +
push eax  +
push offset dword_1064904  +
mov byte ptr [ebp-4] 3 +
call sub_101ECE2  +
mov eax dword_10648FC +
test eax eax +
jz loc_101EF13  +
push offset aInstallCancell  +
push 1  +
call sub_1016717  +
jmp loc_101F3FC  +
call sub_101A853  +
test eax eax +
jz loc_101EF30  +
lea eax [ebp-9Ch] +
push eax  +
call sub_101BE17  +
test eax eax +
jz loc_101F3FC  +
mov eax dword_10648FC +
test eax eax +
jnz loc_101EF02  +
cmp [ebp-7Ch] edi +
jnz loc_101EF53  +
cmp [ebp-94h] edi +
jnz loc_101F041  +
push offset aNoDriverPackag  +
push 3  +
jmp loc_101EF09  +
mov [ebp-28h] edi +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 4 +
call sub_101CA63  +
mov ebx [ebp-28h] +
mov [ebx+24h] edi +
mov eax [ebp-84h] +
mov [ebp-34h] eax +
cmp eax edi +
jz loc_101F022  +
add ebx 8 +
mov dword ptr [ebp-50h] 1 +
mov [ebp-30h] edi +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 5 +
call sub_101CA90  +
lea eax [ebp-34h] +
push eax  +
lea ecx [ebp-84h] +
call sub_105038C  +
push eax  +
lea ecx [ebp-20h] +
call sub_10150A5  +
push dword ptr [ebp-20h]  +
mov byte ptr [ebp-4] 6 +
push offset aFoundDriverPac  +
push 1  +
call sub_10168F9  +
add esp 0Ch +
lea ecx [ebp-20h] +
call sub_101CC99  +
mov esi [ebp-30h] +
lea eax [ebp-20h] +
lea ecx [esi+8] +
push eax  +
call sub_1015959  +
xor eax eax +
cmp dword_10648F4 edi +
mov ecx ebx +
setz al  +
mov [esi+20h] eax +
lea eax [ebp-30h] +
push eax  +
call sub_101ADDE  +
lea eax [ebp-50h] +
push eax  +
lea eax [ebp-20h] +
push eax  +
lea ecx [ebp-48h] +
call sub_10158FD  +
mov ecx [ebp-20h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx esi +
mov byte ptr [ebp-4] 4 +
call sub_101A986  +
cmp [ebp-34h] edi +
jnz loc_101EF83  +
mov ebx [ebp-28h] +
mov eax dword_10648E4 +
mov [ebx+20h] eax +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-6Ch] +
call sub_101ADDE  +
mov ecx ebx +
mov byte ptr [ebp-4] 3 +
call sub_101A986  +
mov eax [ebp-9Ch] +
mov [ebp-14h] eax +
cmp eax edi +
jz loc_101F1DF  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-9Ch] +
call sub_105038C  +
push eax  +
lea ecx [ebp-2Ch] +
call sub_101C334  +
mov [ebp-18h] edi +
lea ecx [ebp-18h] +
mov byte ptr [ebp-4] 8 +
call sub_101CA63  +
mov esi [ebp-2Ch] +
mov eax [esi+8] +
mov [ebp-38h] eax +
cmp eax edi +
jz loc_101F180  +
lea eax [ebp-38h] +
push eax  +
lea ecx [esi+8] +
call sub_105038C  +
push eax  +
lea ecx [ebp-3Ch] +
call sub_101C334  +
mov [ebp-24h] edi +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 0Ah +
call sub_101CA90  +
push offset dword_1064BA8  +
lea ecx [ebp-10h] +
call sub_1015076  +
mov ebx [ebp-3Ch] +
lea eax [ebp-10h] +
push eax  +
lea eax [ebx+8] +
push eax  +
push offset dword_1064904  +
mov byte ptr [ebp-4] 0Bh +
call sub_10360F6  +
lea eax [ebp-10h] +
push eax  +
call sub_1035549  +
test al al +
jz loc_101F295  +
lea ecx [ebp-10h] +
call sub_101CC99  +
lea eax [ebp-10h] +
push eax  +
lea ecx [ebp-48h] +
call sub_101CB94  +
push dword ptr [ebp-10h]  +
cmp eax 0FFFFFFFFh +
jnz loc_101F23C  +
push offset aFoundDriverPac  +
push 1  +
call sub_10168F9  +
mov esi [ebp-24h] +
add esp 0Ch +
lea eax [ebp-10h] +
lea ecx [esi+8] +
push eax  +
call sub_1015959  +
mov ecx [ebp-18h] +
lea eax [ebp-24h] +
push eax  +
add ecx 8 +
mov [esi+20h] edi +
call sub_101ADDE  +
lea eax [ebp-54h] +
push eax  +
lea eax [ebp-10h] +
push eax  +
lea ecx [ebp-48h] +
mov dword ptr [ebp-54h] 2 +
call sub_10158FD  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx esi +
mov byte ptr [ebp-4] 9 +
call sub_101A986  +
mov byte ptr [ebp-4] 8 +
cmp ebx edi +
jz loc_101F174  +
mov ecx ebx +
call sub_101A986  +
mov [ebp-3Ch] edi +
mov esi [ebp-2Ch] +
cmp [ebp-38h] edi +
jnz loc_101F08A  +
cmp [esi+20h] edi +
jnz loc_101F191  +
cmp dword_10648E4 edi +
jnz loc_101F191  +
xor eax eax +
jmp loc_101F194  +
xor eax eax +
inc eax  +
mov ebx [ebp-18h] +
mov [ebx+20h] eax +
cmp [esi+24h] edi +
jnz loc_101F1AC  +
cmp dword_10648F4 edi +
jnz loc_101F1AC  +
xor eax eax +
inc eax  +
jmp loc_101F1AE  +
xor eax eax +
mov [ebx+24h] eax +
lea eax [ebp-18h] +
push eax  +
lea ecx [ebp-6Ch] +
call sub_101ADDE  +
mov ecx ebx +
mov byte ptr [ebp-4] 7 +
call sub_101A986  +
mov ecx esi +
mov byte ptr [ebp-4] 3 +
call sub_101A986  +
mov [ebp-2Ch] edi +
cmp [ebp-14h] edi +
jnz loc_101F052  +
mov eax dword_10648FC +
test eax eax +
jnz loc_101EF02  +
call sub_1035328  +
cmp eax 3 +
jz loc_101F204  +
cmp eax 4 +
jz loc_101F204  +
cmp eax 5 +
jnz loc_101F2DC  +
xor esi esi +
push 64h  +
call CMP_WaitNoPendingInstallEvents  +
cmp eax 102h +
jnz loc_101F2C8  +
inc esi  +
cmp esi 1 +
jnz loc_101F229  +
push offset aPnpManagerBusy  +
push esi  +
call sub_1016717  +
mov eax dword_10648FC +
test eax eax +
jz loc_101F206  +
push offset aInstallCance_0  +
jmp loc_101EF07  +
push offset aDriverPackageS  +
push 3  +
call sub_10168F9  +
mov ecx [ebp-10h] +
add esp 0Ch +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-24h] +
mov byte ptr [ebp-4] 9 +
cmp ecx edi +
jz loc_101F266  +
call sub_101A986  +
mov byte ptr [ebp-4] 8 +
cmp ebx edi +
jz loc_101F275  +
mov ecx ebx +
call sub_101A986  +
mov ecx [ebp-18h] +
mov byte ptr [ebp-4] 7 +
cmp ecx edi +
jz loc_101F285  +
call sub_101A986  +
mov byte ptr [ebp-4] 3 +
mov ecx esi +
call sub_101A986  +
jmp loc_101F3FC  +
push dword ptr [ebx+8]  +
push offset aDriverPackag_0  +
push 3  +
call sub_10168F9  +
mov ecx [ebp-10h] +
add esp 0Ch +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
mov ecx [ebp-24h] +
mov byte ptr [ebp-4] 9 +
cmp ecx edi +
jz loc_101F2C2  +
call sub_101A986  +
mov byte ptr [ebp-4] 8 +
jmp loc_101F26E  +
cmp esi edi +
jz loc_101F2DC  +
push esi  +
push offset aPnpManagerRead  +
push 1  +
call sub_10168F9  +
add esp 0Ch +
mov eax [ebp-6Ch] +
mov [ebp-14h] eax +
cmp eax edi +
jz loc_101F34F  +
push dword ptr [ebp-14h]  +
lea ecx [ebp-6Ch] +
call sub_101C296  +
push eax  +
lea ecx [ebp-1Ch] +
call sub_101C334  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-1Ch] +
push dword ptr [ebp+8]  +
mov byte ptr [ebp-4] 0Ch +
push ecx  +
mov ecx esp +
mov [ebp-4Ch] esp +
push eax  +
call sub_101C334  +
call sub_101E278  +
mov ecx dword_10648FC +
test ecx ecx +
jnz loc_101F37E  +
cmp eax edi +
jz loc_101F32B  +
mov dword_10648F8 eax +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-6Ch] +
call sub_105038C  +
mov ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 3 +
cmp ecx edi +
jz loc_101F34A  +
call sub_101A986  +
mov [ebp-1Ch] edi +
cmp [ebp-14h] edi +
jnz loc_101F2E6  +
mov eax dword_1064908 +
cmp [eax-0Ch] edi +
jz loc_101F3F3  +
lea eax [ebp-6Ch] +
push eax  +
mov ecx offset dword_1064908 +
call sub_101C8DF  +
push dword_1064908  +
test eax eax +
jz loc_101F3E4  +
push offset aCreatedUninsta  +
push 1  +
jmp loc_101F3EB  +
push offset aInstallCancell  +
push 1  +
mov dword_10648F8 eax +
call sub_1016717  +
push dword ptr [ebp-14h]  +
lea ecx [ebp-6Ch] +
call sub_101C296  +
push eax  +
lea ecx [ebp-1Ch] +
call sub_103ECA6  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-1Ch] +
push dword ptr [ebp+8]  +
push ecx  +
mov ecx esp +
mov [ebp-4Ch] esp +
push eax  +
call sub_101C334  +
call sub_101C76B  +
or dword_10648F8 eax +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-6Ch] +
call sub_101C26D  +
cmp [ebp-14h] edi +
jnz loc_101F38F  +
mov ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 3 +
cmp ecx edi +
jz loc_101F3FC  +
jmp loc_101F28B  +
push offset aFailedToCrea_2  +
push 3  +
call sub_10168F9  +
add esp 0Ch +
lea eax [ebp-6Ch] +
push eax  +
call sub_101D464  +
cmp dword_10648F8 edi +
jz loc_101F410  +
push offset aMachineWillHav  +
push 1  +
call sub_1016717  +
mov esi dword_10648F8 +
lea ecx [ebp-84h] +
call loc_1014AB9  +
lea ecx [ebp-48h] +
call sub_101550F  +
lea ecx [ebp-6Ch] +
call loc_101C2DA  +
lea ecx [ebp-9Ch] +
call loc_101C2DA  +
mov eax esi +
call sub_1021FA5  +
retn 8  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
push 54h  +
lea eax [esi+2Ch] +
push edi  +
push eax  +
mov [esi+4] edi +
mov [esi] edi +
call sub_10219E0  +
add esp 0Ch +
mov [esi+1Ch] edi +
mov [esi+20h] edi +
mov [esi+24h] edi +
pop edi  +
mov dword ptr [esi+28h] 1 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+38h] +
push edi  +
mov edi ds:GlobalFree +
test eax eax +
jz loc_101F497  +
push eax  +
call edi  +
mov eax [esi+34h] +
test eax eax +
jz loc_101F4A1  +
push eax  +
call edi  +
mov esi [esi] +
test esi esi +
jz loc_101F4AE  +
push esi  +
call ds:DeleteObject  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
or dword ptr [esi+78h] 0FFFFFFFFh +
lea eax [esi+2Ch] +
mov [esi+4] ecx +
mov [esi+30h] ecx +
xor ecx ecx +
push eax  +
mov dword ptr [eax] 54h +
mov [esi+34h] ecx +
mov [esi+38h] ecx +
mov [esi+3Ch] ecx +
mov dword ptr [esi+40h] 118h +
mov [esi+44h] ecx +
mov [esi+48h] ecx +
mov [esi+64h] ecx +
mov dword ptr [esi+60h] 1 +
mov [esi+7Ch] ecx +
call ds:PrintDlgExW  +
test eax eax +
jge loc_101F50B  +
xor eax eax +
jmp loc_101F56A  +
cmp dword ptr [esi+7Ch] 1 +
jnz loc_101F507  +
mov eax [esi+3Ch] +
push edi  +
lea ecx [ebp+var_3C] +
push ecx  +
push eax  +
mov [esi] eax +
call ds:GetTextMetricsW  +
mov eax [ebp+var_3C.tmExternalLeading] +
mov ecx [ebp+var_3C.tmHeight] +
mov edi ds:GetDeviceCaps +
add eax ecx +
push 58h  +
push dword ptr [esi]  +
mov [esi+0Ch] eax +
mov eax [ebp+var_3C.tmAveCharWidth] +
mov [esi+8] eax +
call edi  +
imul eax eax +
cdq   +
and edx 3 +
add eax edx +
push 0Ah  +
push dword ptr [esi]  +
sar eax 2 +
mov [esi+10h] eax +
call edi  +
xor edx edx +
div  dword ptr [esi+0Ch] +
mov dword ptr [esi+14h] 4 +
pop edi  +
sub eax 3 +
mov [esi+18h] eax +
xor eax eax +
inc eax  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
and dword ptr [esi+28h] 0 +
test eax eax +
jz loc_101F58D  +
push eax  +
call ds:EndDoc  +
mov [esi+28h] eax +
mov eax [esi+28h] +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_8] +
mov edx 7FFFFFFFh +
sub edx eax +
cmp edx ecx +
jge loc_101F5B4  +
mov eax 80070057h +
jmp loc_101F5BD  +
add eax ecx +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
mov esi ecx +
mov eax [esi] +
xor ecx ecx +
mov [esi+28h] ecx +
cmp eax ecx +
jz loc_101F602  +
mov edx [ebp+arg_0] +
mov edx [edx] +
mov [ebp+var_14.lpszOutput] ecx +
mov [ebp+var_14.lpszDatatype] ecx +
mov [ebp+var_14.fwType] ecx +
lea ecx [ebp+var_14] +
push ecx  +
push eax  +
mov [ebp+var_14.cbSize] 14h +
mov [ebp+var_14.lpszDocName] edx +
call ds:StartDocW  +
mov [esi+28h] eax +
mov eax [esi+28h] +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
lea eax [ebp+arg_4] +
push [ebp+arg_0]  +
push eax  +
call sub_101F597  +
test eax eax +
jge loc_101F62D  +
push eax  +
call loc_1014415  +
mov eax [ebp+arg_4] +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
sub eax 10h +
cmp dword ptr [eax+0Ch] 1 +
jle loc_101F656  +
push dword ptr [eax+4]  +
call sub_1014955  +
mov eax [esi] +
sub eax 10h +
dec dword ptr [eax+0Ch]  +
jnz loc_101F65F  +
or dword ptr [eax+0Ch] 0FFFFFFFFh +
mov eax [esi] +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp [ebp+arg_0] 0 +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
mov [ebp+var_4] esi +
jge loc_101F680  +
and [ebp+arg_0] 0 +
mov ebx [ebp+arg_4] +
test ebx ebx +
jge loc_101F689  +
xor ebx ebx +
push [ebp+arg_0]  +
mov eax [esi] +
mov edi [eax-0Ch] +
push ebx  +
call sub_101F60F  +
cmp eax edi +
jle loc_101F6A0  +
mov ebx edi +
sub ebx [ebp+arg_0] +
test ebx ebx +
jle loc_101F6DC  +
mov ecx [ebp+var_4] +
mov esi edi +
sub esi [ebp+arg_0] +
sub esi ebx +
inc esi  +
call sub_1015002  +
mov ecx [ebp+arg_0] +
add esi esi +
lea edx [ecx+ebx] +
push esi  +
lea edx [eax+edx*2] +
push edx  +
lea eax [eax+ecx*2] +
push esi  +
push eax  +
call sub_101A8DA  +
mov ecx [ebp+var_4] +
add esp 10h +
sub edi ebx +
push edi  +
call loc_10149C4  +
mov esi [ebp+var_4] +
mov eax [esi] +
mov eax [eax-0Ch] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
call sub_1021EB9  +
mov esi ecx +
mov eax [esi] +
xor ebx ebx +
cmp eax ebx +
jnz loc_101F70A  +
xor eax eax +
jmp loc_101F7B3  +
mov edi ds:GetDeviceCaps +
push 0Ah  +
push eax  +
mov [ebp-18h] ebx +
mov [ebp-1Ch] ebx +
call edi  +
push 8  +
push dword ptr [esi]  +
mov [ebp-10h] eax +
call edi  +
push dword ptr [ebp+8]  +
lea ecx [ebp+8] +
mov [ebp-14h] eax +
call sub_10150A5  +
mov [ebp-4] ebx +
jmp loc_101F798  +
push dword ptr [esi]  +
call ds:StartPage  +
mov [esi+28h] eax +
test eax eax +
jle loc_101F7A6  +
xor eax eax +
lea edi [ebp-30h] +
stos   +
stos   +
stos   +
stos   +
stos   +
lea eax [ebp-30h] +
push eax  +
push 2850h  +
lea eax [ebp-1Ch] +
mov dword ptr [ebp-30h] 14h +
mov ebx [ebx-0Ch] +
push eax  +
push ebx  +
lea ecx [ebp+8] +
call sub_101F639  +
push eax  +
push dword ptr [esi]  +
call ds:DrawTextExW  +
push dword ptr [esi]  +
mov [esi+28h] eax +
call ds:EndPage  +
mov [esi+28h] eax +
test eax eax +
jle loc_101F7A3  +
push dword ptr [ebp-20h]  +
lea ecx [ebp+8] +
push 0  +
call sub_101F668  +
mov ebx [ebp+8] +
cmp dword ptr [ebx-0Ch] 0 +
jnz loc_101F737  +
jmp loc_101F7A6  +
mov ebx [ebp+8] +
mov esi [esi+28h] +
lea ecx [ebx-10h] +
call sub_10147CD  +
mov eax esi +
call sub_1021FA5  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
push esi  +
mov esi ecx +
jnz loc_101F7D8  +
and dword ptr [esi] 0 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push dword ptr [ebp+8]  +
call ds:SysAllocString  +
mov [esi] eax +
test eax eax +
jnz loc_101F7D1  +
push 8007000Eh  +
call loc_1014415  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push esi  +
call ds:VariantClear  +
push 8  +
pop eax  +
push [ebp+arg_0]  +
mov [esi] ax +
call ds:SysAllocString  +
mov [esi+8] eax +
test eax eax +
jnz loc_101F844  +
cmp [ebp+arg_0] eax +
jz loc_101F844  +
push 0Ah  +
pop eax  +
mov [esi] ax +
mov eax 8007000Eh +
push eax  +
mov [esi+8] eax +
call loc_1014415  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_101AB52  +
push esi  +
push offset riid  +
push 17h  +
push 0  +
push offset rclsid  +
call ds:CoCreateInstance  +
test eax eax +
jz loc_101F877  +
xor al al +
pop esi  +
retn   +
mov eax [esi] +
mov ecx [eax] +
push 0  +
push eax  +
call dword ptr [ecx+120h]  +
mov eax [esi] +
mov ecx [eax] +
push 0  +
push eax  +
call dword ptr [ecx+118h]  +
mov esi [esi] +
mov eax [esi] +
push 0  +
push esi  +
call dword ptr [eax+0FCh]  +
mov al 1 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
lea ecx [esi+8] +
call sub_101AB33  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
xor eax eax +
mov [esi] ax +
call sub_101F806  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1021EB9  +
mov ebx ecx +
xor eax eax +
mov [ebp-10h] eax +
mov [ebp-4] eax +
mov [ebp-14h] eax +
mov eax [ebp+8] +
push dword ptr [eax]  +
lea ecx [ebp-24h] +
call sub_101F8C6  +
mov ecx [ebx] +
mov edx [ecx] +
lea esi [ebp-14h] +
push esi  +
sub esp 10h +
mov edi esp +
mov esi eax +
movs   +
movs   +
movs   +
push ecx  +
mov byte ptr [ebp-4] 1 +
movs   +
call dword ptr [edx+0E8h]  +
test eax eax +
lea eax [ebp-24h] +
push eax  +
setl byte ptr [ebp+0Bh]  +
mov byte ptr [ebp-4] 0 +
call ds:VariantClear  +
cmp byte ptr [ebp+0Bh] 0 +
jz loc_101F95A  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_101F956  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor eax eax +
jmp loc_101F994  +
cmp word ptr [ebp-14h] 0 +
jz loc_101F945  +
mov eax [ebx] +
mov ecx [eax] +
lea edx [ebp-10h] +
push edx  +
push eax  +
call dword ptr [ecx+0B4h]  +
test eax eax +
jl loc_101F945  +
lea eax [ebp-10h] +
lea ecx [ebx+4] +
push eax  +
call sub_101AA95  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_101F991  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor eax eax +
inc eax  +
call sub_1021FA5  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101F850  +
test al al +
jnz loc_101F9B6  +
xor eax eax +
jmp loc_101F9C6  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_101F8E7  +
neg eax  +
sbb eax eax +
neg eax  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
call sub_101512A  +
mov esi [edi+10h] +
mov ebx [esi] +
test esi esi +
jz loc_101F9F2  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_101F8A7  +
mov eax [ebp+arg_4] +
mov [edi+10h] ebx +
mov [esi+4] eax +
mov eax [ebp+arg_8] +
mov [esi] eax +
inc dword ptr [edi+8]  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0  +
mov esi ecx +
push dword ptr [esi+4]  +
push [ebp+arg_0]  +
call sub_101F9D0  +
mov ecx [esi+4] +
test ecx ecx +
jz loc_101FA31  +
mov [ecx] eax +
jmp loc_101FA33  +
mov [esi] eax +
mov [esi+4] eax +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1021EB9  +
mov eax [ebp+0Ch] +
xor ebx ebx +
cmp eax ebx +
jz loc_101FB2E  +
mov [ebp-10h] ebx +
mov ecx [eax] +
lea edx [ebp-10h] +
push edx  +
push eax  +
mov [ebp-4] ebx +
call dword ptr [ecx+30h]  +
mov eax [ebp-10h] +
lea edx [ebp-1Ch] +
push edx  +
mov [ebp-1Ch] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+20h]  +
xor esi esi +
cmp [ebp-1Ch] ebx +
jle loc_101FB1D  +
mov [ebp+0Ch] ebx +
mov eax [ebp-10h] +
mov ecx [eax] +
lea edx [ebp+0Ch] +
push edx  +
push esi  +
push eax  +
mov byte ptr [ebp-4] 1 +
call dword ptr [ecx+1Ch]  +
mov eax [ebp+0Ch] +
lea edx [ebp-20h] +
push edx  +
mov [ebp-20h] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+28h]  +
cmp dword ptr [ebp-20h] 1 +
jnz loc_101FB03  +
mov [ebp-18h] ebx +
mov eax [ebp+0Ch] +
mov ecx [eax] +
lea edx [ebp-18h] +
push edx  +
push offset dword_1005748  +
push eax  +
mov byte ptr [ebp-4] 2 +
call dword ptr [ecx]  +
lea eax [ebp-18h] +
push eax  +
lea ecx [ebp-14h] +
mov [ebp-14h] ebx +
call sub_101AA95  +
mov ecx [ebp+8] +
lea eax [ebp-14h] +
push eax  +
mov byte ptr [ebp-4] 3 +
call sub_101FA11  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 2 +
call sub_101AB14  +
mov eax [ebp-18h] +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_101FB03  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+0Ch] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_101FB13  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc esi  +
cmp esi [ebp-1Ch] +
jl loc_101FA84  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_101FB2E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
call sub_1021FA5  +
retn 8  +
***
call sub_1021EB9  +
mov esi ecx +
xor edi edi +
mov [ebp-10h] edi +
mov [ebp-4] edi +
cmp [esi] edi +
jnz loc_101FB5C  +
xor eax eax +
jmp loc_101FC1D  +
mov eax [ebp+8] +
push dword ptr [eax]  +
lea ecx [ebp+8] +
call loc_101F7C0  +
mov eax [esi] +
mov ecx [eax] +
lea edx [ebp-10h] +
push edx  +
push dword ptr [ebp+8]  +
mov byte ptr [ebp-4] 1 +
push eax  +
call dword ptr [ecx+0BCh]  +
cmp [ebp-10h] edi +
jnz loc_101FBA0  +
push dword ptr [ebp+8]  +
call ds:SysFreeString  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax edi +
jz loc_101FB55  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_101FB55  +
lea eax [ebp-24h] +
push eax  +
call ds:VariantInit  +
mov eax [ebp-10h] +
mov ecx [eax] +
lea edx [ebp-24h] +
push edx  +
push eax  +
mov byte ptr [ebp-4] 2 +
call dword ptr [ecx+0B0h]  +
cmp word ptr [ebp-24h] 8 +
jz loc_101FBD3  +
push 8  +
push edi  +
lea eax [ebp-24h] +
push eax  +
push eax  +
call ds:VariantChangeType  +
push dword ptr [ebp-1Ch]  +
lea ecx [ebp-14h] +
call sub_10161A7  +
mov ecx [ebp+0Ch] +
push eax  +
mov byte ptr [ebp-4] 3 +
call sub_1015AAF  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_10147CD  +
lea eax [ebp-24h] +
push eax  +
call ds:VariantClear  +
push dword ptr [ebp+8]  +
call ds:SysFreeString  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax edi +
jz loc_101FC1A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor eax eax +
inc eax  +
call sub_1021FA5  +
retn 8  +
***
call sub_1021EB9  +
xor edx edx +
mov [ebp-10h] edx +
mov eax [ecx] +
cmp eax edx +
jnz loc_101FC50  +
mov ecx [ebp+8] +
push offset word_10022EC  +
call sub_10161A7  +
jmp loc_101FC74  +
mov [ebp-10h] edx +
mov ecx [eax] +
mov [ebp-4] edx +
lea edx [ebp-10h] +
push edx  +
push eax  +
call dword ptr [ecx+68h]  +
push dword ptr [ebp-10h]  +
mov ecx [ebp+8] +
call sub_10161A7  +
push dword ptr [ebp-10h]  +
call ds:SysFreeString  +
mov eax [ebp+8] +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EB9  +
xor edx edx +
mov [ebp-10h] edx +
mov eax [ecx] +
cmp eax edx +
jnz loc_101FCAA  +
mov ecx [ebp+8] +
push offset word_10022EC  +
call sub_10161A7  +
jmp loc_101FCD1  +
mov [ebp-10h] edx +
mov ecx [eax] +
mov [ebp-4] edx +
lea edx [ebp-10h] +
push edx  +
push eax  +
call dword ptr [ecx+0ACh]  +
push dword ptr [ebp-10h]  +
mov ecx [ebp+8] +
call sub_10161A7  +
push dword ptr [ebp-10h]  +
call ds:SysFreeString  +
mov eax [ebp+8] +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EB9  +
mov esi ecx +
mov ebx [esi] +
test ebx ebx +
jnz loc_101FCFC  +
xor eax eax +
jmp loc_101FD9B  +
push 0Ah  +
lea ecx [ebp-30h] +
call sub_101C247  +
and dword ptr [ebp-4] 0 +
push ebx  +
lea eax [ebp-30h] +
push eax  +
mov ecx esi +
call sub_101FA40  +
and dword ptr [ebp-10h] 0 +
mov eax [ebp-30h] +
mov byte ptr [ebp-4] 1 +
mov [ebp-14h] eax +
test eax eax +
jz loc_101FD84  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-30h] +
call sub_105038C  +
push eax  +
lea ecx [ebp-10h] +
call sub_101AA95  +
lea eax [ebp-18h] +
push eax  +
lea ecx [ebp-10h] +
call sub_101FC84  +
push dword ptr [eax]  +
mov ecx [ebp+0Ch] +
mov byte ptr [ebp-4] 2 +
call sub_101492B  +
mov ecx [ebp-18h] +
mov ebx eax +
neg ebx  +
sbb bl bl +
add ecx 0FFFFFFF0h +
inc bl  +
mov byte ptr [ebp-4] 1 +
call sub_10147CD  +
test bl bl +
jz loc_101FD7E  +
mov ecx [ebp+8] +
lea eax [ebp-10h] +
push eax  +
call sub_101FA11  +
cmp dword ptr [ebp-14h] 0 +
jnz loc_101FD28  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 0 +
call sub_101AB14  +
lea ecx [ebp-30h] +
call loc_101AA40  +
xor eax eax +
inc eax  +
call sub_1021FA5  +
retn 8  +
***
mov eax ecx +
or dword ptr [eax] 0FFFFFFFFh +
and dword ptr [eax+4] 0 +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
mov edi ds:CloseHandle +
cmp eax 0FFFFFFFFh +
jz loc_101FDD0  +
push eax  +
call edi  +
or dword ptr [esi] 0FFFFFFFFh +
mov eax [esi+4] +
test eax eax +
jz loc_101FDDE  +
push eax  +
call edi  +
and dword ptr [esi+4] 0 +
pop edi  +
pop esi  +
retn   +
***
call sub_1022E04  +
cmp [ebp-1Ch] edi +
jz locret_101FE8C  +
push dword ptr [esi+4]  +
call ds:ReleaseMutex  +
retn   +
***
call sub_1022E04  +
cmp [ebp-20h] ebx +
jz locret_101FFA9  +
push dword ptr [edi+4]  +
call ds:ReleaseMutex  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
cmp lpBuffer 0 +
jz loc_1020055  +
lea eax [ebp+ConsoleScreenBufferInfo] +
push eax  +
push hConsoleOutput  +
call ds:GetConsoleScreenBufferInfo  +
test eax eax +
jz loc_1020042  +
mov cx [ebp+ConsoleScreenBufferInfo.dwCursorPosition.Y] +
mov dx dwBufferSize.Y +
xor eax eax +
add dx cx +
mov [ebp+var_A] cx +
lea ecx [ebp-0Ch] +
push ecx  +
mov [ebp+dwCursorPosition.X] ax +
mov [ebp+dwCursorPosition.Y] ax +
push dword ptr [ebp+dwCursorPosition.X]  +
mov [ebp+var_C] ax +
mov eax dword ptr dwBufferSize.X +
push eax  +
push lpBuffer  +
mov word ptr [ebp+var_8] ax +
push hConsoleOutput  +
mov word ptr [ebp+var_8+2] dx +
call ds:WriteConsoleOutputW  +
test eax eax +
jz loc_1020042  +
mov eax [ebp+var_8] +
inc eax  +
mov [ebp+dwCursorPosition.X] ax +
mov ax word ptr [ebp+var_8+2] +
mov [ebp+dwCursorPosition.Y] ax +
push dword ptr [ebp+dwCursorPosition.X]  +
push hConsoleOutput  +
call ds:SetConsoleCursorPosition  +
push lpBuffer  +
call sub_10213A1  +
and lpBuffer 0 +
pop ecx  +
push dwMode  +
push hConsoleOutput  +
call ds:SetConsoleMode  +
or hConsoleOutput 0FFFFFFFFh +
call ds:FreeConsole  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
ja loc_1020099  +
mov eax [ebp+arg_0] +
jb loc_1020090  +
cmp eax 0FFFFFFFFh +
ja loc_1020099  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_10200A4  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push ebx  +
xor eax eax +
xor ebx ebx +
mov [ebp+NumberOfCharsWritten] ebx +
mov [ebp+dwCursorPosition.X] ax +
mov [ebp+dwCursorPosition.Y] ax +
call sub_1035328  +
cmp eax 3 +
jz loc_1020234  +
push edi  +
push offset LibFileName  +
call ds:LoadLibraryW  +
mov edi eax +
cmp edi ebx +
jz loc_1020233  +
push offset ProcName  +
push edi  +
call ds:GetProcAddress  +
cmp eax ebx +
jz loc_102022C  +
push 0FFFFFFFFh  +
call eax  +
test eax eax +
jz loc_102022C  +
push esi  +
push 0FFFFFFF5h  +
call ds:GetStdHandle  +
mov hConsoleOutput eax +
cmp eax 0FFFFFFFFh +
jz loc_1020225  +
push offset dwMode  +
push eax  +
call ds:GetConsoleMode  +
test eax eax +
jz loc_1020225  +
mov eax dwMode +
or eax 3 +
push eax  +
push hConsoleOutput  +
call ds:SetConsoleMode  +
test eax eax +
jz loc_1020225  +
lea eax [ebp+ConsoleScreenBufferInfo] +
push eax  +
push hConsoleOutput  +
call ds:GetConsoleScreenBufferInfo  +
test eax eax +
jz loc_1020225  +
mov si [ebp+ConsoleScreenBufferInfo.dwCursorPosition.X] +
xor eax eax +
inc eax  +
mov dwBufferSize.Y ax +
push 4  +
pop ecx  +
movsx eax si +
mov dword ptr [ebp+dwBufferCoord.X] eax +
mul  ecx +
lea ecx [ebp+dwBufferCoord] +
push ecx  +
push edx  +
push eax  +
mov dwBufferSize.X si +
call sub_102007B  +
test eax eax +
jnz loc_1020225  +
push dword ptr [ebp+dwBufferCoord.X]  +
call sub_1021488  +
pop ecx  +
mov lpBuffer eax +
test eax eax +
jz loc_10201E5  +
xor ecx ecx +
mov [ebp+dwBufferCoord.X] cx +
mov [ebp+dwBufferCoord.Y] cx +
mov [ebp+ReadRegion.Left] cx +
mov ecx dword ptr [ebp+ConsoleScreenBufferInfo.dwCursorPosition.Y] +
mov [ebp+ReadRegion.Top] cx +
inc ecx  +
mov [ebp+ReadRegion.Bottom] cx +
lea ecx [ebp+ReadRegion] +
push ecx  +
push dword ptr [ebp+dwBufferCoord.X]  +
mov [ebp+ReadRegion.Right] si +
push dword ptr dwBufferSize.X  +
push eax  +
push hConsoleOutput  +
call ds:ReadConsoleOutputW  +
xor eax eax +
mov [ebp+dwCursorPosition.X] ax +
mov ax [ebp+ConsoleScreenBufferInfo.dwCursorPosition.Y] +
mov [ebp+dwCursorPosition.Y] ax +
lea eax [ebp+NumberOfCharsWritten] +
push eax  +
push dword ptr [ebp+dwCursorPosition.X]  +
movsx eax [ebp+ConsoleScreenBufferInfo.dwCursorPosition.X] +
push eax  +
push 20h  +
push hConsoleOutput  +
call ds:FillConsoleOutputCharacterW  +
test eax eax +
jz loc_1020225  +
push dword ptr [ebp+dwCursorPosition.X]  +
push hConsoleOutput  +
call ds:SetConsoleCursorPosition  +
xor ebx ebx +
inc ebx  +
jmp loc_102022B  +
call ds:FreeConsole  +
pop esi  +
push edi  +
call ds:FreeLibrary  +
pop edi  +
mov eax ebx +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi hConsoleOutput +
cmp esi 0FFFFFFFFh +
jnz loc_1020255  +
xor eax eax +
jmp loc_1020297  +
push edi  +
lea eax [ebp+nNumberOfCharsToWrite] +
push eax  +
push 0FDE8h  +
push [ebp+lpBuffer]  +
xor edi edi +
mov [ebp+NumberOfCharsWritten] edi +
mov [ebp+nNumberOfCharsToWrite] edi +
call sub_1014C35  +
test eax eax +
jl loc_102028A  +
push edi  +
mov edi [ebp+nNumberOfCharsToWrite] +
lea eax [ebp+NumberOfCharsWritten] +
push eax  +
push edi  +
push [ebp+lpBuffer]  +
push esi  +
call ds:WriteConsoleW  +
test eax eax +
jnz loc_102028E  +
xor eax eax +
jmp loc_1020296  +
xor eax eax +
cmp edi [ebp+NumberOfCharsWritten] +
setz al  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov eax ecx +
xor ecx ecx +
mov [eax] ecx +
mov [eax+4] ecx +
mov [eax+8] ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi] edi +
jnz loc_10202D8  +
push offset aRt  +
push [ebp+arg_0]  +
call sub_1022DE6  +
pop ecx  +
pop ecx  +
mov [esi] eax +
cmp eax edi +
jz loc_10202D8  +
inc edi  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi] +
xor ebx ebx +
mov [ebp+var_8] ebx +
mov [ebp+var_C] ebx +
cmp eax ebx +
jnz loc_1020306  +
xor eax eax +
jmp loc_10203DB  +
push edi  +
mov edi [esi+4] +
push eax  +
jmp loc_1020397  +
push dword ptr [esi]  +
lea eax [ebp-1] +
push 1  +
push 1  +
push eax  +
call sub_10232DE  +
add esp 10h +
cmp eax 1 +
jnz loc_10203C2  +
cmp [ebp+var_1] 2Ch +
jz loc_10203A5  +
cmp [ebp+var_1] 0Ah +
jz loc_10203A5  +
inc [ebp+var_8]  +
mov eax [esi+8] +
cmp [ebp+var_8] eax +
jbe loc_102037E  +
mov ecx [esi+4] +
test ecx ecx +
jnz loc_102035C  +
push 106h  +
mov dword ptr [esi+8] 104h +
call sub_1021488  +
jmp loc_102036F  +
add eax 104h +
mov [esi+8] eax +
add eax 2 +
push eax  +
push ecx  +
call sub_1021FE6  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10203AE  +
mov ecx [ebp+var_8] +
mov [esi+4] eax +
lea edi [eax+ecx-1] +
mov al [ebp+var_1] +
mov [edi] al +
cmp [ebp+var_1] 20h +
jz loc_1020394  +
cmp [ebp+var_C] 0 +
mov ebx edi +
jnz loc_1020394  +
mov [ebp+var_C] edi +
push dword ptr [esi]  +
inc edi  +
call sub_1023001  +
pop ecx  +
test eax eax +
jz loc_1020310  +
cmp dword ptr [esi] 0 +
jnz loc_10203CF  +
xor eax eax +
jmp loc_10203DA  +
mov eax [esi+4] +
test eax eax +
jz loc_10203AA  +
push eax  +
call sub_10213A1  +
and dword ptr [esi+4] 0 +
pop ecx  +
jmp loc_10203AA  +
push dword ptr [esi]  +
call sub_1022BF1  +
and dword ptr [esi] 0 +
pop ecx  +
jmp loc_10203AA  +
mov eax [ebp+var_C] +
inc ebx  +
mov byte ptr [ebx] 0 +
mov byte ptr [ebx+1] 0 +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_10203F9  +
push eax  +
call sub_1022BF1  +
and dword ptr [esi] 0 +
pop ecx  +
mov eax [esi+4] +
test eax eax +
jz loc_102040B  +
push eax  +
call sub_10213A1  +
and dword ptr [esi+4] 0 +
pop ecx  +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
cmp dword ptr [ecx] 0 +
jz locret_1020420  +
jmp sub_10203E4  +
retn   +
***
mov eax dword_1064920 +
test eax eax +
jz loc_102043C  +
push eax  +
call sub_1034532  +
and dword_1064920 0 +
and dword_1064924 0 +
xor eax eax +
and dword_1064B30 eax +
mov word_1064928 ax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx dword_1064920 +
xor eax eax +
push esi  +
mov esi ds:LoadBitmapW +
test ecx ecx +
jz loc_102047B  +
movzx eax [ebp+arg_0] +
push eax  +
push ecx  +
call esi  +
test eax eax +
jnz loc_102048D  +
mov ecx dword_1064924 +
test ecx ecx +
jz loc_102048D  +
movzx eax [ebp+arg_0] +
push eax  +
push ecx  +
call esi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx dword_1064920 +
xor eax eax +
push esi  +
mov esi ds:LoadIconW +
test ecx ecx +
jz loc_10204BB  +
movzx eax [ebp+arg_0] +
push eax  +
push ecx  +
call esi  +
test eax eax +
jnz loc_10204CD  +
mov ecx dword_1064924 +
test ecx ecx +
jz loc_10204CD  +
movzx eax [ebp+arg_0] +
push eax  +
push ecx  +
call esi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
xor esi esi +
call ds:GetThreadLocale  +
movzx eax ax +
sub eax 401h +
jz loc_10204F1  +
sub eax 0Ch +
jnz loc_10204F4  +
xor esi esi +
inc esi  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 48h +
push ebx  +
push esi  +
mov esi ds:CreateCompatibleDC +
xor ebx ebx +
push edi  +
push ebx  +
mov [ebp+var_4] ebx +
mov [ebp+var_10] ebx +
call esi  +
mov edi eax +
mov [ebp+hdc] edi +
cmp edi ebx +
jz loc_102054A  +
push ebx  +
call esi  +
mov [ebp+var_4] eax +
cmp eax ebx +
jz loc_1020540  +
mov esi ds:SetLayout +
push 1  +
push edi  +
call esi  +
push 1  +
push [ebp+var_4]  +
call esi  +
jmp loc_102054A  +
push edi  +
call ds:DeleteDC  +
mov [ebp+hdc] ebx +
push ebx  +
call ds:GetDC  +
mov [ebp+hDC] eax +
cmp eax ebx +
jz loc_1020666  +
cmp [ebp+hdc] ebx +
jz loc_102065C  +
cmp [ebp+var_4] ebx +
jz loc_102065C  +
cmp [ebp+hIcon] ebx +
jz loc_102065C  +
lea eax [ebp+piconinfo] +
push eax  +
push [ebp+hIcon]  +
call ds:GetIconInfo  +
test eax eax +
jz loc_102065C  +
lea eax [ebp+var_48] +
push eax  +
push 18h  +
push [ebp+piconinfo.hbmColor]  +
call ds:GetObjectW  +
test eax eax +
jz loc_102065C  +
push [ebp+piconinfo.hbmMask]  +
mov esi ds:DeleteObject +
call esi  +
push [ebp+piconinfo.hbmColor]  +
call esi  +
push [ebp+cyWidth]  +
mov [ebp+piconinfo.hbmColor] ebx +
push [ebp+cxWidth]  +
mov [ebp+piconinfo.hbmMask] ebx +
push [ebp+hDC]  +
call ds:CreateCompatibleBitmap  +
push ebx  +
push 1  +
push 1  +
push [ebp+cyWidth]  +
mov [ebp+var_10] eax +
push [ebp+cxWidth]  +
call ds:CreateBitmap  +
push [ebp+var_10]  +
mov edi ds:SelectObject +
push [ebp+hdc]  +
mov [ebp+var_C] eax +
call edi  +
push [ebp+var_C]  +
mov [ebp+var_18] eax +
push [ebp+var_4]  +
call edi  +
push 2  +
push ebx  +
push ebx  +
push [ebp+cyWidth]  +
mov [ebp+var_1C] eax +
push [ebp+cxWidth]  +
push [ebp+hIcon]  +
push ebx  +
push ebx  +
push [ebp+hdc]  +
call ds:DrawIconEx  +
push 1  +
push ebx  +
push ebx  +
push [ebp+cyWidth]  +
push [ebp+cxWidth]  +
push [ebp+hIcon]  +
push ebx  +
push ebx  +
push [ebp+var_4]  +
call ds:DrawIconEx  +
push [ebp+var_18]  +
push [ebp+hdc]  +
call edi  +
push [ebp+var_1C]  +
push [ebp+var_4]  +
call edi  +
mov eax [ebp+var_C] +
mov edi [ebp+var_10] +
mov [ebp+piconinfo.hbmMask] eax +
lea eax [ebp+piconinfo] +
push eax  +
mov [ebp+piconinfo.hbmColor] edi +
call ds:CreateIconIndirect  +
push edi  +
mov [ebp+var_10] eax +
call esi  +
push [ebp+var_C]  +
call esi  +
push [ebp+hDC]  +
push ebx  +
call ds:ReleaseDC  +
cmp [ebp+hdc] ebx +
jz loc_1020674  +
push [ebp+hdc]  +
call ds:DeleteDC  +
cmp [ebp+var_4] ebx +
pop edi  +
pop esi  +
pop ebx  +
jz loc_1020685  +
push [ebp+var_4]  +
call ds:DeleteDC  +
mov eax [ebp+var_10] +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_1064920 +
push esi  +
mov esi ds:FindResourceW +
push edi  +
mov edi ds:LoadResource +
test eax eax +
jz loc_10206C8  +
movzx ecx [ebp+arg_0] +
push 5  +
push ecx  +
push eax  +
call esi  +
test eax eax +
jz loc_10206C8  +
push eax  +
push dword_1064920  +
call edi  +
test eax eax +
jnz loc_10206EC  +
mov eax dword_1064924 +
test eax eax +
jz loc_10206F5  +
movzx ecx [ebp+arg_0] +
push 5  +
push ecx  +
push eax  +
call esi  +
test eax eax +
jz loc_10206F5  +
push eax  +
push dword_1064924  +
call edi  +
test eax eax +
jz loc_10206F5  +
push eax  +
call ds:LockResource  +
jmp loc_10206F7  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_10] +
mov cx [eax] +
cmp cx [ebp+arg_C] +
jnz loc_102071C  +
xor ecx ecx +
mov [eax] cx +
xor eax eax +
jmp loc_102071F  +
xor eax eax +
inc eax  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_1064924 0 +
jnz loc_102073E  +
xor eax eax +
inc eax  +
jmp loc_1020835  +
push ebx  +
push esi  +
mov esi [ebp+lParam] +
movzx ebx si +
push 1  +
push ebx  +
call ds:IsValidLocale  +
test eax eax +
jnz loc_102075B  +
push 32h  +
pop eax  +
jmp loc_1020833  +
test byte ptr dword_1064B30 1 +
jz loc_10207A5  +
movzx eax si +
mov [ebp+lParam] eax +
lea eax [ebp+lParam] +
push eax  +
push offset sub_1020702  +
push [ebp+lpName]  +
push [ebp+lpType]  +
push dword_1064924  +
call ds:EnumResourceLanguagesW  +
xor eax eax +
cmp ax word ptr [ebp+lParam] +
jnz loc_10207B9  +
push ebx  +
call ds:SetThreadLocale  +
mov esi eax +
neg esi  +
sbb esi esi +
and esi 0FFFFFFCEh +
add esi 32h +
jmp loc_1020831  +
call sub_1035328  +
cmp eax 3 +
jz loc_10207BE  +
cmp eax 4 +
jz loc_10207BE  +
cmp eax 5 +
jz loc_10207BE  +
push 32h  +
pop esi  +
jmp loc_1020831  +
mov eax dword_1064920 +
test eax eax +
jz loc_10207D4  +
push eax  +
call sub_1034532  +
and dword_1064920 0 +
push edi  +
push esi  +
push 8  +
mov edi offset word_1064928 +
push edi  +
call sub_10346BE  +
mov dword_1064920 eax +
test eax eax +
jz loc_10207EF  +
push ebx  +
jmp loc_1020805  +
test byte ptr dword_1064B30 2 +
jz loc_1020813  +
mov eax 409h +
mov ecx eax +
cmp cx si +
jnz loc_1020813  +
push eax  +
call ds:SetThreadLocale  +
test eax eax +
jz loc_1020813  +
xor esi esi +
jmp loc_1020830  +
push 32h  +
pop esi  +
push dword_1064920  +
call sub_1034532  +
push 0  +
push 8  +
push edi  +
call sub_10346BE  +
mov dword_1064920 eax +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_1064920 0 +
push ebx  +
push esi  +
jz loc_1020855  +
xor eax eax +
jmp loc_10208D6  +
cmp [ebp+arg_0] 0 +
push edi  +
jz loc_10208D2  +
mov edi [ebp+arg_4] +
test edi edi +
jz loc_10208D2  +
mov ebx [ebp+arg_8] +
test ebx 0FFFFFFFCh +
jnz loc_10208D2  +
mov [ebp+arg_4] ebx +
and [ebp+arg_4] 1 +
jz loc_102087C  +
test bl 2 +
jnz loc_10208D2  +
push [ebp+arg_0]  +
mov esi offset word_1064928 +
push 104h  +
push esi  +
call sub_1014BA1  +
test eax eax +
jge loc_1020897  +
push 7Bh  +
jmp loc_10208D4  +
mov dword_1064924 edi +
xor edi edi +
mov dword_1064B30 ebx +
mov dword_1064920 edi +
cmp [ebp+arg_4] edi +
jnz loc_10208C2  +
push edi  +
push 8  +
push esi  +
call sub_10346BE  +
mov dword_1064920 eax +
cmp eax edi +
jz loc_10208C6  +
xor eax eax +
jmp loc_10208D5  +
call sub_1020426  +
mov eax 714h +
jmp loc_10208D5  +
push 57h  +
pop eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
test esi esi +
jz loc_1020928  +
mov ecx esi +
call sub_1014FC6  +
mov eax dword_1064920 +
test eax eax +
jz loc_1020912  +
push [ebp+arg_0]  +
mov ecx esi +
push eax  +
call sub_10155A7  +
test eax eax +
jz loc_1020912  +
xor eax eax +
inc eax  +
jmp loc_102092A  +
mov eax dword_1064924 +
test eax eax +
jz loc_1020928  +
push [ebp+arg_0]  +
mov ecx esi +
push eax  +
call sub_10155A7  +
jmp loc_102092A  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
push 18h  +
mov esi ecx +
push 0  +
push esi  +
call sub_10219E0  +
add esp 0Ch +
mov eax esi +
pop esi  +
retn   +
***
call sub_1022E04  +
and dword ptr [ebp-4] 0 +
push ecx  +
call ds:InitializeCriticalSection  +
and dword ptr [ebp-1Ch] 0 +
jmp loc_102098A  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000017h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-1Ch] 8007000Eh +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov eax [ebp-1Ch] +
call sub_1022E49  +
retn   +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jnz loc_10209B2  +
mov eax 80070057h +
jmp loc_10209C3  +
cmp dword ptr [eax] 2Ch +
jnz loc_10209AB  +
and dword ptr [eax+1Ch] 0 +
lea ecx [eax+4] +
call sub_102094F  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_10209E1  +
push eax  +
call sub_10213A1  +
and dword ptr [esi] 0 +
pop ecx  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jl loc_1020A0A  +
cmp eax [ecx+4] +
jge loc_1020A0A  +
mov ecx [ecx] +
lea eax [ecx+eax*2] +
pop ebp  +
retn 4  +
***
push 0  +
push 0  +
push 1  +
push 0C000008Ch  +
call ds:RaiseException  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jl loc_1020A3B  +
cmp eax [ecx+4] +
jge loc_1020A3B  +
mov ecx [ecx] +
lea eax [ecx+eax*4] +
pop ebp  +
retn 4  +
***
push 0  +
push 0  +
push 1  +
push 0C000008Ch  +
call ds:RaiseException  +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
xor edi edi +
cmp esi edi +
jnz loc_1020A8A  +
mov eax 80070057h +
jmp loc_1020AD1  +
mov eax [esi] +
cmp eax edi +
jz loc_1020ACF  +
cmp eax 2Ch +
jnz loc_1020A83  +
cmp [esi+24h] edi +
jle loc_1020ABA  +
push ebx  +
lea ebx [esi+20h] +
push edi  +
mov ecx ebx +
call loc_10209F0  +
movzx eax word ptr [eax] +
push dword ptr [ebp+0Ch]  +
push eax  +
call ds:UnregisterClassA  +
inc edi  +
cmp edi [esi+24h] +
jl loc_1020A9E  +
pop ebx  +
lea ecx [esi+20h] +
call sub_10209CC  +
lea eax [esi+4] +
push eax  +
call ds:DeleteCriticalSection  +
and dword ptr [esi] 0 +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+18h] +
call sub_1020934  +
xor eax eax +
mov [esi+30h] eax +
mov [esi+34h] eax +
mov [esi+38h] eax +
mov eax esi +
pop esi  +
retn   +
***
lea ecx [esi+30h] +
pop esi  +
jmp sub_10209CC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
lea edi [esi+18h] +
push edi  +
call ds:EnterCriticalSection  +
mov eax [esi+34h] +
mov ecx [ebp+arg_0] +
cmp ecx eax +
jg loc_1020B5A  +
test ecx ecx +
jl loc_1020B5A  +
cmp ecx eax +
jnz loc_1020B4D  +
mov esi [esi+8] +
push edi  +
call ds:LeaveCriticalSection  +
mov eax esi +
jmp loc_1020B63  +
push ecx  +
lea ecx [esi+30h] +
call loc_1020A21  +
mov esi [eax] +
jmp loc_1020B42  +
push edi  +
call ds:LeaveCriticalSection  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov byte_1064704 1 +
and dword ptr [esi] 0 +
mov eax esi +
pop esi  +
retn   +
***
push ebp  +
mov ebp esp +
sub esp 98h +
mov eax dword_1063194 +
xor eax ebp +
mov [ebp-4] eax +
push esi  +
mov esi ecx +
call sub_1020ADC  +
mov eax 1000000h +
push 94h  +
mov [esi+8] eax +
mov [esi+4] eax +
lea eax [ebp-98h] +
push 0  +
push eax  +
mov dword ptr [esi] 3Ch +
mov byte ptr [esi+0Ch] 0 +
call sub_10219E0  +
add esp 0Ch +
lea eax [ebp-98h] +
push eax  +
mov dword ptr [ebp-98h] 94h +
call ds:GetVersionExA  +
cmp dword ptr [ebp-88h] 2 +
jnz loc_1020C0E  +
cmp dword ptr [ebp-94h] 5 +
jb loc_1020C2F  +
jmp loc_1020C2B  +
cmp dword ptr [ebp-88h] 1 +
jnz loc_1020C2F  +
cmp dword ptr [ebp-94h] 4 +
ja loc_1020C2B  +
jnz loc_1020C2F  +
cmp dword ptr [ebp-90h] 0 +
jbe loc_1020C2F  +
mov byte ptr [esi+0Ch] 1 +
lea ecx [esi+18h] +
mov dword ptr [esi+10h] 800h +
mov dword ptr [esi+14h] offset dword_10057F4 +
call sub_102094F  +
test eax eax +
jge loc_1020C50  +
mov byte_1064704 1 +
mov ecx [ebp-4] +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_1021557  +
leave   +
retn   +
***
cmp byte ptr [ecx+8] 0 +
mov dword ptr [ecx] offset off_1005804 +
jz locret_1020C9D  +
mov ecx [ecx+4] +
test ecx ecx +
jz locret_1020C9D  +
push ecx  +
call ds:HeapDestroy  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 0  +
push dword ptr [ecx+4]  +
call ds:HeapAlloc  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
jz loc_1020CD8  +
push dword ptr [ebp+8]  +
push 0  +
push dword ptr [ecx+4]  +
call ds:HeapFree  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+8] eax +
jnz loc_1020CF6  +
push dword ptr [ebp+0Ch]  +
mov eax [ecx] +
call dword ptr [eax]  +
jmp loc_1020D17  +
cmp [ebp+0Ch] eax +
jnz loc_1020D07  +
push dword ptr [ebp+8]  +
mov eax [ecx] +
call dword ptr [eax+4]  +
xor eax eax +
jmp loc_1020D17  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push eax  +
push dword ptr [ecx+4]  +
call ds:HeapReAlloc  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 0  +
push dword ptr [ecx+4]  +
call ds:HeapSize  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1020C83  +
test byte ptr [ebp+8] 1 +
jz loc_1020D56  +
push esi  +
call sub_1021179  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+8] +
mov [eax+4] ecx +
mov dword ptr [eax] offset off_1005818 +
xor ecx ecx +
mov dword ptr [eax+14h] 2 +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov [eax+18h] cx +
mov [eax+1Ah] cx +
mov [eax+8] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mul  [ebp+arg_8] +
test edx edx +
ja loc_1020DAC  +
cmp eax 0FFFFFFFFh +
jbe loc_1020DB3  +
mov eax 80070057h +
jmp loc_1020DBA  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+4] +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+4]  +
***
mov eax ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1005818 +
jz loc_1020E0C  +
push esi  +
call sub_1021179  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [ebp+arg_4] +
push esi  +
lea ecx [edx+eax] +
lea esi [ecx-1] +
cmp esi edx +
pop esi  +
jge loc_1020E34  +
mov eax [ebp+arg_8] +
jmp loc_1020E3A  +
dec eax  +
not eax  +
dec ecx  +
and eax ecx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push esi  +
push edi  +
push 7FFFFFFFh  +
push 8  +
inc eax  +
push eax  +
mov esi ecx +
call sub_1020E18  +
push dword ptr [ebp+0Ch]  +
mov edi eax +
push edi  +
lea eax [ebp+8] +
push eax  +
call sub_1020D98  +
test eax eax +
jl loc_1020EA3  +
push dword ptr [ebp+8]  +
lea eax [ebp+8] +
push 10h  +
push eax  +
call sub_10148FE  +
test eax eax +
jl loc_1020EA3  +
mov ecx [esi+4] +
push dword ptr [ebp+8]  +
mov eax [ecx] +
call dword ptr [eax]  +
test eax eax +
jz loc_1020EA3  +
dec edi  +
and dword ptr [eax+4] 0 +
mov [eax] esi +
mov dword ptr [eax+0Ch] 1 +
mov [eax+8] edi +
jmp loc_1020EA5  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
push esi  +
push edi  +
push 7FFFFFFFh  +
push 8  +
inc eax  +
push eax  +
mov esi ecx +
call sub_1020E18  +
push dword ptr [ebp+10h]  +
mov edi eax +
push edi  +
lea eax [ebp+0Ch] +
push eax  +
call sub_1020D98  +
test eax eax +
jl loc_1020F07  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp+0Ch] +
push 10h  +
push eax  +
call sub_10148FE  +
test eax eax +
jl loc_1020F07  +
push dword ptr [ebp+0Ch]  +
mov ecx [esi+4] +
push dword ptr [ebp+8]  +
mov eax [ecx] +
call dword ptr [eax+8]  +
test eax eax +
jz loc_1020F07  +
dec edi  +
mov [eax+8] edi +
jmp loc_1020F09  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_1064C04 1 +
jnz loc_1020F27  +
call sub_1023C53  +
push [ebp+arg_0]  +
call sub_1023AC9  +
push 0FFh  +
call loc_10237E2  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jnz loc_1020F86  +
mov eax ds:100003Ch +
cmp dword ptr [eax+1000000h] 4550h +
jnz loc_1020F86  +
mov ecx 10Bh +
cmp [eax+1000018h] cx +
jnz loc_1020F86  +
cmp dword ptr [eax+1000074h] 0Eh +
jbe loc_1020F86  +
xor ecx ecx +
cmp [eax+10000E8h] ecx +
setnz cl  +
mov eax ecx +
retn   +
xor eax eax +
retn   +
***
mov eax [ebp-14h] +
mov esp [ebp-18h] +
mov eax [ebp-0BCh] +
mov [ebp-0B4h] eax +
cmp dword ptr [ebp-0B8h] 0 +
jnz loc_1021138  +
push eax  +
call sub_1023A3F  +
call sub_1023A6E  +
***
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
***
mov eax 0FFh +
call sub_10236BC  +
retn   +
***
call sub_1024DDB  +
jmp loc_1020F8E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp sub_10213A1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp sub_1021179  +
***
call sub_1022E04  +
and dword ptr [ebp-4] 0 +
dec dword ptr [ebp+10h]  +
js loc_10211E8  +
mov ecx [ebp+8] +
sub ecx [ebp+0Ch] +
mov [ebp+8] ecx +
call dword ptr [ebp+14h]  +
jmp loc_10211A9  +
***
mov eax [ebp-14h] +
mov [ebp-1Ch] eax +
mov eax [ebp-1Ch] +
mov eax [eax] +
mov [ebp-20h] eax +
mov eax [ebp-20h] +
cmp dword ptr [eax] 0E06D7363h +
jz loc_10211E0  +
mov dword ptr [ebp-24h] 0 +
mov eax [ebp-24h] +
retn   +
***
call sub_1024E71  +
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1022E49  +
retn 10h  +
***
call sub_1022E04  +
cmp dword ptr [ebp-1Ch] 0 +
jnz locret_102125E  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call near ptr dword_1021194+5  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_C] +
push edi  +
xor edi edi +
cmp esi edi +
jnz loc_1021278  +
xor eax eax +
jmp loc_10212DD  +
cmp [ebp+arg_0] edi +
jnz loc_1021298  +
call sub_102501E  +
push 16h  +
pop esi  +
mov [eax] esi +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
call sub_1024FC5  +
add esp 14h +
mov eax esi +
jmp loc_10212DD  +
cmp [ebp+arg_8] edi +
jz loc_10212B3  +
cmp [ebp+arg_4] esi +
jb loc_10212B3  +
push esi  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call loc_1022620  +
add esp 0Ch +
jmp loc_1021274  +
push [ebp+arg_4]  +
push edi  +
push [ebp+arg_0]  +
call sub_10219E0  +
add esp 0Ch +
cmp [ebp+arg_8] edi +
jz loc_102127D  +
cmp [ebp+arg_4] esi +
jnb loc_10212DA  +
call sub_102501E  +
push 22h  +
pop ecx  +
mov [eax] ecx +
mov esi ecx +
jmp loc_1021287  +
push 16h  +
pop eax  +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
mov eax [ebp+arg_0] +
push esi  +
push edi  +
push 8  +
pop ecx  +
mov esi offset dword_1005884 +
lea edi [ebp+dwExceptionCode] +
movs   +
mov [ebp+var_8] eax +
mov eax [ebp+arg_4] +
pop edi  +
mov [ebp+var_4] eax +
pop esi  +
test eax eax +
jz loc_102131B  +
test byte ptr [eax] 8 +
jz loc_102131B  +
mov [ebp+Arguments] 1994000h +
lea eax [ebp+Arguments] +
push eax  +
push [ebp+nNumberOfArguments]  +
push [ebp+dwExceptionFlags]  +
push [ebp+dwExceptionCode]  +
call ds:RaiseException  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_10058A4 +
jz loc_1021352  +
push esi  +
call sub_1021179  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
add ecx 9 +
add eax 9 +
mov dl [eax] +
cmp dl [ecx] +
jnz loc_102138A  +
test dl dl +
jz loc_1021386  +
mov dl [eax+1] +
cmp dl [ecx+1] +
jnz loc_102138A  +
inc eax  +
inc eax  +
inc ecx  +
inc ecx  +
test dl dl +
jnz loc_102136C  +
xor eax eax +
jmp loc_102138F  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
xor ecx ecx +
test eax eax +
setz cl  +
mov eax ecx +
pop ebp  +
retn 4  +
***
call sub_1022E04  +
pop ecx  +
retn   +
***
push esi  +
push 0  +
push hHeap  +
call ds:HeapFree  +
test eax eax +
jnz loc_1021429  +
call sub_102501E  +
mov esi eax +
call ds:GetLastError  +
push eax  +
call sub_1024FD7  +
mov [esi] eax +
pop ecx  +
call sub_1022E49  +
retn   +
***
call sub_1022E04  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp esi 0FFFFFFE0h +
ja loc_102153B  +
push ebx  +
push edi  +
mov edi ds:HeapAlloc +
cmp hHeap 0 +
jnz loc_10214C3  +
call sub_1023C53  +
push 1Eh  +
call sub_1023AC9  +
push 0FFh  +
call loc_10237E2  +
pop ecx  +
pop ecx  +
mov eax dword_1066D20 +
cmp eax 1 +
jnz loc_10214DB  +
test esi esi +
jz loc_10214D5  +
mov eax esi +
jmp loc_10214D8  +
xor eax eax +
inc eax  +
push eax  +
jmp loc_10214F7  +
cmp eax 3 +
jnz loc_10214EB  +
push esi  +
call sub_1021434  +
pop ecx  +
test eax eax +
jnz loc_1021501  +
test esi esi +
jnz loc_10214F0  +
inc esi  +
add esi 0Fh +
and esi 0FFFFFFF0h +
push esi  +
push 0  +
push hHeap  +
call edi  +
mov ebx eax +
test ebx ebx +
jnz loc_1021535  +
push 0Ch  +
pop esi  +
cmp dword_10652F0 eax +
jz loc_1021527  +
push [ebp+arg_0]  +
call sub_1025D8D  +
pop ecx  +
test eax eax +
jz loc_102152E  +
mov esi [ebp+arg_0] +
jmp loc_10214A2  +
call sub_102501E  +
mov [eax] esi +
call sub_102501E  +
mov [eax] esi +
pop edi  +
mov eax ebx +
pop ebx  +
jmp loc_102154F  +
push esi  +
call sub_1025D8D  +
pop ecx  +
call sub_102501E  +
mov dword ptr [eax] 0Ch +
xor eax eax +
pop esi  +
pop ebp  +
retn   +
***
cmp ecx dword_1063194 +
jnz loc_1021562  +
retn 0  +
jmp loc_1025DBA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
push esi  +
push edi  +
xor edi edi +
cmp eax edi +
jz loc_10215C3  +
cmp [ebp+arg_0] edi +
jnz loc_102159C  +
call sub_102501E  +
push 16h  +
pop esi  +
mov [eax] esi +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
call sub_1024FC5  +
add esp 14h +
mov eax esi +
jmp loc_10215C5  +
cmp [ebp+arg_8] edi +
jz loc_1021581  +
cmp [ebp+arg_4] eax +
jnb loc_10215B4  +
call sub_102501E  +
push 22h  +
pop ecx  +
mov [eax] ecx +
mov esi ecx +
jmp loc_102158B  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call loc_1025EB0  +
add esp 0Ch +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_10215E2  +
mov ecx [ebp+arg_4] +
mov [eax] ecx +
add eax 8 +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1021607  +
sub eax 8 +
cmp dword ptr [eax] 0DDDDh +
jnz loc_1021607  +
push eax  +
call sub_10213A1  +
pop ecx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov byte ptr [esi+0Ch] 0 +
test eax eax +
jnz loc_102169E  +
call sub_1024900  +
mov [esi+8] eax +
test eax eax +
jz loc_1021690  +
mov ecx [eax+6Ch] +
mov [esi] ecx +
mov ecx [eax+68h] +
mov [esi+4] ecx +
mov ecx [esi] +
cmp ecx off_1063BB8 +
jz loc_1021658  +
test byte ptr [eax+70h] 2 +
jnz loc_1021658  +
test byte_1063AD4 1 +
jz loc_1021658  +
call sub_1026BC1  +
mov [esi] eax +
mov eax [esi+4] +
cmp eax lpAddend +
jz loc_102167D  +
mov eax [esi+8] +
test byte ptr [eax+70h] 2 +
jnz loc_102167D  +
test byte_1063AD4 1 +
jz loc_102167D  +
call sub_102644F  +
mov [esi+4] eax +
mov eax [esi+8] +
test byte ptr [eax+70h] 2 +
jnz loc_10216A8  +
or dword ptr [eax+70h] 2 +
mov byte ptr [esi+0Ch] 1 +
jmp loc_10216A8  +
mov eax off_1063BB8 +
mov [esi] eax +
mov eax lpAddend +
jmp loc_10216A5  +
mov ecx [eax] +
mov [esi] ecx +
mov eax [eax+4] +
mov [esi+4] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 114h +
mov eax dword_1063194 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
xor edi edi +
mov esi ecx +
mov ebx edx +
mov [ebp+var_10C] ebx +
mov [ebp+var_110] edi +
cmp esi edi +
jnz loc_10216FE  +
call sub_102501E  +
push 16h  +
pop esi  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
mov [eax] esi +
call sub_1024FC5  +
add esp 14h +
jmp loc_102188A  +
push [ebp+arg_0]  +
push esi  +
call sub_1026EE4  +
pop ecx  +
pop ecx  +
cmp eax [ebp+arg_0] +
jb loc_1021715  +
xor eax eax +
mov [esi] ax +
jmp loc_10216E2  +
mov eax [ebx] +
mov ecx [eax+14h] +
cmp ecx edi +
jnz loc_1021748  +
mov eax esi +
cmp [esi] di +
jz loc_1021741  +
movzx ecx word ptr [eax] +
cmp cx 61h +
jb loc_102173A  +
cmp cx 7Ah +
ja loc_102173A  +
add ecx 0FFFFFFE0h +
mov [eax] cx +
inc eax  +
inc eax  +
cmp [eax] di +
jnz loc_1021725  +
xor eax eax +
jmp loc_102188C  +
push dword ptr [eax+4]  +
mov ebx 200h +
push edi  +
push edi  +
push 0FFFFFFFFh  +
push esi  +
push ebx  +
push ecx  +
push [ebp+var_10C]  +
call sub_1026E9D  +
mov ecx eax +
add esp 20h +
mov [ebp+var_114] ecx +
cmp ecx edi +
jnz loc_1021788  +
call sub_102501E  +
mov dword ptr [eax] 2Ah +
call sub_102501E  +
mov eax [eax] +
jmp loc_102188C  +
cmp [ebp+arg_0] ecx +
jnb loc_102179E  +
xor eax eax +
mov [esi] ax +
call sub_102501E  +
push 22h  +
jmp loc_10216E9  +
lea eax [ecx+ecx] +
cmp eax 100h +
jnb loc_10217B6  +
lea eax [ebp+var_104] +
mov [ebp+lpDestStr] eax +
jmp loc_102182E  +
cmp ecx edi +
jle loc_1021806  +
push 0FFFFFFE0h  +
xor edx edx +
pop eax  +
div  ecx +
cmp eax 2 +
jb loc_1021806  +
lea eax [ecx+ecx+8] +
cmp eax 400h +
ja loc_10217E4  +
call sub_10236D0  +
mov eax esp +
cmp eax edi +
jz loc_10217F8  +
mov dword ptr [eax] 0CCCCh +
jmp loc_10217F5  +
push eax  +
call sub_1021488  +
pop ecx  +
cmp eax edi +
jz loc_10217F8  +
mov dword ptr [eax] 0DDDDh +
add eax 8 +
mov ecx [ebp+var_114] +
mov [ebp+lpDestStr] eax +
jmp loc_102180C  +
mov [ebp+lpDestStr] edi +
cmp [ebp+lpDestStr] edi +
jnz loc_1021824  +
call sub_102501E  +
mov dword ptr [eax] 0Ch +
jmp loc_102177C  +
mov [ebp+var_110] 1 +
mov edx [ebp+var_10C] +
mov eax [edx] +
push dword ptr [eax+4]  +
push ecx  +
push [ebp+lpDestStr]  +
push 0FFFFFFFFh  +
push esi  +
push ebx  +
push dword ptr [eax+14h]  +
push edx  +
call sub_1026E9D  +
add esp 20h +
test eax eax +
jz loc_102186A  +
push [ebp+lpDestStr]  +
push [ebp+arg_0]  +
push esi  +
call sub_1023300  +
add esp 0Ch +
mov esi eax +
jmp loc_1021876  +
call sub_102501E  +
push 2Ah  +
pop ecx  +
mov [eax] ecx +
mov esi ecx +
cmp [ebp+var_110] edi +
jz loc_102188A  +
push [ebp+lpDestStr]  +
call sub_10215E9  +
pop ecx  +
mov eax esi +
lea esp [ebp-120h] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1021557  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push [ebp+arg_8]  +
lea ecx [ebp+var_10] +
call sub_102160E  +
push [ebp+arg_4]  +
mov ecx [ebp+arg_0] +
lea edx [ebp+var_10] +
call sub_10216B4  +
cmp [ebp+var_4] 0 +
pop ecx  +
jz locret_10218D5  +
mov ecx [ebp+var_8] +
and dword ptr [ecx+70h] 0FFFFFFFDh +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10218A6  +
add esp 0Ch +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
xor esi esi +
cmp [ebp+arg_4] esi +
jnz loc_1021925  +
call sub_102501E  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_1024FC5  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_102194C  +
push [ebp+arg_C]  +
lea eax [ebp+var_20] +
push [ebp+arg_8]  +
mov [ebp+var_1C] 7FFFFFFFh +
push [ebp+arg_4]  +
mov [ebp+var_14] 42h +
push eax  +
mov [ebp+var_18] esi +
mov [ebp+var_20] esi +
call [ebp+arg_0]  +
add esp 10h +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push 0  +
push [ebp+arg_0]  +
push offset sub_1027122  +
call sub_10218F8  +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor esi esi +
cmp edi esi +
jz loc_102198A  +
cmp [ebp+arg_4] esi +
ja loc_10219A9  +
call sub_102501E  +
mov dword ptr [eax] 16h +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
call sub_1024FC5  +
add esp 14h +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebp  +
retn   +
cmp [ebp+arg_8] esi +
jz loc_102198A  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push edi  +
call sub_10288E1  +
add esp 10h +
cmp eax esi +
jge loc_10219A5  +
xor ecx ecx +
mov [edi] cx +
cmp eax 0FFFFFFFEh +
jnz loc_10219A2  +
call sub_102501E  +
mov dword ptr [eax] 22h +
jmp loc_1021995  +
***
mov edx [esp+arg_8] +
mov ecx [esp+arg_0] +
test edx edx +
jz loc_1021A55  +
xor eax eax +
mov al [esp+arg_4] +
test al al +
jnz loc_1021A0C  +
cmp edx 100h +
jb loc_1021A0C  +
cmp dword_1066D04 0 +
jz loc_1021A0C  +
jmp sub_1028A1C  +
push edi  +
mov edi ecx +
cmp edx 4 +
jb loc_1021A45  +
neg ecx  +
and ecx 3 +
jz loc_1021A27  +
sub edx ecx +
mov [edi] al +
add edi 1 +
sub ecx 1 +
jnz loc_1021A1D  +
mov ecx eax +
shl eax 8 +
add eax ecx +
mov ecx eax +
shl eax 10h +
add eax ecx +
mov ecx edx +
and edx 3 +
shr ecx 2 +
jz loc_1021A45  +
stos   +
test edx edx +
jz loc_1021A4F  +
mov [edi] al +
add edi 1 +
sub edx 1 +
jnz loc_1021A45  +
mov eax [esp+4+arg_0] +
pop edi  +
retn   +
mov eax [esp+arg_0] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov eax [ebp+arg_4] +
add eax 0Ch +
mov [ebp+var_4] eax +
mov ebx large fs:0 +
mov eax [ebx] +
mov large fs:0 eax +
mov eax [ebp+arg_0] +
mov ebx [ebp+arg_4] +
mov ebp [ebp+var_4] +
mov esp [ebx-4] +
jmp eax  +
***
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
call [ebp+arg_4]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
mov ecx [ebp+arg_0] +
call [ebp+arg_4]  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
mov ecx [ebp+arg_0] +
push [ebp+arg_8]  +
call [ebp+arg_4]  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi large fs:0 +
mov [ebp+var_4] esi +
mov [ebp+var_8] offset loc_1021B07 +
push 0  +
push [ebp+arg_4]  +
push [ebp+var_8]  +
push [ebp+arg_0]  +
call ds:__imp_RtlUnwind  +
mov eax [ebp+arg_4] +
mov eax [eax+4] +
and eax 0FFFFFFFDh +
mov ecx [ebp+arg_4] +
mov [ecx+4] eax +
mov edi large fs:0 +
mov ebx [ebp+var_4] +
mov [ebx] edi +
mov large fs:0 ebx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
sub esp 8 +
push ebx  +
push esi  +
push edi  +
cld   +
mov [ebp+var_4] eax +
xor eax eax +
push eax  +
push eax  +
push eax  +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_102981C  +
add esp 20h +
mov [ebp+var_8] eax +
pop edi  +
pop esi  +
pop ebx  +
mov eax [ebp+var_8] +
mov esp ebp +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
cld   +
mov esi [ebp+0Ch] +
mov ecx [esi+8] +
xor ecx esi +
call sub_1021557  +
push 0  +
push esi  +
push dword ptr [esi+14h]  +
push dword ptr [esi+0Ch]  +
push 0  +
push dword ptr [ebp+10h]  +
push dword ptr [esi+10h]  +
push dword ptr [ebp+8]  +
call sub_102981C  +
add esp 20h +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
push ebx  +
cmp [ebp+arg_0] 123h +
jnz loc_1021BCC  +
mov eax offset loc_1021C6D +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
xor eax eax +
inc eax  +
jmp loc_1021C96  +
and [ebp+var_28] 0 +
mov [ebp+var_24] offset loc_1021C9E +
mov eax dword_1063194 +
lea ecx [ebp+var_28] +
xor eax ecx +
mov [ebp+var_20] eax +
mov eax [ebp+arg_10] +
mov [ebp+var_1C] eax +
mov eax [ebp+arg_4] +
mov [ebp+var_18] eax +
mov eax [ebp+arg_14] +
mov [ebp+var_14] eax +
mov eax [ebp+arg_18] +
mov [ebp+var_10] eax +
and [ebp+var_C] 0 +
and [ebp+var_8] 0 +
and [ebp+var_4] 0 +
mov [ebp+var_C] esp +
mov [ebp+var_8] ebp +
mov eax large fs:0 +
mov [ebp+var_28] eax +
lea eax [ebp+var_28] +
mov large fs:0 eax +
mov [ebp+var_3C] 1 +
mov eax [ebp+arg_0] +
mov [ebp+var_38] eax +
mov eax [ebp+arg_8] +
mov [ebp+var_34] eax +
and [ebp+var_2C] 0 +
jz loc_1021C41  +
mov eax [ebp+var_2C] +
mov [ebp+var_40] eax +
jmp loc_1021C4F  +
call sub_1024981  +
mov [ebp+var_2C] eax +
mov eax [ebp+var_2C] +
mov [ebp+var_40] eax +
mov eax [ebp+var_40] +
mov eax [eax+80h] +
mov [ebp+var_30] eax +
lea eax [ebp+var_38] +
push eax  +
mov eax [ebp+arg_0] +
push dword ptr [eax]  +
call [ebp+var_30]  +
pop ecx  +
pop ecx  +
and [ebp+var_3C] 0 +
cmp [ebp+var_4] 0 +
jz loc_1021C8A  +
mov ebx large fs:0 +
mov eax [ebx] +
mov ebx [ebp+var_28] +
mov [ebx] eax +
mov large fs:0 ebx +
jmp loc_1021C93  +
mov eax [ebp+var_28] +
mov large fs:0 eax +
mov eax [ebp+var_3C] +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
cld   +
mov eax [ebp+0Ch] +
mov ecx [eax+8] +
xor ecx [ebp+0Ch] +
call sub_1021557  +
mov eax [ebp+8] +
mov eax [eax+4] +
and eax 66h +
jz loc_1021CD0  +
mov eax [ebp+0Ch] +
mov dword ptr [eax+24h] 1 +
xor eax eax +
inc eax  +
jmp loc_1021D3A  +
jmp loc_1021D3A  +
push 1  +
mov eax [ebp+0Ch] +
push dword ptr [eax+18h]  +
mov eax [ebp+0Ch] +
push dword ptr [eax+14h]  +
mov eax [ebp+0Ch] +
push dword ptr [eax+0Ch]  +
push 0  +
push dword ptr [ebp+10h]  +
mov eax [ebp+0Ch] +
push dword ptr [eax+10h]  +
push dword ptr [ebp+8]  +
call sub_102981C  +
add esp 20h +
mov eax [ebp+0Ch] +
cmp dword ptr [eax+24h] 0 +
jnz loc_1021D0E  +
push dword ptr [ebp+8]  +
push dword ptr [ebp+0Ch]  +
call sub_1021ADB  +
push 0  +
push 0  +
push 0  +
push 0  +
push 0  +
lea eax [ebp-4] +
push eax  +
push 123h  +
call sub_1021BA8  +
add esp 1Ch +
mov eax [ebp-4] +
mov ebx [ebp+0Ch] +
mov esp [ebx+1Ch] +
mov ebp [ebx+20h] +
jmp eax  +
***
xor eax eax +
inc eax  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov eax [edi+10h] +
mov esi [edi+0Ch] +
mov [ebp+var_4] eax +
mov ebx esi +
jmp loc_1021D88  +
cmp esi 0FFFFFFFFh +
jnz loc_1021D65  +
call loc_1024EC7  +
mov ecx [ebp+var_4] +
dec esi  +
mov eax esi +
imul eax eax +
add eax ecx +
mov ecx [ebp+arg_8] +
cmp [eax+4] ecx +
jge loc_1021D7D  +
cmp ecx [eax+8] +
jle loc_1021D82  +
cmp esi 0FFFFFFFFh +
jnz loc_1021D8B  +
dec [ebp+arg_4]  +
mov ebx [ebp+arg_0] +
mov [ebp+arg_0] esi +
cmp [ebp+arg_4] 0 +
jge loc_1021D5B  +
mov eax [ebp+arg_C] +
inc esi  +
mov [eax] esi +
mov eax [ebp+arg_10] +
mov [eax] ebx +
cmp ebx [edi+0Ch] +
ja loc_1021DA5  +
cmp esi ebx +
jbe loc_1021DAA  +
call loc_1024EC7  +
mov eax esi +
imul eax eax +
add eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
mov [esi] eax +
call sub_1024981  +
add eax 98h +
mov ecx [eax] +
mov [esi+4] ecx +
mov [eax] esi +
mov eax esi +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
call sub_1024981  +
mov eax [eax+98h] +
jmp loc_1021E01  +
mov ecx [eax] +
cmp ecx [ebp+arg_0] +
jz loc_1021E08  +
mov eax [eax+4] +
test eax eax +
jnz loc_1021DF7  +
inc eax  +
pop ebp  +
retn   +
xor eax eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
call sub_1024981  +
mov ecx [ebp+arg_0] +
add eax 98h +
cmp ecx [eax] +
jnz loc_1021E2E  +
mov ecx [ecx+4] +
mov [eax] ecx +
pop ebp  +
retn   +
mov eax [eax] +
jmp loc_1021E3B  +
mov edx [eax+4] +
cmp ecx edx +
jz loc_1021E47  +
mov eax edx +
cmp dword ptr [eax+4] 0 +
jnz loc_1021E32  +
pop ebp  +
jmp loc_1024EC7  +
mov ecx [ecx+4] +
mov [eax+4] ecx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_1063194 +
and [ebp+var_18] 0 +
lea ecx [ebp+var_18] +
xor eax ecx +
mov ecx [ebp+arg_0] +
mov [ebp+var_10] eax +
mov eax [ebp+arg_4] +
mov [ebp+var_C] eax +
mov eax [ebp+arg_C] +
inc eax  +
mov [ebp+var_14] offset loc_1021B70 +
mov [ebp+var_8] ecx +
mov [ebp+var_4] eax +
mov eax large fs:0 +
mov [ebp+var_18] eax +
lea eax [ebp+var_18] +
mov large fs:0 eax +
push [ebp+arg_10]  +
push ecx  +
push [ebp+arg_8]  +
call sub_1029910  +
mov ecx eax +
mov eax [ebp+var_18] +
mov large fs:0 eax +
mov eax ecx +
leave   +
retn   +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_1063194 +
xor eax ebp +
push eax  +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_1063194 +
xor eax ebp +
push eax  +
mov [ebp-10h] esp +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_1063194 +
xor eax ebp +
push eax  +
mov [ebp-10h] eax +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_1063194 +
xor eax ebp +
push eax  +
mov [ebp-14h] eax +
mov [ebp-10h] esp +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
mov ecx [ebp-0Ch] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov ecx [ebp-10h] +
xor ecx ebp +
call sub_1021557  +
jmp sub_1021FA5  +
***
mov ecx [ebp-14h] +
xor ecx ebp +
call sub_1021557  +
jmp sub_1021FA5  +
***
call sub_1022E04  +
pop ecx  +
retn   +
***
mov edi [ebp-1Ch] +
test edi edi +
jnz loc_10221FD  +
cmp dword_10652F0 edi +
jz loc_1022172  +
push esi  +
call sub_1025D8D  +
pop ecx  +
test eax eax +
jnz loc_1022027  +
call sub_102501E  +
cmp [ebp-20h] edi +
jnz loc_10221CB  +
mov esi eax +
call ds:GetLastError  +
push eax  +
call sub_1024FD7  +
pop ecx  +
mov [esi] eax +
jmp loc_10221D1  +
test edi edi +
jnz loc_10221FD  +
call sub_102501E  +
cmp [ebp-20h] edi +
jz loc_10221EC  +
mov dword ptr [eax] 0Ch +
jmp loc_10221FD  +
test esi esi +
jnz loc_1022191  +
inc esi  +
push esi  +
push ebx  +
push 0  +
push hHeap  +
call ds:HeapReAlloc  +
mov edi eax +
test edi edi +
jnz loc_10221FD  +
cmp dword_10652F0 eax +
jz loc_10221E3  +
push esi  +
call sub_1025D8D  +
pop ecx  +
test eax eax +
jz loc_10221D9  +
cmp esi 0FFFFFFE0h +
jbe loc_102218C  +
push esi  +
call sub_1025D8D  +
pop ecx  +
call sub_102501E  +
mov dword ptr [eax] 0Ch +
xor eax eax +
call sub_1022E49  +
retn   +
call sub_102501E  +
jmp loc_102215F  +
test edi edi +
jnz loc_10221FD  +
call sub_102501E  +
mov esi eax +
call ds:GetLastError  +
push eax  +
call sub_1024FD7  +
mov [esi] eax +
pop ecx  +
mov eax edi +
jmp loc_10221D3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
push esi  +
xor esi esi +
cmp ecx esi +
jbe loc_102223D  +
push 0FFFFFFE0h  +
xor edx edx +
pop eax  +
div  ecx +
cmp eax [ebp+arg_8] +
jnb loc_102223D  +
call sub_102501E  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 0Ch +
call sub_1024FC5  +
add esp 14h +
xor eax eax +
jmp loc_102224C  +
imul ecx [ebp+arg_8] +
push ecx  +
push [ebp+arg_0]  +
call sub_1021FE6  +
pop ecx  +
pop ecx  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax dword_1066E48 +
push ebx  +
push esi  +
push edi  +
test eax eax +
jz loc_1022311  +
cmp dword_1066E44 0 +
jz loc_1022311  +
push eax  +
call sub_102473C  +
push dword_1066E44  +
mov ebx eax +
mov [ebp+var_4] ebx +
call sub_102473C  +
mov esi eax +
pop ecx  +
pop ecx  +
cmp esi ebx +
jb loc_1022311  +
mov edi esi +
sub edi ebx +
lea eax [edi+4] +
cmp eax 4 +
jb loc_1022311  +
push ebx  +
call sub_1029961  +
mov ebx eax +
lea eax [edi+4] +
pop ecx  +
cmp ebx eax +
jnb loc_10222F9  +
mov eax 800h +
cmp ebx eax +
jnb loc_10222BC  +
mov eax ebx +
add eax ebx +
cmp eax ebx +
jb loc_10222D1  +
push eax  +
push [ebp+var_4]  +
call sub_1021FE6  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_10222E7  +
lea eax [ebx+10h] +
cmp eax ebx +
jb loc_1022311  +
push eax  +
push [ebp+var_4]  +
call sub_1021FE6  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1022311  +
sar edi 2 +
push eax  +
lea esi [eax+edi*4] +
call sub_10246B6  +
pop ecx  +
mov dword_1066E48 eax +
mov edi [ebp+arg_0] +
mov [esi] edi +
add esi 4 +
push esi  +
call sub_10246B6  +
mov dword_1066E44 eax +
pop ecx  +
mov eax edi +
jmp loc_1022313  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push esi  +
push 4  +
push 20h  +
call sub_1023497  +
mov esi eax +
push esi  +
call sub_10246B6  +
add esp 0Ch +
mov dword_1066E48 eax +
mov dword_1066E44 eax +
test esi esi +
jnz loc_1022347  +
push 18h  +
pop eax  +
pop esi  +
retn   +
***
and dword ptr [esi] 0 +
xor eax eax +
pop esi  +
retn   +
***
call sub_1022E04  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call sub_1022353  +
neg eax  +
sbb eax eax +
neg eax  +
pop ecx  +
dec eax  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jnz loc_10223BF  +
xor eax eax +
pop ebp  +
retn   +
push 1  +
push 0Ah  +
push 0  +
push [ebp+arg_0]  +
call sub_1029C17  +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
push [ebp+arg_8]  +
lea ecx [ebp+var_10] +
call sub_102160E  +
mov ebx [ebp+arg_0] +
xor esi esi +
cmp ebx esi +
jnz loc_1022424  +
call sub_102501E  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_1024FC5  +
add esp 14h +
cmp [ebp+var_4] 0 +
jz loc_102241A  +
mov eax [ebp+var_8] +
and dword ptr [eax+70h] 0FFFFFFFDh +
mov eax 7FFFFFFFh +
jmp loc_10224E4  +
push edi  +
mov edi [ebp+arg_4] +
cmp edi esi +
jnz loc_102245B  +
call sub_102501E  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_1024FC5  +
add esp 14h +
cmp [ebp+var_4] 0 +
jz loc_1022451  +
mov eax [ebp+var_8] +
and dword ptr [eax+70h] 0FFFFFFFDh +
mov eax 7FFFFFFFh +
jmp loc_10224E3  +
mov eax [ebp+var_10] +
cmp [eax+14h] esi +
jnz loc_102249D  +
movzx eax word ptr [ebx] +
cmp ax 41h +
jb loc_1022475  +
cmp ax 5Ah +
ja loc_1022475  +
add eax 20h +
movzx esi ax +
movzx eax word ptr [edi] +
cmp ax 41h +
jb loc_102248A  +
cmp ax 5Ah +
ja loc_102248A  +
add eax 20h +
inc ebx  +
inc ebx  +
inc edi  +
inc edi  +
movzx eax ax +
test si si +
jz loc_10224CE  +
cmp si ax +
jz loc_1022463  +
jmp loc_10224CE  +
movzx eax word ptr [ebx] +
lea ecx [ebp+var_10] +
push ecx  +
push eax  +
call sub_1029C4A  +
movzx esi ax +
movzx eax word ptr [edi] +
lea ecx [ebp+var_10] +
push ecx  +
inc ebx  +
push eax  +
inc ebx  +
call sub_1029C4A  +
add esp 10h +
inc edi  +
inc edi  +
movzx eax ax +
test si si +
jz loc_10224CE  +
cmp si ax +
jz loc_102249D  +
movzx ecx ax +
movzx eax si +
sub eax ecx +
cmp [ebp+var_4] 0 +
jz loc_10224E3  +
mov ecx [ebp+var_8] +
and dword ptr [ecx+70h] 0FFFFFFFDh +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
push edi  +
cmp dword_1065630 esi +
jnz loc_102256D  +
mov edi [ebp+arg_0] +
cmp edi esi +
jnz loc_1022524  +
call sub_102501E  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_1024FC5  +
add esp 14h +
mov eax 7FFFFFFFh +
jmp loc_102257C  +
mov edx [ebp+arg_4] +
cmp edx esi +
jz loc_1022505  +
movzx eax word ptr [edi] +
cmp ax 41h +
jb loc_102253D  +
cmp ax 5Ah +
ja loc_102253D  +
add eax 20h +
movzx ecx ax +
movzx eax word ptr [edx] +
cmp ax 41h +
jb loc_1022552  +
cmp ax 5Ah +
ja loc_1022552  +
add eax 20h +
inc edi  +
inc edi  +
inc edx  +
inc edx  +
movzx eax ax +
cmp cx si +
jz loc_1022563  +
cmp cx ax +
jz loc_102252B  +
movzx edx ax +
movzx eax cx +
sub eax edx +
jmp loc_102257C  +
push esi  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10223D7  +
add esp 0Ch +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_4] +
cmp word ptr [ebx] 0 +
push edi  +
mov edi eax +
jz loc_10225DE  +
movzx ecx word ptr [eax] +
test cx cx +
jz loc_10225DC  +
movzx edx cx +
sub eax ebx +
mov ecx [ebp+arg_4] +
test dx dx +
jz loc_10225CA  +
movzx edx word ptr [ecx] +
test dx dx +
jz loc_10225E2  +
movzx ebx word ptr [eax+ecx] +
movzx edx dx +
sub ebx edx +
jnz loc_10225CA  +
inc ecx  +
inc ecx  +
cmp [eax+ecx] bx +
jnz loc_10225AF  +
cmp word ptr [ecx] 0 +
jz loc_10225E2  +
inc edi  +
inc edi  +
movzx edx word ptr [edi] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_10225A7  +
xor eax eax +
pop edi  +
pop ebx  +
pop ebp  +
retn   +
mov eax edi +
jmp loc_10225DE  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
jmp loc_1022600  +
push [ebp+arg_0]  +
call sub_1025D8D  +
pop ecx  +
test eax eax +
jz loc_102260F  +
push [ebp+arg_0]  +
call sub_1021488  +
mov esi eax +
pop ecx  +
test esi esi +
jz loc_10225F3  +
mov eax esi +
pop esi  +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
push edi  +
push esi  +
mov esi [ebp+0Ch] +
mov ecx [ebp+10h] +
mov edi [ebp+8] +
mov eax ecx +
mov edx ecx +
add eax esi +
cmp edi esi +
jbe loc_1022640  +
cmp edi eax +
jb loc_10227E4  +
cmp ecx 100h +
jb loc_1022667  +
cmp dword_1066D04 0 +
jz loc_1022667  +
push edi  +
push esi  +
and edi 0Fh +
and esi 0Fh +
cmp edi esi +
pop esi  +
pop edi  +
jnz loc_1022667  +
pop esi  +
pop edi  +
pop ebp  +
jmp sub_1029D90  +
***
test edi 3 +
jnz loc_1022684  +
shr ecx 2 +
and edx 3 +
cmp ecx 8 +
jb loc_10226A4  +
movs   +
jmp ds:off_1022794[edx*4]  +
mov eax edi +
mov edx 3 +
sub ecx 4 +
jb loc_102269C  +
and eax 3 +
add ecx eax +
jmp dword ptr ds:(loc_10226A4+4)[eax*4]  +
***
jmp ds:dword_10227A4[ecx*4]  +
***
jmp ds:off_1022728[ecx*4]  +
and edx ecx +
mov al [esi] +
mov [edi] al +
mov al [esi+1] +
mov [edi+1] al +
mov al [esi+2] +
shr ecx 2 +
mov [edi+2] al +
add esi 3 +
add edi 3 +
cmp ecx 8 +
jb loc_10226A4  +
movs   +
jmp ds:off_1022794[edx*4]  +
***
and edx ecx +
mov al [esi] +
mov [edi] al +
mov al [esi+1] +
shr ecx 2 +
mov [edi+1] al +
add esi 2 +
add edi 2 +
cmp ecx 8 +
jb loc_10226A4  +
movs   +
jmp ds:off_1022794[edx*4]  +
***
and edx ecx +
mov al [esi] +
mov [edi] al +
add esi 1 +
shr ecx 2 +
add edi 1 +
cmp ecx 8 +
jb loc_10226A4  +
movs   +
jmp ds:off_1022794[edx*4]  +
***
mov eax [esi+ecx*4-1Ch] +
mov [edi+ecx*4-1Ch] eax +
mov eax [esi+ecx*4-18h] +
mov [edi+ecx*4-18h] eax +
mov eax [esi+ecx*4-14h] +
mov [edi+ecx*4-14h] eax +
mov eax [esi+ecx*4-10h] +
mov [edi+ecx*4-10h] eax +
mov eax [esi+ecx*4-0Ch] +
mov [edi+ecx*4-0Ch] eax +
mov eax [esi+ecx*4-8] +
mov [edi+ecx*4-8] eax +
mov eax [esi+ecx*4-4] +
mov [edi+ecx*4-4] eax +
lea eax ds:0[ecx*4] +
add esi eax +
add edi eax +
jmp ds:off_1022794[edx*4]  +
***
pop edi  +
leave   +
retn   +
***
mov al [esi] +
mov [edi] al +
mov eax [ebp+8] +
pop esi  +
pop edi  +
leave   +
retn   +
***
mov al [esi] +
mov [edi] al +
mov al [esi+1] +
mov [edi+1] al +
mov eax [ebp+8] +
pop esi  +
pop edi  +
leave   +
retn   +
***
mov al [esi] +
mov [edi] al +
mov al [esi+1] +
mov [edi+1] al +
mov al [esi+2] +
mov [edi+2] al +
mov eax [ebp+8] +
pop esi  +
pop edi  +
leave   +
retn   +
***
lea esi [ecx+esi-4] +
lea edi [ecx+edi-4] +
test edi 3 +
jnz loc_1022818  +
shr ecx 2 +
and edx 3 +
cmp ecx 8 +
jb loc_102280C  +
std   +
movs   +
cld   +
jmp ds:off_1022930[edx*4]  +
neg ecx  +
jmp ds:off_10228E0[ecx*4]  +
mov eax edi +
mov edx 3 +
cmp ecx 4 +
jb loc_1022830  +
and eax 3 +
sub ecx eax +
jmp dword ptr ds:(loc_1022830+4)[eax*4]  +
***
jmp ds:off_1022930[ecx*4]  +
mov al [esi+3] +
and edx ecx +
mov [edi+3] al +
sub esi 1 +
shr ecx 2 +
sub edi 1 +
cmp ecx 8 +
jb loc_102280C  +
std   +
movs   +
cld   +
jmp ds:off_1022930[edx*4]  +
mov al [esi+3] +
and edx ecx +
mov [edi+3] al +
mov al [esi+2] +
shr ecx 2 +
mov [edi+2] al +
sub esi 2 +
sub edi 2 +
cmp ecx 8 +
jb loc_102280C  +
std   +
movs   +
cld   +
jmp ds:off_1022930[edx*4]  +
mov al [esi+3] +
and edx ecx +
mov [edi+3] al +
mov al [esi+2] +
mov [edi+2] al +
mov al [esi+1] +
shr ecx 2 +
mov [edi+1] al +
sub esi 3 +
sub edi 3 +
cmp ecx 8 +
jb loc_102280C  +
std   +
movs   +
cld   +
jmp ds:off_1022930[edx*4]  +
mov eax [esi+ecx*4+1Ch] +
mov [edi+ecx*4+1Ch] eax +
mov eax [esi+ecx*4+18h] +
mov [edi+ecx*4+18h] eax +
mov eax [esi+ecx*4+14h] +
mov [edi+ecx*4+14h] eax +
mov eax [esi+ecx*4+10h] +
mov [edi+ecx*4+10h] eax +
mov eax [esi+ecx*4+0Ch] +
mov [edi+ecx*4+0Ch] eax +
mov eax [esi+ecx*4+8] +
mov [edi+ecx*4+8] eax +
mov eax [esi+ecx*4+4] +
mov [edi+ecx*4+4] eax +
lea eax ds:0[ecx*4] +
add esi eax +
add edi eax +
jmp ds:off_1022930[edx*4]  +
mov eax [ebp+8] +
pop esi  +
pop edi  +
leave   +
retn   +
***
mov al [esi+3] +
mov [edi+3] al +
mov eax [ebp+8] +
pop esi  +
pop edi  +
leave   +
retn   +
***
mov al [esi+3] +
mov [edi+3] al +
mov al [esi+2] +
mov [edi+2] al +
mov eax [ebp+8] +
pop esi  +
pop edi  +
leave   +
retn   +
***
mov al [esi+3] +
mov [edi+3] al +
mov al [esi+2] +
mov [edi+2] al +
mov al [esi+1] +
mov [edi+1] al +
mov eax [ebp+8] +
pop esi  +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov eax dword_1063194 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
xor esi esi +
push edi  +
cmp ebx esi +
jnz loc_10229C2  +
call sub_102501E  +
push 16h  +
pop edi  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov [eax] edi +
call sub_1024FC5  +
add esp 14h +
mov eax edi +
jmp loc_1022B09  +
push [ebp+arg_0]  +
push ebx  +
call sub_1026EE4  +
pop ecx  +
pop ecx  +
cmp eax [ebp+arg_0] +
jb loc_10229D9  +
xor eax eax +
mov [ebx] ax +
jmp loc_10229A4  +
mov edx [ebp+arg_4] +
mov eax [edx] +
mov ecx [eax+14h] +
cmp ecx esi +
jnz loc_1022A0F  +
mov eax ebx +
cmp [ebx] si +
jz loc_1022A08  +
movzx ecx word ptr [eax] +
cmp cx 41h +
jb loc_1022A01  +
cmp cx 5Ah +
ja loc_1022A01  +
add ecx 20h +
mov [eax] cx +
inc eax  +
inc eax  +
cmp [eax] si +
jnz loc_10229EC  +
xor eax eax +
jmp loc_1022B09  +
push dword ptr [eax+4]  +
mov edi 100h +
push esi  +
push esi  +
push 0FFFFFFFFh  +
push ebx  +
push edi  +
push ecx  +
push edx  +
call sub_1026E9D  +
mov ecx eax +
add esp 20h +
mov [ebp+var_C] ecx +
cmp ecx esi +
jnz loc_1022A47  +
call sub_102501E  +
mov dword ptr [eax] 2Ah +
call sub_102501E  +
mov eax [eax] +
jmp loc_1022B09  +
cmp [ebp+arg_0] ecx +
jnb loc_1022A5D  +
xor eax eax +
mov [ebx] ax +
call sub_102501E  +
push 22h  +
jmp loc_10229AB  +
cmp ecx esi +
jle loc_1022AA7  +
push 0FFFFFFE0h  +
xor edx edx +
pop eax  +
div  ecx +
cmp eax 2 +
jb loc_1022AA7  +
lea eax [ecx+ecx+8] +
cmp eax 400h +
ja loc_1022A8B  +
call sub_10236D0  +
mov eax esp +
cmp eax esi +
jz loc_1022A9F  +
mov dword ptr [eax] 0CCCCh +
jmp loc_1022A9C  +
push eax  +
call sub_1021488  +
pop ecx  +
cmp eax esi +
jz loc_1022A9F  +
mov dword ptr [eax] 0DDDDh +
add eax 8 +
mov ecx [ebp+var_C] +
mov [ebp+lpDestStr] eax +
jmp loc_1022AAA  +
mov [ebp+lpDestStr] esi +
cmp [ebp+lpDestStr] esi +
jnz loc_1022ABF  +
call sub_102501E  +
mov dword ptr [eax] 0Ch +
jmp loc_1022A3B  +
mov edx [ebp+arg_4] +
mov eax [edx] +
push dword ptr [eax+4]  +
push ecx  +
push [ebp+lpDestStr]  +
push 0FFFFFFFFh  +
push ebx  +
push edi  +
push dword ptr [eax+14h]  +
push edx  +
call sub_1026E9D  +
add esp 20h +
test eax eax +
jz loc_1022AF2  +
push [ebp+lpDestStr]  +
push [ebp+arg_0]  +
push ebx  +
call sub_1023300  +
add esp 0Ch +
mov esi eax +
jmp loc_1022AFE  +
call sub_102501E  +
push 2Ah  +
pop ecx  +
mov [eax] ecx +
mov esi ecx +
push [ebp+lpDestStr]  +
call sub_10215E9  +
pop ecx  +
mov eax esi +
lea esp [ebp-14h] +
pop edi  +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1021557  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push [ebp+arg_8]  +
lea ecx [ebp+var_10] +
call sub_102160E  +
mov ebx [ebp+arg_0] +
lea eax [ebp+var_10] +
push eax  +
push [ebp+arg_4]  +
call sub_102298A  +
cmp [ebp+var_4] 0 +
pop ecx  +
pop ecx  +
pop ebx  +
jz locret_1022B52  +
mov ecx [ebp+var_8] +
and dword ptr [ecx+70h] 0FFFFFFFDh +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1022B1F  +
add esp 0Ch +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
or ebx 0FFFFFFFFh +
cmp esi edi +
jnz loc_1022BA5  +
call sub_102501E  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
mov dword ptr [eax] 16h +
call sub_1024FC5  +
add esp 14h +
or eax ebx +
jmp loc_1022BE7  +
test byte ptr [esi+0Ch] 83h +
jz loc_1022BE2  +
push esi  +
call sub_102A094  +
push esi  +
mov ebx eax +
call sub_102A05E  +
push esi  +
call sub_102A027  +
push eax  +
call sub_1029F16  +
add esp 10h +
test eax eax +
jge loc_1022BD1  +
or ebx 0FFFFFFFFh +
jmp loc_1022BE2  +
mov eax [esi+1Ch] +
cmp eax edi +
jz loc_1022BE2  +
push eax  +
call sub_10213A1  +
pop ecx  +
mov [esi+1Ch] edi +
mov [esi+0Ch] edi +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call sub_1022E04  +
pop ecx  +
retn   +
***
call sub_1022E04  +
pop ecx  +
retn   +
***
call sub_1022E04  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 40h  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1022D0B  +
add esp 0Ch +
pop ebp  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
mov ebx [ebp+0Ch] +
push esi  +
mov esi [ebx+8] +
xor esi dword_1063194 +
push edi  +
mov eax [esi] +
mov byte ptr [ebp-1] 0 +
mov dword ptr [ebp-0Ch] 1 +
lea edi [ebx+10h] +
cmp eax 0FFFFFFFEh +
jz loc_1022EA9  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call sub_1021557  +
mov ecx [esi+0Ch] +
mov eax [esi+8] +
add ecx edi +
xor ecx [eax+edi] +
call sub_1021557  +
mov eax [ebp+8] +
test byte ptr [eax+4] 66h +
jnz loc_1022FDC  +
mov ecx [ebp+10h] +
lea edx [ebp-18h] +
mov [ebx-4] edx +
mov ebx [ebx+0Ch] +
mov [ebp-18h] eax +
mov [ebp-14h] ecx +
cmp ebx 0FFFFFFFEh +
jz loc_1022F3C  +
lea ecx [ecx+0] +
lea eax [ebx+ebx*2] +
mov ecx [esi+eax*4+14h] +
lea eax [esi+eax*4+10h] +
mov [ebp-10h] eax +
mov eax [eax] +
mov [ebp-8] eax +
test ecx ecx +
jz loc_1022F0B  +
mov edx edi +
call sub_102A962  +
mov byte ptr [ebp-1] 1 +
test eax eax +
jl loc_1022F46  +
jg loc_1022F4F  +
mov eax [ebp-8] +
mov ebx eax +
cmp eax 0FFFFFFFEh +
jnz loc_1022EE0  +
cmp byte ptr [ebp-1] 0 +
jz loc_1022F3C  +
mov eax [esi] +
cmp eax 0FFFFFFFEh +
jz loc_1022F2C  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call sub_1021557  +
mov ecx [esi+0Ch] +
mov edx [esi+8] +
add ecx edi +
xor ecx [edx+edi] +
call sub_1021557  +
mov eax [ebp-0Ch] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov dword ptr [ebp-0Ch] 0 +
jmp loc_1022F18  +
***
mov ecx [ebp+8] +
cmp dword ptr [ecx] 0E06D7363h +
jnz loc_1022F83  +
cmp ds:off_1006020 0 +
jz loc_1022F83  +
push offset off_1006020  +
call sub_102AA59  +
add esp 4 +
test eax eax +
jz loc_1022F83  +
mov edx [ebp+8] +
push 1  +
push edx  +
call ds:off_1006020  +
add esp 8 +
mov ecx [ebp+0Ch] +
call sub_102A992  +
mov eax [ebp+0Ch] +
cmp [eax+0Ch] ebx +
jz loc_1022FA5  +
push offset dword_1063194  +
push edi  +
mov edx ebx +
mov ecx eax +
call sub_102A9AC  +
mov eax [ebp+0Ch] +
mov ecx [ebp-8] +
mov [eax+0Ch] ecx +
mov eax [esi] +
cmp eax 0FFFFFFFEh +
jz loc_1022FBF  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call sub_1021557  +
mov ecx [esi+0Ch] +
mov edx [esi+8] +
add ecx edi +
xor ecx [edx+edi] +
call sub_1021557  +
mov eax [ebp-10h] +
mov ecx [eax+8] +
mov edx edi +
call sub_102A979  +
mov edx 0FFFFFFFEh +
cmp [ebx+0Ch] edx +
jz loc_1022F3C  +
push offset dword_1063194  +
push edi  +
mov ecx ebx +
call sub_102A9AC  +
jmp loc_1022F18  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
xor esi esi +
cmp eax esi +
jnz loc_102302C  +
call sub_102501E  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_1024FC5  +
add esp 14h +
xor eax eax +
jmp loc_1023032  +
mov eax [eax+0Ch] +
and eax 10h +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
xor esi esi +
cmp eax esi +
jnz loc_1023065  +
call sub_102501E  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_1024FC5  +
add esp 14h +
xor eax eax +
jmp loc_102306B  +
mov eax [eax+0Ch] +
and eax 20h +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
mov [ebp+var_8] eax +
mov eax [ebp+arg_4] +
mov [ebp+var_4] eax +
test edi edi +
jz loc_10231C7  +
cmp [ebp+arg_C] 0 +
jz loc_10231C7  +
imul edi [ebp+arg_C] +
mov esi [ebp+arg_10] +
test dword ptr [esi+0Ch] 10Ch +
mov [ebp+var_10] edi +
mov ebx edi +
jz loc_10230BC  +
mov eax [esi+18h] +
mov [ebp+var_C] eax +
jmp loc_10230C3  +
mov [ebp+var_C] 1000h +
test edi edi +
jz loc_1023193  +
test dword ptr [esi+0Ch] 10Ch +
jz loc_1023115  +
mov eax [esi+4] +
test eax eax +
jz loc_1023115  +
jl loc_10231F8  +
mov edi ebx +
cmp ebx eax +
jb loc_10230E9  +
mov edi eax +
cmp edi [ebp+var_4] +
ja loc_1023198  +
push edi  +
push dword ptr [esi]  +
push [ebp+var_4]  +
push [ebp+var_8]  +
call sub_1021264  +
sub [esi+4] edi +
add [esi] edi +
add [ebp+var_8] edi +
sub ebx edi +
add esp 10h +
sub [ebp+var_4] edi +
mov edi [ebp+var_10] +
jmp loc_102318B  +
cmp ebx [ebp+var_C] +
jb loc_1023163  +
cmp [ebp+var_C] 0 +
mov eax ebx +
jz loc_102312B  +
xor edx edx +
div  [ebp+var_C] +
mov eax ebx +
sub eax edx +
cmp eax [ebp+var_4] +
ja loc_10231CE  +
push eax  +
push [ebp+var_8]  +
push esi  +
call sub_102A027  +
pop ecx  +
push eax  +
call sub_102B1AB  +
add esp 0Ch +
test eax eax +
jz loc_1023207  +
cmp eax 0FFFFFFFFh +
jz loc_10231F8  +
add [ebp+var_8] eax +
sub ebx eax +
sub [ebp+var_4] eax +
jmp loc_102318B  +
push esi  +
call sub_102AACA  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_10231FC  +
cmp [ebp+var_4] 0 +
jz loc_10231CE  +
mov ecx [ebp+var_8] +
inc [ebp+var_8]  +
mov [ecx] al +
mov eax [esi+18h] +
dec ebx  +
dec [ebp+var_4]  +
mov [ebp+var_C] eax +
test ebx ebx +
jnz loc_10230CB  +
mov eax [ebp+arg_C] +
jmp loc_10231C9  +
xor esi esi +
cmp [ebp+arg_4] 0FFFFFFFFh +
jz loc_10231AF  +
push [ebp+arg_4]  +
push esi  +
push [ebp+arg_0]  +
call sub_10219E0  +
add esp 0Ch +
call sub_102501E  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 22h +
push esi  +
call sub_1024FC5  +
add esp 14h +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
cmp [ebp+arg_4] 0FFFFFFFFh +
jz loc_10231E4  +
push [ebp+arg_4]  +
push 0  +
push [ebp+arg_0]  +
call sub_10219E0  +
add esp 0Ch +
call sub_102501E  +
mov dword ptr [eax] 22h +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
jmp loc_10231BF  +
or dword ptr [esi+0Ch] 20h +
mov eax edi +
sub eax ebx +
xor edx edx +
div  [ebp+arg_8] +
jmp loc_10231C9  +
or dword ptr [esi+0Ch] 10h +
jmp loc_10231FC  +
***
call sub_1022E04  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push 0FFFFFFFFh  +
push [ebp+arg_0]  +
call sub_1023212  +
add esp 14h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
xor edi edi +
cmp edx edi +
jz loc_1023318  +
mov ebx [ebp+arg_4] +
cmp ebx edi +
ja loc_1023336  +
call sub_102501E  +
push 16h  +
pop esi  +
mov [eax] esi +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
call sub_1024FC5  +
add esp 14h +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
mov esi [ebp+arg_8] +
cmp esi edi +
jnz loc_1023344  +
xor eax eax +
mov [edx] ax +
jmp loc_1023318  +
mov ecx edx +
movzx eax word ptr [esi] +
mov [ecx] ax +
inc ecx  +
inc ecx  +
inc esi  +
inc esi  +
cmp ax di +
jz loc_1023358  +
dec ebx  +
jnz loc_1023346  +
xor eax eax +
cmp ebx edi +
jnz loc_1023331  +
mov [edx] ax +
call sub_102501E  +
push 22h  +
pop ecx  +
mov [eax] ecx +
mov esi ecx +
jmp loc_1023322  +
***
call sub_1022E04  +
pop ecx  +
retn   +
***
cmp ebx edi +
jnz loc_102348A  +
mov eax [ebp+10h] +
cmp eax edi +
jz loc_102348A  +
mov dword ptr [eax] 0Ch +
mov eax ebx +
call sub_1022E49  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push edi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1023374  +
mov edi eax +
add esp 0Ch +
test edi edi +
jnz loc_10234D3  +
push esi  +
mov esi [ebp+var_4] +
test esi esi +
jz loc_10234D2  +
call sub_102501E  +
test eax eax +
jz loc_10234D2  +
call sub_102501E  +
mov [eax] esi +
pop esi  +
mov eax edi +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_4] +
add eax ecx +
cmp eax ecx +
jb loc_10234F7  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn   +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 5Ch +
mov eax dword_1063194 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
lea eax [ebp+var_C] +
push edi  +
xor esi esi +
push eax  +
mov [ebp+var_C] esi +
call sub_102383D  +
pop ecx  +
test eax eax +
jz loc_102353E  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
call sub_1024F1A  +
add esp 14h +
push 4  +
pop eax  +
call sub_102B290  +
mov [ebp+lpAddress] esp +
push 1Ch  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+lpAddress]  +
call ds:VirtualQuery  +
test eax eax +
jz loc_102365A  +
mov eax [ebp+Buffer.AllocationBase] +
mov [ebp+var_18] eax +
lea eax [ebp+SystemInfo] +
push eax  +
call ds:GetSystemInfo  +
mov edi [ebp+var_C] +
mov ebx [ebp+SystemInfo.dwPageSize] +
dec edi  +
neg edi  +
sbb edi edi +
and edi 103h +
inc edi  +
cmp [ebp+var_C] 2 +
mov [ebp+dwSize] esi +
jnz loc_10235D3  +
mov [ebp+var_10] esi +
mov esi ds:GetModuleHandleW +
push offset ModuleName  +
call esi  +
test eax eax +
jnz loc_10235AA  +
push offset aKernel32_dll_0  +
call esi  +
test eax eax +
jz loc_10235D3  +
push offset aSetthreadstack  +
push eax  +
call ds:GetProcAddress  +
test eax eax +
jz loc_10235D3  +
and [ebp+var_10] 0 +
lea ecx [ebp+var_10] +
push ecx  +
call eax  +
cmp eax 1 +
jnz loc_10235D3  +
mov eax [ebp+var_10] +
test eax eax +
jbe loc_10235D3  +
mov [ebp+dwSize] eax +
lea eax [ebp+dwSize] +
push eax  +
lea esi [ebx-1] +
push esi  +
push [ebp+dwSize]  +
call sub_10234DD  +
add esp 0Ch +
test eax eax +
jl loc_102365A  +
not esi  +
and [ebp+dwSize] esi +
jz loc_1023605  +
lea eax [ebp+dwSize] +
push eax  +
push ebx  +
push [ebp+dwSize]  +
call sub_10234DD  +
add esp 0Ch +
test eax eax +
jl loc_102365A  +
lea eax [ebx+ebx] +
cmp [ebp+dwSize] eax +
jnb loc_1023610  +
mov [ebp+dwSize] eax +
lea esi [ebx-1] +
not esi  +
and esi [ebp+lpAddress] +
sub esi [ebp+dwSize] +
cmp [ebp+var_C] 1 +
jnz loc_1023624  +
push 11h  +
pop ebx  +
mov eax [ebp+var_18] +
add ebx eax +
cmp esi ebx +
jb loc_102365A  +
push 4  +
push 1000h  +
push [ebp+dwSize]  +
push esi  +
call ds:VirtualAlloc  +
test eax eax +
jz loc_102365A  +
lea eax [ebp+flOldProtect] +
push eax  +
push edi  +
push [ebp+dwSize]  +
push esi  +
call ds:VirtualProtect  +
test eax eax +
jz loc_102365A  +
xor eax eax +
inc eax  +
jmp loc_102365C  +
xor eax eax +
lea esp [ebp-68h] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1021557  +
leave   +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-1Ch] +
xor ecx ebp +
call sub_1021557  +
jmp sub_1022E49  +
***
sub ecx eax +
and ecx 0Fh +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp sub_102B290  +
***
push ecx  +
lea ecx [esp+8] +
sub ecx eax +
and ecx 7 +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp sub_102B290  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_102373D  +
cmp dword ptr [eax+10h] 3 +
jnz loc_102373D  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_1023738  +
cmp eax 19930521h +
jz loc_1023738  +
cmp eax 19930522h +
jz loc_1023738  +
cmp eax 1994000h +
jnz loc_102373D  +
call sub_1024E71  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset byte_1023700+1)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_1023777  +
test eax eax +
jnz loc_102377C  +
mov ecx [esi] +
test ecx ecx +
jz loc_1023774  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_1023768  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
call sub_1023C53  +
push [ebp+arg_0]  +
call sub_1023AC9  +
push off_10631A0  +
call sub_102473C  +
push 0FFh  +
call eax  +
add esp 0Ch +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset aMscoree_dll  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_10237DB  +
push offset aCorexitprocess  +
push eax  +
call ds:GetProcAddress  +
test eax eax +
jz loc_10237DB  +
push [ebp+arg_0]  +
call eax  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
call sub_10237B2  +
pop ecx  +
push dword ptr [ebp+8]  +
call ds:ExitProcess  +
pop ecx  +
retn   +
***
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi eax +
jmp loc_1023830  +
mov eax [esi] +
test eax eax +
jz loc_102382D  +
call eax  +
add esi 4 +
cmp esi [ebp+arg_0] +
jb loc_1023825  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push esi  +
xor esi esi +
cmp ecx esi +
jnz loc_1023869  +
call sub_102501E  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_1024FC5  +
add esp 14h +
push 16h  +
pop eax  +
jmp loc_1023876  +
mov eax dword_1064C0C +
cmp eax esi +
jz loc_102384C  +
mov [ecx] eax +
xor eax eax +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
xor esi esi +
cmp eax esi +
jnz loc_10238AA  +
call sub_102501E  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_1024FC5  +
add esp 14h +
push 16h  +
pop eax  +
jmp loc_10238BC  +
cmp dword_1064C0C esi +
jz loc_102388D  +
mov ecx dword_1064C18 +
mov [eax] ecx +
xor eax eax +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp ds:off_1007500 0 +
jz loc_10238EB  +
push offset off_1007500  +
call sub_102AA59  +
pop ecx  +
test eax eax +
jz loc_10238EB  +
push [ebp+arg_0]  +
call ds:off_1007500  +
pop ecx  +
call sub_102B2C0  +
call sub_102472E  +
push offset dword_10015E4  +
push offset dword_10015CC  +
mov dword_1066E44 eax +
mov dword_1066E48 eax +
call sub_102375B  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_102394A  +
push offset dword_10015C8  +
mov eax offset dword_100154C +
call sub_102381B  +
cmp dword_1066E54 0 +
pop ecx  +
jz loc_1023948  +
push offset dword_1066E54  +
call sub_102AA59  +
pop ecx  +
test eax eax +
jz loc_1023948  +
push 0  +
push 2  +
push 0  +
call dword_1066E54  +
xor eax eax +
pop ebp  +
retn   +
***
call sub_1022E04  +
cmp dword ptr [ebp+10h] 0 +
jz locret_1023A18  +
push 8  +
call sub_1025128  +
pop ecx  +
retn   +
***
call sub_1022E49  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 0  +
push [ebp+arg_0]  +
call sub_1023951  +
add esp 0Ch +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 1  +
push [ebp+arg_0]  +
call sub_1023951  +
add esp 0Ch +
pop ebp  +
retn   +
***
push 0  +
call sub_1023951  +
add esp 0Ch +
retn   +
***
push 0  +
call sub_1023951  +
add esp 0Ch +
retn   +
***
mov edi edi +
push esi  +
call sub_102472E  +
mov esi eax +
push esi  +
call sub_1025D79  +
push esi  +
call sub_102B520  +
push esi  +
call sub_102B50C  +
push esi  +
call sub_102B2E6  +
push esi  +
call nullsub_1  +
push esi  +
call sub_1024F04  +
push offset sub_1023A3F  +
call sub_10246B6  +
add esp 1Ch +
mov off_10631A0 eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
xor ebx ebx +
xor esi esi +
push edi  +
mov edi [ebp+arg_0] +
mov [ebp+var_4] esi +
cmp edi dword_10631A8[esi*8] +
jz loc_1023AEF  +
inc esi  +
mov [ebp+var_4] esi +
cmp esi 17h +
jb loc_1023ADD  +
cmp esi 17h +
jnb loc_1023C49  +
push 3  +
call sub_102B8CD  +
pop ecx  +
cmp eax 1 +
jz loc_1023C13  +
push 3  +
call sub_102B8CD  +
pop ecx  +
test eax eax +
jnz loc_1023B22  +
cmp dword_1063190 1 +
jz loc_1023C13  +
cmp edi 0FCh +
jz loc_1023C49  +
push offset aRuntimeErrorPr  +
mov edi 314h +
push edi  +
mov esi offset unk_1064C50 +
push esi  +
call sub_102B860  +
add esp 0Ch +
test eax eax +
jz loc_1023B58  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call sub_1024F1A  +
add esp 14h +
mov byte_1064D6D bl +
push 104h  +
mov ebx offset Filename +
push ebx  +
push 0  +
call ds:GetModuleFileNameA  +
test eax eax +
jnz loc_1023B9B  +
push offset aProgramNameUnk  +
push 2FBh  +
push ebx  +
call sub_102B860  +
add esp 0Ch +
test eax eax +
jz loc_1023B9B  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
call sub_1024F1A  +
add esp 14h +
push ebx  +
push edi  +
push esi  +
call sub_102B7E7  +
add esp 0Ch +
xor ebx ebx +
test eax eax +
jz loc_1023BB9  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call sub_1024F1A  +
add esp 14h +
push offset asc_1005EA0  +
push edi  +
push esi  +
call sub_102B7E7  +
add esp 0Ch +
test eax eax +
jz loc_1023BD9  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call sub_1024F1A  +
add esp 14h +
mov eax [ebp+var_4] +
push off_10631AC[eax*8]  +
push edi  +
push esi  +
call sub_102B7E7  +
add esp 0Ch +
test eax eax +
jz loc_1023BFE  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call sub_1024F1A  +
add esp 14h +
push 12010h  +
push offset aMicrosoftVisua  +
push esi  +
call sub_102B640  +
add esp 0Ch +
jmp loc_1023C49  +
push 0FFFFFFF4h  +
call ds:GetStdHandle  +
mov edi eax +
cmp edi ebx +
jz loc_1023C49  +
cmp edi 0FFFFFFFFh +
jz loc_1023C49  +
mov edx off_10631AC[esi*8] +
mov ecx edx +
lea esi [ecx+1] +
mov al [ecx] +
inc ecx  +
test al al +
jnz loc_1023C32  +
push ebx  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
sub ecx esi +
push ecx  +
push edx  +
push edi  +
call ds:WriteFile  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
pop ecx  +
cmp eax 1 +
jz loc_1023C75  +
push 3  +
call sub_102B8CD  +
pop ecx  +
test eax eax +
jnz locret_1023C8B  +
cmp dword_1063190 1 +
jnz locret_1023C8B  +
push 0FCh  +
call sub_1023AC9  +
push 0FFh  +
call sub_1023AC9  +
pop ecx  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
call sub_1024900  +
mov esi eax +
test esi esi +
jz loc_1023DEE  +
mov edx [esi+5Ch] +
mov eax dword_10632E4 +
push edi  +
mov edi [ebp+arg_0] +
mov ecx edx +
push ebx  +
cmp [ecx] edi +
jz loc_1023CC9  +
mov ebx eax +
imul ebx ebx +
add ecx 0Ch +
add ebx edx +
cmp ecx ebx +
jb loc_1023CB7  +
imul eax eax +
add eax edx +
cmp ecx eax +
jnb loc_1023CDA  +
cmp [ecx] edi +
jnz loc_1023CDA  +
mov eax ecx +
jmp loc_1023CDC  +
xor eax eax +
test eax eax +
jz loc_1023CEA  +
mov ebx [eax+8] +
mov [ebp+var_4] ebx +
test ebx ebx +
jnz loc_1023CF1  +
xor eax eax +
jmp loc_1023DEC  +
cmp ebx 5 +
jnz loc_1023D02  +
and dword ptr [eax+8] 0 +
xor eax eax +
inc eax  +
jmp loc_1023DEC  +
cmp ebx 1 +
jz loc_1023DE9  +
mov ecx [esi+60h] +
mov [ebp+var_8] ecx +
mov ecx [ebp+arg_4] +
mov [esi+60h] ecx +
mov ecx [eax+4] +
cmp ecx 8 +
jnz loc_1023DDB  +
mov ecx dword_10632D8 +
mov edi dword_10632DC +
mov edx ecx +
add edi ecx +
cmp edx edi +
jge loc_1023D5B  +
imul ecx ecx +
mov edi [esi+5Ch] +
and dword ptr [ecx+edi+8] 0 +
mov edi dword_10632D8 +
mov ebx dword_10632DC +
inc edx  +
add ebx edi +
add ecx 0Ch +
cmp edx ebx +
jl loc_1023D3A  +
mov ebx [ebp+var_4] +
mov eax [eax] +
mov edi [esi+64h] +
cmp eax 0C000008Eh +
jnz loc_1023D70  +
mov dword ptr [esi+64h] 83h +
jmp loc_1023DCE  +
cmp eax 0C0000090h +
jnz loc_1023D80  +
mov dword ptr [esi+64h] 81h +
jmp loc_1023DCE  +
cmp eax 0C0000091h +
jnz loc_1023D90  +
mov dword ptr [esi+64h] 84h +
jmp loc_1023DCE  +
cmp eax 0C0000093h +
jnz loc_1023DA0  +
mov dword ptr [esi+64h] 85h +
jmp loc_1023DCE  +
cmp eax 0C000008Dh +
jnz loc_1023DB0  +
mov dword ptr [esi+64h] 82h +
jmp loc_1023DCE  +
cmp eax 0C000008Fh +
jnz loc_1023DC0  +
mov dword ptr [esi+64h] 86h +
jmp loc_1023DCE  +
cmp eax 0C0000092h +
jnz loc_1023DCE  +
mov dword ptr [esi+64h] 8Ah +
push dword ptr [esi+64h]  +
push 8  +
call ebx  +
pop ecx  +
mov [esi+64h] edi +
jmp loc_1023DE2  +
and dword ptr [eax+8] 0 +
push ecx  +
call ebx  +
mov eax [ebp+var_8] +
pop ecx  +
mov [esi+60h] eax +
or eax 0FFFFFFFFh +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov eax dword_1066E58 +
xor edx edx +
test eax eax +
jnz loc_1023E06  +
mov eax offset word_10022EC +
movzx ecx word ptr [eax] +
cmp cx 20h +
ja loc_1023E18  +
test cx cx +
jz locret_1023E3B  +
test edx edx +
jz loc_1023E33  +
cmp cx 22h +
jnz loc_1023E27  +
xor ecx ecx +
test edx edx +
setz cl  +
mov edx ecx +
inc eax  +
inc eax  +
jmp loc_1023E06  +
cmp cx 20h +
ja locret_1023E3B  +
inc eax  +
inc eax  +
movzx ecx word ptr [eax] +
test cx cx +
jnz loc_1023E2B  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov ecx dword_1064C00 +
test ecx ecx +
jnz loc_1023E57  +
or eax 0FFFFFFFFh +
leave   +
retn   +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
xor edi edi +
jmp loc_1023E84  +
mov eax ecx +
lea esi [eax+2] +
mov [ebp+var_4] esi +
mov si [eax] +
inc eax  +
inc eax  +
test si si +
jnz loc_1023E68  +
sub eax [ebp+var_4] +
sar eax 1 +
inc eax  +
cmp dx 3Dh +
jz loc_1023E81  +
inc ebx  +
add edi eax +
lea ecx [ecx+eax*2] +
movzx edx word ptr [ecx] +
test dx dx +
jnz loc_1023E60  +
lea edi [edi+ebx*2+2] +
add edi edi +
push 1  +
push edi  +
call sub_1023497  +
mov esi eax +
pop ecx  +
pop ecx  +
test esi esi +
jnz loc_1023EAA  +
or eax 0FFFFFFFFh +
jmp loc_1023F48  +
lea eax [esi+edi] +
mov edi dword_1064C00 +
lea edx [esi+ebx*4+4] +
mov dword_1064C38 esi +
mov dword_1066E50 eax +
mov dword_1064C34 esi +
mov [ebp+var_4] edx +
jmp loc_1023F1E  +
mov eax edi +
lea ebx [eax+2] +
mov [ebp+var_8] ebx +
mov bx [eax] +
inc eax  +
inc eax  +
test bx bx +
jnz loc_1023ED5  +
sub eax [ebp+var_8] +
sar eax 1 +
lea ebx [eax+1] +
cmp cx 3Dh +
jz loc_1023F1B  +
push edi  +
push ebx  +
push edx  +
mov [esi] edx +
call sub_1023300  +
add esp 0Ch +
test eax eax +
jz loc_1023F0D  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
call sub_1024F1A  +
add esp 14h +
mov eax [ebp+var_4] +
lea eax [eax+ebx*2] +
mov [ebp+var_4] eax +
add esi 4 +
mov edx eax +
lea edi [edi+ebx*2] +
movzx ecx word ptr [edi] +
test cx cx +
jnz loc_1023ECD  +
push dword_1064C00  +
call sub_10213A1  +
and dword_1064C00 0 +
and dword ptr [esi] 0 +
pop ecx  +
mov dword_1066E40 1 +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
ja loc_1023F70  +
mov eax [ebp+arg_0] +
jb loc_1023F67  +
cmp eax 0FFFFFFFFh +
ja loc_1023F70  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn   +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov ecx [eax] +
mov edx [esi] +
and dword ptr [eax] 0 +
push edi  +
xor edi edi +
inc edi  +
cmp [ebp+arg_4] 0 +
mov [ebp+var_4] ecx +
mov ecx [ebp+arg_0] +
mov [ebp+var_C] edx +
mov [esi] edi +
jz loc_1023FB6  +
cmp edx edi +
jl loc_1023FB6  +
mov edi [ebp+arg_4] +
mov edx [ebp+arg_8] +
add [ebp+arg_4] 4 +
mov [edi] edx +
xor edi edi +
push ebx  +
push 22h  +
pop edx  +
cmp [ecx] dx +
jnz loc_1023FCE  +
xor ebx ebx +
test edi edi +
setz bl  +
inc ecx  +
inc ecx  +
mov edi ebx +
jmp loc_1023FF4  +
inc dword ptr [eax]  +
cmp [ebp+arg_8] 0 +
mov edx [eax] +
jz loc_1023FEA  +
cmp edx [ebp+var_4] +
jg loc_1023FEA  +
mov ebx [ebp+arg_8] +
mov dx [ecx] +
add [ebp+arg_8] 2 +
mov [ebx] dx +
movzx edx word ptr [ecx] +
inc ecx  +
inc ecx  +
test dx dx +
jz loc_1024033  +
test edi edi +
jnz loc_1023FB9  +
cmp dx 20h +
jz loc_1024004  +
cmp dx 9 +
jnz loc_1023FB9  +
mov edx [ebp+arg_8] +
test edx edx +
jz loc_1024011  +
xor edi edi +
mov [edx-2] di +
and [ebp+arg_0] 0 +
xor edi edi +
cmp [ecx] di +
jz loc_1024129  +
movzx edx word ptr [ecx] +
cmp dx 20h +
jz loc_102402F  +
cmp dx 9 +
jnz loc_1024037  +
inc ecx  +
inc ecx  +
jmp loc_1024020  +
dec ecx  +
dec ecx  +
jmp loc_1024011  +
cmp [ecx] di +
jz loc_1024129  +
inc dword ptr [esi]  +
mov edx [esi] +
cmp [ebp+arg_4] edi +
jz loc_102405A  +
cmp edx [ebp+var_C] +
jg loc_102405A  +
mov edi [ebp+arg_4] +
mov edx [ebp+arg_8] +
add [ebp+arg_4] 4 +
mov [edi] edx +
mov [ebp+var_8] 1 +
xor ebx ebx +
jmp loc_1024068  +
inc ecx  +
inc ecx  +
inc ebx  +
cmp word ptr [ecx] 5Ch +
jz loc_1024065  +
cmp word ptr [ecx] 22h +
jnz loc_10240BC  +
test bl 1 +
jnz loc_102409B  +
xor edi edi +
cmp [ebp+arg_0] edi +
jz loc_102408D  +
lea edx [ecx+2] +
cmp word ptr [edx] 22h +
jnz loc_102408D  +
mov ecx edx +
jmp loc_1024090  +
mov [ebp+var_8] edi +
xor edx edx +
cmp [ebp+arg_0] edx +
setz dl  +
mov [ebp+arg_0] edx +
shr ebx 1 +
jmp loc_10240BC  +
dec ebx  +
inc dword ptr [eax]  +
cmp [ebp+arg_8] 0 +
mov edx [eax] +
jz loc_10240BC  +
cmp edx [ebp+var_4] +
jg loc_10240BC  +
mov edi [ebp+arg_8] +
add [ebp+arg_8] 2 +
push 5Ch  +
pop edx  +
mov [edi] dx +
test ebx ebx +
jnz loc_102409F  +
movzx edx word ptr [ecx] +
xor edi edi +
cmp dx di +
jz loc_1024102  +
cmp [ebp+arg_0] edi +
jnz loc_10240DB  +
cmp dx 20h +
jz loc_1024102  +
cmp dx 9 +
jz loc_1024102  +
cmp [ebp+var_8] edi +
jz loc_10240FB  +
inc dword ptr [eax]  +
mov edx [eax] +
cmp [ebp+arg_8] edi +
jz loc_10240FB  +
cmp edx [ebp+var_4] +
jg loc_10240FB  +
mov edi [ebp+arg_8] +
mov dx [ecx] +
add [ebp+arg_8] 2 +
mov [edi] dx +
inc ecx  +
inc ecx  +
jmp loc_102405A  +
inc dword ptr [eax]  +
mov edx [eax] +
cmp [ebp+arg_8] edi +
jz loc_1024015  +
cmp edx [ebp+var_4] +
jg loc_1024015  +
mov edi [ebp+arg_8] +
xor edx edx +
add [ebp+arg_8] 2 +
mov [edi] dx +
jmp loc_1024015  +
inc dword ptr [esi]  +
mov ecx [ebp+arg_4] +
mov eax [esi] +
pop ebx  +
cmp ecx edi +
jz loc_102413C  +
cmp eax [ebp+var_C] +
jg loc_102413C  +
mov [ecx] edi +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
push 104h  +
xor ebx ebx +
mov esi offset word_1064F68 +
push esi  +
xor eax eax +
push ebx  +
mov [ebp+var_4] ebx +
mov [ebp+var_C] ebx +
mov word_1065170 ax +
call ds:GetModuleFileNameW  +
mov eax dword_1066E58 +
mov dword_1064C40 esi +
cmp eax ebx +
jz loc_1024188  +
mov [ebp+var_8] eax +
cmp [eax] bx +
jnz loc_102418B  +
mov [ebp+var_8] esi +
push ebx  +
push ebx  +
push [ebp+var_8]  +
lea eax [ebp+var_C] +
lea esi [ebp+var_4] +
call sub_1023F82  +
mov esi [ebp+var_4] +
lea eax [ebp+var_14] +
push eax  +
push 4  +
pop ecx  +
mov eax esi +
mul  ecx +
push edx  +
push eax  +
call sub_1023F52  +
add esp 18h +
test eax eax +
jl loc_102421F  +
lea eax [ebp+var_10] +
push eax  +
mov eax [ebp+var_C] +
push 4  +
pop ecx  +
mul  ecx +
push edx  +
push eax  +
call sub_1023F52  +
add esp 0Ch +
test eax eax +
jl loc_102421F  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+var_10]  +
push [ebp+var_14]  +
call sub_10234DD  +
add esp 0Ch +
test eax eax +
jl loc_102421F  +
push [ebp+var_14]  +
call sub_1021488  +
mov edi eax +
pop ecx  +
cmp edi ebx +
jz loc_102421F  +
lea eax [edi+esi*4] +
push eax  +
push edi  +
push [ebp+var_8]  +
lea eax [ebp+var_C] +
lea esi [ebp+var_4] +
call sub_1023F82  +
mov eax [ebp+var_4] +
add esp 0Ch +
dec eax  +
mov dword_1064C20 eax +
mov dword_1064C28 edi +
xor eax eax +
jmp loc_1024222  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov eax dword_1065174 +
push ebx  +
push esi  +
xor ebx ebx +
xor esi esi +
push edi  +
mov edi ds:GetEnvironmentStringsW +
mov [ebp+var_4] ebx +
cmp eax ebx +
jnz loc_102427B  +
call edi  +
mov esi eax +
cmp esi ebx +
jz loc_1024261  +
mov dword_1065174 1 +
jmp loc_1024280  +
call ds:GetLastError  +
cmp eax 78h +
jnz loc_1024276  +
push 2  +
pop eax  +
mov dword_1065174 eax +
jmp loc_102427B  +
mov eax dword_1065174 +
cmp eax 1 +
jnz loc_10242DB  +
cmp esi ebx +
jnz loc_1024293  +
call edi  +
mov esi eax +
cmp esi ebx +
jnz loc_1024293  +
xor eax eax +
jmp loc_10243AC  +
mov eax esi +
cmp [esi] bx +
jz loc_10242A8  +
inc eax  +
inc eax  +
cmp [eax] bx +
jnz loc_102429A  +
inc eax  +
inc eax  +
cmp [eax] bx +
jnz loc_102429A  +
sub eax esi +
inc eax  +
inc eax  +
push eax  +
mov [ebp+var_4] eax +
call sub_1021488  +
mov edi eax +
pop ecx  +
cmp edi ebx +
jnz loc_10242CC  +
xor edi edi +
push esi  +
call ds:FreeEnvironmentStringsW  +
mov eax edi +
jmp loc_10243AC  +
push [ebp+var_4]  +
push esi  +
push edi  +
call loc_1022620  +
add esp 0Ch +
jmp loc_10242BE  +
cmp eax 2 +
jz loc_10242E4  +
cmp eax ebx +
jnz loc_102428C  +
call ds:GetEnvironmentStrings  +
mov esi eax +
mov [ebp+var_8] esi +
cmp esi ebx +
jz loc_102428C  +
cmp [esi] bl +
jz loc_1024325  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push esi  +
push 1  +
push ebx  +
call ds:MultiByteToWideChar  +
cmp eax ebx +
jz loc_102428C  +
add [ebp+var_4] eax +
mov eax esi +
lea edi [eax+1] +
mov cl [eax] +
inc eax  +
cmp cl bl +
jnz loc_1024311  +
sub eax edi +
lea esi [esi+eax+1] +
cmp [esi] bl +
jnz loc_10242F7  +
mov esi [ebp+var_8] +
inc [ebp+var_4]  +
push 2  +
push [ebp+var_4]  +
call sub_1023497  +
mov edi eax +
pop ecx  +
pop ecx  +
mov [ebp+var_C] edi +
cmp edi ebx +
jnz loc_1024349  +
push esi  +
call ds:FreeEnvironmentStringsA  +
jmp loc_102428C  +
mov eax [ebp+var_8] +
cmp [eax] bl +
jz loc_102439B  +
mov ecx [ebp+var_4] +
mov eax edi +
sub eax [ebp+var_C] +
sar eax 1 +
sub ecx eax +
push ecx  +
push edi  +
push 0FFFFFFFFh  +
push esi  +
push 1  +
push ebx  +
call ds:MultiByteToWideChar  +
test eax eax +
jz loc_10243B1  +
mov eax esi +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
cmp dl bl +
jnz loc_1024373  +
sub eax ecx +
lea esi [esi+eax+1] +
mov eax edi +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx bx +
jnz loc_1024385  +
sub eax ecx +
sar eax 1 +
lea edi [edi+eax*2+2] +
cmp [esi] bl +
jnz loc_1024350  +
push [ebp+var_8]  +
xor eax eax +
mov [edi] ax +
call ds:FreeEnvironmentStringsA  +
mov eax [ebp+var_C] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
push [ebp+var_C]  +
call sub_10213A1  +
pop ecx  +
push [ebp+var_8]  +
jmp loc_102433E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax dword_1065178 +
push esi  +
mov esi ds:GetCommandLineW +
test eax eax +
jnz loc_102440B  +
call esi  +
test eax eax +
jz loc_10243F0  +
mov dword_1065178 1 +
jmp loc_1024410  +
call ds:GetLastError  +
cmp eax 78h +
jnz loc_1024407  +
mov dword_1065178 2 +
jmp loc_1024419  +
xor eax eax +
jmp loc_102446F  +
cmp eax 1 +
jnz loc_1024414  +
call esi  +
jmp loc_102446F  +
cmp eax 2 +
jnz loc_1024407  +
push edi  +
call ds:GetCommandLineA  +
mov esi ds:MultiByteToWideChar +
push 0  +
push 0  +
push 0FFFFFFFFh  +
push eax  +
push 1  +
push 0  +
mov [ebp+lpMultiByteStr] eax +
call esi  +
mov edi eax +
test edi edi +
jz loc_102446C  +
push 2  +
push edi  +
call sub_1023497  +
pop ecx  +
pop ecx  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_102446C  +
push edi  +
push eax  +
push 0FFFFFFFFh  +
push [ebp+lpMultiByteStr]  +
push 1  +
push 0  +
call esi  +
test eax eax +
jz loc_1024463  +
mov eax [ebp+var_4] +
jmp loc_102446E  +
push [ebp+var_4]  +
call sub_10213A1  +
pop ecx  +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn   +
***
call sub_1022E04  +
xor esi esi +
mov [ebp-4] esi +
lea eax [ebp-64h] +
push eax  +
call ds:GetStartupInfoA  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
push 24h  +
push 20h  +
pop edi  +
push edi  +
call sub_1023497  +
pop ecx  +
pop ecx  +
cmp eax esi +
jz loc_10246A8  +
mov dword_1066D40 eax +
mov uNumber edi +
lea ecx [eax+480h] +
jmp loc_10244E6  +
mov byte ptr [eax+4] 0 +
or dword ptr [eax] 0FFFFFFFFh +
mov byte ptr [eax+5] 0Ah +
mov [eax+8] esi +
mov byte ptr [eax+6] 0Ah +
mov byte ptr [eax+7] 0Ah +
add eax 24h +
mov ecx dword_1066D40 +
add ecx 480h +
cmp eax ecx +
jb loc_10244C1  +
cmp [ebp-32h] si +
jz loc_10245EE  +
mov eax [ebp-30h] +
cmp eax esi +
jz loc_10245EE  +
mov edi [eax] +
lea ebx [eax+4] +
lea eax [ebx+edi] +
mov [ebp-1Ch] eax +
mov eax 800h +
cmp edi eax +
jl loc_1024515  +
mov edi eax +
xor esi esi +
inc esi  +
jmp loc_1024568  +
push 24h  +
push 20h  +
call sub_1023497  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1024572  +
lea ecx dword_1066D40[esi*4] +
mov [ecx] eax +
add uNumber 20h +
lea edx [eax+480h] +
jmp loc_1024563  +
mov byte ptr [eax+4] 0 +
or dword ptr [eax] 0FFFFFFFFh +
mov byte ptr [eax+5] 0Ah +
and dword ptr [eax+8] 0 +
mov byte ptr [eax+6] 0Ah +
mov byte ptr [eax+7] 0Ah +
add eax 24h +
mov edx [ecx] +
add edx 480h +
cmp eax edx +
jb loc_1024541  +
inc esi  +
cmp uNumber edi +
jl loc_102451A  +
jmp loc_1024578  +
mov edi uNumber +
and dword ptr [ebp-20h] 0 +
test edi edi +
jle loc_10245EE  +
mov eax [ebp-1Ch] +
mov ecx [eax] +
cmp ecx 0FFFFFFFFh +
jz loc_10245E1  +
cmp ecx 0FFFFFFFEh +
jz loc_10245E1  +
mov al [ebx] +
test al 1 +
jz loc_10245E1  +
test al 8 +
jnz loc_10245A4  +
push ecx  +
call ds:GetFileType  +
test eax eax +
jz loc_10245E1  +
mov esi [ebp-20h] +
mov eax esi +
sar eax 5 +
and esi 1Fh +
imul esi esi +
add esi dword_1066D40[eax*4] +
mov eax [ebp-1Ch] +
mov eax [eax] +
mov [esi] eax +
mov al [ebx] +
mov [esi+4] al +
push 0FA0h  +
lea eax [esi+0Ch] +
push eax  +
call sub_102B54E  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10246A8  +
or dword ptr [esi+8] 4 +
inc dword ptr [ebp-20h]  +
inc ebx  +
add dword ptr [ebp-1Ch] 4 +
cmp [ebp-20h] edi +
jl loc_1024580  +
xor ebx ebx +
mov esi ebx +
imul esi esi +
add esi dword_1066D40 +
mov eax [esi] +
cmp eax 0FFFFFFFFh +
jz loc_102460D  +
cmp eax 0FFFFFFFEh +
jz loc_102460D  +
or byte ptr [esi+4] 80h +
jmp loc_1024680  +
mov byte ptr [esi+4] 81h +
test ebx ebx +
jnz loc_102461A  +
push 0FFFFFFF6h  +
pop eax  +
jmp loc_1024624  +
mov eax ebx +
dec eax  +
neg eax  +
sbb eax eax +
add eax 0FFFFFFF5h +
push eax  +
call ds:GetStdHandle  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jz loc_1024676  +
test edi edi +
jz loc_1024676  +
push edi  +
call ds:GetFileType  +
test eax eax +
jz loc_1024676  +
mov [esi] edi +
and eax 0FFh +
cmp eax 2 +
jnz loc_1024653  +
or byte ptr [esi+4] 40h +
jmp loc_102465C  +
cmp eax 3 +
jnz loc_102465C  +
or byte ptr [esi+4] 8 +
push 0FA0h  +
lea eax [esi+0Ch] +
push eax  +
call sub_102B54E  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10246A8  +
or dword ptr [esi+8] 4 +
jmp loc_1024680  +
or byte ptr [esi+4] 40h +
mov dword ptr [esi] 0FFFFFFFEh +
inc ebx  +
cmp ebx 3 +
jl loc_10245F0  +
push uNumber  +
call ds:SetHandleCount  +
xor eax eax +
jmp loc_10246AB  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
or eax 0FFFFFFFFh +
call sub_1022E49  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dwTlsIndex  +
mov esi ds:TlsGetValue +
call esi  +
test eax eax +
jz loc_10246EF  +
mov eax dword_1063310 +
cmp eax 0FFFFFFFFh +
jz loc_10246EF  +
push eax  +
push dwTlsIndex  +
call esi  +
call eax  +
test eax eax +
jz loc_10246EF  +
mov eax [eax+1F8h] +
jmp loc_1024717  +
mov esi ds:GetModuleHandleW +
push offset aKernelbase_d_0  +
call esi  +
test eax eax +
jnz loc_102470B  +
push offset LibFileName  +
call esi  +
test eax eax +
jz loc_1024723  +
push offset aEncodepointer  +
push eax  +
call ds:GetProcAddress  +
test eax eax +
jz loc_1024723  +
push [ebp+arg_0]  +
call eax  +
mov [ebp+arg_0] eax +
mov eax [ebp+arg_0] +
pop esi  +
pop ebp  +
retn   +
***
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dwTlsIndex  +
mov esi ds:TlsGetValue +
call esi  +
test eax eax +
jz loc_1024775  +
mov eax dword_1063310 +
cmp eax 0FFFFFFFFh +
jz loc_1024775  +
push eax  +
push dwTlsIndex  +
call esi  +
call eax  +
test eax eax +
jz loc_1024775  +
mov eax [eax+1FCh] +
jmp loc_102479D  +
mov esi ds:GetModuleHandleW +
push offset aKernelbase_d_0  +
call esi  +
test eax eax +
jnz loc_1024791  +
push offset LibFileName  +
call esi  +
test eax eax +
jz loc_10247A9  +
push offset aDecodepointer  +
push eax  +
call ds:GetProcAddress  +
test eax eax +
jz loc_10247A9  +
push [ebp+arg_0]  +
call eax  +
mov [ebp+arg_0] eax +
mov eax [ebp+arg_0] +
pop esi  +
pop ebp  +
retn   +
***
call ds:TlsAlloc  +
retn 4  +
***
test eax eax +
jnz locret_10247EB  +
push lpTlsValue  +
call sub_102473C  +
pop ecx  +
push eax  +
push dwTlsIndex  +
call ds:TlsSetValue  +
retn   +
***
mov eax dword_1063310 +
cmp eax 0FFFFFFFFh +
jz loc_1024811  +
push eax  +
push dword_1065188  +
call sub_102473C  +
pop ecx  +
call eax  +
or dword_1063310 0FFFFFFFFh +
mov eax dwTlsIndex +
cmp eax 0FFFFFFFFh +
jz loc_1024829  +
push eax  +
call ds:TlsFree  +
or dwTlsIndex 0FFFFFFFFh +
jmp loc_10250CC  +
***
call sub_1022E04  +
pop ecx  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
call ds:GetLastError  +
mov edi eax +
call sub_10247C2  +
push dword_1063310  +
push dwTlsIndex  +
call ds:TlsGetValue  +
call eax  +
mov esi eax +
test esi esi +
jnz loc_1024970  +
push 214h  +
push 1  +
call sub_102B91D  +
mov esi eax +
pop ecx  +
pop ecx  +
test esi esi +
jz loc_1024970  +
push esi  +
push dword_1063310  +
push dword_1065184  +
call sub_102473C  +
pop ecx  +
call eax  +
test eax eax +
jz loc_1024967  +
push 0  +
push esi  +
call sub_1024833  +
or dword ptr [esi+4] 0FFFFFFFFh +
pop ecx  +
jmp loc_102496F  +
push esi  +
call sub_10213A1  +
xor esi esi +
pop ecx  +
push edi  +
call ds:SetLastError  +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
call sub_1024900  +
mov esi eax +
test esi esi +
jnz loc_1024997  +
push 10h  +
call sub_1023784  +
pop ecx  +
mov eax esi +
pop esi  +
retn   +
***
push 8  +
push offset dword_105C260  +
call sub_1022E04  +
mov esi [ebp+8] +
test esi esi +
jz loc_1024ACB  +
mov eax [esi+24h] +
test eax eax +
jz loc_10249C5  +
push eax  +
call sub_10213A1  +
pop ecx  +
mov eax [esi+28h] +
test eax eax +
jz loc_10249D3  +
push eax  +
call sub_10213A1  +
pop ecx  +
mov eax [esi+2Ch] +
test eax eax +
jz loc_10249E1  +
push eax  +
call sub_10213A1  +
pop ecx  +
mov eax [esi+30h] +
test eax eax +
jz loc_10249EF  +
push eax  +
call sub_10213A1  +
pop ecx  +
mov eax [esi+34h] +
test eax eax +
jz loc_10249FD  +
push eax  +
call sub_10213A1  +
pop ecx  +
mov eax [esi+3Ch] +
test eax eax +
jz loc_1024A0B  +
push eax  +
call sub_10213A1  +
pop ecx  +
mov eax [esi+40h] +
test eax eax +
jz loc_1024A19  +
push eax  +
call sub_10213A1  +
pop ecx  +
mov eax [esi+44h] +
test eax eax +
jz loc_1024A27  +
push eax  +
call sub_10213A1  +
pop ecx  +
mov eax [esi+48h] +
test eax eax +
jz loc_1024A35  +
push eax  +
call sub_10213A1  +
pop ecx  +
mov eax [esi+5Ch] +
cmp eax offset unk_1063260 +
jz loc_1024A46  +
push eax  +
call sub_10213A1  +
pop ecx  +
push 0Dh  +
call sub_102520C  +
pop ecx  +
and dword ptr [ebp-4] 0 +
mov edi [esi+68h] +
test edi edi +
jz loc_1024A73  +
push edi  +
call ds:InterlockedDecrement  +
test eax eax +
jnz loc_1024A73  +
cmp edi offset Addend +
jz loc_1024A73  +
push edi  +
call sub_10213A1  +
pop ecx  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1024AD6  +
push 0Ch  +
call sub_102520C  +
pop ecx  +
mov dword ptr [ebp-4] 1 +
mov edi [esi+6Ch] +
test edi edi +
jz loc_1024AB8  +
push edi  +
call sub_1026AE0  +
pop ecx  +
cmp edi off_1063BB8 +
jz loc_1024AB8  +
cmp edi offset unk_1063AE0 +
jz loc_1024AB8  +
cmp dword ptr [edi] 0 +
jnz loc_1024AB8  +
push edi  +
call sub_10268FE  +
pop ecx  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1024AE2  +
push esi  +
call sub_10213A1  +
pop ecx  +
call sub_1022E49  +
retn 4  +
***
pop ecx  +
pop ecx  +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
push offset LibFileName  +
call ds:GetModuleHandleW  +
mov edi eax +
xor ebx ebx +
cmp edi ebx +
jz loc_1024B42  +
mov esi ds:GetProcAddress +
push offset aFlsalloc  +
push edi  +
call esi  +
push offset aFlsgetvalue  +
push edi  +
mov dword_106517C eax +
call esi  +
push offset aFlssetvalue  +
push edi  +
mov lpTlsValue eax +
call esi  +
push offset aFlsfree  +
push edi  +
mov dword_1065184 eax +
call esi  +
mov dword_1065188 eax +
mov esi ds:TlsSetValue +
cmp dword_106517C ebx +
jz loc_1024B68  +
cmp lpTlsValue ebx +
jz loc_1024B68  +
cmp dword_1065184 ebx +
jz loc_1024B68  +
cmp dword_1065188 ebx +
jnz loc_1024B8C  +
mov eax ds:TlsGetValue +
mov lpTlsValue eax +
mov eax ds:TlsFree +
mov dword_106517C offset loc_10247B4 +
mov dword_1065184 esi +
mov dword_1065188 eax +
call ds:TlsAlloc  +
mov dwTlsIndex eax +
cmp eax 0FFFFFFFFh +
jz loc_1024BFF  +
push lpTlsValue  +
push eax  +
call esi  +
test eax eax +
jz loc_1024BFF  +
call sub_1023A82  +
push dword_106517C  +
call sub_10246B6  +
push lpTlsValue  +
mov dword_106517C eax +
call sub_10246B6  +
push dword_1065184  +
mov lpTlsValue eax +
call sub_10246B6  +
push dword_1065188  +
mov dword_1065184 eax +
call sub_10246B6  +
add esp 10h +
mov dword_1065188 eax +
call sub_1025076  +
test eax eax +
jnz loc_1024C05  +
call sub_10247F1  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
retn   +
push offset loc_10249A0  +
push dword_106517C  +
call sub_102473C  +
pop ecx  +
call eax  +
mov dword_1063310 eax +
cmp eax 0FFFFFFFFh +
jz loc_1024BFA  +
push 214h  +
push 1  +
call sub_102B91D  +
mov esi eax +
pop ecx  +
pop ecx  +
cmp esi ebx +
jz loc_1024BFA  +
push esi  +
push dword_1063310  +
push dword_1065184  +
call sub_102473C  +
pop ecx  +
call eax  +
test eax eax +
jnz loc_1024C58  +
push esi  +
call sub_10213A1  +
pop ecx  +
jmp loc_1024BFA  +
push ebx  +
push esi  +
call sub_1024833  +
or dword ptr [esi+4] 0FFFFFFFFh +
pop ecx  +
xor eax eax +
pop ecx  +
inc eax  +
jmp loc_1024C01  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
lea eax [ebp+var_4] +
xor esi esi +
push eax  +
mov [ebp+var_4] esi +
mov [ebp+var_8] esi +
call sub_102383D  +
pop ecx  +
test eax eax +
jz loc_1024C9A  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
call sub_1024F1A  +
add esp 14h +
lea eax [ebp+var_8] +
push eax  +
call sub_102387E  +
pop ecx  +
test eax eax +
jz loc_1024CB5  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
call sub_1024F1A  +
add esp 14h +
cmp [ebp+var_4] 2 +
pop esi  +
jnz loc_1024CC7  +
cmp [ebp+var_8] 5 +
jb loc_1024CC7  +
xor eax eax +
inc eax  +
leave   +
retn   +
push 3  +
pop eax  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_0] eax +
push 0  +
setz al  +
push 1000h  +
push eax  +
call ds:HeapCreate  +
mov hHeap eax +
test eax eax +
jnz loc_1024CF9  +
xor eax eax +
pop ebp  +
retn   +
call sub_1024C6F  +
mov dword_1066D20 eax +
cmp eax 3 +
jnz loc_1024D2C  +
push 3F8h  +
call sub_1025244  +
pop ecx  +
test eax eax +
jnz loc_1024D2C  +
push hHeap  +
call ds:HeapDestroy  +
and hHeap 0 +
jmp loc_1024CF5  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
***
call sub_1022E04  +
xor eax eax +
mov ecx [ebp+8] +
test ecx ecx +
jz loc_1024D8F  +
cmp ecx 0FFFFFFFFh +
jz loc_1024D8F  +
and [ebp-4] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_1024D88  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_1024D88  +
cmp edx 10000000h +
jnb loc_1024D88  +
lea eax [edx+ecx] +
mov [ebp-1Ch] eax +
cmp dword ptr [eax] 4550h +
jz loc_1024D88  +
jmp loc_1024D83  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp-1Ch] eax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1022E49  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_1024DD1  +
push eax  +
call sub_1024D36  +
test eax eax +
jz loc_1024DD1  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_1024DC6  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_1024DD1  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1063194 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_1024E0D  +
test eax ebx +
jz loc_1024E0D  +
not eax  +
mov dword_1063198 eax +
jmp loc_1024E68  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_1024E54  +
test dword_1063194 ebx +
jnz loc_1024E59  +
mov esi 0BB40E64Fh +
mov dword_1063194 esi +
not esi  +
mov dword_1063198 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
call sub_1022E04  +
call sub_1024981  +
mov eax [eax+78h] +
test eax eax +
jz loc_1024E9F  +
and dword ptr [ebp-4] 0 +
call eax  +
jmp loc_1024E98  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call loc_102B96E  +
call sub_1022E49  +
retn   +
***
call sub_1024981  +
mov eax [eax+7Ch] +
test eax eax +
jz loc_1024EBD  +
call eax  +
jmp sub_1024E71  +
***
push 8  +
push offset dword_105C2C8  +
call sub_1022E04  +
push dword_1065190  +
call sub_102473C  +
pop ecx  +
test eax eax +
jz loc_1024EF9  +
and dword ptr [ebp-4] 0 +
call eax  +
jmp loc_1024EF2  +
xor eax eax +
inc eax  +
retn   +
***
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1024E71  +
pop ecx  +
mov dword_1065190 eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2D0h +
mov eax dword_1063194 +
xor eax ebp +
mov [ebp+var_4] eax +
mov [ebp+var_220] eax +
mov [ebp+var_224] ecx +
mov [ebp+var_228] edx +
mov [ebp+var_22C] ebx +
mov [ebp+var_230] esi +
mov [ebp+var_234] edi +
mov [ebp+var_208] ss +
mov [ebp+var_214] cs +
mov [ebp+var_238] ds +
mov [ebp+var_23C] es +
mov [ebp+var_240] fs +
mov [ebp+var_244] gs +
pushf   +
pop [ebp+var_210]  +
mov eax [ebp+4] +
mov [ebp+var_218] eax +
lea eax [ebp+4] +
mov [ebp+var_2D0] 10001h +
mov [ebp+var_20C] eax +
mov eax [eax-4] +
push offset OutputString  +
mov [ebp+var_21C] eax +
call ds:OutputDebugStringA  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1021557  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp sub_1024F1A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor ecx ecx +
cmp eax dword_1063318[ecx*8] +
jz loc_1024FFD  +
inc ecx  +
cmp ecx 2Dh +
jb loc_1024FE1  +
lea ecx [eax-13h] +
cmp ecx 11h +
ja loc_1025006  +
push 0Dh  +
pop eax  +
pop ebp  +
retn   +
mov eax dword_106331C[ecx*8] +
pop ebp  +
retn   +
add eax 0FFFFFF44h +
push 0Eh  +
pop ecx  +
cmp ecx eax +
sbb eax eax +
and eax ecx +
add eax 8 +
pop ebp  +
retn   +
***
call sub_1024900  +
test eax eax +
jnz loc_102502D  +
mov eax offset unk_1063480 +
retn   +
add eax 8 +
retn   +
***
call sub_1024900  +
test eax eax +
jnz loc_1025045  +
mov eax offset unk_1063484 +
retn   +
add eax 0Ch +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
call sub_1025036  +
mov ecx [ebp+arg_0] +
push ecx  +
mov [eax] ecx +
call sub_1024FD7  +
pop ecx  +
mov esi eax +
call sub_102501E  +
mov [eax] esi +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
xor esi esi +
mov edi offset unk_1065198 +
cmp dword_106348C[esi*8] 1 +
jnz loc_10250AF  +
lea eax lpCriticalSection[esi*8] +
push 4000000h  +
mov [eax] edi +
push 0FA0h  +
push dword ptr [eax]  +
add edi 18h +
call sub_102B627  +
add esp 0Ch +
test eax eax +
jz loc_10250BB  +
inc esi  +
cmp esi 24h +
jl loc_1025081  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
retn   +
and lpCriticalSection[esi*8] 0 +
xor eax eax +
jmp loc_10250B8  +
***
mov edi edi +
push ebx  +
mov ebx ds:DeleteCriticalSection +
push esi  +
mov esi offset lpCriticalSection +
push edi  +
mov edi [esi] +
test edi edi +
jz loc_10250F5  +
cmp dword ptr [esi+4] 1 +
jz loc_10250F5  +
push edi  +
call ebx  +
push edi  +
call sub_10213A1  +
and dword ptr [esi] 0 +
pop ecx  +
add esi 8 +
cmp esi offset unk_10635A8 +
jl loc_10250DC  +
mov esi offset lpCriticalSection +
pop edi  +
mov eax [esi] +
test eax eax +
jz loc_1025115  +
cmp dword ptr [esi+4] 1 +
jnz loc_1025115  +
push eax  +
call ebx  +
add esi 8 +
cmp esi offset unk_10635A8 +
jl loc_1025106  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push lpCriticalSection[eax*8]  +
call ds:LeaveCriticalSection  +
pop ebp  +
retn   +
***
call sub_1022E04  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
lea esi lpCriticalSection[eax*8] +
cmp dword ptr [esi] 0 +
jnz loc_1025234  +
push eax  +
call sub_1025144  +
pop ecx  +
test eax eax +
jnz loc_1025234  +
push 11h  +
call sub_1023784  +
pop ecx  +
push dword ptr [esi]  +
call ds:EnterCriticalSection  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 140h  +
push 0  +
push hHeap  +
call ds:HeapAlloc  +
mov lpMem eax +
test eax eax +
jnz loc_1025267  +
pop ebp  +
retn   +
mov ecx [ebp+arg_0] +
and dword_10652E8 0 +
and dword_1066D08 0 +
mov dword_1066D14 eax +
xor eax eax +
mov dword_1066D10 ecx +
mov dword_1066D18 10h +
inc eax  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx dword_1066D08 +
mov eax lpMem +
imul ecx ecx +
add ecx eax +
jmp loc_10252BF  +
mov edx [ebp+arg_0] +
sub edx [eax+0Ch] +
cmp edx 100000h +
jb loc_10252C5  +
add eax 14h +
cmp eax ecx +
jb loc_10252AE  +
xor eax eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov ecx [ebp+arg_0] +
mov eax [ecx+10h] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi esi +
sub edi [ecx+0Ch] +
add esi 0FFFFFFFCh +
shr edi 0Fh +
mov ecx edi +
imul ecx ecx +
lea ecx [ecx+eax+144h] +
mov [ebp+var_10] ecx +
mov ecx [esi] +
dec ecx  +
mov [ebp+var_4] ecx +
test cl 1 +
jnz loc_10255DE  +
push ebx  +
lea ebx [ecx+esi] +
mov edx [ebx] +
mov [ebp+var_C] edx +
mov edx [esi-4] +
mov [ebp+var_8] edx +
mov edx [ebp+var_C] +
mov [ebp+arg_4] ebx +
test dl 1 +
jnz loc_1025399  +
sar edx 4 +
dec edx  +
cmp edx 3Fh +
jbe loc_1025331  +
push 3Fh  +
pop edx  +
mov ecx [ebx+4] +
cmp ecx [ebx+8] +
jnz loc_102537B  +
mov ebx 80000000h +
cmp edx 20h +
jnb loc_102535C  +
mov ecx edx +
shr ebx cl +
lea ecx [edx+eax+4] +
not ebx  +
and [eax+edi*4+44h] ebx +
dec byte ptr [ecx]  +
jnz loc_1025378  +
mov ecx [ebp+arg_0] +
and [ecx] ebx +
jmp loc_1025378  +
lea ecx [edx-20h] +
shr ebx cl +
lea ecx [edx+eax+4] +
not ebx  +
and [eax+edi*4+0C4h] ebx +
dec byte ptr [ecx]  +
jnz loc_1025378  +
mov ecx [ebp+arg_0] +
and [ecx+4] ebx +
mov ebx [ebp+arg_4] +
mov edx [ebx+8] +
mov ebx [ebx+4] +
mov ecx [ebp+var_4] +
add ecx [ebp+var_C] +
mov [edx+4] ebx +
mov edx [ebp+arg_4] +
mov ebx [edx+4] +
mov edx [edx+8] +
mov [ebx+8] edx +
mov [ebp+var_4] ecx +
mov edx ecx +
sar edx 4 +
dec edx  +
cmp edx 3Fh +
jbe loc_10253A7  +
push 3Fh  +
pop edx  +
mov ebx [ebp+var_8] +
and ebx 1 +
mov [ebp+var_C] ebx +
jnz loc_1025445  +
sub esi [ebp+var_8] +
mov ebx [ebp+var_8] +
sar ebx 4 +
push 3Fh  +
mov [ebp+arg_4] esi +
dec ebx  +
pop esi  +
cmp ebx esi +
jbe loc_10253CC  +
mov ebx esi +
add ecx [ebp+var_8] +
mov edx ecx +
sar edx 4 +
dec edx  +
mov [ebp+var_4] ecx +
cmp edx esi +
jbe loc_10253DE  +
mov edx esi +
cmp ebx edx +
jz loc_1025440  +
mov ecx [ebp+arg_4] +
mov esi [ecx+4] +
cmp esi [ecx+8] +
jnz loc_1025428  +
mov esi 80000000h +
cmp ebx 20h +
jnb loc_102540E  +
mov ecx ebx +
shr esi cl +
not esi  +
and [eax+edi*4+44h] esi +
dec byte ptr [ebx+eax+4]  +
jnz loc_1025428  +
mov ecx [ebp+arg_0] +
and [ecx] esi +
jmp loc_1025428  +
lea ecx [ebx-20h] +
shr esi cl +
not esi  +
and [eax+edi*4+0C4h] esi +
dec byte ptr [ebx+eax+4]  +
jnz loc_1025428  +
mov ecx [ebp+arg_0] +
and [ecx+4] esi +
mov ecx [ebp+arg_4] +
mov esi [ecx+8] +
mov ecx [ecx+4] +
mov [esi+4] ecx +
mov ecx [ebp+arg_4] +
mov esi [ecx+4] +
mov ecx [ecx+8] +
mov [esi+8] ecx +
mov esi [ebp+arg_4] +
jmp loc_1025448  +
mov ebx [ebp+arg_0] +
cmp [ebp+var_C] 0 +
jnz loc_1025456  +
cmp ebx edx +
jz loc_10254D6  +
mov ecx [ebp+var_10] +
lea ecx [ecx+edx*8] +
mov ebx [ecx+4] +
mov [esi+8] ecx +
mov [esi+4] ebx +
mov [ecx+4] esi +
mov ecx [esi+4] +
mov [ecx+8] esi +
mov ecx [esi+4] +
cmp ecx [esi+8] +
jnz loc_10254D6  +
mov cl [edx+eax+4] +
mov byte ptr [ebp+arg_4+3] cl +
inc cl  +
mov [edx+eax+4] cl +
cmp edx 20h +
jnb loc_10254AD  +
cmp byte ptr [ebp+arg_4+3] 0 +
jnz loc_102549C  +
mov ecx edx +
mov ebx 80000000h +
shr ebx cl +
mov ecx [ebp+arg_0] +
or [ecx] ebx +
mov ebx 80000000h +
mov ecx edx +
shr ebx cl +
lea eax [eax+edi*4+44h] +
or [eax] ebx +
jmp loc_10254D6  +
cmp byte ptr [ebp+arg_4+3] 0 +
jnz loc_10254C3  +
lea ecx [edx-20h] +
mov ebx 80000000h +
shr ebx cl +
mov ecx [ebp+arg_0] +
or [ecx+4] ebx +
lea ecx [edx-20h] +
mov edx 80000000h +
shr edx cl +
lea eax [eax+edi*4+0C4h] +
or [eax] edx +
mov eax [ebp+var_4] +
mov [esi] eax +
mov [eax+esi-4] eax +
mov eax [ebp+var_10] +
dec dword ptr [eax]  +
jnz loc_10255DD  +
mov eax dword_10652E8 +
test eax eax +
jz loc_10255CF  +
mov ecx dword_1066D1C +
mov esi ds:VirtualFree +
push 4000h  +
shl ecx 0Fh +
add ecx [eax+0Ch] +
mov ebx 8000h +
push ebx  +
push ecx  +
call esi  +
mov ecx dword_1066D1C +
mov eax dword_10652E8 +
mov edx 80000000h +
shr edx cl +
or [eax+8] edx +
mov eax dword_10652E8 +
mov eax [eax+10h] +
mov ecx dword_1066D1C +
and dword ptr [eax+ecx*4+0C4h] 0 +
mov eax dword_10652E8 +
mov eax [eax+10h] +
dec byte ptr [eax+43h]  +
mov eax dword_10652E8 +
mov ecx [eax+10h] +
cmp byte ptr [ecx+43h] 0 +
jnz loc_1025564  +
and dword ptr [eax+4] 0FFFFFFFEh +
mov eax dword_10652E8 +
cmp dword ptr [eax+8] 0FFFFFFFFh +
jnz loc_10255CF  +
push ebx  +
push 0  +
push dword ptr [eax+0Ch]  +
call esi  +
mov eax dword_10652E8 +
push dword ptr [eax+10h]  +
push 0  +
push hHeap  +
call ds:HeapFree  +
mov ecx dword_1066D08 +
mov eax dword_10652E8 +
imul ecx ecx +
mov edx lpMem +
sub ecx eax +
lea ecx [ecx+edx-14h] +
push ecx  +
lea ecx [eax+14h] +
push ecx  +
push eax  +
call loc_1025EB0  +
mov eax [ebp+arg_0] +
add esp 0Ch +
dec dword_1066D08  +
cmp eax dword_10652E8 +
jbe loc_10255C5  +
sub [ebp+arg_0] 14h +
mov eax lpMem +
mov dword_1066D14 eax +
mov eax [ebp+arg_0] +
mov dword_10652E8 eax +
mov dword_1066D1C edi +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov eax dword_1066D18 +
push esi  +
mov esi dword_1066D08 +
push edi  +
xor edi edi +
cmp esi eax +
jnz loc_102562E  +
add eax 10h +
imul eax eax +
push eax  +
push lpMem  +
push edi  +
push hHeap  +
call ds:HeapReAlloc  +
cmp eax edi +
jnz loc_102561C  +
xor eax eax +
jmp loc_1025694  +
add dword_1066D18 10h +
mov esi dword_1066D08 +
mov lpMem eax +
imul esi esi +
add esi lpMem +
push 41C4h  +
push 8  +
push hHeap  +
call ds:HeapAlloc  +
mov [esi+10h] eax +
cmp eax edi +
jz loc_1025618  +
push 4  +
push 2000h  +
push 100000h  +
push edi  +
call ds:VirtualAlloc  +
mov [esi+0Ch] eax +
cmp eax edi +
jnz loc_102567D  +
push dword ptr [esi+10h]  +
push edi  +
push hHeap  +
call ds:HeapFree  +
jmp loc_1025618  +
or dword ptr [esi+8] 0FFFFFFFFh +
mov [esi] edi +
mov [esi+4] edi +
inc dword_1066D08  +
mov eax [esi+10h] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax esi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov ecx [ebp+arg_0] +
mov eax [ecx+8] +
push ebx  +
push esi  +
mov esi [ecx+10h] +
push edi  +
xor ebx ebx +
jmp loc_10256B6  +
add eax eax +
inc ebx  +
test eax eax +
jge loc_10256B3  +
mov eax ebx +
imul eax eax +
lea eax [eax+esi+144h] +
push 3Fh  +
mov [ebp+var_8] eax +
pop edx  +
mov [eax+8] eax +
mov [eax+4] eax +
add eax 8 +
dec edx  +
jnz loc_10256CF  +
push 4  +
mov edi ebx +
push 1000h  +
shl edi 0Fh +
add edi [ecx+0Ch] +
push 8000h  +
push edi  +
call ds:VirtualAlloc  +
test eax eax +
jnz loc_1025702  +
or eax 0FFFFFFFFh +
jmp loc_102579F  +
lea edx [edi+7000h] +
mov [ebp+var_4] edx +
cmp edi edx +
ja loc_1025752  +
mov ecx edx +
sub ecx edi +
shr ecx 0Ch +
lea eax [edi+10h] +
inc ecx  +
or dword ptr [eax-8] 0FFFFFFFFh +
or dword ptr [eax+0FECh] 0FFFFFFFFh +
lea edx [eax+0FFCh] +
mov [eax] edx +
lea edx [eax-1004h] +
mov dword ptr [eax-4] 0FF0h +
mov [eax+4] edx +
mov dword ptr [eax+0FE8h] 0FF0h +
add eax 1000h +
dec ecx  +
jnz loc_102571A  +
mov edx [ebp+var_4] +
mov eax [ebp+var_8] +
add eax 1F8h +
lea ecx [edi+0Ch] +
mov [eax+4] ecx +
mov [ecx+8] eax +
lea ecx [edx+0Ch] +
mov [eax+8] ecx +
mov [ecx+4] eax +
and dword ptr [esi+ebx*4+44h] 0 +
xor edi edi +
inc edi  +
mov [esi+ebx*4+0C4h] edi +
mov al [esi+43h] +
mov cl al +
inc cl  +
test al al +
mov eax [ebp+arg_0] +
mov [esi+43h] cl +
jnz loc_102578F  +
or [eax+4] edi +
mov edx 80000000h +
mov ecx ebx +
shr edx cl +
not edx  +
and [eax+8] edx +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov ecx [ebp+arg_0] +
mov eax [ecx+10h] +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
mov edi [ebp+arg_4] +
mov edx edi +
sub edx [ecx+0Ch] +
add esi 17h +
shr edx 0Fh +
mov ecx edx +
imul ecx ecx +
lea ecx [ecx+eax+144h] +
mov [ebp+var_C] ecx +
mov ecx [edi-4] +
and esi 0FFFFFFF0h +
dec ecx  +
cmp esi ecx +
lea edi [ecx+edi-4] +
mov ebx [edi] +
mov [ebp+arg_8] ecx +
mov [ebp+var_4] ebx +
jle loc_102594D  +
test bl 1 +
jnz loc_1025946  +
add ebx ecx +
cmp esi ebx +
jg loc_1025946  +
mov ecx [ebp+var_4] +
sar ecx 4 +
dec ecx  +
mov [ebp+var_8] ecx +
cmp ecx 3Fh +
jbe loc_1025820  +
push 3Fh  +
pop ecx  +
mov [ebp+var_8] ecx +
mov ebx [edi+4] +
cmp ebx [edi+8] +
jnz loc_102586B  +
mov ebx 80000000h +
cmp ecx 20h +
jnb loc_102584C  +
shr ebx cl +
mov ecx [ebp+var_8] +
lea ecx [ecx+eax+4] +
not ebx  +
and [eax+edx*4+44h] ebx +
dec byte ptr [ecx]  +
jnz loc_102586B  +
mov ecx [ebp+arg_0] +
and [ecx] ebx +
jmp loc_102586B  +
add ecx 0FFFFFFE0h +
shr ebx cl +
mov ecx [ebp+var_8] +
lea ecx [ecx+eax+4] +
not ebx  +
and [eax+edx*4+0C4h] ebx +
dec byte ptr [ecx]  +
jnz loc_102586B  +
mov ecx [ebp+arg_0] +
and [ecx+4] ebx +
mov ecx [edi+8] +
mov ebx [edi+4] +
mov [ecx+4] ebx +
mov ecx [edi+4] +
mov edi [edi+8] +
mov [ecx+8] edi +
mov ecx [ebp+arg_8] +
sub ecx esi +
add [ebp+var_4] ecx +
cmp [ebp+var_4] 0 +
jle loc_1025934  +
mov edi [ebp+var_4] +
mov ecx [ebp+arg_4] +
sar edi 4 +
dec edi  +
lea ecx [ecx+esi-4] +
cmp edi 3Fh +
jbe loc_10258A5  +
push 3Fh  +
pop edi  +
mov ebx [ebp+var_C] +
lea ebx [ebx+edi*8] +
mov [ebp+arg_8] ebx +
mov ebx [ebx+4] +
mov [ecx+4] ebx +
mov ebx [ebp+arg_8] +
mov [ecx+8] ebx +
mov [ebx+4] ecx +
mov ebx [ecx+4] +
mov [ebx+8] ecx +
mov ebx [ecx+4] +
cmp ebx [ecx+8] +
jnz loc_1025922  +
mov cl [edi+eax+4] +
mov byte ptr [ebp+arg_8+3] cl +
inc cl  +
mov [edi+eax+4] cl +
cmp edi 20h +
jnb loc_10258F9  +
cmp byte ptr [ebp+arg_8+3] 0 +
jnz loc_10258F1  +
mov ecx edi +
mov ebx 80000000h +
shr ebx cl +
mov ecx [ebp+arg_0] +
or [ecx] ebx +
lea eax [eax+edx*4+44h] +
mov ecx edi +
jmp loc_1025919  +
cmp byte ptr [ebp+arg_8+3] 0 +
jnz loc_102590F  +
lea ecx [edi-20h] +
mov ebx 80000000h +
shr ebx cl +
mov ecx [ebp+arg_0] +
or [ecx+4] ebx +
lea eax [eax+edx*4+0C4h] +
lea ecx [edi-20h] +
mov edx 80000000h +
shr edx cl +
or [eax] edx +
mov edx [ebp+arg_4] +
mov ecx [ebp+var_4] +
lea eax [edx+esi-4] +
mov [eax] ecx +
mov [ecx+eax-4] ecx +
jmp loc_1025937  +
mov edx [ebp+arg_4] +
lea eax [esi+1] +
mov [edx-4] eax +
mov [edx+esi-8] eax +
jmp loc_1025A82  +
xor eax eax +
jmp loc_1025A85  +
jge loc_1025A82  +
mov ebx [ebp+arg_4] +
sub [ebp+arg_8] esi +
lea ecx [esi+1] +
mov [ebx-4] ecx +
lea ebx [ebx+esi-4] +
mov esi [ebp+arg_8] +
sar esi 4 +
dec esi  +
mov [ebp+arg_4] ebx +
mov [ebx-4] ecx +
cmp esi 3Fh +
jbe loc_1025978  +
push 3Fh  +
pop esi  +
test byte ptr [ebp+var_4] 1 +
jnz loc_1025A02  +
mov esi [ebp+var_4] +
sar esi 4 +
dec esi  +
cmp esi 3Fh +
jbe loc_1025991  +
push 3Fh  +
pop esi  +
mov ecx [edi+4] +
cmp ecx [edi+8] +
jnz loc_10259DB  +
mov ebx 80000000h +
cmp esi 20h +
jnb loc_10259BC  +
mov ecx esi +
shr ebx cl +
lea esi [esi+eax+4] +
not ebx  +
and [eax+edx*4+44h] ebx +
dec byte ptr [esi]  +
jnz loc_10259D8  +
mov ecx [ebp+arg_0] +
and [ecx] ebx +
jmp loc_10259D8  +
lea ecx [esi-20h] +
shr ebx cl +
lea ecx [esi+eax+4] +
not ebx  +
and [eax+edx*4+0C4h] ebx +
dec byte ptr [ecx]  +
jnz loc_10259D8  +
mov ecx [ebp+arg_0] +
and [ecx+4] ebx +
mov ebx [ebp+arg_4] +
mov ecx [edi+8] +
mov esi [edi+4] +
mov [ecx+4] esi +
mov esi [edi+8] +
mov ecx [edi+4] +
mov [ecx+8] esi +
mov esi [ebp+arg_8] +
add esi [ebp+var_4] +
mov [ebp+arg_8] esi +
sar esi 4 +
dec esi  +
cmp esi 3Fh +
jbe loc_1025A02  +
push 3Fh  +
pop esi  +
mov ecx [ebp+var_C] +
lea ecx [ecx+esi*8] +
mov edi [ecx+4] +
mov [ebx+8] ecx +
mov [ebx+4] edi +
mov [ecx+4] ebx +
mov ecx [ebx+4] +
mov [ecx+8] ebx +
mov ecx [ebx+4] +
cmp ecx [ebx+8] +
jnz loc_1025A79  +
mov cl [esi+eax+4] +
mov byte ptr [ebp+arg_4+3] cl +
inc cl  +
mov [esi+eax+4] cl +
cmp esi 20h +
jnb loc_1025A50  +
cmp byte ptr [ebp+arg_4+3] 0 +
jnz loc_1025A48  +
mov ecx esi +
mov edi 80000000h +
shr edi cl +
mov ecx [ebp+arg_0] +
or [ecx] edi +
lea eax [eax+edx*4+44h] +
mov ecx esi +
jmp loc_1025A70  +
cmp byte ptr [ebp+arg_4+3] 0 +
jnz loc_1025A66  +
lea ecx [esi-20h] +
mov edi 80000000h +
shr edi cl +
mov ecx [ebp+arg_0] +
or [ecx+4] edi +
lea eax [eax+edx*4+0C4h] +
lea ecx [esi-20h] +
mov edx 80000000h +
shr edx cl +
or [eax] edx +
mov eax [ebp+arg_8] +
mov [ebx] eax +
mov [eax+ebx-4] eax +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_1066D08 +
mov ecx [ebp+arg_0] +
imul eax eax +
add eax lpMem +
add ecx 17h +
and ecx 0FFFFFFF0h +
mov [ebp+var_10] ecx +
sar ecx 4 +
push ebx  +
dec ecx  +
cmp ecx 20h +
push esi  +
push edi  +
jge loc_1025AC8  +
or esi 0FFFFFFFFh +
shr esi cl +
or [ebp+var_8] 0FFFFFFFFh +
jmp loc_1025AD5  +
add ecx 0FFFFFFE0h +
or edx 0FFFFFFFFh +
xor esi esi +
shr edx cl +
mov [ebp+var_8] edx +
mov ecx dword_1066D14 +
mov ebx ecx +
jmp loc_1025AF0  +
mov edx [ebx+4] +
mov edi [ebx] +
and edx [ebp+var_8] +
and edi esi +
or edx edi +
jnz loc_1025AF7  +
add ebx 14h +
mov [ebp+arg_0] ebx +
cmp ebx eax +
jb loc_1025ADF  +
cmp ebx eax +
jnz loc_1025B7A  +
mov ebx lpMem +
jmp loc_1025B14  +
mov edx [ebx+4] +
mov edi [ebx] +
and edx [ebp+var_8] +
and edi esi +
or edx edi +
jnz loc_1025B1B  +
add ebx 14h +
mov [ebp+arg_0] ebx +
cmp ebx ecx +
jb loc_1025B03  +
cmp ebx ecx +
jnz loc_1025B7A  +
jmp loc_1025B2D  +
cmp dword ptr [ebx+8] 0 +
jnz loc_1025B31  +
add ebx 14h +
mov [ebp+arg_0] ebx +
cmp ebx eax +
jb loc_1025B21  +
cmp ebx eax +
jnz loc_1025B66  +
mov ebx lpMem +
jmp loc_1025B46  +
cmp dword ptr [ebx+8] 0 +
jnz loc_1025B4D  +
add ebx 14h +
mov [ebp+arg_0] ebx +
cmp ebx ecx +
jb loc_1025B3D  +
cmp ebx ecx +
jnz loc_1025B66  +
call sub_10255E7  +
mov ebx eax +
mov [ebp+arg_0] ebx +
test ebx ebx +
jnz loc_1025B66  +
xor eax eax +
jmp loc_1025D6F  +
push ebx  +
call sub_102569C  +
pop ecx  +
mov ecx [ebx+10h] +
mov [ecx] eax +
mov eax [ebx+10h] +
cmp dword ptr [eax] 0FFFFFFFFh +
jz loc_1025B5F  +
mov dword_1066D14 ebx +
mov eax [ebx+10h] +
mov edx [eax] +
mov [ebp+var_4] edx +
cmp edx 0FFFFFFFFh +
jz loc_1025BA1  +
mov ecx [eax+edx*4+0C4h] +
mov edi [eax+edx*4+44h] +
and ecx [ebp+var_8] +
and edi esi +
or ecx edi +
jnz loc_1025BCA  +
and [ebp+var_4] 0 +
mov edx [eax+0C4h] +
lea ecx [eax+44h] +
mov edi [ecx] +
and edx [ebp+var_8] +
and edi esi +
or edx edi +
jnz loc_1025BC7  +
inc [ebp+var_4]  +
mov edx [ecx+84h] +
add ecx 4 +
jmp loc_1025BAE  +
mov edx [ebp+var_4] +
mov ecx edx +
imul ecx ecx +
lea ecx [ecx+eax+144h] +
mov [ebp+var_C] ecx +
mov ecx [eax+edx*4+44h] +
xor edi edi +
and ecx esi +
jnz loc_1025BF8  +
mov ecx [eax+edx*4+0C4h] +
and ecx [ebp+var_8] +
push 20h  +
pop edi  +
jmp loc_1025BF8  +
add ecx ecx +
inc edi  +
test ecx ecx +
jge loc_1025BF5  +
mov ecx [ebp+var_C] +
mov edx [ecx+edi*8+4] +
mov ecx [edx] +
sub ecx [ebp+var_10] +
mov esi ecx +
sar esi 4 +
dec esi  +
cmp esi 3Fh +
mov [ebp+var_8] ecx +
jle loc_1025C19  +
push 3Fh  +
pop esi  +
cmp esi edi +
jz loc_1025D22  +
mov ecx [edx+4] +
cmp ecx [edx+8] +
jnz loc_1025C85  +
cmp edi 20h +
mov ebx 80000000h +
jge loc_1025C59  +
mov ecx edi +
shr ebx cl +
mov ecx [ebp+var_4] +
lea edi [eax+edi+4] +
not ebx  +
mov [ebp+var_14] ebx +
and ebx [eax+ecx*4+44h] +
mov [eax+ecx*4+44h] ebx +
dec byte ptr [edi]  +
jnz loc_1025C82  +
mov ecx [ebp+var_14] +
mov ebx [ebp+arg_0] +
and [ebx] ecx +
jmp loc_1025C85  +
lea ecx [edi-20h] +
shr ebx cl +
mov ecx [ebp+var_4] +
lea ecx [eax+ecx*4+0C4h] +
lea edi [eax+edi+4] +
not ebx  +
and [ecx] ebx +
dec byte ptr [edi]  +
mov [ebp+var_14] ebx +
jnz loc_1025C82  +
mov ebx [ebp+arg_0] +
mov ecx [ebp+var_14] +
and [ebx+4] ecx +
jmp loc_1025C85  +
mov ebx [ebp+arg_0] +
cmp [ebp+var_8] 0 +
mov ecx [edx+8] +
mov edi [edx+4] +
mov [ecx+4] edi +
mov ecx [edx+4] +
mov edi [edx+8] +
mov [ecx+8] edi +
jz loc_1025D2E  +
mov ecx [ebp+var_C] +
lea ecx [ecx+esi*8] +
mov edi [ecx+4] +
mov [edx+8] ecx +
mov [edx+4] edi +
mov [ecx+4] edx +
mov ecx [edx+4] +
mov [ecx+8] edx +
mov ecx [edx+4] +
cmp ecx [edx+8] +
jnz loc_1025D1F  +
mov cl [esi+eax+4] +
mov byte ptr [ebp+arg_0+3] cl +
inc cl  +
cmp esi 20h +
mov [esi+eax+4] cl +
jge loc_1025CF6  +
cmp byte ptr [ebp+arg_0+3] 0 +
jnz loc_1025CE4  +
mov edi 80000000h +
mov ecx esi +
shr edi cl +
or [ebx] edi +
mov ecx esi +
mov edi 80000000h +
shr edi cl +
mov ecx [ebp+var_4] +
or [eax+ecx*4+44h] edi +
jmp loc_1025D1F  +
cmp byte ptr [ebp+arg_0+3] 0 +
jnz loc_1025D09  +
lea ecx [esi-20h] +
mov edi 80000000h +
shr edi cl +
or [ebx+4] edi +
mov ecx [ebp+var_4] +
lea edi [eax+ecx*4+0C4h] +
lea ecx [esi-20h] +
mov esi 80000000h +
shr esi cl +
or [edi] esi +
mov ecx [ebp+var_8] +
test ecx ecx +
jz loc_1025D31  +
mov [edx] ecx +
mov [ecx+edx-4] ecx +
jmp loc_1025D31  +
mov ecx [ebp+var_8] +
mov esi [ebp+var_10] +
add edx ecx +
lea ecx [esi+1] +
mov [edx] ecx +
mov [edx+esi-4] ecx +
mov esi [ebp+var_C] +
mov ecx [esi] +
lea edi [ecx+1] +
mov [esi] edi +
test ecx ecx +
jnz loc_1025D67  +
cmp ebx dword_10652E8 +
jnz loc_1025D67  +
mov ecx [ebp+var_4] +
cmp ecx dword_1066D1C +
jnz loc_1025D67  +
and dword_10652E8 0 +
mov ecx [ebp+var_4] +
mov [eax] ecx +
lea eax [edx+4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov dword_10652EC eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword_10652EC  +
call sub_102473C  +
pop ecx  +
test eax eax +
jz loc_1025DB1  +
push [ebp+arg_0]  +
call eax  +
pop ecx  +
test eax eax +
jz loc_1025DB1  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
xor eax eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_10653F8 eax +
mov dword_10653F4 ecx +
mov dword_10653F0 edx +
mov dword_10653EC ebx +
mov dword_10653E8 esi +
mov dword_10653E4 edi +
mov word_1065410 ss +
mov word_1065404 cs +
mov word_10653E0 ds +
mov word_10653DC es +
mov word_10653D8 fs +
mov word_10653D4 gs +
pushf   +
pop dword_1065408  +
mov eax [ebp+0] +
mov dword_10653FC eax +
mov eax [ebp+4] +
mov dword_1065400 eax +
lea eax [ebp+8] +
mov dword_106540C eax +
mov eax [ebp-320h] +
mov dword_1065348 10001h +
mov eax dword_1065400 +
mov dword_1065304 eax +
mov dword_10652F8 0C0000409h +
mov dword_10652FC 1 +
mov eax dword_1063194 +
mov [ebp-328h] eax +
mov eax dword_1063198 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
push ebp  +
mov ebp esp +
push edi  +
push esi  +
mov esi [ebp+0Ch] +
mov ecx [ebp+10h] +
mov edi [ebp+8] +
mov eax ecx +
mov edx ecx +
add eax esi +
cmp edi esi +
jbe loc_1025ED0  +
cmp edi eax +
jb loc_1026074  +
cmp ecx 100h +
jb loc_1025EF7  +
cmp dword_1066D04 0 +
jz loc_1025EF7  +
push edi  +
push esi  +
and edi 0Fh +
and esi 0Fh +
cmp edi esi +
pop esi  +
pop edi  +
jnz loc_1025EF7  +
pop esi  +
pop edi  +
pop ebp  +
jmp sub_1029D90  +
***
test edi 3 +
jnz loc_1025F14  +
shr ecx 2 +
and edx 3 +
cmp ecx 8 +
jb loc_1025F34  +
movs   +
jmp ds:off_1026024[edx*4]  +
mov eax edi +
mov edx 3 +
sub ecx 4 +
jb loc_1025F2C  +
and eax 3 +
add ecx eax +
jmp dword ptr ds:(loc_1025F34+4)[eax*4]  +
***
jmp ds:dword_1026034[ecx*4]  +
***
jmp ds:off_1025FB8[ecx*4]  +
and edx ecx +
mov al [esi] +
mov [edi] al +
mov al [esi+1] +
mov [edi+1] al +
mov al [esi+2] +
shr ecx 2 +
mov [edi+2] al +
add esi 3 +
add edi 3 +
cmp ecx 8 +
jb loc_1025F34  +
movs   +
jmp ds:off_1026024[edx*4]  +
***
and edx ecx +
mov al [esi] +
mov [edi] al +
mov al [esi+1] +
shr ecx 2 +
mov [edi+1] al +
add esi 2 +
add edi 2 +
cmp ecx 8 +
jb loc_1025F34  +
movs   +
jmp ds:off_1026024[edx*4]  +
***
and edx ecx +
mov al [esi] +
mov [edi] al +
add esi 1 +
shr ecx 2 +
add edi 1 +
cmp ecx 8 +
jb loc_1025F34  +
movs   +
jmp ds:off_1026024[edx*4]  +
***
mov eax [esi+ecx*4-1Ch] +
mov [edi+ecx*4-1Ch] eax +
mov eax [esi+ecx*4-18h] +
mov [edi+ecx*4-18h] eax +
mov eax [esi+ecx*4-14h] +
mov [edi+ecx*4-14h] eax +
mov eax [esi+ecx*4-10h] +
mov [edi+ecx*4-10h] eax +
mov eax [esi+ecx*4-0Ch] +
mov [edi+ecx*4-0Ch] eax +
mov eax [esi+ecx*4-8] +
mov [edi+ecx*4-8] eax +
mov eax [esi+ecx*4-4] +
mov [edi+ecx*4-4] eax +
lea eax ds:0[ecx*4] +
add esi eax +
add edi eax +
jmp ds:off_1026024[edx*4]  +
***
pop edi  +
leave   +
retn   +
***
mov al [esi] +
mov [edi] al +
mov eax [ebp+8] +
pop esi  +
pop edi  +
leave   +
retn   +
***
mov al [esi] +
mov [edi] al +
mov al [esi+1] +
mov [edi+1] al +
mov eax [ebp+8] +
pop esi  +
pop edi  +
leave   +
retn   +
***
mov al [esi] +
mov [edi] al +
mov al [esi+1] +
mov [edi+1] al +
mov al [esi+2] +
mov [edi+2] al +
mov eax [ebp+8] +
pop esi  +
pop edi  +
leave   +
retn   +
***
lea esi [ecx+esi-4] +
lea edi [ecx+edi-4] +
test edi 3 +
jnz loc_10260A8  +
shr ecx 2 +
and edx 3 +
cmp ecx 8 +
jb loc_102609C  +
std   +
movs   +
cld   +
jmp ds:off_10261C0[edx*4]  +
neg ecx  +
jmp ds:off_1026170[ecx*4]  +
mov eax edi +
mov edx 3 +
cmp ecx 4 +
jb loc_10260C0  +
and eax 3 +
sub ecx eax +
jmp dword ptr ds:(loc_10260C0+4)[eax*4]  +
***
jmp ds:off_10261C0[ecx*4]  +
mov al [esi+3] +
and edx ecx +
mov [edi+3] al +
sub esi 1 +
shr ecx 2 +
sub edi 1 +
cmp ecx 8 +
jb loc_102609C  +
std   +
movs   +
cld   +
jmp ds:off_10261C0[edx*4]  +
mov al [esi+3] +
and edx ecx +
mov [edi+3] al +
mov al [esi+2] +
shr ecx 2 +
mov [edi+2] al +
sub esi 2 +
sub edi 2 +
cmp ecx 8 +
jb loc_102609C  +
std   +
movs   +
cld   +
jmp ds:off_10261C0[edx*4]  +
mov al [esi+3] +
and edx ecx +
mov [edi+3] al +
mov al [esi+2] +
mov [edi+2] al +
mov al [esi+1] +
shr ecx 2 +
mov [edi+1] al +
sub esi 3 +
sub edi 3 +
cmp ecx 8 +
jb loc_102609C  +
std   +
movs   +
cld   +
jmp ds:off_10261C0[edx*4]  +
mov eax [esi+ecx*4+1Ch] +
mov [edi+ecx*4+1Ch] eax +
mov eax [esi+ecx*4+18h] +
mov [edi+ecx*4+18h] eax +
mov eax [esi+ecx*4+14h] +
mov [edi+ecx*4+14h] eax +
mov eax [esi+ecx*4+10h] +
mov [edi+ecx*4+10h] eax +
mov eax [esi+ecx*4+0Ch] +
mov [edi+ecx*4+0Ch] eax +
mov eax [esi+ecx*4+8] +
mov [edi+ecx*4+8] eax +
mov eax [esi+ecx*4+4] +
mov [edi+ecx*4+4] eax +
lea eax ds:0[ecx*4] +
add esi eax +
add edi eax +
jmp ds:off_10261C0[edx*4]  +
mov eax [ebp+8] +
pop esi  +
pop edi  +
leave   +
retn   +
***
mov al [esi+3] +
mov [edi+3] al +
mov eax [ebp+8] +
pop esi  +
pop edi  +
leave   +
retn   +
***
mov al [esi+3] +
mov [edi+3] al +
mov al [esi+2] +
mov [edi+2] al +
mov eax [ebp+8] +
pop esi  +
pop edi  +
leave   +
retn   +
***
mov al [esi+3] +
mov [edi+3] al +
mov al [esi+2] +
mov [edi+2] al +
mov al [esi+1] +
mov [edi+1] al +
mov eax [ebp+8] +
pop esi  +
pop edi  +
leave   +
retn   +
***
sub eax 3A4h +
jz loc_1026243  +
sub eax 4 +
jz loc_102623D  +
sub eax 0Dh +
jz loc_1026237  +
dec eax  +
jz loc_1026231  +
xor eax eax +
retn   +
mov eax 404h +
retn   +
mov eax 412h +
retn   +
mov eax 804h +
retn   +
mov eax 411h +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov esi eax +
push 101h  +
xor edi edi +
lea eax [esi+1Ch] +
push edi  +
push eax  +
call sub_10219E0  +
xor eax eax +
movzx ecx ax +
mov eax ecx +
mov [esi+4] edi +
mov [esi+8] edi +
mov [esi+0Ch] edi +
shl ecx 10h +
or eax ecx +
lea edi [esi+10h] +
stos   +
stos   +
stos   +
mov ecx offset Addend +
add esp 0Ch +
lea eax [esi+1Ch] +
sub ecx esi +
mov edi 101h +
mov dl [ecx+eax] +
mov [eax] dl +
inc eax  +
dec edi  +
jnz loc_1026292  +
lea eax [esi+11Dh] +
mov esi 100h +
mov dl [eax+ecx] +
mov [eax] dl +
inc eax  +
dec esi  +
jnz loc_10262A6  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 51Ch +
mov eax dword_1063194 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push edi  +
lea eax [ebp+CPInfo] +
push eax  +
push dword ptr [esi+4]  +
call ds:GetCPInfo  +
mov edi 100h +
test eax eax +
jz loc_10263E6  +
xor eax eax +
mov [ebp+eax+SrcStr] al +
inc eax  +
cmp eax edi +
jb loc_10262ED  +
mov al [ebp+CPInfo.LeadByte] +
mov [ebp+SrcStr] 20h +
test al al +
jz loc_1026338  +
lea ebx [ebp+CPInfo.LeadByte+1] +
movzx ecx al +
movzx eax byte ptr [ebx] +
cmp ecx eax +
ja loc_1026330  +
sub eax ecx +
inc eax  +
push eax  +
lea edx [ebp+ecx+SrcStr] +
push 20h  +
push edx  +
call sub_10219E0  +
add esp 0Ch +
inc ebx  +
mov al [ebx] +
inc ebx  +
test al al +
jnz loc_1026310  +
push 0  +
push dword ptr [esi+0Ch]  +
lea eax [ebp+CharType] +
push dword ptr [esi+4]  +
push eax  +
push edi  +
lea eax [ebp+SrcStr] +
push eax  +
push 1  +
push 0  +
call sub_102C14D  +
xor ebx ebx +
push ebx  +
push dword ptr [esi+4]  +
lea eax [ebp+var_204] +
push edi  +
push eax  +
push edi  +
lea eax [ebp+SrcStr] +
push eax  +
push edi  +
push dword ptr [esi+0Ch]  +
push ebx  +
call sub_102BF43  +
add esp 44h +
push ebx  +
push dword ptr [esi+4]  +
lea eax [ebp+var_304] +
push edi  +
push eax  +
push edi  +
lea eax [ebp+SrcStr] +
push eax  +
push 200h  +
push dword ptr [esi+0Ch]  +
push ebx  +
call sub_102BF43  +
add esp 24h +
xor eax eax +
movzx ecx [ebp+eax*2+CharType] +
test cl 1 +
jz loc_10263BD  +
or byte ptr [esi+eax+1Dh] 10h +
mov cl byte ptr [ebp+eax+var_204] +
jmp loc_10263CE  +
test cl 2 +
jz loc_10263D7  +
or byte ptr [esi+eax+1Dh] 20h +
mov cl byte ptr [ebp+eax+var_304] +
mov [esi+eax+11Dh] cl +
jmp loc_10263DF  +
mov byte ptr [esi+eax+11Dh] 0 +
inc eax  +
cmp eax edi +
jb loc_10263A2  +
jmp loc_102643C  +
lea eax [esi+11Dh] +
mov [ebp+var_51C] 0FFFFFF9Fh +
xor ecx ecx +
sub [ebp+var_51C] eax +
mov edx [ebp+var_51C] +
lea eax [esi+ecx+11Dh] +
add edx eax +
lea ebx [edx+20h] +
cmp ebx 19h +
ja loc_1026421  +
or byte ptr [esi+ecx+1Dh] 10h +
mov dl cl +
add dl 20h +
jmp loc_1026430  +
cmp edx 19h +
ja loc_1026434  +
or byte ptr [esi+ecx+1Dh] 20h +
mov dl cl +
sub dl 20h +
mov [eax] dl +
jmp loc_1026437  +
mov byte ptr [eax] 0 +
inc ecx  +
cmp ecx edi +
jb loc_10263FE  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_1021557  +
leave   +
retn   +
***
call sub_1022E04  +
pop ecx  +
retn   +
***
jmp loc_10264E6  +
***
mov esi [edi+68h] +
test esi esi +
jnz loc_10264F2  +
push 20h  +
call sub_1023784  +
pop ecx  +
mov eax esi +
call sub_1022E49  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
xor ebx ebx +
push ebx  +
lea ecx [ebp+var_10] +
call sub_102160E  +
mov dword_1065614 ebx +
cmp esi 0FFFFFFFEh +
jnz loc_102653C  +
mov dword_1065614 1 +
call ds:GetOEMCP  +
cmp [ebp+var_4] bl +
jz loc_1026578  +
mov ecx [ebp+var_8] +
and dword ptr [ecx+70h] 0FFFFFFFDh +
jmp loc_1026578  +
cmp esi 0FFFFFFFDh +
jnz loc_1026553  +
mov dword_1065614 1 +
call ds:GetACP  +
jmp loc_102652E  +
cmp esi 0FFFFFFFCh +
jnz loc_102656A  +
mov eax [ebp+var_10] +
mov eax [eax+4] +
mov dword_1065614 1 +
jmp loc_102652E  +
cmp [ebp+var_4] bl +
jz loc_1026576  +
mov eax [ebp+var_8] +
and dword ptr [eax+70h] 0FFFFFFFDh +
mov eax esi +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
mov eax dword_1063194 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
call sub_10264FF  +
mov edi eax +
xor esi esi +
mov [ebp+arg_0] edi +
cmp edi esi +
jnz loc_10265B9  +
mov eax ebx +
call sub_102624E  +
xor eax eax +
jmp loc_1026728  +
mov [ebp+var_1C] esi +
xor eax eax +
cmp dword_10639E0[eax] edi +
jz loc_102662D  +
inc [ebp+var_1C]  +
add eax 30h +
cmp eax 0F0h +
jb loc_10265BE  +
lea eax [ebp+CPInfo] +
push eax  +
push edi  +
call ds:GetCPInfo  +
test eax eax +
jz loc_1026719  +
push 101h  +
lea eax [ebx+1Ch] +
push esi  +
push eax  +
call sub_10219E0  +
xor edx edx +
inc edx  +
add esp 0Ch +
mov [ebx+4] edi +
mov [ebx+0Ch] esi +
cmp [ebp+CPInfo.MaxCharSize] edx +
jbe loc_1026702  +
cmp [ebp+CPInfo.LeadByte] 0 +
jz loc_10266E3  +
lea esi [ebp+CPInfo.LeadByte+1] +
mov cl [esi] +
test cl cl +
jz loc_10266E3  +
movzx eax byte ptr [esi-1] +
movzx ecx cl +
jmp loc_10266D3  +
push 101h  +
lea eax [ebx+1Ch] +
push esi  +
push eax  +
call sub_10219E0  +
mov ecx [ebp+var_1C] +
add esp 0Ch +
imul ecx ecx +
mov [ebp+var_20] esi +
lea esi dword_10639F0[ecx] +
mov [ebp+var_1C] esi +
jmp loc_102667D  +
mov al [esi+1] +
test al al +
jz loc_1026682  +
movzx edi byte ptr [esi] +
movzx eax al +
jmp loc_1026674  +
mov eax [ebp+var_20] +
mov al byte_10639DC[eax] +
or [ebx+edi+1Dh] al +
movzx eax byte ptr [esi+1] +
inc edi  +
cmp edi eax +
jbe loc_1026662  +
mov edi [ebp+arg_0] +
inc esi  +
inc esi  +
cmp byte ptr [esi] 0 +
jnz loc_1026653  +
mov esi [ebp+var_1C] +
inc [ebp+var_20]  +
add esi 8 +
cmp [ebp+var_20] 4 +
mov [ebp+var_1C] esi +
jb loc_102667D  +
mov eax edi +
mov [ebx+4] edi +
mov dword ptr [ebx+8] 1 +
call sub_102621A  +
push 6  +
mov [ebx+0Ch] eax +
lea eax [ebx+10h] +
lea ecx dword_10639E4[ecx] +
pop edx  +
mov si [ecx] +
inc ecx  +
mov [eax] si +
inc ecx  +
inc eax  +
inc eax  +
dec edx  +
jnz loc_10266B4  +
mov esi ebx +
call sub_10262B7  +
jmp loc_10265B2  +
or byte ptr [ebx+eax+1Dh] 4 +
inc eax  +
cmp eax ecx +
jbe loc_10266CD  +
inc esi  +
inc esi  +
cmp byte ptr [esi-1] 0 +
jnz loc_1026617  +
lea eax [ebx+1Eh] +
mov ecx 0FEh +
or byte ptr [eax] 8 +
inc eax  +
dec ecx  +
jnz loc_10266EB  +
mov eax [ebx+4] +
call sub_102621A  +
mov [ebx+0Ch] eax +
mov [ebx+8] edx +
jmp loc_1026705  +
mov [ebx+8] esi +
xor eax eax +
movzx ecx ax +
mov eax ecx +
shl ecx 10h +
or eax ecx +
lea edi [ebx+10h] +
stos   +
stos   +
stos   +
jmp loc_10266C1  +
cmp dword_1065614 esi +
jnz loc_10265AB  +
or eax 0FFFFFFFFh +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1021557  +
leave   +
retn   +
***
call sub_1022E04  +
pop ecx  +
retn   +
***
jmp loc_10268CD  +
***
cmp eax 0FFFFFFFFh +
jnz loc_10268CD  +
cmp ebx offset Addend +
jz loc_10268BC  +
push ebx  +
call sub_10213A1  +
pop ecx  +
call sub_102501E  +
mov dword ptr [eax] 16h +
jmp loc_10268CD  +
and dword ptr [ebp-20h] 0 +
mov eax [ebp-20h] +
call sub_1022E49  +
retn   +
***
cmp dword_1066E4C 0 +
jnz loc_10268F6  +
push 0FFFFFFFDh  +
call sub_102673C  +
pop ecx  +
mov dword_1066E4C 1 +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+0BCh] +
xor ebx ebx +
push edi  +
cmp eax ebx +
jz loc_1026984  +
cmp eax offset off_1064138 +
jz loc_1026984  +
mov eax [esi+0B0h] +
cmp eax ebx +
jz loc_1026984  +
cmp [eax] ebx +
jnz loc_1026984  +
mov eax [esi+0B8h] +
cmp eax ebx +
jz loc_102694B  +
cmp [eax] ebx +
jnz loc_102694B  +
push eax  +
call sub_10213A1  +
push dword ptr [esi+0BCh]  +
call sub_102C57E  +
pop ecx  +
pop ecx  +
mov eax [esi+0B4h] +
cmp eax ebx +
jz loc_102696C  +
cmp [eax] ebx +
jnz loc_102696C  +
push eax  +
call sub_10213A1  +
push dword ptr [esi+0BCh]  +
call sub_102C510  +
pop ecx  +
pop ecx  +
push dword ptr [esi+0B0h]  +
call sub_10213A1  +
push dword ptr [esi+0BCh]  +
call sub_10213A1  +
pop ecx  +
pop ecx  +
mov eax [esi+0C0h] +
cmp eax ebx +
jz loc_10269D2  +
cmp [eax] ebx +
jnz loc_10269D2  +
mov eax [esi+0C4h] +
sub eax 0FEh +
push eax  +
call sub_10213A1  +
mov eax [esi+0CCh] +
mov edi 80h +
sub eax edi +
push eax  +
call sub_10213A1  +
mov eax [esi+0D0h] +
sub eax edi +
push eax  +
call sub_10213A1  +
push dword ptr [esi+0C0h]  +
call sub_10213A1  +
add esp 10h +
lea edi [esi+0D4h] +
mov eax [edi] +
cmp eax offset off_1063FC8 +
jz loc_10269F8  +
cmp [eax+0B4h] ebx +
jnz loc_10269F8  +
push eax  +
call sub_102C194  +
push dword ptr [edi]  +
call sub_10213A1  +
pop ecx  +
pop ecx  +
lea edi [esi+50h] +
mov [ebp+arg_0] 6 +
cmp dword ptr [edi-8] offset unk_1063AD8 +
jz loc_1026A1C  +
mov eax [edi] +
cmp eax ebx +
jz loc_1026A1C  +
cmp [eax] ebx +
jnz loc_1026A1C  +
push eax  +
call sub_10213A1  +
pop ecx  +
cmp [edi-4] ebx +
jz loc_1026A33  +
mov eax [edi+4] +
cmp eax ebx +
jz loc_1026A33  +
cmp [eax] ebx +
jnz loc_1026A33  +
push eax  +
call sub_10213A1  +
pop ecx  +
add edi 10h +
dec [ebp+arg_0]  +
jnz loc_1026A02  +
push esi  +
call sub_10213A1  +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ds:InterlockedIncrement +
push edi  +
mov edi [ebp+lpAddend] +
push edi  +
call esi  +
mov eax [edi+0B0h] +
test eax eax +
jz loc_1026A6D  +
push eax  +
call esi  +
mov eax [edi+0B8h] +
test eax eax +
jz loc_1026A7A  +
push eax  +
call esi  +
mov eax [edi+0B4h] +
test eax eax +
jz loc_1026A87  +
push eax  +
call esi  +
mov eax [edi+0C0h] +
test eax eax +
jz loc_1026A94  +
push eax  +
call esi  +
lea ebx [edi+50h] +
mov [ebp+lpAddend] 6 +
cmp dword ptr [ebx-8] offset unk_1063AD8 +
jz loc_1026AB0  +
mov eax [ebx] +
test eax eax +
jz loc_1026AB0  +
push eax  +
call esi  +
cmp dword ptr [ebx-4] 0 +
jz loc_1026AC0  +
mov eax [ebx+4] +
test eax eax +
jz loc_1026AC0  +
push eax  +
call esi  +
add ebx 10h +
dec [ebp+lpAddend]  +
jnz loc_1026A9E  +
mov eax [edi+0D4h] +
add eax 0B4h +
push eax  +
call esi  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+lpAddend] +
test edi edi +
jz loc_1026B74  +
push ebx  +
push esi  +
mov esi ds:InterlockedDecrement +
push edi  +
call esi  +
mov eax [edi+0B0h] +
test eax eax +
jz loc_1026B09  +
push eax  +
call esi  +
mov eax [edi+0B8h] +
test eax eax +
jz loc_1026B16  +
push eax  +
call esi  +
mov eax [edi+0B4h] +
test eax eax +
jz loc_1026B23  +
push eax  +
call esi  +
mov eax [edi+0C0h] +
test eax eax +
jz loc_1026B30  +
push eax  +
call esi  +
lea ebx [edi+50h] +
mov [ebp+lpAddend] 6 +
cmp dword ptr [ebx-8] offset unk_1063AD8 +
jz loc_1026B4C  +
mov eax [ebx] +
test eax eax +
jz loc_1026B4C  +
push eax  +
call esi  +
cmp dword ptr [ebx-4] 0 +
jz loc_1026B5C  +
mov eax [ebx+4] +
test eax eax +
jz loc_1026B5C  +
push eax  +
call esi  +
add ebx 10h +
dec [ebp+lpAddend]  +
jnz loc_1026B3A  +
mov eax [edi+0D4h] +
add eax 0B4h +
push eax  +
call esi  +
pop esi  +
pop ebx  +
mov eax edi +
pop edi  +
pop ebp  +
retn   +
***
test edi edi +
jz loc_1026BB9  +
test eax eax +
jz loc_1026BB9  +
push esi  +
mov esi [eax] +
cmp esi edi +
jz loc_1026BB5  +
push edi  +
mov [eax] edi +
call sub_1026A4C  +
pop ecx  +
test esi esi +
jz loc_1026BB5  +
push esi  +
call sub_1026AE0  +
cmp dword ptr [esi] 0 +
pop ecx  +
jnz loc_1026BB5  +
cmp esi offset unk_1063AE0 +
jz loc_1026BB5  +
push esi  +
call sub_10268FE  +
pop ecx  +
mov eax edi +
pop esi  +
retn   +
xor eax eax +
retn   +
***
call sub_1022E04  +
pop ecx  +
retn   +
***
call sub_1024981  +
mov esi [eax+6Ch] +
test esi esi +
jnz loc_1026C34  +
push 20h  +
call sub_1023784  +
pop ecx  +
mov eax esi +
call sub_1022E49  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1063194 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi ds:LCMapStringW +
xor ebx ebx +
push edi  +
mov edi ecx +
cmp dword_1065654 ebx +
jnz loc_1026C9E  +
push ebx  +
push ebx  +
push 1  +
push offset SrcStr  +
push 100h  +
push ebx  +
call esi  +
test eax eax +
jz loc_1026C89  +
mov dword_1065654 1 +
jmp loc_1026C9E  +
call ds:GetLastError  +
cmp eax 78h +
jnz loc_1026C9E  +
mov dword_1065654 2 +
cmp [ebp+cchWideChar] ebx +
jle loc_1026CB3  +
push [ebp+cchWideChar]  +
push [ebp+lpWideCharStr]  +
call sub_1026EE4  +
pop ecx  +
pop ecx  +
mov [ebp+cchWideChar] eax +
mov eax dword_1065654 +
cmp eax 1 +
jnz loc_1026CD6  +
push [ebp+cchDest]  +
push [ebp+lpDestStr]  +
push [ebp+cchWideChar]  +
push [ebp+lpWideCharStr]  +
push [ebp+dwMapFlags]  +
push [ebp+Locale]  +
call esi  +
jmp loc_1026E86  +
cmp eax 2 +
jz loc_1026CDF  +
cmp eax ebx +
jnz loc_1026D31  +
mov [ebp+var_C] ebx +
cmp [ebp+Locale] ebx +
jnz loc_1026CEF  +
mov eax [edi] +
mov eax [eax+14h] +
mov [ebp+Locale] eax +
cmp [ebp+CodePage] ebx +
jnz loc_1026CFC  +
mov eax [edi] +
mov eax [eax+4] +
mov [ebp+CodePage] eax +
push [ebp+Locale]  +
call sub_102C7E5  +
pop ecx  +
cmp [ebp+CodePage] eax +
jz loc_1026D12  +
cmp eax 0FFFFFFFFh +
jz loc_1026D12  +
mov [ebp+CodePage] eax +
mov esi ds:WideCharToMultiByte +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+cchWideChar]  +
push [ebp+lpWideCharStr]  +
push ebx  +
push [ebp+CodePage]  +
call esi  +
mov edi eax +
mov [ebp+cchSrc] edi +
cmp edi ebx +
jnz loc_1026D38  +
xor eax eax +
jmp loc_1026E86  +
jle loc_1026D7C  +
push 0FFFFFFE0h  +
xor edx edx +
pop eax  +
div  edi +
cmp eax 1 +
jb loc_1026D7C  +
lea eax [edi+8] +
cmp eax 400h +
ja loc_1026D63  +
call sub_10236D0  +
mov eax esp +
cmp eax ebx +
jz loc_1026D77  +
mov dword ptr [eax] 0CCCCh +
jmp loc_1026D74  +
push eax  +
call sub_1021488  +
pop ecx  +
cmp eax ebx +
jz loc_1026D77  +
mov dword ptr [eax] 0DDDDh +
add eax 8 +
mov [ebp+lpSrcStr] eax +
jmp loc_1026D7F  +
mov [ebp+lpSrcStr] ebx +
cmp [ebp+lpSrcStr] ebx +
jz loc_1026D31  +
push ebx  +
push ebx  +
push edi  +
push [ebp+lpSrcStr]  +
push [ebp+cchWideChar]  +
push [ebp+lpWideCharStr]  +
push ebx  +
push [ebp+CodePage]  +
call esi  +
test eax eax +
jz loc_1026E7A  +
push ebx  +
push ebx  +
push edi  +
push [ebp+lpSrcStr]  +
mov edi ds:LCMapStringA +
push [ebp+dwMapFlags]  +
push [ebp+Locale]  +
call edi  +
mov esi eax +
cmp esi ebx +
jz loc_1026E7A  +
jle loc_1026DFD  +
push 0FFFFFFE0h  +
xor edx edx +
pop eax  +
div  esi +
cmp eax 1 +
jb loc_1026DFD  +
lea eax [esi+8] +
cmp eax 400h +
ja loc_1026DE7  +
call sub_10236D0  +
mov eax esp +
cmp eax ebx +
jz loc_1026DFB  +
mov dword ptr [eax] 0CCCCh +
jmp loc_1026DF8  +
push eax  +
call sub_1021488  +
pop ecx  +
cmp eax ebx +
jz loc_1026DFB  +
mov dword ptr [eax] 0DDDDh +
add eax 8 +
mov ebx eax +
test ebx ebx +
jz loc_1026E7A  +
push esi  +
push ebx  +
push [ebp+cchSrc]  +
push [ebp+lpSrcStr]  +
push [ebp+dwMapFlags]  +
push [ebp+Locale]  +
call edi  +
test eax eax +
jz loc_1026E73  +
test [ebp+dwMapFlags] 400h +
jz loc_1026E52  +
mov eax [ebp+cchDest] +
xor edi edi +
mov [ebp+var_C] esi +
cmp eax edi +
jz loc_1026E73  +
cmp eax esi +
jg loc_1026E31  +
lea esi [eax-1] +
push esi  +
push ebx  +
push eax  +
push [ebp+lpDestStr]  +
call sub_102C6DB  +
add esp 10h +
test eax eax +
jz loc_1026E73  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
call sub_1024F1A  +
add esp 14h +
jmp loc_1026E73  +
xor eax eax +
cmp [ebp+cchDest] eax +
jnz loc_1026E5D  +
push eax  +
push eax  +
jmp loc_1026E63  +
push [ebp+cchDest]  +
push [ebp+lpDestStr]  +
push esi  +
push ebx  +
push 1  +
push [ebp+CodePage]  +
call ds:MultiByteToWideChar  +
mov [ebp+var_C] eax +
push ebx  +
call sub_10215E9  +
pop ecx  +
push [ebp+lpSrcStr]  +
call sub_10215E9  +
mov eax [ebp+var_C] +
pop ecx  +
lea esp [ebp-1Ch] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1021557  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push [ebp+arg_0]  +
lea ecx [ebp+var_10] +
call sub_102160E  +
push [ebp+CodePage]  +
lea ecx [ebp+var_10] +
push [ebp+cchDest]  +
push [ebp+lpDestStr]  +
push [ebp+cchWideChar]  +
push [ebp+lpWideCharStr]  +
push [ebp+dwMapFlags]  +
push [ebp+Locale]  +
call sub_1026C41  +
add esp 1Ch +
cmp [ebp+var_4] 0 +
jz locret_1026EDD  +
mov ecx [ebp+var_8] +
and dword ptr [ecx+70h] 0FFFFFFFDh +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jbe loc_1026F01  +
mov ecx [ebp+arg_0] +
cmp word ptr [ecx] 0 +
jz loc_1026F01  +
inc eax  +
inc ecx  +
inc ecx  +
cmp eax [ebp+arg_4] +
jb loc_1026EF3  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
push esi  +
call sub_102A027  +
mov [ebp+arg_4] eax +
mov eax [esi+0Ch] +
pop ecx  +
test al 82h +
jnz loc_1026F39  +
call sub_102501E  +
mov dword ptr [eax] 9 +
or dword ptr [esi+0Ch] 20h +
or eax 0FFFFFFFFh +
jmp loc_1027052  +
test al 40h +
jz loc_1026F4A  +
call sub_102501E  +
mov dword ptr [eax] 22h +
jmp loc_1026F2D  +
push ebx  +
xor ebx ebx +
test al 1 +
jz loc_1026F63  +
mov [esi+4] ebx +
test al 10h +
jz loc_1026FCF  +
mov ecx [esi+8] +
and eax 0FFFFFFFEh +
mov [esi] ecx +
mov [esi+0Ch] eax +
mov eax [esi+0Ch] +
and eax 0FFFFFFEFh +
or eax 2 +
mov [esi+0Ch] eax +
mov [esi+4] ebx +
test eax 10Ch +
jnz loc_1026F9D  +
cmp esi offset unk_1063C30 +
jz loc_1026F89  +
cmp esi offset unk_1063C50 +
jnz loc_1026F96  +
push [ebp+arg_4]  +
call sub_102D3B0  +
pop ecx  +
test eax eax +
jnz loc_1026F9D  +
push esi  +
call sub_102D35C  +
pop ecx  +
test dword ptr [esi+0Ch] 108h +
push edi  +
jz loc_1027026  +
mov eax [esi+8] +
mov edi [esi] +
lea ecx [eax+1] +
mov [esi] ecx +
mov ecx [esi+18h] +
sub edi eax +
dec ecx  +
cmp edi ebx +
mov [esi+4] ecx +
jle loc_1026FDA  +
push edi  +
push eax  +
push [ebp+arg_4]  +
call sub_102D27B  +
add esp 0Ch +
mov ebx eax +
jmp loc_102701C  +
or eax 20h +
mov [esi+0Ch] eax +
or eax 0FFFFFFFFh +
jmp loc_1027051  +
mov eax [ebp+arg_4] +
cmp eax 0FFFFFFFFh +
jz loc_1026FFB  +
cmp eax 0FFFFFFFEh +
jz loc_1026FFB  +
mov ecx eax +
and eax 1Fh +
imul eax eax +
sar ecx 5 +
add eax dword_1066D40[ecx*4] +
jmp loc_1027000  +
mov eax offset unk_10632E8 +
test byte ptr [eax+4] 20h +
jz loc_102701C  +
push 2  +
push ebx  +
push ebx  +
push [ebp+arg_4]  +
call sub_102CA7C  +
and eax edx +
add esp 10h +
cmp eax 0FFFFFFFFh +
jz loc_102703F  +
mov eax [esi+8] +
mov cl byte ptr [ebp+arg_0] +
mov [eax] cl +
jmp loc_102703B  +
xor edi edi +
inc edi  +
push edi  +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+arg_4]  +
call sub_102D27B  +
add esp 0Ch +
mov ebx eax +
cmp ebx edi +
jz loc_1027048  +
or dword ptr [esi+0Ch] 20h +
or eax 0FFFFFFFFh +
jmp loc_1027050  +
mov eax [ebp+arg_0] +
and eax 0FFh +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [esi+0Ch] 40h +
jz loc_102706B  +
cmp dword ptr [esi+8] 0 +
jz loc_1027090  +
push esi  +
push [ebp+arg_0]  +
call sub_102D419  +
pop ecx  +
pop ecx  +
mov ecx 0FFFFh +
cmp ax cx +
jnz loc_1027090  +
push esi  +
call sub_102303A  +
pop ecx  +
test eax eax +
jz loc_1027090  +
or dword ptr [edi] 0FFFFFFFFh +
pop ebp  +
retn   +
inc dword ptr [edi]  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
push edi  +
mov edi eax +
jle loc_10270C3  +
push esi  +
push [ebp+arg_0]  +
mov esi [ebp+arg_8] +
dec [ebp+arg_4]  +
call sub_102705A  +
cmp dword ptr [edi] 0FFFFFFFFh +
pop ecx  +
jz loc_10270C2  +
cmp [ebp+arg_4] 0 +
jg loc_10270A8  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
test byte ptr [esi+0Ch] 40h +
push edi  +
mov edi eax +
mov ebx edx +
jz loc_1027112  +
cmp dword ptr [esi+8] 0 +
jnz loc_1027112  +
mov eax [ebp+arg_0] +
add [edi] eax +
jmp loc_1027118  +
movzx eax word ptr [ebx] +
dec [ebp+arg_0]  +
push eax  +
call sub_102705A  +
inc ebx  +
inc ebx  +
cmp dword ptr [edi] 0FFFFFFFFh +
pop ecx  +
jnz loc_1027112  +
call sub_102501E  +
cmp dword ptr [eax] 2Ah +
jnz loc_1027118  +
push 3Fh  +
call sub_102705A  +
pop ecx  +
cmp [ebp+arg_0] 0 +
jg loc_10270EC  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 478h +
mov eax dword_1063194 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
xor esi esi +
push edi  +
push [ebp+arg_8]  +
mov edi [ebp+arg_4] +
lea ecx [ebp+var_44C] +
mov [ebp+var_424] eax +
mov [ebp+var_418] ebx +
mov [ebp+var_458] esi +
mov [ebp+var_408] esi +
mov [ebp+var_42C] esi +
mov [ebp+var_40C] esi +
mov [ebp+var_428] esi +
mov [ebp+var_460] esi +
mov [ebp+var_45C] esi +
mov [ebp+var_430] esi +
call sub_102160E  +
cmp [ebp+var_424] esi +
jnz loc_10271CA  +
call sub_102501E  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
push esi  +
call sub_1024FC5  +
add esp 14h +
cmp [ebp+var_440] 0 +
jz loc_10271C2  +
mov eax [ebp+var_444] +
and dword ptr [eax+70h] 0FFFFFFFDh +
or eax 0FFFFFFFFh +
jmp loc_1027CEB  +
cmp edi esi +
jz loc_1027197  +
movzx edx word ptr [edi] +
xor ecx ecx +
mov [ebp+var_41C] esi +
mov [ebp+var_420] esi +
mov [ebp+var_454] esi +
mov [ebp+var_414] edx +
cmp dx si +
jz loc_1027CD2  +
push 2  +
pop esi  +
add edi esi +
cmp [ebp+var_41C] 0 +
mov [ebp+var_450] edi +
jl loc_1027CD2  +
lea eax [edx-20h] +
cmp ax 58h +
ja loc_1027224  +
movzx eax dx +
movsx eax ds:byte_1007368[eax] +
and eax 0Fh +
jmp loc_1027226  +
xor eax eax +
movsx eax ds:byte_1007388[ecx+eax*8] +
push 7  +
sar eax 4 +
pop ecx  +
mov [ebp+var_468] eax +
cmp eax ecx +
ja loc_1027C94  +
jmp ds:off_1027CFA[eax*4]  +
xor eax eax +
or [ebp+var_40C] 0FFFFFFFFh +
mov [ebp+var_460] eax +
mov [ebp+var_45C] eax +
mov [ebp+var_42C] eax +
mov [ebp+var_428] eax +
mov [ebp+var_408] eax +
mov [ebp+var_430] eax +
jmp loc_1027C94  +
movzx eax dx +
sub eax 20h +
jz loc_10272CD  +
sub eax 3 +
jz loc_10272BE  +
sub eax 8 +
jz loc_10272B2  +
sub eax esi +
jz loc_10272A6  +
sub eax 3 +
jnz loc_1027C94  +
or [ebp+var_408] 8 +
jmp loc_1027C94  +
or [ebp+var_408] 4 +
jmp loc_1027C94  +
or [ebp+var_408] 1 +
jmp loc_1027C94  +
or [ebp+var_408] 80h +
jmp loc_1027C94  +
or [ebp+var_408] esi +
jmp loc_1027C94  +
cmp dx 2Ah +
jnz loc_102730A  +
add ebx 4 +
mov [ebp+var_418] ebx +
mov ebx [ebx-4] +
mov [ebp+var_42C] ebx +
test ebx ebx +
jge loc_1027C94  +
or [ebp+var_408] 4 +
neg [ebp+var_42C]  +
jmp loc_1027C94  +
mov eax [ebp+var_42C] +
imul eax eax +
movzx ecx dx +
lea eax [eax+ecx-30h] +
mov [ebp+var_42C] eax +
jmp loc_1027C94  +
and [ebp+var_40C] 0 +
jmp loc_1027C94  +
cmp dx 2Ah +
jnz loc_102735D  +
add ebx 4 +
mov [ebp+var_418] ebx +
mov ebx [ebx-4] +
mov [ebp+var_40C] ebx +
test ebx ebx +
jge loc_1027C94  +
or [ebp+var_40C] 0FFFFFFFFh +
jmp loc_1027C94  +
mov eax [ebp+var_40C] +
imul eax eax +
movzx ecx dx +
lea eax [eax+ecx-30h] +
mov [ebp+var_40C] eax +
jmp loc_1027C94  +
movzx eax dx +
cmp eax 49h +
jz loc_10273D7  +
cmp eax 68h +
jz loc_10273CB  +
cmp eax 6Ch +
jz loc_10273A2  +
cmp eax 77h +
jnz loc_1027C94  +
or [ebp+var_408] 800h +
jmp loc_1027C94  +
cmp word ptr [edi] 6Ch +
jnz loc_10273BF  +
add edi esi +
or [ebp+var_408] 1000h +
mov [ebp+var_450] edi +
jmp loc_1027C94  +
or [ebp+var_408] 10h +
jmp loc_1027C94  +
or [ebp+var_408] 20h +
jmp loc_1027C94  +
movzx eax word ptr [edi] +
cmp ax 36h +
jnz loc_10273FF  +
cmp word ptr [edi+2] 34h +
jnz loc_10273FF  +
add edi 4 +
or [ebp+var_408] 8000h +
mov [ebp+var_450] edi +
jmp loc_1027C94  +
cmp ax 33h +
jnz loc_1027424  +
cmp word ptr [edi+2] 32h +
jnz loc_1027424  +
add edi 4 +
and [ebp+var_408] 0FFFF7FFFh +
mov [ebp+var_450] edi +
jmp loc_1027C94  +
cmp ax 64h +
jz loc_1027C94  +
cmp ax 69h +
jz loc_1027C94  +
cmp ax 6Fh +
jz loc_1027C94  +
cmp ax 75h +
jz loc_1027C94  +
cmp ax 78h +
jz loc_1027C94  +
cmp ax 58h +
jz loc_1027C94  +
and [ebp+var_468] 0 +
mov esi [ebp+var_424] +
push edx  +
lea edi [ebp+var_41C] +
mov [ebp+var_430] 1 +
call sub_102705A  +
jmp loc_1027C93  +
movzx eax dx +
cmp eax 64h +
jg loc_10276F1  +
jz loc_1027788  +
cmp eax 53h +
jg loc_10275BE  +
jz loc_1027523  +
sub eax 41h +
jz loc_10274BA  +
sub eax esi +
jz loc_1027507  +
sub eax esi +
jz loc_10274BA  +
sub eax esi +
jnz loc_1027AE2  +
add edx 20h +
mov [ebp+var_460] 1 +
mov [ebp+var_414] edx +
or [ebp+var_408] 40h +
cmp [ebp+var_40C] 0 +
lea edi [ebp+WideCharStr] +
mov eax 200h +
mov [ebp+var_410] edi +
mov [ebp+var_434] eax +
jge loc_10277B6  +
mov [ebp+var_40C] 6 +
jmp loc_1027821  +
test [ebp+var_408] 830h +
jnz loc_10275DF  +
or [ebp+var_408] 20h +
jmp loc_10275DF  +
test [ebp+var_408] 830h +
jnz loc_1027536  +
or [ebp+var_408] 20h +
mov esi [ebp+var_40C] +
cmp esi 0FFFFFFFFh +
jnz loc_1027546  +
mov esi 7FFFFFFFh +
add ebx 4 +
test byte ptr [ebp+var_408] 20h +
mov [ebp+var_418] ebx +
mov ebx [ebx-4] +
mov [ebp+var_410] ebx +
jz loc_1027AA6  +
test ebx ebx +
jnz loc_1027574  +
mov eax off_1063BC8 +
mov [ebp+var_410] eax +
and [ebp+var_420] 0 +
mov edi [ebp+var_410] +
test esi esi +
jle loc_1027AE2  +
mov al [edi] +
test al al +
jz loc_1027AE2  +
lea ecx [ebp+var_44C] +
movzx eax al +
push ecx  +
push eax  +
call sub_102D755  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10275AA  +
inc edi  +
inc edi  +
inc [ebp+var_420]  +
cmp [ebp+var_420] esi +
jl loc_1027589  +
jmp loc_1027AE2  +
sub eax 58h +
jz loc_10278F7  +
sub eax esi +
jz loc_1027663  +
sub eax ecx +
jz loc_10274CD  +
sub eax esi +
jnz loc_1027AE2  +
movzx eax word ptr [ebx] +
add ebx 4 +
xor edi edi +
inc edi  +
test byte ptr [ebp+var_408] 20h +
mov [ebp+var_430] edi +
mov [ebp+var_418] ebx +
mov [ebp+var_464] eax +
jz loc_1027645  +
mov byte ptr [ebp+var_43C] al +
lea eax [ebp+var_44C] +
push eax  +
mov eax [ebp+var_44C] +
mov byte ptr [ebp+var_43C+1] 0 +
push dword ptr [eax+0ACh]  +
lea eax [ebp+var_43C] +
push eax  +
lea eax [ebp+WideCharStr] +
push eax  +
call sub_102D61A  +
add esp 10h +
test eax eax +
jge loc_102764C  +
mov [ebp+var_45C] edi +
jmp loc_102764C  +
mov [ebp+WideCharStr] ax +
lea eax [ebp+WideCharStr] +
mov [ebp+var_410] eax +
mov [ebp+var_420] edi +
jmp loc_1027AE2  +
mov eax [ebx] +
add ebx 4 +
mov [ebp+var_418] ebx +
test eax eax +
jz loc_10276D5  +
mov esi [eax+4] +
test esi esi +
jz loc_10276D5  +
movzx ecx word ptr [eax] +
cmp [eax+2] cx +
jb loc_1027CBB  +
test [ebp+var_408] 800h +
movzx eax cx +
jz loc_10276C3  +
xor ecx ecx +
mov edx eax +
not edx  +
inc ecx  +
test dl cl +
jz loc_1027CBB  +
mov edx esi +
not edx  +
test dl cl +
jz loc_1027CBB  +
mov [ebp+var_410] esi +
shr eax 1 +
mov [ebp+var_430] ecx +
jmp loc_1027ADC  +
and [ebp+var_430] 0 +
mov [ebp+var_410] esi +
jmp loc_1027ADC  +
mov eax off_1063BC8 +
mov [ebp+var_410] eax +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_10276E3  +
sub eax edx +
jmp loc_1027ADC  +
cmp eax 70h +
jg loc_10278FF  +
jz loc_10278ED  +
cmp eax 65h +
jl loc_1027AE2  +
cmp eax 67h +
jle loc_10274CD  +
cmp eax 69h +
jz loc_1027788  +
cmp eax 6Eh +
jz loc_1027744  +
cmp eax 6Fh +
jnz loc_1027AE2  +
test byte ptr [ebp+var_408] 80h +
mov [ebp+var_414] 8 +
jz loc_1027799  +
or [ebp+var_408] 200h +
jmp loc_1027799  +
mov esi [ebx] +
add ebx 4 +
mov [ebp+var_418] ebx +
call sub_102D5FF  +
test eax eax +
jz loc_1027CBB  +
test byte ptr [ebp+var_408] 20h +
jz loc_1027771  +
mov ax word ptr [ebp+var_41C] +
mov [esi] ax +
jmp loc_1027779  +
mov eax [ebp+var_41C] +
mov [esi] eax +
mov [ebp+var_45C] 1 +
jmp loc_1027C78  +
or [ebp+var_408] 40h +
mov [ebp+var_414] 0Ah +
test [ebp+var_408] 8000h +
jz loc_102795F  +
mov eax [ebx] +
mov edx [ebx+4] +
add ebx 8 +
jmp loc_10279A8  +
jnz loc_10277CA  +
cmp dx 67h +
jnz loc_1027821  +
mov [ebp+var_40C] 1 +
jmp loc_1027821  +
cmp [ebp+var_40C] eax +
jle loc_10277D8  +
mov [ebp+var_40C] eax +
cmp [ebp+var_40C] 0A3h +
jle loc_1027821  +
mov esi [ebp+var_40C] +
add esi 15Dh +
push esi  +
call sub_1021488  +
mov edx [ebp+var_414] +
pop ecx  +
mov [ebp+var_454] eax +
test eax eax +
jz loc_1027817  +
mov [ebp+var_410] eax +
mov [ebp+var_434] esi +
mov edi eax +
jmp loc_1027821  +
mov [ebp+var_40C] 0A3h +
mov eax [ebx] +
add ebx 8 +
mov [ebp+var_470] eax +
mov eax [ebx-4] +
mov [ebp+var_46C] eax +
lea eax [ebp+var_44C] +
push eax  +
push [ebp+var_460]  +
movsx eax dl +
push [ebp+var_40C]  +
mov [ebp+var_418] ebx +
push eax  +
push [ebp+var_434]  +
lea eax [ebp+var_470] +
push edi  +
push eax  +
push off_1063FA8  +
call sub_102473C  +
pop ecx  +
call eax  +
mov esi [ebp+var_408] +
add esp 1Ch +
and esi 80h +
jz loc_10278A0  +
cmp [ebp+var_40C] 0 +
jnz loc_10278A0  +
lea eax [ebp+var_44C] +
push eax  +
push edi  +
push off_1063FB4  +
call sub_102473C  +
pop ecx  +
call eax  +
pop ecx  +
pop ecx  +
cmp word ptr [ebp+var_414] 67h +
jnz loc_10278C6  +
test esi esi +
jnz loc_10278C6  +
lea eax [ebp+var_44C] +
push eax  +
push edi  +
push off_1063FB0  +
call sub_102473C  +
pop ecx  +
call eax  +
pop ecx  +
pop ecx  +
cmp byte ptr [edi] 2Dh +
jnz loc_10278DC  +
or [ebp+var_408] 100h +
inc edi  +
mov [ebp+var_410] edi +
mov eax edi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_10278E1  +
jmp loc_10276EA  +
mov [ebp+var_40C] 8 +
mov [ebp+var_458] ecx +
jmp loc_1027923  +
sub eax 73h +
jz loc_1027536  +
sub eax esi +
jz loc_102778F  +
sub eax 3 +
jnz loc_1027AE2  +
mov [ebp+var_458] 27h +
test byte ptr [ebp+var_408] 80h +
mov [ebp+var_414] 10h +
jz loc_1027799  +
push 30h  +
pop eax  +
mov word ptr [ebp+var_438] ax +
mov eax [ebp+var_458] +
add eax 51h +
mov word ptr [ebp+var_438+2] ax +
mov [ebp+var_428] esi +
jmp loc_1027799  +
test [ebp+var_408] 1000h +
jnz loc_10277A9  +
add ebx 4 +
test byte ptr [ebp+var_408] 20h +
jz loc_1027997  +
test byte ptr [ebp+var_408] 40h +
mov [ebp+var_418] ebx +
jz loc_1027990  +
movsx eax word ptr [ebx-4] +
jmp loc_1027994  +
movzx eax word ptr [ebx-4] +
cdq   +
jmp loc_10279AE  +
test byte ptr [ebp+var_408] 40h +
mov eax [ebx-4] +
jz loc_10279A6  +
cdq   +
jmp loc_10279A8  +
xor edx edx +
mov [ebp+var_418] ebx +
test byte ptr [ebp+var_408] 40h +
jz loc_10279D2  +
test edx edx +
jg loc_10279D2  +
jl loc_10279C1  +
test eax eax +
jnb loc_10279D2  +
neg eax  +
adc edx 0 +
neg edx  +
or [ebp+var_408] 100h +
test [ebp+var_408] 9000h +
mov ebx edx +
mov esi eax +
jnz loc_10279E4  +
xor ebx ebx +
cmp [ebp+var_40C] 0 +
jge loc_10279F9  +
mov [ebp+var_40C] 1 +
jmp loc_1027A13  +
and [ebp+var_408] 0FFFFFFF7h +
mov eax 200h +
cmp [ebp+var_40C] eax +
jle loc_1027A13  +
mov [ebp+var_40C] eax +
mov eax esi +
or eax ebx +
jnz loc_1027A1F  +
and [ebp+var_428] eax +
lea edi [ebp+var_205] +
mov eax [ebp+var_40C] +
dec [ebp+var_40C]  +
test eax eax +
jg loc_1027A3B  +
mov eax esi +
or eax ebx +
jz loc_1027A68  +
mov eax [ebp+var_414] +
cdq   +
push edx  +
push eax  +
push ebx  +
push esi  +
call sub_102E4E0  +
add ecx 30h +
cmp ecx 39h +
mov [ebp+var_474] ebx +
mov esi eax +
mov ebx edx +
jle loc_1027A63  +
add ecx [ebp+var_458] +
mov [edi] cl +
dec edi  +
jmp loc_1027A25  +
lea eax [ebp+var_205] +
sub eax edi +
inc edi  +
test [ebp+var_408] 200h +
mov [ebp+var_420] eax +
mov [ebp+var_410] edi +
jz loc_1027AE2  +
test eax eax +
jz loc_1027A94  +
mov ecx edi +
cmp byte ptr [ecx] 30h +
jz loc_1027AE2  +
dec [ebp+var_410]  +
mov ecx [ebp+var_410] +
mov byte ptr [ecx] 30h +
inc eax  +
jmp loc_1027ADC  +
test ebx ebx +
jnz loc_1027AB5  +
mov eax off_1063BCC +
mov [ebp+var_410] eax +
mov eax [ebp+var_410] +
mov [ebp+var_430] 1 +
jmp loc_1027AD0  +
dec esi  +
cmp word ptr [eax] 0 +
jz loc_1027AD4  +
inc eax  +
inc eax  +
test esi esi +
jnz loc_1027AC7  +
sub eax [ebp+var_410] +
sar eax 1 +
mov [ebp+var_420] eax +
cmp [ebp+var_45C] 0 +
jnz loc_1027C78  +
mov eax [ebp+var_408] +
test al 40h +
jz loc_1027B24  +
test eax 100h +
jz loc_1027B04  +
push 2Dh  +
jmp loc_1027B12  +
test al 1 +
jz loc_1027B0C  +
push 2Bh  +
jmp loc_1027B12  +
test al 2 +
jz loc_1027B24  +
push 20h  +
pop eax  +
mov word ptr [ebp+var_438] ax +
mov [ebp+var_428] 1 +
mov ebx [ebp+var_42C] +
mov esi [ebp+var_420] +
sub ebx esi +
sub ebx [ebp+var_428] +
test byte ptr [ebp+var_408] 0Ch +
jnz loc_1027B58  +
push [ebp+var_424]  +
lea eax [ebp+var_41C] +
push ebx  +
push 20h  +
call sub_1027099  +
add esp 0Ch +
push [ebp+var_428]  +
mov ecx [ebp+var_424] +
lea eax [ebp+var_41C] +
lea edx [ebp+var_438] +
call sub_10270CB  +
test byte ptr [ebp+var_408] 8 +
pop ecx  +
jz loc_1027B9F  +
test byte ptr [ebp+var_408] 4 +
jnz loc_1027B9F  +
push [ebp+var_424]  +
lea eax [ebp+var_41C] +
push ebx  +
push 30h  +
call sub_1027099  +
add esp 0Ch +
cmp [ebp+var_430] 0 +
jnz loc_1027C36  +
test esi esi +
jle loc_1027C36  +
mov eax [ebp+var_410] +
mov [ebp+var_414] eax +
mov [ebp+var_434] esi +
dec [ebp+var_434]  +
lea eax [ebp+var_44C] +
push eax  +
mov eax [ebp+var_44C] +
push dword ptr [eax+0ACh]  +
lea eax [ebp+var_464] +
push [ebp+var_414]  +
push eax  +
call sub_102D61A  +
add esp 10h +
mov [ebp+var_474] eax +
test eax eax +
jle loc_1027C2D  +
push [ebp+var_464]  +
mov esi [ebp+var_424] +
lea edi [ebp+var_41C] +
call sub_102705A  +
mov eax [ebp+var_474] +
add [ebp+var_414] eax +
cmp [ebp+var_434] 0 +
pop ecx  +
jg loc_1027BC6  +
jmp loc_1027C4F  +
or [ebp+var_41C] 0FFFFFFFFh +
jmp loc_1027C4F  +
mov ecx [ebp+var_424] +
mov edx [ebp+var_410] +
push esi  +
lea eax [ebp+var_41C] +
call sub_10270CB  +
pop ecx  +
cmp [ebp+var_41C] 0 +
jl loc_1027C78  +
test byte ptr [ebp+var_408] 4 +
jz loc_1027C78  +
push [ebp+var_424]  +
lea eax [ebp+var_41C] +
push ebx  +
push 20h  +
call sub_1027099  +
add esp 0Ch +
cmp [ebp+var_454] 0 +
jz loc_1027C94  +
push [ebp+var_454]  +
call sub_10213A1  +
and [ebp+var_454] 0 +
pop ecx  +
mov edi [ebp+var_450] +
movzx eax word ptr [edi] +
mov [ebp+var_414] eax +
test ax ax +
jz loc_1027CD2  +
mov ecx [ebp+var_468] +
mov ebx [ebp+var_418] +
mov edx eax +
jmp loc_10271F4  +
call sub_102501E  +
mov dword ptr [eax] 16h +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
jmp loc_10271A7  +
cmp [ebp+var_440] 0 +
jz loc_1027CE5  +
mov eax [ebp+var_444] +
and dword ptr [eax+70h] 0FFFFFFFDh +
mov eax [ebp+var_41C] +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1021557  +
leave   +
retn   +
***
mov ecx [eax+0Ch] +
test cl 40h +
jz loc_1027D2D  +
cmp dword ptr [eax+8] 0 +
jz loc_1027D61  +
add dword ptr [eax+4] 0FFFFFFFEh +
mov edx 0FFFFh +
js loc_1027D45  +
mov ecx [eax] +
mov [ecx] si +
add dword ptr [eax] 2 +
movzx ecx si +
jmp loc_1027D4D  +
or ecx 20h +
mov [eax+0Ch] ecx +
mov ecx edx +
cmp cx dx +
jnz loc_1027D61  +
push eax  +
call sub_102303A  +
pop ecx  +
test eax eax +
jz loc_1027D61  +
or dword ptr [edi] 0FFFFFFFFh +
retn   +
inc dword ptr [edi]  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
push edi  +
mov edi eax +
jle loc_1027D92  +
push esi  +
mov eax [ebp+arg_8] +
mov esi [ebp+arg_0] +
dec [ebp+arg_4]  +
call sub_1027D1F  +
cmp dword ptr [edi] 0FFFFFFFFh +
jz loc_1027D91  +
cmp [ebp+arg_4] 0 +
jg loc_1027D78  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebx+0Ch] 40h +
push edi  +
mov edi eax +
jz loc_1027DB5  +
cmp dword ptr [ebx+8] 0 +
jnz loc_1027DB5  +
mov eax [ebp+arg_4] +
add [edi] eax +
jmp loc_1027DF0  +
cmp [ebp+arg_4] 0 +
jle loc_1027DF0  +
push esi  +
mov eax [ebp+arg_0] +
movzx esi word ptr [eax] +
dec [ebp+arg_4]  +
mov eax ebx +
call sub_1027D1F  +
add [ebp+arg_0] 2 +
cmp dword ptr [edi] 0FFFFFFFFh +
jnz loc_1027DE9  +
call sub_102501E  +
cmp dword ptr [eax] 2Ah +
jnz loc_1027DEF  +
push 3Fh  +
mov eax ebx +
pop esi  +
call sub_1027D1F  +
cmp [ebp+arg_4] 0 +
jg loc_1027DBC  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 468h +
mov eax dword_1063194 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
xor edi edi +
mov [ebp+var_42C] eax +
mov [ebp+var_418] ebx +
mov [ebp+var_444] edi +
mov [ebp+var_408] edi +
mov [ebp+var_428] edi +
mov [ebp+var_40C] edi +
mov [ebp+var_424] edi +
mov [ebp+var_434] edi +
mov [ebp+var_450] edi +
mov [ebp+var_430] edi +
cmp eax edi +
jnz loc_1027E7B  +
call sub_102501E  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
mov dword ptr [eax] 16h +
call sub_1024FC5  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_10288AC  +
cmp esi edi +
jz loc_1027E5B  +
movzx ecx word ptr [esi] +
mov [ebp+var_420] edi +
mov [ebp+var_414] edi +
mov [ebp+var_438] edi +
mov [ebp+var_448] edi +
mov [ebp+var_41C] ecx +
cmp cx di +
jz loc_10288A6  +
inc esi  +
inc esi  +
cmp [ebp+var_420] edi +
mov [ebp+var_44C] esi +
jl loc_1028891  +
lea eax [ecx-20h] +
cmp ax 58h +
ja loc_1027ED5  +
movzx eax cx +
movzx eax ds:byte_1007428[eax] +
and eax 0Fh +
jmp loc_1027ED7  +
xor eax eax +
mov edx [ebp+var_438] +
imul eax eax +
movzx eax ds:byte_1007448[eax+edx] +
push 8  +
shr eax 4 +
pop edx  +
mov [ebp+var_438] eax +
cmp eax edx +
jz loc_1027E5B  +
cmp eax 7 +
ja loc_102886E  +
jmp ds:off_10288BC[eax*4]  +
or [ebp+var_40C] 0FFFFFFFFh +
mov [ebp+var_434] edi +
mov [ebp+var_450] edi +
mov [ebp+var_428] edi +
mov [ebp+var_424] edi +
mov [ebp+var_408] edi +
mov [ebp+var_430] edi +
jmp loc_102887C  +
movzx eax cx +
sub eax 20h +
jz loc_1027F8C  +
sub eax 3 +
jz loc_1027F7D  +
sub eax edx +
jz loc_1027F71  +
dec eax  +
dec eax  +
jz loc_1027F65  +
sub eax 3 +
jnz loc_102886E  +
or [ebp+var_408] edx +
jmp loc_102887C  +
or [ebp+var_408] 4 +
jmp loc_102887C  +
or [ebp+var_408] 1 +
jmp loc_102887C  +
or [ebp+var_408] 80h +
jmp loc_102887C  +
or [ebp+var_408] 2 +
jmp loc_102887C  +
cmp cx 2Ah +
jnz loc_1027FC9  +
mov eax [ebx] +
add ebx 4 +
cmp eax edi +
mov [ebp+var_418] ebx +
mov [ebp+var_428] eax +
jge loc_102887C  +
or [ebp+var_408] 4 +
neg [ebp+var_428]  +
jmp loc_102887C  +
mov eax [ebp+var_428] +
imul eax eax +
movzx ecx cx +
lea eax [eax+ecx-30h] +
mov [ebp+var_428] eax +
jmp loc_102887C  +
mov [ebp+var_40C] edi +
jmp loc_102887C  +
cmp cx 2Ah +
jnz loc_102801A  +
mov eax [ebx] +
add ebx 4 +
cmp eax edi +
mov [ebp+var_418] ebx +
mov [ebp+var_40C] eax +
jge loc_102887C  +
or [ebp+var_40C] 0FFFFFFFFh +
jmp loc_102887C  +
mov eax [ebp+var_40C] +
imul eax eax +
movzx ecx cx +
lea eax [eax+ecx-30h] +
mov [ebp+var_40C] eax +
jmp loc_102887C  +
movzx eax cx +
cmp eax 49h +
jz loc_102808E  +
cmp eax 68h +
jz loc_1028082  +
cmp eax 6Ch +
jz loc_102805F  +
cmp eax 77h +
jnz loc_102887C  +
or [ebp+var_408] 800h +
jmp loc_102887C  +
cmp word ptr [esi] 6Ch +
jnz loc_1028076  +
inc esi  +
inc esi  +
or [ebp+var_408] 1000h +
jmp loc_102887C  +
or [ebp+var_408] 10h +
jmp loc_102887C  +
or [ebp+var_408] 20h +
jmp loc_102887C  +
movzx eax word ptr [esi] +
cmp ax 36h +
jnz loc_10280B0  +
cmp word ptr [esi+2] 34h +
jnz loc_10280B0  +
add esi 4 +
or [ebp+var_408] 8000h +
jmp loc_102887C  +
cmp ax 33h +
jnz loc_10280CF  +
cmp word ptr [esi+2] 32h +
jnz loc_10280CF  +
add esi 4 +
and [ebp+var_408] 0FFFF7FFFh +
jmp loc_102887C  +
cmp ax 64h +
jz loc_102887C  +
cmp ax 69h +
jz loc_102887C  +
cmp ax 6Fh +
jz loc_102887C  +
cmp ax 75h +
jz loc_102887C  +
cmp ax 78h +
jz loc_102887C  +
cmp ax 58h +
jz loc_102887C  +
mov [ebp+var_438] edi +
mov eax [ebp+var_42C] +
lea edi [ebp+var_420] +
mov esi ecx +
mov [ebp+var_430] 1 +
call sub_1027D1F  +
jmp loc_1028874  +
movzx eax cx +
cmp eax 64h +
jg loc_1028386  +
jz loc_10283D9  +
cmp eax 53h +
jg loc_1028260  +
jz loc_10281CD  +
sub eax 41h +
jz loc_1028165  +
dec eax  +
dec eax  +
jz loc_10281B1  +
dec eax  +
dec eax  +
jz loc_1028165  +
dec eax  +
dec eax  +
jnz loc_10286DB  +
add ecx 20h +
mov [ebp+var_434] 1 +
mov [ebp+var_41C] ecx +
or [ebp+var_408] 40h +
cmp [ebp+var_40C] edi +
lea eax [ebp+WideCharStr] +
mov [ebp+var_410] eax +
mov eax 200h +
mov [ebp+var_414] eax +
jge loc_1028408  +
mov [ebp+var_40C] 6 +
jmp loc_102846E  +
test [ebp+var_408] 830h +
jnz loc_1028282  +
or [ebp+var_408] 20h +
jmp loc_1028282  +
test [ebp+var_408] 830h +
jnz loc_10281E0  +
or [ebp+var_408] 20h +
mov edi [ebp+var_40C] +
cmp edi 0FFFFFFFFh +
jnz loc_10281F0  +
mov edi 7FFFFFFFh +
add ebx 4 +
test byte ptr [ebp+var_408] 20h +
mov [ebp+var_418] ebx +
mov ebx [ebx-4] +
mov [ebp+var_410] ebx +
jz loc_102869F  +
test ebx ebx +
jnz loc_102821E  +
mov eax off_1063BD0 +
mov [ebp+var_410] eax +
and [ebp+var_414] 0 +
mov esi [ebp+var_410] +
test edi edi +
jle loc_10286DB  +
mov al [esi] +
test al al +
jz loc_10286DB  +
movzx eax al +
push eax  +
call sub_102D792  +
pop ecx  +
test eax eax +
jz loc_102824C  +
inc esi  +
inc esi  +
inc [ebp+var_414]  +
cmp [ebp+var_414] edi +
jl loc_1028233  +
jmp loc_10286DB  +
sub eax 58h +
jz loc_10284F7  +
dec eax  +
dec eax  +
jz loc_10282F9  +
sub eax 7 +
jz loc_1028178  +
dec eax  +
dec eax  +
jnz loc_10286DB  +
movzx eax word ptr [ebx] +
add ebx 4 +
xor esi esi +
inc esi  +
test byte ptr [ebp+var_408] 20h +
mov [ebp+var_430] esi +
mov [ebp+var_418] ebx +
mov [ebp+var_458] eax +
jz loc_10282DB  +
push dword_106418C  +
mov byte ptr [ebp+var_43C] al +
lea eax [ebp+var_43C] +
push eax  +
lea eax [ebp+WideCharStr] +
push eax  +
mov byte ptr [ebp+var_43C+1] 0 +
call sub_102D736  +
add esp 0Ch +
test eax eax +
jge loc_10282E2  +
mov [ebp+var_450] esi +
jmp loc_10282E2  +
mov [ebp+WideCharStr] ax +
lea eax [ebp+WideCharStr] +
mov [ebp+var_410] eax +
mov [ebp+var_414] esi +
jmp loc_10286DB  +
mov eax [ebx] +
add ebx 4 +
mov [ebp+var_418] ebx +
cmp eax edi +
jz loc_102836A  +
mov esi [eax+4] +
cmp esi edi +
jz loc_102836A  +
movzx ecx word ptr [eax] +
cmp [eax+2] cx +
jb loc_1027E5B  +
test [ebp+var_408] 800h +
movzx eax cx +
jz loc_1028359  +
xor ecx ecx +
mov edx eax +
not edx  +
inc ecx  +
test dl cl +
jz loc_1027E5B  +
mov edx esi +
not edx  +
test dl cl +
jz loc_1027E5B  +
mov [ebp+var_410] esi +
shr eax 1 +
mov [ebp+var_430] ecx +
jmp loc_10286D5  +
mov [ebp+var_430] edi +
mov [ebp+var_410] esi +
jmp loc_10286D5  +
mov eax off_1063BD0 +
mov [ebp+var_410] eax +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1028378  +
sub eax edx +
jmp loc_10286D5  +
cmp eax 70h +
jg loc_1028503  +
jz loc_10284F1  +
cmp eax 65h +
jl loc_10286DB  +
cmp eax 67h +
jle loc_1028178  +
cmp eax 69h +
jz loc_10283D9  +
cmp eax 6Eh +
jz loc_1027E5B  +
cmp eax 6Fh +
jnz loc_10286DB  +
test byte ptr [ebp+var_408] 80h +
mov [ebp+var_41C] edx +
jz loc_10283EA  +
or [ebp+var_408] 200h +
jmp loc_10283EA  +
or [ebp+var_408] 40h +
mov [ebp+var_41C] 0Ah +
mov eax [ebp+var_408] +
test eax 8000h +
jz loc_1028567  +
add ebx edx +
mov eax [ebx-8] +
mov edx [ebx-4] +
jmp loc_102859C  +
jnz loc_102841C  +
cmp cx 67h +
jnz loc_102846E  +
mov [ebp+var_40C] 1 +
jmp loc_102846E  +
cmp [ebp+var_40C] eax +
jle loc_102842A  +
mov [ebp+var_40C] eax +
mov edi 0A3h +
cmp [ebp+var_40C] edi +
jle loc_102846E  +
mov esi [ebp+var_40C] +
add esi 15Dh +
push esi  +
call sub_1021488  +
pop ecx  +
mov ecx [ebp+var_41C] +
mov [ebp+var_448] eax +
test eax eax +
jz loc_1028468  +
mov [ebp+var_410] eax +
mov [ebp+var_414] esi +
jmp loc_102846E  +
mov [ebp+var_40C] edi +
test byte ptr [ebp+var_408] 80h +
jz loc_1028481  +
or [ebp+var_434] 80h +
mov eax [ebx] +
push [ebp+var_434]  +
mov esi [ebp+var_410] +
push [ebp+var_40C]  +
add ebx 8 +
mov [ebp+var_468] eax +
mov eax [ebx-4] +
mov [ebp+var_464] eax +
movsx eax cl +
push eax  +
push [ebp+var_414]  +
lea eax [ebp+var_468] +
push esi  +
push eax  +
mov [ebp+var_418] ebx +
call sub_102E57A  +
add esp 18h +
cmp byte ptr [esi] 2Dh +
jnz loc_10284DC  +
or [ebp+var_408] 100h +
inc [ebp+var_410]  +
mov eax [ebp+var_410] +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_10284E5  +
jmp loc_102837F  +
mov [ebp+var_40C] edx +
mov [ebp+var_444] 7 +
jmp loc_1028527  +
sub eax 73h +
jz loc_10281E0  +
dec eax  +
dec eax  +
jz loc_10283E0  +
sub eax 3 +
jnz loc_10286DB  +
mov [ebp+var_444] 27h +
test byte ptr [ebp+var_408] 80h +
mov [ebp+var_41C] 10h +
jz loc_10283EA  +
push 30h  +
pop eax  +
mov word ptr [ebp+var_440] ax +
mov eax [ebp+var_444] +
add eax 51h +
mov word ptr [ebp+var_440+2] ax +
mov [ebp+var_424] 2 +
jmp loc_10283EA  +
test eax 1000h +
jnz loc_10283FB  +
add ebx 4 +
test al 20h +
jz loc_1028590  +
mov [ebp+var_418] ebx +
test al 40h +
jz loc_1028589  +
movsx eax word ptr [ebx-4] +
jmp loc_102858D  +
movzx eax word ptr [ebx-4] +
cdq   +
jmp loc_10285A2  +
test al 40h +
mov eax [ebx-4] +
jz loc_102859A  +
cdq   +
jmp loc_102859C  +
xor edx edx +
mov [ebp+var_418] ebx +
test byte ptr [ebp+var_408] 40h +
jz loc_10285C6  +
cmp edx edi +
jg loc_10285C6  +
jl loc_10285B5  +
cmp eax edi +
jnb loc_10285C6  +
neg eax  +
adc edx 0 +
neg edx  +
or [ebp+var_408] 100h +
test [ebp+var_408] 9000h +
mov ebx edx +
mov edi eax +
jnz loc_10285D8  +
xor ebx ebx +
cmp [ebp+var_40C] 0 +
jge loc_10285ED  +
mov [ebp+var_40C] 1 +
jmp loc_1028607  +
and [ebp+var_408] 0FFFFFFF7h +
mov eax 200h +
cmp [ebp+var_40C] eax +
jle loc_1028607  +
mov [ebp+var_40C] eax +
mov eax edi +
or eax ebx +
jnz loc_1028613  +
and [ebp+var_424] eax +
lea esi [ebp+var_205] +
mov eax [ebp+var_40C] +
dec [ebp+var_40C]  +
test eax eax +
jg loc_102862F  +
mov eax edi +
or eax ebx +
jz loc_102865C  +
mov eax [ebp+var_41C] +
cdq   +
push edx  +
push eax  +
push ebx  +
push edi  +
call sub_102E4E0  +
add ecx 30h +
cmp ecx 39h +
mov [ebp+var_45C] ebx +
mov edi eax +
mov ebx edx +
jle loc_1028657  +
add ecx [ebp+var_444] +
mov [esi] cl +
dec esi  +
jmp loc_1028619  +
lea eax [ebp+var_205] +
sub eax esi +
inc esi  +
test [ebp+var_408] 200h +
mov [ebp+var_414] eax +
mov [ebp+var_410] esi +
jz loc_10286DB  +
test eax eax +
jz loc_1028688  +
mov eax esi +
cmp byte ptr [eax] 30h +
jz loc_10286DB  +
dec [ebp+var_410]  +
mov eax [ebp+var_410] +
inc [ebp+var_414]  +
mov byte ptr [eax] 30h +
jmp loc_10286DB  +
test ebx ebx +
jnz loc_10286AE  +
mov eax off_1063BD4 +
mov [ebp+var_410] eax +
mov eax [ebp+var_410] +
mov [ebp+var_430] 1 +
jmp loc_10286C9  +
dec edi  +
cmp word ptr [eax] 0 +
jz loc_10286CD  +
inc eax  +
inc eax  +
test edi edi +
jnz loc_10286C0  +
sub eax [ebp+var_410] +
sar eax 1 +
mov [ebp+var_414] eax +
cmp [ebp+var_450] 0 +
jnz loc_1028852  +
mov eax [ebp+var_408] +
test al 40h +
jz loc_102871D  +
test eax 100h +
jz loc_10286FD  +
push 2Dh  +
jmp loc_102870B  +
test al 1 +
jz loc_1028705  +
push 2Bh  +
jmp loc_102870B  +
test al 2 +
jz loc_102871D  +
push 20h  +
pop ecx  +
mov word ptr [ebp+var_440] cx +
mov [ebp+var_424] 1 +
mov esi [ebp+var_428] +
sub esi [ebp+var_414] +
sub esi [ebp+var_424] +
mov [ebp+var_454] esi +
test al 0Ch +
jnz loc_1028750  +
push [ebp+var_42C]  +
lea eax [ebp+var_420] +
push esi  +
push 20h  +
call sub_1027D69  +
add esp 0Ch +
push [ebp+var_424]  +
mov ebx [ebp+var_42C] +
lea eax [ebp+var_440] +
push eax  +
lea eax [ebp+var_420] +
call sub_1027D9A  +
test byte ptr [ebp+var_408] 8 +
pop ecx  +
pop ecx  +
jz loc_1028794  +
test byte ptr [ebp+var_408] 4 +
jnz loc_1028794  +
push ebx  +
push esi  +
push 30h  +
lea eax [ebp+var_420] +
call sub_1027D69  +
add esp 0Ch +
cmp [ebp+var_430] 0 +
jnz loc_1028810  +
mov eax [ebp+var_414] +
test eax eax +
jle loc_1028810  +
mov ebx [ebp+var_410] +
mov [ebp+var_41C] eax +
push dword_106418C  +
dec [ebp+var_41C]  +
lea eax [ebp+var_458] +
push ebx  +
push eax  +
call sub_102D736  +
add esp 0Ch +
mov [ebp+var_45C] eax +
test eax eax +
jle loc_1028807  +
mov eax [ebp+var_42C] +
mov esi [ebp+var_458] +
lea edi [ebp+var_420] +
call sub_1027D1F  +
add ebx [ebp+var_45C] +
cmp [ebp+var_41C] 0 +
mov esi [ebp+var_454] +
jg loc_10287B3  +
jmp loc_1028829  +
or [ebp+var_420] 0FFFFFFFFh +
jmp loc_1028829  +
push [ebp+var_414]  +
lea eax [ebp+var_420] +
push [ebp+var_410]  +
call sub_1027D9A  +
pop ecx  +
pop ecx  +
cmp [ebp+var_420] 0 +
jl loc_1028852  +
test byte ptr [ebp+var_408] 4 +
jz loc_1028852  +
push [ebp+var_42C]  +
lea eax [ebp+var_420] +
push esi  +
push 20h  +
call sub_1027D69  +
add esp 0Ch +
cmp [ebp+var_448] 0 +
jz loc_102886E  +
push [ebp+var_448]  +
call sub_10213A1  +
and [ebp+var_448] 0 +
pop ecx  +
mov ebx [ebp+var_418] +
mov esi [ebp+var_44C] +
xor edi edi +
movzx eax word ptr [esi] +
mov [ebp+var_41C] eax +
cmp ax di +
jz loc_1028891  +
mov ecx eax +
jmp loc_1027EA9  +
cmp [ebp+var_438] edi +
jz loc_10288A6  +
cmp [ebp+var_438] 7 +
jnz loc_1027E5B  +
mov eax [ebp+var_420] +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1021557  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push edi  +
mov edi [ebp+arg_4] +
cmp edi 0FFFFFFFFh +
jnz loc_10288FC  +
mov [ebp+var_1C] 7FFFFFFFh +
jmp loc_102892C  +
cmp edi 3FFFFFFFh +
jbe loc_1028926  +
call sub_102501E  +
xor ebx ebx +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov dword ptr [eax] 16h +
call sub_1024FC5  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_10289B7  +
lea eax [edi+edi] +
mov [ebp+var_1C] eax +
push esi  +
push [ebp+arg_C]  +
mov esi [ebp+arg_0] +
push [ebp+arg_8]  +
lea eax [ebp+var_20] +
push eax  +
mov [ebp+var_18] esi +
mov [ebp+var_20] esi +
mov [ebp+var_14] 42h +
call sub_1027DF8  +
xor ecx ecx +
xor ebx ebx +
add esp 0Ch +
cmp eax ebx +
mov [ebp+arg_4] eax +
mov [esi+edi*2-2] cx +
jge loc_1028971  +
cmp [ebp+var_1C] ebx +
jl loc_10289B3  +
cmp esi ebx +
jz loc_10289B6  +
cmp edi ebx +
jbe loc_10289B6  +
mov [esi] cx +
jmp loc_10289B6  +
dec [ebp+var_1C]  +
js loc_1028980  +
mov eax [ebp+var_20] +
mov [eax] bl +
inc [ebp+var_20]  +
jmp loc_1028991  +
lea eax [ebp+var_20] +
push eax  +
push ebx  +
call sub_102E62E  +
pop ecx  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_10289B3  +
dec [ebp+var_1C]  +
js loc_102899D  +
mov eax [ebp+var_20] +
mov [eax] bl +
jmp loc_10289AE  +
lea eax [ebp+var_20] +
push eax  +
push ebx  +
call sub_102E62E  +
pop ecx  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_10289B3  +
mov eax [ebp+arg_4] +
jmp loc_10289B6  +
push 0FFFFFFFEh  +
pop eax  +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
sub esp 4 +
mov [ebp+var_4] edi +
mov edi [ebp+arg_0] +
mov ecx [ebp+arg_4] +
shr ecx 7 +
pxor xmm0 xmm0 +
jmp loc_10289E0  +
movdqa oword ptr [edi] xmm0 +
movdqa oword ptr [edi+10h] xmm0 +
movdqa oword ptr [edi+20h] xmm0 +
movdqa oword ptr [edi+30h] xmm0 +
movdqa oword ptr [edi+40h] xmm0 +
movdqa oword ptr [edi+50h] xmm0 +
movdqa oword ptr [edi+60h] xmm0 +
movdqa oword ptr [edi+70h] xmm0 +
lea edi [edi+80h] +
dec ecx  +
jnz loc_10289E0  +
mov edi [ebp+var_4] +
mov esp ebp +
pop ebp  +
retn   +
***
sub esp 10h +
mov [ebp+var_4] edi +
mov eax [ebp+arg_0] +
cdq   +
mov edi eax +
xor edi edx +
sub edi edx +
and edi 0Fh +
xor edi edx +
sub edi edx +
test edi edi +
jnz loc_1028A76  +
mov ecx [ebp+arg_8] +
mov edx ecx +
and edx 7Fh +
mov [ebp+var_C] edx +
cmp ecx edx +
jz loc_1028A5B  +
sub ecx edx +
push ecx  +
push eax  +
call sub_10289C0  +
add esp 8 +
mov eax [ebp+arg_0] +
mov edx [ebp+var_C] +
test edx edx +
jz loc_1028AA4  +
add eax [ebp+arg_8] +
sub eax edx +
mov [ebp+var_8] eax +
xor eax eax +
mov edi [ebp+var_8] +
mov ecx [ebp+var_C] +
stos   +
mov eax [ebp+arg_0] +
jmp loc_1028AA4  +
neg edi  +
add edi 10h +
mov [ebp+var_10] edi +
xor eax eax +
mov edi [ebp+arg_0] +
mov ecx [ebp+var_10] +
stos   +
mov eax [ebp+var_10] +
mov ecx [ebp+arg_0] +
mov edx [ebp+arg_8] +
add ecx eax +
sub edx eax +
push edx  +
push 0  +
push ecx  +
call sub_1028A1C  +
add esp 0Ch +
mov eax [ebp+arg_0] +
mov edi [ebp+var_4] +
mov esp ebp +
pop ebp  +
retn   +
***
call sub_1022E04  +
and dword ptr [ebp-4] 0 +
movapd xmm0 xmm1 +
mov dword ptr [ebp-1Ch] 1 +
jmp loc_1028AF0  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
cmp eax 0C0000005h +
jz loc_1028AE5  +
cmp eax 0C000001Dh +
jz loc_1028AE5  +
xor eax eax +
retn   +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
and dword ptr [ebp-1Ch] 0 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov eax [ebp-1Ch] +
call sub_1022E49  +
retn   +
***
push ebp  +
mov ebp esp +
sub esp 18h +
xor eax eax +
push ebx  +
mov [ebp-4] eax +
mov [ebp-0Ch] eax +
mov [ebp-8] eax +
push ebx  +
pushf   +
pop eax  +
mov ecx eax +
xor eax 200000h +
push eax  +
popf   +
pushf   +
pop edx  +
sub edx ecx +
jz loc_1028B4A  +
push ecx  +
popf   +
xor eax eax +
cpuid   +
mov [ebp-0Ch] eax +
mov [ebp-18h] ebx +
mov [ebp-14h] edx +
mov [ebp-10h] ecx +
mov eax 1 +
cpuid   +
mov [ebp-4] edx +
mov [ebp-8] eax +
pop ebx  +
test dword ptr [ebp-4] 4000000h +
jz loc_1028B62  +
call sub_1028AB0  +
test eax eax +
jz loc_1028B62  +
xor eax eax +
inc eax  +
jmp loc_1028B64  +
xor eax eax +
pop ebx  +
leave   +
retn   +
***
jmp dword_1066D04[ebx]  +
***
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
lea eax [ebp+arg_0] +
push eax  +
mov esi ecx +
call sub_102E799  +
mov dword ptr [esi] offset off_1006024 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
jmp sub_102E867  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1006024 +
call sub_102E867  +
test byte ptr [ebp+8] 1 +
jz loc_1028BD1  +
push esi  +
call sub_1021179  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_102E7FA  +
mov dword ptr [esi] offset off_1006024 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov edx [edi+4] +
test edx edx +
jz loc_1028C71  +
lea ecx [edx+8] +
cmp byte ptr [ecx] 0 +
jz loc_1028C71  +
mov esi [ebp+arg_4] +
mov eax [esi+4] +
cmp edx eax +
jz loc_1028C50  +
add eax 8 +
mov dl [ecx] +
cmp dl [eax] +
jnz loc_1028C43  +
test dl dl +
jz loc_1028C3F  +
mov dl [ecx+1] +
cmp dl [eax+1] +
jnz loc_1028C43  +
inc ecx  +
inc ecx  +
inc eax  +
inc eax  +
test dl dl +
jnz loc_1028C25  +
xor eax eax +
jmp loc_1028C48  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_1028C50  +
xor eax eax +
jmp loc_1028C74  +
test byte ptr [esi] 2 +
jz loc_1028C5A  +
test byte ptr [edi] 8 +
jz loc_1028C4C  +
mov eax [ebp+arg_8] +
mov eax [eax] +
test al 1 +
jz loc_1028C68  +
test byte ptr [edi] 1 +
jz loc_1028C4C  +
test al 2 +
jz loc_1028C71  +
test byte ptr [edi] 2 +
jz loc_1028C4C  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
mov eax [eax] +
cmp eax 0E0434F4Dh +
jz loc_1028CA8  +
cmp eax 0E06D7363h +
jnz loc_1028CB9  +
call sub_1024981  +
and dword ptr [eax+90h] 0 +
jmp sub_1024E71  +
***
call sub_1024981  +
add eax 90h +
cmp dword ptr [eax] 0 +
jle loc_1028CB9  +
dec dword ptr [eax]  +
xor eax eax +
pop ebp  +
retn   +
***
call sub_1022E04  +
cmp dword ptr [ebp-20h] 0 +
jnz loc_1028D98  +
call sub_1024981  +
mov [ebp-20h] eax +
mov eax [ebp-20h] +
add eax 90h +
cmp dword ptr [eax] 0 +
jle locret_1028DA7  +
dec dword ptr [eax]  +
retn   +
***
call sub_1022E04  +
xor eax eax +
cmp [ebp+0Ch] al +
setnz al  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
mov eax [ecx] +
push esi  +
mov esi [ebp+arg_0] +
add eax esi +
cmp dword ptr [ecx+4] 0 +
jl loc_1028E77  +
mov edx [ecx+4] +
mov ecx [ecx+8] +
mov esi [edx+esi] +
mov ecx [esi+ecx] +
add ecx edx +
add eax ecx +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
sub esp 1Ch +
test edx edx +
jnz loc_1028E98  +
call loc_1024EC7  +
call sub_1024E71  +
mov ecx [edx] +
mov [ebp+var_1] 0 +
test ecx ecx +
jle loc_1028F0D  +
mov eax [esi+1Ch] +
mov eax [eax+0Ch] +
and [ebp+var_10] 0 +
push ebx  +
push edi  +
lea edi [eax+4] +
mov eax [eax] +
mov [ebp+var_18] edi +
mov [ebp+var_1C] eax +
mov [ebp+var_14] ecx +
jmp loc_1028EC1  +
mov edx [ebp+arg_0] +
mov eax [ebp+var_18] +
mov [ebp+var_8] eax +
mov eax [ebp+var_1C] +
mov [ebp+var_C] eax +
test eax eax +
jle loc_1028F02  +
mov eax [edx+4] +
mov ecx [ebp+var_10] +
mov edi [esi+1Ch] +
lea ebx [eax+ecx] +
mov eax [ebp+var_8] +
push edi  +
push dword ptr [eax]  +
push ebx  +
call sub_1028BFF  +
add esp 0Ch +
test eax eax +
jnz loc_1028EFE  +
dec [ebp+var_C]  +
add [ebp+var_8] 4 +
cmp [ebp+var_C] eax +
jg loc_1028EDD  +
jmp loc_1028F02  +
mov [ebp+var_1] 1 +
add [ebp+var_10] 10h +
dec [ebp+var_14]  +
jnz loc_1028EBE  +
pop edi  +
pop ebx  +
mov al [ebp+var_1] +
leave   +
retn   +
***
push 8  +
mov eax offset loc_1055DA3 +
call sub_1021EF1  +
call sub_1024981  +
cmp dword ptr [eax+94h] 0 +
mov [ebp-14h] eax +
jz loc_1028F39  +
call loc_1024EC7  +
and dword ptr [ebp-4] 0 +
call sub_1024EAF  +
or dword ptr [ebp-4] 0FFFFFFFFh +
call sub_1024E71  +
mov eax [ebp-14h] +
test eax eax +
jnz loc_1028F57  +
call sub_1024981  +
mov ecx [ebp+8] +
push 0  +
push 0  +
mov [eax+94h] ecx +
call sub_10212E6  +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ecx  +
lea ecx [ebp-0Ch] +
call sub_1028BDD  +
push offset dword_105C424  +
lea eax [ebp-0Ch] +
push eax  +
call sub_10212E6  +
call sub_1022E04  +
mov ebx [ebp+0Ch] +
mov edi [ebp+8] +
mov eax [ebp+18h] +
mov [ebp-24h] eax +
and dword ptr [ebp-38h] 0 +
mov eax [ebx-4] +
mov [ebp-28h] eax +
push dword ptr [edi+18h]  +
lea eax [ebp-40h] +
push eax  +
call sub_1021DBC  +
pop ecx  +
pop ecx  +
mov [ebp-2Ch] eax +
call sub_1024981  +
mov esi eax +
mov [ebp-20h] esi +
lea eax [esi+88h] +
mov ecx [eax] +
mov [ebp-30h] ecx +
lea ecx [esi+8Ch] +
mov edx [ecx] +
mov [ebp-34h] edx +
mov [eax] edi +
mov eax [ebp+10h] +
mov [ecx] eax +
and dword ptr [ebp-4] 0 +
xor eax eax +
inc eax  +
mov [ebp+10h] eax +
mov [ebp-4] eax +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push ebx  +
call sub_1021E54  +
add esp 14h +
mov [ebp-24h] eax +
and dword ptr [ebp-4] 0 +
jmp loc_102909F  +
mov edi [ebp+8] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov dword ptr [ebp+10h] 0 +
call sub_10290C9  +
mov eax [ebp-24h] +
call sub_1022E49  +
retn   +
***
mov eax [ebp-28h] +
mov [ebx-4] eax +
push dword ptr [ebp-2Ch]  +
call sub_1021E11  +
pop ecx  +
test esi esi +
jnz loc_10290E6  +
call sub_1024981  +
mov esi eax +
mov [ebp-20h] esi +
mov eax [ebp-30h] +
mov [esi+88h] eax +
mov eax [ebp-34h] +
mov [esi+8Ch] eax +
cmp dword ptr [edi] 0E06D7363h +
jnz locret_1029142  +
cmp dword ptr [edi+10h] 3 +
jnz locret_1029142  +
mov eax [edi+14h] +
cmp eax 19930520h +
jz loc_102911E  +
cmp eax 19930521h +
jz loc_102911E  +
cmp eax 19930522h +
jnz locret_1029142  +
cmp dword ptr [ebp-38h] 0 +
jnz locret_1029142  +
cmp dword ptr [ebp-24h] 0 +
jz locret_1029142  +
push dword ptr [edi+18h]  +
call sub_1021DE5  +
pop ecx  +
test eax eax +
jz locret_1029142  +
push dword ptr [ebp+10h]  +
push edi  +
call sub_1028DF7  +
pop ecx  +
pop ecx  +
retn   +
***
call sub_1022E04  +
xor edx edx +
mov [ebp-1Ch] edx +
mov eax [ebp+10h] +
mov ecx [eax+4] +
cmp ecx edx +
jz loc_10292BF  +
cmp [ecx+8] dl +
jz loc_10292BF  +
mov ecx [eax+8] +
cmp ecx edx +
jnz loc_1029183  +
test dword ptr [eax] 80000000h +
jz loc_10292BF  +
mov eax [eax] +
mov esi [ebp+0Ch] +
test eax eax +
js loc_1029190  +
lea esi [ecx+esi+0Ch] +
mov [ebp-4] edx +
xor ebx ebx +
inc ebx  +
push ebx  +
test al 8 +
jz loc_10291DC  +
mov edi [ebp+8] +
push dword ptr [edi+18h]  +
call sub_102E8BA  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10292A2  +
push ebx  +
push esi  +
call sub_102E8BA  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10292A2  +
mov eax [edi+18h] +
mov [esi] eax +
mov ecx [ebp+14h] +
add ecx 8 +
push ecx  +
push eax  +
call sub_1028E51  +
pop ecx  +
pop ecx  +
mov [esi] eax +
jmp loc_10292A7  +
mov edi [ebp+14h] +
mov eax [ebp+8] +
push dword ptr [eax+18h]  +
test [edi] bl +
jz loc_1029231  +
call sub_102E8BA  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10292A2  +
push ebx  +
push esi  +
call sub_102E8BA  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10292A2  +
push dword ptr [edi+14h]  +
mov eax [ebp+8] +
push dword ptr [eax+18h]  +
push esi  +
call loc_1025EB0  +
add esp 0Ch +
cmp dword ptr [edi+14h] 4 +
jnz loc_10292A7  +
mov eax [esi] +
test eax eax +
jz loc_10292A7  +
add edi 8 +
push edi  +
jmp loc_10291CD  +
cmp [edi+18h] edx +
jnz loc_102926E  +
call sub_102E8BA  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10292A2  +
push ebx  +
push esi  +
call sub_102E8BA  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10292A2  +
push dword ptr [edi+14h]  +
add edi 8 +
push edi  +
mov eax [ebp+8] +
push dword ptr [eax+18h]  +
call sub_1028E51  +
pop ecx  +
pop ecx  +
push eax  +
push esi  +
call loc_1025EB0  +
add esp 0Ch +
jmp loc_10292A7  +
call sub_102E8BA  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10292A2  +
push ebx  +
push esi  +
call sub_102E8BA  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10292A2  +
push dword ptr [edi+18h]  +
call sub_102E8BA  +
pop ecx  +
test eax eax +
jz loc_10292A2  +
test byte ptr [edi] 4 +
push 0  +
pop eax  +
setnz al  +
inc eax  +
mov [ebp-1Ch] eax +
jmp loc_10292A7  +
call loc_1024EC7  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov eax [ebp-1Ch] +
jmp loc_10292C1  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
call sub_1024E71  +
xor eax eax +
call sub_1022E49  +
retn   +
***
call sub_1022E04  +
inc eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_10] 0 +
jz loc_102937E  +
push [ebp+arg_10]  +
push ebx  +
push esi  +
push [ebp+arg_0]  +
call sub_10292CC  +
add esp 10h +
cmp [ebp+arg_18] 0 +
push [ebp+arg_0]  +
jnz loc_102938A  +
push esi  +
jmp loc_102938D  +
push [ebp+arg_18]  +
call sub_1021ADB  +
push dword ptr [edi]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push esi  +
call sub_1028CC2  +
mov eax [edi+4] +
push 100h  +
push [ebp+arg_14]  +
inc eax  +
mov [esi+8] eax +
push dword ptr [ebx+0Ch]  +
push [ebp+arg_C]  +
push [ebp+arg_4]  +
push esi  +
push [ebp+arg_0]  +
call sub_1028F94  +
add esp 2Ch +
test eax eax +
jz loc_10293CF  +
push esi  +
push eax  +
call sub_1021A5F  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi] 80000003h +
jz loc_10294BE  +
push edi  +
call sub_1024981  +
lea edi [eax+80h] +
cmp dword ptr [edi] 0 +
jz loc_1029432  +
call sub_102472E  +
cmp [edi] eax +
jz loc_1029432  +
cmp dword ptr [esi] 0E0434F4Dh +
jz loc_1029432  +
push [ebp+arg_1C]  +
push [ebp+arg_18]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push esi  +
call sub_1021BA8  +
add esp 1Ch +
test eax eax +
jnz loc_10294BD  +
mov edi [ebp+arg_10] +
cmp dword ptr [edi+0Ch] 0 +
jnz loc_1029440  +
call loc_1024EC7  +
mov esi [ebp+arg_14] +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
push esi  +
push [ebp+arg_18]  +
push edi  +
call sub_1021D42  +
mov edi eax +
mov eax [ebp+var_4] +
add esp 14h +
cmp eax [ebp+var_8] +
jnb loc_10294BD  +
push ebx  +
cmp esi [edi] +
jl loc_10294AE  +
cmp esi [edi+4] +
jg loc_10294AE  +
mov eax [edi+0Ch] +
mov ecx [edi+10h] +
shl eax 4 +
add eax ecx +
mov ecx [eax-0Ch] +
test ecx ecx +
jz loc_1029484  +
cmp byte ptr [ecx+8] 0 +
jnz loc_10294AE  +
lea ebx [eax-10h] +
test byte ptr [ebx] 40h +
jnz loc_10294AE  +
push [ebp+arg_1C]  +
mov esi [ebp+arg_4] +
push [ebp+arg_18]  +
push 0  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call sub_1029363  +
mov esi [ebp+arg_14] +
add esp 1Ch +
inc [ebp+var_4]  +
mov eax [ebp+var_4] +
add edi 14h +
cmp eax [ebp+var_8] +
jb loc_1029463  +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
and [ebp+var_8] 0 +
mov ecx [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_10] +
mov eax [edi+4] +
cmp eax 80h +
mov [ebp+var_1] 0 +
jg loc_10294EF  +
movsx ecx byte ptr [ecx+8] +
jmp loc_10294F2  +
mov ecx [ecx+8] +
cmp ecx 0FFFFFFFFh +
mov [ebp+var_C] ecx +
jl loc_10294FE  +
cmp ecx eax +
jl loc_1029503  +
call loc_1024EC7  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi] 0E06D7363h +
jnz loc_10297CC  +
cmp dword ptr [esi+10h] 3 +
mov ebx 19930520h +
jnz loc_1029617  +
mov eax [esi+14h] +
cmp eax ebx +
jz loc_102953A  +
cmp eax 19930521h +
jz loc_102953A  +
cmp eax 19930522h +
jnz loc_1029617  +
cmp dword ptr [esi+1Ch] 0 +
jnz loc_1029617  +
call sub_1024981  +
mov edi eax +
mov esi [edi+88h] +
mov [ebp+var_8] edi +
test esi esi +
jz loc_1029812  +
mov eax [edi+8Ch] +
push 1  +
push esi  +
mov [ebp+arg_0] esi +
mov [ebp+arg_8] eax +
call sub_102E8BA  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_102957B  +
call loc_1024EC7  +
cmp dword ptr [esi] 0E06D7363h +
jnz loc_10295A9  +
cmp dword ptr [esi+10h] 3 +
jnz loc_10295A9  +
mov eax [esi+14h] +
cmp eax ebx +
jz loc_102959E  +
cmp eax 19930521h +
jz loc_102959E  +
cmp eax 19930522h +
jnz loc_10295A9  +
cmp dword ptr [esi+1Ch] 0 +
jnz loc_10295A9  +
call loc_1024EC7  +
lea eax [edi+94h] +
mov edi [eax] +
test edi edi +
jz loc_1029614  +
and dword ptr [eax] 0 +
push edi  +
call sub_1028E7F  +
pop ecx  +
test al al +
jnz loc_1029614  +
xor ebx ebx +
xor esi esi +
cmp [edi] ebx +
jle loc_10295E8  +
mov eax [edi+4] +
mov ecx [eax+ebx+4] +
push offset off_1063BD8  +
call sub_102135E  +
test eax eax +
jnz loc_10295ED  +
inc esi  +
add ebx 10h +
cmp esi [edi] +
jl loc_10295CB  +
call sub_1024E71  +
push 1  +
push [ebp+arg_0]  +
call sub_1028DF7  +
pop ecx  +
pop ecx  +
push offset dword_1006030  +
lea ecx [ebp+var_38] +
call sub_1028B7E  +
push offset dword_105C424  +
lea eax [ebp+var_38] +
push eax  +
call sub_10212E6  +
mov edi [ebp+arg_10] +
cmp dword ptr [esi] 0E06D7363h +
jnz loc_10297CC  +
cmp dword ptr [esi+10h] 3 +
jnz loc_10297CC  +
mov eax [esi+14h] +
cmp eax ebx +
jz loc_1029646  +
cmp eax 19930521h +
jz loc_1029646  +
cmp eax 19930522h +
jnz loc_10297CC  +
cmp dword ptr [edi+0Ch] 0 +
jbe loc_1029721  +
lea eax [ebp+var_24] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+var_C]  +
push [ebp+arg_18]  +
push edi  +
call sub_1021D42  +
add esp 14h +
mov edi eax +
mov eax [ebp+var_14] +
cmp eax [ebp+var_24] +
jnb loc_102971E  +
mov eax [ebp+var_C] +
cmp [edi] eax +
jg loc_1029713  +
cmp eax [edi+4] +
jg loc_1029713  +
mov eax [edi+10h] +
mov [ebp+var_10] eax +
mov eax [edi+0Ch] +
mov [ebp+var_20] eax +
test eax eax +
jle loc_1029713  +
mov eax [esi+1Ch] +
mov eax [eax+0Ch] +
lea ecx [eax+4] +
mov eax [eax] +
mov [ebp+var_28] ecx +
mov [ebp+var_2C] eax +
mov eax [ebp+var_28] +
mov [ebp+var_18] eax +
mov eax [ebp+var_2C] +
mov [ebp+var_1C] eax +
test eax eax +
jle loc_10296DE  +
mov eax [ebp+var_18] +
push dword ptr [esi+1Ch]  +
mov ebx [eax] +
push ebx  +
push [ebp+var_10]  +
call sub_1028BFF  +
add esp 0Ch +
test eax eax +
jnz loc_10296ED  +
dec [ebp+var_1C]  +
add [ebp+var_18] 4 +
cmp [ebp+var_1C] eax +
jg loc_10296BA  +
dec [ebp+var_20]  +
add [ebp+var_10] 10h +
cmp [ebp+var_20] 0 +
jg loc_10296AA  +
jmp loc_1029713  +
push [ebp+arg_1C]  +
mov [ebp+var_1] 1 +
push [ebp+arg_18]  +
push ebx  +
push [ebp+arg_10]  +
mov ebx [ebp+var_10] +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push esi  +
mov esi [ebp+arg_4] +
call sub_1029363  +
mov esi [ebp+arg_0] +
add esp 1Ch +
inc [ebp+var_14]  +
add edi 14h +
jmp loc_1029669  +
mov edi [ebp+arg_10] +
cmp [ebp+arg_14] 0 +
jz loc_1029731  +
push 1  +
push esi  +
call sub_1028DF7  +
pop ecx  +
pop ecx  +
cmp [ebp+var_1] 0 +
jnz loc_10297F8  +
mov eax [edi] +
and eax 1FFFFFFFh +
cmp eax 19930521h +
jb loc_10297F8  +
mov eax [edi+1Ch] +
test eax eax +
jz loc_10297F8  +
push eax  +
call sub_1028E7F  +
pop ecx  +
test al al +
jnz loc_10297F8  +
cmp [ebp+var_8] 0 +
jnz loc_102978D  +
call sub_1024981  +
mov [ebp+var_8] eax +
test eax eax +
jnz loc_102978D  +
call sub_1024981  +
mov [ebp+var_8] eax +
test eax eax +
jnz loc_102978D  +
call sub_1024981  +
mov [ebp+var_8] eax +
cmp [ebp+arg_1C] 0 +
mov eax [ebp+var_8] +
mov ecx [ebp+arg_8] +
mov [eax+88h] esi +
mov [eax+8Ch] ecx +
push esi  +
jnz loc_10297AB  +
push [ebp+arg_4]  +
jmp loc_10297AE  +
push [ebp+arg_1C]  +
call sub_1021ADB  +
push 0FFFFFFFFh  +
push edi  +
push [ebp+arg_C]  +
push [ebp+arg_4]  +
call sub_1028CC2  +
add esp 10h +
push dword ptr [edi+1Ch]  +
call loc_1028F17  +
cmp dword ptr [edi+0Ch] 0 +
jbe loc_10297F8  +
cmp [ebp+arg_14] 0 +
jnz loc_10295E8  +
push [ebp+arg_1C]  +
push [ebp+arg_18]  +
push [ebp+var_C]  +
push edi  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push esi  +
call sub_10293D6  +
add esp 20h +
mov eax [ebp+var_8] +
test eax eax +
jnz loc_1029804  +
call sub_1024981  +
cmp dword ptr [eax+94h] 0 +
jz loc_1029812  +
call loc_1024EC7  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
call sub_1024981  +
cmp dword ptr [eax+20Ch] 0 +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov edi 0E06D7363h +
mov esi 1FFFFFFFh +
mov ebx 19930522h +
jnz loc_1029867  +
mov edx [ecx] +
cmp edx edi +
jz loc_1029867  +
cmp edx 80000026h +
jz loc_1029867  +
mov edx [eax] +
and edx esi +
cmp edx ebx +
jb loc_1029867  +
test byte ptr [eax+20h] 1 +
jnz loc_10298FA  +
test byte ptr [ecx+4] 66h +
jz loc_1029890  +
cmp dword ptr [eax+4] 0 +
jz loc_10298FA  +
cmp [ebp+arg_14] 0 +
jnz loc_10298FA  +
push 0FFFFFFFFh  +
push eax  +
push [ebp+arg_C]  +
push [ebp+arg_4]  +
call sub_1028CC2  +
add esp 10h +
jmp loc_10298FA  +
cmp dword ptr [eax+0Ch] 0 +
jnz loc_10298A8  +
mov edx [eax] +
and edx esi +
cmp edx 19930521h +
jb loc_10298FA  +
cmp dword ptr [eax+1Ch] 0 +
jz loc_10298FA  +
cmp [ecx] edi +
jnz loc_10298DE  +
cmp dword ptr [ecx+10h] 3 +
jb loc_10298DE  +
cmp [ecx+14h] ebx +
jbe loc_10298DE  +
mov edx [ecx+1Ch] +
mov edx [edx+8] +
test edx edx +
jz loc_10298DE  +
movzx esi [ebp+arg_1C] +
push esi  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push eax  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push ecx  +
call edx  +
add esp 20h +
jmp loc_10298FD  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push dword ptr [ebp+arg_1C]  +
push eax  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push ecx  +
call sub_10294C6  +
add esp 20h +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
sub esp 4 +
push ebx  +
push ecx  +
mov eax [ebp+arg_4] +
add eax 0Ch +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebp  +
push [ebp+arg_8]  +
mov ecx [ebp+arg_8] +
mov ebp [ebp+var_4] +
call sub_102E9E0  +
push esi  +
push edi  +
call eax  +
pop edi  +
pop esi  +
mov ebx ebp +
pop ebp  +
mov ecx [ebp+arg_8] +
push ebp  +
mov ebp ebx +
cmp ecx 100h +
jnz loc_102994F  +
mov ecx 2 +
push ecx  +
call sub_102E9E0  +
pop ebp  +
pop ecx  +
pop ebx  +
leave   +
retn 0Ch  +
***
call sub_1022E04  +
xor edi edi +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push edi  +
push [ebp+arg_0]  +
lea ecx [ebp+var_18] +
call sub_102160E  +
mov eax [ebp+arg_8] +
mov edi [ebp+arg_4] +
xor ebx ebx +
cmp eax ebx +
jz loc_1029A2C  +
mov [eax] edi +
cmp edi ebx +
jnz loc_1029A5B  +
call sub_102501E  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov dword ptr [eax] 16h +
call sub_1024FC5  +
add esp 14h +
cmp [ebp+var_C] bl +
jz loc_1029A54  +
mov eax [ebp+var_10] +
and dword ptr [eax+70h] 0FFFFFFFDh +
xor eax eax +
jmp loc_1029C0E  +
cmp [ebp+arg_C] ebx +
jz loc_1029A6C  +
cmp [ebp+arg_C] 2 +
jl loc_1029A30  +
cmp [ebp+arg_C] 24h +
jg loc_1029A30  +
push esi  +
movzx esi word ptr [edi] +
mov [ebp+var_4] ebx +
add edi 2 +
jmp loc_1029A7D  +
movzx esi word ptr [edi] +
inc edi  +
inc edi  +
lea eax [ebp+var_18] +
push eax  +
push 8  +
push esi  +
call sub_102EBF0  +
add esp 0Ch +
test eax eax +
jnz loc_1029A78  +
cmp si 2Dh +
jnz loc_1029A9C  +
or [ebp+arg_10] 2 +
jmp loc_1029AA2  +
cmp si 2Bh +
jnz loc_1029AA7  +
movzx esi word ptr [edi] +
inc edi  +
inc edi  +
cmp [ebp+arg_C] ebx +
jnz loc_1029ADF  +
push esi  +
call sub_102EA10  +
pop ecx  +
test eax eax +
jz loc_1029AC0  +
mov [ebp+arg_C] 0Ah +
jmp loc_1029B06  +
movzx eax word ptr [edi] +
cmp ax 78h +
jz loc_1029AD8  +
cmp ax 58h +
jz loc_1029AD8  +
mov [ebp+arg_C] 8 +
jmp loc_1029B06  +
mov [ebp+arg_C] 10h +
cmp [ebp+arg_C] 10h +
jnz loc_1029B06  +
push esi  +
call sub_102EA10  +
pop ecx  +
test eax eax +
jnz loc_1029B06  +
movzx eax word ptr [edi] +
cmp ax 78h +
jz loc_1029AFF  +
cmp ax 58h +
jnz loc_1029B06  +
inc edi  +
inc edi  +
movzx esi word ptr [edi] +
inc edi  +
inc edi  +
or eax 0FFFFFFFFh +
xor edx edx +
div  [ebp+arg_C] +
mov [ebp+var_8] edx +
mov ebx eax +
push esi  +
call sub_102EA10  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jnz loc_1029B48  +
push 41h  +
pop eax  +
cmp ax si +
ja loc_1029B2D  +
cmp si 5Ah +
jbe loc_1029B36  +
lea eax [esi-61h] +
cmp ax 19h +
ja loc_1029B6D  +
lea eax [esi-61h] +
cmp ax 19h +
movzx eax si +
ja loc_1029B45  +
sub eax 20h +
add eax 0FFFFFFC9h +
cmp eax [ebp+arg_C] +
jnb loc_1029B6D  +
or [ebp+arg_10] 8 +
cmp [ebp+arg_14] 0 +
jnz loc_1029B85  +
cmp [ebp+var_4] ebx +
jb loc_1029B85  +
jnz loc_1029B63  +
cmp eax [ebp+var_8] +
jbe loc_1029B85  +
or [ebp+arg_10] 4 +
cmp [ebp+arg_8] 0 +
jnz loc_1029B91  +
mov eax [ebp+arg_10] +
dec edi  +
dec edi  +
test al 8 +
jnz loc_1029B9B  +
cmp [ebp+arg_8] 0 +
jz loc_1029B7F  +
mov edi [ebp+arg_4] +
and [ebp+var_4] 0 +
jmp loc_1029BEB  +
mov ecx [ebp+var_4] +
imul ecx [ebp+arg_C] +
add ecx eax +
mov [ebp+var_4] ecx +
movzx esi word ptr [edi] +
inc edi  +
inc edi  +
jmp loc_1029B13  +
mov esi 7FFFFFFFh +
test al 4 +
jnz loc_1029BBF  +
test al 1 +
jnz loc_1029BEB  +
and eax 2 +
jz loc_1029BB6  +
cmp [ebp+var_4] 80000000h +
ja loc_1029BBF  +
test eax eax +
jnz loc_1029BEB  +
cmp [ebp+var_4] esi +
jbe loc_1029BEB  +
cmp [ebp+arg_14] 0 +
jnz loc_1029BEB  +
call sub_102501E  +
test byte ptr [ebp+arg_10] 1 +
mov dword ptr [eax] 22h +
jz loc_1029BDC  +
or [ebp+var_4] 0FFFFFFFFh +
jmp loc_1029BEB  +
test byte ptr [ebp+arg_10] 2 +
push 0  +
pop eax  +
setnz al  +
add eax esi +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
pop esi  +
test eax eax +
jz loc_1029BF5  +
mov [eax] edi +
test byte ptr [ebp+arg_10] 2 +
jz loc_1029BFE  +
neg [ebp+var_4]  +
cmp [ebp+var_C] 0 +
jz loc_1029C0B  +
mov eax [ebp+var_10] +
and dword ptr [eax+70h] 0FFFFFFFDh +
mov eax [ebp+var_4] +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
xor eax eax +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
cmp dword_1065630 eax +
jnz loc_1029C3A  +
push offset off_1063BC0  +
jmp loc_1029C3B  +
push eax  +
call sub_1029A09  +
add esp 18h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 0FFFFh +
mov ecx eax +
sub esp 14h +
cmp [ebp+WideCharStr] cx +
jz locret_1029CFD  +
push ebx  +
push [ebp+arg_4]  +
lea ecx [ebp+var_14] +
call sub_102160E  +
mov ecx [ebp+var_14] +
mov edx [ecx+14h] +
xor ebx ebx +
cmp edx ebx +
jnz loc_1029C8F  +
mov eax dword ptr [ebp+WideCharStr] +
lea ecx [eax-41h] +
cmp cx 19h +
ja loc_1029C8A  +
add eax 20h +
movzx eax ax +
jmp loc_1029CF0  +
push esi  +
mov eax 100h +
mov esi eax +
cmp [ebp+WideCharStr] si +
pop esi  +
jnb loc_1029CC7  +
lea eax [ebp+var_14] +
push eax  +
push 1  +
push dword ptr [ebp+WideCharStr]  +
call sub_102EBF0  +
add esp 0Ch +
test eax eax +
movzx eax [ebp+WideCharStr] +
jz loc_1029CF0  +
mov ecx [ebp+var_14] +
mov ecx [ecx+0CCh] +
movzx ax byte ptr [ecx+eax] +
jmp loc_1029C8A  +
push dword ptr [ecx+4]  +
lea ecx [ebp+DestStr] +
push 1  +
push ecx  +
push 1  +
lea ecx [ebp+WideCharStr] +
push ecx  +
push eax  +
push edx  +
lea eax [ebp+var_14] +
push eax  +
call sub_1026E9D  +
add esp 20h +
test eax eax +
movzx eax [ebp+WideCharStr] +
jz loc_1029CF0  +
movzx eax [ebp+DestStr] +
cmp [ebp+var_8] bl +
jz loc_1029CFC  +
mov ecx [ebp+var_C] +
and dword ptr [ecx+70h] 0FFFFFFFDh +
pop ebx  +
leave   +
retn   +
***
sub esp 8 +
mov [ebp+var_4] edi +
mov [ebp+var_8] esi +
mov esi [ebp+arg_4] +
mov edi [ebp+arg_0] +
mov ecx [ebp+arg_8] +
shr ecx 7 +
jmp loc_1029D24  +
lea ebx [ebx+0] +
movdqa xmm0 oword ptr [esi] +
movdqa xmm1 oword ptr [esi+10h] +
movdqa xmm2 oword ptr [esi+20h] +
movdqa xmm3 oword ptr [esi+30h] +
movdqa oword ptr [edi] xmm0 +
movdqa oword ptr [edi+10h] xmm1 +
movdqa oword ptr [edi+20h] xmm2 +
movdqa oword ptr [edi+30h] xmm3 +
movdqa xmm4 oword ptr [esi+40h] +
movdqa xmm5 oword ptr [esi+50h] +
movdqa xmm6 oword ptr [esi+60h] +
movdqa xmm7 oword ptr [esi+70h] +
movdqa oword ptr [edi+40h] xmm4 +
movdqa oword ptr [edi+50h] xmm5 +
movdqa oword ptr [edi+60h] xmm6 +
movdqa oword ptr [edi+70h] xmm7 +
lea esi [esi+80h] +
lea edi [edi+80h] +
dec ecx  +
jnz loc_1029D24  +
mov esi [ebp+var_8] +
mov edi [ebp+var_4] +
mov esp ebp +
pop ebp  +
retn   +
***
sub esp 1Ch +
mov [ebp+var_C] edi +
mov [ebp+var_8] esi +
mov [ebp+var_4] ebx +
mov ebx [ebp+arg_4] +
mov eax ebx +
cdq   +
mov ecx eax +
mov eax [ebp+arg_0] +
xor ecx edx +
sub ecx edx +
and ecx 0Fh +
xor ecx edx +
sub ecx edx +
cdq   +
mov edi eax +
xor edi edx +
sub edi edx +
and edi 0Fh +
xor edi edx +
sub edi edx +
mov edx ecx +
or edx edi +
jnz loc_1029E13  +
mov esi [ebp+arg_8] +
mov ecx esi +
and ecx 7Fh +
mov [ebp+var_18] ecx +
cmp esi ecx +
jz loc_1029DEB  +
sub esi ecx +
push esi  +
push ebx  +
push eax  +
call sub_1029D04  +
add esp 0Ch +
mov eax [ebp+arg_0] +
mov ecx [ebp+var_18] +
test ecx ecx +
jz loc_1029E66  +
mov ebx [ebp+arg_8] +
mov edx [ebp+arg_4] +
add edx ebx +
sub edx ecx +
mov [ebp+var_14] edx +
add ebx eax +
sub ebx ecx +
mov [ebp+var_10] ebx +
mov esi [ebp+var_14] +
mov edi [ebp+var_10] +
mov ecx [ebp+var_18] +
movs   +
mov eax [ebp+arg_0] +
jmp loc_1029E66  +
cmp ecx edi +
jnz loc_1029E4C  +
neg ecx  +
add ecx 10h +
mov [ebp+var_1C] ecx +
mov esi [ebp+arg_4] +
mov edi [ebp+arg_0] +
mov ecx [ebp+var_1C] +
movs   +
mov ecx [ebp+arg_0] +
add ecx [ebp+var_1C] +
mov edx [ebp+arg_4] +
add edx [ebp+var_1C] +
mov eax [ebp+arg_8] +
sub eax [ebp+var_1C] +
push eax  +
push edx  +
push ecx  +
call sub_1029D90  +
add esp 0Ch +
mov eax [ebp+arg_0] +
jmp loc_1029E66  +
mov esi [ebp+arg_4] +
mov edi [ebp+arg_0] +
mov ecx [ebp+arg_8] +
mov edx ecx +
shr ecx 2 +
movs   +
mov ecx edx +
and ecx 3 +
movs   +
mov eax [ebp+arg_0] +
mov ebx [ebp+var_4] +
mov esi [ebp+var_8] +
mov edi [ebp+var_C] +
mov esp ebp +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push esi  +
call sub_102EE4A  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_1029EDB  +
mov eax dword_1066D40 +
cmp esi 1 +
jnz loc_1029E9E  +
test byte ptr [eax+4Ch] 1 +
jnz loc_1029EA9  +
cmp esi 2 +
jnz loc_1029EBF  +
test byte ptr [eax+28h] 1 +
jz loc_1029EBF  +
push 2  +
call sub_102EE4A  +
push 1  +
mov edi eax +
call sub_102EE4A  +
pop ecx  +
pop ecx  +
cmp eax edi +
jz loc_1029EDB  +
push esi  +
call sub_102EE4A  +
pop ecx  +
push eax  +
call ds:CloseHandle  +
test eax eax +
jnz loc_1029EDB  +
call ds:GetLastError  +
mov edi eax +
jmp loc_1029EDD  +
xor edi edi +
push esi  +
call sub_102EDBF  +
mov eax esi +
and esi 1Fh +
imul esi esi +
sar eax 5 +
mov eax dword_1066D40[eax*4] +
pop ecx  +
mov byte ptr [eax+esi+4] 0 +
test edi edi +
jz loc_1029F0B  +
push edi  +
call sub_102504E  +
pop ecx  +
or eax 0FFFFFFFFh +
jmp loc_1029F0D  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
call sub_1022E04  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
xor esi esi +
cmp eax esi +
jnz loc_102A053  +
call sub_102501E  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_1024FC5  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_102A056  +
mov eax [eax+10h] +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+0Ch] +
test al 83h +
jz loc_102A08C  +
test al 8 +
jz loc_102A08C  +
push dword ptr [esi+8]  +
call sub_10213A1  +
and dword ptr [esi+0Ch] 0FFFFFBF7h +
xor eax eax +
pop ecx  +
mov [esi] eax +
mov [esi+8] eax +
mov [esi+4] eax +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+0Ch] +
mov ecx eax +
and cl 3 +
xor ebx ebx +
cmp cl 2 +
jnz loc_102A0ED  +
test eax 108h +
jz loc_102A0ED  +
mov eax [esi+8] +
push edi  +
mov edi [esi] +
sub edi eax +
test edi edi +
jle loc_102A0EC  +
push edi  +
push eax  +
push esi  +
call sub_102A027  +
pop ecx  +
push eax  +
call sub_102D27B  +
add esp 0Ch +
cmp eax edi +
jnz loc_102A0E5  +
mov eax [esi+0Ch] +
test al al +
jns loc_102A0EC  +
and eax 0FFFFFFFDh +
mov [esi+0Ch] eax +
jmp loc_102A0EC  +
or dword ptr [esi+0Ch] 20h +
or ebx 0FFFFFFFFh +
pop edi  +
mov eax [esi+8] +
and dword ptr [esi+4] 0 +
mov [esi] eax +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_102A117  +
push esi  +
call sub_102A14E  +
pop ecx  +
jmp loc_102A146  +
push esi  +
call sub_102A094  +
pop ecx  +
test eax eax +
jz loc_102A127  +
or eax 0FFFFFFFFh +
jmp loc_102A146  +
test dword ptr [esi+0Ch] 4000h +
jz loc_102A144  +
push esi  +
call sub_102A027  +
push eax  +
call sub_102F15C  +
pop ecx  +
neg eax  +
pop ecx  +
sbb eax eax +
jmp loc_102A146  +
xor eax eax +
pop esi  +
pop ebp  +
retn   +
***
call sub_1022E04  +
mov eax dword_1065CF0 +
push dword ptr [eax+esi*4]  +
push esi  +
call sub_102A3B7  +
pop ecx  +
pop ecx  +
retn   +
***
pop ecx  +
retn   +
***
mov eax dword_1066D00 +
push esi  +
push 14h  +
pop esi  +
test eax eax +
jnz loc_102A24F  +
mov eax 200h +
jmp loc_102A255  +
cmp eax esi +
jge loc_102A25A  +
mov eax esi +
mov dword_1066D00 eax +
push 4  +
push eax  +
call sub_1023497  +
pop ecx  +
pop ecx  +
mov dword_1065CF0 eax +
test eax eax +
jnz loc_102A28B  +
push 4  +
push esi  +
mov dword_1066D00 esi +
call sub_1023497  +
pop ecx  +
pop ecx  +
mov dword_1065CF0 eax +
test eax eax +
jnz loc_102A28B  +
push 1Ah  +
pop eax  +
pop esi  +
retn   +
***
xor edx edx +
mov ecx offset off_1063C10 +
jmp loc_102A299  +
mov eax dword_1065CF0 +
mov [edx+eax] ecx +
add ecx 20h +
add edx 4 +
cmp ecx offset byte_1063E90 +
jl loc_102A294  +
push 0FFFFFFFEh  +
pop esi  +
xor edx edx +
mov ecx offset unk_1063C20 +
push edi  +
mov edi edx +
and edi 1Fh +
imul edi edi +
mov eax edx +
sar eax 5 +
mov eax dword_1066D40[eax*4] +
mov eax [edi+eax] +
cmp eax 0FFFFFFFFh +
jz loc_102A2D9  +
cmp eax esi +
jz loc_102A2D9  +
test eax eax +
jnz loc_102A2DB  +
mov [ecx] esi +
add ecx 20h +
inc edx  +
cmp ecx offset unk_1063C80 +
jl loc_102A2B5  +
pop edi  +
xor eax eax +
pop esi  +
retn   +
***
push dword_1065CF0  +
call sub_10213A1  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx offset off_1063C10 +
cmp eax ecx +
jb loc_102A33F  +
cmp eax offset unk_1063E70 +
ja loc_102A33F  +
sub eax ecx +
sar eax 5 +
add eax 10h +
push eax  +
call sub_102520C  +
pop ecx  +
pop ebp  +
retn   +
add eax 20h +
push eax  +
call ds:EnterCriticalSection  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 14h +
jge loc_102A369  +
add eax 10h +
push eax  +
call sub_102520C  +
pop ecx  +
pop ebp  +
retn   +
mov eax [ebp+arg_4] +
add eax 20h +
push eax  +
call ds:EnterCriticalSection  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx offset off_1063C10 +
cmp eax ecx +
jb loc_102A3A6  +
cmp eax offset unk_1063E70 +
ja loc_102A3A6  +
sub eax ecx +
sar eax 5 +
add eax 10h +
push eax  +
call sub_1025128  +
pop ecx  +
pop ebp  +
retn   +
add eax 20h +
push eax  +
call ds:LeaveCriticalSection  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 14h +
jge loc_102A3D0  +
add eax 10h +
push eax  +
call sub_1025128  +
pop ecx  +
pop ebp  +
retn   +
mov eax [ebp+arg_4] +
add eax 20h +
push eax  +
call ds:LeaveCriticalSection  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push esi  +
call sub_102A027  +
push eax  +
call sub_102D3B0  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_102A473  +
cmp esi offset unk_1063C30 +
jnz loc_102A40B  +
xor eax eax +
jmp loc_102A416  +
cmp esi offset unk_1063C50 +
jnz loc_102A473  +
xor eax eax +
inc eax  +
inc dword_1065658  +
test dword ptr [esi+0Ch] 10Ch +
jnz loc_102A473  +
push ebx  +
push edi  +
lea edi unk_106565C[eax*4] +
cmp dword ptr [edi] 0 +
mov ebx 1000h +
jnz loc_102A458  +
push ebx  +
call sub_1021488  +
pop ecx  +
mov [edi] eax +
test eax eax +
jnz loc_102A458  +
lea eax [esi+14h] +
push 2  +
mov [esi+8] eax +
mov [esi] eax +
pop eax  +
mov [esi+18h] eax +
mov [esi+4] eax +
jmp loc_102A465  +
mov edi [edi] +
mov [esi+8] edi +
mov [esi] edi +
mov [esi+18h] ebx +
mov [esi+4] ebx +
or dword ptr [esi+0Ch] 1102h +
xor eax eax +
pop edi  +
inc eax  +
pop ebx  +
jmp loc_102A475  +
xor eax eax +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_102A4AF  +
push esi  +
mov esi [ebp+arg_4] +
test dword ptr [esi+0Ch] 1000h +
jz loc_102A4AE  +
push esi  +
call sub_102A094  +
and dword ptr [esi+0Ch] 0FFFFEEFFh +
and dword ptr [esi+18h] 0 +
and dword ptr [esi] 0 +
and dword ptr [esi+8] 0 +
pop ecx  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_10656E8 +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
xor edi edi +
mov [ebp+var_4] eax +
mov [ebp+var_C] edi +
mov [ebp+var_8] edi +
mov [ebp+var_10] edi +
jmp loc_102A4DB  +
inc esi  +
inc esi  +
cmp word ptr [esi] 20h +
jz loc_102A4D9  +
movzx eax word ptr [esi] +
cmp eax 61h +
jz loc_102A521  +
cmp eax 72h +
jz loc_102A519  +
cmp eax 77h +
jz loc_102A512  +
call sub_102501E  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
mov dword ptr [eax] 16h +
call sub_1024FC5  +
add esp 14h +
xor eax eax +
jmp loc_102A73B  +
mov ebx 301h +
jmp loc_102A526  +
xor ebx ebx +
or [ebp+var_4] 1 +
jmp loc_102A52A  +
mov ebx 109h +
or [ebp+var_4] 2 +
xor ecx ecx +
inc ecx  +
inc esi  +
inc esi  +
movzx eax word ptr [esi] +
cmp ax di +
jz loc_102A6EC  +
mov edx 4000h +
cmp ecx edi +
jz loc_102A668  +
movzx eax ax +
cmp eax 53h +
jg loc_102A5EE  +
jz loc_102A5DD  +
sub eax 20h +
jz loc_102A65A  +
sub eax 0Bh +
jz loc_102A5BE  +
dec eax  +
jz loc_102A5B2  +
sub eax 18h +
jz loc_102A5A1  +
sub eax 0Ah +
jz loc_102A596  +
sub eax 4 +
jnz loc_102A4F3  +
cmp [ebp+var_8] edi +
jnz loc_102A654  +
mov [ebp+var_8] 1 +
or ebx 10h +
jmp loc_102A65A  +
or ebx 80h +
jmp loc_102A65A  +
test bl 40h +
jnz loc_102A654  +
or ebx 40h +
jmp loc_102A65A  +
mov [ebp+var_10] 1 +
jmp loc_102A654  +
test bl 2 +
jnz loc_102A654  +
mov eax [ebp+var_4] +
and ebx 0FFFFFFFEh +
and eax 0FFFFFFFCh +
or ebx 2 +
or eax 80h +
mov [ebp+var_4] eax +
jmp loc_102A65A  +
cmp [ebp+var_8] edi +
jnz loc_102A654  +
mov [ebp+var_8] 1 +
or ebx 20h +
jmp loc_102A65A  +
sub eax 54h +
jz loc_102A64B  +
sub eax 0Eh +
jz loc_102A63B  +
dec eax  +
jz loc_102A62A  +
sub eax 0Bh +
jz loc_102A615  +
sub eax 6 +
jnz loc_102A4F3  +
test ebx 0C000h +
jnz loc_102A654  +
or ebx edx +
jmp loc_102A65A  +
cmp [ebp+var_C] edi +
jnz loc_102A654  +
and [ebp+var_4] 0FFFFBFFFh +
mov [ebp+var_C] 1 +
jmp loc_102A65A  +
cmp [ebp+var_C] edi +
jnz loc_102A654  +
or [ebp+var_4] edx +
mov [ebp+var_C] 1 +
jmp loc_102A65A  +
test ebx 0C000h +
jnz loc_102A654  +
or ebx 8000h +
jmp loc_102A65A  +
mov eax 1000h +
test ebx eax +
jz loc_102A658  +
xor ecx ecx +
jmp loc_102A65A  +
or ebx eax +
inc esi  +
inc esi  +
movzx eax word ptr [esi] +
cmp ax di +
jnz loc_102A540  +
cmp [ebp+var_10] edi +
jz loc_102A6EC  +
jmp loc_102A671  +
inc esi  +
inc esi  +
cmp word ptr [esi] 20h +
jz loc_102A66F  +
push 4  +
push esi  +
push offset aCcs  +
call sub_102FA18  +
add esp 0Ch +
test eax eax +
jnz loc_102A4F3  +
add esi 8 +
push offset aUtf8  +
push esi  +
call sub_10224ED  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_102A6AE  +
add esi 0Ah +
or ebx 40000h +
jmp loc_102A6EC  +
push offset aUtf16le  +
push esi  +
call sub_10224ED  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_102A6CA  +
add esi 10h +
or ebx 20000h +
jmp loc_102A6EC  +
push offset aUnicode  +
push esi  +
call sub_10224ED  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_102A4F3  +
add esi 0Eh +
or ebx 10000h +
jmp loc_102A6EC  +
inc esi  +
inc esi  +
cmp word ptr [esi] 20h +
jz loc_102A6EA  +
cmp [esi] di +
jnz loc_102A4F3  +
push 180h  +
push [ebp+arg_8]  +
lea eax [ebp+arg_4] +
push ebx  +
push [ebp+arg_0]  +
push eax  +
call sub_102F9F3  +
add esp 14h +
test eax eax +
jnz loc_102A50B  +
mov eax [ebp+arg_C] +
inc dword_1065658  +
mov ecx [ebp+var_4] +
mov [eax+0Ch] ecx +
mov ecx [ebp+arg_4] +
mov [eax+4] edi +
mov [eax] edi +
mov [eax+8] edi +
mov [eax+1Ch] edi +
mov [eax+10h] ecx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
call sub_1022E04  +
pop ecx  +
retn   +
***
push edi  +
mov ecx [esp+arg_0] +
test dword ptr [ecx+4] 6 +
mov eax 1 +
jz locret_102A945  +
mov eax [esp+arg_4] +
mov ecx [eax+8] +
xor ecx eax +
call sub_1021557  +
push ebp  +
mov ebp [eax+18h] +
push dword ptr [eax+0Ch]  +
push dword ptr [eax+10h]  +
push dword ptr [eax+14h]  +
call sub_102A870  +
add esp 0Ch +
pop ebp  +
mov eax [esp+arg_4] +
mov edx [esp+arg_C] +
mov [edx] eax +
mov eax 3 +
retn   +
***
push edi  +
mov ebp edx +
push ebx  +
push edx  +
push ecx  +
push [esp+8+arg_4]  +
call sub_102A870  +
add esp 0Ch +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_102A9E6  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_102A9E2  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_102AA4D  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_102AA45  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_102AA4F  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_102AA35  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call sub_1022E04  +
and dword ptr [ebp-4] 0 +
mov esi 1000000h +
push esi  +
call sub_102A9D0  +
pop ecx  +
test eax eax +
jz loc_102AAB6  +
mov eax [ebp+8] +
sub eax esi +
push eax  +
push esi  +
call sub_102AA10  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_102AAB6  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
jmp loc_102AABF  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
xor eax eax +
call sub_1022E49  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
cmp esi edi +
jnz loc_102AAF7  +
call sub_102501E  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
mov dword ptr [eax] 16h +
call sub_1024FC5  +
add esp 14h +
jmp loc_102ABEE  +
mov eax [esi+0Ch] +
test al 83h +
jz loc_102ABEE  +
test al 40h +
jnz loc_102ABEE  +
test al 2 +
jz loc_102AB19  +
or eax 20h +
mov [esi+0Ch] eax +
jmp loc_102ABEE  +
or eax 1 +
mov [esi+0Ch] eax +
test eax 10Ch +
jnz loc_102AB2F  +
push esi  +
call sub_102D35C  +
pop ecx  +
jmp loc_102AB34  +
mov eax [esi+8] +
mov [esi] eax +
push dword ptr [esi+18h]  +
push dword ptr [esi+8]  +
push esi  +
call sub_102A027  +
pop ecx  +
push eax  +
call sub_102B1AB  +
add esp 0Ch +
mov [esi+4] eax +
cmp eax edi +
jz loc_102ABDE  +
cmp eax 0FFFFFFFFh +
jz loc_102ABDE  +
test byte ptr [esi+0Ch] 82h +
jnz loc_102ABB3  +
push esi  +
call sub_102A027  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_102AB9E  +
push esi  +
call sub_102A027  +
pop ecx  +
cmp eax 0FFFFFFFEh +
jz loc_102AB9E  +
push esi  +
call sub_102A027  +
sar eax 5 +
push esi  +
lea edi dword_1066D40[eax*4] +
call sub_102A027  +
and eax 1Fh +
imul eax eax +
add eax [edi] +
pop ecx  +
pop ecx  +
jmp loc_102ABA3  +
mov eax offset unk_10632E8 +
mov al [eax+4] +
and al 82h +
cmp al 82h +
jnz loc_102ABB3  +
or dword ptr [esi+0Ch] 2000h +
cmp dword ptr [esi+18h] 200h +
jnz loc_102ABD1  +
mov eax [esi+0Ch] +
test al 8 +
jz loc_102ABD1  +
test eax 400h +
jnz loc_102ABD1  +
mov dword ptr [esi+18h] 1000h +
mov ecx [esi] +
dec dword ptr [esi+4]  +
movzx eax byte ptr [ecx] +
inc ecx  +
mov [esi] ecx +
jmp loc_102ABF1  +
neg eax  +
sbb eax eax +
and eax 10h +
add eax 10h +
or [esi+0Ch] eax +
mov [esi+4] edi +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
mov edx [ebp+nNumberOfBytesToRead] +
push esi  +
mov esi [ebp+arg_0] +
push 0FFFFFFFEh  +
pop eax  +
mov [ebp+var_14] eax +
mov [ebp+var_20] edx +
cmp esi eax +
jnz loc_102AC34  +
call sub_1025036  +
and dword ptr [eax] 0 +
call sub_102501E  +
mov dword ptr [eax] 9 +
or eax 0FFFFFFFFh +
jmp loc_102B1A3  +
push edi  +
xor edi edi +
cmp esi edi +
jl loc_102AC43  +
cmp esi uNumber +
jb loc_102AC6A  +
call sub_1025036  +
mov [eax] edi +
call sub_102501E  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
mov dword ptr [eax] 9 +
call sub_1024FC5  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_102B1A2  +
mov eax esi +
and esi 1Fh +
imul esi esi +
sar eax 5 +
push ebx  +
lea ebx dword_1066D40[eax*4] +
mov eax [ebx] +
add eax esi +
mov cl [eax+4] +
test cl 1 +
jnz loc_102ACA0  +
call sub_1025036  +
mov [eax] edi +
call sub_102501E  +
mov dword ptr [eax] 9 +
jmp loc_102ADE3  +
mov [ebp+var_10] edi +
cmp edx edi +
jz loc_102B19F  +
test cl 2 +
jnz loc_102B19F  +
mov ecx [ebp+lpWideCharStr] +
cmp ecx edi +
jz loc_102ADD1  +
mov eax [eax+8] +
and eax 3 +
mov [ebp+var_1C] eax +
dec eax  +
jz loc_102ADC9  +
dec eax  +
jnz loc_102ACE4  +
mov eax edx +
not eax  +
test al 1 +
jz loc_102ADD1  +
and edx 0FFFFFFFEh +
mov [ebp+nNumberOfBytesToRead] edx +
mov [ebp+lpMultiByteStr] ecx +
mov ecx [ebx] +
mov eax [ebp+lpMultiByteStr] +
lea edi [esi+ecx] +
test byte ptr [edi+4] 48h +
jz loc_102AD6B  +
mov cl [edi+5] +
cmp cl 0Ah +
jz loc_102AD6B  +
cmp [ebp+nNumberOfBytesToRead] 0 +
jz loc_102AD6B  +
xor edx edx +
mov [eax] cl +
mov ecx [ebx] +
inc edx  +
inc eax  +
dec [ebp+nNumberOfBytesToRead]  +
cmp [ebp+var_1C] 0 +
mov [ebp+var_10] edx +
mov byte ptr [esi+ecx+5] 0Ah +
jz loc_102AD6B  +
mov ecx [ebx] +
mov cl [esi+ecx+6] +
cmp cl 0Ah +
jz loc_102AD6B  +
cmp [ebp+nNumberOfBytesToRead] 0 +
jz loc_102AD6B  +
mov [eax] cl +
mov ecx [ebx] +
inc eax  +
dec [ebp+nNumberOfBytesToRead]  +
mov [ebp+var_10] 2 +
mov byte ptr [esi+ecx+6] 0Ah +
cmp [ebp+var_1C] edx +
jnz loc_102AD6B  +
mov ecx [ebx] +
mov cl [esi+ecx+7] +
cmp cl 0Ah +
jz loc_102AD6B  +
cmp [ebp+nNumberOfBytesToRead] 0 +
jz loc_102AD6B  +
mov [eax] cl +
mov ecx [ebx] +
inc eax  +
dec [ebp+nNumberOfBytesToRead]  +
mov [ebp+var_10] 3 +
mov byte ptr [esi+ecx+7] 0Ah +
push 0  +
lea ecx [ebp+NumberOfBytesRead] +
push ecx  +
push [ebp+nNumberOfBytesToRead]  +
push eax  +
mov eax [ebx] +
push dword ptr [esi+eax]  +
call ds:ReadFile  +
test eax eax +
jz loc_102B169  +
mov ecx [ebp+NumberOfBytesRead] +
test ecx ecx +
jl loc_102B169  +
cmp ecx [ebp+nNumberOfBytesToRead] +
ja loc_102B169  +
mov eax [ebx] +
add [ebp+var_10] ecx +
lea eax [esi+eax+4] +
test byte ptr [eax] 80h +
jz loc_102B00F  +
cmp [ebp+var_1C] 2 +
jz loc_102B032  +
test ecx ecx +
jz loc_102AE35  +
mov ecx [ebp+lpMultiByteStr] +
cmp byte ptr [ecx] 0Ah +
jnz loc_102AE35  +
or byte ptr [eax] 4 +
jmp loc_102AE38  +
mov eax edx +
not eax  +
test al 1 +
jnz loc_102ADF2  +
call sub_1025036  +
mov [eax] edi +
call sub_102501E  +
mov dword ptr [eax] 16h +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
call sub_1024FC5  +
add esp 14h +
jmp loc_102AE2D  +
mov eax edx +
push 4  +
pop ecx  +
shr eax 1 +
mov [ebp+nNumberOfBytesToRead] ecx +
cmp eax ecx +
jb loc_102AE03  +
mov [ebp+nNumberOfBytesToRead] eax +
push [ebp+nNumberOfBytesToRead]  +
call sub_1021488  +
pop ecx  +
mov [ebp+lpMultiByteStr] eax +
cmp eax edi +
jnz loc_102ACE7  +
call sub_102501E  +
mov dword ptr [eax] 0Ch +
call sub_1025036  +
mov dword ptr [eax] 8 +
or eax 0FFFFFFFFh +
jmp loc_102B1A1  +
and byte ptr [eax] 0FBh +
mov edi [ebp+lpMultiByteStr] +
mov eax [ebp+var_10] +
add eax edi +
mov [ebp+nNumberOfBytesToRead] edi +
mov [ebp+var_10] eax +
cmp edi eax +
jnb loc_102AF1E  +
mov ecx [ebp+nNumberOfBytesToRead] +
mov al [ecx] +
cmp al 1Ah +
jz loc_102AF09  +
cmp al 0Dh +
jz loc_102AE6B  +
mov [edi] al +
inc edi  +
inc ecx  +
mov [ebp+nNumberOfBytesToRead] ecx +
jmp loc_102AEFB  +
mov eax [ebp+var_10] +
dec eax  +
cmp ecx eax +
jnb loc_102AE8A  +
lea eax [ecx+1] +
cmp byte ptr [eax] 0Ah +
jnz loc_102AE85  +
inc ecx  +
inc ecx  +
mov [ebp+nNumberOfBytesToRead] ecx +
mov byte ptr [edi] 0Ah +
jmp loc_102AEFA  +
mov [ebp+nNumberOfBytesToRead] eax +
jmp loc_102AEF7  +
inc [ebp+nNumberOfBytesToRead]  +
push 0  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push 1  +
lea eax [ebp-1] +
push eax  +
mov eax [ebx] +
push dword ptr [esi+eax]  +
call ds:ReadFile  +
test eax eax +
jnz loc_102AEB2  +
call ds:GetLastError  +
test eax eax +
jnz loc_102AEF7  +
cmp [ebp+NumberOfBytesRead] 0 +
jz loc_102AEF7  +
mov eax [ebx] +
test byte ptr [esi+eax+4] 48h +
jz loc_102AED5  +
cmp [ebp+var_1] 0Ah +
jz loc_102AE80  +
mov byte ptr [edi] 0Dh +
mov eax [ebx] +
mov cl [ebp+var_1] +
mov [esi+eax+5] cl +
jmp loc_102AEFA  +
cmp edi [ebp+lpMultiByteStr] +
jnz loc_102AEE0  +
cmp [ebp+var_1] 0Ah +
jz loc_102AE80  +
push 1  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push [ebp+arg_0]  +
call sub_102C9F2  +
add esp 10h +
cmp [ebp+var_1] 0Ah +
jz loc_102AEFB  +
mov byte ptr [edi] 0Dh +
inc edi  +
mov eax [ebp+var_10] +
cmp [ebp+nNumberOfBytesToRead] eax +
jb loc_102AE4E  +
jmp loc_102AF1E  +
mov eax [ebx] +
lea eax [esi+eax+4] +
test byte ptr [eax] 40h +
jnz loc_102AF19  +
or byte ptr [eax] 2 +
jmp loc_102AF1E  +
mov al [ecx] +
mov [edi] al +
inc edi  +
mov eax edi +
sub eax [ebp+lpMultiByteStr] +
cmp [ebp+var_1C] 1 +
mov [ebp+var_10] eax +
jnz loc_102B00F  +
test eax eax +
jz loc_102B00F  +
dec edi  +
mov cl [edi] +
test cl cl +
js loc_102AF45  +
inc edi  +
jmp loc_102AFCE  +
xor eax eax +
inc eax  +
movzx ecx cl +
jmp loc_102AF5C  +
cmp eax 4 +
jg loc_102AF65  +
cmp edi [ebp+lpMultiByteStr] +
jb loc_102AF65  +
dec edi  +
movzx ecx byte ptr [edi] +
inc eax  +
cmp byte_1063E90[ecx] 0 +
jz loc_102AF4D  +
mov dl [edi] +
movzx ecx dl +
movsx ecx byte_1063E90[ecx] +
test ecx ecx +
jnz loc_102AF85  +
call sub_102501E  +
mov dword ptr [eax] 2Ah +
jmp loc_102B00B  +
inc ecx  +
cmp ecx eax +
jnz loc_102AF8E  +
add edi eax +
jmp loc_102AFCE  +
mov ecx [ebx] +
add ecx esi +
test byte ptr [ecx+4] 48h +
jz loc_102AFBC  +
inc edi  +
cmp eax 2 +
mov [ecx+5] dl +
jl loc_102AFAA  +
mov dl [edi] +
mov ecx [ebx] +
mov [esi+ecx+6] dl +
inc edi  +
cmp eax 3 +
jnz loc_102AFB8  +
mov dl [edi] +
mov ecx [ebx] +
mov [esi+ecx+7] dl +
inc edi  +
sub edi eax +
jmp loc_102AFCE  +
neg eax  +
cdq   +
push 1  +
push edx  +
push eax  +
push [ebp+arg_0]  +
call sub_102C9F2  +
add esp 10h +
mov eax [ebp+var_20] +
sub edi [ebp+lpMultiByteStr] +
shr eax 1 +
push eax  +
push [ebp+lpWideCharStr]  +
mov [ebp+var_10] edi +
push edi  +
push [ebp+lpMultiByteStr]  +
push 0  +
push 0FDE9h  +
call ds:MultiByteToWideChar  +
test eax eax +
jz loc_102AFFE  +
add eax eax +
cmp eax [ebp+var_20] +
ja loc_102AFFE  +
mov [ebp+var_10] eax +
jmp loc_102B00F  +
call ds:GetLastError  +
push eax  +
call sub_102504E  +
pop ecx  +
or [ebp+var_14] 0FFFFFFFFh +
mov eax [ebp+lpMultiByteStr] +
cmp eax [ebp+lpWideCharStr] +
jz loc_102B01E  +
push eax  +
call sub_10213A1  +
pop ecx  +
mov eax [ebp+var_14] +
cmp eax 0FFFFFFFEh +
jnz loc_102B1A1  +
mov eax [ebp+var_10] +
jmp loc_102B1A1  +
test ecx ecx +
jz loc_102B044  +
mov ecx [ebp+lpMultiByteStr] +
cmp word ptr [ecx] 0Ah +
jnz loc_102B044  +
or byte ptr [eax] 4 +
jmp loc_102B047  +
and byte ptr [eax] 0FBh +
mov edi [ebp+lpMultiByteStr] +
mov eax [ebp+var_10] +
add eax edi +
mov [ebp+var_10] eax +
dec eax  +
mov [ebp+nNumberOfBytesToRead] edi +
cmp edi eax +
jnb loc_102B15E  +
mov eax [ebp+nNumberOfBytesToRead] +
movzx ecx word ptr [eax] +
cmp cx 1Ah +
jz loc_102B146  +
cmp cx 0Dh +
jz loc_102B083  +
mov [edi] cx +
inc edi  +
inc edi  +
inc eax  +
inc eax  +
mov [ebp+nNumberOfBytesToRead] eax +
jmp loc_102B137  +
mov ecx [ebp+var_10] +
add ecx 0FFFFFFFEh +
cmp eax ecx +
jnb loc_102B0AB  +
lea ecx [eax+2] +
cmp word ptr [ecx] 0Ah +
jnz loc_102B0A3  +
add eax 4 +
mov [ebp+nNumberOfBytesToRead] eax +
push 0Ah  +
jmp loc_102B131  +
mov [ebp+nNumberOfBytesToRead] ecx +
jmp loc_102B12F  +
add [ebp+nNumberOfBytesToRead] 2 +
push 0  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push 2  +
lea eax [ebp+Buffer] +
push eax  +
mov eax [ebx] +
push dword ptr [esi+eax]  +
call ds:ReadFile  +
test eax eax +
jnz loc_102B0D4  +
call ds:GetLastError  +
test eax eax +
jnz loc_102B12F  +
cmp [ebp+NumberOfBytesRead] 0 +
jz loc_102B12F  +
mov eax [ebx] +
test byte ptr [esi+eax+4] 48h +
jz loc_102B10B  +
cmp word ptr [ebp+Buffer] 0Ah +
jz loc_102B09C  +
push 0Dh  +
pop eax  +
mov [edi] ax +
mov eax [ebx] +
mov cl byte ptr [ebp+Buffer] +
mov [esi+eax+5] cl +
mov eax [ebx] +
mov cl byte ptr [ebp+Buffer+1] +
mov [esi+eax+6] cl +
mov eax [ebx] +
mov byte ptr [esi+eax+7] 0Ah +
jmp loc_102B135  +
cmp edi [ebp+lpMultiByteStr] +
jnz loc_102B117  +
cmp word ptr [ebp+Buffer] 0Ah +
jz loc_102B09C  +
push 1  +
push 0FFFFFFFFh  +
push 0FFFFFFFEh  +
push [ebp+arg_0]  +
call sub_102C9F2  +
add esp 10h +
cmp word ptr [ebp+Buffer] 0Ah +
jz loc_102B137  +
push 0Dh  +
pop eax  +
mov [edi] ax +
inc edi  +
inc edi  +
mov eax [ebp+var_10] +
dec eax  +
cmp [ebp+nNumberOfBytesToRead] eax +
jb loc_102B05E  +
jmp loc_102B15E  +
mov ecx [ebx] +
lea esi [esi+ecx+4] +
test byte ptr [esi] 40h +
jnz loc_102B156  +
or byte ptr [esi] 2 +
jmp loc_102B15E  +
mov ax [eax] +
mov [edi] ax +
inc edi  +
inc edi  +
sub edi [ebp+lpMultiByteStr] +
mov [ebp+var_10] edi +
jmp loc_102B00F  +
call ds:GetLastError  +
push 5  +
pop esi  +
cmp eax esi +
jnz loc_102B18D  +
call sub_102501E  +
mov dword ptr [eax] 9 +
call sub_1025036  +
mov [eax] esi +
jmp loc_102B00B  +
cmp eax 6Dh +
jnz loc_102B004  +
and [ebp+var_14] 0 +
jmp loc_102B00F  +
xor eax eax +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn   +
***
call sub_1022E04  +
pop ecx  +
retn   +
***
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb loc_102B2B2  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp+0] eax +
retn   +
sub eax 1000h +
test [eax] eax +
jmp loc_102B2A4  +
***
mov edi edi +
push esi  +
push edi  +
xor edi edi +
lea esi off_1063F90[edi] +
push dword ptr [esi]  +
call sub_10246B6  +
add edi 4 +
pop ecx  +
mov [esi] eax +
cmp edi 28h +
jb loc_102B2C6  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov dword_1065664 eax +
mov dword_1065668 eax +
mov dword_106566C eax +
mov dword_1065670 eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx dword_10632E4 +
push esi  +
cmp [eax+4] edx +
jz loc_102B32C  +
mov esi ecx +
imul esi esi +
add esi [ebp+arg_0] +
add eax 0Ch +
cmp eax esi +
jb loc_102B318  +
imul ecx ecx +
add ecx [ebp+arg_0] +
pop esi  +
cmp eax ecx +
jnb loc_102B33C  +
cmp [eax+4] edx +
jz loc_102B33E  +
xor eax eax +
pop ebp  +
retn   +
***
pop ecx  +
retn   +
***
call sub_1022E04  +
cmp dword ptr [ebp-1Ch] 0 +
pop ecx  +
cmp ebx 8 +
jz loc_102B4EE  +
cmp ebx 0Bh +
jz loc_102B4EE  +
cmp ebx 4 +
jnz loc_102B4FF  +
mov eax [ebp-2Ch] +
mov [edi+60h] eax +
cmp ebx 8 +
jnz loc_102B4FF  +
mov eax [ebp-30h] +
mov [edi+64h] eax +
xor eax eax +
***
call sub_1022E49  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov dword_1065678 eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov dword_106567C eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpCriticalSection]  +
call ds:InitializeCriticalSection  +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
call sub_1022E04  +
xor ebx ebx +
mov [ebp-1Ch] ebx +
push dword_106567C  +
call sub_102473C  +
pop ecx  +
mov esi eax +
cmp esi ebx +
jnz loc_102B5D3  +
lea eax [ebp-1Ch] +
push eax  +
call sub_102383D  +
pop ecx  +
cmp eax ebx +
jz loc_102B58C  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call sub_1024F1A  +
add esp 14h +
cmp dword ptr [ebp-1Ch] 1 +
jz loc_102B5C2  +
push offset ModuleName  +
mov esi ds:GetModuleHandleW +
call esi  +
mov edi eax +
cmp edi ebx +
jnz loc_102B5B0  +
push offset aKernel32_dll_0  +
call esi  +
cmp edi ebx +
jz loc_102B5C2  +
push offset aInitializecrit  +
push edi  +
call ds:GetProcAddress  +
mov esi eax +
cmp esi ebx +
jnz loc_102B5C7  +
mov esi offset sub_102B534 +
push esi  +
call sub_10246B6  +
pop ecx  +
mov dword_106567C eax +
mov [ebp-4] ebx +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call esi  +
mov [ebp-20h] eax +
jmp loc_102B612  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
mov [ebp-24h] eax +
xor ecx ecx +
cmp eax 0C0000017h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
cmp dword ptr [ebp-24h] 0C0000017h +
jnz loc_102B60E  +
push 8  +
call ds:SetLastError  +
and dword ptr [ebp-20h] 0 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov eax [ebp-20h] +
call sub_1022E49  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_102B54E  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
push edi  +
call sub_102472E  +
xor ebx ebx +
mov [ebp+var_10] eax +
mov [ebp+var_4] ebx +
mov [ebp+var_8] ebx +
mov [ebp+var_C] ebx +
cmp dword_1065680 ebx +
jnz loc_102B719  +
push ebx  +
push ebx  +
push offset aUser32_dll  +
call ds:LoadLibraryExA  +
mov edi eax +
cmp edi ebx +
jnz loc_102B684  +
xor eax eax +
jmp loc_102B7DD  +
mov esi ds:GetProcAddress +
push offset aMessageboxa  +
push edi  +
call esi  +
cmp eax ebx +
jz loc_102B67D  +
push eax  +
call sub_10246B6  +
mov [esp+30h+var_30] offset aGetactivewindo +
push edi  +
mov dword_1065680 eax +
call esi  +
push eax  +
call sub_10246B6  +
mov [esp+30h+var_30] offset aGetlastactivep +
push edi  +
mov dword_1065684 eax +
call esi  +
push eax  +
call sub_10246B6  +
mov dword_1065688 eax +
lea eax [ebp+var_8] +
push eax  +
call sub_102383D  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_102B6E7  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call sub_1024F1A  +
add esp 14h +
cmp [ebp+var_8] 2 +
jnz loc_102B719  +
push offset aGetuserobjecti  +
push edi  +
call esi  +
push eax  +
call sub_10246B6  +
pop ecx  +
mov dword_1065690 eax +
cmp eax ebx +
jz loc_102B719  +
push offset aGetprocesswind  +
push edi  +
call esi  +
push eax  +
call sub_10246B6  +
pop ecx  +
mov dword_106568C eax +
mov eax dword_106568C +
mov esi [ebp+var_10] +
cmp eax esi +
jz loc_102B792  +
cmp dword_1065690 esi +
jz loc_102B792  +
push eax  +
call sub_102473C  +
pop ecx  +
call eax  +
cmp eax ebx +
jz loc_102B75F  +
lea ecx [ebp+var_14] +
push ecx  +
push 0Ch  +
lea ecx [ebp+var_20] +
push ecx  +
push 1  +
push eax  +
push dword_1065690  +
call sub_102473C  +
pop ecx  +
call eax  +
test eax eax +
jz loc_102B75F  +
test [ebp+var_18] 1 +
jnz loc_102B792  +
lea eax [ebp+var_C] +
push eax  +
call sub_102387E  +
pop ecx  +
test eax eax +
jz loc_102B77A  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call sub_1024F1A  +
add esp 14h +
cmp [ebp+var_C] 4 +
jb loc_102B789  +
or [ebp+arg_8] 200000h +
jmp loc_102B7C3  +
or [ebp+arg_8] 40000h +
jmp loc_102B7C3  +
mov eax dword_1065684 +
cmp eax esi +
jz loc_102B7C3  +
push eax  +
call sub_102473C  +
pop ecx  +
call eax  +
mov [ebp+var_4] eax +
cmp eax ebx +
jz loc_102B7C3  +
mov eax dword_1065688 +
cmp eax esi +
jz loc_102B7C3  +
push [ebp+var_4]  +
push eax  +
call sub_102473C  +
pop ecx  +
call eax  +
mov [ebp+var_4] eax +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push [ebp+var_4]  +
push dword_1065680  +
call sub_102473C  +
pop ecx  +
call eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
cmp eax ebx +
jz loc_102B7FF  +
mov edi [ebp+arg_4] +
cmp edi ebx +
ja loc_102B81A  +
call sub_102501E  +
push 16h  +
pop esi  +
mov [eax] esi +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call sub_1024FC5  +
add esp 14h +
mov eax esi +
jmp loc_102B856  +
mov esi [ebp+arg_8] +
cmp esi ebx +
jnz loc_102B825  +
mov [eax] bl +
jmp loc_102B7FF  +
mov edx eax +
cmp [edx] bl +
jz loc_102B82F  +
inc edx  +
dec edi  +
jnz loc_102B827  +
cmp edi ebx +
jz loc_102B821  +
mov cl [esi] +
mov [edx] cl +
inc edx  +
inc esi  +
cmp cl bl +
jz loc_102B840  +
dec edi  +
jnz loc_102B833  +
cmp edi ebx +
jnz loc_102B854  +
mov [eax] bl +
call sub_102501E  +
push 22h  +
pop ecx  +
mov [eax] ecx +
mov esi ecx +
jmp loc_102B809  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
cmp ecx ebx +
jz loc_102B878  +
mov edi [ebp+arg_4] +
cmp edi ebx +
ja loc_102B893  +
call sub_102501E  +
push 16h  +
pop esi  +
mov [eax] esi +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call sub_1024FC5  +
add esp 14h +
mov eax esi +
jmp loc_102B8C3  +
mov esi [ebp+arg_8] +
cmp esi ebx +
jnz loc_102B89E  +
mov [ecx] bl +
jmp loc_102B878  +
mov edx ecx +
mov al [esi] +
mov [edx] al +
inc edx  +
inc esi  +
cmp al bl +
jz loc_102B8AD  +
dec edi  +
jnz loc_102B8A0  +
cmp edi ebx +
jnz loc_102B8C1  +
mov [ecx] bl +
call sub_102501E  +
push 22h  +
pop ecx  +
mov [eax] ecx +
mov esi ecx +
jmp loc_102B882  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push esi  +
xor esi esi +
cmp ecx esi +
jl loc_102B8FA  +
cmp ecx 2 +
jle loc_102B8ED  +
cmp ecx 3 +
jnz loc_102B8FA  +
mov eax dword_1064C04 +
jmp loc_102B915  +
mov eax dword_1064C04 +
mov dword_1064C04 ecx +
jmp loc_102B915  +
call sub_102501E  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_1024FC5  +
add esp 14h +
or eax 0FFFFFFFFh +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
xor esi esi +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1023374  +
mov edi eax +
add esp 0Ch +
test edi edi +
jnz loc_102B963  +
cmp dword_1065694 eax +
jbe loc_102B963  +
push esi  +
call ds:Sleep  +
lea eax [esi+3E8h] +
cmp eax dword_1065694 +
jbe loc_102B95C  +
or eax 0FFFFFFFFh +
mov esi eax +
cmp eax 0FFFFFFFFh +
jnz loc_102B926  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov eax dword_1063194 +
xor eax ebp +
mov [ebp-4] eax +
test byte_1063FB8 1 +
push esi  +
jz loc_102B995  +
push 0Ah  +
call sub_1023AC9  +
pop ecx  +
call sub_102B345  +
test eax eax +
jz loc_102B9A6  +
push 16h  +
call sub_102B357  +
pop ecx  +
test byte_1063FB8 2 +
jz loc_102BA7D  +
mov [ebp-220h] eax +
mov [ebp-224h] ecx +
mov [ebp-228h] edx +
mov [ebp-22Ch] ebx +
mov [ebp-230h] esi +
mov [ebp-234h] edi +
mov word ptr [ebp-208h] ss +
mov word ptr [ebp-214h] cs +
mov word ptr [ebp-238h] ds +
mov word ptr [ebp-23Ch] es +
mov word ptr [ebp-240h] fs +
mov [ebp-244h] gs +
pushf   +
pop dword ptr [ebp-210h]  +
mov esi [ebp+4] +
lea eax [ebp+4] +
mov [ebp-20Ch] eax +
mov dword ptr [ebp-2D0h] 10001h +
mov [ebp-218h] esi +
mov eax [eax-4] +
push 50h  +
mov [ebp-21Ch] eax +
lea eax [ebp-328h] +
push 0  +
push eax  +
call sub_10219E0  +
lea eax [ebp-328h] +
add esp 0Ch +
mov [ebp-2D8h] eax +
lea eax [ebp-2D0h] +
push 0  +
mov dword ptr [ebp-328h] 40000015h +
mov [ebp-31Ch] esi +
mov [ebp-2D4h] eax +
call ds:SetUnhandledExceptionFilter  +
lea eax [ebp-2D8h] +
push eax  +
call ds:UnhandledExceptionFilter  +
push 3  +
call sub_1023A3F  +
call sub_1023674  +
mov esi [ebp+24h] +
xor ebx ebx +
cmp dword_10656D4 ebx +
jnz loc_102BADB  +
push ebx  +
push ebx  +
xor edi edi +
inc edi  +
push edi  +
push offset SrcStr  +
push 100h  +
push ebx  +
call ds:LCMapStringW  +
test eax eax +
jz loc_102BAC6  +
mov dword_10656D4 edi +
jmp loc_102BADB  +
call ds:GetLastError  +
cmp eax 78h +
jnz loc_102BADB  +
mov dword_10656D4 2 +
cmp [ebp+18h] ebx +
jle loc_102BB02  +
mov ecx [ebp+18h] +
mov eax [ebp+14h] +
dec ecx  +
cmp [eax] bl +
jz loc_102BAF3  +
inc eax  +
cmp ecx ebx +
jnz loc_102BAE6  +
or ecx 0FFFFFFFFh +
mov eax [ebp+18h] +
sub eax ecx +
dec eax  +
cmp eax [ebp+18h] +
jge loc_102BAFF  +
inc eax  +
mov [ebp+18h] eax +
mov eax dword_10656D4 +
cmp eax 2 +
jz loc_102BD7D  +
cmp eax ebx +
jz loc_102BD7D  +
cmp eax 1 +
jnz loc_102BDB8  +
mov [ebp-2Ch] ebx +
mov [ebp-24h] ebx +
mov [ebp-34h] ebx +
mov [ebp-28h] ebx +
cmp esi ebx +
jnz loc_102BB3C  +
mov eax [ebp+8] +
mov eax [eax] +
mov esi [eax+4] +
mov [ebp+24h] esi +
push ebx  +
push ebx  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
xor eax eax +
cmp [ebp+28h] ebx +
setnz al  +
lea eax ds:1[eax*8] +
push eax  +
push esi  +
call ds:MultiByteToWideChar  +
mov edi eax +
mov [ebp-30h] edi +
cmp edi ebx +
jz loc_102BDB8  +
mov dword ptr [ebp-4] 1 +
jle loc_102BBAF  +
push 0FFFFFFE0h  +
pop eax  +
xor edx edx +
div  edi +
cmp eax 2 +
jb loc_102BBAF  +
lea eax [edi+edi+8] +
cmp eax 400h +
ja loc_102BB99  +
call sub_10236D0  +
mov [ebp-18h] esp +
mov eax esp +
push 0CCCCh  +
jmp loc_102BBA5  +
push 0DDDDh  +
push eax  +
call sub_1021488  +
pop ecx  +
push eax  +
call sub_10215CE  +
pop ecx  +
pop ecx  +
jmp loc_102BBB1  +
xor eax eax +
mov [ebp-20h] eax +
push 0FFFFFFFEh  +
pop esi  +
mov [ebp-4] esi +
jmp loc_102BBD8  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
call sub_1023509  +
and dword ptr [ebp-20h] 0 +
push 0FFFFFFFEh  +
pop esi  +
mov [ebp-4] esi +
mov ebx [ebp-2Ch] +
mov edi [ebp-30h] +
cmp dword ptr [ebp-20h] 0 +
jnz loc_102BBFA  +
lea eax [edi+edi] +
push eax  +
call sub_1021488  +
pop ecx  +
mov [ebp-20h] eax +
test eax eax +
jz loc_102BDB8  +
mov dword ptr [ebp-34h] 1 +
push edi  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push 1  +
push dword ptr [ebp+24h]  +
call ds:MultiByteToWideChar  +
test eax eax +
jz loc_102BD3A  +
push 0  +
push 0  +
push edi  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call ds:LCMapStringW  +
mov ebx eax +
mov [ebp-2Ch] ebx +
test ebx ebx +
jz loc_102BD3A  +
mov ecx 400h +
test [ebp+10h] ecx +
jz loc_102BC70  +
cmp dword ptr [ebp+20h] 0 +
jz loc_102BD3A  +
cmp ebx [ebp+20h] +
jg loc_102BD3A  +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push edi  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call ds:LCMapStringW  +
jmp loc_102BD3A  +
mov dword ptr [ebp-4] 2 +
test ebx ebx +
jle loc_102BCB6  +
push 0FFFFFFE0h  +
pop eax  +
xor edx edx +
div  ebx +
cmp eax 2 +
jb loc_102BCB6  +
lea eax [ebx+ebx+8] +
cmp eax ecx +
ja loc_102BCA0  +
call sub_10236D0  +
mov [ebp-18h] esp +
mov eax esp +
push 0CCCCh  +
jmp loc_102BCAC  +
push 0DDDDh  +
push eax  +
call sub_1021488  +
pop ecx  +
push eax  +
call sub_10215CE  +
pop ecx  +
pop ecx  +
jmp loc_102BCB8  +
xor eax eax +
mov [ebp-24h] eax +
mov [ebp-4] esi +
jmp loc_102BCDD  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
call sub_1023509  +
and dword ptr [ebp-24h] 0 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov ebx [ebp-2Ch] +
mov edi [ebp-30h] +
cmp dword ptr [ebp-24h] 0 +
jnz loc_102BCFF  +
lea eax [ebx+ebx] +
push eax  +
call sub_1021488  +
pop ecx  +
mov [ebp-24h] eax +
xor esi esi +
cmp eax esi +
jz loc_102BD3A  +
mov dword ptr [ebp-28h] 1 +
jmp loc_102BD01  +
xor esi esi +
push ebx  +
push dword ptr [ebp-24h]  +
push edi  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call ds:LCMapStringW  +
test eax eax +
jz loc_102BD3A  +
push esi  +
push esi  +
cmp [ebp+20h] esi +
jnz loc_102BD24  +
push esi  +
push esi  +
jmp loc_102BD2A  +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push ebx  +
push dword ptr [ebp-24h]  +
push esi  +
push dword ptr [ebp+24h]  +
call ds:WideCharToMultiByte  +
mov ebx eax +
xor esi esi +
cmp [ebp-28h] esi +
jz loc_102BD4B  +
push dword ptr [ebp-24h]  +
call sub_10213A1  +
jmp loc_102BD58  +
cmp [ebp-24h] esi +
jz loc_102BD59  +
push dword ptr [ebp-24h]  +
call sub_10215E9  +
pop ecx  +
cmp [ebp-34h] esi +
jz loc_102BD68  +
push dword ptr [ebp-20h]  +
call sub_10213A1  +
jmp loc_102BD75  +
cmp [ebp-20h] esi +
jz loc_102BD76  +
push dword ptr [ebp-20h]  +
call sub_10215E9  +
pop ecx  +
mov eax ebx +
jmp loc_102BF35  +
mov [ebp-2Ch] ebx +
xor edi edi +
mov [ebp-38h] ebx +
mov [ebp-34h] ebx +
cmp [ebp+0Ch] ebx +
jnz loc_102BD98  +
mov eax [ebp+8] +
mov eax [eax] +
mov eax [eax+14h] +
mov [ebp+0Ch] eax +
cmp esi ebx +
jnz loc_102BDA7  +
mov eax [ebp+8] +
mov eax [eax] +
mov esi [eax+4] +
mov [ebp+24h] esi +
push dword ptr [ebp+0Ch]  +
call sub_102C7E5  +
pop ecx  +
mov [ebp-30h] eax +
cmp eax 0FFFFFFFFh +
jnz loc_102BDBF  +
xor eax eax +
jmp loc_102BF35  +
cmp [ebp-30h] esi +
jz loc_102BEF7  +
push ebx  +
push ebx  +
lea eax [ebp+18h] +
push eax  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp-30h]  +
push esi  +
call sub_102C833  +
add esp 18h +
mov [ebp-2Ch] eax +
cmp eax ebx +
jz loc_102BDB8  +
push ebx  +
push ebx  +
push dword ptr [ebp+18h]  +
push eax  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call ds:LCMapStringA  +
mov [ebp-28h] eax +
cmp eax ebx +
jnz loc_102BE04  +
xor esi esi +
jmp loc_102BEDC  +
mov [ebp-4] ebx +
cmp eax ebx +
jle loc_102BE41  +
cmp eax 0FFFFFFE0h +
ja loc_102BE41  +
add eax 8 +
cmp eax 400h +
ja loc_102BE2B  +
call sub_10236D0  +
mov [ebp-18h] esp +
mov eax esp +
push 0CCCCh  +
jmp loc_102BE37  +
push 0DDDDh  +
push eax  +
call sub_1021488  +
pop ecx  +
push eax  +
call sub_10215CE  +
pop ecx  +
pop ecx  +
jmp loc_102BE43  +
xor eax eax +
mov edi eax +
mov [ebp-3Ch] edi +
mov dword ptr [ebp-4] 0FFFFFFFEh +
jmp loc_102BE6B  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
call sub_1023509  +
xor edi edi +
mov [ebp-3Ch] edi +
mov dword ptr [ebp-4] 0FFFFFFFEh +
xor ebx ebx +
cmp edi ebx +
jnz loc_102BE96  +
push dword ptr [ebp-28h]  +
call sub_1021488  +
pop ecx  +
mov edi eax +
cmp edi ebx +
jz loc_102BDFD  +
push dword ptr [ebp-28h]  +
push ebx  +
push edi  +
call sub_10219E0  +
add esp 0Ch +
mov dword ptr [ebp-34h] 1 +
push dword ptr [ebp-28h]  +
push edi  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp-2Ch]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call ds:LCMapStringA  +
mov [ebp-28h] eax +
cmp eax ebx +
jz loc_102BDFD  +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
lea eax [ebp-28h] +
push eax  +
push edi  +
push dword ptr [ebp+24h]  +
push dword ptr [ebp-30h]  +
call sub_102C833  +
add esp 18h +
mov esi eax +
mov [ebp-38h] esi +
neg esi  +
sbb esi esi +
and esi [ebp-28h] +
cmp dword ptr [ebp-34h] 0 +
jz loc_102BEEA  +
push edi  +
call sub_10213A1  +
jmp loc_102BEF4  +
test edi edi +
jz loc_102BF11  +
push edi  +
call sub_10215E9  +
pop ecx  +
jmp loc_102BF11  +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call ds:LCMapStringA  +
mov esi eax +
cmp dword ptr [ebp-2Ch] 0 +
jz loc_102BF20  +
push dword ptr [ebp-2Ch]  +
call sub_10213A1  +
pop ecx  +
mov eax [ebp-38h] +
test eax eax +
jz loc_102BF33  +
cmp [ebp+1Ch] eax +
jz loc_102BF33  +
push eax  +
call sub_10213A1  +
pop ecx  +
mov eax esi +
lea esp [ebp-4Ch] +
call sub_10236BC  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push [ebp+arg_0]  +
lea ecx [ebp+var_10] +
call sub_102160E  +
push [ebp+arg_20]  +
lea eax [ebp+var_10] +
push [ebp+arg_1C]  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push eax  +
call sub_102BA8A  +
add esp 24h +
cmp [ebp+var_4] 0 +
jz locret_102BF87  +
mov ecx [ebp+var_8] +
and dword ptr [ecx+70h] 0FFFFFFFDh +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax dword_1063194 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax dword_10656D8 +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
mov edi ecx +
cmp eax ebx +
jnz loc_102BFE9  +
lea eax [ebp+CharType] +
push eax  +
xor esi esi +
inc esi  +
push esi  +
push offset SrcStr  +
push esi  +
call ds:GetStringTypeW  +
test eax eax +
jz loc_102BFCF  +
mov dword_10656D8 esi +
jmp loc_102C003  +
call ds:GetLastError  +
cmp eax 78h +
jnz loc_102BFE4  +
push 2  +
pop eax  +
mov dword_10656D8 eax +
jmp loc_102BFE9  +
mov eax dword_10656D8 +
cmp eax 2 +
jz loc_102C0C1  +
cmp eax ebx +
jz loc_102C0C1  +
cmp eax 1 +
jnz loc_102C0EB  +
mov dword ptr [ebp+CharType] ebx +
cmp [ebp+CodePage] ebx +
jnz loc_102C013  +
mov eax [edi] +
mov eax [eax+4] +
mov [ebp+CodePage] eax +
mov esi ds:MultiByteToWideChar +
xor eax eax +
cmp [ebp+arg_18] ebx +
push ebx  +
push ebx  +
push [ebp+cchSrc]  +
setnz al  +
push [ebp+lpSrcStr]  +
lea eax ds:1[eax*8] +
push eax  +
push [ebp+CodePage]  +
call esi  +
mov edi eax +
cmp edi ebx +
jz loc_102C0EB  +
jle loc_102C07E  +
cmp edi 7FFFFFF0h +
ja loc_102C07E  +
lea eax [edi+edi+8] +
cmp eax 400h +
ja loc_102C068  +
call sub_10236D0  +
mov eax esp +
cmp eax ebx +
jz loc_102C07C  +
mov dword ptr [eax] 0CCCCh +
jmp loc_102C079  +
push eax  +
call sub_1021488  +
pop ecx  +
cmp eax ebx +
jz loc_102C07C  +
mov dword ptr [eax] 0DDDDh +
add eax 8 +
mov ebx eax +
test ebx ebx +
jz loc_102C0EB  +
lea eax [edi+edi] +
push eax  +
push 0  +
push ebx  +
call sub_10219E0  +
add esp 0Ch +
push edi  +
push ebx  +
push [ebp+cchSrc]  +
push [ebp+lpSrcStr]  +
push 1  +
push [ebp+CodePage]  +
call esi  +
test eax eax +
jz loc_102C0B5  +
push [ebp+lpCharType]  +
push eax  +
push ebx  +
push [ebp+dwInfoType]  +
call ds:GetStringTypeW  +
mov dword ptr [ebp+CharType] eax +
push ebx  +
call sub_10215E9  +
mov eax dword ptr [ebp+CharType] +
pop ecx  +
jmp loc_102C136  +
xor esi esi +
cmp [ebp+Locale] ebx +
jnz loc_102C0D0  +
mov eax [edi] +
mov eax [eax+14h] +
mov [ebp+Locale] eax +
cmp [ebp+CodePage] ebx +
jnz loc_102C0DD  +
mov eax [edi] +
mov eax [eax+4] +
mov [ebp+CodePage] eax +
push [ebp+Locale]  +
call sub_102C7E5  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jnz loc_102C0EF  +
xor eax eax +
jmp loc_102C136  +
cmp eax [ebp+CodePage] +
jz loc_102C112  +
push ebx  +
push ebx  +
lea ecx [ebp+cchSrc] +
push ecx  +
push [ebp+lpSrcStr]  +
push eax  +
push [ebp+CodePage]  +
call sub_102C833  +
mov esi eax +
add esp 18h +
cmp esi ebx +
jz loc_102C0EB  +
mov [ebp+lpSrcStr] esi +
push [ebp+lpCharType]  +
push [ebp+cchSrc]  +
push [ebp+lpSrcStr]  +
push [ebp+dwInfoType]  +
push [ebp+Locale]  +
call ds:GetStringTypeA  +
mov edi eax +
cmp esi ebx +
jz loc_102C134  +
push esi  +
call sub_10213A1  +
pop ecx  +
mov eax edi +
lea esp [ebp-14h] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1021557  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push [ebp+arg_0]  +
lea ecx [ebp+var_10] +
call sub_102160E  +
push [ebp+arg_1C]  +
lea ecx [ebp+var_10] +
push [ebp+Locale]  +
push [ebp+CodePage]  +
push [ebp+lpCharType]  +
push [ebp+cchSrc]  +
push [ebp+lpSrcStr]  +
push [ebp+dwInfoType]  +
call sub_102BF8E  +
add esp 1Ch +
cmp [ebp+var_4] 0 +
jz locret_102C18D  +
mov ecx [ebp+var_8] +
and dword ptr [ecx+70h] 0FFFFFFFDh +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_102C508  +
push dword ptr [esi+4]  +
call sub_10213A1  +
push dword ptr [esi+8]  +
call sub_10213A1  +
push dword ptr [esi+0Ch]  +
call sub_10213A1  +
push dword ptr [esi+10h]  +
call sub_10213A1  +
push dword ptr [esi+14h]  +
call sub_10213A1  +
push dword ptr [esi+18h]  +
call sub_10213A1  +
push dword ptr [esi]  +
call sub_10213A1  +
push dword ptr [esi+20h]  +
call sub_10213A1  +
push dword ptr [esi+24h]  +
call sub_10213A1  +
push dword ptr [esi+28h]  +
call sub_10213A1  +
push dword ptr [esi+2Ch]  +
call sub_10213A1  +
push dword ptr [esi+30h]  +
call sub_10213A1  +
push dword ptr [esi+34h]  +
call sub_10213A1  +
push dword ptr [esi+1Ch]  +
call sub_10213A1  +
push dword ptr [esi+38h]  +
call sub_10213A1  +
push dword ptr [esi+3Ch]  +
call sub_10213A1  +
add esp 40h +
push dword ptr [esi+40h]  +
call sub_10213A1  +
push dword ptr [esi+44h]  +
call sub_10213A1  +
push dword ptr [esi+48h]  +
call sub_10213A1  +
push dword ptr [esi+4Ch]  +
call sub_10213A1  +
push dword ptr [esi+50h]  +
call sub_10213A1  +
push dword ptr [esi+54h]  +
call sub_10213A1  +
push dword ptr [esi+58h]  +
call sub_10213A1  +
push dword ptr [esi+5Ch]  +
call sub_10213A1  +
push dword ptr [esi+60h]  +
call sub_10213A1  +
push dword ptr [esi+64h]  +
call sub_10213A1  +
push dword ptr [esi+68h]  +
call sub_10213A1  +
push dword ptr [esi+6Ch]  +
call sub_10213A1  +
push dword ptr [esi+70h]  +
call sub_10213A1  +
push dword ptr [esi+74h]  +
call sub_10213A1  +
push dword ptr [esi+78h]  +
call sub_10213A1  +
push dword ptr [esi+7Ch]  +
call sub_10213A1  +
add esp 40h +
push dword ptr [esi+80h]  +
call sub_10213A1  +
push dword ptr [esi+84h]  +
call sub_10213A1  +
push dword ptr [esi+88h]  +
call sub_10213A1  +
push dword ptr [esi+8Ch]  +
call sub_10213A1  +
push dword ptr [esi+90h]  +
call sub_10213A1  +
push dword ptr [esi+94h]  +
call sub_10213A1  +
push dword ptr [esi+98h]  +
call sub_10213A1  +
push dword ptr [esi+9Ch]  +
call sub_10213A1  +
push dword ptr [esi+0A0h]  +
call sub_10213A1  +
push dword ptr [esi+0A4h]  +
call sub_10213A1  +
push dword ptr [esi+0A8h]  +
call sub_10213A1  +
push dword ptr [esi+0BCh]  +
call sub_10213A1  +
push dword ptr [esi+0C0h]  +
call sub_10213A1  +
push dword ptr [esi+0C4h]  +
call sub_10213A1  +
push dword ptr [esi+0C8h]  +
call sub_10213A1  +
push dword ptr [esi+0CCh]  +
call sub_10213A1  +
add esp 40h +
push dword ptr [esi+0D0h]  +
call sub_10213A1  +
push dword ptr [esi+0B8h]  +
call sub_10213A1  +
push dword ptr [esi+0D8h]  +
call sub_10213A1  +
push dword ptr [esi+0DCh]  +
call sub_10213A1  +
push dword ptr [esi+0E0h]  +
call sub_10213A1  +
push dword ptr [esi+0E4h]  +
call sub_10213A1  +
push dword ptr [esi+0E8h]  +
call sub_10213A1  +
push dword ptr [esi+0ECh]  +
call sub_10213A1  +
push dword ptr [esi+0D4h]  +
call sub_10213A1  +
push dword ptr [esi+0F0h]  +
call sub_10213A1  +
push dword ptr [esi+0F4h]  +
call sub_10213A1  +
push dword ptr [esi+0F8h]  +
call sub_10213A1  +
push dword ptr [esi+0FCh]  +
call sub_10213A1  +
push dword ptr [esi+100h]  +
call sub_10213A1  +
push dword ptr [esi+104h]  +
call sub_10213A1  +
push dword ptr [esi+108h]  +
call sub_10213A1  +
add esp 40h +
push dword ptr [esi+10Ch]  +
call sub_10213A1  +
push dword ptr [esi+110h]  +
call sub_10213A1  +
push dword ptr [esi+114h]  +
call sub_10213A1  +
push dword ptr [esi+118h]  +
call sub_10213A1  +
push dword ptr [esi+11Ch]  +
call sub_10213A1  +
push dword ptr [esi+120h]  +
call sub_10213A1  +
push dword ptr [esi+124h]  +
call sub_10213A1  +
push dword ptr [esi+128h]  +
call sub_10213A1  +
push dword ptr [esi+12Ch]  +
call sub_10213A1  +
push dword ptr [esi+130h]  +
call sub_10213A1  +
push dword ptr [esi+134h]  +
call sub_10213A1  +
push dword ptr [esi+138h]  +
call sub_10213A1  +
push dword ptr [esi+13Ch]  +
call sub_10213A1  +
push dword ptr [esi+140h]  +
call sub_10213A1  +
push dword ptr [esi+144h]  +
call sub_10213A1  +
push dword ptr [esi+148h]  +
call sub_10213A1  +
add esp 40h +
push dword ptr [esi+14Ch]  +
call sub_10213A1  +
push dword ptr [esi+150h]  +
call sub_10213A1  +
push dword ptr [esi+154h]  +
call sub_10213A1  +
push dword ptr [esi+158h]  +
call sub_10213A1  +
push dword ptr [esi+15Ch]  +
call sub_10213A1  +
push dword ptr [esi+160h]  +
call sub_10213A1  +
add esp 18h +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_102C576  +
mov eax [esi] +
cmp eax off_1064138 +
jz loc_102C52E  +
push eax  +
call sub_10213A1  +
pop ecx  +
mov eax [esi+4] +
cmp eax off_106413C +
jz loc_102C540  +
push eax  +
call sub_10213A1  +
pop ecx  +
mov eax [esi+8] +
cmp eax off_1064140 +
jz loc_102C552  +
push eax  +
call sub_10213A1  +
pop ecx  +
mov eax [esi+30h] +
cmp eax off_1064168 +
jz loc_102C564  +
push eax  +
call sub_10213A1  +
pop ecx  +
mov esi [esi+34h] +
cmp esi off_106416C +
jz loc_102C576  +
push esi  +
call sub_10213A1  +
pop ecx  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_102C679  +
mov eax [esi+0Ch] +
cmp eax off_1064144 +
jz loc_102C5A1  +
push eax  +
call sub_10213A1  +
pop ecx  +
mov eax [esi+10h] +
cmp eax off_1064148 +
jz loc_102C5B3  +
push eax  +
call sub_10213A1  +
pop ecx  +
mov eax [esi+14h] +
cmp eax off_106414C +
jz loc_102C5C5  +
push eax  +
call sub_10213A1  +
pop ecx  +
mov eax [esi+18h] +
cmp eax off_1064150 +
jz loc_102C5D7  +
push eax  +
call sub_10213A1  +
pop ecx  +
mov eax [esi+1Ch] +
cmp eax off_1064154 +
jz loc_102C5E9  +
push eax  +
call sub_10213A1  +
pop ecx  +
mov eax [esi+20h] +
cmp eax off_1064158 +
jz loc_102C5FB  +
push eax  +
call sub_10213A1  +
pop ecx  +
mov eax [esi+24h] +
cmp eax off_106415C +
jz loc_102C60D  +
push eax  +
call sub_10213A1  +
pop ecx  +
mov eax [esi+38h] +
cmp eax off_1064170 +
jz loc_102C61F  +
push eax  +
call sub_10213A1  +
pop ecx  +
mov eax [esi+3Ch] +
cmp eax off_1064174 +
jz loc_102C631  +
push eax  +
call sub_10213A1  +
pop ecx  +
mov eax [esi+40h] +
cmp eax off_1064178 +
jz loc_102C643  +
push eax  +
call sub_10213A1  +
pop ecx  +
mov eax [esi+44h] +
cmp eax off_106417C +
jz loc_102C655  +
push eax  +
call sub_10213A1  +
pop ecx  +
mov eax [esi+48h] +
cmp eax off_1064180 +
jz loc_102C667  +
push eax  +
call sub_10213A1  +
pop ecx  +
mov esi [esi+4Ch] +
cmp esi off_1064184 +
jz loc_102C679  +
push esi  +
call sub_10213A1  +
pop ecx  +
pop esi  +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
push esi  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
mov edx [ebp+0Ch] +
lea ecx [ecx+0] +
mov al [edx] +
or al al +
jz loc_102C6B3  +
add edx 1 +
bts [esp] eax +
jmp loc_102C6A4  +
***
mov esi [ebp+8] +
or ecx 0FFFFFFFFh +
lea ecx [ecx+0] +
add ecx 1 +
mov al [esi] +
or al al +
jz loc_102C6CE  +
add esi 1 +
bt [esp] eax +
jnb loc_102C6BC  +
mov eax ecx +
add esp 20h +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
push edi  +
cmp [ebp+arg_C] ebx +
jnz loc_102C6FD  +
cmp esi ebx +
jnz loc_102C701  +
cmp [ebp+arg_4] ebx +
jnz loc_102C708  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
cmp esi ebx +
jz loc_102C708  +
mov edi [ebp+arg_4] +
cmp edi ebx +
ja loc_102C723  +
call sub_102501E  +
push 16h  +
pop esi  +
mov [eax] esi +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call sub_1024FC5  +
add esp 14h +
mov eax esi +
jmp loc_102C6F8  +
cmp [ebp+arg_C] ebx +
jnz loc_102C72C  +
mov [esi] bl +
jmp loc_102C6F6  +
mov edx [ebp+arg_8] +
cmp edx ebx +
jnz loc_102C737  +
mov [esi] bl +
jmp loc_102C708  +
cmp [ebp+arg_C] 0FFFFFFFFh +
mov eax esi +
jnz loc_102C74E  +
mov cl [edx] +
mov [eax] cl +
inc eax  +
inc edx  +
cmp cl bl +
jz loc_102C767  +
dec edi  +
jnz loc_102C73F  +
jmp loc_102C767  +
mov cl [edx] +
mov [eax] cl +
inc eax  +
inc edx  +
cmp cl bl +
jz loc_102C760  +
dec edi  +
jz loc_102C760  +
dec [ebp+arg_C]  +
jnz loc_102C74E  +
cmp [ebp+arg_C] ebx +
jnz loc_102C767  +
mov [eax] bl +
cmp edi ebx +
jnz loc_102C6F6  +
cmp [ebp+arg_C] 0FFFFFFFFh +
jnz loc_102C780  +
mov eax [ebp+arg_4] +
push 50h  +
mov [esi+eax-1] bl +
pop eax  +
jmp loc_102C6F8  +
mov [esi] bl +
call sub_102501E  +
push 22h  +
pop ecx  +
mov [eax] ecx +
mov esi ecx +
jmp loc_102C712  +
***
push ebp  +
mov ebp esp +
push esi  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
mov edx [ebp+0Ch] +
lea ecx [ecx+0] +
mov al [edx] +
or al al +
jz loc_102C7C3  +
add edx 1 +
bts [esp] eax +
jmp loc_102C7B4  +
***
mov esi [ebp+8] +
mov edi edi +
mov al [esi] +
or al al +
jz loc_102C7DA  +
add esi 1 +
bt [esp] eax +
jnb loc_102C7C8  +
lea eax [esi-1] +
add esp 20h +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov eax dword_1063194 +
xor eax ebp +
mov [ebp+var_4] eax +
push 6  +
lea eax [ebp+LCData] +
push eax  +
push 1004h  +
push [ebp+Locale]  +
mov [ebp+var_6] 0 +
call ds:GetLocaleInfoA  +
test eax eax +
jnz loc_102C818  +
or eax 0FFFFFFFFh +
jmp loc_102C822  +
lea eax [ebp+LCData] +
push eax  +
call sub_102FA62  +
pop ecx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1021557  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
mov eax dword_1063194 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_10] +
mov [ebp+lpMultiByteStr] eax +
mov eax [ebp+arg_C] +
mov [ebp+var_30] eax +
mov eax [eax] +
push ebx  +
xor ebx ebx +
mov [ebp+cchMultiByte] eax +
mov eax [ebp+CodePage] +
push esi  +
push edi  +
mov [ebp+var_34] ecx +
mov [ebp+var_20] ebx +
mov [ebp+var_2C] ebx +
cmp eax [ebp+arg_4] +
jz loc_102C9D8  +
mov esi ds:GetCPInfo +
lea ecx [ebp+CPInfo] +
push ecx  +
push eax  +
call esi  +
mov edi ds:MultiByteToWideChar +
test eax eax +
jz loc_102C8EE  +
cmp [ebp+CPInfo.MaxCharSize] 1 +
jnz loc_102C8EE  +
lea eax [ebp+CPInfo] +
push eax  +
push [ebp+arg_4]  +
call esi  +
test eax eax +
jz loc_102C8EE  +
cmp [ebp+CPInfo.MaxCharSize] 1 +
jnz loc_102C8EE  +
mov esi [ebp+cchMultiByte] +
mov [ebp+var_2C] 1 +
cmp esi 0FFFFFFFFh +
jnz loc_102C8C4  +
mov eax [ebp+lpMultiByteStr] +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
cmp cl bl +
jnz loc_102C8B8  +
sub eax edx +
lea esi [eax+1] +
cmp esi ebx +
jle loc_102C923  +
cmp esi 7FFFFFF0h +
ja loc_102C923  +
lea eax [esi+esi+8] +
cmp eax 400h +
ja loc_102C90A  +
call sub_10236D0  +
mov eax esp +
cmp eax ebx +
jz loc_102C91E  +
mov dword ptr [eax] 0CCCCh +
jmp loc_102C91B  +
push ebx  +
push ebx  +
push [ebp+cchMultiByte]  +
push [ebp+lpMultiByteStr]  +
push 1  +
push [ebp+CodePage]  +
call edi  +
mov esi eax +
cmp esi ebx +
jnz loc_102C8C6  +
xor eax eax +
jmp loc_102C9DB  +
push eax  +
call sub_1021488  +
pop ecx  +
cmp eax ebx +
jz loc_102C91E  +
mov dword ptr [eax] 0DDDDh +
add eax 8 +
mov [ebp+lpWideCharStr] eax +
jmp loc_102C926  +
mov [ebp+lpWideCharStr] ebx +
cmp [ebp+lpWideCharStr] ebx +
jz loc_102C903  +
lea eax [esi+esi] +
push eax  +
push ebx  +
push [ebp+lpWideCharStr]  +
call sub_10219E0  +
add esp 0Ch +
push esi  +
push [ebp+lpWideCharStr]  +
push [ebp+cchMultiByte]  +
push [ebp+lpMultiByteStr]  +
push 1  +
push [ebp+CodePage]  +
call edi  +
test eax eax +
jz loc_102C9CF  +
mov edi [ebp+var_34] +
cmp edi ebx +
jz loc_102C974  +
push ebx  +
push ebx  +
push [ebp+arg_14]  +
push edi  +
push esi  +
push [ebp+lpWideCharStr]  +
push ebx  +
push [ebp+arg_4]  +
call ds:WideCharToMultiByte  +
test eax eax +
jz loc_102C9CF  +
mov [ebp+var_20] edi +
jmp loc_102C9CF  +
mov edi ds:WideCharToMultiByte +
cmp [ebp+var_2C] ebx +
jnz loc_102C993  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push esi  +
push [ebp+lpWideCharStr]  +
push ebx  +
push [ebp+arg_4]  +
call edi  +
mov esi eax +
cmp esi ebx +
jz loc_102C9CF  +
push esi  +
push 1  +
call sub_1023497  +
pop ecx  +
pop ecx  +
mov [ebp+var_20] eax +
cmp eax ebx +
jz loc_102C9CF  +
push ebx  +
push ebx  +
push esi  +
push eax  +
push esi  +
push [ebp+lpWideCharStr]  +
push ebx  +
push [ebp+arg_4]  +
call edi  +
cmp eax ebx +
jnz loc_102C9C4  +
push [ebp+var_20]  +
call sub_10213A1  +
pop ecx  +
mov [ebp+var_20] ebx +
jmp loc_102C9CF  +
cmp [ebp+cchMultiByte] 0FFFFFFFFh +
jz loc_102C9CF  +
mov ecx [ebp+var_30] +
mov [ecx] eax +
push [ebp+lpWideCharStr]  +
call sub_10215E9  +
pop ecx  +
mov eax [ebp+var_20] +
lea esp [ebp-40h] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1021557  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
mov [ebp+lDistanceToMove] eax +
mov eax [ebp+arg_8] +
push edi  +
push esi  +
mov [ebp+DistanceToMoveHigh] eax +
call sub_102EE4A  +
or edi 0FFFFFFFFh +
pop ecx  +
cmp eax edi +
jnz loc_102CA29  +
call sub_102501E  +
mov dword ptr [eax] 9 +
mov eax edi +
mov edx edi +
jmp loc_102CA73  +
push [ebp+dwMoveMethod]  +
lea ecx [ebp+DistanceToMoveHigh] +
push ecx  +
push [ebp+lDistanceToMove]  +
push eax  +
call ds:SetFilePointer  +
mov [ebp+lDistanceToMove] eax +
cmp eax edi +
jnz loc_102CA54  +
call ds:GetLastError  +
test eax eax +
jz loc_102CA54  +
push eax  +
call sub_102504E  +
pop ecx  +
jmp loc_102CA23  +
mov eax esi +
and esi 1Fh +
imul esi esi +
sar eax 5 +
mov eax dword_1066D40[eax*4] +
lea eax [eax+esi+4] +
and byte ptr [eax] 0FDh +
mov eax [ebp+lDistanceToMove] +
mov edx [ebp+DistanceToMoveHigh] +
pop edi  +
pop esi  +
leave   +
retn   +
***
call sub_1022E04  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 594h +
mov eax dword_1063194 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push esi  +
xor esi esi +
mov [ebp+lpBuffer] eax +
mov [ebp+var_570] esi +
mov [ebp+var_578] esi +
cmp [ebp+nNumberOfBytesToWrite] esi +
jnz loc_102CBD3  +
xor eax eax +
jmp loc_102D269  +
cmp eax esi +
jnz loc_102CBFE  +
call sub_1025036  +
mov [eax] esi +
call sub_102501E  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_1024FC5  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_102D269  +
mov esi [ebp+arg_0] +
push ebx  +
mov ebx esi +
and ebx 1Fh +
imul ebx ebx +
mov eax esi +
sar eax 5 +
push edi  +
lea edi dword_1066D40[eax*4] +
mov eax [edi] +
add eax ebx +
mov ecx [eax+8] +
and ecx 3 +
mov [ebp+var_580] edi +
mov [ebp+CodePage] ebx +
mov [ebp+var_588] ecx +
cmp ecx 2 +
jz loc_102CC3D  +
cmp ecx 1 +
jnz loc_102CC6D  +
mov ecx [ebp+nNumberOfBytesToWrite] +
not ecx  +
test cl 1 +
jnz loc_102CC6D  +
call sub_1025036  +
xor esi esi +
mov [eax] esi +
call sub_102501E  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_1024FC5  +
add esp 14h +
jmp loc_102D25C  +
test byte ptr [eax+4] 20h +
jz loc_102CC82  +
push 2  +
push 0  +
push 0  +
push esi  +
call sub_102C9F2  +
add esp 10h +
push esi  +
call sub_102D3B0  +
pop ecx  +
test eax eax +
jz loc_102CEEE  +
mov eax [edi] +
test byte ptr [ebx+eax+4] 80h +
jz loc_102CEEE  +
call sub_1024981  +
mov eax [eax+6Ch] +
xor ecx ecx +
cmp [eax+14h] ecx +
lea eax [ebp+Mode] +
setz cl  +
push eax  +
mov eax [edi] +
push dword ptr [ebx+eax]  +
mov esi ecx +
call ds:GetConsoleMode  +
test eax eax +
jz loc_102CEEE  +
test esi esi +
jz loc_102CCDB  +
cmp [ebp+var_588] 0 +
jz loc_102CEEE  +
call ds:GetConsoleCP  +
and [ebp+NumberOfBytesWritten] 0 +
cmp [ebp+nNumberOfBytesToWrite] 0 +
mov esi [ebp+lpBuffer] +
mov [ebp+CodePage] eax +
mov [ebp+var_590] esi +
jbe loc_102D1F5  +
and [ebp+var_568] 0 +
jmp loc_102CD13  +
mov esi [ebp+var_590] +
mov eax [ebp+var_588] +
test eax eax +
jnz loc_102CE4E  +
mov al [esi] +
xor ecx ecx +
cmp al 0Ah +
setz cl  +
movsx eax al +
push eax  +
mov [ebp+Mode] ecx +
call sub_102D792  +
pop ecx  +
test eax eax +
jnz loc_102CD5B  +
push 1  +
lea eax [ebp+WideCharStr] +
push esi  +
push eax  +
call sub_102D736  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jz loc_102D1EB  +
jmp loc_102CD91  +
mov eax [ebp+lpBuffer] +
sub eax esi +
add eax [ebp+nNumberOfBytesToWrite] +
cmp eax 1 +
jbe loc_102D1EB  +
push 2  +
lea eax [ebp+WideCharStr] +
push esi  +
push eax  +
call sub_102D736  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jz loc_102D1EB  +
inc esi  +
inc [ebp+var_568]  +
xor eax eax +
push eax  +
push eax  +
push 5  +
lea ecx [ebp+Buffer] +
push ecx  +
push 1  +
lea ecx [ebp+WideCharStr] +
push ecx  +
push eax  +
push [ebp+CodePage]  +
inc esi  +
inc [ebp+var_568]  +
mov [ebp+var_590] esi +
call ds:WideCharToMultiByte  +
mov esi eax +
test esi esi +
jz loc_102D1EB  +
push 0  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push esi  +
lea eax [ebp+Buffer] +
push eax  +
mov eax [edi] +
push dword ptr [ebx+eax]  +
call ds:WriteFile  +
test eax eax +
jz loc_102D1DF  +
mov eax [ebp+NumberOfBytesWritten] +
add [ebp+var_570] eax +
cmp eax esi +
jl loc_102D1EB  +
cmp [ebp+Mode] 0 +
jz loc_102CEDA  +
push 0  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push 1  +
lea eax [ebp+Buffer] +
push eax  +
mov eax [edi] +
mov [ebp+Buffer] 0Dh +
push dword ptr [ebx+eax]  +
call ds:WriteFile  +
test eax eax +
jz loc_102D1DF  +
cmp [ebp+NumberOfBytesWritten] 1 +
jl loc_102D1EB  +
inc [ebp+var_578]  +
inc [ebp+var_570]  +
jmp loc_102CEDA  +
cmp eax 1 +
jz loc_102CE58  +
cmp eax 2 +
jnz loc_102CE7F  +
movzx ecx word ptr [esi] +
xor edx edx +
cmp cx 0Ah +
setz dl  +
inc esi  +
inc esi  +
add [ebp+var_568] 2 +
mov dword ptr [ebp+WideCharStr] ecx +
mov [ebp+var_590] esi +
mov [ebp+Mode] edx +
cmp eax 1 +
jz loc_102CE89  +
cmp eax 2 +
jnz loc_102CEDA  +
push dword ptr [ebp+WideCharStr]  +
call sub_102FAE3  +
pop ecx  +
cmp ax [ebp+WideCharStr] +
jnz loc_102D1DF  +
inc [ebp+var_570]  +
cmp [ebp+Mode] 0 +
jz loc_102CEDA  +
push 0Dh  +
pop eax  +
push eax  +
mov dword ptr [ebp+WideCharStr] eax +
call sub_102FAE3  +
pop ecx  +
cmp ax [ebp+WideCharStr] +
jnz loc_102D1DF  +
inc [ebp+var_570]  +
inc [ebp+var_578]  +
mov eax [ebp+nNumberOfBytesToWrite] +
cmp [ebp+var_568] eax +
jb loc_102CD0D  +
jmp loc_102D1EB  +
mov eax [edi] +
add eax ebx +
test byte ptr [eax+4] 80h +
jz loc_102D1AC  +
xor eax eax +
mov dword ptr [ebp+WideCharStr] eax +
cmp [ebp+var_588] eax +
jnz loc_102CFCB  +
mov ecx [ebp+lpBuffer] +
mov [ebp+var_568] ecx +
cmp [ebp+nNumberOfBytesToWrite] eax +
jbe loc_102D22B  +
mov ecx [ebp+var_568] +
xor esi esi +
sub ecx [ebp+lpBuffer] +
lea eax [ebp+var_564] +
cmp ecx [ebp+nNumberOfBytesToWrite] +
jnb loc_102CF6F  +
mov edx [ebp+var_568] +
inc [ebp+var_568]  +
mov dl [edx] +
inc ecx  +
cmp dl 0Ah +
jnz loc_102CF5D  +
inc [ebp+var_578]  +
mov byte ptr [eax] 0Dh +
inc eax  +
inc esi  +
mov edi [ebp+var_580] +
mov [eax] dl +
inc eax  +
inc esi  +
cmp esi 400h +
jb loc_102CF39  +
mov esi eax +
lea eax [ebp+var_564] +
sub esi eax +
push 0  +
lea eax [ebp+var_57C] +
push eax  +
push esi  +
lea eax [ebp+var_564] +
push eax  +
mov eax [edi] +
push dword ptr [ebx+eax]  +
call ds:WriteFile  +
test eax eax +
jz loc_102D1DF  +
mov eax [ebp+var_57C] +
add [ebp+var_570] eax +
cmp eax esi +
jl loc_102D1EB  +
mov eax [ebp+var_568] +
sub eax [ebp+lpBuffer] +
cmp eax [ebp+nNumberOfBytesToWrite] +
jb loc_102CF25  +
jmp loc_102D1EB  +
cmp [ebp+var_588] 2 +
jnz loc_102D0A1  +
mov edi [ebp+lpBuffer] +
cmp [ebp+nNumberOfBytesToWrite] eax +
jbe loc_102D22B  +
mov ecx edi +
xor esi esi +
sub ecx [ebp+lpBuffer] +
lea eax [ebp+var_564] +
cmp ecx [ebp+nNumberOfBytesToWrite] +
jnb loc_102D03B  +
movzx edx word ptr [edi] +
inc edi  +
inc edi  +
inc ecx  +
inc ecx  +
cmp dx 0Ah +
jnz loc_102D028  +
cmp esi 3FDh +
ja loc_102D039  +
add [ebp+var_578] 2 +
push 0Dh  +
pop ebx  +
mov [eax] bx +
mov ebx [ebp+CodePage] +
inc eax  +
inc eax  +
inc esi  +
inc esi  +
mov [eax] dx +
inc eax  +
inc eax  +
inc esi  +
inc esi  +
cmp esi 3FFh +
jb loc_102CFF7  +
jmp loc_102D03B  +
dec edi  +
dec edi  +
mov esi eax +
lea eax [ebp+var_564] +
sub esi eax +
push 0  +
lea eax [ebp+var_57C] +
push eax  +
push esi  +
lea eax [ebp+var_564] +
push eax  +
mov eax [ebp+var_580] +
mov eax [eax] +
push dword ptr [ebx+eax]  +
call ds:WriteFile  +
test eax eax +
jz loc_102D1DF  +
mov eax [ebp+var_57C] +
add [ebp+var_570] eax +
cmp eax esi +
jl loc_102D1EB  +
test eax eax +
jz loc_102D1EB  +
mov eax edi +
sub eax [ebp+lpBuffer] +
cmp eax [ebp+nNumberOfBytesToWrite] +
jb loc_102CFE7  +
jmp loc_102D1EB  +
mov ecx [ebp+lpBuffer] +
mov [ebp+var_568] ecx +
cmp [ebp+nNumberOfBytesToWrite] eax +
jbe loc_102D22B  +
mov ecx [ebp+var_568] +
xor esi esi +
sub ecx [ebp+lpBuffer] +
lea eax [ebp+var_160] +
cmp ecx [ebp+nNumberOfBytesToWrite] +
jnb loc_102D111  +
mov edx [ebp+var_568] +
add [ebp+var_568] 2 +
movzx edx word ptr [edx] +
inc ecx  +
inc ecx  +
cmp dx 0Ah +
jnz loc_102D0F9  +
cmp esi 150h +
ja loc_102D10A  +
push 0Dh  +
pop edi  +
mov [eax] di +
inc eax  +
inc eax  +
inc esi  +
inc esi  +
mov [eax] dx +
inc eax  +
inc eax  +
inc esi  +
inc esi  +
cmp esi 152h +
jb loc_102D0CA  +
jmp loc_102D111  +
sub [ebp+var_568] 2 +
xor esi esi +
push esi  +
push esi  +
push 2ABh  +
lea ecx [ebp+MultiByteStr] +
push ecx  +
lea ecx [ebp+var_160] +
sub eax ecx +
cdq   +
sub eax edx +
sar eax 1 +
push eax  +
mov eax ecx +
push eax  +
push esi  +
push 0FDE9h  +
call ds:WideCharToMultiByte  +
mov edi eax +
cmp edi esi +
jz loc_102D1DF  +
push 0  +
lea eax [ebp+var_57C] +
push eax  +
mov eax edi +
sub eax esi +
push eax  +
lea eax [ebp+esi+MultiByteStr] +
push eax  +
mov eax [ebp+var_580] +
mov eax [eax] +
push dword ptr [ebx+eax]  +
call ds:WriteFile  +
test eax eax +
jz loc_102D17F  +
add esi [ebp+var_57C] +
cmp edi esi +
jg loc_102D148  +
jmp loc_102D18B  +
call ds:GetLastError  +
mov dword ptr [ebp+WideCharStr] eax +
cmp edi esi +
jg loc_102D1EB  +
mov eax [ebp+var_568] +
sub eax [ebp+lpBuffer] +
mov [ebp+var_570] eax +
cmp eax [ebp+nNumberOfBytesToWrite] +
jb loc_102D0B6  +
jmp loc_102D1EB  +
push 0  +
lea ecx [ebp+var_57C] +
push ecx  +
push [ebp+nNumberOfBytesToWrite]  +
push [ebp+lpBuffer]  +
push dword ptr [eax]  +
call ds:WriteFile  +
test eax eax +
jz loc_102D1DF  +
mov eax [ebp+var_57C] +
and dword ptr [ebp+WideCharStr] 0 +
mov [ebp+var_570] eax +
jmp loc_102D1EB  +
call ds:GetLastError  +
mov dword ptr [ebp+WideCharStr] eax +
mov eax [ebp+var_570] +
test eax eax +
jnz loc_102D261  +
cmp dword ptr [ebp+WideCharStr] 0 +
jz loc_102D22B  +
push 5  +
pop esi  +
cmp dword ptr [ebp+WideCharStr] esi +
jnz loc_102D21D  +
call sub_102501E  +
mov dword ptr [eax] 9 +
call sub_1025036  +
mov [eax] esi +
jmp loc_102D25C  +
push dword ptr [ebp+WideCharStr]  +
call sub_102504E  +
pop ecx  +
jmp loc_102D25C  +
mov eax [ebp+var_580] +
mov eax [eax] +
test byte ptr [ebx+eax+4] 40h +
jz loc_102D249  +
mov eax [ebp+lpBuffer] +
cmp byte ptr [eax] 1Ah +
jnz loc_102D249  +
xor eax eax +
jmp loc_102D267  +
call sub_102501E  +
mov dword ptr [eax] 1Ch +
call sub_1025036  +
and dword ptr [eax] 0 +
or eax 0FFFFFFFFh +
jmp loc_102D267  +
sub eax [ebp+var_578] +
pop edi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1021557  +
leave   +
retn   +
***
call sub_1022E04  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
inc dword_1065658  +
push 1000h  +
push 1  +
call sub_1023497  +
pop ecx  +
pop ecx  +
mov ecx [ebp+arg_0] +
mov [ecx+8] eax +
test eax eax +
jz loc_102D38C  +
or dword ptr [ecx+0Ch] 8 +
mov dword ptr [ecx+18h] 1000h +
jmp loc_102D3A0  +
or dword ptr [ecx+0Ch] 4 +
lea eax [ecx+14h] +
and dword ptr [eax] 0 +
mov [ecx+8] eax +
mov dword ptr [ecx+18h] 2 +
mov eax [ecx+8] +
and dword ptr [ecx+4] 0 +
mov [ecx] eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 0FFFFFFFEh +
jnz loc_102D3CC  +
call sub_102501E  +
mov dword ptr [eax] 9 +
xor eax eax +
pop ebp  +
retn   +
push esi  +
xor esi esi +
cmp eax esi +
jl loc_102D3DB  +
cmp eax uNumber +
jb loc_102D3F7  +
call sub_102501E  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 9 +
call sub_1024FC5  +
add esp 14h +
xor eax eax +
jmp loc_102D411  +
mov ecx eax +
and eax 1Fh +
imul eax eax +
sar ecx 5 +
mov ecx dword_1066D40[ecx*4] +
movsx eax byte ptr [ecx+eax+4] +
and eax 40h +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1063194 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
test byte ptr [esi+0Ch] 40h +
push edi  +
jnz loc_102D5CB  +
push esi  +
call sub_102A027  +
pop ecx  +
mov edi offset unk_10632E8 +
cmp eax 0FFFFFFFFh +
jz loc_102D47A  +
push esi  +
call sub_102A027  +
pop ecx  +
cmp eax 0FFFFFFFEh +
jz loc_102D47A  +
push esi  +
call sub_102A027  +
sar eax 5 +
push esi  +
lea ebx dword_1066D40[eax*4] +
call sub_102A027  +
and eax 1Fh +
imul eax eax +
add eax [ebx] +
pop ecx  +
pop ecx  +
jmp loc_102D47C  +
mov eax edi +
mov eax [eax+8] +
and al 3 +
cmp al 2 +
jz loc_102D5CB  +
push esi  +
call sub_102A027  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_102D4C3  +
push esi  +
call sub_102A027  +
pop ecx  +
cmp eax 0FFFFFFFEh +
jz loc_102D4C3  +
push esi  +
call sub_102A027  +
sar eax 5 +
push esi  +
lea ebx dword_1066D40[eax*4] +
call sub_102A027  +
and eax 1Fh +
imul eax eax +
add eax [ebx] +
pop ecx  +
pop ecx  +
jmp loc_102D4C5  +
mov eax edi +
mov eax [eax+8] +
and al 3 +
cmp al 1 +
jnz loc_102D52B  +
dec dword ptr [esi+4]  +
mov ebx dword ptr [ebp+WideCharStr] +
js loc_102D4E4  +
mov eax [esi] +
mov [eax] bl +
mov ecx [esi] +
movzx eax byte ptr [ecx] +
inc ecx  +
mov [esi] ecx +
jmp loc_102D4F0  +
movsx eax bl +
push esi  +
push eax  +
call sub_1026F08  +
pop ecx  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jnz loc_102D4FF  +
mov eax 0FFFFh +
jmp loc_102D5EB  +
dec dword ptr [esi+4]  +
js loc_102D512  +
mov eax [esi] +
mov [eax] bh +
mov ecx [esi] +
movzx eax byte ptr [ecx] +
inc ecx  +
mov [esi] ecx +
jmp loc_102D51E  +
movsx eax bh +
push esi  +
push eax  +
call sub_1026F08  +
pop ecx  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_102D4F5  +
mov ax bx +
jmp loc_102D5EB  +
push esi  +
call sub_102A027  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_102D565  +
push esi  +
call sub_102A027  +
pop ecx  +
cmp eax 0FFFFFFFEh +
jz loc_102D565  +
push esi  +
call sub_102A027  +
sar eax 5 +
push esi  +
lea ebx dword_1066D40[eax*4] +
call sub_102A027  +
and eax 1Fh +
imul eax eax +
add eax [ebx] +
pop ecx  +
pop ecx  +
jmp loc_102D567  +
mov eax edi +
test byte ptr [eax+4] 80h +
jz loc_102D5CB  +
push dword ptr [ebp+WideCharStr]  +
lea eax [ebp+UsedDefaultChar] +
push 5  +
push eax  +
lea eax [ebp+var_10] +
push eax  +
call sub_102FE90  +
add esp 10h +
test eax eax +
jnz loc_102D4F5  +
xor ebx ebx +
cmp [ebp+var_10] ebx +
jle loc_102D5C5  +
dec dword ptr [esi+4]  +
js loc_102D5A8  +
mov eax [esi] +
mov cl byte ptr [ebp+ebx+UsedDefaultChar] +
mov [eax] cl +
mov ecx [esi] +
movzx eax byte ptr [ecx] +
inc ecx  +
mov [esi] ecx +
jmp loc_102D5B6  +
movsx eax byte ptr [ebp+ebx+UsedDefaultChar] +
push esi  +
push eax  +
call sub_1026F08  +
pop ecx  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_102D4F5  +
inc ebx  +
cmp ebx [ebp+var_10] +
jl loc_102D591  +
mov ax [ebp+WideCharStr] +
jmp loc_102D5EB  +
add dword ptr [esi+4] 0FFFFFFFEh +
js loc_102D5DE  +
mov ecx [esi] +
mov eax dword ptr [ebp+WideCharStr] +
mov [ecx] ax +
add dword ptr [esi] 2 +
jmp loc_102D5EB  +
movzx eax [ebp+WideCharStr] +
push esi  +
push eax  +
call sub_102FBAD  +
pop ecx  +
pop ecx  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1021557  +
leave   +
retn   +
***
mov eax dword_1063194 +
or eax 1 +
xor ecx ecx +
cmp dword_10656E4 eax +
setz cl  +
mov eax ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
xor ebx ebx +
cmp esi ebx +
jz loc_102D642  +
cmp [ebp+arg_8] ebx +
jz loc_102D642  +
cmp [esi] bl +
jnz loc_102D648  +
mov eax [ebp+lpWideCharStr] +
cmp eax ebx +
jz loc_102D642  +
xor ecx ecx +
mov [eax] cx +
xor eax eax +
pop esi  +
pop ebx  +
leave   +
retn   +
push [ebp+arg_C]  +
lea ecx [ebp+var_10] +
call sub_102160E  +
mov eax [ebp+var_10] +
cmp [eax+14h] ebx +
jnz loc_102D67A  +
mov eax [ebp+lpWideCharStr] +
cmp eax ebx +
jz loc_102D669  +
movzx cx byte ptr [esi] +
mov [eax] cx +
cmp [ebp+var_4] bl +
jz loc_102D675  +
mov eax [ebp+var_8] +
and dword ptr [eax+70h] 0FFFFFFFDh +
xor eax eax +
inc eax  +
jmp loc_102D644  +
lea eax [ebp+var_10] +
push eax  +
movzx eax byte ptr [esi] +
push eax  +
call sub_102D755  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_102D70A  +
mov eax [ebp+var_10] +
mov ecx [eax+0ACh] +
cmp ecx 1 +
jle loc_102D6C0  +
cmp [ebp+arg_8] ecx +
jl loc_102D6C0  +
xor edx edx +
cmp [ebp+lpWideCharStr] ebx +
setnz dl  +
push edx  +
push [ebp+lpWideCharStr]  +
push ecx  +
push esi  +
push 9  +
push dword ptr [eax+4]  +
call ds:MultiByteToWideChar  +
test eax eax +
mov eax [ebp+var_10] +
jnz loc_102D6D0  +
mov ecx [ebp+arg_8] +
cmp ecx [eax+0ACh] +
jb loc_102D6EB  +
cmp [esi+1] bl +
jz loc_102D6EB  +
mov eax [eax+0ACh] +
cmp [ebp+var_4] bl +
jz loc_102D644  +
mov ecx [ebp+var_8] +
and dword ptr [ecx+70h] 0FFFFFFFDh +
jmp loc_102D644  +
call sub_102501E  +
mov dword ptr [eax] 2Ah +
cmp [ebp+var_4] bl +
jz loc_102D702  +
mov eax [ebp+var_8] +
and dword ptr [eax+70h] 0FFFFFFFDh +
or eax 0FFFFFFFFh +
jmp loc_102D644  +
xor eax eax +
cmp [ebp+lpWideCharStr] ebx +
setnz al  +
push eax  +
push [ebp+lpWideCharStr]  +
mov eax [ebp+var_10] +
push 1  +
push esi  +
push 9  +
push dword ptr [eax+4]  +
call ds:MultiByteToWideChar  +
test eax eax +
jnz loc_102D669  +
jmp loc_102D6EB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+lpWideCharStr]  +
call sub_102D61A  +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push [ebp+arg_4]  +
lea ecx [ebp+var_10] +
call sub_102160E  +
movzx eax [ebp+arg_0] +
mov ecx [ebp+var_10] +
mov ecx [ecx+0C8h] +
movzx eax word ptr [ecx+eax*2] +
and eax 8000h +
cmp [ebp+var_4] 0 +
jz locret_102D78B  +
mov ecx [ebp+var_8] +
and dword ptr [ecx+70h] 0FFFFFFFDh +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_0]  +
call sub_102D755  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 103h  +
push [ebp+arg_0]  +
call sub_102EC7F  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 4  +
push [ebp+arg_0]  +
call sub_102EC7F  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
test byte ptr [ecx+0Ch] 40h +
jz loc_102D7E9  +
cmp dword ptr [ecx+8] 0 +
jz loc_102D80D  +
dec dword ptr [ecx+4]  +
js loc_102D7F9  +
mov edx [ecx] +
mov [edx] al +
inc dword ptr [ecx]  +
movzx eax al +
jmp loc_102D805  +
movsx eax al +
push ecx  +
push eax  +
call sub_1026F08  +
pop ecx  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jnz loc_102D80D  +
or [esi] eax +
retn   +
inc dword ptr [esi]  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi eax +
jmp loc_102D832  +
mov ecx [ebp+arg_8] +
mov al [ebp+arg_0] +
dec [ebp+arg_4]  +
call sub_102D7DD  +
cmp dword ptr [esi] 0FFFFFFFFh +
jz loc_102D838  +
cmp [ebp+arg_4] 0 +
jg loc_102D81F  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [edi+0Ch] 40h +
push ebx  +
push esi  +
mov esi eax +
mov ebx ecx +
jz loc_102D883  +
cmp dword ptr [edi+8] 0 +
jnz loc_102D883  +
mov eax [ebp+arg_0] +
add [esi] eax +
jmp loc_102D889  +
mov al [ebx] +
dec [ebp+arg_0]  +
mov ecx edi +
call sub_102D7DD  +
inc ebx  +
cmp dword ptr [esi] 0FFFFFFFFh +
jnz loc_102D883  +
call sub_102501E  +
cmp dword ptr [eax] 2Ah +
jnz loc_102D889  +
mov ecx edi +
mov al 3Fh +
call sub_102D7DD  +
cmp [ebp+arg_0] 0 +
jg loc_102D85E  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 278h +
mov eax dword_1063194 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
xor eax eax +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_C] +
push [ebp+arg_8]  +
lea ecx [ebp+var_24C] +
mov [ebp+var_25C] ebx +
mov [ebp+var_230] esi +
mov [ebp+var_224] edi +
mov [ebp+var_258] eax +
mov [ebp+var_210] eax +
mov [ebp+var_238] eax +
mov [ebp+var_218] eax +
mov [ebp+var_234] eax +
mov [ebp+var_260] eax +
mov [ebp+var_250] eax +
mov [ebp+var_23C] eax +
call sub_102160E  +
test ebx ebx +
jnz loc_102D93E  +
call sub_102501E  +
mov dword ptr [eax] 16h +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
call sub_1024FC5  +
add esp 14h +
cmp [ebp+var_240] 0 +
jz loc_102D936  +
mov eax [ebp+var_244] +
and dword ptr [eax+70h] 0FFFFFFFDh +
or eax 0FFFFFFFFh +
jmp loc_102E49E  +
test byte ptr [ebx+0Ch] 40h +
jnz loc_102D9E6  +
push ebx  +
call sub_102A027  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_102D988  +
push ebx  +
call sub_102A027  +
pop ecx  +
cmp eax 0FFFFFFFEh +
jz loc_102D988  +
push ebx  +
call sub_102A027  +
sar eax 5 +
push ebx  +
lea esi dword_1066D40[eax*4] +
call sub_102A027  +
and eax 1Fh +
imul eax eax +
add eax [esi] +
mov esi [ebp+var_230] +
pop ecx  +
pop ecx  +
jmp loc_102D98D  +
mov eax offset unk_10632E8 +
test byte ptr [eax+8] 3 +
jnz loc_102D909  +
push ebx  +
call sub_102A027  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_102D9D7  +
push ebx  +
call sub_102A027  +
pop ecx  +
cmp eax 0FFFFFFFEh +
jz loc_102D9D7  +
push ebx  +
call sub_102A027  +
sar eax 5 +
push ebx  +
lea esi dword_1066D40[eax*4] +
call sub_102A027  +
and eax 1Fh +
imul eax eax +
add eax [esi] +
mov esi [ebp+var_230] +
pop ecx  +
pop ecx  +
jmp loc_102D9DC  +
mov eax offset unk_10632E8 +
test byte ptr [eax+8] 8 +
jnz loc_102D909  +
test esi esi +
jz loc_102D909  +
mov cl [esi] +
xor edx edx +
mov [ebp+var_228] edx +
mov [ebp+var_220] edx +
mov [ebp+var_254] edx +
mov [ebp+var_211] cl +
test cl cl +
jz loc_102E485  +
inc esi  +
cmp [ebp+var_228] 0 +
mov [ebp+var_230] esi +
jl loc_102E485  +
mov al cl +
sub al 20h +
cmp al 58h +
ja loc_102DA3D  +
movsx eax cl +
movsx eax ds:byte_1007368[eax] +
and eax 0Fh +
jmp loc_102DA3F  +
xor eax eax +
movsx eax ds:byte_1007388[edx+eax*8] +
push 7  +
sar eax 4 +
pop edx  +
mov [ebp+var_270] eax +
cmp eax edx +
ja loc_102E445  +
jmp ds:off_102E4AE[eax*4]  +
xor eax eax +
or [ebp+var_218] 0FFFFFFFFh +
mov [ebp+var_260] eax +
mov [ebp+var_250] eax +
mov [ebp+var_238] eax +
mov [ebp+var_234] eax +
mov [ebp+var_210] eax +
mov [ebp+var_23C] eax +
jmp loc_102E445  +
movsx eax cl +
sub eax 20h +
jz loc_102DAE6  +
sub eax 3 +
jz loc_102DAD7  +
sub eax 8 +
jz loc_102DACB  +
dec eax  +
dec eax  +
jz loc_102DABF  +
sub eax 3 +
jnz loc_102E445  +
or [ebp+var_210] 8 +
jmp loc_102E445  +
or [ebp+var_210] 4 +
jmp loc_102E445  +
or [ebp+var_210] 1 +
jmp loc_102E445  +
or [ebp+var_210] 80h +
jmp loc_102E445  +
or [ebp+var_210] 2 +
jmp loc_102E445  +
cmp cl 2Ah +
jnz loc_102DB23  +
add edi 4 +
mov [ebp+var_224] edi +
mov edi [edi-4] +
mov [ebp+var_238] edi +
test edi edi +
jge loc_102E445  +
or [ebp+var_210] 4 +
neg [ebp+var_238]  +
jmp loc_102E445  +
mov eax [ebp+var_238] +
imul eax eax +
movsx ecx cl +
lea eax [eax+ecx-30h] +
mov [ebp+var_238] eax +
jmp loc_102E445  +
and [ebp+var_218] 0 +
jmp loc_102E445  +
cmp cl 2Ah +
jnz loc_102DB75  +
add edi 4 +
mov [ebp+var_224] edi +
mov edi [edi-4] +
mov [ebp+var_218] edi +
test edi edi +
jge loc_102E445  +
or [ebp+var_218] 0FFFFFFFFh +
jmp loc_102E445  +
mov eax [ebp+var_218] +
imul eax eax +
movsx ecx cl +
lea eax [eax+ecx-30h] +
mov [ebp+var_218] eax +
jmp loc_102E445  +
cmp cl 49h +
jz loc_102DBEA  +
cmp cl 68h +
jz loc_102DBDE  +
cmp cl 6Ch +
jz loc_102DBB7  +
cmp cl 77h +
jnz loc_102E445  +
or [ebp+var_210] 800h +
jmp loc_102E445  +
cmp byte ptr [esi] 6Ch +
jnz loc_102DBD2  +
inc esi  +
or [ebp+var_210] 1000h +
mov [ebp+var_230] esi +
jmp loc_102E445  +
or [ebp+var_210] 10h +
jmp loc_102E445  +
or [ebp+var_210] 20h +
jmp loc_102E445  +
mov al [esi] +
cmp al 36h +
jnz loc_102DC0D  +
cmp byte ptr [esi+1] 34h +
jnz loc_102DC0D  +
inc esi  +
inc esi  +
or [ebp+var_210] 8000h +
mov [ebp+var_230] esi +
jmp loc_102E445  +
cmp al 33h +
jnz loc_102DC2E  +
cmp byte ptr [esi+1] 32h +
jnz loc_102DC2E  +
inc esi  +
inc esi  +
and [ebp+var_210] 0FFFF7FFFh +
mov [ebp+var_230] esi +
jmp loc_102E445  +
cmp al 64h +
jz loc_102E445  +
cmp al 69h +
jz loc_102E445  +
cmp al 6Fh +
jz loc_102E445  +
cmp al 75h +
jz loc_102E445  +
cmp al 78h +
jz loc_102E445  +
cmp al 58h +
jz loc_102E445  +
and [ebp+var_270] 0 +
and [ebp+var_23C] 0 +
lea eax [ebp+var_24C] +
push eax  +
movzx eax cl +
push eax  +
call sub_102D755  +
pop ecx  +
test eax eax +
mov al [ebp+var_211] +
pop ecx  +
jz loc_102DCAB  +
lea esi [ebp+var_228] +
mov ecx ebx +
call sub_102D7DD  +
mov eax [ebp+var_230] +
mov al [eax] +
inc [ebp+var_230]  +
test al al +
jz loc_102D909  +
lea esi [ebp+var_228] +
mov ecx ebx +
call sub_102D7DD  +
jmp loc_102E445  +
movsx eax cl +
cmp eax 64h +
jg loc_102DEE0  +
jz loc_102DF77  +
cmp eax 53h +
jg loc_102DDCB  +
jz loc_102DD5F  +
sub eax 41h +
jz loc_102DCF3  +
dec eax  +
dec eax  +
jz loc_102DD40  +
dec eax  +
dec eax  +
jz loc_102DCF3  +
dec eax  +
dec eax  +
jnz loc_102E2C0  +
add cl 20h +
mov [ebp+var_260] 1 +
mov [ebp+var_211] cl +
or [ebp+var_210] 40h +
cmp [ebp+var_218] 0 +
lea eax [ebp+UsedDefaultChar] +
mov [ebp+var_21C] eax +
mov eax 200h +
mov [ebp+var_264] eax +
jge loc_102DFA7  +
mov [ebp+var_218] 6 +
jmp loc_102E00C  +
test [ebp+var_210] 830h +
jnz loc_102DDE8  +
or [ebp+var_210] 800h +
jmp loc_102DDE8  +
test [ebp+var_210] 830h +
jnz loc_102DD75  +
or [ebp+var_210] 800h +
mov edx [ebp+var_218] +
cmp edx 0FFFFFFFFh +
jnz loc_102DD85  +
mov edx 7FFFFFFFh +
add edi 4 +
test [ebp+var_210] 810h +
mov [ebp+var_224] edi +
mov edi [edi-4] +
mov [ebp+var_21C] edi +
jz loc_102E292  +
test edi edi +
jnz loc_102DDB6  +
mov eax off_1063BCC +
mov [ebp+var_21C] eax +
mov eax [ebp+var_21C] +
mov [ebp+var_23C] 1 +
jmp loc_102E284  +
sub eax 58h +
jz loc_102E0E7  +
dec eax  +
dec eax  +
jz loc_102DE51  +
sub eax edx +
jz loc_102DD06  +
dec eax  +
dec eax  +
jnz loc_102E2C0  +
add edi 4 +
test [ebp+var_210] 810h +
mov [ebp+var_224] edi +
jz loc_102DE2D  +
movzx eax word ptr [edi-4] +
push eax  +
push 200h  +
lea eax [ebp+UsedDefaultChar] +
push eax  +
lea eax [ebp+var_220] +
push eax  +
call sub_102FE90  +
add esp 10h +
test eax eax +
jz loc_102DE40  +
mov [ebp+var_250] 1 +
jmp loc_102DE40  +
mov al [edi-4] +
mov byte ptr [ebp+UsedDefaultChar] al +
mov [ebp+var_220] 1 +
lea eax [ebp+UsedDefaultChar] +
mov [ebp+var_21C] eax +
jmp loc_102E2C0  +
mov eax [edi] +
add edi 4 +
mov [ebp+var_224] edi +
test eax eax +
jz loc_102DEC4  +
mov esi [eax+4] +
xor edi edi +
cmp esi edi +
jz loc_102DEC4  +
movzx ecx word ptr [eax] +
cmp [eax+2] cx +
jb loc_102E470  +
test [ebp+var_210] 800h +
movzx eax cx +
jz loc_102DEB3  +
xor ecx ecx +
mov edx eax +
not edx  +
inc ecx  +
test dl cl +
jz loc_102E470  +
mov edx esi +
not edx  +
test dl cl +
jz loc_102E470  +
mov [ebp+var_21C] esi +
shr eax 1 +
mov [ebp+var_23C] ecx +
jmp loc_102E2BA  +
mov [ebp+var_23C] edi +
mov [ebp+var_21C] esi +
jmp loc_102E2BA  +
mov eax off_1063BC8 +
mov [ebp+var_21C] eax +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_102DED2  +
sub eax edx +
jmp loc_102E2BA  +
cmp eax 70h +
jg loc_102E0EF  +
jz loc_102E0DD  +
cmp eax 65h +
jl loc_102E2C0  +
cmp eax 67h +
jle loc_102DD06  +
cmp eax 69h +
jz loc_102DF77  +
cmp eax 6Eh +
jz loc_102DF33  +
cmp eax 6Fh +
jnz loc_102E2C0  +
test byte ptr [ebp+var_210] 80h +
mov [ebp+var_220] 8 +
jz loc_102DF88  +
or [ebp+var_210] 200h +
jmp loc_102DF88  +
mov esi [edi] +
add edi 4 +
mov [ebp+var_224] edi +
call sub_102D5FF  +
test eax eax +
jz loc_102D909  +
test byte ptr [ebp+var_210] 20h +
jz loc_102DF60  +
mov ax word ptr [ebp+var_228] +
mov [esi] ax +
jmp loc_102DF68  +
mov eax [ebp+var_228] +
mov [esi] eax +
mov [ebp+var_250] 1 +
jmp loc_102E429  +
or [ebp+var_210] 40h +
mov [ebp+var_220] 0Ah +
mov ecx [ebp+var_210] +
test ecx 8000h +
jz loc_102E14E  +
mov eax [edi] +
mov edx [edi+4] +
add edi 8 +
jmp loc_102E187  +
jnz loc_102DFBA  +
cmp cl 67h +
jnz loc_102E00C  +
mov [ebp+var_218] 1 +
jmp loc_102E00C  +
cmp [ebp+var_218] eax +
jle loc_102DFC8  +
mov [ebp+var_218] eax +
mov ebx 0A3h +
cmp [ebp+var_218] ebx +
jle loc_102E00C  +
mov esi [ebp+var_218] +
add esi 15Dh +
push esi  +
call sub_1021488  +
pop ecx  +
mov cl [ebp+var_211] +
mov [ebp+var_254] eax +
test eax eax +
jz loc_102E006  +
mov [ebp+var_21C] eax +
mov [ebp+var_264] esi +
jmp loc_102E00C  +
mov [ebp+var_218] ebx +
mov eax [edi] +
add edi 8 +
mov [ebp+var_278] eax +
mov eax [edi-4] +
mov [ebp+var_274] eax +
lea eax [ebp+var_24C] +
push eax  +
push [ebp+var_260]  +
movsx eax cl +
push [ebp+var_218]  +
mov [ebp+var_224] edi +
mov edi [ebp+var_21C] +
push eax  +
push [ebp+var_264]  +
lea eax [ebp+var_278] +
push edi  +
push eax  +
push off_1063FA8  +
call sub_102473C  +
pop ecx  +
call eax  +
mov esi [ebp+var_210] +
add esp 1Ch +
and esi 80h +
jz loc_102E091  +
cmp [ebp+var_218] 0 +
jnz loc_102E091  +
lea eax [ebp+var_24C] +
push eax  +
push edi  +
push off_1063FB4  +
call sub_102473C  +
pop ecx  +
call eax  +
pop ecx  +
pop ecx  +
cmp [ebp+var_211] 67h +
jnz loc_102E0B6  +
test esi esi +
jnz loc_102E0B6  +
lea eax [ebp+var_24C] +
push eax  +
push edi  +
push off_1063FB0  +
call sub_102473C  +
pop ecx  +
call eax  +
pop ecx  +
pop ecx  +
cmp byte ptr [edi] 2Dh +
jnz loc_102E0CC  +
or [ebp+var_210] 100h +
inc edi  +
mov [ebp+var_21C] edi +
mov eax edi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_102E0D1  +
jmp loc_102DED9  +
mov [ebp+var_218] 8 +
mov [ebp+var_258] edx +
jmp loc_102E113  +
sub eax 73h +
jz loc_102DD75  +
dec eax  +
dec eax  +
jz loc_102DF7E  +
sub eax 3 +
jnz loc_102E2C0  +
mov [ebp+var_258] 27h +
test byte ptr [ebp+var_210] 80h +
mov [ebp+var_220] 10h +
jz loc_102DF88  +
mov al byte ptr [ebp+var_258] +
add al 51h +
mov byte ptr [ebp+var_22C] 30h +
mov byte ptr [ebp+var_22C+1] al +
mov [ebp+var_234] 2 +
jmp loc_102DF88  +
test ecx 1000h +
jnz loc_102DF9A  +
add edi 4 +
test cl 20h +
jz loc_102E17A  +
mov [ebp+var_224] edi +
test cl 40h +
jz loc_102E173  +
movsx eax word ptr [edi-4] +
jmp loc_102E177  +
movzx eax word ptr [edi-4] +
cdq   +
jmp loc_102E18D  +
mov eax [edi-4] +
test cl 40h +
jz loc_102E185  +
cdq   +
jmp loc_102E187  +
xor edx edx +
mov [ebp+var_224] edi +
test cl 40h +
jz loc_102E1AD  +
test edx edx +
jg loc_102E1AD  +
jl loc_102E19C  +
test eax eax +
jnb loc_102E1AD  +
neg eax  +
adc edx 0 +
neg edx  +
or [ebp+var_210] 100h +
test [ebp+var_210] 9000h +
mov ebx edx +
mov edi eax +
jnz loc_102E1BF  +
xor ebx ebx +
cmp [ebp+var_218] 0 +
jge loc_102E1D4  +
mov [ebp+var_218] 1 +
jmp loc_102E1EE  +
and [ebp+var_210] 0FFFFFFF7h +
mov eax 200h +
cmp [ebp+var_218] eax +
jle loc_102E1EE  +
mov [ebp+var_218] eax +
mov eax edi +
or eax ebx +
jnz loc_102E1FA  +
and [ebp+var_234] eax +
lea esi [ebp+var_D] +
mov eax [ebp+var_218] +
dec [ebp+var_218]  +
test eax eax +
jg loc_102E213  +
mov eax edi +
or eax ebx +
jz loc_102E240  +
mov eax [ebp+var_220] +
cdq   +
push edx  +
push eax  +
push ebx  +
push edi  +
call sub_102E4E0  +
add ecx 30h +
cmp ecx 39h +
mov [ebp+var_264] ebx +
mov edi eax +
mov ebx edx +
jle loc_102E23B  +
add ecx [ebp+var_258] +
mov [esi] cl +
dec esi  +
jmp loc_102E1FD  +
lea eax [ebp+var_D] +
sub eax esi +
inc esi  +
test [ebp+var_210] 200h +
mov [ebp+var_220] eax +
mov [ebp+var_21C] esi +
jz loc_102E2C0  +
test eax eax +
jz loc_102E269  +
mov ecx esi +
cmp byte ptr [ecx] 30h +
jz loc_102E2C0  +
dec [ebp+var_21C]  +
mov ecx [ebp+var_21C] +
mov byte ptr [ecx] 30h +
inc eax  +
jmp loc_102E2BA  +
dec edx  +
cmp word ptr [eax] 0 +
jz loc_102E288  +
inc eax  +
inc eax  +
test edx edx +
jnz loc_102E27B  +
sub eax [ebp+var_21C] +
sar eax 1 +
jmp loc_102E2BA  +
test edi edi +
jnz loc_102E2A1  +
mov eax off_1063BC8 +
mov [ebp+var_21C] eax +
mov eax [ebp+var_21C] +
jmp loc_102E2B0  +
dec edx  +
cmp byte ptr [eax] 0 +
jz loc_102E2B4  +
inc eax  +
test edx edx +
jnz loc_102E2A9  +
sub eax [ebp+var_21C] +
mov [ebp+var_220] eax +
cmp [ebp+var_250] 0 +
jnz loc_102E429  +
mov eax [ebp+var_210] +
test al 40h +
jz loc_102E309  +
test eax 100h +
jz loc_102E2E7  +
mov byte ptr [ebp+var_22C] 2Dh +
jmp loc_102E2FF  +
test al 1 +
jz loc_102E2F4  +
mov byte ptr [ebp+var_22C] 2Bh +
jmp loc_102E2FF  +
test al 2 +
jz loc_102E309  +
mov byte ptr [ebp+var_22C] 20h +
mov [ebp+var_234] 1 +
mov ebx [ebp+var_238] +
sub ebx [ebp+var_220] +
sub ebx [ebp+var_234] +
test byte ptr [ebp+var_210] 0Ch +
jnz loc_102E33B  +
push [ebp+var_25C]  +
lea eax [ebp+var_228] +
push ebx  +
push 20h  +
call sub_102D815  +
add esp 0Ch +
push [ebp+var_234]  +
mov edi [ebp+var_25C] +
lea eax [ebp+var_228] +
lea ecx [ebp+var_22C] +
call sub_102D840  +
test byte ptr [ebp+var_210] 8 +
pop ecx  +
jz loc_102E37D  +
test byte ptr [ebp+var_210] 4 +
jnz loc_102E37D  +
push edi  +
push ebx  +
push 30h  +
lea eax [ebp+var_228] +
call sub_102D815  +
add esp 0Ch +
cmp [ebp+var_23C] 0 +
mov eax [ebp+var_220] +
jz loc_102E3F2  +
test eax eax +
jle loc_102E3F2  +
mov esi [ebp+var_21C] +
mov [ebp+var_264] eax +
movzx eax word ptr [esi] +
dec [ebp+var_264]  +
push eax  +
push 6  +
lea eax [ebp+var_D+1] +
push eax  +
lea eax [ebp+var_26C] +
inc esi  +
push eax  +
inc esi  +
call sub_102FE90  +
add esp 10h +
test eax eax +
jnz loc_102E3E9  +
cmp [ebp+var_26C] eax +
jz loc_102E3E9  +
push [ebp+var_26C]  +
lea eax [ebp+var_228] +
lea ecx [ebp+var_D+1] +
call sub_102D840  +
cmp [ebp+var_264] 0 +
pop ecx  +
jnz loc_102E39C  +
jmp loc_102E405  +
or [ebp+var_228] 0FFFFFFFFh +
jmp loc_102E405  +
mov ecx [ebp+var_21C] +
push eax  +
lea eax [ebp+var_228] +
call sub_102D840  +
pop ecx  +
cmp [ebp+var_228] 0 +
jl loc_102E429  +
test byte ptr [ebp+var_210] 4 +
jz loc_102E429  +
push edi  +
push ebx  +
push 20h  +
lea eax [ebp+var_228] +
call sub_102D815  +
add esp 0Ch +
cmp [ebp+var_254] 0 +
jz loc_102E445  +
push [ebp+var_254]  +
call sub_10213A1  +
and [ebp+var_254] 0 +
pop ecx  +
mov esi [ebp+var_230] +
mov al [esi] +
mov [ebp+var_211] al +
test al al +
jz loc_102E485  +
mov edx [ebp+var_270] +
mov ebx [ebp+var_25C] +
mov edi [ebp+var_224] +
mov cl al +
jmp loc_102DA12  +
call sub_102501E  +
push edi  +
push edi  +
push edi  +
push edi  +
mov dword ptr [eax] 16h +
push edi  +
jmp loc_102D91B  +
cmp [ebp+var_240] 0 +
jz loc_102E498  +
mov eax [ebp+var_244] +
and dword ptr [eax+70h] 0FFFFFFFDh +
mov eax [ebp+var_228] +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1021557  +
leave   +
retn   +
***
or eax eax +
jnz loc_102E511  +
mov ecx [esp+arg_8] +
mov eax [esp+arg_4] +
xor edx edx +
div  ecx +
mov ebx eax +
mov eax [esp+arg_0] +
div  ecx +
mov esi eax +
mov eax ebx +
mul  [esp+arg_8] +
mov ecx eax +
mov eax esi +
mul  [esp+arg_8] +
add edx ecx +
jmp loc_102E558  +
mov ecx eax +
mov ebx [esp+arg_8] +
mov edx [esp+arg_4] +
mov eax [esp+arg_0] +
shr ecx 1 +
rcr ebx 1 +
shr edx 1 +
rcr eax 1 +
or ecx ecx +
jnz loc_102E51F  +
div  ebx +
mov esi eax +
mul  [esp+arg_C] +
mov ecx eax +
mov eax [esp+arg_8] +
mul  esi +
add edx ecx +
jb loc_102E54D  +
cmp edx [esp+arg_4] +
ja loc_102E54D  +
jb loc_102E556  +
cmp eax [esp+arg_0] +
jbe loc_102E556  +
dec esi  +
sub eax [esp+arg_8] +
sbb edx [esp+arg_C] +
xor ebx ebx +
sub eax [esp+arg_0] +
sbb edx [esp+arg_4] +
neg edx  +
neg eax  +
sbb edx 0 +
mov ecx edx +
mov edx ebx +
mov ebx ecx +
mov ecx eax +
mov eax esi +
pop esi  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
mov eax dword_1063194 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov [ebp+var_28] eax +
xor eax eax +
inc eax  +
push edi  +
mov edi [ebp+arg_4] +
test [ebp+arg_14] al +
jz loc_102E5A2  +
sub [ebp+arg_C] 20h +
test [ebp+arg_14] 80h +
mov byte ptr [ebp+var_24] 25h +
jz loc_102E5B3  +
push 2  +
mov byte ptr [ebp+var_24+1] 23h +
pop eax  +
push esi  +
mov byte ptr [ebp+eax+var_24] 2Eh +
push 0Ah  +
lea eax [ebp+eax+var_24+1] +
push eax  +
push [ebp+arg_10]  +
call sub_1030222  +
lea eax [ebp+var_24] +
add esp 0Ch +
lea esi [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_102E5D1  +
mov cl byte ptr [ebp+arg_C] +
sub eax esi +
mov byte ptr [ebp+eax+var_24] cl +
mov byte ptr [ebp+eax+var_24+1] 0 +
mov eax [ebp+arg_8] +
lea esi [edi+eax-1] +
mov byte ptr [esi] 0 +
push ecx  +
push ecx  +
mov ecx [ebp+var_28] +
fld  qword ptr [ecx] +
lea ecx [ebp+var_24] +
fstp  [esp+38h+var_38] +
push ecx  +
push eax  +
push edi  +
call sub_1030125  +
add esp 14h +
cmp byte ptr [esi] 0 +
pop esi  +
jnz loc_102E616  +
test eax eax +
jle loc_102E616  +
xor eax eax +
jmp loc_102E61C  +
push 16h  +
mov byte ptr [edi] 0 +
pop eax  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_1021557  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_4] +
push esi  +
call sub_102A027  +
pop ecx  +
mov ecx eax +
mov eax [esi+0Ch] +
mov [ebp+var_4] ecx +
test al 82h +
jnz loc_102E662  +
call sub_102501E  +
mov dword ptr [eax] 9 +
or dword ptr [esi+0Ch] 20h +
or eax 0FFFFFFFFh +
jmp loc_102E791  +
test al 40h +
jz loc_102E673  +
call sub_102501E  +
mov dword ptr [eax] 22h +
jmp loc_102E656  +
push ebx  +
xor ebx ebx +
test al 1 +
jz loc_102E68C  +
mov [esi+4] ebx +
test al 10h +
jz loc_102E6E0  +
mov edx [esi+8] +
and eax 0FFFFFFFEh +
mov [esi] edx +
mov [esi+0Ch] eax +
mov eax [esi+0Ch] +
and eax 0FFFFFFEFh +
or eax 2 +
mov [esi+0Ch] eax +
mov [esi+4] ebx +
mov [ebp+arg_4] ebx +
test eax 10Ch +
jnz loc_102E6EB  +
cmp esi offset unk_1063C30 +
jz loc_102E6B5  +
cmp esi offset unk_1063C50 +
jnz loc_102E6C0  +
push ecx  +
call sub_102D3B0  +
pop ecx  +
test eax eax +
jnz loc_102E6E8  +
call sub_102501E  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov dword ptr [eax] 16h +
call sub_1024FC5  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_102E790  +
or eax 20h +
mov [esi+0Ch] eax +
jmp loc_102E6D8  +
mov ecx [ebp+var_4] +
test dword ptr [esi+0Ch] 108h +
push edi  +
jz loc_102E765  +
mov eax [esi+8] +
mov edi [esi] +
lea edx [eax+1] +
mov [esi] edx +
mov edx [esi+18h] +
sub edi eax +
dec edx  +
cmp edi ebx +
mov [esi+4] edx +
jle loc_102E71C  +
push edi  +
push eax  +
push ecx  +
call sub_102D27B  +
add esp 0Ch +
mov [ebp+arg_4] eax +
jmp loc_102E75B  +
cmp ecx 0FFFFFFFFh +
jz loc_102E73C  +
cmp ecx 0FFFFFFFEh +
jz loc_102E73C  +
mov eax ecx +
and eax 1Fh +
imul eax eax +
mov edx ecx +
sar edx 5 +
add eax dword_1066D40[edx*4] +
jmp loc_102E741  +
mov eax offset unk_10632E8 +
test byte ptr [eax+4] 20h +
jz loc_102E75B  +
push 2  +
push ebx  +
push ebx  +
push ecx  +
call sub_102CA7C  +
and eax edx +
add esp 10h +
cmp eax 0FFFFFFFFh +
jz loc_102E77E  +
mov eax [esi+8] +
mov cl byte ptr [ebp+arg_0] +
mov [eax] cl +
jmp loc_102E779  +
xor edi edi +
inc edi  +
push edi  +
lea eax [ebp+arg_0] +
push eax  +
push ecx  +
call sub_102D27B  +
add esp 0Ch +
mov [ebp+arg_4] eax +
cmp [ebp+arg_4] edi +
jz loc_102E787  +
or dword ptr [esi+0Ch] 20h +
or eax 0FFFFFFFFh +
jmp loc_102E78F  +
mov eax [ebp+arg_0] +
and eax 0FFh +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi+8] 0 +
mov dword ptr [esi] offset off_10074A4 +
mov eax [ebx] +
push edi  +
test eax eax +
jz loc_102E7E8  +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_102E7B9  +
sub eax ecx +
lea edi [eax+1] +
push edi  +
call sub_1021488  +
pop ecx  +
mov [esi+4] eax +
test eax eax +
jz loc_102E7EC  +
push dword ptr [ebx]  +
push edi  +
push eax  +
call sub_102B860  +
add esp 0Ch +
mov dword ptr [esi+8] 1 +
jmp loc_102E7EC  +
and dword ptr [esi+4] 0 +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi ecx +
xor ecx ecx +
mov dword ptr [esi] offset off_10074A4 +
mov [esi+8] ecx +
mov eax [ebx+4] +
push edi  +
cmp [ebx+8] ecx +
jz loc_102E856  +
cmp eax ecx +
jz loc_102E851  +
lea edi [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_102E821  +
sub eax edi +
lea edi [eax+1] +
push edi  +
call sub_1021488  +
pop ecx  +
mov [esi+4] eax +
test eax eax +
jz loc_102E859  +
push dword ptr [ebx+4]  +
push edi  +
push eax  +
call sub_102B860  +
add esp 0Ch +
mov dword ptr [esi+8] 1 +
jmp loc_102E859  +
mov [esi+4] ecx +
jmp loc_102E859  +
mov [esi+4] eax +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
cmp dword ptr [ecx+8] 0 +
mov dword ptr [ecx] offset off_10074A4 +
jz locret_102E87C  +
push dword ptr [ecx+4]  +
call sub_10213A1  +
pop ecx  +
retn   +
***
mov eax [ecx+4] +
test eax eax +
jnz locret_102E88E  +
mov eax offset aUnknownExcepti +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_102E867  +
test byte ptr [ebp+8] 1 +
jz loc_102E8AE  +
push esi  +
call sub_1021179  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
inc eax  +
cmp [ebp+arg_0] 0 +
jnz loc_102E8CA  +
xor eax eax +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push ebp  +
push 0  +
push 0  +
push offset loc_102E8EC  +
push dword ptr [ebp+8]  +
call RtlUnwind  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push edi  +
mov eax [esp+arg_0] +
push ebp  +
push eax  +
push 0FFFFFFFEh  +
push offset loc_102E8F4  +
push large dword ptr fs:0  +
mov eax dword_1063194 +
xor eax esp +
push eax  +
lea eax [esp+18h+var_14] +
mov large fs:0 eax +
mov eax [esp+18h+arg_0] +
mov ebx [eax+8] +
mov esi [eax+0Ch] +
cmp esi 0FFFFFFFFh +
jz loc_102E9AB  +
cmp [esp+18h+arg_4] 0FFFFFFFFh +
jz loc_102E97E  +
cmp esi [esp+18h+arg_4] +
jbe loc_102E9AB  +
lea esi [esi+esi*2] +
mov ecx [ebx+esi*4] +
mov [esp+18h+var_C] ecx +
mov [eax+0Ch] ecx +
cmp dword ptr [ebx+esi*4+4] 0 +
jnz loc_102E9A9  +
push 101h  +
mov eax [ebx+esi*4+8] +
call sub_102E9E9  +
mov eax [ebx+esi*4+8] +
call sub_102EA08  +
jmp loc_102E962  +
mov ecx [esp+18h+var_14] +
mov large fs:0 ecx +
add esp 18h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx offset unk_10641A0 +
mov ebx offset unk_10641A0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ax [ebp+arg_0] +
cmp ax 30h +
jnb loc_102EA26  +
mov eax 0FFFFFFFFh +
pop ebp  +
retn   +
cmp ax 3Ah +
jnb loc_102EA34  +
movzx eax ax +
sub eax 30h +
pop ebp  +
retn   +
mov ecx 0FF10h +
mov edx ecx +
cmp ax dx +
jnb loc_102EBD8  +
mov ecx 660h +
mov edx ecx +
cmp ax dx +
jb loc_102EBE6  +
add edx 0Ah +
cmp ax dx +
jnb loc_102EA63  +
movzx eax ax +
sub eax ecx +
pop ebp  +
retn   +
mov ecx 6F0h +
mov edx ecx +
cmp ax dx +
jb loc_102EBE6  +
add edx 0Ah +
cmp ax dx +
jb loc_102EA5C  +
mov ecx 966h +
mov edx ecx +
cmp ax dx +
jb loc_102EBE6  +
add edx 0Ah +
cmp ax dx +
jb loc_102EA5C  +
mov ecx 9E6h +
mov edx ecx +
cmp ax dx +
jb loc_102EBE6  +
add edx 0Ah +
cmp ax dx +
jb loc_102EA5C  +
mov ecx 0A66h +
mov edx ecx +
cmp ax dx +
jb loc_102EBE6  +
add edx 0Ah +
cmp ax dx +
jb loc_102EA5C  +
mov ecx 0AE6h +
mov edx ecx +
cmp ax dx +
jb loc_102EBE6  +
add edx 0Ah +
cmp ax dx +
jb loc_102EA5C  +
mov ecx 0B66h +
mov edx ecx +
cmp ax dx +
jb loc_102EBE6  +
add edx 0Ah +
cmp ax dx +
jb loc_102EA5C  +
mov ecx 0C66h +
mov edx ecx +
cmp ax dx +
jb loc_102EBE6  +
add edx 0Ah +
cmp ax dx +
jb loc_102EA5C  +
mov ecx 0CE6h +
mov edx ecx +
cmp ax dx +
jb loc_102EBE6  +
add edx 0Ah +
cmp ax dx +
jb loc_102EA5C  +
mov ecx 0D66h +
mov edx ecx +
cmp ax dx +
jb loc_102EBE6  +
add edx 0Ah +
cmp ax dx +
jb loc_102EA5C  +
mov ecx 0E50h +
mov edx ecx +
cmp ax dx +
jb loc_102EBE6  +
add edx 0Ah +
cmp ax dx +
jb loc_102EA5C  +
mov ecx 0ED0h +
mov edx ecx +
cmp ax dx +
jb loc_102EBE6  +
add edx 0Ah +
cmp ax dx +
jb loc_102EA5C  +
add ecx 50h +
mov edx ecx +
cmp ax dx +
jb loc_102EBE6  +
mov edx 0F2Ah +
cmp ax dx +
jb loc_102EA5C  +
mov ecx 1040h +
mov edx ecx +
cmp ax dx +
jb loc_102EBE6  +
add edx 0Ah +
cmp ax dx +
jb loc_102EA5C  +
mov ecx 17E0h +
mov edx ecx +
cmp ax dx +
jb loc_102EBE6  +
add edx 0Ah +
cmp ax dx +
jb loc_102EA5C  +
add ecx 30h +
mov edx ecx +
cmp ax dx +
jb loc_102EBE6  +
mov edx 181Ah +
jmp loc_102EBDD  +
mov edx 0FF1Ah +
cmp ax dx +
jb loc_102EA5C  +
or eax 0FFFFFFFFh +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 0FFFFh +
sub esp 14h +
cmp [ebp+WideCharStr] ax +
jnz loc_102EC09  +
and dword ptr [ebp+CharType] 0 +
jmp loc_102EC6E  +
mov eax 100h +
cmp [ebp+WideCharStr] ax +
jnb loc_102EC2E  +
movzx eax [ebp+WideCharStr] +
mov ecx off_1063FC0 +
mov ax [ecx+eax*2] +
and ax [ebp+arg_4] +
movzx eax ax +
mov dword ptr [ebp+CharType] eax +
jmp loc_102EC6E  +
push [ebp+arg_8]  +
lea ecx [ebp+var_14] +
call sub_102160E  +
mov eax [ebp+var_14] +
push dword ptr [eax+14h]  +
push dword ptr [eax+4]  +
lea eax [ebp+CharType] +
push eax  +
push 1  +
lea eax [ebp+WideCharStr] +
push eax  +
lea eax [ebp+var_14] +
push 1  +
push eax  +
call sub_1030502  +
add esp 1Ch +
test eax eax +
jnz loc_102EC61  +
and dword ptr [ebp+CharType] eax +
cmp [ebp+var_8] 0 +
jz loc_102EC6E  +
mov eax [ebp+var_C] +
and dword ptr [eax+70h] 0FFFFFFFDh +
movzx eax [ebp+CharType] +
movzx ecx [ebp+arg_4] +
and eax ecx +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax 0FFFFh +
cmp [ebp+WideCharStr] ax +
jnz loc_102EC94  +
xor eax eax +
leave   +
retn   +
mov eax 100h +
cmp [ebp+WideCharStr] ax +
jnb loc_102ECB5  +
movzx eax [ebp+WideCharStr] +
mov ecx off_1063FC0 +
movzx eax word ptr [ecx+eax*2] +
movzx ecx [ebp+arg_4] +
and eax ecx +
leave   +
retn   +
cmp dword_1065630 0 +
jnz loc_102ECE3  +
push dword_1063AF4  +
lea eax [ebp+CharType] +
push CodePage  +
push eax  +
push 1  +
lea eax [ebp+WideCharStr] +
push eax  +
push 1  +
push offset off_1063BC0  +
call sub_1030502  +
add esp 1Ch +
push 0  +
push dword ptr [ebp+arg_4]  +
push dword ptr [ebp+WideCharStr]  +
call sub_102EBF0  +
add esp 0Ch +
leave   +
retn   +
***
mov eax [esp+arg_4] +
mov ecx [esp+arg_C] +
or ecx eax +
mov ecx [esp+arg_8] +
jnz loc_102ED19  +
mov eax [esp+arg_0] +
mul  ecx +
retn 10h  +
push ebx  +
mul  ecx +
mov ebx eax +
mov eax [esp+4+arg_0] +
mul  [esp+4+arg_C] +
add ebx eax +
mov eax [esp+4+arg_0] +
mul  ecx +
add edx ebx +
pop ebx  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push edi  +
test eax eax +
jl loc_102EDA0  +
cmp eax uNumber +
jnb loc_102EDA0  +
mov esi eax +
and esi 1Fh +
imul esi esi +
mov ecx eax +
sar ecx 5 +
lea edi dword_1066D40[ecx*4] +
mov ecx [edi] +
cmp dword ptr [esi+ecx] 0FFFFFFFFh +
jnz loc_102EDA0  +
cmp dword_1063190 1 +
push ebx  +
mov ebx [ebp+hHandle] +
jnz loc_102ED96  +
sub eax 0 +
jz loc_102ED8D  +
dec eax  +
jz loc_102ED88  +
dec eax  +
jnz loc_102ED96  +
push ebx  +
push 0FFFFFFF4h  +
jmp loc_102ED90  +
push ebx  +
push 0FFFFFFF5h  +
jmp loc_102ED90  +
push ebx  +
push 0FFFFFFF6h  +
call ds:SetStdHandle  +
mov eax [edi] +
mov [esi+eax] ebx +
xor eax eax +
pop ebx  +
jmp loc_102EDB6  +
call sub_102501E  +
mov dword ptr [eax] 9 +
call sub_1025036  +
and dword ptr [eax] 0 +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push ebx  +
xor ebx ebx +
cmp ecx ebx +
push esi  +
push edi  +
jl loc_102EE2B  +
cmp ecx uNumber +
jnb loc_102EE2B  +
mov esi ecx +
and esi 1Fh +
imul esi esi +
mov eax ecx +
sar eax 5 +
lea edi dword_1066D40[eax*4] +
mov eax [edi] +
add eax esi +
test byte ptr [eax+4] 1 +
jz loc_102EE2B  +
cmp dword ptr [eax] 0FFFFFFFFh +
jz loc_102EE2B  +
cmp dword_1063190 1 +
jnz loc_102EE21  +
sub ecx ebx +
jz loc_102EE18  +
dec ecx  +
jz loc_102EE13  +
dec ecx  +
jnz loc_102EE21  +
push ebx  +
push 0FFFFFFF4h  +
jmp loc_102EE1B  +
push ebx  +
push 0FFFFFFF5h  +
jmp loc_102EE1B  +
push ebx  +
push 0FFFFFFF6h  +
call ds:SetStdHandle  +
mov eax [edi] +
or dword ptr [esi+eax] 0FFFFFFFFh +
xor eax eax +
jmp loc_102EE40  +
call sub_102501E  +
mov dword ptr [eax] 9 +
call sub_1025036  +
mov [eax] ebx +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 0FFFFFFFFh +
jnz loc_102EE67  +
call sub_102501E  +
mov dword ptr [eax] 9 +
or eax 0FFFFFFFFh +
pop ebp  +
retn   +
cmp eax 0FFFFFFFEh +
jnz loc_102EE76  +
call sub_1025036  +
and dword ptr [eax] 0 +
jmp loc_102EE57  +
push esi  +
xor esi esi +
cmp eax esi +
jl loc_102EEC4  +
cmp eax uNumber +
jnb loc_102EEC4  +
mov ecx eax +
and eax 1Fh +
imul eax eax +
sar ecx 5 +
mov ecx dword_1066D40[ecx*4] +
add eax ecx +
test byte ptr [eax+4] 1 +
jnz loc_102EEC0  +
call sub_1025036  +
mov [eax] esi +
call sub_102501E  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 9 +
call sub_1024FC5  +
add esp 14h +
jmp loc_102EED6  +
mov eax [eax] +
jmp loc_102EED9  +
call sub_1025036  +
mov [eax] esi +
call sub_102501E  +
mov dword ptr [eax] 9 +
or eax 0FFFFFFFFh +
pop esi  +
pop ebp  +
retn   +
***
call sub_1022E04  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx eax +
and eax 1Fh +
imul eax eax +
sar ecx 5 +
mov ecx dword_1066D40[ecx*4] +
lea eax [ecx+eax+0Ch] +
push eax  +
call ds:LeaveCriticalSection  +
pop ebp  +
retn   +
***
call sub_1022E04  +
pop ecx  +
retn   +
***
pop ecx  +
retn   +
***
call sub_1022E04  +
pop ecx  +
retn   +
***
mov esi edi +
shl esi 2 +
mov eax dword_1065CF0 +
add eax esi +
cmp [eax] ebx +
jz loc_102F2C0  +
mov eax [eax] +
test byte ptr [eax+0Ch] 83h +
jz loc_102F293  +
push eax  +
call sub_1022BF1  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_102F293  +
inc dword ptr [ebp-1Ch]  +
cmp edi 14h +
jl loc_102F2C0  +
mov eax dword_1065CF0 +
mov eax [esi+eax] +
add eax 20h +
push eax  +
call ds:DeleteCriticalSection  +
mov eax dword_1065CF0 +
push dword ptr [esi+eax]  +
call sub_10213A1  +
pop ecx  +
mov eax dword_1065CF0 +
mov [esi+eax] ebx +
inc edi  +
jmp loc_102F261  +
***
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push ebx  +
push esi  +
xor ebx ebx +
test byte ptr [ebp+arg_8] 80h +
push edi  +
push 10h  +
mov esi eax +
mov [ebp+var_14] ebx +
mov [ebp+var_18] ebx +
mov [ebp+var_2] bl +
mov [ebp+SecurityAttributes.nLength] 0Ch +
mov [ebp+SecurityAttributes.lpSecurityDescriptor] ebx +
pop edi  +
jz loc_102F31A  +
mov [ebp+SecurityAttributes.bInheritHandle] ebx +
mov [ebp+var_1] 10h +
jmp loc_102F324  +
mov [ebp+SecurityAttributes.bInheritHandle] 1 +
mov [ebp+var_1] bl +
lea eax [ebp+var_14] +
push eax  +
call sub_1030839  +
pop ecx  +
test eax eax +
jz loc_102F33F  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call sub_1024F1A  +
add esp 14h +
lea eax [ebp+var_18] +
push eax  +
call sub_102383D  +
pop ecx  +
test eax eax +
jz loc_102F35A  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call sub_1024F1A  +
add esp 14h +
mov eax 8000h +
test [ebp+arg_8] eax +
jnz loc_102F376  +
test [ebp+arg_8] 74000h +
jnz loc_102F372  +
cmp [ebp+var_14] eax +
jz loc_102F376  +
or [ebp+var_1] 80h +
mov eax [ebp+arg_8] +
push 3  +
pop edx  +
and eax edx +
sub eax ebx +
mov ecx 80000000h +
jz loc_102F3C5  +
dec eax  +
jz loc_102F3BC  +
dec eax  +
jz loc_102F3B3  +
call sub_1025036  +
mov [eax] ebx +
or dword ptr [esi] 0FFFFFFFFh +
call sub_102501E  +
push 16h  +
pop esi  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov [eax] esi +
call sub_1024FC5  +
add esp 14h +
jmp loc_102F851  +
mov [ebp+dwDesiredAccess] 0C0000000h +
jmp loc_102F3C8  +
mov [ebp+dwDesiredAccess] 40000000h +
jmp loc_102F3C8  +
mov [ebp+dwDesiredAccess] ecx +
mov eax [ebp+arg_C] +
sub eax edi +
jz loc_102F402  +
sub eax edi +
jz loc_102F3F9  +
sub eax edi +
jz loc_102F3F0  +
sub eax edi +
jz loc_102F3EB  +
sub eax 40h +
jnz loc_102F38D  +
cmp [ebp+dwDesiredAccess] ecx +
setz al  +
mov [ebp+dwShareMode] eax +
jmp loc_102F405  +
mov [ebp+dwShareMode] edx +
jmp loc_102F405  +
mov [ebp+dwShareMode] 2 +
jmp loc_102F405  +
mov [ebp+dwShareMode] 1 +
jmp loc_102F405  +
mov [ebp+dwShareMode] ebx +
mov eax [ebp+arg_8] +
mov edx 700h +
and eax edx +
mov ecx 400h +
cmp eax ecx +
jg loc_102F456  +
jz loc_102F44D  +
cmp eax ebx +
jz loc_102F44D  +
cmp eax 100h +
jz loc_102F444  +
cmp eax 200h +
jz loc_102F4C9  +
cmp eax 300h +
jnz loc_102F38D  +
mov [ebp+dwCreationDisposition] 2 +
jmp loc_102F473  +
mov [ebp+dwCreationDisposition] 4 +
jmp loc_102F473  +
mov [ebp+dwCreationDisposition] 3 +
jmp loc_102F473  +
cmp eax 500h +
jz loc_102F46C  +
cmp eax 600h +
jz loc_102F4C9  +
cmp eax edx +
jnz loc_102F38D  +
mov [ebp+dwCreationDisposition] 1 +
mov ecx [ebp+arg_8] +
mov eax 100h +
mov edi 80h +
test ecx eax +
jz loc_102F496  +
mov edx dword_1064C08 +
not edx  +
and edx [ebp+arg_10] +
test dl dl +
js loc_102F496  +
xor edi edi +
inc edi  +
test cl 40h +
jz loc_102F4B2  +
or [ebp+dwDesiredAccess] 10000h +
or edi 4000000h +
cmp [ebp+var_18] 2 +
jnz loc_102F4B2  +
or [ebp+dwShareMode] 4 +
test ecx 1000h +
jz loc_102F4BC  +
or edi eax +
test cl 20h +
jz loc_102F4D2  +
or edi 8000000h +
jmp loc_102F4DD  +
mov [ebp+dwCreationDisposition] 5 +
jmp loc_102F473  +
test cl 10h +
jz loc_102F4DD  +
or edi 10000000h +
call sub_102EFB3  +
mov [esi] eax +
cmp eax 0FFFFFFFFh +
jnz loc_102F500  +
call sub_1025036  +
mov [eax] ebx +
or dword ptr [esi] 0FFFFFFFFh +
call sub_102501E  +
mov dword ptr [eax] 18h +
jmp loc_102F550  +
mov eax [ebp+arg_0] +
push ebx  +
push edi  +
push [ebp+dwCreationDisposition]  +
mov dword ptr [eax] 1 +
lea eax [ebp+SecurityAttributes] +
push eax  +
push [ebp+dwShareMode]  +
push [ebp+dwDesiredAccess]  +
push [ebp+lpFileName]  +
call ds:CreateFileW  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jnz loc_102F55C  +
mov esi [esi] +
mov eax esi +
and esi 1Fh +
imul esi esi +
sar eax 5 +
mov eax dword_1066D40[eax*4] +
lea eax [eax+esi+4] +
and byte ptr [eax] 0FEh +
call ds:GetLastError  +
push eax  +
call sub_102504E  +
pop ecx  +
call sub_102501E  +
mov eax [eax] +
jmp loc_102F92C  +
push edi  +
call ds:GetFileType  +
cmp eax ebx +
jnz loc_102F58B  +
mov esi [esi] +
mov eax esi +
and esi 1Fh +
imul esi esi +
sar eax 5 +
mov eax dword_1066D40[eax*4] +
lea eax [eax+esi+4] +
and byte ptr [eax] 0FEh +
push edi  +
call ds:CloseHandle  +
jmp loc_102F543  +
cmp eax 2 +
jnz loc_102F596  +
or [ebp+var_1] 40h +
jmp loc_102F59F  +
cmp eax 3 +
jnz loc_102F59F  +
or [ebp+var_1] 8 +
push edi  +
push dword ptr [esi]  +
call sub_102ED39  +
pop ecx  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jnz loc_102F5BD  +
push edi  +
call ds:CloseHandle  +
or eax 0FFFFFFFFh +
jmp loc_102F92C  +
mov eax [esi] +
or [ebp+var_1] 1 +
mov dl [ebp+var_1] +
mov ecx eax +
and eax 1Fh +
imul eax eax +
sar ecx 5 +
mov ecx dword_1066D40[ecx*4] +
mov [ecx+eax+4] dl +
mov eax [esi] +
mov ecx eax +
and eax 1Fh +
imul eax eax +
sar ecx 5 +
mov ecx dword_1066D40[ecx*4] +
lea eax [ecx+eax+8] +
and dword ptr [eax] 0FFFFFFFCh +
mov al dl +
and al 48h +
mov [ebp+var_3] al +
jnz loc_102F685  +
test dl 80h +
jz loc_102F8BC  +
test byte ptr [ebp+arg_8] 2 +
jz loc_102F685  +
push 2  +
or edi 0FFFFFFFFh +
push edi  +
push dword ptr [esi]  +
call sub_1030702  +
add esp 0Ch +
mov [ebp+dwShareMode] eax +
cmp eax edi +
jnz loc_102F643  +
call sub_1025036  +
cmp dword ptr [eax] 83h +
jz loc_102F685  +
push dword ptr [esi]  +
call sub_1029E78  +
jmp loc_102F54F  +
push 1  +
lea eax [ebp+WideCharStr] +
push eax  +
push dword ptr [esi]  +
mov dword ptr [ebp+WideCharStr] ebx +
call sub_102ABFD  +
add esp 0Ch +
test eax eax +
jnz loc_102F675  +
cmp [ebp+WideCharStr] 1Ah +
jnz loc_102F675  +
mov eax [ebp+dwShareMode] +
cdq   +
push edx  +
push eax  +
push dword ptr [esi]  +
call sub_1030547  +
add esp 0Ch +
cmp eax edi +
jz loc_102F637  +
push ebx  +
push ebx  +
push dword ptr [esi]  +
call sub_1030702  +
add esp 0Ch +
cmp eax edi +
jz loc_102F637  +
test [ebp+var_1] 80h +
jz loc_102F8BC  +
mov ecx 74000h +
mov edi 4000h +
test [ebp+arg_8] ecx +
jnz loc_102F6AD  +
mov eax [ebp+var_14] +
and eax ecx +
jnz loc_102F6AA  +
or [ebp+arg_8] edi +
jmp loc_102F6AD  +
or [ebp+arg_8] eax +
mov eax [ebp+arg_8] +
and eax ecx +
cmp eax edi +
jz loc_102F6FA  +
cmp eax 10000h +
jz loc_102F6E6  +
cmp eax 14000h +
jz loc_102F6E6  +
cmp eax 20000h +
jz loc_102F6F4  +
cmp eax 24000h +
jz loc_102F6F4  +
cmp eax 40000h +
jz loc_102F6E0  +
cmp eax 44000h +
jnz loc_102F6FD  +
mov [ebp+var_2] 1 +
jmp loc_102F6FD  +
mov ecx [ebp+arg_8] +
mov eax 301h +
and ecx eax +
cmp ecx eax +
jnz loc_102F6FD  +
mov [ebp+var_2] 2 +
jmp loc_102F6FD  +
mov [ebp+var_2] bl +
test [ebp+arg_8] 70000h +
jz loc_102F8BC  +
test [ebp+var_1] 40h +
mov [ebp+dwShareMode] ebx +
jnz loc_102F8BC  +
mov eax [ebp+dwDesiredAccess] +
mov ecx 0C0000000h +
and eax ecx +
cmp eax 40000000h +
jz loc_102F7BB  +
cmp eax 80000000h +
jz loc_102F77E  +
cmp eax ecx +
jnz loc_102F8BC  +
cmp [ebp+dwCreationDisposition] ebx +
jbe loc_102F8BC  +
cmp [ebp+dwCreationDisposition] 2 +
jbe loc_102F7DA  +
cmp [ebp+dwCreationDisposition] 4 +
ja loc_102F7D0  +
push 2  +
push ebx  +
push ebx  +
push dword ptr [esi]  +
call sub_102C9F2  +
add esp 10h +
or eax edx +
jz loc_102F7DA  +
push ebx  +
push ebx  +
push ebx  +
push dword ptr [esi]  +
call sub_102C9F2  +
and eax edx +
add esp 10h +
cmp eax 0FFFFFFFFh +
jz loc_102F637  +
push 3  +
lea eax [ebp+dwShareMode] +
push eax  +
push dword ptr [esi]  +
call sub_102ABFD  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jz loc_102F637  +
cmp eax 2 +
jz loc_102F830  +
cmp eax 3 +
jnz loc_102F87B  +
cmp [ebp+dwShareMode] 0BFBBEFh +
jnz loc_102F830  +
mov [ebp+var_2] 1 +
jmp loc_102F8BC  +
cmp [ebp+dwCreationDisposition] ebx +
jbe loc_102F8BC  +
cmp [ebp+dwCreationDisposition] 2 +
jbe loc_102F7DA  +
cmp [ebp+dwCreationDisposition] 4 +
jbe loc_102F801  +
cmp [ebp+dwCreationDisposition] 5 +
jnz loc_102F8BC  +
movsx eax [ebp+var_2] +
xor edi edi +
dec eax  +
jz loc_102F889  +
dec eax  +
jnz loc_102F8BC  +
mov [ebp+dwShareMode] 0FEFFh +
mov [ebp+dwDesiredAccess] 2 +
jmp loc_102F897  +
push 2  +
push ebx  +
push ebx  +
push dword ptr [esi]  +
call sub_102C9F2  +
add esp 10h +
or eax edx +
jz loc_102F7DA  +
push ebx  +
push ebx  +
push ebx  +
push dword ptr [esi]  +
call sub_102C9F2  +
add esp 10h +
and eax edx +
cmp eax 0FFFFFFFFh +
jnz loc_102F8BC  +
jmp loc_102F637  +
mov eax [ebp+dwShareMode] +
and eax 0FFFFh +
cmp eax 0FFFEh +
jnz loc_102F858  +
push dword ptr [esi]  +
call sub_1029E78  +
pop ecx  +
call sub_102501E  +
push 16h  +
pop esi  +
mov [eax] esi +
mov eax esi +
jmp loc_102F92C  +
cmp eax 0FEFFh +
jnz loc_102F87B  +
push ebx  +
push 2  +
push dword ptr [esi]  +
call sub_1030702  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jz loc_102F637  +
mov [ebp+var_2] 2 +
jmp loc_102F8BC  +
push ebx  +
push ebx  +
push dword ptr [esi]  +
call sub_1030702  +
add esp 0Ch +
jmp loc_102F822  +
mov [ebp+dwShareMode] 0BFBBEFh +
mov [ebp+dwDesiredAccess] 3 +
mov eax [ebp+dwDesiredAccess] +
sub eax edi +
push eax  +
lea eax [ebp+edi+dwShareMode] +
push eax  +
push dword ptr [esi]  +
call sub_102D27B  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jz loc_102F637  +
add edi eax +
cmp [ebp+dwDesiredAccess] edi +
jg loc_102F897  +
mov eax [esi] +
mov ecx eax +
and eax 1Fh +
imul eax eax +
sar ecx 5 +
mov ecx dword_1066D40[ecx*4] +
lea eax [ecx+eax+8] +
movsx ecx [ebp+var_2] +
xor ecx [eax] +
and ecx 3 +
xor [eax] ecx +
mov eax [esi] +
mov ecx eax +
and eax 1Fh +
imul eax eax +
sar ecx 5 +
mov ecx dword_1066D40[ecx*4] +
lea eax [ecx+eax+8] +
mov ecx [ebp+arg_8] +
shr ecx 0Dh +
xor ecx [eax] +
and ecx 8 +
xor [eax] ecx +
cmp [ebp+var_3] bl +
jnz loc_102F92A  +
test byte ptr [ebp+arg_8] 8 +
jz loc_102F92A  +
mov esi [esi] +
mov eax esi +
and esi 1Fh +
imul esi esi +
sar eax 5 +
mov eax dword_1066D40[eax*4] +
lea eax [eax+esi+4] +
or byte ptr [eax] 20h +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
call sub_1022E04  +
cmp [ebp-1Ch] esi +
jz locret_102F9ED  +
cmp [ebp-20h] esi +
jz loc_102F9E5  +
mov eax [edi] +
mov ecx eax +
sar ecx 5 +
and eax 1Fh +
imul eax eax +
mov ecx dword_1066D40[ecx*4] +
lea eax [ecx+eax+4] +
and byte ptr [eax] 0FEh +
push dword ptr [edi]  +
call sub_102EF87  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 1  +
push [ebp+arg_0]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_102F936  +
add esp 18h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 0 +
jnz loc_102FA27  +
xor eax eax +
pop ebp  +
retn   +
mov edx [ebp+arg_4] +
mov ecx [ebp+arg_0] +
dec [ebp+arg_8]  +
jz loc_102FA45  +
movzx eax word ptr [ecx] +
test ax ax +
jz loc_102FA45  +
cmp ax [edx] +
jnz loc_102FA45  +
inc ecx  +
inc ecx  +
inc edx  +
inc edx  +
jmp loc_102FA2D  +
movzx eax word ptr [ecx] +
movzx ecx word ptr [edx] +
sub eax ecx +
pop ebp  +
retn   +
***
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jnz loc_102FA71  +
xor eax eax +
pop ebp  +
retn   +
push 1  +
push 0Ah  +
push 0  +
push [ebp+arg_0]  +
call sub_10300F2  +
add esp 10h +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
push edi  +
push esi  +
push ebx  +
mov esi [ebp+0Ch] +
mov edi [ebp+8] +
mov al 0FFh +
mov edi edi +
or al al +
jz loc_102FAD6  +
mov al [esi] +
add esi 1 +
mov ah [edi] +
add edi 1 +
cmp ah al +
jz loc_102FAA0  +
sub al 41h +
cmp al 1Ah +
sbb cl cl +
and cl 20h +
add al cl +
add al 41h +
xchg ah al +
sub al 41h +
cmp al 1Ah +
sbb cl cl +
and cl 20h +
add al cl +
add al 41h +
cmp al ah +
jz loc_102FAA0  +
sbb al al +
sbb al 0FFh +
movsx eax al +
pop ebx  +
pop esi  +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1063194 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
xor esi esi +
cmp dword_1064260 esi +
jz loc_102FB4F  +
cmp dword_10642E4 0FFFFFFFEh +
jnz loc_102FB0E  +
call sub_1030A36  +
mov eax dword_10642E4 +
cmp eax 0FFFFFFFFh +
jnz loc_102FB1F  +
mov eax 0FFFFh +
jmp loc_102FB8F  +
push esi  +
lea ecx [ebp+NumberOfCharsWritten] +
push ecx  +
push 1  +
lea ecx [ebp+WideCharStr] +
push ecx  +
push eax  +
call ds:WriteConsoleW  +
test eax eax +
jnz loc_102FB9C  +
cmp dword_1064260 2 +
jnz loc_102FB18  +
call ds:GetLastError  +
cmp eax 78h +
jnz loc_102FB18  +
mov dword_1064260 esi +
push esi  +
push esi  +
push 5  +
lea eax [ebp+Buffer] +
push eax  +
push 1  +
lea eax [ebp+WideCharStr] +
push eax  +
push esi  +
call ds:GetConsoleOutputCP  +
push eax  +
call ds:WideCharToMultiByte  +
mov ecx dword_10642E4 +
cmp ecx 0FFFFFFFFh +
jz loc_102FB18  +
push esi  +
lea edx [ebp+NumberOfCharsWritten] +
push edx  +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
push ecx  +
call ds:WriteConsoleA  +
test eax eax +
jz loc_102FB18  +
mov ax [ebp+WideCharStr] +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1021557  +
leave   +
retn   +
mov dword_1064260 1 +
jmp loc_102FB8B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_4] +
push esi  +
call sub_102A027  +
mov [ebp+arg_4] eax +
mov eax [esi+0Ch] +
pop ecx  +
test al 82h +
jnz loc_102FBE1  +
call sub_102501E  +
mov dword ptr [eax] 9 +
or dword ptr [esi+0Ch] 20h +
mov eax 0FFFFh +
jmp loc_102FD17  +
test al 40h +
jz loc_102FBF2  +
call sub_102501E  +
mov dword ptr [eax] 22h +
jmp loc_102FBD3  +
push ebx  +
xor ebx ebx +
test al 1 +
jz loc_102FC0F  +
mov [esi+4] ebx +
test al 10h +
jz loc_102FC84  +
mov ecx [esi+8] +
and eax 0FFFFFFFEh +
mov [esi] ecx +
mov [esi+0Ch] eax +
mov eax [esi+0Ch] +
and eax 0FFFFFFEFh +
or eax 2 +
mov [esi+0Ch] eax +
mov [esi+4] ebx +
mov [ebp+var_4] ebx +
test eax 10Ch +
jnz loc_102FC4C  +
cmp esi offset unk_1063C30 +
jz loc_102FC38  +
cmp esi offset unk_1063C50 +
jnz loc_102FC45  +
push [ebp+arg_4]  +
call sub_102D3B0  +
pop ecx  +
test eax eax +
jnz loc_102FC4C  +
push esi  +
call sub_102D35C  +
pop ecx  +
test dword ptr [esi+0Ch] 108h +
push edi  +
jz loc_102FCE1  +
mov eax [esi+8] +
mov edi [esi] +
lea ecx [eax+2] +
mov [esi] ecx +
mov ecx [esi+18h] +
sub edi eax +
dec ecx  +
dec ecx  +
cmp edi ebx +
mov [esi+4] ecx +
jle loc_102FC94  +
push edi  +
push eax  +
push [ebp+arg_4]  +
call sub_102D27B  +
add esp 0Ch +
mov [ebp+var_4] eax +
jmp loc_102FCD6  +
or eax 20h +
mov [esi+0Ch] eax +
mov eax 0FFFFh +
jmp loc_102FD16  +
mov ecx [ebp+arg_4] +
cmp ecx 0FFFFFFFFh +
jz loc_102FCB7  +
cmp ecx 0FFFFFFFEh +
jz loc_102FCB7  +
mov eax ecx +
and eax 1Fh +
imul eax eax +
mov edx ecx +
sar edx 5 +
add eax dword_1066D40[edx*4] +
jmp loc_102FCBC  +
mov eax offset unk_10632E8 +
test byte ptr [eax+4] 20h +
jz loc_102FCD6  +
push 2  +
push ebx  +
push ebx  +
push ecx  +
call sub_102CA7C  +
and eax edx +
add esp 10h +
cmp eax 0FFFFFFFFh +
jz loc_102FD03  +
mov eax [esi+8] +
mov ebx [ebp+arg_0] +
mov [eax] bx +
jmp loc_102FCFE  +
mov ebx [ebp+arg_0] +
push 2  +
pop edi  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_4]  +
mov word ptr [ebp+var_4] bx +
call sub_102D27B  +
add esp 0Ch +
mov [ebp+var_4] eax +
cmp [ebp+var_4] edi +
jz loc_102FD0E  +
or dword ptr [esi+0Ch] 20h +
mov eax 0FFFFh +
jmp loc_102FD15  +
mov eax ebx +
and eax 0FFFFh +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov esi [ebp+UsedDefaultChar] +
xor ebx ebx +
push edi  +
mov edi [ebp+arg_8] +
cmp esi ebx +
jnz loc_102FD4A  +
cmp edi ebx +
jbe loc_102FD4A  +
mov eax [ebp+arg_0] +
cmp eax ebx +
jz loc_102FD43  +
mov [eax] ebx +
xor eax eax +
jmp loc_102FDCD  +
mov eax [ebp+arg_0] +
cmp eax ebx +
jz loc_102FD54  +
or dword ptr [eax] 0FFFFFFFFh +
cmp edi 7FFFFFFFh +
jbe loc_102FD77  +
call sub_102501E  +
push 16h  +
pop esi  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov [eax] esi +
call sub_1024FC5  +
add esp 14h +
mov eax esi +
jmp loc_102FDCD  +
push [ebp+arg_10]  +
lea ecx [ebp+var_10] +
call sub_102160E  +
mov eax [ebp+var_10] +
cmp [eax+14h] ebx +
jnz loc_102FE2A  +
mov ax [ebp+WideCharStr] +
mov ecx 0FFh +
cmp ax cx +
jbe loc_102FDD2  +
cmp esi ebx +
jz loc_102FDAF  +
cmp edi ebx +
jbe loc_102FDAF  +
push edi  +
push ebx  +
push esi  +
call sub_10219E0  +
add esp 0Ch +
call sub_102501E  +
mov dword ptr [eax] 2Ah +
call sub_102501E  +
mov eax [eax] +
cmp [ebp+var_4] bl +
jz loc_102FDCD  +
mov ecx [ebp+var_8] +
and dword ptr [ecx+70h] 0FFFFFFFDh +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
cmp esi ebx +
jz loc_102FE08  +
cmp edi ebx +
ja loc_102FE06  +
call sub_102501E  +
push 22h  +
pop esi  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov [eax] esi +
call sub_1024FC5  +
add esp 14h +
cmp [ebp+var_4] bl +
jz loc_102FD73  +
mov eax [ebp+var_8] +
and dword ptr [eax+70h] 0FFFFFFFDh +
jmp loc_102FD73  +
mov [esi] al +
mov eax [ebp+arg_0] +
cmp eax ebx +
jz loc_102FE15  +
mov dword ptr [eax] 1 +
cmp [ebp+var_4] bl +
jz loc_102FD43  +
mov eax [ebp+var_8] +
and dword ptr [eax+70h] 0FFFFFFFDh +
jmp loc_102FD43  +
lea ecx [ebp+UsedDefaultChar] +
push ecx  +
push ebx  +
push edi  +
push esi  +
push 1  +
lea ecx [ebp+WideCharStr] +
push ecx  +
push ebx  +
mov [ebp+UsedDefaultChar] ebx +
push dword ptr [eax+4]  +
call ds:WideCharToMultiByte  +
cmp eax ebx +
jz loc_102FE5C  +
cmp [ebp+UsedDefaultChar] ebx +
jnz loc_102FDAF  +
mov ecx [ebp+arg_0] +
cmp ecx ebx +
jz loc_102FE15  +
mov [ecx] eax +
jmp loc_102FE15  +
call ds:GetLastError  +
cmp eax 7Ah +
jnz loc_102FDAF  +
cmp esi ebx +
jz loc_102FDDA  +
cmp edi ebx +
jbe loc_102FDDA  +
push edi  +
push ebx  +
push esi  +
call sub_10219E0  +
add esp 0Ch +
jmp loc_102FDDA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push dword ptr [ebp+WideCharStr]  +
push [ebp+arg_8]  +
push [ebp+UsedDefaultChar]  +
push [ebp+arg_0]  +
call sub_102FD1F  +
add esp 14h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
push edi  +
push [ebp+arg_0]  +
lea ecx [ebp+var_14] +
call sub_102160E  +
mov eax [ebp+arg_8] +
mov esi [ebp+arg_4] +
xor edi edi +
cmp eax edi +
jz loc_102FED5  +
mov [eax] esi +
cmp esi edi +
jnz loc_102FF05  +
call sub_102501E  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
mov dword ptr [eax] 16h +
call sub_1024FC5  +
add esp 14h +
cmp [ebp+var_8] 0 +
jz loc_102FEFE  +
mov eax [ebp+var_C] +
and dword ptr [eax+70h] 0FFFFFFFDh +
xor eax eax +
jmp loc_10300E9  +
cmp [ebp+arg_C] edi +
jz loc_102FF16  +
cmp [ebp+arg_C] 2 +
jl loc_102FED9  +
cmp [ebp+arg_C] 24h +
jg loc_102FED9  +
mov ecx [ebp+var_14] +
push ebx  +
mov bl [esi] +
mov [ebp+var_4] edi +
lea edi [esi+1] +
cmp dword ptr [ecx+0ACh] 1 +
jle loc_102FF42  +
lea eax [ebp+var_14] +
push eax  +
movzx eax bl +
push 8  +
push eax  +
call sub_1030A8C  +
mov ecx [ebp+var_14] +
add esp 0Ch +
jmp loc_102FF52  +
mov edx [ecx+0C8h] +
movzx eax bl +
movzx eax word ptr [edx+eax*2] +
and eax 8 +
test eax eax +
jz loc_102FF5B  +
mov bl [edi] +
inc edi  +
jmp loc_102FF22  +
cmp bl 2Dh +
jnz loc_102FF66  +
or [ebp+arg_10] 2 +
jmp loc_102FF6B  +
cmp bl 2Bh +
jnz loc_102FF6E  +
mov bl [edi] +
inc edi  +
mov eax [ebp+arg_C] +
test eax eax +
jl loc_10300D0  +
cmp eax 1 +
jz loc_10300D0  +
cmp eax 24h +
jg loc_10300D0  +
test eax eax +
jnz loc_102FFB9  +
cmp bl 30h +
jz loc_102FF9D  +
mov [ebp+arg_C] 0Ah +
jmp loc_102FFD1  +
mov al [edi] +
cmp al 78h +
jz loc_102FFB0  +
cmp al 58h +
jz loc_102FFB0  +
mov [ebp+arg_C] 8 +
jmp loc_102FFD1  +
mov [ebp+arg_C] 10h +
jmp loc_102FFC3  +
cmp eax 10h +
jnz loc_102FFD1  +
cmp bl 30h +
jnz loc_102FFD1  +
mov al [edi] +
cmp al 78h +
jz loc_102FFCD  +
cmp al 58h +
jnz loc_102FFD1  +
inc edi  +
mov bl [edi] +
inc edi  +
mov esi [ecx+0C8h] +
mov eax 0FFFFFFFFh +
xor edx edx +
div  [ebp+arg_C] +
movzx ecx bl +
movzx ecx word ptr [esi+ecx*2] +
test cl 4 +
jz loc_102FFF5  +
movsx ecx bl +
sub ecx 30h +
jmp loc_1030010  +
test ecx 103h +
jz loc_1030034  +
mov cl bl +
sub cl 61h +
cmp cl 19h +
movsx ecx bl +
ja loc_103000D  +
sub ecx 20h +
add ecx 0FFFFFFC9h +
cmp ecx [ebp+arg_C] +
jnb loc_1030034  +
or [ebp+arg_10] 8 +
cmp [ebp+arg_14] 0 +
jnz loc_103004B  +
cmp [ebp+var_4] eax +
jb loc_103004B  +
jnz loc_103002A  +
cmp ecx edx +
jbe loc_103004B  +
or [ebp+arg_10] 4 +
cmp [ebp+arg_8] 0 +
jnz loc_1030057  +
mov eax [ebp+arg_10] +
dec edi  +
test al 8 +
jnz loc_103005C  +
cmp [ebp+arg_8] 0 +
jz loc_1030045  +
mov edi [ebp+arg_4] +
and [ebp+var_4] 0 +
jmp loc_10300AC  +
mov ebx [ebp+var_4] +
imul ebx [ebp+arg_C] +
add ebx ecx +
mov [ebp+var_4] ebx +
mov bl [edi] +
inc edi  +
jmp loc_102FFE1  +
mov esi 7FFFFFFFh +
test al 4 +
jnz loc_1030080  +
test al 1 +
jnz loc_10300AC  +
and eax 2 +
jz loc_1030077  +
cmp [ebp+var_4] 80000000h +
ja loc_1030080  +
test eax eax +
jnz loc_10300AC  +
cmp [ebp+var_4] esi +
jbe loc_10300AC  +
cmp [ebp+arg_14] 0 +
jnz loc_10300AC  +
call sub_102501E  +
test byte ptr [ebp+arg_10] 1 +
mov dword ptr [eax] 22h +
jz loc_103009D  +
or [ebp+var_4] 0FFFFFFFFh +
jmp loc_10300AC  +
test byte ptr [ebp+arg_10] 2 +
push 0  +
pop eax  +
setnz al  +
add eax esi +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_10300B5  +
mov [eax] edi +
test byte ptr [ebp+arg_10] 2 +
jz loc_10300BE  +
neg [ebp+var_4]  +
cmp [ebp+var_8] 0 +
jz loc_10300CB  +
mov eax [ebp+var_C] +
and dword ptr [eax+70h] 0FFFFFFFDh +
mov eax [ebp+var_4] +
jmp loc_10300E8  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_10300D9  +
mov [eax] esi +
cmp [ebp+var_8] 0 +
jz loc_10300E6  +
mov eax [ebp+var_C] +
and dword ptr [eax+70h] 0FFFFFFFDh +
xor eax eax +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
xor eax eax +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
cmp dword_1065630 eax +
jnz loc_1030115  +
push offset off_1063BC0  +
jmp loc_1030116  +
push eax  +
call sub_102FEB2  +
add esp 18h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
xor ebx ebx +
cmp [ebp+arg_8] ebx +
jnz loc_1030152  +
call sub_102501E  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov dword ptr [eax] 16h +
call sub_1024FC5  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_10301D1  +
mov ecx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
cmp ecx ebx +
jz loc_103017E  +
cmp esi ebx +
jnz loc_103017E  +
call sub_102501E  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov dword ptr [eax] 16h +
call sub_1024FC5  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_10301D0  +
mov eax 7FFFFFFFh +
mov [ebp+var_1C] eax +
cmp ecx eax +
ja loc_103018D  +
mov [ebp+var_1C] ecx +
push edi  +
lea eax [ebp+arg_C] +
push eax  +
push ebx  +
push [ebp+arg_8]  +
lea eax [ebp+var_20] +
push eax  +
mov [ebp+var_14] 42h +
mov [ebp+var_18] esi +
mov [ebp+var_20] esi +
call sub_102D892  +
add esp 10h +
mov edi eax +
cmp esi ebx +
jz loc_10301CF  +
dec [ebp+var_1C]  +
js loc_10301C1  +
mov eax [ebp+var_20] +
mov [eax] bl +
jmp loc_10301CD  +
lea eax [ebp+var_20] +
push eax  +
push ebx  +
call sub_1026F08  +
pop ecx  +
pop ecx  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
jz loc_10301EA  +
mov byte ptr [ecx] 2Dh +
inc ecx  +
neg eax  +
push esi  +
mov esi ecx +
xor edx edx +
div  [ebp+arg_0] +
cmp edx 9 +
jbe loc_10301FC  +
add dl 57h +
jmp loc_10301FF  +
add dl 30h +
mov [ecx] dl +
inc ecx  +
test eax eax +
ja loc_10301ED  +
mov byte ptr [ecx] 0 +
dec ecx  +
mov dl [esi] +
mov al [ecx] +
mov [ecx] dl +
dec ecx  +
mov [esi] al +
inc esi  +
cmp esi ecx +
jb loc_103020A  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 0Ah +
mov eax [ebp+arg_0] +
jnz loc_103023A  +
test eax eax +
jge loc_103023A  +
push 1  +
push 0Ah  +
jmp loc_103023F  +
push 0  +
push [ebp+arg_8]  +
mov ecx [ebp+arg_4] +
call sub_10301D9  +
mov eax [ebp+arg_4] +
pop ebp  +
retn   +
***
mov eax offset loc_1031651 +
mov off_1063F90 eax +
mov off_1063F94 offset loc_1030D0B +
mov off_1063F98 offset loc_1030CB0 +
mov off_1063F9C offset loc_1030CF3 +
mov off_1063FA0 offset loc_1030C48 +
mov off_1063FA4 eax +
mov off_1063FA8 offset sub_10315C4 +
mov off_1063FAC offset sub_1030C69 +
mov off_1063FB0 offset sub_1030BC1 +
mov off_1063FB4 offset sub_1030B49 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
call sub_1030251  +
cmp [ebp+arg_0] 0 +
jz loc_10302CB  +
call sub_1031679  +
fnclex   +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_1063194 +
xor eax ebp +
mov [ebp+var_4] eax +
cmp [ebp+cchWideChar] 0FFFFFFFFh +
push ebx  +
push esi  +
push edi  +
jge loc_10302F6  +
xor eax eax +
jmp loc_10304EB  +
mov eax dword_10657AC +
mov esi ds:GetStringTypeW +
xor edi edi +
xor ebx ebx +
inc edi  +
cmp eax ebx +
jnz loc_103033D  +
lea eax [ebp+lpSrcStr] +
push eax  +
push edi  +
push offset SrcStr  +
push edi  +
call esi  +
test eax eax +
jz loc_1030323  +
mov dword_10657AC edi +
jmp loc_1030341  +
call ds:GetLastError  +
cmp eax 78h +
jnz loc_1030338  +
push 2  +
pop eax  +
mov dword_10657AC eax +
jmp loc_103033D  +
mov eax dword_10657AC +
cmp eax edi +
jnz loc_1030354  +
push [ebp+lpCharType]  +
push [ebp+cchWideChar]  +
push [ebp+lpWideCharStr]  +
push [ebp+dwInfoType]  +
call esi  +
jmp loc_10304EB  +
cmp eax 2 +
jz loc_103035D  +
cmp eax ebx +
jnz loc_10302EF  +
mov [ebp+var_10] ebx +
cmp [ebp+Locale] ebx +
jnz loc_1030370  +
mov eax [ebp+arg_0] +
mov eax [eax] +
mov eax [eax+14h] +
mov [ebp+Locale] eax +
cmp [ebp+CodePage] ebx +
jnz loc_1030380  +
mov eax [ebp+arg_0] +
mov eax [eax] +
mov eax [eax+4] +
mov [ebp+CodePage] eax +
push [ebp+Locale]  +
call sub_102C7E5  +
pop ecx  +
cmp [ebp+CodePage] eax +
jz loc_1030396  +
cmp eax 0FFFFFFFFh +
jz loc_1030396  +
mov [ebp+CodePage] eax +
mov edi ds:WideCharToMultiByte +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+cchWideChar]  +
push [ebp+lpWideCharStr]  +
push ebx  +
push [ebp+CodePage]  +
call edi  +
mov esi eax +
mov [ebp+cchSrc] esi +
cmp esi ebx +
jz loc_10302EF  +
jle loc_10303F6  +
cmp esi 0FFFFFFE0h +
ja loc_10303F6  +
lea eax [esi+8] +
cmp eax 400h +
ja loc_10303DD  +
call sub_10236D0  +
mov eax esp +
cmp eax ebx +
jz loc_10303F1  +
mov dword ptr [eax] 0CCCCh +
jmp loc_10303EE  +
push eax  +
call sub_1021488  +
pop ecx  +
cmp eax ebx +
jz loc_10303F1  +
mov dword ptr [eax] 0DDDDh +
add eax 8 +
mov [ebp+lpSrcStr] eax +
jmp loc_10303F9  +
mov [ebp+lpSrcStr] ebx +
cmp [ebp+lpSrcStr] ebx +
jz loc_10302EF  +
push esi  +
push ebx  +
push [ebp+lpSrcStr]  +
call sub_10219E0  +
add esp 0Ch +
push ebx  +
push ebx  +
push esi  +
push [ebp+lpSrcStr]  +
push [ebp+cchWideChar]  +
push [ebp+lpWideCharStr]  +
push ebx  +
push [ebp+CodePage]  +
call edi  +
test eax eax +
jz loc_10304DF  +
lea eax [esi+1] +
cmp eax ebx +
jle loc_103046E  +
cmp eax 7FFFFFF0h +
ja loc_103046E  +
lea eax [esi+esi+0Ah] +
cmp eax 400h +
ja loc_1030455  +
call sub_10236D0  +
mov eax esp +
cmp eax ebx +
jz loc_1030469  +
mov dword ptr [eax] 0CCCCh +
jmp loc_1030466  +
push eax  +
call sub_1021488  +
pop ecx  +
cmp eax ebx +
jz loc_1030469  +
mov dword ptr [eax] 0DDDDh +
add eax 8 +
mov [ebp+var_C] eax +
jmp loc_1030471  +
mov [ebp+var_C] ebx +
mov eax [ebp+var_C] +
cmp eax ebx +
jz loc_10304DF  +
cmp [ebp+Locale] ebx +
jnz loc_1030488  +
mov ecx [ebp+arg_0] +
mov ecx [ecx] +
mov ecx [ecx+14h] +
mov [ebp+Locale] ecx +
mov ebx [ebp+cchWideChar] +
push eax  +
push [ebp+cchSrc]  +
add ebx ebx +
push [ebp+lpSrcStr]  +
lea esi [ebx+eax] +
push [ebp+dwInfoType]  +
mov edi 0FFFFh +
push [ebp+Locale]  +
mov ecx edi +
mov [esi] cx +
mov [esi-2] cx +
call ds:GetStringTypeA  +
mov [ebp+var_10] eax +
mov eax edi +
cmp [esi-2] ax +
jz loc_10304D2  +
cmp [esi] di +
jnz loc_10304D2  +
push ebx  +
push [ebp+var_C]  +
push [ebp+lpCharType]  +
call loc_1025EB0  +
add esp 0Ch +
jmp loc_10304D6  +
and [ebp+var_10] 0 +
push [ebp+var_C]  +
call sub_10215E9  +
pop ecx  +
push [ebp+lpSrcStr]  +
call sub_10215E9  +
mov eax [ebp+var_10] +
pop ecx  +
lea esp [ebp-20h] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1021557  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push [ebp+arg_0]  +
lea ecx [ebp+var_10] +
call sub_102160E  +
push [ebp+Locale]  +
lea eax [ebp+var_10] +
push [ebp+CodePage]  +
push [ebp+lpCharType]  +
push [ebp+cchWideChar]  +
push [ebp+lpWideCharStr]  +
push [ebp+dwInfoType]  +
push eax  +
call sub_10302D4  +
add esp 1Ch +
cmp [ebp+var_4] 0 +
jz locret_1030540  +
mov ecx [ebp+var_8] +
and dword ptr [ecx+70h] 0FFFFFFFDh +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
push 1  +
push ebx  +
push ebx  +
push [ebp+arg_0]  +
mov [ebp+var_10] ebx +
mov [ebp+var_C] ebx +
call sub_102C9F2  +
mov [ebp+var_18] eax +
and eax edx +
add esp 10h +
mov [ebp+var_14] edx +
cmp eax 0FFFFFFFFh +
jz loc_10305CF  +
push 2  +
push ebx  +
push ebx  +
push [ebp+arg_0]  +
call sub_102C9F2  +
mov ecx eax +
and ecx edx +
add esp 10h +
cmp ecx 0FFFFFFFFh +
jz loc_10305CF  +
mov esi [ebp+arg_4] +
mov edi [ebp+arg_8] +
sub esi eax +
sbb edi edx +
js loc_1030664  +
jg loc_10305A8  +
cmp esi ebx +
jbe loc_1030664  +
mov ebx 1000h +
push ebx  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+lpMem] eax +
test eax eax +
jnz loc_10305DB  +
call sub_102501E  +
mov dword ptr [eax] 0Ch +
call sub_102501E  +
mov eax [eax] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
push 8000h  +
push [ebp+arg_0]  +
call sub_103077C  +
pop ecx  +
pop ecx  +
mov [ebp+var_8] eax +
test edi edi +
jl loc_10305FB  +
jg loc_10305F7  +
cmp esi ebx +
jb loc_10305FB  +
mov eax ebx +
jmp loc_10305FD  +
mov eax esi +
push eax  +
push [ebp+lpMem]  +
push [ebp+arg_0]  +
call sub_102CB9A  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jz loc_1030647  +
cdq   +
sub esi eax +
sbb edi edx +
js loc_103061E  +
jg loc_10305ED  +
test esi esi +
ja loc_10305ED  +
mov esi [ebp+var_10] +
push [ebp+var_8]  +
push [ebp+arg_0]  +
call sub_103077C  +
pop ecx  +
pop ecx  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
xor ebx ebx +
jmp loc_10306CD  +
call sub_1025036  +
cmp dword ptr [eax] 5 +
jnz loc_103065C  +
call sub_102501E  +
mov dword ptr [eax] 0Dh +
or esi 0FFFFFFFFh +
mov [ebp+var_C] esi +
jmp loc_1030621  +
cmp edi ebx +
jg loc_10306D9  +
jl loc_103066E  +
cmp esi ebx +
jnb loc_10306D9  +
push ebx  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_102C9F2  +
and eax edx +
add esp 10h +
cmp eax 0FFFFFFFFh +
jz loc_10305CF  +
push [ebp+arg_0]  +
call sub_102EE4A  +
pop ecx  +
push eax  +
call ds:SetEndOfFile  +
neg eax  +
sbb eax eax +
neg eax  +
dec eax  +
cdq   +
mov [ebp+var_10] eax +
and eax edx +
mov [ebp+var_C] edx +
cmp eax 0FFFFFFFFh +
jnz loc_10306D9  +
call sub_102501E  +
mov dword ptr [eax] 0Dh +
call sub_1025036  +
mov esi eax +
call ds:GetLastError  +
mov [esi] eax +
mov esi [ebp+var_10] +
and esi [ebp+var_C] +
cmp esi 0FFFFFFFFh +
jz loc_10305CF  +
push ebx  +
push [ebp+var_14]  +
push [ebp+var_18]  +
push [ebp+arg_0]  +
call sub_102C9F2  +
and eax edx +
add esp 10h +
cmp eax 0FFFFFFFFh +
jz loc_10305CF  +
xor eax eax +
jmp loc_10305D6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push esi  +
call sub_102EE4A  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jnz loc_1030727  +
call sub_102501E  +
mov dword ptr [eax] 9 +
or eax 0FFFFFFFFh +
jmp loc_1030774  +
push edi  +
push [ebp+dwMoveMethod]  +
push 0  +
push [ebp+lDistanceToMove]  +
push eax  +
call ds:SetFilePointer  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jnz loc_1030746  +
call ds:GetLastError  +
jmp loc_1030748  +
xor eax eax +
test eax eax +
jz loc_1030758  +
push eax  +
call sub_102504E  +
pop ecx  +
or eax 0FFFFFFFFh +
jmp loc_1030773  +
mov eax esi +
and esi 1Fh +
imul esi esi +
sar eax 5 +
mov eax dword_1066D40[eax*4] +
lea eax [eax+esi+4] +
and byte ptr [eax] 0FDh +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax edx +
and edx 1Fh +
imul edx edx +
sar eax 5 +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
lea esi dword_1066D40[eax*4] +
mov eax [esi] +
lea ecx [eax+edx] +
mov eax [ecx+8] +
push edi  +
movzx edi byte ptr [ecx+4] +
and edi 80h +
and eax 3 +
cmp ebx 4000h +
jz loc_1030809  +
cmp ebx 8000h +
jz loc_1030803  +
cmp ebx 10000h +
jz loc_10307EF  +
cmp ebx 20000h +
jz loc_10307EF  +
cmp ebx 40000h +
jnz loc_1030816  +
or byte ptr [ecx+4] 80h +
mov ecx [esi] +
lea ecx [ecx+edx+8] +
mov edx [ecx] +
and edx 0FFFFFFFDh +
or edx 1 +
mov [ecx] edx +
jmp loc_1030816  +
or byte ptr [ecx+4] 80h +
mov ecx [esi] +
lea ecx [ecx+edx+8] +
mov edx [ecx] +
and edx 0FFFFFFFEh +
or edx 2 +
jmp loc_10307EB  +
and byte ptr [ecx+4] 7Fh +
jmp loc_1030816  +
or byte ptr [ecx+4] 80h +
mov ecx [esi] +
lea ecx [ecx+edx+8] +
and dword ptr [ecx] 0FFFFFFFCh +
test edi edi +
pop edi  +
pop esi  +
pop ebx  +
jnz loc_1030824  +
mov eax 8000h +
pop ebp  +
retn   +
neg eax  +
sbb eax eax +
and eax 0C000h +
add eax 4000h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
xor esi esi +
cmp eax esi +
jnz loc_1030865  +
call sub_102501E  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_1024FC5  +
add esp 14h +
push 16h  +
pop eax  +
jmp loc_103086F  +
mov ecx dword_10657B0 +
mov [eax] ecx +
xor eax eax +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
push [ebp+arg_4]  +
lea ecx [ebp+var_18] +
call sub_102160E  +
mov ebx [ebp+arg_0] +
mov esi 100h +
cmp ebx esi +
jnb loc_10308EC  +
mov ecx [ebp+var_18] +
cmp dword ptr [ecx+0ACh] 1 +
jle loc_10308B8  +
lea eax [ebp+var_18] +
push eax  +
push 1  +
push ebx  +
call sub_1030A8C  +
mov ecx [ebp+var_18] +
add esp 0Ch +
jmp loc_10308C5  +
mov eax [ecx+0C8h] +
movzx eax word ptr [eax+ebx*2] +
and eax 1 +
test eax eax +
jz loc_10308D8  +
mov eax [ecx+0CCh] +
movzx eax byte ptr [eax+ebx] +
jmp loc_103097B  +
cmp [ebp+var_C] 0 +
jz loc_10308E5  +
mov eax [ebp+var_10] +
and dword ptr [eax+70h] 0FFFFFFFDh +
mov eax ebx +
jmp loc_1030988  +
mov eax [ebp+var_18] +
cmp dword ptr [eax+0ACh] 1 +
jle loc_1030929  +
mov [ebp+arg_0] ebx +
sar [ebp+arg_0] 8 +
lea eax [ebp+var_18] +
push eax  +
mov eax [ebp+arg_0] +
and eax 0FFh +
push eax  +
call sub_102D755  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1030929  +
mov al byte ptr [ebp+arg_0] +
push 2  +
mov [ebp+var_4] al +
mov [ebp-3] bl +
mov [ebp+var_2] 0 +
pop ecx  +
jmp loc_103093E  +
call sub_102501E  +
mov dword ptr [eax] 2Ah +
xor ecx ecx +
mov [ebp+var_4] bl +
mov byte ptr [ebp-3] 0 +
inc ecx  +
mov eax [ebp+var_18] +
push 1  +
push dword ptr [eax+4]  +
lea edx [ebp+var_8] +
push 3  +
push edx  +
push ecx  +
lea ecx [ebp+var_4] +
push ecx  +
push esi  +
push dword ptr [eax+14h]  +
lea eax [ebp+var_18] +
push eax  +
call sub_102BF43  +
add esp 24h +
test eax eax +
jz loc_10308D8  +
cmp eax 1 +
movzx eax byte ptr [ebp+var_8] +
jz loc_103097B  +
movzx ecx byte ptr [ebp+var_8+1] +
shl eax 8 +
or eax ecx +
cmp [ebp+var_C] 0 +
jz loc_1030988  +
mov ecx [ebp+var_10] +
and dword ptr [ecx+70h] 0FFFFFFFDh +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_1065630 0 +
jnz loc_10309AF  +
mov eax [ebp+arg_0] +
lea ecx [eax-41h] +
cmp ecx 19h +
ja loc_10309BB  +
add eax 20h +
pop ebp  +
retn   +
push 0  +
push [ebp+arg_0]  +
call sub_1030877  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
push edi  +
push esi  +
push ebx  +
mov ecx [ebp+10h] +
or ecx ecx +
jz loc_1030A2A  +
mov esi [ebp+8] +
mov edi [ebp+0Ch] +
mov bh 41h +
mov bl 5Ah +
mov dh 20h +
lea ecx [ecx+0] +
mov ah [esi] +
or ah ah +
mov al [edi] +
jz loc_1030A1B  +
or al al +
jz loc_1030A1B  +
add esi 1 +
add edi 1 +
cmp ah bh +
jb loc_1030A08  +
cmp ah bl +
ja loc_1030A08  +
add ah dh +
cmp al bh +
jb loc_1030A12  +
cmp al bl +
ja loc_1030A12  +
add al dh +
cmp ah al +
jnz loc_1030A21  +
sub ecx 1 +
jnz loc_10309EC  +
xor ecx ecx +
cmp ah al +
jz loc_1030A2A  +
mov ecx 0FFFFFFFFh +
jb loc_1030A2A  +
neg ecx  +
mov eax ecx +
pop ebx  +
pop esi  +
pop edi  +
leave   +
retn   +
***
xor eax eax +
push eax  +
push eax  +
push 3  +
push eax  +
push 3  +
push 40000000h  +
push offset FileName  +
call ds:CreateFileA  +
mov dword_10642E4 eax +
retn   +
***
mov eax dword_10642E4 +
push esi  +
mov esi ds:CloseHandle +
cmp eax 0FFFFFFFFh +
jz loc_1030A73  +
cmp eax 0FFFFFFFEh +
jz loc_1030A73  +
push eax  +
call esi  +
mov eax dword_10642E0 +
cmp eax 0FFFFFFFFh +
jz loc_1030A85  +
cmp eax 0FFFFFFFEh +
jz loc_1030A85  +
push eax  +
call esi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push [ebp+arg_8]  +
lea ecx [ebp+var_18] +
call sub_102160E  +
mov ebx [ebp+arg_0] +
lea eax [ebx+1] +
cmp eax 100h +
ja loc_1030ABC  +
mov eax [ebp+var_18] +
mov eax [eax+0C8h] +
movzx eax word ptr [eax+ebx*2] +
jmp loc_1030B31  +
mov [ebp+arg_0] ebx +
sar [ebp+arg_0] 8 +
lea eax [ebp+var_18] +
push eax  +
mov eax [ebp+arg_0] +
and eax 0FFh +
push eax  +
call sub_102D755  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1030AED  +
mov al byte ptr [ebp+arg_0] +
push 2  +
mov [ebp+SrcStr] al +
mov [ebp-7] bl +
mov [ebp+var_6] 0 +
pop ecx  +
jmp loc_1030AF7  +
xor ecx ecx +
mov [ebp+SrcStr] bl +
mov byte ptr [ebp-7] 0 +
inc ecx  +
mov eax [ebp+var_18] +
push 1  +
push dword ptr [eax+14h]  +
push dword ptr [eax+4]  +
lea eax [ebp+CharType] +
push eax  +
push ecx  +
lea eax [ebp+SrcStr] +
push eax  +
lea eax [ebp+var_18] +
push 1  +
push eax  +
call sub_102C14D  +
add esp 20h +
test eax eax +
jnz loc_1030B2D  +
cmp [ebp+var_C] al +
jz loc_1030B29  +
mov eax [ebp+var_10] +
and dword ptr [eax+70h] 0FFFFFFFDh +
xor eax eax +
jmp loc_1030B41  +
movzx eax [ebp+CharType] +
and eax [ebp+arg_4] +
cmp [ebp+var_C] 0 +
jz loc_1030B41  +
mov ecx [ebp+var_10] +
and dword ptr [ecx+70h] 0FFFFFFFDh +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push [ebp+arg_4]  +
lea ecx [ebp+var_10] +
call sub_102160E  +
mov esi [ebp+arg_0] +
movsx eax byte ptr [esi] +
push eax  +
call sub_1030991  +
cmp eax 65h +
jmp loc_1030B7A  +
inc esi  +
movzx eax byte ptr [esi] +
push eax  +
call sub_10316E6  +
test eax eax +
pop ecx  +
jnz loc_1030B6E  +
movsx eax byte ptr [esi] +
push eax  +
call sub_1030991  +
pop ecx  +
cmp eax 78h +
jnz loc_1030B8E  +
inc esi  +
inc esi  +
mov ecx [ebp+var_10] +
mov ecx [ecx+0BCh] +
mov ecx [ecx] +
mov al [esi] +
mov cl [ecx] +
mov [esi] cl +
inc esi  +
mov cl [esi] +
mov [esi] al +
mov al cl +
mov cl [esi] +
inc esi  +
test cl cl +
jnz loc_1030BA0  +
pop esi  +
cmp [ebp+var_4] cl +
jz locret_1030BBA  +
mov eax [ebp+var_8] +
and dword ptr [eax+70h] 0FFFFFFFDh +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push [ebp+arg_4]  +
lea ecx [ebp+var_10] +
call sub_102160E  +
mov eax [ebp+arg_0] +
mov cl [eax] +
mov esi [ebp+var_10] +
test cl cl +
jz loc_1030BF6  +
mov edx [esi+0BCh] +
mov edx [edx] +
mov dl [edx] +
cmp cl dl +
jz loc_1030BF6  +
inc eax  +
mov cl [eax] +
test cl cl +
jnz loc_1030BEB  +
mov cl [eax] +
inc eax  +
test cl cl +
jz loc_1030C33  +
jmp loc_1030C0A  +
cmp cl 65h +
jz loc_1030C10  +
cmp cl 45h +
jz loc_1030C10  +
inc eax  +
mov cl [eax] +
test cl cl +
jnz loc_1030BFF  +
mov edx eax +
dec eax  +
cmp byte ptr [eax] 30h +
jz loc_1030C12  +
mov ecx [esi+0BCh] +
mov ecx [ecx] +
push ebx  +
mov bl [eax] +
cmp bl [ecx] +
pop ebx  +
jnz loc_1030C29  +
dec eax  +
mov cl [edx] +
inc eax  +
inc edx  +
mov [eax] cl +
test cl cl +
jnz loc_1030C29  +
cmp [ebp+var_4] 0 +
pop esi  +
jz locret_1030C41  +
mov eax [ebp+var_8] +
and dword ptr [eax+70h] 0FFFFFFFDh +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
fldz   +
mov eax [ebp+8] +
fcomp  qword ptr [eax] +
fnstsw  ax +
test ah 41h +
jp loc_1030C60  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
***
xor eax eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
cmp [ebp+arg_0] 0 +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
jz loc_1030C95  +
lea eax [ebp+var_8] +
push eax  +
call sub_1031722  +
mov ecx [ebp+var_8] +
mov eax [ebp+arg_4] +
mov [eax] ecx +
mov ecx [ebp+var_4] +
mov [eax+4] ecx +
jmp loc_1030CA6  +
lea eax [ebp+arg_0] +
push eax  +
call sub_10317CF  +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
add esp 0Ch +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1030C69  +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push esi  +
mov esi eax +
test edi edi +
jz loc_1030CEC  +
push esi  +
call sub_1031880  +
inc eax  +
push eax  +
push esi  +
add esi edi +
push esi  +
call loc_1025EB0  +
add esp 10h +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push dword ptr [ebp+8]  +
call sub_1030B49  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push dword ptr [ebp+8]  +
call sub_1030BC1  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_14]  +
lea ecx [ebp+var_10] +
mov ebx eax +
call sub_102160E  +
xor esi esi +
cmp ebx esi +
jnz loc_1030D6C  +
call sub_102501E  +
push 16h  +
pop edi  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov [eax] edi +
call sub_1024FC5  +
add esp 14h +
cmp [ebp+var_4] 0 +
jz loc_1030D65  +
mov eax [ebp+var_8] +
and dword ptr [eax+70h] 0FFFFFFFDh +
mov eax edi +
jmp loc_1030E8D  +
cmp [ebp+arg_0] esi +
jbe loc_1030D41  +
cmp [ebp+arg_4] esi +
jle loc_1030D7B  +
mov eax [ebp+arg_4] +
jmp loc_1030D7D  +
xor eax eax +
add eax 9 +
cmp [ebp+arg_0] eax +
ja loc_1030D8E  +
call sub_102501E  +
push 22h  +
jmp loc_1030D48  +
cmp [ebp+arg_10] 0 +
jz loc_1030DB2  +
mov edx [ebp+arg_C] +
xor eax eax +
cmp [ebp+arg_4] esi +
setnle al  +
xor ecx ecx +
cmp dword ptr [edx] 2Dh +
setz cl  +
mov edi eax +
add ecx ebx +
mov eax ecx +
call sub_1030CCF  +
mov edi [ebp+arg_C] +
cmp dword ptr [edi] 2Dh +
mov esi ebx +
jnz loc_1030DC2  +
mov byte ptr [ebx] 2Dh +
lea esi [ebx+1] +
cmp [ebp+arg_4] 0 +
jle loc_1030DE0  +
lea eax [esi+1] +
mov cl [eax] +
mov [esi] cl +
mov esi eax +
mov eax [ebp+var_10] +
mov eax [eax+0BCh] +
mov eax [eax] +
mov al [eax] +
mov [esi] al +
xor eax eax +
cmp [ebp+arg_10] al +
setz al  +
add eax [ebp+arg_4] +
add esi eax +
cmp [ebp+arg_0] 0FFFFFFFFh +
jnz loc_1030DF8  +
or ebx 0FFFFFFFFh +
jmp loc_1030DFD  +
sub ebx esi +
add ebx [ebp+arg_0] +
push offset aE000  +
push ebx  +
push esi  +
call sub_102B860  +
add esp 0Ch +
xor ebx ebx +
test eax eax +
jz loc_1030E1F  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call sub_1024F1A  +
add esp 14h +
lea ecx [esi+2] +
cmp [ebp+arg_8] ebx +
jz loc_1030E2A  +
mov byte ptr [esi] 45h +
mov eax [edi+0Ch] +
inc esi  +
cmp byte ptr [eax] 30h +
jz loc_1030E61  +
mov eax [edi+4] +
dec eax  +
jns loc_1030E3E  +
neg eax  +
mov byte ptr [esi] 2Dh +
inc esi  +
cmp eax 64h +
jl loc_1030E4E  +
cdq   +
push 64h  +
pop edi  +
idiv  edi +
add [esi] al +
mov eax edx +
inc esi  +
cmp eax 0Ah +
jl loc_1030E5E  +
cdq   +
push 0Ah  +
pop edi  +
idiv  edi +
add [esi] al +
mov eax edx +
add [esi+1] al +
test byte_10657B4 1 +
jz loc_1030E7E  +
cmp byte ptr [ecx] 30h +
jnz loc_1030E7E  +
push 3  +
lea eax [ecx+1] +
push eax  +
push ecx  +
call loc_1025EB0  +
add esp 0Ch +
cmp [ebp+var_4] 0 +
jz loc_1030E8B  +
mov eax [ebp+var_8] +
and dword ptr [eax+70h] 0FFFFFFFDh +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
mov eax dword_1063194 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
push 16h  +
pop esi  +
push esi  +
lea ecx [ebp+var_1C] +
push ecx  +
lea ecx [ebp+var_2C] +
push ecx  +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
call sub_1031AAB  +
xor ebx ebx +
add esp 14h +
cmp edi ebx +
jnz loc_1030EE9  +
call sub_102501E  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov [eax] esi +
call sub_1024FC5  +
add esp 14h +
mov eax esi +
jmp loc_1030F58  +
mov eax [ebp+arg_8] +
cmp eax ebx +
jbe loc_1030ED1  +
mov esi [ebp+arg_C] +
cmp eax 0FFFFFFFFh +
jnz loc_1030EFD  +
or eax 0FFFFFFFFh +
jmp loc_1030F11  +
xor ecx ecx +
cmp [ebp+var_2C] 2Dh +
setz cl  +
sub eax ecx +
xor ecx ecx +
cmp esi ebx +
setnle cl  +
sub eax ecx +
lea ecx [ebp+var_2C] +
push ecx  +
lea ecx [esi+1] +
push ecx  +
push eax  +
xor eax eax +
cmp [ebp+var_2C] 2Dh +
setz al  +
xor ecx ecx +
cmp esi ebx +
setnle cl  +
add eax edi +
add ecx eax +
push ecx  +
call sub_1031910  +
add esp 10h +
cmp eax ebx +
jz loc_1030F3F  +
mov [edi] bl +
jmp loc_1030F58  +
push [ebp+arg_14]  +
lea eax [ebp+var_2C] +
push ebx  +
push eax  +
push [ebp+arg_10]  +
mov eax edi +
push esi  +
push [ebp+arg_8]  +
call sub_1030D23  +
add esp 18h +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1021557  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1030E97  +
add esp 18h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push esi  +
push edi  +
push [ebp+arg_14]  +
lea ecx [ebp+var_24] +
mov [ebp+var_14] 3FFh +
xor edi edi +
mov [ebp+var_4] 30h +
call sub_102160E  +
cmp [ebp+arg_C] edi +
jge loc_1030FBE  +
mov [ebp+arg_C] edi +
mov esi [ebp+arg_4] +
cmp esi edi +
jnz loc_1030FF0  +
call sub_102501E  +
push 16h  +
pop esi  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
mov [eax] esi +
call sub_1024FC5  +
add esp 14h +
cmp [ebp+var_18] 0 +
jz loc_1030FE9  +
mov eax [ebp+var_1C] +
and dword ptr [eax+70h] 0FFFFFFFDh +
mov eax esi +
jmp loc_1031300  +
cmp [ebp+arg_8] edi +
jbe loc_1030FC5  +
mov eax [ebp+arg_C] +
add eax 0Bh +
mov byte ptr [esi] 0 +
cmp [ebp+arg_8] eax +
ja loc_103100C  +
call sub_102501E  +
push 22h  +
jmp loc_1030FCC  +
mov edi [ebp+arg_0] +
mov eax [edi] +
mov [ebp+var_C] eax +
mov eax [edi+4] +
mov ecx eax +
shr ecx 14h +
mov edx 7FFh +
push ebx  +
and ecx edx +
xor ebx ebx +
cmp ecx edx +
jnz loc_10310BE  +
test ebx ebx +
jnz loc_10310BE  +
mov eax [ebp+arg_8] +
cmp eax 0FFFFFFFFh +
jnz loc_1031042  +
or eax eax +
jmp loc_1031045  +
add eax 0FFFFFFFEh +
push 0  +
push [ebp+arg_C]  +
lea ebx [esi+2] +
push eax  +
push ebx  +
push edi  +
call sub_1030F6C  +
add esp 14h +
test eax eax +
jz loc_1031075  +
cmp [ebp+var_18] 0 +
mov byte ptr [esi] 0 +
jz loc_10312FF  +
mov ecx [ebp+var_1C] +
and dword ptr [ecx+70h] 0FFFFFFFDh +
jmp loc_10312FF  +
cmp byte ptr [ebx] 2Dh +
jnz loc_103107E  +
mov byte ptr [esi] 2Dh +
inc esi  +
mov byte ptr [esi] 30h +
inc esi  +
cmp [ebp+arg_10] 0 +
push 65h  +
setz al  +
dec al  +
and al 0E0h +
add al 78h +
mov [esi] al +
inc esi  +
push esi  +
call sub_1031B40  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10312F0  +
cmp [ebp+arg_10] 0 +
setz cl  +
dec cl  +
and cl 0E0h +
add cl 70h +
mov [eax] cl +
mov byte ptr [eax+3] 0 +
jmp loc_10312F0  +
and eax 80000000h +
xor ecx ecx +
or ecx eax +
jz loc_10310CD  +
mov byte ptr [esi] 2Dh +
inc esi  +
mov ebx [ebp+arg_10] +
mov byte ptr [esi] 30h +
inc esi  +
test ebx ebx +
setz al  +
dec al  +
and al 0E0h +
add al 78h +
mov [esi] al +
mov ecx [edi+4] +
inc esi  +
neg ebx  +
sbb ebx ebx +
and ebx 0FFFFFFE0h +
and ecx 7FF00000h +
xor eax eax +
add ebx 27h +
xor edx edx +
or eax ecx +
jnz loc_103111E  +
mov byte ptr [esi] 30h +
mov ecx [edi+4] +
mov eax [edi] +
and ecx 0FFFFFh +
inc esi  +
or eax ecx +
jnz loc_1031115  +
mov [ebp+var_14] edx +
jmp loc_1031122  +
mov [ebp+var_14] 3FEh +
jmp loc_1031122  +
mov byte ptr [esi] 31h +
inc esi  +
mov eax esi +
inc esi  +
mov [ebp+arg_4] eax +
cmp [ebp+arg_C] edx +
jnz loc_1031131  +
mov [eax] dl +
jmp loc_1031140  +
mov ecx [ebp+var_24] +
mov ecx [ecx+0BCh] +
mov ecx [ecx] +
mov cl [ecx] +
mov [eax] cl +
mov ecx [edi+4] +
mov eax [edi] +
and ecx 0FFFFFh +
mov [ebp+var_8] ecx +
ja loc_1031158  +
cmp eax edx +
jbe loc_103120D  +
mov [ebp+var_C] edx +
mov [ebp+var_8] 0F0000h +
cmp [ebp+arg_C] 0 +
jle loc_10311B5  +
mov edx [edi+4] +
and edx [ebp+var_8] +
mov eax [edi] +
movsx ecx word ptr [ebp+var_4] +
and eax [ebp+var_C] +
and edx 0FFFFFh +
call sub_1031C70  +
add ax 30h +
movzx eax ax +
cmp ax 39h +
jbe loc_1031191  +
add eax ebx +
mov ecx [ebp+var_8] +
sub [ebp+var_4] 4 +
mov [esi] al +
mov eax [ebp+var_C] +
shrd eax ecx +
shr ecx 4 +
inc esi  +
dec [ebp+arg_C]  +
cmp word ptr [ebp+var_4] 0 +
mov [ebp+var_C] eax +
mov [ebp+var_8] ecx +
jge loc_1031162  +
cmp word ptr [ebp+var_4] 0 +
jl loc_103120D  +
mov edx [edi+4] +
and edx [ebp+var_8] +
mov eax [edi] +
movsx ecx word ptr [ebp+var_4] +
and eax [ebp+var_C] +
and edx 0FFFFFh +
call sub_1031C70  +
cmp ax 8 +
jbe loc_103120D  +
lea eax [esi-1] +
mov cl [eax] +
cmp cl 66h +
jz loc_10311EB  +
cmp cl 46h +
jnz loc_10311F1  +
mov byte ptr [eax] 30h +
dec eax  +
jmp loc_10311DF  +
cmp eax [ebp+arg_4] +
jz loc_103120A  +
mov cl [eax] +
cmp cl 39h +
jnz loc_1031204  +
add bl 3Ah +
mov [eax] bl +
jmp loc_103120D  +
inc cl  +
mov [eax] cl +
jmp loc_103120D  +
inc byte ptr [eax-1]  +
cmp [ebp+arg_C] 0 +
jle loc_1031224  +
push [ebp+arg_C]  +
push 30h  +
push esi  +
call sub_10219E0  +
add esp 0Ch +
add esi [ebp+arg_C] +
mov eax [ebp+arg_4] +
cmp byte ptr [eax] 0 +
jnz loc_103122E  +
mov esi eax +
cmp [ebp+arg_10] 0 +
mov cl 34h +
setz al  +
dec al  +
and al 0E0h +
add al 70h +
mov [esi] al +
mov eax [edi] +
mov edx [edi+4] +
inc esi  +
call sub_1031C70  +
xor ebx ebx +
and eax 7FFh +
and edx ebx +
sub eax [ebp+var_14] +
push ebx  +
pop ecx  +
sbb edx ecx +
js loc_1031268  +
jg loc_1031262  +
cmp eax ebx +
jb loc_1031268  +
mov byte ptr [esi] 2Bh +
inc esi  +
jmp loc_1031272  +
mov byte ptr [esi] 2Dh +
inc esi  +
neg eax  +
adc edx ebx +
neg edx  +
cmp edx ebx +
mov edi esi +
mov byte ptr [esi] 30h +
jl loc_103129F  +
mov ecx 3E8h +
jg loc_1031286  +
cmp eax ecx +
jb loc_103129F  +
push ebx  +
push ecx  +
push edx  +
push eax  +
call sub_1031B80  +
add al 30h +
mov [esi] al +
inc esi  +
mov [ebp+var_10] edx +
mov eax ecx +
mov edx ebx +
cmp esi edi +
jnz loc_10312AA  +
test edx edx +
jl loc_10312C1  +
jg loc_10312AA  +
cmp eax 64h +
jb loc_10312C1  +
push 0  +
push 64h  +
push edx  +
push eax  +
call sub_1031B80  +
add al 30h +
mov [esi] al +
mov [ebp+var_10] edx +
inc esi  +
mov eax ecx +
mov edx ebx +
cmp esi edi +
jnz loc_10312D0  +
test edx edx +
jl loc_10312E8  +
jg loc_10312D0  +
cmp eax 0Ah +
jb loc_10312E8  +
push 0  +
push 0Ah  +
push edx  +
push eax  +
call sub_1031B80  +
add al 30h +
mov [esi] al +
mov [ebp+var_10] edx +
inc esi  +
mov eax ecx +
mov [ebp+var_10] ebx +
add al 30h +
mov [esi] al +
mov byte ptr [esi+1] 0 +
cmp [ebp+var_18] 0 +
jz loc_10312FD  +
mov eax [ebp+var_1C] +
and dword ptr [eax+70h] 0FFFFFFFDh +
xor eax eax +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_C]  +
mov ebx eax +
mov esi [ebx+4] +
mov edi ecx +
lea ecx [ebp+var_10] +
dec esi  +
call sub_102160E  +
test edi edi +
jnz loc_1031358  +
call sub_102501E  +
push 16h  +
pop esi  +
mov [eax] esi +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
call sub_1024FC5  +
add esp 14h +
cmp [ebp+var_4] 0 +
jz loc_1031351  +
mov eax [ebp+var_8] +
and dword ptr [eax+70h] 0FFFFFFFDh +
mov eax esi +
jmp loc_10313FB  +
cmp [ebp+arg_0] 0 +
jbe loc_103132B  +
cmp [ebp+arg_8] 0 +
jz loc_103137C  +
cmp esi [ebp+arg_4] +
jnz loc_103137C  +
xor eax eax +
cmp dword ptr [ebx] 2Dh +
setz al  +
add eax esi +
add eax edi +
mov byte ptr [eax] 30h +
mov byte ptr [eax+1] 0 +
cmp dword ptr [ebx] 2Dh +
mov esi edi +
jnz loc_1031389  +
mov byte ptr [edi] 2Dh +
lea esi [edi+1] +
mov eax [ebx+4] +
xor edi edi +
inc edi  +
test eax eax +
jg loc_10313A0  +
mov eax esi +
call sub_1030CCF  +
mov byte ptr [esi] 30h +
inc esi  +
jmp loc_10313A2  +
add esi eax +
cmp [ebp+arg_4] 0 +
jle loc_10313EC  +
mov eax esi +
call sub_1030CCF  +
mov eax [ebp+var_10] +
mov eax [eax+0BCh] +
mov eax [eax] +
mov al [eax] +
mov [esi] al +
mov ebx [ebx+4] +
inc esi  +
test ebx ebx +
jge loc_10313EC  +
neg ebx  +
cmp [ebp+arg_8] 0 +
jnz loc_10313D3  +
cmp [ebp+arg_4] ebx +
jl loc_10313D6  +
mov [ebp+arg_4] ebx +
mov edi [ebp+arg_4] +
mov eax esi +
call sub_1030CCF  +
push edi  +
push 30h  +
push esi  +
call sub_10219E0  +
add esp 0Ch +
cmp [ebp+var_4] 0 +
jz loc_10313F9  +
mov eax [ebp+var_8] +
and dword ptr [eax+70h] 0FFFFFFFDh +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
mov eax dword_1063194 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
push 16h  +
pop esi  +
push esi  +
lea ecx [ebp+var_1C] +
push ecx  +
lea ecx [ebp+var_2C] +
push ecx  +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
call sub_1031AAB  +
xor ebx ebx +
add esp 14h +
cmp edi ebx +
jnz loc_1031457  +
call sub_102501E  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov [eax] esi +
call sub_1024FC5  +
add esp 14h +
mov eax esi +
jmp loc_10314B1  +
mov eax [ebp+arg_8] +
cmp eax ebx +
jbe loc_103143F  +
cmp eax 0FFFFFFFFh +
jnz loc_1031467  +
or eax eax +
jmp loc_1031472  +
xor ecx ecx +
cmp [ebp+var_2C] 2Dh +
setz cl  +
sub eax ecx +
mov esi [ebp+arg_C] +
lea ecx [ebp+var_2C] +
push ecx  +
mov ecx [ebp+var_28] +
add ecx esi +
push ecx  +
push eax  +
xor eax eax +
cmp [ebp+var_2C] 2Dh +
setz al  +
add eax edi +
push eax  +
call sub_1031910  +
add esp 10h +
cmp eax ebx +
jz loc_103149C  +
mov [edi] bl +
jmp loc_10314B1  +
push [ebp+arg_10]  +
lea eax [ebp+var_2C] +
push ebx  +
push esi  +
push [ebp+arg_8]  +
mov ecx edi +
call sub_1031309  +
add esp 10h +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1021557  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
mov eax dword_1063194 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
push 16h  +
pop edi  +
push edi  +
lea ecx [ebp+var_1C] +
push ecx  +
lea ecx [ebp+var_30] +
push ecx  +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
call sub_1031AAB  +
xor ebx ebx +
add esp 14h +
cmp esi ebx +
jnz loc_103151A  +
call sub_102501E  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov [eax] edi +
call sub_1024FC5  +
add esp 14h +
mov eax edi +
jmp loc_10315B0  +
mov ecx [ebp+arg_8] +
cmp ecx ebx +
jbe loc_10314FF  +
mov eax [ebp+var_2C] +
dec eax  +
mov [ebp+var_20] eax +
xor eax eax +
cmp [ebp+var_30] 2Dh +
setz al  +
lea edi [eax+esi] +
cmp ecx 0FFFFFFFFh +
jnz loc_103153D  +
or ecx ecx +
jmp loc_103153F  +
sub ecx eax +
lea eax [ebp+var_30] +
push eax  +
push [ebp+arg_C]  +
push ecx  +
push edi  +
call sub_1031910  +
add esp 10h +
cmp eax ebx +
jz loc_1031558  +
mov [esi] bl +
jmp loc_10315B0  +
mov eax [ebp+var_2C] +
dec eax  +
cmp [ebp+var_20] eax +
setl cl  +
cmp eax 0FFFFFFFCh +
jl loc_1031594  +
cmp eax [ebp+arg_C] +
jge loc_1031594  +
cmp cl bl +
jz loc_103157A  +
mov al [edi] +
inc edi  +
test al al +
jnz loc_1031570  +
mov [edi-2] bl +
push [ebp+arg_14]  +
lea eax [ebp+var_30] +
push 1  +
push [ebp+arg_C]  +
mov ecx esi +
push [ebp+arg_8]  +
call sub_1031309  +
add esp 10h +
jmp loc_10315B0  +
push [ebp+arg_14]  +
lea eax [ebp+var_30] +
push 1  +
push eax  +
push [ebp+arg_10]  +
mov eax esi +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
call sub_1030D23  +
add esp 18h +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1021557  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
cmp eax 65h +
jz loc_1031630  +
cmp eax 45h +
jz loc_1031630  +
cmp eax 66h +
jnz loc_10315F4  +
push [ebp+arg_18]  +
push [ebp+arg_10]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1031405  +
add esp 14h +
pop ebp  +
retn   +
cmp eax 61h +
jz loc_1031617  +
cmp eax 41h +
jz loc_1031617  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10314C5  +
jmp loc_1031647  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1030F91  +
jmp loc_1031647  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1030E97  +
add esp 18h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_10315C4  +
add esp 1Ch +
pop ebp  +
retn   +
***
call sub_1031DCC  +
pop ecx  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push [ebp+arg_4]  +
lea ecx [ebp+var_10] +
call sub_102160E  +
mov eax [ebp+var_10] +
cmp dword ptr [eax+0ACh] 1 +
jle loc_10316C2  +
lea eax [ebp+var_10] +
push eax  +
push 4  +
push [ebp+arg_0]  +
call sub_1030A8C  +
add esp 0Ch +
jmp loc_10316D2  +
mov eax [eax+0C8h] +
mov ecx [ebp+arg_0] +
movzx eax word ptr [eax+ecx*2] +
and eax 4 +
cmp [ebp+var_4] 0 +
jz locret_10316DF  +
mov ecx [ebp+var_8] +
and dword ptr [ecx+70h] 0FFFFFFFDh +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_1065630 0 +
jnz loc_103170F  +
or eax 0FFFFFFFFh +
cmp [ebp+arg_0] eax +
jz loc_1031700  +
movzx eax byte ptr [ebp+arg_0] +
mov ecx off_1063BA8 +
movzx eax word ptr [ecx+eax*2] +
and eax 4 +
pop ebp  +
retn   +
push 0  +
push [ebp+arg_0]  +
call sub_1031690  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
mov eax dword_1063194 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push [ebp+arg_8]  +
mov edi [ebp+arg_4] +
lea ecx [ebp+var_24] +
call sub_102160E  +
lea eax [ebp+var_24] +
push eax  +
xor ebx ebx +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push edi  +
lea eax [ebp+var_28] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
call sub_10333DD  +
mov [ebp+var_14] eax +
lea eax [ebp+var_10] +
push esi  +
push eax  +
call sub_10320E3  +
add esp 28h +
test byte ptr [ebp+var_14] 3 +
jnz loc_10317A1  +
cmp eax 1 +
jnz loc_103178C  +
cmp [ebp+var_18] bl +
jz loc_1031787  +
mov eax [ebp+var_1C] +
and dword ptr [eax+70h] 0FFFFFFFDh +
push 3  +
pop eax  +
jmp loc_10317BB  +
cmp eax 2 +
jnz loc_10317AD  +
cmp [ebp+var_18] bl +
jz loc_103179D  +
mov eax [ebp+var_1C] +
and dword ptr [eax+70h] 0FFFFFFFDh +
push 4  +
jmp loc_1031789  +
test byte ptr [ebp+var_14] 1 +
jnz loc_1031791  +
test byte ptr [ebp+var_14] 2 +
jnz loc_103177B  +
cmp [ebp+var_18] bl +
jz loc_10317B9  +
mov eax [ebp+var_1C] +
and dword ptr [eax+70h] 0FFFFFFFDh +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1021557  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
mov eax dword_1063194 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push [ebp+arg_8]  +
mov edi [ebp+arg_4] +
lea ecx [ebp+var_24] +
call sub_102160E  +
lea eax [ebp+var_24] +
push eax  +
xor ebx ebx +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push edi  +
lea eax [ebp+var_28] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
call sub_10333DD  +
mov [ebp+var_14] eax +
lea eax [ebp+var_10] +
push esi  +
push eax  +
call sub_103262C  +
add esp 28h +
test byte ptr [ebp+var_14] 3 +
jnz loc_103184E  +
cmp eax 1 +
jnz loc_1031839  +
cmp [ebp+var_18] bl +
jz loc_1031834  +
mov eax [ebp+var_1C] +
and dword ptr [eax+70h] 0FFFFFFFDh +
push 3  +
pop eax  +
jmp loc_1031868  +
cmp eax 2 +
jnz loc_103185A  +
cmp [ebp+var_18] bl +
jz loc_103184A  +
mov eax [ebp+var_1C] +
and dword ptr [eax+70h] 0FFFFFFFDh +
push 4  +
jmp loc_1031836  +
test byte ptr [ebp+var_14] 1 +
jnz loc_103183E  +
test byte ptr [ebp+var_14] 2 +
jnz loc_1031828  +
cmp [ebp+var_18] bl +
jz loc_1031866  +
mov eax [ebp+var_1C] +
and dword ptr [eax+70h] 0FFFFFFFDh +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1021557  +
leave   +
retn   +
***
mov ecx [esp+arg_0] +
test ecx 3 +
jz loc_10318B0  +
mov al [ecx] +
add ecx 1 +
test al al +
jz loc_10318E3  +
test ecx 3 +
jnz loc_103188C  +
add eax 0 +
lea esp [esp+0] +
lea esp [esp+0] +
mov eax [ecx] +
mov edx 7EFEFEFFh +
add edx eax +
xor eax 0FFFFFFFFh +
xor eax edx +
add ecx 4 +
test eax 81010100h +
jz loc_10318B0  +
mov eax [ecx-4] +
test al al +
jz loc_1031901  +
test ah ah +
jz loc_10318F7  +
test eax 0FF0000h +
jz loc_10318ED  +
test eax 0FF000000h +
jz loc_10318E3  +
jmp loc_10318B0  +
lea eax [ecx-1] +
mov ecx [esp+arg_0] +
sub eax ecx +
retn   +
lea eax [ecx-2] +
mov ecx [esp+arg_0] +
sub eax ecx +
retn   +
lea eax [ecx-3] +
mov ecx [esp+arg_0] +
sub eax ecx +
retn   +
lea eax [ecx-4] +
mov ecx [esp+arg_0] +
sub eax ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+arg_C] +
mov edx [ebp+arg_0] +
mov eax [ecx+0Ch] +
push ebx  +
xor ebx ebx +
push esi  +
mov [ebp+var_4] eax +
cmp edx ebx +
jnz loc_1031948  +
call sub_102501E  +
push 16h  +
pop esi  +
mov [eax] esi +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call sub_1024FC5  +
add esp 14h +
mov eax esi +
jmp loc_10319E0  +
cmp [ebp+arg_4] ebx +
jbe loc_103192A  +
mov esi [ebp+arg_8] +
cmp esi ebx +
mov [edx] bl +
jle loc_103195A  +
mov eax esi +
jmp loc_103195C  +
xor eax eax +
inc eax  +
cmp [ebp+arg_4] eax +
ja loc_1031970  +
call sub_102501E  +
push 22h  +
pop ecx  +
mov [eax] ecx +
mov esi ecx +
jmp loc_1031934  +
cmp esi ebx +
push edi  +
lea edi [edx+1] +
mov byte ptr [edx] 30h +
mov eax edi +
jle loc_103199E  +
mov ecx [ebp+var_4] +
mov cl [ecx] +
cmp cl bl +
jz loc_1031990  +
inc [ebp+var_4]  +
movsx ecx cl +
xor ebx ebx +
jmp loc_1031993  +
push 30h  +
pop ecx  +
mov [eax] cl +
inc eax  +
dec esi  +
cmp esi ebx +
jg loc_103197D  +
mov ecx [ebp+arg_C] +
cmp esi ebx +
mov [eax] bl +
jl loc_10319B9  +
mov esi [ebp+var_4] +
cmp byte ptr [esi] 35h +
jl loc_10319B9  +
jmp loc_10319B1  +
mov byte ptr [eax] 30h +
dec eax  +
cmp byte ptr [eax] 39h +
jz loc_10319AE  +
inc byte ptr [eax]  +
cmp byte ptr [edx] 31h +
jnz loc_10319C3  +
inc dword ptr [ecx+4]  +
jmp loc_10319DD  +
mov eax edi +
lea esi [eax+1] +
mov cl [eax] +
inc eax  +
cmp cl bl +
jnz loc_10319C8  +
sub eax esi +
inc eax  +
push eax  +
push edi  +
push edx  +
call loc_1025EB0  +
add esp 0Ch +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov edx [ebp+arg_4] +
movzx eax word ptr [edx+6] +
push ebx  +
mov ecx eax +
push esi  +
push edi  +
shr ecx 4 +
and eax 8000h +
mov edi 7FFh +
and ecx edi +
mov [ebp+arg_4] eax +
mov eax [edx+4] +
mov edx [edx] +
movzx ebx cx +
mov esi 80000000h +
and eax 0FFFFFh +
mov [ebp+var_4] esi +
test ebx ebx +
jz loc_1031A39  +
cmp ebx edi +
jz loc_1031A32  +
add ecx 3C00h +
jmp loc_1031A5A  +
mov edi 7FFFh +
jmp loc_1031A5D  +
xor ebx ebx +
cmp eax ebx +
jnz loc_1031A51  +
cmp edx ebx +
jnz loc_1031A51  +
mov eax [ebp+arg_0] +
mov cx word ptr [ebp+arg_4] +
mov [eax+4] ebx +
mov [eax] ebx +
jmp loc_1031A9D  +
add ecx 3C01h +
mov [ebp+var_4] ebx +
movzx edi cx +
mov ecx edx +
shr ecx 15h +
shl eax 0Bh +
or ecx eax +
or ecx [ebp+var_4] +
mov eax [ebp+arg_0] +
shl edx 0Bh +
mov [eax+4] ecx +
mov [eax] edx +
test ecx esi +
jnz loc_1031A98  +
mov ecx [eax] +
mov edx [eax+4] +
mov ebx ecx +
add edx edx +
shr ebx 1Fh +
or edx ebx +
add ecx ecx +
add edi 0FFFFh +
mov [eax+4] edx +
mov [eax] ecx +
test edx esi +
jz loc_1031A79  +
mov ecx [ebp+arg_4] +
or ecx edi +
pop edi  +
pop esi  +
mov [eax+8] cx +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
mov eax dword_1063194 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_C] +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
mov [ebp+var_30] eax +
push edi  +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
call sub_10319E9  +
pop ecx  +
pop ecx  +
lea eax [ebp+var_2C] +
push eax  +
push 0  +
push 11h  +
sub esp 0Ch +
lea esi [ebp+var_10] +
mov edi esp +
movs   +
movs   +
movs   +
call sub_103343B  +
mov esi [ebp+var_30] +
mov [ebx+8] eax +
movsx eax byte ptr [ebp+var_2C+2] +
mov [ebx] eax +
movsx eax word ptr [ebp+var_2C] +
mov [ebx+4] eax +
lea eax [ebp+var_28] +
push eax  +
push [ebp+arg_10]  +
push esi  +
call sub_102B860  +
add esp 24h +
test eax eax +
jz loc_1031B27  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
call sub_1024F1A  +
add esp 14h +
mov ecx [ebp+var_4] +
pop edi  +
mov [ebx+0Ch] esi +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_1021557  +
leave   +
retn   +
***
push edi  +
mov edi [ebp+arg_0] +
xor eax eax +
or ecx 0FFFFFFFFh +
scas   +
add ecx 1 +
neg ecx  +
sub edi 1 +
mov al [ebp+arg_4] +
std   +
scas   +
add edi 1 +
cmp [edi] al +
jz loc_1031B67  +
xor eax eax +
jmp loc_1031B69  +
mov eax edi +
cld   +
pop edi  +
leave   +
retn   +
***
push ebp  +
xor edi edi +
xor ebp ebp +
mov eax [esp+arg_4] +
or eax eax +
jge loc_1031BA4  +
inc edi  +
inc ebp  +
mov edx [esp+arg_0] +
neg eax  +
neg edx  +
sbb eax 0 +
mov [esp+arg_4] eax +
mov [esp+arg_0] edx +
mov eax [esp+arg_C] +
or eax eax +
jge loc_1031BC0  +
inc edi  +
mov edx [esp+arg_8] +
neg eax  +
neg edx  +
sbb eax 0 +
mov [esp+arg_C] eax +
mov [esp+arg_8] edx +
or eax eax +
jnz loc_1031BEC  +
mov ecx [esp+arg_8] +
mov eax [esp+arg_4] +
xor edx edx +
div  ecx +
mov ebx eax +
mov eax [esp+arg_0] +
div  ecx +
mov esi eax +
mov eax ebx +
mul  [esp+arg_8] +
mov ecx eax +
mov eax esi +
mul  [esp+arg_8] +
add edx ecx +
jmp loc_1031C33  +
mov ebx eax +
mov ecx [esp+arg_8] +
mov edx [esp+arg_4] +
mov eax [esp+arg_0] +
shr ebx 1 +
rcr ecx 1 +
shr edx 1 +
rcr eax 1 +
or ebx ebx +
jnz loc_1031BFA  +
div  ecx +
mov esi eax +
mul  [esp+arg_C] +
mov ecx eax +
mov eax [esp+arg_8] +
mul  esi +
add edx ecx +
jb loc_1031C28  +
cmp edx [esp+arg_4] +
ja loc_1031C28  +
jb loc_1031C31  +
cmp eax [esp+arg_0] +
jbe loc_1031C31  +
dec esi  +
sub eax [esp+arg_8] +
sbb edx [esp+arg_C] +
xor ebx ebx +
sub eax [esp+arg_0] +
sbb edx [esp+arg_4] +
dec ebp  +
jns loc_1031C45  +
neg edx  +
neg eax  +
sbb edx 0 +
mov ecx edx +
mov edx ebx +
mov ebx ecx +
mov ecx eax +
mov eax esi +
dec edi  +
jnz loc_1031C59  +
neg edx  +
neg eax  +
sbb edx 0 +
pop ebp  +
pop esi  +
pop edi  +
retn 10h  +
***
cmp cl 40h +
jnb loc_1031C8A  +
cmp cl 20h +
jnb loc_1031C80  +
shrd eax edx +
shr edx cl +
retn   +
mov eax edx +
xor edx edx +
and cl 1Fh +
shr eax cl +
retn   +
xor eax eax +
xor edx edx +
retn   +
***
xor eax eax +
test bl 10h +
jz loc_1031C9C  +
inc eax  +
test bl 8 +
jz loc_1031CA4  +
or eax 4 +
test bl 4 +
jz loc_1031CAC  +
or eax 8 +
test bl 2 +
jz loc_1031CB4  +
or eax 10h +
test bl 1 +
jz loc_1031CBC  +
or eax 20h +
test ebx 80000h +
jz loc_1031CC7  +
or eax 2 +
mov ecx ebx +
mov edx 300h +
and ecx edx +
push esi  +
mov esi 200h +
jz loc_1031CFB  +
cmp ecx 100h +
jz loc_1031CF6  +
cmp ecx esi +
jz loc_1031CEF  +
cmp ecx edx +
jnz loc_1031CFB  +
or eax 0C00h +
jmp loc_1031CFB  +
or eax 800h +
jmp loc_1031CFB  +
or eax 400h +
mov ecx ebx +
and ecx 30000h +
jz loc_1031D11  +
cmp ecx 10000h +
jnz loc_1031D13  +
or eax esi +
jmp loc_1031D13  +
or eax edx +
pop esi  +
test ebx 40000h +
jz locret_1031D21  +
or eax 1000h +
retn   +
***
xor eax eax +
test dl 10h +
jz loc_1031D33  +
mov eax 80h +
push ebx  +
push esi  +
push edi  +
mov ebx 200h +
test dl 8 +
jz loc_1031D42  +
or eax ebx +
test dl 4 +
jz loc_1031D4C  +
or eax 400h +
test dl 2 +
jz loc_1031D56  +
or eax 800h +
test dl 1 +
jz loc_1031D60  +
or eax 1000h +
mov edi 100h +
test edx 80000h +
jz loc_1031D6F  +
or eax edi +
mov ecx edx +
mov esi 300h +
and ecx esi +
jz loc_1031D99  +
cmp ecx edi +
jz loc_1031D94  +
cmp ecx ebx +
jz loc_1031D8D  +
cmp ecx esi +
jnz loc_1031D99  +
or eax 6000h +
jmp loc_1031D99  +
or eax 4000h +
jmp loc_1031D99  +
or eax 2000h +
mov ecx 3000000h +
pop edi  +
and edx ecx +
pop esi  +
pop ebx  +
cmp edx 1000000h +
jz loc_1031DC1  +
cmp edx 2000000h +
jz loc_1031DBD  +
cmp edx ecx +
jnz locret_1031DC6  +
or eax 8000h +
retn   +
or eax 40h +
retn   +
or eax 8040h +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
and edi 0FFF7FFFFh +
fstcw  word ptr [ebp+var_4] +
mov ebx [ebp+var_4] +
xor edx edx +
test bl 1 +
jz loc_1031DF1  +
push 10h  +
pop edx  +
test bl 4 +
jz loc_1031DF9  +
or edx 8 +
test bl 8 +
jz loc_1031E01  +
or edx 4 +
test bl 10h +
jz loc_1031E09  +
or edx 2 +
test bl 20h +
jz loc_1031E11  +
or edx 1 +
test bl 2 +
jz loc_1031E1C  +
or edx 80000h +
movzx ecx bx +
mov eax ecx +
mov esi 0C00h +
and eax esi +
jz loc_1031E52  +
cmp eax 400h +
jz loc_1031E4C  +
cmp eax 800h +
jz loc_1031E44  +
cmp eax esi +
jnz loc_1031E52  +
or edx 300h +
jmp loc_1031E52  +
or edx 200h +
jmp loc_1031E52  +
or edx 100h +
and ecx 300h +
jz loc_1031E6A  +
cmp ecx 200h +
jnz loc_1031E70  +
or edx 10000h +
jmp loc_1031E70  +
or edx 20000h +
test ebx 1000h +
jz loc_1031E7E  +
or edx 40000h +
mov eax edi +
not eax  +
mov ecx edi +
and ecx [ebp+arg_0] +
and eax edx +
or eax ecx +
mov [ebp+var_10] eax +
cmp eax edx +
jz loc_1031F44  +
mov ebx eax +
call sub_1031C94  +
movzx eax ax +
mov [ebp+arg_4] eax +
fldcw  word ptr [ebp+arg_4] +
fstcw  word ptr [ebp+arg_4] +
mov ebx [ebp+arg_4] +
xor edx edx +
test bl 1 +
jz loc_1031EB7  +
push 10h  +
pop edx  +
test bl 4 +
jz loc_1031EBF  +
or edx 8 +
test bl 8 +
jz loc_1031EC7  +
or edx 4 +
test bl 10h +
jz loc_1031ECF  +
or edx 2 +
test bl 20h +
jz loc_1031ED7  +
or edx 1 +
test bl 2 +
jz loc_1031EE2  +
or edx 80000h +
movzx ecx bx +
mov eax ecx +
and eax esi +
jz loc_1031F13  +
cmp eax 400h +
jz loc_1031F0D  +
cmp eax 800h +
jz loc_1031F05  +
cmp eax esi +
jnz loc_1031F13  +
or edx 300h +
jmp loc_1031F13  +
or edx 200h +
jmp loc_1031F13  +
or edx 100h +
and ecx 300h +
jz loc_1031F2B  +
cmp ecx 200h +
jnz loc_1031F31  +
or edx 10000h +
jmp loc_1031F31  +
or edx 20000h +
test ebx 1000h +
jz loc_1031F3F  +
or edx 40000h +
mov eax edx +
mov [ebp+var_10] edx +
xor esi esi +
cmp dword_1066D04 esi +
jz loc_10320D9  +
and edi 308031Fh +
mov [ebp+var_14] edi +
stmxcsr [ebp+var_C]  +
mov eax [ebp+var_C] +
test al al +
jns loc_1031F69  +
push 10h  +
pop esi  +
test eax 200h +
jz loc_1031F73  +
or esi 8 +
test eax 400h +
jz loc_1031F7D  +
or esi 4 +
test eax 800h +
jz loc_1031F87  +
or esi 2 +
test eax 1000h +
jz loc_1031F91  +
or esi 1 +
test eax 100h +
jz loc_1031F9E  +
or esi 80000h +
mov ecx eax +
mov edi 6000h +
and ecx edi +
jz loc_1031FD3  +
cmp ecx 2000h +
jz loc_1031FCD  +
cmp ecx 4000h +
jz loc_1031FC5  +
cmp ecx edi +
jnz loc_1031FD3  +
or esi 300h +
jmp loc_1031FD3  +
or esi 200h +
jmp loc_1031FD3  +
or esi 100h +
mov ebx 8040h +
and eax ebx +
sub eax 40h +
jz loc_1031FFB  +
sub eax 7FC0h +
jz loc_1031FF3  +
sub eax 40h +
jnz loc_1032001  +
or esi 1000000h +
jmp loc_1032001  +
or esi 3000000h +
jmp loc_1032001  +
or esi 2000000h +
mov eax [ebp+var_14] +
mov edx eax +
and eax [ebp+arg_0] +
not edx  +
and edx esi +
or edx eax +
cmp edx esi +
jnz loc_103201A  +
mov eax esi +
jmp loc_10320C4  +
call sub_1031D27  +
push eax  +
mov [ebp+var_8] eax +
call sub_1033D64  +
pop ecx  +
stmxcsr [ebp+var_8]  +
mov edx [ebp+var_8] +
xor eax eax +
test dl dl +
jns loc_1032039  +
push 10h  +
pop eax  +
test edx 200h +
jz loc_1032044  +
or eax 8 +
test edx 400h +
jz loc_103204F  +
or eax 4 +
test edx 800h +
jz loc_103205A  +
or eax 2 +
test edx 1000h +
jz loc_1032065  +
or eax 1 +
mov esi 100h +
test edx esi +
jz loc_1032073  +
or eax 80000h +
mov ecx edx +
and ecx edi +
jz loc_103209D  +
cmp ecx 2000h +
jz loc_103209B  +
cmp ecx 4000h +
jz loc_1032094  +
cmp ecx edi +
jnz loc_103209D  +
or eax 300h +
jmp loc_103209D  +
or eax 200h +
jmp loc_103209D  +
or eax esi +
and edx ebx +
sub edx 40h +
jz loc_10320BF  +
sub edx 7FC0h +
jz loc_10320B8  +
sub edx 40h +
jnz loc_10320C4  +
or eax 1000000h +
jmp loc_10320C4  +
or eax 3000000h +
jmp loc_10320C4  +
or eax 2000000h +
mov ecx eax +
xor ecx [ebp+var_10] +
or eax [ebp+var_10] +
test ecx 8031Fh +
jz loc_10320D9  +
or eax 80000000h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
mov eax [ebp+arg_0] +
movzx ecx word ptr [eax+0Ah] +
push ebx  +
mov ebx ecx +
and ecx 8000h +
mov [ebp+var_14] ecx +
mov ecx [eax+6] +
mov [ebp+var_20] ecx +
mov ecx [eax+2] +
movzx eax word ptr [eax] +
and ebx 7FFFh +
sub ebx 3FFFh +
shl eax 10h +
push edi  +
mov [ebp+var_1C] ecx +
mov [ebp+var_18] eax +
cmp ebx 0FFFFC001h +
jnz loc_103214F  +
xor ebx ebx +
xor eax eax +
cmp [ebp+eax*4+var_20] ebx +
jnz loc_103213F  +
inc eax  +
cmp eax 3 +
jl loc_103212C  +
xor eax eax +
jmp loc_10325E4  +
xor eax eax +
lea edi [ebp+var_20] +
stos   +
stos   +
push 2  +
stos   +
pop eax  +
jmp loc_10325E4  +
and [ebp+arg_0] 0 +
push esi  +
lea esi [ebp+var_20] +
lea edi [ebp+var_2C] +
movs   +
movs   +
movs   +
mov esi dword_10642F8 +
dec esi  +
lea ecx [esi+1] +
mov eax ecx +
cdq   +
and edx 1Fh +
add eax edx +
sar eax 5 +
mov edx ecx +
and edx 8000001Fh +
mov [ebp+var_10] ebx +
mov [ebp+var_C] eax +
jns loc_1032187  +
dec edx  +
or edx 0FFFFFFE0h +
inc edx  +
lea edi [ebp+eax*4+var_20] +
push 1Fh  +
xor eax eax +
pop ecx  +
sub ecx edx +
inc eax  +
shl eax cl +
mov [ebp+var_8] ecx +
test [edi] eax +
jz loc_103222D  +
mov eax [ebp+var_C] +
or edx 0FFFFFFFFh +
shl edx cl +
not edx  +
test [ebp+eax*4+var_20] edx +
jmp loc_10321B5  +
cmp [ebp+eax*4+var_20] 0 +
jnz loc_10321BF  +
inc eax  +
cmp eax 3 +
jl loc_10321B0  +
jmp loc_103222D  +
mov eax esi +
cdq   +
push 1Fh  +
pop ecx  +
and edx ecx +
add eax edx +
sar eax 5 +
and esi 8000001Fh +
jns loc_10321D9  +
dec esi  +
or esi 0FFFFFFE0h +
inc esi  +
and [ebp+var_4] 0 +
sub ecx esi +
xor edx edx +
inc edx  +
shl edx cl +
lea ecx [ebp+eax*4+var_20] +
mov esi [ecx] +
add esi edx +
mov [ebp+arg_0] esi +
mov esi [ecx] +
cmp [ebp+arg_0] esi +
jb loc_1032218  +
cmp [ebp+arg_0] edx +
jmp loc_1032216  +
test ecx ecx +
jz loc_103222A  +
and [ebp+var_4] 0 +
lea ecx [ebp+eax*4+var_20] +
mov edx [ecx] +
lea esi [edx+1] +
mov [ebp+arg_0] esi +
cmp esi edx +
jb loc_1032218  +
cmp esi 1 +
jnb loc_103221F  +
mov [ebp+var_4] 1 +
dec eax  +
mov edx [ebp+arg_0] +
mov [ecx] edx +
mov ecx [ebp+var_4] +
jns loc_10321FB  +
mov [ebp+arg_0] ecx +
mov ecx [ebp+var_8] +
or eax 0FFFFFFFFh +
shl eax cl +
and [edi] eax +
mov eax [ebp+var_C] +
inc eax  +
cmp eax 3 +
jge loc_103224D  +
push 3  +
pop ecx  +
lea edi [ebp+eax*4+var_20] +
sub ecx eax +
xor eax eax +
stos   +
cmp [ebp+arg_0] 0 +
jz loc_1032254  +
inc ebx  +
mov eax dword_10642F4 +
mov ecx eax +
sub ecx dword_10642F8 +
cmp ebx ecx +
jge loc_1032272  +
xor eax eax +
lea edi [ebp+var_20] +
stos   +
stos   +
stos   +
jmp loc_103247F  +
cmp ebx eax +
jg loc_1032489  +
sub eax [ebp+var_10] +
lea esi [ebp+var_2C] +
mov ecx eax +
lea edi [ebp+var_20] +
movs   +
cdq   +
and edx 1Fh +
add eax edx +
movs   +
mov edx ecx +
sar eax 5 +
and edx 8000001Fh +
movs   +
jns loc_10322A0  +
dec edx  +
or edx 0FFFFFFE0h +
inc edx  +
and [ebp+var_C] 0 +
and [ebp+arg_0] 0 +
or edi 0FFFFFFFFh +
mov ecx edx +
shl edi cl +
mov [ebp+var_4] 20h +
sub [ebp+var_4] edx +
not edi  +
mov ebx [ebp+arg_0] +
lea ebx [ebp+ebx*4+var_20] +
mov esi [ebx] +
mov ecx esi +
and ecx edi +
mov [ebp+var_10] ecx +
mov ecx edx +
shr esi cl +
mov ecx [ebp+var_4] +
or esi [ebp+var_C] +
mov [ebx] esi +
mov esi [ebp+var_10] +
shl esi cl +
inc [ebp+arg_0]  +
cmp [ebp+arg_0] 3 +
mov [ebp+var_C] esi +
jl loc_10322BB  +
mov esi eax +
push 2  +
shl esi 2 +
lea ecx [ebp+var_18] +
pop edx  +
sub ecx esi +
cmp edx eax +
jl loc_1032301  +
mov esi [ecx] +
mov [ebp+edx*4+var_20] esi +
jmp loc_1032306  +
and [ebp+edx*4+var_20] 0 +
dec edx  +
sub ecx 4 +
test edx edx +
jge loc_10322F5  +
mov esi dword_10642F8 +
dec esi  +
lea ecx [esi+1] +
mov eax ecx +
cdq   +
and edx 1Fh +
add eax edx +
sar eax 5 +
mov edx ecx +
and edx 8000001Fh +
mov [ebp+var_C] eax +
jns loc_1032335  +
dec edx  +
or edx 0FFFFFFE0h +
inc edx  +
push 1Fh  +
pop ecx  +
sub ecx edx +
xor edx edx +
inc edx  +
shl edx cl +
lea ebx [ebp+eax*4+var_20] +
mov [ebp+var_10] ecx +
test [ebx] edx +
jz loc_10323D0  +
or edx 0FFFFFFFFh +
shl edx cl +
not edx  +
test [ebp+eax*4+var_20] edx +
jmp loc_1032360  +
cmp [ebp+eax*4+var_20] 0 +
jnz loc_103236A  +
inc eax  +
cmp eax 3 +
jl loc_103235B  +
jmp loc_10323D0  +
mov eax esi +
cdq   +
push 1Fh  +
pop ecx  +
and edx ecx +
add eax edx +
sar eax 5 +
and esi 8000001Fh +
jns loc_1032384  +
dec esi  +
or esi 0FFFFFFE0h +
inc esi  +
and [ebp+arg_0] 0 +
xor edx edx +
sub ecx esi +
inc edx  +
shl edx cl +
lea ecx [ebp+eax*4+var_20] +
mov esi [ecx] +
lea edi [esi+edx] +
cmp edi esi +
jb loc_10323A0  +
cmp edi edx +
jnb loc_10323A7  +
mov [ebp+arg_0] 1 +
mov [ecx] edi +
mov ecx [ebp+arg_0] +
jmp loc_10323CD  +
test ecx ecx +
jz loc_10323D0  +
lea ecx [ebp+eax*4+var_20] +
mov edx [ecx] +
lea esi [edx+1] +
xor edi edi +
cmp esi edx +
jb loc_10323C6  +
cmp esi 1 +
jnb loc_10323C9  +
xor edi edi +
inc edi  +
mov [ecx] esi +
mov ecx edi +
dec eax  +
jns loc_10323AE  +
mov ecx [ebp+var_10] +
or eax 0FFFFFFFFh +
shl eax cl +
and [ebx] eax +
mov eax [ebp+var_C] +
inc eax  +
cmp eax 3 +
jge loc_10323F0  +
push 3  +
pop ecx  +
lea edi [ebp+eax*4+var_20] +
sub ecx eax +
xor eax eax +
stos   +
mov ecx dword_10642FC +
inc ecx  +
mov eax ecx +
cdq   +
and edx 1Fh +
add eax edx +
mov edx ecx +
sar eax 5 +
and edx 8000001Fh +
jns loc_1032411  +
dec edx  +
or edx 0FFFFFFE0h +
inc edx  +
and [ebp+var_C] 0 +
and [ebp+arg_0] 0 +
or edi 0FFFFFFFFh +
mov ecx edx +
shl edi cl +
mov [ebp+var_4] 20h +
sub [ebp+var_4] edx +
not edi  +
mov ebx [ebp+arg_0] +
lea ebx [ebp+ebx*4+var_20] +
mov esi [ebx] +
mov ecx esi +
and ecx edi +
mov [ebp+var_10] ecx +
mov ecx edx +
shr esi cl +
mov ecx [ebp+var_4] +
or esi [ebp+var_C] +
mov [ebx] esi +
mov esi [ebp+var_10] +
shl esi cl +
inc [ebp+arg_0]  +
cmp [ebp+arg_0] 3 +
mov [ebp+var_C] esi +
jl loc_103242C  +
mov esi eax +
push 2  +
shl esi 2 +
lea ecx [ebp+var_18] +
pop edx  +
sub ecx esi +
cmp edx eax +
jl loc_1032472  +
mov esi [ecx] +
mov [ebp+edx*4+var_20] esi +
jmp loc_1032477  +
and [ebp+edx*4+var_20] 0 +
dec edx  +
sub ecx 4 +
test edx edx +
jge loc_1032466  +
push 2  +
xor ebx ebx +
pop eax  +
jmp loc_10325E3  +
cmp ebx dword_10642F0 +
mov ecx dword_10642FC +
jl loc_1032548  +
xor eax eax +
lea edi [ebp+var_20] +
stos   +
stos   +
stos   +
or [ebp+var_20] 80000000h +
mov eax ecx +
cdq   +
and edx 1Fh +
add eax edx +
mov edx ecx +
sar eax 5 +
and edx 8000001Fh +
jns loc_10324C4  +
dec edx  +
or edx 0FFFFFFE0h +
inc edx  +
and [ebp+var_C] 0 +
and [ebp+arg_0] 0 +
or edi 0FFFFFFFFh +
mov ecx edx +
shl edi cl +
mov [ebp+var_4] 20h +
sub [ebp+var_4] edx +
not edi  +
mov ebx [ebp+arg_0] +
lea ebx [ebp+ebx*4+var_20] +
mov esi [ebx] +
mov ecx esi +
and ecx edi +
mov [ebp+var_10] ecx +
mov ecx edx +
shr esi cl +
mov ecx [ebp+var_4] +
or esi [ebp+var_C] +
mov [ebx] esi +
mov esi [ebp+var_10] +
shl esi cl +
inc [ebp+arg_0]  +
cmp [ebp+arg_0] 3 +
mov [ebp+var_C] esi +
jl loc_10324DF  +
mov esi eax +
push 2  +
shl esi 2 +
lea ecx [ebp+var_18] +
pop edx  +
sub ecx esi +
cmp edx eax +
jl loc_1032525  +
mov esi [ecx] +
mov [ebp+edx*4+var_20] esi +
jmp loc_103252A  +
and [ebp+edx*4+var_20] 0 +
dec edx  +
sub ecx 4 +
test edx edx +
jge loc_1032519  +
mov eax dword_10642F0 +
mov ecx dword_1064304 +
lea ebx [ecx+eax] +
xor eax eax +
inc eax  +
jmp loc_10325E3  +
mov eax dword_1064304 +
and [ebp+var_20] 7FFFFFFFh +
add ebx eax +
mov eax ecx +
cdq   +
and edx 1Fh +
add eax edx +
mov edx ecx +
sar eax 5 +
and edx 8000001Fh +
jns loc_1032570  +
dec edx  +
or edx 0FFFFFFE0h +
inc edx  +
and [ebp+var_C] 0 +
and [ebp+arg_0] 0 +
or esi 0FFFFFFFFh +
mov ecx edx +
shl esi cl +
mov [ebp+var_4] 20h +
sub [ebp+var_4] edx +
not esi  +
mov ecx [ebp+arg_0] +
mov edi [ebp+ecx*4+var_20] +
mov ecx edi +
and ecx esi +
mov [ebp+var_10] ecx +
mov ecx edx +
shr edi cl +
mov ecx [ebp+arg_0] +
or edi [ebp+var_C] +
mov [ebp+ecx*4+var_20] edi +
mov edi [ebp+var_10] +
mov ecx [ebp+var_4] +
shl edi cl +
inc [ebp+arg_0]  +
cmp [ebp+arg_0] 3 +
mov [ebp+var_C] edi +
jl loc_103258B  +
mov esi eax +
push 2  +
shl esi 2 +
lea ecx [ebp+var_18] +
pop edx  +
sub ecx esi +
cmp edx eax +
jl loc_10325D4  +
mov esi [ecx] +
mov [ebp+edx*4+var_20] esi +
jmp loc_10325D9  +
and [ebp+edx*4+var_20] 0 +
dec edx  +
sub ecx 4 +
test edx edx +
jge loc_10325C8  +
xor eax eax +
pop esi  +
push 1Fh  +
pop ecx  +
sub ecx dword_10642FC +
shl ebx cl +
mov ecx [ebp+var_14] +
neg ecx  +
sbb ecx ecx +
and ecx 80000000h +
or ebx ecx +
mov ecx dword_1064300 +
or ebx [ebp+var_20] +
cmp ecx 40h +
jnz loc_1032619  +
mov ecx [ebp+arg_4] +
mov edx [ebp+var_1C] +
mov [ecx+4] ebx +
mov [ecx] edx +
jmp loc_1032623  +
cmp ecx 20h +
jnz loc_1032623  +
mov ecx [ebp+arg_4] +
mov [ecx] ebx +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
mov eax [ebp+arg_0] +
movzx ecx word ptr [eax+0Ah] +
push ebx  +
mov ebx ecx +
and ecx 8000h +
mov [ebp+var_14] ecx +
mov ecx [eax+6] +
mov [ebp+var_20] ecx +
mov ecx [eax+2] +
movzx eax word ptr [eax] +
and ebx 7FFFh +
sub ebx 3FFFh +
shl eax 10h +
push edi  +
mov [ebp+var_1C] ecx +
mov [ebp+var_18] eax +
cmp ebx 0FFFFC001h +
jnz loc_1032698  +
xor ebx ebx +
xor eax eax +
cmp [ebp+eax*4+var_20] ebx +
jnz loc_1032688  +
inc eax  +
cmp eax 3 +
jl loc_1032675  +
xor eax eax +
jmp loc_1032B2D  +
xor eax eax +
lea edi [ebp+var_20] +
stos   +
stos   +
push 2  +
stos   +
pop eax  +
jmp loc_1032B2D  +
and [ebp+arg_0] 0 +
push esi  +
lea esi [ebp+var_20] +
lea edi [ebp+var_2C] +
movs   +
movs   +
movs   +
mov esi dword_1064310 +
dec esi  +
lea ecx [esi+1] +
mov eax ecx +
cdq   +
and edx 1Fh +
add eax edx +
sar eax 5 +
mov edx ecx +
and edx 8000001Fh +
mov [ebp+var_10] ebx +
mov [ebp+var_C] eax +
jns loc_10326D0  +
dec edx  +
or edx 0FFFFFFE0h +
inc edx  +
lea edi [ebp+eax*4+var_20] +
push 1Fh  +
xor eax eax +
pop ecx  +
sub ecx edx +
inc eax  +
shl eax cl +
mov [ebp+var_8] ecx +
test [edi] eax +
jz loc_1032776  +
mov eax [ebp+var_C] +
or edx 0FFFFFFFFh +
shl edx cl +
not edx  +
test [ebp+eax*4+var_20] edx +
jmp loc_10326FE  +
cmp [ebp+eax*4+var_20] 0 +
jnz loc_1032708  +
inc eax  +
cmp eax 3 +
jl loc_10326F9  +
jmp loc_1032776  +
mov eax esi +
cdq   +
push 1Fh  +
pop ecx  +
and edx ecx +
add eax edx +
sar eax 5 +
and esi 8000001Fh +
jns loc_1032722  +
dec esi  +
or esi 0FFFFFFE0h +
inc esi  +
and [ebp+var_4] 0 +
sub ecx esi +
xor edx edx +
inc edx  +
shl edx cl +
lea ecx [ebp+eax*4+var_20] +
mov esi [ecx] +
add esi edx +
mov [ebp+arg_0] esi +
mov esi [ecx] +
cmp [ebp+arg_0] esi +
jb loc_1032761  +
cmp [ebp+arg_0] edx +
jmp loc_103275F  +
test ecx ecx +
jz loc_1032773  +
and [ebp+var_4] 0 +
lea ecx [ebp+eax*4+var_20] +
mov edx [ecx] +
lea esi [edx+1] +
mov [ebp+arg_0] esi +
cmp esi edx +
jb loc_1032761  +
cmp esi 1 +
jnb loc_1032768  +
mov [ebp+var_4] 1 +
dec eax  +
mov edx [ebp+arg_0] +
mov [ecx] edx +
mov ecx [ebp+var_4] +
jns loc_1032744  +
mov [ebp+arg_0] ecx +
mov ecx [ebp+var_8] +
or eax 0FFFFFFFFh +
shl eax cl +
and [edi] eax +
mov eax [ebp+var_C] +
inc eax  +
cmp eax 3 +
jge loc_1032796  +
push 3  +
pop ecx  +
lea edi [ebp+eax*4+var_20] +
sub ecx eax +
xor eax eax +
stos   +
cmp [ebp+arg_0] 0 +
jz loc_103279D  +
inc ebx  +
mov eax dword_106430C +
mov ecx eax +
sub ecx dword_1064310 +
cmp ebx ecx +
jge loc_10327BB  +
xor eax eax +
lea edi [ebp+var_20] +
stos   +
stos   +
stos   +
jmp loc_10329C8  +
cmp ebx eax +
jg loc_10329D2  +
sub eax [ebp+var_10] +
lea esi [ebp+var_2C] +
mov ecx eax +
lea edi [ebp+var_20] +
movs   +
cdq   +
and edx 1Fh +
add eax edx +
movs   +
mov edx ecx +
sar eax 5 +
and edx 8000001Fh +
movs   +
jns loc_10327E9  +
dec edx  +
or edx 0FFFFFFE0h +
inc edx  +
and [ebp+var_C] 0 +
and [ebp+arg_0] 0 +
or edi 0FFFFFFFFh +
mov ecx edx +
shl edi cl +
mov [ebp+var_4] 20h +
sub [ebp+var_4] edx +
not edi  +
mov ebx [ebp+arg_0] +
lea ebx [ebp+ebx*4+var_20] +
mov esi [ebx] +
mov ecx esi +
and ecx edi +
mov [ebp+var_10] ecx +
mov ecx edx +
shr esi cl +
mov ecx [ebp+var_4] +
or esi [ebp+var_C] +
mov [ebx] esi +
mov esi [ebp+var_10] +
shl esi cl +
inc [ebp+arg_0]  +
cmp [ebp+arg_0] 3 +
mov [ebp+var_C] esi +
jl loc_1032804  +
mov esi eax +
push 2  +
shl esi 2 +
lea ecx [ebp+var_18] +
pop edx  +
sub ecx esi +
cmp edx eax +
jl loc_103284A  +
mov esi [ecx] +
mov [ebp+edx*4+var_20] esi +
jmp loc_103284F  +
and [ebp+edx*4+var_20] 0 +
dec edx  +
sub ecx 4 +
test edx edx +
jge loc_103283E  +
mov esi dword_1064310 +
dec esi  +
lea ecx [esi+1] +
mov eax ecx +
cdq   +
and edx 1Fh +
add eax edx +
sar eax 5 +
mov edx ecx +
and edx 8000001Fh +
mov [ebp+var_C] eax +
jns loc_103287E  +
dec edx  +
or edx 0FFFFFFE0h +
inc edx  +
push 1Fh  +
pop ecx  +
sub ecx edx +
xor edx edx +
inc edx  +
shl edx cl +
lea ebx [ebp+eax*4+var_20] +
mov [ebp+var_10] ecx +
test [ebx] edx +
jz loc_1032919  +
or edx 0FFFFFFFFh +
shl edx cl +
not edx  +
test [ebp+eax*4+var_20] edx +
jmp loc_10328A9  +
cmp [ebp+eax*4+var_20] 0 +
jnz loc_10328B3  +
inc eax  +
cmp eax 3 +
jl loc_10328A4  +
jmp loc_1032919  +
mov eax esi +
cdq   +
push 1Fh  +
pop ecx  +
and edx ecx +
add eax edx +
sar eax 5 +
and esi 8000001Fh +
jns loc_10328CD  +
dec esi  +
or esi 0FFFFFFE0h +
inc esi  +
and [ebp+arg_0] 0 +
xor edx edx +
sub ecx esi +
inc edx  +
shl edx cl +
lea ecx [ebp+eax*4+var_20] +
mov esi [ecx] +
lea edi [esi+edx] +
cmp edi esi +
jb loc_10328E9  +
cmp edi edx +
jnb loc_10328F0  +
mov [ebp+arg_0] 1 +
mov [ecx] edi +
mov ecx [ebp+arg_0] +
jmp loc_1032916  +
test ecx ecx +
jz loc_1032919  +
lea ecx [ebp+eax*4+var_20] +
mov edx [ecx] +
lea esi [edx+1] +
xor edi edi +
cmp esi edx +
jb loc_103290F  +
cmp esi 1 +
jnb loc_1032912  +
xor edi edi +
inc edi  +
mov [ecx] esi +
mov ecx edi +
dec eax  +
jns loc_10328F7  +
mov ecx [ebp+var_10] +
or eax 0FFFFFFFFh +
shl eax cl +
and [ebx] eax +
mov eax [ebp+var_C] +
inc eax  +
cmp eax 3 +
jge loc_1032939  +
push 3  +
pop ecx  +
lea edi [ebp+eax*4+var_20] +
sub ecx eax +
xor eax eax +
stos   +
mov ecx dword_1064314 +
inc ecx  +
mov eax ecx +
cdq   +
and edx 1Fh +
add eax edx +
mov edx ecx +
sar eax 5 +
and edx 8000001Fh +
jns loc_103295A  +
dec edx  +
or edx 0FFFFFFE0h +
inc edx  +
and [ebp+var_C] 0 +
and [ebp+arg_0] 0 +
or edi 0FFFFFFFFh +
mov ecx edx +
shl edi cl +
mov [ebp+var_4] 20h +
sub [ebp+var_4] edx +
not edi  +
mov ebx [ebp+arg_0] +
lea ebx [ebp+ebx*4+var_20] +
mov esi [ebx] +
mov ecx esi +
and ecx edi +
mov [ebp+var_10] ecx +
mov ecx edx +
shr esi cl +
mov ecx [ebp+var_4] +
or esi [ebp+var_C] +
mov [ebx] esi +
mov esi [ebp+var_10] +
shl esi cl +
inc [ebp+arg_0]  +
cmp [ebp+arg_0] 3 +
mov [ebp+var_C] esi +
jl loc_1032975  +
mov esi eax +
push 2  +
shl esi 2 +
lea ecx [ebp+var_18] +
pop edx  +
sub ecx esi +
cmp edx eax +
jl loc_10329BB  +
mov esi [ecx] +
mov [ebp+edx*4+var_20] esi +
jmp loc_10329C0  +
and [ebp+edx*4+var_20] 0 +
dec edx  +
sub ecx 4 +
test edx edx +
jge loc_10329AF  +
push 2  +
xor ebx ebx +
pop eax  +
jmp loc_1032B2C  +
cmp ebx dword_1064308 +
mov ecx dword_1064314 +
jl loc_1032A91  +
xor eax eax +
lea edi [ebp+var_20] +
stos   +
stos   +
stos   +
or [ebp+var_20] 80000000h +
mov eax ecx +
cdq   +
and edx 1Fh +
add eax edx +
mov edx ecx +
sar eax 5 +
and edx 8000001Fh +
jns loc_1032A0D  +
dec edx  +
or edx 0FFFFFFE0h +
inc edx  +
and [ebp+var_C] 0 +
and [ebp+arg_0] 0 +
or edi 0FFFFFFFFh +
mov ecx edx +
shl edi cl +
mov [ebp+var_4] 20h +
sub [ebp+var_4] edx +
not edi  +
mov ebx [ebp+arg_0] +
lea ebx [ebp+ebx*4+var_20] +
mov esi [ebx] +
mov ecx esi +
and ecx edi +
mov [ebp+var_10] ecx +
mov ecx edx +
shr esi cl +
mov ecx [ebp+var_4] +
or esi [ebp+var_C] +
mov [ebx] esi +
mov esi [ebp+var_10] +
shl esi cl +
inc [ebp+arg_0]  +
cmp [ebp+arg_0] 3 +
mov [ebp+var_C] esi +
jl loc_1032A28  +
mov esi eax +
push 2  +
shl esi 2 +
lea ecx [ebp+var_18] +
pop edx  +
sub ecx esi +
cmp edx eax +
jl loc_1032A6E  +
mov esi [ecx] +
mov [ebp+edx*4+var_20] esi +
jmp loc_1032A73  +
and [ebp+edx*4+var_20] 0 +
dec edx  +
sub ecx 4 +
test edx edx +
jge loc_1032A62  +
mov eax dword_1064308 +
mov ecx dword_106431C +
lea ebx [ecx+eax] +
xor eax eax +
inc eax  +
jmp loc_1032B2C  +
mov eax dword_106431C +
and [ebp+var_20] 7FFFFFFFh +
add ebx eax +
mov eax ecx +
cdq   +
and edx 1Fh +
add eax edx +
mov edx ecx +
sar eax 5 +
and edx 8000001Fh +
jns loc_1032AB9  +
dec edx  +
or edx 0FFFFFFE0h +
inc edx  +
and [ebp+var_C] 0 +
and [ebp+arg_0] 0 +
or esi 0FFFFFFFFh +
mov ecx edx +
shl esi cl +
mov [ebp+var_4] 20h +
sub [ebp+var_4] edx +
not esi  +
mov ecx [ebp+arg_0] +
mov edi [ebp+ecx*4+var_20] +
mov ecx edi +
and ecx esi +
mov [ebp+var_10] ecx +
mov ecx edx +
shr edi cl +
mov ecx [ebp+arg_0] +
or edi [ebp+var_C] +
mov [ebp+ecx*4+var_20] edi +
mov edi [ebp+var_10] +
mov ecx [ebp+var_4] +
shl edi cl +
inc [ebp+arg_0]  +
cmp [ebp+arg_0] 3 +
mov [ebp+var_C] edi +
jl loc_1032AD4  +
mov esi eax +
push 2  +
shl esi 2 +
lea ecx [ebp+var_18] +
pop edx  +
sub ecx esi +
cmp edx eax +
jl loc_1032B1D  +
mov esi [ecx] +
mov [ebp+edx*4+var_20] esi +
jmp loc_1032B22  +
and [ebp+edx*4+var_20] 0 +
dec edx  +
sub ecx 4 +
test edx edx +
jge loc_1032B11  +
xor eax eax +
pop esi  +
push 1Fh  +
pop ecx  +
sub ecx dword_1064314 +
shl ebx cl +
mov ecx [ebp+var_14] +
neg ecx  +
sbb ecx ecx +
and ecx 80000000h +
or ebx ecx +
mov ecx dword_1064318 +
or ebx [ebp+var_20] +
cmp ecx 40h +
jnz loc_1032B62  +
mov ecx [ebp+arg_4] +
mov edx [ebp+var_1C] +
mov [ecx+4] ebx +
mov [ecx] edx +
jmp loc_1032B6C  +
cmp ecx 20h +
jnz loc_1032B6C  +
mov ecx [ebp+arg_4] +
mov [ecx] ebx +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_1063194 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push ebx  +
push esi  +
xor esi esi +
push edi  +
mov [ebp+var_18] 404Eh +
mov [eax] esi +
mov [eax+4] esi +
mov [eax+8] esi +
cmp [ebp+arg_4] esi +
jbe loc_1032CED  +
mov edx [eax] +
mov ebx [eax+4] +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
mov ecx edx +
shr ecx 1Fh +
lea edi [edx+edx] +
lea edx [ebx+ebx] +
or edx ecx +
mov ecx [eax+8] +
mov esi ebx +
shr esi 1Fh +
add ecx ecx +
or ecx esi +
mov [ebp+var_14] edi +
mov esi edi +
and [ebp+var_14] 0 +
mov ebx edx +
shr ebx 1Fh +
add ecx ecx +
shr edi 1Fh +
or ecx ebx +
mov ebx [ebp+var_10] +
add esi esi +
add edx edx +
or edx edi +
lea edi [esi+ebx] +
mov [eax] esi +
mov [eax+4] edx +
mov [eax+8] ecx +
cmp edi esi +
jb loc_1032BFE  +
cmp edi ebx +
jnb loc_1032C05  +
mov [ebp+var_14] 1 +
xor ebx ebx +
mov [eax] edi +
cmp [ebp+var_14] ebx +
jz loc_1032C28  +
lea esi [edx+1] +
cmp esi edx +
jb loc_1032C1A  +
cmp esi 1 +
jnb loc_1032C1D  +
xor ebx ebx +
inc ebx  +
mov [eax+4] esi +
test ebx ebx +
jz loc_1032C28  +
inc ecx  +
mov [eax+8] ecx +
mov ecx [eax+4] +
mov edx [ebp+var_C] +
lea ebx [ecx+edx] +
xor esi esi +
cmp ebx ecx +
jb loc_1032C3B  +
cmp ebx edx +
jnb loc_1032C3E  +
xor esi esi +
inc esi  +
mov [eax+4] ebx +
test esi esi +
jz loc_1032C48  +
inc dword ptr [eax+8]  +
mov ecx [ebp+var_8] +
add [eax+8] ecx +
and [ebp+var_14] 0 +
lea ecx [edi+edi] +
mov edx edi +
shr edx 1Fh +
lea edi [ebx+ebx] +
or edi edx +
mov edx [eax+8] +
mov esi ebx +
shr esi 1Fh +
lea ebx [edx+edx] +
mov edx [ebp+arg_0] +
or ebx esi +
mov [eax] ecx +
mov [eax+4] edi +
mov [eax+8] ebx +
movsx edx byte ptr [edx] +
lea esi [ecx+edx] +
mov [ebp+var_10] edx +
cmp esi ecx +
jb loc_1032C88  +
cmp esi edx +
jnb loc_1032C8F  +
mov [ebp+var_14] 1 +
cmp [ebp+var_14] 0 +
mov [eax] esi +
jz loc_1032CB3  +
lea ecx [edi+1] +
xor edx edx +
cmp ecx edi +
jb loc_1032CA5  +
cmp ecx 1 +
jnb loc_1032CA8  +
xor edx edx +
inc edx  +
mov [eax+4] ecx +
test edx edx +
jz loc_1032CB3  +
inc ebx  +
mov [eax+8] ebx +
dec [ebp+arg_4]  +
inc [ebp+arg_0]  +
cmp [ebp+arg_4] 0 +
ja loc_1032BA7  +
xor esi esi +
jmp loc_1032CED  +
mov ecx [eax+4] +
mov edx ecx +
shr edx 10h +
mov [eax+8] edx +
mov edx [eax] +
mov edi edx +
shl ecx 10h +
shr edi 10h +
or ecx edi +
shl edx 10h +
add [ebp+var_18] 0FFF0h +
mov [eax+4] ecx +
mov [eax] edx +
cmp [eax+8] esi +
jz loc_1032CC7  +
mov ebx 8000h +
test [eax+8] ebx +
jnz loc_1032D2C  +
mov esi [eax] +
mov edi [eax+4] +
add [ebp+var_18] 0FFFFh +
mov ecx esi +
add esi esi +
shr ecx 1Fh +
mov [eax] esi +
lea esi [edi+edi] +
or esi ecx +
mov ecx [eax+8] +
mov edx edi +
shr edx 1Fh +
add ecx ecx +
or ecx edx +
mov [eax+4] esi +
mov [eax+8] ecx +
test ecx ebx +
jz loc_1032CFC  +
mov cx word ptr [ebp+var_18] +
mov [eax+0Ah] cx +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1021557  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 7Ch +
mov eax dword_1063194 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_8] +
xor ecx ecx +
push ebx  +
push esi  +
xor esi esi +
mov [ebp+var_78] eax +
mov eax [ebp+arg_4] +
inc esi  +
push edi  +
mov [ebp+var_70] eax +
lea edi [ebp+var_20] +
mov [ebp+var_74] ecx +
mov [ebp+var_68] esi +
mov [ebp+var_4C] ecx +
mov [ebp+var_58] ecx +
mov [ebp+var_5C] ecx +
mov [ebp+var_60] ecx +
mov [ebp+var_64] ecx +
mov [ebp+var_50] ecx +
mov [ebp+var_6C] ecx +
mov [ebp+var_54] edx +
mov al [edx] +
cmp al 20h +
jz loc_1032DA4  +
cmp al 9 +
jz loc_1032DA4  +
cmp al 0Ah +
jz loc_1032DA4  +
cmp al 0Dh +
jnz loc_1032DA7  +
inc edx  +
jmp loc_1032D92  +
mov bl 30h +
mov al [edx] +
inc edx  +
cmp ecx 0Bh +
ja loc_1032FA2  +
jmp ds:off_10333A8[ecx*4]  +
mov cl al +
sub cl 31h +
cmp cl 8 +
ja loc_1032DCC  +
push 3  +
pop ecx  +
dec edx  +
jmp loc_1032DA9  +
cmp al [ebp+arg_1C] +
jnz loc_1032DD6  +
push 5  +
pop ecx  +
jmp loc_1032DA9  +
movsx eax al +
sub eax 2Bh +
jz loc_1032DFB  +
dec eax  +
dec eax  +
jz loc_1032DEF  +
sub eax 3 +
jnz loc_1032F40  +
mov ecx esi +
jmp loc_1032DA9  +
push 2  +
pop ecx  +
mov [ebp+var_74] 8000h +
jmp loc_1032DA9  +
and [ebp+var_74] 0 +
push 2  +
pop ecx  +
jmp loc_1032DA9  +
mov cl al +
sub cl 31h +
mov [ebp+var_58] esi +
cmp cl 8 +
jbe loc_1032DC6  +
cmp al [ebp+arg_1C] +
jnz loc_1032E1A  +
push 4  +
jmp loc_1032DD3  +
cmp al 2Bh +
jz loc_1032E46  +
cmp al 2Dh +
jz loc_1032E46  +
cmp al bl +
jz loc_1032DEB  +
cmp al 43h +
jle loc_1032F40  +
cmp al 45h +
jle loc_1032E42  +
cmp al 63h +
jle loc_1032F40  +
cmp al 65h +
jg loc_1032F40  +
push 6  +
jmp loc_1032DD3  +
dec edx  +
push 0Bh  +
jmp loc_1032DD3  +
mov cl al +
sub cl 31h +
cmp cl 8 +
jbe loc_1032DC6  +
cmp al [ebp+arg_1C] +
jz loc_1032DD1  +
cmp al bl +
jz loc_1032DEB  +
mov edx [ebp+var_54] +
jmp loc_1032F6B  +
mov [ebp+var_58] esi +
jmp loc_1032E8D  +
cmp al 39h +
jg loc_1032E91  +
cmp [ebp+var_4C] 19h +
jnb loc_1032E87  +
inc [ebp+var_4C]  +
sub al bl +
mov [edi] al +
inc edi  +
jmp loc_1032E8A  +
inc [ebp+var_50]  +
mov al [edx] +
inc edx  +
cmp al bl +
jge loc_1032E73  +
cmp al [ebp+arg_1C] +
jz loc_1032E16  +
cmp al 2Bh +
jz loc_1032E46  +
cmp al 2Dh +
jz loc_1032E46  +
jmp loc_1032E26  +
cmp [ebp+var_4C] 0 +
mov [ebp+var_58] esi +
mov [ebp+var_5C] esi +
jnz loc_1032ED2  +
jmp loc_1032EB4  +
dec [ebp+var_50]  +
mov al [edx] +
inc edx  +
cmp al bl +
jz loc_1032EAE  +
jmp loc_1032ED2  +
cmp al 39h +
jg loc_1032E96  +
cmp [ebp+var_4C] 19h +
jnb loc_1032ECF  +
inc [ebp+var_4C]  +
sub al bl +
mov [edi] al +
inc edi  +
dec [ebp+var_50]  +
mov al [edx] +
inc edx  +
cmp al bl +
jge loc_1032EBA  +
jmp loc_1032E96  +
sub al bl +
mov [ebp+var_5C] esi +
cmp al 9 +
ja loc_1032E66  +
push 4  +
jmp loc_1032DC8  +
lea ecx [edx-2] +
mov [ebp+var_54] ecx +
mov cl al +
sub cl 31h +
cmp cl 8 +
ja loc_1032EFF  +
push 9  +
jmp loc_1032DC8  +
movsx eax al +
sub eax 2Bh +
jz loc_1032F27  +
dec eax  +
dec eax  +
jz loc_1032F1B  +
sub eax 3 +
jnz loc_1032E66  +
push 8  +
jmp loc_1032DD3  +
or [ebp+var_68] 0FFFFFFFFh +
push 7  +
pop ecx  +
jmp loc_1032DA9  +
push 7  +
jmp loc_1032DD3  +
mov [ebp+var_60] esi +
jmp loc_1032F36  +
mov al [edx] +
inc edx  +
cmp al bl +
jz loc_1032F33  +
sub al 31h +
cmp al 8 +
jbe loc_1032EF8  +
dec edx  +
jmp loc_1032F6B  +
mov cl al +
sub cl 31h +
cmp cl 8 +
jbe loc_1032EF8  +
cmp al bl +
jmp loc_1032F0E  +
cmp [ebp+arg_18] 0 +
jz loc_1032F9E  +
movsx eax al +
sub eax 2Bh +
lea ecx [edx-1] +
mov [ebp+var_54] ecx +
jz loc_1032F27  +
dec eax  +
dec eax  +
jz loc_1032F1B  +
mov edx ecx +
cmp [ebp+var_58] 0 +
mov eax [ebp+var_70] +
mov [eax] edx +
jz loc_1033353  +
push 18h  +
pop eax  +
cmp [ebp+var_4C] eax +
jbe loc_1032F92  +
cmp [ebp+var_9] 5 +
jl loc_1032F8B  +
inc [ebp+var_9]  +
dec edi  +
inc [ebp+var_50]  +
mov [ebp+var_4C] eax +
cmp [ebp+var_4C] 0 +
jbe loc_103337A  +
jmp loc_1032FF7  +
push 0Ah  +
pop ecx  +
dec edx  +
cmp ecx 0Ah +
jnz loc_1032DA9  +
jmp loc_1032F6B  +
mov [ebp+var_60] esi +
xor ecx ecx +
jmp loc_1032FCD  +
cmp al 39h +
jg loc_1032FD8  +
imul ecx ecx +
movsx esi al +
lea ecx [ecx+esi-30h] +
cmp ecx 1450h +
jg loc_1032FD3  +
mov al [edx] +
inc edx  +
cmp al bl +
jge loc_1032FB4  +
jmp loc_1032FD8  +
mov ecx 1451h +
mov [ebp+var_64] ecx +
jmp loc_1032FE8  +
cmp al 39h +
jg loc_1032F40  +
mov al [edx] +
inc edx  +
cmp al bl +
jge loc_1032FDD  +
jmp loc_1032F40  +
dec [ebp+var_4C]  +
inc [ebp+var_50]  +
dec edi  +
cmp byte ptr [edi] 0 +
jz loc_1032FF1  +
lea eax [ebp+var_3C] +
push eax  +
push [ebp+var_4C]  +
lea eax [ebp+var_20] +
push eax  +
call sub_1032B75  +
mov eax [ebp+var_64] +
xor edx edx +
add esp 0Ch +
cmp [ebp+var_68] edx +
jge loc_103301C  +
neg eax  +
add eax [ebp+var_50] +
cmp [ebp+var_60] edx +
jnz loc_1033027  +
add eax [ebp+arg_10] +
cmp [ebp+var_5C] edx +
jnz loc_103302F  +
sub eax [ebp+arg_14] +
cmp eax 1450h +
jg loc_103335C  +
cmp eax 0FFFFEBB0h +
jl loc_1033373  +
mov ecx offset unk_1064320 +
sub ecx 60h +
mov [ebp+var_54] eax +
cmp eax edx +
jz loc_1033341  +
jge loc_1033067  +
neg eax  +
mov ecx offset unk_1064480 +
mov [ebp+var_54] eax +
sub ecx 60h +
cmp [ebp+arg_C] edx +
jnz loc_1033072  +
xor eax eax +
mov word ptr [ebp+var_3C] ax +
cmp [ebp+var_54] edx +
jz loc_1033341  +
jmp loc_1033082  +
mov ecx [ebp+var_7C] +
xor edx edx +
mov eax [ebp+var_54] +
sar [ebp+var_54] 3 +
add ecx 54h +
and eax 7 +
mov [ebp+var_7C] ecx +
cmp eax edx +
jz loc_1033337  +
imul eax eax +
add eax ecx +
mov ebx eax +
mov eax 8000h +
cmp [ebx] ax +
jb loc_10330B9  +
mov esi ebx +
lea edi [ebp+var_48] +
movs   +
movs   +
movs   +
dec [ebp+var_48+2]  +
lea ebx [ebp+var_48] +
movzx ecx word ptr [ebx+0Ah] +
xor eax eax +
mov [ebp+var_50] eax +
mov [ebp+var_2C] eax +
mov [ebp+var_28] eax +
mov [ebp+var_24] eax +
mov eax [ebp+var_32] +
mov esi ecx +
mov edx 7FFFh +
xor esi eax +
and eax edx +
and ecx edx +
and esi 8000h +
mov edi 7FFFh +
lea edx [ecx+eax] +
mov [ebp+var_70] esi +
movzx edx dx +
cmp ax di +
jnb loc_1033319  +
cmp cx di +
jnb loc_1033319  +
mov edi 0BFFDh +
cmp dx di +
ja loc_1033319  +
mov esi 3FBFh +
cmp dx si +
ja loc_1033126  +
xor eax eax +
mov [ebp+var_38] eax +
mov [ebp+var_3C] eax +
jmp loc_1033334  +
xor esi esi +
cmp ax si +
jnz loc_103314C  +
inc edx  +
test dword ptr [ebp-34h] 7FFFFFFFh +
jnz loc_103314C  +
cmp [ebp+var_38] esi +
jnz loc_103314C  +
cmp [ebp+var_3C] esi +
jnz loc_103314C  +
xor eax eax +
mov word ptr [ebp+var_32] ax +
jmp loc_1033337  +
cmp cx si +
jnz loc_1033172  +
inc edx  +
test dword ptr [ebx+8] 7FFFFFFFh +
jnz loc_1033172  +
cmp [ebx+4] esi +
jnz loc_1033172  +
cmp [ebx] esi +
jnz loc_1033172  +
mov [ebp-34h] esi +
mov [ebp+var_38] esi +
mov [ebp+var_3C] esi +
jmp loc_1033337  +
mov [ebp+var_68] esi +
lea edi [ebp+var_28] +
mov [ebp+var_58] 5 +
mov eax [ebp+var_68] +
mov ecx [ebp+var_58] +
add eax eax +
mov [ebp+var_64] ecx +
test ecx ecx +
jle loc_10331E0  +
lea eax [ebp+eax+var_3C] +
mov [ebp+var_5C] eax +
lea eax [ebx+8] +
mov [ebp+var_60] eax +
mov eax [ebp+var_5C] +
mov ecx [ebp+var_60] +
movzx ecx word ptr [ecx] +
movzx eax word ptr [eax] +
and [ebp+var_4C] 0 +
imul eax ecx +
mov ecx [edi-4] +
lea esi [ecx+eax] +
cmp esi ecx +
jb loc_10331BC  +
cmp esi eax +
jnb loc_10331C3  +
mov [ebp+var_4C] 1 +
cmp [ebp+var_4C] 0 +
mov [edi-4] esi +
jz loc_10331CF  +
inc word ptr [edi]  +
add [ebp+var_5C] 2 +
sub [ebp+var_60] 2 +
dec [ebp+var_64]  +
cmp [ebp+var_64] 0 +
jg loc_103319B  +
inc edi  +
inc edi  +
inc [ebp+var_68]  +
dec [ebp+var_58]  +
cmp [ebp+var_58] 0 +
jg loc_103317F  +
add edx 0C002h +
test dx dx +
jle loc_1033230  +
mov edi [ebp+var_24] +
test edi edi +
js loc_103322B  +
mov esi [ebp+var_28] +
mov eax [ebp+var_2C] +
shl [ebp+var_2C] 1 +
shr eax 1Fh +
mov ecx esi +
add esi esi +
or esi eax +
shr ecx 1Fh +
lea eax [edi+edi] +
or eax ecx +
add edx 0FFFFh +
mov [ebp+var_28] esi +
mov [ebp+var_24] eax +
test dx dx +
jg loc_10331F9  +
test dx dx +
jg loc_103327D  +
add edx 0FFFFh +
test dx dx +
jge loc_103327D  +
mov eax edx +
neg eax  +
movzx esi ax +
add edx esi +
test byte ptr [ebp+var_2C] 1 +
jz loc_103324D  +
inc [ebp+var_50]  +
mov eax [ebp+var_24] +
mov edi [ebp+var_28] +
mov ecx [ebp+var_28] +
shr [ebp+var_24] 1 +
shl eax 1Fh +
shr edi 1 +
or edi eax +
mov eax [ebp+var_2C] +
shl ecx 1Fh +
shr eax 1 +
or eax ecx +
dec esi  +
mov [ebp+var_28] edi +
mov [ebp+var_2C] eax +
jnz loc_1033244  +
cmp [ebp+var_50] esi +
jz loc_103327D  +
or word ptr [ebp+var_2C] 1 +
mov eax 8000h +
mov ecx eax +
cmp word ptr [ebp+var_2C] cx +
ja loc_103329B  +
mov ecx [ebp+var_2C] +
and ecx 1FFFFh +
cmp ecx 18000h +
jnz loc_10332CF  +
cmp [ebp+var_2C+2] 0FFFFFFFFh +
jnz loc_10332CC  +
and [ebp+var_2C+2] 0 +
cmp [ebp+var_28+2] 0FFFFFFFFh +
jnz loc_10332C7  +
and [ebp+var_28+2] 0 +
mov ecx 0FFFFh +
cmp word ptr [ebp+var_24+2] cx +
jnz loc_10332C1  +
mov word ptr [ebp+var_24+2] ax +
inc edx  +
jmp loc_10332CF  +
inc word ptr [ebp+var_24+2]  +
jmp loc_10332CF  +
inc [ebp+var_28+2]  +
jmp loc_10332CF  +
inc [ebp+var_2C+2]  +
mov eax 7FFFh +
cmp dx ax +
jb loc_10332FC  +
xor eax eax +
xor ecx ecx +
cmp word ptr [ebp+var_70] ax +
mov [ebp+var_38] eax +
setz cl  +
mov [ebp+var_3C] eax +
dec ecx  +
and ecx 80000000h +
add ecx 7FFF8000h +
mov [ebp-34h] ecx +
jmp loc_1033337  +
mov ax word ptr [ebp+var_2C+2] +
or edx [ebp+var_70] +
mov word ptr [ebp+var_3C] ax +
mov eax [ebp+var_28] +
mov [ebp+var_3C+2] eax +
mov eax [ebp+var_24] +
mov [ebp+var_38+2] eax +
mov word ptr [ebp+var_32] dx +
jmp loc_1033337  +
xor eax eax +
test si si +
setz al  +
and [ebp+var_38] 0 +
dec eax  +
and eax 80000000h +
add eax 7FFF8000h +
and [ebp+var_3C] 0 +
mov [ebp-34h] eax +
cmp [ebp+var_54] 0 +
jnz loc_103307D  +
mov eax [ebp-34h] +
movzx ecx word ptr [ebp+var_3C] +
mov esi [ebp+var_3C+2] +
mov edx [ebp+var_38+2] +
shr eax 10h +
jmp loc_1033382  +
mov [ebp+var_6C] 4 +
jmp loc_103337A  +
xor esi esi +
mov eax 7FFFh +
mov edx 80000000h +
xor ecx ecx +
mov [ebp+var_6C] 2 +
jmp loc_1033382  +
mov [ebp+var_6C] 1 +
xor ecx ecx +
xor eax eax +
xor edx edx +
xor esi esi +
mov edi [ebp+var_78] +
or eax [ebp+var_74] +
mov [edi] cx +
mov ecx [ebp+var_4] +
mov [edi+2] esi +
mov [edi+0Ah] ax +
mov eax [ebp+var_6C] +
mov [edi+6] edx +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1021557  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_1C] +
push esi  +
xor esi esi +
cmp eax esi +
jnz loc_1033408  +
call sub_102501E  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_1024FC5  +
add esp 14h +
xor eax eax +
jmp loc_1033433  +
mov eax [eax] +
mov eax [eax+0BCh] +
mov eax [eax] +
movzx eax byte ptr [eax] +
push eax  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1032D48  +
add esp 20h +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 74h +
mov eax dword_1063194 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_14] +
push esi  +
push edi  +
lea esi [ebp+arg_0] +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
mov edx [ebp+var_8] +
mov ecx edx +
mov eax 8000h +
and ecx eax +
and edx 7FFFh +
mov [ebp+var_60] ebx +
mov [ebp+var_30] 0CCh +
mov byte ptr [ebp-2Fh] 0CCh +
mov [ebp+var_2E] 0CCh +
mov [ebp+var_2D] 0CCh +
mov [ebp+var_2C] 0CCh +
mov byte ptr [ebp-2Bh] 0CCh +
mov [ebp+var_2A] 0CCh +
mov [ebp+var_29] 0CCh +
mov byte ptr [ebp+var_28] 0CCh +
mov byte ptr [ebp+var_28+1] 0CCh +
mov byte ptr [ebp+var_28+2] 0FBh +
mov byte ptr [ebp+var_28+3] 3Fh +
mov [ebp+var_74] 1 +
mov [ebp+var_70] ecx +
test cx cx +
jz loc_10334B7  +
mov byte ptr [ebx+2] 2Dh +
jmp loc_10334BB  +
mov byte ptr [ebx+2] 20h +
mov esi [ebp+var_C] +
mov edi [ebp+var_10] +
test dx dx +
jnz loc_10334F5  +
test esi esi +
jnz loc_10334F5  +
test edi edi +
jnz loc_10334F5  +
xor edx edx +
cmp cx ax +
setnz al  +
dec al  +
and al 0Dh +
add al 20h +
mov [ebx] dx +
mov [ebx+2] al +
mov byte ptr [ebx+3] 1 +
mov byte ptr [ebx+4] 30h +
mov [ebx+5] dl +
xor eax eax +
inc eax  +
jmp loc_1033D13  +
mov eax 7FFFh +
cmp dx ax +
jnz loc_10335A2  +
xor eax eax +
inc eax  +
mov [ebx] ax +
mov eax 80000000h +
cmp esi eax +
jnz loc_1033516  +
test edi edi +
jz loc_1033525  +
test esi 40000000h +
jnz loc_1033525  +
push offset a1Snan  +
jmp loc_1033576  +
test cx cx +
jz loc_103353D  +
cmp esi 0C0000000h +
jnz loc_103353D  +
test edi edi +
jnz loc_1033571  +
push offset a1Ind  +
jmp loc_103354A  +
cmp esi eax +
jnz loc_1033571  +
test edi edi +
jnz loc_1033571  +
push offset a1Inf  +
lea eax [ebx+4] +
push 16h  +
push eax  +
call sub_102B860  +
add esp 0Ch +
xor esi esi +
test eax eax +
jz loc_103356B  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
call sub_1024F1A  +
add esp 14h +
mov byte ptr [ebx+3] 5 +
jmp loc_103359B  +
push offset a1Qnan  +
lea eax [ebx+4] +
push 16h  +
push eax  +
call sub_102B860  +
add esp 0Ch +
xor esi esi +
test eax eax +
jz loc_1033597  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
call sub_1024F1A  +
add esp 14h +
mov byte ptr [ebx+3] 6 +
xor eax eax +
jmp loc_1033D13  +
movzx ecx dx +
mov ebx ecx +
imul ecx ecx +
shr ebx 8 +
mov eax esi +
shr eax 18h +
lea eax [ebx+eax*2] +
imul eax eax +
lea eax [eax+ecx-134312F4h] +
sar eax 10h +
movzx eax ax +
xor ecx ecx +
movsx ebx ax +
mov word ptr [ebp+var_20] cx +
mov ecx offset unk_1064320 +
neg ebx  +
sub ecx 60h +
mov [ebp+var_4C] eax +
mov word ptr [ebp+var_16] dx +
mov [ebp+var_1A] esi +
mov [ebp+var_20+2] edi +
mov [ebp+var_64] ecx +
test ebx ebx +
jz loc_103388F  +
jge loc_1033602  +
mov eax offset unk_1064480 +
neg ebx  +
sub eax 60h +
mov [ebp+var_64] eax +
test ebx ebx +
jz loc_103388F  +
add [ebp+var_64] 54h +
mov ecx ebx +
and ecx 7 +
sar ebx 3 +
test ecx ecx +
jz loc_1033885  +
imul ecx ecx +
add ecx [ebp+var_64] +
mov eax ecx +
mov [ebp+var_44] ecx +
mov ecx 8000h +
cmp [eax] cx +
jb loc_1033644  +
mov esi eax +
lea edi [ebp+var_3C] +
movs   +
movs   +
lea eax [ebp+var_3C] +
movs   +
dec [ebp+var_3C+2]  +
mov [ebp+var_44] eax +
movzx edx word ptr [eax+0Ah] +
xor ecx ecx +
mov [ebp+var_54] ecx +
mov [ebp+var_10] ecx +
mov [ebp+var_C] ecx +
mov [ebp+var_8] ecx +
mov ecx [ebp+var_16] +
mov esi edx +
xor esi ecx +
and esi 8000h +
mov [ebp+var_48] esi +
mov esi 7FFFh +
and ecx esi +
and edx esi +
lea esi [edx+ecx] +
movzx edi si +
mov esi 7FFFh +
cmp cx si +
jnb loc_103392F  +
cmp dx si +
jnb loc_103392F  +
mov esi 0BFFDh +
cmp di si +
ja loc_103392F  +
mov esi 3FBFh +
cmp di si +
ja loc_10336B4  +
xor esi esi +
mov [ebp+var_1A+2] esi +
mov [ebp-1Ch] esi +
mov [ebp+var_20] esi +
jmp loc_1033887  +
xor esi esi +
cmp cx si +
jnz loc_10336DA  +
inc edi  +
test [ebp+var_1A+2] 7FFFFFFFh +
jnz loc_10336DA  +
cmp [ebp-1Ch] esi +
jnz loc_10336DA  +
cmp [ebp+var_20] esi +
jnz loc_10336DA  +
xor eax eax +
mov word ptr [ebp+var_16] ax +
jmp loc_1033887  +
cmp dx si +
jnz loc_10336F2  +
inc edi  +
test dword ptr [eax+8] 7FFFFFFFh +
jnz loc_10336F2  +
cmp [eax+4] esi +
jnz loc_10336F2  +
cmp [eax] esi +
jz loc_10336A6  +
and [ebp+var_58] esi +
lea esi [ebp+var_C] +
mov [ebp+var_40] 5 +
mov ecx [ebp+var_58] +
mov edx [ebp+var_40] +
add ecx ecx +
mov [ebp+var_50] edx +
test edx edx +
jle loc_1033763  +
lea ecx [ebp+ecx+var_20] +
add eax 8 +
mov [ebp+var_6C] ecx +
mov [ebp+var_68] eax +
mov eax [ebp+var_6C] +
movzx ecx word ptr [eax] +
mov eax [ebp+var_68] +
movzx eax word ptr [eax] +
mov edx [esi-4] +
imul ecx eax +
and [ebp+var_5C] 0 +
lea eax [edx+ecx] +
cmp eax edx +
jb loc_103373C  +
cmp eax ecx +
jnb loc_1033743  +
mov [ebp+var_5C] 1 +
cmp [ebp+var_5C] 0 +
mov [esi-4] eax +
jz loc_103374F  +
inc word ptr [esi]  +
add [ebp+var_6C] 2 +
sub [ebp+var_68] 2 +
dec [ebp+var_50]  +
cmp [ebp+var_50] 0 +
jg loc_103371B  +
mov eax [ebp+var_44] +
inc esi  +
inc esi  +
inc [ebp+var_58]  +
dec [ebp+var_40]  +
cmp [ebp+var_40] 0 +
jg loc_10336FF  +
add edi 0C002h +
test di di +
jle loc_10337B7  +
test [ebp+var_8] 80000000h +
jnz loc_10337B2  +
mov eax [ebp+var_C] +
mov ecx [ebp+var_10] +
shl [ebp+var_10] 1 +
mov edx eax +
add eax eax +
shr ecx 1Fh +
or eax ecx +
mov [ebp+var_C] eax +
mov eax [ebp+var_8] +
shr edx 1Fh +
add eax eax +
or eax edx +
add edi 0FFFFh +
mov [ebp+var_8] eax +
test di di +
jg loc_103377C  +
test di di +
jg loc_1033804  +
add edi 0FFFFh +
test di di +
jge loc_1033804  +
mov eax edi +
neg eax  +
movzx eax ax +
add edi eax +
test byte ptr [ebp+var_10] 1 +
jz loc_10337D4  +
inc [ebp+var_54]  +
mov ecx [ebp+var_8] +
mov esi [ebp+var_C] +
mov edx [ebp+var_C] +
shr [ebp+var_8] 1 +
shl ecx 1Fh +
shr esi 1 +
or esi ecx +
mov ecx [ebp+var_10] +
shl edx 1Fh +
shr ecx 1 +
or ecx edx +
dec eax  +
mov [ebp+var_C] esi +
mov [ebp+var_10] ecx +
jnz loc_10337CB  +
cmp [ebp+var_54] eax +
jz loc_1033804  +
or word ptr [ebp+var_10] 1 +
mov eax 8000h +
mov ecx eax +
cmp word ptr [ebp+var_10] cx +
ja loc_1033822  +
mov ecx [ebp+var_10] +
and ecx 1FFFFh +
cmp ecx 18000h +
jnz loc_1033856  +
cmp [ebp+var_10+2] 0FFFFFFFFh +
jnz loc_1033853  +
and [ebp+var_10+2] 0 +
cmp [ebp+var_C+2] 0FFFFFFFFh +
jnz loc_103384E  +
and [ebp+var_C+2] 0 +
mov ecx 0FFFFh +
cmp word ptr [ebp+var_8+2] cx +
jnz loc_1033848  +
mov word ptr [ebp+var_8+2] ax +
inc edi  +
jmp loc_1033856  +
inc word ptr [ebp+var_8+2]  +
jmp loc_1033856  +
inc [ebp+var_C+2]  +
jmp loc_1033856  +
inc [ebp+var_10+2]  +
mov eax 7FFFh +
cmp di ax +
jb loc_103390F  +
xor eax eax +
xor ecx ecx +
cmp word ptr [ebp+var_48] ax +
mov [ebp-1Ch] eax +
setz cl  +
mov [ebp+var_20] eax +
dec ecx  +
and ecx 80000000h +
add ecx 7FFF8000h +
mov [ebp+var_1A+2] ecx +
xor esi esi +
cmp ebx esi +
jnz loc_103360A  +
mov ecx [ebp+var_1A+2] +
shr ecx 10h +
mov edx 3FFFh +
mov eax 7FFFh +
cmp cx dx +
jb loc_1033B4B  +
inc [ebp+var_4C]  +
xor edx edx +
mov [ebp+var_50] edx +
mov [ebp+var_10] edx +
mov [ebp+var_C] edx +
mov [ebp+var_8] edx +
mov edx [ebp+var_28+2] +
movzx ecx cx +
mov ebx edx +
xor ebx ecx +
and ecx eax +
and edx eax +
and ebx 8000h +
mov edi eax +
lea esi [edx+ecx] +
mov [ebp+var_5C] ebx +
movzx esi si +
cmp cx di +
jnb loc_1033B2D  +
cmp dx ax +
jnb loc_1033B2D  +
mov eax 0BFFDh +
cmp si ax +
ja loc_1033B2D  +
mov eax 3FBFh +
cmp si ax +
ja loc_103394D  +
xor eax eax +
mov [ebp-1Ch] eax +
mov [ebp+var_20] eax +
jmp loc_1033B48  +
mov ax word ptr [ebp+var_10+2] +
or edi [ebp+var_48] +
mov word ptr [ebp+var_20] ax +
mov eax [ebp+var_C] +
mov [ebp+var_20+2] eax +
mov eax [ebp+var_8] +
mov [ebp+var_1A] eax +
mov word ptr [ebp+var_16] di +
jmp loc_1033885  +
xor eax eax +
xor esi esi +
cmp word ptr [ebp+var_48] si +
setz al  +
dec eax  +
and eax 80000000h +
add eax 7FFF8000h +
mov [ebp+var_1A+2] eax +
jmp loc_10336A9  +
xor eax eax +
cmp cx ax +
jnz loc_1033971  +
inc esi  +
test [ebp+var_1A+2] 7FFFFFFFh +
jnz loc_1033971  +
cmp [ebp-1Ch] eax +
jnz loc_1033971  +
cmp [ebp+var_20] eax +
jnz loc_1033971  +
mov word ptr [ebp+var_16] ax +
jmp loc_1033B4B  +
cmp dx ax +
jnz loc_103398E  +
inc esi  +
test [ebp+var_28] 7FFFFFFFh +
jnz loc_103398E  +
cmp dword ptr [ebp+var_2C] eax +
jnz loc_103398E  +
cmp dword ptr [ebp+var_30] eax +
jz loc_1033904  +
mov [ebp+var_58] eax +
lea edi [ebp+var_C] +
mov [ebp+var_40] 5 +
mov eax [ebp+var_58] +
mov ecx [ebp+var_40] +
add eax eax +
mov [ebp+var_54] ecx +
test ecx ecx +
jle loc_10339F4  +
lea ecx [ebp+var_28] +
mov [ebp+var_48] ecx +
lea eax [ebp+eax+var_20] +
mov ecx [ebp+var_48] +
movzx edx word ptr [eax] +
movzx ecx word ptr [ecx] +
and [ebp+var_44] 0 +
imul ecx edx +
mov edx [edi-4] +
lea ebx [edx+ecx] +
cmp ebx edx +
jb loc_10339D2  +
cmp ebx ecx +
jnb loc_10339D9  +
mov [ebp+var_44] 1 +
cmp [ebp+var_44] 0 +
mov [edi-4] ebx +
jz loc_10339E5  +
inc word ptr [edi]  +
sub [ebp+var_48] 2 +
inc eax  +
inc eax  +
dec [ebp+var_54]  +
cmp [ebp+var_54] 0 +
jg loc_10339B4  +
inc edi  +
inc edi  +
inc [ebp+var_58]  +
dec [ebp+var_40]  +
cmp [ebp+var_40] 0 +
jg loc_103399B  +
add esi 0C002h +
test si si +
jle loc_1033A44  +
mov edi [ebp+var_8] +
test edi edi +
js loc_1033A3F  +
mov eax [ebp+var_C] +
mov ecx [ebp+var_10] +
shl [ebp+var_10] 1 +
mov edx eax +
add eax eax +
shr ecx 1Fh +
or eax ecx +
mov [ebp+var_C] eax +
shr edx 1Fh +
lea eax [edi+edi] +
or eax edx +
add esi 0FFFFh +
mov [ebp+var_8] eax +
test si si +
jg loc_1033A0D  +
test si si +
jg loc_1033A91  +
add esi 0FFFFh +
test si si +
jge loc_1033A91  +
mov eax esi +
neg eax  +
movzx eax ax +
add esi eax +
test byte ptr [ebp+var_10] 1 +
jz loc_1033A61  +
inc [ebp+var_50]  +
mov ecx [ebp+var_8] +
mov edi [ebp+var_C] +
mov edx [ebp+var_C] +
shr [ebp+var_8] 1 +
shl ecx 1Fh +
shr edi 1 +
or edi ecx +
mov ecx [ebp+var_10] +
shl edx 1Fh +
shr ecx 1 +
or ecx edx +
dec eax  +
mov [ebp+var_C] edi +
mov [ebp+var_10] ecx +
jnz loc_1033A58  +
cmp [ebp+var_50] eax +
jz loc_1033A91  +
or word ptr [ebp+var_10] 1 +
mov eax 8000h +
mov ecx eax +
cmp word ptr [ebp+var_10] cx +
ja loc_1033AAF  +
mov ecx [ebp+var_10] +
and ecx 1FFFFh +
cmp ecx 18000h +
jnz loc_1033AE3  +
cmp [ebp+var_10+2] 0FFFFFFFFh +
jnz loc_1033AE0  +
and [ebp+var_10+2] 0 +
cmp [ebp+var_C+2] 0FFFFFFFFh +
jnz loc_1033ADB  +
and [ebp+var_C+2] 0 +
mov ecx 0FFFFh +
cmp word ptr [ebp+var_8+2] cx +
jnz loc_1033AD5  +
mov word ptr [ebp+var_8+2] ax +
inc esi  +
jmp loc_1033AE3  +
inc word ptr [ebp+var_8+2]  +
jmp loc_1033AE3  +
inc [ebp+var_C+2]  +
jmp loc_1033AE3  +
inc [ebp+var_10+2]  +
mov eax 7FFFh +
cmp si ax +
jb loc_1033B10  +
xor eax eax +
xor ecx ecx +
cmp word ptr [ebp+var_5C] ax +
mov [ebp-1Ch] eax +
setz cl  +
mov [ebp+var_20] eax +
dec ecx  +
and ecx 80000000h +
add ecx 7FFF8000h +
mov [ebp+var_1A+2] ecx +
jmp loc_1033B4B  +
mov ax word ptr [ebp+var_10+2] +
or esi [ebp+var_5C] +
mov word ptr [ebp+var_20] ax +
mov eax [ebp+var_C] +
mov [ebp+var_20+2] eax +
mov eax [ebp+var_8] +
mov [ebp+var_1A] eax +
mov word ptr [ebp+var_16] si +
jmp loc_1033B4B  +
xor eax eax +
test bx bx +
setz al  +
and dword ptr [ebp-1Ch] 0 +
dec eax  +
and eax 80000000h +
add eax 7FFF8000h +
and [ebp+var_20] 0 +
mov [ebp+var_1A+2] eax +
test [ebp+arg_10] 1 +
mov edx [ebp+var_60] +
mov eax [ebp+var_4C] +
mov edi [ebp+arg_C] +
mov [edx] ax +
jz loc_1033B8F  +
cwde   +
add edi eax +
test edi edi +
jg loc_1033B8F  +
xor eax eax +
mov [edx] ax +
mov eax 8000h +
cmp word ptr [ebp+var_70] ax +
mov byte ptr [edx+3] 1 +
setnz al  +
dec al  +
and al 0Dh +
add al 20h +
mov [edx+2] al +
mov byte ptr [edx+4] 30h +
mov byte ptr [edx+5] 0 +
jmp loc_10334ED  +
cmp edi 15h +
jle loc_1033B97  +
push 15h  +
pop edi  +
mov esi [ebp+var_1A+2] +
shr esi 10h +
sub esi 3FFEh +
xor eax eax +
mov word ptr [ebp+var_16] ax +
mov [ebp+var_44] 8 +
mov eax [ebp+var_20] +
mov ebx [ebp-1Ch] +
mov ecx [ebp-1Ch] +
shl [ebp+var_20] 1 +
shr eax 1Fh +
add ebx ebx +
or ebx eax +
mov eax [ebp+var_1A+2] +
shr ecx 1Fh +
add eax eax +
or eax ecx +
dec [ebp+var_44]  +
mov [ebp-1Ch] ebx +
mov [ebp+var_1A+2] eax +
jnz loc_1033BB0  +
test esi esi +
jge loc_1033C0E  +
neg esi  +
and esi 0FFh +
jle loc_1033C0E  +
mov eax [ebp+var_1A+2] +
mov ebx [ebp-1Ch] +
mov ecx [ebp-1Ch] +
shr [ebp+var_1A+2] 1 +
shl eax 1Fh +
shr ebx 1 +
or ebx eax +
mov eax [ebp+var_20] +
shl ecx 1Fh +
shr eax 1 +
or eax ecx +
dec esi  +
mov [ebp-1Ch] ebx +
mov [ebp+var_20] eax +
test esi esi +
jg loc_1033BE6  +
lea eax [edi+1] +
lea ebx [edx+4] +
mov [ebp+var_40] ebx +
mov [ebp+var_4C] eax +
test eax eax +
jle loc_1033CD7  +
mov edx [ebp+var_20] +
mov eax [ebp-1Ch] +
lea esi [ebp+var_20] +
lea edi [ebp+var_3C] +
movs   +
movs   +
movs   +
shl [ebp+var_20] 1 +
mov edi [ebp+var_20] +
shl [ebp+var_20] 1 +
shr edx 1Fh +
lea ecx [eax+eax] +
or ecx edx +
mov edx [ebp+var_1A+2] +
mov esi eax +
shr esi 1Fh +
add edx edx +
or edx esi +
mov eax ecx +
lea esi [ecx+ecx] +
shr eax 1Fh +
lea ecx [edx+edx] +
mov edx [ebp+var_3C] +
shr edi 1Fh +
or ecx eax +
mov eax [ebp+var_20] +
or esi edi +
lea edi [edx+eax] +
cmp edi eax +
jb loc_1033C71  +
cmp edi edx +
jnb loc_1033C89  +
lea eax [esi+1] +
xor edx edx +
cmp eax esi +
jb loc_1033C7F  +
cmp eax 1 +
jnb loc_1033C82  +
xor edx edx +
inc edx  +
mov esi eax +
test edx edx +
jz loc_1033C89  +
inc ecx  +
mov eax [ebp+var_38] +
lea edx [eax+esi] +
mov [ebp+var_44] edx +
cmp edx esi +
jb loc_1033C9A  +
cmp edx eax +
jnb loc_1033C9B  +
inc ecx  +
add ecx [ebp+var_34] +
shr edx 1Fh +
add ecx ecx +
or ecx edx +
lea esi [edi+edi] +
mov [ebp+var_20] esi +
mov esi [ebp+var_44] +
mov [ebp+var_1A+2] ecx +
shr ecx 18h +
add esi esi +
add cl 30h +
mov eax edi +
shr eax 1Fh +
or esi eax +
mov [ebx] cl +
inc ebx  +
dec [ebp+var_4C]  +
cmp [ebp+var_4C] 0 +
mov [ebp-1Ch] esi +
mov byte ptr [ebp+var_16+1] 0 +
jg loc_1033C22  +
dec ebx  +
mov al [ebx] +
dec ebx  +
cmp al 35h +
jge loc_1033CED  +
mov ecx [ebp+var_40] +
jmp loc_1033D28  +
cmp byte ptr [ebx] 39h +
jnz loc_1033CF2  +
mov byte ptr [ebx] 30h +
dec ebx  +
cmp ebx [ebp+var_40] +
jnb loc_1033CE4  +
mov eax [ebp+var_60] +
cmp ebx [ebp+var_40] +
jnb loc_1033CFE  +
inc ebx  +
inc word ptr [eax]  +
inc byte ptr [ebx]  +
sub bl al +
sub bl 3 +
movsx ecx bl +
mov [eax+3] bl +
mov byte ptr [ecx+eax+4] 0 +
mov eax [ebp+var_74] +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1021557  +
leave   +
retn   +
cmp byte ptr [ebx] 30h +
jnz loc_1033D2C  +
dec ebx  +
cmp ebx ecx +
jnb loc_1033D22  +
mov eax [ebp+var_60] +
cmp ebx ecx +
jnb loc_1033D00  +
xor edx edx +
mov [eax] dx +
mov edx 8000h +
cmp word ptr [ebp+var_70] dx +
mov byte ptr [eax+3] 1 +
setnz dl  +
dec dl  +
and dl 0Dh +
add dl 20h +
mov [eax+2] dl +
mov byte ptr [ecx] 30h +
mov byte ptr [eax+5] 0 +
jmp loc_10334ED  +
***
call sub_1022E04  +
xor eax eax +
cmp dword_1066D04 eax +
jz loc_1033DD0  +
test byte ptr [ebp+8] 40h +
jz loc_1033DC8  +
cmp dword_10645F4 eax +
jz loc_1033DC8  +
mov [ebp-4] eax +
ldmxcsr dword ptr [ebp+8]  +
jmp loc_1033DBF  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
cmp eax 0C0000005h +
jz loc_1033DA9  +
cmp eax 0C000001Dh +
jz loc_1033DA9  +
xor eax eax +
retn   +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
and dword_10645F4 0 +
and dword ptr [ebp+8] 0FFFFFFBFh +
ldmxcsr dword ptr [ebp+8]  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
jmp loc_1033DD0  +
and dword ptr [ebp+8] 0FFFFFFBFh +
ldmxcsr dword ptr [ebp+8]  +
call sub_1022E49  +
retn   +
***
lea eax [edx-1] +
pop ebx  +
retn   +
***
xor eax eax +
mov al [esp+8] +
push ebx  +
mov ebx eax +
shl eax 8 +
mov edx [esp+8] +
test edx 3 +
jz loc_1033E1D  +
mov cl [edx] +
add edx 1 +
cmp cl bl +
jz loc_1033DE0  +
test cl cl +
jz loc_1033E66  +
test edx 3 +
jnz loc_1033E08  +
or ebx eax +
push edi  +
mov eax ebx +
shl ebx 10h +
push esi  +
or ebx eax +
mov ecx [edx] +
mov edi 7EFEFEFFh +
mov eax ecx +
mov esi edi +
xor ecx ebx +
add esi eax +
add edi ecx +
xor ecx 0FFFFFFFFh +
xor eax 0FFFFFFFFh +
xor ecx edi +
xor eax esi +
add edx 4 +
and ecx 81010100h +
jnz loc_1033E6A  +
and eax 81010100h +
jz loc_1033E28  +
and eax 1010100h +
jnz loc_1033E64  +
and esi 80000000h +
jnz loc_1033E28  +
pop esi  +
pop edi  +
pop ebx  +
xor eax eax +
retn   +
***
mov eax [edx-4] +
cmp al bl +
jz loc_1033EA7  +
test al al +
jz loc_1033E64  +
cmp ah bl +
jz loc_1033EA0  +
test ah ah +
jz loc_1033E64  +
shr eax 10h +
cmp al bl +
jz loc_1033E99  +
test al al +
jz loc_1033E64  +
cmp ah bl +
jz loc_1033E92  +
test ah ah +
jz loc_1033E64  +
jmp loc_1033E28  +
***
pop esi  +
pop edi  +
lea eax [edx-1] +
pop ebx  +
retn   +
***
lea eax [edx-2] +
pop esi  +
pop edi  +
pop ebx  +
retn   +
***
lea eax [edx-3] +
pop esi  +
pop edi  +
pop ebx  +
retn   +
***
lea eax [edx-4] +
pop esi  +
pop edi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_4] +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
push edi  +
mov edi ds:NtQueryInformationToken +
xor esi esi +
inc esi  +
mov [ebx] esi +
and dword ptr [eax] 0 +
lea eax [ebp+arg_8] +
push eax  +
push 4  +
lea eax [ebp+var_4] +
push eax  +
push 12h  +
push [ebp+arg_0]  +
mov [ebp+var_4] esi +
call edi  +
test eax eax +
jl loc_1033F3B  +
cmp [ebp+var_4] 2 +
jz loc_1033F36  +
cmp [ebp+var_4] esi +
jnz loc_1033F3B  +
and dword ptr [ebx] 0 +
lea eax [ebp+arg_8] +
push eax  +
push 4  +
lea eax [ebp+var_8] +
push eax  +
push 14h  +
push [ebp+arg_0]  +
call edi  +
test eax eax +
jl loc_1033F3B  +
cmp [ebp+var_8] 0 +
jz loc_1033F3B  +
mov ecx [ebp+arg_4] +
mov [ecx] esi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
and dword ptr [esi] 0 +
push 4  +
pop eax  +
lea ecx [ebp+arg_4] +
push ecx  +
push eax  +
mov [ebp+arg_4] eax +
lea eax [ebp+arg_0] +
push eax  +
push 1Ah  +
push [ebp+arg_0]  +
call ds:NtQueryInformationToken  +
test eax eax +
jl loc_1033F7B  +
xor ecx ecx +
cmp [ebp+arg_0] ecx +
setnz cl  +
mov [esi] ecx +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
xor ebx ebx +
push edi  +
mov [ebp+var_4] ebx +
cmp [ebp+arg_0] ebx +
jnz loc_1033FCC  +
lea eax [ebp+arg_0] +
push eax  +
push ebx  +
push 8  +
push 0FFFFFFFEh  +
call ds:NtOpenThreadToken  +
mov edi eax +
cmp edi 0C000007Ch +
jnz loc_1033FC2  +
lea eax [ebp+arg_0] +
push eax  +
push 8  +
push 0FFFFFFFFh  +
call ds:NtOpenProcessToken  +
mov edi eax +
cmp edi ebx +
jl loc_1034031  +
mov eax [ebp+arg_0] +
mov [ebp+var_4] eax +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_0]  +
call sub_1033ED7  +
mov edi eax +
cmp edi ebx +
jl loc_1034023  +
push esi  +
mov esi [ebp+arg_4] +
cmp [ebp+var_8] ebx +
jz loc_1033FEF  +
mov [esi] ebx +
jmp loc_1033FFA  +
xor eax eax +
cmp [ebp+var_C] ebx +
setz al  +
inc eax  +
mov [esi] eax +
lea eax [ebp+arg_4] +
push eax  +
push [ebp+arg_0]  +
call sub_1033F47  +
mov edi eax +
cmp edi ebx +
jl loc_1034022  +
cmp [ebp+arg_4] ebx +
jz loc_1034022  +
mov eax [esi] +
cmp eax 10h +
jb loc_103401D  +
cmp eax 13h +
jb loc_1034020  +
add eax 10h +
mov [esi] eax +
pop esi  +
cmp [ebp+var_4] ebx +
jz loc_1034031  +
push [ebp+var_4]  +
call ds:NtClose  +
mov eax edi +
pop edi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_8]  +
mov esi eax +
push [ebp+arg_4]  +
xor ebx ebx +
dec esi  +
push esi  +
push edi  +
call sub_10542D2  +
add esp 10h +
test eax eax +
jl loc_1034066  +
cmp eax esi +
ja loc_1034066  +
jz loc_103406B  +
jmp loc_1034073  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
mov eax esi +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_103407C  +
mov [ecx] eax +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+wLanguage]  +
push 1  +
push offset Type  +
push [ebp+hModule]  +
call ds:FindResourceExW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+hModule]  +
call sub_1034089  +
test eax eax +
jz loc_10340C7  +
push eax  +
push [ebp+hModule]  +
call ds:LoadResource  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+hModule] 0 +
push esi  +
jz loc_1034125  +
cmp [ebp+arg_4] 0 +
jz loc_1034125  +
push [ebp+hModule]  +
call sub_10340AA  +
push [ebp+arg_4]  +
mov esi eax +
call sub_10340AA  +
test esi esi +
jz loc_103411D  +
test eax eax +
jz loc_103411D  +
mov ecx 0FECDFECDh +
cmp [esi] ecx +
jnz loc_1034125  +
cmp [eax] ecx +
jnz loc_1034125  +
push edi  +
push 4  +
lea edi [eax+1Ch] +
add esi 1Ch +
pop ecx  +
xor eax eax +
cmps   +
pop edi  +
jnz loc_1034125  +
inc eax  +
jmp loc_1034127  +
push 0Dh  +
call ds:SetLastError  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
xor esi esi +
push edi  +
cmp [ebp+lpLibFileName] esi +
jnz loc_1034144  +
xor eax eax +
jmp loc_10341B2  +
cmp [ebp+arg_4] esi +
jz loc_103419F  +
push esi  +
push esi  +
push 3  +
push esi  +
push 5  +
push 80000000h  +
push [ebp+lpLibFileName]  +
call ds:CreateFileW  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jz loc_1034140  +
push esi  +
push esi  +
push esi  +
push 8  +
push esi  +
push edi  +
call ds:CreateFileMappingW  +
push edi  +
mov edi ds:CloseHandle +
mov ebx eax +
call edi  +
cmp ebx esi +
jz loc_1034140  +
push esi  +
push esi  +
push esi  +
push 1  +
push ebx  +
call ds:MapViewOfFile  +
push ebx  +
mov [ebp+lpLibFileName] eax +
call edi  +
mov eax [ebp+lpLibFileName] +
cmp eax esi +
jz loc_1034140  +
or eax 1 +
jmp loc_10341B2  +
xor eax eax +
cmp [ebp+arg_8] esi +
setnz al  +
push eax  +
push esi  +
push [ebp+lpLibFileName]  +
call ds:LoadLibraryExW  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 120h +
mov eax dword_1063194 +
xor eax ebp +
mov [ebp+var_4] eax +
push edi  +
xor edi edi +
cmp dword_10657B8 edi +
jnz loc_10342DA  +
push esi  +
mov esi 11Ch +
push esi  +
lea eax [ebp+VersionInformation] +
push edi  +
push eax  +
call sub_10219E0  +
add esp 0Ch +
lea eax [ebp+VersionInformation] +
mov [ebp+VersionInformation.dwOSVersionInfoSize] esi +
mov esi ds:GetVersionExW +
push eax  +
call esi  +
test eax eax +
jnz loc_1034225  +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 114h +
call esi  +
mov eax [ebp+VersionInformation.dwPlatformId] +
dec eax  +
mov dword_10657B8 edi +
pop esi  +
jz loc_10342AD  +
dec eax  +
jnz loc_10342DA  +
cmp [ebp+VersionInformation.dwMajorVersion] 5 +
jnz loc_103429A  +
mov eax [ebp+VersionInformation.dwMinorVersion] +
sub eax edi +
jz loc_103428E  +
dec eax  +
jz loc_103427B  +
dec eax  +
jz loc_1034261  +
mov dword_10657B8 14h +
jmp loc_10342DA  +
cmp [ebp+var_C] 1 +
jb loc_1034272  +
mov dword_10657B8 10h +
or dword_10657B8 4 +
jmp loc_10342DA  +
cmp [ebp+var_C] 2 +
jb loc_1034272  +
mov dword_10657B8 8 +
jmp loc_1034272  +
mov dword_10657B8 4 +
jmp loc_10342DA  +
cmp [ebp+VersionInformation.dwMajorVersion] 4 +
ja loc_10342EC  +
mov dword_10657B8 2 +
cmp [ebp+VersionInformation.dwMajorVersion] 4 +
jnz loc_10342DA  +
cmp [ebp+VersionInformation.dwMinorVersion] edi +
jz loc_10342D0  +
cmp [ebp+VersionInformation.dwMinorVersion] 0Ah +
jz loc_10342D0  +
cmp [ebp+VersionInformation.dwMinorVersion] 5Ah +
jnz loc_10342DA  +
mov dword_10657B8 1 +
mov ecx [ebp+var_4] +
mov eax dword_10657B8 +
xor ecx ebp +
pop edi  +
call sub_1021557  +
leave   +
retn   +
mov dword_10657B8 20h +
jmp loc_10342DA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
mov eax dword_1063194 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push 20h  +
lea eax [ebp+LCData] +
push eax  +
push 8  +
push 404h  +
mov esi 0C04h +
call ds:GetLocaleInfoW  +
test eax eax +
jz loc_1034351  +
push 3  +
lea eax [ebp+LCData] +
push offset dword_1007A30  +
push eax  +
call sub_102FA18  +
add esp 0Ch +
mov esi eax +
neg esi  +
sbb esi esi +
and esi 0FFFFF800h +
add esi 0C04h +
mov ecx [ebp+var_4] +
mov ax si +
xor ecx ebp +
pop esi  +
call sub_1021557  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_1063194 +
xor eax ebp +
mov [ebp+var_4] eax +
xor eax eax +
cmp ax word_10657BC +
jnz loc_1034401  +
push esi  +
lea eax [ebp+hKey] +
push eax  +
push 1  +
xor esi esi +
push esi  +
push offset aSoftwareMicr_1  +
push 80000002h  +
mov [ebp+cbData] 6 +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_1034400  +
push edi  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
push esi  +
push esi  +
push offset aLocale  +
push [ebp+hKey]  +
call ds:RegQueryValueExW  +
push [ebp+hKey]  +
mov edi eax +
call ds:RegCloseKey  +
cmp edi esi +
pop edi  +
jnz loc_1034400  +
push 3  +
push ds:off_10077B0[esi*8]  +
lea eax [ebp+Data] +
push eax  +
call sub_10543E3  +
add esp 0Ch +
test eax eax +
jz loc_10343F2  +
inc esi  +
cmp esi 1Ch +
jb loc_10343D1  +
jmp loc_1034400  +
mov ax ds:word_10077B4[esi*8] +
mov word_10657BC ax +
pop esi  +
mov ecx [ebp+var_4] +
mov ax word_10657BC +
xor ecx ebp +
call sub_1021557  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push edi  +
mov edi eax +
xor ebx ebx +
cmp edi ebx +
jz loc_10344D6  +
cmp [ebp+arg_0] ebx +
jz loc_10344D6  +
cmp [ebp+arg_4] ebx +
jz loc_10344D6  +
push esi  +
movzx eax word ptr [edi] +
lea ecx [eax-61h] +
cmp cx 19h +
ja loc_1034452  +
movzx eax ax +
sub eax 61h +
jmp loc_1034461  +
lea ecx [eax-41h] +
cmp cx 19h +
ja loc_103448B  +
movzx eax ax +
sub eax 41h +
cmp eax 1Ah +
jnb loc_103448B  +
mov esi ds:dword_10078F8[eax*4] +
test esi esi +
jz loc_103448B  +
jmp loc_1034483  +
push eax  +
push edi  +
call sub_10224ED  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1034496  +
add esi 8 +
mov eax [esi] +
cmp word ptr [eax] 0 +
jnz loc_1034473  +
mov edi [ebp+arg_0] +
inc ebx  +
cmp ebx 2 +
jl loc_103443E  +
jmp loc_10344D5  +
mov esi [esi+4] +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_103449E  +
sub eax edx +
sar eax 1 +
cmp eax 55h +
jnb loc_10344D5  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10344B6  +
sub eax edx +
sar eax 1 +
lea eax [eax+eax+2] +
push eax  +
push esi  +
push [ebp+arg_4]  +
call loc_1022620  +
add esp 0Ch +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test esi esi +
jz loc_1034527  +
cmp [ebp+arg_4] 0 +
jz loc_1034527  +
push 2  +
push 55h  +
push esi  +
push [ebp+arg_0]  +
call sub_1034FB0  +
test eax eax +
jz loc_1034527  +
push 2  +
push 55h  +
push [ebp+arg_4]  +
push esi  +
call sub_1035056  +
test edi edi +
jz loc_1034522  +
xor eax eax +
push edi  +
push [ebp+arg_4]  +
mov [edi] ax +
mov eax esi +
call sub_1034418  +
xor eax eax +
inc eax  +
jmp loc_1034529  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:FreeLibrary  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_1034558  +
cmp [ebp+arg_4] 7FFFFFFFh +
jbe loc_103455D  +
mov eax 80070057h +
test eax eax +
jl loc_1034576  +
mov eax [ebp+arg_4] +
push edi  +
push [ebp+arg_C]  +
mov edi [ebp+arg_0] +
push [ebp+arg_8]  +
push 0  +
call sub_103403E  +
pop edi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_1034594  +
cmp [ebp+arg_4] 7FFFFFFFh +
jbe loc_1034599  +
mov eax 80070057h +
test eax eax +
jl loc_10345B3  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
push 0  +
call sub_103403E  +
pop edi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_1063194 +
xor eax ebp +
mov [ebp+var_4] eax +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jnz loc_10345DB  +
xor eax eax +
jmp loc_1034646  +
push ebx  +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
lea eax [ebp+LibFileName] +
push 104h  +
push eax  +
xor ebx ebx +
call sub_1034543  +
test eax eax +
jl loc_1034643  +
push esi  +
call sub_10341BE  +
mov esi eax +
and esi 26h +
call sub_10341BE  +
and eax 38h +
push esi  +
push eax  +
lea eax [ebp+LibFileName] +
push eax  +
call sub_1034131  +
mov ebx eax +
pop esi  +
test ebx ebx +
jz loc_1034643  +
push ebx  +
push edi  +
call sub_10340D0  +
test eax eax +
jnz loc_1034643  +
push ebx  +
test bl 1 +
jz loc_103463B  +
call ds:UnmapViewOfFile  +
jmp loc_1034641  +
call ds:FreeLibrary  +
xor ebx ebx +
mov eax ebx +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_1021557  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test eax eax +
jz loc_10346B3  +
test ecx ecx +
jz loc_10346B3  +
cmp [ebp+arg_0] 0 +
push eax  +
jz loc_1034697  +
test edx edx +
jz loc_1034684  +
push edx  +
push [ebp+arg_0]  +
push offset aSSS_mui  +
push ecx  +
call sub_10345BA  +
add esp 14h +
jmp loc_10346B5  +
push [ebp+arg_0]  +
push offset aSS_mui  +
push ecx  +
call sub_10345BA  +
add esp 10h +
jmp loc_10346B5  +
test edx edx +
jz loc_10346A3  +
push edx  +
push offset a_SS_mui  +
jmp loc_103468C  +
push offset a_S_mui  +
push ecx  +
call sub_10345BA  +
add esp 0Ch +
jmp loc_10346B5  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 428h +
mov eax dword_1063194 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
mov [ebp+lpLibFileName] esi +
mov [ebp+FilePart] ebx +
cmp esi ebx +
jnz loc_10346F1  +
xor eax eax +
jmp loc_1034E4A  +
test [ebp+arg_4] 0FFFFFFE3h +
jnz loc_10346EA  +
push edi  +
mov edi dword ptr [ebp+wLanguage] +
cmp di bx +
jnz loc_103470D  +
test byte ptr [ebp+arg_4] 10h +
jnz loc_1034D77  +
call sub_10341BE  +
mov dword_10657C0 eax +
movzx eax al +
and eax 20h +
or eax 2 +
push eax  +
push 0  +
push esi  +
call ds:LoadLibraryExW  +
mov [ebp+hModule] eax +
test eax eax +
jz loc_1034D77  +
test byte ptr dword_10657C0 20h +
jnz loc_1034E49  +
lea eax [ebp+FilePart] +
push eax  +
lea eax [ebp+LibFileName] +
push eax  +
push 104h  +
push 0  +
push esi  +
push 0  +
call ds:SearchPathW  +
test eax eax +
jz loc_1034D6B  +
mov eax [ebp+FilePart] +
test eax eax +
jnz loc_1034789  +
and [ebp+var_41C] ebx +
lea eax [ebp+LibFileName] +
mov [ebp+FilePart] eax +
jmp loc_103479B  +
lea ecx [ebp+LibFileName] +
mov [ebp+var_41C] ecx +
xor ecx ecx +
mov [eax-2] cx +
push 0  +
push [ebp+hModule]  +
call sub_1034089  +
test eax eax +
jz loc_1034D53  +
test di di +
jnz loc_1034D2B  +
mov al byte ptr dword_10657C0 +
test al 4 +
jz loc_1034B3A  +
call ds:GetUserDefaultUILanguage  +
movzx eax ax +
mov ecx 404h +
mov [ebp+var_420] eax +
cmp ax cx +
jnz loc_10347ED  +
call sub_10342FD  +
movzx eax ax +
mov [ebp+var_420] eax +
mov eax [ebp+arg_4] +
and eax 8 +
mov [ebp+var_424] eax +
cmp [ebp+var_424] 0 +
jz loc_10348C3  +
lea eax [ebp+var_15C] +
push eax  +
push [ebp+var_420]  +
lea edi [ebp+var_208] +
lea esi [ebp+var_B0] +
call sub_10344E1  +
test eax eax +
jz loc_1034DB7  +
push [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx esi +
call sub_1034658  +
mov ebx eax +
test ebx ebx +
jnz loc_1034DBB  +
push [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
lea edx [ebp+var_15C] +
call sub_1034658  +
mov ebx eax +
test ebx ebx +
jnz loc_1034DBB  +
cmp word ptr [ebp+var_208] ax +
jz loc_10348A2  +
push [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx edi +
call sub_1034658  +
mov ebx eax +
test ebx ebx +
jnz loc_1034DBB  +
mov eax 0C04h +
cmp word ptr [ebp+var_420] ax +
jnz loc_1034A6E  +
mov [ebp+var_420] 404h +
jmp loc_10347F9  +
movzx eax word ptr [ebp+var_420] +
push eax  +
push offset aMui04hx  +
lea eax [ebp+var_B0] +
push 55h  +
push eax  +
call sub_103457F  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push [ebp+var_41C]  +
lea edx [ebp+var_B0] +
call sub_1034658  +
mov ebx eax +
test ebx ebx +
jnz loc_1034DBB  +
lea eax [ebp+var_15C] +
push eax  +
push [ebp+var_420]  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_10344E1  +
test eax eax +
jz loc_1034975  +
push 2  +
lea eax [ebp+var_15C] +
push eax  +
call sub_1034EC5  +
movzx eax ax +
test ax ax +
jz loc_1034975  +
movzx eax ax +
push eax  +
push offset aMui04hx  +
mov eax esi +
push 55h  +
push eax  +
call sub_103457F  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push [ebp+var_41C]  +
mov edx esi +
call sub_1034658  +
mov ebx eax +
test ebx ebx +
jnz loc_1034DBB  +
mov eax 0C04h +
cmp word ptr [ebp+var_420] ax +
jz loc_10348B4  +
call ds:GetSystemDefaultUILanguage  +
movzx esi ax +
mov [ebp+var_424] esi +
cmp si word ptr [ebp+var_420] +
jz loc_1034A52  +
movzx eax si +
push eax  +
push offset aMui04hx  +
lea eax [ebp+var_B0] +
push 55h  +
push eax  +
call sub_103457F  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push [ebp+var_41C]  +
lea edx [ebp+var_B0] +
call sub_1034658  +
mov ebx eax +
test ebx ebx +
jnz loc_1034DBB  +
lea eax [ebp+var_15C] +
push eax  +
push esi  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_10344E1  +
test eax eax +
jz loc_1034A4C  +
push 2  +
lea eax [ebp+var_15C] +
push eax  +
call sub_1034EC5  +
movzx eax ax +
test ax ax +
jz loc_1034A4C  +
movzx eax ax +
push eax  +
push offset aMui04hx  +
mov eax esi +
push 55h  +
push eax  +
call sub_103457F  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push [ebp+var_41C]  +
mov edx esi +
call sub_1034658  +
mov ebx eax +
test ebx ebx +
jnz loc_1034DBB  +
mov esi [ebp+var_424] +
mov eax 409h +
mov ecx eax +
cmp cx word ptr [ebp+var_420] +
jz loc_1034D03  +
cmp ax si +
jmp loc_1034CDB  +
call ds:GetSystemDefaultUILanguage  +
movzx eax ax +
mov [ebp+var_424] eax +
cmp ax word ptr [ebp+var_420] +
jz loc_1034B21  +
lea ecx [ebp+var_15C] +
push ecx  +
push eax  +
lea edi [ebp+var_208] +
lea esi [ebp+var_B0] +
call sub_10344E1  +
test eax eax +
jz loc_1034D53  +
push [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx esi +
call sub_1034658  +
mov ebx eax +
test ebx ebx +
jnz loc_1034DBB  +
push [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
lea edx [ebp+var_15C] +
call sub_1034658  +
mov ebx eax +
test ebx ebx +
jnz loc_1034DBB  +
cmp word ptr [ebp+var_208] ax +
jz loc_1034B21  +
push [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx edi +
call sub_1034658  +
mov ebx eax +
test ebx ebx +
jnz loc_1034DBB  +
mov eax 409h +
mov ecx eax +
cmp cx word ptr [ebp+var_420] +
jz loc_1034D03  +
jmp loc_1034BF8  +
test al 3 +
jz loc_1034D53  +
call sub_1034366  +
test byte ptr [ebp+arg_4] 8 +
movzx eax ax +
mov [ebp+var_424] eax +
jz loc_1034C21  +
lea ecx [ebp+var_15C] +
push ecx  +
push eax  +
lea edi [ebp+var_208] +
lea esi [ebp+var_B0] +
call sub_10344E1  +
test eax eax +
jz loc_1034D53  +
push [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx esi +
call sub_1034658  +
mov ebx eax +
test ebx ebx +
jnz loc_1034DBB  +
push [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
lea edx [ebp+var_15C] +
call sub_1034658  +
mov ebx eax +
test ebx ebx +
jnz loc_1034DBB  +
cmp word ptr [ebp+var_208] ax +
jz loc_1034BF1  +
push [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx edi +
call sub_1034658  +
mov ebx eax +
test ebx ebx +
jnz loc_1034DBB  +
mov eax 409h +
mov ecx eax +
cmp cx word ptr [ebp+var_424] +
jz loc_1034D03  +
lea ecx [ebp+var_15C] +
push ecx  +
push eax  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_10344E1  +
mov edx esi +
jmp loc_1034CE2  +
movzx eax ax +
push eax  +
push offset aMui04hx  +
lea eax [ebp+var_B0] +
push 55h  +
push eax  +
call sub_103457F  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push [ebp+var_41C]  +
lea edx [ebp+var_B0] +
call sub_1034658  +
mov ebx eax +
test ebx ebx +
jnz loc_1034DBB  +
lea eax [ebp+var_15C] +
push eax  +
push [ebp+var_424]  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_10344E1  +
test eax eax +
jz loc_1034CCF  +
push 2  +
lea eax [ebp+var_15C] +
push eax  +
call sub_1034EC5  +
movzx eax ax +
test ax ax +
jz loc_1034CCF  +
movzx eax ax +
push eax  +
push offset aMui04hx  +
mov eax esi +
push 55h  +
push eax  +
call sub_103457F  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push [ebp+var_41C]  +
mov edx esi +
call sub_1034658  +
mov ebx eax +
test ebx ebx +
jnz loc_1034DBB  +
mov eax 409h +
cmp ax word ptr [ebp+var_424] +
jz loc_1034D03  +
mov edx offset aMui0409 +
push [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
call sub_1034658  +
mov ebx eax +
test ebx ebx +
jnz loc_1034DBB  +
push [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
xor edx edx +
call sub_1034658  +
mov ebx eax +
test ebx ebx +
jnz loc_1034DBB  +
jmp loc_1034DB7  +
test byte ptr dword_10657C0 7 +
jz loc_1034D53  +
test byte ptr [ebp+arg_4] 8 +
jz loc_1034D7E  +
lea eax [ebp+var_15C] +
push eax  +
push edi  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_10344E1  +
test eax eax +
jnz loc_1034D98  +
test byte ptr [ebp+arg_4] 10h +
jz loc_1034DCB  +
push dword ptr [ebp+wLanguage]  +
push [ebp+hModule]  +
call sub_1034089  +
test eax eax +
jnz loc_1034DCB  +
push [ebp+hModule]  +
call ds:FreeLibrary  +
xor eax eax +
jmp loc_1034E49  +
movzx eax di +
push eax  +
push offset aMui04hx  +
lea eax [ebp+var_B0] +
push 55h  +
push eax  +
call sub_103457F  +
add esp 10h +
push [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
lea edx [ebp+var_B0] +
call sub_1034658  +
mov ebx eax +
test ebx ebx +
jz loc_1034D53  +
push [ebp+hModule]  +
call ds:FreeLibrary  +
mov eax ebx +
jmp loc_1034E49  +
test byte ptr [ebp+hModule] 1 +
jz loc_1034E43  +
push [ebp+hModule]  +
call ds:FreeLibrary  +
call sub_10341BE  +
test al 38h +
jz loc_1034E20  +
push [ebp+FilePart]  +
lea eax [ebp+LibFileName] +
push [ebp+var_41C]  +
push offset aSS  +
push 104h  +
push eax  +
call sub_103457F  +
add esp 14h +
push 0  +
push 1  +
lea eax [ebp+LibFileName] +
push eax  +
call sub_1034131  +
jmp loc_1034E3D  +
call sub_10341BE  +
push 0  +
and eax 26h +
pop eax  +
setnz al  +
push eax  +
push 0  +
push [ebp+lpLibFileName]  +
call ds:LoadLibraryExW  +
mov [ebp+hModule] eax +
mov eax [ebp+hModule] +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1021557  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov ecx [ebp+0Ch] +
movzx eax word ptr [eax] +
movzx ecx word ptr [ecx] +
cmp cx ax +
jnz loc_1034E79  +
xor eax eax +
pop ebp  +
retn   +
***
sbb eax eax +
and eax 2 +
dec eax  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
push dword ptr [eax]  +
push dword ptr [ebp+8]  +
call sub_10224ED  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax+8] 68h +
jnz loc_1034EBA  +
cmp word ptr [eax] 7Fh +
jz loc_1034EBA  +
xor eax eax +
inc eax  +
jmp loc_1034EBC  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_1034F1A  +
test [ebp+arg_4] 0FFFFFFFDh +
jnz loc_1034F1A  +
push offset loc_1034E86  +
push 8  +
push 163h  +
push offset off_1009AB0  +
push [ebp+arg_0]  +
call sub_105448E  +
add esp 14h +
test eax eax +
jz loc_1034F1A  +
mov ecx [eax+4] +
imul ecx ecx +
add ecx offset dword_1008A00 +
test byte ptr [ebp+arg_4] 2 +
jnz loc_1034F15  +
push ecx  +
call sub_1034EA1  +
test eax eax +
jnz loc_1034F1A  +
mov ax [ecx] +
jmp loc_1034F24  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
mov edx 80070057h +
test ecx ecx +
jz loc_1034F48  +
cmp ecx 7FFFFFFFh +
jbe loc_1034F4A  +
mov eax edx +
test eax eax +
jl loc_1034FA7  +
push edi  +
mov edi [ebp+arg_C] +
cmp edi 7FFFFFFEh +
jbe loc_1034F66  +
mov eax edx +
mov edx [ebp+arg_0] +
xor ecx ecx +
mov [edx] cx +
jmp loc_1034FA6  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_1034F96  +
mov edx [ebp+arg_8] +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_1034F92  +
movzx ecx word ptr [edx+eax] +
test cx cx +
jz loc_1034F92  +
mov [eax] cx +
inc eax  +
inc eax  +
dec esi  +
jnz loc_1034F7A  +
test esi esi +
jnz loc_1034F9D  +
dec eax  +
dec eax  +
mov ebx 8007007Ah +
xor ecx ecx +
mov [eax] cx +
pop esi  +
mov eax ebx +
pop ebx  +
pop edi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 0 +
push esi  +
push edi  +
jl loc_1035041  +
cmp [ebp+arg_4] 0 +
jnz loc_1034FCD  +
cmp [ebp+arg_8] 0 +
jnz loc_1035041  +
test [ebp+arg_C] 0FFFFFFFDh +
jnz loc_1035041  +
push offset loc_1034E5F  +
push 0Ch  +
push 164h  +
lea eax [ebp+arg_0] +
push offset dword_1008A00  +
push eax  +
call sub_105448E  +
mov ecx eax +
add esp 14h +
test ecx ecx +
jz loc_1035041  +
test byte ptr [ebp+arg_C] 2 +
jnz loc_1035009  +
push ecx  +
call sub_1034EA1  +
test eax eax +
jnz loc_1035041  +
mov edi [ecx+4] +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1035011  +
sub eax edx +
sar eax 1 +
cmp [ebp+arg_4] 0 +
lea esi [eax+1] +
jz loc_103503D  +
push esi  +
push edi  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1034F2D  +
test eax eax +
jge loc_103503D  +
push 7Ah  +
jmp loc_1035043  +
mov eax esi +
jmp loc_103504B  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
xor edi edi +
cmp [ebp+arg_0] edi +
jz loc_1035104  +
cmp [ebp+arg_8] edi +
jle loc_1035079  +
cmp [ebp+arg_4] edi +
jz loc_1035104  +
cmp [ebp+arg_8] edi +
jl loc_1035104  +
test [ebp+arg_C] 0FFFFFFFDh +
jnz loc_1035104  +
push offset loc_1034E86  +
push 8  +
push 163h  +
push offset off_1009AB0  +
push [ebp+arg_0]  +
call sub_105448E  +
add esp 14h +
cmp eax edi +
jz loc_1035104  +
mov ecx [eax+4] +
imul ecx ecx +
mov edx offset dword_1008A00 +
add ecx edx +
test byte ptr [ebp+arg_C] 2 +
jnz loc_10350C5  +
push ecx  +
call sub_1034EA1  +
test eax eax +
jnz loc_1035104  +
mov eax [ecx+8] +
imul eax eax +
add eax edx +
mov eax [eax+4] +
mov ecx eax +
lea edx [ecx+2] +
mov si [ecx] +
inc ecx  +
inc ecx  +
cmp si di +
jnz loc_10350D5  +
sub ecx edx +
sar ecx 1 +
lea esi [ecx+1] +
cmp [ebp+arg_4] edi +
jz loc_1035100  +
push esi  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1034F2D  +
test eax eax +
jge loc_1035100  +
push 7Ah  +
jmp loc_1035106  +
mov eax esi +
jmp loc_103510E  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov [ebp+8] eax +
push offset dword_105C724  +
lea eax [ebp+8] +
push eax  +
call sub_10212E6  +
mov edi edi +
push esi  +
push offset loc_103511F  +
mov esi ecx +
call sub_1054555  +
mov [esi] eax +
pop ecx  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push esi  +
push edi  +
xor edi edi +
cmp edx edi +
jz loc_10351D4  +
cmp [edx] di +
jz loc_10351D4  +
mov eax edx +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx di +
jnz loc_1035181  +
sub eax esi +
sar eax 1 +
jz loc_10351D4  +
movzx ecx word ptr [edx+2] +
xor esi esi +
inc esi  +
cmp cx 78h +
jz loc_1035222  +
cmp cx 58h +
jz loc_1035222  +
jmp loc_10351C8  +
movzx ecx word ptr [edx+eax*2] +
cmp cx 30h +
jb loc_10351CD  +
cmp cx 39h +
ja loc_10351CD  +
movzx ecx cx +
sub ecx 30h +
imul ecx esi +
add edi ecx +
imul esi esi +
dec eax  +
jns loc_10351AA  +
jmp loc_1035237  +
cmp word ptr [edx+eax*2] 2Bh +
jz loc_1035237  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
movzx ecx word ptr [edx+eax*2] +
cmp cx 30h +
jb loc_10351F4  +
cmp cx 39h +
ja loc_10351F4  +
movzx ecx cx +
sub ecx 30h +
jmp loc_103521A  +
cmp cx 61h +
jb loc_1035208  +
cmp cx 66h +
ja loc_1035208  +
movzx ecx cx +
sub ecx 57h +
jmp loc_103521A  +
cmp cx 41h +
jb loc_1035227  +
cmp cx 46h +
ja loc_1035227  +
movzx ecx cx +
sub ecx 37h +
imul ecx esi +
add edi ecx +
shl esi 4 +
dec eax  +
jns loc_10351DC  +
jmp loc_1035237  +
movzx eax word ptr [edx+eax*2] +
cmp ax 78h +
jz loc_1035237  +
cmp ax 58h +
jnz loc_10351D4  +
mov eax edi +
jmp loc_10351D6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_1063194 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
lea eax [ebp+pSid] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 220h  +
push 20h  +
push 2  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
mov [ebp+pIdentifierAuthority.Value] bl +
mov [ebp+pIdentifierAuthority.Value+1] bl +
mov [ebp+pIdentifierAuthority.Value+2] bl +
mov [ebp+pIdentifierAuthority.Value+3] bl +
mov [ebp+pIdentifierAuthority.Value+4] bl +
mov [ebp+pIdentifierAuthority.Value+5] 5 +
call ds:AllocateAndInitializeSid  +
mov [ebp+var_10] eax +
cmp eax ebx +
jz loc_10352AA  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+pSid]  +
push ebx  +
call ds:CheckTokenMembership  +
test eax eax +
jnz loc_10352A1  +
mov [ebp+var_10] ebx +
push [ebp+pSid]  +
call ds:FreeSid  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_10] +
xor ecx ebp +
pop ebx  +
call sub_1021557  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_1063194 +
xor eax ebp +
mov [ebp+var_4] eax +
push offset aKernel32_dll_0  +
call ds:GetModuleHandleW  +
test eax eax +
jnz loc_10352E7  +
xor eax eax +
jmp loc_1035317  +
push offset aGetsystemwow64  +
push eax  +
call ds:GetProcAddress  +
test eax eax +
jz loc_10352E3  +
push 104h  +
lea ecx [ebp+var_20C] +
push ecx  +
call eax  +
test eax eax +
jnz loc_1035314  +
call ds:GetLastError  +
cmp eax 78h +
jz loc_10352E3  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1021557  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 118h +
mov eax dword_1063194 +
xor eax ebp +
mov [ebp+var_4] eax +
push edi  +
push 114h  +
lea eax [ebp+VersionInformation] +
push 0  +
push eax  +
mov edi 270Fh +
call sub_10219E0  +
add esp 0Ch +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 114h +
call ds:GetVersionExW  +
test eax eax +
jz loc_1035412  +
cmp [ebp+VersionInformation.dwPlatformId] 2 +
jnz loc_10353E2  +
cmp [ebp+VersionInformation.dwMajorVersion] 4 +
ja loc_103538E  +
push 2  +
jmp loc_10353DF  +
cmp [ebp+VersionInformation.dwMajorVersion] 5 +
jnz loc_10353BE  +
cmp [ebp+VersionInformation.dwMinorVersion] 0 +
jnz loc_10353A4  +
push 3  +
jmp loc_10353DF  +
cmp [ebp+VersionInformation.dwMinorVersion] 1 +
jnz loc_10353B1  +
push 4  +
jmp loc_10353DF  +
cmp [ebp+VersionInformation.dwMinorVersion] 2 +
jnz loc_1035412  +
push 5  +
jmp loc_10353DF  +
cmp [ebp+VersionInformation.dwMajorVersion] 6 +
jnz loc_1035412  +
cmp [ebp+VersionInformation.dwMinorVersion] 0 +
jnz loc_10353D4  +
push 6  +
jmp loc_10353DF  +
cmp [ebp+VersionInformation.dwMinorVersion] 1 +
jnz loc_1035412  +
push 7  +
pop edi  +
jmp loc_1035412  +
cmp [ebp+VersionInformation.dwPlatformId] 1 +
jnz loc_1035412  +
cmp [ebp+VersionInformation.dwMajorVersion] 4 +
jnz loc_1035412  +
cmp [ebp+VersionInformation.dwMinorVersion] 0 +
jz loc_103540F  +
cmp [ebp+VersionInformation.dwMinorVersion] 0Ah +
jz loc_103540F  +
cmp [ebp+VersionInformation.dwMinorVersion] 5Ah +
jnz loc_1035412  +
xor edi edi +
inc edi  +
mov ecx [ebp+var_4] +
mov eax edi +
xor ecx ebp +
pop edi  +
call sub_1021557  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
push edi  +
mov edi [ebp+arg_C] +
jmp loc_1035466  +
mov eax [ebp+arg_14] +
lea esi [ebx+edi] +
shr esi 1 +
cmp [ebp+arg_4] eax +
jbe loc_1035446  +
mov eax [ebp+arg_4] +
push eax  +
push [ebp+arg_10]  +
mov eax [ebp+arg_0] +
push dword ptr [eax+esi*4]  +
call sub_10543E3  +
add esp 0Ch +
test eax eax +
jz loc_103546E  +
jge loc_1035463  +
lea ebx [esi+1] +
jmp loc_1035466  +
lea edi [esi-1] +
cmp ebx edi +
jbe loc_1035436  +
xor eax eax +
jmp loc_1035476  +
mov eax [ebp+arg_18] +
mov [eax] esi +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 1Ch  +
***
call sub_1023674  +
push 6  +
lea eax [ebp-28h] +
push eax  +
push offset a_dfx_install_u  +
call ds:GetEnvironmentVariableW  +
test eax eax +
jz loc_10354D8  +
cmp eax 6 +
ja loc_10354D8  +
push 31h  +
pop eax  +
cmp ax [ebp-28h] +
jnz loc_10354D8  +
and dword ptr [ebp-2Ch] 0 +
and dword ptr [ebp-4] 0 +
movzx eax byte ptr ds:7FFE02D4h +
mov [ebp-2Ch] eax +
jmp loc_10354CC  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov eax [ebp-2Ch] +
jmp loc_10354DA  +
xor eax eax +
call sub_10236BC  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFFFh  +
push [ebp+lpString2]  +
push 0FFFFFFFFh  +
push [ebp+lpString1]  +
push 1  +
push Locale  +
call ds:CompareStringW  +
cmp eax 2 +
jnz loc_103550B  +
xor eax eax +
jmp loc_1035519  +
xor ecx ecx +
cmp eax 1 +
setnz cl  +
lea ecx [ecx+ecx-1] +
mov eax ecx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push dword ptr [eax]  +
call ds:GetFileAttributesW  +
cmp eax 0FFFFFFFFh +
jnz loc_103553B  +
xor al al +
jmp loc_1035540  +
shr eax 4 +
and al 1 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push dword ptr [eax]  +
call ds:GetFileAttributesW  +
cmp eax 0FFFFFFFFh +
jnz loc_1035562  +
xor al al +
jmp loc_1035569  +
shr eax 4 +
not al  +
and al 1 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push dword ptr [eax]  +
call ds:GetFileAttributesW  +
cmp eax 0FFFFFFFFh +
jnz loc_103558F  +
call ds:GetLastError  +
jmp loc_1035595  +
shr eax 3 +
and eax 2 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_1063194 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push 80h  +
push dword ptr [esi]  +
mov bl 1 +
call ds:SetFileAttributesW  +
push dword ptr [esi]  +
call ds:DeleteFileW  +
test eax eax +
jnz loc_103561C  +
mov eax [esi] +
push edi  +
lea ecx [ebp+NewFileName] +
push ecx  +
xor ebx ebx +
push ebx  +
push offset PrefixString  +
push eax  +
call ds:GetTempFileNameW  +
mov edi ds:MoveFileExW +
test eax eax +
jz loc_1035614  +
mov eax [esi] +
push 1  +
lea ecx [ebp+NewFileName] +
push ecx  +
push eax  +
call edi  +
test eax eax +
jz loc_1035614  +
push 4  +
push ebx  +
lea eax [ebp+NewFileName] +
push eax  +
jmp loc_1035619  +
push 4  +
push ebx  +
push dword ptr [esi]  +
call edi  +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
mov al bl +
xor ecx ebp +
pop ebx  +
call sub_1021557  +
leave   +
retn 4  +
***
call sub_1021EF1  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_103580E +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
mov eax [esi] +
push eax  +
call sub_10545CF  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1035894  +
or eax 0FFFFFFFFh +
jmp loc_1035898  +
sub eax [esi] +
sar eax 1 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
mov eax [esi] +
push eax  +
call sub_105459E  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_10358C0  +
or eax 0FFFFFFFFh +
jmp loc_10358C4  +
sub eax [esi] +
sar eax 1 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
push edi  +
push ebx  +
call ds:GetSystemWindowsDirectoryW  +
mov esi eax +
test esi esi +
jz loc_1035923  +
cmp esi edi +
ja loc_1035923  +
cmp word ptr [ebx+esi*2-2] 5Ch +
jnz loc_1035900  +
add esi 3 +
mov ecx offset aInf_0 +
jmp loc_1035908  +
add esi 4 +
mov ecx offset aInf_1 +
lea eax [esi+1] +
cmp eax edi +
jbe loc_1035913  +
mov esi eax +
jmp loc_1035921  +
push ecx  +
push edi  +
push ebx  +
call sub_1014BDB  +
test eax eax +
jge loc_1035921  +
xor esi esi +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
call sub_1021F67  +
mov esi [ebp+0Ch] +
mov edi [ebp+10h] +
mov dword ptr [ebp-250h] 0F750E6C3h +
mov eax 38EEh +
mov [ebp-24Ch] ax +
mov eax 11D1h +
mov [ebp-24Ah] ax +
mov byte ptr [ebp-248h] 85h +
mov byte ptr [ebp-247h] 0E5h +
xor ebx ebx +
mov [ebp-246h] bl +
mov byte ptr [ebp-245h] 0C0h +
mov byte ptr [ebp-244h] 4Fh +
mov byte ptr [ebp-243h] 0C2h +
mov byte ptr [ebp-242h] 95h +
mov byte ptr [ebp-241h] 0EEh +
mov dword ptr [ebp-240h] 0AAC56Bh +
mov eax 0CD44h +
mov [ebp-23Ch] ax +
mov eax 11D0h +
mov [ebp-23Ah] ax +
mov byte ptr [ebp-238h] 8Ch +
mov byte ptr [ebp-237h] 0C2h +
mov [ebp-236h] bl +
mov byte ptr [ebp-235h] 0C0h +
mov byte ptr [ebp-234h] 4Fh +
mov byte ptr [ebp-233h] 0C2h +
mov byte ptr [ebp-232h] 95h +
mov byte ptr [ebp-231h] 0EEh +
or dword ptr [ebp-698h] 0FFFFFFFFh +
cmp [ebp+14h] ebx +
jnz loc_1035A23  +
push 440h  +
push ebx  +
lea eax [ebp-690h] +
push eax  +
call sub_10219E0  +
add esp 0Ch +
mov dword ptr [ebp-690h] 440h +
lea ecx [ebp-6A0h] +
call sub_103513E  +
mov [ebp-4] ebx +
mov byte ptr [ebp-4] 1 +
mov eax [edi] +
push ebx  +
push ebx  +
push 3  +
push ebx  +
push 1  +
push 80000000h  +
push eax  +
call ds:CreateFileW  +
mov [ebp-698h] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1035A69  +
call ds:GetLastError  +
mov [ebp-694h] eax +
mov [ebp-4] bl +
jmp loc_1035BEC  +
push 30h  +
pop edi  +
push edi  +
push ebx  +
lea eax [ebp-6D8h] +
push eax  +
call sub_10219E0  +
add esp 0Ch +
mov [ebp-6D8h] edi +
push 2  +
pop edi  +
mov [ebp-6CCh] edi +
mov dword ptr [ebp-6B0h] 1080h +
cmp [ebp+14h] ebx +
jnz loc_1035ABB  +
mov dword ptr [ebp-6B0h] 1480h +
lea eax [ebp-690h] +
mov [ebp-6D4h] eax +
mov dword ptr [ebp-6BCh] 3 +
mov dword ptr [ebp-69Ch] 14h +
push ebx  +
lea eax [ebp-28h] +
push eax  +
lea eax [ebp-69Ch] +
push eax  +
push dword ptr [ebp-698h]  +
call CryptCATAdminCalcHashFromFileHandle  +
test eax eax +
jnz loc_1035AF4  +
call ds:GetLastError  +
mov [ebp-694h] eax +
mov [ebp-4] bl +
jmp loc_1035BD7  +
mov [ebp-6C4h] edi +
lea eax [ebp-6FCh] +
mov [ebp-6C0h] eax +
push 9  +
pop ecx  +
xor eax eax +
lea edi [ebp-6FCh] +
stos   +
mov dword ptr [ebp-6FCh] 24h +
lea eax [ebp-28h] +
mov [ebp-6E4h] eax +
mov eax [ebp-69Ch] +
mov [ebp-6E0h] eax +
push dword ptr [esi]  +
push 104h  +
lea eax [ebp-230h] +
push eax  +
call sub_1014BA1  +
lea eax [ebp-230h] +
push eax  +
call ds:CharLowerW  +
lea eax [ebp-230h] +
mov [ebp-6F0h] eax +
mov eax [ebp+8] +
mov eax [eax] +
mov [ebp-6F4h] eax +
cmp [ebp+14h] ebx +
lea eax [ebp-240h] +
jnz loc_1035B7A  +
lea eax [ebp-250h] +
lea ecx [ebp-6D8h] +
push ecx  +
push eax  +
push ebx  +
call WinVerifyTrust  +
mov [ebp-694h] eax +
cmp [ebp+14h] ebx +
jnz loc_1035BA4  +
cmp eax 47Fh +
jnz loc_1035BA4  +
mov dword ptr [ebp-694h] 0E0000244h +
mov [ebp-4] ebx +
jmp loc_1035BD7  +
mov eax [ebp-6A4h] +
mov [ebp-694h] eax +
and dword ptr [ebp-4] 0 +
mov eax offset loc_1035BD5 +
retn   +
mov eax [ebp-6A8h] +
mov [ebp-694h] eax +
and dword ptr [ebp-4] 0 +
mov eax offset loc_1035BD5 +
retn   +
xor ebx ebx +
cmp dword ptr [ebp-698h] 0FFFFFFFFh +
jz loc_1035BEC  +
push dword ptr [ebp-698h]  +
call ds:CloseHandle  +
cmp [ebp+14h] ebx +
jnz loc_1035C05  +
cmp [ebp-26Ch] ebx +
jz loc_1035C05  +
push dword ptr [ebp-26Ch]  +
call ds:CertFreeCertificateContext  +
or dword ptr [ebp-4] 0FFFFFFFFh +
push dword ptr [ebp-6A0h]  +
call sub_1054555  +
pop ecx  +
mov eax [ebp-694h] +
call sub_1021FD2  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_4] +
test ecx ecx +
jl loc_1035C56  +
mov eax [esi] +
cmp ecx [eax-0Ch] +
jge loc_1035C56  +
push [ebp+arg_0]  +
lea eax [eax+ecx*2] +
push eax  +
call sub_1054573  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1035C56  +
sub eax [esi] +
sar eax 1 +
jmp loc_1035C59  +
or eax 0FFFFFFFFh +
pop esi  +
pop ebp  +
retn 8  +
***
call sub_1021EB9  +
mov ebx [ebp+0Ch] +
and dword ptr [ebp-10h] 0 +
test ebx ebx +
jge loc_1035C7C  +
xor ebx ebx +
mov edi [ecx] +
mov esi [edi-0Ch] +
test esi esi +
jge loc_1035C87  +
xor esi esi +
cmp ebx esi +
jl loc_1035C96  +
push ecx  +
mov ecx [ebp+8] +
call sub_10151F2  +
jmp loc_1035CAB  +
call sub_101504D  +
mov ecx [ebp+8] +
push eax  +
sub esi ebx +
push ebx  +
lea eax [edi+esi*2] +
push eax  +
call sub_101AAD3  +
and dword ptr [ebp-4] 0 +
mov dword ptr [ebp-10h] 1 +
mov eax [ebp+8] +
call sub_1021FA5  +
retn 8  +
***
call sub_1021EB9  +
mov edi ecx +
mov ebx [ebp+0Ch] +
xor eax eax +
cmp ebx eax +
mov [ebp-10h] eax +
jge loc_1035CE2  +
xor ebx ebx +
cmp [ebp+10h] eax +
jge loc_1035CEA  +
mov [ebp+10h] eax +
push dword ptr [ebp+10h]  +
mov eax [edi] +
mov esi [eax-0Ch] +
push ebx  +
call sub_101F60F  +
cmp eax esi +
jle loc_1035D06  +
mov eax [edi] +
mov eax [eax-0Ch] +
sub eax ebx +
mov [ebp+10h] eax +
mov esi [edi] +
mov eax [esi-0Ch] +
cmp ebx eax +
jle loc_1035D13  +
and dword ptr [ebp+10h] 0 +
test ebx ebx +
jnz loc_1035D27  +
cmp [ebp+10h] eax +
jnz loc_1035D27  +
mov ecx [ebp+8] +
push edi  +
call sub_10151F2  +
jmp loc_1035D3E  +
mov ecx edi +
call sub_101504D  +
mov ecx [ebp+8] +
push eax  +
push dword ptr [ebp+10h]  +
lea eax [esi+ebx*2] +
push eax  +
call sub_101AAD3  +
and dword ptr [ebp-4] 0 +
mov dword ptr [ebp-10h] 1 +
mov eax [ebp+8] +
call sub_1021FA5  +
retn 0Ch  +
***
call sub_1021EB9  +
mov edi ecx +
xor esi esi +
cmp [edi+8] esi +
jnz loc_1035D75  +
xor eax eax +
jmp loc_1035E43  +
mov eax [edi] +
xor ebx ebx +
mov [ebp-10h] eax +
cmp eax esi +
jz loc_1035DB2  +
lea eax [ebp-10h] +
push eax  +
mov ecx edi +
call sub_105038C  +
push eax  +
lea ecx [ebp-18h] +
call sub_10151F2  +
mov [ebp-4] esi +
mov eax [ebp-18h] +
mov eax [eax-0Ch] +
lea ebx [ebx+eax+1] +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-18h] +
call sub_1015174  +
cmp [ebp-10h] esi +
jnz loc_1035D80  +
inc ebx  +
xor ecx ecx +
push 2  +
pop edx  +
mov eax ebx +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_1054617  +
mov esi eax +
pop ecx  +
mov [ebp-1Ch] esi +
test esi esi +
jz loc_1035D6E  +
mov eax [edi] +
mov [ebp-18h] ebx +
mov [ebp-10h] eax +
test eax eax +
jz loc_1035E36  +
lea eax [ebp-10h] +
push eax  +
mov ecx edi +
call sub_105038C  +
push eax  +
lea ecx [ebp-14h] +
call sub_10151F2  +
mov dword ptr [ebp-4] 1 +
push dword ptr [ebp-14h]  +
push dword ptr [ebp-18h]  +
push esi  +
call sub_1014BA1  +
push dword ptr [ebp-14h]  +
call ds:lstrlenW  +
push dword ptr [ebp-14h]  +
lea esi [esi+eax*2+2] +
call ds:lstrlenW  +
or ecx 0FFFFFFFFh +
sub ecx eax +
add [ebp-18h] ecx +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call sub_1015174  +
cmp dword ptr [ebp-10h] 0 +
jnz loc_1035DDF  +
xor eax eax +
mov [esi] ax +
mov eax [ebp+8] +
mov [eax] ebx +
mov eax [ebp-1Ch] +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EB9  +
and dword ptr [ebp-10h] 0 +
mov eax [ecx] +
mov eax [eax-0Ch] +
sub eax [ebp+0Ch] +
push eax  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1035CC6  +
and dword ptr [ebp-4] 0 +
mov dword ptr [ebp-10h] 1 +
mov eax [ebp+8] +
call sub_1021FA5  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi] +
mov esi [eax-0Ch] +
lea ebx [esi+1] +
push ebx  +
call sub_1015255  +
mov cx [ebp+arg_0] +
mov [eax+esi*2] cx +
push ebx  +
mov ecx edi +
call loc_10149C4  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1015255  +
push [ebp+arg_0]  +
mov ecx esi +
call loc_10149C4  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1035E8F  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
test esi esi +
jz loc_1035F46  +
push 104h  +
mov ecx esi +
call sub_10158A3  +
mov ecx [esi] +
push dword ptr [ecx-0Ch]  +
push eax  +
push [ebp+hModule]  +
call ds:GetModuleFileNameW  +
test eax eax +
jz loc_1035F46  +
push 0FFFFFFFFh  +
mov ecx esi +
call sub_1015023  +
mov eax [esi] +
xor ecx ecx +
cmp [eax-0Ch] ecx +
setnz cl  +
mov eax ecx +
jmp loc_1035F48  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+dwHandle] +
push eax  +
push [ebp+lptstrFilename]  +
xor esi esi +
mov [ebp+var_4] esi +
mov [ebp+lpBuffer] esi +
mov [ebp+puLen] esi +
call GetFileVersionInfoSizeW  +
mov edi eax +
mov ebx offset aD_D_D_D +
cmp edi esi +
jz loc_1035FF2  +
push edi  +
call sub_1021488  +
pop ecx  +
mov [ebp+pBlock] eax +
cmp eax esi +
jz loc_1035FF2  +
push eax  +
push edi  +
push esi  +
push [ebp+lptstrFilename]  +
call GetFileVersionInfoW  +
test eax eax +
jz loc_1035FE4  +
lea eax [ebp+puLen] +
push eax  +
lea eax [ebp+lpBuffer] +
push eax  +
push offset SubBlock  +
push [ebp+pBlock]  +
call VerQueryValueW  +
test eax eax +
jz loc_1035FE4  +
cmp [ebp+arg_4] esi +
jz loc_1035FE4  +
mov eax [ebp+lpBuffer] +
movzx ecx word ptr [eax+14h] +
push ecx  +
movzx ecx word ptr [eax+16h] +
push ecx  +
movzx ecx word ptr [eax+10h] +
movzx eax word ptr [eax+12h] +
push ecx  +
push eax  +
push ebx  +
push [ebp+arg_4]  +
call sub_1015A11  +
add esp 18h +
mov [ebp+var_4] 1 +
push [ebp+pBlock]  +
call sub_10213A1  +
pop ecx  +
cmp [ebp+var_4] esi +
jnz loc_1036007  +
cmp [ebp+arg_4] esi +
jz loc_1036007  +
push esi  +
push esi  +
push esi  +
push esi  +
push ebx  +
push [ebp+arg_4]  +
call sub_1015A11  +
add esp 18h +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1035EE7  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1021EB9  +
lea ecx [ebp-18h] +
call sub_10151DA  +
and dword ptr [ebp-4] 0 +
mov ecx [ebp+0Ch] +
call sub_1014FC6  +
mov ecx [ebp+10h] +
call sub_1014FC6  +
mov esi 104h +
push esi  +
lea ecx [ebp-18h] +
call sub_10158A3  +
mov ebx [ebp+8] +
mov edi ds:GetFullPathNameW +
jmp loc_1036080  +
cmp eax esi +
jb loc_10360AE  +
push esi  +
lea ecx [ebp-18h] +
call sub_10158A3  +
and dword ptr [ebp-14h] 0 +
lea ecx [ebp-14h] +
push ecx  +
push eax  +
mov [ebp-10h] eax +
mov eax [ebx] +
push esi  +
push eax  +
call edi  +
test eax eax +
jnz loc_1036073  +
xor bl bl +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-18h] +
call sub_1015174  +
mov al bl +
call sub_1021FA5  +
retn 0Ch  +
mov ecx [ebp-14h] +
test ecx ecx +
jz loc_10360DA  +
cmp ecx [ebp-10h] +
jz loc_10360DA  +
push dword ptr [ebp-10h]  +
xor eax eax +
mov [ecx-2] ax +
mov ecx [ebp+0Ch] +
call sub_1015ACB  +
push dword ptr [ebp-14h]  +
mov ecx [ebp+10h] +
call sub_1015ACB  +
mov bl 1 +
jmp loc_1036098  +
push eax  +
lea ecx [ebp-18h] +
call sub_1015023  +
mov ecx [ebp+0Ch] +
lea eax [ebp-18h] +
push eax  +
call sub_1015959  +
jmp loc_1036096  +
***
call sub_1021EB9  +
mov ecx [ebp+8] +
mov eax [ecx] +
xor esi esi +
mov byte ptr [ebp-0Eh] 0 +
mov byte ptr [ebp-0Dh] 0 +
cmp [eax-0Ch] esi +
jnz loc_1036128  +
push dword ptr [ebp+0Ch]  +
mov ecx [ebp+10h] +
call sub_1015AAF  +
xor al al +
jmp loc_1036261  +
mov eax [ebp+0Ch] +
mov eax [eax] +
cmp [eax-0Ch] esi +
jnz loc_1036135  +
push ecx  +
jmp loc_1036119  +
xor ebx ebx +
inc ebx  +
push ebx  +
lea eax [ebp-14h] +
push eax  +
call sub_1035C63  +
mov [ebp-4] esi +
mov esi offset asc_1001670 +
push esi  +
mov ecx eax +
call sub_1035876  +
test eax eax +
setnl byte ptr [ebp-0Fh]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call sub_1015174  +
cmp byte ptr [ebp-0Fh] 0 +
jz loc_103616D  +
mov [ebp-0Eh] bl +
mov ecx [ebp+0Ch] +
push ebx  +
lea eax [ebp-14h] +
push eax  +
call sub_101ABF3  +
mov [ebp-4] ebx +
push esi  +
mov ecx eax +
call sub_1035876  +
test eax eax +
setnl byte ptr [ebp-0Fh]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call sub_1015174  +
cmp byte ptr [ebp-0Fh] 0 +
jz loc_10361A0  +
mov [ebp-0Dh] bl +
cmp byte ptr [ebp-0Eh] 0 +
jz loc_10361F3  +
cmp byte ptr [ebp-0Dh] 0 +
jz loc_1036234  +
mov ecx [ebp+0Ch] +
push ebx  +
lea eax [ebp-14h] +
push eax  +
call sub_1035E50  +
mov dword ptr [ebp-4] 2 +
push eax  +
push dword ptr [ebp+8]  +
lea eax [ebp+0Ch] +
push eax  +
call sub_10157ED  +
mov byte ptr [ebp-4] 3 +
mov ecx [ebp+10h] +
push eax  +
call sub_1015AAF  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp+0Ch] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
jmp loc_103625A  +
cmp byte ptr [ebp-0Dh] 0 +
jnz loc_1036234  +
push offset SubBlock  +
push dword ptr [ebp+8]  +
lea eax [ebp-14h] +
push eax  +
call sub_1015847  +
mov dword ptr [ebp-4] 5 +
push dword ptr [ebp+0Ch]  +
push eax  +
lea eax [ebp+8] +
push eax  +
call sub_10157ED  +
mov byte ptr [ebp-4] 6 +
mov ecx [ebp+10h] +
push eax  +
call sub_1015AAF  +
mov byte ptr [ebp-4] 5 +
lea ecx [ebp+8] +
jmp loc_10361E5  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp+0Ch] +
push dword ptr [ebp+8]  +
push eax  +
call sub_10157ED  +
mov dword ptr [ebp-4] 4 +
mov ecx [ebp+10h] +
push eax  +
call sub_1015AAF  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+0Ch] +
call sub_1015174  +
mov al bl +
call sub_1021FA5  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor esi esi +
cmp edi esi +
jz loc_10362CF  +
mov ebx [ebp+arg_4] +
lea eax [ebx-1] +
cmp eax 270Fh +
ja loc_10362CF  +
cmp [ebp+arg_8] esi +
jz loc_10362CF  +
cmp ebx esi +
jbe loc_10362CA  +
movzx eax byte ptr [esi+edi] +
mov ecx [ebp+arg_8] +
shr eax 4 +
movzx eax ds:word_100A5C8[eax*2] +
push eax  +
call sub_1036016  +
movzx eax byte ptr [esi+edi] +
mov ecx [ebp+arg_8] +
and eax 0Fh +
movzx eax ds:word_100A5C8[eax*2] +
push eax  +
call sub_1036016  +
inc esi  +
cmp esi ebx +
jb loc_1036295  +
xor eax eax +
inc eax  +
jmp loc_10362D1  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_8] 0 +
and [ebp+var_4] 0 +
push esi  +
mov esi [ebp+arg_4] +
test esi esi +
jz loc_103632E  +
mov ecx esi +
call sub_1014FC6  +
mov eax [ebp+arg_0] +
mov eax [eax] +
cmp dword ptr [eax-0Ch] 0 +
jz loc_103632E  +
lea ecx [ebp+var_8] +
push ecx  +
push eax  +
call sub_1052AD4  +
test eax eax +
jz loc_1036320  +
push esi  +
push 8  +
lea eax [ebp+var_8] +
push eax  +
call sub_103626E  +
mov eax [esi] +
xor ecx ecx +
cmp [eax-0Ch] ecx +
setnz cl  +
mov eax ecx +
jmp loc_1036330  +
xor eax eax +
pop esi  +
leave   +
retn 8  +
***
call sub_1021EB9  +
xor esi esi +
mov [ebp-4] esi +
mov ecx [ebp+0Ch] +
mov [ebp-14h] esi +
mov [ebp-10h] esi +
cmp ecx esi +
jnz loc_103636E  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
mov eax esi +
call sub_1021FA5  +
retn 8  +
call sub_1014FC6  +
push esi  +
push esi  +
push 3  +
push esi  +
push 1  +
push 80000000h  +
push dword ptr [ebp+8]  +
call ds:CreateFileW  +
mov ebx eax +
cmp ebx 0FFFFFFFFh +
jz loc_10363EA  +
push esi  +
push esi  +
lea eax [ebp-10h] +
push eax  +
push ebx  +
call CryptCATAdminCalcHashFromFileHandle  +
mov edi eax +
cmp edi esi +
jz loc_10363C3  +
push dword ptr [ebp-10h]  +
call sub_1021488  +
pop ecx  +
mov [ebp-14h] eax +
cmp eax esi +
jz loc_10363C1  +
push esi  +
push eax  +
lea eax [ebp-10h] +
push eax  +
push ebx  +
call CryptCATAdminCalcHashFromFileHandle  +
mov edi eax +
jmp loc_10363C3  +
xor edi edi +
push ebx  +
call ds:CloseHandle  +
cmp edi esi +
jz loc_10363DC  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp-10h]  +
push dword ptr [ebp-14h]  +
call sub_103626E  +
cmp [ebp-14h] esi +
jz loc_10363EA  +
push dword ptr [ebp-14h]  +
call sub_10213A1  +
pop ecx  +
mov eax [ebp+0Ch] +
mov eax [eax] +
mov eax [eax-0Ch] +
xor ecx ecx +
cmp eax esi +
setnz cl  +
mov esi ecx +
jmp loc_1036358  +
***
call sub_1021EB9  +
xor edi edi +
mov [ebp-4] edi +
mov ecx [ebp+0Ch] +
xor ebx ebx +
mov [ebp-10h] edi +
mov [ebp-14h] edi +
cmp ecx edi +
jnz loc_103643D  +
xor esi esi +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
mov eax esi +
call sub_1021FA5  +
retn 8  +
call sub_1014FC6  +
lea eax [ebp-10h] +
push eax  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
push 0Eh  +
push 4  +
push dword ptr [ebp+8]  +
push 1  +
call ds:CryptQueryObject  +
test eax eax +
jz loc_10364B0  +
mov esi ds:CertGetCTLContextProperty +
lea eax [ebp-14h] +
push eax  +
push edi  +
push 3  +
push dword ptr [ebp-10h]  +
call esi  +
test eax eax +
jz loc_103649D  +
push dword ptr [ebp-14h]  +
call sub_1021488  +
mov ebx eax +
pop ecx  +
cmp ebx edi +
jz loc_1036498  +
lea eax [ebp-14h] +
push eax  +
push ebx  +
push 3  +
push dword ptr [ebp-10h]  +
call esi  +
test eax eax +
jz loc_103649D  +
xor esi esi +
jmp loc_10364A5  +
push 0Eh  +
pop esi  +
jmp loc_10364A5  +
call ds:GetLastError  +
mov esi eax +
push dword ptr [ebp-10h]  +
call ds:CertFreeCTLContext  +
jmp loc_10364B8  +
call ds:GetLastError  +
mov esi eax +
cmp esi edi +
jnz loc_10364CF  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp-14h]  +
push ebx  +
call sub_103626E  +
test eax eax +
jnz loc_10364CF  +
push 57h  +
pop esi  +
cmp ebx edi +
jz loc_1036427  +
push ebx  +
call sub_10213A1  +
pop ecx  +
jmp loc_1036427  +
***
call sub_1021EB9  +
lea ecx [ebp-1Ch] +
call sub_10151DA  +
xor ebx ebx +
mov [ebp-4] ebx +
lea ecx [ebp-14h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-10h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-20h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-18h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 4 +
cmp [ebp+14h] ebx +
jnz loc_103657B  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-18h] +
call sub_1015174  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-20h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-10h] +
call sub_1015174  +
mov [ebp-4] bl +
lea ecx [ebp-14h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call sub_1015174  +
xor eax eax +
call sub_1021FA5  +
retn 10h  +
mov ecx [ebp+14h] +
call sub_1014FC6  +
mov esi [ebp+8] +
push esi  +
call sub_1035549  +
test al al +
jnz loc_103659A  +
push 7Bh  +
call ds:SetLastError  +
jmp loc_1036536  +
lea eax [ebp-18h] +
push eax  +
push esi  +
call sub_10362DD  +
test eax eax +
jz loc_1036536  +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-18h] +
push eax  +
push dword ptr [ebp+0Ch]  +
call sub_10360F6  +
test al al +
jz loc_1036536  +
mov eax [ebp+10h] +
mov ecx [eax] +
cmp [ecx-0Ch] ebx +
jnz loc_10365E1  +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-20h] +
push eax  +
push esi  +
call sub_1036032  +
test al al +
jnz loc_10365EA  +
jmp loc_1036536  +
push eax  +
lea ecx [ebp-14h] +
call sub_1015959  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
call sub_10360F6  +
test al al +
jz loc_1036536  +
lea eax [ebp-10h] +
push eax  +
call sub_1035549  +
test al al +
jnz loc_1036675  +
push dword ptr [ebp-10h]  +
call sub_105287B  +
test eax eax +
jnz loc_1036536  +
mov eax [esi] +
push ebx  +
push dword ptr [ebp-10h]  +
push eax  +
call ds:CopyFileW  +
test eax eax +
jnz loc_1036675  +
xor esi esi +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-18h] +
call sub_1015174  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-20h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-10h] +
call sub_1015174  +
mov [ebp-4] bl +
lea ecx [ebp-14h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call sub_1015174  +
mov eax esi +
jmp loc_1036573  +
mov ecx [ebp+14h] +
lea eax [ebp-10h] +
push eax  +
call sub_1015959  +
xor esi esi +
inc esi  +
jmp loc_1036633  +
***
call sub_1021EB9  +
cmp dword ptr [ebp+8] 0 +
jnz loc_10366A8  +
push 57h  +
pop eax  +
call sub_1021FA5  +
retn 4  +
lea ecx [ebp-10h] +
call sub_10151DA  +
and dword ptr [ebp-4] 0 +
push 105h  +
lea ecx [ebp-10h] +
call sub_10158A3  +
mov ecx [ebp-10h] +
push dword ptr [ecx-0Ch]  +
push eax  +
call sub_10358CE  +
mov esi eax +
mov eax [ebp-10h] +
mov eax [eax-0Ch] +
cmp esi eax +
jbe loc_10366FA  +
push 0FFFFFFFFh  +
lea ecx [ebp-10h] +
call sub_1015023  +
push esi  +
lea ecx [ebp-10h] +
call sub_10158A3  +
mov ecx [ebp-10h] +
push dword ptr [ecx-0Ch]  +
push eax  +
call sub_10358CE  +
mov esi eax +
push 0FFFFFFFFh  +
lea ecx [ebp-10h] +
call sub_1015023  +
test esi esi +
jnz loc_1036720  +
call ds:GetLastError  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_1015174  +
mov eax esi +
jmp loc_10366A0  +
mov ecx [ebp+8] +
lea eax [ebp-10h] +
push eax  +
call sub_1015959  +
xor esi esi +
jmp loc_1036710  +
***
call sub_1021EB9  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-10h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 1 +
and dword ptr [ebp-14h] 0 +
cmp dword ptr [ebp+0Ch] 0 +
jnz loc_1036780  +
push 57h  +
pop esi  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-10h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
mov eax esi +
call sub_1021FA5  +
retn 0Ch  +
push 105h  +
lea ecx [ebp-10h] +
call sub_10158A3  +
mov ecx [ebp-10h] +
mov ecx [ecx-0Ch] +
mov esi ds:GetFullPathNameW +
lea edx [ebp-14h] +
push edx  +
push eax  +
push ecx  +
push dword ptr [ebp+8]  +
call esi  +
mov edi eax +
mov eax [ebp-10h] +
cmp edi [eax-0Ch] +
jbe loc_10367D4  +
push 0FFFFFFFFh  +
lea ecx [ebp-10h] +
call sub_1015023  +
push edi  +
lea ecx [ebp-10h] +
call sub_10158A3  +
mov ecx [ebp-10h] +
mov ecx [ecx-0Ch] +
lea edx [ebp-14h] +
push edx  +
push eax  +
push ecx  +
push dword ptr [ebp+8]  +
call esi  +
mov edi eax +
push 0FFFFFFFFh  +
lea ecx [ebp-10h] +
call sub_1015023  +
test edi edi +
jnz loc_10367EF  +
call ds:GetLastError  +
mov esi eax +
jmp loc_103675E  +
mov ecx [ebp+0Ch] +
lea eax [ebp-10h] +
push eax  +
call sub_1015959  +
mov ecx [ebp+10h] +
test ecx ecx +
jz loc_103680A  +
push dword ptr [ebp-14h]  +
call sub_1015ACB  +
xor esi esi +
jmp loc_103675E  +
***
call sub_1021EB9  +
cmp dword ptr [ebp+8] 0 +
jnz loc_1036833  +
push 57h  +
pop eax  +
call sub_1021FA5  +
retn 4  +
lea ecx [ebp-10h] +
call sub_10151DA  +
and dword ptr [ebp-4] 0 +
mov esi 105h +
push esi  +
lea ecx [ebp-10h] +
call sub_10158A3  +
push eax  +
push esi  +
mov esi ds:GetCurrentDirectoryW +
call esi  +
mov edi eax +
mov eax [ebp-10h] +
mov eax [eax-0Ch] +
cmp edi eax +
jbe loc_103687C  +
push 0FFFFFFFFh  +
lea ecx [ebp-10h] +
call sub_1015023  +
push edi  +
lea ecx [ebp-10h] +
call sub_10158A3  +
push eax  +
push edi  +
call esi  +
mov edi eax +
push 0FFFFFFFFh  +
lea ecx [ebp-10h] +
call sub_1015023  +
test edi edi +
jnz loc_10368A2  +
call ds:GetLastError  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_1015174  +
mov eax esi +
jmp loc_103682B  +
mov ecx [ebp+8] +
lea eax [ebp-10h] +
push eax  +
call sub_1015959  +
xor esi esi +
jmp loc_1036892  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov ecx [ebp+arg_0] +
xor eax eax +
mov [ebp+var_8] ecx +
mov [ebp+arg_0] eax +
cmp [ebp+arg_4] eax +
jz locret_103696A  +
push ebx  +
push esi  +
mov esi ds:FormatMessageW +
push edi  +
push eax  +
push eax  +
lea edx [ebp+hMem] +
push edx  +
mov ebx 400h +
push ebx  +
push ecx  +
push eax  +
mov edi 1100h +
jmp loc_103692A  +
inc [ebp+arg_0]  +
mov eax [ebp+arg_0] +
dec eax  +
jnz loc_103695B  +
mov eax [ebp+var_8] +
mov ecx 0E0000000h +
mov edx eax +
and edx ecx +
cmp edx ecx +
jnz loc_1036913  +
movzx eax ax +
or eax 800F0000h +
jmp loc_103691F  +
test eax eax +
jle loc_103691F  +
movzx eax ax +
or eax 80070000h +
xor ecx ecx +
push ecx  +
push ecx  +
lea edx [ebp+hMem] +
push edx  +
push ebx  +
push eax  +
push ecx  +
push edi  +
call esi  +
test eax eax +
jz loc_10368F0  +
mov esi [ebp+arg_4] +
push [ebp+hMem]  +
mov ecx esi +
call sub_1015ACB  +
mov eax [esi] +
mov eax [eax-0Ch] +
dec eax  +
dec eax  +
push eax  +
mov ecx esi +
call sub_1035EC3  +
push [ebp+hMem]  +
call ds:LocalFree  +
xor esi esi +
inc esi  +
jmp loc_1036965  +
mov ecx [ebp+arg_4] +
xor esi esi +
call sub_1014FC6  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
call sub_1021EB9  +
mov dword ptr [ebp-4] 4 +
mov eax [ebp+0Ch] +
xor ebx ebx +
mov [ebp-14h] ebx +
mov [ebp-10h] ebx +
cmp [eax-0Ch] ebx +
jz loc_1036B30  +
mov eax [ebp+10h] +
cmp [eax-0Ch] ebx +
jz loc_1036B30  +
mov eax [ebp+14h] +
cmp [eax-0Ch] ebx +
jz loc_1036B30  +
lea eax [ebp-14h] +
push eax  +
push 2001Fh  +
push ebx  +
push offset aSoftwareMicros  +
push 80000002h  +
call ds:RegOpenKeyExW  +
cmp eax ebx +
jz loc_10369D7  +
xor edi edi +
jmp loc_1036ABF  +
mov eax [ebp+8] +
mov eax [eax] +
push ebx  +
lea ecx [ebp-10h] +
push ecx  +
push ebx  +
push 0F003Fh  +
push ebx  +
push ebx  +
push ebx  +
push eax  +
push dword ptr [ebp-14h]  +
call ds:RegCreateKeyExW  +
cmp eax ebx +
jnz loc_10369D0  +
mov eax [ebp+10h] +
mov eax [eax-0Ch] +
lea eax [eax+eax+2] +
push eax  +
lea ecx [ebp+10h] +
call sub_1015002  +
mov esi ds:RegSetValueExW +
push eax  +
xor edi edi +
inc edi  +
push edi  +
push ebx  +
push offset aUninstallstrin  +
push dword ptr [ebp-10h]  +
call esi  +
cmp eax ebx +
jnz loc_10369D0  +
mov eax [ebp+0Ch] +
mov eax [eax-0Ch] +
lea eax [eax+eax+2] +
push eax  +
lea ecx [ebp+0Ch] +
call sub_1015002  +
push eax  +
push edi  +
push ebx  +
push offset aDisplayname  +
push dword ptr [ebp-10h]  +
call esi  +
cmp eax ebx +
jnz loc_10369D0  +
push offset a0  +
lea ecx [ebp+14h] +
call sub_1018C3E  +
mov eax [ebp+14h] +
mov eax [eax-0Ch] +
lea eax [eax+eax+2] +
push eax  +
lea ecx [ebp+14h] +
call sub_1015002  +
push eax  +
push 2  +
push ebx  +
push offset aDisplayicon  +
push dword ptr [ebp-10h]  +
call esi  +
mov eax [ebp+18h] +
mov eax [eax-0Ch] +
cmp eax ebx +
jz loc_1036A9B  +
lea eax [eax+eax+2] +
push eax  +
lea ecx [ebp+18h] +
call sub_1015002  +
push eax  +
push edi  +
push ebx  +
push offset aDisplayversion  +
push dword ptr [ebp-10h]  +
call esi  +
mov eax [ebp+1Ch] +
mov eax [eax-0Ch] +
cmp eax ebx +
jz loc_1036ABF  +
lea eax [eax+eax+2] +
push eax  +
lea ecx [ebp+1Ch] +
call sub_1015002  +
push eax  +
push edi  +
push ebx  +
push offset aPublisher  +
push dword ptr [ebp-10h]  +
call esi  +
mov esi ds:RegCloseKey +
cmp [ebp-10h] ebx +
jz loc_1036AD2  +
push dword ptr [ebp-10h]  +
call esi  +
mov [ebp-10h] ebx +
cmp [ebp-14h] ebx +
jz loc_1036AF1  +
cmp edi ebx +
jnz loc_1036AE9  +
mov eax [ebp+8] +
push dword ptr [eax]  +
push dword ptr [ebp-14h]  +
call ds:RegDeleteKeyW  +
push dword ptr [ebp-14h]  +
call esi  +
mov [ebp-14h] ebx +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp+0Ch] +
call sub_1015174  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp+10h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp+14h] +
call sub_1015174  +
mov [ebp-4] bl +
lea ecx [ebp+18h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+1Ch] +
call sub_1015174  +
mov eax edi +
jmp loc_1036B6D  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp+0Ch] +
call sub_1015174  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp+10h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp+14h] +
call sub_1015174  +
mov [ebp-4] bl +
lea ecx [ebp+18h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+1Ch] +
call sub_1015174  +
xor eax eax +
call sub_1021FA5  +
retn 18h  +
***
call sub_1021EB9  +
lea ecx [ebp-1Ch] +
xor esi esi +
call sub_10151DA  +
and [ebp-4] esi +
lea ecx [ebp-14h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-10h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-18h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 3 +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
push ecx  +
mov ecx esp +
mov [ebp-20h] esp +
push dword ptr [ebp+8]  +
call sub_10151F2  +
mov byte ptr [ebp-4] 4 +
mov byte ptr [ebp-4] 3 +
call sub_1036735  +
test eax eax +
jz loc_1036C18  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-18h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-10h] +
call sub_1015174  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-14h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call sub_1015174  +
mov eax esi +
call sub_1021FA5  +
retn 4  +
lea eax [ebp-10h] +
push eax  +
call sub_103668B  +
test eax eax +
jnz loc_1036BDE  +
push offset SubBlock  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-20h] +
push eax  +
call sub_1015847  +
mov byte ptr [ebp-4] 5 +
lea ecx [ebp-14h] +
push ecx  +
push eax  +
lea eax [ebp+8] +
push eax  +
call sub_10157ED  +
mov byte ptr [ebp-4] 6 +
push eax  +
lea ecx [ebp-18h] +
call sub_1015959  +
mov byte ptr [ebp-4] 5 +
lea ecx [ebp+8] +
call sub_1015174  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-20h] +
call sub_1015174  +
push dword ptr [ebp-18h]  +
push dword ptr [ebp-1Ch]  +
call sub_10224ED  +
mov esi eax +
neg esi  +
pop ecx  +
sbb esi esi +
pop ecx  +
inc esi  +
jmp loc_1036BDE  +
***
call sub_1021F2C  +
mov esi [ebp+8] +
lea ecx [ebp-0A88h] +
mov byte ptr [ebp-0A81h] 1 +
call sub_10151DA  +
xor ebx ebx +
mov [ebp-4] ebx +
lea ecx [ebp-0A90h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-0A94h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 2 +
push dword ptr [esi]  +
call ds:GetFileAttributesW  +
mov [ebp-0A8Ch] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1036D1C  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-0A94h] +
call sub_1015174  +
mov [ebp-4] bl +
lea ecx [ebp-0A90h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-0A88h] +
call sub_1015174  +
xor al al +
call sub_1021FBE  +
retn 4  +
test al 10h +
jnz loc_1036D53  +
xor bl bl +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-0A94h] +
call sub_1015174  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-0A90h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-0A88h] +
call sub_1015174  +
mov al bl +
jmp loc_1036D14  +
lea eax [ebp-0A94h] +
push eax  +
lea eax [ebp-0A90h] +
push eax  +
push esi  +
call sub_1036032  +
mov edi ds:MoveFileExW +
test al al +
jz loc_1036DAF  +
mov eax [ebp-0A90h] +
cmp [eax-0Ch] ebx +
jz loc_1036DAF  +
lea ecx [ebp-420h] +
push ecx  +
push ebx  +
push offset PrefixString  +
push eax  +
call ds:GetTempFileNameW  +
test eax eax +
jz loc_1036DAF  +
mov eax [esi] +
push 1  +
lea ecx [ebp-420h] +
push ecx  +
push eax  +
call edi  +
test eax eax +
jz loc_1036DAF  +
lea eax [ebp-420h] +
push eax  +
jmp loc_1036DB1  +
push dword ptr [esi]  +
lea ecx [ebp-0A88h] +
call sub_10158CD  +
test dword ptr [ebp-0A8Ch] 400h +
jz loc_1036E07  +
push ebx  +
push 6200000h  +
push 3  +
push ebx  +
push 7  +
push 10000h  +
push dword ptr [ebp-0A88h]  +
call ds:CreateFileW  +
cmp eax 0FFFFFFFFh +
jz loc_1036DF7  +
push eax  +
call ds:CloseHandle  +
mov bl 1 +
jmp loc_1036D22  +
push 4  +
push ebx  +
push dword ptr [ebp-0A88h]  +
call edi  +
jmp loc_1036D20  +
push dword ptr [ebp-0A88h]  +
mov esi 104h +
push esi  +
lea eax [ebp-830h] +
push eax  +
call sub_1014BA1  +
test eax eax +
jl loc_1036D20  +
push ebx  +
push esi  +
push offset a__2  +
lea eax [ebp-830h] +
push eax  +
call sub_1052D9C  +
test eax eax +
jz loc_1036D20  +
lea eax [ebp-0A80h] +
push eax  +
lea eax [ebp-830h] +
xor esi esi +
push eax  +
inc esi  +
call ds:FindFirstFileW  +
mov [ebp-0A8Ch] eax +
cmp eax 0FFFFFFFFh +
jz loc_1036FB5  +
cmp esi 1 +
jnz loc_1036FB5  +
push dword ptr [ebp-0A88h]  +
mov esi 104h +
push esi  +
lea eax [ebp-218h] +
push eax  +
call sub_1014BA1  +
test eax eax +
jl loc_1036F27  +
push ebx  +
push esi  +
lea eax [ebp-0A54h] +
push eax  +
lea eax [ebp-218h] +
push eax  +
call sub_1052D9C  +
test eax eax +
jz loc_1036F27  +
test byte ptr [ebp-0A80h] 10h +
jz loc_1036F41  +
mov esi ds:lstrcmpW +
push offset String2  +
lea eax [ebp-0A54h] +
push eax  +
call esi  +
test eax eax +
jz loc_1036F27  +
push offset a__  +
lea eax [ebp-0A54h] +
push eax  +
call esi  +
test eax eax +
jz loc_1036F27  +
lea eax [ebp-218h] +
push eax  +
lea ecx [ebp-0A98h] +
call sub_10161A7  +
mov byte ptr [ebp-4] 3 +
lea eax [ebp-0A98h] +
push eax  +
call sub_1036C8C  +
mov bl al +
neg bl  +
sbb bl bl +
inc bl  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-0A98h] +
call sub_1015174  +
test bl bl +
jz loc_1036F25  +
mov byte ptr [ebp-0A81h] 0 +
xor ebx ebx +
lea eax [ebp-0A80h] +
push eax  +
push dword ptr [ebp-0A8Ch]  +
call ds:FindNextFileW  +
mov esi eax +
jmp loc_1036E68  +
push 80h  +
lea eax [ebp-218h] +
push eax  +
call ds:SetFileAttributesW  +
lea eax [ebp-218h] +
push eax  +
call ds:DeleteFileW  +
test eax eax +
jnz loc_1036F27  +
lea eax [ebp-628h] +
push eax  +
push ebx  +
push offset PrefixString  +
push dword ptr [ebp-0A88h]  +
call ds:GetTempFileNameW  +
test eax eax +
jz loc_1036F9D  +
push 1  +
lea eax [ebp-628h] +
push eax  +
lea eax [ebp-218h] +
push eax  +
call edi  +
test eax eax +
lea eax [ebp-628h] +
jnz loc_1036FA3  +
lea eax [ebp-218h] +
push 4  +
push ebx  +
push eax  +
call edi  +
mov byte ptr [ebp-0A81h] 0 +
jmp loc_1036F27  +
push dword ptr [ebp-0A8Ch]  +
call ds:FindClose  +
push dword ptr [ebp-0A88h]  +
call ds:GetFileAttributesW  +
test al 10h +
jz loc_1036FF3  +
push dword ptr [ebp-0A88h]  +
call ds:RemoveDirectoryW  +
test eax eax +
jnz loc_1036FF3  +
push 4  +
push ebx  +
push dword ptr [ebp-0A88h]  +
call edi  +
mov byte ptr [ebp-0A81h] 0 +
mov bl [ebp-0A81h] +
jmp loc_1036D22  +
***
call sub_1021EB9  +
xor esi esi +
lea ecx [ebp-14h] +
mov [ebp-10h] esi +
mov [ebp-18h] esi +
call sub_10151DA  +
mov [ebp-4] esi +
mov edi [ebp+8] +
mov eax [edi] +
cmp [eax-0Ch] esi +
jnz loc_1037042  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call sub_1015174  +
mov eax esi +
call sub_1021FA5  +
retn 4  +
mov ebx offset aSoftwareMicros +
push ebx  +
lea ecx [ebp-1Ch] +
call sub_10161A7  +
mov byte ptr [ebp-4] 1 +
lea eax [ebp-14h] +
push eax  +
push edi  +
lea eax [ebp-1Ch] +
push eax  +
call sub_10360F6  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-1Ch] +
call sub_1015174  +
lea eax [ebp-10h] +
push eax  +
push 20019h  +
push esi  +
push dword ptr [ebp-14h]  +
mov esi ds:RegOpenKeyExW +
mov edi 80000002h +
push edi  +
call esi  +
test eax eax +
jnz loc_10370CD  +
push dword ptr [ebp-10h]  +
call ds:RegCloseKey  +
lea eax [ebp-10h] +
push eax  +
push 2001Fh  +
push 0  +
push ebx  +
push edi  +
call esi  +
test eax eax +
jnz loc_10370D4  +
mov eax [ebp+8] +
push dword ptr [eax]  +
push dword ptr [ebp-10h]  +
call ds:RegDeleteKeyW  +
test eax eax +
jnz loc_10370C2  +
mov dword ptr [ebp-18h] 1 +
push dword ptr [ebp-10h]  +
call ds:RegCloseKey  +
jmp loc_10370D4  +
mov dword ptr [ebp-18h] 1 +
mov esi [ebp-18h] +
jmp loc_103702C  +
***
call sub_1021EB9  +
xor ebx ebx +
lea ecx [ebp-10h] +
mov [ebp-14h] ebx +
call sub_10151DA  +
mov [ebp-4] ebx +
mov esi [ebp+8] +
mov eax [esi] +
cmp [eax-0Ch] ebx +
jnz loc_103711D  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_1015174  +
mov eax ebx +
call sub_1021FA5  +
retn 4  +
push offset aSoftwareMicros  +
lea ecx [ebp+8] +
call sub_10161A7  +
mov byte ptr [ebp-4] 1 +
lea eax [ebp-10h] +
push eax  +
push esi  +
lea eax [ebp+8] +
push eax  +
call sub_10360F6  +
mov [ebp-4] bl +
lea ecx [ebp+8] +
call sub_1015174  +
lea eax [ebp-14h] +
push eax  +
push 20019h  +
push ebx  +
push dword ptr [ebp-10h]  +
push 80000002h  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_1037107  +
push dword ptr [ebp-14h]  +
call ds:RegCloseKey  +
xor ebx ebx +
inc ebx  +
jmp loc_1037107  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push dword ptr [esi]  +
push 0  +
push [ebp+arg_0]  +
call sub_1016CD9  +
mov ecx [esi] +
test ecx ecx +
jz loc_1037195  +
mov [ecx+4] eax +
jmp loc_1037198  +
mov [esi+4] eax +
mov [esi] eax +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1021EB9  +
lea ecx [ebp-10h] +
call sub_10151DA  +
and dword ptr [ebp-4] 0 +
push 0  +
lea eax [ebp-10h] +
push eax  +
push ecx  +
mov ecx esp +
mov [ebp-14h] esp +
push dword ptr [ebp+8]  +
call sub_10151F2  +
mov byte ptr [ebp-4] 1 +
mov byte ptr [ebp-4] 0 +
call sub_1036735  +
test eax eax +
jz loc_10371F6  +
xor bl bl +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_1015174  +
mov al bl +
jmp loc_10373A4  +
lea eax [ebp-10h] +
push eax  +
call sub_1035522  +
test al al +
jz loc_1037207  +
mov bl 1 +
jmp loc_10371E3  +
push 0Ah  +
lea ecx [ebp-2Ch] +
call sub_101C247  +
mov byte ptr [ebp-4] 2 +
mov eax [ebp-10h] +
mov ecx [eax-0Ch] +
push 3  +
pop edi  +
cmp ecx edi +
jl loc_10372A8  +
test ecx ecx +
jge loc_1037234  +
push 80070057h  +
call loc_1014415  +
movzx eax word ptr [eax] +
push eax  +
call sub_102D7AA  +
pop ecx  +
push 5Ch  +
test eax eax +
mov eax [ebp-10h] +
pop ebx  +
jz loc_1037268  +
mov ecx [eax-0Ch] +
cmp ecx 1 +
jl loc_103722A  +
movzx edx word ptr [eax+2] +
cmp dx 3Ah +
jnz loc_1037268  +
cmp ecx 2 +
jl loc_103722A  +
movzx ecx word ptr [eax+4] +
cmp cx bx +
jz loc_10372B9  +
mov edx [eax-0Ch] +
test edx edx +
jl loc_103722A  +
movzx ecx word ptr [eax] +
cmp cx bx +
jnz loc_10372A8  +
cmp edx 1 +
jl loc_103722A  +
movzx eax word ptr [eax+2] +
cmp ax bx +
jnz loc_10372A8  +
push 2  +
push ebx  +
lea ecx [ebp-10h] +
call sub_1035C28  +
test eax eax +
jl loc_10372A8  +
inc eax  +
push eax  +
push ebx  +
lea ecx [ebp-10h] +
call sub_1035C28  +
mov edi eax +
test edi edi +
jl loc_10372A8  +
inc edi  +
jns loc_10372B9  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-2Ch] +
call loc_1014AB9  +
jmp loc_1037203  +
push ebx  +
lea ecx [ebp-10h] +
call sub_10358A2  +
mov esi eax +
cmp esi edi +
jg loc_10372CC  +
mov esi edi +
jmp loc_10372CD  +
inc esi  +
push esi  +
lea eax [ebp+8] +
push eax  +
lea ecx [ebp-10h] +
call sub_1035E50  +
mov byte ptr [ebp-4] 3 +
push dword ptr [eax]  +
lea ecx [ebp-2Ch] +
call sub_1037176  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp+8] +
call sub_1015174  +
cmp esi edi +
jle loc_103732C  +
dec esi  +
push esi  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-10h] +
call sub_101ABF3  +
mov byte ptr [ebp-4] 4 +
push eax  +
lea ecx [ebp-10h] +
call sub_1015959  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-14h] +
call sub_1015174  +
lea eax [ebp-10h] +
push eax  +
call sub_1035522  +
test al al +
jz loc_10372B9  +
xor esi esi +
cmp [ebp-24h] esi +
jz loc_10372A8  +
mov eax [ebp-2Ch] +
mov [ebp-14h] eax +
cmp eax esi +
jz loc_103738A  +
lea eax [ebp-10h] +
push eax  +
lea ecx [ebp+8] +
call sub_10151F2  +
mov byte ptr [ebp-4] 5 +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-2Ch] +
call sub_105038C  +
push eax  +
lea eax [ebp+8] +
push eax  +
call sub_10360F6  +
push esi  +
push dword ptr [ebp-10h]  +
call ds:CreateDirectoryW  +
test eax eax +
jz loc_10373AC  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp+8] +
call sub_1015174  +
cmp [ebp-14h] esi +
jnz loc_1037341  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-2Ch] +
call loc_1014AB9  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_1015174  +
mov al 1 +
call sub_1021FA5  +
retn 4  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp+8] +
call sub_1015174  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-2Ch] +
call loc_1014AB9  +
jmp loc_10371E1  +
***
call sub_1021EB9  +
lea ecx [ebp-10h] +
call sub_10151DA  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-14h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 1 +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+8]  +
call sub_1036032  +
test al al +
jnz loc_103742A  +
xor bl bl +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-14h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_1015174  +
mov al bl +
call sub_1021FA5  +
retn 4  +
lea eax [ebp-10h] +
push eax  +
call sub_10371A4  +
mov bl al +
jmp loc_1037408  +
***
call sub_1021EB9  +
mov dword ptr [ebp-4] 1 +
lea ecx [ebp-14h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-10h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 3 +
lea eax [ebp+8] +
push eax  +
call sub_1035549  +
test al al +
jnz loc_10374B6  +
push 7Bh  +
call ds:SetLastError  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-10h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-14h] +
call sub_1015174  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp+8] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+0Ch] +
call sub_1015174  +
xor eax eax +
call sub_1021FA5  +
retn 0Ch  +
lea eax [ebp+0Ch] +
push eax  +
call sub_10371A4  +
test al al +
jz loc_103747C  +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp+8] +
push eax  +
call sub_10362DD  +
test eax eax +
jz loc_103747C  +
push 2Eh  +
lea ecx [ebp+8] +
call sub_10358A2  +
cmp eax 0FFFFFFFFh +
jz loc_103747C  +
mov ecx [ebp+8] +
mov ecx [ecx-0Ch] +
sub ecx eax +
push ecx  +
lea eax [ebp-18h] +
push eax  +
lea ecx [ebp+8] +
call sub_1035C63  +
mov byte ptr [ebp-4] 4 +
mov eax [ebp-18h] +
push dword ptr [eax-0Ch]  +
lea ecx [ebp-14h] +
push eax  +
call sub_10155F6  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
call sub_10360F6  +
test al al +
jnz loc_1037531  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-18h] +
call sub_1015174  +
jmp loc_103747C  +
lea eax [ebp-10h] +
push eax  +
call sub_1035549  +
test al al +
jnz loc_10375A0  +
push dword ptr [ebp-10h]  +
call sub_105287B  +
test eax eax +
jnz loc_1037520  +
xor esi esi +
push esi  +
push dword ptr [ebp-10h]  +
push dword ptr [ebp+8]  +
call ds:CopyFileW  +
test eax eax +
jnz loc_10375A0  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-18h] +
call sub_1015174  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-10h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-14h] +
call sub_1015174  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp+8] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+0Ch] +
call sub_1015174  +
mov eax esi +
jmp loc_10374AE  +
mov ecx [ebp+10h] +
lea eax [ebp-10h] +
push eax  +
call sub_1015959  +
xor esi esi +
inc esi  +
jmp loc_103755D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_103AC32  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+8] +
fild  dword ptr [esi+8] +
test eax eax +
jge loc_10375DF  +
fadd  ds:flt_100A798 +
fstp  [ebp+var_4] +
fld  dword ptr [esi+14h] +
fmul  [ebp+var_4] +
call sub_1054666  +
fld  dword ptr [esi+10h] +
fmul  [ebp+var_4] +
mov [esi+18h] eax +
call sub_1054666  +
mov [esi+1Ch] eax +
cmp eax 11h +
jnb loc_1037607  +
and dword ptr [esi+1Ch] 0 +
pop esi  +
leave   +
retn   +
***
cmp dword ptr [ecx+4] 0 +
jnz loc_1037618  +
xor eax eax +
retn   +
mov eax [ecx+8] +
push esi  +
xor esi esi +
test eax eax +
jbe loc_1037633  +
mov ecx [ecx] +
mov edx ecx +
cmp dword ptr [edx] 0 +
jnz loc_1037637  +
inc esi  +
add edx 4 +
cmp esi eax +
jb loc_1037626  +
xor eax eax +
pop esi  +
retn   +
mov eax [ecx+esi*4] +
pop esi  +
retn   +
***
call sub_1021EF1  +
mov esi ecx +
mov [ebp-14h] esi +
mov eax [esi] +
xor ebx ebx +
cmp eax ebx +
jz loc_1037663  +
push eax  +
call sub_1021189  +
pop ecx  +
mov [esi] ebx +
cmp [ebp+0Ch] bl +
jz loc_10376BB  +
mov eax [ebp+8] +
cmp eax 3FFFFFFFh +
jbe loc_1037676  +
xor al al +
jmp loc_10376CA  +
mov [ebp-4] ebx +
xor ecx ecx +
push 4  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_1054617  +
pop ecx  +
mov [esi] eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
jmp loc_10376A3  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_10376A0 +
retn   +
mov esi [ebp-14h] +
mov eax [esi] +
test eax eax +
jz loc_1037672  +
mov ecx [ebp+8] +
shl ecx 2 +
push ecx  +
push 0  +
push eax  +
call sub_10219E0  +
add esp 0Ch +
mov eax [ebp+8] +
mov [esi+8] eax +
mov ecx esi +
call sub_10375C6  +
mov al 1 +
call sub_1021FA5  +
retn 8  +
***
call sub_1021EB9  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-108h] +
call sub_104027B  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-28h] +
call sub_103B217  +
mov byte ptr [ebp-4] 2 +
mov esi [ebp+0Ch] +
mov ecx esi +
call loc_1014AB9  +
lea eax [ebp+8] +
push eax  +
lea ecx [ebp-108h] +
call sub_1040403  +
test eax eax +
jz loc_1037768  +
push dword ptr [ebp+8]  +
push offset aFailedToOpenS_  +
push eax  +
push 3  +
call sub_103AD09  +
add esp 10h +
xor esi esi +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-28h] +
call sub_103AF75  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-108h] +
call sub_1040358  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
mov eax esi +
call sub_1021FA5  +
retn 8  +
lea eax [ebp-28h] +
push eax  +
push 0  +
push 3  +
lea eax [ebp-108h] +
push eax  +
call sub_103E556  +
cmp eax 0B7h +
jnz loc_1037798  +
push esi  +
push 0Ah  +
lea ecx [ebp-28h] +
call sub_103C4CC  +
lea ecx [ebp-28h] +
call sub_103ADBD  +
jmp loc_10377AB  +
push dword ptr [ebp+8]  +
push offset aInvalidDriverS  +
push eax  +
push 3  +
call sub_103AD09  +
add esp 10h +
xor eax eax +
cmp [esi+8] eax +
setnz al  +
mov esi eax +
jmp loc_1037737  +
***
call sub_1021EB9  +
xor esi esi +
mov [ebp-4] esi +
lea eax [ebp+8] +
push eax  +
call sub_1036B7A  +
test eax eax +
jz loc_1037808  +
push offset aDriverPackageP  +
push 2  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
lea eax [ebp+8] +
push eax  +
call sub_103D1DD  +
test eax eax +
jz loc_1037833  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp+8] +
push eax  +
call sub_103D8A1  +
test eax eax +
jz loc_103781E  +
push 34h  +
pop esi  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
mov eax esi +
call sub_1021FA5  +
retn 8  +
push offset aOemInfFromTheI  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
mov esi 780h +
jmp loc_1037808  +
push offset aCannotAddDrive  +
jmp loc_1037823  +
***
mov edi edi +
push ebp  +
mov ebp esp +
fld  [ebp+arg_4] +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
fstp  dword ptr [esi+0Ch] +
fld  [ebp+arg_8] +
or dword ptr [esi+18h] 0FFFFFFFFh +
xor eax eax +
fstp  dword ptr [esi+10h] +
fld  [ebp+arg_C] +
mov [esi+8] ecx +
mov ecx [ebp+arg_10] +
fstp  dword ptr [esi+14h] +
mov [esi+24h] ecx +
mov ecx esi +
mov [esi] eax +
mov [esi+4] eax +
mov [esi+1Ch] eax +
mov [esi+20h] eax +
mov [esi+28h] eax +
mov [esi+2Ch] eax +
call sub_10375C6  +
mov eax esi +
pop esi  +
pop ebp  +
retn 14h  +
***
call sub_1021EB9  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
lea ecx [esi+4] +
call sub_103EAEC  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_1015174  +
call sub_1021FA5  +
retn   +
***
call sub_1021EB9  +
mov esi ecx +
and dword ptr [ebp-4] 0 +
mov eax [esi] +
mov [ebp-14h] eax +
test eax eax +
jz loc_1037918  +
lea eax [ebp-14h] +
push eax  +
mov ecx esi +
call sub_105038C  +
push eax  +
lea ecx [ebp-10h] +
call sub_10151F2  +
mov byte ptr [ebp-4] 1 +
push dword ptr [ebp+8]  +
push dword ptr [ebp-10h]  +
call sub_10224ED  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_103791C  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-10h] +
call sub_1015174  +
cmp dword ptr [ebp-14h] 0 +
jnz loc_10378DD  +
xor esi esi +
jmp loc_103792B  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-10h] +
call sub_1015174  +
xor esi esi +
inc esi  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
mov eax esi +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EB9  +
lea ecx [ebp-10h] +
call sub_1043CB7  +
xor ebx ebx +
mov [ebp-4] ebx +
push dword ptr [ebp+10h]  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push ecx  +
mov ecx esp +
mov [ebp+8] esp +
push esi  +
call sub_10151F2  +
mov byte ptr [ebp-4] 1 +
mov [ebp-4] bl +
call sub_1044DCD  +
mov edi eax +
cmp edi ebx +
jnz loc_1037994  +
push offset aInstallComplet  +
jmp loc_1037A1A  +
cmp edi 103h +
jnz loc_10379AF  +
push dword ptr [esi]  +
push offset aNoDriversInsta  +
push 1  +
call sub_103AC75  +
jmp loc_1037A4F  +
cmp edi 0E000020Bh +
jnz loc_10379C0  +
push dword ptr [esi]  +
push offset aNoDriversIns_0  +
jmp loc_10379A3  +
cmp edi 0E0000301h +
jnz loc_10379D3  +
push dword ptr [esi]  +
push offset aNoDeviceIdsFou  +
push 2  +
jmp loc_10379A5  +
cmp edi 800B0110h +
jnz loc_10379E4  +
push offset aUserRefusedNon  +
push 2  +
jmp loc_1037A39  +
cmp [ebp+0Ch] ebx +
jnz loc_1037A52  +
push offset aPnpInstallFail  +
push edi  +
push 3  +
call sub_103AD09  +
push offset aAttemptingToRo  +
push 1  +
call sub_103AC75  +
add esp 14h +
push dword ptr [ebp+10h]  +
lea eax [ebp-10h] +
push eax  +
call sub_1043869  +
cmp eax ebx +
jnz loc_1037A1D  +
push offset aRollbackComple  +
push ebx  +
jmp loc_1037A39  +
cmp eax 103h +
jnz loc_1037A2D  +
push offset aNoDevicesToRol  +
push 1  +
jmp loc_1037A39  +
cmp eax 2 +
jnz loc_1037A42  +
push offset aCouldNotFindOe  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
jmp loc_1037A52  +
push offset aRollbackFailed  +
push eax  +
push 3  +
call sub_103AD09  +
add esp 0Ch +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_104227D  +
mov eax edi +
call sub_1021FA5  +
retn 0Ch  +
***
call sub_1021EB9  +
mov [ebp-10h] ecx +
or dword ptr [ebp-4] 0FFFFFFFFh +
call sub_103788F  +
call sub_1021FA5  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1037A6D  +
test [ebp+arg_0] 1 +
jz loc_1037AAA  +
push esi  +
call sub_1021179  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
test edi edi +
jnz loc_1037AD0  +
push 80004005h  +
call loc_1014415  +
push 0  +
mov ecx edi +
call sub_1037A90  +
mov eax [esi+2Ch] +
mov [edi+8] eax +
dec dword ptr [esi+4]  +
mov eax [esi+4] +
mov [esi+2Ch] edi +
cmp eax [esi+1Ch] +
jnb loc_1037B03  +
cmp dword ptr [esi+20h] 0 +
jnz loc_1037B03  +
push eax  +
mov ecx esi +
call sub_10422B8  +
push eax  +
mov ecx esi +
call sub_10423AB  +
cmp dword ptr [esi+4] 0 +
jnz loc_1037B10  +
mov ecx esi +
call sub_103D067  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
inc dword ptr [esi+20h]  +
xor ebx ebx +
cmp [esi] ebx +
jz loc_1037B51  +
cmp [esi+8] ebx +
jbe loc_1037B51  +
push edi  +
mov eax [esi] +
mov edi [eax+ebx*4] +
jmp loc_1037B44  +
mov eax edi +
mov edi [edi+8] +
push eax  +
mov ecx esi +
call sub_1037AB6  +
test edi edi +
jnz loc_1037B37  +
inc ebx  +
cmp ebx [esi+8] +
jb loc_1037B30  +
xor ebx ebx +
pop edi  +
push dword ptr [esi]  +
call sub_1021189  +
pop ecx  +
mov [esi] ebx +
mov [esi+4] ebx +
cmp [esi+20h] ebx +
jnz loc_1037B74  +
push ebx  +
push ebx  +
mov ecx esi +
call sub_10422B8  +
push eax  +
mov ecx esi +
call sub_1037641  +
mov ecx esi +
call sub_103D067  +
dec dword ptr [esi+20h]  +
pop esi  +
pop ebx  +
retn   +
***
call sub_1021EB9  +
xor ebx ebx +
mov [ebp-4] ebx +
lea ecx [ebp-108h] +
call sub_104027B  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-10h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-14h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-18h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-24h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 5 +
lea ecx [ebp-20h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 6 +
lea ecx [ebp-1Ch] +
call sub_10151DA  +
mov byte ptr [ebp-4] 7 +
lea eax [ebp+8] +
push eax  +
lea ecx [ebp-108h] +
call sub_1040403  +
cmp eax ebx +
jz loc_1037C8D  +
push dword ptr [ebp+8]  +
push offset aFailedToOpenS_  +
push eax  +
push 3  +
call sub_103AD09  +
add esp 10h +
mov byte ptr [ebp-4] 6 +
lea ecx [ebp-1Ch] +
call sub_1015174  +
mov byte ptr [ebp-4] 5 +
lea ecx [ebp-20h] +
call sub_1015174  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-24h] +
call sub_1015174  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-18h] +
call sub_1015174  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-14h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-10h] +
call sub_1015174  +
mov [ebp-4] bl +
lea ecx [ebp-108h] +
call sub_1040358  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
xor eax eax +
call sub_1021FA5  +
retn 8  +
lea ecx [ebp-108h] +
call sub_103EC03  +
lea ecx [ebp-108h] +
cmp eax 6 +
jnz loc_1037E1C  +
call sub_103EBC5  +
lea eax [ebp+8] +
push eax  +
call sub_1036B7A  +
test eax eax +
jz loc_1037D13  +
lea eax [ebp+8] +
push eax  +
call sub_103D1DD  +
test eax eax +
jz loc_1037D00  +
lea eax [ebp+8] +
push eax  +
lea ecx [ebp-10h] +
call sub_1015959  +
lea eax [ebp-14h] +
push eax  +
push ecx  +
lea eax [ebp-10h] +
mov ecx esp +
mov [ebp-28h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 8 +
mov byte ptr [ebp-4] 7 +
call sub_104674B  +
cmp eax ebx +
jz loc_1037D3B  +
push dword ptr [ebp-10h]  +
push offset aUnableToRetrie  +
jmp loc_1037D2C  +
push offset aEncounteredAnI  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
jmp loc_1037C21  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp+8] +
push eax  +
call sub_1046B0F  +
test eax eax +
jnz loc_1037CD2  +
push dword ptr [ebp+8]  +
push offset aUnableToRetr_0  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
jmp loc_1037C21  +
lea eax [ebp-24h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
call sub_1036032  +
test al al +
jz loc_1037C21  +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
call sub_1036032  +
test al al +
jz loc_1037C21  +
mov esi [ebp+0Ch] +
push esi  +
push ecx  +
mov ecx esp +
mov [ebp+0Ch] esp +
push offset aDependentinsta  +
call sub_10161A7  +
mov byte ptr [ebp-4] 9 +
push ecx  +
lea eax [ebp-1Ch] +
mov ecx esp +
mov [ebp-28h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 0Ah +
mov byte ptr [ebp-4] 7 +
call sub_103C883  +
cmp eax ebx +
jz loc_1037E10  +
xor esi esi +
mov byte ptr [ebp-4] 6 +
lea ecx [ebp-1Ch] +
call sub_1015174  +
mov byte ptr [ebp-4] 5 +
lea ecx [ebp-20h] +
call sub_1015174  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-24h] +
call sub_1015174  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-18h] +
call sub_1015174  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-14h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-10h] +
call sub_1015174  +
mov [ebp-4] bl +
lea ecx [ebp-108h] +
call sub_1040358  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
mov eax esi +
jmp loc_1037C85  +
xor eax eax +
cmp [esi+8] ebx +
setnz al  +
mov esi eax +
jmp loc_1037DA7  +
call sub_103EBC5  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp+8] +
push ecx  +
mov ecx esp +
mov [ebp+0Ch] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 0Bh +
mov byte ptr [ebp-4] 7 +
call sub_10376D7  +
jmp loc_1037E18  +
***
call sub_1021EB9  +
and dword ptr [ebp-4] 0 +
call sub_1035328  +
cmp eax 3 +
jz loc_1037E96  +
cmp eax 4 +
jz loc_1037E96  +
cmp eax 5 +
jz loc_1037E96  +
cmp eax 6 +
jl loc_1037E91  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp+8] +
push ecx  +
mov ecx esp +
mov [ebp+0Ch] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 2 +
mov byte ptr [ebp-4] 0 +
call sub_1037B90  +
jmp loc_1037EB5  +
push 0Ah  +
pop esi  +
jmp loc_1037EB7  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp+8] +
push ecx  +
mov ecx esp +
mov [ebp+0Ch] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 1 +
mov byte ptr [ebp-4] 0 +
call sub_10376D7  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
mov eax esi +
call sub_1021FA5  +
retn 8  +
***
call sub_1021EB9  +
lea ecx [ebp-10h] +
call sub_10151DA  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-18h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-1Ch] +
call sub_10151DA  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-14h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-100h] +
call sub_104027B  +
mov byte ptr [ebp-4] 4 +
push dword ptr [ebp+8]  +
lea ecx [ebp+8] +
call sub_10161A7  +
mov byte ptr [ebp-4] 5 +
lea eax [ebp+8] +
push eax  +
lea ecx [ebp-100h] +
call sub_1040403  +
mov esi eax +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp+8] +
call sub_1015174  +
test esi esi +
jz loc_1037F99  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-100h] +
call sub_1040358  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-14h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-1Ch] +
call sub_1015174  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-18h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_1015174  +
xor eax eax +
call sub_1021FA5  +
retn 14h  +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-18h] +
push eax  +
lea ecx [ebp-100h] +
call sub_1040B9A  +
test eax eax +
jnz loc_1037FF9  +
xor esi esi +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-100h] +
call sub_1040358  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-14h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-1Ch] +
call sub_1015174  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-18h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_1015174  +
mov eax esi +
jmp loc_1037F91  +
mov ecx [ebp-18h] +
mov eax [ecx-0Ch] +
test eax eax +
jz loc_1038017  +
push eax  +
push ecx  +
lea ecx [ebp-10h] +
call sub_10155F6  +
push 20h  +
lea ecx [ebp-10h] +
call sub_1035E8F  +
mov ecx [ebp-1Ch] +
mov eax [ecx-0Ch] +
test eax eax +
jz loc_1038083  +
push eax  +
push ecx  +
lea ecx [ebp-10h] +
call sub_10155F6  +
mov eax [ebp-14h] +
cmp dword ptr [eax-0Ch] 0 +
jz loc_1038083  +
lea eax [ebp-14h] +
push eax  +
push offset asc_100AE14  +
lea eax [ebp-20h] +
push eax  +
call sub_1018BE2  +
mov byte ptr [ebp-4] 6 +
push offset asc_100AE10  +
push eax  +
lea eax [ebp+8] +
push eax  +
call sub_1015847  +
mov byte ptr [ebp-4] 7 +
mov eax [eax] +
push dword ptr [eax-0Ch]  +
lea ecx [ebp-10h] +
push eax  +
call sub_10155F6  +
mov byte ptr [ebp-4] 6 +
lea ecx [ebp+8] +
call sub_1015174  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-20h] +
call sub_1015174  +
mov ecx [ebp+0Ch] +
test ecx ecx +
jz loc_1038093  +
lea eax [ebp-10h] +
push eax  +
call sub_1015959  +
mov ecx [ebp+10h] +
test ecx ecx +
jz loc_10380A3  +
lea eax [ebp-18h] +
push eax  +
call sub_1015959  +
mov ecx [ebp+14h] +
test ecx ecx +
jz loc_10380B3  +
lea eax [ebp-1Ch] +
push eax  +
call sub_1015959  +
mov ecx [ebp+18h] +
test ecx ecx +
jz loc_10380C3  +
lea eax [ebp-14h] +
push eax  +
call sub_1015959  +
mov eax [ebp-10h] +
mov eax [eax-0Ch] +
xor ecx ecx +
test eax eax +
setnz cl  +
mov esi ecx +
jmp loc_1037FB6  +
***
call sub_1021EB9  +
mov edi ecx +
lea ecx [ebp-10h] +
call sub_10151DA  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-114h] +
call sub_104027B  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-34h] +
call sub_103B217  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-14h] +
call sub_10151DA  +
push 3  +
pop ebx  +
mov [ebp-4] bl +
test edi edi +
jnz loc_1038170  +
push offset aDriverPackageI  +
push ebx  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
push 57h  +
pop esi  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-14h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-34h] +
call sub_103AF75  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-114h] +
call sub_1040358  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_1015174  +
mov eax esi +
jmp loc_10383E0  +
lea eax [ebp-18h] +
push eax  +
push 7FFFh  +
push edi  +
call sub_1014C35  +
mov esi eax +
test esi esi +
jge loc_10381A1  +
push offset aDriverPackageF  +
push ebx  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
cmp esi 80070057h +
jnz loc_1038133  +
mov esi 0CEh +
jmp loc_1038136  +
push 0  +
lea eax [ebp-10h] +
push eax  +
push ecx  +
mov ecx esp +
mov [ebp-18h] esp +
push edi  +
call sub_10161A7  +
mov byte ptr [ebp-4] 4 +
mov [ebp-4] bl +
call sub_1036735  +
mov esi eax +
test esi esi +
jz loc_10381DA  +
push edi  +
push offset aInvalidDriverP  +
push esi  +
push ebx  +
call sub_103AD09  +
add esp 10h +
jmp loc_1038136  +
lea eax [ebp-10h] +
push eax  +
call sub_1035572  +
mov esi eax +
test esi esi +
jz loc_10381F3  +
push dword ptr [ebp-10h]  +
push offset aCouldNotOpenFi  +
jmp loc_10381CB  +
test dword ptr [ebp+8] 0FFFFFFE0h +
jz loc_1038206  +
push offset aFlagsAreInvali  +
jmp loc_103812B  +
call sub_1035240  +
test eax eax +
jnz loc_1038223  +
push offset aAccessDenied_0  +
push ebx  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
push 5  +
jmp loc_1038135  +
call sub_10352BF  +
test eax eax +
jz loc_1038243  +
push offset aSystemDoesNotW  +
push ebx  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
mov esi 0E0000235h +
jmp loc_1038136  +
lea eax [ebp-14h] +
push eax  +
push ecx  +
lea eax [ebp-10h] +
mov ecx esp +
mov [ebp-18h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 5 +
mov [ebp-4] bl +
call sub_10377BC  +
test eax eax +
jz loc_10382AD  +
cmp eax 34h +
jnz loc_10383A8  +
test byte ptr [ebp+8] 1 +
jz loc_103828C  +
push offset aCanTPreinstall  +
push ebx  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
mov esi 780h +
jmp loc_1038136  +
push dword ptr [ebp-14h]  +
push dword ptr [ebp-10h]  +
push offset aRedirectingOem  +
push 1  +
call sub_103AC75  +
add esp 10h +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-10h] +
call sub_1015959  +
lea eax [ebp-10h] +
push eax  +
lea ecx [ebp-114h] +
call sub_1040403  +
mov esi eax +
test esi esi +
jz loc_10382CF  +
push dword ptr [ebp-10h]  +
push offset aFailedToOpenS_  +
jmp loc_10381CB  +
lea ecx [ebp-114h] +
call sub_103EC03  +
cmp eax 6 +
jz loc_1038301  +
lea ecx [ebp-114h] +
call sub_103EC03  +
push eax  +
push offset aPreinstallIsNo  +
push ebx  +
call sub_103AC75  +
xor esi esi +
add esp 0Ch +
inc esi  +
jmp loc_1038136  +
test byte ptr [ebp+8] 2 +
jz loc_103830B  +
push 0  +
jmp loc_103830D  +
push 1  +
call sub_104574C  +
test byte ptr [ebp+8] 8 +
mov edi eax +
jz loc_1038360  +
lea ecx [ebp-114h] +
call sub_103EC03  +
cmp eax 6 +
jnz loc_1038359  +
push ecx  +
lea eax [ebp-10h] +
mov ecx esp +
mov [ebp-18h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 6 +
mov [ebp-4] bl +
call sub_1044327  +
mov esi eax +
cmp esi 103h +
jnz loc_103835C  +
test byte ptr [ebp+8] 4 +
jz loc_103839D  +
xor esi esi +
jmp loc_103835C  +
xor esi esi +
inc esi  +
test esi esi +
jnz loc_103839D  +
xor eax eax +
test byte ptr [ebp+8] 10h +
jnz loc_103836A  +
mov eax ebx +
test byte ptr [ebp+8] 1 +
lea ecx [ebp-34h] +
push ecx  +
push eax  +
lea eax [ebp-114h] +
jz loc_103837F  +
push 6  +
jmp loc_1038381  +
push 4  +
push eax  +
call sub_103E556  +
mov esi eax +
test esi esi +
jz loc_1038395  +
cmp esi 0B7h +
jnz loc_103839D  +
lea ecx [ebp-34h] +
call sub_103ADBD  +
push edi  +
call sub_104574C  +
jmp loc_1038136  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-14h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-34h] +
call sub_103AF75  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-114h] +
call sub_1040358  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_1015174  +
mov eax 780h +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EB9  +
mov edi ecx +
lea ecx [ebp-10h] +
call sub_10151DA  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-114h] +
call sub_104027B  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-34h] +
call sub_103B217  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-14h] +
call sub_10151DA  +
push 3  +
pop ebx  +
mov [ebp-4] bl +
test edi edi +
jnz loc_1038481  +
push offset aDriverPackageI  +
push ebx  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
push 57h  +
pop esi  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-14h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-34h] +
call sub_103AF75  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-114h] +
call sub_1040358  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_1015174  +
mov eax esi +
jmp loc_1038665  +
lea eax [ebp-18h] +
push eax  +
push 7FFFh  +
push edi  +
call sub_1014C35  +
mov esi eax +
test esi esi +
jge loc_10384B2  +
push offset aDriverPackageF  +
push ebx  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
cmp esi 80070057h +
jnz loc_1038444  +
mov esi 0CEh +
jmp loc_1038447  +
push 0  +
lea eax [ebp-10h] +
push eax  +
push ecx  +
mov ecx esp +
mov [ebp-18h] esp +
push edi  +
call sub_10161A7  +
mov byte ptr [ebp-4] 4 +
mov [ebp-4] bl +
call sub_1036735  +
mov esi eax +
test esi esi +
jz loc_10384EB  +
push edi  +
push offset aInvalidDriverP  +
push esi  +
push ebx  +
call sub_103AD09  +
add esp 10h +
jmp loc_1038447  +
lea eax [ebp-10h] +
push eax  +
call sub_1035572  +
mov esi eax +
test esi esi +
jz loc_1038504  +
push dword ptr [ebp-10h]  +
push offset aCouldNotOpenFi  +
jmp loc_10384DC  +
call sub_1035240  +
test eax eax +
jnz loc_1038521  +
push offset aAccessDeniedAd  +
push ebx  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
push 5  +
jmp loc_1038446  +
call sub_10352BF  +
test eax eax +
jz loc_1038541  +
push offset aSystemDoesNotW  +
push ebx  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
mov esi 0E0000235h +
jmp loc_1038447  +
lea eax [ebp-14h] +
push eax  +
push ecx  +
lea eax [ebp-10h] +
mov ecx esp +
mov [ebp-18h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 5 +
mov [ebp-4] bl +
call sub_10377BC  +
test eax eax +
jz loc_103858E  +
cmp eax 34h +
jnz loc_103862D  +
push dword ptr [ebp-14h]  +
push dword ptr [ebp-10h]  +
push offset aRedirectingOem  +
push 1  +
call sub_103AC75  +
add esp 10h +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-10h] +
call sub_1015959  +
lea eax [ebp-10h] +
push eax  +
lea ecx [ebp-114h] +
call sub_1040403  +
mov esi eax +
test esi esi +
jz loc_10385B0  +
push dword ptr [ebp-10h]  +
push offset aFailedToOpenS_  +
jmp loc_10384DC  +
lea eax [ebp-34h] +
push eax  +
push 0  +
push ebx  +
lea eax [ebp-114h] +
push eax  +
call sub_103E556  +
mov edi eax +
cmp edi 0B7h +
jnz loc_10385F4  +
push dword ptr [ebp+8]  +
lea ecx [ebp-34h] +
push 2  +
call sub_103B80D  +
test eax eax +
jz loc_10385EF  +
xor esi esi +
push offset aFoundDriverSto  +
push esi  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
jmp loc_1038620  +
push 6Eh  +
pop esi  +
jmp loc_1038620  +
push dword ptr [ebp-10h]  +
mov esi 0E0000302h +
cmp edi esi +
jnz loc_103860F  +
push offset aNoDriverStoreE  +
push esi  +
push 1  +
call sub_103AD09  +
jmp loc_103861D  +
push offset aInvalidDriverS  +
push edi  +
push ebx  +
call sub_103AD09  +
mov esi edi +
add esp 10h +
lea ecx [ebp-34h] +
call sub_103ADBD  +
jmp loc_1038447  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-14h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-34h] +
call sub_103AF75  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-114h] +
call sub_1040358  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_1015174  +
mov eax 0E0000302h +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EB9  +
lea ecx [ebp-10h] +
call sub_10151DA  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-0F8h] +
call sub_104027B  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-14h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 2 +
lea eax [ebp-18h] +
push eax  +
push 7FFFh  +
push dword ptr [ebp+8]  +
call sub_1014C35  +
mov esi eax +
test esi esi +
jge loc_1038710  +
push offset aDriverPackageF  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
cmp esi 80070057h +
jnz loc_103870B  +
mov esi 0CEh +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-14h] +
call sub_1015174  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-0F8h] +
call sub_1040358  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_1015174  +
mov eax esi +
call sub_1021FA5  +
retn 8  +
push 57h  +
pop esi  +
jmp loc_10386DA  +
push 0  +
lea eax [ebp-10h] +
push eax  +
push ecx  +
mov ecx esp +
mov [ebp-18h] esp +
push dword ptr [ebp+8]  +
call sub_10161A7  +
mov byte ptr [ebp-4] 3 +
mov byte ptr [ebp-4] 2 +
call sub_1036735  +
mov esi eax +
test esi esi +
jz loc_103874C  +
push dword ptr [ebp+8]  +
push offset aInvalidDriverP  +
push esi  +
push 3  +
call sub_103AD09  +
add esp 10h +
jmp loc_10386DA  +
lea eax [ebp-10h] +
push eax  +
call sub_1035572  +
mov esi eax +
test esi esi +
jz loc_1038765  +
push dword ptr [ebp-10h]  +
push offset aCouldNotOpenFi  +
jmp loc_103873F  +
call sub_1035240  +
test eax eax +
jnz loc_1038780  +
push offset aAccessDeniedAd  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
push 5  +
jmp loc_103870D  +
call sub_10352BF  +
test eax eax +
jz loc_10387A1  +
push offset aSystemDoesNotW  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
mov esi 0E0000235h +
jmp loc_10386DA  +
lea eax [ebp-10h] +
push eax  +
lea ecx [ebp-0F8h] +
call sub_1040403  +
mov esi eax +
test esi esi +
jz loc_10387C3  +
push dword ptr [ebp-10h]  +
push offset aFailedToOpenS_  +
jmp loc_103873F  +
lea ecx [ebp-0F8h] +
call sub_103EC03  +
lea ecx [ebp-0F8h] +
mov esi eax +
call sub_103EBC5  +
push dword ptr [ebp+0Ch]  +
cmp esi 6 +
jnz loc_103881B  +
push ecx  +
lea eax [ebp-10h] +
mov ecx esp +
mov [ebp+8] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 4 +
mov byte ptr [ebp-4] 2 +
call sub_10468C3  +
test eax eax +
jnz loc_103880A  +
xor esi esi +
jmp loc_10386DA  +
cmp eax 490h +
jnz loc_1038823  +
mov esi 0E0000302h +
jmp loc_10386DA  +
mov ecx [ebp-10h] +
call sub_10383ED  +
mov esi eax +
jmp loc_10386DA  +
***
call sub_1021EB9  +
mov esi ecx +
xor ebx ebx +
lea ecx [ebp-13Ch] +
mov [ebp-14h] ebx +
call sub_104027B  +
mov [ebp-4] ebx +
fld  ds:flt_100B470 +
push 0Ah  +
sub esp 0Ch +
fstp  [esp+14h+var_C] +
lea ecx [ebp-5Ch] +
fld  ds:flt_100B46C +
fstp  [esp+14h+var_10] +
fld  ds:flt_100B468 +
fstp  [esp+14h+var_14] +
push 11h  +
call sub_103783F  +
mov byte ptr [ebp-4] 1 +
push esi  +
lea ecx [ebp-13Ch] +
call sub_1040403  +
cmp eax ebx +
jz loc_10388AA  +
push dword ptr [esi]  +
push offset aFailedToOpenS_  +
push eax  +
push 3  +
call sub_103AD09  +
add esp 10h +
jmp loc_1038A5F  +
lea eax [ebp-5Ch] +
push eax  +
lea ecx [ebp-13Ch] +
call sub_1042263  +
lea eax [ebp-24h] +
push eax  +
lea ecx [ebp-13Ch] +
call sub_103EFEF  +
mov byte ptr [ebp-4] 2 +
xor esi esi +
mov [ebp-1Ch] esi +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-20h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-18h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 5 +
lea ecx [ebp-10h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 6 +
lea ecx [ebp-5Ch] +
call sub_103760F  +
mov [ebp-28h] eax +
cmp eax ebx +
jz loc_1038A12  +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-5Ch] +
call sub_103D087  +
push eax  +
lea ecx [ebp-1Ch] +
call sub_103ECA6  +
mov esi [ebp-1Ch] +
cmp [esi+18h] ebx +
jz loc_1038A09  +
cmp [esi+8] ebx +
jz loc_103893A  +
mov eax [esi+8] +
add eax 10h +
jmp loc_103894F  +
push offset word_10022EC  +
lea ecx [ebp-2Ch] +
call sub_10161A7  +
mov byte ptr [ebp-4] 7 +
or dword ptr [ebp-14h] 1 +
lea ecx [ebp-20h] +
push ecx  +
lea ecx [esi+0Ch] +
push ecx  +
push eax  +
call sub_10360F6  +
mov dword ptr [ebp-4] 6 +
test byte ptr [ebp-14h] 1 +
jz loc_1038976  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
lea ecx [ebp-2Ch] +
call sub_1015174  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-24h] +
push eax  +
call sub_10360F6  +
lea eax [ebp-18h] +
push eax  +
lea eax [esi+10h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
call sub_10360F6  +
lea eax [esi+14h] +
push eax  +
lea ecx [ebp-10h] +
call sub_1015959  +
push dword ptr [ebp-10h]  +
push offset aLookingForFile  +
push 1  +
call sub_103AC75  +
add esp 0Ch +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
call sub_1035633  +
test eax eax +
lea eax [ebp-10h] +
push eax  +
jz loc_10389E7  +
call sub_103559E  +
push dword ptr [ebp-10h]  +
test al al +
jz loc_10389E0  +
push offset aFilesSDeleted_  +
push 1  +
jmp loc_1038A01  +
push offset aFileSNotYetDel  +
jmp loc_10389FF  +
call sub_1035549  +
push dword ptr [ebp-10h]  +
test al al +
jz loc_10389FA  +
push offset aFileSWillNotDe  +
jmp loc_10389FF  +
push offset aFileSNotFoundA  +
push 2  +
call sub_103AC75  +
add esp 0Ch +
cmp [ebp-28h] ebx +
jnz loc_103890C  +
lea ecx [ebp-13Ch] +
call sub_103EBC5  +
mov byte ptr [ebp-4] 5 +
lea ecx [ebp-10h] +
call sub_1015174  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-18h] +
call sub_1015174  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-20h] +
call sub_1015174  +
mov byte ptr [ebp-4] 2 +
cmp esi ebx +
jz loc_1038A53  +
mov ecx esi +
call sub_101A986  +
mov [ebp-1Ch] ebx +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-24h] +
call sub_1015174  +
mov [ebp-4] bl +
lea ecx [ebp-5Ch] +
call sub_1037B1B  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-13Ch] +
call sub_1040358  +
call sub_1021FA5  +
retn   +
***
call sub_1021EB9  +
mov eax [ebp+8] +
xor ebx ebx +
push ecx  +
mov [ebp-10h] ebx +
mov [eax] ebx +
mov ecx esp +
cmp esi ebx +
jnz loc_1038AFF  +
mov [ebp+8] esp +
push offset aUnknownDisplay  +
call sub_10161A7  +
mov [ebp-4] ebx +
push ecx  +
mov ecx esp +
mov [ebp-14h] esp +
push offset aUnknownManufac  +
call sub_10161A7  +
mov byte ptr [ebp-4] 1 +
push ecx  +
mov ecx esp +
mov [ebp-18h] esp +
push offset aUnknownProduct  +
call sub_10161A7  +
mov byte ptr [ebp-4] 2 +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx edi +
call sub_103BE64  +
cmp eax ebx +
jnz loc_1038BED  +
push offset aErrorEncounter  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
jmp loc_1038BED  +
mov [ebp-18h] esp +
push dword ptr [esi+4]  +
call sub_10161A7  +
push 3  +
pop ebx  +
mov [ebp-4] ebx +
push ecx  +
mov ecx esp +
mov [ebp-14h] esp +
push dword ptr [esi+0Ch]  +
call sub_10161A7  +
mov byte ptr [ebp-4] 4 +
push ecx  +
mov ecx esp +
mov [ebp-1Ch] esp +
push dword ptr [esi+8]  +
call sub_10161A7  +
mov byte ptr [ebp-4] 5 +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx edi +
call sub_103BE64  +
test eax eax +
jnz loc_1038B50  +
push offset aErrorEncounter  +
push ebx  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
lea ecx [ebp-34h] +
call sub_1014C71  +
mov dword ptr [ebp-4] 6 +
lea eax [ebp-34h] +
push eax  +
push 9  +
mov ecx edi +
call sub_103C4CC  +
push ecx  +
mov ecx esp +
mov [ebp-1Ch] esp +
push dword ptr [esi]  +
call sub_10161A7  +
mov byte ptr [ebp-4] 7 +
mov byte ptr [ebp-4] 6 +
lea ecx [ebp-34h] +
call sub_10378C2  +
test eax eax +
jz loc_1038B98  +
mov eax [ebp+8] +
mov dword ptr [eax] 1 +
jmp loc_1038BE1  +
push ecx  +
mov ecx esp +
mov [ebp+8] esp +
push dword ptr [esi+4]  +
call sub_10161A7  +
mov byte ptr [ebp-4] 8 +
push ecx  +
mov ecx esp +
mov [ebp-1Ch] esp +
push dword ptr [esi]  +
call sub_10161A7  +
mov byte ptr [ebp-4] 9 +
mov byte ptr [ebp-4] 6 +
mov ecx edi +
call sub_103C5BC  +
test eax eax +
jnz loc_1038BE1  +
push dword ptr [esi]  +
push offset aErrorEncount_0  +
push ebx  +
call sub_103AC75  +
add esp 0Ch +
mov dword ptr [ebp-10h] 643h +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-34h] +
call sub_1014FBC  +
mov eax [ebp-10h] +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EB9  +
lea ecx [ebp-14h] +
call sub_10151DA  +
xor ebx ebx +
mov [ebp-4] ebx +
lea ecx [ebp-1Ch] +
call sub_10151DA  +
mov byte ptr [ebp-4] 1 +
push dword ptr [ebp+8]  +
lea ecx [ebp-18h] +
call sub_10161A7  +
mov byte ptr [ebp-4] 2 +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
call sub_1036032  +
mov [ebp-0Dh] al +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-18h] +
call sub_1015174  +
cmp [ebp-0Dh] bl +
jz loc_1038C7F  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 40000h  +
push 1  +
push dword ptr [ebp-14h]  +
push dword ptr [ebp+8]  +
call ds:SetupCopyOEMInfW  +
test eax eax +
jz loc_1038C75  +
xor esi esi +
jmp loc_1038C84  +
call ds:GetLastError  +
mov esi eax +
jmp loc_1038C84  +
mov esi 643h +
mov [ebp-4] bl +
lea ecx [ebp-1Ch] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call sub_1015174  +
mov eax esi +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EB9  +
push offset aEnterDriverpac  +
push 1  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
lea ecx [ebp-10h] +
call sub_10151DA  +
and dword ptr [ebp-4] 0 +
call sub_1035328  +
mov edi [ebp+10h] +
test edi edi +
jz loc_1038D78  +
mov ecx [ebp+8] +
test ecx ecx +
jz loc_1038D78  +
cmp eax 3 +
jz loc_1038D10  +
cmp eax 4 +
jz loc_1038D10  +
cmp eax 5 +
jz loc_1038D10  +
cmp eax 6 +
jl loc_1038D0B  +
lea eax [ebp-10h] +
push eax  +
push ecx  +
call sub_1038672  +
jmp loc_1038D19  +
push 0Ah  +
pop esi  +
jmp loc_1038D58  +
lea eax [ebp-10h] +
push eax  +
call sub_10383ED  +
mov esi eax +
test esi esi +
jnz loc_1038D58  +
cmp dword ptr [ebp+0Ch] 0 +
mov ecx [ebp-10h] +
mov eax [ecx-0Ch] +
lea esi [eax+1] +
jz loc_1038D51  +
mov eax [edi] +
cmp eax esi +
jb loc_1038D51  +
push ecx  +
push eax  +
push dword ptr [ebp+0Ch]  +
call sub_1014BA1  +
test eax eax +
jl loc_1038D47  +
dec esi  +
xor eax eax +
jmp loc_1038D54  +
and dword ptr [edi] 0 +
mov eax 10Ah +
jmp loc_1038D56  +
push 7Ah  +
pop eax  +
mov [edi] esi +
mov esi eax +
push esi  +
push offset aReturnDriverpa  +
push 1  +
call sub_103AC75  +
add esp 0Ch +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_1015174  +
mov eax esi +
jmp loc_1038D95  +
push offset aParameterIsNul  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_1015174  +
push 57h  +
pop eax  +
call sub_1021FA5  +
retn 0Ch  +
***
call sub_1021EB9  +
mov edi ecx +
lea ecx [ebp-10h] +
call sub_10151DA  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-14h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-11Ch] +
call sub_104027B  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-3Ch] +
call sub_103B217  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-20h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 4 +
and dword ptr [ebp-1Ch] 0 +
test edi edi +
jnz loc_1038E52  +
push offset aDriverPackageI  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
push 57h  +
pop esi  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-20h] +
call sub_1015174  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-3Ch] +
call sub_103AF75  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-11Ch] +
call sub_1040358  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-14h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_1015174  +
mov eax esi +
call sub_1021FA5  +
retn   +
lea eax [ebp-18h] +
push eax  +
push 7FFFh  +
push edi  +
call sub_1014C35  +
mov esi eax +
test esi esi +
jge loc_1038E84  +
push offset aDriverPackageF  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
cmp esi 80070057h +
jnz loc_1038E08  +
mov esi 0CEh +
jmp loc_1038E0B  +
push 0  +
lea eax [ebp-10h] +
push eax  +
push ecx  +
mov ecx esp +
mov [ebp-18h] esp +
push edi  +
call sub_10161A7  +
mov byte ptr [ebp-4] 5 +
mov byte ptr [ebp-4] 4 +
call sub_1036735  +
mov esi eax +
test esi esi +
jz loc_1038EBF  +
push edi  +
push offset aInvalidDriverP  +
push esi  +
push 3  +
call sub_103AD09  +
add esp 10h +
jmp loc_1038E0B  +
lea eax [ebp-10h] +
push eax  +
call sub_1035572  +
mov esi eax +
test esi esi +
jz loc_1038ED8  +
push dword ptr [ebp-10h]  +
push offset aCouldNotOpenFi  +
jmp loc_1038EAF  +
test ebx 0FFFFFFE0h +
jz loc_1038EEA  +
push offset aFlagsAreInvali  +
jmp loc_1038DFF  +
call sub_1035240  +
test eax eax +
jnz loc_1038F08  +
push offset aAccessDenied_0  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
push 5  +
jmp loc_1038E0A  +
call sub_10352BF  +
test eax eax +
jz loc_1038F29  +
push offset aSystemDoesNotW  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
mov esi 0E0000235h +
jmp loc_1038E0B  +
test bl 1 +
jz loc_1038F5A  +
mov dword ptr [ebp-1Ch] 10h +
lea eax [ebp-10h] +
push eax  +
call sub_1036B7A  +
test eax eax +
jz loc_1038F9A  +
push offset aCanTPreinstall  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
mov esi 780h +
jmp loc_1038E0B  +
lea eax [ebp-14h] +
push eax  +
push ecx  +
lea eax [ebp-10h] +
mov ecx esp +
mov [ebp-18h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 6 +
mov byte ptr [ebp-4] 4 +
call sub_10468C3  +
test eax eax +
jnz loc_1038F35  +
push dword ptr [ebp-10h]  +
push offset aDriverPackag_1  +
push 1  +
call sub_103AC75  +
add esp 0Ch +
mov esi 0B7h +
jmp loc_1038E0B  +
lea eax [ebp-10h] +
push eax  +
lea ecx [ebp-11Ch] +
call sub_1040403  +
mov esi eax +
test esi esi +
jz loc_1038FBC  +
push dword ptr [ebp-10h]  +
push offset aFailedToOpenS_  +
jmp loc_1038EAF  +
lea ecx [ebp-11Ch] +
call sub_103EC03  +
lea ecx [ebp-11Ch] +
mov esi eax +
call sub_103EBC5  +
cmp esi 6 +
jz loc_1038FFC  +
lea ecx [ebp-11Ch] +
call sub_103EC03  +
push eax  +
push offset aPreinstallIsNo  +
push 3  +
call sub_103AC75  +
xor esi esi +
add esp 0Ch +
inc esi  +
jmp loc_1038E0B  +
test bl 2 +
jz loc_1039005  +
push 0  +
jmp loc_1039007  +
push 1  +
call sub_104574C  +
mov edi eax +
test bl 8 +
jz loc_103904C  +
push ecx  +
lea eax [ebp-10h] +
mov ecx esp +
mov [ebp-18h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 7 +
mov byte ptr [ebp-4] 4 +
call sub_1044327  +
mov esi eax +
cmp esi 103h +
jnz loc_1039044  +
test bl 4 +
jz loc_1039107  +
xor esi esi +
test esi esi +
jnz loc_1039107  +
lea eax [ebp-14h] +
push eax  +
push dword ptr [ebp-1Ch]  +
lea eax [ebp-10h] +
push ecx  +
mov ecx esp +
mov [ebp-18h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 8 +
mov byte ptr [ebp-4] 4 +
call sub_1046E71  +
mov esi eax +
test esi esi +
jnz loc_10390C3  +
push dword ptr [ebp-14h]  +
call sub_1038BFD  +
mov esi eax +
test esi esi +
jz loc_1039107  +
push dword ptr [ebp-14h]  +
push offset aFailedToAddCat  +
push esi  +
push 3  +
call sub_103AD09  +
add esp 0Ch +
lea eax [ebp-14h] +
mov ecx esp +
mov [ebp-18h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 9 +
mov byte ptr [ebp-4] 4 +
call sub_10463BC  +
test eax eax +
jz loc_1039107  +
push dword ptr [ebp-14h]  +
push offset aCouldNotDelete  +
jmp loc_10390FD  +
mov eax 800B0110h +
cmp esi eax +
jnz loc_10390DB  +
push offset aInvalidSignatu  +
push eax  +
push 3  +
call sub_103AD09  +
jmp loc_1039104  +
mov eax 800B0100h +
cmp esi eax +
jnz loc_10390EB  +
push offset aUnsignedDriver  +
jmp loc_10390D1  +
cmp esi 2 +
jnz loc_1039107  +
push dword ptr [ebp-10h]  +
mov esi 0E0000303h +
push offset aOneOrMoreFiles  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
push edi  +
call sub_104574C  +
jmp loc_1038E0B  +
***
call sub_1021EB9  +
mov ebx [ebp+0Ch] +
mov edi ecx +
lea ecx [ebp-14h] +
mov dword ptr [ebp-10h] 643h +
call sub_10151DA  +
xor esi esi +
mov [ebp-4] esi +
lea ecx [ebp-134h] +
call sub_104027B  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-50h] +
call sub_103B217  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-18h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-1Ch] +
mov [ebp-24h] esi +
mov [ebp-2Ch] esi +
call sub_10151DA  +
mov byte ptr [ebp-4] 4 +
mov [ebp-34h] esi +
cmp edi esi +
jz loc_103976A  +
cmp [ebp+10h] esi +
jz loc_103976A  +
mov eax [ebp+10h] +
mov [eax] esi +
lea eax [ebp-28h] +
push eax  +
push 7FFFh  +
push edi  +
call sub_1014C35  +
cmp eax esi +
mov [ebp-20h] eax +
jge loc_103920E  +
push offset aDriverPackageF  +
push 3  +
call sub_103AC75  +
cmp dword ptr [ebp-20h] 80070057h +
pop ecx  +
pop ecx  +
jnz loc_1039209  +
mov esi 0CEh +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-1Ch] +
call sub_1015174  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-18h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-50h] +
call sub_103AF75  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-134h] +
call sub_1040358  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call sub_1015174  +
mov eax esi +
jmp loc_10397BA  +
push 57h  +
pop esi  +
jmp loc_10391C3  +
push esi  +
lea eax [ebp-14h] +
push eax  +
push ecx  +
mov ecx esp +
mov [ebp-28h] esp +
push edi  +
call sub_10161A7  +
mov byte ptr [ebp-4] 5 +
mov byte ptr [ebp-4] 4 +
call sub_1036735  +
cmp eax esi +
jz loc_1039248  +
push edi  +
push offset aInvalidDriverP  +
mov esi eax +
push esi  +
push 3  +
call sub_103AD09  +
add esp 10h +
jmp loc_10391C3  +
lea eax [ebp-14h] +
push eax  +
call sub_1035572  +
mov edi eax +
cmp edi esi +
jz loc_1039271  +
push dword ptr [ebp-14h]  +
push offset aCouldNotOpenFi  +
push edi  +
push 3  +
call sub_103AD09  +
add esp 10h +
mov esi edi +
jmp loc_10391C3  +
test dword ptr [ebp+8] 0FFFFFFE0h +
jz loc_103928D  +
push offset aFlagsAreInvali  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
jmp loc_1039209  +
cmp ebx esi +
jz loc_10392E0  +
mov eax [ebx] +
cmp eax esi +
jz loc_10392D7  +
cmp [ebx+8] esi +
jz loc_10392D7  +
cmp [ebx+0Ch] esi +
jz loc_10392D7  +
cmp [ebx+4] esi +
jz loc_10392D7  +
mov esi ds:lstrcmpiW +
mov edi offset word_10022EC +
push edi  +
push eax  +
call esi  +
test eax eax +
jz loc_10392D7  +
push edi  +
push dword ptr [ebx+8]  +
call esi  +
test eax eax +
jz loc_10392D7  +
push edi  +
push dword ptr [ebx+0Ch]  +
call esi  +
test eax eax +
jz loc_10392D7  +
push edi  +
push dword ptr [ebx+4]  +
call esi  +
test eax eax +
jnz loc_10392DE  +
push offset aTheInstallerin  +
jmp loc_103927F  +
xor esi esi +
call sub_1035240  +
test eax eax +
jnz loc_10392FE  +
push offset aAccessDeniedAd  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
push 5  +
jmp loc_103920B  +
call sub_10352BF  +
test eax eax +
jz loc_103931F  +
push offset aSystemDoesNotW  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
mov esi 0E0000235h +
jmp loc_10391C3  +
lea eax [ebp-1Ch] +
push eax  +
push ecx  +
lea eax [ebp-14h] +
mov ecx esp +
mov [ebp-28h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 6 +
mov byte ptr [ebp-4] 4 +
call sub_10377BC  +
cmp eax esi +
jz loc_1039387  +
cmp eax 34h +
jnz loc_103935C  +
test byte ptr [ebp+8] 1 +
jz loc_1039366  +
push offset aCanTRepairDriv  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
mov esi 780h +
jmp loc_10391C3  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp-14h]  +
push offset aRedirectingOem  +
push 1  +
call sub_103AC75  +
add esp 10h +
lea eax [ebp-1Ch] +
push eax  +
lea ecx [ebp-14h] +
call sub_1015959  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-134h] +
call sub_1040403  +
mov edi eax +
cmp edi esi +
jz loc_10393A9  +
push dword ptr [ebp-14h]  +
push offset aFailedToOpenS_  +
jmp loc_103925F  +
lea ecx [ebp-134h] +
call sub_103EC03  +
cmp eax 9 +
jz loc_1039751  +
lea ecx [ebp-134h] +
call sub_103EC03  +
cmp eax 0Bh +
jz loc_1039751  +
mov ebx [ebp+8] +
test bl 2 +
jz loc_10393DC  +
push esi  +
jmp loc_10393DE  +
push 1  +
call sub_104574C  +
mov esi ebx +
and esi 4 +
and ebx 1 +
test byte ptr [ebp+8] 8 +
mov [ebp-20h] eax +
mov [ebp-28h] esi +
mov edi 103h +
jz loc_1039502  +
lea ecx [ebp-134h] +
call sub_103EC03  +
cmp eax 6 +
jnz loc_10394F6  +
push ecx  +
lea eax [ebp-14h] +
mov ecx esp +
mov [ebp-54h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 7 +
mov byte ptr [ebp-4] 4 +
call sub_1044327  +
test eax eax +
jz loc_1039502  +
cmp eax edi +
jnz loc_10395AA  +
test esi esi +
jnz loc_1039502  +
mov esi [ebp+0Ch] +
test esi esi +
jz loc_10394F1  +
lea eax [ebp-50h] +
push eax  +
push 0  +
push 3  +
lea eax [ebp-134h] +
push eax  +
call sub_103E556  +
cmp eax 0B7h +
jnz loc_10395EC  +
lea eax [ebp-2Ch] +
push eax  +
lea edi [ebp-50h] +
call sub_1038A84  +
mov [ebp-10h] eax +
test eax eax +
jnz loc_10395B7  +
mov dword ptr [ebp-10h] 103h +
push dword ptr [ebp-10h]  +
push offset aInstallationCo  +
push 0  +
call sub_103AC75  +
add esp 0Ch +
push dword ptr [ebp-20h]  +
call sub_104574C  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-1Ch] +
call sub_1015174  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-18h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-50h] +
call sub_103AF75  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-134h] +
call sub_1040358  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call sub_1015174  +
mov eax [ebp-10h] +
jmp loc_10397BA  +
mov [ebp-10h] edi +
jmp loc_1039490  +
mov dword ptr [ebp-10h] 1 +
jmp loc_10395E9  +
test byte ptr [ebp+8] 10h +
jnz loc_103950F  +
mov dword ptr [ebp-34h] 3 +
lea eax [ebp-50h] +
push eax  +
push dword ptr [ebp-34h]  +
lea eax [ebp-134h] +
test ebx ebx +
jz loc_1039524  +
push 6  +
jmp loc_1039526  +
push 4  +
push eax  +
call sub_103E556  +
test eax eax +
jnz loc_1039539  +
mov dword ptr [ebp-24h] 1 +
jmp loc_1039540  +
cmp eax 0B7h +
jnz loc_10395AA  +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_103955C  +
mov esi [ebp+0Ch] +
lea eax [ebp-2Ch] +
push eax  +
lea edi [ebp-50h] +
call sub_1038A84  +
mov [ebp-10h] eax +
test eax eax +
jnz loc_10395B7  +
lea eax [ebp-30h] +
push eax  +
xor esi esi +
push esi  +
lea ecx [ebp-50h] +
call sub_103AFC1  +
test eax eax +
jnz loc_1039586  +
push offset aCouldNotGetTyp  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
mov dword ptr [ebp-10h] 643h +
jmp loc_10395E0  +
mov eax [ebp-30h] +
lea ecx [eax-1] +
cmp ecx 0Ah +
ja loc_10396ED  +
jmp ds:off_10397C3[ecx*4]  +
push dword ptr [ebp+10h]  +
push ebx  +
push eax  +
lea eax [ebp-50h] +
push eax  +
call sub_104B106  +
mov [ebp-10h] eax +
cmp dword ptr [ebp-10h] 0 +
jz loc_1039490  +
cmp dword ptr [ebp-10h] 103h +
jz loc_1039490  +
cmp dword ptr [ebp-10h] 0E000020Bh +
jz loc_1039490  +
cmp dword ptr [ebp-10h] 0E0000301h +
jz loc_1039490  +
xor esi esi +
cmp [ebp-2Ch] esi +
jnz loc_1039711  +
mov esi [ebp+0Ch] +
test esi esi +
jz loc_1039711  +
push ecx  +
mov ecx esp +
mov [ebp+10h] esp +
push dword ptr [esi+4]  +
call sub_10161A7  +
mov byte ptr [ebp-4] 8 +
push ecx  +
mov ecx esp +
mov [ebp+0Ch] esp +
push dword ptr [esi]  +
call sub_10161A7  +
mov byte ptr [ebp-4] 9 +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-50h] +
call sub_103C70C  +
push dword ptr [ebp-18h]  +
push dword ptr [esi]  +
test eax eax +
jnz loc_1039702  +
push offset aCouldNotRemove  +
push 3  +
jmp loc_1039709  +
push dword ptr [ebp+10h]  +
push ebx  +
push eax  +
lea eax [ebp-50h] +
push eax  +
call sub_104EDA4  +
jmp loc_10395AA  +
cmp [ebp-24h] esi +
jnz loc_1039660  +
cmp ebx esi +
jnz loc_1039660  +
mov [ebp-10h] esi +
jmp loc_1039490  +
push dword ptr [ebp+10h]  +
lea eax [ebp-50h] +
push ebx  +
push eax  +
call sub_104D784  +
jmp loc_10395AA  +
cmp [ebp-24h] esi +
jnz loc_103967B  +
cmp ebx esi +
jz loc_1039658  +
push dword ptr [ebp+10h]  +
lea eax [ebp-50h] +
push eax  +
call sub_1049E85  +
jmp loc_10395AA  +
cmp [ebp-24h] esi +
jnz loc_1039695  +
cmp ebx esi +
jz loc_1039658  +
push dword ptr [ebp+10h]  +
push ebx  +
push eax  +
lea eax [ebp-50h] +
push eax  +
call sub_104923D  +
jmp loc_10395AA  +
lea eax [ebp-18h] +
push eax  +
push 2  +
lea ecx [ebp-50h] +
call sub_103B80D  +
test eax eax +
jnz loc_10396C4  +
push offset aCouldNotGetNam  +
jmp loc_1039574  +
push dword ptr [ebp-30h]  +
push dword ptr [ebp-18h]  +
push offset aInstallingInfF  +
push 1  +
call sub_103AC75  +
add esp 10h +
push dword ptr [ebp+10h]  +
lea esi [ebp-18h] +
push ebx  +
push dword ptr [ebp-28h]  +
call sub_1037946  +
jmp loc_10395AA  +
push eax  +
push offset aImplementation  +
push 1  +
call sub_103AC75  +
add esp 0Ch +
jmp loc_10395AD  +
push offset aSuccessfullyRe  +
push 1  +
call sub_103AC75  +
add esp 10h +
cmp dword ptr [ebp-24h] 0 +
jz loc_10394A2  +
cmp dword ptr [ebp-30h] 6 +
jnz loc_103972A  +
lea eax [ebp-18h] +
push eax  +
call sub_1042842  +
lea ecx [ebp-50h] +
call sub_103ADF7  +
push dword ptr [ebp-18h]  +
test eax eax +
jnz loc_1039745  +
push offset aDriverStoreEnt  +
push 1  +
jmp loc_103949A  +
push offset aCouldNotRemo_0  +
push 3  +
jmp loc_103949A  +
push dword ptr [ebp-14h]  +
push offset aTheDriverPacka  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
push 0Dh  +
jmp loc_103920B  +
push offset aParameterIsNul  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-1Ch] +
call sub_1015174  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-18h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-50h] +
call sub_103AF75  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-134h] +
call sub_1040358  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call sub_1015174  +
push 57h  +
pop eax  +
call sub_1021FA5  +
retn 0Ch  +
***
call sub_1021EB9  +
mov esi ecx +
lea ecx [ebp-14h] +
mov dword ptr [ebp-18h] 643h +
call sub_10151DA  +
xor ebx ebx +
mov [ebp-4] ebx +
lea ecx [ebp-3Ch] +
call sub_10151DA  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-28h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-10h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-11Ch] +
call sub_104027B  +
mov byte ptr [ebp-4] 4 +
mov [ebp-38h] ebx +
mov [ebp-1Ch] ebx +
mov [ebp-34h] ebx +
mov [ebp-30h] ebx +
mov [ebp-2Ch] ebx +
cmp esi ebx +
jz loc_1039EB9  +
mov eax [ebp+0Ch] +
cmp eax ebx +
jz loc_1039EB9  +
mov [eax] ebx +
lea eax [ebp-20h] +
push eax  +
push 7FFFh  +
push esi  +
call sub_1014C35  +
cmp eax ebx +
mov [ebp-20h] eax +
jge loc_10398ED  +
push offset aDriverPackageF  +
push 3  +
call sub_103AC75  +
cmp dword ptr [ebp-20h] 80070057h +
pop ecx  +
pop ecx  +
jnz loc_10398E8  +
mov esi 0CEh +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-11Ch] +
call sub_1040358  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-10h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-28h] +
call sub_1015174  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-3Ch] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call sub_1015174  +
mov eax esi +
jmp loc_1039F09  +
push 57h  +
pop esi  +
jmp loc_10398A2  +
push ebx  +
lea eax [ebp-14h] +
push eax  +
push ecx  +
mov ecx esp +
mov [ebp-20h] esp +
push esi  +
call sub_10161A7  +
mov byte ptr [ebp-4] 5 +
mov byte ptr [ebp-4] 4 +
call sub_1036735  +
mov ebx eax +
test ebx ebx +
jz loc_1039929  +
push esi  +
push offset aInvalidDriverP  +
push ebx  +
push 3  +
call sub_103AD09  +
add esp 10h +
mov esi ebx +
jmp loc_10398A2  +
lea eax [ebp-14h] +
push eax  +
call sub_1035572  +
mov esi eax +
xor ecx ecx +
cmp esi ecx +
jz loc_1039952  +
push dword ptr [ebp-14h]  +
push offset aCouldNotOpenFi  +
push esi  +
push 3  +
call sub_103AD09  +
add esp 10h +
jmp loc_10398A2  +
mov ebx [ebp+8] +
test ebx 0FFFFFFE0h +
jz loc_1039970  +
push offset aFlagsAreInvali  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
jmp loc_10398E8  +
cmp edi ecx +
jz loc_10399C4  +
mov eax [edi] +
cmp eax ecx +
jz loc_10399BA  +
cmp [edi+8] ecx +
jz loc_10399BA  +
cmp [edi+0Ch] ecx +
jz loc_10399BA  +
cmp [edi+4] ecx +
jz loc_10399BA  +
mov esi ds:lstrcmpiW +
mov ebx offset word_10022EC +
push ebx  +
push eax  +
call esi  +
test eax eax +
jz loc_10399BA  +
push ebx  +
push dword ptr [edi+8]  +
call esi  +
test eax eax +
jz loc_10399BA  +
push ebx  +
push dword ptr [edi+0Ch]  +
call esi  +
test eax eax +
jz loc_10399BA  +
push ebx  +
push dword ptr [edi+4]  +
call esi  +
test eax eax +
jnz loc_10399C1  +
push offset aTheInstallerin  +
jmp loc_1039962  +
mov ebx [ebp+8] +
call sub_1035240  +
test eax eax +
jnz loc_10399E2  +
push offset aAccessDenied_0  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
push 5  +
jmp loc_10398EA  +
call sub_10352BF  +
test eax eax +
jz loc_1039A03  +
push offset aSystemDoesNotW  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
mov esi 0E0000235h +
jmp loc_10398A2  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-11Ch] +
call sub_1040403  +
mov esi eax +
test esi esi +
jz loc_1039A25  +
push dword ptr [ebp-14h]  +
push offset aFailedToOpenS_  +
jmp loc_1039942  +
lea ecx [ebp-11Ch] +
call sub_103EC03  +
lea ecx [ebp-11Ch] +
mov esi eax +
call sub_103EBC5  +
cmp esi 6 +
jz loc_1039A56  +
push dword ptr [ebp+0Ch]  +
mov ecx [ebp-14h] +
push edi  +
push ebx  +
call sub_1039117  +
mov esi eax +
jmp loc_10398A2  +
test bl 10h +
jz loc_1039A69  +
push offset aDriver_package  +
push 2  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
mov esi ebx +
mov eax ebx +
and esi 4 +
and eax 1 +
mov [ebp+8] eax +
jz loc_1039A9A  +
lea eax [ebp-14h] +
push eax  +
call sub_1036B7A  +
test eax eax +
jz loc_1039A9A  +
push offset aCanTRepairDriv  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
push 0Dh  +
jmp loc_10398EA  +
test bl 2 +
jz loc_1039AA3  +
push 0  +
jmp loc_1039AA5  +
push 1  +
call sub_104574C  +
mov [ebp-20h] eax +
test bl 8 +
jz loc_1039B71  +
push ecx  +
lea eax [ebp-14h] +
mov ecx esp +
mov [ebp-24h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 6 +
mov byte ptr [ebp-4] 4 +
call sub_1044327  +
test eax eax +
jz loc_1039B71  +
mov ebx 103h +
cmp eax ebx +
jnz loc_1039CC3  +
test esi esi +
jnz loc_1039B76  +
test edi edi +
jz loc_1039B69  +
lea eax [ebp-10h] +
push eax  +
push ecx  +
lea eax [ebp-14h] +
mov ecx esp +
mov [ebp+0Ch] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 7 +
mov byte ptr [ebp-4] 4 +
call sub_10468C3  +
test eax eax +
jnz loc_1039E6D  +
lea eax [ebp-38h] +
push eax  +
push ecx  +
mov ecx esp +
mov [ebp+0Ch] esp +
push dword ptr [edi+4]  +
call sub_10161A7  +
mov byte ptr [ebp-4] 8 +
push ecx  +
mov ecx esp +
mov [ebp+8] esp +
push dword ptr [edi]  +
call sub_10161A7  +
mov byte ptr [ebp-4] 9 +
push ecx  +
lea eax [ebp-10h] +
mov ecx esp +
mov [ebp-24h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 0Ah +
mov byte ptr [ebp-4] 4 +
call sub_103C9E1  +
mov [ebp-18h] eax +
test eax eax +
jnz loc_1039D5A  +
mov [ebp-18h] ebx +
jmp loc_1039E6D  +
mov ebx 103h +
lea eax [ebp-10h] +
push eax  +
push ecx  +
lea eax [ebp-14h] +
mov ecx esp +
mov [ebp-24h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 0Bh +
mov byte ptr [ebp-4] 4 +
call sub_10468C3  +
test eax eax +
jnz loc_1039BB8  +
cmp [ebp+8] eax +
jz loc_1039BAF  +
mov dword ptr [ebp-34h] 10h +
mov dword ptr [ebp-1Ch] 2 +
jmp loc_1039BC6  +
mov dword ptr [ebp-1Ch] 3 +
jmp loc_1039BC6  +
cmp eax 490h +
jnz loc_1039BC6  +
mov dword ptr [ebp-1Ch] 1 +
and dword ptr [ebp-30h] 0 +
cmp dword ptr [ebp-1Ch] 2 +
jz loc_1039BD6  +
cmp dword ptr [ebp-1Ch] 1 +
jnz loc_1039C4B  +
lea eax [ebp-14h] +
push eax  +
call sub_1036B7A  +
test eax eax +
jz loc_1039BFD  +
push offset aCanTPreinsta_0  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
mov dword ptr [ebp-18h] 780h +
jmp loc_1039E6D  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp-34h]  +
lea eax [ebp-14h] +
push ecx  +
mov ecx esp +
mov [ebp-24h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 0Ch +
mov byte ptr [ebp-4] 4 +
call sub_1046E71  +
mov [ebp-18h] eax +
test eax eax +
jnz loc_1039D07  +
push dword ptr [ebp-10h]  +
call sub_1038BFD  +
mov [ebp-18h] eax +
test eax eax +
jnz loc_1039CCB  +
cmp dword ptr [ebp-1Ch] 1 +
jnz loc_1039C4B  +
mov dword ptr [ebp-30h] 1 +
test edi edi +
jz loc_1039C9D  +
lea eax [ebp-38h] +
push eax  +
push ecx  +
mov ecx esp +
mov [ebp-24h] esp +
push dword ptr [edi+4]  +
call sub_10161A7  +
mov byte ptr [ebp-4] 0Eh +
push ecx  +
mov ecx esp +
mov [ebp-34h] esp +
push dword ptr [edi]  +
call sub_10161A7  +
mov byte ptr [ebp-4] 0Fh +
push ecx  +
lea eax [ebp-10h] +
mov ecx esp +
mov [ebp-1Ch] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 10h +
mov byte ptr [ebp-4] 4 +
call sub_103C9E1  +
mov [ebp-18h] eax +
test eax eax +
jnz loc_1039D5A  +
push dword ptr [ebp-14h]  +
xor eax eax +
inc eax  +
push offset aInstallingIn_0  +
push eax  +
mov [ebp-2Ch] eax +
call sub_103AC75  +
add esp 0Ch +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push esi  +
lea esi [ebp-10h] +
call sub_1037946  +
mov [ebp-18h] eax +
jmp loc_1039D50  +
push dword ptr [ebp-10h]  +
push offset aFailedToAddCat  +
push eax  +
push 3  +
call sub_103AD09  +
add esp 0Ch +
lea eax [ebp-10h] +
mov ecx esp +
mov [ebp+0Ch] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 0Dh +
mov byte ptr [ebp-4] 4 +
call sub_10463BC  +
test eax eax +
jz loc_1039D50  +
push dword ptr [ebp-10h]  +
push offset aCouldNotDelete  +
jmp loc_1039D46  +
mov ecx 800B0110h +
cmp eax ecx +
jnz loc_1039D22  +
push offset aInvalidSignatu  +
push ecx  +
push 3  +
call sub_103AD09  +
jmp loc_1039E6A  +
mov ecx 800B0100h +
cmp eax ecx +
jnz loc_1039D32  +
push offset aUnsignedDriver  +
jmp loc_1039D15  +
cmp eax 2 +
jnz loc_1039D50  +
push dword ptr [ebp-14h]  +
mov dword ptr [ebp-18h] 0E0000303h +
push offset aOneOrMoreFiles  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
cmp dword ptr [ebp-18h] 0 +
jz loc_1039E6D  +
cmp [ebp-18h] ebx +
jz loc_1039E6D  +
cmp dword ptr [ebp-18h] 0E000020Bh +
jz loc_1039E6D  +
cmp dword ptr [ebp-18h] 0E0000301h +
jz loc_1039E6D  +
cmp dword ptr [ebp-2Ch] 0 +
jz loc_1039DF1  +
cmp dword ptr [ebp-38h] 0 +
jnz loc_1039DF1  +
test edi edi +
jz loc_1039DF1  +
lea eax [ebp+0Ch] +
push eax  +
push ecx  +
mov ecx esp +
mov [ebp+8] esp +
push dword ptr [edi+4]  +
call sub_10161A7  +
mov byte ptr [ebp-4] 11h +
push ecx  +
mov ecx esp +
mov [ebp-24h] esp +
push dword ptr [edi]  +
call sub_10161A7  +
mov byte ptr [ebp-4] 12h +
push ecx  +
lea eax [ebp-10h] +
mov ecx esp +
mov [ebp-2Ch] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 13h +
mov byte ptr [ebp-4] 4 +
call sub_103CC31  +
push dword ptr [ebp-10h]  +
push dword ptr [edi]  +
test eax eax +
jz loc_1039DE2  +
push offset aCouldNotRemove  +
push 3  +
jmp loc_1039DE9  +
push offset aSuccessfullyRe  +
push 1  +
call sub_103AC75  +
add esp 10h +
cmp dword ptr [ebp-30h] 0 +
jz loc_1039E6D  +
push ecx  +
lea eax [ebp-10h] +
mov ecx esp +
mov [ebp+0Ch] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 14h +
mov byte ptr [ebp-4] 4 +
call sub_10463BC  +
push dword ptr [ebp-10h]  +
test eax eax +
jz loc_1039E23  +
push offset aCouldNotDelete  +
push 3  +
jmp loc_1039E2A  +
push offset aSuccessfully_1  +
push 1  +
call sub_103AC75  +
add esp 0Ch +
push ecx  +
lea eax [ebp-10h] +
mov ecx esp +
mov [ebp+0Ch] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 15h +
mov byte ptr [ebp-4] 4 +
call sub_103C34C  +
push dword ptr [ebp-10h]  +
test eax eax +
jz loc_1039E5E  +
push offset aCouldNotDele_0  +
push 3  +
jmp loc_1039E65  +
push offset aSuccessfullyDe  +
push 1  +
call sub_103AC75  +
add esp 0Ch +
push dword ptr [ebp-20h]  +
call sub_104574C  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-11Ch] +
call sub_1040358  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-10h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-28h] +
call sub_1015174  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-3Ch] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call sub_1015174  +
mov eax [ebp-18h] +
jmp loc_1039F09  +
push offset aParameterIsNul  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-11Ch] +
call sub_1040358  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-10h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-28h] +
call sub_1015174  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-3Ch] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call sub_1015174  +
push 57h  +
pop eax  +
call sub_1021FA5  +
retn 8  +
***
call sub_1021EB9  +
mov esi ecx +
mov edi edx +
lea ecx [ebp-10h] +
mov dword ptr [ebp-14h] 643h +
call sub_10151DA  +
xor ebx ebx +
mov [ebp-4] ebx +
lea ecx [ebp-160h] +
call sub_104027B  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-48h] +
call sub_103B217  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-24h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-20h] +
mov [ebp-2Ch] ebx +
mov dword ptr [ebp-28h] 1 +
call sub_10151DA  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-18h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 5 +
cmp edi ebx +
jz loc_103A54F  +
mov eax [ebp+0Ch] +
cmp eax ebx +
jz loc_103A54F  +
mov [eax] ebx +
lea eax [ebp-1Ch] +
push eax  +
push 7FFFh  +
push edi  +
call sub_1014C35  +
cmp eax ebx +
mov [ebp-1Ch] eax +
jge loc_103A024  +
push offset aDriverPackageF  +
push 3  +
call sub_103AC75  +
cmp dword ptr [ebp-1Ch] 80070057h +
pop ecx  +
pop ecx  +
jnz loc_103A01F  +
mov esi 0CEh +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-18h] +
call sub_1015174  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-20h] +
call sub_1015174  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-24h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-48h] +
call sub_103AF75  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-160h] +
call sub_1040358  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_1015174  +
mov eax esi +
jmp loc_103A5AB  +
push 57h  +
pop esi  +
jmp loc_1039FCD  +
push ebx  +
lea eax [ebp-10h] +
push eax  +
push ecx  +
mov ecx esp +
mov [ebp-1Ch] esp +
push edi  +
call sub_10161A7  +
mov byte ptr [ebp-4] 6 +
mov byte ptr [ebp-4] 5 +
call sub_1036735  +
mov ebx eax +
test ebx ebx +
jz loc_103A060  +
push edi  +
push offset aInvalidDriverP  +
push ebx  +
push 3  +
call sub_103AD09  +
add esp 10h +
mov esi ebx +
jmp loc_1039FCD  +
lea eax [ebp-10h] +
push eax  +
call sub_1035572  +
mov edi eax +
xor ebx ebx +
cmp edi ebx +
jz loc_103A08B  +
push dword ptr [ebp-10h]  +
push offset aCouldNotOpenFi  +
push edi  +
push 3  +
call sub_103AD09  +
add esp 10h +
mov esi edi +
jmp loc_1039FCD  +
test dword ptr [ebp+8] 0FFFFFFD9h +
jz loc_103A0A7  +
push offset aFlagsAreInvali  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
jmp loc_103A01F  +
cmp esi ebx +
jz loc_103A0FA  +
mov eax [esi] +
cmp eax ebx +
jz loc_103A0F1  +
cmp [esi+8] ebx +
jz loc_103A0F1  +
cmp [esi+0Ch] ebx +
jz loc_103A0F1  +
cmp [esi+4] ebx +
jz loc_103A0F1  +
mov edi ds:lstrcmpiW +
mov ebx offset word_10022EC +
push ebx  +
push eax  +
call edi  +
test eax eax +
jz loc_103A0F1  +
push ebx  +
push dword ptr [esi+8]  +
call edi  +
test eax eax +
jz loc_103A0F1  +
push ebx  +
push dword ptr [esi+0Ch]  +
call edi  +
test eax eax +
jz loc_103A0F1  +
push ebx  +
push dword ptr [esi+4]  +
call edi  +
test eax eax +
jnz loc_103A0F8  +
push offset aTheInstallerin  +
jmp loc_103A099  +
xor ebx ebx +
call sub_1035240  +
test eax eax +
jnz loc_103A118  +
push offset aAccessDeniedAd  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
push 5  +
jmp loc_103A021  +
call sub_10352BF  +
test eax eax +
jz loc_103A139  +
push offset aSystemDoesNotW  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
mov esi 0E0000235h +
jmp loc_1039FCD  +
lea eax [ebp-20h] +
push eax  +
push ecx  +
lea eax [ebp-10h] +
mov ecx esp +
mov [ebp-1Ch] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 7 +
mov byte ptr [ebp-4] 5 +
call sub_10377BC  +
cmp eax ebx +
jz loc_103A187  +
cmp eax 34h +
jnz loc_103A545  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp-10h]  +
push offset aRedirectingOem  +
push 1  +
call sub_103AC75  +
add esp 10h +
lea eax [ebp-20h] +
push eax  +
lea ecx [ebp-10h] +
call sub_1015959  +
lea eax [ebp-10h] +
push eax  +
lea ecx [ebp-160h] +
call sub_1040403  +
mov edi eax +
cmp edi ebx +
jz loc_103A1A9  +
push dword ptr [ebp-10h]  +
push offset aFailedToOpenS_  +
jmp loc_103A079  +
test byte ptr [ebp+8] 2 +
jz loc_103A1B2  +
push ebx  +
jmp loc_103A1B4  +
push 1  +
call sub_104574C  +
mov [ebp-1Ch] eax +
lea eax [ebp-48h] +
push eax  +
push ebx  +
push 3  +
lea eax [ebp-160h] +
push eax  +
call sub_103E556  +
mov ebx eax +
cmp ebx 0B7h +
jnz loc_103A43C  +
lea eax [ebp-18h] +
push eax  +
push 2  +
lea ecx [ebp-48h] +
call sub_103B80D  +
test eax eax +
jnz loc_103A20D  +
push dword ptr [ebp-10h]  +
push offset aCouldNotGetInf  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
mov dword ptr [ebp-14h] 643h +
jmp loc_103A493  +
mov edi [ebp+8] +
lea eax [ebp-2Ch] +
push eax  +
xor ebx ebx +
shr edi 2 +
push ebx  +
lea ecx [ebp-48h] +
and edi 1 +
call sub_103AFC1  +
test eax eax +
jnz loc_103A233  +
push dword ptr [ebp-10h]  +
push offset aCouldNotGetT_0  +
jmp loc_103A1F7  +
cmp edi ebx +
jnz loc_103A34E  +
lea ecx [ebp-64h] +
call sub_1014C71  +
mov byte ptr [ebp-4] 8 +
lea eax [ebp-64h] +
push eax  +
push 9  +
lea ecx [ebp-48h] +
call sub_103C4CC  +
cmp esi ebx +
jz loc_103A27D  +
push ecx  +
mov ecx esp +
mov [ebp-4Ch] esp +
push dword ptr [esi]  +
call sub_10161A7  +
mov byte ptr [ebp-4] 9 +
mov byte ptr [ebp-4] 8 +
lea ecx [ebp-64h] +
call sub_10378C2  +
cmp eax ebx +
jnz loc_103A2D6  +
mov [ebp-28h] ebx +
lea ecx [ebp-80h] +
call sub_1014C71  +
mov byte ptr [ebp-4] 0Ch +
lea eax [ebp-80h] +
push eax  +
push 9  +
lea ecx [ebp-48h] +
call sub_103C4CC  +
cmp [ebp-78h] ebx +
jz loc_103A336  +
push dword ptr [ebp-10h]  +
push offset aWillNotUninsta  +
push 1  +
call sub_103AC75  +
add esp 0Ch +
mov dword ptr [ebp-14h] 0E0000300h +
mov byte ptr [ebp-4] 8 +
lea ecx [ebp-80h] +
call sub_1014FBC  +
mov byte ptr [ebp-4] 5 +
lea ecx [ebp-64h] +
call sub_1014FBC  +
jmp loc_103A4ED  +
push ecx  +
mov ecx esp +
mov [ebp-4Ch] esp +
push dword ptr [esi+4]  +
call sub_10161A7  +
mov byte ptr [ebp-4] 0Ah +
push ecx  +
mov ecx esp +
mov [ebp-68h] esp +
push dword ptr [esi]  +
call sub_10161A7  +
mov byte ptr [ebp-4] 0Bh +
mov byte ptr [ebp-4] 8 +
lea ecx [ebp-48h] +
call sub_103C70C  +
cmp eax ebx +
jnz loc_103A27D  +
push dword ptr [esi]  +
push offset aCouldNotRemo_1  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
mov dword ptr [ebp-14h] 643h +
mov byte ptr [ebp-4] 5 +
lea ecx [ebp-64h] +
call sub_1014FBC  +
jmp loc_103A493  +
mov byte ptr [ebp-4] 8 +
lea ecx [ebp-80h] +
call sub_1014FBC  +
mov byte ptr [ebp-4] 5 +
lea ecx [ebp-64h] +
call sub_1014FBC  +
push dword ptr [ebp-10h]  +
xor edi edi +
push offset aUninstallingDr  +
inc edi  +
push edi  +
call sub_103AC75  +
mov eax [ebp-2Ch] +
add esp 0Ch +
cmp eax edi +
jz loc_103A3D1  +
cmp eax 2 +
jz loc_103A3D1  +
cmp eax 3 +
jz loc_103A3D1  +
cmp eax 4 +
jz loc_103A3D1  +
cmp eax 5 +
jz loc_103A3C2  +
cmp eax 9 +
jz loc_103A3C2  +
cmp eax 0Bh +
jnz loc_103A395  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-48h] +
push eax  +
call sub_104EAC4  +
jmp loc_103A3DE  +
cmp eax 6 +
jnz loc_103A3A9  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-18h] +
push ebx  +
push eax  +
call sub_1044E6A  +
jmp loc_103A3DE  +
cmp eax 7 +
jz loc_103A3B3  +
cmp eax 8 +
jnz loc_103A3E5  +
push dword ptr [ebp+0Ch]  +
push eax  +
lea eax [ebp-48h] +
push eax  +
call sub_104900C  +
jmp loc_103A3DE  +
push dword ptr [ebp+0Ch]  +
push eax  +
lea eax [ebp-48h] +
push eax  +
call sub_104E61A  +
jmp loc_103A3DE  +
push dword ptr [ebp+0Ch]  +
push eax  +
lea eax [ebp-48h] +
push eax  +
call sub_104AE2F  +
mov [ebp-14h] eax +
cmp eax ebx +
jz loc_103A3F9  +
push dword ptr [ebp-10h]  +
push offset aErrorOccurredW  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
jmp loc_103A476  +
test byte ptr [ebp+8] 20h +
jz loc_103A414  +
push offset aBestEffortToDe  +
push edi  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
lea ecx [ebp-18h] +
call sub_103882F  +
lea ecx [ebp-48h] +
call sub_103ADF7  +
push dword ptr [ebp-18h]  +
test eax eax +
jnz loc_103A433  +
push offset aDriverStoreE_0  +
push edi  +
call sub_103AC75  +
add esp 0Ch +
jmp loc_103A47B  +
push offset aCouldNotRemo_0  +
push 3  +
jmp loc_103A429  +
push dword ptr [ebp-10h]  +
mov edi 0E0000302h +
cmp ebx edi +
jnz loc_103A45D  +
push offset aNoDriverStoreE  +
push edi  +
push 1  +
call sub_103AD09  +
add esp 10h +
mov [ebp-14h] edi +
jmp loc_103A493  +
push offset aUninstallInval  +
push 643h  +
push 3  +
call sub_103AD09  +
add esp 10h +
mov [ebp-14h] ebx +
xor ebx ebx +
cmp [ebp-14h] ebx +
jnz loc_103A48A  +
push offset aUninstallCompl  +
push ebx  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
jmp loc_103A4ED  +
cmp dword ptr [ebp-14h] 0E0000300h +
jz loc_103A4ED  +
test esi esi +
jz loc_103A4ED  +
cmp dword ptr [ebp-28h] 0 +
jz loc_103A4ED  +
push ecx  +
mov ecx esp +
mov [ebp+0Ch] esp +
push dword ptr [esi+4]  +
call sub_10161A7  +
mov byte ptr [ebp-4] 0Dh +
push ecx  +
mov ecx esp +
mov [ebp+8] esp +
push dword ptr [esi]  +
call sub_10161A7  +
mov byte ptr [ebp-4] 0Eh +
mov byte ptr [ebp-4] 5 +
lea ecx [ebp-48h] +
call sub_103C5BC  +
push dword ptr [ebp-24h]  +
push dword ptr [esi]  +
test eax eax +
jnz loc_103A4DE  +
push offset aCouldNotReAddS  +
push 3  +
jmp loc_103A4E5  +
push offset aSuccessfully_0  +
push 1  +
call sub_103AC75  +
add esp 10h +
push dword ptr [ebp-1Ch]  +
call sub_104574C  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-18h] +
call sub_1015174  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-20h] +
call sub_1015174  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-24h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-48h] +
call sub_103AF75  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-160h] +
call sub_1040358  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_1015174  +
mov eax [ebp-14h] +
jmp loc_103A5AB  +
mov esi 0E0000302h +
jmp loc_1039FCD  +
push offset aParameterIsNul  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-18h] +
call sub_1015174  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-20h] +
call sub_1015174  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-24h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-48h] +
call sub_103AF75  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-160h] +
call sub_1040358  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_1015174  +
push 57h  +
pop eax  +
call sub_1021FA5  +
retn 8  +
***
call sub_1021EB9  +
mov esi ecx +
mov ebx edx +
lea ecx [ebp-10h] +
call sub_10151DA  +
xor edi edi +
mov [ebp-4] edi +
lea ecx [ebp-10Ch] +
call sub_104027B  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-14h] +
mov dword ptr [ebp-1Ch] 1 +
mov [ebp-28h] edi +
mov [ebp-20h] edi +
call sub_10151DA  +
mov byte ptr [ebp-4] 2 +
cmp ebx edi +
jz loc_103AA79  +
mov eax [ebp+0Ch] +
cmp eax edi +
jz loc_103AA79  +
mov [eax] edi +
lea eax [ebp-18h] +
push eax  +
push 7FFFh  +
push ebx  +
call sub_1014C35  +
cmp eax edi +
mov [ebp-18h] eax +
jge loc_103A67A  +
push offset aDriverPackageF  +
push 3  +
call sub_103AC75  +
cmp dword ptr [ebp-18h] 80070057h +
pop ecx  +
pop ecx  +
jnz loc_103A675  +
mov esi 0CEh +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-14h] +
call sub_1015174  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-10Ch] +
call sub_1040358  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_1015174  +
mov eax esi +
jmp loc_103AAB1  +
push 57h  +
pop esi  +
jmp loc_103A647  +
push edi  +
lea eax [ebp-10h] +
push eax  +
push ecx  +
mov ecx esp +
mov [ebp-18h] esp +
push ebx  +
call sub_10161A7  +
mov byte ptr [ebp-4] 3 +
mov byte ptr [ebp-4] 2 +
call sub_1036735  +
mov [ebp-18h] eax +
cmp eax edi +
jz loc_103A6B5  +
push ebx  +
push offset aInvalidDriverP  +
push eax  +
push 3  +
call sub_103AD09  +
mov esi [ebp-18h] +
add esp 10h +
jmp loc_103A647  +
lea eax [ebp-10h] +
push eax  +
call sub_1035572  +
mov ebx eax +
cmp ebx edi +
jz loc_103A6DE  +
push dword ptr [ebp-10h]  +
push offset aCouldNotOpenFi  +
push ebx  +
push 3  +
call sub_103AD09  +
add esp 10h +
mov esi ebx +
jmp loc_103A647  +
mov ebx [ebp+8] +
test ebx 0FFFFFFD9h +
jz loc_103A6FC  +
push offset aFlagsAreInvali  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
jmp loc_103A675  +
cmp esi edi +
jz loc_103A752  +
mov eax [esi] +
cmp eax edi +
jz loc_103A746  +
cmp [esi+8] edi +
jz loc_103A746  +
cmp [esi+0Ch] edi +
jz loc_103A746  +
cmp [esi+4] edi +
jz loc_103A746  +
mov edi ds:lstrcmpiW +
mov ebx offset word_10022EC +
push ebx  +
push eax  +
call edi  +
test eax eax +
jz loc_103A746  +
push ebx  +
push dword ptr [esi+8]  +
call edi  +
test eax eax +
jz loc_103A746  +
push ebx  +
push dword ptr [esi+0Ch]  +
call edi  +
test eax eax +
jz loc_103A746  +
push ebx  +
push dword ptr [esi+4]  +
call edi  +
test eax eax +
jnz loc_103A74D  +
push offset aTheInstallerin  +
jmp loc_103A6EE  +
mov ebx [ebp+8] +
xor edi edi +
call sub_1035240  +
test eax eax +
jnz loc_103A770  +
push offset aAccessDenied_0  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
push 5  +
jmp loc_103A677  +
call sub_10352BF  +
test eax eax +
jz loc_103A791  +
push offset aSystemDoesNotW  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
mov esi 0E0000235h +
jmp loc_103A647  +
lea eax [ebp-10h] +
push eax  +
lea ecx [ebp-10Ch] +
call sub_1040403  +
mov [ebp-18h] eax +
cmp eax edi +
jz loc_103A7B4  +
push dword ptr [ebp-10h]  +
push offset aFailedToOpenS_  +
jmp loc_103A6A5  +
lea ecx [ebp-10Ch] +
call sub_103EC03  +
lea ecx [ebp-10Ch] +
mov edi eax +
call sub_103EBC5  +
cmp edi 6 +
jz loc_103A7E6  +
push dword ptr [ebp+0Ch]  +
mov edx [ebp-10h] +
push ebx  +
mov ecx esi +
call sub_1039F16  +
mov esi eax +
jmp loc_103A647  +
lea eax [ebp-14h] +
push eax  +
push ecx  +
lea eax [ebp-10h] +
mov ecx esp +
mov [ebp+8] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 4 +
mov byte ptr [ebp-4] 2 +
call sub_10468C3  +
mov edi eax +
test edi edi +
jnz loc_103A995  +
test bl 2 +
jz loc_103A818  +
push eax  +
jmp loc_103A81A  +
push 1  +
call sub_104574C  +
mov [ebp-1Ch] eax +
mov eax ebx +
shr eax 2 +
shr ebx 5 +
and eax 1 +
and ebx 1 +
test eax eax +
jnz loc_103A905  +
test esi esi +
jz loc_103A89B  +
lea eax [ebp-28h] +
push eax  +
push ecx  +
mov ecx esp +
mov [ebp-18h] esp +
push dword ptr [esi+4]  +
call sub_10161A7  +
mov byte ptr [ebp-4] 5 +
push ecx  +
mov ecx esp +
mov [ebp-2Ch] esp +
push dword ptr [esi]  +
call sub_10161A7  +
mov byte ptr [ebp-4] 6 +
push ecx  +
lea eax [ebp-14h] +
mov ecx esp +
mov [ebp-24h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 7 +
mov byte ptr [ebp-4] 2 +
call sub_103CC31  +
mov edi eax +
test edi edi +
jz loc_103A89B  +
push dword ptr [ebp-10h]  +
push dword ptr [esi]  +
push offset aCouldNotRemo_2  +
push 3  +
call sub_103AC75  +
jmp loc_103A9B3  +
and dword ptr [ebp+8] 0 +
lea eax [ebp+8] +
push eax  +
push ecx  +
lea eax [ebp-14h] +
mov ecx esp +
mov [ebp-24h] esp +
push eax  +
mov dword ptr [ebp-20h] 1 +
call sub_10151F2  +
mov byte ptr [ebp-4] 8 +
mov byte ptr [ebp-4] 2 +
call sub_103CE86  +
mov edi eax +
test edi edi +
jz loc_103A8E3  +
push dword ptr [ebp-10h]  +
push offset aCouldNotVerify  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
jmp loc_103A9B6  +
cmp dword ptr [ebp+8] 0 +
jz loc_103A905  +
push dword ptr [ebp-10h]  +
push offset aWillNotUninsta  +
push 1  +
call sub_103AC75  +
add esp 0Ch +
mov edi 0E0000300h +
jmp loc_103AA46  +
push dword ptr [ebp-10h]  +
push offset aUninstallingDr  +
push 1  +
call sub_103AC75  +
add esp 0Ch +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-14h] +
push ebx  +
push eax  +
call sub_1044E6A  +
mov edi eax +
test edi edi +
jz loc_103A958  +
push dword ptr [ebp-10h]  +
cmp edi 0E000023Ch +
jnz loc_103A949  +
push offset aCannotUninstal  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
jmp loc_103A9D2  +
push offset aAnErrorOccurre  +
push edi  +
push 3  +
call sub_103AD09  +
jmp loc_103A9B3  +
push ecx  +
lea eax [ebp-14h] +
mov ecx esp +
mov [ebp+0Ch] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 9 +
mov byte ptr [ebp-4] 2 +
call sub_103C34C  +
push dword ptr [ebp-14h]  +
test eax eax +
jz loc_103A98C  +
push offset aCouldNotDele_0  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
jmp loc_103A9BA  +
push offset aSuccessfullyDe  +
push 1  +
jmp loc_103A982  +
mov eax 490h +
cmp edi eax +
jnz loc_103A9B6  +
push dword ptr [ebp-10h]  +
push offset aNoDriverStor_0  +
push eax  +
push 1  +
call sub_103AD09  +
mov edi 0E0000302h +
add esp 10h +
test edi edi +
jnz loc_103A9CA  +
push offset aUninstallCompl  +
push 0  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
jmp loc_103AA46  +
cmp edi 0E0000300h +
jz loc_103AA46  +
cmp dword ptr [ebp-20h] 0 +
jz loc_103AA46  +
test esi esi +
jz loc_103AA46  +
cmp dword ptr [ebp-28h] 0 +
jnz loc_103AA46  +
lea eax [ebp+0Ch] +
push eax  +
push ecx  +
mov ecx esp +
mov [ebp+8] esp +
push dword ptr [esi+4]  +
call sub_10161A7  +
mov byte ptr [ebp-4] 0Ah +
push ecx  +
mov ecx esp +
mov [ebp-24h] esp +
push dword ptr [esi]  +
call sub_10161A7  +
mov byte ptr [ebp-4] 0Bh +
push ecx  +
lea eax [ebp-14h] +
mov ecx esp +
mov [ebp-2Ch] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 0Ch +
mov byte ptr [ebp-4] 2 +
call sub_103C9E1  +
push dword ptr [ebp-14h]  +
push dword ptr [esi]  +
test eax eax +
jz loc_103AA37  +
push offset aCouldNotReAddS  +
push 3  +
jmp loc_103AA3E  +
push offset aSuccessfully_0  +
push 1  +
call sub_103AC75  +
add esp 10h +
push dword ptr [ebp-1Ch]  +
call sub_104574C  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-14h] +
call sub_1015174  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-10Ch] +
call sub_1040358  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_1015174  +
mov eax edi +
jmp loc_103AAB1  +
push offset aParameterIsNul  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-14h] +
call sub_1015174  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-10Ch] +
call sub_1040358  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_1015174  +
push 57h  +
pop eax  +
call sub_1021FA5  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
call sub_1035328  +
push offset aEnterDriverp_0  +
push 1  +
mov esi eax +
call sub_103AC75  +
pop ecx  +
pop ecx  +
cmp esi 3 +
jz loc_103AB01  +
cmp esi 4 +
jz loc_103AB01  +
cmp esi 5 +
jz loc_103AB01  +
cmp esi 6 +
jl loc_103AAFC  +
mov ecx [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_4] +
call sub_1038DA2  +
pop ebx  +
jmp loc_103AB0C  +
push 0Ah  +
pop esi  +
jmp loc_103AB2C  +
push [ebp+arg_4]  +
mov ecx [ebp+arg_0] +
call sub_10380DC  +
mov esi eax +
test esi esi +
jz loc_103AB1A  +
cmp esi 0B7h +
jnz loc_103AB2C  +
push [ebp+arg_0]  +
push offset aSIsPreinstalle  +
push 0  +
call sub_103AC75  +
add esp 0Ch +
push esi  +
push offset aReturnDriver_0  +
push 1  +
call sub_103AC75  +
add esp 0Ch +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push offset aEnterDriverp_1  +
push 1  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
call sub_1035328  +
cmp eax 3 +
jz loc_103AB8F  +
cmp eax 4 +
jz loc_103AB8F  +
cmp eax 5 +
jz loc_103AB8F  +
cmp eax 6 +
jl loc_103AB8A  +
mov ecx [ebp+arg_0] +
push edi  +
push [ebp+arg_C]  +
mov edi [ebp+arg_8] +
push [ebp+arg_4]  +
call sub_10397F4  +
pop edi  +
jmp loc_103ABA0  +
push 0Ah  +
pop esi  +
jmp loc_103ABA2  +
push [ebp+arg_C]  +
mov ecx [ebp+arg_0] +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1039117  +
mov esi eax +
push esi  +
push offset aReturnDriver_1  +
push 1  +
call sub_103AC75  +
add esp 0Ch +
mov eax esi +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push offset aEnterDriverp_2  +
push 1  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
call sub_1035328  +
cmp eax 3 +
jz loc_103AC03  +
cmp eax 4 +
jz loc_103AC03  +
cmp eax 5 +
jz loc_103AC03  +
cmp eax 6 +
jl loc_103ABFE  +
push [ebp+arg_C]  +
mov ecx [ebp+arg_8] +
push [ebp+arg_4]  +
mov edx [ebp+arg_0] +
call sub_103A5B8  +
jmp loc_103AC14  +
push 0Ah  +
pop esi  +
jmp loc_103AC16  +
push [ebp+arg_C]  +
mov ecx [ebp+arg_8] +
push [ebp+arg_4]  +
mov edx [ebp+arg_0] +
call sub_1039F16  +
mov esi eax +
push esi  +
push offset aReturnDriver_2  +
push 1  +
call sub_103AC75  +
add esp 0Ch +
mov eax esi +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
and dword_10657D8 0 +
mov dword_10657D4 eax +
mov eax [ebp+arg_4] +
mov dword_10657DC eax +
pop ebp  +
retn 8  +
***
cmp dword_10657C8 0 +
jnz loc_103AC6C  +
cmp dword_10657D4 0 +
jnz loc_103AC6C  +
xor eax eax +
retn   +
xor eax eax +
inc eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_10657C8 0 +
jnz loc_103AC8C  +
cmp dword_10657D4 0 +
jz loc_103AD02  +
push esi  +
mov esi dword_1064620 +
lea eax [esi+esi+4] +
push edi  +
push eax  +
call sub_1021488  +
mov edi eax +
pop ecx  +
test edi edi +
jz loc_103AD00  +
push ebx  +
xor eax eax +
mov [edi] ax +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
lea ebx [edi+4] +
push esi  +
push ebx  +
call sub_1034543  +
test eax eax +
jz loc_103ACC7  +
cmp eax 8007007Ah +
jnz loc_103ACF8  +
mov eax dword_10657C8 +
test eax eax +
jz loc_103ACDE  +
push dword_10657D0  +
push ebx  +
push 0  +
push [ebp+arg_0]  +
call eax  +
mov eax dword_10657D4 +
test eax eax +
jz loc_103ACF8  +
push dword_10657DC  +
push ebx  +
push 0  +
push [ebp+arg_0]  +
call eax  +
add esp 10h +
push edi  +
call sub_10213A1  +
pop ecx  +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_10657C8 0 +
jnz loc_103AD20  +
cmp dword_10657D4 0 +
jz loc_103AD98  +
push esi  +
mov esi dword_1064620 +
lea eax [esi+esi+4] +
push edi  +
push eax  +
call sub_1021488  +
mov edi eax +
pop ecx  +
test edi edi +
jz loc_103AD96  +
push ebx  +
xor eax eax +
mov [edi] ax +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea ebx [edi+4] +
push esi  +
push ebx  +
call sub_1034543  +
test eax eax +
jz loc_103AD5B  +
cmp eax 8007007Ah +
jnz loc_103AD8E  +
mov eax dword_10657C8 +
test eax eax +
jz loc_103AD73  +
push dword_10657D0  +
push ebx  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call eax  +
mov eax dword_10657D4 +
test eax eax +
jz loc_103AD8E  +
push dword_10657DC  +
push ebx  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call eax  +
add esp 10h +
push edi  +
call sub_10213A1  +
pop ecx  +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
push ecx  +
call ds:InterlockedExchange  +
cmp eax 0FFFFFFFFh +
jz locret_103ADB7  +
push eax  +
call ds:SetupCloseFileQueue  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+14h] 0 +
jz loc_103ADF0  +
cmp dword ptr [esi+18h] 0FFFFFFFFh +
jz loc_103ADD3  +
call sub_103AD9F  +
mov eax [esi+10h] +
test eax eax +
jz loc_103ADE5  +
push eax  +
call ds:RegCloseKey  +
and dword ptr [esi+10h] 0 +
push dword ptr [esi]  +
call sub_104F4B2  +
and dword ptr [esi+14h] 0 +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+14h] 0 +
jnz loc_103AE07  +
xor eax eax +
inc eax  +
pop esi  +
retn   +
mov eax [esi+10h] +
test eax eax +
jz loc_103AE19  +
push eax  +
call ds:RegCloseKey  +
and dword ptr [esi+10h] 0 +
push dword ptr [esi]  +
call sub_1050292  +
mov ecx esi +
call sub_103ADBD  +
xor eax eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
push edi  +
mov edi ecx +
xor esi esi +
cmp [edi+14h] esi +
jnz loc_103AE4A  +
xor eax eax +
jmp loc_103AED4  +
cmp dword ptr [edi+18h] 0FFFFFFFFh +
jz loc_103AE43  +
mov [ebp+var_4] esi +
call sub_1045739  +
test eax eax +
jnz loc_103AE66  +
inc eax  +
push eax  +
mov [ebp+var_4] eax +
call sub_104574C  +
push ebx  +
push esi  +
push esi  +
push esi  +
push 0FFFFFFFFh  +
push esi  +
call ds:SetupInitDefaultQueueCallbackEx  +
mov ebx eax +
cmp ebx esi +
jnz loc_103AE7E  +
mov [ebp+arg_0] esi +
jmp loc_103AEB3  +
cmp [ebp+arg_0] esi +
jz loc_103AE95  +
mov eax [ebp+arg_4] +
mov [ebp+var_C] eax +
lea eax [ebp+var_C] +
push eax  +
push [ebp+arg_0]  +
mov [ebp+var_8] ebx +
jmp loc_103AE9C  +
push ebx  +
push ds:SetupDefaultQueueCallbackW  +
push dword ptr [edi+18h]  +
push esi  +
call ds:SetupCommitFileQueueW  +
test eax eax +
jnz loc_103AE79  +
call ds:GetLastError  +
mov [ebp+arg_0] eax +
cmp [ebp+var_4] esi +
jz loc_103AEBE  +
push esi  +
call sub_104574C  +
cmp ebx esi +
jz loc_103AEC9  +
push ebx  +
call ds:SetupTermDefaultQueueCallback  +
mov ecx edi +
call sub_103AD9F  +
mov eax [ebp+arg_0] +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
push edi  +
lea esi [ecx+10h] +
xor edi edi +
cmp [esi] edi +
jz loc_103AEF1  +
xor eax eax +
inc eax  +
jmp loc_103AF19  +
cmp [ecx+14h] edi +
jz loc_103AF17  +
mov ecx [ecx+0Ch] +
cmp [ecx-0Ch] edi +
jz loc_103AF17  +
push esi  +
push 2001Fh  +
push edi  +
push ecx  +
push 80000002h  +
call ds:RegOpenKeyExW  +
test eax eax +
jz loc_103AEEC  +
mov [esi] edi +
xor eax eax +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
call sub_103AD9F  +
xor edi edi +
call sub_1045739  +
test eax eax +
jnz loc_103AF3E  +
inc edi  +
push edi  +
call sub_104574C  +
call ds:SetupOpenFileQueue  +
mov [esi+18h] eax +
test edi edi +
jz loc_103AF52  +
push 0  +
call sub_104574C  +
cmp dword ptr [esi+18h] 0FFFFFFFFh +
jnz loc_103AF69  +
call ds:GetLastError  +
mov ecx esi +
mov edi eax +
call sub_103AD9F  +
jmp loc_103AF6B  +
xor edi edi +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
call sub_1021EB9  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [ebp-4] 2 +
call sub_103ADBD  +
mov byte ptr [ebp-4] 1 +
lea ecx [esi+0Ch] +
call sub_1015174  +
mov byte ptr [ebp-4] 0 +
lea ecx [esi+8] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [esi+4] +
call sub_1015174  +
call sub_1021FA5  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+cbData] 0 +
push esi  +
mov esi ecx +
jnz loc_103AFFF  +
mov [ebp+cbData] 4 +
call sub_103AEDF  +
test eax eax +
jz loc_103AFFF  +
lea eax [ebp+cbData] +
push eax  +
push [ebp+lpData]  +
push 0  +
push 0  +
push offset aType  +
push dword ptr [esi+10h]  +
call ds:RegQueryValueExW  +
neg eax  +
sbb eax eax +
inc eax  +
jmp loc_103B001  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
xor esi esi +
push edi  +
mov edi ecx +
cmp [ebp+arg_4] esi +
jnz loc_103B02D  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
cmp [ebp+lpValueName] 6 +
jnz loc_103B03C  +
mov [ebp+lpValueName] offset aClassguids +
jmp loc_103B049  +
cmp [ebp+lpValueName] 5 +
jnz loc_103B024  +
mov [ebp+lpValueName] offset aDateversion +
call sub_103AEDF  +
test eax eax +
jz loc_103B024  +
mov ebx [ebp+lpcbData] +
push ebx  +
push esi  +
push esi  +
push esi  +
push [ebp+lpValueName]  +
mov esi ds:RegQueryValueExW +
push dword ptr [edi+10h]  +
call esi  +
test eax eax +
jnz loc_103B024  +
push dword ptr [ebx]  +
call sub_1054617  +
pop ecx  +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
test eax eax +
jz loc_103B024  +
push ebx  +
push eax  +
push 0  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [edi+10h]  +
call esi  +
test eax eax +
jz loc_103B09B  +
mov eax [ebp+arg_4] +
push dword ptr [eax]  +
call sub_1021189  +
pop ecx  +
jmp loc_103B024  +
xor eax eax +
inc eax  +
jmp loc_103B026  +
***
call sub_1021EB9  +
mov esi ecx +
and dword ptr [ebp-4] 0 +
call sub_103AEDF  +
test eax eax +
jnz loc_103B0D0  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
xor eax eax +
jmp loc_103B123  +
push offset aType  +
lea ecx [ebp+8] +
call sub_101492B  +
test eax eax +
jz loc_103B0F2  +
push offset aDriverstoreins  +
lea ecx [ebp+8] +
call sub_101492B  +
test eax eax +
jnz loc_103B0C0  +
push 4  +
lea eax [ebp+0Ch] +
push eax  +
push 4  +
push 0  +
lea ecx [ebp+8] +
call sub_101F639  +
push eax  +
push dword ptr [esi+10h]  +
call ds:RegSetValueExW  +
mov esi eax +
neg esi  +
sbb esi esi +
inc esi  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
mov eax esi +
call sub_1021FA5  +
retn 8  +
***
call sub_1021EB9  +
mov esi ecx +
and dword ptr [ebp-4] 0 +
call sub_103AEDF  +
test eax eax +
jnz loc_103B163  +
xor esi esi +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
mov eax esi +
call sub_1021FA5  +
retn 8  +
push offset aServices  +
lea ecx [ebp+8] +
call sub_101492B  +
test eax eax +
jz loc_103B1A7  +
push offset aDependentins_0  +
lea ecx [ebp+8] +
call sub_101492B  +
test eax eax +
jz loc_103B1A7  +
push offset aDependentinsta  +
lea ecx [ebp+8] +
call sub_101492B  +
test eax eax +
jz loc_103B1A7  +
push offset aHardwareandcom  +
lea ecx [ebp+8] +
call sub_101492B  +
test eax eax +
jnz loc_103B14B  +
mov ecx [ebp+0Ch] +
cmp dword ptr [ecx+8] 0 +
jnz loc_103B1C7  +
lea ecx [ebp+8] +
call sub_1015002  +
push eax  +
push dword ptr [esi+10h]  +
call ds:RegDeleteValueW  +
xor esi esi +
inc esi  +
jmp loc_103B14D  +
and dword ptr [ebp+0Ch] 0 +
lea eax [ebp+0Ch] +
push eax  +
call sub_1035D59  +
mov edi eax +
test edi edi +
jz loc_103B14B  +
mov eax [ebp+0Ch] +
add eax eax +
push eax  +
push edi  +
push 7  +
push 0  +
lea ecx [ebp+8] +
call sub_101F639  +
push eax  +
push dword ptr [esi+10h]  +
call ds:RegSetValueExW  +
push edi  +
mov esi eax +
call sub_1021189  +
xor eax eax +
test esi esi +
setz al  +
pop ecx  +
mov esi eax +
jmp loc_103B14D  +
***
call sub_1021EB9  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+4] +
call sub_10151DA  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+8] +
call sub_10151DA  +
mov byte ptr [ebp-4] 1 +
lea ecx [esi+0Ch] +
call sub_10151DA  +
mov byte ptr [ebp-4] 2 +
and dword ptr [esi+14h] 0 +
and dword ptr [esi+10h] 0 +
and dword ptr [esi] 0 +
or dword ptr [esi+18h] 0FFFFFFFFh +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax esi +
call sub_1021FA5  +
retn   +
***
call sub_1021EB9  +
mov esi ecx +
mov dword ptr [ebp-4] 1 +
xor edi edi +
cmp [esi+14h] edi +
jnz loc_103B2AC  +
mov esi 10Ah +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp+8] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+0Ch] +
call sub_1015174  +
mov eax esi +
jmp loc_103B3C4  +
lea ecx [ebp-10h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 2 +
mov eax [ebp+8] +
cmp [eax-0Ch] edi +
jz loc_103B39D  +
mov eax [ebp+0Ch] +
cmp [eax-0Ch] edi +
jz loc_103B39D  +
lea eax [ebp+8] +
push eax  +
call sub_1035549  +
test al al +
jnz loc_103B2EE  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-10h] +
call sub_1015174  +
push 2  +
pop esi  +
jmp loc_103B28D  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
add esi 8 +
push esi  +
call sub_10360F6  +
push dword ptr [ebp-10h]  +
call sub_105287B  +
mov esi eax +
cmp esi edi +
jz loc_103B31E  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-10h] +
call sub_1015174  +
jmp loc_103B28D  +
push edi  +
push dword ptr [ebp-10h]  +
mov edi ds:CopyFileW +
push dword ptr [ebp+8]  +
call edi  +
test eax eax +
jnz loc_103B375  +
mov esi ds:GetLastError +
call esi  +
mov ebx eax +
cmp ebx 5 +
jnz loc_103B362  +
push 80h  +
push dword ptr [ebp-10h]  +
call ds:SetFileAttributesW  +
push 0  +
push dword ptr [ebp-10h]  +
push dword ptr [ebp+8]  +
call edi  +
test eax eax +
jnz loc_103B375  +
call esi  +
mov esi eax +
jmp loc_103B30D  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-10h] +
call sub_1015174  +
mov esi ebx +
jmp loc_103B28D  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-10h] +
call sub_1015174  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp+8] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+0Ch] +
call sub_1015174  +
xor eax eax +
jmp loc_103B3C4  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-10h] +
call sub_1015174  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp+8] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+0Ch] +
call sub_1015174  +
push 57h  +
pop eax  +
call sub_1021FA5  +
retn 8  +
***
call sub_1021EB9  +
mov esi ecx +
lea ecx [ebp-10h] +
call sub_10151DA  +
xor ebx ebx +
mov [ebp-4] ebx +
cmp [esi+14h] ebx +
jnz loc_103B407  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_1015174  +
xor eax eax +
call sub_1021FA5  +
retn 1Ch  +
cmp dword ptr [esi+18h] 0FFFFFFFFh +
jnz loc_103B428  +
mov ecx esi +
call sub_103AF21  +
test eax eax +
jz loc_103B428  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_1015174  +
mov eax ebx +
jmp loc_103B3FF  +
mov edi [ebp+0Ch] +
lea eax [ebp-10h] +
push eax  +
push edi  +
lea eax [esi+8] +
push eax  +
call sub_10360F6  +
mov eax [ebp+20h] +
cmp eax ebx +
jz loc_103B495  +
mov ecx [esi+18h] +
mov [ebp-3Ch] ecx +
mov ecx [ebp+8] +
mov ecx [ecx] +
mov [ebp-38h] ecx +
mov ecx [edi] +
mov [ebp-34h] ecx +
mov ecx [ebp+10h] +
mov ecx [ecx] +
mov [ebp-30h] ecx +
mov ecx [ebp+14h] +
mov ecx [ecx] +
mov [ebp-2Ch] ecx +
mov ecx [ebp+18h] +
mov ecx [ecx] +
mov [ebp-28h] ecx +
mov ecx [ebp-10h] +
mov [ebp-24h] ecx +
mov ecx [ebp+1Ch] +
mov ecx [ecx] +
mov [ebp-18h] eax +
lea eax [ebp-40h] +
push eax  +
mov dword ptr [ebp-40h] 30h +
mov [ebp-20h] ecx +
mov [ebp-1Ch] ebx +
mov [ebp-14h] ebx +
call ds:SetupQueueCopyIndirectW  +
jmp loc_103B4C9  +
mov eax [ebp+1Ch] +
mov eax [eax] +
mov ecx [ebp+18h] +
mov ecx [ecx] +
mov edx [ebp+14h] +
mov edx [edx] +
mov edi [edi] +
mov ebx [ebp+10h] +
mov ebx [ebx] +
push 0  +
push eax  +
push dword ptr [ebp-10h]  +
mov [ebp+1Ch] edi +
mov edi [ebp+8] +
mov edi [edi] +
push ecx  +
push edx  +
push ebx  +
push dword ptr [ebp+1Ch]  +
push edi  +
push dword ptr [esi+18h]  +
call ds:SetupQueueCopyW  +
mov ebx eax +
jmp loc_103B418  +
***
call sub_1021EB9  +
mov esi ecx +
mov dword ptr [ebp-4] 1 +
call sub_103AEDF  +
test eax eax +
jnz loc_103B512  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp+8] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+0Ch] +
call sub_1015174  +
xor eax eax +
jmp loc_103B608  +
mov edi offset aInf +
push edi  +
lea ecx [ebp+8] +
call sub_101492B  +
test eax eax +
jnz loc_103B568  +
lea ecx [ebp-10h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 2 +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
lea eax [esi+8] +
push eax  +
call sub_10360F6  +
lea eax [ebp-10h] +
push eax  +
call sub_1035549  +
test al al +
jnz loc_103B55C  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-10h] +
call sub_1015174  +
jmp loc_103B4F3  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-10h] +
call sub_1015174  +
push edi  +
lea ecx [ebp+8] +
call sub_101492B  +
test eax eax +
jz loc_103B5BD  +
push offset aProductname  +
lea ecx [ebp+8] +
call sub_101492B  +
test eax eax +
jz loc_103B5BD  +
push offset aManufacturerna  +
lea ecx [ebp+8] +
call sub_101492B  +
test eax eax +
jz loc_103B5BD  +
push offset aDisplayname  +
lea ecx [ebp+8] +
call sub_101492B  +
test eax eax +
jz loc_103B5BD  +
push offset aCoinstallerbin  +
lea ecx [ebp+8] +
call sub_101492B  +
test eax eax +
jnz loc_103B4F3  +
mov eax [ebp+0Ch] +
mov eax [eax-0Ch] +
lea eax [eax+eax+2] +
push eax  +
lea ecx [ebp+0Ch] +
call sub_101F639  +
push eax  +
push 1  +
push 0  +
lea ecx [ebp+8] +
call sub_101F639  +
push eax  +
push dword ptr [esi+10h]  +
call ds:RegSetValueExW  +
mov esi eax +
neg esi  +
sbb esi esi +
inc esi  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp+8] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+0Ch] +
call sub_1015174  +
mov eax esi +
call sub_1021FA5  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_103B62B  +
push 80004005h  +
call loc_1014415  +
push esi  +
cmp eax [ecx] +
jnz loc_103B636  +
mov edx [eax] +
mov [ecx] edx +
jmp loc_103B63D  +
mov edx [eax+4] +
mov esi [eax] +
mov [edx] esi +
cmp eax [ecx+4] +
jnz loc_103B64A  +
mov edx [eax+4] +
mov [ecx+4] edx +
jmp loc_103B652  +
mov edx [eax] +
mov esi [eax+4] +
mov [edx+4] esi +
push eax  +
call sub_1015A47  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1021EB9  +
mov esi ecx +
mov edi [esi] +
xor ebx ebx +
mov [ebp-14h] edi +
jmp loc_103B6BE  +
lea eax [ebp-14h] +
push eax  +
mov ecx esi +
call sub_105038C  +
push eax  +
lea ecx [ebp-10h] +
call sub_10151F2  +
and dword ptr [ebp-4] 0 +
mov eax [ebp+8] +
push dword ptr [eax]  +
push dword ptr [ebp-10h]  +
call sub_10224ED  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_103B6AF  +
push edi  +
mov ecx esi +
call sub_103B615  +
xor ebx ebx +
inc ebx  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_1015174  +
mov edi [ebp-14h] +
test edi edi +
jnz loc_103B679  +
mov eax ebx +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EB9  +
mov esi ecx +
xor edi edi +
mov [ebp-4] edi +
cmp [esi+14h] edi +
jz loc_103B6FF  +
push 15h  +
pop esi  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
mov eax esi +
jmp loc_103B800  +
mov eax [ebp+8] +
cmp [eax-0Ch] edi +
jz loc_103B7F1  +
mov ecx [ebp+0Ch] +
cmp ecx 4 +
jz loc_103B721  +
cmp ecx 3 +
jz loc_103B721  +
cmp ecx 2 +
jnz loc_103B7F1  +
push esi  +
push ecx  +
push eax  +
call sub_1050014  +
mov [ebp-18h] eax +
cmp eax edi +
jz loc_103B73B  +
cmp eax 0B7h +
jz loc_103B73B  +
mov esi eax +
jmp loc_103B6EC  +
lea eax [ebp+8] +
lea ecx [esi+4] +
push eax  +
mov [ebp-10h] ecx +
call sub_1015959  +
push edi  +
push edi  +
push dword ptr [esi]  +
mov dword ptr [esi+14h] 1 +
call sub_104F67B  +
lea ebx [esi+8] +
push eax  +
mov ecx ebx +
mov [ebp+0Ch] eax +
call sub_10158A3  +
push dword ptr [ebp+0Ch]  +
push eax  +
push dword ptr [esi]  +
call sub_104F67B  +
test eax eax +
jz loc_103B790  +
push dword ptr [esi]  +
call sub_104F4B2  +
mov ecx [ebp-10h] +
mov [esi+14h] edi +
call sub_1014FC6  +
push 6Eh  +
jmp loc_103B6EB  +
push 0FFFFFFFFh  +
mov ecx ebx +
call sub_1015023  +
push edi  +
push edi  +
push dword ptr [esi]  +
call sub_104F6EC  +
lea ecx [esi+0Ch] +
push eax  +
mov [ebp+0Ch] eax +
mov [ebp-14h] ecx +
call sub_10158A3  +
push dword ptr [ebp+0Ch]  +
push eax  +
push dword ptr [esi]  +
call sub_104F6EC  +
test eax eax +
jz loc_103B7D6  +
push dword ptr [esi]  +
call sub_104F4B2  +
mov ecx [ebp-10h] +
mov [esi+14h] edi +
call sub_1014FC6  +
mov ecx ebx +
jmp loc_103B784  +
mov ecx [ebp-14h] +
push 0FFFFFFFFh  +
call sub_1015023  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
mov eax [ebp-18h] +
jmp loc_103B800  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
push 57h  +
pop eax  +
call sub_1021FA5  +
retn 8  +
***
call sub_1021EB9  +
mov esi ecx +
mov ecx [ebp+0Ch] +
xor ebx ebx +
cmp ecx ebx +
jnz loc_103B833  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_103BA16  +
mov edi [ebp+8] +
cmp edi 1 +
jz loc_103B93A  +
cmp edi 2 +
jz loc_103B93A  +
cmp edi 3 +
jnz loc_103B85B  +
add esi 4 +
push esi  +
call sub_1015AAF  +
jmp loc_103BA13  +
cmp edi 0Eh +
jnz loc_103B86A  +
cmp [esi+14h] ebx +
jz loc_103B82C  +
add esi 8 +
jmp loc_103B850  +
mov ecx esi +
call sub_103AEDF  +
test eax eax +
jz loc_103B82C  +
cmp edi 0Bh +
jnz loc_103B883  +
mov dword ptr [ebp-10h] offset aProductname +
jmp loc_103B8AB  +
cmp edi 0Ch +
jnz loc_103B891  +
mov dword ptr [ebp-10h] offset aManufacturerna +
jmp loc_103B8AB  +
cmp edi 0Dh +
jnz loc_103B89F  +
mov dword ptr [ebp-10h] offset aDisplayname +
jmp loc_103B8AB  +
cmp edi 7 +
jnz loc_103B824  +
mov dword ptr [ebp-10h] offset aCoinstallerbin +
mov edi ds:RegQueryValueExW +
lea eax [ebp+8] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push dword ptr [ebp-10h]  +
mov [ebp+8] ebx +
push dword ptr [esi+10h]  +
call edi  +
cmp eax ebx +
jnz loc_103B934  +
cmp dword ptr [ebp+8] 1 +
jbe loc_103B934  +
add dword ptr [ebp+8] 4 +
push dword ptr [ebp+8]  +
call sub_1054617  +
pop ecx  +
mov [ebp-14h] eax +
cmp eax ebx +
jz loc_103B82C  +
push dword ptr [ebp+8]  +
push ebx  +
push eax  +
call sub_10219E0  +
add esp 0Ch +
lea eax [ebp+8] +
push eax  +
push dword ptr [ebp-14h]  +
push ebx  +
push ebx  +
push dword ptr [ebp-10h]  +
push dword ptr [esi+10h]  +
call edi  +
push dword ptr [ebp-14h]  +
test eax eax +
jz loc_103B915  +
call sub_1021189  +
pop ecx  +
jmp loc_103B82C  +
mov ecx [ebp+0Ch] +
call sub_1015ACB  +
push dword ptr [ebp-14h]  +
call sub_1021189  +
xor eax eax +
cmp eax [ebp+8] +
pop ecx  +
sbb eax eax +
neg eax  +
jmp loc_103BA16  +
push eax  +
jmp loc_103B826  +
mov ecx esi +
call sub_103AEDF  +
test eax eax +
jz loc_103B82C  +
lea ecx [ebp-10h] +
call sub_10151DA  +
mov [ebp-4] ebx +
push 104h  +
lea ecx [ebp-10h] +
call sub_10158A3  +
mov ecx [ebp-10h] +
mov ecx [ecx-0Ch] +
lea ecx [ecx+ecx+2] +
mov [ebp-18h] ecx +
lea ecx [ebp-18h] +
push ecx  +
push eax  +
push ebx  +
push ebx  +
push offset aInf  +
push dword ptr [esi+10h]  +
call ds:RegQueryValueExW  +
push 0FFFFFFFFh  +
lea ecx [ebp-10h] +
mov edi eax +
call sub_1015023  +
cmp edi ebx +
jz loc_103B9A4  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_1015174  +
jmp loc_103B82C  +
mov eax [ebp-10h] +
cmp [eax-0Ch] ebx +
jnz loc_103B9BC  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_1015174  +
mov eax ebx +
jmp loc_103BA16  +
cmp dword ptr [ebp+8] 1 +
jnz loc_103B9D3  +
mov ecx [ebp+0Ch] +
lea eax [ebp-10h] +
push eax  +
call sub_1015959  +
xor ebx ebx +
inc ebx  +
jmp loc_103B9AC  +
lea ecx [ebp-14h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 1 +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-10h] +
push eax  +
add esi 8 +
push esi  +
call sub_10360F6  +
mov ecx [ebp+0Ch] +
lea eax [ebp-14h] +
push eax  +
call sub_1015959  +
mov [ebp-4] bl +
lea ecx [ebp-14h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_1015174  +
xor eax eax +
inc eax  +
call sub_1021FA5  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
xor esi esi +
push edi  +
mov ebx ecx +
cmp [ebp+arg_0] esi +
jnz loc_103BA43  +
push 57h  +
call ds:SetLastError  +
jmp loc_103BAE0  +
call sub_103AEDF  +
test eax eax +
jz loc_103BAE0  +
mov edi ds:RegQueryValueExW +
lea eax [ebp+cbData] +
push eax  +
push esi  +
push esi  +
push esi  +
push offset aProductname  +
push dword ptr [ebx+10h]  +
mov [ebp+cbData] esi +
call edi  +
cmp eax esi +
jnz loc_103BAD3  +
cmp [ebp+cbData] 1 +
jbe loc_103BAD3  +
add [ebp+cbData] 4 +
push [ebp+cbData]  +
call sub_1054617  +
pop ecx  +
mov [ebp+lpData] eax +
cmp eax esi +
jz loc_103BAE0  +
push [ebp+cbData]  +
push esi  +
push eax  +
call sub_10219E0  +
add esp 0Ch +
lea eax [ebp+cbData] +
push eax  +
push [ebp+lpData]  +
push esi  +
push esi  +
push offset aProductname  +
push dword ptr [ebx+10h]  +
call edi  +
push [ebp+lpData]  +
test eax eax +
jz loc_103BAB7  +
call sub_1021189  +
pop ecx  +
jmp loc_103BAE0  +
mov ecx [ebp+arg_0] +
call sub_1015ACB  +
push [ebp+lpData]  +
call sub_1021189  +
xor eax eax +
cmp eax [ebp+cbData] +
pop ecx  +
sbb eax eax +
neg eax  +
jmp loc_103BADC  +
push eax  +
call ds:SetLastError  +
xor eax eax +
cmp eax esi +
jnz loc_103BAE7  +
xor eax eax +
jmp loc_103BC2E  +
cmp [ebp+arg_4] esi +
jz loc_103BA36  +
mov ecx ebx +
call sub_103AEDF  +
test eax eax +
jz loc_103BAE0  +
lea eax [ebp+arg_0] +
push eax  +
push esi  +
push esi  +
push esi  +
push offset aManufacturerna  +
push dword ptr [ebx+10h]  +
mov [ebp+arg_0] esi +
call edi  +
cmp eax esi +
jnz loc_103BB74  +
cmp [ebp+arg_0] 1 +
jbe loc_103BB74  +
add [ebp+arg_0] 4 +
push [ebp+arg_0]  +
call sub_1054617  +
pop ecx  +
mov [ebp+lpData] eax +
cmp eax esi +
jz loc_103BAE0  +
push [ebp+arg_0]  +
push esi  +
push eax  +
call sub_10219E0  +
add esp 0Ch +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+lpData]  +
push esi  +
push esi  +
push offset aManufacturerna  +
push dword ptr [ebx+10h]  +
call edi  +
push [ebp+lpData]  +
test eax eax +
jnz loc_103BAAF  +
mov ecx [ebp+arg_4] +
call sub_1015ACB  +
push [ebp+lpData]  +
call sub_1021189  +
xor eax eax +
cmp eax [ebp+arg_0] +
pop ecx  +
sbb eax eax +
neg eax  +
jmp loc_103BB7D  +
push eax  +
call ds:SetLastError  +
xor eax eax +
cmp eax esi +
jz loc_103BAE0  +
cmp [ebp+arg_8] esi +
jz loc_103BA36  +
mov ecx ebx +
call sub_103AEDF  +
test eax eax +
jz loc_103BAE0  +
lea eax [ebp+arg_0] +
push eax  +
push esi  +
push esi  +
push esi  +
push offset aDisplayname  +
push dword ptr [ebx+10h]  +
mov [ebp+arg_0] esi +
call edi  +
cmp eax esi +
jnz loc_103BC1A  +
cmp [ebp+arg_0] 1 +
jbe loc_103BC1A  +
add [ebp+arg_0] 4 +
push [ebp+arg_0]  +
call sub_1054617  +
pop ecx  +
mov [ebp+arg_4] eax +
cmp eax esi +
jz loc_103BAE0  +
push [ebp+arg_0]  +
push esi  +
push eax  +
call sub_10219E0  +
add esp 0Ch +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+arg_4]  +
push esi  +
push esi  +
push offset aDisplayname  +
push dword ptr [ebx+10h]  +
call edi  +
push [ebp+arg_4]  +
test eax eax +
jnz loc_103BAAF  +
mov ecx [ebp+arg_8] +
call sub_1015ACB  +
push [ebp+arg_4]  +
call sub_1021189  +
xor eax eax +
cmp eax [ebp+arg_0] +
pop ecx  +
sbb eax eax +
neg eax  +
jmp loc_103BC23  +
push eax  +
call ds:SetLastError  +
xor eax eax +
cmp eax esi +
jz loc_103BAE0  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
call sub_1021EB9  +
mov esi ecx +
xor ebx ebx +
mov [ebp-4] ebx +
mov eax [ebp+8] +
dec eax  +
jz loc_103BD25  +
sub eax 6 +
jz loc_103BCFC  +
sub eax 4 +
jz loc_103BCD3  +
dec eax  +
jz loc_103BCAA  +
dec eax  +
jz loc_103BC7E  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+0Ch] +
call sub_1015174  +
xor eax eax +
jmp loc_103BD66  +
push ecx  +
lea eax [ebp+0Ch] +
mov ecx esp +
mov [ebp+8] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 7 +
push ecx  +
mov ecx esp +
mov [ebp-10h] esp +
push offset aDisplayname  +
call sub_10161A7  +
mov byte ptr [ebp-4] 8 +
jmp loc_103BD4C  +
push ecx  +
lea eax [ebp+0Ch] +
mov ecx esp +
mov [ebp+8] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 5 +
push ecx  +
mov ecx esp +
mov [ebp-10h] esp +
push offset aManufacturerna  +
call sub_10161A7  +
mov byte ptr [ebp-4] 6 +
jmp loc_103BD4C  +
push ecx  +
lea eax [ebp+0Ch] +
mov ecx esp +
mov [ebp+8] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 3 +
push ecx  +
mov ecx esp +
mov [ebp-10h] esp +
push offset aProductname  +
call sub_10161A7  +
mov byte ptr [ebp-4] 4 +
jmp loc_103BD4C  +
push ecx  +
lea eax [ebp+0Ch] +
mov ecx esp +
mov [ebp+8] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 9 +
push ecx  +
mov ecx esp +
mov [ebp-10h] esp +
push offset aCoinstallerbin  +
call sub_10161A7  +
mov byte ptr [ebp-4] 0Ah +
jmp loc_103BD4C  +
push ecx  +
lea eax [ebp+0Ch] +
mov ecx esp +
mov [ebp+8] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 1 +
push ecx  +
mov ecx esp +
mov [ebp-10h] esp +
push offset aInf  +
call sub_10161A7  +
mov byte ptr [ebp-4] 2 +
mov [ebp-4] bl +
mov ecx esi +
call sub_103B4D5  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+0Ch] +
call sub_1015174  +
mov eax esi +
call sub_1021FA5  +
retn 8  +
***
call sub_1021EB9  +
mov esi ecx +
cmp dword ptr [ebp+8] 0 +
jz loc_103BD8B  +
xor eax eax +
jmp loc_103BDAD  +
push dword ptr [ebp+0Ch]  +
push ecx  +
mov ecx esp +
mov [ebp+8] esp +
push offset aType  +
call sub_10161A7  +
and dword ptr [ebp-4] 0 +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_103B0A5  +
call sub_1021FA5  +
retn 8  +
***
call sub_1021EB9  +
mov esi ecx +
mov eax [ebp+8] +
sub eax 4 +
jz loc_103BE33  +
sub eax 4 +
jz loc_103BE17  +
dec eax  +
jz loc_103BDFB  +
dec eax  +
jz loc_103BDDF  +
xor eax eax +
jmp loc_103BE55  +
push dword ptr [ebp+0Ch]  +
push ecx  +
mov ecx esp +
mov [ebp+0Ch] esp +
push offset aDependentinsta  +
call sub_10161A7  +
mov dword ptr [ebp-4] 2 +
jmp loc_103BE4A  +
push dword ptr [ebp+0Ch]  +
push ecx  +
mov ecx esp +
mov [ebp+0Ch] esp +
push offset aDependentins_0  +
call sub_10161A7  +
mov dword ptr [ebp-4] 1 +
jmp loc_103BE4A  +
push dword ptr [ebp+0Ch]  +
push ecx  +
mov ecx esp +
mov [ebp+0Ch] esp +
push offset aHardwareandcom  +
call sub_10161A7  +
mov dword ptr [ebp-4] 3 +
jmp loc_103BE4A  +
push dword ptr [ebp+0Ch]  +
push ecx  +
mov ecx esp +
mov [ebp+0Ch] esp +
push offset aServices  +
call sub_10161A7  +
and dword ptr [ebp-4] 0 +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_103B130  +
call sub_1021FA5  +
retn 8  +
***
call sub_1021EB9  +
mov edi ecx +
mov dword ptr [ebp-4] 2 +
lea ecx [ebp-10h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 3 +
mov eax [ebp+8] +
mov eax [eax-0Ch] +
xor ebx ebx +
cmp eax ebx +
jnz loc_103BE9E  +
push offset aUnknownproduct  +
lea ecx [ebp+8] +
call sub_10158CD  +
mov eax [ebp+0Ch] +
cmp [eax-0Ch] ebx +
jnz loc_103BEB3  +
push offset aUnknownmanufac  +
lea ecx [ebp+0Ch] +
call sub_10158CD  +
mov eax [ebp+10h] +
cmp [eax-0Ch] ebx +
jnz loc_103BEC8  +
push offset aUnknowndisplay  +
lea ecx [ebp+10h] +
call sub_10158CD  +
mov esi ds:RegQueryValueExW +
lea eax [ebp-10h] +
test eax eax +
jnz loc_103BEE2  +
push 57h  +
call ds:SetLastError  +
jmp loc_103BF7B  +
mov ecx edi +
call sub_103AEDF  +
test eax eax +
jz loc_103BF7B  +
lea eax [ebp-14h] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push offset aProductname  +
push dword ptr [edi+10h]  +
mov [ebp-14h] ebx +
call esi  +
cmp eax ebx +
jnz loc_103BF6E  +
cmp dword ptr [ebp-14h] 1 +
jbe loc_103BF6E  +
add dword ptr [ebp-14h] 4 +
push dword ptr [ebp-14h]  +
call sub_1054617  +
pop ecx  +
mov [ebp-18h] eax +
cmp eax ebx +
jz loc_103BF7B  +
push dword ptr [ebp-14h]  +
push ebx  +
push eax  +
call sub_10219E0  +
add esp 0Ch +
lea eax [ebp-14h] +
push eax  +
push dword ptr [ebp-18h]  +
push ebx  +
push ebx  +
push offset aProductname  +
push dword ptr [edi+10h]  +
call esi  +
push dword ptr [ebp-18h]  +
test eax eax +
jz loc_103BF52  +
call sub_1021189  +
pop ecx  +
jmp loc_103BF7B  +
lea ecx [ebp-10h] +
call sub_1015ACB  +
push dword ptr [ebp-18h]  +
call sub_1021189  +
xor eax eax +
cmp eax [ebp-14h] +
pop ecx  +
sbb eax eax +
neg eax  +
jmp loc_103BF77  +
push eax  +
call ds:SetLastError  +
xor eax eax +
cmp eax ebx +
jnz loc_103BFF5  +
call ds:GetLastError  +
cmp eax 2 +
jnz loc_103BFBC  +
push ecx  +
lea eax [ebp+8] +
mov ecx esp +
mov [ebp-18h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 6 +
push ecx  +
mov ecx esp +
mov [ebp-14h] esp +
push offset aProductname  +
call sub_10161A7  +
mov byte ptr [ebp-4] 7 +
mov byte ptr [ebp-4] 3 +
mov ecx edi +
call sub_103B4D5  +
cmp eax ebx +
jnz loc_103BFF5  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-10h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp+8] +
call sub_1015174  +
mov [ebp-4] bl +
lea ecx [ebp+0Ch] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+10h] +
call sub_1015174  +
xor eax eax +
call sub_1021FA5  +
retn 0Ch  +
lea eax [ebp-10h] +
test eax eax +
jnz loc_103C009  +
push 57h  +
call ds:SetLastError  +
jmp loc_103C0A2  +
mov ecx edi +
call sub_103AEDF  +
test eax eax +
jz loc_103C0A2  +
lea eax [ebp-14h] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push offset aManufacturerna  +
push dword ptr [edi+10h]  +
mov [ebp-14h] ebx +
call esi  +
cmp eax ebx +
jnz loc_103C095  +
cmp dword ptr [ebp-14h] 1 +
jbe loc_103C095  +
add dword ptr [ebp-14h] 4 +
push dword ptr [ebp-14h]  +
call sub_1054617  +
pop ecx  +
mov [ebp-18h] eax +
cmp eax ebx +
jz loc_103C0A2  +
push dword ptr [ebp-14h]  +
push ebx  +
push eax  +
call sub_10219E0  +
add esp 0Ch +
lea eax [ebp-14h] +
push eax  +
push dword ptr [ebp-18h]  +
push ebx  +
push ebx  +
push offset aManufacturerna  +
push dword ptr [edi+10h]  +
call esi  +
push dword ptr [ebp-18h]  +
test eax eax +
jz loc_103C079  +
call sub_1021189  +
pop ecx  +
jmp loc_103C0A2  +
lea ecx [ebp-10h] +
call sub_1015ACB  +
push dword ptr [ebp-18h]  +
call sub_1021189  +
xor eax eax +
cmp eax [ebp-14h] +
pop ecx  +
sbb eax eax +
neg eax  +
jmp loc_103C09E  +
push eax  +
call ds:SetLastError  +
xor eax eax +
cmp eax ebx +
jnz loc_103C0EB  +
call ds:GetLastError  +
cmp eax 2 +
jnz loc_103BFBC  +
push ecx  +
lea eax [ebp+0Ch] +
mov ecx esp +
mov [ebp-18h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 0Ah +
push ecx  +
mov ecx esp +
mov [ebp-14h] esp +
push offset aManufacturerna  +
call sub_10161A7  +
mov byte ptr [ebp-4] 0Bh +
mov byte ptr [ebp-4] 3 +
mov ecx edi +
call sub_103B4D5  +
cmp eax ebx +
jz loc_103BFBC  +
lea eax [ebp-10h] +
test eax eax +
jnz loc_103C0FF  +
push 57h  +
call ds:SetLastError  +
jmp loc_103C198  +
mov ecx edi +
call sub_103AEDF  +
test eax eax +
jz loc_103C198  +
lea eax [ebp-14h] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push offset aDisplayname  +
push dword ptr [edi+10h]  +
mov [ebp-14h] ebx +
call esi  +
cmp eax ebx +
jnz loc_103C18B  +
cmp dword ptr [ebp-14h] 1 +
jbe loc_103C18B  +
add dword ptr [ebp-14h] 4 +
push dword ptr [ebp-14h]  +
call sub_1054617  +
pop ecx  +
mov [ebp-18h] eax +
cmp eax ebx +
jz loc_103C198  +
push dword ptr [ebp-14h]  +
push ebx  +
push eax  +
call sub_10219E0  +
add esp 0Ch +
lea eax [ebp-14h] +
push eax  +
push dword ptr [ebp-18h]  +
push ebx  +
push ebx  +
push offset aDisplayname  +
push dword ptr [edi+10h]  +
call esi  +
push dword ptr [ebp-18h]  +
test eax eax +
jz loc_103C16F  +
call sub_1021189  +
pop ecx  +
jmp loc_103C198  +
lea ecx [ebp-10h] +
call sub_1015ACB  +
push dword ptr [ebp-18h]  +
call sub_1021189  +
xor eax eax +
cmp eax [ebp-14h] +
pop ecx  +
sbb eax eax +
neg eax  +
jmp loc_103C194  +
push eax  +
call ds:SetLastError  +
xor eax eax +
cmp eax ebx +
jnz loc_103C1DD  +
call ds:GetLastError  +
cmp eax 2 +
jnz loc_103C1E2  +
push ecx  +
lea eax [ebp+10h] +
mov ecx esp +
mov [ebp-18h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 0Eh +
push ecx  +
mov ecx esp +
mov [ebp-14h] esp +
push offset aDisplayname  +
call sub_10161A7  +
mov byte ptr [ebp-4] 0Fh +
mov byte ptr [ebp-4] 3 +
mov ecx edi +
call sub_103B4D5  +
cmp eax ebx +
jz loc_103BFBC  +
xor esi esi +
inc esi  +
jmp loc_103C1E4  +
xor esi esi +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-10h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp+8] +
call sub_1015174  +
mov [ebp-4] bl +
lea ecx [ebp+0Ch] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+10h] +
call sub_1015174  +
mov eax esi +
jmp loc_103BFED  +
***
call sub_1021EB9  +
mov dword ptr [ebp-4] 1 +
xor edi edi +
lea ecx [ebp-14h] +
mov [ebp-10h] edi +
call sub_10151DA  +
mov byte ptr [ebp-4] 2 +
push offset aSoftwareMicr_0  +
lea ecx [ebp-18h] +
mov [ebp-20h] edi +
call sub_10161A7  +
mov byte ptr [ebp-4] 3 +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp+8] +
push eax  +
lea eax [ebp-18h] +
push eax  +
call sub_10360F6  +
mov bl al +
neg bl  +
sbb bl bl +
inc bl  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-18h] +
call sub_1015174  +
test bl bl +
jz loc_103C28A  +
mov esi 65Bh +
jmp loc_103C30B  +
push edi  +
lea eax [ebp-10h] +
push eax  +
push edi  +
push 2001Fh  +
push edi  +
push edi  +
push edi  +
push dword ptr [ebp-14h]  +
push 80000002h  +
call ds:RegCreateKeyExW  +
mov esi eax +
cmp esi edi +
jnz loc_103C30B  +
mov ecx [ebp+10h] +
cmp [ecx+8] edi +
jbe loc_103C2E9  +
lea eax [ebp-1Ch] +
push eax  +
call sub_1035D59  +
mov ebx eax +
cmp ebx edi +
jnz loc_103C2C8  +
push 8  +
pop esi  +
jmp loc_103C300  +
mov eax [ebp-1Ch] +
add eax eax +
push eax  +
push ebx  +
push 7  +
push edi  +
push dword ptr [ebp+0Ch]  +
mov [ebp-1Ch] eax +
push dword ptr [ebp-10h]  +
call ds:RegSetValueExW  +
mov esi eax +
cmp esi edi +
jnz loc_103C300  +
jmp loc_103C2FE  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp-10h]  +
call ds:RegDeleteValueW  +
mov esi eax +
cmp esi edi +
jnz loc_103C30B  +
mov ebx [ebp-20h] +
xor esi esi +
cmp ebx edi +
jz loc_103C30B  +
push ebx  +
call sub_1021189  +
pop ecx  +
cmp [ebp-10h] edi +
jz loc_103C319  +
push dword ptr [ebp-10h]  +
call ds:RegCloseKey  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-14h] +
call sub_1015174  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp+8] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+0Ch] +
call sub_1015174  +
mov eax esi +
call sub_1021FA5  +
retn 0Ch  +
***
call sub_1021EB9  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-18h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-14h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-10h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-24h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-20h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 5 +
lea eax [ebp-24h] +
push eax  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp+8] +
push eax  +
call sub_1036032  +
test al al +
jz loc_103C418  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-10h] +
push eax  +
call sub_1036032  +
test al al +
jz loc_103C418  +
push offset aSoftwareMicr_0  +
lea ecx [ebp-1Ch] +
call sub_10161A7  +
mov byte ptr [ebp-4] 6 +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
call sub_10360F6  +
mov bl al +
neg bl  +
sbb bl bl +
inc bl  +
mov byte ptr [ebp-4] 5 +
lea ecx [ebp-1Ch] +
call sub_1015174  +
test bl bl +
jnz loc_103C418  +
lea ecx [ebp-14h] +
call sub_1015002  +
push eax  +
push 80000002h  +
call ds:RegDeleteKeyW  +
mov esi eax +
test esi esi +
jnz loc_103C41D  +
jmp loc_103C41D  +
mov esi 65Bh +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-20h] +
call sub_1015174  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-24h] +
call sub_1015174  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-10h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-14h] +
call sub_1015174  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-18h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
mov eax esi +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EB9  +
mov ebx ecx +
mov esi [ebp+8] +
jmp loc_103C4B9  +
push ecx  +
mov ecx esp +
mov [ebp+8] esp +
push esi  +
call sub_10161A7  +
and dword ptr [ebp-4] 0 +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx ebx +
call sub_10378C2  +
test eax eax +
jnz loc_103C4AE  +
push esi  +
mov ecx ebx +
call sub_10172FC  +
push esi  +
call ds:lstrlenW  +
lea esi [esi+eax*2+2] +
cmp word ptr [esi] 0 +
jnz loc_103C487  +
call sub_1021FA5  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
xor ebx ebx +
mov esi ecx +
push edi  +
mov [ebp+var_8] esi +
cmp [ebp+arg_4] ebx +
jnz loc_103C4F3  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
mov eax [ebp+cbData] +
cmp eax 4 +
jnz loc_103C504  +
mov [ebp+lpValueName] offset aServices +
jmp loc_103C52C  +
cmp eax 9 +
jnz loc_103C512  +
mov [ebp+lpValueName] offset aDependentins_0 +
jmp loc_103C52C  +
cmp eax 0Ah +
jnz loc_103C520  +
mov [ebp+lpValueName] offset aDependentinsta +
jmp loc_103C52C  +
cmp eax 8 +
jnz loc_103C4EA  +
mov [ebp+lpValueName] offset aHardwareandcom +
call sub_103AEDF  +
test eax eax +
jz loc_103C4EA  +
lea eax [ebp+cbData] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+lpValueName]  +
mov [ebp+cbData] ebx +
push dword ptr [esi+10h]  +
mov esi ds:RegQueryValueExW +
call esi  +
test eax eax +
jnz loc_103C4EA  +
cmp [ebp+cbData] 1 +
jbe loc_103C4EA  +
add [ebp+cbData] 4 +
push [ebp+cbData]  +
call sub_1054617  +
mov edi eax +
pop ecx  +
cmp edi ebx +
jz loc_103C4EA  +
push [ebp+cbData]  +
push ebx  +
push edi  +
call sub_10219E0  +
add esp 0Ch +
lea eax [ebp+cbData] +
push eax  +
mov eax [ebp+var_8] +
push edi  +
push ebx  +
push ebx  +
push [ebp+lpValueName]  +
push dword ptr [eax+10h]  +
call esi  +
push edi  +
test eax eax +
jz loc_103C599  +
call sub_1021189  +
pop ecx  +
jmp loc_103C4EA  +
mov esi [ebp+arg_4] +
mov ecx esi +
call sub_103C474  +
push edi  +
call sub_1021189  +
xor eax eax +
cmp [esi+8] ebx +
pop ecx  +
setnz al  +
jmp loc_103C4EC  +
***
call sub_1021EB9  +
mov esi ecx +
mov dword ptr [ebp-4] 1 +
mov eax [ebp+8] +
mov eax [eax-0Ch] +
test eax eax +
jz loc_103C702  +
lea ecx [ebp-28h] +
call sub_1014C71  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-40h] +
call sub_1014C71  +
mov byte ptr [ebp-4] 3 +
mov eax [ebp+0Ch] +
cmp dword ptr [eax-0Ch] 0 +
jnz loc_103C60D  +
push offset aUnknowndisplay  +
lea ecx [ebp+0Ch] +
call sub_10158CD  +
lea eax [ebp-28h] +
push eax  +
push 9  +
mov ecx esi +
call sub_103C4CC  +
lea eax [ebp-40h] +
push eax  +
push 0Ah  +
mov ecx esi +
call sub_103C4CC  +
push ecx  +
lea eax [ebp+8] +
mov ecx esp +
mov [ebp-10h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 4 +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-28h] +
call sub_10378C2  +
test eax eax +
jnz loc_103C6EA  +
push dword ptr [ebp+8]  +
lea ecx [ebp-28h] +
call sub_10172FC  +
lea eax [ebp-28h] +
push eax  +
push ecx  +
mov ecx esp +
mov [ebp-10h] esp +
push offset aDependentins_0  +
call sub_10161A7  +
mov byte ptr [ebp-4] 5 +
mov byte ptr [ebp-4] 3 +
mov ecx esi +
call sub_103B130  +
test eax eax +
jnz loc_103C6BC  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-40h] +
call sub_1014FBC  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-28h] +
call sub_1014FBC  +
xor esi esi +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp+8] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+0Ch] +
call sub_1015174  +
mov eax esi +
call sub_1021FA5  +
retn 8  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-40h] +
call sub_10172FC  +
lea eax [ebp-40h] +
push eax  +
push ecx  +
mov ecx esp +
mov [ebp-10h] esp +
push offset aDependentinsta  +
call sub_10161A7  +
mov byte ptr [ebp-4] 6 +
mov byte ptr [ebp-4] 3 +
mov ecx esi +
call sub_103B130  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-40h] +
call sub_1014FBC  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-28h] +
call sub_1014FBC  +
xor esi esi +
inc esi  +
jmp loc_103C69A  +
***
call sub_1021EB9  +
mov esi ecx +
mov dword ptr [ebp-4] 1 +
lea ecx [ebp-28h] +
call sub_1014C71  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-40h] +
call sub_1014C71  +
mov byte ptr [ebp-4] 3 +
mov eax [ebp+8] +
mov eax [eax-0Ch] +
test eax eax +
jnz loc_103C77D  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-40h] +
call sub_1014FBC  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-28h] +
call sub_1014FBC  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp+8] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+0Ch] +
call sub_1015174  +
xor eax eax +
call sub_1021FA5  +
retn 8  +
mov eax [ebp+0Ch] +
cmp dword ptr [eax-0Ch] 0 +
jnz loc_103C793  +
push offset aUnknowndisplay  +
lea ecx [ebp+0Ch] +
call sub_10158CD  +
lea eax [ebp-28h] +
push eax  +
push 9  +
mov ecx esi +
call sub_103C4CC  +
cmp dword ptr [ebp-20h] 0 +
jz loc_103C879  +
push ecx  +
lea eax [ebp+8] +
mov ecx esp +
mov [ebp-10h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 4 +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-28h] +
call sub_10378C2  +
test eax eax +
jz loc_103C879  +
lea eax [ebp+8] +
push eax  +
lea ecx [ebp-28h] +
call sub_103B662  +
lea eax [ebp-28h] +
push eax  +
push ecx  +
mov ecx esp +
mov [ebp-10h] esp +
push offset aDependentins_0  +
call sub_10161A7  +
mov byte ptr [ebp-4] 5 +
mov byte ptr [ebp-4] 3 +
mov ecx esi +
call sub_103B130  +
test eax eax +
jnz loc_103C83D  +
xor esi esi +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-40h] +
call sub_1014FBC  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-28h] +
call sub_1014FBC  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp+8] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+0Ch] +
call sub_1015174  +
mov eax esi +
jmp loc_103C775  +
lea eax [ebp-40h] +
push eax  +
push 0Ah  +
mov ecx esi +
call sub_103C4CC  +
lea eax [ebp+0Ch] +
push eax  +
lea ecx [ebp-40h] +
call sub_103B662  +
lea eax [ebp-40h] +
push eax  +
push ecx  +
mov ecx esp +
mov [ebp-10h] esp +
push offset aDependentinsta  +
call sub_10161A7  +
mov byte ptr [ebp-4] 6 +
mov byte ptr [ebp-4] 3 +
mov ecx esi +
call sub_103B130  +
xor esi esi +
inc esi  +
jmp loc_103C806  +
***
call sub_1021EB9  +
mov dword ptr [ebp-4] 1 +
xor edi edi +
lea ecx [ebp-1Ch] +
mov [ebp-18h] edi +
call sub_10151DA  +
mov byte ptr [ebp-4] 2 +
push offset aSoftwareMicr_0  +
lea ecx [ebp-10h] +
call sub_10161A7  +
mov byte ptr [ebp-4] 3 +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp+8] +
push eax  +
lea eax [ebp-10h] +
push eax  +
call sub_10360F6  +
mov bl al +
neg bl  +
sbb bl bl +
inc bl  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-10h] +
call sub_1015174  +
test bl bl +
jz loc_103C8ED  +
mov dword ptr [ebp-10h] 65Bh +
jmp loc_103C99F  +
push edi  +
lea eax [ebp-18h] +
push eax  +
push edi  +
push 2001Fh  +
push edi  +
push edi  +
push edi  +
push dword ptr [ebp-1Ch]  +
push 80000002h  +
call ds:RegCreateKeyExW  +
mov [ebp-10h] eax +
cmp eax edi +
jnz loc_103C99F  +
mov ebx ds:RegQueryValueExW +
lea eax [ebp-14h] +
push eax  +
push edi  +
push edi  +
push edi  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp-18h]  +
call ebx  +
mov [ebp-10h] eax +
cmp eax edi +
jz loc_103C93E  +
cmp eax 2 +
jnz loc_103C99F  +
mov dword ptr [ebp-10h] 490h +
jmp loc_103C99F  +
add dword ptr [ebp-14h] 4 +
push dword ptr [ebp-14h]  +
push 40h  +
call ds:LocalAlloc  +
mov esi eax +
cmp esi edi +
jnz loc_103C95C  +
mov dword ptr [ebp-10h] 8 +
jmp loc_103C994  +
lea eax [ebp-14h] +
push eax  +
push esi  +
push edi  +
push edi  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp-18h]  +
call ebx  +
mov [ebp-10h] eax +
cmp eax edi +
jnz loc_103C994  +
mov eax [ebp-14h] +
shr eax 1 +
xor ecx ecx +
mov [esi+eax*2-4] cx +
mov eax [ebp-14h] +
shr eax 1 +
mov [esi+eax*2-2] cx +
mov ecx [ebp+10h] +
push esi  +
call sub_103C474  +
mov [ebp-10h] edi +
cmp esi edi +
jz loc_103C99F  +
push esi  +
call ds:LocalFree  +
cmp [ebp-18h] edi +
jz loc_103C9AD  +
push dword ptr [ebp-18h]  +
call ds:RegCloseKey  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-1Ch] +
call sub_1015174  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp+8] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+0Ch] +
call sub_1015174  +
mov eax [ebp-10h] +
call sub_1021FA5  +
retn 0Ch  +
***
call sub_1021EB9  +
mov dword ptr [ebp-4] 2 +
lea ecx [ebp-14h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-1Ch] +
call sub_10151DA  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-18h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 5 +
lea ecx [ebp-10h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 6 +
lea ecx [ebp-38h] +
call sub_1014C71  +
mov byte ptr [ebp-4] 7 +
lea ecx [ebp-50h] +
call sub_1014C71  +
mov byte ptr [ebp-4] 8 +
mov ebx [ebp+14h] +
and dword ptr [ebx] 0 +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp+8] +
push eax  +
call sub_1036032  +
test al al +
jz loc_103CBB1  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
call sub_1036032  +
test al al +
jz loc_103CBB1  +
lea eax [ebp-38h] +
push eax  +
push ecx  +
mov ecx esp +
mov [ebp+14h] esp +
mov edi offset aDependentins_0 +
push edi  +
call sub_10161A7  +
mov byte ptr [ebp-4] 9 +
push ecx  +
lea eax [ebp-10h] +
mov ecx esp +
mov [ebp-20h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 0Ah +
mov byte ptr [ebp-4] 8 +
call sub_103C883  +
mov esi eax +
test esi esi +
jz loc_103CABB  +
cmp esi 490h +
jnz loc_103CBB6  +
push ecx  +
lea eax [ebp+0Ch] +
mov ecx esp +
mov [ebp+14h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 0Bh +
mov byte ptr [ebp-4] 8 +
lea ecx [ebp-38h] +
call sub_10378C2  +
test eax eax +
jnz loc_103CB25  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-38h] +
call sub_10172FC  +
lea eax [ebp-38h] +
push eax  +
push ecx  +
mov ecx esp +
mov [ebp+14h] esp +
push edi  +
call sub_10161A7  +
mov byte ptr [ebp-4] 0Ch +
push ecx  +
lea eax [ebp-10h] +
mov ecx esp +
mov [ebp-20h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 0Dh +
mov byte ptr [ebp-4] 8 +
call sub_103C21F  +
mov esi eax +
test esi esi +
jnz loc_103CBB6  +
jmp loc_103CB2B  +
mov dword ptr [ebx] 1 +
cmp dword ptr [ebx] 0 +
jnz loc_103CB70  +
lea eax [ebp-50h] +
push eax  +
push ecx  +
mov ecx esp +
mov [ebp+14h] esp +
mov esi offset aDependentinsta +
push esi  +
call sub_10161A7  +
mov byte ptr [ebp-4] 0Eh +
push ecx  +
lea eax [ebp-10h] +
mov ecx esp +
mov [ebp-20h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 0Fh +
mov byte ptr [ebp-4] 8 +
call sub_103C883  +
test eax eax +
jz loc_103CB74  +
cmp eax 490h +
jz loc_103CB74  +
xor esi esi +
jmp loc_103CBB6  +
push dword ptr [ebp+10h]  +
lea ecx [ebp-50h] +
call sub_10172FC  +
lea eax [ebp-50h] +
push eax  +
push ecx  +
mov ecx esp +
mov [ebp+14h] esp +
push esi  +
call sub_10161A7  +
mov byte ptr [ebp-4] 10h +
push ecx  +
lea eax [ebp-10h] +
mov ecx esp +
mov [ebp-20h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 11h +
mov byte ptr [ebp-4] 8 +
call sub_103C21F  +
jmp loc_103CB70  +
mov esi 65Bh +
mov byte ptr [ebp-4] 7 +
lea ecx [ebp-50h] +
call sub_1014FBC  +
mov byte ptr [ebp-4] 6 +
lea ecx [ebp-38h] +
call sub_1014FBC  +
mov byte ptr [ebp-4] 5 +
lea ecx [ebp-10h] +
call sub_1015174  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-18h] +
call sub_1015174  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-1Ch] +
call sub_1015174  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-14h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp+8] +
call sub_1015174  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp+0Ch] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+10h] +
call sub_1015174  +
mov eax esi +
call sub_1021FA5  +
retn 10h  +
***
call sub_1021EB9  +
mov dword ptr [ebp-4] 2 +
lea ecx [ebp-14h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-1Ch] +
call sub_10151DA  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-18h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 5 +
lea ecx [ebp-10h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 6 +
lea ecx [ebp-38h] +
call sub_1014C71  +
mov byte ptr [ebp-4] 7 +
lea ecx [ebp-50h] +
call sub_1014C71  +
mov byte ptr [ebp-4] 8 +
mov esi [ebp+14h] +
and dword ptr [esi] 0 +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp+8] +
push eax  +
call sub_1036032  +
test al al +
jz loc_103CE06  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
call sub_1036032  +
test al al +
jz loc_103CE06  +
lea eax [ebp-38h] +
push eax  +
push ecx  +
mov ecx esp +
mov [ebp+14h] esp +
mov ebx offset aDependentins_0 +
push ebx  +
call sub_10161A7  +
mov byte ptr [ebp-4] 9 +
push ecx  +
lea eax [ebp-10h] +
mov ecx esp +
mov [ebp-20h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 0Ah +
mov byte ptr [ebp-4] 8 +
call sub_103C883  +
mov edi eax +
test edi edi +
jz loc_103CD18  +
cmp edi 490h +
jnz loc_103CE0B  +
mov dword ptr [esi] 1 +
xor edi edi +
jmp loc_103CE0B  +
push ecx  +
lea eax [ebp+0Ch] +
mov ecx esp +
mov [ebp+14h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 0Bh +
mov byte ptr [ebp-4] 8 +
lea ecx [ebp-38h] +
call sub_10378C2  +
test eax eax +
jz loc_103CD83  +
lea eax [ebp+0Ch] +
push eax  +
lea ecx [ebp-38h] +
call sub_103B662  +
lea eax [ebp-38h] +
push eax  +
push ecx  +
mov ecx esp +
mov [ebp+14h] esp +
push ebx  +
call sub_10161A7  +
mov byte ptr [ebp-4] 0Ch +
push ecx  +
lea eax [ebp-10h] +
mov ecx esp +
mov [ebp-20h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 0Dh +
mov byte ptr [ebp-4] 8 +
call sub_103C21F  +
mov edi eax +
test edi edi +
jnz loc_103CE0B  +
jmp loc_103CD89  +
mov dword ptr [esi] 1 +
xor edi edi +
cmp [esi] edi +
jnz loc_103CE0B  +
lea eax [ebp-50h] +
push eax  +
push ecx  +
mov ecx esp +
mov [ebp+14h] esp +
mov esi offset aDependentinsta +
push esi  +
call sub_10161A7  +
mov byte ptr [ebp-4] 0Eh +
push ecx  +
lea eax [ebp-10h] +
mov ecx esp +
mov [ebp-20h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 0Fh +
mov byte ptr [ebp-4] 8 +
call sub_103C883  +
cmp eax edi +
jnz loc_103CE0B  +
lea eax [ebp+10h] +
push eax  +
lea ecx [ebp-50h] +
call sub_103B662  +
lea eax [ebp-50h] +
push eax  +
push ecx  +
mov ecx esp +
mov [ebp+14h] esp +
push esi  +
call sub_10161A7  +
mov byte ptr [ebp-4] 10h +
push ecx  +
lea eax [ebp-10h] +
mov ecx esp +
mov [ebp-20h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 11h +
mov byte ptr [ebp-4] 8 +
call sub_103C21F  +
jmp loc_103CE0B  +
mov edi 65Bh +
mov byte ptr [ebp-4] 7 +
lea ecx [ebp-50h] +
call sub_1014FBC  +
mov byte ptr [ebp-4] 6 +
lea ecx [ebp-38h] +
call sub_1014FBC  +
mov byte ptr [ebp-4] 5 +
lea ecx [ebp-10h] +
call sub_1015174  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-18h] +
call sub_1015174  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-1Ch] +
call sub_1015174  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-14h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp+8] +
call sub_1015174  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp+0Ch] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+10h] +
call sub_1015174  +
mov eax edi +
call sub_1021FA5  +
retn 10h  +
***
call sub_1021EB9  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-14h] +
call sub_10151DA  +
xor ebx ebx +
inc ebx  +
mov [ebp-4] bl +
lea ecx [ebp-1Ch] +
call sub_10151DA  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-18h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-10h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-38h] +
call sub_1014C71  +
mov byte ptr [ebp-4] 5 +
mov esi [ebp+0Ch] +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp+8] +
push eax  +
mov [esi] ebx +
call sub_1036032  +
test al al +
jz loc_103CF5B  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
call sub_1036032  +
test al al +
jz loc_103CF5B  +
lea eax [ebp-38h] +
push eax  +
push ecx  +
mov ecx esp +
mov [ebp+0Ch] esp +
push offset aDependentins_0  +
call sub_10161A7  +
mov byte ptr [ebp-4] 6 +
push ecx  +
lea eax [ebp-10h] +
mov ecx esp +
mov [ebp-20h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 7 +
mov byte ptr [ebp-4] 5 +
call sub_103C883  +
mov edi eax +
mov eax 490h +
test edi edi +
jz loc_103CF46  +
cmp edi eax +
jnz loc_103CF60  +
cmp edi eax +
jz loc_103CF54  +
cmp dword ptr [ebp-30h] 0 +
jz loc_103CF54  +
mov [esi] ebx +
jmp loc_103CF57  +
and dword ptr [esi] 0 +
xor edi edi +
jmp loc_103CF60  +
mov edi 65Bh +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-38h] +
call sub_1014FBC  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-10h] +
call sub_1015174  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-18h] +
call sub_1015174  +
mov [ebp-4] bl +
lea ecx [ebp-1Ch] +
call sub_1015174  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-14h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
mov eax edi +
call sub_1021FA5  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
test ecx ecx +
jnz loc_103CFCC  +
push 80004005h  +
call loc_1014415  +
mov edx ecx +
movzx ecx word ptr [ecx] +
xor eax eax +
test cx cx +
jz loc_103CFED  +
movzx ecx cx +
imul eax eax +
movzx ecx cx +
add eax ecx +
inc edx  +
inc edx  +
movzx ecx word ptr [edx] +
test cx cx +
jnz loc_103CFDB  +
pop ebp  +
retn   +
***
push edi  +
mov edi ds:CopyFileW +
push 0  +
push eax  +
push ecx  +
call edi  +
test eax eax +
jnz loc_103D053  +
call ds:GetLastError  +
cmp eax 5 +
jnz loc_103D055  +
push 80h  +
push dword ptr [esi]  +
call ds:SetFileAttributesW  +
mov esi [esi] +
mov ebx [ebx] +
push 0  +
push esi  +
push ebx  +
call edi  +
test eax eax +
jz loc_103D059  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
pop edi  +
pop esi  +
pop ebx  +
jmp ds:GetLastError  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+28h] +
and dword ptr [esi+2Ch] 0 +
test ecx ecx +
jz loc_103D080  +
call sub_10147B2  +
and dword ptr [esi+28h] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi [edi] +
test esi esi +
jnz loc_103D0A1  +
push 80004005h  +
call loc_1014415  +
push esi  +
call sub_1042363  +
mov [edi] eax +
pop edi  +
lea eax [esi+4] +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1021EB9  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
lea ecx [esi+4] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_1015174  +
call sub_1021FA5  +
retn   +
***
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
lea eax [ebp+8] +
push eax  +
lea eax [ebp-4] +
push eax  +
lea eax [ebp-8] +
push eax  +
push dword ptr [ebp+8]  +
call sub_10424A6  +
leave   +
retn 4  +
***
call sub_1021EB9  +
xor ebx ebx +
inc ebx  +
mov [ebp-4] ebx +
lea ecx [ebp-14h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-10h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 3 +
test esi esi +
jz loc_103D13F  +
and dword ptr [esi] 0 +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp+8] +
push eax  +
call sub_1036032  +
push 0  +
lea eax [ebp+8] +
push eax  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
call sub_103592F  +
mov edi eax +
test edi edi +
jnz loc_103D171  +
test esi esi +
jz loc_103D191  +
mov [esi] ebx +
jmp loc_103D191  +
push ebx  +
lea eax [ebp+8] +
push eax  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
call sub_103592F  +
test eax eax +
jnz loc_103D195  +
test esi esi +
jz loc_103D191  +
mov dword ptr [esi] 2 +
xor edi edi +
jmp loc_103D19F  +
test esi esi +
jz loc_103D19F  +
mov dword ptr [esi] 3 +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-10h] +
call sub_1015174  +
mov [ebp-4] bl +
lea ecx [ebp-14h] +
call sub_1015174  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp+8] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+0Ch] +
call sub_1015174  +
mov eax edi +
call sub_1021FA5  +
retn 8  +
***
call sub_1021EB9  +
lea ecx [ebp-14h] +
call sub_10151DA  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-10h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 1 +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
push dword ptr [ebp+8]  +
call sub_1036032  +
test al al +
jnz loc_103D233  +
mov [ebp-4] al +
lea ecx [ebp-10h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call sub_1015174  +
xor eax eax +
jmp loc_103D340  +
lea ecx [ebp-10h] +
call sub_1015002  +
mov edi eax +
push 2Eh  +
push edi  +
call sub_105459E  +
pop ecx  +
pop ecx  +
mov [ebp+8] eax +
test eax eax +
jz loc_103D31A  +
push offset a_inf_0  +
push eax  +
call sub_10224ED  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_103D31A  +
mov ecx [ebp-10h] +
mov eax ecx +
lea esi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_103D26F  +
sub eax esi +
sar eax 1 +
cmp eax 8 +
jb loc_103D31A  +
mov esi [ecx-0Ch] +
test esi esi +
jge loc_103D297  +
push 80070057h  +
call loc_1014415  +
movzx eax word ptr [ecx] +
movzx edx ax +
cmp dx 4Fh +
jz loc_103D2B0  +
test esi esi +
jl loc_103D28D  +
movzx eax ax +
cmp ax 6Fh +
jnz loc_103D31A  +
cmp esi 1 +
jl loc_103D28D  +
movzx eax word ptr [ecx+2] +
movzx edx ax +
cmp dx 45h +
jz loc_103D2D0  +
cmp esi 1 +
jl loc_103D28D  +
movzx eax ax +
cmp ax 65h +
jnz loc_103D31A  +
cmp esi 2 +
jl loc_103D28D  +
movzx eax word ptr [ecx+4] +
movzx ecx ax +
cmp cx 4Dh +
jz loc_103D2F0  +
cmp esi 2 +
jl loc_103D28D  +
movzx eax ax +
cmp ax 6Dh +
jnz loc_103D31A  +
lea esi [edi+6] +
xor edi edi +
inc edi  +
jmp loc_103D313  +
test edi edi +
jz loc_103D30F  +
movzx eax word ptr [esi] +
push eax  +
call sub_102D7C5  +
pop ecx  +
test eax eax +
jz loc_103D30F  +
xor edi edi +
inc edi  +
jmp loc_103D311  +
xor edi edi +
inc esi  +
inc esi  +
cmp esi [ebp+8] +
jb loc_103D2F8  +
jmp loc_103D31C  +
xor edi edi +
push 0FFFFFFFFh  +
lea ecx [ebp-10h] +
call sub_1015023  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-10h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call sub_1015174  +
mov eax edi +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EB9  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_10151DA  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+4] +
call sub_10151DA  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax esi +
call sub_1021FA5  +
retn   +
***
call sub_1021EB9  +
mov [ebp-10h] ecx +
or dword ptr [ebp-4] 0FFFFFFFFh +
call sub_103D0B7  +
call sub_1021FA5  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_103D380  +
test [ebp+arg_0] 1 +
jz loc_103D3BD  +
push esi  +
call sub_1021179  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_0]  +
call sub_10424A6  +
test eax eax +
jnz loc_103D3EC  +
xor al al +
jmp locret_103D3FA  +
mov ecx [ebp+arg_4] +
add eax 4 +
push eax  +
call sub_1015AAF  +
mov al 1 +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
test edi edi +
jnz loc_103D41D  +
push 80004005h  +
call loc_1014415  +
push 0  +
mov ecx edi +
call sub_103D3A3  +
mov eax [esi+2Ch] +
mov [edi+8] eax +
dec dword ptr [esi+4]  +
mov eax [esi+4] +
mov [esi+2Ch] edi +
cmp eax [esi+1Ch] +
jnb loc_103D450  +
cmp dword ptr [esi+20h] 0 +
jnz loc_103D450  +
push eax  +
mov ecx esi +
call sub_10422B8  +
push eax  +
mov ecx esi +
call sub_10423AB  +
cmp dword ptr [esi+4] 0 +
jnz loc_103D45D  +
mov ecx esi +
call sub_103D067  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1021EB9  +
mov dword ptr [ebp-4] 1 +
lea ecx [ebp-14h] +
xor esi esi +
call sub_10151DA  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-10h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-20h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-18h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 5 +
cmp [ebp+10h] esi +
jnz loc_103D505  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-18h] +
call sub_1015174  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-20h] +
call sub_1015174  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-10h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-14h] +
call sub_1015174  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp+8] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+0Ch] +
call sub_1015174  +
push 52h  +
pop eax  +
call sub_1021FA5  +
retn 0Ch  +
mov ecx [ebp+10h] +
call sub_1014FC6  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp+8] +
push eax  +
call sub_1036032  +
test al al +
jnz loc_103D571  +
push 52h  +
pop esi  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-18h] +
call sub_1015174  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-20h] +
call sub_1015174  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-10h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-14h] +
call sub_1015174  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp+8] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+0Ch] +
call sub_1015174  +
mov eax esi +
jmp loc_103D4FD  +
lea eax [ebp-18h] +
push eax  +
lea ecx [ebp-1Ch] +
call sub_10151F2  +
mov byte ptr [ebp-4] 6 +
mov eax [ebp-1Ch] +
mov eax [eax-0Ch] +
add eax 0FFFFFFFCh +
cmp eax 0Ah +
jbe loc_103D592  +
push 0Ah  +
pop eax  +
push eax  +
lea ecx [ebp-1Ch] +
call sub_1035EC3  +
lea eax [ebp-1Ch] +
push eax  +
lea ecx [ebp-14h] +
call sub_1015959  +
push offset a__0  +
lea ecx [ebp-14h] +
call sub_1018C3E  +
mov eax [ebp+0Ch] +
cmp dword ptr [eax-0Ch] 0 +
lea eax [ebp-10h] +
push eax  +
push ecx  +
mov ecx esp +
mov [ebp-24h] esp +
jnz loc_103D5E6  +
lea eax [ebp+8] +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 7 +
mov byte ptr [ebp-4] 6 +
call sub_103633A  +
test eax eax +
jnz loc_103D602  +
push 52h  +
pop esi  +
jmp loc_103D632  +
lea eax [ebp+0Ch] +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 8 +
mov byte ptr [ebp-4] 6 +
call sub_1036405  +
mov esi eax +
test esi esi +
jnz loc_103D632  +
mov eax [ebp-10h] +
mov ecx [eax-0Ch] +
cmp ecx 28h +
jbe loc_103D61A  +
push 28h  +
lea ecx [ebp-10h] +
call sub_1035EC3  +
mov eax [ebp-10h] +
push dword ptr [eax-0Ch]  +
lea ecx [ebp-14h] +
push eax  +
call sub_10155F6  +
mov ecx [ebp+10h] +
lea eax [ebp-14h] +
push eax  +
call sub_1015959  +
mov byte ptr [ebp-4] 5 +
lea ecx [ebp-1Ch] +
call sub_1015174  +
jmp loc_103D525  +
***
call sub_1021EB9  +
call sub_103AC57  +
test eax eax +
jz loc_103D6AF  +
mov edi [esi] +
lea ecx [ebp-10h] +
mov [ebp-14h] edi +
call sub_10151DA  +
and dword ptr [ebp-4] 0 +
test edi edi +
jz loc_103D6A3  +
lea eax [ebp-14h] +
push eax  +
mov ecx esi +
call sub_105038C  +
push eax  +
lea ecx [ebp-10h] +
call sub_1015959  +
mov eax [ebp+8] +
push dword ptr [eax]  +
push dword ptr [ebp-10h]  +
push offset aSkippingCopyOf  +
push 2  +
call sub_103AC75  +
add esp 10h +
cmp dword ptr [ebp-14h] 0 +
jnz loc_103D672  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_1015174  +
call sub_1021FA5  +
retn 4  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
inc dword ptr [esi+20h]  +
xor ebx ebx +
cmp [esi] ebx +
jz loc_103D6F2  +
cmp [esi+8] ebx +
jbe loc_103D6F2  +
push edi  +
mov eax [esi] +
mov edi [eax+ebx*4] +
jmp loc_103D6E5  +
mov eax edi +
mov edi [edi+8] +
push eax  +
mov ecx esi +
call sub_103D403  +
test edi edi +
jnz loc_103D6D8  +
inc ebx  +
cmp ebx [esi+8] +
jb loc_103D6D1  +
xor ebx ebx +
pop edi  +
push dword ptr [esi]  +
call sub_1021189  +
pop ecx  +
mov [esi] ebx +
mov [esi+4] ebx +
cmp [esi+20h] ebx +
jnz loc_103D715  +
push ebx  +
push ebx  +
mov ecx esi +
call sub_10422B8  +
push eax  +
mov ecx esi +
call sub_1037641  +
mov ecx esi +
call sub_103D067  +
dec dword ptr [esi+20h]  +
pop esi  +
pop ebx  +
retn   +
***
call sub_1021EB9  +
mov esi ecx +
mov [ebp-10h] esi +
fld  ds:flt_100B470 +
push 0Ah  +
sub esp 0Ch +
fstp  [esp+14h+var_C] +
lea ecx [esi+4] +
fld  ds:flt_100B46C +
fstp  [esp+14h+var_10] +
fld  ds:flt_100B468 +
fstp  [esp+14h+var_14] +
push 11h  +
call sub_103783F  +
and dword ptr [ebp-4] 0 +
fld  ds:flt_100B470 +
push 0Ah  +
sub esp 0Ch +
fstp  [esp+14h+var_C] +
lea ecx [esi+34h] +
fld  ds:flt_100B46C +
fstp  [esp+14h+var_10] +
fld  ds:flt_100B468 +
fstp  [esp+14h+var_14] +
push 11h  +
call sub_103783F  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax esi +
call sub_1021FA5  +
retn   +
***
call sub_1021EB9  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
lea ecx [esi+34h] +
call sub_103D6BC  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [esi+4] +
call sub_103D6BC  +
call sub_1021FA5  +
retn   +
***
call sub_1021EB9  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+8]  +
call sub_10161A7  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+4] +
call sub_10151DA  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax esi +
call sub_1021FA5  +
retn 4  +
***
push 8  +
mov eax offset loc_1056E47 +
call sub_1021EB9  +
lea ecx [ebp-10h] +
call sub_10151DA  +
and dword ptr [ebp-4] 0 +
push dword ptr [ebp+8]  +
lea ecx [ebp-14h] +
call sub_10161A7  +
mov byte ptr [ebp-4] 1 +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
call sub_1046B0F  +
mov esi eax +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-14h] +
call sub_1015174  +
test esi esi +
jz loc_103D897  +
mov esi [ebp+0Ch] +
push dword ptr [esi]  +
push dword ptr [ebp-10h]  +
call sub_10224ED  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_103D897  +
push dword ptr [ebp+8]  +
lea ecx [esi+4] +
call sub_1015ACB  +
xor esi esi +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_1015174  +
mov eax esi +
call sub_1021FA5  +
retn 8  +
***
xor esi esi +
inc esi  +
jmp loc_103D881  +
***
call sub_1021EB9  +
lea ecx [ebp-14h] +
xor esi esi +
call sub_103D34D  +
mov [ebp-4] esi +
push dword ptr [ebp+8]  +
lea ecx [ebp-14h] +
call sub_1015959  +
lea eax [ebp-14h] +
push eax  +
push offset loc_103D81B  +
call sub_104F985  +
cmp eax esi +
jnz loc_103D8EC  +
mov eax [ebp-10h] +
cmp [eax-0Ch] esi +
jz loc_103D8EC  +
mov ecx [ebp+0Ch] +
lea eax [ebp-10h] +
push eax  +
call sub_1015959  +
inc esi  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call sub_103D0B7  +
mov eax esi +
call sub_1021FA5  +
retn 8  +
***
call sub_1021EB9  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+8]  +
call sub_103D7E3  +
and dword ptr [ebp-4] 0 +
mov eax [ebp+0Ch] +
mov [esi+0Ch] eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax esi +
call sub_1021FA5  +
retn 8  +
***
call sub_1021EF1  +
mov esi ecx +
mov [ebp-14h] esi +
xor ebx ebx +
cmp [esi+2Ch] ebx +
jnz loc_103D991  +
push 10h  +
push dword ptr [esi+24h]  +
lea eax [esi+28h] +
push eax  +
call sub_1014B4F  +
cmp eax ebx +
jnz loc_103D971  +
push 8007000Eh  +
call loc_1014415  +
mov ecx [esi+24h] +
mov edx ecx +
shl edx 4 +
lea eax [edx+eax-0Ch] +
dec ecx  +
cmp ecx ebx +
jl loc_103D991  +
mov edx [esi+2Ch] +
mov [eax+8] edx +
mov [esi+2Ch] eax +
sub eax 10h +
dec ecx  +
jns loc_103D982  +
mov edi [esi+2Ch] +
xor eax eax +
cmp edi ebx +
setnz al  +
cmp eax ebx +
jnz loc_103D9A6  +
push 80004005h  +
jmp loc_103D96C  +
mov [ebp-18h] edi +
mov eax [edi+8] +
mov [esi+2Ch] eax +
mov [ebp-4] ebx +
mov [ebp-1Ch] edi +
mov byte ptr [ebp-4] 1 +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
mov ecx edi +
call sub_103D907  +
mov [ebp-4] bl +
or dword ptr [ebp-4] 0FFFFFFFFh +
inc dword ptr [esi+4]  +
mov eax [ebp+0Ch] +
shl eax 2 +
mov ecx [esi] +
mov ecx [eax+ecx] +
mov [edi+8] ecx +
mov ecx [esi] +
mov [eax+ecx] edi +
mov eax [esi+4] +
cmp eax [esi+18h] +
jbe loc_103DA00  +
cmp [esi+20h] ebx +
jnz loc_103DA00  +
push eax  +
mov ecx esi +
call sub_10422B8  +
push eax  +
mov ecx esi +
call sub_10423AB  +
mov eax edi +
call sub_1021FA5  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jnz loc_103DA4D  +
push 1  +
push dword ptr [esi+8]  +
call sub_1037641  +
test al al +
jnz loc_103DA4D  +
push 8007000Eh  +
call loc_1014415  +
push [ebp+arg_8]  +
mov ecx esi +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_103D93D  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10424A6  +
test eax eax +
jnz loc_103DA9A  +
push [ebp+var_4]  +
mov ecx esi +
push [ebp+var_8]  +
push [ebp+arg_0]  +
call sub_103DA28  +
add eax 4 +
pop esi  +
leave   +
retn 4  +
***
push 1Ch  +
mov eax offset loc_1056F3D +
call sub_1021EB9  +
mov ecx [ebp+0Ch] +
sub ecx 0Bh +
mov eax [ebp+8] +
mov edi [eax] +
jz loc_103DC07  +
push 2  +
pop esi  +
sub ecx esi +
jz loc_103DBA9  +
dec ecx  +
jz loc_103DAE9  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [eax+4]  +
call ds:SetupDefaultQueueCallbackW  +
jmp loc_103DED8  +
cmp dword_10657E0 0 +
jz loc_103DB9C  +
call sub_103AC57  +
test eax eax +
jz loc_103DB7E  +
lea ecx [ebp+0Ch] +
call sub_10151DA  +
mov dword ptr [ebp-4] 8 +
xor ebx ebx +
cmp [edi] ebx +
lea ecx [ebp-14h] +
setnz bl  +
add ebx esi +
mov esi [ebp+10h] +
push dword ptr [esi+10h]  +
call sub_10161A7  +
mov byte ptr [ebp-4] 9 +
push dword ptr [esi+0Ch]  +
lea ecx [ebp-10h] +
call sub_10161A7  +
mov byte ptr [ebp-4] 0Ah +
lea eax [ebp+0Ch] +
push eax  +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-10h] +
push eax  +
call sub_10360F6  +
mov byte ptr [ebp-4] 9 +
lea ecx [ebp-10h] +
call sub_1015174  +
mov byte ptr [ebp-4] 8 +
lea ecx [ebp-14h] +
call sub_1015174  +
push dword ptr [ebp+0Ch]  +
push offset aFileSReferen_0  +
push ebx  +
call sub_103AC75  +
add esp 0Ch +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+0Ch] +
call sub_1015174  +
cmp dword ptr [edi] 0 +
jz loc_103DED5  +
push offset aInStrictCopyMo  +
push 3  +
mov dword ptr [edi+64h] 0E0000303h +
call sub_103AC75  +
jmp loc_103DBFE  +
xor eax eax +
inc eax  +
mov dword_10657E0 eax +
jmp loc_103DED8  +
call sub_103AC57  +
test eax eax +
jz loc_103DBE2  +
mov eax [ebp+10h] +
mov ecx [eax+8] +
push dword ptr [eax+4]  +
xor edx edx +
cmp [edi] edx +
push offset aFileSReference  +
setnz dl  +
add edx esi +
test ecx ecx +
jz loc_103DBD9  +
push ecx  +
push edx  +
call sub_103AD09  +
add esp 10h +
jmp loc_103DBE2  +
push edx  +
call sub_103AC75  +
add esp 0Ch +
cmp dword ptr [edi] 0 +
jz loc_103DD7F  +
push offset aInStrictCopyMo  +
push 3  +
call sub_103AC75  +
mov dword ptr [edi+64h] 0E0000303h +
pop ecx  +
pop ecx  +
xor eax eax +
jmp loc_103DED8  +
lea ecx [ebp+8] +
call sub_10151DA  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp+14h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp+0Ch] +
call sub_10151DA  +
mov byte ptr [ebp-4] 2 +
mov esi [ebp+10h] +
push dword ptr [esi]  +
and dword_10657E0 0 +
lea ecx [ebp-18h] +
call sub_10161A7  +
mov byte ptr [ebp-4] 3 +
lea eax [ebp+0Ch] +
push eax  +
lea eax [ebp+14h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
call sub_1036032  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-18h] +
call sub_1015174  +
lea eax [ebp+8] +
push eax  +
push dword ptr [ebp+0Ch]  +
lea ecx [edi+4] +
call sub_103D3C9  +
test al al +
jz loc_103DDF0  +
push 5Ch  +
push dword ptr [esi+4]  +
call sub_105459E  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_103DC8C  +
mov eax [esi+4] +
jmp loc_103DC8E  +
inc eax  +
inc eax  +
push eax  +
push dword ptr [ebp+8]  +
call sub_10224ED  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_103DDF0  +
push dword ptr [ebp+8]  +
lea ecx [edi+34h] +
mov [ebp-28h] ecx +
call near ptr dword_103D0E8+2  +
test eax eax +
jz loc_103DCC5  +
push dword ptr [ebp+8]  +
push dword ptr [ebp+0Ch]  +
push offset aFileSContained  +
push 1  +
jmp loc_103DEA9  +
lea ecx [ebp+10h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 4 +
lea eax [ebp+10h] +
push eax  +
lea eax [ebp+8] +
push eax  +
lea eax [ebp+14h] +
push eax  +
call sub_10360F6  +
push dword ptr [esi+4]  +
lea ecx [ebp-1Ch] +
call sub_10161A7  +
mov byte ptr [ebp-4] 5 +
lea eax [ebp+10h] +
lea ecx [ebp-1Ch] +
call near ptr dword_103CFF0+4  +
mov ebx eax +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-1Ch] +
call sub_1015174  +
test ebx ebx +
jnz loc_103DD86  +
push dword ptr [ebp+8]  +
mov ecx [ebp-28h] +
call sub_103DA67  +
push offset aTrue  +
mov ecx eax +
call sub_10158CD  +
push dword ptr [ebp+10h]  +
push dword ptr [esi+4]  +
push offset aCopiedCabFileS  +
push 1  +
call sub_103AC75  +
push dword ptr [ebp+8]  +
push dword ptr [ebp+0Ch]  +
push offset aFileSContained  +
push 1  +
call sub_103AC75  +
add esp 20h +
push 2  +
pop esi  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp+10h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp+0Ch] +
call sub_1015174  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp+14h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
mov eax esi +
jmp loc_103DED8  +
mov eax 0E0000303h +
cmp ebx eax +
jz loc_103DDB2  +
cmp ebx 2 +
jz loc_103DDB2  +
push dword ptr [ebp+0Ch]  +
mov [edi+64h] ebx +
push dword ptr [ebp+10h]  +
push dword ptr [esi+4]  +
push offset aFailedToCopyCa  +
push ebx  +
push 3  +
call sub_103AD09  +
add esp 18h +
jmp loc_103DDD2  +
cmp dword ptr [edi] 0 +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+10h]  +
jz loc_103DDD9  +
mov [edi+64h] eax +
push dword ptr [esi+4]  +
push offset aMissingCabFi_0  +
push 3  +
call sub_103AC75  +
add esp 14h +
xor esi esi +
jmp loc_103DD4F  +
***
push dword ptr [esi+4]  +
push offset aMissingCabFile  +
push 2  +
call sub_103AC75  +
add esp 14h +
jmp loc_103DD4C  +
***
push dword ptr [esi]  +
lea ecx [ebp-24h] +
call sub_10161A7  +
mov byte ptr [ebp-4] 6 +
push dword ptr [esi+4]  +
lea ecx [ebp-20h] +
call sub_10161A7  +
mov byte ptr [ebp-4] 7 +
lea eax [ebp-24h] +
lea ecx [ebp-20h] +
call near ptr dword_103CFF0+4  +
mov ebx eax +
mov byte ptr [ebp-4] 6 +
lea ecx [ebp-20h] +
call sub_1015174  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-24h] +
call sub_1015174  +
test ebx ebx +
jnz loc_103DE52  +
push dword ptr [esi]  +
push dword ptr [esi+4]  +
push offset aCopiedFileSS_  +
push 1  +
call sub_103AC75  +
add esp 10h +
push 2  +
pop esi  +
jmp loc_103DD5B  +
***
mov eax 0E0000303h +
cmp ebx eax +
jz loc_103DE7A  +
cmp ebx 2 +
jz loc_103DE7A  +
mov [edi+64h] ebx +
push dword ptr [esi]  +
push dword ptr [esi+4]  +
push offset aFailedToCopySS  +
push ebx  +
push 3  +
call sub_103AD09  +
add esp 14h +
jmp loc_103DE96  +
cmp dword ptr [edi] 0 +
jz loc_103DE9D  +
mov [edi+64h] eax +
push dword ptr [esi]  +
push dword ptr [esi+4]  +
push offset aMissingFileS_0  +
push 3  +
call sub_103AC75  +
add esp 10h +
xor esi esi +
jmp loc_103DD5B  +
***
push dword ptr [esi]  +
push dword ptr [esi+4]  +
push offset aMissingFileSS_  +
push 2  +
call sub_103AC75  +
add esp 10h +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp+0Ch] +
call sub_1015174  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp+14h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
push 2  +
pop eax  +
call sub_1021FA5  +
retn 10h  +
***
call sub_1021EB9  +
xor esi esi +
mov [ebp-10h] esi +
mov dword ptr [ebp-4] 1 +
lea ecx [ebp-20h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-28h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 3 +
mov [ebp-3Ch] esi +
mov [ebp-1Ch] esi +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-18h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 5 +
lea ecx [ebp-14h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 6 +
lea ecx [ebp-0D8h] +
call sub_103D731  +
mov byte ptr [ebp-4] 7 +
lea eax [ebp-20h] +
push eax  +
push eax  +
lea eax [ebp+10h] +
push eax  +
call sub_1036032  +
push ecx  +
lea eax [ebp-20h] +
mov ecx esp +
mov [ebp-38h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 8 +
push ecx  +
lea eax [ebp+10h] +
mov ecx esp +
mov [ebp-34h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 9 +
mov byte ptr [ebp-4] 7 +
mov ebx [ebp+0Ch] +
mov ecx ebx +
call sub_103B26C  +
push dword ptr [ebp-20h]  +
mov edi eax +
mov [ebp-2Ch] edi +
cmp edi esi +
jnz loc_103E4E0  +
mov edi offset aCopiedSToDrive +
push edi  +
push 1  +
call sub_103AC75  +
mov eax [ebp+14h] +
add esp 0Ch +
cmp [eax-0Ch] esi +
jz loc_103E007  +
lea eax [ebp-28h] +
push eax  +
push eax  +
lea eax [ebp+14h] +
push eax  +
call sub_1036032  +
push ecx  +
lea eax [ebp-28h] +
mov ecx esp +
mov [ebp-38h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 0Ah +
push ecx  +
lea eax [ebp+14h] +
mov ecx esp +
mov [ebp-34h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 0Bh +
mov byte ptr [ebp-4] 7 +
mov ecx ebx +
call sub_103B26C  +
push dword ptr [ebp-28h]  +
mov [ebp-2Ch] eax +
test eax eax +
jnz loc_103E073  +
push edi  +
push 1  +
call sub_103AC75  +
add esp 0Ch +
mov ecx [ebp+8] +
lea eax [ebp-30h] +
push eax  +
call sub_103EFEF  +
mov byte ptr [ebp-4] 0Ch +
push eax  +
lea ecx [ebp-14h] +
call sub_1015959  +
mov byte ptr [ebp-4] 7 +
lea ecx [ebp-30h] +
call sub_1015174  +
mov ecx [ebp+18h] +
call sub_103760F  +
xor edi edi +
mov [ebp-30h] eax +
cmp eax edi +
jz loc_103E1F8  +
mov ecx [ebp+18h] +
lea eax [ebp-30h] +
push eax  +
call sub_103D087  +
push dword ptr [eax]  +
lea ecx [ebp-1Ch] +
call sub_104B66E  +
mov esi [ebp-1Ch] +
cmp [esi+8] edi +
mov edi offset word_10022EC +
jz loc_103E0E8  +
mov eax [esi+8] +
add eax 10h +
jmp loc_103E0F9  +
push offset aFailedToCopyST  +
push eax  +
push 3  +
call sub_103AD09  +
add esp 10h +
mov byte ptr [ebp-4] 6 +
lea ecx [ebp-0D8h] +
call sub_103D7AF  +
mov byte ptr [ebp-4] 5 +
lea ecx [ebp-14h] +
call sub_1015174  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-18h] +
call sub_1015174  +
mov byte ptr [ebp-4] 3 +
mov esi [ebp-2Ch] +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-28h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-20h] +
call sub_1015174  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp+10h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+14h] +
call sub_1015174  +
mov eax esi +
jmp loc_103E549  +
push edi  +
lea ecx [ebp-40h] +
call sub_10161A7  +
mov byte ptr [ebp-4] 0Dh +
or dword ptr [ebp-10h] 1 +
lea ecx [ebp-18h] +
push ecx  +
lea ecx [esi+0Ch] +
push ecx  +
push eax  +
call sub_10360F6  +
mov dword ptr [ebp-4] 7 +
test byte ptr [ebp-10h] 1 +
jz loc_103E120  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
lea ecx [ebp-40h] +
call sub_1015174  +
cmp dword ptr [esi+8] 0 +
jz loc_103E12E  +
mov eax [esi+8] +
lea ebx [eax+0Ch] +
jmp loc_103E141  +
push edi  +
lea ecx [ebp-38h] +
call sub_10161A7  +
mov ebx eax +
mov byte ptr [ebp-4] 0Eh +
or dword ptr [ebp-10h] 2 +
cmp dword ptr [esi+8] 0 +
jz loc_103E14F  +
mov eax [esi+8] +
add eax 8 +
jmp loc_103E163  +
push edi  +
lea ecx [ebp-34h] +
call sub_10161A7  +
mov dword ptr [ebp-4] 0Fh +
or dword ptr [ebp-10h] 4 +
mov ecx [ebp+0Ch] +
push 0  +
lea edi [esi+10h] +
push edi  +
push ebx  +
push eax  +
push edi  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
call sub_103B3D1  +
mov ebx eax +
mov dword ptr [ebp-4] 0Eh +
test byte ptr [ebp-10h] 4 +
jz loc_103E197  +
and dword ptr [ebp-10h] 0FFFFFFFBh +
lea ecx [ebp-34h] +
call sub_1015174  +
mov dword ptr [ebp-4] 7 +
test byte ptr [ebp-10h] 2 +
jz loc_103E1B0  +
and dword ptr [ebp-10h] 0FFFFFFFDh +
lea ecx [ebp-38h] +
call sub_1015174  +
test ebx ebx +
jz loc_103E2A8  +
cmp dword ptr [esi+8] 0 +
mov dword ptr [ebp-3Ch] 1 +
jz loc_103E1EA  +
mov eax [esi+8] +
mov ecx [eax+0Ch] +
cmp dword ptr [ecx-0Ch] 0 +
jz loc_103E1EA  +
mov edi [edi] +
add eax 0Ch +
push eax  +
push edi  +
lea ecx [ebp-0D4h] +
call sub_103DA67  +
mov ecx eax +
call sub_1015AAF  +
xor edi edi +
cmp [ebp-30h] edi +
jnz loc_103E041  +
mov ebx [ebp+0Ch] +
push offset aCommitingQueue  +
push 1  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
cmp [ebp-3Ch] edi +
jz loc_103E300  +
mov eax [ebp+1Ch] +
mov [ebp-0D8h] eax +
lea eax [ebp-0D8h] +
push eax  +
push offset loc_103DAA7  +
mov ecx ebx +
mov [ebp-74h] edi +
call sub_103AE30  +
mov [ebp-2Ch] eax +
cmp eax edi +
jz loc_103E300  +
push offset aQueuecommitFai  +
push eax  +
push 3  +
call sub_103AD09  +
add esp 0Ch +
cmp [ebp-74h] edi +
jz loc_103E266  +
push offset aCallbackReturn  +
push dword ptr [ebp-74h]  +
push 3  +
call sub_103AD09  +
mov eax [ebp-74h] +
add esp 0Ch +
mov [ebp-2Ch] eax +
mov byte ptr [ebp-4] 6 +
lea ecx [ebp-0D8h] +
call sub_103D7AF  +
mov byte ptr [ebp-4] 5 +
lea ecx [ebp-14h] +
call sub_1015174  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-18h] +
call sub_1015174  +
mov byte ptr [ebp-4] 3 +
cmp esi edi +
jz loc_103E0AE  +
mov ecx esi +
call sub_101A986  +
mov [ebp-1Ch] edi +
jmp loc_103E0AE  +
push dword ptr [ebp-18h]  +
push dword ptr [ebp-14h]  +
push dword ptr [esi+10h]  +
push offset aFailedToQueueS  +
push 3  +
call sub_103AC75  +
add esp 14h +
mov byte ptr [ebp-4] 6 +
lea ecx [ebp-0D8h] +
call sub_103D7AF  +
mov byte ptr [ebp-4] 5 +
lea ecx [ebp-14h] +
call sub_1015174  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-18h] +
call sub_1015174  +
mov byte ptr [ebp-4] 3 +
mov ecx esi +
call sub_101A986  +
and dword ptr [ebp-1Ch] 0 +
mov esi 10Ah +
jmp loc_103E0B1  +
lea ecx [ebp-58h] +
call sub_1014C71  +
mov byte ptr [ebp-4] 10h +
lea ecx [ebp-24h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 11h +
lea ecx [ebp-70h] +
call sub_1014C71  +
mov byte ptr [ebp-4] 12h +
mov ecx [ebp+8] +
call sub_103EC03  +
push eax  +
push edi  +
mov ecx ebx +
call sub_103BD73  +
test eax eax +
jnz loc_103E39F  +
mov byte ptr [ebp-4] 11h +
lea ecx [ebp-70h] +
call sub_1014FBC  +
mov byte ptr [ebp-4] 10h +
lea ecx [ebp-24h] +
call sub_1015174  +
mov byte ptr [ebp-4] 7 +
lea ecx [ebp-58h] +
call sub_1014FBC  +
mov byte ptr [ebp-4] 6 +
lea ecx [ebp-0D8h] +
call sub_103D7AF  +
mov byte ptr [ebp-4] 5 +
lea ecx [ebp-14h] +
call sub_1015174  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-18h] +
call sub_1015174  +
mov byte ptr [ebp-4] 3 +
cmp esi edi +
jz loc_103E2F6  +
mov ecx esi +
call sub_101A986  +
mov [ebp-1Ch] edi +
jmp loc_103E2F6  +
push ecx  +
lea eax [ebp-20h] +
mov ecx esp +
mov [ebp+0Ch] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 13h +
push 1  +
mov byte ptr [ebp-4] 12h +
mov ecx ebx +
call sub_103BC3A  +
cmp eax edi +
jz loc_103E339  +
mov ecx [ebp+8] +
lea eax [ebp-58h] +
push eax  +
call sub_1040872  +
test eax eax +
jz loc_103E3F1  +
cmp [ebp-50h] edi +
jbe loc_103E3F1  +
lea eax [ebp-58h] +
push eax  +
push 4  +
mov ecx ebx +
call sub_103BDBA  +
test eax eax +
jz loc_103E339  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call sub_103FE27  +
test eax eax +
jz loc_103E429  +
push ecx  +
lea eax [ebp-24h] +
mov ecx esp +
mov [ebp+0Ch] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 14h +
push 7  +
mov byte ptr [ebp-4] 12h +
mov ecx ebx +
call sub_103BC3A  +
cmp eax edi +
jz loc_103E339  +
mov ecx [ebp+8] +
lea eax [ebp-70h] +
push eax  +
call sub_1040946  +
test eax eax +
jz loc_103E44E  +
lea eax [ebp-70h] +
push eax  +
push 8  +
mov ecx ebx +
call sub_103BDBA  +
test eax eax +
jz loc_103E339  +
mov byte ptr [ebp-4] 11h +
lea ecx [ebp-70h] +
call sub_1014FBC  +
mov byte ptr [ebp-4] 10h +
lea ecx [ebp-24h] +
call sub_1015174  +
mov byte ptr [ebp-4] 7 +
lea ecx [ebp-58h] +
call sub_1014FBC  +
mov byte ptr [ebp-4] 6 +
lea ecx [ebp-0D8h] +
call sub_103D7AF  +
mov byte ptr [ebp-4] 5 +
lea ecx [ebp-14h] +
call sub_1015174  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-18h] +
call sub_1015174  +
mov byte ptr [ebp-4] 3 +
cmp esi edi +
jz loc_103E4AB  +
mov ecx esi +
call sub_101A986  +
mov [ebp-1Ch] edi +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-28h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-20h] +
call sub_1015174  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp+10h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+14h] +
call sub_1015174  +
mov eax [ebp-2Ch] +
jmp loc_103E549  +
push offset aFailedToCopyST  +
push edi  +
push 3  +
call sub_103AD09  +
add esp 10h +
mov byte ptr [ebp-4] 6 +
lea ecx [ebp-0D8h] +
call sub_103D7AF  +
mov byte ptr [ebp-4] 5 +
lea ecx [ebp-14h] +
call sub_1015174  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-18h] +
call sub_1015174  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-28h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-20h] +
call sub_1015174  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp+10h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+14h] +
call sub_1015174  +
mov eax edi +
call sub_1021FA5  +
retn 18h  +
***
call sub_1021EB9  +
fld  ds:flt_100B470 +
push 0Ah  +
sub esp 0Ch +
fstp  [esp+14h+var_C] +
lea ecx [ebp-70h] +
fld  ds:flt_100B46C +
fstp  [esp+14h+var_10] +
fld  ds:flt_100B468 +
fstp  [esp+14h+var_14] +
push 11h  +
call sub_103783F  +
xor edi edi +
mov [ebp-4] edi +
lea ecx [ebp-40h] +
call sub_1014C71  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-14h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-1Ch] +
call sub_10151DA  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-18h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-10h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 5 +
mov ebx [ebp+10h] +
mov ecx [ebp+8] +
lea eax [ebp+10h] +
mov esi ebx +
push eax  +
mov [ebp-20h] edi +
mov [ebp-24h] edi +
and esi 1 +
call sub_103EFB8  +
mov byte ptr [ebp-4] 6 +
push eax  +
lea ecx [ebp-18h] +
call sub_1015959  +
mov byte ptr [ebp-4] 5 +
lea ecx [ebp+10h] +
call sub_1015174  +
lea eax [ebp-10h] +
push eax  +
push eax  +
lea eax [ebp-18h] +
push eax  +
call sub_1036032  +
test al al +
jnz loc_103E620  +
lea eax [ebp-18h] +
push eax  +
lea ecx [ebp-10h] +
call sub_1015959  +
cmp esi edi +
jz loc_103E641  +
call sub_1035482  +
test eax eax +
jz loc_103E641  +
push dword ptr [ebp-10h]  +
xor esi esi +
push offset aSSkippingDfxSi  +
push 1  +
call sub_103AC75  +
add esp 0Ch +
mov ecx [ebp+8] +
lea eax [ebp+10h] +
push eax  +
call sub_103F029  +
mov byte ptr [ebp-4] 7 +
push eax  +
lea ecx [ebp-14h] +
call sub_1015959  +
mov byte ptr [ebp-4] 5 +
lea ecx [ebp+10h] +
call sub_1015174  +
mov eax [ebp-14h] +
cmp [eax-0Ch] edi +
jnz loc_103E695  +
cmp esi edi +
jz loc_103E803  +
push dword ptr [ebp-18h]  +
push dword ptr [ebp-10h]  +
push offset aSDriverPackage  +
push 3  +
call sub_103AC75  +
add esp 10h +
mov esi 800B0100h +
jmp loc_103EA95  +
lea eax [ebp-14h] +
push eax  +
call sub_1035549  +
test al al +
jz loc_103E7C3  +
cmp esi edi +
jz loc_103E803  +
push dword ptr [ebp-14h]  +
push dword ptr [ebp-10h]  +
push offset aSCheckingSigna  +
push 1  +
call sub_103AC75  +
add esp 0Ch +
lea eax [ebp-14h] +
mov ecx esp +
mov [ebp+10h] esp +
push eax  +
lea esi [ebp-24h] +
call sub_10151F2  +
mov byte ptr [ebp-4] 8 +
push ecx  +
lea eax [ebp-18h] +
mov ecx esp +
mov [ebp-28h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 9 +
mov byte ptr [ebp-4] 5 +
call sub_103D10E  +
cmp eax edi +
jnz loc_103E720  +
cmp dword ptr [ebp-24h] 1 +
mov eax offset aWhql +
jz loc_103E708  +
mov eax offset aAuthenticode +
push eax  +
push dword ptr [ebp-10h]  +
push offset aDriverPackag_2  +
push 1  +
call sub_103AC75  +
add esp 10h +
jmp loc_103E803  +
mov esi 80092003h +
cmp eax esi +
jz loc_103E78E  +
mov esi 800B0100h +
cmp eax esi +
jz loc_103E776  +
lea edi [esi+1] +
cmp eax edi +
jz loc_103E75C  +
push dword ptr [ebp-18h]  +
mov edi 0E0000244h +
push dword ptr [ebp-10h]  +
push offset aSignatureVerif  +
cmp eax edi +
jz loc_103E750  +
push eax  +
jmp loc_103E7B4  +
push edi  +
push 3  +
call sub_103AD09  +
mov esi edi +
jmp loc_103E7BB  +
push dword ptr [ebp-10h]  +
push offset aCertificateOfD  +
push edi  +
push 3  +
call sub_103AD09  +
add esp 10h +
mov esi edi +
jmp loc_103EA95  +
push dword ptr [ebp-10h]  +
push offset aDriverPackag_3  +
push esi  +
push 3  +
call sub_103AD09  +
add esp 10h +
jmp loc_103EA95  +
lea eax [ebp-14h] +
push eax  +
call sub_1035549  +
test al al +
jz loc_103E7A8  +
push dword ptr [ebp-18h]  +
push dword ptr [ebp-14h]  +
push offset aPossiblySomeFi  +
jmp loc_103E7B3  +
push dword ptr [ebp-10h]  +
push dword ptr [ebp-14h]  +
push offset aCatalogFileSNo  +
push esi  +
push 3  +
call sub_103AD09  +
add esp 14h +
jmp loc_103EA95  +
cmp esi edi +
jz loc_103E7E6  +
push dword ptr [ebp-10h]  +
push dword ptr [ebp-14h]  +
push offset aCatalogFileSNo  +
push 3  +
call sub_103AC75  +
add esp 10h +
mov esi 0E0000304h +
jmp loc_103EA95  +
push dword ptr [ebp-14h]  +
push dword ptr [ebp-10h]  +
push offset aDriverPackag_4  +
push 2  +
call sub_103AC75  +
add esp 10h +
lea ecx [ebp-14h] +
call sub_1014FC6  +
lea eax [ebp-1Ch] +
push eax  +
push ecx  +
lea eax [ebp-14h] +
mov ecx esp +
mov [ebp+10h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 0Ah +
push ecx  +
lea eax [ebp-18h] +
mov ecx esp +
mov [ebp-28h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 0Bh +
mov byte ptr [ebp-4] 5 +
call sub_103D468  +
mov esi eax +
cmp esi edi +
jz loc_103E86C  +
mov eax [ebp-14h] +
cmp [eax-0Ch] edi +
jnz loc_103E859  +
push offset aFailedToCalcul  +
push esi  +
push 3  +
call sub_103AD09  +
add esp 0Ch +
jmp loc_103EA95  +
push eax  +
push offset aFailedToCalc_0  +
push esi  +
push 3  +
call sub_103AD09  +
jmp loc_103E7D9  +
push 3  +
push ecx  +
lea eax [ebp-1Ch] +
mov ecx esp +
mov [ebp+10h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 0Ch +
mov byte ptr [ebp-4] 5 +
mov ecx [ebp+14h] +
call sub_103B6D1  +
mov edi eax +
mov esi 0B7h +
cmp edi esi +
jnz loc_103E8A3  +
cmp dword ptr [ebp+0Ch] 6 +
jz loc_103E8C3  +
jmp loc_103EA95  +
cmp edi 2 +
jnz loc_103EA73  +
cmp dword ptr [ebp+0Ch] 3 +
jnz loc_103E8BC  +
mov esi 0E0000302h +
jmp loc_103EA95  +
mov dword ptr [ebp-20h] 1 +
mov ecx [ebp+8] +
lea eax [ebp-40h] +
push eax  +
lea eax [ebp-70h] +
push eax  +
call sub_1042248  +
cmp dword ptr [ebp-20h] 0 +
jz loc_103E90E  +
push 4  +
push ecx  +
lea eax [ebp-1Ch] +
mov ecx esp +
mov [ebp+10h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 0Dh +
mov byte ptr [ebp-4] 5 +
mov ecx [ebp+14h] +
call sub_103B6D1  +
mov edi eax +
test edi edi +
jz loc_103E90E  +
cmp edi esi +
jnz loc_103E96B  +
cmp dword ptr [ebp+0Ch] 6 +
jnz loc_103EA95  +
and ebx 2 +
push ebx  +
lea eax [ebp-70h] +
push eax  +
push ecx  +
lea eax [ebp-14h] +
mov ecx esp +
mov [ebp+0Ch] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 0Eh +
push ecx  +
lea eax [ebp-18h] +
mov ecx esp +
mov [ebp+10h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 0Fh +
mov edi [ebp+14h] +
push edi  +
push dword ptr [ebp+8]  +
mov byte ptr [ebp-4] 5 +
call sub_103DEE5  +
mov esi eax +
test esi esi +
jz loc_103E976  +
cmp dword ptr [ebp-20h] 0 +
jz loc_103E95F  +
mov ecx edi +
call sub_103ADF7  +
mov ecx edi +
call sub_103ADBD  +
jmp loc_103EA95  +
push offset aCreateDriverSt  +
push edi  +
jmp loc_103EA7A  +
lea eax [ebp-10h] +
push eax  +
lea esi [ebp-40h] +
call sub_103D648  +
mov ecx [ebp+8] +
call sub_103EC03  +
cmp eax 6 +
jnz loc_103EA27  +
lea ecx [ebp+8] +
call sub_10151DA  +
mov byte ptr [ebp-4] 10h +
push 52h  +
pop esi  +
lea eax [ebp+8] +
push eax  +
push 2  +
mov ecx edi +
call sub_103B80D  +
test eax eax +
jz loc_103E9EB  +
lea eax [ebp+8] +
push eax  +
call sub_1042A4A  +
mov esi eax +
test esi esi +
jz loc_103EA1B  +
mov eax 800B0110h +
cmp esi eax +
jnz loc_103E9D3  +
push offset aInvalidSignatu  +
push eax  +
jmp loc_103E9E1  +
cmp esi 800B0100h +
jnz loc_103E9EB  +
push offset aUnsignedDriver  +
push esi  +
push 3  +
call sub_103AD09  +
add esp 0Ch +
cmp dword ptr [ebp-20h] 0 +
jz loc_103EA06  +
mov ecx edi +
call sub_103ADF7  +
push offset aRemovedDriverP  +
push 1  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
mov ecx edi +
call sub_103ADBD  +
mov byte ptr [ebp-4] 5 +
lea ecx [ebp+8] +
call sub_1015174  +
jmp loc_103EA95  +
mov byte ptr [ebp-4] 5 +
lea ecx [ebp+8] +
call sub_1015174  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-10h] +
call sub_1015174  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-18h] +
call sub_1015174  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-1Ch] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-14h] +
call sub_1015174  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-40h] +
call sub_1014FBC  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-70h] +
call sub_1037B1B  +
xor eax eax +
jmp loc_103EADF  +
push offset aCheckIfDriverS  +
push 0  +
push 3  +
call sub_103AD09  +
xor eax eax +
add esp 0Ch +
cmp edi 20h +
setz al  +
dec eax  +
and eax 32h +
add eax 20h +
mov esi eax +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-10h] +
call sub_1015174  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-18h] +
call sub_1015174  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-1Ch] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-14h] +
call sub_1015174  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-40h] +
call sub_1014FBC  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-70h] +
call sub_1037B1B  +
mov eax esi +
call sub_1021FA5  +
retn 10h  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
test ecx ecx +
jz loc_103EAFF  +
call sub_101A986  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
call sub_1021EB9  +
mov eax ecx +
mov [ebp-10h] eax +
xor ecx ecx +
mov dword ptr [eax] offset off_10058A4 +
mov [eax+4] ecx +
mov [ebp-4] ecx +
mov dword ptr [eax] offset off_100DD48 +
lea edi [eax+8] +
mov esi offset dword_100A788 +
movs   +
movs   +
movs   +
movs   +
mov [eax+18h] ecx +
mov [eax+1Ch] ecx +
or dword ptr [ebp-4] 0FFFFFFFFh +
call sub_1021FA5  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+18h] +
test eax eax +
jz loc_103EB63  +
push eax  +
call ds:RegCloseKey  +
and dword ptr [esi+18h] 0 +
pop esi  +
retn   +
***
call sub_1021EB9  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_100DD48 +
and dword ptr [ebp-4] 0 +
call sub_103EB4C  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov dword ptr [esi] offset off_10058A4 +
call sub_1021FA5  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_103EB6A  +
test byte ptr [ebp+8] 1 +
jz loc_103EBB9  +
push esi  +
call sub_1021179  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+4] +
test ecx ecx +
jz loc_103EBD6  +
call sub_104584E  +
call ds:CoUninitialize  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+4] +
test ecx ecx +
jnz loc_103EBF8  +
xor eax eax +
pop ebp  +
retn 4  +
pop ebp  +
jmp sub_1046F57  +
***
cmp dword ptr [ecx+4] 0 +
jz loc_103EC10  +
mov eax [ecx+0DCh] +
retn   +
push 0Ch  +
pop eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
mov edi [ebp+arg_0] +
mov [esi] edi +
xor edx edx +
mov eax edi +
div  dword ptr [ecx+8] +
mov eax [ebp+arg_4] +
xor ebx ebx +
mov [eax] edx +
cmp [ecx] ebx +
jz loc_103EC5F  +
mov edx [ebp+arg_C] +
and [edx] ebx +
mov eax [eax] +
mov ecx [ecx] +
mov eax [ecx+eax*4] +
test eax eax +
jz loc_103EC5F  +
mov esi [esi] +
cmp [eax+0Ch] esi +
jnz loc_103EC56  +
cmp [eax] edi +
jz loc_103EC68  +
mov ebx eax +
mov eax [eax+8] +
test eax eax +
jnz loc_103EC4D  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
mov [edx] ebx +
jmp loc_103EC61  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+8] +
test edx edx +
jl loc_103EC96  +
mov eax [ecx] +
cmp edx [eax-0Ch] +
jg loc_103EC96  +
mov ax [eax+edx*2] +
pop ebp  +
retn 4  +
***
push 80070057h  +
call loc_1014415  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push dword ptr [eax]  +
mov esi ecx +
call sub_104B66E  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_104B66E  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1021EB9  +
mov esi ecx +
push 0Ch  +
call sub_10225EB  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_103ED09  +
call sub_1045816  +
or dword ptr [ebp-4] 0FFFFFFFFh +
push eax  +
mov ecx esi +
call sub_104B66E  +
mov eax esi +
call sub_1021FA5  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_104B64A  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1021EB9  +
mov [ebp-10h] ecx +
or dword ptr [ebp-4] 0FFFFFFFFh +
add ecx 4 +
call sub_103EAEC  +
call sub_1021FA5  +
retn   +
***
call sub_1021EB9  +
mov eax ecx +
mov [ebp-10h] eax +
mov ecx [ebp+8] +
mov [eax] ecx +
and dword ptr [eax+4] 0 +
or dword ptr [ebp-4] 0FFFFFFFFh +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EB9  +
mov esi ecx +
push 20h  +
call sub_10225EB  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_103EDB8  +
call sub_103EB06  +
or dword ptr [ebp-4] 0FFFFFFFFh +
push eax  +
mov ecx esi +
call sub_104B66E  +
mov eax esi +
call sub_1021FA5  +
retn   +
***
call sub_1021EB9  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [esi+4] 0 +
mov dword ptr [esi] offset off_10058A4 +
and dword ptr [ebp-4] 0 +
lea ecx [esi+8] +
mov dword ptr [esi] offset off_100DD5C +
call sub_10151DA  +
mov byte ptr [ebp-4] 1 +
lea ecx [esi+0Ch] +
call sub_10151DA  +
mov byte ptr [ebp-4] 2 +
lea ecx [esi+10h] +
call sub_10151DA  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax esi +
call sub_1021FA5  +
retn   +
***
call sub_1021EB9  +
mov esi ecx +
mov [ebp-10h] esi +
xor eax eax +
mov dword ptr [esi] offset off_10058A4 +
mov [esi+4] eax +
mov [ebp-4] eax +
mov dword ptr [esi] offset off_100DD60 +
mov [esi+8] eax +
mov byte ptr [ebp-4] 1 +
lea ecx [esi+0Ch] +
call sub_10151DA  +
mov byte ptr [ebp-4] 2 +
lea ecx [esi+10h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 3 +
lea ecx [esi+14h] +
call sub_10151DA  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax esi +
call sub_1021FA5  +
retn   +
***
call sub_1021EB9  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [ebp-4] 2 +
lea ecx [esi+10h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
lea ecx [esi+0Ch] +
call sub_1015174  +
mov byte ptr [ebp-4] 0 +
lea ecx [esi+8] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov dword ptr [esi] offset off_10058A4 +
call sub_1021FA5  +
retn   +
***
call sub_1021EB9  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [ebp-4] 3 +
lea ecx [esi+14h] +
call sub_1015174  +
mov byte ptr [ebp-4] 2 +
lea ecx [esi+10h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
lea ecx [esi+0Ch] +
call sub_1015174  +
mov byte ptr [ebp-4] 0 +
lea ecx [esi+8] +
call sub_103EAEC  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov dword ptr [esi] offset off_10058A4 +
call sub_1021FA5  +
retn   +
***
call sub_1021EB9  +
mov [ebp-10h] ecx +
or dword ptr [ebp-4] 0FFFFFFFFh +
call sub_103ED3E  +
call sub_1021FA5  +
retn   +
***
call sub_1021EB9  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+8]  +
call sub_103ED64  +
and dword ptr [ebp-4] 0 +
mov eax [ebp+0Ch] +
mov [esi+0Ch] eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax esi +
call sub_1021FA5  +
retn 8  +
***
call sub_1021EB9  +
and dword ptr [ebp-10h] 0 +
push 0  +
push dword ptr [ebp+8]  +
call sub_10464ED  +
and dword ptr [ebp-4] 0 +
mov dword ptr [ebp-10h] 1 +
mov eax [ebp+8] +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EB9  +
and dword ptr [ebp-10h] 0 +
add ecx 8 +
push ecx  +
mov ecx [ebp+8] +
call sub_10151F2  +
and dword ptr [ebp-4] 0 +
mov dword ptr [ebp-10h] 1 +
mov eax [ebp+8] +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EB9  +
and dword ptr [ebp-10h] 0 +
add ecx 0D8h +
push ecx  +
mov ecx [ebp+8] +
call sub_10151F2  +
and dword ptr [ebp-4] 0 +
mov dword ptr [ebp-10h] 1 +
mov eax [ebp+8] +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EB9  +
mov esi ecx +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-10h] 0 +
mov ecx [ebp+8] +
call sub_10151DA  +
and dword ptr [ebp-4] 0 +
lea eax [esi+0Ch] +
mov ecx [eax] +
cmp dword ptr [ecx-0Ch] 0 +
mov dword ptr [ebp-10h] 1 +
jz loc_103F06D  +
push dword ptr [ebp+8]  +
add esi 0D8h +
push eax  +
push esi  +
call sub_10360F6  +
mov eax [ebp+8] +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EB9  +
mov esi ecx +
push 14h  +
call sub_10225EB  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_103F0A6  +
call sub_103EDD1  +
or dword ptr [ebp-4] 0FFFFFFFFh +
push eax  +
mov ecx esi +
call sub_104B66E  +
mov eax esi +
call sub_1021FA5  +
retn   +
***
call sub_1021EB9  +
mov esi ecx +
push 1Ch  +
call sub_10225EB  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_103F0E8  +
call sub_103EE27  +
or dword ptr [ebp-4] 0FFFFFFFFh +
push eax  +
mov ecx esi +
call sub_104B66E  +
mov eax esi +
call sub_1021FA5  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_103EE84  +
test byte ptr [ebp+8] 1 +
jz loc_103F11B  +
push esi  +
call sub_1021179  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_103EED1  +
test byte ptr [ebp+8] 1 +
jz loc_103F141  +
push esi  +
call sub_1021179  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1021EF1  +
mov esi ecx +
mov [ebp-14h] esi +
xor ebx ebx +
cmp [esi+2Ch] ebx +
jnz loc_103F1A1  +
push 10h  +
push dword ptr [esi+24h]  +
lea eax [esi+28h] +
push eax  +
call sub_1014B4F  +
cmp eax ebx +
jnz loc_103F181  +
push 8007000Eh  +
call loc_1014415  +
mov ecx [esi+24h] +
mov edx ecx +
shl edx 4 +
lea eax [edx+eax-0Ch] +
dec ecx  +
cmp ecx ebx +
jl loc_103F1A1  +
mov edx [esi+2Ch] +
mov [eax+8] edx +
mov [esi+2Ch] eax +
sub eax 10h +
dec ecx  +
jns loc_103F192  +
mov edi [esi+2Ch] +
xor eax eax +
cmp edi ebx +
setnz al  +
cmp eax ebx +
jnz loc_103F1B6  +
push 80004005h  +
jmp loc_103F17C  +
mov [ebp-18h] edi +
mov eax [edi+8] +
mov [esi+2Ch] eax +
mov [ebp-4] ebx +
mov [ebp-1Ch] edi +
mov byte ptr [ebp-4] 1 +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
mov ecx edi +
call sub_103EF4D  +
mov [ebp-4] bl +
or dword ptr [ebp-4] 0FFFFFFFFh +
inc dword ptr [esi+4]  +
mov eax [ebp+0Ch] +
shl eax 2 +
mov ecx [esi] +
mov ecx [eax+ecx] +
mov [edi+8] ecx +
mov ecx [esi] +
mov [eax+ecx] edi +
mov eax [esi+4] +
cmp eax [esi+18h] +
jbe loc_103F210  +
cmp [esi+20h] ebx +
jnz loc_103F210  +
push eax  +
mov ecx esi +
call sub_10422B8  +
push eax  +
mov ecx esi +
call sub_10423AB  +
mov eax edi +
call sub_1021FA5  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_103EF2A  +
test [ebp+arg_0] 1 +
jz loc_103F252  +
push esi  +
call sub_1021179  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jnz loc_103F26D  +
call sub_103F07D  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jnz loc_103F285  +
call sub_103F0BF  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jnz loc_103F2B3  +
push 1  +
push dword ptr [esi+8]  +
call sub_1037641  +
test al al +
jnz loc_103F2B3  +
push 8007000Eh  +
call loc_1014415  +
push [ebp+arg_8]  +
mov ecx esi +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_103F14D  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
test edi edi +
jnz loc_103F2E7  +
push 80004005h  +
call loc_1014415  +
push 0  +
mov ecx edi +
call sub_103F238  +
mov eax [esi+2Ch] +
mov [edi+8] eax +
dec dword ptr [esi+4]  +
mov eax [esi+4] +
mov [esi+2Ch] edi +
cmp eax [esi+1Ch] +
jnb loc_103F31A  +
cmp dword ptr [esi+20h] 0 +
jnz loc_103F31A  +
push eax  +
mov ecx esi +
call sub_10422B8  +
push eax  +
mov ecx esi +
call sub_10423AB  +
cmp dword ptr [esi+4] 0 +
jnz loc_103F327  +
mov ecx esi +
call sub_103D067  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
mov ecx [ebp+0Ch] +
mov edi 104h +
push edi  +
call sub_10158A3  +
mov ecx [ebp+8] +
mov ecx [ecx] +
mov edx [ebx] +
and dword ptr [ebp-4] 0 +
mov edx [edx+8] +
lea esi [ebp-4] +
push esi  +
mov esi ds:SetupGetTargetPathW +
push edi  +
push eax  +
push ecx  +
push 0  +
push edx  +
call esi  +
test eax eax +
jz loc_103F374  +
xor esi esi +
inc esi  +
jmp loc_103F3B4  +
call ds:GetLastError  +
cmp eax 7Ah +
jnz loc_103F3B2  +
mov ecx [ebp+0Ch] +
push 0FFFFFFFFh  +
call sub_1015023  +
push dword ptr [ebp-4]  +
mov ecx [ebp+0Ch] +
call sub_10158A3  +
mov ecx [ebp+8] +
mov ecx [ecx] +
mov edx [ebx] +
mov edx [edx+8] +
push 0  +
push edi  +
push eax  +
push ecx  +
push 0  +
push edx  +
call esi  +
mov esi eax +
neg esi  +
sbb esi esi +
neg esi  +
jmp loc_103F3B4  +
xor esi esi +
mov ecx [ebp+0Ch] +
push 0FFFFFFFFh  +
call sub_1015023  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_103EC19  +
test eax eax +
jnz loc_103F3FF  +
push [ebp+var_4]  +
mov ecx esi +
push [ebp+var_8]  +
push [ebp+arg_0]  +
call sub_103F28E  +
add eax 4 +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
inc dword ptr [esi+20h]  +
xor ebx ebx +
cmp [esi] ebx +
jz loc_103F442  +
cmp [esi+8] ebx +
jbe loc_103F442  +
push edi  +
mov eax [esi] +
mov edi [eax+ebx*4] +
jmp loc_103F435  +
mov eax edi +
mov edi [edi+8] +
push eax  +
mov ecx esi +
call sub_103F2CD  +
test edi edi +
jnz loc_103F428  +
inc ebx  +
cmp ebx [esi+8] +
jb loc_103F421  +
xor ebx ebx +
pop edi  +
push dword ptr [esi]  +
call sub_1021189  +
pop ecx  +
mov [esi] ebx +
mov [esi+4] ebx +
cmp [esi+20h] ebx +
jnz loc_103F465  +
push ebx  +
push ebx  +
mov ecx esi +
call sub_10422B8  +
push eax  +
mov ecx esi +
call sub_1037641  +
mov ecx esi +
call sub_103D067  +
dec dword ptr [esi+20h]  +
pop esi  +
pop ebx  +
retn   +
***
call sub_1021EB9  +
mov esi ecx +
push dword ptr [ebp+8]  +
lea ecx [ebp+8] +
call sub_10151F2  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp+8] +
call sub_101CC99  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
push dword ptr [ebp+8]  +
call sub_103D3C9  +
test al al +
setnz bl  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
mov al bl +
call sub_1021FA5  +
retn 8  +
***
call sub_1021EB9  +
mov esi ecx +
lea ecx [ebp-10h] +
call sub_10151DA  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+8]  +
mov ecx esi +
call sub_103F477  +
mov bl al +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_1015174  +
mov al bl +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EF1  +
mov [ebp-1Ch] ecx +
xor ebx ebx +
mov eax [ebp+8] +
cmp [eax] ebx +
jz loc_103F697  +
mov [ebp+8] ebx +
mov [ebp-4] ebx +
mov eax [eax] +
lea ecx [ebp-18h] +
push ecx  +
mov ecx eax +
call sub_104717E  +
mov byte ptr [ebp-4] 1 +
push dword ptr [eax]  +
lea ecx [ebp+8] +
call sub_104B66E  +
mov [ebp-4] bl +
mov ecx [ebp-18h] +
cmp ecx ebx +
jz loc_103F55D  +
call sub_101A986  +
mov [ebp-18h] ebx +
mov edi [ebp+8] +
cmp edi ebx +
jz loc_103F693  +
push ebx  +
mov ecx edi +
call sub_104586C  +
test al al +
jnz loc_103F67F  +
mov byte ptr [ebp-4] 3 +
push ebx  +
mov ecx edi +
call sub_104547E  +
mov [ebp-14h] eax +
mov [ebp-4] ebx +
jmp loc_103F59F  +
or dword ptr [ebp-14h] 0FFFFFFFFh +
and dword ptr [ebp-4] 0 +
mov eax offset loc_103F59A +
retn   +
xor ebx ebx +
mov edi [ebp+8] +
cmp [ebp-14h] ebx +
jl loc_103F67F  +
push dword ptr [ebp-14h]  +
mov ecx [ebp-1Ch] +
add ecx 8 +
call sub_103F3CC  +
mov esi eax +
mov ecx esi +
call sub_103F25E  +
push 1  +
mov ecx edi +
call sub_104586C  +
test al al +
jz loc_103F5D8  +
mov eax [esi] +
lea ecx [eax+8] +
call sub_1014FC6  +
jmp loc_103F5FF  +
push 1  +
lea eax [ebp-20h] +
push eax  +
mov ecx edi +
call sub_10464ED  +
mov byte ptr [ebp-4] 5 +
mov ecx [esi] +
push eax  +
add ecx 8 +
call sub_1015AAF  +
mov [ebp-4] bl +
lea ecx [ebp-20h] +
call sub_1015174  +
push 2  +
mov ecx edi +
call sub_104586C  +
test al al +
jz loc_103F618  +
mov eax [esi] +
lea ecx [eax+0Ch] +
call sub_1014FC6  +
jmp loc_103F63F  +
push 2  +
lea eax [ebp-24h] +
push eax  +
mov ecx edi +
call sub_10464ED  +
mov byte ptr [ebp-4] 6 +
mov ecx [esi] +
push eax  +
add ecx 0Ch +
call sub_1015AAF  +
mov [ebp-4] bl +
lea ecx [ebp-24h] +
call sub_1015174  +
push 4  +
mov ecx edi +
call sub_104586C  +
test al al +
jz loc_103F658  +
mov esi [esi] +
lea ecx [esi+10h] +
call sub_1014FC6  +
jmp loc_103F67F  +
push 4  +
lea eax [ebp-28h] +
push eax  +
mov ecx edi +
call sub_10464ED  +
mov byte ptr [ebp-4] 7 +
mov esi [esi] +
push eax  +
lea ecx [esi+10h] +
call sub_1015AAF  +
mov [ebp-4] bl +
lea ecx [ebp-28h] +
call sub_1015174  +
lea eax [ebp-18h] +
push eax  +
mov ecx edi +
call sub_1046A71  +
mov byte ptr [ebp-4] 2 +
jmp loc_103F541  +
or dword ptr [ebp-4] 0FFFFFFFFh +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EB9  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+8]  +
call sub_10161A7  +
and dword ptr [ebp-4] 0 +
and dword ptr [esi+4] 0 +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax esi +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EB9  +
mov [ebp-10h] ecx +
fld  ds:flt_100B470 +
push 0Ah  +
sub esp 0Ch +
fstp  [esp+14h+var_C] +
fld  ds:flt_100B46C +
fstp  [esp+14h+var_10] +
fld  ds:flt_100B468 +
fstp  [esp+14h+var_14] +
push 11h  +
call sub_103783F  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax [ebp-10h] +
call sub_1021FA5  +
retn   +
***
call sub_1021EB9  +
mov [ebp-10h] ecx +
or dword ptr [ebp-4] 0FFFFFFFFh +
call sub_103D6BC  +
call sub_1021FA5  +
retn   +
***
call sub_1021EB9  +
xor ebx ebx +
mov [ebp-4] ebx +
mov esi [ebp+0Ch] +
mov dword ptr [esi] 0Ch +
mov [ebp+0Ch] ebx +
mov byte ptr [ebp-4] 1 +
push offset aVersion  +
lea ecx [ebp-18h] +
call sub_10161A7  +
mov byte ptr [ebp-4] 2 +
mov ecx [ebp+8] +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
call sub_1046BD3  +
mov byte ptr [ebp-4] 3 +
push dword ptr [eax]  +
lea ecx [ebp+0Ch] +
call sub_104B66E  +
mov byte ptr [ebp-4] 2 +
mov ecx [ebp-14h] +
cmp ecx ebx +
jz loc_103F7B2  +
call sub_101A986  +
mov [ebp-14h] ebx +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-18h] +
call sub_1015174  +
cmp [ebp+0Ch] ebx +
jnz loc_103F7DF  +
mov [esi] ebx +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx [ebp+8] +
cmp ecx ebx +
jz loc_103F7D8  +
call sub_101A986  +
mov [ebp+8] ebx +
xor eax eax +
jmp loc_103F915  +
mov [ebp-14h] ebx +
mov byte ptr [ebp-4] 4 +
push offset aDriverpackaget  +
lea ecx [ebp-1Ch] +
call sub_10161A7  +
mov byte ptr [ebp-4] 5 +
mov ecx [ebp+0Ch] +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-18h] +
push eax  +
call sub_1046D41  +
mov byte ptr [ebp-4] 6 +
push dword ptr [eax]  +
lea ecx [ebp-14h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 5 +
mov ecx [ebp-18h] +
cmp ecx ebx +
jz loc_103F828  +
call sub_101A986  +
mov [ebp-18h] ebx +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-1Ch] +
call sub_1015174  +
mov edi [ebp-14h] +
cmp edi ebx +
jnz loc_103F850  +
mov [esi] ebx +
mov [ebp-4] bl +
mov ecx [ebp+0Ch] +
call sub_101A986  +
mov [ebp+0Ch] ebx +
jmp loc_103F7C5  +
lea ecx [ebp-10h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 7 +
push 1  +
lea eax [ebp-1Ch] +
push eax  +
mov ecx edi +
call sub_10464ED  +
mov byte ptr [ebp-4] 8 +
mov eax [eax] +
push dword ptr [eax-0Ch]  +
lea ecx [ebp-10h] +
push eax  +
call sub_10155F6  +
mov byte ptr [ebp-4] 7 +
lea ecx [ebp-1Ch] +
call sub_1015174  +
mov eax [ebp-10h] +
mov ecx [eax-0Ch] +
lea edx [ebp-20h] +
push edx  +
push ecx  +
push eax  +
push 0Ah  +
push ebx  +
push 15h  +
push offset off_1064624  +
call sub_1035426  +
test eax eax +
jnz loc_103F8CB  +
mov dword ptr [esi] 0Ch +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-10h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
mov ecx edi +
call sub_101A986  +
mov [ebp-14h] ebx +
jmp loc_103F83D  +
mov eax [ebp-20h] +
mov eax dword_1064650[eax*4] +
mov [esi] eax +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-10h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
mov ecx edi +
call sub_101A986  +
mov [ebp-14h] ebx +
mov [ebp-4] bl +
mov ecx [ebp+0Ch] +
call sub_101A986  +
mov [ebp+0Ch] ebx +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx [ebp+8] +
cmp ecx ebx +
jz loc_103F912  +
call sub_101A986  +
mov [ebp+8] ebx +
xor eax eax +
inc eax  +
call sub_1021FA5  +
retn 8  +
***
call sub_1021EB9  +
mov esi ecx +
xor ebx ebx +
mov [ebp-10h] ebx +
mov [ebp-28h] ebx +
mov [ebp-4] ebx +
mov [ebp-38h] ebx +
mov byte ptr [ebp-4] 1 +
mov [ebp-34h] ebx +
mov byte ptr [ebp-4] 2 +
mov [ebp-30h] ebx +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-24h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-24h] +
call sub_1014FC6  +
mov edi [ebp+8] +
mov ecx edi +
call sub_1014FC6  +
cmp [esi+4] ebx +
jnz loc_103F98A  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-24h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
xor eax eax +
jmp loc_103FE1A  +
mov eax [esi+0DCh] +
cmp eax ebx +
jle loc_103FDBD  +
cmp eax 5 +
jle loc_103FDA8  +
cmp eax 6 +
jz loc_103FB83  +
cmp eax 9 +
jz loc_103F9C1  +
cmp eax 0Ah +
jz loc_103FDA8  +
cmp eax 0Bh +
jnz loc_103FDBD  +
cmp eax 0Bh +
jnz loc_103FA11  +
push offset aClasscoinstall  +
lea ecx [ebp-40h] +
call sub_10161A7  +
mov byte ptr [ebp-4] 11h +
mov ecx [esi+4] +
lea eax [ebp-40h] +
push eax  +
lea eax [ebp-3Ch] +
push eax  +
call sub_1046BD3  +
mov byte ptr [ebp-4] 12h +
push dword ptr [eax]  +
lea ecx [ebp-28h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 11h +
mov ecx [ebp-3Ch] +
cmp ecx ebx +
jz loc_103FA08  +
call sub_101A986  +
mov [ebp-3Ch] ebx +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-40h] +
jmp loc_103FA63  +
cmp eax 9 +
jnz loc_103FDBD  +
push offset aDevicefilter  +
lea ecx [ebp-48h] +
call sub_10161A7  +
mov byte ptr [ebp-4] 13h +
mov ecx [esi+4] +
lea eax [ebp-48h] +
push eax  +
lea eax [ebp-44h] +
push eax  +
call sub_1046BD3  +
mov byte ptr [ebp-4] 14h +
push dword ptr [eax]  +
lea ecx [ebp-28h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 13h +
mov ecx [ebp-44h] +
cmp ecx ebx +
jz loc_103FA5C  +
call sub_101A986  +
mov [ebp-44h] ebx +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-48h] +
call sub_1015174  +
cmp [ebp-28h] ebx +
jz loc_103FDBD  +
mov ecx [ebp-28h] +
lea eax [ebp-4Ch] +
push eax  +
call sub_104717E  +
mov byte ptr [ebp-4] 15h +
push dword ptr [eax]  +
lea ecx [ebp-34h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 4 +
mov ecx [ebp-4Ch] +
cmp ecx ebx +
jz loc_103FA9E  +
call sub_101A986  +
mov [ebp-4Ch] ebx +
mov ecx [ebp-34h] +
cmp ecx ebx +
jz loc_103FDBD  +
push 1  +
lea eax [ebp-6Ch] +
push eax  +
call sub_104657D  +
mov byte ptr [ebp-4] 16h +
push eax  +
lea ecx [ebp-24h] +
call sub_1015959  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-6Ch] +
call sub_1015174  +
mov eax [ebp-24h] +
cmp [eax-0Ch] ebx +
jz loc_103FDBD  +
mov esi [esi+4] +
lea eax [ebp-24h] +
push eax  +
lea eax [ebp-50h] +
push eax  +
mov ecx esi +
call sub_1046BD3  +
mov byte ptr [ebp-4] 17h +
push dword ptr [eax]  +
lea ecx [ebp-38h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 4 +
mov ecx [ebp-50h] +
cmp ecx ebx +
jz loc_103FB0C  +
call sub_101A986  +
mov [ebp-50h] ebx +
mov ecx [ebp-38h] +
cmp ecx ebx +
jz loc_103FDBD  +
lea eax [ebp-54h] +
push eax  +
call sub_104717E  +
mov byte ptr [ebp-4] 18h +
push dword ptr [eax]  +
lea ecx [ebp-30h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 4 +
mov ecx [ebp-54h] +
cmp ecx ebx +
jz loc_103FB41  +
call sub_101A986  +
mov [ebp-54h] ebx +
mov ecx [ebp-30h] +
cmp ecx ebx +
jz loc_103FDBD  +
push 1  +
lea eax [ebp-70h] +
push eax  +
call sub_10464ED  +
mov byte ptr [ebp-4] 19h +
push eax  +
mov ecx edi +
call sub_1015AAF  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-70h] +
call sub_1015174  +
mov eax [edi] +
mov eax [eax-0Ch] +
xor ecx ecx +
cmp eax ebx +
setnz cl  +
mov [ebp-10h] ecx +
jmp loc_103FDC0  +
push offset aManufacturer  +
lea ecx [ebp-58h] +
call sub_10161A7  +
mov byte ptr [ebp-4] 5 +
mov ecx [esi+4] +
lea eax [ebp-58h] +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
call sub_1046BD3  +
mov byte ptr [ebp-4] 7 +
lea ecx [ebp-58h] +
call sub_1015174  +
cmp [ebp-2Ch] ebx +
jz loc_103FD93  +
mov [ebp-14h] ebx +
mov byte ptr [ebp-4] 8 +
mov ecx [ebp-2Ch] +
lea eax [ebp-5Ch] +
push eax  +
call sub_104717E  +
mov byte ptr [ebp-4] 9 +
push dword ptr [eax]  +
lea ecx [ebp-14h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 8 +
mov ecx [ebp-5Ch] +
cmp ecx ebx +
jz loc_103FD3D  +
call sub_101A986  +
mov [ebp-5Ch] ebx +
jmp loc_103FD3D  +
mov ecx [ebp-14h] +
push 1  +
call sub_104586C  +
test al al +
jnz loc_103FD10  +
mov ecx [ebp-14h] +
push ebx  +
lea eax [ebp-1Ch] +
push eax  +
call sub_104657D  +
mov byte ptr [ebp-4] 0Bh +
call ds:GetLastError  +
test eax eax +
jnz loc_103FD04  +
mov eax [ebp-1Ch] +
cmp [eax-0Ch] ebx +
jz loc_103FD04  +
mov ecx [esi+4] +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-18h] +
push eax  +
call sub_1046BD3  +
mov byte ptr [ebp-4] 0Ch +
cmp [ebp-18h] ebx +
jz loc_103FCF1  +
mov [ebp-20h] ebx +
mov byte ptr [ebp-4] 0Dh +
mov ecx [ebp-18h] +
lea eax [ebp-60h] +
push eax  +
call sub_104717E  +
mov byte ptr [ebp-4] 0Eh +
push dword ptr [eax]  +
lea ecx [ebp-20h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 0Dh +
mov ecx [ebp-60h] +
cmp ecx ebx +
jz loc_103FCE6  +
call sub_101A986  +
mov [ebp-60h] ebx +
jmp loc_103FCE6  +
push 1  +
lea eax [ebp-74h] +
push eax  +
mov ecx edi +
call sub_10464ED  +
mov byte ptr [ebp-4] 10h +
mov ecx [ebp+8] +
push eax  +
call sub_1015AAF  +
mov byte ptr [ebp-4] 0Dh +
lea ecx [ebp-74h] +
call sub_1015174  +
mov eax [ebp+8] +
mov eax [eax] +
cmp [eax-0Ch] ebx +
jnz loc_103FD48  +
lea eax [ebp-64h] +
push eax  +
mov ecx edi +
call sub_1046A71  +
mov byte ptr [ebp-4] 0Fh +
push dword ptr [eax]  +
lea ecx [ebp-20h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 0Dh +
mov ecx [ebp-64h] +
cmp ecx ebx +
jz loc_103FCE6  +
call sub_101A986  +
mov [ebp-64h] ebx +
mov edi [ebp-20h] +
cmp edi ebx +
jnz loc_103FC86  +
mov byte ptr [ebp-4] 0Ch +
mov byte ptr [ebp-4] 0Bh +
mov ecx [ebp-18h] +
cmp ecx ebx +
jz loc_103FD04  +
call sub_101A986  +
mov [ebp-18h] ebx +
mov byte ptr [ebp-4] 8 +
lea ecx [ebp-1Ch] +
call sub_1015174  +
mov ecx [ebp-14h] +
lea eax [ebp-68h] +
push eax  +
call sub_1046A71  +
mov byte ptr [ebp-4] 0Ah +
push dword ptr [eax]  +
lea ecx [ebp-14h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 8 +
mov ecx [ebp-68h] +
cmp ecx ebx +
jz loc_103FD3D  +
call sub_101A986  +
mov [ebp-68h] ebx +
cmp [ebp-14h] ebx +
jnz loc_103FBF6  +
jmp loc_103FD80  +
mov dword ptr [ebp-10h] 1 +
mov byte ptr [ebp-4] 0Ch +
cmp edi ebx +
jz loc_103FD61  +
mov ecx edi +
call sub_101A986  +
mov [ebp-20h] ebx +
mov byte ptr [ebp-4] 0Bh +
mov ecx [ebp-18h] +
cmp ecx ebx +
jz loc_103FD74  +
call sub_101A986  +
mov [ebp-18h] ebx +
mov byte ptr [ebp-4] 8 +
lea ecx [ebp-1Ch] +
call sub_1015174  +
mov byte ptr [ebp-4] 7 +
mov ecx [ebp-14h] +
cmp ecx ebx +
jz loc_103FD93  +
call sub_101A986  +
mov [ebp-14h] ebx +
mov byte ptr [ebp-4] 4 +
mov ecx [ebp-2Ch] +
cmp ecx ebx +
jz loc_103FDC0  +
call sub_101A986  +
mov [ebp-2Ch] ebx +
jmp loc_103FDC0  +
push offset aDefaultinstall  +
mov ecx edi +
call sub_10158CD  +
mov dword ptr [ebp-10h] 1 +
jmp loc_103FDC0  +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-24h] +
call sub_1015174  +
mov byte ptr [ebp-4] 2 +
mov ecx [ebp-30h] +
cmp ecx ebx +
jz loc_103FDDF  +
call sub_101A986  +
mov [ebp-30h] ebx +
mov byte ptr [ebp-4] 1 +
mov ecx [ebp-34h] +
cmp ecx ebx +
jz loc_103FDF2  +
call sub_101A986  +
mov [ebp-34h] ebx +
mov [ebp-4] bl +
mov ecx [ebp-38h] +
cmp ecx ebx +
jz loc_103FE04  +
call sub_101A986  +
mov [ebp-38h] ebx +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx [ebp-28h] +
cmp ecx ebx +
jz loc_103FE17  +
call sub_101A986  +
mov [ebp-28h] ebx +
mov eax [ebp-10h] +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EB9  +
mov esi ecx +
xor ebx ebx +
cmp [esi+4] ebx +
jnz loc_103FE46  +
xor eax eax +
call sub_1021FA5  +
retn 4  +
lea ecx [ebp-18h] +
call sub_10151DA  +
mov [ebp-4] ebx +
lea eax [ebp-18h] +
push eax  +
mov ecx esi +
call sub_103F922  +
test eax eax +
jnz loc_103FE6E  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-18h] +
call sub_1015174  +
jmp loc_103FE3C  +
mov ecx [esi+4] +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-10h] +
push eax  +
call sub_1046C8D  +
mov byte ptr [ebp-4] 1 +
cmp [ebp-10h] ebx +
jnz loc_103FE9B  +
mov [ebp-4] bl +
mov ecx [ebp-10h] +
cmp ecx ebx +
jz loc_103FE60  +
call sub_101A986  +
mov [ebp-10h] ebx +
jmp loc_103FE60  +
push offset aAddproperty  +
lea ecx [ebp-30h] +
call sub_10161A7  +
mov byte ptr [ebp-4] 2 +
mov ecx [ebp-10h] +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
call sub_1046D41  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-30h] +
call sub_1015174  +
mov ecx [ebp-14h] +
cmp ecx ebx +
jnz loc_103FEE4  +
mov byte ptr [ebp-4] 1 +
mov ecx [ebp-14h] +
cmp ecx ebx +
jz loc_103FE87  +
call sub_101A986  +
mov [ebp-14h] ebx +
jmp loc_103FE87  +
push 1  +
lea eax [ebp-28h] +
push eax  +
call sub_10464ED  +
mov byte ptr [ebp-4] 5 +
mov eax [ebp-28h] +
cmp [eax-0Ch] ebx +
jnz loc_103FF09  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-28h] +
call sub_1015174  +
jmp loc_103FECF  +
mov ecx [esi+4] +
lea eax [ebp-28h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
call sub_1046BD3  +
mov byte ptr [ebp-4] 6 +
mov ecx [ebp-1Ch] +
cmp ecx ebx +
jnz loc_103FF39  +
mov byte ptr [ebp-4] 5 +
mov ecx [ebp-1Ch] +
cmp ecx ebx +
jz loc_103FEFB  +
call sub_101A986  +
mov [ebp-1Ch] ebx +
jmp loc_103FEFB  +
lea eax [ebp-24h] +
push eax  +
call sub_104717E  +
mov byte ptr [ebp-4] 7 +
mov ecx [ebp-24h] +
cmp ecx ebx +
jnz loc_103FF62  +
mov byte ptr [ebp-4] 6 +
mov ecx [ebp-24h] +
cmp ecx ebx +
jz loc_103FF24  +
call sub_101A986  +
mov [ebp-24h] ebx +
jmp loc_103FF24  +
push 5  +
lea eax [ebp-20h] +
push eax  +
call sub_10464ED  +
mov byte ptr [ebp-4] 8 +
mov eax [ebp-20h] +
mov eax [eax-0Ch] +
cmp eax ebx +
jnz loc_103FFF1  +
mov byte ptr [ebp-4] 7 +
lea ecx [ebp-20h] +
call sub_1015174  +
mov byte ptr [ebp-4] 6 +
mov ecx [ebp-24h] +
cmp ecx ebx +
jz loc_103FF9A  +
call sub_101A986  +
mov [ebp-24h] ebx +
mov byte ptr [ebp-4] 5 +
mov ecx [ebp-1Ch] +
cmp ecx ebx +
jz loc_103FFAD  +
call sub_101A986  +
mov [ebp-1Ch] ebx +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-28h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
mov ecx [ebp-14h] +
cmp ecx ebx +
jz loc_103FFCC  +
call sub_101A986  +
mov [ebp-14h] ebx +
mov [ebp-4] bl +
mov ecx [ebp-10h] +
cmp ecx ebx +
jz loc_103FFDE  +
call sub_101A986  +
mov [ebp-10h] ebx +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-18h] +
call sub_1015174  +
mov eax ebx +
jmp loc_103FE3E  +
xor ecx ecx +
push 2  +
xor esi esi +
inc eax  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_1054617  +
mov edi eax +
pop ecx  +
cmp edi ebx +
jz loc_1040058  +
mov eax [ebp-20h] +
cmp [eax-0Ch] ebx +
mov [ebp-30h] ebx +
mov [ebp-2Ch] ebx +
jle loc_104010B  +
push dword ptr [ebp-2Ch]  +
lea ecx [ebp-20h] +
call loc_103EC7B  +
cmp ax 20h +
jnz loc_10400C2  +
cmp [ebp-30h] ebx +
jz loc_10400EF  +
mov ecx [ebp+8] +
xor eax eax +
push edi  +
mov [edi+esi*2] ax +
call sub_10158CD  +
xor esi esi +
inc esi  +
push edi  +
call sub_1021189  +
pop ecx  +
mov byte ptr [ebp-4] 7 +
lea ecx [ebp-20h] +
call sub_1015174  +
mov byte ptr [ebp-4] 6 +
mov ecx [ebp-24h] +
cmp ecx ebx +
jz loc_1040077  +
call sub_101A986  +
mov [ebp-24h] ebx +
mov byte ptr [ebp-4] 5 +
mov ecx [ebp-1Ch] +
cmp ecx ebx +
jz loc_104008A  +
call sub_101A986  +
mov [ebp-1Ch] ebx +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-28h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
mov ecx [ebp-14h] +
cmp ecx ebx +
jz loc_10400A9  +
call sub_101A986  +
mov [ebp-14h] ebx +
mov [ebp-4] bl +
mov ecx [ebp-10h] +
cmp ecx ebx +
jz loc_10400BB  +
call sub_101A986  +
mov [ebp-10h] ebx +
mov ebx esi +
jmp loc_103FFDE  +
push dword ptr [ebp-2Ch]  +
lea ecx [ebp-20h] +
call loc_103EC7B  +
cmp ax 2Ch +
jz loc_1040103  +
cmp [ebp-30h] ebx +
jnz loc_10400DF  +
mov dword ptr [ebp-30h] 1 +
push dword ptr [ebp-2Ch]  +
lea ecx [ebp-20h] +
call loc_103EC7B  +
mov [edi+esi*2] ax +
inc esi  +
inc dword ptr [ebp-2Ch]  +
mov eax [ebp-20h] +
mov ecx [ebp-2Ch] +
cmp ecx [eax-0Ch] +
jl loc_1040021  +
jmp loc_104010B  +
cmp esi ebx +
jnz loc_104003F  +
xor esi esi +
jmp loc_1040051  +
***
call sub_1021EB9  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+8]  +
call sub_103F6AE  +
and dword ptr [ebp-4] 0 +
mov eax [ebp+0Ch] +
mov [esi+0Ch] eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax esi +
call sub_1021FA5  +
retn 8  +
***
call sub_1021EB9  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
and dword ptr [esi] 0 +
mov byte ptr [ebp-4] 1 +
fld  ds:flt_100B470 +
push 0Ah  +
sub esp 0Ch +
fstp  [esp+14h+var_C] +
lea ecx [esi+8] +
fld  ds:flt_100B46C +
fstp  [esp+14h+var_10] +
fld  ds:flt_100B468 +
fstp  [esp+14h+var_14] +
push 11h  +
call sub_103783F  +
mov byte ptr [ebp-4] 2 +
fld  ds:flt_100B470 +
push 0Ah  +
sub esp 0Ch +
fstp  [esp+14h+var_C] +
lea ecx [esi+48h] +
fld  ds:flt_100B46C +
fstp  [esp+14h+var_10] +
fld  ds:flt_100B468 +
fstp  [esp+14h+var_14] +
push 11h  +
call sub_103783F  +
mov byte ptr [ebp-4] 3 +
lea ecx [esi+78h] +
call sub_103F6E2  +
mov byte ptr [ebp-4] 4 +
lea ecx [esi+0A8h] +
call sub_103F6E2  +
mov byte ptr [ebp-4] 5 +
lea ecx [esi+0D8h] +
call sub_103F6E2  +
mov byte ptr [ebp-4] 6 +
lea ecx [esi+108h] +
call sub_103F6E2  +
mov byte ptr [ebp-4] 7 +
lea ecx [esi+138h] +
call sub_103F6E2  +
mov byte ptr [ebp-4] 8 +
lea ecx [esi+168h] +
call sub_103F6E2  +
mov byte ptr [ebp-4] 9 +
lea ecx [esi+198h] +
call sub_103F6E2  +
mov byte ptr [ebp-4] 0Ah +
lea ecx [esi+1C8h] +
call sub_103F6E2  +
mov byte ptr [ebp-4] 0Bh +
lea ecx [esi+1F8h] +
call sub_103F6E2  +
mov byte ptr [ebp-4] 0Ch +
lea eax [ebp+8] +
push eax  +
mov ecx esi +
call sub_103ECA6  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx [ebp+8] +
test ecx ecx +
jz loc_104026C  +
call sub_101A986  +
and dword ptr [ebp+8] 0 +
mov eax esi +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EB9  +
mov esi ecx +
mov [ebp-10h] esi +
lea edi [esi+4] +
xor ebx ebx +
mov [edi] ebx +
mov [ebp-4] ebx +
lea ecx [esi+8] +
call sub_10151DA  +
mov byte ptr [ebp-4] 1 +
lea ecx [esi+0Ch] +
call sub_10151DA  +
mov byte ptr [ebp-4] 2 +
lea ecx [esi+10h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 3 +
lea ecx [esi+14h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 4 +
fld  ds:flt_100B470 +
push 0Ah  +
sub esp 0Ch +
fstp  [esp+14h+var_C] +
lea ecx [esi+18h] +
fld  ds:flt_100B46C +
fstp  [esp+14h+var_10] +
fld  ds:flt_100B468 +
fstp  [esp+14h+var_14] +
push 11h  +
call sub_103783F  +
mov byte ptr [ebp-4] 5 +
lea ecx [esi+48h] +
call sub_103F6E2  +
mov byte ptr [ebp-4] 6 +
lea ecx [esi+78h] +
call sub_103F6E2  +
mov byte ptr [ebp-4] 7 +
lea ecx [esi+0A8h] +
call sub_103F6E2  +
mov byte ptr [ebp-4] 8 +
lea ecx [esi+0D8h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 9 +
push ebx  +
call ds:CoInitialize  +
push ebx  +
mov ecx edi +
call sub_104B66E  +
mov [esi+0DCh] ebx +
mov dword ptr [esi] 1 +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax esi +
call sub_1021FA5  +
retn   +
***
call sub_1021EB9  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [ebp-4] 9 +
cmp dword ptr [esi] 0 +
jz loc_104037A  +
call sub_103EBC5  +
mov byte ptr [ebp-4] 8 +
lea ecx [esi+0D8h] +
call sub_1015174  +
mov byte ptr [ebp-4] 7 +
lea ecx [esi+0A8h] +
call sub_103F72C  +
mov byte ptr [ebp-4] 6 +
lea ecx [esi+78h] +
call sub_103F72C  +
mov byte ptr [ebp-4] 5 +
lea ecx [esi+48h] +
call sub_103F72C  +
mov byte ptr [ebp-4] 4 +
lea ecx [esi+18h] +
call sub_1037B1B  +
mov byte ptr [ebp-4] 3 +
lea ecx [esi+14h] +
call sub_1015174  +
mov byte ptr [ebp-4] 2 +
lea ecx [esi+10h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
lea ecx [esi+0Ch] +
call sub_1015174  +
mov byte ptr [ebp-4] 0 +
lea ecx [esi+8] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [esi+4] +
call sub_103EAEC  +
call sub_1021FA5  +
retn   +
***
call sub_1021EB9  +
mov esi ecx +
lea ecx [ebp-10h] +
call sub_10151DA  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-14h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-18h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 2 +
push 0  +
lea ebx [esi+8] +
push ebx  +
push ecx  +
mov ecx esp +
mov [ebp-1Ch] esp +
push dword ptr [ebp+8]  +
call sub_10151F2  +
mov byte ptr [ebp-4] 3 +
mov byte ptr [ebp-4] 2 +
call sub_1036735  +
test eax eax +
jz loc_104048A  +
mov esi eax +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-18h] +
call sub_1015174  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-14h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_1015174  +
mov eax esi +
call sub_1021FA5  +
retn 4  +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-10h] +
push eax  +
push ebx  +
call sub_1036032  +
test al al +
jnz loc_10404A1  +
push 6Eh  +
pop esi  +
jmp loc_104045C  +
lea eax [ebp-10h] +
lea ecx [esi+0D8h] +
push eax  +
call sub_1015959  +
lea edi [esi+4] +
mov ecx edi +
call sub_103ECE0  +
mov ecx [edi] +
push ebx  +
call sub_1046459  +
test eax eax +
jz loc_10404D1  +
cmp eax 0E0000100h +
jnz loc_104045A  +
push 0Dh  +
jmp loc_104049E  +
lea ebx [esi+0DCh] +
push ebx  +
push ecx  +
mov ecx esp +
mov [ebp+8] esp +
push edi  +
call sub_101C334  +
mov byte ptr [ebp-4] 4 +
mov byte ptr [ebp-4] 2 +
call sub_103F74F  +
test eax eax +
jnz loc_10404FF  +
cmp [ebx] eax +
jnz loc_10404FF  +
mov dword ptr [ebx] 6 +
lea eax [esi+0Ch] +
push eax  +
mov ecx esi +
call sub_103EBE6  +
xor esi esi +
jmp loc_104045C  +
***
call sub_1021EB9  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [ebp-4] 0Ah +
lea ecx [esi+1F8h] +
call sub_103F72C  +
mov byte ptr [ebp-4] 9 +
lea ecx [esi+1C8h] +
call sub_103F72C  +
mov byte ptr [ebp-4] 8 +
lea ecx [esi+198h] +
call sub_103F72C  +
mov byte ptr [ebp-4] 7 +
lea ecx [esi+168h] +
call sub_103F72C  +
mov byte ptr [ebp-4] 6 +
lea ecx [esi+138h] +
call sub_103F72C  +
mov byte ptr [ebp-4] 5 +
lea ecx [esi+108h] +
call sub_103F72C  +
mov byte ptr [ebp-4] 4 +
lea ecx [esi+0D8h] +
call sub_103F72C  +
mov byte ptr [ebp-4] 3 +
lea ecx [esi+0A8h] +
call sub_103F72C  +
mov byte ptr [ebp-4] 2 +
lea ecx [esi+78h] +
call sub_103F72C  +
mov byte ptr [ebp-4] 1 +
lea ecx [esi+48h] +
call sub_1037B1B  +
mov byte ptr [ebp-4] 0 +
lea ecx [esi+8] +
call sub_103F40C  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_103EAEC  +
call sub_1021FA5  +
retn   +
***
call sub_1021EF1  +
mov esi ecx +
mov [ebp-14h] esi +
xor ebx ebx +
cmp [esi+2Ch] ebx +
jnz loc_1040630  +
push 10h  +
push dword ptr [esi+24h]  +
lea eax [esi+28h] +
push eax  +
call sub_1014B4F  +
cmp eax ebx +
jnz loc_1040610  +
push 8007000Eh  +
call loc_1014415  +
mov ecx [esi+24h] +
mov edx ecx +
shl edx 4 +
lea eax [edx+eax-0Ch] +
dec ecx  +
cmp ecx ebx +
jl loc_1040630  +
mov edx [esi+2Ch] +
mov [eax+8] edx +
mov [esi+2Ch] eax +
sub eax 10h +
dec ecx  +
jns loc_1040621  +
mov edi [esi+2Ch] +
xor eax eax +
cmp edi ebx +
setnz al  +
cmp eax ebx +
jnz loc_1040645  +
push 80004005h  +
jmp loc_104060B  +
mov [ebp-18h] edi +
mov eax [edi+8] +
mov [esi+2Ch] eax +
mov [ebp-4] ebx +
mov [ebp-1Ch] edi +
mov byte ptr [ebp-4] 1 +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
mov ecx edi +
call sub_1040117  +
mov [ebp-4] bl +
or dword ptr [ebp-4] 0FFFFFFFFh +
inc dword ptr [esi+4]  +
mov eax [ebp+0Ch] +
shl eax 2 +
mov ecx [esi] +
mov ecx [eax+ecx] +
mov [edi+8] ecx +
mov ecx [esi] +
mov [eax+ecx] edi +
mov eax [esi+4] +
cmp eax [esi+18h] +
jbe loc_104069F  +
cmp [esi+20h] ebx +
jnz loc_104069F  +
push eax  +
mov ecx esi +
call sub_10422B8  +
push eax  +
mov ecx esi +
call sub_10423AB  +
mov eax edi +
call sub_1021FA5  +
retn 0Ch  +
***
call sub_1021EB9  +
mov esi ecx +
xor ebx ebx +
mov [ebp-4] ebx +
mov ecx [esi+4] +
cmp ecx ebx +
jnz loc_10406F7  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
xor eax eax +
call sub_1021FA5  +
retn 8  +
mov eax [ebp+8] +
cmp [eax-0Ch] ebx +
jnz loc_104070F  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
mov eax ebx +
jmp loc_10406EF  +
lea eax [ebp+8] +
push eax  +
lea eax [ebp-14h] +
push eax  +
call sub_1046C8D  +
mov byte ptr [ebp-4] 1 +
mov eax [ebp-14h] +
cmp eax ebx +
jnz loc_104073E  +
mov [ebp-4] bl +
mov ecx [ebp-14h] +
cmp ecx ebx +
jz loc_1040739  +
call sub_101A986  +
mov [ebp-14h] ebx +
xor ebx ebx +
inc ebx  +
jmp loc_10406FF  +
push offset String2  +
add eax 0Ch +
push eax  +
lea eax [ebp-24h] +
push eax  +
call sub_1015847  +
mov byte ptr [ebp-4] 2 +
push offset aServices  +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
call sub_1015847  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-24h] +
call sub_1015174  +
mov ecx [esi+4] +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-18h] +
push eax  +
call sub_1046BD3  +
mov byte ptr [ebp-4] 5 +
cmp [ebp-18h] ebx +
jnz loc_10407AC  +
mov byte ptr [ebp-4] 4 +
mov ecx [ebp-18h] +
cmp ecx ebx +
jz loc_104079B  +
call sub_101A986  +
mov [ebp-18h] ebx +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-1Ch] +
call sub_1015174  +
jmp loc_1040727  +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 6 +
push offset aAddservice  +
lea ecx [ebp-24h] +
call sub_10161A7  +
mov byte ptr [ebp-4] 7 +
mov ecx [ebp-18h] +
lea eax [ebp-24h] +
push eax  +
lea eax [ebp-20h] +
push eax  +
call sub_1046D41  +
mov byte ptr [ebp-4] 8 +
push dword ptr [eax]  +
lea ecx [ebp-10h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 7 +
mov ecx [ebp-20h] +
cmp ecx ebx +
jz loc_10407F5  +
call sub_101A986  +
mov [ebp-20h] ebx +
mov byte ptr [ebp-4] 6 +
lea ecx [ebp-24h] +
call sub_1015174  +
jmp loc_104085F  +
mov ecx [ebp-10h] +
push 1  +
lea eax [ebp-24h] +
push eax  +
call sub_10464ED  +
mov byte ptr [ebp-4] 0Ah +
mov eax [ebp-24h] +
cmp [eax-0Ch] ebx +
jz loc_1040826  +
mov ecx [ebp+0Ch] +
push eax  +
call sub_10172FC  +
mov byte ptr [ebp-4] 6 +
lea ecx [ebp-24h] +
call sub_1015174  +
mov ecx [ebp-10h] +
lea eax [ebp-20h] +
push eax  +
call sub_1046A71  +
mov byte ptr [ebp-4] 9 +
push dword ptr [eax]  +
lea ecx [ebp-10h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 6 +
mov ecx [ebp-20h] +
cmp ecx ebx +
jz loc_104085F  +
call sub_101A986  +
mov [ebp-20h] ebx +
cmp [ebp-10h] ebx +
jnz loc_1040803  +
mov byte ptr [ebp-4] 5 +
jmp loc_1040788  +
***
call sub_1021EB9  +
mov esi ecx +
xor ebx ebx +
inc ebx  +
cmp dword ptr [esi+4] 0 +
mov [ebp-14h] ebx +
jnz loc_1040893  +
xor eax eax +
jmp loc_1040939  +
mov eax [esi+0DCh] +
cmp eax 6 +
jz loc_10408BB  +
cmp eax ebx +
jz loc_10408BB  +
cmp eax 2 +
jz loc_10408BB  +
cmp eax 3 +
jz loc_10408BB  +
cmp eax 4 +
jz loc_10408BB  +
cmp eax 5 +
jz loc_10408BB  +
cmp eax 9 +
jnz loc_1040936  +
lea ecx [ebp-10h] +
call sub_10151DA  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-10h] +
push eax  +
mov ecx esi +
call sub_103F922  +
test eax eax +
jz loc_104092A  +
mov edi [ebp+8] +
push edi  +
push ecx  +
lea eax [ebp-10h] +
mov ecx esp +
mov [ebp+8] esp +
push eax  +
call sub_10151F2  +
mov [ebp-4] bl +
mov byte ptr [ebp-4] 0 +
mov ecx esi +
call sub_10406C7  +
mov [ebp-14h] eax +
test eax eax +
jz loc_104092A  +
mov esi [esi+0DCh] +
cmp esi ebx +
jz loc_1040921  +
cmp esi 2 +
jz loc_1040921  +
cmp esi 3 +
jz loc_1040921  +
cmp esi 4 +
jz loc_1040921  +
cmp esi 5 +
jz loc_1040921  +
cmp esi 9 +
jnz loc_104092A  +
cmp [edi+8] ebx +
jz loc_104092A  +
and dword ptr [ebp-14h] 0 +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_1015174  +
mov eax [ebp-14h] +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EB9  +
mov esi ecx +
xor ebx ebx +
mov [ebp-20h] ebx +
mov [ebp-4] ebx +
mov [ebp-1Ch] ebx +
mov byte ptr [ebp-4] 1 +
mov [ebp-18h] ebx +
mov byte ptr [ebp-4] 2 +
mov [ebp-14h] ebx +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-10h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-10h] +
call sub_1014FC6  +
cmp [esi+4] ebx +
jnz loc_10409A1  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-10h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
xor eax eax +
jmp loc_1040B7D  +
cmp dword ptr [esi+0DCh] 9 +
jz loc_10409B1  +
xor esi esi +
jmp loc_1040B24  +
push offset aDevicefilter  +
lea ecx [ebp-28h] +
call sub_10161A7  +
mov byte ptr [ebp-4] 5 +
mov ecx [esi+4] +
lea eax [ebp-28h] +
push eax  +
lea eax [ebp-24h] +
push eax  +
call sub_1046BD3  +
mov byte ptr [ebp-4] 6 +
push dword ptr [eax]  +
lea ecx [ebp-20h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 5 +
mov ecx [ebp-24h] +
cmp ecx ebx +
jz loc_10409F3  +
call sub_101A986  +
mov [ebp-24h] ebx +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-28h] +
call sub_1015174  +
mov ecx [ebp-20h] +
cmp ecx ebx +
jz loc_10409AA  +
lea eax [ebp-28h] +
push eax  +
call sub_104717E  +
mov byte ptr [ebp-4] 7 +
push dword ptr [eax]  +
lea ecx [ebp-18h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 4 +
mov ecx [ebp-28h] +
cmp ecx ebx +
jz loc_1040A30  +
call sub_101A986  +
mov [ebp-28h] ebx +
mov ecx [ebp-18h] +
cmp ecx ebx +
jz loc_10409AA  +
push 1  +
lea eax [ebp-28h] +
push eax  +
call sub_104657D  +
mov byte ptr [ebp-4] 8 +
push eax  +
lea ecx [ebp-10h] +
call sub_1015959  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-28h] +
call sub_1015174  +
mov eax [ebp-10h] +
cmp [eax-0Ch] ebx +
jz loc_10409AA  +
mov ecx [esi+4] +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-28h] +
push eax  +
call sub_1046BD3  +
mov byte ptr [ebp-4] 9 +
push dword ptr [eax]  +
lea ecx [ebp-1Ch] +
call sub_104B66E  +
mov byte ptr [ebp-4] 4 +
mov ecx [ebp-28h] +
cmp ecx ebx +
jz loc_1040A9C  +
call sub_101A986  +
mov [ebp-28h] ebx +
mov ecx [ebp-1Ch] +
cmp ecx ebx +
jz loc_10409AA  +
lea eax [ebp-28h] +
push eax  +
call sub_104717E  +
mov byte ptr [ebp-4] 0Ah +
push dword ptr [eax]  +
lea ecx [ebp-14h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 4 +
mov ecx [ebp-28h] +
cmp ecx ebx +
jz loc_1040AD1  +
call sub_101A986  +
mov [ebp-28h] ebx +
mov ecx [ebp-14h] +
cmp ecx ebx +
jz loc_10409AA  +
call sub_10454A9  +
push 2  +
mov edi eax +
pop esi  +
cmp edi esi +
jb loc_10409AA  +
mov ecx [ebp-14h] +
push esi  +
lea eax [ebp-24h] +
push eax  +
call sub_10464ED  +
mov byte ptr [ebp-4] 0Bh +
mov eax [ebp-24h] +
cmp [eax-0Ch] ebx +
jz loc_1040B85  +
mov ecx [ebp+8] +
push eax  +
call sub_10172FC  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-24h] +
call sub_1015174  +
inc esi  +
cmp esi edi +
jbe loc_1040AEE  +
xor esi esi +
inc esi  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-10h] +
call sub_1015174  +
mov byte ptr [ebp-4] 2 +
mov ecx [ebp-14h] +
cmp ecx ebx +
jz loc_1040B43  +
call sub_101A986  +
mov [ebp-14h] ebx +
mov byte ptr [ebp-4] 1 +
mov ecx [ebp-18h] +
cmp ecx ebx +
jz loc_1040B56  +
call sub_101A986  +
mov [ebp-18h] ebx +
mov [ebp-4] bl +
mov ecx [ebp-1Ch] +
cmp ecx ebx +
jz loc_1040B68  +
call sub_101A986  +
mov [ebp-1Ch] ebx +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx [ebp-20h] +
cmp ecx ebx +
jz loc_1040B7B  +
call sub_101A986  +
mov [ebp-20h] ebx +
mov eax esi +
call sub_1021FA5  +
retn 4  +
xor esi esi +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-24h] +
call sub_1015174  +
jmp loc_1040B24  +
***
call sub_1021EB9  +
mov [ebp-1Ch] ecx +
lea edi [ecx+8] +
mov eax [edi] +
xor ebx ebx +
mov [ebp-28h] ebx +
cmp [eax-0Ch] ebx +
jz loc_1040FE2  +
push edi  +
call sub_1035549  +
test al al +
jz loc_1040FE2  +
mov [ebp-18h] ebx +
mov [ebp-4] ebx +
mov [ebp-14h] ebx +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-18h] +
call sub_103ECE0  +
mov ecx [ebp-18h] +
push edi  +
call sub_1046459  +
push offset aVersion  +
lea ecx [ebp-20h] +
call sub_10161A7  +
mov byte ptr [ebp-4] 2 +
mov ecx [ebp-18h] +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-10h] +
push eax  +
call sub_1046BD3  +
mov byte ptr [ebp-4] 3 +
push dword ptr [eax]  +
lea ecx [ebp-14h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 2 +
mov ecx [ebp-10h] +
cmp ecx ebx +
jz loc_1040C2A  +
call sub_101A986  +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-20h] +
call sub_1015174  +
cmp [ebp-14h] ebx +
jz loc_1040FBD  +
lea ecx [ebp-2Ch] +
call sub_10151DA  +
mov byte ptr [ebp-4] 4 +
xor esi esi +
inc esi  +
mov [ebp-28h] esi +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 5 +
push offset aProvider  +
lea ecx [ebp-24h] +
call sub_10161A7  +
mov byte ptr [ebp-4] 6 +
mov ecx [ebp-14h] +
lea eax [ebp-24h] +
push eax  +
lea eax [ebp-20h] +
push eax  +
call sub_1046D41  +
mov byte ptr [ebp-4] 7 +
push dword ptr [eax]  +
lea ecx [ebp-10h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 6 +
mov ecx [ebp-20h] +
cmp ecx ebx +
jz loc_1040C9A  +
call sub_101A986  +
mov [ebp-20h] ebx +
mov byte ptr [ebp-4] 5 +
lea ecx [ebp-24h] +
call sub_1015174  +
mov ecx [ebp-10h] +
cmp ecx ebx +
jz loc_1040CD1  +
push esi  +
lea eax [ebp-24h] +
push eax  +
call sub_10464ED  +
mov byte ptr [ebp-4] 8 +
push dword ptr [eax]  +
mov ecx [ebp+8] +
call sub_10158CD  +
mov byte ptr [ebp-4] 5 +
lea ecx [ebp-24h] +
call sub_1015174  +
push offset aDriverpackaged  +
lea ecx [ebp-24h] +
call sub_10161A7  +
mov byte ptr [ebp-4] 9 +
mov ecx [ebp-14h] +
lea eax [ebp-24h] +
push eax  +
lea eax [ebp+8] +
push eax  +
call sub_1046D41  +
mov byte ptr [ebp-4] 0Ah +
push dword ptr [eax]  +
lea ecx [ebp-10h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 9 +
mov ecx [ebp+8] +
cmp ecx ebx +
jz loc_1040D13  +
call sub_101A986  +
mov [ebp+8] ebx +
mov byte ptr [ebp-4] 5 +
lea ecx [ebp-24h] +
call sub_1015174  +
mov ecx [ebp-10h] +
cmp ecx ebx +
jz loc_1040D4F  +
push esi  +
lea eax [ebp+8] +
push eax  +
call sub_10464ED  +
mov byte ptr [ebp-4] 0Bh +
push dword ptr [eax]  +
mov ecx [ebp+0Ch] +
call sub_10158CD  +
mov byte ptr [ebp-4] 5 +
lea ecx [ebp+8] +
call sub_1015174  +
jmp loc_1040EDA  +
mov esi [ebp+0Ch] +
mov ecx esi +
call sub_1014FC6  +
lea ecx [ebp-44h] +
call sub_1014C71  +
mov byte ptr [ebp-4] 0Ch +
mov ecx [ebp-1Ch] +
lea eax [ebp-44h] +
push eax  +
call sub_1040872  +
test eax eax +
jz loc_1040DDF  +
cmp [ebp-3Ch] ebx +
jz loc_1040DDF  +
mov eax [ebp-1Ch] +
cmp dword ptr [eax+0DCh] 6 +
jnz loc_1040DBD  +
push 28h  +
mov ecx esi +
call sub_1035E8F  +
mov eax [ebp-44h] +
xor ecx ecx +
cmp eax ebx +
setnz cl  +
cmp ecx ebx +
jnz loc_1040DA7  +
push 80004005h  +
call loc_1014415  +
add eax 8 +
push eax  +
mov ecx esi +
call sub_10159F5  +
push 29h  +
mov ecx esi +
call sub_1035E8F  +
jmp loc_1040DD6  +
mov eax [ebp-44h] +
xor ecx ecx +
cmp eax ebx +
setnz cl  +
cmp ecx ebx +
jz loc_1040D9D  +
add eax 8 +
push eax  +
mov ecx esi +
call sub_10159F5  +
push 20h  +
mov ecx esi +
call sub_1035E8F  +
mov eax [ebp-1Ch] +
cmp dword ptr [eax+0DCh] 0Ah +
jnz loc_1040E4D  +
lea ecx [ebp+8] +
call sub_10151DA  +
mov byte ptr [ebp-4] 0Dh +
lea ecx [ebp+0Ch] +
call sub_10151DA  +
mov byte ptr [ebp-4] 0Eh +
lea eax [ebp+0Ch] +
push eax  +
lea eax [ebp+8] +
push eax  +
push edi  +
call sub_1036032  +
test al al +
jz loc_1040E35  +
mov eax [ebp+0Ch] +
mov eax [eax-0Ch] +
add eax 0FFFFFFFCh +
push eax  +
lea ecx [ebp+0Ch] +
call sub_1035EC3  +
mov eax [ebp+0Ch] +
push dword ptr [eax-0Ch]  +
mov ecx esi +
push eax  +
call sub_10155F6  +
mov byte ptr [ebp-4] 0Dh +
lea ecx [ebp+0Ch] +
call sub_1015174  +
mov byte ptr [ebp-4] 0Ch +
lea ecx [ebp+8] +
call sub_1015174  +
push offset aClass  +
lea ecx [ebp+8] +
call sub_10161A7  +
mov byte ptr [ebp-4] 0Fh +
mov ecx [ebp-14h] +
lea eax [ebp+8] +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
call sub_1046D41  +
mov byte ptr [ebp-4] 10h +
push dword ptr [eax]  +
lea ecx [ebp-10h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 0Fh +
mov ecx [ebp+0Ch] +
cmp ecx ebx +
jz loc_1040E8F  +
call sub_101A986  +
mov [ebp+0Ch] ebx +
mov byte ptr [ebp-4] 0Ch +
lea ecx [ebp+8] +
call sub_1015174  +
mov ecx [ebp-10h] +
cmp ecx ebx +
jz loc_1040ECE  +
push 1  +
lea eax [ebp+0Ch] +
push eax  +
call sub_10464ED  +
mov byte ptr [ebp-4] 11h +
push eax  +
mov ecx esi +
call sub_10159F5  +
mov byte ptr [ebp-4] 0Ch +
lea ecx [ebp+0Ch] +
call sub_1015174  +
push 20h  +
mov ecx esi +
call sub_1035E8F  +
mov byte ptr [ebp-4] 5 +
lea ecx [ebp-44h] +
call sub_1014FBC  +
push offset aDriverver  +
lea ecx [ebp+8] +
call sub_10161A7  +
mov byte ptr [ebp-4] 12h +
mov ecx [ebp-14h] +
lea eax [ebp+8] +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
call sub_1046D41  +
mov byte ptr [ebp-4] 13h +
push dword ptr [eax]  +
lea ecx [ebp-10h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 12h +
mov ecx [ebp+0Ch] +
cmp ecx ebx +
jz loc_1040F1C  +
call sub_101A986  +
mov [ebp+0Ch] ebx +
mov byte ptr [ebp-4] 5 +
lea ecx [ebp+8] +
call sub_1015174  +
mov esi [ebp-10h] +
cmp esi ebx +
jz loc_1040F9F  +
push 1  +
mov ecx esi +
call sub_104586C  +
test al al +
jnz loc_1040F6C  +
push 1  +
lea eax [ebp+0Ch] +
push eax  +
mov ecx esi +
call sub_10464ED  +
mov byte ptr [ebp-4] 14h +
mov ecx [ebp+10h] +
push eax  +
call sub_10159F5  +
mov byte ptr [ebp-4] 5 +
lea ecx [ebp+0Ch] +
call sub_1015174  +
mov ecx [ebp+10h] +
push 20h  +
call sub_1035E8F  +
push 2  +
mov ecx esi +
call sub_104586C  +
test al al +
jnz loc_1040F9F  +
push 2  +
lea eax [ebp+0Ch] +
push eax  +
mov ecx esi +
call sub_10464ED  +
mov byte ptr [ebp-4] 15h +
mov ecx [ebp+10h] +
push eax  +
call sub_10159F5  +
mov byte ptr [ebp-4] 5 +
lea ecx [ebp+0Ch] +
call sub_1015174  +
mov byte ptr [ebp-4] 4 +
cmp esi ebx +
jz loc_1040FB1  +
mov ecx esi +
call sub_101A986  +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-2Ch] +
call sub_1015174  +
mov [ebp-4] bl +
mov ecx [ebp-14h] +
cmp ecx ebx +
jz loc_1040FCF  +
call sub_101A986  +
mov [ebp-14h] ebx +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx [ebp-18h] +
cmp ecx ebx +
jz loc_1040FE2  +
call sub_101A986  +
mov [ebp-18h] ebx +
mov eax [ebp-28h] +
call sub_1021FA5  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jnz loc_1041017  +
push 1  +
push dword ptr [esi+8]  +
call sub_1037641  +
test al al +
jnz loc_1041017  +
push 8007000Eh  +
call loc_1014415  +
push [ebp+arg_8]  +
mov ecx esi +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10405DC  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10424A6  +
test eax eax +
jnz loc_1041064  +
push [ebp+var_4]  +
mov ecx esi +
push [ebp+var_8]  +
push [ebp+arg_0]  +
call sub_1040FF2  +
add eax 4 +
pop esi  +
leave   +
retn 4  +
***
call sub_1021EB9  +
mov esi ecx +
push dword ptr [ebp+8]  +
lea ecx [ebp-10h] +
call sub_10151F2  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-10h] +
call sub_101CC99  +
push dword ptr [ebp+8]  +
mov ecx esi +
push dword ptr [ebp-10h]  +
call sub_103DA67  +
mov ecx eax +
call sub_1015AAF  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_1015174  +
call sub_1021FA5  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
push edi  +
mov edi ecx +
test eax eax +
jz loc_10410F9  +
mov ecx [ebp+arg_8] +
add eax 0Ch +
push eax  +
call sub_103F4C9  +
test al al +
jnz loc_10410F9  +
mov eax [esi] +
mov ecx [ebp+arg_8] +
add eax 0Ch +
push eax  +
call sub_1041071  +
push esi  +
mov ecx edi +
call [ebp+arg_4]  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
call sub_1021EB9  +
mov [ebp-18h] ecx +
mov eax [ebp+8] +
xor ebx ebx +
cmp [eax] ebx +
jz loc_104129A  +
mov [ebp+8] ebx +
mov [ebp-4] ebx +
mov eax [eax] +
lea ecx [ebp-14h] +
push ecx  +
mov ecx eax +
call sub_104717E  +
mov byte ptr [ebp-4] 1 +
push dword ptr [eax]  +
lea ecx [ebp+8] +
call sub_104B66E  +
mov [ebp-4] bl +
mov ecx [ebp-14h] +
cmp ecx ebx +
jz loc_104127D  +
call sub_101A986  +
mov [ebp-14h] ebx +
jmp loc_104127D  +
push ebx  +
mov ecx edi +
call sub_104586C  +
test al al +
jnz loc_1041251  +
lea eax [ebp-14h] +
push eax  +
mov ecx edi +
call sub_103EF83  +
mov byte ptr [ebp-4] 3 +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-10h] +
call sub_10151F2  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-10h] +
call sub_101CC99  +
mov ecx [ebp-18h] +
push dword ptr [ebp-10h]  +
add ecx 48h +
call sub_1041031  +
mov esi eax +
mov ecx esi +
call sub_103F276  +
mov eax [esi] +
lea ecx [eax+10h] +
lea eax [ebp-14h] +
push eax  +
call sub_1015959  +
push 1  +
mov ecx edi +
call sub_104547E  +
cmp eax ebx +
jge loc_10411DF  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-10h] +
call sub_1015174  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-14h] +
call sub_1015174  +
jmp loc_1041251  +
mov ecx [ebp-18h] +
mov ebx [esi] +
push eax  +
add ecx 8 +
call sub_103F3CC  +
push eax  +
lea ecx [ebx+8] +
call sub_103ECA6  +
push 2  +
mov ecx edi +
call sub_104586C  +
test al al +
jz loc_104120F  +
mov esi [esi] +
lea ecx [esi+0Ch] +
call sub_1014FC6  +
jmp loc_1041237  +
push 2  +
lea eax [ebp-20h] +
push eax  +
mov ecx edi +
call sub_10464ED  +
mov byte ptr [ebp-4] 5 +
mov esi [esi] +
push eax  +
lea ecx [esi+0Ch] +
call sub_1015AAF  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-20h] +
call sub_1015174  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-10h] +
call sub_1015174  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-14h] +
call sub_1015174  +
xor ebx ebx +
lea eax [ebp-1Ch] +
push eax  +
mov ecx edi +
call sub_1046A71  +
mov byte ptr [ebp-4] 2 +
push dword ptr [eax]  +
lea ecx [ebp+8] +
call sub_104B66E  +
mov byte ptr [ebp-4] 0 +
mov ecx [ebp-1Ch] +
cmp ecx ebx +
jz loc_104127D  +
call sub_101A986  +
mov [ebp-1Ch] ebx +
mov edi [ebp+8] +
cmp edi ebx +
jnz loc_104115C  +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp edi ebx +
jz loc_104129A  +
mov ecx edi +
call sub_101A986  +
mov [ebp+8] ebx +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EB9  +
mov edi ecx +
mov esi [ebp+8] +
mov eax [esi] +
test eax eax +
jz loc_1041467  +
mov ecx [ebp+14h] +
add eax 0Ch +
push eax  +
call sub_103F4C9  +
test al al +
jnz loc_1041467  +
mov eax [esi] +
mov ecx [ebp+14h] +
add eax 0Ch +
push eax  +
call sub_1041071  +
push dword ptr [ebp+10h]  +
mov ecx edi +
push dword ptr [ebp+0Ch]  +
push esi  +
call sub_10410C3  +
push offset aNeeds  +
lea ecx [ebp+14h] +
call sub_10161A7  +
and dword ptr [ebp-4] 0 +
mov ecx [esi] +
lea eax [ebp+14h] +
push eax  +
lea eax [ebp+8] +
push eax  +
call sub_1046D41  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp+14h] +
call sub_1015174  +
mov ecx [ebp+8] +
test ecx ecx +
jz loc_1041453  +
call sub_10454A9  +
xor esi esi +
inc esi  +
mov [ebp-14h] eax +
cmp eax esi +
jb loc_1041453  +
mov ecx [ebp+8] +
push esi  +
lea eax [ebp-10h] +
push eax  +
call sub_10464ED  +
mov byte ptr [ebp-4] 3 +
mov ecx [edi] +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp+14h] +
push eax  +
call sub_1046BD3  +
mov byte ptr [ebp-4] 4 +
push dword ptr [ebp+10h]  +
mov ecx edi +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_10410C3  +
mov byte ptr [ebp-4] 3 +
mov ecx [ebp+14h] +
test ecx ecx +
jz loc_1041441  +
call sub_101A986  +
and dword ptr [ebp+14h] 0 +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-10h] +
call sub_1015174  +
inc esi  +
cmp esi [ebp-14h] +
jbe loc_10413FB  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx [ebp+8] +
test ecx ecx +
jz loc_1041467  +
call sub_101A986  +
and dword ptr [ebp+8] 0 +
call sub_1021FA5  +
retn 10h  +
***
call sub_1021EB9  +
mov edi ecx +
mov [ebp-18h] edi +
lea ecx [ebp-10h] +
call sub_10151DA  +
xor ebx ebx +
mov [ebp-4] ebx +
mov esi [ebp+8] +
mov eax [esi] +
cmp eax ebx +
jz loc_1041628  +
add eax 0Ch +
add edi 0A8h +
push eax  +
mov ecx edi +
call sub_103F4C9  +
test al al +
jnz loc_1041628  +
mov eax [esi] +
add eax 0Ch +
push eax  +
mov ecx edi +
call sub_1041071  +
mov [ebp-14h] ebx +
mov byte ptr [ebp-4] 1 +
mov ecx [esi] +
lea eax [ebp+8] +
push eax  +
call sub_104717E  +
mov byte ptr [ebp-4] 2 +
push dword ptr [eax]  +
lea ecx [ebp-14h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 1 +
mov ecx [ebp+8] +
cmp ecx ebx +
jz loc_104161A  +
call sub_101A986  +
mov [ebp+8] ebx +
jmp loc_104161A  +
lea ecx [ebp+8] +
call sub_10151DA  +
mov byte ptr [ebp-4] 4 +
push 2  +
mov ecx edi +
call sub_104586C  +
test al al +
jnz loc_1041540  +
push 2  +
lea eax [ebp-20h] +
push eax  +
mov ecx edi +
call sub_10464ED  +
mov byte ptr [ebp-4] 5 +
push eax  +
lea ecx [ebp+8] +
call sub_1015959  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-20h] +
call sub_1015174  +
mov eax [ebp+8] +
cmp [eax-0Ch] ebx +
jnz loc_1041583  +
push 1  +
mov ecx edi +
call sub_104586C  +
test al al +
jnz loc_104157B  +
push 1  +
lea eax [ebp-24h] +
push eax  +
mov ecx edi +
call sub_10464ED  +
mov byte ptr [ebp-4] 6 +
push eax  +
lea ecx [ebp+8] +
call sub_1015959  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-24h] +
call sub_1015174  +
mov eax [ebp+8] +
cmp [eax-0Ch] ebx +
jz loc_10415E2  +
mov eax [ebp-18h] +
cmp [eax+40h] ebx +
jz loc_10415CC  +
push 1  +
mov ecx edi +
call sub_104586C  +
test al al +
jnz loc_10415C0  +
push 1  +
lea eax [ebp-28h] +
push eax  +
mov ecx edi +
call sub_10464ED  +
mov byte ptr [ebp-4] 7 +
push eax  +
lea ecx [ebp-10h] +
call sub_1015959  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-28h] +
call sub_1015174  +
jmp loc_10415CC  +
lea eax [ebp+8] +
push eax  +
lea ecx [ebp-10h] +
call sub_1015959  +
mov eax [esi] +
lea ecx [ebp-10h] +
push ecx  +
mov ecx [ebp-18h] +
add eax 0Ch +
push eax  +
lea eax [ebp+8] +
push eax  +
call near ptr dword_10412A4+3  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp+8] +
call sub_1015174  +
lea eax [ebp-1Ch] +
push eax  +
mov ecx edi +
call sub_1046A71  +
mov byte ptr [ebp-4] 3 +
push dword ptr [eax]  +
lea ecx [ebp-14h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 1 +
mov ecx [ebp-1Ch] +
cmp ecx ebx +
jz loc_104161A  +
call sub_101A986  +
mov [ebp-1Ch] ebx +
mov edi [ebp-14h] +
cmp edi ebx +
jnz loc_1041501  +
mov [ebp-4] bl +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_1015174  +
call sub_1021FA5  +
retn 4  +
***
push 28h  +
mov eax offset loc_1057AC4 +
call sub_1021EB9  +
mov [ebp-1Ch] ecx +
xor edi edi +
mov [ebp-10h] edi +
mov [ebp-4] edi +
push offset aCopyfiles  +
lea ecx [ebp-18h] +
call sub_10161A7  +
mov byte ptr [ebp-4] 1 +
mov eax [ebp+8] +
mov ecx [eax] +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
call sub_1046D41  +
mov byte ptr [ebp-4] 2 +
push dword ptr [eax]  +
lea ecx [ebp-10h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 1 +
mov ecx [ebp-14h] +
cmp ecx edi +
jz loc_104169C  +
call sub_101A986  +
mov [ebp-14h] edi +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-18h] +
call sub_1015174  +
jmp loc_10417F1  +
mov ecx [ebp-10h] +
call sub_10454A9  +
xor esi esi +
inc esi  +
mov [ebp-34h] eax +
mov [ebp-14h] esi +
cmp eax esi +
jb loc_10417C4  +
push dword ptr [ebp-14h]  +
mov ecx [ebp-10h] +
lea eax [ebp+8] +
push eax  +
call sub_10464ED  +
mov byte ptr [ebp-4] 4 +
push esi  +
lea eax [ebp-24h] +
push eax  +
lea ecx [ebp+8] +
call sub_101ABF3  +
mov byte ptr [ebp-4] 5 +
push offset a@  +
mov ecx eax +
call sub_101492B  +
mov ebx eax +
neg ebx  +
sbb bl bl +
inc bl  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-24h] +
call sub_1015174  +
test bl bl +
jz loc_1041778  +
push esi  +
lea eax [ebp-30h] +
push eax  +
lea ecx [ebp+8] +
call sub_1035E50  +
mov ebx eax +
mov byte ptr [ebp-4] 6 +
push esi  +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [ebp+8] +
call sub_1035E50  +
mov edi eax +
mov byte ptr [ebp-4] 7 +
push esi  +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp+8] +
call sub_1035E50  +
mov byte ptr [ebp-4] 8 +
mov ecx [ebp-1Ch] +
push ebx  +
push edi  +
push eax  +
call near ptr dword_10412A4+3  +
mov byte ptr [ebp-4] 7 +
lea ecx [ebp-28h] +
call sub_1015174  +
mov byte ptr [ebp-4] 6 +
lea ecx [ebp-2Ch] +
call sub_1015174  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-30h] +
call sub_1015174  +
xor edi edi +
jmp loc_10417A9  +
mov ebx [ebp-1Ch] +
mov ecx [ebx] +
lea eax [ebp+8] +
push eax  +
lea eax [ebp-18h] +
push eax  +
call sub_1046BD3  +
mov byte ptr [ebp-4] 9 +
push eax  +
mov ecx ebx +
call sub_1041474  +
mov byte ptr [ebp-4] 4 +
mov ecx [ebp-18h] +
cmp ecx edi +
jz loc_10417A9  +
call sub_101A986  +
mov [ebp-18h] edi +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp+8] +
call sub_1015174  +
inc dword ptr [ebp-14h]  +
mov eax [ebp-14h] +
cmp eax [ebp-34h] +
jbe loc_10416C6  +
mov ecx [ebp-10h] +
lea eax [ebp-20h] +
push eax  +
call sub_1046A71  +
mov byte ptr [ebp-4] 3 +
push dword ptr [eax]  +
lea ecx [ebp-10h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 0 +
mov ecx [ebp-20h] +
cmp ecx edi +
jz loc_10417F1  +
call sub_101A986  +
mov [ebp-20h] edi +
cmp [ebp-10h] edi +
jnz loc_10416AD  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx [ebp-10h] +
cmp ecx edi +
jz loc_104180D  +
call sub_101A986  +
mov [ebp-10h] edi +
call sub_1021FA5  +
retn 4  +
***
push 0Ch  +
mov eax offset loc_1057B14 +
call sub_1021EB9  +
mov esi ecx +
xor ebx ebx +
mov [ebp-10h] ebx +
mov [ebp-4] ebx +
push offset aAddinterface  +
lea ecx [ebp-18h] +
call sub_10161A7  +
mov byte ptr [ebp-4] 1 +
mov eax [ebp+8] +
mov ecx [eax] +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
call sub_1046D41  +
mov byte ptr [ebp-4] 2 +
push dword ptr [eax]  +
lea ecx [ebp-10h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 1 +
mov ecx [ebp-14h] +
cmp ecx ebx +
jz loc_1041874  +
call sub_101A986  +
mov [ebp-14h] ebx +
mov [ebp-4] bl +
lea ecx [ebp-18h] +
call sub_1015174  +
jmp loc_1041912  +
push 3  +
mov ecx edi +
call sub_104586C  +
test al al +
jnz loc_10418E7  +
push 3  +
lea eax [ebp-18h] +
push eax  +
mov ecx edi +
call sub_10464ED  +
mov byte ptr [ebp-4] 4 +
mov ecx [esi] +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp+8] +
push eax  +
call sub_1046BD3  +
mov byte ptr [ebp-4] 5 +
lea ecx [esi+108h] +
push ecx  +
push offset loc_1041641  +
push eax  +
mov ecx esi +
call sub_10410C3  +
mov byte ptr [ebp-4] 4 +
mov ecx [ebp+8] +
cmp ecx ebx +
jz loc_10418DC  +
call sub_101A986  +
mov [ebp+8] ebx +
mov [ebp-4] bl +
lea ecx [ebp-18h] +
call sub_1015174  +
lea eax [ebp-14h] +
push eax  +
mov ecx edi +
call sub_1046A71  +
mov byte ptr [ebp-4] 3 +
push dword ptr [eax]  +
lea ecx [ebp-10h] +
call sub_104B66E  +
mov [ebp-4] bl +
mov ecx [ebp-14h] +
cmp ecx ebx +
jz loc_1041912  +
call sub_101A986  +
mov [ebp-14h] ebx +
mov edi [ebp-10h] +
cmp edi ebx +
jnz loc_1041884  +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp edi ebx +
jz loc_104192F  +
mov ecx edi +
call sub_101A986  +
mov [ebp-10h] ebx +
call sub_1021FA5  +
retn 4  +
***
push 0Ch  +
mov eax offset loc_1057B5C +
call sub_1021EB9  +
mov esi ecx +
xor ebx ebx +
mov [ebp-10h] ebx +
mov [ebp-4] ebx +
mov eax [ebp+8] +
mov ecx [eax] +
lea eax [ebp+8] +
push eax  +
call sub_104717E  +
mov byte ptr [ebp-4] 1 +
push dword ptr [eax]  +
lea ecx [ebp-10h] +
call sub_104B66E  +
mov [ebp-4] bl +
mov ecx [ebp+8] +
cmp ecx ebx +
jz loc_1041A17  +
call sub_101A986  +
mov [ebp+8] ebx +
jmp loc_1041A17  +
push 1  +
mov ecx edi +
call sub_104586C  +
test al al +
jnz loc_10419EC  +
push 1  +
lea eax [ebp-14h] +
push eax  +
mov ecx edi +
call sub_10464ED  +
mov byte ptr [ebp-4] 3 +
mov ecx [esi] +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp+8] +
push eax  +
call sub_1046C8D  +
mov byte ptr [ebp-4] 4 +
lea ecx [esi+108h] +
push ecx  +
push offset loc_1041641  +
push eax  +
mov ecx esi +
call sub_10410C3  +
mov byte ptr [ebp-4] 3 +
mov ecx [ebp+8] +
cmp ecx ebx +
jz loc_10419E1  +
call sub_101A986  +
mov [ebp+8] ebx +
mov [ebp-4] bl +
lea ecx [ebp-14h] +
call sub_1015174  +
lea eax [ebp-18h] +
push eax  +
mov ecx edi +
call sub_1046A71  +
mov byte ptr [ebp-4] 2 +
push dword ptr [eax]  +
lea ecx [ebp-10h] +
call sub_104B66E  +
mov [ebp-4] bl +
mov ecx [ebp-18h] +
cmp ecx ebx +
jz loc_1041A17  +
call sub_101A986  +
mov [ebp-18h] ebx +
mov edi [ebp-10h] +
cmp edi ebx +
jnz loc_1041989  +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp edi ebx +
jz loc_1041A34  +
mov ecx edi +
call sub_101A986  +
mov [ebp-10h] ebx +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EB9  +
mov esi ecx +
mov edi offset aSourcedisksnam +
push edi  +
lea ecx [ebp-1Ch] +
call sub_10161A7  +
and dword ptr [ebp-4] 0 +
mov ecx [esi] +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-14h] +
push eax  +
call sub_1046BD3  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-1Ch] +
call sub_1015174  +
lea eax [ebp-14h] +
push eax  +
mov ecx esi +
call sub_103F50E  +
push edi  +
lea ecx [ebp-18h] +
call sub_10161A7  +
mov byte ptr [ebp-4] 3 +
push offset String2  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-24h] +
push eax  +
call sub_1015847  +
mov byte ptr [ebp-4] 4 +
mov ebx offset aX86 +
push ebx  +
push eax  +
lea eax [ebp-20h] +
push eax  +
call sub_1015847  +
mov byte ptr [ebp-4] 5 +
mov ecx [esi] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
call sub_1046BD3  +
mov byte ptr [ebp-4] 6 +
push dword ptr [eax]  +
lea ecx [ebp-14h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 5 +
mov ecx [ebp-1Ch] +
test ecx ecx +
jz loc_1041AEC  +
call sub_101A986  +
and dword ptr [ebp-1Ch] 0 +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-20h] +
call sub_1015174  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-24h] +
call sub_1015174  +
lea eax [ebp-14h] +
push eax  +
mov ecx esi +
call sub_103F50E  +
mov edi offset aSourcedisksfil +
push edi  +
lea ecx [ebp-1Ch] +
call sub_10161A7  +
mov byte ptr [ebp-4] 7 +
mov ecx [esi] +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-10h] +
push eax  +
call sub_1046BD3  +
mov byte ptr [ebp-4] 9 +
lea ecx [ebp-1Ch] +
call sub_1015174  +
lea eax [ebp-10h] +
push eax  +
mov ecx esi +
call sub_1041104  +
push edi  +
lea ecx [ebp-18h] +
call sub_10158CD  +
push offset String2  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-20h] +
push eax  +
call sub_1015847  +
mov byte ptr [ebp-4] 0Ah +
push ebx  +
push eax  +
lea eax [ebp-24h] +
push eax  +
call sub_1015847  +
mov byte ptr [ebp-4] 0Bh +
mov ecx [esi] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
call sub_1046BD3  +
mov byte ptr [ebp-4] 0Ch +
push dword ptr [eax]  +
lea ecx [ebp-10h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 0Bh +
mov ecx [ebp-1Ch] +
xor edi edi +
cmp ecx edi +
jz loc_1041BA4  +
call sub_101A986  +
mov [ebp-1Ch] edi +
mov byte ptr [ebp-4] 0Ah +
lea ecx [ebp-24h] +
call sub_1015174  +
mov byte ptr [ebp-4] 9 +
lea ecx [ebp-20h] +
call sub_1015174  +
lea eax [ebp-10h] +
push eax  +
mov ecx esi +
call sub_1041104  +
mov byte ptr [ebp-4] 3 +
mov ecx [ebp-10h] +
cmp ecx edi +
jz loc_1041BDA  +
call sub_101A986  +
mov [ebp-10h] edi +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-18h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx [ebp-14h] +
cmp ecx edi +
jz loc_1041BF9  +
call sub_101A986  +
mov [ebp-14h] edi +
call sub_1021FA5  +
retn   +
***
call sub_1021EB9  +
mov esi ecx +
mov edi [ebp+8] +
mov eax [edi] +
test eax eax +
jz loc_1041D1D  +
add eax 0Ch +
lea ebx [esi+78h] +
push eax  +
mov ecx ebx +
call sub_103F4C9  +
test al al +
jnz loc_1041D1D  +
mov eax [edi] +
add eax 0Ch +
push eax  +
mov ecx ebx +
call sub_1041071  +
lea eax [esi+1C8h] +
push eax  +
lea ecx [esi+108h] +
push ecx  +
mov ebx offset loc_1041641 +
push ebx  +
push edi  +
mov ecx esi +
call sub_104136E  +
push offset aCoinstallers  +
lea ecx [ebp-10h] +
call sub_10161A7  +
and dword ptr [ebp-4] 0 +
mov ecx [edi] +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp+8] +
push eax  +
call sub_1046E00  +
mov byte ptr [ebp-4] 1 +
lea ecx [esi+1C8h] +
push ecx  +
lea ecx [esi+108h] +
push ecx  +
push ebx  +
push eax  +
mov ecx esi +
call sub_104136E  +
mov byte ptr [ebp-4] 0 +
mov ecx [ebp+8] +
test ecx ecx +
jz loc_1041CAD  +
call sub_101A986  +
and dword ptr [ebp+8] 0 +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_1015174  +
push offset aInterfaces  +
lea ecx [ebp-10h] +
call sub_10161A7  +
mov dword ptr [ebp-4] 2 +
mov edi [edi] +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp+8] +
push eax  +
mov ecx edi +
call sub_1046E00  +
mov byte ptr [ebp-4] 3 +
lea ecx [esi+1F8h] +
push ecx  +
lea ecx [esi+138h] +
push ecx  +
push offset loc_104181A  +
push eax  +
mov ecx esi +
call sub_104136E  +
mov byte ptr [ebp-4] 2 +
mov ecx [ebp+8] +
test ecx ecx +
jz loc_1041D11  +
call sub_101A986  +
and dword ptr [ebp+8] 0 +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_1015174  +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EB9  +
mov edi ecx +
mov eax [ebp+8] +
xor ebx ebx +
cmp [eax] ebx +
jz loc_1041E1A  +
mov [ebp+8] ebx +
mov [ebp-4] ebx +
mov eax [eax] +
lea ecx [ebp-10h] +
push ecx  +
mov ecx eax +
call sub_104717E  +
mov byte ptr [ebp-4] 1 +
push dword ptr [eax]  +
lea ecx [ebp+8] +
call sub_104B66E  +
mov [ebp-4] bl +
mov ecx [ebp-10h] +
cmp ecx ebx +
jz loc_1041DFD  +
call sub_101A986  +
mov [ebp-10h] ebx +
jmp loc_1041DFD  +
push 1  +
mov ecx esi +
call sub_104586C  +
test al al +
jnz loc_1041DD2  +
push 1  +
lea eax [ebp-18h] +
push eax  +
mov ecx esi +
call sub_10464ED  +
mov byte ptr [ebp-4] 3 +
mov ecx [edi] +
push eax  +
lea eax [ebp-10h] +
push eax  +
call sub_1046C8D  +
mov byte ptr [ebp-4] 4 +
push eax  +
mov ecx edi +
call sub_1041C04  +
mov byte ptr [ebp-4] 3 +
mov ecx [ebp-10h] +
cmp ecx ebx +
jz loc_1041DC7  +
call sub_101A986  +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
lea ecx [ebp-18h] +
call sub_1015174  +
lea eax [ebp-14h] +
push eax  +
mov ecx esi +
call sub_1046A71  +
mov byte ptr [ebp-4] 2 +
push dword ptr [eax]  +
lea ecx [ebp+8] +
call sub_104B66E  +
mov [ebp-4] bl +
mov ecx [ebp-14h] +
cmp ecx ebx +
jz loc_1041DFD  +
call sub_101A986  +
mov [ebp-14h] ebx +
mov esi [ebp+8] +
cmp esi ebx +
jnz loc_1041D7E  +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp esi ebx +
jz loc_1041E1A  +
mov ecx esi +
call sub_101A986  +
mov [ebp+8] ebx +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EB9  +
mov esi ecx +
xor ebx ebx +
mov [ebp-4] ebx +
mov eax [ebp+8] +
mov [esi+40h] eax +
mov eax [ebp+10h] +
mov [esi+38h] eax +
mov eax [ebp+14h] +
mov [esi+3Ch] eax +
mov dword ptr [esi+44h] 1 +
call sub_1041A41  +
push offset aClassinstall32  +
lea ecx [ebp+14h] +
mov [esi+44h] ebx +
call sub_10161A7  +
mov byte ptr [ebp-4] 1 +
mov ecx [esi] +
lea eax [ebp+14h] +
push eax  +
lea eax [ebp+8] +
push eax  +
call sub_1046C8D  +
mov byte ptr [ebp-4] 2 +
lea ecx [esi+108h] +
push ecx  +
mov edi offset loc_1041641 +
push edi  +
push eax  +
mov ecx esi +
call sub_10410C3  +
mov byte ptr [ebp-4] 1 +
mov ecx [ebp+8] +
cmp ecx ebx +
jz loc_1041EA7  +
call sub_101A986  +
mov [ebp+8] ebx +
mov [ebp-4] bl +
lea ecx [ebp+14h] +
call sub_1015174  +
push offset aInterfaceinsta  +
lea ecx [ebp+14h] +
mov dword ptr [esi+44h] 1 +
call sub_10161A7  +
mov byte ptr [ebp-4] 3 +
mov ecx [esi] +
lea eax [ebp+14h] +
push eax  +
lea eax [ebp+8] +
push eax  +
call sub_1046C8D  +
mov byte ptr [ebp-4] 4 +
lea ecx [esi+168h] +
push ecx  +
push offset loc_104193C  +
push eax  +
mov ecx esi +
call sub_10410C3  +
mov byte ptr [ebp-4] 3 +
mov ecx [ebp+8] +
cmp ecx ebx +
jz loc_1041F04  +
call sub_101A986  +
mov [ebp+8] ebx +
mov [ebp-4] bl +
lea ecx [ebp+14h] +
call sub_1015174  +
push offset word_10022EC  +
lea ecx [ebp+0Ch] +
call sub_101492B  +
test eax eax +
jz loc_1041F5C  +
mov ecx [esi] +
lea eax [ebp+0Ch] +
push eax  +
lea eax [ebp+8] +
push eax  +
call sub_1046C8D  +
mov byte ptr [ebp-4] 5 +
lea ecx [esi+1C8h] +
push ecx  +
lea ecx [esi+108h] +
push ecx  +
push edi  +
push eax  +
mov ecx esi +
call sub_104136E  +
mov [ebp-4] bl +
mov ecx [ebp+8] +
cmp ecx ebx +
jz loc_1041F5C  +
call sub_101A986  +
mov [ebp+8] ebx +
push offset aManufacturer  +
lea ecx [ebp+8] +
call sub_10161A7  +
mov byte ptr [ebp-4] 6 +
mov ecx [esi] +
lea eax [ebp+8] +
push eax  +
lea eax [ebp+10h] +
push eax  +
call sub_1046BD3  +
mov byte ptr [ebp-4] 8 +
lea ecx [ebp+8] +
call sub_1015174  +
cmp [ebp+10h] ebx +
jz loc_104214D  +
mov [ebp+14h] ebx +
mov byte ptr [ebp-4] 9 +
mov ecx [ebp+10h] +
lea eax [ebp+8] +
push eax  +
call sub_104717E  +
mov byte ptr [ebp-4] 0Ah +
push dword ptr [eax]  +
lea ecx [ebp+14h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 9 +
mov ecx [ebp+8] +
cmp ecx ebx +
jz loc_104213E  +
call sub_101A986  +
mov [ebp+8] ebx +
jmp loc_104213E  +
push 1  +
mov ecx edi +
call sub_104586C  +
test al al +
jnz loc_1042112  +
push 1  +
lea eax [ebp-18h] +
push eax  +
mov ecx edi +
call sub_10464ED  +
mov byte ptr [ebp-4] 0Ch +
mov ecx [esi] +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
call sub_1046BD3  +
mov byte ptr [ebp-4] 0Dh +
push eax  +
mov ecx esi +
call sub_1041D2A  +
mov byte ptr [ebp-4] 0Ch +
mov ecx [ebp-1Ch] +
cmp ecx ebx +
jz loc_104201E  +
call sub_101A986  +
mov [ebp-1Ch] ebx +
mov ecx edi +
call sub_10454A9  +
push 2  +
pop ecx  +
mov [ebp-34h] eax +
mov [ebp-14h] ecx +
cmp eax ecx +
jb loc_1042106  +
push dword ptr [ebp-14h]  +
lea eax [ebp-10h] +
push eax  +
mov ecx edi +
call sub_10464ED  +
mov byte ptr [ebp-4] 0Eh +
push 2  +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-10h] +
call sub_101ABF3  +
mov byte ptr [ebp-4] 0Fh +
mov eax [eax] +
push offset aNt  +
push eax  +
call sub_10224ED  +
pop ecx  +
test eax eax +
pop ecx  +
setnz byte ptr [ebp+0Bh]  +
mov byte ptr [ebp-4] 0Eh +
lea ecx [ebp-28h] +
call sub_1015174  +
cmp [ebp+0Bh] bl +
jnz loc_10420EB  +
push offset String2  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-30h] +
push eax  +
call sub_1015847  +
mov byte ptr [ebp-4] 10h +
lea ecx [ebp-10h] +
push ecx  +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
call sub_10157ED  +
mov byte ptr [ebp-4] 11h +
mov ecx [esi] +
push eax  +
lea eax [ebp-20h] +
push eax  +
call sub_1046BD3  +
mov byte ptr [ebp-4] 12h +
push eax  +
mov ecx esi +
call sub_1041D2A  +
mov byte ptr [ebp-4] 11h +
mov ecx [ebp-20h] +
cmp ecx ebx +
jz loc_10420D3  +
call sub_101A986  +
mov [ebp-20h] ebx +
mov byte ptr [ebp-4] 10h +
lea ecx [ebp-2Ch] +
call sub_1015174  +
mov byte ptr [ebp-4] 0Eh +
lea ecx [ebp-30h] +
call sub_1015174  +
mov byte ptr [ebp-4] 0Ch +
lea ecx [ebp-10h] +
call sub_1015174  +
inc dword ptr [ebp-14h]  +
mov eax [ebp-14h] +
cmp eax [ebp-34h] +
jbe loc_1042036  +
mov byte ptr [ebp-4] 9 +
lea ecx [ebp-18h] +
call sub_1015174  +
lea eax [ebp-24h] +
push eax  +
mov ecx edi +
call sub_1046A71  +
mov byte ptr [ebp-4] 0Bh +
push dword ptr [eax]  +
lea ecx [ebp+14h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 9 +
mov ecx [ebp-24h] +
cmp ecx ebx +
jz loc_104213E  +
call sub_101A986  +
mov [ebp-24h] ebx +
mov edi [ebp+14h] +
cmp edi ebx +
jnz loc_1041FCE  +
mov byte ptr [ebp-4] 8 +
mov [ebp-4] bl +
mov ecx [ebp+10h] +
cmp ecx ebx +
jz loc_104215F  +
call sub_101A986  +
mov [ebp+10h] ebx +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+0Ch] +
call sub_1015174  +
call sub_1021FA5  +
retn 10h  +
***
call sub_1021EB9  +
mov esi ecx +
mov edi [ebp+0Ch] +
test edi edi +
jnz loc_1042197  +
xor eax eax +
jmp loc_104223B  +
lea ecx [ebp+0Ch] +
call sub_10151DA  +
and dword ptr [ebp-4] 0 +
mov eax [esi+0DCh] +
test eax eax +
jle loc_10421C5  +
cmp eax 5 +
jle loc_10421BA  +
add eax 0FFFFFFF7h +
cmp eax 2 +
ja loc_10421C5  +
lea eax [ebp+0Ch] +
push eax  +
mov ecx esi +
call sub_103F922  +
push ecx  +
add esi 4 +
mov ecx esp +
mov [ebp-10h] esp +
push esi  +
call sub_101C334  +
mov byte ptr [ebp-4] 1 +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-238h] +
call sub_104014D  +
mov byte ptr [ebp-4] 2 +
push dword ptr [ebp+10h]  +
lea eax [ebp+0Ch] +
push edi  +
push ecx  +
mov ecx esp +
mov [ebp+10h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 3 +
push dword ptr [ebp+8]  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-238h] +
call sub_1041E27  +
xor eax eax +
cmp [edi+4] eax +
setnz al  +
mov esi eax +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-238h] +
call sub_1040516  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+0Ch] +
call sub_1015174  +
mov eax esi +
call sub_1021FA5  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push 0  +
call sub_1042178  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_0]  +
push 1  +
call sub_1042178  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_1042292  +
push eax  +
call sub_1021179  +
and dword ptr [esi] 0 +
pop ecx  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_10422AF  +
push 80004005h  +
call loc_1014415  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
fild  [ebp+arg_0] +
test eax eax +
jge loc_10422CD  +
fadd  ds:flt_100A798 +
fdiv  dword ptr [ecx+0Ch] +
call sub_1054666  +
cmp eax 0FFFFFFFFh +
jbe loc_10422DD  +
or eax 0FFFFFFFFh +
xor ecx ecx +
cmp eax 11h +
jbe loc_10422EE  +
inc ecx  +
cmp eax ds:dword_100DF68[ecx*4] +
ja loc_10422E4  +
mov ecx ds:dword_100DF68[ecx*4] +
cmp ecx 0FFFFFFFFh +
jz loc_10422FC  +
mov eax ecx +
pop ebp  +
retn 4  +
***
call sub_1021EB9  +
mov eax ecx +
mov [ebp-10h] eax +
and dword ptr [eax+4] 0 +
mov dword ptr [eax] offset off_10058A4 +
and dword ptr [ebp-4] 0 +
or dword ptr [eax+8] 0FFFFFFFFh +
mov dword ptr [eax] offset off_100E05C +
or dword ptr [ebp-4] 0FFFFFFFFh +
call sub_1021FA5  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_104596F  +
test byte ptr [ebp+8] 1 +
jz loc_1042357  +
push esi  +
call sub_1021179  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_10423A2  +
mov edx [eax+8] +
push edi  +
test edx edx +
jz loc_104237B  +
mov edi edx +
jmp loc_104239F  +
mov eax [eax+0Ch] +
push esi  +
mov esi [ecx+8] +
xor edx edx +
div  esi +
xor edi edi +
inc edx  +
cmp edx esi +
jnb loc_104239E  +
mov eax [ecx] +
lea eax [eax+edx*4] +
cmp dword ptr [eax] 0 +
jz loc_1042399  +
mov edi [eax] +
inc edx  +
test edi edi +
jz loc_1042389  +
pop esi  +
mov eax edi +
pop edi  +
pop ebp  +
retn 4  +
***
call sub_1021EF1  +
mov esi ecx +
mov [ebp-18h] esi +
xor ebx ebx +
mov [ebp-14h] ebx +
mov edi [ebp+8] +
cmp edi ebx +
jnz loc_10423D5  +
push dword ptr [esi+4]  +
call sub_10422B8  +
mov edi eax +
mov [ebp+8] edi +
cmp edi [esi+8] +
jz loc_1042499  +
cmp [esi] ebx +
jnz loc_10423F0  +
push ebx  +
push edi  +
mov ecx esi +
call sub_1037641  +
jmp loc_1042499  +
mov [ebp-4] ebx +
xor ecx ecx +
mov eax edi +
push 4  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_1054617  +
pop ecx  +
mov [ebp-14h] eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
jmp loc_1042425  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_104241D +
retn   +
mov esi [ebp-18h] +
mov edi [ebp+8] +
xor ebx ebx +
cmp [ebp-14h] ebx +
jnz loc_1042434  +
push 8007000Eh  +
call loc_1014415  +
mov eax edi +
shl eax 2 +
push eax  +
push ebx  +
push dword ptr [ebp-14h]  +
call sub_10219E0  +
add esp 0Ch +
mov [ebp+8] ebx +
cmp [esi+8] ebx +
jbe loc_1042482  +
mov eax [esi] +
mov ecx [ebp+8] +
mov ecx [eax+ecx*4] +
cmp ecx ebx +
jz loc_1042477  +
mov ebx [ecx+8] +
mov eax [ecx+0Ch] +
xor edx edx +
div  edi +
mov eax [ebp-14h] +
lea eax [eax+edx*4] +
mov edx [eax] +
mov [ecx+8] edx +
mov [eax] ecx +
mov ecx ebx +
test ebx ebx +
jnz loc_104245A  +
inc dword ptr [ebp+8]  +
mov eax [ebp+8] +
cmp eax [esi+8] +
jb loc_104244E  +
push dword ptr [esi]  +
call sub_1021189  +
pop ecx  +
mov eax [ebp-14h] +
mov [esi] eax +
mov [esi+8] edi +
mov ecx esi +
call sub_10375C6  +
call sub_1021FA5  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_103CFB6  +
pop ecx  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor edx edx +
div  dword ptr [esi+8] +
mov eax [ebp+arg_4] +
xor ebx ebx +
mov [eax] edx +
cmp [esi] ebx +
jnz loc_10424D1  +
xor eax eax +
jmp loc_104250B  +
push edi  +
mov edi [ebp+arg_C] +
mov [edi] ebx +
mov eax [eax] +
mov edx [esi] +
mov esi [edx+eax*4] +
cmp esi ebx +
jz loc_1042508  +
mov eax [ecx] +
mov [ebp+arg_8] eax +
mov eax [ebp+arg_8] +
cmp [esi+0Ch] eax +
jnz loc_10424FF  +
push [ebp+arg_0]  +
push dword ptr [esi]  +
call sub_10147EC  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1042511  +
mov ebx esi +
mov esi [esi+8] +
test esi esi +
jnz loc_10424E7  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
mov [edi] ebx +
mov eax esi +
jmp loc_104250A  +
***
call sub_1021F2C  +
mov eax [ebp+8] +
mov [ebp-820h] eax +
mov eax [ebp+0Ch] +
mov [ebp-824h] eax +
xor ebx ebx +
mov [ebp-4] ebx +
mov [ebp-818h] ebx +
mov [ebp-814h] ebx +
mov esi 800h +
cmp [ebp-818h] ebx +
jnz loc_10425F6  +
push esi  +
lea eax [ebp-810h] +
push ebx  +
push eax  +
call sub_10219E0  +
add esp 0Ch +
lea eax [ebp-81Ch] +
push eax  +
push esi  +
lea eax [ebp-810h] +
push eax  +
xor eax eax +
cmp [ebp-814h] ebx +
push ebx  +
setnz al  +
mov [ebp-81Ch] esi +
inc eax  +
push eax  +
push dword ptr [ebp-824h]  +
push dword ptr [ebp-820h]  +
call ds:SetupDiGetDeviceRegistryPropertyW  +
test eax eax +
jz loc_10425E3  +
lea edi [ebp-810h] +
cmp [ebp-810h] bx +
jz loc_10425E3  +
push edi  +
push dword ptr [ebp+10h]  +
call sub_10224ED  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10425D9  +
push edi  +
call ds:lstrlenW  +
lea edi [edi+eax*2+2] +
cmp [edi] bx +
jnz loc_10425B8  +
jmp loc_10425E3  +
mov dword ptr [ebp-818h] 1 +
inc dword ptr [ebp-814h]  +
cmp dword ptr [ebp-814h] 2 +
jb loc_1042553  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+10h] +
call sub_1015174  +
mov eax [ebp-818h] +
call sub_1021FBE  +
retn 0Ch  +
***
call sub_1021F2C  +
mov eax [ebp+8] +
mov [ebp-268h] eax +
mov eax [ebp+14h] +
mov [ebp-264h] eax +
mov eax [ebp+18h] +
mov [ebp-26Ch] eax +
mov dword ptr [ebp-4] 1 +
xor ebx ebx +
push 7  +
pop ecx  +
mov [eax] ebx +
xor eax eax +
mov esi 22Ch +
lea edi [ebp-2Ch] +
stos   +
push esi  +
lea eax [ebp-258h] +
push ebx  +
push eax  +
mov [ebp-260h] ebx +
mov [ebp-25Ch] ebx +
mov dword ptr [ebp-2Ch] 1Ch +
call sub_10219E0  +
add esp 0Ch +
lea eax [ebp-2Ch] +
push eax  +
push ebx  +
push ebx  +
lea ecx [ebp+10h] +
mov [ebp-258h] esi +
call sub_1015002  +
mov esi [ebp-268h] +
push eax  +
push esi  +
call ds:SetupDiOpenDeviceInfoW  +
test eax eax +
jnz loc_10426CC  +
call ds:GetLastError  +
mov esi eax +
mov [ebp-4] bl +
lea ecx [ebp+0Ch] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+10h] +
call sub_1015174  +
mov eax esi +
call sub_1021FBE  +
retn 14h  +
lea eax [ebp-2Ch] +
push eax  +
push esi  +
call ds:SetupDiSetSelectedDevice  +
test eax eax +
jz loc_10426A3  +
lea eax [ebp-258h] +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
push esi  +
call ds:SetupDiGetDeviceInstallParamsW  +
test eax eax +
jz loc_10426A3  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-234h] +
push 104h  +
push eax  +
call sub_1014BA1  +
test eax eax +
jl loc_10426A3  +
mov eax [ebp-250h] +
or dword ptr [ebp-254h] 10000h +
and eax 0FBFBFFFFh +
or eax 800h +
mov [ebp-250h] eax +
lea eax [ebp-258h] +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
push esi  +
call ds:SetupDiSetDeviceInstallParamsW  +
test eax eax +
jz loc_10426A3  +
push 2  +
lea eax [ebp-2Ch] +
push eax  +
push esi  +
call ds:SetupDiBuildDriverInfoList  +
test eax eax +
jz loc_10426A3  +
lea eax [ebp-2Ch] +
push eax  +
push esi  +
push 17h  +
call ds:SetupDiCallClassInstaller  +
lea eax [ebp-25Ch] +
push eax  +
push ebx  +
push ebx  +
push esi  +
push ebx  +
call dword ptr [ebp-264h]  +
test eax eax +
jnz loc_1042786  +
call ds:GetLastError  +
mov [ebp-260h] eax +
test byte ptr [ebp-25Ch] 80h +
jnz loc_104279B  +
test dword ptr [ebp-25Ch] 100h +
jz loc_10427A7  +
mov eax [ebp-26Ch] +
mov dword ptr [eax] 1 +
mov esi [ebp-260h] +
jmp loc_10426AB  +
***
call sub_1021EB9  +
mov esi ecx +
push 0Ch  +
call sub_10225EB  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_10427E0  +
call sub_1042305  +
or dword ptr [ebp-4] 0FFFFFFFFh +
push eax  +
mov ecx esi +
call sub_104B66E  +
mov eax esi +
call sub_1021FA5  +
retn   +
***
call sub_1021EB9  +
mov [ebp-10h] ecx +
or dword ptr [ebp-4] 0FFFFFFFFh +
call sub_1015174  +
call sub_1021FA5  +
retn   +
***
call sub_1021EB9  +
mov [ebp-10h] ecx +
call sub_10151DA  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax [ebp-10h] +
call sub_1021FA5  +
retn   +
***
call sub_1021EB9  +
lea ecx [ebp-10h] +
call sub_10151DA  +
and dword ptr [ebp-4] 0 +
mov esi [ebp+8] +
mov eax [esi] +
cmp dword ptr [eax-0Ch] 0 +
jz loc_104290D  +
push esi  +
call sub_1035549  +
test al al +
jz loc_104290D  +
lea eax [ebp-10h] +
push eax  +
push esi  +
call sub_1046B0F  +
test eax eax +
jnz loc_10428AC  +
push dword ptr [esi]  +
push offset aPnpDriverPacka  +
push 2  +
call sub_103AC75  +
add esp 0Ch +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_1015174  +
xor eax eax +
call sub_1021FA5  +
retn 4  +
push ecx  +
lea eax [ebp-10h] +
mov ecx esp +
mov [ebp+8] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 1 +
mov byte ptr [ebp-4] 0 +
call sub_104660B  +
push dword ptr [ebp-10h]  +
test eax eax +
jz loc_10428F0  +
push offset aSuccessfully_2  +
push 1  +
call sub_103AC75  +
add esp 0Ch +
xor esi esi +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_1015174  +
mov eax esi +
jmp loc_10428A4  +
push offset aCouldNotRemo_3  +
call ds:GetLastError  +
push eax  +
push 3  +
call sub_103AD09  +
add esp 10h +
mov esi 643h +
jmp loc_10428E0  +
push 57h  +
pop esi  +
jmp loc_10428E0  +
***
call sub_1021EB9  +
push offset aSetupapi_dll_0  +
xor ebx ebx +
xor esi esi +
call ds:LoadLibraryW  +
mov [ebp-18h] eax +
cmp eax ebx +
jnz loc_1042946  +
call ds:GetLastError  +
mov esi eax +
jmp loc_10429E5  +
push offset aSetupuninstall  +
push eax  +
call ds:GetProcAddress  +
mov edi eax +
cmp edi ebx +
jnz loc_1042962  +
call ds:GetLastError  +
mov esi eax +
jmp loc_10429DC  +
lea ecx [ebp-14h] +
call sub_10151DA  +
mov [ebp-4] ebx +
lea ecx [ebp-10h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-14h] +
call sub_1014FC6  +
lea ecx [ebp-10h] +
call sub_1014FC6  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
push dword ptr [ebp+8]  +
call sub_1036032  +
test al al +
jz loc_10429C5  +
mov ecx [ebp-10h] +
cmp [ecx-0Ch] ebx +
jz loc_10429C5  +
xor eax eax +
inc eax  +
cmp [ebp+0Ch] ebx +
jz loc_10429B0  +
push 3  +
pop eax  +
push ebx  +
push eax  +
push ecx  +
call edi  +
test eax eax +
jz loc_10429BD  +
xor esi esi +
jmp loc_10429C5  +
call ds:GetLastError  +
mov esi eax +
mov [ebp-4] bl +
lea ecx [ebp-10h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call sub_1015174  +
push dword ptr [ebp-18h]  +
call ds:FreeLibrary  +
mov eax esi +
call sub_1021FA5  +
retn 8  +
***
call sub_1021EB9  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
lea ecx [esi+4] +
call sub_10427F9  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_1015174  +
call sub_1021FA5  +
retn   +
***
call sub_1021EB9  +
mov [ebp-10h] ecx +
or dword ptr [ebp-4] 0FFFFFFFFh +
call sub_10429F4  +
call sub_1021FA5  +
retn   +
***
call sub_1021EB9  +
lea ecx [ebp-10h] +
call sub_10151DA  +
xor ebx ebx +
mov [ebp-4] ebx +
lea ecx [ebp-18h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-14h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 2 +
push 105h  +
lea ecx [ebp-14h] +
call sub_10158A3  +
mov edi [ebp+8] +
mov [ebp-1Ch] eax +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-10h] +
push eax  +
push edi  +
call sub_1036032  +
test al al +
jnz loc_1042AD2  +
mov esi 643h +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-14h] +
call sub_1015174  +
mov [ebp-4] bl +
lea ecx [ebp-18h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_1015174  +
mov eax esi +
call sub_1021FA5  +
retn 4  +
mov eax [edi] +
mov esi ds:SetupCopyOEMInfW +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 8  +
push 1  +
push dword ptr [ebp-10h]  +
push eax  +
call esi  +
cmp eax ebx +
jnz loc_1042AF7  +
call ds:GetLastError  +
cmp eax 50h +
jnz loc_1042B24  +
mov edi [edi] +
push ebx  +
push ebx  +
push 105h  +
push dword ptr [ebp-1Ch]  +
push ebx  +
push 1  +
push dword ptr [ebp-10h]  +
push edi  +
call esi  +
cmp eax ebx +
jnz loc_1042B18  +
call ds:GetLastError  +
jmp loc_1042B24  +
push 0FFFFFFFFh  +
lea ecx [ebp-14h] +
call sub_1015023  +
xor eax eax +
mov esi eax +
jmp loc_1042AA5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push edi  +
xor ebx ebx +
push 104h  +
mov ecx esi +
mov [ebp+var_8] ebx +
call sub_10158A3  +
push 20019h  +
push 2  +
push ebx  +
push 1  +
push [ebp+DeviceInfoData]  +
mov [ebp+lpData] eax +
push [ebp+DeviceInfoSet]  +
call ds:SetupDiOpenDevRegKey  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jz loc_1042BA1  +
mov eax [esi] +
mov eax [eax-0Ch] +
add eax eax +
mov [ebp+cbData] eax +
lea eax [ebp+cbData] +
push eax  +
push [ebp+lpData]  +
push ebx  +
push ebx  +
push offset aInfpath  +
push edi  +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_1042B9A  +
cmp [ebp+cbData] ebx +
jbe loc_1042B9A  +
mov [ebp+var_8] 1 +
push edi  +
call ds:RegCloseKey  +
push 0FFFFFFFFh  +
mov ecx esi +
call sub_1015023  +
mov eax [ebp+var_8] +
pop edi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi ds:SetupDiGetDeviceInstanceIdW +
xor ebx ebx +
lea eax [ebp+RequiredSize] +
push eax  +
push ebx  +
push ebx  +
push [ebp+DeviceInfoData]  +
mov [ebp+var_4] ebx +
push [ebp+DeviceInfoSet]  +
mov [ebp+RequiredSize] ebx +
call esi  +
test eax eax +
jnz loc_1042BEF  +
call ds:GetLastError  +
cmp eax 7Ah +
jnz loc_1042C26  +
mov [ebp+var_4] ebx +
mov eax [ebp+RequiredSize] +
add eax 2 +
push eax  +
mov ecx edi +
call sub_10158A3  +
mov ecx [edi] +
mov ecx [ecx-0Ch] +
push ebx  +
push ecx  +
push eax  +
push [ebp+DeviceInfoData]  +
push [ebp+DeviceInfoSet]  +
call esi  +
test eax eax +
jnz loc_1042C1A  +
call ds:GetLastError  +
mov [ebp+var_4] eax +
push 0FFFFFFFFh  +
mov ecx edi +
call sub_1015023  +
mov eax [ebp+var_4] +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1042A27  +
test [ebp+arg_0] 1 +
jz loc_1042C4B  +
push esi  +
call sub_1021179  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
test edi edi +
jnz loc_1042C71  +
push 80004005h  +
call loc_1014415  +
push 0  +
mov ecx edi +
call sub_1042C31  +
mov eax [esi+2Ch] +
mov [edi+8] eax +
dec dword ptr [esi+4]  +
mov eax [esi+4] +
mov [esi+2Ch] edi +
cmp eax [esi+1Ch] +
jnb loc_1042CA4  +
cmp dword ptr [esi+20h] 0 +
jnz loc_1042CA4  +
push eax  +
mov ecx esi +
call sub_10422B8  +
push eax  +
mov ecx esi +
call sub_10423AB  +
cmp dword ptr [esi+4] 0 +
jnz loc_1042CB1  +
mov ecx esi +
call sub_103D067  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
inc dword ptr [esi+20h]  +
xor ebx ebx +
cmp [esi] ebx +
jz loc_1042CF2  +
cmp [esi+8] ebx +
jbe loc_1042CF2  +
push edi  +
mov eax [esi] +
mov edi [eax+ebx*4] +
jmp loc_1042CE5  +
mov eax edi +
mov edi [edi+8] +
push eax  +
mov ecx esi +
call sub_1042C57  +
test edi edi +
jnz loc_1042CD8  +
inc ebx  +
cmp ebx [esi+8] +
jb loc_1042CD1  +
xor ebx ebx +
pop edi  +
push dword ptr [esi]  +
call sub_1021189  +
pop ecx  +
mov [esi] ebx +
mov [esi+4] ebx +
cmp [esi+20h] ebx +
jnz loc_1042D15  +
push ebx  +
push ebx  +
mov ecx esi +
call sub_10422B8  +
push eax  +
mov ecx esi +
call sub_1037641  +
mov ecx esi +
call sub_103D067  +
dec dword ptr [esi+20h]  +
pop esi  +
pop ebx  +
retn   +
***
call sub_1021EB9  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+8]  +
call sub_10161A7  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+4] +
call sub_104281C  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax esi +
call sub_1021FA5  +
retn 4  +
***
call sub_1021F2C  +
mov eax [ebp+0Ch] +
mov [ebp-400h] eax +
xor ebx ebx +
mov [ebp-4] ebx +
xor edi edi +
mov [ebp-3E8h] ebx +
mov [ebp-3DCh] edi +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-3CCh] +
call sub_10151DA  +
mov byte ptr [ebp-4] 2 +
push dword ptr [ebp+8]  +
push offset aAttemptingToRe  +
push 1  +
call sub_103AC75  +
add esp 0Ch +
push offset aNewdev_dll  +
call ds:LoadLibraryW  +
mov [ebp-3F4h] eax +
cmp eax ebx +
jnz loc_1042DDB  +
call ds:GetLastError  +
mov esi eax +
jmp loc_1043225  +
push offset aInstallselecte  +
push eax  +
call ds:GetProcAddress  +
mov [ebp-3F8h] eax +
cmp eax ebx +
jnz loc_1042DFE  +
call ds:GetLastError  +
mov esi eax +
jmp loc_1043219  +
lea eax [ebp-3E8h] +
push eax  +
push ebx  +
push 104h  +
lea eax [ebp-3A8h] +
push eax  +
push 8  +
push 1  +
push ebx  +
push dword ptr [ebp+8]  +
call ds:SetupCopyOEMInfW  +
test eax eax +
jnz loc_1043202  +
mov esi ds:GetLastError +
call esi  +
cmp eax 50h +
jnz loc_1043202  +
push dword ptr [ebp-3E8h]  +
lea ecx [ebp-3CCh] +
call sub_10158CD  +
push dword ptr [ebp-3CCh]  +
push dword ptr [ebp+8]  +
push offset aSMatchesOemInf  +
push 1  +
call sub_103AC75  +
add esp 10h +
lea ecx [ebp-3DCh] +
call sub_10427B7  +
mov edi [ebp-3DCh] +
push 4  +
push ebx  +
push ebx  +
push ebx  +
mov ecx edi +
call sub_10455F2  +
test eax eax +
jz loc_1043214  +
lea ecx [ebp-3C4h] +
push ecx  +
mov dword ptr [ebp-3C4h] 1Ch +
mov eax [edi+8] +
push ebx  +
push eax  +
mov [ebp-3ECh] ebx +
mov [ebp-3E4h] ebx +
mov [ebp-3E0h] ebx +
call ds:SetupDiEnumDeviceInfo  +
jmp loc_10431E6  +
inc dword ptr [ebp-3E0h]  +
or dword ptr [ebp-3D0h] 0FFFFFFFFh +
lea ecx [ebp-3C8h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 3 +
mov eax [edi+8] +
push ebx  +
push 0C8h  +
lea ecx [ebp-1A0h] +
push ecx  +
lea ecx [ebp-3C4h] +
push ecx  +
push eax  +
mov [ebp-3F0h] ebx +
call ds:SetupDiGetDeviceInstanceIdW  +
test eax eax +
jnz loc_1042F07  +
call esi  +
mov esi eax +
jmp loc_1043182  +
mov eax [edi+8] +
push 20019h  +
push 2  +
push ebx  +
push 1  +
lea ecx [ebp-3C4h] +
push ecx  +
push eax  +
call ds:SetupDiOpenDevRegKey  +
mov [ebp-3D8h] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1042F80  +
call esi  +
mov esi eax +
mov eax 0E0000000h +
mov ecx esi +
and ecx eax +
cmp ecx eax +
mov eax esi +
jnz loc_1042F4C  +
and eax 0FFFFh +
or eax 800F0000h +
jmp loc_1042F5A  +
cmp esi ebx +
jle loc_1042F5A  +
and eax 0FFFFh +
or eax 80070000h +
cmp eax 800F0204h +
jz loc_10431BA  +
lea eax [ebp-1A0h] +
push eax  +
push offset aUnableToOpenDr  +
push 2  +
call sub_103AC75  +
add esp 0Ch +
jmp loc_1043182  +
push 104h  +
lea ecx [ebp-3C8h] +
call sub_10158A3  +
lea ecx [ebp-3FCh] +
push ecx  +
push eax  +
push ebx  +
push ebx  +
push offset aInfpath  +
push dword ptr [ebp-3D8h]  +
mov dword ptr [ebp-3FCh] 208h +
call ds:RegQueryValueExW  +
test eax eax +
jz loc_1042FE5  +
call esi  +
push 0FFFFFFFFh  +
lea ecx [ebp-3C8h] +
mov esi eax +
call sub_1015023  +
lea eax [ebp-1A0h] +
push eax  +
push offset aUnableToGetT_0  +
push 2  +
call sub_103AC75  +
add esp 0Ch +
jmp loc_104316E  +
push 0FFFFFFFFh  +
lea ecx [ebp-3C8h] +
call sub_1015023  +
push dword ptr [ebp-3C8h]  +
lea ecx [ebp-3CCh] +
call sub_101492B  +
test eax eax +
jnz loc_1043157  +
lea eax [ebp-1A0h] +
push eax  +
push dword ptr [ebp-3C8h]  +
push offset aTheOemInfSForD  +
push 1  +
call sub_103AC75  +
add esp 10h +
push ebx  +
push dword ptr [ebp-3B0h]  +
lea eax [ebp-40Ch] +
push eax  +
lea eax [ebp-404h] +
push eax  +
mov dword ptr [ebp-3F0h] 1 +
call ds:CM_Get_DevNode_Status  +
cmp eax 0Dh +
jz loc_10430EA  +
cmp eax 25h +
jz loc_10430EA  +
lea eax [ebp-1A0h] +
push eax  +
push offset aTheDeviceSIsNo  +
push 1  +
call sub_103AC75  +
add esp 0Ch +
push ebx  +
push ebx  +
call ds:SetupDiCreateDeviceInfoList  +
mov [ebp-3D0h] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1043090  +
call esi  +
mov esi eax +
jmp loc_104316E  +
push dword ptr [ebp-400h]  +
lea eax [ebp-1A0h] +
push dword ptr [ebp-3F8h]  +
push ecx  +
mov ecx esp +
mov [ebp-408h] esp +
push eax  +
call sub_10161A7  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-3CCh] +
call sub_1015002  +
push ecx  +
mov ecx esp +
mov [ebp-410h] esp +
push eax  +
call sub_10161A7  +
mov byte ptr [ebp-4] 5 +
push dword ptr [ebp-3D0h]  +
mov byte ptr [ebp-4] 3 +
call sub_1042615  +
mov esi eax +
cmp esi ebx +
jnz loc_1043159  +
jmp loc_1043157  +
lea eax [ebp-1A0h] +
push eax  +
push offset aTheDeviceSIsAP  +
push 1  +
call sub_103AC75  +
add esp 0Ch +
push ebx  +
push 4  +
lea ecx [ebp-3D4h] +
push ecx  +
push ebx  +
push 0Ah  +
lea ecx [ebp-3C4h] +
mov [ebp-3D4h] ebx +
mov eax [edi+8] +
push ecx  +
push eax  +
call ds:SetupDiGetDeviceRegistryPropertyW  +
test eax eax +
jz loc_1043087  +
or dword ptr [ebp-3D4h] 20h +
mov eax [edi+8] +
push 4  +
lea ecx [ebp-3D4h] +
push ecx  +
push 0Ah  +
lea ecx [ebp-3C4h] +
push ecx  +
push eax  +
call ds:SetupDiSetDeviceRegistryPropertyW  +
test eax eax +
jz loc_1043087  +
xor esi esi +
cmp dword ptr [ebp-3D0h] 0FFFFFFFFh +
jz loc_104316E  +
push dword ptr [ebp-3D0h]  +
call ds:SetupDiDestroyDeviceInfoList  +
cmp [ebp-3D8h] ebx +
jz loc_1043182  +
push dword ptr [ebp-3D8h]  +
call ds:RegCloseKey  +
cmp esi ebx +
jz loc_10431BA  +
cmp [ebp-3F0h] ebx +
jz loc_10431B0  +
lea eax [ebp-1A0h] +
push eax  +
push offset aUnableToRepair  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
mov dword ptr [ebp-3ECh] 1 +
jmp loc_10431BA  +
mov dword ptr [ebp-3E4h] 1 +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-3C8h] +
call sub_1015174  +
mov eax [edi+8] +
lea ecx [ebp-3C4h] +
push ecx  +
push dword ptr [ebp-3E0h]  +
push eax  +
call ds:SetupDiEnumDeviceInfo  +
mov esi ds:GetLastError +
test eax eax +
jnz loc_1042EBA  +
call esi  +
cmp eax 103h +
jz loc_10431FE  +
call esi  +
jmp loc_1042DF7  +
xor esi esi +
jmp loc_1043219  +
push dword ptr [ebp+8]  +
push offset aUnableToRetr_1  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
mov esi 65Bh +
push dword ptr [ebp-3F4h]  +
call ds:FreeLibrary  +
cmp esi ebx +
jnz loc_104325A  +
cmp [ebp-3ECh] ebx +
jz loc_1043244  +
push offset aRepairFailed_W  +
push 3  +
call sub_103AC75  +
mov esi 643h +
jmp loc_1043258  +
cmp [ebp-3E4h] ebx +
jz loc_104325A  +
push offset aTheDriverMayNo  +
push 2  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-3CCh] +
call sub_1015174  +
mov [ebp-4] bl +
cmp edi ebx +
jz loc_104327D  +
mov ecx edi +
call sub_101A986  +
mov [ebp-3DCh] ebx +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
mov eax esi +
call sub_1021FBE  +
retn 8  +
***
call sub_1021F2C  +
mov eax [ebp+0Ch] +
mov [ebp-0C54h] eax +
xor ebx ebx +
mov [ebp-4] ebx +
push 61Ch  +
lea eax [ebp-62Ch] +
push ebx  +
push eax  +
call sub_10219E0  +
add esp 0Ch +
lea eax [ebp-62Ch] +
push eax  +
push dword ptr [ebp-0C54h]  +
mov dword ptr [ebp-62Ch] 61Ch +
push edi  +
call ds:SetupDiGetSelectedDriverW  +
test eax eax +
jz loc_10433D4  +
push ebx  +
mov eax 622h +
push eax  +
mov [ebp-0C50h] eax +
lea eax [ebp-0C50h] +
push eax  +
lea eax [ebp-62Ch] +
push eax  +
push dword ptr [ebp-0C54h]  +
push edi  +
call ds:SetupDiGetDriverInfoDetailW  +
test eax eax +
jnz loc_104333A  +
call ds:GetLastError  +
cmp eax 7Ah +
jz loc_104333A  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
mov eax ebx +
jmp loc_10433E2  +
lea eax [ebp-0A38h] +
push eax  +
push dword ptr [ebp+8]  +
call sub_10224ED  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1043354  +
xor ebx ebx +
inc ebx  +
jmp loc_1043327  +
cmp dword ptr [ebp+10h] 3 +
jz loc_10433D4  +
cmp dword ptr [ebp+10h] 4 +
jz loc_10433D4  +
cmp dword ptr [ebp+10h] 5 +
jz loc_10433D4  +
lea ecx [ebp-0C54h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 1 +
lea eax [ebp-0C54h] +
push eax  +
push ecx  +
lea eax [ebp-0A38h] +
mov ecx esp +
mov [ebp-0C58h] esp +
push eax  +
call sub_10161A7  +
mov byte ptr [ebp-4] 2 +
mov byte ptr [ebp-4] 1 +
call sub_104674B  +
cmp eax ebx +
jnz loc_10433C6  +
push dword ptr [ebp-0C54h]  +
push dword ptr [ebp+8]  +
call sub_10224ED  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_10433C6  +
mov [ebp-4] bl +
lea ecx [ebp-0C54h] +
call sub_1015174  +
jmp loc_104334F  +
mov [ebp-4] bl +
lea ecx [ebp-0C54h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
xor eax eax +
call sub_1021FBE  +
retn 0Ch  +
***
call sub_1021EB9  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_10151DA  +
and dword ptr [ebp-4] 0 +
fld  ds:flt_100B470 +
push 0Ah  +
sub esp 0Ch +
fstp  [esp+14h+var_C] +
lea ecx [esi+4] +
fld  ds:flt_100B46C +
fstp  [esp+14h+var_10] +
fld  ds:flt_100B468 +
fstp  [esp+14h+var_14] +
push 11h  +
call sub_103783F  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax esi +
call sub_1021FA5  +
retn   +
***
call sub_1021F2C  +
mov eax [ebp+8] +
mov esi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-0A38h] +
mov [ebp-0A70h] esi +
mov [ebp-0A64h] eax +
call sub_10161A7  +
mov [ebp-4] ebx +
push ebx  +
lea ecx [ebp-0A44h] +
call sub_10161A7  +
mov byte ptr [ebp-4] 1 +
push ebx  +
lea ecx [ebp-0A3Ch] +
call sub_10161A7  +
mov byte ptr [ebp-4] 2 +
mov [ebp-0A4Ch] ebx +
mov byte ptr [ebp-4] 3 +
lea eax [ebp-0A38h] +
push eax  +
push esi  +
call sub_1046B0F  +
test eax eax +
jnz loc_10434C8  +
push dword ptr [esi]  +
push offset aPnpDriverPac_0  +
push 2  +
call sub_103AC75  +
add esp 0Ch +
jmp loc_10437FA  +
lea eax [ebp-0A3Ch] +
push eax  +
lea eax [ebp-0A44h] +
push eax  +
lea eax [ebp-0A38h] +
push eax  +
call sub_1036032  +
test al al +
jnz loc_10434F5  +
push dword ptr [ebp-0A38h]  +
push offset aFailedToObtain  +
push 3  +
jmp loc_10434BB  +
lea ecx [ebp-0A4Ch] +
call sub_10427B7  +
mov esi [ebp-0A4Ch] +
push 4  +
push ebx  +
push ebx  +
push ebx  +
mov ecx esi +
call sub_10455F2  +
test eax eax +
jnz loc_1043527  +
mov byte ptr [ebp-4] 2 +
cmp esi ebx +
jz loc_10437FA  +
jmp loc_10437ED  +
lea ecx [ebp-0A34h] +
push ecx  +
mov dword ptr [ebp-0A34h] 1Ch +
mov [ebp-0A54h] ebx +
push ebx  +
jmp loc_10437D7  +
inc dword ptr [ebp-0A54h]  +
push ebx  +
push dword ptr [ebp-0A20h]  +
lea eax [ebp-0A7Ch] +
push eax  +
lea eax [ebp-0A78h] +
push eax  +
call ds:CM_Get_DevNode_Status  +
cmp eax 0Dh +
jz loc_1043573  +
cmp eax 25h +
jnz loc_10437CA  +
mov [ebp-0A58h] ebx +
mov [ebp-0A50h] ebx +
cmp [ebp-0A58h] ebx +
jnz loc_10437CA  +
mov edi 800h +
push edi  +
lea eax [ebp-0A18h] +
push ebx  +
push eax  +
call sub_10219E0  +
add esp 0Ch +
lea ecx [ebp-0A60h] +
push ecx  +
push edi  +
lea ecx [ebp-0A18h] +
push ecx  +
xor ecx ecx +
cmp [ebp-0A50h] ebx +
push ebx  +
setnz cl  +
mov [ebp-0A60h] edi +
mov eax [esi+8] +
inc ecx  +
push ecx  +
lea ecx [ebp-0A34h] +
push ecx  +
push eax  +
call ds:SetupDiGetDeviceRegistryPropertyW  +
test eax eax +
jz loc_10437B7  +
cmp [ebp-0A18h] bx +
lea eax [ebp-0A18h] +
jmp loc_10437AB  +
cmp [ebp-0A58h] ebx +
jnz loc_10437B7  +
mov eax [ebp-0A64h] +
mov eax [eax] +
mov [ebp-0A68h] eax +
cmp eax ebx +
jz loc_1043797  +
mov ecx [ebp-0A64h] +
lea eax [ebp-0A68h] +
push eax  +
call sub_105038C  +
push eax  +
lea ecx [ebp-0A40h] +
call sub_10151F2  +
mov byte ptr [ebp-4] 4 +
push dword ptr [ebp-0A5Ch]  +
push dword ptr [ebp-0A40h]  +
call sub_10224ED  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_104377C  +
mov eax [esi+8] +
push 20019h  +
push 2  +
push ebx  +
xor edi edi +
inc edi  +
push edi  +
lea ecx [ebp-0A34h] +
push ecx  +
push eax  +
mov [ebp-0A58h] edi +
call ds:SetupDiOpenDevRegKey  +
mov [ebp-0A6Ch] eax +
cmp eax 0FFFFFFFFh +
jz loc_104377C  +
lea ecx [ebp-0A60h] +
push ecx  +
lea ecx [ebp-218h] +
push ecx  +
lea ecx [ebp-0A74h] +
push ecx  +
push ebx  +
push offset aInfpath  +
push eax  +
mov dword ptr [ebp-0A60h] 208h +
mov [ebp-0A74h] edi +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_1043770  +
push 0FFFFFFFFh  +
push dword ptr [ebp-0A3Ch]  +
lea eax [ebp-218h] +
push 0FFFFFFFFh  +
push eax  +
push edi  +
push 7Fh  +
call ds:CompareStringW  +
cmp eax 2 +
jnz loc_10436F7  +
mov eax [ebp-0A70h] +
push dword ptr [eax]  +
push dword ptr [ebp-0A40h]  +
push offset aPhantomDeviceW  +
push edi  +
call sub_103AC75  +
add esp 10h +
jmp loc_1043770  +
push ebx  +
push 4  +
lea ecx [ebp-0A48h] +
push ecx  +
push ebx  +
push 0Ah  +
lea ecx [ebp-0A34h] +
mov [ebp-0A48h] ebx +
mov eax [esi+8] +
push ecx  +
push eax  +
call ds:SetupDiGetDeviceRegistryPropertyW  +
test eax eax +
jz loc_104375C  +
or dword ptr [ebp-0A48h] 20h +
mov eax [esi+8] +
push 4  +
lea ecx [ebp-0A48h] +
push ecx  +
push 0Ah  +
lea ecx [ebp-0A34h] +
push ecx  +
push eax  +
call ds:SetupDiSetDeviceRegistryPropertyW  +
push dword ptr [ebp-0A40h]  +
test eax eax +
jz loc_1043753  +
push offset aMarkedPhantomD  +
jmp loc_1043767  +
push offset aFailedToSetPha  +
push 3  +
jmp loc_1043768  +
push dword ptr [ebp-0A40h]  +
push offset aFailedToGetRei  +
push edi  +
call sub_103AC75  +
add esp 0Ch +
push dword ptr [ebp-0A6Ch]  +
call ds:RegCloseKey  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-0A40h] +
call sub_1015174  +
cmp [ebp-0A68h] ebx +
jnz loc_1043611  +
mov edi [ebp-0A5Ch] +
push edi  +
call ds:lstrlenW  +
lea eax [edi+eax*2+2] +
cmp [eax] bx +
mov [ebp-0A5Ch] eax +
jnz loc_10435EF  +
inc dword ptr [ebp-0A50h]  +
cmp dword ptr [ebp-0A50h] 2 +
jb loc_104357F  +
lea ecx [ebp-0A34h] +
push ecx  +
push dword ptr [ebp-0A54h]  +
mov eax [esi+8] +
push eax  +
call ds:SetupDiEnumDeviceInfo  +
test eax eax +
jnz loc_1043544  +
mov byte ptr [ebp-4] 2 +
mov ecx esi +
call sub_101A986  +
mov [ebp-0A4Ch] ebx +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-0A3Ch] +
call sub_1015174  +
mov [ebp-4] bl +
lea ecx [ebp-0A44h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-0A38h] +
call sub_1015174  +
call sub_1021FBE  +
retn 4  +
***
call sub_1021EB9  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+8]  +
call sub_1042D31  +
and dword ptr [ebp-4] 0 +
mov eax [ebp+0Ch] +
mov [esi+0Ch] eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax esi +
call sub_1021FA5  +
retn 8  +
***
call sub_1021EB9  +
lea ecx [ebp-10h] +
call sub_10151DA  +
xor ebx ebx +
mov [ebp-4] ebx +
lea ecx [ebp-14h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 1 +
mov edi [ebp+0Ch] +
mov [ebp-18h] ebx +
mov [ebp-1Ch] ebx +
cmp edi ebx +
jnz loc_10438BD  +
mov [ebp-4] bl +
lea ecx [ebp-14h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_1015174  +
push 57h  +
pop eax  +
call sub_1021FA5  +
retn 8  +
mov eax [ebp+8] +
mov [edi] ebx +
mov esi [eax] +
mov [ebp-24h] esi +
cmp esi ebx +
jnz loc_10438E9  +
push 57h  +
pop esi  +
mov [ebp-4] bl +
lea ecx [ebp-14h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_1015174  +
mov eax esi +
jmp loc_10438B5  +
push offset aNewdev_dll  +
call ds:LoadLibraryW  +
mov [ebp-28h] eax +
cmp eax ebx +
jnz loc_1043908  +
call ds:GetLastError  +
mov edi eax +
jmp loc_10439FF  +
push offset aInstallselecte  +
push eax  +
call ds:GetProcAddress  +
mov [ebp-20h] eax +
cmp eax ebx +
jnz loc_1043928  +
call ds:GetLastError  +
mov edi eax +
jmp loc_10439F6  +
push 6  +
push ebx  +
push ebx  +
push ebx  +
call ds:SetupDiGetClassDevsW  +
mov [ebp+8] eax +
cmp eax 0FFFFFFFFh +
jz loc_104391B  +
add esi 4 +
mov ecx esi +
call sub_103760F  +
mov [ebp+0Ch] eax +
cmp eax ebx +
jnz loc_1043956  +
mov edi 103h +
jmp loc_10439ED  +
push eax  +
mov ecx esi +
call sub_1042299  +
push eax  +
lea ecx [ebp-10h] +
call sub_1015959  +
lea eax [ebp+0Ch] +
push eax  +
mov ecx esi +
call sub_103D087  +
push eax  +
lea ecx [ebp-14h] +
call sub_1015959  +
push edi  +
push dword ptr [ebp-20h]  +
lea eax [ebp-10h] +
push ecx  +
mov ecx esp +
mov [ebp-2Ch] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 2 +
push ecx  +
lea eax [ebp-14h] +
mov ecx esp +
mov [ebp-30h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 3 +
push dword ptr [ebp+8]  +
mov byte ptr [ebp-4] 1 +
call sub_1042615  +
cmp eax ebx +
jnz loc_10439BA  +
inc dword ptr [ebp-18h]  +
jmp loc_10439BD  +
inc dword ptr [ebp-1Ch]  +
mov eax [ebp+0Ch] +
cmp eax ebx +
jnz loc_1043956  +
cmp [ebp-18h] ebx +
jz loc_10439D9  +
mov eax [ebp-1Ch] +
neg eax  +
sbb eax eax +
and eax 0EAh +
mov edi eax +
jmp loc_10439DE  +
mov edi 643h +
mov ecx [ebp-24h] +
call sub_1014FC6  +
mov ecx esi +
call sub_1042CBC  +
push dword ptr [ebp+8]  +
call ds:SetupDiDestroyDeviceInfoList  +
push dword ptr [ebp-28h]  +
call ds:FreeLibrary  +
mov esi edi +
jmp loc_10438CE  +
***
call sub_1021F2C  +
mov edi ecx +
and dword ptr [ebp-4] 0 +
lea eax [ebp-23Ch] +
push eax  +
push ebx  +
push edi  +
mov dword ptr [ebp-248h] 270Fh +
mov dword ptr [ebp-23Ch] 22Ch +
call ds:SetupDiGetDeviceInstallParamsW  +
test eax eax +
jz loc_1043AEC  +
call sub_1035328  +
or dword ptr [ebp-234h] 800h +
mov [ebp-248h] eax +
cmp eax 1 +
jz loc_1043C24  +
cmp eax 2 +
jz loc_1043C24  +
cmp eax 3 +
jnz loc_1043B8C  +
lea ecx [ebp-240h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 1 +
push ebx  +
push edi  +
lea esi [ebp-240h] +
call sub_1042B30  +
test eax eax +
jz loc_1043ADD  +
push dword ptr [ebp-240h]  +
lea eax [ebp-218h] +
push 104h  +
push eax  +
call sub_1014BA1  +
test eax eax +
jl loc_1043ADD  +
or dword ptr [ebp-238h] 10000h +
lea eax [ebp-23Ch] +
push eax  +
push ebx  +
push edi  +
call ds:SetupDiSetDeviceInstallParamsW  +
test eax eax +
jz loc_1043ADD  +
push 2  +
push ebx  +
push edi  +
call ds:SetupDiBuildDriverInfoList  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-240h] +
call sub_1015174  +
lea eax [ebp-23Ch] +
push eax  +
push ebx  +
push edi  +
mov dword ptr [ebp-23Ch] 22Ch +
call ds:SetupDiGetDeviceInstallParamsW  +
test eax eax +
jz loc_1043B62  +
push dword ptr [ebp+8]  +
lea eax [ebp-218h] +
push 104h  +
push eax  +
call sub_1014BA1  +
test eax eax +
jl loc_1043C24  +
mov eax [ebp-234h] +
or dword ptr [ebp-238h] 10000h +
and eax 0FBFFFFFFh +
or eax 40800h +
mov [ebp-234h] eax +
lea eax [ebp-23Ch] +
push eax  +
push ebx  +
push edi  +
call ds:SetupDiSetDeviceInstallParamsW  +
test eax eax +
jz loc_1043B62  +
push 2  +
push ebx  +
push edi  +
call ds:SetupDiBuildDriverInfoList  +
push ebx  +
push edi  +
push 17h  +
call ds:SetupDiCallClassInstaller  +
test eax eax +
jnz loc_1043C85  +
xor esi esi +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
mov eax esi +
call sub_1021FBE  +
retn 4  +
cmp eax 4 +
jz loc_1043C55  +
cmp eax 5 +
jz loc_1043C55  +
lea ecx [ebp-240h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-244h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 3 +
push ebx  +
push edi  +
lea esi [ebp-240h] +
call sub_1042B30  +
test eax eax +
jz loc_1043C37  +
lea eax [ebp-244h] +
push eax  +
push ecx  +
mov eax esi +
mov ecx esp +
mov [ebp-24Ch] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 4 +
mov byte ptr [ebp-4] 3 +
call sub_104674B  +
test eax eax +
jnz loc_1043C37  +
push dword ptr [ebp-244h]  +
push dword ptr [ebp+8]  +
call sub_10224ED  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1043C37  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-244h] +
call sub_1015174  +
mov byte ptr [ebp-4] 0 +
mov ecx esi +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
xor eax eax +
jmp loc_1043B84  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-244h] +
call sub_1015174  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-240h] +
call sub_1015174  +
or dword ptr [ebp-234h] 4000000h +
lea eax [ebp-23Ch] +
push eax  +
push ebx  +
push edi  +
call ds:SetupDiSetDeviceInstallParamsW  +
test eax eax +
jz loc_1043AEC  +
push 2  +
push ebx  +
push edi  +
call ds:SetupDiBuildDriverInfoList  +
jmp loc_1043AEC  +
push dword ptr [ebp-248h]  +
lea eax [ebp+8] +
push ebx  +
push ecx  +
mov ecx esp +
mov [ebp-24Ch] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 5 +
mov byte ptr [ebp-4] 0 +
call sub_1043298  +
mov esi eax +
jmp loc_1043B76  +
***
mov edi edi +
push esi  +
push 34h  +
mov esi ecx +
call sub_10225EB  +
pop ecx  +
test eax eax +
jz loc_1043CD1  +
mov ecx eax +
call sub_10433EF  +
jmp loc_1043CD3  +
xor eax eax +
mov [esi] eax +
mov eax esi +
pop esi  +
retn   +
***
call sub_1021EF1  +
mov esi ecx +
mov [ebp-14h] esi +
xor ebx ebx +
cmp [esi+2Ch] ebx +
jnz loc_1043D32  +
push 10h  +
push dword ptr [esi+24h]  +
lea eax [esi+28h] +
push eax  +
call sub_1014B4F  +
cmp eax ebx +
jnz loc_1043D12  +
push 8007000Eh  +
call loc_1014415  +
mov ecx [esi+24h] +
mov edx ecx +
shl edx 4 +
lea eax [edx+eax-0Ch] +
dec ecx  +
cmp ecx ebx +
jl loc_1043D32  +
mov edx [esi+2Ch] +
mov [eax+8] edx +
mov [esi+2Ch] eax +
sub eax 10h +
dec ecx  +
jns loc_1043D23  +
mov edi [esi+2Ch] +
xor eax eax +
cmp edi ebx +
setnz al  +
cmp eax ebx +
jnz loc_1043D47  +
push 80004005h  +
jmp loc_1043D0D  +
mov [ebp-18h] edi +
mov eax [edi+8] +
mov [esi+2Ch] eax +
mov [ebp-4] ebx +
mov [ebp-1Ch] edi +
mov byte ptr [ebp-4] 1 +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
mov ecx edi +
call sub_1043833  +
mov [ebp-4] bl +
or dword ptr [ebp-4] 0FFFFFFFFh +
inc dword ptr [esi+4]  +
mov eax [ebp+0Ch] +
shl eax 2 +
mov ecx [esi] +
mov ecx [eax+ecx] +
mov [edi+8] ecx +
mov ecx [esi] +
mov [eax+ecx] edi +
mov eax [esi+4] +
cmp eax [esi+18h] +
jbe loc_1043DA1  +
cmp [esi+20h] ebx +
jnz loc_1043DA1  +
push eax  +
mov ecx esi +
call sub_10422B8  +
push eax  +
mov ecx esi +
call sub_10423AB  +
mov eax edi +
call sub_1021FA5  +
retn 0Ch  +
***
call sub_1021F2C  +
mov edi edx +
mov esi ecx +
mov [ebp-38h] edi +
mov dword ptr [ebp-4] 1 +
xor ebx ebx +
lea ecx [ebp-30h] +
mov dword ptr [ebp-34h] 0E000020Bh +
mov [ebp-3Ch] ebx +
call sub_10151DA  +
mov byte ptr [ebp-4] 2 +
mov eax [ebp+0Ch] +
cmp [eax-0Ch] ebx +
jnz loc_1043E34  +
push 57h  +
pop esi  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-30h] +
call sub_1015174  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp+8] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+0Ch] +
call sub_1015174  +
mov eax esi +
call sub_1021FBE  +
retn 0Ch  +
cmp edi ebx +
jz loc_1043E3F  +
mov ecx edi +
call loc_1014AB9  +
lea eax [ebp-2Ch] +
push eax  +
push ebx  +
push esi  +
mov dword ptr [ebp-2Ch] 1Ch +
call ds:SetupDiEnumDeviceInfo  +
test eax eax +
jz loc_1043F02  +
jmp loc_1043E5F  +
mov edi [ebp-38h] +
inc dword ptr [ebp-3Ch]  +
push ecx  +
lea eax [ebp+0Ch] +
mov ecx esp +
mov [ebp-40h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 3 +
lea eax [ebp-2Ch] +
push eax  +
push esi  +
mov byte ptr [ebp-4] 2 +
call sub_104251C  +
test eax eax +
jz loc_1043EEC  +
push ecx  +
lea eax [ebp+8] +
mov ecx esp +
mov [ebp-40h] esp +
push eax  +
lea ebx [ebp-2Ch] +
call sub_10151F2  +
mov byte ptr [ebp-4] 4 +
mov byte ptr [ebp-4] 2 +
mov ecx esi +
call sub_1043A0B  +
test eax eax +
jz loc_1043EB6  +
and dword ptr [ebp-34h] 0 +
test edi edi +
jz loc_1043F02  +
jmp loc_1043ED0  +
cmp dword ptr [ebp-34h] 0E000020Bh +
jnz loc_1043EC6  +
mov dword ptr [ebp-34h] 103h +
cmp dword ptr [ebp+10h] 0 +
jnz loc_1043EEC  +
test edi edi +
jz loc_1043EEC  +
lea eax [ebp-2Ch] +
push eax  +
push esi  +
lea edi [ebp-30h] +
call sub_1042BB8  +
test eax eax +
jnz loc_1043EEC  +
push dword ptr [ebp-30h]  +
mov ecx [ebp-38h] +
call sub_10172FC  +
lea eax [ebp-2Ch] +
push eax  +
push dword ptr [ebp-3Ch]  +
push esi  +
call ds:SetupDiEnumDeviceInfo  +
test eax eax +
jnz loc_1043E5C  +
mov esi [ebp-34h] +
jmp loc_1043E06  +
***
call sub_1021EB9  +
xor ebx ebx +
mov [ebp-4] ebx +
mov eax [ebp+8] +
cmp [eax-0Ch] ebx +
jz loc_1043FDA  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp+8] +
push eax  +
mov [ebp-10h] ebx +
call sub_10506DC  +
test al al +
jz loc_1043FDA  +
mov eax [ebp-10h] +
cmp eax ebx +
jz loc_1043FAF  +
mov eax [eax] +
mov [ebp-18h] eax +
cmp eax ebx +
jz loc_1043FDA  +
mov ecx [ebp-10h] +
lea eax [ebp-18h] +
push eax  +
call sub_105038C  +
push eax  +
lea ecx [ebp-14h] +
call sub_10151F2  +
mov byte ptr [ebp-4] 1 +
push ecx  +
lea eax [ebp-14h] +
mov ecx esp +
mov [ebp-1Ch] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 2 +
mov byte ptr [ebp-4] 1 +
mov ecx esi +
call sub_10378C2  +
cmp eax ebx +
jnz loc_1043F9D  +
push dword ptr [ebp-14h]  +
mov ecx esi +
call sub_10172FC  +
mov [ebp-4] bl +
lea ecx [ebp-14h] +
call sub_1015174  +
cmp [ebp-18h] ebx +
jnz loc_1043F58  +
jmp loc_1043FDA  +
push ecx  +
lea eax [ebp+8] +
mov ecx esp +
mov [ebp-1Ch] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 3 +
mov [ebp-4] bl +
mov ecx esi +
call sub_10378C2  +
cmp eax ebx +
jnz loc_1043FDA  +
push dword ptr [ebp+8]  +
mov ecx esi +
call sub_10172FC  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
call sub_1021FA5  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jnz loc_1044018  +
push 1  +
push dword ptr [esi+8]  +
call sub_1037641  +
test al al +
jnz loc_1044018  +
push 8007000Eh  +
call loc_1014415  +
push [ebp+arg_8]  +
mov ecx esi +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1043CDE  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
call sub_1021EB9  +
xor ebx ebx +
mov [ebp-4] ebx +
push offset aManufacturer  +
lea ecx [ebp-28h] +
mov [ebp-2Ch] ebx +
call sub_10161A7  +
mov byte ptr [ebp-4] 1 +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
call sub_1046BD3  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-28h] +
call sub_1015174  +
cmp [ebp-18h] ebx +
jz loc_10442B0  +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 4 +
mov ecx [ebp-18h] +
lea eax [ebp-28h] +
push eax  +
call sub_104717E  +
mov byte ptr [ebp-4] 5 +
push dword ptr [eax]  +
lea ecx [ebp-10h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 4 +
mov ecx [ebp-28h] +
cmp ecx ebx +
jz loc_1044266  +
call sub_101A986  +
mov [ebp-28h] ebx +
jmp loc_1044266  +
mov ecx [ebp-10h] +
push 1  +
call sub_104586C  +
test al al +
jnz loc_1044239  +
mov ecx [ebp-10h] +
push ebx  +
lea eax [ebp-20h] +
push eax  +
call sub_104657D  +
mov byte ptr [ebp-4] 7 +
mov esi ds:GetLastError +
call esi  +
test eax eax +
jz loc_10440FF  +
push offset aManufacturer  +
push offset aAnErrorOcurred  +
call esi  +
push eax  +
push 3  +
call sub_103AD09  +
add esp 10h +
mov eax [ebp-20h] +
cmp [eax-0Ch] ebx +
jz loc_104422D  +
push eax  +
push offset aLookingForMode  +
push 1  +
call sub_103AC75  +
mov ecx [ebp+8] +
add esp 0Ch +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
call sub_1046BD3  +
mov byte ptr [ebp-4] 8 +
cmp [ebp-14h] ebx +
jz loc_104421A  +
mov [ebp-1Ch] ebx +
mov byte ptr [ebp-4] 9 +
mov ecx [ebp-14h] +
lea eax [ebp-30h] +
push eax  +
call sub_104717E  +
mov byte ptr [ebp-4] 0Ah +
push dword ptr [eax]  +
lea ecx [ebp-1Ch] +
call sub_104B66E  +
mov byte ptr [ebp-4] 9 +
mov ecx [ebp-30h] +
cmp ecx ebx +
jz loc_104420B  +
call sub_101A986  +
mov [ebp-30h] ebx +
jmp loc_104420B  +
mov ecx edi +
call sub_10454A9  +
push 2  +
pop ecx  +
mov [ebp-3Ch] eax +
mov [ebp-24h] ecx +
cmp eax ecx +
jb loc_10441DF  +
push dword ptr [ebp-24h]  +
lea eax [ebp-28h] +
push eax  +
mov ecx edi +
call sub_10464ED  +
mov byte ptr [ebp-4] 0Ch +
mov eax [ebp-28h] +
cmp [eax-0Ch] ebx +
jz loc_10441C8  +
inc dword ptr [ebp-2Ch]  +
push ecx  +
lea eax [ebp-28h] +
mov ecx esp +
mov [ebp-40h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 0Dh +
mov byte ptr [ebp-4] 0Ch +
mov esi [ebp+10h] +
mov ecx [ebp+0Ch] +
call sub_1043F0F  +
mov byte ptr [ebp-4] 9 +
lea ecx [ebp-28h] +
call sub_1015174  +
inc dword ptr [ebp-24h]  +
mov eax [ebp-24h] +
cmp eax [ebp-3Ch] +
jbe loc_1044189  +
lea eax [ebp-34h] +
push eax  +
mov ecx edi +
call sub_1046A71  +
mov byte ptr [ebp-4] 0Bh +
push dword ptr [eax]  +
lea ecx [ebp-1Ch] +
call sub_104B66E  +
mov byte ptr [ebp-4] 9 +
mov ecx [ebp-34h] +
cmp ecx ebx +
jz loc_104420B  +
call sub_101A986  +
mov [ebp-34h] ebx +
mov edi [ebp-1Ch] +
cmp edi ebx +
jnz loc_1044175  +
mov byte ptr [ebp-4] 8 +
mov byte ptr [ebp-4] 7 +
mov ecx [ebp-14h] +
cmp ecx ebx +
jz loc_104422D  +
call sub_101A986  +
mov [ebp-14h] ebx +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-20h] +
call sub_1015174  +
mov ecx [ebp-10h] +
lea eax [ebp-38h] +
push eax  +
call sub_1046A71  +
mov byte ptr [ebp-4] 6 +
push dword ptr [eax]  +
lea ecx [ebp-10h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 4 +
mov ecx [ebp-38h] +
cmp ecx ebx +
jz loc_1044266  +
call sub_101A986  +
mov [ebp-38h] ebx +
cmp [ebp-10h] ebx +
jnz loc_10440B9  +
mov byte ptr [ebp-4] 3 +
mov ecx [ebp-10h] +
cmp ecx ebx +
jz loc_1044282  +
call sub_101A986  +
mov [ebp-10h] ebx +
cmp [ebp-2Ch] ebx +
jz loc_10442B0  +
mov [ebp-4] bl +
mov ecx [ebp-18h] +
cmp ecx ebx +
jz loc_1044299  +
call sub_101A986  +
mov [ebp-18h] ebx +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx [ebp+8] +
cmp ecx ebx +
jz loc_10442AC  +
call sub_101A986  +
mov [ebp+8] ebx +
xor eax eax +
jmp loc_10442DA  +
mov [ebp-4] bl +
mov ecx [ebp-18h] +
cmp ecx ebx +
jz loc_10442C2  +
call sub_101A986  +
mov [ebp-18h] ebx +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx [ebp+8] +
cmp ecx ebx +
jz loc_10442D5  +
call sub_101A986  +
mov [ebp+8] ebx +
mov eax 0E0000301h +
call sub_1021FA5  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10424A6  +
test eax eax +
jnz loc_104431A  +
push [ebp+var_4]  +
mov ecx esi +
push [ebp+var_8]  +
push [ebp+arg_0]  +
call sub_1043FF3  +
add eax 4 +
pop esi  +
leave   +
retn 4  +
***
call sub_1021EB9  +
xor ebx ebx +
mov [ebp-4] ebx +
mov edi 0E000020Bh +
lea ecx [ebp-44h] +
mov [ebp-18h] edi +
call sub_1014C71  +
mov byte ptr [ebp-4] 1 +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-14h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-6Ch] +
call sub_10503B4  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-6Ch] +
call sub_1050FC3  +
lea ecx [ebp-10h] +
call sub_103ECE0  +
mov ecx [ebp-10h] +
lea eax [ebp+8] +
push eax  +
call sub_1046459  +
mov esi eax +
cmp esi ebx +
jz loc_10443EC  +
push dword ptr [ebp+8]  +
push offset aCouldNotOpenFi  +
push esi  +
push 1  +
call sub_103AD09  +
add esp 10h +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-6Ch] +
call sub_1050DBE  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-14h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
mov ecx [ebp-10h] +
cmp ecx ebx +
jz loc_10443CB  +
call sub_101A986  +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
lea ecx [ebp-44h] +
call sub_1014FBC  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
mov eax esi +
call sub_1021FA5  +
retn 4  +
lea eax [ebp-44h] +
push eax  +
lea eax [ebp-6Ch] +
push eax  +
push ecx  +
lea eax [ebp-10h] +
mov ecx esp +
mov [ebp-24h] esp +
push eax  +
call sub_101C334  +
mov byte ptr [ebp-4] 5 +
mov byte ptr [ebp-4] 4 +
call sub_1044032  +
mov esi 0E0000301h +
cmp eax esi +
jz loc_10443A0  +
cmp [ebp-3Ch] ebx +
jnz loc_1044462  +
push dword ptr [ebp+8]  +
push offset aNoMatchingDe_0  +
push 1  +
call sub_103AC75  +
add esp 0Ch +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-6Ch] +
call sub_1050DBE  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-14h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
mov ecx [ebp-10h] +
cmp ecx ebx +
jz loc_104445B  +
call sub_101A986  +
mov [ebp-10h] ebx +
mov esi edi +
jmp loc_10443CB  +
mov esi [ebp-44h] +
push 6  +
push ebx  +
push ebx  +
push ebx  +
mov [ebp-20h] esi +
mov [ebp-1Ch] ebx +
call ds:SetupDiGetClassDevsW  +
mov [ebp-24h] eax +
cmp eax 0FFFFFFFFh +
jnz loc_104448B  +
call ds:GetLastError  +
mov esi eax +
jmp loc_10443A0  +
cmp esi ebx +
jz loc_1044536  +
cmp [ebp-1Ch] ebx +
jnz loc_1044536  +
lea eax [ebp-20h] +
push eax  +
lea ecx [ebp-44h] +
call sub_105038C  +
push eax  +
lea ecx [ebp-14h] +
call sub_1015959  +
xor esi esi +
inc esi  +
push esi  +
push ecx  +
lea eax [ebp-14h] +
mov ecx esp +
mov [ebp-28h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 6 +
push ecx  +
lea eax [ebp+8] +
mov ecx esp +
mov [ebp-2Ch] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 7 +
mov byte ptr [ebp-4] 4 +
mov ecx [ebp-24h] +
mov edx ebx +
call sub_1043DC9  +
cmp eax ebx +
jz loc_104451C  +
mov ecx 103h +
cmp eax ecx +
jz loc_1044512  +
cmp eax edi +
jz loc_104452D  +
push offset aHardwareProbin  +
push eax  +
push 3  +
mov [ebp-18h] eax +
mov [ebp-1Ch] esi +
call sub_103AD09  +
add esp 0Ch +
jmp loc_104452D  +
cmp [ebp-18h] edi +
jnz loc_104452D  +
mov [ebp-18h] ecx +
jmp loc_104452D  +
cmp [ebp-18h] edi +
jz loc_104452A  +
cmp dword ptr [ebp-18h] 103h +
jnz loc_104452D  +
mov [ebp-18h] ebx +
cmp [ebp-20h] ebx +
jnz loc_1044493  +
push dword ptr [ebp-24h]  +
call ds:SetupDiDestroyDeviceInfoList  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-6Ch] +
call sub_1050DBE  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-14h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
mov ecx [ebp-10h] +
cmp ecx ebx +
jz loc_104456A  +
call sub_101A986  +
mov [ebp-10h] ebx +
mov esi [ebp-18h] +
jmp loc_10443CB  +
***
call sub_1021F2C  +
mov eax [ebp+8] +
mov [ebp-38h] eax +
mov eax [ebp+0Ch] +
lea ecx [ebp-30h] +
mov [ebp-40h] eax +
call sub_10151DA  +
and dword ptr [ebp-4] 0 +
mov eax [ebx] +
mov [ebp-3Ch] eax +
test eax eax +
jz loc_1044651  +
lea eax [ebp-3Ch] +
push eax  +
mov ecx ebx +
call sub_105038C  +
push eax  +
lea ecx [ebp-30h] +
call sub_1015959  +
push 7  +
pop ecx  +
xor eax eax +
lea edi [ebp-2Ch] +
stos   +
lea eax [ebp-2Ch] +
push eax  +
push 0  +
push 0  +
lea ecx [ebp-30h] +
mov dword ptr [ebp-2Ch] 1Ch +
call sub_1015002  +
push eax  +
push dword ptr [ebp-38h]  +
call ds:SetupDiOpenDeviceInfoW  +
push 0FFFFFFFFh  +
lea ecx [ebp-30h] +
test eax eax +
jnz loc_10445F7  +
call sub_1015023  +
jmp loc_1044647  +
call sub_1015023  +
lea ecx [ebp-34h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 1 +
lea eax [ebp-2Ch] +
push eax  +
push dword ptr [ebp-38h]  +
lea esi [ebp-34h] +
call sub_1042B30  +
test eax eax +
jz loc_104463B  +
lea ecx [ebp-30h] +
call sub_101CC99  +
mov ecx [ebp-40h] +
push dword ptr [ebp-30h]  +
add ecx 4 +
call sub_10442E7  +
mov ecx esi +
push ecx  +
mov ecx eax +
call sub_1015959  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-34h] +
call sub_1015174  +
cmp dword ptr [ebp-3Ch] 0 +
jnz loc_10445A8  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-30h] +
call sub_1015174  +
xor eax eax +
call sub_1021FBE  +
retn 8  +
***
call sub_1021EB9  +
xor ebx ebx +
inc ebx  +
mov [ebp-4] ebx +
lea ecx [ebp-28h] +
call sub_1014C71  +
mov byte ptr [ebp-4] 2 +
cmp dword ptr [ebp+14h] 0 +
lea esi [ebp-28h] +
lea eax [ebp+10h] +
jz loc_10446E4  +
push 0  +
push ecx  +
mov ecx esp +
mov [ebp+14h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 3 +
push ecx  +
lea eax [ebp+0Ch] +
mov ecx esp +
mov [ebp-10h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 4 +
mov byte ptr [ebp-4] 2 +
mov ecx [ebp+8] +
mov edx esi +
call sub_1043DC9  +
mov esi eax +
cmp esi 103h +
jnz loc_1044718  +
push offset aWillForceInsta  +
push ebx  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
xor esi esi +
jmp loc_1044718  +
push ebx  +
push ecx  +
mov ecx esp +
mov [ebp+14h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 5 +
push ecx  +
lea eax [ebp+0Ch] +
mov ecx esp +
mov [ebp-10h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 6 +
mov byte ptr [ebp-4] 2 +
mov ecx [ebp+8] +
mov edx esi +
call sub_1043DC9  +
mov esi eax +
test esi esi +
jnz loc_104478A  +
cmp [ebp+1Ch] esi +
jz loc_1044732  +
push dword ptr [ebp+1Ch]  +
lea ebx [ebp-28h] +
push dword ptr [ebp+8]  +
call sub_1044577  +
xor ebx ebx +
inc ebx  +
push offset aEnterUpdatedri  +
push ebx  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
push dword ptr [ebp+20h]  +
lea ecx [ebp+0Ch] +
push ebx  +
call sub_101F639  +
push eax  +
lea ecx [ebp+10h] +
call sub_101F639  +
push eax  +
push 0  +
call dword ptr [ebp+18h]  +
test eax eax +
jz loc_104476E  +
push offset aReturnUpdatedr  +
push 0  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
jmp loc_104478A  +
call ds:GetLastError  +
mov esi eax +
test esi esi +
jz loc_104478A  +
push offset aReturnUpdatedr  +
push esi  +
push 3  +
call sub_103AD09  +
add esp 0Ch +
mov [ebp-4] bl +
lea ecx [ebp-28h] +
call sub_1014FBC  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp+0Ch] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+10h] +
call sub_1015174  +
mov eax esi +
call sub_1021FA5  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFFFh  +
push (offset loc_1058389+1)  +
mov eax large fs:0 +
push eax  +
mov eax 1474h +
call sub_102B290  +
mov eax dword_1063194 +
xor eax ebp +
mov [ebp+var_10] eax +
push ebx  +
push esi  +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov eax [ebp+arg_0] +
mov esi ecx +
lea ecx [ebp+var_145C] +
mov [ebp+hLibModule] esi +
mov [ebp+var_1464] eax +
mov [ebp+var_1454] 1 +
call sub_10151DA  +
xor ebx ebx +
mov [ebp+var_4] ebx +
lea ecx [ebp+var_1460] +
call sub_10151DA  +
mov byte ptr [ebp+var_4] 1 +
lea ecx [ebp+var_1480] +
call sub_1014C71  +
mov byte ptr [ebp+var_4] 2 +
mov eax [ebp+var_1464] +
push 2  +
push esi  +
push edi  +
mov [eax] ebx +
call ds:SetupDiBuildDriverInfoList  +
test eax eax +
jnz loc_1044881  +
mov byte ptr [ebp+var_4] 1 +
lea ecx [ebp+var_1480] +
call sub_1014FBC  +
mov byte ptr [ebp+var_4] bl +
lea ecx [ebp+var_1460] +
call sub_1015174  +
or [ebp+var_4] 0FFFFFFFFh +
lea ecx [ebp+var_145C] +
call sub_1015174  +
xor eax eax +
jmp loc_1044A40  +
push esi  +
push edi  +
push 17h  +
call ds:SetupDiCallClassInstaller  +
test eax eax +
jnz loc_104489A  +
mov [ebp+var_1454] ebx +
jmp loc_1044A0E  +
lea eax [ebp+DriverInfoData] +
push eax  +
push esi  +
push edi  +
mov [ebp+DriverInfoData.cbSize] 61Ch +
call ds:SetupDiGetSelectedDriverW  +
test eax eax +
jz loc_104488F  +
push ebx  +
mov eax 622h +
push eax  +
mov [ebp+DriverInfoDetailData.cbSize] eax +
lea eax [ebp+DriverInfoDetailData] +
push eax  +
lea eax [ebp+DriverInfoData] +
push eax  +
push esi  +
push edi  +
call ds:SetupDiGetDriverInfoDetailW  +
test eax eax +
jnz loc_10448E9  +
call ds:GetLastError  +
cmp eax 7Ah +
jnz loc_104488F  +
lea eax [ebp+DriverInfoDetailData.InfFileName] +
push eax  +
lea ecx [ebp+var_145C] +
call sub_10158CD  +
mov esi 800h +
push esi  +
lea eax [ebp+PropertyBuffer] +
push ebx  +
push eax  +
call sub_10219E0  +
add esp 0Ch +
push ebx  +
push esi  +
lea eax [ebp+PropertyBuffer] +
push eax  +
push ebx  +
push 1  +
push [ebp+hLibModule]  +
push edi  +
call ds:SetupDiGetDeviceRegistryPropertyW  +
test eax eax +
jz loc_104488F  +
lea eax [ebp+PropertyBuffer] +
push eax  +
lea ecx [ebp+var_1480] +
call sub_103C474  +
push offset aNewdev_dll  +
call ds:LoadLibraryW  +
mov [ebp+hLibModule] eax +
cmp eax ebx +
jz loc_10449F4  +
push offset aUpdatedriverfo  +
push eax  +
call ds:GetProcAddress  +
mov esi eax +
cmp esi ebx +
jz loc_10449F4  +
mov eax [ebp+var_1480] +
xor ecx ecx +
cmp eax ebx +
setnz cl  +
cmp ecx ebx +
jnz loc_104498E  +
push 80004005h  +
call loc_1014415  +
add eax 8 +
push eax  +
lea ecx [ebp+var_1460] +
call sub_1015959  +
push [ebp+var_1464]  +
lea eax [ebp+var_1460] +
push ebx  +
push esi  +
push ebx  +
push ecx  +
mov ecx esp +
mov [ebp+var_1464] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp+var_4] 3 +
push ecx  +
lea eax [ebp+var_145C] +
mov ecx esp +
mov [ebp+var_1468] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp+var_4] 4 +
push edi  +
mov byte ptr [ebp+var_4] 2 +
call sub_104466C  +
cmp eax ebx +
jz loc_10449FA  +
cmp eax 103h +
jz loc_10449FA  +
cmp eax 0E000020Bh +
jz loc_10449FA  +
mov [ebp+var_1454] ebx +
cmp [ebp+hLibModule] ebx +
jz loc_1044A0E  +
push [ebp+hLibModule]  +
call ds:FreeLibrary  +
mov byte ptr [ebp+var_4] 1 +
lea ecx [ebp+var_1480] +
call sub_1014FBC  +
mov byte ptr [ebp+var_4] bl +
lea ecx [ebp+var_1460] +
call sub_1015174  +
or [ebp+var_4] 0FFFFFFFFh +
lea ecx [ebp+var_145C] +
call sub_1015174  +
mov eax [ebp+var_1454] +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_10] +
xor ecx ebp +
call sub_1021557  +
leave   +
retn 4  +
***
call sub_1021EB9  +
xor esi esi +
mov [ebp-4] esi +
lea ecx [ebp-70h] +
call sub_10503B4  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-48h] +
call sub_1014C71  +
mov byte ptr [ebp-4] 2 +
mov [ebp-10h] esi +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-10h] +
call sub_103ECE0  +
lea ecx [ebp-70h] +
call sub_1050FC3  +
mov ecx [ebp-10h] +
lea eax [ebp+8] +
push eax  +
call sub_1046459  +
cmp eax esi +
jz loc_1044ACD  +
push dword ptr [ebp+8]  +
push offset aCouldNotOpenFi  +
push eax  +
push 1  +
call sub_103AD09  +
add esp 10h +
mov edi 3EEh +
jmp loc_1044CAB  +
lea eax [ebp-48h] +
push eax  +
lea eax [ebp-70h] +
push eax  +
push ecx  +
lea eax [ebp-10h] +
mov ecx esp +
mov [ebp-28h] esp +
push eax  +
call sub_101C334  +
mov byte ptr [ebp-4] 4 +
mov byte ptr [ebp-4] 3 +
call sub_1044032  +
mov ecx 0E0000301h +
cmp eax ecx +
jnz loc_1044B01  +
mov edi ecx +
jmp loc_1044CAB  +
cmp [ebp-40h] esi +
jnz loc_1044B22  +
push dword ptr [ebp+8]  +
push offset aNoMatchingDe_0  +
push 1  +
call sub_103AC75  +
add esp 0Ch +
mov edi 0E000020Bh +
jmp loc_1044CAB  +
push offset aNewdev_dll  +
call ds:LoadLibraryW  +
mov [ebp-24h] eax +
cmp eax esi +
jnz loc_1044B41  +
call ds:GetLastError  +
mov edi eax +
jmp loc_1044C9D  +
push offset aUpdatedriverfo  +
push eax  +
call ds:GetProcAddress  +
mov [ebp-28h] eax +
cmp eax esi +
jz loc_1044B34  +
push 6  +
push esi  +
push esi  +
push esi  +
call ds:SetupDiGetClassDevsW  +
mov [ebp-20h] eax +
cmp eax 0FFFFFFFFh +
jz loc_1044B34  +
mov eax [ebp-48h] +
mov ebx 0E000020Bh +
mov [ebp-1Ch] eax +
mov [ebp-14h] esi +
mov edi ebx +
cmp eax esi +
jz loc_1044C7E  +
mov esi 800B0110h +
cmp dword ptr [ebp-14h] 0 +
jnz loc_1044C7C  +
lea eax [ebp-1Ch] +
push eax  +
lea ecx [ebp-48h] +
call sub_105038C  +
push eax  +
lea ecx [ebp-18h] +
call sub_10151F2  +
mov byte ptr [ebp-4] 5 +
push dword ptr [ebp+8]  +
push dword ptr [ebp-18h]  +
push offset aInstallingDevi  +
push 1  +
call sub_103AC75  +
add esp 10h +
push dword ptr [ebp+14h]  +
lea eax [ebp-18h] +
push dword ptr [ebp+10h]  +
push dword ptr [ebp-28h]  +
push dword ptr [ebp+0Ch]  +
push ecx  +
mov ecx esp +
mov [ebp-2Ch] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 6 +
push ecx  +
lea eax [ebp+8] +
mov ecx esp +
mov [ebp-30h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 7 +
push dword ptr [ebp-20h]  +
mov byte ptr [ebp-4] 5 +
call sub_104466C  +
test eax eax +
jz loc_1044C4A  +
mov ecx 103h +
cmp eax ecx +
jz loc_1044C3D  +
cmp eax esi +
jz loc_1044C22  +
cmp eax ebx +
jz loc_1044C1B  +
push offset aInstallationFa  +
push eax  +
mov edi eax +
push 3  +
jmp loc_1044C2C  +
push offset aInstallationDi  +
jmp loc_1044C5D  +
push offset aNonWhqlSignedP  +
push esi  +
mov edi esi +
push 2  +
mov dword ptr [ebp-14h] 1 +
call sub_103AD09  +
add esp 0Ch +
jmp loc_1044C66  +
cmp edi ebx +
jnz loc_1044C43  +
mov edi ecx +
push offset aInstallation_0  +
jmp loc_1044C5D  +
cmp edi ebx +
jz loc_1044C56  +
cmp edi 103h +
jnz loc_1044C58  +
xor edi edi +
push offset aInstallationWa  +
push 1  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-18h] +
call sub_1015174  +
cmp dword ptr [ebp-1Ch] 0 +
jnz loc_1044B84  +
xor esi esi +
cmp [ebp-40h] esi +
jz loc_1044C94  +
cmp [ebp-14h] esi +
jnz loc_1044C94  +
lea eax [ebp-48h] +
push eax  +
lea ecx [ebp+8] +
call sub_1043446  +
push dword ptr [ebp-20h]  +
call ds:SetupDiDestroyDeviceInfoList  +
cmp [ebp-24h] esi +
jz loc_1044CAB  +
push dword ptr [ebp-24h]  +
call ds:FreeLibrary  +
mov byte ptr [ebp-4] 2 +
mov ecx [ebp-10h] +
cmp ecx esi +
jz loc_1044CBE  +
call sub_101A986  +
mov [ebp-10h] esi +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-48h] +
call sub_1014FBC  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-70h] +
call sub_1050DBE  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
mov eax edi +
call sub_1021FA5  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 248h +
mov eax dword_1063194 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
and [ebp+var_234] 0 +
push edi  +
mov edi ecx +
push eax  +
mov ecx esi +
mov [ebp+var_238] eax +
call sub_10447BC  +
test eax eax +
jnz loc_1044DB3  +
and [ebp+var_23C] eax +
push 10h  +
lea eax [ebp+ClassInstallParams] +
push eax  +
push esi  +
push edi  +
mov [ebp+ClassInstallParams.cbSize] 8 +
mov [ebp+ClassInstallParams.InstallFunction] 5 +
mov [ebp+var_240] 1 +
call ds:SetupDiSetClassInstallParamsW  +
test eax eax +
jz loc_1044DA7  +
push esi  +
push edi  +
push 5  +
call ds:SetupDiCallClassInstaller  +
test eax eax +
jz loc_1044DA7  +
lea eax [ebp+DeviceInstallParams] +
push eax  +
push esi  +
push edi  +
mov [ebp+DeviceInstallParams.cbSize] 22Ch +
call ds:SetupDiGetDeviceInstallParamsW  +
test eax eax +
jz loc_1044DB3  +
test [ebp+DeviceInstallParams.Flags] 180h +
jz loc_1044DB3  +
mov eax [ebp+var_238] +
mov dword ptr [eax] 1 +
jmp loc_1044DB3  +
call ds:GetLastError  +
mov [ebp+var_234] eax +
mov ecx [ebp+var_4] +
mov eax [ebp+var_234] +
xor ecx ebp +
pop edi  +
call sub_1021557  +
leave   +
retn 4  +
***
call sub_1021EB9  +
xor ebx ebx +
mov [ebp-4] ebx +
mov edi [ebp+18h] +
xor esi esi +
cmp edi ebx +
jnz loc_1044E00  +
push 57h  +
pop esi  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
mov eax esi +
call sub_1021FA5  +
retn 14h  +
mov eax [ebp+14h] +
cmp eax ebx +
jz loc_1044E20  +
mov esi [eax] +
cmp esi ebx +
jnz loc_1044E11  +
push 0Eh  +
jmp loc_1044DE9  +
mov ecx esi +
call sub_1014FC6  +
lea ecx [esi+4] +
call sub_1042CBC  +
mov [edi] ebx +
push edi  +
lea eax [ebp+8] +
cmp [ebp+10h] ebx +
jnz loc_1044E49  +
push esi  +
push dword ptr [ebp+0Ch]  +
push ecx  +
mov ecx esp +
mov [ebp+18h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 1 +
mov [ebp-4] bl +
call sub_1044A60  +
jmp loc_1044E61  +
push ecx  +
mov ecx esp +
mov [ebp+18h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 2 +
mov [ebp-4] bl +
call sub_1042D69  +
mov esi eax +
jmp loc_1044DEA  +
***
call sub_1021F2C  +
mov edi [ebp+8] +
mov esi [ebp+10h] +
lea ecx [ebp-23Ch] +
mov [ebp-274h] edi +
mov [ebp-27Ch] esi +
call sub_10151DA  +
xor ebx ebx +
mov [ebp-4] ebx +
lea ecx [ebp-254h] +
mov [ebp-270h] ebx +
call sub_10151DA  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-250h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 2 +
mov eax [edi] +
mov [ebp-24Ch] ebx +
mov [ebp-26Ch] ebx +
mov [ebp-264h] ebx +
cmp [eax-0Ch] ebx +
jz loc_1045442  +
push edi  +
call sub_1035549  +
test al al +
jz loc_1045442  +
cmp esi ebx +
jz loc_1045442  +
mov [esi] ebx +
call sub_1035328  +
xor esi esi +
inc esi  +
cmp eax esi +
jz loc_1044F26  +
push 2  +
pop ecx  +
cmp eax ecx +
jz loc_1044F26  +
cmp eax 3 +
jz loc_1044F1E  +
cmp eax 4 +
jz loc_1044F1E  +
cmp eax 5 +
jz loc_1044F1E  +
mov [ebp-244h] ecx +
jmp loc_1044F2C  +
mov [ebp-244h] esi +
jmp loc_1044F2C  +
mov [ebp-244h] ebx +
lea eax [ebp-23Ch] +
push eax  +
push edi  +
call sub_1046B0F  +
test eax eax +
jnz loc_1044F59  +
push dword ptr [edi]  +
push offset aPnpDriverPac_0  +
push 2  +
call sub_103AC75  +
add esp 0Ch +
mov [ebp-240h] ebx +
jmp loc_104540E  +
cmp [ebp-244h] ebx +
jnz loc_1044F70  +
mov dword ptr [ebp-240h] 32h +
jmp loc_104540E  +
cmp [ebp-244h] esi +
jnz loc_1044FD5  +
push ecx  +
lea eax [ebp-23Ch] +
mov ecx esp +
mov [ebp-268h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 3 +
mov byte ptr [ebp-4] 2 +
call sub_104660B  +
cmp eax ebx +
jz loc_1044FAE  +
push dword ptr [ebp-23Ch]  +
push offset aSuccessfully_3  +
jmp loc_104503E  +
call ds:GetLastError  +
push dword ptr [ebp-23Ch]  +
mov [ebp-240h] eax +
push offset aCouldNotRemo_4  +
push eax  +
push 3  +
call sub_103AD09  +
add esp 10h +
jmp loc_104540E  +
cmp dword ptr [ebp-244h] 2 +
jnz loc_1045047  +
push offset aNewdev_dll  +
call ds:LoadLibraryW  +
mov [ebp-26Ch] eax +
cmp eax ebx +
jnz loc_1045004  +
call ds:GetLastError  +
mov [ebp-240h] eax +
jmp loc_10453FA  +
push offset aDiinstalldevic  +
push eax  +
call ds:GetProcAddress  +
mov [ebp-264h] eax +
cmp eax ebx +
jz loc_1044FF3  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-23Ch] +
push eax  +
call sub_1042917  +
push dword ptr [ebp-23Ch]  +
mov [ebp-240h] eax +
cmp eax ebx +
jnz loc_1045074  +
push offset aSuccessfullyUn  +
push esi  +
call sub_103AC75  +
add esp 0Ch +
lea eax [ebp-250h] +
push eax  +
lea eax [ebp-254h] +
push eax  +
lea eax [ebp-23Ch] +
push eax  +
call sub_1036032  +
test al al +
jnz loc_1045089  +
mov dword ptr [ebp-240h] 57h +
jmp loc_10453FA  +
push offset aCouldNotUninst  +
push eax  +
push 3  +
call sub_103AD09  +
add esp 10h +
jmp loc_10453FA  +
push 4  +
push ebx  +
push ebx  +
push ebx  +
call ds:SetupDiGetClassDevsW  +
mov esi eax +
mov [ebp-268h] esi +
cmp esi 0FFFFFFFFh +
jz loc_1044FF3  +
lea eax [ebp-234h] +
push eax  +
push ebx  +
push esi  +
mov [ebp-240h] ebx +
mov dword ptr [ebp-234h] 1Ch +
call ds:SetupDiEnumDeviceInfo  +
test eax eax +
jz loc_10453C3  +
inc dword ptr [ebp-270h]  +
push 20019h  +
push 2  +
push ebx  +
push 1  +
lea eax [ebp-234h] +
push eax  +
push esi  +
call ds:SetupDiOpenDevRegKey  +
mov [ebp-25Ch] eax +
cmp eax 0FFFFFFFFh +
jz loc_1045392  +
lea ecx [ebp-278h] +
push ecx  +
lea ecx [ebp-218h] +
push ecx  +
lea ecx [ebp-280h] +
push ecx  +
push ebx  +
push offset aInfpath  +
push eax  +
mov dword ptr [ebp-278h] 208h +
mov dword ptr [ebp-280h] 1 +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_104537F  +
push 0FFFFFFFFh  +
push dword ptr [ebp-250h]  +
lea eax [ebp-218h] +
push 0FFFFFFFFh  +
push eax  +
push 1  +
push 7Fh  +
call ds:CompareStringW  +
cmp eax 2 +
jnz loc_104537F  +
lea ecx [ebp-248h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 4 +
lea eax [ebp-234h] +
push eax  +
push esi  +
lea edi [ebp-248h] +
call sub_1042BB8  +
push ebx  +
push dword ptr [ebp-220h]  +
lea eax [ebp-288h] +
push eax  +
lea eax [ebp-284h] +
push eax  +
call ds:CM_Get_DevNode_Status  +
cmp eax 0Dh +
jz loc_10452AF  +
cmp eax 25h +
jz loc_10452AF  +
cmp dword ptr [ebp-244h] 1 +
lea eax [ebp-258h] +
mov [ebp-258h] ebx +
push eax  +
jnz loc_10451DF  +
mov ecx [ebp-268h] +
lea esi [ebp-234h] +
call sub_1044CF1  +
mov esi [ebp-268h] +
mov [ebp-238h] eax +
jmp loc_1045236  +
push ebx  +
push ebx  +
lea eax [ebp-234h] +
push eax  +
push esi  +
push ebx  +
call dword ptr [ebp-264h]  +
test eax eax +
jnz loc_1045236  +
mov edi ds:GetLastError +
call edi  +
mov [ebp-238h] eax +
cmp eax 0E0000203h +
jnz loc_1045236  +
lea eax [ebp-258h] +
push eax  +
push 4  +
push ebx  +
lea eax [ebp-234h] +
push eax  +
push esi  +
push ebx  +
call dword ptr [ebp-264h]  +
test eax eax +
jnz loc_1045230  +
call edi  +
mov [ebp-238h] eax +
jmp loc_1045236  +
mov [ebp-238h] ebx +
mov eax [ebp-248h] +
cmp [ebp-238h] ebx +
jnz loc_1045260  +
cmp [eax-0Ch] ebx +
jz loc_1045258  +
push eax  +
push offset aDeviceWithDevi  +
push ebx  +
call sub_103AC75  +
add esp 0Ch +
inc dword ptr [ebp-24Ch]  +
jmp loc_1045292  +
cmp [eax-0Ch] ebx +
jnz loc_104527C  +
push offset aFailedToUninst  +
push dword ptr [ebp-238h]  +
push 3  +
call sub_103AD09  +
add esp 0Ch +
jmp loc_1045292  +
push eax  +
push offset aFailedToUnin_0  +
push dword ptr [ebp-238h]  +
push 3  +
call sub_103AD09  +
add esp 10h +
cmp [ebp-258h] ebx +
jz loc_104536A  +
mov eax [ebp-27Ch] +
mov dword ptr [eax] 1 +
jmp loc_104536A  +
push ebx  +
push 4  +
lea eax [ebp-260h] +
push eax  +
push ebx  +
push 0Ah  +
lea eax [ebp-234h] +
push eax  +
push esi  +
mov [ebp-260h] ebx +
call ds:SetupDiGetDeviceRegistryPropertyW  +
test eax eax +
jz loc_1045300  +
or dword ptr [ebp-260h] 20h +
push 4  +
lea eax [ebp-260h] +
push eax  +
push 0Ah  +
lea eax [ebp-234h] +
push eax  +
push esi  +
call ds:SetupDiSetDeviceRegistryPropertyW  +
test eax eax +
jz loc_1045300  +
mov [ebp-238h] ebx +
jmp loc_1045310  +
call ds:GetLastError  +
mov [ebp-238h] eax +
cmp eax ebx +
jnz loc_1045332  +
mov eax [ebp-248h] +
cmp [eax-0Ch] ebx +
jz loc_104532A  +
push eax  +
push offset aPhantomDevic_0  +
push ebx  +
call sub_103AC75  +
add esp 0Ch +
inc dword ptr [ebp-24Ch]  +
jmp loc_104536A  +
mov eax [ebp-248h] +
cmp [eax-0Ch] ebx +
jnz loc_1045354  +
push offset aFailedToUninst  +
push dword ptr [ebp-238h]  +
push 3  +
call sub_103AD09  +
add esp 0Ch +
jmp loc_104536A  +
push eax  +
push offset aFailedToUnin_1  +
push dword ptr [ebp-238h]  +
push 3  +
call sub_103AD09  +
add esp 10h +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-248h] +
call sub_1015174  +
mov edi [ebp-274h] +
push dword ptr [ebp-25Ch]  +
call ds:RegCloseKey  +
or dword ptr [ebp-25Ch] 0FFFFFFFFh +
lea eax [ebp-234h] +
push eax  +
push dword ptr [ebp-270h]  +
push esi  +
call ds:SetupDiEnumDeviceInfo  +
test eax eax +
jnz loc_10450CC  +
cmp dword ptr [ebp-25Ch] 0FFFFFFFFh +
jz loc_10453C3  +
push dword ptr [ebp-25Ch]  +
call ds:RegCloseKey  +
push esi  +
call ds:SetupDiDestroyDeviceInfoList  +
push dword ptr [edi]  +
cmp [ebp-24Ch] ebx +
jz loc_10453EB  +
push dword ptr [ebp-24Ch]  +
push offset aSuccessfully_4  +
push 1  +
call sub_103AC75  +
jmp loc_1045081  +
push offset aNoDevicesFound  +
push 1  +
call sub_103AC75  +
add esp 0Ch +
cmp [ebp-26Ch] ebx +
jz loc_104540E  +
push dword ptr [ebp-26Ch]  +
call ds:FreeLibrary  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-250h] +
call sub_1015174  +
mov [ebp-4] bl +
lea ecx [ebp-254h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-23Ch] +
call sub_1015174  +
mov eax [ebp-240h] +
jmp loc_1045471  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-250h] +
call sub_1015174  +
mov [ebp-4] bl +
lea ecx [ebp-254h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-23Ch] +
call sub_1015174  +
push 57h  +
pop eax  +
call sub_1021FBE  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+IntegerValue] +
push eax  +
push [ebp+IntegerValue]  +
add ecx 10h +
push ecx  +
call ds:SetupGetIntField  +
test eax eax +
jz loc_104549D  +
mov eax [ebp+IntegerValue] +
jmp loc_10454A0  +
or eax 0FFFFFFFFh +
pop ebp  +
retn 4  +
***
add ecx 10h +
push ecx  +
call ds:SetupGetFieldCount  +
retn   +
***
mov edi edi +
push esi  +
push 0  +
push 0  +
push 0  +
push 0FFFFFFFFh  +
push 0  +
mov esi ecx +
call ds:SetupInitDefaultQueueCallbackEx  +
test eax eax +
jnz loc_10454D4  +
pop esi  +
retn   +
push eax  +
lea eax [esi+8] +
push eax  +
call ds:InterlockedExchange  +
test eax eax +
jz loc_10454EA  +
push eax  +
call ds:SetupTermDefaultQueueCallback  +
mov eax esi +
pop esi  +
retn   +
***
push ecx  +
call ds:InterlockedExchange  +
test eax eax +
jz locret_104550A  +
push eax  +
call ds:SetupTermDefaultQueueCallback  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
mov ecx [ebp+arg_0] +
push [ebp+arg_8]  +
mov eax [ecx] +
push [ebp+arg_4]  +
call dword ptr [eax]  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx [ebp+8] +
push esi  +
push edi  +
mov edi [ebp+0Ch] +
mov esi ecx +
mov dword ptr [ebp-4] 1 +
cmp ebx 5 +
jz loc_1045571  +
cmp ebx 8 +
jz loc_1045563  +
cmp ebx 0Bh +
jnz loc_1045586  +
mov eax [esi] +
lea ecx [ebp-4] +
push ecx  +
push edi  +
mov ecx esi +
call dword ptr [eax+0Ch]  +
jmp loc_104557D  +
mov eax [esi] +
lea ecx [ebp-4] +
push ecx  +
push edi  +
mov ecx esi +
call dword ptr [eax+14h]  +
jmp loc_104557D  +
mov eax [esi] +
lea ecx [ebp-4] +
push ecx  +
push edi  +
mov ecx esi +
call dword ptr [eax+10h]  +
test al al +
jz loc_1045586  +
mov eax [ebp-4] +
jmp loc_1045592  +
push dword ptr [ebp+10h]  +
mov eax [esi] +
push edi  +
push ebx  +
mov ecx esi +
call dword ptr [eax+8]  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push dword ptr [ecx+8]  +
call ds:SetupDefaultQueueCallbackW  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 18h +
jz loc_10455CD  +
xor eax eax +
jmp loc_10455D5  +
push dword ptr [ebp+0Ch]  +
mov eax [ecx] +
call dword ptr [eax+18h]  +
pop ebp  +
retn 0Ch  +
***
xor al al +
retn 8  +
***
xor eax eax +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+8] +
cmp eax 0FFFFFFFFh +
jz loc_104560D  +
push eax  +
call ds:SetupDiDestroyDeviceInfoList  +
or dword ptr [esi+8] 0FFFFFFFFh +
push [ebp+Flags]  +
push [ebp+hwndParent]  +
push [ebp+Enumerator]  +
push [ebp+ClassGuid]  +
call ds:SetupDiGetClassDevsW  +
xor ecx ecx +
cmp eax 0FFFFFFFFh +
setnz cl  +
mov [esi+8] eax +
pop esi  +
mov eax ecx +
pop ebp  +
retn 10h  +
***
call sub_1022E04  +
xor esi esi +
cmp ecx esi +
jnz loc_1045657  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_104572C  +
movzx eax word ptr [ecx] +
cmp ax 2Dh +
jnz loc_1045669  +
mov dword ptr [ebp-1Ch] 1 +
jmp loc_1045672  +
mov [ebp-1Ch] esi +
cmp ax 2Bh +
jnz loc_1045674  +
inc ecx  +
inc ecx  +
cmp word ptr [ecx] 30h +
jnz loc_1045691  +
movzx eax word ptr [ecx+2] +
cmp ax 78h +
jz loc_104568A  +
cmp ax 58h +
jnz loc_1045691  +
push 10h  +
add ecx 4 +
jmp loc_1045693  +
push 0Ah  +
pop ebx  +
xor edi edi +
movzx eax word ptr [ecx] +
cmp ax si +
jz loc_10456EC  +
movzx eax ax +
lea edx [eax-30h] +
cmp edx 9 +
ja loc_10456AD  +
mov eax edx +
jmp loc_10456CA  +
cmp ebx 10h +
jnz loc_10456EC  +
lea edx [eax-61h] +
cmp edx 5 +
ja loc_10456BF  +
add eax 0FFFFFFA9h +
jmp loc_10456CA  +
lea edx [eax-41h] +
cmp edx 5 +
ja loc_10456EC  +
add eax 0FFFFFFC9h +
imul edi ebx +
add edi eax +
cmp ebx 10h +
jnz loc_10456DC  +
inc esi  +
cmp esi 8 +
ja loc_10456EC  +
jmp loc_10456E2  +
cmp edi esi +
jl loc_10456EC  +
mov esi edi +
inc ecx  +
inc ecx  +
movzx eax word ptr [ecx] +
test ax ax +
jnz loc_104569E  +
xor eax eax +
cmp [ecx] ax +
jz loc_10456FA  +
push 0Dh  +
jmp loc_104564A  +
cmp [ebp-1Ch] eax +
jz loc_1045701  +
neg edi  +
xor esi esi +
inc esi  +
mov [ebp-4] eax +
mov eax [ebp+8] +
mov [eax] edi +
jmp loc_1045717  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor esi esi +
mov dword ptr [ebp-4] 0FFFFFFFEh +
test esi esi +
jnz loc_104572A  +
push 57h  +
call ds:SetLastError  +
mov eax esi +
call sub_1022E49  +
retn 4  +
***
call pSetupGetGlobalFlags  +
shr eax 2 +
not eax  +
and eax 1 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
call pSetupGetGlobalFlags  +
mov esi eax +
shr esi 2 +
and esi 1 +
cmp [ebp+arg_0] 0 +
jz loc_104576A  +
and eax 0FFFFFFFBh +
jmp loc_104576D  +
or eax 4 +
push eax  +
call pSetupSetGlobalFlags  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
shr esi 1 +
jz loc_10457A9  +
test [ebp+arg_8] 1000h +
jz loc_10457A9  +
mov edx [ebp+arg_4] +
lea eax [edi+ecx*2] +
mov [edx] eax +
mov edx esi +
sub edx ecx +
xor ecx ecx +
mov [ebx] edx +
mov [eax] cx +
test [ebp+arg_8] 400h +
jz loc_10457F1  +
mov eax [ebp+arg_8] +
push [ebp+arg_0]  +
and eax 0FFh +
push eax  +
push edi  +
mov [ebp+var_4] eax +
call sub_10219E0  +
add esp 0Ch +
cmp [ebp+var_4] 0 +
jnz loc_10457D9  +
mov eax [ebp+arg_4] +
mov [eax] edi +
mov [ebx] esi +
jmp loc_10457F1  +
test esi esi +
jbe loc_104580A  +
mov ecx [ebp+arg_4] +
lea eax [edi+esi*2-2] +
mov [ecx] eax +
xor ecx ecx +
mov dword ptr [ebx] 1 +
mov [eax] cx +
test esi esi +
jbe loc_104580A  +
test [ebp+arg_8] 800h +
jz loc_104580A  +
mov eax [ebp+arg_4] +
mov [eax] edi +
xor eax eax +
mov [ebx] esi +
mov [edi] ax +
xor eax eax +
pop esi  +
leave   +
retn 0Ch  +
***
call sub_1021EB9  +
mov eax ecx +
mov [ebp-10h] eax +
and dword ptr [eax+4] 0 +
mov dword ptr [eax] offset off_10058A4 +
and dword ptr [ebp-4] 0 +
or dword ptr [eax+8] 0FFFFFFFFh +
mov dword ptr [eax] offset off_100F2FC +
or dword ptr [ebp-4] 0FFFFFFFFh +
call sub_1021FA5  +
retn   +
***
push ecx  +
call ds:InterlockedExchange  +
cmp eax 0FFFFFFFFh +
jz locret_1045866  +
push eax  +
call ds:SetupCloseInfFile  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
lea eax [ebp+RequiredSize] +
push eax  +
xor edi edi +
push edi  +
push edi  +
push [ebp+FieldIndex]  +
lea esi [ecx+10h] +
push esi  +
mov [ebp+RequiredSize] edi +
call ds:SetupGetStringFieldW  +
test eax eax +
jz loc_1045898  +
cmp [ebp+RequiredSize] edi +
setz al  +
jmp loc_10458B0  +
call ds:GetLastError  +
cmp eax 7Ah +
jz loc_1045890  +
push esi  +
call ds:SetupGetFieldCount  +
cmp [ebp+FieldIndex] eax +
setnbe al  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10454F3  +
push 0FFFFFFFFh  +
add esi 4 +
push esi  +
call ds:InterlockedExchange  +
pop esi  +
cmp eax 0FFFFFFFFh +
jz locret_10458DE  +
push eax  +
call ds:SetupCloseFileQueue  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
xor esi esi +
call sub_1045739  +
test eax eax +
jnz loc_10458FC  +
inc esi  +
push esi  +
call sub_104574C  +
push ebx  +
mov ecx edi +
call sub_10454B9  +
push eax  +
push offset MsgHandler  +
push dword ptr [edi+4]  +
push 0  +
call ds:SetupCommitFileQueueW  +
mov ebx eax +
test esi esi +
jz loc_1045922  +
push 0  +
call sub_104574C  +
call ds:GetLastError  +
mov ecx edi +
mov esi eax +
call sub_10454F3  +
test ebx ebx +
pop ebx  +
jz loc_104593A  +
xor eax eax +
jmp loc_1045967  +
mov eax 0E0000000h +
mov ecx esi +
and ecx eax +
cmp ecx eax +
jnz loc_1045955  +
and esi 0FFFFh +
or esi 800F0000h +
jmp loc_1045965  +
test esi esi +
jle loc_1045965  +
and esi 0FFFFh +
or esi 80070000h +
mov eax esi +
pop edi  +
pop esi  +
retn   +
***
call sub_1021EB9  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_100E05C +
and dword ptr [ebp-4] 0 +
mov eax [esi+8] +
cmp eax 0FFFFFFFFh +
jz loc_104599D  +
push eax  +
call ds:SetupDiDestroyDeviceInfoList  +
or dword ptr [esi+8] 0FFFFFFFFh +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov dword ptr [esi] offset off_10058A4 +
call sub_1021FA5  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov edx [ebp+arg_14] +
push esi  +
xor esi esi +
and edx 100h +
push edi  +
mov edi [ebp+arg_4] +
mov eax 80070057h +
jz loc_10459E6  +
mov ecx [ebp+arg_0] +
test ecx ecx +
jnz loc_10459DA  +
test edi edi +
jnz loc_10459E2  +
cmp edi 7FFFFFFFh +
jbe loc_10459F9  +
mov esi eax +
jmp loc_10459F9  +
xor esi esi +
test edi edi +
jz loc_10459F4  +
cmp edi 7FFFFFFFh +
jbe loc_10459F6  +
mov esi eax +
mov ecx [ebp+arg_0] +
test esi esi +
jl loc_1045A76  +
push ebx  +
xor esi esi +
mov ebx edi +
mov [ebp+arg_4] ecx +
mov [ebp+var_4] ebx +
cmp edx esi +
jz loc_1045A18  +
cmp [ebp+arg_8] esi +
jnz loc_1045A18  +
mov [ebp+arg_8] offset word_10022EC +
test [ebp+arg_14] 0FFFFE000h +
jz loc_1045A7E  +
mov esi eax +
test edi edi +
jz loc_1045A2C  +
xor eax eax +
mov [ecx] ax +
test [ebp+arg_14] 1C00h +
jz loc_1045A54  +
test edi edi +
jz loc_1045A54  +
push [ebp+arg_14]  +
lea eax [ebp+arg_4] +
push eax  +
lea eax [edi+edi] +
mov edi [ebp+arg_0] +
push eax  +
lea ebx [ebp+var_4] +
xor ecx ecx +
call sub_104577F  +
mov ebx [ebp+var_4] +
test esi esi +
jge loc_1045A60  +
cmp esi 8007007Ah +
jnz loc_1045A75  +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_1045A6C  +
mov ecx [ebp+arg_4] +
mov [eax] ecx +
mov eax [ebp+arg_10] +
test eax eax +
jz loc_1045A75  +
mov [eax] ebx +
pop ebx  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 18h  +
test edi edi +
jnz loc_1045A97  +
mov edx [ebp+arg_8] +
cmp [edx] di +
jz loc_1045A60  +
mov esi ecx +
neg esi  +
sbb esi esi +
and esi 23h +
add esi eax +
jmp loc_1045A2C  +
and [ebp+arg_4] 0 +
push 7FFFFFFEh  +
lea eax [ebp+arg_4] +
push eax  +
mov eax [ebp+arg_8] +
mov edx edi +
call sub_104F45B  +
mov ecx [ebp+arg_0] +
mov esi eax +
mov eax [ebp+arg_4] +
mov ebx edi +
sub ebx eax +
lea ecx [ecx+eax*2] +
mov [ebp+arg_4] ecx +
mov [ebp+var_4] ebx +
test esi esi +
jl loc_1045A2C  +
mov eax [ebp+arg_14] +
test eax 200h +
jz loc_1045A60  +
cmp ebx 1 +
jbe loc_1045A60  +
lea ecx [ebx+ebx] +
cmp ecx 2 +
jbe loc_1045A60  +
add ecx 0FFFFFFFEh +
and eax 0FFh +
push ecx  +
push eax  +
mov eax [ebp+arg_4] +
add eax 2 +
push eax  +
call sub_10219E0  +
add esp 0Ch +
jmp loc_1045A60  +
***
call sub_1021EB9  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_100F2FC +
and dword ptr [ebp-4] 0 +
call sub_104584E  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov dword ptr [esi] offset off_10058A4 +
call sub_1021FA5  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
cmp dword ptr [eax-0Ch] 0 +
jnz loc_1045B52  +
xor al al +
jmp loc_1045B61  +
push eax  +
push dword ptr [ecx+8]  +
call ds:SetupGetLineCountW  +
test eax eax +
setnl al  +
pop ebp  +
retn 4  +
***
jmp sub_10458BB  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
xor ebx ebx +
call sub_10458BB  +
xor edi edi +
call sub_1045739  +
test eax eax +
jnz loc_1045B9A  +
inc edi  +
push edi  +
call sub_104574C  +
call ds:SetupOpenFileQueue  +
mov [esi+4] eax +
test edi edi +
jz loc_1045BAE  +
push 0  +
call sub_104574C  +
cmp dword ptr [esi+4] 0FFFFFFFFh +
jnz loc_1045BC3  +
call ds:GetLastError  +
mov ecx esi +
mov ebx eax +
call sub_10458BB  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0AC4h +
mov eax dword_1063194 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov esi offset a_win +
lea edi [ebp+var_28] +
movs   +
movs   +
movs   +
mov esi offset a_ntx86 +
lea edi [ebp+var_1C] +
movs   +
movs   +
movs   +
movs   +
mov eax [ebp+arg_0] +
mov esi offset a_ntia64 +
lea edi [ebp+var_38] +
movs   +
movs   +
movs   +
movs   +
mov esi offset a_ntamd64 +
lea edi [ebp+var_4C] +
movs   +
movs   +
movs   +
mov [ebp+Context] eax +
mov eax [ebp+arg_C] +
movs   +
mov [ebp+var_AC4] eax +
mov eax ds:dword_100F300 +
xor ebx ebx +
mov [ebp+var_C] eax +
mov eax ds:dword_100F304 +
movs   +
mov edi 11Ch +
push edi  +
mov [ebp+var_8] eax +
lea eax [ebp+VersionInformation] +
push ebx  +
push eax  +
mov [ebp+var_A85] 0 +
mov [ebp+var_ABC] ebx +
mov [ebp+var_AA4] ebx +
mov [ebp+var_AB8] ebx +
mov [ebp+var_AB0] ebx +
mov [ebp+var_AB4] ebx +
call sub_10219E0  +
add esp 0Ch +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] edi +
call ds:GetVersionExW  +
test eax eax +
jz loc_10461CB  +
push 2  +
pop ecx  +
cmp [ebp+VersionInformation.dwPlatformId] ecx +
jnz loc_10461CB  +
mov eax [ebp+arg_4] +
mov [ebp+var_968] ebx +
cmp eax ebx +
jz loc_1045CBA  +
mov edx [eax+4] +
mov [ebp+var_AC0] edx +
jmp loc_1045CC0  +
mov [ebp+var_AC0] ecx +
cmp eax ebx +
jz loc_1045CE4  +
movzx eax word ptr [eax+10h] +
cmp eax ebx +
jz loc_1045CE4  +
cmp eax 6 +
jz loc_1045CDF  +
cmp eax 9 +
jnz loc_10461CB  +
lea eax [ebp+var_4C+2] +
jmp loc_1045CE7  +
lea eax [ebp+var_38+2] +
jmp loc_1045CE7  +
lea eax [ebp+var_1C+2] +
push ebx  +
mov [ebp+var_A94] eax +
mov esi 0FFh +
push esi  +
lea eax [ebp+ReturnBuffer] +
push eax  +
push ecx  +
push [ebp+Context]  +
mov [ebp+FieldIndex] ecx +
call ds:SetupGetStringFieldW  +
test eax eax +
jz loc_1046035  +
mov ebx ds:VerSetConditionMask +
lea eax [ebp+ReturnBuffer] +
push eax  +
push esi  +
lea eax [ebp+var_24C] +
push eax  +
call sub_1014BA1  +
test eax eax +
jl loc_1045FFD  +
xor eax eax +
mov [ebp+var_AA0] eax +
mov [ebp+var_A9C] eax +
mov [ebp+var_A8C] eax +
lea eax [ebp+var_24C] +
push 2Eh  +
push eax  +
call sub_1054573  +
mov edi eax +
pop ecx  +
pop ecx  +
mov [ebp+var_A98] edi +
test edi edi +
jz loc_1045D6D  +
xor eax eax +
mov [edi] ax +
cmp [ebp+var_AC0] 2 +
jnz loc_1045DA9  +
push [ebp+var_A94]  +
lea eax [ebp+var_24C] +
push eax  +
call sub_10224ED  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1045D9A  +
mov [ebp+var_A8C] 4 +
jmp loc_1045DC3  +
cmp [ebp+arg_8] 0 +
jnz loc_1045FFD  +
lea eax [ebp+var_C+2] +
jmp loc_1045DAC  +
lea eax [ebp+var_28+2] +
push eax  +
lea eax [ebp+var_24C] +
push eax  +
call sub_10224ED  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1045FFD  +
test edi edi +
jz loc_104609E  +
inc edi  +
inc edi  +
push 2Eh  +
push edi  +
mov [ebp+var_A98] edi +
call sub_1054573  +
mov esi eax +
pop ecx  +
pop ecx  +
test esi esi +
jz loc_1045DE8  +
xor eax eax +
mov [esi] ax +
lea eax [ebp+var_A90] +
push eax  +
mov ecx edi +
call sub_1045636  +
test eax eax +
jz loc_1045FF8  +
mov eax [ebp+var_A90] +
test eax eax +
jl loc_1045FF8  +
mov [ebp+var_A9C] eax +
test esi esi +
jz loc_1045FC1  +
add esi 2 +
push 2Eh  +
push esi  +
mov [ebp+var_A98] esi +
call sub_1054573  +
mov edi eax +
pop ecx  +
pop ecx  +
test edi edi +
jz loc_1045E38  +
xor eax eax +
mov [edi] ax +
lea eax [ebp+var_A90] +
push eax  +
mov ecx esi +
call sub_1045636  +
test eax eax +
jz loc_1045FF8  +
mov eax [ebp+var_A90] +
test eax eax +
jl loc_1045FF8  +
mov [ebp+var_AA0] eax +
jz loc_1045E71  +
cmp [ebp+var_A9C] 0 +
jz loc_1045FF8  +
test edi edi +
jz loc_1045FC8  +
cmp [ebp+arg_4] 0 +
jnz loc_1045FD2  +
lea esi [edi+2] +
push 2Eh  +
push esi  +
mov [ebp+var_A98] esi +
call sub_1054573  +
mov edi eax +
pop ecx  +
pop ecx  +
test edi edi +
jz loc_1045EA1  +
xor eax eax +
mov [edi] ax +
lea eax [ebp+var_A90] +
push eax  +
mov ecx esi +
call sub_1045636  +
test eax eax +
jz loc_1045FF8  +
mov eax [ebp+var_A90] +
cmp eax 0FFh +
ja loc_1045FF8  +
mov [ebp+var_A85] al +
test al al +
jz loc_1045ED9  +
or [ebp+var_A8C] 2 +
test edi edi +
jz loc_1045F3C  +
lea esi [edi+2] +
push 2Eh  +
push esi  +
mov [ebp+var_A98] esi +
call sub_1054573  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1045FF8  +
lea eax [ebp+var_A90] +
push eax  +
mov ecx esi +
call sub_1045636  +
test eax eax +
jz loc_1045FF8  +
cmp [ebp+var_A90] 0FFFFh +
ja loc_1045FF8  +
cmp word ptr [ebp+var_A90] 0 +
movzx eax word ptr [ebp+var_A90] +
mov [ebp+var_ABC] eax +
jz loc_1045F3C  +
or [ebp+var_A8C] 1 +
cmp [ebp+var_968] 0 +
jnz loc_1045F62  +
mov esi 11Ch +
push esi  +
lea eax [ebp+var_968] +
push 0  +
push eax  +
call sub_10219E0  +
add esp 0Ch +
mov [ebp+var_968] esi +
mov ecx [ebp+var_A9C] +
mov edi [ebp+var_AA0] +
xor esi esi +
xor eax eax +
xor edx edx +
mov [ebp+var_964] ecx +
mov [ebp+var_960] edi +
test ecx ecx +
jz loc_1045F95  +
push 3  +
pop esi  +
push esi  +
push 2  +
push edx  +
push edx  +
call ebx  +
push esi  +
push 1  +
push edx  +
push eax  +
call ebx  +
test byte ptr [ebp+var_A8C] 2 +
jz loc_104603B  +
mov cl [ebp+var_A85] +
push 1  +
mov [ebp+var_84E] cl +
mov ecx 80h +
push ecx  +
push edx  +
push eax  +
or esi ecx +
call ebx  +
jmp loc_1046042  +
and [ebp+var_AA0] 0 +
cmp [ebp+arg_4] 0 +
jz loc_1045F3C  +
mov eax [ebp+arg_4] +
mov eax [eax+8] +
cmp eax [ebp+var_A9C] +
jb loc_1045FF8  +
jnz loc_104608B  +
mov eax [ebp+arg_4] +
mov ecx [ebp+var_AA0] +
cmp [eax+0Ch] ecx +
jnb loc_104608B  +
mov esi 0FFh +
inc [ebp+FieldIndex]  +
push 0  +
push esi  +
lea eax [ebp+ReturnBuffer] +
push eax  +
push [ebp+FieldIndex]  +
push [ebp+Context]  +
call ds:SetupGetStringFieldW  +
test eax eax +
jnz loc_1045D1C  +
cmp [ebp+var_AB4] eax +
jnz loc_1046126  +
xor ebx ebx +
push ebx  +
jmp loc_10461CD  +
mov [ebp+var_84E] 0 +
test byte ptr [ebp+var_A8C] 1 +
jz loc_1046066  +
mov cx word ptr [ebp+var_ABC] +
push 6  +
push 40h  +
push edx  +
push eax  +
mov [ebp+var_850] cx +
or esi 40h +
call ebx  +
jmp loc_104606F  +
xor ecx ecx +
mov [ebp+var_850] cx +
test esi esi +
jz loc_104608B  +
push edx  +
push eax  +
push esi  +
lea eax [ebp+var_968] +
push eax  +
call ds:VerifyVersionInfoW  +
test eax eax +
jz loc_1045FF8  +
mov eax [ebp+var_A9C] +
mov esi 0FFh +
cmp eax [ebp+var_AA4] +
ja loc_10460D8  +
mov edi [ebp+var_A9C] +
cmp edi [ebp+var_AA4] +
jnz loc_1045FFD  +
mov eax [ebp+var_AB8] +
cmp [ebp+var_AA0] eax +
ja loc_10460DA  +
jnz loc_1045FFD  +
mov eax [ebp+var_A8C] +
cmp eax [ebp+var_AB0] +
jb loc_1045FFD  +
jmp loc_10460DA  +
mov edi eax +
lea eax [ebp+ReturnBuffer] +
push eax  +
push esi  +
lea eax [ebp+var_64C] +
push eax  +
call sub_1014BA1  +
test eax eax +
jl loc_104611F  +
mov eax [ebp+var_AA0] +
mov [ebp+var_AB8] eax +
mov eax [ebp+var_A8C] +
mov [ebp+var_AA4] edi +
mov [ebp+var_AB0] eax +
mov [ebp+var_AB4] 1 +
jmp loc_1045FFD  +
push 0Dh  +
jmp loc_10461CD  +
xor edi edi +
push edi  +
push esi  +
lea eax [ebp+var_84C] +
push eax  +
push 1  +
push [ebp+Context]  +
call ds:SetupGetStringFieldW  +
test eax eax +
jz loc_10461D3  +
push edi  +
lea eax [ebp+var_A94] +
push eax  +
lea eax [ebp+var_A98] +
push eax  +
lea eax [ebp+var_84C] +
push eax  +
push esi  +
push [ebp+var_AC4]  +
call sub_10459B2  +
cmp eax edi +
jl loc_104611F  +
push edi  +
lea eax [ebp+var_A94] +
push eax  +
lea eax [ebp+var_A98] +
push eax  +
push offset String2  +
push [ebp+var_A94]  +
push [ebp+var_A98]  +
call sub_10459B2  +
cmp eax edi +
jl loc_104611F  +
push edi  +
lea eax [ebp+var_A94] +
push eax  +
push edi  +
lea eax [ebp+var_64C] +
push eax  +
push [ebp+var_A94]  +
push [ebp+var_A98]  +
call sub_10459B2  +
cmp eax edi +
jl loc_104611F  +
push edi  +
call ds:SetLastError  +
xor eax eax +
inc eax  +
jmp loc_10461D5  +
push 0Ah  +
call ds:SetLastError  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1021557  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1045B09  +
test byte ptr [ebp+8] 1 +
jz loc_1046205  +
push esi  +
call sub_1021179  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1023674  +
mov edi ecx +
mov eax [ebp+10h] +
mov [ebp-42Ch] eax +
mov eax [ebp+18h] +
mov [ebp-434h] eax +
xor ebx ebx +
mov [ebp-430h] ebx +
mov [ebp-428h] ebx +
mov [ebp-4] ebx +
lea eax [ebp-430h] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push edi  +
mov esi ds:SetupGetStringFieldW +
call esi  +
test eax eax +
jnz loc_1046273  +
mov [ebp-420h] ebx +
call ds:GetLastError  +
mov [ebp-424h] eax +
jmp loc_1046306  +
push ebx  +
push 0FFh  +
lea eax [ebp-41Ch] +
push eax  +
push 1  +
push edi  +
call esi  +
test eax eax +
jz loc_104625C  +
lea eax [ebp-21Ch] +
push eax  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push edi  +
call sub_1045BCE  +
mov [ebp-420h] eax +
call ds:GetLastError  +
mov [ebp-424h] eax +
cmp [ebp-420h] ebx +
jz loc_10462C4  +
lea eax [ebp-21Ch] +
mov [ebp-428h] eax +
jmp loc_1046306  +
cmp [ebp+0Ch] ebx +
jnz loc_10462E1  +
lea eax [ebp-41Ch] +
mov [ebp-428h] eax +
mov dword ptr [ebp-420h] 1 +
jmp loc_1046306  +
mov dword ptr [ebp-424h] 800F0101h +
jmp loc_1046306  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor ebx ebx +
mov [ebp-420h] ebx +
mov dword ptr [ebp-424h] 57h +
push 0FFFFFFFEh  +
pop esi  +
mov [ebp-4] esi +
cmp [ebp-420h] ebx +
jz loc_104639D  +
push dword ptr [ebp-428h]  +
call ds:lstrlenW  +
inc eax  +
mov dword ptr [ebp-4] 1 +
mov ecx [ebp-434h] +
cmp ecx ebx +
jz loc_1046338  +
mov [ecx] eax +
cmp [ebp-42Ch] ebx +
jz loc_1046379  +
cmp eax [ebp+14h] +
jbe loc_1046351  +
mov dword ptr [ebp-424h] 7Ah +
jmp loc_1046373  +
push dword ptr [ebp-428h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp-42Ch]  +
call sub_1014BA1  +
test eax eax +
jge loc_1046379  +
mov dword ptr [ebp-424h] 57h +
mov [ebp-420h] ebx +
mov [ebp-4] esi +
jmp loc_104639D  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
and dword ptr [ebp-420h] 0 +
mov dword ptr [ebp-424h] 57h +
mov dword ptr [ebp-4] 0FFFFFFFEh +
push dword ptr [ebp-424h]  +
call ds:SetLastError  +
mov eax [ebp-420h] +
call sub_10236BC  +
retn 14h  +
***
call sub_1021EB9  +
xor esi esi +
mov [ebp-4] esi +
push offset aSetupapi_dll  +
call ds:LoadLibraryW  +
mov edi eax +
cmp edi esi +
jnz loc_10463E8  +
call ds:GetLastError  +
mov esi eax +
jmp loc_104643E  +
push offset aDriverstoredel  +
push edi  +
call ds:GetProcAddress  +
cmp eax esi +
jnz loc_1046402  +
call ds:GetLastError  +
mov esi eax +
jmp loc_1046437  +
push esi  +
push esi  +
push dword ptr [ebp+8]  +
call eax  +
cmp eax esi +
jge loc_1046437  +
mov ecx eax +
sar ecx 10h +
and ecx 1FFFh +
cmp ecx 7 +
jnz loc_1046422  +
movzx esi ax +
jmp loc_1046437  +
cmp ecx 0Fh +
jnz loc_1046432  +
movzx esi ax +
or esi 0E0000000h +
jmp loc_1046437  +
mov esi 0E000024Ch +
push edi  +
call ds:FreeLibrary  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
mov eax esi +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EB9  +
mov esi ecx +
xor ebx ebx +
lea ecx [ebp-10h] +
mov [ebp-14h] ebx +
call sub_10151DA  +
mov [ebp-4] ebx +
mov edi [ebp+8] +
mov eax [edi] +
mov eax [eax-0Ch] +
cmp eax ebx +
jnz loc_104649C  +
push 57h  +
pop ebx  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_1015174  +
mov eax ebx +
call sub_1021FA5  +
retn 4  +
mov ecx esi +
call sub_104584E  +
push ebx  +
lea eax [ebp-10h] +
push eax  +
push ecx  +
mov ecx esp +
mov [ebp+8] esp +
push edi  +
call sub_10151F2  +
mov byte ptr [ebp-4] 1 +
mov [ebp-4] bl +
call sub_1036735  +
cmp eax ebx +
jz loc_10464C8  +
mov ebx eax +
jmp loc_1046486  +
lea eax [ebp-14h] +
push eax  +
push 2  +
push ebx  +
push dword ptr [ebp-10h]  +
call ds:SetupOpenInfFileW  +
mov [esi+8] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1046486  +
call ds:GetLastError  +
jmp loc_10464C4  +
***
call sub_1021EB9  +
mov edi ecx +
and dword ptr [ebp-14h] 0 +
lea ecx [ebp-10h] +
call sub_10151DA  +
xor esi esi +
inc esi  +
mov [ebp-4] esi +
push 1000h  +
lea ecx [ebp-10h] +
call sub_10158A3  +
mov ecx [ebp-10h] +
mov ecx [ecx-0Ch] +
push 0  +
push ecx  +
push eax  +
push dword ptr [ebp+0Ch]  +
add edi 10h +
push edi  +
call ds:SetupGetStringFieldW  +
lea ecx [ebp-10h] +
test eax eax +
jz loc_104654D  +
push 0FFFFFFFFh  +
call sub_1015023  +
mov ecx [ebp+8] +
lea eax [ebp-10h] +
push eax  +
call sub_10151F2  +
jmp loc_104655E  +
call sub_1014FC6  +
mov ecx [ebp+8] +
lea eax [ebp-10h] +
push eax  +
call sub_10151F2  +
mov [ebp-14h] esi +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-10h] +
call sub_1015174  +
mov eax [ebp+8] +
call sub_1021FA5  +
retn 8  +
***
call sub_1021EB9  +
mov edi ecx +
xor ebx ebx +
lea ecx [ebp-10h] +
mov [ebp-14h] ebx +
call sub_10151DA  +
xor esi esi +
inc esi  +
mov [ebp-4] esi +
push 0FFh  +
lea ecx [ebp-10h] +
call sub_10158A3  +
mov ecx [ebp-10h] +
mov ecx [ecx-0Ch] +
push ebx  +
push ecx  +
push eax  +
push dword ptr [ebp+0Ch]  +
lea ecx [edi+10h] +
push ebx  +
call sub_1046211  +
lea ecx [ebp-10h] +
test eax eax +
jz loc_10465DC  +
push 0FFFFFFFFh  +
call sub_1015023  +
mov ecx [ebp+8] +
lea eax [ebp-10h] +
push eax  +
call sub_10151F2  +
jmp loc_10465ED  +
call sub_1014FC6  +
mov ecx [ebp+8] +
lea eax [ebp-10h] +
push eax  +
call sub_10151F2  +
mov [ebp-14h] esi +
mov [ebp-4] bl +
lea ecx [ebp-10h] +
call sub_1015174  +
mov eax [ebp+8] +
call sub_1021FA5  +
retn 8  +
***
call sub_1021EB9  +
xor ebx ebx +
mov [ebp-4] ebx +
push offset aSetupapi_dll_0  +
mov [ebp-14h] ebx +
mov [ebp-1Ch] ebx +
call ds:LoadLibraryW  +
mov [ebp-20h] eax +
cmp eax ebx +
jz loc_104672F  +
push offset aSetupuninstall  +
push eax  +
call ds:GetProcAddress  +
mov edi eax +
cmp edi ebx +
jz loc_10466D6  +
lea ecx [ebp-18h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-10h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-18h] +
call sub_1014FC6  +
lea ecx [ebp-10h] +
call sub_1014FC6  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp+8] +
push eax  +
call sub_1036032  +
test al al +
jz loc_10466B9  +
mov eax [ebp-10h] +
cmp [eax-0Ch] ebx +
jz loc_10466B9  +
push ebx  +
xor esi esi +
inc esi  +
push esi  +
push eax  +
call edi  +
test eax eax +
jz loc_10466A4  +
mov [ebp-14h] esi +
jmp loc_10466B9  +
call ds:GetLastError  +
cmp eax 0E000023Ch +
jnz loc_10466B6  +
mov [ebp-14h] ebx +
jmp loc_10466B9  +
mov [ebp-1Ch] esi +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-10h] +
call sub_1015174  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-18h] +
call sub_1015174  +
cmp [ebp-1Ch] ebx +
jz loc_1046726  +
mov esi ds:SetFileAttributesW +
mov ebx 80h +
push ebx  +
push dword ptr [ebp+8]  +
call esi  +
push dword ptr [ebp+8]  +
mov edi ds:DeleteFileW +
call edi  +
test eax eax +
jz loc_1046726  +
lea ecx [ebp+8] +
mov dword ptr [ebp-14h] 1 +
call sub_101575C  +
push offset a_pnf  +
push offset String  +
lea ecx [ebp+8] +
call sub_101AE36  +
test eax eax +
jz loc_1046726  +
push ebx  +
push dword ptr [ebp+8]  +
call esi  +
push dword ptr [ebp+8]  +
call edi  +
push dword ptr [ebp-20h]  +
call ds:FreeLibrary  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
mov eax [ebp-14h] +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EB9  +
xor ebx ebx +
mov [ebp-4] ebx +
push offset aSetupapi_dll  +
call ds:LoadLibraryW  +
mov [ebp-14h] eax +
cmp eax ebx +
jnz loc_1046778  +
call ds:GetLastError  +
mov ebx eax +
jmp loc_10467D6  +
push offset aSetupgetinfdri  +
push eax  +
call ds:GetProcAddress  +
mov [ebp-10h] eax +
cmp eax ebx +
jnz loc_1046795  +
call ds:GetLastError  +
mov ebx eax +
jmp loc_10467CD  +
mov ecx [ebp+0Ch] +
mov esi 105h +
push esi  +
call sub_10158A3  +
mov ecx [ebp+0Ch] +
mov edi [ebp+8] +
push ebx  +
push esi  +
call sub_1015002  +
push eax  +
push ebx  +
push ebx  +
push edi  +
call dword ptr [ebp-10h]  +
test eax eax +
jnz loc_10467C3  +
call ds:GetLastError  +
mov ebx eax +
mov ecx [ebp+0Ch] +
push 0FFFFFFFFh  +
call sub_1015023  +
push dword ptr [ebp-14h]  +
call ds:FreeLibrary  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
mov eax ebx +
call sub_1021FA5  +
retn 8  +
***
call sub_1021EB9  +
xor esi esi +
mov [ebp-4] esi +
push offset aSetupapi_dll  +
mov [ebp-10h] esi +
call ds:LoadLibraryW  +
mov [ebp-14h] eax +
cmp eax esi +
jnz loc_1046824  +
call ds:GetLastError  +
mov esi eax +
jmp loc_10468A8  +
push offset aDriverstorefin  +
push eax  +
call ds:GetProcAddress  +
mov ebx eax +
cmp ebx esi +
jnz loc_1046840  +
call ds:GetLastError  +
mov esi eax +
jmp loc_104689F  +
mov ecx [ebp+0Ch] +
mov eax 105h +
push eax  +
mov [ebp-10h] eax +
call sub_10158A3  +
mov ecx [ebp+0Ch] +
mov edi [ebp+8] +
lea eax [ebp-10h] +
push eax  +
call sub_1015002  +
push eax  +
push esi  +
push esi  +
push esi  +
push esi  +
push edi  +
call ebx  +
mov ecx [ebp+0Ch] +
push 0FFFFFFFFh  +
mov edi eax +
call sub_1015023  +
cmp edi esi +
jge loc_104689F  +
mov eax edi +
sar eax 10h +
and eax 1FFFh +
cmp eax 7 +
jnz loc_104688C  +
movzx esi di +
jmp loc_104689F  +
cmp eax 0Fh +
jnz loc_104689C  +
movzx esi di +
or esi 0E0000000h +
jmp loc_104689F  +
push 2  +
pop esi  +
push dword ptr [ebp-14h]  +
call ds:FreeLibrary  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
mov eax esi +
call sub_1021FA5  +
retn 8  +
***
call sub_1021EB9  +
and dword ptr [ebp-4] 0 +
lea eax [ebp+8] +
push eax  +
call sub_1036B7A  +
push dword ptr [ebp+0Ch]  +
test eax eax +
push ecx  +
lea eax [ebp+8] +
mov ecx esp +
mov [ebp+0Ch] esp +
push eax  +
jz loc_1046917  +
call sub_10151F2  +
mov byte ptr [ebp-4] 1 +
mov byte ptr [ebp-4] 0 +
call sub_104674B  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
mov eax esi +
call sub_1021FA5  +
retn 8  +
call sub_10151F2  +
mov byte ptr [ebp-4] 2 +
mov byte ptr [ebp-4] 0 +
call sub_10467F1  +
jmp loc_10468FF  +
***
call sub_1021EB9  +
mov esi ecx +
mov [ebp-10h] esi +
xor eax eax +
mov dword ptr [esi] offset off_10058A4 +
mov [esi+4] eax +
mov [ebp-4] eax +
lea edi [esi+8] +
mov dword ptr [esi] offset off_100F3D0 +
mov [edi] eax +
mov byte ptr [ebp-4] 1 +
lea ebx [esi+0Ch] +
mov ecx ebx +
call sub_10151DA  +
mov byte ptr [ebp-4] 2 +
mov eax [ebp+8] +
push dword ptr [eax]  +
mov ecx edi +
call sub_103ECC4  +
push dword ptr [ebp+0Ch]  +
mov ecx ebx +
call sub_1015AAF  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax esi +
call sub_1021FA5  +
retn 8  +
***
call sub_1021EB9  +
mov ebx ecx +
mov [ebp-10h] ebx +
xor eax eax +
mov dword ptr [ebx] offset off_10058A4 +
mov [ebx+4] eax +
mov [ebp-4] eax +
lea esi [ebx+8] +
mov dword ptr [ebx] offset off_100F3D0 +
mov [esi] eax +
mov byte ptr [ebp-4] 1 +
lea edi [ebx+0Ch] +
mov ecx edi +
call sub_10151DA  +
mov byte ptr [ebp-4] 2 +
mov eax [ebp+8] +
push dword ptr [eax]  +
mov ecx esi +
call sub_103ECC4  +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
call sub_1015AAF  +
mov esi [ebp+10h] +
lea edi [ebx+10h] +
movs   +
movs   +
movs   +
movs   +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax ebx +
call sub_1021FA5  +
retn 0Ch  +
***
call sub_1021EB9  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_100F3D0 +
mov dword ptr [ebp-4] 1 +
lea ecx [esi+0Ch] +
call sub_1015174  +
mov byte ptr [ebp-4] 0 +
lea ecx [esi+8] +
call sub_103EAEC  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov dword ptr [esi] offset off_10058A4 +
call sub_1021FA5  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1046A04  +
test byte ptr [ebp+8] 1 +
jz loc_1046A65  +
push esi  +
call sub_1021179  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1021EB9  +
mov esi ecx +
xor ebx ebx +
mov [ebp-10h] ebx +
lea edi [esi+0Ch] +
mov eax [edi] +
cmp [eax-0Ch] ebx +
jnz loc_1046A9E  +
lea eax [ebp-24h] +
push eax  +
lea eax [esi+10h] +
push eax  +
call ds:SetupFindNextLine  +
jmp loc_1046AAD  +
lea ecx [ebp-24h] +
push ecx  +
push eax  +
lea eax [esi+10h] +
push eax  +
call ds:SetupFindNextMatchLineW  +
cmp eax ebx +
jz loc_1046AF3  +
push 20h  +
call sub_10225EB  +
pop ecx  +
mov [ebp-14h] eax +
xor ebx ebx +
inc ebx  +
mov [ebp-4] ebx +
test eax eax +
jz loc_1046AD8  +
lea ecx [ebp-24h] +
push ecx  +
push edi  +
add esi 8 +
push esi  +
mov ecx eax +
call sub_1046995  +
jmp loc_1046ADA  +
xor eax eax +
mov byte ptr [ebp-4] 0 +
mov ecx [ebp+8] +
push eax  +
call sub_103ED22  +
and dword ptr [ebp-4] 0 +
mov [ebp-10h] ebx +
mov eax [ebp+8] +
jmp loc_1046B02  +
mov eax [ebp+8] +
mov [eax] ebx +
mov [ebp-4] ebx +
mov dword ptr [ebp-10h] 1 +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EB9  +
lea ecx [ebp-10h] +
call sub_10151DA  +
and dword ptr [ebp-4] 0 +
push 104h  +
lea ecx [ebp-10h] +
call sub_10158A3  +
lea ecx [ebp-18h] +
mov edi eax +
call sub_10151DA  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-14h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 2 +
mov esi [ebp+8] +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
push esi  +
call sub_1036032  +
mov eax [ebp-10h] +
mov eax [eax-0Ch] +
mov esi [esi] +
push 0  +
push 0  +
push eax  +
push edi  +
push 2  +
push 1  +
push dword ptr [ebp-14h]  +
push esi  +
call ds:SetupCopyOEMInfW  +
push 0FFFFFFFFh  +
lea ecx [ebp-10h] +
call sub_1015023  +
mov ecx [ebp+0Ch] +
lea eax [ebp-10h] +
push eax  +
call sub_1015959  +
mov eax [ebp-10h] +
mov eax [eax-0Ch] +
xor ecx ecx +
test eax eax +
setnz cl  +
mov esi ecx +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-14h] +
call sub_1015174  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-18h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_1015174  +
mov eax esi +
call sub_1021FA5  +
retn 8  +
***
call sub_1021EB9  +
mov ebx ecx +
xor edi edi +
mov [ebp-10h] edi +
mov esi [ebp+0Ch] +
mov eax [esi] +
cmp [eax-0Ch] edi +
jnz loc_1046BF7  +
mov eax [ebp+8] +
mov [eax] edi +
jmp loc_1046C76  +
push esi  +
call sub_1045B3E  +
test al al +
jz loc_1046C71  +
push 10h  +
call sub_10225EB  +
pop ecx  +
mov [ebp-14h] eax +
xor edi edi +
inc edi  +
mov [ebp-4] edi +
test eax eax +
jz loc_1046C39  +
push ebx  +
lea ecx [ebp+0Ch] +
call sub_104B64A  +
mov byte ptr [ebp-4] 2 +
mov ecx [ebp-14h] +
push esi  +
lea eax [ebp+0Ch] +
push eax  +
mov dword ptr [ebp-10h] 2 +
call sub_1046930  +
jmp loc_1046C3B  +
xor eax eax +
mov dword ptr [ebp-4] 3 +
mov ecx [ebp+8] +
push eax  +
call sub_103ED22  +
or [ebp-10h] edi +
and dword ptr [ebp-4] 0 +
test byte ptr [ebp-10h] 2 +
jz loc_1046C6C  +
mov ecx [ebp+0Ch] +
and dword ptr [ebp-10h] 0FFFFFFFDh +
test ecx ecx +
jz loc_1046C6C  +
call sub_101A986  +
and dword ptr [ebp+0Ch] 0 +
mov eax [ebp+8] +
jmp loc_1046C80  +
mov eax [ebp+8] +
mov [eax] edi +
mov [ebp-4] edi +
mov dword ptr [ebp-10h] 1 +
call sub_1021FA5  +
retn 8  +
***
call sub_1021EB9  +
mov [ebp-14h] ecx +
xor ebx ebx +
mov [ebp-10h] ebx +
mov edi [ebp+0Ch] +
mov eax [edi] +
cmp [eax-0Ch] ebx +
jnz loc_1046CBC  +
mov eax [ebp+8] +
mov [eax] ebx +
mov [ebp-4] ebx +
mov dword ptr [ebp-10h] 1 +
jmp loc_1046D34  +
lea ecx [ebp+0Ch] +
call sub_10151DA  +
xor esi esi +
inc esi  +
mov [ebp-4] esi +
push 0FFh  +
lea ecx [ebp+0Ch] +
call sub_10158A3  +
mov ecx [ebp+0Ch] +
mov ecx [ecx-0Ch] +
mov edi [edi] +
push ebx  +
push ebx  +
push ecx  +
push eax  +
push edi  +
mov edi [ebp-14h] +
push dword ptr [edi+8]  +
call ds:SetupDiGetActualSectionToInstallW  +
test eax eax +
jz loc_1046D1F  +
push 0FFFFFFFFh  +
lea ecx [ebp+0Ch] +
call sub_1015023  +
lea eax [ebp+0Ch] +
push eax  +
push dword ptr [ebp+8]  +
mov ecx edi +
call sub_1046BD3  +
mov [ebp-10h] esi +
mov [ebp-4] bl +
lea ecx [ebp+0Ch] +
call sub_1015174  +
mov eax [ebp+8] +
jmp loc_1046D34  +
mov edi [ebp+8] +
mov [edi] ebx +
mov [ebp-10h] esi +
mov [ebp-4] bl +
lea ecx [ebp+0Ch] +
call sub_1015174  +
mov eax edi +
call sub_1021FA5  +
retn 8  +
***
call sub_1021EB9  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
mov edi [ebp+0Ch] +
mov ecx [edi] +
mov edx [esi+0Ch] +
mov eax [esi+8] +
mov eax [eax+8] +
lea ebx [ebp-24h] +
push ebx  +
push ecx  +
push edx  +
push eax  +
call ds:SetupFindFirstLineW  +
test eax eax +
jz loc_1046DE2  +
push 20h  +
call sub_10225EB  +
pop ecx  +
mov [ebp-14h] eax +
xor ebx ebx +
inc ebx  +
mov [ebp-4] ebx +
test eax eax +
jz loc_1046DAA  +
push esi  +
lea ecx [ebp+0Ch] +
call sub_104B64A  +
mov byte ptr [ebp-4] 2 +
mov ecx [ebp-14h] +
lea eax [ebp-24h] +
push eax  +
push edi  +
lea eax [ebp+0Ch] +
push eax  +
mov [ebp-10h] ebx +
call sub_1046995  +
jmp loc_1046DAC  +
xor eax eax +
mov dword ptr [ebp-4] 3 +
mov ecx [ebp+8] +
push eax  +
call sub_103ED22  +
or dword ptr [ebp-10h] 2 +
and dword ptr [ebp-4] 0 +
test [ebp-10h] bl +
jz loc_1046DDD  +
mov ecx [ebp+0Ch] +
and dword ptr [ebp-10h] 0FFFFFFFEh +
test ecx ecx +
jz loc_1046DDD  +
call sub_101A986  +
and dword ptr [ebp+0Ch] 0 +
mov eax [ebp+8] +
jmp loc_1046DF3  +
mov eax [ebp+8] +
and dword ptr [eax] 0 +
and dword ptr [ebp-4] 0 +
mov dword ptr [ebp-10h] 2 +
call sub_1021FA5  +
retn 8  +
***
call sub_1021EB9  +
mov esi ecx +
and dword ptr [ebp-18h] 0 +
push offset String2  +
lea eax [esi+0Ch] +
push eax  +
lea eax [ebp-14h] +
push eax  +
call sub_1015847  +
xor edi edi +
inc edi  +
mov [ebp-4] edi +
push dword ptr [ebp+0Ch]  +
push eax  +
lea eax [ebp-10h] +
push eax  +
call sub_10157ED  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-14h] +
call sub_1015174  +
mov ecx [esi+8] +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+8]  +
call sub_1046BD3  +
mov [ebp-18h] edi +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-10h] +
call sub_1015174  +
mov eax [ebp+8] +
call sub_1021FA5  +
retn 8  +
***
call sub_1021F2C  +
mov edi [ebp+10h] +
xor esi esi +
mov [ebp-4] esi +
mov [ebp-21Ch] esi +
cmp edi esi +
jz loc_1046E99  +
mov ecx edi +
call sub_1014FC6  +
push offset aSetupapi_dll  +
call ds:LoadLibraryW  +
mov ebx eax +
cmp ebx esi +
jnz loc_1046EB7  +
call ds:GetLastError  +
mov esi eax +
jmp loc_1046F3C  +
push offset aDriverstoreadd  +
push ebx  +
call ds:GetProcAddress  +
cmp eax esi +
jnz loc_1046ED1  +
call ds:GetLastError  +
mov esi eax +
jmp loc_1046F35  +
lea ecx [ebp-21Ch] +
push ecx  +
lea ecx [ebp-218h] +
push ecx  +
push esi  +
push esi  +
push dword ptr [ebp+0Ch]  +
mov dword ptr [ebp-21Ch] 104h +
push dword ptr [ebp+8]  +
call eax  +
cmp eax esi +
jl loc_1046F0B  +
cmp edi esi +
jz loc_1046F35  +
lea eax [ebp-218h] +
push eax  +
mov ecx edi +
call sub_10158CD  +
jmp loc_1046F35  +
mov ecx eax +
sar ecx 10h +
and ecx 1FFFh +
cmp ecx 7 +
jnz loc_1046F20  +
movzx esi ax +
jmp loc_1046F35  +
cmp ecx 0Fh +
jnz loc_1046F30  +
movzx esi ax +
or esi 0E0000000h +
jmp loc_1046F35  +
mov esi 0E0000247h +
push ebx  +
call ds:FreeLibrary  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
mov eax esi +
call sub_1021FBE  +
retn 0Ch  +
***
call sub_1021EB9  +
mov esi ecx +
mov ecx [ebp+8] +
call sub_1014FC6  +
push offset aVersion  +
lea ecx [ebp-1Ch] +
call sub_10161A7  +
xor ebx ebx +
mov [ebp-4] ebx +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-14h] +
push eax  +
mov ecx esi +
call sub_1046BD3  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-1Ch] +
call sub_1015174  +
cmp [ebp-14h] ebx +
jnz loc_1046FB9  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx [ebp-14h] +
cmp ecx ebx +
jz loc_1046FB2  +
call sub_101A986  +
mov [ebp-14h] ebx +
xor eax eax +
jmp loc_1047171  +
mov edi offset aCatalogfile +
push edi  +
lea ecx [ebp-18h] +
call sub_10161A7  +
mov byte ptr [ebp-4] 3 +
mov esi offset String2 +
push esi  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
call sub_1015847  +
mov byte ptr [ebp-4] 4 +
push offset aNtx86  +
push eax  +
lea eax [ebp-20h] +
push eax  +
call sub_1015847  +
mov byte ptr [ebp-4] 5 +
mov ecx [ebp-14h] +
push eax  +
lea eax [ebp-10h] +
push eax  +
call sub_1046D41  +
mov byte ptr [ebp-4] 7 +
lea ecx [ebp-20h] +
call sub_1015174  +
mov byte ptr [ebp-4] 8 +
lea ecx [ebp-1Ch] +
call sub_1015174  +
cmp [ebp-10h] ebx +
jnz loc_1047106  +
push esi  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-24h] +
push eax  +
call sub_1015847  +
mov byte ptr [ebp-4] 9 +
push offset aNt  +
push eax  +
lea eax [ebp-20h] +
push eax  +
call sub_1015847  +
mov byte ptr [ebp-4] 0Ah +
mov ecx [ebp-14h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
call sub_1046D41  +
mov byte ptr [ebp-4] 0Bh +
push dword ptr [eax]  +
lea ecx [ebp-10h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 0Ah +
mov ecx [ebp-1Ch] +
cmp ecx ebx +
jz loc_1047076  +
call sub_101A986  +
mov [ebp-1Ch] ebx +
mov byte ptr [ebp-4] 9 +
lea ecx [ebp-20h] +
call sub_1015174  +
mov byte ptr [ebp-4] 8 +
lea ecx [ebp-24h] +
call sub_1015174  +
cmp [ebp-10h] ebx +
jnz loc_1047106  +
push edi  +
lea ecx [ebp-20h] +
call sub_10161A7  +
mov byte ptr [ebp-4] 0Ch +
mov ecx [ebp-14h] +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
call sub_1046D41  +
mov byte ptr [ebp-4] 0Dh +
push dword ptr [eax]  +
lea ecx [ebp-10h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 0Ch +
mov ecx [ebp-1Ch] +
cmp ecx ebx +
jz loc_10470D1  +
call sub_101A986  +
mov [ebp-1Ch] ebx +
mov byte ptr [ebp-4] 8 +
lea ecx [ebp-20h] +
call sub_1015174  +
cmp [ebp-10h] ebx +
jnz loc_1047106  +
mov byte ptr [ebp-4] 3 +
mov ecx [ebp-10h] +
cmp ecx ebx +
jz loc_10470F5  +
call sub_101A986  +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-18h] +
call sub_1015174  +
jmp loc_1046F9F  +
mov ecx [ebp-10h] +
push 1  +
lea eax [ebp-24h] +
push eax  +
call sub_10464ED  +
mov byte ptr [ebp-4] 0Eh +
mov esi [ebp+8] +
push eax  +
mov ecx esi +
call sub_1015AAF  +
mov byte ptr [ebp-4] 8 +
lea ecx [ebp-24h] +
call sub_1015174  +
mov eax [esi] +
mov eax [eax-0Ch] +
xor ecx ecx +
cmp eax ebx +
setnz cl  +
mov esi ecx +
mov byte ptr [ebp-4] 3 +
mov ecx [ebp-10h] +
cmp ecx ebx +
jz loc_1047150  +
call sub_101A986  +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-18h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx [ebp-14h] +
cmp ecx ebx +
jz loc_104716F  +
call sub_101A986  +
mov [ebp-14h] ebx +
mov eax esi +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EB9  +
mov esi ecx +
lea edx [ebp-2Ch] +
push edx  +
xor edi edi +
mov [ebp-10h] edi +
mov ecx [esi+0Ch] +
mov eax [esi+8] +
mov eax [eax+8] +
push edi  +
push ecx  +
push eax  +
call ds:SetupFindFirstLineW  +
test eax eax +
jz loc_104724D  +
push 20h  +
call sub_10225EB  +
pop ecx  +
mov [ebp-1Ch] eax +
xor ebx ebx +
inc ebx  +
mov [ebp-4] ebx +
cmp eax edi +
jz loc_1047200  +
push offset word_10022EC  +
lea ecx [ebp-18h] +
call sub_10161A7  +
mov byte ptr [ebp-4] 2 +
push esi  +
lea ecx [ebp-14h] +
mov [ebp-10h] ebx +
call sub_104B64A  +
push 3  +
pop eax  +
mov [ebp-4] eax +
mov ecx [ebp-1Ch] +
mov [ebp-10h] eax +
lea eax [ebp-2Ch] +
push eax  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
call sub_1046995  +
jmp loc_1047202  +
xor eax eax +
mov dword ptr [ebp-4] 5 +
mov ecx [ebp+8] +
push eax  +
call sub_103ED22  +
push 4  +
pop eax  +
or [ebp-10h] eax +
mov [ebp-4] eax +
test byte ptr [ebp-10h] 2 +
jz loc_1047234  +
mov ecx [ebp-14h] +
and dword ptr [ebp-10h] 0FFFFFFFDh +
cmp ecx edi +
jz loc_1047234  +
call sub_101A986  +
mov [ebp-14h] edi +
mov [ebp-4] edi +
test [ebp-10h] bl +
jz loc_1047248  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
lea ecx [ebp-18h] +
call sub_1015174  +
mov eax [ebp+8] +
jmp loc_104725C  +
mov eax [ebp+8] +
mov [eax] edi +
mov [ebp-4] edi +
mov dword ptr [ebp-10h] 4 +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EB9  +
mov esi ecx +
xor ebx ebx +
mov [ebp-4] ebx +
mov edi [ebp+0Ch] +
push offset aReboot  +
lea ecx [ebp-24h] +
mov [edi] ebx +
call sub_10161A7  +
mov byte ptr [ebp-4] 1 +
lea eax [ebp-24h] +
push eax  +
lea eax [ebp-28h] +
push eax  +
mov ecx esi +
call sub_1046D41  +
mov byte ptr [ebp-4] 2 +
cmp [eax] ebx +
setnz byte ptr [ebp-0Dh]  +
mov byte ptr [ebp-4] 1 +
mov ecx [ebp-28h] +
cmp ecx ebx +
jz loc_10472BE  +
call sub_101A986  +
mov [ebp-28h] ebx +
mov [ebp-4] bl +
lea ecx [ebp-24h] +
call sub_1015174  +
cmp [ebp-0Dh] bl +
jz loc_10472D4  +
mov dword ptr [edi] 1 +
push offset aRestart  +
lea ecx [ebp-24h] +
call sub_10161A7  +
mov byte ptr [ebp-4] 3 +
lea eax [ebp-24h] +
push eax  +
lea eax [ebp-28h] +
push eax  +
mov ecx esi +
call sub_1046D41  +
mov byte ptr [ebp-4] 4 +
cmp [eax] ebx +
setnz byte ptr [ebp-0Dh]  +
mov byte ptr [ebp-4] 3 +
mov ecx [ebp-28h] +
cmp ecx ebx +
jz loc_1047311  +
call sub_101A986  +
mov [ebp-28h] ebx +
mov [ebp-4] bl +
lea ecx [ebp-24h] +
call sub_1015174  +
cmp [ebp-0Dh] bl +
jz loc_1047327  +
mov dword ptr [edi] 1 +
mov eax [esi+8] +
mov eax [eax+8] +
push ebx  +
push eax  +
push ebx  +
call ds:SetupOpenAppendInfFileW  +
or dword ptr [ebp-38h] 0FFFFFFFFh +
mov edi offset off_100F2E0 +
mov [ebp-3Ch] edi +
mov [ebp-34h] ebx +
mov byte ptr [ebp-4] 5 +
lea ecx [ebp-3Ch] +
call sub_1045B7A  +
test eax eax +
jz loc_1047379  +
mov [ebp-4] bl +
lea ecx [ebp-3Ch] +
mov [ebp-3Ch] edi +
call sub_10458BB  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
xor eax eax +
call sub_1021FA5  +
retn 8  +
mov ecx [esi+0Ch] +
mov eax [esi+8] +
mov eax [eax+8] +
push ebx  +
push ebx  +
push ecx  +
push dword ptr [ebp-38h]  +
push ebx  +
push eax  +
call ds:SetupInstallFilesFromInfSectionW  +
test eax eax +
jz loc_1047355  +
lea ecx [ebp-3Ch] +
call sub_10458E4  +
cmp eax ebx +
jl loc_1047355  +
push 1  +
push ebx  +
push dword ptr [ebp-38h]  +
call ds:SetupPromptReboot  +
cmp eax ebx +
jz loc_10473B9  +
mov eax [ebp+0Ch] +
mov dword ptr [eax] 1 +
lea ecx [ebp-3Ch] +
call sub_10458BB  +
call sub_1035328  +
cmp eax 6 +
jl loc_10474ED  +
lea ecx [ebp-14h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 6 +
lea ecx [ebp-20h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 7 +
lea ecx [ebp-28h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 8 +
lea ecx [ebp-1Ch] +
call sub_10151DA  +
mov byte ptr [ebp-4] 9 +
mov ecx [esi+8] +
lea eax [ebp-14h] +
push eax  +
call sub_1046F57  +
test eax eax +
jz loc_10474BD  +
push offset aSetupapi_dll_0  +
call ds:LoadLibraryW  +
mov [ebp-30h] eax +
cmp eax ebx +
jz loc_104747A  +
push offset aPsetupinstallc  +
push eax  +
call ds:GetProcAddress  +
mov [ebp-24h] eax +
cmp eax ebx +
jz loc_1047466  +
lea eax [ebp-28h] +
push eax  +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp+8] +
push eax  +
call sub_1036032  +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-20h] +
push eax  +
call sub_10360F6  +
push ebx  +
push dword ptr [ebp-14h]  +
push dword ptr [ebp-1Ch]  +
call dword ptr [ebp-24h]  +
jmp loc_104746C  +
call ds:GetLastError  +
push dword ptr [ebp-30h]  +
mov [ebp-24h] eax +
call ds:FreeLibrary  +
jmp loc_1047483  +
call ds:GetLastError  +
mov [ebp-24h] eax +
cmp [ebp-24h] ebx +
jz loc_10474BD  +
mov byte ptr [ebp-4] 8 +
lea ecx [ebp-1Ch] +
call sub_1015174  +
mov byte ptr [ebp-4] 7 +
lea ecx [ebp-28h] +
call sub_1015174  +
mov byte ptr [ebp-4] 6 +
lea ecx [ebp-20h] +
call sub_1015174  +
mov byte ptr [ebp-4] 5 +
lea ecx [ebp-14h] +
call sub_1015174  +
jmp loc_1047355  +
mov byte ptr [ebp-4] 8 +
lea ecx [ebp-1Ch] +
call sub_1015174  +
mov byte ptr [ebp-4] 7 +
lea ecx [ebp-28h] +
call sub_1015174  +
mov byte ptr [ebp-4] 6 +
lea ecx [ebp-20h] +
call sub_1015174  +
mov byte ptr [ebp-4] 5 +
lea ecx [ebp-14h] +
call sub_1015174  +
mov ecx [esi+0Ch] +
mov eax [esi+8] +
mov eax [eax+8] +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 1EFh  +
push ecx  +
push eax  +
push ebx  +
call ds:SetupInstallFromInfSectionW  +
test eax eax +
jz loc_1047355  +
push offset String2  +
lea eax [esi+0Ch] +
push eax  +
lea eax [ebp-30h] +
push eax  +
call sub_1015847  +
mov byte ptr [ebp-4] 0Ah +
push offset aServices  +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
call sub_1015847  +
mov byte ptr [ebp-4] 0Ch +
lea ecx [ebp-30h] +
call sub_1015174  +
mov ecx [esi+8] +
lea eax [ebp-2Ch] +
push eax  +
lea eax [ebp-18h] +
push eax  +
call sub_1046BD3  +
mov byte ptr [ebp-4] 0Dh +
mov ecx [ebp-18h] +
cmp ecx ebx +
jz loc_10475FB  +
lea eax [ebp-28h] +
push eax  +
call sub_104717E  +
mov byte ptr [ebp-4] 0Eh +
cmp [eax] ebx +
setnz byte ptr [ebp-0Dh]  +
mov byte ptr [ebp-4] 0Dh +
mov ecx [ebp-28h] +
cmp ecx ebx +
jz loc_1047589  +
call sub_101A986  +
mov [ebp-28h] ebx +
cmp [ebp-0Dh] bl +
jz loc_10475FB  +
mov esi [esi+8] +
mov esi [esi+8] +
push ebx  +
push dword ptr [ebp-2Ch]  +
push esi  +
call ds:SetupInstallServicesFromInfSectionW  +
test eax eax +
jnz loc_10475E5  +
mov byte ptr [ebp-4] 0Ch +
mov ecx [ebp-18h] +
cmp ecx ebx +
jz loc_10475B6  +
call sub_101A986  +
mov [ebp-18h] ebx +
xor esi esi +
mov byte ptr [ebp-4] 5 +
lea ecx [ebp-2Ch] +
call sub_1015174  +
mov [ebp-4] bl +
lea ecx [ebp-3Ch] +
mov [ebp-3Ch] edi +
call sub_10458BB  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
mov eax esi +
jmp loc_1047371  +
call ds:GetLastError  +
cmp eax 0BC2h +
jnz loc_10475FB  +
mov eax [ebp+0Ch] +
mov dword ptr [eax] 1 +
mov byte ptr [ebp-4] 0Ch +
mov ecx [ebp-18h] +
cmp ecx ebx +
jz loc_104760E  +
call sub_101A986  +
mov [ebp-18h] ebx +
xor esi esi +
inc esi  +
jmp loc_10475B8  +
***
call sub_1021EB9  +
mov edi ecx +
mov [ebp-70h] edi +
xor ebx ebx +
mov [ebp-10h] ebx +
mov [ebp-1Ch] ebx +
mov [ebp-4] ebx +
mov [ebp-34h] ebx +
mov byte ptr [ebp-4] 1 +
mov [ebp-30h] ebx +
mov byte ptr [ebp-4] 2 +
mov [ebp-2Ch] ebx +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-24h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-24h] +
call sub_1014FC6  +
mov esi [ebp+8] +
mov ecx esi +
call sub_1014FC6  +
mov eax [ebp+0Ch] +
cmp eax ebx +
jbe loc_1047A8F  +
cmp eax 5 +
jbe loc_1047A7A  +
cmp eax 6 +
jz loc_1047858  +
cmp eax 9 +
jz loc_104769B  +
cmp eax 0Ah +
jz loc_1047A7A  +
cmp eax 0Bh +
jnz loc_1047A8F  +
cmp eax 0Bh +
jnz loc_10476EA  +
push offset aClasscoinstall  +
lea ecx [ebp-3Ch] +
call sub_10161A7  +
mov byte ptr [ebp-4] 11h +
lea eax [ebp-3Ch] +
push eax  +
lea eax [ebp-38h] +
push eax  +
mov ecx edi +
call sub_1046BD3  +
mov byte ptr [ebp-4] 12h +
push dword ptr [eax]  +
lea ecx [ebp-1Ch] +
call sub_104B66E  +
mov byte ptr [ebp-4] 11h +
mov ecx [ebp-38h] +
cmp ecx ebx +
jz loc_10476E1  +
call sub_101A986  +
mov [ebp-38h] ebx +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-3Ch] +
jmp loc_104773B  +
cmp eax 9 +
jnz loc_1047A8F  +
push offset aDevicefilter  +
lea ecx [ebp-44h] +
call sub_10161A7  +
mov byte ptr [ebp-4] 13h +
lea eax [ebp-44h] +
push eax  +
lea eax [ebp-40h] +
push eax  +
mov ecx edi +
call sub_1046BD3  +
mov byte ptr [ebp-4] 14h +
push dword ptr [eax]  +
lea ecx [ebp-1Ch] +
call sub_104B66E  +
mov byte ptr [ebp-4] 13h +
mov ecx [ebp-40h] +
cmp ecx ebx +
jz loc_1047734  +
call sub_101A986  +
mov [ebp-40h] ebx +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-44h] +
call sub_1015174  +
cmp [ebp-1Ch] ebx +
jz loc_1047A8F  +
mov ecx [ebp-1Ch] +
lea eax [ebp-48h] +
push eax  +
call sub_104717E  +
mov byte ptr [ebp-4] 15h +
push dword ptr [eax]  +
lea ecx [ebp-30h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 4 +
mov ecx [ebp-48h] +
cmp ecx ebx +
jz loc_1047776  +
call sub_101A986  +
mov [ebp-48h] ebx +
mov ecx [ebp-30h] +
cmp ecx ebx +
jz loc_1047A8F  +
push 1  +
lea eax [ebp-68h] +
push eax  +
call sub_104657D  +
mov byte ptr [ebp-4] 16h +
push eax  +
lea ecx [ebp-24h] +
call sub_1015959  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-68h] +
call sub_1015174  +
mov eax [ebp-24h] +
cmp [eax-0Ch] ebx +
jz loc_1047A8F  +
lea eax [ebp-24h] +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
mov ecx edi +
call sub_1046BD3  +
mov byte ptr [ebp-4] 17h +
push dword ptr [eax]  +
lea ecx [ebp-34h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 4 +
mov ecx [ebp-4Ch] +
cmp ecx ebx +
jz loc_10477E1  +
call sub_101A986  +
mov [ebp-4Ch] ebx +
mov ecx [ebp-34h] +
cmp ecx ebx +
jz loc_1047A8F  +
lea eax [ebp-50h] +
push eax  +
call sub_104717E  +
mov byte ptr [ebp-4] 18h +
push dword ptr [eax]  +
lea ecx [ebp-2Ch] +
call sub_104B66E  +
mov byte ptr [ebp-4] 4 +
mov ecx [ebp-50h] +
cmp ecx ebx +
jz loc_1047816  +
call sub_101A986  +
mov [ebp-50h] ebx +
mov ecx [ebp-2Ch] +
cmp ecx ebx +
jz loc_1047A8F  +
push 1  +
lea eax [ebp-6Ch] +
push eax  +
call sub_10464ED  +
mov byte ptr [ebp-4] 19h +
push eax  +
mov ecx esi +
call sub_1015AAF  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-6Ch] +
call sub_1015174  +
mov eax [esi] +
mov eax [eax-0Ch] +
xor ecx ecx +
cmp eax ebx +
setnz cl  +
mov [ebp-10h] ecx +
jmp loc_1047A92  +
push offset aManufacturer  +
lea ecx [ebp-54h] +
call sub_10161A7  +
mov byte ptr [ebp-4] 5 +
lea eax [ebp-54h] +
push eax  +
lea eax [ebp-28h] +
push eax  +
mov ecx edi +
call sub_1046BD3  +
mov byte ptr [ebp-4] 7 +
lea ecx [ebp-54h] +
call sub_1015174  +
cmp [ebp-28h] ebx +
jz loc_1047A65  +
mov [ebp-20h] ebx +
mov byte ptr [ebp-4] 8 +
mov ecx [ebp-28h] +
lea eax [ebp-58h] +
push eax  +
call sub_104717E  +
mov byte ptr [ebp-4] 9 +
push dword ptr [eax]  +
lea ecx [ebp-20h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 8 +
mov ecx [ebp-58h] +
cmp ecx ebx +
jz loc_1047A0E  +
call sub_101A986  +
mov [ebp-58h] ebx +
jmp loc_1047A0E  +
push 1  +
mov ecx edi +
call sub_104586C  +
test al al +
jnz loc_10479E2  +
push ebx  +
lea eax [ebp-14h] +
push eax  +
mov ecx edi +
call sub_104657D  +
mov byte ptr [ebp-4] 0Bh +
call ds:GetLastError  +
test eax eax +
jnz loc_10479D6  +
mov eax [ebp-14h] +
cmp [eax-0Ch] ebx +
jz loc_10479D6  +
mov ecx [ebp-70h] +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
call sub_1046BD3  +
mov byte ptr [ebp-4] 0Ch +
cmp [ebp+0Ch] ebx +
jz loc_10479C3  +
mov [ebp-18h] ebx +
mov byte ptr [ebp-4] 0Dh +
mov ecx [ebp+0Ch] +
lea eax [ebp-5Ch] +
push eax  +
call sub_104717E  +
mov byte ptr [ebp-4] 0Eh +
push dword ptr [eax]  +
lea ecx [ebp-18h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 0Dh +
mov ecx [ebp-5Ch] +
cmp ecx ebx +
jz loc_10479B8  +
call sub_101A986  +
mov [ebp-5Ch] ebx +
jmp loc_10479B8  +
push 1  +
lea eax [ebp-74h] +
push eax  +
mov ecx esi +
call sub_10464ED  +
mov byte ptr [ebp-4] 10h +
mov ecx [ebp+8] +
push eax  +
call sub_1015AAF  +
mov byte ptr [ebp-4] 0Dh +
lea ecx [ebp-74h] +
call sub_1015174  +
mov eax [ebp+8] +
mov eax [eax] +
cmp [eax-0Ch] ebx +
jnz loc_1047A1B  +
lea eax [ebp-60h] +
push eax  +
mov ecx esi +
call sub_1046A71  +
mov byte ptr [ebp-4] 0Fh +
push dword ptr [eax]  +
lea ecx [ebp-18h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 0Dh +
mov ecx [ebp-60h] +
cmp ecx ebx +
jz loc_10479B8  +
call sub_101A986  +
mov [ebp-60h] ebx +
mov esi [ebp-18h] +
cmp esi ebx +
jnz loc_1047958  +
mov byte ptr [ebp-4] 0Ch +
mov byte ptr [ebp-4] 0Bh +
mov ecx [ebp+0Ch] +
cmp ecx ebx +
jz loc_10479D6  +
call sub_101A986  +
mov [ebp+0Ch] ebx +
mov byte ptr [ebp-4] 8 +
lea ecx [ebp-14h] +
call sub_1015174  +
lea eax [ebp-64h] +
push eax  +
mov ecx edi +
call sub_1046A71  +
mov byte ptr [ebp-4] 0Ah +
push dword ptr [eax]  +
lea ecx [ebp-20h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 8 +
mov ecx [ebp-64h] +
cmp ecx ebx +
jz loc_1047A0E  +
call sub_101A986  +
mov [ebp-64h] ebx +
mov edi [ebp-20h] +
cmp edi ebx +
jnz loc_10478CA  +
jmp loc_1047A53  +
mov dword ptr [ebp-10h] 1 +
mov byte ptr [ebp-4] 0Ch +
cmp esi ebx +
jz loc_1047A34  +
mov ecx esi +
call sub_101A986  +
mov [ebp-18h] ebx +
mov byte ptr [ebp-4] 0Bh +
mov ecx [ebp+0Ch] +
cmp ecx ebx +
jz loc_1047A47  +
call sub_101A986  +
mov [ebp+0Ch] ebx +
mov byte ptr [ebp-4] 8 +
lea ecx [ebp-14h] +
call sub_1015174  +
mov byte ptr [ebp-4] 7 +
cmp edi ebx +
jz loc_1047A65  +
mov ecx edi +
call sub_101A986  +
mov [ebp-20h] ebx +
mov byte ptr [ebp-4] 4 +
mov ecx [ebp-28h] +
cmp ecx ebx +
jz loc_1047A92  +
call sub_101A986  +
mov [ebp-28h] ebx +
jmp loc_1047A92  +
push offset aDefaultinstall  +
mov ecx esi +
call sub_10158CD  +
mov dword ptr [ebp-10h] 1 +
jmp loc_1047A92  +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-24h] +
call sub_1015174  +
mov byte ptr [ebp-4] 2 +
mov ecx [ebp-2Ch] +
cmp ecx ebx +
jz loc_1047AB1  +
call sub_101A986  +
mov [ebp-2Ch] ebx +
mov byte ptr [ebp-4] 1 +
mov ecx [ebp-30h] +
cmp ecx ebx +
jz loc_1047AC4  +
call sub_101A986  +
mov [ebp-30h] ebx +
mov [ebp-4] bl +
mov ecx [ebp-34h] +
cmp ecx ebx +
jz loc_1047AD6  +
call sub_101A986  +
mov [ebp-34h] ebx +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx [ebp-1Ch] +
cmp ecx ebx +
jz loc_1047AE9  +
call sub_101A986  +
mov [ebp-1Ch] ebx +
mov eax [ebp-10h] +
call sub_1021FA5  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [esi] +
and [ebp+var_4] 0 +
push edi  +
push esi  +
call dword ptr [eax+10h]  +
mov edi eax +
test edi edi +
jl loc_1047B42  +
cmp [ebp+arg_0] 0 +
jz loc_1047B42  +
mov eax [esi] +
lea ecx [ebp+var_4] +
push ecx  +
push offset dword_1013D70  +
push esi  +
call dword ptr [eax]  +
mov edi eax +
test edi edi +
jl loc_1047B42  +
mov eax [ebp+var_4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
mov edi eax +
mov eax [ebp+var_4] +
test eax eax +
jz loc_1047B42  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
call ds:CoUninitialize  +
mov eax edi +
pop edi  +
leave   +
retn 4  +
***
mov eax offset loc_105720F +
call sub_1021EB9  +
and dword ptr [ebp-10h] 0 +
push ecx  +
mov ecx [ebp+8] +
call sub_10151F2  +
and dword ptr [ebp-4] 0 +
mov dword ptr [ebp-10h] 1 +
mov eax [ebp+8] +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EB9  +
mov esi ecx +
mov [ebp-10h] esi +
mov edi [ebp+8] +
push edi  +
call sub_10151F2  +
and dword ptr [ebp-4] 0 +
mov eax [edi+4] +
mov [esi+4] eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax esi +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EB9  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
call sub_10151DA  +
mov byte ptr [ebp-4] 1 +
and dword ptr [esi+4] 0 +
lea eax [ebp+8] +
push eax  +
mov ecx esi +
call sub_1015959  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
mov eax esi +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EB9  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
call sub_10151DA  +
mov byte ptr [ebp-4] 1 +
mov eax [ebp+8] +
mov [esi+4] eax +
lea eax [ebp+0Ch] +
push eax  +
mov ecx esi +
call sub_1015959  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+0Ch] +
call sub_1015174  +
mov eax esi +
call sub_1021FA5  +
retn 8  +
***
call sub_1021EB9  +
xor ebx ebx +
lea ecx [ebp-14h] +
mov [ebp-10h] ebx +
mov [ebp-18h] ebx +
call sub_10151DA  +
mov [ebp-4] ebx +
push ebx  +
mov [ebp-1Ch] ebx +
mov [edi] ebx +
call ds:CoInitialize  +
mov esi eax +
cmp esi ebx +
jl loc_1047D7E  +
lea eax [ebp-10h] +
push eax  +
push offset stru_1013D60  +
push 1  +
push ebx  +
push offset stru_1013DA0  +
call ds:CoCreateInstance  +
mov esi eax +
cmp esi ebx +
jl loc_1047D3A  +
cmp [ebp+8] ebx +
jz loc_1047CEA  +
mov eax [ebp-10h] +
mov ecx [eax] +
lea edx [ebp-18h] +
push edx  +
push offset dword_1013D70  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
cmp esi ebx +
jl loc_1047D18  +
mov eax [ebp-18h] +
mov ecx [eax] +
lea edx [ebp-1Ch] +
push edx  +
push dword ptr [ebp+0Ch]  +
push 1388h  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
cmp esi 1 +
jnz loc_1047CEA  +
mov esi 8004A024h +
cmp esi ebx +
jl loc_1047D18  +
mov eax [ebp-10h] +
mov ecx [eax] +
push ebx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
cmp esi ebx +
jl loc_1047D0B  +
mov eax [ebp-10h] +
mov [edi] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
jmp loc_1047D18  +
mov eax [ebp-18h] +
cmp eax ebx +
jz loc_1047D25  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
mov eax [ebp-18h] +
cmp eax ebx +
jz loc_1047D25  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-10h] +
cmp eax ebx +
jz loc_1047D32  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp esi ebx +
jge loc_1047DCC  +
cmp esi 8004A024h +
jnz loc_1047D66  +
cmp [ebp-1Ch] ebx +
jz loc_1047D66  +
push dword ptr [ebp-1Ch]  +
lea eax [ebp-14h] +
push offset aCouldNotAcquir  +
push eax  +
call sub_1015A11  +
add esp 0Ch +
push dword ptr [ebp-1Ch]  +
call ds:CoTaskMemFree  +
jmp loc_1047D76  +
lea eax [ebp-14h] +
push offset aUnableToGetIne  +
push eax  +
call sub_1015A11  +
pop ecx  +
pop ecx  +
call ds:CoUninitialize  +
jmp loc_1047D8E  +
lea eax [ebp-14h] +
push offset aUnableToInitia  +
push eax  +
call sub_1015A11  +
pop ecx  +
pop ecx  +
cmp esi ebx +
jge loc_1047DCC  +
push ecx  +
lea eax [ebp-14h] +
mov ecx esp +
mov [ebp+8] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 1 +
push esi  +
mov [ebp-4] bl +
lea ecx [ebp-2Ch] +
call sub_1047C0D  +
mov byte ptr [ebp-4] 2 +
push eax  +
lea ecx [ebp-24h] +
call sub_1047B8E  +
push offset dword_105F600  +
lea eax [ebp-24h] +
push eax  +
call sub_10212E6  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call sub_1015174  +
call sub_1021FA5  +
retn 8  +
***
call sub_1021EB9  +
push 6  +
pop ecx  +
xor eax eax +
lea edi [ebp-3Ch] +
stos   +
mov eax [ebp+18h] +
mov [ebp-34h] eax +
mov eax [ebp+14h] +
lea ecx [ebp-10h] +
push ecx  +
push offset dword_1013D90  +
push dword ptr [ebp+0Ch]  +
mov [ebp-30h] eax +
mov eax [ebp+1Ch] +
xor ebx ebx +
mov [ebp-2Ch] eax +
mov eax [edx] +
push edx  +
mov [ebp-10h] ebx +
mov [ebp-14h] ebx +
mov dword ptr [ebp-3Ch] 3 +
call dword ptr [eax+24h]  +
mov esi eax +
cmp esi ebx +
jl loc_1047E83  +
mov eax [ebp-10h] +
mov ecx [eax] +
lea edx [ebp-14h] +
push edx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
lea edx [ebp-3Ch] +
push edx  +
push dword ptr [ebp+8]  +
push eax  +
call dword ptr [ecx+10h]  +
mov esi eax +
cmp esi 4A020h +
jnz loc_1047E61  +
mov eax [ebp+10h] +
mov dword ptr [eax] 1 +
xor esi esi +
cmp esi ebx +
jl loc_1047E72  +
mov eax [ebp-14h] +
cmp eax ebx +
jz loc_1047E72  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-10h] +
cmp eax ebx +
jz loc_1047E7F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp esi ebx +
jge loc_1047EDA  +
lea ecx [ebp+18h] +
call sub_10151DA  +
mov [ebp-4] ebx +
push dword ptr [ebp+8]  +
lea eax [ebp+18h] +
push offset aUnableToInstal  +
push eax  +
call sub_1015A11  +
pop ecx  +
pop ecx  +
lea eax [ebp+18h] +
mov ecx esp +
mov [ebp+8] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 1 +
push esi  +
mov [ebp-4] bl +
lea ecx [ebp-24h] +
call sub_1047C0D  +
mov byte ptr [ebp-4] 2 +
push eax  +
lea ecx [ebp-1Ch] +
call sub_1047B8E  +
push offset dword_105F600  +
lea eax [ebp-1Ch] +
push eax  +
call sub_10212E6  +
call sub_1021FA5  +
retn 18h  +
***
call sub_1021F2C  +
mov eax [ebp+8] +
mov [ebp-3Ch] eax +
mov eax [ebp+0Ch] +
mov edi ecx +
mov [ebp-44h] eax +
mov eax [ebp+10h] +
lea ecx [ebp-24h] +
mov [ebp-28h] edi +
mov ebx edx +
mov [ebp-34h] eax +
call sub_10151DA  +
and dword ptr [ebp-4] 0 +
mov eax [esi] +
lea ecx [ebp-2Ch] +
push ecx  +
push edi  +
push esi  +
call dword ptr [eax+20h]  +
mov edi eax +
test edi edi +
jnz loc_1048068  +
mov eax [ebp-2Ch] +
mov ecx [eax] +
lea edx [ebp-20h] +
push edx  +
push eax  +
call dword ptr [ecx+28h]  +
mov edi eax +
test edi edi +
jl loc_1048045  +
mov eax [esi] +
lea ecx [ebp-38h] +
push ecx  +
push offset dword_1013D80  +
lea ecx [ebp-20h] +
push ecx  +
push esi  +
call dword ptr [eax+24h]  +
mov edi eax +
test edi edi +
jl loc_104803B  +
mov eax [ebp-38h] +
mov ecx [eax] +
lea edx [ebp-30h] +
push edx  +
push offset dword_1013D90  +
push eax  +
call dword ptr [ecx]  +
mov edi eax +
test edi edi +
jl loc_104801C  +
push 6  +
pop ecx  +
xor eax eax +
lea edi [ebp-60h] +
stos   +
mov eax [ebp-44h] +
push 0  +
mov [ebp-58h] eax +
mov eax [ebp-34h] +
lea edx [ebp-60h] +
push edx  +
push dword ptr [ebp-2Ch]  +
mov [ebp-50h] eax +
mov eax [ebp-30h] +
mov dword ptr [ebp-60h] 3 +
mov [ebp-54h] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
mov edi eax +
mov ebx 4A020h +
cmp edi ebx +
jnz loc_1047FC6  +
mov eax [ebp-3Ch] +
mov dword ptr [eax] 1 +
xor edi edi +
test edi edi +
jl loc_1047FF9  +
mov eax [esi] +
push esi  +
call dword ptr [eax+14h]  +
mov edi eax +
test edi edi +
jge loc_1047FEA  +
push dword ptr [ebp-28h]  +
lea eax [ebp-24h] +
push offset aCouldnTApplyTh  +
push eax  +
call sub_1015A11  +
add esp 0Ch +
cmp edi ebx +
jnz loc_104800D  +
mov eax [ebp-3Ch] +
mov dword ptr [eax] 1 +
jmp loc_104800D  +
push dword ptr [ebp-28h]  +
lea eax [ebp-24h] +
push offset aFailedToUnin_2  +
push eax  +
call sub_1015A11  +
add esp 0Ch +
mov eax [ebp-30h] +
test eax eax +
jz loc_104802C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_104802C  +
lea eax [ebp-24h] +
push offset aCouldnTGetAnIn  +
push eax  +
call sub_1015A11  +
pop ecx  +
pop ecx  +
mov eax [ebp-38h] +
test eax eax +
jz loc_1048059  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1048059  +
push dword ptr [ebp-28h]  +
push offset aCouldnTGetAPoi  +
jmp loc_104804D  +
push dword ptr [ebp-28h]  +
push offset aCouldnTGetTheC  +
lea eax [ebp-24h] +
push eax  +
call sub_1015A11  +
add esp 0Ch +
mov eax [ebp-2Ch] +
test eax eax +
jz loc_104807C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_104807C  +
push dword ptr [ebp-28h]  +
lea eax [ebp-24h] +
push offset aCouldnTFindAnI  +
push eax  +
call sub_1015A11  +
add esp 0Ch +
test edi edi +
jge loc_10480BB  +
push ecx  +
lea eax [ebp-24h] +
mov ecx esp +
mov [ebp-34h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 1 +
push edi  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-40h] +
call sub_1047C0D  +
mov byte ptr [ebp-4] 2 +
push eax  +
lea ecx [ebp-48h] +
call sub_1047B8E  +
push offset dword_105F600  +
lea eax [ebp-48h] +
push eax  +
call sub_10212E6  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-24h] +
call sub_1015174  +
call sub_1021FBE  +
retn 0Ch  +
***
call sub_1021EB9  +
xor ebx ebx +
mov [ebp-4] ebx +
mov [ebp-1Ch] ebx +
mov byte ptr [ebp-4] 1 +
mov [ebp-14h] ebx +
mov byte ptr [ebp-4] 2 +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-1Ch] +
call sub_103ECE0  +
mov ecx [ebp-1Ch] +
lea eax [ebp+8] +
push eax  +
call sub_1046459  +
cmp esi ebx +
jz loc_104834D  +
push offset aVersion  +
lea ecx [ebp-24h] +
call sub_10161A7  +
mov byte ptr [ebp-4] 4 +
mov ecx [ebp-1Ch] +
lea eax [ebp-24h] +
push eax  +
lea eax [ebp-20h] +
push eax  +
call sub_1046BD3  +
mov byte ptr [ebp-4] 5 +
push dword ptr [eax]  +
lea ecx [ebp-14h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 4 +
mov ecx [ebp-20h] +
cmp ecx ebx +
jz loc_1048158  +
call sub_101A986  +
mov [ebp-20h] ebx +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-24h] +
call sub_1015174  +
cmp [ebp-14h] ebx +
jnz loc_10481C1  +
lea ecx [ebp-24h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 6 +
push dword ptr [ebp+8]  +
lea eax [ebp-24h] +
push offset aCouldNotFindVe  +
push eax  +
call sub_1015A11  +
pop ecx  +
pop ecx  +
lea eax [ebp-24h] +
mov ecx esp +
mov [ebp-20h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 7 +
mov byte ptr [ebp-4] 6 +
lea ecx [ebp-34h] +
call sub_1047BC5  +
mov byte ptr [ebp-4] 8 +
push eax  +
lea ecx [ebp-2Ch] +
call sub_1047B8E  +
push offset dword_105F600  +
lea eax [ebp-2Ch] +
push eax  +
call sub_10212E6  +
push offset aClass  +
lea ecx [ebp-20h] +
call sub_10161A7  +
mov byte ptr [ebp-4] 9 +
mov ecx [ebp-14h] +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-24h] +
push eax  +
call sub_1046D41  +
mov byte ptr [ebp-4] 0Ah +
push dword ptr [eax]  +
lea ecx [ebp-10h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 9 +
mov ecx [ebp-24h] +
cmp ecx ebx +
jz loc_1048203  +
call sub_101A986  +
mov [ebp-24h] ebx +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-20h] +
call sub_1015174  +
cmp [ebp-10h] ebx +
jnz loc_104825A  +
lea ecx [ebp-24h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 0Bh +
push dword ptr [ebp+8]  +
lea eax [ebp-24h] +
push offset aCouldNotFindCl  +
push eax  +
call sub_1015A11  +
pop ecx  +
pop ecx  +
lea eax [ebp-24h] +
mov ecx esp +
mov [ebp-20h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 0Ch +
mov byte ptr [ebp-4] 0Bh +
lea ecx [ebp-34h] +
call sub_1047BC5  +
mov byte ptr [ebp-4] 0Dh +
jmp loc_10481AA  +
lea ecx [ebp-18h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 0Eh +
mov ecx [ebp-10h] +
push 1  +
lea eax [ebp-24h] +
push eax  +
call sub_10464ED  +
mov byte ptr [ebp-4] 0Fh +
push eax  +
lea ecx [ebp-18h] +
call sub_1015959  +
mov byte ptr [ebp-4] 0Eh +
lea ecx [ebp-24h] +
call sub_1015174  +
mov eax [ebp-18h] +
cmp [eax-0Ch] ebx +
jnz loc_10482DB  +
lea ecx [ebp-24h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 10h +
push dword ptr [ebp+8]  +
lea eax [ebp-24h] +
push offset aCouldNotGetT_1  +
push eax  +
call sub_1015A11  +
pop ecx  +
pop ecx  +
lea eax [ebp-24h] +
mov ecx esp +
mov [ebp-20h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 11h +
mov byte ptr [ebp-4] 10h +
lea ecx [ebp-34h] +
call sub_1047BC5  +
mov byte ptr [ebp-4] 12h +
jmp loc_10481AA  +
push offset aNet  +
lea ecx [ebp-18h] +
call sub_101492B  +
test eax eax +
jnz loc_10482F4  +
mov dword ptr [esi] offset dword_1013DB0 +
jmp loc_1048341  +
push offset aNettrans  +
lea ecx [ebp-18h] +
call sub_101492B  +
test eax eax +
jnz loc_104830D  +
mov dword ptr [esi] offset dword_1013DE0 +
jmp loc_1048341  +
push offset aNetclient  +
lea ecx [ebp-18h] +
call sub_101492B  +
test eax eax +
jnz loc_1048326  +
mov dword ptr [esi] offset dword_1013DC0 +
jmp loc_1048341  +
push offset aNetservice  +
lea ecx [ebp-18h] +
call sub_101492B  +
test eax eax +
jnz loc_10483F4  +
mov dword ptr [esi] offset dword_1013DD0 +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-18h] +
call sub_1015174  +
cmp [edi] ebx +
jz loc_1048650  +
push offset aManufacturer  +
lea ecx [ebp-20h] +
call sub_10161A7  +
mov byte ptr [ebp-4] 16h +
mov ecx [ebp-1Ch] +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-24h] +
push eax  +
call sub_1046BD3  +
mov byte ptr [ebp-4] 17h +
push dword ptr [eax]  +
lea ecx [ebp-14h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 16h +
mov ecx [ebp-24h] +
cmp ecx ebx +
jz loc_1048397  +
call sub_101A986  +
mov [ebp-24h] ebx +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-20h] +
call sub_1015174  +
mov ecx [ebp-14h] +
cmp ecx ebx +
jnz loc_104843A  +
lea ecx [ebp-24h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 18h +
push dword ptr [ebp+8]  +
lea eax [ebp-24h] +
push offset aCouldNotFindTh  +
push eax  +
call sub_1015A11  +
pop ecx  +
pop ecx  +
lea eax [ebp-24h] +
mov ecx esp +
mov [ebp-20h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 19h +
mov byte ptr [ebp-4] 18h +
lea ecx [ebp-34h] +
call sub_1047BC5  +
mov byte ptr [ebp-4] 1Ah +
jmp loc_10481AA  +
lea ecx [ebp-24h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 13h +
push dword ptr [ebp-18h]  +
lea eax [ebp-24h] +
push offset aTheClassWsInTh  +
push eax  +
call sub_1015A11  +
pop ecx  +
pop ecx  +
lea eax [ebp-24h] +
mov ecx esp +
mov [ebp-20h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 14h +
mov byte ptr [ebp-4] 13h +
lea ecx [ebp-34h] +
call sub_1047BC5  +
mov byte ptr [ebp-4] 15h +
jmp loc_10481AA  +
lea eax [ebp-24h] +
push eax  +
call sub_104717E  +
mov byte ptr [ebp-4] 1Bh +
push dword ptr [eax]  +
lea ecx [ebp-10h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 3 +
mov ecx [ebp-24h] +
cmp ecx ebx +
jz loc_1048464  +
call sub_101A986  +
mov [ebp-24h] ebx +
cmp [ebp-10h] ebx +
jnz loc_10484AF  +
lea ecx [ebp-24h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 1Ch +
push dword ptr [ebp+8]  +
lea eax [ebp-24h] +
push offset aCouldNotFindAn  +
push eax  +
call sub_1015A11  +
pop ecx  +
pop ecx  +
lea eax [ebp-24h] +
mov ecx esp +
mov [ebp-20h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 1Dh +
mov byte ptr [ebp-4] 1Ch +
lea ecx [ebp-34h] +
call sub_1047BC5  +
mov byte ptr [ebp-4] 1Eh +
jmp loc_10481AA  +
mov ecx [ebp-10h] +
push ebx  +
lea eax [ebp-20h] +
push eax  +
call sub_104657D  +
mov byte ptr [ebp-4] 1Fh +
mov ecx [ebp-1Ch] +
push eax  +
lea eax [ebp-24h] +
push eax  +
call sub_1046BD3  +
mov byte ptr [ebp-4] 20h +
push dword ptr [eax]  +
lea ecx [ebp-14h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 1Fh +
mov ecx [ebp-24h] +
cmp ecx ebx +
jz loc_10484EE  +
call sub_101A986  +
mov [ebp-24h] ebx +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-20h] +
call sub_1015174  +
mov ecx [ebp-14h] +
cmp ecx ebx +
jnz loc_1048569  +
lea ecx [ebp-24h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 21h +
mov ecx [ebp-10h] +
push 1  +
lea eax [ebp-20h] +
push eax  +
call sub_10464ED  +
mov byte ptr [ebp-4] 22h +
push dword ptr [ebp+8]  +
push dword ptr [eax]  +
lea eax [ebp-24h] +
push offset aCouldNotFindMo  +
push eax  +
call sub_1015A11  +
add esp 10h +
mov byte ptr [ebp-4] 21h +
lea ecx [ebp-20h] +
call sub_1015174  +
push ecx  +
lea eax [ebp-24h] +
mov ecx esp +
mov [ebp-20h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 23h +
mov byte ptr [ebp-4] 21h +
lea ecx [ebp-34h] +
call sub_1047BC5  +
mov byte ptr [ebp-4] 24h +
jmp loc_10481AA  +
lea eax [ebp-24h] +
push eax  +
call sub_104717E  +
mov byte ptr [ebp-4] 25h +
push dword ptr [eax]  +
lea ecx [ebp-10h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 3 +
mov ecx [ebp-24h] +
cmp ecx ebx +
jz loc_1048593  +
call sub_101A986  +
mov [ebp-24h] ebx +
mov ecx [ebp-10h] +
cmp ecx ebx +
jnz loc_10485E0  +
lea ecx [ebp-24h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 26h +
push dword ptr [ebp+8]  +
lea eax [ebp-24h] +
push offset aCouldNotFind_0  +
push eax  +
call sub_1015A11  +
pop ecx  +
pop ecx  +
lea eax [ebp-24h] +
mov ecx esp +
mov [ebp-20h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 27h +
mov byte ptr [ebp-4] 26h +
lea ecx [ebp-34h] +
call sub_1047BC5  +
mov byte ptr [ebp-4] 28h +
jmp loc_10481AA  +
push 2  +
lea eax [ebp-24h] +
push eax  +
call sub_10464ED  +
mov byte ptr [ebp-4] 29h +
push eax  +
mov ecx edi +
call sub_1015AAF  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-24h] +
call sub_1015174  +
mov eax [edi] +
cmp [eax-0Ch] ebx +
jnz loc_1048650  +
lea ecx [ebp-24h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 2Ah +
push dword ptr [ebp+8]  +
lea eax [ebp-24h] +
push offset aCouldNotGetDev  +
push eax  +
call sub_1015A11  +
pop ecx  +
pop ecx  +
lea eax [ebp-24h] +
mov ecx esp +
mov [ebp-20h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 2Bh +
mov byte ptr [ebp-4] 2Ah +
lea ecx [ebp-34h] +
call sub_1047BC5  +
mov byte ptr [ebp-4] 2Ch +
jmp loc_10481AA  +
mov byte ptr [ebp-4] 2 +
mov ecx [ebp-10h] +
cmp ecx ebx +
jz loc_1048663  +
call sub_101A986  +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 1 +
mov ecx [ebp-14h] +
cmp ecx ebx +
jz loc_1048676  +
call sub_101A986  +
mov [ebp-14h] ebx +
mov [ebp-4] bl +
mov ecx [ebp-1Ch] +
cmp ecx ebx +
jz loc_1048688  +
call sub_101A986  +
mov [ebp-1Ch] ebx +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EF1  +
mov ebx [ebp+8] +
and dword ptr [ebp-1Ch] 0 +
and dword ptr [ebp-4] 0 +
push dword ptr [ebx]  +
push offset aInstallingNetw  +
push 1  +
call sub_103AC75  +
add esp 0Ch +
push offset aDifxlib  +
push 1  +
lea edi [ebp-24h] +
call sub_1047C57  +
lea ecx [ebp-14h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 1 +
lea edi [ebp-14h] +
lea esi [ebp-20h] +
push ecx  +
mov ecx esp +
mov [ebp-20h] esp +
push ebx  +
call sub_10151F2  +
mov byte ptr [ebp-4] 2 +
mov byte ptr [ebp-4] 1 +
call sub_10480D4  +
and dword ptr [ebp-18h] 0 +
push 0C9h  +
mov ecx edi +
call sub_10158A3  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
lea ecx [ebp-18h] +
push ecx  +
push dword ptr [ebp-20h]  +
push eax  +
mov esi [ebp-24h] +
mov edx esi +
call sub_1047DE5  +
push 0FFFFFFFFh  +
mov ecx edi +
call sub_1015023  +
xor ebx ebx +
inc ebx  +
cmp dword ptr [ebp-18h] 0 +
jz loc_1048745  +
mov eax [ebp+0Ch] +
mov [eax] ebx +
mov eax [esi] +
push esi  +
call dword ptr [eax+14h]  +
mov edi eax +
test edi edi +
jge loc_10487AA  +
lea ecx [ebp+0Ch] +
call sub_10151DA  +
mov byte ptr [ebp-4] 3 +
push dword ptr [ebp-14h]  +
push offset aUnableToInstal  +
lea eax [ebp+0Ch] +
push eax  +
call sub_1015A11  +
pop ecx  +
pop ecx  +
mov ecx esp +
mov [ebp+18h] esp +
lea eax [ebp+0Ch] +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 4 +
push edi  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-28h] +
call sub_1047C0D  +
mov byte ptr [ebp-4] 5 +
push eax  +
lea ecx [ebp-38h] +
call sub_1047B8E  +
push offset dword_105F600  +
lea eax [ebp-38h] +
push eax  +
call sub_10212E6  +
cmp edi 4A020h +
jnz loc_10487B7  +
mov eax [ebp+0Ch] +
mov [eax] ebx +
push ebx  +
call sub_1047AF9  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-14h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax [ebp-1Ch] +
call sub_1021FA5  +
retn 14h  +
***
push 3  +
call sub_103AC75  +
add esp 14h +
jmp loc_104885E  +
push offset aErrorEncount_2  +
push 3  +
call sub_103AC75  +
add esp 10h +
mov byte ptr [ebp-4] 8 +
lea ecx [ebp+0Ch] +
call sub_1015174  +
mov byte ptr [ebp-4] 7 +
lea ecx [ebp+14h] +
call sub_1015174  +
mov byte ptr [ebp-4] 6 +
lea ecx [ebp-30h] +
call sub_10427F9  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_10487CD +
retn   +
***
call sub_1021EB9  +
xor ebx ebx +
mov [ebp-4] ebx +
mov [ebp-1Ch] ebx +
mov byte ptr [ebp-4] 1 +
mov [ebp-14h] ebx +
mov byte ptr [ebp-4] 2 +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-1Ch] +
call sub_103ECE0  +
mov esi [ebp-1Ch] +
lea eax [ebp+8] +
push eax  +
mov ecx esi +
call sub_1046459  +
push offset aManufacturer  +
lea ecx [ebp-24h] +
call sub_10161A7  +
mov byte ptr [ebp-4] 4 +
lea eax [ebp-24h] +
push eax  +
lea eax [ebp-28h] +
push eax  +
mov ecx esi +
call sub_1046BD3  +
mov byte ptr [ebp-4] 5 +
push dword ptr [eax]  +
lea ecx [ebp-14h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 4 +
mov ecx [ebp-28h] +
cmp ecx ebx +
jz loc_104890E  +
call sub_101A986  +
mov [ebp-28h] ebx +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-24h] +
call sub_1015174  +
mov ecx [ebp-14h] +
cmp ecx ebx +
jnz loc_1048979  +
lea ecx [ebp+0Ch] +
call sub_10151DA  +
mov byte ptr [ebp-4] 6 +
push dword ptr [ebp+8]  +
lea eax [ebp+0Ch] +
push offset aCouldNotFindTh  +
push eax  +
call sub_1015A11  +
pop ecx  +
pop ecx  +
lea eax [ebp+0Ch] +
mov ecx esp +
mov [ebp-38h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 7 +
mov byte ptr [ebp-4] 6 +
lea ecx [ebp-2Ch] +
call sub_1047BC5  +
mov byte ptr [ebp-4] 8 +
push eax  +
lea ecx [ebp-34h] +
call sub_1047B8E  +
push offset dword_105F600  +
lea eax [ebp-34h] +
push eax  +
call sub_10212E6  +
lea eax [ebp-28h] +
push eax  +
call sub_104717E  +
mov byte ptr [ebp-4] 9 +
push dword ptr [eax]  +
lea ecx [ebp-10h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 3 +
mov ecx [ebp-28h] +
cmp ecx ebx +
jz loc_10489A3  +
call sub_101A986  +
mov [ebp-28h] ebx +
cmp [ebp-10h] ebx +
jnz loc_10489EE  +
lea ecx [ebp+0Ch] +
call sub_10151DA  +
mov byte ptr [ebp-4] 0Ah +
push dword ptr [ebp+8]  +
lea eax [ebp+0Ch] +
push offset aCouldNotFindAn  +
push eax  +
call sub_1015A11  +
pop ecx  +
pop ecx  +
lea eax [ebp+0Ch] +
mov ecx esp +
mov [ebp-38h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 0Bh +
mov byte ptr [ebp-4] 0Ah +
lea ecx [ebp-2Ch] +
call sub_1047BC5  +
mov byte ptr [ebp-4] 0Ch +
jmp loc_1048962  +
mov ecx [ebp-10h] +
push ebx  +
lea eax [ebp-38h] +
push eax  +
call sub_104657D  +
mov byte ptr [ebp-4] 0Dh +
push eax  +
lea eax [ebp-28h] +
push eax  +
mov ecx esi +
call sub_1046BD3  +
mov byte ptr [ebp-4] 0Eh +
push dword ptr [eax]  +
lea ecx [ebp-14h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 0Dh +
mov ecx [ebp-28h] +
cmp ecx ebx +
jz loc_1048A2C  +
call sub_101A986  +
mov [ebp-28h] ebx +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-38h] +
call sub_1015174  +
mov ecx [ebp-14h] +
cmp ecx ebx +
jnz loc_1048AA7  +
lea ecx [ebp+0Ch] +
call sub_10151DA  +
mov byte ptr [ebp-4] 0Fh +
mov ecx [ebp-10h] +
push 1  +
lea eax [ebp-38h] +
push eax  +
call sub_10464ED  +
mov byte ptr [ebp-4] 10h +
push dword ptr [ebp+8]  +
push dword ptr [eax]  +
lea eax [ebp+0Ch] +
push offset aCouldNotFindMo  +
push eax  +
call sub_1015A11  +
add esp 10h +
mov byte ptr [ebp-4] 0Fh +
lea ecx [ebp-38h] +
call sub_1015174  +
push ecx  +
lea eax [ebp+0Ch] +
mov ecx esp +
mov [ebp-38h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 11h +
mov byte ptr [ebp-4] 0Fh +
lea ecx [ebp-2Ch] +
call sub_1047BC5  +
mov byte ptr [ebp-4] 12h +
jmp loc_1048962  +
lea eax [ebp-28h] +
push eax  +
call sub_104717E  +
mov byte ptr [ebp-4] 13h +
push dword ptr [eax]  +
lea ecx [ebp-10h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 3 +
mov ecx [ebp-28h] +
cmp ecx ebx +
jz loc_1048AD1  +
call sub_101A986  +
mov [ebp-28h] ebx +
cmp [ebp-10h] ebx +
jnz loc_1048B1C  +
lea ecx [ebp+0Ch] +
call sub_10151DA  +
mov byte ptr [ebp-4] 14h +
push dword ptr [ebp+8]  +
lea eax [ebp+0Ch] +
push offset aCouldNotFind_0  +
push eax  +
call sub_1015A11  +
pop ecx  +
pop ecx  +
lea eax [ebp+0Ch] +
mov ecx esp +
mov [ebp-38h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 15h +
mov byte ptr [ebp-4] 14h +
lea ecx [ebp-2Ch] +
call sub_1047BC5  +
mov byte ptr [ebp-4] 16h +
jmp loc_1048962  +
lea ecx [ebp-18h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 17h +
mov ecx [ebp-10h] +
xor edi edi +
inc edi  +
push edi  +
lea eax [ebp-38h] +
push eax  +
call sub_10464ED  +
mov byte ptr [ebp-4] 18h +
push eax  +
lea ecx [ebp-18h] +
call sub_1015959  +
mov byte ptr [ebp-4] 17h +
lea ecx [ebp-38h] +
call sub_1015174  +
mov eax [ebp-18h] +
cmp [eax-0Ch] ebx +
jnz loc_1048B9F  +
lea ecx [ebp+0Ch] +
call sub_10151DA  +
mov byte ptr [ebp-4] 19h +
push dword ptr [ebp+8]  +
lea eax [ebp+0Ch] +
push offset aCouldNotGetIns  +
push eax  +
call sub_1015A11  +
pop ecx  +
pop ecx  +
lea eax [ebp+0Ch] +
mov ecx esp +
mov [ebp-38h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 1Ah +
mov byte ptr [ebp-4] 19h +
lea ecx [ebp-2Ch] +
call sub_1047BC5  +
mov byte ptr [ebp-4] 1Bh +
jmp loc_1048962  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-28h] +
push eax  +
mov ecx esi +
call sub_1046C8D  +
mov byte ptr [ebp-4] 1Ch +
push dword ptr [eax]  +
lea ecx [ebp-14h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 17h +
mov ecx [ebp-28h] +
cmp ecx ebx +
jz loc_1048BCF  +
call sub_101A986  +
mov [ebp-28h] ebx +
mov eax [ebp-14h] +
cmp eax ebx +
jnz loc_1048C1C  +
lea ecx [ebp+0Ch] +
call sub_10151DA  +
mov byte ptr [ebp-4] 1Dh +
push dword ptr [ebp+8]  +
lea eax [ebp+0Ch] +
push offset aCouldNotFindAc  +
push eax  +
call sub_1015A11  +
pop ecx  +
pop ecx  +
lea eax [ebp+0Ch] +
mov ecx esp +
mov [ebp-38h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 1Eh +
mov byte ptr [ebp-4] 1Dh +
lea ecx [ebp-2Ch] +
call sub_1047BC5  +
mov byte ptr [ebp-4] 1Fh +
jmp loc_1048962  +
add eax 0Ch +
push eax  +
lea ecx [ebp-18h] +
call sub_1015959  +
push offset a_remove_servic  +
lea ecx [ebp-18h] +
call sub_1018C3E  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-28h] +
push eax  +
mov ecx esi +
call sub_1046BD3  +
mov byte ptr [ebp-4] 20h +
push dword ptr [eax]  +
lea ecx [ebp-14h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 17h +
mov ecx [ebp-28h] +
cmp ecx ebx +
jz loc_1048C65  +
call sub_101A986  +
mov [ebp-28h] ebx +
cmp [ebp-14h] ebx +
jnz loc_1048C8A  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-18h] +
call sub_1015174  +
mov byte ptr [ebp-4] 2 +
mov ecx [ebp-10h] +
call sub_101A986  +
mov [ebp-10h] ebx +
jmp loc_1048E43  +
push offset aDelservice  +
lea ecx [ebp-24h] +
call sub_10161A7  +
mov byte ptr [ebp-4] 21h +
mov ecx [ebp-14h] +
lea eax [ebp-24h] +
push eax  +
lea eax [ebp-28h] +
push eax  +
call sub_1046D41  +
mov byte ptr [ebp-4] 22h +
push dword ptr [eax]  +
lea ecx [ebp-10h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 21h +
mov ecx [ebp-28h] +
cmp ecx ebx +
jz loc_1048CCC  +
call sub_101A986  +
mov [ebp-28h] ebx +
mov byte ptr [ebp-4] 17h +
lea ecx [ebp-24h] +
call sub_1015174  +
cmp [ebp-10h] ebx +
jz loc_1048E28  +
lea ecx [ebp-50h] +
call sub_1014C71  +
mov byte ptr [ebp-4] 23h +
mov ecx [ebp-10h] +
push edi  +
lea eax [ebp-24h] +
push eax  +
call sub_10464ED  +
mov byte ptr [ebp-4] 24h +
mov eax [ebp-24h] +
cmp [eax-0Ch] ebx +
jz loc_1048D0F  +
push eax  +
lea ecx [ebp-50h] +
call sub_10172FC  +
mov ecx [ebp-10h] +
lea eax [ebp-28h] +
push eax  +
call sub_1046A71  +
mov byte ptr [ebp-4] 25h +
push dword ptr [eax]  +
lea ecx [ebp-10h] +
call sub_104B66E  +
mov byte ptr [ebp-4] 24h +
mov ecx [ebp-28h] +
cmp ecx ebx +
jz loc_1048D3C  +
call sub_101A986  +
mov [ebp-28h] ebx +
mov byte ptr [ebp-4] 23h +
lea ecx [ebp-24h] +
call sub_1015174  +
cmp [ebp-10h] ebx +
jnz loc_1048CED  +
push 0E0000000h  +
push ebx  +
push ebx  +
call ds:OpenSCManagerW  +
mov [ebp-38h] eax +
cmp eax ebx +
jz loc_1048E1C  +
mov [ebp-28h] edi +
mov edi ds:CloseServiceHandle +
mov [ebp-20h] ebx +
mov eax [ebp-50h] +
mov [ebp-30h] eax +
cmp eax ebx +
jz loc_1048E05  +
mov dword ptr [ebp-28h] 1 +
lea eax [ebp-30h] +
push eax  +
lea ecx [ebp-50h] +
call sub_105038C  +
push eax  +
lea ecx [ebp-24h] +
call sub_10151F2  +
mov byte ptr [ebp-4] 26h +
push 80000000h  +
push dword ptr [ebp-24h]  +
push dword ptr [ebp-38h]  +
call ds:OpenServiceW  +
mov esi eax +
cmp esi ebx +
jnz loc_1048DC9  +
mov byte ptr [ebp-4] 23h +
lea ecx [ebp-24h] +
call sub_1015174  +
cmp [ebp-30h] ebx +
jnz loc_1048D86  +
jmp loc_1048E02  +
lea eax [ebp-6Ch] +
push eax  +
push esi  +
mov [ebp-28h] ebx +
call ds:QueryServiceStatus  +
push esi  +
call edi  +
cmp dword ptr [ebp-20h] 0Ch +
jnz loc_1048DEB  +
mov eax [ebp+0Ch] +
mov dword ptr [eax] 1 +
jmp loc_1048DF6  +
push 1388h  +
call ds:Sleep  +
mov byte ptr [ebp-4] 23h +
lea ecx [ebp-24h] +
call sub_1015174  +
mov esi [ebp-1Ch] +
inc dword ptr [ebp-20h]  +
cmp [ebp-28h] ebx +
jnz loc_1048E17  +
cmp dword ptr [ebp-20h] 0Dh +
jb loc_1048D71  +
push dword ptr [ebp-38h]  +
call edi  +
mov byte ptr [ebp-4] 17h +
lea ecx [ebp-50h] +
call sub_1014FBC  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-18h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
mov ecx [ebp-14h] +
call sub_101A986  +
mov [ebp-14h] ebx +
mov [ebp-4] bl +
cmp esi ebx +
jz loc_1048E54  +
mov ecx esi +
call sub_101A986  +
mov [ebp-1Ch] ebx +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
call sub_1021FA5  +
retn 8  +
***
call sub_1021EF1  +
xor ebx ebx +
mov [ebp-4] ebx +
lea ecx [ebp-18h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 1 +
lea edi [ebp-18h] +
xor esi esi +
push ecx  +
mov ecx esp +
mov [ebp-1Ch] esp +
push dword ptr [ebp+8]  +
call sub_10151F2  +
mov byte ptr [ebp-4] 2 +
mov byte ptr [ebp-4] 1 +
call sub_10480D4  +
push offset aDifxlib  +
push 1  +
lea edi [ebp-1Ch] +
call sub_1047C57  +
mov [ebp-14h] ebx +
push 0C9h  +
lea ecx [ebp-18h] +
call sub_10158A3  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
lea ecx [ebp-14h] +
push ecx  +
mov edx [ebp+0Ch] +
mov ecx eax +
mov esi [ebp-1Ch] +
call sub_1047EE9  +
push 0FFFFFFFFh  +
lea ecx [ebp-18h] +
call sub_1015023  +
xor edi edi +
inc edi  +
cmp [ebp-14h] ebx +
jz loc_1048EF7  +
mov eax [ebp+18h] +
mov [eax] edi +
push edi  +
call sub_1047AF9  +
mov [ebp-14h] ebx +
lea eax [ebp-14h] +
push eax  +
push ecx  +
mov ecx esp +
mov [ebp+14h] esp +
push dword ptr [ebp+8]  +
call sub_10151F2  +
mov byte ptr [ebp-4] 3 +
mov byte ptr [ebp-4] 1 +
call sub_1048891  +
cmp [ebp-14h] ebx +
jz loc_1048F37  +
push offset aWeVeWaitedAWhi  +
push 2  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
mov eax [ebp+18h] +
mov [eax] edi +
mov [ebp-4] bl +
lea ecx [ebp-18h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
xor eax eax +
jmp loc_1048FFF  +
push offset aError0xXEnco_4  +
push 3  +
call sub_103AC75  +
add esp 14h +
jmp loc_1048FCC  +
push offset aErrorEncount_3  +
push 3  +
call sub_103AC75  +
add esp 10h +
mov byte ptr [ebp-4] 6 +
lea ecx [ebp+18h] +
call sub_1015174  +
mov byte ptr [ebp-4] 5 +
lea ecx [ebp+10h] +
call sub_1015174  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-24h] +
call sub_10427F9  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_1048FFA +
retn   +
mov eax 643h +
call sub_1021FA5  +
retn 14h  +
***
call sub_1021EB9  +
lea ecx [ebp-14h] +
call sub_10151DA  +
xor ebx ebx +
mov [ebp-4] ebx +
lea ecx [ebp-10h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-20h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-1Ch] +
call sub_10151DA  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-18h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 4 +
mov eax [ebp+10h] +
mov ecx [ebp+8] +
mov [eax] ebx +
lea eax [ebp-14h] +
push eax  +
push 2  +
call sub_103B80D  +
mov edi ds:SetupCopyOEMInfW +
test eax eax +
jnz loc_104908A  +
push offset aCouldNotGetNam  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
mov esi 643h +
jmp loc_1049177  +
mov esi 104h +
push esi  +
lea ecx [ebp-10h] +
call sub_10158A3  +
push ebx  +
push ebx  +
push esi  +
push eax  +
push 2  +
push 1  +
push ebx  +
push dword ptr [ebp-14h]  +
call edi  +
test eax eax +
jnz loc_10490C0  +
call ds:GetLastError  +
push eax  +
push offset aCouldNotGetThe  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
push 0FFFFFFFFh  +
lea ecx [ebp-10h] +
call sub_1015023  +
cmp dword ptr [ebp+0Ch] 7 +
jnz loc_1049137  +
mov ecx [ebp+8] +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-20h] +
push eax  +
call sub_103BA23  +
test eax eax +
jnz loc_10490FF  +
push 0Dh  +
pop esi  +
push dword ptr [ebp-14h]  +
push offset aCouldNotObtain  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
jmp loc_1049177  +
mov eax [ebp-10h] +
cmp [eax-0Ch] ebx +
lea eax [ebp-14h] +
jz loc_104910D  +
lea eax [ebp-10h] +
push dword ptr [ebp+10h]  +
push dword ptr [ebp-18h]  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp-20h]  +
push eax  +
call sub_1048E6D  +
mov esi eax +
cmp esi ebx +
jz loc_1049137  +
push esi  +
push offset aError0xXOccurr  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
jmp loc_1049173  +
mov eax [ebp-10h] +
cmp [eax-0Ch] ebx +
jz loc_1049171  +
push ecx  +
lea eax [ebp-10h] +
mov ecx esp +
mov [ebp+8] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 5 +
mov byte ptr [ebp-4] 4 +
call sub_104660B  +
cmp eax ebx +
jnz loc_1049171  +
push dword ptr [ebp-10h]  +
push offset aCouldNotRemo_5  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
xor esi esi +
cmp esi ebx +
jz loc_10491F3  +
push offset aFailedToUnin_3  +
push 3  +
call sub_103AC75  +
mov eax [ebp-14h] +
pop ecx  +
pop ecx  +
cmp [eax-0Ch] ebx +
jz loc_10491F3  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 1  +
push ebx  +
push eax  +
call edi  +
test eax eax +
jnz loc_10491B2  +
call ds:GetLastError  +
push eax  +
push offset aDuringUndoOfUn  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
cmp dword ptr [ebp+0Ch] 7 +
jnz loc_10491F3  +
mov edx [ebp-20h] +
cmp [edx-0Ch] ebx +
jz loc_10491F3  +
mov ecx [ebp-1Ch] +
cmp [ecx-0Ch] ebx +
jz loc_10491F3  +
mov eax [ebp-18h] +
cmp [eax-0Ch] ebx +
jz loc_10491F3  +
push eax  +
push ecx  +
push edx  +
push dword ptr [ebp+10h]  +
lea eax [ebp-14h] +
push eax  +
call sub_10486A1  +
cmp eax ebx +
jz loc_10491F3  +
push eax  +
push offset aDuringUndoOfIn  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-18h] +
call sub_1015174  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-1Ch] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-20h] +
call sub_1015174  +
mov [ebp-4] bl +
lea ecx [ebp-10h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call sub_1015174  +
mov eax esi +
call sub_1021FA5  +
retn 0Ch  +
***
call sub_1021EB9  +
lea ecx [ebp-10h] +
call sub_10151DA  +
xor ebx ebx +
mov [ebp-4] ebx +
lea ecx [ebp-1Ch] +
call sub_10151DA  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-18h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-14h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 3 +
mov esi [ebp+14h] +
mov ecx [ebp+8] +
lea eax [ebp-10h] +
push eax  +
push 2  +
mov [esi] ebx +
call sub_103B80D  +
mov edi ds:SetupCopyOEMInfW +
test eax eax +
jnz loc_10492B1  +
push offset aCouldNotGetNam  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
mov dword ptr [ebp+8] 643h +
jmp loc_1049351  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 1  +
push ebx  +
push dword ptr [ebp-10h]  +
call edi  +
test eax eax +
jnz loc_10492DD  +
call ds:GetLastError  +
push eax  +
push offset aCouldNotCopyTh  +
push 3  +
mov [ebp+8] eax +
call sub_103AC75  +
add esp 0Ch +
jmp loc_1049348  +
cmp dword ptr [ebp+0Ch] 7 +
jnz loc_1049345  +
mov ecx [ebp+8] +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
call sub_103BA23  +
test eax eax +
jnz loc_1049316  +
push dword ptr [ebp-10h]  +
mov dword ptr [ebp+8] 0Dh +
push offset aCouldNotObtain  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
jmp loc_1049351  +
push dword ptr [ebp-14h]  +
lea eax [ebp-10h] +
push dword ptr [ebp-18h]  +
push dword ptr [ebp-1Ch]  +
push esi  +
push eax  +
call sub_10486A1  +
mov [ebp+8] eax +
cmp eax ebx +
jz loc_1049345  +
push eax  +
push dword ptr [ebp-10h]  +
push offset aFailedToInstal  +
push 3  +
call sub_103AC75  +
add esp 10h +
jmp loc_1049348  +
mov [ebp+8] ebx +
cmp [ebp+8] ebx +
jz loc_1049445  +
cmp [ebp+10h] ebx +
jnz loc_1049445  +
push offset aTheDriverInsta  +
push dword ptr [ebp+8]  +
push 3  +
call sub_103AD09  +
add esp 0Ch +
cmp dword ptr [ebp+0Ch] 7 +
jnz loc_10493B3  +
mov eax [ebp-10h] +
cmp [eax-0Ch] ebx +
jz loc_10493B3  +
mov edx [ebp-1Ch] +
cmp [edx-0Ch] ebx +
jz loc_10493B3  +
mov ecx [ebp-18h] +
cmp [ecx-0Ch] ebx +
jz loc_10493B3  +
mov eax [ebp-14h] +
cmp [eax-0Ch] ebx +
jz loc_10493B3  +
push esi  +
push eax  +
push ecx  +
push edx  +
lea eax [ebp-10h] +
push eax  +
call sub_1048E6D  +
cmp eax ebx +
jz loc_10493B3  +
push eax  +
push offset aDuringUndoOf_0  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
lea ecx [ebp+14h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 4 +
mov esi 104h +
push esi  +
lea ecx [ebp+14h] +
call sub_10158A3  +
push ebx  +
push ebx  +
push esi  +
push eax  +
push 2  +
push 1  +
push ebx  +
push dword ptr [ebp-10h]  +
call edi  +
test eax eax +
jnz loc_10493F5  +
call ds:GetLastError  +
push eax  +
push offset aDuringUndoOf_1  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
push 0FFFFFFFFh  +
lea ecx [ebp+14h] +
call sub_1015023  +
mov eax [ebp+14h] +
cmp [eax-0Ch] ebx +
jz loc_1049439  +
push ecx  +
lea eax [ebp+14h] +
mov ecx esp +
mov [ebp+0Ch] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 5 +
mov byte ptr [ebp-4] 4 +
call sub_104660B  +
cmp eax ebx +
jnz loc_1049439  +
push dword ptr [ebp+14h]  +
push offset aCouldNotRemo_5  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp+14h] +
call sub_1015174  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-14h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-18h] +
call sub_1015174  +
mov [ebp-4] bl +
lea ecx [ebp-1Ch] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_1015174  +
mov eax [ebp+8] +
call sub_1021FA5  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
mov esi ds:QueryServiceStatus +
push ebx  +
push [ebp+hService]  +
call esi  +
test eax eax +
jz loc_10494D2  +
cmp dword ptr [ebx+4] 1 +
push edi  +
jz loc_10494CE  +
mov edi 1F4h +
push edi  +
call ds:Sleep  +
push ebx  +
push [ebp+hService]  +
call esi  +
test eax eax +
jz loc_10494E2  +
add [ebp+var_4] edi +
cmp [ebp+var_4] 2710h +
ja loc_10494D7  +
cmp dword ptr [ebx+4] 1 +
jnz loc_10494AB  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
leave   +
retn 4  +
push 41Dh  +
call ds:SetLastError  +
xor eax eax +
jmp loc_10494D1  +
***
call sub_1021EB9  +
xor edi edi +
mov [ebp-4] edi +
push 0E0000000h  +
push edi  +
push edi  +
mov dword ptr [ebp-10h] 1 +
call ds:OpenSCManagerW  +
mov [ebp-18h] eax +
cmp eax edi +
jz loc_10495D9  +
push 80000030h  +
push dword ptr [ebp+8]  +
push eax  +
call ds:OpenServiceW  +
mov ebx eax +
mov [ebp-14h] ebx +
cmp ebx edi +
jz loc_10495B2  +
mov esi ds:StartServiceW +
push edi  +
push edi  +
push ebx  +
call esi  +
test eax eax +
jz loc_1049556  +
push dword ptr [ebp+8]  +
push offset aServiceWsWasSt  +
push 1  +
call sub_103AC75  +
add esp 0Ch +
jmp loc_10495A7  +
call ds:GetLastError  +
cmp eax 420h +
jz loc_104957B  +
push eax  +
push dword ptr [ebp+8]  +
mov [ebp-10h] edi +
push offset aUnableToStartS  +
push 3  +
call sub_103AC75  +
add esp 10h +
jmp loc_10495A7  +
lea eax [ebp-34h] +
push eax  +
push 1  +
push ebx  +
call ds:ControlService  +
test eax eax +
jz loc_10495A4  +
push ebx  +
lea ebx [ebp-34h] +
call sub_1049484  +
test eax eax +
jz loc_10495A4  +
push edi  +
push edi  +
push dword ptr [ebp-14h]  +
call esi  +
test eax eax +
jnz loc_10495A7  +
mov [ebp-10h] edi +
push dword ptr [ebp-14h]  +
call ds:CloseServiceHandle  +
jmp loc_10495CE  +
mov [ebp-10h] edi +
call ds:GetLastError  +
push eax  +
push dword ptr [ebp+8]  +
push offset aUnableToOpenSe  +
push 3  +
call sub_103AC75  +
add esp 10h +
push dword ptr [ebp-18h]  +
call ds:CloseServiceHandle  +
jmp loc_10495F2  +
call ds:GetLastError  +
push eax  +
push offset aUnableToOpen_0  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
mov [ebp-10h] edi +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
mov eax [ebp-10h] +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EB9  +
xor edi edi +
mov [ebp-4] edi +
mov eax [ebp+10h] +
push 0E0000000h  +
push edi  +
push edi  +
mov dword ptr [ebp-10h] 1 +
mov [eax] edi +
call ds:OpenSCManagerW  +
mov [ebp-18h] eax +
cmp eax edi +
jz loc_10497AD  +
push 80010020h  +
push dword ptr [ebp+8]  +
push eax  +
call ds:OpenServiceW  +
mov esi ds:CloseServiceHandle +
mov ebx eax +
mov [ebp-14h] ebx +
cmp ebx edi +
jz loc_104978A  +
mov eax [ebp+0Ch] +
mov edi ds:GetLastError +
cmp eax 2 +
jz loc_1049682  +
cmp eax 3 +
jz loc_1049682  +
cmp eax 4 +
jz loc_1049682  +
cmp eax 1 +
jnz loc_10496D0  +
lea eax [ebp-34h] +
push eax  +
push 1  +
push ebx  +
call ds:ControlService  +
test eax eax +
jnz loc_10496A8  +
call edi  +
push eax  +
push dword ptr [ebp+8]  +
push offset aServiceWsFaile  +
push 3  +
call sub_103AC75  +
add esp 10h +
push ebx  +
lea ebx [ebp-34h] +
call sub_1049484  +
test eax eax +
jnz loc_10496D0  +
push dword ptr [ebp+8]  +
push offset aServiceWsNever  +
push 2  +
call sub_103AC75  +
mov eax [ebp+10h] +
add esp 0Ch +
mov dword ptr [eax] 1 +
push dword ptr [ebp-14h]  +
call ds:DeleteService  +
test eax eax +
jz loc_104976A  +
push dword ptr [ebp+8]  +
push offset aServiceWsWasDe  +
push 1  +
call sub_103AC75  +
add esp 0Ch +
push dword ptr [ebp-14h]  +
call esi  +
xor edi edi +
cmp dword ptr [ebp+0Ch] 2 +
jz loc_104970D  +
cmp dword ptr [ebp+0Ch] 3 +
mov dword ptr [ebp+0Ch] 6 +
jnz loc_1049714  +
mov dword ptr [ebp+0Ch] 3 +
push 80000000h  +
push dword ptr [ebp+8]  +
push dword ptr [ebp-18h]  +
call ds:OpenServiceW  +
mov ebx eax +
inc edi  +
test ebx ebx +
jz loc_10497A6  +
lea eax [ebp-34h] +
push eax  +
push ebx  +
call ds:QueryServiceStatus  +
push ebx  +
call esi  +
cmp edi [ebp+0Ch] +
jnz loc_1049758  +
push offset aWeVeWaitedAW_0  +
push 2  +
call sub_103AC75  +
mov eax [ebp+10h] +
pop ecx  +
pop ecx  +
mov dword ptr [eax] 1 +
jmp loc_1049763  +
push 1388h  +
call ds:Sleep  +
cmp edi [ebp+0Ch] +
jb loc_1049714  +
jmp loc_10497A6  +
and dword ptr [ebp-10h] 0 +
call edi  +
push eax  +
push dword ptr [ebp+8]  +
push offset aErrorUnableToD  +
push 3  +
call sub_103AC75  +
add esp 10h +
push dword ptr [ebp-14h]  +
call esi  +
jmp loc_10497A6  +
mov [ebp-10h] edi +
call ds:GetLastError  +
push eax  +
push dword ptr [ebp+8]  +
push offset aErrorUnableToO  +
push 3  +
call sub_103AC75  +
add esp 10h +
push dword ptr [ebp-18h]  +
call esi  +
jmp loc_10497C6  +
call ds:GetLastError  +
push eax  +
push offset aErrorUnableT_0  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
mov [ebp-10h] edi +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
mov eax [ebp-10h] +
call sub_1021FA5  +
retn 0Ch  +
***
call sub_1021EF1  +
mov esi [ebp+8] +
xor ebx ebx +
mov [ebp-20h] ebx +
push dword ptr [esi]  +
push offset aInstallingLega  +
xor edi edi +
inc edi  +
push edi  +
call sub_103AC75  +
add esp 0Ch +
mov eax [ebp+10h] +
mov [eax] ebx +
mov [ebp-18h] ebx +
mov [ebp-4] ebx +
lea ecx [ebp-18h] +
call sub_103ECE0  +
mov byte ptr [ebp-4] 1 +
push esi  +
mov ecx [ebp-18h] +
call sub_1046459  +
lea ecx [ebp-1Ch] +
call sub_10151DA  +
mov byte ptr [ebp-4] 2 +
push edi  +
lea eax [ebp-1Ch] +
push eax  +
mov ecx [ebp-18h] +
call sub_1047618  +
test eax eax +
jnz loc_104986F  +
push offset aCouldNotGetI_2  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
mov dword ptr [ebp-20h] 65Bh +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-1Ch] +
call sub_1015174  +
mov [ebp-4] bl +
jmp loc_1049A05  +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-14h] +
push eax  +
mov ecx [ebp-18h] +
call sub_1046C8D  +
mov byte ptr [ebp-4] 3 +
cmp [ebp-14h] ebx +
jz loc_1049917  +
mov [ebp-24h] ebx +
lea eax [ebp-24h] +
push eax  +
push ecx  +
mov ecx esp +
mov [ebp-28h] esp +
push esi  +
call sub_10151F2  +
mov byte ptr [ebp-4] 4 +
mov ecx [ebp-14h] +
mov byte ptr [ebp-4] 3 +
call sub_1047269  +
cmp [ebp-24h] ebx +
jz loc_10498C9  +
push dword ptr [esi]  +
push offset aWsRequiresAReb  +
push edi  +
call sub_103AC75  +
add esp 0Ch +
mov eax [ebp+10h] +
mov [eax] edi +
mov byte ptr [ebp-4] 2 +
mov ecx [ebp-14h] +
cmp ecx ebx +
jz loc_10498DC  +
call sub_101A986  +
mov [ebp-14h] ebx +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-1Ch] +
call sub_1015174  +
mov [ebp-4] ebx +
push ecx  +
mov ecx esp +
mov [ebp+8] esp +
push dword ptr [ebp+0Ch]  +
call sub_10151F2  +
mov byte ptr [ebp-4] 0Ah +
mov [ebp-4] bl +
call sub_10494EB  +
cmp eax ebx +
jnz loc_1049A05  +
mov eax [ebp+10h] +
mov [eax] edi +
jmp loc_1049A05  +
push dword ptr [esi]  +
push offset aErrorInfWsDo_0  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
mov dword ptr [ebp-20h] 643h +
mov byte ptr [ebp-4] 2 +
mov ecx [ebp-14h] +
cmp ecx ebx +
jz loc_104985B  +
call sub_101A986  +
mov [ebp-14h] ebx +
jmp loc_104985B  +
push 3  +
call sub_103AC75  +
add esp 14h +
jmp loc_10499CB  +
push offset aErrorEncount_2  +
push 3  +
call sub_103AC75  +
add esp 10h +
mov byte ptr [ebp-4] 7 +
lea ecx [ebp+10h] +
call sub_1015174  +
mov byte ptr [ebp-4] 6 +
lea ecx [ebp-24h] +
call sub_1015174  +
jmp loc_10499E7  +
xor ebx ebx +
mov dword ptr [ebp-20h] 643h +
mov byte ptr [ebp-4] 5 +
lea ecx [ebp-30h] +
call sub_10427F9  +
mov [ebp-4] ebx +
mov eax offset loc_1049A03 +
retn   +
xor ebx ebx +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx [ebp-18h] +
cmp ecx ebx +
jz loc_1049A18  +
call sub_101A986  +
mov [ebp-18h] ebx +
mov eax [ebp-20h] +
call sub_1021FA5  +
retn 0Ch  +
***
call sub_1021EF1  +
mov edi ecx +
mov esi [ebp+8] +
xor ebx ebx +
mov [ebp-20h] ebx +
push dword ptr [esi]  +
push offset aInstallingFile  +
push 1  +
call sub_103AC75  +
add esp 0Ch +
mov [edi] ebx +
mov [ebp-18h] ebx +
mov [ebp-4] ebx +
lea ecx [ebp-18h] +
call sub_103ECE0  +
mov byte ptr [ebp-4] 1 +
push esi  +
mov ecx [ebp-18h] +
call sub_1046459  +
lea ecx [ebp-1Ch] +
call sub_10151DA  +
mov byte ptr [ebp-4] 2 +
push 2  +
lea eax [ebp-1Ch] +
push eax  +
mov ecx [ebp-18h] +
call sub_1047618  +
test eax eax +
jnz loc_1049AB3  +
push offset aCouldNotGetI_1  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
mov dword ptr [ebp-20h] 65Bh +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-1Ch] +
call sub_1015174  +
mov [ebp-4] bl +
jmp loc_1049C4B  +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-14h] +
push eax  +
mov ecx [ebp-18h] +
call sub_1046C8D  +
mov byte ptr [ebp-4] 3 +
cmp [ebp-14h] ebx +
jz loc_1049B5D  +
mov [ebp-24h] ebx +
lea eax [ebp-24h] +
push eax  +
push ecx  +
mov ecx esp +
mov [ebp-28h] esp +
push esi  +
call sub_10151F2  +
mov byte ptr [ebp-4] 4 +
mov ecx [ebp-14h] +
mov byte ptr [ebp-4] 3 +
call sub_1047269  +
cmp [ebp-24h] ebx +
jz loc_1049B0F  +
push dword ptr [esi]  +
push offset aWsRequiresAReb  +
xor esi esi +
inc esi  +
push esi  +
call sub_103AC75  +
add esp 0Ch +
mov [edi] esi +
jmp loc_1049B12  +
xor esi esi +
inc esi  +
mov byte ptr [ebp-4] 2 +
mov ecx [ebp-14h] +
cmp ecx ebx +
jz loc_1049B25  +
call sub_101A986  +
mov [ebp-14h] ebx +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-1Ch] +
call sub_1015174  +
mov [ebp-4] ebx +
push ecx  +
mov ecx esp +
mov [ebp+8] esp +
push dword ptr [ebp+0Ch]  +
call sub_10151F2  +
mov byte ptr [ebp-4] 0Ah +
mov [ebp-4] bl +
call sub_10494EB  +
cmp eax ebx +
jnz loc_1049C4B  +
mov [edi] esi +
jmp loc_1049C4B  +
push dword ptr [esi]  +
push offset aErrorInfWsDoes  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
mov dword ptr [ebp-20h] 643h +
mov byte ptr [ebp-4] 2 +
mov ecx [ebp-14h] +
cmp ecx ebx +
jz loc_1049A9F  +
call sub_101A986  +
mov [ebp-14h] ebx +
jmp loc_1049A9F  +
push 3  +
call sub_103AC75  +
add esp 14h +
jmp loc_1049C11  +
push offset aErrorEncount_2  +
push 3  +
call sub_103AC75  +
add esp 10h +
mov byte ptr [ebp-4] 7 +
lea ecx [ebp+0Ch] +
call sub_1015174  +
mov byte ptr [ebp-4] 6 +
lea ecx [ebp-1Ch] +
call sub_1015174  +
jmp loc_1049C2D  +
xor ebx ebx +
mov dword ptr [ebp-20h] 643h +
mov byte ptr [ebp-4] 5 +
lea ecx [ebp-30h] +
call sub_10427F9  +
mov [ebp-4] ebx +
mov eax offset loc_1049C49 +
retn   +
xor ebx ebx +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx [ebp-18h] +
cmp ecx ebx +
jz loc_1049C5E  +
call sub_101A986  +
mov [ebp-18h] ebx +
mov eax [ebp-20h] +
call sub_1021FA5  +
retn 8  +
***
call sub_1021EF1  +
mov esi [ebp+8] +
xor ebx ebx +
mov [ebp-20h] ebx +
push dword ptr [esi]  +
push offset aInstallingKern  +
xor edi edi +
inc edi  +
push edi  +
call sub_103AC75  +
add esp 0Ch +
mov [ebp-18h] ebx +
mov [ebp-4] ebx +
lea ecx [ebp-18h] +
call sub_103ECE0  +
mov byte ptr [ebp-4] 1 +
push esi  +
mov ecx [ebp-18h] +
call sub_1046459  +
lea ecx [ebp-1Ch] +
call sub_10151DA  +
mov byte ptr [ebp-4] 2 +
push 0Ah  +
lea eax [ebp-1Ch] +
push eax  +
mov ecx [ebp-18h] +
call sub_1047618  +
test eax eax +
jnz loc_1049CF7  +
push offset aCouldNotGetI_0  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
mov dword ptr [ebp-20h] 65Bh +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-1Ch] +
call sub_1015174  +
mov [ebp-4] bl +
jmp loc_1049E62  +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-14h] +
push eax  +
mov ecx [ebp-18h] +
call sub_1046C8D  +
mov byte ptr [ebp-4] 3 +
cmp [ebp-14h] ebx +
jz loc_1049D74  +
mov [ebp-24h] ebx +
lea eax [ebp-24h] +
push eax  +
push ecx  +
mov ecx esp +
mov [ebp-28h] esp +
push esi  +
call sub_10151F2  +
mov byte ptr [ebp-4] 4 +
mov ecx [ebp-14h] +
mov byte ptr [ebp-4] 3 +
call sub_1047269  +
cmp [ebp-24h] ebx +
jz loc_1049D4D  +
push dword ptr [esi]  +
push offset aWsRequiresAReb  +
push edi  +
call sub_103AC75  +
add esp 0Ch +
mov eax [ebp+0Ch] +
mov [eax] edi +
mov byte ptr [ebp-4] 2 +
mov ecx [ebp-14h] +
cmp ecx ebx +
jz loc_1049D60  +
call sub_101A986  +
mov [ebp-14h] ebx +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-1Ch] +
call sub_1015174  +
mov [ebp-4] ebx +
jmp loc_1049E62  +
push dword ptr [esi]  +
push offset aErrorInfWsDoes  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
mov dword ptr [ebp-20h] 643h +
mov byte ptr [ebp-4] 2 +
mov ecx [ebp-14h] +
cmp ecx ebx +
jz loc_1049CE3  +
call sub_101A986  +
mov [ebp-14h] ebx +
jmp loc_1049CE3  +
push offset aError0xXEnco_3  +
push 3  +
call sub_103AC75  +
add esp 14h +
jmp loc_1049E28  +
push offset aErrorEncount_2  +
push 3  +
call sub_103AC75  +
add esp 10h +
mov byte ptr [ebp-4] 7 +
lea ecx [ebp+0Ch] +
call sub_1015174  +
mov byte ptr [ebp-4] 6 +
lea ecx [ebp-1Ch] +
call sub_1015174  +
jmp loc_1049E44  +
xor ebx ebx +
mov dword ptr [ebp-20h] 643h +
mov byte ptr [ebp-4] 5 +
lea ecx [ebp-30h] +
call sub_10427F9  +
mov [ebp-4] ebx +
mov eax offset loc_1049E60 +
retn   +
xor ebx ebx +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx [ebp-18h] +
cmp ecx ebx +
jz loc_1049E75  +
call sub_101A986  +
mov [ebp-18h] ebx +
mov eax [ebp-20h] +
call sub_1021FA5  +
retn 8  +
***
call sub_1021EB9  +
lea ecx [ebp-10h] +
call sub_10151DA  +
and dword ptr [ebp-4] 0 +
mov esi [ebp+0Ch] +
mov ecx [ebp+8] +
and dword ptr [esi] 0 +
lea eax [ebp-10h] +
push eax  +
push 2  +
call sub_103B80D  +
test eax eax +
jnz loc_1049ECA  +
push offset aCouldNotGetNam  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
mov esi 643h +
jmp loc_1049EEC  +
push dword ptr [ebp-10h]  +
push offset aInstallingIn_1  +
push 1  +
call sub_103AC75  +
add esp 0Ch +
push esi  +
lea eax [ebp-10h] +
push eax  +
call sub_1049C6E  +
mov esi eax +
test esi esi +
jz loc_1049EFC  +
push offset aTheDriverInsta  +
push esi  +
push 3  +
call sub_103AD09  +
add esp 0Ch +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_1015174  +
mov eax esi +
call sub_1021FA5  +
retn 8  +
***
call sub_1021EB9  +
xor ebx ebx +
lea ecx [ebp-10h] +
mov [ebp-14h] ebx +
mov [ebp-1Ch] ebx +
call sub_10151DA  +
mov [ebp-4] ebx +
push off_1064698  +
lea ecx [ebp-18h] +
call sub_10161A7  +
mov byte ptr [ebp-4] 1 +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+8]  +
lea eax [ebp-18h] +
push eax  +
call sub_10360F6  +
mov [ebp-4] bl +
lea ecx [ebp-18h] +
call sub_1015174  +
lea eax [ebp-14h] +
push eax  +
push 2001Fh  +
push ebx  +
push dword ptr [ebp-10h]  +
mov esi 80000002h +
push esi  +
call ds:RegOpenKeyExW  +
mov edi eax +
cmp edi ebx +
jz loc_1049F99  +
mov eax [ebp+8] +
push dword ptr [eax]  +
push edi  +
push offset aError0xXEncoun  +
push 3  +
call sub_103AC75  +
add esp 10h +
jmp loc_1049FE7  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push lpValueName  +
push dword ptr [ebp-14h]  +
call ds:RegQueryValueExW  +
cmp eax 2 +
jnz loc_1049FB8  +
mov dword ptr [ebp-1Ch] 1 +
push dword ptr [ebp-14h]  +
call ds:RegCloseKey  +
cmp [ebp-1Ch] ebx +
jz loc_1049FE5  +
push dword ptr [ebp-10h]  +
push esi  +
call ds:RegDeleteKeyW  +
mov edi eax +
cmp edi ebx +
jz loc_1049FE5  +
mov eax [ebp+8] +
push dword ptr [eax]  +
push edi  +
push offset aError0xXCouldN  +
push 1  +
jmp loc_1049F8F  +
xor edi edi +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_1015174  +
mov eax edi +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EB9  +
xor eax eax +
inc eax  +
mov [ebp-14h] eax +
mov [ebp-18h] eax +
mov eax [ebp+1Ch] +
xor ebx ebx +
lea ecx [ebp-1Ch] +
mov [eax] ebx +
mov [ebp-10h] ebx +
mov [ebp-24h] ebx +
call sub_10151DA  +
mov [ebp-4] ebx +
push off_1064698  +
lea ecx [ebp-20h] +
call sub_10161A7  +
mov byte ptr [ebp-4] 1 +
mov esi [ebp+0Ch] +
lea eax [ebp-1Ch] +
push eax  +
push esi  +
lea eax [ebp-20h] +
push eax  +
call sub_10360F6  +
mov [ebp-4] bl +
lea ecx [ebp-20h] +
call sub_1015174  +
lea eax [ebp-10h] +
push eax  +
push 2001Fh  +
push ebx  +
push dword ptr [ebp-1Ch]  +
mov edi 80000002h +
push edi  +
call ds:RegOpenKeyExW  +
cmp eax ebx +
jz loc_104A0A7  +
push dword ptr [esi]  +
cmp eax 2 +
jz loc_104A096  +
push eax  +
push offset aError0xXEncoun  +
push 3  +
call sub_103AC75  +
add esp 10h +
mov [ebp-14h] ebx +
jmp loc_104A0E2  +
push offset aDriverStoreRef  +
push 1  +
call sub_103AC75  +
add esp 0Ch +
jmp loc_104A0E2  +
cmp [ebp+10h] ebx +
jnz loc_104A0B5  +
mov dword ptr [ebp-24h] 1 +
jmp loc_104A0E2  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push 7  +
push ebx  +
push lpValueName  +
push dword ptr [ebp-10h]  +
call ds:RegSetValueExW  +
cmp eax ebx +
jz loc_104A0DB  +
push dword ptr [esi]  +
push eax  +
push offset aError0xXEnco_0  +
jmp loc_104A087  +
mov dword ptr [ebp-14h] 1 +
cmp [ebp-10h] ebx +
jz loc_104A0F0  +
push dword ptr [ebp-10h]  +
call ds:RegCloseKey  +
cmp [ebp-24h] ebx +
jz loc_104A0FF  +
push dword ptr [ebp-1Ch]  +
push edi  +
call ds:RegDeleteKeyW  +
cmp [ebp+18h] ebx +
jz loc_104A1C9  +
lea ecx [ebp+10h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 2 +
mov ecx [ebp+8] +
lea eax [ebp+10h] +
push eax  +
push 2  +
call sub_103B80D  +
test eax eax +
jnz loc_104A13C  +
push offset aCouldNotGetNam  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
mov [ebp-18h] ebx +
jmp loc_104A1BE  +
mov ecx [ebp+8] +
lea eax [ebp+0Ch] +
push eax  +
push ebx  +
call sub_103AFC1  +
test eax eax +
jnz loc_104A161  +
push dword ptr [ebp+10h]  +
push offset aCouldNotGetT_2  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
jmp loc_104A134  +
push dword ptr [ebp+0Ch]  +
xor edi edi +
push dword ptr [ebp+10h]  +
inc edi  +
push offset aInstallingIn_2  +
push edi  +
call sub_103AC75  +
add esp 10h +
cmp [ebp+0Ch] edi +
jz loc_104A194  +
jbe loc_104A1A4  +
cmp dword ptr [ebp+0Ch] 4 +
ja loc_104A1A4  +
mov ecx [ebp+1Ch] +
push esi  +
lea eax [ebp+10h] +
push eax  +
call sub_1049A28  +
jmp loc_104A1A1  +
push dword ptr [ebp+1Ch]  +
lea eax [ebp+10h] +
push esi  +
push eax  +
call sub_10497E2  +
mov [ebp+1Ch] eax +
cmp [ebp+1Ch] ebx +
jz loc_104A1BB  +
push dword ptr [ebp+10h]  +
push offset aCouldNotReinst  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
mov [ebp-18h] edi +
mov [ebp-4] bl +
lea ecx [ebp+10h] +
call sub_1015174  +
cmp [ebp-14h] ebx +
jz loc_104A1D3  +
cmp [ebp-18h] ebx +
jnz loc_104A1D8  +
mov ebx 643h +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call sub_1015174  +
mov eax ebx +
call sub_1021FA5  +
retn 18h  +
***
call sub_1021EB9  +
mov edi ecx +
mov esi [ebp+8] +
mov eax [esi] +
mov [ebp-10h] eax +
test eax eax +
jz loc_104A241  +
lea eax [ebp-10h] +
push eax  +
mov ecx esi +
call sub_105038C  +
push eax  +
lea ecx [ebp+8] +
call sub_10151F2  +
and dword ptr [ebp-4] 0 +
push dword ptr [ebp+8]  +
mov ecx edi +
call sub_10172FC  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
cmp dword ptr [ebp-10h] 0 +
jnz loc_104A20D  +
mov eax edi +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EB9  +
xor ebx ebx +
lea ecx [ebp-40h] +
mov [ebp-14h] ebx +
mov [ebp-28h] ebx +
call sub_1014C71  +
mov [ebp-4] ebx +
lea ecx [ebp-20h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 1 +
mov eax [ebp+14h] +
mov esi 80000000h +
push esi  +
push ebx  +
push ebx  +
mov [eax] ebx +
call ds:OpenSCManagerW  +
mov [ebp-1Ch] eax +
cmp eax ebx +
jz loc_104A2B9  +
mov eax [ebp+0Ch] +
mov eax [eax] +
push esi  +
push eax  +
push dword ptr [ebp-1Ch]  +
mov [ebp-18h] ebx +
call ds:OpenServiceW  +
cmp eax ebx +
jnz loc_104A2F7  +
call ds:GetLastError  +
cmp eax 424h +
jz loc_104A305  +
cmp [ebp-14h] ebx +
jz loc_104A2C7  +
push dword ptr [ebp-14h]  +
call ds:RegCloseKey  +
cmp [ebp-1Ch] ebx +
jz loc_104A2D5  +
push dword ptr [ebp-1Ch]  +
call ds:CloseServiceHandle  +
mov [ebp-4] bl +
lea ecx [ebp-20h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-40h] +
call sub_1014FBC  +
mov eax [ebp-28h] +
call sub_1021FA5  +
retn 14h  +
push eax  +
mov dword ptr [ebp-18h] 1 +
call ds:CloseServiceHandle  +
push off_1064698  +
lea ecx [ebp-24h] +
call sub_10161A7  +
mov byte ptr [ebp-4] 2 +
lea eax [ebp-20h] +
push eax  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-24h] +
push eax  +
call sub_10360F6  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-24h] +
call sub_1015174  +
push ebx  +
lea eax [ebp-14h] +
push eax  +
push ebx  +
push 2001Fh  +
push ebx  +
push ebx  +
push ebx  +
push dword ptr [ebp-20h]  +
push 80000002h  +
call ds:RegCreateKeyExW  +
test eax eax +
jnz loc_104A2B9  +
mov esi ds:RegQueryValueExW +
lea eax [ebp-10h] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push lpValueName  +
mov [ebp-10h] ebx +
push dword ptr [ebp-14h]  +
call esi  +
cmp eax ebx +
jz loc_104A394  +
cmp eax 2 +
jnz loc_104A2B9  +
cmp [ebp-18h] ebx +
jz loc_104A3EE  +
push off_10646A0  +
lea ecx [ebp-40h] +
call sub_1037176  +
jmp loc_104A3EE  +
cmp [ebp-18h] ebx +
jz loc_104A3EE  +
cmp [ebp-10h] ebx +
jz loc_104A3EE  +
add dword ptr [ebp-10h] 4 +
push dword ptr [ebp-10h]  +
call sub_1054617  +
pop ecx  +
mov [edi] eax +
cmp eax ebx +
jz loc_104A2B9  +
mov eax [ebp-10h] +
mov ecx [ebp+10h] +
push eax  +
mov [ecx] eax +
push ebx  +
push dword ptr [edi]  +
call sub_10219E0  +
add esp 0Ch +
lea eax [ebp-10h] +
push eax  +
push dword ptr [edi]  +
push ebx  +
push ebx  +
push lpValueName  +
push dword ptr [ebp-14h]  +
call esi  +
test eax eax +
jnz loc_104A2B9  +
push dword ptr [edi]  +
lea ecx [ebp-40h] +
call sub_103C474  +
mov esi [ebp+8] +
push ecx  +
mov ecx esp +
mov [ebp+0Ch] esp +
push esi  +
call sub_10151F2  +
mov byte ptr [ebp-4] 3 +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-40h] +
call sub_10378C2  +
cmp eax ebx +
jz loc_104A473  +
mov eax [ebp-40h] +
xor ecx ecx +
cmp eax ebx +
setnz cl  +
cmp ecx ebx +
jnz loc_104A429  +
push 80004005h  +
call loc_1014415  +
add eax 8 +
push eax  +
lea ecx [ebp+0Ch] +
call sub_10151F2  +
mov byte ptr [ebp-4] 4 +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
call sub_101492B  +
test eax eax +
jz loc_104A453  +
mov ecx [ebp+18h] +
lea eax [ebp+0Ch] +
push eax  +
call sub_1015959  +
mov eax [ebp+14h] +
push dword ptr [ebp-14h]  +
mov dword ptr [eax] 1 +
call ds:RegCloseKey  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp+0Ch] +
call sub_1015174  +
jmp loc_104A4CB  +
push dword ptr [esi]  +
lea ecx [ebp-40h] +
call sub_1037176  +
lea eax [ebp-10h] +
push eax  +
lea ecx [ebp-40h] +
call sub_1035D59  +
mov esi eax +
cmp esi ebx +
jz loc_104A2B9  +
mov eax [ebp-10h] +
add eax eax +
push eax  +
push esi  +
push 7  +
push ebx  +
push lpValueName  +
push dword ptr [ebp-14h]  +
call ds:RegSetValueExW  +
push esi  +
test eax eax +
jz loc_104A4BC  +
call sub_1021179  +
pop ecx  +
jmp loc_104A2B9  +
call sub_1021179  +
pop ecx  +
push dword ptr [ebp-14h]  +
call ds:RegCloseKey  +
mov dword ptr [ebp-28h] 1 +
jmp loc_104A2C7  +
***
call sub_1021EB9  +
lea ecx [ebp-28h] +
call sub_1014C71  +
xor ebx ebx +
mov [ebp-4] ebx +
lea ecx [ebp-10h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 1 +
mov ecx [ebp+8] +
lea eax [ebp-10h] +
push eax  +
push 3  +
pop esi  +
push esi  +
call sub_103B80D  +
test eax eax +
jnz loc_104A543  +
push offset aFailedToObta_0  +
push esi  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
mov [ebp-4] bl +
lea ecx [ebp-10h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-28h] +
call sub_1014FBC  +
mov eax 643h +
jmp loc_104A5E4  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
push 4  +
call sub_103C4CC  +
test eax eax +
jnz loc_104A55C  +
push offset aCouldNotGetSer  +
jmp loc_104A51A  +
cmp dword ptr [ebp-20h] 1 +
jbe loc_104A569  +
push offset aTheDriverPac_0  +
jmp loc_104A51A  +
cmp [ebp-20h] ebx +
jnz loc_104A575  +
push offset aNoServicesFoun  +
jmp loc_104A51A  +
mov eax [ebp-28h] +
xor ecx ecx +
cmp eax ebx +
setnz cl  +
cmp ecx ebx +
jnz loc_104A58D  +
push 80004005h  +
call loc_1014415  +
mov ecx [ebp+0Ch] +
add eax 8 +
push eax  +
call sub_1015AAF  +
push dword ptr [ebp+14h]  +
mov edi [ebp+18h] +
push dword ptr [ebp+10h]  +
lea eax [ebp-10h] +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_104A250  +
test eax eax +
jnz loc_104A5C9  +
push offset aCouldNotAddDri  +
push esi  +
mov edi 643h +
call sub_103AC75  +
pop ecx  +
pop ecx  +
jmp loc_104A5CB  +
xor edi edi +
mov [ebp-4] bl +
lea ecx [ebp-10h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-28h] +
call sub_1014FBC  +
mov eax edi +
call sub_1021FA5  +
retn 18h  +
***
call sub_1021EB9  +
mov esi ecx +
xor ebx ebx +
lea ecx [ebp-38h] +
mov [ebp-1Ch] ebx +
mov [ebp-10h] ebx +
call sub_1014C71  +
mov [ebp-4] ebx +
mov eax [ebp+14h] +
lea ecx [ebp-18h] +
mov dword ptr [eax] 1 +
call sub_10151DA  +
mov byte ptr [ebp-4] 1 +
push off_1064698  +
lea ecx [ebp-20h] +
call sub_10161A7  +
mov byte ptr [ebp-4] 2 +
lea eax [ebp-18h] +
push eax  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-20h] +
push eax  +
call sub_10360F6  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-20h] +
call sub_1015174  +
lea eax [ebp-10h] +
push eax  +
push 2001Fh  +
push ebx  +
push dword ptr [ebp-18h]  +
push 80000002h  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_104A832  +
mov edi ds:RegQueryValueExW +
lea eax [ebp-14h] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push lpValueName  +
mov [ebp-14h] ebx +
push dword ptr [ebp-10h]  +
call edi  +
cmp eax ebx +
jz loc_104A69C  +
cmp eax 2 +
jmp loc_104A87B  +
add dword ptr [ebp-14h] 4 +
push dword ptr [ebp-14h]  +
call sub_1054617  +
pop ecx  +
mov [esi] eax +
cmp eax ebx +
jz loc_104A832  +
mov eax [ebp-14h] +
mov ecx [ebp+18h] +
push eax  +
mov [ecx] eax +
push ebx  +
push dword ptr [esi]  +
call sub_10219E0  +
add esp 0Ch +
lea eax [ebp-14h] +
push eax  +
push dword ptr [esi]  +
push ebx  +
push ebx  +
push lpValueName  +
push dword ptr [ebp-10h]  +
call edi  +
test eax eax +
jnz loc_104A832  +
push dword ptr [esi]  +
lea ecx [ebp-38h] +
call sub_103C474  +
mov esi [ebp+8] +
push ecx  +
mov ecx esp +
mov [ebp+0Ch] esp +
push esi  +
call sub_10151F2  +
mov byte ptr [ebp-4] 3 +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-38h] +
call sub_10378C2  +
cmp eax ebx +
jnz loc_104A71D  +
push dword ptr [ebp-10h]  +
call ds:RegCloseKey  +
jmp loc_104A7F7  +
lea ecx [ebp+0Ch] +
call sub_10151DA  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp+8] +
call sub_10151DA  +
mov byte ptr [ebp-4] 5 +
mov eax [ebp-38h] +
mov [ebp+18h] eax +
lea eax [ebp+18h] +
push eax  +
lea ecx [ebp-38h] +
call sub_105038C  +
push eax  +
lea ecx [ebp+0Ch] +
call sub_1015959  +
push dword ptr [esi]  +
lea ecx [ebp+0Ch] +
call sub_101492B  +
lea ecx [ebp-38h] +
test eax eax +
jnz loc_104A7D4  +
lea eax [ebp+0Ch] +
push eax  +
call sub_103B662  +
cmp [ebp-30h] ebx +
jz loc_104A7DF  +
mov ecx [ebp+10h] +
lea eax [ebp-38h] +
push eax  +
call sub_104A1F3  +
mov eax [ebp-38h] +
mov [ebp+18h] eax +
lea eax [ebp+18h] +
push eax  +
lea ecx [ebp-38h] +
call sub_105038C  +
push eax  +
lea ecx [ebp+8] +
call sub_1015959  +
push off_10646A0  +
lea ecx [ebp+8] +
call sub_101492B  +
test eax eax +
jnz loc_104A7DF  +
push off_10646A0  +
lea ecx [ebp+14h] +
call sub_10161A7  +
mov byte ptr [ebp-4] 6 +
lea eax [ebp+14h] +
push eax  +
lea ecx [ebp-38h] +
call sub_103B662  +
mov byte ptr [ebp-4] 5 +
lea ecx [ebp+14h] +
call sub_1015174  +
jmp loc_104A7DF  +
push esi  +
call sub_103B662  +
mov eax [ebp+14h] +
mov [eax] ebx +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp+8] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp+0Ch] +
call sub_1015174  +
cmp [ebp-30h] ebx +
jz loc_104A86A  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-38h] +
call sub_1035D59  +
mov esi eax +
cmp esi ebx +
jz loc_104A832  +
mov eax [ebp-14h] +
add eax eax +
push eax  +
push esi  +
push 7  +
push ebx  +
push lpValueName  +
push dword ptr [ebp-10h]  +
call ds:RegSetValueExW  +
push esi  +
test eax eax +
jz loc_104A862  +
call sub_1021179  +
pop ecx  +
cmp [ebp-10h] ebx +
jz loc_104A840  +
push dword ptr [ebp-10h]  +
call ds:RegCloseKey  +
mov [ebp-4] bl +
lea ecx [ebp-18h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-38h] +
call sub_1014FBC  +
mov eax [ebp-1Ch] +
call sub_1021FA5  +
retn 14h  +
call sub_1021179  +
pop ecx  +
jmp loc_104A87D  +
push lpValueName  +
push dword ptr [ebp-10h]  +
call ds:RegDeleteValueW  +
test eax eax +
jnz loc_104A832  +
push dword ptr [ebp-10h]  +
call ds:RegCloseKey  +
mov dword ptr [ebp-1Ch] 1 +
jmp loc_104A840  +
***
call sub_1021EB9  +
lea ecx [ebp-28h] +
call sub_1014C71  +
xor ebx ebx +
mov [ebp-4] ebx +
lea ecx [ebp-10h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 1 +
mov ecx [ebp+8] +
lea eax [ebp-10h] +
push eax  +
push 3  +
pop edi  +
push edi  +
call sub_103B80D  +
test eax eax +
jnz loc_104A8FB  +
push offset aFailedToObta_0  +
push edi  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
mov [ebp-4] bl +
lea ecx [ebp-10h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-28h] +
call sub_1014FBC  +
mov eax 643h +
jmp loc_104A99C  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
push 4  +
call sub_103C4CC  +
test eax eax +
jnz loc_104A914  +
push offset aCouldNotGetSer  +
jmp loc_104A8D2  +
cmp dword ptr [ebp-20h] 1 +
jbe loc_104A921  +
push offset aTheDriverPac_0  +
jmp loc_104A8D2  +
cmp [ebp-20h] ebx +
jnz loc_104A92D  +
push offset aNoServicesFoun  +
jmp loc_104A8D2  +
mov eax [ebp-28h] +
xor ecx ecx +
cmp eax ebx +
setnz cl  +
cmp ecx ebx +
jnz loc_104A945  +
push 80004005h  +
call loc_1014415  +
mov ecx [ebp+0Ch] +
add eax 8 +
push eax  +
call sub_1015AAF  +
push dword ptr [ebp+1Ch]  +
mov ecx [ebp+18h] +
push dword ptr [ebp+14h]  +
lea eax [ebp-10h] +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_104A5F1  +
test eax eax +
jnz loc_104A981  +
push offset aCouldNotAddDri  +
push edi  +
mov esi 643h +
call sub_103AC75  +
pop ecx  +
pop ecx  +
jmp loc_104A983  +
xor esi esi +
mov [ebp-4] bl +
lea ecx [ebp-10h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-28h] +
call sub_1014FBC  +
mov eax esi +
call sub_1021FA5  +
retn 18h  +
***
call sub_1021EB9  +
xor ebx ebx +
mov [ebp-4] ebx +
lea ecx [ebp-74h] +
mov [ebp-10h] ebx +
call sub_103B217  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-18h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-40h] +
call sub_1014C71  +
mov byte ptr [ebp-4] 3 +
mov edi [ebp+14h] +
mov eax [ebp+10h] +
xor esi esi +
mov [edi] ebx +
mov eax [eax] +
inc esi  +
mov [ebp-24h] esi +
mov [ebp-28h] eax +
cmp eax ebx +
jz loc_104AAAB  +
cmp [ebp-10h] ebx +
jnz loc_104ABC5  +
lea ecx [ebp-14h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 4 +
mov ecx [ebp+10h] +
lea eax [ebp-28h] +
push eax  +
call sub_105038C  +
push eax  +
lea ecx [ebp-14h] +
call sub_1015959  +
push off_10646A0  +
lea ecx [ebp-14h] +
call sub_101492B  +
test eax eax +
jnz loc_104AB18  +
push offset aUnableToRevert  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
mov [ebp-10h] ebx +
mov [ebp-24h] ebx +
push dword ptr [ebp+8]  +
push dword ptr [ebp-18h]  +
push dword ptr [ebp-1Ch]  +
push offset aError0xXFailed  +
push 3  +
call sub_103AC75  +
add esp 14h +
push off_10646A0  +
lea ecx [ebp-14h] +
call sub_101492B  +
test eax eax +
jz loc_104AA85  +
push dword ptr [ebp-14h]  +
lea ecx [ebp-40h] +
call sub_10172FC  +
lea ecx [ebp-74h] +
call sub_103ADBD  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-14h] +
call sub_1015174  +
cmp [ebp-28h] ebx +
jnz loc_104A9FC  +
cmp [ebp-10h] ebx +
jnz loc_104ABC5  +
push dword ptr [ebp+8]  +
push offset aUnableToReve_0  +
push 3  +
pop edi  +
push edi  +
call sub_103AC75  +
add esp 0Ch +
cmp [ebp-24h] ebx +
jz loc_104ABBD  +
push offset aWillAttemptToU  +
push edi  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
lea eax [ebp-28h] +
push eax  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp+8] +
push ecx  +
mov ecx esp +
mov [ebp+0Ch] esp +
push eax  +
mov [ebp-28h] ebx +
call sub_10151F2  +
mov byte ptr [ebp-4] 6 +
mov byte ptr [ebp-4] 3 +
call sub_104960E  +
cmp eax ebx +
jnz loc_104ABAE  +
push offset aErrorOccurre_0  +
push edi  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
mov [ebp-10h] ebx +
jmp loc_104ADF0  +
push 3  +
push ecx  +
lea eax [ebp-14h] +
mov ecx esp +
mov [ebp-20h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 5 +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-74h] +
call sub_103B6D1  +
cmp eax 0B7h +
jz loc_104AB48  +
mov [ebp-10h] ebx +
jmp loc_104AA50  +
lea eax [ebp-18h] +
push eax  +
push 2  +
lea ecx [ebp-74h] +
call sub_103B80D  +
test eax eax +
jz loc_104AB40  +
mov dword ptr [ebp-1Ch] 57h +
mov [ebp-20h] ebx +
cmp [ebp+0Ch] esi +
jz loc_104AB83  +
jle loc_104AB40  +
cmp dword ptr [ebp+0Ch] 4 +
jg loc_104AB40  +
lea eax [ebp+8] +
push eax  +
lea eax [ebp-18h] +
push eax  +
lea ecx [ebp-20h] +
call sub_1049A28  +
jmp loc_104AB94  +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp+8] +
push eax  +
lea eax [ebp-18h] +
push eax  +
call sub_10497E2  +
mov [ebp-1Ch] eax +
cmp eax ebx +
jnz loc_104AB40  +
mov [ebp-10h] esi +
cmp [ebp-20h] ebx +
jz loc_104AA85  +
mov [edi] esi +
jmp loc_104AA85  +
mov [ebp-10h] esi +
cmp [ebp-28h] ebx +
jz loc_104ABC8  +
mov eax [ebp+14h] +
mov [eax] esi +
jmp loc_104ABC8  +
mov [ebp-10h] esi +
jmp loc_104ADF0  +
push 3  +
pop edi  +
cmp [ebp-38h] ebx +
jz loc_104ADF0  +
lea ecx [ebp-1Ch] +
call sub_10151DA  +
mov byte ptr [ebp-4] 7 +
mov eax [ebp-40h] +
mov [ebp-24h] eax +
cmp eax ebx +
jz loc_104ACDD  +
lea ecx [ebp+0Ch] +
call sub_10151DA  +
mov byte ptr [ebp-4] 8 +
lea eax [ebp-24h] +
push eax  +
lea ecx [ebp-40h] +
call sub_105038C  +
push eax  +
lea ecx [ebp+0Ch] +
call sub_1015959  +
mov ecx [ebp+10h] +
lea eax [ebp+0Ch] +
push eax  +
call sub_103B662  +
lea ecx [ebp-58h] +
call sub_1014C71  +
mov byte ptr [ebp-4] 9 +
push edi  +
push ecx  +
lea eax [ebp+0Ch] +
mov ecx esp +
mov [ebp-14h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 0Ah +
mov byte ptr [ebp-4] 9 +
lea ecx [ebp-74h] +
call sub_103B6D1  +
lea eax [ebp-58h] +
push eax  +
push 0Ah  +
lea ecx [ebp-74h] +
call sub_103C4CC  +
lea ecx [ebp-74h] +
call sub_103ADBD  +
mov eax [ebp-58h] +
mov [ebp-14h] eax +
cmp eax ebx +
jz loc_104ACBC  +
lea ecx [ebp-20h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 0Bh +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-58h] +
call sub_105038C  +
push eax  +
lea ecx [ebp-20h] +
call sub_1015959  +
mov eax [ebp-20h] +
push dword ptr [eax-0Ch]  +
lea ecx [ebp-1Ch] +
push eax  +
call sub_10155F6  +
cmp [ebp-14h] ebx +
jnz loc_104AC9E  +
cmp [ebp-24h] ebx +
jz loc_104ACAB  +
push offset asc_1011988  +
lea ecx [ebp-1Ch] +
call sub_1018C3E  +
mov byte ptr [ebp-4] 9 +
lea ecx [ebp-20h] +
call sub_1015174  +
cmp [ebp-14h] ebx +
jnz loc_104AC64  +
mov byte ptr [ebp-4] 8 +
lea ecx [ebp-58h] +
call sub_1014FBC  +
mov byte ptr [ebp-4] 7 +
lea ecx [ebp+0Ch] +
call sub_1015174  +
cmp [ebp-24h] ebx +
jnz loc_104ABEB  +
mov eax [ebp-1Ch] +
cmp [eax-0Ch] ebx +
jle loc_104ACF4  +
push eax  +
push offset aTheFollowingAp  +
push edi  +
call sub_103AC75  +
add esp 0Ch +
lea ecx [ebp-28h] +
mov [ebp+14h] ebx +
call sub_10151DA  +
mov byte ptr [ebp-4] 0Ch +
push off_1064698  +
lea ecx [ebp+0Ch] +
call sub_10161A7  +
mov byte ptr [ebp-4] 0Dh +
lea eax [ebp-28h] +
push eax  +
lea eax [ebp+8] +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
call sub_10360F6  +
mov byte ptr [ebp-4] 0Ch +
lea ecx [ebp+0Ch] +
call sub_1015174  +
lea eax [ebp+14h] +
push eax  +
push 2001Fh  +
push ebx  +
push dword ptr [ebp-28h]  +
push 80000002h  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_104ADC8  +
mov ecx [ebp+10h] +
cmp [ecx+8] ebx +
jz loc_104AD9A  +
lea eax [ebp+0Ch] +
push eax  +
call sub_1035D59  +
mov esi eax +
cmp esi ebx +
jz loc_104ADAD  +
mov eax [ebp+0Ch] +
add eax eax +
push eax  +
push esi  +
push 7  +
push ebx  +
push lpValueName  +
push dword ptr [ebp+14h]  +
call ds:RegSetValueExW  +
test eax eax +
jz loc_104AD92  +
push offset aErrorOccurre_1  +
push edi  +
mov [ebp-10h] ebx +
call sub_103AC75  +
pop ecx  +
pop ecx  +
push esi  +
call sub_1021179  +
jmp loc_104ADBC  +
push lpValueName  +
push dword ptr [ebp+14h]  +
call ds:RegDeleteValueW  +
test eax eax +
jz loc_104ADBD  +
push offset aErrorOccurre_1  +
push edi  +
mov [ebp-10h] ebx +
call sub_103AC75  +
pop ecx  +
pop ecx  +
push dword ptr [ebp+14h]  +
call ds:RegCloseKey  +
jmp loc_104ADD8  +
push offset aErrorOccurre_1  +
push edi  +
mov [ebp-10h] ebx +
call sub_103AC75  +
pop ecx  +
pop ecx  +
mov byte ptr [ebp-4] 7 +
lea ecx [ebp-28h] +
call sub_1015174  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-1Ch] +
call sub_1015174  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-40h] +
call sub_1014FBC  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-18h] +
call sub_1015174  +
mov [ebp-4] bl +
lea ecx [ebp-74h] +
call sub_103AF75  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
mov eax [ebp-10h] +
call sub_1021FA5  +
retn 10h  +
***
call sub_1021EB9  +
lea ecx [ebp-10h] +
call sub_10151DA  +
xor ebx ebx +
mov [ebp-4] ebx +
lea ecx [ebp-30h] +
call sub_1014C71  +
mov byte ptr [ebp-4] 1 +
mov esi [ebp+10h] +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp+10h] +
push eax  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+8]  +
mov [ebp-14h] ebx +
mov [ebp-18h] ebx +
mov [esi] ebx +
call sub_104A894  +
mov edi eax +
cmp edi ebx +
jz loc_104AE96  +
push dword ptr [ebp-10h]  +
push edi  +
push offset aError0xXOccure  +
push 3  +
call sub_103AC75  +
add esp 10h +
jmp loc_104AEEE  +
cmp [ebp+10h] ebx +
jz loc_104AF2A  +
lea eax [ebp+0Ch] +
push eax  +
lea eax [ebp-30h] +
push eax  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-10h] +
push ecx  +
mov ecx esp +
mov [ebp+0Ch] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 2 +
mov byte ptr [ebp-4] 1 +
call sub_104A9A9  +
cmp eax ebx +
jnz loc_104AEE3  +
push dword ptr [ebp-10h]  +
mov edi 643h +
push offset aWeWereUnableTo  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
jmp loc_104AEF2  +
cmp [ebp+0Ch] ebx +
jz loc_104AF2A  +
mov dword ptr [esi] 1 +
cmp edi ebx +
jz loc_104AF2A  +
push offset aFailedToUnin_3  +
push edi  +
push 3  +
call sub_103AD09  +
add esp 0Ch +
xor eax eax +
cmp [ebp+10h] ebx +
push esi  +
setnz al  +
push eax  +
push dword ptr [ebp-18h]  +
lea eax [ebp-10h] +
push dword ptr [ebp-14h]  +
push eax  +
push dword ptr [ebp+8]  +
call sub_104A002  +
cmp eax ebx +
jz loc_104AF47  +
push eax  +
push offset aError0xXEnco_1  +
jmp loc_104AF3D  +
lea eax [ebp-10h] +
push eax  +
call sub_1049F17  +
cmp eax ebx +
jz loc_104AF47  +
push eax  +
push offset aSomePostInstal  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
cmp [ebp-14h] ebx +
jz loc_104AF55  +
push dword ptr [ebp-14h]  +
call sub_1021179  +
pop ecx  +
mov [ebp-4] bl +
lea ecx [ebp-30h] +
call sub_1014FBC  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_1015174  +
mov eax edi +
call sub_1021FA5  +
retn 0Ch  +
***
call sub_1021EB9  +
mov eax [ebp+18h] +
xor ebx ebx +
lea ecx [ebp-18h] +
mov dword ptr [ebp-14h] 1 +
mov [eax] ebx +
mov [ebp-10h] ebx +
mov [ebp-20h] ebx +
call sub_10151DA  +
mov [ebp-4] ebx +
push off_1064698  +
lea ecx [ebp-1Ch] +
call sub_10161A7  +
mov byte ptr [ebp-4] 1 +
mov esi [ebp+8] +
lea eax [ebp-18h] +
push eax  +
push esi  +
lea eax [ebp-1Ch] +
push eax  +
call sub_10360F6  +
mov [ebp-4] bl +
lea ecx [ebp-1Ch] +
call sub_1015174  +
lea eax [ebp-10h] +
push eax  +
push 2001Fh  +
push ebx  +
push dword ptr [ebp-18h]  +
mov edi 80000002h +
push edi  +
call ds:RegOpenKeyExW  +
cmp eax ebx +
jz loc_104B01E  +
push dword ptr [esi]  +
cmp eax 2 +
jz loc_104B00D  +
push eax  +
push offset aError0xXEncoun  +
push 3  +
call sub_103AC75  +
add esp 10h +
mov [ebp-14h] ebx +
jmp loc_104B059  +
push offset aDriverStoreRef  +
push 1  +
call sub_103AC75  +
add esp 0Ch +
jmp loc_104B059  +
cmp [ebp+10h] ebx +
jnz loc_104B02C  +
mov dword ptr [ebp-20h] 1 +
jmp loc_104B059  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push 7  +
push ebx  +
push lpValueName  +
push dword ptr [ebp-10h]  +
call ds:RegSetValueExW  +
cmp eax ebx +
jz loc_104B052  +
push dword ptr [esi]  +
push eax  +
push offset aError0xXEnco_0  +
jmp loc_104AFFE  +
mov dword ptr [ebp-14h] 1 +
cmp [ebp-10h] ebx +
jz loc_104B067  +
push dword ptr [ebp-10h]  +
call ds:RegCloseKey  +
cmp [ebp-20h] ebx +
jz loc_104B076  +
push dword ptr [ebp-18h]  +
push edi  +
call ds:RegDeleteKeyW  +
lea ecx [ebp-38h] +
call sub_1014C71  +
mov byte ptr [ebp-4] 2 +
cmp [ebp+10h] ebx +
jz loc_104B092  +
push dword ptr [ebp+10h]  +
lea ecx [ebp-38h] +
call sub_103C474  +
push dword ptr [ebp+18h]  +
lea eax [ebp-38h] +
push eax  +
push dword ptr [ebp+0Ch]  +
push ecx  +
mov ecx esp +
mov [ebp+10h] esp +
push esi  +
call sub_10151F2  +
mov byte ptr [ebp-4] 3 +
mov byte ptr [ebp-4] 2 +
call sub_104A9A9  +
cmp eax ebx +
jnz loc_104B0CB  +
push offset aErrorEncount_1  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
xor eax eax +
jmp loc_104B0CE  +
xor eax eax +
inc eax  +
cmp [ebp-14h] ebx +
jz loc_104B0DB  +
cmp eax ebx +
jz loc_104B0DB  +
xor esi esi +
jmp loc_104B0E0  +
mov esi 643h +
mov [ebp-4] bl +
lea ecx [ebp-38h] +
call sub_1014FBC  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-18h] +
call sub_1015174  +
mov eax esi +
call sub_1021FA5  +
retn 14h  +
***
call sub_1021EB9  +
lea ecx [ebp-14h] +
call sub_10151DA  +
xor ebx ebx +
mov [ebp-4] ebx +
lea ecx [ebp-10h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-18h] +
mov [ebp-20h] ebx +
call sub_10151DA  +
mov byte ptr [ebp-4] 2 +
mov edi [ebp+14h] +
lea eax [ebp-24h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+8]  +
mov [ebp-1Ch] ebx +
mov [ebp-24h] ebx +
mov [edi] ebx +
call sub_104A4DC  +
mov esi eax +
cmp esi ebx +
jnz loc_104B30B  +
push offset word_10022EC  +
lea ecx [ebp-18h] +
call sub_101492B  +
test eax eax +
jz loc_104B2BE  +
cmp [ebp+10h] ebx +
jz loc_104B256  +
lea ecx [ebp-40h] +
call sub_103B217  +
mov byte ptr [ebp-4] 3 +
push 3  +
push ecx  +
lea eax [ebp-18h] +
mov ecx esp +
mov [ebp+10h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 4 +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-40h] +
call sub_103B6D1  +
cmp eax 0B7h +
jz loc_104B1E5  +
push dword ptr [ebp-18h]  +
push offset aCouldNotFindWs  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
mov esi 643h +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-40h] +
call sub_103AF75  +
jmp loc_104B30B  +
lea eax [ebp-14h] +
push eax  +
push 2  +
lea ecx [ebp-40h] +
call sub_103B80D  +
test eax eax +
jnz loc_104B207  +
push offset aCouldNotGetNam  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
jmp loc_104B1CF  +
lea ecx [ebp-40h] +
call sub_103ADBD  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-40h] +
call sub_103AF75  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp-14h]  +
push offset aInstallingIn_2  +
push 1  +
call sub_103AC75  +
add esp 10h +
cmp dword ptr [ebp+0Ch] 1 +
jz loc_104B2F3  +
jle loc_104B266  +
cmp dword ptr [ebp+0Ch] 4 +
jg loc_104B266  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
mov ecx edi +
call sub_1049A28  +
jmp loc_104B301  +
push offset aThisDriverStor  +
push 1  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
xor esi esi +
lea eax [ebp-10h] +
push eax  +
call sub_1049F17  +
cmp eax ebx +
jz loc_104B283  +
push eax  +
push offset aSomePostInstal  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
cmp [ebp-1Ch] ebx +
jz loc_104B291  +
push dword ptr [ebp-1Ch]  +
call sub_1021179  +
pop ecx  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-18h] +
call sub_1015174  +
mov [ebp-4] bl +
lea ecx [ebp-10h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call sub_1015174  +
mov eax esi +
call sub_1021FA5  +
retn 10h  +
cmp [ebp-20h] ebx +
jz loc_104B2C8  +
cmp [ebp+10h] ebx +
jz loc_104B256  +
mov ecx [ebp+8] +
lea eax [ebp-14h] +
push eax  +
push 2  +
call sub_103B80D  +
test eax eax +
jnz loc_104B21B  +
push offset aCouldNotGetNam  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
mov esi 643h +
jmp loc_104B30B  +
push edi  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
call sub_10497E2  +
mov esi eax +
cmp esi ebx +
jz loc_104B266  +
push offset aTheDriverInsta  +
push esi  +
push 3  +
call sub_103AD09  +
add esp 0Ch +
cmp [ebp-20h] ebx +
jnz loc_104B283  +
push edi  +
push dword ptr [ebp-24h]  +
lea eax [ebp-10h] +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_104AF7B  +
cmp eax ebx +
jz loc_104B283  +
push eax  +
push offset aError0xXEnco_2  +
jmp loc_104B279  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_1063194 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
lea esi [ebp+arg_0] +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
movs   +
mov eax ecx +
mov ecx [ebp+var_4] +
lea edi [eax+8] +
lea esi [ebp+var_14] +
movs   +
movs   +
movs   +
movs   +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1021557  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi+18h] 0 +
jnz loc_104B3C6  +
push [ebp+samDesired]  +
lea eax [esi+8] +
push eax  +
call ds:SetupDiOpenClassRegKey  +
mov [esi+18h] eax +
cmp eax 0FFFFFFFFh +
jnz loc_104B3C6  +
and dword ptr [esi+18h] 0 +
call ds:GetLastError  +
push eax  +
call ds:SetLastError  +
xor eax eax +
jmp loc_104B3C9  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
mov eax dword_1063194 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
lea eax [ebp+pSid] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 220h  +
push 20h  +
push 2  +
pop edi  +
push edi  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
mov esi ecx +
mov [ebp+pIdentifierAuthority.Value] bl +
mov [ebp+pIdentifierAuthority.Value+1] bl +
mov [ebp+pIdentifierAuthority.Value+2] bl +
mov [ebp+pIdentifierAuthority.Value+3] bl +
mov [ebp+pIdentifierAuthority.Value+4] bl +
mov [ebp+pIdentifierAuthority.Value+5] 5 +
mov [ebp+pSid] ebx +
mov [ebp+hMem] ebx +
call ds:AllocateAndInitializeSid  +
test eax eax +
jnz loc_104B438  +
call ds:GetLastError  +
mov [ebp+var_10] eax +
mov edi ebx +
jmp loc_104B4CF  +
mov eax [ebp+pSid] +
mov [ebp+pListOfExplicitEntries.Trustee.ptstrName] eax +
lea eax [ebp+hMem] +
push eax  +
push ebx  +
lea eax [ebp+pListOfExplicitEntries] +
push eax  +
push 1  +
mov [ebp+pListOfExplicitEntries.grfAccessPermissions] 1F0001h +
mov [ebp+pListOfExplicitEntries.grfAccessMode] edi +
mov [ebp+pListOfExplicitEntries.grfInheritance] ebx +
mov [ebp+pListOfExplicitEntries.Trustee.pMultipleTrustee] ebx +
mov [ebp+pListOfExplicitEntries.Trustee.MultipleTrusteeOperation] ebx +
mov [ebp+pListOfExplicitEntries.Trustee.TrusteeForm] ebx +
mov [ebp+pListOfExplicitEntries.Trustee.TrusteeType] edi +
call ds:SetEntriesInAclW  +
mov [ebp+var_10] eax +
cmp eax ebx +
jnz loc_104B4D6  +
push 14h  +
push 40h  +
call ds:LocalAlloc  +
mov edi eax +
cmp edi ebx +
jnz loc_104B488  +
mov [ebp+var_10] 0Eh +
jmp loc_104B4D8  +
push 1  +
push edi  +
call ds:InitializeSecurityDescriptor  +
test eax eax +
jz loc_104B4A6  +
push ebx  +
push [ebp+hMem]  +
push 1  +
push edi  +
call ds:SetSecurityDescriptorDacl  +
test eax eax +
jnz loc_104B4B1  +
call ds:GetLastError  +
mov [ebp+var_10] eax +
jmp loc_104B4CF  +
mov eax [ebp+pSid] +
mov [esi+0Ch] eax +
mov eax [ebp+hMem] +
mov dword ptr [esi] 0Ch +
mov [esi+4] edi +
mov [esi+8] ebx +
mov [esi+10h] eax +
mov [esi+14h] edi +
mov [ebp+var_10] ebx +
cmp [ebp+var_10] ebx +
jz loc_104B4FD  +
jmp loc_104B4D8  +
mov edi ebx +
cmp [ebp+pSid] ebx +
jz loc_104B4E6  +
push [ebp+pSid]  +
call ds:FreeSid  +
mov esi ds:LocalFree +
cmp [ebp+hMem] ebx +
jz loc_104B4F6  +
push [ebp+hMem]  +
call esi  +
cmp edi ebx +
jz loc_104B4FD  +
push edi  +
call esi  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_10] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1021557  +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi eax +
mov eax [esi+0Ch] +
push edi  +
test eax eax +
jz loc_104B528  +
push eax  +
call ds:FreeSid  +
mov eax [esi+10h] +
mov edi ds:LocalFree +
test eax eax +
jz loc_104B538  +
push eax  +
call edi  +
mov esi [esi+14h] +
test esi esi +
jz loc_104B542  +
push esi  +
call edi  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
push edi  +
xor edi edi +
push 20019h  +
mov esi ecx +
mov [ebp+hKey] edi +
mov [ebp+pv] edi +
xor ebx ebx +
mov [ebp+var_C] edi +
call sub_104B38E  +
test eax eax +
jnz loc_104B586  +
call ds:GetLastError  +
push eax  +
call ds:SetLastError  +
xor eax eax +
jmp loc_104B63E  +
mov ecx esi +
call sub_103EB4C  +
lea eax [ebp+hKey] +
push eax  +
push 20006h  +
push edi  +
push offset aSystemCurrentc  +
push 80000002h  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_104B603  +
lea eax [ebp+pv] +
push eax  +
add esi 8 +
push esi  +
call ds:StringFromCLSID  +
test eax eax +
jnz loc_104B603  +
mov ecx [ebp+arg_0] +
cmp [ecx+8] edi +
jz loc_104B5EE  +
lea eax [ebp+var_C] +
push eax  +
call sub_1035D59  +
mov ebx eax +
cmp ebx edi +
jz loc_104B603  +
mov eax [ebp+var_C] +
add eax eax +
push eax  +
push ebx  +
push 7  +
push edi  +
push [ebp+pv]  +
push [ebp+hKey]  +
call ds:RegSetValueExW  +
test eax eax +
jmp loc_104B601  +
push [ebp+pv]  +
push [ebp+hKey]  +
call ds:RegDeleteValueW  +
cmp eax edi +
jz loc_104B612  +
cmp eax 2 +
jz loc_104B612  +
push 65Bh  +
call ds:SetLastError  +
xor esi esi +
jmp loc_104B615  +
xor esi esi +
inc esi  +
cmp [ebp+hKey] edi +
jz loc_104B623  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
cmp ebx edi +
jz loc_104B62E  +
push ebx  +
call sub_1021189  +
pop ecx  +
cmp [ebp+pv] edi +
jz loc_104B63C  +
push [ebp+pv]  +
call ds:CoTaskMemFree  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ecx +
test esi esi +
jz loc_104B661  +
mov ecx esi +
call sub_101A96E  +
mov [edi] esi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ecx] +
test esi esi +
jz loc_104B692  +
push [ebp+arg_0]  +
call sub_104B64A  +
test esi esi +
jz loc_104B68D  +
mov ecx esi +
call sub_101A986  +
pop esi  +
pop ebp  +
retn 4  +
pop esi  +
pop ebp  +
jmp sub_104B64A  +
***
call sub_1021EB9  +
mov esi ecx +
push 28h  +
call sub_10225EB  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_104B6C7  +
call sub_10503B4  +
or dword ptr [ebp-4] 0FFFFFFFFh +
push eax  +
mov ecx esi +
call sub_104B66E  +
mov eax esi +
call sub_1021FA5  +
retn   +
***
call sub_1021EB9  +
lea ecx [ebp-10h] +
call sub_10151DA  +
xor esi esi +
mov [ebp-4] esi +
mov [ebp-14h] esi +
mov byte ptr [ebp-4] 1 +
mov eax [ebp+0Ch] +
mov ecx [ebp+8] +
mov [eax] esi +
lea eax [ebp-10h] +
push eax  +
push 7  +
call sub_103B80D  +
test eax eax +
jnz loc_104B72C  +
push offset aCouldNotGetT_4  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
mov esi 643h +
jmp loc_104B752  +
lea eax [ebp-10h] +
push eax  +
xor ecx ecx +
call sub_10521DF  +
test eax eax +
jnz loc_104B752  +
push dword ptr [ebp-10h]  +
push offset aUnableToRemove  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
mov esi 65Bh +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_1015174  +
mov eax esi +
call sub_1021FA5  +
retn 8  +
***
call sub_1021EB9  +
mov esi ecx +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-10h] 0 +
mov edi [ebp+8] +
mov ecx edi +
call sub_10151DA  +
and dword ptr [ebp-4] 0 +
push 20h  +
mov ecx edi +
mov dword ptr [ebp-10h] 1 +
call sub_10158A3  +
push 0  +
push 104h  +
push eax  +
add esi 8 +
push esi  +
call ds:SetupDiClassNameFromGuidW  +
push 0FFFFFFFFh  +
mov ecx edi +
call sub_1015023  +
mov eax edi +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EB9  +
xor ebx ebx +
mov [ebp-4] ebx +
lea ecx [ebp-18h] +
mov [ebp-10h] ebx +
call sub_10151DA  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-14h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 2 +
mov edi [ebp+10h] +
cmp edi ebx +
jz loc_104B9C6  +
cmp [ebp+14h] ebx +
jz loc_104B9C6  +
mov esi 80000000h +
push esi  +
push ebx  +
push ebx  +
mov [edi] ebx +
call ds:OpenSCManagerW  +
mov [ebp-24h] eax +
cmp eax ebx +
jnz loc_104B829  +
xor esi esi +
jmp loc_104B980  +
push esi  +
lea ecx [ebp+8] +
call sub_1015002  +
push eax  +
push dword ptr [ebp-24h]  +
call ds:OpenServiceW  +
mov [ebp-20h] eax +
cmp eax ebx +
jnz loc_104B960  +
call ds:GetLastError  +
cmp eax 424h +
jnz loc_104B95C  +
mov eax [ebp+0Ch] +
push offset aSystemCurren_0  +
lea ecx [ebp+0Ch] +
mov dword ptr [eax] 1 +
call sub_10161A7  +
mov byte ptr [ebp-4] 3 +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp+8] +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
call sub_10360F6  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp+0Ch] +
call sub_1015174  +
push off_10646A4  +
lea ecx [ebp-1Ch] +
call sub_10161A7  +
mov byte ptr [ebp-4] 4 +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-18h] +
push eax  +
call sub_10360F6  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-1Ch] +
call sub_1015174  +
lea eax [ebp-10h] +
push eax  +
push 2001Fh  +
push ebx  +
lea ecx [ebp-14h] +
call sub_1015002  +
push eax  +
mov esi 80000002h +
push esi  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_104B95C  +
push dword ptr [ebp+14h]  +
mov edi ds:RegQueryValueExW +
push ebx  +
push ebx  +
push ebx  +
push off_10646A8  +
push dword ptr [ebp-10h]  +
call edi  +
test eax eax +
jnz loc_104B95C  +
mov eax [ebp+14h] +
push dword ptr [eax]  +
call sub_1054617  +
pop ecx  +
mov ecx [ebp+10h] +
mov [ecx] eax +
cmp eax ebx +
jz loc_104B95C  +
push dword ptr [ebp+14h]  +
push eax  +
push ebx  +
push ebx  +
push off_10646A8  +
push dword ptr [ebp-10h]  +
call edi  +
test eax eax +
jnz loc_104B95C  +
push dword ptr [ebp-10h]  +
call ds:RegCloseKey  +
lea ecx [ebp-14h] +
mov [ebp-10h] ebx +
call sub_1015002  +
mov edi ds:RegDeleteKeyW +
push eax  +
push esi  +
call edi  +
test eax eax +
jnz loc_104B95C  +
lea ecx [ebp-18h] +
call sub_1015002  +
push eax  +
push esi  +
call edi  +
mov esi eax +
neg esi  +
sbb esi esi +
inc esi  +
jmp loc_104B968  +
xor esi esi +
jmp loc_104B968  +
mov eax [ebp+0Ch] +
xor esi esi +
inc esi  +
mov [eax] ebx +
mov edi ds:CloseServiceHandle +
cmp [ebp-20h] ebx +
jz loc_104B978  +
push dword ptr [ebp-20h]  +
call edi  +
push dword ptr [ebp-24h]  +
call edi  +
mov edi [ebp+10h] +
cmp [ebp-10h] ebx +
jz loc_104B98E  +
push dword ptr [ebp-10h]  +
call ds:RegCloseKey  +
cmp esi ebx +
jnz loc_104B99F  +
mov edi [edi] +
cmp edi ebx +
jz loc_104B99F  +
push edi  +
call sub_1021179  +
pop ecx  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-14h] +
call sub_1015174  +
mov [ebp-4] bl +
lea ecx [ebp-18h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
mov eax esi +
jmp loc_104B9EB  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-14h] +
call sub_1015174  +
mov [ebp-4] bl +
lea ecx [ebp-18h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
xor eax eax +
call sub_1021FA5  +
retn 10h  +
***
call sub_1021EB9  +
xor ebx ebx +
mov [ebp-4] ebx +
lea ecx [ebp-14h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-18h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 2 +
mov [ebp-10h] ebx +
cmp [ebp+0Ch] ebx +
jnz loc_104BA58  +
xor esi esi +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-18h] +
call sub_1015174  +
mov [ebp-4] bl +
lea ecx [ebp-14h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
mov eax esi +
call sub_1021FA5  +
retn 0Ch  +
push offset aSystemCurren_0  +
lea ecx [ebp-1Ch] +
call sub_10161A7  +
mov byte ptr [ebp-4] 3 +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp+8] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
call sub_10360F6  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-1Ch] +
call sub_1015174  +
push off_10646A4  +
lea ecx [ebp-20h] +
call sub_10161A7  +
mov byte ptr [ebp-4] 4 +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
call sub_10360F6  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-20h] +
call sub_1015174  +
push ebx  +
lea eax [ebp-10h] +
push eax  +
push ebx  +
push 2001Fh  +
push ebx  +
push ebx  +
push ebx  +
lea ecx [ebp-18h] +
call sub_1015002  +
push eax  +
push 80000002h  +
call ds:RegCreateKeyExW  +
test eax eax +
jz loc_104BADF  +
xor esi esi +
jmp loc_104BAFE  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push 7  +
push ebx  +
push off_10646A8  +
push dword ptr [ebp-10h]  +
call ds:RegSetValueExW  +
mov esi eax +
neg esi  +
sbb esi esi +
inc esi  +
cmp [ebp-10h] ebx +
jz loc_104BA2B  +
push dword ptr [ebp-10h]  +
call ds:RegCloseKey  +
jmp loc_104BA2B  +
***
call sub_1021EB9  +
xor ebx ebx +
lea ecx [ebp-18h] +
mov [ebp-14h] ebx +
mov [ebp-24h] ebx +
call sub_10151DA  +
mov [ebp-4] ebx +
lea ecx [ebp-10h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 1 +
push offset aSystemCurren_0  +
lea ecx [ebp-1Ch] +
call sub_10161A7  +
mov byte ptr [ebp-4] 2 +
lea eax [ebp-18h] +
push eax  +
push dword ptr [ebp+8]  +
lea eax [ebp-1Ch] +
push eax  +
call sub_10360F6  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-1Ch] +
call sub_1015174  +
push off_10646A4  +
lea ecx [ebp-20h] +
call sub_10161A7  +
mov byte ptr [ebp-4] 3 +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
call sub_10360F6  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-20h] +
call sub_1015174  +
lea eax [ebp-14h] +
push eax  +
push 2001Fh  +
push ebx  +
push dword ptr [ebp-10h]  +
mov esi 80000002h +
push esi  +
call ds:RegOpenKeyExW  +
mov edi eax +
cmp edi ebx +
jz loc_104BBD4  +
cmp edi 2 +
jz loc_104BC28  +
mov eax [ebp+8] +
push dword ptr [eax]  +
push edi  +
push offset aError0xXEncoun  +
push 3  +
jmp loc_104BC1E  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push off_10646A8  +
push dword ptr [ebp-14h]  +
call ds:RegQueryValueExW  +
cmp eax 2 +
jnz loc_104BBF3  +
mov dword ptr [ebp-24h] 1 +
push dword ptr [ebp-14h]  +
call ds:RegCloseKey  +
cmp [ebp-24h] ebx +
jz loc_104BC28  +
push dword ptr [ebp-10h]  +
push esi  +
call ds:RegDeleteKeyW  +
mov edi eax +
cmp edi ebx +
jz loc_104BC28  +
mov eax [ebp+8] +
push dword ptr [eax]  +
push edi  +
push offset aError0xXCouldN  +
push 1  +
call sub_103AC75  +
add esp 10h +
jmp loc_104BC2A  +
xor edi edi +
mov [ebp-4] bl +
lea ecx [ebp-10h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-18h] +
call sub_1015174  +
mov eax edi +
call sub_1021FA5  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
xor edi edi +
mov esi 20019h +
push esi  +
mov ebx ecx +
mov [ebp+hKey] edi +
mov [ebp+pv] edi +
mov [ebp+var_10] edi +
mov [ebp+cbData] edi +
call sub_104B38E  +
test eax eax +
jnz loc_104BC8E  +
call ds:GetLastError  +
push eax  +
call ds:SetLastError  +
xor eax eax +
jmp loc_104BD51  +
mov ecx ebx +
call sub_103EB4C  +
lea eax [ebp+hKey] +
push eax  +
push esi  +
push edi  +
push offset aSystemCurrentc  +
push 80000002h  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_104BD0A  +
lea eax [ebp+pv] +
push eax  +
add ebx 8 +
push ebx  +
call ds:StringFromCLSID  +
test eax eax +
jnz loc_104BD0A  +
mov esi ds:RegQueryValueExW +
lea eax [ebp+cbData] +
push eax  +
push edi  +
push edi  +
push edi  +
push [ebp+pv]  +
push [ebp+hKey]  +
call esi  +
cmp eax edi +
jz loc_104BCE1  +
cmp eax 2 +
jz loc_104BD22  +
jmp loc_104BD0A  +
add [ebp+cbData] 4 +
push [ebp+cbData]  +
call sub_1054617  +
mov ebx eax +
pop ecx  +
mov [ebp+var_10] ebx +
cmp ebx edi +
jz loc_104BD0A  +
lea eax [ebp+cbData] +
push eax  +
push ebx  +
push edi  +
push edi  +
push [ebp+pv]  +
push [ebp+hKey]  +
call esi  +
test eax eax +
jz loc_104BD19  +
push 65Bh  +
call ds:SetLastError  +
xor esi esi +
jmp loc_104BD25  +
mov ecx [ebp+arg_0] +
push ebx  +
call sub_103C474  +
xor esi esi +
inc esi  +
cmp [ebp+hKey] edi +
jz loc_104BD33  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
cmp [ebp+var_10] edi +
jz loc_104BD41  +
push [ebp+var_10]  +
call sub_1021189  +
pop ecx  +
cmp [ebp+pv] edi +
jz loc_104BD4F  +
push [ebp+pv]  +
call ds:CoTaskMemFree  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
call sub_1021F2C  +
mov edi [ebp+8] +
mov eax [ebp+0Ch] +
xor ebx ebx +
mov [ebp-9DCh] edi +
mov [ebp-9E0h] eax +
mov [ebp-9D0h] ebx +
mov [ebp-4] ebx +
lea ecx [ebp-9D0h] +
call sub_10427B7  +
mov esi [ebp-9D0h] +
push 4  +
push ebx  +
push ebx  +
push ebx  +
mov ecx esi +
call sub_10455F2  +
test eax eax +
jnz loc_104BDB1  +
xor edi edi +
jmp loc_104BFB1  +
mov edi [edi] +
mov [ebp-9D4h] edi +
cmp edi ebx +
jz loc_104BFAE  +
mov edi ds:SetupDiEnumDeviceInfo +
mov ecx [ebp-9DCh] +
lea eax [ebp-9D4h] +
push eax  +
call sub_105038C  +
push eax  +
lea ecx [ebp-9C0h] +
call sub_10151F2  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-9BCh] +
push ecx  +
mov dword ptr [ebp-9BCh] 1Ch +
mov [ebp-9CCh] ebx +
push ebx  +
jmp loc_104BF75  +
inc dword ptr [ebp-9CCh]  +
mov [ebp-9C8h] ebx +
mov eax [esi+8] +
lea ecx [ebp-9FCh] +
push ecx  +
push 800h  +
lea ecx [ebp-9A0h] +
push ecx  +
xor ecx ecx +
cmp [ebp-9C8h] ebx +
push ebx  +
setz cl  +
inc ecx  +
push ecx  +
lea ecx [ebp-9BCh] +
push ecx  +
push eax  +
call ds:SetupDiGetDeviceRegistryPropertyW  +
test eax eax +
jnz loc_104BE6C  +
call ds:GetLastError  +
cmp eax 0Dh +
jz loc_104BF55  +
xor edi edi +
mov [ebp-4] bl +
lea ecx [ebp-9C0h] +
call sub_1015174  +
jmp loc_104BFB1  +
lea ecx [ebp-9F8h] +
call sub_1014C71  +
mov byte ptr [ebp-4] 2 +
lea eax [ebp-9A0h] +
push eax  +
lea ecx [ebp-9F8h] +
call sub_103C474  +
mov eax [ebp-9F8h] +
mov [ebp-9D8h] eax +
cmp eax ebx +
jz loc_104BF46  +
lea eax [ebp-9D8h] +
push eax  +
lea ecx [ebp-9F8h] +
call sub_105038C  +
push eax  +
lea ecx [ebp-9C4h] +
call sub_10151F2  +
mov byte ptr [ebp-4] 3 +
push dword ptr [ebp-9C0h]  +
lea ecx [ebp-9C4h] +
call sub_101492B  +
test eax eax +
jnz loc_104BF2B  +
mov eax [esi+8] +
push ebx  +
push 0C8h  +
lea ecx [ebp-1A0h] +
push ecx  +
lea ecx [ebp-9BCh] +
push ecx  +
push eax  +
call ds:SetupDiGetDeviceInstanceIdW  +
test eax eax +
jz loc_104BFD0  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp-1A0h] +
push eax  +
mov eax [ebp-9E0h] +
push dword ptr [eax]  +
call ds:SetupDiOpenDeviceInfoW  +
test eax eax +
jnz loc_104BF2B  +
call ds:GetLastError  +
cmp eax 6F8h +
jnz loc_104BFD0  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-9C4h] +
call sub_1015174  +
cmp [ebp-9D8h] ebx +
jnz loc_104BEA1  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-9F8h] +
call sub_1014FBC  +
inc dword ptr [ebp-9C8h]  +
cmp dword ptr [ebp-9C8h] 2 +
jb loc_104BE12  +
lea ecx [ebp-9BCh] +
push ecx  +
push dword ptr [ebp-9CCh]  +
mov eax [esi+8] +
push eax  +
call edi  +
test eax eax +
jnz loc_104BE06  +
call ds:GetLastError  +
cmp eax 103h +
jnz loc_104BE57  +
mov [ebp-4] bl +
lea ecx [ebp-9C0h] +
call sub_1015174  +
cmp [ebp-9D4h] ebx +
jnz loc_104BDC7  +
xor edi edi +
inc edi  +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp esi ebx +
jz loc_104BFC6  +
mov ecx esi +
call sub_101A986  +
mov [ebp-9D0h] ebx +
mov eax edi +
call sub_1021FBE  +
retn 8  +
xor edi edi +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-9C4h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-9F8h] +
call sub_1014FBC  +
jmp loc_104BE59  +
***
call sub_1021EF1  +
mov edi ecx +
mov esi [ebp+8] +
lea ecx [ebp-5Ch] +
call sub_1014C71  +
xor ebx ebx +
mov [ebp-4] ebx +
mov [ebp-24h] ebx +
mov byte ptr [ebp-4] 1 +
push dword ptr [esi]  +
push offset aInstallingCl_0  +
push 1  +
call sub_103AC75  +
add esp 0Ch +
mov eax [ebp+0Ch] +
mov [eax] ebx +
push dword ptr [edi]  +
lea ecx [ebp-5Ch] +
call sub_10172FC  +
lea ecx [ebp-24h] +
call sub_104B69E  +
lea eax [ebp-5Ch] +
push eax  +
mov ecx [ebp-24h] +
call sub_1052149  +
mov [ebp-1Ch] ebx +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-1Ch] +
call sub_103ECE0  +
mov byte ptr [ebp-4] 3 +
push esi  +
mov ecx [ebp-1Ch] +
call sub_1046459  +
lea ecx [ebp-18h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 4 +
push 5  +
lea eax [ebp-18h] +
push eax  +
mov ecx [ebp-1Ch] +
call sub_1047618  +
test eax eax +
jnz loc_104C0BD  +
push dword ptr [esi]  +
push offset aCouldNotDeterm  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
mov dword ptr [ebp-20h] 65Bh +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-18h] +
call sub_1015174  +
mov byte ptr [ebp-4] 2 +
jmp loc_104C2C2  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
mov ecx [ebp-1Ch] +
call sub_1046C8D  +
mov byte ptr [ebp-4] 5 +
cmp [ebp-14h] ebx +
jnz loc_104C103  +
push dword ptr [esi]  +
push offset aInfWsDoesNotHa  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
mov dword ptr [ebp-20h] 65Bh +
mov byte ptr [ebp-4] 4 +
mov ecx [ebp-14h] +
cmp ecx ebx +
jz loc_104C0A8  +
call sub_101A986  +
mov [ebp-14h] ebx +
jmp loc_104C0A8  +
mov [ebp-30h] ebx +
mov [ebp-28h] ebx +
lea eax [ebp-38h] +
push eax  +
lea eax [ebp-28h] +
push eax  +
lea eax [ebp-30h] +
push eax  +
push ecx  +
mov ecx esp +
mov [ebp-3Ch] esp +
push edi  +
call sub_10151F2  +
mov byte ptr [ebp-4] 6 +
mov byte ptr [ebp-4] 5 +
call sub_104B7CB  +
cmp eax ebx +
jz loc_104C0E7  +
mov [ebp-2Ch] ebx +
lea eax [ebp-2Ch] +
push eax  +
push ecx  +
mov ecx esp +
mov [ebp-3Ch] esp +
push esi  +
call sub_10151F2  +
mov byte ptr [ebp-4] 7 +
mov ecx [ebp-14h] +
mov byte ptr [ebp-4] 5 +
call sub_1047269  +
cmp [ebp-2Ch] ebx +
jz loc_104C174  +
push dword ptr [esi]  +
push offset aWsRequiresAReb  +
xor esi esi +
inc esi  +
push esi  +
call sub_103AC75  +
add esp 0Ch +
mov eax [ebp+0Ch] +
mov [eax] esi +
jmp loc_104C177  +
xor esi esi +
inc esi  +
cmp [ebp-30h] ebx +
jz loc_104C1BD  +
push dword ptr [ebp-38h]  +
push dword ptr [ebp-28h]  +
push ecx  +
mov ecx esp +
mov [ebp-3Ch] esp +
push edi  +
call sub_10151F2  +
mov byte ptr [ebp-4] 8 +
mov byte ptr [ebp-4] 5 +
call sub_104B9F8  +
cmp eax ebx +
jnz loc_104C1B4  +
mov dword ptr [ebp-20h] 65Bh +
push dword ptr [ebp-28h]  +
call sub_1021179  +
pop ecx  +
jmp loc_104C0EE  +
push dword ptr [ebp-28h]  +
call sub_1021179  +
pop ecx  +
mov byte ptr [ebp-4] 4 +
mov ecx [ebp-14h] +
cmp ecx ebx +
jz loc_104C1D0  +
call sub_101A986  +
mov [ebp-14h] ebx +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-18h] +
call sub_1015174  +
mov dword ptr [ebp-4] 2 +
mov [ebp-34h] ebx +
lea eax [ebp-34h] +
push eax  +
push esi  +
lea eax [ebp-5Ch] +
push eax  +
mov ecx [ebp-24h] +
call sub_1051D4B  +
cmp [ebp-34h] ebx +
jz loc_104C201  +
mov eax [ebp+0Ch] +
mov [eax] esi +
mov [ebp-20h] ebx +
jmp loc_104C2C2  +
push offset aError0xXEnco_3  +
push 3  +
call sub_103AC75  +
add esp 14h +
jmp loc_104C288  +
push offset aErrorEncount_2  +
push 3  +
call sub_103AC75  +
add esp 10h +
mov byte ptr [ebp-4] 0Bh +
lea ecx [ebp+0Ch] +
call sub_1015174  +
mov byte ptr [ebp-4] 0Ah +
lea ecx [ebp-30h] +
call sub_1015174  +
mov dword ptr [ebp-20h] 643h +
mov byte ptr [ebp-4] 9 +
lea ecx [ebp-44h] +
call sub_10427F9  +
mov dword ptr [ebp-4] 2 +
mov eax offset loc_104C2C0 +
retn   +
xor ebx ebx +
mov byte ptr [ebp-4] 1 +
mov ecx [ebp-1Ch] +
cmp ecx ebx +
jz loc_104C2D5  +
call sub_101A986  +
mov [ebp-1Ch] ebx +
mov [ebp-4] bl +
mov ecx [ebp-24h] +
cmp ecx ebx +
jz loc_104C2E7  +
call sub_101A986  +
mov [ebp-24h] ebx +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-5Ch] +
call sub_1014FBC  +
mov eax [ebp-20h] +
call sub_1021FA5  +
retn 8  +
***
call sub_1021F67  +
mov esi ecx +
mov [ebp-220h] esi +
mov eax [ebp+8] +
mov [ebp-1F8h] eax +
mov eax [ebp+0Ch] +
mov [ebp-1FCh] eax +
mov edi edx +
mov [ebp-224h] edi +
xor ebx ebx +
mov [ebp-1CCh] ebx +
mov [ebp-210h] ebx +
mov [ebp-4] ebx +
or dword ptr [ebp-1E8h] 0FFFFFFFFh +
push dword ptr [esi]  +
push offset aInstallingDe_0  +
push 1  +
call sub_103AC75  +
add esp 0Ch +
mov [edi] ebx +
push dword ptr [ebp-1F8h]  +
xor ecx ecx +
call sub_10517DE  +
mov [ebp-200h] ebx +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-200h] +
call sub_103ECE0  +
mov byte ptr [ebp-4] 2 +
push esi  +
mov edi [ebp-200h] +
mov ecx edi +
call sub_1046459  +
lea ecx [ebp-1DCh] +
call sub_10151DA  +
mov byte ptr [ebp-4] 3 +
push 9  +
lea eax [ebp-1DCh] +
push eax  +
mov ecx edi +
call sub_1047618  +
test eax eax +
jnz loc_104C3E9  +
push dword ptr [esi]  +
push offset aCouldNotDeterm  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
mov dword ptr [ebp-1CCh] 65Bh +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-1DCh] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
jmp loc_104CDC2  +
lea eax [ebp-1DCh] +
push eax  +
lea eax [ebp-1C4h] +
push eax  +
mov ecx edi +
call sub_1046C8D  +
mov byte ptr [ebp-4] 4 +
cmp [ebp-1C4h] ebx +
jnz loc_104C440  +
push dword ptr [esi]  +
push offset aInfWsDoesNotHa  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
mov dword ptr [ebp-1CCh] 65Bh +
mov byte ptr [ebp-4] 3 +
mov ecx [ebp-1C4h] +
cmp ecx ebx +
jz loc_104C3D1  +
call sub_101A986  +
mov [ebp-1C4h] ebx +
jmp loc_104C3D1  +
mov [ebp-1E4h] ebx +
mov [ebp-1D8h] ebx +
lea eax [ebp-208h] +
push eax  +
lea eax [ebp-1D8h] +
push eax  +
lea eax [ebp-1E4h] +
push eax  +
push ecx  +
mov ecx esp +
mov [ebp-1F0h] esp +
push dword ptr [ebp-1F8h]  +
call sub_10151F2  +
mov byte ptr [ebp-4] 5 +
mov byte ptr [ebp-4] 4 +
call sub_104B7CB  +
cmp eax ebx +
jz loc_104C41B  +
mov [ebp-21Ch] ebx +
lea eax [ebp-21Ch] +
push eax  +
push ecx  +
mov ecx esp +
mov [ebp-1F0h] esp +
push esi  +
call sub_10151F2  +
mov byte ptr [ebp-4] 6 +
mov ecx [ebp-1C4h] +
mov byte ptr [ebp-4] 4 +
call sub_1047269  +
cmp [ebp-21Ch] ebx +
jz loc_104C4DA  +
push dword ptr [esi]  +
push offset aWsRequiresAReb  +
push 1  +
call sub_103AC75  +
add esp 0Ch +
mov eax [ebp-224h] +
mov dword ptr [eax] 1 +
cmp [ebp-1E4h] ebx +
jz loc_104C53A  +
push dword ptr [ebp-208h]  +
push dword ptr [ebp-1D8h]  +
push ecx  +
mov ecx esp +
mov [ebp-1F0h] esp +
push dword ptr [ebp-1F8h]  +
call sub_10151F2  +
mov byte ptr [ebp-4] 7 +
mov byte ptr [ebp-4] 4 +
call sub_104B9F8  +
cmp eax ebx +
jnz loc_104C52E  +
mov dword ptr [ebp-1CCh] 65Bh +
push dword ptr [ebp-1D8h]  +
call sub_1021179  +
pop ecx  +
jmp loc_104C425  +
push dword ptr [ebp-1D8h]  +
call sub_1021179  +
pop ecx  +
push offset aAddproperty  +
lea ecx [ebp-1E4h] +
call sub_10161A7  +
mov byte ptr [ebp-4] 8 +
lea eax [ebp-1E4h] +
push eax  +
lea eax [ebp-1C8h] +
push eax  +
mov ecx [ebp-1C4h] +
call sub_1046D41  +
mov byte ptr [ebp-4] 0Ah +
lea ecx [ebp-1E4h] +
call sub_1015174  +
mov ecx [ebp-1C8h] +
cmp ecx ebx +
jnz loc_104C5BD  +
push dword ptr [esi]  +
push offset aAddpropertyLin  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
mov dword ptr [ebp-1CCh] 65Bh +
mov byte ptr [ebp-4] 4 +
mov ecx [ebp-1C8h] +
cmp ecx ebx +
jz loc_104C425  +
call sub_101A986  +
mov [ebp-1C8h] ebx +
jmp loc_104C425  +
push 1  +
lea eax [ebp-1E0h] +
push eax  +
call sub_10464ED  +
mov byte ptr [ebp-4] 0Bh +
mov eax [ebp-1E0h] +
cmp [eax-0Ch] ebx +
jnz loc_104C606  +
push dword ptr [esi]  +
push offset aAddpropertySec  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
mov dword ptr [ebp-1CCh] 65Bh +
mov byte ptr [ebp-4] 0Ah +
lea ecx [ebp-1E0h] +
call sub_1015174  +
jmp loc_104C59B  +
lea eax [ebp-1E0h] +
push eax  +
lea eax [ebp-1D4h] +
push eax  +
mov ecx edi +
call sub_1046BD3  +
mov byte ptr [ebp-4] 0Ch +
mov ecx [ebp-1D4h] +
cmp ecx ebx +
jnz loc_104C665  +
push dword ptr [esi]  +
push dword ptr [ebp-1E0h]  +
push offset aUnableToFindAd  +
push 3  +
call sub_103AC75  +
add esp 10h +
mov dword ptr [ebp-1CCh] 65Bh +
mov byte ptr [ebp-4] 0Bh +
mov ecx [ebp-1D4h] +
cmp ecx ebx +
jz loc_104C5F5  +
call sub_101A986  +
mov [ebp-1D4h] ebx +
jmp loc_104C5F5  +
lea eax [ebp-1D0h] +
push eax  +
call sub_104717E  +
mov byte ptr [ebp-4] 0Dh +
cmp [ebp-1D0h] ebx +
jnz loc_104C6B9  +
push dword ptr [esi]  +
push dword ptr [ebp-1E0h]  +
push offset aUnableToFindAn  +
push 3  +
call sub_103AC75  +
add esp 10h +
mov dword ptr [ebp-1CCh] 65Bh +
mov byte ptr [ebp-4] 0Ch +
mov ecx [ebp-1D0h] +
cmp ecx ebx +
jz loc_104C64A  +
call sub_101A986  +
mov [ebp-1D0h] ebx +
jmp loc_104C64A  +
mov [ebp-1F4h] ebx +
mov [ebp-1ECh] ebx +
xor edi edi +
inc edi  +
cmp dword ptr [ebp-1ECh] 2 +
jnb loc_104C844  +
push edi  +
lea eax [ebp-1D8h] +
push eax  +
mov ecx [ebp-1D0h] +
call sub_10464ED  +
mov byte ptr [ebp-4] 0Eh +
mov eax [ebp-1D8h] +
cmp [eax-0Ch] ebx +
jnz loc_104C7B6  +
push dword ptr [esi]  +
push dword ptr [ebp-1E0h]  +
push offset aUnableToReadPr  +
push 3  +
call sub_103AC75  +
add esp 10h +
mov dword ptr [ebp-1CCh] 65Bh +
mov byte ptr [ebp-4] 0Dh +
lea ecx [ebp-1D8h] +
call sub_1015174  +
mov byte ptr [ebp-4] 0Ch +
mov ecx [ebp-1D0h] +
cmp ecx ebx +
jz loc_104C744  +
call sub_101A986  +
mov [ebp-1D0h] ebx +
mov byte ptr [ebp-4] 0Bh +
mov ecx [ebp-1D4h] +
cmp ecx ebx +
jz loc_104C75D  +
call sub_101A986  +
mov [ebp-1D4h] ebx +
mov byte ptr [ebp-4] 0Ah +
lea ecx [ebp-1E0h] +
call sub_1015174  +
mov byte ptr [ebp-4] 4 +
mov ecx [ebp-1C8h] +
cmp ecx ebx +
jz loc_104C785  +
call sub_101A986  +
mov [ebp-1C8h] ebx +
mov byte ptr [ebp-4] 3 +
mov ecx [ebp-1C4h] +
cmp ecx ebx +
jz loc_104C79E  +
call sub_101A986  +
mov [ebp-1C4h] ebx +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-1DCh] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
jmp loc_104CDAD  +
push offset aUpperfilters  +
lea ecx [ebp-1D8h] +
call sub_101492B  +
test eax eax +
jnz loc_104C7D2  +
or [ebp-1F4h] edi +
jmp loc_104C7F1  +
push offset aLowerfilters  +
lea ecx [ebp-1D8h] +
call sub_101492B  +
test eax eax +
jnz loc_104C890  +
or dword ptr [ebp-1F4h] 2 +
lea eax [ebp-1F0h] +
push eax  +
mov ecx [ebp-1D0h] +
call sub_1046A71  +
mov byte ptr [ebp-4] 0Fh +
push dword ptr [eax]  +
lea ecx [ebp-1D0h] +
call sub_103ECC4  +
mov byte ptr [ebp-4] 0Eh +
mov ecx [ebp-1F0h] +
cmp ecx ebx +
jz loc_104C82D  +
call sub_101A986  +
mov [ebp-1F0h] ebx +
cmp [ebp-1D0h] ebx +
jnz loc_104C876  +
mov byte ptr [ebp-4] 0Dh +
lea ecx [ebp-1D8h] +
call sub_1015174  +
push ebx  +
push ebx  +
call ds:SetupDiCreateDeviceInfoList  +
mov [ebp-1E8h] eax +
cmp eax 0FFFFFFFFh +
jnz loc_104C8B4  +
push offset aUnableToCreate  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
call ds:GetLastError  +
mov [ebp-1CCh] eax +
jmp loc_104C69E  +
mov byte ptr [ebp-4] 0Dh +
lea ecx [ebp-1D8h] +
call sub_1015174  +
inc dword ptr [ebp-1ECh]  +
jmp loc_104C6C8  +
push dword ptr [ebp-1D8h]  +
push offset aTheWsDevicePro  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
mov dword ptr [ebp-1CCh] 0Dh +
jmp loc_104C71C  +
lea eax [ebp-1E8h] +
push eax  +
push dword ptr [ebp-1FCh]  +
call sub_104BD5D  +
test eax eax +
jnz loc_104C8E7  +
push offset aUnableToGetT_1  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
mov dword ptr [ebp-1CCh] 65Bh +
jmp loc_104C72B  +
mov [ebp-1F0h] ebx +
mov [ebp-204h] ebx +
mov dword ptr [ebp-1C0h] 1Ch +
mov eax [ebp-204h] +
inc dword ptr [ebp-204h]  +
lea ecx [ebp-1C0h] +
push ecx  +
push eax  +
push dword ptr [ebp-1E8h]  +
call ds:SetupDiEnumDeviceInfo  +
test eax eax +
jz loc_104CBBE  +
mov [ebp-1F0h] edi +
lea ecx [ebp-1D8h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 10h +
push ebx  +
push 0C8h  +
lea eax [ebp-1A4h] +
push eax  +
lea eax [ebp-1C0h] +
push eax  +
push dword ptr [ebp-1E8h]  +
call ds:SetupDiGetDeviceInstanceIdW  +
lea ecx [ebp-1D8h] +
test eax eax +
jz loc_104C972  +
lea eax [ebp-1A4h] +
push eax  +
call sub_10158CD  +
jmp loc_104C977  +
call sub_1014FC6  +
mov [ebp-1ECh] ebx +
cmp dword ptr [ebp-1ECh] 2 +
jnb loc_104CBAA  +
lea ecx [ebp-244h] +
call sub_1014C71  +
mov byte ptr [ebp-4] 11h +
cmp [ebp-1ECh] ebx +
jz loc_104C9C4  +
test byte ptr [ebp-1F4h] 2 +
jnz loc_104C9CD  +
mov byte ptr [ebp-4] 10h +
lea ecx [ebp-244h] +
call sub_1014FBC  +
inc dword ptr [ebp-1ECh]  +
xor edi edi +
inc edi  +
jmp loc_104C97D  +
test byte ptr [ebp-1F4h] 1 +
jz loc_104C9AA  +
mov [ebp-214h] ebx +
xor eax eax +
cmp [ebp-1ECh] ebx +
setnz al  +
add eax 11h +
mov edi eax +
lea eax [ebp-1E4h] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push edi  +
lea eax [ebp-1C0h] +
push eax  +
push dword ptr [ebp-1E8h]  +
call ds:SetupDiGetDeviceRegistryPropertyW  +
test eax eax +
jz loc_104CA29  +
mov dword ptr [ebp-1CCh] 65Bh +
push dword ptr [ebp-1D8h]  +
push offset aUnableToGetThe  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
jmp loc_104CB76  +
call ds:GetLastError  +
cmp eax 0Dh +
jz loc_104CAB8  +
cmp eax 7Ah +
jz loc_104CA48  +
mov [ebp-1CCh] eax +
jmp loc_104CB76  +
push dword ptr [ebp-1E4h]  +
call sub_1054617  +
pop ecx  +
mov esi eax +
mov [ebp-214h] esi +
cmp esi ebx +
jnz loc_104CA6F  +
mov dword ptr [ebp-1CCh] 8 +
jmp loc_104CB62  +
push ebx  +
push dword ptr [ebp-1E4h]  +
push esi  +
push ebx  +
push edi  +
lea eax [ebp-1C0h] +
push eax  +
push dword ptr [ebp-1E8h]  +
call ds:SetupDiGetDeviceRegistryPropertyW  +
test eax eax +
jnz loc_104CAAC  +
call ds:GetLastError  +
mov [ebp-1CCh] eax +
push dword ptr [ebp-1D8h]  +
push offset aUnableToGetThe  +
jmp loc_104CB58  +
push esi  +
lea ecx [ebp-244h] +
call sub_103C474  +
push ecx  +
mov ecx esp +
mov [ebp-1FCh] esp +
mov esi [ebp-1F8h] +
push esi  +
call sub_10151F2  +
mov byte ptr [ebp-4] 12h +
mov byte ptr [ebp-4] 11h +
lea ecx [ebp-244h] +
call sub_10378C2  +
cmp eax ebx +
jnz loc_104CAF1  +
push dword ptr [esi]  +
lea ecx [ebp-244h] +
call sub_10172FC  +
mov [ebp-20Ch] ebx +
lea eax [ebp-1E4h] +
push eax  +
lea ecx [ebp-244h] +
call sub_1035D59  +
mov [ebp-20Ch] eax +
cmp eax ebx +
jnz loc_104CB1F  +
mov dword ptr [ebp-1CCh] 65Bh +
jmp loc_104CB62  +
mov ecx [ebp-1E4h] +
add ecx ecx +
push ecx  +
push eax  +
push edi  +
lea eax [ebp-1C0h] +
push eax  +
push dword ptr [ebp-1E8h]  +
call ds:SetupDiSetDeviceRegistryPropertyW  +
test eax eax +
jnz loc_104CB62  +
call ds:GetLastError  +
mov [ebp-1CCh] eax +
push dword ptr [ebp-1D8h]  +
push offset aUnableToSetThe  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
cmp [ebp-214h] ebx +
jz loc_104CB76  +
push dword ptr [ebp-214h]  +
call sub_1021189  +
pop ecx  +
cmp [ebp-20Ch] ebx +
jz loc_104CB8A  +
push dword ptr [ebp-20Ch]  +
call sub_1021189  +
pop ecx  +
cmp [ebp-1CCh] ebx +
jz loc_104C9AA  +
mov byte ptr [ebp-4] 10h +
lea ecx [ebp-244h] +
call sub_1014FBC  +
jmp loc_104C71C  +
mov byte ptr [ebp-4] 0Dh +
lea ecx [ebp-1D8h] +
call sub_1015174  +
jmp loc_104C8FD  +
call ds:GetLastError  +
cmp eax 103h +
jz loc_104CBE6  +
mov [ebp-1CCh] eax +
push eax  +
push offset aUnableToRetr_2  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
jmp loc_104C72B  +
cmp [ebp-1F0h] ebx +
jnz loc_104CC0B  +
mov dword ptr [ebp-1CCh] 662h +
push offset aNoMatchingDe_1  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
jmp loc_104C72B  +
mov byte ptr [ebp-4] 0Ch +
mov ecx [ebp-1D0h] +
cmp ecx ebx +
jz loc_104CC24  +
call sub_101A986  +
mov [ebp-1D0h] ebx +
mov byte ptr [ebp-4] 0Bh +
mov ecx [ebp-1D4h] +
cmp ecx ebx +
jz loc_104CC3D  +
call sub_101A986  +
mov [ebp-1D4h] ebx +
mov byte ptr [ebp-4] 0Ah +
lea ecx [ebp-1E0h] +
call sub_1015174  +
mov byte ptr [ebp-4] 4 +
mov ecx [ebp-1C8h] +
cmp ecx ebx +
jz loc_104CC65  +
call sub_101A986  +
mov [ebp-1C8h] ebx +
mov byte ptr [ebp-4] 3 +
mov ecx [ebp-1C4h] +
cmp ecx ebx +
jz loc_104CC7E  +
call sub_101A986  +
mov [ebp-1C4h] ebx +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-1DCh] +
call sub_1015174  +
mov [ebp-4] edi +
mov [ebp-218h] ebx +
lea eax [ebp-218h] +
push eax  +
push edi  +
push dword ptr [ebp-1F8h]  +
mov ecx [ebp-210h] +
call sub_10512B9  +
cmp [ebp-218h] ebx +
jz loc_104CCBF  +
mov eax [ebp-224h] +
mov [eax] edi +
mov [ebp-1CCh] ebx +
jmp loc_104CDAD  +
push 3  +
call sub_103AC75  +
add esp 14h +
jmp loc_104CD67  +
push offset aErrorEncount_2  +
push 3  +
call sub_103AC75  +
add esp 10h +
mov byte ptr [ebp-4] 15h +
lea ecx [ebp-1E4h] +
call sub_1015174  +
mov byte ptr [ebp-4] 14h +
lea ecx [ebp-208h] +
call sub_1015174  +
mov dword ptr [ebp-1CCh] 643h +
mov byte ptr [ebp-4] 13h +
lea ecx [ebp-22Ch] +
call sub_10427F9  +
mov dword ptr [ebp-4] 1 +
mov eax offset loc_104CDAB +
retn   +
xor ebx ebx +
cmp dword ptr [ebp-1E8h] 0FFFFFFFFh +
jz loc_104CDC2  +
push dword ptr [ebp-1E8h]  +
call ds:SetupDiDestroyDeviceInfoList  +
mov [ebp-4] bl +
mov ecx [ebp-200h] +
cmp ecx ebx +
jz loc_104CDDA  +
call sub_101A986  +
mov [ebp-200h] ebx +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx [ebp-210h] +
cmp ecx ebx +
jz loc_104CDF3  +
call sub_101A986  +
mov [ebp-210h] ebx +
mov eax [ebp-1CCh] +
call sub_1021FD2  +
retn 8  +
***
call sub_1021EF1  +
mov edi ecx +
mov esi [ebp+8] +
xor ebx ebx +
mov [ebp-48h] ebx +
mov [ebp-4] ebx +
mov [ebp-34h] ebx +
mov byte ptr [ebp-4] 1 +
push dword ptr [esi]  +
push offset aInstallingClas  +
push 1  +
call sub_103AC75  +
add esp 0Ch +
mov [edi] ebx +
push dword ptr [ebp+0Ch]  +
xor ecx ecx +
call sub_10521DF  +
test eax eax +
jnz loc_104CE69  +
mov eax [ebp+0Ch] +
push dword ptr [eax]  +
push dword ptr [esi]  +
push offset aBeforeInstalli  +
push 3  +
call sub_103AC75  +
add esp 10h +
mov dword ptr [ebp-28h] 65Bh +
jmp loc_104D3EA  +
lea ecx [ebp-34h] +
call sub_103ECE0  +
mov byte ptr [ebp-4] 2 +
push esi  +
mov ecx [ebp-34h] +
call sub_1046459  +
lea ecx [ebp-24h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 3 +
push 0Bh  +
lea eax [ebp-24h] +
push eax  +
mov ecx [ebp-34h] +
call sub_1047618  +
test eax eax +
jnz loc_104CEC9  +
push dword ptr [esi]  +
push offset aCouldNotDeterm  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
mov dword ptr [ebp-28h] 65Bh +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-24h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
jmp loc_104D3EA  +
lea eax [ebp-24h] +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
mov ecx [ebp-34h] +
call sub_1046C8D  +
mov byte ptr [ebp-4] 4 +
cmp [ebp+0Ch] ebx +
jnz loc_104CF0F  +
push dword ptr [esi]  +
push offset aInfWsDoesNotHa  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
mov dword ptr [ebp-28h] 65Bh +
mov byte ptr [ebp-4] 3 +
mov ecx [ebp+0Ch] +
cmp ecx ebx +
jz loc_104CEB4  +
call sub_101A986  +
mov [ebp+0Ch] ebx +
jmp loc_104CEB4  +
mov [ebp-44h] ebx +
lea eax [ebp-44h] +
push eax  +
push ecx  +
mov ecx esp +
mov [ebp-4Ch] esp +
push esi  +
call sub_10151F2  +
mov byte ptr [ebp-4] 5 +
mov ecx [ebp+0Ch] +
mov byte ptr [ebp-4] 4 +
call sub_1047269  +
cmp [ebp-44h] ebx +
jz loc_104CF4E  +
push dword ptr [esi]  +
push offset aWsRequiresAReb  +
push 1  +
call sub_103AC75  +
add esp 0Ch +
mov dword ptr [edi] 1 +
push offset aAddproperty  +
lea ecx [ebp-38h] +
call sub_10161A7  +
mov byte ptr [ebp-4] 6 +
lea eax [ebp-38h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
mov ecx [ebp+0Ch] +
call sub_1046D41  +
mov byte ptr [ebp-4] 8 +
lea ecx [ebp-38h] +
call sub_1015174  +
mov ecx [ebp-14h] +
cmp ecx ebx +
jnz loc_104CFB6  +
push dword ptr [esi]  +
push offset aAddpropertyLin  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
mov dword ptr [ebp-28h] 65Bh +
mov byte ptr [ebp-4] 4 +
mov ecx [ebp-14h] +
cmp ecx ebx +
jz loc_104CEFA  +
call sub_101A986  +
mov [ebp-14h] ebx +
jmp loc_104CEFA  +
push 1  +
lea eax [ebp-20h] +
push eax  +
call sub_10464ED  +
mov byte ptr [ebp-4] 9 +
mov eax [ebp-20h] +
cmp [eax-0Ch] ebx +
jnz loc_104CFF3  +
push dword ptr [esi]  +
push offset aAddpropertySec  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
mov dword ptr [ebp-28h] 65Bh +
mov byte ptr [ebp-4] 8 +
lea ecx [ebp-20h] +
call sub_1015174  +
jmp loc_104CF9A  +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
mov ecx [ebp-34h] +
call sub_1046BD3  +
mov byte ptr [ebp-4] 0Ah +
mov ecx [ebp-18h] +
cmp ecx ebx +
jnz loc_104D03E  +
push dword ptr [esi]  +
push dword ptr [ebp-20h]  +
push offset aUnableToFindAd  +
push 3  +
call sub_103AC75  +
add esp 10h +
mov dword ptr [ebp-28h] 65Bh +
mov byte ptr [ebp-4] 9 +
mov ecx [ebp-18h] +
cmp ecx ebx +
jz loc_104CFE5  +
call sub_101A986  +
mov [ebp-18h] ebx +
jmp loc_104CFE5  +
lea eax [ebp-1Ch] +
push eax  +
call sub_104717E  +
mov byte ptr [ebp-4] 0Bh +
mov ecx [ebp-1Ch] +
cmp ecx ebx +
jnz loc_104D082  +
push dword ptr [esi]  +
push dword ptr [ebp-20h]  +
push offset aUnableToFindAn  +
push 3  +
call sub_103AC75  +
add esp 10h +
mov dword ptr [ebp-28h] 65Bh +
mov byte ptr [ebp-4] 0Ah +
mov ecx [ebp-1Ch] +
cmp ecx ebx +
jz loc_104D029  +
call sub_101A986  +
mov [ebp-1Ch] ebx +
jmp loc_104D029  +
push 1  +
lea eax [ebp-2Ch] +
push eax  +
call sub_10464ED  +
mov byte ptr [ebp-4] 0Ch +
mov eax [ebp-2Ch] +
cmp [eax-0Ch] ebx +
jnz loc_104D0C2  +
push dword ptr [esi]  +
push dword ptr [ebp-20h]  +
push offset aUnableToReadPr  +
push 3  +
call sub_103AC75  +
add esp 10h +
mov dword ptr [ebp-28h] 65Bh +
mov byte ptr [ebp-4] 0Bh +
lea ecx [ebp-2Ch] +
call sub_1015174  +
jmp loc_104D06D  +
push offset aClasscoinsta_0  +
lea ecx [ebp-2Ch] +
call sub_101492B  +
test eax eax +
jz loc_104D0EE  +
push dword ptr [ebp-2Ch]  +
push offset aTheWsClassProp  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
mov dword ptr [ebp-28h] 0Dh +
jmp loc_104D0B4  +
push 5  +
lea eax [ebp-30h] +
push eax  +
mov ecx [ebp-1Ch] +
call sub_10464ED  +
mov byte ptr [ebp-4] 0Dh +
mov eax [ebp-30h] +
cmp [eax-0Ch] ebx +
jnz loc_104D131  +
push dword ptr [esi]  +
push dword ptr [ebp-20h]  +
push offset aUnableToReadBi  +
push 3  +
call sub_103AC75  +
add esp 10h +
mov dword ptr [ebp-28h] 65Bh +
mov byte ptr [ebp-4] 0Ch +
lea ecx [ebp-30h] +
call sub_1015174  +
jmp loc_104D0B4  +
mov [ebp-40h] ebx +
mov [ebp-3Ch] ebx +
mov eax [ebp-3Ch] +
cmp eax [ebp+14h] +
jnb loc_104D287  +
mov [ebp-38h] ebx +
mov byte ptr [ebp-4] 0Eh +
lea ecx [ebp-38h] +
call sub_103ED8F  +
mov esi [ebp-3Ch] +
shl esi 4 +
add esi [ebp+10h] +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
mov esi [ebp-38h] +
mov ecx esi +
call sub_104B34F  +
lea ecx [ebp-6Ch] +
call sub_1014C71  +
mov byte ptr [ebp-4] 0Fh +
lea eax [ebp-6Ch] +
push eax  +
mov ecx esi +
call sub_104BC50  +
test eax eax +
jnz loc_104D24B  +
call ds:GetLastError  +
mov ecx esi +
cmp eax 0E0000206h +
jz loc_104D1FB  +
mov dword ptr [ebp-40h] 1 +
lea eax [ebp+14h] +
push eax  +
call sub_104B76D  +
mov byte ptr [ebp-4] 10h +
push dword ptr [eax]  +
push offset aUnableToGetCla  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
mov byte ptr [ebp-4] 0Fh +
lea ecx [ebp+14h] +
call sub_1015174  +
mov dword ptr [ebp-28h] 65Bh +
mov byte ptr [ebp-4] 0Eh +
lea ecx [ebp-6Ch] +
call sub_1014FBC  +
mov byte ptr [ebp-4] 0Dh +
cmp esi ebx +
jz loc_104D123  +
mov ecx esi +
call sub_101A986  +
mov [ebp-38h] ebx +
jmp loc_104D123  +
lea eax [ebp-4Ch] +
push eax  +
call sub_104B76D  +
mov byte ptr [ebp-4] 11h +
push dword ptr [eax]  +
push offset aClassWsIsNotIn  +
push 1  +
call sub_103AC75  +
add esp 0Ch +
mov byte ptr [ebp-4] 0Fh +
lea ecx [ebp-4Ch] +
call sub_1015174  +
mov byte ptr [ebp-4] 0Eh +
lea ecx [ebp-6Ch] +
call sub_1014FBC  +
mov byte ptr [ebp-4] 0Dh +
cmp esi ebx +
jz loc_104D243  +
mov ecx esi +
call sub_101A986  +
mov [ebp-38h] ebx +
inc dword ptr [ebp-3Ch]  +
jmp loc_104D137  +
mov dword ptr [ebp-40h] 1 +
push dword ptr [ebp-30h]  +
lea ecx [ebp-6Ch] +
call sub_10172FC  +
lea eax [ebp-6Ch] +
push eax  +
mov ecx esi +
call sub_104B54A  +
test eax eax +
jnz loc_104D225  +
lea eax [ebp+14h] +
push eax  +
mov ecx esi +
call sub_104B76D  +
mov byte ptr [ebp-4] 12h +
push dword ptr [eax]  +
push offset aUnableToSetT_0  +
jmp loc_104D1B7  +
cmp [ebp-40h] ebx +
jnz loc_104D2A6  +
push offset aNoneOfTheSetup  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
mov dword ptr [ebp-28h] 643h +
jmp loc_104D123  +
mov byte ptr [ebp-4] 0Ch +
lea ecx [ebp-30h] +
call sub_1015174  +
mov byte ptr [ebp-4] 0Bh +
lea ecx [ebp-2Ch] +
call sub_1015174  +
mov byte ptr [ebp-4] 0Ah +
mov ecx [ebp-1Ch] +
cmp ecx ebx +
jz loc_104D2D1  +
call sub_101A986  +
mov [ebp-1Ch] ebx +
mov byte ptr [ebp-4] 9 +
mov ecx [ebp-18h] +
cmp ecx ebx +
jz loc_104D2E4  +
call sub_101A986  +
mov [ebp-18h] ebx +
mov byte ptr [ebp-4] 8 +
lea ecx [ebp-20h] +
call sub_1015174  +
mov byte ptr [ebp-4] 4 +
mov ecx [ebp-14h] +
cmp ecx ebx +
jz loc_104D303  +
call sub_101A986  +
mov [ebp-14h] ebx +
mov byte ptr [ebp-4] 3 +
mov ecx [ebp+0Ch] +
cmp ecx ebx +
jz loc_104D316  +
call sub_101A986  +
mov [ebp+0Ch] ebx +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-24h] +
call sub_1015174  +
mov dword ptr [ebp-4] 1 +
mov [ebp-28h] ebx +
jmp loc_104D3EA  +
push offset aError0xXEnco_3  +
push 3  +
call sub_103AC75  +
add esp 14h +
jmp loc_104D3B0  +
push offset aErrorEncount_2  +
push 3  +
call sub_103AC75  +
add esp 10h +
mov byte ptr [ebp-4] 15h +
lea ecx [ebp+0Ch] +
call sub_1015174  +
mov byte ptr [ebp-4] 14h +
lea ecx [ebp+10h] +
call sub_1015174  +
mov dword ptr [ebp-28h] 643h +
mov byte ptr [ebp-4] 13h +
lea ecx [ebp-54h] +
call sub_10427F9  +
mov dword ptr [ebp-4] 1 +
mov eax offset loc_104D3E8 +
retn   +
xor ebx ebx +
mov [ebp-4] bl +
mov ecx [ebp-34h] +
cmp ecx ebx +
jz loc_104D3FC  +
call sub_101A986  +
mov [ebp-34h] ebx +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx [ebp-48h] +
cmp ecx ebx +
jz loc_104D40F  +
call sub_101A986  +
mov [ebp-48h] ebx +
mov eax [ebp-28h] +
call sub_1021FA5  +
retn 10h  +
***
call sub_1021EB9  +
xor ebx ebx +
lea ecx [ebp-44h] +
mov [ebp-14h] ebx +
mov [ebp-2Ch] ebx +
call sub_1014C71  +
mov [ebp-4] ebx +
lea ecx [ebp-24h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-20h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 2 +
mov eax [ebp+14h] +
mov esi 80000000h +
push esi  +
push ebx  +
push ebx  +
mov [eax] ebx +
call ds:OpenSCManagerW  +
mov [ebp-1Ch] eax +
cmp eax ebx +
jz loc_104D494  +
mov eax [ebp+0Ch] +
mov eax [eax] +
push esi  +
push eax  +
push dword ptr [ebp-1Ch]  +
mov [ebp-18h] ebx +
call ds:OpenServiceW  +
cmp eax ebx +
jnz loc_104D4DE  +
call ds:GetLastError  +
cmp eax 424h +
jz loc_104D4EC  +
cmp [ebp-14h] ebx +
jz loc_104D4A2  +
push dword ptr [ebp-14h]  +
call ds:RegCloseKey  +
cmp [ebp-1Ch] ebx +
jz loc_104D4B0  +
push dword ptr [ebp-1Ch]  +
call ds:CloseServiceHandle  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-20h] +
call sub_1015174  +
mov [ebp-4] bl +
lea ecx [ebp-24h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-44h] +
call sub_1014FBC  +
mov eax [ebp-2Ch] +
call sub_1021FA5  +
retn 14h  +
push eax  +
mov dword ptr [ebp-18h] 1 +
call ds:CloseServiceHandle  +
push offset aSystemCurren_0  +
lea ecx [ebp-28h] +
call sub_10161A7  +
mov byte ptr [ebp-4] 3 +
lea eax [ebp-24h] +
push eax  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-28h] +
push eax  +
call sub_10360F6  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-28h] +
call sub_1015174  +
push off_10646A4  +
lea ecx [ebp+0Ch] +
call sub_10161A7  +
mov byte ptr [ebp-4] 4 +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
lea eax [ebp-24h] +
push eax  +
call sub_10360F6  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp+0Ch] +
call sub_1015174  +
push ebx  +
lea eax [ebp-14h] +
push eax  +
push ebx  +
push 2001Fh  +
push ebx  +
push ebx  +
push ebx  +
push dword ptr [ebp-20h]  +
push 80000002h  +
call ds:RegCreateKeyExW  +
test eax eax +
jnz loc_104D494  +
mov esi ds:RegQueryValueExW +
lea eax [ebp-10h] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push off_10646A8  +
mov [ebp-10h] ebx +
push dword ptr [ebp-14h]  +
call esi  +
cmp eax ebx +
jz loc_104D5A9  +
cmp eax 2 +
jnz loc_104D494  +
cmp [ebp-18h] ebx +
jz loc_104D603  +
push off_10646AC  +
lea ecx [ebp-44h] +
call sub_1037176  +
jmp loc_104D603  +
cmp [ebp-18h] ebx +
jz loc_104D603  +
cmp [ebp-10h] ebx +
jz loc_104D603  +
add dword ptr [ebp-10h] 4 +
push dword ptr [ebp-10h]  +
call sub_1054617  +
pop ecx  +
mov [edi] eax +
cmp eax ebx +
jz loc_104D494  +
mov eax [ebp-10h] +
mov ecx [ebp+10h] +
push eax  +
mov [ecx] eax +
push ebx  +
push dword ptr [edi]  +
call sub_10219E0  +
add esp 0Ch +
lea eax [ebp-10h] +
push eax  +
push dword ptr [edi]  +
push ebx  +
push ebx  +
push off_10646A8  +
push dword ptr [ebp-14h]  +
call esi  +
test eax eax +
jnz loc_104D494  +
push dword ptr [edi]  +
lea ecx [ebp-44h] +
call sub_103C474  +
mov esi [ebp+8] +
push ecx  +
mov ecx esp +
mov [ebp+0Ch] esp +
push esi  +
call sub_10151F2  +
mov byte ptr [ebp-4] 5 +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-44h] +
call sub_10378C2  +
cmp eax ebx +
jz loc_104D67F  +
mov eax [ebp-44h] +
xor ecx ecx +
cmp eax ebx +
setnz cl  +
cmp ecx ebx +
jnz loc_104D63E  +
push 80004005h  +
call loc_1014415  +
add eax 8 +
push eax  +
lea ecx [ebp+0Ch] +
call sub_10151F2  +
mov byte ptr [ebp-4] 6 +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
call sub_101492B  +
test eax eax +
jz loc_104D668  +
mov ecx [ebp+18h] +
lea eax [ebp+0Ch] +
push eax  +
call sub_1015959  +
mov eax [ebp+14h] +
mov dword ptr [eax] 1 +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp+0Ch] +
call sub_1015174  +
jmp loc_104D6CE  +
push dword ptr [esi]  +
lea ecx [ebp-44h] +
call sub_1037176  +
lea eax [ebp-10h] +
push eax  +
lea ecx [ebp-44h] +
call sub_1035D59  +
mov esi eax +
cmp esi ebx +
jz loc_104D494  +
mov eax [ebp-10h] +
add eax eax +
push eax  +
push esi  +
push 7  +
push ebx  +
push off_10646A8  +
push dword ptr [ebp-14h]  +
call ds:RegSetValueExW  +
push esi  +
test eax eax +
jz loc_104D6C8  +
call sub_1021179  +
pop ecx  +
jmp loc_104D494  +
call sub_1021179  +
pop ecx  +
push dword ptr [ebp-14h]  +
call ds:RegCloseKey  +
mov dword ptr [ebp-2Ch] 1 +
jmp loc_104D4A2  +
***
call sub_1021EB9  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-10h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 1 +
mov ecx [ebp+8] +
lea eax [ebp-10h] +
push eax  +
push 3  +
call sub_103B80D  +
test eax eax +
jnz loc_104D74B  +
push offset aFailedToObta_0  +
push 3  +
call sub_103AC75  +
mov esi 643h +
pop ecx  +
pop ecx  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-10h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+0Ch] +
call sub_1015174  +
mov eax esi +
call sub_1021FA5  +
retn 18h  +
push dword ptr [ebp+14h]  +
mov edi [ebp+18h] +
push dword ptr [ebp+10h]  +
lea eax [ebp+0Ch] +
push dword ptr [ebp+1Ch]  +
push eax  +
lea eax [ebp-10h] +
push eax  +
call sub_104D41F  +
test eax eax +
jnz loc_104D77B  +
push offset aCouldNotAddDri  +
push 3  +
mov esi 643h +
call sub_103AC75  +
jmp loc_104D727  +
xor esi esi +
jmp loc_104D729  +
***
call sub_1021EB9  +
lea ecx [ebp-14h] +
call sub_10151DA  +
xor esi esi +
mov [ebp-4] esi +
lea ecx [ebp-18h] +
mov [ebp-10h] esi +
call sub_10151DA  +
mov byte ptr [ebp-4] 1 +
mov edi [ebp+10h] +
mov ecx [ebp+8] +
lea eax [ebp-14h] +
push eax  +
push 2  +
mov [edi] esi +
call sub_103B80D  +
test eax eax +
jnz loc_104D7D8  +
push offset aCouldNotGetNam  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
mov esi 643h +
jmp loc_104D83F  +
push dword ptr [ebp-14h]  +
push offset aInstallingIn_1  +
push 1  +
call sub_103AC75  +
mov ecx [ebp+8] +
add esp 0Ch +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-10h] +
push eax  +
push 6  +
call sub_103B00B  +
test eax eax +
jnz loc_104D807  +
push offset aCouldNotGetT_3  +
jmp loc_104D7C8  +
mov ecx [ebp+8] +
lea eax [ebp-18h] +
push eax  +
push 7  +
call sub_103B80D  +
test eax eax +
jnz loc_104D820  +
push offset aCouldNotGetT_4  +
jmp loc_104D7C8  +
mov eax [ebp-1Ch] +
shr eax 4 +
push eax  +
push dword ptr [ebp-10h]  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
mov ecx edi +
call sub_104CE06  +
mov esi eax +
test esi esi +
jz loc_104D872  +
cmp dword ptr [ebp+0Ch] 0 +
jnz loc_104D872  +
push offset aTheDriverInsta  +
push esi  +
push 3  +
call sub_103AD09  +
add esp 0Ch +
push edi  +
push dword ptr [ebp+8]  +
call sub_104B6E0  +
test eax eax +
jz loc_104D872  +
push eax  +
push offset aError0xXEnco_2  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
cmp dword ptr [ebp-10h] 0 +
jz loc_104D881  +
push dword ptr [ebp-10h]  +
call sub_1021179  +
pop ecx  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-18h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call sub_1015174  +
mov eax esi +
call sub_1021FA5  +
retn 0Ch  +
***
call sub_1021EB9  +
mov esi ecx +
xor ebx ebx +
lea ecx [ebp-3Ch] +
mov [ebp-20h] ebx +
mov [ebp-10h] ebx +
call sub_1014C71  +
mov [ebp-4] ebx +
mov eax [ebp+14h] +
lea ecx [ebp-1Ch] +
mov dword ptr [eax] 1 +
call sub_10151DA  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-18h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 2 +
push offset aSystemCurren_0  +
lea ecx [ebp-24h] +
call sub_10161A7  +
mov byte ptr [ebp-4] 3 +
lea eax [ebp-1Ch] +
push eax  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-24h] +
push eax  +
call sub_10360F6  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-24h] +
call sub_1015174  +
push off_10646A4  +
lea ecx [ebp+0Ch] +
call sub_10161A7  +
mov byte ptr [ebp-4] 4 +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
call sub_10360F6  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp+0Ch] +
call sub_1015174  +
lea eax [ebp-10h] +
push eax  +
push 2001Fh  +
push ebx  +
push dword ptr [ebp-18h]  +
push 80000002h  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_104DB2B  +
mov edi ds:RegQueryValueExW +
lea eax [ebp-14h] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push off_10646A8  +
mov [ebp-14h] ebx +
push dword ptr [ebp-10h]  +
call edi  +
cmp eax ebx +
jz loc_104D99F  +
cmp eax 2 +
jnz loc_104DB2B  +
push dword ptr [ebp-10h]  +
call ds:RegCloseKey  +
mov [ebp-10h] ebx +
jmp loc_104DB8B  +
add dword ptr [ebp-14h] 4 +
push dword ptr [ebp-14h]  +
call sub_1054617  +
pop ecx  +
mov [esi] eax +
cmp eax ebx +
jz loc_104DB2B  +
mov eax [ebp-14h] +
mov ecx [ebp+18h] +
push eax  +
mov [ecx] eax +
push ebx  +
push dword ptr [esi]  +
call sub_10219E0  +
add esp 0Ch +
lea eax [ebp-14h] +
push eax  +
push dword ptr [esi]  +
push ebx  +
push ebx  +
push off_10646A8  +
push dword ptr [ebp-10h]  +
call edi  +
test eax eax +
jnz loc_104DB2B  +
push dword ptr [esi]  +
lea ecx [ebp-3Ch] +
call sub_103C474  +
mov esi [ebp+8] +
push ecx  +
mov ecx esp +
mov [ebp+0Ch] esp +
push esi  +
call sub_10151F2  +
mov byte ptr [ebp-4] 5 +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-3Ch] +
call sub_10378C2  +
cmp eax ebx +
jz loc_104DAF0  +
lea ecx [ebp+0Ch] +
call sub_10151DA  +
mov byte ptr [ebp-4] 6 +
lea ecx [ebp+8] +
call sub_10151DA  +
mov byte ptr [ebp-4] 7 +
mov eax [ebp-3Ch] +
mov [ebp+18h] eax +
lea eax [ebp+18h] +
push eax  +
lea ecx [ebp-3Ch] +
call sub_105038C  +
push eax  +
lea ecx [ebp+0Ch] +
call sub_1015959  +
push dword ptr [esi]  +
lea ecx [ebp+0Ch] +
call sub_101492B  +
lea ecx [ebp-3Ch] +
test eax eax +
jnz loc_104DACD  +
lea eax [ebp+0Ch] +
push eax  +
call sub_103B662  +
cmp [ebp-34h] ebx +
jz loc_104DAD8  +
mov ecx [ebp+10h] +
lea eax [ebp-3Ch] +
push eax  +
call sub_104A1F3  +
mov eax [ebp-3Ch] +
mov [ebp+18h] eax +
lea eax [ebp+18h] +
push eax  +
lea ecx [ebp-3Ch] +
call sub_105038C  +
push eax  +
lea ecx [ebp+8] +
call sub_1015959  +
push off_10646AC  +
lea ecx [ebp+8] +
call sub_101492B  +
test eax eax +
jnz loc_104DAD8  +
push off_10646AC  +
lea ecx [ebp+14h] +
call sub_10161A7  +
mov byte ptr [ebp-4] 8 +
lea eax [ebp+14h] +
push eax  +
lea ecx [ebp-3Ch] +
call sub_103B662  +
mov byte ptr [ebp-4] 7 +
lea ecx [ebp+14h] +
call sub_1015174  +
jmp loc_104DAD8  +
push esi  +
call sub_103B662  +
mov eax [ebp+14h] +
mov [eax] ebx +
mov byte ptr [ebp-4] 6 +
lea ecx [ebp+8] +
call sub_1015174  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp+0Ch] +
call sub_1015174  +
cmp [ebp-34h] ebx +
jz loc_104DB6F  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-3Ch] +
call sub_1035D59  +
mov esi eax +
cmp esi ebx +
jz loc_104DB2B  +
mov eax [ebp-14h] +
add eax eax +
push eax  +
push esi  +
push 7  +
push ebx  +
push off_10646A8  +
push dword ptr [ebp-10h]  +
call ds:RegSetValueExW  +
push esi  +
test eax eax +
jz loc_104DB67  +
call sub_1021179  +
pop ecx  +
cmp [ebp-10h] ebx +
jz loc_104DB39  +
push dword ptr [ebp-10h]  +
call ds:RegCloseKey  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-18h] +
call sub_1015174  +
mov [ebp-4] bl +
lea ecx [ebp-1Ch] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-3Ch] +
call sub_1014FBC  +
mov eax [ebp-20h] +
call sub_1021FA5  +
retn 14h  +
call sub_1021179  +
pop ecx  +
jmp loc_104DB82  +
push off_10646A8  +
push dword ptr [ebp-10h]  +
call ds:RegDeleteValueW  +
test eax eax +
jnz loc_104DB2B  +
push dword ptr [ebp-10h]  +
call ds:RegCloseKey  +
mov dword ptr [ebp-20h] 1 +
jmp loc_104DB39  +
***
call sub_1021EB9  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-10h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 1 +
mov ecx [ebp+8] +
lea eax [ebp-10h] +
push eax  +
push 3  +
call sub_103B80D  +
test eax eax +
jnz loc_104DBFC  +
push offset aFailedToObta_0  +
push 3  +
call sub_103AC75  +
mov esi 643h +
pop ecx  +
pop ecx  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-10h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+0Ch] +
call sub_1015174  +
mov eax esi +
call sub_1021FA5  +
retn 18h  +
push dword ptr [ebp+1Ch]  +
mov ecx [ebp+18h] +
push dword ptr [ebp+14h]  +
lea eax [ebp+0Ch] +
push dword ptr [ebp+10h]  +
push eax  +
lea eax [ebp-10h] +
push eax  +
call sub_104D8A8  +
test eax eax +
jnz loc_104DC2C  +
push offset aCouldNotAddDri  +
push 3  +
mov esi 643h +
call sub_103AC75  +
jmp loc_104DBD8  +
xor esi esi +
jmp loc_104DBDA  +
***
call sub_1021EB9  +
xor ebx ebx +
mov [ebp-4] ebx +
cmp dword ptr [ebp+8] 5 +
mov [edi] ebx +
jnz loc_104DD12  +
lea ecx [ebp-38h] +
call sub_1014C71  +
mov byte ptr [ebp-4] 1 +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-38h] +
call sub_10172FC  +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-10h] +
call sub_104B69E  +
mov esi [ebp-10h] +
lea eax [ebp-38h] +
push eax  +
mov ecx esi +
call sub_1052149  +
test eax eax +
jnz loc_104DCD2  +
push dword ptr [ebp+0Ch]  +
push offset aUnableToDeregi  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
mov byte ptr [ebp-4] 1 +
cmp esi ebx +
jz loc_104DCAE  +
mov ecx esi +
call sub_101A986  +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
lea ecx [ebp-38h] +
call sub_1014FBC  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+0Ch] +
call sub_1015174  +
mov eax 643h +
call sub_1021FA5  +
retn 8  +
lea eax [ebp-14h] +
push eax  +
push ebx  +
lea eax [ebp-38h] +
push eax  +
mov ecx esi +
mov [ebp-14h] ebx +
call sub_1051D4B  +
cmp [ebp-14h] ebx +
jz loc_104DCF0  +
mov dword ptr [edi] 1 +
mov byte ptr [ebp-4] 1 +
cmp esi ebx +
jz loc_104DD02  +
mov ecx esi +
call sub_101A986  +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
lea ecx [ebp-38h] +
call sub_1014FBC  +
jmp loc_104DDA7  +
cmp dword ptr [ebp+8] 9 +
jnz loc_104DE46  +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-10h] +
call sub_104B69E  +
mov esi [ebp-10h] +
lea eax [ebp+0Ch] +
push eax  +
mov ecx esi +
call sub_10517DE  +
test eax eax +
jnz loc_104DD78  +
push dword ptr [ebp+0Ch]  +
push offset aUnableToDere_0  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
mov [ebp-4] bl +
cmp esi ebx +
jz loc_104DD60  +
mov ecx esi +
call sub_101A986  +
mov [ebp-10h] ebx +
mov ebx 643h +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+0Ch] +
call sub_1015174  +
mov eax ebx +
jmp loc_104DCCA  +
lea eax [ebp-18h] +
push eax  +
push ebx  +
lea eax [ebp+0Ch] +
push eax  +
mov ecx esi +
mov [ebp-18h] ebx +
call sub_10512B9  +
cmp [ebp-18h] ebx +
jz loc_104DD96  +
mov dword ptr [edi] 1 +
mov [ebp-4] bl +
cmp esi ebx +
jz loc_104DDA7  +
mov ecx esi +
call sub_101A986  +
mov [ebp-10h] ebx +
lea ecx [ebp-10h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 4 +
push offset aSystemCurren_0  +
lea ecx [ebp-1Ch] +
mov [ebp-14h] ebx +
call sub_10161A7  +
mov byte ptr [ebp-4] 5 +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
call sub_10360F6  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-1Ch] +
call sub_1015174  +
lea eax [ebp-14h] +
push eax  +
push 2001Fh  +
push ebx  +
push dword ptr [ebp-10h]  +
push 80000002h  +
call ds:RegOpenKeyExW  +
test eax eax +
jz loc_104DE10  +
mov [ebp-4] bl +
lea ecx [ebp-10h] +
call sub_1015174  +
jmp loc_104DD65  +
push offset aEnum  +
push dword ptr [ebp-14h]  +
call ds:RegDeleteKeyW  +
cmp eax ebx +
jz loc_104DE32  +
cmp eax 2 +
jz loc_104DE32  +
push dword ptr [ebp-14h]  +
call ds:RegCloseKey  +
jmp loc_104DE00  +
push dword ptr [ebp-14h]  +
call ds:RegCloseKey  +
mov [ebp-4] bl +
lea ecx [ebp-10h] +
call sub_1015174  +
lea eax [ebp-1Ch] +
push eax  +
push dword ptr [ebp+8]  +
lea eax [ebp+0Ch] +
push ecx  +
mov ecx esp +
mov [ebp-20h] esp +
push eax  +
mov [ebp-1Ch] ebx +
call sub_10151F2  +
mov byte ptr [ebp-4] 6 +
mov [ebp-4] bl +
call sub_104960E  +
cmp eax ebx +
jnz loc_104DE88  +
cmp dword ptr [ebp+8] 5 +
jz loc_104DD65  +
cmp dword ptr [ebp+8] 9 +
jnz loc_104DD60  +
jmp loc_104DD65  +
cmp [ebp-1Ch] ebx +
jz loc_104DD65  +
mov dword ptr [edi] 1 +
jmp loc_104DD65  +
***
call sub_1021EB9  +
xor ebx ebx +
mov [ebp-4] ebx +
lea ecx [ebp-8Ch] +
xor edi edi +
call sub_103B217  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-14h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-40h] +
call sub_1014C71  +
mov byte ptr [ebp-4] 3 +
xor esi esi +
inc esi  +
lea ecx [ebp-70h] +
mov [ebp-24h] esi +
call sub_1014C71  +
mov byte ptr [ebp-4] 4 +
mov eax [ebp+14h] +
lea ecx [ebp-14h] +
mov [eax] ebx +
call sub_1014FC6  +
mov eax [ebp+10h] +
mov eax [eax] +
mov [ebp-28h] eax +
cmp eax ebx +
jz loc_104DFBC  +
cmp edi ebx +
jnz loc_104E0EE  +
lea ecx [ebp-10h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 5 +
mov ecx [ebp+10h] +
lea eax [ebp-28h] +
push eax  +
call sub_105038C  +
push eax  +
lea ecx [ebp-10h] +
call sub_1015959  +
push off_10646AC  +
lea ecx [ebp-10h] +
call sub_101492B  +
test eax eax +
jnz loc_104E027  +
push offset aUnableToRevert  +
push 2  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
xor edi edi +
mov [ebp-24h] ebx +
push dword ptr [ebp+8]  +
push dword ptr [ebp-14h]  +
push dword ptr [ebp-18h]  +
push offset aError0xXFailed  +
push 3  +
call sub_103AC75  +
add esp 14h +
push off_10646AC  +
lea ecx [ebp-10h] +
call sub_101492B  +
test eax eax +
jz loc_104DF94  +
push dword ptr [ebp-10h]  +
lea ecx [ebp-40h] +
call sub_10172FC  +
lea ecx [ebp-8Ch] +
call sub_103ADBD  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-10h] +
call sub_1015174  +
cmp [ebp-28h] ebx +
jnz loc_104DF0D  +
cmp edi ebx +
jnz loc_104E0EE  +
push dword ptr [ebp+8]  +
push offset aUnableToReve_0  +
push esi  +
call sub_103AC75  +
add esp 0Ch +
cmp [ebp-24h] ebx +
jz loc_104E305  +
push offset aWillAttemptToU  +
push esi  +
call sub_103AC75  +
add esp 4 +
lea eax [ebp+8] +
mov ecx esp +
mov [ebp-24h] esp +
push eax  +
mov [ebp-28h] ebx +
lea edi [ebp-28h] +
call sub_10151F2  +
mov byte ptr [ebp-4] 7 +
push dword ptr [ebp+0Ch]  +
mov byte ptr [ebp-4] 4 +
call sub_104DC35  +
cmp eax ebx +
jz loc_104E0E2  +
push eax  +
push offset aError0xXOccu_0  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
xor edi edi +
jmp loc_104E370  +
push 3  +
push ecx  +
lea eax [ebp-10h] +
mov ecx esp +
mov [ebp-20h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 6 +
mov byte ptr [ebp-4] 5 +
lea ecx [ebp-8Ch] +
call sub_103B6D1  +
cmp eax 0B7h +
jz loc_104E059  +
xor edi edi +
jmp loc_104DF5F  +
lea eax [ebp-14h] +
push eax  +
push 2  +
lea ecx [ebp-8Ch] +
call sub_103B80D  +
test eax eax +
jz loc_104E052  +
cmp dword ptr [ebp+0Ch] 5 +
mov dword ptr [ebp-18h] 57h +
mov [ebp-1Ch] ebx +
jz loc_104E0B6  +
cmp dword ptr [ebp+0Ch] 9 +
jnz loc_104E052  +
lea ecx [ebp-70h] +
call loc_1014AB9  +
lea eax [ebp-70h] +
push eax  +
push 8  +
lea ecx [ebp-8Ch] +
call sub_103C4CC  +
test eax eax +
jz loc_104E052  +
lea eax [ebp-70h] +
push eax  +
lea eax [ebp+8] +
push eax  +
lea edx [ebp-1Ch] +
lea ecx [ebp-14h] +
call sub_104C303  +
jmp loc_104E0C6  +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp+8] +
call sub_104BFFD  +
mov [ebp-18h] eax +
cmp eax ebx +
jnz loc_104E052  +
mov edi esi +
cmp [ebp-1Ch] ebx +
jz loc_104DF94  +
mov eax [ebp+14h] +
mov [eax] esi +
jmp loc_104DF94  +
mov edi esi +
cmp [ebp-28h] ebx +
jz loc_104E0EE  +
mov eax [ebp+14h] +
mov [eax] esi +
cmp [ebp-38h] ebx +
jz loc_104E370  +
lea ecx [ebp-18h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 8 +
mov eax [ebp-40h] +
mov [ebp-20h] eax +
cmp eax ebx +
jz loc_104E20D  +
lea ecx [ebp+0Ch] +
call sub_10151DA  +
mov byte ptr [ebp-4] 9 +
lea eax [ebp-20h] +
push eax  +
lea ecx [ebp-40h] +
call sub_105038C  +
push eax  +
lea ecx [ebp+0Ch] +
call sub_1015959  +
mov ecx [ebp+10h] +
lea eax [ebp+0Ch] +
push eax  +
call sub_103B662  +
lea ecx [ebp-58h] +
call sub_1014C71  +
mov byte ptr [ebp-4] 0Ah +
push 3  +
push ecx  +
lea eax [ebp+0Ch] +
mov ecx esp +
mov [ebp-10h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 0Bh +
mov byte ptr [ebp-4] 0Ah +
lea ecx [ebp-8Ch] +
call sub_103B6D1  +
lea eax [ebp-58h] +
push eax  +
push 0Ah  +
lea ecx [ebp-8Ch] +
call sub_103C4CC  +
lea ecx [ebp-8Ch] +
call sub_103ADBD  +
mov eax [ebp-58h] +
mov [ebp-10h] eax +
cmp eax ebx +
jz loc_104E1EC  +
lea ecx [ebp-1Ch] +
call sub_10151DA  +
mov byte ptr [ebp-4] 0Ch +
lea eax [ebp-10h] +
push eax  +
lea ecx [ebp-58h] +
call sub_105038C  +
push eax  +
lea ecx [ebp-1Ch] +
call sub_1015959  +
mov eax [ebp-1Ch] +
push dword ptr [eax-0Ch]  +
lea ecx [ebp-18h] +
push eax  +
call sub_10155F6  +
cmp [ebp-10h] ebx +
jnz loc_104E1CE  +
cmp [ebp-20h] ebx +
jz loc_104E1DB  +
push offset asc_1011988  +
lea ecx [ebp-18h] +
call sub_1018C3E  +
mov byte ptr [ebp-4] 0Ah +
lea ecx [ebp-1Ch] +
call sub_1015174  +
cmp [ebp-10h] ebx +
jnz loc_104E194  +
mov byte ptr [ebp-4] 9 +
lea ecx [ebp-58h] +
call sub_1014FBC  +
mov byte ptr [ebp-4] 8 +
lea ecx [ebp+0Ch] +
call sub_1015174  +
cmp [ebp-20h] ebx +
jnz loc_104E111  +
mov eax [ebp-18h] +
cmp [eax-0Ch] ebx +
jle loc_104E225  +
push eax  +
push offset aTheFollowingAp  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
lea ecx [ebp-28h] +
mov [ebp+14h] ebx +
call sub_10151DA  +
mov byte ptr [ebp-4] 0Dh +
lea ecx [ebp-24h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 0Eh +
push offset aSystemCurren_0  +
lea ecx [ebp+0Ch] +
call sub_10161A7  +
mov byte ptr [ebp-4] 0Fh +
lea eax [ebp-28h] +
push eax  +
lea eax [ebp+8] +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
call sub_10360F6  +
mov byte ptr [ebp-4] 0Eh +
lea ecx [ebp+0Ch] +
call sub_1015174  +
push off_10646A4  +
lea ecx [ebp-20h] +
call sub_10161A7  +
mov byte ptr [ebp-4] 10h +
lea eax [ebp-24h] +
push eax  +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-28h] +
push eax  +
call sub_10360F6  +
mov byte ptr [ebp-4] 0Eh +
lea ecx [ebp-20h] +
call sub_1015174  +
lea eax [ebp+14h] +
push eax  +
push 2001Fh  +
push ebx  +
push dword ptr [ebp-24h]  +
push 80000002h  +
call ds:RegOpenKeyExW  +
cmp eax ebx +
jnz loc_104E337  +
mov ecx [ebp+10h] +
cmp [ecx+8] ebx +
jz loc_104E309  +
lea eax [ebp+10h] +
push eax  +
call sub_1035D59  +
mov esi eax +
cmp esi ebx +
jz loc_104E31C  +
mov eax [ebp+10h] +
add eax eax +
push eax  +
push esi  +
push 7  +
push ebx  +
push off_10646A8  +
push dword ptr [ebp+14h]  +
call ds:RegSetValueExW  +
test eax eax +
jz loc_104E2FD  +
push offset aErrorOccurre_1  +
push 3  +
xor edi edi +
call sub_103AC75  +
pop ecx  +
pop ecx  +
push esi  +
call sub_1021179  +
jmp loc_104E32B  +
mov edi esi +
jmp loc_104E370  +
push off_10646A8  +
push dword ptr [ebp+14h]  +
call ds:RegDeleteValueW  +
test eax eax +
jz loc_104E32C  +
push offset aErrorOccurre_1  +
push 3  +
xor edi edi +
call sub_103AC75  +
pop ecx  +
pop ecx  +
push dword ptr [ebp+14h]  +
call ds:RegCloseKey  +
jmp loc_104E34C  +
cmp eax 2 +
jz loc_104E34C  +
push offset aErrorOccurre_1  +
push 3  +
xor edi edi +
call sub_103AC75  +
pop ecx  +
pop ecx  +
mov byte ptr [ebp-4] 0Dh +
lea ecx [ebp-24h] +
call sub_1015174  +
mov byte ptr [ebp-4] 8 +
lea ecx [ebp-28h] +
call sub_1015174  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-18h] +
call sub_1015174  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-70h] +
call sub_1014FBC  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-40h] +
call sub_1014FBC  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-14h] +
call sub_1015174  +
mov [ebp-4] bl +
lea ecx [ebp-8Ch] +
call sub_103AF75  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
mov eax edi +
call sub_1021FA5  +
retn 10h  +
***
call sub_1021EB9  +
mov eax [ebp+1Ch] +
xor ebx ebx +
lea ecx [ebp-1Ch] +
mov dword ptr [ebp-14h] 1 +
mov [eax] ebx +
mov [ebp-10h] ebx +
mov [ebp-24h] ebx +
call sub_10151DA  +
mov [ebp-4] ebx +
lea ecx [ebp-18h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 1 +
push offset aSystemCurren_0  +
lea ecx [ebp-20h] +
call sub_10161A7  +
mov byte ptr [ebp-4] 2 +
mov edi [ebp+0Ch] +
lea eax [ebp-1Ch] +
push eax  +
push edi  +
lea eax [ebp-20h] +
push eax  +
call sub_10360F6  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-20h] +
call sub_1015174  +
push off_10646A4  +
lea ecx [ebp+0Ch] +
call sub_10161A7  +
mov byte ptr [ebp-4] 3 +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
call sub_10360F6  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp+0Ch] +
call sub_1015174  +
push ebx  +
lea eax [ebp-10h] +
push eax  +
push ebx  +
push 2001Fh  +
push ebx  +
push ebx  +
push ebx  +
push dword ptr [ebp-18h]  +
mov esi 80000002h +
push esi  +
call ds:RegCreateKeyExW  +
cmp eax ebx +
jz loc_104E489  +
push dword ptr [edi]  +
push eax  +
push offset aError0xXEncoun  +
push 3  +
call sub_103AC75  +
add esp 10h +
mov [ebp-14h] ebx +
jmp loc_104E4C4  +
cmp [ebp+10h] ebx +
jnz loc_104E497  +
mov dword ptr [ebp-24h] 1 +
jmp loc_104E4C4  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push 7  +
push ebx  +
push off_10646A8  +
push dword ptr [ebp-10h]  +
call ds:RegSetValueExW  +
cmp eax ebx +
jz loc_104E4BD  +
push dword ptr [edi]  +
push eax  +
push offset aError0xXEnco_0  +
jmp loc_104E47A  +
mov dword ptr [ebp-14h] 1 +
cmp [ebp-10h] ebx +
jz loc_104E4D2  +
push dword ptr [ebp-10h]  +
call ds:RegCloseKey  +
cmp [ebp-24h] ebx +
jz loc_104E4E1  +
push dword ptr [ebp-18h]  +
push esi  +
call ds:RegDeleteKeyW  +
cmp [ebp+18h] ebx +
jz loc_104E5DF  +
lea ecx [ebp-3Ch] +
call sub_1014C71  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp+10h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 5 +
mov ecx [ebp+8] +
lea eax [ebp+10h] +
push eax  +
push 2  +
call sub_103B80D  +
test eax eax +
jnz loc_104E541  +
push offset aCouldNotGetNam  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
xor esi esi +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp+10h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-3Ch] +
call sub_1014FBC  +
jmp loc_104E5E2  +
mov ecx [ebp+8] +
lea eax [ebp+0Ch] +
push eax  +
push ebx  +
call sub_103AFC1  +
test eax eax +
jnz loc_104E566  +
push dword ptr [ebp+10h]  +
push offset aCouldNotGetT_2  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
jmp loc_104E522  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+10h]  +
push offset aInstallingIn_2  +
push 1  +
call sub_103AC75  +
add esp 10h +
cmp dword ptr [ebp+0Ch] 5 +
jz loc_104E5AB  +
cmp dword ptr [ebp+0Ch] 9 +
jnz loc_104E5BD  +
mov ecx [ebp+8] +
lea eax [ebp-3Ch] +
push eax  +
push 8  +
call sub_103C4CC  +
test eax eax +
jz loc_104E522  +
mov edx [ebp+1Ch] +
lea eax [ebp-3Ch] +
push eax  +
push edi  +
lea ecx [ebp+10h] +
call sub_104C303  +
jmp loc_104E5B9  +
push dword ptr [ebp+1Ch]  +
lea eax [ebp+10h] +
push eax  +
mov ecx edi +
call sub_104BFFD  +
cmp eax ebx +
jz loc_104E5C7  +
push dword ptr [ebp+10h]  +
push offset aCouldNotReinst  +
jmp loc_104E55A  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp+10h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-3Ch] +
call sub_1014FBC  +
xor esi esi +
inc esi  +
cmp [ebp-14h] ebx +
jz loc_104E5EF  +
cmp esi ebx +
jz loc_104E5EF  +
xor esi esi +
jmp loc_104E5F4  +
mov esi 643h +
mov [ebp-4] bl +
lea ecx [ebp-18h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call sub_1015174  +
mov eax esi +
call sub_1021FA5  +
retn 18h  +
***
call sub_1021F2C  +
mov ebx [ebp+8] +
mov esi [ebp+10h] +
lea ecx [ebp-250h] +
call sub_1014C71  +
xor edi edi +
mov [ebp-4] edi +
lea ecx [ebp-21Ch] +
call sub_10151DA  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-280h] +
call sub_1014C71  +
mov byte ptr [ebp-4] 2 +
push 6  +
mov [esi] edi +
pop ecx  +
mov [ebp-220h] edi +
mov [ebp-234h] edi +
mov [ebp-230h] edi +
mov [ebp-228h] edi +
mov [ebp-22Ch] edi +
xor eax eax +
lea edi [ebp-268h] +
stos   +
lea eax [ebp-250h] +
push eax  +
push 4  +
mov ecx ebx +
call sub_103C4CC  +
test eax eax +
jnz loc_104E6B6  +
push offset aCouldNotGetSer  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
mov edi 65Bh +
jmp loc_104E89A  +
cmp dword ptr [ebp-248h] 1 +
jbe loc_104E6D5  +
push offset aTheDriverPac_1  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
push 0Dh  +
pop edi  +
jmp loc_104E89A  +
cmp dword ptr [ebp-248h] 0 +
jnz loc_104E6E5  +
push offset aNoServicesFoun  +
jmp loc_104E6C4  +
mov eax [ebp-250h] +
xor ecx ecx +
test eax eax +
setnz cl  +
test ecx ecx +
jnz loc_104E700  +
push 80004005h  +
call loc_1014415  +
add eax 8 +
push eax  +
lea ecx [ebp-21Ch] +
call sub_1015959  +
push off_10646B0  +
mov edi 104h +
push edi  +
lea eax [ebp-218h] +
push eax  +
call sub_1014BA1  +
test eax eax +
jl loc_104E6AC  +
lea ecx [ebp-21Ch] +
call sub_1015002  +
push eax  +
push edi  +
lea eax [ebp-218h] +
push eax  +
call sub_1014BDB  +
test eax eax +
jl loc_104E6AC  +
lea ecx [ebp-268h] +
call sub_104B3D3  +
mov edi eax +
test edi edi +
jnz loc_104E89A  +
lea eax [ebp-218h] +
push eax  +
push edi  +
lea eax [ebp-268h] +
push eax  +
call ds:CreateMutexW  +
mov [ebp-228h] eax +
test eax eax +
jnz loc_104E78D  +
call ds:GetLastError  +
mov edi eax +
jmp loc_104E896  +
push 3E8h  +
push eax  +
call ds:WaitForSingleObject  +
cmp eax 80h +
jz loc_104E7B2  +
test eax eax +
jz loc_104E7B2  +
cmp eax 102h +
jnz loc_104E780  +
push 20h  +
jmp loc_104E6CF  +
and dword ptr [ebp-224h] 0 +
lea eax [ebp-234h] +
push eax  +
lea eax [ebp-220h] +
push eax  +
lea eax [ebp-224h] +
push eax  +
lea eax [ebp-280h] +
push eax  +
push ecx  +
lea eax [ebp-21Ch] +
mov ecx esp +
mov [ebp-238h] esp +
push eax  +
mov dword ptr [ebp-22Ch] 1 +
call sub_10151F2  +
mov byte ptr [ebp-4] 3 +
push ebx  +
mov byte ptr [ebp-4] 2 +
call sub_104DB99  +
mov edi eax +
test edi edi +
jz loc_104E820  +
push dword ptr [ebp-21Ch]  +
push edi  +
push offset aError0xXOccure  +
push 3  +
call sub_103AC75  +
add esp 10h +
jmp loc_104E896  +
mov eax [ebp-224h] +
mov [ebp-230h] eax +
test eax eax +
jz loc_104E8E5  +
lea eax [ebp-224h] +
push eax  +
lea eax [ebp-280h] +
push eax  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-21Ch] +
push ecx  +
mov ecx esp +
mov [ebp-238h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 4 +
mov byte ptr [ebp-4] 2 +
call sub_104DEA1  +
test eax eax +
jnz loc_104E887  +
push dword ptr [ebp-21Ch]  +
mov edi 643h +
push offset aWeWereUnableTo  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
jmp loc_104E89A  +
cmp dword ptr [ebp-224h] 0 +
jz loc_104E8E5  +
mov dword ptr [esi] 1 +
test edi edi +
jz loc_104E8E5  +
push offset aFailedToUnin_3  +
push edi  +
push 3  +
call sub_103AD09  +
add esp 0Ch +
cmp dword ptr [ebp-22Ch] 0 +
jz loc_104E91A  +
xor eax eax +
cmp [ebp-230h] eax +
push esi  +
setnz al  +
push eax  +
push dword ptr [ebp-234h]  +
lea eax [ebp-21Ch] +
push dword ptr [ebp-220h]  +
push eax  +
push ebx  +
call sub_104E3BD  +
test eax eax +
jz loc_104E905  +
push eax  +
push offset aError0xXEnco_1  +
jmp loc_104E8FB  +
lea eax [ebp-21Ch] +
push eax  +
call sub_104BB1A  +
test eax eax +
jz loc_104E905  +
push eax  +
push offset aSomePostUninst  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
cmp dword ptr [ebp-22Ch] 0 +
jz loc_104E91A  +
push dword ptr [ebp-228h]  +
call ds:ReleaseMutex  +
cmp dword ptr [ebp-228h] 0 +
jz loc_104E92F  +
push dword ptr [ebp-228h]  +
call ds:CloseHandle  +
lea eax [ebp-268h] +
call sub_104B514  +
cmp dword ptr [ebp-220h] 0 +
jz loc_104E94F  +
push dword ptr [ebp-220h]  +
call sub_1021179  +
pop ecx  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-280h] +
call sub_1014FBC  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-21Ch] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-250h] +
call sub_1014FBC  +
mov eax edi +
call sub_1021FBE  +
retn 0Ch  +
***
call sub_1021EB9  +
xor ebx ebx +
lea ecx [ebp-14h] +
xor esi esi +
mov [ebp-1Ch] ebx +
call sub_10151DA  +
mov [ebp-4] ebx +
mov edi [ebp+0Ch] +
lea ecx [ebp-10h] +
mov [edi] ebx +
call sub_10151DA  +
mov byte ptr [ebp-4] 1 +
mov ecx [ebp+8] +
lea eax [ebp-10h] +
push eax  +
push 2  +
call sub_103B80D  +
test eax eax +
jnz loc_104E9E4  +
push offset aCouldNotGetNam  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
mov esi 65Bh +
jmp loc_104EA9E  +
mov ecx [ebp+8] +
lea eax [ebp-18h] +
push eax  +
push ebx  +
call sub_103AFC1  +
test eax eax +
jnz loc_104EA0E  +
push dword ptr [ebp-10h]  +
push offset aCouldNotGetT_2  +
push 3  +
call sub_103AC75  +
mov esi 65Bh +
jmp loc_104EA9B  +
push dword ptr [ebp-18h]  +
push dword ptr [ebp-10h]  +
push offset aInstallingIn_2  +
push 1  +
call sub_103AC75  +
add esp 10h +
cmp dword ptr [ebp-18h] 0Bh +
jnz loc_104EA9E  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
push 6  +
call sub_103B00B  +
test eax eax +
jnz loc_104EA46  +
push offset aCouldNotGetT_3  +
jmp loc_104E9D1  +
mov ecx [ebp+8] +
lea eax [ebp-14h] +
push eax  +
push 7  +
call sub_103B80D  +
test eax eax +
jnz loc_104EA6D  +
push offset aCouldNotGetT_4  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
mov esi 643h +
jmp loc_104EA9E  +
mov eax [ebp-20h] +
shr eax 4 +
push eax  +
push dword ptr [ebp-1Ch]  +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-10h] +
push eax  +
mov ecx edi +
call sub_104CE06  +
mov esi eax +
cmp esi ebx +
jz loc_104EA9E  +
push dword ptr [ebp-10h]  +
push offset aCouldNotReinst  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
mov [ebp-4] bl +
lea ecx [ebp-10h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call sub_1015174  +
mov eax esi +
call sub_1021FA5  +
retn 8  +
***
call sub_1021EB9  +
lea ecx [ebp-10h] +
call sub_10151DA  +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-14h] 0 +
mov byte ptr [ebp-4] 1 +
mov esi [ebp+0Ch] +
mov ecx [ebp+8] +
and dword ptr [esi] 0 +
lea eax [ebp-10h] +
push eax  +
push 7  +
call sub_103B80D  +
test eax eax +
jnz loc_104EB50  +
push offset aCouldNotGetT_4  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
mov ebx 643h +
push offset aFailedToUnin_3  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
push esi  +
push dword ptr [ebp+8]  +
call sub_104E98B  +
test eax eax +
jz loc_104EB3A  +
push eax  +
push offset aError0xXEnco_1  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_1015174  +
mov eax ebx +
call sub_1021FA5  +
retn 8  +
lea eax [ebp-10h] +
push eax  +
xor ecx ecx +
call sub_10521DF  +
test eax eax +
jnz loc_104EB78  +
push dword ptr [ebp-10h]  +
push offset aUnableToRemove  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
mov ebx 65Bh +
jmp loc_104EB0F  +
xor ebx ebx +
jmp loc_104EB3A  +
***
call sub_1021EB9  +
mov eax [ebp+18h] +
xor ebx ebx +
lea ecx [ebp-1Ch] +
mov dword ptr [ebp-14h] 1 +
mov [eax] ebx +
mov [ebp-10h] ebx +
mov [ebp-24h] ebx +
call sub_10151DA  +
mov [ebp-4] ebx +
lea ecx [ebp-18h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 1 +
push offset aSystemCurren_0  +
lea ecx [ebp-20h] +
call sub_10161A7  +
mov byte ptr [ebp-4] 2 +
mov edi [ebp+8] +
lea eax [ebp-1Ch] +
push eax  +
push edi  +
lea eax [ebp-20h] +
push eax  +
call sub_10360F6  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-20h] +
call sub_1015174  +
push off_10646A4  +
lea ecx [ebp+8] +
call sub_10161A7  +
mov byte ptr [ebp-4] 3 +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp+8] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
call sub_10360F6  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp+8] +
call sub_1015174  +
lea eax [ebp-10h] +
push eax  +
push 2001Fh  +
push ebx  +
push dword ptr [ebp-18h]  +
mov esi 80000002h +
push esi  +
call ds:RegOpenKeyExW  +
cmp eax ebx +
jz loc_104EC5F  +
push dword ptr [edi]  +
cmp eax 2 +
jz loc_104EC4E  +
push eax  +
push offset aError0xXEncoun  +
push 3  +
call sub_103AC75  +
add esp 10h +
mov [ebp-14h] ebx +
jmp loc_104EC9A  +
push offset aDriverStoreRef  +
push 1  +
call sub_103AC75  +
add esp 0Ch +
jmp loc_104EC9A  +
cmp [ebp+10h] ebx +
jnz loc_104EC6D  +
mov dword ptr [ebp-24h] 1 +
jmp loc_104EC9A  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push 7  +
push ebx  +
push off_10646A8  +
push dword ptr [ebp-10h]  +
call ds:RegSetValueExW  +
cmp eax ebx +
jz loc_104EC93  +
push dword ptr [edi]  +
push eax  +
push offset aError0xXEnco_0  +
jmp loc_104EC3F  +
mov dword ptr [ebp-14h] 1 +
cmp [ebp-10h] ebx +
jz loc_104ECA8  +
push dword ptr [ebp-10h]  +
call ds:RegCloseKey  +
cmp [ebp-24h] ebx +
jz loc_104ED08  +
push dword ptr [ebp-18h]  +
push esi  +
call ds:RegDeleteKeyW  +
mov esi 80000000h +
push esi  +
push ebx  +
push ebx  +
call ds:OpenSCManagerW  +
mov [ebp+8] eax +
cmp eax ebx +
jz loc_104ED08  +
mov eax [edi] +
push esi  +
push eax  +
push dword ptr [ebp+8]  +
call ds:OpenServiceW  +
mov esi ds:CloseServiceHandle +
cmp eax ebx +
jnz loc_104ED00  +
call ds:GetLastError  +
cmp eax 424h +
jnz loc_104ED03  +
push dword ptr [ebp-1Ch]  +
push 80000002h  +
call ds:RegDeleteKeyW  +
jmp loc_104ED03  +
push eax  +
call esi  +
push dword ptr [ebp+8]  +
call esi  +
lea ecx [ebp-3Ch] +
call sub_1014C71  +
mov byte ptr [ebp-4] 4 +
cmp [ebp+10h] ebx +
jz loc_104ED24  +
push dword ptr [ebp+10h]  +
lea ecx [ebp-3Ch] +
call sub_103C474  +
push dword ptr [ebp+18h]  +
lea eax [ebp-3Ch] +
push eax  +
push dword ptr [ebp+0Ch]  +
push ecx  +
mov ecx esp +
mov [ebp+10h] esp +
push edi  +
call sub_10151F2  +
mov byte ptr [ebp-4] 5 +
mov byte ptr [ebp-4] 4 +
call sub_104DEA1  +
cmp eax ebx +
jnz loc_104ED5D  +
push offset aErrorEncount_1  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
xor eax eax +
jmp loc_104ED60  +
xor eax eax +
inc eax  +
cmp [ebp-14h] ebx +
jz loc_104ED6D  +
cmp eax ebx +
jz loc_104ED6D  +
xor esi esi +
jmp loc_104ED72  +
mov esi 643h +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-3Ch] +
call sub_1014FBC  +
mov [ebp-4] bl +
lea ecx [ebp-18h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call sub_1015174  +
mov eax esi +
call sub_1021FA5  +
retn 14h  +
***
call sub_1021F2C  +
mov esi [ebp+8] +
mov ebx [ebp+14h] +
lea ecx [ebp-220h] +
call sub_10151DA  +
xor edi edi +
mov [ebp-4] edi +
lea ecx [ebp-274h] +
call sub_1014C71  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-21Ch] +
call sub_10151DA  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-224h] +
mov [ebp-238h] edi +
call sub_10151DA  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-28Ch] +
mov [ebp-22Ch] edi +
mov [ebp-23Ch] edi +
call sub_1014C71  +
mov byte ptr [ebp-4] 4 +
push 6  +
mov [ebx] edi +
pop ecx  +
mov [ebp-228h] edi +
mov [ebp-230h] edi +
xor eax eax +
lea edi [ebp-2A4h] +
stos   +
lea eax [ebp-274h] +
push eax  +
push 4  +
mov ecx esi +
call sub_103C4CC  +
test eax eax +
jnz loc_104EE5E  +
push offset aCouldNotGetSer  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
mov edi 65Bh +
jmp loc_104F266  +
cmp dword ptr [ebp-26Ch] 1 +
jbe loc_104EE7D  +
push offset aTheDriverPac_2  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
push 0Dh  +
pop edi  +
jmp loc_104F266  +
cmp dword ptr [ebp-26Ch] 0 +
jnz loc_104EE8D  +
push offset aNoServicesFoun  +
jmp loc_104EE6C  +
mov eax [ebp-274h] +
xor ecx ecx +
test eax eax +
setnz cl  +
test ecx ecx +
jnz loc_104EEA8  +
push 80004005h  +
call loc_1014415  +
add eax 8 +
push eax  +
lea ecx [ebp-21Ch] +
call sub_1015959  +
push off_10646B0  +
mov edi 104h +
push edi  +
lea eax [ebp-218h] +
push eax  +
call sub_1014BA1  +
test eax eax +
jl loc_104EE54  +
lea ecx [ebp-21Ch] +
call sub_1015002  +
push eax  +
push edi  +
lea eax [ebp-218h] +
push eax  +
call sub_1014BDB  +
test eax eax +
jl loc_104EE54  +
lea ecx [ebp-2A4h] +
call sub_104B3D3  +
mov edi eax +
test edi edi +
jnz loc_104F266  +
lea eax [ebp-218h] +
push eax  +
push edi  +
lea eax [ebp-2A4h] +
push eax  +
call ds:CreateMutexW  +
mov [ebp-228h] eax +
test eax eax +
jnz loc_104EF35  +
call ds:GetLastError  +
mov edi eax +
jmp loc_104F25E  +
push 3E8h  +
push eax  +
call ds:WaitForSingleObject  +
cmp eax 80h +
jz loc_104EF5A  +
test eax eax +
jz loc_104EF5A  +
cmp eax 102h +
jnz loc_104EF28  +
push 20h  +
jmp loc_104EE77  +
and dword ptr [ebp-234h] 0 +
lea eax [ebp-23Ch] +
push eax  +
lea eax [ebp-22Ch] +
push eax  +
lea eax [ebp-224h] +
push eax  +
lea eax [ebp-234h] +
push eax  +
push ecx  +
lea eax [ebp-21Ch] +
mov ecx esp +
mov [ebp-240h] esp +
push eax  +
mov dword ptr [ebp-230h] 1 +
call sub_10151F2  +
mov byte ptr [ebp-4] 5 +
push esi  +
mov byte ptr [ebp-4] 4 +
call sub_104D6E8  +
mov edi eax +
test edi edi +
jnz loc_104F266  +
mov eax [ebp-234h] +
push offset word_10022EC  +
lea ecx [ebp-224h] +
mov [ebp-238h] eax +
call sub_101492B  +
test eax eax +
jnz loc_104F10F  +
cmp [ebp-234h] eax +
jz loc_104F0BA  +
cmp [ebp+10h] eax +
jnz loc_104F0BA  +
push offset aThisDriverStor  +
push 1  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
lea eax [ebp-21Ch] +
push eax  +
call sub_104BB1A  +
test eax eax +
jz loc_104F01B  +
push eax  +
push offset aSomePostInstal  +
push 3  +
call sub_103AC75  +
add esp 0Ch +
cmp dword ptr [ebp-230h] 0 +
jz loc_104F030  +
push dword ptr [ebp-228h]  +
call ds:ReleaseMutex  +
cmp dword ptr [ebp-228h] 0 +
jz loc_104F045  +
push dword ptr [ebp-228h]  +
call ds:CloseHandle  +
lea eax [ebp-2A4h] +
call sub_104B514  +
cmp dword ptr [ebp-22Ch] 0 +
jz loc_104F065  +
push dword ptr [ebp-22Ch]  +
call sub_1021179  +
pop ecx  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-28Ch] +
call sub_1014FBC  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-224h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-21Ch] +
call sub_1015174  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-274h] +
call sub_1014FBC  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-220h] +
call sub_1015174  +
mov eax edi +
call sub_1021FBE  +
retn 10h  +
lea eax [ebp-220h] +
push eax  +
push 2  +
mov ecx esi +
call sub_103B80D  +
test eax eax +
jnz loc_104F0E6  +
push offset aCouldNotGetNam  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
mov edi 643h +
jmp loc_104F266  +
cmp dword ptr [ebp+0Ch] 9 +
jnz loc_104F1EE  +
lea eax [ebp-28Ch] +
push eax  +
push 8  +
mov ecx esi +
call sub_103C4CC  +
test eax eax +
jnz loc_104F1EE  +
push offset aCouldNotGetT_5  +
jmp loc_104F0D3  +
cmp dword ptr [ebp+10h] 0 +
jz loc_104F24E  +
lea ecx [ebp-25Ch] +
call sub_103B217  +
mov byte ptr [ebp-4] 6 +
push 3  +
pop esi  +
push esi  +
push ecx  +
lea eax [ebp-224h] +
mov ecx esp +
mov [ebp-240h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 7 +
mov byte ptr [ebp-4] 6 +
lea ecx [ebp-25Ch] +
call sub_103B6D1  +
cmp eax 0B7h +
jz loc_104F188  +
push dword ptr [ebp-224h]  +
push offset aCouldNotFindWs  +
push esi  +
call sub_103AC75  +
add esp 0Ch +
mov edi 643h +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-25Ch] +
call sub_103AF75  +
jmp loc_104F266  +
lea eax [ebp-220h] +
push eax  +
push 2  +
lea ecx [ebp-25Ch] +
call sub_103B80D  +
test eax eax +
jnz loc_104F1AF  +
push offset aCouldNotGetNam  +
push esi  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
jmp loc_104F16F  +
cmp dword ptr [ebp+0Ch] 9 +
jnz loc_104F1D4  +
lea eax [ebp-28Ch] +
push eax  +
push 8  +
lea ecx [ebp-25Ch] +
call sub_103C4CC  +
test eax eax +
jnz loc_104F1D4  +
push offset aCouldNotGetT_5  +
jmp loc_104F1A5  +
lea ecx [ebp-25Ch] +
call sub_103ADBD  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-25Ch] +
call sub_103AF75  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp-220h]  +
push offset aInstallingIn_2  +
push 1  +
call sub_103AC75  +
add esp 10h +
cmp dword ptr [ebp+0Ch] 5 +
jz loc_104F236  +
cmp dword ptr [ebp+0Ch] 9 +
jnz loc_104EFFB  +
lea eax [ebp-28Ch] +
push eax  +
lea eax [ebp-21Ch] +
push eax  +
mov edx ebx +
lea ecx [ebp-220h] +
call sub_104C303  +
jmp loc_104EF2E  +
push ebx  +
lea eax [ebp-220h] +
push eax  +
lea ecx [ebp-21Ch] +
call sub_104BFFD  +
jmp loc_104EF2E  +
push offset aThisDriverStor  +
push 1  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
xor edi edi +
test edi edi +
jz loc_104EFFB  +
push offset aTheDriverInsta  +
push edi  +
push 3  +
call sub_103AD09  +
add esp 0Ch +
cmp dword ptr [ebp-230h] 0 +
jz loc_104F030  +
cmp dword ptr [ebp-238h] 0 +
jnz loc_104F01B  +
push ebx  +
push dword ptr [ebp-23Ch]  +
lea eax [ebp-21Ch] +
push dword ptr [ebp-22Ch]  +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_104EB81  +
test eax eax +
jz loc_104F01B  +
push eax  +
push offset aError0xXEnco_2  +
jmp loc_104F011  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
xor edi edi +
cmp [ebp+arg_0] edi +
jz loc_104F308  +
cmp [ebp+arg_4] edi +
jz loc_104F308  +
cmp [ebp+arg_8] edi +
jz loc_104F308  +
cmp [ebp+arg_C] edi +
jz loc_104F308  +
push 14h  +
call sub_1021488  +
mov esi eax +
pop ecx  +
cmp esi edi +
jz loc_104F308  +
push [ebp+arg_0]  +
call sub_105228A  +
mov ebx eax +
mov [esi+4] ebx +
cmp ebx edi +
jnz loc_104F311  +
push esi  +
call sub_10213A1  +
pop ecx  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
push [ebp+arg_4]  +
call sub_105228A  +
mov edi eax +
mov [esi+8] edi +
test edi edi +
jnz loc_104F331  +
push ebx  +
call sub_10213A1  +
push esi  +
call sub_10213A1  +
pop ecx  +
jmp loc_104F307  +
push [ebp+arg_8]  +
call sub_105228A  +
mov [esi+0Ch] eax +
test eax eax +
jnz loc_104F357  +
push edi  +
call sub_10213A1  +
push ebx  +
call sub_10213A1  +
push esi  +
call sub_10213A1  +
add esp 0Ch +
jmp loc_104F308  +
mov eax [ebp+arg_C] +
mov [esi+10h] eax +
mov dword ptr [esi] 0A623D821h +
mov eax esi +
jmp loc_104F30A  +
***
mov edi edi +
push edi  +
xor edi edi +
cmp esi edi +
jnz loc_104F379  +
xor eax eax +
pop edi  +
retn   +
mov eax [esi+10h] +
mov [esi] edi +
cmp eax edi +
jz loc_104F38C  +
push eax  +
call ds:CloseHandle  +
mov [esi+10h] edi +
mov eax [esi+0Ch] +
cmp eax edi +
jz loc_104F39D  +
push eax  +
call sub_10213A1  +
pop ecx  +
mov [esi+0Ch] edi +
mov eax [esi+8] +
cmp eax edi +
jz loc_104F3AE  +
push eax  +
call sub_10213A1  +
pop ecx  +
mov [esi+8] edi +
mov eax [esi+4] +
cmp eax edi +
jz loc_104F3BF  +
push eax  +
call sub_10213A1  +
pop ecx  +
mov [esi+4] edi +
push esi  +
call sub_10213A1  +
pop ecx  +
xor eax eax +
inc eax  +
pop edi  +
retn   +
***
mov eax [esi+0Ch] +
test eax eax +
jz loc_104F3E2  +
push eax  +
call ds:FreeSid  +
and dword ptr [esi+0Ch] 0 +
mov eax [esi+10h] +
push ebx  +
mov ebx ds:GetProcessHeap +
push edi  +
mov edi ds:HeapFree +
test eax eax +
jz loc_104F403  +
push eax  +
push 0  +
call ebx  +
push eax  +
call edi  +
and dword ptr [esi+10h] 0 +
mov eax [esi+14h] +
test eax eax +
jz loc_104F416  +
push eax  +
push 0  +
call ebx  +
push eax  +
call edi  +
and dword ptr [esi+14h] 0 +
xor eax eax +
pop edi  +
mov [esi] eax +
mov [esi+8] eax +
mov [esi+4] eax +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi eax +
xor eax eax +
test edx edx +
jz loc_104F43B  +
cmp edx [ebp+arg_4] +
jbe loc_104F440  +
mov eax 80070057h +
test eax eax +
jl loc_104F44E  +
mov eax [ebp+arg_0] +
call sub_10148C7  +
jmp loc_104F451  +
and dword ptr [edi] 0 +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_104F490  +
cmp [ebp+arg_4] eax +
jz loc_104F48C  +
movzx edx word ptr [ebx] +
test dx dx +
jz loc_104F48C  +
mov [ecx] dx +
inc ecx  +
inc ecx  +
inc ebx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_104F46F  +
test esi esi +
jnz loc_104F498  +
dec ecx  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
xor edx edx +
mov [ecx] dx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_104F4A6  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
cmp esi edi +
jnz loc_104F4C7  +
push 57h  +
pop eax  +
jmp loc_104F4F8  +
cmp dword ptr [esi] 0A623D821h +
jnz loc_104F4C2  +
cmp dword_10659F0 edi +
jz loc_104F4C2  +
mov eax [esi+10h] +
cmp eax edi +
jz loc_104F4F1  +
push eax  +
call ds:ReleaseMutex  +
test eax eax +
jnz loc_104F4F1  +
call ds:GetLastError  +
mov edi eax +
call sub_104F36C  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_1063194 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
lea eax [ebp+pSid] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 220h  +
mov esi ecx +
push 20h  +
push 2  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
mov [esi+0Ch] ebx +
mov [esi+10h] ebx +
mov [esi+14h] ebx +
mov [esi] ebx +
mov [esi+8] ebx +
mov [esi+4] ebx +
mov [ebp+pIdentifierAuthority.Value] bl +
mov [ebp+pIdentifierAuthority.Value+1] bl +
mov [ebp+pIdentifierAuthority.Value+2] bl +
mov [ebp+pIdentifierAuthority.Value+3] bl +
mov [ebp+pIdentifierAuthority.Value+4] bl +
mov [ebp+pIdentifierAuthority.Value+5] 5 +
mov [ebp+pSid] ebx +
call ds:AllocateAndInitializeSid  +
test eax eax +
jnz loc_104F578  +
call ds:GetLastError  +
mov edi eax +
call sub_104F3D0  +
mov eax edi +
jmp loc_104F617  +
mov eax [ebp+pSid] +
push eax  +
mov [esi+0Ch] eax +
call ds:GetLengthSid  +
mov edi eax +
add edi 10h +
push edi  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+pDacl] eax +
cmp eax ebx +
jz loc_104F564  +
push 2  +
push edi  +
push eax  +
mov [esi+10h] eax +
call ds:InitializeAcl  +
test eax eax +
jz loc_104F564  +
push [ebp+pSid]  +
push 1F0001h  +
push 2  +
push [ebp+pDacl]  +
call ds:AddAccessAllowedAce  +
test eax eax +
jz loc_104F564  +
push 14h  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov edi eax +
cmp edi ebx +
jz loc_104F564  +
push 1  +
push edi  +
mov [esi+14h] edi +
call ds:InitializeSecurityDescriptor  +
test eax eax +
jz loc_104F564  +
push ebx  +
push [ebp+pDacl]  +
push 1  +
push edi  +
call ds:SetSecurityDescriptorDacl  +
test eax eax +
jz loc_104F564  +
mov dword ptr [esi] 0Ch +
mov [esi+8] ebx +
mov [esi+4] edi +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1021557  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
push 7FFFFFFFh  +
push esi  +
lea eax [ebp+arg_0] +
call sub_104F428  +
test eax eax +
jl loc_104F671  +
cmp [ebp+arg_C] 7FFFFFFEh +
jbe loc_104F659  +
mov eax 80070057h +
jmp loc_104F671  +
mov eax [ebp+arg_0] +
push [ebp+arg_C]  +
mov edx [ebp+arg_4] +
sub edx eax +
lea ecx [esi+eax*2] +
mov eax [ebp+arg_8] +
push 0  +
call sub_104F45B  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
and [ebp+var_4] 0 +
test eax eax +
jnz loc_104F691  +
xor eax eax +
inc eax  +
jmp locret_104F6E3  +
cmp dword ptr [eax] 0A623D821h +
jnz loc_104F68C  +
cmp dword_10659F0 0 +
jz loc_104F68C  +
push esi  +
mov esi [eax+8] +
lea eax [ebp+var_4] +
push eax  +
push 7FFFFFFFh  +
push esi  +
call sub_1014C35  +
test eax eax +
jge loc_104F6BE  +
xor eax eax +
inc eax  +
jmp loc_104F6E2  +
mov eax [ebp+var_4] +
inc eax  +
cmp [ebp+arg_4] 0 +
jz loc_104F6E2  +
cmp [ebp+arg_8] eax +
jb loc_104F6E2  +
push esi  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1014BA1  +
xor ecx ecx +
test eax eax +
setl cl  +
mov eax ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
and [ebp+var_4] 0 +
test eax eax +
jnz loc_104F702  +
xor eax eax +
inc eax  +
jmp locret_104F754  +
cmp dword ptr [eax] 0A623D821h +
jnz loc_104F6FD  +
cmp dword_10659F0 0 +
jz loc_104F6FD  +
push esi  +
mov esi [eax+0Ch] +
lea eax [ebp+var_4] +
push eax  +
push 7FFFFFFFh  +
push esi  +
call sub_1014C35  +
test eax eax +
jge loc_104F72F  +
xor eax eax +
inc eax  +
jmp loc_104F753  +
mov eax [ebp+var_4] +
inc eax  +
cmp [ebp+arg_4] 0 +
jz loc_104F753  +
cmp [ebp+arg_8] eax +
jb loc_104F753  +
push esi  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1014BA1  +
xor ecx ecx +
test eax eax +
setl cl  +
mov eax ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 210h +
mov eax dword_1063194 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_210] 0 +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi 104h +
push esi  +
lea eax [ebp+Buffer] +
push eax  +
call ds:GetSystemDirectoryW  +
test eax eax +
jnz loc_104F79A  +
xor eax eax +
inc eax  +
jmp loc_104F80B  +
push offset SubBlock  +
push esi  +
lea eax [ebp+Buffer] +
push eax  +
call sub_1014BDB  +
test eax eax +
jl loc_104F795  +
push offset aDrvstore  +
push esi  +
lea eax [ebp+Buffer] +
push eax  +
call sub_1014BDB  +
test eax eax +
jl loc_104F795  +
lea eax [ebp+var_210] +
push eax  +
push 7FFFFFFFh  +
lea eax [ebp+Buffer] +
push eax  +
call sub_1014C35  +
test eax eax +
jl loc_104F795  +
mov eax [ebp+var_210] +
inc eax  +
test edi edi +
jz loc_104F80B  +
cmp [ebp+arg_4] eax +
jb loc_104F80B  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+arg_4]  +
push edi  +
call sub_1014BA1  +
xor ecx ecx +
test eax eax +
setl cl  +
mov eax ecx +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1021557  +
leave   +
retn 8  +
***
call sub_1022E04  +
cmp [ebp-24h] ebx +
jz locret_104F97F  +
push dword ptr [ebp-20h]  +
call ds:ReleaseMutex  +
test eax eax +
jnz locret_104F97F  +
call ds:GetLastError  +
mov [ebp-1Ch] eax +
retn   +
***
call sub_1021F2C  +
mov eax [ebp+0Ch] +
mov esi [ebp+8] +
xor ebx ebx +
lea ecx [ebp-4C4h] +
mov [ebp-4DCh] esi +
mov [ebp-4D4h] eax +
mov [ebp-4B4h] ebx +
call sub_10151DA  +
mov [ebp-4] ebx +
lea ecx [ebp-4B8h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-4BCh] +
call sub_10151DA  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-4C8h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 3 +
mov dword ptr [ebp-4CCh] 1 +
cmp esi ebx +
jnz loc_104FA40  +
push 57h  +
pop esi  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-4C8h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-4BCh] +
call sub_1015174  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-4B8h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-4C4h] +
call sub_1015174  +
mov eax esi +
call sub_1021FBE  +
retn 8  +
cmp dword_10659F0 ebx +
jnz loc_104FA5B  +
call sub_104F820  +
mov [ebp-4B4h] eax +
cmp eax ebx +
jz loc_104FA5B  +
mov esi eax +
jmp loc_104F9FA  +
push offset unk_10657E8  +
lea ecx [ebp-4C4h] +
call sub_10158CD  +
push offset a_  +
lea eax [ebp-4C4h] +
push eax  +
lea eax [ebp-4C0h] +
push eax  +
call sub_1015847  +
mov byte ptr [ebp-4] 4 +
push eax  +
lea ecx [ebp-4B8h] +
call sub_1015959  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-4C0h] +
call sub_1015174  +
mov edi ds:FindFirstFileW +
lea eax [ebp-260h] +
push eax  +
push dword ptr [ebp-4B8h]  +
call edi  +
mov [ebp-4C0h] eax +
cmp eax 0FFFFFFFFh +
jnz loc_104FAD1  +
call ds:GetLastError  +
cmp eax 2 +
jnz loc_104FA57  +
xor eax eax +
jmp loc_104FA57  +
mov esi offset SubBlock +
test byte ptr [ebp-260h] 10h +
jz loc_104FC9F  +
mov ebx ds:lstrcmpW +
push offset String2  +
lea eax [ebp-234h] +
push eax  +
call ebx  +
test eax eax +
jz loc_104FC9F  +
push offset a__  +
lea eax [ebp-234h] +
push eax  +
call ebx  +
test eax eax +
jz loc_104FC9F  +
push esi  +
lea eax [ebp-4C4h] +
push eax  +
lea eax [ebp-4D0h] +
push eax  +
call sub_1015847  +
mov byte ptr [ebp-4] 5 +
lea ecx [ebp-234h] +
push ecx  +
push eax  +
lea eax [ebp-4E4h] +
push eax  +
call sub_1015847  +
mov byte ptr [ebp-4] 6 +
push eax  +
lea ecx [ebp-4BCh] +
call sub_1015959  +
mov byte ptr [ebp-4] 5 +
lea ecx [ebp-4E4h] +
call sub_1015174  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-4D0h] +
call sub_1015174  +
push esi  +
lea eax [ebp-4BCh] +
push eax  +
lea eax [ebp-4D8h] +
push eax  +
call sub_1015847  +
mov byte ptr [ebp-4] 7 +
push offset a_inf_1  +
push eax  +
lea eax [ebp-4ECh] +
push eax  +
call sub_1015847  +
mov byte ptr [ebp-4] 8 +
push eax  +
lea ecx [ebp-4B8h] +
call sub_1015959  +
mov byte ptr [ebp-4] 7 +
lea ecx [ebp-4ECh] +
call sub_1015174  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-4D8h] +
call sub_1015174  +
lea eax [ebp-4B0h] +
push eax  +
push dword ptr [ebp-4B8h]  +
call edi  +
mov ebx eax +
cmp ebx 0FFFFFFFFh +
jnz loc_104FBFE  +
call ds:GetLastError  +
mov [ebp-4B4h] eax +
cmp eax 2 +
jnz loc_104FCC3  +
and dword ptr [ebp-4B4h] 0 +
jmp loc_104FC9F  +
test byte ptr [ebp-4B0h] 10h +
jnz loc_104FC79  +
push esi  +
lea eax [ebp-4BCh] +
push eax  +
lea eax [ebp-4E0h] +
push eax  +
call sub_1015847  +
mov byte ptr [ebp-4] 9 +
lea ecx [ebp-484h] +
push ecx  +
push eax  +
lea eax [ebp-4E8h] +
push eax  +
call sub_1015847  +
mov byte ptr [ebp-4] 0Ah +
push eax  +
lea ecx [ebp-4C8h] +
call sub_1015959  +
mov byte ptr [ebp-4] 9 +
lea ecx [ebp-4E8h] +
call sub_1015174  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-4E0h] +
call sub_1015174  +
push dword ptr [ebp-4D4h]  +
push dword ptr [ebp-4C8h]  +
call dword ptr [ebp-4DCh]  +
mov [ebp-4CCh] eax +
lea eax [ebp-4B0h] +
push eax  +
push ebx  +
call ds:FindNextFileW  +
test eax eax +
jz loc_104FC98  +
cmp dword ptr [ebp-4CCh] 0 +
jnz loc_104FBFE  +
push ebx  +
call ds:FindClose  +
lea eax [ebp-260h] +
push eax  +
push dword ptr [ebp-4C0h]  +
call ds:FindNextFileW  +
test eax eax +
jz loc_104FCC3  +
cmp dword ptr [ebp-4CCh] 0 +
jnz loc_104FAD6  +
push dword ptr [ebp-4C0h]  +
call ds:FindClose  +
mov esi [ebp-4B4h] +
jmp loc_104F9FA  +
***
call sub_1021EB9  +
lea ecx [ebp-14h] +
call sub_10151DA  +
xor esi esi +
mov [ebp-4] esi +
lea ecx [ebp-10h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 1 +
cmp [ebp+8] esi +
jz loc_104FDE9  +
cmp [ebp+0Ch] esi +
jz loc_104FDE9  +
cmp edi esi +
jz loc_104FDE9  +
push dword ptr [ebp+8]  +
lea ecx [ebp-1Ch] +
call sub_10161A7  +
mov byte ptr [ebp-4] 2 +
push offset unk_10657E8  +
lea ecx [ebp-18h] +
call sub_10161A7  +
mov byte ptr [ebp-4] 3 +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-18h] +
push eax  +
call sub_10360F6  +
mov bl al +
neg bl  +
sbb bl bl +
inc bl  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-18h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-1Ch] +
call sub_1015174  +
test bl bl +
jnz loc_104FDE9  +
push dword ptr [ebp+8]  +
lea ecx [ebp-1Ch] +
call sub_10161A7  +
mov byte ptr [ebp-4] 4 +
push offset aSoftwareMicr_2  +
lea ecx [ebp+8] +
call sub_10161A7  +
mov byte ptr [ebp-4] 5 +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp+8] +
push eax  +
call sub_10360F6  +
mov bl al +
neg bl  +
sbb bl bl +
inc bl  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp+8] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-1Ch] +
call sub_1015174  +
test bl bl +
jnz loc_104FDE9  +
push dword ptr [ebp-14h]  +
call sub_105228A  +
mov esi eax +
test esi esi +
jz loc_104FDE9  +
push dword ptr [ebp-10h]  +
call sub_105228A  +
test eax eax +
jnz loc_104FE0B  +
push esi  +
call sub_10213A1  +
pop ecx  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-10h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call sub_1015174  +
xor eax eax +
call sub_1021FA5  +
retn 8  +
mov ecx [ebp+0Ch] +
mov [ecx] esi +
mov [edi] eax +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-10h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call sub_1015174  +
xor eax eax +
inc eax  +
jmp loc_104FE03  +
***
call sub_1021EB9  +
push dword ptr [ebp+8]  +
lea ecx [ebp-10h] +
call sub_10161A7  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-10h] +
push eax  +
call sub_1035522  +
mov bl al +
neg bl  +
sbb bl bl +
inc bl  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_1015174  +
test bl bl +
jz loc_104FE75  +
push 2  +
pop eax  +
jmp loc_104FEDA  +
and dword ptr [ebp-14h] 0 +
lea eax [ebp-14h] +
push eax  +
push 1  +
push 0  +
push dword ptr [ebp+0Ch]  +
push 80000002h  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_104FEA3  +
push dword ptr [ebp-14h]  +
call ds:RegCloseKey  +
mov eax 0B7h +
jmp loc_104FEDA  +
push dword ptr [ebp+8]  +
lea ecx [ebp+8] +
call sub_10161A7  +
mov dword ptr [ebp-4] 1 +
lea eax [ebp+8] +
push eax  +
call sub_1036C8C  +
mov bl al +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
xor eax eax +
test bl bl +
setz al  +
dec eax  +
and eax 0FFFFFFF5h +
add eax 0Dh +
call sub_1021FA5  +
retn 8  +
***
call sub_1021EB9  +
push dword ptr [ebp+8]  +
lea ecx [ebp-14h] +
call sub_10161A7  +
xor esi esi +
mov [ebp-4] esi +
lea eax [ebp-14h] +
push eax  +
call sub_10371A4  +
mov bl al +
neg bl  +
sbb bl bl +
inc bl  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call sub_1015174  +
test bl bl +
jz loc_104FF2C  +
push 52h  +
pop eax  +
jmp loc_104FFB0  +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-10h] +
push eax  +
push esi  +
push 2001Fh  +
push esi  +
push esi  +
push esi  +
push dword ptr [ebp+0Ch]  +
mov [ebp-1Ch] esi +
push 80000002h  +
mov [ebp-10h] esi +
call ds:RegCreateKeyExW  +
test eax eax +
jz loc_104FF7E  +
push dword ptr [ebp+8]  +
lea ecx [ebp+8] +
call sub_10161A7  +
mov dword ptr [ebp-4] 1 +
lea eax [ebp+8] +
push eax  +
call sub_1036C8C  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
jmp loc_104FF24  +
cmp dword ptr [ebp-1Ch] 1 +
jnz loc_104FFA5  +
lea eax [ebp-18h] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
push 8  +
lea eax [ebp-18h] +
push eax  +
push 3  +
push esi  +
push offset aCreation  +
push dword ptr [ebp-10h]  +
call ds:RegSetValueExW  +
push dword ptr [ebp-10h]  +
call ds:RegCloseKey  +
xor eax eax +
call sub_1021FA5  +
retn 8  +
***
call sub_1021EB9  +
cmp dword ptr [ebp+8] 0 +
jz loc_104FFF3  +
push dword ptr [ebp+8]  +
lea ecx [ebp+8] +
call sub_10161A7  +
and dword ptr [ebp-4] 0 +
lea eax [ebp+8] +
push eax  +
call sub_1036C8C  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_1050007  +
push dword ptr [ebp+0Ch]  +
push 80000002h  +
call ds:RegDeleteKeyW  +
call sub_1021FA5  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 23Ch +
mov eax dword_1063194 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_8] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor eax eax +
mov [ebp+MutexAttributes.nLength] ebx +
lea edi [ebp+MutexAttributes.lpSecurityDescriptor] +
stos   +
stos   +
stos   +
stos   +
mov [ebp+var_21C] esi +
mov [ebp+var_224] ecx +
mov [ebp+hObject] ebx +
mov [ebp+var_214] ebx +
mov [ebp+var_218] ebx +
mov [ebp+var_220] ebx +
stos   +
cmp esi ebx +
jz loc_1050279  +
cmp [ebp+arg_4] 4 +
jz loc_1050089  +
cmp [ebp+arg_4] 3 +
jz loc_1050089  +
cmp [ebp+arg_4] 2 +
jnz loc_1050279  +
cmp ecx ebx +
jz loc_1050279  +
mov [ecx] ebx +
cmp dword_10659F0 ebx +
jnz loc_10500A8  +
call sub_104F820  +
cmp eax ebx +
jnz loc_105027C  +
lea eax [ebp+var_214] +
push eax  +
push esi  +
lea edi [ebp+var_218] +
call sub_104FCDF  +
test eax eax +
jnz loc_10500C6  +
push 6Eh  +
jmp loc_105027B  +
push offset aGlobalDfxlib_0  +
mov esi 104h +
push esi  +
lea eax [ebp+Name] +
push eax  +
call sub_1014BA1  +
test eax eax +
jl loc_10500BF  +
lea eax [ebp+hObject] +
push eax  +
push esi  +
lea eax [ebp+Name] +
push eax  +
call sub_1014C35  +
test eax eax +
jl loc_10500BF  +
lea eax [esi-1] +
sub eax [ebp+hObject] +
push eax  +
push [ebp+var_21C]  +
lea eax [ebp+Name] +
push esi  +
push eax  +
call sub_104F62B  +
test eax eax +
jl loc_10500BF  +
lea ecx [ebp+MutexAttributes] +
call sub_104F503  +
cmp eax ebx +
jnz loc_105027C  +
lea eax [ebp+Name] +
push eax  +
push ebx  +
lea eax [ebp+MutexAttributes] +
push eax  +
call ds:CreateMutexW  +
mov [ebp+hObject] eax +
cmp eax ebx +
jnz loc_105017E  +
call ds:GetLastError  +
lea esi [ebp+MutexAttributes] +
mov edi eax +
call sub_104F3D0  +
push [ebp+var_214]  +
call sub_10213A1  +
push [ebp+var_218]  +
call sub_10213A1  +
pop ecx  +
pop ecx  +
mov eax edi +
jmp loc_105027C  +
lea esi [ebp+MutexAttributes] +
call sub_104F3D0  +
push 3E8h  +
push [ebp+hObject]  +
call ds:WaitForSingleObject  +
mov edi [ebp+var_214] +
cmp eax ebx +
mov ebx [ebp+var_218] +
jz loc_10501C4  +
cmp eax 80h +
jz loc_10501C4  +
cmp eax 102h +
jnz loc_1050253  +
push 20h  +
pop esi  +
jmp loc_105025B  +
push ebx  +
push edi  +
call sub_104FE34  +
push 2  +
pop esi  +
cmp eax esi +
jnz loc_1050210  +
cmp [ebp+arg_4] 3 +
jz loc_1050243  +
push ebx  +
push edi  +
call sub_104FEE7  +
test eax eax +
jnz loc_105022B  +
xor esi esi +
mov [ebp+var_220] 1 +
push [ebp+hObject]  +
push ebx  +
push edi  +
push [ebp+var_21C]  +
call sub_104F2C4  +
test eax eax +
jz loc_1050230  +
mov ecx [ebp+var_224] +
mov [ecx] eax +
jmp loc_1050267  +
mov ecx 0B7h +
cmp eax ecx +
jnz loc_105022B  +
cmp [ebp+arg_4] esi +
jnz loc_1050227  +
push ebx  +
push edi  +
call sub_104FFBD  +
jmp loc_10501D8  +
mov esi ecx +
jmp loc_10501EF  +
push 6Eh  +
pop esi  +
jmp loc_1050243  +
cmp [ebp+var_220] 0 +
push 0Eh  +
pop esi  +
jz loc_1050243  +
push ebx  +
push edi  +
call sub_104FFBD  +
push [ebp+hObject]  +
call ds:ReleaseMutex  +
test eax eax +
jnz loc_105025B  +
call ds:GetLastError  +
mov esi eax +
push [ebp+hObject]  +
call ds:CloseHandle  +
push edi  +
call sub_10213A1  +
push ebx  +
call sub_10213A1  +
pop ecx  +
pop ecx  +
mov eax esi +
jmp loc_105027C  +
push 57h  +
pop eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1021557  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_10502A3  +
push 57h  +
pop eax  +
jmp loc_10502C1  +
cmp dword ptr [eax] 0A623D821h +
jnz loc_105029E  +
cmp dword_10659F0 0 +
jz loc_105029E  +
push dword ptr [eax+0Ch]  +
push dword ptr [eax+8]  +
call sub_104FFBD  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
push offset aNtdll_dll  +
mov esi ecx +
xor ebx ebx +
call ds:LoadLibraryW  +
mov [esi+0Ch] eax +
test eax eax +
jnz loc_10502FD  +
call ds:GetLastError  +
push offset aFailedToLoadNt  +
push 3  +
mov ebx eax +
call sub_103AC75  +
pop ecx  +
pop ecx  +
jmp loc_105036F  +
mov edi ds:GetProcAddress +
push offset aNtopendirector  +
push eax  +
call edi  +
mov [esi+18h] eax +
test eax eax +
jz loc_1050367  +
push offset aRtlinitunicode  +
push dword ptr [esi+0Ch]  +
call edi  +
mov [esi+10h] eax +
test eax eax +
jz loc_1050367  +
push offset aRtlcompareunic  +
push dword ptr [esi+0Ch]  +
call edi  +
mov [esi+14h] eax +
test eax eax +
jz loc_1050367  +
push offset aNtqueryobject  +
push dword ptr [esi+0Ch]  +
call edi  +
mov [esi+1Ch] eax +
test eax eax +
jz loc_1050367  +
push offset aNtquerydirecto  +
push dword ptr [esi+0Ch]  +
call edi  +
mov [esi+20h] eax +
test eax eax +
jz loc_1050367  +
push offset aNtclose  +
push dword ptr [esi+0Ch]  +
call edi  +
mov [esi+24h] eax +
test eax eax +
jnz loc_1050381  +
call ds:GetLastError  +
mov ebx eax +
test ebx ebx +
jz loc_1050381  +
push offset aFailedToGetPro  +
push 3  +
call sub_103AC75  +
pop ecx  +
pop ecx  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ecx] +
test eax eax +
jnz loc_10503A4  +
push 80004005h  +
call loc_1014415  +
mov edx [eax] +
mov [ecx] edx +
add eax 8 +
pop ebp  +
retn 4  +
***
call sub_1021EB9  +
mov esi ecx +
mov [ebp-10h] esi +
xor edi edi +
mov dword ptr [esi] offset off_10058A4 +
mov [esi+4] edi +
mov [ebp-4] edi +
mov dword ptr [esi] offset off_10137E0 +
call sub_10531B9  +
mov [esi+8] edi +
mov [esi+0Ch] edi +
mov [esi+10h] edi +
mov [esi+14h] edi +
mov [esi+18h] edi +
mov [esi+1Ch] edi +
mov [esi+20h] edi +
mov [esi+24h] edi +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax esi +
call sub_1021FA5  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
jmp loc_1050423  +
mov eax [esi] +
cmp eax edi +
jz loc_1050442  +
mov ecx [eax] +
mov [esi] ecx +
push eax  +
mov ecx esi +
call sub_1050B62  +
cmp [esi+8] edi +
ja loc_1050411  +
mov ecx [esi+0Ch] +
mov [esi] edi +
mov [esi+4] edi +
mov [esi+10h] edi +
cmp ecx edi +
jz loc_105043F  +
call sub_10147B2  +
mov [esi+0Ch] edi +
pop edi  +
pop esi  +
retn   +
***
push 80004005h  +
call loc_1014415  +
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
jmp loc_105046E  +
mov eax [esi] +
cmp eax edi +
jz loc_105048D  +
mov ecx [eax] +
mov [esi] ecx +
push eax  +
mov ecx esi +
call sub_105052A  +
cmp [esi+8] edi +
ja loc_105045C  +
mov ecx [esi+0Ch] +
mov [esi] edi +
mov [esi+4] edi +
mov [esi+10h] edi +
cmp ecx edi +
jz loc_105048A  +
call sub_10147B2  +
mov [esi+0Ch] edi +
pop edi  +
pop esi  +
retn   +
***
push 80004005h  +
call loc_1014415  +
call sub_1021EB9  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+8]  +
lea ecx [esi+8] +
call sub_101C334  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax esi +
call sub_1021FA5  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+10h] 0 +
jnz loc_1050523  +
push 10h  +
push dword ptr [esi+14h]  +
lea eax [esi+0Ch] +
push eax  +
call sub_1014B4F  +
test eax eax +
jnz loc_1050507  +
push 8007000Eh  +
call loc_1014415  +
mov ecx [esi+14h] +
mov edx ecx +
shl edx 4 +
lea eax [edx+eax-0Ch] +
jmp loc_1050520  +
mov edx [esi+10h] +
mov [eax] edx +
mov [esi+10h] eax +
sub eax 10h +
dec ecx  +
jns loc_1050515  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ecx+10h] +
mov eax [ebp+arg_0] +
mov [eax] edx +
dec dword ptr [ecx+8]  +
mov [ecx+10h] eax +
jnz loc_1050544  +
call loc_1050452  +
pop ebp  +
retn 4  +
***
call sub_1021EB9  +
mov [ebp-10h] ecx +
or dword ptr [ebp-4] 0FFFFFFFFh +
add ecx 8 +
call sub_103EAEC  +
call sub_1021FA5  +
retn   +
***
call sub_1021EB9  +
mov esi ecx +
xor ebx ebx +
mov [ebp-4] ebx +
call sub_103EB4C  +
push 20006h  +
mov ecx esi +
call sub_104B38E  +
test eax eax +
jnz loc_10505B3  +
xor esi esi +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
mov eax esi +
call sub_1021FA5  +
retn 8  +
mov ecx [ebp+0Ch] +
cmp [ecx+8] ebx +
jnz loc_10505CB  +
push dword ptr [ebp+8]  +
push dword ptr [esi+18h]  +
call ds:RegDeleteValueW  +
mov ebx eax +
jmp loc_10505FD  +
lea eax [ebp+0Ch] +
push eax  +
mov [ebp+0Ch] ebx +
call sub_1035D59  +
mov edi eax +
test edi edi +
jz loc_10505FD  +
mov eax [ebp+0Ch] +
add eax eax +
push eax  +
push edi  +
push 7  +
push 0  +
push dword ptr [ebp+8]  +
push dword ptr [esi+18h]  +
call ds:RegSetValueExW  +
push edi  +
mov ebx eax +
call sub_1021189  +
pop ecx  +
mov ecx esi +
call sub_103EB4C  +
xor eax eax +
test ebx ebx +
setz al  +
mov esi eax +
jmp loc_105059D  +
***
call sub_1021EB9  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [esi+4] 0 +
mov dword ptr [esi] offset off_10058A4 +
and dword ptr [ebp-4] 0 +
push 0Ah  +
lea ecx [esi+8] +
call sub_101C247  +
mov byte ptr [ebp-4] 1 +
mov dword ptr [esi] offset off_10137E4 +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax esi +
call sub_1021FA5  +
retn   +
***
call sub_1021EB9  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_10137E4 +
and dword ptr [ebp-4] 0 +
lea ecx [esi+8] +
call loc_1050407  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov dword ptr [esi] offset off_10058A4 +
call sub_1021FA5  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1050658  +
test byte ptr [ebp+8] 1 +
jz loc_10506AA  +
push esi  +
call sub_1021179  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1014FBC  +
test [ebp+arg_0] 1 +
jz loc_10506D0  +
push esi  +
call sub_1021179  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
xor eax eax +
push esi  +
mov esi ecx +
mov [ebx] eax +
cmp [esi+8] eax +
jnz loc_10506F5  +
xor al al +
jmp loc_1050724  +
mov ecx [ebp+arg_0] +
push edi  +
push eax  +
call sub_101F639  +
push eax  +
push dword ptr [esi+8]  +
call sub_105395F  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jz loc_105071B  +
push 4  +
push ebx  +
push edi  +
push dword ptr [esi+8]  +
call sub_10539E9  +
xor eax eax +
cmp edi 0FFFFFFFFh +
setnz al  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
call sub_1021EB9  +
mov dword ptr [ebp-4] 1 +
call sub_103AC57  +
test eax eax +
jz loc_105076A  +
mov eax [ebp+10h] +
push off_10646B4[eax*4]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset aTheStoppingOfD  +
push 1  +
call sub_103AC75  +
add esp 14h +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp+8] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+0Ch] +
call sub_1015174  +
call sub_1021FA5  +
retn 0Ch  +
***
call sub_1021EB9  +
mov esi ecx +
push 20h  +
call sub_10225EB  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_10507B8  +
call sub_1050614  +
or dword ptr [ebp-4] 0FFFFFFFFh +
push eax  +
mov ecx esi +
call sub_104B66E  +
mov eax esi +
call sub_1021FA5  +
retn   +
***
call sub_1021EB9  +
mov esi ecx +
call sub_101512A  +
mov edi [esi+10h] +
mov ebx [edi] +
mov [ebp-10h] edi +
mov [ebp-14h] edi +
and dword ptr [ebp-4] 0 +
test edi edi +
jz loc_1050801  +
push dword ptr [ebp+8]  +
mov ecx edi +
call sub_10504B1  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax [ebp+0Ch] +
mov [esi+10h] ebx +
mov [edi+4] eax +
mov eax [ebp+10h] +
mov [edi] eax +
inc dword ptr [esi+8]  +
mov eax edi +
call sub_1021FA5  +
retn 0Ch  +
***
call sub_1021EB9  +
mov esi ecx +
call sub_10504E0  +
mov eax [esi+10h] +
mov ecx [eax] +
mov [ebp-10h] eax +
mov [ebp-14h] eax +
and dword ptr [ebp-4] 0 +
test eax eax +
jz loc_1050859  +
mov edx [ebp+8] +
mov edi [edx] +
mov [eax+8] edi +
mov edx [edx+4] +
mov [eax+0Ch] edx +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [esi+10h] ecx +
mov ecx [ebp+0Ch] +
mov [eax+4] ecx +
mov ecx [ebp+10h] +
mov [eax] ecx +
inc dword ptr [esi+8]  +
call sub_1021FA5  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_105054D  +
test [ebp+arg_0] 1 +
jz loc_1050895  +
push esi  +
call sub_1021179  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1021EB9  +
mov edi ecx +
mov esi [ebp+8] +
mov eax [esi] +
mov [ebp-10h] eax +
test eax eax +
jz loc_1050907  +
lea eax [ebp-10h] +
push eax  +
mov ecx esi +
call sub_105038C  +
push eax  +
lea ecx [ebp+8] +
call sub_10151F2  +
and dword ptr [ebp-4] 0 +
push ecx  +
lea eax [ebp+8] +
mov ecx esp +
mov [ebp-14h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 1 +
mov byte ptr [ebp-4] 0 +
mov ecx edi +
call sub_10378C2  +
test eax eax +
jnz loc_1050911  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
cmp dword ptr [ebp-10h] 0 +
jnz loc_10508BB  +
xor eax eax +
call sub_1021FA5  +
retn 4  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
xor eax eax +
inc eax  +
jmp loc_1050909  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+14h] +
mov ecx [eax] +
mov [ebp+14h] ecx +
test ecx ecx +
jz loc_1050954  +
push 1  +
call sub_10506B6  +
and dword ptr [ebp+14h] 0 +
push 4  +
lea eax [ebp+14h] +
push eax  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1053A66  +
xor eax eax +
inc eax  +
pop ebp  +
retn 18h  +
***
call sub_1021EB9  +
mov esi ecx +
mov eax [ebp+8] +
or dword ptr [ebp-14h] 0FFFFFFFFh +
xor ebx ebx +
mov [ebp-20h] ebx +
mov [ebp-28h] ebx +
cmp [eax+8] ebx +
jz loc_1050AF4  +
mov edi 400h +
push edi  +
call sub_1054617  +
pop ecx  +
mov [ebp-10h] eax +
cmp eax ebx +
jz loc_1050ADA  +
cmp [esi+0Ch] ebx +
jnz loc_10509B1  +
mov ecx esi +
call sub_10502CA  +
test eax eax +
jnz loc_1050ADA  +
push edi  +
push ebx  +
push dword ptr [ebp-10h]  +
call sub_10219E0  +
add esp 0Ch +
push offset aDriver  +
lea eax [ebp-34h] +
push eax  +
call dword ptr [esi+10h]  +
lea eax [ebp-34h] +
mov [ebp-4Ch] eax +
lea eax [ebp-54h] +
push eax  +
push 1  +
lea eax [ebp-14h] +
push eax  +
mov dword ptr [ebp-54h] 18h +
mov [ebp-50h] ebx +
mov dword ptr [ebp-48h] 40h +
mov [ebp-44h] ebx +
mov [ebp-40h] ebx +
call dword ptr [esi+18h]  +
test eax eax +
jl loc_1050ADA  +
push ebx  +
push edi  +
push dword ptr [ebp-10h]  +
push 1  +
push dword ptr [ebp-14h]  +
call dword ptr [esi+1Ch]  +
test eax eax +
jl loc_1050ADA  +
jmp loc_1050ABE  +
cmp [ebp-20h] ebx +
jnz loc_1050ADA  +
cmp eax ebx +
jl loc_1050ADA  +
mov eax [ebp-10h] +
mov [ebp-18h] eax +
jmp loc_1050A85  +
mov eax [ebp+8] +
mov eax [eax] +
mov [ebp-24h] eax +
cmp eax ebx +
jz loc_1050A7E  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call sub_105038C  +
push eax  +
lea ecx [ebp-1Ch] +
call sub_10151F2  +
mov [ebp-4] ebx +
push dword ptr [ebp-1Ch]  +
lea eax [ebp-3Ch] +
push eax  +
call dword ptr [esi+10h]  +
push 1  +
push dword ptr [ebp-18h]  +
lea eax [ebp-3Ch] +
push eax  +
call dword ptr [esi+14h]  +
test eax eax +
jz loc_1050A8C  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call sub_1015174  +
cmp [ebp-24h] ebx +
jnz loc_1050A3B  +
add dword ptr [ebp-18h] 10h +
mov eax [ebp-18h] +
cmp [eax] bx +
jnz loc_1050A2F  +
jmp loc_1050AB1  +
push dword ptr [ebp-1Ch]  +
push offset aDriverWsDidNot  +
push 1  +
call sub_103AC75  +
add esp 0Ch +
mov dword ptr [ebp-20h] 1 +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call sub_1015174  +
push edi  +
push ebx  +
push dword ptr [ebp-10h]  +
call sub_10219E0  +
add esp 0Ch +
lea eax [ebp-2Ch] +
push eax  +
lea eax [ebp-28h] +
push eax  +
push ebx  +
push ebx  +
push edi  +
push dword ptr [ebp-10h]  +
push dword ptr [ebp-14h]  +
call dword ptr [esi+20h]  +
cmp eax ebx +
jge loc_1050A16  +
cmp dword ptr [ebp-14h] 0FFFFFFFFh +
jz loc_1050AE6  +
push dword ptr [ebp-14h]  +
call dword ptr [esi+24h]  +
cmp [ebp-10h] ebx +
jz loc_1050AF4  +
push dword ptr [ebp-10h]  +
call sub_1021189  +
pop ecx  +
mov eax [ebp-20h] +
call sub_1021FA5  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0  +
mov esi ecx +
push dword ptr [esi+4]  +
push [ebp+arg_0]  +
call sub_10507D1  +
mov ecx [esi+4] +
test ecx ecx +
jz loc_1050B24  +
mov [ecx] eax +
jmp loc_1050B26  +
mov [esi] eax +
mov [esi+4] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0  +
mov esi ecx +
push dword ptr [esi+4]  +
push [ebp+arg_0]  +
call sub_1050825  +
mov ecx [esi+4] +
test ecx ecx +
jz loc_1050B53  +
mov [ecx] eax +
jmp loc_1050B55  +
mov [esi] eax +
mov [esi+4] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
push 0  +
mov ecx edi +
call sub_105087B  +
mov eax [esi+10h] +
mov [edi] eax +
dec dword ptr [esi+8]  +
mov [esi+10h] edi +
jnz loc_1050B8B  +
mov ecx esi +
call loc_1050407  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1021F2C  +
mov ebx ds:CM_Enumerate_Classes +
xor esi esi +
push esi  +
lea eax [ebp-20h] +
push eax  +
push esi  +
mov [ebp-2Ch] ecx +
mov [ebp-28h] esi +
call ebx  +
cmp eax 25h +
jz loc_1050C29  +
jmp loc_1050BC1  +
xor esi esi +
inc dword ptr [ebp-28h]  +
cmp eax 32h +
jz loc_1050C29  +
cmp eax 33h +
jz loc_1050C29  +
cmp eax 1Dh +
jz loc_1050C29  +
mov [ebp-24h] esi +
mov [ebp-4] esi +
lea ecx [ebp-24h] +
call sub_103ED8F  +
mov ecx [ebp-24h] +
sub esp 10h +
mov edi esp +
lea esi [ebp-20h] +
movs   +
movs   +
movs   +
movs   +
call sub_104B34F  +
mov ecx [ebp-2Ch] +
lea eax [ebp-24h] +
push eax  +
add ecx 8 +
call sub_1050B04  +
or dword ptr [ebp-4] 0FFFFFFFFh +
xor esi esi +
cmp [ebp-24h] esi +
jz loc_1050C1A  +
mov ecx [ebp-24h] +
call sub_101A986  +
mov [ebp-24h] esi +
push esi  +
lea eax [ebp-20h] +
push eax  +
push dword ptr [ebp-28h]  +
call ebx  +
cmp eax 25h +
jnz loc_1050BBF  +
xor eax eax +
inc eax  +
call sub_1021FBE  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+8] +
test eax eax +
jz loc_1050C6A  +
and [ebp+var_4] 0 +
push 0  +
push offset loc_1050927  +
push 4  +
lea ecx [ebp+var_4] +
push ecx  +
push eax  +
call sub_1053AE3  +
push dword ptr [esi+8]  +
call sub_1053BB4  +
and dword ptr [esi+8] 0 +
pop esi  +
leave   +
retn   +
***
call sub_1021EB9  +
push 800h  +
push 40h  +
mov dword ptr [ebp-14h] 400h +
call ds:LocalAlloc  +
mov [ebp-10h] eax +
test eax eax +
jz loc_1050DB1  +
mov eax [ebp+8] +
mov eax [eax] +
mov [ebp-20h] eax +
test eax eax +
jz loc_1050D97  +
mov edi ds:CM_Get_Device_ID_ListW +
mov ebx 10000042h +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call sub_105038C  +
push eax  +
lea ecx [ebp-18h] +
call sub_10151F2  +
and dword ptr [ebp-4] 0 +
push ebx  +
push dword ptr [ebp-14h]  +
push dword ptr [ebp-10h]  +
jmp loc_1050D06  +
push 2  +
push dword ptr [ebp-18h]  +
lea eax [ebp-14h] +
push eax  +
call ds:CM_Get_Device_ID_List_SizeW  +
mov eax [ebp-14h] +
push 40h  +
add eax eax +
push eax  +
push dword ptr [ebp-10h]  +
call ds:LocalReAlloc  +
test eax eax +
jz loc_1050D12  +
push ebx  +
push dword ptr [ebp-14h]  +
mov [ebp-10h] eax +
push eax  +
push dword ptr [ebp-18h]  +
call edi  +
mov esi eax +
cmp esi 1Ah +
jz loc_1050CDA  +
test esi esi +
jnz loc_1050D81  +
mov esi [ebp-10h] +
mov eax esi +
cmp word ptr [eax] 0 +
jz loc_1050D81  +
push 0  +
push esi  +
lea eax [ebp-2Ch] +
push eax  +
call ds:CM_Locate_DevNodeW  +
test eax eax +
jnz loc_1050D70  +
push eax  +
push dword ptr [ebp-2Ch]  +
lea eax [ebp-24h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
call ds:CM_Get_DevNode_Status  +
test eax eax +
jnz loc_1050D60  +
test dword ptr [ebp-1Ch] 400h +
jnz loc_1050D60  +
test byte ptr [ebp-1Ch] 2 +
jz loc_1050D60  +
mov dword ptr [ebp-28h] 1 +
jmp loc_1050D64  +
and dword ptr [ebp-28h] 0 +
mov ecx [ebp+0Ch] +
lea eax [ebp-2Ch] +
push eax  +
call sub_1050B33  +
push esi  +
call ds:lstrlenW  +
lea esi [esi+eax*2+2] +
cmp word ptr [esi] 0 +
jnz loc_1050D21  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-18h] +
call sub_1015174  +
cmp dword ptr [ebp-20h] 0 +
jnz loc_1050CB8  +
cmp dword ptr [ebp-10h] 0 +
jz loc_1050DA6  +
push dword ptr [ebp-10h]  +
call ds:LocalFree  +
mov ecx [ebp+0Ch] +
xor eax eax +
cmp [ecx+8] eax +
setnz al  +
call sub_1021FA5  +
retn 8  +
***
call sub_1021EB9  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_10137E0 +
and dword ptr [ebp-4] 0 +
call sub_1050C37  +
call sub_1052F29  +
mov eax [esi+0Ch] +
test eax eax +
jz loc_1050DF5  +
push eax  +
call ds:FreeLibrary  +
and dword ptr [esi+0Ch] 0 +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov dword ptr [esi] offset off_10058A4 +
call sub_1021FA5  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
push 0C8h  +
mov ecx esi +
call sub_10158A3  +
mov ecx [esi] +
mov ecx [ecx-0Ch] +
push 0  +
push ecx  +
push eax  +
push [ebp+arg_0]  +
call ds:CM_Get_Device_IDW  +
push 0FFFFFFFFh  +
mov ecx esi +
mov edi eax +
call sub_1015023  +
xor eax eax +
test edi edi +
pop edi  +
setz al  +
pop esi  +
pop ebp  +
retn 8  +
***
call sub_1021EB9  +
mov edi ecx +
mov esi [ebp+8] +
mov eax [esi] +
xor ebx ebx +
mov [ebp-10h] eax +
test eax eax +
jz loc_1050EA7  +
lea eax [ebp-10h] +
push eax  +
mov ecx esi +
call sub_105038C  +
push eax  +
lea ecx [ebp+8] +
call sub_10151F2  +
and dword ptr [ebp-4] 0 +
lea eax [ebp+8] +
push eax  +
mov ecx edi +
call sub_103B662  +
test eax eax +
jz loc_1050E95  +
xor ebx ebx +
inc ebx  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
cmp dword ptr [ebp-10h] 0 +
jnz loc_1050E6B  +
mov eax ebx +
call sub_1021FA5  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1050DBE  +
test byte ptr [ebp+8] 1 +
jz loc_1050ED0  +
push esi  +
call sub_1021179  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1021EB9  +
mov edi ecx +
mov [ebp-18h] edi +
xor esi esi +
mov [ebp-4] esi +
push 20019h  +
call sub_104B38E  +
test eax eax +
jnz loc_1050F23  +
call ds:GetLastError  +
push eax  +
call ds:SetLastError  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
xor eax eax +
call sub_1021FA5  +
retn 8  +
lea eax [ebp-10h] +
push eax  +
push esi  +
push esi  +
push esi  +
push dword ptr [ebp+8]  +
mov [ebp-10h] esi +
push dword ptr [edi+18h]  +
mov edi ds:RegQueryValueExW +
call edi  +
cmp eax esi +
jz loc_1050F64  +
cmp eax 2 +
jz loc_1050F5F  +
push 65Bh  +
call ds:SetLastError  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
mov eax esi +
jmp loc_1050F1B  +
xor esi esi +
inc esi  +
jmp loc_1050F4F  +
mov eax [ebp-10h] +
add eax 4 +
push eax  +
mov [ebp-14h] eax +
call sub_1054617  +
mov ebx eax +
pop ecx  +
cmp ebx esi +
jz loc_1050F44  +
push dword ptr [ebp-14h]  +
push esi  +
push ebx  +
call sub_10219E0  +
add esp 0Ch +
lea eax [ebp-10h] +
push eax  +
mov eax [ebp-18h] +
push ebx  +
push esi  +
push esi  +
push dword ptr [ebp+8]  +
push dword ptr [eax+18h]  +
call edi  +
push ebx  +
test eax eax +
jz loc_1050FA6  +
call sub_1021189  +
pop ecx  +
jmp loc_1050F44  +
mov edi [ebp+0Ch] +
mov ecx edi +
call sub_103C474  +
push ebx  +
call sub_1021189  +
pop ecx  +
cmp [edi+8] esi +
jnz loc_1050F5F  +
jmp loc_1050F44  +
***
call sub_1021F2C  +
mov esi ecx +
mov [ebp-844h] esi +
call sub_1050C37  +
xor ebx ebx +
push ebx  +
push 4  +
call sub_1053B63  +
mov [esi+8] eax +
cmp eax ebx +
jnz loc_1050FF8  +
xor al al +
call sub_1021FBE  +
retn   +
mov [ebp-838h] ebx +
mov [ebp-4] ebx +
lea ecx [ebp-838h] +
call sub_10427B7  +
mov esi [ebp-838h] +
push 4  +
push ebx  +
push ebx  +
push ebx  +
mov ecx esi +
call sub_10455F2  +
test eax eax +
jnz loc_105103F  +
call ds:GetLastError  +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp esi ebx +
jz loc_1050FF0  +
mov ecx esi +
call sub_101A986  +
mov [ebp-838h] ebx +
jmp loc_1050FF0  +
lea ecx [ebp-82Ch] +
push ecx  +
mov dword ptr [ebp-82Ch] 1Ch +
mov eax [esi+8] +
push ebx  +
push eax  +
mov [ebp-848h] ebx +
call ds:SetupDiEnumDeviceInfo  +
test eax eax +
jz loc_1051258  +
mov edi 800h +
inc dword ptr [ebp-848h]  +
lea ecx [ebp-834h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-834h] +
call sub_1014FC6  +
mov [ebp-840h] ebx +
push edi  +
lea eax [ebp-810h] +
push ebx  +
push eax  +
call sub_10219E0  +
add esp 0Ch +
lea ecx [ebp-854h] +
push ecx  +
push edi  +
lea ecx [ebp-810h] +
push ecx  +
xor ecx ecx +
cmp [ebp-840h] ebx +
push ebx  +
setnz cl  +
mov [ebp-854h] edi +
mov eax [esi+8] +
inc ecx  +
push ecx  +
lea ecx [ebp-82Ch] +
push ecx  +
push eax  +
call ds:SetupDiGetDeviceRegistryPropertyW  +
test eax eax +
jz loc_1051218  +
cmp [ebp-840h] ebx +
jz loc_10510F4  +
mov eax [ebp-834h] +
cmp [eax-0Ch] ebx +
jnz loc_1051106  +
lea eax [ebp-810h] +
push eax  +
lea ecx [ebp-834h] +
call sub_10158CD  +
lea esi [ebp-810h] +
cmp [ebp-810h] bx +
jz loc_1051212  +
mov eax [ebp-844h] +
push ebx  +
push esi  +
push dword ptr [eax+8]  +
call sub_1053ECD  +
mov [ebp-850h] eax +
cmp eax 0FFFFFFFFh +
jz loc_1051261  +
mov ecx [ebp-834h] +
cmp [ecx-0Ch] ebx +
jz loc_10511FE  +
push 4  +
lea ecx [ebp-83Ch] +
push ecx  +
push eax  +
mov eax [ebp-844h] +
push dword ptr [eax+8]  +
mov [ebp-83Ch] ebx +
call sub_10539E9  +
test eax eax +
jz loc_1051171  +
cmp [ebp-83Ch] ebx +
jnz loc_10511A4  +
push 18h  +
call sub_10225EB  +
pop ecx  +
mov ecx eax +
mov [ebp-84Ch] ecx +
mov byte ptr [ebp-4] 2 +
cmp ecx ebx +
jz loc_1051190  +
call sub_1014C71  +
jmp loc_1051192  +
xor eax eax +
mov byte ptr [ebp-4] 1 +
mov [ebp-83Ch] eax +
cmp eax ebx +
jz loc_105127E  +
push ecx  +
lea eax [ebp-834h] +
mov ecx esp +
mov [ebp-84Ch] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 3 +
mov byte ptr [ebp-4] 1 +
mov ecx [ebp-83Ch] +
call sub_10378C2  +
cmp eax ebx +
jnz loc_10511E1  +
push dword ptr [ebp-834h]  +
mov ecx [ebp-83Ch] +
call sub_10172FC  +
push 4  +
lea eax [ebp-83Ch] +
push eax  +
push dword ptr [ebp-850h]  +
mov eax [ebp-844h] +
push dword ptr [eax+8]  +
call sub_1053A66  +
push esi  +
call ds:lstrlenW  +
lea esi [esi+eax*2+2] +
cmp [esi] bx +
jnz loc_1051119  +
mov esi [ebp-838h] +
inc dword ptr [ebp-840h]  +
cmp dword ptr [ebp-840h] 2 +
jb loc_1051094  +
mov [ebp-4] bl +
lea ecx [ebp-834h] +
call sub_1015174  +
mov eax [esi+8] +
lea ecx [ebp-82Ch] +
push ecx  +
push dword ptr [ebp-848h]  +
push eax  +
call ds:SetupDiEnumDeviceInfo  +
test eax eax +
jnz loc_105106E  +
mov byte ptr [ebp-82Dh] 1 +
jmp loc_1051298  +
mov [ebp-4] bl +
lea ecx [ebp-834h] +
call sub_1015174  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx [ebp-838h] +
jmp loc_1051032  +
mov [ebp-4] bl +
lea ecx [ebp-834h] +
call sub_1015174  +
mov esi [ebp-838h] +
mov [ebp-82Dh] bl +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_101A986  +
mov al [ebp-82Dh] +
mov [ebp-838h] ebx +
jmp loc_1050FF2  +
***
call sub_1021F2C  +
mov eax [ebp+10h] +
mov esi [ebp+8] +
mov [ebp-244h] ecx +
xor ebx ebx +
push 0Ah  +
lea ecx [ebp-288h] +
mov [ebp-248h] esi +
mov [ebp-24Ch] eax +
mov [eax] ebx +
call sub_101C247  +
mov [ebp-4] ebx +
lea ecx [ebp-2B8h] +
call sub_1014C71  +
mov byte ptr [ebp-4] 1 +
push dword ptr [esi]  +
lea ecx [ebp-2B8h] +
call sub_10172FC  +
mov ecx [ebp-244h] +
lea eax [ebp-288h] +
push eax  +
lea eax [ebp-2B8h] +
push eax  +
call sub_1050C72  +
cmp [ebp+0Ch] ebx +
jz loc_1051589  +
mov [ebp-238h] ebx +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-238h] +
call sub_10427B7  +
mov esi [ebp-238h] +
push 4  +
push ebx  +
push ebx  +
push ebx  +
mov ecx esi +
call sub_10455F2  +
test eax eax +
jnz loc_105137B  +
mov byte ptr [ebp-4] 1 +
cmp esi ebx +
jz loc_10517A5  +
mov ecx esi +
call sub_101A986  +
mov [ebp-238h] ebx +
jmp loc_10517A5  +
lea ecx [ebp-234h] +
push ecx  +
mov dword ptr [ebp-234h] 1Ch +
mov [ebp-240h] ebx +
push ebx  +
jmp loc_1051555  +
inc dword ptr [ebp-240h]  +
mov [ebp-23Ch] ebx +
lea ecx [ebp-2A0h] +
mov [ebp-258h] ebx +
call sub_1014C71  +
mov byte ptr [ebp-4] 3 +
mov eax [esi+8] +
xor ecx ecx +
cmp [ebp-23Ch] ebx +
setnz cl  +
add ecx 11h +
mov edi ecx +
lea ecx [ebp-260h] +
push ecx  +
push ebx  +
push ebx  +
push ebx  +
push edi  +
lea ecx [ebp-234h] +
push ecx  +
push eax  +
call ds:SetupDiGetDeviceRegistryPropertyW  +
test eax eax +
jnz loc_105165D  +
call ds:GetLastError  +
cmp eax 0Dh +
jz loc_1051515  +
cmp eax 7Ah +
jnz loc_105165D  +
push dword ptr [ebp-260h]  +
call sub_1054617  +
pop ecx  +
mov [ebp-250h] eax +
cmp eax ebx +
jnz loc_1051426  +
mov [ebp-254h] ebx +
jmp loc_10514ED  +
mov eax [esi+8] +
push ebx  +
push dword ptr [ebp-260h]  +
lea ecx [ebp-234h] +
push dword ptr [ebp-250h]  +
push ebx  +
push edi  +
push ecx  +
push eax  +
call ds:SetupDiGetDeviceRegistryPropertyW  +
test eax eax +
jz loc_105141B  +
push dword ptr [ebp-250h]  +
lea ecx [ebp-2A0h] +
call sub_103C474  +
push ecx  +
mov ecx esp +
mov [ebp-270h] esp +
push dword ptr [ebp-248h]  +
call sub_10151F2  +
mov byte ptr [ebp-4] 4 +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-2A0h] +
call sub_10378C2  +
cmp eax ebx +
jz loc_10514ED  +
mov eax [ebp-220h] +
push ebx  +
push eax  +
mov [ebp-26Ch] eax +
lea eax [ebp-25Ch] +
push eax  +
lea eax [ebp-264h] +
push eax  +
call ds:CM_Get_DevNode_Status  +
test eax eax +
jnz loc_10514CB  +
test dword ptr [ebp-264h] 400h +
jnz loc_10514CB  +
test byte ptr [ebp-264h] 2 +
mov dword ptr [ebp-268h] 1 +
jnz loc_10514D1  +
mov [ebp-268h] ebx +
lea eax [ebp-26Ch] +
push eax  +
lea ecx [ebp-288h] +
call sub_1050B33  +
mov dword ptr [ebp-258h] 1 +
cmp [ebp-250h] ebx +
jz loc_1051501  +
push dword ptr [ebp-250h]  +
call sub_1021189  +
pop ecx  +
cmp [ebp-258h] ebx +
jnz loc_1051539  +
cmp [ebp-254h] ebx +
jz loc_105165D  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-2A0h] +
call sub_1014FBC  +
inc dword ptr [ebp-23Ch]  +
cmp dword ptr [ebp-23Ch] 2 +
jb loc_10513A4  +
jmp loc_1051548  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-2A0h] +
call sub_1014FBC  +
lea ecx [ebp-234h] +
push ecx  +
push dword ptr [ebp-240h]  +
mov eax [esi+8] +
push eax  +
call ds:SetupDiEnumDeviceInfo  +
test eax eax +
jnz loc_1051398  +
call ds:GetLastError  +
cmp eax 103h +
jnz loc_105166C  +
mov byte ptr [ebp-4] 1 +
mov ecx esi +
call sub_101A986  +
mov [ebp-238h] ebx +
mov eax [ebp-288h] +
mov [ebp-238h] eax +
cmp eax ebx +
jz loc_10516B2  +
lea eax [ebp-238h] +
push eax  +
lea ecx [ebp-288h] +
call sub_105038C  +
mov esi [eax] +
mov eax [eax+4] +
push 1  +
mov [ebp-268h] eax +
push 104h  +
lea eax [ebp-218h] +
push eax  +
lea eax [ebp-248h] +
push eax  +
push esi  +
call ds:CM_Query_And_Remove_SubTreeW  +
mov edi eax +
cmp edi ebx +
jz loc_10516A6  +
cmp edi 5 +
jz loc_10516A6  +
lea ecx [ebp-23Ch] +
call sub_10151DA  +
mov byte ptr [ebp-4] 5 +
mov ecx [ebp-244h] +
lea eax [ebp-23Ch] +
push eax  +
push esi  +
call sub_1050E0A  +
test eax eax +
jz loc_105168B  +
cmp edi 17h +
jnz loc_1051675  +
push dword ptr [ebp-248h]  +
lea eax [ebp-218h] +
push ecx  +
mov ecx esp +
mov [ebp-25Ch] esp +
push eax  +
call sub_10161A7  +
mov byte ptr [ebp-4] 6 +
push ecx  +
lea eax [ebp-23Ch] +
mov ecx esp +
mov [ebp-270h] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 7 +
mov byte ptr [ebp-4] 5 +
mov ecx [ebp-244h] +
call sub_105072F  +
jmp loc_105168B  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-2A0h] +
call sub_1014FBC  +
mov byte ptr [ebp-4] 1 +
jmp loc_1051369  +
push edi  +
push dword ptr [ebp-23Ch]  +
push offset aDeviceWsFailed  +
push 1  +
call sub_103AC75  +
add esp 10h +
mov eax [ebp-24Ch] +
mov dword ptr [eax] 1 +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-23Ch] +
call sub_1015174  +
cmp [ebp-238h] ebx +
jnz loc_105159D  +
mov ecx [ebp-244h] +
lea eax [ebp-2B8h] +
push eax  +
call sub_1050960  +
test eax eax +
jz loc_10516D4  +
mov eax [ebp-24Ch] +
mov dword ptr [eax] 1 +
mov eax [ebp-288h] +
mov [ebp-238h] eax +
cmp eax ebx +
jz loc_105179D  +
lea eax [ebp-238h] +
push eax  +
lea ecx [ebp-288h] +
call sub_105038C  +
mov esi [eax] +
mov edi [eax+4] +
push ebx  +
push esi  +
call ds:CM_Setup_DevNode  +
cmp edi ebx +
jz loc_1051791  +
push ebx  +
push esi  +
lea eax [ebp-25Ch] +
push eax  +
lea eax [ebp-248h] +
push eax  +
call ds:CM_Get_DevNode_Status  +
test eax eax +
jnz loc_1051732  +
test byte ptr [ebp-248h] 8 +
jnz loc_1051791  +
call sub_103AC57  +
test eax eax +
jz loc_1051785  +
lea ecx [ebp-240h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 8 +
mov ecx [ebp-244h] +
lea eax [ebp-240h] +
push eax  +
push esi  +
call sub_1050E0A  +
test eax eax +
jz loc_1051776  +
push dword ptr [ebp-240h]  +
push offset aDeviceWsFail_0  +
push 1  +
call sub_103AC75  +
add esp 0Ch +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-240h] +
call sub_1015174  +
mov eax [ebp-24Ch] +
mov dword ptr [eax] 1 +
cmp [ebp-238h] ebx +
jnz loc_10516E8  +
cmp [ebp-254h] ebx +
jnz loc_10517B1  +
mov eax [ebp-24Ch] +
mov dword ptr [eax] 1 +
mov [ebp-4] bl +
lea ecx [ebp-2B8h] +
call sub_1014FBC  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-288h] +
call loc_1050452  +
xor eax eax +
inc eax  +
call sub_1021FBE  +
retn 0Ch  +
***
call sub_1021F2C  +
mov eax [ebp+8] +
xor ebx ebx +
mov [ebp-4Ch] eax +
mov [ebp-40h] ebx +
mov [ebp-4] ebx +
lea ecx [ebp-40h] +
call sub_10427B7  +
mov esi [ebp-40h] +
push 4  +
push ebx  +
push ebx  +
push ebx  +
mov ecx esi +
call sub_10455F2  +
test eax eax +
jnz loc_105182C  +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp esi ebx +
jz loc_1051825  +
mov ecx esi +
call sub_101A986  +
mov [ebp-40h] ebx +
xor eax eax +
jmp loc_10519A0  +
lea ecx [ebp-2Ch] +
push ecx  +
mov dword ptr [ebp-2Ch] 1Ch +
mov [ebp-48h] ebx +
mov dword ptr [ebp-30h] 1 +
push ebx  +
jmp loc_105197D  +
inc dword ptr [ebp-48h]  +
mov [ebp-3Ch] ebx +
lea ecx [ebp-64h] +
call sub_1014C71  +
mov byte ptr [ebp-4] 1 +
mov eax [esi+8] +
xor ecx ecx +
cmp [ebp-3Ch] ebx +
setnz cl  +
add ecx 11h +
mov edi ecx +
lea ecx [ebp-34h] +
push ecx  +
push ebx  +
push ebx  +
push ebx  +
push edi  +
lea ecx [ebp-2Ch] +
push ecx  +
push eax  +
call ds:SetupDiGetDeviceRegistryPropertyW  +
test eax eax +
jz loc_1051888  +
mov [ebp-30h] ebx +
jmp loc_1051950  +
call ds:GetLastError  +
cmp eax 0Dh +
jz loc_105195E  +
cmp eax 7Ah +
jnz loc_1051880  +
push dword ptr [ebp-34h]  +
call sub_1054617  +
pop ecx  +
mov [ebp-44h] eax +
cmp eax ebx +
jz loc_105193F  +
mov eax [esi+8] +
push ebx  +
push dword ptr [ebp-34h]  +
lea ecx [ebp-2Ch] +
push dword ptr [ebp-44h]  +
push ebx  +
push edi  +
push ecx  +
push eax  +
call ds:SetupDiGetDeviceRegistryPropertyW  +
test eax eax +
jz loc_105193F  +
push dword ptr [ebp-44h]  +
lea ecx [ebp-64h] +
call sub_103C474  +
push ecx  +
mov ecx esp +
mov [ebp-38h] esp +
push dword ptr [ebp-4Ch]  +
call sub_10151F2  +
mov byte ptr [ebp-4] 2 +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-64h] +
call sub_10378C2  +
cmp eax ebx +
jz loc_1051903  +
push dword ptr [ebp-4Ch]  +
lea ecx [ebp-64h] +
call sub_103B662  +
mov [ebp-38h] ebx +
cmp [ebp-5Ch] ebx +
jz loc_1051920  +
lea eax [ebp-34h] +
push eax  +
lea ecx [ebp-64h] +
call sub_1035D59  +
mov [ebp-38h] eax +
cmp eax ebx +
jnz loc_1051923  +
jmp loc_105193F  +
mov [ebp-34h] ebx +
mov ecx [ebp-34h] +
mov eax [esi+8] +
add ecx ecx +
push ecx  +
push dword ptr [ebp-38h]  +
lea ecx [ebp-2Ch] +
push edi  +
push ecx  +
push eax  +
call ds:SetupDiSetDeviceRegistryPropertyW  +
test eax eax +
jnz loc_1051942  +
mov [ebp-30h] ebx +
cmp [ebp-44h] ebx +
jz loc_1051950  +
push dword ptr [ebp-44h]  +
call sub_1021189  +
pop ecx  +
cmp [ebp-38h] ebx +
jz loc_105195E  +
push dword ptr [ebp-38h]  +
call sub_1021189  +
pop ecx  +
mov [ebp-4] bl +
lea ecx [ebp-64h] +
call sub_1014FBC  +
inc dword ptr [ebp-3Ch]  +
cmp dword ptr [ebp-3Ch] 2 +
jb loc_105184D  +
lea ecx [ebp-2Ch] +
push ecx  +
push dword ptr [ebp-48h]  +
mov eax [esi+8] +
push eax  +
call ds:SetupDiEnumDeviceInfo  +
test eax eax +
jnz loc_1051847  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_101A986  +
mov eax [ebp-30h] +
mov [ebp-40h] ebx +
call sub_1021FBE  +
retn 4  +
***
call sub_1021EB9  +
mov [ebp-20h] ecx +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-3Ch] +
call sub_1014C71  +
mov byte ptr [ebp-4] 1 +
mov ecx [ebp-20h] +
lea eax [ebp-3Ch] +
push eax  +
call sub_104BC50  +
test eax eax +
jnz loc_10519FE  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-3Ch] +
call sub_1014FBC  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
xor eax eax +
call sub_1021FA5  +
retn 4  +
mov eax [ebp-3Ch] +
mov [ebp-1Ch] eax +
test eax eax +
jz loc_1051B1B  +
mov eax [ebp-1Ch] +
mov [ebp-24h] eax +
lea eax [ebp-1Ch] +
push eax  +
lea ecx [ebp-3Ch] +
call sub_105038C  +
push eax  +
lea ecx [ebp-10h] +
call sub_10151F2  +
mov byte ptr [ebp-4] 2 +
xor ebx ebx +
lea ecx [ebp-14h] +
mov [ebp-18h] ebx +
call sub_10151DA  +
mov byte ptr [ebp-4] 3 +
mov eax [ebp-10h] +
mov eax [eax-0Ch] +
xor ecx ecx +
push 2  +
xor esi esi +
inc eax  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_1054617  +
mov edi eax +
pop ecx  +
cmp edi ebx +
jz loc_1051B4C  +
mov eax [ebp-10h] +
cmp [eax-0Ch] esi +
jle loc_1051AB6  +
push ebx  +
lea ecx [ebp-10h] +
call loc_103EC7B  +
cmp ax 20h +
jnz loc_1051A83  +
cmp dword ptr [ebp-18h] 0 +
jnz loc_1051AC2  +
jmp loc_1051AAD  +
push ebx  +
lea ecx [ebp-10h] +
call loc_103EC7B  +
cmp ax 2Ch +
jz loc_1051ABA  +
cmp dword ptr [ebp-18h] 0 +
jnz loc_1051A9F  +
mov dword ptr [ebp-18h] 1 +
push ebx  +
lea ecx [ebp-10h] +
call loc_103EC7B  +
mov [edi+esi*2] ax +
inc esi  +
mov eax [ebp-10h] +
inc ebx  +
cmp ebx [eax-0Ch] +
jl loc_1051A6C  +
xor esi esi +
jmp loc_1051AEE  +
test esi esi +
jz loc_1051B4C  +
xor eax eax +
push edi  +
lea ecx [ebp-14h] +
mov [edi+esi*2] ax +
call sub_10158CD  +
push dword ptr [ebp-14h]  +
lea ecx [ebp+8] +
call sub_101492B  +
test eax eax +
jnz loc_1051AEB  +
push dword ptr [ebp-24h]  +
lea ecx [ebp-3Ch] +
call sub_103B615  +
xor esi esi +
inc esi  +
push edi  +
call sub_1021189  +
pop ecx  +
test esi esi +
jz loc_1051B4C  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-14h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-10h] +
call sub_1015174  +
cmp dword ptr [ebp-1Ch] 0 +
jnz loc_1051A0C  +
mov ecx [ebp-20h] +
lea eax [ebp-3Ch] +
push eax  +
call sub_104B54A  +
xor esi esi +
test eax eax +
jnz loc_1051B69  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-3Ch] +
call sub_1014FBC  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call sub_1015174  +
mov eax esi +
jmp loc_10519F6  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-14h] +
call sub_1015174  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-10h] +
call sub_1015174  +
jmp loc_10519DC  +
inc esi  +
jmp loc_1051B2D  +
***
call sub_1021EB9  +
mov esi ecx +
lea ecx [ebp-28h] +
call sub_1014C71  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
push ecx  +
mov ecx esp +
mov [ebp-10h] esp +
push offset aUpperfilters  +
call sub_10161A7  +
mov byte ptr [ebp-4] 1 +
mov byte ptr [ebp-4] 0 +
mov ecx esi +
call sub_1050EDC  +
push dword ptr [ebp+8]  +
lea ecx [ebp-28h] +
call sub_10508A1  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-28h] +
call sub_1014FBC  +
mov eax esi +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EB9  +
mov esi ecx +
lea ecx [ebp-28h] +
call sub_1014C71  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
push ecx  +
mov ecx esp +
mov [ebp-10h] esp +
push offset aLowerfilters  +
call sub_10161A7  +
mov byte ptr [ebp-4] 1 +
mov byte ptr [ebp-4] 0 +
mov ecx esi +
call sub_1050EDC  +
push dword ptr [ebp+8]  +
lea ecx [ebp-28h] +
call sub_10508A1  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-28h] +
call sub_1014FBC  +
mov eax esi +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EB9  +
mov edi ecx +
lea ecx [ebp-28h] +
call sub_1014C71  +
xor ebx ebx +
mov [ebp-4] ebx +
lea eax [ebp-28h] +
push eax  +
push ecx  +
mov ecx esp +
mov [ebp-10h] esp +
mov esi offset aUpperfilters +
push esi  +
call sub_10161A7  +
mov byte ptr [ebp-4] 1 +
mov [ebp-4] bl +
mov ecx edi +
call sub_1050EDC  +
push dword ptr [ebp+8]  +
lea ecx [ebp-28h] +
call sub_1050E4F  +
test eax eax +
jz loc_1051CA8  +
lea eax [ebp-28h] +
push eax  +
push ecx  +
mov ecx esp +
mov [ebp+8] esp +
push esi  +
call sub_10161A7  +
mov byte ptr [ebp-4] 2 +
mov [ebp-4] bl +
mov ecx edi +
call sub_1050573  +
mov ebx eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-28h] +
call sub_1014FBC  +
mov eax ebx +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EB9  +
mov edi ecx +
lea ecx [ebp-28h] +
call sub_1014C71  +
xor ebx ebx +
mov [ebp-4] ebx +
lea eax [ebp-28h] +
push eax  +
push ecx  +
mov ecx esp +
mov [ebp-10h] esp +
mov esi offset aLowerfilters +
push esi  +
call sub_10161A7  +
mov byte ptr [ebp-4] 1 +
mov [ebp-4] bl +
mov ecx edi +
call sub_1050EDC  +
push dword ptr [ebp+8]  +
lea ecx [ebp-28h] +
call sub_1050E4F  +
test eax eax +
jz loc_1051D30  +
lea eax [ebp-28h] +
push eax  +
push ecx  +
mov ecx esp +
mov [ebp+8] esp +
push esi  +
call sub_10161A7  +
mov byte ptr [ebp-4] 2 +
mov [ebp-4] bl +
mov ecx edi +
call sub_1050573  +
mov ebx eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-28h] +
call sub_1014FBC  +
mov eax ebx +
call sub_1021FA5  +
retn 4  +
***
call sub_1021F2C  +
mov eax [ebp+10h] +
mov esi [ebp+8] +
mov [ebp-248h] ecx +
xor ebx ebx +
push 0Ah  +
lea ecx [ebp-278h] +
mov [ebp-240h] esi +
mov [ebp-250h] eax +
mov [eax] ebx +
call sub_101C247  +
mov [ebp-4] ebx +
mov ecx [ebp-248h] +
lea eax [ebp-278h] +
push eax  +
push esi  +
call sub_1050C72  +
cmp [ebp+0Ch] ebx +
jz loc_1051F31  +
mov [ebp-238h] ebx +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-238h] +
call sub_105078F  +
mov esi [ebp-238h] +
mov ecx esi +
call sub_1050B96  +
lea eax [esi+8] +
mov eax [eax] +
mov [ebp-244h] eax +
cmp eax ebx +
jz loc_1051F1D  +
mov ecx [ebp-238h] +
lea eax [ebp-244h] +
push eax  +
add ecx 8 +
call sub_105038C  +
push eax  +
lea ecx [ebp-254h] +
call sub_101C334  +
mov byte ptr [ebp-4] 2 +
mov esi [ebp-254h] +
push dword ptr [ebp-240h]  +
mov ecx esi +
call sub_1051B71  +
test eax eax +
jnz loc_1051E28  +
push dword ptr [ebp-240h]  +
mov ecx esi +
call sub_1051BD6  +
test eax eax +
jz loc_1051EF8  +
mov [ebp-23Ch] ebx +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-23Ch] +
call sub_10427B7  +
push ebx  +
push ebx  +
push ebx  +
add esi 8 +
push esi  +
mov esi [ebp-23Ch] +
mov ecx esi +
call sub_10455F2  +
test eax eax +
jz loc_1051EE3  +
lea ecx [ebp-234h] +
push ecx  +
mov dword ptr [ebp-234h] 1Ch +
xor edi edi +
push ebx  +
jmp loc_1051ED5  +
mov eax [ebp-220h] +
push ebx  +
push eax  +
mov [ebp-260h] eax +
lea eax [ebp-258h] +
push eax  +
lea eax [ebp-24Ch] +
push eax  +
inc edi  +
call ds:CM_Get_DevNode_Status  +
test eax eax +
jnz loc_1051EB5  +
test dword ptr [ebp-24Ch] 400h +
jnz loc_1051EB5  +
test byte ptr [ebp-24Ch] 2 +
mov dword ptr [ebp-25Ch] 1 +
jnz loc_1051EBB  +
mov [ebp-25Ch] ebx +
lea eax [ebp-260h] +
push eax  +
lea ecx [ebp-278h] +
call sub_1050B33  +
lea ecx [ebp-234h] +
push ecx  +
push edi  +
mov eax [esi+8] +
push eax  +
call ds:SetupDiEnumDeviceInfo  +
test eax eax +
jnz loc_1051E6F  +
mov byte ptr [ebp-4] 2 +
cmp esi ebx +
jz loc_1051EF8  +
mov ecx esi +
call sub_101A986  +
mov [ebp-23Ch] ebx +
mov byte ptr [ebp-4] 1 +
mov ecx [ebp-254h] +
cmp ecx ebx +
jz loc_1051F11  +
call sub_101A986  +
mov [ebp-254h] ebx +
cmp [ebp-244h] ebx +
jnz loc_1051DD7  +
mov [ebp-4] bl +
mov ecx [ebp-238h] +
call sub_101A986  +
mov [ebp-238h] ebx +
mov eax [ebp-278h] +
mov [ebp-238h] eax +
cmp eax ebx +
jz loc_1052041  +
lea eax [ebp-238h] +
push eax  +
lea ecx [ebp-278h] +
call sub_105038C  +
mov esi [eax] +
mov eax [eax+4] +
push 1  +
mov [ebp-25Ch] eax +
push 104h  +
lea eax [ebp-218h] +
push eax  +
lea eax [ebp-244h] +
push eax  +
push esi  +
call ds:CM_Query_And_Remove_SubTreeW  +
mov edi eax +
cmp edi ebx +
jz loc_1052035  +
cmp edi 5 +
jz loc_1052035  +
lea ecx [ebp-23Ch] +
call sub_10151DA  +
mov byte ptr [ebp-4] 4 +
mov ecx [ebp-248h] +
lea eax [ebp-23Ch] +
push eax  +
push esi  +
call sub_1050E0A  +
test eax eax +
jz loc_105201B  +
cmp edi 17h +
jnz loc_1052005  +
push dword ptr [ebp-244h]  +
lea eax [ebp-218h] +
push ecx  +
mov ecx esp +
mov [ebp-258h] esp +
push eax  +
call sub_10161A7  +
mov byte ptr [ebp-4] 5 +
push ecx  +
lea eax [ebp-23Ch] +
mov ecx esp +
mov [ebp-24Ch] esp +
push eax  +
call sub_10151F2  +
mov byte ptr [ebp-4] 6 +
mov byte ptr [ebp-4] 4 +
mov ecx [ebp-248h] +
call sub_105072F  +
jmp loc_105201B  +
push edi  +
push dword ptr [ebp-23Ch]  +
push offset aDeviceWsFailed  +
push 1  +
call sub_103AC75  +
add esp 10h +
mov eax [ebp-250h] +
mov dword ptr [eax] 1 +
mov [ebp-4] bl +
lea ecx [ebp-23Ch] +
call sub_1015174  +
cmp [ebp-238h] ebx +
jnz loc_1051F45  +
push dword ptr [ebp-240h]  +
mov ecx [ebp-248h] +
call sub_1050960  +
test eax eax +
jz loc_1052062  +
mov eax [ebp-250h] +
mov dword ptr [eax] 1 +
mov eax [ebp-278h] +
mov [ebp-238h] eax +
cmp eax ebx +
jz loc_105212A  +
lea eax [ebp-238h] +
push eax  +
lea ecx [ebp-278h] +
call sub_105038C  +
mov esi [eax] +
mov edi [eax+4] +
push ebx  +
push esi  +
call ds:CM_Setup_DevNode  +
cmp edi ebx +
jz loc_105211E  +
push ebx  +
push esi  +
lea eax [ebp-258h] +
push eax  +
lea eax [ebp-244h] +
push eax  +
call ds:CM_Get_DevNode_Status  +
test eax eax +
jnz loc_10520C0  +
test byte ptr [ebp-244h] 8 +
jnz loc_105211E  +
call sub_103AC57  +
test eax eax +
jz loc_1052112  +
lea ecx [ebp-240h] +
call sub_10151DA  +
mov byte ptr [ebp-4] 7 +
mov ecx [ebp-248h] +
lea eax [ebp-240h] +
push eax  +
push esi  +
call sub_1050E0A  +
test eax eax +
jz loc_1052104  +
push dword ptr [ebp-240h]  +
push offset aDeviceWsFail_0  +
push 1  +
call sub_103AC75  +
add esp 0Ch +
mov [ebp-4] bl +
lea ecx [ebp-240h] +
call sub_1015174  +
mov eax [ebp-250h] +
mov dword ptr [eax] 1 +
cmp [ebp-238h] ebx +
jnz loc_1052076  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-278h] +
call loc_1050452  +
xor eax eax +
inc eax  +
call sub_1021FBE  +
retn 0Ch  +
***
call sub_1021EB9  +
xor ebx ebx +
mov [ebp-10h] ebx +
mov [ebp-4] ebx +
lea ecx [ebp-10h] +
call sub_105078F  +
mov esi [ebp-10h] +
mov ecx esi +
call sub_1050B96  +
add esi 8 +
mov eax [esi] +
mov [ebp-18h] eax +
cmp eax ebx +
jz loc_10521C0  +
lea eax [ebp-18h] +
push eax  +
mov ecx esi +
call sub_105038C  +
push eax  +
lea ecx [ebp-14h] +
call sub_101C334  +
mov byte ptr [ebp-4] 1 +
mov edi [ebp-14h] +
push dword ptr [ebp+8]  +
mov ecx edi +
call sub_1051C3B  +
push dword ptr [ebp+8]  +
mov ecx edi +
call sub_1051CC3  +
mov [ebp-4] bl +
cmp edi ebx +
jz loc_10521BB  +
mov ecx edi +
call sub_101A986  +
mov [ebp-14h] ebx +
cmp [ebp-18h] ebx +
jnz loc_105217B  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx [ebp-10h] +
call sub_101A986  +
xor eax eax +
mov [ebp-10h] ebx +
inc eax  +
call sub_1021FA5  +
retn 4  +
***
call sub_1021EB9  +
xor ebx ebx +
mov dword ptr [ebp-1Ch] 1 +
mov [ebp-14h] ebx +
mov [ebp-4] ebx +
lea ecx [ebp-14h] +
call sub_105078F  +
mov edi [ebp-14h] +
mov ecx edi +
call sub_1050B96  +
lea esi [edi+8] +
mov eax [esi] +
mov [ebp-18h] eax +
cmp eax ebx +
jz loc_105226C  +
lea eax [ebp-18h] +
push eax  +
mov ecx esi +
call sub_105038C  +
push eax  +
lea ecx [ebp-10h] +
call sub_101C334  +
mov byte ptr [ebp-4] 1 +
push ecx  +
mov ecx esp +
mov [ebp-20h] esp +
push dword ptr [ebp+8]  +
call sub_10151F2  +
mov byte ptr [ebp-4] 2 +
mov byte ptr [ebp-4] 1 +
mov ecx [ebp-10h] +
call sub_10519AD  +
cmp eax ebx +
jnz loc_1052255  +
mov [ebp-1Ch] ebx +
mov [ebp-4] bl +
mov ecx [ebp-10h] +
cmp ecx ebx +
jz loc_1052267  +
call sub_101A986  +
mov [ebp-10h] ebx +
cmp [ebp-18h] ebx +
jnz loc_1052218  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx edi +
call sub_101A986  +
mov eax [ebp-1Ch] +
mov [ebp-14h] ebx +
call sub_1021FA5  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
push 7FFFFFFFh  +
push [ebp+arg_0]  +
call sub_1014C35  +
test eax eax +
jge loc_10522AD  +
xor eax eax +
jmp locret_10522DE  +
push esi  +
mov esi [ebp+var_4] +
inc esi  +
lea eax [esi+esi] +
push edi  +
push eax  +
call sub_1021488  +
mov edi eax +
pop ecx  +
test edi edi +
jz loc_10522DA  +
push [ebp+arg_0]  +
push esi  +
push edi  +
call sub_1014BA1  +
test eax eax +
jge loc_10522DA  +
push edi  +
call sub_10213A1  +
pop ecx  +
xor edi edi +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+4] +
test eax eax +
jz loc_10522FE  +
push eax  +
call ds:LocalFree  +
and dword ptr [esi] 0 +
and dword ptr [esi+8] 0 +
and dword ptr [esi+4] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
xor esi esi +
push esi  +
lea eax [ebp+var_4] +
push eax  +
push 1  +
push offset aDAOiciGaSyAOic  +
mov [ebp+var_4] esi +
call ConvertStringSecurityDescriptorToSecurityDescriptorW  +
test eax eax +
jnz loc_105233E  +
call ds:GetLastError  +
mov esi eax +
jmp loc_1052350  +
mov eax [ebp+arg_0] +
mov ecx [ebp+var_4] +
mov dword ptr [eax] 0Ch +
mov [eax+8] esi +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
cmp dword_1065C40 0 +
push esi  +
jz loc_10523AE  +
lea eax [ebp+var_4] +
push eax  +
push 7FFFFFFFh  +
mov esi offset unk_1065A38 +
push esi  +
call sub_1014C35  +
test eax eax +
jl loc_10523AE  +
mov eax [ebp+var_4] +
inc eax  +
cmp [ebp+arg_0] 0 +
jz loc_10523B1  +
cmp [ebp+arg_4] eax +
jb loc_10523B1  +
push esi  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1014BA1  +
xor ecx ecx +
test eax eax +
setl cl  +
mov eax ecx +
jmp loc_10523B1  +
xor eax eax +
inc eax  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 210h +
mov eax dword_1063194 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_210] 0 +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+szShortPath] +
push eax  +
push 1  +
push 0  +
push 26h  +
push 0  +
call ds:SHGetFolderPathW  +
test eax eax +
jz loc_10523FC  +
xor eax eax +
inc eax  +
jmp loc_105248C  +
push esi  +
mov esi 104h +
push esi  +
lea eax [ebp+szShortPath] +
push eax  +
push eax  +
call ds:GetShortPathNameW  +
test eax eax +
jz loc_105245D  +
push offset SubBlock  +
push esi  +
lea eax [ebp+szShortPath] +
push eax  +
call sub_1014BDB  +
test eax eax +
jl loc_105245D  +
push offset aDifx  +
push esi  +
lea eax [ebp+szShortPath] +
push eax  +
call sub_1014BDB  +
test eax eax +
jl loc_105245D  +
lea eax [ebp+var_210] +
push eax  +
push 7FFFFFFFh  +
lea eax [ebp+szShortPath] +
push eax  +
call sub_1014C35  +
test eax eax +
jge loc_1052462  +
xor eax eax +
inc eax  +
jmp loc_105248B  +
mov eax [ebp+var_210] +
inc eax  +
test edi edi +
jz loc_105248B  +
cmp [ebp+arg_4] eax +
jb loc_105248B  +
lea eax [ebp+szShortPath] +
push eax  +
push [ebp+arg_4]  +
push edi  +
call sub_1014BA1  +
xor ecx ecx +
test eax eax +
setl cl  +
mov eax ecx +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_1021557  +
leave   +
retn 8  +
***
call sub_1022E04  +
cmp [ebp-24h] ebx +
jz locret_10525EE  +
push dword ptr [ebp-20h]  +
call ds:ReleaseMutex  +
test eax eax +
jnz locret_10525EE  +
call ds:GetLastError  +
mov [ebp-1Ch] eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_18] +
push edi  +
xor edi edi +
push 0  +
push [ebp+dwFlagsAndAttributes]  +
push [ebp+dwCreationDisposition]  +
push 0  +
push [ebp+dwShareMode]  +
push [ebp+dwDesiredAccess]  +
push [ebp+lpFileName]  +
call ds:CreateFileW  +
mov [esi] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1052640  +
call ds:GetLastError  +
cmp eax 20h +
jnz loc_1052642  +
cmp edi [ebp+arg_14] +
jnb loc_1052642  +
push 32h  +
call ds:Sleep  +
add edi 32h +
cmp dword ptr [esi] 0FFFFFFFFh +
jz loc_1052600  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
push esi  +
push 7530h  +
push 0  +
push 3  +
push [ebp+dwShareMode]  +
push 80000000h  +
push [ebp+lpFileName]  +
call sub_10525F4  +
mov edi eax +
test edi edi +
jnz loc_1052685  +
push eax  +
push dword ptr [esi]  +
call ds:GetFileSize  +
mov ecx [ebp+arg_C] +
mov [ecx] eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
xor edi edi +
push edi  +
push [ebp+dwNumberOfBytesToMap]  +
push edi  +
push 2  +
push edi  +
push [ebp+hFile]  +
call ds:CreateFileMappingW  +
mov esi [ebp+arg_8] +
mov [esi] eax +
cmp eax edi +
jz loc_10526E5  +
push [ebp+dwNumberOfBytesToMap]  +
push edi  +
push edi  +
push 4  +
push eax  +
call ds:MapViewOfFile  +
mov ecx [ebp+arg_C] +
mov [ecx] eax +
cmp eax edi +
jz loc_10526D1  +
xor eax eax +
jmp loc_10526EF  +
call ds:GetLastError  +
push dword ptr [esi]  +
mov ebx eax +
call ds:CloseHandle  +
mov [esi] edi +
jmp loc_10526ED  +
call ds:GetLastError  +
mov ebx eax +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
xor edi edi +
push edi  +
push [ebp+dwNumberOfBytesToMap]  +
push edi  +
push 4  +
push edi  +
push [ebp+hFile]  +
call ds:CreateFileMappingW  +
mov esi [ebp+arg_8] +
mov [esi] eax +
cmp eax edi +
jz loc_1052751  +
push [ebp+dwNumberOfBytesToMap]  +
push edi  +
push edi  +
push 0F001Fh  +
push eax  +
call ds:MapViewOfFile  +
mov ecx [ebp+arg_C] +
mov [ecx] eax +
cmp eax edi +
jz loc_105273D  +
xor eax eax +
jmp loc_105275B  +
call ds:GetLastError  +
push dword ptr [esi]  +
mov ebx eax +
call ds:CloseHandle  +
mov [esi] edi +
jmp loc_1052759  +
call ds:GetLastError  +
mov ebx eax +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov edx [ebp+arg_C] +
and [ebp+var_4] 0 +
push ebx  +
mov ebx [ebp+arg_4] +
cmp edx ebx +
jbe loc_1052781  +
push 57h  +
pop eax  +
jmp loc_10527C2  +
mov eax [ebp+arg_8] +
lea ecx [eax+edx] +
mov eax ebx +
sub eax edx +
dec eax  +
push edi  +
mov edi [ebp+arg_10] +
js loc_10527A0  +
push esi  +
lea esi [ecx+edi] +
mov dl [eax+ecx] +
mov [esi+eax] dl +
dec eax  +
jns loc_1052796  +
pop esi  +
push 0  +
push 0  +
add ebx edi +
push ebx  +
push [ebp+hFile]  +
call ds:SetFilePointer  +
pop edi  +
cmp eax 0FFFFFFFFh +
jnz loc_10527BF  +
call ds:GetLastError  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
inc eax  +
cmp [ebp+lpBaseAddress] 0 +
jz loc_10527E3  +
push [ebp+lpBaseAddress]  +
call ds:UnmapViewOfFile  +
cmp [ebp+hObject] 0 +
push esi  +
mov esi ds:CloseHandle +
jz loc_1052804  +
test eax eax +
jz loc_1052802  +
push [ebp+hObject]  +
call esi  +
test eax eax +
jz loc_1052802  +
xor eax eax +
inc eax  +
jmp loc_1052804  +
xor eax eax +
cmp [ebp+arg_0] 0FFFFFFFFh +
jz loc_105281E  +
test eax eax +
jz loc_105281C  +
push [ebp+arg_0]  +
call esi  +
test eax eax +
jz loc_105281C  +
xor eax eax +
inc eax  +
jmp loc_105281E  +
xor eax eax +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
inc esi  +
cmp [ebp+lpBaseAddress] 0 +
jz loc_1052842  +
push [ebp+lpBaseAddress]  +
call ds:UnmapViewOfFile  +
mov esi eax +
cmp [ebp+hObject] 0 +
jz loc_1052860  +
test esi esi +
jz loc_105285E  +
push [ebp+hObject]  +
call ds:CloseHandle  +
test eax eax +
jz loc_105285E  +
xor esi esi +
inc esi  +
jmp loc_1052860  +
xor esi esi +
cmp [ebp+hFile] 0FFFFFFFFh +
jz loc_105286F  +
push [ebp+hFile]  +
call ds:SetEndOfFile  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 218h +
mov eax dword_1063194 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+lpFileName] +
push ebx  +
push esi  +
push edi  +
lea ecx [ebp+FilePart] +
push ecx  +
lea ecx [ebp+FileName] +
push ecx  +
mov esi 104h +
push esi  +
push eax  +
call ds:GetFullPathNameW  +
cmp eax esi +
jnb loc_1052A5B  +
test eax eax +
jnz loc_10528C8  +
call ds:GetLastError  +
jmp loc_1052A5E  +
mov eax [ebp+FilePart] +
test eax eax +
jz loc_1052A5B  +
lea ecx [ebp+FileName] +
cmp eax ecx +
jz loc_1052A5B  +
xor ecx ecx +
mov [eax] cx +
mov eax dword ptr [ebp+FileName] +
cmp ax 41h +
jb loc_10528FB  +
cmp ax 5Ah +
jbe loc_1052904  +
lea ecx [eax-61h] +
cmp cx 19h +
ja loc_1052928  +
cmp word ptr [ebp-20Eh] 3Ah +
jnz loc_1052928  +
cmp word ptr [ebp+var_20C] 5Ch +
jnz loc_1052A5B  +
lea ecx [ebp+var_20C] +
mov [ebp+var_214] ecx +
push 5Ch  +
pop edi  +
cmp ax di +
jnz loc_105296A  +
cmp [ebp-20Eh] di +
jnz loc_105296A  +
lea eax [ebp+var_20C] +
push edi  +
push eax  +
call sub_1054573  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1052A5B  +
add eax 2 +
push edi  +
push eax  +
call sub_1054573  +
pop ecx  +
pop ecx  +
mov [ebp+var_214] eax +
test eax eax +
jz loc_1052A5B  +
lea eax [ebp+FileName] +
push eax  +
call ds:GetFileAttributesW  +
cmp eax 0FFFFFFFFh +
jz loc_1052994  +
and al 10h +
movzx eax al +
neg eax  +
sbb eax eax +
and eax 0FFFFFEF5h +
add eax 10Bh +
jmp loc_1052A5E  +
mov esi [ebp+FilePart] +
lea eax [ebp+FileName] +
cmp esi eax +
jnz loc_10529A8  +
mov esi eax +
jmp loc_10529AB  +
add esi 0FFFFFFFEh +
cmp esi [ebp+var_214] +
jz loc_1052A5B  +
cmp [esi] di +
jnz loc_1052A5B  +
cmp esi [ebp+var_214] +
jbe loc_1052A5B  +
xor eax eax +
mov [esi] ax +
lea eax [ebp+FileName] +
push 5Ch  +
push eax  +
call sub_105459E  +
mov edi eax +
pop ecx  +
pop ecx  +
test edi edi +
jz loc_1052A5B  +
movzx ebx word ptr [edi+2] +
xor eax eax +
mov [edi+2] ax +
lea eax [ebp+FileName] +
push eax  +
call ds:GetFileAttributesW  +
mov [edi+2] bx +
cmp eax 0FFFFFFFFh +
jnz loc_1052A23  +
mov esi edi +
cmp edi [ebp+var_214] +
ja loc_10529CC  +
cmp esi [ebp+var_214] +
jbe loc_1052A5B  +
mov edi ds:CreateDirectoryW +
xor ebx ebx +
jmp loc_1052A44  +
test al 10h +
jnz loc_1052A11  +
mov eax 10Bh +
jmp loc_1052A5E  +
cmp [esi+2] bx +
jz loc_1052A57  +
push 5Ch  +
pop eax  +
push esi  +
mov [esi] ax +
call ds:lstrlenW  +
lea esi [esi+eax*2] +
push ebx  +
lea eax [ebp+FileName] +
push eax  +
call edi  +
test eax eax +
jnz loc_1052A2E  +
jmp loc_10528BD  +
xor eax eax +
jmp loc_1052A5E  +
push 7Bh  +
pop eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1021557  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_10] +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
mov edi [ebp+arg_4] +
push edi  +
xor eax eax +
push esi  +
mov [edi] eax +
or dword ptr [esi] 0FFFFFFFFh +
push 1  +
push [ebp+lpFileName]  +
mov [ebx] eax +
mov [ecx] eax +
call sub_105264D  +
mov [ebp+arg_4] eax +
test eax eax +
jnz loc_1052AC5  +
push [ebp+arg_10]  +
push ebx  +
push dword ptr [edi]  +
push dword ptr [esi]  +
call sub_1052692  +
mov [ebp+arg_4] eax +
test eax eax +
jz loc_1052AC5  +
push dword ptr [esi]  +
call ds:CloseHandle  +
or dword ptr [esi] 0FFFFFFFFh +
mov eax [ebp+arg_4] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 14h  +
***
call sub_1022E04  +
xor edi edi +
mov [ebp-1Ch] edi +
mov [ebp-20h] edi +
cmp [ebp+8] edi +
jz loc_1052B93  +
mov esi [ebp+0Ch] +
cmp esi edi +
jz loc_1052B93  +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp+8] +
push eax  +
push dword ptr [ebp+8]  +
call sub_1052A74  +
mov [ebp-1Ch] eax +
cmp eax edi +
jnz loc_1052B9A  +
mov [ebp-4] edi +
mov [esi] edi +
mov [esi+4] edi +
mov eax [ebp-20h] +
mov [ebp-24h] eax +
mov [ebp-28h] edi +
mov eax [ebp-28h] +
cmp eax [ebp+8] +
jnb loc_1052B5D  +
push edi  +
push 27h  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
call sub_102ED00  +
mov ecx eax +
mov ebx edx +
mov eax [ebp-24h] +
movzx eax byte ptr [eax] +
cdq   +
add ecx eax +
adc ebx edx +
mov [esi] ecx +
mov [esi+4] ebx +
inc dword ptr [ebp-24h]  +
inc dword ptr [ebp-28h]  +
jmp loc_1052B2C  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
jmp loc_1052B9A  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
mov [ebp-2Ch] eax +
push eax  +
call sub_1052FA1  +
retn   +
mov esp [ebp-18h] +
lea eax [ebp-1Ch] +
push eax  +
push 57h  +
push dword ptr [ebp-2Ch]  +
call sub_1052FC8  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
xor edi edi +
jmp loc_1052B9A  +
mov dword ptr [ebp-1Ch] 57h +
cmp [ebp-20h] edi +
jz loc_1052BAD  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp-30h]  +
call sub_10527CC  +
push dword ptr [ebp-1Ch]  +
call ds:SetLastError  +
xor eax eax +
cmp [ebp-1Ch] edi +
setz al  +
call sub_1022E49  +
retn 8  +
***
call sub_1022E04  +
mov ebx [ebp+8] +
test ebx ebx +
jnz loc_1052C1F  +
cmp [ebp+0Ch] ebx +
jnz loc_1052C00  +
push 2  +
call sub_1053F51  +
mov ecx [ebp+10h] +
mov [ecx] eax +
test eax eax +
jz loc_1052C4F  +
xor ecx ecx +
mov [eax] cx +
xor eax eax +
inc eax  +
jmp loc_1052CBB  +
test ebx ebx +
jnz loc_1052C1F  +
push dword ptr [ebp+0Ch]  +
call sub_1052D43  +
mov ecx [ebp+10h] +
mov [ecx] eax +
xor ecx ecx +
test eax eax +
setnz cl  +
mov eax ecx +
jmp loc_1052CBB  +
push ebx  +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_1052C07  +
mov esi ds:lstrlenW +
call esi  +
mov edi eax +
push dword ptr [ebp+0Ch]  +
call esi  +
lea esi [edi+eax+2] +
push 2  +
push esi  +
call sub_1053FE8  +
mov edi eax +
mov [ebp+8] edi +
test edi edi +
jnz loc_1052C53  +
mov eax [ebp+10h] +
and [eax] edi +
xor eax eax +
jmp loc_1052CBB  +
and dword ptr [ebp-4] 0 +
push ebx  +
push esi  +
push edi  +
call sub_1014BA1  +
push 0  +
push esi  +
push dword ptr [ebp+0Ch]  +
push edi  +
call sub_1052D9C  +
mov [ebp-1Ch] eax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
jmp loc_1052CA5  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
mov [ebp-20h] eax +
push eax  +
call sub_1052FA1  +
retn   +
mov esp [ebp-18h] +
push 0  +
push 57h  +
push dword ptr [ebp-20h]  +
call sub_1052FC8  +
and dword ptr [ebp-1Ch] 0 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov edi [ebp+8] +
cmp dword ptr [ebp-1Ch] 0 +
jnz loc_1052CB3  +
push edi  +
call sub_1053F92  +
xor edi edi +
mov eax [ebp+10h] +
mov [eax] edi +
mov eax [ebp-1Ch] +
call sub_1022E49  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
xor edi edi +
push edi  +
push edi  +
push 1  +
push edi  +
call ds:CreateEventW  +
mov esi [ebp+arg_0] +
mov [esi] eax +
cmp eax edi +
jz loc_1052D02  +
push edi  +
push edi  +
push edi  +
call ds:CreateMutexW  +
mov [esi+4] eax +
cmp eax edi +
jz loc_1052CFA  +
xor eax eax +
inc eax  +
jmp loc_1052D04  +
push dword ptr [esi]  +
call ds:CloseHandle  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+4] +
and dword ptr [eax+4] 0 +
push esi  +
mov esi ds:CloseHandle +
push edi  +
mov edi [eax] +
and dword ptr [eax] 0 +
push ecx  +
call esi  +
push edi  +
call ds:SetEvent  +
push edi  +
call esi  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jnz loc_1052D52  +
xor eax eax +
jmp loc_1052D93  +
mov eax [ebp+arg_0] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1052D58  +
push esi  +
sub eax edx +
push edi  +
sar eax 1 +
lea esi [eax+1] +
push 2  +
push esi  +
call sub_1053FE8  +
mov edi eax +
test edi edi +
jz loc_1052D8F  +
push [ebp+arg_0]  +
push esi  +
push edi  +
call sub_1014BA1  +
test eax eax +
jge loc_1052D8F  +
push edi  +
call sub_1053F92  +
xor edi edi +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+dwErrCode] 0 +
push ebx  +
mov ebx [ebp+lpString] +
push esi  +
push edi  +
mov edi ds:lstrlenW +
push ebx  +
call edi  +
push [ebp+arg_4]  +
mov esi eax +
call edi  +
test esi esi +
jbe loc_1052DD2  +
movzx ecx word ptr [ebx+esi*2-2] +
cmp cx 5Ch +
jz loc_1052DD1  +
cmp cx 2Fh +
jnz loc_1052DD2  +
dec esi  +
mov ecx [ebp+arg_4] +
movzx ecx word ptr [ecx] +
cmp cx 5Ch +
jz loc_1052DE8  +
cmp cx 2Fh +
jz loc_1052DE8  +
xor edx edx +
jmp loc_1052DEC  +
xor edx edx +
inc edx  +
dec eax  +
mov ecx [ebp+arg_C] +
lea eax [eax+esi+2] +
test ecx ecx +
jz loc_1052DF9  +
mov [ecx] eax +
mov edi [ebp+arg_8] +
cmp eax edi +
ja loc_1052E45  +
test edx edx +
jnz loc_1052E10  +
cmp esi edi +
jnb loc_1052E14  +
push 5Ch  +
pop eax  +
mov [ebx+esi*2] ax +
inc esi  +
cmp esi edi +
jb loc_1052E1D  +
mov [ebp+dwErrCode] 0CEh +
jmp loc_1052E38  +
push [ebp+arg_4]  +
mov eax edi +
sub eax esi +
push eax  +
lea eax [ebx+esi*2] +
push eax  +
call sub_1014BA1  +
test eax eax +
jge loc_1052E38  +
movzx eax ax +
mov [ebp+dwErrCode] eax +
test edi edi +
jz loc_1052E4C  +
xor eax eax +
mov [ebx+edi*2-2] ax +
jmp loc_1052E4C  +
mov [ebp+dwErrCode] 0CEh +
cmp [ebp+dwErrCode] 0 +
pop edi  +
pop esi  +
pop ebx  +
jz loc_1052E5E  +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
xor eax eax +
cmp [ebp+dwErrCode] eax +
setz al  +
leave   +
retn 10h  +
***
mov edi edi +
push ebx  +
xor ebx ebx +
push ebx  +
push esi  +
push offset Destination  +
mov [esi+8] ebx +
mov [esi+4] ebx +
mov [esi] ebx +
call ds:InterlockedCompareExchange  +
test eax eax +
jnz loc_1052E90  +
inc eax  +
pop ebx  +
retn   +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call ds:CreateEventW  +
mov [esi] eax +
cmp eax ebx +
jnz loc_1052EA4  +
xor eax eax +
pop ebx  +
retn   +
push edi  +
mov edi Destination +
push edi  +
push esi  +
push offset Destination  +
mov [esi+4] edi +
call ds:InterlockedCompareExchange  +
cmp edi eax +
jnz loc_1052EA5  +
cmp edi ebx +
jz loc_1052ED2  +
push ebx  +
push 0FFFFFFFFh  +
push dword ptr [esi]  +
call ds:WaitForSingleObjectEx  +
mov edi eax +
jmp loc_1052ED4  +
xor edi edi +
push dword ptr [esi]  +
call ds:CloseHandle  +
xor eax eax +
cmp edi ebx +
pop edi  +
mov [esi] ebx +
setz al  +
pop ebx  +
retn   +
***
mov edi edi +
push esi  +
push 0  +
push offset Destination  +
call ds:InterlockedCompareExchange  +
cmp eax esi +
jz locret_1052F23  +
cmp dword ptr [esi+8] 0 +
jnz loc_1052F14  +
mov ecx [eax+4] +
mov [ecx+8] eax +
mov eax [eax+4] +
cmp eax esi +
jnz loc_1052F07  +
mov eax [esi+8] +
push dword ptr [eax]  +
and dword ptr [eax+4] 0 +
call ds:SetEvent  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push edi  +
xor edi edi +
cmp dword_1065C68 edi +
jnz loc_1052F40  +
xor eax eax +
jmp loc_1052F99  +
push esi  +
lea esi [ebp+var_C] +
call sub_1052E6F  +
test eax eax +
jz loc_1052F98  +
dec dword_1065C64  +
jnz loc_1052F8D  +
cmp dword_1065C70 edi +
jz loc_1052F6D  +
call sub_10540E9  +
call sub_1054017  +
mov dword_1065C70 edi +
mov eax dword_1065C6C +
cmp eax edi +
jz loc_1052F82  +
push eax  +
call sub_1053F92  +
mov dword_1065C6C edi +
call sub_1053FCF  +
mov dword_1065C68 edi +
lea esi [ebp+var_C] +
call sub_1052EED  +
xor eax eax +
inc eax  +
pop esi  +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0E0000300h +
jz loc_1052FBD  +
cmp [ebp+arg_0] 0C0000194h +
jz loc_1052FBD  +
xor eax eax +
inc eax  +
jmp loc_1052FBF  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 0C00000FDh +
jnz loc_1052FFF  +
call sub_1023509  +
test eax eax +
jz loc_1052FE7  +
mov eax 3E9h +
jmp loc_105302A  +
push 0  +
push 0  +
push 1  +
push 0E0000300h  +
call ds:RaiseException  +
mov eax 0E0000300h +
jmp loc_105302A  +
cmp eax 0C0000005h +
jz loc_1053027  +
cmp eax 0C0000006h +
jz loc_1053022  +
push eax  +
call ds:RtlNtStatusToDosError  +
cmp eax 13Dh +
jnz loc_105302A  +
mov eax 0E0000239h +
jmp loc_105302A  +
push 1Eh  +
pop eax  +
jmp loc_105302A  +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_8] +
test ecx ecx +
jz loc_1053033  +
mov [ecx] eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_1063194 +
xor eax ebp +
mov [ebp+var_4] eax +
push edi  +
xor edi edi +
cmp [ebp+arg_0] edi +
jnz loc_105305E  +
push 57h  +
pop edi  +
jmp loc_10530C4  +
push esi  +
push [ebp+arg_0]  +
mov esi 104h +
push esi  +
lea eax [ebp+String] +
push eax  +
call sub_1014BA1  +
test eax eax +
jge loc_105307D  +
push 57h  +
pop edi  +
jmp loc_10530C3  +
push 0  +
push esi  +
push offset aInf  +
lea eax [ebp+String] +
push eax  +
call sub_1052D9C  +
test eax eax +
jz loc_10530BB  +
push [ebp+arg_4]  +
lea eax [ebp+String] +
push eax  +
call sub_105404C  +
test eax eax +
jz loc_10530BB  +
push [ebp+arg_4]  +
lea eax [ebp+String] +
push eax  +
call sub_1054134  +
test eax eax +
jnz loc_10530C3  +
call ds:GetLastError  +
mov edi eax +
pop esi  +
push edi  +
call ds:SetLastError  +
mov ecx [ebp+var_4] +
xor eax eax +
test edi edi +
setz al  +
xor ecx ebp +
pop edi  +
call sub_1021557  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 250h +
mov eax dword_1063194 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax dword_1065C6C +
and [ebp+var_250] 0 +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
test eax eax +
jz loc_105311D  +
push eax  +
call sub_1053F92  +
and dword_1065C6C 0 +
xor edi edi +
inc edi  +
test esi esi +
jz loc_1053149  +
and dword_10646E8 0 +
push esi  +
call sub_105287B  +
push esi  +
push 124h  +
lea eax [ebp+var_24C] +
push eax  +
call sub_1014BA1  +
test eax eax +
jl loc_105319E  +
jmp loc_105316A  +
mov esi 104h +
push esi  +
lea eax [ebp+var_24C] +
push eax  +
mov dword_10646E8 edi +
call ds:GetSystemWindowsDirectoryW  +
test eax eax +
jz loc_105319E  +
cmp eax esi +
ja loc_105319E  +
lea eax [ebp+var_24C] +
push eax  +
call sub_1052D43  +
mov dword_1065C6C eax +
test eax eax +
jz loc_105319E  +
cmp dword_1065C70 0 +
jz loc_1053198  +
push dword_10646E8  +
push eax  +
call sub_105303C  +
test eax eax +
jz loc_105319E  +
mov [ebp+var_250] edi +
mov ecx [ebp+var_4] +
mov eax [ebp+var_250] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1021557  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
lea esi [ebp+var_C] +
call sub_1052E6F  +
test eax eax +
jz loc_105322A  +
inc dword_1065C64  +
xor esi esi +
inc esi  +
cmp dword_1065C64 esi +
jnz loc_105321D  +
call sub_1053FB1  +
test eax eax +
jz loc_10531F9  +
push 0  +
call sub_10530E6  +
test eax eax +
jz loc_10531F9  +
mov dword_1065C68 esi +
cmp dword_1065C68 0 +
jnz loc_105321D  +
mov eax dword_1065C6C +
test eax eax +
jz loc_1053218  +
push eax  +
call sub_1053F92  +
and dword_1065C6C 0 +
call sub_1053FCF  +
lea esi [ebp+var_C] +
call sub_1052EED  +
mov eax dword_1065C68 +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
and ecx 3 +
mov eax ecx +
xor eax [ebp+arg_0] +
mov edx ecx +
sub edx 0 +
jz loc_1053252  +
dec edx  +
dec edx  +
jz loc_1053252  +
or eax 1 +
jmp loc_1053254  +
or eax ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx dword ptr [ebp+DestStr] +
test ecx ecx +
jnz loc_105326D  +
xor eax eax +
jmp loc_10532BD  +
test ecx 0FFFF0000h +
jnz loc_1053290  +
push 1  +
lea eax [ebp+DestStr] +
push eax  +
push 1  +
push eax  +
push 100h  +
push 400h  +
call ds:LCMapStringW  +
jmp loc_10532BA  +
mov eax ecx +
push esi  +
lea esi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_1053296  +
sub eax esi +
sar eax 1 +
inc eax  +
push eax  +
push ecx  +
push eax  +
push ecx  +
push 100h  +
push 400h  +
call ds:LCMapStringW  +
pop esi  +
mov eax dword ptr [ebp+DestStr] +
pop ebp  +
retn 4  +
***
call sub_1022E04  +
mov edi ecx +
xor ebx ebx +
mov [ebp-1Ch] ebx +
mov [ebp-4] ebx +
cmp edi ebx +
jnz loc_10532E8  +
mov [ebp-20h] ebx +
jmp loc_1053371  +
mov eax [ebp+0Ch] +
and eax 80000002h +
cmp eax 2 +
jnz loc_1053302  +
push edi  +
call sub_105325D  +
or dword ptr [ebp+0Ch] 80000000h +
mov esi edi +
mov [ebp-24h] esi +
test dword ptr [ebp+0Ch] 80000000h +
jz loc_1053325  +
movzx eax word ptr [esi] +
cmp ax bx +
jz loc_1053343  +
movzx eax ax +
add [ebp-1Ch] eax +
inc esi  +
inc esi  +
mov [ebp-24h] esi +
jmp loc_1053310  +
movzx eax word ptr [esi] +
cmp ax bx +
jz loc_1053343  +
movzx eax ax +
push eax  +
call sub_105325D  +
movzx eax ax +
add [ebp-1Ch] eax +
inc esi  +
inc esi  +
mov [ebp-24h] esi +
jmp loc_1053325  +
mov eax [ebp-1Ch] +
xor edx edx +
mov ecx 1FDh +
div  ecx +
mov eax [ebp+10h] +
mov [eax] edx +
sub esi edi +
sar esi 1 +
mov eax [ebp+8] +
mov [eax] esi +
mov dword ptr [ebp-20h] 1 +
jmp loc_1053371  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
and dword ptr [ebp-20h] 0 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov eax [ebp-20h] +
call sub_1022E49  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
or [ebp+var_4] 0FFFFFFFFh +
push ebx  +
mov ebx [ebp+arg_14] +
test bl 1 +
jz loc_10533A3  +
and ebx 0FFFFFFFDh +
mov [ebp+arg_14] ebx +
mov ecx [ebp+lpString1] +
lea eax [ebp+var_C] +
push eax  +
push ebx  +
push [ebp+arg_8]  +
call sub_10532C6  +
test eax eax +
jnz loc_10533BE  +
xor ebx ebx +
jmp loc_10534F1  +
mov eax [ebp+var_C] +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov ecx [edi] +
mov edx [ecx+eax*4] +
cmp edx 7F4h +
jl loc_10534C0  +
mov eax [edi+4] +
cmp edx eax +
jge loc_10534C0  +
lea esi [ecx+edx] +
mov ecx [edi+14h] +
add ecx 6 +
xor edx edx +
div  ecx +
and [ebp+var_8] 0 +
not ebx  +
inc eax  +
mov [ebp+arg_0] eax +
mov eax [edi+18h] +
mov [ebp+Locale] eax +
and ebx 1 +
push 0FFFFFFFFh  +
lea eax [esi+4] +
push eax  +
push 0FFFFFFFFh  +
push [ebp+lpString1]  +
push ebx  +
push [ebp+Locale]  +
call ds:CompareStringW  +
test eax eax +
jnz loc_1053436  +
push 0FFFFFFFFh  +
lea eax [esi+4] +
push eax  +
push 0FFFFFFFFh  +
push [ebp+lpString1]  +
push ebx  +
push 400h  +
call ds:CompareStringW  +
test eax eax +
jz loc_105343A  +
dec eax  +
dec eax  +
jmp loc_1053481  +
test byte ptr [ebp+arg_14] 1 +
jz loc_1053473  +
mov eax [ebp+lpString1] +
lea ecx [esi+4] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_105346C  +
test dx dx +
jz loc_1053468  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_105346C  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_1053446  +
xor eax eax +
jmp loc_1053481  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
jmp loc_1053481  +
lea eax [esi+4] +
push eax  +
push [ebp+lpString1]  +
call sub_10224ED  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10534AE  +
jl loc_10534B7  +
mov eax [esi] +
cmp eax 0FFFFFFFFh +
jz loc_10534BC  +
cmp eax 7F4h +
mov [ebp+var_8] esi +
jl loc_10534AA  +
cmp eax [edi+4] +
jge loc_10534AA  +
mov esi [edi] +
add esi eax +
dec [ebp+arg_0]  +
jnz loc_1053402  +
xor ebx ebx +
jmp loc_10534EF  +
mov ebx esi +
sub esi [edi] +
mov [ebp+var_4] esi +
jmp loc_10534C2  +
mov ebx [ebp+var_8] +
jmp loc_10534EF  +
mov ebx esi +
jmp loc_10534EF  +
xor ebx ebx +
cmp [ebp+var_4] 0FFFFFFFFh +
jz loc_10534EF  +
cmp [ebp+arg_18] 0 +
jz loc_10534EF  +
mov edi [edi+14h] +
cmp [ebp+arg_1C] edi +
jnb loc_10534D9  +
mov edi [ebp+arg_1C] +
mov eax [ebp+arg_8] +
mov eax [eax] +
push edi  +
lea eax [ebx+eax*2+6] +
push eax  +
push [ebp+arg_18]  +
call loc_1022620  +
add esp 0Ch +
pop edi  +
pop esi  +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_10534FD  +
mov ecx [ebp+var_C] +
mov [eax] ecx +
mov eax [ebp+arg_10] +
test eax eax +
jz loc_1053506  +
mov [eax] ebx +
mov eax [ebp+var_4] +
pop ebx  +
leave   +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_C] +
cmp [eax+14h] edi +
jnb loc_1053528  +
xor eax eax +
jmp loc_105354D  +
push esi  +
mov esi [eax] +
add esi [ebp+arg_4] +
lea eax [esi+4] +
push eax  +
call ds:lstrlenW  +
lea eax [esi+eax*2+6] +
push edi  +
push eax  +
push [ebp+arg_8]  +
call loc_1022620  +
add esp 0Ch +
xor eax eax +
inc eax  +
pop esi  +
pop edi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_C] +
push edi  +
mov edi [ebp+arg_0] +
cmp ebx [edi+14h] +
ja loc_105359B  +
push esi  +
mov esi [edi] +
add esi [ebp+arg_4] +
lea eax [esi+4] +
push eax  +
call ds:lstrlenW  +
push dword ptr [edi+14h]  +
lea esi [esi+eax*2+6] +
push 0  +
push esi  +
call sub_10219E0  +
push ebx  +
push [ebp+arg_8]  +
push esi  +
call loc_1022620  +
add esp 18h +
xor eax eax +
inc eax  +
pop esi  +
jmp loc_105359D  +
xor eax eax +
pop edi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
xor ebx ebx +
push edi  +
mov edi [ebp+arg_0] +
cmp [ebp+arg_4] ebx +
jz loc_10535C5  +
mov eax [ebp+arg_8] +
cmp eax [edi+14h] +
jnb loc_10535C5  +
xor eax eax +
jmp loc_105363B  +
xor eax eax +
inc eax  +
push esi  +
cmp ebx 7F4h +
jnb loc_1053637  +
mov ecx [edi] +
mov edx [ebx+ecx] +
cmp edx 0FFFFFFFFh +
jz loc_1053630  +
lea esi [ecx+edx] +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_1053605  +
push dword ptr [edi+14h]  +
lea eax [esi+4] +
push eax  +
call ds:lstrlenW  +
lea eax [esi+eax*2+6] +
push eax  +
push [ebp+arg_4]  +
call loc_1022620  +
mov eax [edi+14h] +
add esp 0Ch +
push [ebp+arg_10]  +
push eax  +
push [ebp+arg_4]  +
lea eax [esi+4] +
push eax  +
mov eax esi +
sub eax [edi] +
push eax  +
push edi  +
call [ebp+arg_C]  +
mov ecx [esi] +
cmp ecx 0FFFFFFFFh +
jnz loc_1053624  +
xor esi esi +
jmp loc_1053628  +
mov esi [edi] +
add esi ecx +
test eax eax +
jz loc_1053630  +
test esi esi +
jnz loc_10535DE  +
add ebx 4 +
test eax eax +
jnz loc_10535C9  +
xor eax eax +
inc eax  +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 14h  +
***
call sub_1022E04  +
mov dword ptr [ebp-1Ch] 8 +
mov bl [ebp+8] +
cmp bl 1 +
jz loc_105367A  +
cmp bl 2 +
jz loc_105367A  +
cmp bl 3 +
jz loc_105367A  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_10538B2  +
push 2Ch  +
call sub_1053F51  +
mov esi eax +
mov [ebp-24h] esi +
xor edi edi +
cmp esi edi +
jz loc_1053879  +
push 2Ch  +
push edi  +
push esi  +
call sub_10219E0  +
add esp 0Ch +
mov [esi+1Ch] bl +
mov eax [ebp+20h] +
mov [esi+14h] eax +
mov eax [ebp+1Ch] +
and eax 3FFh +
cmp ax 1Fh +
jnz loc_10536BC  +
mov dword ptr [esi+18h] 409h +
jmp loc_10536C3  +
movzx eax word ptr [ebp+1Ch] +
mov [esi+18h] eax +
movzx eax bl +
dec eax  +
jz loc_1053846  +
dec eax  +
jz loc_10537A5  +
dec eax  +
jnz loc_1053879  +
mov [ebp+8] edi +
mov eax [ebp+0Ch] +
mov [esi+20h] eax +
mov [esi+10h] edi +
mov [esi+0Ch] edi +
mov ebx [ebp+10h] +
test ebx ebx +
jnz loc_10536FD  +
mov ebx 1800h +
mov dword ptr [ebp+8] 1 +
lea edi [esi+28h] +
push edi  +
lea ecx [esi+24h] +
push ecx  +
push ebx  +
push eax  +
call sub_10526FB  +
mov [ebp-1Ch] eax +
test eax eax +
jnz loc_1053879  +
mov dword ptr [ebp-4] 1 +
mov edi [edi] +
lea eax [edi+10h] +
mov [esi] eax +
add ebx 0FFFFFFF0h +
mov [esi+8] ebx +
xor ebx ebx +
cmp [ebp+8] ebx +
jz loc_1053775  +
push 1800h  +
push ebx  +
push edi  +
push ebx  +
push dword ptr [esi+20h]  +
call sub_1052767  +
mov [ebp-1Ch] eax +
cmp eax ebx +
jnz loc_1053790  +
mov [ebp-20h] ebx +
cmp dword ptr [ebp-20h] 1FDh +
jnb loc_1053763  +
mov eax [esi] +
mov ecx [ebp-20h] +
or dword ptr [eax+ecx*4] 0FFFFFFFFh +
inc dword ptr [ebp-20h]  +
jmp loc_105374C  +
mov eax 7F4h +
mov [esi+4] eax +
mov [edi] eax +
mov eax [ebp+20h] +
mov [edi+4] eax +
jmp loc_105378D  +
mov eax [edi] +
mov [esi+4] eax +
mov edi [edi+4] +
cmp edi ebx +
jz loc_105378D  +
cmp edi [ebp+20h] +
mov dword ptr [ebp-1Ch] 51Ah +
jb loc_1053790  +
mov [ebp-1Ch] ebx +
mov dword ptr [ebp-4] 0FFFFFFFEh +
jmp loc_1053879  +
xor eax eax +
inc eax  +
retn   +
jmp loc_1053830  +
mov eax [ebp+0Ch] +
mov [esi+20h] eax +
mov [esi+10h] edi +
mov [esi+0Ch] edi +
mov ecx [ebp+14h] +
cmp ecx edi +
jz loc_10537C8  +
mov [esi] ecx +
mov eax [ebp+18h] +
mov [esi+4] eax +
mov [esi+8] edi +
jmp loc_10538B0  +
mov ebx [ebp+10h] +
cmp ebx 10h +
jnb loc_10537DC  +
mov dword ptr [ebp-1Ch] 57h +
jmp loc_105387F  +
lea edi [esi+28h] +
push edi  +
lea ecx [esi+24h] +
push ecx  +
push ebx  +
push eax  +
call sub_1052692  +
mov [ebp-1Ch] eax +
test eax eax +
jnz loc_1053879  +
and [ebp-4] eax +
mov eax [edi] +
lea ecx [eax+10h] +
mov [esi] ecx +
add ebx 0FFFFFFF0h +
mov [esi+8] ebx +
mov ecx [eax+4] +
test ecx ecx +
jz loc_105381E  +
cmp ecx [ebp+20h] +
jnb loc_105381E  +
mov dword ptr [ebp-1Ch] 51Ah +
jmp loc_1053790  +
mov eax [eax] +
mov [esi+4] eax +
and dword ptr [ebp-1Ch] 0 +
jmp loc_1053790  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-1Ch] 0Dh +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov esi [ebp-24h] +
jmp loc_1053879  +
or dword ptr [esi+20h] 0FFFFFFFFh +
mov edi 1800h +
push edi  +
call sub_1053F51  +
mov [esi] eax +
test eax eax +
jz loc_1053879  +
mov [esi+8] edi +
xor ecx ecx +
mov eax 7F4h +
mov edx [esi] +
or dword ptr [ecx+edx] 0FFFFFFFFh +
add ecx 4 +
cmp ecx eax +
jb loc_1053865  +
mov [esi+4] eax +
and dword ptr [ebp-1Ch] 0 +
cmp dword ptr [ebp-1Ch] 0 +
jz loc_10538B0  +
test esi esi +
jz loc_10538A7  +
mov eax [esi+28h] +
test eax eax +
jz loc_1053891  +
push eax  +
call ds:UnmapViewOfFile  +
mov eax [esi+24h] +
test eax eax +
jz loc_105389F  +
push eax  +
call ds:CloseHandle  +
push esi  +
call sub_1053F92  +
xor esi esi +
push dword ptr [ebp-1Ch]  +
call ds:SetLastError  +
mov eax esi +
call sub_1022E49  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
movzx eax byte ptr [esi+1Ch] +
dec eax  +
jz loc_1053903  +
dec eax  +
jz loc_10538E5  +
dec eax  +
jnz loc_1053910  +
push dword ptr [esi+28h]  +
push dword ptr [esi+24h]  +
push dword ptr [esi+20h]  +
call sub_1052828  +
jmp loc_1053910  +
mov eax [esi+28h] +
test eax eax +
jz loc_10538F3  +
push eax  +
call ds:UnmapViewOfFile  +
mov eax [esi+24h] +
test eax eax +
jz loc_1053910  +
push eax  +
call ds:CloseHandle  +
jmp loc_1053910  +
cmp dword ptr [esi+8] 0 +
jz loc_1053910  +
push dword ptr [esi]  +
call sub_1053F92  +
push esi  +
call sub_1053F92  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 0FFFFFFFFh  +
push 0  +
push [ebp+lpHandles]  +
push 2  +
call ds:WaitForMultipleObjectsEx  +
dec eax  +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push dword ptr [eax+4]  +
call ds:ReleaseMutex  +
pop ebp  +
retn 4  +
***
call sub_1022E04  +
or dword ptr [ebp-1Ch] 0FFFFFFFFh +
xor esi esi +
mov [ebp-20h] esi +
mov [ebp-4] esi +
mov edi [ebp+8] +
lea eax [edi+0Ch] +
push eax  +
call sub_1053920  +
test eax eax +
jz loc_10539AB  +
mov dword ptr [ebp-20h] 1 +
push dword ptr [ebp+10h]  +
call sub_1053232  +
push esi  +
push esi  +
push eax  +
push esi  +
push esi  +
lea eax [ebp+10h] +
push eax  +
push dword ptr [ebp+0Ch]  +
push edi  +
call sub_1053388  +
mov [ebp-1Ch] eax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
jmp loc_10539CB  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
or dword ptr [ebp-1Ch] 0FFFFFFFFh +
mov dword ptr [ebp-4] 0FFFFFFFEh +
xor esi esi +
mov edi [ebp+8] +
cmp [ebp-20h] esi +
jz loc_10539D9  +
add edi 0Ch +
push edi  +
call sub_1053945  +
mov eax [ebp-1Ch] +
call sub_1022E49  +
retn 0Ch  +
***
call sub_1022E04  +
xor edi edi +
mov [ebp-1Ch] edi +
mov [ebp-20h] edi +
mov [ebp-4] edi +
mov esi [ebp+8] +
lea eax [esi+0Ch] +
push eax  +
call sub_1053920  +
test eax eax +
jz loc_1053A29  +
mov dword ptr [ebp-20h] 1 +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push esi  +
call sub_1053513  +
mov [ebp-1Ch] eax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
jmp loc_1053A48  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor edi edi +
mov [ebp-1Ch] edi +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov esi [ebp+8] +
cmp [ebp-20h] edi +
jz loc_1053A56  +
add esi 0Ch +
push esi  +
call sub_1053945  +
mov eax [ebp-1Ch] +
call sub_1022E49  +
retn 10h  +
***
call sub_1022E04  +
xor edi edi +
mov [ebp-1Ch] edi +
mov [ebp-20h] edi +
mov [ebp-4] edi +
mov esi [ebp+8] +
lea eax [esi+0Ch] +
push eax  +
call sub_1053920  +
test eax eax +
jz loc_1053AA6  +
mov dword ptr [ebp-20h] 1 +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push esi  +
call sub_1053557  +
mov [ebp-1Ch] eax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
jmp loc_1053AC5  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor edi edi +
mov [ebp-1Ch] edi +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov esi [ebp+8] +
cmp [ebp-20h] edi +
jz loc_1053AD3  +
add esi 0Ch +
push esi  +
call sub_1053945  +
mov eax [ebp-1Ch] +
call sub_1022E49  +
retn 10h  +
***
call sub_1022E04  +
xor edi edi +
mov [ebp-1Ch] edi +
mov [ebp-20h] edi +
mov [ebp-4] edi +
mov esi [ebp+8] +
lea eax [esi+0Ch] +
push eax  +
call sub_1053920  +
test eax eax +
jz loc_1053B26  +
mov dword ptr [ebp-20h] 1 +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push esi  +
call sub_10535A8  +
mov [ebp-1Ch] eax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
jmp loc_1053B45  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor edi edi +
mov [ebp-1Ch] edi +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov esi [ebp+8] +
cmp [ebp-20h] edi +
jz loc_1053B53  +
add esi 0Ch +
push esi  +
call sub_1053945  +
mov eax [ebp-1Ch] +
call sub_1022E49  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
xor edi edi +
cmp [ebp+arg_4] edi +
jz loc_1053B74  +
xor eax eax +
jmp loc_1053BAA  +
push esi  +
push [ebp+arg_0]  +
call ds:GetThreadLocale  +
push eax  +
push edi  +
push edi  +
push edi  +
push edi  +
push 1  +
call sub_1053646  +
mov esi eax +
cmp esi edi +
jz loc_1053BA7  +
lea eax [esi+0Ch] +
push eax  +
call sub_1052CC8  +
test eax eax +
jz loc_1053BA1  +
mov eax esi +
jmp loc_1053BA9  +
push esi  +
call sub_10538BF  +
xor eax eax +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
***
call sub_1022E04  +
and dword ptr [ebp-4] 0 +
mov edi [ebp+8] +
lea esi [edi+0Ch] +
push esi  +
call sub_1053920  +
test eax eax +
jz loc_1053BE9  +
push esi  +
call sub_1052D0F  +
push edi  +
call sub_10538BF  +
jmp loc_1053BE9  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1022E49  +
retn 4  +
***
call sub_1022E04  +
mov esi [ebp+8] +
xor edi edi +
mov [ebp-24h] edi +
mov eax [ebp+0Ch] +
cmp eax edi +
jnz loc_1053C20  +
or eax 0FFFFFFFFh +
jmp loc_1053EC0  +
cmp byte ptr [esi+1Ch] 2 +
jz loc_1053C18  +
mov [ebp+8] eax +
mov ebx [ebp+10h] +
test bl 1 +
jnz loc_1053C5F  +
test ebx ebx +
js loc_1053C56  +
test bl 2 +
jnz loc_1053C4E  +
push eax  +
call sub_1052D43  +
mov [ebp+8] eax +
cmp eax edi +
jz loc_1053C18  +
mov dword ptr [ebp-24h] 1 +
push dword ptr [ebp+8]  +
call sub_105325D  +
and ebx 0FFFFFFFDh +
or ebx 80000001h +
mov [ebp-4] edi +
cmp [ebp+14h] edi +
jz loc_1053C79  +
mov eax [ebp+18h] +
cmp eax [esi+14h] +
jbe loc_1053C79  +
push edi  +
push edi  +
push edi  +
push edi  +
call ds:RaiseException  +
push edi  +
push edi  +
push ebx  +
lea eax [ebp+0Ch] +
push eax  +
lea eax [ebp-34h] +
push eax  +
lea eax [ebp-28h] +
push eax  +
push dword ptr [ebp+8]  +
push esi  +
call sub_1053388  +
mov [ebp-1Ch] eax +
cmp eax 0FFFFFFFFh +
jz loc_1053CE5  +
cmp [ebp+14h] edi +
jz loc_1053CCC  +
test bl 4 +
jz loc_1053CCC  +
mov eax [ebp+0Ch] +
mov ecx [ebp-28h] +
lea edi [eax+ecx*2+6] +
mov [ebp-20h] edi +
push dword ptr [esi+14h]  +
push 0  +
push edi  +
call sub_10219E0  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push edi  +
call loc_1022620  +
add esp 18h +
xor edi edi +
cmp [ebp-24h] edi +
jz loc_1053CD9  +
push dword ptr [ebp+8]  +
call sub_1053F92  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
jmp loc_1053EBD  +
mov eax [esi+14h] +
mov ecx [ebp-28h] +
lea eax [eax+ecx*2+6] +
mov [ebp+10h] eax +
and eax 3 +
jz loc_1053CFF  +
push 4  +
pop ecx  +
sub ecx eax +
add [ebp+10h] ecx +
mov ecx [ebp-20h] +
mov eax [esi+4] +
mov ebx [ebp+10h] +
lea edx [eax+ebx] +
mov [ebp-30h] edx +
mov eax [esi+8] +
cmp edx eax +
jbe loc_1053E16  +
mov ebx eax +
xor edx edx +
push 3  +
pop edi  +
div  edi +
add eax eax +
shr eax 0Bh +
inc eax  +
shl eax 0Bh +
mov edx 100000h +
cmp eax edx +
jb loc_1053D36  +
mov eax edx +
or edx 0FFFFFFFFh +
sub edx ebx +
cmp eax edx +
ja loc_1053D41  +
add ebx eax +
mov [ebp-2Ch] ebx +
cmp ebx [esi+8] +
jnb loc_1053D4F  +
mov ebx [ebp-30h] +
mov [ebp-2Ch] ebx +
mov edx [esi] +
mov [ebp-30h] edx +
movzx eax byte ptr [esi+1Ch] +
dec eax  +
jz loc_1053DD2  +
dec eax  +
dec eax  +
jnz loc_1053DBA  +
push dword ptr [esi+28h]  +
push dword ptr [esi+24h]  +
push dword ptr [esi+20h]  +
call sub_1052828  +
and dword ptr [esi+24h] 0 +
and dword ptr [esi] 0 +
mov edi [esi+8] +
add edi 10h +
lea eax [esi+28h] +
push eax  +
lea eax [esi+24h] +
push eax  +
lea eax [ebx+10h] +
push eax  +
push dword ptr [esi+20h]  +
call sub_10526FB  +
mov [ebp-1Ch] eax +
test eax eax +
jnz loc_1053E0A  +
mov eax ebx +
sub eax edi +
add eax 10h +
push eax  +
push edi  +
push dword ptr [esi+28h]  +
push edi  +
push dword ptr [esi+20h]  +
call sub_1052767  +
mov [ebp-1Ch] eax +
test eax eax +
jnz loc_1053E0A  +
mov ecx [esi+28h] +
add ecx 10h +
mov [ebp-20h] ecx +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_1053DC8  +
mov eax ecx +
sub eax [ebp-30h] +
add [ebp+0Ch] eax +
mov [esi] ecx +
mov [esi+8] ebx +
jmp loc_1053D02  +
push ebx  +
push edx  +
call sub_1053F70  +
mov ecx eax +
mov [ebp-20h] ecx +
test ecx ecx +
jnz loc_1053DBA  +
mov ebx [esi+4] +
add ebx [ebp+10h] +
mov [ebp-2Ch] ebx +
push ebx  +
push dword ptr [esi]  +
call sub_1053F70  +
mov ecx eax +
mov [ebp-20h] ecx +
test ecx ecx +
jnz loc_1053DBA  +
cmp dword ptr [ebp-24h] 0 +
jz loc_1053E0A  +
push dword ptr [ebp+8]  +
call sub_1053F92  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
jmp loc_1053C18  +
mov ecx [esi] +
mov edi [esi+4] +
add edi ecx +
mov eax [ebp+0Ch] +
test eax eax +
jz loc_1053E30  +
mov ecx [eax] +
mov [edi] ecx +
mov ecx edi +
sub ecx [esi] +
mov [eax] ecx +
jmp loc_1053E44  +
mov eax [ebp-34h] +
shl eax 2 +
mov ecx [eax+ecx] +
mov [edi] ecx +
mov ecx [esi] +
mov edx edi +
sub edx ecx +
mov [eax+ecx] edx +
push dword ptr [ebp+8]  +
push ebx  +
lea eax [edi+4] +
push eax  +
call sub_1014BA1  +
test eax eax +
jl loc_1053DFC  +
mov eax [ebp-28h] +
lea ebx [edi+eax*2+6] +
mov [ebp-20h] ebx +
push dword ptr [esi+14h]  +
push 0  +
push ebx  +
call sub_10219E0  +
add esp 0Ch +
cmp dword ptr [ebp+14h] 0 +
jz loc_1053E82  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push ebx  +
call loc_1022620  +
add esp 0Ch +
mov eax [ebp+10h] +
add [esi+4] eax +
mov eax [esi+4] +
cmp byte ptr [esi+1Ch] 3 +
jnz loc_1053E96  +
mov ecx [esi+28h] +
mov [ecx] eax +
sub edi [esi] +
mov [ebp-1Ch] edi +
jmp loc_1053EA8  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
or dword ptr [ebp-1Ch] 0FFFFFFFFh +
mov dword ptr [ebp-4] 0FFFFFFFEh +
cmp dword ptr [ebp-24h] 0 +
jz loc_1053EBD  +
push dword ptr [ebp+8]  +
call sub_1053F92  +
mov eax [ebp-1Ch] +
call sub_1022E49  +
retn 14h  +
***
call sub_1022E04  +
or dword ptr [ebp-1Ch] 0FFFFFFFFh +
xor edi edi +
mov [ebp-20h] edi +
mov [ebp-4] edi +
mov esi [ebp+8] +
lea eax [esi+0Ch] +
push eax  +
call sub_1053920  +
test eax eax +
jz loc_1053F13  +
mov dword ptr [ebp-20h] 1 +
push dword ptr [ebp+10h]  +
call sub_1053232  +
push edi  +
push edi  +
push eax  +
push dword ptr [ebp+0Ch]  +
push esi  +
call sub_1053BFD  +
mov [ebp-1Ch] eax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
jmp loc_1053F33  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
or dword ptr [ebp-1Ch] 0FFFFFFFFh +
mov dword ptr [ebp-4] 0FFFFFFFEh +
xor edi edi +
mov esi [ebp+8] +
cmp [ebp-20h] edi +
jz loc_1053F41  +
add esi 0Ch +
push esi  +
call sub_1053945  +
mov eax [ebp-1Ch] +
call sub_1022E49  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+dwBytes]  +
push 0  +
push dword_1065C7C  +
call ds:HeapAlloc  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+dwBytes]  +
push [ebp+lpMem]  +
push 0  +
push dword_1065C7C  +
call ds:HeapReAlloc  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpMem]  +
push 0  +
push dword_1065C7C  +
call ds:HeapFree  +
pop ebp  +
retn 4  +
***
call ds:GetProcessHeap  +
mov dword_1065C7C eax +
test eax eax +
jnz loc_1053FC1  +
retn   +
xor eax eax +
inc eax  +
mov dword_1065C78 eax +
retn   +
***
cmp dword_1065C78 0 +
jz loc_1053FDF  +
and dword_1065C78 0 +
xor eax eax +
inc eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+dwBytes] +
push eax  +
mov eax [ebp+dwBytes] +
mul  [ebp+arg_4] +
push edx  +
push eax  +
call sub_102007B  +
test eax eax +
jge loc_1054006  +
xor eax eax +
jmp loc_105400E  +
push [ebp+dwBytes]  +
call sub_1053F51  +
pop ebp  +
retn 8  +
***
mov eax dword_1065C90 +
test eax eax +
jz loc_105402D  +
push eax  +
call sub_1053F92  +
and dword_1065C90 0 +
mov eax dword_1065CB8 +
test eax eax +
jz loc_1054043  +
push eax  +
call sub_1053F92  +
and dword_1065CB8 0 +
xor eax eax +
inc eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
xor esi esi +
push edi  +
cmp [ebp+arg_4] esi +
jz loc_1054067  +
mov eax offset aSetupapi_app_l +
mov edi offset aSetupapi_dev_l +
jmp loc_105406E  +
mov eax offset aSetupapi_offli +
mov edi eax +
lea ecx [ebp+var_4] +
push ecx  +
push eax  +
push [ebp+arg_0]  +
call sub_1052BCB  +
test eax eax +
jz loc_1054099  +
mov eax dword_1065CB8 +
mov esi [ebp+var_4] +
test eax eax +
jz loc_1054091  +
push eax  +
call sub_1053F92  +
mov eax [ebp+var_4] +
mov dword_1065CB8 eax +
lea eax [ebp+var_4] +
push eax  +
push edi  +
push [ebp+arg_0]  +
call sub_1052BCB  +
test eax eax +
jz loc_10540C4  +
mov eax dword_1065C90 +
mov esi [ebp+var_4] +
test eax eax +
jz loc_10540BC  +
push eax  +
call sub_1053F92  +
mov eax [ebp+var_4] +
mov dword_1065C90 eax +
test esi esi +
jz loc_10540CE  +
push esi  +
call sub_105287B  +
xor eax eax +
cmp [ebp+arg_4] eax +
pop edi  +
setz al  +
pop esi  +
mov dword_1065CD4 eax +
xor eax eax +
inc eax  +
leave   +
retn 8  +
***
mov eax dword_1065CD8 +
test eax eax +
jz loc_10540FF  +
push eax  +
call sub_1053F92  +
and dword_1065CD8 0 +
mov eax dword_1065CDC +
test eax eax +
jz loc_1054115  +
push eax  +
call sub_1053F92  +
and dword_1065CDC 0 +
mov eax dword_1065CE0 +
test eax eax +
jz loc_105412B  +
push eax  +
call sub_1053F92  +
and dword_1065CE0 0 +
xor eax eax +
inc eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_1065CD8 +
test eax eax +
jz loc_105414F  +
push eax  +
call sub_1053F92  +
and dword_1065CD8 0 +
push esi  +
push offset dword_1065CD8  +
push offset aSetupapi_ev1  +
push [ebp+arg_0]  +
call sub_1052BCB  +
mov esi eax +
test esi esi +
jz loc_10541C4  +
mov eax dword_1065CDC +
test eax eax +
jz loc_105417E  +
push eax  +
call sub_1053F92  +
and dword_1065CDC 0 +
push offset dword_1065CDC  +
push offset aSetupapi_ev2  +
push [ebp+arg_0]  +
call sub_1052BCB  +
mov esi eax +
test esi esi +
jz loc_10541C4  +
mov eax dword_1065CE0 +
test eax eax +
jz loc_10541AC  +
push eax  +
call sub_1053F92  +
and dword_1065CE0 0 +
push offset dword_1065CE0  +
push offset aSetupapi_ev3  +
push [ebp+arg_0]  +
call sub_1052BCB  +
mov esi eax +
test esi esi +
jnz loc_10541C9  +
call sub_10540E9  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
xor ebx ebx +
cmp [ebp+arg_8] ebx +
jnz loc_1054229  +
call sub_102501E  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov dword ptr [eax] 16h +
call sub_1024FC5  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_10542CA  +
mov eax [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
cmp eax ebx +
jz loc_1054255  +
cmp esi ebx +
jnz loc_1054255  +
call sub_102501E  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov dword ptr [eax] 16h +
call sub_1024FC5  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_10542C9  +
mov [ebp+var_14] 42h +
mov [ebp+var_18] esi +
mov [ebp+var_20] esi +
cmp eax 3FFFFFFFh +
jbe loc_1054272  +
mov [ebp+var_1C] 7FFFFFFFh +
jmp loc_1054277  +
add eax eax +
mov [ebp+var_1C] eax +
push edi  +
push [ebp+arg_10]  +
lea eax [ebp+var_20] +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push eax  +
call sub_1027122  +
add esp 10h +
mov edi eax +
cmp esi ebx +
jz loc_10542C8  +
dec [ebp+var_1C]  +
js loc_10542A2  +
mov eax [ebp+var_20] +
mov [eax] bl +
inc [ebp+var_20]  +
jmp loc_10542AE  +
lea eax [ebp+var_20] +
push eax  +
push ebx  +
call sub_1026F08  +
pop ecx  +
pop ecx  +
dec [ebp+var_1C]  +
js loc_10542BA  +
mov eax [ebp+var_20] +
mov [eax] bl +
jmp loc_10542C6  +
lea eax [ebp+var_20] +
push eax  +
push ebx  +
call sub_1026F08  +
pop ecx  +
pop ecx  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10541F9  +
add esp 14h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
xor esi esi +
xor eax eax +
push edi  +
cmp [ebp+arg_8] esi +
jz loc_10543D9  +
mov ebx [ebp+arg_0] +
cmp ebx esi +
jnz loc_1054335  +
call sub_102501E  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_1024FC5  +
add esp 14h +
mov eax 7FFFFFFFh +
jmp loc_10543D9  +
mov edi [ebp+arg_4] +
cmp edi esi +
jz loc_1054313  +
push [ebp+arg_C]  +
lea ecx [ebp+var_10] +
call sub_102160E  +
mov eax [ebp+var_10] +
cmp [eax+14h] esi +
jnz loc_105438E  +
movzx eax word ptr [ebx] +
cmp ax 41h +
jb loc_1054361  +
cmp ax 5Ah +
ja loc_1054361  +
add eax 20h +
movzx esi ax +
movzx eax word ptr [edi] +
cmp ax 41h +
jb loc_1054376  +
cmp ax 5Ah +
ja loc_1054376  +
add eax 20h +
inc ebx  +
inc ebx  +
inc edi  +
inc edi  +
dec [ebp+arg_8]  +
movzx eax ax +
jz loc_10543C4  +
test si si +
jz loc_10543C4  +
cmp si ax +
jz loc_105434F  +
jmp loc_10543C4  +
lea eax [ebp+var_10] +
push eax  +
movzx eax word ptr [ebx] +
push eax  +
call sub_1029C4A  +
movzx esi ax +
lea eax [ebp+var_10] +
push eax  +
movzx eax word ptr [edi] +
push eax  +
call sub_1029C4A  +
add esp 10h +
inc ebx  +
inc ebx  +
inc edi  +
inc edi  +
dec [ebp+arg_8]  +
movzx eax ax +
jz loc_10543C4  +
test si si +
jz loc_10543C4  +
cmp si ax +
jz loc_105438E  +
movzx ecx ax +
movzx eax si +
sub eax ecx +
cmp [ebp+var_4] 0 +
jz loc_10543D9  +
mov ecx [ebp+var_8] +
and dword ptr [ecx+70h] 0FFFFFFFDh +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
push edi  +
cmp dword_1065630 esi +
jnz loc_1054473  +
xor eax eax +
cmp [ebp+arg_8] esi +
jz loc_1054485  +
mov edi [ebp+arg_0] +
cmp edi esi +
jnz loc_1054425  +
call sub_102501E  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_1024FC5  +
add esp 14h +
mov eax 7FFFFFFFh +
jmp loc_1054485  +
mov edx [ebp+arg_4] +
cmp edx esi +
jz loc_1054406  +
movzx eax word ptr [edi] +
cmp ax 41h +
jb loc_105443E  +
cmp ax 5Ah +
ja loc_105443E  +
add eax 20h +
movzx ecx ax +
movzx eax word ptr [edx] +
cmp ax 41h +
jb loc_1054453  +
cmp ax 5Ah +
ja loc_1054453  +
add eax 20h +
inc edi  +
inc edi  +
inc edx  +
inc edx  +
dec [ebp+arg_8]  +
movzx eax ax +
jz loc_1054469  +
cmp cx si +
jz loc_1054469  +
cmp cx ax +
jz loc_105442C  +
movzx edx ax +
movzx eax cx +
sub eax edx +
jmp loc_1054485  +
push esi  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10542F4  +
add esp 10h +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_4] +
push esi  +
lea esi [eax-1] +
imul esi [ebp+arg_C] +
push edi  +
xor edi edi +
add esi ecx +
mov [ebp+arg_4] ecx +
cmp ecx edi +
jnz loc_10544CD  +
cmp eax edi +
jz loc_10544CD  +
call sub_102501E  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
mov dword ptr [eax] 16h +
call sub_1024FC5  +
add esp 14h +
xor eax eax +
jmp loc_10544DF  +
cmp [ebp+arg_C] edi +
jbe loc_10544B1  +
cmp [ebp+arg_10] edi +
jz loc_10544B1  +
push ebx  +
cmp ecx esi +
jbe loc_10544E5  +
xor eax eax +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn   +
xor edi edi +
mov ebx eax +
shr ebx 1 +
jz loc_1054536  +
mov [ebp+arg_8] eax +
and [ebp+arg_8] 1 +
mov eax ebx +
jnz loc_10544F9  +
lea eax [ebx-1] +
imul eax [ebp+arg_C] +
add eax [ebp+arg_4] +
mov edi eax +
push edi  +
push [ebp+arg_0]  +
call [ebp+arg_10]  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1054532  +
jge loc_1054521  +
sub edi [ebp+arg_C] +
cmp [ebp+arg_8] 0 +
mov esi edi +
jnz loc_1054529  +
lea eax [ebx-1] +
jmp loc_105452B  +
mov eax [ebp+arg_C] +
add edi eax +
mov [ebp+arg_4] edi +
mov eax ebx +
cmp [ebp+arg_4] esi +
jbe loc_10544E3  +
jmp loc_10544DC  +
mov eax edi +
jmp loc_10544DE  +
cmp eax edi +
jz loc_10544DC  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call [ebp+arg_10]  +
neg eax  +
sbb eax eax +
pop ecx  +
not eax  +
and eax [ebp+arg_4] +
pop ecx  +
jmp loc_10544DE  +
***
mov edi edi +
push ebp  +
mov ebp esp +
call sub_1024981  +
mov edx [ebp+arg_0] +
lea ecx [eax+80h] +
mov eax [ecx] +
mov [ecx] edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov dx [ebp+arg_4] +
jmp loc_1054588  +
cmp cx dx +
jz loc_1054597  +
inc eax  +
inc eax  +
movzx ecx word ptr [eax] +
test cx cx +
jnz loc_1054581  +
cmp [eax] dx +
jz loc_1054597  +
xor eax eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx eax +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10545A8  +
mov cx [ebp+arg_4] +
dec eax  +
dec eax  +
cmp eax edx +
jz loc_10545C1  +
cmp [eax] cx +
jnz loc_10545B6  +
cmp [eax] cx +
jz loc_10545C8  +
xor eax eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
movzx edx word ptr [eax] +
push ebx  +
push esi  +
push edi  +
test dx dx +
jz loc_105460B  +
mov ebx [ebp+arg_4] +
movzx edi word ptr [ebx] +
mov esi ebx +
test di di +
jz loc_1054601  +
movzx ecx di +
cmp cx dx +
jz loc_105460D  +
inc esi  +
inc esi  +
movzx ecx word ptr [esi] +
test cx cx +
jnz loc_10545F2  +
inc eax  +
inc eax  +
movzx edx word ptr [eax] +
test dx dx +
jnz loc_10545E8  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp sub_10225EB  +
***
cmp dword_1066D04 0 +
jz sub_1054666  +
push ebp  +
mov ebp esp +
sub esp 8 +
and esp 0FFFFFFF8h +
fstp  qword ptr [esp] +
cvttsd2si eax qword ptr [esp] +
leave   +
retn   +
***
sub esp 20h +
and esp 0FFFFFFF0h +
fld  st +
fst  [esp+20h+var_8] +
fistp  [esp+20h+var_10] +
fild  [esp+20h+var_10] +
mov edx [esp+20h+var_8] +
mov eax dword ptr [esp+20h+var_10] +
test eax eax +
jz loc_10546C5  +
fsubp st(1) st +
test edx edx +
jns loc_10546AD  +
fstp  [esp+20h+var_20] +
mov ecx [esp+20h+var_20] +
xor ecx 80000000h +
add ecx 7FFFFFFFh +
adc eax 0 +
mov edx dword ptr [esp+20h+var_10+4] +
adc edx 0 +
jmp locret_10546D9  +
fstp  [esp+20h+var_20] +
mov ecx [esp+20h+var_20] +
add ecx 7FFFFFFFh +
sbb eax 0 +
mov edx dword ptr [esp+20h+var_10+4] +
sbb edx 0 +
jmp locret_10546D9  +
mov edx dword ptr [esp+20h+var_10+4] +
test edx 7FFFFFFFh +
jnz loc_1054689  +
fstp  [esp+20h+var_8] +
fstp  [esp+20h+var_8] +
leave   +
retn   +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105A9DC +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105AA20 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105AA4C +
jmp sub_1021B35  +
***
lea ecx [ebp-10h] +
jmp sub_1015174  +
***
lea ecx [ebp-14h] +
jmp sub_1015174  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105AA80 +
jmp sub_1021B35  +
***
lea ecx [ebp-10h] +
jmp sub_1015174  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-5Ch] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105AAAC +
jmp sub_1021B35  +
***
lea ecx [ebp-220h] +
jmp sub_1015174  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-228h] +
xor ecx eax +
call sub_1021557  +
mov ecx [edx-4] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105AAD8 +
jmp sub_1021B35  +
***
lea ecx [ebp-220h] +
jmp sub_1015174  +
***
mov eax [ebp-21Ch] +
and eax 1 +
jz locret_1054874  +
and dword ptr [ebp-21Ch] 0FFFFFFFEh +
lea ecx [ebp-224h] +
jmp sub_1015174  +
***
retn   +
***
mov eax [ebp-21Ch] +
and eax 2 +
jz locret_1054896  +
and dword ptr [ebp-21Ch] 0FFFFFFFDh +
lea ecx [ebp-224h] +
jmp sub_1015174  +
***
retn   +
***
mov eax [ebp-21Ch] +
and eax 4 +
jz locret_10548B8  +
and dword ptr [ebp-21Ch] 0FFFFFFFBh +
lea ecx [ebp-224h] +
jmp sub_1015174  +
***
retn   +
***
mov eax [ebp-21Ch] +
and eax 8 +
jz locret_10548DA  +
and dword ptr [ebp-21Ch] 0FFFFFFF7h +
lea ecx [ebp-228h] +
jmp sub_1015174  +
***
retn   +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-22Ch] +
xor ecx eax +
call sub_1021557  +
mov ecx [edx-4] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105AAFC +
jmp sub_1021B35  +
***
lea ecx [ebp-10h] +
jmp sub_1015174  +
***
lea ecx [ebp-14h] +
jmp sub_1015174  +
***
lea ecx [ebp-18h] +
jmp sub_1015174  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105AB60 +
jmp sub_1021B35  +
***
lea ecx [ebp-10h] +
jmp sub_1015174  +
***
lea ecx [ebp-18h] +
jmp sub_1015174  +
***
lea ecx [ebp-14h] +
jmp sub_1015174  +
***
lea ecx [ebp+8] +
jmp sub_1015174  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105ABA4 +
jmp sub_1021B35  +
***
lea ecx [ebp-10h] +
jmp sub_1015174  +
***
lea ecx [ebp-14h] +
jmp sub_1015174  +
***
lea ecx [ebp-1Ch] +
jmp sub_1015174  +
***
lea ecx [ebp-18h] +
jmp sub_1015174  +
***
lea ecx [ebp+8] +
jmp sub_1015174  +
***
lea ecx [ebp+0Ch] +
jmp sub_1015174  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105ABC8 +
jmp sub_1021B35  +
***
lea ecx [ebp-10h] +
jmp sub_1015174  +
***
lea ecx [ebp-1Ch] +
jmp sub_1015174  +
***
lea ecx [ebp-18h] +
jmp sub_1015174  +
***
lea ecx [ebp-14h] +
jmp sub_1015174  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105AC3C +
jmp sub_1021B35  +
***
lea ecx [ebp-10h] +
jmp sub_1015174  +
***
lea ecx [ebp-14h] +
jmp sub_1015174  +
***
lea ecx [ebp-20h] +
jmp sub_1015174  +
***
lea ecx [ebp-1Ch] +
jmp sub_1015174  +
***
lea ecx [ebp-18h] +
jmp sub_1015174  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105AC60 +
jmp sub_1021B35  +
***
lea ecx [ebp-10h] +
jmp sub_1015174  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105ACB4 +
jmp sub_1021B35  +
***
lea ecx [ebp-130h] +
jmp sub_1015174  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-134h] +
xor ecx eax +
call sub_1021557  +
mov ecx [edx-4] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105ACE0 +
jmp sub_1021B35  +
***
lea ecx [ebp-14h] +
jmp sub_1015174  +
***
lea ecx [ebp-18h] +
jmp sub_1015174  +
***
lea ecx [ebp-3Ch] +
jmp sub_1014FBC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-40h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105AD1C +
jmp sub_1021B35  +
***
lea ecx [ebp-10h] +
jmp sub_1015174  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105AD48 +
jmp sub_1021B35  +
***
lea ecx [ebp-10h] +
jmp sub_1015174  +
***
lea ecx [ebp+8] +
jmp sub_1015174  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105AD7C +
jmp sub_1021B35  +
***
lea ecx [ebp-10h] +
jmp sub_1015174  +
***
lea ecx [ebp+8] +
jmp sub_1015174  +
***
lea ecx [ebp-18h] +
jmp sub_1015174  +
***
lea ecx [ebp-14h] +
jmp sub_1015174  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105ADC0 +
jmp sub_1021B35  +
***
lea ecx [ebp+8] +
jmp sub_1015174  +
***
lea ecx [ebp+0Ch] +
jmp sub_1015174  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105ADF4 +
jmp sub_1021B35  +
***
lea ecx [ebp-2Ch] +
jmp loc_1015120  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-30h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105AE20 +
jmp sub_1021B35  +
***
lea ecx [ebp-20h] +
jmp sub_1020416  +
***
lea ecx [ebp-10h] +
jmp sub_1015174  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105AE54 +
jmp sub_1021B35  +
***
lea ecx [ebp-10h] +
jmp sub_1015174  +
***
lea ecx [ebp-60h] +
jmp sub_1014FBC  +
***
lea ecx [ebp-48h] +
jmp sub_1014FBC  +
***
lea ecx [ebp-14h] +
jmp sub_1015174  +
***
lea ecx [ebp-1Ch] +
jmp sub_1015174  +
***
lea ecx [ebp-18h] +
jmp sub_1015174  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-64h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105AE78 +
jmp sub_1021B35  +
***
lea ecx [ebp-34h] +
jmp sub_1014FBC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-38h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105AEDC +
jmp sub_1021B35  +
***
lea ecx [ebp-28Ch] +
jmp sub_1015183  +
***
lea ecx [ebp-22Ch] +
jmp sub_1015174  +
***
lea ecx [ebp-230h] +
jmp sub_1015174  +
***
lea ecx [ebp-220h] +
jmp sub_1015174  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-290h] +
xor ecx eax +
call sub_1021557  +
mov ecx [edx-4] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105AF20 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105AF4C +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-94h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105AF88 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105AFB4 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-278h] +
xor ecx eax +
call sub_1021557  +
mov ecx [edx-4] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105AFF0 +
jmp sub_1021B35  +
***
pop ecx  +
pop ecx  +
retn   +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105B01C +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-74h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105B060 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-7Ch] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105B094 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105B0D8 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105B114 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105B138 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105B18C +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-30h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105B1F0 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-48h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105B214 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105B2B8 +
jmp sub_1021B35  +
***
retn   +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105B2E4 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105B320 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105B35C +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105B398 +
jmp sub_1021B35  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
int 3  +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105B3BC +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105B418 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-3Ch] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105B45C +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-38h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105B4A0 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105B4CC +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-38h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105B510 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105B53C +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105B570 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-60h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105B594 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105B62C +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-50h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105B650 +
jmp sub_1021B35  +
***
jmp sub_1015174  +
***
mov ecx offset unk_1064858 +
jmp sub_1015174  +
***
mov ecx offset unk_106485C +
jmp sub_1015174  +
***
mov ecx offset unk_1064860 +
jmp sub_1015174  +
***
mov ecx offset unk_1064864 +
jmp sub_1015174  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105B69C +
jmp sub_1021B35  +
***
jmp sub_1015174  +
***
mov ecx offset unk_1064870 +
jmp sub_1015174  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105B6F8 +
jmp sub_1021B35  +
***
jmp sub_1015174  +
***
mov ecx offset unk_106487C +
jmp sub_1015174  +
***
mov ecx offset unk_1064880 +
jmp sub_1015174  +
***
mov ecx offset unk_1064884 +
jmp sub_1015174  +
***
mov ecx offset unk_1064888 +
jmp sub_1015174  +
***
mov ecx offset unk_106488C +
jmp sub_1015174  +
***
mov ecx offset unk_1064890 +
jmp sub_1015174  +
***
mov ecx offset unk_1064894 +
jmp sub_1015174  +
***
mov ecx offset unk_1064898 +
jmp sub_1015174  +
***
mov ecx offset unk_106489C +
jmp sub_1015174  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105B71C +
jmp sub_1021B35  +
***
jmp sub_1015174  +
***
mov ecx offset unk_10648A8 +
jmp sub_1015174  +
***
mov ecx offset unk_10648AC +
jmp sub_1015174  +
***
mov ecx offset unk_10648B0 +
jmp sub_1015174  +
***
mov ecx offset unk_10648B4 +
jmp sub_1015174  +
***
mov ecx offset unk_10648B8 +
jmp sub_1015174  +
***
mov ecx offset unk_10648BC +
jmp sub_1015174  +
***
mov ecx offset unk_10648C0 +
jmp sub_1015174  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105B790 +
jmp sub_1021B35  +
***
jmp sub_1015174  +
***
mov ecx offset unk_10648CC +
jmp sub_1015174  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105B804 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105B830 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105B864 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105B888 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105B8EC +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105B918 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-48h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105B93C +
jmp sub_1021B35  +
***
lea ecx [ebp-14h] +
jmp sub_1015174  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105B9A0 +
jmp sub_1021B35  +
***
lea ecx [ebp+18h] +
jmp sub_1015174  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105B9CC +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105BA00 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105BA2C +
jmp sub_1021B35  +
***
lea ecx [ebp-1Ch] +
jmp sub_10151BA  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105BA58 +
jmp sub_1021B35  +
***
lea ecx [ebp+8] +
jmp sub_1015174  +
***
lea ecx [ebp-10h] +
jmp sub_1015174  +
***
lea ecx [ebp+10h] +
jmp sub_1015174  +
***
lea ecx [ebp+0Ch] +
jmp sub_1015174  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105BA9C +
jmp sub_1021B35  +
***
lea ecx [ebp-34h] +
jmp sub_10151BA  +
***
lea ecx [ebp-20h] +
jmp sub_1015174  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-38h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105BAE0 +
jmp sub_1021B35  +
***
lea ecx [ebp-20h] +
jmp sub_1015174  +
***
lea ecx [ebp-18h] +
jmp sub_1015174  +
***
lea ecx [ebp-24h] +
jmp sub_1015174  +
***
lea ecx [ebp-28h] +
jmp sub_1015174  +
***
lea ecx [ebp-2Ch] +
jmp sub_1015174  +
***
lea ecx [ebp-14h] +
jmp sub_1015174  +
***
lea ecx [ebp-10h] +
jmp sub_1015174  +
***
lea ecx [ebp-1Ch] +
jmp sub_1015174  +
***
lea ecx [ebp-30h] +
jmp sub_1015174  +
***
lea ecx [ebp-30h] +
jmp sub_1015174  +
***
lea ecx [ebp-34h] +
jmp sub_1015174  +
***
lea ecx [ebp-34h] +
jmp sub_1015174  +
***
lea ecx [ebp-30h] +
jmp sub_1015174  +
***
lea ecx [ebp-34h] +
jmp sub_1015174  +
***
mov ecx [ebp-34h] +
jmp sub_1015174  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-3Ch] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105BB04 +
jmp sub_1021B35  +
***
lea ecx [ebp-28h] +
jmp sub_1015174  +
***
lea ecx [ebp-10h] +
jmp sub_1015174  +
***
lea ecx [ebp-24h] +
jmp sub_1015174  +
***
lea ecx [ebp-20h] +
jmp sub_1015174  +
***
lea ecx [ebp-1Ch] +
jmp sub_1015174  +
***
lea ecx [ebp-18h] +
jmp sub_1015174  +
***
lea ecx [ebp-14h] +
jmp sub_1015174  +
***
mov ecx [ebp-30h] +
jmp sub_1015174  +
***
mov ecx [ebp-34h] +
jmp sub_1015174  +
***
mov ecx [ebp-38h] +
jmp sub_1015174  +
***
mov ecx [ebp-3Ch] +
jmp sub_1015174  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-44h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105BBA0 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-4D0h] +
xor ecx eax +
call sub_1021557  +
mov ecx [edx-4] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105BC1C +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-48h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105BD00 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-290h] +
xor ecx eax +
call sub_1021557  +
mov ecx [edx-4] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105BD64 +
jmp sub_1021B35  +
***
sti   +
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
nop   +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105BDD0 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0A0h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105BE3C +
jmp sub_1021B35  +
***
cmc   +
sti   +
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
int 3  +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105BED0 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105BF04 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105BF48 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105BF8C +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105BFB8 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-34h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105BFF4 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105C400 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-48h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105C7A8 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-700h] +
xor ecx eax +
call sub_1021557  +
mov ecx [edx-8] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105C818 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105C84C +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105C878 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105C89C +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105C8F8 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105C954 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105C978 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105C9C4 +
jmp sub_1021B35  +
***
icebp   +
sti   +
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
mov ah [ebp+esi*8-1] +
push dword ptr [ebx]  +
enter 34E8h 0B5h +
cld   +
dec dword ptr [ebx-37CC03B6h]  +
call sub_1021557  +
mov eax offset dword_105CA40 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105CA74 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105CAA8 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-30h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105CACC +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105CB20 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105CBA0 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10Ch] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105CBDC +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105CC10 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105CC3C +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10Ch] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105CC60 +
jmp sub_1021B35  +
***
lea ecx [ebp+8] +
jmp sub_1015174  +
***
mov ecx [ebp+0Ch] +
jmp sub_1015174  +
***
mov ecx [ebp+0Ch] +
jmp sub_1015174  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105CCFC +
jmp sub_1021B35  +
***
lea ecx [ebp-10h] +
jmp sub_1015174  +
***
lea ecx [ebp-18h] +
jmp sub_1015174  +
***
lea ecx [ebp-1Ch] +
jmp sub_1015174  +
***
lea ecx [ebp-14h] +
jmp sub_1015174  +
***
lea ecx [ebp-100h] +
jmp sub_1040358  +
***
lea ecx [ebp+8] +
jmp sub_1015174  +
***
lea ecx [ebp-20h] +
jmp sub_1015174  +
***
lea ecx [ebp+8] +
jmp sub_1015174  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-104h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105CD20 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-118h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105CD84 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-118h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105CDE0 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0FCh] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105CE34 +
jmp sub_1021B35  +
***
lea ecx [ebp-13Ch] +
jmp sub_1040358  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-140h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105CE80 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-38h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105CEE4 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105CF70 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-120h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105CF94 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-138h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105D008 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-120h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105D07C +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-164h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105D150 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-110h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105D1EC +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105D290 +
jmp sub_1021B35  +
***
mov edx [esp+arg_4] +
lea eax [edx+0Ch] +
mov ecx [edx-10h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105D2BC +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105D2F8 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-44h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105D324 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105D350 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105D384 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105D3A8 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105D444 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105D468 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105D52C +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105D550 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105D5B4 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-44h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105D5D8 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105D654 +
jmp sub_1021B35  +
***
sti   +
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
lods   +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105D678 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-3Ch] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105D72C +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105D7A0 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105D7E4 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105D818 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105D83C +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105D8B0 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105D8E4 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105D918 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105D944 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105D970 +
jmp sub_1021B35  +
***
retn   +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105D9D0 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105D9F4 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0DCh] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105DA70 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-74h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105DB3C +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105DBF0 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105DC34 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105DC58 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105DCAC +
jmp sub_1021B35  +
***
sti   +
inc ebx  +
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105DCD8 +
jmp sub_1021B35  +
***
retn   +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105DD38 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105DD80 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105DDF4 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105DE20 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105DE44 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-78h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105DEB0 +
jmp sub_1021B35  +
***
lea ecx [ebp-18h] +
jmp sub_1015174  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-34h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105DFA4 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105E010 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105E09C +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105E110 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105E15C +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105E21C +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105E240 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105E2CC +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105E2F0 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-48h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105E374 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105E450 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105E474 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105E4D8 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105E4FC +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105E548 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-38h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105E5AC +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105E620 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105E674 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105E6C0 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105E76C +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105E790 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-38h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105E7DC +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-23Ch] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105E8B8 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105E910 +
jmp sub_1021B35  +
***
sti   +
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
mov bl al +
idiv  edi +
push dword ptr [ebx]  +
enter 0FFFFA9E8h 97h +
cld   +
dec dword ptr [ebx-37CC03B6h]  +
call sub_1021557  +
mov eax offset dword_105E93C +
jmp sub_1021B35  +
***
sar ebx cl +
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
mov dl [eax+33FFFFFDh] +
enter 6CE8h 97h +
cld   +
dec dword ptr [ebx-37CC03B6h]  +
call sub_1021557  +
mov eax offset dword_105E970 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105E99C +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105E9D0 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105EA04 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105EA30 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105EA6C +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105EAA0 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-414h] +
xor ecx eax +
call sub_1021557  +
mov ecx [edx-4] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105EAC4 +
jmp sub_1021B35  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
mov ah [ebx+esi*8-37CC0001h] +
call sub_1021557  +
mov ecx [edx-4] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105EB30 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105EB64 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0A80h] +
xor ecx eax +
call sub_1021557  +
mov ecx [edx-4] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105EB88 +
jmp sub_1021B35  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
int 3  +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105EBF4 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-250h] +
xor ecx eax +
call sub_1021557  +
mov ecx [edx-4] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105EC18 +
jmp sub_1021B35  +
***
pop ecx  +
pop ecx  +
retn   +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105ECA8 +
jmp sub_1021B35  +
***
sar bl 1 +
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
mov esp 0D7E8C833h +
xchg eax ebx +
cld   +
dec dword ptr [ebx-37CC03B6h]  +
call sub_1021557  +
mov eax offset dword_105ECCC +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105ED38 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-44h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105ED5C +
jmp sub_1021B35  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
nop   +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105EDF0 +
jmp sub_1021B35  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
mov esp 75E8C833h +
xchg eax edx +
cld   +
dec dword ptr [ebx-37CC03B6h]  +
call sub_1021557  +
mov eax offset dword_105EE64 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105EE88 +
jmp sub_1021B35  +
***
sti   +
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
mov al [eax+33FFFFEBh] +
enter 0FFFFB9E8h 91h +
cld   +
dec dword ptr [ebx-37CC03B6h]  +
call sub_1021557  +
mov eax offset dword_105EEE4 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-74h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105EF30 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105EFAC +
jmp sub_1021B35  +
***
sti   +
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
mov dh [ebp+edi*8-1] +
push dword ptr [ebx]  +
enter 0FFFFBDE8h 90h +
cld   +
dec dword ptr [ebx-37CC03B6h]  +
call sub_1021557  +
mov eax offset dword_105EFD0 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105F078 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105F0B4 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105F0E0 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105F11C +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105F158 +
jmp sub_1021B35  +
***
retn   +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105F18C +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105F1C8 +
jmp sub_1021B35  +
***
retn   +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105F20C +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105F240 +
jmp sub_1021B35  +
***
inc ebx  +
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105F284 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105F2C8 +
jmp sub_1021B35  +
***
mov edx [esp+arg_4] +
lea eax [edx+0Ch] +
mov ecx [edx-220h] +
xor ecx eax +
call sub_1021557  +
mov ecx [edx-4] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105F2F4 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105F318 +
jmp sub_1021B35  +
***
retn   +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-30h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105F3B4 +
jmp sub_1021B35  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
sal byte ptr [ebx] 0C8h +
call sub_1021557  +
mov eax offset dword_105F408 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-78h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105F4A4 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105F5A8 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105F5DC +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-30h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105F628 +
jmp sub_1021B35  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
sal byte ptr [ebx] 0C8h +
call sub_1021557  +
mov eax offset dword_105F688 +
jmp sub_1021B35  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
pushf   +
xor ecx eax +
call sub_1021557  +
mov ecx [edx-4] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105F6C4 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-38h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105F6E8 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-3Ch] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105F898 +
jmp sub_1021B35  +
***
retn   +
***
sti   +
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
nop   +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105F914 +
jmp sub_1021B35  +
***
retn 0FFFBh  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105FA94 +
jmp sub_1021B35  +
***
retn 0FFFBh  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105FB00 +
jmp sub_1021B35  +
***
retn 0FFFBh  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105FB54 +
jmp sub_1021B35  +
***
sar ebx 0FFh +
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-38h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105FBB0 +
jmp sub_1021B35  +
***
sti   +
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
int 3  +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105FBF8 +
jmp sub_1021B35  +
***
sti   +
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
int 3  +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105FC98 +
jmp sub_1021B35  +
***
sti   +
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
int 3  +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105FD38 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105FDBC +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105FDF8 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105FE24 +
jmp sub_1021B35  +
***
sti   +
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
mov esp 0B8E8C833h +
cmp esp 0FFFFFFFFh +
mov eax offset dword_105FE48 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105FEA4 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-3Ch] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105FEC8 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-78h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105FF24 +
jmp sub_1021B35  +
***
sti   +
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
int 3  +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_105FFD0 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-3Ch] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_1060014 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-44h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_1060038 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_1060084 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_10600D0 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_106013C +
jmp sub_1021B35  +
***
sti   +
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
mov al [eax] +
idiv  bh +
push dword ptr [ebx]  +
enter 0FFFFC1E8h 80h +
cld   +
dec dword ptr [ebx-37CC03B6h]  +
call sub_1021557  +
mov eax offset dword_1060180 +
jmp sub_1021B35  +
***
mov esp 548BFFFBh +
and al 8 +
lea eax [edx+0Ch] +
mov ecx [edx-60h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_10601C8 +
jmp sub_1021B35  +
***
sti   +
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
mov bh [eax+33FFFFFDh] +
enter 2DE8h 7Fh +
cld   +
dec dword ptr [ebx-37CC07B6h]  +
call sub_1021557  +
mov eax offset dword_1060280 +
jmp sub_1021B35  +
***
mov edx 548BFFFBh +
and al 8 +
lea eax [edx+0Ch] +
mov ecx [edx-70h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_1060388 +
jmp sub_1021B35  +
***
mov edx 548BFFFBh +
and al 8 +
lea eax [edx+0Ch] +
mov ecx [edx-48h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_106046C +
jmp sub_1021B35  +
***
mov edx 548BFFFBh +
and al 8 +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_10604D8 +
jmp sub_1021B35  +
***
mov ecx 548BFFFBh +
and al 8 +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_106050C +
jmp sub_1021B35  +
***
mov ecx 548BFFFBh +
and al 8 +
lea eax [edx+0Ch] +
mov ecx [edx-40h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_1060530 +
jmp sub_1021B35  +
***
mov ecx 548BFFFBh +
and al 8 +
lea eax [edx+0Ch] +
mov ecx [edx-3Ch] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_106059C +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-90h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_10605F8 +
jmp sub_1021B35  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
sal byte ptr [ebx] 0C8h +
call sub_1021557  +
mov eax offset dword_10606A4 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-284h] +
xor ecx eax +
call sub_1021557  +
mov ecx [edx-4] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_10606F8 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_1060754 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_1060788 +
jmp sub_1021B35  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
sal byte ptr [ebx] 0C8h +
call sub_1021557  +
mov eax offset dword_10607AC +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2A8h] +
xor ecx eax +
call sub_1021557  +
mov ecx [edx-4] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_1060800 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-4F0h] +
xor ecx eax +
call sub_1021557  +
mov ecx [edx-4] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_1060884 +
jmp sub_1021B35  +
***
lea ecx [ebp-14h] +
jmp sub_1015174  +
***
lea ecx [ebp-10h] +
jmp sub_1015174  +
***
lea ecx [ebp-1Ch] +
jmp sub_1015174  +
***
lea ecx [ebp-18h] +
jmp sub_1015174  +
***
lea ecx [ebp-1Ch] +
jmp sub_1015174  +
***
lea ecx [ebp+8] +
jmp sub_1015174  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_1060900 +
jmp sub_1021B35  +
***
lea ecx [ebp-10h] +
jmp sub_1015174  +
***
lea ecx [ebp+8] +
jmp sub_1015174  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_1060964 +
jmp sub_1021B35  +
***
lea ecx [ebp-14h] +
jmp sub_1015174  +
***
lea ecx [ebp+8] +
jmp sub_1015174  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_1060998 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_10609C4 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_10609F0 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_1060A24 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_1060A58 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_1060A84 +
jmp sub_1021B35  +
***
push dword ptr [ebp-10h]  +
push dword ptr [ebp-14h]  +
call nullsub_1  +
pop ecx  +
pop ecx  +
retn   +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_1060AB0 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_1060AE4 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-58h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_1060B10 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-30h] +
xor ecx eax +
call sub_1021557  +
mov ecx [edx-4] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_1060B3C +
jmp sub_1021B35  +
***
lea ecx [ebp-18h] +
jmp sub_1015174  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-30h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_1060B68 +
jmp sub_1021B35  +
***
sti   +
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
mov ch [eax+33FFFFF7h] +
enter 0FFFFE5E8h 76h +
cld   +
dec dword ptr [ebx-37CC03B6h]  +
call sub_1021557  +
mov eax offset dword_1060BAC +
jmp sub_1021B35  +
***
sti   +
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
mov al [ebp+edi*8-1] +
push dword ptr [ebx]  +
enter 55E8h 76h +
cld   +
dec dword ptr [ebx-37CC03B6h]  +
call sub_1021557  +
mov eax offset dword_1060BD0 +
jmp sub_1021B35  +
***
mov dl 0FBh +
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
cwde   +
xor ecx eax +
call sub_1021557  +
mov ecx [edx-4] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_1060C54 +
jmp sub_1021B35  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
sal byte ptr [ebx] 0C8h +
call sub_1021557  +
mov eax offset dword_1060C98 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_1060CCC +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_1060D08 +
jmp sub_1021B35  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
mov al [ebp+edi*8-37CC0001h] +
call sub_1021557  +
mov ecx [edx-4] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_1060D2C +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_1060DA0 +
jmp sub_1021B35  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_1021557  +
mov eax offset dword_1060DDC +
jmp sub_1021B35  +
***
push offset dword_1064BA8  +
mov ecx offset lptstrFilename +
call sub_1015076  +
push offset loc_105A70B  +
call sub_1022394  +
pop ecx  +
retn   +
***
mov ecx offset unk_1064714 +
call sub_101FDA8  +
push offset byte_105A6FC  +
call sub_1022394  +
pop ecx  +
retn   +
***
push offset word_10022EC  +
mov ecx offset lpString +
call sub_10161A7  +
push offset loc_105A71E  +
call sub_1022394  +
pop ecx  +
retn   +
***
push offset dword_1064BA8  +
mov ecx offset dword_106478C +
call sub_1015076  +
push offset loc_105A74F  +
call sub_1022394  +
pop ecx  +
retn   +
***
push offset dword_1064BA8  +
mov ecx offset dword_1064790 +
call sub_1015076  +
push offset loc_105A762  +
call sub_1022394  +
pop ecx  +
retn   +
***
push offset dword_1064BA8  +
mov ecx offset dword_1064794 +
call sub_1015076  +
push offset loc_105A775  +
call sub_1022394  +
pop ecx  +
retn   +
***
push offset dword_1064BA8  +
mov ecx offset dword_1064798 +
call sub_1015076  +
push offset loc_105A788  +
call sub_1022394  +
pop ecx  +
retn   +
***
push offset dword_1064BA8  +
mov ecx offset dword_106479C +
call sub_1015076  +
push offset loc_105A79B  +
call sub_1022394  +
pop ecx  +
retn   +
***
push offset dword_1064BA8  +
mov ecx offset dword_10647A0 +
call sub_1015076  +
push offset loc_105A7AE  +
call sub_1022394  +
pop ecx  +
retn   +
***
push offset dword_1064BA8  +
mov ecx offset dword_10647A4 +
call sub_1015076  +
push offset loc_105A7C1  +
call sub_1022394  +
pop ecx  +
retn   +
***
push offset dword_1064BA8  +
mov ecx offset dword_10647A8 +
call sub_1015076  +
push offset loc_105A7D4  +
call sub_1022394  +
pop ecx  +
retn   +
***
push offset dword_1064BA8  +
mov ecx offset dword_10647AC +
call sub_1015076  +
push offset loc_105A7E7  +
call sub_1022394  +
pop ecx  +
retn   +
***
push offset dword_1064BA8  +
mov ecx offset dword_10647B0 +
call sub_1015076  +
push offset loc_105A7FA  +
call sub_1022394  +
pop ecx  +
retn   +
***
push offset dword_1064BA8  +
mov ecx offset dword_10647B4 +
call sub_1015076  +
push offset loc_105A80D  +
call sub_1022394  +
pop ecx  +
retn   +
***
push offset dword_1064BA8  +
mov ecx offset dword_10647B8 +
call sub_1015076  +
push offset loc_105A820  +
call sub_1022394  +
pop ecx  +
retn   +
***
push offset byte_105A87F  +
call sub_1022394  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-4] +
push eax  +
mov ecx offset dword_106484C +
call sub_101AA95  +
push offset loc_105A88E  +
call sub_1022394  +
pop ecx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-4] +
push eax  +
mov ecx offset dword_1064850 +
call sub_101AA95  +
push offset loc_105A89D  +
call sub_1022394  +
pop ecx  +
leave   +
retn   +
***
push 0  +
mov eax offset loc_105540F +
call sub_1021EB9  +
push offset aLanguage  +
mov ecx offset unk_1064854 +
call sub_10161A7  +
and dword ptr [ebp-4] 0 +
push offset aEula  +
mov ecx offset unk_1064858 +
call sub_10161A7  +
push offset aSearch  +
mov ecx offset unk_106485C +
mov byte ptr [ebp-4] 1 +
call sub_10161A7  +
push offset aSubdirectory  +
mov ecx offset unk_1064860 +
mov byte ptr [ebp-4] 2 +
call sub_10161A7  +
push offset aGroup  +
mov ecx offset unk_1064864 +
mov byte ptr [ebp-4] 3 +
call sub_10161A7  +
push offset aPackage  +
mov ecx offset unk_1064868 +
mov byte ptr [ebp-4] 4 +
call sub_10161A7  +
push offset loc_105A8AC  +
call sub_1022394  +
pop ecx  +
call sub_1021FA5  +
retn   +
***
push 0  +
mov eax offset loc_1055443 +
call sub_1021EB9  +
push offset aCode  +
mov ecx offset unk_106486C +
call sub_10161A7  +
and dword ptr [ebp-4] 0 +
push offset aType  +
mov ecx offset unk_1064870 +
call sub_10161A7  +
push offset aPath  +
mov ecx offset unk_1064874 +
mov byte ptr [ebp-4] 1 +
call sub_10161A7  +
push offset loc_105A8C5  +
call sub_1022394  +
pop ecx  +
call sub_1021FA5  +
retn   +
***
push 0  +
mov eax offset loc_10554C7 +
call sub_1021EB9  +
push offset aQuietinstall  +
mov ecx offset unk_1064878 +
call sub_10161A7  +
and dword ptr [ebp-4] 0 +
push offset aPromptifdriver  +
mov ecx offset unk_106487C +
call sub_10161A7  +
push offset aForceifdriveri  +
mov ecx offset unk_1064880 +
mov byte ptr [ebp-4] 1 +
call sub_10161A7  +
push offset aInstallallorno  +
mov ecx offset unk_1064884 +
mov byte ptr [ebp-4] 2 +
call sub_10161A7  +
push offset aSuppressaddrem  +
mov ecx offset unk_1064888 +
mov byte ptr [ebp-4] 3 +
call sub_10161A7  +
push offset aEnablenotliste  +
mov ecx offset unk_106488C +
mov byte ptr [ebp-4] 4 +
call sub_10161A7  +
push offset aScanhardware  +
mov ecx offset unk_1064890 +
mov byte ptr [ebp-4] 5 +
call sub_10161A7  +
push offset aLegacymode  +
mov ecx offset unk_1064894 +
mov byte ptr [ebp-4] 6 +
call sub_10161A7  +
push offset aSuppresswizard  +
mov ecx offset unk_1064898 +
mov byte ptr [ebp-4] 7 +
call sub_10161A7  +
push offset aDeletebinaries  +
mov ecx offset unk_106489C +
mov byte ptr [ebp-4] 8 +
call sub_10161A7  +
push offset aScanhardwaredi  +
mov ecx offset unk_10648A0 +
mov byte ptr [ebp-4] 9 +
call sub_10161A7  +
push offset loc_105A8DE  +
call sub_1022394  +
pop ecx  +
call sub_1021FA5  +
retn   +
***
push 0  +
mov eax offset loc_1055537 +
call sub_1021EB9  +
push offset aDpinsttitle  +
mov ecx offset unk_10648A4 +
call sub_10161A7  +
and dword ptr [ebp-4] 0 +
push offset aWelcometitle  +
mov ecx offset unk_10648A8 +
call sub_10161A7  +
push offset aWelcomeintro  +
mov ecx offset unk_10648AC +
mov byte ptr [ebp-4] 1 +
call sub_10161A7  +
push offset aInstallheadert  +
mov ecx offset unk_10648B0 +
mov byte ptr [ebp-4] 2 +
call sub_10161A7  +
push offset aEulaheadertitl  +
mov ecx offset unk_10648B4 +
mov byte ptr [ebp-4] 3 +
call sub_10161A7  +
push offset aEulayesbutton  +
mov ecx offset unk_10648B8 +
mov byte ptr [ebp-4] 4 +
call sub_10161A7  +
push offset aEulanobutton  +
mov ecx offset unk_10648BC +
mov byte ptr [ebp-4] 5 +
call sub_10161A7  +
push offset aFinishtitle  +
mov ecx offset unk_10648C0 +
mov byte ptr [ebp-4] 6 +
call sub_10161A7  +
push offset aFinishtext  +
mov ecx offset unk_10648C4 +
mov byte ptr [ebp-4] 7 +
call sub_10161A7  +
push offset loc_105A8F7  +
call sub_1022394  +
pop ecx  +
call sub_1021FA5  +
retn   +
***
push 0  +
mov eax offset loc_105556B +
call sub_1021EB9  +
push offset aIcon  +
mov ecx offset unk_10648C8 +
call sub_10161A7  +
and dword ptr [ebp-4] 0 +
push offset aWatermarkpath  +
mov ecx offset unk_10648CC +
call sub_10161A7  +
push offset aHeaderpath  +
mov ecx offset unk_10648D0 +
mov byte ptr [ebp-4] 1 +
call sub_10161A7  +
push offset loc_105A910  +
call sub_1022394  +
pop ecx  +
call sub_1021FA5  +
retn   +
***
push offset loc_105A929  +
call sub_1022394  +
pop ecx  +
retn   +
***
push offset dword_1064BA8  +
mov ecx offset dword_1064904 +
call sub_1015076  +
push offset loc_105A938  +
call sub_1022394  +
pop ecx  +
retn   +
***
push offset dword_1064BA8  +
mov ecx offset dword_1064908 +
call sub_1015076  +
push offset loc_105A94B  +
call sub_1022394  +
pop ecx  +
retn   +
***
call sub_1022394  +
pop ecx  +
retn   +
***
cld   +
jmp fword ptr [eax+6Dh]  +
***
call ds:GetProcessHeap  +
push offset loc_105A97C  +
mov dword_1064B9C offset off_1005804 +
mov dword_1064BA0 eax +
mov byte_1064BA4 0 +
call sub_1022394  +
pop ecx  +
retn   +
***
call sub_1022394  +
pop ecx  +
retn   +
***
mov ecx lptstrFilename +
add ecx 0FFFFFFF0h +
jmp sub_10147CD  +
***
mov ecx lpString +
add ecx 0FFFFFFF0h +
jmp sub_10147CD  +
***
mov ecx offset unk_1064818 +
jmp loc_1014B04  +
***
mov ecx offset unk_10647DC +
jmp loc_1014B04  +
***
mov ecx dword_106478C +
add ecx 0FFFFFFF0h +
jmp sub_10147CD  +
***
mov ecx dword_1064790 +
add ecx 0FFFFFFF0h +
jmp sub_10147CD  +
***
mov ecx dword_1064794 +
add ecx 0FFFFFFF0h +
jmp sub_10147CD  +
***
mov ecx dword_1064798 +
add ecx 0FFFFFFF0h +
jmp sub_10147CD  +
***
mov ecx dword_106479C +
add ecx 0FFFFFFF0h +
jmp sub_10147CD  +
***
mov ecx dword_10647A0 +
add ecx 0FFFFFFF0h +
jmp sub_10147CD  +
***
mov ecx dword_10647A4 +
add ecx 0FFFFFFF0h +
jmp sub_10147CD  +
***
mov ecx dword_10647A8 +
add ecx 0FFFFFFF0h +
jmp sub_10147CD  +
***
mov ecx dword_10647AC +
add ecx 0FFFFFFF0h +
jmp sub_10147CD  +
***
mov ecx dword_10647B0 +
add ecx 0FFFFFFF0h +
jmp sub_10147CD  +
***
mov ecx dword_10647B4 +
add ecx 0FFFFFFF0h +
jmp sub_10147CD  +
***
mov ecx dword_10647B8 +
add ecx 0FFFFFFF0h +
jmp sub_10147CD  +
***
mov ecx dword_1064830 +
add ecx 0FFFFFFF0h +
jmp sub_10147CD  +
***
mov ecx dword_1064834 +
add ecx 0FFFFFFF0h +
jmp sub_10147CD  +
***
mov ecx dword_10647F4 +
add ecx 0FFFFFFF0h +
jmp sub_10147CD  +
***
mov ecx dword_10647F8 +
add ecx 0FFFFFFF0h +
jmp sub_10147CD  +
***
mov ecx offset dword_106484C +
jmp sub_101AB14  +
***
mov ecx offset dword_1064850 +
jmp sub_101AB14  +
***
push offset sub_1015174  +
push 6  +
push 4  +
push offset unk_1064854  +
call sub_10211FC  +
retn   +
***
push offset sub_1015174  +
push 3  +
push 4  +
push offset unk_106486C  +
call sub_10211FC  +
retn   +
***
push offset sub_1015174  +
push 0Bh  +
push 4  +
push offset unk_1064878  +
call sub_10211FC  +
retn   +
***
push offset sub_1015174  +
push 9  +
push 4  +
push offset unk_10648A4  +
call sub_10211FC  +
retn   +
***
push offset sub_1015174  +
push 3  +
push 4  +
push offset unk_10648C8  +
call sub_10211FC  +
retn   +
***
mov ecx offset dword_1063178 +
jmp loc_1014B04  +
***
mov ecx dword_1064904 +
add ecx 0FFFFFFF0h +
jmp sub_10147CD  +
***
mov ecx dword_1064908 +
add ecx 0FFFFFFF0h +
jmp sub_10147CD  +
***
mov ecx offset dword_1064B9C +
jmp sub_1020C83  +
***
mov dword_1064BA8 offset off_1005818 +
retn   +
***
add eax 10000000h +
pop esp  +
add eax 301h +
add [eax] bl +
pop esp  +
add eax 701h +
add [eax] ah +
pop esp  +
add eax 801h +
add [eax] ch +
pop esp  +
add eax 901h +
add [eax] dh +
pop esp  +
add eax 0A01h +
add [eax] bh +
pop esp  +
add eax 301h +
add [eax+5Ch] al +
add eax 0FFFFFF01h +
jmp fword ptr [ebx+5Ch]  +
***
add eax 0BB000000h +
pop edi  +
add eax 0FFFFFF01h +
jmp ebx  +
***
mov esp 9FFFFFFh +
retn 104h  +
***
outs   +
imul esi fs:[edx+65h] +
retf   +
***
arpl [eax+eax+0] si +
jmp near ptr 736F7EFBh  +
***
outs   +
jb $+2  +
retn   +
***
