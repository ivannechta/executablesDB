mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
inc esi  +
mov [eax] esi +
push 4  +
pop ecx  +
add eax ecx +
mov dword ptr [eax] 3 +
add eax ecx +
mov dword ptr [eax] 6 +
add eax ecx +
mov [eax] esi +
add eax ecx +
mov dword ptr [eax] 2 +
add eax ecx +
mov [eax] esi +
add eax ecx +
mov [eax] ecx +
add eax ecx +
mov dword ptr [eax] 16h +
add eax ecx +
mov [eax] esi +
mov esi [ebp+arg_0] +
add eax ecx +
mov [eax] esi +
mov esi [ebp+arg_4] +
add eax ecx +
mov [eax] esi +
movzx esi byte ptr [edx] +
add eax ecx +
mov [eax] esi +
movzx esi byte ptr [edx+1] +
add eax ecx +
mov [eax] esi +
add eax ecx +
movzx ecx byte ptr [edx+2] +
mov [eax] ecx +
movzx ecx byte ptr [edx+3] +
mov [eax+4] ecx +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push [ebp+name]  +
or ebx 0FFFFFFFFh +
call sub_1002971  +
mov [ebp+name] eax +
cmp eax ebx +
jz loc_10013B3  +
push esi  +
mov esi [edi] +
jmp loc_10013A9  +
lea eax [esi+8] +
push eax  +
lea eax [ebp+name] +
push eax  +
call sub_1002A55  +
test eax eax +
jnz loc_10013AF  +
mov esi [esi] +
cmp esi edi +
jnz loc_1001396  +
jmp loc_10013B2  +
mov ebx [esi+0Ch] +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
mov eax [ecx] +
jmp loc_10013D5  +
mov edx [eax+0Ch] +
cmp edx [ebp+arg_0] +
jz loc_10013E2  +
mov eax [eax] +
cmp eax ecx +
jnz loc_10013CB  +
mov eax 490h +
pop ebp  +
retn 0Ch  +
mov eax [eax+8] +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_10013DE  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
sub esp 14h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea ebx [ebp+var_14] +
mov dword ptr [ecx] 1 +
xor edi edi +
cmp byte ptr [esi] 30h +
mov [ebp+arg_0] edi +
mov [ebp+var_4] 0Ah +
jnz loc_1001438  +
inc esi  +
mov al [esi] +
mov [ebp+var_4] 8 +
cmp al 78h +
jz loc_1001430  +
cmp al 58h +
jnz loc_1001438  +
mov [ebp+var_4] 10h +
inc esi  +
mov al [esi] +
test al al +
jz loc_100149A  +
movzx edi al +
push edi  +
call ds:isdigit  +
pop ecx  +
test eax eax +
jz loc_100145A  +
mov eax [ebp+var_4] +
imul eax [ebp+arg_0] +
lea eax [eax+edi-30h] +
jmp loc_100148A  +
cmp [ebp+var_4] 10h +
jnz loc_1001494  +
push edi  +
call ds:isxdigit  +
pop ecx  +
test eax eax +
jz loc_1001494  +
push edi  +
call ds:islower  +
neg eax  +
sbb eax eax +
and eax 20h +
pop ecx  +
mov ecx [ebp+arg_0] +
add eax 41h +
shl ecx 4 +
sub ecx eax +
lea eax [ecx+edi+0Ah] +
inc esi  +
mov [ebp+arg_0] eax +
mov al [esi] +
test al al +
jnz loc_100143E  +
mov edi [ebp+arg_0] +
mov ecx [ebp+arg_4] +
cmp byte ptr [esi] 2Eh +
jnz loc_10014BC  +
lea eax [ebp+var_8] +
cmp ebx eax +
jnb loc_10014B1  +
mov [ebx] edi +
add ebx 4 +
inc esi  +
jmp loc_100140D  +
and dword ptr [ecx] 0 +
or eax 0FFFFFFFFh +
jmp loc_10015AE  +
mov al [esi] +
test al al +
jz loc_10014DC  +
movzx eax al +
push eax  +
call ds:isspace  +
pop ecx  +
test eax eax +
jnz loc_10014D9  +
mov eax [ebp+arg_4] +
and dword ptr [eax] 0 +
jmp loc_10014B4  +
mov ecx [ebp+arg_4] +
mov [ebx] edi +
lea eax [ebp+var_14] +
sub ebx eax +
add ebx 4 +
sar ebx 2 +
dec ebx  +
jz loc_1001592  +
dec ebx  +
jz loc_1001567  +
dec ebx  +
jz loc_100152F  +
dec ebx  +
jnz loc_10014B1  +
mov edx [ebp+var_14] +
mov eax 0FFh +
cmp edx eax +
ja loc_10014B1  +
cmp [ebp+var_10] eax +
ja loc_10014B1  +
cmp [ebp+var_C] eax +
ja loc_10014B1  +
cmp [ebp+var_8] eax +
ja loc_10014B1  +
movzx ecx byte ptr [ebp+var_10] +
movzx eax byte ptr [ebp+var_C] +
shl edx 8 +
or ecx edx +
shl ecx 8 +
or ecx eax +
movzx eax byte ptr [ebp+var_8] +
shl ecx 8 +
jmp loc_1001586  +
mov edx [ebp+var_14] +
mov eax 0FFh +
cmp edx eax +
ja loc_10014B1  +
cmp [ebp+var_10] eax +
ja loc_10014B1  +
cmp [ebp+var_C] 0FFFFh +
ja loc_10014B1  +
movzx ecx byte ptr [ebp+var_10] +
movzx eax word ptr [ebp+var_C] +
shl edx 8 +
or ecx edx +
shl ecx 10h +
jmp loc_1001586  +
mov eax [ebp+var_14] +
cmp eax 0FFh +
ja loc_10014B1  +
mov ecx [ebp+var_10] +
mov edx 0FFFFFFh +
cmp ecx edx +
ja loc_100158A  +
and ecx edx +
shl eax 18h +
or ecx eax +
jmp loc_1001595  +
mov ecx [ebp+arg_4] +
jmp loc_10014B1  +
mov ecx [ebp+var_14] +
mov eax ecx +
shr eax 8 +
mov edx ecx +
shl edx 8 +
xor eax edx +
and eax 0FF00FFh +
shl ecx 8 +
xor eax ecx +
rol eax 10h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
push 1  +
call sub_1002A8E  +
add esp 0Ch +
push 1  +
call ds:exit  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+var_18] +
push eax  +
push offset a2x2x2x2x2x2x  +
push [ebp+arg_0]  +
call ds:sscanf  +
add esp 20h +
cmp eax 6 +
jz loc_1001618  +
push 57h  +
pop eax  +
jmp locret_1001640  +
mov eax [ebp+arg_4] +
mov cl byte ptr [ebp+var_18] +
mov [eax] cl +
mov cl byte ptr [ebp+var_14] +
mov [eax+1] cl +
mov cl byte ptr [ebp+var_10] +
mov [eax+2] cl +
mov cl byte ptr [ebp+var_C] +
mov [eax+3] cl +
mov cl byte ptr [ebp+var_8] +
mov [eax+4] cl +
mov cl byte ptr [ebp+var_4] +
mov [eax+5] cl +
xor eax eax +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_100165F  +
cmp ecx 7FFFFFFFh +
jbe loc_1001664  +
mov eax 80070057h +
test eax eax +
jl loc_10016A1  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_1001691  +
cmp eax esi +
ja loc_1001691  +
jnz loc_100169C  +
jmp loc_1001696  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_10016BE  +
cmp ecx 7FFFFFFFh +
jbe loc_10016C3  +
mov eax 80070057h +
test eax eax +
jl loc_1001700  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnprintf  +
add esp 10h +
test eax eax +
jl loc_10016F3  +
cmp eax esi +
ja loc_10016F3  +
jnz loc_10016FB  +
mov [esi+edi] bl +
jmp loc_10016FB  +
mov [esi+edi] bl +
mov ebx 8007007Ah +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
or [ebp+var_C] 0FFFFFFFFh +
lea eax [ebp+var_34] +
push ebx  +
mov ebx [ebp+arg_0] +
mov [ebp+var_1C] eax +
xor eax eax +
push esi  +
push edi  +
mov [ebp+var_18] 1 +
mov [ebp+var_8] eax +
mov [ebp+var_14] eax +
mov [ebp+var_10] eax +
mov [ebp+var_4] eax +
cmp ebx eax +
jz loc_100177B  +
push 2  +
mov edi offset asc_1001184 +
mov esi ebx +
pop ecx  +
xor edx edx +
cmps   +
jz loc_100177B  +
lea eax [ebp+arg_0] +
push eax  +
push ebx  +
call sub_10013F3  +
cmp [ebp+arg_0] 1 +
mov [ebp+var_4] eax +
jz loc_1001779  +
push ebx  +
push dword_1005CB4  +
push 2711h  +
push 2  +
call sub_1002A8E  +
add esp 10h +
push 1  +
call ds:exit  +
xor eax eax +
cmp [ebp+name] eax +
jz loc_10017BF  +
lea eax [ebp+arg_0] +
push eax  +
push 2  +
call sub_1003C04  +
mov edi eax +
test edi edi +
jnz loc_1001799  +
mov eax [ebp+arg_0] +
jmp loc_100187C  +
push [ebp+name]  +
call sub_1001379  +
mov [ebp+var_C] eax +
cmp eax 0FFFFFFFFh +
jnz loc_10017B9  +
push [ebp+name]  +
push dword_1005CB4  +
push 2712h  +
jmp loc_1001767  +
push edi  +
call sub_1002C30  +
lea eax [ebp+arg_0] +
push eax  +
push 4  +
call sub_1003C04  +
mov edi eax +
xor ebx ebx +
cmp edi ebx +
jz loc_1001791  +
mov esi [edi] +
jmp loc_1001859  +
mov eax [ebp+var_C] +
cmp eax 0FFFFFFFFh +
jz loc_10017E6  +
cmp eax [esi+8] +
jnz loc_1001857  +
cmp [ebp+var_4] ebx +
jz loc_10017FC  +
lea eax [esi+18h] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
call sub_1002A55  +
test eax eax +
jz loc_1001857  +
push 0C8h  +
call SnmpUtilMemAlloc  +
cmp eax ebx +
jz loc_1001883  +
mov [ebp+pMem] eax +
mov [ebp+var_34] 0Fh +
push dword ptr [esi+8]  +
lea edx [esi+18h] +
push 4  +
call sub_1001305  +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_1C] +
push eax  +
push 0A3h  +
mov [ebp+var_2C] 2 +
mov [ebp+var_28] 2 +
call dword_1005CD0  +
push [ebp+pMem]  +
call SnmpUtilMemFree  +
cmp [ebp+var_8] ebx +
jnz loc_100189D  +
mov [ebp+var_10] 1 +
mov esi [esi] +
cmp esi edi +
jnz loc_10017D9  +
push edi  +
call sub_1002C30  +
cmp [ebp+var_10] ebx +
jnz loc_100187A  +
push 271Ch  +
push 2  +
call sub_1002A8E  +
pop ecx  +
pop ecx  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
push dword_1005CB4  +
push 2714h  +
push 2  +
call sub_1002A8E  +
add esp 0Ch +
jmp loc_1001771  +
push [ebp+var_8]  +
call sub_1002C5E  +
jmp loc_100187C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 90h +
mov eax dword_1005000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
or [ebp+var_10] 0FFFFFFFFh +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
mov [ebp+var_24] eax +
lea eax [ebp+var_90] +
mov [ebp+var_30] eax +
xor eax eax +
push edi  +
mov edi [ebp+arg_0] +
xor ecx ecx +
cmp esi eax +
push 4  +
setz cl  +
pop ebx  +
mov [ebp+var_14] eax +
mov [ebp+var_28] eax +
mov [ebp+var_18] eax +
lea eax [ebp+var_18] +
push eax  +
push edi  +
mov [ebp+var_2C] ebx +
mov [ebp+var_20] ecx +
call sub_10013F3  +
cmp [ebp+var_18] 1 +
mov [ebp+var_1C] eax +
jz loc_1001929  +
push edi  +
push dword_1005CB4  +
push 2711h  +
push 2  +
call sub_1002A8E  +
add esp 10h +
push 1  +
call ds:exit  +
lea eax [ebp+var_C] +
push eax  +
push [ebp+var_24]  +
call sub_10015DD  +
mov [ebp+var_18] eax +
test eax eax +
jz loc_100194C  +
push [ebp+var_24]  +
push dword_1005CB4  +
push 2712h  +
jmp loc_1001917  +
cmp [ebp+var_20] 0 +
jnz loc_100197F  +
lea eax [ebp+var_18] +
push eax  +
push 2  +
call sub_1003C04  +
mov edi eax +
test edi edi +
jz loc_1001CBF  +
push esi  +
call sub_1001379  +
push edi  +
mov [ebp+var_10] eax +
call sub_1002C30  +
cmp [ebp+var_10] 0FFFFFFFFh +
jnz loc_100197F  +
push esi  +
jmp loc_100190C  +
mov esi 0C8h +
push esi  +
call SnmpUtilMemAlloc  +
test eax eax +
jnz loc_10019A8  +
push dword_1005CB4  +
push 2714h  +
push 2  +
call sub_1002A8E  +
add esp 0Ch +
jmp loc_1001921  +
push 0Fh  +
pop edi  +
push [ebp+var_10]  +
lea edx [ebp+var_1C] +
push 1  +
mov [ebp+pMem] eax +
mov [ebp+var_90] edi +
call sub_1001305  +
mov eax [ebp+var_10] +
push esi  +
mov [ebp+var_88] 2 +
mov [ebp+var_84] eax +
call SnmpUtilMemAlloc  +
test eax eax +
jz loc_100198E  +
push [ebp+var_10]  +
lea edx [ebp+var_1C] +
push 2  +
mov [ebp+var_74] eax +
mov [ebp+var_78] edi +
call sub_1001305  +
and [ebp+var_64] 0 +
lea eax [ebp+var_C] +
push esi  +
mov [ebp+var_70] bl +
mov [ebp+var_6C] eax +
mov [ebp+var_68] 6 +
call SnmpUtilMemAlloc  +
test eax eax +
jz loc_100198E  +
push [ebp+var_10]  +
lea edx [ebp+var_1C] +
push 3  +
mov [ebp+var_5C] eax +
mov [ebp+var_60] edi +
call sub_1001305  +
and [ebp+var_4C] 0 +
mov eax edx +
push esi  +
mov [ebp+var_58] 40h +
mov [ebp+var_54] eax +
mov [ebp+var_50] ebx +
call SnmpUtilMemAlloc  +
xor esi esi +
cmp eax esi +
jz loc_100198E  +
push [ebp+var_10]  +
lea edx [ebp+var_1C] +
push ebx  +
mov [ebp+var_44] eax +
mov [ebp+var_48] edi +
call sub_1001305  +
mov [ebp+var_40] 2 +
mov [ebp+var_3C] ebx +
cmp [ebp+var_20] esi +
jnz loc_1001A80  +
lea eax [ebp+var_28] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+var_30] +
push eax  +
push 0A3h  +
call dword_1005CD0  +
jmp loc_1001C95  +
lea eax [ebp+var_18] +
push eax  +
push ebx  +
mov [ebp+var_24] esi +
call sub_1003C04  +
mov [ebp+var_20] eax +
mov edi 0A3h +
cmp eax esi +
jz loc_1001B52  +
mov esi [eax] +
cmp esi eax +
jz loc_1001B52  +
mov al byte ptr [ebp+var_1C] +
or ebx 0FFFFFFFFh +
and al 0C0h +
jz loc_1001ADE  +
cmp al 40h +
jz loc_1001ADE  +
cmp al 80h +
jnz loc_1001AC0  +
mov ebx 0FFFFh +
jmp loc_1001AE3  +
cmp al 0C0h +
jnz loc_1001AE3  +
mov al byte ptr [ebp+var_1C] +
and al 30h +
movzx ebx al +
neg ebx  +
sbb ebx ebx +
and ebx 0FF000000h +
add ebx 0FFFFFFh +
jmp loc_1001AE3  +
mov ebx 0FFh +
mov eax [esi+18h] +
mov ecx ebx +
and ecx [ebp+var_1C] +
and eax ebx +
cmp eax ecx +
jnz loc_1001B40  +
mov eax [esi+8] +
mov ecx [ebp+pMem] +
mov [ebp+var_84] eax +
mov [ecx+28h] eax +
mov eax [ebp+var_84] +
mov ecx [ebp+var_74] +
mov [ecx+28h] eax +
mov eax [ebp+var_84] +
mov ecx [ebp+var_5C] +
mov [ecx+28h] eax +
mov eax [ebp+var_44] +
mov ecx [ebp+var_84] +
mov [eax+28h] ecx +
lea eax [ebp+var_28] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+var_30] +
push eax  +
push edi  +
call dword_1005CD0  +
cmp [ebp+var_14] 0 +
jz loc_1001B49  +
mov esi [esi] +
cmp esi [ebp+var_20] +
jnz loc_1001AE3  +
jmp loc_1001B52  +
mov eax [ebp+var_84] +
mov [ebp+var_10] eax +
cmp [ebp+var_10] 0FFFFFFFFh +
jnz loc_1001C62  +
lea eax [ebp+var_18] +
push eax  +
push 2  +
call sub_1003C04  +
mov ebx eax +
mov [ebp+var_24] ebx +
test ebx ebx +
jz loc_1001C62  +
mov esi [ebx] +
cmp esi ebx +
jz loc_1001C62  +
mov ecx [esi+8] +
test ecx ecx +
jz loc_1001BE2  +
mov eax [esi+10h] +
mov edx eax +
and edx [ebp+var_1C] +
and eax ecx +
cmp eax edx +
jnz loc_1001BE2  +
mov eax [esi+0Ch] +
mov ecx [ebp+pMem] +
mov [ebp+var_84] eax +
mov [ecx+28h] eax +
mov eax [ebp+var_84] +
mov ecx [ebp+var_74] +
mov [ecx+28h] eax +
mov eax [ebp+var_84] +
mov ecx [ebp+var_5C] +
mov [ecx+28h] eax +
mov eax [ebp+var_44] +
mov ecx [ebp+var_84] +
mov [eax+28h] ecx +
lea eax [ebp+var_28] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+var_30] +
push eax  +
push edi  +
call dword_1005CD0  +
cmp [ebp+var_14] 0 +
jz loc_1001BEA  +
mov esi [esi] +
cmp esi ebx +
jnz loc_1001B7E  +
jmp loc_1001BF8  +
mov eax [ebp+var_84] +
mov [ebp+var_10] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1001C62  +
mov esi [ebx] +
jmp loc_1001C53  +
cmp byte ptr [esi+8] 7Fh +
jz loc_1001C51  +
mov eax [esi+0Ch] +
mov ecx [ebp+pMem] +
mov [ebp+var_84] eax +
mov [ecx+28h] eax +
mov eax [ebp+var_84] +
mov ecx [ebp+var_74] +
mov [ecx+28h] eax +
mov eax [ebp+var_84] +
mov ecx [ebp+var_5C] +
mov [ecx+28h] eax +
mov eax [ebp+var_44] +
mov ecx [ebp+var_84] +
mov [eax+28h] ecx +
lea eax [ebp+var_28] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+var_30] +
push eax  +
push edi  +
call dword_1005CD0  +
cmp [ebp+var_14] 0 +
jz loc_1001C59  +
mov esi [esi] +
cmp esi ebx +
jnz loc_1001BFC  +
jmp loc_1001C62  +
mov eax [ebp+var_84] +
mov [ebp+var_10] eax +
xor esi esi +
cmp [ebp+var_20] esi +
jz loc_1001C71  +
push [ebp+var_20]  +
call sub_1002C30  +
cmp [ebp+var_24] esi +
jz loc_1001C7E  +
push [ebp+var_24]  +
call sub_1002C30  +
cmp [ebp+var_10] 0FFFFFFFFh +
jnz loc_1001C95  +
cmp [ebp+var_14] esi +
jnz loc_1001C95  +
cmp [ebp+var_18] esi +
jnz loc_1001C95  +
mov [ebp+var_14] 5 +
push [ebp+pMem]  +
call SnmpUtilMemFree  +
push [ebp+var_74]  +
call SnmpUtilMemFree  +
push [ebp+var_5C]  +
call SnmpUtilMemFree  +
push [ebp+var_44]  +
call SnmpUtilMemFree  +
mov eax [ebp+var_14] +
cmp eax esi +
jnz loc_1001CC2  +
mov eax [ebp+var_18] +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10024EF  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 74h +
mov eax dword_1005000 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea eax [ebp+var_70] +
push eax  +
lea eax [esi+18h] +
push eax  +
call ds:RtlIpv4AddressToStringW  +
cmp dword ptr [esi+0Ch] 0 +
jz loc_1001D5C  +
movzx eax byte ptr [esi+10h] +
push eax  +
push offset a02x  +
lea eax [ebp+var_44] +
push 20h  +
push eax  +
call sub_1001649  +
add esp 10h +
test eax eax +
jl loc_1001D5C  +
xor edi edi +
inc edi  +
lea ebx [ebp+var_40] +
mov [ebp+var_74] 1Eh +
cmp [esi+0Ch] edi +
jbe loc_1001D62  +
movzx eax byte ptr [esi+edi+10h] +
push eax  +
push offset a02x_0  +
push [ebp+var_74]  +
push ebx  +
call sub_1001649  +
add esp 10h +
test eax eax +
jl loc_1001D5C  +
sub [ebp+var_74] 3 +
add ebx 6 +
inc edi  +
cmp edi [esi+0Ch] +
jb loc_1001D32  +
jmp loc_1001D62  +
xor eax eax +
mov [ebp+var_44] ax +
mov esi [esi+1Ch] +
dec esi  +
jz loc_1001D8D  +
dec esi  +
jz loc_1001D86  +
dec esi  +
jz loc_1001D7F  +
dec esi  +
jz loc_1001D78  +
push 2723h  +
jmp loc_1001D92  +
push 2718h  +
jmp loc_1001D92  +
push 2717h  +
jmp loc_1001D92  +
push 2716h  +
jmp loc_1001D92  +
push 2715h  +
call sub_1002B3E  +
pop ecx  +
mov esi eax +
push esi  +
lea eax [ebp+var_44] +
push eax  +
lea eax [ebp+var_70] +
push eax  +
push 271Dh  +
push 1  +
call sub_1002A8E  +
add esp 14h +
push esi  +
call ds:LocalFree  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10024EF  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 60h +
mov eax dword_1005000 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
or ebx 0FFFFFFFFh +
mov [ebp+var_58] ebx +
mov [ebp+var_45] 0 +
test edi edi +
jnz loc_1001E06  +
cmp [ebp+arg_8] 0 +
jz loc_1001E06  +
and [ebp+var_54] edi +
and [ebp+var_50] edi +
jmp loc_1001E40  +
mov [ebp+var_54] esi +
test esi esi +
jz loc_1001E3E  +
lea eax [ebp+var_4C] +
push eax  +
push esi  +
call sub_10013F3  +
cmp [ebp+var_4C] 1 +
mov [ebp+var_50] eax +
jz loc_1001E3E  +
push esi  +
push dword_1005CB4  +
push 2712h  +
push 2  +
call sub_1002A8E  +
add esp 10h +
push 1  +
call ds:exit  +
mov esi edi +
lea eax [ebp+var_4C] +
push eax  +
push 2  +
call sub_1003C04  +
mov edi eax +
test edi edi +
jnz loc_1001E59  +
mov eax [ebp+var_4C] +
jmp loc_1001F8C  +
test esi esi +
jz loc_1001E6A  +
push esi  +
call sub_1001379  +
mov ebx eax +
cmp ebx 0FFFFFFFFh +
jz loc_1001E20  +
lea eax [ebp+var_4C] +
push eax  +
push 4  +
call sub_1003C04  +
mov [ebp+var_60] eax +
test eax eax +
jz loc_1001E51  +
mov esi [eax] +
jmp loc_1001F62  +
cmp [ebp+arg_C] 0 +
jz loc_1001EB2  +
cmp dword ptr [esi+1Ch] 2 +
jz loc_1001F5D  +
lea eax [ebp+var_5C] +
push eax  +
push edi  +
push dword ptr [esi+8]  +
call sub_10013BF  +
test eax eax +
jnz loc_1001F5D  +
cmp byte ptr [ebp+var_5C] 7Fh +
jz loc_1001F5D  +
cmp [ebp+var_54] 0 +
jz loc_1001ECD  +
lea eax [ebp+var_50] +
push eax  +
lea eax [esi+18h] +
push eax  +
call sub_1002A55  +
test eax eax +
jz loc_1001F5D  +
cmp [ebp+arg_8] 0 +
jz loc_1001EDC  +
cmp ebx [esi+8] +
jnz loc_1001F5D  +
mov eax [esi+8] +
cmp [ebp+var_58] eax +
jz loc_1001F53  +
mov ecx eax +
mov eax [edi] +
mov [ebp+var_58] ecx +
or ebx 0FFFFFFFFh +
jmp loc_1001EF7  +
cmp ecx [eax+0Ch] +
jz loc_1001EFD  +
mov eax [eax] +
cmp eax edi +
jnz loc_1001EF0  +
jmp loc_1001F05  +
mov ebx [eax+0Ch] +
cmp ebx 0FFFFFFFFh +
jnz loc_1001F09  +
xor eax eax +
jmp loc_1001F0C  +
mov eax [eax+8] +
push ebx  +
mov ecx eax +
shr ecx 18h +
push ecx  +
mov ecx eax +
shr ecx 10h +
movzx ecx cl +
push ecx  +
mov ecx eax +
shr ecx 8 +
movzx ecx cl +
push ecx  +
movzx eax al +
push eax  +
push offset aU_U_U_U0xX  +
lea eax [ebp+var_44] +
push 40h  +
push eax  +
call sub_10016A8  +
add esp 20h +
test eax eax +
jl loc_1001F53  +
lea eax [ebp+var_44] +
push eax  +
push 2713h  +
push 1  +
call sub_1002A8E  +
add esp 0Ch +
push esi  +
mov [ebp+var_45] 1 +
call sub_1001CD8  +
mov esi [esi] +
mov eax [ebp+var_60] +
cmp esi eax +
jnz loc_1001E83  +
push eax  +
call sub_1002C30  +
push edi  +
call sub_1002C30  +
cmp [ebp+var_45] 0 +
jnz loc_1001F8A  +
push 2722h  +
push 1  +
call sub_1002A8E  +
pop ecx  +
pop ecx  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10024EF  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1B0h +
mov eax dword_1005000 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
xor ebx ebx +
push esi  +
push [ebp+arg_0]  +
mov [ebp+var_19C] ebx +
mov [ebp+var_1A8] bl +
mov [ebp+var_1AC] 1 +
mov [ebp+var_198] ebx +
mov [ebp+name] ebx +
mov [ebp+var_1A4] ebx +
call nullsub_1  +
push ebx  +
push ebx  +
xor edi edi +
inc edi  +
push edi  +
push ebx  +
call ds:HeapSetInformation  +
call sub_1002B9C  +
mov eax [esi] +
mov dword_1005CB4 eax +
lea eax [ebp+WSAData] +
push eax  +
push 101h  +
call ds:WSAStartup  +
cmp eax ebx +
jz loc_1002039  +
push eax  +
push dword_1005CB4  +
push 2719h  +
push 2  +
call sub_1002A8E  +
add esp 10h +
push edi  +
call ds:exit  +
cmp [ebp+arg_0] 2 +
jge loc_1002044  +
call sub_10015BA  +
cmp [ebp+arg_0] edi +
mov eax edi +
mov [ebp+var_1B0] edi +
jle loc_1002128  +
mov eax [esi+eax*4] +
mov cl [eax] +
cmp cl 2Dh +
jz loc_100209A  +
cmp cl 2Fh +
jz loc_100209A  +
cmp [ebp+var_198] ebx +
jnz loc_1002077  +
mov [ebp+var_198] eax +
jmp loc_1002112  +
cmp [ebp+name] ebx +
jnz loc_100208A  +
mov [ebp+name] eax +
jmp loc_1002112  +
cmp [ebp+var_1A4] ebx +
jnz loc_100203F  +
mov [ebp+var_1A4] eax +
jmp loc_1002112  +
lea edi [eax+1] +
jmp loc_100210C  +
movsx eax al +
push eax  +
call ds:toupper  +
pop ecx  +
cmp eax 41h +
jz loc_1002101  +
cmp eax 44h +
jz loc_10020F5  +
cmp eax 47h +
jz loc_1002101  +
cmp eax 4Eh +
jz loc_10020E0  +
cmp eax 53h +
jz loc_10020D4  +
cmp eax 56h +
jnz loc_100203F  +
mov [ebp+var_1AC] bl +
jmp loc_10020E7  +
mov [ebp+var_19C] 2 +
jmp loc_100210B  +
mov [ebp+var_1A8] 1 +
cmp [ebp+var_19C] ebx +
jz loc_100203F  +
jmp loc_100210B  +
mov [ebp+var_19C] 3 +
jmp loc_100210B  +
mov [ebp+var_19C] 1 +
inc edi  +
mov al [edi] +
cmp al bl +
jnz loc_100209F  +
mov eax [ebp+var_1B0] +
inc eax  +
cmp eax [ebp+arg_0] +
mov [ebp+var_1B0] eax +
jl loc_1002055  +
call sub_1002B79  +
test al al +
jnz loc_1002146  +
push 2724h  +
push 2  +
call sub_1002A8E  +
pop ecx  +
pop ecx  +
push 1  +
jmp loc_1002033  +
call sub_1003586  +
cmp eax ebx +
jz loc_100215E  +
push eax  +
push 271Eh  +
push 2  +
call sub_1002BFA  +
jmp loc_100213F  +
mov eax [ebp+var_19C] +
dec eax  +
jz loc_10021F4  +
dec eax  +
jz loc_10021A9  +
dec eax  +
jnz loc_1002236  +
call sub_1002A2D  +
test al al +
jnz loc_1002185  +
mov eax 2E4h +
jmp loc_100219E  +
push [ebp+name]  +
push [ebp+var_198]  +
call sub_1001707  +
cmp eax ebx +
jz loc_1002236  +
push eax  +
push 2721h  +
jmp loc_100222F  +
cmp [ebp+var_198] ebx +
jz loc_100203F  +
cmp [ebp+name] ebx +
jz loc_100203F  +
call sub_1002A2D  +
test al al +
jnz loc_10021D1  +
mov eax 2E4h +
jmp loc_10021EC  +
push [ebp+var_1A4]  +
push [ebp+name]  +
push [ebp+var_198]  +
call sub_10018AC  +
cmp eax ebx +
jz loc_1002236  +
push eax  +
push 2720h  +
jmp loc_100222F  +
cmp [ebp+var_1A8] bl +
jz loc_1002208  +
cmp [ebp+var_198] ebx +
jz loc_100203F  +
push dword ptr [ebp+var_1AC]  +
push dword ptr [ebp+var_1A8]  +
push [ebp+name]  +
push [ebp+var_198]  +
call sub_1001DCF  +
cmp eax ebx +
jz loc_1002236  +
push eax  +
push 271Fh  +
push 2  +
call sub_1002BFA  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
xor eax eax +
pop ebx  +
call sub_10024EF  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_1002268  +
test eax eax +
jnz loc_100226D  +
mov ecx [esi] +
test ecx ecx +
jz loc_1002265  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_1002259  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_1005984 +
push offset dword_1005974  +
push dword_1005980  +
mov dword_1005974 eax +
push offset dword_1005964  +
push offset dword_1005968  +
push offset dword_1005960  +
call ds:__getmainargs  +
add esp 14h +
mov dword_1005970 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+ms_exc.disabled] ebx +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp+var_1C] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
cmp eax ebx +
jz loc_10022F5  +
cmp eax esi +
jnz loc_10022E8  +
xor esi esi +
inc esi  +
mov [ebp+var_1C] esi +
jmp loc_10022F8  +
push 3E8h  +
call ds:Sleep  +
jmp loc_10022CF  +
xor esi esi +
inc esi  +
mov eax dword_1005CC0 +
cmp eax esi +
jnz loc_100230B  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_1002346  +
mov eax dword_1005CC0 +
test eax eax +
jnz loc_1002340  +
mov dword_1005CC0 esi +
push offset dword_1001148  +
push offset dword_100113C  +
call sub_100224C  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1002346  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
jmp loc_1002410  +
mov dword_100597C esi +
mov eax dword_1005CC0 +
cmp eax esi +
jnz loc_100236A  +
push offset dword_1001138  +
push offset dword_1001130  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_1005CC0 2 +
cmp [ebp+var_1C] ebx +
jnz loc_1002377  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_1005CC8 ebx +
jz loc_1002398  +
push offset dword_1005CC8  +
call sub_10025F9  +
pop ecx  +
test eax eax +
jz loc_1002398  +
push ebx  +
push 2  +
push ebx  +
call dword_1005CC8  +
push dword_1005964  +
push dword_1005968  +
push dword_1005960  +
call sub_1001FA2  +
add esp 0Ch +
mov dword_1005978 eax +
cmp dword_100596C ebx +
jnz loc_10023F6  +
push eax  +
call ds:exit  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-20h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-20h] +
mov dword_1005978 eax +
xor ebx ebx +
cmp dword_100596C ebx +
jnz loc_10023F6  +
push eax  +
call ds:_exit  +
cmp dword_100597C ebx +
jnz loc_1002404  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_1005978 +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_100242D  +
xor eax eax +
jmp loc_100247A  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_1002429  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_1002467  +
cmp ecx 20Bh +
jnz loc_1002429  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_1002429  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_1002475  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_1002429  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 1  +
mov dword_100596C eax +
call sub_1002792  +
push eax  +
call ds:__set_app_type  +
or dword_1005CB8 0FFFFFFFFh +
or dword_1005CBC 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_100598C +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_1005988 +
mov [eax] ecx +
call sub_1002724  +
cmp dword_1005010 0 +
jnz loc_10024D3  +
push offset sub_1002724  +
call ds:__setusermatherr  +
pop ecx  +
call sub_100270C  +
xor eax eax +
retn   +
***
call sub_10027D1  +
jmp sub_10022AD  +
***
cmp ecx dword_1005000 +
jnz loc_10024FA  +
retn 0  +
jmp loc_1002867  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_1002541  +
cmp dword ptr [eax+10h] 3 +
jnz loc_1002541  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_100253B  +
cmp eax 19930521h +
jz loc_100253B  +
cmp eax 19930522h +
jz loc_100253B  +
cmp eax 1994000h +
jnz loc_1002541  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push offset loc_1002504  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_1002586  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_1002582  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_10025ED  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_10025E5  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_10025EF  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_10025D5  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_1002570  +
pop ecx  +
test eax eax +
jz loc_1002656  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_10025B0  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1002656  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_100265F  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_10024EF  +
push offset dword_1005000  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1002785  +
cmp ecx 0FFFFFFFFh +
jz loc_1002785  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_100277E  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_100277E  +
cmp edx 10000000h +
jnb loc_100277E  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_100277E  +
jmp loc_1002779  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_10027C7  +
push eax  +
call sub_100272C  +
test eax eax +
jz loc_10027C7  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_10027BC  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_10027C7  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1005000 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_1002803  +
test eax ebx +
jz loc_1002803  +
not eax  +
mov dword_1005004 eax +
jmp loc_100285E  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_100284A  +
test dword_1005000 ebx +
jnz loc_100284F  +
mov esi 0BB40E64Fh +
mov dword_1005000 esi +
not esi  +
mov dword_1005004 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_1005A90 eax +
mov dword_1005A8C ecx +
mov dword_1005A88 edx +
mov dword_1005A84 ebx +
mov dword_1005A80 esi +
mov dword_1005A7C edi +
mov word_1005AA8 ss +
mov word_1005A9C cs +
mov word_1005A78 ds +
mov word_1005A74 es +
mov word_1005A70 fs +
mov word_1005A6C gs +
pushf   +
pop dword_1005AA0  +
mov eax [ebp+0] +
mov dword_1005A94 eax +
mov eax [ebp+4] +
mov dword_1005A98 eax +
lea eax [ebp+8] +
mov dword_1005AA4 eax +
mov eax [ebp-320h] +
mov dword_10059E0 10001h +
mov eax dword_1005A98 +
mov dword_100599C eax +
mov dword_1005990 0C0000409h +
mov dword_1005994 1 +
mov eax dword_1005000 +
mov [ebp-328h] eax +
mov eax dword_1005004 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+name]  +
call ds:inet_addr  +
cmp eax 0FFFFFFFFh +
jnz loc_100299D  +
push [ebp+name]  +
call ds:gethostbyname  +
test eax eax +
jz loc_100299A  +
mov eax [eax+0Ch] +
mov eax [eax] +
mov eax [eax] +
jmp loc_100299D  +
or eax 0FFFFFFFFh +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_1005000 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
lea eax [ebp+pSid] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+nSubAuthority1]  +
lea eax [ebp+pIdentifierAuthority] +
push 20h  +
push 2  +
push eax  +
mov [ebp+pIdentifierAuthority.Value] bl +
mov [ebp+pIdentifierAuthority.Value+1] bl +
mov [ebp+pIdentifierAuthority.Value+2] bl +
mov [ebp+pIdentifierAuthority.Value+3] bl +
mov [ebp+pIdentifierAuthority.Value+4] bl +
mov [ebp+pIdentifierAuthority.Value+5] 5 +
call ds:AllocateAndInitializeSid  +
mov [ebp+var_10] eax +
cmp eax ebx +
jz loc_1002A17  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+pSid]  +
push ebx  +
call ds:CheckTokenMembership  +
test eax eax +
jnz loc_1002A05  +
mov [ebp+var_10] ebx +
push [ebp+pSid]  +
call ds:FreeSid  +
cmp [ebp+var_10] ebx +
jz loc_1002A17  +
mov al 1 +
jmp loc_1002A19  +
xor al al +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop ebx  +
call sub_10024EF  +
leave   +
retn 4  +
***
test al al +
jnz loc_1002A4C  +
push 22Ch  +
call sub_10029A6  +
test al al +
jnz loc_1002A4C  +
xor eax eax +
retn   +
xor eax eax +
inc eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov dl [eax] +
mov ecx [ebp+arg_4] +
cmp dl [ecx] +
jnz loc_1002A83  +
mov dl [eax+1] +
cmp dl [ecx+1] +
jnz loc_1002A83  +
mov dl [eax+2] +
cmp dl [ecx+2] +
jnz loc_1002A83  +
mov al [eax+3] +
cmp al [ecx+3] +
jnz loc_1002A83  +
xor eax eax +
inc eax  +
jmp loc_1002A85  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push edi  +
lea eax [ebp+arg_8] +
mov [ebp+Arguments] eax +
xor edi edi +
lea eax [ebp+Arguments] +
push eax  +
push edi  +
lea eax [ebp+hMem] +
push eax  +
push edi  +
push [ebp+dwMessageId]  +
mov [ebp+hMem] edi +
push edi  +
push 900h  +
call ds:FormatMessageW  +
mov ebx eax +
cmp ebx edi +
jbe loc_1002B25  +
cmp [ebp+hMem] edi +
jz loc_1002B33  +
cmp [ebp+arg_0] 2 +
push esi  +
mov esi ds:_iob +
jnz loc_1002AD8  +
add esi 40h +
jmp loc_1002ADB  +
add esi 20h +
push 8000h  +
push esi  +
call ds:_fileno  +
pop ecx  +
push eax  +
call ds:_setmode  +
mov eax [ebp+hMem] +
pop ecx  +
pop ecx  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx di +
jnz loc_1002AF7  +
sub eax edx +
sar eax 1 +
push eax  +
push [ebp+hMem]  +
push [ebp+hMem]  +
call ds:CharToOemBuffW  +
push [ebp+hMem]  +
push offset aWs  +
push esi  +
call ds:fprintf  +
add esp 0Ch +
pop esi  +
cmp [ebp+hMem] edi +
jz loc_1002B33  +
push [ebp+hMem]  +
call ds:LocalFree  +
pop edi  +
mov eax ebx +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
lea ecx [ebp+arg_4] +
mov [ebp+Arguments] ecx +
xor eax eax +
lea ecx [ebp+Arguments] +
push ecx  +
push eax  +
lea ecx [ebp+Buffer] +
push ecx  +
push eax  +
push [ebp+dwMessageId]  +
mov dword ptr [ebp+Buffer] eax +
push eax  +
push 1900h  +
call ds:FormatMessageW  +
xor ecx ecx +
cmp ecx eax +
sbb eax eax +
and eax dword ptr [ebp+Buffer] +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
xor eax eax +
push eax  +
lea ecx [ebp+var_4] +
push ecx  +
push eax  +
mov [ebp+var_4] eax +
call GetIpForwardTable  +
cmp eax 7Ah +
setz al  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax dword_1005000 +
xor eax ebp +
mov [ebp+var_4] eax +
call ds:GetConsoleOutputCP  +
push eax  +
push offset a_U  +
lea eax [ebp+var_1C] +
push 0Ch  +
push eax  +
call sub_1001649  +
add esp 10h +
test eax eax +
jnz loc_1002BDA  +
lea eax [ebp+var_1C] +
push eax  +
push 0  +
call ds:_wsetlocale  +
pop ecx  +
pop ecx  +
push 0  +
push 0  +
push 100h  +
call ds:SetThreadPreferredUILanguages  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10024EF  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+arg_8]  +
call sub_1002B3E  +
mov esi eax +
push esi  +
push [ebp+dwMessageId]  +
push [ebp+arg_0]  +
call sub_1002A8E  +
add esp 10h +
push esi  +
mov edi eax +
call ds:LocalFree  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
jmp loc_1002C4A  +
mov ecx [esi] +
mov eax [ecx] +
mov [esi] eax +
push ecx  +
mov [eax+4] esi +
call SnmpUtilMemFree  +
cmp [esi] esi +
jnz loc_1002C3B  +
push esi  +
call SnmpUtilMemFree  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
sub eax 0 +
jz loc_1002C81  +
dec eax  +
jz loc_1002C78  +
dec eax  +
jz loc_1002C78  +
dec eax  +
jz loc_1002C78  +
dec eax  +
jz loc_1002C7D  +
dec eax  +
push 57h  +
pop eax  +
jmp loc_1002C83  +
push 0Ch  +
jmp loc_1002C7A  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_1C] +
mov eax [eax+0CCh] +
mov ecx [ebp+arg_8] +
mov eax [ecx+eax*4] +
dec eax  +
cmp eax 14h +
ja loc_1002DE5  +
jmp ds:off_1002DEC[eax*4]  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+8] eax +
jmp loc_1002DE5  +
mov edx [ebp+arg_14] +
mov ecx [ebp+arg_0] +
xor eax eax +
mov [ecx+60h] edx +
test edx edx +
jbe loc_1002DE5  +
mov edx [ebp+arg_10] +
mov dl [eax+edx] +
mov [ecx+eax+64h] dl +
inc eax  +
cmp eax [ecx+60h] +
jb loc_1002CD2  +
jmp loc_1002DE5  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+0Ch] eax +
jmp loc_1002DE5  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+10h] eax +
jmp loc_1002DE5  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+14h] eax +
jmp loc_1002DE5  +
mov edx [ebp+arg_14] +
mov ecx [ebp+arg_0] +
xor eax eax +
mov [ecx+18h] edx +
test edx edx +
jbe loc_1002DE5  +
mov edx [ebp+arg_10] +
mov dl [eax+edx] +
mov [ecx+eax+1Ch] dl +
inc eax  +
cmp eax [ecx+18h] +
jb loc_1002D24  +
jmp loc_1002DE5  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+24h] eax +
jmp loc_1002DE5  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+28h] eax +
jmp loc_1002DE5  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+2Ch] eax +
jmp loc_1002DE5  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+30h] eax +
jmp loc_1002DE5  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+34h] eax +
jmp loc_1002DE5  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+38h] eax +
jmp loc_1002DE5  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+3Ch] eax +
jmp loc_1002DE5  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+40h] eax +
jmp loc_1002DE5  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+44h] eax +
jmp loc_1002DE5  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+48h] eax +
jmp loc_1002DE5  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+4Ch] eax +
jmp loc_1002DE5  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+50h] eax +
jmp loc_1002DE5  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+54h] eax +
jmp loc_1002DE5  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+58h] eax +
jmp loc_1002DE5  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+5Ch] eax +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_1C] +
mov eax [eax+0CCh] +
mov ecx [ebp+arg_8] +
mov eax [ecx+eax*4] +
dec eax  +
cmp eax 12h +
ja loc_1002F4E  +
jmp ds:off_1002F55[eax*4]  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+8] eax +
jmp loc_1002F4E  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+0Ch] eax +
jmp loc_1002F4E  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+10h] eax +
jmp loc_1002F4E  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+14h] eax +
jmp loc_1002F4E  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+18h] eax +
jmp loc_1002F4E  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+1Ch] eax +
jmp loc_1002F4E  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+20h] eax +
jmp loc_1002F4E  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+24h] eax +
jmp loc_1002F4E  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+28h] eax +
jmp loc_1002F4E  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+2Ch] eax +
jmp loc_1002F4E  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+34h] eax +
jmp loc_1002F4E  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+38h] eax +
jmp loc_1002F4E  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+3Ch] eax +
jmp loc_1002F4E  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+40h] eax +
jmp loc_1002F4E  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+44h] eax +
jmp loc_1002F4E  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+48h] eax +
jmp loc_1002F4E  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+4Ch] eax +
jmp loc_1002F4E  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+50h] eax +
jmp loc_1002F4E  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+54h] eax +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_1C] +
mov eax [eax+0CCh] +
mov ecx [ebp+arg_8] +
mov eax [ecx+eax*4] +
dec eax  +
jz loc_1003009  +
dec eax  +
jz loc_1002FFE  +
dec eax  +
jz loc_1002FDF  +
dec eax  +
jz loc_1002FD4  +
dec eax  +
jnz loc_1003026  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+18h] eax +
jmp loc_1003026  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+14h] eax +
jmp loc_1003026  +
mov ecx [ebp+arg_10] +
mov dl [ecx] +
mov eax [ebp+arg_0] +
mov [eax+10h] dl +
mov dl [ecx+1] +
mov [eax+11h] dl +
mov dl [ecx+2] +
mov [eax+12h] dl +
mov cl [ecx+3] +
mov [eax+13h] cl +
jmp loc_1003026  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+0Ch] eax +
jmp loc_1003026  +
mov ecx [ebp+arg_10] +
mov dl [ecx] +
mov eax [ebp+arg_0] +
mov [eax+8] dl +
mov dl [ecx+1] +
mov [eax+9] dl +
mov dl [ecx+2] +
mov [eax+0Ah] dl +
mov cl [ecx+3] +
mov [eax+0Bh] cl +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_1C] +
mov eax [eax+0CCh] +
mov ecx [ebp+arg_8] +
mov eax [ecx+eax*4] +
dec eax  +
cmp eax 0Bh +
ja loc_100311B  +
jmp ds:off_100311F[eax*4]  +
mov ecx [ebp+arg_10] +
mov dl [ecx] +
mov eax [ebp+arg_0] +
mov [eax+8] dl +
mov dl [ecx+1] +
mov [eax+9] dl +
mov dl [ecx+2] +
mov [eax+0Ah] dl +
mov cl [ecx+3] +
mov [eax+0Bh] cl +
jmp loc_100311B  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+0Ch] eax +
jmp loc_100311B  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+10h] eax +
jmp loc_100311B  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+14h] eax +
jmp loc_100311B  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+18h] eax +
jmp loc_100311B  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+1Ch] eax +
jmp loc_100311B  +
mov ecx [ebp+arg_10] +
mov dl [ecx] +
mov eax [ebp+arg_0] +
mov [eax+20h] dl +
mov dl [ecx+1] +
mov [eax+21h] dl +
mov dl [ecx+2] +
mov [eax+22h] dl +
mov cl [ecx+3] +
mov [eax+23h] cl +
jmp loc_100311B  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+24h] eax +
jmp loc_100311B  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+28h] eax +
jmp loc_100311B  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+2Ch] eax +
jmp loc_100311B  +
mov ecx [ebp+arg_10] +
mov dl [ecx] +
mov eax [ebp+arg_0] +
mov [eax+30h] dl +
mov dl [ecx+1] +
mov [eax+31h] dl +
mov dl [ecx+2] +
mov [eax+32h] dl +
mov cl [ecx+3] +
mov [eax+33h] cl +
jmp loc_100311B  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+34h] eax +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_1C] +
mov eax [eax+0CCh] +
mov ecx [ebp+arg_8] +
mov eax [ecx+eax*4] +
dec eax  +
jz loc_10031BF  +
dec eax  +
jz loc_100319E  +
dec eax  +
jz loc_100317F  +
dec eax  +
jnz loc_10031C8  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+1Ch] eax +
jmp loc_10031C8  +
mov ecx [ebp+arg_10] +
mov dl [ecx] +
mov eax [ebp+arg_0] +
mov [eax+18h] dl +
mov dl [ecx+1] +
mov [eax+19h] dl +
mov dl [ecx+2] +
mov [eax+1Ah] dl +
mov cl [ecx+3] +
mov [eax+1Bh] cl +
jmp loc_10031C8  +
mov edx [ebp+arg_14] +
mov ecx [ebp+arg_0] +
xor eax eax +
mov [ecx+0Ch] edx +
test edx edx +
jbe loc_10031C8  +
mov edx [ebp+arg_10] +
mov dl [eax+edx] +
mov [ecx+eax+10h] dl +
inc eax  +
cmp eax [ecx+0Ch] +
jb loc_10031AD  +
jmp loc_10031C8  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+8] eax +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_1C] +
mov eax [eax+0CCh] +
mov ecx [ebp+arg_8] +
mov eax [ecx+eax*4] +
dec eax  +
cmp eax 0Eh +
ja loc_1003294  +
jmp ds:off_1003299[eax*4]  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+8] eax +
jmp loc_1003294  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+0Ch] eax +
jmp loc_1003294  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+10h] eax +
jmp loc_1003294  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+14h] eax +
jmp loc_1003294  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+18h] eax +
jmp loc_1003294  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+1Ch] eax +
jmp loc_1003294  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+20h] eax +
jmp loc_1003294  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+24h] eax +
jmp loc_1003294  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+28h] eax +
jmp loc_1003294  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+2Ch] eax +
jmp loc_1003294  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+30h] eax +
jmp loc_1003294  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+34h] eax +
jmp loc_1003294  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+38h] eax +
jmp loc_1003294  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+3Ch] eax +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_1C] +
mov eax [eax+0CCh] +
mov ecx [ebp+arg_8] +
mov eax [ecx+eax*4] +
dec eax  +
jz loc_1003351  +
dec eax  +
jz loc_1003332  +
dec eax  +
jz loc_1003327  +
dec eax  +
jz loc_1003308  +
dec eax  +
jnz loc_100335A  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+18h] eax +
jmp loc_100335A  +
mov ecx [ebp+arg_10] +
mov dl [ecx] +
mov eax [ebp+arg_0] +
mov [eax+14h] dl +
mov dl [ecx+1] +
mov [eax+15h] dl +
mov dl [ecx+2] +
mov [eax+16h] dl +
mov cl [ecx+3] +
mov [eax+17h] cl +
jmp loc_100335A  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+10h] eax +
jmp loc_100335A  +
mov ecx [ebp+arg_10] +
mov dl [ecx] +
mov eax [ebp+arg_0] +
mov [eax+0Ch] dl +
mov dl [ecx+1] +
mov [eax+0Dh] dl +
mov dl [ecx+2] +
mov [eax+0Eh] dl +
mov cl [ecx+3] +
mov [eax+0Fh] cl +
jmp loc_100335A  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+8] eax +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_1C] +
mov ecx [eax+0CCh] +
mov eax [ebp+arg_8] +
cmp dword ptr [eax+ecx*4] 7 +
jnz loc_100340D  +
mov edx [eax+2Ch] +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push 0Ch  +
pop esi  +
xor ecx ecx +
push ebx  +
mov bl [eax+esi*4] +
inc esi  +
mov [edi+ecx+8] bl +
inc ecx  +
cmp ecx 10h +
jb loc_100338C  +
cmp edx 10h +
jbe loc_10033BE  +
xor ecx ecx +
mov dl [eax+esi*4] +
inc esi  +
mov [edi+ecx+18h] dl +
inc ecx  +
cmp ecx 4 +
jb loc_10033A1  +
push dword ptr [edi+18h]  +
call ds:ntohl  +
mov [edi+18h] eax +
mov eax [ebp+arg_8] +
mov ecx [eax+esi*4] +
inc esi  +
inc esi  +
mov [edi+1Ch] ecx +
mov edx [eax+esi*4] +
inc esi  +
xor ecx ecx +
mov bl [eax+esi*4] +
inc esi  +
mov [edi+ecx+20h] bl +
inc ecx  +
cmp ecx 10h +
jb loc_10033CC  +
pop ebx  +
cmp edx 10h +
jbe loc_10033FF  +
xor ecx ecx +
mov dl [eax+esi*4] +
inc esi  +
mov [edi+ecx+30h] dl +
inc ecx  +
cmp ecx 4 +
jb loc_10033E2  +
push dword ptr [edi+30h]  +
call ds:ntohl  +
mov [edi+30h] eax +
mov eax [ebp+arg_8] +
mov eax [eax+esi*4] +
mov [edi+34h] eax +
mov eax [ebp+arg_10] +
mov [edi+38h] eax +
pop edi  +
pop esi  +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_1C] +
mov eax [eax+0CCh] +
mov ecx [ebp+arg_8] +
mov eax [ecx+eax*4] +
dec eax  +
jz loc_1003457  +
dec eax  +
jz loc_100344C  +
dec eax  +
jz loc_1003441  +
dec eax  +
jnz loc_1003460  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+14h] eax +
jmp loc_1003460  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+10h] eax +
jmp loc_1003460  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+0Ch] eax +
jmp loc_1003460  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+8] eax +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_1C] +
mov eax [eax+0CCh] +
mov ecx [ebp+arg_8] +
mov eax [ecx+eax*4] +
dec eax  +
jz loc_100348E  +
dec eax  +
jnz loc_10034AB  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+0Ch] eax +
jmp loc_10034AB  +
mov ecx [ebp+arg_10] +
mov dl [ecx] +
mov eax [ebp+arg_0] +
mov [eax+8] dl +
mov dl [ecx+1] +
mov [eax+9] dl +
mov dl [ecx+2] +
mov [eax+0Ah] dl +
mov cl [ecx+3] +
mov [eax+0Bh] cl +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_1C] +
mov ecx [eax+0CCh] +
mov eax [ebp+arg_8] +
cmp dword ptr [eax+ecx*4] 3 +
jnz loc_1003515  +
mov edx [eax+2Ch] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push 0Ch  +
pop ecx  +
xor esi esi +
mov bl [eax+ecx*4] +
inc ecx  +
mov [edi+esi+8] bl +
inc esi  +
cmp esi 10h +
jb loc_10034D9  +
cmp edx 10h +
jbe loc_100350C  +
xor edx edx +
lea eax [eax+ecx*4] +
mov cl [eax] +
add eax 4 +
mov [edi+edx+18h] cl +
inc edx  +
cmp edx 4 +
jb loc_10034F1  +
push dword ptr [edi+18h]  +
call ds:ntohl  +
mov [edi+18h] eax +
mov eax [ebp+arg_10] +
mov [edi+1Ch] eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1003534  +
cmp ecx 7FFFFFFFh +
jbe loc_1003539  +
mov eax 80070057h +
test eax eax +
jl loc_100357D  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_1003570  +
mov edx [ebp+arg_8] +
push edi  +
mov edi 7FFFFFFEh +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_100356B  +
mov cl [edx+eax] +
test cl cl +
jz loc_100356B  +
mov [eax] cl +
inc eax  +
dec esi  +
jnz loc_1003557  +
pop edi  +
test esi esi +
jnz loc_1003576  +
dec eax  +
mov ebx 8007007Ah +
mov byte ptr [eax] 0 +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 128h +
mov eax dword_1005000 +
xor eax ebp +
mov [ebp+var_4] eax +
push 0  +
call ds:time  +
mov [ebp+var_11C] eax +
lea eax [ebp+LibFileName] +
mov [esp+12Ch+var_12C] 104h +
push eax  +
call ds:GetSystemDirectoryA  +
test eax eax +
jnz loc_10035CC  +
call ds:GetLastError  +
jmp loc_100369A  +
lea eax [ebp+LibFileName] +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_10035D5  +
push ebx  +
mov ebx ds:LoadLibraryA +
push esi  +
mov esi ds:GetProcAddress +
sub eax edx +
cmp dword_1005CAC 0 +
push edi  +
lea edi [ebp+eax+LibFileName] +
jz loc_100362C  +
push offset aMgmtapi_dll  +
lea eax [ebp+var_4] +
sub eax edi +
push eax  +
push edi  +
call sub_100351E  +
test eax eax +
jl loc_1003641  +
lea eax [ebp+LibFileName] +
push eax  +
call ebx  +
test eax eax +
jz loc_100362C  +
push offset ProcName  +
push eax  +
call esi  +
mov dword_1005CD4 eax +
push offset aInetmib1_dll  +
lea eax [ebp+var_4] +
sub eax edi +
push eax  +
push edi  +
call sub_100351E  +
test eax eax +
jge loc_1003645  +
push 8  +
jmp loc_1003678  +
lea eax [ebp+LibFileName] +
push eax  +
call ebx  +
mov edi eax +
test edi edi +
jz loc_1003676  +
push offset aSnmpextensioni  +
push edi  +
call esi  +
mov dword_1005CCC eax +
test eax eax +
jz loc_1003676  +
push offset aSnmpextensionq  +
push edi  +
call esi  +
mov dword_1005CD0 eax +
test eax eax +
jnz loc_100367B  +
push 2  +
pop eax  +
jmp loc_1003697  +
lea eax [ebp+var_128] +
push eax  +
lea eax [ebp+var_120] +
push eax  +
push [ebp+var_11C]  +
call dword_1005CCC  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10024EF  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
push ebx  +
xor ebx ebx +
push esi  +
mov esi [ebp+arg_4] +
lea eax [ebp+pVb] +
push edi  +
mov edi ds:fprintf +
mov [ebp+var_1C] eax +
mov [ebp+var_18] 1 +
mov [ebp+var_10] ebx +
mov [ebp+var_14] ebx +
mov [ebp+var_C] ebx +
cmp dword_1005CAC ebx +
jz loc_10036F3  +
mov eax ds:_iob +
push esi  +
add eax 40h +
push offset aReadtableTypeD  +
push eax  +
call edi  +
add esp 0Ch +
cmp esi 0Ah +
ja loc_1003743  +
jz loc_1003730  +
mov eax esi +
dec eax  +
jz loc_100372C  +
sub eax 4 +
jz loc_1003725  +
dec eax  +
jz loc_100371E  +
dec eax  +
dec eax  +
jnz loc_100375E  +
push 2  +
mov eax [ebp+arg_0] +
add eax 8 +
push eax  +
call GetUdpStatisticsEx  +
jmp loc_1003BBB  +
push 2  +
jmp loc_1003BAF  +
push 2  +
jmp loc_1003B98  +
push 2  +
jmp loc_1003732  +
push 17h  +
mov eax [ebp+arg_0] +
add eax 8 +
push eax  +
call GetIpStatisticsEx  +
jmp loc_1003BBB  +
mov eax esi +
sub eax 0Bh +
jz loc_1003BAD  +
dec eax  +
dec eax  +
jz loc_1003BA6  +
dec eax  +
dec eax  +
jz loc_1003B96  +
push 0C8h  +
call SnmpUtilMemAlloc  +
cmp eax ebx +
jnz loc_1003774  +
push 8  +
pop eax  +
jmp loc_1003BBB  +
xor ecx ecx +
mov [ebp+pVb.name.ids] eax +
cmp dword_1005018 ebx +
jbe loc_1003796  +
mov edx dword_100501C[ecx*4] +
mov [eax] edx +
add eax 4 +
inc ecx  +
cmp ecx dword_1005018 +
jb loc_1003781  +
cmp esi 4 +
ja loc_10037CF  +
jz loc_10037C8  +
mov ecx esi +
sub ecx ebx +
jz loc_10037C1  +
dec ecx  +
jz loc_10037BA  +
dec ecx  +
jz loc_10037B3  +
dec ecx  +
jnz loc_10037FF  +
mov ebx offset unk_1005378 +
jmp loc_1003802  +
mov ebx offset unk_10052A0 +
jmp loc_1003802  +
mov ebx offset unk_10051C8 +
jmp loc_1003802  +
mov ebx offset unk_10050F0 +
jmp loc_1003802  +
mov ebx offset unk_1005450 +
jmp loc_1003802  +
mov ecx esi +
sub ecx 7 +
jz loc_10037F8  +
dec ecx  +
dec ecx  +
jz loc_10037F1  +
sub ecx 3 +
jz loc_10037EA  +
dec ecx  +
dec ecx  +
jnz loc_10037FF  +
mov ebx offset unk_1005888 +
jmp loc_1003802  +
mov ebx offset unk_10057B0 +
jmp loc_1003802  +
mov ebx offset unk_10056D8 +
jmp loc_1003802  +
mov ebx offset unk_1005600 +
jmp loc_1003802  +
mov ebx [ebp+arg_0] +
xor edx edx +
cmp [ebx] edx +
jbe loc_100381A  +
lea ecx [ebx+4] +
mov esi [ecx] +
mov [eax] esi +
add eax 4 +
inc edx  +
add ecx 4 +
cmp edx [ebx] +
jb loc_100380B  +
mov eax [ebx] +
add eax dword_1005018 +
mov [ebp+pVb.value.asnType] 5 +
mov [ebp+pVb.name.idLength] eax +
mov eax [ebp+arg_0] +
mov [ebp+var_4] eax +
jmp loc_1003837  +
mov edi ds:fprintf +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+var_1C] +
push eax  +
push 0A1h  +
call dword_1005CD0  +
xor esi esi +
cmp dword_1005CAC esi +
jz loc_100390B  +
push dword ptr [ebp+pVb.value.asnValue]  +
mov eax ds:_iob +
add eax 40h +
push offset aValue8dOid  +
push eax  +
call edi  +
mov eax dword_1005CD4 +
add esp 0Ch +
cmp eax esi +
jz loc_10038BB  +
lea ecx [ebp+pMem] +
push ecx  +
lea ecx [ebp+pVb] +
push ecx  +
mov [ebp+pMem] esi +
call eax  +
test eax eax +
jz loc_10038A2  +
push [ebp+pMem]  +
mov eax ds:_iob +
add eax 40h +
push offset aS  +
push eax  +
call edi  +
add esp 0Ch +
push [ebp+pMem]  +
call SnmpUtilMemFree  +
cmp dword_1005CD4 esi +
jz loc_10038BB  +
cmp dword_1005CAC 1 +
jbe loc_10038F9  +
xor esi esi +
cmp [ebp+pVb.name.idLength] esi +
jle loc_10038F9  +
cmp esi 6 +
mov eax [ebp+pVb.name.ids] +
push dword ptr [eax+esi*4]  +
jge loc_10038D4  +
push offset aD_  +
jmp loc_10038E5  +
cmp esi 9 +
jge loc_10038E0  +
push offset a2d_  +
jmp loc_10038E5  +
push offset a3d_  +
mov eax ds:_iob +
add eax 40h +
push eax  +
call edi  +
add esp 0Ch +
inc esi  +
cmp esi [ebp+pVb.name.idLength] +
jl loc_10038C2  +
mov eax ds:_iob +
add eax 40h +
push offset asc_1001224  +
push eax  +
call edi  +
pop ecx  +
pop ecx  +
cmp [ebp+var_10] 0 +
jnz loc_1003B68  +
mov ecx [ebx] +
mov eax dword_1005018 +
lea edx [ecx+eax] +
cmp [ebp+pVb.name.idLength] edx +
jb loc_1003B7B  +
sub ecx [ebx+0D0h] +
lea esi [ecx+eax] +
mov ecx [ebp+pVb.name.ids] +
cmp eax esi +
jnb loc_1003953  +
mov edx eax +
sub edx eax +
lea edx [ebx+edx*4+4] +
mov edi [ecx+eax*4] +
cmp edi [edx] +
jnz loc_1003B7B  +
inc eax  +
add edx 4 +
cmp eax esi +
jb loc_1003940  +
mov eax [ebp+arg_4] +
dec eax  +
jz loc_1003991  +
sub eax 5 +
jz loc_1003985  +
push 2  +
pop edx  +
sub eax edx +
jz loc_1003979  +
sub eax 4 +
jz loc_100396E  +
sub eax edx +
jnz loc_10039B5  +
cmp [ecx+28h] edx +
jnz loc_1003831  +
jmp loc_10039B5  +
mov eax [ebx+0CCh] +
cmp dword ptr [ecx+eax*4] 5 +
jmp loc_10039AF  +
mov eax [ebx+0CCh] +
cmp dword ptr [ecx+eax*4] 0Dh +
jmp loc_10039AF  +
mov eax [ebx+0CCh] +
mov eax [ecx+eax*4] +
cmp eax 14h +
jz loc_1003831  +
cmp eax 15h +
jz loc_1003831  +
cmp eax 16h +
jz loc_1003831  +
mov eax [ebp+var_4] +
mov esi [ebp+arg_0] +
cmp eax esi +
jz loc_10039E8  +
mov eax [eax] +
cmp eax esi +
jnz loc_10039D3  +
mov edx [ebx+0CCh] +
mov edx [ecx+edx*4] +
cmp edx [ebp+var_C] +
jz loc_10039E8  +
mov edx [ebx+0CCh] +
mov edi [ebp+var_C] +
cmp [ecx+edx*4] edi +
jz loc_10039E3  +
mov eax [esi] +
mov [ebp+var_4] eax +
jmp loc_1003A0D  +
push [ebp+nBytes]  +
call SnmpUtilMemAlloc  +
mov ecx eax +
mov [ebp+var_4] ecx +
test ecx ecx +
jz loc_1003B88  +
mov eax [esi+4] +
mov [ecx] esi +
mov [ecx+4] eax +
mov [eax] ecx +
mov [esi+4] ecx +
mov ecx [ebp+pVb.name.ids] +
mov eax [ebx+0CCh] +
mov eax [ecx+eax*4] +
mov [ebp+var_C] eax +
mov eax [ebp+arg_4] +
cmp eax 0Eh +
ja loc_1003B41  +
jmp ds:off_1003BC3[eax*4]  +
push ebx  +
sub esp 18h +
push 6  +
pop ecx  +
mov edi esp +
push [ebp+var_4]  +
lea esi [ebp+pVb] +
movs   +
call sub_1002C8C  +
jmp loc_1003B41  +
push ebx  +
sub esp 18h +
push 6  +
pop ecx  +
mov edi esp +
push [ebp+var_4]  +
lea esi [ebp+pVb] +
movs   +
call sub_1002E45  +
jmp loc_1003B41  +
push ebx  +
sub esp 18h +
push 6  +
pop ecx  +
mov edi esp +
push [ebp+var_4]  +
lea esi [ebp+pVb] +
movs   +
call sub_1002FA6  +
jmp loc_1003B41  +
push ebx  +
sub esp 18h +
push 6  +
pop ecx  +
mov edi esp +
push [ebp+var_4]  +
lea esi [ebp+pVb] +
movs   +
call sub_100302F  +
jmp loc_1003B41  +
push ebx  +
sub esp 18h +
push 6  +
pop ecx  +
mov edi esp +
push [ebp+var_4]  +
lea esi [ebp+pVb] +
movs   +
call sub_1003154  +
jmp loc_1003B41  +
push ebx  +
sub esp 18h +
push 6  +
pop ecx  +
mov edi esp +
push [ebp+var_4]  +
lea esi [ebp+pVb] +
movs   +
call sub_10031D1  +
jmp loc_1003B41  +
push ebx  +
sub esp 18h +
push 6  +
pop ecx  +
mov edi esp +
push [ebp+var_4]  +
lea esi [ebp+pVb] +
movs   +
call sub_10032DA  +
jmp loc_1003B41  +
push ebx  +
sub esp 18h +
push 6  +
pop ecx  +
mov edi esp +
push [ebp+var_4]  +
lea esi [ebp+pVb] +
movs   +
call sub_1003363  +
jmp loc_1003B41  +
push ebx  +
sub esp 18h +
push 6  +
pop ecx  +
mov edi esp +
push [ebp+var_4]  +
lea esi [ebp+pVb] +
movs   +
call sub_1003416  +
jmp loc_1003B41  +
push ebx  +
sub esp 18h +
push 6  +
pop ecx  +
mov edi esp +
push [ebp+var_4]  +
lea esi [ebp+pVb] +
movs   +
call sub_1003469  +
jmp loc_1003B41  +
push ebx  +
sub esp 18h +
push 6  +
pop ecx  +
mov edi esp +
push [ebp+var_4]  +
lea esi [ebp+pVb] +
movs   +
call sub_10034B4  +
lea eax [ebp+pVb] +
push eax  +
lea eax [ebp+pOidDst] +
push eax  +
call SnmpUtilOidCpy  +
lea eax [ebp+pVb] +
push eax  +
call SnmpUtilVarBindFree  +
mov eax [ebp+pOidDst.idLength] +
mov [ebp+pVb.name.idLength] eax +
mov eax [ebp+pOidDst.ids] +
mov [ebp+pVb.name.ids] eax +
jmp loc_1003831  +
lea eax [ebp+pVb] +
push eax  +
call SnmpUtilVarBindFree  +
push [ebp+var_10]  +
call sub_1002C5E  +
jmp loc_1003BBB  +
lea eax [ebp+pVb] +
push eax  +
call SnmpUtilVarBindFree  +
xor eax eax +
jmp loc_1003BBB  +
lea eax [ebp+pVb] +
push eax  +
call SnmpUtilVarBindFree  +
jmp loc_100376C  +
push 17h  +
mov eax [ebp+arg_0] +
add eax 8 +
push eax  +
call GetIcmpStatisticsEx  +
jmp loc_1003BBB  +
push 17h  +
jmp loc_100370D  +
push 17h  +
mov eax [ebp+arg_0] +
add eax 8 +
push eax  +
call GetTcpStatisticsEx  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_1005CAC 0 +
push ebx  +
mov ebx [ebp+arg_0] +
jz loc_1003C2E  +
mov eax ds:_iob +
push ebx  +
add eax 40h +
push offset aGettableTypeD  +
push eax  +
call ds:fprintf  +
add esp 0Ch +
cmp ebx 0Fh +
jbe loc_1003C40  +
mov eax [ebp+arg_4] +
mov dword ptr [eax] 57h +
xor eax eax +
jmp loc_1003CBB  +
push edi  +
jmp ds:off_1003CC0[ebx*4]  +
mov edi 168h +
jmp loc_1003C77  +
push 64h  +
pop edi  +
jmp loc_1003C77  +
push 20h  +
jmp loc_1003C51  +
push 38h  +
jmp loc_1003C51  +
mov edi 818h +
jmp loc_1003C77  +
push 44h  +
jmp loc_1003C51  +
push 1Ch  +
jmp loc_1003C51  +
push 40h  +
jmp loc_1003C51  +
push 10h  +
jmp loc_1003C51  +
push 24h  +
jmp loc_1003C51  +
push esi  +
push edi  +
call SnmpUtilMemAlloc  +
mov esi eax +
test esi esi +
jnz loc_1003C8F  +
mov eax [ebp+arg_4] +
mov dword ptr [eax] 8 +
jmp loc_1003CAD  +
push edi  +
push ebx  +
push esi  +
mov [esi+4] esi +
mov [esi] esi +
call sub_10036AB  +
mov edi eax +
test edi edi +
jz loc_1003CB1  +
push esi  +
call sub_1002C30  +
mov eax [ebp+arg_4] +
mov [eax] edi +
xor eax eax +
jmp loc_1003CB9  +
mov eax [ebp+arg_4] +
and dword ptr [eax] 0 +
mov eax esi +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 8  +
***
retn   +
***
