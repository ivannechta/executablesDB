stos   +
stos   +
stos   +
retn 8Eh  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100A044  +
mov dword ptr [esi] offset off_1001680 +
mov eax esi +
pop esi  +
retn   +
***
mov eax [ecx+10h] +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100A044  +
mov dword ptr [esi] offset off_1001790 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1004E12  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 0  +
push [ebp+dwExceptionFlags]  +
push [ebp+dwExceptionCode]  +
call ds:RaiseException  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp dword ptr [ebp+8] 8007000Eh +
push 1  +
setz al  +
dec eax  +
and eax 6 +
add eax 0C0000017h +
push eax  +
call sub_1004E1B  +
mov edi edi +
push edi  +
mov edx ecx +
push 6  +
pop ecx  +
xor eax eax +
mov edi edx +
stos   +
mov eax edx +
pop edi  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
push ecx  +
call ds:InitializeCriticalSection  +
and [ebp+var_1C] 0 +
jmp loc_1004EB3  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000017h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-1Ch] 8007000Eh +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax [ebp+var_1C] +
call __SEH_epilog4  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_8] +
test esi esi +
jz loc_1004EE0  +
push edi  +
mov edi offset unk_10144F0 +
movs   +
movs   +
movs   +
movs   +
pop edi  +
mov eax [ebp+arg_0] +
cmp eax 0FFFFFFFFh +
jz loc_1004F03  +
mov [ecx+2Ch] eax +
test eax eax +
jz loc_1004F03  +
cmp dword ptr [eax] 0 +
mov esi eax +
jz loc_1004F03  +
push 1  +
call dword ptr [esi+20h]  +
add esi 24h +
cmp dword ptr [esi] 0 +
jnz loc_1004EF6  +
mov esi dword_10145F0 +
jmp loc_1004F19  +
mov eax [esi] +
test eax eax +
jz loc_1004F16  +
push 1  +
call dword ptr [eax+20h]  +
add esi 4 +
cmp esi dword_10145F4 +
jb loc_1004F0B  +
xor eax eax +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+lpArguments] +
push esi  +
test ebx ebx +
jnz loc_1004F4A  +
push ebx  +
push ebx  +
push 1  +
push 0C0000005h  +
call ds:RaiseException  +
mov esi [ebx+8] +
test esi esi +
jz loc_1004F68  +
push edi  +
push dword ptr [esi+4]  +
call dword ptr [esi]  +
mov edi [esi+8] +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov esi edi +
test edi edi +
jnz loc_1004F52  +
pop edi  +
and dword ptr [ebx+8] 0 +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
mov edi ds:__imp_free +
test eax eax +
jz loc_1004F90  +
push eax  +
call edi  +
and dword ptr [esi] 0 +
pop ecx  +
mov eax [esi+4] +
test eax eax +
jz loc_1004F9F  +
push eax  +
call edi  +
and dword ptr [esi+4] 0 +
pop ecx  +
and dword ptr [esi+8] 0 +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_1004FC1  +
push eax  +
call ds:__imp_free  +
and dword ptr [esi] 0 +
pop ecx  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100A0A7  +
test byte ptr [ebp+8] 1 +
jz loc_1004FEA  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_1005007  +
pop ebp  +
jmp loc_1004E00  +
pop ebp  +
retn 4  +
***
xor eax offset dword_10144EC +
mov ecx edx +
mov [esi+28h] eax +
call sub_1004E78  +
test eax eax +
jge loc_1005048  +
mov byte_10144E8 1 +
jmp loc_100504F  +
mov dword ptr [esi+4] 24h +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+4] +
cmp dword ptr [edi] 0 +
jz loc_1005091  +
cmp dword ptr [esi+0Ch] 0 +
jz loc_1005077  +
push edi  +
call sub_1004F2D  +
and dword ptr [esi+0Ch] 0 +
mov eax [esi+28h] +
test eax eax +
jz loc_1005084  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
add esi 10h +
push esi  +
call ds:DeleteCriticalSection  +
and dword ptr [edi] 0 +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
mov ebx ecx +
mov esi [ebx+2Ch] +
push edi  +
xor edi edi +
cmp esi edi +
jz loc_10050C6  +
jmp loc_10050C2  +
mov eax [esi+10h] +
cmp eax edi +
jz loc_10050B8  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push edi  +
mov [esi+10h] edi +
call dword ptr [esi+20h]  +
add esi 24h +
cmp [esi] edi +
jnz loc_10050AB  +
mov esi dword_10145F0 +
jmp loc_10050DB  +
mov eax [esi] +
cmp eax edi +
jz loc_10050D8  +
push edi  +
call dword ptr [eax+20h]  +
add esi 4 +
cmp esi dword_10145F4 +
jb loc_10050CE  +
pop edi  +
pop esi  +
mov ecx ebx +
pop ebx  +
jmp sub_1005059  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_8]  +
mov esi ecx +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1004EC8  +
mov ebx eax +
xor edi edi +
cmp ebx edi +
jl loc_1005149  +
call ds:GetCurrentThreadId  +
push 0Ch  +
mov [esi+30h] eax +
mov [esi+34h] edi +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax edi +
jz loc_1005134  +
mov [eax] edi +
mov [eax+4] edi +
mov [eax+8] edi +
jmp loc_1005136  +
xor eax eax +
mov [esi+34h] eax +
cmp eax edi +
jnz loc_1005144  +
mov eax 8007000Eh +
jmp loc_1005149  +
mov [esi+38h] edi +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0  +
push [ebp+arg_0]  +
mov esi ecx +
push 0  +
mov ecx offset dword_1014510 +
call sub_10050F2  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_100518E  +
push eax  +
call sub_1004FF6  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mul  [ebp+arg_8] +
test edx edx +
ja loc_10051A9  +
cmp eax 0FFFFFFFFh +
jbe loc_10051B0  +
mov eax 80070057h +
jmp loc_10051B7  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_4]  +
and [ebp+cb] 0 +
push [ebp+arg_0]  +
lea eax [ebp+cb] +
push eax  +
call sub_1005195  +
test eax eax +
jge loc_10051E1  +
xor eax eax +
jmp locret_10051EA  +
push [ebp+cb]  +
call ds:CoTaskMemAlloc  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_8]  +
and [ebp+cb] 0 +
push [ebp+arg_4]  +
lea eax [ebp+cb] +
push eax  +
call sub_1005195  +
test eax eax +
jge loc_1005214  +
xor eax eax +
jmp locret_1005220  +
push [ebp+cb]  +
push [ebp+pv]  +
call ds:CoTaskMemRealloc  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call ds:malloc  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call ds:__imp_free  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpString]  +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
push eax  +
push [ebp+lpString]  +
mov eax [ebp+arg_4] +
add eax eax +
push eax  +
push [ebp+arg_0]  +
call memcpy_s  +
add esp 10h +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_10052C6  +
cmp eax 0Ch +
jz loc_10052BF  +
cmp eax 16h +
jz loc_10052B8  +
cmp eax 22h +
jz loc_10052B8  +
cmp eax 50h +
jz loc_10052C6  +
push 80004005h  +
call loc_1004E39  +
push 80070057h  +
jmp loc_10052B3  +
push 8007000Eh  +
jmp loc_10052B3  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call memcpy_s  +
add esp 10h +
push eax  +
call sub_100528E  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call wcsncpy_s  +
add esp 10h +
push eax  +
call sub_100528E  +
pop ebp  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1004E78  +
test eax eax +
jl loc_100532D  +
mov byte ptr [esi+18h] 1 +
pop esi  +
retn   +
***
call ds:GetLastError  +
test eax eax +
jle locret_1005348  +
and eax 0FFFFh +
or eax 80070000h +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jle loc_1005364  +
and eax 0FFFFh +
or eax 80070000h +
pop ebp  +
retn 4  +
***
add ecx 8 +
push ecx  +
call ds:InterlockedIncrement  +
retn   +
***
add ecx 8 +
push ecx  +
call ds:InterlockedDecrement  +
retn   +
***
mov eax [ecx+8] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+8] +
push edi  +
xor edi edi +
cmp ebx edi +
jnz loc_10053AD  +
mov eax 80004003h +
jmp loc_10053DE  +
push esi  +
lea esi [ecx+28h] +
cmp [esi] edi +
jnz loc_10053CF  +
push esi  +
push offset dword_10018C8  +
push 1  +
push edi  +
push offset dword_100155C  +
call ds:CoCreateInstance  +
mov edi eax +
test edi edi +
jl loc_10053DB  +
mov eax [esi] +
mov [ebx] eax +
mov esi [esi] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
mov eax edi +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jz loc_1005437  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea edi [ebx-1] +
xor eax eax +
test edi edi +
jbe loc_100542F  +
mov edx [ebp+arg_8] +
movzx ecx word ptr [edx] +
test cx cx +
jz loc_100542F  +
mov [esi+eax*2] cx +
cmp word ptr [edx] 27h +
jnz loc_1005428  +
lea ecx [ebx-2] +
cmp eax ecx +
jnb loc_1005428  +
push 27h  +
inc eax  +
pop ecx  +
mov [esi+eax*2] cx +
inc edx  +
inc edx  +
inc eax  +
cmp eax edi +
jb loc_1005407  +
xor ecx ecx +
pop edi  +
mov [esi+eax*2] cx +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov eax 80004005h +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi+4] 0 +
jnz loc_10054A0  +
cmp dword ptr [esi+8] 0 +
jnz loc_10054A0  +
push offset ModuleName  +
call ds:GetModuleHandleW  +
test eax eax +
jz loc_1005482  +
push offset ProcName  +
push eax  +
call ds:GetProcAddress  +
mov [esi+4] eax +
jmp loc_10054A0  +
push offset LibFileName  +
call ds:LoadLibraryW  +
test eax eax +
jz loc_10054A0  +
push offset aRegdeletekeyw  +
push eax  +
call ds:GetProcAddress  +
mov [esi+8] eax +
mov eax [esi+4] +
test eax eax +
jz loc_10054B4  +
push 0  +
push 0  +
push [ebp+arg_0]  +
push dword ptr [esi]  +
call eax  +
jmp loc_10054CA  +
mov eax [esi+8] +
test eax eax +
jz loc_10054C4  +
push [ebp+arg_0]  +
push dword ptr [esi]  +
call eax  +
jmp loc_10054CA  +
call ds:GetLastError  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
xor eax eax +
test ecx ecx +
jz loc_10054EB  +
push ecx  +
call ds:RegCloseKey  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
and [ebp+phkResult] 0 +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [ebp+phkResult] +
push eax  +
push [ebp+dwDisposition]  +
mov esi ecx +
push [ebp+samDesired]  +
push [ebp+dwOptions]  +
push [ebp+lpClass]  +
push 0  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegCreateKeyExW  +
mov ecx [ebp+arg_18] +
test ecx ecx +
jz loc_100552D  +
mov edx [ebp+dwDisposition] +
mov [ecx] edx +
test eax eax +
jnz loc_100553D  +
mov ecx esi +
call sub_10054D4  +
mov ecx [ebp+phkResult] +
mov [esi] ecx +
pop esi  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+phkResult] 0 +
push esi  +
lea eax [ebp+phkResult] +
push eax  +
push [ebp+samDesired]  +
mov esi ecx +
push 0  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_1005579  +
mov ecx esi +
call sub_10054D4  +
mov ecx [ebp+phkResult] +
mov [esi] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 4  +
lea eax [ebp+Data] +
push eax  +
push 4  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [ecx]  +
call ds:RegSetValueExW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpData] 0 +
push esi  +
mov esi ecx +
jnz loc_10055BE  +
push 80004005h  +
call loc_1004E39  +
push [ebp+lpData]  +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
push eax  +
push [ebp+lpData]  +
push [ebp+dwType]  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [esi]  +
call ds:RegSetValueExW  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+lpData] +
push edi  +
mov ebx ecx +
test esi esi +
jnz loc_1005604  +
push 80004005h  +
call loc_1004E39  +
xor edi edi +
push esi  +
call ds:lstrlenW  +
inc eax  +
lea ecx [eax+eax] +
add esi ecx +
add edi ecx +
cmp eax 1 +
jnz loc_1005606  +
push edi  +
push [ebp+lpData]  +
push 7  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [ebx]  +
call ds:RegSetValueExW  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpString2]  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
neg eax  +
sbb al al +
inc al  +
pop ebp  +
retn 8  +
***
mov eax [ecx] +
push 27h  +
pop ecx  +
cmp cx [eax] +
jnz loc_1005676  +
push eax  +
call ds:CharNextW  +
push 27h  +
pop ecx  +
cmp cx [eax] +
jz loc_1005676  +
xor eax eax +
inc eax  +
retn   +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 64h +
push esi  +
mov esi ecx +
jge loc_1005693  +
mov eax 3E8h +
and dword ptr [esi] 0 +
push 2  +
push eax  +
mov [esi+4] eax +
call sub_10051C0  +
mov [esi+8] eax +
test eax eax +
jz loc_10056AD  +
xor ecx ecx +
mov [eax] cx +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi ecx +
mov eax [esi] +
lea ecx [eax+ebx+1] +
cmp ecx eax +
push edi  +
jle loc_100573E  +
cmp ecx ebx +
jle loc_100573E  +
mov edi [esi+4] +
cmp ecx edi +
jl loc_10056FE  +
cmp edi 3FFFFFFFh +
jg loc_100573E  +
add edi edi +
cmp ecx edi +
jge loc_10056DB  +
push 2  +
push edi  +
push dword ptr [esi+8]  +
call sub_10051F3  +
test eax eax +
jz loc_100573E  +
mov [esi+8] eax +
mov [esi+4] edi +
mov eax [esi] +
test eax eax +
jl loc_100573E  +
mov edx [esi+4] +
cmp eax edx +
jge loc_100573E  +
mov ecx edx +
sub ecx eax +
cmp ecx edx +
jg loc_100573E  +
lea edx [ebx+ebx] +
push edx  +
push [ebp+arg_0]  +
add ecx ecx +
push ecx  +
mov ecx [esi+8] +
lea eax [ecx+eax*2] +
push eax  +
call sub_10052CF  +
add [esi] ebx +
mov eax [esi] +
mov ecx [esi+8] +
xor edx edx +
mov [ecx+eax*2] dx +
xor eax eax +
add esp 10h +
inc eax  +
jmp loc_1005740  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr dword_101456C 1 +
jnz loc_10057AF  +
or dword_101456C 1 +
push 8  +
pop eax  +
mov word_1014550 ax +
mov eax 4008h +
push 13h  +
mov word_1014558 ax +
pop eax  +
push 11h  +
mov word_1014560 ax +
pop eax  +
mov lpString2 offset aS +
mov dword_1014554 offset aM +
mov dword_101455C offset aD +
mov dword_1014564 offset aB +
mov word_1014568 ax +
push esi  +
xor esi esi +
push lpString2[esi*8]  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
test eax eax +
jz loc_10057D3  +
inc esi  +
cmp esi 4 +
jb loc_10057B2  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
mov ax word_1014550[esi*8] +
mov ecx [ebp+arg_4] +
mov [ecx] ax +
xor eax eax +
inc eax  +
jmp loc_10057CE  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_0] +
cmp eax 30h +
jl loc_100581F  +
cmp eax 39h +
jle loc_100581A  +
cmp eax 40h +
jle loc_100581F  +
cmp eax 46h +
jle loc_1005815  +
lea ecx [eax-61h] +
cmp ecx 5 +
ja loc_100581F  +
add eax 0FFFFFFA9h +
jmp loc_1005821  +
add eax 0FFFFFFC9h +
jmp loc_1005821  +
add eax 0FFFFFFD0h +
jmp loc_1005821  +
xor al al +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
push ds:off_1001970[esi*8]  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
test eax eax +
jz loc_1005853  +
inc esi  +
cmp esi 0Eh +
jb loc_1005832  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
mov eax ds:dword_1001974[esi*8] +
jmp loc_100584E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+lpsz] +
push esi  +
xor esi esi +
test eax eax +
jnz loc_100587F  +
jmp loc_100588D  +
cmp cx [ebp+arg_4] +
jz loc_1005889  +
push eax  +
call ds:CharNextW  +
movzx ecx word ptr [eax] +
test cx cx +
jnz loc_1005872  +
jmp loc_100588B  +
mov esi eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_0] +
cmp eax 9 +
jl loc_10058B9  +
cmp eax 0Ah +
jle loc_10058B4  +
cmp eax 0Dh +
jz loc_10058B4  +
cmp eax 20h +
jnz loc_10058B9  +
xor eax eax +
inc eax  +
jmp loc_10058BB  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
jmp loc_10058D7  +
push dword ptr [esi]  +
call ds:CharNextW  +
mov [esi] eax +
mov ecx esi +
mov eax [esi] +
movzx eax word ptr [eax] +
push eax  +
call sub_1005897  +
test eax eax +
jnz loc_10058CB  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
call sub_10058C4  +
mov eax [esi] +
movzx ecx word ptr [eax] +
xor edx edx +
cmp dx cx +
jnz loc_1005911  +
mov eax 80020009h +
jmp loc_10059F1  +
push ebx  +
push edi  +
mov edi [ebp+arg_0] +
push 27h  +
pop edx  +
mov [ebp+var_4] edi +
cmp dx cx +
jnz loc_100599F  +
mov ebx ds:CharNextW +
push eax  +
call ebx  +
mov [esi] eax +
jmp loc_1005982  +
mov ecx esi +
call sub_1005659  +
test eax eax +
jnz loc_1005989  +
mov eax [esi] +
push 27h  +
pop ecx  +
cmp cx [eax] +
jnz loc_1005948  +
push eax  +
call ebx  +
mov [esi] eax +
mov eax [esi] +
push eax  +
mov [ebp+arg_0] eax +
call ebx  +
mov edx [ebp+var_4] +
mov [esi] eax +
sub eax [ebp+arg_0] +
add edx 2000h +
sar eax 1 +
lea ecx [edi+eax*2+2] +
cmp ecx edx +
jnb loc_10059F6  +
test eax eax +
jle loc_1005980  +
mov ecx [ebp+arg_0] +
mov dx [ecx] +
mov [edi] dx +
inc edi  +
inc edi  +
inc ecx  +
inc ecx  +
dec eax  +
jnz loc_1005973  +
mov eax [esi] +
xor ecx ecx +
cmp cx [eax] +
jnz loc_100592E  +
mov eax [esi] +
xor ecx ecx +
cmp cx [eax] +
jz loc_10059F6  +
xor eax eax +
mov [edi] ax +
push dword ptr [esi]  +
call ebx  +
mov [esi] eax +
jmp loc_10059ED  +
mov ebx [esi] +
movzx eax word ptr [ebx] +
push eax  +
mov ecx esi +
call sub_1005897  +
test eax eax +
jnz loc_10059E8  +
push ebx  +
call ds:CharNextW  +
mov edx [ebp+var_4] +
mov [esi] eax +
sub eax ebx +
sar eax 1 +
lea ecx [edi+eax*2+2] +
add edx 2000h +
cmp ecx edx +
jnb loc_10059F6  +
test eax eax +
jle loc_10059DF  +
mov cx [ebx] +
mov [edi] cx +
inc edi  +
inc edi  +
inc ebx  +
inc ebx  +
dec eax  +
jnz loc_10059D2  +
mov eax [esi] +
xor ecx ecx +
cmp cx [eax] +
jnz loc_100599F  +
xor eax eax +
mov [edi] ax +
xor eax eax +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 4  +
mov eax 80020009h +
jmp loc_10059EF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi offset off_100158C +
push dword ptr [esi]  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
test eax eax +
jz loc_1005A2F  +
add esi 4 +
cmp esi offset dword_10015BC +
jl loc_1005A0D  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 4  +
xor eax eax +
jmp loc_1005A2A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
lea ecx [ebp+cSubKeys] +
push ecx  +
push eax  +
push eax  +
push eax  +
push [ebp+hKey]  +
mov [ebp+cSubKeys] eax +
call ds:RegQueryInfoKeyW  +
test eax eax +
jz loc_1005A62  +
xor eax eax +
jmp locret_1005A6B  +
xor eax eax +
cmp eax [ebp+cSubKeys] +
sbb eax eax +
neg eax  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 2004h +
call __alloca_probe  +
mov eax dword_1014484 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
cmp word ptr [esi] 3Dh +
push edi  +
mov edi ecx +
jnz loc_1005AC9  +
push esi  +
call sub_10058ED  +
test eax eax +
jl loc_1005ACB  +
mov ecx edi +
call sub_10058C4  +
lea eax [ebp+var_2004] +
push eax  +
mov ecx edi +
call sub_10058ED  +
test eax eax +
jl loc_1005ACB  +
push esi  +
mov ecx edi +
call sub_10058ED  +
test eax eax +
jl loc_1005ACB  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_10113D3  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
jmp loc_1005AF3  +
mov eax [esi] +
mov ecx [eax] +
push eax  +
mov [esi] ecx +
call sub_1005241  +
cmp dword ptr [esi] 0 +
jnz loc_1005AE7  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jl loc_1005B19  +
cmp eax [ecx+8] +
jge loc_1005B19  +
mov ecx [ecx] +
lea eax [ecx+eax*4] +
pop ebp  +
retn 4  +
***
push 0  +
push 0  +
push 1  +
push 0C000008Ch  +
call ds:RaiseException  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jl loc_1005B4B  +
cmp eax [ecx+8] +
jge loc_1005B4B  +
mov ecx [ecx+4] +
lea eax [ecx+eax*4] +
pop ebp  +
retn 4  +
***
push 0  +
push 0  +
push 1  +
push 0C000008Ch  +
call ds:RaiseException  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+8] edi +
jle loc_1005B8B  +
mov eax [ebp+arg_0] +
push dword ptr [eax]  +
mov eax [esi] +
push dword ptr [eax+edi*4]  +
call sub_1005639  +
test al al +
jnz loc_1005B94  +
inc edi  +
cmp edi [esi+8] +
jl loc_1005B72  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
mov eax edi +
jmp loc_1005B8E  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1005229  +
test eax eax +
jnz loc_1005BC8  +
push 8007000Eh  +
call loc_1004E39  +
mov [esi] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
lea eax [ebp+arg_4] +
push [ebp+arg_0]  +
push eax  +
call sub_1005195  +
test eax eax +
jge loc_1005BF2  +
push eax  +
call loc_1004E39  +
mov eax [ebp+arg_4] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 224h +
mov eax dword_1014484 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
mov eax ecx +
mov ecx [ebp+lpSubKey] +
push 2001Fh  +
push ecx  +
push dword ptr [eax]  +
xor esi esi +
mov [ebp+var_21C] ecx +
lea ecx [ebp+var_214] +
mov [ebp+var_218] eax +
mov [ebp+var_214] esi +
mov [ebp+var_210] esi +
mov [ebp+var_20C] esi +
call sub_1005547  +
mov edi eax +
cmp edi esi +
jz loc_1005C70  +
lea ecx [ebp+var_214] +
call sub_10054D4  +
mov eax edi +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_10113D3  +
leave   +
retn 4  +
mov edi ds:RegEnumKeyExW +
jmp loc_1005C8E  +
lea eax [ebp+SubKey] +
push eax  +
lea ecx [ebp+var_214] +
call sub_1005BFE  +
cmp eax esi +
jnz loc_1005CD9  +
lea eax [ebp+var_224] +
push eax  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+var_208] +
push eax  +
lea eax [ebp+SubKey] +
push eax  +
push esi  +
push [ebp+var_214]  +
mov [ebp+var_208] 100h +
call edi  +
test eax eax +
jz loc_1005C78  +
lea ecx [ebp+var_214] +
call sub_10054D4  +
push [ebp+var_21C]  +
mov ecx [ebp+var_218] +
call sub_100544E  +
lea ecx [ebp+var_214] +
mov esi eax +
call sub_10054D4  +
mov eax esi +
jmp loc_1005C60  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+8] edi +
jle loc_1005D25  +
push edi  +
mov ecx esi +
call loc_1005AFF  +
push dword ptr [eax]  +
call ??_V@YAXPAX@Z  +
pop ecx  +
push edi  +
mov ecx esi +
call loc_1005B30  +
push dword ptr [eax]  +
call ??_V@YAXPAX@Z  +
inc edi  +
cmp edi [esi+8] +
pop ecx  +
jl loc_1005CFF  +
mov ecx esi +
call sub_1004F77  +
pop edi  +
xor eax eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp [ebp+lpString] 0 +
push esi  +
mov esi ecx +
jnz loc_1005D49  +
xor eax eax +
jmp loc_1005D6D  +
push [ebp+lpString]  +
and [ebp+var_4] 0 +
call ds:lstrlenW  +
push eax  +
push [ebp+lpString]  +
mov ecx esi +
call sub_10056B9  +
lea ecx [ebp+var_4] +
mov esi eax +
call sub_1005AE0  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea edi [esi+10h] +
push edi  +
call ds:EnterCriticalSection  +
lea ecx [esi+4] +
call sub_1005CF2  +
push edi  +
mov esi eax +
call ds:LeaveCriticalSection  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov ecx [eax] +
push offset dword_1001B28  +
push offset aAppid  +
push eax  +
call dword ptr [ecx+0Ch]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1005B62  +
cmp eax 0FFFFFFFFh +
jnz loc_1005DE3  +
xor eax eax +
jmp loc_1005DED  +
push eax  +
mov ecx esi +
call loc_1005B30  +
mov eax [eax] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [ecx] +
shl edx 2 +
add eax edx +
jz loc_1005E11  +
push esi  +
mov esi [ebp+arg_4] +
mov esi [esi] +
mov [eax] esi +
pop esi  +
mov eax [ecx+4] +
add eax edx +
jz loc_1005E1F  +
mov ecx [ebp+arg_8] +
mov ecx [ecx] +
mov [eax] ecx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 400h +
push esi  +
mov esi ecx +
jbe loc_1005E43  +
push [ebp+arg_0]  +
call sub_1005BAA  +
jmp loc_1005E48  +
lea eax [esi+4] +
mov [esi] eax +
mov eax [esi] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 100h +
push esi  +
mov esi ecx +
jbe loc_1005E6F  +
push [ebp+arg_0]  +
call sub_1005BAA  +
jmp loc_1005E74  +
lea eax [esi+4] +
mov [esi] eax +
mov eax [esi] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_10018A0 +
call sub_1005059  +
test byte ptr [ebp+8] 1 +
jz loc_1005EA0  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push esi  +
mov dword ptr [esi] offset off_1001B38 +
call sub_1005D77  +
lea eax [esi+10h] +
cmp byte ptr [eax+18h] 0 +
jz loc_1005ED1  +
push eax  +
mov byte ptr [eax+18h] 0 +
call ds:DeleteCriticalSection  +
add esi 4 +
mov ecx esi +
call sub_1005CF2  +
mov ecx esi +
pop esi  +
jmp sub_1004F77  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
test eax eax +
jz loc_1005EF7  +
and dword ptr [eax] 0 +
mov eax 80004001h +
pop ebp  +
retn 0Ch  +
***
xor eax eax +
inc eax  +
retn 4  +
***
xor eax eax +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1005EAC  +
test [ebp+arg_0] 1 +
jz loc_1005F34  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
lea edi [esi+10h] +
push edi  +
call ds:EnterCriticalSection  +
lea eax [ebp+arg_0] +
push eax  +
lea ecx [esi+4] +
call sub_1005DCA  +
push edi  +
mov esi eax +
call ds:LeaveCriticalSection  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 58h +
mov eax dword_1014484 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
mov edi [ebp+lpString] +
mov esi ecx +
mov [ebp+var_58] ebx +
test edi edi +
jz loc_10060AC  +
test ebx ebx +
jz loc_10060AC  +
and dword ptr [ebx] 0 +
push edi  +
call ds:lstrlenW  +
add eax eax +
push eax  +
lea ecx [ebp+var_54] +
call sub_100567E  +
xor ecx ecx +
cmp [ebp+pv] ecx +
jnz loc_1005FD2  +
push ecx  +
call ds:CoTaskMemFree  +
mov eax 8007000Eh +
jmp loc_10060B1  +
mov [esi] edi +
mov [ebp+var_48] ecx +
cmp [edi] cx +
jz loc_100607B  +
mov ebx ds:CharNextW +
mov eax [esi] +
cmp word ptr [eax] 25h +
jnz loc_1006057  +
push eax  +
call ebx  +
mov [esi] eax +
cmp word ptr [eax] 25h +
jz loc_1006057  +
push 25h  +
push eax  +
call sub_1005861  +
mov edi eax +
test edi edi +
jz loc_1006091  +
mov ecx [esi] +
sub eax ecx +
sar eax 1 +
cmp eax 1Fh +
jg loc_100609A  +
push eax  +
push ecx  +
lea eax [ebp+var_44] +
push 20h  +
push eax  +
call sub_10052F5  +
mov ecx [esi+4] +
add esp 10h +
lea eax [ebp+var_44] +
push eax  +
call sub_1005F40  +
test eax eax +
jz loc_1006091  +
push eax  +
lea ecx [ebp+var_54] +
call sub_1005D36  +
test eax eax +
jz loc_10060A3  +
cmp [esi] edi +
jz loc_1006066  +
push dword ptr [esi]  +
call ebx  +
mov [esi] eax +
cmp eax edi +
jnz loc_100604B  +
jmp loc_1006066  +
push 1  +
push eax  +
lea ecx [ebp+var_54] +
call sub_10056B9  +
test eax eax +
jz loc_10060A3  +
push dword ptr [esi]  +
call ebx  +
mov [esi] eax +
cmp word ptr [eax] 0 +
jnz loc_1005FE6  +
mov ebx [ebp+var_58] +
xor ecx ecx +
mov eax [ebp+pv] +
mov [ebp+pv] ecx +
mov [ebx] eax +
push [ebp+pv]  +
call ds:CoTaskMemFree  +
mov eax [ebp+var_48] +
jmp loc_10060B1  +
mov [ebp+var_48] 80020009h +
jmp loc_1006083  +
mov [ebp+var_48] 80004005h +
jmp loc_1006083  +
mov [ebp+var_48] 8007000Eh +
jmp loc_1006083  +
mov eax 80004003h +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10113D3  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor ecx ecx +
cmp edi ecx +
jnz loc_10060E7  +
push ecx  +
push ecx  +
push 1  +
push 0C0000005h  +
call ds:RaiseException  +
mov esi [ebp+arg_4] +
cmp esi ecx +
jz loc_10060D8  +
mov eax [ebp+arg_8] +
cmp eax ecx +
jz loc_10060D8  +
mov [esi] eax +
call ds:GetCurrentThreadId  +
lea ebx [edi+4] +
push ebx  +
mov [esi+4] eax +
call ds:EnterCriticalSection  +
mov eax [edi+1Ch] +
mov [esi+8] eax +
push ebx  +
mov [edi+1Ch] esi +
call ds:LeaveCriticalSection  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1004F77  +
test [ebp+arg_0] 1 +
jz loc_1006140  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1004FAB  +
test [ebp+arg_0] 1 +
jz loc_1006166  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+8] +
push edi  +
mov edi off_1014490 +
push 4  +
inc eax  +
push eax  +
push dword ptr [esi]  +
call edi  +
add esp 0Ch +
test eax eax +
jnz loc_1006197  +
xor eax eax +
jmp loc_10061C5  +
mov [esi] eax +
mov eax [esi+8] +
push 4  +
inc eax  +
push eax  +
push dword ptr [esi+4]  +
call edi  +
add esp 0Ch +
test eax eax +
jz loc_1006193  +
push [ebp+arg_4]  +
mov ecx esi +
push [ebp+arg_0]  +
mov [esi+4] eax +
push dword ptr [esi+8]  +
call sub_1005DF7  +
inc dword ptr [esi+8]  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 2  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1005BD4  +
push eax  +
mov ecx esi +
call sub_1005E28  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 2  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1005BD4  +
push eax  +
mov ecx esi +
call sub_1005E54  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 1  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1005BD4  +
push eax  +
mov ecx esi +
call sub_1005E54  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
xor eax eax +
mov [ebp+var_18] ecx +
cmp [ebp+lpString] eax +
jz loc_100631C  +
cmp [ebp+arg_4] eax +
jz loc_100631C  +
push ebx  +
push esi  +
mov esi ds:lstrlenW +
push edi  +
push [ebp+lpString]  +
mov [ebp+var_4] eax +
call esi  +
lea edi [eax+eax+2] +
xor ecx ecx +
push 2  +
pop edx  +
mov eax edi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??_U@YAPAXI@Z  +
pop ecx  +
push [ebp+arg_4]  +
mov ebx eax +
mov [ebp+var_14] ebx +
mov [ebp+var_10] ebx +
call esi  +
lea esi [eax+eax+2] +
xor ecx ecx +
push 2  +
pop edx  +
mov eax esi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??_U@YAPAXI@Z  +
pop ecx  +
mov [ebp+var_8] eax +
mov [ebp+var_C] eax +
test ebx ebx +
jz loc_10062EC  +
test eax eax +
jz loc_10062EC  +
push edi  +
push [ebp+lpString]  +
push edi  +
push ebx  +
call sub_10052CF  +
push esi  +
push [ebp+arg_4]  +
push esi  +
push [ebp+var_8]  +
call sub_10052CF  +
mov ecx [ebp+var_18] +
add esp 20h +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
call sub_1006172  +
test eax eax +
jnz loc_10062F5  +
mov [ebp+var_4] 8007000Eh +
jmp loc_10062FD  +
and [ebp+var_10] 0 +
and [ebp+var_C] 0 +
push [ebp+var_C]  +
call ??_V@YAXPAX@Z  +
push [ebp+var_10]  +
call ??_V@YAXPAX@Z  +
pop ecx  +
pop ecx  +
xor eax eax +
cmp [ebp+var_4] eax +
pop edi  +
pop esi  +
setnl al  +
pop ebx  +
jmp locret_100631E  +
xor eax eax +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpString] 0 +
jz loc_100637E  +
cmp [ebp+arg_8] 0 +
jz loc_100637E  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea edi [esi+10h] +
push edi  +
call ds:EnterCriticalSection  +
push [ebp+arg_8]  +
and [ebp+arg_0] 0 +
push [ebp+lpString]  +
lea ecx [esi+4] +
call sub_100623C  +
push edi  +
mov esi eax +
call ds:LeaveCriticalSection  +
lea ecx [ebp+arg_0] +
call sub_1005AE0  +
mov eax esi +
neg eax  +
sbb eax eax +
and eax 7FF8FFF2h +
pop edi  +
add eax 8007000Eh +
pop esi  +
jmp loc_1006383  +
mov eax 80070057h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 211Ch +
call __alloca_probe  +
mov eax dword_1014484 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov [ebp+var_211C] eax +
lea eax [ebp+String1] +
xor edi edi +
push eax  +
mov [ebp+var_2118] ecx +
mov [ebp+var_2114] esi +
mov dword ptr [ebp+Data] ebx +
mov [ebp+var_210C] edi +
call sub_10058ED  +
cmp eax edi +
jl loc_1006669  +
lea eax [ebp+var_210C] +
push eax  +
lea eax [ebp+String1] +
push eax  +
call sub_100574C  +
test eax eax +
jnz loc_1006406  +
mov eax 80020009h +
jmp loc_1006669  +
mov ecx [ebp+var_2118] +
call sub_10058C4  +
mov ecx [ebp+var_2118] +
lea eax [ebp+String1] +
push eax  +
call sub_10058ED  +
cmp eax edi +
jl loc_1006669  +
movzx eax word ptr [ebp+var_210C] +
sub eax 8 +
jz loc_1006633  +
sub eax 9 +
jz loc_100654C  +
dec eax  +
dec eax  +
jz loc_1006510  +
sub eax 3FF5h +
jnz loc_1006652  +
lea eax [ebp+String1] +
push eax  +
call ds:lstrlenW  +
inc eax  +
inc eax  +
push eax  +
lea ecx [ebp+lpData] +
mov [ebp+lpData] edi +
call sub_10061F4  +
mov esi [ebp+lpData] +
cmp esi edi +
jz loc_10064EB  +
cmp [ebp+String1] 0 +
lea edi [ebp+String1] +
jz loc_10064C5  +
mov ebx ds:CharNextW +
push edi  +
call ebx  +
movzx ecx word ptr [edi] +
cmp cx 5Ch +
jnz loc_10064B8  +
cmp word ptr [eax] 30h +
jnz loc_10064B8  +
xor ecx ecx +
mov [esi] cx +
inc esi  +
push eax  +
inc esi  +
call ebx  +
mov edi eax +
jmp loc_10064BF  +
mov [esi] cx +
inc esi  +
inc esi  +
inc edi  +
inc edi  +
cmp word ptr [edi] 0 +
jnz loc_1006498  +
mov ecx [ebp+var_2114] +
xor eax eax +
mov [esi] ax +
mov [esi+2] ax +
push [ebp+lpData]  +
push dword ptr [ebp+Data]  +
call sub_10055E9  +
mov esi eax +
xor edi edi +
jmp loc_10064EE  +
push 0Eh  +
pop esi  +
lea eax [ebp+var_2104] +
cmp [ebp+lpData] eax +
jz loc_1006646  +
lea ecx [ebp+lpData] +
call sub_1005B9D  +
jmp loc_1006646  +
lea eax [ebp+Data] +
push eax  +
push edi  +
push edi  +
lea eax [ebp+String1] +
push eax  +
mov [ebp+var_2114] edi +
call ds:VarUI4FromStr  +
push dword ptr [ebp+Data]  +
mov ecx esi +
push ebx  +
call sub_1005583  +
lea ecx [ebp+var_2114] +
mov esi eax +
call sub_1005AE0  +
jmp loc_1006646  +
lea eax [ebp+String1] +
push eax  +
call ds:lstrlenW  +
mov [ebp+var_210C] eax +
test al 1 +
jz loc_100656D  +
mov eax 80004005h +
jmp loc_1006669  +
cdq   +
sub eax edx +
mov ebx eax +
sar ebx 1 +
push ebx  +
lea ecx [ebp+lpData] +
mov [ebp+lpData] edi +
call sub_1006218  +
cmp [ebp+lpData] edi +
jnz loc_10065A5  +
lea eax [ebp+var_2104] +
test eax eax +
jz loc_1006563  +
lea ecx [ebp+lpData] +
call sub_1005B9D  +
jmp loc_1006563  +
push ebx  +
push edi  +
push [ebp+lpData]  +
call memset  +
add esp 0Ch +
cmp [ebp+var_210C] edi +
jle loc_10065FD  +
mov ecx [ebp+lpData] +
mov eax edi +
cdq   +
sub eax edx +
sar eax 1 +
lea esi [eax+ecx] +
movzx eax [ebp+edi*2+String1] +
push eax  +
call sub_10057EB  +
mov edx edi +
and edx 1 +
shl edx 2 +
push 4  +
pop ecx  +
sub ecx edx +
shl al cl +
or [esi] al +
inc edi  +
cmp edi [ebp+var_210C] +
jl loc_10065BD  +
mov esi [ebp+var_2114] +
xor edi edi +
mov esi [esi] +
push ebx  +
push [ebp+lpData]  +
push 3  +
push edi  +
push dword ptr [ebp+Data]  +
push esi  +
call ds:RegSetValueExW  +
mov esi eax +
lea eax [ebp+var_2104] +
cmp [ebp+lpData] eax +
jz loc_1006646  +
lea ecx [ebp+lpData] +
call sub_1005B9D  +
jmp loc_1006646  +
push 1  +
lea eax [ebp+String1] +
push eax  +
push ebx  +
mov ecx esi +
call sub_10055A6  +
mov esi eax +
cmp esi edi +
jz loc_1006652  +
push esi  +
call sub_100534E  +
jmp loc_1006669  +
push [ebp+var_211C]  +
mov ecx [ebp+var_2118] +
call sub_10058ED  +
cmp eax edi +
jl loc_1006669  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10113D3  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 225Ch +
call __alloca_probe  +
mov eax dword_1014484 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor ebx ebx +
mov [ebp+var_2214] eax +
mov eax [ebp+arg_C] +
push edi  +
mov [ebp+var_2210] ecx +
mov [ebp+var_2220] ebx +
mov [ebp+var_221C] ebx +
mov [ebp+var_2218] ebx +
mov [ebp+var_2258] eax +
call sub_10058ED  +
mov esi eax +
cmp esi ebx +
jmp loc_1006BD9  +
mov esi ds:lstrcmpiW +
push offset String2  +
push edi  +
mov [ebp+var_2224] 1 +
call esi  +
mov ebx eax +
neg ebx  +
push offset aForceremove  +
sbb ebx ebx +
push edi  +
inc ebx  +
call esi  +
test eax eax +
jz loc_100670C  +
test ebx ebx +
jz loc_10067C9  +
mov ecx [ebp+var_2210] +
push edi  +
call sub_10058ED  +
mov esi eax +
test esi esi +
jl loc_1006C43  +
cmp [ebp+arg_8] 0 +
jz loc_10067C9  +
xor esi esi +
push 5Ch  +
push edi  +
mov [ebp+var_2230] esi +
mov [ebp+var_222C] esi +
mov [ebp+var_2228] esi +
call sub_1005861  +
test eax eax +
jnz loc_1006BE7  +
mov ecx [ebp+var_2210] +
push edi  +
call sub_1005A02  +
test eax eax +
jz loc_100677E  +
mov eax [ebp+var_2214] +
push edi  +
lea ecx [ebp+var_2230] +
mov [ebp+var_2230] eax +
call sub_1005BFE  +
mov [ebp+var_2230] esi +
cmp ebx esi +
jz loc_10067BE  +
mov ecx [ebp+var_2210] +
push edi  +
call sub_10058ED  +
mov esi eax +
test esi esi +
jl loc_1006BF9  +
mov ecx [ebp+var_2210] +
push edi  +
call sub_1005A74  +
lea ecx [ebp+var_2230] +
mov esi eax +
call sub_10054D4  +
test esi esi +
jl loc_1006C43  +
jmp loc_1006B94  +
lea ecx [ebp+var_2230] +
call sub_10054D4  +
push offset aNoremove  +
push edi  +
call ds:lstrcmpiW  +
test eax eax +
jnz loc_10067F5  +
mov ecx [ebp+var_2210] +
and [ebp+var_2224] eax +
push edi  +
call sub_10058ED  +
mov esi eax +
test esi esi +
jl loc_1006C43  +
push offset aVal  +
push edi  +
call ds:lstrcmpiW  +
test eax eax +
jnz loc_1006912  +
mov ecx [ebp+var_2210] +
lea eax [ebp+ValueName] +
push eax  +
call sub_10058ED  +
mov esi eax +
xor ebx ebx +
cmp esi ebx +
jl loc_1006C43  +
mov ecx [ebp+var_2210] +
push edi  +
call sub_10058ED  +
mov esi eax +
cmp esi ebx +
jl loc_1006C43  +
cmp word ptr [edi] 3Dh +
jnz loc_1006BF2  +
cmp [ebp+arg_8] ebx +
jz loc_1006898  +
mov eax [ebp+var_2214] +
mov ecx [ebp+var_2210] +
mov [ebp+var_2248] eax +
push edi  +
lea eax [ebp+ValueName] +
push eax  +
lea eax [ebp+var_2248] +
push eax  +
mov [ebp+var_2244] ebx +
mov [ebp+var_2240] ebx +
call sub_100638C  +
lea ecx [ebp+var_2248] +
mov esi eax +
mov [ebp+var_2248] ebx +
call sub_10054D4  +
cmp esi ebx +
jmp loc_10067B3  +
cmp [ebp+arg_C] ebx +
jnz loc_1006901  +
cmp [ebp+var_2224] ebx +
jz loc_1006901  +
push 20006h  +
push ebx  +
push [ebp+var_2214]  +
lea ecx [ebp+hKey] +
mov [ebp+hKey] ebx +
mov [ebp+var_2238] ebx +
mov [ebp+var_2234] ebx +
call sub_1005547  +
cmp eax ebx +
jnz loc_1006C01  +
lea eax [ebp+ValueName] +
push eax  +
push [ebp+hKey]  +
call ds:RegDeleteValueW  +
cmp eax ebx +
jz loc_10068F6  +
cmp eax 2 +
jnz loc_1006C01  +
lea ecx [ebp+hKey] +
call sub_10054D4  +
mov ecx [ebp+var_2210] +
push edi  +
call sub_1005A74  +
jmp loc_10066D0  +
push 5Ch  +
push edi  +
call sub_1005861  +
test eax eax +
jnz loc_1006BF2  +
cmp [ebp+arg_8] eax +
jz loc_10069C1  +
mov esi 2001Fh +
push esi  +
push edi  +
push [ebp+var_2214]  +
lea ecx [ebp+var_2220] +
call sub_1005547  +
test eax eax +
jz loc_1006985  +
push 20019h  +
push edi  +
push [ebp+var_2214]  +
lea ecx [ebp+var_2220] +
call sub_1005547  +
test eax eax +
jz loc_1006985  +
xor ebx ebx +
push ebx  +
push ebx  +
push esi  +
push ebx  +
push ebx  +
push edi  +
push [ebp+var_2214]  +
lea ecx [ebp+var_2220] +
call sub_10054F2  +
mov esi eax +
cmp esi ebx +
jnz loc_1006C0F  +
mov ecx [ebp+var_2210] +
push edi  +
call sub_10058ED  +
mov esi eax +
test esi esi +
jl loc_1006C43  +
cmp word ptr [edi] 3Dh +
jnz loc_1006B94  +
mov ecx [ebp+var_2210] +
push edi  +
push 0  +
lea eax [ebp+var_2220] +
push eax  +
call sub_100638C  +
mov esi eax +
jmp loc_10067B1  +
cmp [ebp+arg_C] 0 +
jnz loc_10069E2  +
push 20019h  +
push edi  +
push [ebp+var_2214]  +
lea ecx [ebp+var_2220] +
call sub_1005547  +
mov ebx eax +
jmp loc_10069E5  +
push 2  +
pop ebx  +
test ebx ebx +
jz loc_10069F0  +
mov [ebp+arg_C] 1 +
push 0FFFFFFFFh  +
push edi  +
lea eax [ebp+SubKey] +
push 104h  +
push eax  +
call wcsncpy_s  +
add esp 10h +
push eax  +
call sub_100528E  +
mov ecx [ebp+var_2210] +
push edi  +
call sub_10058ED  +
mov esi eax +
test esi esi +
jl loc_1006C43  +
mov ecx [ebp+var_2210] +
push edi  +
call sub_1005A74  +
mov esi eax +
test esi esi +
jl loc_1006C43  +
cmp word ptr [edi] 7Bh +
jnz loc_1006A88  +
push edi  +
call ds:lstrlenW  +
cmp eax 1 +
jnz loc_1006A88  +
push [ebp+arg_C]  +
mov ecx [ebp+var_2210] +
push 0  +
push [ebp+var_2220]  +
push edi  +
call sub_100667F  +
mov esi eax +
test esi esi +
jge loc_1006A72  +
cmp [ebp+arg_C] 0 +
jz loc_1006C43  +
mov ecx [ebp+var_2210] +
push edi  +
call sub_10058ED  +
mov esi eax +
test esi esi +
jl loc_1006C43  +
mov eax [ebp+var_2258] +
mov [ebp+arg_C] eax +
cmp ebx 2 +
jz loc_1006BDB  +
test ebx ebx +
jz loc_1006AB3  +
test eax eax +
jnz loc_1006BDB  +
push ebx  +
call sub_100534E  +
mov esi eax +
jmp loc_1006C43  +
test eax eax +
jz loc_1006B0A  +
push [ebp+var_2220]  +
mov ecx [ebp+var_2210] +
call sub_1005A38  +
test eax eax +
jz loc_1006B0A  +
mov ecx [ebp+var_2210] +
lea eax [ebp+SubKey] +
push eax  +
call sub_1005A02  +
test eax eax +
jz loc_1006BDB  +
cmp [ebp+var_2224] 0 +
jz loc_1006BDB  +
lea eax [ebp+SubKey] +
push eax  +
lea ecx [ebp+var_2220] +
call sub_1005BFE  +
jmp loc_1006BDB  +
push [ebp+var_2220]  +
mov ecx [ebp+var_2210] +
call sub_1005A38  +
lea ecx [ebp+var_2220] +
mov [ebp+var_225C] eax +
call sub_10054D4  +
mov ebx eax +
xor eax eax +
cmp ebx eax +
jnz loc_1006C22  +
cmp [ebp+var_2224] eax +
jz loc_1006BDB  +
cmp [ebp+var_225C] eax +
jnz loc_1006BDB  +
mov [ebp+var_2250] eax +
mov [ebp+var_224C] eax +
mov eax [ebp+var_2214] +
mov [ebp+var_2254] eax +
lea eax [ebp+SubKey] +
push eax  +
lea ecx [ebp+var_2254] +
call sub_100544E  +
and [ebp+var_2254] 0 +
test eax eax +
jnz loc_1006C30  +
lea ecx [ebp+var_2254] +
call sub_10054D4  +
cmp [ebp+arg_8] 0 +
jz loc_1006BDB  +
cmp word ptr [edi] 7Bh +
jnz loc_1006BDB  +
push edi  +
call ds:lstrlenW  +
cmp eax 1 +
jnz loc_1006BDB  +
mov ecx [ebp+var_2210] +
push 0  +
push [ebp+arg_8]  +
push [ebp+var_2220]  +
push edi  +
call sub_100667F  +
mov esi eax +
test esi esi +
jl loc_1006C43  +
mov ecx [ebp+var_2210] +
push edi  +
call sub_10058ED  +
mov esi eax +
test esi esi +
jl loc_1006C43  +
cmp word ptr [edi] 7Dh +
jnz loc_10066D9  +
jmp loc_1006C43  +
lea ecx [ebp+var_2230] +
call sub_10054D4  +
mov esi 80020009h +
jmp loc_1006C43  +
lea ecx [ebp+var_2230] +
jmp loc_1006C3E  +
push eax  +
call sub_100534E  +
lea ecx [ebp+hKey] +
jmp loc_1006C3C  +
lea ecx [ebp+var_2220] +
call sub_10054D4  +
push esi  +
call sub_100534E  +
jmp loc_1006C50  +
lea ecx [ebp+var_2220] +
call sub_10054D4  +
push ebx  +
jmp loc_1006C1B  +
push eax  +
call sub_100534E  +
lea ecx [ebp+var_2254] +
mov esi eax +
call sub_10054D4  +
lea ecx [ebp+var_2220] +
call sub_10054D4  +
mov eax esi +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10113D3  +
leave   +
retn 10h  +
***
mov edi edi +
push esi  +
mov edx ecx +
push edi  +
mov dword ptr [edx] offset off_1001B38 +
and dword ptr [edx+4] 0 +
and dword ptr [edx+8] 0 +
and dword ptr [edx+0Ch] 0 +
lea esi [edx+10h] +
push 6  +
pop ecx  +
xor eax eax +
mov edi esi +
stos   +
mov [esi+18h] al +
pop edi  +
mov eax edx +
pop esi  +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov edi dword_10144EC +
add edi 10h +
push edi  +
mov esi ecx +
call ds:EnterCriticalSection  +
mov eax [esi+38h] +
xor ebx ebx +
cmp eax ebx +
jz loc_1006CC6  +
cmp [eax+4] ebx +
jle loc_1006CC6  +
mov eax [eax] +
push dword ptr [eax]  +
call ds:DestroyWindow  +
mov ecx [esi+38h] +
cmp ecx ebx +
jz loc_1006CD4  +
push 1  +
call sub_100614C  +
push edi  +
mov [esi+38h] ebx +
call ds:LeaveCriticalSection  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
and dword ptr [esi+28h] 0FFFFFBFFh +
cmp dword ptr [esi+2Ch] 0 +
push edi  +
jnz loc_1006D03  +
mov eax [ebp+arg_0] +
mov [esi+2Ch] eax +
lea edi [esi+58h] +
mov eax [edi] +
mov [esi+44h] eax +
mov eax [esi+5Ch] +
mov [esi+3Ch] eax +
push esi  +
lea eax [esi+8] +
push eax  +
push offset unk_10145BC  +
call sub_10060C7  +
lea eax [esi+24h] +
push eax  +
call ds:PropertySheetW  +
and dword ptr [esi+3Ch] 0 +
and dword ptr [esi+44h] 0 +
mov ecx edi +
mov [ebp+arg_0] eax +
call sub_1004FAB  +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 200Ch +
call __alloca_probe  +
mov eax dword_1014484 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+lpString] +
and [ebp+pv] 0 +
push esi  +
mov esi ecx +
push edi  +
lea ecx [ebp+pv] +
push ecx  +
push eax  +
mov ecx esi +
call sub_1005F75  +
mov edi eax +
test edi edi +
jl loc_1006E41  +
mov eax [ebp+pv] +
xor ecx ecx +
mov [esi] eax +
cmp cx [eax] +
jz loc_1006E33  +
push ebx  +
lea eax [ebp+String1] +
push eax  +
mov ecx esi +
call sub_10058ED  +
mov edi eax +
xor ebx ebx +
cmp edi ebx +
jl loc_1006E32  +
lea eax [ebp+String1] +
push eax  +
call sub_100582A  +
mov [ebp+var_200C] eax +
cmp eax ebx +
jz loc_1006E7B  +
lea eax [ebp+String1] +
push eax  +
mov ecx esi +
call sub_10058ED  +
mov edi eax +
cmp edi ebx +
jl loc_1006E32  +
push 7Bh  +
pop eax  +
cmp ax [ebp+String1] +
jnz loc_1006E7B  +
lea eax [ebp+String1] +
mov ecx esi +
cmp [ebp+arg_4] ebx +
jz loc_1006E51  +
mov ebx [esi] +
push 0  +
push [ebp+arg_4]  +
push [ebp+var_200C]  +
push eax  +
call sub_100667F  +
mov edi eax +
test edi edi +
jge loc_1006E65  +
push 0  +
push 0  +
push [ebp+var_200C]  +
lea eax [ebp+String1] +
push eax  +
mov ecx esi +
mov [esi] ebx +
call sub_100667F  +
pop ebx  +
push [ebp+pv]  +
call ds:CoTaskMemFree  +
mov eax edi +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_10113D3  +
leave   +
retn 8  +
push ebx  +
push ebx  +
push [ebp+var_200C]  +
push eax  +
call sub_100667F  +
mov edi eax +
cmp edi ebx +
jl loc_1006E32  +
mov ecx esi +
call sub_10058C4  +
mov eax [esi] +
xor ecx ecx +
cmp cx [eax] +
jnz loc_1006D9E  +
jmp loc_1006E32  +
mov edi 80020009h +
jmp loc_1006E32  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1006C97  +
mov ecx [esi+34h] +
test ecx ecx +
jz loc_1006E9F  +
push 1  +
call sub_1006126  +
mov ecx esi +
pop esi  +
jmp loc_1005099  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 418h +
mov eax dword_1014484 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+lpLibFileName] +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
xor edi edi +
push 2  +
push edi  +
push eax  +
mov [ebp+var_410] edi +
mov [ebp+var_414] ecx +
mov [ebp+var_418] edi +
mov [ebp+lpString] edi +
call ds:LoadLibraryExW  +
mov [ebp+hLibModule] eax +
cmp eax edi +
jnz loc_1006F07  +
call sub_1005334  +
mov esi eax +
jmp loc_1006FE8  +
push ebx  +
push esi  +
push eax  +
call ds:FindResourceW  +
mov esi eax +
cmp esi edi +
jnz loc_1006F20  +
call sub_1005334  +
jmp loc_1006FDA  +
push esi  +
push [ebp+hLibModule]  +
call ds:LoadResource  +
mov ebx eax +
cmp ebx edi +
jz loc_1006F16  +
push esi  +
push [ebp+hLibModule]  +
call ds:SizeofResource  +
mov esi eax +
lea eax [esi+1] +
cmp eax esi +
jnb loc_1006F85  +
lea eax [ebp+var_404] +
cmp [ebp+lpString] eax +
jz loc_1006F62  +
lea ecx [ebp+lpString] +
call sub_1005B9D  +
mov esi 8007000Eh +
lea ecx [ebp+var_410] +
call sub_1005AE0  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10113D3  +
leave   +
retn 10h  +
push eax  +
lea ecx [ebp+lpString] +
call sub_10061D0  +
cmp [ebp+lpString] edi +
jnz loc_1006FA0  +
mov esi 8007000Eh +
jmp loc_1006FDC  +
push esi  +
push [ebp+lpString]  +
push esi  +
push ebx  +
push edi  +
push 3  +
call ds:MultiByteToWideChar  +
cmp eax edi +
jz loc_1006F16  +
mov edx [ebp+lpString] +
push [ebp+arg_C]  +
xor ecx ecx +
mov [edx+eax*2] cx +
push [ebp+lpString]  +
lea ecx [ebp+var_418] +
call sub_1006D4A  +
mov esi eax +
push [ebp+hLibModule]  +
call ds:FreeLibrary  +
lea eax [ebp+var_404] +
cmp [ebp+lpString] eax +
jz loc_1006F67  +
lea ecx [ebp+lpString] +
call sub_1005B9D  +
jmp loc_1006F67  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
movzx eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
push esi  +
push 1  +
push [ebp+arg_C]  +
push eax  +
push [ebp+lpLibFileName]  +
call sub_1006EAC  +
lea ecx [ebp+var_4] +
mov esi eax +
call sub_1005AE0  +
mov eax esi +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
xor eax eax +
mov [ebp+var_4] eax +
cmp [ebp+arg_8] eax +
jz loc_100707D  +
cmp [ebp+arg_C] eax +
jz loc_100707D  +
mov ecx [ebp+arg_0] +
push esi  +
push 1  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+lpLibFileName]  +
call sub_1006EAC  +
lea ecx [ebp+var_4] +
mov esi eax +
call sub_1005AE0  +
mov eax esi +
pop esi  +
jmp locret_100708A  +
lea ecx [ebp+var_4] +
call sub_1005AE0  +
mov eax 80070057h +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
movzx eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
push esi  +
push 0  +
push [ebp+arg_C]  +
push eax  +
push [ebp+lpLibFileName]  +
call sub_1006EAC  +
lea ecx [ebp+var_4] +
mov esi eax +
call sub_1005AE0  +
mov eax esi +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
xor eax eax +
mov [ebp+var_4] eax +
cmp [ebp+arg_8] eax +
jz loc_1007100  +
cmp [ebp+arg_C] eax +
jz loc_1007100  +
mov ecx [ebp+arg_0] +
push esi  +
push eax  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+lpLibFileName]  +
call sub_1006EAC  +
lea ecx [ebp+var_4] +
mov esi eax +
call sub_1005AE0  +
mov eax esi +
pop esi  +
jmp locret_100710D  +
lea ecx [ebp+var_4] +
call sub_1005AE0  +
mov eax 80070057h +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A68h +
mov eax dword_1014484 +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+0Ch] +
push ebx  +
push esi  +
mov esi [ebp+14h] +
push edi  +
mov edi [ebp+8] +
lea ecx [ebp-0A68h] +
mov [ebp-0A3Ch] eax +
call sub_1006C66  +
lea ecx [ebp-0A58h] +
call sub_100531B  +
mov ebx eax +
test ebx ebx +
jge loc_1007177  +
lea ecx [ebp-0A68h] +
call sub_1005EAC  +
mov eax ebx +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10113D3  +
leave   +
retn 10h  +
***
test esi esi +
jz loc_1007196  +
jmp loc_1007190  +
push dword ptr [esi+4]  +
push eax  +
lea eax [ebp-0A68h] +
push eax  +
call sub_1006327  +
add esi 8 +
mov eax [esi] +
test eax eax +
jnz loc_100717D  +
mov eax [edi] +
lea ecx [ebp-0A68h] +
push ecx  +
mov ecx edi +
call dword ptr [eax+14h]  +
xor ebx ebx +
cmp eax ebx +
jge loc_10071BB  +
mov esi eax +
lea ecx [ebp-0A68h] +
call sub_1005EAC  +
mov eax esi +
jmp loc_1007166  +
***
mov edi dword_1014584 +
mov esi 104h +
push esi  +
lea eax [ebp-20Ch] +
push eax  +
push edi  +
mov [ebp-0A38h] ebx +
call ds:GetModuleFileNameW  +
cmp eax ebx +
jnz loc_10071F3  +
call sub_1005334  +
mov esi eax +
lea ecx [ebp-0A38h] +
call sub_1005AE0  +
jmp loc_10071AC  +
***
cmp eax esi +
jnz loc_1007209  +
lea ecx [ebp-0A38h] +
call sub_1005AE0  +
mov esi 8007007Ah +
jmp loc_10071AC  +
***
lea eax [ebp-20Ch] +
push eax  +
push 208h  +
lea eax [ebp-0A34h] +
push eax  +
call sub_10053E9  +
cmp edi ebx +
jz loc_1007238  +
push ebx  +
call ds:GetModuleHandleW  +
cmp edi eax +
jz loc_1007238  +
lea eax [ebp-0A34h] +
jmp loc_100729D  +
push 22h  +
pop eax  +
mov [ebp-624h] ax +
lea eax [ebp-0A34h] +
push eax  +
push 20Bh  +
lea eax [ebp-622h] +
push eax  +
call sub_1005259  +
test al al +
jnz loc_1007273  +
lea ecx [ebp-0A38h] +
call sub_1005AE0  +
mov esi 80004005h +
jmp loc_10071AC  +
***
lea eax [ebp-624h] +
push eax  +
call ds:lstrlenW  +
add eax eax +
push 22h  +
pop ecx  +
mov [ebp+eax-624h] cx +
xor ecx ecx +
mov [ebp+eax-622h] cx +
lea eax [ebp-624h] +
push eax  +
push offset aModule  +
lea eax [ebp-0A68h] +
push eax  +
call sub_1006327  +
mov esi eax +
cmp esi ebx +
jl loc_10071E6  +
lea eax [ebp-0A34h] +
push eax  +
push offset aModule_raw  +
lea eax [ebp-0A68h] +
push eax  +
call sub_1006327  +
mov esi eax +
cmp esi ebx +
jl loc_10071E6  +
push offset aRegistry  +
push dword ptr [ebp-0A3Ch]  +
lea eax [ebp-20Ch] +
push eax  +
lea eax [ebp-0A68h] +
push eax  +
cmp [ebp+10h] ebx +
jz loc_1007303  +
call sub_1007045  +
jmp loc_10071E4  +
***
call sub_10070C9  +
jmp loc_10071E4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A64h +
mov eax dword_1014484 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
mov esi [ebp+14h] +
push edi  +
mov edi [ebp+8] +
lea ecx [ebp-0A64h] +
call sub_1006C66  +
lea ecx [ebp-0A54h] +
call sub_100531B  +
mov ebx eax +
test ebx ebx +
jge loc_100736A  +
lea ecx [ebp-0A64h] +
call sub_1005EAC  +
mov eax ebx +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10113D3  +
leave   +
retn 10h  +
***
test esi esi +
jz loc_1007389  +
jmp loc_1007383  +
push dword ptr [esi+4]  +
push eax  +
lea eax [ebp-0A64h] +
push eax  +
call sub_1006327  +
add esi 8 +
mov eax [esi] +
test eax eax +
jnz loc_1007370  +
mov eax [edi] +
lea ecx [ebp-0A64h] +
push ecx  +
mov ecx edi +
call dword ptr [eax+14h]  +
xor ebx ebx +
cmp eax ebx +
jge loc_10073AE  +
mov esi eax +
lea ecx [ebp-0A64h] +
call sub_1005EAC  +
mov eax esi +
jmp loc_1007359  +
***
mov edi dword_1014584 +
mov esi 104h +
push esi  +
lea eax [ebp-20Ch] +
push eax  +
push edi  +
mov [ebp-0A38h] ebx +
call ds:GetModuleFileNameW  +
cmp eax ebx +
jnz loc_10073E6  +
call sub_1005334  +
mov esi eax +
lea ecx [ebp-0A38h] +
call sub_1005AE0  +
jmp loc_100739F  +
***
cmp eax esi +
jnz loc_10073FC  +
lea ecx [ebp-0A38h] +
call sub_1005AE0  +
mov esi 8007007Ah +
jmp loc_100739F  +
***
lea eax [ebp-20Ch] +
push eax  +
push 208h  +
lea eax [ebp-0A34h] +
push eax  +
call sub_10053E9  +
cmp edi ebx +
jz loc_100742B  +
push ebx  +
call ds:GetModuleHandleW  +
cmp edi eax +
jz loc_100742B  +
lea eax [ebp-0A34h] +
jmp loc_1007490  +
push 22h  +
pop eax  +
mov [ebp-624h] ax +
lea eax [ebp-0A34h] +
push eax  +
push 20Bh  +
lea eax [ebp-622h] +
push eax  +
call sub_1005259  +
test al al +
jnz loc_1007466  +
lea ecx [ebp-0A38h] +
call sub_1005AE0  +
mov esi 80004005h +
jmp loc_100739F  +
***
lea eax [ebp-624h] +
push eax  +
call ds:lstrlenW  +
add eax eax +
push 22h  +
pop ecx  +
mov [ebp+eax-624h] cx +
xor ecx ecx +
mov [ebp+eax-622h] cx +
lea eax [ebp-624h] +
push eax  +
push offset aModule  +
lea eax [ebp-0A64h] +
push eax  +
call sub_1006327  +
mov esi eax +
cmp esi ebx +
jl loc_10073D9  +
lea eax [ebp-0A34h] +
push eax  +
push offset aModule_raw  +
lea eax [ebp-0A64h] +
push eax  +
call sub_1006327  +
mov esi eax +
cmp esi ebx +
jl loc_10073D9  +
push offset aRegistry  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-20Ch] +
push eax  +
lea eax [ebp-0A64h] +
push eax  +
cmp [ebp+10h] ebx +
jz loc_10074F3  +
call sub_100700F  +
jmp loc_10073D7  +
***
call sub_1007093  +
jmp loc_10073D7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 114h +
mov eax dword_1014484 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push [ebp+arg_0]  +
lea ecx [ebp+var_15] +
xor esi esi +
xor ebx ebx +
call sub_1005155  +
push offset dword_1014508  +
push esi  +
push esi  +
push offset dword_10015BC  +
call ds:EventRegister  +
push esi  +
lea eax [ebp+var_30] +
push eax  +
lea eax [ebp+var_20] +
push eax  +
mov [ebp+var_30] 1 +
mov [ebp+var_2C] esi +
mov [ebp+var_28] esi +
mov [ebp+var_24] esi +
call GdiplusStartup  +
mov [ebp+var_1C] eax +
cmp eax esi +
jz loc_10075BA  +
lea ecx [ebp+var_15+1] +
call sub_1011ACB  +
push 137h  +
push hModule  +
lea ecx [ebp+var_15+1] +
call sub_1011C2B  +
test eax eax +
jl loc_10075AD  +
lea ecx [ebp+var_C] +
call sub_1011ACB  +
push [ebp+var_1C]  +
lea eax [ebp+var_C] +
push [ebp+lpSource]  +
push eax  +
call sub_10120A7  +
add esp 0Ch +
test eax eax +
jl loc_10075A5  +
push [ebp+var_8]  +
push esi  +
call sub_100FE4D  +
lea ecx [ebp+var_C] +
call sub_1011C1D  +
lea ecx [ebp+var_15+1] +
mov ebx 80004005h +
call sub_1011C1D  +
push 1000h  +
call ds:GetSystemMetrics  +
test eax eax +
jz loc_10075D9  +
push 12Dh  +
push esi  +
call sub_100FEF7  +
mov ebx 80040001h +
cmp ebx esi +
mov [ebp+var_8] esi +
jl loc_1007683  +
push edi  +
call sub_100FD1C  +
test al al +
jz loc_1007606  +
push 7CCh  +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax esi +
jz loc_1007620  +
mov ecx eax +
call sub_1004DC5  +
jmp loc_100761C  +
push 7D0h  +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax esi +
jz loc_1007620  +
mov ecx eax +
call sub_1004DE7  +
mov edi eax +
jmp loc_1007622  +
xor edi edi +
lea ecx [ebp+var_8] +
call sub_100517A  +
mov [ebp+var_8] edi +
cmp edi esi +
pop edi  +
jnz loc_1007637  +
mov ebx 8007000Eh +
cmp ebx esi +
jl loc_1007683  +
push [ebp+var_8]  +
lea ecx [ebp+var_114] +
call sub_100875C  +
lea ecx [ebp+var_114] +
call sub_1008188  +
mov ebx eax +
cmp ebx esi +
jl loc_100766E  +
call ds:GetActiveWindow  +
push eax  +
lea ecx [ebp+var_114] +
call sub_1006CE7  +
jmp loc_1007678  +
cmp ebx 800700B7h +
jnz loc_1007678  +
xor ebx ebx +
lea ecx [ebp+var_114] +
call sub_1007BC1  +
cmp [ebp+var_1C] esi +
jnz loc_1007690  +
push [ebp+var_20]  +
call GdiplusShutdown  +
mov eax dword_1014508 +
mov ecx dword_101450C +
mov edx eax +
or edx ecx +
jz loc_10076A9  +
push ecx  +
push eax  +
call ds:EventUnregister  +
lea ecx [ebp+var_8] +
call sub_100517A  +
mov ecx offset dword_1014510 +
call sub_1006E87  +
mov ecx [ebp+var_4] +
xor eax eax +
cmp ebx esi +
setl al  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10113D3  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_1007116  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_1007312  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
push dword ptr [esi+0DCh]  +
push offset aDisplaycolorca  +
call nullsub_1  +
mov eax [esi+0DCh] +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1007877  +
lea edi [esi+64h] +
mov edx [edi] +
push eax  +
mov ecx edi +
call dword ptr [edx]  +
mov edx [edi] +
push eax  +
mov ecx edi +
call dword ptr [edx+4]  +
mov edi 0E1h +
mov ebx eax +
mov [ebp+var_8] ebx +
cmp [esi+0DCh] edi +
jnz loc_10077C7  +
push offset aOnDetourPage  +
call nullsub_1  +
mov eax [ebp+arg_0] +
mov edx [eax+0Ch] +
mov edi [eax+10h] +
pop ecx  +
mov ecx [eax+8] +
mov eax [eax+14h] +
add eax edx +
mov [ebp+rc.bottom] eax +
push 2  +
lea eax [ebp+rc] +
add edi ecx +
push eax  +
mov [ebp+rc.left] ecx +
mov [ebp+rc.top] edx +
mov [ebp+rc.right] edi +
call ds:MonitorFromRect  +
mov edi eax +
push edi  +
push [ebp+rc.bottom]  +
push [ebp+rc.right]  +
push [ebp+rc.top]  +
push [ebp+rc.left]  +
push offset aNewRectDDDDIsO  +
call nullsub_1  +
mov ecx [esi+6Ch] +
mov eax [ecx] +
add esp 18h +
call dword ptr [eax+8]  +
cmp edi eax +
jnz loc_1007882  +
mov edi [ebx+78h] +
push edi  +
push offset aReturningFromD  +
call nullsub_1  +
pop ecx  +
pop ecx  +
push edi  +
mov ecx ebx +
call sub_100B9C6  +
jmp loc_1007882  +
mov eax [ebx] +
mov ecx ebx +
call dword ptr [eax+28h]  +
push dword ptr [esi+0DCh]  +
test al al +
jnz loc_100786A  +
push offset aDisplayChangeN  +
call nullsub_1  +
pop ecx  +
pop ecx  +
mov ecx [esi+6Ch] +
mov eax [ecx] +
call dword ptr [eax+8]  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_1007882  +
push eax  +
push offset aCurrentDisplay  +
call nullsub_1  +
mov eax [ebp+arg_0] +
mov edx [eax+0Ch] +
mov ebx [eax+10h] +
pop ecx  +
pop ecx  +
mov ecx [eax+8] +
mov eax [eax+14h] +
add eax edx +
mov [ebp+rc.bottom] eax +
push 2  +
lea eax [ebp+rc] +
add ebx ecx +
push eax  +
mov [ebp+rc.left] ecx +
mov [ebp+rc.top] edx +
mov [ebp+rc.right] ebx +
call ds:MonitorFromRect  +
mov ebx eax +
push ebx  +
push [ebp+rc.bottom]  +
push [ebp+rc.right]  +
push [ebp+rc.top]  +
push [ebp+rc.left]  +
push offset aNewRectDDDDIsO  +
call nullsub_1  +
add esp 18h +
cmp ebx [ebp+var_4] +
jz loc_1007882  +
push offset aDetouring___  +
call nullsub_1  +
pop ecx  +
mov ecx [ebp+var_8] +
push edi  +
call sub_100BBB2  +
jmp loc_1007882  +
push offset aDisplayChangeA  +
call nullsub_1  +
pop ecx  +
jmp loc_1007881  +
push offset aNoPageIsActive  +
call nullsub_1  +
pop ecx  +
push offset aDisplaycolor_0  +
call nullsub_1  +
and dword ptr [esi+68h] 0 +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax hHandle +
push esi  +
xor esi esi +
cmp eax esi +
jz loc_10078C7  +
push eax  +
call ds:ReleaseMutex  +
push hHandle  +
call ds:CloseHandle  +
mov hHandle esi +
mov eax [ebp+0Ch] +
cmp Msg eax +
jnz loc_10078FB  +
push dword ptr [ebp+8]  +
call ds:OpenIcon  +
push dword ptr [ebp+8]  +
call ds:SetForegroundWindow  +
push 3  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
push dword ptr [ebp+8]  +
call ds:SetWindowPos  +
mov eax 77636364h +
jmp loc_1007911  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push eax  +
push dword ptr [ebp+8]  +
push dword_1014574  +
call ds:CallWindowProcW  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 0  +
push 485h  +
push dword ptr [ecx-60h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [ecx+eax*4+0Ch] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 0  +
push 472h  +
push dword ptr [ecx-60h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov [ecx+78h] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+8] +
mov eax [ecx] +
call dword ptr [eax+100h]  +
push dword ptr [esi+7Ch]  +
call WcsSetCalibrationManagementState  +
test eax eax +
jnz loc_10079C4  +
call ds:GetLastError  +
test eax eax +
jle loc_10079B6  +
and eax 0FFFFh +
or eax 80070000h +
push eax  +
push 13Bh  +
push dword ptr [esi-60h]  +
call sub_100FF4F  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov [ecx+4] eax +
mov eax [ebp+arg_0] +
sub eax ecx +
push 0Dh  +
sub eax 0Dh +
push ecx  +
mov dword ptr [ecx] 42444C7h +
mov byte ptr [ecx+8] 0E9h +
mov [ecx+9] eax +
call ds:GetCurrentProcess  +
push eax  +
call ds:FlushInstructionCache  +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jnz loc_1007A1F  +
call sub_1010FE0  +
mov [esi] eax +
test eax eax +
jz loc_1007A3D  +
cmp [ebp+arg_0] 0 +
jnz loc_1007A30  +
cmp [ebp+arg_4] 0 +
jnz loc_1007A30  +
xor eax eax +
inc eax  +
jmp loc_1007A3D  +
push [ebp+arg_4]  +
mov ecx [esi] +
push [ebp+arg_0]  +
call sub_10079CB  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push 0  +
push 467h  +
push dword ptr [ecx]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jl loc_1007A81  +
cmp eax [ecx+4] +
jge loc_1007A81  +
mov ecx [ecx] +
lea eax [ecx+eax*4] +
pop ebp  +
retn 4  +
***
push 0  +
push 0  +
push 1  +
push 0C000008Ch  +
call ds:RaiseException  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
call dword ptr [eax+8]  +
push esi  +
lea edi [esi+14h] +
push eax  +
mov ecx edi +
call sub_1007A07  +
test eax eax +
jnz loc_1007ABA  +
xor eax eax +
jmp loc_1007AD5  +
push dword ptr [edi]  +
mov edi [ebp+hWnd] +
push 0FFFFFFFCh  +
push edi  +
call ds:SetWindowLongW  +
test eax eax +
jz loc_1007AB6  +
mov [esi+20h] eax +
xor eax eax +
mov [esi+4] edi +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
xor edi edi +
xor esi esi +
push off_1014000[esi]  +
call ds:RegisterWindowMessageW  +
mov dword_101457C[esi] eax +
test eax eax +
jz loc_1007B08  +
add esi 4 +
cmp esi 4 +
jl loc_1007AE8  +
jmp loc_1007B1E  +
call ds:GetLastError  +
test eax eax +
jle loc_1007B1C  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
push 0FFFFFFFCh  +
push eax  +
call ds:GetWindowLongW  +
push offset loc_100789D  +
push 0FFFFFFFCh  +
mov dword_1014574 eax +
push dword ptr [esi+4]  +
call ds:SetWindowLongW  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+5Ch] +
test eax eax +
jle loc_1007B84  +
push edi  +
xor edi edi +
test eax eax +
jle loc_1007B83  +
push ebx  +
lea ebx [esi+58h] +
push edi  +
mov ecx ebx +
call loc_1007A67  +
push dword ptr [eax]  +
call ds:DestroyPropertySheetPage  +
inc edi  +
cmp edi [esi+5Ch] +
jl loc_1007B6C  +
pop ebx  +
pop edi  +
lea ecx [esi+58h] +
call sub_1004FAB  +
mov esi [esi+14h] +
test esi esi +
jz loc_1007B99  +
push esi  +
call sub_1010F2B  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
mov ecx [ebp+arg_0] +
lea eax [eax+ecx*4] +
test eax eax +
jz loc_1007BB8  +
mov ecx [ebp+arg_4] +
mov ecx [ecx] +
mov [eax] ecx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
push 1Ah  +
mov dword ptr [esi] offset off_1001F58 +
mov dword ptr [esi+64h] offset off_1001F44 +
lea edi [esi+70h] +
pop ebx  +
mov ecx [edi] +
test ecx ecx +
jz loc_1007BE8  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
add edi 4 +
dec ebx  +
jnz loc_1007BDB  +
pop edi  +
mov ecx esi +
pop esi  +
pop ebx  +
jmp loc_1007B55  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_10] +
mov [eax+20h] ecx +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
mov ecx [ebp+arg_4] +
mov [eax+4] ecx +
mov ecx [ebp+arg_8] +
mov [eax+8] ecx +
mov ecx [ebp+arg_C] +
mov [eax+0Ch] ecx +
xor ecx ecx +
mov dword ptr [eax+1Ch] 24h +
mov [eax+10h] ecx +
mov [eax+18h] ecx +
mov [eax+14h] ecx +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push [ebp+wParam]  +
push [ebp+Msg]  +
push dword ptr [ecx+4]  +
push dword ptr [ecx+20h]  +
call ds:CallWindowProcW  +
pop ebp  +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
sub esp 28h +
push esi  +
mov esi [ebp+8] +
push edi  +
mov edi [ebp+0Ch] +
push 1  +
push dword ptr [ebp+14h]  +
lea ecx [ebp-28h] +
push dword ptr [ebp+10h]  +
push edi  +
push dword ptr [esi+4]  +
call sub_1007BFD  +
mov eax [esi+18h] +
push 0  +
lea ecx [ebp+8] +
push ecx  +
push dword ptr [ebp+14h]  +
mov [ebp+0Ch] eax +
push dword ptr [ebp+10h]  +
lea eax [ebp-28h] +
push edi  +
push dword ptr [esi+4]  +
mov [esi+18h] eax +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax]  +
test eax eax +
jnz loc_1007D13  +
push ebx  +
mov ebx 82h +
cmp edi ebx +
jz loc_1007CC6  +
push dword ptr [ebp+14h]  +
mov ecx esi +
push dword ptr [ebp+10h]  +
push edi  +
call sub_1007C3C  +
mov [ebp+8] eax +
jmp loc_1007D12  +
mov eax [esi+4] +
mov edi ds:GetWindowLongW +
push 0FFFFFFFCh  +
push eax  +
call edi  +
push dword ptr [ebp+14h]  +
mov ecx esi +
push dword ptr [ebp+10h]  +
mov [ebp-4] eax +
push ebx  +
call sub_1007C3C  +
mov [ebp+8] eax +
mov eax [esi+20h] +
cmp eax ds:DefWindowProcW +
jz loc_1007D0E  +
mov eax [esi+4] +
push 0FFFFFFFCh  +
push eax  +
call edi  +
cmp eax [ebp-4] +
jnz loc_1007D0E  +
push dword ptr [esi+20h]  +
push 0FFFFFFFCh  +
push dword ptr [esi+4]  +
call ds:SetWindowLongW  +
or dword ptr [esi+1Ch] 1 +
pop ebx  +
mov eax [esi+1Ch] +
test al 1 +
jz loc_1007D3A  +
xor edx edx +
cmp [ebp+0Ch] edx +
jnz loc_1007D3A  +
mov ecx [esi+4] +
and eax 0FFFFFFFEh +
mov [esi+1Ch] eax +
mov eax [esi] +
push ecx  +
mov ecx esi +
mov [esi+4] edx +
mov [esi+18h] edx +
call dword ptr [eax+0Ch]  +
jmp loc_1007D40  +
mov eax [ebp+0Ch] +
mov [esi+18h] eax +
mov eax [ebp+8] +
pop edi  +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push [ebp+lParam]  +
mov edi [ebp+wParam] +
push edi  +
push [ebp+Msg]  +
mov esi ecx +
call sub_1007C3C  +
mov ebx eax +
mov eax edi +
shr eax 10h +
test ax ax +
jnz loc_1007DA7  +
cmp di 1 +
jz loc_1007D7F  +
cmp di 2 +
jnz loc_1007DA7  +
test dword ptr [esi+28h] 400h +
jz loc_1007DA7  +
push 0  +
push 0  +
push 476h  +
push dword ptr [esi+4]  +
call ds:SendMessageW  +
test eax eax +
jnz loc_1007DA7  +
push dword ptr [esi+4]  +
call ds:DestroyWindow  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test dword ptr [ecx+28h] 400h +
jz loc_1007DE3  +
mov eax [ebp+arg_4] +
and eax 0FFF0h +
cmp eax 0F060h +
jnz loc_1007DE3  +
push 0  +
push 0  +
push 10h  +
push dword ptr [ecx+4]  +
call ds:SendMessageW  +
jmp loc_1007DE9  +
mov eax [ebp+arg_C] +
and dword ptr [eax] 0 +
xor eax eax +
pop ebp  +
retn 10h  +
***
mov eax (offset dword_1007C5C+3) +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_14] 0 +
jnz loc_1007E5A  +
mov eax 111h +
cmp [ebp+arg_4] eax +
jnz loc_1007E2E  +
lea edx [ebp+arg_4] +
push edx  +
push [ebp+lParam]  +
push [ebp+wParam]  +
push eax  +
call sub_1007D4E  +
mov ecx [ebp+arg_10] +
mov [ecx] eax +
xor eax eax +
inc eax  +
jmp loc_1007E5C  +
mov eax 112h +
cmp [ebp+arg_4] eax +
jnz loc_1007E5A  +
lea edx [ebp+arg_4] +
push edx  +
push [ebp+lParam]  +
mov [ebp+arg_4] 1 +
push [ebp+wParam]  +
push eax  +
call sub_1007DB5  +
cmp [ebp+arg_4] 0 +
mov ecx [ebp+arg_10] +
mov [ecx] eax +
jnz loc_1007E29  +
xor eax eax +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [esi+8] +
push edi  +
cmp eax ecx +
jnz loc_1007EA7  +
test ecx ecx +
jnz loc_1007E81  +
xor edi edi +
inc edi  +
jmp loc_1007E90  +
lea edi [eax+eax] +
test edi edi +
jl loc_1007EC0  +
cmp edi 1FFFFFFFh +
ja loc_1007EC0  +
push 4  +
push edi  +
push dword ptr [esi]  +
call off_1014490  +
add esp 0Ch +
test eax eax +
jz loc_1007EC0  +
mov [esi+8] edi +
mov [esi] eax +
push [ebp+arg_0]  +
mov ecx esi +
push dword ptr [esi+4]  +
call sub_1007BA0  +
inc dword ptr [esi+4]  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
xor eax eax +
jmp loc_1007EBA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jnz loc_1007EDA  +
xor eax eax +
jmp loc_1007F29  +
and [ebp+arg_0] 0 +
push ebx  +
push esi  +
lea ebx [edi+4] +
push ebx  +
call ds:EnterCriticalSection  +
mov esi [edi+1Ch] +
test esi esi +
jz loc_1007F1D  +
call ds:GetCurrentThreadId  +
xor ecx ecx +
cmp [esi+4] eax +
jz loc_1007F09  +
mov ecx esi +
mov esi [esi+8] +
test esi esi +
jnz loc_1007EF9  +
jmp loc_1007F1D  +
mov eax [esi+8] +
test ecx ecx +
jnz loc_1007F15  +
mov [edi+1Ch] eax +
jmp loc_1007F18  +
mov [ecx+8] eax +
mov eax [esi] +
mov [ebp+arg_0] eax +
push ebx  +
call ds:LeaveCriticalSection  +
mov eax [ebp+arg_0] +
pop esi  +
pop ebx  +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_14] 0 +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
jnz loc_1007F9B  +
mov edi [ebp+arg_10] +
xor ebx ebx +
inc ebx  +
cmp [ebp+arg_4] 47h +
jnz loc_1007F67  +
push [ebp+lParam]  +
mov [esi+68h] ebx +
call sub_10076F7  +
and dword ptr [edi] 0 +
cmp dword ptr [esi+68h] 0 +
jz loc_1007F67  +
mov eax ebx +
jmp loc_1007F9D  +
mov eax [ebp+arg_4] +
cmp eax dword_101457C +
jnz loc_1007F83  +
mov ecx [esi+0DCh] +
mov [esi+68h] ebx +
mov [edi] ecx +
cmp dword ptr [esi+68h] 0 +
jnz loc_1007F63  +
push 0  +
push edi  +
push [ebp+lParam]  +
mov ecx esi +
push [ebp+wParam]  +
push eax  +
push [ebp+arg_0]  +
call sub_1007DFF  +
test eax eax +
jnz loc_1007F63  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1007BC1  +
test byte ptr [ebp+8] 1 +
jz loc_1007FC3  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
lea ecx [eax+4] +
cmp dword ptr [ecx] 0 +
jz loc_1007FE4  +
pop ebp  +
jmp loc_1007A47  +
lea ecx [ebp+lParam] +
push ecx  +
lea ecx [eax+58h] +
call sub_1007E65  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push dword ptr [ebp+1Ch]  +
mov esi ecx +
push dword ptr [ebp+18h]  +
mov edi [esi+68h] +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1007F33  +
mov [esi+68h] edi +
pop edi  +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+arg_0]  +
mov edi ecx +
call ds:CreatePropertySheetPageW  +
mov esi eax +
test esi esi +
jz loc_1008059  +
push esi  +
mov ecx edi +
call sub_1007FCF  +
mov edi eax +
test edi edi +
jnz loc_1008057  +
push esi  +
call ds:DestroyPropertySheetPage  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+0Ch] 1 +
jnz loc_100809E  +
push esi  +
push offset unk_10145BC  +
call sub_1007EC9  +
push dword ptr [ebp+8]  +
mov esi eax +
mov ecx esi +
call sub_1007A98  +
and dword ptr [esi+3Ch] 0 +
and dword ptr [esi+44h] 0 +
lea ecx [esi+58h] +
call sub_1004FAB  +
mov ecx esi +
call sub_1007B28  +
pop esi  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor ebx ebx +
mov esi ecx +
test edi edi +
jnz loc_10080C3  +
mov ebx 8007000Eh +
jmp loc_1008100  +
cmp dword ptr [esi+0D8h] 1Ah +
jl loc_10080D3  +
mov ebx 8000FFFFh +
jmp loc_10080F7  +
lea eax [edi+20h] +
push eax  +
call sub_100802A  +
test eax eax +
jz loc_10080F2  +
mov eax [esi+0D8h] +
mov [esi+eax*4+70h] edi +
inc dword ptr [esi+0D8h]  +
jmp loc_1008100  +
mov ebx 80004005h +
mov eax [edi] +
push 1  +
mov ecx edi +
call dword ptr [eax+4]  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ds:DefWindowProcW +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
xor edi edi +
mov [esi+4] edi +
mov [esi+14h] edi +
push 34h  +
mov [esi+18h] edi +
mov [esi+1Ch] edi +
mov [esi+20h] eax +
lea ebx [esi+24h] +
push edi  +
push ebx  +
mov [esi+58h] edi +
mov [esi+5Ch] edi +
mov [esi+60h] edi +
call memset  +
mov dword ptr [ebx] 34h +
mov dword ptr [esi+28h] 100h +
mov eax hModule +
mov [esi+30h] eax +
mov eax [ebp+arg_0] +
mov [esi+38h] eax +
mov eax [ebp+arg_4] +
mov [esi+40h] eax +
mov eax [ebp+arg_8] +
add esp 0Ch +
mov [esi+44h] edi +
mov [esi+3Ch] edi +
mov [esi+2Ch] eax +
pop edi  +
mov dword ptr [esi+48h] offset loc_1008064 +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax dword_1014484 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
push offset Name  +
xor ebx ebx +
push 1  +
push ebx  +
mov esi ecx +
xor edi edi +
mov [ebp+var_D] bl +
mov [ebp+var_E] bl +
call ds:CreateMutexW  +
mov hHandle eax +
cmp eax ebx +
jz loc_10081DE  +
call ds:GetLastError  +
cmp eax 0B7h +
jnz loc_10081DE  +
push 2710h  +
push hHandle  +
call ds:WaitForSingleObject  +
push offset String  +
call ds:RegisterWindowMessageW  +
lea ecx [ebp+var_C] +
mov Msg eax +
call sub_1011ACB  +
push 4  +
push hModule  +
lea ecx [ebp+var_C] +
call sub_1011C2B  +
push [ebp+lpWindowName]  +
push offset ClassName  +
call ds:FindWindowW  +
mov [ebp+hWnd] eax +
cmp eax ebx +
jz loc_1008264  +
lea ecx [ebp+dwProcessId] +
push ecx  +
push eax  +
mov [ebp+dwProcessId] ebx +
call ds:GetWindowThreadProcessId  +
push [ebp+dwProcessId]  +
call ds:AllowSetForegroundWindow  +
lea eax [ebp+dwResult] +
push eax  +
push 2710h  +
push 2  +
push ebx  +
push ebx  +
push Msg  +
push [ebp+hWnd]  +
call ds:SendMessageTimeoutW  +
test eax eax +
jz loc_1008264  +
cmp [ebp+dwResult] 77636364h +
jnz loc_1008264  +
mov edi 800700B7h +
mov [ebp+var_E] 1 +
or dword ptr [esi+28h] 14000004h +
cmp edi ebx +
mov dword ptr [esi+34h] 64h +
jl loc_10086D9  +
mov ebx 0A8h +
push ebx  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_100829A  +
push dword ptr [esi+6Ch]  +
lea ecx [esi+64h] +
push ecx  +
mov ecx eax +
call sub_10107CE  +
jmp loc_100829C  +
xor eax eax +
push eax  +
mov ecx esi +
call sub_10080A9  +
mov edi eax +
test edi edi +
jl loc_10086D9  +
push ebx  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_10082C9  +
push dword ptr [esi+6Ch]  +
lea ecx [esi+64h] +
push ecx  +
mov ecx eax +
call sub_100F5F8  +
jmp loc_10082CB  +
xor eax eax +
push eax  +
mov ecx esi +
call sub_10080A9  +
mov edi eax +
test edi edi +
jl loc_10086D9  +
push 0CCh  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_10082FC  +
push dword ptr [esi+6Ch]  +
lea ecx [esi+64h] +
push ecx  +
mov ecx eax +
call sub_100C94B  +
jmp loc_10082FE  +
xor eax eax +
push eax  +
mov ecx esi +
call sub_10080A9  +
mov edi eax +
test edi edi +
jl loc_10086D9  +
push 0ECh  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_100832F  +
push dword ptr [esi+6Ch]  +
lea ecx [esi+64h] +
push ecx  +
mov ecx eax +
call sub_100C313  +
jmp loc_1008331  +
xor eax eax +
push eax  +
mov ecx esi +
call sub_10080A9  +
mov edi eax +
test edi edi +
jl loc_10086D9  +
push ebx  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_100835E  +
push dword ptr [esi+6Ch]  +
lea ecx [esi+64h] +
push ecx  +
mov ecx eax +
call sub_1008F96  +
jmp loc_1008360  +
xor eax eax +
push eax  +
mov ecx esi +
call sub_10080A9  +
mov edi eax +
test edi edi +
jl loc_10086D9  +
push 0CCh  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1008391  +
push dword ptr [esi+6Ch]  +
lea ecx [esi+64h] +
push ecx  +
mov ecx eax +
call sub_100DB60  +
jmp loc_1008393  +
xor eax eax +
push eax  +
mov ecx esi +
call sub_10080A9  +
mov edi eax +
test edi edi +
jl loc_10086D9  +
mov ebx 0C8h +
push ebx  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_10083C5  +
push dword ptr [esi+6Ch]  +
lea ecx [esi+64h] +
push ecx  +
mov ecx eax +
call sub_100CF9D  +
jmp loc_10083C7  +
xor eax eax +
push eax  +
mov ecx esi +
call sub_10080A9  +
mov edi eax +
test edi edi +
jl loc_10086D9  +
push 0CCh  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_10083F8  +
push dword ptr [esi+6Ch]  +
lea ecx [esi+64h] +
push ecx  +
mov ecx eax +
call sub_100E523  +
jmp loc_10083FA  +
xor eax eax +
push eax  +
mov ecx esi +
call sub_10080A9  +
mov edi eax +
test edi edi +
jl loc_10086D9  +
push ebx  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1008427  +
push dword ptr [esi+6Ch]  +
lea ecx [esi+64h] +
push ecx  +
mov ecx eax +
call sub_100CFD0  +
jmp loc_1008429  +
xor eax eax +
push eax  +
mov ecx esi +
call sub_10080A9  +
mov edi eax +
test edi edi +
jl loc_10086D9  +
mov ebx 0E8h +
push ebx  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_100845B  +
push dword ptr [esi+6Ch]  +
lea ecx [esi+64h] +
push ecx  +
mov ecx eax +
call sub_100DADC  +
jmp loc_100845D  +
xor eax eax +
push eax  +
mov ecx esi +
call sub_10080A9  +
mov edi eax +
test edi edi +
jl loc_10086D9  +
push ebx  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_100848A  +
push dword ptr [esi+6Ch]  +
lea ecx [esi+64h] +
push ecx  +
mov ecx eax +
call sub_100E482  +
jmp loc_100848C  +
xor eax eax +
push eax  +
mov ecx esi +
call sub_10080A9  +
mov edi eax +
test edi edi +
jl loc_10086D9  +
mov ebx 0A8h +
push ebx  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_10084BE  +
push dword ptr [esi+6Ch]  +
lea ecx [esi+64h] +
push ecx  +
mov ecx eax +
call sub_100CBE7  +
jmp loc_10084C0  +
xor eax eax +
push eax  +
mov ecx esi +
call sub_10080A9  +
mov edi eax +
test edi edi +
jl loc_10086D9  +
push 0CCh  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_10084F1  +
push dword ptr [esi+6Ch]  +
lea ecx [esi+64h] +
push ecx  +
mov ecx eax +
call sub_100D056  +
jmp loc_10084F3  +
xor eax eax +
push eax  +
mov ecx esi +
call sub_10080A9  +
mov edi eax +
test edi edi +
jl loc_10086D9  +
push ebx  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1008520  +
push dword ptr [esi+6Ch]  +
lea ecx [esi+64h] +
push ecx  +
mov ecx eax +
call sub_100F403  +
jmp loc_1008522  +
xor eax eax +
push eax  +
mov ecx esi +
call sub_10080A9  +
mov edi eax +
test edi edi +
jl loc_10086D9  +
push 108h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1008553  +
push dword ptr [esi+6Ch]  +
lea ecx [esi+64h] +
push ecx  +
mov ecx eax +
call sub_100E6FE  +
jmp loc_1008555  +
xor eax eax +
push eax  +
mov ecx esi +
call sub_10080A9  +
mov edi eax +
test edi edi +
jl loc_10086D9  +
push 0CCh  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1008586  +
push dword ptr [esi+6Ch]  +
lea ecx [esi+64h] +
push ecx  +
mov ecx eax +
call sub_100F565  +
jmp loc_1008588  +
xor eax eax +
push eax  +
mov ecx esi +
call sub_10080A9  +
mov edi eax +
test edi edi +
jl loc_10086D9  +
push 0E8h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_10085B9  +
push dword ptr [esi+6Ch]  +
lea ecx [esi+64h] +
push ecx  +
mov ecx eax +
call sub_100F472  +
jmp loc_10085BB  +
xor eax eax +
push eax  +
mov ecx esi +
call sub_10080A9  +
mov edi eax +
test edi edi +
jl loc_10086D9  +
mov ebx 0ACh +
push ebx  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_10085ED  +
push dword ptr [esi+6Ch]  +
lea ecx [esi+64h] +
push ecx  +
mov ecx eax +
call sub_100D02C  +
jmp loc_10085EF  +
xor eax eax +
push eax  +
mov ecx esi +
call sub_10080A9  +
mov edi eax +
test edi edi +
jl loc_10086D9  +
push ebx  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_100861C  +
push dword ptr [esi+6Ch]  +
lea ecx [esi+64h] +
push ecx  +
mov ecx eax +
call sub_100E5FB  +
jmp loc_100861E  +
xor eax eax +
push eax  +
mov ecx esi +
call sub_10080A9  +
mov edi eax +
test edi edi +
jl loc_10086D9  +
push 0A8h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_100864F  +
push dword ptr [esi+6Ch]  +
lea ecx [esi+64h] +
push ecx  +
mov ecx eax +
call sub_10109F9  +
jmp loc_1008651  +
xor eax eax +
push eax  +
mov ecx esi +
call sub_10080A9  +
mov edi eax +
test edi edi +
jl loc_10086D9  +
call sub_1007AE0  +
mov edi eax +
test edi edi +
jl loc_10086D9  +
add esi 0E0h +
push esi  +
call WcsGetCalibrationManagementState  +
mov ebx 0FFFFh +
mov esi 80070000h +
test eax eax +
jnz loc_10086A5  +
call ds:GetLastError  +
test eax eax +
jle loc_1008692  +
and eax ebx +
or eax esi +
mov edi eax +
push edi  +
push 13Ah  +
push 0  +
call sub_100FF4F  +
mov [ebp+var_D] 1 +
test edi edi +
jl loc_10086D9  +
push 0  +
call WcsSetCalibrationManagementState  +
test eax eax +
jnz loc_10086D5  +
call ds:GetLastError  +
test eax eax +
jle loc_10086C2  +
and eax ebx +
or eax esi +
mov edi eax +
push edi  +
push 13Ch  +
push 0  +
call sub_100FF4F  +
mov [ebp+var_D] 1 +
test edi edi +
jge loc_1008715  +
mov eax hHandle +
test eax eax +
jz loc_10086FC  +
push eax  +
call ds:ReleaseMutex  +
push hHandle  +
call ds:CloseHandle  +
and hHandle 0 +
cmp [ebp+var_D] 0 +
jnz loc_1008715  +
cmp [ebp+var_E] 0 +
jnz loc_1008715  +
push edi  +
push 13Eh  +
push 0  +
call sub_100FF4F  +
lea ecx [ebp+var_C] +
call sub_1011C1D  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10113D3  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_8]  +
mov esi ecx +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100810E  +
or dword ptr [esi+28h] 4020h +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
xor edi edi +
push edi  +
push edi  +
push ecx  +
mov eax esp +
mov esi ecx +
mov dword ptr [eax] 4 +
call sub_1008733  +
mov eax [ebp+arg_0] +
mov dword ptr [esi+64h] offset off_1001C10 +
mov [esi+6Ch] eax +
mov [esi+0D8h] edi +
mov [esi+0DCh] edi +
mov [esi+0E0h] edi +
push 1Ah  +
pop ecx  +
lea edi [esi+70h] +
xor eax eax +
mov dword ptr [esi] offset off_1001F58 +
mov dword ptr [esi+64h] offset off_1001F44 +
stos   +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_14]  +
mov esi ecx +
push [ebp+arg_10]  +
push [ebp+uID]  +
push [ebp+arg_0]  +
call sub_100BFBE  +
xor eax eax +
mov [esi+0A8h] eax +
mov [esi+0ACh] eax +
mov [esi+0B0h] eax +
mov [esi+0B4h] eax +
mov [esi+0B8h] eax +
mov [esi+0BCh] eax +
mov eax [ebp+arg_8] +
mov [esi+0C0h] eax +
mov eax [ebp+arg_C] +
mov [esi+0C4h] eax +
mov dword ptr [esi] (offset locret_1001FFB+1) +
mov eax esi +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+0B0h] +
push edi  +
mov edi ds:DeleteObject +
mov dword ptr [esi] (offset locret_1001FFB+1) +
test eax eax +
jz loc_100883C  +
push eax  +
call edi  +
mov eax [esi+0B4h] +
test eax eax +
jz loc_1008849  +
push eax  +
call edi  +
pop edi  +
mov ecx esi +
pop esi  +
jmp sub_100BCDD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
fld  ds:flt_1001FF4 +
mov eax [ebp+arg_0] +
fstp  dword ptr [eax] +
pop ebp  +
retn 4  +
***
mov eax [ecx] +
call dword ptr [eax+2Ch]  +
xor eax eax +
inc eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
cmp [ebp+arg_4] ebx +
jz loc_1008A13  +
cmp [ebp+arg_8] ebx +
jz loc_1008A13  +
push edi  +
mov edi ds:GetWindowRect +
lea eax [ebp+Points] +
push eax  +
push dword ptr [esi+4]  +
call edi  +
test eax eax +
jz loc_1008A06  +
lea eax [ebp+var_44] +
push eax  +
push dword ptr [esi+0A8h]  +
call edi  +
test eax eax +
jz loc_1008A06  +
lea eax [ebp+var_34] +
push eax  +
push dword ptr [esi+0ACh]  +
call edi  +
test eax eax +
jz loc_1008A06  +
mov edi ds:MapWindowPoints +
push 2  +
lea eax [ebp+Points] +
push eax  +
push dword ptr [esi+4]  +
push ebx  +
call edi  +
push 2  +
lea eax [ebp+var_44] +
push eax  +
push dword ptr [esi+4]  +
push ebx  +
call edi  +
push 2  +
lea eax [ebp+var_34] +
push eax  +
push dword ptr [esi+4]  +
push ebx  +
call edi  +
fild  dword ptr [esi+0B8h] +
mov eax [ebp-1Ch] +
sub eax [ebp+Points.x] +
fidiv  dword ptr [esi+0BCh] +
mov ebx [ebp-18h] +
sub ebx [ebp+Points.y] +
mov edi [ebp+var_28] +
sub edi [ebp+var_30] +
inc eax  +
mov [ebp+var_8] eax +
inc ebx  +
inc edi  +
lea eax [edi+edi+28h] +
mov ecx eax +
mov eax ebx +
sub eax ecx +
lea ecx [ebp+var_14] +
mov [ebp+var_4] eax +
mov eax [esi] +
push ecx  +
mov ecx esi +
fstp  [ebp+var_C] +
call dword ptr [eax+30h]  +
fild  [ebp+var_4] +
fmul  [ebp+var_C] +
fild  [ebp+var_8] +
fmul  [ebp+var_14] +
fcom  st(1) +
fnstsw  ax +
test ah 41h +
jnz loc_1008973  +
mov eax [ebp+var_4] +
fstp  st +
fadd  ds:dbl_1002038 +
mov [ebp+var_4] eax +
call _ftol2_sse  +
mov ecx eax +
jmp loc_100899A  +
fstp  st(1) +
fld  ds:dbl_1002038 +
fadd st(1) st +
fxch  st(1) +
call _ftol2_sse  +
mov [ebp+var_10] eax +
fild  [ebp+var_10] +
fdiv  [ebp+var_C] +
faddp st(1) st +
call _ftol2_sse  +
mov ecx [ebp+var_10] +
mov [ebp+var_4] eax +
mov eax ebx +
sub eax [ebp+var_4] +
push 0  +
cdq   +
sub eax edx +
mov edx [ebp+var_4] +
sar eax 1 +
dec edx  +
push edx  +
lea edx [ecx-1] +
push edx  +
push eax  +
mov [ebp+var_10] eax +
mov eax [ebp+var_8] +
sub eax ecx +
cdq   +
sub eax edx +
sar eax 1 +
push eax  +
push dword ptr [esi+0A8h]  +
call ds:MoveWindow  +
lea eax [esi+0B4h] +
push eax  +
push dword ptr [esi+0A8h]  +
push dword ptr [esi+0B0h]  +
call sub_1010177  +
push 0  +
push 0  +
push dword ptr [esi+0A8h]  +
call ds:InvalidateRect  +
mov eax [esi] +
push edi  +
push ebx  +
push [ebp+var_8]  +
mov ecx esi +
push [ebp+var_4]  +
push [ebp+var_10]  +
call dword ptr [eax+34h]  +
xor ebx ebx +
push 1  +
push ebx  +
push dword ptr [esi+4]  +
call ds:InvalidateRect  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_10] +
push edi  +
push 1  +
lea eax [esi-1] +
push eax  +
mov eax [ebp+arg_8] +
dec eax  +
push eax  +
mov eax [ebp+arg_C] +
imul eax eax +
add eax [ebp+arg_4] +
cdq   +
and edx 3 +
add eax edx +
mov edi eax +
mov eax esi +
cdq   +
sub eax edx +
sar edi 2 +
sar eax 1 +
sub edi eax +
push edi  +
push 0  +
push dword ptr [ecx+0ACh]  +
call ds:MoveWindow  +
pop edi  +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+nIDDlgItem]  +
push dword ptr [ecx]  +
call ds:GetDlgItem  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
mov eax ecx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax dword_1014484 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi ecx +
lea ecx [ebp+var_C] +
call sub_1011ACB  +
push dword ptr [esi+0C4h]  +
lea ecx [ebp+var_C] +
push hModule  +
call sub_1011C2B  +
test eax eax +
jl loc_1008B14  +
mov esi [ebp+var_8] +
test esi esi +
jz loc_1008AE7  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1008AD3  +
sub eax edx +
sar eax 1 +
lea eax [eax+eax+2] +
jmp loc_1008AE9  +
xor eax eax +
and [ebp+var_18] 0 +
and [ebp+var_10] 0 +
mov [ebp+var_14] eax +
lea eax [ebp+var_1C] +
push eax  +
push 1  +
push offset dword_1001600  +
push dword_101450C  +
mov [ebp+var_1C] esi +
push dword_1014508  +
call ds:EventWrite  +
lea ecx [ebp+var_C] +
call sub_1011C1D  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_10113D3  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
call sub_100BD1A  +
mov [ebp+arg_4] eax +
test eax eax +
jnz loc_1008BB8  +
push ebx  +
mov ebx ds:GetDlgItem +
push 91h  +
push dword ptr [esi+4]  +
call ebx  +
mov [esi+0A8h] eax +
test eax eax +
jz loc_1008BC0  +
push edi  +
lea eax [esi+0BCh] +
push eax  +
lea edi [esi+0B8h] +
push edi  +
lea ecx [esi+0B0h] +
push ecx  +
push dword ptr [esi+0C0h]  +
call sub_10105B1  +
test eax eax +
jl loc_1008BB2  +
xor eax eax +
cmp [edi] eax +
jle loc_1008BB2  +
cmp [esi+0BCh] eax +
jle loc_1008BB2  +
cmp [esi+0B0h] eax +
jz loc_1008BB2  +
push 87h  +
push dword ptr [esi+4]  +
call ebx  +
mov [esi+0ACh] eax +
test eax eax +
jnz loc_1008BB6  +
or [ebp+arg_4] 0FFFFFFFFh +
pop edi  +
pop ebx  +
mov eax [ebp+arg_4] +
pop esi  +
pop ebp  +
retn 8  +
or [ebp+arg_4] 0FFFFFFFFh +
jmp loc_1008BB7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
mov edi ecx +
mov eax [edi+4] +
cmp [esi] eax +
jz loc_1008BF4  +
push eax  +
call ds:GetParent  +
cmp [esi] eax +
jz loc_1008BF4  +
mov eax [ebp+arg_C] +
and dword ptr [eax] 0 +
xor eax eax +
inc eax  +
jmp loc_1008C5E  +
mov ecx [esi+8] +
add ecx 0D5h +
xor eax eax +
cmp ecx 0Dh +
ja loc_1008C59  +
jmp ds:off_1008C67[ecx*4]  +
mov ecx edi +
call sub_100B965  +
neg eax  +
sbb eax eax +
neg eax  +
dec eax  +
jmp loc_1008C5E  +
mov ecx edi +
call sub_100B98F  +
neg eax  +
sbb eax eax +
inc eax  +
jmp loc_1008C5E  +
mov ecx edi +
call sub_100B999  +
jmp loc_1008C22  +
mov ecx edi +
call sub_100BB0C  +
jmp loc_1008C5E  +
mov ecx edi +
call sub_100B9A3  +
jmp loc_1008C5E  +
mov ecx edi +
call sub_100B9AC  +
jmp loc_1008C22  +
push dword ptr [esi+0Ch]  +
mov ecx edi +
call sub_100B9B6  +
jmp loc_1008C5E  +
mov ecx [ebp+arg_C] +
mov [ecx] eax +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
mov ebx [ebp+0Ch] +
push esi  +
mov esi [ebp+8] +
push edi  +
push 1  +
push dword ptr [ebp+14h]  +
lea ecx [ebp-24h] +
push dword ptr [ebp+10h]  +
push ebx  +
push dword ptr [esi+4]  +
call sub_1007BFD  +
mov edi [esi+18h] +
push 0  +
lea ecx [ebp+8] +
push ecx  +
push dword ptr [ebp+14h]  +
lea eax [ebp-24h] +
push dword ptr [ebp+10h]  +
mov [esi+18h] eax +
mov eax [esi] +
push ebx  +
push dword ptr [esi+4]  +
mov ecx esi +
call dword ptr [eax]  +
mov [esi+18h] edi +
xor edi edi +
mov [ebp+14h] eax +
cmp eax edi +
jz loc_1008D37  +
cmp ebx 2Eh +
jb loc_1008D28  +
cmp ebx 2Fh +
jbe loc_1008D20  +
cmp ebx 37h +
jz loc_1008D20  +
cmp ebx 39h +
jz loc_1008D20  +
cmp ebx 110h +
jz loc_1008D20  +
cmp ebx 131h +
jbe loc_1008D28  +
cmp ebx 138h +
ja loc_1008D28  +
mov eax [ebp+8] +
mov [ebp+14h] eax +
jmp loc_1008D43  +
push dword ptr [ebp+8]  +
push edi  +
push dword ptr [esi+4]  +
call ds:SetWindowLongW  +
jmp loc_1008D43  +
cmp ebx 82h +
jnz loc_1008D43  +
or dword ptr [esi+1Ch] 1 +
mov eax [esi+1Ch] +
test al 1 +
jz loc_1008D63  +
cmp [esi+18h] edi +
jnz loc_1008D63  +
mov ecx [esi+4] +
and eax 0FFFFFFFEh +
mov [esi+1Ch] eax +
mov eax [esi] +
push ecx  +
mov ecx esi +
mov [esi+4] edi +
call dword ptr [eax+0Ch]  +
mov eax [ebp+14h] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_14] 0 +
jnz loc_1008DAB  +
cmp [ebp+arg_4] 4Eh +
jnz loc_1008DAB  +
lea eax [ebp+arg_14] +
push eax  +
push [ebp+arg_C]  +
mov [ebp+arg_14] 1 +
push [ebp+arg_8]  +
push 4Eh  +
call sub_1008BCB  +
cmp [ebp+arg_14] 0 +
mov ecx [ebp+arg_10] +
mov [ecx] eax +
jz loc_1008DAB  +
xor eax eax +
inc eax  +
jmp loc_1008DAD  +
xor eax eax +
pop ebp  +
retn 18h  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_14] 0 +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
jnz loc_1008E83  +
mov eax [ebp+arg_4] +
mov edi [ebp+arg_10] +
xor ebx ebx +
inc ebx  +
cmp eax 110h +
jnz loc_1008E02  +
push [ebp+hWnd]  +
mov [esi+5Ch] ebx +
push [ebp+arg_8]  +
call sub_100BD1A  +
mov [edi] eax +
cmp dword ptr [esi+5Ch] 0 +
jz loc_1008E65  +
mov eax ebx +
jmp loc_1008E85  +
cmp eax 5 +
jnz loc_1008E28  +
mov ecx [ebp+hWnd] +
movsx eax word ptr [ebp+hWnd] +
shr ecx 10h +
movsx ecx cx +
push ecx  +
push eax  +
push [ebp+arg_8]  +
mov ecx esi +
mov [esi+5Ch] ebx +
call sub_100BDC2  +
and dword ptr [edi] 0 +
jmp loc_1008DF5  +
cmp eax 136h +
jnz loc_1008E3F  +
push [ebp+hWnd]  +
mov [esi+5Ch] ebx +
push [ebp+arg_8]  +
call sub_100B9D9  +
jmp loc_1008DF3  +
cmp eax 138h +
jnz loc_1008E56  +
push [ebp+hWnd]  +
mov [esi+5Ch] ebx +
push [ebp+arg_8]  +
call sub_100BB49  +
jmp loc_1008DF3  +
cmp eax 2 +
jnz loc_1008E65  +
mov [esi+5Ch] ebx +
call nullsub_1  +
jmp loc_1008E23  +
push 0  +
push edi  +
push [ebp+hWnd]  +
mov ecx esi +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1008D72  +
test eax eax +
jnz loc_1008DFB  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+arg_14]  +
mov esi ecx +
push [ebp+arg_10]  +
mov edi [esi+5Ch] +
push [ebp+hWnd]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1008DC1  +
mov [esi+5Ch] edi +
pop edi  +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_14] 0 +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
jnz loc_1008F3C  +
mov edi [ebp+arg_10] +
xor ebx ebx +
inc ebx  +
cmp [ebp+arg_4] 110h +
jnz loc_1008EFB  +
push [ebp+hWnd]  +
mov [esi+5Ch] ebx +
push [ebp+arg_8]  +
call sub_1008B2E  +
mov [edi] eax +
cmp dword ptr [esi+5Ch] 0 +
jz loc_1008F22  +
mov eax ebx +
jmp loc_1008F3E  +
cmp [ebp+arg_4] 5 +
jnz loc_1008F22  +
mov ecx [ebp+hWnd] +
movsx eax word ptr [ebp+hWnd] +
shr ecx 10h +
movsx ecx cx +
push ecx  +
push eax  +
push [ebp+arg_8]  +
mov ecx esi +
mov [esi+5Ch] ebx +
call sub_100887E  +
and dword ptr [edi] 0 +
jmp loc_1008EF1  +
push 0  +
push edi  +
push [ebp+hWnd]  +
mov ecx esi +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1008E91  +
test eax eax +
jnz loc_1008EF7  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+8] +
cmp eax 0FFFFFFFCh +
jz loc_1008F65  +
cmp eax 0FFFFFFFEh +
jz loc_1008F65  +
and dword ptr [ecx+5Ch] 0 +
jmp loc_1008F74  +
push offset aColor_manageme  +
push offset aMshelpWindows?  +
call sub_10121A8  +
xor eax eax +
pop ebp  +
retn 4  +
***
call sub_10121A8  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
push 14h  +
push 6Eh  +
call sub_100F5B2  +
mov dword ptr [esi] offset off_1002108 +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
mov esi ecx +
cmp [ebp+arg_14] ebx +
jnz loc_100902E  +
cmp [ebp+arg_4] 111h +
mov edi [ebp+arg_10] +
jnz loc_1009015  +
mov eax [ebp+arg_8] +
shr eax 10h +
xor ecx ecx +
cmp cx ax +
jnz loc_1009015  +
mov eax 82h +
mov ecx eax +
cmp cx word ptr [ebp+arg_8] +
jnz loc_1009015  +
push [ebp+hWnd]  +
mov ecx esi +
push eax  +
push ebx  +
mov dword ptr [esi+5Ch] 1 +
call sub_100F5DD  +
mov [edi] ebx +
cmp [esi+5Ch] ebx +
jz loc_1009015  +
xor eax eax +
inc eax  +
jmp loc_1009030  +
push ebx  +
push edi  +
push [ebp+hWnd]  +
mov ecx esi +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1008E91  +
test eax eax +
jnz loc_1009010  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+1Ch] 0 +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
jnz loc_10090A8  +
mov ebx [ebp+18h] +
xor edi edi +
inc edi  +
cmp dword ptr [ebp+0Ch] 4Eh +
jnz loc_1009079  +
mov eax [ebp+14h] +
cmp dword ptr [eax+4] 0C8h +
jnz loc_100908E  +
push eax  +
mov [esi+5Ch] edi +
call sub_1008F4A  +
mov [ebx] eax +
cmp dword ptr [esi+5Ch] 0 +
jz loc_100908E  +
mov eax edi +
jmp loc_10090AA  +
cmp dword ptr [ebp+0Ch] 53h +
jnz loc_100908E  +
push dword ptr [ebp+14h]  +
mov [esi+5Ch] edi +
call sub_1008F7F  +
mov [ebx] edi +
jmp loc_100906F  +
***
push 0  +
push ebx  +
push dword ptr [ebp+14h]  +
mov ecx esi +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1008FBF  +
test eax eax +
jnz loc_1009075  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1003110 +
jz loc_10090D1  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax ecx +
mov edx ecx +
shl edx 10h +
and eax 0FF00h +
or eax edx +
mov edx ecx +
and edx 0FF0000h +
shr ecx 10h +
or edx ecx +
shl eax 8 +
shr edx 8 +
or eax edx +
pop ebp  +
retn 4  +
***
mov eax [ecx+120h] +
test al 1 +
jz loc_1009123  +
test al 2 +
jz loc_1009123  +
xor eax eax +
inc eax  +
retn   +
***
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ecx+120h] 8 +
jz loc_1009149  +
mov eax [ebp+arg_0] +
test [ecx+124h] eax +
jz loc_1009149  +
xor eax eax +
inc eax  +
jmp loc_100914B  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov eax [ecx+120h] +
shr eax 2 +
and eax 1 +
retn   +
***
mov eax [ecx+120h] +
shr eax 1Fh +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
call dword ptr [eax+10h]  +
test al al +
jnz loc_1009192  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+14h]  +
test al al +
jnz loc_1009192  +
xor eax eax +
pop esi  +
retn   +
xor eax eax +
inc eax  +
pop esi  +
retn   +
***
mov eax [ecx+120h] +
test eax 200h +
jz loc_10091BB  +
test eax 400h +
jz loc_10091BB  +
test eax 800h +
jz loc_10091BB  +
xor eax eax +
inc eax  +
retn   +
xor eax eax +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
call dword ptr [eax+1Ch]  +
test al al +
jnz loc_10091E0  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+14h]  +
test al al +
jnz loc_10091E0  +
xor eax eax +
pop esi  +
retn   +
xor eax eax +
inc eax  +
pop esi  +
retn   +
***
mov eax [ecx+120h] +
shr eax 4 +
and eax 1 +
retn   +
***
mov eax [ecx+120h] +
shr eax 7 +
and eax 1 +
retn   +
***
mov eax [ecx+120h] +
shr eax 8 +
and eax 1 +
retn   +
***
xor eax eax +
cmp [ecx+120h] eax +
setz al  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+128h] +
mov edx [ebp+arg_0] +
mov [edx] eax +
mov eax [ecx+12Ch] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+130h] +
mov edx [ebp+arg_0] +
mov [edx] eax +
mov eax [ecx+134h] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
pop ebp  +
retn 8  +
***
fld  ds:flt_10030E8 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
xor edi edi +
call dword ptr [eax+10h]  +
test al al +
mov eax [esi] +
mov ecx esi +
jz loc_10092A7  +
push [ebp+arg_0]  +
call dword ptr [eax+5Ch]  +
mov edi eax +
jmp loc_10092C0  +
call dword ptr [eax+14h]  +
test al al +
jz loc_10092BB  +
mov eax [esi+140h] +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
jmp loc_10092C0  +
mov edi 8000FFFFh +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+138h] +
mov edx [ebp+arg_0] +
mov [edx] eax +
mov eax [ecx+13Ch] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
xor edi edi +
call dword ptr [eax+1Ch]  +
test al al +
mov eax [esi] +
mov ecx esi +
jz loc_1009313  +
push [ebp+arg_0]  +
call dword ptr [eax+78h]  +
mov edi eax +
jmp loc_100932C  +
call dword ptr [eax+14h]  +
test al al +
jz loc_1009327  +
mov eax [esi+15Ch] +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
jmp loc_100932C  +
mov edi 8000FFFFh +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+144h] +
mov edx [ebp+arg_0] +
mov [edx] eax +
mov eax [ecx+148h] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
xor edi edi +
call dword ptr [eax+1Ch]  +
test al al +
mov eax [esi] +
mov ecx esi +
jz loc_1009382  +
push [ebp+arg_0]  +
call dword ptr [eax+8Ch]  +
mov edi eax +
jmp loc_100939B  +
call dword ptr [eax+14h]  +
test al al +
jz loc_1009396  +
mov eax [esi+160h] +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
jmp loc_100939B  +
mov edi 8000FFFFh +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+14Ch] +
mov edx [ebp+arg_0] +
mov [edx] eax +
mov eax [ecx+150h] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
xor edi edi +
call dword ptr [eax+1Ch]  +
test al al +
mov eax [esi] +
mov ecx esi +
jz loc_10093F1  +
push [ebp+arg_0]  +
call dword ptr [eax+0A0h]  +
mov edi eax +
jmp loc_100940A  +
call dword ptr [eax+14h]  +
test al al +
jz loc_1009405  +
mov eax [esi+164h] +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
jmp loc_100940A  +
mov edi 8000FFFFh +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+154h] +
mov edx [ebp+arg_0] +
mov [edx] eax +
mov eax [ecx+158h] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+168h] +
mov edx [ebp+arg_0] +
mov [edx] eax +
mov eax [ecx+16Ch] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
xor edi edi +
mov [esi+19Ch] edi +
call dword ptr [eax+0Ch]  +
mov ebx offset aSucceeded_Save +
test al al +
jz loc_1009512  +
push offset aSavingBrightne  +
call nullsub_1  +
mov edx [esi] +
pop ecx  +
lea eax [esi+1A0h] +
push eax  +
mov ecx esi +
call dword ptr [edx+3Ch]  +
mov edi eax +
test edi edi +
jl loc_10094B4  +
push dword ptr [esi+1A0h]  +
push ebx  +
call nullsub_1  +
or dword ptr [esi+19Ch] 1 +
jmp loc_10094BF  +
push edi  +
push offset aFailed0x08x  +
call nullsub_1  +
pop ecx  +
pop ecx  +
test edi edi +
jl loc_1009863  +
push offset aSavingContrast  +
call nullsub_1  +
mov edx [esi] +
pop ecx  +
lea eax [esi+1A4h] +
push eax  +
mov ecx esi +
call dword ptr [edx+48h]  +
mov edi eax +
test edi edi +
jl loc_10094FD  +
push dword ptr [esi+1A4h]  +
push ebx  +
call nullsub_1  +
or dword ptr [esi+19Ch] 2 +
jmp loc_1009508  +
push edi  +
push offset aFailed0x08x  +
call nullsub_1  +
pop ecx  +
pop ecx  +
test edi edi +
jl loc_1009863  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+10h]  +
test al al +
jz loc_100955E  +
push offset aSavingMccsGamm  +
call nullsub_1  +
mov edx [esi] +
pop ecx  +
lea eax [esi+1A8h] +
push eax  +
mov ecx esi +
call dword ptr [edx+5Ch]  +
mov edi eax +
test edi edi +
jl loc_1009551  +
push dword ptr [esi+1A8h]  +
push ebx  +
call nullsub_1  +
or dword ptr [esi+19Ch] 40h +
jmp loc_100955C  +
push edi  +
push offset aFailed0x08x  +
call nullsub_1  +
pop ecx  +
pop ecx  +
test edi edi +
jl loc_1009863  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+14h]  +
test al al +
jz loc_10095B3  +
push offset aSavingGammaRam  +
call nullsub_1  +
mov eax [esi] +
pop ecx  +
lea ecx [esi+1ACh] +
push ecx  +
mov ecx esi +
call dword ptr [eax+60h]  +
mov edi eax +
test edi edi +
jl loc_10095A6  +
push offset aSucceeded_  +
call nullsub_1  +
or dword ptr [esi+19Ch] 80000000h +
jmp loc_10095B2  +
push edi  +
push offset aFailed0x08x  +
call nullsub_1  +
pop ecx  +
pop ecx  +
test edi edi +
jl loc_1009863  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+1Ch]  +
test al al +
jz loc_10096AC  +
push offset aSavingMccsRedG  +
call nullsub_1  +
mov edx [esi] +
pop ecx  +
lea eax [esi+7ACh] +
push eax  +
mov ecx esi +
call dword ptr [edx+78h]  +
mov edi eax +
test edi edi +
jl loc_1009601  +
push dword ptr [esi+7ACh]  +
push ebx  +
call nullsub_1  +
or dword ptr [esi+19Ch] 200h +
jmp loc_100960C  +
push edi  +
push offset aFailed0x08x  +
call nullsub_1  +
pop ecx  +
pop ecx  +
test edi edi +
jl loc_1009863  +
push offset aSavingMccsGree  +
call nullsub_1  +
mov edx [esi] +
pop ecx  +
lea eax [esi+7B0h] +
push eax  +
mov ecx esi +
call dword ptr [edx+8Ch]  +
mov edi eax +
test edi edi +
jl loc_1009650  +
push dword ptr [esi+7B0h]  +
push ebx  +
call nullsub_1  +
or dword ptr [esi+19Ch] 400h +
jmp loc_100965B  +
push edi  +
push offset aFailed0x08x  +
call nullsub_1  +
pop ecx  +
pop ecx  +
test edi edi +
jl loc_1009863  +
push offset aSavingMccsBlue  +
call nullsub_1  +
mov edx [esi] +
pop ecx  +
lea eax [esi+7B4h] +
push eax  +
mov ecx esi +
call dword ptr [edx+0A0h]  +
mov edi eax +
test edi edi +
jl loc_100969F  +
push dword ptr [esi+7B4h]  +
push ebx  +
call nullsub_1  +
or dword ptr [esi+19Ch] 800h +
jmp loc_10096AA  +
push edi  +
push offset aFailed0x08x  +
call nullsub_1  +
pop ecx  +
pop ecx  +
test edi edi +
jl loc_1009863  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+24h]  +
test al al +
jz loc_1009703  +
push offset aSavingSaturati  +
call nullsub_1  +
mov edx [esi] +
pop ecx  +
lea eax [esi+7B8h] +
push eax  +
mov ecx esi +
call dword ptr [edx+0B0h]  +
mov edi eax +
test edi edi +
jl loc_10096F6  +
push dword ptr [esi+7B8h]  +
push ebx  +
call nullsub_1  +
or dword ptr [esi+19Ch] 10h +
jmp loc_1009701  +
push edi  +
push offset aFailed0x08x  +
call nullsub_1  +
pop ecx  +
pop ecx  +
test edi edi +
jl loc_1009863  +
mov eax [esi] +
push 5  +
mov ecx esi +
call dword ptr [eax+28h]  +
test al al +
jz loc_100975C  +
push offset aSavingColorPre  +
call nullsub_1  +
mov edx [esi] +
pop ecx  +
lea eax [esi+7BCh] +
push eax  +
mov ecx esi +
call dword ptr [edx+0BCh]  +
mov edi eax +
test edi edi +
jl loc_100974F  +
push dword ptr [esi+7BCh]  +
push ebx  +
call nullsub_1  +
or dword ptr [esi+19Ch] 8 +
jmp loc_100975A  +
push edi  +
push offset aFailed0x08x  +
call nullsub_1  +
pop ecx  +
pop ecx  +
test edi edi +
jl loc_1009863  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+2Ch]  +
test al al +
jz loc_10097B3  +
push offset aSavingColorTem  +
call nullsub_1  +
mov edx [esi] +
pop ecx  +
lea eax [esi+7C0h] +
push eax  +
mov ecx esi +
call dword ptr [edx+0C4h]  +
mov edi eax +
test edi edi +
jl loc_10097A6  +
push dword ptr [esi+7C0h]  +
push ebx  +
call nullsub_1  +
or dword ptr [esi+19Ch] 4 +
jmp loc_10097B1  +
push edi  +
push offset aFailed0x08x  +
call nullsub_1  +
pop ecx  +
pop ecx  +
test edi edi +
jl loc_1009863  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+30h]  +
test al al +
jz loc_100980D  +
push offset aSavingFleshTon  +
call nullsub_1  +
mov edx [esi] +
pop ecx  +
lea eax [esi+7C4h] +
push eax  +
mov ecx esi +
call dword ptr [edx+0CCh]  +
mov edi eax +
test edi edi +
jl loc_1009800  +
push dword ptr [esi+7C4h]  +
push ebx  +
call nullsub_1  +
or dword ptr [esi+19Ch] 80h +
jmp loc_100980B  +
push edi  +
push offset aFailed0x08x  +
call nullsub_1  +
pop ecx  +
pop ecx  +
test edi edi +
jl loc_1009863  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+34h]  +
test al al +
jz loc_1009863  +
push offset aSavingAutoColo  +
call nullsub_1  +
mov edx [esi] +
pop ecx  +
lea eax [esi+7C8h] +
push eax  +
mov ecx esi +
call dword ptr [edx+0D4h]  +
mov edi eax +
test edi edi +
jl loc_1009856  +
push dword ptr [esi+7C8h]  +
push ebx  +
call nullsub_1  +
or dword ptr [esi+19Ch] 100h +
jmp loc_1009861  +
push edi  +
push offset aFailed0x08x  +
call nullsub_1  +
pop ecx  +
pop ecx  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
xor edi edi +
call dword ptr [eax+0Ch]  +
mov ebx offset aFailed0x08x_ +
test al al +
jz loc_100991B  +
test byte ptr [esi+19Ch] 1 +
jz loc_10098D2  +
lea edi [esi+1A0h] +
push dword ptr [edi]  +
push offset aRestoringBrigh  +
call nullsub_1  +
mov eax [esi] +
pop ecx  +
pop ecx  +
push dword ptr [edi]  +
mov ecx esi +
call dword ptr [eax+40h]  +
mov edi eax +
test edi edi +
jl loc_10098C1  +
push offset aSucceeded_  +
call nullsub_1  +
jmp loc_10098C9  +
push edi  +
push ebx  +
call nullsub_1  +
pop ecx  +
pop ecx  +
test edi edi +
jl loc_1009C49  +
test byte ptr [esi+19Ch] 2 +
jz loc_1009913  +
lea edi [esi+1A4h] +
push dword ptr [edi]  +
push offset aRestoringContr  +
call nullsub_1  +
mov eax [esi] +
pop ecx  +
pop ecx  +
push dword ptr [edi]  +
mov ecx esi +
call dword ptr [eax+4Ch]  +
mov edi eax +
test edi edi +
jl loc_100990A  +
push offset aSucceeded_  +
call nullsub_1  +
jmp loc_1009912  +
push edi  +
push ebx  +
call nullsub_1  +
pop ecx  +
pop ecx  +
test edi edi +
jl loc_1009C49  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+10h]  +
test al al +
jz loc_1009967  +
test byte ptr [esi+19Ch] 40h +
jz loc_1009967  +
lea edi [esi+1A8h] +
push dword ptr [edi]  +
push offset aRestoringGam_0  +
call nullsub_1  +
mov eax [esi] +
pop ecx  +
pop ecx  +
push dword ptr [edi]  +
mov ecx esi +
call dword ptr [eax+68h]  +
mov edi eax +
test edi edi +
jl loc_100995E  +
push offset aSucceeded_  +
call nullsub_1  +
jmp loc_1009966  +
push edi  +
push ebx  +
call nullsub_1  +
pop ecx  +
pop ecx  +
test edi edi +
jl loc_1009C49  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+14h]  +
test al al +
jz loc_10099BA  +
test dword ptr [esi+19Ch] 80000000h +
jz loc_10099BA  +
push offset aRestoringGamma  +
call nullsub_1  +
mov eax [esi] +
pop ecx  +
lea ecx [esi+1ACh] +
push ecx  +
mov ecx esi +
call dword ptr [eax+6Ch]  +
mov edi eax +
test edi edi +
jl loc_10099B1  +
push offset aSucceeded_  +
call nullsub_1  +
jmp loc_10099B9  +
push edi  +
push ebx  +
call nullsub_1  +
pop ecx  +
pop ecx  +
test edi edi +
jl loc_1009C49  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+1Ch]  +
test al al +
jz loc_1009AB6  +
test dword ptr [esi+19Ch] 200h +
jz loc_1009A18  +
lea edi [esi+7ACh] +
push dword ptr [edi]  +
push offset aRestoringMccsR  +
call nullsub_1  +
mov eax [esi] +
pop ecx  +
pop ecx  +
push dword ptr [edi]  +
mov ecx esi +
call dword ptr [eax+80h]  +
mov edi eax +
test edi edi +
jl loc_1009A0F  +
push offset aSucceeded_  +
call nullsub_1  +
jmp loc_1009A17  +
push edi  +
push ebx  +
call nullsub_1  +
pop ecx  +
pop ecx  +
test edi edi +
jl loc_1009C49  +
test dword ptr [esi+19Ch] 400h +
jz loc_1009A67  +
lea edi [esi+7B0h] +
push dword ptr [edi]  +
push offset aRestoringMccsG  +
call nullsub_1  +
mov eax [esi] +
pop ecx  +
pop ecx  +
push dword ptr [edi]  +
mov ecx esi +
call dword ptr [eax+94h]  +
mov edi eax +
test edi edi +
jl loc_1009A5E  +
push offset aSucceeded_  +
call nullsub_1  +
jmp loc_1009A66  +
push edi  +
push ebx  +
call nullsub_1  +
pop ecx  +
pop ecx  +
test edi edi +
jl loc_1009C49  +
test dword ptr [esi+19Ch] 800h +
jz loc_1009AB6  +
lea edi [esi+7B4h] +
push dword ptr [edi]  +
push offset aRestoringMccsB  +
call nullsub_1  +
mov eax [esi] +
pop ecx  +
pop ecx  +
push dword ptr [edi]  +
mov ecx esi +
call dword ptr [eax+0A8h]  +
mov edi eax +
test edi edi +
jl loc_1009AAD  +
push offset aSucceeded_  +
call nullsub_1  +
jmp loc_1009AB5  +
push edi  +
push ebx  +
call nullsub_1  +
pop ecx  +
pop ecx  +
test edi edi +
jl loc_1009C49  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+24h]  +
test al al +
jz loc_1009B0D  +
test byte ptr [esi+19Ch] 10h +
jz loc_1009B0D  +
lea edi [esi+7B8h] +
push dword ptr [edi]  +
push offset aRestoringSatur  +
call nullsub_1  +
mov eax [esi] +
pop ecx  +
pop ecx  +
push dword ptr [edi]  +
mov ecx esi +
call dword ptr [eax+0B4h]  +
mov edi eax +
test edi edi +
jl loc_1009B04  +
push offset aSucceeded_  +
call nullsub_1  +
jmp loc_1009B0C  +
push edi  +
push ebx  +
call nullsub_1  +
pop ecx  +
pop ecx  +
test edi edi +
jl loc_1009C49  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+2Ch]  +
test al al +
jz loc_1009B5B  +
test byte ptr [esi+19Ch] 4 +
jz loc_1009B5B  +
lea edi [esi+7C0h] +
push dword ptr [edi]  +
push offset aRestoringCol_0  +
call nullsub_1  +
mov eax [esi] +
pop ecx  +
pop ecx  +
push dword ptr [edi]  +
mov ecx esi +
call dword ptr [eax+0C8h]  +
mov edi eax +
test edi edi +
jl loc_1009B93  +
push offset aSucceeded_  +
call nullsub_1  +
jmp loc_1009B9B  +
mov eax [esi] +
push 5  +
mov ecx esi +
call dword ptr [eax+28h]  +
test al al +
jz loc_1009B9C  +
test byte ptr [esi+19Ch] 8 +
jz loc_1009B9C  +
lea edi [esi+7BCh] +
push dword ptr [edi]  +
push offset aRestoringColor  +
call nullsub_1  +
mov eax [esi] +
pop ecx  +
pop ecx  +
push dword ptr [edi]  +
mov ecx esi +
call dword ptr [eax+0C0h]  +
jmp loc_1009B49  +
push edi  +
push ebx  +
call nullsub_1  +
pop ecx  +
pop ecx  +
test edi edi +
jl loc_1009C49  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+30h]  +
test al al +
jz loc_1009BF3  +
test byte ptr [esi+19Ch] 80h +
jz loc_1009BF3  +
lea edi [esi+7C4h] +
push dword ptr [edi]  +
push offset aRestoringFlesh  +
call nullsub_1  +
mov eax [esi] +
pop ecx  +
pop ecx  +
push dword ptr [edi]  +
mov ecx esi +
call dword ptr [eax+0D0h]  +
mov edi eax +
test edi edi +
jl loc_1009BEA  +
push offset aSucceeded_  +
call nullsub_1  +
jmp loc_1009BF2  +
push edi  +
push ebx  +
call nullsub_1  +
pop ecx  +
pop ecx  +
test edi edi +
jl loc_1009C49  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+34h]  +
test al al +
jz loc_1009C49  +
test dword ptr [esi+19Ch] 100h +
jz loc_1009C49  +
lea edi [esi+7C8h] +
push dword ptr [edi]  +
push offset aRestoringAutoC  +
call nullsub_1  +
mov eax [esi] +
pop ecx  +
pop ecx  +
push dword ptr [edi]  +
mov ecx esi +
call dword ptr [eax+0D8h]  +
mov edi eax +
test edi edi +
jl loc_1009C40  +
push offset aSucceeded_  +
call nullsub_1  +
jmp loc_1009C48  +
push edi  +
push ebx  +
call nullsub_1  +
pop ecx  +
pop ecx  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov eax [ecx] +
push esi  +
call dword ptr [eax+0E8h]  +
mov esi eax +
test esi esi +
jge loc_1009C70  +
push esi  +
push 136h  +
push 0  +
call sub_100FF4F  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 6Ch +
mov eax dword_1014484 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+hMonitor] +
push esi  +
mov esi ecx +
cmp eax [esi+10h] +
jnz loc_1009CBE  +
lea ecx [ebp+mi] +
push ecx  +
push eax  +
mov [ebp+mi.cbSize] 68h +
call ds:GetMonitorInfoW  +
test eax eax +
jz loc_1009CBE  +
push 0  +
push 0  +
lea eax [ebp+var_44] +
push eax  +
push eax  +
call ds:CreateDCW  +
mov [esi+0Ch] eax +
mov ecx [ebp+var_4] +
xor eax eax +
cmp [esi+0Ch] eax +
pop esi  +
setz al  +
xor ecx ebp +
call sub_10113D3  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3BCh +
mov eax dword_1014484 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov eax ecx +
push edi  +
lea ecx [ebp+mi] +
push ecx  +
push dword ptr [eax+10h]  +
xor esi esi +
mov [ebp+var_3BC] eax +
mov [ebp+pv] esi +
mov [ebp+mi.cbSize] 68h +
call ds:GetMonitorInfoW  +
mov ebx 0FFFFh +
mov edi 80070000h +
test eax eax +
jnz loc_1009D3C  +
call ds:GetLastError  +
test eax eax +
jle loc_1009D32  +
and eax ebx +
or eax edi +
mov esi eax +
test esi esi +
jl loc_1009E14  +
push 0  +
lea eax [ebp+DisplayDevice] +
push eax  +
push 0  +
lea eax [ebp+Unused] +
push eax  +
mov [ebp+DisplayDevice.cb] 348h +
call ds:EnumDisplayDevicesW  +
test eax eax +
jnz loc_1009D6F  +
call ds:GetLastError  +
test eax eax +
jle loc_1009D6D  +
and eax ebx +
or eax edi +
mov esi eax +
test esi esi +
jl loc_1009E14  +
lea eax [ebp+pv] +
push eax  +
push offset rclsid  +
call ds:StringFromCLSID  +
mov esi eax +
test esi esi +
jl loc_1009E14  +
lea eax [ebp+var_26C] +
push eax  +
call ds:_wcsupr  +
push [ebp+pv]  +
lea eax [ebp+var_26C] +
push eax  +
call ds:wcsstr  +
mov ebx eax +
add esp 0Ch +
test ebx ebx +
jnz loc_1009DC1  +
mov esi 80004005h +
test esi esi +
jl loc_1009E14  +
mov edi [ebp+var_3BC] +
push ebx  +
lea ecx [edi+4] +
call sub_1011F9D  +
mov esi eax +
test esi esi +
jl loc_1009E14  +
mov eax [ebp+pv] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1009DE3  +
sub eax edx +
add edi 170h +
sar eax 1 +
push edi  +
lea eax [ebx+eax*2+2] +
push offset a04d  +
push eax  +
call swscanf_s  +
add esp 0Ch +
cmp eax 1 +
jz loc_1009E14  +
mov esi 80004005h +
cmp [ebp+pv] 0 +
jz loc_1009E29  +
push [ebp+pv]  +
call ds:CoTaskMemFree  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10113D3  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
fild  [ebp+arg_0] +
test eax eax +
jge loc_1009E54  +
fadd  ds:flt_10038C0 +
fdiv  ds:dbl_10038B8 +
fstp  [ebp+arg_0] +
fld  [ebp+arg_0] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
xor ebx ebx +
mov esi ecx +
push edi  +
mov [esi+10h] ebx +
cmp [ebp+arg_0] ebx +
jz loc_1009E90  +
cmp [esi+118h] bl +
jz loc_1009E90  +
lea eax [esi+14h] +
push eax  +
push 1  +
call DestroyPhysicalMonitors  +
mov [esi+118h] bl +
cmp [ebp+arg_0] ebx +
jz loc_1009EA9  +
mov eax [esi+0Ch] +
cmp eax ebx +
jz loc_1009EA9  +
push eax  +
call ds:DeleteDC  +
push 64h  +
pop eax  +
mov [esi+15Ch] eax +
mov [esi+160h] eax +
mov [esi+164h] eax +
mov eax 0FFh +
mov [esi+0Ch] ebx +
mov [esi+170h] ebx +
mov [esi+120h] ebx +
mov [esi+128h] ebx +
mov [esi+12Ch] ebx +
mov [esi+130h] ebx +
mov [esi+134h] ebx +
mov [esi+138h] ebx +
mov [esi+13Ch] ebx +
mov [esi+140h] ebx +
mov [esi+144h] ebx +
mov [esi+148h] ebx +
mov [esi+14Ch] ebx +
mov [esi+150h] ebx +
mov [esi+154h] ebx +
mov [esi+158h] ebx +
mov [esi+168h] ebx +
mov [esi+16Ch] ebx +
mov [esi+124h] ebx +
mov [esi+19Ch] ebx +
mov [esi+1A0h] ebx +
mov [esi+1A4h] ebx +
mov [esi+1A8h] ebx +
mov [esi+7ACh] ebx +
mov [esi+7B0h] ebx +
mov [esi+7B4h] ebx +
mov [esi+7B8h] ebx +
mov [esi+7BCh] ebx +
mov [esi+7C0h] ebx +
mov [esi+7C4h] eax +
mov [esi+7C8h] eax +
cmp [ebp+arg_0] ebx +
jz loc_1009F95  +
push dword ptr [esi+194h]  +
call DccwReleaseDisplayProfileAssociationList  +
push dword ptr [esi+198h]  +
call DccwReleaseDisplayProfileAssociationList  +
mov edi offset dword_1001B28 +
push edi  +
lea ecx [esi+4] +
mov [esi+194h] ebx +
mov [esi+198h] ebx +
call sub_1011F9D  +
push edi  +
lea ecx [esi+174h] +
call sub_1011F9D  +
push edi  +
lea ecx [esi+17Ch] +
call sub_1011F9D  +
push edi  +
lea ecx [esi+184h] +
call sub_1011F9D  +
push edi  +
lea ecx [esi+18Ch] +
call sub_1011F9D  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+lpString] +
push edi  +
mov edi [ebp+arg_4] +
push esi  +
call ds:lstrlenW  +
lea ecx [esi+eax*2] +
mov eax esi +
cmp esi ecx +
jnb loc_100A021  +
xor esi esi +
cmp word ptr [eax] 2Dh +
jz loc_100A01B  +
mov dl [eax] +
mov [edi] dl +
inc edi  +
inc esi  +
cmp esi 4 +
jnb loc_100A021  +
inc eax  +
inc eax  +
cmp eax ecx +
jb loc_100A00A  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov eax ecx +
push esi  +
mov esi 600h +
mov edx eax +
mov byte ptr [edx] 0 +
inc edx  +
dec esi  +
jnz loc_100A036  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_10038C8 +
call sub_1011ACB  +
and dword ptr [esi+11Ch] 0 +
lea ecx [esi+174h] +
call sub_1011ACB  +
lea ecx [esi+17Ch] +
call sub_1011ACB  +
lea ecx [esi+184h] +
call sub_1011ACB  +
lea ecx [esi+18Ch] +
call sub_1011ACB  +
lea ecx [esi+1ACh] +
call sub_100A02C  +
push 0  +
mov ecx esi +
call sub_1009E69  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push 1  +
mov dword ptr [esi] offset off_10038C8 +
call sub_1009E69  +
lea ecx [esi+18Ch] +
call sub_1011C1D  +
lea ecx [esi+184h] +
call sub_1011C1D  +
lea ecx [esi+17Ch] +
call sub_1011C1D  +
lea ecx [esi+174h] +
call sub_1011C1D  +
lea ecx [esi+4] +
call sub_1011C1D  +
mov dword ptr [esi] offset off_1003110 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov esi ecx +
mov ecx [esi+8] +
xor ebx ebx +
push edi  +
cmp ecx ebx +
jz loc_100A129  +
mov eax ecx +
lea edi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx bx +
jnz loc_100A115  +
sub eax edi +
sar eax 1 +
lea eax [eax+eax+2] +
jmp loc_100A12B  +
xor eax eax +
mov [ebp+var_8] eax +
lea eax [ebp+var_10] +
push eax  +
push 1  +
push offset dword_10015E0  +
push dword_101450C  +
mov [ebp+var_10] ecx +
push dword_1014508  +
mov [ebp+var_C] ebx +
mov [ebp+var_4] ebx +
call ds:EventWrite  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+0E8h]  +
mov edi eax +
cmp edi ebx +
jge loc_100A170  +
push edi  +
push 136h  +
push ebx  +
call sub_100FF4F  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+104h]  +
mov ebx eax +
test ebx ebx +
jge loc_100A193  +
push ebx  +
push 13Dh  +
push 0  +
call sub_100FF4F  +
test edi edi +
jl loc_100A193  +
mov edi ebx +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+0F4h]  +
mov esi eax +
test esi esi +
jge loc_100A1B6  +
push esi  +
push 13Fh  +
push 0  +
call sub_100FF4F  +
test edi edi +
jl loc_100A1B6  +
mov edi esi +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea ecx [esi+4] +
xor edi edi +
call sub_1011AEC  +
test eax eax +
jbe loc_100A207  +
mov eax [esi+194h] +
test eax eax +
jz loc_100A1F0  +
push dword ptr [esi+8]  +
push edi  +
push eax  +
call DccwSetDisplayProfileAssociationList  +
mov edi eax +
test edi edi +
jl loc_100A207  +
mov eax [esi+198h] +
test eax eax +
jz loc_100A207  +
push dword ptr [esi+8]  +
push 1  +
push eax  +
call DccwSetDisplayProfileAssociationList  +
mov edi eax +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov ecx [ebp+arg_C] +
push [ebp+hMonitor]  +
call sub_1009C79  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 228h +
mov eax dword_1014484 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
mov eax [ebx+8] +
lea ecx [ebp+var_218] +
push ecx  +
push 6D6E7472h  +
xor edi edi +
push eax  +
xor esi esi +
mov [ebp+var_210] edi +
mov [ebp+var_214] edi +
call WcsGetUsePerUserProfiles  +
test eax eax +
jnz loc_100A28E  +
call ds:GetLastError  +
cmp eax edi +
jle loc_100A284  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
cmp esi edi +
jl loc_100A380  +
cmp [ebp+var_218] edi +
jz loc_100A2A0  +
mov [ebp+var_214] 1 +
mov eax [ebx+8] +
lea ecx [ebp+var_20C] +
push ecx  +
mov edi 208h +
push edi  +
push 0  +
push 4  +
push 1  +
push eax  +
push [ebp+var_214]  +
call WcsGetDefaultColorProfile  +
test eax eax +
jnz loc_100A2DC  +
call ds:GetLastError  +
test eax eax +
jle loc_100A2DA  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
test esi esi +
jl loc_100A380  +
mov [ebp+var_220] edi +
xor edi edi +
push edi  +
push 3  +
xor eax eax +
inc eax  +
push eax  +
push eax  +
push edi  +
mov [ebp+var_228] eax +
push edi  +
lea eax [ebp+var_228] +
lea ecx [ebp+var_20C] +
push eax  +
mov [ebp+var_224] ecx +
call WcsOpenColorProfileW  +
mov [ebp+var_210] eax +
cmp eax edi +
jnz loc_100A334  +
call ds:GetLastError  +
cmp eax edi +
jle loc_100A332  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
cmp esi edi +
jl loc_100A380  +
lea eax [ebp+var_21C] +
push eax  +
push [ebp+var_210]  +
call DccwGetGamutSize  +
mov esi eax +
test esi esi +
jl loc_100A380  +
fld  ds:flt_100310C +
fcomp  [ebp+var_21C] +
fnstsw  ax +
test ah 5 +
jp loc_100A37C  +
push 191h  +
push dword ptr [ebx+11Ch]  +
call sub_1010085  +
test eax eax +
jnz loc_100A37C  +
mov esi 80040006h +
test esi esi +
jge loc_100A38A  +
cmp esi 80040006h +
jz loc_100A38A  +
xor esi esi +
cmp [ebp+var_210] 0 +
jz loc_100A39E  +
push [ebp+var_210]  +
call CloseColorProfile  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10113D3  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 210h +
mov eax dword_1014484 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
lea eax [ebp+var_210] +
push eax  +
lea eax [ebp+var_20C] +
push eax  +
push 0  +
mov esi ecx +
mov [ebp+var_210] 208h +
call GetColorDirectoryW  +
test eax eax +
jnz loc_100A40B  +
call ds:GetLastError  +
test eax eax +
jle loc_100A405  +
and eax 0FFFFh +
or eax 80070000h +
test eax eax +
jl loc_100A48C  +
push dword ptr [esi+170h]  +
lea eax [esi+174h] +
push offset aCalibrateddisp  +
push eax  +
call sub_101215F  +
add esp 0Ch +
test eax eax +
jl loc_100A48C  +
push edi  +
push dword ptr [esi+178h]  +
lea eax [ebp+var_20C] +
push eax  +
mov edi offset aSS +
lea eax [esi+184h] +
push edi  +
push eax  +
call sub_101215F  +
add esp 10h +
test eax eax +
jl loc_100A48B  +
push dword ptr [esi+170h]  +
lea eax [esi+17Ch] +
push offset aCalibrateddi_0  +
push eax  +
call sub_101215F  +
add esp 0Ch +
test eax eax +
jl loc_100A48B  +
push dword ptr [esi+180h]  +
lea eax [ebp+var_20C] +
push eax  +
push edi  +
add esi 18Ch +
push esi  +
call sub_101215F  +
add esp 10h +
pop edi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_10113D3  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 62Ch +
mov eax dword_1014484 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi ecx +
mov ecx 600h +
lea eax [ebp+var_604] +
mov byte ptr [eax] 0 +
inc eax  +
dec ecx  +
jnz loc_100A4C2  +
mov ebx [ebp+arg_0] +
push ebx  +
call sub_100FCB4  +
fdiv  ds:dbl_10039F0 +
push dword ptr [esi+15Ch]  +
lea eax [ebp+var_604] +
mov [ebp+var_620] eax +
lea eax [ebp+var_404] +
mov [ebp+var_61C] eax +
lea eax [ebp+var_204] +
mov ecx esi +
mov [ebp+var_618] eax +
fstp  [ebp+var_614] +
call sub_1009E3F  +
fstp  [ebp+var_62C] +
push dword ptr [esi+160h]  +
call sub_1009E3F  +
fstp  [ebp+var_628] +
push dword ptr [esi+164h]  +
call sub_1009E3F  +
fstp  [ebp+var_624] +
and [ebp+var_60C] 0 +
push edi  +
fild  [ebp+var_60C] +
fdiv  ds:dbl_10039E8 +
fstp  [ebp+var_608] +
fld  [ebp+var_608] +
fld  [ebp+var_614] +
call _CIpow  +
fstp  [ebp+var_608] +
fld  [ebp+var_608] +
xor edi edi +
fstp  [ebp+var_608] +
fld  [ebp+edi+var_62C] +
fmul  [ebp+var_608] +
fstp  [ebp+var_610] +
fld  [ebp+var_610] +
fmul  ds:dbl_10039E8 +
fadd  ds:dbl_1002038 +
call _ftol2  +
mov ecx [ebp+edi+var_620] +
mov edx [ebp+var_60C] +
shl ax 8 +
add edi 4 +
cmp edi 0Ch +
mov [ecx+edx*2] ax +
jl loc_100A576  +
inc [ebp+var_60C]  +
cmp [ebp+var_60C] 100h +
jb loc_100A53F  +
mov eax [esi] +
lea ecx [ebp+var_604] +
push ecx  +
mov ecx esi +
call dword ptr [eax+6Ch]  +
pop edi  +
test eax eax +
jl loc_100A5EC  +
mov [esi+140h] ebx +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10113D3  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 614h +
mov eax dword_1014484 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
mov ecx 600h +
lea eax [ebp+var_604] +
mov byte ptr [eax] 0 +
inc eax  +
dec ecx  +
jnz loc_100A626  +
mov eax [ebp+arg_0] +
sub eax ecx +
jz loc_100A660  +
dec eax  +
jz loc_100A652  +
dec eax  +
jz loc_100A644  +
mov eax 80070057h +
jmp loc_100A75E  +
lea edi [ebp+var_204] +
lea ebx [esi+164h] +
jmp loc_100A66C  +
lea edi [ebp+var_404] +
lea ebx [esi+160h] +
jmp loc_100A66C  +
lea edi [ebp+var_604] +
lea ebx [esi+15Ch] +
push [ebp+arg_4]  +
mov ecx esi +
call sub_1009E3F  +
fstp  [ebp+var_614] +
mov eax [esi] +
lea ecx [ebp+var_604] +
push ecx  +
mov ecx esi +
call dword ptr [eax+60h]  +
test eax eax +
jl loc_100A75E  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+10h]  +
test al al +
jz loc_100A6A1  +
fld1   +
jmp loc_100A6C8  +
mov eax [esi] +
lea ecx [ebp+var_610] +
push ecx  +
mov ecx esi +
call dword ptr [eax+58h]  +
test eax eax +
jl loc_100A75E  +
push [ebp+var_610]  +
call sub_100FCB4  +
fdiv  ds:dbl_10039F0 +
and [ebp+var_60C] 0 +
fstp  [ebp+var_610] +
fild  [ebp+var_60C] +
fdiv  ds:dbl_10039E8 +
fstp  [ebp+var_608] +
fld  [ebp+var_608] +
fld  [ebp+var_610] +
call _CIpow  +
fstp  [ebp+var_608] +
fld  [ebp+var_608] +
fmul  [ebp+var_614] +
fstp  [ebp+var_608] +
fld  [ebp+var_608] +
fmul  ds:dbl_10039E8 +
fadd  ds:dbl_1002038 +
call _ftol2  +
mov ecx [ebp+var_60C] +
shl ax 8 +
inc [ebp+var_60C]  +
cmp [ebp+var_60C] 100h +
mov [edi+ecx*2] ax +
jb loc_100A6D5  +
mov eax [esi] +
lea ecx [ebp+var_604] +
push ecx  +
mov ecx esi +
call dword ptr [eax+6Ch]  +
test eax eax +
jl loc_100A75E  +
mov ecx [ebp+arg_4] +
mov [ebx] ecx +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10113D3  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
push edi  +
push 1  +
mov [ebp+var_4] ecx +
xor ebx ebx +
call WcsSetCalibrationManagementState  +
mov edi 0FFFFh +
mov esi 80070000h +
test eax eax +
jnz loc_100A7AD  +
call ds:GetLastError  +
test eax eax +
jle loc_100A7A7  +
and eax edi +
or eax esi +
mov ebx eax +
test ebx ebx +
jl loc_100A7F1  +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_100A7F1  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100A7B7  +
sub eax edx +
sar eax 1 +
jz loc_100A7F1  +
push [ebp+arg_0]  +
mov eax [ebp+var_4] +
mov eax [eax+8] +
xor ecx ecx +
push ecx  +
push 4  +
push ecx  +
push eax  +
push ecx  +
call WcsSetDefaultColorProfile  +
test eax eax +
jnz loc_100A7F1  +
call ds:GetLastError  +
test eax eax +
jle loc_100A7EF  +
and eax edi +
or eax esi +
mov ebx eax +
and [ebp+var_8] 0 +
test ebx ebx +
jl loc_100A894  +
mov eax [ebp+var_4] +
mov eax [eax+8] +
lea ecx [ebp+var_8] +
push ecx  +
push 6D6E7472h  +
push eax  +
call WcsGetUsePerUserProfiles  +
test eax eax +
jnz loc_100A826  +
call ds:GetLastError  +
test eax eax +
jle loc_100A824  +
and eax edi +
or eax esi +
mov ebx eax +
test ebx ebx +
jl loc_100A894  +
cmp [ebp+var_8] 0 +
jz loc_100A875  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_100A875  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100A83A  +
sub eax edx +
sar eax 1 +
jz loc_100A875  +
push [ebp+arg_4]  +
mov eax [ebp+var_4] +
mov eax [eax+8] +
push 0  +
push 4  +
push 0  +
push eax  +
push 1  +
call WcsSetDefaultColorProfile  +
test eax eax +
jnz loc_100A875  +
call ds:GetLastError  +
test eax eax +
jle loc_100A873  +
and eax edi +
or eax esi +
mov ebx eax +
test ebx ebx +
jl loc_100A894  +
push 0  +
call WcsSetCalibrationManagementState  +
test eax eax +
jnz loc_100A894  +
call ds:GetLastError  +
test eax eax +
jle loc_100A892  +
and eax edi +
or eax esi +
mov ebx eax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push edi  +
xor edi edi +
mov edx ecx +
mov [ebp+var_C] edx +
mov [ebp+var_4] edi +
mov [ebp+var_8] edi +
cmp [ebp+arg_0] edi +
jz loc_100A97B  +
mov eax [ebp+arg_0] +
push esi  +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx di +
jnz loc_100A8C8  +
sub eax esi +
sar eax 1 +
jz loc_100A97A  +
push ebx  +
push dword ptr [edx+8]  +
push [ebp+arg_0]  +
push edi  +
call WcsDisassociateColorProfileFromDevice  +
mov ebx ds:GetLastError +
mov edi 0FFFFh +
mov esi 80070000h +
test eax eax +
jnz loc_100A91A  +
call ebx  +
cmp eax 7DFh +
jz loc_100A91A  +
cmp eax 2 +
jz loc_100A91A  +
test eax eax +
jle loc_100A913  +
and eax edi +
or eax esi +
mov [ebp+var_4] eax +
test eax eax +
jl loc_100A979  +
mov eax [ebp+var_C] +
mov eax [eax+8] +
lea ecx [ebp+var_8] +
push ecx  +
push 6D6E7472h  +
push eax  +
call WcsGetUsePerUserProfiles  +
test eax eax +
jnz loc_100A940  +
call ebx  +
test eax eax +
jle loc_100A93D  +
and eax edi +
or eax esi +
mov [ebp+var_4] eax +
cmp [ebp+var_4] 0 +
jl loc_100A979  +
cmp [ebp+var_8] 0 +
jz loc_100A979  +
mov eax [ebp+var_C] +
push dword ptr [eax+8]  +
push [ebp+arg_0]  +
push 1  +
call WcsDisassociateColorProfileFromDevice  +
test eax eax +
jnz loc_100A979  +
call ebx  +
cmp eax 7DFh +
jz loc_100A979  +
cmp eax 2 +
jz loc_100A979  +
test eax eax +
jle loc_100A976  +
and eax edi +
or eax esi +
mov [ebp+var_4] eax +
pop ebx  +
pop esi  +
mov eax [ebp+var_4] +
pop edi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 6Ch +
mov eax dword_1014484 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
mov edi ecx +
lea ecx [ebp+var_28] +
mov [ebp+var_50] eax +
call sub_1011ACB  +
push 1F5h  +
push hModule  +
lea ecx [ebp+var_28] +
call sub_1011C2B  +
lea ecx [ebp+var_38] +
mov esi eax +
call sub_1011ACB  +
test esi esi +
jl loc_100A9E6  +
push 1F6h  +
push hModule  +
lea ecx [ebp+var_38] +
call sub_1011C2B  +
mov esi eax +
lea ecx [ebp+var_30] +
call sub_1011ACB  +
test esi esi +
jl loc_100AA07  +
push 1F7h  +
push hModule  +
lea ecx [ebp+var_30] +
call sub_1011C2B  +
mov esi eax +
lea ecx [ebp+var_20] +
call sub_1011ACB  +
test esi esi +
jl loc_100AA28  +
push 1F8h  +
push hModule  +
lea ecx [ebp+var_20] +
call sub_1011C2B  +
mov esi eax +
lea ecx [ebp+var_18] +
call sub_1011ACB  +
test esi esi +
jl loc_100ABFF  +
lea eax [ebp+SystemTime] +
push eax  +
call ds:GetSystemTime  +
movzx eax [ebp+SystemTime.wSecond] +
push eax  +
movzx eax [ebp+SystemTime.wMinute] +
push eax  +
movzx eax [ebp+SystemTime.wHour] +
push eax  +
movzx eax [ebp+SystemTime.wDay] +
push eax  +
movzx eax [ebp+SystemTime.wMonth] +
push eax  +
movzx eax [ebp+SystemTime.wYear] +
push eax  +
lea eax [ebp+var_18] +
push offset a4d02d02dt02d02  +
push eax  +
call sub_101215F  +
mov esi eax +
add esp 20h +
test esi esi +
jl loc_100ABFF  +
push [ebp+var_14]  +
push [ebp+var_1C]  +
push [ebp+var_2C]  +
push [ebp+var_34]  +
push [ebp+var_24]  +
push offset Source  +
push ebx  +
call sub_10120A7  +
mov esi eax +
add esp 1Ch +
test esi esi +
jl loc_100ABFF  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+14h]  +
test al al +
jz loc_100AB88  +
lea ecx [ebp+var_C] +
call sub_1011ACB  +
push dword ptr [edi+140h]  +
call sub_100FCB4  +
fdiv  ds:dbl_10039F0 +
push dword ptr [edi+15Ch]  +
mov ecx edi +
fstp  [ebp+var_3C] +
call sub_1009E3F  +
fstp  [ebp+var_4C] +
push dword ptr [edi+160h]  +
call sub_1009E3F  +
fstp  [ebp+var_44] +
push dword ptr [edi+164h]  +
call sub_1009E3F  +
fstp  [ebp+var_48] +
fld  [ebp+var_3C] +
fld1   +
fdivrp st(1) st +
fstp  [ebp+var_40] +
fld  [ebp+var_48] +
fld  [ebp+var_40] +
call _CIpow  +
fstp  [ebp+var_48] +
fld  [ebp+var_48] +
sub esp 10h +
fstp  [esp+88h+var_80] +
fld  [ebp+var_3C] +
fstp  [esp+88h+var_88] +
fld  [ebp+var_44] +
fld  [ebp+var_40] +
call _CIpow  +
fstp  [ebp+var_44] +
fld  [ebp+var_44] +
sub esp 10h +
fstp  [esp+98h+var_90] +
fld  [ebp+var_3C] +
fstp  [esp+98h+var_98] +
fld  [ebp+var_4C] +
fld  [ebp+var_40] +
call _CIpow  +
fstp  [ebp+var_4C] +
fld  [ebp+var_4C] +
sub esp 10h +
fstp  [esp+0A8h+var_A0] +
lea eax [ebp+var_C] +
fld  [ebp+var_3C] +
fstp  [esp+0A8h+var_A8] +
push offset aCalAdaptergamm  +
push eax  +
call sub_101215F  +
mov esi eax +
add esp 38h +
test esi esi +
jl loc_100AB80  +
push [ebp+var_8]  +
mov ecx ebx +
call sub_1011EBB  +
mov esi eax +
lea ecx [ebp+var_C] +
call sub_1011C1D  +
test esi esi +
jl loc_100ABFF  +
push offset aCdmCalibration  +
mov ecx ebx +
call sub_1011EBB  +
mov esi eax +
test esi esi +
jl loc_100ABFF  +
mov ecx ebx +
mov [ebp+var_6C] 2 +
call sub_1011AEC  +
add eax eax +
mov [ebp+var_64] eax +
mov eax [ebx+4] +
push 0  +
mov [ebp+var_68] eax +
xor eax eax +
inc eax  +
push 3  +
push eax  +
push eax  +
mov [ebp+var_10] eax +
push 0  +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+var_6C] +
push eax  +
mov [ebp+var_8] 12h +
mov [ebp+var_C] offset aD65_camp +
call WcsOpenColorProfileW  +
mov ecx [ebp+var_50] +
mov [ecx] eax +
test eax eax +
jnz loc_100ABFF  +
call ds:GetLastError  +
test eax eax +
jle loc_100ABFD  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
lea ecx [ebp+var_18] +
call sub_1011C1D  +
lea ecx [ebp+var_20] +
call sub_1011C1D  +
lea ecx [ebp+var_30] +
call sub_1011C1D  +
lea ecx [ebp+var_38] +
call sub_1011C1D  +
lea ecx [ebp+var_28] +
call sub_1011C1D  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10113D3  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_100AC53  +
push [ebp+arg_0]  +
call ??_V@YAXPAX@Z  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
call dword ptr [eax+10h]  +
test al al +
mov eax [esi] +
mov ecx esi +
jz loc_100AC79  +
push [ebp+arg_0]  +
call dword ptr [eax+68h]  +
jmp loc_100AC91  +
call dword ptr [eax+14h]  +
test al al +
jz loc_100AC8C  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_100A49E  +
jmp loc_100AC91  +
mov eax 8000FFFFh +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
call dword ptr [eax+1Ch]  +
test al al +
mov eax [esi] +
mov ecx esi +
jz loc_100ACBB  +
push [ebp+arg_0]  +
call dword ptr [eax+80h]  +
jmp loc_100ACD5  +
call dword ptr [eax+14h]  +
test al al +
jz loc_100ACD0  +
push [ebp+arg_0]  +
mov ecx esi +
push 0  +
call sub_100A601  +
jmp loc_100ACD5  +
mov eax 8000FFFFh +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
call dword ptr [eax+1Ch]  +
test al al +
mov eax [esi] +
mov ecx esi +
jz loc_100ACFF  +
push [ebp+arg_0]  +
call dword ptr [eax+94h]  +
jmp loc_100AD19  +
call dword ptr [eax+14h]  +
test al al +
jz loc_100AD14  +
push [ebp+arg_0]  +
mov ecx esi +
push 1  +
call sub_100A601  +
jmp loc_100AD19  +
mov eax 8000FFFFh +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
call dword ptr [eax+1Ch]  +
test al al +
mov eax [esi] +
mov ecx esi +
jz loc_100AD43  +
push [ebp+arg_0]  +
call dword ptr [eax+0A8h]  +
jmp loc_100AD5D  +
call dword ptr [eax+14h]  +
test al al +
jz loc_100AD58  +
push [ebp+arg_0]  +
mov ecx esi +
push 2  +
call sub_100A601  +
jmp loc_100AD5D  +
mov eax 8000FFFFh +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
push 64h  +
pop eax  +
mov [esi+164h] eax +
mov [esi+160h] eax +
mov [esi+15Ch] eax +
mov eax [esi] +
xor edi edi +
call dword ptr [eax+0Ch]  +
test al al +
jz loc_100AE8F  +
mov eax [esi+12Ch] +
fild  dword ptr [esi+12Ch] +
test eax eax +
jge loc_100ADAC  +
fadd  ds:flt_10038C0 +
fld  ds:dbl_1002038 +
fmul st(1) st +
faddp st(1) st +
call _ftol2  +
mov edi eax +
push edi  +
push offset aInitializingBr  +
call nullsub_1  +
mov eax [esi] +
pop ecx  +
pop ecx  +
push edi  +
mov ecx esi +
call dword ptr [eax+40h]  +
mov edi eax +
mov ebx 80070000h +
test edi edi +
jl loc_100ADE9  +
push offset aSucceeded_  +
call nullsub_1  +
jmp loc_100AE08  +
call ds:GetLastError  +
test eax eax +
jle loc_100ADFA  +
and eax 0FFFFh +
or eax ebx +
mov edi eax +
push edi  +
push offset aFailed0x08x_  +
call nullsub_1  +
pop ecx  +
pop ecx  +
test edi edi +
jl loc_100B017  +
mov eax [esi+134h] +
fild  dword ptr [esi+134h] +
test eax eax +
jge loc_100AE27  +
fadd  ds:flt_10038C0 +
fld  ds:dbl_1002038 +
fmul st(1) st +
faddp st(1) st +
call _ftol2  +
mov edi eax +
push edi  +
push offset aInitializingCo  +
call nullsub_1  +
mov eax [esi] +
pop ecx  +
pop ecx  +
push edi  +
mov ecx esi +
call dword ptr [eax+4Ch]  +
mov edi eax +
test edi edi +
jl loc_100AE64  +
push offset aSucceeded_  +
call nullsub_1  +
mov ebx offset aFailed0x08x_ +
jmp loc_100AE84  +
call ds:GetLastError  +
test eax eax +
jle loc_100AE75  +
and eax 0FFFFh +
or eax ebx +
mov edi eax +
push edi  +
mov ebx offset aFailed0x08x_ +
push ebx  +
call nullsub_1  +
pop ecx  +
pop ecx  +
test edi edi +
jl loc_100B017  +
jmp loc_100AE94  +
mov ebx offset aFailed0x08x_ +
mov eax [esi] +
push 5  +
mov ecx esi +
call dword ptr [eax+28h]  +
test al al +
jz loc_100AECD  +
push 5  +
push offset aInitializing_0  +
call nullsub_1  +
mov eax [esi] +
pop ecx  +
pop ecx  +
push 5  +
mov ecx esi +
call dword ptr [eax+0C0h]  +
mov edi eax +
test edi edi +
jl loc_100AEF7  +
push offset aSucceeded_  +
call nullsub_1  +
jmp loc_100AEFF  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+2Ch]  +
test al al +
jz loc_100AF00  +
mov edi 1968h +
push edi  +
push offset aInitializing_1  +
call nullsub_1  +
mov eax [esi] +
pop ecx  +
pop ecx  +
push edi  +
mov ecx esi +
call dword ptr [eax+0C8h]  +
jmp loc_100AEBB  +
push edi  +
push ebx  +
call nullsub_1  +
pop ecx  +
pop ecx  +
test edi edi +
jl loc_100B017  +
fld  ds:flt_10030E8 +
push ecx  +
fstp  [esp+1Ch+var_1C] +
call sub_100FC8C  +
mov [ebp+var_4] eax +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+14h]  +
test al al +
jz loc_100AF55  +
push offset aSettingLinearG  +
call nullsub_1  +
pop ecx  +
push [ebp+var_4]  +
mov ecx esi +
call sub_100A49E  +
mov edi eax +
test edi edi +
jl loc_100AF4C  +
push offset aSucceeded_  +
call nullsub_1  +
jmp loc_100AF54  +
push edi  +
push ebx  +
call nullsub_1  +
pop ecx  +
pop ecx  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+10h]  +
test al al +
jz loc_100AF94  +
push [ebp+var_4]  +
push offset aSettingGammaTo  +
call nullsub_1  +
mov eax [esi] +
pop ecx  +
pop ecx  +
push [ebp+var_4]  +
mov ecx esi +
call dword ptr [eax+68h]  +
mov edi eax +
test edi edi +
jl loc_100AF8B  +
push offset aSucceeded_  +
call nullsub_1  +
jmp loc_100AF93  +
push edi  +
push ebx  +
call nullsub_1  +
pop ecx  +
pop ecx  +
test edi edi +
jl loc_100B017  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+30h]  +
test al al +
jz loc_100AFD5  +
push offset aDisablingFlesh  +
call nullsub_1  +
mov eax [esi] +
pop ecx  +
push 0  +
mov ecx esi +
call dword ptr [eax+0D0h]  +
mov edi eax +
test edi edi +
jl loc_100AFCC  +
push offset aSucceeded_  +
call nullsub_1  +
jmp loc_100AFD4  +
push edi  +
push ebx  +
call nullsub_1  +
pop ecx  +
pop ecx  +
test edi edi +
jl loc_100B017  +
test dword ptr [esi+120h] 100h +
jz loc_100B017  +
push offset aDisablingAutoC  +
call nullsub_1  +
mov eax [esi] +
pop ecx  +
push 0  +
mov ecx esi +
call dword ptr [eax+0D8h]  +
mov edi eax +
test edi edi +
jl loc_100B00E  +
push offset aSucceeded_  +
call nullsub_1  +
jmp loc_100B016  +
push edi  +
push ebx  +
call nullsub_1  +
pop ecx  +
pop ecx  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov eax [ecx+180h] +
push eax  +
push eax  +
call sub_100A774  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+0Ch] +
push edi  +
xor edi edi +
cmp eax edi +
jz loc_100B04C  +
push eax  +
call ds:DeleteDC  +
push esi  +
push offset fnEnum  +
push edi  +
push edi  +
mov [esi+0Ch] edi +
call ds:EnumDisplayMonitors  +
cmp [esi+0Ch] edi +
jnz loc_100B067  +
mov edi 80004005h +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
push 7F02h  +
xor edi edi +
push edi  +
mov esi ecx +
call ds:LoadCursorW  +
push eax  +
call ds:SetCursor  +
push 1  +
call ds:ShowCursor  +
mov ebx [ebp+arg_0] +
test ebx ebx +
jnz loc_100B0A9  +
mov edi 8000FFFFh +
jmp loc_100B0CD  +
cmp [esi+10h] edi +
jz loc_100B0BE  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+100h]  +
mov edi eax +
test edi edi +
jl loc_100B0CD  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+10Ch]  +
mov [esi+10h] ebx +
and [ebp+var_4] 0 +
test edi edi +
jl loc_100B270  +
lea eax [ebp+var_4] +
push eax  +
push ebx  +
call GetNumberOfPhysicalMonitorsFromHMONITOR  +
test eax eax +
jnz loc_100B0EC  +
mov edi 80040003h +
test edi edi +
jl loc_100B270  +
cmp [ebp+var_4] 1 +
jz loc_100B0FF  +
mov edi 80040002h +
test edi edi +
jl loc_100B270  +
mov ecx esi +
call sub_100B036  +
mov edi eax +
test edi edi +
jl loc_100B270  +
push 0Ch  +
push dword ptr [esi+0Ch]  +
call ds:GetDeviceCaps  +
cmp eax 18h +
jge loc_100B12D  +
mov edi 80040004h +
test edi edi +
jl loc_100B270  +
mov ecx esi +
call sub_1009CDA  +
mov edi eax +
test edi edi +
jl loc_100B270  +
lea eax [esi+14h] +
push eax  +
push 1  +
push ebx  +
call GetPhysicalMonitorsFromHMONITOR  +
test eax eax +
mov eax [esi] +
mov ecx esi +
jz loc_100B16B  +
mov byte ptr [esi+118h] 1 +
call dword ptr [eax+0DCh]  +
mov edi eax +
jmp loc_100B17F  +
and dword ptr [esi+120h] 0 +
and dword ptr [esi+124h] 0 +
call dword ptr [eax+108h]  +
test edi edi +
jl loc_100B270  +
mov ecx esi +
call sub_100A22D  +
mov edi eax +
test edi edi +
jl loc_100B270  +
lea ebx [esi+194h] +
cmp dword ptr [ebx] 0 +
jnz loc_100B1AB  +
push ebx  +
call DccwCreateDisplayProfileAssociationList  +
mov edi eax +
test edi edi +
jl loc_100B270  +
push dword ptr [esi+8]  +
push 0  +
push dword ptr [ebx]  +
call DccwGetDisplayProfileAssociationList  +
mov edi eax +
test edi edi +
jl loc_100B270  +
lea ebx [esi+198h] +
cmp dword ptr [ebx] 0 +
jnz loc_100B1DC  +
push ebx  +
call DccwCreateDisplayProfileAssociationList  +
mov edi eax +
test edi edi +
jl loc_100B270  +
push dword ptr [esi+8]  +
push 1  +
push dword ptr [ebx]  +
call DccwGetDisplayProfileAssociationList  +
mov edi eax +
test edi edi +
jl loc_100B270  +
mov ecx esi +
call sub_100A3B4  +
mov edi eax +
test edi edi +
jl loc_100B270  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+0E0h]  +
mov edi eax +
test edi edi +
jl loc_100B270  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+0E4h]  +
mov edi eax +
test edi edi +
jl loc_100B270  +
mov esi [esi+8] +
test esi esi +
jz loc_100B243  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100B22F  +
sub eax edx +
sar eax 1 +
lea eax [eax+eax+2] +
jmp loc_100B245  +
xor eax eax +
and [ebp+var_10] 0 +
and [ebp+var_8] 0 +
mov [ebp+var_C] eax +
lea eax [ebp+var_14] +
push eax  +
push 1  +
push offset dword_10015D0  +
push dword_101450C  +
mov [ebp+var_14] esi +
push dword_1014508  +
call ds:EventWrite  +
push 0  +
call ds:ShowCursor  +
push 7F00h  +
push 0  +
call ds:LoadCursorW  +
push eax  +
call ds:SetCursor  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push edi  +
mov edi [ebp+arg_0] +
xor ebx ebx +
test edi edi +
jz loc_100B2F6  +
mov eax edi +
push esi  +
lea esi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_100B2B0  +
sub eax esi +
sar eax 1 +
pop esi  +
jz loc_100B2F6  +
push edi  +
call sub_100A8A2  +
mov ebx eax +
test ebx ebx +
jl loc_100B2F6  +
push 1  +
push edi  +
push 0  +
call UninstallColorProfileW  +
test eax eax +
jnz loc_100B2F6  +
call ds:GetLastError  +
cmp eax 2 +
jz loc_100B2F6  +
test eax eax +
jle loc_100B2F4  +
and eax 0FFFFh +
or eax 80070000h +
mov ebx eax +
pop edi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_100B317  +
push eax  +
call sub_100AC3F  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push esi  +
push 0  +
mov esi ecx +
push eax  +
mov [esi+11Ch] eax +
call ds:MonitorFromWindow  +
test eax eax +
jz loc_100B346  +
push eax  +
mov ecx esi +
call sub_100B071  +
jmp loc_100B34B  +
mov eax 80004005h +
pop esi  +
pop ebp  +
retn 4  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
mov eax [esi+188h] +
mov ecx [esi+190h] +
push 0  +
push eax  +
push ecx  +
call ds:CopyFileW  +
mov ebx 0FFFFh +
mov edi 80070000h +
test eax eax +
jnz loc_100B3B0  +
call ds:GetLastError  +
test eax eax +
jle loc_100B3A5  +
and eax ebx +
or eax edi +
mov [ebp+var_4] eax +
test eax eax +
jl loc_100B4A3  +
mov eax [esi+178h] +
push eax  +
push eax  +
mov ecx esi +
call sub_100A774  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_100B4A3  +
push dword ptr [esi+180h]  +
mov ecx esi +
call sub_100A8A2  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_100B4A3  +
push dword ptr [esi+190h]  +
mov ecx esi +
call sub_100B29A  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_100B4A3  +
push 1  +
call WcsSetCalibrationManagementState  +
test eax eax +
jnz loc_100B416  +
call ds:GetLastError  +
test eax eax +
jle loc_100B413  +
and eax ebx +
or eax edi +
mov [ebp+var_4] eax +
xor eax eax +
cmp [ebp+var_4] eax +
jl loc_100B4A3  +
mov ecx [esi+8] +
mov [esi+19Ch] eax +
cmp ecx eax +
jz loc_100B445  +
mov eax ecx +
lea edi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_100B433  +
sub eax edi +
sar eax 1 +
lea eax [eax+eax+2] +
mov esi [esi+178h] +
and [ebp+var_20] 0 +
and [ebp+var_18] 0 +
mov [ebp+var_24] ecx +
mov [ebp+var_1C] eax +
test esi esi +
jz loc_100B476  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100B462  +
sub eax edx +
sar eax 1 +
lea eax [eax+eax+2] +
jmp loc_100B478  +
xor eax eax +
and [ebp+var_10] 0 +
and [ebp+var_8] 0 +
mov [ebp+var_C] eax +
lea eax [ebp+var_24] +
push eax  +
push 2  +
push offset dword_10015F0  +
push dword_101450C  +
mov [ebp+var_14] esi +
push dword_1014508  +
call ds:EventWrite  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
mov eax dword_1014484 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov esi hModule +
push edi  +
lea ecx [ebp+var_C] +
mov [ebp+var_34] eax +
call sub_1011ACB  +
push 1F7h  +
push esi  +
lea ecx [ebp+var_C] +
call sub_1011C2B  +
lea ecx [ebp+var_14] +
mov [ebp+var_20] eax +
call sub_1011ACB  +
xor edi edi +
cmp [ebp+var_20] edi +
jl loc_100B50A  +
push 1F9h  +
push esi  +
lea ecx [ebp+var_14] +
call sub_1011C2B  +
mov [ebp+var_20] eax +
lea ecx [ebp+var_1C] +
call sub_1011ACB  +
cmp [ebp+var_20] edi +
jl loc_100B528  +
push 1F5h  +
push esi  +
lea ecx [ebp+var_1C] +
call sub_1011C2B  +
mov [ebp+var_20] eax +
cmp [ebp+var_20] 0 +
mov esi ds:WideCharToMultiByte +
mov [ebp+cchMultiByte] edi +
mov ebx 80h +
mov edi 0FDE9h +
jl loc_100B56E  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push ebx  +
push edi  +
call esi  +
mov [ebp+cchMultiByte] eax +
test eax eax +
jnz loc_100B56E  +
call ds:GetLastError  +
test eax eax +
jle loc_100B56B  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_20] eax +
and [ebp+lpMultiByteStr] 0 +
cmp [ebp+var_20] 0 +
jl loc_100B5D1  +
push [ebp+cchMultiByte]  +
call ??_U@YAPAXI@Z  +
pop ecx  +
lea ecx [ebp+lpMultiByteStr] +
mov [ebp+var_28] eax +
call sub_100B303  +
mov eax [ebp+var_28] +
mov [ebp+lpMultiByteStr] eax +
test eax eax +
jnz loc_100B59D  +
mov [ebp+var_20] 8007000Eh +
cmp [ebp+var_20] 0 +
jl loc_100B5D1  +
push 0  +
push 0  +
push [ebp+cchMultiByte]  +
push [ebp+lpMultiByteStr]  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push ebx  +
push edi  +
call esi  +
test eax eax +
jnz loc_100B5D1  +
call ds:GetLastError  +
test eax eax +
jle loc_100B5CE  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_20] eax +
and [ebp+var_28] 0 +
cmp [ebp+var_20] 0 +
jl loc_100B70C  +
mov edi [ebp+cchMultiByte] +
mov eax edi +
and eax 3 +
jz loc_100B5EE  +
sub edi eax +
add edi 4 +
lea ecx [ebp+var_C] +
call sub_1011AEC  +
lea eax [eax+eax+2] +
lea ebx [eax+edi+56h] +
push ebx  +
mov [ebp+var_38] eax +
mov [ebp+var_30] ebx +
call ??_U@YAPAXI@Z  +
pop ecx  +
lea ecx [ebp+var_28] +
mov esi eax +
call sub_100B303  +
mov [ebp+var_28] esi +
test esi esi +
jnz loc_100B623  +
mov [ebp+var_20] 8007000Eh +
cmp [ebp+var_20] 0 +
jl loc_100B70C  +
push ebx  +
push 0  +
push esi  +
call memset  +
add esp 0Ch +
mov ebx 64657363h +
push ebx  +
call sub_10090DD  +
mov [esi] eax +
push edi  +
add esi 8 +
call sub_10090DD  +
push [ebp+cchMultiByte]  +
mov [esi] eax +
push [ebp+lpMultiByteStr]  +
add esi 4 +
push esi  +
call memcpy  +
add esp 0Ch +
lea eax [ebp+cchMultiByte] +
push eax  +
push [ebp+lpString]  +
add esi edi +
call sub_1009FEB  +
mov eax [ebp+cchMultiByte] +
push [ebp+var_38]  +
mov [esi] eax +
add esi 4 +
call sub_10090DD  +
lea ecx [ebp+var_C] +
mov [esi] eax +
xor edi edi +
call sub_1011AEC  +
test eax eax +
jbe loc_100B6AE  +
mov eax [ebp+var_8] +
mov ax [eax+edi*2] +
rol ax 8 +
mov [esi+edi*2+4] ax +
lea ecx [ebp+var_C] +
inc edi  +
call sub_1011AEC  +
cmp edi eax +
jb loc_100B691  +
mov esi [ebp+var_30] +
push esi  +
push ebx  +
push [ebp+var_34]  +
call SetColorProfileElementSize  +
test eax eax +
jnz loc_100B6D6  +
call ds:GetLastError  +
test eax eax +
jle loc_100B6D3  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_20] eax +
cmp [ebp+var_20] 0 +
jl loc_100B70C  +
push [ebp+var_28]  +
lea eax [ebp+var_30] +
push eax  +
push 0  +
push ebx  +
push [ebp+var_34]  +
mov [ebp+var_30] esi +
call SetColorProfileElement  +
test eax eax +
jnz loc_100B70C  +
call ds:GetLastError  +
test eax eax +
jle loc_100B709  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_20] eax +
lea ecx [ebp+var_28] +
call sub_100B303  +
lea ecx [ebp+lpMultiByteStr] +
call sub_100B303  +
lea ecx [ebp+var_1C] +
call sub_1011C1D  +
lea ecx [ebp+var_14] +
call sub_1011C1D  +
lea ecx [ebp+var_C] +
call sub_1011C1D  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_20] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10113D3  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
mov eax dword_1014484 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_24] 0 +
push ebx  +
push esi  +
mov [ebp+var_18] ecx +
push edi  +
lea ecx [ebp+var_C] +
call sub_1011ACB  +
mov ecx [ebp+var_18] +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_24] +
push eax  +
call sub_100A988  +
and [ebp+var_14] 0 +
mov esi eax +
mov ebx 0FFFFh +
mov edi 80070000h +
test esi esi +
jl loc_100B7F8  +
push 0  +
push [ebp+var_24]  +
call WcsCreateIccProfile  +
mov [ebp+var_14] eax +
test eax eax +
jnz loc_100B7B6  +
call ds:GetLastError  +
test eax eax +
jle loc_100B7B4  +
and eax ebx +
or eax edi +
mov esi eax +
test esi esi +
jl loc_100B7F8  +
push [ebp+var_14]  +
call sub_100B4B0  +
mov esi eax +
test esi esi +
jl loc_100B7F8  +
lea eax [ebp+nNumberOfBytesToWrite] +
push eax  +
push 0  +
push [ebp+var_14]  +
call GetColorProfileFromHandle  +
test eax eax +
jnz loc_100B7F8  +
call ds:GetLastError  +
cmp eax 7Ah +
jz loc_100B7F8  +
test eax eax +
jnz loc_100B7F0  +
mov esi 80004005h +
jmp loc_100B7F8  +
jle loc_100B7F6  +
and eax ebx +
or eax edi +
mov esi eax +
and [ebp+lpBuffer] 0 +
test esi esi +
jl loc_100B923  +
push [ebp+nNumberOfBytesToWrite]  +
call ??_U@YAPAXI@Z  +
pop ecx  +
lea ecx [ebp+lpBuffer] +
mov [ebp+hObject] eax +
call sub_100B303  +
mov eax [ebp+hObject] +
mov [ebp+lpBuffer] eax +
test eax eax +
jnz loc_100B827  +
mov esi 8007000Eh +
test esi esi +
jl loc_100B923  +
lea ecx [ebp+nNumberOfBytesToWrite] +
push ecx  +
push eax  +
push [ebp+var_14]  +
call GetColorProfileFromHandle  +
test eax eax +
jnz loc_100B850  +
call ds:GetLastError  +
test eax eax +
jle loc_100B84E  +
and eax ebx +
or eax edi +
mov esi eax +
test esi esi +
jl loc_100B923  +
mov eax [ebp+var_18] +
mov eax [eax+190h] +
push 0  +
push 80h  +
push 2  +
push 0  +
push 1  +
push 40000000h  +
push eax  +
call ds:CreateFileW  +
mov [ebp+hObject] eax +
cmp eax 0FFFFFFFFh +
jnz loc_100B892  +
call ds:GetLastError  +
test eax eax +
jle loc_100B890  +
and eax ebx +
or eax edi +
mov esi eax +
test esi esi +
jl loc_100B914  +
push 0  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push [ebp+nNumberOfBytesToWrite]  +
push [ebp+lpBuffer]  +
push [ebp+hObject]  +
call ds:WriteFile  +
test eax eax +
jz loc_100B8BE  +
mov eax [ebp+NumberOfBytesWritten] +
cmp eax [ebp+nNumberOfBytesToWrite] +
jz loc_100B8CE  +
mov esi 80004005h +
jmp loc_100B8CE  +
call ds:GetLastError  +
test eax eax +
jle loc_100B8CC  +
and eax ebx +
or eax edi +
mov esi eax +
test esi esi +
jl loc_100B914  +
push [ebp+hObject]  +
call ds:CloseHandle  +
mov eax [ebp+var_18] +
push dword ptr [eax+180h]  +
or [ebp+hObject] 0FFFFFFFFh +
push 0  +
call InstallColorProfileW  +
test eax eax +
jnz loc_100B903  +
call ds:GetLastError  +
test eax eax +
jle loc_100B901  +
and eax ebx +
or eax edi +
mov esi eax +
test esi esi +
jl loc_100B923  +
mov ecx [ebp+var_18] +
mov eax [ecx] +
call dword ptr [eax+0F0h]  +
mov esi eax +
cmp [ebp+hObject] 0FFFFFFFFh +
jz loc_100B923  +
push [ebp+hObject]  +
call ds:CloseHandle  +
cmp [ebp+var_24] 0 +
jz loc_100B931  +
push [ebp+var_24]  +
call CloseColorProfile  +
cmp [ebp+var_14] 0 +
jz loc_100B93F  +
push [ebp+var_14]  +
call CloseColorProfile  +
lea ecx [ebp+lpBuffer] +
call sub_100B303  +
lea ecx [ebp+var_C] +
call sub_1011C1D  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10113D3  +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+64h] +
push dword ptr [esi+58h]  +
mov eax [ecx] +
call dword ptr [eax]  +
mov ecx [esi+64h] +
push dword ptr [esi+58h]  +
mov [esi+68h] eax +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
mov eax [esi] +
mov ecx esi +
pop esi  +
jmp dword ptr [eax+10h]  +
***
jmp dword ptr [eax+14h]  +
***
jmp dword ptr [eax+18h]  +
***
retn   +
***
jmp dword ptr [eax+1Ch]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+20h]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+64h] +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+8]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0  +
push [ebp+arg_0]  +
mov esi ecx +
call ds:SetTextColor  +
push 0AAAAAAh  +
push [ebp+arg_0]  +
call ds:SetBkColor  +
mov eax [esi+74h] +
pop esi  +
pop ebp  +
retn 8  +
***
mov ecx [ecx+64h] +
mov eax [ecx] +
call dword ptr [eax+10h]  +
xor eax eax +
inc eax  +
retn   +
***
inc eax  +
retn   +
***
pop eax  +
retn 4  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
inc dword ptr [eax+80h]  +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ecx]  +
call ds:GetParent  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
mov eax ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push 0  +
push 470h  +
push dword ptr [ecx]  +
call ds:PostMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
lea eax [ebp+var_4] +
push eax  +
call sub_100BA4E  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
lea eax [ebp+lParam] +
push eax  +
call sub_100BA8B  +
mov ecx eax +
call sub_100BA6B  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push 0  +
push 489h  +
push dword ptr [ecx]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
lea eax [ebp+lParam] +
push eax  +
call sub_100BA8B  +
mov ecx eax +
call sub_100BACB  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
call dword ptr [eax+24h]  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jz loc_100BB3F  +
test edi edi +
jnz loc_100BB28  +
mov eax [esi+68h] +
inc eax  +
jmp loc_100BB30  +
mov ecx [esi+64h] +
mov eax [ecx] +
push edi  +
call dword ptr [eax]  +
mov ecx [esi+64h] +
mov edx [ecx] +
push eax  +
call dword ptr [edx+4]  +
mov ecx [esi+58h] +
mov [eax+78h] ecx +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0FFFFFFF0h  +
push [ebp+hWnd]  +
mov esi ecx +
call ds:GetWindowLongW  +
and eax 1Fh +
cmp al 0Eh +
jz loc_100BB81  +
push 0  +
push [ebp+arg_0]  +
call ds:SetTextColor  +
push 0AAAAAAh  +
push [ebp+arg_0]  +
call ds:SetBkColor  +
mov eax [esi+74h] +
jmp loc_100BB83  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
lea esi [ecx+4] +
push 3  +
mov ecx esi +
call sub_100BAAA  +
push offset dword_1001B28  +
mov ecx esi +
call sub_100BAEB  +
xor eax eax +
inc eax  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
mov esi ecx +
jnz loc_100BBC6  +
mov eax [esi+68h] +
inc eax  +
jmp loc_100BBD0  +
mov ecx [esi+64h] +
push [ebp+arg_0]  +
mov eax [ecx] +
call dword ptr [eax]  +
mov ecx [esi+64h] +
mov edx [ecx] +
push eax  +
call dword ptr [edx+4]  +
mov ecx [esi+58h] +
mov [eax+78h] ecx +
mov ecx [esi+64h] +
mov eax [ecx] +
pop esi  +
pop ebp  +
jmp dword ptr [eax+8]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
lea eax [ebp+Points] +
push eax  +
push [ebp+hWnd]  +
call ds:GetWindowRect  +
test eax eax +
jnz loc_100BC15  +
mov eax [ebp+arg_4] +
and dword ptr [eax+84h] 0 +
xor eax eax +
jmp locret_100BC55  +
push esi  +
mov esi [ebp+arg_4] +
push 2  +
lea eax [ebp+Points] +
push eax  +
push dword ptr [esi+4]  +
push 0  +
call ds:MapWindowPoints  +
test eax eax +
jnz loc_100BC36  +
and [esi+84h] eax +
jmp loc_100BC54  +
mov ecx [esi+7Ch] +
lea eax [esi+84h] +
push edi  +
mov edi [eax] +
shl edi 4 +
add edi ecx +
lea esi [ebp+Points] +
movs   +
movs   +
movs   +
movs   +
inc dword ptr [eax]  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
mov eax [esi+84h] +
mov ecx [esi+9Ch] +
mov edx [esi+0A0h] +
push edi  +
mov edi [esi+7Ch] +
shl eax 4 +
add eax edi +
add [eax] ecx +
add [eax+8] ecx +
mov edi [eax] +
add [eax+4] edx +
mov ecx [eax+8] +
mov ebx [eax+4] +
add [eax+0Ch] edx +
mov eax [eax+0Ch] +
push 1  +
sub eax ebx +
push eax  +
sub ecx edi +
push ecx  +
push ebx  +
push edi  +
push [ebp+hWnd]  +
call ds:MoveWindow  +
inc dword ptr [esi+84h]  +
pop edi  +
xor eax eax +
pop esi  +
inc eax  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100B303  +
mov eax [ebp+arg_0] +
mov [esi] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+74h] +
mov dword ptr [esi] offset off_1003D88 +
test eax eax +
jz loc_100BCF6  +
push eax  +
call ds:DeleteObject  +
lea ecx [esi+7Ch] +
call sub_100B303  +
lea ecx [esi+6Ch] +
call sub_1011C1D  +
mov esi [esi+14h] +
test esi esi +
jz loc_100BD13  +
push esi  +
call sub_1010F2B  +
pop esi  +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
mov eax [esi+4] +
push 0FFFFFFECh  +
push eax  +
call ds:GetWindowLongW  +
shr eax 16h +
and al 1 +
mov [esi+0A4h] al +
mov eax offset aTrue +
jnz loc_100BD44  +
mov eax offset aFalse +
push eax  +
push dword ptr [esi+58h]  +
push offset aIddDM_bisrtlS  +
call nullsub_1  +
mov ebx ds:EnumChildWindows +
add esp 0Ch +
push esi  +
push offset EnumFunc  +
push dword ptr [esi+4]  +
lea edi [esi+80h] +
and dword ptr [edi] 0 +
call ebx  +
mov eax [edi] +
xor ecx ecx +
push 10h  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??_U@YAPAXI@Z  +
pop ecx  +
lea edi [esi+7Ch] +
push eax  +
mov ecx edi +
call sub_100BCC1  +
cmp dword ptr [edi] 0 +
jnz loc_100BD9B  +
or eax 0FFFFFFFFh +
jmp loc_100BDB7  +
push esi  +
push offset sub_100BBEE  +
push dword ptr [esi+4]  +
lea edi [esi+84h] +
and dword ptr [edi] 0 +
call ebx  +
xor eax eax +
cmp [edi] eax +
setnz al  +
dec eax  +
pop edi  +
pop esi  +
pop ebx  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
mov esi ecx +
cmp byte ptr [esi+98h] 0 +
jz loc_100BDEE  +
lea eax [esi+88h] +
push eax  +
push dword ptr [esi+4]  +
call ds:MapDialogRect  +
test eax eax +
jz loc_100BE9B  +
lea eax [ebp+Rect] +
push eax  +
push dword ptr [esi+4]  +
mov byte ptr [esi+98h] 0 +
call ds:GetWindowRect  +
test eax eax +
jz loc_100BE9B  +
mov eax [ebp+Rect.bottom] +
cmp eax [ebp+Rect.top] +
jle loc_100BE9B  +
mov ecx [ebp+Rect.right] +
cmp ecx [ebp+Rect.left] +
jle loc_100BE9B  +
mov eax [esi+90h] +
push edi  +
lea edi [esi+88h] +
sub eax [edi] +
and dword ptr [esi+84h] 0 +
cdq   +
sub eax edx +
sar eax 1 +
mov [ebp+var_4] eax +
mov eax ecx +
sub eax [ebp+Rect.left] +
mov ecx [ebp+var_4] +
cdq   +
sub eax edx +
sar eax 1 +
sub eax ecx +
mov [esi+9Ch] eax +
mov eax [esi+94h] +
sub eax [esi+8Ch] +
push esi  +
cdq   +
sub eax edx +
mov ecx eax +
mov eax [ebp+Rect.bottom] +
sub eax [ebp+Rect.top] +
sar ecx 1 +
cdq   +
sub eax edx +
sar eax 1 +
push offset sub_100BC5E  +
push dword ptr [esi+4]  +
sub eax ecx +
mov [esi+0A0h] eax +
call ds:EnumChildWindows  +
push 1  +
push 0  +
push dword ptr [esi+4]  +
call ds:InvalidateRect  +
lea esi [ebp+Rect] +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+0Ch] +
xor eax eax +
sub ecx eax +
jz loc_100BED1  +
dec ecx  +
jz loc_100BED1  +
dec ecx  +
jnz loc_100BED1  +
mov eax [ebp+10h] +
mov eax [eax+1Ch] +
push eax  +
add eax 8 +
push eax  +
push offset unk_10145BC  +
call sub_10060C7  +
xor eax eax +
inc eax  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push offset unk_10145BC  +
call sub_1007EC9  +
mov esi eax +
test esi esi +
jz loc_100BF25  +
mov eax [esi] +
push ebx  +
mov ebx [ebp+8] +
push edi  +
mov ecx esi +
mov [esi+4] ebx +
call dword ptr [eax+8]  +
push esi  +
lea edi [esi+14h] +
push eax  +
mov ecx edi +
call sub_1007A07  +
mov edi [edi] +
push edi  +
push 4  +
push ebx  +
call ds:SetWindowLongW  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push ebx  +
call edi  +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
xor ebx ebx +
push 38h  +
mov [esi+4] ebx +
mov [esi+14h] ebx +
lea edi [esi+20h] +
push ebx  +
push edi  +
mov [esi+18h] ebx +
mov [esi+1Ch] ebx +
call memset  +
mov dword ptr [edi] 38h +
mov dword ptr [esi+24h] 80h +
mov eax hModule +
mov [esi+28h] eax +
movzx eax word ptr [esi+58h] +
mov [esi+2Ch] eax +
mov eax [ebp+arg_0] +
add esp 0Ch +
mov dword ptr [esi+38h] offset loc_100BEDA +
mov dword ptr [esi+40h] offset loc_100BEA5 +
mov [esi+3Ch] esi +
cmp eax ebx +
jz loc_100BF94  +
mov [esi+34h] eax +
mov dword ptr [esi+24h] 88h +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100BF2F  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
mov [esi+58h] eax +
push ecx  +
mov eax esp +
xor ebx ebx +
mov [eax] ebx +
call sub_100BFA2  +
mov eax [ebp+arg_C] +
mov [esi+60h] eax +
mov eax [ebp+arg_8] +
lea edi [esi+6Ch] +
mov ecx edi +
mov dword ptr [esi] offset off_1003D88 +
mov [esi+64h] eax +
call sub_1011ACB  +
or dword ptr [esi+78h] 0FFFFFFFFh +
push [ebp+uID]  +
mov [esi+7Ch] ebx +
mov [esi+80h] ebx +
mov [esi+84h] ebx +
mov byte ptr [esi+98h] 1 +
mov [esi+0A4h] bl +
push hModule  +
mov ecx edi +
call sub_1011C2B  +
test eax eax +
jl loc_100C037  +
mov eax [esi+70h] +
or dword ptr [esi+24h] 1000h +
mov [esi+48h] eax +
push 0AAAAAAh  +
call ds:CreateSolidBrush  +
mov [esi+74h] eax +
pop edi  +
mov [esi+88h] ebx +
mov [esi+8Ch] ebx +
mov dword ptr [esi+90h] 14Ah +
mov dword ptr [esi+94h] 91h +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 80040001h +
jz loc_100C0C4  +
cmp eax 80040002h +
jz loc_100C0BD  +
cmp eax 80040003h +
jz loc_100C0B6  +
cmp eax 80040004h +
jz loc_100C0AF  +
xor ecx ecx +
cmp eax 80040005h +
setz cl  +
dec ecx  +
and ecx 0FFFFFFA2h +
add ecx 190h +
mov eax ecx +
jmp loc_100C0C9  +
mov eax 139h +
jmp loc_100C0C9  +
mov eax 138h +
jmp loc_100C0C9  +
mov eax 12Eh +
jmp loc_100C0C9  +
mov eax 12Dh +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_8]  +
mov esi ecx +
push [ebp+arg_4]  +
push 0CDh  +
push [ebp+arg_0]  +
call sub_100BFBE  +
mov dword ptr [esi] offset off_1003F54 +
mov dword ptr [esi+0A8h] 1 +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+4] +
push 5  +
mov ecx edi +
mov [ebp+var_4] 1 +
call sub_100BAAA  +
lea eax [esi+0A8h] +
xor ebx ebx +
cmp [eax] ebx +
jz loc_100C151  +
push 95h  +
push dword ptr [edi]  +
mov [eax] ebx +
call ds:GetDlgItem  +
push ebx  +
push 1  +
push 0F1h  +
push eax  +
call ds:SendMessageW  +
mov ecx [esi+60h] +
mov eax [ecx] +
call dword ptr [eax+0F4h]  +
cmp eax ebx +
jl loc_100C16F  +
mov ecx [esi+60h] +
mov eax [ecx] +
call dword ptr [eax+0F8h]  +
cmp eax ebx +
jge loc_100C17E  +
push eax  +
push 133h  +
push ebx  +
call sub_100FF4F  +
mov [ebp+var_4] ebx +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
xor ecx ecx +
xor eax eax +
push edi  +
cmp esi ecx +
jz loc_100C1A6  +
cmp esi 7FFFFFFFh +
jbe loc_100C1AB  +
mov eax 80070057h +
cmp eax ecx +
mov edi [ebp+arg_0] +
jl loc_100C1D7  +
xor ebx ebx +
mov edx esi +
mov eax edi +
cmp esi ecx +
jz loc_100C1CA  +
cmp [eax] cx +
jz loc_100C1C6  +
inc eax  +
inc eax  +
dec edx  +
jnz loc_100C1BC  +
cmp edx ecx +
jnz loc_100C1D1  +
mov ebx 80070057h +
jmp loc_100C1D5  +
mov ecx esi +
sub ecx edx +
mov eax ebx +
test eax eax +
jl loc_100C221  +
mov edx esi +
sub edx ecx +
push 0  +
lea eax [edi+ecx*2] +
pop ebx  +
jz loc_100C213  +
mov edi edx +
sub edi esi +
mov esi [ebp+arg_8] +
lea edi [edi+ecx+7FFFFFFFh] +
sub esi eax +
test edi edi +
jz loc_100C20F  +
movzx ecx word ptr [esi+eax] +
test cx cx +
jz loc_100C20F  +
mov [eax] cx +
inc eax  +
inc eax  +
dec edx  +
dec edi  +
test edx edx +
jnz loc_100C1F7  +
test edx edx +
jnz loc_100C21A  +
dec eax  +
dec eax  +
mov ebx 8007007Ah +
xor ecx ecx +
mov [eax] cx +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_1014484 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi ecx +
mov ecx [esi+60h] +
mov eax [ecx] +
push edi  +
call dword ptr [eax+0FCh]  +
mov edi eax +
xor ebx ebx +
cmp edi ebx +
jge loc_100C26B  +
push edi  +
push 133h  +
push ebx  +
call sub_100FF4F  +
jmp loc_100C2F8  +
push 95h  +
push dword ptr [esi+4]  +
call ds:GetDlgItem  +
push ebx  +
push ebx  +
push 0F0h  +
push eax  +
call ds:SendMessageW  +
cmp eax 1 +
jnz loc_100C2F8  +
mov esi 104h +
push esi  +
lea eax [ebp+File] +
push eax  +
call ds:GetSystemDirectoryW  +
cmp eax ebx +
jz loc_100C2A7  +
cmp eax esi +
jbe loc_100C2AC  +
mov edi 80004005h +
cmp edi ebx +
jl loc_100C2F8  +
push offset asc_1003E20  +
push esi  +
lea eax [ebp+File] +
push eax  +
call sub_100C18B  +
mov edi eax +
cmp edi ebx +
jl loc_100C2F8  +
push off_1014004  +
lea eax [ebp+File] +
push esi  +
push eax  +
call sub_100C18B  +
mov edi eax +
cmp edi ebx +
jl loc_100C2F8  +
push 1  +
push ebx  +
push ebx  +
lea eax [ebp+File] +
push eax  +
push offset Operation  +
push ebx  +
call ds:ShellExecuteW  +
mov ecx [ebp+var_4] +
xor eax eax +
cmp edi ebx +
pop edi  +
setnl al  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10113D3  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
push 228h  +
push 22Bh  +
push 6Eh  +
push 0A0h  +
call sub_100D253  +
mov dword ptr [esi] offset off_1003E28 +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov ecx [ecx+60h] +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
movzx eax al +
neg eax  +
sbb eax eax +
and eax 19h +
add eax 6Eh +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
push offset aGammaD  +
call nullsub_1  +
pop ecx  +
pop ecx  +
mov ecx [esi+60h] +
mov eax [ecx] +
pop esi  +
pop ebp  +
jmp dword ptr [eax+64h]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+60h] +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+58h]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+60h] +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+70h]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 48h +
cmp [ebp+arg_4] 0 +
push esi  +
mov esi ecx +
jz loc_100C541  +
cmp [ebp+arg_8] 0 +
jz loc_100C541  +
push edi  +
mov edi ds:GetWindowRect +
lea eax [ebp+Rect] +
push eax  +
push dword ptr [esi+4]  +
call edi  +
test eax eax +
jz loc_100C540  +
lea eax [ebp+var_48] +
push eax  +
push dword ptr [esi+0C8h]  +
call edi  +
test eax eax +
jz loc_100C540  +
lea eax [ebp+var_38] +
push eax  +
push dword ptr [esi+0E8h]  +
call edi  +
test eax eax +
jz loc_100C540  +
mov eax [ebp+Rect.right] +
sub eax [ebp+Rect.left] +
mov edi [ebp+Rect.bottom] +
sub edi [ebp+Rect.top] +
inc eax  +
push ebx  +
mov ebx [esi+0B8h] +
mov [ebp+var_18] eax +
sub eax ebx +
cdq   +
sub eax edx +
mov edx [esi+0BCh] +
mov ecx eax +
inc edi  +
push 1  +
push dword ptr [esi+0BCh]  +
mov eax edi +
sub eax edx +
cdq   +
push ebx  +
mov ebx ds:MoveWindow +
sub eax edx +
sar eax 1 +
sar ecx 1 +
push eax  +
push ecx  +
push dword ptr [esi+0A8h]  +
mov [ebp+var_10] ecx +
mov [ebp+Y] eax +
call ebx  +
mov eax [ebp+var_2C] +
sub eax [ebp+var_34] +
mov [ebp+var_C] eax +
fild  [ebp+var_C] +
fmul  ds:dbl_1003E88 +
call _ftol2_sse  +
mov ecx [esi+0BCh] +
sub ecx eax +
mov eax [ebp+var_10] +
mov [ebp+nHeight] ecx +
push 3  +
cdq   +
pop ecx  +
idiv  ecx +
mov ecx [esi+0D0h] +
mov [ebp+nWidth] ecx +
cmp ecx eax +
jle loc_100C49B  +
mov [ebp+nWidth] eax +
mov eax [ebp+var_10] +
sub eax [ebp+nWidth] +
push 1  +
push [ebp+nHeight]  +
cdq   +
push [ebp+nWidth]  +
sub eax edx +
push [ebp+Y]  +
sar eax 1 +
push eax  +
push dword ptr [esi+0C8h]  +
mov [ebp+var_10] eax +
call ebx  +
mov eax [ebp+var_10] +
push 1  +
push [ebp+nHeight]  +
add eax 0FFFFFFF0h +
push 10h  +
push [ebp+Y]  +
mov [ebp+var_10] eax +
push eax  +
push dword ptr [esi+0CCh]  +
call ebx  +
mov ecx [ebp+var_30] +
sub ecx [ebp+var_38] +
mov eax [ebp+nWidth] +
sub eax ecx +
add eax 10h +
cdq   +
sub eax edx +
sar eax 1 +
add eax [ebp+var_10] +
jns loc_100C4F3  +
xor eax eax +
push 1  +
push [ebp+var_C]  +
push ecx  +
mov ecx [esi+0BCh] +
sub ecx [ebp+var_C] +
add ecx [ebp+Y] +
push ecx  +
push eax  +
push dword ptr [esi+0E8h]  +
call ebx  +
mov eax [esi+0BCh] +
add eax [ebp+Y] +
push 1  +
add eax edi +
cdq   +
sub eax edx +
sar eax 1 +
sub edi eax +
push edi  +
push [ebp+var_18]  +
push eax  +
push 0  +
push dword ptr [esi+0ACh]  +
call ebx  +
push 1  +
push 0  +
push dword ptr [esi+4]  +
call ds:InvalidateRect  +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+60h] +
mov eax [ecx] +
push edi  +
call dword ptr [eax+54h]  +
push ecx  +
fstp  [esp+8+var_8] +
call sub_100FC8C  +
mov edi eax +
mov eax [esi] +
push edi  +
mov ecx esi +
call dword ptr [eax+38h]  +
push edi  +
mov ecx esi +
call sub_100D469  +
pop edi  +
pop esi  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 674h +
mov eax dword_1014484 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi ecx +
mov ecx [esi+60h] +
mov eax [ecx] +
call dword ptr [eax+10h]  +
test al al +
jz loc_100C5AE  +
mov ecx esi +
call sub_100D503  +
jmp loc_100C71A  +
lea ecx [ebp+var_C] +
call sub_1011ACB  +
push dword ptr [esi+0C4h]  +
lea ecx [ebp+var_C] +
push hModule  +
call sub_1011C2B  +
test eax eax +
jl loc_100C712  +
push ebx  +
mov ecx 600h +
lea eax [ebp+var_60C] +
xor ebx ebx +
mov [eax] bl +
inc eax  +
dec ecx  +
jnz loc_100C5E0  +
mov ecx [esi+60h] +
mov eax [ecx] +
lea edx [ebp+var_60C] +
push edx  +
call dword ptr [eax+60h]  +
test eax eax +
jl loc_100C711  +
mov eax [esi] +
lea ecx [ebp+var_614] +
push ecx  +
mov ecx esi +
call dword ptr [eax+3Ch]  +
mov ecx [ebp+var_8] +
cmp ecx ebx +
jz loc_100C62D  +
mov eax ecx +
push edi  +
lea edi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx bx +
jnz loc_100C618  +
sub eax edi +
sar eax 1 +
lea eax [eax+eax+2] +
pop edi  +
jmp loc_100C62F  +
xor eax eax +
mov [ebp+var_66C] eax +
mov eax [esi+0DCh] +
mov [ebp+var_610] eax +
push 4  +
lea eax [ebp+var_610] +
mov [ebp+var_664] eax +
pop eax  +
mov [ebp+var_65C] eax +
mov [ebp+var_64C] eax +
lea eax [ebp+var_60C] +
mov [ebp+var_644] eax +
mov eax 200h +
mov [ebp+var_63C] eax +
mov [ebp+var_62C] eax +
mov [ebp+var_61C] eax +
lea eax [ebp+var_674] +
push eax  +
mov [ebp+var_674] ecx +
push 6  +
lea ecx [ebp+var_614] +
push offset dword_1001620  +
push dword_101450C  +
mov [ebp+var_654] ecx +
push dword_1014508  +
lea ecx [ebp+var_40C] +
mov [ebp+var_634] ecx +
lea ecx [ebp+var_20C] +
mov [ebp+var_670] ebx +
mov [ebp+var_668] ebx +
mov [ebp+var_660] ebx +
mov [ebp+var_658] ebx +
mov [ebp+var_650] ebx +
mov [ebp+var_648] ebx +
mov [ebp+var_640] ebx +
mov [ebp+var_638] ebx +
mov [ebp+var_630] ebx +
mov [ebp+var_628] ebx +
mov [ebp+var_624] ecx +
mov [ebp+var_620] ebx +
mov [ebp+var_618] ebx +
call ds:EventWrite  +
pop ebx  +
lea ecx [ebp+var_C] +
call sub_1011C1D  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_10113D3  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
call sub_100D674  +
mov edi eax +
test edi edi +
jnz loc_100C77C  +
push 8Dh  +
push dword ptr [esi+4]  +
call ds:GetDlgItem  +
mov [esi+0E8h] eax +
test eax eax +
jnz loc_100C763  +
or edi 0FFFFFFFFh +
jmp loc_100C77C  +
push dword ptr [esi+0B0h]  +
push 0  +
push 172h  +
push dword ptr [esi+0A8h]  +
call ds:SendMessageW  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_14] 0 +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
jnz loc_100C87C  +
mov eax [ebp+arg_4] +
mov ebx [ebp+arg_10] +
xor edi edi +
inc edi  +
cmp eax 110h +
jnz loc_100C7CE  +
push [ebp+hWnd]  +
mov [esi+5Ch] edi +
push [ebp+Y]  +
call sub_100D674  +
mov [ebx] eax +
cmp dword ptr [esi+5Ch] 0 +
jz loc_100C85D  +
mov eax edi +
jmp loc_100C87E  +
cmp eax 115h +
jnz loc_100C7F2  +
mov eax [ebp+Y] +
push [ebp+hWnd]  +
shr eax 10h +
cwde   +
push eax  +
movzx eax word ptr [ebp+Y] +
push eax  +
mov [esi+5Ch] edi +
call sub_100D6F4  +
and dword ptr [ebx] 0 +
jmp loc_100C7BD  +
cmp eax 113h +
jnz loc_100C806  +
push [ebp+Y]  +
mov [esi+5Ch] edi +
call sub_100D806  +
jmp loc_100C7ED  +
cmp eax 5 +
jnz loc_100C829  +
mov ecx [ebp+hWnd] +
movsx eax word ptr [ebp+hWnd] +
shr ecx 10h +
movsx ecx cx +
push ecx  +
push eax  +
push [ebp+Y]  +
mov ecx esi +
mov [esi+5Ch] edi +
call sub_100D30E  +
jmp loc_100C7ED  +
cmp eax 2Bh +
jnz loc_100C843  +
push [ebp+hWnd]  +
mov [esi+5Ch] edi +
push [ebp+Y]  +
call sub_100D982  +
mov [ebx] edi +
jmp loc_100C7BD  +
cmp eax 138h +
jnz loc_100C860  +
push [ebp+hWnd]  +
mov [esi+5Ch] edi +
push [ebp+Y]  +
call sub_100D400  +
jmp loc_100C7BB  +
mov eax [ebp+arg_4] +
push 0  +
push ebx  +
push [ebp+hWnd]  +
mov ecx esi +
push [ebp+Y]  +
push eax  +
push [ebp+arg_0]  +
call sub_1008EC2  +
test eax eax +
jnz loc_100C7C7  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+1Ch] 0 +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
jnz loc_100C93D  +
mov edi [ebp+18h] +
xor ebx ebx +
inc ebx  +
cmp dword ptr [ebp+0Ch] 110h +
jnz loc_100C8C7  +
push dword ptr [ebp+14h]  +
mov [esi+5Ch] ebx +
push dword ptr [ebp+10h]  +
call sub_100C72C  +
mov [edi] eax +
cmp dword ptr [esi+5Ch] 0 +
jz loc_100C923  +
mov eax ebx +
jmp loc_100C93F  +
cmp dword ptr [ebp+0Ch] 5 +
jnz loc_100C8EE  +
mov ecx [ebp+14h] +
movsx eax word ptr [ebp+14h] +
shr ecx 10h +
movsx ecx cx +
push ecx  +
push eax  +
push dword ptr [ebp+10h]  +
mov ecx esi +
mov [esi+5Ch] ebx +
call sub_100C3B2  +
and dword ptr [edi] 0 +
jmp loc_100C8BD  +
***
cmp dword ptr [ebp+0Ch] 111h +
jnz loc_100C923  +
mov eax [ebp+10h] +
shr eax 10h +
xor ecx ecx +
cmp cx ax +
jnz loc_100C923  +
mov eax 8Dh +
mov ecx eax +
cmp cx [ebp+10h] +
jnz loc_100C923  +
push dword ptr [ebp+14h]  +
mov ecx esi +
push eax  +
push 0  +
mov [esi+5Ch] ebx +
call sub_100C54B  +
jmp loc_100C8E9  +
***
push 0  +
push edi  +
push dword ptr [ebp+14h]  +
mov ecx esi +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_100C789  +
test eax eax +
jnz loc_100C8C3  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
push 226h  +
push 221h  +
push 21Ch  +
push 64h  +
push 5Fh  +
push 5Ah  +
push 55h  +
push 9Bh  +
call sub_100CC13  +
mov dword ptr [esi] offset off_1003E90 +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+1Ch] 0 +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
jnz loc_100CA0E  +
mov edi [ebp+18h] +
xor ebx ebx +
inc ebx  +
cmp dword ptr [ebp+0Ch] 110h +
jnz loc_100C9CD  +
push dword ptr [ebp+14h]  +
mov [esi+5Ch] ebx +
push dword ptr [ebp+10h]  +
call sub_100CCB9  +
mov [edi] eax +
cmp dword ptr [esi+5Ch] 0 +
jz loc_100C9F4  +
mov eax ebx +
jmp loc_100CA10  +
cmp dword ptr [ebp+0Ch] 5 +
jnz loc_100C9F4  +
mov ecx [ebp+14h] +
movsx eax word ptr [ebp+14h] +
shr ecx 10h +
movsx ecx cx +
push ecx  +
push eax  +
push dword ptr [ebp+10h]  +
mov ecx esi +
mov [esi+5Ch] ebx +
call sub_100CD71  +
and dword ptr [edi] 0 +
jmp loc_100C9C3  +
***
push 0  +
push edi  +
push dword ptr [ebp+14h]  +
mov ecx esi +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1008E91  +
test eax eax +
jnz loc_100C9C9  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_C]  +
mov esi ecx +
push [ebp+arg_8]  +
push [ebp+uID]  +
push [ebp+arg_0]  +
call sub_100BFBE  +
mov dword ptr [esi] offset off_1003EC0 +
mov eax esi +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebx  +
push esi  +
mov ebx ecx +
push edi  +
mov edi ds:DeleteObject +
mov dword ptr [ebx] offset off_1003EC0 +
xor esi esi +
mov eax dword_1014010[esi] +
test eax eax +
jz loc_100CA69  +
push eax  +
call edi  +
mov eax dword_1014014[esi] +
test eax eax +
jz loc_100CA76  +
push eax  +
call edi  +
add esi 14h +
cmp esi 0A0h +
jb loc_100CA5C  +
pop edi  +
pop esi  +
mov ecx ebx +
pop ebx  +
jmp sub_100BCDD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_4]  +
mov [ebp+var_4] ecx +
push [ebp+arg_0]  +
call sub_100BD1A  +
mov [ebp+arg_4] eax +
test eax eax +
jnz loc_100CB23  +
push esi  +
push ebx  +
xor esi esi +
push edi  +
cmp [ebp+arg_4] 0 +
jnz loc_100CB20  +
push dword_1014008[esi]  +
mov ecx [ebp+var_4] +
lea eax [ebp+arg_0] +
push eax  +
add ecx 4 +
call sub_1008A72  +
mov ebx [eax] +
test ebx ebx +
jz loc_100CB11  +
push 0  +
push 0  +
lea edi dword_1014010[esi] +
push edi  +
push dword_101400C[esi]  +
call sub_10105B1  +
test eax eax +
jl loc_100CB11  +
cmp dword_1014018[esi] 0 +
jz loc_100CB05  +
lea eax dword_1014014[esi] +
push eax  +
push ebx  +
push dword ptr [edi]  +
call sub_1010177  +
jmp loc_100CB0D  +
push ebx  +
push dword ptr [edi]  +
call sub_100FCE4  +
test eax eax +
jge loc_100CB15  +
or [ebp+arg_4] 0FFFFFFFFh +
add esi 14h +
cmp esi 0A0h +
jb loc_100CAB0  +
pop edi  +
pop ebx  +
pop esi  +
mov eax [ebp+arg_4] +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFF0h  +
push [ebp+hWnd]  +
call ds:GetWindowLongW  +
and eax 1Fh +
cmp al 0Eh +
jz loc_100CB5C  +
push 0  +
push [ebp+arg_0]  +
call ds:SetTextColor  +
push 1  +
push [ebp+arg_0]  +
call ds:SetBkMode  +
push 5  +
call ds:GetStockObject  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+1Ch] 0 +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
jnz loc_100CBD9  +
mov edi [ebp+18h] +
xor ebx ebx +
inc ebx  +
cmp dword ptr [ebp+0Ch] 110h +
jnz loc_100CBA6  +
push dword ptr [ebp+14h]  +
mov [esi+5Ch] ebx +
push dword ptr [ebp+10h]  +
call sub_100CA90  +
mov [edi] eax +
cmp dword ptr [esi+5Ch] 0 +
jz loc_100CBBF  +
mov eax ebx +
jmp loc_100CBDB  +
cmp dword ptr [ebp+0Ch] 138h +
jnz loc_100CBBF  +
push dword ptr [ebp+14h]  +
mov [esi+5Ch] ebx +
push dword ptr [ebp+10h]  +
call sub_100CB2F  +
jmp loc_100CB9A  +
***
push 0  +
push edi  +
push dword ptr [ebp+14h]  +
mov ecx esi +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1008E91  +
test eax eax +
jnz loc_100CBA2  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
push 73h  +
push 0A5h  +
call sub_100F5B2  +
mov dword ptr [esi] offset off_1003EEC +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+arg_24]  +
mov esi ecx +
push [ebp+arg_20]  +
push [ebp+uID]  +
push [ebp+arg_0]  +
call sub_100BFBE  +
mov eax [ebp+arg_8] +
mov [esi+0B4h] eax +
mov eax [ebp+arg_C] +
mov [esi+0B8h] eax +
mov eax [ebp+arg_10] +
mov [esi+0BCh] eax +
mov eax [ebp+arg_14] +
mov [esi+0C0h] eax +
mov eax [ebp+arg_18] +
mov [esi+0C4h] eax +
mov eax [ebp+arg_1C] +
mov [esi+0C8h] eax +
mov dword ptr [esi] offset off_10043EC +
xor eax eax +
lea edi [esi+0A8h] +
stos   +
stos   +
stos   +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 28h  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
push 3  +
mov dword ptr [esi] offset off_10043EC +
lea edi [esi+0A8h] +
pop ebx  +
mov eax [edi] +
test eax eax +
jz loc_100CCA4  +
push eax  +
call ds:DeleteObject  +
add edi 4 +
dec ebx  +
jnz loc_100CC97  +
pop edi  +
mov ecx esi +
pop esi  +
pop ebx  +
jmp sub_100BCDD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
mov eax dword_1014484 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push eax  +
call sub_100BD1A  +
mov ebx eax +
test ebx ebx +
jnz loc_100CD5A  +
mov eax [esi+0B4h] +
mov [ebp+uID] eax +
mov eax [esi+0B8h] +
mov [ebp+var_14] eax +
mov eax [esi+0BCh] +
push edi  +
mov [ebp+var_10] eax +
mov [ebp+nIDDlgItem] 64h +
mov [ebp+var_20] 69h +
mov [ebp+var_1C] 6Eh +
xor edi edi +
lea ecx [ebp+var_C] +
call sub_1011ACB  +
push [ebp+edi+uID]  +
lea ecx [ebp+var_C] +
push hModule  +
call sub_1011C2B  +
test eax eax +
jl loc_100CD49  +
push [ebp+edi+nIDDlgItem]  +
push dword ptr [esi+4]  +
call ds:GetDlgItem  +
push [ebp+lpString]  +
push eax  +
call ds:SetWindowTextW  +
lea ecx [ebp+var_C] +
call sub_1011C1D  +
add edi 4 +
cmp edi 0Ch +
jb loc_100CD14  +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_10113D3  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 5Ch +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_8]  +
mov esi ecx +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100BDC2  +
mov eax [esi+0C0h] +
and [ebp+arg_0] 0 +
mov [ebp+hGlobal] eax +
mov eax [esi+0C4h] +
mov [ebp+var_2C] eax +
mov eax [esi+0C8h] +
mov [ebp+var_28] eax +
lea eax [esi+0A8h] +
mov [ebp+nIDDlgItem] 73h +
mov [ebp+var_20] 78h +
mov [ebp+var_1C] 7Dh +
mov [ebp+var_3C] 64h +
mov [ebp+var_38] 69h +
mov [ebp+var_34] 6Eh +
mov [ebp+var_10] eax +
mov edi [ebp+arg_0] +
push [ebp+edi+nIDDlgItem]  +
push dword ptr [esi+4]  +
call ds:GetDlgItem  +
and [ebp+var_8] 0 +
mov [ebp+hWnd] eax +
lea eax [ebp+nHeight] +
push eax  +
lea eax [ebp+nWidth] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+edi+hGlobal]  +
call sub_10105B1  +
mov ebx eax +
test ebx ebx +
jl loc_100CF70  +
lea eax [ebp+X] +
push eax  +
push [ebp+hWnd]  +
call ds:GetWindowRect  +
test eax eax +
jz loc_100CE38  +
push 2  +
lea eax [ebp+X] +
push eax  +
push dword ptr [esi+4]  +
push 0  +
call ds:MapWindowPoints  +
jmp loc_100CE4E  +
call ds:GetLastError  +
test eax eax +
jle loc_100CE4C  +
and eax 0FFFFh +
or eax 80070000h +
mov ebx eax +
test ebx ebx +
jl loc_100CF70  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+2Ch]  +
test al al +
jz loc_100CE87  +
mov edi [ebp-44h] +
sub edi [ebp+X] +
inc edi  +
mov [ebp+var_C] edi +
fild  [ebp+var_C] +
fild  [ebp+nWidth] +
fidiv  [ebp+nHeight] +
fstp  [ebp+var_C] +
fdiv  [ebp+var_C] +
fadd  ds:dbl_1002038 +
call _ftol2_sse  +
jmp loc_100CE8D  +
mov edi [ebp+nWidth] +
mov eax [ebp+nHeight] +
push 0  +
push eax  +
push edi  +
push dword ptr [ebp-48h]  +
push [ebp+X]  +
push [ebp+hWnd]  +
call ds:MoveWindow  +
test eax eax +
jnz loc_100CEBA  +
call ds:GetLastError  +
test eax eax +
jle loc_100CEB8  +
and eax 0FFFFh +
or eax 80070000h +
mov ebx eax +
test ebx ebx +
jl loc_100CF70  +
push [ebp+var_10]  +
push [ebp+hWnd]  +
push [ebp+var_8]  +
call sub_1010177  +
mov [ebp+var_C] eax +
test eax eax +
jl loc_100CF70  +
push 0  +
push 0  +
push [ebp+hWnd]  +
call ds:InvalidateRect  +
mov eax [ebp+arg_0] +
push [ebp+eax+var_3C]  +
push dword ptr [esi+4]  +
call ds:GetDlgItem  +
mov ebx eax +
lea eax [ebp+Y] +
push eax  +
push ebx  +
call ds:GetWindowRect  +
test eax eax +
jz loc_100CF1C  +
push 2  +
lea eax [ebp+Y] +
push eax  +
push dword ptr [esi+4]  +
push 0  +
call ds:MapWindowPoints  +
jmp loc_100CF33  +
call ds:GetLastError  +
test eax eax +
jle loc_100CF30  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_C] eax +
cmp [ebp+var_C] 0 +
jl loc_100CF70  +
mov ecx [ebp-54h] +
sub ecx [ebp+Y] +
push 1  +
inc ecx  +
mov eax ecx +
sub eax edi +
cdq   +
sub eax edx +
mov edx eax +
mov eax [ebp+X] +
sar edx 1 +
sub eax edx +
mov edx [ebp-50h] +
sub edx [ebp-58h] +
inc edx  +
push edx  +
push ecx  +
push dword ptr [ebp-58h]  +
push eax  +
push ebx  +
call ds:MoveWindow  +
test eax eax +
jnz loc_100CF70  +
call ds:GetLastError  +
cmp [ebp+var_8] 0 +
jz loc_100CF7F  +
push [ebp+var_8]  +
call ds:DeleteObject  +
add [ebp+arg_0] 4 +
add [ebp+var_10] 4 +
cmp [ebp+arg_0] 0Ch +
jb loc_100CDDE  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
push 226h  +
push 203h  +
push 32h  +
push 78h  +
call sub_10087BA  +
mov dword ptr [esi] (offset locret_1001FFB+1) +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
push 227h  +
push 217h  +
push 50h  +
push 82h  +
call sub_10087BA  +
mov dword ptr [esi] offset off_1003F1C +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100881D  +
test [ebp+arg_0] 1 +
jz loc_100D020  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
push 0D7h  +
call sub_100C0D2  +
mov dword ptr [esi] offset off_1003F54 +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
push 229h  +
push 24Eh  +
push 82h  +
push 0AFh  +
call sub_10087BA  +
and dword ptr [esi+0C8h] 0 +
mov dword ptr [esi] offset off_1003F80 +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+60h] +
mov eax [ecx] +
call dword ptr [eax+24h]  +
test al al +
jz loc_100D0AE  +
mov eax 0CDh +
pop esi  +
retn   +
mov ecx [esi+60h] +
mov eax [ecx] +
call dword ptr [eax+38h]  +
movzx eax al +
neg eax  +
sbb eax eax +
and eax 0FFFFFFFBh +
add eax 0DCh +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
cmp [ebp+arg_4] 0 +
push edi  +
mov edi ecx +
mov [ebp+var_4] edi +
jz loc_100D17F  +
cmp [ebp+arg_8] 0 +
jz loc_100D17F  +
push esi  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100887E  +
mov esi ds:GetWindowRect +
lea eax [ebp+Rect] +
push eax  +
push dword ptr [edi+4]  +
call esi  +
test eax eax +
jz loc_100D17E  +
lea eax [ebp+var_24] +
push eax  +
push dword ptr [edi+0C8h]  +
call esi  +
test eax eax +
jz loc_100D17E  +
lea eax [ebp+var_34] +
push eax  +
push dword ptr [edi+0A8h]  +
call esi  +
test eax eax +
jz loc_100D17E  +
mov eax [ebp+Rect.bottom] +
mov edi [ebp+Rect.right] +
sub edi [ebp+Rect.left] +
mov esi [ebp+var_18] +
sub esi [ebp+var_20] +
mov ecx eax +
sub eax [ebp+var_28] +
sub ecx [ebp+Rect.top] +
cdq   +
sub eax edx +
inc edi  +
inc esi  +
push ebx  +
mov ebx eax +
mov eax esi +
cdq   +
sub eax edx +
sar eax 1 +
sar ebx 1 +
neg eax  +
inc ecx  +
sub eax ebx +
add eax ecx +
sub ecx esi +
cmp eax ecx +
pop ebx  +
jle loc_100D168  +
mov eax ecx +
push 1  +
push esi  +
push edi  +
push eax  +
mov eax [ebp+var_4] +
push 0  +
push dword ptr [eax+0C8h]  +
call ds:MoveWindow  +
pop esi  +
pop edi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
call sub_1008B2E  +
mov edi eax +
test edi edi +
jnz loc_100D1BE  +
push 87h  +
push dword ptr [esi+4]  +
call ds:GetDlgItem  +
mov [esi+0C8h] eax +
test eax eax +
jnz loc_100D1BE  +
or edi 0FFFFFFFFh +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+1Ch] 0 +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
jnz loc_100D245  +
mov edi [ebp+18h] +
xor ebx ebx +
inc ebx  +
cmp dword ptr [ebp+0Ch] 110h +
jnz loc_100D204  +
push dword ptr [ebp+14h]  +
mov [esi+5Ch] ebx +
push dword ptr [ebp+10h]  +
call sub_100D189  +
mov [edi] eax +
cmp dword ptr [esi+5Ch] 0 +
jz loc_100D22B  +
mov eax ebx +
jmp loc_100D247  +
cmp dword ptr [ebp+0Ch] 5 +
jnz loc_100D22B  +
mov ecx [ebp+14h] +
movsx eax word ptr [ebp+14h] +
shr ecx 10h +
movsx ecx cx +
push ecx  +
push eax  +
push dword ptr [ebp+10h]  +
mov ecx esi +
mov [esi+5Ch] ebx +
call sub_100D0CC  +
and dword ptr [edi] 0 +
jmp loc_100D1FA  +
***
push 0  +
push edi  +
push dword ptr [ebp+14h]  +
mov ecx esi +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1008EC2  +
test eax eax +
jnz loc_100D200  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_14]  +
mov esi ecx +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+uID]  +
push [ebp+arg_0]  +
call sub_10087BA  +
xor eax eax +
mov [esi+0C8h] eax +
mov [esi+0CCh] eax +
mov [esi+0D0h] eax +
mov [esi+0D4h] eax +
mov [esi+0DCh] eax +
mov al [ebp+arg_18] +
push 787878h  +
mov dword ptr [esi] offset off_1003FB8 +
mov dword ptr [esi+0D8h] 64h +
mov [esi+0E0h] al +
call ds:CreateSolidBrush  +
mov [esi+0E4h] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+0E4h] +
mov dword ptr [esi] offset off_1003FB8 +
test eax eax +
jz loc_100D2E4  +
push eax  +
call ds:DeleteObject  +
mov ecx esi +
pop esi  +
jmp sub_100881D  +
***
mov edi edi +
push esi  +
mov esi ecx +
push 1  +
push dword ptr [esi+4]  +
call ds:KillTimer  +
mov ecx esi +
pop esi  +
jmp sub_1008870  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
cmp [ebp+arg_4] 0 +
push esi  +
mov esi ecx +
jz loc_100D3F6  +
cmp [ebp+arg_8] 0 +
jz loc_100D3F6  +
push edi  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+Y]  +
call sub_100887E  +
mov edi ds:GetWindowRect +
lea eax [ebp+Rect] +
push eax  +
push dword ptr [esi+4]  +
call edi  +
test eax eax +
jz loc_100D3F5  +
lea eax [ebp+var_20] +
push eax  +
push dword ptr [esi+0A8h]  +
call edi  +
test eax eax +
jz loc_100D3F5  +
lea eax [ebp+var_30] +
push eax  +
push dword ptr [esi+0C8h]  +
call edi  +
test eax eax +
jz loc_100D3F5  +
mov eax [ebp+var_20] +
sub eax [ebp+var_18] +
mov ecx [ebp+Rect.bottom] +
sub eax [ebp+Rect.left] +
sub ecx [ebp+Rect.top] +
add eax [ebp+Rect.right] +
inc ecx  +
cdq   +
sub eax edx +
mov edi eax +
mov eax ecx +
cdq   +
sub eax edx +
push ebx  +
mov ebx eax +
mov eax ecx +
cdq   +
and edx 3 +
add eax edx +
sar eax 2 +
sar edi 1 +
mov [ebp+Y] eax +
mov eax edi +
push 3  +
cdq   +
pop ecx  +
idiv  ecx +
mov ecx [esi+0D0h] +
sar ebx 1 +
cmp ecx eax +
jle loc_100D3BD  +
mov ecx eax +
mov eax edi +
push 1  +
sub eax ecx +
push ebx  +
cdq   +
push ecx  +
push [ebp+Y]  +
sub eax edx +
mov edi eax +
sar edi 1 +
push edi  +
push dword ptr [esi+0C8h]  +
call ds:MoveWindow  +
push 1  +
push ebx  +
push 10h  +
push [ebp+Y]  +
add edi 0FFFFFFF0h +
push edi  +
push dword ptr [esi+0CCh]  +
call ds:MoveWindow  +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
cmp eax [ecx+0C8h] +
jnz loc_100D418  +
mov eax [ecx+0E4h] +
jmp loc_100D421  +
push eax  +
push [ebp+arg_0]  +
call sub_100BB49  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_0] +
mov [ecx+0D8h] edx +
movzx edx dx +
mov [ecx+0D4h] eax +
movzx eax ax +
shl edx 10h +
or edx eax +
push edx  +
push 1  +
push 406h  +
push dword ptr [ecx+0C8h]  +
call ds:SendMessageW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp byte ptr [ecx+0E0h] 0 +
jz loc_100D488  +
mov eax [ecx+0D8h] +
add eax [ecx+0D4h] +
sub eax [ebp+lParam] +
jmp loc_100D48B  +
mov eax [ebp+lParam] +
push eax  +
push 1  +
push 405h  +
push dword ptr [ecx+0C8h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push 0  +
push 415h  +
push dword ptr [ecx+0C8h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
push 416h  +
push dword ptr [ecx+0C8h]  +
call ds:SendMessageW  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_100D4F8  +
mov [ecx+4] eax +
jmp loc_100D4FA  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
mov eax dword_1014484 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi ecx +
push edi  +
lea ecx [ebp+var_C] +
call sub_1011ACB  +
push dword ptr [esi+0C4h]  +
lea ecx [ebp+var_C] +
push hModule  +
call sub_1011C2B  +
xor edi edi +
cmp eax edi +
mov [ebp+var_10] edi +
jl loc_100D5C4  +
mov eax [esi] +
lea ecx [ebp+var_10] +
push ecx  +
mov ecx esi +
call dword ptr [eax+3Ch]  +
cmp eax edi +
jl loc_100D5C4  +
mov edx [ebp+var_8] +
cmp edx edi +
jz loc_100D573  +
mov eax edx +
push ebx  +
lea ebx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx di +
jnz loc_100D55E  +
sub eax ebx +
sar eax 1 +
lea eax [eax+eax+2] +
pop ebx  +
jmp loc_100D575  +
xor eax eax +
push 4  +
mov [ebp+var_38] eax +
pop eax  +
mov [ebp+var_28] eax +
mov [ebp+var_18] eax +
lea eax [ebp+var_40] +
push eax  +
push 3  +
push offset dword_1001610  +
push dword_101450C  +
add esi 0DCh +
push dword_1014508  +
lea ecx [ebp+var_10] +
mov [ebp+var_40] edx +
mov [ebp+var_3C] edi +
mov [ebp+var_34] edi +
mov [ebp+var_30] esi +
mov [ebp+var_2C] edi +
mov [ebp+var_24] edi +
mov [ebp+var_20] ecx +
mov [ebp+var_1C] edi +
mov [ebp+var_14] edi +
call ds:EventWrite  +
jmp loc_100D5D1  +
push eax  +
push offset aGenerateadjust  +
call nullsub_1  +
pop ecx  +
pop ecx  +
lea ecx [ebp+var_C] +
call sub_1011C1D  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_10113D3  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
lea ecx [ebp+var_4] +
push ecx  +
lea ecx [ebp+var_8] +
push ecx  +
mov ecx esi +
call dword ptr [eax+40h]  +
push [ebp+var_4]  +
mov ecx esi +
push [ebp+var_8]  +
call sub_100D42A  +
mov eax [ebp+var_4] +
sub eax [ebp+var_8] +
push 0Ah  +
pop ecx  +
xor edx edx +
div  ecx +
mov ecx esi +
push eax  +
call sub_100D4A8  +
mov eax [esi] +
lea edi [esi+0DCh] +
push edi  +
mov ecx esi +
call dword ptr [eax+3Ch]  +
test eax eax +
jl loc_100D65B  +
push dword ptr [edi]  +
mov ecx esi +
call sub_100D469  +
push 0  +
push 32h  +
push 1  +
push dword ptr [esi+4]  +
call ds:SetTimer  +
mov ecx esi +
call sub_100BB8D  +
jmp loc_100D66B  +
push eax  +
push 130h  +
push dword ptr [esi+4]  +
call sub_100FF4F  +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
call sub_1008B2E  +
mov ebx eax +
test ebx ebx +
jnz loc_100D6E7  +
push edi  +
mov edi ds:GetDlgItem +
push 8Ch  +
push dword ptr [esi+4]  +
call edi  +
mov [esi+0C8h] eax +
test eax eax +
jz loc_100D6E3  +
push 93h  +
push dword ptr [esi+4]  +
call edi  +
mov [esi+0CCh] eax +
test eax eax +
jz loc_100D6E3  +
lea eax [ebp+Rect] +
push eax  +
push dword ptr [esi+0C8h]  +
call ds:GetWindowRect  +
test eax eax +
jz loc_100D6E3  +
mov eax [ebp+Rect.right] +
sub eax [ebp+Rect.left] +
inc eax  +
mov [esi+0D0h] eax +
jmp loc_100D6E6  +
or ebx 0FFFFFFFFh +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_8] +
push esi  +
push edi  +
mov edi ecx +
mov ecx [edi+0D4h] +
mov esi [edi+0D8h] +
mov [ebp+var_4] ecx +
mov [ebp+var_8] esi +
cmp eax [edi+0C8h] +
jnz loc_100D7FB  +
mov eax [ebp+arg_0] +
test eax eax +
jl loc_100D7FB  +
cmp eax 3 +
jle loc_100D777  +
cmp eax 5 +
jle loc_100D762  +
cmp eax 6 +
jz loc_100D757  +
cmp eax 7 +
jnz loc_100D7FB  +
cmp byte ptr [edi+0E0h] 0 +
jz loc_100D7D1  +
mov esi ecx +
jmp loc_100D7D9  +
cmp byte ptr [edi+0E0h] 0 +
jnz loc_100D7D1  +
jmp loc_100D750  +
cmp byte ptr [edi+0E0h] 0 +
jz loc_100D772  +
sub esi [ebp+arg_4] +
add esi ecx +
jmp loc_100D7D1  +
mov esi [ebp+arg_4] +
jmp loc_100D7D1  +
mov eax [edi] +
and [ebp+arg_4] 0 +
lea ecx [ebp+arg_4] +
push ecx  +
mov ecx edi +
call dword ptr [eax+3Ch]  +
test eax eax +
jl loc_100D7ED  +
mov eax [ebp+arg_0] +
mov esi [ebp+arg_4] +
push ebx  +
xor ebx ebx +
cmp [edi+0E0h] bl +
setz bl  +
sub eax 0 +
lea ebx [ebx+ebx-1] +
jz loc_100D7CE  +
dec eax  +
jz loc_100D7CA  +
dec eax  +
jz loc_100D7BC  +
dec eax  +
jnz loc_100D7D0  +
mov ecx edi +
call sub_100D4CC  +
imul eax ebx +
add esi eax +
jmp loc_100D7D0  +
mov ecx edi +
call sub_100D4CC  +
imul eax ebx +
sub esi eax +
jmp loc_100D7D0  +
add esi ebx +
jmp loc_100D7D0  +
sub esi ebx +
pop ebx  +
cmp esi [ebp+var_4] +
jge loc_100D7D9  +
mov esi [ebp+var_4] +
cmp esi [ebp+var_8] +
jle loc_100D7E1  +
mov esi [ebp+var_8] +
mov eax [edi] +
push esi  +
mov ecx edi +
call dword ptr [eax+38h]  +
test eax eax +
jge loc_100D7FB  +
push eax  +
push 130h  +
push dword ptr [edi+4]  +
call sub_100FF4F  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+lParam] 0 +
push esi  +
mov esi ecx +
mov eax [esi] +
lea ecx [ebp+lParam] +
push ecx  +
mov ecx esi +
call dword ptr [eax+3Ch]  +
test eax eax +
jl loc_100D82C  +
push [ebp+lParam]  +
mov ecx esi +
call sub_100D469  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
and [ebp+var_4] 0 +
push esi  +
mov esi ecx +
lea ecx [ebp+var_4] +
mov dword ptr [esi+8] 6 +
mov dword ptr [esi] offset off_1004058 +
mov eax [eax] +
push ecx  +
push eax  +
call GdipCreateSolidFill  +
mov [esi+8] eax +
mov eax [ebp+var_4] +
mov [esi+4] eax +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push dword ptr [esi+4]  +
mov dword ptr [esi] offset off_1004058 +
call GdipDeleteBrush  +
test byte ptr [ebp+8] 1 +
jz loc_100D896  +
push esi  +
call GdipFree  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_C] +
and [ebp+var_4] 0 +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_8] +
lea edx [ebp+var_4] +
push edx  +
push 0  +
mov dword ptr [esi+8] 6 +
mov dword ptr [esi] offset off_1004058 +
mov eax [eax] +
mov ecx [ecx] +
push eax  +
push ecx  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call GdipCreateLineBrushI  +
mov [esi+8] eax +
mov eax [ebp+var_4] +
mov [esi+4] eax +
mov eax esi +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
mov esi ecx +
call GdipCreateFromHDC  +
mov [esi+4] eax +
mov eax [ebp+var_4] +
mov [esi] eax +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push [ebp+arg_10]  +
mov esi ecx +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push dword ptr [eax+4]  +
push dword ptr [esi]  +
call GdipFillRectangleI  +
push eax  +
mov ecx esi +
call sub_100D4E7  +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov dword ptr [eax] 0FF787878h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax [ebp+arg_4] +
mov dword ptr [eax] 0FF000000h +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
cmp dword ptr [esi+4] 93h +
mov ebx ecx +
jnz loc_100DA77  +
mov eax [ebx] +
push edi  +
lea ecx [ebp+var_4] +
push ecx  +
lea ecx [ebp+var_8] +
mov edi 0FF000000h +
push ecx  +
mov ecx ebx +
mov [ebp+var_8] edi +
mov [ebp+var_4] edi +
call dword ptr [eax+48h]  +
mov eax [ebx] +
lea ecx [ebp+arg_4] +
push ecx  +
mov ecx ebx +
mov [ebp+arg_4] edi +
call dword ptr [eax+44h]  +
push dword ptr [esi+18h]  +
lea ecx [ebp+var_10] +
call sub_100D8EE  +
lea eax [ebp+arg_4] +
push eax  +
lea ecx [ebp+var_38] +
call sub_100D836  +
mov eax [esi+20h] +
mov edx [esi+28h] +
mov ecx [esi+1Ch] +
sub edx eax +
inc edx  +
push edx  +
mov edx [esi+24h] +
sub edx ecx +
inc edx  +
push edx  +
push eax  +
push ecx  +
lea eax [ebp+var_38] +
push eax  +
lea ecx [ebp+var_10] +
call sub_100D91B  +
mov eax [esi+28h] +
and [ebp+var_18] 0 +
and [ebp+var_20] 0 +
sub eax 5 +
mov [ebp+var_14] eax +
mov eax [esi+20h] +
add eax 5 +
mov [ebp+var_1C] eax +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_18] +
push eax  +
lea eax [ebp+var_20] +
push eax  +
lea ecx [ebp+var_2C] +
call sub_100D8A2  +
mov eax [esi+20h] +
mov edx [esi+28h] +
mov ecx [esi+1Ch] +
sub edx eax +
sub edx 0Ah +
push edx  +
mov edx [esi+24h] +
sub edx ecx +
sub edx 9 +
push edx  +
add eax 5 +
push eax  +
add ecx 5 +
push ecx  +
lea eax [ebp+var_2C] +
push eax  +
lea ecx [ebp+var_10] +
call sub_100D91B  +
push [ebp+var_28]  +
call GdipDeleteBrush  +
push [ebp+var_34]  +
call GdipDeleteBrush  +
push [ebp+var_10]  +
call GdipDeleteGraphics  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and dword ptr [ebp-4] 0 +
push esi  +
lea eax [ebp-4] +
mov esi ecx +
push eax  +
push dword ptr [esi+4]  +
call GdipCloneBrush  +
push eax  +
mov ecx esi +
call sub_100FDC6  +
push 0Ch  +
call GdipAlloc  +
test eax eax +
jz loc_100DAC4  +
mov ecx [esi+8] +
mov edx [ebp-4] +
mov dword ptr [eax] offset off_1004058 +
mov [eax+8] ecx +
mov [eax+4] edx +
mov esi eax +
jmp loc_100DAC6  +
xor esi esi +
test esi esi +
jnz loc_100DAD2  +
push dword ptr [ebp-4]  +
call GdipDeleteBrush  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 1  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
push 226h  +
push 203h  +
push 32h  +
push 8Ch  +
call sub_100D253  +
mov dword ptr [esi] offset off_1004060 +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
push offset aBrightnessD  +
call nullsub_1  +
pop ecx  +
pop ecx  +
mov ecx [esi+60h] +
mov eax [ecx] +
pop esi  +
pop ebp  +
jmp dword ptr [eax+40h]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+60h] +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+3Ch]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+60h] +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+44h]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
push 1FEh  +
push 1F9h  +
push 1F4h  +
push 28h  +
push 23h  +
push 1Eh  +
push 19h  +
push 87h  +
call sub_100CC13  +
mov dword ptr [esi] offset off_10040CC +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov ecx [ecx+60h] +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
movzx eax al +
neg eax  +
sbb eax eax +
and eax 14h +
add eax 78h +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100CC81  +
test byte ptr [ebp+8] 1 +
jz loc_100DBD6  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_C]  +
lea eax [ebp+arg_C] +
push eax  +
push 0  +
push [ebp+arg_0]  +
mov esi ecx +
push dword ptr [esi+14h]  +
call GetVCPFeatureAndVCPFeatureReply  +
test eax eax +
jz loc_100DC15  +
mov eax [ebp+arg_4] +
or [esi+120h] eax +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_100DC15  +
and dword ptr [eax] 0 +
xor eax eax +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
push esi  +
push [ebp+arg_4]  +
push esi  +
push [ebp+arg_0]  +
push dword ptr [ecx+14h]  +
call GetVCPFeatureAndVCPFeatureReply  +
test eax eax +
jnz loc_100DC53  +
call ds:GetLastError  +
cmp eax esi +
jle loc_100DC51  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
xor esi esi +
push [ebp+arg_0]  +
push dword ptr [ecx+14h]  +
call SetVCPFeature  +
test eax eax +
jnz loc_100DC8F  +
call ds:GetLastError  +
test eax eax +
jle loc_100DC8D  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
and dword ptr [ecx+7CCh] 0 +
pop ebp  +
jmp sub_1009E69  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
lea eax [ebp+8] +
push eax  +
push dword ptr [ebp+8]  +
lea eax [ebp-4] +
push eax  +
push dword ptr [ecx+14h]  +
xor esi esi +
call GetMonitorBrightness  +
test eax eax +
jnz loc_100DCE8  +
call ds:GetLastError  +
test eax eax +
jle loc_100DCE6  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+8]  +
xor esi esi +
push dword ptr [ecx+14h]  +
call SetMonitorBrightness  +
test eax eax +
jnz loc_100DD21  +
call ds:GetLastError  +
test eax eax +
jle loc_100DD1F  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
lea eax [ebp+8] +
push eax  +
push dword ptr [ebp+8]  +
lea eax [ebp-4] +
push eax  +
push dword ptr [ecx+14h]  +
xor esi esi +
call GetMonitorContrast  +
test eax eax +
jnz loc_100DD63  +
call ds:GetLastError  +
test eax eax +
jle loc_100DD61  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+8]  +
xor esi esi +
push dword ptr [ecx+14h]  +
call SetMonitorContrast  +
test eax eax +
jnz loc_100DD9C  +
call ds:GetLastError  +
test eax eax +
jle loc_100DD9A  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 72h  +
call sub_100DC21  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
shl eax 8 +
push eax  +
push 72h  +
call sub_100DC5F  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+8]  +
xor esi esi +
push dword ptr [ecx+0Ch]  +
call ds:GetDeviceGammaRamp  +
test eax eax +
jnz loc_100DE0A  +
call ds:GetLastError  +
test eax eax +
jle loc_100DE08  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+8]  +
xor esi esi +
push dword ptr [ecx+0Ch]  +
call ds:SetDeviceGammaRamp  +
test eax eax +
jnz loc_100DE44  +
call ds:GetLastError  +
test eax eax +
jle loc_100DE42  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 16h  +
call sub_100DC21  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 16h  +
call sub_100DC5F  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 18h  +
call sub_100DC21  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 18h  +
call sub_100DC5F  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 1Ah  +
call sub_100DC21  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 1Ah  +
call sub_100DC5F  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 8Ah  +
call sub_100DC21  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 8Ah  +
call sub_100DC5F  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 14h  +
call sub_100DC21  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
or eax 100h +
push eax  +
push 14h  +
call sub_100DC5F  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
lea eax [ebp-4] +
push eax  +
push 0Ch  +
mov esi ecx +
call sub_100DC21  +
test eax eax +
jl loc_100DF79  +
mov ecx [esi+7CCh] +
imul ecx [ebp-4] +
mov edx [ebp+8] +
add ecx 0BB8h +
mov [edx] ecx +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
cmp eax 0BB8h +
jnb loc_100DF99  +
mov eax 80070057h +
jmp loc_100DFAE  +
add eax 0FFFFF448h +
xor edx edx +
div  dword ptr [ecx+7CCh] +
push eax  +
push 0Ch  +
call sub_100DC5F  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
lea eax [ebp-4] +
push eax  +
push 11h  +
call sub_100DC21  +
test eax eax +
jl locret_100DFD4  +
mov ecx [ebp+8] +
mov edx [ebp-4] +
mov [ecx] edx +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 11h  +
call sub_100DC5F  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
lea eax [ebp-4] +
push eax  +
push 1Fh  +
call sub_100DC21  +
test eax eax +
jl locret_100E012  +
mov ecx [ebp+8] +
mov edx [ebp-4] +
mov [ecx] edx +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 1Fh  +
call sub_100DC5F  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
push 0  +
lea eax [esi+7CCh] +
push eax  +
push 0  +
push 0Bh  +
push dword ptr [esi+14h]  +
call GetVCPFeatureAndVCPFeatureReply  +
test eax eax +
jnz loc_100E06D  +
call ds:GetLastError  +
test eax eax +
jle loc_100E06B  +
and eax 0FFFFh +
or eax 80070000h +
test eax eax +
jl loc_100E08A  +
push 0  +
lea eax [ebp+var_4] +
push eax  +
push 0  +
push 0Ch  +
push dword ptr [esi+14h]  +
call GetVCPFeatureAndVCPFeatureReply  +
test eax eax +
jz loc_100E08A  +
or dword ptr [esi+120h] 4 +
xor eax eax +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 604h +
mov eax dword_1014484 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi ecx +
mov ecx 600h +
lea eax [ebp+var_604] +
mov byte ptr [eax] 0 +
inc eax  +
dec ecx  +
jnz loc_100E0B7  +
lea eax [ebp+var_604] +
push eax  +
push dword ptr [esi+0Ch]  +
call ds:GetDeviceGammaRamp  +
test eax eax +
jz loc_100E0F0  +
lea eax [ebp+var_604] +
push eax  +
push dword ptr [esi+0Ch]  +
call ds:SetDeviceGammaRamp  +
test eax eax +
jz loc_100E0F0  +
or dword ptr [esi+120h] 80000000h +
mov ecx [ebp+var_4] +
xor ecx ebp +
xor eax eax +
pop esi  +
call sub_10113D3  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
lea eax [esi+148h] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push 0  +
push 16h  +
push dword ptr [esi+14h]  +
call GetVCPFeatureAndVCPFeatureReply  +
mov ebx 0FFFFh +
mov edi 80070000h +
test eax eax +
jnz loc_100E14E  +
call ds:GetLastError  +
test eax eax +
jle loc_100E147  +
and eax ebx +
or eax edi +
mov [ebp+var_4] eax +
test eax eax +
jl loc_100E1AC  +
lea eax [esi+150h] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push 0  +
push 18h  +
push dword ptr [esi+14h]  +
call GetVCPFeatureAndVCPFeatureReply  +
test eax eax +
jnz loc_100E17A  +
call ds:GetLastError  +
test eax eax +
jle loc_100E177  +
and eax ebx +
or eax edi +
mov [ebp+var_4] eax +
cmp [ebp+var_4] 0 +
jl loc_100E1AC  +
lea eax [esi+158h] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push 0  +
push 1Ah  +
push dword ptr [esi+14h]  +
call GetVCPFeatureAndVCPFeatureReply  +
test eax eax +
jnz loc_100E1AC  +
call ds:GetLastError  +
test eax eax +
jle loc_100E1A9  +
and eax ebx +
or eax edi +
mov [ebp+var_4] eax +
xor eax eax +
cmp [esi+148h] eax +
jz loc_100E1C6  +
cmp [esi+150h] eax +
jz loc_100E1C6  +
cmp [esi+158h] eax +
jnz loc_100E1CD  +
mov [ebp+var_4] 80004005h +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
push edi  +
lea eax [esi+4] +
push eax  +
mov [ebp-8] ebx +
mov [esi+120h] ebx +
mov [esi+124h] ebx +
mov [ebp-10h] ebx +
mov [ebp-0Ch] ebx +
call sub_100FD12  +
mov [ebp-1] al +
cmp al bl +
jz loc_100E237  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-0Ch] +
push eax  +
push dword ptr [esi+14h]  +
call GetMonitorCapabilities  +
test eax eax +
jnz loc_100E242  +
push offset aMonitorDoesNot  +
call nullsub_1  +
xor eax eax +
pop ecx  +
mov [ebp-10h] eax +
mov [ebp-0Ch] ebx +
jmp loc_100E245  +
push offset aMonitorDoesN_0  +
call nullsub_1  +
pop ecx  +
mov eax [ebp-10h] +
test byte ptr [ebp-0Ch] 2 +
jz loc_100E27A  +
or dword ptr [esi+120h] 1 +
lea eax [esi+12Ch] +
push eax  +
lea eax [ebp-14h] +
push eax  +
lea eax [esi+128h] +
push eax  +
push dword ptr [esi+14h]  +
call GetMonitorBrightness  +
cmp eax ebx +
mov [ebp-8] eax +
jl loc_100E406  +
mov eax [ebp-10h] +
push 8  +
pop ecx  +
mov edi 80h +
test [ebp-0Ch] cl +
jz loc_100E2F8  +
or [esi+120h] ecx +
mov edx eax +
or edx 1 +
jz loc_100E29B  +
or dword ptr [esi+124h] 3 +
mov edx eax +
or edx 2 +
jz loc_100E2A9  +
or dword ptr [esi+124h] 4 +
mov edx eax +
or edx 4 +
jz loc_100E2B7  +
or dword ptr [esi+124h] 5 +
mov edx eax +
or edx ecx +
jz loc_100E2C4  +
or dword ptr [esi+124h] 6 +
mov edx eax +
or edx 10h +
jz loc_100E2D2  +
or dword ptr [esi+124h] 7 +
mov edx eax +
or edx 20h +
jz loc_100E2DF  +
or [esi+124h] ecx +
mov ecx eax +
or ecx 40h +
jz loc_100E2ED  +
or dword ptr [esi+124h] 9 +
or eax edi +
jz loc_100E2F8  +
or dword ptr [esi+124h] 0Ah +
test byte ptr [ebp-0Ch] 10h +
jz loc_100E314  +
or dword ptr [esi+120h] 0E00h +
mov ecx esi +
call sub_100E104  +
mov [ebp-8] eax +
jmp loc_100E33E  +
push 32h  +
pop eax  +
push 64h  +
mov [esi+154h] eax +
mov [esi+14Ch] eax +
mov [esi+144h] eax +
pop eax  +
mov [esi+158h] eax +
mov [esi+150h] eax +
mov [esi+148h] eax +
cmp [ebp-8] ebx +
jl loc_100E406  +
test byte ptr [ebp-0Ch] 4 +
jz loc_100E371  +
or dword ptr [esi+120h] 2 +
lea eax [esi+134h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
lea eax [esi+130h] +
push eax  +
push dword ptr [esi+14h]  +
call GetMonitorContrast  +
mov [ebp-8] eax +
cmp [ebp-8] ebx +
jl loc_100E406  +
cmp [ebp-1] bl +
jz loc_100E386  +
mov ecx esi +
call sub_100E033  +
test byte ptr [esi+120h] 40h +
jnz loc_100E3B5  +
fld1   +
push ecx  +
fstp  dword ptr [esp] +
call sub_100FC8C  +
fld  ds:flt_1004100 +
push ecx  +
fstp  dword ptr [esp] +
mov [esi+138h] eax +
call sub_100FC8C  +
mov [esi+13Ch] eax +
mov ecx esi +
call sub_100E094  +
cmp [ebp-1] bl +
jz loc_100E3F9  +
lea eax [esi+16Ch] +
push eax  +
lea eax [esi+168h] +
push eax  +
push 10h  +
push 8Ah  +
mov ecx esi +
call sub_100DBE2  +
push ebx  +
push ebx  +
push edi  +
push 11h  +
mov ecx esi +
call sub_100DBE2  +
push ebx  +
push ebx  +
push 100h  +
push 1Fh  +
mov ecx esi +
call sub_100DBE2  +
push dword ptr [esi+120h]  +
push offset aMccsCapabiliti  +
jmp loc_100E40E  +
push dword ptr [ebp-8]  +
push offset aGetmccscapabil  +
call nullsub_1  +
mov eax [ebp-8] +
pop ecx  +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
fld1   +
push esi  +
push 32h  +
pop eax  +
mov esi ecx +
push 64h  +
mov [esi+154h] eax +
mov [esi+14Ch] eax +
mov [esi+144h] eax +
pop eax  +
push ecx  +
fstp  dword ptr [esp] +
mov [esi+158h] eax +
mov [esi+150h] eax +
mov [esi+148h] eax +
call sub_100FC8C  +
fld  ds:flt_1004100 +
push ecx  +
fstp  dword ptr [esp] +
mov [esi+138h] eax +
call sub_100FC8C  +
mov [esi+13Ch] eax +
mov ecx esi +
pop esi  +
jmp sub_100E094  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 1  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
push 227h  +
push 217h  +
push 50h  +
push 96h  +
call sub_100D253  +
mov dword ptr [esi] offset off_1004218 +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov ecx [ecx+60h] +
mov eax [ecx] +
call dword ptr [eax+20h]  +
movzx eax al +
neg eax  +
sbb eax eax +
and eax 0Fh +
add eax 0A5h +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
push offset aContrastD  +
call nullsub_1  +
pop ecx  +
pop ecx  +
mov ecx [esi+60h] +
mov eax [ecx] +
pop esi  +
pop ebp  +
jmp dword ptr [eax+4Ch]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+60h] +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+48h]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+60h] +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+50h]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
push 212h  +
push 20Dh  +
push 208h  +
push 46h  +
push 41h  +
push 3Ch  +
push 37h  +
push 91h  +
call sub_100CC13  +
mov dword ptr [esi] offset off_1004280 +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov ecx [ecx+60h] +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
movzx eax al +
neg eax  +
sbb eax eax +
and eax 14h +
add eax 82h +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+60h] +
mov eax [ecx] +
call dword ptr [eax+0F0h]  +
test eax eax +
jge loc_100E5A6  +
push eax  +
push 135h  +
push 0  +
call sub_100FF4F  +
xor eax eax +
pop esi  +
retn   +
mov ecx esi +
pop esi  +
jmp sub_100BA18  +
***
mov ecx [ecx+60h] +
mov eax [ecx] +
call dword ptr [eax+0ECh]  +
test eax eax +
jge locret_100E5CF  +
push eax  +
push 134h  +
push 0  +
call sub_100FF4F  +
retn 0Ch  +
***
mov ecx [ecx+60h] +
mov eax [ecx] +
call dword ptr [eax+0F0h]  +
test eax eax +
jge locret_100E5F3  +
push eax  +
push 135h  +
push 0  +
call sub_100FF4F  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
push 0DCh  +
call sub_100C0D2  +
mov dword ptr [esi] offset off_10042B0 +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100BCDD  +
test [ebp+arg_0] 1 +
jz loc_100E63F  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
mov esi ecx +
cmp [ebp+1Ch] ebx +
jnz loc_100E6F0  +
cmp dword ptr [ebp+0Ch] 111h +
mov edi [ebp+18h] +
jnz loc_100E6D7  +
mov eax [ebp+10h] +
shr eax 10h +
xor ecx ecx +
mov [ebp+1Ch] eax +
cmp cx ax +
jnz loc_100E6A8  +
mov eax 0C8h +
mov ecx eax +
cmp cx [ebp+10h] +
jnz loc_100E6A8  +
push dword ptr [ebp+14h]  +
mov ecx esi +
push eax  +
push ebx  +
mov dword ptr [esi+5Ch] 1 +
call sub_100E5B3  +
mov [edi] ebx +
cmp [esi+5Ch] ebx +
jz loc_100E6A8  +
xor eax eax +
inc eax  +
jmp loc_100E6F2  +
xor eax eax +
cmp ax [ebp+1Ch] +
jnz loc_100E6D7  +
mov eax 0CDh +
mov ecx eax +
cmp cx [ebp+10h] +
jnz loc_100E6D7  +
push dword ptr [ebp+14h]  +
mov ecx esi +
push eax  +
push ebx  +
mov dword ptr [esi+5Ch] 1 +
call sub_100E5D7  +
mov [edi] ebx +
cmp [esi+5Ch] ebx +
jnz loc_100E6A3  +
push ebx  +
push edi  +
push dword ptr [ebp+14h]  +
mov ecx esi +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1008E91  +
test eax eax +
jnz loc_100E6A3  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
push 229h  +
push 24Eh  +
push 82h  +
push 0B9h  +
call sub_10087BA  +
xor eax eax +
push 787878h  +
mov dword ptr [esi] offset off_10042F0 +
mov [esi+0C8h] eax +
mov [esi+0CCh] eax +
mov [esi+0D0h] eax +
mov [esi+0D4h] eax +
mov [esi+0D8h] eax +
mov [esi+0DCh] eax +
mov [esi+0E0h] eax +
mov [esi+0E4h] eax +
mov [esi+0E8h] eax +
mov [esi+0ECh] eax +
mov [esi+0F0h] eax +
mov [esi+0F4h] eax +
mov [esi+0F8h] eax +
mov [esi+0FCh] eax +
mov [esi+100h] eax +
call ds:CreateSolidBrush  +
mov [esi+104h] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+104h] +
mov dword ptr [esi] offset off_10042F0 +
test eax eax +
jz loc_100E7C0  +
push eax  +
call ds:DeleteObject  +
mov ecx esi +
pop esi  +
jmp sub_100881D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
fld  ds:flt_10042EC +
mov eax [ebp+arg_0] +
fstp  dword ptr [eax] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
cmp [ebp+arg_4] 0 +
push edi  +
mov edi ecx +
jz loc_100E98E  +
cmp [ebp+arg_8] 0 +
jz loc_100E98E  +
push esi  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+X]  +
call sub_100887E  +
mov esi ds:GetWindowRect +
lea eax [ebp+Rect] +
push eax  +
push dword ptr [edi+4]  +
call esi  +
test eax eax +
jz loc_100E98D  +
lea eax [ebp+var_34] +
push eax  +
push dword ptr [edi+0C8h]  +
call esi  +
test eax eax +
jz loc_100E98D  +
lea eax [ebp+var_44] +
push eax  +
push dword ptr [edi+0D4h]  +
call esi  +
test eax eax +
jz loc_100E98D  +
mov eax [ebp+Rect.right] +
sub eax [ebp+Rect.left] +
mov esi [ebp+Rect.bottom] +
inc eax  +
mov [ebp+X] eax +
fild  [ebp+X] +
sub esi [ebp+Rect.top] +
push ebx  +
inc esi  +
fstp  [ebp+var_C] +
mov [ebp+var_14] esi +
fld  [ebp+var_C] +
fmul  ds:dbl_1004348 +
fdiv  ds:dbl_1004340 +
fld  ds:dbl_1002038 +
fadd st(1) st +
fxch  st(1) +
call _ftol2_sse  +
fild  [ebp+var_14] +
mov ebx eax +
fstp  [ebp+X] +
fld  [ebp+X] +
fld  ds:dbl_1004338 +
fmul st(1) st +
fxch  st(1) +
fadd st st(2) +
call _ftol2_sse  +
fld  [ebp+X] +
fmul  ds:dbl_1004330 +
mov [ebp+nHeight] eax +
fadd st st(2) +
call _ftol2_sse  +
mov [ebp+var_4] eax +
push 5  +
pop eax  +
cmp [ebp+var_4] eax +
jge loc_100E8C9  +
mov [ebp+var_4] eax +
mov eax [ebp+nHeight] +
fmul  [ebp+var_C] +
imul eax eax +
faddp st(1) st +
cdq   +
sub eax edx +
sar eax 1 +
sub esi eax +
mov eax esi +
sub eax [ebp+var_4] +
mov [ebp+var_14] esi +
mov [ebp+Y] eax +
call _ftol2_sse  +
push 1  +
push [ebp+nHeight]  +
mov [ebp+X] eax +
push ebx  +
push esi  +
mov esi ds:MoveWindow +
push eax  +
push dword ptr [edi+0C8h]  +
call esi  +
push 1  +
push [ebp+var_4]  +
push ebx  +
push [ebp+Y]  +
push [ebp+X]  +
push dword ptr [edi+0D4h]  +
call esi  +
fld  [ebp+var_C] +
fmul  ds:dbl_1004328 +
fadd  ds:dbl_1002038 +
call _ftol2_sse  +
push 1  +
push [ebp+nHeight]  +
mov [ebp+var_C] eax +
push ebx  +
push [ebp+var_14]  +
add eax ebx +
add [ebp+X] eax +
push [ebp+X]  +
push dword ptr [edi+0CCh]  +
call esi  +
push 1  +
push [ebp+var_4]  +
push ebx  +
push [ebp+Y]  +
push [ebp+X]  +
push dword ptr [edi+0D8h]  +
call esi  +
mov eax [ebp+var_C] +
push 1  +
push [ebp+nHeight]  +
add eax ebx +
add [ebp+X] eax +
push ebx  +
push [ebp+var_14]  +
push [ebp+X]  +
push dword ptr [edi+0D0h]  +
call esi  +
push 1  +
push [ebp+var_4]  +
push ebx  +
push [ebp+Y]  +
push [ebp+X]  +
push dword ptr [edi+0DCh]  +
call esi  +
pop ebx  +
pop esi  +
pop edi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+hWnd] +
cmp eax [ecx+0C8h] +
jz loc_100E9C3  +
cmp eax [ecx+0CCh] +
jz loc_100E9C3  +
cmp eax [ecx+0D0h] +
jz loc_100E9C3  +
push eax  +
push [ebp+arg_0]  +
call sub_100BB49  +
jmp loc_100E9C9  +
mov eax [ecx+104h] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
push dword ptr [esi+0ACh]  +
call ds:GetDC  +
push dword ptr [esi+0ACh]  +
mov [ebp+hDC] eax +
call ds:GetWindowTextLengthW  +
mov edi eax +
xor ecx ecx +
push 2  +
lea ebx [edi+1] +
pop edx  +
mov eax ebx +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??_U@YAPAXI@Z  +
pop ecx  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_100EA6D  +
push ebx  +
push eax  +
push dword ptr [esi+0ACh]  +
call ds:GetWindowTextW  +
lea eax [ebp+var_10] +
push eax  +
push edi  +
push [ebp+var_4]  +
push [ebp+hDC]  +
call ds:GetTextExtentPoint32W  +
mov eax [ebp+var_10.cy] +
imul eax eax +
cdq   +
sub eax edx +
push 1  +
sar eax 1 +
push eax  +
mov eax [ebp+arg_0] +
push [ebp+nWidth]  +
cdq   +
sub eax edx +
sar eax 1 +
push eax  +
push 0  +
push dword ptr [esi+0ACh]  +
call ds:MoveWindow  +
push [ebp+var_4]  +
call ??_V@YAXPAX@Z  +
pop ecx  +
push [ebp+hDC]  +
push dword ptr [esi+0ACh]  +
call ds:ReleaseDC  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_8] +
movzx ecx [ebp+arg_4] +
shl eax 10h +
or eax ecx +
push eax  +
push 1  +
push 406h  +
push [ebp+hWnd]  +
call ds:SendMessageW  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push 1  +
push 405h  +
push [ebp+hWnd]  +
call ds:SendMessageW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push 0  +
push 415h  +
push [ebp+hWnd]  +
call ds:SendMessageW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 0  +
push 416h  +
push [ebp+hWnd]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100E7A4  +
test byte ptr [ebp+8] 1 +
jz loc_100EB30  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 6BCh +
mov eax dword_1014484 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi ecx +
lea ecx [ebp+var_C] +
call sub_1011ACB  +
push dword ptr [esi+0C4h]  +
lea ecx [ebp+var_C] +
push hModule  +
call sub_1011C2B  +
xor ebx ebx +
cmp eax ebx +
jl loc_100EBB2  +
mov ecx [esi+60h] +
mov eax [ecx] +
lea edx [ebp+var_618] +
push edx  +
call dword ptr [eax+74h]  +
cmp eax ebx +
jl loc_100EBB2  +
mov ecx [esi+60h] +
mov eax [ecx] +
lea edx [ebp+var_61C] +
push edx  +
call dword ptr [eax+88h]  +
cmp eax ebx +
jl loc_100EBB2  +
mov ecx [esi+60h] +
mov eax [ecx] +
lea edx [ebp+var_614] +
push edx  +
call dword ptr [eax+9Ch]  +
cmp eax ebx +
mov [ebp+var_610] offset dword_1001630 +
jl loc_100ED7E  +
mov ecx [ebp+var_8] +
push edi  +
cmp ecx ebx +
jz loc_100EBE5  +
mov eax ecx +
lea edi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx bx +
jnz loc_100EBD1  +
sub eax edi +
sar eax 1 +
lea eax [eax+eax+2] +
jmp loc_100EBE7  +
xor eax eax +
mov [ebp+var_6BC] ecx +
lea ecx [ebp+var_618] +
mov [ebp+var_69C] ecx +
lea ecx [esi+0FCh] +
mov [ebp+var_68C] ecx +
lea ecx [ebp+var_61C] +
mov [ebp+var_67C] ecx +
mov [ebp+var_6B4] eax +
push 4  +
lea ecx [esi+100h] +
mov [ebp+var_66C] ecx +
lea eax [esi+0F8h] +
mov [ebp+var_6AC] eax +
pop eax  +
lea ecx [ebp+var_614] +
mov [ebp+var_65C] ecx +
mov ecx [esi+60h] +
push 7  +
mov [ebp+var_6B8] ebx +
mov [ebp+var_6B0] ebx +
mov [ebp+var_6A8] ebx +
mov [ebp+var_6A4] eax +
mov [ebp+var_6A0] ebx +
mov [ebp+var_698] ebx +
mov [ebp+var_694] eax +
mov [ebp+var_690] ebx +
mov [ebp+var_688] ebx +
mov [ebp+var_684] eax +
mov [ebp+var_680] ebx +
mov [ebp+var_678] ebx +
mov [ebp+var_674] eax +
mov [ebp+var_670] ebx +
mov [ebp+var_668] ebx +
mov [ebp+var_664] eax +
mov [ebp+var_660] ebx +
mov [ebp+var_658] ebx +
mov [ebp+var_654] eax +
mov [ebp+var_650] ebx +
mov eax [ecx] +
pop edi  +
call dword ptr [eax+1Ch]  +
test al al +
jnz loc_100ED5D  +
mov [ebp+var_610] offset dword_1001640 +
mov ecx 600h +
lea eax [ebp+var_60C] +
mov [eax] bl +
inc eax  +
dec ecx  +
jnz loc_100ECDE  +
mov ecx [esi+60h] +
mov eax [ecx] +
lea edx [ebp+var_60C] +
push edx  +
call dword ptr [eax+60h]  +
cmp eax ebx +
jl loc_100ED7D  +
lea eax [ebp+var_60C] +
lea ecx [ebp+var_40C] +
mov [ebp+var_64C] eax +
mov eax 200h +
mov [ebp+var_63C] ecx +
lea ecx [ebp+var_20C] +
push 0Ah  +
mov [ebp+var_648] ebx +
mov [ebp+var_644] eax +
mov [ebp+var_640] ebx +
mov [ebp+var_638] ebx +
mov [ebp+var_634] eax +
mov [ebp+var_630] ebx +
mov [ebp+var_62C] ecx +
mov [ebp+var_628] ebx +
mov [ebp+var_624] eax +
mov [ebp+var_620] ebx +
pop edi  +
lea eax [ebp+var_6BC] +
push eax  +
push edi  +
push [ebp+var_610]  +
push dword_101450C  +
push dword_1014508  +
call ds:EventWrite  +
pop edi  +
lea ecx [ebp+var_C] +
call sub_1011C1D  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10113D3  +
leave   +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
mov ecx [esi+60h] +
mov eax [ecx] +
push edi  +
lea edi [esi+0E4h] +
push edi  +
lea ebx [esi+0E0h] +
push ebx  +
call dword ptr [eax+84h]  +
push dword ptr [edi]  +
mov ecx esi +
push dword ptr [ebx]  +
push dword ptr [esi+0C8h]  +
call sub_100EA88  +
mov eax [edi] +
sub eax [ebx] +
push 0Ah  +
pop ecx  +
xor edx edx +
div  ecx +
mov ecx esi +
push eax  +
push dword ptr [esi+0C8h]  +
call sub_100EAD5  +
mov ecx [esi+60h] +
mov eax [ecx] +
lea edi [esi+0F8h] +
push edi  +
call dword ptr [eax+74h]  +
test eax eax +
jl loc_100EEF6  +
push dword ptr [edi]  +
mov ecx esi +
push dword ptr [esi+0C8h]  +
call sub_100EAB4  +
mov ecx [esi+60h] +
mov eax [ecx] +
lea edi [esi+0ECh] +
push edi  +
lea ebx [esi+0E8h] +
push ebx  +
call dword ptr [eax+98h]  +
push dword ptr [edi]  +
mov ecx esi +
push dword ptr [ebx]  +
push dword ptr [esi+0CCh]  +
call sub_100EA88  +
mov eax [edi] +
sub eax [ebx] +
push 0Ah  +
pop ecx  +
xor edx edx +
div  ecx +
mov ecx esi +
push eax  +
push dword ptr [esi+0CCh]  +
call sub_100EAD5  +
mov ecx [esi+60h] +
mov eax [ecx] +
lea edi [esi+0FCh] +
push edi  +
call dword ptr [eax+88h]  +
test eax eax +
jl loc_100EEF6  +
push dword ptr [edi]  +
mov ecx esi +
push dword ptr [esi+0CCh]  +
call sub_100EAB4  +
mov ecx [esi+60h] +
mov eax [ecx] +
lea edi [esi+0F4h] +
push edi  +
lea ebx [esi+0F0h] +
push ebx  +
call dword ptr [eax+0ACh]  +
push dword ptr [edi]  +
mov ecx esi +
push dword ptr [ebx]  +
push dword ptr [esi+0D0h]  +
call sub_100EA88  +
mov eax [edi] +
sub eax [ebx] +
push 0Ah  +
pop ecx  +
xor edx edx +
div  ecx +
mov ecx esi +
push eax  +
push dword ptr [esi+0D0h]  +
call sub_100EAD5  +
mov ecx [esi+60h] +
mov eax [ecx] +
lea edi [esi+100h] +
push edi  +
call dword ptr [eax+9Ch]  +
test eax eax +
jl loc_100EEF6  +
push dword ptr [edi]  +
mov ecx esi +
push dword ptr [esi+0D0h]  +
call sub_100EAB4  +
push 0  +
push 32h  +
push 1  +
push dword ptr [esi+4]  +
call ds:SetTimer  +
pop edi  +
mov ecx esi +
pop esi  +
pop ebx  +
jmp sub_100BB8D  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
call sub_1008B2E  +
xor ebx ebx +
mov [ebp+arg_4] eax +
cmp eax ebx +
jnz loc_100EFBA  +
push edi  +
mov edi ds:GetDlgItem +
push 0C8h  +
push dword ptr [esi+4]  +
call edi  +
push 0CDh  +
push dword ptr [esi+4]  +
mov [esi+0C8h] eax +
call edi  +
push 0D2h  +
push dword ptr [esi+4]  +
mov [esi+0CCh] eax +
call edi  +
push 0D7h  +
push dword ptr [esi+4]  +
mov [esi+0D0h] eax +
call edi  +
push 0DCh  +
push dword ptr [esi+4]  +
mov [esi+0D4h] eax +
call edi  +
push 0E1h  +
push dword ptr [esi+4]  +
mov [esi+0D8h] eax +
call edi  +
mov [esi+0DCh] eax +
pop edi  +
cmp [esi+0C8h] ebx +
jz loc_100EFB6  +
cmp [esi+0CCh] ebx +
jz loc_100EFB6  +
cmp [esi+0D0h] ebx +
jz loc_100EFB6  +
cmp [esi+0D4h] ebx +
jz loc_100EFB6  +
cmp [esi+0D8h] ebx +
jz loc_100EFB6  +
cmp eax ebx +
jnz loc_100EFBA  +
or [ebp+arg_4] 0FFFFFFFFh +
mov eax [ebp+arg_4] +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+hWnd] +
and [ebp+var_8] 0 +
push ebx  +
push esi  +
mov esi ecx +
mov [ebp+var_1] 0 +
cmp eax [esi+0C8h] +
jnz loc_100F004  +
mov eax [esi+0E4h] +
mov ecx [esi+60h] +
mov ebx [esi+0E0h] +
lea edx [ebp+var_10] +
mov [ebp+var_C] eax +
mov eax [ecx] +
push edx  +
call dword ptr [eax+74h]  +
jmp loc_100F052  +
cmp eax [esi+0CCh] +
jnz loc_100F02C  +
mov eax [esi+0ECh] +
mov ecx [esi+60h] +
mov ebx [esi+0E8h] +
lea edx [ebp+var_10] +
mov [ebp+var_C] eax +
mov eax [ecx] +
push edx  +
call dword ptr [eax+88h]  +
jmp loc_100F052  +
cmp eax [esi+0D0h] +
jnz loc_100F057  +
mov eax [esi+0F4h] +
mov ecx [esi+60h] +
mov ebx [esi+0F0h] +
lea edx [ebp+var_10] +
mov [ebp+var_C] eax +
mov eax [ecx] +
push edx  +
call dword ptr [eax+9Ch]  +
mov [ebp+var_8] eax +
jmp loc_100F05E  +
mov ebx [ebp+hWnd] +
mov [ebp+var_1] 1 +
cmp [ebp+var_8] 0 +
jl loc_100F10E  +
cmp [ebp+var_1] 0 +
jnz loc_100F108  +
mov eax [ebp+arg_0] +
push edi  +
mov edi [ebp+var_10] +
cmp eax 7 +
ja loc_100F107  +
jmp ds:off_100F124[eax*4]  +
mov edi [ebp+arg_4] +
jmp loc_100F0B3  +
push [ebp+hWnd]  +
mov ecx esi +
call sub_100EAF6  +
sub edi eax +
jmp loc_100F0B3  +
dec edi  +
jmp loc_100F0B3  +
push [ebp+hWnd]  +
mov ecx esi +
call sub_100EAF6  +
add edi eax +
jmp loc_100F0B3  +
inc edi  +
jmp loc_100F0B3  +
mov edi [ebp+var_C] +
cmp edi ebx +
jge loc_100F0B9  +
mov edi ebx +
cmp edi [ebp+var_C] +
jle loc_100F0C1  +
mov edi [ebp+var_C] +
mov eax [ebp+hWnd] +
mov [ebp+var_10] edi +
cmp eax [esi+0C8h] +
jnz loc_100F0DA  +
mov ecx [esi+60h] +
mov eax [ecx] +
push edi  +
call dword ptr [eax+7Ch]  +
jmp loc_100F104  +
cmp eax [esi+0CCh] +
jnz loc_100F0F0  +
mov ecx [esi+60h] +
mov eax [ecx] +
push edi  +
call dword ptr [eax+90h]  +
jmp loc_100F104  +
cmp eax [esi+0D0h] +
jnz loc_100F107  +
mov ecx [esi+60h] +
mov eax [ecx] +
push edi  +
call dword ptr [eax+0A4h]  +
mov [ebp+var_8] eax +
pop edi  +
cmp [ebp+var_8] 0 +
jge loc_100F11E  +
push [ebp+var_8]  +
push 130h  +
push dword ptr [esi+4]  +
call sub_100FF4F  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov ecx [esi+60h] +
mov eax [ecx] +
lea edx [ebp+lParam] +
push edx  +
call dword ptr [eax+74h]  +
test eax eax +
jl loc_100F172  +
push [ebp+lParam]  +
mov ecx esi +
push dword ptr [esi+0C8h]  +
call sub_100EAB4  +
mov ecx [esi+60h] +
mov eax [ecx] +
lea edx [ebp+lParam] +
push edx  +
call dword ptr [eax+88h]  +
test eax eax +
jl loc_100F195  +
push [ebp+lParam]  +
mov ecx esi +
push dword ptr [esi+0CCh]  +
call sub_100EAB4  +
mov ecx [esi+60h] +
mov eax [ecx] +
lea edx [ebp+lParam] +
push edx  +
call dword ptr [eax+9Ch]  +
test eax eax +
jl loc_100F1B8  +
push [ebp+lParam]  +
mov ecx esi +
push dword ptr [esi+0D0h]  +
call sub_100EAB4  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi ecx +
mov ecx [esi+4] +
sub ecx 0D7h +
mov eax 0FF000000h +
push 5  +
mov [ebp+var_8] eax +
mov [ebp+var_4] eax +
pop ebx  +
jz loc_100F205  +
sub ecx ebx +
jz loc_100F1FC  +
sub ecx ebx +
jnz loc_100F20F  +
mov [ebp+var_4] 0FF0000FFh +
jmp loc_100F20C  +
mov [ebp+var_4] 0FF00FF00h +
jmp loc_100F20C  +
mov [ebp+var_4] 0FFFF0000h +
mov [ebp+var_8] eax +
lea eax [ebp+arg_4] +
push eax  +
lea ecx [ebp+var_38] +
mov [ebp+arg_4] 0FF787878h +
call sub_100D836  +
push dword ptr [esi+18h]  +
lea ecx [ebp+var_10] +
call sub_100D8EE  +
mov eax [esi+20h] +
mov edx [esi+28h] +
mov ecx [esi+1Ch] +
sub edx eax +
inc edx  +
push edx  +
mov edx [esi+24h] +
sub edx ecx +
inc edx  +
push edx  +
push eax  +
push ecx  +
lea eax [ebp+var_38] +
push eax  +
lea ecx [ebp+var_10] +
call sub_100D91B  +
mov al [edi+0A4h] +
lea ecx [ebp+var_8] +
test al al +
jnz loc_100F2F5  +
lea ecx [ebp+var_4] +
lea eax [ebp+var_8] +
mov edx [esi+24h] +
and [ebp+var_14] 0 +
and [ebp+var_1C] 0 +
push ecx  +
push eax  +
sub edx ebx +
mov [ebp+var_18] edx +
mov edx [esi+1Ch] +
lea eax [ebp+var_18] +
push eax  +
lea eax [ebp+var_20] +
add edx ebx +
push eax  +
lea ecx [ebp+var_2C] +
mov [ebp+var_20] edx +
call sub_100D8A2  +
mov ecx [esi+28h] +
mov eax ecx +
sub eax [esi+20h] +
imul eax eax +
cdq   +
and edx 7 +
add eax edx +
sar eax 3 +
cmp eax 1 +
jge loc_100F2AC  +
xor eax eax +
inc eax  +
mov edx [esi+20h] +
mov edi [esi+1Ch] +
lea ebx [eax+eax] +
sub ecx ebx +
sub ecx edx +
push ecx  +
mov ecx [esi+24h] +
sub ecx edi +
sub ecx 9 +
push ecx  +
add edx eax +
push edx  +
add edi 5 +
push edi  +
lea eax [ebp+var_2C] +
push eax  +
lea ecx [ebp+var_10] +
call sub_100D91B  +
push [ebp+var_28]  +
call GdipDeleteBrush  +
push [ebp+var_10]  +
call GdipDeleteGraphics  +
push [ebp+var_34]  +
call GdipDeleteBrush  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
lea eax [ebp+var_4] +
jmp loc_100F266  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+1Ch] 0 +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
jnz loc_100F3F5  +
mov eax [ebp+0Ch] +
mov ebx [ebp+18h] +
xor edi edi +
inc edi  +
cmp eax 110h +
jnz loc_100F347  +
push dword ptr [ebp+14h]  +
mov [esi+5Ch] edi +
push dword ptr [ebp+10h]  +
call sub_100EF01  +
mov [ebx] eax +
cmp dword ptr [esi+5Ch] 0 +
jz loc_100F3D6  +
mov eax edi +
jmp loc_100F3F7  +
cmp eax 114h +
jnz loc_100F36B  +
mov eax [ebp+10h] +
push dword ptr [ebp+14h]  +
shr eax 10h +
cwde   +
push eax  +
movzx eax word ptr [ebp+10h] +
push eax  +
mov [esi+5Ch] edi +
call sub_100EFC8  +
and dword ptr [ebx] 0 +
jmp loc_100F336  +
***
cmp eax 113h +
jnz loc_100F37F  +
push dword ptr [ebp+10h]  +
mov [esi+5Ch] edi +
call sub_100F149  +
jmp loc_100F366  +
***
cmp eax 5 +
jnz loc_100F3A2  +
mov ecx [ebp+14h] +
movsx eax word ptr [ebp+14h] +
shr ecx 10h +
movsx ecx cx +
push ecx  +
push eax  +
push dword ptr [ebp+10h]  +
mov ecx esi +
mov [esi+5Ch] edi +
call sub_100E7E6  +
jmp loc_100F366  +
***
cmp eax 2Bh +
jnz loc_100F3BC  +
push dword ptr [ebp+14h]  +
mov [esi+5Ch] edi +
push dword ptr [ebp+10h]  +
call sub_100F1C2  +
mov [ebx] edi +
jmp loc_100F336  +
***
cmp eax 138h +
jnz loc_100F3D9  +
push dword ptr [ebp+14h]  +
mov [esi+5Ch] edi +
push dword ptr [ebp+10h]  +
call sub_100E998  +
jmp loc_100F334  +
***
mov eax [ebp+0Ch] +
push 0  +
push ebx  +
push dword ptr [ebp+14h]  +
mov ecx esi +
push dword ptr [ebp+10h]  +
push eax  +
push dword ptr [ebp+8]  +
call sub_1008EC2  +
test eax eax +
jnz loc_100F340  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
push 78h  +
push 0B4h  +
call sub_100CA1C  +
mov dword ptr [esi] offset off_1004350 +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov ecx [ecx+60h] +
mov eax [ecx] +
call dword ptr [eax+20h]  +
movzx eax al +
neg eax  +
sbb eax eax +
and eax 0Ah +
add eax 0AFh +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100CA47  +
test byte ptr [ebp+8] 1 +
jz loc_100F466  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 1  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
push 22Ah  +
push 262h  +
push 0A5h  +
push 0D2h  +
call sub_100D253  +
mov dword ptr [esi] offset off_1004380 +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov ecx [ecx+60h] +
mov eax [ecx] +
call dword ptr [eax+38h]  +
movzx eax al +
neg eax  +
sbb eax eax +
and eax 0FFFFFFFBh +
add eax 0DCh +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
push offset aSaturationD  +
call nullsub_1  +
pop ecx  +
pop ecx  +
mov ecx [esi+60h] +
mov eax [ecx] +
pop esi  +
pop ebp  +
jmp dword ptr [eax+0B4h]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+60h] +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+0B0h]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+60h] +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+0B8h]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100D2C8  +
test [ebp+arg_0] 1 +
jz loc_100F539  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov dword ptr [eax] 0FFFFC20Eh +
mov eax [ebp+arg_4] +
mov dword ptr [eax] 0FF000000h +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
push 25Dh  +
push 258h  +
push 253h  +
push 9Bh  +
push 96h  +
push 91h  +
push 8Ch  +
push 0CDh  +
call sub_100CC13  +
mov dword ptr [esi] offset off_10043EC +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_C]  +
mov esi ecx +
push [ebp+arg_8]  +
push [ebp+uID]  +
push [ebp+arg_0]  +
call sub_100BFBE  +
mov dword ptr [esi] offset off_100441C +
mov eax esi +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
call dword ptr [eax+2Ch]  +
push eax  +
mov ecx esi +
call sub_100BBB2  +
pop esi  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
push 0Fh  +
push 69h  +
call sub_100BFBE  +
mov dword ptr [esi] offset off_100444C +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+60h] +
mov eax [ecx] +
call dword ptr [eax+18h]  +
test al al +
jz loc_100F639  +
mov eax 9Bh +
pop esi  +
retn   +
mov ecx [esi+60h] +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
movzx eax al +
neg eax  +
sbb eax eax +
and eax 19h +
add eax 6Eh +
pop esi  +
retn   +
***
mov eax [ecx] +
jmp dword ptr [eax+0DCh]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
xor ebx ebx +
push ebx  +
push offset SubKey  +
push hKey  +
mov [ebp+hKey] ebx +
call ds:RegOpenKeyExW  +
mov esi eax +
cmp esi ebx +
jnz loc_100F6DD  +
push edi  +
mov edi ds:RegQueryValueExW +
lea eax [ebp+cbData] +
push eax  +
push ebx  +
lea eax [ebp+Type] +
push eax  +
push ebx  +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call edi  +
mov esi eax +
cmp esi ebx +
jnz loc_100F6DC  +
mov eax [ebp+Type] +
cmp eax [ebp+arg_4] +
jnz loc_100F6C1  +
mov eax [ebp+cbData] +
cmp eax [ebp+arg_8] +
jz loc_100F6C6  +
push 0Dh  +
pop esi  +
jmp loc_100F6DC  +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+lpData]  +
lea eax [ebp+arg_4] +
push eax  +
push ebx  +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call edi  +
mov esi eax +
pop edi  +
cmp [ebp+hKey] ebx +
jz loc_100F6EB  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
cmp esi ebx +
jle loc_100F6FB  +
and esi 0FFFFh +
or esi 80070000h +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+hKey] 0 +
push esi  +
lea eax [ebp+hKey] +
push eax  +
push 20006h  +
push 0  +
push offset SubKey  +
push hKey  +
call ds:RegOpenKeyExW  +
mov esi eax +
test esi esi +
jnz loc_100F74D  +
push [ebp+cbData]  +
push [ebp+lpData]  +
push [ebp+dwType]  +
push eax  +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call ds:RegSetValueExW  +
mov esi eax +
cmp [ebp+hKey] 0 +
jz loc_100F75C  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
test esi esi +
jle loc_100F76C  +
and esi 0FFFFh +
or esi 80070000h +
mov eax esi +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 600h  +
push 3  +
push offset aGammaramp  +
call sub_100F662  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 600h  +
push 3  +
push offset aGammaramp  +
call sub_100F708  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpData]  +
push 4  +
push 4  +
push [ebp+lpValueName]  +
call sub_100F662  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+Data] +
push eax  +
push 4  +
push 4  +
push [ebp+lpValueName]  +
call sub_100F708  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push offset aBrightness  +
call sub_100F7BC  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push offset aBrightness  +
call sub_100F7D9  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push offset aContrast  +
call sub_100F7BC  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push offset aContrast  +
call sub_100F7D9  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push offset aGamma  +
call sub_100F7BC  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push offset aGamma  +
call sub_100F7D9  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push offset aRedgain  +
call sub_100F7BC  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push offset aRedgain  +
call sub_100F7D9  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push offset aGreengain  +
call sub_100F7BC  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push offset aGreengain  +
call sub_100F7D9  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push offset aBluegain  +
call sub_100F7BC  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push offset aBluegain  +
call sub_100F7D9  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push offset aSaturation  +
call sub_100F7BC  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push offset aSaturation  +
call sub_100F7D9  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push offset aColorpreset  +
call sub_100F7BC  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push offset aColorpreset  +
call sub_100F7D9  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push offset aColortemperatu  +
call sub_100F7BC  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push offset aColortemperatu  +
call sub_100F7D9  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
lea eax [ebp-4] +
push eax  +
push offset aFleshtoneenhan  +
call sub_100F7BC  +
test eax eax +
jl locret_100F9FD  +
mov ecx [ebp+8] +
mov edx [ebp-4] +
mov [ecx] edx +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push offset aFleshtoneenhan  +
call sub_100F7D9  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
lea eax [ebp-4] +
push eax  +
push offset aAutocolorsetup  +
call sub_100F7BC  +
test eax eax +
jl locret_100FA41  +
mov ecx [ebp+8] +
mov edx [ebp-4] +
mov [ecx] edx +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push offset aAutocolorsetup  +
call sub_100F7D9  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea eax [esi+120h] +
push eax  +
push offset aCapabilities  +
call sub_100F7BC  +
mov edi eax +
test edi edi +
jl loc_100FC7C  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+0Ch]  +
test al al +
jz loc_100FAFD  +
lea eax [esi+128h] +
push eax  +
push offset aMinbrightness  +
mov ecx esi +
call sub_100F7BC  +
mov edi eax +
test edi edi +
jl loc_100FC7C  +
lea eax [esi+12Ch] +
push eax  +
push offset aMaxbrightness  +
mov ecx esi +
call sub_100F7BC  +
mov edi eax +
test edi edi +
jl loc_100FC7C  +
lea eax [esi+130h] +
push eax  +
push offset aMincontrast  +
mov ecx esi +
call sub_100F7BC  +
mov edi eax +
test edi edi +
jl loc_100FC7C  +
lea eax [esi+134h] +
push eax  +
push offset aMaxcontrast  +
mov ecx esi +
call sub_100F7BC  +
mov edi eax +
test edi edi +
jl loc_100FC7C  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+18h]  +
test al al +
jz loc_100FB42  +
lea eax [esi+138h] +
push eax  +
push offset aMingamma  +
mov ecx esi +
call sub_100F7BC  +
mov edi eax +
test edi edi +
jl loc_100FC7C  +
lea eax [esi+13Ch] +
push eax  +
push offset aMaxgamma  +
mov ecx esi +
call sub_100F7BC  +
mov edi eax +
test edi edi +
jl loc_100FC7C  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+1Ch]  +
test al al +
jz loc_100FBFF  +
lea eax [esi+144h] +
push eax  +
push offset aMinredgain  +
mov ecx esi +
call sub_100F7BC  +
mov edi eax +
test edi edi +
jl loc_100FC7C  +
lea eax [esi+148h] +
push eax  +
push offset aMaxredgain  +
mov ecx esi +
call sub_100F7BC  +
mov edi eax +
test edi edi +
jl loc_100FC7C  +
lea eax [esi+14Ch] +
push eax  +
push offset aMingreengain  +
mov ecx esi +
call sub_100F7BC  +
mov edi eax +
test edi edi +
jl loc_100FC7C  +
lea eax [esi+150h] +
push eax  +
push offset aMaxgreengain  +
mov ecx esi +
call sub_100F7BC  +
mov edi eax +
test edi edi +
jl loc_100FC7C  +
lea eax [esi+154h] +
push eax  +
push offset aMinbluegain  +
mov ecx esi +
call sub_100F7BC  +
mov edi eax +
test edi edi +
jl loc_100FC7C  +
lea eax [esi+158h] +
push eax  +
push offset aMaxbluegain  +
mov ecx esi +
call sub_100F7BC  +
mov edi eax +
test edi edi +
jl loc_100FC7C  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+20h]  +
test al al +
jz loc_100FC43  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+1Ch]  +
test al al +
jnz loc_100FC43  +
and dword ptr [esi+154h] 0 +
and dword ptr [esi+14Ch] 0 +
and dword ptr [esi+144h] 0 +
push 64h  +
pop eax  +
mov [esi+158h] eax +
mov [esi+150h] eax +
mov [esi+148h] eax +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+24h]  +
test al al +
jz loc_100FC7C  +
lea eax [esi+168h] +
push eax  +
push offset aMinsaturation  +
mov ecx esi +
call sub_100F7BC  +
mov edi eax +
test edi edi +
jl loc_100FC7C  +
lea eax [esi+16Ch] +
push eax  +
push offset aMaxsaturation  +
mov ecx esi +
call sub_100F7BC  +
mov edi eax +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
fld  [ebp+arg_0] +
fsub  ds:dbl_10039F8 +
fmul  ds:dbl_10038B8 +
fadd  ds:dbl_1002038 +
call _ftol2  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
fild  [ebp+arg_0] +
test eax eax +
jge loc_100FCC9  +
fadd  ds:flt_10038C0 +
fdiv  ds:dbl_10038B8 +
fadd  ds:dbl_10039F8 +
fstp  [ebp+arg_0] +
fld  [ebp+arg_0] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push 0  +
push 172h  +
push [ebp+hWnd]  +
call ds:SendMessageW  +
test eax eax +
jz loc_100FD07  +
push eax  +
call ds:DeleteObject  +
xor eax eax +
pop ebp  +
retn 8  +
***
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push edi  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
xor edi edi +
push edi  +
push offset SubKey  +
push hKey  +
mov [ebp+hKey] edi +
mov [ebp+cbData] 4 +
mov dword ptr [ebp+Data] edi +
call ds:RegOpenKeyExW  +
mov ebx eax +
cmp ebx edi +
jnz loc_100FD86  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push edi  +
push offset ValueName  +
push [ebp+hKey]  +
call ds:RegQueryValueExW  +
mov ebx eax +
cmp ebx edi +
jnz loc_100FD86  +
cmp [ebp+Type] 4 +
jnz loc_100FD83  +
cmp [ebp+cbData] 4 +
jz loc_100FD86  +
push 0Dh  +
pop ebx  +
cmp [ebp+hKey] edi +
jz loc_100FD94  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
xor ecx ecx +
cmp dword ptr [ebp+Data] 1 +
mov eax ebx +
setz cl  +
neg eax  +
sbb eax eax +
not eax  +
pop edi  +
pop ebx  +
and eax ecx +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
inc dword ptr [eax]  +
xor eax eax +
inc eax  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_100FDD7  +
mov [ecx+8] eax +
jmp loc_100FDD9  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
cmp [ebp+arg_4] 0 +
push esi  +
lea eax [ebp+var_4] +
mov esi ecx +
push eax  +
push [ebp+arg_0]  +
mov dword ptr [esi] offset off_1004478 +
jz loc_100FE09  +
call GdipCreateBitmapFromStreamICM  +
jmp loc_100FE0E  +
call GdipCreateBitmapFromStream  +
mov [esi+8] eax +
mov eax [ebp+var_4] +
mov [esi+4] eax +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push dword ptr [eax]  +
mov esi ecx +
push [ebp+arg_4]  +
push dword ptr [esi+4]  +
call GdipCreateHBITMAPFromBitmap  +
push eax  +
mov ecx esi +
call sub_100FDC6  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax dword_1014484 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_0] +
test esi esi +
jz loc_100FE84  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100FE70  +
sub eax edx +
sar eax 1 +
lea eax [eax+eax+2] +
jmp loc_100FE86  +
xor eax eax +
and [ebp+var_18] 0 +
and [ebp+var_10] 0 +
mov [ebp+var_14] eax +
lea eax [ebp+var_1C] +
push eax  +
push 1  +
push offset dword_1001650  +
push dword_101450C  +
mov [ebp+var_1C] esi +
push dword_1014508  +
call ds:EventWrite  +
lea ecx [ebp+var_C] +
call sub_1011ACB  +
push 4  +
push hModule  +
lea ecx [ebp+var_C] +
call sub_1011C2B  +
test eax eax +
jl loc_100FEDA  +
push 10h  +
push [ebp+lpCaption]  +
push esi  +
push edi  +
call ds:MessageBoxW  +
lea ecx [ebp+var_C] +
call sub_1011C1D  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_10113D3  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov eax dword_1014484 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
lea ecx [ebp+var_C] +
call sub_1011ACB  +
push [ebp+uID]  +
lea ecx [ebp+var_C] +
push hModule  +
call sub_1011C2B  +
test eax eax +
jl loc_100FF33  +
push [ebp+var_8]  +
push esi  +
call sub_100FE4D  +
lea ecx [ebp+var_C] +
call sub_1011C1D  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_10113D3  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
mov eax dword_1014484 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi hModule +
push edi  +
mov edi [ebp+arg_8] +
mov [ebp+var_30] ebx +
mov [ebp+hInstance] esi +
cmp edi 80040006h +
jz loc_101006F  +
lea ecx [ebp+var_C] +
call sub_1011ACB  +
push [ebp+uID]  +
lea ecx [ebp+var_C] +
push esi  +
call sub_1011C2B  +
test eax eax +
jl loc_1010067  +
mov eax edi +
and eax 1FFF0000h +
cmp eax 40000h +
jnz loc_100FFBA  +
push [ebp+var_8]  +
push ebx  +
call sub_100FE4D  +
jmp loc_1010067  +
mov esi ds:FormatMessageW +
xor ebx ebx +
push ebx  +
push ebx  +
lea eax [ebp+Buffer] +
push eax  +
push ebx  +
push edi  +
push ebx  +
push 1100h  +
mov [ebp+var_15] bl +
mov dword ptr [ebp+Buffer] ebx +
call esi  +
test eax eax +
jz loc_100FFE0  +
mov [ebp+var_15] 1 +
mov eax [ebp+var_8] +
mov [ebp+Arguments] eax +
cmp [ebp+var_15] bl +
jz loc_100FFFA  +
mov eax dword ptr [ebp+Buffer] +
mov [ebp+hMem] 12Bh +
mov [ebp+var_28] eax +
jmp loc_1010004  +
mov [ebp+hMem] 12Ch +
mov [ebp+var_28] edi +
lea ecx [ebp+var_14] +
call sub_1011ACB  +
push [ebp+hMem]  +
lea ecx [ebp+var_14] +
push [ebp+hInstance]  +
call sub_1011C2B  +
mov edi ds:LocalFree +
test eax eax +
jl loc_1010055  +
lea eax [ebp+Arguments] +
push eax  +
push ebx  +
lea eax [ebp+hMem] +
push eax  +
push ebx  +
push ebx  +
push [ebp+lpSource]  +
mov [ebp+hMem] ebx +
push 2500h  +
call esi  +
test eax eax +
jz loc_101004B  +
push [ebp+hMem]  +
push [ebp+var_30]  +
call sub_100FE4D  +
cmp [ebp+hMem] ebx +
jz loc_1010055  +
push [ebp+hMem]  +
call edi  +
cmp dword ptr [ebp+Buffer] ebx +
jz loc_101005F  +
push dword ptr [ebp+Buffer]  +
call edi  +
lea ecx [ebp+var_14] +
call sub_1011C1D  +
lea ecx [ebp+var_C] +
call sub_1011C1D  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10113D3  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 64h +
push ebx  +
push 5Ch  +
xor ebx ebx +
lea eax [ebp+var_60] +
push ebx  +
push eax  +
mov [ebp+var_4] 1 +
call memset  +
mov eax [ebp+arg_0] +
mov [ebp+var_60] eax +
mov eax hModule +
mov [ebp+var_5C] eax +
movzx eax [ebp+arg_4] +
add esp 0Ch +
push ebx  +
mov [ebp+var_44] eax +
push ebx  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_64] +
push eax  +
mov [ebp+var_64] 60h +
mov [ebp+var_58] 8 +
mov [ebp+var_54] 6 +
mov [ebp+var_50] 4 +
mov [ebp+var_4C] 0FFFFh +
call ds:COMCTL32_345  +
test eax eax +
jl loc_10100F9  +
cmp [ebp+var_4] 6 +
jnz loc_10100F9  +
inc ebx  +
mov eax ebx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_4] +
push esi  +
push edi  +
push [ebp+hWnd]  +
xor edi edi +
and [ebp+dwData] edi +
mov byte ptr [eax] 0 +
call ds:GetDC  +
mov esi eax +
test esi esi +
jz loc_1010144  +
lea eax [ebp+dwData] +
push eax  +
push offset sub_100FDB0  +
push edi  +
push esi  +
call ds:EnumDisplayMonitors  +
push esi  +
push [ebp+hWnd]  +
call ds:ReleaseDC  +
jmp loc_101015E  +
call ds:GetLastError  +
test eax eax +
jle loc_1010158  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
test edi edi +
jl loc_101016A  +
cmp [ebp+dwData] 1 +
mov ecx [ebp+arg_4] +
setnbe al  +
mov [ecx] al +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
push ebx  +
xor ebx ebx +
cmp [ebp+arg_0] ebx +
jz loc_1010466  +
cmp [ebp+hWnd] ebx +
jz loc_1010466  +
cmp [ebp+arg_8] ebx +
jz loc_1010466  +
push esi  +
push edi  +
lea eax [ebp+var_38] +
push eax  +
push 18h  +
push [ebp+arg_0]  +
mov [ebp+var_10] ebx +
mov [ebp+var_8] ebx +
mov [ebp+lParam] ebx +
call ds:GetObjectW  +
mov edi 0FFFFh +
mov esi 80070000h +
test eax eax +
jz loc_10101D3  +
mov eax [ebp+var_34] +
mov [ebp+var_20] eax +
mov eax [ebp+Rect.left] +
mov [ebp+var_1C] eax +
jmp loc_10101F9  +
call ds:GetLastError  +
test eax eax +
jle loc_10101E1  +
and eax edi +
or eax esi +
mov ebx eax +
push ebx  +
push offset aGetobjectFaile  +
call nullsub_1  +
add esp 8 +
test ebx ebx +
jl loc_1010458  +
lea eax [ebp+Rect] +
push eax  +
push [ebp+hWnd]  +
call ds:GetWindowRect  +
test eax eax +
jz loc_1010220  +
mov eax [ebp+Rect.right] +
sub eax [ebp+Rect.left] +
inc eax  +
mov [ebp+var_18] eax +
mov eax [ebp+Rect.bottom] +
sub eax [ebp+Rect.top] +
inc eax  +
mov [ebp+var_14] eax +
jmp loc_101023E  +
call ds:GetLastError  +
test eax eax +
jle loc_101022E  +
and eax edi +
or eax esi +
mov ebx eax +
push ebx  +
push offset aGetwindowrectF  +
call nullsub_1  +
add esp 8 +
test ebx ebx +
jl loc_1010458  +
push [ebp+hWnd]  +
call ds:GetDC  +
mov [ebp+hDC] eax +
test eax eax +
jnz loc_1010266  +
call ds:GetLastError  +
test eax eax +
jle loc_1010264  +
and eax edi +
or eax esi +
mov ebx eax +
test ebx ebx +
jl loc_1010413  +
push [ebp+hDC]  +
call ds:CreateCompatibleDC  +
mov [ebp+var_10] eax +
test eax eax +
jnz loc_101029C  +
call ds:GetLastError  +
test eax eax +
jle loc_101028C  +
and eax edi +
or eax esi +
mov ebx eax +
push ebx  +
push offset aCreatecompatib  +
call nullsub_1  +
add esp 8 +
test ebx ebx +
jl loc_1010413  +
push [ebp+arg_0]  +
push [ebp+var_10]  +
call ds:SelectObject  +
test eax eax +
jnz loc_10102C6  +
push offset aSelectobjectSo  +
mov ebx 80004005h +
call nullsub_1  +
add esp 4 +
test ebx ebx +
jl loc_1010413  +
push [ebp+hDC]  +
call ds:CreateCompatibleDC  +
mov [ebp+var_8] eax +
test eax eax +
jnz loc_10102FC  +
call ds:GetLastError  +
test eax eax +
jle loc_10102EC  +
and eax edi +
or eax esi +
mov ebx eax +
push ebx  +
push offset aCreatecompat_0  +
call nullsub_1  +
add esp 8 +
test ebx ebx +
jl loc_1010413  +
push 3  +
push [ebp+var_8]  +
call ds:SetStretchBltMode  +
test eax eax +
jnz loc_1010331  +
call ds:GetLastError  +
test eax eax +
jle loc_1010321  +
and eax edi +
or eax esi +
mov ebx eax +
push ebx  +
push offset aSetstretchbltm  +
call nullsub_1  +
add esp 8 +
test ebx ebx +
jl loc_1010413  +
push [ebp+var_14]  +
push [ebp+var_18]  +
push [ebp+hDC]  +
call ds:CreateCompatibleBitmap  +
mov [ebp+lParam] eax +
test eax eax +
jnz loc_101036D  +
call ds:GetLastError  +
test eax eax +
jle loc_101035D  +
and eax edi +
or eax esi +
mov ebx eax +
push ebx  +
push offset aCreatecompat_1  +
call nullsub_1  +
add esp 8 +
test ebx ebx +
jl loc_1010413  +
push [ebp+lParam]  +
push [ebp+var_8]  +
call ds:SelectObject  +
test eax eax +
jnz loc_1010397  +
push offset aSelectobjectDe  +
mov ebx 80004005h +
call nullsub_1  +
add esp 4 +
test ebx ebx +
jl loc_1010413  +
push 0CC0020h  +
push [ebp+var_1C]  +
xor eax eax +
push [ebp+var_20]  +
push eax  +
push eax  +
push [ebp+var_10]  +
push [ebp+var_14]  +
push [ebp+var_18]  +
push eax  +
push eax  +
push [ebp+var_8]  +
call ds:StretchBlt  +
test eax eax +
jnz loc_10103E0  +
call ds:GetLastError  +
test eax eax +
jle loc_10103D0  +
and eax edi +
or eax esi +
mov ebx eax +
push ebx  +
push offset aStretchbltFail  +
call nullsub_1  +
add esp 8 +
test ebx ebx +
jl loc_1010413  +
push [ebp+lParam]  +
push 0  +
push 172h  +
push [ebp+hWnd]  +
call ds:SendMessageW  +
push eax  +
push [ebp+lParam]  +
push offset aSendmessageStm  +
call nullsub_1  +
add esp 0Ch +
test eax eax +
jz loc_1010413  +
push eax  +
call ds:DeleteObject  +
cmp [ebp+hDC] 0 +
jz loc_1010425  +
push [ebp+hDC]  +
push [ebp+hWnd]  +
call ds:ReleaseDC  +
cmp [ebp+var_10] 0 +
mov esi ds:DeleteDC +
jz loc_1010436  +
push [ebp+var_10]  +
call esi  +
cmp [ebp+var_8] 0 +
jz loc_1010441  +
push [ebp+var_8]  +
call esi  +
test ebx ebx +
jge loc_1010458  +
cmp [ebp+lParam] 0 +
jz loc_1010458  +
push [ebp+lParam]  +
call ds:DeleteObject  +
and [ebp+lParam] 0 +
mov eax [ebp+arg_8] +
mov ecx [ebp+lParam] +
pop edi  +
mov [eax] ecx +
mov eax ebx +
pop esi  +
jmp loc_101046B  +
mov eax 8000FFFFh +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_8] +
push ebx  +
push esi  +
push edi  +
mov edi hModule +
xor esi esi +
mov [eax] esi +
mov eax [ebp+arg_C] +
mov [eax] esi +
movzx eax word ptr [ebp+hResInfo] +
push eax  +
movzx eax word ptr [ebp+arg_4] +
push eax  +
push edi  +
call ds:FindResourceW  +
mov [ebp+hResInfo] eax +
mov ebx 80070000h +
test eax eax +
jnz loc_10104D5  +
call ds:GetLastError  +
test eax eax +
jle loc_10104BE  +
and eax 0FFFFh +
or eax ebx +
mov esi eax +
push esi  +
push [ebp+arg_4]  +
push offset aFindresourceFa  +
call nullsub_1  +
add esp 0Ch +
test esi esi +
jl loc_101052B  +
push [ebp+hResInfo]  +
push edi  +
call ds:LoadResource  +
mov [ebp+hResData] eax +
test eax eax +
jnz loc_101050A  +
call ds:GetLastError  +
test eax eax +
jle loc_10104F7  +
and eax 0FFFFh +
or eax ebx +
mov esi eax +
push esi  +
push [ebp+arg_4]  +
push offset aLoadresourceFa  +
call nullsub_1  +
add esp 0Ch +
test esi esi +
jl loc_101052B  +
push [ebp+hResInfo]  +
push edi  +
call ds:SizeofResource  +
mov ecx [ebp+arg_C] +
push [ebp+hResData]  +
mov [ecx] eax +
call ds:LockResource  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push dword ptr [esi+4]  +
mov dword ptr [esi] offset off_1004478 +
call GdipDisposeImage  +
test byte ptr [ebp+8] 1 +
jz loc_101055B  +
push esi  +
call GdipFree  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and dword ptr [ebp-4] 0 +
push esi  +
lea eax [ebp-4] +
mov esi ecx +
push eax  +
push dword ptr [esi+4]  +
call GdipCloneImage  +
push eax  +
mov ecx esi +
call sub_100FDC6  +
push 10h  +
call GdipAlloc  +
test eax eax +
jz loc_10105A7  +
mov ecx [esi+8] +
mov edx [ebp-4] +
mov dword ptr [eax] offset off_1004478 +
mov [eax+4] edx +
mov [eax+8] ecx +
jmp loc_10105A9  +
xor eax eax +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
and [ebp+var_C] 0 +
push esi  +
lea eax [ebp+dwBytes] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+hGlobal]  +
push 1F4h  +
call sub_1010475  +
and [ebp+ppstm] 0 +
mov esi eax +
test esi esi +
jl loc_10107BA  +
push ebx  +
push edi  +
push [ebp+dwBytes]  +
push 2  +
call ds:GlobalAlloc  +
mov [ebp+hGlobal] eax +
mov ebx 0FFFFh +
mov edi 80070000h +
test eax eax +
jnz loc_1010620  +
call ds:GetLastError  +
test eax eax +
jle loc_101060D  +
and eax ebx +
or eax edi +
mov esi eax +
push esi  +
push [ebp+dwBytes]  +
push offset aGlobalallocFai  +
call nullsub_1  +
add esp 0Ch +
test esi esi +
jl loc_10107AB  +
push [ebp+hGlobal]  +
call ds:GlobalLock  +
mov [ebp+hMem] eax +
test eax eax +
jnz loc_1010648  +
call ds:GetLastError  +
test eax eax +
jle loc_1010646  +
and eax ebx +
or eax edi +
mov esi eax +
test esi esi +
jl loc_10107AB  +
push [ebp+dwBytes]  +
push [ebp+var_14]  +
push [ebp+hMem]  +
call memcpy  +
add esp 0Ch +
lea eax [ebp+ppstm] +
push eax  +
push 1  +
push [ebp+hGlobal]  +
call ds:CreateStreamOnHGlobal  +
mov esi eax +
test esi esi +
jge loc_101069B  +
push esi  +
push offset aCreatestreamon  +
call nullsub_1  +
add esp 8 +
push [ebp+hMem]  +
call ds:GlobalUnlock  +
push [ebp+hGlobal]  +
call ds:GlobalFree  +
jmp loc_10107AB  +
push [ebp+hGlobal]  +
call ds:GlobalUnlock  +
test eax eax +
jnz loc_10106B8  +
call ds:GetLastError  +
test eax eax +
jle loc_10106B6  +
and eax ebx +
or eax edi +
mov esi eax +
test esi esi +
jl loc_10107AB  +
push 10h  +
call GdipAlloc  +
test eax eax +
jz loc_10106DC  +
push 0  +
push [ebp+ppstm]  +
mov ecx eax +
call sub_100FDE2  +
mov [ebp+hGlobal] eax +
jmp loc_10106E0  +
and [ebp+hGlobal] 0 +
lea ecx [ebp+var_C] +
call sub_100517A  +
mov ecx [ebp+hGlobal] +
mov [ebp+var_C] ecx +
test ecx ecx +
jnz loc_1010704  +
push offset aInsufficientMe  +
call nullsub_1  +
add esp 4 +
mov esi 8007000Eh +
test esi esi +
jl loc_10107AB  +
push [ebp+arg_4]  +
lea eax [ebp+hGlobal] +
push eax  +
mov [ebp+hGlobal] 0FF000000h +
call sub_100FE23  +
test eax eax +
jz loc_101073B  +
push eax  +
push offset aGdiplusBitmapG  +
call nullsub_1  +
add esp 8 +
test eax eax +
jle loc_1010739  +
and eax ebx +
or eax edi +
mov esi eax +
test esi esi +
jl loc_10107AB  +
cmp [ebp+arg_8] 0 +
jnz loc_101074B  +
cmp [ebp+arg_C] 0 +
jz loc_10107AB  +
lea eax [ebp+var_2C] +
push eax  +
mov eax [ebp+arg_4] +
push 18h  +
push dword ptr [eax]  +
call ds:GetObjectW  +
test eax eax +
jz loc_101078D  +
push [ebp+var_24]  +
push [ebp+var_28]  +
push offset aSourceBitmapIs  +
call nullsub_1  +
mov eax [ebp+arg_8] +
add esp 0Ch +
test eax eax +
jz loc_101077F  +
mov ecx [ebp+var_28] +
mov [eax] ecx +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_10107AB  +
mov ecx [ebp+var_24] +
mov [eax] ecx +
jmp loc_10107AB  +
call ds:GetLastError  +
test eax eax +
jle loc_101079B  +
and eax ebx +
or eax edi +
mov esi eax +
push esi  +
push offset aGetobjectFaile  +
call nullsub_1  +
add esp 8 +
mov eax [ebp+ppstm] +
pop edi  +
pop ebx  +
test eax eax +
jz loc_10107BA  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp+var_C] +
call sub_100517A  +
mov eax esi +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
push 5  +
push 64h  +
call sub_100BFBE  +
mov dword ptr [esi] offset off_1004B80 +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+8] +
cmp eax 0FFFFFFFCh +
jz loc_1010812  +
cmp eax 0FFFFFFFEh +
jz loc_1010812  +
and dword ptr [ecx+5Ch] 0 +
jmp loc_1010821  +
push offset aColor_manage_0  +
push offset aMshelpWindow_0  +
call sub_10121A8  +
xor eax eax +
pop ebp  +
retn 4  +
***
call sub_10121A8  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ecx] +
push edi  +
push 0FFFFFFF0h  +
push esi  +
mov edi esi +
call ds:GetWindowLongW  +
test eax 40000000h +
jz loc_1010867  +
push esi  +
call ds:GetParent  +
jmp loc_1010870  +
push 4  +
push esi  +
call ds:GetWindow  +
mov esi eax +
test esi esi +
jnz loc_101084C  +
mov eax [ebp+arg_0] +
mov [eax] edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
lea esi [ecx+4] +
push 2  +
mov ecx esi +
call sub_100BAAA  +
push offset dword_1001B28  +
mov ecx esi +
call sub_100BAEB  +
xor eax eax +
inc eax  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
push edi  +
mov edi ecx +
lea eax [ebp+var_1] +
push eax  +
lea esi [edi+4] +
push dword ptr [esi]  +
mov byte ptr [ebp+var_1] 0 +
call sub_1010105  +
test eax eax +
jl loc_101090C  +
cmp byte ptr [ebp+var_1] 0 +
jz loc_10108D7  +
mov eax 80040005h +
test eax eax +
jl loc_101090C  +
mov ecx [edi+60h] +
push dword ptr [esi]  +
mov eax [ecx] +
call dword ptr [eax+4]  +
test eax eax +
jl loc_101090C  +
push 69h  +
pop edi  +
push 3  +
mov ecx esi +
call sub_100BAAA  +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
call sub_1010843  +
push 3  +
push dword ptr [eax]  +
call ds:ShowWindow  +
jmp loc_101091E  +
push eax  +
push eax  +
call sub_100C073  +
push eax  +
push dword ptr [esi]  +
call sub_100FF4F  +
or edi 0FFFFFFFFh +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
call sub_100BD1A  +
mov edi eax +
test edi edi +
jnz loc_1010959  +
lea eax [ebp+arg_4] +
push eax  +
lea ecx [esi+4] +
call sub_1010843  +
push 3  +
push dword ptr [eax]  +
call ds:ShowWindow  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+1Ch] 0 +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
jnz loc_10109EB  +
mov ebx [ebp+18h] +
xor edi edi +
inc edi  +
cmp dword ptr [ebp+0Ch] 110h +
jnz loc_101099F  +
push dword ptr [ebp+14h]  +
mov [esi+5Ch] edi +
push dword ptr [ebp+10h]  +
call sub_1010929  +
mov [ebx] eax +
cmp dword ptr [esi+5Ch] 0 +
jz loc_10109D1  +
mov eax edi +
jmp loc_10109ED  +
cmp dword ptr [ebp+0Ch] 4Eh +
jnz loc_10109BC  +
mov eax [ebp+14h] +
cmp dword ptr [eax+4] 0C8h +
jnz loc_10109D1  +
push eax  +
mov [esi+5Ch] edi +
call sub_10107F7  +
jmp loc_1010993  +
***
cmp dword ptr [ebp+0Ch] 53h +
jnz loc_10109D1  +
push dword ptr [ebp+14h]  +
mov [esi+5Ch] edi +
call sub_101082C  +
mov [ebx] edi +
jmp loc_1010995  +
***
push 0  +
push ebx  +
push dword ptr [ebp+14h]  +
mov ecx esi +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1008E91  +
test eax eax +
jnz loc_101099B  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
push 0D2h  +
push 0E1h  +
call sub_100BFBE  +
mov dword ptr [esi] offset off_1004BAC +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
retn   +
***
call sub_100BAAA  +
xor eax eax +
inc eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi ecx +
mov ecx [edi+60h] +
mov eax [ecx] +
lea esi [edi+4] +
push dword ptr [esi]  +
call dword ptr [eax+4]  +
test eax eax +
jl loc_1010A87  +
push 3  +
mov ecx esi +
call sub_100BAAA  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_1010843  +
push 3  +
push dword ptr [eax]  +
call ds:ShowWindow  +
push 69h  +
mov ecx edi +
call sub_100B9C6  +
jmp loc_1010A96  +
push eax  +
push eax  +
call sub_100C073  +
push eax  +
push dword ptr [esi]  +
call sub_100FF4F  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
mov esi ecx +
cmp [ebp+1Ch] ebx +
jnz loc_1010B10  +
cmp dword ptr [ebp+0Ch] 111h +
mov edi [ebp+18h] +
jnz loc_1010AF7  +
mov eax [ebp+10h] +
shr eax 10h +
xor ecx ecx +
cmp cx ax +
jnz loc_1010AF7  +
mov eax 0C8h +
mov ecx eax +
cmp cx [ebp+10h] +
jnz loc_1010AF7  +
push dword ptr [ebp+14h]  +
mov ecx esi +
push eax  +
push ebx  +
mov dword ptr [esi+5Ch] 1 +
call sub_1010A43  +
mov [edi] ebx +
cmp [esi+5Ch] ebx +
jz loc_1010AF7  +
xor eax eax +
inc eax  +
jmp loc_1010B12  +
push ebx  +
push edi  +
push dword ptr [ebp+14h]  +
mov ecx esi +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1008E91  +
test eax eax +
jnz loc_1010AF2  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jnz loc_1010B31  +
mov eax 80070057h +
jmp loc_1010B42  +
cmp dword ptr [eax] 2Ch +
jnz loc_1010B2A  +
and dword ptr [eax+1Ch] 0 +
lea ecx [eax+4] +
call sub_1004E78  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_1010B60  +
push eax  +
call free  +
and dword ptr [esi] 0 +
pop ecx  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jl loc_1010B89  +
cmp eax [ecx+4] +
jge loc_1010B89  +
mov ecx [ecx] +
lea eax [ecx+eax*2] +
pop ebp  +
retn 4  +
***
push 0  +
push 0  +
push 1  +
push 0C000008Ch  +
call ds:RaiseException  +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
xor edi edi +
cmp esi edi +
jnz loc_1010BD8  +
mov eax 80070057h +
jmp loc_1010C1F  +
mov eax [esi] +
cmp eax edi +
jz loc_1010C1D  +
cmp eax 2Ch +
jnz loc_1010BD1  +
cmp [esi+24h] edi +
jle loc_1010C08  +
push ebx  +
lea ebx [esi+20h] +
push edi  +
mov ecx ebx +
call loc_1010B6F  +
movzx eax word ptr [eax] +
push dword ptr [ebp+0Ch]  +
push eax  +
call ds:UnregisterClassA  +
inc edi  +
cmp edi [esi+24h] +
jl loc_1010BEC  +
pop ebx  +
lea ecx [esi+20h] +
call sub_1010B4B  +
lea eax [esi+4] +
push eax  +
call ds:DeleteCriticalSection  +
and dword ptr [esi] 0 +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+18h] +
call sub_1004E61  +
xor eax eax +
mov [esi+30h] eax +
mov [esi+34h] eax +
mov [esi+38h] eax +
mov eax esi +
pop esi  +
retn   +
***
call ds:DeleteCriticalSection  +
lea ecx [esi+30h] +
pop esi  +
jmp sub_1010B4B  +
***
add [ebx-3974FFDAh] eax +
pop esi  +
retn   +
***
push ebp  +
mov ebp esp +
sub esp 98h +
mov eax dword_1014484 +
xor eax ebp +
mov [ebp-4] eax +
push esi  +
mov esi ecx +
call sub_1010C2A  +
mov eax 1000000h +
push 94h  +
mov [esi+8] eax +
mov [esi+4] eax +
lea eax [ebp-98h] +
push 0  +
push eax  +
mov dword ptr [esi] 3Ch +
mov byte ptr [esi+0Ch] 0 +
call memset  +
add esp 0Ch +
lea eax [ebp-98h] +
push eax  +
mov dword ptr [ebp-98h] 94h +
call ds:GetVersionExA  +
cmp dword ptr [ebp-88h] 2 +
jnz loc_1010D08  +
cmp dword ptr [ebp-94h] 5 +
jb loc_1010D29  +
jmp loc_1010D25  +
cmp dword ptr [ebp-88h] 1 +
jnz loc_1010D29  +
cmp dword ptr [ebp-94h] 4 +
ja loc_1010D25  +
jnz loc_1010D29  +
cmp dword ptr [ebp-90h] 0 +
jbe loc_1010D29  +
mov byte ptr [esi+0Ch] 1 +
lea ecx [esi+18h] +
mov dword ptr [esi+10h] 800h +
mov dword ptr [esi+14h] offset dword_1004BE8 +
call sub_1004E78  +
test eax eax +
jge loc_1010D4A  +
mov byte_10144E8 1 +
mov ecx [ebp-4] +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_10113D3  +
leave   +
retn   +
***
push eax  +
call ds:DeleteCriticalSection  +
and dword ptr [esi] 0 +
pop ebx  +
pop esi  +
retn   +
***
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+10h] +
mov ecx edi +
call sub_1004E61  +
and dword ptr [esi] 0 +
mov ecx edi +
mov dword ptr [esi+4] 1000000h +
mov dword ptr [esi+8] offset dword_10125E0 +
mov dword ptr [esi+0Ch] offset dword_10125E0 +
call sub_1004E78  +
test eax eax +
jge loc_1010E02  +
mov byte_10144E8 1 +
jmp loc_1010E08  +
mov dword ptr [esi] 28h +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_1014648 +
push [ebp+lpMem]  +
cmp eax 1 +
jnz loc_1010E35  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
jmp loc_1010E3C  +
push eax  +
call dword_101464C  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebx  +
push edi  +
push offset aKernel32_dll  +
call ds:LoadLibraryA  +
mov edi eax +
xor ebx ebx +
cmp edi ebx +
jnz loc_1010E63  +
xor eax eax +
jmp loc_1010F23  +
push esi  +
mov esi ds:GetProcAddress +
push offset aIsprocessorfea  +
push edi  +
call esi  +
cmp eax ebx +
jz loc_1010E7C  +
push 0Ch  +
call eax  +
jmp loc_1010E7E  +
xor eax eax +
cmp eax ebx +
jnz loc_1010E8F  +
xor eax eax +
inc eax  +
mov dword_1014648 eax +
jmp loc_1010F22  +
push offset aInterlockedpop  +
push edi  +
call esi  +
push offset aInterlockedpus  +
push edi  +
mov dword_1014650 eax +
call esi  +
push offset aInterlockedcom  +
push edi  +
mov dword_101464C eax +
call esi  +
mov dword_1014654 eax +
cmp dword_101464C ebx +
jz loc_1010F20  +
cmp dword_1014650 ebx +
jz loc_1010F20  +
cmp eax ebx +
jz loc_1010F20  +
mov eax large fs:18h +
mov esi [eax+30h] +
add esi 34h +
mov eax [esi] +
cmp eax ebx +
jnz loc_1010F16  +
push 8  +
push ebx  +
mov ebx ds:GetProcessHeap +
call ebx  +
push eax  +
call ds:HeapAlloc  +
mov edi eax +
xor eax eax +
cmp edi eax +
jz loc_1010F20  +
push eax  +
push edi  +
push esi  +
mov [edi] eax +
mov [edi+4] eax +
call dword_1014654  +
test eax eax +
jz loc_1010F14  +
push edi  +
push 0  +
call ebx  +
push eax  +
call ds:HeapFree  +
mov eax [esi] +
mov dword_1014648 eax +
xor eax eax +
inc eax  +
jmp loc_1010F22  +
xor eax eax +
pop esi  +
pop edi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_1010E12  +
***
cmp dword_1014648 0 +
push esi  +
jnz loc_1010F4E  +
call sub_1010E45  +
test eax eax +
jz loc_1010F91  +
mov eax dword_1014648 +
cmp eax 1 +
jnz loc_1010F6F  +
push 0Dh  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
test eax eax +
jz loc_1010F91  +
pop esi  +
retn   +
push eax  +
call dword_1014650  +
test eax eax +
jnz loc_1010FD9  +
push 40h  +
mov eax 1000h +
push eax  +
push eax  +
push 0  +
call ds:VirtualAlloc  +
mov esi eax +
test esi esi +
jnz loc_1010F95  +
xor eax eax +
pop esi  +
retn   +
mov eax [esi] +
push edi  +
push dword_1014648  +
call dword_1014650  +
mov edi eax +
test edi edi +
jz loc_1010FBA  +
push 8000h  +
push 0  +
push esi  +
call ds:VirtualFree  +
jmp loc_1010FD6  +
mov edi esi +
add esi 0FF0h +
push edi  +
push dword_1014648  +
call dword_101464C  +
add edi 10h +
cmp edi esi +
jb loc_1010FC2  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_1011006  +
test eax eax +
jnz loc_101100B  +
mov ecx [esi] +
test ecx ecx +
jz loc_1011003  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_1010FF7  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_101467C +
push offset dword_101466C  +
push dword_1014678  +
mov dword_101466C eax +
push offset unk_101465C  +
push offset unk_1014660  +
push offset unk_1014658  +
call ds:__wgetmainargs  +
add esp 14h +
mov dword_1014668 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+var_1C] ebx +
mov [ebp+ms_exc.disabled] ebx +
lea eax [ebp+StartupInfo] +
push eax  +
call ds:GetStartupInfoW  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [ebp+ms_exc.disabled] 1 +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp+var_20] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
cmp eax ebx +
jz loc_10110AE  +
cmp eax esi +
jnz loc_10110A1  +
xor esi esi +
inc esi  +
mov [ebp+var_20] esi +
jmp loc_10110B1  +
push 3E8h  +
call ds:Sleep  +
jmp loc_1011088  +
xor esi esi +
inc esi  +
mov eax dword_10149B0 +
cmp eax esi +
jnz loc_10110C4  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_10110F3  +
mov eax dword_10149B0 +
test eax eax +
jnz loc_10110ED  +
mov dword_10149B0 esi +
push offset dword_1001408  +
push offset dword_10013FC  +
call sub_1010FEA  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10110F3  +
jmp loc_1011217  +
mov dword_1014674 esi +
mov eax dword_10149B0 +
cmp eax esi +
jnz loc_1011117  +
push offset dword_10013F8  +
push offset dword_10013E0  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_10149B0 2 +
cmp [ebp+var_20] ebx +
jnz loc_1011124  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_10149C0 ebx +
jz loc_1011145  +
push offset dword_10149C0  +
call sub_1011709  +
pop ecx  +
test eax eax +
jz loc_1011145  +
push ebx  +
push 2  +
push ebx  +
call dword_10149C0  +
mov eax ds:_wcmdln +
cmp [eax] ebx +
jz loc_1011217  +
mov eax [eax] +
mov [ebp+var_24] eax +
movzx ecx word ptr [eax] +
cmp cx 20h +
ja $LN58  +
cmp cx bx +
jz loc_101116A  +
cmp [ebp+var_1C] ebx +
jnz $LN58  +
movzx ecx word ptr [eax] +
cmp cx bx +
jz loc_101117F  +
cmp cx 20h +
ja loc_101117F  +
inc eax  +
inc eax  +
mov [ebp+var_24] eax +
jmp loc_101116A  +
test byte ptr [ebp+StartupInfo.dwFlags] 1 +
jz loc_101118B  +
movzx ecx [ebp+StartupInfo.wShowWindow] +
jmp loc_101118E  +
push 0Ah  +
pop ecx  +
push ecx  +
push eax  +
push ebx  +
push 1000000h  +
call _wWinMain@16  +
mov dword_1014670 eax +
cmp dword_1014664 ebx +
jnz $LN59  +
push eax  +
call ds:exit  +
cmp cx 22h +
jnz loc_10111C0  +
xor ecx ecx +
cmp [ebp+var_1C] ebx +
setz cl  +
mov [ebp+var_1C] ecx +
inc eax  +
inc eax  +
jmp loc_1011154  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-28h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-28h] +
mov dword_1014670 eax +
xor ebx ebx +
cmp dword_1014664 ebx +
jnz $LN59  +
push eax  +
call ds:_exit  +
cmp dword_1014674 ebx +
jnz loc_1011202  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_1014670 +
jmp loc_1011223  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_1011240  +
xor eax eax +
jmp loc_101128D  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_101123C  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_101127A  +
cmp ecx 20Bh +
jnz loc_101123C  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_101123C  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_1011288  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_101123C  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 2  +
mov dword_1014664 eax +
call sub_101180F  +
push eax  +
call ds:__set_app_type  +
or dword_10149B8 0FFFFFFFFh +
or dword_10149BC 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_1014684 +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_1014680 +
mov [eax] ecx +
call sub_100BA2C  +
cmp dword_10144A8 0 +
jnz loc_10112E6  +
push offset sub_100BA2C  +
call ds:__setusermatherr  +
pop ecx  +
call sub_1011791  +
xor eax eax +
retn   +
***
call sub_101184E  +
jmp ___tmainCRTStartup  +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_10113D3  +
push offset dword_1014484  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
cmp ecx dword_1014484 +
jnz loc_10113DE  +
retn 0  +
jmp loc_10118EF  +
***
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb cs20  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp+0] eax +
retn   +
sub eax 1000h +
test [eax] eax +
jmp cs10  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
push esi  +
xor esi esi +
cmp ecx esi +
jbe loc_1011457  +
push 0FFFFFFE0h  +
xor edx edx +
pop eax  +
div  ecx +
cmp eax [ebp+arg_8] +
jnb loc_1011457  +
call _errno  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 0Ch +
call sub_1011A8C  +
add esp 14h +
xor eax eax +
jmp loc_1011466  +
imul ecx [ebp+arg_8] +
push ecx  +
push [ebp+arg_0]  +
call realloc  +
pop ecx  +
pop ecx  +
pop esi  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
pop ecx  +
retn   +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
call sub_1011485  +
neg eax  +
sbb eax eax +
neg eax  +
pop ecx  +
dec eax  +
pop ebp  +
retn   +
***
push offset loc_101137A  +
push large dword ptr fs:0  +
mov eax [esp+10h] +
mov [esp+10h] ebp +
lea ebp [esp+10h] +
sub esp eax +
push ebx  +
push esi  +
push edi  +
mov eax dword_1014484 +
xor [ebp-4] eax +
xor eax ebp +
mov [ebp-1Ch] eax +
push eax  +
mov [ebp-18h] esp +
push dword ptr [ebp-8]  +
mov eax [ebp-4] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov [ebp-8] eax +
lea eax [ebp-10h] +
mov large fs:0 eax +
retn   +
***
mov ecx [ebp-1Ch] +
xor ecx ebp +
call sub_10113D3  +
jmp __SEH_epilog4  +
***
push ecx  +
lea ecx [esp+8] +
sub ecx eax +
and ecx 0Fh +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp __alloca_probe  +
***
push ecx  +
lea ecx [esp+8] +
sub ecx eax +
and ecx 7 +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp __alloca_probe  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_101164E  +
cmp dword ptr [eax+10h] 3 +
jnz loc_101164E  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_1011648  +
cmp eax 19930521h +
jz loc_1011648  +
cmp eax 19930522h +
jz loc_1011648  +
cmp eax 1994000h +
jnz loc_101164E  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset byte_1011610+1)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_1011696  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_1011692  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_10116FD  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_10116F5  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_10116FF  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_10116E5  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_1011680  +
pop ecx  +
test eax eax +
jz loc_1011766  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_10116C0  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1011766  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_101176F  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1011802  +
cmp ecx 0FFFFFFFFh +
jz loc_1011802  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_10117FB  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_10117FB  +
cmp edx 10000000h +
jnb loc_10117FB  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_10117FB  +
jmp loc_10117F6  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_1011844  +
push eax  +
call sub_10117A9  +
test eax eax +
jz loc_1011844  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_1011839  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_1011844  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1014484 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_1011880  +
test eax ebx +
jz loc_1011880  +
not eax  +
mov dword_1014488 eax +
jmp loc_10118DB  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_10118C7  +
test dword_1014484 ebx +
jnz loc_10118CC  +
mov esi 0BB40E64Fh +
mov dword_1014484 esi +
not esi  +
mov dword_1014488 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_1014788 eax +
mov dword_1014784 ecx +
mov dword_1014780 edx +
mov dword_101477C ebx +
mov dword_1014778 esi +
mov dword_1014774 edi +
mov word_10147A0 ss +
mov word_1014794 cs +
mov word_1014770 ds +
mov word_101476C es +
mov word_1014768 fs +
mov word_1014764 gs +
pushf   +
pop dword_1014798  +
mov eax [ebp+0] +
mov dword_101478C eax +
mov eax [ebp+4] +
mov dword_1014790 eax +
lea eax [ebp+8] +
mov dword_101479C eax +
mov eax [ebp-320h] +
mov dword_10146D8 10001h +
mov eax dword_1014790 +
mov dword_1014694 eax +
mov dword_1014688 0C0000409h +
mov dword_101468C 1 +
mov eax dword_1014484 +
mov [ebp-328h] eax +
mov eax dword_1014488 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2D0h +
mov eax dword_1014484 +
xor eax ebp +
mov [ebp+var_4] eax +
mov [ebp+var_220] eax +
mov [ebp+var_224] ecx +
mov [ebp+var_228] edx +
mov [ebp+var_22C] ebx +
mov [ebp+var_230] esi +
mov [ebp+var_234] edi +
mov [ebp+var_208] ss +
mov [ebp+var_214] cs +
mov [ebp+var_238] ds +
mov [ebp+var_23C] es +
mov [ebp+var_240] fs +
mov [ebp+var_244] gs +
pushf   +
pop [ebp+var_210]  +
mov eax [ebp+4] +
mov [ebp+var_218] eax +
lea eax [ebp+4] +
mov [ebp+var_2D0] 10001h +
mov [ebp+var_20C] eax +
mov eax [eax-4] +
push offset OutputString  +
mov [ebp+var_21C] eax +
call ds:OutputDebugStringA  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10113D3  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_10119E1  +
***
mov edi edi +
push esi  +
push 73747267h  +
mov esi ecx +
call sub_10090DD  +
mov [esi] eax +
mov dword ptr [esi+4] offset unk_10149A4 +
mov eax esi +
pop esi  +
retn   +
***
mov eax [ecx+4] +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_1011AF2  +
sub eax ecx +
sar eax 1 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] offset unk_10149A4 +
jz loc_1011B26  +
cmp [ebp+arg_0] offset unk_10149A6 +
jz loc_1011B26  +
push [ebp+arg_0]  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_1011B64  +
cmp [ebp+arg_4] eax +
jz loc_1011B60  +
movzx edx word ptr [ebx] +
test dx dx +
jz loc_1011B60  +
mov [ecx] dx +
inc ecx  +
inc ecx  +
inc ebx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_1011B43  +
test esi esi +
jnz loc_1011B6C  +
dec ecx  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
xor edx edx +
mov [ecx] dx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1011B7A  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
shr esi 1 +
jz loc_1011BB0  +
test [ebp+arg_8] 1000h +
jz loc_1011BB0  +
mov edx [ebp+arg_4] +
lea eax [edi+ecx*2] +
mov [edx] eax +
mov edx esi +
sub edx ecx +
xor ecx ecx +
mov [ebx] edx +
mov [eax] cx +
test [ebp+arg_8] 400h +
jz loc_1011BF8  +
mov eax [ebp+arg_8] +
push [ebp+arg_0]  +
and eax 0FFh +
push eax  +
push edi  +
mov [ebp+var_4] eax +
call memset  +
add esp 0Ch +
cmp [ebp+var_4] 0 +
jnz loc_1011BE0  +
mov eax [ebp+arg_4] +
mov [eax] edi +
mov [ebx] esi +
jmp loc_1011BF8  +
test esi esi +
jbe loc_1011C11  +
mov ecx [ebp+arg_4] +
lea eax [edi+esi*2-2] +
mov [ecx] eax +
xor ecx ecx +
mov dword ptr [ebx] 1 +
mov [eax] cx +
test esi esi +
jbe loc_1011C11  +
test [ebp+arg_8] 800h +
jz loc_1011C11  +
mov eax [ebp+arg_4] +
mov [eax] edi +
xor eax eax +
mov [ebx] esi +
mov [edi] ax +
xor eax eax +
pop esi  +
leave   +
retn 0Ch  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] ecx +
mov esi 400h +
xor ecx ecx +
push 2  +
pop edx  +
mov eax esi +
mul  edx +
seto cl  +
mov ebx esi +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
jmp loc_1011C90  +
push ebx  +
push edi  +
push [ebp+uID]  +
push [ebp+hInstance]  +
call ds:LoadStringW  +
test eax eax +
jz loc_1011CA3  +
mov ecx ebx +
sub ecx eax +
cmp ecx 1 +
jg loc_1011CB1  +
push edi  +
call ??3@YAXPAX@Z  +
add ebx esi +
xor ecx ecx +
push 2  +
pop edx  +
mov eax ebx +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov edi eax +
pop ecx  +
test edi edi +
jnz loc_1011C56  +
mov eax 8007000Eh +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax 80004005h +
jmp loc_1011C9C  +
mov esi [ebp+var_4] +
push dword ptr [esi+4]  +
mov ecx esi +
call sub_1011B06  +
mov [esi+4] edi +
xor eax eax +
jmp loc_1011C9C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
test edx edx +
jz loc_1011CE0  +
cmp edx 7FFFFFFFh +
jbe loc_1011CE5  +
mov eax 80070057h +
test eax eax +
jl loc_1011CFB  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_1011B2F  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov edx [ebp+arg_14] +
push esi  +
xor esi esi +
and edx 100h +
push edi  +
mov edi [ebp+arg_4] +
mov eax 80070057h +
jz loc_1011D38  +
mov ecx [ebp+arg_0] +
test ecx ecx +
jnz loc_1011D2C  +
test edi edi +
jnz loc_1011D34  +
cmp edi 7FFFFFFFh +
jbe loc_1011D4B  +
mov esi eax +
jmp loc_1011D4B  +
xor esi esi +
test edi edi +
jz loc_1011D46  +
cmp edi 7FFFFFFFh +
jbe loc_1011D48  +
mov esi eax +
mov ecx [ebp+arg_0] +
test esi esi +
jl loc_1011DC8  +
push ebx  +
xor esi esi +
mov ebx edi +
mov [ebp+arg_4] ecx +
mov [ebp+var_4] ebx +
cmp edx esi +
jz loc_1011D6A  +
cmp [ebp+arg_8] esi +
jnz loc_1011D6A  +
mov [ebp+arg_8] offset dword_1001B28 +
test [ebp+arg_14] 0FFFFE000h +
jz loc_1011DD0  +
mov esi eax +
test edi edi +
jz loc_1011D7E  +
xor eax eax +
mov [ecx] ax +
test [ebp+arg_14] 1C00h +
jz loc_1011DA6  +
test edi edi +
jz loc_1011DA6  +
push [ebp+arg_14]  +
lea eax [ebp+arg_4] +
push eax  +
lea eax [edi+edi] +
mov edi [ebp+arg_0] +
push eax  +
lea ebx [ebp+var_4] +
xor ecx ecx +
call sub_1011B86  +
mov ebx [ebp+var_4] +
test esi esi +
jge loc_1011DB2  +
cmp esi 8007007Ah +
jnz loc_1011DC7  +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_1011DBE  +
mov ecx [ebp+arg_4] +
mov [eax] ecx +
mov eax [ebp+arg_10] +
test eax eax +
jz loc_1011DC7  +
mov [eax] ebx +
pop ebx  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 18h  +
test edi edi +
jnz loc_1011DE9  +
mov edx [ebp+arg_8] +
cmp [edx] di +
jz loc_1011DB2  +
mov esi ecx +
neg esi  +
sbb esi esi +
and esi 23h +
add esi eax +
jmp loc_1011D7E  +
and [ebp+arg_4] 0 +
push 7FFFFFFEh  +
lea eax [ebp+arg_4] +
push eax  +
mov eax [ebp+arg_8] +
mov edx edi +
call sub_1011B2F  +
mov ecx [ebp+arg_0] +
mov esi eax +
mov eax [ebp+arg_4] +
mov ebx edi +
sub ebx eax +
lea ecx [ecx+eax*2] +
mov [ebp+arg_4] ecx +
mov [ebp+var_4] ebx +
test esi esi +
jl loc_1011D7E  +
mov eax [ebp+arg_14] +
test eax 200h +
jz loc_1011DB2  +
cmp ebx 1 +
jbe loc_1011DB2  +
lea ecx [ebx+ebx] +
cmp ecx 2 +
jbe loc_1011DB2  +
add ecx 0FFFFFFFEh +
and eax 0FFh +
push ecx  +
push eax  +
mov eax [ebp+arg_4] +
add eax 2 +
push eax  +
call memset  +
add esp 0Ch +
jmp loc_1011DB2  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1011E71  +
cmp ecx 7FFFFFFFh +
jbe loc_1011E76  +
mov eax 80070057h +
test eax eax +
jl loc_1011EB2  +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_C]  +
mov edi [ebp+arg_0] +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_1011EA2  +
cmp eax esi +
ja loc_1011EA2  +
jnz loc_1011EAD  +
jmp loc_1011EA7  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
xor esi esi +
push edi  +
mov edi [ebp+arg_0] +
mov [ebp+var_4] ecx +
mov [ebp+var_C] esi +
mov [ebp+var_8] esi +
cmp edi esi +
jz loc_1011F90  +
cmp [edi] si +
jz loc_1011F90  +
mov eax [ecx+4] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx si +
jnz loc_1011EEA  +
sub eax edx +
sar eax 1 +
mov ecx eax +
mov eax edi +
lea edx [eax+2] +
mov di [eax] +
inc eax  +
inc eax  +
cmp di si +
jnz loc_1011EFF  +
sub eax edx +
sar eax 1 +
lea edi [eax+ecx+1] +
push ebx  +
xor ecx ecx +
push 2  +
pop edx  +
mov eax edi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
mov ebx eax +
mov esi ebx +
neg esi  +
sbb esi esi +
and esi 7FF8FFF2h +
add esi 8007000Eh +
pop ecx  +
js loc_1011F84  +
push 0  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
mov eax [ebp+var_4] +
push dword ptr [eax+4]  +
push edi  +
push ebx  +
call sub_1011D04  +
mov esi eax +
test esi esi +
jl loc_1011F84  +
push [ebp+arg_0]  +
push [ebp+var_8]  +
push [ebp+var_C]  +
call sub_1011CCA  +
mov esi eax +
test esi esi +
jl loc_1011F84  +
mov edi [ebp+var_4] +
push dword ptr [edi+4]  +
mov ecx edi +
call sub_1011B06  +
mov [edi+4] ebx +
xor ebx ebx +
jmp loc_1011F87  +
mov edi [ebp+var_4] +
push ebx  +
mov ecx edi +
call sub_1011B06  +
pop ebx  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
push esi  +
push edi  +
mov edi ecx +
xor esi esi +
mov [ebp+var_4] edi +
test eax eax +
jz loc_1012027  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1011FB6  +
sub eax edx +
push ebx  +
sar eax 1 +
lea ebx [eax+1] +
xor ecx ecx +
push 2  +
pop edx  +
mov eax ebx +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
mov edi eax +
mov esi edi +
neg esi  +
sbb esi esi +
and esi 7FF8FFF2h +
add esi 8007000Eh +
pop ecx  +
js loc_1012019  +
push [ebp+arg_0]  +
push ebx  +
push edi  +
call sub_1011CCA  +
mov esi eax +
test esi esi +
jl loc_1012019  +
mov ebx [ebp+var_4] +
push dword ptr [ebx+4]  +
mov ecx ebx +
call sub_1011B06  +
mov [ebx+4] edi +
xor edi edi +
jmp loc_101201C  +
mov ebx [ebp+var_4] +
push edi  +
mov ecx ebx +
call sub_1011B06  +
pop ebx  +
jmp loc_1012036  +
push dword ptr [edi+4]  +
call sub_1011B06  +
mov dword ptr [edi+4] offset unk_10149A4 +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov eax 100h +
push edi  +
mov edi eax +
jmp loc_101207B  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push edi  +
push esi  +
call sub_1011E5B  +
test eax eax +
jge loc_101209A  +
test esi esi +
jz loc_101206F  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
add edi edi +
cmp edi 19000h +
jg loc_1012098  +
mov eax edi +
push 2  +
xor ecx ecx +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
mov esi eax +
pop ecx  +
test esi esi +
jnz loc_1012053  +
jmp loc_101209A  +
xor esi esi +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
push edi  +
lea eax [ebp+arg_8] +
mov [ebp+Arguments] eax +
xor esi esi +
lea eax [ebp+Arguments] +
push eax  +
push esi  +
lea eax [ebp+hMem] +
push eax  +
push esi  +
push esi  +
push [ebp+lpSource]  +
mov [ebp+hMem] esi +
push 500h  +
call ds:FormatMessageW  +
mov [ebp+Arguments] esi +
cmp eax esi +
jz loc_10120F8  +
push [ebp+hMem]  +
mov ecx [ebp+arg_0] +
call sub_1011F9D  +
mov edi eax +
cmp [ebp+hMem] esi +
jz loc_101210E  +
push [ebp+hMem]  +
call ds:LocalFree  +
jmp loc_101210E  +
call ds:GetLastError  +
cmp eax esi +
jle loc_101210C  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_4]  +
mov edi ecx +
push [ebp+arg_0]  +
call sub_1012043  +
mov ebx eax +
mov esi ebx +
neg esi  +
sbb esi esi +
and esi 7FF8FFF2h +
add esi 8007000Eh +
js loc_1012151  +
push dword ptr [edi+4]  +
mov ecx edi +
call sub_1011B06  +
mov [edi+4] ebx +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
call sub_1012119  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_101218E  +
cmp word ptr [eax] 0 +
mov ecx eax +
jnz loc_1012193  +
mov ecx offset aNull +
mov eax [ebp+arg_0] +
mov [eax+4] ecx +
mov dword ptr [eax] 2 +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
and [ebp+ppv] 0 +
push ebx  +
push edi  +
lea eax [ebp+ppv] +
push eax  +
push offset riid  +
push 17h  +
xor ebx ebx +
push ebx  +
push offset stru_1004D1C  +
call ds:CoCreateInstance  +
mov edi eax +
test edi edi +
jl loc_101221F  +
push [ebp+arg_0]  +
call ds:SysAllocString  +
mov ebx eax +
test ebx ebx +
jnz loc_10121EB  +
mov edi 8007000Eh +
jmp loc_101221F  +
and [ebp+var_C] 0 +
push [ebp+arg_4]  +
xor eax eax +
lea edi [ebp+var_8] +
stos   +
lea eax [ebp+var_C] +
push eax  +
call sub_101217A  +
lea eax [ebp+var_C] +
push eax  +
push 1  +
push 38Fh  +
push 0  +
call WinSqmAddToStream  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push ebx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov edi eax +
mov eax [ebp+ppv] +
test eax eax +
jz loc_101222C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push ebx  +
call ds:SysFreeString  +
mov eax edi +
pop edi  +
pop ebx  +
leave   +
retn 8  +
***
jmp fword ptr [eax+1Dh]  +
***
mov dword_1014510 offset off_10018A0 +
mov ecx offset dword_1014510 +
jmp sub_1005059  +
***
add [eax] eax +
mov ds:2D9E0001h ch +
add [eax] eax +
scas   +
sub eax 2DBE0001h +
add [eax] eax +
retf 12Dh  +
***
add bh [eax] +
add [eax] eax +
sbb bh [eax] +
add [eax] eax +
cmp ss:[ecx] al +
add ah ah +
aaa   +
add [eax] eax +
retf 137h  +
***
retf   +
***
popa   +
ins  dx +
inc ecx  +
ins  dx +
ins  dx +
outs   +
arpl [eax] ax +
add [edx+656C5304h] dh +
jo $+3  +
jmp near ptr 756F843Fh  +
***
