call ds:GetLastError  +
sub eax 0C0000017h +
neg eax  +
sbb eax eax +
and eax 7 +
add eax 80000000h +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+4] edi +
jnz loc_100155E  +
push dword ptr [esi+10h]  +
push dword ptr [esi+0Ch]  +
push dword ptr [esi+8]  +
call ds:HeapCreate  +
mov [esi+4] eax +
cmp eax edi +
jnz loc_100155E  +
mov ecx esi +
call sub_1001515  +
mov edi eax +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
push edi  +
cmp [esi+4] ebx +
jz loc_100159C  +
mov edi [esi+4] +
call ds:GetProcessHeap  +
cmp edi eax +
jz loc_10015A1  +
push edi  +
call ds:HeapDestroy  +
test eax eax +
jz loc_1001593  +
and [esi+4] ebx +
jmp loc_10015A1  +
mov ecx esi +
call sub_1001515  +
jmp loc_10015A1  +
mov ebx 80000002h +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+4] +
push edi  +
xor edi edi +
test eax eax +
jz loc_10015DF  +
push [ebp+dwBytes]  +
push [ebp+dwFlags]  +
push eax  +
call ds:HeapAlloc  +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
test eax eax +
jnz loc_10015E4  +
mov ecx esi +
call sub_1001515  +
mov edi eax +
jmp loc_10015E4  +
mov edi 80000002h +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+4] +
push edi  +
xor edi edi +
cmp eax edi +
jz loc_100161D  +
push [ebp+lpMem]  +
push edi  +
push eax  +
call ds:HeapFree  +
test eax eax +
jnz loc_1001622  +
mov ecx esi +
call sub_1001515  +
mov edi eax +
jmp loc_1001622  +
mov edi 80000002h +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0B4h +
mov eax [ebp+arg_C] +
mov ecx [ebp+arg_14] +
cdq   +
mov [ebp+var_9C] eax +
mov [ebp+var_98] edx +
lea eax [ebp+arg_10] +
cdq   +
push ebx  +
push esi  +
xor esi esi +
mov [ebp+var_84] eax +
mov eax [ecx] +
mov [ebp+var_80] edx +
xor edx edx +
push edi  +
mov [ebp+hMem] esi +
mov [ebp+var_88] 1A0000h +
mov [ebp+var_B0] 0FFh +
mov [ebp+var_7C] 2 +
cmp eax esi +
jz loc_1001716  +
lea edi [ebp+var_7C] +
add ecx 4 +
mov ebx [ecx] +
add esi ebx +
cmp esi ebx +
jb loc_1001745  +
inc edx  +
add edi 10h +
mov [ebp+arg_C] edx +
cmp edx 7 +
ja loc_10016B0  +
cdq   +
mov [edi-4] edx +
mov edx [ebp+arg_C] +
mov [edi-8] eax +
mov [edi] ebx +
add ecx 4 +
mov eax [ecx] +
test eax eax +
jnz loc_1001689  +
cmp esi 2000h +
ja loc_1001745  +
cmp edx 7 +
jbe loc_1001716  +
push esi  +
xor ebx ebx +
push ebx  +
call ds:LocalAlloc  +
mov [ebp+hMem] eax +
cmp eax ebx +
jz loc_1001745  +
cdq   +
mov [ebp+var_6C] esi +
mov esi [ebp+arg_14] +
mov [ebp+var_74] eax +
mov [ebp+var_70] edx +
jmp loc_1001704  +
add esi 4 +
mov edi [esi] +
push edi  +
push eax  +
mov eax [ebp+hMem] +
add eax ebx +
push eax  +
call memcpy  +
add esp 0Ch +
add ebx edi +
add esi 4 +
mov eax [esi] +
test eax eax +
jnz loc_10016EA  +
push 50h  +
pop eax  +
mov word ptr [ebp+var_B4] ax +
jmp loc_1001723  +
add edx 4 +
shl edx 4 +
mov word ptr [ebp+var_B4] dx +
lea eax [ebp+var_B4] +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:EtwLogTraceEvent  +
cmp [ebp+hMem] 0 +
jz loc_1001745  +
push [ebp+hMem]  +
call ds:LocalFree  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+1Ch] +
push eax  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_100162F  +
pop ebp  +
retn   +
***
mov edi edi +
push edi  +
push offset LibFileName  +
call ds:LoadLibraryW  +
mov edi eax +
test edi edi +
jz loc_10017E4  +
push esi  +
mov esi ds:GetProcAddress +
push offset ProcName  +
push edi  +
call esi  +
mov off_1005000 eax +
test eax eax +
jnz loc_10017B5  +
and dword_1005090 eax +
mov off_1005000 offset loc_1001753 +
jmp loc_10017D0  +
push offset aTracemessageva  +
push edi  +
mov dword_1005090 1 +
call esi  +
mov off_1005004 eax +
test eax eax +
jnz loc_10017DA  +
mov off_1005004 offset sub_100162F +
push edi  +
call ds:FreeLibrary  +
pop esi  +
pop edi  +
retn   +
and dword_1005090 0 +
mov off_1005000 offset loc_1001753 +
mov off_1005004 offset sub_100162F +
pop edi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
call sub_1001777  +
lea eax [ebp+arg_14] +
push eax  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call off_1005004  +
xor eax eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call off_1005000  +
add esp 18h +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call off_1005000  +
add esp 20h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor ecx ecx +
xor edx edx +
mov [eax+10h] ecx +
mov [eax] ecx +
mov byte ptr [eax+18h] 1 +
mov [eax+19h] cl +
mov [eax+1Ah] dx +
mov [eax+1Ch] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+10h] +
xor edx edx +
push ebx  +
mov [eax] edx +
mov eax [ebp+8] +
sub eax 4 +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
mov edi esi +
jz loc_10018DD  +
dec eax  +
jz loc_10018D4  +
push 57h  +
pop eax  +
jmp loc_100194B  +
xor ebx ebx +
xor eax eax +
mov [ebp+0Fh] al +
jmp loc_1001903  +
push dword ptr [ebp+14h]  +
call ds:EtwGetTraceLoggerHandle  +
mov ebx eax +
push edx  +
push ebx  +
mov [ebp-4] edx +
call ds:EtwGetTraceEnableLevel  +
push dword ptr [ebp-4]  +
mov [ebp+0Fh] al +
push ebx  +
call ds:EtwGetTraceEnableFlags  +
mov edx [ebp-4] +
movzx ecx word ptr [esi+1Ah] +
test cl 1 +
jz loc_100192C  +
cmp dword ptr [esi+10h] 0 +
jz loc_100192C  +
mov ecx [esi+10h] +
mov [ecx] ebx +
mov [ecx+4] edx +
movzx ecx byte ptr [ebp+0Fh] +
mov edx [esi+10h] +
mov [edx+0Ch] ecx +
mov ecx [esi+10h] +
mov [ecx+8] eax +
jmp loc_1001949  +
test cl 2 +
jz loc_100193A  +
mov esi [esi+10h] +
test esi esi +
jz loc_100193A  +
mov edi esi +
mov cl [ebp+0Fh] +
mov [edi+10h] ebx +
mov [edi+14h] edx +
mov [edi+19h] cl +
mov [edi+1Ch] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi off_1005008 +
push edi  +
mov edi offset dword_1005078 +
jmp loc_1001996  +
mov eax [edi] +
and [ebp+var_4] 0 +
lea ecx [esi+8] +
push ecx  +
push 0  +
push 0  +
lea ecx [ebp+var_8] +
push ecx  +
push 1  +
push eax  +
push esi  +
push offset loc_10018AE  +
add edi 4 +
mov [ebp+var_8] eax +
call ds:EtwRegisterTraceGuidsW  +
mov esi [esi] +
test esi esi +
jnz loc_100196D  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi off_1005008 +
push edi  +
mov edi offset off_1005008 +
cmp esi edi +
jz loc_10019E2  +
jmp loc_10019D8  +
mov eax [esi+8] +
mov ecx [esi+0Ch] +
mov edx eax +
or edx ecx +
jz loc_10019D6  +
push ecx  +
push eax  +
call ds:EtwUnregisterTraceGuids  +
and dword ptr [esi+8] 0 +
and dword ptr [esi+0Ch] 0 +
mov esi [esi] +
test esi esi +
jnz loc_10019BA  +
mov off_1005008 edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpMem] 0 +
jz loc_1001A02  +
push [ebp+lpMem]  +
mov ecx offset unk_1005010 +
call sub_10015F1  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 120h +
mov eax dword_1005024 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_0] +
push 11Ch  +
lea eax [ebp+VersionInformation] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 11Ch +
call ds:GetVersionExW  +
test eax eax +
jz loc_1001A6A  +
mov eax [ebp+VersionInformation.dwMajorVersion] +
mov [edi] eax +
mov eax [ebp+VersionInformation.dwMinorVersion] +
mov [ebx] eax +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_1003B1F  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
push esi  +
xor esi esi +
dec eax  +
dec eax  +
jz loc_1001AA4  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call ds:DefWindowProcW  +
mov esi eax +
jmp loc_1001AB1  +
push esi  +
push esi  +
push 12h  +
push dword ptr [ebp+8]  +
call ds:PostMessageW  +
mov eax esi +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor esi esi +
push 7F01h  +
push esi  +
mov [ebp+WndClass.style] 3 +
mov [ebp+WndClass.lpfnWndProc] offset loc_1001A7F +
mov [ebp+WndClass.cbClsExtra] esi +
mov [ebp+WndClass.cbWndExtra] esi +
mov [ebp+WndClass.hInstance] edi +
call ds:LoadIconW  +
push 7F00h  +
push esi  +
mov [ebp+WndClass.hIcon] eax +
call ds:LoadCursorW  +
mov [ebp+WndClass.hCursor] eax +
mov eax lpClassName +
mov [ebp+WndClass.lpszClassName] eax +
lea eax [ebp+WndClass] +
push eax  +
mov [ebp+WndClass.hbrBackground] 6 +
mov [ebp+WndClass.lpszMenuName] esi +
call ds:RegisterClassW  +
push esi  +
push edi  +
push esi  +
push esi  +
mov eax 80000000h +
push eax  +
push eax  +
push eax  +
push eax  +
mov eax lpClassName +
push 20CF0000h  +
push eax  +
push eax  +
push esi  +
call ds:CreateWindowExW  +
mov edi eax +
push esi  +
push edi  +
call ds:ShowWindow  +
push edi  +
call ds:UpdateWindow  +
push esi  +
push edi  +
call ds:GetSystemMenu  +
cmp eax esi +
jz loc_1001B67  +
push esi  +
push 0F120h  +
push eax  +
call ds:DeleteMenu  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+hWnd]  +
call ds:DestroyWindow  +
push [ebp+hInstance]  +
push lpClassName  +
call ds:UnregisterClassW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push esi  +
mov esi ds:GetMessageW +
push edi  +
xor edi edi +
jmp loc_1001BC2  +
lea eax [ebp+Msg] +
push eax  +
call ds:TranslateMessage  +
lea eax [ebp+Msg] +
push eax  +
call ds:DispatchMessageW  +
push edi  +
push edi  +
push edi  +
lea eax [ebp+Msg] +
push eax  +
call esi  +
cmp eax 1 +
jz loc_1001BAE  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov eax dwRegister +
push esi  +
mov esi ds:CoRevokeClassObject +
test eax eax +
jz loc_1001BF3  +
push eax  +
call esi  +
and dwRegister 0 +
mov eax dword_1005088 +
test eax eax +
jz loc_1001C06  +
push eax  +
call esi  +
and dword_1005088 0 +
xor eax eax +
pop esi  +
retn   +
***
call sub_1001BD9  +
call ds:CoUninitialize  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov eax off_1005008 +
mov esi offset off_1005008 +
mov edi offset dword_1001204 +
cmp eax esi +
jz loc_1001C55  +
test byte ptr [eax+1Ch] 1 +
jz loc_1001C55  +
push edi  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001832  +
mov eax off_1005008 +
cmp [ebp+arg_0] 2 +
ja loc_1001C7B  +
cmp eax esi +
jz loc_1001C76  +
test byte ptr [eax+1Ch] 4 +
jz loc_1001C76  +
push [ebp+arg_0]  +
push edi  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001859  +
xor eax eax +
inc eax  +
jmp loc_1001C95  +
cmp eax esi +
jz loc_1001C93  +
test byte ptr [eax+1Ch] 1 +
jz loc_1001C93  +
push edi  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001832  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+dwBytes]  +
mov eax [ecx+8] +
push [ebp+arg_0]  +
and eax 5 +
or eax 8 +
push eax  +
call sub_10015AC  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+dwBytes]  +
lea eax [ebp+var_4] +
push eax  +
mov ecx offset unk_1005010 +
call sub_1001CA0  +
test eax eax +
jz loc_1001CE2  +
and [ebp+var_4] 0 +
mov eax [ebp+var_4] +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
push esi  +
push esi  +
call ds:CoInitializeEx  +
cmp eax esi +
jl loc_1001DBF  +
push ebx  +
push esi  +
push 40h  +
push esi  +
push [ebp+ppv]  +
push [ebp+dwAuthnLevel]  +
push esi  +
push esi  +
push 0FFFFFFFFh  +
push esi  +
call ds:CoInitializeSecurity  +
mov ebx eax +
cmp ebx esi +
jge loc_1001D2D  +
call ds:CoUninitialize  +
mov eax ebx +
jmp loc_1001DBE  +
lea eax [ebp+dwAuthnLevel] +
push eax  +
lea eax [ebp+ppv] +
push eax  +
mov [ebp+ppv] esi +
mov [ebp+dwAuthnLevel] esi +
call sub_1001A09  +
test eax eax +
jnz loc_1001D60  +
call ds:CoUninitialize  +
call ds:GetLastError  +
cmp eax esi +
jle loc_1001DBE  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1001DBE  +
push edi  +
xor edi edi +
inc edi  +
cmp [ebp+ppv] 5 +
jnz loc_1001D73  +
cmp [ebp+dwAuthnLevel] edi +
jnz loc_1001D73  +
mov eax ebx +
jmp loc_1001DBD  +
lea eax [ebp+ppv] +
push eax  +
push offset riid  +
push edi  +
push esi  +
push offset rclsid  +
mov [ebp+ppv] esi +
call ds:CoCreateInstance  +
test eax eax +
jl loc_1001DB4  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push edi  +
push edi  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov edi eax +
mov eax [ebp+ppv] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp edi esi +
jge loc_1001DB0  +
call ds:CoUninitialize  +
mov eax edi +
jmp loc_1001DBD  +
call ds:CoUninitialize  +
push 0Eh  +
pop eax  +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn 8  +
***
call __EH_prolog3  +
push 8  +
call sub_1001CC3  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor edi edi +
mov [ebp-4] edi +
cmp ecx edi +
jz loc_1001DF2  +
call sub_10037D7  +
jmp loc_1001DF4  +
xor eax eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov pUnk eax +
cmp eax edi +
jnz loc_1001E06  +
push 0Eh  +
pop eax  +
jmp loc_1001E77  +
mov esi ds:CoRegisterClassObject +
push offset dwRegister  +
push edi  +
push 4  +
push eax  +
push offset stru_100147C  +
call esi  +
mov ebx eax +
cmp ebx edi +
jge loc_1001E37  +
mov eax pUnk +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov pUnk edi +
mov eax ebx +
jmp loc_1001E77  +
push offset dword_1005088  +
push edi  +
push 4  +
push pUnk  +
push offset stru_100146C  +
call esi  +
mov esi eax +
cmp esi edi +
jge loc_1001E75  +
push dwRegister  +
call ds:CoRevokeClassObject  +
mov eax pUnk +
mov dwRegister edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov pUnk edi +
mov eax esi +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push esi  +
mov esi offset unk_1005010 +
mov ecx esi +
call sub_1001532  +
test eax eax +
jnz loc_1001ECE  +
push 3  +
push 2  +
call sub_1001CEC  +
test eax eax +
jl loc_1001ECE  +
push edi  +
call sub_1001DC9  +
mov edi eax +
test edi edi +
jge loc_1001EB5  +
call sub_1001C0F  +
jmp loc_1001ECB  +
call sub_1001B9A  +
call sub_1001BD9  +
call sub_1001C0F  +
mov ecx esi +
call sub_1001568  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+hInstance] +
mov dword_100507C eax +
xor eax eax +
push eax  +
push eax  +
push 1  +
push eax  +
call ds:HeapSetInformation  +
test eax eax +
jnz loc_1001EFE  +
call ds:GetLastError  +
leave   +
retn 10h  +
push ebx  +
push esi  +
push edi  +
mov edi offset CriticalSection +
push edi  +
call ds:InitializeCriticalSection  +
call sub_1001777  +
mov esi offset unk_1005058 +
push esi  +
call sub_1001886  +
push offset aMicrosoftWinrs  +
mov dword_1005078 offset dword_10011F4 +
mov off_1005008 esi +
call sub_1001957  +
mov eax off_1005008 +
mov esi offset off_1005008 +
mov ebx offset dword_1001204 +
cmp eax esi +
jz loc_1001F5E  +
test byte ptr [eax+1Ch] 1 +
jz loc_1001F5E  +
push ebx  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001832  +
call ds:AllocConsole  +
test eax eax +
jnz loc_1001FC7  +
call ds:GetLastError  +
mov [ebp+hInstance] eax +
mov eax off_1005008 +
cmp eax esi +
jz loc_1001F91  +
test byte ptr [eax+1Ch] 4 +
jz loc_1001F91  +
push [ebp+hInstance]  +
push ebx  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001859  +
push edi  +
call ds:DeleteCriticalSection  +
mov eax off_1005008 +
cmp eax esi +
jz loc_1001FB5  +
test byte ptr [eax+1Ch] 1 +
jz loc_1001FB5  +
push ebx  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001832  +
mov esi [ebp+hInstance] +
call sub_10019A5  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
jmp locret_1001EFA  +
push 1  +
push offset HandlerRoutine  +
call ds:SetConsoleCtrlHandler  +
test eax eax +
jnz loc_100201C  +
call ds:GetLastError  +
mov [ebp+hInstance] eax +
mov eax off_1005008 +
cmp eax esi +
jz loc_1002001  +
test byte ptr [eax+1Ch] 4 +
jz loc_1002001  +
push [ebp+hInstance]  +
push ebx  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001859  +
push edi  +
call ds:DeleteCriticalSection  +
mov eax off_1005008 +
cmp eax esi +
jz loc_1001FB5  +
test byte ptr [eax+1Ch] 1 +
jz loc_1001FB5  +
push ebx  +
push 11h  +
jmp loc_1001FAA  +
call ds:GetConsoleWindow  +
test eax eax +
jz loc_100202F  +
push 0  +
push eax  +
call ds:ShowWindow  +
push [ebp+hInstance]  +
and [ebp+var_4] 0 +
call sub_1001ABD  +
mov hWnd eax +
test eax eax +
jz loc_100205A  +
call sub_1001E82  +
push hWnd  +
mov [ebp+var_4] eax +
push [ebp+hInstance]  +
call sub_1001B74  +
push edi  +
call ds:DeleteCriticalSection  +
mov eax off_1005008 +
cmp eax esi +
jz loc_100207E  +
test byte ptr [eax+1Ch] 1 +
jz loc_100207E  +
push ebx  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001832  +
mov esi [ebp+var_4] +
jmp loc_1001FB8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
lea eax [ebp+arg_14] +
push eax  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call off_1005000  +
add esp 28h +
pop ebp  +
retn 18h  +
***
mov edi edi +
push esi  +
push edi  +
mov dword ptr [ecx] offset off_1001280 +
mov eax off_1005008 +
mov esi offset off_1005008 +
mov edi offset dword_1001270 +
cmp eax esi +
jz loc_10020EF  +
test byte ptr [eax+1Ch] 1 +
jz loc_10020EF  +
push edi  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001832  +
push offset Addend  +
call ds:InterlockedDecrement  +
mov eax off_1005008 +
cmp eax esi +
jz loc_1002117  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002117  +
push edi  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001832  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov eax off_1005008 +
mov ebx offset off_1005008 +
cmp eax ebx +
jz loc_100214D  +
test byte ptr [eax+1Ch] 1 +
jz loc_100214D  +
push offset dword_1001270  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001832  +
mov edx [ebp+10h] +
and dword ptr [edx] 0 +
mov esi [ebp+0Ch] +
push 4  +
pop ecx  +
mov edi offset dword_100141C +
xor eax eax +
cmps   +
jz loc_1002175  +
mov esi [ebp+0Ch] +
push 4  +
pop ecx  +
mov edi offset dword_100144C +
xor eax eax +
cmps   +
jnz loc_10021AB  +
mov eax [ebp+8] +
mov [edx] eax +
test eax eax +
jz loc_10021AB  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax off_1005008 +
cmp eax ebx +
jz loc_10021A7  +
test byte ptr [eax+1Ch] 1 +
jz loc_10021A7  +
push 0  +
push offset dword_1001270  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001859  +
xor eax eax +
jmp loc_10021D4  +
mov eax off_1005008 +
mov esi 80004002h +
cmp eax ebx +
jz loc_10021D2  +
test byte ptr [eax+1Ch] 1 +
jz loc_10021D2  +
push esi  +
push offset dword_1001270  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001859  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov eax off_1005008 +
mov esi offset off_1005008 +
mov edi offset dword_1001270 +
cmp eax esi +
jz loc_100220F  +
test byte ptr [eax+1Ch] 1 +
jz loc_100220F  +
push edi  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001832  +
mov eax [ebp+8] +
add eax 4 +
push eax  +
call ds:InterlockedIncrement  +
mov ebx eax +
mov eax off_1005008 +
cmp eax esi +
jz loc_100223C  +
test byte ptr [eax+1Ch] 1 +
jz loc_100223C  +
push ebx  +
push edi  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001859  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov eax off_1005008 +
mov esi offset off_1005008 +
mov ebx offset dword_1001270 +
cmp eax esi +
jz loc_1002279  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002279  +
push ebx  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001832  +
mov edi [ebp+8] +
lea eax [edi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov [ebp+8] eax +
test eax eax +
jnz loc_10022CF  +
test edi edi +
jz loc_100229A  +
mov eax [edi] +
push 1  +
mov ecx edi +
call dword ptr [eax+14h]  +
push 0  +
push 0  +
push 12h  +
push hWnd  +
call ds:PostMessageW  +
mov eax off_1005008 +
cmp eax esi +
jz loc_10022CB  +
test byte ptr [eax+1Ch] 1 +
jz loc_10022CB  +
push 0  +
push ebx  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001859  +
xor eax eax +
jmp loc_10022F2  +
mov eax off_1005008 +
cmp eax esi +
jz loc_10022EF  +
test byte ptr [eax+1Ch] 1 +
jz loc_10022EF  +
push dword ptr [ebp+8]  +
push ebx  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001859  +
mov eax [ebp+8] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_1005024 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
push edi  +
lea esi [ebp+0Ch] +
lea edi [ebp-14h] +
movs   +
movs   +
movs   +
movs   +
mov eax off_1005008 +
mov ebx offset off_1005008 +
cmp eax ebx +
jz loc_1002348  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002348  +
push offset dword_1001270  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001832  +
mov eax off_1005008 +
push 4  +
pop ecx  +
mov edi offset stru_100147C +
lea esi [ebp-14h] +
xor edx edx +
cmps   +
jnz loc_1002373  +
mov ecx dword_1005088 +
test ecx ecx +
jz loc_10023A1  +
push ecx  +
call ds:CoRevokeClassObject  +
and dword_1005088 0 +
jmp loc_100239C  +
push 4  +
pop ecx  +
mov edi offset stru_100146C +
lea esi [ebp-14h] +
xor edx edx +
cmps   +
jnz loc_10023C3  +
mov ecx dwRegister +
test ecx ecx +
jz loc_10023A1  +
push ecx  +
call ds:CoRevokeClassObject  +
and dwRegister 0 +
mov eax off_1005008 +
cmp eax ebx +
jz loc_10023BF  +
test byte ptr [eax+1Ch] 1 +
jz loc_10023BF  +
push 0  +
push offset dword_1001270  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001859  +
xor eax eax +
jmp loc_10023E7  +
mov esi 80070057h +
cmp eax ebx +
jz loc_10023E5  +
test byte ptr [eax+1Ch] 1 +
jz loc_10023E5  +
push esi  +
push offset dword_1001270  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001859  +
mov eax esi +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1003B1F  +
leave   +
retn 14h  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
mov dword ptr [esi] offset off_1001298 +
mov eax off_1005008 +
mov ebx offset off_1005008 +
cmp eax ebx +
jz loc_1002430  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002430  +
push offset dword_1001270  +
push 20h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001832  +
push dword ptr [esi+20h]  +
mov edi ds:CloseHandle +
call edi  +
push dword ptr [esi+24h]  +
call edi  +
push dword ptr [esi+18h]  +
call sub_10019EA  +
push dword ptr [esi+8]  +
call sub_10019EA  +
push dword ptr [esi+0Ch]  +
call sub_10019EA  +
push dword ptr [esi+14h]  +
call sub_10019EA  +
add esp 10h +
push offset Addend  +
call ds:InterlockedDecrement  +
mov eax off_1005008 +
pop edi  +
pop esi  +
cmp eax ebx +
pop ebx  +
jz locret_1002492  +
test byte ptr [eax+1Ch] 1 +
jz locret_1002492  +
push offset dword_1001270  +
push 21h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001832  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov eax off_1005008 +
mov ebx offset off_1005008 +
cmp eax ebx +
jz loc_10024C6  +
test byte ptr [eax+1Ch] 1 +
jz loc_10024C6  +
push offset dword_1001270  +
push 22h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001832  +
mov edx [ebp+10h] +
and dword ptr [edx] 0 +
mov esi [ebp+0Ch] +
push 4  +
pop ecx  +
mov edi offset dword_100141C +
xor eax eax +
cmps   +
jz loc_10024EE  +
mov esi [ebp+0Ch] +
push 4  +
pop ecx  +
mov edi offset dword_100145C +
xor eax eax +
cmps   +
jnz loc_1002524  +
mov eax [ebp+8] +
mov [edx] eax +
test eax eax +
jz loc_1002524  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax off_1005008 +
cmp eax ebx +
jz loc_1002520  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002520  +
push 0  +
push offset dword_1001270  +
push 23h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001859  +
xor eax eax +
jmp loc_100254D  +
mov eax off_1005008 +
mov esi 80004002h +
cmp eax ebx +
jz loc_100254B  +
test byte ptr [eax+1Ch] 1 +
jz loc_100254B  +
push esi  +
push offset dword_1001270  +
push 24h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001859  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov eax off_1005008 +
mov esi offset off_1005008 +
mov edi offset dword_1001270 +
cmp eax esi +
jz loc_1002588  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002588  +
push edi  +
push 25h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001832  +
mov eax [ebp+8] +
add eax 4 +
push eax  +
call ds:InterlockedIncrement  +
mov ebx eax +
mov eax off_1005008 +
cmp eax esi +
jz loc_10025B5  +
test byte ptr [eax+1Ch] 1 +
jz loc_10025B5  +
push ebx  +
push edi  +
push 26h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001859  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov eax off_1005008 +
mov esi offset off_1005008 +
mov ebx offset dword_1001270 +
cmp eax esi +
jz loc_10025F2  +
test byte ptr [eax+1Ch] 1 +
jz loc_10025F2  +
push ebx  +
push 27h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001832  +
mov edi [ebp+8] +
lea eax [edi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov [ebp+8] eax +
test eax eax +
jnz loc_1002636  +
test edi edi +
jz loc_1002613  +
mov eax [edi] +
push 1  +
mov ecx edi +
call dword ptr [eax+1Ch]  +
mov eax off_1005008 +
cmp eax esi +
jz loc_1002632  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002632  +
push 0  +
push ebx  +
push 28h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001859  +
xor eax eax +
jmp loc_1002659  +
mov eax off_1005008 +
cmp eax esi +
jz loc_1002656  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002656  +
push dword ptr [ebp+8]  +
push ebx  +
push 29h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001859  +
mov eax [ebp+8] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_8] ecx +
mov eax off_1005008 +
mov esi offset off_1005008 +
mov edi offset dword_1001270 +
cmp eax esi +
jz loc_1002699  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002699  +
push edi  +
push 2Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001832  +
mov ebx [ebp+arg_0] +
and [ebp+var_4] 0 +
mov eax [ebp+var_8] +
mov [eax+28h] ebx +
cmp ebx 0FFFFFFFFh +
jz loc_1002723  +
mov eax off_1005008 +
cmp eax esi +
jz loc_10026C9  +
test byte ptr [eax+1Ch] 1 +
jz loc_10026C9  +
push ebx  +
push edi  +
push 2Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001859  +
push ebx  +
call ds:SetConsoleOutputCP  +
test eax eax +
jz loc_10026DF  +
push ebx  +
call ds:SetConsoleCP  +
test eax eax +
jnz loc_1002714  +
call ds:GetLastError  +
mov [ebp+var_4] eax +
mov eax off_1005008 +
cmp eax esi +
jz loc_100270E  +
test byte ptr [eax+1Ch] 1 +
jz loc_100270E  +
push [ebp+var_4]  +
push ebx  +
push edi  +
push 30h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100208B  +
mov eax off_1005008 +
cmp [ebp+var_4] 0 +
jnz loc_1002728  +
push 0  +
push 0  +
push 100h  +
call ds:SetThreadPreferredUILanguages  +
mov eax off_1005008 +
cmp eax esi +
jz loc_1002740  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002740  +
push edi  +
push 31h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001832  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
mov eax off_1005008 +
mov esi offset off_1005008 +
mov edi offset dword_1001270 +
cmp eax esi +
jz loc_1002780  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002780  +
push edi  +
push 32h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001832  +
push [ebp+dwBytes]  +
call sub_1001CC3  +
pop ecx  +
mov [ebx+18h] eax +
test eax eax +
jnz loc_10027B7  +
mov eax off_1005008 +
mov ebx 8007000Eh +
cmp eax esi +
jz loc_10027B3  +
test byte ptr [eax+1Ch] 1 +
jz loc_10027B3  +
push ebx  +
push edi  +
push 33h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001859  +
mov eax ebx +
jmp loc_10027E7  +
push [ebp+dwBytes]  +
push [ebp+arg_4]  +
push eax  +
call memcpy  +
add esp 0Ch +
mov eax off_1005008 +
cmp eax esi +
jz loc_10027E5  +
test byte ptr [eax+1Ch] 1 +
jz loc_10027E5  +
push 0  +
push edi  +
push 34h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001859  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push edi  +
mov eax off_1005008 +
mov edi offset off_1005008 +
mov ebx offset dword_1001270 +
cmp eax edi +
jz loc_1002824  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002824  +
push ebx  +
push 3Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001832  +
push esi  +
mov esi [ebp+arg_24] +
xor eax eax +
lea ecx [ebp+ProcessInformation] +
push ecx  +
push [ebp+lpStartupInfo]  +
mov ecx [ebp+arg_8] +
neg ecx  +
sbb ecx ecx +
and ecx [ebp+arg_C] +
mov [ebp+var_4] eax +
push ecx  +
push [ebp+lpEnvironment]  +
mov ecx [ebp+arg_14] +
or ecx 404h +
push ecx  +
push 1  +
push eax  +
push eax  +
push [ebp+lpCommandLine]  +
mov [esi] eax +
push [ebp+lpApplicationName]  +
call ds:CreateProcessW  +
test eax eax +
jz loc_1002879  +
mov eax [ebp+arg_20] +
mov ecx [ebp+ProcessInformation.dwProcessId] +
mov [eax] ecx +
mov eax [ebp+ProcessInformation.hProcess] +
mov ecx [ebp+ProcessInformation.hThread] +
mov [esi] eax +
mov eax [ebp+arg_28] +
mov [eax] ecx +
jmp loc_1002882  +
call ds:GetLastError  +
mov [ebp+var_4] eax +
mov eax off_1005008 +
pop esi  +
cmp eax edi +
jz loc_10028A3  +
test byte ptr [eax+1Ch] 1 +
jz loc_10028A3  +
push [ebp+var_4]  +
push ebx  +
push 3Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001859  +
mov eax [ebp+var_4] +
pop edi  +
pop ebx  +
leave   +
retn 2Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov eax off_1005008 +
mov esi offset off_1005008 +
cmp eax esi +
jz loc_10028E2  +
test byte ptr [eax+1Ch] 1 +
jz loc_10028E2  +
mov edi offset dword_1001270 +
push edi  +
push 41h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001832  +
jmp loc_10028E7  +
mov edi offset dword_1001270 +
push dword ptr [ebp+0Ch]  +
mov ebx ds:_wcsicmp +
push offset aHttpSchemas_mi  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1002981  +
push eax  +
push eax  +
call ds:GenerateConsoleCtrlEvent  +
test eax eax +
jnz loc_100295D  +
call ds:GetLastError  +
mov edi eax +
mov eax off_1005008 +
mov ebx 80070000h +
cmp eax esi +
jz loc_100294A  +
test byte ptr [eax+1Ch] 1 +
jz loc_100294A  +
mov ecx edi +
test edi edi +
jle loc_1002937  +
and ecx 0FFFFh +
or ecx ebx +
push ecx  +
push offset dword_1001270  +
push 42h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001859  +
test edi edi +
jle loc_1002956  +
and edi 0FFFFh +
or edi ebx +
mov eax edi +
jmp loc_1002A1B  +
mov eax off_1005008 +
cmp eax esi +
jz loc_100297A  +
test byte ptr [eax+1Ch] 1 +
jz loc_100297A  +
push edi  +
push 43h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001832  +
xor eax eax +
jmp loc_1002A1B  +
push dword ptr [ebp+0Ch]  +
push offset aHttpSchemas__0  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_10029F6  +
push eax  +
push 1  +
call ds:GenerateConsoleCtrlEvent  +
test eax eax +
jnz loc_10029D5  +
call ds:GetLastError  +
mov edi eax +
mov eax off_1005008 +
mov ebx 80070000h +
cmp eax esi +
jz loc_100294A  +
test byte ptr [eax+1Ch] 1 +
jz loc_100294A  +
mov ecx edi +
test edi edi +
jle loc_10029C8  +
and ecx 0FFFFh +
or ecx ebx +
push ecx  +
push offset dword_1001270  +
push 44h  +
jmp loc_100293F  +
***
mov eax off_1005008 +
cmp eax esi +
jz loc_100297A  +
test byte ptr [eax+1Ch] 1 +
jz loc_100297A  +
push 0  +
push edi  +
push 45h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001859  +
jmp loc_100297A  +
***
mov eax off_1005008 +
mov ebx 80070057h +
cmp eax esi +
jz loc_1002A19  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002A19  +
push ebx  +
push edi  +
push 46h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001859  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
push ebx  +
push esi  +
push edi  +
mov eax off_1005008 +
mov ebx offset off_1005008 +
cmp eax ebx +
jz loc_1002A58  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002A58  +
push offset dword_1001270  +
push 47h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001832  +
mov esi ds:GetStdHandle +
lea eax [ebp-8] +
push eax  +
xor edi edi +
push 0FFFFFFF6h  +
mov [ebp-8] edi +
call esi  +
push eax  +
call ds:GetConsoleMode  +
cmp eax edi +
jnz loc_1002AC8  +
call ds:GetLastError  +
mov [ebp+0Ch] eax +
mov ecx off_1005008 +
mov edi 0FFFFh +
mov esi 80070000h +
cmp ecx ebx +
jz loc_1002AB7  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1002AB7  +
test eax eax +
jle loc_1002AA1  +
and eax edi +
or eax esi +
push eax  +
push offset dword_1001270  +
push 48h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1001859  +
mov eax [ebp+0Ch] +
test eax eax +
jle loc_1002C69  +
and eax edi +
or eax esi +
jmp loc_1002C69  +
test byte ptr [ebp-8] 4 +
jz loc_1002AE0  +
mov eax [ebp-8] +
xor eax 4 +
push eax  +
push 0FFFFFFF6h  +
call esi  +
push eax  +
call ds:SetConsoleMode  +
cmp eax edi +
jnz loc_1002B19  +
call ds:GetLastError  +
mov [ebp+0Ch] eax +
mov ecx off_1005008 +
mov edi 0FFFFh +
mov esi 80070000h +
cmp ecx ebx +
jz loc_1002AB7  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1002AB7  +
test eax eax +
jle loc_1002B0F  +
and eax edi +
or eax esi +
push eax  +
push offset dword_1001270  +
push 49h  +
jmp loc_1002AA9  +
***
mov [ebp-4] edi +
cmp [ebp+0Ch] edi +
jbe loc_1002BEF  +
mov eax [ebp+10h] +
mov ecx [ebp-4] +
and dword ptr [ebp-0Ch] 0 +
xor edi edi +
inc edi  +
add ecx eax +
push edi  +
push ecx  +
lea eax [ebp-0Ch] +
push eax  +
call ds:mbtowc  +
mov eax edi +
mov [ebp-38h] ax +
mov [ebp-30h] ax +
mov eax [ebp-0Ch] +
mov [ebp-2Ah] ax +
mov [ebp-16h] ax +
xor eax eax +
add esp 0Ch +
mov [ebp-1Ah] ax +
mov [ebp-18h] ax +
lea eax [ebp-10h] +
push eax  +
xor ecx ecx +
push 2  +
lea eax [ebp-38h] +
mov edx edi +
push eax  +
push 0FFFFFFF6h  +
mov [ebp-34h] edi +
mov [ebp-2Eh] cx +
mov [ebp-2Ch] cx +
mov [ebp-28h] ecx +
mov [ebp-24h] dx +
mov [ebp-20h] ecx +
mov [ebp-1Ch] dx +
mov [ebp-14h] ecx +
mov [ebp-10h] ecx +
call esi  +
push eax  +
call ds:WriteConsoleInputW  +
cmp eax edi +
jnz loc_1002BAF  +
inc dword ptr [ebp-4]  +
mov eax [ebp-4] +
cmp eax [ebp+0Ch] +
jb loc_1002B25  +
jmp loc_1002BF2  +
call ds:GetLastError  +
mov [ebp+0Ch] eax +
mov ecx off_1005008 +
mov edi 0FFFFh +
mov esi 80070000h +
cmp ecx ebx +
jz loc_1002AB7  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1002AB7  +
test eax eax +
jle loc_1002BE2  +
and eax edi +
or eax esi +
push eax  +
push offset dword_1001270  +
push 4Ah  +
jmp loc_1002AA9  +
***
xor edi edi +
inc edi  +
push dword ptr [ebp-8]  +
push 0FFFFFFF6h  +
call esi  +
push eax  +
call ds:SetConsoleMode  +
cmp eax edi +
jz loc_1002C44  +
call ds:GetLastError  +
mov [ebp+0Ch] eax +
mov ecx off_1005008 +
mov edi 0FFFFh +
mov esi 80070000h +
cmp ecx ebx +
jz loc_1002AB7  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1002AB7  +
test eax eax +
jle loc_1002C37  +
and eax edi +
or eax esi +
push eax  +
push offset dword_1001270  +
push 4Bh  +
jmp loc_1002AA9  +
***
mov eax off_1005008 +
cmp eax ebx +
jz loc_1002C67  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002C67  +
push 0  +
push offset dword_1001270  +
push 4Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001859  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov eax off_1005008 +
mov ebx offset off_1005008 +
cmp eax ebx +
jz loc_1002CA5  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002CA5  +
push offset dword_1001270  +
push 4Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001832  +
mov esi ds:GetStdHandle +
and dword ptr [ebp-8] 0 +
lea eax [ebp-8] +
push eax  +
push 0FFFFFFF6h  +
call esi  +
push eax  +
call ds:GetConsoleMode  +
test eax eax +
jnz loc_1002D13  +
call ds:GetLastError  +
mov ecx eax +
mov [ebp+8] ecx +
mov eax off_1005008 +
mov edi 0FFFFh +
mov esi 80070000h +
cmp eax ebx +
jz loc_1002D04  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002D04  +
test ecx ecx +
jle loc_1002CEE  +
and ecx edi +
or ecx esi +
push ecx  +
push offset dword_1001270  +
push 4Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001859  +
mov ecx [ebp+8] +
test ecx ecx +
jle loc_1002D0C  +
and ecx edi +
or ecx esi +
mov eax ecx +
jmp loc_1002DF7  +
mov ecx [ebp-8] +
mov edi ds:SetConsoleMode +
test cl 4 +
jz loc_1002D2C  +
xor ecx 4 +
push ecx  +
push 0FFFFFFF6h  +
call esi  +
push eax  +
call edi  +
test eax eax +
jnz loc_1002D66  +
call ds:GetLastError  +
mov ecx eax +
mov [ebp+8] ecx +
mov eax off_1005008 +
mov edi 0FFFFh +
mov esi 80070000h +
cmp eax ebx +
jz loc_1002D04  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002D04  +
test ecx ecx +
jle loc_1002D5C  +
and ecx edi +
or ecx esi +
push ecx  +
push offset dword_1001270  +
push 4Fh  +
jmp loc_1002CF6  +
***
mov eax [ebp+8] +
mov ecx [eax] +
lea edx [ebp-4] +
push edx  +
push 2  +
push eax  +
mov byte ptr [ebp-4] 1Ah +
mov byte ptr [ebp-3] 0Dh +
call dword ptr [ecx+14h]  +
push dword ptr [ebp-8]  +
mov [ebp+8] eax +
push 0FFFFFFF6h  +
call esi  +
push eax  +
call edi  +
cmp eax 1 +
jz loc_1002DD0  +
call ds:GetLastError  +
mov ecx eax +
mov [ebp+8] ecx +
mov eax off_1005008 +
mov edi 0FFFFh +
mov esi 80070000h +
cmp eax ebx +
jz loc_1002D04  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002D04  +
test ecx ecx +
jle loc_1002DC3  +
and ecx edi +
or ecx esi +
push ecx  +
push offset dword_1001270  +
push 51h  +
jmp loc_1002CF6  +
***
mov eax off_1005008 +
cmp eax ebx +
jz loc_1002DF4  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002DF4  +
push dword ptr [ebp+8]  +
push offset dword_1001270  +
push 52h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001859  +
mov eax [ebp+8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10020BE  +
test byte ptr [ebp+8] 1 +
jz loc_1002E1D  +
push esi  +
call sub_10019EA  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov dword ptr [esi+4] 1 +
mov [esi+8] eax +
mov [esi+0Ch] eax +
mov [esi+14h] eax +
mov [esi+18h] eax +
mov [esi+1Ch] eax +
mov [esi+20h] eax +
mov [esi+24h] eax +
mov eax off_1005008 +
mov edi offset off_1005008 +
cmp eax edi +
jz loc_1002E7B  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002E7B  +
push offset dword_1001270  +
push 1Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001832  +
push offset Addend  +
call ds:InterlockedIncrement  +
mov eax off_1005008 +
cmp eax edi +
jz loc_1002EA7  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002EA7  +
push offset dword_1001270  +
push 1Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001832  +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10023FD  +
test byte ptr [ebp+8] 1 +
jz loc_1002ECB  +
push esi  +
call sub_10019EA  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1002EED  +
cmp ecx 7FFFFFFFh +
jbe loc_1002EF2  +
mov eax 80070057h +
test eax eax +
jl loc_1002F3D  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_1002F2D  +
mov edx [ebp+arg_8] +
push edi  +
mov edi 7FFFFFFEh +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_1002F28  +
movzx ecx word ptr [edx+eax] +
test cx cx +
jz loc_1002F28  +
mov [eax] cx +
inc eax  +
inc eax  +
dec esi  +
jnz loc_1002F10  +
pop edi  +
test esi esi +
jnz loc_1002F34  +
dec eax  +
dec eax  +
mov ebx 8007007Ah +
xor ecx ecx +
mov [eax] cx +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
and dword ptr [esi+4] 0 +
push edi  +
mov dword ptr [esi] offset off_1001280 +
mov eax off_1005008 +
mov edi offset off_1005008 +
mov ebx offset dword_1001270 +
cmp eax edi +
jz loc_1002F7E  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002F7E  +
push ebx  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001832  +
push offset Addend  +
call ds:InterlockedIncrement  +
mov eax off_1005008 +
cmp eax edi +
jz loc_1002FA6  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002FA6  +
push ebx  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001832  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov eax off_1005008 +
mov edi offset off_1005008 +
cmp eax edi +
jz loc_1002FDF  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002FDF  +
push offset dword_1001270  +
push 2Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001832  +
mov esi [ebp+arg_0] +
push dword ptr [esi]  +
call sub_10019EA  +
mov ebx [ebp+arg_4] +
and dword ptr [esi] 0 +
pop ecx  +
test ebx ebx +
jnz loc_1003018  +
mov eax off_1005008 +
cmp eax edi +
jz loc_10030B1  +
test byte ptr [eax+1Ch] 1 +
jz loc_10030B1  +
push ebx  +
push offset dword_1001270  +
push 2Bh  +
jmp loc_10030A6  +
mov eax ebx +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100301D  +
sub eax edx +
sar eax 1 +
xor ecx ecx +
push 2  +
inc eax  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_1001CC3  +
pop ecx  +
mov [esi] eax +
test eax eax +
jnz loc_1003072  +
mov eax off_1005008 +
cmp eax edi +
jz loc_100306D  +
test byte ptr [eax+1Ch] 1 +
jz loc_100306D  +
push 8007000Eh  +
push offset dword_1001270  +
push 2Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001859  +
push 0Eh  +
pop eax  +
jmp loc_10030B3  +
mov ecx ebx +
lea esi [ecx+2] +
mov dx [ecx] +
inc ecx  +
inc ecx  +
test dx dx +
jnz loc_1003077  +
sub ecx esi +
sar ecx 1 +
push ebx  +
inc ecx  +
push ecx  +
push eax  +
call sub_1002ED7  +
mov eax off_1005008 +
cmp eax edi +
jz loc_10030B1  +
test byte ptr [eax+1Ch] 1 +
jz loc_10030B1  +
push 0  +
push offset dword_1001270  +
push 2Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001859  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
lea eax [ecx+14h] +
push [ebp+arg_0]  +
push eax  +
call sub_1002FB1  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
lea eax [ecx+8] +
push [ebp+arg_0]  +
push eax  +
call sub_1002FB1  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
lea eax [ecx+0Ch] +
push [ebp+arg_0]  +
push eax  +
call sub_1002FB1  +
pop ebp  +
retn 8  +
***
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov eax off_1005008 +
mov ebx offset off_1005008 +
cmp eax ebx +
jz loc_1003146  +
test byte ptr [eax+1Ch] 1 +
jz loc_1003146  +
push offset dword_1001270  +
push 35h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001832  +
cmp dword ptr [ebp+10h] 0 +
mov eax [ebp+18h] +
mov [edi+10h] eax +
jz loc_100319B  +
mov eax [ebp+10h] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1003158  +
sub eax edx +
sar eax 1 +
push eax  +
push dword ptr [ebp+10h]  +
mov ecx edi +
call sub_10030DC  +
mov esi eax +
test esi esi +
jz loc_100319B  +
mov eax off_1005008 +
cmp eax ebx +
jz loc_100329B  +
test byte ptr [eax+1Ch] 1 +
jz loc_100329B  +
push esi  +
push offset dword_1001270  +
push 36h  +
jmp loc_1003290  +
cmp dword ptr [ebp+14h] 0 +
jz loc_10031EA  +
mov eax [ebp+14h] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10031A7  +
sub eax edx +
sar eax 1 +
push eax  +
push dword ptr [ebp+14h]  +
mov ecx edi +
call sub_10030F9  +
mov esi eax +
test esi esi +
jz loc_10031EA  +
mov eax off_1005008 +
cmp eax ebx +
jz loc_100329B  +
test byte ptr [eax+1Ch] 1 +
jz loc_100329B  +
push esi  +
push offset dword_1001270  +
push 37h  +
jmp loc_1003290  +
push dword ptr [ebp+28h]  +
mov ecx edi +
push dword ptr [ebp+24h]  +
call sub_100274F  +
mov esi eax +
test esi esi +
jz loc_100321E  +
mov eax off_1005008 +
cmp eax ebx +
jz loc_100329B  +
test byte ptr [eax+1Ch] 1 +
jz loc_100329B  +
push esi  +
push offset dword_1001270  +
push 38h  +
jmp loc_1003290  +
push dword ptr [ebp+1Ch]  +
mov ecx edi +
call sub_1002665  +
test eax eax +
jz loc_1003254  +
mov eax off_1005008 +
cmp eax ebx +
jz loc_100324D  +
test byte ptr [eax+1Ch] 1 +
jz loc_100324D  +
push offset dword_1001270  +
push 39h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001832  +
mov eax 80338140h +
jmp loc_100329D  +
mov eax [ebp+20h] +
test eax eax +
jz loc_1003279  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100325E  +
sub eax edx +
sar eax 1 +
push eax  +
push dword ptr [ebp+20h]  +
mov ecx edi +
call sub_10030BF  +
mov esi eax +
mov eax off_1005008 +
cmp eax ebx +
jz loc_100329B  +
test byte ptr [eax+1Ch] 1 +
jz loc_100329B  +
push esi  +
push offset dword_1001270  +
push 3Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001859  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 50h +
push ebx  +
push esi  +
push edi  +
mov eax off_1005008 +
mov edi offset off_1005008 +
cmp eax edi +
jz loc_10032DA  +
test byte ptr [eax+1Ch] 1 +
jz loc_10032DA  +
push offset dword_1001270  +
push 3Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001832  +
mov esi [ebp+8] +
xor eax eax +
xor ebx ebx +
cmp [esi+14h] ebx +
push 44h  +
setnz al  +
push ebx  +
mov [ebp-4] eax +
lea eax [ebp-50h] +
push eax  +
call memset  +
xor eax eax +
mov [ebp-1Eh] ax +
mov [ebp-20h] ax +
mov eax [ebp+1Ch] +
add esp 0Ch +
mov dword ptr [ebp-50h] 44h +
mov [ebp-4Ch] ebx +
mov [ebp-1Ch] ebx +
mov [ebp-44h] ebx +
mov dword ptr [ebp-48h] offset dword_10013DC +
mov [ebp-40h] ebx +
mov [ebp-3Ch] ebx +
mov [ebp-38h] ebx +
mov [ebp-34h] ebx +
mov [ebp-30h] ebx +
mov [ebp-2Ch] ebx +
mov [ebp-28h] ebx +
mov dword ptr [ebp-24h] 101h +
cmp eax ebx +
jnz loc_1003345  +
push 0FFFFFFF6h  +
call ds:GetStdHandle  +
mov [ebp-18h] eax +
mov eax [ebp+24h] +
mov [ebp-14h] eax +
mov eax [ebp+2Ch] +
mov [ebp-10h] eax +
mov eax [ebp+18h] +
mov [ebp+8] ebx +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx bx +
jnz loc_100335D  +
sub eax ecx +
sar eax 1 +
inc eax  +
push eax  +
push dword ptr [ebp+18h]  +
lea eax [ebp+8] +
push eax  +
mov ecx esi +
call sub_1002FB1  +
mov ebx eax +
test ebx ebx +
jz loc_10033C9  +
mov eax off_1005008 +
mov esi 80070000h +
cmp eax edi +
jz loc_10033B6  +
test byte ptr [eax+1Ch] 1 +
jz loc_10033B6  +
mov ecx ebx +
test ebx ebx +
jle loc_10033A3  +
and ecx 0FFFFh +
or ecx esi +
push ecx  +
push offset dword_1001270  +
push 3Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001859  +
test ebx ebx +
jle loc_10033C2  +
and ebx 0FFFFh +
or ebx esi +
mov eax ebx +
jmp loc_10034B5  +
lea ebx [esi+24h] +
push ebx  +
lea eax [esi+20h] +
push eax  +
lea ecx [esi+1Ch] +
push ecx  +
mov [ebp-0Ch] eax +
lea eax [ebp-50h] +
push eax  +
push 1  +
push 0  +
push dword ptr [esi+18h]  +
mov [ebp-8] ecx +
push dword ptr [esi+14h]  +
mov ecx esi +
push dword ptr [ebp-4]  +
push dword ptr [ebp+8]  +
push dword ptr [ebp+14h]  +
call sub_10027F3  +
push dword ptr [ebp+8]  +
mov [ebp+18h] eax +
call sub_10019EA  +
mov esi ds:CloseHandle +
pop ecx  +
push dword ptr [ebp+1Ch]  +
call esi  +
push dword ptr [ebp+24h]  +
call esi  +
push dword ptr [ebp+2Ch]  +
call esi  +
cmp dword ptr [ebp+18h] 0 +
jz loc_100346D  +
mov eax off_1005008 +
mov esi 80070000h +
cmp eax edi +
jz loc_100345A  +
test byte ptr [eax+1Ch] 1 +
jz loc_100345A  +
mov edi [ebp+18h] +
mov ecx edi +
test edi edi +
jle loc_1003445  +
and ecx 0FFFFh +
or ecx esi +
push ecx  +
push offset dword_1001270  +
push 3Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001859  +
jmp loc_100345D  +
mov edi [ebp+18h] +
test edi edi +
jle loc_1003469  +
and edi 0FFFFh +
or edi esi +
mov eax edi +
jmp loc_10034B5  +
mov ecx [ebp+34h] +
mov eax [ebp-8] +
mov eax [eax] +
mov [ecx+4] eax +
mov eax [ebp-0Ch] +
mov eax [eax] +
cdq   +
mov [ecx+8] eax +
mov [ecx+0Ch] edx +
mov eax [ebx] +
and dword ptr [ecx] 0 +
cdq   +
mov [ecx+10h] eax +
mov [ecx+14h] edx +
mov eax off_1005008 +
cmp eax edi +
jz loc_10034B3  +
test byte ptr [eax+1Ch] 1 +
jz loc_10034B3  +
push 0  +
push offset dword_1001270  +
push 40h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001859  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 30h  +
***
mov esi 8007000Eh +
cmp eax edi +
jz loc_1003542  +
test byte ptr [eax+1Ch] 1 +
jz loc_1003542  +
push esi  +
push offset dword_1001270  +
push 1Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001859  +
mov eax esi +
jmp loc_1003654  +
mov ebx 80070000h +
cmp eax edi +
jz loc_10035B5  +
test byte ptr [eax+1Ch] 1 +
jz loc_10035B5  +
mov esi [ebp+24h] +
mov ecx esi +
test esi esi +
jle loc_10035A0  +
and ecx 0FFFFh +
or ecx ebx +
push ecx  +
push offset dword_1001270  +
push 1Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001859  +
jmp loc_10035B8  +
mov esi [ebp+24h] +
test esi esi +
jle loc_1003542  +
and esi 0FFFFh +
or esi ebx +
jmp loc_1003542  +
***
mov eax [ebp+1Ch] +
mov ebx ds:GetCurrentProcessId +
mov [eax] esi +
mov esi [ebp+18h] +
call ebx  +
push eax  +
push 0  +
push 40h  +
call ds:OpenProcess  +
cdq   +
mov [esi+8] eax +
mov [esi+0Ch] edx +
test eax eax +
jnz loc_1003627  +
test edx edx +
jnz loc_1003627  +
call ds:GetLastError  +
mov esi eax +
mov eax off_1005008 +
mov ebx 80070000h +
cmp eax edi +
jz loc_10035B8  +
test byte ptr [eax+1Ch] 1 +
jz loc_10035B8  +
mov ecx esi +
test esi esi +
jle loc_100361D  +
and ecx 0FFFFh +
or ecx ebx +
push ecx  +
push offset dword_1001270  +
push 1Ch  +
jmp loc_10035A8  +
***
call ebx  +
and dword ptr [esi] 0 +
mov [esi+4] eax +
mov eax off_1005008 +
cmp eax edi +
jz loc_1003652  +
test byte ptr [eax+1Ch] 1 +
jz loc_1003652  +
push 0  +
push offset dword_1001270  +
push 1Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001859  +
xor eax eax +
call __EH_epilog3  +
retn 30h  +
***
call ds:InterlockedDecrement  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 4 +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
push 0  +
mov eax offset loc_10040F1 +
call __EH_prolog3  +
mov edi [ebp+14h] +
and dword ptr [edi] 0 +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_10036B2  +
mov edi 80040110h +
jmp loc_10036F7  +
push 8  +
call sub_1001CC3  +
pop ecx  +
mov ecx eax +
mov [ebp+14h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_10036D0  +
call sub_1002F46  +
mov esi eax +
jmp loc_10036D2  +
xor esi esi +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jnz loc_10036E1  +
mov edi 8007000Eh +
jmp loc_10036F7  +
mov eax [esi] +
push edi  +
push dword ptr [ebp+10h]  +
push esi  +
call dword ptr [eax]  +
mov edi eax +
test edi edi +
jge loc_10036F7  +
push esi  +
call sub_10019EA  +
pop ecx  +
mov eax edi +
call __EH_epilog3  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+0Ch] 0 +
push offset unk_1005098  +
jz loc_100371E  +
call ds:InterlockedIncrement  +
jmp loc_1003724  +
call ds:InterlockedDecrement  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1003661  +
test [ebp+arg_0] 1 +
jz loc_1003749  +
push esi  +
call sub_10019EA  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
and dword ptr [eax] 0 +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
push 4  +
pop ecx  +
mov edi offset dword_100141C +
xor edx edx +
cmps   +
jz loc_1003784  +
mov esi [ebp+0Ch] +
push 4  +
pop ecx  +
mov edi offset dword_100142C +
xor edx edx +
cmps   +
jnz loc_1003797  +
mov ecx [ebp+8] +
mov [eax] ecx +
test ecx ecx +
jz loc_1003797  +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+4]  +
xor eax eax +
jmp loc_100379C  +
mov eax 80004002h +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
test eax eax +
jnz loc_10037CD  +
test esi esi +
jz loc_10037CB  +
push 1  +
mov ecx esi +
call sub_100372F  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
and dword ptr [esi+4] 0 +
push offset Addend  +
mov dword ptr [esi] offset off_10013E0 +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_1003816  +
test eax eax +
jnz loc_100381B  +
mov ecx [esi] +
test ecx ecx +
jz loc_1003813  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_1003807  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_10050C0 +
push offset dword_10050B0  +
push dword_10050BC  +
mov dword_10050B0 eax +
push offset unk_10050A0  +
push offset unk_10050A4  +
push offset unk_100509C  +
call ds:__getmainargs  +
add esp 14h +
mov dword_10050AC eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+var_1C] ebx +
mov [ebp+ms_exc.disabled] ebx +
lea eax [ebp+StartupInfo] +
push eax  +
call ds:GetStartupInfoA  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [ebp+ms_exc.disabled] 1 +
mov eax large fs:18h +
mov esi [eax+4] +
mov edi offset Destination +
push 0  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
test eax eax +
jz loc_10038BB  +
cmp eax esi +
jnz loc_10038AE  +
xor esi esi +
inc esi  +
mov ebx esi +
jmp loc_10038BE  +
push 3E8h  +
call ds:Sleep  +
jmp loc_1003895  +
xor esi esi +
inc esi  +
mov eax dword_10053EC +
cmp eax esi +
jnz loc_10038D1  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_1003900  +
mov eax dword_10053EC +
test eax eax +
jnz loc_10038FA  +
mov dword_10053EC esi +
push offset dword_10011B4  +
push offset dword_10011A8  +
call sub_10037FA  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1003900  +
jmp loc_1003A28  +
mov dword_10050B8 esi +
mov eax dword_10053EC +
cmp eax esi +
jnz loc_1003924  +
push offset dword_10011A4  +
push offset dword_1001198  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_10053EC 2 +
test ebx ebx +
jnz loc_1003930  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_10053FC 0 +
jz loc_1003954  +
push offset dword_10053FC  +
call sub_1003D39  +
pop ecx  +
test eax eax +
jz loc_1003954  +
push 0  +
push 2  +
push 0  +
call dword_10053FC  +
mov eax ds:_acmdln +
mov esi [eax] +
mov [ebp+var_20] esi +
mov al [esi] +
cmp al 20h +
ja $LN61  +
test al al +
jz loc_100396E  +
cmp [ebp+var_1C] 0 +
jnz $LN61  +
mov al [esi] +
test al al +
jz loc_100397E  +
cmp al 20h +
ja loc_100397E  +
inc esi  +
mov [ebp+var_20] esi +
jmp loc_100396E  +
test byte ptr [ebp+StartupInfo.dwFlags] 1 +
jz loc_100398A  +
movzx eax [ebp+StartupInfo.wShowWindow] +
jmp loc_100398D  +
push 0Ah  +
pop eax  +
push eax  +
push esi  +
push 0  +
push 1000000h  +
call _WinMain@16  +
mov dword_10050B4 eax +
cmp dword_10050A8 0 +
jnz $LN62  +
push eax  +
call ds:exit  +
cmp al 22h +
jnz loc_10039BF  +
xor ecx ecx +
cmp [ebp+var_1C] ecx +
setz cl  +
mov [ebp+var_1C] ecx +
movzx eax al +
push eax  +
call ds:_ismbblead  +
pop ecx  +
test eax eax +
jz loc_10039D2  +
inc esi  +
mov [ebp+var_20] esi +
inc esi  +
jmp loc_100395B  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-24h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-24h] +
mov dword_10050B4 eax +
cmp dword_10050A8 0 +
jnz $LN62  +
push eax  +
call ds:_exit  +
cmp dword_10050B8 0 +
jnz loc_1003A13  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_10050B4 +
jmp loc_1003A34  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_1003A51  +
xor eax eax +
jmp loc_1003A9E  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_1003A4D  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_1003A8B  +
cmp ecx 20Bh +
jnz loc_1003A4D  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_1003A4D  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_1003A99  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_1003A4D  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 2  +
mov dword_10050A8 eax +
call sub_1003ED2  +
push eax  +
call ds:__set_app_type  +
or dword_10053F4 0FFFFFFFFh +
or dword_10053F8 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_10050C8 +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_10050C4 +
mov [eax] ecx +
call sub_1003E64  +
cmp dword_1005034 0 +
jnz loc_1003AF7  +
push offset sub_1003E64  +
call ds:__setusermatherr  +
pop ecx  +
call sub_1003E4C  +
xor eax eax +
retn   +
***
call sub_1003F11  +
jmp ___tmainCRTStartup  +
***
cmp ecx dword_1005024 +
jnz loc_1003B2A  +
retn 0  +
jmp loc_1003FA7  +
***
jmp ds:__CxxFrameHandler3  +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_1005024 +
xor eax ebp +
push eax  +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
mov ecx [ebp-0Ch] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
call __SEH_prolog4  +
pop ecx  +
retn   +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
call sub_1003B9C  +
neg eax  +
sbb eax eax +
neg eax  +
pop ecx  +
dec eax  +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_1003C7F  +
cmp dword ptr [eax+10h] 3 +
jnz loc_1003C7F  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_1003C79  +
cmp eax 19930521h +
jz loc_1003C79  +
cmp eax 19930522h +
jz loc_1003C79  +
cmp eax 1994000h +
jnz loc_1003C7F  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset dword_1003C40+2)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_1003CC6  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_1003CC2  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_1003D2D  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1003D25  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_1003D2F  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_1003D15  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_1003CB0  +
pop ecx  +
test eax eax +
jz loc_1003D96  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_1003CF0  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1003D96  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_1003D9F  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_1003B1F  +
push offset dword_1005024  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1003EC5  +
cmp ecx 0FFFFFFFFh +
jz loc_1003EC5  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_1003EBE  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_1003EBE  +
cmp edx 10000000h +
jnb loc_1003EBE  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_1003EBE  +
jmp loc_1003EB9  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_1003F07  +
push eax  +
call sub_1003E6C  +
test eax eax +
jz loc_1003F07  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_1003EFC  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_1003F07  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1005024 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_1003F43  +
test eax ebx +
jz loc_1003F43  +
not eax  +
mov dword_1005028 eax +
jmp loc_1003F9E  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_1003F8A  +
test dword_1005024 ebx +
jnz loc_1003F8F  +
mov esi 0BB40E64Fh +
mov dword_1005024 esi +
not esi  +
mov dword_1005028 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_10051D0 eax +
mov dword_10051CC ecx +
mov dword_10051C8 edx +
mov dword_10051C4 ebx +
mov dword_10051C0 esi +
mov dword_10051BC edi +
mov word_10051E8 ss +
mov word_10051DC cs +
mov word_10051B8 ds +
mov word_10051B4 es +
mov word_10051B0 fs +
mov word_10051AC gs +
pushf   +
pop dword_10051E0  +
mov eax [ebp+0] +
mov dword_10051D4 eax +
mov eax [ebp+4] +
mov dword_10051D8 eax +
lea eax [ebp+8] +
mov dword_10051E4 eax +
mov eax [ebp-320h] +
mov dword_1005120 10001h +
mov eax dword_10051D8 +
mov dword_10050DC eax +
mov dword_10050D0 0C0000409h +
mov dword_10050D4 1 +
mov eax dword_1005024 +
mov [ebp-328h] eax +
mov eax dword_1005028 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
push dword ptr [ebp-10h]  +
call sub_10019EA  +
pop ecx  +
retn   +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1003B1F  +
mov eax offset dword_1004138 +
jmp loc_1003B40  +
***
retn   +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10h] +
xor ecx eax +
call sub_1003B1F  +
mov eax offset dword_1004164 +
jmp loc_1003B40  +
***
mov ecx offset unk_1005010 +
jmp sub_1001568  +
***
push 65676E61h  +
add [edx+656C5304h] dh +
jo $+3  +
jmp near ptr 756E9299h  +
***
