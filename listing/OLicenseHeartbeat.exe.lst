call sub_4A19EC  +
call sub_4068D1  +
push offset sub_4AA83C  +
call sub_4A070F  +
pop ecx  +
retn   +
***
push offset sub_4AA846  +
call sub_4A070F  +
pop ecx  +
retn   +
***
push offset sub_4AA857  +
call sub_4A070F  +
pop ecx  +
retn   +
***
push offset sub_4AA86F  +
call sub_4A070F  +
pop ecx  +
retn   +
***
push offset sub_4AA887  +
call sub_4A070F  +
pop ecx  +
retn   +
***
push offset sub_4AA89F  +
call sub_4A070F  +
pop ecx  +
retn   +
***
push offset sub_4AA8B7  +
call sub_4A070F  +
pop ecx  +
retn   +
***
call ds:_Mtx_init_in_situ  +
mov eax dword_50BF84 +
call sub_4068D1  +
push offset sub_4AA8F4  +
call sub_4A070F  +
pop ecx  +
retn   +
***
push offset sub_4AA8FE  +
call sub_4A070F  +
pop ecx  +
retn   +
***
push offset sub_4AA90F  +
call sub_4A070F  +
pop ecx  +
retn   +
***
call sub_4068D1  +
push offset sub_4AA931  +
call sub_4A070F  +
pop ecx  +
retn   +
***
call sub_422230  +
push offset sub_4AAAC0  +
call sub_4A070F  +
pop ecx  +
retn   +
***
call ds:_Mtx_init_in_situ  +
push offset sub_4AAAE5  +
call sub_4A070F  +
add esp 0Ch +
retn   +
***
retn   +
***
call ds:_Mtx_init_in_situ  +
push offset sub_4AAB09  +
call sub_4A070F  +
add esp 0Ch +
retn   +
***
call sub_42F377  +
mov eax dword_50BF84 +
push offset nullsub_3  +
push ecx  +
call ds:_Mtx_init_in_situ  +
push offset sub_4AAB46  +
call sub_4A070F  +
add esp 0Ch +
retn   +
***
call ds:_Mtx_init_in_situ  +
push offset sub_4AAB62  +
call sub_4A070F  +
add esp 0Ch +
retn   +
***
call sub_4068D1  +
call sub_4068D1  +
push offset loc_4AAC38  +
call sub_4A070F  +
pop ecx  +
retn   +
***
and dword_5098FC 0C0000000h +
xor eax eax +
push edi  +
push 8  +
pop ecx  +
mov edi offset unk_509900 +
stos   +
push offset nullsub_4  +
call sub_4A070F  +
pop ecx  +
pop edi  +
retn   +
***
mov dword_50BCD8 eax +
mov dword_50BCDC eax +
mov dword_50BCE0 eax +
retn   +
***
call sub_4A070F  +
pop ecx  +
retn   +
***
call ds:_Mtx_init_in_situ  +
mov ecx offset unk_50BD18 +
push ecx  +
call ds:_Mtx_init_in_situ  +
push offset sub_4AAC92  +
call sub_4A070F  +
add esp 0Ch +
retn   +
***
mov ecx offset stru_50BD88 +
mov ecx offset stru_50BDA0 +
call ds:_Mtx_init_in_situ  +
mov eax dword_50BF84 +
mov dword_509954 eax +
mov dword_50BF84 offset dword_509954 +
retn   +
***
mov eax dword_50BF84 +
push 102h  +
push offset unk_50998C  +
mov dword_509974 eax +
mov dword_50BF84 offset dword_509974 +
call ds:_Mtx_init_in_situ  +
push offset sub_4AAD00  +
mov byte_5099D8 0 +
call sub_4A070F  +
add esp 0Ch +
retn   +
***
push offset sub_4AAD0A  +
call sub_4A070F  +
pop ecx  +
retn   +
***
push offset sub_4AAD14  +
call sub_4A070F  +
pop ecx  +
retn   +
***
push eax  +
call ds:srand  +
push offset sub_4AAD28  +
call sub_4A070F  +
add esp 0Ch +
retn   +
***
call loc_456D91  +
mov ecx offset dword_50BE14 +
mov ecx offset dword_50BE38 +
call ds:_Mtx_init_in_situ  +
mov eax dword_50BF84 +
mov eax dword_50BF84 +
call sub_4068D1  +
push offset sub_4AAD96  +
call sub_4A070F  +
pop ecx  +
retn   +
***
push offset sub_4AADA0  +
call sub_4A070F  +
pop ecx  +
retn   +
***
push offset sub_4AADB8  +
call sub_4A070F  +
pop ecx  +
retn   +
***
push offset sub_4AADD0  +
call sub_4A070F  +
pop ecx  +
retn   +
***
mov eax dword_50BF84 +
mov dword_509A5C eax +
mov dword_50BF84 offset dword_509A5C +
retn   +
***
push offset sub_4AAE0A  +
call sub_4A070F  +
pop ecx  +
retn   +
***
mov eax dword_50BF84 +
mov eax dword_50BF84 +
call ds:_Mtx_init_in_situ  +
push offset loc_4AAE7B  +
call sub_4A070F  +
add esp 0Ch +
retn   +
***
call sub_4068D1  +
call sub_4068D1  +
mov eax dword_50BF84 +
call sub_4068D1  +
call sub_4068D1  +
call sub_4068D1  +
call sub_4068D1  +
call ds:_Mtx_init_in_situ  +
push offset nullsub_7  +
pop ecx  +
push ecx  +
push 28h  +
call ds:malloc  +
pop ecx  +
test eax eax +
jnz loc_4017B0  +
call ds:?_Xbad_alloc@std@@YAXXZ  +
push 2  +
push offset unk_50BEF8  +
mov [eax] eax +
mov [eax+4] eax +
mov [eax+8] eax +
mov word ptr [eax+0Ch] 101h +
mov dword_50BEF0 eax +
call ds:_Mtx_init_in_situ  +
push offset sub_4AAF97  +
call sub_4A070F  +
add esp 0Ch +
leave   +
retn   +
***
push offset sub_4AAFAD  +
call sub_4A070F  +
pop ecx  +
retn   +
***
push offset sub_4AAFC5  +
call sub_4A070F  +
pop ecx  +
retn   +
***
mov eax dword_50BF84 +
call sub_4068D1  +
pop ecx  +
call sub_4068D1  +
sub esp 390h +
mov ecx offset unk_50B1E0 +
call j__Mtx_init_in_situ  +
push offset loc_4AB038  +
call sub_4A070F  +
add esp 0Ch +
retn   +
***
lea eax [ebp+arg_C] +
mov eax [ebp+arg_0] +
push esi  +
lea eax [ecx+4] +
cmp dword ptr [ecx+4] 0 +
push esi  +
and dword ptr [ecx+4] 0 +
sub esp 0Ch +
push esi  +
or edi 0FFFFFFFFh +
int 3  +
***
push esi  +
cmp byte ptr [ecx+8] 0 +
push [ebp+dwBytes]  +
cmp [ebp+lpMem] 0 +
mov edx [ebp+arg_0] +
push [ebp+lpMem]  +
push esi  +
mov eax large fs:2Ch +
mov edx [ebp+arg_0] +
mov ecx [ecx+4] +
mov edx [ebp+arg_4] +
push esi  +
test edx edx +
js loc_401CFD  +
mov eax 7FFFFFFFh +
sub eax edx +
cmp eax 1 +
jl loc_401CFD  +
inc edx  +
lea esi [edx+7] +
and esi 0FFFFFFF8h +
cmp edx esi +
jg loc_401CFD  +
mov eax esi +
mul  [ebp+arg_8] +
test edx edx +
ja loc_401CFD  +
jb loc_401CDD  +
cmp eax 0FFFFFFFFh +
ja loc_401CFD  +
cmp eax 0FFFFFFEFh +
ja loc_401CFD  +
mov ecx [ecx+4] +
lea edx [eax+10h] +
push edx  +
push [ebp+arg_0]  +
mov eax [ecx] +
call dword ptr [eax+8]  +
test eax eax +
jz loc_401CFD  +
lea ecx [esi-1] +
mov [eax+8] ecx +
jmp loc_401CFF  +
xor eax eax +
pop esi  +
pop ebp  +
retn 0Ch  +
***
test [ebp+arg_0] 1 +
push ebx  +
xor eax eax +
mov [ecx] eax +
mov [ecx+4] eax +
mov [ecx+8] eax +
mov [ecx+0Ch] eax +
mov [ecx+10h] eax +
mov [ecx+14h] eax +
mov [ecx+18h] eax +
mov [ecx+1Ch] eax +
mov [ecx+20h] eax +
mov [ecx+24h] eax +
mov [ecx+28h] eax +
mov [ecx+2Ch] eax +
mov [ecx+30h] eax +
mov [ecx+34h] eax +
mov [ecx+38h] eax +
mov [ecx+3Ch] eax +
mov [ecx+40h] eax +
mov [ecx+44h] eax +
mov [ecx+48h] eax +
mov [ecx+4Ch] eax +
mov [ecx+50h] eax +
mov [ecx+54h] eax +
mov [ecx+58h] eax +
mov [ecx+5Ch] eax +
mov [ecx+60h] eax +
mov [ecx+64h] eax +
mov [ecx+68h] eax +
mov [ecx+6Ch] eax +
mov [ecx+70h] eax +
mov [ecx+74h] eax +
mov [ecx+78h] eax +
mov [ecx+7Ch] eax +
mov [ecx+80h] eax +
mov [ecx+84h] eax +
mov [ecx+88h] eax +
mov [ecx+8Ch] eax +
mov [ecx+90h] eax +
mov [ecx+94h] eax +
mov [ecx+98h] eax +
mov [ecx+9Ch] eax +
mov [ecx+0A0h] eax +
mov [ecx+0A4h] eax +
mov [ecx+0A8h] eax +
mov [ecx+0ACh] eax +
mov [ecx+0B0h] eax +
mov [ecx+0B4h] eax +
mov [ecx+0B8h] eax +
retn   +
***
mov eax [edi+0B8h] +
test eax eax +
jz loc_40217E  +
push esi  +
mov esi ds:GetProcAddress +
push offset aGettotalprogre  +
push eax  +
call esi  +
push offset aIsclick2run  +
push dword ptr [edi+0B8h]  +
mov [edi] eax +
call esi  +
push offset aC2rversion  +
push dword ptr [edi+0B8h]  +
mov [edi+4] eax +
call esi  +
push offset aIsroaming  +
push dword ptr [edi+0B8h]  +
mov [edi+8] eax +
call esi  +
push offset aIsosppready  +
push dword ptr [edi+0B8h]  +
mov [edi+0Ch] eax +
call esi  +
push offset aIsstreaming  +
push dword ptr [edi+0B8h]  +
mov [edi+10h] eax +
call esi  +
push offset aClearpropertyb  +
push dword ptr [edi+0B8h]  +
mov [edi+14h] eax +
call esi  +
push offset aSetpropertybag  +
push dword ptr [edi+0B8h]  +
mov [edi+18h] eax +
call esi  +
push offset aInstallproofof  +
push dword ptr [edi+0B8h]  +
mov [edi+1Ch] eax +
call esi  +
push offset aUninstallproof  +
push dword ptr [edi+0B8h]  +
mov [edi+20h] eax +
call esi  +
push offset aHandleschedule  +
push dword ptr [edi+0B8h]  +
mov [edi+24h] eax +
call esi  +
push offset aMigrateospptos  +
push dword ptr [edi+0B8h]  +
mov [edi+28h] eax +
call esi  +
push offset aLicenserepair  +
push dword ptr [edi+0B8h]  +
mov [edi+2Ch] eax +
call esi  +
push offset aStartscenario  +
push dword ptr [edi+0B8h]  +
mov [edi+30h] eax +
call esi  +
push offset aStartfb  +
push dword ptr [edi+0B8h]  +
mov [edi+34h] eax +
call esi  +
push offset aGetproperty  +
push dword ptr [edi+0B8h]  +
mov [edi+38h] eax +
call esi  +
push offset aGetpackageroot  +
push dword ptr [edi+0B8h]  +
mov [edi+3Ch] eax +
call esi  +
push offset aGetinstalledpr  +
push dword ptr [edi+0B8h]  +
mov [edi+40h] eax +
call esi  +
push offset aAddofficeprodu  +
push dword ptr [edi+0B8h]  +
mov [edi+44h] eax +
call esi  +
push offset aLaunch  +
push dword ptr [edi+0B8h]  +
mov [edi+48h] eax +
call esi  +
push offset aEnsureconnecti  +
push dword ptr [edi+0B8h]  +
mov [edi+4Ch] eax +
call esi  +
push offset aGetupdatestatu  +
push dword ptr [edi+0B8h]  +
mov [edi+50h] eax +
call esi  +
push offset aHrupdatenow  +
push dword ptr [edi+0B8h]  +
mov [edi+54h] eax +
call esi  +
push offset aSaverecording  +
push dword ptr [edi+0B8h]  +
mov [edi+58h] eax +
call esi  +
push offset aGetstatusvalue  +
push dword ptr [edi+0B8h]  +
mov [edi+5Ch] eax +
call esi  +
push offset aHrgetareupdate  +
push dword ptr [edi+0B8h]  +
mov [edi+60h] eax +
call esi  +
push offset aHrgetareupda_0  +
push dword ptr [edi+0B8h]  +
mov [edi+64h] eax +
call esi  +
push offset aHrgetareupda_1  +
push dword ptr [edi+0B8h]  +
mov [edi+68h] eax +
call esi  +
push offset aHrgetareupda_2  +
push dword ptr [edi+0B8h]  +
mov [edi+6Ch] eax +
call esi  +
push offset aHrgetareupda_3  +
push dword ptr [edi+0B8h]  +
mov [edi+70h] eax +
call esi  +
push offset aHrgetexecuting  +
push dword ptr [edi+0B8h]  +
mov [edi+74h] eax +
call esi  +
push offset aHrsetareupdate  +
push dword ptr [edi+0B8h]  +
mov [edi+78h] eax +
call esi  +
push offset aHrsetareupda_0  +
push dword ptr [edi+0B8h]  +
mov [edi+7Ch] eax +
call esi  +
push offset aHrapplyupdates  +
push dword ptr [edi+0B8h]  +
mov [edi+80h] eax +
call esi  +
push offset aHrdownloadupda  +
push dword ptr [edi+0B8h]  +
mov [edi+84h] eax +
call esi  +
push offset aHrrefreshstate  +
push dword ptr [edi+0B8h]  +
mov [edi+88h] eax +
call esi  +
push offset aIsrepairrequir  +
push dword ptr [edi+0B8h]  +
mov [edi+8Ch] eax +
call esi  +
push offset aRepair  +
push dword ptr [edi+0B8h]  +
mov [edi+90h] eax +
call esi  +
push offset aStartprogressa  +
push dword ptr [edi+0B8h]  +
mov [edi+94h] eax +
call esi  +
push offset aMarkfinalinteg  +
push dword ptr [edi+0B8h]  +
mov [edi+98h] eax +
call esi  +
mov [edi+9Ch] eax +
push offset aHrbeginupdates  +
push dword ptr [edi+0B8h]  +
call esi  +
push offset aHrgetareupda_4  +
push dword ptr [edi+0B8h]  +
mov [edi+0A0h] eax +
call esi  +
push offset aHrgetpendingup  +
push dword ptr [edi+0B8h]  +
mov [edi+0A4h] eax +
call esi  +
push offset aHrmodifyoffice  +
push dword ptr [edi+0B8h]  +
mov [edi+0A8h] eax +
call esi  +
push offset aHrgetchannelid  +
push dword ptr [edi+0B8h]  +
mov [edi+0ACh] eax +
call esi  +
push offset aHractivate  +
push dword ptr [edi+0B8h]  +
mov [edi+0B0h] eax +
call esi  +
mov [edi+0B4h] eax +
pop esi  +
pop edi  +
retn   +
***
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jz loc_40219F  +
call ds:_Thrd_id  +
cmp [esi] eax +
jz loc_40219F  +
push 0  +
push 131F4C3h  +
call Mso20Win32Client_2055  +
pop esi  +
retn   +
***
push ecx  +
push esi  +
mov [ecx] edx +
sub esp 90h +
cmp dword ptr [edx+14h] 8 +
call sub_4A19EC  +
call sub_4A19EC  +
push esi  +
sub esp 2Ch +
mov eax [ecx] +
mov edx [ecx] +
push esi  +
push edi  +
push 67h  +
movzx eax word ptr [edx] +
mov edi eax +
mov esi eax +
lea eax [edx+2] +
mov [ecx] eax +
pop eax  +
cmp di ax +
ja loc_4026E6  +
jz loc_402709  +
sub esi 43h +
jz loc_402709  +
sub esi 10h +
jz loc_402709  +
sub esi 5 +
jz loc_402709  +
sub esi 0Bh +
jz loc_402709  +
sub esi 1 +
jz loc_402709  +
dec esi  +
sub esi 1 +
jmp loc_402703  +
sub esi 69h +
jz loc_402709  +
sub esi 6 +
jz loc_402709  +
sub esi 1 +
jz loc_402709  +
sub esi 3 +
jz loc_402709  +
dec esi  +
sub esi 1 +
jz loc_402709  +
sub esi 3 +
jz loc_402709  +
xor al al +
jmp loc_40270B  +
mov al 1 +
pop edi  +
pop esi  +
retn   +
***
mov eax [ecx] +
test eax eax +
jz locret_40271E  +
and dword ptr [ecx] 0 +
push eax  +
call SysFreeString  +
retn   +
***
mov dword ptr [ecx] 30303030h +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_4] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_4] +
mov edx [ecx] +
sub esp 38Ch +
test [ebp+arg_0] 1 +
call sub_4A19EC  +
call sub_4A19EC  +
call sub_4A19EC  +
sub esp 398h +
call sub_4A19EC  +
call sub_4A19EC  +
mov eax [ecx] +
sub esp 394h +
mov dword ptr [esi] offset off_4AE278 +
sub esp 398h +
cmp dword ptr [esi+20h] 0 +
push esi  +
sub esp 0Ch +
sub esp 0Ch +
mov edx [ebp+arg_4] +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
sub esp 174h +
push [ebp+arg_0]  +
push esi  +
lea ecx [esi+118h] +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
push ecx  +
mov al [ebp+arg_0] +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
mov dword ptr [ecx] offset off_4AE40C +
push esi  +
push 0FFFFFFFFh  +
call sub_4A1A58  +
mov eax [ebp+10h] +
xor edi edi +
mov [ebp-2A8h] edi +
xor ecx ecx +
mov [ebp-24Ch] edi +
mov [ebp-24Ch] cx +
lea ecx [ebp-24Ch] +
push eax  +
mov [ebp-23Ch] edi +
mov dword ptr [ebp-238h] 7 +
call sub_4068D1  +
push 8  +
mov [ebp-4] edi +
lea ecx [ebp-24Ch] +
mov eax [ebp-23Ch] +
lea edx [ebp-24Ch] +
pop ebx  +
cmp [ebp-238h] ebx +
cmovnb ecx [ebp-24Ch] +
cmovnb edx [ebp-24Ch] +
push edx  +
mov edx ds:tolower +
lea eax [ecx+eax*2] +
lea ecx [ebp-24Ch] +
cmovnb ecx [ebp-24Ch] +
push eax  +
push ecx  +
lea ecx [ebp-2A8h] +
call sub_4071EF  +
xor eax eax +
push edi  +
inc eax  +
push edi  +
mov [ebp-4] al +
call ds:CoInitializeEx  +
push 1  +
test eax eax +
mov esi edi +
pop eax  +
push edi  +
push edi  +
cmovns esi eax +
push offset aC2r32_dll  +
mov [ebp-2A8h] esi +
call sub_401D2D  +
push 208h  +
lea eax [ebp-21Ch] +
push edi  +
push eax  +
call j_memset  +
add esp 0Ch +
lea ecx [ebp-384h] +
call sub_401DA1  +
push offset aC2r32_dll  +
call ds:GetModuleHandleW  +
lea ecx [ebp-384h] +
mov [ebp-2CCh] eax +
call sub_401E61  +
cmp [ebp-344h] edi +
jnz loc_403E36  +
mov edi 80004005h +
jmp loc_403E54  +
push 104h  +
lea eax [ebp-21Ch] +
push eax  +
call dword ptr [ebp-344h]  +
mov [ebp-298h] eax +
test eax eax +
jns loc_403EA3  +
mov edi eax +
test esi esi +
jz loc_403E63  +
call ds:CoUninitialize  +
sub esi 1 +
jnz loc_403E58  +
mov eax [ebp-238h] +
cmp eax ebx +
jb loc_403E9C  +
mov ecx [ebp-24Ch] +
lea eax ds:2[eax*2] +
mov edx ecx +
cmp eax 1000h +
jb loc_403E94  +
mov ecx [ecx-4] +
sub edx ecx +
lea eax [edx-4] +
cmp eax 1Fh +
ja loc_404378  +
push ecx  +
call ds:free  +
pop ecx  +
mov eax edi +
jmp loc_403F85  +
xor eax eax +
mov [ebp-234h] edi +
mov [ebp-234h] ax +
lea ecx [ebp-234h] +
lea eax [ebp-21Ch] +
mov [ebp-224h] edi +
push eax  +
mov dword ptr [ebp-220h] 7 +
call sub_4068D1  +
mov byte ptr [ebp-4] 2 +
cmp dword ptr [ebp-224h] 0 +
jnz loc_403F8D  +
mov eax [ebp-220h] +
cmp eax ebx +
mov ebx 1000h +
jb loc_403F20  +
mov ecx [ebp-234h] +
lea eax ds:2[eax*2] +
mov edx ecx +
cmp eax ebx +
jb loc_403F18  +
mov ecx [ecx-4] +
sub edx ecx +
lea eax [edx-4] +
cmp eax 1Fh +
ja loc_404378  +
push ecx  +
call ds:free  +
pop ecx  +
xor eax eax +
mov [ebp-224h] edi +
mov dword ptr [ebp-220h] 7 +
mov [ebp-234h] ax +
test esi esi +
jz loc_403F48  +
call ds:CoUninitialize  +
sub esi 1 +
jnz loc_403F3D  +
mov eax [ebp-238h] +
cmp eax 8 +
jb loc_403F7F  +
mov ecx [ebp-24Ch] +
lea eax ds:2[eax*2] +
mov edx ecx +
cmp eax ebx +
jb loc_403F77  +
mov ecx [ecx-4] +
sub edx ecx +
lea eax [edx-4] +
cmp eax 1Fh +
ja loc_404378  +
push ecx  +
call ds:free  +
pop ecx  +
mov eax [ebp-298h] +
call sub_4A19AD  +
retn 10h  +
push 10h  +
pop ecx  +
lea eax [ebp-298h] +
mov [ebp-298h] ecx +
push eax  +
lea eax [ebp-234h] +
push eax  +
push ecx  +
lea ecx [ebp-27Ch] +
call sub_4081ED  +
lea eax [ebp-27Ch] +
push eax  +
lea ecx [ebp-294h] +
call sub_406A8F  +
lea ecx [ebp-27Ch] +
mov dword ptr [ebp-4] 2 +
call sub_406DE4  +
mov byte ptr [ebp-4] 4 +
lea eax [ebp-294h] +
cmp [ebp-280h] ebx +
cmovnb eax [ebp-294h] +
push eax  +
call ds:SetDllDirectoryW  +
push 36h  +
call Mso20Win32Client_665  +
call sub_40581B  +
test al al +
jnz loc_4040B6  +
lea ecx [ebp-294h] +
call sub_406DE4  +
mov eax [ebp-220h] +
cmp eax ebx +
mov ebx 1000h +
jb loc_40404D  +
mov ecx [ebp-234h] +
lea eax ds:2[eax*2] +
mov edx ecx +
cmp eax ebx +
jb loc_404045  +
mov ecx [ecx-4] +
sub edx ecx +
lea eax [edx-4] +
cmp eax 1Fh +
ja loc_404378  +
push ecx  +
call ds:free  +
pop ecx  +
xor eax eax +
mov [ebp-224h] edi +
mov dword ptr [ebp-220h] 7 +
mov [ebp-234h] ax +
test esi esi +
jz loc_404075  +
call ds:CoUninitialize  +
sub esi 1 +
jnz loc_40406A  +
mov eax [ebp-238h] +
cmp eax 8 +
jb loc_4040AC  +
mov ecx [ebp-24Ch] +
lea eax ds:2[eax*2] +
mov edx ecx +
cmp eax ebx +
jb loc_4040A4  +
mov ecx [ecx-4] +
sub edx ecx +
lea eax [edx-4] +
cmp eax 1Fh +
ja loc_404378  +
push ecx  +
call ds:free  +
pop ecx  +
mov eax 80004005h +
jmp loc_403F85  +
call sub_4392BF  +
call Mso30Win32Client_2075  +
xor eax eax +
mov [ebp-264h] edi +
mov [ebp-254h] edi +
mov dword ptr [ebp-250h] 7 +
mov [ebp-264h] ax +
lea eax [ebp-2C4h] +
push eax  +
call Mso30Win32Client_1909  +
mov byte ptr [ebp-4] 6 +
lea ecx [ebp-2C4h] +
cmp dword ptr [ebp-2C4h] 0 +
jnz loc_404125  +
lea eax [ebp-27Ch] +
push eax  +
call sub_406FF3  +
push eax  +
lea ecx [ebp-264h] +
call sub_406A58  +
lea ecx [ebp-27Ch] +
call sub_406DE4  +
jmp loc_40417A  +
call sub_40701B  +
mov ebx eax +
call Mso20Win32Client_688  +
push eax  +
mov ecx ebx +
call sub_407234  +
mov ecx 28D079Fh +
mov eax [eax] +
mov [ebp-26Ch] eax +
xor eax eax +
mov [ebp-268h] ax +
lea eax [ebp-274h] +
push eax  +
push offset aFailedToGetPro  +
push 0Ah  +
mov dword ptr [ebp-274h] offset off_4AE01C +
mov dword ptr [ebp-270h] offset aGetallproductr +
call sub_407267  +
push 8  +
pop ebx  +
call sub_41AE59  +
cmp [ebp-250h] ebx +
mov ecx [eax] +
mov edx [ecx+0F8h] +
lea ecx [ebp-264h] +
cmovnb ecx [ebp-264h] +
push ecx  +
lea ecx [ebp-2A0h] +
push ecx  +
mov ecx eax +
call edx  +
mov byte ptr [ebp-4] 7 +
mov eax [ebp-2A0h] +
mov eax [eax] +
mov [ebp-298h] eax +
jmp loc_4041EB  +
lea ebx [eax+10h] +
call sub_414FCC  +
mov ecx eax +
call sub_44387A  +
push edi  +
push ebx  +
mov ecx eax +
call sub_44395B  +
test al al +
jnz loc_404310  +
lea ecx [ebp-298h] +
call sub_406312  +
mov eax [ebp-298h] +
cmp byte ptr [eax+0Dh] 0 +
jz loc_4041BA  +
mov ebx 1000h +
mov edx offset unk_508B70 +
lea ecx [ebp-24Ch] +
call sub_406F9F  +
test al al +
jz loc_4043A2  +
call sub_404C7C  +
mov [ebp-298h] eax +
call sub_405AC9  +
mov ecx [ebp-2A0h] +
lea eax [ebp-2A0h] +
push dword ptr [ecx+4]  +
mov ecx eax +
push eax  +
call sub_407FA7  +
push dword ptr [ebp-2A0h]  +
call ds:free  +
pop ecx  +
lea ecx [ebp-2C4h] +
call sub_406FCB  +
mov eax [ebp-250h] +
cmp eax 8 +
jb loc_404284  +
mov ecx [ebp-264h] +
lea eax ds:2[eax*2] +
mov edx ecx +
cmp eax ebx +
jb loc_40427C  +
mov ecx [ecx-4] +
sub edx ecx +
lea eax [edx-4] +
cmp eax 1Fh +
ja loc_404378  +
push ecx  +
call ds:free  +
pop ecx  +
xor eax eax +
mov [ebp-254h] edi +
lea ecx [ebp-294h] +
mov dword ptr [ebp-250h] 7 +
mov [ebp-264h] ax +
call sub_406DE4  +
mov eax [ebp-220h] +
cmp eax 8 +
jb loc_4042DF  +
mov ecx [ebp-234h] +
lea eax ds:2[eax*2] +
mov edx ecx +
cmp eax ebx +
jb loc_4042D7  +
mov ecx [ecx-4] +
sub edx ecx +
lea eax [edx-4] +
cmp eax 1Fh +
ja loc_404378  +
push ecx  +
call ds:free  +
pop ecx  +
xor eax eax +
mov [ebp-224h] edi +
mov dword ptr [ebp-220h] 7 +
mov [ebp-234h] ax +
test esi esi +
jz loc_403F48  +
call ds:CoUninitialize  +
sub esi 1 +
jnz loc_404300  +
jmp loc_403F48  +
xor eax eax +
mov [ebp-27Ch] edi +
mov [ebp-26Ch] edi +
mov dword ptr [ebp-268h] 7 +
mov [ebp-27Ch] ax +
lea ecx [ebp-27Ch] +
mov byte ptr [ebp-4] 8 +
call sub_4444D8  +
mov byte ptr [ebp-4] 7 +
mov ebx 1000h +
mov ecx [ebp-268h] +
mov [ebp-2A1h] al +
cmp ecx 8 +
jb loc_404386  +
mov edx [ebp-27Ch] +
lea ecx ds:2[ecx*2] +
mov eax edx +
cmp ecx ebx +
jb loc_40437E  +
mov edx [edx-4] +
sub eax edx +
add eax 0FFFFFFFCh +
cmp eax 1Fh +
jbe loc_40437E  +
call ds:_invalid_parameter_noinfo_noreturn  +
push edx  +
call ds:free  +
pop ecx  +
mov cl 3 +
call sub_4444F1  +
call sub_403BE8  +
mov cl [ebp-2A1h] +
call sub_4444F1  +
jmp loc_4041F6  +
call sub_414FCC  +
mov ecx eax +
mov edx [eax] +
call dword ptr [edx+1A8h]  +
test al al +
jz loc_4044CC  +
lea eax [ebp-298h] +
mov dword ptr [ebp-298h] offset aSkippingHeartb +
push eax  +
push ecx  +
push 32h  +
push 2Dh  +
pop edx  +
mov ecx 206940CBh +
call sub_4072B5  +
mov eax [ebp-2A0h] +
push dword ptr [eax+4]  +
lea eax [ebp-2A0h] +
push eax  +
mov ecx eax +
call sub_407FA7  +
push dword ptr [ebp-2A0h]  +
call ds:free  +
pop ecx  +
lea ecx [ebp-2C4h] +
call sub_406FCB  +
mov eax [ebp-250h] +
cmp eax 8 +
jb loc_404440  +
mov ecx [ebp-264h] +
lea eax ds:2[eax*2] +
mov edx ecx +
cmp eax ebx +
jb loc_404438  +
mov ecx [ecx-4] +
sub edx ecx +
lea eax [edx-4] +
cmp eax 1Fh +
ja loc_404378  +
push ecx  +
call ds:free  +
pop ecx  +
xor eax eax +
mov [ebp-254h] edi +
lea ecx [ebp-294h] +
mov dword ptr [ebp-250h] 7 +
mov [ebp-264h] ax +
call sub_406DE4  +
mov eax [ebp-220h] +
cmp eax 8 +
jb loc_40449B  +
mov ecx [ebp-234h] +
lea eax ds:2[eax*2] +
mov edx ecx +
cmp eax ebx +
jb loc_404493  +
mov ecx [ecx-4] +
sub edx ecx +
lea eax [edx-4] +
cmp eax 1Fh +
ja loc_404378  +
push ecx  +
call ds:free  +
pop ecx  +
xor eax eax +
mov [ebp-224h] edi +
mov dword ptr [ebp-220h] 7 +
mov [ebp-234h] ax +
test esi esi +
jz loc_404610  +
call ds:CoUninitialize  +
sub esi 1 +
jnz loc_4044BC  +
jmp loc_404610  +
push offset SourceName  +
push edi  +
call ds:RegisterEventSourceW  +
mov hEventLog eax +
xor eax eax +
mov [ebp-27Ch] edi +
mov [ebp-298h] edi +
mov [ebp-26Ch] edi +
mov dword ptr [ebp-268h] 7 +
mov [ebp-27Ch] ax +
mov byte ptr [ebp-4] 9 +
call sub_405B41  +
test al al +
jz loc_40464E  +
push offset aAnotherInstanc  +
push 32h  +
push 2Dh  +
push 28D07A0h  +
call Mso20Win32Client_3948  +
mov eax [ebp-2A0h] +
push dword ptr [eax+4]  +
lea eax [ebp-2A0h] +
push eax  +
mov ecx eax +
call sub_407FA7  +
push dword ptr [ebp-2A0h]  +
call ds:free  +
pop ecx  +
lea ecx [ebp-2C4h] +
call sub_406FCB  +
mov eax [ebp-250h] +
cmp eax 8 +
jb loc_40458D  +
mov ecx [ebp-264h] +
lea eax ds:2[eax*2] +
mov edx ecx +
cmp eax ebx +
jb loc_404585  +
mov ecx [ecx-4] +
sub edx ecx +
lea eax [edx-4] +
cmp eax 1Fh +
ja loc_404378  +
push ecx  +
call ds:free  +
pop ecx  +
xor eax eax +
mov [ebp-254h] edi +
lea ecx [ebp-294h] +
mov dword ptr [ebp-250h] 7 +
mov [ebp-264h] ax +
call sub_406DE4  +
mov eax [ebp-220h] +
cmp eax 8 +
jb loc_4045E8  +
mov ecx [ebp-234h] +
lea eax ds:2[eax*2] +
mov edx ecx +
cmp eax ebx +
jb loc_4045E0  +
mov ecx [ecx-4] +
sub edx ecx +
lea eax [edx-4] +
cmp eax 1Fh +
ja loc_404378  +
push ecx  +
call ds:free  +
pop ecx  +
xor eax eax +
mov [ebp-224h] edi +
mov dword ptr [ebp-220h] 7 +
mov [ebp-234h] ax +
test esi esi +
jz loc_404610  +
call ds:CoUninitialize  +
sub esi 1 +
jnz loc_404605  +
mov eax [ebp-238h] +
cmp eax 8 +
jb loc_404647  +
mov ecx [ebp-24Ch] +
lea eax ds:2[eax*2] +
mov edx ecx +
cmp eax ebx +
jb loc_40463F  +
mov ecx [ecx-4] +
sub edx ecx +
lea eax [edx-4] +
cmp eax 1Fh +
ja loc_404378  +
push ecx  +
call ds:free  +
pop ecx  +
xor eax eax +
jmp loc_403F85  +
push edi  +
push edi  +
push edi  +
push 63h  +
call Mso20Win32Client_4249  +
mov byte ptr [ebp-4] 0Ah +
call sub_405C1C  +
jmp loc_4046C5  +
mov ecx [ebp-2C8h] +
call sub_402803  +
mov [ebp-298h] eax +
mov [ebp-26Ch] eax +
xor eax eax +
mov [ebp-268h] ax +
lea eax [ebp-274h] +
push eax  +
push ecx  +
push ecx  +
mov dword ptr [ebp-274h] offset off_4AE4AC +
mov dword ptr [ebp-270h] offset aException +
call sub_4072FD  +
mov eax offset loc_4046AC +
retn   +
mov eax [ebp-298h] +
xor edi edi +
mov esi [ebp-2A8h] +
mov ebx 1000h +
mov [ebp-298h] eax +
call sub_405AC9  +
mov eax hEventLog +
test eax eax +
jz loc_4046E0  +
push eax  +
call ds:DeregisterEventSource  +
mov hEventLog edi +
mov eax [ebp-2A0h] +
push dword ptr [eax+4]  +
lea eax [ebp-2A0h] +
push eax  +
mov ecx eax +
call sub_407FA7  +
push dword ptr [ebp-2A0h]  +
call ds:free  +
pop ecx  +
lea ecx [ebp-2C4h] +
call sub_406FCB  +
mov eax [ebp-250h] +
cmp eax 8 +
jb loc_404746  +
mov ecx [ebp-264h] +
lea eax ds:2[eax*2] +
mov edx ecx +
cmp eax ebx +
jb loc_40473E  +
mov ecx [ecx-4] +
sub edx ecx +
lea eax [edx-4] +
cmp eax 1Fh +
ja loc_404378  +
push ecx  +
call ds:free  +
pop ecx  +
xor eax eax +
mov [ebp-254h] edi +
lea ecx [ebp-294h] +
mov dword ptr [ebp-250h] 7 +
mov [ebp-264h] ax +
call sub_406DE4  +
mov eax [ebp-220h] +
cmp eax 8 +
jb loc_4047A1  +
mov ecx [ebp-234h] +
lea eax ds:2[eax*2] +
mov edx ecx +
cmp eax ebx +
jb loc_404799  +
mov ecx [ecx-4] +
sub edx ecx +
lea eax [edx-4] +
cmp eax 1Fh +
ja loc_404378  +
push ecx  +
call ds:free  +
pop ecx  +
xor eax eax +
mov [ebp-224h] edi +
mov dword ptr [ebp-220h] 7 +
mov [ebp-234h] ax +
test esi esi +
jz loc_403F48  +
call ds:CoUninitialize  +
sub esi 1 +
jnz loc_4047C2  +
jmp loc_403F48  +
***
push 0FFFFFFFFh  +
push offset loc_4A20E8  +
mov eax large fs:0 +
push eax  +
sub esp 0E8h +
mov eax dword_508660 +
xor eax ebp +
mov [ebp+var_10] eax +
push ebx  +
push esi  +
push edi  +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov ebx ecx +
push 4Eh  +
lea eax [ebp+var_60] +
mov [ebp+nSize] 10h +
push 0  +
push eax  +
call j_memset  +
add esp 0Ch +
push offset aGetmachineinfo  +
push 32h  +
push 2Dh  +
pop eax  +
push eax  +
push 28D07A2h  +
call Mso20Win32Client_3948  +
push 1  +
push 18h  +
call Mso20Win32Client_1193  +
mov esi eax +
test esi esi +
jnz loc_40484A  +
call Mso20Win32Client_56  +
push 6  +
pop ecx  +
xor eax eax +
mov edi esi +
stos   +
mov eax [ebp+nSize] +
xor ecx ecx +
push 2  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
call sub_40E9C8  +
lea ecx [ebp+nSize] +
mov [ebp+var_74] eax +
push ecx  +
push eax  +
call ds:GetComputerNameW  +
test eax eax +
jnz loc_40488A  +
and dword ptr [ebx] 0 +
push esi  +
call Mso20Win32Client_3788  +
jmp loc_40498B  +
mov ecx 208h +
call sub_40E9C8  +
mov edi eax +
test edi edi +
jz loc_40487B  +
lea eax [ebp+var_F4] +
push eax  +
call Mso20Win32Client_3588  +
cmp [ebp+var_78] 0 +
jz loc_40487B  +
cmp [ebp+var_E0] 8 +
lea eax [ebp+var_F4] +
cmovnb eax [ebp+var_F4] +
push eax  +
push offset aS  +
lea eax [ebp+var_60] +
push 27h  +
push eax  +
call sub_40192F  +
add esp 10h +
cmp [ebp+var_9C] 0 +
jz loc_4048F4  +
cmp [ebp+var_98] 8 +
lea eax [ebp+var_AC] +
cmovnb eax [ebp+var_AC] +
jmp loc_4048F9  +
mov eax offset aWindows +
push eax  +
push offset aS  +
push 104h  +
push edi  +
call sub_40192F  +
add esp 10h +
lea eax [ebp+var_60] +
push 4Eh  +
push eax  +
push 0  +
call Mso20Win32Client_1022  +
push 4  +
mov [ebp+var_70] eax +
call Mso20Win32Client_653  +
xor ecx ecx +
mov [ebp+var_6C] eax +
push 2  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
call sub_40E9C8  +
lea ecx [ebp+var_6C] +
mov [ebp+var_68] eax +
push ecx  +
push eax  +
push 4  +
lea eax [ebp+var_70] +
push eax  +
call Mso20Win32Client_1579  +
cmp [ebp+var_7C] 0 +
mov eax [ebp+var_68] +
jz loc_40495F  +
push 2Dh  +
pop ecx  +
mov [eax] cx +
mov ecx [ebp+var_74] +
mov [esi+4] ecx +
mov [esi+8] edi +
mov [esi] eax +
mov dword ptr [esi+10h] 1 +
mov dword ptr [esi+14h] 10h +
cmp [ebp+var_78] 0 +
mov [ebx] esi +
jz loc_40498B  +
lea ecx [ebp+var_F4] +
call sub_4078EF  +
mov eax ebx +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_10] +
xor ecx ebp +
call sub_49FFB8  +
leave   +
retn   +
***
and esp 0FFFFFFF8h +
push 0FFFFFFFFh  +
call sub_4A19EC  +
push 0FFFFFFFFh  +
call sub_4A19EC  +
call sub_4A19EC  +
and esp 0FFFFFFF8h +
call sub_4A19B9  +
and esp 0FFFFFFF8h +
sub esp 18h +
push ebx  +
push esi  +
lea eax [esp+20h+var_10] +
mov esi offset off_4AE40C +
push eax  +
mov [esp+24h+var_14] esi +
call Mso20Win32Client_291  +
mov ecx [esp+24h+var_14] +
push off_508674  +
mov [esp+28h+var_18] offset off_4AE404 +
mov eax [ecx] +
mov eax [eax+4] +
call eax  +
test al al +
jnz loc_405B8A  +
push 0  +
push 12CB4C1h  +
call Mso20Win32Client_2055  +
mov ecx [esp+28h+var_18] +
lea eax [esp+28h+var_1C] +
and [esp+28h+var_10] 0 +
and [esp+28h+var_C] 0 +
mov [esp+28h+var_14] eax +
mov [esp+28h+var_1C] offset off_4AE1C0 +
mov eax [ecx] +
push 0FFFFFFFFh  +
mov eax [eax+8] +
call eax  +
test al al +
jnz loc_405BB9  +
mov bl 1 +
jmp loc_405BDB  +
lea ecx [esp+2Ch+var_14] +
call sub_406C81  +
xor bl bl +
jmp loc_405BDB  +
lea ecx [esp+2Ch+var_14] +
call sub_406F44  +
mov eax [esp+2Ch+var_18] +
mov ecx [eax+4] +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
mov eax [esp+2Ch+var_14] +
test eax eax +
jnz loc_405BC6  +
cmp [esp+2Ch+var_10] eax +
jz loc_405BFE  +
call ds:_Thrd_id  +
cmp [esp+2Ch+var_10] eax +
jz loc_405BFE  +
push 0  +
push 131F4C3h  +
jmp loc_405B84  +
mov ecx [esp+2Ch+var_1C] +
mov [esp+2Ch+var_20] esi +
test ecx ecx +
jz loc_405C11  +
mov edx [ecx] +
push 1  +
call dword ptr [edx+10h]  +
pop esi  +
mov al bl +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
call sub_4A1A58  +
xor esi esi +
push esi  +
push esi  +
mov [ebp-4] esi +
call ds:CoInitializeEx  +
xor ecx ecx +
mov [ebp-0E9Ch] esi +
inc ecx  +
mov [ebp-0E98h] esi +
test eax eax +
mov [ebp-0E94h] esi +
mov edi esi +
cmovns edi ecx +
mov [ebp-0EACh] edi +
mov [ebp-0EB8h] edi +
mov [ebp-4] cl +
push ecx  +
lea ecx [ebp-0E9Ch] +
call sub_409028  +
test eax eax +
jns loc_405C7A  +
mov ecx eax +
call sub_40596F  +
mov [ebp-0EA0h] esi +
lea eax [ebp-0EA0h] +
mov byte ptr [ebp-4] 2 +
push eax  +
lea eax [ebp-0E88h] +
mov [ebp-0E88h] esi +
push eax  +
lea ecx [ebp-0E9Ch] +
call sub_4090F2  +
test eax eax +
jns loc_405CAE  +
mov ecx eax +
call sub_40596F  +
mov ecx [ebp-0E88h] +
mov [ebp-0EA8h] ecx +
test ecx ecx +
jnz loc_405D1E  +
cmp [ebp-0EA0h] ecx +
jz loc_405CD2  +
push dword ptr [ebp-0EA0h]  +
call Mso20Win32Client_3788  +
cmp dword ptr [ebp-0E98h] 0 +
jnz loc_405CF1  +
mov ecx [ebp-0E94h] +
test ecx ecx +
jz loc_405CF1  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
mov [ebp-0E94h] esi +
mov ecx [ebp-0E9Ch] +
test ecx ecx +
jz loc_405D06  +
mov [ebp-0E9Ch] esi +
mov eax [ecx] +
call dword ptr [eax+4]  +
test edi edi +
jz loc_4061B8  +
call ds:CoUninitialize  +
sub edi 1 +
jnz loc_405D0E  +
jmp loc_4061B8  +
xor eax eax +
mov [ebp-0E90h] esi +
mov [ebp-0EA4h] eax +
mov eax ecx +
push 4  +
pop ecx  +
mul  ecx +
mov edx [ebp-0EA4h] +
push 4  +
seto dl  +
xor ecx ecx +
neg edx  +
or edx eax +
pop eax  +
add edx eax +
setb cl  +
neg ecx  +
or ecx edx +
call sub_40E9C8  +
test eax eax +
jz loc_405D85  +
mov ecx [ebp-0E88h] +
push offset sub_40329A  +
push offset loc_4067F8  +
push ecx  +
push 4  +
mov [eax] ecx +
add eax 4 +
pop ecx  +
push ecx  +
push eax  +
mov [ebp-0E8Ch] eax +
call sub_4A07FD  +
mov eax [ebp-0E8Ch] +
jmp loc_405D8D  +
mov eax esi +
mov [ebp-0E8Ch] esi +
mov [ebp-0EB4h] eax +
mov byte ptr [ebp-4] 3 +
test eax eax +
jz loc_40626A  +
mov eax [ebp-0E88h] +
xor ecx ecx +
push 4  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
call sub_40E9C8  +
mov [ebp-0EA4h] eax +
push 4  +
pop ecx  +
mov [ebp-4] cl +
cmp dword ptr [ebp-0E88h] 0 +
mov [eax] esi +
jbe loc_406152  +
mov edi [ebp-0E8Ch] +
sub eax edi +
mov edx [ebp-0EA0h] +
mov [ebp-0E88h] edx +
mov [ebp-0E8Ch] eax +
mov ecx [ebp-0E94h] +
push edi  +
push edx  +
mov eax [ecx] +
mov eax [eax+0A8h] +
call eax  +
xor ecx ecx +
test eax eax +
cmovs ecx eax +
test ecx ecx +
js loc_405E20  +
mov ecx [ebp-0E8Ch] +
mov eax [edi] +
inc dword ptr [ebp-0E90h]  +
push 4  +
mov [ecx+edi] eax +
pop eax  +
add edi eax +
mov edx [ebp-0E88h] +
add edx 28h +
sub dword ptr [ebp-0EA8h] 1 +
mov [ebp-0E88h] edx +
jnz loc_405DED  +
mov eax [ebp-0EA4h] +
mov edi [ebp-0EACh] +
cmp dword ptr [eax] 0 +
jz loc_406152  +
push 1  +
push 88h  +
call Mso20Win32Client_1193  +
test eax eax +
jnz loc_405E64  +
call Mso20Win32Client_56  +
mov ecx eax +
call sub_40C6B7  +
mov ecx dword_50CBEC +
mov dword_50CBEC eax +
lea eax [ebp-0EA8h] +
push eax  +
lea eax [ebp-0E8Ch] +
mov [ebp-0EB0h] ecx +
mov [ebp-0EBCh] ecx +
mov ecx [ebp-0E90h] +
mov byte ptr [ebp-4] 6 +
mov edx [ebp-0EA4h] +
push eax  +
mov [ebp-0E8Ch] esi +
mov [ebp-0EA8h] esi +
call sub_405A5D  +
mov dword ptr [ebp-4] 5 +
mov eax [ebp-0E8Ch] +
cmp eax [ebp-0E90h] +
jz loc_405EE4  +
sub esp 0Ch +
lea ecx [ebp-76Ch] +
call sub_4074EF  +
push offset unk_503B30  +
lea eax [ebp-76Ch] +
jmp loc_40627E  +
mov [ebp-0E90h] esi +
test eax eax +
jz loc_40613C  +
mov edi [ebp-0EA0h] +
mov [ebp-0E88h] edi +
push 30h  +
lea eax [ebp-4Ch] +
mov [ebp-54h] esi +
push esi  +
push eax  +
mov [ebp-50h] esi +
call j_memset  +
add esp 0Ch +
mov [ebp-1Ch] esi +
mov byte ptr [ebp-4] 8 +
lea ecx [ebp-54h] +
mov eax [ebp-0EA8h] +
push ecx  +
mov ecx [ebp-0E90h] +
mov [ebp-18h] esi +
mov esi edi +
push dword ptr [eax+ecx*4]  +
lea ecx [ebp-0E9Ch] +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
call sub_40A91A  +
mov eax [ebp-4Ch] +
sub eax 0 +
jz loc_40604E  +
sub eax 1 +
jz loc_406000  +
sub eax 1 +
jz loc_405FA2  +
dec eax  +
sub eax 1 +
jz loc_405F71  +
push 4  +
pop ecx  +
sub eax ecx +
jnz loc_4061BE  +
mov esi Mso20Win32Client_3948 +
push offset off_4ADE98  +
push 32h  +
push 2Dh  +
push 28D0800h  +
call esi  +
push offset aMarkingAsHeart  +
push 32h  +
push 2Dh  +
push 28D0801h  +
call esi  +
mov esi [ebp-0E88h] +
jmp loc_4060E1  +
mov esi Mso20Win32Client_3948 +
push offset off_4ADDE0  +
push 32h  +
push 2Dh  +
push 28D07E1h  +
call esi  +
cmp dword ptr [ebp-44h] 8 +
jnz loc_405FD2  +
push offset off_4ADE24  +
push 32h  +
push 2Dh  +
push 28D07E2h  +
call esi  +
push 1  +
jmp loc_406032  +
push offset aMarkingAsHeart  +
push 32h  +
push 2Dh  +
push 28D07E3h  +
call esi  +
mov esi [ebp-0E88h] +
lea ecx [ebp-0E9Ch] +
push 1  +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
call sub_409922  +
jmp loc_406062  +
push offset off_4ADEF4  +
push 32h  +
push 2Dh  +
push 28D0802h  +
call Mso20Win32Client_3948  +
mov esi [ebp-0E88h] +
lea ecx [ebp-0E9Ch] +
push 0  +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
call sub_409922  +
push 0  +
mov esi [ebp-0E88h] +
lea ecx [ebp-0E9Ch] +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
call sub_409A29  +
jmp loc_406062  +
push offset off_4ADF34  +
push 32h  +
push 2Dh  +
push 28D0803h  +
call Mso20Win32Client_3948  +
cmp dword ptr [ebp-4Ch] 0 +
jz loc_4060BF  +
push dword ptr [ebp-0E88h]  +
lea esi [ebp-2Ch] +
push dword ptr [ebp-44h]  +
lea ecx [ebp-0E9Ch] +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
call sub_409559  +
test eax eax +
jz loc_4060BF  +
push offset aActivatingKey  +
push 32h  +
push 2Dh  +
push 28D0805h  +
call Mso20Win32Client_3948  +
mov esi [ebp-0E88h] +
lea ecx [ebp-0E9Ch] +
push esi  +
call sub_409855  +
test eax eax +
jns loc_4060C5  +
mov ecx eax +
call sub_40596F  +
jmp loc_4060C5  +
mov esi [ebp-0E88h] +
push 4  +
pop eax  +
cmp [ebp-40h] eax +
jnz loc_4060F7  +
push offset off_4ADFBC  +
push 32h  +
push 2Dh  +
push 28D0806h  +
call Mso20Win32Client_3948  +
push 1  +
sub esp 10h +
lea ecx [ebp-0E9Ch] +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
call sub_409922  +
mov byte ptr [ebp-4] 5 +
xor esi esi +
mov eax [ebp-1Ch] +
test eax eax +
jz loc_40610E  +
push eax  +
mov [ebp-1Ch] esi +
call SysFreeString  +
mov eax [ebp-0E90h] +
mov edi [ebp-0E88h] +
inc eax  +
add edi 28h +
mov [ebp-0E90h] eax +
mov [ebp-0E88h] edi +
cmp eax [ebp-0E8Ch] +
jb loc_405EFE  +
mov edi [ebp-0EACh] +
mov ecx [ebp-0EB0h] +
test ecx ecx +
jz loc_40614C  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
mov eax [ebp-0EA4h] +
push eax  +
call Mso20Win32Client_3788  +
lea ecx [ebp-0EB4h] +
call sub_40629A  +
mov eax [ebp-0EA0h] +
test eax eax +
jz loc_406175  +
push eax  +
call Mso20Win32Client_3788  +
cmp dword ptr [ebp-0E98h] 0 +
jnz loc_406194  +
mov ecx [ebp-0E94h] +
test ecx ecx +
jz loc_406194  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
mov [ebp-0E94h] esi +
mov ecx [ebp-0E9Ch] +
test ecx ecx +
jz loc_4061A9  +
mov [ebp-0E9Ch] esi +
mov eax [ecx] +
call dword ptr [eax+4]  +
test edi edi +
jz loc_4061B8  +
call ds:CoUninitialize  +
sub edi 1 +
jnz loc_4061AD  +
call sub_4A19AD  +
retn   +
push 28D0804h  +
call Mso20Win32Client_1360  +
sub esp 0Ch +
lea ecx [ebp-0AF8h] +
call sub_407505  +
push offset unk_503B30  +
lea eax [ebp-0AF8h] +
jmp loc_40627E  +
mov ecx offset dword_50CBEC +
call sub_40196C  +
mov ecx eax +
mov edx [eax] +
call dword ptr [edx+18h]  +
test eax eax +
jz loc_40624A  +
cmp dword ptr [eax] 7 +
jnz loc_40624A  +
xor eax eax +
mov [ebp-0EACh] eax +
cmp [ebp-0E8Ch] eax +
jbe loc_40624A  +
push 1  +
push eax  +
lea ecx [ebp-0EA0h] +
call sub_406305  +
sub esp 10h +
lea ecx [ebp-0E9Ch] +
mov esi eax +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
call sub_409922  +
mov eax [ebp-0EACh] +
inc eax  +
mov [ebp-0EACh] eax +
cmp eax [ebp-0E8Ch] +
jb loc_406211  +
mov esi [ebp-0EC0h] +
lea edi [ebp-0E84h] +
mov ecx 0E3h +
lea eax [ebp-0E84h] +
movs   +
push offset unk_503B30  +
jmp loc_40627E  +
push 1Ch  +
lea ecx [ebp-3E0h] +
call sub_402735  +
push offset unk_503B30  +
mov eax ecx +
push eax  +
call j__CxxThrowException  +
int 3  +
jmp sub_40629A  +
***
push 0FFFFFFFFh  +
mov edx [ecx] +
imul eax [ebp+arg_0] +
mov eax [ecx] +
mov edx [eax+8] +
cmp byte ptr [edx+0Dh] 0 +
jz loc_406336  +
mov edx [eax+4] +
jmp loc_40632E  +
cmp eax [edx+8] +
jnz loc_40634C  +
mov [ecx] edx +
mov eax edx +
mov edx [edx+4] +
cmp byte ptr [edx+0Dh] 0 +
jz loc_406322  +
jmp loc_40634C  +
push esi  +
mov esi [edx] +
cmp byte ptr [esi+0Dh] 0 +
jnz loc_40634B  +
mov eax [esi] +
mov edx esi +
mov esi eax +
cmp byte ptr [eax+0Dh] 0 +
jz loc_40633F  +
pop esi  +
mov [ecx] edx +
mov eax ecx +
retn   +
***
mov ecx [ecx] +
test ecx ecx +
jz locret_40635D  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
retn   +
***
cmp byte ptr [ecx+4Ch] 0 +
sub esp 0F0h +
cmp byte ptr [ecx+54h] 0 +
sub esp 108h +
cmp byte ptr [ecx+68h] 0 +
sub esp 148h +
push ecx  +
cmp [ebp+arg_0] 0 +
push ecx  +
push 0FFFFFFFFh  +
push ecx  +
push ecx  +
push ecx  +
cmp [ebp+arg_0] 0 +
mov eax [ebp+arg_4] +
push esi  +
mov esi ecx +
push 4  +
mov dword ptr [esi] offset off_4AE2C4 +
mov eax [eax] +
mov [esi+48h] eax +
pop eax  +
mov [esi+4Ch] ax +
jnz loc_40677B  +
push 0  +
push 1404252h  +
call Mso20Win32Client_2055  +
push 0FFFFFFFFh  +
push [ebp+arg_0]  +
lea eax [esi+4] +
push 41h  +
push eax  +
call ds:strncpy_s  +
add esp 10h +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
push 20h  +
mov eax [esi] +
push dword ptr [eax+4]  +
push esi  +
call sub_407FA7  +
push dword ptr [esi]  +
call ds:free  +
pop ecx  +
pop esi  +
retn   +
***
mov ecx [ecx+4] +
test ecx ecx +
jnz sub_401A51  +
retn   +
***
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
cmp dword ptr [ecx+14h] 8 +
mov edx [ebp+arg_0] +
mov edx [ebp+arg_0] +
push ebx  +
mov edx [ebp+arg_0] +
push esi  +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
push ebx  +
mov eax [ebp+arg_0] +
push esi  +
push ebx  +
mov ebx ecx +
xor eax eax +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov [ebx] eax +
mov [ebx+10h] eax +
mov [ebx+14h] eax +
cmp dword ptr [esi+14h] 8 +
mov eax [esi+10h] +
mov [ebp+arg_0] eax +
jb loc_406B0B  +
mov esi [esi] +
cmp eax 8 +
jnb loc_406B1B  +
mov edi ebx +
push 7  +
movs   +
movs   +
movs   +
movs   +
pop edi  +
jmp loc_406B4D  +
mov edi eax +
mov eax 7FFFFFFEh +
or edi 7 +
cmp edi eax +
cmova edi eax +
lea eax [edi+1] +
push eax  +
call sub_406F74  +
mov ecx [ebp+arg_0] +
mov [ebx] eax +
lea ecx ds:2[ecx*2] +
push ecx  +
push esi  +
push eax  +
call j_memcpy  +
mov eax [ebp+arg_0] +
add esp 0Ch +
mov [ebx+10h] eax +
mov eax ebx +
mov [ebx+14h] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov eax [ebp+arg_0] +
mov edx [ebp+arg_0] +
push ebx  +
push esi  +
push esi  +
xor eax eax +
cmp [ebp+arg_0] 0 +
push esi  +
cmp [ebp+arg_0] 0 +
cmp [ebp+arg_0] 0 +
xor eax eax +
mov edx [esi+14h] +
mov eax [ebp+arg_4] +
mov eax [ebp+arg_0] +
mov edx [esi+14h] +
push esi  +
push esi  +
push ecx  +
mov ecx [ebp+arg_0] +
int 3  +
***
cmp dword ptr [edx+14h] 8 +
mov eax [ecx] +
cmp dword ptr [ecx] 0 +
cmp dword ptr [ecx] 1 +
call sub_4A19EC  +
call sub_4A19B9  +
push esi  +
push ecx  +
push esi  +
push esi  +
push ecx  +
sub esp 0Ch +
push esi  +
sub esp 0Ch +
sub esp 0Ch +
sub esp 0Ch +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push ecx  +
sub esp 2Ch +
mov esi ecx +
mov esi ecx +
push ebx  +
push ecx  +
push ecx  +
sub esp 0Ch +
mov eax [edx+4] +
push ecx  +
push ecx  +
cmp ecx 1000h +
cmp edx 1000h +
lea ecx [esi+60h] +
push esi  +
cmp [ebp+arg_0] 0 +
sub esp 0Ch +
push esi  +
push esi  +
push ebx  +
push esi  +
or ecx 7 +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
push ebx  +
push edi  +
mov edi [ebp+arg_4] +
mov ebx ecx +
cmp byte ptr [edi+0Dh] 0 +
jnz loc_407FE0  +
push esi  +
push dword ptr [edi+8]  +
mov ecx ebx +
push [ebp+arg_0]  +
call sub_407FA7  +
mov esi edi +
mov edi [edi] +
lea ecx [esi+10h] +
call sub_406DE4  +
push esi  +
call ds:free  +
cmp byte ptr [edi+0Dh] 0 +
pop ecx  +
jz loc_407FB8  +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 8  +
***
push ebx  +
mov edx [ebp+arg_0] +
call sub_4A19EC  +
call sub_4A19EC  +
call sub_4A19EC  +
call sub_4A19EC  +
call sub_4A19EC  +
call sub_4A19EC  +
push ebx  +
push 0FFFFFFFFh  +
push esi  +
push esi  +
call sub_4A19EC  +
call sub_4A19EC  +
call sub_4A19EC  +
call sub_4A19EC  +
call sub_4A19B9  +
mov edi ecx +
cmp dword ptr [edi+4] 7FFFFFFh +
jnz loc_408C31  +
push offset aListTooLong  +
call ds:?_Xlength_error@std@@YAXPBD@Z  +
and dword ptr [ebp-10h] 0 +
mov [ebp-14h] edi +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-14h] +
call sub_408CA3  +
mov esi [ebp-10h] +
push dword ptr [ebp+0Ch]  +
lea ecx [esi+8] +
call sub_406A8F  +
mov edx [ebp+8] +
mov eax esi +
inc dword ptr [edi+4]  +
mov ecx [edx+4] +
mov [esi] edx +
mov [esi+4] ecx +
mov [edx+4] esi +
mov [ecx] esi +
call sub_4A198D  +
retn 8  +
***
push esi  +
mov esi ecx +
mov eax [esi+4] +
test eax eax +
jz loc_408C84  +
lea ecx [eax+8] +
call sub_406DE4  +
mov eax [esi+4] +
pop esi  +
test eax eax +
jz locret_408C91  +
push eax  +
call ds:free  +
pop ecx  +
retn   +
***
push 20h  +
cmp [ebp+arg_0] 0 +
cmp [ebp+arg_0] 0 +
push [ebp+arg_C]  +
mov edx [ebp+arg_4] +
mov eax large fs:2Ch +
mov eax [ebp+arg_0] +
push ecx  +
push esi  +
cmp [ebp+arg_0] 0 +
push edx  +
sub esp 1Ch +
sub esp 14h +
push 0FFFFFFFFh  +
push offset loc_4A2429  +
mov eax large fs:0 +
push eax  +
sub esp 48h +
mov eax dword_508660 +
xor eax ebp +
mov [ebp+var_14] eax +
push esi  +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov esi [ebp+arg_0] +
lea eax [ebp+SystemTime] +
push eax  +
push ecx  +
and dword ptr [esi] 0 +
and dword ptr [esi+10h] 0 +
mov dword ptr [esi+14h] 7 +
call ds:FileTimeToSystemTime  +
test eax eax +
jz loc_408FBB  +
lea eax [ebp+SystemTime] +
push eax  +
push 15h  +
lea eax [ebp+var_40] +
push eax  +
call Mso20Win32Client_4282  +
test eax eax +
jz loc_408FBB  +
lea eax [ebp+var_40] +
mov ecx esi +
push eax  +
call sub_4068D1  +
mov eax esi +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop esi  +
mov ecx [ebp+var_14] +
xor ecx ebp +
call sub_49FFB8  +
leave   +
retn 4  +
***
test eax eax +
jns locret_408FFC  +
push 75D25Dh  +
push eax  +
call Mso20Win32Client_457  +
retn   +
***
call sub_4A19B9  +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
push ecx  +
call sub_4A19B9  +
call sub_4A19B9  +
call sub_4A19B9  +
call sub_4A19B9  +
push 0FFFFFFFFh  +
call sub_4A19B9  +
call sub_4A19EC  +
call sub_4A19EC  +
call sub_4A19B9  +
call sub_4A19EC  +
call sub_4A19B9  +
call sub_4A19B9  +
call sub_4A19EC  +
sub esp 10h +
call sub_4A19B9  +
call sub_4A19B9  +
sub esp 0Ch +
call sub_4A19B9  +
mov eax offset loc_4A28BF +
call sub_4A19EC  +
mov ebx ecx +
mov eax [ebp+18h] +
mov [ebp-60h] eax +
test eax eax +
jnz loc_40B8D1  +
mov eax 80004003h +
jmp loc_40BCD5  +
lea eax [ebp-54h] +
mov dword ptr [ebp-54h] offset aHeartbeatad_22 +
push eax  +
push ecx  +
push 32h  +
push 2Dh  +
pop edx  +
mov ecx 7A05D5h +
call sub_4072B5  +
and dword ptr [ebp-58h] 0 +
and dword ptr [ebp-4] 0 +
lea eax [ebp-58h] +
push eax  +
sub esp 10h +
lea esi [ebp+8] +
mov edi esp +
mov ecx ebx +
movs   +
movs   +
movs   +
movs   +
call sub_409CBD  +
mov edi eax +
test edi edi +
js loc_40BCC3  +
and dword ptr [ebp-18h] 0 +
push offset aLastchecktime  +
call SysAllocString  +
mov esi eax +
mov [ebp-54h] esi +
lea eax [ebp-50h] +
mov byte ptr [ebp-4] 2 +
push eax  +
push esi  +
push dword ptr [ebp-58h]  +
call sub_40A190  +
mov byte ptr [ebp-4] 1 +
mov edi eax +
mov ebx SysFreeString +
test esi esi +
jz loc_40B94D  +
push esi  +
call ebx  +
test edi edi +
js loc_40BC34  +
push offset aMachinestatus  +
call SysAllocString  +
mov esi eax +
mov [ebp-5Ch] esi +
cmp dword ptr [ebp-58h] 0 +
jnz loc_40B972  +
mov edi 80070057h +
jmp loc_40B9B6  +
and dword ptr [ebp-48h] 0 +
and dword ptr [ebp-54h] 0 +
lea eax [ebp-54h] +
mov byte ptr [ebp-4] 4 +
mov ecx [ebp-58h] +
mov edx esi +
push eax  +
call sub_40A317  +
mov edi eax +
test edi edi +
jns loc_40B99F  +
cmp dword ptr [ebp-54h] 0 +
jz loc_40B9B6  +
push dword ptr [ebp-54h]  +
call ebx  +
jmp loc_40B9B6  +
mov edi [ebp-54h] +
test edi edi +
jz loc_40B9B4  +
push edi  +
call ds:_wtoi  +
pop ecx  +
push edi  +
mov [ebp-48h] eax +
call ebx  +
xor edi edi +
mov byte ptr [ebp-4] 1 +
test esi esi +
jz loc_40B9C1  +
push esi  +
call ebx  +
test edi edi +
js loc_40BC34  +
push offset aReasoncode_0  +
call SysAllocString  +
mov esi eax +
mov [ebp-5Ch] esi +
cmp dword ptr [ebp-58h] 0 +
jnz loc_40B9E6  +
mov edi 80070057h +
jmp loc_40BA2A  +
and dword ptr [ebp-44h] 0 +
and dword ptr [ebp-54h] 0 +
lea eax [ebp-54h] +
mov byte ptr [ebp-4] 6 +
mov ecx [ebp-58h] +
mov edx esi +
push eax  +
call sub_40A317  +
mov edi eax +
test edi edi +
jns loc_40BA13  +
cmp dword ptr [ebp-54h] 0 +
jz loc_40BA2A  +
push dword ptr [ebp-54h]  +
call ebx  +
jmp loc_40BA2A  +
mov edi [ebp-54h] +
test edi edi +
jz loc_40BA28  +
push edi  +
call ds:_wtoi  +
pop ecx  +
push edi  +
mov [ebp-44h] eax +
call ebx  +
xor edi edi +
mov byte ptr [ebp-4] 1 +
test esi esi +
jz loc_40BA35  +
push esi  +
call ebx  +
test edi edi +
js loc_40BC34  +
push offset aLicensestatus  +
call SysAllocString  +
mov esi eax +
mov [ebp-5Ch] esi +
cmp dword ptr [ebp-58h] 0 +
jnz loc_40BA5A  +
mov edi 80070057h +
jmp loc_40BA9E  +
and dword ptr [ebp-40h] 0 +
and dword ptr [ebp-54h] 0 +
lea eax [ebp-54h] +
mov byte ptr [ebp-4] 8 +
mov ecx [ebp-58h] +
mov edx esi +
push eax  +
call sub_40A317  +
mov edi eax +
test edi edi +
jns loc_40BA87  +
cmp dword ptr [ebp-54h] 0 +
jz loc_40BA9E  +
push dword ptr [ebp-54h]  +
call ebx  +
jmp loc_40BA9E  +
mov edi [ebp-54h] +
test edi edi +
jz loc_40BA9C  +
push edi  +
call ds:_wtoi  +
pop ecx  +
push edi  +
mov [ebp-40h] eax +
call ebx  +
xor edi edi +
mov byte ptr [ebp-4] 1 +
test esi esi +
jz loc_40BAA9  +
push esi  +
call ebx  +
test edi edi +
js loc_40BC34  +
push offset aEntitlementsta  +
call SysAllocString  +
mov esi eax +
mov [ebp-5Ch] esi +
cmp dword ptr [ebp-58h] 0 +
jnz loc_40BACE  +
mov edi 80070057h +
jmp loc_40BB12  +
and dword ptr [ebp-3Ch] 0 +
and dword ptr [ebp-54h] 0 +
lea eax [ebp-54h] +
mov byte ptr [ebp-4] 0Ah +
mov ecx [ebp-58h] +
mov edx esi +
push eax  +
call sub_40A317  +
mov edi eax +
test edi edi +
jns loc_40BAFB  +
cmp dword ptr [ebp-54h] 0 +
jz loc_40BB12  +
push dword ptr [ebp-54h]  +
call ebx  +
jmp loc_40BB12  +
mov edi [ebp-54h] +
test edi edi +
jz loc_40BB10  +
push edi  +
call ds:_wtoi  +
pop ecx  +
push edi  +
mov [ebp-3Ch] eax +
call ebx  +
xor edi edi +
mov byte ptr [ebp-4] 1 +
test esi esi +
jz loc_40BB1D  +
push esi  +
call ebx  +
test edi edi +
js loc_40BC34  +
push offset aEntitlementexp  +
call SysAllocString  +
mov esi eax +
mov [ebp-5Ch] esi +
lea eax [ebp-38h] +
mov byte ptr [ebp-4] 0Bh +
push eax  +
push esi  +
push dword ptr [ebp-58h]  +
call sub_40A3A7  +
mov byte ptr [ebp-4] 1 +
mov edi eax +
test esi esi +
jz loc_40BB53  +
push esi  +
call ebx  +
test edi edi +
js loc_40BC34  +
push offset aLicenseexpiryd  +
call SysAllocString  +
mov esi eax +
mov [ebp-5Ch] esi +
lea eax [ebp-28h] +
mov byte ptr [ebp-4] 0Ch +
push eax  +
push esi  +
push dword ptr [ebp-58h]  +
call sub_40A3A7  +
mov byte ptr [ebp-4] 1 +
mov edi eax +
test esi esi +
jz loc_40BB89  +
push esi  +
call ebx  +
test edi edi +
js loc_40BC34  +
push offset aNewversionav_0  +
call SysAllocString  +
mov esi eax +
mov [ebp-5Ch] esi +
lea eax [ebp-18h] +
mov byte ptr [ebp-4] 0Dh +
mov ecx [ebp-58h] +
mov edx esi +
push eax  +
call sub_40A317  +
mov byte ptr [ebp-4] 1 +
mov edi eax +
test esi esi +
jz loc_40BBC0  +
push esi  +
call ebx  +
test edi edi +
js loc_40BC34  +
push offset aEntitlementinf  +
call SysAllocString  +
mov esi eax +
mov [ebp-5Ch] esi +
mov byte ptr [ebp-4] 0Eh +
cmp dword ptr [ebp-58h] 0 +
jnz loc_40BBE5  +
mov edi 80070057h +
jmp loc_40BC29  +
and dword ptr [ebp-14h] 0 +
and dword ptr [ebp-54h] 0 +
lea eax [ebp-54h] +
mov byte ptr [ebp-4] 0Fh +
mov ecx [ebp-58h] +
mov edx esi +
push eax  +
call sub_40A317  +
mov edi eax +
test edi edi +
jns loc_40BC12  +
cmp dword ptr [ebp-54h] 0 +
jz loc_40BC29  +
push dword ptr [ebp-54h]  +
call ebx  +
jmp loc_40BC29  +
mov edi [ebp-54h] +
test edi edi +
jz loc_40BC27  +
push edi  +
call ds:_wtoi  +
pop ecx  +
push edi  +
mov [ebp-14h] eax +
call ebx  +
xor edi edi +
test esi esi +
jz loc_40BC30  +
push esi  +
call ebx  +
test edi edi +
jns loc_40BC3C  +
mov esi [ebp-18h] +
jmp loc_40BCBC  +
mov edx [ebp-60h] +
lea esi [ebp-38h] +
mov eax [ebp-50h] +
mov ecx [ebp-4Ch] +
lea edi [edx+18h] +
mov [edx] eax +
movs   +
mov eax [ebp-48h] +
mov [edx+8] eax +
mov eax [ebp-44h] +
movs   +
mov [edx+0Ch] eax +
mov eax [ebp-40h] +
mov [edx+10h] eax +
movs   +
mov eax [ebp-3Ch] +
mov [edx+4] ecx +
mov [edx+14h] eax +
movs   +
lea edi [edx+28h] +
lea esi [ebp-28h] +
movs   +
movs   +
movs   +
movs   +
mov esi [ebp-18h] +
test esi esi +
jz loc_40BCB4  +
mov edx esi +
lea ecx [ebp-54h] +
call sub_408E8B  +
mov edx [ebp-60h] +
mov edi [eax] +
and dword ptr [eax] 0 +
mov eax [edx+38h] +
test eax eax +
jz loc_40BCA0  +
and dword ptr [edx+38h] 0 +
push eax  +
call ebx  +
mov edx [ebp-60h] +
mov eax [ebp-54h] +
mov [edx+38h] edi +
test eax eax +
jz loc_40BCB4  +
and dword ptr [ebp-54h] 0 +
push eax  +
call ebx  +
mov edx [ebp-60h] +
mov eax [ebp-14h] +
xor edi edi +
mov [edx+3Ch] eax +
test esi esi +
jz loc_40BCC3  +
push esi  +
call ebx  +
mov ecx [ebp-58h] +
test ecx ecx +
jz loc_40BCD3  +
and dword ptr [ebp-58h] 0 +
mov edx [ecx] +
call dword ptr [edx+4]  +
mov eax edi +
call sub_4A19A1  +
retn 14h  +
***
push esi  +
push ecx  +
mov eax [ebp+arg_0] +
push ecx  +
mov eax [ebp+arg_0] +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
sub esp 0Ch +
sub esp 14h +
sub esp 0Ch +
sub esp 18h +
sub esp 2Ch +
sub esp 170h +
add ecx 8 +
push ecx  +
push ecx  +
push esi  +
push 0FFFFFFFFh  +
call sub_4A19B9  +
call sub_4A19EC  +
push esi  +
push ecx  +
push esi  +
push [ebp+arg_10]  +
push [ebp+arg_10]  +
push [ebp+arg_10]  +
mov ecx [ebp+arg_4] +
mov ecx [ebp+arg_4] +
push [ebp+arg_10]  +
mov ecx [ebp+arg_4] +
mov ecx [ebp+arg_4] +
push [ebp+arg_10]  +
mov ecx [ebp+arg_4] +
mov ecx [ebp+arg_4] +
sub esp 24h +
push esi  +
push edi  +
push edi  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
sub esp 48h +
sub esp 3Ch +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
sub esp 1Ch +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
sub esp 24h +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
push edi  +
push 0FFFFFFFFh  +
push ecx  +
push ecx  +
test [ebp+arg_0] 1 +
sub esp 14h +
sub esp 14h +
sub esp 18h +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
mov eax 80004005h +
push ecx  +
call sub_4A19EC  +
call sub_4A19EC  +
call sub_4A19EC  +
sub esp 0Ch +
push ecx  +
cmp [ebp+arg_0] 0 +
call Mso20Win32Client_1193  +
cmp ecx 8 +
call sub_4A19B9  +
xor eax eax +
lea eax [ecx+0Ch] +
push esi  +
lea ecx [esi+0Ch] +
push 0FFFFFFFFh  +
lea ecx [esi+0Ch] +
push esi  +
call sub_4A19B9  +
mov edi ecx +
mov [ebp-10h] edi +
mov esi [ebp+8] +
push esi  +
call sub_40196F  +
and dword ptr [ebp-4] 0 +
lea eax [esi+0Ch] +
push eax  +
lea ecx [edi+0Ch] +
mov dword ptr [edi] offset off_4B51A0 +
call sub_406BC9  +
mov eax edi +
call sub_4A198D  +
retn 4  +
***
push ecx  +
call sub_4A19B9  +
mov al [ebp+arg_0] +
mov cl [ebp+arg_4] +
call sub_4A19EC  +
push edi  +
mov edx [ebp+arg_4] +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
call sub_4A19EC  +
lea ecx [esi+18h] +
call sub_4A19EC  +
lea ecx [esi+28h] +
mov eax [ebp+arg_0] +
call sub_4A19EC  +
and esp 0FFFFFFF8h +
mov edx ecx +
push ebx  +
sub esp 0Ch +
test byte ptr [esi+3Ch] 1 +
mov eax [esi-50h] +
call sub_4A19B9  +
push ebx  +
push edi  +
mov edi ecx +
mov ebx [edi+4] +
cmp ebx [edi+8] +
jz loc_410797  +
push esi  +
mov esi [ebp+arg_0] +
mov ecx ebx +
push esi  +
call sub_406A8F  +
lea eax [esi+18h] +
push eax  +
lea ecx [ebx+18h] +
call sub_406A8F  +
add dword ptr [edi+4] 30h +
pop esi  +
jmp loc_4107A0  +
push [ebp+arg_0]  +
push ebx  +
call sub_410E38  +
pop edi  +
pop ebx  +
pop ebp  +
retn 4  +
***
call sub_4A19B9  +
retn   +
***
call sub_4A19B9  +
push esi  +
push esi  +
push 0FFFFFFFFh  +
call sub_4A19B9  +
call sub_4A19B9  +
cmp dword ptr [esi] 0 +
push 0FFFFFFFFh  +
mov edx ebx +
push esi  +
push ecx  +
call sub_4A19EC  +
call sub_4A1A22  +
sub esp 14h +
call sub_4A19B9  +
sub esp 0Ch +
push 0  +
add ecx 0Ch +
int 3  +
mov eax [ebp+arg_0] +
sub esp 10h +
push edi  +
call sub_4A19B9  +
sub ecx [ecx-4] +
sub esp 34h +
mov eax esi +
mov eax [ebp+arg_4] +
sub esp 34h +
push ecx  +
push ebx  +
mov eax [ebp+arg_0] +
call sub_4A19B9  +
push esi  +
mov dword ptr [ecx] offset off_4AE334 +
push ecx  +
sub esp 28h +
push esi  +
push ecx  +
mov eax [esi] +
mov eax [esi] +
xor eax eax +
push esi  +
and esp 0FFFFFFF8h +
push esi  +
call sub_4A19EC  +
sub esp 1Ch +
mov edx [ebp+arg_0] +
sub esp 28h +
cmp [ebp+arg_0] 0 +
push edi  +
push esi  +
mov edi ecx +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
lea ecx [esi+38h] +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
add ecx 4 +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
mov ecx esi +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
mov eax [ecx+1110h] +
mov eax [esi-68h] +
call sub_4A19B9  +
push esi  +
cmp dword ptr [esi+4Ch] 0 +
cmp [ebp+arg_0] 0 +
push ecx  +
push ebx  +
push [ebp+arg_8]  +
push [ebp+arg_8]  +
call sub_4A19EC  +
mov eax [esi+1Ch] +
push ebx  +
sub esp 34h +
cmp dword ptr [ecx+4Ch] 0 +
cmp dword ptr [ecx+4Ch] 0 +
push 0FFFFFFFFh  +
mov eax [esi-70h] +
push ecx  +
push esi  +
push esi  +
push esi  +
push esi  +
lea eax [ecx+3Ch] +
sub esp 28h +
cmp [ebp+arg_4] 1 +
mov esi ecx +
call sub_4A19B9  +
call sub_4A19B9  +
and esp 0FFFFFFF8h +
push ecx  +
call sub_4A19B9  +
sub esp 28h +
sub esp 40h +
sub esp 34h +
sub esp 50h +
sub esp 20h +
sub esp 38h +
sub esp 50h +
sub esp 5Ch +
sub esp 78h +
push ecx  +
mov edx [ebp+arg_8] +
sub esp 44h +
mov eax [ebp+arg_0] +
sub esp 54h +
sub esp 3Ch +
sub esp 54h +
mov eax [ebp+arg_0] +
sub esp 74h +
push ecx  +
mov eax [ebp+arg_C] +
call sub_4A19EC  +
call sub_4A19EC  +
call sub_4A19EC  +
call sub_4A19EC  +
call sub_4A19EC  +
mov esi ecx +
push ecx  +
call sub_4A19EC  +
push ecx  +
call sub_4A19EC  +
call sub_4A19EC  +
sub ecx [ecx-4] +
sub ecx [ecx-4] +
mov ecx [ecx+4] +
and dword ptr [ecx+4] 0 +
sub esp 0Ch +
sub esp 0Ch +
push ecx  +
mov ecx [ecx+4] +
call sub_4A19EC  +
call sub_4A19EC  +
cmp byte ptr [ecx+0Ch] 0 +
push esi  +
push esi  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push ecx  +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
lea eax [esi+44h] +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
sub esp 24h +
mov eax dword_508660 +
xor eax esp +
mov [esp+24h+var_4] eax +
mov eax large fs:2Ch +
push esi  +
mov ecx [eax] +
mov eax dword_50CCD4 +
cmp eax [ecx+8] +
jg loc_415F83  +
mov ecx [esp+28h+var_4] +
mov al byte_50CCD8 +
pop esi  +
xor ecx esp +
call sub_49FFB8  +
mov esp ebp +
pop ebp  +
retn   +
mov esi offset dword_50CCD4 +
push esi  +
call sub_4A00F4  +
cmp dword_50CCD4 0FFFFFFFFh +
pop ecx  +
jnz loc_415F6E  +
push offset off_508BC4  +
push offset aMicrosoft_o_24  +
lea ecx [esp+30h+var_24] +
call sub_414E9F  +
mov ecx eax +
call Mso20Win32Client_2476  +
lea ecx [esp+28h+var_C] +
mov byte_50CCD8 al +
call sub_419418  +
lea ecx [esp+28h+var_24] +
call sub_406DE4  +
push esi  +
call sub_4A00B0  +
pop ecx  +
jmp loc_415F6E  +
***
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
call sub_4A19EC  +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
push ecx  +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
mov al byte_50885C +
and esp 0FFFFFFF8h +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
mov al byte_508850 +
and esp 0FFFFFFF8h +
mov al byte_508838 +
mov al byte_508844 +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
mov al byte_508820 +
mov al byte_50882C +
mov al byte_508808 +
mov al byte_508814 +
push 0FFFFFFFFh  +
mov eax [ecx] +
and esp 0FFFFFFF8h +
mov al byte_5087F0 +
mov al byte_5087E4 +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
mov al byte_5087D8 +
push 0FFFFFFFFh  +
mov al byte_5087C0 +
mov al byte_5087CC +
mov al byte_5087A8 +
mov al byte_5087B4 +
and esp 0FFFFFFF8h +
push ecx  +
mov al byte_508790 +
mov al byte_50879C +
mov al byte_508778 +
mov al byte_508784 +
mov al byte_508760 +
mov al byte_50876C +
mov al byte_508748 +
mov al byte_508754 +
mov al byte_508730 +
mov al byte_50873C +
mov al byte_508718 +
mov al byte_508724 +
mov eax [ecx] +
mov al byte_50870C +
and esp 0FFFFFFF8h +
sub esp 88h +
mov eax dword_508660 +
xor eax esp +
mov [esp+88h+var_4] eax +
mov eax large fs:2Ch +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov ecx [eax] +
mov eax dword_50CFD8 +
cmp eax [ecx+8] +
jg loc_418F9C  +
mov ecx dword_50CFDC +
mov eax esi +
mov [esi] ecx +
mov ecx [esp+90h+var_4] +
pop edi  +
pop esi  +
xor ecx esp +
call sub_49FFB8  +
mov esp ebp +
pop ebp  +
retn 4  +
mov edi offset dword_50CFD8 +
push edi  +
call sub_4A00F4  +
cmp dword_50CFD8 0FFFFFFFFh +
pop ecx  +
jnz loc_418F7C  +
lea eax [esp+90h+var_84] +
mov [esp+90h+var_84] 18h +
push eax  +
push offset aMicrosoft_o_87  +
lea ecx [esp+98h+var_80] +
call sub_41999A  +
mov ecx eax +
call sub_4195B4  +
lea ecx [esp+90h+var_80] +
mov dword_50CFDC eax +
call sub_415370  +
push edi  +
call sub_4A00B0  +
pop ecx  +
jmp loc_418F7C  +
***
setnz al  +
retn   +
***
mov al byte_5086F4 +
mov eax [ecx] +
mov eax [ecx] +
mov eax [ecx] +
mov al byte_5086C4 +
mov al byte_5086A0 +
mov al byte_5086AC +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
push 0FFFFFFFFh  +
mov al byte_508688 +
mov al byte_508694 +
mov al byte_50867C +
sub esp 0Ch +
test esi esi +
push 0FFFFFFFFh  +
mov ecx [ecx] +
test esi esi +
mov edi ecx +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push esi  +
call sub_4A19EC  +
push ecx  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
xor eax eax +
push 0FFFFFFFFh  +
mov ecx [esi+10h] +
sub esp 14h +
mov ecx offset off_508B88 +
mov eax [ebp+arg_0] +
push esi  +
push ecx  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
lea edx [ecx+4] +
lea eax [ecx+4] +
mov eax [ebp+arg_0] +
lea edx [ecx+4] +
mov edx [ecx+4] +
push esi  +
xor edx edx +
call sub_4A19B9  +
push esi  +
sub esp 0Ch +
call sub_4A19B9  +
mov edi ecx +
xor ebx ebx +
mov [ebp-10h] ebx +
mov esi [ebp+8] +
mov [esi] ebx +
mov [esi+4] ebx +
mov [esi+8] ebx +
mov [ebp-4] ebx +
mov eax large fs:2Ch +
mov dword ptr [ebp-10h] 1 +
mov ecx [eax] +
mov eax dword_50D00C +
cmp eax [ecx+8] +
jg loc_41A017  +
push edi  +
mov ecx offset off_508C50 +
call sub_41A08E  +
test al al +
jz loc_41A00D  +
mov eax [esi+4] +
push offset unk_508C78  +
cmp eax [esi+8] +
jz loc_41A005  +
mov ecx eax +
call sub_406AE8  +
add dword ptr [esi+4] 18h +
jmp loc_41A00D  +
push eax  +
mov ecx esi +
call sub_41A131  +
mov eax esi +
call sub_4A198D  +
retn 4  +
push offset dword_50D00C  +
call sub_4A00F4  +
cmp dword_50D00C 0FFFFFFFFh +
pop ecx  +
jnz loc_419FDC  +
push offset aUbl  +
mov ecx offset unk_508C78 +
mov dword ptr [ebp-4] 1 +
call sub_4068D1  +
push offset loc_4AA9D8  +
mov [ebp-4] bl +
call sub_4A070F  +
mov [esp+8+var_8] offset dword_50D00C +
call sub_4A00B0  +
pop ecx  +
jmp loc_419FDC  +
***
jmp sub_41A070  +
***
mov ecx [esi+24h] +
mov ecx [ecx+24h] +
test ecx ecx +
jnz loc_41A09E  +
call ds:?_Xbad_function_call@std@@YAXXZ  +
mov eax [ecx] +
lea edx [ebp+arg_0] +
push edx  +
mov eax [eax+8] +
call eax  +
pop ebp  +
retn 4  +
***
push ecx  +
push esi  +
imul edx [ebp+arg_4] +
call sub_4A1A22  +
push ecx  +
mov eax [ecx+8] +
push esi  +
push esi  +
mov eax [ebp+arg_0] +
cmp [ebp+arg_0] 0 +
call sub_4A19B9  +
mov eax [ebp+arg_0] +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
sub esp 10h +
sub esp 0Ch +
push esi  +
mov edx [ebp+arg_4] +
cmp dword ptr [edx+14h] 8 +
push ebx  +
push esi  +
pop ebp  +
mov edx [ebp+arg_4] +
push [ebp+arg_0]  +
push [ebp+arg_0]  +
push [ebp+arg_4]  +
push esi  +
push 0FFFFFFFFh  +
call sub_4A19EC  +
push 0FFFFFFFFh  +
sub esp 1Ch +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
push offset aLastconvertnot  +
push offset aLastconvertnot  +
push offset aNewversionavai  +
push offset aNewversionavai  +
push offset aTrialnotificat  +
push offset aTrialnotificat  +
push offset aRenewalreminde  +
push offset aRenewalreminde  +
push offset aWacupselllastd  +
push offset aWacupselllastd  +
push offset aEdplicensingba  +
push offset aEdplicensingba  +
push offset off_4B88D4  +
push offset off_4B88D4  +
push 0FFFFFFFFh  +
sub esp 3Ch +
sub esp 58h +
sub esp 0B4h +
sub esp 50h +
sub esp 80h +
push esi  +
sub esp 38h +
push 0FFFFFFFFh  +
push ecx  +
sub esp 1Ch +
retn   +
***
push 0FFFFFFFFh  +
sub esp 50h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
push esi  +
call sub_4A19EC  +
push ecx  +
mov ecx [ecx+4] +
push ecx  +
mov eax [ebp+arg_0] +
push esi  +
push ecx  +
movzx eax [ebp+arg_0] +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
push esi  +
push esi  +
push ecx  +
push ecx  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
mov eax [ebp+arg_0] +
push esi  +
push [ebp+arg_0]  +
push ecx  +
push [ebp+arg_0]  +
push ecx  +
push [ebp+arg_0]  +
push ecx  +
retn   +
***
mov edx [ebp+arg_0] +
push ecx  +
push ecx  +
call sub_4A19B9  +
sub esp 58h +
mov edx [ebp+arg_0] +
sub esp 3Ch +
push edx  +
push ecx  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
pop ecx  +
mov eax [ebp+arg_0] +
push ecx  +
push 0FFFFFFFFh  +
mov eax [esi+4] +
inc dword ptr [ecx+4]  +
mov edx [ebp+arg_0] +
mov edx [ebp+arg_0] +
mov eax [ecx] +
mov eax [ebp+arg_0] +
push ecx  +
call sub_4A19B9  +
int 3  +
push 0FFFFFFFFh  +
cmp ecx 17h +
call sub_4A19EC  +
push esi  +
call sub_4A19EC  +
mov ebx edx +
mov esi ecx +
mov [ebp-3A8h] esi +
mov [ebp-3ACh] esi +
xor ecx ecx +
mov [ebp-3A4h] ecx +
xor eax eax +
mov [esi] ecx +
mov [esi+10h] ecx +
mov dword ptr [esi+14h] 7 +
mov [esi] ax +
mov edi [ebp+8] +
push ecx  +
mov [ebp-4] ecx +
mov ecx esi +
push edi  +
mov dword ptr [ebp-3A4h] 1 +
call sub_4209E5  +
test edi edi +
jz loc_41DC9D  +
cmp edi 7FFFFFFFh +
ja loc_41DCA7  +
cmp dword ptr [esi+14h] 8 +
lea ecx [edi+1] +
mov eax esi +
jb loc_41DC6E  +
mov eax [esi] +
push ecx  +
push eax  +
push edi  +
push ebx  +
xor edi edi +
push edi  +
push dword ptr [ebp+0Ch]  +
call ds:MultiByteToWideChar  +
test eax eax +
jz loc_41DCAC  +
cmp dword ptr [esi+14h] 8 +
mov ecx esi +
jb loc_41DC8C  +
mov ecx [esi] +
cmp [ecx+eax*2-2] di +
mov ecx esi +
push edi  +
jnz loc_41DC97  +
dec eax  +
push eax  +
call sub_4209E5  +
mov eax esi +
call sub_4A19A1  +
retn 8  +
call sub_402861  +
push offset aFailedToCopySt  +
push 0Ah  +
lea ecx [ebp-3A0h] +
call sub_41F7E4  +
push offset unk_503B30  +
lea eax [ebp-3A0h] +
push eax  +
call j__CxxThrowException  +
int 3  +
push dword ptr [ecx]  +
call ds:CloseHandle  +
retn   +
***
lea eax [ecx+4] +
call sub_4A19B9  +
sub esp 0Ch +
test [ebp+arg_0] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_4BADC0 +
jz loc_41DE3D  +
push esi  +
call Mso20Win32Client_3788  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_4A19B9  +
push 0FFFFFFFFh  +
cmp dword ptr [esi+40h] 0 +
mov edx [ebp+arg_0] +
call sub_4A1A22  +
call sub_4A19B9  +
push esi  +
call sub_4A19EC  +
push ebx  +
call sub_4A19EC  +
call sub_4A19EC  +
mov edi ecx +
mov bl [edi+18h] +
lea ecx [ebp-50h] +
call sub_420C81  +
mov edx [edi+58h] +
lea ecx [ebp-54h] +
push ebx  +
push eax  +
push edi  +
call sub_41ED8A  +
xor ebx ebx +
mov [ebp-4] ebx +
mov ecx [ebp-50h] +
test ecx ecx +
jz loc_41E283  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+8]  +
mov esi [ebp-54h] +
test esi esi +
jnz loc_41E2C4  +
mov [ebp-30h] bl +
mov byte ptr [ebp-4] 1 +
mov ecx [edi+50h] +
test ecx ecx +
jz loc_41E419  +
lea eax [ebp-4Ch] +
push eax  +
call sub_41F419  +
cmp byte ptr [ebp-30h] 0 +
jz loc_41E419  +
movsx eax byte ptr [ebp-34h] +
inc eax  +
sub eax ebx +
jz loc_41E419  +
lea ecx [ebp-4Ch] +
jmp loc_41E414  +
lea edx [edi+34h] +
mov eax [edx] +
cmp eax [edx+4] +
jz loc_41E2D5  +
mov ecx esi +
call sub_41EF84  +
mov al [edi+18h] +
lea ecx [ebp-2Ch] +
push eax  +
lea eax [edi+1Ch] +
mov edx esi +
push eax  +
call sub_41EFC6  +
cmp [ebp-2Ch] bl +
jnz loc_41E2F5  +
mov [ebp-30h] bl +
mov byte ptr [ebp-4] 2 +
jmp loc_41E291  +
mov al [edi+18h] +
lea ecx [ebp-8Ch] +
push eax  +
mov edx esi +
call sub_41F11F  +
mov byte ptr [ebp-4] 3 +
cmp byte ptr [ebp-74h] 0 +
jnz loc_41E34A  +
mov [ebp-30h] bl +
mov byte ptr [ebp-4] 4 +
mov ecx [edi+50h] +
test ecx ecx +
jz loc_41E408  +
lea eax [ebp-4Ch] +
push eax  +
call sub_41F419  +
cmp byte ptr [ebp-30h] 0 +
jz loc_41E408  +
movsx eax byte ptr [ebp-34h] +
inc eax  +
sub eax ebx +
jz loc_41E408  +
lea ecx [ebp-4Ch] +
jmp loc_41E403  +
lea eax [ebp-8Ch] +
lea ecx [ebp-28h] +
push eax  +
call sub_406AE8  +
cmp byte ptr [ebp-2Bh] 0 +
jz loc_41E3BC  +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-70h] +
call sub_406A8F  +
mov [ebp-58h] bl +
lea eax [ebp-70h] +
push eax  +
lea ecx [ebp-4Ch] +
call sub_4209AB  +
mov byte ptr [ebp-30h] 1 +
mov byte ptr [ebp-4] 7 +
mov ecx [edi+50h] +
test ecx ecx +
jz loc_41E398  +
lea eax [ebp-4Ch] +
push eax  +
call sub_41F419  +
cmp byte ptr [ebp-30h] 0 +
jz loc_41E3A9  +
movsx eax byte ptr [ebp-34h] +
inc eax  +
sub eax ebx +
jz loc_41E3A9  +
lea ecx [ebp-4Ch] +
call sub_406DE4  +
movsx eax byte ptr [ebp-58h] +
inc eax  +
sub eax ebx +
jz loc_41E400  +
lea ecx [ebp-70h] +
call sub_406DE4  +
jmp loc_41E400  +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-70h] +
call sub_406A8F  +
mov byte ptr [ebp-58h] 1 +
lea eax [ebp-70h] +
push eax  +
lea ecx [ebp-4Ch] +
call sub_4209AB  +
mov byte ptr [ebp-30h] 1 +
mov byte ptr [ebp-4] 0Ah +
mov ecx [edi+50h] +
test ecx ecx +
jz loc_41E3F0  +
lea eax [ebp-4Ch] +
push eax  +
call sub_41F419  +
lea ecx [ebp-4Ch] +
call sub_41F347  +
lea ecx [ebp-70h] +
call sub_41E431  +
lea ecx [ebp-28h] +
call sub_406DE4  +
cmp byte ptr [ebp-74h] 0 +
jz loc_41E419  +
lea ecx [ebp-8Ch] +
call sub_406DE4  +
test esi esi +
jz loc_41E426  +
mov eax [esi] +
mov ecx esi +
push 1  +
call dword ptr [eax+18h]  +
call sub_4A19A1  +
retn   +
***
movsx eax byte ptr [ecx+18h] +
mov ecx [esi+54h] +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push offset loc_4A3A2A  +
mov eax large fs:0 +
push eax  +
push ecx  +
mov eax 1080h +
call sub_4A1C9B  +
mov eax dword_508660 +
xor eax ebp +
mov [ebp+var_14] eax +
push ebx  +
push esi  +
push edi  +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov [ebp+var_10] esp +
mov ebx edx +
mov esi ecx +
mov [ebp+var_1090] esi +
mov eax [ebp+arg_4] +
xor edi edi +
mov [ebp+var_1078] esi +
mov [ebp+var_4] edi +
cmp dword ptr [ebx+14h] 8 +
mov [ebp+var_107C] eax +
jb loc_41E883  +
mov ebx [ebx] +
lea eax [ebp+arg_0] +
push eax  +
call sub_41F36A  +
push 824h  +
lea ecx [ebp+var_105C] +
mov edx ebx +
push ecx  +
mov ecx [eax] +
call sub_4216CD  +
test eax eax +
jz loc_41E909  +
push 4  +
mov [ebp+var_1084] eax +
pop eax  +
mov [ebp+var_1080] ax +
lea eax [ebp+var_108C] +
push eax  +
lea eax [ebp+var_1078] +
mov [ebp+var_108C] offset off_4AEFEC +
push eax  +
push ecx  +
push 0Fh  +
push 2Dh  +
pop edx  +
mov ecx 2490290h +
mov [ebp+var_1088] offset aServicestatusf +
mov [ebp+var_1078] offset aApiGeturlforfe +
call sub_40BDEA  +
xor eax eax +
mov [esi] edi +
mov [esi+10h] edi +
mov dword ptr [esi+14h] 7 +
mov [esi] ax +
mov eax esi +
jmp loc_41EA00  +
lea eax [ebp+var_105C] +
mov [ebp+var_1074] edi +
push eax  +
lea ecx [ebp+var_1074] +
mov [ebp+var_1064] edi +
mov [ebp+var_1060] 7 +
call sub_4068D1  +
push [ebp+arg_8]  +
lea edx [ebp+var_1074] +
mov ecx esi +
push [ebp+var_107C]  +
push [ebp+arg_0]  +
call loc_41EA1C  +
mov eax [ebp+var_1060] +
cmp eax 8 +
jb loc_41E902  +
mov ecx [ebp+var_1074] +
lea eax ds:2[eax*2] +
mov edx ecx +
cmp eax 1000h +
jb loc_41E97E  +
mov ecx [ecx-4] +
sub edx ecx +
lea eax [edx-4] +
cmp eax 1Fh +
jbe loc_41E97E  +
call ds:_invalid_parameter_noinfo_noreturn  +
push ecx  +
call ds:free  +
pop ecx  +
jmp loc_41E902  +
movzx eax byte ptr [ebp+8] +
push 4  +
mov [ebp-1084h] eax +
pop eax  +
mov [ebp-1080h] ax +
lea eax [ebp-108Ch] +
push eax  +
lea eax [ebp-107Ch] +
mov [ebp+var_108C] offset off_4AEFEC +
push eax  +
push ecx  +
push 0Fh  +
push 2Dh  +
pop edx  +
mov ecx 2490291h +
mov [ebp+var_1088] offset aEndpointpath +
mov [ebp+var_107C] offset aApiGeturlfor_0 +
call sub_40BDEA  +
mov eax [ebp+var_1078] +
xor edi edi +
xor ecx ecx +
mov [eax] edi +
mov [eax+10h] edi +
mov dword ptr [eax+14h] 7 +
mov [eax] cx +
mov eax offset loc_41E9FA +
retn   +
mov eax [ebp-1078h] +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_14] +
xor ecx ebp +
call sub_49FFB8  +
leave   +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
push 0FFFFFFFFh  +
push offset loc_4A3A54  +
mov eax large fs:0 +
push eax  +
sub esp 58h +
mov eax dword_508660 +
xor eax ebp +
mov [ebp-10h] eax +
push ebx  +
push esi  +
push edi  +
push eax  +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
mov [ebp-54h] ecx +
and dword ptr [ebp-28h] 0 +
and dword ptr [ebp-18h] 0 +
movzx eax byte ptr [ebp+8] +
mov ebx [ebp+0Ch] +
dec eax  +
mov dword ptr [ebp-14h] 7 +
push 8  +
pop esi  +
cmp eax 0Eh +
ja loc_41EBAD  +
jmp ds:off_41ED49[eax*4]  +
cmp [edx+14h] esi +
jb loc_41EA7B  +
mov edx [edx] +
mov [ebp-50h] edx +
mov edx offset aSlicensingUser +
lea eax [ebp+10h] +
push eax  +
lea eax [ebp-50h] +
push eax  +
lea ecx [ebp-40h] +
call sub_41F9D3  +
push eax  +
lea ecx [ebp-28h] +
call sub_406A58  +
lea ecx [ebp-40h] +
call sub_406DE4  +
jmp loc_41EBB6  +
cmp [edx+14h] esi +
jb loc_41EAB0  +
mov edx [edx] +
mov [ebp-50h] edx +
mov edx offset aSlicensingLice +
lea eax [ebp-50h] +
push eax  +
lea ecx [ebp-40h] +
call sub_41FAAE  +
jmp loc_41EA93  +
***
cmp [edx+14h] esi +
jb loc_41EACD  +
mov edx [edx] +
mov [ebp-50h] edx +
mov edx offset aSlicensingUs_0 +
jmp loc_41EAB8  +
***
cmp [edx+14h] esi +
jb loc_41EADE  +
mov edx [edx] +
mov [ebp-50h] edx +
mov edx offset aSlicensingUs_1 +
jmp loc_41EAB8  +
***
cmp [edx+14h] esi +
jb loc_41EAEF  +
mov edx [edx] +
mov [ebp-50h] edx +
mov edx offset aSlicensingUs_2 +
jmp loc_41EAB8  +
***
cmp [edx+14h] esi +
jb loc_41EB00  +
mov edx [edx] +
mov [ebp-50h] edx +
mov edx offset aSlicensingUs_3 +
jmp loc_41EA83  +
***
cmp [edx+14h] esi +
jb loc_41EB14  +
mov edx [edx] +
mov [ebp-50h] edx +
mov edx offset aSlicensingDevi +
jmp loc_41EA83  +
***
cmp [edx+14h] esi +
jb loc_41EB28  +
mov edx [edx] +
mov [ebp-50h] edx +
mov edx offset aSlicensingUs_4 +
jmp loc_41EA83  +
***
cmp [edx+14h] esi +
jb loc_41EB3C  +
mov edx [edx] +
mov [ebp-50h] edx +
mov edx offset aSlicensingUs_5 +
jmp loc_41EA83  +
***
cmp [edx+14h] esi +
jb loc_41EB50  +
mov edx [edx] +
mov [ebp-50h] edx +
mov edx offset aSlicensingUs_6 +
jmp loc_41EA83  +
***
cmp [edx+14h] esi +
jb loc_41EB64  +
mov edx [edx] +
mov [ebp-50h] edx +
mov edx offset aSlicensingUs_7 +
jmp loc_41EA83  +
***
cmp [edx+14h] esi +
jb loc_41EB78  +
mov edx [edx] +
mov [ebp-50h] edx +
mov edx offset aSlicensingUs_8 +
jmp loc_41EA83  +
***
cmp [edx+14h] esi +
jb loc_41EB8C  +
mov edx [edx] +
mov [ebp-50h] edx +
mov edx offset aSlicensingUs_9 +
jmp loc_41EA83  +
***
cmp [edx+14h] esi +
jb loc_41EBA0  +
mov edx [edx] +
mov [ebp-50h] edx +
mov edx offset aSofficeV1_0Dig +
jmp loc_41EAB8  +
***
push edx  +
lea ecx [ebp-28h] +
call sub_406A2B  +
lea eax [ebp-28h] +
mov dword ptr [ebp-4Ch] offset off_4AF06C +
push eax  +
lea ecx [ebp-44h] +
mov dword ptr [ebp-48h] offset off_4BAB34 +
call sub_406AE8  +
push 4  +
pop eax  +
mov [ebp-2Ch] ax +
lea eax [ebp-4Ch] +
push eax  +
lea eax [ebp-50h] +
mov dword ptr [ebp-50h] offset aApiExpandurl +
push eax  +
push ecx  +
push 32h  +
push 2Dh  +
pop edx  +
mov ecx 229B108h +
call sub_40BDEA  +
lea ecx [ebp-44h] +
call sub_406DE4  +
mov eax [ebx] +
cmp eax [ebx+4] +
jnz loc_41EC64  +
mov edi [ebp-54h] +
lea eax [ebp-28h] +
push eax  +
mov ecx edi +
call sub_406A8F  +
mov eax [ebp-14h] +
cmp eax esi +
jb loc_41EC46  +
mov ecx [ebp-28h] +
lea eax ds:2[eax*2] +
mov edx ecx +
cmp eax 1000h +
jb loc_41EC3E  +
mov ecx [ecx-4] +
sub edx ecx +
lea eax [edx-4] +
cmp eax 1Fh +
ja loc_41ED43  +
push ecx  +
call ds:free  +
pop ecx  +
mov eax edi +
mov ecx [ebp-0Ch] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp-10h] +
xor ecx ebp +
call sub_49FFB8  +
leave   +
retn 0Ch  +
***
cmp [ebp-14h] esi +
lea edx [ebp-28h] +
lea ecx [ebp-50h] +
cmovnb edx [ebp-28h] +
call sub_438523  +
mov edi [ebx] +
mov ebx [ebx+4] +
mov esi [ebp-50h] +
jmp loc_41ECA7  +
test esi esi +
jz loc_41ECAF  +
cmp dword ptr [edi+2Ch] 8 +
mov eax [esi] +
mov edx [eax+14h] +
lea eax [edi+18h] +
jb loc_41EC94  +
mov eax [eax] +
cmp dword ptr [edi+14h] 8 +
mov ecx edi +
jb loc_41EC9E  +
mov ecx [edi] +
push eax  +
push ecx  +
mov ecx esi +
call edx  +
add edi 30h +
cmp edi ebx +
jnz loc_41EC80  +
test esi esi +
jnz loc_41ECBC  +
push 0  +
push 152139Ah  +
call Mso20Win32Client_2055  +
mov eax [esi] +
mov ecx esi +
push 0  +
call dword ptr [eax+38h]  +
test eax eax +
jz loc_41ECE4  +
lea eax [ebp-50h] +
mov dword ptr [ebp-50h] offset aApiExpandurlFa +
push eax  +
push ecx  +
push 0Ah  +
push 2Dh  +
pop edx  +
mov ecx 241F25Dh +
call sub_4072B5  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+44h]  +
mov edi eax +
mov dword ptr [ebp-64h] offset off_4AEFA4 +
mov eax 100h +
mov dword ptr [ebp-60h] offset aUrlwithparams +
mov [ebp-58h] ax +
lea eax [ebp-64h] +
push eax  +
lea eax [ebp-50h] +
mov [ebp-5Ch] edi +
push eax  +
push ecx  +
push 32h  +
push 2Dh  +
pop edx  +
mov ecx 241F25Eh +
mov dword ptr [ebp-50h] offset aApiExpandurl +
call sub_40BDEA  +
push edi  +
mov edi [ebp-54h] +
mov ecx edi +
call sub_406AC5  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+4]  +
mov eax [ebp-14h] +
cmp eax 8 +
jmp loc_41EC18  +
***
call ds:_invalid_parameter_noinfo_noreturn  +
push 0FFFFFFFFh  +
sub esp 18h +
call sub_4A19EC  +
push 0FFFFFFFFh  +
mov eax [ecx] +
cmp byte ptr [ecx+1Ch] 0 +
jz locret_41F35B  +
movsx eax byte ptr [ecx+18h] +
inc eax  +
sub eax 0 +
jnz sub_406DE4  +
retn   +
***
mov eax [ebp+arg_0] +
mov ecx [esi] +
test ecx ecx +
jz loc_41F3D3  +
mov edx [esi+8] +
sub edx ecx +
and edx 0FFFFFFFCh +
call sub_4078C9  +
xor eax eax +
mov [esi] eax +
mov [esi+4] eax +
mov [esi+8] eax +
pop esi  +
retn   +
***
push esi  +
mov eax [ebp+arg_0] +
call sub_4A19B9  +
mov eax [ebp+arg_0] +
cmp [ebp+arg_0] 0 +
call sub_4A19B9  +
push ebx  +
push 0FFFFFFFFh  +
mov eax [ebp+arg_0] +
push ecx  +
push esi  +
mov eax [ebp+arg_0] +
call sub_4A19B9  +
push esi  +
call sub_4A19EC  +
call sub_4A19EC  +
and esp 0FFFFFFF8h +
push 0FFFFFFFFh  +
call sub_4A19EC  +
call sub_4A19EC  +
sub esp 0Ch +
push ecx  +
add ecx 0Ch +
mov eax [ebp+arg_0] +
int 3  +
***
call sub_4A19EC  +
test [ebp+arg_0] 1 +
call sub_4A19B9  +
and esp 0FFFFFFF8h +
call sub_4A19B9  +
call sub_4A19B9  +
push ecx  +
call sub_4A1A22  +
call sub_41FFE6  +
add ecx 10h +
mov ecx [ebp+arg_0] +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push ebx  +
push ecx  +
call sub_4A19B9  +
push ebx  +
call sub_4A19EC  +
call sub_4A19EC  +
push esi  +
push esi  +
mov ecx [ecx+4] +
mov eax [ebp+arg_0] +
push esi  +
mov ecx [esi+8] +
mov eax [ebp+arg_0] +
call sub_4A19B9  +
call sub_4A19EC  +
call sub_4A19EC  +
sub esp 1Ch +
call sub_4A19EC  +
sub esp 1Ch +
call sub_4A19B9  +
push esi  +
mov eax [ebp+arg_0] +
add ecx 4 +
push esi  +
add ecx 4 +
add ecx 4 +
add ecx 4 +
add ecx 4 +
add ecx 4 +
add ecx 4 +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push ecx  +
call sub_4A19EC  +
mov eax large fs:2Ch +
sub esp 24h +
call __imp_Mso30Win32Client_4037  +
push ecx  +
push dword ptr [ecx]  +
lea ecx [esi+0Ch] +
call sub_4262DB  +
mov edx [esi+4] +
call sub_427E28  +
push dword ptr [esi+4]  +
call ds:free  +
pop ecx  +
pop esi  +
retn   +
***
jmp sub_420FBF  +
***
cmp byte ptr [ecx+20h] 0 +
jnz sub_420FBF  +
retn   +
***
push 0FFFFFFFFh  +
push offset loc_4A3334  +
mov eax large fs:0 +
push eax  +
push ebx  +
push esi  +
push edi  +
mov eax dword_508660 +
xor eax ebp +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov ebx ecx +
and [ebp+var_4] 0 +
push [ebp+arg_0]  +
call sub_406AC5  +
xor eax eax +
lea edi [ebx+18h] +
mov [edi] eax +
lea edx [ebx+1Ch] +
mov [edx] ax +
lea ecx [ebx+1Dh] +
xor al al +
xchg al [ecx] +
xor al al +
xchg al [edx] +
mov edx [ebp+arg_4] +
lea ecx [ebp+arg_0] +
or [ebp+var_4] 0FFFFFFFFh +
call sub_419759  +
cmp edi eax +
jz loc_421073  +
mov ecx [eax] +
and dword ptr [eax] 0 +
mov esi [edi] +
mov [edi] ecx +
test esi esi +
jz loc_421073  +
mov ecx [esi] +
test ecx ecx +
jz loc_42106C  +
and dword ptr [esi] 0 +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+8]  +
push esi  +
call Mso20Win32Client_3788  +
lea ecx [ebp+arg_0] +
call sub_419418  +
mov eax ebx +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
lea ecx [esi+0Ch] +
push ecx  +
mov esi ecx +
mov eax [ecx] +
mov eax [ecx] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov al [ebp+arg_0] +
mov al [ebp+arg_0] +
push esi  +
mov ecx [ecx+28h] +
push esi  +
mov ecx [ecx+24h] +
push esi  +
push 0FFFFFFFFh  +
call sub_421399  +
cmp byte ptr [ecx+12h] 0 +
cmp byte ptr [ecx+12h] 0 +
cmp byte ptr [ecx+12h] 0 +
push esi  +
mov ecx [esi+0B4h] +
or dword ptr [ecx+8] 0FFFFFFFFh +
push esi  +
push esi  +
lea ecx [esi+0C8h] +
push ecx  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
cmp dword_5095A4 8 +
and esp 0FFFFFFF8h +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
sub esp 30h +
mov eax dword_508660 +
xor eax esp +
mov [esp+30h+var_4] eax +
push esi  +
mov esi edx +
mov edx 1F2h +
push edi  +
mov edi ecx +
mov ecx esi +
call sub_421E23  +
mov edx esi +
lea ecx [esp+38h+var_1C] +
call sub_424B55  +
push ecx  +
push (offset oword_50B9D0+0Ch)  +
lea ecx [esp+40h+var_30] +
mov esi eax +
call sub_40E30B  +
push esi  +
call sub_42789A  +
push eax  +
push esi  +
lea eax [esp+40h+var_24] +
mov ecx offset dword_50BA0C +
push eax  +
call sub_428C9A  +
mov esi dword_50BA10 +
mov eax [eax+4] +
test eax eax +
cmovnz esi eax +
cmp esi dword_50BA10 +
jz loc_4220AF  +
mov esi [esi+20h] +
test esi esi +
jz loc_4220B1  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax]  +
jmp loc_4220B1  +
xor esi esi +
lea ecx [esp+38h+var_30] +
call sub_40E2E2  +
lea ecx [esp+38h+var_1C] +
mov [edi] esi +
call sub_406DE4  +
mov ecx [esp+38h+var_4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx esp +
call sub_49FFB8  +
mov esp ebp +
pop ebp  +
retn   +
***
lea ecx [esi+0Ch] +
lea ecx [esi+0Ch] +
lea ecx [esi+0Ch] +
lea ecx [esi+0Ch] +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
call sub_4A19EC  +
lea ecx [esi+30h] +
push 0FFFFFFFFh  +
mov al byte_508878 +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
call sub_4A19EC  +
mov ecx [esi+1Ch] +
push 0FFFFFFFFh  +
call sub_4A19EC  +
sub esp 90h +
push ecx  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
sub esp 20h +
and esp 0FFFFFFF8h +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push ecx  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
sub esp 18h +
push 0FFFFFFFFh  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
call sub_42475B  +
mov ecx [ebp+arg_0] +
mov edx [ebp+arg_4] +
push [ebp+arg_C]  +
call sub_420F2D  +
and esp 0FFFFFFF8h +
push [ebp+arg_C]  +
mov edx [ebp+arg_0] +
call __imp_Mso20Win32Client_371  +
push [ebp+arg_8]  +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
push 0FFFFFFFFh  +
sub esp 18h +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
push 0FFFFFFFFh  +
cmp dword ptr [ecx+28h] 0 +
push 0FFFFFFFFh  +
sub esp 3Ch +
and esp 0FFFFFFF8h +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
sub esp 40h +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push edi  +
mov eax [ebp+arg_0] +
call sub_4A19B9  +
call sub_4A19B9  +
mov edx [esi+4] +
sub edx [esi] +
mov ecx [esi] +
and edx 0FFFFFFFCh +
call sub_4078C9  +
xor eax eax +
mov [esi] eax +
mov [esi+4] eax +
mov [esi+8] eax +
pop esi  +
retn   +
***
push ecx  +
push esi  +
mov esi ecx +
or eax 0FFFFFFFFh +
xadd [esi+0C0h] eax +
dec eax  +
jnz loc_426348  +
mov eax [esi] +
push 0  +
call dword ptr [eax+8]  +
push esi  +
call Mso20Win32Client_3788  +
pop esi  +
leave   +
retn   +
***
push ecx  +
sub esp 0Ch +
mov eax [esi] +
push dword ptr [eax+4]  +
push esi  +
call sub_428DDD  +
push dword ptr [esi]  +
call ds:free  +
pop ecx  +
pop esi  +
retn   +
***
push ecx  +
push ecx  +
push ecx  +
test esi esi +
call sub_4A19B9  +
mov edx [ebx] +
mov eax [edx+4] +
and dword ptr [eax] 0 +
mov eax [edx] +
test eax eax +
jz loc_42659B  +
push esi  +
mov esi [eax] +
push eax  +
call ds:free  +
mov eax esi +
pop ecx  +
test esi esi +
jnz loc_42658A  +
pop esi  +
push dword ptr [ebx]  +
call ds:free  +
pop ecx  +
pop ebx  +
retn   +
***
call sub_4A19B9  +
mov edi ecx +
mov [ebp-10h] edi +
and dword ptr [edi] 0 +
push ecx  +
lea ecx [edi+4] +
call sub_426ECC  +
xor eax eax +
lea ecx [edi+0Ch] +
mov [ebp-4] eax +
mov [ecx] eax +
mov [ecx+4] eax +
mov [ecx+8] eax +
mov byte ptr [ebp-4] 1 +
mov dword ptr [edi+18h] 7 +
mov dword ptr [edi+1Ch] 8 +
mov dword ptr [edi] 3F800000h +
push dword ptr [edi+4]  +
push 10h  +
call sub_426E56  +
mov eax edi +
call sub_4A198D  +
retn   +
***
cmp byte ptr [ecx+4Ch] 0 +
jz locret_42662A  +
add ecx 4 +
cmp byte ptr [ecx+44h] 0 +
jnz sub_427FC8  +
retn   +
***
mov eax [ebp+arg_0] +
sub esp 20h +
call sub_4A19B9  +
sub esp 20h +
sub esp 20h +
sub esp 20h +
mov ecx [esi] +
push ecx  +
mov ecx [ebp+arg_0] +
lea ecx [esi+0Ch] +
push esi  +
push edi  +
mov edi [ebx+8] +
mov eax [edi] +
lea ecx [edi+20h] +
mov [ebx+8] eax +
call sub_406EAB  +
lea ecx [edi+8] +
call sub_406DE4  +
push edi  +
call ds:free  +
mov eax [ebx] +
pop ecx  +
pop edi  +
pop esi  +
dec dword ptr [eax+4]  +
pop ebx  +
retn   +
***
mov eax [ebp+arg_0] +
push ecx  +
push 38h  +
push 24h  +
and dword ptr [esi] 0 +
and dword ptr [esi+4] 0 +
call ds:malloc  +
pop ecx  +
test eax eax +
jnz loc_426F13  +
call ds:?_Xbad_alloc@std@@YAXXZ  +
mov [esi] eax +
mov [eax] eax +
mov [eax+4] eax +
mov eax esi +
pop esi  +
retn 4  +
***
push ecx  +
sub esp 18h +
push ecx  +
sub esp 20h +
push ecx  +
sub esp 34h +
sub esp 14h +
push ecx  +
call sub_4A19B9  +
sub esp 14h +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
sub esp 0Ch +
and esp 0FFFFFFF8h +
call sub_4A19B9  +
call sub_4A19B9  +
sub esp 14h +
mov edx [ebp+arg_0] +
push ecx  +
call sub_4A19B9  +
call sub_4A19B9  +
call sub_4A19B9  +
call sub_4A19B9  +
mov eax [edx+4] +
mov eax [edx+4] +
mov eax [edx+4] +
mov eax [edx+4] +
mov eax [edx+4] +
push ecx  +
call sub_4A19B9  +
mov eax [edx+4] +
lea ecx [esi+20h] +
cmp byte ptr [ecx+20h] 0 +
jz loc_427FD9  +
call sub_420FBF  +
lea ecx [esi+4] +
cmp byte ptr [ecx+18h] 0 +
pop esi  +
jnz sub_406DE4  +
retn   +
***
xor edx edx +
cmp [ecx+4] edx +
jz locret_42801D  +
mov eax [ecx+0Ch] +
push edi  +
mov [eax+4] edx +
mov eax [ecx+8] +
mov [eax] edx +
mov edi [ecx+0Ch] +
test edi edi +
jz loc_42801C  +
push esi  +
mov esi edi +
mov edi [edi] +
lea ecx [esi+8] +
call sub_406DE4  +
push esi  +
call ds:free  +
pop ecx  +
test edi edi +
jnz loc_428003  +
pop esi  +
pop edi  +
retn   +
***
mov eax [edi+4] +
test eax eax +
jz loc_428062  +
push esi  +
lea esi [eax+8] +
lea ecx [esi+18h] +
call sub_406DE4  +
mov ecx esi +
call sub_406DE4  +
mov eax [edi+4] +
pop esi  +
pop edi  +
test eax eax +
jz locret_42806F  +
push eax  +
call ds:free  +
pop ecx  +
retn   +
***
mov eax [edi+4] +
test eax eax +
jz loc_4280B4  +
push esi  +
lea esi [eax+10h] +
lea ecx [esi+18h] +
call sub_4221B4  +
mov ecx esi +
call sub_406DE4  +
mov eax [edi+4] +
pop esi  +
pop edi  +
test eax eax +
jz locret_4280C1  +
push eax  +
call ds:free  +
pop ecx  +
retn   +
***
add ecx 0Ch +
add ecx 0Ch +
call sub_4A19B9  +
push ecx  +
push ecx  +
mov eax [ebp+arg_8] +
push ecx  +
mov eax [ecx+8] +
test [ebp+arg_0] 1 +
test [ebp+arg_0] 1 +
sub esp 18h +
sub esp 10h +
sub esp 18h +
sub esp 14h +
mov edx [ebp+arg_0] +
mov eax 1FFFFFFFh +
push ebx  +
mov ebx ecx +
bsr ecx eax +
push esi  +
push edi  +
xor edi edi +
mov [ebp+var_10] ebx +
inc edi  +
mov eax edi +
shl eax cl +
cmp edx eax +
jbe loc_4287D6  +
push offset aInvalidHashBuc  +
call ds:?_Xlength_error@std@@YAXPBD@Z  +
mov esi [ebx+4] +
lea eax [edx-1] +
or eax edi +
mov [ebp+arg_0] esi +
bsr ecx eax +
push esi  +
lea ecx [ecx+1] +
shl edi cl +
lea ecx [ebx+0Ch] +
mov [ebp+var_14] ecx +
lea eax [edi+edi] +
push eax  +
call sub_426DE2  +
lea eax [edi-1] +
mov [ebx+1Ch] edi +
mov [ebx+18h] eax +
mov eax [ebx+4] +
mov eax [eax] +
mov ecx eax +
cmp eax esi +
jz loc_4288C5  +
mov edx [ebp+var_10] +
mov ebx [ebp+var_14] +
mov ecx [ecx] +
mov edx [edx+18h] +
and edx [eax+8] +
mov ebx [ebx] +
mov [ebp+var_8] edx +
mov [ebp+var_C] ebx +
mov edi [ebx+edx*8] +
cmp edi esi +
jnz loc_42883A  +
mov [ebx+edx*8] eax +
mov [ebx+edx*8+4] eax +
jmp loc_4288BB  +
mov edx [ebx+edx*8+4] +
mov esi [eax+8] +
cmp esi [edx+8] +
mov esi [ebp+arg_0] +
jnz loc_428878  +
mov edx [edx] +
mov [ebp+var_4] edx +
cmp edx eax +
jz loc_428873  +
mov ebx [eax+4] +
mov esi [ebp+var_4] +
mov [ebx] ecx +
mov edi [ecx+4] +
mov [edi] edx +
mov edx [edx+4] +
mov [edx] eax +
mov [esi+4] edi +
mov esi [ebp+arg_0] +
mov [ecx+4] ebx +
mov ebx [ebp+var_C] +
mov [eax+4] edx +
mov edx [ebp+var_8] +
jmp loc_428831  +
mov [ebp+var_4] edx +
cmp edi edx +
jz loc_428891  +
mov ebx [eax+8] +
mov edx [edx+4] +
mov [ebp+var_4] edx +
cmp ebx [edx+8] +
jz loc_4288CC  +
cmp edi edx +
jnz loc_428882  +
mov ebx [eax+4] +
mov edx [ebp+var_4] +
mov esi [ebp+var_4] +
mov [ebx] ecx +
mov edi [ecx+4] +
mov [edi] edx +
mov edx [edx+4] +
mov [edx] eax +
mov [esi+4] edi +
mov edi [ebp+var_C] +
mov [ecx+4] ebx +
mov [eax+4] edx +
mov edx [ebp+var_8] +
mov [edi+edx*8] eax +
mov esi [ebp+arg_0] +
mov eax ecx +
cmp ecx esi +
jnz loc_428811  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
mov ebx [eax+4] +
mov edx [edx] +
mov [ebp+var_C] edx +
mov esi edx +
mov [ebx] ecx +
mov edi [ecx+4] +
mov [edi] edx +
mov edx [edx+4] +
mov [edx] eax +
mov [esi+4] edi +
mov [ecx+4] ebx +
mov [eax+4] edx +
jmp loc_4288B8  +
***
push ecx  +
sub esp 20h +
push esi  +
call sub_4A19B9  +
call sub_4A19B9  +
call sub_4A19B9  +
mov eax [ecx+18h] +
call sub_4A19B9  +
call sub_4A19B9  +
push ecx  +
mov eax [ecx+18h] +
call sub_4A19B9  +
call sub_4A19B9  +
mov eax [esi+18h] +
mov ecx [esi+18h] +
test ecx ecx +
jz loc_429056  +
and dword ptr [esi+18h] 0 +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov ecx esi +
pop esi  +
jmp sub_406DE4  +
***
push esi  +
mov esi ecx +
lea eax [esi+38h] +
push eax  +
call ds:_Mtx_destroy_in_situ  +
pop ecx  +
lea ecx [esi+18h] +
call sub_406DE4  +
mov ecx esi +
pop esi  +
jmp sub_406DE4  +
***
push esi  +
mov esi ecx +
mov ecx [esi+84h] +
test ecx ecx +
jz loc_429095  +
and dword ptr [esi+84h] 0 +
mov eax [ecx] +
call dword ptr [eax+4]  +
lea eax [esi+54h] +
push eax  +
call ds:_Mtx_destroy_in_situ  +
pop ecx  +
lea ecx [esi+34h] +
call sub_406DE4  +
lea ecx [esi+18h] +
call sub_406DE4  +
mov ecx esi +
pop esi  +
jmp sub_406DE4  +
***
push 24h  +
push 38h  +
call sub_4A19B9  +
call sub_4A19B9  +
mov esi ecx +
mov [ebp-10h] esi +
mov byte ptr [esi+44h] 0 +
mov eax [ebp+8] +
and dword ptr [ebp-4] 0 +
cmp byte ptr [eax+44h] 0 +
jz loc_429203  +
push eax  +
call sub_42944A  +
mov eax esi +
call sub_4A198D  +
retn 4  +
***
push esi  +
call sub_4A19B9  +
call sub_4A19B9  +
call sub_4A19B9  +
and esp 0FFFFFFF8h +
push esi  +
push ecx  +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_4] +
push esi  +
push 0FFFFFFFFh  +
cmp byte ptr [ecx+44h] 0 +
pop ebp  +
cmp [ebp+arg_4] 0 +
push ecx  +
push esi  +
mov esi ecx +
or eax 0FFFFFFFFh +
xadd [esi+4] eax +
dec eax  +
jnz loc_4297E9  +
mov eax [esi] +
push 0  +
call dword ptr [eax+20h]  +
push esi  +
call Mso20Win32Client_3788  +
pop esi  +
leave   +
retn   +
***
push ecx  +
call sub_4A19B9  +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
push 0FFFFFFFFh  +
mov ecx [esi+0A8h] +
push esi  +
lea ecx [esi+0B8h] +
push esi  +
push ebx  +
cmp [ebp+arg_0] 0 +
sub esp 10h +
mov edx [ebp+arg_0] +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push ecx  +
mov eax [ebp+arg_0] +
cmp dword ptr [esi] 0 +
push esi  +
push ecx  +
lea ecx [esi+8] +
push esi  +
push 0FFFFFFFFh  +
push ecx  +
push ecx  +
sub esp 0Ch +
sub esp 0Ch +
push edi  +
push esi  +
push ecx  +
and esp 0FFFFFFF8h +
push esi  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push ecx  +
push esi  +
cmp byte ptr [ecx+12h] 0 +
push esi  +
push esi  +
mov ecx [esi+0BCh] +
test ecx ecx +
jz loc_42AAC7  +
and dword ptr [esi+0BCh] 0 +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov ecx [esi+0B8h] +
test ecx ecx +
jz loc_42AADD  +
and dword ptr [esi+0B8h] 0 +
mov eax [ecx] +
call dword ptr [eax+4]  +
lea ecx [esi+5Ch] +
call sub_426617  +
mov ecx esi +
pop esi  +
jmp sub_4210F0  +
***
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
mov eax [ebp+arg_0] +
sub esp 0Ch +
push 0FFFFFFFFh  +
push offset loc_4A4617  +
mov eax large fs:0 +
push eax  +
push ecx  +
push esi  +
push edi  +
mov eax dword_508660 +
xor eax ebp +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov esi ecx +
xor edi edi +
lea eax [ebp+var_10] +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
push edx  +
push eax  +
mov [ebp+var_10] edi +
call Mso20Win32Client_4088  +
test eax eax +
jns loc_42AC79  +
mov [esi] edi +
mov [ebp+var_4] 1 +
mov ecx [ebp+var_10] +
test ecx ecx +
jz loc_42AC7E  +
mov [ebp+var_10] edi +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+8]  +
jmp loc_42AC7E  +
mov eax [ebp+var_10] +
mov [esi] eax +
mov eax esi +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
leave   +
retn   +
***
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
push 0FFFFFFFFh  +
push esi  +
push edi  +
push ecx  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
cmp dword ptr [ecx+18h] 0 +
sub esp 58h +
mov eax [ebp+arg_0] +
sub esp 34h +
mov eax offset loc_4A4721 +
mov esi ecx +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
call sub_4A19B9  +
sub esp 8Ch +
and esp 0FFFFFFF8h +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
sub ecx 1 +
sub esp 0F0h +
mov eax 1074h +
push 0FFFFFFFFh  +
call sub_4A19EC  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
sub esp 68h +
sub esp 54h +
mov edx [esi+24h] +
push 0FFFFFFFFh  +
jmp loc_42EF5A  +
***
and esp 0FFFFFFF8h +
cmp [ecx+5Ch] esi +
push esi  +
cmp byte_50BC44 0 +
push 0FFFFFFFFh  +
mov edi offset dword_50BBA0 +
call sub_4A19B9  +
mov eax ecx +
mov [ebp-18h] eax +
xor edi edi +
mov [ebp-4] edi +
cmp byte ptr [eax+0A4h] 0 +
mov ecx [ebp+8] +
jz loc_42F42D  +
push 4  +
jmp loc_42F69E  +
test ecx ecx +
jz loc_42F69C  +
cmp dword ptr [ebp+0Ch] 6 +
jnb loc_42F69C  +
mov ebx [ebp+28h] +
cmp [ebx] edi +
jz loc_42F450  +
test byte ptr [ebp+24h] 4 +
jnz loc_42F69C  +
mov [ebp-14h] edi +
mov byte ptr [ebp-4] 1 +
mov esi [ebp+20h] +
test esi esi +
jz loc_42F466  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax]  +
jmp loc_42F4A6  +
push 1  +
mov ebx 0B8h +
push ebx  +
call Mso20Win32Client_1193  +
mov esi eax +
test esi esi +
jnz loc_42F480  +
call Mso20Win32Client_56  +
push ebx  +
push edi  +
push esi  +
call j_memset  +
add esp 0Ch +
mov ecx esi +
call sub_421399  +
lea ecx [esi+0B0h] +
mov dword ptr [esi] offset off_4C8164 +
push edi  +
mov [ecx] edi +
call sub_406DD8  +
cmp dword ptr [ebp+14h] 0 +
mov [ebp-14h] esi +
jbe loc_42F4BD  +
cmp dword ptr [ebp+10h] 0 +
jnz loc_42F4BD  +
push 2  +
pop ebx  +
jmp loc_42F65A  +
mov eax [ebp+28h] +
mov edi [eax] +
mov [ebp+20h] edi +
test edi edi +
jz loc_42F4D2  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax]  +
mov eax [ebp+28h] +
test dword ptr [ebp+24h] 200h +
push 2  +
pop ebx  +
mov [ebp-4] bl +
jz loc_42F54D  +
mov ecx [eax] +
test ecx ecx +
jz loc_42F64D  +
mov eax [ecx] +
call dword ptr [eax+8]  +
or eax ebx +
mov ebx [ebp+28h] +
mov [ebp+20h] eax +
mov ecx [ebx] +
test ecx ecx +
jz loc_42F676  +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
push 3Ch  +
pop ecx  +
xor edx edx +
div  ecx +
push 1  +
push 10h  +
mov [ebp+28h] eax +
call Mso20Win32Client_1193  +
mov edx eax +
test edx edx +
jz loc_42F59A  +
imul eax [ebp+28h] +
mov ecx edi +
mov dword ptr [edx+4] 1 +
mov edi edx +
mov dword ptr [edx] offset off_4C896C +
mov [edx+8] eax +
mov eax [ebp+20h] +
mov [edx+0Ch] eax +
mov [ebp+20h] edi +
test ecx ecx +
jz loc_42F550  +
mov eax [ecx] +
call dword ptr [eax+4]  +
jmp loc_42F550  +
mov ebx [ebp+28h] +
cmp dword ptr [ebx] 0 +
jz loc_42F55E  +
mov eax [esi] +
mov ecx esi +
push 1  +
call dword ptr [eax+34h]  +
mov eax [esi] +
mov ecx esi +
push dword ptr [ebp+8]  +
call dword ptr [eax+44h]  +
xor ecx ecx +
mov byte ptr [ebp-4] 3 +
mov ebx [ebp-18h] +
inc ecx  +
xadd [ebx+18h] ecx +
inc ecx  +
mov eax [esi] +
mov [ebp-20h] ecx +
push ecx  +
mov ecx esi +
call dword ptr [eax+24h]  +
mov eax [ebp+8] +
push 1  +
push 0C4h  +
mov [ebp+28h] eax +
call Mso20Win32Client_1193  +
test eax eax +
jnz loc_42F5A5  +
push 1117748h  +
call Mso20Win32Client_2904  +
push dword ptr [ebp+1Ch]  +
lea ecx [ebp+20h] +
push dword ptr [ebp+2Ch]  +
push ecx  +
push dword ptr [ebp+24h]  +
mov ecx eax +
push esi  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+28h]  +
push dword ptr [ebp-20h]  +
call sub_42B566  +
mov [ebp+28h] eax +
lea eax [ebx+24h] +
push ecx  +
push eax  +
lea ecx [ebp-30h] +
call sub_40E30B  +
push 4  +
pop ebx  +
mov [ebp-4] bl +
mov eax [ebp-18h] +
cmp byte ptr [eax+0A4h] 0 +
jnz loc_42F639  +
mov eax [eax+20h] +
mov [ebp+24h] eax +
test eax eax +
jz loc_42F639  +
mov ebx [ebp+28h] +
mov ecx [ebp-20h] +
mov [ebp-24h] ecx +
mov [ebp-20h] ebx +
test ebx ebx +
jz loc_42F611  +
mov eax [ebx] +
mov ecx ebx +
call dword ptr [eax]  +
mov eax [ebp+24h] +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 5 +
push ecx  +
lea ecx [ebp-1Ch] +
push ecx  +
mov ecx eax +
call sub_430B6E  +
mov ecx [ebp-20h] +
test ecx ecx +
jz loc_42F630  +
mov eax [ecx] +
call dword ptr [eax+4]  +
cmp byte ptr [ebp-18h] 0 +
jnz loc_42F66A  +
xor ebx ebx +
inc ebx  +
lea ecx [ebp-30h] +
call sub_40E2E2  +
mov ecx [ebp+28h] +
test ecx ecx +
jz loc_42F64D  +
mov eax [ecx] +
call dword ptr [eax+4]  +
test edi edi +
jz loc_42F658  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+4]  +
xor edi edi +
test esi esi +
jz loc_42F665  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+4]  +
mov ecx [ebp+8] +
jmp loc_42F69F  +
lea ecx [ebp-30h] +
call sub_40E2E2  +
test ebx ebx +
jnz loc_42F683  +
push 0  +
push 152139Ah  +
call Mso20Win32Client_2055  +
mov ecx ebx +
call sub_42B8F3  +
mov ebx eax +
test ebx ebx +
jz loc_42F641  +
mov ecx [ebp+28h] +
push 0  +
call sub_42F22B  +
jmp loc_42F641  +
push 2  +
pop ebx  +
test ecx ecx +
jz loc_42F6AB  +
mov [ebp+8] edi +
mov edx [ecx] +
call dword ptr [edx+4]  +
mov eax ebx +
call sub_4A198D  +
retn 28h  +
***
push esi  +
call sub_4A19EC  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
mov ecx offset dword_50BBA0 +
push esi  +
cmp dword ptr [esi+10h] 0 +
push esi  +
push dword ptr [ecx+0Ch]  +
push ecx  +
push ecx  +
cmp [ebp+arg_0] 0 +
push 0FFFFFFFFh  +
push ecx  +
push esi  +
mov esi ecx +
or eax 0FFFFFFFFh +
xadd [esi+0B0h] eax +
dec eax  +
jnz loc_43024A  +
mov eax [esi] +
push 0  +
call dword ptr [eax+8]  +
push esi  +
call Mso20Win32Client_3788  +
pop esi  +
leave   +
retn   +
***
push ecx  +
push esi  +
mov esi ecx +
or eax 0FFFFFFFFh +
xadd [esi+4] eax +
dec eax  +
jnz loc_430275  +
mov eax [esi] +
push 0  +
call dword ptr [eax+18h]  +
push esi  +
call Mso20Win32Client_3788  +
pop esi  +
leave   +
retn   +
***
mov eax [ecx] +
push ecx  +
push ecx  +
call sub_4A19B9  +
lea ecx [esi+5Ch] +
mov dword ptr [esi] offset off_4C80C0 +
call sub_426617  +
mov ecx esi +
pop esi  +
jmp sub_4210F0  +
***
push ebx  +
push esi  +
push ecx  +
call sub_4A19B9  +
lea ecx [esi+0Ch] +
call sub_4262DB  +
mov edx [esi+4] +
call sub_430E18  +
push dword ptr [esi+4]  +
call ds:free  +
pop ecx  +
pop esi  +
retn   +
***
push esi  +
imul edx [ebp+arg_4] +
mov esi ecx +
sub esp 34h +
sub esp 10h +
push 0FFFFFFFFh  +
sub esp 0Ch +
sub esp 1Ch +
sub esp 14h +
sub esp 10h +
push 0FFFFFFFFh  +
push offset loc_4A496E  +
mov eax large fs:0 +
push eax  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov eax dword_508660 +
xor eax ebp +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov [ebp+var_10] edx +
mov ebx ecx +
push 1  +
push 48h  +
call Mso20Win32Client_1193  +
mov edi eax +
test edi edi +
jnz loc_4308EB  +
push 1117748h  +
call Mso20Win32Client_2904  +
and [ebp+var_4] 0 +
lea ecx [edi+8] +
mov eax [ebp+arg_0] +
mov esi [eax] +
mov dword ptr [edi+4] 1 +
mov dword ptr [edi] offset off_4C5974 +
push ecx  +
lea eax [ebp+arg_0] +
mov byte ptr [ebp+var_4] 1 +
and [ebp+arg_0] 0 +
push eax  +
call sub_429814  +
push [ebp+var_10]  +
lea ecx [edi+28h] +
mov byte ptr [ebp+var_4] 0 +
call sub_406AE8  +
mov [edi+40h] esi +
mov eax ebx +
mov byte ptr [edi+44h] 0 +
mov [ebx] edi +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
push off_5095B0  +
xor ebx ebx +
mov [ebp-8] ecx +
mov dword ptr [ebp-14h] offset off_5095B0 +
mov [ebp-10h] ebx +
call ds:AcquireSRWLockShared  +
inc dword ptr [ebp-10h]  +
mov edi dword_50BB60 +
test edi edi +
jz loc_430999  +
mov ebx [ebp-8] +
mov eax [edi] +
mov ecx [ebx+4] +
mov esi [eax+20h] +
add ecx 8 +
call sub_43028F  +
mov ecx eax +
mov edx [eax] +
call dword ptr [edx+44h]  +
push eax  +
mov ecx edi +
call esi  +
mov ecx [ebx] +
mov bl 1 +
mov [ecx] al +
mov eax [ebp-10h] +
test eax eax +
jz loc_4309C0  +
dec dword ptr [ebp-10h]  +
mov ecx [ebp-14h] +
push dword ptr [ecx]  +
call ds:ReleaseSRWLockShared  +
mov ecx [ebp-10h] +
test ecx ecx +
jnz loc_4309A0  +
sub esp 18h +
push 0FFFFFFFFh  +
push ecx  +
call sub_4A19B9  +
push ecx  +
call sub_4A19B9  +
mov eax [edx+4] +
push esi  +
and dword ptr [eax] 0 +
mov esi [edx] +
test esi esi +
jz loc_430E47  +
push edi  +
mov ecx [esi+0Ch] +
mov edi [esi] +
test ecx ecx +
jz loc_430E38  +
and dword ptr [esi+0Ch] 0 +
mov eax [ecx] +
call dword ptr [eax+4]  +
push esi  +
call ds:free  +
mov esi edi +
pop ecx  +
test edi edi +
jnz loc_430E26  +
pop edi  +
pop esi  +
retn   +
***
cmp dword ptr [ecx] 0 +
push esi  +
call sub_4A19B9  +
push ecx  +
push ecx  +
push esi  +
push edi  +
mov edi ecx +
push ecx  +
push ecx  +
mov eax [edi+8] +
inc eax  +
mov esi [edi+1Ch] +
movd xmm0 eax +
cvtdq2pd xmm0 xmm0 +
shr eax 1Fh +
addsd xmm0 ds:qword_4F9690[eax*8] +
cvtpd2ps xmm0 xmm0 +
divss xmm0 dword ptr [edi] +
cvtps2pd xmm0 xmm0 +
movsd [ebp+var_8] xmm0 +
fld  [ebp+var_8] +
fstp  [esp+18h+var_18] +
call j_ceil  +
fstp  [ebp+var_8] +
movsd xmm0 [ebp+var_8] +
cvtpd2ps xmm0 xmm0 +
pop ecx  +
pop ecx  +
call loc_4A1CC6  +
push 8  +
pop ecx  +
cmp eax ecx +
cmova ecx eax +
cmp esi ecx +
jnb loc_430FC7  +
cmp esi 200h +
jnb loc_430FC5  +
shl esi 3 +
cmp esi ecx +
jnb loc_430FC7  +
mov esi ecx +
push esi  +
mov ecx edi +
call sub_430FD6  +
pop edi  +
pop esi  +
leave   +
retn   +
***
sub esp 14h +
push 0FFFFFFFFh  +
mov ebx ecx +
sub esp 38h +
push ecx  +
mov ecx [esi+18h] +
push esi  +
mov edx [esi+28h] +
push esi  +
lea ecx [esi+68h] +
sub esp 18h +
call sub_4A19B9  +
mov ecx [ecx+8] +
push esi  +
push ecx  +
call sub_4A19B9  +
push 0FFFFFFFFh  +
sub esp 38h +
sub esp 9Ch +
test [ebp+arg_0] 1 +
mov esi ecx +
push esi  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push esi  +
lea ecx [esi+0BCh] +
and esp 0FFFFFFF8h +
cmp dword ptr [ecx+38h] 0 +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push esi  +
mov edx [ebp+arg_4] +
push 0FFFFFFFFh  +
call sub_4A19B9  +
call sub_4A19EC  +
push 0FFFFFFFFh  +
push esi  +
push 0FFFFFFFFh  +
lea ecx [esi+0Ch] +
push ecx  +
push ecx  +
push ebx  +
mov ebx [ebp+arg_8] +
xor edx edx +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov esi ecx +
mov [edi] edx +
mov [ebx] edx +
cmp [esi+10h] edx +
jz loc_433460  +
mov eax [ebp+arg_0] +
mov ecx 811C9DC5h +
mov [ebp+arg_4] eax +
movzx eax byte ptr [ebp+edx+arg_4] +
xor eax ecx +
imul ecx eax +
inc edx  +
cmp edx 4 +
jb loc_433418  +
push ecx  +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
lea ecx [esi+8] +
call sub_428E2B  +
mov ecx [eax+4] +
test ecx ecx +
jnz loc_433446  +
mov ecx [esi+0Ch] +
cmp ecx [esi+0Ch] +
jz loc_433460  +
mov eax [ecx+0Ch] +
cmp eax [ecx+10h] +
jz loc_433460  +
mov [edi] eax +
mov eax [ecx+10h] +
sub eax [ecx+0Ch] +
sar eax 2 +
mov [ebx] eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edx ecx +
mov edi ecx +
push ecx  +
call sub_4A19B9  +
push esi  +
sub esp 14h +
push ecx  +
call sub_4A19B9  +
call sub_4A19B9  +
call sub_4A19B9  +
call sub_4A1A22  +
call sub_4A19B9  +
push ecx  +
call sub_4A19B9  +
mov eax [edx+4] +
push edi  +
and dword ptr [eax] 0 +
mov edi [edx] +
test edi edi +
jz loc_433D50  +
push esi  +
mov esi [edi] +
lea ecx [edi+0Ch] +
call sub_4334A8  +
push edi  +
call ds:free  +
mov edi esi +
pop ecx  +
test esi esi +
jnz loc_433D37  +
pop esi  +
pop edi  +
retn   +
***
push ecx  +
mov eax [ebp+arg_8] +
push ecx  +
mov eax 1FFFFFFFh +
and esp 0FFFFFFF8h +
mov eax dword_50BC98 +
call sub_4A19B9  +
sub esp 0Ch +
push 0FFFFFFFFh  +
push edi  +
push ebx  +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
sub esp 24h +
push 0FFFFFFFFh  +
sub esp 0F8h +
sub esp 0BCh +
sub esp 148h +
sub esp 30h +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
sub esp 5Ch +
mov edx ecx +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push offset loc_4A1FD6  +
mov eax large fs:0 +
push eax  +
push ecx  +
push esi  +
mov eax dword_508660 +
xor eax ebp +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov esi ecx +
mov eax [esi+10h] +
test eax eax +
jz loc_435BE6  +
cmp eax edx +
jbe loc_435BB5  +
cmp dword ptr [esi+14h] 8 +
jb loc_435B92  +
mov ecx [esi] +
lea eax [ecx+eax*2] +
mov ecx esi +
jb loc_435B9B  +
mov ecx [esi] +
lea ecx [ecx+edx*2] +
mov edx esi +
jb loc_435BA4  +
mov edx [esi] +
sub eax ecx +
sub ecx edx +
sar eax 1 +
sar ecx 1 +
push eax  +
push ecx  +
mov ecx esi +
call sub_4376CC  +
cmp dword ptr [esi+14h] 8 +
mov ecx esi +
jb loc_435BBF  +
mov ecx [esi] +
push [ebp+var_10]  +
mov edx [esi+10h] +
push 9  +
push ecx  +
push ecx  +
call sub_437EBA  +
cmp eax 0FFFFFFFFh +
jz loc_435BE6  +
push 1  +
push offset unk_4C894C  +
push 1  +
push eax  +
mov ecx esi +
call sub_426BA6  +
jmp loc_435BB5  +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop esi  +
leave   +
retn   +
***
push ecx  +
push 0FFFFFFFFh  +
push 1  +
sub esp 10h +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
sub esp 0BCh +
push 0FFFFFFFFh  +
sub esp 0B8h +
sub esp 14h +
push ecx  +
and esp 0FFFFFFF8h +
sub esp 74h +
lea ecx [esi+0Ch] +
push 0FFFFFFFFh  +
sub esp 0F0h +
push 0FFFFFFFFh  +
push offset loc_4A40A4  +
mov eax large fs:0 +
push eax  +
sub esp 64h +
mov eax dword_508660 +
xor eax ebp +
mov [ebp+var_10] eax +
push ebx  +
push esi  +
push edi  +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov ebx edx +
mov edi ecx +
mov [ebp+var_3C] edi +
lea ecx [ebp+var_68] +
call sub_4280F5  +
test ebx ebx +
jz loc_436E15  +
push ebx  +
lea eax [ebp+var_48] +
push eax  +
call Mso20Win32Client_2280  +
mov eax [ebp+var_44] +
mov esi [ebp+var_48] +
cmp esi eax +
jz loc_436E0D  +
mov edi eax +
lea ecx [ebp+var_38] +
call sub_437B14  +
mov eax [ebp+var_38] +
test eax eax +
jz loc_436DF3  +
cmp dword ptr [esi+14h] 8 +
mov ecx esi +
jb loc_436D99  +
mov ecx [esi] +
push ecx  +
push ebx  +
mov ecx eax +
call sub_41ACD6  +
test al al +
jz loc_436DF3  +
cmp dword ptr [esi+14h] 8 +
mov eax esi +
jb loc_436DB0  +
mov eax [esi] +
push eax  +
lea ecx [ebp+var_30] +
call sub_406AC5  +
mov eax [ebp+var_38] +
lea ecx [ebp+var_68] +
and [ebp+var_38] 0 +
mov [ebp+var_18] eax +
mov eax [ebp+var_34] +
and [ebp+var_34] 0 +
mov [ebp+var_14] eax +
lea eax [ebp+var_30] +
push eax  +
lea eax [ebp+var_70] +
push eax  +
call sub_437DA7  +
mov ecx [ebp+var_14] +
test ecx ecx +
jz loc_436DE9  +
call sub_401A51  +
lea ecx [ebp+var_30] +
call sub_406DE4  +
jmp loc_436DFF  +
mov ecx [ebp+var_34] +
test ecx ecx +
jz loc_436DFF  +
call sub_401A51  +
add esi 18h +
cmp esi edi +
jnz loc_436D80  +
mov edi [ebp+var_3C] +
lea ecx [ebp+var_48] +
call sub_41A0AF  +
lea eax [ebp+var_68] +
mov ecx edi +
push eax  +
call sub_437613  +
lea ecx [ebp+var_68] +
call sub_426D80  +
mov eax edi +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_10] +
xor ecx ebp +
call sub_49FFB8  +
leave   +
retn   +
***
push 0FFFFFFFFh  +
sub esp 0Ch +
sub esp 40h +
sub esp 40h +
sub esp 48h +
sub esp 40h +
and esp 0FFFFFFF8h +
push ecx  +
push ecx  +
lea ecx [esp+8+var_8] +
call sub_435C3A  +
mov ecx [esp+8+var_8] +
test ecx ecx +
jz loc_437487  +
push ecx  +
push 1  +
call sub_43648C  +
mov ecx [esp+8+var_4] +
test ecx ecx +
jz loc_437494  +
call sub_401A51  +
mov esp ebp +
pop ebp  +
retn 8  +
***
mov eax [ecx] +
cmp eax 0FFFFFFFFh +
jz locret_4374AB  +
or dword ptr [ecx] 0FFFFFFFFh +
push eax  +
call ds:FindClose  +
retn   +
***
mov ecx [esi] +
test esi esi +
mov edx [ebp+arg_8] +
push esi  +
call sub_4A19B9  +
call sub_4A19B9  +
push ebx  +
push ecx  +
sub esp 20h +
sub esp 14h +
push ecx  +
push 0FFFFFFFFh  +
push ecx  +
push esi  +
push 0FFFFFFFFh  +
push ecx  +
call sub_4A19B9  +
call sub_4A19B9  +
call sub_4A19B9  +
sub esp 10Ch +
push ecx  +
mov eax [edx+4] +
mov eax [edi+4] +
add ecx 10h +
add ecx 0Ch +
test [ebp+arg_0] 1 +
test [ebp+arg_0] 1 +
call sub_4A19B9  +
mov esi ecx +
push 0  +
call ds:GetLastError  +
mov eax [ebp+arg_0] +
cmp dword ptr [ecx+14h] 0 +
push 0FFFFFFFFh  +
call sub_4A1A22  +
call sub_4383C7  +
push ecx  +
add ecx 0Ch +
mov ecx [ebp+arg_0] +
test [ebp+arg_0] 1 +
cmp ecx 3Ch +
jg loc_4384C4  +
jz loc_4384C0  +
cmp ecx 13h +
jg loc_43844F  +
jz loc_43844B  +
cmp ecx 11h +
ja loc_4384C9  +
jmp ds:off_4384D1[ecx*4]  +
push 4  +
pop eax  +
retn   +
push 16h  +
pop eax  +
retn   +
xor eax eax +
inc eax  +
retn   +
push 2  +
pop eax  +
retn   +
push 8  +
pop eax  +
retn   +
push 3  +
pop eax  +
retn   +
push 0Eh  +
pop eax  +
retn   +
push 0Ah  +
pop eax  +
retn   +
push 18h  +
pop eax  +
retn   +
push 19h  +
pop eax  +
retn   +
push 0Ch  +
pop eax  +
retn   +
push 1Bh  +
pop eax  +
retn   +
cmp ecx 31h +
jg loc_4384A4  +
jz loc_4384A0  +
push 1Dh  +
pop eax  +
cmp ecx eax +
jg loc_438484  +
jz loc_438480  +
sub ecx 15h +
jz loc_43847C  +
sub ecx 1 +
jz loc_438478  +
dec ecx  +
sub ecx 1 +
jz loc_438474  +
sub ecx 1 +
jnz loc_4384C9  +
push 1Fh  +
pop eax  +
retn   +
push 21h  +
pop eax  +
retn   +
push 25h  +
pop eax  +
retn   +
push 17h  +
pop eax  +
retn   +
sub ecx 1Eh +
jz loc_438474  +
sub ecx 6 +
jz loc_43849C  +
dec ecx  +
sub ecx 1 +
jz locret_4384D0  +
sub ecx 6 +
jnz loc_4384C9  +
xor eax eax +
retn   +
push 20h  +
pop eax  +
retn   +
push 22h  +
pop eax  +
retn   +
sub ecx 32h +
jz loc_4384BC  +
sub ecx 4 +
jz loc_4384B8  +
dec ecx  +
sub ecx 1 +
jnz loc_4384C9  +
push 26h  +
pop eax  +
retn   +
push 24h  +
pop eax  +
retn   +
push 1Eh  +
pop eax  +
retn   +
push 5  +
pop eax  +
retn   +
cmp ecx 40h +
jz loc_4384CD  +
push 1Ch  +
pop eax  +
retn   +
push 23h  +
pop eax  +
retn   +
***
mov eax [ecx] +
push 0FFFFFFFFh  +
call sub_4A19B9  +
push esi  +
mov dword ptr [esi] offset off_4C8A7C +
sub esp 24h +
push ebx  +
push [ebp+arg_0]  +
push 0FFFFFFFFh  +
sub esp 1Ch +
mov eax [ecx] +
mov eax [ecx] +
push 0FFFFFFFFh  +
push ebx  +
push 0FFFFFFFFh  +
push esi  +
mov eax [esi] +
push esi  +
push esi  +
mov ecx [ecx+58h] +
mov eax [esi] +
push ecx  +
push esi  +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
mov eax dword_50BF84 +
call sub_4A19B9  +
push 0FFFFFFFFh  +
sub esp 18h +
mov eax [esi] +
push ecx  +
push esi  +
mov eax [ecx] +
push 0FFFFFFFFh  +
mov edx [ebp+arg_8] +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push ecx  +
call sub_4393A4  +
sub esp 0B0h +
mov eax [ecx] +
call sub_4A0F21  +
cmp dword_50B684 0 +
call sub_4A1BEB  +
mov edi [ebp-230h] +
mov eax dword_50B688 +
mov eax dword_50BFEC +
push [ebp+arg_4]  +
push 0  +
push [ebp+arg_0]  +
push edx  +
push ecx  +
call sub_401929  +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
call ds:__stdio_common_vswprintf_s  +
or ecx 0FFFFFFFFh +
add esp 1Ch +
test eax eax +
cmovs eax ecx +
pop ebp  +
retn   +
***
mov eax off_5095D0 +
xor edx edx +
call sub_439A23  +
push esi  +
sub esp 10h +
call sub_4A19EC  +
push ecx  +
push 0FFFFFFFFh  +
mov ecx [ebp+arg_0] +
mov ecx [ebp+arg_0] +
mov ecx [ebp+arg_0] +
push ecx  +
mov esi edx +
call sub_43FDE4  +
push 0FFFFFFFFh  +
call sub_4A19B9  +
sub esp 0Ch +
and dword ptr [ecx+4] 0 +
push esi  +
pop ecx  +
call sub_414FCC  +
push esi  +
or dword ptr [ecx] 0FFFFFFFFh +
mov eax [ebp+arg_0] +
mov eax [ecx+228h] +
lea eax [ecx+0D0h] +
lea eax [ecx+118h] +
lea eax [ecx+120h] +
mov eax [ecx+120h] +
mov eax [ecx+124h] +
mov eax [ecx+158h] +
mov eax [ecx+194h] +
push 0FFFFFFFFh  +
lea eax [ecx+1D4h] +
lea eax [ecx+1E0h] +
push 0FFFFFFFFh  +
mov al [ecx+190h] +
push 0FFFFFFFFh  +
mov al [ecx+94h] +
mov eax [ecx+98h] +
push 0FFFFFFFFh  +
mov al [ecx+220h] +
mov eax [ecx+1D0h] +
mov al [ecx+221h] +
xor dl dl +
mov al [ecx+222h] +
mov dl 1 +
mov eax [ebp+arg_0] +
cmp byte ptr [ecx+174h] 0 +
mov dl 1 +
mov al [ecx+223h] +
mov al [ecx+225h] +
mov dl 1 +
mov al [ecx+224h] +
mov dl 1 +
push 0FFFFFFFFh  +
push esi  +
mov ecx [esi+244h] +
lea ecx [esi+98h] +
lea ecx [esi+98h] +
push 0FFFFFFFFh  +
push ecx  +
push esi  +
mov eax [edx] +
mov edx [ecx+1D8h] +
mov edx [ecx+1E8h] +
sub esp 10h +
and esp 0FFFFFFF8h +
mov edx [ecx] +
mov edx [ecx] +
push 0FFFFFFFFh  +
mov eax [esi] +
push ecx  +
sub esp 20h +
sub esp 20h +
sub esp 20h +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
call sub_4A1A58  +
call sub_4A19EC  +
call sub_4A19EC  +
call sub_4A19EC  +
push esi  +
mov eax [ebp+arg_0] +
push esi  +
push 1  +
push 0Ch  +
mov al [eax] +
mov esi ecx +
mov byte ptr [ebp+arg_0+3] al +
call Mso20Win32Client_1193  +
mov edx eax +
test edx edx +
jnz loc_43BACC  +
push 126244Fh  +
call Mso20Win32Client_2904  +
mov al byte ptr [ebp+arg_0+3] +
mov ecx esi +
mov dword ptr [edx+4] 1 +
mov [edx+8] al +
lea eax [ebp+arg_0] +
push eax  +
mov dword ptr [edx] offset off_4C9320 +
mov [ebp+arg_0] edx +
call sub_419BCD  +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_43BAFA  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov ecx [esi] +
test ecx ecx +
jz loc_43BB50  +
mov edx [esi+8] +
sub edx ecx +
and edx 0FFFFFFF8h +
call sub_4078C9  +
xor eax eax +
mov [esi] eax +
mov [esi+4] eax +
mov [esi+8] eax +
pop esi  +
retn   +
***
mov eax [ebp+arg_0] +
movsx eax byte ptr [esi+30h] +
push ecx  +
sub esp 2Ch +
sub esp 0Ch +
push esi  +
mov ecx [esi+4] +
and esp 0FFFFFFF8h +
call sub_4A1A22  +
call sub_401D0C  +
push ebx  +
push esi  +
mov ecx [ebp+arg_0] +
call sub_4A19EC  +
call sub_4A19EC  +
sub esp 20h +
call sub_4A19B9  +
mov edi [ecx] +
mov [ebp-14h] ecx +
xor ebx ebx +
mov [ebp-4] ebx +
push 28h  +
mov [ebp-10h] ebx +
call ds:malloc  +
mov esi eax +
pop ecx  +
test esi esi +
jnz loc_43C0C3  +
call ds:?_Xbad_alloc@std@@YAXXZ  +
push dword ptr [ebp+8]  +
lea ecx [esi+10h] +
mov [ebp-10h] esi +
call sub_406AE8  +
mov [esi] edi +
mov eax esi +
mov [esi+4] edi +
mov [esi+8] edi +
mov [esi+0Ch] bx +
call sub_4A198D  +
retn 0Ch  +
***
call sub_43A329  +
and dword ptr [ecx+4] 0 +
sub esp 10h +
push esi  +
xor eax eax +
xor eax eax +
xor edx edx +
call sub_4A19B9  +
call sub_4A19B9  +
push 0FFFFFFFFh  +
lea ecx [esi+18h] +
push 0FFFFFFFFh  +
push ecx  +
xor eax eax +
push ecx  +
and esp 0FFFFFFF8h +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push offset loc_4A53F4  +
mov eax large fs:0 +
push eax  +
sub esp 2D4h +
mov eax dword_508660 +
xor eax ebp +
mov [ebp+var_10] eax +
push ebx  +
push esi  +
push edi  +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov edi edx +
mov [ebp+var_30] edi +
mov ebx ecx +
push 2  +
lea ecx [ebp+var_90] +
call sub_403522  +
mov esi eax +
mov [ebp+var_2C] offset aDeserialize +
lea eax [ebp+var_2C] +
push eax  +
push offset off_4C9E30  +
lea ecx [ebp+var_1C] +
call sub_4035B4  +
push esi  +
lea eax [ebp+var_1C] +
push eax  +
lea ecx [ebp+var_38] +
call sub_403A20  +
lea ecx [ebp+var_38] +
call Mso20Win32Client_1620  +
and [ebp+var_28] 0 +
lea ecx [ebp+var_28] +
and [ebp+var_18] 0 +
mov esi eax +
mov [ebp+var_14] 7 +
call sub_4444D8  +
push ecx  +
push eax  +
push offset aMode  +
mov ecx esi +
call sub_41F961  +
mov eax [ebp+var_14] +
cmp eax 8 +
jb loc_43DC88  +
mov ecx [ebp+var_28] +
lea eax ds:2[eax*2] +
mov edx ecx +
cmp eax 1000h +
jb loc_43DC80  +
mov ecx [ecx-4] +
sub edx ecx +
lea eax [edx-4] +
cmp eax 1Fh +
jbe loc_43DC80  +
call ds:_invalid_parameter_noinfo_noreturn  +
push ecx  +
call ds:free  +
pop ecx  +
mov edx edi +
lea ecx [ebp+var_88] +
call sub_43C518  +
cmp [ebp+var_40] 0 +
jnz loc_43DCD2  +
lea eax [ebp+var_2C] +
mov [ebp+var_2C] offset aNulModelDeseri +
push eax  +
push ecx  +
push 0Ah  +
mov edx 75Dh +
mov ecx 229B122h +
call sub_4072B5  +
push 150B19Ch  +
mov edx 80004005h +
lea ecx [ebp+var_38] +
call sub_403B4D  +
and dword ptr [ebx] 0 +
jmp loc_43DDC2  +
lea edx [ebp+var_88] +
lea ecx [ebp+var_2E0] +
call sub_43CABF  +
cmp [ebp+var_98] 0 +
jnz loc_43DD23  +
lea eax [ebp+var_2C] +
mov [ebp+var_2C] offset aNulModelDese_0 +
push eax  +
push ecx  +
push 0Ah  +
mov edx 75Dh +
mov ecx 229B123h +
call sub_4072B5  +
push 150B19Eh  +
mov edx 80004005h +
lea ecx [ebp+var_38] +
call sub_403B4D  +
and dword ptr [ebx] 0 +
jmp loc_43DDA8  +
push 1  +
push 248h  +
call Mso20Win32Client_1193  +
test eax eax +
jnz loc_43DD3A  +
call Mso20Win32Client_56  +
lea ecx [ebp+var_2E0] +
push ecx  +
mov ecx eax +
call sub_43A7E7  +
mov edi eax +
lea eax [ebp+var_88] +
push eax  +
lea esi [edi+0D0h] +
mov ecx esi +
call sub_406A2B  +
lea eax [ebp+var_70] +
push eax  +
lea ecx [esi+18h] +
call sub_406A2B  +
lea eax [ebp+var_58] +
push eax  +
lea ecx [esi+30h] +
call sub_406A2B  +
push [ebp+var_30]  +
lea ecx [edi+22Ch] +
call sub_406A2B  +
push 150B19Fh  +
xor edx edx +
lea ecx [ebp+var_38] +
call sub_403B4D  +
push edi  +
lea eax [ebp+var_30] +
mov [ebp+var_30] offset aNulModelDese_1 +
push eax  +
push ecx  +
push ecx  +
call sub_43E8AC  +
mov [ebx] edi +
cmp [ebp+var_98] 0 +
jz loc_43DDC2  +
mov eax [ebp+var_2E0] +
lea ecx [ebp+var_2E0] +
push 0  +
call dword ptr [eax+4]  +
cmp [ebp+var_40] 0 +
jz loc_43DDD3  +
lea ecx [ebp+var_88] +
call sub_422A35  +
lea ecx [ebp+var_38] +
call Mso20Win32Client_177  +
mov eax ebx +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_10] +
xor ecx ebp +
call sub_49FFB8  +
leave   +
retn   +
***
mov eax [ecx] +
mov eax [ecx+4] +
cmp dword ptr [ecx] 0 +
mov edi ecx +
push ecx  +
mov ecx [ecx+4] +
mov eax [ebp+arg_4] +
sub esp 18h +
push ecx  +
call sub_4A19EC  +
call sub_4A19EC  +
call sub_4A19EC  +
sub esp 28h +
call sub_4A0F21  +
mov edi [ebp-24h] +
test al al +
sub esp 14h +
sub esp 38h +
sub esp 0Ch +
push ecx  +
cmp dword ptr [ecx] 0 +
push esi  +
xor eax eax +
sub esp 0Ch +
push ebx  +
push ebx  +
and esp 0FFFFFFF8h +
sub esp 10h +
push ecx  +
mov eax [edx] +
mov edx [ecx] +
add ecx 4 +
add ecx 0Ch +
lea ecx [esi+18h] +
push [ebp+arg_0]  +
push esi  +
push [ebp+arg_0]  +
push esi  +
push [ebp+arg_0]  +
push [ebp+arg_0]  +
push esi  +
push [ebp+arg_0]  +
push esi  +
push [ebp+arg_0]  +
push [ebp+arg_0]  +
push [ebp+arg_0]  +
push [ebp+arg_0]  +
mov eax [ebp+arg_0] +
lea ecx [esi+90h] +
push [ebp+arg_0]  +
push [ebp+arg_0]  +
push esi  +
push esi  +
mov eax [ebp+arg_8] +
push esi  +
add ecx 0C4h +
mov al [ebp+arg_C] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_8] +
push esi  +
push [ebp+arg_0]  +
add ecx 0F4h +
add ecx 0FCh +
add ecx 104h +
push esi  +
mov eax [ebp+arg_0] +
add ecx 11Ch +
add ecx 124h +
add ecx 12Ch +
push esi  +
push esi  +
push esi  +
mov eax [ebp+arg_8] +
push esi  +
push esi  +
push esi  +
push esi  +
lea ecx [esi+178h] +
mov al [ebp+arg_0] +
push esi  +
mov eax [ebp+arg_4] +
push [ebp+arg_0]  +
mov eax [ebp+arg_4] +
mov eax [ebp+arg_0] +
add ecx 1ACh +
mov eax [ebp+arg_8] +
add ecx 1BCh +
push [ebp+arg_0]  +
push [ebp+arg_0]  +
push [ebp+arg_0]  +
push esi  +
push [ebp+arg_0]  +
push esi  +
lea ecx [esi+1F8h] +
push esi  +
push esi  +
add ecx 20Ch +
mov eax [esi+10h] +
sub esp 1Ch +
call sub_4A19EC  +
push 0FFFFFFFFh  +
push offset loc_4A54FE  +
mov eax large fs:0 +
push eax  +
push ecx  +
push esi  +
push edi  +
mov eax dword_508660 +
xor eax ebp +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov eax large fs:2Ch +
mov ecx [eax] +
mov eax dword_50D0A8 +
cmp eax [ecx+8] +
jg loc_43FE2F  +
mov eax offset dword_50D0AC +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
leave   +
retn   +
mov edi offset dword_50D0A8 +
push edi  +
call sub_4A00F4  +
cmp dword_50D0A8 0FFFFFFFFh +
pop ecx  +
jnz loc_43FE1B  +
lea ecx [ebp+var_10] +
call sub_43BBD1  +
push 2  +
push offset unk_50D0B0  +
mov esi [eax] +
and dword ptr [eax] 0 +
and dword_50D0AC 0 +
call ds:_Mtx_init_in_situ  +
pop ecx  +
pop ecx  +
mov ecx [ebp+var_10] +
mov dword_50D0E0 esi +
test ecx ecx +
jz loc_43FE7B  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+14h]  +
push offset loc_4AAC24  +
call sub_4A070F  +
push edi  +
call sub_4A00B0  +
pop ecx  +
pop ecx  +
jmp loc_43FE1B  +
***
push 0FFFFFFFFh  +
push esi  +
sub esp 20h +
push ecx  +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
push ebx  +
push 0FFFFFFFFh  +
sub esp 10h +
sub esp 10h +
call sub_4A19B9  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
cmp dword ptr [ecx] 0 +
jz loc_440980  +
call sub_41F334  +
mov ecx eax +
mov edx [eax] +
call dword ptr [edx+0Ch]  +
mov ecx [esi] +
pop esi  +
test ecx ecx +
jnz loc_440993  +
push ecx  +
push 26D8345h  +
call Mso20Win32Client_2055  +
mov edx [ecx] +
push [ebp+arg_0]  +
call dword ptr [edx+0Ch]  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 4  +
***
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
sub esp 0Ch +
call sub_4A19B9  +
mov eax [ebp+arg_0] +
push 0FFFFFFFFh  +
mov ecx [ebp+arg_0] +
push ecx  +
sub esp 1Ch +
call sub_4A19B9  +
call sub_4A19EC  +
xor eax eax +
push esi  +
lea ecx [esi+20Ch] +
push 0FFFFFFFFh  +
lea eax [ecx+8] +
call sub_4A19B9  +
call sub_4A19B9  +
mov eax [edx+4] +
mov ecx [edx+4] +
and esp 0FFFFFFF8h +
call sub_4A19B9  +
push ecx  +
and esp 0FFFFFFF8h +
call sub_4A19B9  +
and esp 0FFFFFFF8h +
call sub_4A19B9  +
and esp 0FFFFFFF8h +
call sub_4A19B9  +
and esp 0FFFFFFF8h +
call sub_4A19B9  +
mov edx [ecx+4] +
push esi  +
mov edx [edx+4] +
mov ecx [edx+4] +
sub esp 14h +
push ecx  +
call sub_4A19B9  +
call sub_4A19B9  +
call sub_4A1A22  +
call sub_4A1A22  +
mov edx [ebp+arg_4] +
call sub_4A19B9  +
mov al [ebp+arg_0] +
push ecx  +
push edi  +
push ecx  +
lea ecx [esi+34h] +
call sub_426B87  +
lea ecx [esi+28h] +
call sub_426B87  +
lea ecx [esi+8] +
pop esi  +
jmp loc_4431FA  +
***
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
cmp byte ptr [esi+50h] 0 +
jnz loc_442DA8  +
lea edx [esi+28h] +
mov eax [edx+4] +
mov ecx [edx] +
sub eax ecx +
jz loc_4428F8  +
mov [edx+4] ecx +
lea ebx [esi+34h] +
mov eax [ebx+4] +
mov ecx [ebx] +
sub eax ecx +
jz loc_442907  +
mov [ebx+4] ecx +
mov ecx [esi+1Ch] +
mov edi [esi+20h] +
cmp ecx edi +
jnb loc_442915  +
mov dl [ecx] +
jmp loc_442917  +
xor dl dl +
mov [ebp-8] dl +
mov [ebp-1] dl +
test dl dl +
jz loc_442D7E  +
mov eax [esi] +
cmp eax 0Ah +
ja loc_442D77  +
jmp ds:off_442DCA[eax*4]  +
cmp ecx edi +
jnb loc_442941  +
lea eax [ecx+1] +
mov [esi+1Ch] eax +
push dword ptr [ebp-8]  +
call sub_44272F  +
test al al +
jnz loc_442907  +
cmp dl 22h +
jnz loc_442CB2  +
mov dword ptr [esi] 1 +
jmp loc_442907  +
***
cmp ecx edi +
jnb loc_442968  +
lea eax [ecx+1] +
mov [esi+1Ch] eax +
cmp dl 22h +
jz loc_44297B  +
lea eax [ebp-1] +
push eax  +
lea eax [esi+28h] +
mov ecx eax +
jmp loc_442AD4  +
mov dword ptr [esi] 2 +
jmp loc_442907  +
***
cmp ecx edi +
jnb loc_44298D  +
lea eax [ecx+1] +
mov [esi+1Ch] eax +
push dword ptr [ebp-8]  +
call sub_44272F  +
test al al +
jnz loc_442907  +
cmp dl 3Ah +
jz loc_442CA7  +
push 12CE45Ch  +
jmp loc_442DB4  +
push dword ptr [ebp-8]  +
call sub_44272F  +
test al al +
jz loc_4429CF  +
cmp ecx edi +
jnb loc_442907  +
lea eax [ecx+1] +
mov [esi+1Ch] eax +
jmp loc_442907  +
***
cmp dl 22h +
jnz loc_4429F0  +
cmp ecx edi +
jnb loc_4429DE  +
lea eax [ecx+1] +
mov [esi+1Ch] eax +
mov dword ptr [esi+24h] 1 +
mov dword ptr [esi] 4 +
jmp loc_442907  +
***
cmp dl 5Bh +
jz loc_442CE7  +
cmp dl 7Bh +
jz loc_442CDD  +
cmp dl 30h +
jb loc_442A0C  +
cmp dl 39h +
jbe loc_442A11  +
cmp dl 2Dh +
jnz loc_442A82  +
cmp ecx edi +
jnb loc_442A1B  +
lea eax [ecx+1] +
mov [esi+1Ch] eax +
lea eax [ebp-1] +
mov dword ptr [esi] 5 +
push eax  +
mov ecx ebx +
call sub_44219A  +
mov eax [esi+1Ch] +
cmp eax [esi+20h] +
jnb loc_442A38  +
mov al [eax] +
jmp loc_442A3A  +
xor al al +
cmp al 30h +
jb loc_442A46  +
cmp al 39h +
jbe loc_442907  +
cmp al 2Eh +
jz loc_442907  +
lea eax [ebp-1] +
mov dword ptr [esi+24h] 2 +
push eax  +
mov ecx ebx +
mov byte ptr [ebp-1] 0 +
call sub_44219A  +
push 0Ah  +
pop edi  +
push edi  +
push 0  +
push dword ptr [ebx]  +
call ds:strtoll  +
add esp 0Ch +
mov [esi+40h] eax +
mov [esi+44h] edx +
mov [esi] edi +
jmp loc_442CFB  +
cmp dl 5Dh +
jz loc_442CCA  +
cmp dl 74h +
jz loc_442AB7  +
cmp dl 66h +
jz loc_442AB7  +
cmp dl 6Eh +
jnz loc_442CC0  +
cmp ecx edi +
jnb loc_442AA8  +
lea eax [ecx+1] +
mov [esi+1Ch] eax +
mov dword ptr [esi+24h] 5 +
mov dword ptr [esi] 7 +
jmp loc_442ACE  +
cmp ecx edi +
jnb loc_442AC1  +
lea eax [ecx+1] +
mov [esi+1Ch] eax +
mov dword ptr [esi+24h] 4 +
mov dword ptr [esi] 6 +
lea eax [ebp-1] +
mov ecx ebx +
push eax  +
call sub_44219A  +
jmp loc_442907  +
***
cmp ecx edi +
jnb loc_442AE8  +
lea eax [ecx+1] +
mov [esi+1Ch] eax +
cmp dl 5Ch +
jnz loc_442AF9  +
mov ecx esi +
call sub_44274F  +
mov [ebp-1] al +
jmp loc_442ACE  +
***
cmp dl 22h +
jz loc_442D1D  +
jmp loc_442ACE  +
***
cmp ecx edi +
jnb loc_442B0E  +
lea eax [ecx+1] +
mov [esi+1Ch] eax +
lea eax [ebp-1] +
mov ecx ebx +
push eax  +
call sub_44219A  +
mov eax [esi+1Ch] +
cmp eax [esi+20h] +
jnb loc_442B25  +
mov al [eax] +
jmp loc_442B27  +
xor al al +
cmp al 30h +
jb loc_442B33  +
cmp al 39h +
jbe loc_442907  +
cmp al 2Eh +
jz loc_442907  +
cmp al 65h +
jz loc_442907  +
cmp al 45h +
jz loc_442907  +
cmp al 2Bh +
jz loc_442907  +
cmp al 2Dh +
jz loc_442907  +
lea eax [ebp-1] +
mov byte ptr [ebp-1] 0 +
push eax  +
mov ecx ebx +
call sub_44219A  +
mov edi [ebx] +
mov eax [esi+38h] +
sub eax edi +
push eax  +
push 2Eh  +
push edi  +
call j_memchr  +
mov ecx [esi+38h] +
add esp 0Ch +
test eax eax +
cmovnz ecx eax +
cmp ecx [esi+38h] +
jz loc_442D02  +
push 0  +
push edi  +
mov dword ptr [esi+24h] 3 +
call ds:strtod  +
pop ecx  +
fstp  qword ptr [esi+48h] +
pop ecx  +
jmp loc_442D1D  +
cmp ecx edi +
jnb loc_442BB2  +
lea eax [ecx+1] +
mov [esi+1Ch] eax +
lea eax [ebp-1] +
mov ecx ebx +
push eax  +
call sub_44219A  +
mov ecx [ebx] +
mov dl [ecx] +
cmp dl 74h +
jnz loc_442BD4  +
mov eax [esi+38h] +
sub eax ecx +
cmp eax 4 +
jz loc_442D25  +
cmp dl 66h +
jnz loc_442907  +
mov eax [esi+38h] +
sub eax ecx +
cmp eax 5 +
jnz loc_442907  +
push eax  +
push offset aFalse  +
push ecx  +
call ds:strncmp  +
add esp 0Ch +
test eax eax +
jz loc_442D41  +
push 12CE45Fh  +
jmp loc_442DB4  +
cmp ecx edi +
jnb loc_442C17  +
lea eax [ecx+1] +
mov [esi+1Ch] eax +
lea eax [ebp-1] +
mov ecx ebx +
push eax  +
call sub_44219A  +
mov eax [ebx+4] +
sub eax [ebx] +
cmp eax 4 +
jnz loc_442907  +
push eax  +
push offset aNull_0  +
push dword ptr [ebx]  +
call ds:strncmp  +
add esp 0Ch +
test eax eax +
jz loc_442D4B  +
push 12CE460h  +
jmp loc_442DB4  +
cmp ecx edi +
jnb loc_442C5D  +
lea eax [ecx+1] +
mov [esi+1Ch] eax +
and dword ptr [esi] 0 +
jmp loc_442907  +
***
cmp ecx edi +
jnb loc_442CA7  +
lea eax [ecx+1] +
mov [esi+1Ch] eax +
jmp loc_442CA7  +
cmp ecx edi +
jnb loc_442C7B  +
lea eax [ecx+1] +
mov [esi+1Ch] eax +
push dword ptr [ebp-8]  +
call sub_44272F  +
test al al +
jnz loc_442907  +
cmp dl 2Ch +
jnz loc_442D54  +
mov ecx [esi+14h] +
test ecx ecx +
jz loc_442C5D  +
mov eax [esi+8] +
add ecx ecx +
cmp dword ptr [eax+ecx*8-4] 6 +
jnz loc_442C5D  +
mov dword ptr [esi] 3 +
jmp loc_442907  +
***
cmp dl 7Dh +
jnz loc_442DAF  +
jmp loc_442D59  +
push 12CE45Dh  +
jmp loc_442DB4  +
cmp ecx edi +
jnb loc_442D67  +
lea eax [ecx+1] +
mov [esi+1Ch] eax +
jmp loc_442D67  +
push 8  +
pop eax  +
mov [esi+24h] eax +
mov [esi] eax +
jmp loc_442CF4  +
mov dword ptr [esi+24h] 6 +
mov dword ptr [esi] 9 +
mov ecx esi +
call sub_44282C  +
mov al 1 +
jmp loc_442DAA  +
push 0Ah  +
push 0  +
push edi  +
mov dword ptr [esi+24h] 2 +
call ds:strtoll  +
add esp 0Ch +
mov [esi+40h] eax +
mov [esi+44h] edx +
mov dword ptr [esi] 0Ah +
jmp loc_442CFB  +
***
push 4  +
push offset aTrue  +
push ecx  +
call ds:strncmp  +
add esp 0Ch +
test eax eax +
jz loc_442D4B  +
push 12CE45Eh  +
jmp loc_442DB4  +
and dword ptr [esi+40h] 0 +
and dword ptr [esi+44h] 0 +
jmp loc_442D1D  +
***
mov dword ptr [esi+40h] 1 +
jmp loc_442D45  +
***
cmp dl 7Dh +
jnz loc_442D62  +
mov ecx esi +
call sub_442DF6  +
jmp loc_442CFB  +
***
cmp dl 5Dh +
jnz loc_442D70  +
mov ecx esi +
call sub_442E37  +
jmp loc_442CFB  +
***
push 12CE461h  +
jmp loc_442DB4  +
push 12CE462h  +
jmp loc_442DB4  +
cmp ecx edi +
jnb loc_442D88  +
lea eax [ecx+1] +
mov [esi+1Ch] eax +
cmp dword ptr [esi] 1 +
jz loc_442DA1  +
cmp dword ptr [esi] 4 +
jz loc_442DA1  +
cmp dword ptr [esi] 5 +
jz loc_442DA1  +
cmp dword ptr [esi] 9 +
jz loc_442DA1  +
cmp dword ptr [esi] 8 +
jnz loc_442DA8  +
push 12CE45Ah  +
jmp loc_442DB4  +
xor al al +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
push 12CE45Bh  +
lea ecx [ebp-8] +
call sub_40195E  +
mov ecx eax +
call sub_40196C  +
mov ecx eax +
call sub_43C11F  +
push ecx  +
push ecx  +
call sub_4A19B9  +
mov eax [ebp+arg_0] +
push edi  +
cmp byte ptr [ecx+0Ch] 0 +
cmp byte ptr [ecx+0Ch] 0 +
jnz loc_442F84  +
mov eax [ecx+4] +
cmp dword ptr [eax+24h] 6 +
jnz loc_442F84  +
push 7  +
push ecx  +
mov ecx [ebp+arg_0] +
call sub_442ECD  +
mov eax ecx +
pop ebp  +
retn 4  +
call ds:terminate  +
int 3  +
***
push ebp  +
mov ebp esp +
and esp 0FFFFFFF8h +
sub esp 0Ch +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
cmp byte ptr [esi+0Ch] 0 +
jz loc_442FA5  +
call ds:terminate  +
mov eax [esi+10h] +
push 4  +
pop edi  +
cmp eax edi +
jnz loc_442FB6  +
xor al al +
jmp loc_4430E3  +
push 1  +
pop ebx  +
sub eax 0 +
jz loc_443111  +
sub eax ebx +
jz loc_44300E  +
sub eax ebx +
jnz loc_44314F  +
mov eax [esi+4] +
mov [esi+10h] ebx +
cmp dword ptr [eax+24h] 7 +
jz loc_442FE4  +
cmp dword ptr [eax+24h] 9 +
jnz loc_44312B  +
mov ecx [esi+8] +
test ecx ecx +
jnz loc_442FF7  +
mov ecx eax +
mov [esi+10h] edi +
call loc_4428D4  +
jmp loc_442FAF  +
***
cmp [eax+24h] ecx +
jz loc_44312B  +
push 12CE482h  +
lea ecx [esp+18h] +
jmp loc_443158  +
mov ecx [esi+4] +
mov edx [ecx+24h] +
mov [esp+10h] edx +
lea eax [edx-1] +
cmp eax 8 +
ja loc_443106  +
movzx eax ds:byte_443177[eax] +
jmp ds:off_44316B[eax*4]  +
call loc_4428D4  +
test al al +
jnz loc_44312B  +
push 12CE483h  +
lea ecx [esp+18h] +
jmp loc_443158  +
push 9  +
pop eax  +
push 7  +
pop edi  +
cmp edx 6 +
cmovz eax edi +
xor ebx ebx +
inc ebx  +
mov [esp+14h] eax +
mov [ecx+51h] bl +
mov edi ebx +
mov ecx [esi+4] +
call loc_4428D4  +
test al al +
jz loc_44309A  +
mov ebx [esp+10h] +
mov ecx [esi+4] +
cmp [ecx+24h] ebx +
jnz loc_443080  +
inc edi  +
jmp loc_44308E  +
mov eax [esp+14h] +
cmp [ecx+24h] eax +
jnz loc_44308E  +
sub edi 1 +
jz loc_443097  +
call loc_4428D4  +
test al al +
jnz loc_443075  +
xor ebx ebx +
inc ebx  +
mov eax [esi+4] +
mov byte ptr [eax+51h] 0 +
test edi edi +
jz loc_4430B3  +
push 12CE484h  +
lea ecx [esp+18h] +
jmp loc_443158  +
mov ecx [ebp+8] +
test ecx ecx +
jz loc_4430C2  +
mov eax [esi+4] +
mov eax [eax+1Ch] +
mov [ecx] eax +
mov ecx [esi+4] +
call loc_4428D4  +
test al al +
jnz loc_4430DA  +
mov dword ptr [esi+10h] 4 +
jmp loc_442FAF  +
***
mov dword ptr [esi+10h] 2 +
mov al bl +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
***
cmp dword ptr [esi+8] 0 +
jz loc_442FED  +
cmp edx [esi+8] +
jz loc_44312B  +
push 12CE485h  +
lea ecx [esp+18h] +
jmp loc_443158  +
push 12CE486h  +
lea ecx [esp+18h] +
jmp loc_443158  +
mov ecx [esi+4] +
mov [esi+10h] ebx +
call loc_4428D4  +
test al al +
jnz loc_44312B  +
push 12CE481h  +
lea ecx [esp+18h] +
jmp loc_443158  +
mov ecx [esi+4] +
mov eax [ecx+24h] +
cmp eax [esi+8] +
jnz loc_4430E1  +
mov eax [esi] +
test eax eax +
jz loc_442FED  +
mov dword ptr [eax+10h] 2 +
mov ecx [esi+4] +
jmp loc_442FED  +
***
push 12CE487h  +
lea ecx [esp+18h] +
call sub_40195E  +
mov ecx eax +
call sub_40196C  +
mov ecx eax +
call sub_43C11F  +
push ecx  +
push ebx  +
mov ebx ecx +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebx+4] +
mov ecx edi +
sub ecx [ebx] +
sar ecx 4 +
mov [ebp+var_4] ebx +
cmp esi ecx +
jnb loc_4431BE  +
shl esi 4 +
add esi [ebx] +
cmp esi edi +
jz loc_4431B9  +
mov ebx esi +
mov ecx ebx +
call sub_426B87  +
add ebx 10h +
cmp ebx edi +
jnz loc_4431A8  +
mov ebx [ebp+var_4] +
mov [ebx+4] esi +
jmp loc_4431F3  +
jbe loc_4431F3  +
mov eax [ebx+8] +
sub eax [ebx] +
sar eax 4 +
cmp esi eax +
jbe loc_4431D7  +
push ecx  +
push esi  +
mov ecx ebx +
call sub_443281  +
jmp loc_4431F3  +
sub esi ecx +
jz loc_4431F0  +
xor eax eax +
mov [edi] eax +
mov [edi+4] eax +
mov [edi+8] eax +
mov [edi+0Ch] eax +
add edi 10h +
sub esi 1 +
jnz loc_4431DD  +
mov [ebx+4] edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
push esi  +
sub esp 10h +
push esi  +
push esi  +
mov ecx [ebp+arg_4] +
push ecx  +
mov eax [ecx+4] +
push ecx  +
call sub_4A19B9  +
push esi  +
push ecx  +
push esi  +
sub esp 0Ch +
push edi  +
push esi  +
mov edx [ebp+arg_4] +
push 0FFFFFFFFh  +
cmp dword ptr [edx+14h] 8 +
mov eax large fs:2Ch +
call sub_4A19EC  +
call sub_4A19EC  +
sub esp 20h +
call sub_4A19EC  +
call sub_4A19B9  +
call sub_4A19EC  +
call sub_4A19EC  +
push ecx  +
call sub_414FCC  +
call sub_414FCC  +
call sub_4A19EC  +
call sub_4A19EC  +
call sub_4A19EC  +
push [ebp+arg_4]  +
push ecx  +
push ecx  +
call sub_4A19B9  +
mov ecx [ecx] +
push 2  +
mov edx [ebp+arg_4] +
push esi  +
mov ecx 2801295h +
push esi  +
call sub_4A1A22  +
push ecx  +
call sub_4A1A22  +
mov ecx [esi] +
push esi  +
mov dword ptr [ecx] offset off_4CA250 +
mov edx [ebp+arg_0] +
mov dword ptr [ecx] offset off_4CA23C +
and dword ptr [ecx+4] 0 +
push esi  +
and dword ptr [ecx+8] 0 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_4CA224 +
call sub_444A78  +
test [ebp+arg_0] 1 +
jz loc_444B1E  +
push esi  +
call Mso20Win32Client_3788  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push 0FFFFFFFFh  +
call sub_4A1A22  +
mov esi ecx +
mov [ebp-14h] esi +
push dword_50BCE0  +
call ds:DecodePointer  +
test eax eax +
jz loc_444C24  +
and dword ptr [ebp-4] 0 +
push dword_50BCE0  +
call ds:DecodePointer  +
push esi  +
call eax  +
jmp loc_444C20  +
push 1390323h  +
call Mso20Win32Client_1360  +
mov eax offset loc_444C1D +
retn   +
mov esi [ebp-14h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+10h]  +
call sub_4A198D  +
retn   +
***
push esi  +
sub esp 14h +
push esi  +
mov dword ptr [ecx] offset off_4CA20C +
mov edx ecx +
call sub_4A19B9  +
push esi  +
sub esp 14h +
push esi  +
mov dword ptr [ecx] offset off_4CA224 +
mov edx ecx +
call sub_4A19B9  +
cmp dword_50C084 0 +
mov eax [ebp+arg_0] +
push [ebp+arg_0]  +
mov eax edx +
push 6  +
cmp ecx 80h +
jz loc_444EC3  +
test ecx ecx +
jz loc_444EC3  +
call sub_44553D  +
test al al +
jz loc_444EC3  +
mov al 1 +
retn   +
xor al al +
retn   +
***
push 0FFFFFFFFh  +
mov eax offset loc_444F54 +
push ecx  +
test ecx ecx +
mov esi edx +
mov edx ecx +
push 0FFFFFFFFh  +
mov eax [ebp+arg_0] +
call sub_4A19EC  +
mov ebx [ebp+8] +
lea edi [ebp-260h] +
mov esi [ebp+0Ch] +
xor eax eax +
stos   +
mov ecx 102h +
mov dword ptr [ebp-240h] 3 +
mov [ebp-22Ch] ecx +
mov [ebp-230h] ecx +
stos   +
stos   +
stos   +
lea eax [ebp-228h] +
mov edi offset off_5088E0 +
mov [ebp-234h] eax +
mov [ebp-238h] edi +
and dword ptr [ebp-4] 0 +
push ecx  +
lea ecx [ebp-238h] +
call sub_445497  +
mov dword ptr [ebp-4] 1 +
lea eax [ebp-114h] +
mov ecx 102h +
mov [ebp-124h] edi +
mov [ebp-118h] ecx +
mov [ebp-120h] eax +
mov [ebp-11Ch] ecx +
push ecx  +
lea ecx [ebp-124h] +
mov byte ptr [ebp-4] 2 +
call sub_445497  +
lea eax [ebp-250h] +
mov byte ptr [ebp-4] 3 +
push eax  +
call WinHttpGetIEProxyConfigForCurrentUser  +
cmp eax 1 +
jnz loc_44539F  +
mov ecx [ebp-248h] +
mov eax [ebp-244h] +
test ecx ecx +
jnz loc_445275  +
test eax eax +
jz loc_44539F  +
mov [ebp-268h] eax +
mov edx offset off_4AEFA4 +
push 4  +
pop edi  +
mov eax 100h +
mov [ebp-270h] edx +
mov [ebp-274h] ax +
lea eax [ebp-270h] +
push eax  +
lea eax [ebp-280h] +
mov [ebp-280h] edx +
push eax  +
lea eax [ebp-23Ch] +
mov [ebp-278h] ecx +
push eax  +
push ecx  +
push 32h  +
mov edx 193h +
mov dword ptr [ebp-26Ch] offset aBypass +
mov ecx 64320Fh +
mov [ebp-264h] di +
mov dword ptr [ebp-27Ch] offset aProxy +
mov dword ptr [ebp-23Ch] offset aWebserviceUsin +
call sub_40E3CA  +
imul eax [esi] +
lea ecx [ebp-240h] +
mov dword ptr [eax+ebx] 28h +
imul eax [esi] +
mov [eax+ebx+4] ecx +
imul eax [esi] +
mov [eax+ebx+8] edi +
mov ecx [ebp-248h] +
inc dword ptr [esi]  +
call sub_445006  +
push ecx  +
lea ecx [ebp-238h] +
mov edx eax +
push ecx  +
mov ecx [ebp-248h] +
call sub_45E919  +
mov ecx [ebp-244h] +
call sub_445006  +
push ecx  +
lea ecx [ebp-124h] +
mov edx eax +
push ecx  +
mov ecx [ebp-244h] +
call sub_45E919  +
mov ecx [ebp-234h] +
mov [ebp-25Ch] ecx +
call sub_445006  +
mov ecx [ebp-120h] +
mov [ebp-260h] eax +
mov [ebp-254h] ecx +
call sub_445006  +
mov [ebp-258h] eax +
lea ecx [ebp-260h] +
imul eax [esi] +
mov dword ptr [eax+ebx] 29h +
imul eax [esi] +
mov [eax+ebx+4] ecx +
imul eax [esi] +
mov dword ptr [eax+ebx+8] 10h +
inc dword ptr [esi]  +
mov esi Mso20Win32Client_3788 +
lea eax [ebp-114h] +
cmp [ebp-120h] eax +
jz loc_4453BB  +
push dword ptr [ebp-120h]  +
call esi  +
lea eax [ebp-228h] +
cmp [ebp-234h] eax +
jz loc_4453D1  +
push dword ptr [ebp-234h]  +
call esi  +
call sub_4A19A1  +
retn 8  +
***
mov ecx [ebp+arg_4] +
mov ecx [ebp+arg_0] +
mov ecx [ebp+arg_0] +
push 0FFFFFFFFh  +
push ecx  +
push ecx  +
push ecx  +
cmp ecx 80h +
sub ecx eax +
mov eax [ebp+arg_0] +
push esi  +
mov eax [ebp+arg_0] +
push [ebp+arg_8]  +
push ecx  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_0] +
push esi  +
push esi  +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 4 +
jmp sub_445614  +
***
call sub_4A19EC  +
push esi  +
push esi  +
push esi  +
push esi  +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
push ebx  +
push ecx  +
push ebx  +
push ecx  +
push esi  +
push 0FFFFFFFFh  +
push ecx  +
cmp byte ptr [ecx+70h] 0 +
cmp byte ptr [ecx+70h] 0 +
cmp byte ptr [ecx+78h] 0 +
push ebx  +
mov esi ecx +
push 0FFFFFFFFh  +
sub esp 0Ch +
call sub_4A19EC  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
call sub_4A19EC  +
push ecx  +
cmp [ebp+arg_0] 0 +
push ecx  +
call sub_4A19B9  +
push 0FFFFFFFFh  +
mov edx [ebp+arg_4] +
sub esp 18h +
push ecx  +
mov eax [esi+1Ch] +
cmp byte ptr [ecx+9Ch] 0 +
cmp byte ptr [ecx+9Ch] 0 +
call sub_4468D5  +
call sub_4468D5  +
cmp dword ptr [esi+28h] 0 +
sub esp 14h +
mov eax [ebp+arg_0] +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push esi  +
call sub_4A19EC  +
and esp 0FFFFFFF8h +
push ecx  +
push ecx  +
mov eax 1070h +
mov ecx [ebp+arg_4] +
mov ecx [ebp+arg_0] +
push esi  +
or esi 0FFFFFFFFh +
xadd [ecx+4] esi +
dec esi  +
jnz loc_448D2C  +
test ecx ecx +
jz loc_448D2C  +
mov edx [ecx] +
push 1  +
call dword ptr [edx+74h]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov ecx [ecx] +
test ecx ecx +
jz locret_448D3F  +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+8]  +
retn   +
***
push esi  +
call sub_4A19B9  +
sub esp 14h +
sub esp 14h +
sub esp 1Ch +
push esi  +
push edi  +
push 2  +
push 32h  +
mov esi 1B2h +
mov edi 2158C14Ah +
push esi  +
push edi  +
call Mso20Win32Client_3968  +
test al al +
jz loc_448EB9  +
mov eax [ebp+arg_C] +
mov [ebp+var_1C] eax +
mov eax [ebp+arg_10] +
mov [ebp+var_18] eax +
mov eax [ebp+arg_14] +
mov [ebp+var_14] eax +
mov eax [ebp+arg_18] +
mov [ebp+var_10] eax +
lea eax [ebp+var_1C] +
mov [ebp+var_8] eax +
lea eax [ebp+var_C] +
mov [ebp+var_4] eax +
lea eax [ebp+var_C] +
push eax  +
mov eax [ebp+arg_8] +
mov [ebp+var_C] offset off_4AE4C4 +
push dword ptr [eax]  +
push 2  +
push 32h  +
push esi  +
push edi  +
call Mso20Win32Client_3951  +
pop edi  +
pop esi  +
leave   +
retn 1Ch  +
***
push esi  +
mov esi ecx +
lea eax [esi+4] +
push eax  +
call ds:DeleteCriticalSection  +
mov ecx [esi] +
pop esi  +
test ecx ecx +
jz locret_448ED9  +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+8]  +
retn   +
***
push esi  +
mov esi ecx +
lea ecx [esi+0Ch] +
call sub_4262DB  +
mov edx [esi+4] +
call sub_448FA5  +
push dword ptr [esi+4]  +
call ds:free  +
pop ecx  +
pop esi  +
retn   +
***
call sub_4A19B9  +
mov eax [edx+4] +
push ecx  +
sub esp 20h +
push 0FFFFFFFFh  +
mov ecx dword_50C088 +
lea ecx [esi+0Ch] +
push edi  +
call sub_4A19EC  +
call sub_4A19EC  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
call sub_4A19B9  +
push ecx  +
push esi  +
mov esi ecx +
cmp dword ptr [esi+8] 0 +
jz loc_44988C  +
mov eax [esi+1Ch] +
shr eax 3 +
cmp eax [esi+8] +
jbe loc_449860  +
mov eax [esi+4] +
push eax  +
push dword ptr [eax]  +
call sub_4498A4  +
jmp loc_44988C  +
mov edx [esi+4] +
call sub_449B57  +
mov eax [esi+4] +
mov [eax] eax +
mov eax [esi+4] +
mov [eax+4] eax +
and dword ptr [esi+8] 0 +
mov eax [esi+4] +
mov edx [esi+10h] +
mov ecx [esi+0Ch] +
mov [ebp+var_4] eax +
lea eax [ebp+var_4] +
push eax  +
call sub_4278B7  +
pop esi  +
leave   +
retn   +
***
sub esp 20h +
call sub_4A19B9  +
mov eax [ebp+arg_0] +
mov eax [edx+4] +
push edi  +
and dword ptr [eax] 0 +
mov edi [edx] +
test edi edi +
jz loc_449B7E  +
push esi  +
mov esi [edi] +
lea ecx [edi+8] +
call sub_422A35  +
push edi  +
call ds:free  +
mov edi esi +
pop ecx  +
test esi esi +
jnz loc_449B65  +
pop esi  +
pop edi  +
retn   +
***
push ecx  +
sub esp 18h +
mov eax [ecx+18h] +
call sub_4A19B9  +
push esi  +
call sub_4A19B9  +
push edi  +
push esi  +
lea eax [esi+8] +
sub esp 0Ch +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
call sub_4A19B9  +
mov ecx [ecx+8] +
test esi 0FFF0FFF8h +
xor eax eax +
mov edx esi +
push ecx  +
and esp 0FFFFFFF8h +
add ecx 0FFFFFFF8h +
push esi  +
add ecx 0FFFFFFFCh +
push ebx  +
add ecx 0FFFFFFF8h +
and esp 0FFFFFFF8h +
sub esp 10h +
cmp [ebp+arg_4] 0 +
cmp dword ptr [ecx+10h] 0 +
cmp dword ptr [ecx+14h] 0 +
retn   +
***
mov edi ecx +
push esi  +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_8] +
push esi  +
push 0FFFFFFFFh  +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 8 +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 8 +
sub [esp+arg_0] 8 +
push ecx  +
push ecx  +
push ecx  +
sub esp 0Ch +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
push ecx  +
push ecx  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push esi  +
push ecx  +
sub esp 0Ch +
push edi  +
movzx eax [ebp+arg_0] +
sub esp 1Ch +
mov eax [ebp+arg_4] +
mov eax [ebp+arg_4] +
mov eax [ebp+arg_4] +
mov eax [ebp+arg_4] +
mov eax [ebp+arg_4] +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
push esi  +
mov ecx [ebp+arg_0] +
and esp 0FFFFFFF8h +
mov ecx [ebp+arg_0] +
mov ecx [ebp+arg_0] +
mov edx [ebp+arg_4] +
mov edx [ebp+arg_4] +
mov edx [ebp+arg_4] +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
push 0FFFFFFFFh  +
mov ecx [ebp+arg_0] +
push 0FFFFFFFFh  +
mov ecx [ebp+arg_0] +
mov cl [ebp+arg_4] +
mov cl [ebp+arg_4] +
mov edx [ebp+arg_8] +
mov edx [ebp+arg_8] +
push 0FFFFFFFFh  +
mov ecx [ebp+arg_4] +
mov ecx [ebp+arg_0] +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push offset loc_4A22BF  +
mov eax large fs:0 +
push eax  +
push esi  +
mov eax dword_508660 +
xor eax ebp +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov esi ecx +
cmp byte ptr [esi+68h] 0 +
jz loc_44BA6F  +
lea ecx [esi+4Ch] +
call sub_44B03D  +
cmp byte ptr [esi+68h] 0 +
jz loc_44BA6F  +
lea ecx [esi+50h] +
call sub_406EAB  +
mov byte ptr [esi+68h] 0 +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop esi  +
leave   +
retn   +
***
push ecx  +
push ecx  +
push ecx  +
mov dword ptr [esi] offset off_4CBD50 +
push 0FFFFFFFFh  +
lea ecx [esi+34h] +
call sub_44E2DD  +
mov ecx [esi+30h] +
test ecx ecx +
jz loc_44BE48  +
and dword ptr [esi+30h] 0 +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+8]  +
push esi  +
call ds:_Mtx_destroy_in_situ  +
pop ecx  +
pop esi  +
retn   +
***
lea eax [edi+34h] +
mov eax [ecx+4] +
push ecx  +
mov ecx [esi+228h] +
push 0FFFFFFFFh  +
sub esp 10h +
push ecx  +
push ecx  +
and esp 0FFFFFFF8h +
push ecx  +
mov ecx [esi+0Ch] +
and esp 0FFFFFFF8h +
push ecx  +
sub esp 0Ch +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
push ecx  +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
mov ecx [esi+8] +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
call sub_4A19B9  +
and esp 0FFFFFFF8h +
call sub_4A19B9  +
and esp 0FFFFFFF8h +
push ecx  +
call sub_4A19B9  +
push ecx  +
push 0FFFFFFFFh  +
push esi  +
push esi  +
push ecx  +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
xor eax eax +
push ecx  +
push 0FFFFFFFFh  +
mov ecx [ecx] +
mov eax [ebp+arg_0] +
mov eax [esi] +
push ecx  +
cmp dword ptr [esi] 0 +
push ecx  +
push ecx  +
mov ecx [ecx-4] +
or eax 0FFFFFFFFh +
xadd [ecx+4] eax +
dec eax  +
jnz locret_44E391  +
mov eax [ecx] +
call dword ptr [eax+4]  +
leave   +
retn   +
***
sub esp 0Ch +
sub esp 0Ch +
sub esp 0Ch +
push esi  +
push ecx  +
push 0FFFFFFFFh  +
push esi  +
push esi  +
push 0FFFFFFFFh  +
push ecx  +
push esi  +
sub esp 20h +
push 0FFFFFFFFh  +
sub esp 0Ch +
push 0FFFFFFFFh  +
sub esp 10h +
sub esp 18h +
sub esp 0Ch +
sub esp 14h +
sub esp 10h +
sub esp 3Ch +
push esi  +
push esi  +
sub esp 18h +
sub esp 14h +
push ebx  +
push ebx  +
mov ecx [esi+8] +
mov ecx [esi+10h] +
mov ecx [esi+4] +
mov eax [edi+4] +
mov ecx offset dword_50BDE8 +
sub esp 0Ch +
mov ecx [ebp+arg_0] +
sub esp 0Ch +
push ecx  +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov ecx offset dword_50BDE8 +
mov eax [ecx+0Ch] +
push esi  +
test [ebp+arg_0] 1 +
lea ecx [esi+4] +
lea ecx [esi+4] +
push 0  +
push ecx  +
mov ecx [ebp+arg_4] +
mov ecx [ebp+arg_4] +
cmp dword ptr [ecx+4] 4 +
sub esp 10h +
push ecx  +
call sub_4A19B9  +
sub esp 18h +
push ecx  +
push ecx  +
sub esp 20h +
mov eax offset loc_4A5FEF +
push esi  +
push ecx  +
push esi  +
sub esp 0Ch +
push ecx  +
sub esp 14h +
mov eax offset loc_4A6012 +
push esi  +
sub esp 0Ch +
push ecx  +
mov eax [ecx] +
call sub_4A19B9  +
push esi  +
mov ecx [esi+14h] +
mov ecx [esi+10h] +
push 0FFFFFFFFh  +
mov eax [ebp+arg_0] +
push dword ptr [ecx+8]  +
push dword ptr [ecx+8]  +
mov eax [ebp+arg_0] +
push ecx  +
mov eax [ebp+arg_0] +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
add ecx 8 +
call sub_4A19B9  +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_0] +
push ecx  +
mov eax [ebp+arg_4] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_4] +
mov eax [ebp+arg_4] +
mov eax [ebp+arg_4] +
mov eax [ebp+arg_4] +
lea ecx [esi+0Ch] +
push esi  +
add ecx 8 +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ecx+8] +
push 0FFFFFFFFh  +
push ecx  +
mov ecx [ecx+8] +
mov ecx [ecx+8] +
add ecx 8 +
mov ecx [ecx+8] +
mov edx ecx +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
mov edx ecx +
mov eax [esi+4] +
mov eax [esi] +
test [ebp+arg_0] 1 +
call sub_4A19B9  +
push ebx  +
push ecx  +
push esi  +
push esi  +
push esi  +
push esi  +
push 0FFFFFFFFh  +
push ecx  +
mov eax [ebp+arg_0] +
push esi  +
push esi  +
push 0FFFFFFFFh  +
push ecx  +
push 0FFFFFFFFh  +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_0] +
push esi  +
push esi  +
push ecx  +
sub esp 20h +
and esp 0FFFFFFF8h +
mov eax [ebp+arg_0] +
lea eax [ecx+0C8h] +
sub esp 28h +
push 0FFFFFFFFh  +
mov eax [ebp+arg_0] +
push ecx  +
push ecx  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push ecx  +
push ecx  +
sub esp 1Ch +
sub esp 0Ch +
push 0FFFFFFFFh  +
add ecx 8 +
mov eax [ebp+arg_4] +
push esi  +
push 1  +
mov edx ecx +
push esi  +
sub esp 20h +
test [ebp+arg_0] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_4CBFF4 +
jz loc_451C2A  +
push esi  +
call Mso20Win32Client_3788  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_4A19B9  +
mov ecx [esi+10h] +
mov eax [esi+14h] +
retn   +
***
push esi  +
and dword ptr [ecx+4] 0 +
mov edx [ebp+arg_0] +
mov eax [ebp+arg_0] +
sub esp 0Ch +
push ecx  +
push ecx  +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
push edi  +
mov [ebp+var_8] esi +
mov eax [esi+4] +
mov edx eax +
mov edi [esi] +
sub edx edi +
sar edx 3 +
mov [ebp+var_4] eax +
cmp ecx edx +
jnb loc_451F78  +
push ebx  +
lea ebx [edi+ecx*8] +
mov edi ebx +
cmp ebx eax +
jz loc_451F72  +
mov esi eax +
push edi  +
mov ecx edi +
call sub_4522D1  +
add edi 8 +
cmp edi esi +
jnz loc_451F60  +
mov esi [ebp+var_8] +
mov [esi+4] ebx +
pop ebx  +
jmp loc_451FA7  +
jbe loc_451FA7  +
mov eax [esi+8] +
sub eax edi +
sar eax 3 +
cmp ecx eax +
jbe loc_451F94  +
lea eax [ebp+arg_0] +
push eax  +
push ecx  +
mov ecx esi +
call sub_45210E  +
jmp loc_451FA7  +
push [ebp+arg_0]  +
sub ecx edx +
push ecx  +
push [ebp+var_4]  +
mov ecx esi +
call sub_4520BD  +
mov [esi+4] eax +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
push esi  +
mov edx [ebp+arg_4] +
sub esp 14h +
call sub_4A19B9  +
call sub_4A1A22  +
push edi  +
call sub_4A19B9  +
push esi  +
push esi  +
pop ecx  +
call sub_4A19B9  +
mov edi ecx +
xor esi esi +
mov [ebp-14h] edi +
mov [edi] esi +
mov [edi+4] esi +
mov [ebp-10h] edi +
call sub_452310  +
mov [edi] eax +
push dword ptr [ebp+8]  +
mov [ebp-4] esi +
mov ecx edi +
mov esi [ebp+8] +
push eax  +
mov eax [esi] +
push dword ptr [eax+4]  +
call sub_4523CF  +
mov ecx [edi] +
mov [ecx+4] eax +
mov edx [edi] +
mov eax [esi+4] +
mov [edi+4] eax +
mov esi [edx+4] +
cmp byte ptr [esi+0Dh] 0 +
jnz loc_4523AD  +
mov ecx [esi] +
cmp byte ptr [ecx+0Dh] 0 +
jnz loc_452394  +
mov eax [ecx] +
mov esi ecx +
mov ecx eax +
cmp byte ptr [eax+0Dh] 0 +
jz loc_452388  +
mov [edx] esi +
mov edx [edi] +
mov eax [edx+4] +
jmp loc_45239F  +
mov eax ecx +
mov ecx [eax+8] +
cmp byte ptr [ecx+0Dh] 0 +
jz loc_45239D  +
mov [edx+8] eax +
jmp loc_4523B4  +
mov [edx] edx +
mov eax [edi] +
mov [eax+8] eax +
mov eax edi +
call sub_4A198D  +
retn 8  +
***
call sub_4A1A22  +
call sub_401D0C  +
call sub_4A19B9  +
push esi  +
lea ecx [esi+110h] +
call sub_4A19B9  +
push esi  +
mov esi ecx +
call sub_4539C6  +
test [ebp+arg_0] 1 +
jz loc_452615  +
push esi  +
call Mso20Win32Client_3788  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push ecx  +
call sub_4A19B9  +
mov esi [ebp+8] +
xor ebx ebx +
mov [ebp-4] ebx +
mov [ebp-10h] ebx +
push ebx  +
lea eax [ebp-10h] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push offset aMd5  +
call Mso20Win32Client_4084  +
test eax eax +
jns loc_452793  +
push 4  +
mov [ebp-1Ch] eax +
mov edx 618h +
pop eax  +
mov [ebp-18h] ax +
lea eax [ebp-24h] +
push eax  +
lea eax [ebp-14h] +
mov dword ptr [ebp-20h] offset aMsohrcreatehas +
push eax  +
push ecx  +
push 32h  +
mov ecx 11A021Ch +
mov dword ptr [ebp-24h] offset off_4AEF94 +
mov dword ptr [ebp-14h] offset aTokenConvertma +
call sub_40BDEA  +
mov [ebp-4] bl +
mov ecx [ebp-10h] +
test ecx ecx +
jz loc_452818  +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 2 +
jmp loc_452812  +
mov [ebp-20h] ebx +
mov [ebp-1Ch] ebx +
mov [ebp-18h] ebx +
mov byte ptr [ebp-4] 3 +
lea edx [ebp+0Ch] +
mov eax [ebp+1Ch] +
cmp dword ptr [ebp+20h] 8 +
cmovnb edx [ebp+0Ch] +
lea edi [eax+eax] +
mov eax [ebp-10h] +
test eax eax +
jz loc_4528C8  +
mov ecx [eax] +
push edi  +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
test eax eax +
jns loc_45282A  +
push 4  +
mov [ebp-1Ch] eax +
mov edx 618h +
pop eax  +
mov [ebp-18h] ax +
lea eax [ebp-24h] +
push eax  +
lea eax [ebp-14h] +
mov dword ptr [ebp-20h] offset aHrhashdataresu +
push eax  +
push ecx  +
push 32h  +
mov ecx 11A021Dh +
mov dword ptr [ebp-24h] offset off_4AEF94 +
mov dword ptr [ebp-14h] offset aTokenConvertma +
call sub_40BDEA  +
mov [ebp-4] bl +
mov ecx [ebp-10h] +
test ecx ecx +
jz loc_452818  +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 4 +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+14h]  +
lea ecx [ebp+0Ch] +
call sub_406DE4  +
xor al al +
call sub_4A198D  +
retn 1Ch  +
mov eax [ebp-10h] +
test eax eax +
jz loc_4528C8  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp eax 10h +
jz loc_45284C  +
push ebx  +
push 11A021Eh  +
call Mso20Win32Client_2055  +
mov eax [ebp-10h] +
test eax eax +
jz loc_4528C8  +
mov ecx [eax] +
push 10h  +
push esi  +
push eax  +
call dword ptr [ecx+10h]  +
mov esi eax +
test esi esi +
jns loc_45289D  +
push 4  +
pop eax  +
mov [ebp-18h] ax +
mov edx 618h +
lea eax [ebp-24h] +
mov dword ptr [ebp-20h] offset aHrfinishhashre +
push eax  +
lea eax [ebp-14h] +
mov [ebp-1Ch] esi +
push eax  +
push ecx  +
push 32h  +
mov ecx 11A021Fh +
mov dword ptr [ebp-24h] offset off_4AEF94 +
mov dword ptr [ebp-14h] offset aTokenConvertma +
call sub_40BDEA  +
test esi esi +
mov byte ptr [ebp-4] 0 +
setns bl  +
mov edx [ebp-10h] +
test edx edx +
jz loc_4528B9  +
and dword ptr [ebp-10h] 0 +
mov byte ptr [ebp-4] 5 +
mov ecx [edx] +
push edx  +
call dword ptr [ecx+14h]  +
lea ecx [ebp+0Ch] +
call sub_406DE4  +
mov al bl +
jmp loc_452822  +
push ebx  +
push 8C2697h  +
jmp loc_452846  +
***
call sub_4A19EC  +
call sub_4A1A22  +
lea ecx [esi+0E8h] +
and esp 0FFFFFFF8h +
sub esp 30h +
call sub_4A19EC  +
push 0FFFFFFFFh  +
sub esp 0Ch +
sub esp 14h +
mov eax [ecx] +
call sub_4A19B9  +
call sub_4543B6  +
call sub_4A19B9  +
sub esp 0Ch +
push esi  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
mov eax offset loc_4A63E3 +
call sub_4A1B7D  +
mov esi edx +
mov [ebp-0F0h] esi +
mov eax ecx +
mov [ebp-100h] eax +
and dword ptr [ebp-0E4h] 0 +
and dword ptr [ebp-0E0h] 0 +
mov [ebp-0D8h] eax +
mov eax [ebx+8] +
mov [ebp-0C4h] eax +
xor al al +
push 24h  +
mov [ebp-0BDh] al +
call ds:malloc  +
mov [ebp-0C8h] eax +
pop ecx  +
test eax eax +
jnz loc_45494C  +
call ds:?_Xbad_alloc@std@@YAXXZ  +
mov [eax] eax +
mov [eax+4] eax +
mov [eax+8] eax +
mov word ptr [eax+0Ch] 101h +
mov [ebp-0E4h] eax +
xor eax eax +
mov [ebp-4] eax +
mov esi [esi] +
mov esi [esi] +
mov [ebp-0E8h] esi +
cmp [esi+0Dh] al +
jnz loc_454AE9  +
xor edi edi +
lea eax [esi+38h] +
push eax  +
mov [ebp-0DCh] eax +
lea ecx [ebp-0E4h] +
lea eax [ebp-114h] +
push eax  +
call sub_4558F6  +
mov eax [ebp-10Ch] +
mov [ebp-0CCh] eax +
cmp byte ptr [eax+0Dh] 0 +
jnz loc_4549D1  +
add eax 10h +
push 10h  +
push eax  +
lea eax [esi+38h] +
push eax  +
call j_memcmp  +
add esp 0Ch +
test eax eax +
sets al  +
test al al +
jnz loc_4549D1  +
mov eax [ebp-0C8h] +
mov ecx [ebp-0CCh] +
jmp loc_4549D9  +
mov eax [ebp-0C8h] +
mov ecx eax +
cmp ecx eax +
jz loc_4549E6  +
cmp [ecx+20h] edi +
jz loc_454ACC  +
mov eax [esi+124h] +
lea ecx [ebp-0E4h] +
mov esi [ebp-0DCh] +
mov [ebp-0ECh] eax +
lea eax [ebp-0FCh] +
push esi  +
push eax  +
call sub_4558F6  +
mov eax [ebp-0F4h] +
mov [ebp-0CCh] eax +
cmp byte ptr [eax+0Dh] 0 +
jnz loc_454A3D  +
add eax 10h +
push 10h  +
push eax  +
push esi  +
call j_memcmp  +
add esp 0Ch +
test eax eax +
sets al  +
test al al +
jnz loc_454A3D  +
mov eax [ebp-0CCh] +
jmp loc_454AB7  +
cmp dword ptr [ebp-0E0h] 71C71C7h +
jz loc_455400  +
lea eax [ebp-0E4h] +
mov [ebp-108h] eax +
mov byte ptr [ebp-4] 1 +
push 24h  +
mov [ebp-104h] edi +
call ds:malloc  +
mov edx eax +
pop ecx  +
test edx edx +
jz loc_454946  +
xor ecx ecx +
lea edi [edx+10h] +
mov [ebp-4] cl +
mov eax [ebp-0C8h] +
movs   +
push edx  +
push dword ptr [ebp-0F8h]  +
mov [ebp-104h] ecx +
push dword ptr [ebp-0FCh]  +
movs   +
movs   +
movs   +
mov [edx+20h] ecx +
mov [edx] eax +
mov [edx+4] eax +
mov [edx+8] eax +
mov [edx+0Ch] cx +
lea ecx [ebp-0E4h] +
call sub_41D818  +
xor edi edi +
mov ecx [ebp-0ECh] +
mov [eax+20h] ecx +
mov eax [ebp-0E4h] +
mov [ebp-0C8h] eax +
lea ecx [ebp-0E8h] +
call sub_406312  +
mov esi [ebp-0E8h] +
cmp byte ptr [esi+0Dh] 0 +
jz loc_45497A  +
xor eax eax +
mov [ebp-68h] eax +
mov [ebp-64h] eax +
mov [ebp-54h] eax +
mov [ebp-50h] eax +
mov [ebp-2Ch] eax +
mov [ebp-28h] eax +
push 1  +
push dword ptr [ebp-100h]  +
lea ecx [ebp-68h] +
mov byte ptr [ebp-4] 2 +
call sub_4541C2  +
xor edi edi +
push 4Ch  +
mov [ebp-0D4h] edi +
mov [ebp-0D0h] edi +
call ds:malloc  +
pop ecx  +
test eax eax +
jz loc_454946  +
mov [eax] eax +
mov [eax+4] eax +
mov [eax+8] eax +
mov word ptr [eax+0Ch] 101h +
mov [ebp-0D4h] eax +
lea ecx [ebp-68h] +
mov byte ptr [ebp-4] 3 +
call sub_4542E1  +
test al al +
jz loc_454F8E  +
mov esi [ebp-0C4h] +
lea ecx [ebp-68h] +
call sub_4543F6  +
test al al +
jz loc_454F95  +
mov byte ptr [ebp-4] 4 +
lea edi [ebp-90h] +
xor eax eax +
lea ecx [ebp-68h] +
stos   +
stos   +
stos   +
stos   +
xor eax eax +
mov [ebp-0E8h] eax +
mov [ebp-0C8h] eax +
mov [ebp-0CCh] eax +
mov [ebp-0ECh] eax +
mov [ebp-0DCh] eax +
lea eax [ebp-90h] +
push eax  +
call sub_45449A  +
lea eax [ebp-0E8h] +
push eax  +
lea ecx [ebp-68h] +
call sub_45452F  +
lea eax [ebp-0C8h] +
push eax  +
lea ecx [ebp-68h] +
call sub_4545DB  +
mov edi [ebp-0C8h] +
lea eax [ebp-90h] +
push eax  +
cmp edi esi +
lea eax [ebp-120h] +
push eax  +
cmova esi edi +
lea ecx [ebp-0E4h] +
mov [ebp-0C4h] esi +
call sub_4558F6  +
mov esi [ebp-118h] +
cmp byte ptr [esi+0Dh] 0 +
jnz loc_454C25  +
lea eax [esi+10h] +
push 10h  +
push eax  +
lea eax [ebp-90h] +
push eax  +
call j_memcmp  +
add esp 0Ch +
test eax eax +
sets al  +
test al al +
jnz loc_454C25  +
mov eax [ebp-0E4h] +
jmp loc_454C2D  +
mov eax [ebp-0E4h] +
mov esi eax +
cmp edi [ebx+8] +
ja loc_454C4D  +
xor edi edi +
cmp esi eax +
jz loc_454C3D  +
cmp [esi+20h] edi +
jnz loc_454C53  +
mov byte ptr [ebp-0BDh] 1 +
mov byte ptr [ebp-4] 3 +
jmp loc_454B56  +
xor edi edi +
cmp esi eax +
jnz loc_454C38  +
lea eax [ebp-104h] +
push eax  +
lea eax [ebp-0CCh] +
push eax  +
lea ecx [ebp-68h] +
call sub_45466E  +
lea eax [ebp-0DCh] +
push eax  +
lea eax [ebp-0ECh] +
push eax  +
lea ecx [ebp-68h] +
call sub_4547B0  +
mov esi [ebp-0DCh] +
add esi [ebp-0ECh] +
sub esi [ebp-0ECh] +
mov [ebp-0FCh] edi +
mov [ebp-0F8h] edi +
mov [ebp-0F4h] edi +
mov [ebp-0DCh] esi +
jz loc_454D20  +
cmp esi 7FFFFFFFh +
ja loc_455405  +
cmp esi 1000h +
jb loc_454CE7  +
lea eax [esi+23h] +
cmp eax esi +
jbe loc_45540A  +
push eax  +
call ds:malloc  +
pop ecx  +
mov ecx eax +
test ecx ecx +
jz loc_454946  +
lea eax [ecx+23h] +
and eax 0FFFFFFE0h +
mov [eax-4] ecx +
jmp loc_454CF7  +
push esi  +
call ds:malloc  +
pop ecx  +
test eax eax +
jz loc_454946  +
push dword ptr [ebp-0DCh]  +
add esi eax +
mov [ebp-0FCh] eax +
push dword ptr [ebp-0ECh]  +
mov [ebp-0F4h] esi +
push eax  +
call j_memmove  +
add esp 0Ch +
mov [ebp-0F8h] esi +
mov byte ptr [ebp-4] 5 +
lea ecx [ebp-80h] +
push dword ptr [ebp-0CCh]  +
xor eax eax +
mov [ebp-80h] edi +
mov [ebp-70h] edi +
mov dword ptr [ebp-6Ch] 7 +
mov [ebp-80h] ax +
call sub_4068D1  +
lea eax [ebp-0FCh] +
push eax  +
lea ecx [ebp-0BCh] +
call sub_429DFB  +
lea eax [ebp-80h] +
push eax  +
lea ecx [ebp-0B0h] +
call sub_406A8F  +
mov eax [ebp-0C8h] +
mov [ebp-98h] eax +
mov eax [ebp-0E8h] +
mov [ebp-94h] eax +
lea eax [ebp-90h] +
mov byte ptr [ebp-4] 7 +
push eax  +
lea eax [ebp-114h] +
push eax  +
lea ecx [ebp-0D4h] +
call sub_4558F6  +
mov esi [ebp-10Ch] +
cmp byte ptr [esi+0Dh] 0 +
jnz loc_454DC9  +
lea eax [esi+10h] +
push 10h  +
push eax  +
lea eax [ebp-90h] +
push eax  +
call j_memcmp  +
add esp 0Ch +
test eax eax +
sets al  +
test al al +
jz loc_454E6D  +
cmp dword ptr [ebp-0D0h] 35E50D7h +
jz loc_455400  +
mov eax [ebp-0D4h] +
mov [ebp-0CCh] eax +
lea eax [ebp-0D4h] +
mov [ebp-128h] eax +
mov byte ptr [ebp-4] 8 +
push 4Ch  +
mov [ebp-124h] edi +
call ds:malloc  +
mov edx eax +
pop ecx  +
test edx edx +
jz loc_454946  +
mov eax [ebp-0CCh] +
lea edi [edx+10h] +
lea esi [ebp-90h] +
xor ecx ecx +
movs   +
push edx  +
push dword ptr [ebp-110h]  +
mov [ebp-124h] ecx +
push dword ptr [ebp-114h]  +
movs   +
movs   +
movs   +
mov [edx+20h] ecx +
mov [edx+24h] ecx +
mov [edx+28h] ecx +
mov [edx+2Ch] ecx +
mov [edx+3Ch] ecx +
mov [edx+44h] ecx +
mov [edx+48h] ecx +
mov dword ptr [edx+40h] 7 +
mov [edx] eax +
mov [edx+4] eax +
mov [edx+8] eax +
mov [edx+0Ch] cx +
lea ecx [ebp-0D4h] +
call sub_41D818  +
mov esi eax +
xor edi edi +
mov eax [ebp-0E8h] +
lea ecx [esi+2Ch] +
mov [esi+48h] eax +
mov eax [ebp-0C8h] +
mov [esi+44h] eax +
lea eax [ebp-0B0h] +
push eax  +
call sub_406A58  +
lea eax [ebp-0BCh] +
push eax  +
lea ecx [esi+20h] +
call sub_4303E5  +
lea ecx [ebp-0B0h] +
call sub_406DE4  +
lea ecx [ebp-0BCh] +
call sub_426B87  +
mov byte ptr [ebp-4] 5 +
mov eax [ebp-6Ch] +
cmp eax 8 +
jb loc_454EEB  +
mov ecx [ebp-80h] +
lea eax ds:2[eax*2] +
mov edx ecx +
cmp eax 1000h +
jb loc_454EDF  +
mov ecx [ecx-4] +
sub edx ecx +
lea eax [edx-4] +
cmp eax 1Fh +
ja loc_454F2D  +
mov esi ds:free +
push ecx  +
call esi  +
pop ecx  +
jmp loc_454EF1  +
mov esi ds:free +
xor eax eax +
mov byte ptr [ebp-4] 4 +
mov ecx [ebp-0FCh] +
mov [ebp-70h] edi +
mov dword ptr [ebp-6Ch] 7 +
mov [ebp-80h] ax +
test ecx ecx +
jz loc_454F49  +
mov eax [ebp-0F4h] +
mov edx ecx +
sub eax ecx +
cmp eax 1000h +
jb loc_454F33  +
mov ecx [ecx-4] +
sub edx ecx +
lea eax [edx-4] +
cmp eax 1Fh +
jbe loc_454F33  +
call ds:_invalid_parameter_noinfo_noreturn  +
push ecx  +
call esi  +
pop ecx  +
mov [ebp-0FCh] edi +
mov [ebp-0F8h] edi +
mov [ebp-0F4h] edi +
mov dword ptr [ebp-4] 3 +
jmp loc_454B56  +
mov ebx [ebp-14h] +
mov byte ptr [ebp-0BDh] 1 +
mov eax offset loc_454F65 +
retn   +
mov ebx [ebp-14h] +
mov al [ebp-0BDh] +
xor edi edi +
mov dword ptr [ebp-4] 3 +
mov [ebp-0BDh] al +
mov eax [ebp-0D8h] +
mov [ebp-100h] eax +
jmp loc_454B56  +
mov byte ptr [ebp-0BDh] 1 +
mov esi [ebp-0F0h] +
mov ecx [ebp-0D0h] +
mov [ebp-0C8h] ecx +
mov esi [esi] +
mov esi [esi] +
mov [ebp-0CCh] esi +
cmp byte ptr [esi+0Dh] 0 +
jnz loc_45504E  +
lea eax [esi+38h] +
push eax  +
lea eax [ebp-120h] +
push eax  +
lea ecx [ebp-0D4h] +
call sub_4558F6  +
mov eax [ebp-118h] +
mov [ebp-0D8h] eax +
cmp byte ptr [eax+0Dh] 0 +
jnz loc_45500C  +
add eax 10h +
push 10h  +
push eax  +
lea eax [esi+38h] +
push eax  +
call j_memcmp  +
add esp 0Ch +
test eax eax +
sets al  +
test al al +
jnz loc_45500C  +
mov eax [ebp-0D4h] +
mov ecx [ebp-0D8h] +
jmp loc_455014  +
mov eax [ebp-0D4h] +
mov ecx eax +
cmp ecx eax +
jnz loc_45502D  +
cmp [esi+124h] edi +
jnz loc_45502D  +
inc dword ptr [ebp-0C8h]  +
mov byte ptr [ebp-0BDh] 1 +
lea ecx [ebp-0CCh] +
call sub_406312  +
mov esi [ebp-0CCh] +
cmp byte ptr [esi+0Dh] 0 +
jz loc_454FBB  +
mov ecx [ebp-0C8h] +
cmp byte ptr [ebp-0BDh] 0 +
jnz loc_455101  +
test ecx ecx +
jz loc_455101  +
mov eax [ebp-0D4h] +
push dword ptr [eax+4]  +
lea eax [ebp-0D4h] +
push eax  +
mov ecx eax +
call sub_45594C  +
push dword ptr [ebp-0D4h]  +
call ds:free  +
mov eax [ebp-68h] +
mov esi edi +
mov [ebp-0D8h] eax +
mov [ebp-68h] esi +
pop ecx  +
test eax eax +
jz loc_4550AF  +
mov ecx eax +
call sub_45D940  +
push dword ptr [ebp-0D8h]  +
call Mso20Win32Client_3788  +
mov esi [ebp-68h] +
cmp dword ptr [ebp-2Ch] 0 +
jz loc_4550C4  +
push dword ptr [ebp-2Ch]  +
call Mso20Win32Client_3788  +
mov esi [ebp-68h] +
mov [ebp-2Ch] edi +
cmp dword ptr [ebp-28h] 0 +
jz loc_4550D9  +
push dword ptr [ebp-28h]  +
call Mso20Win32Client_3788  +
mov esi [ebp-68h] +
mov [ebp-28h] edi +
test esi esi +
jz loc_4550EB  +
mov ecx esi +
call sub_45D940  +
push esi  +
call Mso20Win32Client_3788  +
lea ecx [ebp-0E4h] +
call sub_44A941  +
mov eax [ebp-0C4h] +
jmp loc_4553F5  +
mov edx [ebp-0C4h] +
test ecx ecx +
mov byte ptr [ebp-4] 0Ah +
mov esi [ebp-68h] +
mov [ebp-68h] edi +
lea eax [edx+1] +
cmovz eax edx +
mov [ebp-0CCh] eax +
mov [ebp-0DCh] eax +
test esi esi +
jz loc_45513B  +
mov ecx esi +
call sub_45D940  +
push esi  +
mov esi Mso20Win32Client_3788 +
call esi  +
jmp loc_455141  +
mov esi Mso20Win32Client_3788 +
cmp dword ptr [ebp-2Ch] 0 +
jz loc_45514F  +
push dword ptr [ebp-2Ch]  +
call esi  +
mov [ebp-2Ch] edi +
cmp dword ptr [ebp-28h] 0 +
jz loc_45515D  +
push dword ptr [ebp-28h]  +
call esi  +
mov [ebp-28h] edi +
push edi  +
push dword ptr [ebp-100h]  +
lea ecx [ebp-68h] +
call sub_4541C2  +
mov ecx [ebp-68h] +
push edi  +
push edi  +
call sub_45D9C7  +
mov dword ptr [ebp-4] 3 +
lea ecx [ebp-68h] +
push dword ptr [ebp-0C8h]  +
call sub_455469  +
mov esi [ebp-0D4h] +
mov ecx eax +
mov [ebp-0C4h] ecx +
mov esi [esi] +
jmp loc_455201  +
lea edx [esi+10h] +
test ecx ecx +
jz loc_455207  +
lea eax [edx+10h] +
push eax  +
lea eax [edx+1Ch] +
push eax  +
push dword ptr [edx+34h]  +
lea ecx [ebp-68h] +
push dword ptr [edx+38h]  +
push edx  +
call sub_455709  +
mov ecx [ebp-0C4h] +
and ecx eax +
mov eax [esi+8] +
mov [ebp-0C4h] ecx +
cmp byte ptr [eax+0Dh] 0 +
jz loc_4551EB  +
mov eax [esi+4] +
jmp loc_4551E1  +
cmp esi [eax+8] +
jnz loc_4551E7  +
mov esi eax +
mov eax [eax+4] +
cmp byte ptr [eax+0Dh] 0 +
jz loc_4551D7  +
mov esi eax +
jmp loc_455201  +
mov esi eax +
mov edx [esi] +
cmp byte ptr [edx+0Dh] 0 +
jnz loc_455201  +
mov eax [edx] +
mov esi edx +
mov edx eax +
cmp byte ptr [eax+0Dh] 0 +
jz loc_4551F5  +
cmp byte ptr [esi+0Dh] 0 +
jz loc_45519D  +
mov eax [ebp-0F0h] +
mov esi [eax] +
mov esi [esi] +
mov [ebp-0F0h] esi +
cmp byte ptr [esi+0Dh] 0 +
jnz loc_4552D1  +
jmp loc_455229  +
mov ecx [ebp-0C4h] +
test ecx ecx +
jz loc_4552D1  +
lea eax [esi+38h] +
push eax  +
lea eax [ebp-120h] +
push eax  +
lea ecx [ebp-0D4h] +
call sub_4558F6  +
mov eax [ebp-118h] +
mov [ebp-0D8h] eax +
cmp byte ptr [eax+0Dh] 0 +
jnz loc_45527D  +
add eax 10h +
push 10h  +
push eax  +
lea eax [esi+38h] +
push eax  +
call j_memcmp  +
add esp 0Ch +
test eax eax +
js loc_45527D  +
mov eax [ebp-0D4h] +
mov ecx [ebp-0D8h] +
jmp loc_455285  +
mov eax [ebp-0D4h] +
mov ecx eax +
cmp ecx eax +
jnz loc_4552B6  +
cmp [esi+124h] edi +
jnz loc_4552B6  +
mov eax [ebp-0CCh] +
lea ecx [ebp-68h] +
mov [esi+124h] eax +
lea eax [esi+128h] +
push eax  +
add esi 20h +
push esi  +
call sub_4554F6  +
and [ebp-0C4h] eax +
lea ecx [ebp-0F0h] +
call sub_406312  +
mov esi [ebp-0F0h] +
cmp byte ptr [esi+0Dh] 0 +
jz loc_455223  +
mov eax [ebp-68h] +
mov eax [eax] +
push dword ptr [eax]  +
call ds:SetEndOfFile  +
cmp dword ptr [ebp-0C4h] 0 +
jz loc_45540F  +
mov eax [ebp-0D4h] +
push dword ptr [eax+4]  +
lea eax [ebp-0D4h] +
push eax  +
mov ecx eax +
call sub_45594C  +
push dword ptr [ebp-0D4h]  +
call ds:free  +
pop ecx  +
lea ecx [ebp-68h] +
call sub_4541B2  +
lea ecx [ebp-0E4h] +
call sub_44A941  +
mov eax [ebp-0CCh] +
jmp loc_4553F5  +
mov ebx [ebp-14h] +
lea eax [ebp-0D8h] +
mov dword ptr [ebp-0D8h] offset aTokenfileupd_0 +
push eax  +
push ecx  +
push 0Fh  +
mov edx 618h +
mov ecx 13C1056h +
call sub_4072B5  +
mov eax offset loc_455359 +
retn   +
mov ebx [ebp-14h] +
mov eax [ebp-0D4h] +
push dword ptr [eax+4]  +
lea eax [ebp-0D4h] +
push eax  +
mov ecx eax +
call sub_45594C  +
push dword ptr [ebp-0D4h]  +
call ds:free  +
mov eax [ebp-68h] +
xor edi edi +
mov [ebp-0D8h] eax +
mov esi edi +
mov [ebp-68h] esi +
pop ecx  +
test eax eax +
jz loc_4553AA  +
mov ecx eax +
call sub_45D940  +
push dword ptr [ebp-0D8h]  +
call Mso20Win32Client_3788  +
mov esi [ebp-68h] +
cmp [ebp-2Ch] edi +
jz loc_4553BE  +
push dword ptr [ebp-2Ch]  +
call Mso20Win32Client_3788  +
mov esi [ebp-68h] +
mov [ebp-2Ch] edi +
cmp [ebp-28h] edi +
jz loc_4553D2  +
push dword ptr [ebp-28h]  +
call Mso20Win32Client_3788  +
mov esi [ebp-68h] +
mov [ebp-28h] edi +
test esi esi +
jz loc_4553E4  +
mov ecx esi +
call sub_45D940  +
push esi  +
call Mso20Win32Client_3788  +
lea ecx [ebp-0E4h] +
call sub_44A941  +
mov eax [ebp-0DCh] +
mov ecx [ebp-1Ch] +
call sub_4A1A91  +
retn 4  +
call sub_41DA95  +
call sub_410F67  +
call sub_4019FF  +
push ecx  +
mov edx offset aTokenfileupdat +
lea ecx [ebp-104h] +
call sub_402203  +
push eax  +
push ecx  +
push 0Fh  +
mov edx 618h +
mov ecx 13C1057h +
call sub_4072B5  +
lea ecx [ebp-134h] +
call sub_4112CC  +
push offset unk_503E54  +
mov eax ecx +
push eax  +
call j__CxxThrowException  +
int 3  +
jmp sub_44A941  +
***
jmp loc_4558A4  +
***
push ecx  +
sub esp 34h +
push ecx  +
sub esp 0Ch +
mov eax [ebp+arg_0] +
test esi esi +
mov eax [ecx] +
push ebx  +
lea ecx [esi+0Ch] +
sub esp 10h +
sub esp 18h +
sub esp 10h +
sub esp 10h +
call sub_4A19EC  +
sub esp 40h +
lea ecx [esi+48h] +
lea ecx [esi+28h] +
call sub_4A19EC  +
call sub_4A19EC  +
sub esp 28h +
sub esp 38h +
call sub_4A19B9  +
mov eax offset loc_4A6507 +
sub esp 88h +
sub esp 14h +
sub esp 14h +
sub esp 14h +
sub esp 14h +
sub esp 38h +
sub esp 0Ch +
push ebx  +
mov ebx ecx +
push esi  +
push edi  +
mov edi ebx +
mov edx [ebx+18h] +
lea esi [edx+10h] +
movs   +
movs   +
movs   +
movs   +
mov eax [edx+30h] +
lea edi [edx+20h] +
xor edx edx +
mov [ebx+10h] eax +
mov esi offset unk_4AC73C +
mov ecx edx +
mov eax [edi+ecx*4] +
cmp eax [esi+ecx*4] +
jnz loc_456D44  +
inc ecx  +
cmp ecx 4 +
jnz loc_456D34  +
jmp loc_456D6B  +
mov esi [ebx+1Ch] +
lea eax [ebp+var_C] +
push edi  +
push eax  +
mov ecx esi +
call sub_4558F6  +
push edi  +
push [ebp+var_4]  +
call sub_458CAA  +
mov ecx [esi] +
test al al +
cmovnz ecx [ebp+var_4] +
cmp ecx [esi] +
jz loc_456D75  +
lea edx [ecx+20h] +
pop edi  +
pop esi  +
mov [ebx+14h] edx +
mov eax ebx +
pop ebx  +
leave   +
retn   +
push offset aMapDataInconsi  +
lea ecx [ebp+var_C] +
call sub_40C45A  +
push offset unk_503BCC  +
lea eax [ebp+var_C] +
push eax  +
call j__CxxThrowException  +
int 3  +
push 8  +
mov eax offset loc_4A6537 +
call sub_4A19B9  +
xor edi edi +
mov ebx offset dword_50BE20 +
push 34h  +
mov [ebp+var_10] ebx +
mov dword_50BE20 edi +
mov dword_50BE24 edi +
call ds:malloc  +
pop ecx  +
test eax eax +
jnz loc_456DC6  +
call ds:?_Xbad_alloc@std@@YAXXZ  +
mov [eax] eax +
mov [eax+4] eax +
mov [eax+8] eax +
mov word ptr [eax+0Ch] 101h +
mov dword_50BE20 eax +
mov [ebp+var_4] edi +
push 148h  +
mov dword_50BE28 edi +
mov dword_50BE2C edi +
call ds:malloc  +
pop ecx  +
test eax eax +
jz loc_456DC0  +
mov [eax] eax +
mov [eax+4] eax +
mov [eax+8] eax +
mov word ptr [eax+0Ch] 101h +
mov dword_50BE28 eax +
mov eax ebx +
mov dword_50BE30 edi +
mov dword_50BE34 edi +
call sub_4A198D  +
retn   +
***
jmp sub_4391CE  +
***
push ecx  +
call sub_4A1A58  +
call sub_4A1A58  +
lea ecx [esi+108h] +
call sub_4A19EC  +
sub esp 40h +
sub esp 58h +
and esp 0FFFFFFF8h +
call sub_4A19EC  +
and esp 0FFFFFFF8h +
sub esp 5Ch +
mov eax dword_508660 +
xor eax esp +
mov [esp+5Ch+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
mov esi eax +
mov [esp+68h+var_3C] offset off_4AEFDC +
mov ebx ecx +
mov [esp+68h+var_38] offset aAcid_0 +
push 4  +
pop ecx  +
mov [esp+68h+var_50] eax +
lea edi [esp+68h+var_34] +
mov eax [ebx+10h] +
movs   +
mov [esp+68h+var_44] eax +
lea eax [esp+68h+var_3C] +
push eax  +
lea eax [esp+6Ch+var_4C] +
mov [esp+6Ch+var_40] cx +
movs   +
push eax  +
lea eax [esp+70h+var_58] +
mov [esp+70h+var_4C] offset off_4AEFEC +
push eax  +
movs   +
push ecx  +
push ecx  +
mov [esp+7Ch+var_48] offset aCurrentstate +
movs   +
mov [esp+7Ch+var_24] cx +
mov ecx 11A0141h +
mov [esp+7Ch+var_58] offset aDatasourceVali +
call sub_458736  +
cmp dword ptr [ebx+10h] 2 +
jnb loc_457F6A  +
mov ecx ebx +
call sub_457122  +
push [esp+68h+var_50]  +
lea eax [esp+6Ch+var_58] +
mov ecx ebx +
push eax  +
call sub_458503  +
mov edi [ebx] +
mov edx 618h +
push 4  +
mov [esp+6Ch+var_3C] offset off_4AEFB4 +
mov esi [eax] +
cmp esi edi +
pop eax  +
mov word ptr [esp+68h+var_34+2] ax +
setnz byte ptr [esp+68h+var_34]  +
lea eax [esp+68h+var_3C] +
mov [esp+68h+var_38] offset aHasacid +
push eax  +
lea eax [esp+6Ch+var_58] +
mov [esp+6Ch+var_58] offset aDatasourceVali +
push eax  +
push ecx  +
push 32h  +
mov ecx 11A0142h +
call sub_40BDEA  +
cmp esi edi +
jz loc_45816C  +
push [esp+68h+var_50]  +
lea eax [esp+6Ch+var_58] +
mov ecx ebx +
push eax  +
call sub_458AA6  +
lea edi [esp+68h+var_4C] +
mov esi [eax] +
lea eax [esp+68h+var_4C] +
add esi 20h +
push eax  +
lea eax [esp+6Ch+var_3C] +
push eax  +
movs   +
movs   +
movs   +
movs   +
lea edi [ebx+8] +
mov ecx edi +
call sub_4558F6  +
mov esi [esp+68h+var_34] +
cmp byte ptr [esi+0Dh] 0 +
jnz loc_458020  +
push 10h  +
lea eax [esi+10h] +
push eax  +
lea eax [esp+70h+var_4C] +
push eax  +
call j_memcmp  +
add esp 0Ch +
test eax eax +
js loc_458020  +
mov eax [ebx+8] +
jmp loc_458024  +
mov esi [edi] +
mov eax esi +
cmp esi eax +
jz loc_45814D  +
lea eax [esp+68h+var_4C] +
mov ecx edi +
push eax  +
call sub_458491  +
mov esi eax +
mov ecx edi +
lea eax [esp+68h+var_4C] +
push eax  +
call sub_458491  +
add eax 108h +
mov ecx esi +
push eax  +
call sub_453C58  +
cmp eax 1 +
jnz loc_4580B3  +
mov [esp+68h+var_3C] offset off_4AEFDC +
lea esi [esp+68h+var_4C] +
mov [esp+68h+var_38] offset aTokenid +
lea edi [esp+68h+var_34] +
movs   +
mov eax 100h +
mov edx 618h +
mov [esp+68h+var_58] offset aDatasourceVali +
movs   +
movs   +
movs   +
mov [esp+68h+var_24] ax +
lea eax [esp+68h+var_3C] +
push eax  +
lea eax [esp+6Ch+var_58] +
push eax  +
push ecx  +
push 0Fh  +
mov ecx 11A0143h +
call sub_40BDEA  +
lea eax [esp+68h+var_4C] +
mov ecx ebx +
push eax  +
call sub_45787A  +
jmp loc_45816C  +
lea eax [esp+68h+var_4C] +
mov ecx edi +
push eax  +
call sub_458491  +
mov ecx edi +
mov esi [eax+100h] +
lea eax [esp+68h+var_4C] +
push eax  +
call sub_458491  +
add eax 18h +
mov ecx ebx +
push eax  +
lea eax [esp+6Ch+var_58] +
push eax  +
call sub_458AA6  +
mov [esp+68h+var_34] esi +
lea edi [esp+68h+var_18] +
mov [esp+68h+var_20] offset off_4AEFDC +
mov [esp+68h+var_1C] offset aTokenid +
mov eax [eax] +
push 4  +
mov [esp+6Ch+var_3C] offset off_4AEFEC +
mov [esp+6Ch+var_38] offset aTokenstate +
mov [eax+30h] esi +
lea esi [esp+6Ch+var_4C] +
movs   +
pop eax  +
mov [esp+68h+var_30] ax +
mov eax 100h +
mov [esp+68h+var_58] offset aDatasourceVali +
movs   +
movs   +
movs   +
mov [esp+68h+var_8] ax +
lea eax [esp+68h+var_3C] +
push eax  +
lea eax [esp+6Ch+var_20] +
push eax  +
lea eax [esp+70h+var_58] +
push eax  +
push ecx  +
push ecx  +
mov ecx 11A0144h +
call sub_458736  +
jmp loc_45816C  +
lea eax [esp+68h+var_58] +
mov [esp+68h+var_58] offset aDatasourceVa_0 +
push eax  +
push ecx  +
push 0Fh  +
mov edx 618h +
mov ecx 11A0145h +
call sub_4072B5  +
mov ecx [esp+68h+var_4] +
pop edi  +
pop esi  +
pop ebx  +
xor ecx esp +
call sub_49FFB8  +
mov esp ebp +
pop ebp  +
retn 4  +
***
call sub_4A1A58  +
mov ecx [ebp-60h] +
push 0FFFFFFFFh  +
sub esp 18h +
sub esp 0Ch +
sub esp 10h +
mov eax [esi] +
sub esp 10h +
push esi  +
call sub_4A1A22  +
mov ecx [ebp-18h] +
sub esp 14h +
sub esp 0Ch +
push ecx  +
push ecx  +
sub esp 18h +
sub esp 10h +
push ebx  +
sub esp 14h +
push ecx  +
push esi  +
mov eax [esi+4] +
mov eax [ebp+arg_0] +
call sub_4A19B9  +
call sub_4A19B9  +
push ecx  +
sub esp 38h +
call sub_4A19EC  +
sub esp 1Ch +
sub esp 44h +
call sub_4A19EC  +
sub esp 48h +
pop ecx  +
sub esp 1Ch +
sub esp 24h +
mov eax [ecx] +
push ecx  +
call sub_4A19B9  +
sub esp 24h +
sub esp 30h +
push esi  +
sub esp 14h +
sub esp 0A4h +
sub esp 64h +
call sub_4A19B9  +
push edi  +
sub esp 18h +
call sub_4A1A58  +
mov eax 80004005h +
call sub_4A1A58  +
and esp 0FFFFFFF8h +
call sub_4A1A58  +
retn 0Ch  +
***
push 4  +
pop ecx  +
mov eax offset off_4AEFA4 +
mov [ebp-1Ch] cx +
mov [ebp-28h] eax +
mov [ebp-7Ch] eax +
lea eax [ebp-28h] +
push eax  +
lea eax [ebp-7Ch] +
mov [ebp-70h] cx +
push eax  +
lea eax [ebp-8Ch] +
mov [ebp-80h] cx +
push eax  +
lea eax [ebp-90h] +
mov dword ptr [ebp-24h] offset aInformation +
push eax  +
push ecx  +
push 0Fh  +
mov ecx 11A01CAh +
mov dword ptr [ebp-20h] offset aCanTFetchAgg_0 +
mov dword ptr [ebp-78h] offset aPolicyname +
mov [ebp-74h] esi +
mov dword ptr [ebp-8Ch] offset off_4CFC14 +
mov dword ptr [ebp-88h] offset aHslp +
mov [ebp-84h] edi +
mov dword ptr [ebp-90h] offset aSlgetapplicati +
call sub_45D4AA  +
mov eax 0C004F073h +
jmp loc_45B9F1  +
***
mov eax offset off_4AEFA4 +
sub esp 14h +
call sub_4A1A58  +
call sub_4A1A58  +
push edi  +
mov eax 80004001h +
call sub_4A1A58  +
call sub_4A1A58  +
and esp 0FFFFFFF8h +
mov eax 80004001h +
mov eax 80004001h +
sub esp 38h +
mov eax 80004001h +
retn 8  +
***
push 110h  +
mov eax offset loc_4A695F +
call sub_4A19EC  +
mov ebx [ebp+0Ch] +
lea edi [ebp-3Ch] +
mov ecx [ebp+10h] +
test ebx ebx +
mov eax [ebp+8] +
mov esi offset unk_4AC73C +
cmovnz esi ebx +
mov dword ptr [ebp-44h] offset off_4AEFDC +
mov dword ptr [ebp-40h] offset aAcid_0 +
push 4  +
mov [ebp-0ECh] ecx +
movs   +
pop ecx  +
push 2  +
push 32h  +
movs   +
mov [ebp-0E0h] eax +
mov dword ptr [ebp-0F4h] offset off_4AEFEC +
mov dword ptr [ebp-0F0h] offset aAppspecificdat +
movs   +
mov [ebp-0E8h] cx +
mov dword ptr [ebp-11Ch] offset off_4CFC14 +
mov dword ptr [ebp-118h] offset aHslc +
movs   +
mov esi 618h +
mov [ebp-2Ch] cx +
push esi  +
mov edi 11A0215h +
mov [ebp-114h] eax +
push edi  +
mov [ebp-110h] cx +
call Mso20Win32Client_3968  +
test al al +
jz loc_45D04B  +
lea eax [ebp-11Ch] +
mov dword ptr [ebp-10Ch] offset off_4AE4C4 +
mov [ebp-100h] eax +
lea eax [ebp-44h] +
mov [ebp-0FCh] eax +
lea eax [ebp-0F4h] +
mov [ebp-0F8h] eax +
lea eax [ebp-100h] +
mov [ebp-108h] eax +
lea eax [ebp-0F4h] +
mov [ebp-104h] eax +
lea eax [ebp-10Ch] +
push eax  +
push offset aSlactivatepr_0  +
push 2  +
push 32h  +
push esi  +
push edi  +
call Mso20Win32Client_3951  +
test ebx ebx +
jz loc_45D27A  +
cmp dword ptr [ebp+10h] 0 +
jnz loc_45D27A  +
cmp dword ptr [ebp+14h] 0 +
jnz loc_45D27A  +
cmp dword ptr [ebp+18h] 0 +
jnz loc_45D27A  +
cmp dword ptr [ebp+1Ch] 0 +
jnz loc_45D27A  +
cmp word ptr [ebp+20h] 0 +
jnz loc_45D27A  +
mov ecx [ebp-0E0h] +
xor edx edx +
push offset dword_50BE14  +
push 1  +
call sub_459F37  +
test al al +
jnz loc_45D0BA  +
lea eax [ebp-0DCh] +
mov dword ptr [ebp-0DCh] offset aSlactivatepr_1 +
push eax  +
push ecx  +
mov ecx 11A0217h +
jmp loc_45D291  +
mov ecx ebx +
call sub_45A17E  +
test al al +
jnz loc_45D0EF  +
lea eax [ebp-0DCh] +
mov dword ptr [ebp-0DCh] offset aSlactivatepr_2 +
push eax  +
push ecx  +
push 0Fh  +
mov edx esi +
mov ecx 11A0218h +
call sub_4072B5  +
mov eax 0C004F015h +
jmp loc_45D29F  +
mov esi offset dword_50BE20 +
push ebx  +
mov ecx esi +
call sub_457EDC  +
push ebx  +
mov ecx esi +
call sub_4579A2  +
mov edi eax +
test edi edi +
jnz loc_45D137  +
lea eax [ebp-0DCh] +
mov dword ptr [ebp-0DCh] offset aSlactivatepr_3 +
push eax  +
push ecx  +
push 0Fh  +
mov edx 618h +
mov ecx 11A0219h +
call sub_4072B5  +
mov eax 0C004F014h +
jmp loc_45D29F  +
push edi  +
lea ecx [ebp-0D8h] +
call sub_455E39  +
xor ebx ebx +
xor eax eax +
mov [ebp-4] ebx +
mov [ebp-28h] ebx +
mov [ebp-18h] ebx +
mov dword ptr [ebp-14h] 7 +
mov [ebp-28h] ax +
mov [ebp-0E4h] ebx +
lea eax [ebp-0DCh] +
mov byte ptr [ebp-4] 2 +
push eax  +
lea eax [ebp-0E4h] +
mov [ebp-0DCh] ebx +
push eax  +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-0D8h] +
call sub_456918  +
mov esi [ebp-0E4h] +
sub eax ebx +
jz loc_45D1E2  +
sub eax 1 +
jz loc_45D1DB  +
sub eax 1 +
jz loc_45D1BB  +
sub eax 1 +
jz loc_45D1BB  +
sub eax 1 +
jz loc_45D1D3  +
sub eax 1 +
jz loc_45D1BB  +
sub eax 1 +
jz loc_45D1C2  +
push 11A021Ah  +
call Mso20Win32Client_1360  +
mov edi 80004005h +
jmp loc_45D21A  +
lea eax [edi+8] +
push eax  +
push dword ptr [ebp-0E0h]  +
call sub_45C4DE  +
jmp loc_45D218  +
mov edi [ebp-0C4h] +
jmp loc_45D21A  +
mov edi 800704DCh +
jmp loc_45D21A  +
xor eax eax +
lea edi [ebp-0F4h] +
cmp dword ptr [ebp-14h] 8 +
lea ecx [ebp-0F4h] +
stos   +
push ecx  +
push esi  +
push dword ptr [ebp-0DCh]  +
stos   +
stos   +
stos   +
lea eax [ebp-28h] +
cmovnb eax [ebp-28h] +
push eax  +
push offset aMsftRmAlgorith  +
push dword ptr [ebp-0E0h]  +
call sub_45BFC8  +
mov edi eax +
test esi esi +
jz loc_45D225  +
push esi  +
call Mso20Win32Client_3788  +
mov eax [ebp-14h] +
cmp eax 8 +
jb loc_45D25B  +
mov ecx [ebp-28h] +
lea eax ds:2[eax*2] +
mov edx ecx +
cmp eax 1000h +
jb loc_45D253  +
mov ecx [ecx-4] +
sub edx ecx +
lea eax [edx-4] +
cmp eax 1Fh +
jbe loc_45D253  +
call ds:_invalid_parameter_noinfo_noreturn  +
push ecx  +
call ds:free  +
pop ecx  +
xor eax eax +
mov [ebp-18h] ebx +
lea ecx [ebp-0D8h] +
mov dword ptr [ebp-14h] 7 +
mov [ebp-28h] ax +
call sub_455F37  +
mov eax edi +
jmp loc_45D29F  +
lea eax [ebp-0DCh] +
mov dword ptr [ebp-0DCh] offset aSlactivatepr_4 +
push eax  +
push ecx  +
mov ecx 11A0216h +
push 0Fh  +
mov edx esi +
call sub_4072B5  +
mov eax 80070057h +
call sub_4A19A1  +
retn 1Ch  +
***
mov eax 80004001h +
retn 20h  +
***
mov eax 80004001h +
retn 24h  +
***
sub esp 1Ch +
call sub_4A19B9  +
sub esp 0Ch +
push ecx  +
sub esp 1Ch +
sub esp 18h +
sub esp 18h +
sub esp 18h +
push esi  +
test esi esi +
mov eax [esi+4] +
call sub_4A19B9  +
push ebx  +
call sub_4A1A22  +
call sub_401D0C  +
push ecx  +
sub esp 10h +
push esi  +
push dword ptr [esi+4]  +
call sub_4A19B9  +
mov ecx [ecx+0Ch] +
sub esp 14h +
mov eax [ecx] +
mov eax [ecx] +
mov eax [ecx] +
test esi esi +
call sub_4A19EC  +
call sub_4A19EC  +
mov eax [ebp+arg_0] +
cmp dword_5099F0 0 +
sub esp 128h +
pop ebp  +
sub esp 20h +
sub esp 234h +
test ecx ecx +
and esp 0FFFFFFF8h +
sub esp 18h +
cmp dword ptr [ecx+8Ch] 0 +
push edi  +
push 0FFFFFFFFh  +
sub esp 14h +
and esp 0FFFFFFF8h +
sub esp 20Ch +
sub esp 210h +
push 1  +
and [ebp+arg_8] 1 +
push ebx  +
push ecx  +
push 0FFFFFFFFh  +
mov eax [ebp+arg_0] +
mov edx [esi] +
push esi  +
call sub_4A19B9  +
call sub_4A19B9  +
push esi  +
call sub_4A19EC  +
mov esi ecx +
push ebx  +
mov dword ptr [esi] offset off_4D1CC4 +
push ebx  +
cmp byte ptr [ecx+325h] 0 +
xor edx edx +
push 0FFFFFFFFh  +
mov eax [ecx+3A0h] +
mov eax [ecx+350h] +
mov eax [ecx+334h] +
mov al [ebp+arg_0] +
mov al [ecx+324h] +
mov al [ecx+32Bh] +
mov al [ebp+arg_0] +
mov al [ebp+arg_0] +
mov al [ecx+325h] +
mov al [ecx+326h] +
push 0FFFFFFFFh  +
mov al [ecx+330h] +
push 0FFFFFFFFh  +
mov al [ecx+32Ah] +
mov al [ecx+331h] +
mov al [ecx+332h] +
mov al [ebp+arg_0] +
mov eax [ecx+354h] +
mov eax [ebp+arg_0] +
mov eax [ecx+338h] +
mov eax [ebp+arg_0] +
push 0FFFFFFFFh  +
mov eax [ebp+arg_0] +
mov eax [ecx+340h] +
mov eax [ebp+arg_0] +
mov eax [ecx+344h] +
mov eax [ecx+34Ch] +
lea eax [ecx+384h] +
mov eax [ecx+358h] +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
sub esp 44h +
push ebx  +
push ebx  +
push ecx  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
mov esi ecx +
push ecx  +
push 0FFFFFFFFh  +
cmp [ebp+arg_C] 0 +
lea edx [ecx+3C8h] +
push 0FFFFFFFFh  +
xor eax eax +
push 0FFFFFFFFh  +
push offset loc_4A3334  +
mov eax large fs:0 +
push eax  +
push ebx  +
push esi  +
push edi  +
mov eax dword_508660 +
xor eax ebp +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov esi ecx +
xor edi edi +
cmp byte ptr [esi+325h] 0 +
jnz loc_460F5C  +
mov ecx edi +
cmp [esi+340h] edi +
jle loc_460F1E  +
mov edx edi +
mov eax [esi+36Ch] +
lea edx [edx+3D0h] +
inc ecx  +
mov [edx+eax-78h] edi +
cmp ecx [esi+340h] +
jl loc_460F05  +
mov ecx [esi+370h] +
mov [esi+36Ch] edi +
mov [esi+370h] edi +
test ecx ecx +
jz loc_460F39  +
call sub_401A51  +
mov ecx [esi+370h] +
mov [esi+36Ch] edi +
mov [esi+370h] edi +
test ecx ecx +
jz loc_460F54  +
call sub_401A51  +
mov [esi+340h] edi +
jmp loc_460F67  +
lea ecx [esi+354h] +
call sub_465A6C  +
mov eax [esi+34Ch] +
test eax eax +
jz loc_460FE0  +
mov ebx edi +
cmp [esi+344h] edi +
jle loc_460FAA  +
mov eax [esi+34Ch] +
push dword ptr [edi+eax+34h]  +
call ds:CoTaskMemFree  +
mov eax [esi+34Ch] +
lea edi [edi+48h] +
and dword ptr [edi+eax-14h] 0 +
inc ebx  +
cmp ebx [esi+344h] +
jl loc_460F7B  +
mov eax [esi+34Ch] +
xor edi edi +
mov [esi+344h] edi +
test eax eax +
jz loc_460FDA  +
mov [ebp+var_4] edi +
lea edi [eax-4] +
push offset off_461081  +
push dword ptr [edi]  +
push 48h  +
push eax  +
call sub_4A03BE  +
test edi edi +
jz loc_460FD4  +
push edi  +
call Mso20Win32Client_3788  +
or [ebp+var_4] 0FFFFFFFFh +
xor edi edi +
mov [esi+34Ch] edi +
cmp [esi+374h] edi +
jz loc_46101E  +
mov ecx [esi+378h] +
mov [esi+374h] edi +
mov [esi+378h] edi +
test ecx ecx +
jz loc_461003  +
call sub_401A51  +
mov ecx [esi+378h] +
mov [esi+374h] edi +
mov [esi+378h] edi +
test ecx ecx +
jz loc_46101E  +
call sub_401A51  +
cmp [esi+37Ch] edi +
jz loc_461062  +
mov ecx [esi+380h] +
mov [esi+37Ch] edi +
mov [esi+380h] edi +
test ecx ecx +
jz loc_461041  +
call sub_401A51  +
mov ecx [esi+380h] +
mov [esi+338h] edi +
mov [esi+37Ch] edi +
mov [esi+380h] edi +
test ecx ecx +
jz loc_461062  +
call sub_401A51  +
mov ecx [esi+4] +
test ecx ecx +
jz loc_461071  +
mov eax [ecx] +
call dword ptr [eax+0FCh]  +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
sub esp 244h +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push ecx  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push offset loc_4A2FED  +
mov eax large fs:0 +
push eax  +
sub esp 9Ch +
mov eax dword_508660 +
xor eax ebp +
mov [ebp+var_10] eax +
push ebx  +
push esi  +
push edi  +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov ebx ecx +
mov edi [ebp+arg_0] +
lea eax [ebp+var_58] +
mov esi [ebp+arg_4] +
push 48h  +
push 0  +
push eax  +
mov [ebp+rclsid] edi +
mov [ebp+var_74] esi +
call j_memset  +
add esp 0Ch +
test esi esi +
js loc_463F4B  +
cmp esi [ebx+344h] +
jge loc_463F4B  +
push [ebp+arg_8]  +
mov ecx [ebx+36Ch] +
xor eax eax +
inc eax  +
mov [ebp+var_58] eax +
imul eax esi +
push edi  +
add ecx eax +
mov [ebp+var_68] eax +
mov al [ebx+32Fh] +
push ecx  +
push eax  +
mov ecx ebx +
call sub_4626C4  +
mov [ebp+var_88] eax +
test eax eax +
mov eax Mso20Win32Client_3788 +
mov [ebp+var_70] eax +
js loc_463E2E  +
mov ecx [ebp+rclsid] +
lea edx [ebp+var_24] +
mov esi edi +
lea edi [ebp+var_34] +
movs   +
movs   +
movs   +
movs   +
call sub_465AD8  +
movaps xmm0 oword ptr ds:oword_4F9670 +
xor eax eax +
mov [ebp+var_6C] eax +
mov [ebp+var_18] eax +
mov eax Mso20Win32Client_755 +
movups oword ptr [ebp+var_54] xmm0 +
mov [ebp+var_64] eax +
call eax  +
xor ecx ecx +
push 4  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
mov [ebp+rclsid] ecx +
call sub_40E9C8  +
mov esi eax +
mov [ebp+var_60] esi +
test esi esi +
jz loc_463D25  +
push [ebp+rclsid]  +
push 0  +
push esi  +
call j_memset  +
add esp 0Ch +
jmp loc_463D2A  +
xor esi esi +
mov [ebp+var_60] esi +
mov eax [ebp+var_14] +
mov [ebp+var_14] esi +
test eax eax +
jz loc_463D38  +
push eax  +
call [ebp+var_70]  +
mov edx [ebx+36Ch] +
mov ecx [ebp+var_68] +
mov eax [ecx+edx+3A0h] +
sub eax 1 +
jz loc_463D73  +
sub eax 1 +
jz loc_463D7A  +
sub eax 1 +
jz loc_463D5D  +
and dword ptr [ebp+var_54+4] 0 +
jmp loc_463D84  +
mov eax [ecx+edx+3ACh] +
mov dword ptr [ebp+var_54+8] 1 +
mov [ebp+var_6C] eax +
mov [ebp+var_18] eax +
jmp loc_463D84  +
mov dword ptr [ebp+var_54] 1 +
mov eax [ecx+edx+3A4h] +
mov dword ptr [ebp+var_54+0Ch] eax +
mov edi [ecx+edx+2BCh] +
mov eax [ecx+edx+2E0h] +
xor ecx ecx +
mov [ebp+var_7C] eax +
inc ecx  +
mov [ebp+var_38] eax +
xor eax eax +
cmp edi ecx +
mov [ebp+rclsid] edi +
mov [ebp+var_1C] edi +
cmovz eax ecx +
xor edi edi +
mov [ebp+var_84] eax +
mov [ebp+var_44] eax +
mov [ebp+var_78] edi +
call [ebp+var_64]  +
test eax eax +
jle loc_463E10  +
mov eax Mso20Win32Client_974 +
mov [ebp+var_80] eax +
push edi  +
lea ecx [ebp+var_A8] +
push ecx  +
call eax  +
cmp dword ptr [ebp+var_54+4] 0 +
lea edi [ebp+var_98] +
mov esi eax +
movs   +
movs   +
movs   +
movs   +
jnz loc_463DE5  +
xor eax eax +
jmp loc_463DF9  +
mov ecx [ebx+36Ch] +
push [ebp+var_94]  +
add ecx [ebp+var_68] +
call sub_4647A8  +
mov edi [ebp+var_78] +
mov esi [ebp+var_60] +
mov [esi+edi*4] eax +
inc edi  +
mov [ebp+var_78] edi +
call [ebp+var_64]  +
cmp edi eax +
mov eax [ebp+var_80] +
jl loc_463DC5  +
mov eax [ebx+36Ch] +
mov ecx [ebp+var_68] +
mov eax [eax+ecx+2C4h] +
mov [ebp+var_64] eax +
mov [ebp+var_20] eax +
mov edi [ebp+var_84] +
jmp loc_463E53  +
mov eax [ebp+var_18] +
mov esi [ebp+var_14] +
and [ebp+var_58] 0 +
mov edi [ebp+var_44] +
mov [ebp+var_6C] eax +
mov eax [ebp+var_1C] +
mov [ebp+rclsid] eax +
mov eax [ebp+var_20] +
mov [ebp+var_64] eax +
mov eax [ebp+var_38] +
mov [ebp+var_60] esi +
mov [ebp+var_7C] eax +
imul ecx [ebp+var_74] +
lea eax [ebp+var_14] +
mov [ebp+var_74] ecx +
lea edx [ecx+44h] +
add edx [ebx+34Ch] +
cmp edx eax +
jz loc_463E80  +
xor ecx ecx +
mov eax esi +
mov [ebp+var_60] ecx +
mov [ebp+var_14] ecx +
mov ecx [edx] +
mov [edx] eax +
test ecx ecx +
jz loc_463E80  +
push ecx  +
call [ebp+var_70]  +
mov eax [ebx+34Ch] +
lea esi [ebp+var_34] +
mov edx [ebp+var_74] +
mov ecx [ebp+var_58] +
mov [edx+eax] ecx +
mov ecx [ebx+34Ch] +
mov eax dword ptr [ebp+var_54] +
mov [ecx+edx+4] eax +
mov ecx [ebx+34Ch] +
mov eax dword ptr [ebp+var_54+4] +
mov [ecx+edx+8] eax +
mov ecx [ebx+34Ch] +
mov eax dword ptr [ebp+var_54+8] +
mov [ecx+edx+0Ch] eax +
mov ecx [ebx+34Ch] +
mov eax dword ptr [ebp+var_54+0Ch] +
mov [ecx+edx+10h] eax +
mov eax [ebx+34Ch] +
mov [eax+edx+14h] edi +
lea edi [edx+24h] +
mov ecx [ebx+34Ch] +
mov eax [ebp+var_40] +
mov [ecx+edx+18h] eax +
mov ecx [ebx+34Ch] +
mov eax [ebp+var_3C] +
mov [ecx+edx+1Ch] eax +
mov eax [ebx+34Ch] +
mov ecx [ebp+var_7C] +
mov [eax+edx+20h] ecx +
add edi [ebx+34Ch] +
mov eax [ebp+var_24] +
movs   +
movs   +
movs   +
movs   +
mov ecx [ebx+34Ch] +
mov [ecx+edx+34h] eax +
mov eax [ebx+34Ch] +
mov ecx [ebp+var_64] +
mov [eax+edx+38h] ecx +
mov eax [ebx+34Ch] +
mov ecx [ebp+rclsid] +
mov [eax+edx+3Ch] ecx +
mov eax [ebx+34Ch] +
mov ecx [ebp+var_6C] +
mov [eax+edx+40h] ecx +
mov eax [ebp+var_60] +
test eax eax +
jz loc_463F43  +
push eax  +
call [ebp+var_70]  +
mov eax [ebp+var_88] +
jmp loc_463F4E  +
push 57h  +
pop eax  +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_10] +
xor ecx ebp +
call sub_49FFB8  +
leave   +
retn 0Ch  +
***
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
push esi  +
push 0FFFFFFFFh  +
mov eax [ecx+348h] +
call sub_4A1A58  +
mov ecx [ebp-60h] +
push 0FFFFFFFFh  +
push ecx  +
cmp [ebp+arg_0] 0 +
call sub_4A19B9  +
cmp [ebp+arg_0] 0 +
mov eax [ebp+arg_0] +
push esi  +
call sub_4A1A22  +
mov ecx [ebp-14h] +
sub esp 0Ch +
sub esp 14h +
sub esp 18h +
push ecx  +
sub esp 14h +
push ecx  +
sub esp 20h +
sub esp 1Ch +
sub esp 18h +
sub esp 18h +
sub esp 14h +
sub esp 18h +
sub esp 20h +
sub esp 18h +
sub esp 1Ch +
sub esp 14h +
sub esp 1Ch +
test esi esi +
add ecx 0Ch +
add ecx 0Ch +
test [ebp+arg_0] 1 +
test [ebp+arg_0] 1 +
and esp 0FFFFFFF8h +
push esi  +
lea ecx [esi+30h] +
mov ecx [ecx+0Ch] +
push esi  +
cmp dword ptr [ecx+0Ch] 0 +
push esi  +
cmp dword ptr [ecx+4] 0 +
and esp 0FFFFFFF8h +
xor ecx ecx +
cmp dword ptr [esi] 0 +
push esi  +
push ecx  +
cmp ecx eax +
ja loc_465B1E  +
jmp ds:off_465B22[ecx*4]  +
push 5  +
pop eax  +
retn   +
xor eax eax +
inc eax  +
retn   +
push 3  +
pop eax  +
retn   +
push 7  +
pop eax  +
retn   +
push 8  +
pop eax  +
retn   +
push 2  +
pop eax  +
retn   +
push 6  +
pop eax  +
retn   +
***
push ecx  +
push ecx  +
sub esp 10h +
sub esp 3Ch +
and esp 0FFFFFFF8h +
mov eax [ecx+4] +
mov eax [ecx+4] +
mov eax [ecx+4] +
mov eax [ecx+4] +
mov eax [ecx+4] +
mov eax [ecx+4] +
mov eax [ecx+4] +
push ecx  +
mov eax [ecx+4] +
push ecx  +
push ecx  +
mov eax [ecx+4] +
mov eax [ecx+4] +
mov eax [ecx+4] +
mov eax [ecx+4] +
mov eax [ecx+4] +
mov eax [ecx+4] +
mov eax [ecx+4] +
mov eax [ecx+4] +
mov eax [ecx+4] +
mov eax [ecx+4] +
mov eax [ecx+4] +
mov eax [ecx+4] +
mov eax [ecx+4] +
mov eax [ecx+4] +
mov eax [ecx+4] +
mov eax [ecx+4] +
mov eax [ecx+4] +
mov eax [ecx+4] +
mov eax [ecx+4] +
mov eax [ecx+4] +
mov eax [ecx+4] +
mov eax [ecx+4] +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push ecx  +
and dword ptr [ecx+30h] 0 +
sub esp 14h +
mov edx [ebp+arg_8] +
sub esp 43Ch +
push ecx  +
sub esp 0Ch +
mov ecx [ecx+4] +
retn   +
***
retn   +
***
mov edx ecx +
mov eax [ecx] +
sub esp 404h +
push ebx  +
push ecx  +
sub esp 0Ch +
call sub_4A19B9  +
sub esp 204h +
push ecx  +
call sub_4A19B9  +
push ecx  +
call sub_4A19EC  +
cmp dword ptr [esi+14h] 0 +
mov al [ebp+arg_0] +
mov al [ebp+arg_0] +
mov al [ebp+arg_0] +
mov eax [ebp+arg_0] +
push esi  +
mov eax [ebp+arg_0] +
mov eax [ecx+4] +
lea edx [ecx+2Ch] +
mov ecx [ecx+2Ch] +
mov eax [ebp+arg_0] +
test ecx ecx +
jz loc_466C04  +
mov [eax] ecx +
mov byte ptr [eax+4] 1 +
jmp loc_466C08  +
mov byte ptr [eax+4] 0 +
pop ebp  +
retn 4  +
***
lea eax [ebp+arg_C] +
mov eax 80004005h +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push edi  +
push esi  +
mov esi ecx +
lea ecx [esi+14h] +
call sub_467237  +
test [ebp+arg_0] 1 +
mov dword ptr [esi] offset off_4AE1AC +
jz loc_46727C  +
push esi  +
call Mso20Win32Client_3788  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
or dword ptr [ecx+20h] 0FFFFFFFFh +
mov dword ptr [esi] offset off_4D4C98 +
call sub_4A19EC  +
and esp 0FFFFFFF8h +
cmp dword ptr [esi+20h] 0FFFFFFFFh +
sub esp 398h +
sub esp 398h +
and esp 0FFFFFFF8h +
sub esp 38h +
push 0FFFFFFFFh  +
sub esp 10h +
push ecx  +
and esp 0FFFFFFF8h +
cmp dword_50C094 1 +
push ecx  +
push ecx  +
sub esp 1Ch +
sub esp 1Ch +
sub esp 1Ch +
push esi  +
sub esp 1Ch +
push esi  +
push esi  +
push esi  +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
call sub_4A19EC  +
call sub_4A19EC  +
test ecx ecx +
push ecx  +
xor edx edx +
sub esp 20h +
sub esp 410h +
sub esp 1Ch +
mov eax [ecx+4] +
call sub_4A19B9  +
call sub_4A19B9  +
sub esp 10h +
push ecx  +
test ecx ecx +
push ebx  +
sub esp 0Ch +
call sub_488018  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+nSize]  +
and esp 0FFFFFFF8h +
mov edx [ebp+arg_4] +
and esp 0FFFFFFF8h +
call sub_43FDE4  +
call sub_43FDE4  +
mov ecx [ebp+arg_0] +
call sub_43FDE4  +
push [ebp+arg_0]  +
push [ebp+arg_4]  +
push 0FFFFFFFFh  +
call sub_488018  +
push esi  +
lea ecx [esi+0E8h] +
push 0FFFFFFFFh  +
call sub_4A19B9  +
call sub_4A19EC  +
mov eax [ebp+arg_0] +
call sub_4A19EC  +
and esp 0FFFFFFF8h +
sub esp 24h +
mov eax dword_508660 +
xor eax esp +
mov [esp+24h+var_4] eax +
mov ecx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
push ecx  +
lea ecx [esp+2Ch+var_1C] +
mov [esp+2Ch+var_20] esi +
call sub_406AE8  +
lea edx [esp+28h+var_1C] +
mov ecx esi +
call sub_43DBB9  +
lea ecx [esp+28h+var_1C] +
call sub_406DE4  +
mov ecx [esp+28h+var_4] +
mov eax esi +
pop esi  +
xor ecx esp +
call sub_49FFB8  +
mov esp ebp +
pop ebp  +
retn 8  +
***
call sub_4A1A58  +
mov ebx ecx +
mov [ebp-88h] ebx +
mov edi [ebp+8] +
lea ecx [ebp-7Ch] +
push 2  +
mov [ebp-84h] edi +
mov [ebp-74h] edi +
call sub_403522  +
mov esi eax +
mov dword ptr [ebp-68h] offset aMakerequest +
lea eax [ebp-68h] +
push eax  +
push offset off_4D5804  +
lea ecx [ebp-0ECh] +
call sub_4035B4  +
push esi  +
lea eax [ebp-0ECh] +
push eax  +
lea ecx [ebp-70h] +
call sub_403A20  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-70h] +
mov esi Mso20Win32Client_1620 +
call esi  +
mov ecx eax +
mov al [ebx+10Dh] +
push ecx  +
push eax  +
push offset aMode  +
call sub_41F961  +
lea ecx [ebp-70h] +
call esi  +
push ecx  +
push dword ptr [ebx+108h]  +
mov ecx eax +
push offset aBeneficiary  +
call sub_40C044  +
cmp dword ptr [ebx+0F8h] 0 +
jz loc_46A218  +
mov ecx [ebx+0Ch] +
mov eax [ecx] +
mov edx [eax+30h] +
lea eax [ebx+0E8h] +
push eax  +
lea eax [ebp-68h] +
push eax  +
call edx  +
lea ecx [ebp-70h] +
call esi  +
mov edx eax +
mov esi 0FFh +
mov ax [ebp-68h] +
movzx ecx al +
test ah ah +
cmovz ecx esi +
push ecx  +
mov al cl +
mov ecx edx +
push eax  +
push offset aCategory  +
call sub_41F961  +
lea eax [ebp-70h] +
mov ecx ebx +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
call sub_46A555  +
mov byte ptr [ebp-4] 1 +
cmp dword ptr [ebp-1Ch] 0 +
jnz loc_46A282  +
lea eax [ebp-74h] +
mov dword ptr [ebp-74h] offset aFetcherMakereq +
push eax  +
push ecx  +
push 0Ah  +
mov edx 75Dh +
mov ecx 229B118h +
call sub_4072B5  +
push 16E2161h  +
mov edx 80004005h +
lea ecx [ebp-70h] +
call sub_403B4D  +
mov dword ptr [edi] 1 +
mov byte ptr [edi+20h] 0 +
lea ecx [ebp-2Ch] +
call sub_406EAB  +
lea ecx [ebp-70h] +
call Mso20Win32Client_177  +
mov eax edi +
jmp loc_46A4F2  +
mov eax [ebx] +
lea ecx [ebp-70h] +
push ecx  +
lea ecx [ebp-0A0h] +
push ecx  +
mov ecx ebx +
call dword ptr [eax+18h]  +
mov byte ptr [ebp-4] 2 +
mov eax [ebp-0A0h] +
test eax eax +
jz loc_46A2B5  +
mov [edi] eax +
mov byte ptr [edi+20h] 0 +
lea ecx [ebp-9Ch] +
call sub_410A11  +
jmp loc_46A26A  +
mov al [ebx+10Ch] +
xor ecx ecx +
mov [ebp-80h] ecx +
mov [ebp-7Ch] ecx +
mov [ebp-78h] ecx +
lea ecx [ebp-80h] +
push 5  +
push ecx  +
lea ecx [ebp-9Ch] +
push ecx  +
lea ecx [ebp-2Ch] +
push ecx  +
push eax  +
lea ecx [ebp-64h] +
call sub_40EC00  +
mov byte ptr [ebp-4] 3 +
mov esi [ebp-80h] +
test esi esi +
jz loc_46A347  +
cmp esi [ebp-7Ch] +
jz loc_46A315  +
mov edi esi +
lea ecx [edi+18h] +
call sub_406DE4  +
mov ecx edi +
call sub_406DE4  +
add edi 30h +
cmp edi [ebp-7Ch] +
jnz loc_46A2F2  +
mov edi [ebp-84h] +
mov ebx [ebp-88h] +
mov eax [ebp-78h] +
sub eax esi +
push 30h  +
cdq   +
pop ecx  +
idiv  ecx +
mov ecx esi +
imul eax eax +
cmp eax 1000h +
jb loc_46A33F  +
mov esi [esi-4] +
sub ecx esi +
lea eax [ecx-4] +
cmp eax 1Fh +
jbe loc_46A33F  +
call ds:_invalid_parameter_noinfo_noreturn  +
push esi  +
call ds:free  +
pop ecx  +
mov ecx [ebx+0Ch] +
lea edx [ebp-64h] +
push dword ptr [ebx+14h]  +
push edx  +
mov eax [ecx] +
lea edx [ebp-90h] +
push edx  +
call dword ptr [eax+3Ch]  +
mov byte ptr [ebp-0A4h] 0 +
lea eax [ebp-0E0h] +
mov byte ptr [ebp-4] 6 +
push eax  +
lea ecx [ebp-90h] +
call sub_46A97B  +
push eax  +
lea ecx [ebp-0C0h] +
call sub_46A502  +
cmp byte ptr [ebp-0C4h] 0 +
jz loc_46A3A7  +
movsx eax byte ptr [ebp-0C8h] +
inc eax  +
sub eax 0 +
jz loc_46A3A7  +
lea ecx [ebp-0E0h] +
call sub_406DE4  +
mov dword ptr [ebp-4] 5 +
lea ecx [ebp-70h] +
mov al [ebp-0A4h] +
xor ebx ebx +
test al al +
mov [ebp-66h] al +
mov byte ptr [ebp-65h] 1 +
setz bl  +
call Mso20Win32Client_3604  +
mov cx [ebp-66h] +
mov [eax] cx +
xor al al +
mov [ebp-0C4h] al +
mov byte ptr [ebp-4] 8 +
cmp [ebp-0A4h] al +
jz loc_46A3FE  +
lea eax [ebp-0C0h] +
push eax  +
lea ecx [ebp-0E0h] +
call sub_41FEB1  +
mov al [ebp-0C4h] +
mov [edi] ebx +
xor ebx ebx +
mov [edi+20h] bl +
test al al +
jz loc_46A43B  +
lea eax [ebp-0E0h] +
push eax  +
lea ecx [edi+4] +
call sub_4209AB  +
mov byte ptr [edi+20h] 1 +
cmp [ebp-0C4h] bl +
jz loc_46A43B  +
movsx eax byte ptr [ebp-0C8h] +
inc eax  +
sub eax ebx +
jz loc_46A43B  +
lea ecx [ebp-0E0h] +
call sub_406DE4  +
cmp [ebp-0A4h] bl +
jz loc_46A45A  +
movsx eax byte ptr [ebp-0A8h] +
inc eax  +
sub eax ebx +
jz loc_46A45A  +
lea ecx [ebp-0C0h] +
call sub_406DE4  +
mov ecx [ebp-8Ch] +
test ecx ecx +
jz loc_46A469  +
call sub_401A51  +
lea ecx [ebp-64h] +
call sub_40FCA7  +
jmp loc_46A2A8  +
push 159A2C6h  +
mov edx 80004004h +
lea ecx [ebp-70h] +
call sub_403B4D  +
mov eax [ebp-74h] +
mov dword ptr [eax] 1 +
mov byte ptr [eax+20h] 0 +
mov eax offset loc_46A49B +
retn   +
cmp byte ptr [ebp-0A4h] 0 +
jz loc_46A4BC  +
movsx eax byte ptr [ebp-0A8h] +
inc eax  +
sub eax 0 +
jz loc_46A4BC  +
lea ecx [ebp-0C0h] +
call sub_406DE4  +
mov ecx [ebp-8Ch] +
test ecx ecx +
jz loc_46A4CB  +
call sub_401A51  +
lea ecx [ebp-64h] +
call sub_40FCA7  +
lea ecx [ebp-9Ch] +
call sub_410A11  +
lea ecx [ebp-2Ch] +
call sub_406EAB  +
lea ecx [ebp-70h] +
call Mso20Win32Client_177  +
mov eax [ebp-74h] +
call sub_4A19AD  +
retn 4  +
***
mov eax [ebp+arg_0] +
call sub_4A19EC  +
sub esp 2Ch +
call sub_4A19B9  +
call sub_4A19B9  +
call sub_4A19B9  +
sub esp 18h +
push ecx  +
push ebx  +
push 0FFFFFFFFh  +
call sub_4A19B9  +
push 0FFFFFFFFh  +
call sub_4A19EC  +
mov eax [ebp+arg_0] +
call sub_4A19EC  +
call sub_4A19EC  +
call sub_4A19EC  +
call sub_4A19EC  +
push 0FFFFFFFFh  +
call sub_4A19EC  +
call sub_4A19EC  +
call sub_4A19B9  +
call sub_4A19B9  +
push edi  +
sub esp 20h +
push 0FFFFFFFFh  +
add ecx 8 +
sub esp 0Ch +
push ecx  +
push 0FFFFFFFFh  +
call sub_4A19EC  +
push 0FFFFFFFFh  +
push ecx  +
and esp 0FFFFFFF8h +
mov edx [esi+10h] +
push ebx  +
push 0FFFFFFFFh  +
push ebx  +
push esi  +
push 0FFFFFFFFh  +
mov edx ecx +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 14h  +
push ecx  +
push esi  +
push esi  +
push ecx  +
mov edx [ecx+14h] +
sub esp 0Ch +
push ecx  +
mov eax [ebp+arg_0] +
push 0FFFFFFFFh  +
push esi  +
push ecx  +
push [ebp+arg_0]  +
push ebx  +
push ebx  +
push 1  +
push ecx  +
call ds:RaiseException  +
retn   +
***
mov edx [ebp+arg_8] +
call sub_4A19EC  +
call sub_4A19EC  +
mov edi [ebp+8] +
lea edx [ebp-5Ch] +
mov esi [ebp+0Ch] +
mov [ebp-78h] edi +
mov eax [ecx] +
push esi  +
push edx  +
call dword ptr [eax+1Ch]  +
xor ebx ebx +
mov [ebp-4] ebx +
cmp [ebp-5Ch] ebx +
jz loc_46E7A3  +
push 236CC063h  +
mov edx 80004005h +
mov ecx esi +
call sub_403B4D  +
mov ecx [ebp-5Ch] +
mov [edi] ecx +
mov [edi+4] ebx +
mov [edi+8] ebx +
mov [edi+0Ch] ebx +
jmp loc_46E883  +
lea ecx [ebp-84h] +
call sub_40EFA4  +
lea eax [ebp-58h] +
mov byte ptr [ebp-4] 1 +
push eax  +
mov edx offset aBearerS +
lea ecx [ebp-74h] +
call sub_410B3A  +
mov esi eax +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-40h] +
xor eax eax +
mov [ebp-40h] ebx +
push offset aAuthorization  +
mov [ebp-30h] ebx +
mov dword ptr [ebp-2Ch] 7 +
mov [ebp-40h] ax +
call sub_4068D1  +
push esi  +
lea ecx [ebp-28h] +
call sub_406A8F  +
lea eax [ebp-40h] +
mov byte ptr [ebp-4] 3 +
push eax  +
lea ecx [ebp-84h] +
call sub_410769  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call sub_406DE4  +
mov eax [ebp-2Ch] +
cmp eax 8 +
jb loc_46E847  +
mov ecx [ebp-40h] +
lea eax ds:2[eax*2] +
mov edx ecx +
cmp eax 1000h +
jb loc_46E83F  +
mov ecx [ecx-4] +
sub edx ecx +
lea eax [edx-4] +
cmp eax 1Fh +
jbe loc_46E83F  +
call ds:_invalid_parameter_noinfo_noreturn  +
push ecx  +
call ds:free  +
pop ecx  +
xor eax eax +
mov [ebp-30h] ebx +
lea ecx [ebp-74h] +
mov dword ptr [ebp-2Ch] 7 +
mov [ebp-40h] ax +
mov byte ptr [ebp-4] 1 +
call sub_406DE4  +
lea eax [ebp-84h] +
mov [ebp-78h] ebx +
push eax  +
lea eax [ebp-78h] +
mov ecx edi +
push eax  +
call sub_46C7DD  +
lea ecx [ebp-84h] +
call sub_410A11  +
lea ecx [ebp-58h] +
call sub_406DE4  +
mov eax edi +
call sub_4A19A1  +
retn 8  +
***
call sub_4A19B9  +
mov edx [ecx] +
push ecx  +
mov eax [ebp+arg_4] +
push ebx  +
cmp [ebp+arg_0] 0 +
mov edx [ebp+arg_0] +
mov eax [ebp+arg_4] +
push 0FFFFFFFFh  +
push esi  +
push esi  +
sub esp 0Ch +
int 3  +
***
mov eax [ebp+arg_0] +
call sub_4A19B9  +
mov eax [ebp+arg_0] +
cmp dword ptr [esi+0Ch] 0 +
mov ecx [ebp+arg_0] +
mov ecx [ebp+arg_0] +
mov ecx [ebp+arg_4] +
push 0FFFFFFFFh  +
cmp dword ptr [esi+0Ch] 0 +
mov ecx [ebp+arg_4] +
push esi  +
push esi  +
call sub_4A19B9  +
call sub_4A19B9  +
test [ebp+arg_0] 1 +
call sub_4A19EC  +
call sub_4A19EC  +
mov ecx [ebp+arg_0] +
call sub_4A19EC  +
xor ecx ecx +
push ecx  +
add ecx 0Ch +
add ecx 10h +
add ecx 14h +
lea eax [ebp+arg_4] +
add ecx 1Ch +
push ecx  +
add ecx 24h +
sub esp 10h +
push 0FFFFFFFFh  +
push offset loc_4A22BF  +
mov eax large fs:0 +
push eax  +
push esi  +
mov eax dword_508660 +
xor eax ebp +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov eax dword_50C0A0 +
test eax eax +
jnz loc_46FB1E  +
push 1  +
push 2Ch  +
call Mso20Win32Client_1193  +
mov edx eax +
test edx edx +
jnz loc_46FAD8  +
call Mso20Win32Client_56  +
xor eax eax +
mov dword ptr [edx] offset off_4D5F7C +
mov [edx+4] eax +
mov ecx edx +
mov [edx+8] eax +
mov esi offset dword_50C0A0 +
mov [edx+0Ch] eax +
mov [edx+10h] eax +
mov [edx+14h] eax +
mov [edx+18h] eax +
mov [edx+1Ch] eax +
mov [edx+20h] eax +
mov [edx+24h] eax +
mov [edx+28h] eax +
cmpxchg [esi] ecx +
test eax eax +
jnz loc_46FB11  +
mov eax edx +
jmp loc_46FB1E  +
mov eax [edx] +
mov ecx edx +
push 1  +
call dword ptr [eax]  +
mov eax dword_50C0A0 +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop esi  +
leave   +
retn   +
***
push ecx  +
push edi  +
push ecx  +
push ecx  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push ecx  +
push 0FFFFFFFFh  +
push ecx  +
push ebx  +
push esi  +
push edi  +
push 1  +
mov edi ecx +
mov ebx edx +
push 4Ch  +
mov [ebp+var_4] edi +
call Mso20Win32Client_1193  +
mov esi eax +
test esi esi +
jnz loc_470E8D  +
call Mso20Win32Client_56  +
mov eax [ebp+arg_4] +
mov edx [ebx] +
movzx ecx word ptr [eax] +
mov eax [ebp+arg_0] +
mov dword ptr [esi] offset off_4D602C +
mov ax [eax] +
mov [esi+46h] ax +
mov [esi+48h] cx +
test edx edx +
jnz loc_470EB9  +
push edx  +
push 1404252h  +
call Mso20Win32Client_2055  +
push 0FFFFFFFFh  +
push edx  +
lea eax [esi+4] +
push 41h  +
push eax  +
call ds:strncpy_s  +
add esp 10h +
mov [edi] esi +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov eax offset aUnknown +
retn   +
***
mov eax offset aWrongapp_0 +
retn   +
***
mov eax offset aWronghardwarei +
retn   +
***
mov eax offset aWrongbindingid +
retn   +
***
mov eax offset aWrongtimeran_0 +
retn   +
***
mov eax offset aSignaturemisma +
retn   +
***
lea eax [edi+58h] +
mov esi ecx +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
call sub_477F63  +
cmp [ebp+arg_0] 0 +
push ecx  +
push [ebp+arg_8]  +
push [ebp+arg_10]  +
push [ebp+arg_10]  +
call sub_488018  +
call sub_43FDE4  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push [ebp+arg_8]  +
mov edx [ebp+arg_4] +
cmp [ebp+arg_18] 8 +
call Mso20Win32Client_3849  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push esi  +
lea ecx [esi+14h] +
call sub_4713C4  +
push 0FFFFFFFFh  +
call sub_4A19B9  +
call sub_4A19EC  +
push 0FFFFFFFFh  +
call sub_4A19EC  +
call sub_4A19EC  +
push 0FFFFFFFFh  +
call sub_4A1A58  +
call sub_4A19EC  +
call sub_4A19EC  +
mov edi ecx +
mov ebx [ebp+40h] +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-50h] +
push 2  +
call sub_403522  +
mov esi eax +
mov dword ptr [ebp-2Ch] offset aRegistererror +
lea eax [ebp-2Ch] +
push eax  +
push offset off_4D6A3C  +
lea ecx [ebp-48h] +
call sub_4035B4  +
push esi  +
lea eax [ebp-48h] +
push eax  +
lea ecx [ebp-34h] +
call sub_403A20  +
lea ecx [ebp-34h] +
call Mso20Win32Client_1620  +
and dword ptr [ebp-28h] 0 +
mov esi eax +
and dword ptr [ebp-18h] 0 +
xor eax eax +
mov dword ptr [ebp-14h] 7 +
mov [ebp-28h] ax +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call sub_4444D8  +
push ecx  +
push eax  +
push offset aMode  +
mov ecx esi +
call sub_41F961  +
mov byte ptr [ebp-4] 1 +
mov eax [ebp-14h] +
cmp eax 8 +
jb loc_47203F  +
mov ecx [ebp-28h] +
lea eax ds:2[eax*2] +
mov edx ecx +
cmp eax 1000h +
jb loc_472037  +
mov ecx [ecx-4] +
sub edx ecx +
lea eax [edx-4] +
cmp eax 1Fh +
jbe loc_472037  +
call ds:_invalid_parameter_noinfo_noreturn  +
push ecx  +
call ds:free  +
pop ecx  +
lea eax [edi+14h] +
push eax  +
lea ecx [ebp-3Ch] +
call sub_4731A0  +
push ecx  +
push ecx  +
mov eax esp +
mov byte ptr [ebp-4] 3 +
push ebx  +
mov ecx edi +
mov byte ptr [eax+4] 0 +
lea eax [ebp+8] +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
call sub_47146C  +
push eax  +
lea ecx [edi+4] +
mov byte ptr [ebp-4] 4 +
call sub_473307  +
mov ecx [ebp-2Ch] +
test ecx ecx +
jz loc_472081  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
lea ecx [ebp-34h] +
mov word ptr [ebp-2Ah] 101h +
call Mso20Win32Client_3604  +
mov cx [ebp-2Ah] +
mov [eax] cx +
lea ecx [ebp-3Ch] +
call sub_47313F  +
lea ecx [ebp-34h] +
call Mso20Win32Client_177  +
lea ecx [ebp+24h] +
call sub_406DE4  +
lea ecx [ebp+0Ch] +
call sub_406DE4  +
call sub_4A19A1  +
retn 3Ch  +
***
mov ebx ds:free +
cmp eax 8 +
jb loc_4721A8  +
mov ecx [ebp-28h] +
lea eax ds:2[eax*2] +
mov edx ecx +
cmp eax esi +
jb loc_4721A4  +
mov ecx [ecx-4] +
sub edx ecx +
lea eax [edx-4] +
cmp eax 1Fh +
ja loc_4721D1  +
push ecx  +
call ebx  +
pop ecx  +
mov eax [ebp-2Ch] +
cmp eax 8 +
jb loc_472554  +
mov ecx [ebp-40h] +
lea eax ds:2[eax*2] +
mov edx ecx +
cmp eax esi +
jb loc_4721D7  +
mov ecx [ecx-4] +
sub edx ecx +
lea eax [edx-4] +
cmp eax 1Fh +
jbe loc_4721D7  +
call ds:_invalid_parameter_noinfo_noreturn  +
push ecx  +
call ebx  +
pop ecx  +
jmp loc_472554  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+38h]  +
push eax  +
lea ecx [ebp-164h] +
call sub_441549  +
xor ebx ebx +
mov ecx esi +
mov [ebp-4] ebx +
mov eax [esi] +
call dword ptr [eax+94h]  +
test al al +
jz loc_4722BB  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+0B0h]  +
test al al +
jnz loc_47222C  +
call sub_43FDE4  +
mov ecx eax +
call sub_4404A0  +
test al al +
jnz loc_4722BB  +
push 7  +
pop esi  +
mov [ebp-28h] ebx +
mov [ebp-18h] ebx +
mov [ebp-14h] esi +
push offset aEduconversion  +
lea ecx [ebp-28h] +
call sub_4068D1  +
push dword ptr [ebp-0D0h]  +
lea eax [ebp-144h] +
push eax  +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-78h] +
call sub_476380  +
push eax  +
mov ecx edi +
call sub_473395  +
lea ecx [ebp-5Ch] +
call sub_406DE4  +
lea ecx [ebp-74h] +
call sub_406DE4  +
mov eax [ebp-14h] +
cmp eax 8 +
jb loc_4722AA  +
mov ecx [ebp-28h] +
lea eax ds:2[eax*2] +
mov edx ecx +
cmp eax 1000h +
jb loc_4722A2  +
mov ecx [ecx-4] +
sub edx ecx +
lea eax [edx-4] +
cmp eax 1Fh +
ja loc_4721D1  +
push ecx  +
call ds:free  +
pop ecx  +
xor eax eax +
mov [ebp-18h] ebx +
mov [ebp-14h] esi +
mov [ebp-28h] ax +
jmp loc_472549  +
cmp [ebp-0D8h] ebx +
jz loc_4722FC  +
push dword ptr [ebp-0D0h]  +
lea eax [ebp-144h] +
push eax  +
lea eax [ebp-0E8h] +
push eax  +
lea ecx [ebp-78h] +
call sub_476380  +
push eax  +
mov ecx edi +
call sub_473395  +
lea ecx [ebp-5Ch] +
call sub_406DE4  +
lea ecx [ebp-74h] +
call sub_406DE4  +
jmp loc_472549  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+0B0h]  +
test al al +
jz loc_472320  +
push 7  +
pop esi  +
mov [ebp-28h] ebx +
mov [ebp-18h] ebx +
mov [ebp-14h] esi +
push offset aSubscriptionex  +
jmp loc_47223D  +
***
lea eax [ebp-128h] +
push eax  +
lea eax [ebp-17Ch] +
push eax  +
call Mso20Win32Client_3596  +
mov eax [ebp-12Ch] +
cmp eax 2 +
jnz loc_47236C  +
cmp [ebp-174h] bl +
jz loc_472387  +
push ebx  +
call ds:_time64  +
pop ecx  +
cmp [ebp-178h] edx +
jg loc_472387  +
jl loc_472361  +
cmp [ebp-17Ch] eax +
ja loc_472387  +
mov eax [ebp-12Ch] +
cmp eax 2 +
jz loc_47230A  +
cmp eax 4 +
jnz loc_47239D  +
push 7  +
pop esi  +
mov [ebp-28h] ebx +
mov [ebp-18h] ebx +
mov [ebp-14h] esi +
push offset aEntitlementsus  +
jmp loc_47223D  +
***
push 7  +
pop esi  +
mov [ebp-28h] ebx +
mov [ebp-18h] ebx +
mov [ebp-14h] esi +
push offset aSubscriptionca  +
jmp loc_47223D  +
***
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+0C0h]  +
test al al +
jz loc_4723D3  +
mov ecx [ebp-168h] +
mov ecx [ecx+0Ch] +
mov eax [ecx] +
call dword ptr [eax+50h]  +
test eax eax +
jns loc_4723D3  +
push 7  +
pop esi  +
mov [ebp-28h] ebx +
mov [ebp-18h] ebx +
mov [ebp-14h] esi +
push offset aNointernetconn  +
jmp loc_47223D  +
***
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+28h]  +
mov edx [esi] +
mov ecx esi +
cmp eax 2 +
jnz loc_472475  +
call dword ptr [edx+28h]  +
mov ecx eax +
call near ptr word_470ED6  +
push 7  +
pop esi  +
push eax  +
lea ecx [ebp-28h] +
mov [ebp-28h] ebx +
mov [ebp-18h] ebx +
mov [ebp-14h] esi +
call sub_4068D1  +
push ebx  +
lea eax [ebp-40h] +
mov [ebp-40h] ebx +
push eax  +
lea eax [ebp-28h] +
mov [ebp-30h] ebx +
push eax  +
lea ecx [ebp-78h] +
mov [ebp-2Ch] esi +
call sub_476380  +
push eax  +
mov ecx edi +
call sub_473395  +
lea ecx [ebp-5Ch] +
call sub_406DE4  +
lea ecx [ebp-74h] +
call sub_406DE4  +
mov eax [ebp-2Ch] +
cmp eax 8 +
jb loc_472276  +
mov ecx [ebp-40h] +
lea eax ds:2[eax*2] +
mov edx ecx +
cmp eax 1000h +
jb loc_472468  +
mov ecx [ecx-4] +
sub edx ecx +
lea eax [edx-4] +
cmp eax 1Fh +
ja loc_4721D1  +
push ecx  +
call ds:free  +
pop ecx  +
jmp loc_472276  +
***
call dword ptr [edx+88h]  +
mov edx [esi] +
mov ecx esi +
mov [ebp-168h] eax +
call dword ptr [edx+70h]  +
mov edx [esi] +
mov ecx esi +
mov [ebp-16Ch] eax +
call dword ptr [edx+3Ch]  +
cmp eax 1 +
jnz loc_472546  +
mov eax [ebp-168h] +
test eax eax +
jz loc_472546  +
mov ecx [ebp-16Ch] +
test ecx ecx +
jz loc_472546  +
movd xmm1 ecx +
cvtdq2pd xmm1 xmm1 +
shr ecx 1Fh +
shr eax 2 +
push 1Eh  +
addsd xmm1 ds:qword_4F9690[ecx*8] +
pop ecx  +
cmp eax ecx +
cmova eax ecx +
movd xmm0 eax +
cvtdq2pd xmm0 xmm0 +
shr eax 1Fh +
addsd xmm0 ds:qword_4F9690[eax*8] +
comisd xmm0 xmm1 +
jbe loc_472546  +
push 7  +
pop esi  +
push offset aPreexpiration  +
lea ecx [ebp-28h] +
mov [ebp-28h] ebx +
mov [ebp-18h] ebx +
mov [ebp-14h] esi +
call sub_4068D1  +
push dword ptr [ebp-0D0h]  +
lea eax [ebp-144h] +
push eax  +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-0B0h] +
call sub_476380  +
push eax  +
mov ecx edi +
call sub_473395  +
lea ecx [ebp-94h] +
call sub_406DE4  +
lea ecx [ebp-0ACh] +
jmp loc_472271  +
***
mov [edi+38h] bl +
lea ecx [ebp-164h] +
call sub_43A7B0  +
mov eax edi +
call sub_4A19A1  +
retn 8  +
***
push esi  +
push ecx  +
call sub_4A19EC  +
push 0FFFFFFFFh  +
push ebx  +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
call sub_4A19EC  +
sub esp 18h +
cmp byte ptr [ecx+11h] 0 +
cmp byte ptr [esi+38h] 0 +
push 0FFFFFFFFh  +
push ecx  +
push 0FFFFFFFFh  +
sub esp 0Ch +
test esi esi +
jz loc_4732DA  +
mov ecx [esi+4] +
test ecx ecx +
jz loc_4732D3  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+5Ch]  +
push esi  +
call Mso20Win32Client_3788  +
pop esi  +
retn   +
***
call sub_4A19B9  +
mov esi ecx +
mov [ebp-14h] esi +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-10h] 0 +
push 8  +
call ds:malloc  +
mov edx eax +
pop ecx  +
test edx edx +
jnz loc_473335  +
call ds:?_Xbad_alloc@std@@YAXXZ  +
mov eax [ebp+8] +
mov ecx [eax] +
and dword ptr [eax] 0 +
mov [edx+4] ecx +
mov eax [esi] +
mov [edx] eax +
mov [esi] edx +
call sub_4A198D  +
retn 4  +
***
mov ecx [ecx] +
test ecx ecx +
jz locret_47335B  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+5Ch]  +
retn   +
***
push ecx  +
push esi  +
mov eax [ebp+arg_0] +
push 0FFFFFFFFh  +
mov ecx [ebp+arg_4] +
push 0FFFFFFFFh  +
lea eax [ecx+8] +
push esi  +
lea ecx [esi+8] +
push 0FFFFFFFFh  +
push esi  +
push esi  +
sub esp 14h +
push esi  +
mov ecx [esi+4Ch] +
push 0FFFFFFFFh  +
mov ecx [ecx+48h] +
mov edx [ecx+4Ch] +
mov edx [ecx+4Ch] +
push esi  +
mov esi ecx +
call sub_47379C  +
test [ebp+arg_0] 1 +
jz loc_47389C  +
push esi  +
call Mso20Win32Client_3788  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
call sub_4A19B9  +
call sub_4A19EC  +
call sub_4A19B9  +
call sub_4A19EC  +
call sub_4A19B9  +
call sub_4A19EC  +
call sub_4A19B9  +
call sub_4A19EC  +
call sub_4A19B9  +
call sub_4A19EC  +
call sub_4A19B9  +
call sub_4A19EC  +
call sub_4A19B9  +
call sub_4A19EC  +
call sub_4A19B9  +
call sub_4A19EC  +
push esi  +
call sub_4A19B9  +
call sub_4A19EC  +
call sub_4A19B9  +
call sub_4A19EC  +
call sub_4A19EC  +
call sub_4A19EC  +
call sub_4A19B9  +
call sub_4A19EC  +
call sub_4A19B9  +
call sub_4A19EC  +
push 0FFFFFFFFh  +
call sub_4A19EC  +
push ecx  +
call sub_4A19B9  +
call sub_4A19B9  +
sub esp 38h +
and esp 0FFFFFFF8h +
call sub_4A19B9  +
push ecx  +
mov eax [ebp+arg_0] +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
sub esp 0Ch +
push 0FFFFFFFFh  +
call sub_4A19B9  +
push ecx  +
mov eax [ebp+arg_14] +
mov eax [ebp+arg_0] +
sub ecx [ecx-4] +
sub ecx [ecx-4] +
sub ecx [ecx-4] +
sub ecx [ecx-4] +
sub ecx [ecx-4] +
sub ecx [ecx-4] +
push ecx  +
and esp 0FFFFFFF8h +
call sub_4A19B9  +
push 0FFFFFFFFh  +
sub esp 28h +
and esp 0FFFFFFF8h +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push ecx  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
mov ecx [ecx+8] +
push esi  +
sub esp 1Ch +
push 0FFFFFFFFh  +
mov eax large fs:2Ch +
mov edx [ebp+arg_4] +
call sub_4A19EC  +
call sub_4A19EC  +
and esp 0FFFFFFF8h +
call sub_4A19EC  +
call sub_4A19EC  +
call sub_4A19EC  +
push ecx  +
push edi  +
call sub_4A19EC  +
call sub_4A19EC  +
mov ecx dword_50BE80 +
test ecx ecx +
jnz loc_478FD2  +
push ecx  +
push 152139Ah  +
call Mso20Win32Client_2055  +
mov eax [ecx] +
jmp dword ptr [eax+0Ch]  +
***
push ebx  +
mov eax [ebp+arg_0] +
cmp dword ptr [ecx] 0 +
sub esp 14h +
push [ebp+arg_0]  +
sub esp 39Ch +
sub esp 94h +
call sub_4A19EC  +
sub esp 39Ch +
sub esp 20h +
call sub_4A19EC  +
sub esp 48h +
call sub_4A19EC  +
call sub_4A19EC  +
sub esp 390h +
call sub_4A19EC  +
mov eax 13E8h +
mov eax 1050h +
call sub_4A19EC  +
push edi  +
call sub_4A19EC  +
sub esp 220h +
call sub_4A19EC  +
call sub_4A19EC  +
and esp 0FFFFFFF8h +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
mov eax offset loc_47AA67 +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
mov eax [ebp+arg_0] +
push esi  +
imul edx [ebp+arg_4] +
push esi  +
push esi  +
push ecx  +
sub esp 20h +
sub esp 0Ch +
call sub_4A1A22  +
push ecx  +
call sub_4A19B9  +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
sub esp 1Ch +
mov eax dword_508660 +
xor eax esp +
mov [esp+1Ch+var_4] eax +
mov eax [ebp+arg_0] +
mov edx offset aInvalidGimmeEn +
push esi  +
mov esi ecx +
lea ecx [esp+20h+var_1C] +
push 13h  +
and dword ptr [esi+204h] 0 +
mov [esi+388h] eax +
xor eax eax +
mov dword ptr [esi] 3Ah +
mov [esi+308h] ax +
mov [esi+208h] ax +
call sub_4022DC  +
cmp [esp+20h+var_8] 8 +
lea ecx [esp+20h+var_1C] +
push 0FFFFFFFFh  +
cmovnb ecx [esp+24h+var_1C] +
push ecx  +
lea ecx [esi+4] +
push 100h  +
push ecx  +
call ds:wcsncpy_s  +
add esp 10h +
lea ecx [esp+20h+var_1C] +
call sub_406DE4  +
mov ecx [esp+20h+var_4] +
mov eax esi +
pop esi  +
xor ecx esp +
call sub_49FFB8  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
***
call sub_4A19EC  +
call sub_4A19EC  +
call sub_4A19EC  +
call sub_47B756  +
push [ebp+arg_10]  +
mov edx [ebp+arg_4] +
push [ebp+arg_14]  +
push [ebp+arg_8]  +
sub esp 20Ch +
mov edx [ebp+arg_4] +
call Mso20Win32Client_2055  +
call sub_4A19EC  +
call sub_4A19EC  +
call sub_4A19EC  +
sub esp 10h +
call sub_4A19EC  +
call sub_4A19EC  +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov eax edi +
cmp dword ptr [edi+14h] 8 +
jb loc_47C446  +
mov eax [edi] +
xor ebx ebx +
push ebx  +
push 80h  +
push 3  +
push ebx  +
push 1  +
push 80000000h  +
push eax  +
call Mso20Win32Client_3525  +
cmp dword ptr [edi+14h] 8 +
mov esi eax +
mov [ebp+var_8] ebx +
mov [ebp+var_4] ebx +
jb loc_47C46F  +
mov edi [edi] +
mov ecx edi +
call sub_411757  +
test eax eax +
jz loc_47C4A3  +
cmp esi 0FFFFFFFFh +
jz loc_47C4A3  +
lea eax [ebp+var_8] +
push eax  +
push esi  +
call ds:GetFileSizeEx  +
test eax eax +
jz loc_47C4A3  +
cmp [ebp+var_4] ebx +
jnz loc_47C4A3  +
cmp [ebp+var_8] ebx +
jz loc_47C4A3  +
mov eax [ebp+arg_0] +
mov [eax] esi +
mov byte ptr [eax+4] 1 +
jmp loc_47C4B7  +
mov edi [ebp+arg_0] +
mov [edi+4] bl +
cmp esi 0FFFFFFFFh +
jz loc_47C4B5  +
push esi  +
call ds:CloseHandle  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push offset loc_4A412E  +
mov eax large fs:0 +
push eax  +
sub esp 30h +
mov eax dword_508660 +
xor eax ebp +
mov [ebp+var_10] eax +
push ebx  +
push esi  +
push edi  +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov edi [ebp+arg_0] +
lea ecx [ebp+var_3C] +
push 2  +
call sub_403522  +
mov esi eax +
mov [ebp+var_2C] offset aDeletefile +
lea eax [ebp+var_2C] +
push eax  +
push offset off_4F0B18  +
lea ecx [ebp+var_1C] +
call sub_4035B4  +
push esi  +
lea eax [ebp+var_1C] +
push eax  +
lea ecx [ebp+var_34] +
call sub_403A20  +
lea ecx [ebp+var_34] +
call Mso20Win32Client_1620  +
and [ebp+var_28] 0 +
lea ecx [ebp+var_28] +
and [ebp+var_18] 0 +
mov esi eax +
mov [ebp+var_14] 7 +
call sub_4444D8  +
push ecx  +
push eax  +
push offset aMode  +
mov ecx esi +
call sub_41F961  +
mov eax [ebp+var_14] +
cmp eax 8 +
jb loc_47CA9D  +
mov ecx [ebp+var_28] +
lea eax ds:2[eax*2] +
mov edx ecx +
cmp eax 1000h +
jb loc_47CA95  +
mov ecx [ecx-4] +
sub edx ecx +
lea eax [edx-4] +
cmp eax 1Fh +
jbe loc_47CA95  +
call ds:_invalid_parameter_noinfo_noreturn  +
push ecx  +
call ds:free  +
pop ecx  +
cmp dword ptr [edi+14h] 8 +
jb loc_47CAA5  +
mov edi [edi] +
push edi  +
call ds:DeleteFileW  +
test eax eax +
setnz bl  +
test eax eax +
jnz loc_47CB0B  +
call ds:GetLastError  +
push 4  +
mov esi eax +
mov [ebp+var_1C] offset aLasterror +
pop eax  +
mov word ptr [ebp+var_14] ax +
lea eax [ebp+var_20] +
push eax  +
lea eax [ebp+var_2C] +
mov [ebp+var_18] esi +
push eax  +
push ecx  +
push 0Ah  +
push 2Dh  +
pop edx  +
mov ecx 27D768Ah +
mov [ebp+var_20] offset off_4C895C +
mov [ebp+var_2C] offset aFilestorageDel +
call sub_40BDEA  +
lea ecx [ebp+var_34] +
call Mso20Win32Client_1620  +
push ecx  +
push esi  +
push offset aErrorcode  +
mov ecx eax +
call sub_40C044  +
lea ecx [ebp+var_34] +
mov byte ptr [ebp+var_2C+2] bl +
mov byte ptr [ebp+var_2C+3] 1 +
call Mso20Win32Client_3604  +
mov cx word ptr [ebp+var_2C+2] +
mov [eax] cx +
lea ecx [ebp+var_34] +
call Mso20Win32Client_177  +
mov al bl +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_10] +
xor ecx ebp +
call sub_49FFB8  +
leave   +
retn 4  +
***
cmp byte ptr [ecx+4] 0 +
jz locret_47CB60  +
mov eax [ecx] +
cmp eax 0FFFFFFFFh +
jz locret_47CB60  +
or dword ptr [ecx] 0FFFFFFFFh +
push eax  +
call ds:CloseHandle  +
retn   +
***
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
sub esp 28h +
push ecx  +
mov edx 811C9DC5h +
push esi  +
mov eax [ebp+arg_0] +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
call sub_4A19B9  +
call sub_4A19EC  +
call sub_4A19EC  +
call sub_4A19EC  +
call sub_4A19EC  +
push ecx  +
sub esp 14h +
push ecx  +
mov eax [ebp+arg_0] +
push esi  +
mov ecx [esi+34h] +
and esp 0FFFFFFF8h +
push 0FFFFFFFFh  +
call sub_4A19EC  +
call sub_4A19EC  +
call sub_4A19EC  +
call sub_4A19EC  +
call sub_4A19EC  +
call sub_4A19EC  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
call sub_4A19B9  +
push ecx  +
call sub_4A19B9  +
call sub_4A19B9  +
call sub_4A19B9  +
call sub_4A19B9  +
call sub_4A19EC  +
call sub_4A19EC  +
mov eax [ecx+18h] +
call sub_4A19B9  +
mov eax [edx+4] +
push esi  +
and dword ptr [eax] 0 +
mov esi [edx] +
test esi esi +
jz loc_480106  +
push edi  +
mov ecx [esi+0Ch] +
mov edi [esi] +
test ecx ecx +
jz loc_4800F7  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+24h]  +
push esi  +
call ds:free  +
mov esi edi +
pop ecx  +
test edi edi +
jnz loc_4800E7  +
pop edi  +
pop esi  +
retn   +
***
push ecx  +
sub esp 14h +
call sub_4A19B9  +
mov edx [ebp+arg_4] +
push ecx  +
mov edx [ebp+arg_4] +
call sub_43FDE4  +
mov ecx [ebp+arg_0] +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
mov ecx [ecx+4] +
mov ecx [ecx+4] +
mov ecx [ecx+4] +
push 0FFFFFFFFh  +
push esi  +
call sub_4A1A22  +
call sub_4A19B9  +
call sub_4A19B9  +
push 0FFFFFFFFh  +
call sub_4A1A22  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push offset loc_4A8B8A  +
mov eax large fs:0 +
push eax  +
sub esp 1Ch +
push ebx  +
push esi  +
push edi  +
mov eax dword_508660 +
xor eax ebp +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov [ebp+var_10] esp +
mov esi ecx +
lea ecx [ebp+var_1C] +
call sub_48101B  +
and [ebp+var_4] 0 +
lea eax [ebp+var_1C] +
push eax  +
lea ecx [ebp+var_24] +
mov [ebp+var_28] esi +
call sub_408130  +
xor ebx ebx +
inc ebx  +
push ebx  +
push 14h  +
call Mso20Win32Client_1193  +
mov ecx eax +
test ecx ecx +
jnz loc_480BD4  +
push 131F462h  +
call Mso20Win32Client_2904  +
mov eax [ebp+var_28] +
mov [ecx+8] eax +
mov eax [ebp+var_24] +
mov [ecx+0Ch] eax +
mov eax [ebp+var_20] +
mov [ecx+10h] eax +
lea eax [ebp+var_14] +
mov [ecx+4] ebx +
mov dword ptr [ecx] offset off_4F16E0 +
push eax  +
mov [ebp+var_14] ecx +
call Mso20Win32Client_2315  +
mov ecx [ebp+var_14] +
test ecx ecx +
jz loc_480C0D  +
and [ebp+var_14] 0 +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+8]  +
lea eax [ebp+var_24] +
mov byte ptr [ebp+var_4] bl +
push eax  +
lea ecx [ebp+var_1C] +
call sub_480E39  +
mov ecx eax +
mov byte ptr [ebp+var_4] 2 +
call sub_47CC9C  +
mov ecx [ebp+var_20] +
mov bl al +
test ecx ecx +
jz loc_480C35  +
call sub_401A51  +
mov ecx [ebp+var_18] +
test ecx ecx +
jz loc_480C41  +
call sub_401A51  +
mov al bl +
jmp loc_480C59  +
mov eax offset loc_480C4B +
retn   +
mov ecx [ebp+var_18] +
test ecx ecx +
jz loc_480C57  +
call sub_401A51  +
xor al al +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
call sub_4A19B9  +
push 0FFFFFFFFh  +
mov al [ebp+arg_0] +
push esi  +
call sub_4A19EC  +
and esp 0FFFFFFF8h +
call sub_4A19B9  +
test ecx ecx +
push ecx  +
add ecx 0Ch +
call sub_4A19EC  +
test [ebp+arg_0] 1 +
call sub_4A19B9  +
call sub_4A1A22  +
call sub_48127C  +
mov ecx [ebp+arg_0] +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
call sub_4A19B9  +
push esi  +
call sub_4A19B9  +
call sub_4A19B9  +
call sub_4A19EC  +
sub esp 10h +
call sub_4A19B9  +
mov al [ebp+arg_8] +
mov eax [ecx] +
push esi  +
push ecx  +
and esp 0FFFFFFF8h +
sub esp 0Ch +
push edi  +
call sub_4A19EC  +
push [ebp+arg_8]  +
and esp 0FFFFFFF8h +
call sub_4A19EC  +
call sub_4A19EC  +
push 0FFFFFFFFh  +
cmp dword_50C0AC 0 +
mov ecx [ebp+arg_0] +
mov ecx [ebp+arg_0] +
mov ecx [ecx+8] +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
call sub_4A19EC  +
sub esp 1Ch +
call sub_4A19B9  +
call sub_4A19B9  +
call sub_4A19EC  +
push ecx  +
push [ebp+arg_C]  +
push esi  +
mov ecx [esi+1Ch] +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push ecx  +
mov edx [ebp+arg_0] +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
sub esp 1Ch +
push 0FFFFFFFFh  +
mov ecx [ecx] +
mov ecx [ecx+10h] +
call sub_4A19EC  +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
call sub_4A19EC  +
mov edx [ebp+arg_4] +
mov ecx [ebp+arg_0] +
call sub_482413  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 8  +
***
call sub_4A19B9  +
push esi  +
sub esp 18h +
push 0FFFFFFFFh  +
sub esp 1Ch +
push 0FFFFFFFFh  +
call sub_4A19B9  +
push ecx  +
push 0FFFFFFFFh  +
call sub_4A19B9  +
push esi  +
and esp 0FFFFFFF8h +
push 0FFFFFFFFh  +
push esi  +
sub esp 71Ch +
sub esp 398h +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
sub esp 2Ch +
call sub_4A19B9  +
push esi  +
push esi  +
push ecx  +
push esi  +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
call sub_4A19B9  +
call sub_4A19EC  +
call sub_4A19EC  +
call sub_4A19B9  +
call sub_4A19B9  +
push 0FFFFFFFFh  +
push esi  +
call sub_4A19EC  +
and esp 0FFFFFFF8h +
push esi  +
push ecx  +
add ecx 0Ch +
call sub_4A19EC  +
test [ebp+arg_0] 1 +
call sub_4A19B9  +
call sub_4A19B9  +
push edi  +
call sub_4A1A22  +
call sub_48586B  +
mov ecx [ebp+arg_0] +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
call sub_4A19B9  +
call sub_4A19B9  +
call sub_4A19B9  +
push 0FFFFFFFFh  +
sub esp 80Ch +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push ecx  +
mov ecx [ebp+arg_C] +
mov edx [ebp+arg_18] +
mov eax [ebp+arg_4] +
lea ecx [esi+28h] +
call sub_4A19B9  +
push ecx  +
mov ecx [ebp+arg_18] +
mov eax [ebp+arg_4] +
call sub_4A19B9  +
push esi  +
push esi  +
push esi  +
call sub_4A19EC  +
push esi  +
sub esp 0Ch +
sub esp 28h +
cmp dword ptr [ecx+14h] 8 +
sub esp 390h +
sub esp 394h +
call sub_4A19EC  +
push esi  +
push esi  +
push esi  +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
cmp dword ptr [ecx+14h] 8 +
and esp 0FFFFFFF8h +
call sub_4A19EC  +
push esi  +
push esi  +
push ecx  +
push esi  +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
push 0FFFFFFFFh  +
call sub_4A19EC  +
call sub_4A19EC  +
call sub_4A19EC  +
mov eax 10394h +
call sub_4A19EC  +
push esi  +
and esp 0FFFFFFF8h +
push ecx  +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
push 0FFFFFFFFh  +
push [ebp+arg_8]  +
pop ebp  +
push esi  +
lea ecx [esi+20h] +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
call sub_4A19EC  +
sub esp 10h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
lea eax [ebp+var_10] +
push edi  +
push 4  +
pop ebx  +
push eax  +
lea eax [ebp+arg_0] +
mov [ebp+var_C] offset aError +
push eax  +
push ecx  +
mov edi 448h +
mov [ebp+var_8] esi +
push 32h  +
mov edx edi +
mov [ebp+var_4] bx +
mov ecx 1709420h +
mov [ebp+var_10] offset off_4AEF94 +
mov [ebp+arg_0] offset aFconnectionerr +
call sub_40BDEA  +
mov eax 803D0011h +
cmp esi eax +
jg loc_488638  +
jz loc_48869C  +
add eax 0FFFFFFF6h +
cmp esi eax +
jg loc_48861F  +
jz loc_48869C  +
mov eax 803D0002h +
cmp esi eax +
jg loc_4885F3  +
jz loc_48869C  +
cmp esi 80070057h +
jz loc_4886D3  +
cmp esi 800704CFh +
jz loc_4886D3  +
cmp esi 800B0109h +
jz loc_48869C  +
cmp esi 803D0000h +
jz loc_48869C  +
cmp esi 803D0001h +
jmp loc_488662  +
cmp esi 803D0003h +
jz loc_48869C  +
cmp esi 803D0004h +
jz loc_48869C  +
cmp esi 803D0005h +
jz loc_48869C  +
cmp esi 803D0006h +
jmp loc_488662  +
add esi 7FC2FFF8h +
cmp esi 8 +
ja loc_488664  +
movzx eax ds:byte_488718[esi] +
jmp ds:off_488710[eax*4]  +
mov eax 3D0000h +
cmp esi eax +
jg loc_48865C  +
jz loc_48869C  +
add esi 7FC2FFEEh +
cmp esi 11h +
ja loc_488664  +
movzx eax ds:byte_488730[esi] +
jmp ds:off_488724[eax*4]  +
cmp esi 3D0001h +
jz loc_48869C  +
lea eax [ebp+var_C] +
mov [ebp+var_C] offset off_4AEFB4 +
push eax  +
lea eax [ebp+arg_0] +
mov [ebp+var_8] offset aReturn +
push eax  +
push ecx  +
push 32h  +
mov edx edi +
mov byte ptr [ebp+var_4] 0 +
mov ecx 1709423h +
mov [ebp+var_2] bx +
mov [ebp+arg_0] offset aFconnectione_0 +
call sub_40BDEA  +
xor al al +
jmp loc_488709  +
lea eax [ebp+var_10] +
mov [ebp+var_10] offset off_4AEFA4 +
push eax  +
lea eax [ebp+arg_0] +
mov [ebp+var_C] offset aAssert +
push eax  +
push ecx  +
push 0Fh  +
mov edx edi +
mov [ebp+var_8] offset aUnexpectedSoap +
mov ecx 1709421h +
mov [ebp+var_4] bx +
mov [ebp+arg_0] offset aFconnectione_1 +
call sub_40BDEA  +
lea ecx [ebp+var_C] +
mov [ebp+var_C] offset off_4AEFB4 +
push ecx  +
lea ecx [ebp+arg_0] +
mov [ebp+var_8] offset aReturn +
push ecx  +
push ecx  +
push 32h  +
mov edx edi +
mov byte ptr [ebp+var_4] 1 +
mov ecx 1709422h +
mov [ebp+var_2] bx +
mov [ebp+arg_0] offset aFconnectione_2 +
call sub_40BDEA  +
mov al 1 +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
mov eax [ebp+arg_0] +
call sub_4A19EC  +
mov eax [ebp+arg_4] +
push ecx  +
call sub_4A19EC  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push ebx  +
mov eax [ebp+arg_0] +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
push 0FFFFFFFFh  +
call sub_4A19EC  +
call sub_4A19EC  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
mov eax [ecx] +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
sub esp 18h +
and esp 0FFFFFFF8h +
push 0FFFFFFFFh  +
sub esp 80h +
call sub_4A1A58  +
mov ecx [ebp-60h] +
push 0FFFFFFFFh  +
call sub_4A1A22  +
mov ecx [ebp-18h] +
call sub_4A19B9  +
sub esp 14h +
sub esp 1Ch +
call sub_4A19EC  +
push 0FFFFFFFFh  +
sub esp 18h +
push ecx  +
call sub_4A19EC  +
call sub_4A19EC  +
call sub_4A19EC  +
call sub_4A19EC  +
call sub_4A19EC  +
call sub_4A19EC  +
call sub_4A19EC  +
call sub_4A19EC  +
call sub_4A19EC  +
push esi  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
sub esp 10h +
push esi  +
push esi  +
mov eax [ebp+arg_0] +
push ecx  +
push 0FFFFFFFFh  +
lea ecx [esi+18h] +
cmp byte ptr [esi+30h] 0 +
call sub_4A19B9  +
call sub_4A19B9  +
call sub_4A0F21  +
mov edi [ebp-24h] +
test al al +
call sub_4A19EC  +
xor edx edx +
call sub_4A19EC  +
call sub_4A19EC  +
call sub_4A19EC  +
push 0FFFFFFFFh  +
sub esp 408h +
push 0FFFFFFFFh  +
call sub_4A19EC  +
push 0FFFFFFFFh  +
mov eax [ecx] +
mov eax [ecx] +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
mov ecx [esi+4] +
push 0FFFFFFFFh  +
lea ecx [esi+34h] +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push offset loc_4A97B1  +
mov eax large fs:0 +
push eax  +
sub esp 70h +
push esi  +
push edi  +
mov eax dword_508660 +
xor eax ebp +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov eax [ecx] +
lea edx [ebp+var_3C] +
push edx  +
call dword ptr [eax+64h]  +
and [ebp+var_2C] 0 +
mov esi ds:malloc +
push 28h  +
call esi  +
pop ecx  +
test eax eax +
jnz loc_48F6E1  +
call ds:?_Xbad_alloc@std@@YAXXZ  +
and [ebp+var_24] 0 +
push 14h  +
mov [eax] eax +
mov [eax+4] eax +
mov [eax+8] eax +
mov word ptr [eax+0Ch] 101h +
mov [ebp+var_30] eax +
call esi  +
pop ecx  +
test eax eax +
jz loc_48F6DB  +
and [ebp+var_1C] 0 +
push 14h  +
mov [eax] eax +
mov [eax+4] eax +
mov [eax+8] eax +
mov word ptr [eax+0Ch] 101h +
mov [ebp+var_28] eax +
call esi  +
pop ecx  +
test eax eax +
jz loc_48F6DB  +
mov [eax] eax +
lea ecx [ebp+var_30] +
mov [eax+4] eax +
lea edx [ebp+var_3C] +
mov [eax+8] eax +
mov word ptr [eax+0Ch] 101h +
mov [ebp+var_20] eax +
mov eax [ebp+var_30] +
mov byte ptr [ebp+var_10] 0 +
push [ebp+var_10]  +
mov byte ptr [ebp+var_14] 0 +
push [ebp+var_14]  +
push dword ptr [eax]  +
push ecx  +
lea ecx [ebp+var_18] +
call sub_49151D  +
mov eax large fs:2Ch +
mov ecx [eax] +
mov eax dword_50D214 +
cmp eax [ecx+8] +
jg loc_48F922  +
mov eax [ebp+var_28] +
lea ecx [ebp+var_7C] +
push [ebp+arg_4]  +
mov byte ptr [ebp+var_14] 0 +
mov eax [eax] +
mov [ebp+var_10] eax +
call sub_406AE8  +
push [ebp+arg_8]  +
lea ecx [ebp+var_64] +
call sub_464FAB  +
push [ebp+var_14]  +
mov edi [ebp+var_30] +
lea ecx [ebp+var_7C] +
sub esp 20h +
mov eax esp +
mov [ebp+var_14] eax +
mov esi [edi] +
push ecx  +
mov ecx eax +
call sub_406AE8  +
mov ecx [ebp+var_14] +
lea eax [ebp+var_64] +
push eax  +
lea ecx [ecx+18h] +
call sub_464FAB  +
push [ebp+var_10]  +
lea eax [ebp+var_28] +
push eax  +
push edi  +
push esi  +
lea ecx [ebp+var_18] +
call sub_49193E  +
lea ecx [ebp+var_64] +
call sub_4067D3  +
lea ecx [ebp+var_7C] +
call sub_406DE4  +
mov eax [ebp+var_20] +
lea ecx [ebp+var_7C] +
push [ebp+arg_4]  +
mov byte ptr [ebp+var_14] 0 +
mov eax [eax] +
mov [ebp+var_10] eax +
call sub_406AE8  +
push [ebp+arg_8]  +
lea ecx [ebp+var_64] +
call sub_464FAB  +
push [ebp+var_14]  +
mov edi [ebp+var_30] +
lea ecx [ebp+var_7C] +
sub esp 20h +
mov eax esp +
mov [ebp+arg_4] eax +
mov esi [edi] +
push ecx  +
mov ecx eax +
call sub_406AE8  +
mov ecx [ebp+arg_4] +
lea eax [ebp+var_64] +
push eax  +
add ecx 18h +
call sub_464FAB  +
push [ebp+var_10]  +
lea eax [ebp+var_20] +
push eax  +
push edi  +
push esi  +
lea ecx [ebp+var_18] +
call sub_4919C2  +
lea ecx [ebp+var_64] +
call sub_4067D3  +
lea ecx [ebp+var_7C] +
call sub_406DE4  +
mov eax [ebp+var_24] +
mov ecx offset off_4AEFEC +
push 4  +
pop edx  +
mov [ebp+var_4C] ecx +
mov [ebp+var_48] offset aInstalledappsc +
mov [ebp+var_44] eax +
mov [ebp+var_40] dx +
mov [ebp+var_5C] ecx +
mov eax [ebp+var_1C] +
mov [ebp+var_54] eax +
lea eax [ebp+var_4C] +
push eax  +
lea eax [ebp+var_5C] +
mov [ebp+var_50] dx +
push eax  +
lea eax [ebp+arg_4] +
mov [ebp+var_58] offset aUninstalledapp +
push eax  +
push ecx  +
push ecx  +
push 2Dh  +
pop edx  +
mov ecx 1709453h +
mov [ebp+arg_4] offset aGetlicensedapp +
call sub_40BE3C  +
mov edi [ebp+arg_0] +
lea eax [ebp+var_28] +
push eax  +
mov ecx edi +
call sub_45D36A  +
and dword ptr [edi+8] 0 +
and dword ptr [edi+0Ch] 0 +
call sub_459AE8  +
mov [edi+8] eax +
lea ecx [edi+10h] +
lea eax [ebp+var_20] +
push eax  +
call sub_45D36A  +
mov eax [ebp+var_20] +
push dword ptr [eax+4]  +
lea eax [ebp+var_20] +
push eax  +
mov ecx eax +
call sub_43924C  +
push [ebp+var_20]  +
mov esi ds:free +
call esi  +
mov eax [ebp+var_28] +
pop ecx  +
push dword ptr [eax+4]  +
lea eax [ebp+var_28] +
push eax  +
mov ecx eax +
call sub_43924C  +
push [ebp+var_28]  +
call esi  +
mov eax [ebp+var_30] +
pop ecx  +
push dword ptr [eax+4]  +
lea eax [ebp+var_30] +
push eax  +
mov ecx eax +
call sub_407FA7  +
push [ebp+var_30]  +
call esi  +
pop ecx  +
lea ecx [ebp+var_3C] +
call sub_41A0AF  +
mov eax edi +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
mov edi offset dword_50D214 +
push edi  +
call sub_4A00F4  +
cmp dword_50D214 0FFFFFFFFh +
pop ecx  +
jnz loc_48F766  +
push offset aAccess  +
mov ecx offset unk_50A280 +
call sub_4068D1  +
and dword_50A29C 0 +
mov ecx offset dword_50A29C +
and dword_50A2AC 0 +
push 7  +
pop esi  +
push offset aExcel  +
mov dword_50A298 108h +
mov dword_50A2B0 esi +
call sub_4068D1  +
and dword_50A2B8 0 +
mov ecx offset dword_50A2B8 +
and dword_50A2C8 0 +
push offset aOutlook  +
mov dword_50A2B4 107h +
mov dword_50A2CC esi +
call sub_4068D1  +
and dword_50A2D4 0 +
mov ecx offset dword_50A2D4 +
and dword_50A2E4 0 +
push offset aPublisher  +
mov dword_50A2D0 1851h +
mov dword_50A2E8 esi +
call sub_4068D1  +
and dword_50A2F0 0 +
mov ecx offset dword_50A2F0 +
and dword_50A300 0 +
push offset aWord  +
mov dword_50A2EC 10Ch +
mov dword_50A304 esi +
call sub_4068D1  +
and dword_50A30C 0 +
mov ecx offset dword_50A30C +
and dword_50A31C 0 +
push offset aVisio  +
mov dword_50A308 2Ah +
mov dword_50A320 esi +
call sub_4068D1  +
and dword_50A328 0 +
mov ecx offset dword_50A328 +
and dword_50A338 0 +
push offset aSkypeforbusine  +
mov dword_50A324 1BA4h +
mov dword_50A33C esi +
call sub_4068D1  +
and dword_50A344 0 +
mov ecx offset dword_50A344 +
and dword_50A354 0 +
push offset aProject  +
mov dword_50A340 5EA1h +
mov dword_50A358 esi +
call sub_4068D1  +
and dword_50A360 0 +
mov ecx offset dword_50A360 +
and dword_50A370 0 +
push offset aPowerpoint  +
mov dword_50A35C 10Dh +
mov dword_50A374 esi +
call sub_4068D1  +
push offset loc_4AAF17  +
mov dword_50A378 10Bh +
call sub_4A070F  +
push edi  +
call sub_4A00B0  +
pop ecx  +
pop ecx  +
jmp loc_48F766  +
***
lea ecx [esi+10h] +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push [ebp+arg_4]  +
push 0FFFFFFFFh  +
mov eax [ecx] +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push [ebp+arg_24]  +
push 0FFFFFFFFh  +
push ecx  +
mov edx [ebp+arg_18] +
mov eax [ebp+arg_4] +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
mov edi ecx +
cmp edi ebx +
jz loc_490D81  +
push esi  +
lea ecx [edi+10h] +
call sub_41344D  +
push ebx  +
mov ecx edi +
call ds:?swap@?$basic_istream@_WU?$char_traits@_W@std@@@std@@IAEXAAV12@@Z  +
lea eax [ebx+10h] +
push eax  +
lea ecx [edi+10h] +
call sub_490DC4  +
pop esi  +
mov eax edi +
pop edi  +
pop ebx  +
pop ebp  +
retn 4  +
***
push esi  +
sub esp 2Ch +
push ecx  +
push ecx  +
sub esp 28h +
push ecx  +
push 0FFFFFFFFh  +
push esi  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
sub esp 0Ch +
sub esp 10h +
sub esp 0Ch +
call sub_4A19EC  +
mov edx [ebp+arg_0] +
mov eax [ebp+arg_0] +
sub esp 38h +
mov ecx [ebp+arg_0] +
mov ecx [ebp+arg_0] +
mov ecx [ebp+arg_0] +
push ecx  +
cmp dword ptr [ecx] 0 +
push esi  +
mov eax ecx +
and esp 0FFFFFFF8h +
sub esp 10h +
cmp dword ptr [ecx+4] 8 +
call sub_4A19B9  +
call sub_4A19B9  +
call sub_4A19EC  +
sub esp 1Ch +
sub esp 1Ch +
push ebx  +
mov eax [ebp+arg_4] +
push ecx  +
push ecx  +
sub esp 24h +
sub esp 24h +
mov edx ecx +
push esi  +
sub esp 10h +
sub esp 10h +
sub esp 1Ch +
and esp 0FFFFFFF8h +
mov ecx [ebp+arg_4] +
call sub_4A19B9  +
sub esp 10h +
sub esp 10h +
push esi  +
push esi  +
push esi  +
mov ecx [esi+10h] +
call sub_4A19EC  +
call sub_4A19EC  +
call sub_4A19EC  +
call sub_4A19EC  +
push 0FFFFFFFFh  +
call sub_4A19EC  +
call sub_4A19EC  +
call sub_4A19EC  +
call sub_4A19EC  +
call sub_4A19EC  +
push 0FFFFFFFFh  +
sub esp 14h +
sub esp 14h +
sub esp 14h +
sub esp 20Ch +
push 0FFFFFFFFh  +
lea eax [ebp+arg_C] +
sub esp 24h +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_0] +
sub esp 328h +
mov eax large fs:2Ch +
sub esp 74h +
push ebx  +
mov eax dword_50CBB0 +
push 0FFFFFFFFh  +
sub esp 64h +
and esp 0FFFFFFF8h +
push esi  +
push edi  +
mov edi edx +
mov esi ecx +
call sub_495399  +
test al al +
jz loc_4958C6  +
mov edx [ebp+arg_1C] +
mov ecx esi +
call sub_4957B3  +
jmp loc_4958E9  +
push [ebp+arg_1C]  +
mov edx edi +
push ecx  +
push ecx  +
push [ebp+pihlbc]  +
mov ecx esi +
push [ebp+pibsc]  +
push [ebp+pibc]  +
push [ebp+grfHLNF]  +
push [ebp+pihlframe]  +
push [ebp+dwSiteData]  +
push [ebp+pihlsite]  +
call sub_49571A  +
pop edi  +
pop esi  +
mov esp ebp +
pop ebp  +
retn 20h  +
***
push ebx  +
push ecx  +
mov edx [ebp+arg_8] +
mov edx [ebp+arg_8] +
push ebx  +
mov eax [ebp+arg_10] +
mov eax [ebp+arg_8] +
mov edx [ebp+arg_8] +
cmp dword ptr [ecx+14h] 0 +
push esi  +
cmp dword ptr [ecx+18h] 0 +
mov dword ptr [ecx] 1 +
mov dword ptr [ecx+4] 1 +
mov dword ptr [ecx+14h] 1 +
mov dword ptr [ecx+18h] 1 +
mov eax [ebp+arg_8] +
mov eax [ebp+arg_8] +
push ebx  +
movzx eax [ebp+arg_C] +
mov edx [ebp+arg_8] +
mov edx [ebp+arg_8] +
push esi  +
mov edx [ebp+arg_8] +
mov edx [ebp+arg_8] +
push ecx  +
and esp 0FFFFFFF8h +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
call sub_4A19EC  +
call sub_4A19EC  +
call sub_4A19EC  +
call sub_4A19EC  +
mov edx [ebp+8] +
mov eax [ebp+14h] +
mov edi [ebp+0Ch] +
mov ebx [ebp+10h] +
cmp dword ptr [edx+14h] 8 +
mov [ebp-9Ch] eax +
mov eax [edx+10h] +
jb loc_496626  +
mov edx [edx] +
push eax  +
lea ecx [ebp-98h] +
call sub_4112DD  +
and dword ptr [ebp-4] 0 +
mov esi [ebp-98h] +
mov ecx esi +
mov eax [esi] +
call dword ptr [eax+8]  +
lea ecx [ebp-94h] +
cmp eax 1 +
jz loc_496657  +
mov edx eax +
call sub_49697E  +
jmp loc_496660  +
xor edx edx +
push esi  +
inc edx  +
call sub_4969C3  +
mov byte ptr [ebp-4] 1 +
cmp dword ptr [ebp-94h] 0 +
jz loc_496672  +
push 9  +
pop edi  +
jmp loc_4966EC  +
lea eax [ebp-70h] +
push eax  +
lea ecx [ebp-28h] +
call sub_406AE8  +
mov byte ptr [ebp-4] 2 +
cmp dword ptr [ebp-18h] 0 +
jz loc_4966DC  +
test edi edi +
jz loc_496691  +
mov eax [ebp-74h] +
mov [edi] eax +
mov ecx [ebp-9Ch] +
lea eax [ebp-58h] +
push eax  +
call sub_406A2B  +
lea eax [ebp-8Ch] +
mov ecx ebx +
push eax  +
call sub_406A2B  +
cmp dword ptr [ebp-14h] 8 +
lea ebx [ebp-28h] +
mov edi offset off_4F67F0 +
cmovnb ebx [ebp-28h] +
push ebx  +
push dword ptr [edi]  +
call sub_47349A  +
test al al +
mov eax offset aSclcacheover_0 +
jnz loc_4966D8  +
add edi 8 +
cmp edi eax +
jnz loc_4966BE  +
mov edi eax +
cmp edi eax +
jnz loc_4966E1  +
push 9  +
pop edi  +
jmp loc_4966E4  +
mov edi [edi+4] +
lea ecx [ebp-28h] +
call sub_406DE4  +
lea ecx [ebp-40h] +
call sub_406DE4  +
lea ecx [ebp-8Ch] +
call sub_49672F  +
mov edx [esi] +
mov ecx esi +
call dword ptr [edx+4]  +
mov eax edi +
call sub_4A19A1  +
retn 10h  +
***
push esi  +
lea esi [ecx+8] +
lea ecx [esi+4Ch] +
call sub_406DE4  +
mov ecx esi +
pop esi  +
jmp sub_49672F  +
***
lea ecx [esi+34h] +
sub esp 4Ch +
push 0FFFFFFFFh  +
sub esp 68h +
sub esp 80h +
mov eax [ebp+arg_0] +
sub esp 80h +
call sub_4A19EC  +
mov esi ecx +
call sub_4A19EC  +
call sub_4A19EC  +
push ecx  +
call sub_4A1A22  +
call loc_496E81  +
add ecx 10h +
mov ecx [esi+10h] +
sub esp 394h +
sub esp 394h +
sub esp 398h +
push ecx  +
and esp 0FFFFFFF8h +
sub esp 394h +
call sub_4A19B9  +
push 0FFFFFFFFh  +
call sub_4A1A58  +
mov ecx [ebp-15Ch] +
sub esp 14h +
push 0FFFFFFFFh  +
mov al [ecx+98h] +
push 0FFFFFFFFh  +
sub esp 10h +
push ecx  +
sub esp 10h +
sub esp 10h +
sub esp 0Ch +
sub esp 1Ch +
sub esp 28h +
sub esp 14h +
call sub_4A19EC  +
call sub_4A19EC  +
call sub_4A1A58  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
call sub_4A19B9  +
call sub_4A19EC  +
call sub_4A19EC  +
sub esp 2Ch +
sub esp 44h +
call sub_4A19EC  +
sub esp 44h +
call sub_4A19EC  +
push ecx  +
call sub_4A19EC  +
sub esp 10h +
push ecx  +
push 0FFFFFFFFh  +
call sub_4A1A58  +
mov ecx [ebp-60h] +
push 0FFFFFFFFh  +
push ecx  +
push edi  +
call sub_4A1A22  +
mov ecx [ebp-18h] +
sub esp 14h +
int 3  +
***
sub esp 14h +
sub esp 18h +
sub esp 18h +
sub esp 0Ch +
sub esp 14h +
push ecx  +
sub esp 1Ch +
sub esp 18h +
sub esp 14h +
call sub_4A1A22  +
mov [ebp-18h] edx +
mov esi ecx +
mov [ebp-1Ch] esi +
mov eax [esi] +
xor edi edi +
xor bl bl +
mov [ebp-20h] edi +
mov [ebp-11h] bl +
mov [ebp-28h] esi +
mov eax [eax+4] +
mov ecx [eax+esi+38h] +
test ecx ecx +
jz loc_49C2E8  +
mov eax [ecx] +
call dword ptr [eax+4]  +
and dword ptr [ebp-4] 0 +
mov ecx esi +
push 1  +
call ds:?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z  +
mov [ebp-24h] al +
mov dword ptr [ebp-4] 1 +
test al al +
jz loc_49C3AE  +
mov ecx [ebp-18h] +
push 0  +
mov byte ptr [ebp-4] 2 +
call sub_45DC68  +
mov eax [esi] +
mov eax [eax+4] +
mov ecx [eax+esi+38h] +
call ds:?sgetc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEGXZ  +
movzx eax ax +
mov ecx 0FFFFh +
cmp cx ax +
jnz loc_49C337  +
xor edi edi +
inc edi  +
jmp loc_49C3A3  +
cmp ax 5Fh +
jnz loc_49C353  +
mov eax [esi] +
mov bl 1 +
mov [ebp-11h] bl +
mov eax [eax+4] +
mov ecx [eax+esi+38h] +
call ds:?sbumpc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEGXZ  +
jmp loc_49C3A3  +
mov ecx [ebp-18h] +
cmp dword ptr [ecx+10h] 7FFFFFFEh +
jb loc_49C364  +
push 2  +
pop edi  +
jmp loc_49C3A3  +
push eax  +
call sub_40E971  +
mov eax [esi] +
mov bl 1 +
mov [ebp-11h] bl +
mov eax [eax+4] +
mov ecx [eax+esi+38h] +
call ds:?snextc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEGXZ  +
jmp loc_49C325  +
mov edx [ebp-1Ch] +
push 1  +
push 4  +
mov eax [edx] +
mov ecx [eax+4] +
add ecx edx +
call ds:?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z  +
mov eax offset loc_49C39A +
retn   +
mov esi [ebp-1Ch] +
mov edi [ebp-20h] +
mov bl [ebp-11h] +
mov dword ptr [ebp-4] 1 +
test bl bl +
jnz loc_49C3B1  +
or edi 2 +
mov eax [esi] +
push 0  +
push edi  +
mov ecx [eax+4] +
add ecx esi +
call ds:?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z  +
mov dword ptr [ebp-4] 4 +
mov ecx [ebp-28h] +
mov eax [ecx] +
mov eax [eax+4] +
mov ecx [eax+ecx+38h] +
test ecx ecx +
jz loc_49C3DD  +
mov eax [ecx] +
call dword ptr [eax+8]  +
mov eax esi +
call sub_4A198D  +
retn 4  +
***
push ecx  +
push [ebp+arg_8]  +
mov ecx [ebp+arg_0] +
lea eax [ecx+20h] +
push 0FFFFFFFFh  +
lea eax [ecx+38h] +
push 0FFFFFFFFh  +
lea eax [ecx+50h] +
mov al [ebp+arg_0] +
mov al [ecx+361h] +
mov al [ebp+arg_0] +
push 0FFFFFFFFh  +
push esi  +
push edi  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
call sub_4A19EC  +
call sub_4A19EC  +
and dword ptr [ecx+4] 0 +
call sub_4A19EC  +
call sub_4A19EC  +
sub esp 390h +
retn   +
***
push [ebp+arg_14]  +
sub esp 390h +
pop ebp  +
push [ebp+arg_0]  +
mov edx [ebp+arg_4] +
pop ebp  +
mov edx [ebp+arg_0] +
mov edx [ebp+arg_4] +
push [ebp+arg_8]  +
mov ecx [ebp+arg_0] +
mov ecx [ebp+arg_0] +
call sub_4A19EC  +
call sub_4A19EC  +
call sub_4A19EC  +
push 0FFFFFFFFh  +
call sub_4A19EC  +
call sub_4A1A58  +
call sub_4A19B9  +
push 0FFFFFFFFh  +
call sub_4A19EC  +
call sub_4A19EC  +
call sub_4A19EC  +
sub esp 80h +
mov ecx [ebp+arg_0] +
cmp [ebp+arg_0] 0 +
and esp 0FFFFFFF8h +
call sub_49E826  +
mov esi ecx +
xor edi edi +
push 18h  +
push edi  +
lea eax [esi+14h] +
push eax  +
call j_memset  +
add esp 0Ch +
mov [esi+2Ch] edi +
mov [esi+30h] edi +
mov eax esi +
mov [esi+34h] edi +
pop edi  +
pop esi  +
retn   +
***
mov edx [ebp+arg_0] +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+14h] +
push edi  +
call ds:EnterCriticalSection  +
mov eax [ebp+arg_0] +
cmp eax [esi+30h] +
jg loc_49E8B5  +
test eax eax +
js loc_49E8B5  +
cmp eax [esi+30h] +
jnz loc_49E8A8  +
mov esi [esi+8] +
jmp loc_49E8B7  +
push eax  +
lea ecx [esi+2Ch] +
call sub_49E85C  +
mov esi [eax] +
jmp loc_49E8B7  +
xor esi esi +
push edi  +
call ds:LeaveCriticalSection  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push 0  +
push 0  +
push [ebp+dwExceptionFlags]  +
push [ebp+dwExceptionCode]  +
call ds:RaiseException  +
pop ebp  +
retn   +
***
mov eax offset CertDuplicateCertificateContext +
jmp $+2  +
push ecx  +
push edx  +
push eax  +
push offset CRYPT32_dll_import_table  +
call sub_4A165E  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov eax offset CertFreeCertificateContext +
jmp loc_49E8FF  +
***
mov eax offset CertCreateCertificateContext +
jmp loc_49E8FF  +
***
mov eax offset CertVerifyTimeValidity +
jmp loc_49E8FF  +
***
mov eax offset CryptVerifyCertificateSignatureEx +
jmp loc_49E8FF  +
***
mov eax offset CryptStringToBinaryW +
jmp loc_49E8FF  +
***
mov eax offset CryptImportPublicKeyInfo +
jmp loc_49E8FF  +
***
mov eax offset CryptBinaryToStringW +
jmp loc_49E8FF  +
***
mov eax offset MsiLocateComponentW +
jmp $+2  +
push ecx  +
push edx  +
push eax  +
push offset msi_dll_import_table  +
call sub_4A165E  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov eax offset MsiGetComponentPathW +
jmp loc_49E948  +
***
mov eax offset MsiProvideQualifiedComponentExW +
jmp loc_49E948  +
***
mov eax offset MsiEnumProductsW +
jmp loc_49E948  +
***
mov eax offset MsiEnumComponentQualifiersW +
jmp loc_49E948  +
***
mov eax offset SysFreeString +
jmp $+2  +
push ecx  +
push edx  +
push eax  +
push offset OLEAUT32_dll_import_table  +
call sub_4A165E  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov eax offset VariantClear +
jmp loc_49E97C  +
***
mov eax offset SysAllocStringLen +
jmp loc_49E97C  +
***
mov eax offset SysStringLen +
jmp loc_49E97C  +
***
mov eax offset SysAllocString +
jmp loc_49E97C  +
***
mov eax offset SysStringByteLen +
jmp loc_49E97C  +
***
mov eax offset VariantInit +
jmp loc_49E97C  +
***
mov eax offset SystemTimeToVariantTime +
jmp loc_49E97C  +
***
mov eax offset SafeArrayCreateVector +
jmp loc_49E97C  +
***
mov eax offset SafeArrayLock +
jmp loc_49E97C  +
***
mov eax offset SafeArrayUnlock +
jmp loc_49E97C  +
***
mov eax offset SafeArrayDestroy +
jmp loc_49E97C  +
***
mov eax offset WindowsDeleteString +
jmp $+2  +
push ecx  +
push edx  +
push eax  +
push offset dword_503F74  +
call sub_4A165E  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov eax offset WindowsGetStringRawBuffer +
jmp loc_49E9E1  +
***
mov eax offset WindowsCreateStringReference +
jmp loc_49E9E1  +
***
mov eax offset RoGetActivationFactory +
jmp $+2  +
push ecx  +
push edx  +
push eax  +
push offset dword_503F94  +
call sub_4A165E  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov eax offset SHGetSpecialFolderPathW +
jmp $+2  +
push ecx  +
push edx  +
push eax  +
push offset SHELL32_dll_import_table  +
call sub_4A165E  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov eax offset SHGetKnownFolderPath +
jmp loc_49EA1F  +
***
mov eax offset SLIsGenuineLocal +
jmp $+2  +
push ecx  +
push edx  +
push eax  +
push offset SLWGA_dll_import_table  +
call sub_4A165E  +
pop edx  +
pop ecx  +
jmp eax  +
***
push ecx  +
push edx  +
push eax  +
push offset USER32_dll_import_table  +
call sub_4A165E  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov eax offset AllowSetForegroundWindow +
jmp loc_49EA4F  +
***
mov eax offset GetSystemMetrics +
jmp loc_49EA4F  +
***
mov eax offset WsFileTimeToDateTime +
jmp $+2  +
push ecx  +
push edx  +
push eax  +
push offset webservices_dll_import_table  +
call sub_4A165E  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov eax offset WsDateTimeToFileTime +
jmp loc_49EA75  +
***
mov eax offset WsCall +
jmp loc_49EA75  +
***
mov eax offset WsAddCustomHeader +
jmp loc_49EA75  +
***
mov eax offset WsGetFaultErrorDetail +
jmp loc_49EA75  +
***
mov eax offset WsResetError +
jmp loc_49EA75  +
***
mov eax offset WsGetErrorProperty +
jmp loc_49EA75  +
***
mov eax offset WsGetErrorString +
jmp loc_49EA75  +
***
mov eax offset WsSetInput +
jmp loc_49EA75  +
***
mov eax offset WsSetInputToBuffer +
jmp loc_49EA75  +
***
mov eax offset WsFillReader +
jmp loc_49EA75  +
***
mov eax offset WsReadToStartElement +
jmp loc_49EA75  +
***
mov eax offset WsReadStartElement +
jmp loc_49EA75  +
***
mov eax offset WsReadType +
jmp loc_49EA75  +
***
mov eax offset WsCreateError +
jmp loc_49EA75  +
***
mov eax offset WsCreateHeap +
jmp loc_49EA75  +
***
mov eax offset WsFreeError +
jmp loc_49EA75  +
***
mov eax offset WsFreeReader +
jmp loc_49EA75  +
***
mov eax offset WsFreeHeap +
jmp loc_49EA75  +
***
mov eax offset WsFreeWriter +
jmp loc_49EA75  +
***
mov eax offset WsCreateReader +
jmp loc_49EA75  +
***
mov eax offset WsCreateWriter +
jmp loc_49EA75  +
***
mov eax offset WsGetMappedHeader +
jmp loc_49EA75  +
***
mov eax offset WsAddMappedHeader +
jmp loc_49EA75  +
***
mov eax offset WsReadChars +
jmp loc_49EA75  +
***
mov eax offset WsFindAttribute +
jmp loc_49EA75  +
***
mov eax offset WsReadStartAttribute +
jmp loc_49EA75  +
***
mov eax offset WsReadEndAttribute +
jmp loc_49EA75  +
***
mov eax offset WsFreeServiceProxy +
jmp loc_49EA75  +
***
mov eax offset WsCloseServiceProxy +
jmp loc_49EA75  +
***
mov eax offset WsAbortServiceProxy +
jmp loc_49EA75  +
***
mov eax offset WsCreateServiceProxy +
jmp loc_49EA75  +
***
mov eax offset WsOpenServiceProxy +
jmp loc_49EA75  +
***
mov eax offset WinHttpGetIEProxyConfigForCurrentUser +
jmp $+2  +
push ecx  +
push edx  +
push eax  +
push offset WINHTTP_dll_import_table  +
call sub_4A165E  +
pop edx  +
pop ecx  +
jmp eax  +
***
push 0FFFFFFFFh  +
mov ecx [ebp+arg_0] +
xor eax eax +
cmp ecx 3Fh +
jg loc_49EC98  +
jz loc_49EC94  +
cmp ecx 15h +
ja loc_49ECA1  +
jmp ds:off_49ECA5[ecx*4]  +
push 2  +
pop eax  +
jmp loc_49ECA1  +
push 3  +
jmp loc_49EC48  +
push 4  +
jmp loc_49EC48  +
push 5  +
jmp loc_49EC48  +
push 6  +
jmp loc_49EC48  +
xor eax eax +
inc eax  +
jmp loc_49ECA1  +
push 7  +
jmp loc_49EC48  +
push 8  +
jmp loc_49EC48  +
push 9  +
jmp loc_49EC48  +
push 0Ah  +
jmp loc_49EC48  +
push 0Bh  +
jmp loc_49EC48  +
push 0Ch  +
jmp loc_49EC48  +
push 0Dh  +
jmp loc_49EC48  +
push 0Eh  +
jmp loc_49EC48  +
push 0Fh  +
jmp loc_49EC48  +
push 10h  +
jmp loc_49EC48  +
push 11h  +
jmp loc_49EC48  +
push 12h  +
jmp loc_49EC48  +
push 13h  +
jmp loc_49EC48  +
push 17h  +
jmp loc_49EC48  +
push 18h  +
cmp ecx 40h +
pop edx  +
cmovz eax edx +
pop ebp  +
retn 4  +
***
mov ecx offset dword_50B240 +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
sub esp 418h +
mov eax dword_508660 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+lpLibFileName] +
push esi  +
xor esi esi +
test eax eax +
jz loc_49EFE0  +
push esi  +
push esi  +
push eax  +
call sub_401D2D  +
test eax eax +
setnz al  +
jmp loc_49F0BE  +
push ebx  +
xor eax eax +
mov [ebp+pcchPathBuf] 104h +
mov [ebp+LibFileName] ax +
mov ebx offset szCategory +
lea eax [ebp+pcchPathBuf] +
push eax  +
lea eax [ebp+LibFileName] +
push eax  +
push esi  +
push offset szQualifier  +
push ebx  +
call MsiProvideQualifiedComponentW  +
cmp eax 64Bh +
jz loc_49F035  +
cmp [ebp+LibFileName] si +
jz loc_49F087  +
push esi  +
push esi  +
lea eax [ebp+LibFileName] +
push eax  +
call sub_401D2D  +
test eax eax +
jz loc_49F087  +
xor eax eax +
mov [ebp+pcchPathBuf] 104h +
mov word ptr [ebp+var_414] ax +
lea eax [ebp+pcchPathBuf] +
push eax  +
lea eax [ebp+var_414] +
push eax  +
push esi  +
push offset aCsi_dll_x86  +
push ebx  +
call MsiProvideQualifiedComponentW  +
cmp eax 64Bh +
jz loc_49F087  +
cmp word ptr [ebp+var_414] si +
jz loc_49F087  +
push esi  +
push esi  +
lea eax [ebp+var_414] +
push eax  +
call sub_401D2D  +
test eax eax +
setnz al  +
jmp loc_49F0BD  +
push esi  +
push esi  +
push offset aMso20win32cl_2  +
call sub_401D2D  +
test eax eax +
jz loc_49F0BB  +
push esi  +
push esi  +
push offset aMso30win32cl_0  +
call sub_401D2D  +
test eax eax +
jz loc_49F0BB  +
push esi  +
push esi  +
push offset aCsi_dll_0  +
call sub_401D2D  +
test eax eax +
jz loc_49F0BB  +
mov al 1 +
jmp loc_49F0BD  +
xor al al +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_49FFB8  +
leave   +
retn 4  +
***
mov eax offset Mso30Win32Client_2325 +
jmp $+2  +
push ecx  +
push edx  +
push eax  +
push offset Mso30Win32Client_dll_import_table  +
call sub_4A165E  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov eax offset Mso30Win32Client_1995 +
jmp loc_49F0D4  +
***
mov eax offset Mso30Win32Client_2259 +
jmp loc_49F0D4  +
***
mov eax offset Mso30Win32Client_1909 +
jmp loc_49F0D4  +
***
mov eax offset Mso30Win32Client_2080 +
jmp loc_49F0D4  +
***
mov eax offset Mso30Win32Client_2075 +
jmp loc_49F0D4  +
***
mov eax offset Mso30Win32Client_4303 +
jmp loc_49F0D4  +
***
mov eax offset __imp_Mso30Win32Client_4037 +
jmp loc_49F0D4  +
***
mov eax offset Mso30Win32Client_4090 +
jmp loc_49F0D4  +
***
mov eax offset Mso30Win32Client_4294 +
jmp loc_49F0D4  +
***
mov eax offset Mso30Win32Client_2079 +
jmp loc_49F0D4  +
***
mov eax offset __imp_Mso30Win32Client_4119 +
jmp loc_49F0D4  +
***
mov eax offset __imp_Mso30Win32Client_4141 +
jmp loc_49F0D4  +
***
mov eax offset Mso30Win32Client_612 +
jmp loc_49F0D4  +
***
mov eax offset Mso30Win32Client_1954 +
jmp loc_49F0D4  +
***
mov eax offset Mso30Win32Client_1840 +
jmp loc_49F0D4  +
***
mov eax offset Mso30Win32Client_4084 +
jmp loc_49F0D4  +
***
mov eax offset Mso30Win32Client_1022 +
jmp loc_49F0D4  +
***
mov eax offset Mso30Win32Client_544 +
jmp loc_49F0D4  +
***
mov eax offset Mso30Win32Client_1092 +
jmp loc_49F0D4  +
***
mov eax offset Mso30Win32Client_2812 +
jmp loc_49F0D4  +
***
mov eax offset Mso30Win32Client_2807 +
jmp loc_49F0D4  +
***
mov eax offset Mso30Win32Client_4033 +
jmp loc_49F0D4  +
***
mov eax offset Mso30Win32Client_3995 +
jmp loc_49F0D4  +
***
mov eax offset Mso30Win32Client_4030 +
jmp loc_49F0D4  +
***
mov eax offset Mso30Win32Client_2356 +
jmp loc_49F0D4  +
***
mov eax offset Mso30Win32Client_3999 +
jmp loc_49F0D4  +
***
mov eax offset Mso30Win32Client_304 +
jmp loc_49F0D4  +
***
mov eax offset Mso30Win32Client_1559 +
jmp loc_49F0D4  +
***
mov eax offset Mso30Win32Client_248 +
jmp loc_49F0D4  +
***
mov eax offset Mso30Win32Client_674 +
jmp loc_49F0D4  +
***
mov eax offset Mso30Win32Client_4188 +
jmp loc_49F0D4  +
***
mov eax offset Mso30Win32Client_24 +
jmp loc_49F0D4  +
***
mov eax offset Mso30Win32Client_26 +
jmp loc_49F0D4  +
***
mov eax offset Mso30Win32Client_2216 +
jmp loc_49F0D4  +
***
mov eax offset Mso30Win32Client_3990 +
jmp loc_49F0D4  +
***
mov eax offset Mso30Win32Client_432 +
jmp loc_49F0D4  +
***
mov eax offset Mso30Win32Client_2558 +
jmp loc_49F0D4  +
***
mov eax offset Mso30Win32Client_3997 +
jmp loc_49F0D4  +
***
mov eax offset Mso30Win32Client_3996 +
jmp loc_49F0D4  +
***
mov eax offset Mso30Win32Client_4026 +
jmp loc_49F0D4  +
***
mov eax offset Mso30Win32Client_4027 +
jmp loc_49F0D4  +
***
mov eax offset Mso30Win32Client_3998 +
jmp loc_49F0D4  +
***
mov eax offset Mso30Win32Client_649 +
jmp loc_49F0D4  +
***
mov eax offset Mso30Win32Client_2205 +
jmp loc_49F0D4  +
***
mov eax offset Mso30Win32Client_1730 +
jmp loc_49F0D4  +
***
mov eax offset Mso30Win32Client_1529 +
jmp loc_49F0D4  +
***
mov eax offset Mso30Win32Client_32 +
jmp loc_49F0D4  +
***
mov eax offset Mso30Win32Client_371 +
jmp loc_49F0D4  +
***
mov eax offset Mso30Win32Client_128 +
jmp loc_49F0D4  +
***
mov eax offset Mso30Win32Client_732 +
jmp loc_49F0D4  +
***
mov eax offset Mso30Win32Client_1918 +
jmp loc_49F0D4  +
***
mov eax offset Mso30Win32Client_1450 +
jmp loc_49F0D4  +
***
mov eax offset Mso30Win32Client_723 +
jmp loc_49F0D4  +
***
mov eax offset Mso30Win32Client_2806 +
jmp loc_49F0D4  +
***
mov eax offset Mso30Win32Client_1702 +
jmp loc_49F0D4  +
***
mov eax offset Mso30Win32Client_2219 +
jmp loc_49F0D4  +
***
mov eax offset __imp_Mso30Win32Client_4083 +
jmp loc_49F0D4  +
***
mov eax offset Mso20Win32Client_3572 +
jmp $+2  +
push ecx  +
push edx  +
push eax  +
push offset Mso20Win32Client_dll_import_table  +
call sub_4A165E  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov eax offset Mso20Win32Client_579 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1743 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_177 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_151 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1620 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_3598 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_3604 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_2257 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1935 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_291 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_3588 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_688 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_2085 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1579 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_3953 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_3948 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_3951 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_3968 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_3788 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_653 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_2055 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_665 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1022 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1360 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_68 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_4249 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_457 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1193 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_984 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_2329 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_4191 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_4282 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_3525 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_600 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_2295 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_384 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_56 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1854 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_4035 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_3846 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_867 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_218 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1624 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_3791 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1828 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_3819 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_302 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_799 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_285 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_4178 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_2736 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_111 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_3830 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_3831 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_4038 +
jmp loc_49F309  +
***
mov eax offset __imp_Mso20Win32Client_371 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_3592 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1391 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_2869 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_3834 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_4128 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_2476 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_3392 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_3391 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_2840 +
jmp loc_49F309  +
***
mov eax offset __imp_Mso20Win32Client_2247 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_2479 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_2469 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_2477 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1790 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1872 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_4215 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_4214 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_4216 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1514 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1091 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1338 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1865 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_2282 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_2315 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_2904 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_3906 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_3905 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_609 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_284 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_2261 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_2824 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_2932 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_3885 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_3995 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1830 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_735 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_3 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1324 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_4106 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_3581 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_3849 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_4088 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_3781 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1660 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_3793 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_3028 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_3072 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_3904 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1416 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1471 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1577 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_4138 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_355 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_752 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_3844 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_2280 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1820 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1859 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1844 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1361 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_4105 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_3773 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1362 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_560 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_3777 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_3596 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_2265 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_2040 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_2042 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_2023 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1053 +
jmp loc_49F309  +
***
mov eax offset __imp_Mso20Win32Client_2292 +
jmp loc_49F309  +
***
mov eax offset __imp_Mso20Win32Client_2460 +
jmp loc_49F309  +
***
mov eax offset __imp_Mso20Win32Client_2859 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_3727 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_2718 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_2827 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_2860 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1606 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_316 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_2102 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_892 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_2084 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_2093 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1302 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_4040 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_2154 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_2113 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_2116 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_2184 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_2897 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_4210 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1797 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1604 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_3790 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_4039 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_17 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_989 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_882 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1651 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_102 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_720 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1643 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1504 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_2061 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1208 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_36 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_188 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1252 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_2396 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1698 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_2896 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_2857 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_2436 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_2854 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_385 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_154 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_667 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_4084 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_149 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1686 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1477 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_638 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_954 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_938 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_3804 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_857 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1925 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_2296 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_546 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1523 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_519 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_447 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_4023 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_4152 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_974 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_755 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1570 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1641 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_644 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_3911 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_3810 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1462 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1675 +
jmp loc_49F309  +
***
mov eax offset __imp_Mso20Win32Client_2004 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_2757 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1696 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_3824 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_3587 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_54 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1595 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_2297 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_2015 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_793 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_3993 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1333 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_4287 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1350 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_2395 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_140 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_431 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_2039 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_2613 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_3589 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_3965 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_3955 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1057 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_4295 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1266 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_3823 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_2845 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_120 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1224 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_643 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1039 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1284 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1054 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1674 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1293 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_3204 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1993 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_235 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_917 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_255 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_4248 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_502 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_662 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_4271 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_2268 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1929 +
jmp loc_49F309  +
***
mov eax offset Mso20Win32Client_1441 +
jmp loc_49F309  +
***
call j__set_app_type  +
call sub_4A0E5F  +
call sub_4021C1  +
push eax  +
call j__set_new_mode  +
pop ecx  +
retn   +
***
mov ecx [ebp-14h] +
mov esp [ebp-18h] +
call sub_4A0E1C  +
test al al +
jz loc_49FFA5  +
cmp byte ptr [ebp-19h] 0 +
jnz loc_49FF7E  +
call j__c_exit  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov eax [ebp-20h] +
***
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
push 7  +
call sub_4A0CD1  +
push esi  +
call j_exit  +
***
push dword ptr [ebp-20h]  +
call j__exit  +
***
call sub_4A0C14  +
cmp ecx dword_508660 +
call sub_49FFEE  +
push 0FA0h  +
push esi  +
push esi  +
push esi  +
push edi  +
mov edi offset CriticalSection +
push edi  +
call ds:EnterCriticalSection  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi] 0 +
jnz loc_4A011C  +
or dword ptr [esi] 0FFFFFFFFh +
jmp loc_4A0138  +
push 64h  +
call sub_4A0179  +
pop ecx  +
jmp loc_4A0108  +
cmp dword ptr [esi] 0FFFFFFFFh +
jz loc_4A0112  +
mov eax large fs:2Ch +
mov ecx TlsIndex +
mov ecx [eax+ecx*4] +
mov eax dword_508658 +
mov [ecx+8] eax +
push edi  +
call ds:LeaveCriticalSection  +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
push esi  +
push 0  +
sub esp 324h +
push 8  +
sub esp 31Ch +
call sub_4A0F21  +
mov edi [ebp+10h] +
test al al +
call sub_4A0F21  +
xor esi esi +
mov [ebp-4] esi +
mov edi [ebp+8] +
mov [ebp-24h] esi +
cmp esi [ebp+10h] +
jz loc_4A049D  +
sub edi [ebp+0Ch] +
mov [ebp+8] edi +
mov ecx [ebp+14h] +
call ds:off_4AC54C  +
mov ecx edi +
call dword ptr [ebp+14h]  +
inc esi  +
jmp loc_4A0457  +
mov eax [ebp-14h] +
mov [ebp-20h] eax +
mov eax [ebp-20h] +
mov eax [eax] +
mov [ebp-1Ch] eax +
mov eax [ebp-1Ch] +
cmp dword ptr [eax] 0E06D7363h +
jz loc_4A04B6  +
mov dword ptr [ebp-28h] 0 +
mov eax [ebp-28h] +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov eax [ebp+arg_0] +
test eax eax +
cmp [ebp+arg_0] 0 +
cmp byte_50B5D5 0 +
call sub_4A0F21  +
call sub_4A1137  +
cmp byte_50B5D4 0 +
cmp dword_50B5D8 0FFFFFFFFh +
push [ebp+arg_0]  +
pop eax  +
test [ebp+arg_0] 1 +
call sub_4A0F21  +
test al al +
call sub_4A0F21  +
test al al +
push esi  +
push 0FFFFFFFFh  +
push ecx  +
push ebx  +
push ebp  +
mov eax [esp+arg_4] +
sub esp 14h +
mov ecx dword_508660 +
retn   +
***
push 0  +
call sub_401929  +
xor eax eax +
sub esp 324h +
sub esp 44h +
push 44h  +
lea eax [ebp+StartupInfo] +
push 0  +
push eax  +
call j_memset  +
add esp 0Ch +
lea eax [ebp+StartupInfo] +
push eax  +
call ds:GetStartupInfoW  +
test byte ptr [ebp+StartupInfo.dwFlags] 1 +
jz loc_4A0E12  +
movzx eax [ebp+StartupInfo.wShowWindow] +
leave   +
retn   +
push 0Ah  +
pop eax  +
leave   +
retn   +
***
test eax eax +
retn   +
***
push esi  +
and dword_50B600 0 +
mov esi offset unk_4FAEFC +
mov esi offset unk_4FAF04 +
mov eax [esp+8+arg_4] +
mov [esp+8+arg_4] ebp +
lea ebp [esp+8+arg_4] +
sub esp eax +
push ebx  +
push esi  +
push edi  +
mov eax dword_508660 +
xor [ebp-4] eax +
xor eax ebp +
push eax  +
mov [ebp-18h] esp +
push dword ptr [ebp-8]  +
mov eax [ebp-4] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov [ebp-8] eax +
lea eax [ebp-10h] +
mov large fs:0 eax +
retn   +
***
push ebp  +
mov ebp esp +
and dword_50B608 0 +
sub esp 24h +
or dword_508668 1 +
push 0Ah  +
call ds:IsProcessorFeaturePresent  +
test eax eax +
jz loc_4A1133  +
and dword ptr [ebp-10h] 0 +
xor eax eax +
push ebx  +
push esi  +
push edi  +
xor ecx ecx +
lea edi [ebp-24h] +
push ebx  +
cpuid   +
mov esi ebx +
pop ebx  +
mov [edi] eax +
mov [edi+4] esi +
mov [edi+8] ecx +
xor ecx ecx +
mov [edi+0Ch] edx +
mov eax [ebp-24h] +
mov edi [ebp-1Ch] +
mov [ebp-0Ch] eax +
xor edi 6C65746Eh +
mov eax [ebp-18h] +
xor eax 49656E69h +
mov [ebp-8] eax +
mov eax [ebp-20h] +
xor eax 756E6547h +
mov [ebp-4] eax +
xor eax eax +
inc eax  +
push ebx  +
cpuid   +
mov esi ebx +
pop ebx  +
lea ebx [ebp-24h] +
mov [ebx] eax +
mov eax [ebp-4] +
mov [ebx+4] esi +
or eax edi +
or eax [ebp-8] +
mov [ebx+8] ecx +
mov [ebx+0Ch] edx +
jnz loc_4A1034  +
mov eax [ebp-24h] +
and eax 0FFF3FF0h +
cmp eax 106C0h +
jz loc_4A1023  +
cmp eax 20660h +
jz loc_4A1023  +
cmp eax 20670h +
jz loc_4A1023  +
cmp eax 30650h +
jz loc_4A1023  +
cmp eax 30660h +
jz loc_4A1023  +
cmp eax 30670h +
jnz loc_4A1034  +
mov edi dword_50B60C +
or edi 1 +
mov dword_50B60C edi +
jmp loc_4A103A  +
mov edi dword_50B60C +
mov ecx [ebp-1Ch] +
push 7  +
pop eax  +
mov [ebp-4] ecx +
cmp [ebp-0Ch] eax +
jl loc_4A1077  +
xor ecx ecx +
push ebx  +
cpuid   +
mov esi ebx +
pop ebx  +
lea ebx [ebp-24h] +
mov [ebx] eax +
mov [ebx+4] esi +
mov [ebx+8] ecx +
mov ecx [ebp-4] +
mov [ebx+0Ch] edx +
mov ebx [ebp-20h] +
test ebx 200h +
jz loc_4A107A  +
or edi 2 +
mov dword_50B60C edi +
jmp loc_4A107A  +
mov ebx [ebp-10h] +
mov eax dword_508668 +
or eax 2 +
mov dword_50B608 1 +
mov dword_508668 eax +
test ecx 100000h +
jz loc_4A1130  +
or eax 4 +
mov dword_50B608 2 +
mov dword_508668 eax +
test ecx 8000000h +
jz loc_4A1130  +
test ecx 10000000h +
jz loc_4A1130  +
xor ecx ecx +
xor eax eax +
push [ebp+arg_0]  +
call sub_49E72F  +
pop ecx  +
pop ebp  +
retn   +
***
call sub_401929  +
mov edi [ecx+4] +
mov eax [edi] +
mov esi [eax+8] +
mov ecx esi +
call ds:off_4AC54C  +
mov ecx edi +
call esi  +
mov edi eax +
test edi edi +
jz loc_4A121C  +
mov ecx [edi] +
push 1  +
mov esi [ecx] +
mov ecx esi +
call ds:off_4AC54C  +
mov ecx edi +
call esi  +
pop edi  +
pop esi  +
retn   +
***
push ecx  +
push ebp  +
mov ebp esp +
mov edx [ebp+8] +
mov ecx offset dword_508668 +
push esi  +
mov esi [ebp+0Ch] +
mov eax esi +
sub eax edx +
cmp eax 40h +
jb loc_4A12D5  +
bt dword ptr [ecx] 5 +
jnb loc_4A12D5  +
mov eax esi +
sub eax edx +
cmp eax 20h +
jb loc_4A1324  +
bt dword ptr [ecx] 2 +
jnb loc_4A1324  +
movaps xmm2 oword ptr ds:oword_4AC940 +
shr eax 1 +
and eax 7FFFFFF0h +
add eax edx +
movups xmm1 oword ptr [edx] +
sub esi 10h +
test ds:dword_4ACA28 1000h +
mov eax dword_50B618 +
call sub_4A13F2  +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
call sub_4A13F2  +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
push ebx  +
push esi  +
push edi  +
call sub_4A13BB  +
mov ecx [ebp+arg_0] +
mov edi offset __ImageBase +
mov [ebp+var_34] 24h +
mov [ebp+var_30] ecx +
mov eax [ecx+4] +
mov ebx [ecx+8] +
add eax edi +
mov edx [ecx+0Ch] +
add ebx edi +
mov esi [ecx+10h] +
add edx edi +
add esi edi +
mov [ebp+Arguments] ebx +
mov edi [ecx+14h] +
add edi offset __ImageBase +
mov [ebp+lpLibFileName] eax +
mov [ebp+var_10] edi +
mov edi [ecx+1Ch] +
mov [ebp+var_8] edi +
mov edi [ebp+arg_4] +
mov [ebp+var_2C] edi +
xor edi edi +
test dword ptr [ecx] 1 +
mov [ebp+var_24] edi +
mov [ebp+lpProcName] edi +
mov [ebp+var_1C] edi +
mov [ebp+var_18] edi +
mov [ebp+var_14] edi +
jnz loc_4A16EF  +
lea eax [ebp+var_34] +
mov [ebp+Arguments] eax +
call sub_4A15FC  +
lea eax [ebp+Arguments] +
push eax  +
push 1  +
push edi  +
push 0C06D0057h  +
call ds:RaiseException  +
xor eax eax +
jmp loc_4A18C6  +
mov eax [ebp+arg_4] +
mov edi [ebx] +
sub eax edx +
sar eax 2 +
mov [ebp+var_C] eax +
mov ecx [esi+eax*4] +
mov eax ecx +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+var_24] eax +
lea eax (__ImageBase+2)[ecx] +
jnz loc_4A1717  +
movzx eax cx +
mov ebx off_508670 +
xor esi esi +
mov [ebp+lpProcName] eax +
test ebx ebx +
jz loc_4A1745  +
lea eax [ebp+var_34] +
mov ecx ebx +
push eax  +
push esi  +
call ds:off_4AC54C  +
call ebx  +
mov esi eax +
test esi esi +
jnz loc_4A189B  +
mov ebx off_508670 +
test edi edi +
jnz loc_4A17E0  +
test ebx ebx +
jz loc_4A1767  +
lea eax [ebp+var_34] +
mov ecx ebx +
push eax  +
push 1  +
call ds:off_4AC54C  +
call ebx  +
mov edi eax +
test edi edi +
jnz loc_4A17C8  +
xor ebx ebx +
push ebx  +
push ebx  +
push [ebp+lpLibFileName]  +
call ds:LoadLibraryExA  +
mov edi eax +
test edi edi +
jnz loc_4A17C8  +
call ds:GetLastError  +
mov edi dword_50B680 +
mov [ebp+var_14] eax +
test edi edi +
jz loc_4A17A3  +
lea eax [ebp+var_34] +
mov ecx edi +
push eax  +
push 3  +
call ds:off_4AC54C  +
call edi  +
mov edi eax +
test edi edi +
jnz loc_4A17C8  +
lea eax [ebp+var_34] +
mov [ebp+Arguments] eax +
call sub_4A15FC  +
lea eax [ebp+Arguments] +
push eax  +
push 1  +
push ebx  +
push 0C06D007Eh  +
call ds:RaiseException  +
mov eax [ebp+var_18] +
jmp loc_4A18C6  +
mov ecx [ebp+Arguments] +
mov eax edi +
xchg eax [ecx] +
cmp eax edi +
jnz loc_4A17DA  +
push edi  +
call ds:FreeLibrary  +
mov ebx off_508670 +
mov [ebp+var_1C] edi +
test ebx ebx +
jz loc_4A17F9  +
lea eax [ebp+var_34] +
mov ecx ebx +
push eax  +
push 2  +
call ds:off_4AC54C  +
call ebx  +
mov esi eax +
test esi esi +
jnz loc_4A1896  +
mov eax [ebp+arg_0] +
xor ebx ebx +
cmp [eax+14h] ebx +
jz loc_4A1838  +
cmp [eax+1Ch] ebx +
jz loc_4A1838  +
mov eax [edi+3Ch] +
cmp dword ptr [eax+edi] 4550h +
jnz loc_4A1838  +
mov ecx [ebp+var_8] +
cmp [eax+edi+8] ecx +
jnz loc_4A1838  +
cmp edi [eax+edi+34h] +
jnz loc_4A1838  +
mov esi [ebp+var_C] +
mov eax [ebp+var_10] +
mov esi [eax+esi*4] +
test esi esi +
jnz loc_4A1896  +
push [ebp+lpProcName]  +
push edi  +
call ds:GetProcAddress  +
mov esi eax +
test esi esi +
jnz loc_4A1896  +
call ds:GetLastError  +
mov esi dword_50B680 +
mov [ebp+var_14] eax +
test esi esi +
jz loc_4A1871  +
lea eax [ebp+var_34] +
mov ecx esi +
push eax  +
push 4  +
call ds:off_4AC54C  +
call esi  +
mov esi eax +
test esi esi +
jnz loc_4A1896  +
lea eax [ebp+var_34] +
mov [ebp+var_10] eax +
call sub_4A15FC  +
lea eax [ebp+var_10] +
push eax  +
push 1  +
push ebx  +
push 0C06D007Fh  +
call ds:RaiseException  +
call sub_4A13BB  +
mov esi [ebp+var_18] +
mov eax [ebp+arg_4] +
mov [eax] esi +
mov ebx off_508670 +
test ebx ebx +
jz loc_4A18BF  +
and [ebp+var_14] 0 +
lea eax [ebp+var_34] +
push eax  +
push 5  +
mov ecx ebx +
mov [ebp+var_1C] edi +
mov [ebp+var_18] esi +
call ds:off_4AC54C  +
call ebx  +
call sub_4A15FC  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
push ecx  +
push edx  +
push eax  +
push offset Csi_dll_import_table  +
call sub_4A165E  +
pop edx  +
pop ecx  +
jmp eax  +
***
push ecx  +
mov ecx [ebp-0Ch] +
mov ecx [ebp-10h] +
mov ecx [ebp-14h] +
lea eax [esp+4+arg_0] +
lea eax [esp+4+arg_0] +
lea eax [esp+4+arg_0] +
lea eax [esp+4+arg_0] +
xor ecx ebp +
mov ecx [ebp-0Ch] +
mov [esp+4+arg_4] ebx +
mov [esp+4+arg_4] ebx +
mov [esp+4+arg_4] ebx +
mov eax [esp+8+arg_4] +
mov eax [esp+arg_C] +
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb loc_4A1CBD  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp+0] eax +
retn   +
sub eax 1000h +
test [eax] eax +
jmp loc_4A1CAF  +
***
cmp dword_50B608 6 +
jl loc_4A1CD6  +
movd eax xmm0 +
shl eax 1 +
jb loc_4A1CF9  +
cmp eax 9E000000h +
jnb loc_4A1CEA  +
cvttss2si eax xmm0 +
retn   +
***
cmp eax 9F000000h +
jnb loc_4A1D00  +
shl eax 7 +
bts eax 1Fh +
retn   +
***
cmp eax 7F000000h +
jb loc_4A1CE5  +
cvttss2si ecx ds:dword_4F96B0 +
cmc   +
sbb eax eax +
retn   +
***
cmp dword_50B608 6 +
jl loc_4A1D1C  +
or [eax-40h] bh +
retn   +
***
mov ecx esp +
add esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
movsd qword ptr [esp] xmm0 +
mov eax [esp] +
mov edx [esp+4] +
mov esp ecx +
btr edx 1Fh +
jb loc_4A1D65  +
cmp edx 41E00000h +
jnb loc_4A1D45  +
cvttsd2si eax xmm0 +
retn   +
***
cmp edx 41F00000h +
jnb loc_4A1D74  +
test eax 1FFFFFh +
jz loc_4A1D5C  +
cvttss2si ecx ds:dword_4F96B4 +
shrd eax edx +
bts eax 1Fh +
retn   +
***
cmp edx 3FF00000h +
jnb loc_4A1D74  +
cvttsd2si eax xmm0 +
xor eax eax +
retn   +
***
cvttss2si ecx ds:dword_4F96B0 +
xor eax eax +
dec eax  +
retn   +
***
cmp dword_50B608 6 +
jl loc_4A1D9A  +
lea ecx [ebp-28h] +
jmp sub_406DE4  +
***
lea ecx [ebp-28h] +
jmp sub_406DE4  +
***
lea ecx [ebp-2Ch] +
jmp sub_406DE4  +
***
lea ecx [ebp-60h] +
lea ecx [ebp-28h] +
lea ecx [ebp-58h] +
lea ecx [ebp-40h] +
jmp sub_406DE4  +
***
lea ecx [ebp-74h] +
lea ecx [ebp-5Ch] +
lea ecx [ebp-8Ch] +
lea ecx [ebp-44h] +
lea ecx [ebp-2Ch] +
lea ecx [ebp-44h] +
lea ecx [ebp-2Ch] +
jmp sub_406DE4  +
***
lea ecx [ebp-28h] +
lea ecx [ebp-28h] +
jmp sub_406DE4  +
***
mov ecx [ebp-3A4h] +
mov ecx [ebp-3A4h] +
add ecx 8 +
jmp sub_406DE4  +
***
lea ecx [ebp-28h] +
jmp sub_406DE4  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB140 +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-40h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-8] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0Ch] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
lea ecx [ebp-24Ch] +
lea ecx [ebp-2A8h] +
lea ecx [ebp-234h] +
mov eax [ebp-2A8h] +
lea ecx [ebp-294h] +
lea ecx [ebp-264h] +
lea ecx [ebp-2C4h] +
lea ecx [ebp-2A0h] +
lea ecx [ebp-27Ch] +
lea ecx [ebp-27Ch] +
jmp sub_406DE4  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-388h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-8] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB190 +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0F8h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
lea ecx [ebp-0A4h] +
lea ecx [ebp-68h] +
jmp sub_406DE4  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0C8h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB264 +
jmp loc_4A1151  +
***
lea ecx [ebp-264h] +
jmp sub_4062F5  +
***
mov eax [ebp-3D4h] +
lea ecx [ebp-40h] +
jmp sub_406DE4  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-3DCh] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB2C4 +
jmp loc_4A1151  +
***
lea ecx [ebp-0EB8h] +
lea ecx [ebp-0E9Ch] +
lea ecx [ebp-0EA0h] +
lea ecx [ebp-0EB4h] +
lea ecx [ebp-0EA4h] +
lea ecx [ebp-0EBCh] +
lea ecx [ebp-54h] +
jmp loc_406287  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0EC4h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-8] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB328 +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-8] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB238 +
jmp loc_4A1151  +
***
lea ecx [ebp-28h] +
jmp sub_406DE4  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_4A231B  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp-14h] +
jmp sub_406DE4  +
retn   +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB3E4 +
jmp loc_4A1151  +
***
lea ecx [ebp-2Ch] +
jmp sub_406DE4  +
***
lea ecx [ebp-2Ch] +
jmp sub_406DE4  +
***
lea ecx [ebp-2Ch] +
jmp sub_406DE4  +
***
lea ecx [ebp-28h] +
jmp sub_406DE4  +
***
lea ecx [ebp-14h] +
jmp loc_408C92  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB4C0 +
jmp loc_4A1151  +
***
lea ecx [ebp-10h] +
pop ecx  +
retn   +
***
lea ecx [ebp-10h] +
lea ecx [ebp+18h] +
jmp loc_408FD7  +
***
lea ecx [ebp-10h] +
mov eax [ebp-14h] +
mov eax [ebp-14h] +
lea ecx [ebp-1Ch] +
jmp loc_408FD7  +
***
lea ecx [ebp-18h] +
lea ecx [ebp-20h] +
lea ecx [ebp-1Ch] +
lea ecx [ebp+14h] +
lea ecx [ebp-10h] +
lea ecx [ebp-14h] +
jmp loc_40270E  +
***
lea ecx [ebp-10C0h] +
lea ecx [ebp-10BCh] +
lea ecx [ebp-10C4h] +
jmp loc_40BCDD  +
***
lea ecx [ebp-10h] +
lea ecx [ebp+0Ch] +
lea ecx [ebp-14h] +
jmp loc_40BCDD  +
***
lea ecx [ebp-21Ch] +
jmp loc_40270E  +
***
lea ecx [ebp-3Ch] +
jmp loc_40270E  +
***
lea ecx [ebp+8] +
jmp loc_40BCDD  +
***
lea ecx [ebp-28h] +
jmp loc_40270E  +
***
lea ecx [ebp-14h] +
lea ecx [ebp+8] +
lea ecx [ebp-10h] +
jmp loc_40270E  +
***
lea ecx [ebp+8] +
lea ecx [ebp-10h] +
jmp loc_40270E  +
***
lea ecx [ebp-34h] +
jmp loc_40270E  +
***
lea ecx [ebp-10h] +
jmp loc_40270E  +
***
lea ecx [ebp-10h] +
jmp loc_408FD7  +
***
lea ecx [ebp-10h] +
lea ecx [ebp-14h] +
jmp loc_40270E  +
***
lea ecx [ebp-2DCh] +
lea ecx [ebp-2ECh] +
lea ecx [ebp-2E8h] +
lea ecx [ebp-310h] +
lea ecx [ebp-2E4h] +
lea ecx [ebp-2D8h] +
lea ecx [ebp-2E0h] +
lea ecx [ebp-2BCh] +
lea ecx [ebp-2B8h] +
lea ecx [ebp-2BCh] +
lea ecx [ebp-2BCh] +
lea ecx [ebp-2C0h] +
lea ecx [ebp-2B8h] +
lea ecx [ebp-2BCh] +
lea ecx [ebp-2C0h] +
lea ecx [ebp-2B8h] +
lea ecx [ebp-2BCh] +
lea ecx [ebp-2C0h] +
lea ecx [ebp-2B8h] +
lea ecx [ebp-2BCh] +
lea ecx [ebp-2C0h] +
lea ecx [ebp-2B8h] +
lea ecx [ebp-2BCh] +
lea ecx [ebp-2C0h] +
lea ecx [ebp-2B8h] +
lea ecx [ebp-2BCh] +
lea ecx [ebp-2C0h] +
lea ecx [ebp-2C0h] +
lea ecx [ebp-2BCh] +
jmp loc_408FD7  +
***
lea ecx [ebp-58h] +
lea ecx [ebp-50h] +
lea ecx [ebp-54h] +
lea ecx [ebp-5Ch] +
lea ecx [ebp-54h] +
lea ecx [ebp-5Ch] +
lea ecx [ebp-54h] +
lea ecx [ebp-5Ch] +
lea ecx [ebp-54h] +
lea ecx [ebp-5Ch] +
lea ecx [ebp-54h] +
lea ecx [ebp-5Ch] +
lea ecx [ebp-5Ch] +
lea ecx [ebp-5Ch] +
lea ecx [ebp-5Ch] +
lea ecx [ebp-54h] +
jmp loc_40270E  +
***
lea ecx [ebp-490h] +
lea ecx [ebp-450h] +
lea ecx [ebp-438h] +
jmp sub_406DE4  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-494h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB9F8 +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-12E0h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-0Ch] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FBA34 +
jmp loc_4A1151  +
***
mov eax [ebp-0A4h] +
and eax 1 +
jz locret_4A2A3F  +
and dword ptr [ebp-0A4h] 0FFFFFFFEh +
lea ecx [ebp-80h] +
jmp sub_406DE4  +
retn   +
***
mov ecx [edx-8] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FBA8C +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-3Ch] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0Ch] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB238 +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
mov ecx [ebp-10h] +
jmp loc_40271F  +
***
mov ecx [ebp-10h] +
mov edx [esp+arg_4] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FBB18 +
jmp loc_4A1151  +
***
lea ecx [ebp-28h] +
jmp sub_406EAB  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-30h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FBB80 +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-8Ch] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
lea ecx [ebp-3F4h] +
lea ecx [ebp-1B8h] +
lea ecx [ebp-140h] +
lea ecx [ebp-418h] +
mov eax [ebp-3E8h] +
mov eax [ebp-3E8h] +
lea ecx [ebp-1A0h] +
lea ecx [ebp-188h] +
lea ecx [ebp-170h] +
lea ecx [ebp-3C8h] +
lea ecx [ebp-3C8h] +
lea ecx [ebp-398h] +
lea ecx [ebp-398h] +
lea ecx [ebp-368h] +
lea ecx [ebp-368h] +
lea ecx [ebp-338h] +
lea ecx [ebp-338h] +
lea ecx [ebp-308h] +
lea ecx [ebp-308h] +
lea ecx [ebp-3E0h] +
lea ecx [ebp-2D8h] +
lea ecx [ebp-2A8h] +
lea ecx [ebp-2A8h] +
lea ecx [ebp-128h] +
lea ecx [ebp-278h] +
lea ecx [ebp-158h] +
lea ecx [ebp-248h] +
lea ecx [ebp-218h] +
lea ecx [ebp-218h] +
lea ecx [ebp-1E8h] +
push 30h  +
mov eax [ebp-3E8h] +
and eax 4 +
jz locret_4A2D62  +
and dword ptr [ebp-3E8h] 0FFFFFFFBh +
mov ecx [ebp-3FCh] +
jmp sub_410A11  +
retn   +
***
lea ecx [ebp-7Ch] +
lea ecx [ebp-0B8h] +
lea ecx [ebp-28h] +
lea ecx [ebp-40h] +
lea ecx [ebp-0ECh] +
lea ecx [ebp-90h] +
lea ecx [ebp-58h] +
jmp sub_406DE4  +
***
lea ecx [ebp-0D4h] +
lea ecx [ebp-88h] +
lea ecx [ebp-0C8h] +
lea ecx [ebp-58h] +
lea ecx [ebp-0E0h] +
lea ecx [ebp-70h] +
lea ecx [ebp-0C4h] +
lea ecx [ebp-40h] +
lea ecx [ebp-58h] +
lea ecx [ebp-0C0h] +
jmp sub_40FCA7  +
***
mov eax [ebp-10h] +
mov ecx [ebp-14h] +
add ecx 8 +
jmp ds:??1?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ  +
***
lea ecx [ebp-18h] +
lea ecx [ebp-24h] +
jmp sub_41101E  +
***
mov ecx [ebp-10h] +
jmp sub_410A44  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_4A2F2E  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp sub_406DE4  +
retn   +
***
mov eax [ebp-48h] +
and eax 1 +
jz locret_4A2F5E  +
and dword ptr [ebp-48h] 0FFFFFFFEh +
lea ecx [ebp-44h] +
jmp sub_406DE4  +
retn   +
***
lea ecx [ebp-30h] +
jmp sub_4108C5  +
***
mov ecx [ebp-10h] +
jmp sub_406DE4  +
***
lea ecx [ebp+8] +
jmp loc_4112AA  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FBF50 +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0ACh] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-8Ch] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-7Ch] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-414h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB238 +
jmp loc_4A1151  +
***
mov eax [ebp-10h] +
mov ecx [ebp-14h] +
add ecx 20h +
jmp ds:??1?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ  +
***
lea ecx [ebp-28h] +
jmp sub_406EAB  +
***
mov eax [ebp-10h] +
mov ecx [ebp-14h] +
mov ecx [ebp-14h] +
lea ecx [ebp-1Ch] +
jmp sub_414BDE  +
***
mov ecx [ebp-10h] +
jmp ds:??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ  +
***
lea ecx [ebp-14h] +
lea ecx [ebp-18h] +
jmp loc_406351  +
***
lea ecx [ebp-30h] +
lea ecx [ebp-50h] +
lea ecx [ebp-70h] +
jmp sub_40BFF1  +
***
lea ecx [ebp-40h] +
lea ecx [ebp-80h] +
lea ecx [ebp-60h] +
lea ecx [ebp-60h] +
jmp sub_40BFF1  +
***
lea ecx [ebp-2Ch] +
lea ecx [ebp-4Ch] +
lea ecx [ebp-6Ch] +
jmp sub_40BFF1  +
***
lea ecx [ebp-80h] +
lea ecx [ebp-30h] +
jmp sub_40BFF1  +
***
lea ecx [ebp-34h] +
jmp sub_40BFF1  +
***
lea ecx [ebp-28h] +
lea ecx [ebp-0F4h] +
lea ecx [ebp-40h] +
jmp sub_406DE4  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0F8h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FC19C +
jmp loc_4A1151  +
***
pop ecx  +
retn   +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-90h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FC1D8 +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0B0h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-8] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0A4h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0A0h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0C0h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-8] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB238 +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
lea ecx [ebp-30h] +
lea ecx [ebp-2Ch] +
jmp sub_406DE4  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-4Ch] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FC204 +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-60h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-8] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FC238 +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FC26C +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FC2A0 +
jmp loc_4A1151  +
***
lea ecx [ebp-10h] +
jmp sub_4194A2  +
***
mov eax [ebp-10h] +
mov ecx offset off_508C50 +
jmp sub_41A070  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FC2F8 +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB2F8 +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FC32C +
jmp loc_4A1151  +
***
mov ecx [ebp+8] +
jmp sub_41A070  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FC384 +
jmp loc_4A1151  +
***
lea ecx [ebp-28h] +
mov eax [ebp-38h] +
and eax 1 +
jz locret_4A3669  +
and dword ptr [ebp-38h] 0FFFFFFFEh +
mov ecx [ebp-3Ch] +
jmp sub_4067D3  +
retn   +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-40h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FC3B0 +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-64h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-94h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
mov eax [ebp-34h] +
lea ecx [ebp-30h] +
lea ecx [ebp-28h] +
jmp sub_406DE4  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-5Ch] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FC3E4 +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-60h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-84h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
mov ecx [ebp-10h] +
jmp loc_41DAA1  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FC420 +
jmp loc_4A1151  +
***
mov ecx [ebp-10h] +
jmp loc_408C92  +
***
mov eax [ebp-3A4h] +
and eax 1 +
jz locret_4A384F  +
and dword ptr [ebp-3A4h] 0FFFFFFFEh +
mov ecx [ebp-3ACh] +
jmp sub_406DE4  +
retn   +
***
lea ecx [ebp-14h] +
jmp loc_41F3D5  +
***
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp-14h] +
jmp loc_41DCD0  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FC4D0 +
jmp loc_4A1151  +
***
lea ecx [ebp-14h] +
jmp loc_4067EC  +
***
lea ecx [ebp-74h] +
jmp loc_4067EC  +
***
lea ecx [ebp-54h] +
lea ecx [ebp-4Ch] +
lea ecx [ebp-4Ch] +
lea ecx [ebp-8Ch] +
lea ecx [ebp-4Ch] +
lea ecx [ebp-28h] +
lea ecx [ebp-70h] +
lea ecx [ebp-4Ch] +
lea ecx [ebp-28h] +
lea ecx [ebp-70h] +
lea ecx [ebp-4Ch] +
jmp sub_41F347  +
***
lea ecx [ebp-109Ch] +
mov eax [ebp-10B4h] +
lea ecx [ebp-1074h] +
jmp sub_406DE4  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10CCh] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-8] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FC660 +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1094h] +
xor ecx eax +
call sub_49FFB8  +
nop   +
mov ecx [edx-8] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FC6D0 +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-68h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
lea ecx [ebp-48h] +
jmp Mso20Win32Client_177  +
***
lea ecx [ebp-20h] +
lea ecx [ebp-18h] +
jmp loc_41F3D5  +
***
lea ecx [ebp+8] +
jmp sub_41F347  +
***
mov ecx [ebp-10h] +
jmp sub_41F347  +
***
lea ecx [ebp-38h] +
jmp sub_41A070  +
***
lea ecx [ebp-34h] +
lea ecx [ebp-3Ch] +
jmp loc_4067EC  +
***
mov eax [ebp-44h] +
and eax 1 +
jz locret_4A3BB3  +
and dword ptr [ebp-44h] 0FFFFFFFEh +
lea ecx [ebp-40h] +
jmp sub_406DE4  +
retn   +
***
mov ecx [ebp-3Ch] +
lea ecx [ebp-24h] +
lea ecx [ebp-38h] +
jmp loc_41DE44  +
***
lea ecx [ebp-10h] +
jmp loc_41F3D5  +
***
lea ecx [ebp-10h] +
jmp loc_41F3D5  +
***
mov ecx [ebp-10h] +
jmp sub_41E431  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FC900 +
jmp loc_4A1151  +
***
mov eax [ebp-10h] +
mov eax [ebp-10h] +
and eax 2 +
jz locret_4A3CD1  +
and dword ptr [ebp-10h] 0FFFFFFFDh +
lea ecx [ebp-20h] +
jmp loc_4112AA  +
retn   +
***
lea ecx [ebp-18h] +
jmp loc_4067EC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FC9B8 +
jmp loc_4A1151  +
***
lea ecx [ebp-94h] +
lea ecx [ebp-7Ch] +
jmp sub_406DE4  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0C4h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FC9E4 +
jmp loc_4A1151  +
***
lea ecx [ebp-2Ch] +
lea ecx [ebp-44h] +
jmp sub_406DE4  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0ACh] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-8] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FCA18 +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-7Ch] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB238 +
jmp loc_4A1151  +
***
lea ecx [ebp-2Ch] +
jmp sub_406DE4  +
***
lea ecx [ebp-30h] +
jmp sub_406DE4  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-40h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-0Ch] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FCAE0 +
jmp loc_4A1151  +
***
lea ecx [ebp-20Ch] +
lea ecx [ebp-1FCh] +
lea ecx [ebp-1ECh] +
lea ecx [ebp-28h] +
jmp sub_406DE4  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-23Ch] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FCB40 +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20B4h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
lea ecx [ebp-74h] +
lea ecx [ebp-28h] +
lea ecx [ebp-58h] +
lea ecx [ebp-48h] +
jmp sub_423E2D  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-80h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FCB84 +
jmp loc_4A1151  +
***
lea ecx [ebp-234h] +
lea ecx [ebp-24Ch] +
lea ecx [ebp-238h] +
lea ecx [ebp-234h] +
jmp sub_406DE4  +
***
lea ecx [ebp-2Ch] +
jmp sub_406DE4  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-38h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-8] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FCC14 +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-4Ch] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
mov ecx [edx-8] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-74h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB238 +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-44h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-40h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1054h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-38h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-30h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
lea ecx [ebp+8] +
jmp loc_426F20  +
***
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
add ecx 0Ch +
jmp sub_4262DB  +
***
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
add ecx 0Ch +
jmp sub_4262DB  +
***
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
add ecx 0Ch +
jmp sub_4262DB  +
***
mov ecx [ebp-14h] +
mov ecx [ebp-14h] +
add ecx 0Ch +
jmp sub_4262DB  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FCD3C +
jmp loc_4A1151  +
***
lea ecx [ebp-18h] +
jmp loc_4280C2  +
***
lea ecx [ebp-20h] +
lea ecx [ebp-20h] +
jmp loc_428070  +
***
lea ecx [ebp-20h] +
lea ecx [ebp-20h] +
jmp loc_408C6F  +
***
lea ecx [ebp-20h] +
lea ecx [ebp-20h] +
jmp loc_408C92  +
***
lea ecx [ebp-18h] +
lea ecx [ebp-18h] +
jmp sub_428041  +
***
lea ecx [ebp-28h] +
jmp loc_427FE8  +
***
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
add ecx 0Ch +
jmp sub_4262DB  +
***
lea ecx [ebp+8] +
jmp loc_4288ED  +
***
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
add ecx 0Ch +
jmp sub_4262DB  +
***
lea ecx [ebp-20h] +
lea ecx [ebp-20h] +
jmp loc_4290B8  +
***
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp+8] +
jmp sub_406DE4  +
***
lea ecx [ebp-18h] +
lea ecx [ebp-18h] +
jmp loc_42801E  +
***
lea ecx [ebp-18h] +
jmp loc_408C92  +
***
lea ecx [ebp-28h] +
jmp loc_42920D  +
***
mov ecx [ebp-10h] +
jmp loc_420FE7  +
***
lea ecx [ebp-14h] +
lea ecx [ebp-14h] +
jmp loc_408C6F  +
***
mov ecx [ebp-10h] +
mov ecx [ebp+8] +
jmp loc_420FE0  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FD0C4 +
jmp loc_4A1151  +
***
lea ecx [ebp-0DCh] +
jmp sub_429C5D  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0F0h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-8] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FD0F8 +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-4Ch] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
lea ecx [ebp-48h] +
lea ecx [ebp-2Ch] +
jmp sub_406DE4  +
***
lea ecx [ebp+8] +
jmp loc_40BCDD  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FD230 +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-68h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-8] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
lea ecx [ebp-4F4h] +
lea ecx [ebp-284h] +
lea ecx [ebp-2A4h] +
lea ecx [ebp-264h] +
lea ecx [ebp-434h] +
lea ecx [ebp-430h] +
lea ecx [ebp-40h] +
lea ecx [ebp-450h] +
jmp sub_426B87  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-4F8h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-8] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FD2E8 +
jmp loc_4A1151  +
***
lea ecx [ebp-50h] +
lea ecx [ebp-18h] +
lea ecx [ebp-48h] +
jmp sub_430109  +
***
lea ecx [ebp-84h] +
lea ecx [ebp-58h] +
lea ecx [ebp-60h] +
jmp loc_42AAED  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-90h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FD39C +
jmp loc_4A1151  +
***
lea ecx [ebp-1Ch] +
jmp sub_426B87  +
***
lea ecx [ebp-24h] +
jmp sub_40E2E2  +
***
lea ecx [ebp+8] +
lea ecx [ebp-14h] +
lea ecx [ebp+20h] +
lea ecx [ebp+28h] +
lea ecx [ebp-30h] +
lea ecx [ebp-24h] +
jmp loc_42F6B5  +
***
lea ecx [ebp+8] +
lea ecx [ebp-0D8h] +
lea ecx [ebp-0DCh] +
lea ecx [ebp-0F4h] +
lea ecx [ebp-0E8h] +
lea ecx [ebp-18h] +
jmp loc_4067EC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-100h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FD4EC +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FC238 +
jmp loc_4A1151  +
***
mov ecx [ebp-14h] +
mov ecx [ebp-14h] +
add ecx 0Ch +
jmp sub_4262DB  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FD540 +
jmp loc_4A1151  +
***
lea ecx [ebp-20h] +
lea ecx [ebp-20h] +
jmp loc_430E49  +
***
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
add ecx 0Ch +
jmp sub_4262DB  +
***
lea ecx [ebp-18h] +
mov ecx [ebp-10h] +
lea ecx [ebp-18h] +
jmp sub_428041  +
***
mov ecx [ebp-18h] +
jmp sub_420FBF  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FD64C +
jmp loc_4A1151  +
***
lea ecx [ebp-18h] +
jmp loc_40BCDD  +
***
mov eax offset unk_4FD678 +
jmp loc_4A1151  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_4A4AD8  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp sub_430109  +
retn   +
***
lea ecx [ebp-10Ch] +
lea ecx [ebp-0ECh] +
lea ecx [ebp-0DCh] +
jmp sub_43139C  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-118h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FD758 +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-180h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-8] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
add ecx 0Ch +
jmp sub_4262DB  +
***
lea ecx [ebp-18h] +
lea ecx [ebp-18h] +
jmp loc_408C6F  +
***
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
add ecx 48h +
jmp sub_406DE4  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FD804 +
jmp loc_4A1151  +
***
lea ecx [ebp-18h] +
jmp loc_433D52  +
***
lea ecx [ebp-14h] +
lea ecx [ebp-14h] +
jmp loc_42801E  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FD8CC +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-34h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FC238 +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-88h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-8] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB238 +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FD900 +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB238 +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-218h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-144h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
add ecx 0Ch +
jmp sub_4262DB  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FD968 +
jmp loc_4A1151  +
***
lea ecx [ebp-18h] +
jmp sub_438047  +
***
lea ecx [ebp-20h] +
lea ecx [ebp-20h] +
jmp loc_4280C2  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FD9C8 +
jmp loc_4A1151  +
***
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
add ecx 58h +
jmp loc_40BCDD  +
***
lea ecx [ebp-1074h] +
jmp sub_406DE4  +
***
lea ecx [ebp-2Ch] +
jmp sub_406DE4  +
***
mov ecx [edx-8] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FDAF8 +
jmp loc_4A1151  +
***
mov ecx [ebp-10h] +
lea ecx [ebp-18h] +
jmp loc_408C92  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FDBB0 +
jmp loc_4A1151  +
***
lea ecx [ebp-6E4h] +
jmp loc_439A15  +
***
lea ecx [ebp-18h] +
jmp loc_408C92  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FDC50 +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-110h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
lea ecx [ebp-38h] +
lea ecx [ebp-38h] +
lea ecx [ebp-38h] +
lea ecx [ebp-38h] +
lea ecx [ebp-38h] +
lea ecx [ebp-38h] +
lea ecx [ebp-38h] +
lea ecx [ebp-38h] +
lea ecx [ebp-5Ch] +
lea ecx [ebp-80h] +
jmp sub_40BFF1  +
***
lea ecx [ebp-34h] +
lea ecx [ebp-58h] +
jmp sub_40BFF1  +
***
lea ecx [ebp-34h] +
jmp sub_40BFF1  +
***
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FDD5C +
jmp loc_4A1151  +
***
lea ecx [ebp-44h] +
jmp sub_406DE4  +
***
mov ecx [ebp-14h] +
mov ecx [ebp-14h] +
mov ecx [ebp-14h] +
mov ecx [ebp-14h] +
mov ecx [ebp-14h] +
mov ecx [ebp-14h] +
mov ecx [ebp-14h] +
mov ecx [ebp-14h] +
add ecx 22Ch +
jmp sub_406DE4  +
***
mov ecx offset dword_50BFF0 +
mov ecx offset dword_50C00C +
mov ecx offset dword_50C028 +
jmp sub_406DE4  +
***
lea ecx [ebp-90h] +
lea ecx [ebp-128h] +
lea ecx [ebp-0A0h] +
lea ecx [ebp-0C4h] +
lea ecx [ebp-0E0h] +
lea ecx [ebp-78h] +
jmp sub_422A35  +
***
lea ecx [ebp-34h] +
jmp loc_41CA6A  +
***
lea ecx [ebp-4Ch] +
lea ecx [ebp-468h] +
lea ecx [ebp-2B0h] +
lea ecx [ebp-30h] +
lea ecx [ebp-64h] +
lea ecx [ebp-34h] +
mov ecx offset unk_509600 +
mov ecx offset dword_50961C +
mov ecx offset dword_509638 +
mov ecx offset dword_509654 +
mov ecx offset dword_509670 +
mov ecx offset dword_50968C +
mov ecx offset dword_5096A8 +
mov ecx offset dword_5096C4 +
mov ecx offset dword_5096E0 +
mov ecx offset dword_5096FC +
mov ecx offset dword_509718 +
mov ecx offset dword_509734 +
mov ecx offset unk_5097B0 +
mov ecx offset dword_5097CC +
mov ecx offset unk_509810 +
mov ecx offset dword_50982C +
mov ecx offset dword_509848 +
mov ecx offset dword_509864 +
mov ecx offset dword_509880 +
jmp sub_406DE4  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-46Ch] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-10h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FDFB8 +
jmp loc_4A1151  +
***
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
mov eax [ebp-48h] +
lea ecx [ebp-0CCh] +
lea ecx [ebp-28h] +
jmp sub_442EFC  +
***
mov eax [ebp-30h] +
lea ecx [ebp-0ACh] +
lea ecx [ebp-28h] +
jmp sub_442EFC  +
***
mov eax [ebp-38h] +
and eax 1 +
jz locret_4A54D8  +
and dword ptr [ebp-38h] 0FFFFFFFEh +
mov ecx [ebp-3Ch] +
jmp loc_406351  +
retn   +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-40h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FE24C +
jmp loc_4A1151  +
***
lea ecx [ebp-24h] +
jmp sub_41F3B3  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FE278 +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB238 +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB2F8 +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-38h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-8] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp+8] +
mov ecx [ebp-14h] +
mov ecx [ebp-14h] +
jmp sub_406DE4  +
***
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
add ecx 7Ch +
jmp sub_406DE4  +
***
lea ecx [ebp-20h] +
jmp sub_442EFC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FE364 +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FE390 +
jmp loc_4A1151  +
***
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
add ecx 34h +
jmp sub_426B87  +
***
lea ecx [ebp+8] +
lea ecx [ebp-10h] +
jmp loc_41CA6A  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FE47C +
jmp loc_4A1151  +
***
lea ecx [ebp-28h] +
jmp sub_406DE4  +
***
lea ecx [ebp-50h] +
lea ecx [ebp-44h] +
lea ecx [ebp-2Ch] +
lea ecx [ebp-2Ch] +
lea ecx [ebp-2Ch] +
lea ecx [ebp-94h] +
lea ecx [ebp-2Ch] +
lea ecx [ebp-2Ch] +
jmp sub_406DE4  +
***
lea ecx [ebp-1Ch] +
jmp sub_420FA7  +
***
lea ecx [ebp-28h] +
lea ecx [ebp-120h] +
jmp sub_40ED56  +
***
lea ecx [ebp-28h] +
jmp sub_406DE4  +
***
lea ecx [ebp-10h] +
jmp sub_444775  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FE60C +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FE638 +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FE690 +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FE6E8 +
jmp loc_4A1151  +
***
mov edx [esp+arg_4] +
lea ecx [ebp-20h] +
jmp sub_444CB6  +
***
lea ecx [ebp-20h] +
jmp sub_444D84  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FE81C +
jmp loc_4A1151  +
***
lea ecx [ebp-238h] +
lea ecx [ebp-238h] +
lea ecx [ebp-124h] +
lea ecx [ebp-124h] +
jmp loc_4453D9  +
***
lea ecx [ebp-5Ch] +
mov eax [ebp-3F4h] +
mov eax [ebp-3F4h] +
and eax 2 +
jz locret_4A5A4A  +
and dword ptr [ebp-3F4h] 0FFFFFFFDh +
lea ecx [ebp-2Ch] +
jmp sub_406DE4  +
retn   +
***
mov eax [ebp-128h] +
lea ecx [ebp-124h] +
lea ecx [ebp-124h] +
jmp loc_4453D9  +
***
lea ecx [ebp-28h] +
jmp sub_406DE4  +
***
mov ecx [ebp-14h] +
mov ecx [ebp-14h] +
mov ecx [ebp-14h] +
mov ecx [ebp-14h] +
mov ecx [ebp-18h] +
mov ecx [ebp-14h] +
mov ecx [ebp-14h] +
mov ecx [ebp-1Ch] +
jmp loc_44578E  +
***
lea ecx [ebp-110Ch] +
lea ecx [ebp-1124h] +
lea ecx [ebp-1084h] +
lea ecx [ebp-10ACh] +
lea ecx [ebp-10ECh] +
lea ecx [ebp-10ACh] +
jmp loc_444EC6  +
***
lea ecx [ebp-178h] +
jmp loc_4453D9  +
***
mov ecx [ebp-10h] +
jmp loc_41DAA1  +
***
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
add ecx 0Ch +
jmp sub_4262DB  +
***
lea ecx [ebp-58h] +
lea ecx [ebp-40h] +
lea ecx [ebp-6Ch] +
jmp sub_40E2E2  +
***
lea ecx [ebp-40h] +
lea ecx [ebp-4Ch] +
jmp sub_40E2E2  +
***
lea ecx [ebp-44h] +
lea ecx [ebp-74h] +
lea ecx [ebp-2Ch] +
jmp sub_406DE4  +
***
lea ecx [ebp-30h] +
lea ecx [ebp-48h] +
jmp sub_406DE4  +
***
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
add ecx 0Ch +
jmp sub_4262DB  +
***
lea ecx [ebp-18h] +
jmp loc_449B80  +
***
mov ecx [ebp-10h] +
mov ecx [ebp+8] +
jmp sub_406DE4  +
***
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
add ecx 2Ch +
jmp sub_44A048  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FECBC +
jmp loc_4A1151  +
***
lea ecx [ebp-10h] +
lea ecx [ebp-14h] +
lea ecx [ebp-18h] +
lea ecx [ebp-1Ch] +
lea ecx [ebp-20h] +
jmp sub_4062F5  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FED08 +
jmp loc_4A1151  +
***
mov eax offset unk_4FD158 +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-80h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB238 +
jmp loc_4A1151  +
***
lea ecx [ebp-18h] +
lea ecx [ebp-24h] +
lea ecx [ebp-10h] +
jmp sub_4062F5  +
***
lea ecx [ebp-18h] +
lea ecx [ebp-24h] +
lea ecx [ebp-14h] +
jmp sub_4062F5  +
***
lea ecx [ebp-10h] +
jmp sub_4062F5  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FEDCC +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-48h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
add ecx 24h +
jmp sub_44E2DD  +
***
lea ecx [ebp-30h] +
jmp loc_40BCDD  +
***
lea ecx [ebp-20h] +
jmp loc_40BCDD  +
***
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp+8] +
jmp sub_406EAB  +
***
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
add ecx 0Ch +
jmp loc_4067EC  +
***
lea ecx [ebp-18h] +
jmp sub_452225  +
***
lea ecx [ebp-30h] +
jmp sub_452225  +
***
lea ecx [ebp-14h] +
jmp loc_4523BE  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FEF90 +
jmp loc_4A1151  +
***
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
add ecx 0D0h +
jmp sub_406DE4  +
***
lea ecx [ebp+0Ch] +
lea ecx [ebp-10h] +
lea ecx [ebp-20h] +
jmp sub_426B87  +
***
lea ecx [ebp+8] +
lea ecx [ebp-1ECh] +
lea ecx [ebp-1E8h] +
lea ecx [ebp-28h] +
lea ecx [ebp-1F0h] +
lea ecx [ebp-1D8h] +
lea ecx [ebp-28h] +
lea ecx [ebp-28h] +
lea ecx [ebp-28h] +
lea ecx [ebp-28h] +
lea ecx [ebp-28h] +
lea ecx [ebp-28h] +
lea ecx [ebp-28h] +
lea ecx [ebp-28h] +
lea ecx [ebp-40h] +
lea ecx [ebp-40h] +
lea ecx [ebp-28h] +
lea ecx [ebp-58h] +
lea ecx [ebp-28h] +
lea ecx [ebp-40h] +
lea ecx [ebp-40h] +
lea ecx [ebp-70h] +
jmp sub_406DE4  +
***
mov ecx [ebp-14h] +
mov ecx [ebp-14h] +
mov ecx [ebp-14h] +
mov ecx [ebp-14h] +
mov ecx [ebp-14h] +
mov ecx [ebp-14h] +
mov ecx [ebp-14h] +
add ecx 0E8h +
jmp sub_406DE4  +
***
lea ecx [ebp-34h] +
lea ecx [ebp-34h] +
lea ecx [ebp-34h] +
lea ecx [ebp-34h] +
jmp sub_40BFF1  +
***
mov ecx [ebp-10h] +
jmp sub_4541B2  +
***
mov ecx [ebp+0Ch] +
jmp loc_41DAA1  +
***
lea ecx [ebp-0E4h] +
lea ecx [ebp-108h] +
lea ecx [ebp-68h] +
lea ecx [ebp-0D4h] +
lea ecx [ebp-0FCh] +
lea ecx [ebp-80h] +
lea ecx [ebp-0BCh] +
lea ecx [ebp-128h] +
jmp loc_408C92  +
***
lea ecx [ebp-34h] +
jmp sub_40BFF1  +
***
lea ecx [ebp-34h] +
jmp sub_40329A  +
***
lea ecx [ebp-154h] +
jmp loc_41CA6A  +
***
lea ecx [ebp-10h] +
jmp loc_41CA6A  +
***
lea ecx [ebp-2Ch] +
mov eax [ebp-0C0h] +
mov eax [ebp-0C0h] +
lea ecx [ebp-88h] +
jmp sub_40BFF1  +
***
mov ecx [ebp-10h] +
jmp sub_4391CE  +
***
lea ecx [ebp-0B8h] +
jmp sub_4541B2  +
***
lea ecx [ebp-0C0h] +
lea ecx [ebp-2Ch] +
lea ecx [ebp-1E0h] +
lea ecx [ebp-5Ch] +
lea ecx [ebp-308h] +
jmp sub_457629  +
***
lea ecx [ebp-16Ch] +
jmp sub_457629  +
***
lea ecx [ebp-6Ch] +
jmp loc_458180  +
***
lea ecx [ebp-38h] +
lea ecx [ebp-38h] +
jmp sub_40BFF1  +
***
mov ecx [ebp-38h] +
mov ecx [ebp-38h] +
lea ecx [ebp-2Ch] +
jmp sub_406EAB  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-54h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-8] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FF6F0 +
jmp loc_4A1151  +
***
lea ecx [ebp-28h] +
lea ecx [ebp-28h] +
lea ecx [ebp-40h] +
lea ecx [ebp-28h] +
lea ecx [ebp-58h] +
jmp sub_406DE4  +
***
lea ecx [ebp-4Ch] +
lea ecx [ebp-2Ch] +
jmp sub_406DE4  +
***
lea ecx [ebp-18h] +
jmp sub_4391CE  +
***
mov eax offset unk_4FF858 +
jmp loc_4A1151  +
***
lea ecx [ebp-30h] +
jmp sub_406DE4  +
***
lea ecx [ebp-0B0h] +
jmp sub_4391CE  +
***
lea ecx [ebp-30h] +
jmp sub_406DE4  +
***
lea ecx [ebp-0B4h] +
lea ecx [ebp-84h] +
lea ecx [ebp-9Ch] +
jmp sub_406DE4  +
***
lea ecx [ebp-174h] +
lea ecx [ebp-2A8h] +
lea ecx [ebp-30h] +
lea ecx [ebp-27Ch] +
jmp sub_4539C6  +
***
jmp loc_4A1151  +
***
lea ecx [ebp-2Ch] +
lea ecx [ebp-2Ch] +
jmp sub_406DE4  +
***
lea ecx [ebp-0D8h] +
lea ecx [ebp-28h] +
lea ecx [ebp-0E4h] +
jmp sub_40329A  +
***
lea ecx [ebp-14h] +
jmp sub_45D632  +
***
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
jmp loc_408C92  +
***
lea ecx [ebp-20h] +
jmp loc_408C92  +
***
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
jmp loc_451C31  +
***
lea ecx [ebp-2Ch] +
lea ecx [ebp-38h] +
lea ecx [ebp-34h] +
lea ecx [ebp-28h] +
jmp sub_406DE4  +
***
lea ecx [ebp-20h] +
jmp loc_4067EC  +
***
mov ecx [ebp-334h] +
mov ecx [ebp-334h] +
mov ecx [ebp-334h] +
mov ecx [ebp-334h] +
mov ecx [ebp-334h] +
mov ecx [ebp-334h] +
mov ecx [ebp-334h] +
add ecx 37Ch +
jmp loc_4067EC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-370h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FFEDC +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0F0h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-8] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-3Ch] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-214h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB238 +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-74h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB238 +
jmp loc_4A1151  +
***
lea ecx [ebp-38h] +
lea ecx [ebp-38h] +
jmp sub_40BFF1  +
***
lea ecx [ebp-14h] +
jmp sub_4657BC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FFFB0 +
jmp loc_4A1151  +
***
lea ecx [ebp-10h] +
jmp loc_466C0C  +
***
lea ecx [ebp-1Ch] +
jmp loc_466C0C  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-34h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_500070 +
jmp loc_4A1151  +
***
lea ecx [ebp-44h] +
jmp loc_467283  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-48h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_50009C +
jmp loc_4A1151  +
***
lea ecx [ebp+14h] +
jmp loc_4067EC  +
***
lea ecx [ebp+14h] +
jmp loc_4067EC  +
***
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
add ecx 0E8h +
jmp sub_406DE4  +
***
lea ecx [ebp-54h] +
lea ecx [ebp-44h] +
jmp sub_406DE4  +
***
lea ecx [ebp-64h] +
lea ecx [ebp-28h] +
lea ecx [ebp-28h] +
lea ecx [ebp-28h] +
jmp sub_406DE4  +
***
lea ecx [ebp-58h] +
lea ecx [ebp-28h] +
lea ecx [ebp-28h] +
lea ecx [ebp-28h] +
lea ecx [ebp-28h] +
lea ecx [ebp-28h] +
jmp sub_406DE4  +
***
lea ecx [ebp-58h] +
lea ecx [ebp-90h] +
lea ecx [ebp-4Ch] +
lea ecx [ebp-28h] +
lea ecx [ebp-28h] +
lea ecx [ebp-28h] +
lea ecx [ebp-28h] +
jmp sub_406DE4  +
***
lea ecx [ebp-70h] +
lea ecx [ebp-2Ch] +
lea ecx [ebp-0A0h] +
lea ecx [ebp-64h] +
lea ecx [ebp-90h] +
lea ecx [ebp-0C0h] +
lea ecx [ebp-0E0h] +
jmp sub_41F347  +
***
lea ecx [ebp-44h] +
lea ecx [ebp-40h] +
lea ecx [ebp-58h] +
lea ecx [ebp-28h] +
jmp sub_406DE4  +
***
mov ecx [ebp-1Ch] +
mov eax [ebp-14h] +
mov eax [ebp-14h] +
and eax 2 +
jz locret_4A7027  +
and dword ptr [ebp-14h] 0FFFFFFFDh +
lea ecx [ebp-10h] +
jmp loc_45261C  +
retn   +
***
mov eax offset unk_5003C4 +
jmp loc_4A1151  +
***
lea ecx [ebp-28h] +
lea ecx [ebp-40h] +
lea ecx [ebp-18h] +
jmp sub_41F3B3  +
***
lea ecx [ebp-90h] +
jmp sub_406DE4  +
***
lea ecx [ebp-28h] +
lea ecx [ebp-40h] +
lea ecx [ebp-28h] +
lea ecx [ebp-44h] +
lea ecx [ebp-28h] +
jmp sub_406DE4  +
***
lea ecx [ebp-68h] +
lea ecx [ebp-7Ch] +
lea ecx [ebp-58h] +
lea ecx [ebp-40h] +
lea ecx [ebp-28h] +
jmp sub_406DE4  +
***
lea ecx [ebp-28h] +
lea ecx [ebp-40h] +
jmp sub_406DE4  +
***
lea ecx [ebp-28h] +
lea ecx [ebp-28h] +
jmp sub_406DE4  +
***
lea ecx [ebp-0A0h] +
lea ecx [ebp-40h] +
lea ecx [ebp-40h] +
lea ecx [ebp-2Ch] +
lea ecx [ebp-58h] +
lea ecx [ebp-88h] +
jmp sub_40F7AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0A4h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_500578 +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-34h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB2F8 +
jmp loc_4A1151  +
***
lea ecx [ebp+0Ch] +
lea ecx [ebp-20h] +
jmp sub_41101E  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_5005CC +
jmp loc_4A1151  +
***
lea ecx [ebp-44h] +
lea ecx [ebp-28h] +
lea ecx [ebp-40h] +
jmp sub_406DE4  +
***
lea ecx [ebp-0C4h] +
lea ecx [ebp-0C0h] +
lea ecx [ebp-0BCh] +
lea ecx [ebp-7Ch] +
lea ecx [ebp-8Ch] +
lea ecx [ebp-88h] +
lea ecx [ebp-98h] +
lea ecx [ebp-84h] +
lea ecx [ebp-78h] +
lea ecx [ebp-74h] +
lea ecx [ebp-80h] +
lea ecx [ebp-90h] +
lea ecx [ebp-0B0h] +
lea ecx [ebp-28h] +
lea ecx [ebp-28h] +
lea ecx [ebp-70h] +
lea ecx [ebp-28h] +
lea ecx [ebp-28h] +
lea ecx [ebp-70h] +
lea ecx [ebp-40h] +
lea ecx [ebp-28h] +
lea ecx [ebp-70h] +
lea ecx [ebp-40h] +
lea ecx [ebp-70h] +
lea ecx [ebp-40h] +
lea ecx [ebp-40h] +
lea ecx [ebp-70h] +
lea ecx [ebp-28h] +
lea ecx [ebp-28h] +
lea ecx [ebp-28h] +
lea ecx [ebp-0A8h] +
lea ecx [ebp-0A4h] +
lea ecx [ebp-0A0h] +
lea ecx [ebp-0CCh] +
lea ecx [ebp-28h] +
lea ecx [ebp-28h] +
lea ecx [ebp-28h] +
lea ecx [ebp-28h] +
lea ecx [ebp-58h] +
jmp sub_406DE4  +
***
lea ecx [ebp-5Ch] +
lea ecx [ebp-84h] +
lea ecx [ebp-74h] +
lea ecx [ebp-40h] +
jmp sub_40F7AC  +
***
mov ecx [ebp-10h] +
jmp sub_46E914  +
***
lea ecx [ebp-10h] +
jmp sub_46F042  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_500848 +
jmp loc_4A1151  +
***
lea ecx [ebp-0D4h] +
jmp sub_40BFF1  +
***
lea ecx [ebp-28h] +
lea ecx [ebp-40h] +
lea ecx [ebp-58h] +
jmp sub_406DE4  +
***
lea ecx [ebp-9Ch] +
lea ecx [ebp-40h] +
lea ecx [ebp-40h] +
lea ecx [ebp-5Ch] +
lea ecx [ebp-28h] +
lea ecx [ebp-8Ch] +
lea ecx [ebp-8Ch] +
jmp sub_40F7AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0A0h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_500958 +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-54h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0E0h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
lea ecx [ebp-14h] +
lea ecx [ebp-10h] +
jmp loc_47334E  +
***
lea ecx [ebp-28h] +
jmp sub_406DE4  +
***
lea ecx [ebp-34h] +
lea ecx [ebp-28h] +
jmp sub_406DE4  +
***
lea ecx [ebp-3Ch] +
lea ecx [ebp-28h] +
lea ecx [ebp-34h] +
jmp sub_473222  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-54h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_500A50 +
jmp loc_4A1151  +
***
lea ecx [ebp-0B4h] +
lea ecx [ebp-2Ch] +
lea ecx [ebp-5Ch] +
lea ecx [ebp-130h] +
lea ecx [ebp-40h] +
lea ecx [ebp-0ACh] +
lea ecx [ebp-44h] +
lea ecx [ebp-2Ch] +
lea ecx [ebp-94h] +
jmp loc_46C23B  +
***
lea ecx [ebp-3Ch] +
lea ecx [ebp-28h] +
lea ecx [ebp-34h] +
lea ecx [ebp-44h] +
jmp sub_47313F  +
***
lea ecx [ebp+8] +
lea ecx [ebp-34h] +
lea ecx [ebp-28h] +
lea ecx [ebp-3Ch] +
lea ecx [ebp-2Ch] +
jmp loc_406351  +
***
lea ecx [ebp-164h] +
jmp sub_43A7B0  +
***
lea ecx [ebp-38h] +
lea ecx [ebp-28h] +
lea ecx [ebp-94h] +
lea ecx [ebp-28h] +
lea ecx [ebp-3Ch] +
lea ecx [ebp-44h] +
jmp sub_47313F  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-98h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_500C34 +
jmp loc_4A1151  +
***
lea ecx [ebp-4Ch] +
lea ecx [ebp-28h] +
jmp sub_406DE4  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-9Ch] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_500C88 +
jmp loc_4A1151  +
***
mov ecx [ebp-10h] +
jmp sub_47379C  +
***
lea ecx [ebp-28h] +
lea ecx [ebp-28h] +
jmp sub_406EAB  +
***
mov ecx [ebp-10h] +
jmp sub_47379C  +
***
lea ecx [ebp-2Ch] +
lea ecx [ebp-28h] +
lea ecx [ebp-28h] +
lea ecx [ebp-28h] +
lea ecx [ebp-28h] +
lea ecx [ebp-58h] +
lea ecx [ebp-28h] +
jmp sub_406EAB  +
***
mov eax [ebp-48h] +
lea ecx [ebp-28h] +
lea ecx [ebp-28h] +
lea ecx [ebp-28h] +
lea ecx [ebp-5Ch] +
lea ecx [ebp-28h] +
jmp sub_406EAB  +
***
lea ecx [ebp-28h] +
lea ecx [ebp-28h] +
lea ecx [ebp-28h] +
lea ecx [ebp-64h] +
lea ecx [ebp-28h] +
jmp sub_406EAB  +
***
mov ecx [ebp-10h] +
jmp sub_47379C  +
***
lea ecx [ebp-28h] +
lea ecx [ebp-28h] +
lea ecx [ebp-54h] +
lea ecx [ebp-28h] +
jmp sub_406EAB  +
***
lea ecx [ebp-1Ch] +
lea ecx [ebp-40h] +
lea ecx [ebp-58h] +
lea ecx [ebp-28h] +
lea ecx [ebp-4Ch] +
lea ecx [ebp-40h] +
jmp sub_406EAB  +
***
lea ecx [ebp-28h] +
lea ecx [ebp-28h] +
lea ecx [ebp-2Ch] +
lea ecx [ebp-28h] +
lea ecx [ebp-28h] +
lea ecx [ebp-28h] +
mov eax [ebp-50h] +
lea ecx [ebp-28h] +
lea ecx [ebp-28h] +
lea ecx [ebp-28h] +
lea ecx [ebp-6Ch] +
lea ecx [ebp-28h] +
jmp sub_406EAB  +
***
mov ecx [ebp-10h] +
jmp sub_47379C  +
***
lea ecx [ebp-28h] +
push 18h  +
lea ecx [ebp-74h] +
lea ecx [ebp-40h] +
lea ecx [ebp-40h] +
jmp sub_406EAB  +
***
mov ecx [ebp-2Ch] +
lea ecx [ebp-28h] +
jmp sub_406EAB  +
***
mov ecx [ebp-30h] +
lea ecx [ebp-28h] +
jmp sub_406EAB  +
***
lea ecx [ebp-0B8h] +
mov eax [ebp-78h] +
mov eax [ebp-78h] +
push 18h  +
lea ecx [ebp-0C4h] +
lea ecx [ebp-40h] +
lea ecx [ebp-40h] +
jmp sub_406EAB  +
***
lea ecx [ebp-28h] +
jmp sub_406EAB  +
***
lea ecx [ebp-40h] +
jmp Mso20Win32Client_177  +
***
lea ecx [ebp-10h] +
jmp loc_476821  +
***
lea ecx [ebp-14h] +
lea ecx [ebp-24h] +
jmp loc_41A301  +
***
mov ecx [ebp-14h] +
jmp loc_41DAA1  +
***
lea ecx [ebp-18h] +
jmp loc_41A301  +
***
lea ecx [ebp-20h] +
jmp sub_442EFC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_5011DC +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-98h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
lea ecx [ebp-28h] +
jmp sub_406DE4  +
***
lea ecx [ebp-5Ch] +
lea ecx [ebp-28h] +
lea ecx [ebp-28h] +
lea ecx [ebp-40h] +
lea ecx [ebp-44h] +
lea ecx [ebp-28h] +
lea ecx [ebp-88h] +
lea ecx [ebp-28h] +
jmp sub_406DE4  +
***
lea ecx [ebp-28h] +
lea ecx [ebp-40h] +
jmp sub_406DE4  +
***
lea ecx [ebp-30h] +
jmp loc_47335C  +
***
lea ecx [ebp-40h] +
lea ecx [ebp-28h] +
jmp sub_406DE4  +
***
mov eax [ebp-10h] +
mov ecx [ebp-14h] +
mov ecx [ebp-18h] +
jmp ds:??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ  +
***
mov eax [ebp-58h] +
lea ecx [ebp-44h] +
jmp sub_406EAB  +
***
mov eax [ebp-74h] +
lea ecx [ebp-58h] +
lea ecx [ebp-40h] +
lea ecx [ebp-28h] +
jmp sub_406DE4  +
***
lea ecx [ebp-78h] +
jmp sub_406DE4  +
***
lea ecx [ebp-0A0h] +
lea ecx [ebp-2Ch] +
lea ecx [ebp-94h] +
jmp sub_406DE4  +
***
lea ecx [ebp-24Ch] +
lea ecx [ebp-234h] +
lea ecx [ebp-264h] +
lea ecx [ebp-2CCh] +
jmp sub_406DE4  +
***
lea ecx [ebp-280h] +
lea ecx [ebp-250h] +
lea ecx [ebp-268h] +
lea ecx [ebp-2B0h] +
lea ecx [ebp-298h] +
lea ecx [ebp-238h] +
jmp sub_406DE4  +
***
lea ecx [ebp-2Ch] +
lea ecx [ebp-5Ch] +
lea ecx [ebp-44h] +
jmp sub_406DE4  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-68h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-8] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_5014F0 +
jmp loc_4A1151  +
***
lea ecx [ebp-234h] +
lea ecx [ebp-27Ch] +
lea ecx [ebp-264h] +
lea ecx [ebp-27Ch] +
lea ecx [ebp-24Ch] +
lea ecx [ebp-27Ch] +
lea ecx [ebp-264h] +
lea ecx [ebp-27Ch] +
jmp sub_406DE4  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2B8h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-8] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_5015B8 +
jmp loc_4A1151  +
***
lea ecx [ebp-2Ch] +
jmp sub_406DE4  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-38h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-8] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_5016A8 +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-5Ch] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-8] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_501708 +
jmp loc_4A1151  +
***
lea ecx [ebp-38h] +
jmp loc_47B367  +
***
lea ecx [ebp-18h] +
jmp loc_47B367  +
***
lea ecx [ebp-48h] +
lea ecx [ebp-54h] +
lea ecx [ebp-28h] +
jmp sub_406DE4  +
***
lea ecx [ebp-48h] +
jmp sub_41A0AF  +
***
lea ecx [ebp-2B4h] +
lea ecx [ebp-27Ch] +
jmp sub_40ED56  +
***
lea ecx [ebp-248h] +
lea ecx [ebp-230h] +
lea ecx [ebp-260h] +
jmp sub_406DE4  +
***
lea ecx [ebp-258h] +
lea ecx [ebp-230h] +
lea ecx [ebp-248h] +
jmp sub_406DE4  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-268h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_5018C4 +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-68h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB238 +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_501908 +
jmp loc_4A1151  +
***
lea ecx [ebp-28h] +
jmp loc_40271F  +
***
lea ecx [ebp-78h] +
lea ecx [ebp-54h] +
lea ecx [ebp-94h] +
lea ecx [ebp-54h] +
lea ecx [ebp-6Ch] +
jmp sub_406DE4  +
***
lea ecx [ebp-44h] +
lea ecx [ebp-28h] +
jmp sub_406DE4  +
***
lea ecx [ebp-54h] +
lea ecx [ebp-40h] +
lea ecx [ebp-28h] +
jmp sub_406DE4  +
***
lea ecx [ebp-0C0h] +
lea ecx [ebp-80h] +
lea ecx [ebp-0E0h] +
lea ecx [ebp-98h] +
lea ecx [ebp-80h] +
lea ecx [ebp-0B0h] +
jmp sub_406DE4  +
***
lea ecx [ebp-4Ch] +
lea ecx [ebp-68h] +
lea ecx [ebp-28h] +
lea ecx [ebp-40h] +
jmp sub_406DE4  +
***
lea ecx [ebp-40h] +
lea ecx [ebp-28h] +
lea ecx [ebp-5Ch] +
lea ecx [ebp-28h] +
jmp sub_406DE4  +
***
lea ecx [ebp-44h] +
lea ecx [ebp-28h] +
lea ecx [ebp-64h] +
lea ecx [ebp-3Ch] +
jmp loc_43DDF8  +
***
lea ecx [ebp-38h] +
lea ecx [ebp-28h] +
lea ecx [ebp-58h] +
lea ecx [ebp-2Ch] +
jmp loc_43DDF8  +
***
lea ecx [ebp-28h] +
lea ecx [ebp-9Ch] +
lea ecx [ebp-58h] +
lea ecx [ebp-40h] +
lea ecx [ebp-80h] +
mov eax [ebp-70h] +
and eax 1 +
jz locret_4A88AD  +
and dword ptr [ebp-70h] 0FFFFFFFEh +
lea ecx [ebp-40h] +
jmp sub_406DE4  +
retn   +
***
lea ecx [ebp-3Ch] +
lea ecx [ebp-28h] +
jmp sub_406DE4  +
***
lea ecx [ebp-10Ch] +
lea ecx [ebp-40h] +
lea ecx [ebp-58h] +
lea ecx [ebp-28h] +
lea ecx [ebp-0E8h] +
lea ecx [ebp-11Ch] +
lea ecx [ebp-40h] +
lea ecx [ebp-70h] +
lea ecx [ebp-88h] +
jmp sub_406DE4  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-148h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_501C70 +
jmp loc_4A1151  +
***
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0E8h] +
xor ecx eax +
call sub_49FFB8  +
nop   +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB238 +
jmp loc_4A1151  +
***
lea ecx [ebp-2Ch] +
lea ecx [ebp-48h] +
jmp sub_411F11  +
***
lea ecx [ebp-2Ch] +
lea ecx [ebp-48h] +
jmp sub_411F11  +
***
lea ecx [ebp-1Ch] +
lea ecx [ebp-1Ch] +
jmp loc_480108  +
***
lea ecx [ebp-20h] +
lea ecx [ebp-20h] +
jmp loc_42801E  +
***
lea ecx [ebp-18h] +
lea ecx [ebp-20h] +
jmp loc_4067EC  +
***
lea ecx [ebp-18h] +
jmp loc_4067EC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_501E40 +
jmp loc_4A1151  +
***
lea ecx [ebp-18h] +
lea ecx [ebp-20h] +
jmp loc_4067EC  +
***
lea ecx [ebp-18h] +
lea ecx [ebp-20h] +
jmp loc_4067EC  +
***
lea ecx [ebp-1Ch] +
lea ecx [ebp-24h] +
jmp loc_4067EC  +
***
lea ecx [ebp-1Ch] +
jmp loc_4067EC  +
***
mov ecx [ebp-14h] +
mov eax [ebp-10h] +
mov eax [ebp-10h] +
mov eax [ebp-10h] +
and eax 4 +
jz locret_4A8C0E  +
and dword ptr [ebp-10h] 0FFFFFFFBh +
lea ecx [ebp-18h] +
jmp loc_40635E  +
retn   +
***
mov ecx [ebp-3Ch] +
lea ecx [ebp-24h] +
lea ecx [ebp-38h] +
lea ecx [ebp-28h] +
jmp loc_41F3D5  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-40h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_502084 +
jmp loc_4A1151  +
***
mov ecx [ebp-2C8h] +
lea ecx [ebp-28h] +
lea ecx [ebp-40h] +
lea ecx [ebp-2C4h] +
lea ecx [ebp-28h] +
lea ecx [ebp-70h] +
lea ecx [ebp-58h] +
jmp sub_406DE4  +
***
mov ecx [ebp-3A4h] +
add ecx 4 +
jmp sub_406DE4  +
***
pop ecx  +
retn   +
***
lea ecx [ebp-3Ch] +
lea ecx [ebp-28h] +
lea ecx [ebp-34h] +
jmp loc_480C69  +
***
mov eax [ebp-40h] +
lea ecx [ebp-78h] +
lea ecx [ebp-58h] +
lea ecx [ebp-30h] +
jmp loc_47CB49  +
***
lea ecx [ebp-44h] +
lea ecx [ebp-2Ch] +
jmp sub_406DE4  +
***
lea ecx [ebp-28h] +
lea ecx [ebp-60h] +
jmp sub_41F3B3  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-68h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_5022D8 +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-60h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-8] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
lea ecx [ebp-28h] +
lea ecx [ebp-9Ch] +
lea ecx [ebp-40h] +
jmp sub_406DE4  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0B4h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_50230C +
jmp loc_4A1151  +
***
lea ecx [ebp-28h] +
jmp sub_406DE4  +
***
mov ecx [ebp-24h] +
mov eax [ebp-10h] +
mov eax [ebp-10h] +
mov eax [ebp-10h] +
mov eax [ebp-10h] +
mov eax [ebp-10h] +
mov eax [ebp-10h] +
and eax 20h +
jz locret_4A8FB4  +
and dword ptr [ebp-10h] 0FFFFFFDFh +
lea ecx [ebp-3Ch] +
jmp loc_43DDF8  +
retn   +
***
lea ecx [ebp-0E0h] +
jmp sub_4126B8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0E4h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_502408 +
jmp loc_4A1151  +
***
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
add ecx 30h +
jmp sub_406DE4  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_502434 +
jmp loc_4A1151  +
***
lea ecx [ebp-98h] +
lea ecx [ebp-18h] +
jmp loc_4067EC  +
***
mov ecx [ebp+8] +
jmp loc_4049A7  +
***
lea ecx [ebp-2Ch] +
jmp sub_406DE4  +
***
lea ecx [ebp-20h] +
lea ecx [ebp-18h] +
mov ecx [ebp+8] +
jmp loc_4049A7  +
***
lea ecx [ebp+8] +
jmp loc_4049A7  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_50256C +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_502598 +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-88h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
mov eax offset unk_4FC238 +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-45Ch] +
xor ecx eax +
call sub_49FFB8  +
nop   +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp-14h] +
jmp loc_41DAA1  +
***
lea ecx [ebp-44h] +
lea ecx [ebp-2Ch] +
jmp sub_406EAB  +
***
lea ecx [ebp-40h] +
lea ecx [ebp-28h] +
lea ecx [ebp-28h] +
lea ecx [ebp-58h] +
lea ecx [ebp-28h] +
lea ecx [ebp-28h] +
jmp sub_406DE4  +
***
lea ecx [ebp-28h] +
jmp sub_406DE4  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-74Ch] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_5026C4 +
jmp loc_4A1151  +
***
lea ecx [ebp-3D0h] +
lea ecx [ebp-28h] +
jmp sub_406DE4  +
***
lea ecx [ebp-94h] +
jmp sub_411F11  +
***
lea ecx [ebp-28h] +
jmp sub_406DE4  +
***
lea ecx [ebp-230h] +
mov eax [ebp-254h] +
mov eax [ebp-254h] +
lea ecx [ebp-278h] +
jmp sub_406FCB  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-27Ch] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_5027D4 +
jmp loc_4A1151  +
***
lea ecx [ebp-40h] +
lea ecx [ebp-74h] +
lea ecx [ebp-28h] +
jmp sub_406DE4  +
***
lea ecx [ebp-50h] +
lea ecx [ebp-40h] +
mov eax [ebp-2Ch] +
lea ecx [ebp-28h] +
jmp sub_406DE4  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-54h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_502854 +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-440h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
lea ecx [ebp-38h] +
lea ecx [ebp-38h] +
jmp sub_40BFF1  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-64h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-8] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_502898 +
jmp loc_4A1151  +
***
mov eax [ebp-30h] +
and eax 1 +
jz locret_4A95BC  +
and dword ptr [ebp-30h] 0FFFFFFFEh +
lea ecx [ebp-28h] +
jmp sub_406DE4  +
retn   +
***
lea ecx [ebp-40h] +
lea ecx [ebp-28h] +
lea ecx [ebp-50h] +
jmp loc_406351  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-64h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_5029C0 +
jmp loc_4A1151  +
***
lea ecx [ebp-28h] +
lea ecx [ebp-58h] +
lea ecx [ebp-80h] +
lea ecx [ebp-88h] +
lea ecx [ebp-8Ch] +
lea ecx [ebp-94h] +
lea ecx [ebp-90h] +
lea ecx [ebp-40h] +
jmp sub_406DE4  +
***
lea ecx [ebp-2Ch] +
lea ecx [ebp-3Ch] +
lea ecx [ebp-30h] +
lea ecx [ebp-50h] +
lea ecx [ebp-38h] +
lea ecx [ebp-34h] +
lea ecx [ebp-28h] +
jmp sub_406DE4  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-5Ch] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_502A68 +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-80h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-8] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10Ch] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10DCh] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB238 +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-7Ch] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-174h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-108h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
lea ecx [ebp-2Ch] +
jmp sub_406DE4  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-38h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-8] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_502AC4 +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-300h] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
lea ecx [ebp+18h] +
jmp loc_48FAD6  +
***
lea ecx [ebp-54h] +
jmp sub_4067D3  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-94h] +
xor ecx eax +
call sub_49FFB8  +
nop   +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_502B50 +
jmp loc_4A1151  +
***
lea ecx [ebp-2A0h] +
lea ecx [ebp-270h] +
lea ecx [ebp-2C8h] +
lea ecx [ebp-288h] +
lea ecx [ebp-234h] +
lea ecx [ebp-24Ch] +
jmp sub_406DE4  +
***
lea ecx [ebp-858h] +
lea ecx [ebp-840h] +
lea ecx [ebp-898h] +
lea ecx [ebp-890h] +
lea ecx [ebp-894h] +
lea ecx [ebp-88Ch] +
lea ecx [ebp-888h] +
lea ecx [ebp-884h] +
lea ecx [ebp-880h] +
lea ecx [ebp-8A0h] +
lea ecx [ebp-828h] +
lea ecx [ebp-870h] +
jmp sub_406DE4  +
***
mov eax [ebp-94h] +
mov eax [ebp-94h] +
mov eax [ebp-94h] +
and eax 4 +
jz locret_4A9AAB  +
and dword ptr [ebp-94h] 0FFFFFFFBh +
mov ecx [ebp-0A0h] +
jmp sub_406DE4  +
retn   +
***
lea ecx [ebp-7Ch] +
jmp sub_40ED56  +
***
lea ecx [ebp-28h] +
lea ecx [ebp-74h] +
jmp sub_41A0AF  +
***
lea ecx [ebp-28h] +
lea ecx [ebp-90h] +
jmp loc_40271F  +
***
lea ecx [ebp-98h] +
lea ecx [ebp-28h] +
lea ecx [ebp-0B4h] +
jmp sub_406FCB  +
***
lea ecx [ebp-2E8h] +
lea ecx [ebp-260h] +
lea ecx [ebp-2B0h] +
lea ecx [ebp-290h] +
lea ecx [ebp-248h] +
lea ecx [ebp-278h] +
jmp sub_406DE4  +
***
lea ecx [ebp-40h] +
lea ecx [ebp-28h] +
jmp sub_406DE4  +
***
lea ecx [ebp-1614h] +
lea ecx [ebp-15F4h] +
lea ecx [ebp-15D4h] +
lea ecx [ebp-15B4h] +
lea ecx [ebp-1594h] +
lea ecx [ebp-1574h] +
lea ecx [ebp-1554h] +
lea ecx [ebp-1534h] +
lea ecx [ebp-1514h] +
lea ecx [ebp-14F4h] +
lea ecx [ebp-14D4h] +
lea ecx [ebp-14B4h] +
lea ecx [ebp-1494h] +
lea ecx [ebp-1474h] +
lea ecx [ebp-1454h] +
lea ecx [ebp-1434h] +
lea ecx [ebp-1414h] +
lea ecx [ebp-13F4h] +
lea ecx [ebp-13D4h] +
lea ecx [ebp-13B4h] +
lea ecx [ebp-1394h] +
lea ecx [ebp-1374h] +
lea ecx [ebp-1354h] +
lea ecx [ebp-1334h] +
lea ecx [ebp-1314h] +
lea ecx [ebp-12F4h] +
lea ecx [ebp-12D4h] +
lea ecx [ebp-12B4h] +
lea ecx [ebp-1294h] +
lea ecx [ebp-1274h] +
lea ecx [ebp-1254h] +
lea ecx [ebp-1234h] +
lea ecx [ebp-1214h] +
lea ecx [ebp-11F4h] +
lea ecx [ebp-11D4h] +
lea ecx [ebp-11B4h] +
lea ecx [ebp-1194h] +
lea ecx [ebp-1174h] +
lea ecx [ebp-1154h] +
lea ecx [ebp-1134h] +
lea ecx [ebp-1114h] +
lea ecx [ebp-10F4h] +
lea ecx [ebp-10D4h] +
lea ecx [ebp-10B4h] +
lea ecx [ebp-1614h] +
lea ecx [ebp-163Ch] +
lea ecx [ebp-1074h] +
mov eax [ebp-1644h] +
and eax 1 +
jz locret_4A9E7B  +
and dword ptr [ebp-1644h] 0FFFFFFFEh +
mov ecx [ebp-1648h] +
jmp sub_406DE4  +
retn   +
***
lea ecx [ebp-40h] +
lea ecx [ebp-28h] +
lea ecx [ebp-58h] +
jmp sub_406DE4  +
***
lea ecx [ebp-28h] +
jmp sub_406DE4  +
***
lea ecx [ebp-28h] +
lea ecx [ebp-2Ch] +
lea ecx [ebp-4Ch] +
lea ecx [ebp-3Ch] +
jmp sub_426B87  +
***
lea ecx [ebp-98h] +
lea ecx [ebp-94h] +
lea ecx [ebp-28h] +
jmp sub_406DE4  +
***
lea ecx [ebp-107Ch] +
lea ecx [ebp-1078h] +
jmp sub_406DE4  +
***
lea ecx [ebp-0B4h] +
lea ecx [ebp-50h] +
lea ecx [ebp-30h] +
lea ecx [ebp-30h] +
jmp sub_40BFF1  +
***
lea ecx [ebp-30h] +
jmp sub_40BFF1  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-40h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_503100 +
jmp loc_4A1151  +
***
mov ecx [ebp-14h] +
mov ecx [ebp-14h] +
mov ecx [ebp-14h] +
mov ecx [ebp-14h] +
add ecx 4Ch +
jmp sub_406DE4  +
***
lea ecx [ebp-68h] +
lea ecx [ebp-2Ch] +
lea ecx [ebp-44h] +
jmp sub_406DE4  +
***
lea ecx [ebp-8Ch] +
lea ecx [ebp-80h] +
lea ecx [ebp-50h] +
lea ecx [ebp-134h] +
lea ecx [ebp-0C8h] +
lea ecx [ebp-68h] +
lea ecx [ebp-0B0h] +
lea ecx [ebp-124h] +
lea ecx [ebp-0FCh] +
lea ecx [ebp-2Ch] +
jmp sub_406DE4  +
***
lea ecx [ebp-190h] +
lea ecx [ebp-38h] +
lea ecx [ebp-0C0h] +
lea ecx [ebp-50h] +
lea ecx [ebp-0A8h] +
lea ecx [ebp-78h] +
lea ecx [ebp-90h] +
lea ecx [ebp-12Ch] +
lea ecx [ebp-108h] +
jmp sub_40BFF1  +
***
lea ecx [ebp-1BCh] +
lea ecx [ebp-0ECh] +
lea ecx [ebp-11Ch] +
lea ecx [ebp-0BCh] +
lea ecx [ebp-104h] +
lea ecx [ebp-74h] +
lea ecx [ebp-0D4h] +
lea ecx [ebp-194h] +
lea ecx [ebp-8Ch] +
lea ecx [ebp-28h] +
lea ecx [ebp-8Ch] +
lea ecx [ebp-28h] +
lea ecx [ebp-8Ch] +
lea ecx [ebp-28h] +
lea ecx [ebp-8Ch] +
lea ecx [ebp-0A4h] +
push 30h  +
lea ecx [ebp-214h] +
jmp sub_410A11  +
***
lea ecx [ebp-0ECh] +
lea ecx [ebp-2Ch] +
lea ecx [ebp-74h] +
lea ecx [ebp-50h] +
lea ecx [ebp-8Ch] +
lea ecx [ebp-0DCh] +
lea ecx [ebp-0B4h] +
lea ecx [ebp-5Ch] +
jmp sub_40BFF1  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-11Ch] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-8] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_503430 +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-234h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_4FB16C +
jmp loc_4A1151  +
***
lea ecx [ebp-1Ch] +
jmp sub_41F3B3  +
***
lea ecx [ebp-40h] +
jmp sub_406DE4  +
***
lea ecx [ebp-38h] +
mov eax [ebp-5Ch] +
and eax 1 +
jz locret_4AA423  +
and dword ptr [ebp-5Ch] 0FFFFFFFEh +
mov ecx [ebp-60h] +
jmp sub_406DE4  +
retn   +
***
mov eax [ebp-30h] +
lea ecx [ebp-0E4h] +
lea ecx [ebp-28h] +
jmp sub_406DE4  +
***
lea ecx [ebp-2Ch] +
jmp sub_40329A  +
***
lea ecx [ebp-38h] +
jmp sub_40329A  +
***
lea ecx [ebp-38h] +
lea ecx [ebp-38h] +
jmp sub_40BFF1  +
***
mov ecx [edx-8] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_503630 +
jmp loc_4A1151  +
***
lea ecx [ebp-28h] +
lea ecx [ebp-28h] +
jmp sub_410A44  +
***
lea ecx [ebp-58h] +
lea ecx [ebp-28h] +
mov eax [ebp-40Ch] +
lea ecx [ebp-40h] +
lea ecx [ebp-74h] +
jmp sub_411F11  +
***
mov eax [ebp-3E8h] +
lea ecx [ebp-28h] +
lea ecx [ebp-40h] +
lea ecx [ebp-28h] +
lea ecx [ebp-40h] +
jmp sub_406DE4  +
***
lea ecx [ebp-40h] +
lea ecx [ebp-28h] +
lea ecx [ebp-40h] +
lea ecx [ebp-28h] +
lea ecx [ebp-58h] +
jmp sub_406DE4  +
***
lea ecx [ebp-40h] +
lea ecx [ebp-28h] +
jmp sub_406DE4  +
***
lea ecx [ebp-230h] +
lea ecx [ebp-278h] +
jmp loc_40271F  +
***
lea ecx [ebp-230h] +
jmp sub_406DE4  +
***
mov ecx [edx-4] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_5038CC +
jmp loc_4A1151  +
***
lea ecx [ebp-5Ch] +
lea ecx [ebp-2Ch] +
lea ecx [ebp-44h] +
lea ecx [ebp-78h] +
jmp loc_406351  +
***
lea ecx [ebp-14h] +
jmp loc_406351  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_503970 +
jmp loc_4A1151  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-34h] +
xor ecx eax +
call sub_49FFB8  +
mov ecx [edx-8] +
xor ecx eax +
call sub_49FFB8  +
mov eax offset unk_50399C +
jmp loc_4A1151  +
***
mov ecx offset dword_50B660 +
mov ecx offset unk_50CBC0 +
mov ecx offset unk_508B70 +
mov ecx dword_50CBEC +
mov ecx off_508B88 +
mov ecx off_508B94 +
mov ecx off_508BA0 +
mov ecx off_508BAC +
mov ecx off_508BB8 +
mov ecx off_508BC4 +
pop ecx  +
mov ecx offset unk_508BF0 +
mov eax dword_50CBF0 +
mov eax dword_50CBF4 +
mov eax dword_50CBF8 +
mov ecx offset unk_508C10 +
jmp sub_406DE4  +
***
mov ecx dword_50CC10 +
test ecx ecx +
jz locret_4AA94B  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
retn   +
***
mov ecx offset unk_50CD14 +
jmp sub_406DE4  +
***
mov ecx offset unk_508C30 +
jmp sub_406DE4  +
***
mov ecx offset unk_50CDD4 +
jmp sub_406DE4  +
***
mov ecx offset unk_50CE80 +
jmp sub_406DE4  +
***
mov ecx offset unk_50CE9C +
jmp sub_406DE4  +
***
mov ecx offset unk_50CEC0 +
jmp sub_406DE4  +
***
mov ecx offset unk_50CEDC +
jmp sub_406DE4  +
***
mov ecx offset unk_50CEF8 +
jmp sub_406DE4  +
***
mov ecx offset unk_50CF1C +
jmp sub_406DE4  +
***
mov ecx offset unk_50CF38 +
jmp sub_406DE4  +
***
mov ecx offset unk_50CF54 +
jmp sub_406DE4  +
***
mov ecx offset unk_50CF90 +
jmp sub_406DE4  +
***
mov ecx offset dword_50CFC0 +
jmp sub_406DE4  +
***
mov ecx offset unk_50CFF4 +
jmp sub_406DE4  +
***
push 0  +
mov eax offset loc_4A35A4 +
call sub_4A19B9  +
and dword ptr [ebp-4] 0 +
push offset loc_41A062  +
push 1  +
push 40h  +
push offset off_508C50  +
call sub_4A03BE  +
call sub_4A198D  +
retn   +
***
push 0  +
mov eax offset loc_4A35A4 +
call sub_4A19B9  +
and dword ptr [ebp-4] 0 +
push offset loc_41A4D8  +
push 8  +
push 30h  +
push offset unk_508E10  +
call sub_4A03BE  +
call sub_4A198D  +
retn   +
***
push 0  +
mov eax offset loc_4A35A4 +
call sub_4A19B9  +
and dword ptr [ebp-4] 0 +
push offset loc_41A4D8  +
push 8  +
push 30h  +
push offset unk_508C90  +
call sub_4A03BE  +
call sub_4A198D  +
retn   +
***
push 0  +
mov eax offset loc_4A35A4 +
call sub_4A19B9  +
and dword ptr [ebp-4] 0 +
push offset loc_41A4D8  +
push 10h  +
push 30h  +
push offset unk_509290  +
call sub_4A03BE  +
call sub_4A198D  +
retn   +
***
push 0  +
mov eax offset loc_4A35A4 +
call sub_4A19B9  +
and dword ptr [ebp-4] 0 +
push offset loc_41A4D8  +
push 10h  +
push 30h  +
push offset unk_508F90  +
call sub_4A03BE  +
call sub_4A198D  +
retn   +
***
mov ecx offset dword_509590 +
mov ecx offset dword_50B880 +
test esi esi +
pop ecx  +
mov ecx dword_50BB60 +
pop ecx  +
test esi esi +
mov ecx offset dword_50BBA0 +
mov ecx offset dword_50BC80 +
pop ecx  +
mov ecx dword_50D08C +
pop ecx  +
retn   +
***
push 0  +
mov eax offset loc_4A35A4 +
call sub_4A19B9  +
and dword ptr [ebp-4] 0 +
push offset sub_406A53  +
push 4  +
push 1Ch  +
push offset dword_50BFF0  +
call sub_4A03BE  +
call sub_4A198D  +
retn   +
***
push 0  +
mov eax offset loc_4A35A4 +
call sub_4A19B9  +
and dword ptr [ebp-4] 0 +
push offset sub_406A53  +
push 6  +
push 1Ch  +
push offset unk_509810  +
call sub_4A03BE  +
call sub_4A198D  +
retn   +
***
push 0  +
mov eax offset loc_4A35A4 +
call sub_4A19B9  +
and dword ptr [ebp-4] 0 +
push offset sub_406A53  +
push 3  +
push 1Ch  +
push offset unk_5097B0  +
call sub_4A03BE  +
call sub_4A198D  +
retn   +
***
mov ecx dword_50D0A4 +
test ecx ecx +
jz locret_4AAC23  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
retn   +
***
mov ecx offset dword_50D0AC +
jmp loc_43FE8F  +
***
mov ecx offset unk_5098C0 +
jmp sub_406DE4  +
***
mov ecx offset unk_5098E0 +
jmp sub_406DE4  +
***
mov ecx offset dword_509948 +
mov eax dword_50D0FC +
pop ecx  +
mov ecx offset unk_50BD14 +
mov ecx offset dword_50BD30 +
pop ecx  +
mov ecx dword_50BD80 +
mov ecx dword_50BD84 +
retn   +
***
pop ecx  +
mov off_509968 offset off_4CBD78 +
mov ecx offset off_509970 +
mov ecx offset dword_50BDE8 +
mov ecx offset dword_50BDF0 +
mov ecx offset dword_50BDFC +
mov ecx offset unk_50BE08 +
mov ecx offset unk_5099E0 +
mov ecx offset dword_50BE20 +
mov eax dword_50BE14 +
mov eax dword_50BE38 +
pop ecx  +
mov ecx offset dword_509A40 +
mov ecx dword_50BE70 +
mov ecx dword_50BE74 +
mov ecx dword_50BE78 +
mov ecx dword_50BE7C +
test ecx ecx +
jz locret_4AADFF  +
and dword_50BE7C 0 +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+8]  +
retn   +
***
call sub_4A19B9  +
and dword ptr [ebp-4] 0 +
push offset loc_41A4D8  +
push 20h  +
push 38h  +
push offset off_509A70  +
call sub_4A03BE  +
call sub_4A198D  +
retn   +
***
mov ecx dword_50BE80 +
test ecx ecx +
jz locret_4AAE5C  +
and dword_50BE80 0 +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+8]  +
retn   +
***
mov ecx offset unk_50D1D0 +
jmp sub_406DE4  +
***
mov ecx offset dword_50A188 +
jmp loc_47ADF6  +
***
mov ecx offset off_50A194 +
jmp loc_47CB61  +
***
mov ecx offset dword_50BEB4 +
mov ecx offset unk_50A1C0 +
jmp sub_406DE4  +
***
mov ecx offset dword_50D1EC +
jmp sub_467237  +
***
mov ecx offset dword_50A1E0 +
jmp sub_406DE4  +
***
mov ecx dword_50A214 +
test ecx ecx +
jnz sub_401A51  +
retn   +
***
mov ecx offset dword_50A220 +
jmp sub_406DE4  +
***
mov ecx offset dword_50A240 +
jmp sub_406DE4  +
***
mov ecx dword_50D20C +
test ecx ecx +
jz locret_4AAEE3  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
retn   +
***
push 0  +
mov eax offset loc_4A35A4 +
call sub_4A19B9  +
and dword ptr [ebp-4] 0 +
push offset sub_48CED9  +
push 36h  +
push 34h  +
push offset dword_50C0B0  +
call sub_4A03BE  +
call sub_4A198D  +
retn   +
***
mov ecx offset unk_50A260 +
jmp sub_406DE4  +
***
push 0  +
mov eax offset loc_4A35A4 +
call sub_4A19B9  +
and dword ptr [ebp-4] 0 +
push offset sub_406A53  +
push 9  +
push 1Ch  +
push offset unk_50A280  +
call sub_4A03BE  +
call sub_4A198D  +
retn   +
***
mov ecx offset dword_50A380 +
jmp sub_406DE4  +
***
mov ecx offset dword_50A3A0 +
jmp sub_406DE4  +
***
push offset unk_50BEC0  +
call ds:_Mtx_destroy_in_situ  +
pop ecx  +
retn   +
***
mov ecx offset unk_50D238 +
call sub_419418  +
mov ecx offset unk_50D220 +
jmp sub_406DE4  +
***
pop ecx  +
mov eax hLibModule +
mov ecx off_50A3B8 +
mov ecx dword_50BF2C +
mov ecx dword_50A3D8 +
mov ecx offset unk_50A3E0 +
mov ecx offset dword_50BF30 +
mov ecx offset unk_50A400 +
retn   +
***
mov ecx offset unk_50B1E0 +
jmp loc_49E849  +
***
mov ecx offset dword_50B240 +
jmp loc_49EBB1  +
***
mov ecx offset unk_50B614 +
jmp loc_4A121F  +
***
