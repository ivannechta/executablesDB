retf 0  +
***
retn   +
***
retn 0  +
***
retf   +
***
mov edi edi +
push esi  +
mov esi eax +
xor eax eax +
mov ecx edx +
test edx edx +
jz loc_1005010  +
cmp [esi] ax +
jz loc_100500C  +
inc esi  +
inc esi  +
dec edx  +
jnz loc_1005002  +
test edx edx +
jnz loc_1005015  +
mov eax 80070057h +
pop esi  +
test edi edi +
jz locret_1005026  +
test eax eax +
jl loc_1005023  +
sub ecx edx +
mov [edi] ecx +
retn   +
and dword ptr [edi] 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_1005061  +
cmp [ebp+arg_4] eax +
jz loc_100505D  +
movzx edx word ptr [ebx] +
test dx dx +
jz loc_100505D  +
mov [ecx] dx +
inc ecx  +
inc ecx  +
inc ebx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_1005040  +
test esi esi +
jnz loc_1005069  +
dec ecx  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
xor edx edx +
mov [ecx] dx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1005077  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
and [ebp+var_4] 0 +
xor eax eax +
inc eax  +
test byte ptr dword_1013C7C al +
jnz loc_10050F0  +
or dword_1013C7C eax +
mov dword_1013C5C offset unk_10120D8 +
mov dword_1013C60 offset unk_1012138 +
mov dword_1013C64 offset unk_1012198 +
mov dword_1013C68 offset unk_10121F8 +
mov dword_1013C6C offset unk_1012258 +
mov dword_1013C70 offset unk_10122B8 +
mov dword_1013C74 offset unk_1012318 +
mov dword_1013C78 offset unk_1012378 +
push ebx  +
push esi  +
push edi  +
push 2  +
pop ebx  +
test byte ptr dword_1013C7C bl +
jnz loc_1005118  +
and dword_1013B50 0 +
or dword_1013C7C ebx +
mov dword_1013B4C eax +
xor eax eax +
mov edi offset unk_1013B54 +
stos   +
push offset off_1013B44  +
call sub_100BFEB  +
test byte ptr dword_1013C7C 4 +
mov esi offset unk_10123D8 +
jnz loc_100516F  +
or dword_1013C7C 4 +
mov dword_1013C44 esi +
mov dword_1013C48 offset unk_1012438 +
mov dword_1013C4C offset unk_1012498 +
mov dword_1013C50 offset unk_10124F8 +
mov dword_1013C54 offset unk_1012558 +
mov dword_1013C58 offset unk_10125B8 +
test byte ptr dword_1013C7C 8 +
jnz loc_1005194  +
and dword_1013B3C 0 +
or dword_1013C7C 8 +
xor eax eax +
mov edi offset unk_1013B40 +
mov dword_1013B38 ebx +
stos   +
push offset off_1013B30  +
call sub_100BFEB  +
test byte ptr dword_1013C7C 10h +
jnz loc_10051EF  +
or dword_1013C7C 10h +
mov eax offset unk_1012BF8 +
mov dword_1013C28 offset unk_1012B98 +
mov dword_1013C2C eax +
mov dword_1013C30 offset unk_1012C58 +
mov dword_1013C34 offset unk_1012CB8 +
mov dword_1013C38 offset unk_1012DD8 +
mov dword_1013C3C offset unk_1012978 +
mov dword_1013C40 eax +
test byte ptr dword_1013C7C 20h +
jnz loc_1005215  +
and dword_1013B24 0 +
and dword_1013B28 0 +
or dword_1013C7C 20h +
xor eax eax +
mov edi offset unk_1013B2C +
stos   +
push offset off_1013B1C  +
call sub_100BFEB  +
test byte ptr dword_1013C7C 40h +
mov ebx offset unk_10127F8 +
jnz loc_1005268  +
or dword_1013C7C 40h +
mov dword_1013C10 esi +
mov dword_1013C14 offset unk_1012FC8 +
mov dword_1013C18 offset unk_1012F68 +
mov dword_1013C1C ebx +
mov dword_1013C20 offset unk_1013028 +
mov dword_1013C24 offset unk_1012B28 +
test byte ptr dword_1013C7C 80h +
push 3  +
pop esi  +
jnz loc_1005293  +
and dword_1013B14 0 +
or dword_1013C7C 80h +
xor eax eax +
mov edi offset unk_1013B18 +
mov dword_1013B10 esi +
stos   +
push offset off_1013B08  +
call sub_100BFEB  +
mov eax 100h +
test dword_1013C7C eax +
jnz loc_1005324  +
or dword_1013C7C eax +
mov dword_1013BE0 offset unk_1012438 +
mov dword_1013BE4 ebx +
mov dword_1013BE8 offset unk_10133F8 +
mov dword_1013BEC offset unk_1013088 +
mov dword_1013BF0 offset unk_10130E8 +
mov dword_1013BF4 offset unk_1013148 +
mov dword_1013BF8 offset unk_10131B8 +
mov dword_1013BFC offset unk_1013218 +
mov dword_1013C00 offset unk_1013278 +
mov dword_1013C04 offset unk_10132D8 +
mov dword_1013C08 offset unk_1013338 +
mov dword_1013C0C offset unk_1013398 +
mov eax 200h +
test dword_1013C7C eax +
jnz loc_100534C  +
and dword_1013B00 0 +
or dword_1013C7C eax +
xor eax eax +
mov edi offset unk_1013B04 +
mov dword_1013AFC esi +
stos   +
push offset off_1013AF4  +
call sub_100BFEB  +
mov eax 400h +
test dword_1013C7C eax +
jnz loc_10053AF  +
or dword_1013C7C eax +
mov dword_1013BC4 offset unk_1012498 +
mov dword_1013BC8 offset unk_1013518 +
mov dword_1013BCC offset unk_1013578 +
mov dword_1013BD0 offset unk_10135D8 +
mov dword_1013BD4 offset unk_1013638 +
mov dword_1013BD8 offset unk_1013698 +
mov dword_1013BDC offset unk_1012B28 +
mov eax 800h +
test dword_1013C7C eax +
jnz loc_10053D7  +
and dword_1013AEC 0 +
or dword_1013C7C eax +
xor eax eax +
mov edi offset unk_1013AF0 +
mov dword_1013AE8 esi +
stos   +
push offset off_1013AE0  +
call sub_100BFEB  +
mov eax 1000h +
test dword_1013C7C eax +
jnz loc_1005426  +
or dword_1013C7C eax +
mov dword_1013BB0 offset unk_10124F8 +
mov dword_1013BB4 offset unk_10136F8 +
mov dword_1013BB8 offset unk_1013758 +
mov dword_1013BBC offset unk_10137B8 +
mov dword_1013BC0 offset unk_1013818 +
mov eax 2000h +
test dword_1013C7C eax +
jnz loc_100544E  +
and dword_1013AD8 0 +
or dword_1013C7C eax +
xor eax eax +
mov edi offset unk_1013ADC +
mov dword_1013AD4 esi +
stos   +
mov ebx offset off_1013ACC +
push ebx  +
call sub_100BFEB  +
mov eax 4000h +
test dword_1013C7C eax +
jnz loc_10054BC  +
or dword_1013C7C eax +
mov dword_1013B90 offset unk_1012558 +
mov dword_1013B94 offset unk_1013878 +
mov dword_1013B98 offset unk_10138D8 +
mov dword_1013B9C offset unk_1013938 +
mov dword_1013BA0 offset unk_1013998 +
mov dword_1013BA4 offset unk_10139F8 +
mov dword_1013BA8 offset unk_1013A58 +
mov dword_1013BAC offset unk_10127F8 +
mov eax 8000h +
test dword_1013C7C eax +
jnz loc_10054E4  +
and dword_1013AC4 0 +
or dword_1013C7C eax +
xor eax eax +
mov edi offset unk_1013AC8 +
mov dword_1013AC0 esi +
stos   +
mov esi offset off_1013AB8 +
push esi  +
call sub_100BFEB  +
xor eax eax +
cmp dword_1012660 eax +
jnz loc_1005543  +
cmp dword_1012120 eax +
jnz loc_1005543  +
cmp dword_1012180 eax +
jnz loc_1005543  +
cmp dword_10121E0 eax +
jnz loc_1005543  +
cmp dword_1012240 eax +
jnz loc_1005543  +
cmp dword_10122A0 eax +
jnz loc_1005543  +
cmp dword_1012300 eax +
jnz loc_1005543  +
cmp dword_1012360 eax +
jnz loc_1005543  +
cmp dword_10123C0 eax +
jnz loc_1005543  +
mov dword_1012180 1 +
mov edi [ebp+arg_0] +
push 5  +
lea eax [ebp+var_18] +
push eax  +
push edi  +
mov [ebp+var_18] offset off_1013B08 +
mov [ebp+var_14] offset off_1013AF4 +
mov [ebp+var_10] ebx +
mov [ebp+var_C] offset off_1013AE0 +
mov [ebp+var_8] esi +
call sub_100CE6C  +
test eax eax +
jge loc_1005574  +
mov [ebp+var_4] eax +
push dword_1013B48  +
push off_1013B44  +
push edi  +
call sub_100D1FF  +
test eax eax +
jge loc_100558D  +
mov [ebp+var_4] eax +
push 4  +
lea eax [ebp+var_14] +
push eax  +
push edi  +
mov [ebp+var_14] offset unk_1012678 +
mov [ebp+var_10] offset unk_10126D8 +
mov [ebp+var_C] offset unk_10134B8 +
mov [ebp+var_8] offset unk_1012618 +
call sub_100D016  +
test eax eax +
jge loc_10055BC  +
mov [ebp+var_4] eax +
cmp dword_1013500 0 +
jz loc_1005609  +
push 2  +
lea eax [ebp+var_C] +
push eax  +
push edi  +
mov [ebp+var_C] offset unk_1013458 +
mov [ebp+var_8] offset unk_10132D8 +
call sub_100D016  +
test eax eax +
jge loc_10055E6  +
mov [ebp+var_4] eax +
cmp dword_1013320 0 +
jz loc_1005609  +
push 1  +
lea eax [ebp+arg_0] +
push eax  +
push edi  +
mov [ebp+arg_0] offset unk_10131B8 +
call sub_100D067  +
test eax eax +
jge loc_1005609  +
mov [ebp+var_4] eax +
cmp dword_10121E0 0 +
mov ebx offset unk_1012738 +
mov esi offset unk_10128B8 +
jz loc_1005683  +
push 1  +
lea eax [ebp+arg_0] +
push eax  +
push edi  +
mov [ebp+arg_0] ebx +
call sub_100D067  +
test eax eax +
jge loc_1005632  +
mov [ebp+var_4] eax +
push 1  +
lea eax [ebp+arg_0] +
push eax  +
push edi  +
mov [ebp+arg_0] esi +
call sub_100D016  +
test eax eax +
jge loc_1005648  +
mov [ebp+var_4] eax +
cmp dword_1013500 0 +
jz loc_1005683  +
push dword_1013B20  +
push off_1013B1C  +
push edi  +
call sub_100D016  +
test eax eax +
jge loc_100566A  +
mov [ebp+var_4] eax +
push dword_1013AF8  +
push off_1013AF4  +
push edi  +
call sub_100D016  +
test eax eax +
jge loc_1005683  +
mov [ebp+var_4] eax +
cmp dword_1012240 0 +
jz loc_10056B8  +
push 1  +
lea eax [ebp+arg_0] +
push eax  +
push edi  +
mov [ebp+arg_0] ebx +
call sub_100D067  +
test eax eax +
jge loc_10056A2  +
mov [ebp+var_4] eax +
push 1  +
lea eax [ebp+arg_0] +
push eax  +
push edi  +
mov [ebp+arg_0] esi +
call sub_100D016  +
test eax eax +
jge loc_10056B8  +
mov [ebp+var_4] eax +
xor esi esi +
inc esi  +
cmp dword_10122A0 0 +
jz loc_10056F2  +
push esi  +
lea eax [ebp+arg_0] +
push eax  +
push edi  +
mov [ebp+arg_0] ebx +
call sub_100D067  +
test eax eax +
jge loc_10056D9  +
mov [ebp+var_4] eax +
push esi  +
lea eax [ebp+arg_0] +
push eax  +
push edi  +
mov [ebp+arg_0] offset unk_1012918 +
call sub_100D016  +
test eax eax +
jge loc_10056F2  +
mov [ebp+var_4] eax +
cmp dword_1012120 0 +
jz loc_100575B  +
push esi  +
lea eax [ebp+arg_0] +
push eax  +
push edi  +
mov [ebp+arg_0] ebx +
call sub_100D067  +
test eax eax +
jge loc_1005710  +
mov [ebp+var_4] eax +
push esi  +
lea eax [ebp+arg_0] +
push eax  +
push edi  +
mov [ebp+arg_0] offset unk_1012EA8 +
call sub_100D016  +
test eax eax +
jge loc_1005729  +
mov [ebp+var_4] eax +
push dword_1013B34  +
push off_1013B30  +
push edi  +
call sub_100D1B4  +
test eax eax +
jge loc_1005742  +
mov [ebp+var_4] eax +
push esi  +
lea eax [ebp+arg_0] +
push eax  +
push edi  +
mov [ebp+arg_0] offset unk_10125B8 +
call sub_100D040  +
test eax eax +
jge loc_100575B  +
mov [ebp+var_4] eax +
cmp dword_1012180 0 +
jz loc_10057CD  +
push esi  +
lea eax [ebp+arg_0] +
push eax  +
push edi  +
mov [ebp+arg_0] offset unk_10125B8 +
call sub_100D1FF  +
test eax eax +
jge loc_100577D  +
mov [ebp+var_4] eax +
push esi  +
lea eax [ebp+arg_0] +
push eax  +
push edi  +
mov [ebp+arg_0] ebx +
call sub_100D016  +
test eax eax +
jge loc_1005792  +
mov [ebp+var_4] eax +
cmp dword_1012600 0 +
jz loc_10057CD  +
push esi  +
lea eax [ebp+arg_0] +
push eax  +
push edi  +
mov [ebp+arg_0] offset unk_1012798 +
call sub_100D016  +
test eax eax +
jge loc_10057B4  +
mov [ebp+var_4] eax +
push esi  +
lea eax [ebp+arg_0] +
push eax  +
push edi  +
mov [ebp+arg_0] offset unk_10134B8 +
call sub_100D040  +
test eax eax +
jge loc_10057CD  +
mov [ebp+var_4] eax +
cmp dword_1012300 0 +
jz loc_10058BF  +
push esi  +
lea eax [ebp+arg_0] +
push eax  +
push edi  +
mov [ebp+arg_0] ebx +
call sub_100D067  +
xor esi esi +
cmp eax esi +
jge loc_10057F1  +
mov [ebp+var_4] eax +
push dword_1013B34  +
push off_1013B30  +
push edi  +
call sub_100D1FF  +
cmp eax esi +
jge loc_100580A  +
mov [ebp+var_4] eax +
cmp dword_1012420 esi +
jnz loc_10058BF  +
cmp dword_1012480 esi +
jnz loc_10058BF  +
cmp dword_10125A0 esi +
jnz loc_10058BF  +
cmp dword_1012540 esi +
jnz loc_10058BF  +
cmp dword_10124E0 esi +
jnz loc_10058BF  +
push dword_1013B0C  +
push off_1013B08  +
push edi  +
call sub_100D016  +
cmp eax esi +
jge loc_100585B  +
mov [ebp+var_4] eax +
push dword_1013AF8  +
push off_1013AF4  +
push edi  +
call sub_100D016  +
cmp eax esi +
jge loc_1005874  +
mov [ebp+var_4] eax +
push dword_1013ABC  +
push off_1013AB8  +
push edi  +
call sub_100D016  +
cmp eax esi +
jge loc_100588D  +
mov [ebp+var_4] eax +
push dword_1013AD0  +
push off_1013ACC  +
push edi  +
call sub_100D016  +
cmp eax esi +
jge loc_10058A6  +
mov [ebp+var_4] eax +
push dword_1013AE4  +
push off_1013AE0  +
push edi  +
call sub_100D016  +
cmp eax esi +
jge loc_10058BF  +
mov [ebp+var_4] eax +
cmp dword_10123C0 0 +
mov esi offset unk_1012858 +
jz loc_10058E6  +
push 2  +
lea eax [ebp+var_C] +
push eax  +
push edi  +
mov [ebp+var_C] esi +
mov [ebp+var_8] ebx +
call sub_100D067  +
test eax eax +
jge loc_10058E6  +
mov [ebp+var_4] eax +
cmp dword_1012360 0 +
jz loc_100592E  +
push 2  +
lea eax [ebp+var_C] +
push eax  +
push edi  +
mov [ebp+var_C] esi +
mov [ebp+var_8] ebx +
call sub_100D067  +
mov ebx eax +
test eax eax +
jl loc_100590A  +
mov ebx [ebp+var_4] +
push 2  +
lea eax [ebp+var_C] +
push eax  +
push edi  +
mov [ebp+var_C] offset unk_1012EA8 +
mov [ebp+var_8] offset unk_1012918 +
call sub_100D016  +
xor esi esi +
cmp eax esi +
jge loc_1005933  +
mov ebx eax +
jmp loc_1005933  +
mov ebx [ebp+var_4] +
xor esi esi +
cmp dword_1012120 esi +
jnz loc_1005947  +
cmp dword_1012300 esi +
jz loc_10059CF  +
push dword_1013B20  +
push off_1013B1C  +
push edi  +
call sub_100D016  +
cmp eax esi +
jge loc_100595F  +
mov ebx eax +
cmp dword_1013500 esi +
jnz loc_10059CF  +
push 7  +
lea eax [ebp+var_20] +
push eax  +
mov esi offset unk_1012A48 +
push edi  +
mov [ebp+var_20] offset unk_1012918 +
mov [ebp+var_1C] offset unk_10129D8 +
mov [ebp+var_18] esi +
mov [ebp+var_14] offset unk_1012AB8 +
mov [ebp+var_10] offset unk_1012D78 +
mov [ebp+var_C] offset unk_1012E38 +
mov [ebp+var_8] offset unk_1012D18 +
call sub_100D016  +
test eax eax +
jge loc_10059AB  +
mov ebx eax +
cmp dword_1012B00 0 +
jz loc_10059CD  +
push 1  +
lea eax [ebp+arg_0] +
push eax  +
push edi  +
mov [ebp+arg_0] esi +
call sub_100D067  +
xor esi esi +
test eax eax +
jge loc_10059CF  +
mov ebx eax +
jmp loc_10059CF  +
xor esi esi +
cmp dword_1012420 esi +
jz loc_10059F7  +
cmp dword_1012410 esi +
jz loc_10059F7  +
push dword_1013B0C  +
push off_1013B08  +
push edi  +
call sub_100D016  +
cmp eax esi +
jge loc_10059F7  +
mov ebx eax +
cmp dword_1012480 esi +
jz loc_1005A1F  +
cmp dword_1012470 esi +
jz loc_1005A1F  +
push dword_1013AF8  +
push off_1013AF4  +
push edi  +
call sub_100D016  +
cmp eax esi +
jge loc_1005A1F  +
mov ebx eax +
cmp dword_10125A0 esi +
jz loc_1005A47  +
cmp dword_1012590 esi +
jz loc_1005A47  +
push dword_1013ABC  +
push off_1013AB8  +
push edi  +
call sub_100D016  +
cmp eax esi +
jge loc_1005A47  +
mov ebx eax +
cmp dword_1012540 esi +
jz loc_1005A6F  +
cmp dword_1012530 esi +
jz loc_1005A6F  +
push dword_1013AD0  +
push off_1013ACC  +
push edi  +
call sub_100D016  +
cmp eax esi +
jge loc_1005A6F  +
mov ebx eax +
cmp dword_10124E0 esi +
jz loc_1005A97  +
cmp dword_10124D0 esi +
jz loc_1005A97  +
push dword_1013AE4  +
push off_1013AE0  +
push edi  +
call sub_100D016  +
cmp eax esi +
jge loc_1005A97  +
mov ebx eax +
cmp dword_1012420 esi +
jnz loc_1005AB7  +
cmp dword_10125A0 esi +
jnz loc_1005AB7  +
cmp dword_1012540 esi +
jnz loc_1005AB7  +
cmp dword_10124E0 esi +
jz loc_1005AD0  +
push 1  +
lea eax [ebp+arg_0] +
push eax  +
push edi  +
mov [ebp+arg_0] offset unk_10134B8 +
call sub_100D040  +
cmp eax esi +
jge loc_1005AD0  +
mov ebx eax +
push 293h  +
call sub_100B569  +
pop edi  +
pop esi  +
mov eax ebx +
mov dword_10123E4 325h +
mov dword_10124A4 326h +
mov dword_1012504 327h +
mov dword_1012564 328h +
mov dword_1012444 324h +
mov dword_10121A4 321h +
mov dword_10122C4 323h +
mov dword_10134C4 320h +
mov dword_1013404 329h +
mov dword_10132E4 32Ah +
mov dword_10125C4 32Bh +
mov dword_10131C4 32Ch +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+hObject] +
xor edi edi +
push eax  +
push edi  +
push 8  +
mov [ebp+hObject] edi +
mov [ebp+lpMem] edi +
call ds:GetCurrentThread  +
push eax  +
call ds:OpenThreadToken  +
mov ebx 80070000h +
test eax eax +
jnz loc_1005BA5  +
call ds:GetLastError  +
cmp eax edi +
jle loc_1005BA1  +
and eax 0FFFFh +
or eax ebx +
mov esi eax +
jmp loc_1005BA7  +
xor esi esi +
cmp esi edi +
jge loc_1005BED  +
cmp esi 800703F0h +
jnz loc_1005C9B  +
lea eax [ebp+hObject] +
push eax  +
push 8  +
call ds:GetCurrentProcess  +
push eax  +
call ds:OpenProcessToken  +
test eax eax +
jnz loc_1005BE3  +
call ds:GetLastError  +
cmp eax edi +
jle loc_1005BDF  +
and eax 0FFFFh +
or eax ebx +
mov esi eax +
jmp loc_1005BE5  +
xor esi esi +
cmp esi edi +
jl loc_1005C9B  +
mov edi ds:GetProcessHeap +
mov [ebp+ReturnLength] 4Ch +
xor esi esi +
cmp [ebp+lpMem] esi +
jz loc_1005C0E  +
push [ebp+lpMem]  +
push esi  +
call edi  +
push eax  +
call ds:HeapFree  +
push [ebp+ReturnLength]  +
push esi  +
call edi  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+lpMem] eax +
cmp eax esi +
jz loc_1005C7E  +
lea ecx [ebp+ReturnLength] +
push ecx  +
push [ebp+ReturnLength]  +
push eax  +
push 1  +
push [ebp+hObject]  +
call ds:GetTokenInformation  +
test eax eax +
jnz loc_1005C4C  +
call ds:GetLastError  +
cmp eax esi +
jle loc_1005C4A  +
and eax 0FFFFh +
or eax ebx +
mov esi eax +
cmp esi 8007007Ah +
jz loc_1005BFA  +
test esi esi +
jl loc_1005C87  +
push [ebp+arg_0]  +
mov eax [ebp+lpMem] +
push dword ptr [eax]  +
call ConvertSidToStringSidW  +
test eax eax +
jnz loc_1005C85  +
call ds:GetLastError  +
test eax eax +
jle loc_1005C7A  +
and eax 0FFFFh +
or eax ebx +
mov esi eax +
jmp loc_1005C87  +
mov esi 8007000Eh +
jmp loc_1005C87  +
xor esi esi +
cmp [ebp+lpMem] 0 +
jz loc_1005C9B  +
push [ebp+lpMem]  +
push 0  +
call edi  +
push eax  +
call ds:HeapFree  +
cmp [ebp+hObject] 0 +
jz loc_1005CAA  +
push [ebp+hObject]  +
call ds:CloseHandle  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
mov eax dword_1013B58 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_14] +
push ebx  +
push esi  +
push edi  +
lea esi [ebp+arg_0] +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
mov [ebp+var_34] eax +
xor ebx ebx +
lea eax [ebp+pvarg] +
movs   +
mov esi [ebp+arg_10] +
push eax  +
mov [ebp+var_2C] ebx +
mov [ebp+var_30] ebx +
mov [ebp+var_28] ebx +
call ds:VariantInit  +
mov eax [esi] +
lea ecx [ebp+var_30] +
push ecx  +
push esi  +
call dword ptr [eax+24h]  +
mov esi eax +
cmp esi ebx +
jl loc_1005DBD  +
mov eax [ebp+var_30] +
mov ecx [eax] +
lea edx [ebp+var_2C] +
push edx  +
push offset dword_1001AB0  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
cmp esi ebx +
jl loc_1005DBD  +
jmp loc_1005D78  +
push 9  +
pop eax  +
cmp ax word ptr [ebp+pvarg.anonymous_0] +
jnz loc_1005D78  +
mov eax [ebp+var_28] +
cmp eax ebx +
jz loc_1005D3F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_28] ebx +
mov eax dword ptr [ebp+pvarg.anonymous_0+8] +
mov ecx [eax] +
lea edx [ebp+var_28] +
push edx  +
push offset riid  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
cmp esi ebx +
jl loc_1005DBD  +
mov eax [ebp+var_28] +
mov ecx [eax] +
lea edx [ebp+var_24] +
push edx  +
push eax  +
call dword ptr [ecx+24h]  +
mov esi eax +
cmp esi ebx +
jl loc_1005DBD  +
push 4  +
pop ecx  +
lea edi [ebp+var_14] +
lea esi [ebp+var_24] +
xor eax eax +
cmps   +
jz loc_1005D9F  +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
mov eax [ebp+var_2C] +
mov ecx [eax] +
push ebx  +
lea edx [ebp+pvarg] +
push edx  +
push 1  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
cmp esi ebx +
jl loc_1005DBD  +
cmp esi 1 +
jnz loc_1005D26  +
jmp loc_1005DBB  +
mov esi [ebp+var_34] +
mov eax [esi] +
cmp eax ebx +
jz loc_1005DB0  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [esi] ebx +
mov eax [ebp+var_28] +
mov [esi] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor esi esi +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
mov eax [ebp+var_28] +
cmp eax ebx +
jz loc_1005DD7  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_28] ebx +
mov eax [ebp+var_2C] +
cmp eax ebx +
jz loc_1005DE7  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_2C] ebx +
mov eax [ebp+var_30] +
cmp eax ebx +
jz loc_1005DF4  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100B071  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
push esi  +
mov esi ds:VariantInit +
push edi  +
lea eax [ebp+pvarg] +
push eax  +
call esi  +
lea eax [ebp+var_14] +
push eax  +
call esi  +
mov ebx [ebp+arg_0] +
mov eax [ebx] +
lea ecx [ebp+var_4] +
push ecx  +
push ebx  +
call dword ptr [eax+38h]  +
mov esi eax +
test esi esi +
jl loc_1005EDD  +
mov eax [ebp+var_4] +
dec eax  +
dec eax  +
jz loc_1005E58  +
dec eax  +
jz loc_1005EDD  +
mov esi 80070057h +
jmp loc_1005EDD  +
mov edi ds:VariantClear +
lea eax [ebp+var_14] +
push eax  +
call edi  +
mov eax [ebx] +
lea ecx [ebp+var_14] +
push ecx  +
push ebx  +
call dword ptr [eax+30h]  +
mov esi eax +
test esi esi +
jl loc_1005EDD  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+48h]  +
mov esi eax +
test esi esi +
jl loc_1005EDD  +
mov eax [ebx] +
push 3  +
push ebx  +
call dword ptr [eax+3Ch]  +
mov esi eax +
test esi esi +
jl loc_1005EDD  +
lea eax [ebp+pvarg] +
push eax  +
call edi  +
and dword ptr [ebp+pvarg.anonymous_0+0Ch] 0 +
push 14h  +
pop eax  +
mov word ptr [ebp+pvarg.anonymous_0] ax +
mov eax [ebx] +
sub esp 10h +
mov dword ptr [ebp+pvarg.anonymous_0+8] 80000000h +
mov edi esp +
lea esi [ebp+pvarg] +
movs   +
movs   +
movs   +
push ebx  +
movs   +
call dword ptr [eax+40h]  +
mov esi eax +
test esi esi +
jl loc_1005EDD  +
and [ebp+var_C] 7FFFFFFFh +
and [ebp+var_8] 0 +
mov eax [ebx] +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_14] +
movs   +
movs   +
movs   +
push ebx  +
movs   +
call dword ptr [eax+40h]  +
mov esi eax +
mov edi ds:VariantClear +
lea eax [ebp+pvarg] +
push eax  +
call edi  +
lea eax [ebp+var_14] +
push eax  +
call edi  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
mov esi [ebp+lpSystemTime] +
push edi  +
lea eax [ebp+FileTime] +
push eax  +
push esi  +
call ds:SystemTimeToFileTime  +
test eax eax +
jnz loc_1005F33  +
call ds:GetLastError  +
test eax eax +
jle loc_1005F2E  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+lpSystemTime] eax +
jmp loc_1005F37  +
and [ebp+lpSystemTime] 0 +
cmp [ebp+lpSystemTime] 0 +
mov ebx [ebp+arg_4] +
jl loc_1006017  +
mov eax [ebp+FileTime.dwLowDateTime] +
mov ecx [ebp+FileTime.dwHighDateTime] +
mov edi [ebp+pvarg] +
push edi  +
mov [ebx] eax +
mov [ebx+4] ecx +
call ds:VariantClear  +
xor eax eax +
cmp ax [esi+8] +
jnz loc_1005F6D  +
cmp ax [esi+0Ah] +
jnz loc_1005F6D  +
cmp ax [esi+0Ch] +
jz loc_1005FB2  +
push 7  +
pop eax  +
mov [edi] ax +
xor eax eax +
lea edi [ebp+SystemTime] +
stos   +
stos   +
stos   +
stos   +
mov ax [esi+8] +
mov [ebp+SystemTime.wHour] ax +
mov ax [esi+0Ah] +
mov [ebp+SystemTime.wMinute] ax +
mov ax [esi+0Ch] +
mov [ebp+SystemTime.wSecond] ax +
mov eax [ebp+pvarg] +
add eax 8 +
push eax  +
lea eax [ebp+SystemTime] +
push eax  +
call ds:SystemTimeToVariantTime  +
test eax eax +
jnz loc_1005FB2  +
mov [ebp+lpSystemTime] 80070057h +
jmp loc_1006017  +
mov edi [ebp+arg_8] +
push edi  +
call ds:VariantClear  +
xor eax eax +
cmp ax [esi] +
jnz loc_1005FCF  +
cmp ax [esi+2] +
jnz loc_1005FCF  +
cmp ax [esi+6] +
jz loc_1006011  +
push 7  +
pop eax  +
mov [edi] ax +
xor eax eax +
lea edi [ebp+SystemTime] +
stos   +
stos   +
stos   +
stos   +
mov ax [esi] +
mov [ebp+SystemTime.wYear] ax +
mov ax [esi+2] +
mov [ebp+SystemTime.wMonth] ax +
mov ax [esi+6] +
mov [ebp+SystemTime.wDay] ax +
mov eax [ebp+arg_8] +
add eax 8 +
push eax  +
lea eax [ebp+SystemTime] +
push eax  +
call ds:SystemTimeToVariantTime  +
test eax eax +
jnz loc_1006011  +
mov [ebp+lpSystemTime] 80070057h +
cmp [ebp+lpSystemTime] 0 +
jge loc_100602E  +
push [ebp+pvarg]  +
mov esi ds:VariantInit +
and dword ptr [ebx] 0 +
and dword ptr [ebx+4] 0 +
call esi  +
push [ebp+arg_8]  +
call esi  +
mov eax [ebp+lpSystemTime] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
push ebx  +
push esi  +
push edi  +
mov edi ds:VariantInit +
xor esi esi +
lea eax [ebp+pvarg] +
push eax  +
mov [ebp+var_4] esi +
mov [ebp+var_8] esi +
mov [ebp+var_10] esi +
mov [ebp+var_C] esi +
call edi  +
lea eax [ebp+var_38] +
push eax  +
call edi  +
mov ebx [ebp+arg_0] +
cmp dword_10129C0 esi +
jz loc_10060DC  +
mov edi dword_10129D4 +
jmp loc_10060D5  +
push edi  +
push offset aStart  +
call ds:__imp__wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100609A  +
mov eax [ebx] +
push 0  +
push ebx  +
call dword ptr [eax+0C8h]  +
jmp loc_10060B4  +
push edi  +
push offset aStop  +
call ds:__imp__wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_10060BE  +
mov eax [ebx] +
push 0  +
push ebx  +
call dword ptr [eax+24h]  +
mov esi eax +
test esi esi +
jl loc_10062D3  +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10060C3  +
sub eax edx +
sar eax 1 +
lea edi [edi+eax*2+2] +
xor eax eax +
cmp ax [edi] +
jnz loc_100607B  +
xor eax eax +
cmp dword_1012A90 eax +
jnz loc_1006102  +
cmp dword_1012B00 eax +
jnz loc_1006102  +
cmp dword_1012A20 eax +
jnz loc_1006102  +
cmp dword_1012C40 eax +
jz loc_10062D3  +
mov eax [ebx] +
push 0FFFFFFFFh  +
push ebx  +
call dword ptr [eax+0C8h]  +
mov esi eax +
test esi esi +
jl loc_10062D3  +
mov eax [ebx] +
lea ecx [ebp+var_8] +
push ecx  +
push ebx  +
call dword ptr [eax+0C0h]  +
mov esi eax +
test esi esi +
jl loc_10062D3  +
mov eax [ebp+var_8] +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push eax  +
call dword ptr [ecx+38h]  +
mov esi eax +
test esi esi +
jl loc_10062D3  +
cmp dword_1012A90 0 +
jz loc_10061BE  +
lea eax [ebp+var_38] +
push eax  +
lea eax [ebp+pvarg] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
push offset SystemTime  +
call sub_1005EFD  +
mov esi eax +
test esi esi +
jl loc_10062D3  +
push 7  +
pop eax  +
cmp ax word ptr [ebp+pvarg] +
jnz loc_1006196  +
mov eax [ebp+var_4] +
mov ecx [eax] +
sub esp 10h +
mov edi esp +
lea esi [ebp+pvarg] +
movs   +
movs   +
movs   +
push eax  +
movs   +
call dword ptr [ecx+20h]  +
mov esi eax +
test esi esi +
jl loc_10062D3  +
push 7  +
pop eax  +
cmp ax word ptr [ebp+var_38] +
jnz loc_10061BE  +
mov eax [ebp+var_4] +
mov ecx [eax] +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_38] +
movs   +
movs   +
movs   +
push eax  +
movs   +
call dword ptr [ecx+30h]  +
mov esi eax +
test esi esi +
jl loc_10062D3  +
cmp dword_1012B00 0 +
jz loc_1006261  +
lea eax [ebp+var_38] +
push eax  +
lea eax [ebp+pvarg] +
push eax  +
lea eax [ebp+var_18] +
push eax  +
push offset stru_1012B14  +
call sub_1005EFD  +
mov esi eax +
test esi esi +
jl loc_10062D3  +
push 7  +
pop eax  +
cmp ax word ptr [ebp+pvarg] +
jnz loc_1006225  +
cmp dword_1012C40 0 +
jz loc_1006206  +
cmp dword_1012C44 0 +
jz loc_1006225  +
mov eax [ebp+var_4] +
mov ecx [eax] +
sub esp 10h +
mov edi esp +
lea esi [ebp+pvarg] +
movs   +
movs   +
movs   +
push eax  +
movs   +
call dword ptr [ecx+28h]  +
mov esi eax +
test esi esi +
jl loc_10062D3  +
push 7  +
pop eax  +
cmp ax word ptr [ebp+var_38] +
jnz loc_1006261  +
cmp [ebp+var_10] 0 +
jnz loc_100623A  +
cmp [ebp+var_C] 0 +
jz loc_1006261  +
mov eax [ebp+var_18] +
sub eax [ebp+var_10] +
mov ecx [ebp+var_14] +
sbb ecx [ebp+var_C] +
mov esi [ebx] +
push 0  +
push 989680h  +
push ecx  +
push eax  +
call __aulldiv  +
push eax  +
push ebx  +
call dword ptr [esi+24h]  +
mov esi eax +
test esi esi +
jl loc_10062D3  +
cmp dword_1012A20 0 +
jz loc_1006296  +
movzx eax word_1012A3C +
movzx ecx word_1012A3E +
imul eax eax +
add eax ecx +
movzx ecx word_1012A40 +
imul eax eax +
add eax ecx +
mov ecx [ebx] +
push eax  +
push ebx  +
call dword ptr [ecx+24h]  +
mov esi eax +
test esi esi +
jl loc_10062D3  +
xor edi edi +
cmp dword_1012C40 edi +
jz loc_10062AC  +
cmp dword_1012C44 edi +
jnz loc_10062AC  +
push 7Fh  +
jmp loc_10062AD  +
push edi  +
mov eax [ebp+var_4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+38h]  +
mov eax [ebp+var_8] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+30h]  +
mov esi eax +
cmp esi edi +
jl loc_10062D3  +
mov eax [ebp+var_8] +
push [ebp+var_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+28h]  +
mov esi eax +
mov edi ds:VariantClear +
lea eax [ebp+pvarg] +
push eax  +
call edi  +
lea eax [ebp+var_38] +
push eax  +
call edi  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_10062F6  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and [ebp+var_4] 0 +
mov eax [ebp+var_8] +
test eax eax +
jz loc_1006303  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_4] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi [ebp+psa] +
mov [eax] ebx +
xor eax eax +
mov [ebp+ppvData] ebx +
push edi  +
mov ecx esi +
cmp ax [esi] +
jz loc_100634F  +
mov eax ecx +
inc ebx  +
lea edi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_1006336  +
sub eax edi +
sar eax 1 +
lea ecx [ecx+eax*2+2] +
xor eax eax +
cmp ax [ecx] +
jnz loc_1006330  +
push ebx  +
push 0  +
push 8  +
call ds:SafeArrayCreateVector  +
mov [ebp+psa] eax +
test eax eax +
jnz loc_1006368  +
mov edi 8007000Eh +
jmp loc_10063BB  +
lea ecx [ebp+ppvData] +
push ecx  +
push eax  +
call ds:SafeArrayAccessData  +
mov edi eax +
test edi edi +
jl loc_10063BB  +
xor edi edi +
test ebx ebx +
jbe loc_10063B1  +
push esi  +
call ds:SysAllocString  +
mov ecx [ebp+ppvData] +
mov [ecx+edi*4] eax +
mov eax [ebp+ppvData] +
cmp dword ptr [eax+edi*4] 0 +
jz loc_1006361  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100639A  +
sub eax edx +
sar eax 1 +
inc edi  +
lea esi [esi+eax*2+2] +
cmp edi ebx +
jb loc_100637F  +
mov eax [ebp+psa] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
xor edi edi +
cmp [ebp+ppvData] 0 +
jz loc_10063CA  +
push [ebp+psa]  +
call ds:SafeArrayUnaccessData  +
test edi edi +
jge loc_10063DD  +
cmp [ebp+psa] 0 +
jz loc_10063DD  +
push [ebp+psa]  +
call ds:SafeArrayDestroy  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+pvarg] +
xor edi edi +
push eax  +
mov [ebp+var_4] edi +
call ds:VariantInit  +
push offset asc_10016A0  +
push [ebp+arg_4]  +
call ds:wcstok  +
mov ebx ds:VariantClear +
mov esi eax +
cmp esi edi +
jmp loc_10064D1  +
movzx eax ax +
push eax  +
call ds:isspace  +
pop ecx  +
test eax eax +
jz loc_100643D  +
inc esi  +
inc esi  +
movzx eax word ptr [esi] +
xor ecx ecx +
cmp cx ax +
jnz loc_1006422  +
lea eax [ebp+pvarg] +
push eax  +
call ebx  +
push esi  +
call ds:SysAllocString  +
mov dword ptr [ebp+pvarg.anonymous_0+8] eax +
test eax eax +
jz loc_10064DB  +
push 8  +
pop eax  +
mov word ptr [ebp+pvarg.anonymous_0] ax +
mov eax [ebp+arg_8] +
mov ecx [eax] +
sub esp 10h +
mov edi esp +
lea esi [ebp+pvarg] +
movs   +
movs   +
movs   +
push eax  +
movs   +
call dword ptr [ecx+40h]  +
mov edi eax +
xor esi esi +
cmp edi esi +
jl loc_10064E0  +
cmp [ebp+arg_0] esi +
jz loc_10064C1  +
cmp [ebp+var_4] esi +
jz loc_1006493  +
push [ebp+arg_8]  +
call sub_1005E0C  +
mov edi eax +
cmp edi esi +
jl loc_10064E0  +
jmp loc_10064C1  +
lea eax [ebp+pvarg] +
push eax  +
call ebx  +
mov eax [ebp+arg_8] +
mov ecx [eax] +
lea edx [ebp+pvarg] +
push edx  +
push eax  +
call dword ptr [ecx+30h]  +
mov edi eax +
cmp edi esi +
jl loc_10064E0  +
mov eax dword ptr [ebp+pvarg.anonymous_0+8] +
and eax 80000000h +
xor ecx ecx +
or eax ecx +
jz loc_10064C1  +
mov [ebp+var_4] 1 +
push offset asc_10016A0  +
push esi  +
call ds:wcstok  +
mov esi eax +
test esi esi +
pop ecx  +
pop ecx  +
jnz loc_1006433  +
jmp loc_10064E0  +
mov edi 8007000Eh +
lea eax [ebp+pvarg] +
push eax  +
call ebx  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
mov eax dword_1013B58 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov [ebp+var_24] eax +
xor edi edi +
lea eax [ebp+pvarg] +
push eax  +
mov [ebp+var_20] edi +
mov [ebp+var_28] edi +
mov [ebp+var_18] edi +
mov [ebp+var_1C] edi +
call ds:VariantInit  +
mov eax [esi] +
lea ecx [ebp+var_28] +
push ecx  +
push esi  +
call dword ptr [eax+24h]  +
mov ebx ds:VariantClear +
mov esi eax +
cmp esi edi +
jl loc_1006674  +
mov eax [ebp+var_28] +
mov ecx [eax] +
lea edx [ebp+var_20] +
push edx  +
push offset dword_1001AB0  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
cmp esi edi +
jl loc_1006674  +
lea eax [ebp+pvarg] +
push eax  +
call ebx  +
mov eax [ebp+var_20] +
mov ecx [eax] +
push edi  +
lea edx [ebp+pvarg] +
push edx  +
push 1  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
cmp esi edi +
jmp loc_1006667  +
push 9  +
pop eax  +
cmp ax word ptr [ebp+pvarg.anonymous_0] +
jnz loc_10066C9  +
mov eax [ebp+var_18] +
test eax eax +
jz loc_100659C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and [ebp+var_18] 0 +
mov eax dword ptr [ebp+pvarg.anonymous_0+8] +
mov ecx [eax] +
lea edx [ebp+var_18] +
push edx  +
push offset riid  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
test esi esi +
jl loc_1006674  +
mov eax [ebp+var_18] +
mov ecx [eax] +
lea edx [ebp+var_14] +
push edx  +
push eax  +
call dword ptr [ecx+24h]  +
mov esi eax +
test esi esi +
jl loc_1006674  +
mov eax [ebp+var_1C] +
test eax eax +
jz loc_10065DF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and [ebp+var_1C] 0 +
lea eax [ebp+var_1C] +
push eax  +
push [ebp+var_24]  +
lea esi [ebp+var_14] +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
call sub_1005CB8  +
mov esi eax +
test esi esi +
jl loc_1006674  +
mov esi [ebp+var_1C] +
test esi esi +
jz loc_100663A  +
cmp [ebp+var_18] esi +
jz loc_100663A  +
lea eax [ebp+pvarg] +
push eax  +
call ebx  +
push 9  +
pop eax  +
mov word ptr [ebp+pvarg.anonymous_0] ax +
mov dword ptr [ebp+pvarg.anonymous_0+8] esi +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
mov eax [ebp+var_24] +
mov ecx [eax] +
sub esp 10h +
mov edi esp +
lea esi [ebp+pvarg] +
movs   +
movs   +
movs   +
push eax  +
movs   +
call dword ptr [ecx+2Ch]  +
mov esi eax +
test esi esi +
jl loc_1006674  +
mov eax [ebp+var_24] +
push [ebp+var_18]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+28h]  +
mov esi eax +
test esi esi +
jl loc_1006674  +
lea eax [ebp+pvarg] +
push eax  +
call ebx  +
mov eax [ebp+var_20] +
mov ecx [eax] +
push 0  +
lea edx [ebp+pvarg] +
push edx  +
push 1  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
test esi esi +
jl loc_1006674  +
cmp esi 1 +
jnz loc_100657E  +
xor esi esi +
lea eax [ebp+pvarg] +
push eax  +
call ebx  +
mov eax [ebp+var_1C] +
test eax eax +
jz loc_1006687  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_18] +
test eax eax +
jz loc_1006698  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and [ebp+var_18] 0 +
mov eax [ebp+var_20] +
test eax eax +
jz loc_10066A9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and [ebp+var_20] 0 +
mov eax [ebp+var_28] +
test eax eax +
jz loc_10066B6  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100B071  +
leave   +
retn 8  +
mov esi 80004005h +
jmp loc_1006674  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_1012840 0 +
push esi  +
jz loc_1006725  +
push dword_1012854  +
mov esi ds:__imp__wcsicmp +
push offset aBin  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1006701  +
xor ecx ecx +
jmp loc_1006717  +
push dword_1012854  +
push offset aBincirc  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100672C  +
or ecx 0FFFFFFFFh +
mov eax [ebp+arg_0] +
mov edx [eax] +
push ecx  +
push eax  +
call dword ptr [edx+54h]  +
test eax eax +
jl loc_1006727  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
mov eax 80070057h +
jmp loc_1006727  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push esi  +
push edi  +
lea edx [ebp+var_4] +
push edx  +
push offset dword_1001A00  +
xor edi edi +
push eax  +
mov [ebp+var_4] edi +
mov [ebp+psa] edi +
call dword ptr [ecx]  +
mov esi eax +
cmp esi edi +
jl loc_10068F5  +
cmp dword_1012B70 edi +
jz loc_10067A2  +
movzx eax word_1012B8C +
movzx ecx word_1012B8E +
imul eax eax +
add eax ecx +
movzx ecx word_1012B90 +
imul eax eax +
add eax ecx +
mov ecx [ebp+var_4] +
mov edx [ecx] +
push eax  +
push ecx  +
call dword ptr [edx+94h]  +
mov esi eax +
cmp esi edi +
jl loc_10068F5  +
cmp dword_10135C0 edi +
jz loc_10067DC  +
lea eax [ebp+psa] +
push eax  +
push psa  +
call sub_1006311  +
mov esi eax +
cmp esi edi +
jl loc_10068E7  +
mov eax [ebp+var_4] +
push [ebp+psa]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+84h]  +
mov esi eax +
cmp esi edi +
jl loc_10068E7  +
cmp dword_1013560 edi +
jz loc_1006807  +
mov eax [ebp+var_4] +
mov ecx [eax] +
cmp dword_1013564 edi +
jz loc_10067F4  +
push edi  +
jmp loc_10067F6  +
push 0FFFFFFFFh  +
push eax  +
call dword ptr [ecx+8Ch]  +
mov esi eax +
cmp esi edi +
jl loc_10068E7  +
push ebx  +
mov ebx ds:SysAllocString +
cmp dword_1013620 edi +
jz loc_1006851  +
cmp dword_1013624 edi +
jnz loc_100683A  +
mov eax dword_1013634 +
test eax eax +
jz loc_100683A  +
push eax  +
call ebx  +
mov edi eax +
test edi edi +
jnz loc_100683A  +
mov esi 8007000Eh +
jmp loc_10068D9  +
mov eax [ebp+var_4] +
mov ecx [eax] +
push edi  +
push eax  +
call dword ptr [ecx+0BCh]  +
mov esi eax +
test esi esi +
jl loc_10068D9  +
cmp dword_1013680 0 +
jz loc_1006895  +
test edi edi +
jz loc_1006867  +
push edi  +
call ds:SysFreeString  +
xor edi edi +
cmp dword_1013684 0 +
jnz loc_1006882  +
mov eax dword_1013694 +
test eax eax +
jz loc_1006882  +
push eax  +
call ebx  +
mov edi eax +
test edi edi +
jz loc_1006830  +
mov eax [ebp+var_4] +
mov ecx [eax] +
push edi  +
push eax  +
call dword ptr [ecx+9Ch]  +
mov esi eax +
test esi esi +
jl loc_10068D9  +
cmp dword_10136E0 0 +
jz loc_10068D9  +
test edi edi +
jz loc_10068AB  +
push edi  +
call ds:SysFreeString  +
xor edi edi +
cmp dword_10136E4 0 +
jnz loc_10068CA  +
mov eax dword_10136F4 +
test eax eax +
jz loc_10068CA  +
push eax  +
call ebx  +
mov edi eax +
test edi edi +
jz loc_1006830  +
mov eax [ebp+var_4] +
mov ecx [eax] +
push edi  +
push eax  +
call dword ptr [ecx+0ACh]  +
mov esi eax +
pop ebx  +
test edi edi +
jz loc_10068E5  +
push edi  +
call ds:SysFreeString  +
xor edi edi +
cmp [ebp+psa] edi +
jz loc_10068F5  +
push [ebp+psa]  +
call ds:SafeArrayDestroy  +
mov eax [ebp+var_4] +
cmp eax edi +
jz loc_1006902  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push esi  +
push edi  +
lea edx [ebp+var_8] +
push edx  +
push offset dword_10019F0  +
xor edi edi +
push eax  +
mov [ebp+var_8] edi +
mov [ebp+psa] edi +
call dword ptr [ecx]  +
mov esi eax +
cmp esi edi +
jl loc_1006A28  +
cmp dword_1013740 edi +
jz loc_1006966  +
mov eax [ebp+var_8] +
mov ecx [eax] +
cmp dword_1013744 edi +
jz loc_1006953  +
push edi  +
jmp loc_1006955  +
push 0FFFFFFFFh  +
push eax  +
call dword ptr [ecx+0ACh]  +
mov esi eax +
cmp esi edi +
jl loc_1006A28  +
push ebx  +
mov ebx ds:SafeArrayDestroy +
cmp dword_1013860 edi +
jz loc_10069A3  +
lea eax [ebp+psa] +
push eax  +
push dword_1013874  +
call sub_1006311  +
mov esi eax +
cmp esi edi +
jl loc_1006A1D  +
mov eax [ebp+var_8] +
push [ebp+psa]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+9Ch]  +
mov esi eax +
cmp esi edi +
jl loc_1006A1D  +
cmp dword_10137A0 edi +
jz loc_10069E2  +
cmp [ebp+psa] edi +
jz loc_10069B8  +
push [ebp+psa]  +
call ebx  +
mov [ebp+psa] edi +
lea eax [ebp+psa] +
push eax  +
push dword_10137B4  +
call sub_1006311  +
mov esi eax +
cmp esi edi +
jl loc_1006A1D  +
mov eax [ebp+var_8] +
push [ebp+psa]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0B4h]  +
mov esi eax +
cmp esi edi +
jl loc_1006A1D  +
cmp dword_1013800 edi +
jz loc_1006A1D  +
cmp [ebp+psa] edi +
jz loc_10069F7  +
push [ebp+psa]  +
call ebx  +
mov [ebp+psa] edi +
lea eax [ebp+psa] +
push eax  +
push dword_1013814  +
call sub_1006311  +
mov esi eax +
cmp esi edi +
jl loc_1006A1D  +
mov eax [ebp+var_8] +
push [ebp+psa]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0A4h]  +
mov esi eax +
cmp [ebp+psa] edi +
jz loc_1006A27  +
push [ebp+psa]  +
call ebx  +
pop ebx  +
mov eax [ebp+var_8] +
cmp eax edi +
jz loc_1006A35  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
mov ebx [ebp+arg_0] +
mov eax [ebx] +
push esi  +
push edi  +
lea ecx [ebp+var_8] +
push ecx  +
xor edi edi +
push offset dword_1001A10  +
push ebx  +
mov [ebp+var_10] edi +
mov [ebp+var_C] edi +
mov [ebp+psa] edi +
mov [ebp+var_8] edi +
call dword ptr [eax]  +
mov esi eax +
cmp esi edi +
jl loc_1006C49  +
cmp dword_1013AA0 edi +
jz loc_1006C8A  +
push dword_1013AB4  +
call ds:PathIsNetworkPathW  +
test eax eax +
jz loc_1006A9C  +
mov esi 80300106h +
jmp loc_1006C49  +
push dword_1013AB4  +
call ds:SysAllocString  +
mov [ebp+var_10] eax +
cmp eax edi +
jnz loc_1006AB9  +
mov esi 8007000Eh +
jmp loc_1006C49  +
mov eax [ebp+var_8] +
push [ebp+var_10]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+94h]  +
mov esi eax +
cmp esi edi +
jl loc_1006C49  +
cmp dword_10139E0 edi +
jz loc_1006AFD  +
mov eax [ebp+var_8] +
mov edx [eax] +
xor ecx ecx +
cmp dword_10139E4 edi +
setnz cl  +
dec ecx  +
push ecx  +
push eax  +
call dword ptr [edx+84h]  +
mov esi eax +
cmp esi edi +
jl loc_1006C49  +
cmp dword_1013A40 edi +
jz loc_1006B28  +
mov eax [ebp+var_8] +
mov edx [eax] +
xor ecx ecx +
cmp dword_1013A44 edi +
setnz cl  +
dec ecx  +
push ecx  +
push eax  +
call dword ptr [edx+8Ch]  +
mov esi eax +
cmp esi edi +
jl loc_1006C49  +
cmp dword_10138C0 edi +
jz loc_1006B66  +
mov eax dword_10138D4 +
cmp eax edi +
jz loc_1006B66  +
lea ecx [ebp+psa] +
push ecx  +
push eax  +
call sub_1006311  +
mov esi eax +
cmp esi edi +
jl loc_1006C49  +
mov eax [ebp+var_8] +
push [ebp+psa]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0A4h]  +
mov esi eax +
cmp esi edi +
jl loc_1006C49  +
cmp dword_1013920 edi +
jz loc_1006BB9  +
cmp dword_1013934 edi +
jz loc_1006BB9  +
cmp [ebp+psa] edi +
jz loc_1006B87  +
push [ebp+psa]  +
call ds:SafeArrayDestroy  +
mov [ebp+psa] edi +
lea eax [ebp+psa] +
push eax  +
push dword_1013934  +
call sub_1006311  +
mov esi eax +
cmp esi edi +
jl loc_1006C49  +
mov eax [ebp+var_8] +
push [ebp+psa]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0ACh]  +
mov esi eax +
cmp esi edi +
jl loc_1006C49  +
cmp dword_1013980 edi +
jz loc_1006C04  +
cmp dword_1013994 edi +
jz loc_1006C04  +
cmp [ebp+psa] edi +
jz loc_1006BDA  +
push [ebp+psa]  +
call ds:SafeArrayDestroy  +
mov [ebp+psa] edi +
lea eax [ebp+psa] +
push eax  +
push dword_1013994  +
call sub_1006311  +
mov esi eax +
cmp esi edi +
jl loc_1006C49  +
mov eax [ebp+var_8] +
push [ebp+psa]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0B4h]  +
mov esi eax +
cmp esi edi +
jl loc_1006C49  +
push ebx  +
call sub_10066D5  +
mov esi eax +
cmp esi edi +
jl loc_1006C49  +
cmp dword_1012BE0 edi +
jz loc_1006C44  +
push lpFileName  +
call ds:SysAllocString  +
mov [ebp+var_C] eax +
cmp eax edi +
jz loc_1006AAF  +
mov eax [ebp+var_8] +
push [ebp+var_C]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+9Ch]  +
mov esi eax +
cmp esi edi +
jl loc_1006C49  +
mov eax [ebp+arg_4] +
mov [eax] edi +
mov eax [ebp+var_8] +
cmp eax edi +
jz loc_1006C59  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_8] edi +
mov ebx ds:SysFreeString +
cmp [ebp+var_C] edi +
jz loc_1006C69  +
push [ebp+var_C]  +
call ebx  +
cmp [ebp+var_10] edi +
jz loc_1006C73  +
push [ebp+var_10]  +
call ebx  +
cmp [ebp+psa] edi +
jz loc_1006C81  +
push [ebp+psa]  +
call ds:SafeArrayDestroy  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
cmp dword_10121E0 edi +
jz loc_1006AD2  +
mov esi 80070057h +
jmp loc_1006C49  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
push 800h  +
xor ebx ebx +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov edi eax +
mov [ebp+lpMem] edi +
cmp edi ebx +
jnz loc_1006CD4  +
mov esi 8007000Eh +
jmp loc_1006DF4  +
cmp dword_1012BE0 ebx +
jnz loc_1006D24  +
cmp dword_1013B84 ebx +
jz loc_1006DD5  +
push edi  +
mov esi 400h +
push esi  +
call ds:GetCurrentDirectoryW  +
test eax eax +
jnz loc_1006D14  +
call ds:GetLastError  +
test eax eax +
jle loc_1006D0D  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
jmp loc_1006DD7  +
cmp eax esi +
ja loc_1006D43  +
push edi  +
call ds:SysAllocString  +
jmp loc_1006DBF  +
lea eax [ebp+FilePart] +
push eax  +
push edi  +
mov esi 400h +
push esi  +
push lpFileName  +
call ds:GetFullPathNameW  +
test eax eax +
jz loc_1006CF9  +
cmp eax esi +
jbe loc_1006D4D  +
mov esi 8007007Ah +
jmp loc_1006DD7  +
cmp [ebp+FilePart] ebx +
jnz loc_1006D59  +
mov esi 8007007Bh +
jmp loc_1006DD7  +
mov edi ds:SysAllocString +
cmp dword_1013B84 ebx +
jz loc_1006D90  +
push [ebp+lpMem]  +
call edi  +
mov ebx eax +
test ebx ebx +
jnz loc_1006D79  +
mov esi 8007000Eh +
jmp loc_1006DD7  +
mov eax [ebp+arg_4] +
mov ecx [eax] +
push ebx  +
push eax  +
call dword ptr [ecx+44h]  +
mov esi eax +
test esi esi +
jl loc_1006DD7  +
push ebx  +
call ds:SysFreeString  +
push [ebp+FilePart]  +
call edi  +
mov ebx eax +
test ebx ebx +
jz loc_1006D72  +
mov eax [ebp+arg_4] +
mov ecx [eax] +
push ebx  +
push eax  +
call dword ptr [ecx+2Ch]  +
mov esi eax +
test esi esi +
jl loc_1006DD7  +
mov ecx [ebp+FilePart] +
xor eax eax +
push ebx  +
mov [ecx] ax +
call ds:SysFreeString  +
push [ebp+lpMem]  +
call edi  +
mov ebx eax +
test ebx ebx +
jz loc_1006D72  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push ebx  +
push eax  +
call dword ptr [ecx+5Ch]  +
mov esi eax +
test esi esi +
jl loc_1006DD7  +
xor esi esi +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
test ebx ebx +
jz loc_1006DF4  +
push ebx  +
call ds:SysFreeString  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
push edi  +
push [ebp+lpType]  +
xor edi edi +
push [ebp+lpName]  +
mov [ebp+var_C] edi +
push edi  +
mov [ebp+hResData] edi +
mov [ebp+hGlobal] edi +
call ds:FindResourceW  +
mov esi eax +
cmp esi edi +
jz loc_1006F14  +
cmp esi 0FFFFFFFFh +
jz loc_1006F14  +
push esi  +
push edi  +
call ds:LoadResource  +
mov [ebp+hResData] eax +
cmp eax edi +
jz loc_1006F07  +
cmp eax 0FFFFFFFFh +
jz loc_1006F07  +
push eax  +
call ds:LockResource  +
mov edi eax +
test edi edi +
jnz loc_1006E67  +
mov esi 80004005h +
jmp loc_1006E8C  +
push esi  +
push 0  +
call ds:SizeofResource  +
mov esi eax +
test esi esi +
jnz loc_1006EC4  +
call ds:GetLastError  +
test eax eax +
jle loc_1006E8A  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
xor edi edi +
cmp [ebp+hResData] edi +
jz loc_1006E9C  +
push [ebp+hResData]  +
call ds:FreeResource  +
cmp [ebp+var_C] edi +
jz loc_1006EAA  +
push [ebp+hGlobal]  +
call ds:GlobalUnlock  +
cmp esi edi +
jge loc_1006EBC  +
cmp [ebp+hGlobal] edi +
jz loc_1006EBC  +
push [ebp+hGlobal]  +
call ds:GlobalFree  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 0Ch  +
push esi  +
push 2  +
call ds:GlobalAlloc  +
mov [ebp+hGlobal] eax +
test eax eax +
jz loc_1006E76  +
cmp eax 0FFFFFFFFh +
jz loc_1006E76  +
push eax  +
call ds:GlobalLock  +
mov [ebp+var_C] eax +
test eax eax +
jz loc_1006E76  +
cmp eax 0FFFFFFFFh +
jz loc_1006E76  +
push esi  +
push edi  +
push eax  +
call memcpy  +
add esp 0Ch +
push [ebp+ppstm]  +
push 1  +
push [ebp+hGlobal]  +
call ds:CreateStreamOnHGlobal  +
jmp loc_1006E8A  +
call ds:GetLastError  +
cmp eax edi +
jmp loc_1006E7E  +
call ds:GetLastError  +
cmp eax edi +
jg loc_1006E80  +
mov esi eax +
jmp loc_1006EAA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
lea eax [ebp+ppv] +
push eax  +
push offset riid  +
xor ebx ebx +
push 15h  +
push ebx  +
push offset rclsid  +
mov [ebp+ppv] ebx +
mov [ebp+var_8] ebx +
call ds:CoCreateInstance  +
mov esi eax +
cmp esi ebx +
jl loc_1006FA6  +
push [ebp+arg_0]  +
call ds:SysAllocString  +
mov [ebp+var_8] eax +
cmp eax ebx +
jnz loc_1006F70  +
mov esi 8007000Eh +
jmp loc_1006FA6  +
push dword_1013B8C  +
mov eax [ebp+ppv] +
push [ebp+var_8]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+54h]  +
mov esi eax +
cmp esi ebx +
jl loc_1006FA6  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push edi  +
mov edi [ebp+arg_4] +
push edi  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
cmp esi ebx +
jl loc_1006FA5  +
mov eax [ebp+ppv] +
mov [edi+4] eax +
mov [ebp+ppv] ebx +
pop edi  +
mov eax [ebp+ppv] +
cmp eax ebx +
jz loc_1006FB6  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+ppv] ebx +
cmp [ebp+var_8] ebx +
jz loc_1006FC4  +
push [ebp+var_8]  +
call ds:SysFreeString  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+ppv] 0 +
push esi  +
lea eax [ebp+ppv] +
push eax  +
push offset stru_1001A40  +
push 15h  +
push 0  +
push offset stru_1001A80  +
call ds:CoCreateInstance  +
mov esi eax +
test esi esi +
jl loc_1007030  +
cmp dword_10127E0 0 +
mov eax [ebp+ppv] +
mov ecx [eax] +
jz loc_1007020  +
push dword_10127F4  +
push dword_1013B8C  +
push eax  +
call dword ptr [ecx+40h]  +
mov esi eax +
test esi esi +
jl loc_1007030  +
jmp loc_100702C  +
push dword_1013B8C  +
push eax  +
call dword ptr [ecx+3Ch]  +
mov esi eax +
test esi esi +
jge loc_100703F  +
mov eax [ebp+ppv] +
test eax eax +
jz loc_1007047  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1007047  +
mov eax [ebp+arg_0] +
mov ecx [ebp+ppv] +
mov [eax] ecx +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push ebx  +
push esi  +
push edi  +
lea edx [ebp+var_4] +
push edx  +
xor ebx ebx +
push eax  +
mov [ebp+var_4] ebx +
mov [ebp+var_8] ebx +
call dword ptr [ecx+1Ch]  +
mov esi eax +
cmp esi ebx +
jl loc_100712F  +
mov eax [ebp+var_4] +
mov ecx [eax] +
lea edx [ebp+var_C] +
push edx  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
cmp esi ebx +
jl loc_100712F  +
cmp [ebp+var_C] 1 +
jnz loc_10070D8  +
push 3  +
pop eax  +
lea edx [ebp+var_8] +
push edx  +
mov word ptr [ebp+var_1C] ax +
mov eax [ebp+var_4] +
mov ecx [eax] +
sub esp 10h +
mov [ebp+var_14] ebx +
mov edi esp +
lea esi [ebp+var_1C] +
movs   +
movs   +
movs   +
push eax  +
movs   +
call dword ptr [ecx+20h]  +
mov esi eax +
cmp esi ebx +
jl loc_100712F  +
mov eax [ebp+var_8] +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push eax  +
call dword ptr [ecx+24h]  +
mov esi eax +
cmp esi ebx +
jl loc_100712F  +
jmp loc_10070DF  +
mov [ebp+arg_0] 0FFh +
mov eax [ebp+arg_0] +
sub eax ebx +
jz loc_1007126  +
dec eax  +
jz loc_100711B  +
dec eax  +
jz loc_1007110  +
dec eax  +
jz loc_1007105  +
dec eax  +
mov eax [ebp+arg_4] +
jz loc_10070FD  +
mov dword ptr [eax] 286h +
jmp loc_100712F  +
mov dword ptr [eax] 28Bh +
jmp loc_100712F  +
mov eax [ebp+arg_4] +
mov dword ptr [eax] 25Fh +
jmp loc_100712F  +
mov eax [ebp+arg_4] +
mov dword ptr [eax] 285h +
jmp loc_100712F  +
mov eax [ebp+arg_4] +
mov dword ptr [eax] 25Eh +
jmp loc_100712F  +
mov eax [ebp+arg_4] +
mov dword ptr [eax] 25Dh +
mov eax [ebp+var_4] +
cmp eax ebx +
jz loc_100713F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_4] ebx +
mov eax [ebp+var_8] +
cmp eax ebx +
jz loc_100714C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push eax  +
call dword ptr [ecx+84h]  +
test eax eax +
jge loc_100717A  +
mov ecx [ebp+arg_4] +
xor eax eax +
jmp loc_100718E  +
mov ecx [ebp+arg_0] +
sub ecx 0 +
jz loc_10071B4  +
dec ecx  +
jz loc_10071A9  +
dec ecx  +
jz loc_100719E  +
dec ecx  +
mov ecx [ebp+arg_4] +
jz loc_1007196  +
mov dword ptr [ecx] 284h +
jmp loc_10071BD  +
mov dword ptr [ecx] 262h +
jmp loc_10071BD  +
mov ecx [ebp+arg_4] +
mov dword ptr [ecx] 28Dh +
jmp loc_10071BD  +
mov ecx [ebp+arg_4] +
mov dword ptr [ecx] 261h +
jmp loc_10071BD  +
mov ecx [ebp+arg_4] +
mov dword ptr [ecx] 260h +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax dword_1013B58 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
mov eax [esi] +
push edi  +
mov edi [ebp+arg_0] +
lea ecx [ebp+rguid] +
push ecx  +
push esi  +
call dword ptr [eax+24h]  +
mov ebx eax +
test ebx ebx +
jl loc_100728F  +
push 800h  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+lpMem] eax +
test eax eax +
jnz loc_1007217  +
mov ebx 8007000Eh +
jmp loc_1007277  +
push 400h  +
push eax  +
lea eax [ebp+rguid] +
push eax  +
call ds:StringFromGUID2  +
test eax eax +
jnz loc_1007232  +
mov ebx 80004005h +
jmp loc_1007277  +
push [ebp+lpMem]  +
call ds:SysAllocString  +
mov [ebp+var_1C] eax +
test eax eax +
jnz loc_1007249  +
mov ebx 8007000Eh +
jmp loc_1007268  +
push dword_1013B8C  +
mov ecx [edi] +
push eax  +
push edi  +
call dword ptr [ecx+54h]  +
test eax eax +
jge loc_100725F  +
xor ebx ebx +
inc ebx  +
jmp loc_1007268  +
mov eax [esi] +
push edi  +
push esi  +
call dword ptr [eax+58h]  +
mov ebx eax +
cmp [ebp+var_1C] 0 +
jz loc_1007277  +
push [ebp+var_1C]  +
call ds:SysFreeString  +
cmp [ebp+lpMem] 0 +
jz loc_100728F  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_100B071  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
push esi  +
mov esi ds:VariantInit +
push edi  +
xor edi edi +
lea eax [ebp+pvarg] +
push eax  +
mov [ebp+var_14] edi +
mov [ebp+var_4] edi +
mov [ebp+var_8] edi +
mov [ebp+var_C] edi +
mov [ebp+var_18] edi +
mov [ebp+var_10] edi +
mov [ebp+var_1C] edi +
mov [ebp+var_20] edi +
call esi  +
lea eax [ebp+var_40] +
push eax  +
call esi  +
mov eax [ebp+var_14] +
cmp eax edi +
jz loc_10072ED  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_14] edi +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push ebx  +
lea edx [ebp+var_14] +
push edx  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov ebx ds:VariantClear +
mov esi eax +
cmp esi edi +
jl loc_10074AB  +
mov eax [ebp+var_4] +
cmp eax edi +
jz loc_100731B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_4] edi +
mov eax [ebp+var_14] +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push eax  +
call dword ptr [ecx+24h]  +
mov esi eax +
cmp esi edi +
jl loc_10074AB  +
mov eax [ebp+var_8] +
cmp eax edi +
jz loc_1007342  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_8] edi +
mov eax [ebp+var_4] +
mov ecx [eax] +
lea edx [ebp+var_8] +
push edx  +
push offset dword_1001AB0  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
cmp esi edi +
jl loc_10074AB  +
jmp loc_1007484  +
push 9  +
pop eax  +
cmp ax word ptr [ebp+var_40] +
jnz loc_1007484  +
mov eax [ebp+var_18] +
cmp eax edi +
jz loc_100737F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_18] edi +
mov eax [ebp+var_38] +
mov ecx [eax] +
lea edx [ebp+var_18] +
push edx  +
push offset dword_10019E0  +
push eax  +
call dword ptr [ecx]  +
test eax eax +
jl loc_1007484  +
mov eax [ebp+var_10] +
cmp eax edi +
jz loc_10073A8  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_10] edi +
mov eax [ebp+var_18] +
mov ecx [eax] +
lea edx [ebp+var_10] +
push edx  +
push eax  +
call dword ptr [ecx+11Ch]  +
mov esi eax +
cmp esi edi +
jl loc_10074AB  +
mov eax [ebp+var_4] +
cmp eax edi +
jz loc_10073D2  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_4] edi +
mov eax [ebp+var_10] +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push eax  +
call dword ptr [ecx+24h]  +
mov esi eax +
cmp esi edi +
jl loc_10074AB  +
mov eax [ebp+var_C] +
cmp eax edi +
jz loc_10073F9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_C] edi +
mov eax [ebp+var_4] +
mov ecx [eax] +
lea edx [ebp+var_C] +
push edx  +
push offset dword_1001AB0  +
push eax  +
call dword ptr [ecx]  +
jmp loc_100745D  +
push 9  +
pop eax  +
cmp ax word ptr [ebp+pvarg.anonymous_0] +
jnz loc_1007463  +
mov eax [ebp+var_1C] +
cmp eax edi +
jz loc_1007425  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_1C] edi +
mov eax dword ptr [ebp+pvarg.anonymous_0+8] +
mov ecx [eax] +
lea edx [ebp+var_1C] +
push edx  +
push offset riid  +
push eax  +
call dword ptr [ecx]  +
test eax eax +
jl loc_1007463  +
cmp [ebp+var_20] edi +
jnz loc_1007452  +
mov eax [ebp+var_10] +
mov ecx [eax] +
lea edx [ebp+var_20] +
push edx  +
push eax  +
call dword ptr [ecx+38h]  +
mov esi eax +
cmp esi edi +
jl loc_10074AB  +
push [ebp+var_1C]  +
push [ebp+var_20]  +
call sub_10071C6  +
mov esi eax +
cmp esi edi +
jl loc_10074AB  +
lea eax [ebp+pvarg] +
push eax  +
call ebx  +
mov eax [ebp+var_C] +
mov ecx [eax] +
push edi  +
lea edx [ebp+pvarg] +
push edx  +
push 1  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
cmp esi edi +
jl loc_10074AB  +
cmp esi 1 +
jnz loc_100740C  +
lea eax [ebp+var_40] +
push eax  +
call ebx  +
mov eax [ebp+var_8] +
mov ecx [eax] +
push edi  +
lea edx [ebp+var_40] +
push edx  +
push 1  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
cmp esi edi +
jl loc_10074AB  +
cmp esi 1 +
jnz loc_1007362  +
xor esi esi +
lea eax [ebp+pvarg] +
push eax  +
call ebx  +
lea eax [ebp+var_40] +
push eax  +
call ebx  +
mov eax [ebp+var_14] +
pop ebx  +
cmp eax edi +
jz loc_10074C8  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_14] edi +
mov eax [ebp+var_4] +
cmp eax edi +
jz loc_10074D8  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_4] edi +
mov eax [ebp+var_8] +
cmp eax edi +
jz loc_10074E8  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_8] edi +
mov eax [ebp+var_C] +
cmp eax edi +
jz loc_10074F8  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_C] edi +
mov eax [ebp+var_18] +
cmp eax edi +
jz loc_1007508  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_18] edi +
mov eax [ebp+var_10] +
cmp eax edi +
jz loc_1007518  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_10] edi +
mov eax [ebp+var_1C] +
cmp eax edi +
jz loc_1007528  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_1C] edi +
mov eax [ebp+var_20] +
cmp eax edi +
jz loc_1007535  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push dword ptr [eax]  +
mov eax [ebp+arg_0] +
push dword ptr [eax]  +
call ds:__imp__wcsicmp  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 50h +
push ebx  +
push esi  +
mov esi ds:VariantInit +
xor ebx ebx +
push edi  +
lea eax [ebp+pvarg] +
push eax  +
mov [ebp+var_1C] ebx +
mov [ebp+var_18] ebx +
mov [ebp+var_4] ebx +
mov dword ptr [ebp+Arguments] ebx +
mov [ebp+var_C] ebx +
call esi  +
lea eax [ebp+var_40] +
push eax  +
call esi  +
lea eax [ebp+var_50] +
push eax  +
call esi  +
mov edi 800h +
push edi  +
push ebx  +
call ds:GetProcessHeap  +
mov esi ds:HeapAlloc +
push eax  +
call esi  +
mov [ebp+lpMem] eax +
cmp eax ebx +
jz loc_10075D5  +
push edi  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call esi  +
mov dword ptr [ebp+Arguments] eax +
cmp eax ebx +
jz loc_10075D5  +
push edi  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call esi  +
mov [ebp+var_C] eax +
cmp eax ebx +
jnz loc_10075E1  +
mov [ebp+arg_0] 8007000Eh +
jmp loc_100781D  +
mov esi [ebp+arg_0] +
mov eax [esi] +
lea ecx [ebp+pvarg] +
push ecx  +
push esi  +
call dword ptr [eax+30h]  +
cmp eax ebx +
mov [ebp+arg_0] eax +
jl loc_100781D  +
movzx eax word ptr [ebp+pvarg.anonymous_0] +
lea ecx [ebp+var_18] +
push ecx  +
mov [ebp+var_20] eax +
mov eax [esi] +
push esi  +
call dword ptr [eax+24h]  +
cmp eax ebx +
mov [ebp+arg_0] eax +
jl loc_100781D  +
mov eax [ebp+var_18] +
mov ecx [eax] +
lea edx [ebp+var_1C] +
push edx  +
push offset dword_1001AB0  +
push eax  +
call dword ptr [ecx]  +
cmp eax ebx +
mov [ebp+arg_0] eax +
jl loc_100781D  +
mov eax [esi] +
lea ecx [ebp+var_14] +
push ecx  +
push esi  +
call dword ptr [eax+1Ch]  +
cmp eax ebx +
mov [ebp+arg_0] eax +
jl loc_100781D  +
cmp [ebp+var_14] ebx +
jbe loc_10076BA  +
mov eax [ebp+lpMem] +
mov esi ds:LoadStringW +
mov edi 400h +
push edi  +
push eax  +
push [ebp+uID]  +
xor ecx ecx +
push ebx  +
mov [eax] cx +
call esi  +
mov eax dword ptr [ebp+Arguments] +
push edi  +
push eax  +
push [ebp+arg_8]  +
xor ecx ecx +
push ebx  +
mov [eax] cx +
call esi  +
mov eax [ebp+var_C] +
push edi  +
push eax  +
push [ebp+arg_C]  +
xor ecx ecx +
push ebx  +
mov [eax] cx +
call esi  +
push [ebp+var_C]  +
movzx eax word ptr [ebp+var_20] +
push [ebp+lpMem]  +
push dword ptr [ebp+Arguments]  +
push offset a118s220s3S  +
call sub_100D857  +
add esp 10h +
push 4Fh  +
pop esi  +
push offset asc_10017A8  +
call sub_100D8C5  +
dec esi  +
jnz loc_10076A3  +
push offset asc_10017A4  +
call sub_100D8C5  +
xor edi edi +
cmp [ebp+var_14] ebx +
jbe loc_100781D  +
mov esi offset dword_10017A0 +
mov eax [ebp+var_4] +
cmp eax ebx +
jz loc_10076DA  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_4] ebx +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
lea eax [ebp+var_40] +
push eax  +
call ds:VariantClear  +
lea eax [ebp+var_50] +
push eax  +
call ds:VariantClear  +
mov eax [ebp+var_1C] +
mov ecx [eax] +
push ebx  +
lea edx [ebp+pvarg] +
push edx  +
push 1  +
push eax  +
call dword ptr [ecx+0Ch]  +
cmp eax ebx +
mov [ebp+arg_0] eax +
jl loc_100781D  +
mov eax dword ptr [ebp+pvarg.anonymous_0+8] +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push offset dword_1001A50  +
push eax  +
call dword ptr [ecx]  +
cmp eax ebx +
mov [ebp+arg_0] eax +
jl loc_100781D  +
push 8  +
pop eax  +
mov word ptr [ebp+var_40] ax +
mov eax [ebp+var_4] +
mov ecx [eax] +
lea edx [ebp+var_38] +
push edx  +
push eax  +
call dword ptr [ecx+1Ch]  +
cmp eax ebx +
mov [ebp+arg_0] eax +
jl loc_100781D  +
push 8  +
pop eax  +
mov word ptr [ebp+var_50] ax +
mov eax [ebp+var_4] +
mov ecx [eax] +
lea edx [ebp+var_48] +
push edx  +
push eax  +
call dword ptr [ecx+2Ch]  +
cmp eax ebx +
mov [ebp+arg_0] eax +
jl loc_100781D  +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
mov eax [ebp+var_4] +
mov ecx [eax] +
lea edx [ebp+pvarg] +
push edx  +
push eax  +
call dword ptr [ecx+34h]  +
cmp eax ebx +
mov [ebp+arg_0] eax +
jl loc_100781D  +
movzx eax word ptr [ebp+var_20] +
mov ecx [ebp+var_38] +
cmp eax 11h +
jz loc_10077E1  +
cmp eax 15h +
jz loc_10077BB  +
cmp ecx ebx +
jnz loc_10077A6  +
mov ecx esi +
mov eax [ebp+var_48] +
cmp eax ebx +
jnz loc_10077AF  +
mov eax esi +
push ecx  +
push eax  +
push dword ptr [ebp+pvarg.anonymous_0+8]  +
push offset a0x108x220s3S  +
jmp loc_10077FC  +
cmp ecx ebx +
jnz loc_10077C1  +
mov ecx esi +
mov eax [ebp+var_48] +
cmp eax ebx +
jnz loc_10077CA  +
mov eax esi +
push ecx  +
push eax  +
push dword ptr [ebp+pvarg.anonymous_0+0Ch]  +
push dword ptr [ebp+pvarg.anonymous_0+8]  +
push offset a0x1016i64x220s  +
call sub_100D857  +
add esp 14h +
jmp loc_1007804  +
cmp ecx ebx +
jnz loc_10077E7  +
mov ecx esi +
mov eax [ebp+var_48] +
cmp eax ebx +
jnz loc_10077F0  +
mov eax esi +
push ecx  +
push eax  +
movsx eax byte ptr [ebp+pvarg.anonymous_0+8] +
push eax  +
push offset a0x102x220s3S  +
call sub_100D857  +
add esp 10h +
inc edi  +
cmp edi [ebp+var_14] +
jb loc_10076CA  +
cmp [ebp+var_14] ebx +
jbe loc_100781D  +
push offset asc_10017A4  +
call sub_100D8C5  +
mov esi ds:VariantClear +
lea eax [ebp+pvarg] +
push eax  +
call esi  +
lea eax [ebp+var_40] +
push eax  +
call esi  +
lea eax [ebp+var_50] +
push eax  +
call esi  +
mov eax [ebp+var_18] +
cmp eax ebx +
jz loc_1007845  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_18] ebx +
mov eax [ebp+var_1C] +
cmp eax ebx +
jz loc_1007855  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_1C] ebx +
mov eax [ebp+var_4] +
cmp eax ebx +
jz loc_1007865  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_4] ebx +
mov esi ds:HeapFree +
cmp [ebp+lpMem] ebx +
jz loc_100787D  +
push [ebp+lpMem]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call esi  +
cmp dword ptr [ebp+Arguments] ebx +
jz loc_100788F  +
push dword ptr [ebp+Arguments]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call esi  +
cmp [ebp+var_C] ebx +
jz loc_10078A1  +
push [ebp+var_C]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call esi  +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
mov eax dword_1013B58 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_C] +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
push 100h  +
push edi  +
mov [ebp+var_28] eax +
mov [ebp+var_24] edi +
mov [ebp+var_18] edi +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+lpMem] eax +
cmp eax edi +
jnz loc_10078FF  +
mov [ebp+var_1C] 8007000Eh +
jmp loc_1007AA8  +
mov eax [esi+4] +
mov ecx [eax] +
lea edx [ebp+rguid] +
push edx  +
push eax  +
call dword ptr [ecx+24h]  +
cmp eax edi +
mov [ebp+var_1C] eax +
jl loc_1007A95  +
push 80h  +
push [ebp+lpMem]  +
lea eax [ebp+rguid] +
push eax  +
call ds:StringFromGUID2  +
test eax eax +
jnz loc_100794C  +
call ds:GetLastError  +
cmp eax edi +
jle loc_1007941  +
and eax 0FFFFh +
or eax 80070000h +
cmp eax edi +
mov [ebp+var_1C] eax +
jl loc_1007A95  +
cmp ebx edi +
jz loc_100797C  +
mov edi ds:__imp__wcsicmp +
push ebx  +
push dword ptr [esi]  +
call edi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1007971  +
push ebx  +
push [ebp+lpMem]  +
call edi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1007A95  +
xor eax eax +
inc eax  +
mov [ebp+var_24] eax +
mov [ebp+arg_8] eax +
jmp loc_100797F  +
xor eax eax +
inc eax  +
cmp [ebp+arg_8] 0 +
mov ecx [ebp+var_28] +
mov [ecx] eax +
mov ebx offset asc_10017A4 +
jz loc_10079B3  +
push 27Ch  +
push 0  +
call sub_100D871  +
pop ecx  +
pop ecx  +
push 4Fh  +
pop edi  +
push offset asc_10017A8  +
call sub_100D8C5  +
dec edi  +
jnz loc_10079A0  +
push ebx  +
call sub_100D8C5  +
push [ebp+lpMem]  +
push dword ptr [esi]  +
push offset a140s238s  +
call sub_100D857  +
add esp 0Ch +
cmp [ebp+var_24] 0 +
jz loc_1007A95  +
push ebx  +
call sub_100D8C5  +
mov eax [ebp+var_18] +
test eax eax +
jz loc_10079E6  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and [ebp+var_18] 0 +
mov eax [esi+4] +
mov ecx [eax] +
lea edx [ebp+var_18] +
push edx  +
push eax  +
call dword ptr [ecx+30h]  +
mov [ebp+var_1C] eax +
test eax eax +
jl loc_1007A95  +
mov ebx 291h +
push ebx  +
lea edi [ebx-1] +
push edi  +
push 282h  +
push [ebp+var_18]  +
call sub_1007560  +
mov [ebp+var_1C] eax +
test eax eax +
jl loc_1007A95  +
mov eax [ebp+var_18] +
test eax eax +
jz loc_1007A2D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and [ebp+var_18] 0 +
mov eax [esi+4] +
mov ecx [eax] +
lea edx [ebp+var_18] +
push edx  +
push eax  +
call dword ptr [ecx+2Ch]  +
mov [ebp+var_1C] eax +
test eax eax +
jl loc_1007A95  +
push ebx  +
push edi  +
push 283h  +
push [ebp+var_18]  +
call sub_1007560  +
mov [ebp+var_1C] eax +
test eax eax +
jl loc_1007A95  +
mov eax [ebp+var_18] +
xor edi edi +
cmp eax edi +
jz loc_1007A69  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_18] edi +
mov esi [esi+4] +
mov eax [esi] +
lea ecx [ebp+var_18] +
push ecx  +
push esi  +
call dword ptr [eax+64h]  +
test eax eax +
jge loc_1007A7F  +
mov [ebp+var_1C] edi +
jmp loc_1007A95  +
push edi  +
push 28Fh  +
push 292h  +
push [ebp+var_18]  +
call sub_1007560  +
mov [ebp+var_1C] eax +
push [ebp+lpMem]  +
xor edi edi +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax [ebp+var_18] +
cmp eax edi +
pop edi  +
pop esi  +
pop ebx  +
jz loc_1007AB8  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_1C] +
xor ecx ebp +
call sub_100B071  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1007B38  +
mov eax ecx +
push esi  +
lea esi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_1007AE0  +
sub eax esi +
sar eax 1 +
lea eax [ecx+eax*2-2] +
pop esi  +
jmp loc_1007B12  +
movzx edx word ptr [eax] +
cmp dx 20h +
jz loc_1007B10  +
cmp dx 0Dh +
jz loc_1007B10  +
cmp dx 0Ah +
jz loc_1007B10  +
cmp dx 9 +
jnz loc_1007B16  +
dec eax  +
dec eax  +
cmp eax ecx +
jnb loc_1007AF5  +
inc eax  +
inc eax  +
movzx ecx word ptr [eax] +
cmp cx 20h +
jz loc_1007B33  +
cmp cx 0Ah +
jz loc_1007B33  +
cmp cx 9 +
jz loc_1007B33  +
cmp cx 0Dh +
jnz loc_1007B38  +
xor ecx ecx +
mov [eax] cx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push edi  +
xor ebx ebx +
push 0FFFFFFF6h  +
mov [ebp+var_C] ebx +
mov dword ptr [ebp+Buffer] ebx +
mov [ebp+dwMode] ebx +
call ds:GetStdHandle  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jz loc_1007CE7  +
cmp edi ebx +
jz loc_1007CE7  +
push esi  +
lea eax [ebp+dwMode] +
push eax  +
push edi  +
call ds:GetConsoleMode  +
mov eax [ebp+dwMode] +
and eax 0FFFFFFF9h +
push eax  +
push edi  +
call ds:SetConsoleMode  +
cmp [ebp+arg_4] 2 +
jb loc_1007CBB  +
cmp [ebp+arg_8] ebx +
jz loc_1007CBB  +
mov esi ds:ReadFile +
push edi  +
call ds:GetFileType  +
and eax 0FFFF7FFFh +
push 0  +
cmp eax 2 +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push 1  +
jz loc_1007C17  +
lea eax [ebp-1] +
push eax  +
push edi  +
call esi  +
test eax eax +
jz loc_1007CA2  +
cmp [ebp+NumberOfBytesRead] 0 +
jnz loc_1007BDB  +
mov dword ptr [ebp+Buffer] 0Ah +
jmp loc_1007C22  +
push 1  +
lea eax [ebp+Buffer] +
push eax  +
push 1  +
lea eax [ebp-1] +
push eax  +
push 0  +
call ds:_getmbcp  +
push eax  +
call ds:MultiByteToWideChar  +
test eax eax +
jnz loc_1007BFD  +
and dword ptr [ebp+Buffer] eax +
push 0Dh  +
pop eax  +
cmp ax [ebp+Buffer] +
jnz loc_1007C22  +
push 0  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push 1  +
lea eax [ebp-1] +
push eax  +
push edi  +
call esi  +
jmp loc_1007C22  +
lea eax [ebp+Buffer] +
push eax  +
push edi  +
call ds:ReadConsoleW  +
mov ecx dword ptr [ebp+Buffer] +
movzx eax cx +
sub eax 8 +
jz loc_1007C76  +
dec eax  +
dec eax  +
jz loc_1007C96  +
sub eax 3 +
jz loc_1007C96  +
sub eax 0Eh +
jz loc_1007C54  +
mov eax [ebp+arg_4] +
dec eax  +
cmp ebx eax +
jnb loc_1007BA4  +
mov eax [ebp+arg_0] +
mov [eax+ebx*2] cx +
inc ebx  +
jmp loc_1007BA4  +
test ebx ebx +
jbe loc_1007BA4  +
push 8  +
push 8  +
push offset aCC  +
call ds:wprintf  +
add esp 0Ch +
dec ebx  +
jnz loc_1007C5C  +
jmp loc_1007BA4  +
test ebx ebx +
jbe loc_1007BA4  +
cmp ebx [ebp+arg_4] +
jnb loc_1007BA4  +
mov ecx [ebp+arg_0] +
xor eax eax +
mov [ecx+ebx*2] ax +
dec ebx  +
jmp loc_1007BA4  +
push offset asc_10017A4  +
call sub_100D8C5  +
jmp loc_1007CC2  +
call ds:GetLastError  +
test eax eax +
jle loc_1007CB6  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_C] eax +
jmp loc_1007CC2  +
mov [ebp+var_C] 80070057h +
push [ebp+dwMode]  +
push edi  +
call ds:SetConsoleMode  +
pop esi  +
cmp ebx [ebp+arg_4] +
jb loc_1007CD9  +
mov eax 8007007Ah +
jmp loc_1007CFB  +
mov ecx [ebp+arg_0] +
xor eax eax +
mov [ecx+ebx*2] ax +
mov eax [ebp+var_C] +
jmp loc_1007CFB  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1007CFB  +
and eax 0FFFFh +
or eax 80070000h +
pop edi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+arg_4] +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1007B41  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
test edx edx +
jz loc_1007D39  +
cmp edx 7FFFFFFFh +
jbe loc_1007D3E  +
mov eax 80070057h +
test eax eax +
jl loc_1007D54  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_100502C  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
push ebx  +
xor eax eax +
push esi  +
mov esi 7FFFFFFFh +
test edx edx +
jz loc_1007D76  +
cmp edx esi +
jbe loc_1007D7B  +
mov eax 80070057h +
mov ebx [ebp+arg_0] +
test eax eax +
jl loc_1007D93  +
push edi  +
lea edi [ebp+arg_0] +
mov eax ebx +
call sub_1004FF5  +
mov ecx [ebp+arg_0] +
pop edi  +
jmp loc_1007D95  +
xor ecx ecx +
test eax eax +
jl loc_1007DAC  +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_8] +
push esi  +
sub edx ecx +
push 0  +
lea ecx [ebx+ecx*2] +
call sub_100502C  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1007DCD  +
cmp ecx 7FFFFFFFh +
jbe loc_1007DD2  +
mov eax 80070057h +
test eax eax +
jl loc_1007E0F  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:__imp__vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_1007DFF  +
cmp eax esi +
ja loc_1007DFF  +
jnz loc_1007E0A  +
jmp loc_1007E04  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+var_C] +
xor ebx ebx +
push eax  +
mov [ebp+hMem] ebx +
mov dword ptr [ebp+var_C] ebx +
call sub_1005B60  +
mov esi eax +
cmp esi ebx +
jl loc_100803E  +
push 800h  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov edi eax +
mov [ebp+lpMem] edi +
cmp edi ebx +
jnz loc_1007E62  +
mov esi 8007000Eh +
jmp loc_1008026  +
push dword ptr [ebp+var_C]  +
push dword ptr [ebp+var_C]  +
push dword ptr [ebp+var_C]  +
push offset aOSgSdA0x7S  +
push 400h  +
push edi  +
call sub_1007DB7  +
mov esi eax +
add esp 18h +
cmp esi ebx +
jl loc_1008026  +
push ebx  +
lea eax [ebp+hMem] +
push eax  +
push 1  +
push edi  +
call ConvertStringSecurityDescriptorToSecurityDescriptorW  +
mov ebx 0FFFFh +
mov edi 80070000h +
test eax eax +
jnz loc_1007EB5  +
call ds:GetLastError  +
test eax eax +
jle loc_1007EB1  +
and eax ebx +
or eax edi +
mov esi eax +
jmp loc_1007EB7  +
xor esi esi +
test esi esi +
jl loc_1008026  +
push 1  +
lea eax [ebp+pSecDesc] +
push eax  +
call ds:InitializeSecurityDescriptor  +
test eax eax +
jnz loc_1007EE1  +
call ds:GetLastError  +
test eax eax +
jle loc_1007EDD  +
and eax ebx +
or eax edi +
mov esi eax +
jmp loc_1007EE3  +
xor esi esi +
test esi esi +
jl loc_1008026  +
lea eax [ebp+bDaclDefaulted] +
push eax  +
lea eax [ebp+pGroup] +
push eax  +
push [ebp+hMem]  +
call ds:GetSecurityDescriptorOwner  +
test eax eax +
jnz loc_1007F12  +
call ds:GetLastError  +
test eax eax +
jle loc_1007F0E  +
and eax ebx +
or eax edi +
mov esi eax +
jmp loc_1007F14  +
xor esi esi +
test esi esi +
jl loc_1008026  +
push [ebp+bDaclDefaulted]  +
lea eax [ebp+pSecDesc] +
push [ebp+pGroup]  +
push eax  +
call ds:SetSecurityDescriptorOwner  +
test eax eax +
jnz loc_1007F42  +
call ds:GetLastError  +
test eax eax +
jle loc_1007F3E  +
and eax ebx +
or eax edi +
mov esi eax +
jmp loc_1007F44  +
xor esi esi +
test esi esi +
jl loc_1008026  +
lea eax [ebp+bDaclDefaulted] +
push eax  +
lea eax [ebp+pGroup] +
push eax  +
push [ebp+hMem]  +
call ds:GetSecurityDescriptorGroup  +
test eax eax +
jnz loc_1007F73  +
call ds:GetLastError  +
test eax eax +
jle loc_1007F6F  +
and eax ebx +
or eax edi +
mov esi eax +
jmp loc_1007F75  +
xor esi esi +
test esi esi +
jl loc_1008026  +
push [ebp+bDaclDefaulted]  +
lea eax [ebp+pSecDesc] +
push [ebp+pGroup]  +
push eax  +
call ds:SetSecurityDescriptorGroup  +
test eax eax +
jnz loc_1007FA3  +
call ds:GetLastError  +
test eax eax +
jle loc_1007F9F  +
and eax ebx +
or eax edi +
mov esi eax +
jmp loc_1007FA5  +
xor esi esi +
test esi esi +
jl loc_1008026  +
lea eax [ebp+bDaclDefaulted] +
push eax  +
lea eax [ebp+pDacl] +
push eax  +
lea eax [ebp+bDaclPresent] +
push eax  +
push [ebp+hMem]  +
call ds:GetSecurityDescriptorDacl  +
test eax eax +
jnz loc_1007FD4  +
call ds:GetLastError  +
test eax eax +
jle loc_1007FD0  +
and eax ebx +
or eax edi +
mov esi eax +
jmp loc_1007FD6  +
xor esi esi +
test esi esi +
jl loc_1008026  +
push [ebp+bDaclDefaulted]  +
lea eax [ebp+pSecDesc] +
push [ebp+pDacl]  +
push [ebp+bDaclPresent]  +
push eax  +
call ds:SetSecurityDescriptorDacl  +
test eax eax +
jnz loc_1008003  +
call ds:GetLastError  +
test eax eax +
jle loc_1007FFF  +
and eax ebx +
or eax edi +
mov esi eax +
jmp loc_1008005  +
xor esi esi +
test esi esi +
jl loc_1008026  +
xor eax eax +
push eax  +
push 2020h  +
push eax  +
push 3  +
push 4  +
push eax  +
push eax  +
push 0FFFFFFFFh  +
lea eax [ebp+pSecDesc] +
push eax  +
call ds:CoInitializeSecurity  +
mov esi eax +
cmp [ebp+lpMem] 0 +
jz loc_100803E  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
push [ebp+hMem]  +
mov edi ds:LocalFree +
call edi  +
push dword ptr [ebp+var_C]  +
call edi  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
and [ebp+ppstm] 0 +
or [ebp+var_8] 0FFFFFFFFh +
and [ebp+ppv] 0 +
push esi  +
push edi  +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantInit  +
lea eax [ebp+ppv] +
push eax  +
push offset stru_1001AD0  +
push 15h  +
push 0  +
push offset stru_1001AE0  +
call ds:CoCreateInstance  +
mov esi eax +
test esi esi +
jl loc_100816A  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push 0FFFFFFFFh  +
push eax  +
call dword ptr [ecx+0FCh]  +
mov esi eax +
test esi esi +
jl loc_100816A  +
mov eax [ebp+arg_0] +
dec eax  +
jz loc_1008139  +
dec eax  +
jz loc_100811E  +
dec eax  +
jz loc_10080CA  +
mov esi 80070057h +
jmp loc_100816A  +
lea eax [ebp+ppstm] +
push eax  +
push 17h  +
push [ebp+lpName]  +
call sub_1006E02  +
mov esi eax +
test esi esi +
jl loc_100816A  +
mov eax [ebp+ppstm] +
mov ecx [eax] +
lea edx [ebp+pvarg.anonymous_0+8] +
push edx  +
push offset dword_1001AC0  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
test esi esi +
jl loc_100816A  +
push 0Dh  +
pop eax  +
lea edx [ebp+var_8] +
push edx  +
mov word ptr [ebp+pvarg.anonymous_0] ax +
mov eax [ebp+ppv] +
mov ecx [eax] +
sub esp 10h +
mov edi esp +
lea esi [ebp+pvarg] +
movs   +
movs   +
movs   +
push eax  +
movs   +
call dword ptr [ecx+0E8h]  +
jmp loc_100814C  +
push [ebp+lpName]  +
call ds:SysAllocString  +
mov dword ptr [ebp+pvarg.anonymous_0+8] eax +
test eax eax +
jnz loc_1008135  +
mov esi 8007000Eh +
jmp loc_100816A  +
push 8  +
jmp loc_10080FB  +
mov eax [ebp+ppv] +
mov ecx [eax] +
lea edx [ebp+var_8] +
push edx  +
push [ebp+lpName]  +
push eax  +
call dword ptr [ecx+104h]  +
mov esi eax +
test esi esi +
jl loc_100816A  +
or eax 0FFFFFFFFh +
cmp ax word ptr [ebp+var_8] +
jz loc_1008162  +
mov esi 80004005h +
jmp loc_100816A  +
mov eax [ebp+arg_8] +
mov ecx [ebp+ppv] +
mov [eax] ecx +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
mov eax [ebp+ppstm] +
test eax eax +
jz loc_1008185  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and [ebp+ppstm] 0 +
test esi esi +
jge loc_1008196  +
mov eax [ebp+ppv] +
test eax eax +
jz loc_1008196  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
xor esi esi +
mov [ebp+var_4] esi +
mov [ebp+lpMem] esi +
mov [ebp+var_C] esi +
cmp dword_1012960 esi +
jz loc_10082F0  +
cmp dword_1012964 esi +
jz loc_10081E1  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push esi  +
push esi  +
push eax  +
call dword ptr [ecx+0E8h]  +
mov [ebp+var_4] eax +
jmp loc_10082F0  +
push ebx  +
mov ebx dword_1012974 +
mov eax ebx +
push edi  +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx si +
jnz loc_10081EE  +
sub eax ecx +
sar eax 1 +
lea edi [ebx+eax*2+2] +
mov ecx edi +
mov eax offset asc_1001844 +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100822D  +
cmp dx si +
jz loc_1008229  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100822D  +
add eax 4 +
add ecx 4 +
cmp dx si +
jnz loc_1008207  +
xor eax eax +
jmp loc_1008232  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax esi +
jnz loc_1008284  +
push 800h  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov edi eax +
mov [ebp+lpMem] edi +
cmp edi esi +
jnz loc_100825B  +
mov [ebp+var_4] 8007000Eh +
jmp loc_10082D8  +
mov esi 400h +
push esi  +
push edi  +
push 269h  +
push 0  +
call ds:LoadStringW  +
push dword_1012794  +
push edi  +
call sub_100D857  +
pop ecx  +
pop ecx  +
push esi  +
push edi  +
call sub_1007D06  +
mov esi ds:SysAllocString +
push ebx  +
call esi  +
mov ebx eax +
test ebx ebx +
jnz loc_100829F  +
mov edi [ebp+var_C] +
mov [ebp+var_4] 8007000Eh +
jmp loc_10082C2  +
push edi  +
call esi  +
mov edi eax +
test edi edi +
jnz loc_10082B1  +
mov [ebp+var_4] 8007000Eh +
jmp loc_10082C2  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push edi  +
push ebx  +
push eax  +
call dword ptr [ecx+0E8h]  +
mov [ebp+var_4] eax +
mov esi ds:SysFreeString +
test ebx ebx +
jz loc_10082CF  +
push ebx  +
call esi  +
test edi edi +
jz loc_10082D6  +
push edi  +
call esi  +
xor esi esi +
pop edi  +
pop ebx  +
cmp [ebp+lpMem] esi +
jz loc_10082F0  +
push [ebp+lpMem]  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax [ebp+var_4] +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 82Ch +
mov eax dword_1013B58 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
mov esi [ebp+lpFileName] +
push edi  +
xor edi edi +
push edi  +
push 80h  +
push 3  +
push edi  +
push 1  +
push 80000000h  +
push esi  +
mov [ebp+var_82C] eax +
mov [ebp+var_810] edi +
mov [ebp+psa] edi +
mov [ebp+ppvData] edi +
call ds:CreateFileW  +
mov ebx eax +
mov [ebp+hFile] ebx +
cmp ebx 0FFFFFFFFh +
jnz loc_1008376  +
call ds:GetLastError  +
cmp eax edi +
jg loc_100836A  +
mov esi eax +
jmp loc_10087FD  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1008363  +
push edi  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push 4  +
lea eax [ebp+Buffer] +
push eax  +
push ebx  +
call ds:ReadFile  +
test eax eax +
jnz loc_10083AF  +
call ds:GetLastError  +
cmp eax edi +
jg loc_10083A3  +
mov esi eax +
jmp loc_10087D3  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100839C  +
cmp [ebp+NumberOfBytesRead] 4 +
jz loc_10083C2  +
mov esi 8007000Dh +
jmp loc_10087D3  +
mov eax [ebp+Buffer] +
test al al +
jnz loc_10083E2  +
test ah ah +
jnz loc_10083E2  +
cmp byte ptr [ebp+Buffer+2] 0FEh +
jnz loc_10083E2  +
cmp byte ptr [ebp+Buffer+3] 0FFh +
jz loc_10083B8  +
cmp byte ptr [ebp+Buffer+3] 0 +
jnz loc_10083FD  +
cmp byte ptr [ebp+Buffer+2] 0 +
jnz loc_10083FD  +
cmp ah 0FEh +
jnz loc_10083FD  +
cmp al 0FFh +
jz loc_10083B8  +
cmp ah 0FFh +
jnz loc_1008406  +
cmp al 0FEh +
jz loc_10083B8  +
cmp al 0EFh +
jnz loc_1008453  +
cmp ah 0BBh +
jnz loc_1008418  +
cmp byte ptr [ebp+Buffer+2] 0BFh +
jz loc_10083B8  +
push ebx  +
mov [ebp+var_828] edi +
call ds:CloseHandle  +
or [ebp+hFile] 0FFFFFFFFh +
push offset aR  +
push esi  +
call ds:_wfopen  +
pop ecx  +
pop ecx  +
mov [ebp+var_810] eax +
cmp eax edi +
jnz loc_1008466  +
call ds:_errno  +
mov esi [eax] +
cmp esi edi +
jmp loc_10086B4  +
cmp al 0FFh +
jnz loc_1008418  +
cmp ah 0FEh +
jnz loc_1008418  +
mov [ebp+var_828] 1 +
mov edi ds:fgetws +
mov ebx ds:SetFilePointerEx +
xor esi esi +
xor eax eax +
mov [ebp+cElements] esi +
mov [ebp+var_8] ax +
cmp [ebp+var_828] esi +
jz loc_100850F  +
push 2  +
pop eax  +
push esi  +
push esi  +
xor ecx ecx +
push ecx  +
push eax  +
push [ebp+hFile]  +
call ebx  +
test eax eax +
jnz loc_1008567  +
call ds:GetLastError  +
cmp eax esi +
jle loc_10087BB  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_10087BB  +
lea eax [ebp+var_808] +
push eax  +
call sub_1007ACE  +
xor eax eax +
cmp ax [ebp+var_808] +
jz loc_100850F  +
push 3Bh  +
pop eax  +
cmp ax [ebp+var_808] +
jz loc_100850F  +
push 23h  +
pop eax  +
cmp ax [ebp+var_808] +
jz loc_100850F  +
lea eax [ebp+cElements] +
push eax  +
push 1  +
push [ebp+cElements]  +
call sub_100BDA5  +
mov esi eax +
test esi esi +
jl loc_10087BD  +
push [ebp+var_810]  +
lea eax [ebp+var_808] +
push 401h  +
push eax  +
call edi  +
add esp 0Ch +
test eax eax +
jnz loc_10084C2  +
push [ebp+var_810]  +
call ds:ferror  +
pop ecx  +
test eax eax +
jnz loc_10086AA  +
push [ebp+cElements]  +
push 0  +
push 8  +
call ds:SafeArrayCreateVector  +
mov [ebp+psa] eax +
test eax eax +
jnz loc_1008664  +
mov esi 8007000Eh +
jmp loc_10087BD  +
push esi  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push 800h  +
lea eax [ebp+var_808] +
push eax  +
push [ebp+hFile]  +
call ds:ReadFile  +
test eax eax +
jz loc_10084A5  +
mov eax [ebp+NumberOfBytesRead] +
cmp eax 800h +
jnz loc_10085E0  +
lea eax [ebp+var_808] +
push 0Ah  +
push eax  +
call ds:wcsrchr  +
pop ecx  +
pop ecx  +
cmp eax esi +
jz loc_10085EC  +
xor ecx ecx +
mov [eax] cx +
lea ecx [ebp+var_808] +
sub eax ecx +
sar eax 1 +
add eax eax +
sub eax [ebp+NumberOfBytesRead] +
push 1  +
cdq   +
push esi  +
push edx  +
push eax  +
push [ebp+hFile]  +
call ebx  +
test eax eax +
jz loc_10084A5  +
jmp loc_10085EC  +
shr eax 1 +
xor ecx ecx +
mov [ebp+eax*2+var_808] cx +
push offset asc_1001848  +
lea eax [ebp+var_808] +
push eax  +
jmp loc_100863F  +
push esi  +
call sub_1007ACE  +
movzx eax word ptr [esi] +
xor ecx ecx +
cmp cx ax +
jz loc_1008638  +
push 3Bh  +
pop ecx  +
cmp cx ax +
jz loc_1008638  +
push 23h  +
pop ecx  +
cmp cx ax +
jz loc_1008638  +
lea eax [ebp+cElements] +
push eax  +
push 1  +
push [ebp+cElements]  +
call sub_100BDA5  +
mov esi eax +
test esi esi +
jl loc_10087BD  +
push offset asc_1001848  +
push 0  +
call ds:wcstok  +
mov esi eax +
pop ecx  +
pop ecx  +
test esi esi +
jnz loc_10085FA  +
cmp [ebp+NumberOfBytesRead] 800h +
jnz loc_100853F  +
xor esi esi +
jmp loc_1008567  +
lea eax [ebp+ppvData] +
push eax  +
push [ebp+psa]  +
call ds:SafeArrayAccessData  +
mov esi eax +
test esi esi +
jl loc_10087BD  +
xor esi esi +
mov [ebp+cElements] esi +
cmp [ebp+var_828] esi +
jnz loc_1008810  +
push esi  +
push esi  +
push [ebp+var_810]  +
call ds:fseek  +
add esp 0Ch +
test eax eax +
jz loc_10086CB  +
call ds:_errno  +
mov esi [eax] +
test esi esi +
jle loc_10087BD  +
and esi 0FFFFh +
or esi 80070000h +
jmp loc_10087BD  +
push [ebp+var_810]  +
lea eax [ebp+var_808] +
push 401h  +
push eax  +
call edi  +
add esp 0Ch +
test eax eax +
jz loc_10087A6  +
xor esi esi +
lea edi [ebp+var_808] +
mov eax edi +
push eax  +
call sub_1007ACE  +
mov ax [ebp+var_808] +
xor ecx ecx +
cmp cx ax +
jz loc_1008783  +
push 3Bh  +
pop ecx  +
cmp cx ax +
jz loc_1008783  +
push 23h  +
pop ecx  +
cmp cx ax +
jz loc_1008783  +
cmp ax 22h +
jnz loc_100875F  +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1008723  +
sub eax edx +
sar eax 1 +
cmp word ptr [ebp+eax*2+cElements+2] 22h +
jnz loc_100875F  +
lea edi [ebp-806h] +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1008747  +
sub eax edx +
sar eax 1 +
xor ecx ecx +
mov [ebp+eax*2+var_808] cx +
push edi  +
call ds:SysAllocString  +
mov ecx [ebp+ppvData] +
mov [esi+ecx] eax +
mov eax [ebp+ppvData] +
mov eax [esi+eax] +
add esi 4 +
test eax eax +
jz loc_100855D  +
push [ebp+var_810]  +
lea eax [ebp+var_808] +
push 401h  +
push eax  +
call ds:fgetws  +
add esp 0Ch +
test eax eax +
jnz loc_10086EC  +
mov eax [ebp+var_82C] +
push [ebp+psa]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8Ch]  +
mov esi eax +
cmp [ebp+var_810] 0 +
jz loc_10087D3  +
push [ebp+var_810]  +
call ds:fclose  +
pop ecx  +
cmp [ebp+hFile] 0FFFFFFFFh +
jz loc_10087E8  +
push [ebp+hFile]  +
call ds:CloseHandle  +
cmp [ebp+psa] 0 +
jz loc_10087FD  +
push [ebp+psa]  +
call ds:SafeArrayDestroy  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100B071  +
leave   +
retn 8  +
push 2  +
pop eax  +
push esi  +
push esi  +
xor ecx ecx +
push ecx  +
push eax  +
push [ebp+hFile]  +
call ebx  +
test eax eax +
jz loc_10084A5  +
push esi  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
mov edi 800h +
push edi  +
lea eax [ebp+var_808] +
push eax  +
push [ebp+hFile]  +
call ds:ReadFile  +
test eax eax +
jz loc_10084A5  +
mov eax [ebp+NumberOfBytesRead] +
cmp eax edi +
jnz loc_10088A0  +
lea eax [ebp+var_808] +
push 0Ah  +
push eax  +
call ds:wcsrchr  +
pop ecx  +
pop ecx  +
cmp eax esi +
jz loc_10088AC  +
xor ecx ecx +
mov [eax] cx +
lea ecx [ebp+var_808] +
sub eax ecx +
sar eax 1 +
add eax eax +
sub eax [ebp+NumberOfBytesRead] +
push 1  +
cdq   +
push esi  +
push edx  +
push eax  +
push [ebp+hFile]  +
call ebx  +
test eax eax +
jz loc_10084A5  +
jmp loc_10088AC  +
shr eax 1 +
xor ecx ecx +
mov [ebp+eax*2+var_808] cx +
push offset asc_1001848  +
lea eax [ebp+var_808] +
push eax  +
jmp loc_1008950  +
push esi  +
call sub_1007ACE  +
movzx eax word ptr [esi] +
xor ecx ecx +
cmp cx ax +
jz loc_1008949  +
push 3Bh  +
pop ecx  +
cmp cx ax +
jz loc_1008949  +
push 23h  +
pop ecx  +
cmp cx ax +
jz loc_1008949  +
cmp ax 22h +
jnz loc_100891A  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10088E8  +
sub eax edx +
sar eax 1 +
cmp word ptr [esi+eax*2-2] 22h +
jnz loc_100891A  +
inc esi  +
inc esi  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1008905  +
sub eax edx +
sar eax 1 +
xor ecx ecx +
mov [esi+eax*2-2] cx +
mov edi [ebp+cElements] +
push esi  +
shl edi 2 +
call ds:SysAllocString  +
mov ecx [ebp+ppvData] +
inc [ebp+cElements]  +
mov [edi+ecx] eax +
mov eax [ebp+ppvData] +
cmp dword ptr [edi+eax] 0 +
jz loc_100855D  +
push offset asc_1001848  +
push 0  +
call ds:wcstok  +
mov esi eax +
pop ecx  +
pop ecx  +
test esi esi +
jnz loc_10088BD  +
cmp [ebp+NumberOfBytesRead] 800h +
jnz loc_10087A6  +
xor esi esi +
jmp loc_1008829  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push esi  +
push edi  +
lea edx [ebp+var_4] +
push edx  +
xor esi esi +
push offset dword_10019D0  +
push eax  +
mov [ebp+var_8] esi +
mov [ebp+var_4] esi +
mov [ebp+psa] esi +
call dword ptr [ecx]  +
mov edi eax +
cmp edi esi +
jl loc_1008BA9  +
cmp dword_1013070 esi +
jz loc_10089D2  +
mov eax [ebp+var_4] +
push dword_1013084  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0A4h]  +
mov edi eax +
cmp edi esi +
jl loc_1008BA9  +
cmp dword_1012B70 esi +
jz loc_1008A10  +
movzx eax word_1012B8C +
movzx ecx word_1012B8E +
imul eax eax +
add eax ecx +
movzx ecx word_1012B90 +
imul eax eax +
add eax ecx +
mov ecx [ebp+var_4] +
mov edx [ecx] +
push eax  +
push ecx  +
call dword ptr [edx+9Ch]  +
mov edi eax +
cmp edi esi +
jl loc_1008BA9  +
push ebx  +
cmp dword_1012840 esi +
jz loc_1008B5C  +
xor ebx ebx +
push dword_1012854  +
push ds:off_1001854[esi]  +
call ds:__imp__wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1008A42  +
add esi 0Ch +
inc ebx  +
cmp esi 3Ch +
jb loc_1008A1F  +
jmp loc_1008A7E  +
mov eax [ebp+var_4] +
mov ecx [eax] +
mov esi ebx +
imul esi esi +
push ds:dword_1001858[esi]  +
push eax  +
call dword ptr [ecx+94h]  +
mov edi eax +
test edi edi +
jl loc_1008BA8  +
movzx edx ds:word_100185C[esi] +
mov eax [ebp+var_4] +
mov ecx [eax] +
push edx  +
push eax  +
call dword ptr [ecx+54h]  +
mov edi eax +
test edi edi +
jl loc_1008BA8  +
cmp ebx 5 +
jb loc_1008A8D  +
mov edi 80070057h +
jmp loc_1008BA8  +
imul ebx ebx +
cmp ds:dword_1001858[ebx] 2 +
jnz loc_1008B5C  +
mov eax [ebp+arg_4] +
and dword ptr [eax] 0 +
cmp dword_1012BE0 0 +
jz loc_1008B5C  +
push 21h  +
push lpFileName  +
call ds:wcschr  +
mov ebx eax +
pop ecx  +
pop ecx  +
test ebx ebx +
jnz loc_1008AF4  +
push lpFileName  +
call ds:SysAllocString  +
mov [ebp+var_8] eax +
test eax eax +
jz loc_1008B3D  +
mov eax [ebp+var_4] +
push [ebp+var_8]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+84h]  +
mov edi eax +
test edi edi +
jl loc_1008BA8  +
jmp loc_1008B5C  +
mov esi ds:SysAllocString +
xor eax eax +
mov [ebx] ax +
push lpFileName  +
call esi  +
mov [ebp+var_8] eax +
test eax eax +
jz loc_1008B3D  +
mov eax [ebp+var_4] +
push [ebp+var_8]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+84h]  +
mov edi eax +
test edi edi +
jl loc_1008BA8  +
push [ebp+var_8]  +
call ds:SysFreeString  +
lea eax [ebx+2] +
push eax  +
call esi  +
mov [ebp+var_8] eax +
test eax eax +
jnz loc_1008B44  +
mov edi 8007000Eh +
jmp loc_1008BA8  +
mov eax [ebp+var_4] +
push [ebp+var_8]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+2Ch]  +
mov edi eax +
test edi edi +
jl loc_1008BA8  +
push 21h  +
pop eax  +
mov [ebx] ax +
cmp dword_1013010 0 +
jz loc_1008B8F  +
mov eax dword_1013024 +
test eax eax +
jz loc_1008B8F  +
lea ecx [ebp+psa] +
push ecx  +
push eax  +
call sub_1006311  +
mov edi eax +
test edi edi +
jl loc_1008BA8  +
mov eax [ebp+var_4] +
push [ebp+psa]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8Ch]  +
jmp loc_1008BA6  +
cmp dword_1012FB0 0 +
jz loc_1008BA8  +
push [ebp+var_4]  +
push dword_1012FC4  +
call sub_10082FD  +
mov edi eax +
pop ebx  +
mov eax [ebp+var_4] +
xor esi esi +
cmp eax esi +
jz loc_1008BBB  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_4] esi +
cmp [ebp+var_8] esi +
jz loc_1008BC9  +
push [ebp+var_8]  +
call ds:SysFreeString  +
cmp [ebp+psa] esi +
jz loc_1008BD7  +
push [ebp+psa]  +
call ds:SafeArrayDestroy  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 54h +
mov eax dword_1013B58 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea eax [ebp+pvarg] +
push eax  +
mov [ebp+lpMem] ebx +
mov [ebp+var_30] ebx +
mov [ebp+var_18] ebx +
mov [ebp+var_2C] ebx +
mov [ebp+ppv] ebx +
mov [ebp+var_20] ebx +
mov [ebp+var_40] ebx +
mov [ebp+var_44] ebx +
call ds:VariantInit  +
mov eax [esi] +
lea ecx [ebp+var_2C] +
push ecx  +
push esi  +
call dword ptr [eax+11Ch]  +
mov esi eax +
cmp esi ebx +
jl loc_10090DF  +
lea eax [ebp+ppv] +
push eax  +
push offset stru_1001A40  +
push 15h  +
push ebx  +
push offset stru_1001A80  +
call ds:CoCreateInstance  +
mov esi eax +
cmp esi ebx +
jl loc_10090DF  +
push 800h  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
mov [ebp+lpMem] esi +
cmp esi ebx +
jnz loc_1008C7E  +
mov esi 8007000Eh +
jmp loc_10090DF  +
cmp dword_1013260 ebx +
jz loc_1008CD8  +
push offset aR  +
push dword_1013274  +
call ds:_wfopen  +
pop ecx  +
pop ecx  +
mov [ebp+var_40] eax +
cmp eax ebx +
jnz loc_1008CBD  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_10090DD  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_10090DD  +
push eax  +
push 400h  +
push esi  +
call ds:fgetws  +
add esp 0Ch +
push esi  +
mov [ebp+var_1C] eax +
call sub_1007ACE  +
jmp loc_1008CF4  +
cmp dword_1013200 ebx +
jz loc_10090D2  +
mov eax dword_1013214 +
mov [ebp+var_1C] eax +
mov eax dword_1013204 +
mov [ebp+var_44] eax +
cmp [ebp+var_1C] ebx +
jz loc_10090D2  +
mov edi ds:wcstok +
mov [ebp+var_28] ebx +
mov [ebp+var_34] ebx +
cmp dword_1013260 ebx +
jz loc_1008DC1  +
mov eax [ebp+var_1C] +
movzx eax word ptr [eax] +
cmp eax 23h +
jz loc_10090AA  +
cmp eax 2Ah +
jz loc_10090AA  +
cmp eax 3Bh +
jz loc_10090AA  +
push offset asc_10018B0  +
push [ebp+var_1C]  +
call ds:wcsstr  +
mov edx [ebp+var_1C] +
pop ecx  +
pop ecx  +
push 2Dh  +
xor ecx ecx +
mov esi eax +
pop eax  +
cmp ax [edx] +
setz cl  +
mov [ebp+var_44] ecx +
cmp ecx ebx +
jz loc_1008D61  +
add [ebp+var_1C] 2 +
cmp esi ebx +
jz loc_1008DA3  +
inc esi  +
inc esi  +
push offset asc_10018B0  +
push esi  +
call ds:wcsstr  +
pop ecx  +
pop ecx  +
mov [ebp+var_3C] esi +
cmp eax ebx +
jz loc_1008E25  +
xor ecx ecx +
mov [eax] cx +
mov esi offset asc_10018A8 +
add eax 2 +
push esi  +
push eax  +
call edi  +
push esi  +
push ebx  +
mov [ebp+var_28] eax +
call edi  +
add esp 10h +
mov [ebp+var_34] eax +
jmp loc_1008E25  +
mov esi offset asc_10018A8 +
push esi  +
push [ebp+var_1C]  +
call edi  +
push esi  +
push ebx  +
mov [ebp+var_3C] eax +
call edi  +
push esi  +
push ebx  +
mov [ebp+var_28] eax +
call edi  +
add esp 18h +
jmp loc_1008D9B  +
cmp dword_1013200 ebx +
jz loc_1008CF4  +
mov ecx [ebp+var_1C] +
mov [ebp+var_3C] ecx +
cmp [ecx] bx +
jz loc_1008E22  +
mov eax ecx +
lea esi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx bx +
jnz loc_1008DDD  +
sub eax esi +
sar eax 1 +
lea ecx [ecx+eax*2+2] +
mov [ebp+var_28] ecx +
cmp [ecx] bx +
jz loc_1008E1D  +
mov eax ecx +
lea esi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx bx +
jnz loc_1008DFC  +
sub eax esi +
sar eax 1 +
lea eax [ecx+eax*2+2] +
xor ecx ecx +
mov [ebp+var_34] eax +
cmp cx [eax] +
jnz loc_1008E25  +
mov [ebp+var_34] ebx +
jmp loc_1008E25  +
mov [ebp+var_28] ebx +
jmp loc_1008E25  +
mov [ebp+var_3C] ebx +
cmp [ebp+var_3C] ebx +
jz loc_10090A2  +
mov eax [ebp+var_18] +
cmp eax ebx +
jz loc_1008E3E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_18] ebx +
mov eax [ebp+var_2C] +
mov ecx [eax] +
lea edx [ebp+var_18] +
push edx  +
push eax  +
call dword ptr [ecx+38h]  +
mov esi eax +
cmp esi ebx +
jl loc_10090DF  +
cmp [ebp+var_30] ebx +
jz loc_1008E63  +
push [ebp+var_30]  +
call ds:SysFreeString  +
push [ebp+var_3C]  +
call ds:SysAllocString  +
mov [ebp+var_30] eax +
cmp eax ebx +
jz loc_1008C74  +
mov eax [ebp+var_18] +
push [ebp+var_30]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+20h]  +
mov esi eax +
cmp esi ebx +
jl loc_10090DF  +
mov eax [ebp+var_18] +
mov ecx [eax] +
lea edx [ebp+var_14] +
push edx  +
push eax  +
call dword ptr [ecx+24h]  +
mov esi eax +
cmp esi ebx +
jl loc_10090DF  +
push 4  +
pop ecx  +
mov edi offset dword_100156C +
lea esi [ebp+var_14] +
xor eax eax +
cmps   +
jz loc_1008EC4  +
mov eax [ebp+var_28] +
cmp eax ebx +
jz loc_1008EF7  +
push 28h  +
pop ecx  +
cmp cx [eax] +
jnz loc_1008EF7  +
push dword_1013B8C  +
mov eax [ebp+var_18] +
push [ebp+var_30]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+54h]  +
mov esi eax +
cmp esi ebx +
jl loc_10090DF  +
mov eax [ebp+var_18] +
mov ecx [eax] +
lea edx [ebp+var_14] +
push edx  +
push eax  +
call dword ptr [ecx+24h]  +
mov esi eax +
cmp esi ebx +
jl loc_10090DF  +
lea eax [ebp+var_18] +
push eax  +
push [ebp+ppv]  +
lea esi [ebp+var_14] +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
call sub_1005CB8  +
mov esi eax +
cmp esi ebx +
jl loc_10090DF  +
cmp [ebp+var_28] ebx +
jz loc_1008FA5  +
mov eax [ebp+var_20] +
cmp eax ebx +
jz loc_1008F32  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_20] ebx +
mov eax [ebp+var_18] +
mov ecx [eax] +
lea edx [ebp+var_20] +
push edx  +
push eax  +
call dword ptr [ecx+30h]  +
mov esi eax +
cmp esi ebx +
jl loc_10090DF  +
push 4  +
pop eax  +
mov ecx eax +
mov edi offset dword_100152C +
lea esi [ebp+var_14] +
xor edx edx +
cmps   +
jz loc_1008F8C  +
mov ecx eax +
mov edi offset dword_100153C +
lea esi [ebp+var_14] +
xor edx edx +
cmps   +
jz loc_1008F8C  +
mov ecx eax +
mov edi offset dword_100155C +
lea esi [ebp+var_14] +
xor edx edx +
cmps   +
jz loc_1008F8C  +
mov ecx eax +
mov edi offset dword_100154C +
lea esi [ebp+var_14] +
xor eax eax +
cmps   +
jnz loc_1008F8F  +
xor eax eax +
inc eax  +
push [ebp+var_20]  +
push [ebp+var_28]  +
push eax  +
call sub_10063EB  +
mov esi eax +
cmp esi ebx +
jl loc_10090DF  +
cmp [ebp+var_34] ebx +
jz loc_1009015  +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
mov eax [ebp+var_20] +
cmp eax ebx +
jz loc_1008FC4  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_20] ebx +
mov eax [ebp+var_18] +
mov ecx [eax] +
lea edx [ebp+var_20] +
push edx  +
push eax  +
call dword ptr [ecx+2Ch]  +
mov esi eax +
cmp esi ebx +
jl loc_10090DF  +
push [ebp+var_34]  +
call ds:SysAllocString  +
mov dword ptr [ebp+pvarg.anonymous_0+8] eax +
cmp eax ebx +
jz loc_1008C74  +
push 8  +
pop eax  +
mov word ptr [ebp+pvarg.anonymous_0] ax +
mov eax [ebp+var_20] +
mov ecx [eax] +
sub esp 10h +
mov edi esp +
lea esi [ebp+pvarg] +
movs   +
movs   +
movs   +
push eax  +
movs   +
call dword ptr [ecx+40h]  +
mov esi eax +
cmp esi ebx +
jl loc_10090DF  +
cmp [ebp+var_44] ebx +
jnz loc_1009028  +
mov eax [ebp+ppv] +
push [ebp+var_18]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+28h]  +
jmp loc_100909C  +
mov eax [ebp+var_18] +
cmp eax ebx +
jz loc_1009038  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_18] ebx +
lea eax [ebp+var_18] +
push eax  +
push [ebp+var_2C]  +
lea esi [ebp+var_14] +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
call sub_1005CB8  +
mov esi eax +
cmp esi ebx +
jl loc_10090DF  +
cmp [ebp+var_18] ebx +
jz loc_10090A2  +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
mov eax [ebp+var_18] +
mov ecx [eax] +
lea edx [ebp+pvarg.anonymous_0+8] +
push edx  +
push offset dword_1001AA0  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
cmp esi ebx +
jl loc_10090DF  +
push 9  +
pop eax  +
mov word ptr [ebp+pvarg.anonymous_0] ax +
mov eax [ebp+var_2C] +
mov ecx [eax] +
sub esp 10h +
mov edi esp +
lea esi [ebp+pvarg] +
movs   +
movs   +
movs   +
push eax  +
movs   +
call dword ptr [ecx+2Ch]  +
mov esi eax +
cmp esi ebx +
jl loc_10090DF  +
cmp dword_1013260 ebx +
jz loc_10090C6  +
push [ebp+var_40]  +
push 400h  +
push [ebp+lpMem]  +
call ds:fgetws  +
add esp 0Ch +
push [ebp+lpMem]  +
jmp loc_1008CCE  +
cmp dword_1013200 ebx +
jz loc_1008CF4  +
push [ebp+ppv]  +
push [ebp+var_2C]  +
call sub_10064F4  +
mov esi eax +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
cmp [ebp+var_30] ebx +
jz loc_10090F7  +
push [ebp+var_30]  +
call ds:SysFreeString  +
mov eax [ebp+var_18] +
cmp eax ebx +
jz loc_1009107  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_18] ebx +
mov eax [ebp+var_2C] +
cmp eax ebx +
jz loc_1009117  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_2C] ebx +
mov eax [ebp+var_20] +
cmp eax ebx +
jz loc_1009127  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_20] ebx +
mov eax [ebp+ppv] +
cmp eax ebx +
jz loc_1009137  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+ppv] ebx +
cmp [ebp+var_40] ebx +
jz loc_1009146  +
push [ebp+var_40]  +
call ds:fclose  +
pop ecx  +
cmp [ebp+lpMem] ebx +
jz loc_100915C  +
push [ebp+lpMem]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100B071  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx [ebp+arg_0] +
mov eax [ebx] +
push esi  +
push edi  +
lea ecx [ebp+var_4] +
push ecx  +
push offset dword_10019E0  +
xor edi edi +
push ebx  +
mov [ebp+var_8] edi +
mov [ebp+var_4] edi +
call dword ptr [eax]  +
mov esi eax +
cmp esi edi +
jl loc_100942E  +
push ebx  +
call sub_10066D5  +
mov esi eax +
cmp esi edi +
jl loc_100942E  +
cmp dword_1013130 edi +
jz loc_10091EF  +
push dword_1013144  +
call ds:SysAllocString  +
mov [ebp+var_8] eax +
cmp eax edi +
jnz loc_10091D6  +
mov esi 8007000Eh +
jmp loc_1009420  +
mov eax [ebp+var_4] +
push [ebp+var_8]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+108h]  +
mov esi eax +
cmp esi edi +
jl loc_1009420  +
mov eax [ebp+var_4] +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push eax  +
call dword ptr [ecx+114h]  +
mov esi eax +
cmp esi edi +
jl loc_1009420  +
cmp dword_10132C0 edi +
jz loc_1009226  +
cmp dword_10132C4 edi +
jz loc_100921F  +
and [ebp+arg_0] 0FFFFFFFDh +
jmp loc_1009226  +
mov [ebp+arg_0] 2 +
cmp dword_1012BE0 edi +
jz loc_1009232  +
or [ebp+arg_0] 1 +
mov eax [ebp+var_4] +
push [ebp+arg_0]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+118h]  +
mov esi eax +
cmp esi edi +
jl loc_1009420  +
cmp dword_1013320 edi +
jz loc_1009276  +
mov eax [ebp+var_4] +
mov edx [eax] +
xor ecx ecx +
cmp dword_1013324 edi +
setnz cl  +
dec ecx  +
push ecx  +
push eax  +
call dword ptr [edx+0F0h]  +
mov esi eax +
cmp esi edi +
jl loc_1009420  +
cmp dword_1013380 edi +
jz loc_100929A  +
mov eax [ebp+var_4] +
push dword_1013394  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+84h]  +
mov esi eax +
cmp esi edi +
jl loc_1009420  +
cmp dword_1013190 edi +
jz loc_10092D8  +
movzx eax word_10131AC +
movzx ecx word_10131AE +
imul eax eax +
add eax ecx +
movzx ecx word_10131B0 +
imul eax eax +
add eax ecx +
mov ecx [ebp+var_4] +
mov edx [ecx] +
push eax  +
push ecx  +
call dword ptr [edx+0B4h]  +
mov esi eax +
cmp esi edi +
jl loc_1009420  +
cmp dword_10133E0 edi +
jz loc_1009344  +
mov ebx dword_10133F4 +
cmp ebx edi +
jz loc_1009344  +
mov edi ds:_wtoi +
push ebx  +
call edi  +
pop ecx  +
mov ecx [ebp+var_4] +
mov edx [ecx] +
push eax  +
push ecx  +
call dword ptr [edx+0D8h]  +
mov esi eax +
test esi esi +
jl loc_100941E  +
mov eax ebx +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1009310  +
sub eax edx +
sar eax 1 +
lea eax [ebx+eax*2+2] +
cmp [eax] cx +
jz loc_1009342  +
push eax  +
call edi  +
pop ecx  +
mov ecx [ebp+var_4] +
mov edx [ecx] +
push eax  +
push ecx  +
call dword ptr [edx+0D0h]  +
mov esi eax +
test esi esi +
jl loc_100941E  +
xor edi edi +
cmp dword_1013440 edi +
jz loc_10093AA  +
mov esi dword_1013454 +
cmp esi edi +
jz loc_10093AA  +
xor ebx ebx +
jmp loc_100936A  +
movzx eax word ptr [esi] +
push eax  +
call ds:towlower  +
mov [esi] ax +
inc esi  +
pop ecx  +
inc esi  +
cmp [esi] di +
jnz loc_100935A  +
xor esi esi +
push off_1012004[esi]  +
push dword_1013454  +
call ds:wcsstr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100938F  +
or ebx dword_1012000[esi] +
add esi 8 +
cmp esi 78h +
jb loc_1009371  +
mov eax [ebp+var_4] +
mov ecx [eax] +
push ebx  +
push eax  +
call dword ptr [ecx+0ACh]  +
mov esi eax +
cmp esi edi +
jl loc_1009420  +
cmp dword_10130D0 edi +
jz loc_1009412  +
mov eax dword_10130E4 +
cmp eax edi +
jz loc_1009412  +
mov esi ds:__imp__wcsicmp +
push offset aPerf  +
xor ebx ebx +
push eax  +
inc ebx  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10093FF  +
push offset aSystem  +
push dword_10130E4  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_10093E9  +
push 2  +
jmp loc_10093FE  +
push offset aCycle  +
push dword_10130E4  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_10093FF  +
push 3  +
pop ebx  +
mov eax [ebp+var_4] +
mov ecx [eax] +
push ebx  +
push eax  +
call dword ptr [ecx+9Ch]  +
mov esi eax +
cmp esi edi +
jl loc_1009420  +
push [ebp+var_4]  +
call sub_1008BE4  +
mov esi eax +
jmp loc_1009420  +
xor edi edi +
cmp [ebp+var_8] edi +
jz loc_100942E  +
push [ebp+var_8]  +
call ds:SysFreeString  +
mov eax [ebp+var_4] +
cmp eax edi +
jz loc_100943B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+pvarg] +
xor esi esi +
push eax  +
mov [ebp+var_4] esi +
call ds:VariantInit  +
push dword_10128B4  +
call ds:SysAllocString  +
mov ebx eax +
test ebx ebx +
jnz loc_100947C  +
mov edi 8007000Eh +
jmp loc_10094BE  +
lea eax [ebp+var_4] +
push eax  +
push ebx  +
push 2  +
call sub_100805A  +
mov esi [ebp+var_4] +
mov edi eax +
test edi edi +
jl loc_10094BE  +
mov eax [esi] +
lea ecx [ebp+pvarg.anonymous_0+8] +
push ecx  +
push esi  +
call dword ptr [eax+88h]  +
mov edi eax +
test edi edi +
jl loc_10094BE  +
push 8  +
pop eax  +
push 0  +
push dword ptr [ebp+pvarg.anonymous_0+8]  +
mov word ptr [ebp+pvarg.anonymous_0] ax +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+100h]  +
mov edi eax +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
test ebx ebx +
jz loc_10094D3  +
push ebx  +
call ds:SysFreeString  +
test esi esi +
jz loc_10094DD  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov [ebp+var_8] 1 +
mov [ebp+var_4] ebx +
cmp dword_1012CA0 ebx +
jz loc_100952A  +
mov ecx [edi] +
xor eax eax +
cmp dword_1012CA4 ebx +
setnz al  +
dec eax  +
push eax  +
push edi  +
call dword ptr [ecx+4Ch]  +
mov esi eax +
cmp esi ebx +
jl loc_1009733  +
cmp dword_1012D00 ebx +
jz loc_100954F  +
mov ecx [edi] +
xor eax eax +
cmp dword_1012D04 ebx +
setnz al  +
dec eax  +
push eax  +
push edi  +
call dword ptr [ecx+5Ch]  +
mov esi eax +
cmp esi ebx +
jl loc_1009733  +
cmp dword_1012D60 ebx +
jz loc_10095AC  +
cmp dword_1012D64 ebx +
jz loc_1009563  +
xor eax eax +
jmp loc_100959B  +
mov esi ds:__imp__wcsicmp +
push offset aNnnnnn  +
push dword_1012D74  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1009583  +
mov eax 200h +
jmp loc_100959B  +
push offset aMmddhhmm  +
push dword_1012D74  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_10095E1  +
mov eax 4000h +
mov ecx [edi] +
push eax  +
push edi  +
call dword ptr [ecx+34h]  +
mov esi eax +
cmp esi ebx +
jl loc_1009733  +
cmp dword_1012DC0 ebx +
mov ebx [ebp+arg_0] +
jz loc_1009601  +
cmp dword_1012DC4 0 +
jnz loc_10095EB  +
mov eax dword_1012DD4 +
test eax eax +
jz loc_10095EB  +
push eax  +
call ds:SysAllocString  +
mov [ebp+var_4] eax +
test eax eax +
jnz loc_10095EB  +
mov esi 8007000Eh +
jmp loc_1009724  +
mov esi 80070057h +
jmp loc_1009733  +
push [ebp+var_4]  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+0A4h]  +
mov esi eax +
test esi esi +
jl loc_1009724  +
xor eax eax +
cmp dword_1012E20 eax +
jz loc_1009632  +
cmp dword_1012E24 eax +
jz loc_100961C  +
mov ecx [ebx] +
push eax  +
push ebx  +
call dword ptr [ecx+74h]  +
jmp loc_1009628  +
push dword_1012E34  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+74h]  +
mov esi eax +
test esi esi +
jl loc_1009724  +
xor eax eax +
cmp dword_1012E80 eax +
jz loc_10096AA  +
cmp dword_1012E84 eax +
jz loc_1009669  +
mov ecx [ebx] +
push eax  +
push ebx  +
call dword ptr [ecx+64h]  +
mov esi eax +
test esi esi +
jl loc_1009724  +
mov eax [ebx] +
push 0  +
push ebx  +
call dword ptr [eax+6Ch]  +
mov esi eax +
test esi esi +
jl loc_1009724  +
jmp loc_10096AA  +
movzx edi word_1012E9C +
movzx eax word_1012E9E +
imul edi edi +
add edi eax +
movzx eax word_1012EA0 +
imul edi edi +
push 0FFFFFFFFh  +
add edi eax +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+64h]  +
mov esi eax +
test esi esi +
jl loc_1009724  +
mov eax [ebx] +
push edi  +
push ebx  +
call dword ptr [eax+6Ch]  +
mov esi eax +
test esi esi +
jl loc_1009724  +
mov edi [ebp+arg_4] +
push ebx  +
call sub_100603D  +
mov esi eax +
test esi esi +
jl loc_1009724  +
mov eax [edi] +
lea ecx [ebp+var_C] +
push ecx  +
push edi  +
call dword ptr [eax+24h]  +
mov esi eax +
test esi esi +
jl loc_1009724  +
mov eax [ebp+var_C] +
sub eax 0 +
jz loc_1009705  +
dec eax  +
jz loc_10096FD  +
dec eax  +
jz loc_10096F5  +
dec eax  +
jz loc_10096ED  +
dec eax  +
jz loc_10096E1  +
mov esi 80070057h +
jmp loc_1009724  +
lea eax [ebp+var_8] +
push eax  +
push edi  +
call sub_1006A42  +
jmp loc_100970F  +
push edi  +
call sub_1006738  +
jmp loc_100970F  +
push edi  +
call sub_100690F  +
jmp loc_100970F  +
push edi  +
call sub_1009174  +
jmp loc_100970F  +
lea eax [ebp+var_8] +
push eax  +
push edi  +
call sub_100897E  +
mov esi eax +
test esi esi +
jl loc_1009724  +
cmp [ebp+var_8] 0 +
jz loc_1009724  +
push edi  +
push ebx  +
call sub_1006CA2  +
mov esi eax +
cmp [ebp+var_4] 0 +
jz loc_1009733  +
push [ebp+var_4]  +
call ds:SysFreeString  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 804h +
mov eax dword_1013B58 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor eax eax +
mov edi esi +
stos   +
stos   +
stos   +
xor ebx ebx +
stos   +
cmp dword_1012780 ebx +
jz loc_10099AF  +
push dword_1012794  +
lea eax [ebp+var_804] +
push 400h  +
push eax  +
call sub_1007D23  +
mov ebx eax +
test ebx ebx +
jl loc_10099AF  +
xor ecx ecx +
xor edx edx +
inc ecx  +
push 2  +
lea eax [ebp+var_804] +
pop ebx  +
cmp dx [ebp+var_804] +
jz loc_10097D0  +
push 5Ch  +
pop edx  +
cmp dx [eax] +
jnz loc_10097B8  +
xor edx edx +
mov [eax] dx +
inc ecx  +
add eax ebx +
xor edx edx +
cmp dx [eax] +
jnz loc_10097AA  +
cmp ecx 3 +
jbe loc_10097D0  +
mov ebx 80070057h +
jmp loc_10099AF  +
mov eax ecx +
dec eax  +
jz loc_100993F  +
dec eax  +
jz loc_1009855  +
dec eax  +
jnz loc_100994E  +
lea eax [ebp+var_804] +
push eax  +
call sub_100C036  +
mov [esi] eax +
test eax eax +
jz loc_10099AA  +
lea eax [ebp+var_804] +
lea edx [eax+2] +
mov cx [eax] +
add eax ebx +
test cx cx +
jnz loc_1009802  +
sub eax edx +
sar eax 1 +
lea edi [ebp+eax*2-802h] +
push edi  +
call sub_100C036  +
mov [esi+4] eax +
test eax eax +
jz loc_10099AA  +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
add eax ebx +
test cx cx +
jnz loc_100982D  +
sub eax edx +
sar eax 1 +
lea eax [edi+eax*2+2] +
push eax  +
call sub_100C036  +
mov [esi+8] eax +
test eax eax +
jnz loc_100994E  +
jmp loc_10099AA  +
mov edi ds:__imp__wcsicmp +
lea eax [ebp+var_804] +
push offset aService  +
push eax  +
call edi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10098FD  +
lea eax [ebp+var_804] +
push offset aSession  +
push eax  +
call edi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10098FD  +
lea eax [ebp+var_804] +
push offset aAutosession  +
push eax  +
call edi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10098FD  +
lea eax [ebp+var_804] +
push offset aLegacy  +
push eax  +
call edi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10098FD  +
lea eax [ebp+var_804] +
push offset aSystem  +
push eax  +
call edi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10098FD  +
lea eax [ebp+var_804] +
push eax  +
call sub_100C036  +
mov [esi+4] eax +
test eax eax +
jz loc_10099AA  +
lea eax [ebp+var_804] +
lea edx [eax+2] +
mov cx [eax] +
add eax ebx +
test cx cx +
jnz loc_10098E3  +
sub eax edx +
sar eax 1 +
lea eax [ebp+eax*2-802h] +
jmp loc_100983F  +
lea eax [ebp+var_804] +
push eax  +
call sub_100C036  +
mov [esi] eax +
test eax eax +
jz loc_10099AA  +
lea eax [ebp+var_804] +
lea edx [eax+2] +
mov cx [eax] +
add eax ebx +
test cx cx +
jnz loc_100991C  +
sub eax edx +
sar eax 1 +
lea eax [ebp+eax*2-802h] +
push eax  +
call sub_100C036  +
mov [esi+4] eax +
jmp loc_1009848  +
lea eax [ebp+var_804] +
push eax  +
call sub_100C036  +
mov [esi+4] eax +
mov eax [esi] +
test eax eax +
jnz loc_1009973  +
cmp dword_1013500 eax +
jz loc_1009963  +
push offset aSession  +
jmp loc_1009968  +
push offset aService  +
call sub_100C036  +
mov [esi] eax +
test eax eax +
jz loc_10099AA  +
push dword ptr [esi+4]  +
push eax  +
push offset aSS  +
lea eax [ebp+var_804] +
push 400h  +
push eax  +
call sub_1007DB7  +
mov ebx eax +
add esp 14h +
test ebx ebx +
jl loc_10099AF  +
lea eax [ebp+var_804] +
push eax  +
call ds:SysAllocString  +
mov [esi+0Ch] eax +
test eax eax +
jnz loc_10099AF  +
mov ebx 8007000Eh +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_100B071  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+lpName] +
push eax  +
call ds:VariantInit  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
lea edx [ebp-0Ch] +
push edx  +
push eax  +
call dword ptr [ecx+0D0h]  +
mov ebx ds:VariantClear +
mov esi eax +
test esi esi +
jl loc_1009A58  +
push 8  +
pop eax  +
mov word ptr [ebp+lpName] ax +
lea eax [ebp+var_4] +
push eax  +
push dword ptr [ebp-0Ch]  +
push 1  +
call sub_100805A  +
mov esi eax +
test esi esi +
jl loc_1009A58  +
lea eax [ebp+lpName] +
push eax  +
call ebx  +
push 8  +
pop eax  +
push dword_10128B4  +
mov word ptr [ebp+lpName] ax +
call ds:SysAllocString  +
mov [ebp-0Ch] eax +
test eax eax +
jnz loc_1009A3E  +
mov esi 8007000Eh +
jmp loc_1009A58  +
mov eax [ebp+var_4] +
mov ecx [eax] +
sub esp 10h +
mov edi esp +
lea esi [ebp+lpName] +
movs   +
movs   +
movs   +
push eax  +
movs   +
call dword ptr [ecx+108h]  +
mov esi eax +
lea eax [ebp+lpName] +
push eax  +
call ebx  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_1009A6B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
lea eax [ebp+pvarg] +
push eax  +
mov [ebp+ppv] ebx +
mov [ebp+var_4] ebx +
mov [ebp+var_10] ebx +
call ds:VariantInit  +
lea eax [ebp+ppv] +
push eax  +
push offset stru_10019C0  +
push 15h  +
push ebx  +
push offset stru_1001A60  +
call ds:CoCreateInstance  +
mov esi eax +
cmp esi ebx +
jl loc_1009D60  +
mov eax [ebp+arg_4] +
sub eax ebx +
jz loc_1009AE7  +
dec eax  +
jnz loc_1009B07  +
push dword_1013B8C  +
mov edx [ebp+arg_0] +
mov eax [ebp+ppv] +
push dword ptr [edx+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0ECh]  +
mov esi eax +
cmp esi ebx +
jge loc_1009B07  +
jmp loc_1009D60  +
cmp dword_1012EF0 ebx +
jnz loc_1009B07  +
push dword_1013B8C  +
mov edx [ebp+arg_0] +
mov eax [ebp+ppv] +
push dword ptr [edx+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0ECh]  +
mov eax [ebp+ppv] +
mov ecx [eax] +
lea edx [ebp+var_10] +
push edx  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
cmp esi ebx +
jl loc_1009D60  +
mov eax [ebp+arg_0] +
mov eax [eax+8] +
cmp eax ebx +
jnz loc_1009B2F  +
push 3  +
mov dword ptr [ebp+pvarg.anonymous_0+8] ebx +
jmp loc_1009B49  +
push eax  +
call ds:SysAllocString  +
mov dword ptr [ebp+pvarg.anonymous_0+8] eax +
cmp eax ebx +
jnz loc_1009B47  +
mov esi 8007000Eh +
jmp loc_1009D60  +
push 8  +
pop eax  +
mov word ptr [ebp+pvarg.anonymous_0] ax +
cmp [ebp+arg_4] ebx +
jnz loc_1009B5B  +
cmp dword_1013B84 ebx +
jz loc_1009BAF  +
mov eax [ebp+var_10] +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
sub esp 10h +
mov edi esp +
lea esi [ebp+pvarg] +
movs   +
movs   +
movs   +
push eax  +
movs   +
call dword ptr [ecx+20h]  +
mov esi eax +
mov eax [ebp+arg_0] +
cmp [eax+8] ebx +
jz loc_1009B88  +
cmp esi ebx +
jl loc_1009D60  +
jmp loc_1009B8A  +
xor esi esi +
cmp [ebp+arg_4] 2 +
jz loc_1009BAF  +
mov eax dword_1013B84 +
cmp [ebp+arg_4] ebx +
jnz loc_1009B9E  +
cmp eax ebx +
jz loc_1009BAF  +
cmp eax ebx +
jz loc_1009C9D  +
cmp [ebp+var_4] ebx +
jnz loc_1009C9D  +
cmp dword_10124E0 ebx +
jz loc_1009BC0  +
mov [ebp+var_C] 3 +
jmp loc_1009C10  +
cmp dword_1012480 ebx +
jnz loc_1009C09  +
cmp dword_1013B84 ebx +
jnz loc_1009C09  +
cmp dword_1012420 ebx +
jz loc_1009BDD  +
mov [ebp+var_C] ebx +
jmp loc_1009C10  +
cmp dword_1012540 ebx +
jz loc_1009BEE  +
mov [ebp+var_C] 2 +
jmp loc_1009C10  +
cmp dword_10125A0 ebx +
jz loc_1009BFF  +
mov [ebp+var_C] 4 +
jmp loc_1009C10  +
mov esi 80004002h +
jmp loc_1009D60  +
mov [ebp+var_C] 1 +
mov eax [ebp+var_10] +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push [ebp+var_C]  +
push eax  +
call dword ptr [ecx+3Ch]  +
mov esi eax +
cmp esi ebx +
jl loc_1009D60  +
cmp word ptr [ebp+pvarg.anonymous_0] 8 +
jz loc_1009C59  +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
mov eax [ebp+arg_0] +
push dword ptr [eax+4]  +
call ds:SysAllocString  +
mov dword ptr [ebp+pvarg.anonymous_0+8] eax +
cmp eax ebx +
jz loc_1009B3D  +
push 8  +
pop eax  +
mov word ptr [ebp+pvarg.anonymous_0] ax +
mov eax [ebp+var_4] +
push dword ptr [ebp+pvarg.anonymous_0+8]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+64h]  +
mov esi eax +
cmp esi ebx +
jl loc_1009D60  +
mov eax [ebp+var_4] +
mov ecx [eax] +
push 200h  +
push eax  +
call dword ptr [ecx+34h]  +
mov esi eax +
cmp esi ebx +
jl loc_1009D60  +
mov eax [ebp+var_10] +
push [ebp+var_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+28h]  +
mov esi eax +
cmp esi ebx +
jl loc_1009D60  +
cmp dword_1012300 ebx +
jz loc_1009D2F  +
cmp dword_1013B84 ebx +
jnz loc_1009D0D  +
mov eax [ebp+var_4] +
cmp eax ebx +
jnz loc_1009CC2  +
mov esi 80070490h +
jmp loc_1009D60  +
mov ecx [eax] +
lea edx [ebp+var_C] +
push edx  +
push eax  +
call dword ptr [ecx+24h]  +
mov esi eax +
cmp esi ebx +
jl loc_1009D60  +
mov eax [ebp+var_C] +
sub eax ebx +
jz loc_1009D19  +
dec eax  +
jz loc_1009D0D  +
dec eax  +
jz loc_1009D01  +
dec eax  +
jz loc_1009CF5  +
dec eax  +
jnz loc_1009D23  +
mov dword_10125A0 1 +
jmp loc_1009D23  +
mov dword_10124E0 1 +
jmp loc_1009D23  +
mov dword_1012540 1 +
jmp loc_1009D23  +
mov dword_1012480 1 +
jmp loc_1009D23  +
mov dword_1012420 1 +
push ebx  +
call sub_1005083  +
mov esi eax +
cmp esi ebx +
jl loc_1009D60  +
cmp [ebp+arg_4] 2 +
jnz loc_1009D60  +
push [ebp+var_4]  +
push [ebp+ppv]  +
call sub_10094EB  +
mov esi eax +
cmp esi ebx +
jl loc_1009D60  +
push dword_1013B8C  +
mov edx [ebp+arg_0] +
mov eax [ebp+ppv] +
push dword ptr [edx+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0ECh]  +
mov esi eax +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
mov eax [ebp+var_10] +
cmp eax ebx +
jz loc_1009D7A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_10] ebx +
cmp esi ebx +
jge loc_1009D93  +
mov eax [ebp+var_4] +
cmp eax ebx +
jz loc_1009D8E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_4] ebx +
mov eax [ebp+ppv] +
jmp loc_1009DAC  +
mov eax [ebp+arg_8] +
mov ecx [ebp+ppv] +
mov [eax] ecx +
mov eax [ebp+arg_C] +
cmp eax ebx +
jz loc_1009DA9  +
mov ecx [ebp+var_4] +
mov [eax] ecx +
jmp loc_1009DB6  +
mov eax [ebp+var_4] +
cmp eax ebx +
jz loc_1009DB6  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
and [ebp+var_8] 0 +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+lpName] +
push eax  +
call ds:VariantInit  +
mov edi [ebp+arg_0] +
push edi  +
call sub_10072A7  +
mov ebx ds:VariantClear +
mov esi eax +
test esi esi +
jl loc_1009EAA  +
push offset aLogman_xsl  +
call ds:SysAllocString  +
mov [ebp+arg_0] eax +
test eax eax +
jnz loc_1009E16  +
mov esi 8007000Eh +
jmp loc_1009E9B  +
lea ecx [ebp+var_4] +
push ecx  +
push eax  +
push 3  +
call sub_100805A  +
mov esi eax +
test esi esi +
jl loc_1009E8E  +
mov eax [edi] +
lea ecx [ebp-10h] +
push ecx  +
push edi  +
call dword ptr [eax+0D0h]  +
mov esi eax +
test esi esi +
jl loc_1009E8E  +
push 8  +
pop eax  +
mov word ptr [ebp+lpName] ax +
lea eax [ebp+var_8] +
push eax  +
push dword ptr [ebp-10h]  +
push 1  +
call sub_100805A  +
mov edi [ebp+var_8] +
mov esi eax +
test esi esi +
jl loc_1009E84  +
lea eax [ebp+lpName] +
push eax  +
call ebx  +
mov eax [edi] +
lea ecx [ebp-10h] +
push ecx  +
push [ebp+var_4]  +
push edi  +
call dword ptr [eax+8Ch]  +
mov esi eax +
test esi esi +
jl loc_1009E84  +
push 8  +
pop eax  +
push dword ptr [ebp-10h]  +
mov word ptr [ebp+lpName] ax +
call sub_100D8C5  +
test edi edi +
jz loc_1009E8E  +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_1009E9B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp [ebp+arg_0] 0 +
jz loc_1009EAA  +
push [ebp+arg_0]  +
call ds:SysFreeString  +
lea eax [ebp+lpName] +
push eax  +
call ebx  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
push edi  +
lea ecx [ebp+var_4] +
push ecx  +
xor ebx ebx +
push esi  +
mov [ebp+var_C] ebx +
call dword ptr [eax+1Ch]  +
mov edi eax +
cmp edi ebx +
jl loc_100A00D  +
mov eax [ebp+var_4] +
shl eax 3 +
push eax  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+lpMem] eax +
cmp eax ebx +
jnz loc_1009F0C  +
mov edi 8007000Eh +
jmp loc_1009FC0  +
push 13h  +
pop eax  +
mov word ptr [ebp+var_1C] ax +
mov [ebp+var_14] ebx +
cmp [ebp+var_4] ebx +
jbe loc_1009F62  +
jmp loc_1009F20  +
mov esi [ebp+arg_0] +
mov eax [ebp+lpMem] +
mov ecx [ebp+var_14] +
lea ebx [eax+ecx*8] +
mov ecx [esi] +
lea eax [ebx+4] +
push eax  +
sub esp 10h +
mov edi esp +
push [ebp+arg_0]  +
lea esi [ebp+var_1C] +
movs   +
movs   +
movs   +
movs   +
call dword ptr [ecx+20h]  +
mov edi eax +
test edi edi +
jl loc_1009FC0  +
mov eax [ebx+4] +
mov ecx [eax] +
push ebx  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov edi eax +
test edi edi +
jl loc_1009FC0  +
inc [ebp+var_14]  +
mov eax [ebp+var_14] +
cmp eax [ebp+var_4] +
jb loc_1009F1D  +
xor esi esi +
cmp [ebp+arg_4] esi +
jnz loc_1009F7F  +
push offset sub_1007542  +
push 8  +
push [ebp+var_4]  +
push [ebp+lpMem]  +
call ds:qsort  +
add esp 10h +
cmp [ebp+var_4] esi +
jbe loc_1009FAB  +
mov ebx [ebp+lpMem] +
lea eax [ebp+var_C] +
push eax  +
xor eax eax +
test esi esi +
setz al  +
push eax  +
push [ebp+arg_4]  +
push ebx  +
call sub_10078B0  +
mov edi eax +
test edi edi +
jl loc_1009FC0  +
inc esi  +
add ebx 8 +
cmp esi [ebp+var_4] +
jb loc_1009F87  +
push offset asc_10017A4  +
call sub_100D8C5  +
cmp [ebp+var_C] 0 +
jnz loc_1009FC0  +
mov edi 80070490h +
mov esi [ebp+lpMem] +
test esi esi +
jz loc_100A00D  +
xor ebx ebx +
cmp [ebp+var_4] ebx +
jbe loc_1009FFB  +
add esi 4 +
mov eax [esi-4] +
test eax eax +
jz loc_1009FE3  +
push eax  +
call ds:SysFreeString  +
and dword ptr [esi-4] 0 +
mov eax [esi] +
test eax eax +
jz loc_1009FF2  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi] 0 +
inc ebx  +
add esi 8 +
cmp ebx [ebp+var_4] +
jb loc_1009FD1  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_100A048  +
push offset asc_1001974  +
push dword ptr [ebp+arg_C]  +
push offset aS  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1007DB7  +
mov eax [ebp+arg_4] +
add esp 14h +
jmp loc_100A0AD  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100A04D  +
sub eax edx +
push edi  +
mov edi dword ptr [ebp+arg_C] +
sar eax 1 +
cmp eax edi +
jnb loc_100A0AA  +
push esi  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1007D23  +
test eax eax +
jl loc_100A085  +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ebp+arg_C] +
push eax  +
push esi  +
call sub_100D5AB  +
test eax eax +
jge loc_100A0A0  +
xor eax eax +
jmp loc_100A0AC  +
push offset asc_1001974  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1007D5D  +
test eax eax +
jl loc_100A085  +
inc dword ptr [ebp+arg_C]  +
cmp dword ptr [ebp+arg_C] edi +
jb loc_100A089  +
mov eax [ebp+arg_4] +
jmp loc_100A0AC  +
mov eax esi +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 440h +
mov eax dword_1013B58 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
xor esi esi +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+pvarg] +
push eax  +
mov [ebp+ppv] esi +
mov [ebp+var_408] esi +
mov [ebp+var_420] esi +
mov [ebp+var_418] esi +
mov [ebp+var_40C] esi +
call ds:VariantInit  +
push 800h  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+lpMem] eax +
cmp eax esi +
jnz loc_100A125  +
mov edi 8007000Eh +
jmp loc_100A382  +
cmp dword_1013500 esi +
jz loc_100A134  +
push offset aSession_0  +
jmp loc_100A142  +
cmp [edi] esi +
jz loc_100A13D  +
push dword ptr [edi+0Ch]  +
jmp loc_100A142  +
push offset aService_0  +
call ds:SysAllocString  +
mov [ebp+var_414] eax +
cmp eax esi +
jz loc_100A11B  +
push 258h  +
push esi  +
call sub_100D871  +
pop ecx  +
pop ecx  +
push 4Fh  +
pop edi  +
push offset asc_10017A8  +
call sub_100D8C5  +
dec edi  +
jnz loc_100A162  +
push offset asc_10017A4  +
call sub_100D8C5  +
lea eax [ebp+ppv] +
push eax  +
push offset stru_1001A20  +
push 15h  +
push esi  +
push offset stru_1001A90  +
call ds:CoCreateInstance  +
mov edi eax +
cmp edi esi +
jl loc_100A376  +
push [ebp+var_414]  +
mov eax [ebp+ppv] +
push dword_1013B8C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+38h]  +
mov edi eax +
cmp edi esi +
jl loc_100A376  +
mov eax [ebp+ppv] +
mov ecx [eax] +
lea edx [ebp+var_418] +
push edx  +
push eax  +
call dword ptr [ecx+24h]  +
mov edi eax +
cmp edi esi +
jl loc_100A376  +
mov eax [ebp+var_418] +
mov ecx [eax] +
lea edx [ebp+var_420] +
push edx  +
push offset dword_1001AB0  +
push eax  +
call dword ptr [ecx]  +
mov edi eax +
cmp edi esi +
jl loc_100A376  +
mov eax [ebp+ppv] +
mov ecx [eax] +
lea edx [ebp+var_42C] +
push edx  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov edi eax +
cmp edi esi +
jl loc_100A376  +
push ebx  +
mov [ebp+var_41C] esi +
cmp [ebp+var_42C] esi +
jbe loc_100A36B  +
mov ebx ds:LoadStringW +
mov eax [ebp+var_408] +
cmp eax esi +
jz loc_100A249  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_408] esi +
mov eax [ebp+var_420] +
mov ecx [eax] +
lea edx [ebp+var_440] +
push edx  +
lea edx [ebp+pvarg] +
push edx  +
push 1  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov eax dword ptr [ebp+pvarg.anonymous_0+8] +
mov ecx [eax] +
lea edx [ebp+var_408] +
push edx  +
push offset stru_10019C0  +
push eax  +
call dword ptr [ecx]  +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
lea eax [ebp+uID] +
push eax  +
push [ebp+var_408]  +
call sub_1007053  +
mov edi eax +
cmp edi esi +
jl loc_100A375  +
push 100h  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+uID]  +
push esi  +
call ebx  +
lea eax [ebp+uID] +
push eax  +
push [ebp+var_408]  +
call sub_100715A  +
mov edi eax +
cmp edi esi +
jl loc_100A375  +
push 100h  +
lea eax [ebp+var_404] +
push eax  +
push [ebp+uID]  +
push esi  +
call ebx  +
cmp [ebp+var_40C] esi +
jz loc_100A305  +
push [ebp+var_40C]  +
call ds:SysFreeString  +
mov [ebp+var_40C] esi +
mov eax [ebp+var_408] +
mov ecx [eax] +
lea edx [ebp+var_40C] +
push edx  +
push eax  +
call dword ptr [ecx+50h]  +
mov edi eax +
cmp edi esi +
jl loc_100A375  +
lea eax [ebp+var_404] +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
push 27h  +
push 400h  +
push [ebp+lpMem]  +
push [ebp+var_40C]  +
call sub_100A01B  +
push eax  +
push 259h  +
push esi  +
call sub_100D871  +
add esp 14h +
inc [ebp+var_41C]  +
mov eax [ebp+var_41C] +
cmp eax [ebp+var_42C] +
jb loc_100A233  +
push offset asc_10017A4  +
call sub_100D8C5  +
pop ebx  +
push [ebp+var_414]  +
call ds:SysFreeString  +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
cmp [ebp+lpMem] esi +
jz loc_100A3AB  +
push [ebp+lpMem]  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp [ebp+var_40C] esi +
jz loc_100A3C5  +
push [ebp+var_40C]  +
call ds:SysFreeString  +
mov [ebp+var_40C] esi +
mov eax [ebp+ppv] +
cmp eax esi +
jz loc_100A3DB  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+ppv] esi +
mov eax [ebp+var_408] +
cmp eax esi +
jz loc_100A3F1  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_408] esi +
mov eax [ebp+var_418] +
cmp eax esi +
jz loc_100A407  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_418] esi +
mov eax [ebp+var_420] +
cmp eax esi +
jz loc_100A417  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100B071  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 450h +
mov eax dword_1013B58 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
xor ebx ebx +
push edi  +
lea eax [ebp+pvarg] +
push eax  +
mov [ebp+var_440] 2 +
mov [ebp+ppv] ebx +
mov [ebp+var_40C] ebx +
mov [ebp+var_428] ebx +
mov [ebp+var_424] ebx +
mov [ebp+var_420] ebx +
mov [ebp+uID] ebx +
mov [ebp+var_43C] ebx +
call ds:VariantInit  +
xor eax eax +
lea edi [ebp+lpMem] +
stos   +
stos   +
stos   +
stos   +
push ebx  +
xor eax eax +
push ebx  +
lea edi [ebp+var_430] +
stos   +
push 1  +
push ebx  +
stos   +
call ds:HeapSetInformation  +
push offset unk_10126D8  +
push offset unk_1012618  +
push esi  +
push [ebp+arg_0]  +
call sub_100CBCF  +
mov esi eax +
cmp esi ebx +
jl loc_100AC3B  +
cmp esi 1 +
jz loc_100AC3B  +
push ebx  +
push ebx  +
call ds:CoInitializeEx  +
mov esi eax +
cmp esi ebx +
jl loc_100AC3B  +
mov [ebp+var_43C] 1 +
call sub_1007E16  +
mov esi eax +
cmp esi ebx +
jl loc_100AC3B  +
cmp dword_10126C0 ebx +
jz loc_100A525  +
push dword_10126D4  +
call ds:SysAllocString  +
mov dword_1013B8C eax +
cmp eax ebx +
jnz loc_100A525  +
mov esi 8007000Eh +
jmp loc_100AC3B  +
lea eax [ebp+lpMem] +
push eax  +
call sub_1009741  +
mov esi eax +
cmp esi ebx +
jl loc_100AC3B  +
mov edi ds:__imp__wcsicmp +
cmp [ebp+lpMem] ebx +
jz loc_100A57D  +
push [ebp+lpMem]  +
push offset aSession  +
call edi  +
push [ebp+lpMem]  +
neg eax  +
sbb eax eax +
inc eax  +
push offset aAutosession  +
mov dword_1013B80 eax +
call edi  +
mov ecx dword_1013B80 +
add esp 10h +
neg eax  +
sbb eax eax +
inc eax  +
jmp loc_100A58B  +
mov ecx dword_1013500 +
mov dword_1013B80 ecx +
xor eax eax +
mov edx dword_1012120 +
mov dword_1013B88 eax +
cmp eax ebx +
mov eax dword_10121E0 +
jnz loc_100A5BA  +
cmp ecx ebx +
jnz loc_100A5BA  +
mov dword_1013B84 ebx +
cmp edx ebx +
jnz loc_100A5D5  +
cmp eax ebx +
jz loc_100A5B5  +
cmp ecx ebx +
jnz loc_100A5D5  +
xor edi edi +
inc edi  +
jmp loc_100A5DF  +
mov dword_1013B84 1 +
cmp ecx ebx +
jz loc_100A5A9  +
cmp dword_1013320 ebx +
jz loc_100A5A9  +
push 2  +
pop edi  +
jmp loc_100A5D7  +
xor edi edi +
cmp edx ebx +
jnz loc_100AB92  +
cmp ecx ebx +
jz loc_100A5EB  +
cmp eax ebx +
jnz loc_100AB92  +
cmp dword_1012300 ebx +
jz loc_100A6C8  +
lea eax [ebp+var_40C] +
push eax  +
lea eax [ebp+ppv] +
push eax  +
push edi  +
lea eax [ebp+lpMem] +
push eax  +
cmp dword_10134A0 ebx +
jz loc_100A668  +
call sub_1009A79  +
mov esi eax +
cmp esi ebx +
jl loc_100AC3B  +
push [ebp+var_40C]  +
push [ebp+ppv]  +
call sub_1006CA2  +
mov esi eax +
cmp esi ebx +
jl loc_100AC3B  +
lea edx [ebp+var_420] +
push edx  +
push 20h  +
push dword_1013B8C  +
mov eax [ebp+ppv] +
push [ebp+var_410]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0F0h]  +
jmp loc_100AC39  +
call sub_1009A79  +
mov esi eax +
cmp esi ebx +
jl loc_100AC3B  +
push [ebp+var_40C]  +
push [ebp+ppv]  +
call sub_10094EB  +
mov esi eax +
cmp esi ebx +
jl loc_100AC3B  +
push [ebp+ppv]  +
call sub_10081A3  +
mov esi eax +
cmp esi ebx +
jl loc_100AC3B  +
cmp dword_1013B80 ebx +
jz loc_100A6B9  +
mov [ebp+var_440] 12h +
lea edx [ebp+var_420] +
push edx  +
push [ebp+var_440]  +
jmp loc_100A648  +
cmp eax ebx +
jz loc_100A817  +
push ebx  +
lea eax [ebp+ppv] +
push eax  +
push edi  +
lea eax [ebp+lpMem] +
push eax  +
call sub_1009A79  +
mov esi eax +
cmp esi ebx +
jl loc_100AC3B  +
mov eax [ebp+ppv] +
mov ecx [eax] +
xor edx edx +
cmp dword_1012900 ebx +
setnz dl  +
dec edx  +
push edx  +
push eax  +
call dword ptr [ecx+0F8h]  +
mov esi eax +
cmp esi 8007051Fh +
jnz loc_100AC3B  +
push [ebp+lpMem]  +
push offset aSystem  +
call ds:__imp__wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100AC3B  +
cmp dword_1012900 ebx +
jnz loc_100AC3B  +
cmp dword_1012EF0 ebx +
jnz loc_100AC3B  +
lea eax [ebp+nSize] +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
mov edi 200h +
push 2  +
mov [ebp+nSize] edi +
call GetUserNameExW  +
test al al +
jnz loc_100A788  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_100A784  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
jmp loc_100A78A  +
xor esi esi +
cmp esi ebx +
jl loc_100AC3B  +
push offset asc_10019B0  +
push edi  +
lea eax [ebp+Buffer] +
push eax  +
call sub_1007D5D  +
mov esi eax +
cmp esi ebx +
jl loc_100AC3B  +
lea eax [ebp+Buffer] +
push eax  +
mov dword_1012960 1 +
call sub_100C036  +
mov dword_1012974 eax +
cmp eax ebx +
jz loc_100A51B  +
mov ecx eax +
lea esi [ecx+2] +
mov dx [ecx] +
inc ecx  +
inc ecx  +
cmp dx bx +
jnz loc_100A7D6  +
sub ecx esi +
sar ecx 1 +
xor edx edx +
mov [eax+ecx*2-2] dx +
mov ecx [ebp+nSize] +
mov edx dword_1012974 +
xor eax eax +
mov [edx+ecx*2] ax +
push [ebp+ppv]  +
call sub_10081A3  +
mov esi eax +
cmp esi ebx +
jl loc_100AC3B  +
jmp loc_100AC28  +
cmp dword_1012240 ebx +
jz loc_100A85F  +
push ebx  +
lea eax [ebp+ppv] +
push eax  +
push edi  +
lea eax [ebp+lpMem] +
push eax  +
call sub_1009A79  +
mov esi eax +
cmp esi ebx +
jl loc_100AC3B  +
mov eax [ebp+ppv] +
mov ecx [eax] +
xor edx edx +
cmp dword_1012900 ebx +
setnz dl  +
dec edx  +
push edx  +
push eax  +
call dword ptr [ecx+0FCh]  +
jmp loc_100AC39  +
cmp dword_1012180 ebx +
jz loc_100A9AB  +
cmp dword_1012600 ebx +
jz loc_100A8F2  +
cmp dword_1012780 ebx +
jnz loc_100A8A2  +
lea eax [ebp+var_424] +
push eax  +
call sub_1006FD1  +
mov esi eax +
cmp esi ebx +
jl loc_100AC3B  +
push ebx  +
push [ebp+var_424]  +
call sub_1009EBE  +
jmp loc_100AC39  +
lea eax [ebp+var_430] +
push eax  +
push dword_1012794  +
call sub_1006F2B  +
mov esi eax +
cmp esi ebx +
jl loc_100AC3B  +
lea eax [ebp+uID] +
push eax  +
push 1  +
push dword_1012794  +
lea eax [ebp+var_430] +
push eax  +
call sub_10078B0  +
mov esi eax +
cmp esi ebx +
jl loc_100AC3B  +
push offset asc_10017A4  +
call sub_100D8C5  +
jmp loc_100AC3B  +
cmp dword_1012780 ebx +
jz loc_100A99A  +
mov ecx dword ptr [ebp+Arguments] +
mov eax offset asc_1001844 +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100A92F  +
cmp dx bx +
jz loc_100A92B  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100A92F  +
add eax 4 +
add ecx 4 +
cmp dx bx +
jnz loc_100A909  +
xor eax eax +
jmp loc_100A934  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax ebx +
jz loc_100A99A  +
lea eax [ebp+var_40C] +
push eax  +
lea eax [ebp+ppv] +
push eax  +
push edi  +
lea eax [ebp+lpMem] +
push eax  +
call sub_1009A79  +
mov esi eax +
cmp esi ebx +
jl loc_100AC3B  +
cmp dword_1013320 ebx +
jz loc_100A98A  +
push dword_1013B8C  +
mov eax [ebp+ppv] +
push [ebp+var_410]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0ECh]  +
mov esi eax +
cmp esi ebx +
jl loc_100AC3B  +
push [ebp+ppv]  +
call sub_1009DC4  +
jmp loc_100AC39  +
lea eax [ebp+lpMem] +
push eax  +
call sub_100A0B7  +
jmp loc_100AC39  +
cmp dword_10122A0 ebx +
jz loc_100AAE8  +
lea eax [ebp+var_40C] +
push eax  +
lea eax [ebp+ppv] +
push eax  +
push edi  +
lea eax [ebp+lpMem] +
push eax  +
call sub_1009A79  +
mov esi eax +
cmp esi ebx +
jl loc_100AC3B  +
mov eax [ebp+ppv] +
mov ecx [eax] +
cmp [ebp+var_414] ebx +
jnz loc_100AA60  +
push eax  +
call dword ptr [ecx+0F4h]  +
mov esi eax +
and eax 0FFFFh +
cmp eax 0AAh +
jnz loc_100AC3B  +
lea eax [ebp+uID] +
push eax  +
push [ebp+ppv]  +
call sub_100715A  +
test eax eax +
jl loc_100AC3B  +
push 200h  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+uID]  +
push ebx  +
call ds:LoadStringW  +
test eax eax +
jz loc_100AC3B  +
lea eax [ebp+Buffer] +
push eax  +
push dword ptr [ebp+Arguments]  +
push 28Eh  +
push ebx  +
call sub_100D871  +
add esp 10h +
jmp loc_100AC3B  +
lea edx [ebp+var_428] +
push edx  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
cmp esi ebx +
jl loc_100AC3B  +
mov eax [ebp+var_40C] +
mov ecx [eax] +
lea edx [ebp+pvarg.anonymous_0+8] +
push edx  +
push offset dword_1001AA0  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
cmp esi ebx +
jl loc_100AC3B  +
push 9  +
pop eax  +
mov word ptr [ebp+pvarg.anonymous_0] ax +
mov eax [ebp+var_428] +
mov ecx [eax] +
sub esp 10h +
mov edi esp +
lea esi [ebp+pvarg] +
movs   +
movs   +
movs   +
push eax  +
movs   +
call dword ptr [ecx+2Ch]  +
mov esi eax +
cmp esi ebx +
jl loc_100AC3B  +
push [ebp+ppv]  +
call sub_10081A3  +
mov esi eax +
cmp esi ebx +
jl loc_100AC3B  +
lea edx [ebp+var_420] +
push edx  +
push 2  +
jmp loc_100A648  +
cmp dword_10123C0 ebx +
jz loc_100AB1F  +
push ebx  +
lea eax [ebp+ppv] +
push eax  +
push edi  +
lea eax [ebp+lpMem] +
push eax  +
call sub_1009A79  +
mov esi eax +
cmp esi ebx +
jl loc_100AC3B  +
push [ebp+ppv]  +
call sub_10099C7  +
jmp loc_100AC39  +
cmp dword_1012360 ebx +
jz loc_100AC3B  +
lea eax [ebp+ppv] +
push eax  +
push offset stru_10019C0  +
push 15h  +
push ebx  +
push offset stru_1001A60  +
call ds:CoCreateInstance  +
mov esi eax +
cmp esi ebx +
jl loc_100AC3B  +
push [ebp+ppv]  +
call sub_1009449  +
mov esi eax +
cmp esi ebx +
jl loc_100AC3B  +
push [ebp+ppv]  +
call sub_10081A3  +
mov esi eax +
cmp esi ebx +
jl loc_100AC3B  +
lea edx [ebp+var_420] +
push edx  +
xor edx edx +
cmp dword_1012EF0 ebx +
setnz dl  +
lea edx [edx+edx+1] +
push edx  +
jmp loc_100ABFF  +
lea eax [ebp+var_40C] +
push eax  +
lea eax [ebp+ppv] +
push eax  +
push edi  +
lea eax [ebp+lpMem] +
push eax  +
call sub_1009A79  +
mov esi eax +
cmp esi ebx +
jl loc_100AC3B  +
push [ebp+var_40C]  +
push [ebp+ppv]  +
call sub_10094EB  +
mov esi eax +
cmp esi ebx +
jl loc_100AC3B  +
cmp [ebp+var_414] ebx +
jnz loc_100ABE3  +
cmp dword_1012EF0 ebx +
jnz loc_100ABE3  +
xor edi edi +
inc edi  +
jmp loc_100ABE6  +
push 3  +
pop edi  +
push [ebp+ppv]  +
call sub_10081A3  +
mov esi eax +
cmp esi ebx +
jl loc_100AC3B  +
lea edx [ebp+var_420] +
push edx  +
push edi  +
push dword_1013B8C  +
mov eax [ebp+ppv] +
push [ebp+var_410]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0F0h]  +
mov esi eax +
cmp esi ebx +
jl loc_100AC3B  +
cmp dword_1013B80 ebx +
jz loc_100AC3B  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push 0FFFFFFFFh  +
push eax  +
call dword ptr [ecx+0F8h]  +
mov esi eax +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
cmp esi ebx +
jnz loc_100AC5B  +
push 3B60h  +
push ebx  +
call sub_100D871  +
pop ecx  +
pop ecx  +
jmp loc_100AC6B  +
cmp esi 1 +
jz loc_100AC6B  +
push offset LibFileName  +
push esi  +
call sub_100D8DD  +
cmp [ebp+lpMem] ebx +
mov edi ds:HeapFree +
mov ebx ds:GetProcessHeap +
jz loc_100AC8C  +
push [ebp+lpMem]  +
push 0  +
call ebx  +
push eax  +
call edi  +
cmp dword ptr [ebp+Arguments] 0 +
jz loc_100ACA2  +
push dword ptr [ebp+Arguments]  +
push 0  +
call ebx  +
push eax  +
call edi  +
cmp [ebp+var_414] 0 +
jz loc_100ACB8  +
push [ebp+var_414]  +
push 0  +
call ebx  +
push eax  +
call edi  +
cmp [ebp+var_410] 0 +
mov edi ds:SysFreeString +
jz loc_100ACCF  +
push [ebp+var_410]  +
call edi  +
mov eax dword_1013B8C +
test eax eax +
jz loc_100ACE2  +
push eax  +
call edi  +
and dword_1013B8C 0 +
mov eax [ebp+ppv] +
test eax eax +
jz loc_100ACF9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and [ebp+ppv] 0 +
cmp [ebp+var_40C] 0 +
jz loc_100AD0E  +
mov eax [ebp+var_40C] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_428] +
test eax eax +
jz loc_100AD25  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and [ebp+var_428] 0 +
cmp [ebp+var_424] 0 +
jz loc_100AD3A  +
mov eax [ebp+var_424] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_42C] +
test eax eax +
jz loc_100AD51  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and [ebp+var_42C] 0 +
cmp [ebp+var_430] 0 +
jz loc_100AD69  +
push [ebp+var_430]  +
call edi  +
and [ebp+var_430] 0 +
mov eax [ebp+var_420] +
test eax eax +
jz loc_100AD80  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and [ebp+var_420] 0 +
cmp [ebp+var_43C] 0 +
jz loc_100AD8F  +
call ds:CoUninitialize  +
call sub_100BC93  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100B071  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_100ADDD  +
test eax eax +
jnz loc_100ADE2  +
mov ecx [esi] +
test ecx ecx +
jz loc_100ADDA  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_100ADCE  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_1013CA4 +
push offset dword_1013C94  +
push dword_1013CA0  +
mov dword_1013C94 eax +
push offset dword_1013C84  +
push offset dword_1013C88  +
push offset dword_1013C80  +
call ds:__wgetmainargs  +
add esp 14h +
mov dword_1013C90 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+ms_exc.disabled] ebx +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp+var_1C] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
cmp eax ebx +
jz loc_100AE6A  +
cmp eax esi +
jnz loc_100AE5D  +
xor esi esi +
inc esi  +
mov [ebp+var_1C] esi +
jmp loc_100AE6D  +
push 3E8h  +
call ds:Sleep  +
jmp loc_100AE44  +
xor esi esi +
inc esi  +
mov eax dword_101401C +
cmp eax esi +
jnz loc_100AE80  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_100AEBB  +
mov eax dword_101401C +
test eax eax +
jnz loc_100AEB5  +
mov dword_101401C esi +
push offset dword_10013C0  +
push offset dword_10013B4  +
call sub_100ADC1  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100AEBB  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
jmp loc_100AF85  +
mov dword_1013C9C esi +
mov eax dword_101401C +
cmp eax esi +
jnz loc_100AEDF  +
push offset dword_10013B0  +
push offset dword_1001294  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_101401C 2 +
cmp [ebp+var_1C] ebx +
jnz loc_100AEEC  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_1014024 ebx +
jz loc_100AF0D  +
push offset dword_1014024  +
call sub_100B209  +
pop ecx  +
test eax eax +
jz loc_100AF0D  +
push ebx  +
push 2  +
push ebx  +
call dword_1014024  +
push dword_1013C84  +
push dword_1013C88  +
push dword_1013C80  +
call sub_100A42E  +
add esp 0Ch +
mov dword_1013C98 eax +
cmp dword_1013C8C ebx +
jnz loc_100AF6B  +
push eax  +
call ds:exit  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-20h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-20h] +
mov dword_1013C98 eax +
xor ebx ebx +
cmp dword_1013C8C ebx +
jnz loc_100AF6B  +
push eax  +
call ds:_exit  +
cmp dword_1013C9C ebx +
jnz loc_100AF79  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_1013C98 +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_100AFA4  +
xor eax eax +
jmp loc_100AFF1  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_100AFA0  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_100AFDE  +
cmp ecx 20Bh +
jnz loc_100AFA0  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_100AFA0  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_100AFEC  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_100AFA0  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 1  +
mov dword_1013C8C eax +
call sub_100B3A2  +
push eax  +
call ds:__set_app_type  +
or dword_1014014 0FFFFFFFFh +
or dword_1014018 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_1013CAC +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_1013CA8 +
mov [eax] ecx +
call sub_100B334  +
cmp dword_1013B68 0 +
jnz loc_100B04A  +
push offset sub_100B334  +
call ds:__setusermatherr  +
pop ecx  +
call sub_100B31C  +
xor eax eax +
retn   +
***
call sub_100B3E1  +
jmp sub_100AE22  +
***
cmp ecx dword_1013B58 +
jnz loc_100B07C  +
retn 0  +
jmp loc_100B477  +
***
mov eax [esp+arg_C] +
or eax eax +
jnz loc_100B0C2  +
mov ecx [esp+arg_8] +
mov eax [esp+arg_4] +
xor edx edx +
div  ecx +
mov ebx eax +
mov eax [esp+arg_0] +
div  ecx +
mov edx ebx +
jmp loc_100B103  +
mov ecx eax +
mov ebx [esp+arg_8] +
mov edx [esp+arg_4] +
mov eax [esp+arg_0] +
shr ecx 1 +
rcr ebx 1 +
shr edx 1 +
rcr eax 1 +
or ecx ecx +
jnz loc_100B0D0  +
div  ebx +
mov esi eax +
mul  [esp+arg_C] +
mov ecx eax +
mov eax [esp+arg_8] +
mul  esi +
add edx ecx +
jb loc_100B0FE  +
cmp edx [esp+arg_4] +
ja loc_100B0FE  +
jb loc_100B0FF  +
cmp eax [esp+arg_0] +
jbe loc_100B0FF  +
dec esi  +
xor edx edx +
mov eax esi +
pop esi  +
pop ebx  +
retn 10h  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_100B156  +
cmp dword ptr [eax+10h] 3 +
jnz loc_100B156  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_100B150  +
cmp eax 19930521h +
jz loc_100B150  +
cmp eax 19930522h +
jz loc_100B150  +
cmp eax 1994000h +
jnz loc_100B156  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset byte_100B118+1)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_100B196  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_100B192  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_100B1FD  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_100B1F5  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_100B1FF  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_100B1E5  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_100B180  +
pop ecx  +
test eax eax +
jz loc_100B266  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_100B1C0  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100B266  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_100B26F  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_100B071  +
push offset dword_1013B58  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100B395  +
cmp ecx 0FFFFFFFFh +
jz loc_100B395  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_100B38E  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_100B38E  +
cmp edx 10000000h +
jnb loc_100B38E  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_100B38E  +
jmp loc_100B389  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_100B3D7  +
push eax  +
call sub_100B33C  +
test eax eax +
jz loc_100B3D7  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_100B3CC  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_100B3D7  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1013B58 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_100B413  +
test eax ebx +
jz loc_100B413  +
not eax  +
mov dword_1013B5C eax +
jmp loc_100B46E  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_100B45A  +
test dword_1013B58 ebx +
jnz loc_100B45F  +
mov esi 0BB40E64Fh +
mov dword_1013B58 esi +
not esi  +
mov dword_1013B5C esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_1013DB0 eax +
mov dword_1013DAC ecx +
mov dword_1013DA8 edx +
mov dword_1013DA4 ebx +
mov dword_1013DA0 esi +
mov dword_1013D9C edi +
mov word_1013DC8 ss +
mov word_1013DBC cs +
mov word_1013D98 ds +
mov word_1013D94 es +
mov word_1013D90 fs +
mov word_1013D8C gs +
pushf   +
pop dword_1013DC0  +
mov eax [ebp+0] +
mov dword_1013DB4 eax +
mov eax [ebp+4] +
mov dword_1013DB8 eax +
lea eax [ebp+8] +
mov dword_1013DC4 eax +
mov eax [ebp-320h] +
mov dword_1013D00 10001h +
mov eax dword_1013DB8 +
mov dword_1013CBC eax +
mov dword_1013CB0 0C0000409h +
mov dword_1013CB4 1 +
mov eax dword_1013B58 +
mov [ebp-328h] eax +
mov eax dword_1013B5C +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov uID eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_C] +
mov ecx [ebp+arg_0] +
push ebx  +
push esi  +
mov esi [ebp+arg_10] +
xor edx edx +
push edi  +
mov [eax] edx +
push 2Dh  +
xor ebx ebx +
pop eax  +
cmp ax [ecx] +
mov [ebp+var_4] edx +
setz bl  +
mov eax ebx +
mov [esi] eax +
cmp eax edx +
jz loc_100B5AE  +
add ecx 2 +
mov esi dword_1013FD4 +
mov [ebp+arg_0] ecx +
mov edi offset dword_1013FD4 +
jmp loc_100B617  +
mov ecx [esi+24h] +
cmp ecx edx +
jz loc_100B5D4  +
cmp [ebp+arg_4] edx +
jnz loc_100B5CF  +
cmp [esi+14h] edx +
jnz loc_100B5D4  +
xor eax eax +
inc eax  +
jmp loc_100B5D6  +
xor eax eax +
cmp [esi+28h] edx +
jz loc_100B5E5  +
cmp [ebp+arg_4] edx +
jz loc_100B5E5  +
xor ebx ebx +
inc ebx  +
jmp loc_100B5E7  +
xor ebx ebx +
cmp eax edx +
jz loc_100B5FD  +
push ecx  +
push [ebp+arg_0]  +
call ds:__imp__wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100B627  +
xor edx edx +
cmp ebx edx +
jz loc_100B615  +
push dword ptr [esi+28h]  +
push [ebp+arg_0]  +
call ds:__imp__wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100B62D  +
xor edx edx +
mov esi [esi] +
cmp esi edi +
jnz loc_100B5BE  +
cmp [ebp+arg_4] edx +
jnz loc_100B64E  +
mov eax dword_1013FD4 +
jmp loc_100B64A  +
and dword ptr [esi+18h] 0 +
jmp loc_100B634  +
mov dword ptr [esi+18h] 1 +
mov eax [ebp+arg_8] +
mov [eax] esi +
jmp loc_100B65A  +
cmp [eax+48h] edx +
jnz loc_100B648  +
xor ecx ecx +
inc ecx  +
test [eax+20h] ecx +
jnz loc_100B664  +
mov eax [eax] +
cmp eax edi +
jnz loc_100B63B  +
mov eax [ebp+arg_8] +
mov [ebp+var_4] 1 +
mov [eax] edx +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
mov esi [ebp+arg_8] +
mov [esi] eax +
mov eax [ebp+arg_C] +
mov [eax] ecx +
mov eax [ebp+arg_10] +
jmp loc_100B658  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
and dword ptr [ecx] 0 +
mov eax dword_1013FD4 +
mov edx offset dword_1013FD4 +
push edi  +
cmp eax edx +
jz loc_100B6BD  +
cmp dword ptr [eax+48h] 0 +
jz loc_100B6A7  +
mov edi [ebp+arg_0] +
cmp edi [eax+44h] +
jnz loc_100B6A7  +
cmp dword ptr [ecx] 0 +
jnz loc_100B6B6  +
mov [ecx] eax +
mov eax [eax] +
cmp eax edx +
jnz loc_100B692  +
cmp dword ptr [ecx] 0 +
jz loc_100B6BD  +
xor eax eax +
jmp loc_100B6C0  +
mov eax 80070057h +
jmp loc_100B6C0  +
xor eax eax +
inc eax  +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi dword_1013FD4 +
cmp esi offset dword_1013FD4 +
jz loc_100B77A  +
push ebx  +
push edi  +
xor ebx ebx +
cmp [esi+48h] ebx +
jz loc_100B76A  +
cmp [esi+38h] ebx +
jnz loc_100B715  +
cmp dword ptr [esi+18h] 1 +
jnz loc_100B6FE  +
mov eax [esi+28h] +
jmp loc_100B701  +
mov eax [esi+24h] +
push eax  +
push 3C2Bh  +
push ebx  +
call sub_100D871  +
add esp 0Ch +
mov eax 80070057h +
cmp [esi+58h] ebx +
jz loc_100B76A  +
xor edi edi +
cmp dword_1013FF0 ebx +
jbe loc_100B76A  +
mov ecx [esi+58h] +
lea ecx [ecx+edi*4] +
cmp [ecx] ebx +
jz loc_100B761  +
mov ecx [ecx] +
cmp dword ptr [ecx+18h] 1 +
jnz loc_100B73B  +
mov ecx [ecx+28h] +
jmp loc_100B73E  +
mov ecx [ecx+24h] +
cmp dword ptr [esi+18h] 1 +
jnz loc_100B749  +
mov eax [esi+28h] +
jmp loc_100B74C  +
mov eax [esi+24h] +
push ecx  +
push eax  +
push 3C28h  +
push ebx  +
call sub_100D871  +
add esp 10h +
mov eax 80070057h +
inc edi  +
cmp edi dword_1013FF0 +
jb loc_100B724  +
mov esi [esi] +
cmp esi offset dword_1013FD4 +
jnz loc_100B6E9  +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test dword ptr [eax+20h] 400h +
jz loc_100B79A  +
mov eax [eax+48h] +
jmp loc_100B79D  +
xor eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+dwBytes] +
mov ecx [esi+20h] +
mov [ebp+dwBytes] ecx +
and [ebp+dwBytes] 1 +
push edi  +
mov eax offset dword_10017A0 +
mov [ebp+var_4] offset asc_1001B6C +
jnz loc_100B7CC  +
mov [ebp+var_4] eax +
mov edi [esi+14h] +
cmp edi 1 +
jnz loc_100B7D9  +
mov edx [esi+28h] +
jmp loc_100B7DC  +
mov edx [esi+24h] +
push ebx  +
mov ebx offset asc_1001B64 +
test cl 4 +
jnz loc_100B7E9  +
mov ebx eax +
mov ecx offset asc_10017A8 +
cmp edi 1 +
jz loc_100B7F5  +
mov ecx eax +
cmp [ebp+dwBytes] 0 +
jz loc_100B800  +
mov eax offset asc_1001B60 +
push [ebp+var_4]  +
push edx  +
push ebx  +
push ecx  +
push eax  +
lea eax [ebp+dwBytes] +
push offset Source  +
push eax  +
call sub_100D83C  +
mov edi [ebp+dwBytes] +
add esp 1Ch +
add edi 2 +
cmp dword ptr [esi+1Ch] 0 +
pop ebx  +
jz loc_100B886  +
test byte ptr [esi+20h] 2 +
mov eax offset asc_1001B24 +
jnz loc_100B835  +
mov eax offset asc_1001B1C +
push eax  +
call sub_100D8C5  +
cmp dword ptr [esi+1Ch] 2 +
jnz loc_100B85D  +
test byte ptr [esi+20h] 8 +
jnz loc_100B85D  +
push dword ptr [esi+2Ch]  +
lea eax [ebp+dwBytes] +
push offset a1S1S___  +
push eax  +
call sub_100D83C  +
add esp 0Ch +
jmp loc_100B869  +
push dword ptr [esi+2Ch]  +
lea eax [ebp+dwBytes] +
push eax  +
call sub_100D633  +
test byte ptr [esi+20h] 2 +
mov eax offset asc_1001B6C +
jnz loc_100B879  +
mov eax offset dword_1001AF0 +
push eax  +
call sub_100D8C5  +
mov eax [ebp+dwBytes] +
lea edi [edi+eax+3] +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_100B88F  +
mov [eax] edi +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push edi  +
mov edi dword_1013FCC +
xor edx edx +
mov [ebp+var_4] edx +
cmp edi offset dword_1013FCC +
jz loc_100B9D4  +
push ebx  +
push esi  +
mov eax [ebp+arg_0] +
cmp eax [edi-4] +
jnz loc_100B9C4  +
cmp eax 3 +
jnz loc_100B8E9  +
mov eax [edi-0Ch] +
mov eax [eax] +
cmp [eax+38h] edx +
jz loc_100B9C4  +
push eax  +
call sub_100B784  +
test eax eax +
jnz loc_100B8F2  +
jmp loc_100B9C4  +
cmp eax edx +
jle loc_100B8F2  +
cmp eax 2 +
jle loc_100B8F5  +
mov [ebp+var_4] edx +
xor ebx ebx +
cmp [edi-8] edx +
jbe loc_100B9C4  +
mov ecx [edi-0Ch] +
mov esi [ecx+ebx*4] +
push esi  +
call sub_100B784  +
test eax eax +
jz loc_100B9BA  +
cmp [esi+38h] edx +
jnz loc_100B927  +
cmp [esi+3Ch] edx +
jnz loc_100B927  +
cmp [esi+48h] edx +
jz loc_100B9BA  +
cmp [ebp+arg_0] 3 +
jnz loc_100B935  +
cmp ebx edx +
jz loc_100B9BA  +
cmp [ebp+var_4] edx +
jnz loc_100B976  +
mov eax [ebp+arg_0] +
dec eax  +
jz loc_100B962  +
dec eax  +
jz loc_100B95B  +
dec eax  +
jnz loc_100B96F  +
mov eax [ecx] +
push dword ptr [eax+24h]  +
push 3C37h  +
push edx  +
call sub_100D871  +
add esp 0Ch +
jmp loc_100B96F  +
push 3C2Dh  +
jmp loc_100B967  +
push 3C2Ch  +
push edx  +
call sub_100D871  +
pop ecx  +
pop ecx  +
mov [ebp+var_4] 1 +
push offset asc_1001B70  +
mov dword ptr [esi+34h] 1 +
call sub_100D8C5  +
lea eax [ebp+var_8] +
push eax  +
push esi  +
call sub_100B7A6  +
movzx eax word_1013FE4 +
push eax  +
push 20h  +
push [ebp+var_8]  +
push dword ptr [esi+30h]  +
call sub_100DA05  +
test byte ptr [esi+20h] 4 +
jz loc_100B9B8  +
mov eax [ebp+arg_4] +
test eax eax +
jnz loc_100B9B8  +
mov ecx [esi+28h] +
mov [eax] ecx +
xor edx edx +
inc ebx  +
cmp ebx [edi-8] +
jb loc_100B900  +
mov edi [edi] +
cmp edi offset dword_1013FCC +
jnz loc_100B8BB  +
pop esi  +
pop ebx  +
pop edi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea eax [ebp+dwBytes] +
push eax  +
push esi  +
call sub_100B678  +
xor ebx ebx +
cmp eax ebx +
jnz loc_100BA2C  +
push ebx  +
push [ebp+dwBytes]  +
call sub_100B7A6  +
mov eax dword_1013FD4 +
mov edi offset dword_1013FD4 +
jmp loc_100BA1E  +
cmp esi [eax+44h] +
jnz loc_100BA1C  +
cmp eax [ebp+dwBytes] +
jz loc_100BA1C  +
mov [eax+38h] ebx +
mov eax [eax] +
cmp eax edi +
jnz loc_100BA0F  +
push offset asc_1001974  +
jmp loc_100BAF9  +
mov esi dword_1013FD4 +
xor ecx ecx +
inc ecx  +
mov [ebp+dwBytes] ecx +
mov edi offset dword_1013FD4 +
cmp eax ecx +
jnz loc_100BA98  +
cmp esi edi +
jz loc_100BAFE  +
push esi  +
call sub_100B784  +
test eax eax +
jz loc_100BA90  +
xor eax eax +
cmp [esi+38h] eax +
jz loc_100BA90  +
mov ecx [ebp+arg_0] +
cmp ecx [esi+44h] +
jnz loc_100BA90  +
cmp [ebp+dwBytes] eax +
jz loc_100BA7E  +
mov ebx [esi+40h] +
mov [ebp+dwBytes] eax +
cmp ebx eax +
mov eax offset asc_1001B8C +
jnz loc_100BA7B  +
mov eax offset asc_1001B60 +
push eax  +
jmp loc_100BA83  +
push offset asc_1001B88  +
call sub_100D8C5  +
push 0  +
push esi  +
call sub_100B7A6  +
mov esi [esi] +
cmp esi edi +
jnz loc_100BA49  +
jmp loc_100BAE4  +
cmp esi edi +
jz loc_100BAFE  +
mov eax [ebp+arg_0] +
cmp eax [esi+44h] +
jnz loc_100BADE  +
xor eax eax +
cmp [esi+48h] eax +
jnz loc_100BAB0  +
mov [esi+38h] eax +
jmp loc_100BADE  +
cmp [ebp+dwBytes] eax +
jz loc_100BACC  +
mov ebx [esi+40h] +
mov [ebp+dwBytes] eax +
cmp ebx eax +
mov eax offset asc_1001B8C +
jnz loc_100BAC9  +
mov eax offset asc_1001B60 +
push eax  +
jmp loc_100BAD1  +
push offset asc_1001B88  +
call sub_100D8C5  +
push 0  +
push esi  +
call sub_100B7A6  +
mov esi [esi] +
cmp esi edi +
jnz loc_100BA9C  +
cmp [ebp+dwBytes] 0 +
jnz loc_100BAFE  +
mov eax offset asc_1001B80 +
test ebx ebx +
jnz loc_100BAF8  +
mov eax offset asc_1001B78 +
push eax  +
call sub_100D8C5  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
and dword ptr [esi] 0 +
mov edx dword_1013FD4 +
mov ecx edx +
mov eax offset dword_1013FD4 +
jmp loc_100BB36  +
cmp dword ptr [ecx+48h] 0 +
jz loc_100BB34  +
test dword ptr [ecx+20h] 200h +
jz loc_100BB3E  +
mov ecx [ecx] +
cmp ecx eax +
jnz loc_100BB25  +
mov ecx edx +
jmp loc_100BB58  +
mov dword ptr [esi] 1 +
jmp loc_100BB5C  +
test dword ptr [ecx+20h] 10h +
jnz loc_100BB56  +
mov dword ptr [ecx+38h] 1 +
mov ecx [ecx] +
cmp ecx eax +
jnz loc_100BB46  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
xor edi edi +
mov [ebp+var_8] edi +
jmp loc_100BC42  +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
push [ebp+arg_0]  +
push dword ptr [ebp+Arguments]  +
call sub_100B57F  +
mov esi eax +
cmp esi edi +
jl loc_100BC61  +
mov esi [ebp+var_C] +
cmp esi edi +
jnz loc_100BBB0  +
push dword ptr [ebp+Arguments]  +
push 3C31h  +
jmp loc_100BC09  +
mov eax [ebp+var_10] +
mov [esi+4Ch] eax +
cmp eax edi +
jz loc_100BBDB  +
test dword ptr [esi+20h] 4 +
jnz loc_100BBDB  +
push dword ptr [ebp+Arguments]  +
push 3C32h  +
push edi  +
call sub_100D871  +
add esp 0Ch +
mov [ebp+var_8] 80070057h +
push [ebp+var_14]  +
push dword ptr [ebp+Arguments]  +
push dword ptr [esi+10h]  +
push esi  +
push ebx  +
call sub_100E263  +
cmp eax edi +
jge loc_100BBF2  +
mov [ebp+var_8] eax +
mov eax [esi+48h] +
cmp eax edi +
jz loc_100BC1F  +
mov ecx [esi+50h] +
cmp ecx [ebp+arg_4] +
jnz loc_100BC1B  +
push dword ptr [ebp+Arguments]  +
push 3C33h  +
push edi  +
call sub_100D871  +
add esp 0Ch +
mov [ebp+var_8] 80070057h +
jmp loc_100BC2C  +
cmp eax edi +
jnz loc_100BC2C  +
mov eax [ebp+arg_4] +
mov [esi+50h] eax +
mov dword ptr [esi+48h] 1 +
cmp dword ptr [ebp+Arguments] edi +
jz loc_100BC45  +
push dword ptr [ebp+Arguments]  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov dword ptr [ebp+Arguments] edi +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ebp+Arguments] +
push eax  +
push ebx  +
call dword ptr [ebx]  +
mov esi eax +
cmp esi edi +
jl loc_100BC61  +
cmp esi 1 +
jnz loc_100BB7E  +
xor esi esi +
cmp dword ptr [ebp+Arguments] edi +
jz loc_100BC7A  +
push dword ptr [ebp+Arguments]  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov dword ptr [ebp+Arguments] edi +
push ebx  +
call dword ptr [ebx+8]  +
cmp esi edi +
mov eax esi +
jl loc_100BC87  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
mov esi dword_1013FD4 +
cmp esi offset dword_1013FD4 +
jz loc_100BD2A  +
push ebx  +
mov ebx ds:GetProcessHeap +
push edi  +
mov edi ds:HeapFree +
mov eax [esi+24h] +
test eax eax +
jz loc_100BCC9  +
push eax  +
push 0  +
call ebx  +
push eax  +
call edi  +
and dword ptr [esi+24h] 0 +
mov eax [esi+28h] +
test eax eax +
jz loc_100BCDC  +
push eax  +
push 0  +
call ebx  +
push eax  +
call edi  +
and dword ptr [esi+28h] 0 +
mov eax [esi+30h] +
test eax eax +
jz loc_100BCEF  +
push eax  +
push 0  +
call ebx  +
push eax  +
call edi  +
and dword ptr [esi+30h] 0 +
mov eax [esi+2Ch] +
test eax eax +
jz loc_100BD02  +
push eax  +
push 0  +
call ebx  +
push eax  +
call edi  +
and dword ptr [esi+2Ch] 0 +
mov eax [esi+1Ch] +
dec eax  +
cmp eax 1 +
ja loc_100BD1E  +
mov eax [esi+5Ch] +
test eax eax +
jz loc_100BD1E  +
push eax  +
push 0  +
call ebx  +
push eax  +
call edi  +
and dword ptr [esi+5Ch] 0 +
mov esi [esi] +
cmp esi offset dword_1013FD4 +
jnz loc_100BCB6  +
pop edi  +
pop ebx  +
mov eax dword_1013FE8 +
pop esi  +
test eax eax +
jz locret_100BD41  +
push eax  +
call sub_100F099  +
and dword_1013FE8 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 7FFFFFFFh +
ja loc_100BD5F  +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
xor eax eax +
jmp loc_100BD6A  +
mov eax [ebp+arg_4] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
ja loc_100BD91  +
mov eax [ebp+arg_0] +
jb loc_100BD88  +
cmp eax 0FFFFFFFFh +
ja loc_100BD91  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_100BD9C  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_4] +
add eax ecx +
cmp eax ecx +
jb loc_100BDBF  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_100BDCA  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+nBufferLength] +
add eax eax +
push eax  +
push 0  +
push [ebp+lpBuffer]  +
call memset  +
add esp 0Ch +
push 208h  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+lpMem] eax +
test eax eax +
jnz loc_100BE13  +
mov [ebp+lpSrc] 8007000Eh +
jmp loc_100BEA5  +
push ebx  +
push esi  +
push edi  +
mov esi 104h +
push esi  +
push eax  +
push [ebp+lpSrc]  +
xor ecx ecx +
mov [eax] cx +
call ds:ExpandEnvironmentStringsW  +
cmp eax esi +
jbe loc_100BE31  +
xor eax eax +
mov ebx ds:GetLastError +
mov edi 0FFFFh +
mov esi 80070000h +
test eax eax +
ja loc_100BE5F  +
call ebx  +
test eax eax +
jz loc_100BE53  +
jle loc_100BE58  +
and eax edi +
or eax esi +
jmp loc_100BE58  +
mov eax 80004005h +
mov [ebp+lpSrc] eax +
test eax eax +
jl loc_100BE90  +
push 0  +
push [ebp+lpBuffer]  +
push [ebp+nBufferLength]  +
push [ebp+lpMem]  +
call ds:GetFullPathNameW  +
test eax eax +
jbe loc_100BE7A  +
and [ebp+lpSrc] 0 +
jmp loc_100BE90  +
call ebx  +
test eax eax +
jz loc_100BE88  +
jle loc_100BE8D  +
and eax edi +
or eax esi +
jmp loc_100BE8D  +
mov eax 80004005h +
mov [ebp+lpSrc] eax +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop edi  +
pop esi  +
pop ebx  +
mov eax [ebp+lpSrc] +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
xor edi edi +
mov [ebp+var_4] ebx +
cmp dword_1013FE8 ebx +
jnz loc_100BF55  +
push 208h  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov edi eax +
cmp edi ebx +
jnz loc_100BEEF  +
mov [ebp+var_4] 8007000Eh +
jmp loc_100BF60  +
push 104h  +
push edi  +
xor eax eax +
push ebx  +
mov [edi] ax +
call ds:GetModuleFileNameW  +
test eax eax +
jnz loc_100BF16  +
call ds:GetLastError  +
cmp eax ebx +
jnz loc_100BF2D  +
mov eax 80004005h +
jmp loc_100BF39  +
push ebx  +
push 8  +
push edi  +
call sub_100F1EA  +
mov esi eax +
cmp esi ebx +
jnz loc_100BF3E  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_100BF39  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_4] eax +
jmp loc_100BF60  +
push ebx  +
push esi  +
push offset dword_1013FE8  +
call ds:InterlockedCompareExchange  +
test eax eax +
jz loc_100BF55  +
push esi  +
call sub_100F099  +
mov eax [ebp+arg_0] +
mov ecx dword_1013FE8 +
mov [eax] ecx +
cmp edi ebx +
jz loc_100BF73  +
push edi  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor eax eax +
push edi  +
mov edi offset dword_1013FD4 +
cmp dword_1013B6C eax +
jz loc_100BFA9  +
mov dword_1013FD8 edi +
mov dword_1013FD4 edi +
mov dword_1013B6C eax +
mov esi [ebp+arg_0] +
cmp esi eax +
jz loc_100BFDF  +
push 38h  +
push eax  +
lea eax [esi+24h] +
push eax  +
call memset  +
mov eax dword_1013FD8 +
mov [esi] edi +
mov [esi+4] eax +
mov [eax] esi +
mov eax dword_1013FF0 +
mov dword_1013FD8 esi +
add esp 0Ch +
mov [esi+54h] eax +
inc dword_1013FF0  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_1013B70 0 +
mov ecx offset dword_1013FCC +
jz loc_100C011  +
and dword_1013B70 0 +
mov dword_1013FD0 ecx +
mov dword_1013FCC ecx +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_100C02D  +
mov edx dword_1013FD0 +
add eax 0Ch +
mov [eax] ecx +
mov [eax+4] edx +
mov [edx] eax +
mov dword_1013FD0 eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
push esi  +
xor esi esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100C045  +
lea ecx [ebp+dwBytes] +
push ecx  +
push 2  +
sub eax edx +
pop ecx  +
sar eax 1 +
mul  ecx +
push edx  +
push eax  +
call sub_100BD73  +
test eax eax +
jl loc_100C0A0  +
lea eax [ebp+dwBytes] +
push eax  +
push 2  +
push [ebp+dwBytes]  +
call sub_100BDA5  +
test eax eax +
jl loc_100C0A0  +
push [ebp+dwBytes]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
test esi esi +
jz loc_100C0A0  +
push [ebp+dwBytes]  +
push [ebp+arg_0]  +
push esi  +
call memcpy  +
add esp 0Ch +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+hInstance] 0 +
push esi  +
push edi  +
mov edi [ebp+nBufferMax] +
lea eax [ebp+nBufferMax] +
push eax  +
push edi  +
call sub_100BD47  +
mov esi eax +
test esi esi +
jl loc_100C11B  +
cmp [ebp+nBufferMax] edi +
jbe loc_100C0D7  +
mov esi 80004005h +
jmp loc_100C11B  +
lea eax [ebp+hInstance] +
push eax  +
call sub_100BEB1  +
mov esi eax +
test esi esi +
jl loc_100C11B  +
push [ebp+nBufferMax]  +
push [ebp+lpBuffer]  +
push [ebp+uID]  +
push [ebp+hInstance]  +
call ds:LoadStringW  +
test eax eax +
jnz loc_100C11B  +
call ds:GetLastError  +
test eax eax +
jz loc_100C114  +
jle loc_100C119  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100C119  +
mov eax 80004005h +
mov esi eax +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push 800h  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
mov [ebp+lpMem] esi +
test esi esi +
jnz loc_100C155  +
mov [ebp+uID] 8007000Eh +
jmp loc_100C1BB  +
push 400h  +
push esi  +
push [ebp+uID]  +
xor eax eax +
mov [esi] ax +
call sub_100C0AC  +
mov [ebp+uID] eax +
test eax eax +
jl loc_100C1A9  +
push ebx  +
push edi  +
mov edi offset dword_1001B90 +
push edi  +
push esi  +
mov esi ds:wcstok +
jmp loc_100C19D  +
push offset asc_1001B70  +
call sub_100D8C5  +
push ebx  +
call sub_100D8C5  +
push offset asc_10017A4  +
call sub_100D8C5  +
push edi  +
push 0  +
call esi  +
mov ebx eax +
pop ecx  +
pop ecx  +
test ebx ebx +
jnz loc_100C180  +
pop edi  +
pop ebx  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax [ebp+uID] +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+Arguments] +
push eax  +
xor edi edi +
push 1  +
mov dword ptr [ebp+Arguments] edi +
call sub_100B89A  +
lea eax [ebp+Arguments] +
push eax  +
push 2  +
call sub_100B89A  +
lea eax [ebp+Arguments] +
push eax  +
push 3  +
call sub_100B89A  +
push 3C2Eh  +
push edi  +
call sub_100D871  +
mov esi dword_1013FD4 +
pop ecx  +
pop ecx  +
mov ebx offset dword_1013FD4 +
jmp loc_100C273  +
cmp [esi+34h] edi +
jnz loc_100C271  +
push esi  +
call sub_100B784  +
test eax eax +
jz loc_100C271  +
cmp [esi+3Ch] edi +
jnz loc_100C230  +
cmp [esi+48h] edi +
jnz loc_100C230  +
cmp [esi+38h] edi +
jz loc_100C271  +
push offset asc_1001B70  +
mov dword ptr [esi+34h] 1 +
call sub_100D8C5  +
lea eax [ebp+var_8] +
push eax  +
push esi  +
call sub_100B7A6  +
movzx eax word_1013FE4 +
push eax  +
push 20h  +
push [ebp+var_8]  +
push dword ptr [esi+30h]  +
call sub_100DA05  +
test byte ptr [esi+20h] 4 +
jz loc_100C271  +
cmp dword ptr [ebp+Arguments] edi +
jnz loc_100C271  +
mov eax [esi+28h] +
mov dword ptr [ebp+Arguments] eax +
mov esi [esi] +
cmp esi ebx +
jnz loc_100C212  +
cmp dword ptr [ebp+Arguments] edi +
jz loc_100C28D  +
push dword ptr [ebp+Arguments]  +
push 3C35h  +
push edi  +
call sub_100D871  +
add esp 0Ch +
cmp uID edi +
jz loc_100C2C4  +
push 3C38h  +
push edi  +
call sub_100D871  +
pop ecx  +
pop ecx  +
push offset asc_1001B70  +
call sub_100D8C5  +
push uID  +
push edi  +
call sub_100D871  +
pop ecx  +
pop ecx  +
push offset asc_10017A4  +
call sub_100D8C5  +
mov esi dword_1013FD4 +
mov dword ptr [ebp+Arguments] edi +
jmp loc_100C306  +
cmp [esi+34h] edi +
jz loc_100C304  +
cmp [esi+0Ch] edi +
jz loc_100C304  +
cmp [ebp+arg_0] edi +
jz loc_100C2E3  +
cmp [esi+48h] edi +
jz loc_100C304  +
cmp dword ptr [ebp+Arguments] edi +
jnz loc_100C2FC  +
push 3C36h  +
push edi  +
call sub_100D871  +
pop ecx  +
pop ecx  +
mov dword ptr [ebp+Arguments] 1 +
push dword ptr [esi+0Ch]  +
call sub_100C128  +
mov esi [esi] +
cmp esi ebx +
jnz loc_100C2CF  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
mov edi offset asc_10017A4 +
push edi  +
mov [ebp+pbstrOut] ebx +
call sub_100D8C5  +
mov esi dword_1013FD4 +
jmp loc_100C479  +
cmp [esi+48h] ebx +
jz loc_100C477  +
mov eax [esi+28h] +
cmp eax ebx +
jnz loc_100C351  +
mov eax offset dword_10017A0 +
push eax  +
push dword ptr [esi+24h]  +
push offset a116s26s  +
call sub_100D857  +
mov eax [esi+1Ch] +
add esp 0Ch +
sub eax ebx +
jz loc_100C44B  +
dec eax  +
jz loc_100C446  +
dec eax  +
jz loc_100C3E8  +
dec eax  +
jz loc_100C3C7  +
dec eax  +
jz loc_100C391  +
dec eax  +
jnz loc_100C46C  +
push dword ptr [esi+5Ch]  +
push offset a1D  +
jmp loc_100C465  +
lea eax [ebp+pvtime] +
push eax  +
lea eax [esi+5Ch] +
push eax  +
call ds:SystemTimeToVariantTime  +
fld  [ebp+pvtime] +
lea eax [ebp+pbstrOut] +
push eax  +
push ebx  +
push 400h  +
push ecx  +
push ecx  +
fstp  [esp+2Ch+var_2C] +
call ds:VarBstrFromDate  +
test eax eax +
jl loc_100C48B  +
push [ebp+pbstrOut]  +
jmp loc_100C460  +
movzx eax word ptr [esi+68h] +
push eax  +
movzx eax word ptr [esi+66h] +
push eax  +
movzx eax word ptr [esi+64h] +
push eax  +
push offset a102d202d302d  +
call sub_100D857  +
add esp 10h +
jmp loc_100C46C  +
mov edi [esi+5Ch] +
cmp edi ebx +
jz loc_100C3F6  +
xor eax eax +
cmp ax [edi] +
jnz loc_100C402  +
push offset asc_10017A8  +
call sub_100D857  +
jmp loc_100C46B  +
push edi  +
cmp edi [esi+5Ch] +
jnz loc_100C416  +
push offset a120s  +
call sub_100D857  +
pop ecx  +
pop ecx  +
jmp loc_100C428  +
push offset asc_1001974  +
push offset a126s220s  +
call sub_100D857  +
add esp 0Ch +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_100C42D  +
sub eax edx +
sar eax 1 +
lea edi [edi+eax*2+2] +
cmp [edi] bx +
jnz loc_100C402  +
jmp loc_100C46C  +
push dword ptr [esi+5Ch]  +
jmp loc_100C460  +
cmp [esi+48h] ebx +
jz loc_100C45A  +
mov eax offset aTrue +
cmp [esi+4Ch] ebx +
jz loc_100C45F  +
mov eax offset aFalse +
push eax  +
push offset a1S  +
call sub_100D857  +
pop ecx  +
pop ecx  +
mov edi offset asc_10017A4 +
push edi  +
call sub_100D8C5  +
mov esi [esi] +
cmp esi offset dword_1013FD4 +
jnz loc_100C33C  +
push edi  +
call sub_100D8C5  +
push [ebp+pbstrOut]  +
call ds:SysFreeString  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 160h +
mov eax dword_1013B58 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx ds:GetProcessHeap +
push esi  +
push edi  +
mov edi 800h +
push edi  +
push 0  +
call ebx  +
mov esi ds:HeapAlloc +
push eax  +
call esi  +
mov [ebp+lpBuffer] eax +
test eax eax +
jnz loc_100C4E3  +
mov esi 8007000Eh +
jmp loc_100C7D4  +
xor ecx ecx +
push edi  +
push ecx  +
mov [eax] cx +
call ebx  +
push eax  +
call esi  +
mov [ebp+lpMem] eax +
test eax eax +
jz loc_100C7EC  +
xor ecx ecx +
mov [eax] cx +
mov edi dword_1013FD4 +
cmp edi offset dword_1013FD4 +
jz loc_100C7A2  +
mov ebx 400h +
push ebx  +
push [ebp+lpBuffer]  +
push dword ptr [edi+8]  +
call sub_100C0AC  +
mov esi eax +
test esi esi +
jl loc_100C7A4  +
mov esi ds:wcstok +
push offset asc_1001C7C  +
push [ebp+lpBuffer]  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100C7E5  +
push eax  +
call sub_100C036  +
mov [edi+24h] eax +
test eax eax +
jz loc_100C7EC  +
and dword ptr [edi+18h] 0 +
push offset asc_1001C7C  +
push 0  +
call esi  +
pop ecx  +
pop ecx  +
mov [ebp+var_160] eax +
test eax eax +
jz loc_100C7E5  +
xor ecx ecx +
cmp cx [eax] +
jz loc_100C5BC  +
push offset asc_1001844  +
push eax  +
call ds:__imp__wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100C5BC  +
push [ebp+var_160]  +
call sub_100C036  +
mov [edi+28h] eax +
test eax eax +
jz loc_100C7EC  +
test dword ptr [edi+20h] 40h +
jnz loc_100C5BC  +
mov dword ptr [edi+18h] 1 +
push offset asc_1001C7C  +
push 0  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100C7E5  +
mov edx offset asc_1001844 +
mov ecx eax +
mov si [ecx] +
cmp si [edx] +
jnz loc_100C5FC  +
test si si +
jz loc_100C5F8  +
mov si [ecx+2] +
cmp si [edx+2] +
jnz loc_100C5FC  +
add ecx 4 +
add edx 4 +
test si si +
jnz loc_100C5D6  +
xor ecx ecx +
jmp loc_100C601  +
sbb ecx ecx +
sbb ecx 0FFFFFFFFh +
test ecx ecx +
jz loc_100C60B  +
push eax  +
jmp loc_100C768  +
mov eax [edi+1Ch] +
test eax eax +
jle loc_100C774  +
cmp eax 2 +
jle loc_100C632  +
cmp eax 3 +
jz loc_100C744  +
cmp eax 4 +
jz loc_100C64D  +
cmp eax 5 +
jnz loc_100C774  +
test byte ptr [edi+20h] 80h +
push ebx  +
push [ebp+lpMem]  +
jz loc_100C752  +
push 3BC5h  +
jmp loc_100C757  +
mov esi ds:GetLocaleInfoW +
push 50h  +
lea eax [ebp+LCData] +
push eax  +
push 1Fh  +
push ebx  +
call esi  +
test eax eax +
jnz loc_100C66C  +
mov word ptr [ebp+LCData] ax +
push 50h  +
lea eax [ebp+var_B4] +
push eax  +
push 1003h  +
push ebx  +
call esi  +
test eax eax +
jnz loc_100C688  +
mov [ebp+var_B4] ax +
push 4  +
lea eax [ebp+var_14] +
push eax  +
push 28h  +
push ebx  +
call esi  +
test eax eax +
jnz loc_100C69B  +
mov word ptr [ebp+var_14] ax +
push 4  +
lea eax [ebp+var_C] +
push eax  +
push 29h  +
push ebx  +
call esi  +
test eax eax +
jnz loc_100C6AE  +
mov word ptr [ebp+var_C] ax +
lea eax [ebp+var_B4] +
push 20h  +
push eax  +
call ds:wcsrchr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100C6C8  +
xor ecx ecx +
mov [eax] cx +
lea eax [ebp+var_14] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100C6CE  +
sub eax edx +
sar eax 1 +
jz loc_100C720  +
lea eax [ebp+var_C] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100C6E4  +
sub eax edx +
sar eax 1 +
jz loc_100C720  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+var_B4] +
push eax  +
lea eax [ebp+LCData] +
push eax  +
push offset aSSSS  +
push ebx  +
push [ebp+lpMem]  +
call sub_1007DB7  +
add esp 1Ch +
jmp loc_100C75C  +
lea eax [ebp+var_B4] +
push eax  +
lea eax [ebp+LCData] +
push eax  +
push offset aSS_0  +
push ebx  +
push [ebp+lpMem]  +
call sub_1007DB7  +
add esp 14h +
jmp loc_100C75C  +
push ebx  +
push [ebp+lpMem]  +
push 3BC6h  +
jmp loc_100C757  +
push 3BC4h  +
call sub_100C0AC  +
mov esi eax +
test esi esi +
jl loc_100C7A4  +
push [ebp+lpMem]  +
call sub_100C036  +
mov [edi+2Ch] eax +
test eax eax +
jz loc_100C7EC  +
push offset asc_1001C7C  +
push 0  +
call ds:wcstok  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100C7E5  +
push eax  +
call sub_100C036  +
mov [edi+30h] eax +
test eax eax +
jz loc_100C7EC  +
mov edi [edi] +
cmp edi offset dword_1013FD4 +
jnz loc_100C519  +
xor esi esi +
mov edi ds:HeapFree +
xor ebx ebx +
cmp [ebp+lpMem] ebx +
jz loc_100C7C4  +
push [ebp+lpMem]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call edi  +
push [ebp+lpBuffer]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call edi  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100B071  +
leave   +
retn   +
mov esi 8000FFFFh +
jmp loc_100C7A4  +
mov esi 8007000Eh +
jmp loc_100C7A4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
mov eax dword_1013B58 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx ds:GetProcessHeap +
push esi  +
xor esi esi +
push edi  +
push 400h  +
push esi  +
mov [ebp+puLen] esi +
mov [ebp+lpBuffer] esi +
mov [ebp+pBlock] esi +
mov [ebp+var_3C] esi +
mov [ebp+var_40] esi +
call ebx  +
mov edi ds:HeapAlloc +
push eax  +
call edi  +
mov [ebp+lpMem] eax +
cmp eax esi +
jnz loc_100C84E  +
mov edi ds:HeapFree +
mov [ebp+hModule] 8007000Eh +
jmp loc_100CAD2  +
push 800h  +
xor ecx ecx +
push esi  +
mov [eax] cx +
call ebx  +
push eax  +
call edi  +
mov [ebp+lptstrFilename] eax +
cmp eax esi +
jz loc_100C97D  +
xor ecx ecx +
mov [eax] cx +
cmp dword_1014000 esi +
jnz loc_100C901  +
push 208h  +
push esi  +
mov dword_1014000 1 +
call ebx  +
push eax  +
call edi  +
mov lpModuleName eax +
cmp eax esi +
jz loc_100C97D  +
push eax  +
push 104h  +
xor ecx ecx +
push offset Src  +
mov [eax] cx +
call sub_100BDD3  +
cmp eax esi +
mov [ebp+hModule] eax +
jl loc_100CAA7  +
push lpModuleName  +
call ds:GetModuleHandleW  +
mov [ebp+hModule] eax +
cmp eax esi +
jz loc_100C901  +
push offset ProcName  +
push eax  +
call ds:GetProcAddress  +
push eax  +
call ds:EncodePointer  +
push offset aGetfileversi_0  +
push [ebp+hModule]  +
mov dword_1013FF8 eax +
call ds:GetProcAddress  +
push eax  +
call ds:EncodePointer  +
mov dword_1013FF4 eax +
push 400h  +
push [ebp+lptstrFilename]  +
push esi  +
call ds:GetModuleFileNameW  +
test eax eax +
jnz loc_100C932  +
call ds:GetLastError  +
cmp eax esi +
jz loc_100C990  +
jle loc_100C92A  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+hModule] eax +
jmp loc_100CAA7  +
push offset aMicrosoftO  +
push 10h  +
lea eax [ebp+Arguments] +
push eax  +
call sub_1007D23  +
cmp eax esi +
mov [ebp+hModule] eax +
jl loc_100CAA7  +
push dword_1013FF8  +
call ds:DecodePointer  +
push esi  +
push [ebp+lptstrFilename]  +
cmp eax esi +
jz loc_100C989  +
push 2  +
call eax  +
mov [ebp+puLen] eax +
cmp eax esi +
jz loc_100C914  +
push eax  +
push 8  +
call ebx  +
push eax  +
call edi  +
mov edi eax +
mov [ebp+pBlock] edi +
cmp edi esi +
jnz loc_100C997  +
mov [ebp+hModule] 8007000Eh +
jmp loc_100CAA7  +
call GetFileVersionInfoSizeW  +
jmp loc_100C965  +
mov eax 80004005h +
jmp loc_100C92A  +
push dword_1013FF4  +
call ds:DecodePointer  +
push edi  +
push [ebp+puLen]  +
push esi  +
push [ebp+lptstrFilename]  +
cmp eax esi +
jz loc_100C9CA  +
push 2  +
call eax  +
test eax eax +
jnz loc_100C9D1  +
call ds:GetLastError  +
cmp eax esi +
jg loc_100C920  +
jmp loc_100C92A  +
call GetFileVersionInfoW  +
jmp loc_100C9B3  +
lea eax [ebp+puLen] +
push eax  +
lea eax [ebp+lpBuffer] +
push eax  +
push offset SubBlock  +
push edi  +
mov [ebp+puLen] esi +
call VerQueryValueW  +
mov eax [ebp+lpBuffer] +
cmp eax esi +
jnz loc_100C9FA  +
mov [ebp+hModule] 80004004h +
jmp loc_100CAA7  +
movzx ecx word ptr [eax+2] +
movzx eax word ptr [eax] +
push offset aProductversion  +
push ecx  +
push eax  +
mov ebx offset aStringfileinfo +
push ebx  +
mov edi 200h +
push edi  +
push [ebp+lpMem]  +
call sub_1007DB7  +
add esp 18h +
cmp eax esi +
mov [ebp+hModule] eax +
jl loc_100CAA1  +
lea eax [ebp+puLen] +
push eax  +
lea eax [ebp+var_3C] +
push eax  +
push [ebp+lpMem]  +
mov [ebp+puLen] esi +
push [ebp+pBlock]  +
call VerQueryValueW  +
cmp [ebp+var_3C] esi +
jnz loc_100CA4A  +
mov [ebp+hModule] 80004004h +
jmp loc_100CAA1  +
mov eax [ebp+lpBuffer] +
movzx ecx word ptr [eax+2] +
movzx eax word ptr [eax] +
push offset aOriginalfilena  +
push ecx  +
push eax  +
push ebx  +
push edi  +
push [ebp+lpMem]  +
call sub_1007DB7  +
add esp 18h +
cmp eax esi +
mov [ebp+hModule] eax +
jl loc_100CAA1  +
lea eax [ebp+puLen] +
push eax  +
lea eax [ebp+var_40] +
push eax  +
push [ebp+lpMem]  +
mov [ebp+puLen] esi +
push [ebp+pBlock]  +
call VerQueryValueW  +
cmp [ebp+var_40] esi +
jz loc_100CA41  +
push [ebp+var_3C]  +
lea eax [ebp+Arguments] +
push [ebp+var_40]  +
push eax  +
push offset a1S2S3S  +
call sub_100D857  +
add esp 10h +
mov ebx ds:GetProcessHeap +
push [ebp+lpMem]  +
push esi  +
call ebx  +
mov edi ds:HeapFree +
push eax  +
call edi  +
cmp [ebp+lptstrFilename] esi +
jz loc_100CAC4  +
push [ebp+lptstrFilename]  +
push esi  +
call ebx  +
push eax  +
call edi  +
cmp [ebp+pBlock] esi +
jz loc_100CAD2  +
push [ebp+pBlock]  +
push esi  +
call ebx  +
push eax  +
call edi  +
mov eax lpModuleName +
cmp eax esi +
jz loc_100CAE8  +
push eax  +
push esi  +
call ebx  +
push eax  +
call edi  +
mov lpModuleName esi +
mov ecx [ebp+var_4] +
mov eax [ebp+hModule] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100B071  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
call sub_100C7F8  +
push dword ptr [ebp+Arguments]  +
push 3C2Fh  +
push 0  +
call sub_100D871  +
xor esi esi +
inc esi  +
add esp 0Ch +
cmp dword_1013FDC esi +
jb loc_100CB37  +
push esi  +
call sub_100B9DE  +
inc esi  +
cmp esi dword_1013FDC +
jbe loc_100CB28  +
mov esi dword_1013FD4 +
mov edi offset dword_1013FD4 +
jmp loc_100CB72  +
cmp dword ptr [esi+3Ch] 0 +
jz loc_100CB70  +
push esi  +
call sub_100B784  +
test eax eax +
jz loc_100CB70  +
push offset asc_1001B8C  +
call sub_100D8C5  +
push 0  +
push esi  +
call sub_100B7A6  +
push offset asc_1001B80  +
call sub_100D8C5  +
mov esi [esi] +
cmp esi edi +
jnz loc_100CB44  +
push 3C30h  +
push 0  +
call sub_100D871  +
pop ecx  +
pop ecx  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
call sub_100BB0A  +
push 1  +
call sub_1005083  +
push eax  +
call sub_100B6CA  +
test eax eax +
jl locret_100CBC6  +
push dword ptr [ebp+Arguments]  +
call sub_100CAFF  +
push [ebp+var_4]  +
call sub_100C1C8  +
xor eax eax +
inc eax  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
push esi  +
push edi  +
xor edi edi +
push 208h  +
push edi  +
mov [ebp+var_8] edi +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov ebx eax +
mov [ebp+lpMem] ebx +
cmp ebx edi +
jnz loc_100CC05  +
mov esi 8007000Eh +
jmp loc_100CD8F  +
push ebx  +
push 104h  +
xor eax eax +
push offset aWindirSystem_0  +
mov [ebx] ax +
call sub_100BDD3  +
mov esi eax +
cmp esi edi +
jl loc_100CD72  +
push ebx  +
call ds:GetModuleHandleW  +
cmp eax edi +
jz loc_100CC4A  +
push offset aSetthreadprefe  +
push eax  +
call ds:GetProcAddress  +
cmp eax edi +
jz loc_100CC4A  +
push edi  +
push edi  +
push 100h  +
call eax  +
jmp loc_100CC51  +
push edi  +
call ds:SetThreadUILanguage  +
push 0FFFFFFF5h  +
call ds:GetStdHandle  +
mov esi eax +
cmp esi 0FFFFFFFFh +
jz loc_100CD6D  +
cmp esi edi +
jz loc_100CD6D  +
xor eax eax +
push esi  +
mov word_1013FE4 ax +
call sub_100E805  +
test eax eax +
jz loc_100CCBA  +
lea eax [ebp+ConsoleScreenBufferInfo] +
push eax  +
push esi  +
call ds:GetConsoleScreenBufferInfo  +
test eax eax +
jnz loc_100CCAE  +
call ds:GetLastError  +
cmp eax edi +
jz loc_100CCA5  +
jle loc_100CCAA  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100CCAA  +
mov eax 80004005h +
cmp eax edi +
jl loc_100CCBA  +
mov eax dword ptr [ebp+ConsoleScreenBufferInfo.srWindow.Right] +
sub eax dword ptr [ebp+ConsoleScreenBufferInfo.srWindow.Left] +
mov word_1013FE4 ax +
push edi  +
call sub_100BF82  +
push edi  +
call sub_100BFEB  +
call sub_100C49E  +
mov esi eax +
cmp esi edi +
jl loc_100CD72  +
mov ebx [ebp+arg_4] +
lea eax [ebp+var_4] +
push eax  +
push ebx  +
push [ebp+arg_0]  +
call sub_100E4B8  +
mov esi eax +
cmp esi edi +
jl loc_100CD72  +
push 1  +
push [ebp+var_4]  +
call sub_100BB66  +
cmp eax edi +
jge loc_100CD00  +
mov [ebp+var_8] eax +
mov eax [ebp+arg_C] +
cmp eax edi +
jz loc_100CD34  +
cmp [eax+48h] edi +
jz loc_100CD34  +
mov eax [eax+5Ch] +
cmp eax edi +
jz loc_100CD34  +
lea ecx [ebp+var_4] +
push ecx  +
push eax  +
call sub_100E74D  +
mov esi eax +
cmp esi edi +
jl loc_100CD72  +
push 2  +
push [ebp+var_4]  +
call sub_100BB66  +
cmp eax edi +
jge loc_100CD34  +
mov [ebp+var_8] eax +
cmp dword_1013FE0 edi +
jz loc_100CD41  +
call sub_100C316  +
mov eax [ebp+arg_8] +
cmp eax edi +
jz loc_100CD5D  +
cmp [eax+48h] edi +
jz loc_100CD5D  +
or dword ptr [eax+20h] 200h +
push dword ptr [ebx]  +
call sub_100CB8F  +
jmp loc_100CD69  +
push edi  +
call sub_1005083  +
push eax  +
call sub_100B6CA  +
mov esi eax +
jmp loc_100CD72  +
mov esi 80070057h +
push [ebp+lpMem]  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp esi edi +
jl loc_100CD8F  +
mov eax [ebp+var_8] +
cmp esi 1 +
jnz loc_100CD91  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
xor edx edx +
push esi  +
push edi  +
cmp [ebp+arg_C] edx +
jbe loc_100CDF5  +
mov eax [ebp+arg_8] +
mov eax [eax+edx*4] +
mov edi [eax+4] +
and [ebp+var_4] 0 +
and [ebp+var_8] 0 +
test edi edi +
jbe loc_100CDEF  +
mov esi [eax] +
mov ecx [esi] +
xor eax eax +
cmp [ebp+arg_0] ecx +
setz al  +
xor ebx ebx +
add eax eax +
cmp [ebp+arg_4] ecx +
setz bl  +
or eax ebx +
or [ebp+var_4] eax +
cmp [ebp+var_4] 3 +
jz loc_100CDFE  +
inc [ebp+var_8]  +
add esi 4 +
cmp [ebp+var_8] edi +
jb loc_100CDC5  +
inc edx  +
cmp edx [ebp+arg_C] +
jb loc_100CDAE  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
xor eax eax +
inc eax  +
jmp loc_100CDF7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi+58h] 0 +
push edi  +
jnz loc_100CE52  +
mov edi dword_1013FF0 +
shl edi 2 +
push edi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [esi+58h] eax +
test eax eax +
jnz loc_100CE46  +
mov [ebp+var_4] 8007000Eh +
jmp loc_100CE5E  +
push edi  +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
mov eax [ebp+arg_4] +
mov ecx [eax+54h] +
mov edx [esi+58h] +
mov [edx+ecx*4] eax +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov ecx [ebp+arg_8] +
push ebx  +
xor ebx ebx +
lea eax [ecx-1] +
push esi  +
push edi  +
mov [ebp+var_14] ebx +
mov [ebp+var_1C] ebx +
mov [ebp+var_8] ebx +
cmp eax ebx +
jbe loc_100CF6A  +
mov eax [ebp+arg_4] +
mov edx [ebp+var_8] +
lea edx [eax+edx*4] +
mov eax [edx] +
mov [ebp+var_4] ebx +
mov [ebp+var_18] edx +
cmp [eax+4] ebx +
jbe loc_100CF56  +
mov eax [eax] +
mov esi [ebp+var_4] +
mov eax [eax+esi*4] +
cmp [eax+48h] ebx +
jz loc_100CF45  +
mov eax [ebp+var_8] +
inc eax  +
mov [ebp+var_10] eax +
cmp eax ecx +
jnb loc_100CF45  +
mov esi [ebp+arg_4] +
lea eax [esi+eax*4] +
mov [ebp+var_C] eax +
mov eax [ebp+var_C] +
mov eax [eax] +
cmp [eax+4] ebx +
jbe loc_100CF39  +
mov ecx [edx] +
mov esi [ebp+var_4] +
mov ecx [ecx] +
mov ecx [ecx+esi*4] +
mov eax [eax] +
mov esi [eax+ebx*4] +
mov edi ecx +
cmp edi esi +
jz loc_100CF29  +
cmp dword ptr [esi+48h] 0 +
jz loc_100CF29  +
mov eax [edi+54h] +
cmp eax [esi+54h] +
jbe loc_100CF00  +
mov edi esi +
mov esi ecx +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push esi  +
push edi  +
call sub_100CD9D  +
test eax eax +
jnz loc_100CF26  +
push esi  +
push edi  +
call sub_100CE08  +
mov [ebp+var_14] eax +
test eax eax +
jl loc_100CF6F  +
mov [ebp+var_1C] 80070057h +
mov edx [ebp+var_18] +
mov eax [ebp+var_C] +
mov eax [eax] +
inc ebx  +
cmp ebx [eax+4] +
jb loc_100CED9  +
mov ecx [ebp+arg_8] +
xor ebx ebx +
inc [ebp+var_10]  +
add [ebp+var_C] 4 +
cmp [ebp+var_10] ecx +
jb loc_100CECF  +
inc [ebp+var_4]  +
mov eax [edx] +
mov esi [ebp+var_4] +
cmp esi [eax+4] +
jb loc_100CEAA  +
inc [ebp+var_8]  +
lea eax [ecx-1] +
cmp [ebp+var_8] eax +
jb loc_100CE90  +
cmp [ebp+var_14] ebx +
jl loc_100CF6F  +
mov eax [ebp+var_1C] +
jmp loc_100CF72  +
mov eax [ebp+var_14] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov eax [ebp+arg_8] +
xor edx edx +
push ebx  +
lea ecx [eax-1] +
push esi  +
push edi  +
mov [ebp+var_8] edx +
mov [ebp+var_C] edx +
mov [ebp+var_4] edx +
cmp ecx edx +
jbe loc_100D002  +
mov ebx [ebp+arg_4] +
mov ecx [ebx] +
cmp [ecx+48h] edx +
jz loc_100CFEF  +
mov edi [ebp+var_4] +
inc edi  +
cmp edi eax +
jnb loc_100CFEF  +
mov esi [ebx] +
mov ecx [ebp+arg_4] +
mov ecx [ecx+edi*4] +
mov edx esi +
cmp edx ecx +
jz loc_100CFE8  +
cmp dword ptr [ecx+48h] 0 +
jz loc_100CFE8  +
mov eax [edx+54h] +
cmp eax [ecx+54h] +
jbe loc_100CFD0  +
mov edx ecx +
mov ecx esi +
push ecx  +
push edx  +
call sub_100CE08  +
mov [ebp+var_8] eax +
test eax eax +
jl loc_100D007  +
mov eax [ebp+arg_8] +
mov [ebp+var_C] 80070057h +
inc edi  +
cmp edi eax +
jb loc_100CFB0  +
xor edx edx +
inc [ebp+var_4]  +
lea ecx [eax-1] +
add ebx 4 +
cmp [ebp+var_4] ecx +
jb loc_100CFA1  +
cmp [ebp+var_8] edx +
jl loc_100D007  +
mov eax [ebp+var_C] +
jmp loc_100D00A  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_8] eax +
jbe loc_100D035  +
mov ecx [ebp+arg_4] +
mov ecx [ecx+eax*4] +
inc eax  +
mov dword ptr [ecx+38h] 1 +
cmp eax [ebp+arg_8] +
jb loc_100D022  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_8] eax +
jbe loc_100D05C  +
mov ecx [ebp+arg_4] +
mov ecx [ecx+eax*4] +
and dword ptr [ecx+38h] 0 +
inc eax  +
cmp eax [ebp+arg_8] +
jb loc_100D04C  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
push ebx  +
push edi  +
push [ebp+arg_0]  +
call sub_100D016  +
xor esi esi +
cmp eax esi +
jl loc_100D0DF  +
cmp [ebp+arg_0] esi +
jz loc_100D0A1  +
xor ecx ecx +
cmp ebx esi +
jbe loc_100D0DF  +
mov edx [edi+ecx*4] +
inc ecx  +
mov dword ptr [edx+3Ch] 1 +
cmp ecx ebx +
jb loc_100D090  +
jmp loc_100D0DF  +
cmp ebx esi +
jbe loc_100D0DF  +
mov ecx [edi+esi*4] +
test dword ptr [ecx+20h] 400h +
jnz loc_100D0DA  +
cmp dword ptr [ecx+48h] 0 +
jnz loc_100D0DA  +
cmp dword ptr [ecx+18h] 1 +
jnz loc_100D0C2  +
mov ecx [ecx+28h] +
jmp loc_100D0C5  +
mov ecx [ecx+24h] +
push ecx  +
push 3C29h  +
push 0  +
call sub_100D871  +
add esp 0Ch +
mov eax 80070057h +
inc esi  +
cmp esi ebx +
jb loc_100D0A5  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
push edi  +
push ebx  +
push [ebp+arg_0]  +
call sub_100D016  +
xor esi esi +
cmp eax esi +
jl loc_100D167  +
xor ecx ecx +
cmp edi esi +
jbe loc_100D11C  +
mov edx [ebx+ecx*4] +
cmp [edx+48h] esi +
jnz loc_100D11C  +
inc ecx  +
cmp ecx edi +
jb loc_100D10F  +
cmp ecx edi +
jnz loc_100D167  +
cmp [ebp+arg_0] esi +
jnz loc_100D167  +
push 3C2Ah  +
push esi  +
call sub_100D871  +
pop ecx  +
pop ecx  +
cmp edi esi +
jbe loc_100D162  +
mov eax [ebx+esi*4] +
test dword ptr [eax+20h] 400h +
jnz loc_100D15D  +
cmp dword ptr [eax+18h] 1 +
jnz loc_100D14D  +
mov eax [eax+28h] +
jmp loc_100D150  +
mov eax [eax+24h] +
push eax  +
push offset a1S_0  +
call sub_100D857  +
pop ecx  +
pop ecx  +
inc esi  +
cmp esi edi +
jb loc_100D136  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor ecx ecx +
cmp [ebp+arg_0] ecx +
jz loc_100D1AB  +
inc dword_1013FDC  +
cmp [ebp+arg_8] ecx +
jbe loc_100D1AB  +
push esi  +
mov eax [ebp+arg_4] +
mov esi [ebp+arg_C] +
lea eax [eax+ecx*4] +
mov edx [eax] +
mov [edx+40h] esi +
mov eax [eax] +
mov edx dword_1013FDC +
inc ecx  +
mov [eax+44h] edx +
cmp ecx [ebp+arg_8] +
jb loc_100D18B  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push 1  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push esi  +
call sub_100D173  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push esi  +
call sub_100CF7E  +
push [ebp+arg_8]  +
mov edi eax +
push [ebp+arg_4]  +
push esi  +
call sub_100D0EB  +
test edi edi +
jge loc_100D1EE  +
mov eax edi +
jmp loc_100D1F4  +
test esi esi +
jz loc_100D1F4  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100D173  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100CF7E  +
push [ebp+arg_8]  +
mov edx eax +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100D016  +
test edx edx +
jge loc_100D238  +
mov eax edx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
lea ecx [eax-20h] +
cmp cx 5Eh +
ja loc_100D259  +
xor eax eax +
jmp loc_100D39E  +
lea ecx [eax-3000h] +
cmp cx 36h +
ja loc_100D26D  +
xor eax eax +
inc eax  +
jmp loc_100D39E  +
lea ecx [eax-3041h] +
cmp cx 53h +
jbe loc_100D265  +
lea ecx [eax-30A1h] +
cmp cx 5Dh +
jbe loc_100D265  +
lea ecx [eax-3105h] +
cmp cx 27h +
jbe loc_100D265  +
lea ecx [eax-3131h] +
cmp cx 5Dh +
jbe loc_100D265  +
lea ecx [eax-3200h] +
mov edx 0FFh +
cmp cx dx +
jbe loc_100D265  +
lea ecx [eax-3300h] +
dec edx  +
cmp cx dx +
jbe loc_100D265  +
lea ecx [eax+5400h] +
mov edx 2BA3h +
cmp cx dx +
jbe loc_100D265  +
lea ecx [eax+2000h] +
mov edx 18FFh +
cmp cx dx +
jbe loc_100D265  +
lea ecx [eax+0FFh] +
cmp cx 5Dh +
jbe loc_100D265  +
lea ecx [eax+9Fh] +
cmp cx 3Eh +
jbe loc_100D252  +
mov ecx 0FFA0h +
cmp cx ax +
ja loc_100D30B  +
add ecx 1Eh +
cmp ax cx +
jbe loc_100D252  +
mov ecx 0FFC2h +
cmp cx ax +
ja loc_100D321  +
add ecx 5 +
cmp ax cx +
jbe loc_100D252  +
mov ecx 0FFCAh +
cmp cx ax +
ja loc_100D337  +
add ecx 5 +
cmp ax cx +
jbe loc_100D252  +
mov ecx 0FFD2h +
cmp cx ax +
ja loc_100D34D  +
add ecx 5 +
cmp ax cx +
jbe loc_100D252  +
lea ecx [eax+26h] +
cmp cx 2 +
jbe loc_100D252  +
lea ecx [eax+20h] +
cmp cx 6 +
jbe loc_100D265  +
lea ecx [eax-4E00h] +
mov edx 51A5h +
cmp cx dx +
jbe loc_100D265  +
lea ecx [eax+700h] +
mov edx 12Dh +
cmp cx dx +
jbe loc_100D265  +
add eax 1D0h +
mov cx 1Fh +
cmp cx ax +
sbb eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
call ds:GetConsoleOutputCP  +
cmp eax 3A4h +
jz loc_100D3CC  +
cmp eax 3A8h +
jz loc_100D3CC  +
cmp eax 3B4h +
jbe loc_100D3C9  +
cmp eax 3B6h +
jbe loc_100D3CC  +
xor eax eax +
retn   +
xor eax eax +
inc eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_8] +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
mov edi [ebp+arg_0] +
mov [eax] ebx +
movzx esi word ptr [edi] +
mov [ebp+var_4] ebx +
mov [ebp+var_8] ebx +
cmp si bx +
jz loc_100D463  +
inc [ebp+var_8]  +
push esi  +
call sub_100D241  +
test eax eax +
jz loc_100D415  +
add [ebp+var_4] 2 +
mov eax [ebp+var_4] +
cmp eax [ebp+arg_4] +
jnb loc_100D441  +
mov ebx [ebp+var_8] +
jmp loc_100D441  +
inc [ebp+var_4]  +
mov eax [ebp+var_4] +
cmp eax [ebp+arg_4] +
jnb loc_100D441  +
movzx eax si +
cmp eax 9 +
jl loc_100D441  +
cmp eax 0Ah +
jle loc_100D437  +
cmp eax 0Dh +
jz loc_100D437  +
cmp eax 20h +
jnz loc_100D441  +
mov ebx [ebp+var_8] +
dec ebx  +
cmp si 0Ah +
jz loc_100D455  +
mov eax [ebp+arg_4] +
cmp [ebp+var_4] eax +
ja loc_100D45F  +
inc edi  +
inc edi  +
movzx esi word ptr [edi] +
test si si +
jnz loc_100D3F7  +
jmp loc_100D463  +
mov eax [ebp+arg_8] +
mov [eax] ebx +
xor eax eax +
inc eax  +
jmp loc_100D465  +
test ebx ebx +
jnz loc_100D455  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+NumberOfCharsWritten] +
push edi  +
mov edi [ebp+arg_8] +
mov eax edi +
cmp edi 2000h +
jb loc_100D48D  +
mov eax 2000h +
push 0  +
lea ecx [ebp+NumberOfCharsWritten] +
push ecx  +
push eax  +
push esi  +
push [ebp+hConsoleOutput]  +
call ds:WriteConsoleW  +
test eax eax +
jz loc_100D4A6  +
xor eax eax +
jmp loc_100D4C7  +
call ds:GetLastError  +
test eax eax +
jz loc_100D4BE  +
jle loc_100D4C3  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100D4C3  +
mov eax 80004005h +
test eax eax +
jl loc_100D4D5  +
mov ecx [ebp+NumberOfCharsWritten] +
cmp ecx edi +
ja loc_100D4D5  +
sub edi ecx +
lea esi [esi+ecx*2] +
jnz loc_100D47E  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_8] +
test ecx ecx +
jz loc_100D52B  +
mov eax [ebp+arg_4] +
cmp eax 7FFFFFFFh +
ja loc_100D52B  +
push edi  +
xor edi edi +
mov edx eax +
test eax eax +
jz loc_100D510  +
cmp byte ptr [ecx] 0 +
jz loc_100D50C  +
inc ecx  +
dec edx  +
jnz loc_100D503  +
test edx edx +
jnz loc_100D515  +
mov edi 80070057h +
test esi esi +
jz loc_100D526  +
test edi edi +
jl loc_100D523  +
sub eax edx +
mov [esi] eax +
jmp loc_100D526  +
and dword ptr [esi] 0 +
mov eax edi +
pop edi  +
jmp loc_100D530  +
mov eax 80070057h +
test eax eax +
jge loc_100D53B  +
test esi esi +
jz loc_100D53B  +
and dword ptr [esi] 0 +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_8] +
test ecx ecx +
jz loc_100D591  +
mov eax [ebp+arg_4] +
cmp eax 7FFFFFFFh +
ja loc_100D591  +
push edi  +
xor edi edi +
mov edx eax +
test eax eax +
jz loc_100D576  +
cmp [ecx] di +
jz loc_100D572  +
inc ecx  +
inc ecx  +
dec edx  +
jnz loc_100D568  +
test edx edx +
jnz loc_100D57B  +
mov edi 80070057h +
test esi esi +
jz loc_100D58C  +
test edi edi +
jl loc_100D589  +
sub eax edx +
mov [esi] eax +
jmp loc_100D58C  +
and dword ptr [esi] 0 +
mov eax edi +
pop edi  +
jmp loc_100D596  +
mov eax 80070057h +
test eax eax +
jge loc_100D5A1  +
test esi esi +
jz loc_100D5A1  +
and dword ptr [esi] 0 +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
mov [ebp+var_4] edi +
cmp esi edi +
jnz loc_100D5C8  +
mov [ebp+arg_0] 1 +
jmp loc_100D60D  +
lea eax [ebp+var_4] +
push eax  +
push 7FFFFFFFh  +
push esi  +
call sub_100D545  +
cmp eax edi +
mov [ebp+arg_0] eax +
jl loc_100D60D  +
push ebx  +
mov ebx [ebp+var_4] +
cmp [ebp+arg_4] edi +
jz loc_100D5F0  +
call sub_100D3A7  +
test eax eax +
jnz loc_100D624  +
and [ebp+arg_0] 0 +
mov edi ebx +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_100D5FF  +
mov [eax] edi +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_100D60C  +
and [ebp+arg_0] 0 +
mov [eax] ebx +
pop ebx  +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
push eax  +
call sub_100D241  +
inc edi  +
test eax eax +
jz loc_100D622  +
inc edi  +
inc esi  +
inc esi  +
movzx eax word ptr [esi] +
test ax ax +
jnz loc_100D616  +
jmp loc_100D5F6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
push edi  +
xor edi edi +
push 0FFFFFFF5h  +
mov [ebp+var_4] edi +
call ds:GetStdHandle  +
mov ebx eax +
mov [ebp+hFile] ebx +
cmp ebx 0FFFFFFFFh +
jz loc_100D77C  +
cmp ebx edi +
jz loc_100D77C  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+dwBytes]  +
push [ebp+NumberOfCharsWritten]  +
call sub_100D5AB  +
mov esi eax +
test esi esi +
jl loc_100D7AA  +
push ebx  +
call sub_100E805  +
test eax eax +
jz loc_100D6BF  +
push [ebp+var_4]  +
push [ebp+NumberOfCharsWritten]  +
push ebx  +
call sub_100D471  +
test eax eax +
jz loc_100D69B  +
xor esi esi +
jmp loc_100D7AA  +
call ds:GetLastError  +
test eax eax +
jz loc_100D6B3  +
jle loc_100D6B8  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100D6B8  +
mov eax 80004005h +
mov esi eax +
jmp loc_100D7AA  +
lea eax [ebp+dwBytes] +
push eax  +
mov eax [ebp+var_4] +
push 2  +
pop ecx  +
inc eax  +
mul  ecx +
push edx  +
push eax  +
call sub_100BD73  +
mov esi eax +
test esi esi +
jl loc_100D7AA  +
push [ebp+dwBytes]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov edi eax +
test edi edi +
jnz loc_100D6FF  +
mov esi 8007000Eh +
jmp loc_100D796  +
push edi  +
push [ebp+NumberOfCharsWritten]  +
mov byte ptr [edi] 0 +
call ds:CharToOemW  +
mov ebx 80070000h +
test eax eax +
jnz loc_100D735  +
call ds:GetLastError  +
test eax eax +
jz loc_100D72A  +
jle loc_100D72F  +
and eax 0FFFFh +
or eax ebx +
jmp loc_100D72F  +
mov eax 80004005h +
mov esi eax +
test eax eax +
jl loc_100D796  +
lea eax [ebp+NumberOfCharsWritten] +
push eax  +
push [ebp+dwBytes]  +
push edi  +
call sub_100D4E0  +
mov esi eax +
test esi esi +
jl loc_100D796  +
xor esi esi +
push esi  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push [ebp+NumberOfCharsWritten]  +
push edi  +
push [ebp+hFile]  +
call ds:WriteFile  +
test eax eax +
jnz loc_100D796  +
call ds:GetLastError  +
cmp eax esi +
jz loc_100D775  +
jle loc_100D794  +
and eax 0FFFFh +
or eax ebx +
jmp loc_100D794  +
mov eax 80004005h +
jmp loc_100D794  +
call ds:GetLastError  +
cmp eax edi +
jle loc_100D6B8  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
test edi edi +
jz loc_100D7AA  +
push edi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+NumberOfCharsWritten] 0 +
push esi  +
push edi  +
lea eax [ebp+Arguments] +
push eax  +
push 400h  +
lea eax [ebp+NumberOfCharsWritten] +
push eax  +
push 0  +
push 0  +
push [ebp+lpSource]  +
push 500h  +
call ds:FormatMessageW  +
mov esi [ebp+arg_8] +
mov [ebp+lpSource] eax +
test eax eax +
jnz loc_100D80C  +
call ds:GetLastError  +
test eax eax +
jz loc_100D805  +
jle loc_100D815  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100D815  +
mov eax 80004005h +
jmp loc_100D815  +
push [ebp+NumberOfCharsWritten]  +
push esi  +
call sub_100D633  +
mov edi eax +
test esi esi +
jz loc_100D820  +
mov eax [ebp+lpSource] +
mov [esi] eax +
cmp [ebp+NumberOfCharsWritten] 0 +
jz loc_100D82F  +
push [ebp+NumberOfCharsWritten]  +
call ds:LocalFree  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
lea eax [ebp+Arguments] +
push eax  +
push [ebp+lpSource]  +
call sub_100D7B8  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
lea eax [ebp+Arguments] +
push eax  +
push [ebp+lpSource]  +
call sub_100D7B8  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 804h +
mov eax dword_1013B58 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
push 400h  +
lea eax [ebp+Source] +
push eax  +
push [ebp+uID]  +
call sub_100C0AC  +
test eax eax +
jl loc_100D8B3  +
push esi  +
lea eax [ebp+Arguments] +
push eax  +
lea eax [ebp+Source] +
push eax  +
call sub_100D7B8  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_100B071  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+NumberOfCharsWritten]  +
push 0  +
call sub_100D633  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
xor ebx ebx +
push esi  +
mov [ebp+NumberOfCharsWritten] ebx +
mov [ebp+hLibModule] ebx +
cmp [ebp+lpLibFileName] ebx +
jnz loc_100D914  +
mov esi 1000h +
cmp dword_1013FE0 ebx +
jz loc_100D944  +
push dword ptr [ebp+Arguments]  +
push 3B64h  +
push ebx  +
call sub_100D871  +
add esp 0Ch +
jmp loc_100D951  +
push [ebp+lpLibFileName]  +
mov esi 800h +
call ds:LoadLibraryW  +
mov [ebp+hLibModule] eax +
cmp eax ebx +
jnz loc_100D8F9  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_100D93D  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
jmp loc_100D9DC  +
push 3B61h  +
push ebx  +
call sub_100D871  +
pop ecx  +
pop ecx  +
push edi  +
push ebx  +
mov edi 400h +
push edi  +
lea eax [ebp+NumberOfCharsWritten] +
push eax  +
push ebx  +
push dword ptr [ebp+Arguments]  +
or esi 300h +
push [ebp+hLibModule]  +
push esi  +
mov esi ds:FormatMessageW +
call esi  +
cmp [ebp+NumberOfCharsWritten] ebx +
jnz loc_100D994  +
cmp [ebp+lpLibFileName] ebx +
jz loc_100D99E  +
push ebx  +
push edi  +
lea eax [ebp+NumberOfCharsWritten] +
push eax  +
push ebx  +
push dword ptr [ebp+Arguments]  +
push ebx  +
push 1300h  +
call esi  +
cmp [ebp+NumberOfCharsWritten] ebx +
jz loc_100D99E  +
push [ebp+NumberOfCharsWritten]  +
call sub_100D8C5  +
jmp loc_100D9AB  +
push 3B63h  +
push ebx  +
call sub_100D871  +
pop ecx  +
pop ecx  +
mov eax dword ptr [ebp+Arguments] +
and eax 0FFFFh +
pop edi  +
cmp eax 5 +
jnz loc_100D9DA  +
lea eax [ebp+var_C] +
push eax  +
push ebx  +
call sub_100FD63  +
test eax eax +
jnz loc_100D9DA  +
cmp [ebp+var_C] 1 +
jnz loc_100D9DA  +
push 3B62h  +
push ebx  +
call sub_100D871  +
pop ecx  +
pop ecx  +
xor esi esi +
cmp [ebp+hLibModule] ebx +
jz loc_100D9EA  +
push [ebp+hLibModule]  +
call ds:FreeLibrary  +
cmp [ebp+NumberOfCharsWritten] ebx +
jz loc_100D9F8  +
push [ebp+NumberOfCharsWritten]  +
call ds:LocalFree  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_C] +
and eax 80000001h +
push ebx  +
push edi  +
jns loc_100DA1C  +
dec eax  +
or eax 0FFFFFFFEh +
inc eax  +
sub [ebp+arg_C] eax +
mov edi [ebp+arg_8] +
cmp [ebp+arg_C] edi +
jg loc_100DA2E  +
mov [ebp+arg_C] 4Fh +
push 800h  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov ebx eax +
mov [ebp+var_4] ebx +
test ebx ebx +
jnz loc_100DA57  +
mov [ebp+arg_0] 8007000Eh +
jmp loc_100DB3B  +
push [ebp+arg_0]  +
xor eax eax +
push 400h  +
push ebx  +
mov [ebx] ax +
call sub_1007D23  +
mov [ebp+arg_0] eax +
test eax eax +
jl loc_100DB2B  +
cmp [ebp+arg_4] edi +
push esi  +
jge loc_100DA94  +
mov esi edi +
sub esi [ebp+arg_4] +
push offset asc_1001974  +
call sub_100D8C5  +
dec esi  +
jnz loc_100DA80  +
mov eax [ebp+arg_C] +
sub eax edi +
jmp loc_100DAA4  +
push offset asc_1001974  +
call sub_100D8C5  +
mov eax [ebp+arg_C] +
sub eax [ebp+arg_4] +
cmp word ptr [ebx] 0 +
mov edi ebx +
jz loc_100DB2A  +
lea ecx [ebp+arg_4] +
push ecx  +
push eax  +
push edi  +
call sub_100D3D5  +
push edi  +
test eax eax +
jz loc_100DB1E  +
mov eax [ebp+arg_4] +
lea esi [edi+eax*2] +
movzx ebx word ptr [esi] +
xor eax eax +
mov [esi] ax +
call sub_100D8C5  +
mov edi esi +
mov [esi] bx +
movzx eax word ptr [edi] +
cmp eax 9 +
jl loc_100DAED  +
cmp eax 0Ah +
jle loc_100DAEB  +
cmp eax 0Dh +
jz loc_100DAEB  +
cmp eax 20h +
jnz loc_100DAED  +
inc edi  +
inc edi  +
push offset asc_10017A4  +
call sub_100D8C5  +
cmp [ebp+arg_8] 0 +
jle loc_100DB0D  +
mov esi [ebp+arg_8] +
push offset asc_1001974  +
call sub_100D8C5  +
dec esi  +
jnz loc_100DB00  +
mov eax [ebp+arg_C] +
sub eax [ebp+arg_8] +
cmp word ptr [edi] 0 +
mov ebx [ebp+var_4] +
jnz loc_100DAAC  +
jmp loc_100DB2A  +
push offset a1S_1  +
call sub_100D857  +
pop ecx  +
pop ecx  +
pop esi  +
push ebx  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax [ebp+arg_0] +
pop edi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_8] +
and dword ptr [edx] 0 +
mov ecx [ebp+arg_0] +
jmp loc_100DB63  +
cmp ax [ebp+arg_4] +
jnz loc_100DB61  +
inc dword ptr [edx]  +
inc ecx  +
inc ecx  +
movzx eax word ptr [ecx] +
test ax ax +
jnz loc_100DB59  +
xor eax eax +
cmp eax [edx] +
sbb eax eax +
inc eax  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
lea eax [ebp+pvarg] +
push eax  +
xor esi esi +
call ds:VariantInit  +
cmp [ebp+arg_0] esi +
jnz loc_100DB9C  +
mov eax [ebp+arg_4] +
and [eax] esi +
jmp loc_100DBD7  +
push [ebp+arg_0]  +
call ds:SysAllocString  +
mov dword ptr [ebp+pvarg.anonymous_0+8] eax +
test eax eax +
jnz loc_100DBB3  +
mov esi 8007000Eh +
jmp loc_100DBD7  +
push 8  +
pop eax  +
push 13h  +
mov word ptr [ebp+pvarg.anonymous_0] ax +
push 0  +
lea eax [ebp+pvarg] +
push eax  +
push eax  +
call ds:VariantChangeType  +
mov esi eax +
test esi esi +
jl loc_100DBD7  +
mov eax [ebp+arg_4] +
mov ecx dword ptr [ebp+pvarg.anonymous_0+8] +
mov [eax] ecx +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
shr esi 1 +
jz loc_100DC17  +
test [ebp+arg_8] 1000h +
jz loc_100DC17  +
mov edx [ebp+arg_4] +
lea eax [edi+ecx*2] +
mov [edx] eax +
mov edx esi +
sub edx ecx +
xor ecx ecx +
mov [ebx] edx +
mov [eax] cx +
test [ebp+arg_8] 400h +
jz loc_100DC5F  +
mov eax [ebp+arg_8] +
push [ebp+arg_0]  +
and eax 0FFh +
push eax  +
push edi  +
mov [ebp+var_4] eax +
call memset  +
add esp 0Ch +
cmp [ebp+var_4] 0 +
jnz loc_100DC47  +
mov eax [ebp+arg_4] +
mov [eax] edi +
mov [ebx] esi +
jmp loc_100DC5F  +
test esi esi +
jbe loc_100DC78  +
mov ecx [ebp+arg_4] +
lea eax [edi+esi*2-2] +
mov [ecx] eax +
xor ecx ecx +
mov dword ptr [ebx] 1 +
mov [eax] cx +
test esi esi +
jbe loc_100DC78  +
test [ebp+arg_8] 800h +
jz loc_100DC78  +
mov eax [ebp+arg_4] +
mov [eax] edi +
xor eax eax +
mov [ebx] esi +
mov [edi] ax +
xor eax eax +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov edx [ebp+arg_14] +
push esi  +
xor esi esi +
and edx 100h +
push edi  +
mov edi [ebp+arg_4] +
mov eax 80070057h +
jz loc_100DCB8  +
mov ecx [ebp+arg_0] +
test ecx ecx +
jnz loc_100DCAC  +
test edi edi +
jnz loc_100DCB4  +
cmp edi 7FFFFFFFh +
jbe loc_100DCCB  +
mov esi eax +
jmp loc_100DCCB  +
xor esi esi +
test edi edi +
jz loc_100DCC6  +
cmp edi 7FFFFFFFh +
jbe loc_100DCC8  +
mov esi eax +
mov ecx [ebp+arg_0] +
test esi esi +
jl loc_100DD48  +
push ebx  +
xor esi esi +
mov ebx edi +
mov [ebp+arg_4] ecx +
mov [ebp+var_4] ebx +
cmp edx esi +
jz loc_100DCEA  +
cmp [ebp+arg_8] esi +
jnz loc_100DCEA  +
mov [ebp+arg_8] offset dword_10017A0 +
test [ebp+arg_14] 0FFFFE000h +
jz loc_100DD50  +
mov esi eax +
test edi edi +
jz loc_100DCFE  +
xor eax eax +
mov [ecx] ax +
test [ebp+arg_14] 1C00h +
jz loc_100DD26  +
test edi edi +
jz loc_100DD26  +
push [ebp+arg_14]  +
lea eax [ebp+arg_4] +
push eax  +
lea eax [edi+edi] +
mov edi [ebp+arg_0] +
push eax  +
lea ebx [ebp+var_4] +
xor ecx ecx +
call sub_100DBED  +
mov ebx [ebp+var_4] +
test esi esi +
jge loc_100DD32  +
cmp esi 8007007Ah +
jnz loc_100DD47  +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_100DD3E  +
mov ecx [ebp+arg_4] +
mov [eax] ecx +
mov eax [ebp+arg_10] +
test eax eax +
jz loc_100DD47  +
mov [eax] ebx +
pop ebx  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 18h  +
test edi edi +
jnz loc_100DD69  +
mov edx [ebp+arg_8] +
cmp [edx] di +
jz loc_100DD32  +
mov esi ecx +
neg esi  +
sbb esi esi +
and esi 23h +
add esi eax +
jmp loc_100DCFE  +
and [ebp+arg_4] 0 +
push 7FFFFFFEh  +
lea eax [ebp+arg_4] +
push eax  +
mov eax [ebp+arg_8] +
mov edx edi +
call sub_100502C  +
mov ecx [ebp+arg_0] +
mov esi eax +
mov eax [ebp+arg_4] +
mov ebx edi +
sub ebx eax +
lea ecx [ecx+eax*2] +
mov [ebp+arg_4] ecx +
mov [ebp+var_4] ebx +
test esi esi +
jl loc_100DCFE  +
mov eax [ebp+arg_14] +
test eax 200h +
jz loc_100DD32  +
cmp ebx 1 +
jbe loc_100DD32  +
lea ecx [ebx+ebx] +
cmp ecx 2 +
jbe loc_100DD32  +
add ecx 0FFFFFFFEh +
and eax 0FFh +
push ecx  +
push eax  +
mov eax [ebp+arg_4] +
add eax 2 +
push eax  +
call memset  +
add esp 0Ch +
jmp loc_100DD32  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
mov eax dword_1013B58 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov [ebp+var_18] eax +
mov eax [ebp+arg_4] +
push ebx  +
push edi  +
mov [ebp+var_20] eax +
mov dword ptr [ebp+var_14] 3Ah +
xor eax eax +
lea edi [ebp+var_10] +
stos   +
stos   +
push 800h  +
push 0  +
stos   +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov ebx eax +
test ebx ebx +
jnz loc_100DE30  +
mov [ebp+var_1C] 8007000Eh +
jmp loc_100DF15  +
push esi  +
push 8  +
push ebx  +
push 1Eh  +
xor eax eax +
mov esi 400h +
push esi  +
mov [ebx] ax +
call ds:GetLocaleInfoW  +
cmp eax 1 +
jle loc_100DE63  +
push ebx  +
push 8  +
lea eax [ebp+var_14] +
push eax  +
call sub_1007D23  +
mov [ebp+var_1C] eax +
test eax eax +
jl loc_100DF04  +
push [ebp+var_18]  +
push esi  +
push ebx  +
call sub_1007D23  +
mov [ebp+var_1C] eax +
test eax eax +
jl loc_100DF04  +
mov esi ds:wcstok +
lea eax [ebp+var_14] +
push eax  +
push ebx  +
call esi  +
and [ebp+var_18] 0 +
pop ecx  +
pop ecx  +
lea edi [ebp+var_2C] +
test eax eax +
jz loc_100DEB6  +
push edi  +
push eax  +
call sub_100DB7B  +
inc [ebp+var_18]  +
add edi 4 +
mov [ebp+var_1C] eax +
test eax eax +
jl loc_100DF04  +
lea eax [ebp+var_14] +
push eax  +
push 0  +
call esi  +
cmp [ebp+var_18] 3 +
pop ecx  +
pop ecx  +
jb loc_100DE8E  +
mov eax [ebp+var_18] +
dec eax  +
jz loc_100DEF9  +
dec eax  +
jz loc_100DEE4  +
dec eax  +
jz loc_100DECB  +
mov [ebp+var_1C] 80070057h +
jmp loc_100DF04  +
mov cx word ptr [ebp+var_2C] +
mov eax [ebp+var_20] +
mov [eax+64h] cx +
mov cx [ebp+var_28] +
mov [eax+66h] cx +
mov cx [ebp+var_24] +
jmp loc_100DEF3  +
mov cx word ptr [ebp+var_2C] +
mov eax [ebp+var_20] +
mov [eax+66h] cx +
mov cx [ebp+var_28] +
mov [eax+68h] cx +
jmp loc_100DF04  +
mov ax word ptr [ebp+var_2C] +
mov ecx [ebp+var_20] +
mov [ecx+68h] ax +
push ebx  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop esi  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_1C] +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_100B071  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
and [ebp+lpMem] 0 +
push ebx  +
push edi  +
push 800h  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov ebx eax +
test ebx ebx +
jnz loc_100DF60  +
mov edi 8007000Eh +
jmp loc_100DFEC  +
push esi  +
push [ebp+arg_4]  +
mov esi 400h +
push esi  +
xor eax eax +
push ebx  +
mov [ebx] ax +
call sub_1007D23  +
mov edi eax +
test edi edi +
jl loc_100DFDB  +
lea eax [ebp+lpMem] +
push eax  +
mov eax [ebp+arg_0] +
push eax  +
call dword ptr [eax+4]  +
mov edi eax +
test edi edi +
jl loc_100DFDB  +
jnz loc_100DFB0  +
push offset asc_1001974  +
push esi  +
push ebx  +
call sub_1007D5D  +
mov edi eax +
test edi edi +
jl loc_100DFDB  +
push [ebp+lpMem]  +
push esi  +
push ebx  +
call sub_1007D5D  +
mov edi eax +
test edi edi +
jl loc_100DFDB  +
lea eax [ebp+pdateOut] +
push eax  +
push 0  +
push esi  +
push ebx  +
call ds:VarDateFromStr  +
mov edi eax +
test edi edi +
jl loc_100DFDB  +
mov eax [ebp+arg_8] +
fld  [ebp+pdateOut] +
add eax 5Ch +
push eax  +
push ecx  +
push ecx  +
fstp  [esp+2Ch+var_2C] +
call ds:VariantTimeToSystemTime  +
mov edi eax +
push ebx  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop esi  +
cmp [ebp+lpMem] 0 +
jz loc_100E004  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax edi +
pop edi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_0]  +
xor edi edi +
mov [ebp+var_4] edi +
mov [ebp+lpMem] edi +
call sub_100C036  +
mov esi [ebp+arg_4] +
lea ebx [esi+5Ch] +
mov [ebx] eax +
cmp eax edi +
jnz loc_100E043  +
mov [ebp+var_4] 8007000Eh +
jmp loc_100E0E1  +
mov eax [esi+20h] +
test al 20h +
jz loc_100E0BB  +
push 800h  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+lpMem] eax +
cmp eax edi +
jnz loc_100E06D  +
mov [ebp+var_4] 8007000Eh +
jmp loc_100E0C9  +
xor ecx ecx +
mov [eax] cx +
push dword ptr [esi+2Ch]  +
push 400h  +
push eax  +
call sub_1007D23  +
cmp eax edi +
mov [ebp+var_4] eax +
jl loc_100E0C9  +
mov esi ds:wcstok +
mov edi offset asc_1001B88 +
push edi  +
push [ebp+lpMem]  +
jmp loc_100E0AA  +
push eax  +
push dword ptr [ebx]  +
call ds:__imp__wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100E0C9  +
push edi  +
push 0  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100E098  +
mov [ebp+var_4] 80070057h +
jmp loc_100E0C9  +
test al al +
jns loc_100E0E1  +
push edi  +
push ebx  +
call sub_100E869  +
mov [ebp+var_4] eax +
cmp [ebp+lpMem] 0 +
jz loc_100E0E1  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
and [ebp+lpMem] 0 +
and [ebp+var_C] 0 +
push ebx  +
push esi  +
push [ebp+arg_4]  +
call sub_100C036  +
mov esi ds:GetProcessHeap +
mov [ebp+lpMem] eax +
test eax eax +
jnz loc_100E121  +
mov ebx 8007000Eh +
jmp loc_100E242  +
push edi  +
mov edi [ebp+arg_8] +
test dword ptr [edi+20h] 8 +
jnz loc_100E14F  +
push 1000h  +
xor ebx ebx +
push ebx  +
call esi  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+arg_8] eax +
cmp eax ebx +
jz loc_100E166  +
mov [ebp+arg_4] 800h +
jmp loc_100E18A  +
push 800h  +
push 0  +
call esi  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+arg_8] eax +
test eax eax +
jnz loc_100E170  +
mov ebx 8007000Eh +
jmp loc_100E22D  +
lea eax [ebp+var_C] +
push eax  +
push 20h  +
push dword ptr [edi+2Ch]  +
mov [ebp+arg_4] 400h +
call sub_100DB49  +
inc [ebp+var_C]  +
xor ebx ebx +
mov eax [ebp+arg_8] +
mov [ebp+var_8] eax +
mov [ebp+var_10] ebx +
jmp loc_100E197  +
xor ebx ebx +
push ebx  +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+lpMem]  +
push [ebp+arg_4]  +
push [ebp+var_8]  +
call sub_100DC84  +
cmp eax ebx +
jge loc_100E1B5  +
mov [ebp+var_10] eax +
cmp [ebp+arg_4] ebx +
jnz loc_100E1C3  +
mov [ebp+var_10] 8007007Ah +
jmp loc_100E1D2  +
add [ebp+var_8] 2 +
mov ecx [ebp+var_8] +
xor eax eax +
dec [ebp+arg_4]  +
mov [ecx] ax +
test byte ptr [edi+20h] 8 +
jz loc_100E1DD  +
dec [ebp+var_C]  +
jz loc_100E208  +
cmp [ebp+lpMem] ebx +
jz loc_100E1F2  +
push [ebp+lpMem]  +
push ebx  +
call esi  +
push eax  +
call ds:HeapFree  +
mov [ebp+lpMem] ebx +
lea eax [ebp+lpMem] +
push eax  +
mov eax [ebp+arg_0] +
push eax  +
call dword ptr [eax+4]  +
mov ebx eax +
test ebx ebx +
jl loc_100E22D  +
cmp ebx 1 +
jnz loc_100E195  +
mov ebx [ebp+var_10] +
test ebx ebx +
jl loc_100E22D  +
mov ecx [ebp+arg_8] +
and [ebp+arg_8] 0 +
lea eax [edi+5Ch] +
xor ebx ebx +
test byte ptr [edi+20h] 80h +
mov [eax] ecx +
jz loc_100E241  +
push 1  +
push eax  +
call sub_100E869  +
mov ebx eax +
cmp [ebp+arg_8] 0 +
jz loc_100E241  +
push [ebp+arg_8]  +
push 0  +
call esi  +
push eax  +
call ds:HeapFree  +
pop edi  +
cmp [ebp+lpMem] 0 +
jz loc_100E256  +
push [ebp+lpMem]  +
push 0  +
call esi  +
push eax  +
call ds:HeapFree  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
xor esi esi +
cmp [ebp+arg_8] 5Ch +
mov [ebp+lpMem] esi +
jnb loc_100E27F  +
mov eax 80070057h +
jmp loc_100E3BE  +
push edi  +
mov edi [ebp+arg_4] +
test byte ptr [edi+20h] 10h +
jz loc_100E294  +
xor eax eax +
inc eax  +
mov [edi+38h] eax +
mov dword_1013FE0 eax +
cmp [edi+1Ch] esi +
jz loc_100E3BB  +
cmp [edi+4Ch] esi +
jz loc_100E2AF  +
test dword ptr [edi+20h] 100h +
jnz loc_100E3BB  +
push ebx  +
mov ebx [ebp+arg_0] +
cmp [ebp+arg_10] esi +
jz loc_100E2D1  +
push [ebp+arg_C]  +
call sub_100C036  +
mov [ebp+lpMem] eax +
cmp eax esi +
jnz loc_100E319  +
mov esi 8007000Eh +
jmp loc_100E39E  +
lea eax [ebp+lpMem] +
push eax  +
push ebx  +
call dword ptr [ebx+4]  +
mov esi eax +
test esi esi +
jl loc_100E39E  +
cmp esi 1 +
jnz loc_100E319  +
test byte ptr [edi+20h] 2 +
jnz loc_100E39C  +
cmp [edi+18h] eax +
jnz loc_100E2FC  +
mov edi [edi+28h] +
jmp loc_100E2FF  +
mov edi [edi+24h] +
push edi  +
push 3C34h  +
push 0  +
call sub_100D871  +
add esp 0Ch +
mov esi 80070057h +
jmp loc_100E39E  +
mov eax [edi+1Ch] +
dec eax  +
jz loc_100E387  +
dec eax  +
jz loc_100E375  +
dec eax  +
jz loc_100E364  +
dec eax  +
jz loc_100E352  +
dec eax  +
jnz loc_100E39C  +
cmp [ebp+arg_8] 60h +
jz loc_100E338  +
mov esi 80004005h +
jmp loc_100E39E  +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+lpMem]  +
call sub_100DB7B  +
mov esi eax +
test esi esi +
jl loc_100E39E  +
mov eax [ebp+arg_8] +
mov [edi+5Ch] eax +
jmp loc_100E39C  +
cmp [ebp+arg_8] 6Ch +
jnz loc_100E331  +
push edi  +
push [ebp+lpMem]  +
push ebx  +
call sub_100DF2E  +
jmp loc_100E396  +
cmp [ebp+arg_8] 6Ch +
jnz loc_100E331  +
push edi  +
push [ebp+lpMem]  +
call sub_100DDDB  +
jmp loc_100E396  +
cmp [ebp+arg_8] 60h +
jnz loc_100E331  +
push edi  +
push [ebp+lpMem]  +
push ebx  +
call sub_100E0F0  +
jmp loc_100E396  +
cmp [ebp+arg_8] 60h +
jnz loc_100E331  +
push edi  +
push [ebp+lpMem]  +
call sub_100E011  +
mov esi eax +
test esi esi +
jl loc_100E39E  +
xor esi esi +
cmp [ebp+lpMem] 0 +
pop ebx  +
jz loc_100E3B7  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax esi +
jmp loc_100E3BD  +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+8] +
mov eax [edi+0Ch] +
cmp eax [edi+10h] +
jge loc_100E427  +
test eax eax +
jl loc_100E427  +
mov ecx [edi+14h] +
push esi  +
mov esi [ecx+eax*4] +
movzx eax word ptr [esi] +
push eax  +
push offset asc_1001E6C  +
call ds:wcschr  +
neg eax  +
pop ecx  +
sbb eax eax +
pop ecx  +
mov ecx [ebp+10h] +
neg eax  +
mov [ecx] eax +
push 0  +
pop eax  +
setnz al  +
lea eax [esi+eax*2] +
push eax  +
call sub_100C036  +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
pop esi  +
test eax eax +
jnz loc_100E420  +
mov eax 8007000Eh +
jmp loc_100E42A  +
inc dword ptr [edi+0Ch]  +
xor eax eax +
jmp loc_100E42A  +
xor eax eax +
inc eax  +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
mov eax [esi+0Ch] +
cmp eax [esi+10h] +
jge loc_100E485  +
mov ecx [esi+14h] +
mov eax [ecx+eax*4] +
movzx eax word ptr [eax] +
push eax  +
push offset asc_1001E6C  +
call ds:wcschr  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100E485  +
mov eax [esi+0Ch] +
mov ecx [esi+14h] +
push dword ptr [ecx+eax*4]  +
call sub_100C036  +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
test eax eax +
jnz loc_100E47E  +
mov eax 8007000Eh +
jmp loc_100E488  +
inc dword ptr [esi+0Ch]  +
xor eax eax +
jmp loc_100E488  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
jz loc_100E4AF  +
push dword ptr [ebp+8]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 18h  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov edx eax +
test edx edx +
jnz loc_100E4DB  +
mov eax 8007000Eh +
jmp loc_100E514  +
push edi  +
xor eax eax +
push 6  +
pop ecx  +
mov edi edx +
stos   +
mov eax [ebp+arg_0] +
mov [edx+10h] eax +
mov eax [ebp+arg_4] +
mov [edx+14h] eax +
mov eax [ebp+arg_8] +
mov dword ptr [edx] offset loc_100E3C8 +
mov dword ptr [edx+4] offset loc_100E434 +
mov dword ptr [edx+8] offset loc_100E492 +
mov dword ptr [edx+0Ch] 1 +
mov [eax] edx +
xor eax eax +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_100E564  +
mov eax [esi+0Ch] +
test eax eax +
jz loc_100E539  +
push eax  +
call ds:fclose  +
pop ecx  +
mov eax [esi+14h] +
push ebx  +
mov ebx ds:GetProcessHeap +
push edi  +
mov edi ds:HeapFree +
test eax eax +
jz loc_100E55A  +
push eax  +
push 0  +
call ebx  +
push eax  +
call edi  +
and dword ptr [esi+14h] 0 +
push esi  +
push 0  +
call ebx  +
push eax  +
call edi  +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi [ebx+14h] +
push edi  +
jmp loc_100E5C2  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100E583  +
sub eax edx +
sar eax 1 +
lea edi [esi+eax*2-2] +
jmp loc_100E5AD  +
movzx eax word ptr [edi] +
push eax  +
call ds:iswspace  +
pop ecx  +
test eax eax +
jz loc_100E5B1  +
xor eax eax +
mov [edi] ax +
dec edi  +
dec edi  +
cmp edi esi +
jnb loc_100E597  +
movzx eax word ptr [esi] +
test eax eax +
jz loc_100E5C2  +
cmp eax 23h +
jz loc_100E5C2  +
cmp eax 3Bh +
jnz loc_100E5F4  +
push dword ptr [ebx+0Ch]  +
push 400h  +
push esi  +
call ds:fgetws  +
add esp 0Ch +
test eax eax +
jnz loc_100E57E  +
push dword ptr [ebx+0Ch]  +
call ds:ferror  +
pop ecx  +
test eax eax +
jz loc_100E5FC  +
jle loc_100E5FF  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100E5FF  +
and dword ptr [ebx+18h] 0 +
xor eax eax +
jmp loc_100E5FF  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
mov eax [esi+14h] +
xor ecx ecx +
cmp cx [eax] +
jz loc_100E623  +
cmp [esi+18h] ecx +
jz loc_100E63A  +
push esi  +
call sub_100E56E  +
test eax eax +
jl loc_100E6C9  +
cmp eax 1 +
jz loc_100E6C9  +
mov ecx [esi+14h] +
push 5Bh  +
pop eax  +
cmp ax [ecx] +
jnz loc_100E676  +
mov eax ecx +
push edi  +
lea edi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_100E64B  +
sub eax edi +
sar eax 1 +
push 5Dh  +
lea eax [ecx+eax*2-2] +
pop ecx  +
pop edi  +
cmp cx [eax] +
jnz loc_100E66B  +
xor ecx ecx +
mov [eax] cx +
mov eax [esi+14h] +
inc eax  +
inc eax  +
and dword ptr [esi+10h] 0 +
jmp loc_100E6A0  +
push 3Dh  +
push ecx  +
call ds:wcschr  +
pop ecx  +
pop ecx  +
mov [esi+18h] eax +
test eax eax +
jz loc_100E696  +
xor ecx ecx +
mov [eax] cx +
add dword ptr [esi+18h] 2 +
and [esi+10h] ecx +
jmp loc_100E69D  +
mov dword ptr [esi+10h] 1 +
mov eax [esi+14h] +
mov ecx [ebp+10h] +
push eax  +
mov dword ptr [ecx] 1 +
call sub_100C036  +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
test eax eax +
jnz loc_100E6BF  +
mov eax 8007000Eh +
jmp loc_100E6C9  +
mov eax [esi+14h] +
xor ecx ecx +
mov [eax] cx +
xor eax eax +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
cmp dword ptr [esi+10h] 0 +
jnz loc_100E731  +
mov eax [esi+18h] +
test eax eax +
jz loc_100E706  +
mov dword ptr [esi+10h] 1 +
push eax  +
call sub_100C036  +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
test eax eax +
jnz loc_100E736  +
mov eax 8007000Eh +
jmp loc_100E743  +
mov eax [esi+14h] +
xor ecx ecx +
cmp cx [eax] +
jnz loc_100E71F  +
push esi  +
call sub_100E56E  +
test eax eax +
jl loc_100E743  +
cmp eax 1 +
jz loc_100E743  +
mov eax [esi+14h] +
push 5Bh  +
pop ecx  +
cmp cx [eax] +
jnz loc_100E6F0  +
mov dword ptr [esi+10h] 1 +
xor eax eax +
inc eax  +
jmp loc_100E743  +
mov eax [esi+14h] +
xor ecx ecx +
mov [eax] cx +
and [esi+18h] ecx +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx ds:GetProcessHeap +
push esi  +
push edi  +
push 1Ch  +
push 0  +
call ebx  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
test esi esi +
jnz loc_100E775  +
mov ebx 8007000Eh +
jmp loc_100E7F1  +
push 7  +
pop ecx  +
xor eax eax +
mov edi esi +
stos   +
push 800h  +
xor edi edi +
push edi  +
mov dword ptr [esi] offset loc_100E60B +
mov dword ptr [esi+4] offset loc_100E6D3 +
mov dword ptr [esi+8] offset sub_100E51D +
call ebx  +
push eax  +
call ds:HeapAlloc  +
mov [esi+14h] eax +
cmp eax edi +
jz loc_100E76E  +
xor ecx ecx +
push offset aR  +
push [ebp+arg_0]  +
mov [eax] cx +
mov [esi+18h] edi +
mov [esi+10h] edi +
call ds:_wfopen  +
pop ecx  +
pop ecx  +
mov [esi+0Ch] eax +
cmp eax edi +
jnz loc_100E7E6  +
call ds:_errno  +
mov eax [eax] +
cmp eax edi +
jle loc_100E7E2  +
and eax 0FFFFh +
or eax 80070000h +
mov ebx eax +
jmp loc_100E7ED  +
mov eax [ebp+arg_4] +
mov [eax] esi +
xor ebx ebx +
cmp ebx edi +
jge loc_100E7F7  +
push esi  +
call sub_100E51D  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+hConsoleHandle]  +
call ds:GetFileType  +
and eax 0FFFF7FFFh +
mov [ebp+Mode] eax +
cmp eax 2 +
jz loc_100E825  +
xor eax eax +
jmp locret_100E860  +
lea eax [ebp+Mode] +
push eax  +
push [ebp+hConsoleHandle]  +
call ds:GetConsoleMode  +
test eax eax +
jz loc_100E83A  +
xor eax eax +
jmp loc_100E857  +
call ds:GetLastError  +
test eax eax +
jz loc_100E852  +
jle loc_100E857  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100E857  +
mov eax 80004005h +
xor ecx ecx +
test eax eax +
setnl cl  +
mov eax ecx +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A7Ch +
mov eax dword_1013B58 +
xor eax ebp +
mov [ebp+var_4] eax +
or [ebp+hFindFile] 0FFFFFFFFh +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
xor edi edi +
push 800h  +
push edi  +
mov [ebp+var_A70] 1 +
mov [ebp+var_A6C] 400h +
mov [ebp+var_A74] edi +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+lpMem] eax +
cmp eax edi +
jnz loc_100E8D2  +
mov [ebp+var_A70] 8007000Eh +
jmp loc_100EB7E  +
xor ecx ecx +
push esi  +
mov [eax] cx +
mov esi [ebx] +
mov [ebp+var_A68] eax +
jmp loc_100EAF2  +
mov eax 100h +
push eax  +
lea ecx [ebp+var_814] +
push ecx  +
push eax  +
lea ecx [ebp+var_614] +
push ecx  +
push eax  +
lea eax [ebp+var_20C] +
push eax  +
push 3  +
lea eax [ebp+var_C] +
push eax  +
push esi  +
call _wsplitpath_s  +
add esp 24h +
lea eax [ebp+FindFileData] +
push eax  +
push esi  +
call ds:FindFirstFileW  +
mov [ebp+hFindFile] eax +
cmp eax 0FFFFFFFFh +
jz loc_100EA5A  +
mov ecx offset a_ +
lea eax [ebp+FindFileData.cFileName] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100E95F  +
cmp dx di +
jz loc_100E95B  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100E95F  +
add eax 4 +
add ecx 4 +
cmp dx di +
jnz loc_100E939  +
xor eax eax +
jmp loc_100E964  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax edi +
jz loc_100EA3D  +
mov ecx offset a__ +
lea eax [ebp+FindFileData.cFileName] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100E99D  +
cmp dx di +
jz loc_100E999  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100E99D  +
add eax 4 +
add ecx 4 +
cmp dx di +
jnz loc_100E977  +
xor eax eax +
jmp loc_100E9A2  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax edi +
jz loc_100EA3D  +
push offset dword_10017A0  +
lea eax [ebp+FindFileData.cFileName] +
push eax  +
lea eax [ebp+var_20C] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_414] +
push 104h  +
push eax  +
call _wmakepath_s  +
add esp 18h +
push edi  +
lea eax [ebp+var_A6C] +
push eax  +
lea eax [ebp+var_A68] +
push eax  +
lea eax [ebp+var_414] +
push eax  +
push [ebp+var_A6C]  +
push [ebp+var_A68]  +
call sub_100DC84  +
cmp eax edi +
mov [ebp+var_A70] eax +
jl loc_100EB4C  +
cmp [ebp+var_A6C] edi +
jz loc_100EB2A  +
inc [ebp+var_A74]  +
cmp [ebp+arg_4] edi +
jz loc_100EAFB  +
add [ebp+var_A68] 2 +
mov ecx [ebp+var_A68] +
xor eax eax +
dec [ebp+var_A6C]  +
mov [ecx] ax +
lea eax [ebp+FindFileData] +
push eax  +
push [ebp+hFindFile]  +
call ds:FindNextFileW  +
test eax eax +
jnz loc_100E92E  +
jmp loc_100EAD6  +
push 2Ah  +
push esi  +
call ds:wcschr  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100EAD6  +
push 3Fh  +
push esi  +
call ds:wcschr  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100EAD6  +
push edi  +
lea eax [ebp+var_A6C] +
push eax  +
lea eax [ebp+var_A68] +
push eax  +
push esi  +
push [ebp+var_A6C]  +
push [ebp+var_A68]  +
call sub_100DC84  +
cmp eax edi +
mov [ebp+var_A70] eax +
jl loc_100EB61  +
cmp [ebp+var_A6C] edi +
jz loc_100EB36  +
inc [ebp+var_A74]  +
cmp [ebp+arg_4] edi +
jz loc_100EAFB  +
add [ebp+var_A68] 2 +
mov ecx [ebp+var_A68] +
xor eax eax +
dec [ebp+var_A6C]  +
mov [ecx] ax +
cmp [ebp+arg_4] edi +
jz loc_100EAFB  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx di +
jnz loc_100EAE0  +
sub eax edx +
sar eax 1 +
lea esi [esi+eax*2+2] +
cmp [esi] di +
jnz loc_100E8E5  +
mov eax [ebx] +
cmp eax edi +
jz loc_100EB12  +
push eax  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov [ebx] edi +
cmp [ebp+var_A74] edi +
jz loc_100EB42  +
mov eax [ebp+lpMem] +
mov [ebx] eax +
mov [ebp+lpMem] edi +
jmp loc_100EB4C  +
mov [ebp+var_A70] 8007007Ah +
jmp loc_100EB4C  +
mov [ebp+var_A70] 8007007Ah +
jmp loc_100EB61  +
mov [ebp+var_A70] 80070002h +
cmp [ebp+hFindFile] 0FFFFFFFFh +
jz loc_100EB61  +
push [ebp+hFindFile]  +
call ds:FindClose  +
pop esi  +
cmp [ebp+lpMem] edi +
jz loc_100EB7E  +
push [ebp+lpMem]  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_A70] +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_100B071  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_8]  +
mov esi eax +
push [ebp+arg_4]  +
xor ebx ebx +
dec esi  +
push esi  +
push edi  +
call _vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_100EBCD  +
cmp eax esi +
ja loc_100EBCD  +
jz loc_100EBD2  +
jmp loc_100EBDA  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
mov eax esi +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100EBE3  +
mov [ecx] eax +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+wLanguage]  +
push 1  +
push offset Type  +
push [ebp+hModule]  +
call ds:FindResourceExW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+hModule]  +
call sub_100EBF0  +
test eax eax +
jz loc_100EC2E  +
push eax  +
push [ebp+hModule]  +
call ds:LoadResource  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+hModule] 0 +
push esi  +
jz loc_100EC8C  +
cmp [ebp+arg_4] 0 +
jz loc_100EC8C  +
push [ebp+hModule]  +
call sub_100EC11  +
push [ebp+arg_4]  +
mov esi eax +
call sub_100EC11  +
test esi esi +
jz loc_100EC84  +
test eax eax +
jz loc_100EC84  +
mov ecx 0FECDFECDh +
cmp [esi] ecx +
jnz loc_100EC8C  +
cmp [eax] ecx +
jnz loc_100EC8C  +
push edi  +
push 4  +
lea edi [eax+1Ch] +
add esi 1Ch +
pop ecx  +
xor eax eax +
cmps   +
pop edi  +
jnz loc_100EC8C  +
inc eax  +
jmp loc_100EC8E  +
push 0Dh  +
call ds:SetLastError  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
xor esi esi +
push edi  +
cmp [ebp+lpLibFileName] esi +
jnz loc_100ECAB  +
xor eax eax +
jmp loc_100ED19  +
cmp [ebp+arg_4] esi +
jz loc_100ED06  +
push esi  +
push esi  +
push 3  +
push esi  +
push 5  +
push 80000000h  +
push [ebp+lpLibFileName]  +
call ds:CreateFileW  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jz loc_100ECA7  +
push esi  +
push esi  +
push esi  +
push 8  +
push esi  +
push edi  +
call ds:CreateFileMappingW  +
push edi  +
mov edi ds:CloseHandle +
mov ebx eax +
call edi  +
cmp ebx esi +
jz loc_100ECA7  +
push esi  +
push esi  +
push esi  +
push 1  +
push ebx  +
call ds:MapViewOfFile  +
push ebx  +
mov [ebp+lpLibFileName] eax +
call edi  +
mov eax [ebp+lpLibFileName] +
cmp eax esi +
jz loc_100ECA7  +
or eax 1 +
jmp loc_100ED19  +
xor eax eax +
cmp [ebp+arg_8] esi +
setnz al  +
push eax  +
push esi  +
push [ebp+lpLibFileName]  +
call ds:LoadLibraryExW  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 120h +
mov eax dword_1013B58 +
xor eax ebp +
mov [ebp+var_4] eax +
push edi  +
xor edi edi +
cmp dword_1014008 edi +
jnz loc_100EE41  +
push esi  +
mov esi 11Ch +
push esi  +
lea eax [ebp+VersionInformation] +
push edi  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+VersionInformation] +
mov [ebp+VersionInformation.dwOSVersionInfoSize] esi +
mov esi ds:GetVersionExW +
push eax  +
call esi  +
test eax eax +
jnz loc_100ED8C  +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 114h +
call esi  +
mov eax [ebp+VersionInformation.dwPlatformId] +
dec eax  +
mov dword_1014008 edi +
pop esi  +
jz loc_100EE14  +
dec eax  +
jnz loc_100EE41  +
cmp [ebp+VersionInformation.dwMajorVersion] 5 +
jnz loc_100EE01  +
mov eax [ebp+VersionInformation.dwMinorVersion] +
sub eax edi +
jz loc_100EDF5  +
dec eax  +
jz loc_100EDE2  +
dec eax  +
jz loc_100EDC8  +
mov dword_1014008 14h +
jmp loc_100EE41  +
cmp [ebp+var_C] 1 +
jb loc_100EDD9  +
mov dword_1014008 10h +
or dword_1014008 4 +
jmp loc_100EE41  +
cmp [ebp+var_C] 2 +
jb loc_100EDD9  +
mov dword_1014008 8 +
jmp loc_100EDD9  +
mov dword_1014008 4 +
jmp loc_100EE41  +
cmp [ebp+VersionInformation.dwMajorVersion] 4 +
ja loc_100EE53  +
mov dword_1014008 2 +
cmp [ebp+VersionInformation.dwMajorVersion] 4 +
jnz loc_100EE41  +
cmp [ebp+VersionInformation.dwMinorVersion] edi +
jz loc_100EE37  +
cmp [ebp+VersionInformation.dwMinorVersion] 0Ah +
jz loc_100EE37  +
cmp [ebp+VersionInformation.dwMinorVersion] 5Ah +
jnz loc_100EE41  +
mov dword_1014008 1 +
mov ecx [ebp+var_4] +
mov eax dword_1014008 +
xor ecx ebp +
pop edi  +
call sub_100B071  +
leave   +
retn   +
mov dword_1014008 20h +
jmp loc_100EE41  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
mov eax dword_1013B58 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push 20h  +
lea eax [ebp+LCData] +
push eax  +
push 8  +
push 404h  +
mov esi 0C04h +
call ds:GetLocaleInfoW  +
test eax eax +
jz loc_100EEB8  +
push 3  +
lea eax [ebp+LCData] +
push offset word_1002378  +
push eax  +
call wcsncmp  +
add esp 0Ch +
mov esi eax +
neg esi  +
sbb esi esi +
and esi 0FFFFF800h +
add esi 0C04h +
mov ecx [ebp+var_4] +
mov ax si +
xor ecx ebp +
pop esi  +
call sub_100B071  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_1013B58 +
xor eax ebp +
mov [ebp+var_4] eax +
xor eax eax +
cmp ax word_101400C +
jnz loc_100EF68  +
push esi  +
lea eax [ebp+hKey] +
push eax  +
push 1  +
xor esi esi +
push esi  +
push offset SubKey  +
push 80000002h  +
mov [ebp+cbData] 6 +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_100EF67  +
push edi  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
push esi  +
push esi  +
push offset ValueName  +
push [ebp+hKey]  +
call ds:RegQueryValueExW  +
push [ebp+hKey]  +
mov edi eax +
call ds:RegCloseKey  +
cmp edi esi +
pop edi  +
jnz loc_100EF67  +
push 3  +
push ds:off_10020F8[esi*8]  +
lea eax [ebp+Data] +
push eax  +
call _wcsnicmp  +
add esp 0Ch +
test eax eax +
jz loc_100EF59  +
inc esi  +
cmp esi 1Ch +
jb loc_100EF38  +
jmp loc_100EF67  +
mov ax ds:word_10020FC[esi*8] +
mov word_101400C ax +
pop esi  +
mov ecx [ebp+var_4] +
mov ax word_101400C +
xor ecx ebp +
call sub_100B071  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push edi  +
mov edi eax +
xor ebx ebx +
cmp edi ebx +
jz loc_100F03D  +
cmp [ebp+arg_0] ebx +
jz loc_100F03D  +
cmp [ebp+arg_4] ebx +
jz loc_100F03D  +
push esi  +
movzx eax word ptr [edi] +
lea ecx [eax-61h] +
cmp cx 19h +
ja loc_100EFB9  +
movzx eax ax +
sub eax 61h +
jmp loc_100EFC8  +
lea ecx [eax-41h] +
cmp cx 19h +
ja loc_100EFF2  +
movzx eax ax +
sub eax 41h +
cmp eax 1Ah +
jnb loc_100EFF2  +
mov esi ds:dword_1002240[eax*4] +
test esi esi +
jz loc_100EFF2  +
jmp loc_100EFEA  +
push eax  +
push edi  +
call _wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100EFFD  +
add esi 8 +
mov eax [esi] +
cmp word ptr [eax] 0 +
jnz loc_100EFDA  +
mov edi [ebp+arg_0] +
inc ebx  +
cmp ebx 2 +
jl loc_100EFA5  +
jmp loc_100F03C  +
mov esi [esi+4] +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100F005  +
sub eax edx +
sar eax 1 +
cmp eax 55h +
jnb loc_100F03C  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100F01D  +
sub eax edx +
sar eax 1 +
lea eax [eax+eax+2] +
push eax  +
push esi  +
push [ebp+arg_4]  +
call memcpy  +
add esp 0Ch +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test esi esi +
jz loc_100F08E  +
cmp [ebp+arg_4] 0 +
jz loc_100F08E  +
push 2  +
push 55h  +
push esi  +
push [ebp+arg_0]  +
call sub_100FADC  +
test eax eax +
jz loc_100F08E  +
push 2  +
push 55h  +
push [ebp+arg_4]  +
push esi  +
call sub_100FB82  +
test edi edi +
jz loc_100F089  +
xor eax eax +
push edi  +
push [ebp+arg_4]  +
mov [edi] ax +
mov eax esi +
call sub_100EF7F  +
xor eax eax +
inc eax  +
jmp loc_100F090  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:FreeLibrary  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_100F0BF  +
cmp [ebp+arg_4] 7FFFFFFFh +
jbe loc_100F0C4  +
mov eax 80070057h +
test eax eax +
jl loc_100F0DD  +
mov eax [ebp+arg_4] +
push edi  +
push [ebp+arg_C]  +
mov edi [ebp+arg_0] +
push [ebp+arg_8]  +
push 0  +
call sub_100EBA5  +
pop edi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_1013B58 +
xor eax ebp +
mov [ebp+var_4] eax +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jnz loc_100F107  +
xor eax eax +
jmp loc_100F172  +
push ebx  +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
lea eax [ebp+LibFileName] +
push 104h  +
push eax  +
xor ebx ebx +
call sub_100F0AA  +
test eax eax +
jl loc_100F16F  +
push esi  +
call sub_100ED25  +
mov esi eax +
and esi 26h +
call sub_100ED25  +
and eax 38h +
push esi  +
push eax  +
lea eax [ebp+LibFileName] +
push eax  +
call sub_100EC98  +
mov ebx eax +
pop esi  +
test ebx ebx +
jz loc_100F16F  +
push ebx  +
push edi  +
call sub_100EC37  +
test eax eax +
jnz loc_100F16F  +
push ebx  +
test bl 1 +
jz loc_100F167  +
call ds:UnmapViewOfFile  +
jmp loc_100F16D  +
call ds:FreeLibrary  +
xor ebx ebx +
mov eax ebx +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_100B071  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test eax eax +
jz loc_100F1DF  +
test ecx ecx +
jz loc_100F1DF  +
cmp dword ptr [ebp+arg_0] 0 +
push eax  +
jz loc_100F1C3  +
test edx edx +
jz loc_100F1B0  +
push edx  +
push dword ptr [ebp+arg_0]  +
push offset aSSS_mui  +
push ecx  +
call sub_100F0E6  +
add esp 14h +
jmp loc_100F1E1  +
push dword ptr [ebp+arg_0]  +
push offset aSS_mui  +
push ecx  +
call sub_100F0E6  +
add esp 10h +
jmp loc_100F1E1  +
test edx edx +
jz loc_100F1CF  +
push edx  +
push offset a_SS_mui  +
jmp loc_100F1B8  +
push offset a_S_mui  +
push ecx  +
call sub_100F0E6  +
add esp 0Ch +
jmp loc_100F1E1  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 428h +
mov eax dword_1013B58 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
mov [ebp+lpLibFileName] esi +
mov [ebp+FilePart] ebx +
cmp esi ebx +
jnz loc_100F21D  +
xor eax eax +
jmp loc_100F976  +
test [ebp+arg_4] 0FFFFFFE3h +
jnz loc_100F216  +
push edi  +
mov edi dword ptr [ebp+wLanguage] +
cmp di bx +
jnz loc_100F239  +
test byte ptr [ebp+arg_4] 10h +
jnz loc_100F8A3  +
call sub_100ED25  +
mov dword_1014010 eax +
movzx eax al +
and eax 20h +
or eax 2 +
push eax  +
push 0  +
push esi  +
call ds:LoadLibraryExW  +
mov [ebp+hModule] eax +
test eax eax +
jz loc_100F8A3  +
test byte ptr dword_1014010 20h +
jnz loc_100F975  +
lea eax [ebp+FilePart] +
push eax  +
lea eax [ebp+LibFileName] +
push eax  +
push 104h  +
push 0  +
push esi  +
push 0  +
call ds:SearchPathW  +
test eax eax +
jz loc_100F897  +
mov eax [ebp+FilePart] +
test eax eax +
jnz loc_100F2B5  +
and dword ptr [ebp+var_41C] ebx +
lea eax [ebp+LibFileName] +
mov [ebp+FilePart] eax +
jmp loc_100F2C7  +
lea ecx [ebp+LibFileName] +
mov dword ptr [ebp+var_41C] ecx +
xor ecx ecx +
mov [eax-2] cx +
push 0  +
push [ebp+hModule]  +
call sub_100EBF0  +
test eax eax +
jz loc_100F87F  +
test di di +
jnz loc_100F857  +
mov al byte ptr dword_1014010 +
test al 4 +
jz loc_100F666  +
call ds:GetUserDefaultUILanguage  +
movzx eax ax +
mov ecx 404h +
mov [ebp+var_420] eax +
cmp ax cx +
jnz loc_100F319  +
call sub_100EE64  +
movzx eax ax +
mov [ebp+var_420] eax +
mov eax [ebp+arg_4] +
and eax 8 +
mov [ebp+var_424] eax +
cmp [ebp+var_424] 0 +
jz loc_100F3EF  +
lea eax [ebp+var_15C] +
push eax  +
push [ebp+var_420]  +
lea edi [ebp+var_208] +
lea esi [ebp+var_B0] +
call sub_100F048  +
test eax eax +
jz loc_100F8E3  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx esi +
call sub_100F184  +
mov ebx eax +
test ebx ebx +
jnz loc_100F8E7  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
lea edx [ebp+var_15C] +
call sub_100F184  +
mov ebx eax +
test ebx ebx +
jnz loc_100F8E7  +
cmp word ptr [ebp+var_208] ax +
jz loc_100F3CE  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx edi +
call sub_100F184  +
mov ebx eax +
test ebx ebx +
jnz loc_100F8E7  +
mov eax 0C04h +
cmp word ptr [ebp+var_420] ax +
jnz loc_100F59A  +
mov [ebp+var_420] 404h +
jmp loc_100F325  +
movzx eax word ptr [ebp+var_420] +
push eax  +
push offset aMui04hx  +
lea eax [ebp+var_B0] +
push 55h  +
push eax  +
call sub_1007DB7  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
lea edx [ebp+var_B0] +
call sub_100F184  +
mov ebx eax +
test ebx ebx +
jnz loc_100F8E7  +
lea eax [ebp+var_15C] +
push eax  +
push [ebp+var_420]  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_100F048  +
test eax eax +
jz loc_100F4A1  +
push 2  +
lea eax [ebp+var_15C] +
push eax  +
call sub_100F9F1  +
movzx eax ax +
test ax ax +
jz loc_100F4A1  +
movzx eax ax +
push eax  +
push offset aMui04hx  +
mov eax esi +
push 55h  +
push eax  +
call sub_1007DB7  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
mov edx esi +
call sub_100F184  +
mov ebx eax +
test ebx ebx +
jnz loc_100F8E7  +
mov eax 0C04h +
cmp word ptr [ebp+var_420] ax +
jz loc_100F3E0  +
call ds:GetSystemDefaultUILanguage  +
movzx esi ax +
mov [ebp+var_424] esi +
cmp si word ptr [ebp+var_420] +
jz loc_100F57E  +
movzx eax si +
push eax  +
push offset aMui04hx  +
lea eax [ebp+var_B0] +
push 55h  +
push eax  +
call sub_1007DB7  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
lea edx [ebp+var_B0] +
call sub_100F184  +
mov ebx eax +
test ebx ebx +
jnz loc_100F8E7  +
lea eax [ebp+var_15C] +
push eax  +
push esi  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_100F048  +
test eax eax +
jz loc_100F578  +
push 2  +
lea eax [ebp+var_15C] +
push eax  +
call sub_100F9F1  +
movzx eax ax +
test ax ax +
jz loc_100F578  +
movzx eax ax +
push eax  +
push offset aMui04hx  +
mov eax esi +
push 55h  +
push eax  +
call sub_1007DB7  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
mov edx esi +
call sub_100F184  +
mov ebx eax +
test ebx ebx +
jnz loc_100F8E7  +
mov esi [ebp+var_424] +
mov eax 409h +
mov ecx eax +
cmp cx word ptr [ebp+var_420] +
jz loc_100F82F  +
cmp ax si +
jmp loc_100F807  +
call ds:GetSystemDefaultUILanguage  +
movzx eax ax +
mov [ebp+var_424] eax +
cmp ax word ptr [ebp+var_420] +
jz loc_100F64D  +
lea ecx [ebp+var_15C] +
push ecx  +
push eax  +
lea edi [ebp+var_208] +
lea esi [ebp+var_B0] +
call sub_100F048  +
test eax eax +
jz loc_100F87F  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx esi +
call sub_100F184  +
mov ebx eax +
test ebx ebx +
jnz loc_100F8E7  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
lea edx [ebp+var_15C] +
call sub_100F184  +
mov ebx eax +
test ebx ebx +
jnz loc_100F8E7  +
cmp word ptr [ebp+var_208] ax +
jz loc_100F64D  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx edi +
call sub_100F184  +
mov ebx eax +
test ebx ebx +
jnz loc_100F8E7  +
mov eax 409h +
mov ecx eax +
cmp cx word ptr [ebp+var_420] +
jz loc_100F82F  +
jmp loc_100F724  +
test al 3 +
jz loc_100F87F  +
call sub_100EECD  +
test byte ptr [ebp+arg_4] 8 +
movzx eax ax +
mov [ebp+var_424] eax +
jz loc_100F74D  +
lea ecx [ebp+var_15C] +
push ecx  +
push eax  +
lea edi [ebp+var_208] +
lea esi [ebp+var_B0] +
call sub_100F048  +
test eax eax +
jz loc_100F87F  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx esi +
call sub_100F184  +
mov ebx eax +
test ebx ebx +
jnz loc_100F8E7  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
lea edx [ebp+var_15C] +
call sub_100F184  +
mov ebx eax +
test ebx ebx +
jnz loc_100F8E7  +
cmp word ptr [ebp+var_208] ax +
jz loc_100F71D  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx edi +
call sub_100F184  +
mov ebx eax +
test ebx ebx +
jnz loc_100F8E7  +
mov eax 409h +
mov ecx eax +
cmp cx word ptr [ebp+var_424] +
jz loc_100F82F  +
lea ecx [ebp+var_15C] +
push ecx  +
push eax  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_100F048  +
mov edx esi +
jmp loc_100F80E  +
movzx eax ax +
push eax  +
push offset aMui04hx  +
lea eax [ebp+var_B0] +
push 55h  +
push eax  +
call sub_1007DB7  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
lea edx [ebp+var_B0] +
call sub_100F184  +
mov ebx eax +
test ebx ebx +
jnz loc_100F8E7  +
lea eax [ebp+var_15C] +
push eax  +
push [ebp+var_424]  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_100F048  +
test eax eax +
jz loc_100F7FB  +
push 2  +
lea eax [ebp+var_15C] +
push eax  +
call sub_100F9F1  +
movzx eax ax +
test ax ax +
jz loc_100F7FB  +
movzx eax ax +
push eax  +
push offset aMui04hx  +
mov eax esi +
push 55h  +
push eax  +
call sub_1007DB7  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
mov edx esi +
call sub_100F184  +
mov ebx eax +
test ebx ebx +
jnz loc_100F8E7  +
mov eax 409h +
cmp ax word ptr [ebp+var_424] +
jz loc_100F82F  +
mov edx offset aMui0409 +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
call sub_100F184  +
mov ebx eax +
test ebx ebx +
jnz loc_100F8E7  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
xor edx edx +
call sub_100F184  +
mov ebx eax +
test ebx ebx +
jnz loc_100F8E7  +
jmp loc_100F8E3  +
test byte ptr dword_1014010 7 +
jz loc_100F87F  +
test byte ptr [ebp+arg_4] 8 +
jz loc_100F8AA  +
lea eax [ebp+var_15C] +
push eax  +
push edi  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_100F048  +
test eax eax +
jnz loc_100F8C4  +
test byte ptr [ebp+arg_4] 10h +
jz loc_100F8F7  +
push dword ptr [ebp+wLanguage]  +
push [ebp+hModule]  +
call sub_100EBF0  +
test eax eax +
jnz loc_100F8F7  +
push [ebp+hModule]  +
call ds:FreeLibrary  +
xor eax eax +
jmp loc_100F975  +
movzx eax di +
push eax  +
push offset aMui04hx  +
lea eax [ebp+var_B0] +
push 55h  +
push eax  +
call sub_1007DB7  +
add esp 10h +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
lea edx [ebp+var_B0] +
call sub_100F184  +
mov ebx eax +
test ebx ebx +
jz loc_100F87F  +
push [ebp+hModule]  +
call ds:FreeLibrary  +
mov eax ebx +
jmp loc_100F975  +
test byte ptr [ebp+hModule] 1 +
jz loc_100F96F  +
push [ebp+hModule]  +
call ds:FreeLibrary  +
call sub_100ED25  +
test al 38h +
jz loc_100F94C  +
push [ebp+FilePart]  +
lea eax [ebp+LibFileName] +
push dword ptr [ebp+var_41C]  +
push offset aSS  +
push 104h  +
push eax  +
call sub_1007DB7  +
add esp 14h +
push 0  +
push 1  +
lea eax [ebp+LibFileName] +
push eax  +
call sub_100EC98  +
jmp loc_100F969  +
call sub_100ED25  +
push 0  +
and eax 26h +
pop eax  +
setnz al  +
push eax  +
push 0  +
push [ebp+lpLibFileName]  +
call ds:LoadLibraryExW  +
mov [ebp+hModule] eax +
mov eax [ebp+hModule] +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100B071  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
movzx eax word ptr [eax] +
movzx ecx word ptr [ecx] +
cmp cx ax +
jnz loc_100F9A5  +
xor eax eax +
pop ebp  +
retn   +
sbb eax eax +
and eax 2 +
dec eax  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push dword ptr [eax]  +
push [ebp+arg_0]  +
call _wcsicmp  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax+8] 68h +
jnz loc_100F9E6  +
cmp word ptr [eax] 7Fh +
jz loc_100F9E6  +
xor eax eax +
inc eax  +
jmp loc_100F9E8  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_100FA46  +
test [ebp+arg_4] 0FFFFFFFDh +
jnz loc_100FA46  +
push offset sub_100F9B2  +
push 8  +
push 163h  +
push offset off_1004458  +
push [ebp+arg_0]  +
call bsearch  +
add esp 14h +
test eax eax +
jz loc_100FA46  +
mov ecx [eax+4] +
imul ecx ecx +
add ecx offset dword_10033A8 +
test byte ptr [ebp+arg_4] 2 +
jnz loc_100FA41  +
push ecx  +
call sub_100F9CD  +
test eax eax +
jnz loc_100FA46  +
mov ax [ecx] +
jmp loc_100FA50  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
mov edx 80070057h +
test ecx ecx +
jz loc_100FA74  +
cmp ecx 7FFFFFFFh +
jbe loc_100FA76  +
mov eax edx +
test eax eax +
jl loc_100FAD3  +
push edi  +
mov edi [ebp+arg_C] +
cmp edi 7FFFFFFEh +
jbe loc_100FA92  +
mov eax edx +
mov edx [ebp+arg_0] +
xor ecx ecx +
mov [edx] cx +
jmp loc_100FAD2  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_100FAC2  +
mov edx [ebp+arg_8] +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_100FABE  +
movzx ecx word ptr [edx+eax] +
test cx cx +
jz loc_100FABE  +
mov [eax] cx +
inc eax  +
inc eax  +
dec esi  +
jnz loc_100FAA6  +
test esi esi +
jnz loc_100FAC9  +
dec eax  +
dec eax  +
mov ebx 8007007Ah +
xor ecx ecx +
mov [eax] cx +
pop esi  +
mov eax ebx +
pop ebx  +
pop edi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 0 +
push esi  +
push edi  +
jl loc_100FB6D  +
cmp [ebp+arg_4] 0 +
jnz loc_100FAF9  +
cmp [ebp+arg_8] 0 +
jnz loc_100FB6D  +
test [ebp+arg_C] 0FFFFFFFDh +
jnz loc_100FB6D  +
push offset sub_100F98B  +
push 0Ch  +
push 164h  +
lea eax [ebp+arg_0] +
push offset dword_10033A8  +
push eax  +
call bsearch  +
mov ecx eax +
add esp 14h +
test ecx ecx +
jz loc_100FB6D  +
test byte ptr [ebp+arg_C] 2 +
jnz loc_100FB35  +
push ecx  +
call sub_100F9CD  +
test eax eax +
jnz loc_100FB6D  +
mov edi [ecx+4] +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100FB3D  +
sub eax edx +
sar eax 1 +
cmp [ebp+arg_4] 0 +
lea esi [eax+1] +
jz loc_100FB69  +
push esi  +
push edi  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_100FA59  +
test eax eax +
jge loc_100FB69  +
push 7Ah  +
jmp loc_100FB6F  +
mov eax esi +
jmp loc_100FB77  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
xor edi edi +
cmp [ebp+arg_0] edi +
jz loc_100FC30  +
cmp [ebp+arg_8] edi +
jle loc_100FBA5  +
cmp [ebp+arg_4] edi +
jz loc_100FC30  +
cmp [ebp+arg_8] edi +
jl loc_100FC30  +
test [ebp+arg_C] 0FFFFFFFDh +
jnz loc_100FC30  +
push offset sub_100F9B2  +
push 8  +
push 163h  +
push offset off_1004458  +
push [ebp+arg_0]  +
call bsearch  +
add esp 14h +
cmp eax edi +
jz loc_100FC30  +
mov ecx [eax+4] +
imul ecx ecx +
mov edx offset dword_10033A8 +
add ecx edx +
test byte ptr [ebp+arg_C] 2 +
jnz loc_100FBF1  +
push ecx  +
call sub_100F9CD  +
test eax eax +
jnz loc_100FC30  +
mov eax [ecx+8] +
imul eax eax +
add eax edx +
mov eax [eax+4] +
mov ecx eax +
lea edx [ecx+2] +
mov si [ecx] +
inc ecx  +
inc ecx  +
cmp si di +
jnz loc_100FC01  +
sub ecx edx +
sar ecx 1 +
lea esi [ecx+1] +
cmp [ebp+arg_4] edi +
jz loc_100FC2C  +
push esi  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_100FA59  +
test eax eax +
jge loc_100FC2C  +
push 7Ah  +
jmp loc_100FC32  +
mov eax esi +
jmp loc_100FC3A  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_4] +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
push edi  +
mov edi ds:NtQueryInformationToken +
xor esi esi +
inc esi  +
mov [ebx] esi +
and dword ptr [eax] 0 +
lea eax [ebp+arg_8] +
push eax  +
push 4  +
lea eax [ebp+var_4] +
push eax  +
push 12h  +
push [ebp+arg_0]  +
mov [ebp+var_4] esi +
call edi  +
test eax eax +
jl loc_100FD19  +
cmp [ebp+var_4] 2 +
jz loc_100FD14  +
cmp [ebp+var_4] esi +
jnz loc_100FD19  +
and dword ptr [ebx] 0 +
lea eax [ebp+arg_8] +
push eax  +
push 4  +
lea eax [ebp+var_8] +
push eax  +
push 14h  +
push [ebp+arg_0]  +
call edi  +
test eax eax +
jl loc_100FD19  +
cmp [ebp+var_8] 0 +
jz loc_100FD19  +
mov ecx [ebp+arg_4] +
mov [ecx] esi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
and dword ptr [esi] 0 +
push 4  +
pop eax  +
lea ecx [ebp+arg_4] +
push ecx  +
push eax  +
mov [ebp+arg_4] eax +
lea eax [ebp+arg_0] +
push eax  +
push 1Ah  +
push [ebp+arg_0]  +
call ds:NtQueryInformationToken  +
test eax eax +
jl loc_100FD59  +
xor ecx ecx +
cmp [ebp+arg_0] ecx +
setnz cl  +
mov [esi] ecx +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
xor ebx ebx +
push edi  +
mov [ebp+var_4] ebx +
cmp [ebp+arg_0] ebx +
jnz loc_100FDAA  +
lea eax [ebp+arg_0] +
push eax  +
push ebx  +
push 8  +
push 0FFFFFFFEh  +
call ds:NtOpenThreadToken  +
mov edi eax +
cmp edi 0C000007Ch +
jnz loc_100FDA0  +
lea eax [ebp+arg_0] +
push eax  +
push 8  +
push 0FFFFFFFFh  +
call ds:NtOpenProcessToken  +
mov edi eax +
cmp edi ebx +
jl loc_100FE0F  +
mov eax [ebp+arg_0] +
mov [ebp+var_4] eax +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_0]  +
call sub_100FCB5  +
mov edi eax +
cmp edi ebx +
jl loc_100FE01  +
push esi  +
mov esi [ebp+arg_4] +
cmp [ebp+var_8] ebx +
jz loc_100FDCD  +
mov [esi] ebx +
jmp loc_100FDD8  +
xor eax eax +
cmp [ebp+var_C] ebx +
setz al  +
inc eax  +
mov [esi] eax +
lea eax [ebp+arg_4] +
push eax  +
push [ebp+arg_0]  +
call sub_100FD25  +
mov edi eax +
cmp edi ebx +
jl loc_100FE00  +
cmp [ebp+arg_4] ebx +
jz loc_100FE00  +
mov eax [esi] +
cmp eax 10h +
jb loc_100FDFB  +
cmp eax 13h +
jb loc_100FDFE  +
add eax 10h +
mov [esi] eax +
pop esi  +
cmp [ebp+var_4] ebx +
jz loc_100FE0F  +
push [ebp+var_4]  +
call ds:NtClose  +
mov eax edi +
pop edi  +
pop ebx  +
leave   +
retn 8  +
***
push offset unk_1012078  +
call sub_100BF82  +
retn   +
***
push offset unk_10120D8  +
call sub_100BF82  +
retn   +
***
push offset unk_1012138  +
call sub_100BF82  +
retn   +
***
push offset unk_1012198  +
call sub_100BF82  +
retn   +
***
push offset unk_10121F8  +
call sub_100BF82  +
retn   +
***
push offset unk_1012258  +
call sub_100BF82  +
retn   +
***
push offset unk_10122B8  +
call sub_100BF82  +
retn   +
***
push offset unk_1012318  +
call sub_100BF82  +
retn   +
***
push offset unk_1012378  +
call sub_100BF82  +
retn   +
***
push offset unk_10123D8  +
call sub_100BF82  +
retn   +
***
push offset unk_1012438  +
call sub_100BF82  +
retn   +
***
push offset unk_1012498  +
call sub_100BF82  +
retn   +
***
push offset unk_10124F8  +
call sub_100BF82  +
retn   +
***
push offset unk_1012558  +
call sub_100BF82  +
retn   +
***
push offset unk_10125B8  +
call sub_100BF82  +
retn   +
***
push offset unk_1012618  +
call sub_100BF82  +
retn   +
***
push offset unk_1012678  +
call sub_100BF82  +
mov dword_1012688 60h +
retn   +
***
push offset unk_10126D8  +
call sub_100BF82  +
mov dword_10126E8 60h +
retn   +
***
push offset unk_1012738  +
call sub_100BF82  +
mov dword_1012748 60h +
retn   +
***
push offset unk_1012798  +
call sub_100BF82  +
mov dword_10127A8 60h +
retn   +
***
push offset unk_10127F8  +
call sub_100BF82  +
mov dword_1012808 60h +
retn   +
***
push offset unk_1012858  +
call sub_100BF82  +
mov dword_1012868 60h +
retn   +
***
push offset unk_10128B8  +
call sub_100BF82  +
retn   +
***
push offset unk_1012918  +
call sub_100BF82  +
mov dword_1012928 60h +
retn   +
***
push offset unk_1012978  +
call sub_100BF82  +
mov dword_1012988 60h +
retn   +
***
push offset unk_10129D8  +
call sub_100BF82  +
mov dword_10129E8 6Ch +
retn   +
***
push offset unk_1012A48  +
call sub_100BF82  +
mov dword_1012A58 6Ch +
retn   +
***
push offset unk_1012AB8  +
call sub_100BF82  +
mov dword_1012AC8 6Ch +
retn   +
***
push offset unk_1012B28  +
call sub_100BF82  +
mov dword_1012B38 6Ch +
retn   +
***
push offset unk_1012B98  +
call sub_100BF82  +
mov dword_1012BA8 60h +
retn   +
***
push offset unk_1012BF8  +
call sub_100BF82  +
retn   +
***
push offset unk_1012C58  +
call sub_100BF82  +
retn   +
***
push offset unk_1012CB8  +
call sub_100BF82  +
retn   +
***
push offset unk_1012D18  +
call sub_100BF82  +
mov dword_1012D28 60h +
retn   +
***
push offset unk_1012D78  +
call sub_100BF82  +
mov dword_1012D88 60h +
retn   +
***
push offset unk_1012DD8  +
call sub_100BF82  +
mov dword_1012DE8 60h +
retn   +
***
push offset unk_1012E38  +
call sub_100BF82  +
mov dword_1012E48 6Ch +
retn   +
***
push offset unk_1012EA8  +
call sub_100BF82  +
retn   +
***
push offset unk_1012F08  +
call sub_100BF82  +
retn   +
***
push offset unk_1012F68  +
call sub_100BF82  +
mov dword_1012F78 60h +
retn   +
***
push offset unk_1012FC8  +
call sub_100BF82  +
mov dword_1012FD8 60h +
retn   +
***
push offset unk_1013028  +
call sub_100BF82  +
mov dword_1013038 60h +
retn   +
***
push offset unk_1013088  +
call sub_100BF82  +
mov dword_1013098 60h +
retn   +
***
push offset unk_10130E8  +
call sub_100BF82  +
mov dword_10130F8 60h +
retn   +
***
push offset unk_1013148  +
call sub_100BF82  +
mov dword_1013158 6Ch +
retn   +
***
push offset unk_10131B8  +
call sub_100BF82  +
mov dword_10131C8 60h +
retn   +
***
push offset unk_1013218  +
call sub_100BF82  +
mov dword_1013228 60h +
retn   +
***
push offset unk_1013278  +
call sub_100BF82  +
retn   +
***
push offset unk_10132D8  +
call sub_100BF82  +
retn   +
***
push offset unk_1013338  +
call sub_100BF82  +
mov dword_1013348 60h +
retn   +
***
push offset unk_1013398  +
call sub_100BF82  +
mov dword_10133A8 60h +
retn   +
***
push offset unk_10133F8  +
call sub_100BF82  +
mov dword_1013408 60h +
retn   +
***
push offset unk_1013458  +
call sub_100BF82  +
retn   +
***
push offset unk_10134B8  +
call sub_100BF82  +
retn   +
***
push offset unk_1013518  +
call sub_100BF82  +
retn   +
***
push offset unk_1013578  +
call sub_100BF82  +
mov dword_1013588 60h +
retn   +
***
push offset unk_10135D8  +
call sub_100BF82  +
mov dword_10135E8 60h +
retn   +
***
push offset unk_1013638  +
call sub_100BF82  +
mov dword_1013648 60h +
retn   +
***
push offset unk_1013698  +
call sub_100BF82  +
mov dword_10136A8 60h +
retn   +
***
push offset unk_10136F8  +
call sub_100BF82  +
retn   +
***
push offset unk_1013758  +
call sub_100BF82  +
mov dword_1013768 60h +
retn   +
***
push offset unk_10137B8  +
call sub_100BF82  +
mov dword_10137C8 60h +
retn   +
***
push offset unk_1013818  +
call sub_100BF82  +
mov dword_1013828 60h +
retn   +
***
push offset unk_1013878  +
call sub_100BF82  +
mov dword_1013888 60h +
retn   +
***
push offset unk_10138D8  +
call sub_100BF82  +
mov dword_10138E8 60h +
retn   +
***
push offset unk_1013938  +
call sub_100BF82  +
mov dword_1013948 60h +
retn   +
***
push offset unk_1013998  +
call sub_100BF82  +
retn   +
***
push offset unk_10139F8  +
call sub_100BF82  +
retn   +
***
push offset unk_1013A58  +
call sub_100BF82  +
mov dword_1013A68 60h +
retn   +
***
or eax cs:[ecx] +
add [ebx+ecx] bh +
add [eax] eax +
retn 10Ch  +
***
retf   +
***
retf 4400h  +
***
