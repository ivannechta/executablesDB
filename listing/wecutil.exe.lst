mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFFFh  +
push [ebp+lpString2]  +
push 0FFFFFFFFh  +
push [ebp+lpString1]  +
push 1  +
push 7Fh  +
call ds:CompareStringW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor ecx ecx +
xor edx edx +
mov [eax+10h] ecx +
mov [eax] ecx +
mov byte ptr [eax+18h] 1 +
mov [eax+19h] cl +
mov [eax+1Ah] dx +
mov [eax+1Ch] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+10h] +
xor edx edx +
push ebx  +
mov [eax] edx +
mov eax [ebp+8] +
sub eax 4 +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
mov edi esi +
jz loc_1003DAE  +
dec eax  +
jz loc_1003DA5  +
push 57h  +
pop eax  +
jmp loc_1003E1C  +
xor ebx ebx +
xor eax eax +
mov [ebp+0Fh] al +
jmp loc_1003DD4  +
push dword ptr [ebp+14h]  +
call ds:GetTraceLoggerHandle  +
mov ebx eax +
push edx  +
push ebx  +
mov [ebp-4] edx +
call ds:GetTraceEnableLevel  +
push dword ptr [ebp-4]  +
mov [ebp+0Fh] al +
push ebx  +
call ds:GetTraceEnableFlags  +
mov edx [ebp-4] +
movzx ecx word ptr [esi+1Ah] +
test cl 1 +
jz loc_1003DFD  +
cmp dword ptr [esi+10h] 0 +
jz loc_1003DFD  +
mov ecx [esi+10h] +
mov [ecx] ebx +
mov [ecx+4] edx +
movzx ecx byte ptr [ebp+0Fh] +
mov edx [esi+10h] +
mov [edx+0Ch] ecx +
mov ecx [esi+10h] +
mov [ecx+8] eax +
jmp loc_1003E1A  +
test cl 2 +
jz loc_1003E0B  +
mov esi [esi+10h] +
test esi esi +
jz loc_1003E0B  +
mov edi esi +
mov cl [ebp+0Fh] +
mov [edi+10h] ebx +
mov [edi+14h] edx +
mov [edi+19h] cl +
mov [edi+1Ch] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi off_1013004 +
push edi  +
mov edi offset dword_10133A8 +
jmp loc_1003E67  +
mov eax [edi] +
and [ebp+var_4] 0 +
lea ecx [esi+8] +
push ecx  +
push 0  +
push 0  +
lea ecx [ebp+var_8] +
push ecx  +
push 1  +
push eax  +
push esi  +
push offset loc_1003D7F  +
add edi 4 +
mov [ebp+var_8] eax +
call ds:RegisterTraceGuidsW  +
mov esi [esi] +
test esi esi +
jnz loc_1003E3E  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
lea eax [ebp+arg_0] +
push eax  +
mov esi ecx +
call ??0exception@@QAE@ABQBD@Z  +
mov dword ptr [esi] offset off_1001238 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
jmp ??1exception@@UAE@XZ  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1001238 +
call ??1exception@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_1003EC9  +
push esi  +
call sub_100E4D4  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call ??0exception@@QAE@ABV0@@Z  +
mov dword ptr [esi] offset off_1001238 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
add eax eax +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
add eax eax +
push eax  +
push [ebp+arg_0]  +
call memmove_s  +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
add eax eax +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
add eax eax +
push eax  +
push [ebp+arg_0]  +
call memcpy_s  +
mov eax [ebp+arg_0] +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1003EF7  +
mov eax [ebp+arg_0] +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call memcpy_s  +
mov eax [ebp+arg_0] +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call memmove_s  +
mov eax [ebp+arg_0] +
add esp 10h +
pop ebp  +
retn   +
***
mov edx [ecx+4] +
test edx edx +
jnz loc_1003FB9  +
xor eax eax +
retn   +
mov eax [ecx+8] +
sub eax edx +
push 1Ch  +
cdq   +
pop ecx  +
idiv  ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx+8] +
push esi  +
mov esi [eax] +
mov [edx+8] esi +
mov esi [eax] +
cmp byte ptr [esi+49h] 0 +
jnz loc_1003FE6  +
mov [esi+4] edx +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
pop esi  +
cmp edx [ecx+4] +
jnz loc_1003FFA  +
mov [ecx+4] eax +
jmp loc_1004008  +
mov ecx [edx+4] +
cmp edx [ecx] +
jnz loc_1004005  +
mov [ecx] eax +
jmp loc_1004008  +
mov [ecx+8] eax +
mov [eax] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
jmp loc_1004022  +
mov eax ecx +
mov ecx [eax+8] +
cmp byte ptr [ecx+49h] 0 +
jz loc_1004020  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
jmp loc_1004040  +
mov eax ecx +
mov ecx [eax] +
cmp byte ptr [ecx+49h] 0 +
jz loc_100403E  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx] +
push esi  +
mov esi [eax+8] +
mov [edx] esi +
mov esi [eax+8] +
cmp byte ptr [esi+49h] 0 +
jnz loc_100406D  +
mov [esi+4] edx +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
pop esi  +
cmp edx [ecx+4] +
jnz loc_1004081  +
mov [ecx+4] eax +
jmp loc_1004090  +
mov ecx [edx+4] +
cmp edx [ecx+8] +
jnz loc_100408E  +
mov [ecx+8] eax +
jmp loc_1004090  +
mov [ecx] eax +
mov [eax+8] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
xor edx edx +
cmp [eax+49h] dl +
jz loc_10040BC  +
push edx  +
push edx  +
push edx  +
push edx  +
push edx  +
call sub_100E96A  +
add esp 14h +
pop esi  +
retn   +
mov ecx [eax+8] +
cmp [ecx+49h] dl +
jnz loc_10040D5  +
push ecx  +
call sub_1004034  +
jmp loc_10040DD  +
mov ecx [esi] +
cmp ecx [eax+8] +
jnz loc_10040DD  +
mov [esi] eax +
mov eax [eax+4] +
cmp [eax+49h] dl +
jz loc_10040CC  +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
sub esp 0Ch +
test ecx ecx +
ja loc_1004105  +
xor ecx ecx +
lea eax [ecx+ecx] +
push eax  +
call loc_100E4E5  +
pop ecx  +
leave   +
retn 8  +
***
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 2 +
jnb loc_10040F7  +
push 0  +
lea ecx [ebp-0Ch] +
call sub_1003E76  +
push offset dword_1010AE8  +
lea eax [ebp-0Ch] +
push eax  +
call _CxxThrowException  +
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
sub esp 0Ch +
test ecx ecx +
ja loc_100414E  +
xor ecx ecx +
imul ecx ecx +
push ecx  +
call loc_100E4E5  +
pop ecx  +
leave   +
retn 8  +
***
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 1Ch +
jnb loc_1004140  +
push 0  +
lea ecx [ebp-0Ch] +
call sub_1003E76  +
push offset dword_1010AE8  +
lea eax [ebp-0Ch] +
push eax  +
call _CxxThrowException  +
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
sub esp 0Ch +
test ecx ecx +
ja loc_1004197  +
xor ecx ecx +
imul ecx ecx +
push ecx  +
call loc_100E4E5  +
pop ecx  +
leave   +
retn 8  +
***
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 4Ch +
jnb loc_1004189  +
push 0  +
lea ecx [ebp-0Ch] +
call sub_1003E76  +
push offset dword_1010AE8  +
lea eax [ebp-0Ch] +
push eax  +
call _CxxThrowException  +
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1003F46  +
add esp 10h +
pop ebp  +
retn 14h  +
***
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_1004211  +
test esi esi +
jz loc_1004211  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1001244 +
jz loc_1004236  +
push esi  +
call sub_100E4D4  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ecx+18h] +
lea eax [ecx+4] +
cmp esi 10h +
jb loc_1004257  +
mov edx [eax] +
jmp loc_1004259  +
mov edx eax +
cmp [ebp+arg_0] edx +
jb loc_1004273  +
cmp esi 10h +
jb loc_1004265  +
mov eax [eax] +
mov ecx [ecx+14h] +
add ecx eax +
cmp ecx [ebp+arg_0] +
jbe loc_1004273  +
mov al 1 +
jmp loc_1004275  +
xor al al +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1003F1D  +
add esp 10h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1003F69  +
add esp 10h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1003F8C  +
add esp 10h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ecx  +
lea ecx [ebp-0Ch] +
call sub_1003ED5  +
push offset dword_1010AE8  +
lea eax [ebp-0Ch] +
push eax  +
call _CxxThrowException  +
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
test ecx ecx +
jz loc_100431A  +
call sub_10041EF  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+18h] 8 +
mov eax [ebp+arg_0] +
mov [ecx+14h] eax +
jb loc_100433A  +
mov ecx [ecx+4] +
jmp loc_100433D  +
add ecx 4 +
xor edx edx +
mov [ecx+eax*2] dx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ecx+18h] +
lea eax [ecx+4] +
cmp esi 8 +
jb loc_1004361  +
mov edx [eax] +
jmp loc_1004363  +
mov edx eax +
cmp [ebp+arg_0] edx +
jb loc_100437E  +
cmp esi 8 +
jb loc_100436F  +
mov eax [eax] +
mov ecx [ecx+14h] +
lea eax [eax+ecx*2] +
cmp eax [ebp+arg_0] +
jbe loc_100437E  +
mov al 1 +
jmp loc_1004380  +
xor al al +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10041C1  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+18h] 10h +
mov eax [ebp+arg_0] +
mov [ecx+14h] eax +
jb loc_10043C2  +
mov ecx [ecx+4] +
jmp loc_10043C5  +
add ecx 4 +
mov byte ptr [ecx+eax] 0 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100427F  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10042A1  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10042C3  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
cmp dword ptr [eax+18h] 8 +
jb loc_100444B  +
mov ecx [eax+4] +
jmp loc_100444E  +
lea ecx [eax+4] +
mov eax [ebp+arg_0] +
cmp dword ptr [eax+18h] 8 +
jb loc_100445C  +
mov eax [eax+4] +
jmp loc_100445F  +
add eax 4 +
push ecx  +
push eax  +
call ds:lstrcmpiW  +
xor ecx ecx +
test eax eax +
setnle cl  +
mov al cl +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov [esi] eax +
test eax eax +
jz loc_1004494  +
add eax 4 +
push eax  +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
jmp sub_100430A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
mov esi ecx +
jz loc_10044EC  +
cmp dword ptr [esi+18h] 8 +
jb loc_10044EC  +
cmp [ebp+arg_4] 0 +
lea eax [esi+4] +
push edi  +
mov edi [eax] +
jbe loc_10044E4  +
push [ebp+arg_4]  +
push edi  +
push 8  +
push eax  +
call sub_10043D2  +
push edi  +
call sub_100E4D4  +
pop ecx  +
pop edi  +
push [ebp+arg_4]  +
mov ecx esi +
mov dword ptr [esi+18h] 7 +
call sub_1004324  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+4] +
mov esi [eax+4] +
mov ebx eax +
jmp loc_1004536  +
push [ebp+arg_0]  +
lea eax [esi+0Ch] +
push eax  +
mov ecx edi +
call sub_1004438  +
test al al +
jz loc_1004532  +
mov esi [esi+8] +
jmp loc_1004536  +
mov ebx esi +
mov esi [esi] +
cmp byte ptr [esi+49h] 0 +
jz loc_100451B  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebx  +
xor ebx ebx +
push ebx  +
push 1  +
call loc_1004178  +
cmp eax ebx +
jz loc_100455D  +
mov [eax] ebx +
lea ecx [eax+4] +
cmp ecx ebx +
jz loc_1004566  +
mov [ecx] ebx +
lea ecx [eax+8] +
cmp ecx ebx +
jz loc_100456F  +
mov [ecx] ebx +
mov [eax+49h] bl +
mov byte ptr [eax+48h] 1 +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp [esi+14h] edi +
jnb loc_1004594  +
call loc_100E591  +
mov eax [esi+14h] +
sub eax edi +
cmp eax [ebp+arg_4] +
jnb loc_10045A1  +
mov [ebp+arg_4] eax +
cmp [ebp+arg_4] 0 +
jbe loc_10045F4  +
mov ecx [esi+18h] +
push ebx  +
lea edx [esi+4] +
cmp ecx 8 +
jb loc_10045BA  +
mov ebx [edx] +
mov [ebp+arg_0] ebx +
jmp loc_10045BD  +
mov [ebp+arg_0] edx +
cmp ecx 8 +
jb loc_10045C4  +
mov edx [edx] +
mov ebx [ebp+arg_4] +
sub eax ebx +
push eax  +
mov [ebp+var_4] edx +
mov edx [ebp+arg_0] +
lea eax [edi+ebx] +
lea eax [edx+eax*2] +
push eax  +
mov eax [ebp+var_4] +
sub ecx edi +
push ecx  +
lea eax [eax+edi*2] +
push eax  +
call sub_100438A  +
mov eax [esi+14h] +
sub eax ebx +
push eax  +
mov ecx esi +
call sub_1004324  +
pop ebx  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
call __EH_prolog3_catch  +
mov edi ecx +
mov [ebp-18h] edi +
mov esi [ebp+8] +
or esi 7 +
cmp esi 7FFFFFFEh +
jbe loc_1004625  +
mov esi [ebp+8] +
jmp loc_100464C  +
xor edx edx +
push 3  +
mov eax esi +
pop ebx  +
div  ebx +
mov ecx [edi+18h] +
mov [ebp-14h] ecx +
shr dword ptr [ebp-14h] 1 +
mov edx [ebp-14h] +
cmp eax edx +
jnb loc_100464C  +
mov eax 7FFFFFFEh +
sub eax edx +
cmp ecx eax +
ja loc_100464C  +
lea esi [edx+ecx] +
and dword ptr [ebp-4] 0 +
push 0  +
lea eax [esi+1] +
push eax  +
call loc_10040E6  +
mov ebx eax +
jmp loc_1004687  +
mov eax [ebp+8] +
mov [ebp-10h] esp +
mov [ebp+8] eax +
push 0  +
inc eax  +
push eax  +
mov byte ptr [ebp-4] 2 +
call loc_10040E6  +
mov [ebp-14h] eax +
mov eax offset loc_100467E +
retn   +
mov edi [ebp-18h] +
mov esi [ebp+8] +
mov ebx [ebp-14h] +
cmp dword ptr [ebp+0Ch] 0 +
jbe loc_10046A9  +
cmp dword ptr [edi+18h] 8 +
jb loc_1004698  +
mov eax [edi+4] +
jmp loc_100469B  +
lea eax [edi+4] +
push dword ptr [ebp+0Ch]  +
push eax  +
lea eax [esi+1] +
push eax  +
push ebx  +
call sub_10043D2  +
push 0  +
push 1  +
mov ecx edi +
call sub_10044B8  +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
mov [edi+4] ebx +
mov [edi+18h] esi +
call sub_1004324  +
call __EH_epilog3  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
mov esi ecx +
jz loc_100471A  +
cmp dword ptr [esi+18h] 10h +
jb loc_100471A  +
cmp [ebp+arg_4] 0 +
lea eax [esi+4] +
push edi  +
mov edi [eax] +
jbe loc_1004712  +
push [ebp+arg_4]  +
push edi  +
push 10h  +
push eax  +
call sub_10043F4  +
push edi  +
call sub_100E4D4  +
pop ecx  +
pop edi  +
push [ebp+arg_4]  +
mov ecx esi +
mov dword ptr [esi+18h] 0Fh +
call sub_10043AC  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp [esi+14h] edi +
jnb loc_100474B  +
call loc_100E591  +
mov eax [esi+14h] +
sub eax edi +
cmp eax [ebp+arg_4] +
jnb loc_1004758  +
mov [ebp+arg_4] eax +
cmp [ebp+arg_4] 0 +
jbe loc_100479B  +
mov ecx [esi+18h] +
push ebx  +
lea edx [esi+4] +
cmp ecx 10h +
jb loc_100476E  +
mov ebx [edx] +
jmp loc_1004770  +
mov ebx edx +
cmp ecx 10h +
jb loc_1004777  +
mov edx [edx] +
sub eax [ebp+arg_4] +
add ebx edi +
add ebx [ebp+arg_4] +
push eax  +
push ebx  +
sub ecx edi +
push ecx  +
add edx edi +
push edx  +
call sub_1004416  +
mov eax [esi+14h] +
sub eax [ebp+arg_4] +
mov ecx esi +
push eax  +
call sub_10043AC  +
pop ebx  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
call __EH_prolog3_catch  +
mov edi ecx +
mov [ebp-18h] edi +
mov esi [ebp+8] +
or esi 0Fh +
cmp esi 0FFFFFFFEh +
jbe loc_10047C9  +
mov esi [ebp+8] +
jmp loc_10047EE  +
xor edx edx +
push 3  +
mov eax esi +
pop ebx  +
div  ebx +
mov ecx [edi+18h] +
mov [ebp-14h] ecx +
shr dword ptr [ebp-14h] 1 +
mov edx [ebp-14h] +
cmp eax edx +
jnb loc_10047EE  +
push 0FFFFFFFEh  +
pop eax  +
sub eax edx +
cmp ecx eax +
ja loc_10047EE  +
lea esi [edx+ecx] +
and dword ptr [ebp-4] 0 +
push 0  +
lea eax [esi+1] +
push eax  +
call loc_10081BE  +
mov ebx eax +
jmp loc_1004829  +
mov eax [ebp+8] +
mov [ebp-10h] esp +
mov [ebp+8] eax +
push 0  +
inc eax  +
push eax  +
mov byte ptr [ebp-4] 2 +
call loc_10081BE  +
mov [ebp-14h] eax +
mov eax offset loc_1004820 +
retn   +
mov edi [ebp-18h] +
mov esi [ebp+8] +
mov ebx [ebp-14h] +
cmp dword ptr [ebp+0Ch] 0 +
jbe loc_100484B  +
cmp dword ptr [edi+18h] 10h +
jb loc_100483A  +
mov eax [edi+4] +
jmp loc_100483D  +
lea eax [edi+4] +
push dword ptr [ebp+0Ch]  +
push eax  +
lea eax [esi+1] +
push eax  +
push ebx  +
call sub_10043F4  +
push 0  +
push 1  +
mov ecx edi +
call sub_10046E6  +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
mov [edi+4] ebx +
mov [edi+18h] esi +
call sub_10043AC  +
call __EH_epilog3  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
mov edi ds:GetStdHandle +
mov dword ptr [esi] offset off_1001244 +
mov dword ptr [esi+4] 0 +
mov dword ptr [esi] offset off_1001248 +
and dword ptr [esi+8] 0 +
push 0FFFFFFF5h  +
call edi  +
push 0FFFFFFF4h  +
mov [esi+10h] eax +
call edi  +
mov [esi+14h] eax +
pop edi  +
mov byte ptr [esi+0Ch] 0 +
mov eax esi +
pop esi  +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
lea ecx [esi+8] +
call sub_100430A  +
mov dword ptr [esi] offset off_1001244 +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1004888  +
mov dword ptr [esi] offset off_1001258 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1004888  +
mov dword ptr [esi] offset off_1001268 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push 0  +
mov dword ptr [esi+18h] 7 +
call sub_1004324  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100454A  +
lea ecx [esi+4] +
mov [ecx] eax +
mov byte ptr [eax+49h] 1 +
mov eax [ecx] +
mov [eax+4] eax +
mov eax [ecx] +
mov [eax] eax +
mov ecx [ecx] +
mov [ecx+8] ecx +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp edi 7FFFFFFEh +
jbe loc_1004997  +
call loc_100E554  +
cmp [esi+18h] edi +
jnb loc_10049A9  +
push dword ptr [esi+14h]  +
mov ecx esi +
push edi  +
call sub_1004601  +
jmp loc_10049D5  +
cmp [ebp+arg_4] 0 +
jz loc_10049C9  +
cmp edi 8 +
jnb loc_10049C9  +
mov eax [esi+14h] +
cmp edi eax +
jnb loc_10049BD  +
mov eax edi +
push eax  +
push 1  +
mov ecx esi +
call sub_10044B8  +
jmp loc_10049D5  +
test edi edi +
jnz loc_10049D5  +
push edi  +
mov ecx esi +
call sub_1004324  +
xor eax eax +
cmp eax edi +
sbb eax eax +
pop edi  +
neg eax  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_8]  +
and [ebp+var_4] 0 +
push [ebp+arg_4]  +
push 1  +
push [ebp+arg_0]  +
call sub_1005EC8  +
mov eax [ebp+arg_0] +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0  +
push 1  +
mov esi ecx +
call sub_10044B8  +
test [ebp+arg_0] 1 +
jz loc_1004A2C  +
push esi  +
call sub_100E4D4  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push 0  +
push 1  +
call sub_10046E6  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp edi 0FFFFFFFEh +
jbe loc_1004A5D  +
call loc_100E554  +
cmp [esi+18h] edi +
jnb loc_1004A6F  +
push dword ptr [esi+14h]  +
mov ecx esi +
push edi  +
call sub_10047A8  +
jmp loc_1004A9B  +
cmp [ebp+arg_4] 0 +
jz loc_1004A8F  +
cmp edi 10h +
jnb loc_1004A8F  +
mov eax [esi+14h] +
cmp edi eax +
jnb loc_1004A83  +
mov eax edi +
push eax  +
push 1  +
mov ecx esi +
call sub_10046E6  +
jmp loc_1004A9B  +
test edi edi +
jnz loc_1004A9B  +
push edi  +
mov ecx esi +
call sub_10043AC  +
xor eax eax +
cmp eax edi +
sbb eax eax +
pop edi  +
neg eax  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10048C7  +
test byte ptr [ebp+8] 1 +
jz loc_1004AC8  +
push esi  +
call sub_100E4D4  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1004888  +
lea ecx [esi+18h] +
mov dword ptr [esi] offset off_1001278 +
call sub_1004927  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1004888  +
lea ecx [esi+18h] +
mov dword ptr [esi] offset off_1001288 +
call sub_1004927  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1004888  +
lea ecx [esi+18h] +
mov dword ptr [esi] offset off_1001298 +
call sub_1004927  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1004888  +
lea ecx [esi+18h] +
mov dword ptr [esi] offset off_10012A8 +
call sub_1004927  +
lea ecx [esi+34h] +
call sub_1004927  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push 0  +
push 1  +
lea ecx [esi+18h] +
call sub_10044B8  +
mov ecx esi +
pop esi  +
jmp sub_10048C7  +
***
mov edi edi +
push esi  +
mov esi ecx +
push 0  +
push 1  +
lea ecx [esi+34h] +
call sub_10044B8  +
push 0  +
push 1  +
lea ecx [esi+18h] +
call sub_10044B8  +
mov ecx esi +
pop esi  +
jmp sub_10048C7  +
***
call __EH_prolog3_catch  +
mov ecx [ebp-18h] +
push dword ptr [ebp+8]  +
mov eax [ecx] +
call dword ptr [eax]  +
push eax  +
mov eax ds:_iob +
add eax 40h +
push offset aFailedToPrintE  +
push eax  +
call ds:fwprintf  +
add esp 10h +
mov eax offset loc_1004C59 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
call sub_1004507  +
mov [ebp+var_4] eax +
cmp eax [esi+4] +
jz loc_1004CBE  +
add eax 0Ch +
push eax  +
push [ebp+arg_4]  +
mov ecx esi +
call sub_1004438  +
test al al +
jnz loc_1004CBE  +
lea eax [ebp+var_4] +
jmp loc_1004CC7  +
mov eax [esi+4] +
mov [ebp+arg_4] eax +
lea eax [ebp+arg_4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
push 0  +
push 1  +
lea ecx [esi+0Ch] +
mov dword ptr [esi] offset off_10013AC +
call sub_10046E6  +
mov ecx esi +
pop esi  +
jmp ??1exception@@UAE@XZ  +
***
cmp dword ptr [ecx+24h] 10h +
jb loc_1004D06  +
mov eax [ecx+10h] +
retn   +
***
lea eax [ecx+10h] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1004CD8  +
test byte ptr [ebp+8] 1 +
jz loc_1004D29  +
push esi  +
call sub_100E4D4  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov ebx ecx +
cmp [edi+14h] eax +
jnb loc_1004D4F  +
call loc_100E591  +
mov esi [edi+14h] +
mov eax [ebp+arg_4] +
sub esi eax +
cmp [ebp+arg_8] esi +
jnb loc_1004D5F  +
mov esi [ebp+arg_8] +
mov ecx ebx +
cmp ebx edi +
jnz loc_1004D7D  +
push 0FFFFFFFFh  +
add esi eax +
push esi  +
call sub_100457D  +
push [ebp+arg_4]  +
mov ecx ebx +
push 0  +
call sub_100457D  +
jmp loc_1004DBE  +
push 0  +
push esi  +
call sub_100497E  +
test al al +
jz loc_1004DBE  +
cmp dword ptr [edi+18h] 8 +
jb loc_1004D94  +
mov edi [edi+4] +
jmp loc_1004D97  +
add edi 4 +
mov ecx [ebx+18h] +
cmp ecx 8 +
jb loc_1004DA4  +
mov eax [ebx+4] +
jmp loc_1004DA7  +
lea eax [ebx+4] +
mov edx [ebp+arg_4] +
push esi  +
lea edx [edi+edx*2] +
push edx  +
push ecx  +
push eax  +
call sub_10043D2  +
push esi  +
mov ecx ebx +
call sub_1004324  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
push 0  +
push 1  +
lea ecx [esi+20h] +
call sub_10044B8  +
push 0  +
push 1  +
mov ecx esi +
call sub_10044B8  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push 0  +
call sub_1004A0E  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov ebx ecx +
cmp [edi+14h] eax +
jnb loc_1004E21  +
call loc_100E591  +
mov esi [edi+14h] +
mov eax [ebp+arg_4] +
sub esi eax +
cmp [ebp+arg_8] esi +
jnb loc_1004E31  +
mov esi [ebp+arg_8] +
mov ecx ebx +
cmp ebx edi +
jnz loc_1004E4F  +
push 0FFFFFFFFh  +
add esi eax +
push esi  +
call sub_1004735  +
push [ebp+arg_4]  +
mov ecx ebx +
push 0  +
call sub_1004735  +
jmp loc_1004E8F  +
push 0  +
push esi  +
call sub_1004A47  +
test al al +
jz loc_1004E8F  +
cmp dword ptr [edi+18h] 10h +
jb loc_1004E66  +
mov edi [edi+4] +
jmp loc_1004E69  +
add edi 4 +
mov ecx [ebx+18h] +
cmp ecx 10h +
jb loc_1004E76  +
mov eax [ebx+4] +
jmp loc_1004E79  +
lea eax [ebx+4] +
mov edx [ebp+arg_4] +
push esi  +
add edi edx +
push edi  +
push ecx  +
push eax  +
call sub_10043F4  +
push esi  +
mov ecx ebx +
call sub_10043AC  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_1004242  +
test al al +
jz loc_1004ED1  +
cmp dword ptr [esi+18h] 10h +
jb loc_1004EBE  +
mov eax [esi+4] +
jmp loc_1004EC1  +
lea eax [esi+4] +
push [ebp+arg_4]  +
sub edi eax +
push edi  +
push esi  +
mov ecx esi +
call sub_1004E07  +
jmp loc_1004F08  +
push 0  +
push [ebp+arg_4]  +
mov ecx esi +
call sub_1004A47  +
test al al +
jz loc_1004F06  +
mov ecx [esi+18h] +
cmp ecx 10h +
jb loc_1004EEE  +
mov eax [esi+4] +
jmp loc_1004EF1  +
lea eax [esi+4] +
push [ebp+arg_4]  +
push edi  +
push ecx  +
push eax  +
call sub_10043F4  +
push [ebp+arg_4]  +
mov ecx esi +
call sub_10043AC  +
mov eax esi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1004B60  +
test byte ptr [ebp+8] 1 +
jz loc_1004F2D  +
push esi  +
call sub_100E4D4  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1004B7E  +
test byte ptr [ebp+8] 1 +
jz loc_1004F53  +
push esi  +
call sub_100E4D4  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_100434C  +
test al al +
jz loc_1004F95  +
cmp dword ptr [esi+18h] 8 +
jb loc_1004F80  +
mov eax [esi+4] +
jmp loc_1004F83  +
lea eax [esi+4] +
push [ebp+arg_4]  +
sub edi eax +
sar edi 1 +
push edi  +
push esi  +
mov ecx esi +
call sub_1004D35  +
jmp loc_1004FCC  +
push 0  +
push [ebp+arg_4]  +
mov ecx esi +
call sub_100497E  +
test al al +
jz loc_1004FCA  +
mov ecx [esi+18h] +
cmp ecx 8 +
jb loc_1004FB2  +
mov eax [esi+4] +
jmp loc_1004FB5  +
lea eax [esi+4] +
push [ebp+arg_4]  +
push edi  +
push ecx  +
push eax  +
call sub_10043D2  +
push [ebp+arg_4]  +
mov ecx esi +
call sub_1004324  +
mov eax esi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0  +
mov dword ptr [esi+18h] 0Fh +
call sub_10043AC  +
push 0FFFFFFFFh  +
push 0  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1004E07  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
lea edx [eax+1] +
push ebx  +
mov bl [eax] +
inc eax  +
test bl bl +
jnz loc_1005013  +
sub eax edx +
push eax  +
push [ebp+arg_0]  +
call sub_1004E9D  +
pop ebx  +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
call ??0exception@@QAE@XZ  +
push dword ptr [ebp+8]  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+0Ch] +
mov dword ptr [esi] offset off_10013AC +
call sub_1004FD7  +
mov eax esi +
call __EH_epilog3  +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
mov edi [ebp+8] +
push edi  +
call ??0exception@@QAE@ABV0@@Z  +
and dword ptr [ebp-4] 0 +
add edi 0Ch +
push edi  +
lea ecx [esi+0Ch] +
mov dword ptr [esi] offset off_10013AC +
call sub_1004FD7  +
mov eax esi +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100502F  +
mov dword ptr [esi] offset off_10013B8 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
jmp sub_1004CD8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_10013B8 +
call sub_1004CD8  +
test byte ptr [ebp+8] 1 +
jz loc_10050FA  +
push esi  +
call sub_100E4D4  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
lea edx [eax+2] +
push esi  +
mov si [eax] +
inc eax  +
inc eax  +
test si si +
jnz loc_1005112  +
sub eax edx +
sar eax 1 +
push eax  +
push [ebp+arg_0]  +
call sub_1004F5F  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1005069  +
mov dword ptr [esi] offset off_10013B8 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
jmp sub_1004CD8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_10013C4 +
call sub_1004CD8  +
test byte ptr [ebp+8] 1 +
jz loc_1005185  +
push esi  +
call sub_100E4D4  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1005069  +
mov dword ptr [esi] offset off_10013C4 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
lea ecx [esi+0Ch] +
call sub_1004DCC  +
test [ebp+arg_0] 1 +
jz loc_10051D0  +
push esi  +
call sub_100E4D4  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
jmp loc_10051F0  +
push esi  +
call sub_1004DEF  +
add esi 1Ch +
cmp esi [ebp+arg_4] +
jnz loc_10051E7  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0  +
mov dword ptr [esi+18h] 0Fh +
call sub_10043AC  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1005007  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0  +
mov dword ptr [esi+18h] 7 +
call sub_1004324  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1005106  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ecx  +
lea ecx [ebp-28h] +
call sub_1005069  +
push offset dword_1010D0C  +
lea eax [ebp-28h] +
push eax  +
call _CxxThrowException  +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ecx  +
lea ecx [ebp-28h] +
call sub_1005133  +
push offset dword_1010D44  +
lea eax [ebp-28h] +
push eax  +
call _CxxThrowException  +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ecx  +
lea ecx [ebp-28h] +
call sub_1005191  +
push offset dword_1010D80  +
lea eax [ebp-28h] +
push eax  +
call _CxxThrowException  +
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10051DC  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push 0  +
call sub_10051B3  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push esi  +
push edi  +
push [ebp+arg_4]  +
mov esi ecx +
lea ecx [ebp+var_1C] +
call sub_100522B  +
lea eax [ebp+var_1C] +
push eax  +
lea eax [ebp+arg_4] +
lea edi [esi+8] +
push eax  +
mov ecx edi +
call sub_1004C8E  +
push 0  +
push 1  +
lea ecx [ebp+var_1C] +
call sub_10044B8  +
mov ecx [ebp+arg_4] +
cmp ecx [esi+0Ch] +
jnz loc_100536A  +
cmp [ebp+arg_8] 0 +
jz loc_100536A  +
push [ebp+arg_8]  +
lea ecx [ebp+var_1C] +
call sub_100522B  +
lea eax [ebp+var_1C] +
push eax  +
push [ebp+arg_0]  +
mov ecx edi +
call sub_1004C8E  +
push 0  +
push 1  +
lea ecx [ebp+var_1C] +
call sub_10044B8  +
mov eax [ebp+arg_0] +
jmp loc_100536F  +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
xor ebx ebx +
push ebx  +
push [ebp+arg_0]  +
lea eax [ebp+arg_0] +
push eax  +
mov esi ecx +
call sub_10052FD  +
mov eax [eax] +
cmp eax [esi+0Ch] +
jz loc_10053A2  +
cmp [eax+28h] bl +
jnz loc_10053A2  +
mov al 1 +
jmp loc_10053C4  +
cmp [ebp+arg_4] ebx +
jz loc_10053C2  +
push ebx  +
push [ebp+arg_4]  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx esi +
call sub_10052FD  +
mov eax [eax] +
cmp eax [esi+0Ch] +
jz loc_10053C2  +
cmp [eax+28h] bl +
jz loc_100539E  +
xor al al +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
push 0  +
push offset a?  +
mov esi ecx +
call sub_100537A  +
test al al +
jnz loc_10053FD  +
push offset aHelp  +
push offset asc_10013E4  +
mov ecx esi +
call sub_100537A  +
test al al +
jnz loc_10053FD  +
xor eax eax +
pop esi  +
retn   +
xor eax eax +
inc eax  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor eax eax +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] eax +
cmp edi eax +
jnz loc_1005426  +
xor al al +
jmp loc_100544A  +
cmp edi 9249249h +
jbe loc_1005433  +
call loc_100B801  +
push eax  +
push edi  +
call loc_100412F  +
imul edi edi +
add edi eax +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] edi +
mov al 1 +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor eax eax +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] eax +
cmp edi eax +
jnz loc_1005474  +
xor al al +
jmp loc_1005496  +
cmp edi 7FFFFFFFh +
jbe loc_1005481  +
call loc_100B801  +
push eax  +
push edi  +
call loc_10040E6  +
mov [esi+4] eax +
mov [esi+8] eax +
lea eax [eax+edi*2] +
mov [esi+0Ch] eax +
mov al 1 +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
test eax eax +
jz loc_10054C0  +
push esi  +
push dword ptr [esi+8]  +
push eax  +
call sub_10052C6  +
push dword ptr [esi+4]  +
call sub_100E4D4  +
pop ecx  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
and dword ptr [esi+0Ch] 0 +
pop esi  +
retn   +
***
call __EH_prolog3  +
mov [ebp-10h] ecx +
mov edi [ebp+0Ch] +
cmp byte ptr [edi+49h] 0 +
jz loc_100551D  +
push offset aInvalidMapSetT  +
lea ecx [ebp-2Ch] +
call sub_10051FF  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [ebp-54h] +
call sub_100502F  +
push offset dword_1010D80  +
lea eax [ebp-54h] +
push eax  +
mov dword ptr [ebp-54h] offset off_10013C4 +
call _CxxThrowException  +
lea ecx [ebp+0Ch] +
call sub_100409F  +
mov edx [edi] +
cmp byte ptr [edx+49h] 0 +
jz loc_1005532  +
mov ebx [edi+8] +
jmp loc_100554B  +
mov eax [edi+8] +
cmp byte ptr [eax+49h] 0 +
jz loc_100553F  +
mov ebx edx +
jmp loc_100554B  +
mov eax [ebp+0Ch] +
lea ecx [eax+8] +
mov ebx [ecx] +
cmp eax edi +
jnz loc_10055B4  +
cmp byte ptr [ebx+49h] 0 +
mov esi [edi+4] +
jnz loc_1005557  +
mov [ebx+4] esi +
mov ecx [ebp-10h] +
mov eax [ecx+4] +
cmp [eax+4] edi +
jnz loc_1005567  +
mov [eax+4] ebx +
jmp loc_1005572  +
cmp [esi] edi +
jnz loc_100556F  +
mov [esi] ebx +
jmp loc_1005572  +
mov [esi+8] ebx +
mov eax [ecx+4] +
cmp [eax] edi +
jnz loc_1005591  +
cmp byte ptr [ebx+49h] 0 +
jz loc_1005583  +
mov eax esi +
jmp loc_100558C  +
push ebx  +
call sub_1004034  +
mov ecx [ebp-10h] +
mov edx [ecx+4] +
mov [edx] eax +
mov eax [ecx+4] +
cmp [eax+8] edi +
jnz loc_1005610  +
cmp byte ptr [ebx+49h] 0 +
jz loc_10055A3  +
mov eax esi +
jmp loc_10055AC  +
push ebx  +
call sub_1004016  +
mov ecx [ebp-10h] +
mov edx [ecx+4] +
mov [edx+8] eax +
jmp loc_1005610  +
mov [edx+4] eax +
mov edx [edi] +
mov [eax] edx +
cmp eax [edi+8] +
jnz loc_10055C4  +
mov esi eax +
jmp loc_10055DD  +
cmp byte ptr [ebx+49h] 0 +
mov esi [eax+4] +
jnz loc_10055D0  +
mov [ebx+4] esi +
mov [esi] ebx +
mov edx [edi+8] +
mov [ecx] edx +
mov ecx [edi+8] +
mov [ecx+4] eax +
mov ecx [ebp-10h] +
mov ecx [ecx+4] +
cmp [ecx+4] edi +
jnz loc_10055ED  +
mov [ecx+4] eax +
jmp loc_10055FB  +
mov ecx [edi+4] +
cmp [ecx] edi +
jnz loc_10055F8  +
mov [ecx] eax +
jmp loc_10055FB  +
mov [ecx+8] eax +
mov ecx [edi+4] +
mov [eax+4] ecx +
mov cl [eax+48h] +
mov dl [edi+48h] +
mov [eax+48h] dl +
mov [edi+48h] cl +
mov ecx [ebp-10h] +
cmp byte ptr [edi+48h] 1 +
jnz loc_100571A  +
jmp loc_10056D4  +
cmp byte ptr [ebx+48h] 1 +
jnz loc_1005716  +
mov eax [esi] +
cmp ebx eax +
jnz loc_100569B  +
mov eax [esi+8] +
cmp byte ptr [eax+48h] 0 +
jnz loc_100564C  +
mov byte ptr [eax+48h] 1 +
push esi  +
mov byte ptr [esi+48h] 0 +
call sub_1003FCA  +
mov eax [esi+8] +
mov ecx [ebp-10h] +
cmp byte ptr [eax+49h] 0 +
jnz loc_10056CF  +
mov edx [eax] +
cmp byte ptr [edx+48h] 1 +
jnz loc_1005663  +
mov edx [eax+8] +
cmp byte ptr [edx+48h] 1 +
jz loc_10056CB  +
mov edx [eax+8] +
cmp byte ptr [edx+48h] 1 +
jnz loc_1005682  +
mov edx [eax] +
mov byte ptr [edx+48h] 1 +
push eax  +
mov byte ptr [eax+48h] 0 +
call sub_1004051  +
mov eax [esi+8] +
mov ecx [ebp-10h] +
mov dl [esi+48h] +
mov [eax+48h] dl +
mov byte ptr [esi+48h] 1 +
mov eax [eax+8] +
push esi  +
mov byte ptr [eax+48h] 1 +
call sub_1003FCA  +
jmp loc_1005716  +
cmp byte ptr [eax+48h] 0 +
jnz loc_10056B4  +
mov byte ptr [eax+48h] 1 +
push esi  +
mov byte ptr [esi+48h] 0 +
call sub_1004051  +
mov eax [esi] +
mov ecx [ebp-10h] +
cmp byte ptr [eax+49h] 0 +
jnz loc_10056CF  +
mov edx [eax+8] +
cmp byte ptr [edx+48h] 1 +
jnz loc_10056E2  +
mov edx [eax] +
cmp byte ptr [edx+48h] 1 +
jnz loc_10056E2  +
mov byte ptr [eax+48h] 0 +
mov ebx esi +
mov esi [esi+4] +
mov eax [ecx+4] +
cmp ebx [eax+4] +
jnz loc_100561F  +
jmp loc_1005716  +
mov edx [eax] +
cmp byte ptr [edx+48h] 1 +
jnz loc_1005700  +
mov edx [eax+8] +
mov byte ptr [edx+48h] 1 +
push eax  +
mov byte ptr [eax+48h] 0 +
call sub_1003FCA  +
mov eax [esi] +
mov ecx [ebp-10h] +
mov dl [esi+48h] +
mov [eax+48h] dl +
mov byte ptr [esi+48h] 1 +
mov eax [eax] +
push esi  +
mov byte ptr [eax+48h] 1 +
call sub_1004051  +
mov byte ptr [ebx+48h] 1 +
push edi  +
call sub_10052E5  +
push edi  +
call sub_100E4D4  +
pop ecx  +
mov ecx [ebp-10h] +
mov eax [ecx+8] +
test eax eax +
jbe loc_1005735  +
dec eax  +
mov [ecx+8] eax +
mov eax [ebp+8] +
mov ecx [ebp+0Ch] +
mov [eax] ecx +
call __EH_epilog3  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
cmp byte ptr [edi+49h] 0 +
mov ebx ecx +
mov esi edi +
jnz loc_1005780  +
push dword ptr [esi+8]  +
mov ecx ebx +
call sub_100574A  +
mov esi [esi] +
push edi  +
call sub_10052E5  +
push edi  +
call sub_100E4D4  +
cmp byte ptr [esi+49h] 0 +
pop ecx  +
mov edi esi +
jz loc_100575F  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_1004888  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+18h] +
mov dword ptr [esi] offset off_1001414 +
call sub_1004927  +
lea ecx [esi+34h] +
call sub_1004927  +
push 0  +
lea ecx [esi+50h] +
mov byte ptr [ebp-4] 2 +
call sub_1005455  +
mov byte ptr [esi+60h] 0 +
mov eax esi +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100B7C1  +
test byte ptr [ebp+8] 1 +
jz loc_10057F5  +
push esi  +
call sub_100E4D4  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
mov esi ds:GetStdHandle +
push 0FFFFFFF5h  +
call esi  +
push 0FFFFFFF4h  +
mov edi eax +
call esi  +
mov esi eax +
xor eax eax +
mov [ebp-18h] eax +
mov [ebp-14h] eax +
mov [ebp-10h] eax +
mov [ebp-4] eax +
cmp [ebp+8] eax +
jz loc_100584F  +
push dword ptr [ebp+8]  +
lea eax [ebp-1Ch] +
push eax  +
call sub_100FB79  +
push dword ptr [ebp-18h]  +
push offset aS  +
push esi  +
call sub_100790F  +
add esp 0Ch +
push 28h  +
lea eax [ebp-1Ch] +
push eax  +
call sub_100FB79  +
push dword ptr [ebp-18h]  +
push offset aS_0  +
push edi  +
call sub_100790F  +
add esp 0Ch +
lea ecx [ebp-1Ch] +
call sub_1008960  +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100578C  +
mov dword ptr [esi] offset off_100143C +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+4] +
mov eax [esi] +
push dword ptr [eax+4]  +
call sub_100574A  +
mov eax [esi] +
mov [eax+4] eax +
mov eax [esi] +
and dword ptr [edi+8] 0 +
mov [eax] eax +
mov esi [esi] +
pop edi  +
mov [esi+8] esi +
pop esi  +
retn   +
***
call __EH_prolog3  +
mov ecx [ebp+8] +
push 0  +
call sub_1006150  +
and dword ptr [ebp+8] 0 +
mov esi eax +
and dword ptr [ebp-4] 0 +
push offset String2  +
push esi  +
call sub_1003D35  +
push 2  +
pop ebx  +
cmp eax ebx +
jz loc_1005ACA  +
push offset aGs  +
push esi  +
call sub_1003D35  +
cmp eax ebx +
jz loc_1005ACA  +
push offset aSetSubscriptio  +
push esi  +
call sub_1003D35  +
cmp eax ebx +
jz loc_1005AA7  +
push offset aSs  +
push esi  +
call sub_1003D35  +
cmp eax ebx +
jz loc_1005AA7  +
push offset aCreateSubscrip  +
push esi  +
call sub_1003D35  +
cmp eax ebx +
jz loc_1005A85  +
push offset aCs  +
push esi  +
call sub_1003D35  +
cmp eax ebx +
jz loc_1005A85  +
push offset aEnumSubscripti  +
push esi  +
call sub_1003D35  +
cmp eax ebx +
jz loc_1005A70  +
push offset aEs  +
push esi  +
call sub_1003D35  +
cmp eax ebx +
jz loc_1005A70  +
push offset aDeleteSubscrip  +
push esi  +
call sub_1003D35  +
cmp eax ebx +
jz loc_1005A5B  +
push offset aDs  +
push esi  +
call sub_1003D35  +
cmp eax ebx +
jz loc_1005A5B  +
push offset aRetrySubscript  +
push esi  +
call sub_1003D35  +
cmp eax ebx +
jz loc_1005A46  +
push offset aRs  +
push esi  +
call sub_1003D35  +
cmp eax ebx +
jz loc_1005A46  +
push offset aGetSubscript_0  +
push esi  +
call sub_1003D35  +
cmp eax ebx +
jz loc_1005A31  +
push offset aGr  +
push esi  +
call sub_1003D35  +
cmp eax ebx +
jz loc_1005A31  +
push offset aQuickConfig  +
push esi  +
call sub_1003D35  +
cmp eax ebx +
jz loc_1005A1C  +
push offset aQc  +
push esi  +
call sub_1003D35  +
cmp eax ebx +
jz loc_1005A1C  +
push esi  +
push 16h  +
push 57h  +
call sub_100792D  +
add esp 0Ch +
xor eax eax +
call __EH_epilog3  +
retn 4  +
push 1Ch  +
call loc_100E4E5  +
pop ecx  +
test eax eax +
jz loc_1005A12  +
mov ecx eax +
call sub_100490E  +
jmp loc_1005A14  +
push 50h  +
call loc_100E4E5  +
pop ecx  +
test eax eax +
jz loc_1005A12  +
mov ecx eax +
call sub_1004B37  +
jmp loc_1005A14  +
push 34h  +
call loc_100E4E5  +
pop ecx  +
test eax eax +
jz loc_1005A12  +
mov ecx eax +
call sub_1004B16  +
jmp loc_1005A14  +
push 34h  +
call loc_100E4E5  +
pop ecx  +
test eax eax +
jz loc_1005A12  +
mov ecx eax +
call sub_1004AF5  +
jmp loc_1005A14  +
push 18h  +
call loc_100E4E5  +
pop ecx  +
test eax eax +
jz loc_1005A12  +
mov ecx eax +
call sub_10048F5  +
jmp loc_1005A14  +
push 64h  +
call loc_100E4E5  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
mov [ebp-4] bl +
test ecx ecx +
jz loc_1005A12  +
call sub_1005880  +
jmp loc_1005A14  +
push 64h  +
call loc_100E4E5  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
mov byte ptr [ebp-4] 1 +
test ecx ecx +
jz loc_1005A12  +
call sub_100578C  +
jmp loc_1005A14  +
push 38h  +
call loc_100E4E5  +
pop ecx  +
test eax eax +
jz loc_1005A12  +
mov ecx eax +
call sub_1004AD4  +
jmp loc_1005A14  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [ebp+arg_4] +
cmp ecx [eax] +
jnz loc_1005B11  +
cmp [ebp+arg_8] eax +
jnz loc_1005B11  +
mov ecx esi +
call sub_1005899  +
mov eax [esi+4] +
mov ecx [eax] +
jmp loc_1005B36  +
cmp ecx [ebp+arg_8] +
jz loc_1005B36  +
push edi  +
mov edi ecx +
lea ecx [ebp+arg_4] +
call sub_100409F  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_10054D3  +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jnz loc_1005B17  +
pop edi  +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [eax] +
push eax  +
push ecx  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_1005AEB  +
push dword ptr [esi+4]  +
call sub_100E4D4  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
pop ecx  +
pop esi  +
leave   +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1001244 +
mov dword ptr [esi+4] 0 +
and dword ptr [ebp-4] 0 +
lea ecx [esi+8] +
mov dword ptr [esi] offset off_10015C8 +
call sub_1004952  +
push 0  +
lea ecx [esi+14h] +
mov byte ptr [ebp-4] 1 +
call sub_1005407  +
mov eax esi +
call __EH_epilog3  +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
lea ecx [esi+14h] +
call sub_10054A1  +
lea ecx [esi+8] +
call sub_1005B45  +
mov dword ptr [esi] offset off_1001244 +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1005BCE  +
test byte ptr [ebp+8] 1 +
jz loc_1005C1E  +
push esi  +
call sub_100E4D4  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
push 24h  +
call loc_100E4E5  +
pop ecx  +
mov [ebp-10h] eax +
and dword ptr [ebp-4] 0 +
test eax eax +
jz loc_1005C52  +
mov ecx eax +
call sub_1005B83  +
jmp loc_1005C54  +
xor eax eax +
push eax  +
lea ecx [ebp-10h] +
call sub_1004479  +
mov esi [ebp-10h] +
mov dword ptr [ebp-4] 1 +
test esi esi +
jnz loc_1005C76  +
push 1  +
push 0Eh  +
call loc_10078D8  +
pop ecx  +
pop ecx  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
push dword ptr [ebp+8]  +
call sub_1006DCD  +
lea ecx [esi+14h] +
call sub_1003FAF  +
test eax eax +
jg loc_1005CBE  +
mov ecx esi +
call sub_10053CF  +
test al al +
jz loc_1005CA3  +
push 0  +
call sub_1005801  +
jmp loc_1005D0C  +
push 22h  +
call sub_1005801  +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jz loc_1005CB9  +
mov ecx esi +
call sub_10041EF  +
push 57h  +
pop eax  +
jmp loc_1005D1D  +
push esi  +
call sub_10058C6  +
push eax  +
lea ecx [ebp+0Ch] +
call sub_1004479  +
mov edi [ebp+0Ch] +
mov byte ptr [ebp-4] 2 +
test edi edi +
jnz loc_1005CE3  +
push 1  +
push 0Eh  +
call loc_10078D8  +
pop ecx  +
pop ecx  +
mov ecx esi +
call sub_10053CF  +
mov ecx edi +
test al al +
jz loc_1005CF7  +
mov eax [edi] +
call dword ptr [eax+0Ch]  +
jmp loc_1005CFD  +
push esi  +
call sub_1005F45  +
mov byte ptr [ebp-4] 1 +
test edi edi +
jz loc_1005D0C  +
mov ecx edi +
call sub_10041EF  +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jz loc_1005D1B  +
mov ecx esi +
call sub_10041EF  +
xor eax eax +
call __EH_epilog3  +
retn 8  +
***
call __EH_prolog3_catch_GS  +
mov edi [ebp+0Ch] +
mov esi offset unk_1013388 +
push esi  +
call sub_1003D57  +
push offset aMicrosoftWecut  +
mov dword_10133A8 offset dword_1001228 +
mov off_1013004 esi +
call sub_1003E28  +
xor esi esi +
push esi  +
push esi  +
push 1  +
push esi  +
call ds:HeapSetInformation  +
call ds:GetConsoleOutputCP  +
push eax  +
push offset dword_10015CC  +
lea eax [ebp-114h] +
push 100h  +
push eax  +
call sprintf_s  +
lea eax [ebp-114h] +
push eax  +
push esi  +
call ds:setlocale  +
add esp 18h +
push esi  +
call ds:SetThreadUILanguage  +
push edi  +
push dword ptr [ebp+8]  +
mov [ebp-4] esi +
call sub_1005C2A  +
jmp loc_1005E1C  +
mov esi [ebp-11Ch] +
cmp dword ptr [esi+1Ch] 8 +
jb loc_1005DC2  +
mov eax [esi+8] +
jmp loc_1005DC5  +
lea eax [esi+8] +
mov ecx [esi] +
push eax  +
push ecx  +
call sub_1004BA8  +
mov eax [esi] +
mov [ebp-118h] eax +
mov eax offset loc_1005DDC +
retn   +
mov eax [ebp-118h] +
jmp loc_1005E1C  +
mov esi [ebp-120h] +
mov eax [esi] +
push 0  +
mov ecx esi +
call dword ptr [eax]  +
push eax  +
call sub_1004BA8  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax]  +
mov [ebp-118h] eax +
mov eax offset loc_1005DDC +
retn   +
push 0  +
push 0Eh  +
call sub_1004BA8  +
mov eax offset loc_1005E19 +
retn   +
push 0Eh  +
pop eax  +
call sub_100EAE5  +
retn   +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push dword ptr [ecx+10h]  +
call sub_1007721  +
pop ecx  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
xor eax eax +
cmp byte_10133AC al +
push eax  +
lea eax [ebp+NumberOfBytesWritten] +
mov [ebp+var_8] 0EFh +
mov byte ptr [ebp-7] 0BBh +
mov [ebp+var_6] 0BFh +
mov byte ptr [ebp+Buffer] 0FFh +
mov byte ptr [ebp+Buffer+1] 0FEh +
push eax  +
jnz loc_1005E73  +
push 3  +
lea eax [ebp+var_8] +
jmp loc_1005E78  +
push 2  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+NumberOfBytesWritten]  +
call ds:WriteFile  +
test eax eax +
jnz locret_1005E93  +
call ds:__imp_GetLastError  +
push eax  +
call sub_10074AD  +
pop ecx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100430A  +
mov eax [ebp+arg_0] +
mov [esi] eax +
test eax eax +
jz loc_1005EBC  +
add eax 4 +
push eax  +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
cmp [ebp+arg_4] 0 +
mov eax [ebp+arg_0] +
setz cl  +
mov [eax] cl +
mov ecx [ebp+arg_8] +
mov [eax+4] ecx +
mov ecx [ebp+arg_C] +
mov [eax+8] ecx +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_C]  +
and [ebp+var_4] 0 +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1005EC8  +
mov eax [ebp+arg_0] +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi [ecx+0Ch] +
push [ebp+arg_0]  +
lea eax [ebp+arg_4] +
push eax  +
call sub_10052FD  +
xor ecx ecx +
cmp [eax] esi +
pop esi  +
setnz cl  +
mov al cl +
pop ebp  +
retn 8  +
***
call __EH_prolog3  +
mov esi ecx +
push dword ptr [ebp+8]  +
lea edi [esi+8] +
mov ecx edi +
call sub_1005E9C  +
mov ecx [edi] +
push offset aVerbose  +
push offset aV  +
call sub_100537A  +
mov ecx [edi] +
push offset aU  +
push offset aUnicode  +
mov [esi+0Ch] al +
call sub_100537A  +
mov byte_10133AC al +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+4]  +
push dword ptr [esi+10h]  +
call ds:GetFileType  +
cmp eax 2 +
jnz loc_1005FB4  +
lea eax [ebp-14h] +
push eax  +
push dword ptr [esi+10h]  +
call ds:GetConsoleMode  +
mov byte ptr [ebp+0Bh] 0 +
test eax eax +
jnz loc_1005FB8  +
mov byte ptr [ebp+0Bh] 1 +
mov ecx [edi] +
push 0  +
mov ebx offset String1 +
push ebx  +
mov byte ptr [ebp-10h] 0 +
call sub_1005F1A  +
test al al +
jz loc_1006021  +
mov edi [edi] +
lea eax [ebp+0Bh] +
push eax  +
push offset dword_10015F4  +
push 0  +
push ebx  +
mov ecx edi +
call sub_100656C  +
push 0  +
push 80h  +
push 2  +
push 0  +
push 1  +
mov edi eax +
push 40000000h  +
push edi  +
call ds:CreateFileW  +
mov [esi+10h] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1006019  +
push edi  +
push 2  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov byte ptr [ebp+0Bh] 1 +
mov byte ptr [ebp-10h] 1 +
push dword ptr [esi+10h]  +
lea eax [ebp-20h] +
push ds:CloseHandle  +
push dword ptr [ebp-10h]  +
push eax  +
call sub_1005EF3  +
and dword ptr [ebp-4] 0 +
cmp byte ptr [ebp+0Bh] 0 +
jz loc_1006048  +
push dword ptr [esi+10h]  +
call sub_1005E42  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+8]  +
lea eax [ebp-20h] +
push eax  +
call sub_10071A4  +
call __EH_epilog3  +
retn 4  +
***
mov edx [ecx+4] +
test edx edx +
jnz loc_10060BC  +
xor eax eax +
retn   +
mov eax [ecx+0Ch] +
sub eax edx +
push 1Ch  +
cdq   +
pop ecx  +
idiv  ecx +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
xor dl dl +
cmp [eax+49h] dl +
jz loc_10060E0  +
mov eax [eax+8] +
jmp loc_1006106  +
mov ecx [eax] +
cmp [ecx+49h] dl +
jnz loc_10060F7  +
push ecx  +
call sub_1004016  +
jmp loc_1006106  +
mov ecx [esi] +
cmp ecx [eax] +
jnz loc_10060FF  +
mov [esi] eax +
mov eax [eax+4] +
cmp [eax+49h] dl +
jz loc_10060EF  +
mov ecx [esi] +
cmp [ecx+49h] dl +
jnz loc_1006108  +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
lea esi [ecx+14h] +
mov ecx esi +
call sub_1003FAF  +
cmp eax [ebp+arg_0] +
jge loc_100612F  +
push 1Eh  +
push 57h  +
call loc_10078D8  +
pop ecx  +
pop ecx  +
mov ecx esi +
call sub_1003FAF  +
cmp eax [ebp+arg_4] +
pop esi  +
jle loc_1006147  +
push 1Dh  +
push 57h  +
call loc_10078D8  +
pop ecx  +
pop ecx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ecx +
test esi esi +
jl loc_100616C  +
lea ecx [edi+14h] +
call sub_1003FAF  +
cmp esi eax +
jl loc_1006177  +
push 1Fh  +
push 57h  +
call loc_10078D8  +
pop ecx  +
pop ecx  +
imul esi esi +
add esi [edi+18h] +
cmp dword ptr [esi+18h] 8 +
jb loc_1006188  +
mov eax [esi+4] +
jmp loc_100618B  +
lea eax [esi+4] +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0  +
mov dword ptr [esi+18h] 7 +
call sub_1004324  +
push 0FFFFFFFFh  +
push 0  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1004D35  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
mov ecx [ebp+8] +
mov [ebp+8] ecx +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_10061EB  +
push dword ptr [ebp+0Ch]  +
call sub_1006196  +
call __EH_epilog3  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
cmp [ebp+arg_0] 0 +
mov [ebp+var_8] ecx +
jnz loc_100623A  +
cmp dword ptr [ecx+10h] 0 +
jbe locret_100631B  +
mov eax [ecx+0Ch] +
mov eax [eax] +
add eax 0Ch +
cmp dword ptr [eax+18h] 8 +
jb loc_1006225  +
mov eax [eax+4] +
jmp loc_1006228  +
add eax 4 +
push eax  +
push 1Ch  +
push 57h  +
call sub_100792D  +
add esp 0Ch +
jmp locret_100631B  +
mov eax [ecx+0Ch] +
push esi  +
mov esi [eax] +
mov [ebp+var_4] esi +
cmp esi eax +
jz loc_100631A  +
push ebx  +
push edi  +
mov eax [ebp+arg_0] +
xor edi edi +
xor bl bl +
cmp [eax] edi +
jz loc_1006283  +
cmp dword ptr [esi+24h] 8 +
jb loc_1006263  +
mov ecx [esi+10h] +
jmp loc_1006266  +
lea ecx [esi+10h] +
push ecx  +
push dword ptr [eax]  +
call sub_1003D35  +
cmp eax 2 +
jz loc_1006281  +
mov eax [ebp+arg_0] +
inc edi  +
lea eax [eax+edi*4] +
cmp dword ptr [eax] 0 +
jnz loc_1006258  +
jmp loc_1006283  +
mov bl 1 +
push 8  +
pop edi  +
cmp [esi+24h] edi +
jb loc_1006290  +
mov eax [esi+10h] +
jmp loc_1006293  +
lea eax [esi+10h] +
push eax  +
push offset String1  +
call sub_1003D35  +
cmp eax 2 +
jnz loc_10062A5  +
mov bl 1 +
cmp [esi+24h] edi +
jb loc_10062AF  +
mov eax [esi+10h] +
jmp loc_10062B2  +
lea eax [esi+10h] +
push eax  +
push offset aU  +
call sub_1003D35  +
cmp eax 2 +
jnz loc_10062C4  +
mov bl 1 +
cmp [esi+24h] edi +
jb loc_10062CE  +
mov eax [esi+10h] +
jmp loc_10062D1  +
lea eax [esi+10h] +
push eax  +
push offset aUnicode  +
call sub_1003D35  +
cmp eax 2 +
jnz loc_10062E3  +
mov bl 1 +
test bl bl +
jnz loc_1006301  +
cmp [esi+24h] edi +
jb loc_10062F1  +
mov esi [esi+10h] +
jmp loc_10062F4  +
add esi 10h +
push esi  +
push 1Ch  +
push 57h  +
call sub_100792D  +
add esp 0Ch +
lea ecx [ebp+var_4] +
call sub_100409F  +
mov esi [ebp+var_4] +
mov eax [ebp+var_8] +
cmp esi [eax+0Ch] +
jnz loc_100624D  +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFFFh  +
push 0  +
push [ebp+arg_0]  +
call sub_1004D35  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov cl [eax] +
add eax 4 +
mov [esi] cl +
push eax  +
lea ecx [esi+4] +
call sub_1006196  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
mov edi [ebp+8] +
push edi  +
call sub_1006196  +
and dword ptr [ebp-4] 0 +
add edi 1Ch +
push edi  +
lea ecx [esi+1Ch] +
call sub_100633E  +
mov eax esi +
call __EH_epilog3  +
retn 4  +
***
call __EH_prolog3_catch  +
mov eax [ebp+10h] +
and dword ptr [ebp-4] 0 +
mov esi [ebp+8] +
mov [ebp-14h] eax +
cmp esi [ebp+0Ch] +
jz loc_10063EA  +
push esi  +
push dword ptr [ebp+10h]  +
call sub_10061C6  +
add dword ptr [ebp+10h] 1Ch +
add esi 1Ch +
jmp loc_10063B7  +
mov esi [ebp-14h] +
jmp loc_10063DC  +
push esi  +
call sub_1004DEF  +
add esi 1Ch +
cmp esi [ebp+10h] +
jnz loc_10063D3  +
push 0  +
push 0  +
call _CxxThrowException  +
mov eax [ebp+10h] +
call __EH_epilog3  +
retn 18h  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+8]  +
call sub_1006196  +
push dword ptr [ebp+0Ch]  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+1Ch] +
call sub_100633E  +
mov eax esi +
call __EH_epilog3  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push [ebp+arg_C]  +
mov esi ecx +
mov [esi] eax +
mov eax [ebp+arg_4] +
mov [esi+4] eax +
mov eax [ebp+arg_8] +
lea ecx [esi+0Ch] +
mov [esi+8] eax +
call sub_1006365  +
mov al [ebp+arg_10] +
mov [esi+48h] al +
mov byte ptr [esi+49h] 0 +
mov eax esi +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
jmp loc_1006483  +
push [ebp+arg_8]  +
mov ecx esi +
call sub_1006324  +
add esi 1Ch +
cmp esi [ebp+arg_4] +
jnz loc_1006476  +
pop esi  +
pop ebp  +
retn   +
***
call __EH_prolog3_catch  +
mov eax [ebp+8] +
and dword ptr [ebp-4] 0 +
mov [ebp-14h] eax +
cmp dword ptr [ebp+0Ch] 0 +
jbe loc_10064DC  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
call sub_10061C6  +
dec dword ptr [ebp+0Ch]  +
add dword ptr [ebp+8] 1Ch +
jmp loc_10064A6  +
mov esi [ebp-14h] +
jmp loc_10064CE  +
push esi  +
call sub_1004DEF  +
add esi 1Ch +
cmp esi [ebp+8] +
jnz loc_10064C5  +
push 0  +
push 0  +
call _CxxThrowException  +
call __EH_epilog3  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100639E  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
cmp [ebp+arg_0] esi +
jz loc_100653A  +
sub [ebp+arg_8] 1Ch +
mov ecx [ebp+arg_8] +
sub esi 1Ch +
push esi  +
call sub_1006324  +
cmp esi [ebp+arg_0] +
jnz loc_1006525  +
mov eax [ebp+arg_8] +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov cl [eax] +
add eax 4 +
mov [esi] cl +
push eax  +
lea ecx [esi+4] +
call sub_1006324  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
lea eax [ebp+arg_4] +
push [ebp+arg_0]  +
mov esi ecx +
push eax  +
call sub_10052FD  +
mov eax [ebp+arg_4] +
cmp eax [esi+0Ch] +
pop esi  +
jnz loc_1006597  +
mov eax [ebp+arg_C] +
mov byte ptr [eax] 0 +
mov eax [ebp+arg_8] +
jmp loc_10065D3  +
cmp byte ptr [eax+28h] 0 +
jnz loc_10065BF  +
cmp dword ptr [eax+24h] 8 +
jb loc_10065A8  +
mov eax [eax+10h] +
jmp loc_10065AB  +
add eax 10h +
push eax  +
push 1Ah  +
push 57h  +
call sub_100792D  +
add esp 0Ch +
mov eax offset dword_10015F4 +
jmp loc_10065D3  +
mov ecx [ebp+arg_C] +
mov byte ptr [ecx] 1 +
cmp dword ptr [eax+44h] 8 +
jb loc_10065D0  +
mov eax [eax+30h] +
jmp loc_10065D3  +
add eax 30h +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+arg_4]  +
lea eax [ebp+arg_4] +
push [ebp+arg_0]  +
mov edi ecx +
push eax  +
call sub_10052FD  +
mov esi [ebp+arg_4] +
cmp esi [edi+0Ch] +
jnz loc_1006607  +
mov eax [ebp+arg_C] +
mov byte ptr [eax] 0 +
mov al [ebp+arg_8] +
jmp loc_100667E  +
cmp byte ptr [esi+28h] 0 +
jnz loc_1006617  +
mov eax [ebp+arg_C] +
mov byte ptr [eax] 1 +
mov al 1 +
jmp loc_100667E  +
cmp dword ptr [esi+44h] 8 +
jb loc_1006622  +
mov eax [esi+30h] +
jmp loc_1006625  +
lea eax [esi+30h] +
push offset aTrue  +
push eax  +
call sub_1003D35  +
cmp eax 2 +
jnz loc_100663F  +
mov al 1 +
mov ecx [ebp+arg_C] +
mov byte ptr [ecx] 1 +
jmp loc_100667E  +
cmp dword ptr [esi+44h] 8 +
jb loc_100664A  +
mov eax [esi+30h] +
jmp loc_100664D  +
lea eax [esi+30h] +
push offset aFalse  +
push eax  +
call sub_1003D35  +
cmp eax 2 +
jnz loc_1006661  +
xor al al +
jmp loc_1006637  +
cmp dword ptr [esi+24h] 8 +
jb loc_100666C  +
mov esi [esi+10h] +
jmp loc_100666F  +
add esi 10h +
push esi  +
push 1Bh  +
push 57h  +
call sub_100792D  +
add esp 0Ch +
xor al al +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
call __EH_prolog3  +
mov ecx [ebp+8] +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_10066B7  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_1006431  +
call __EH_epilog3  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1006490  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1006517  +
add esp 14h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10066C4  +
mov eax [ebp+arg_4] +
imul eax eax +
add eax [ebp+arg_0] +
pop ebp  +
retn 0Ch  +
***
call __EH_prolog3_catch_GS  +
mov eax [ebp+10h] +
mov esi ecx +
push eax  +
lea ecx [ebp-30h] +
mov [ebp-3Ch] esi +
call sub_1006196  +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_10060B2  +
mov edi [ebp+0Ch] +
mov ebx eax +
test edi edi +
jz loc_100690C  +
mov ecx esi +
call sub_1003FAF  +
mov ecx 9249249h +
mov edx ecx +
sub edx eax +
cmp edx edi +
jnb loc_1006792  +
call loc_100B801  +
add eax edi +
cmp ebx eax +
jnb loc_1006853  +
mov edx ebx +
shr edx 1 +
sub ecx edx +
cmp ecx ebx +
jnb loc_10067AA  +
xor ebx ebx +
jmp loc_10067AC  +
add ebx edx +
cmp ebx eax +
jnb loc_10067B2  +
mov ebx eax +
push 0  +
push ebx  +
call loc_100412F  +
mov ecx [esi+4] +
push esi  +
push eax  +
push dword ptr [ebp+8]  +
mov [ebp-34h] eax +
push ecx  +
mov [ebp-38h] eax +
mov byte ptr [ebp-4] 1 +
call sub_10064E9  +
lea ecx [ebp-30h] +
push ecx  +
push edi  +
push eax  +
mov ecx esi +
mov [ebp-38h] eax +
call sub_100671E  +
push esi  +
mov [ebp-38h] eax +
push dword ptr [ebp-38h]  +
mov eax [esi+8] +
push eax  +
push dword ptr [ebp+8]  +
call sub_10064E9  +
mov ecx esi +
call sub_1003FAF  +
add edi eax +
mov eax [esi+4] +
test eax eax +
jz loc_1006818  +
push esi  +
push dword ptr [esi+8]  +
push eax  +
call sub_10052C6  +
push dword ptr [esi+4]  +
call sub_100E4D4  +
pop ecx  +
mov eax [ebp-34h] +
imul ebx ebx +
imul edi edi +
add ebx eax +
add edi eax +
mov [esi+0Ch] ebx +
mov [esi+8] edi +
mov [esi+4] eax +
jmp loc_100690C  +
push dword ptr [ebp-3Ch]  +
push dword ptr [ebp-38h]  +
push dword ptr [ebp-34h]  +
call sub_10052C6  +
push dword ptr [ebp-34h]  +
call sub_100E4D4  +
pop ecx  +
push 0  +
push 0  +
call _CxxThrowException  +
mov ecx [esi+8] +
mov eax ecx +
sub eax [ebp+8] +
push 1Ch  +
cdq   +
pop ebx  +
idiv  ebx +
mov [ebp-34h] ecx +
push esi  +
cmp eax edi +
jnb loc_10068DB  +
mov eax [ebp+8] +
mov ebx edi +
imul ebx ebx +
lea edx [ebx+eax] +
push edx  +
push ecx  +
push eax  +
call sub_10064E9  +
mov eax [esi+8] +
sub eax [ebp+8] +
lea ecx [ebp-30h] +
push ecx  +
push 1Ch  +
pop ecx  +
cdq   +
idiv  ecx +
mov ecx esi +
mov byte ptr [ebp-4] 3 +
sub edi eax +
push edi  +
push dword ptr [esi+8]  +
call sub_100671E  +
add [esi+8] ebx +
mov esi [esi+8] +
and dword ptr [ebp-4] 0 +
lea eax [ebp-30h] +
push eax  +
sub esi ebx +
push esi  +
push dword ptr [ebp+8]  +
call sub_100646B  +
add esp 0Ch +
jmp loc_100690C  +
mov eax [ebp+0Ch] +
mov ecx [ebp-3Ch] +
imul eax eax +
push ecx  +
mov ecx [ecx+8] +
add ecx eax +
push ecx  +
mov ecx [ebp+8] +
add eax ecx +
push eax  +
call sub_10052C6  +
jmp loc_100684A  +
imul edi edi +
push ecx  +
mov ebx ecx +
push ecx  +
sub ebx edi +
push ebx  +
call sub_10064E9  +
push dword ptr [ebp-34h]  +
mov [esi+8] eax +
push ebx  +
push dword ptr [ebp+8]  +
call sub_10066F2  +
lea eax [ebp-30h] +
push eax  +
mov eax [ebp+8] +
add edi eax +
push edi  +
push eax  +
call sub_100646B  +
add esp 18h +
push 0  +
push 1  +
lea ecx [ebp-30h] +
call sub_10044B8  +
call sub_100EAE5  +
retn 0Ch  +
***
call __EH_prolog3_catch  +
mov esi ecx +
push 0  +
push 1  +
call loc_1004178  +
push dword ptr [ebp+18h]  +
and dword ptr [ebp-4] 0 +
push dword ptr [ebp+14h]  +
mov ecx esi +
push dword ptr [ebp+10h]  +
mov [ebp-14h] eax +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push eax  +
call sub_1006689  +
mov eax [ebp-14h] +
call __EH_epilog3  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
call sub_1003FAF  +
test eax eax +
jnz loc_1006993  +
xor esi esi +
jmp loc_10069A1  +
mov eax [ebp+arg_4] +
sub eax [edi+4] +
push 1Ch  +
cdq   +
pop ecx  +
idiv  ecx +
mov esi eax +
push [ebp+arg_8]  +
mov ecx edi +
push 1  +
push [ebp+arg_4]  +
call sub_1006744  +
imul esi esi +
add esi [edi+4] +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
call __EH_prolog3  +
mov edi ecx +
cmp dword ptr [edi+8] 4444443h +
jb loc_1006A08  +
push offset aMapSetTTooLong  +
lea ecx [ebp-28h] +
call sub_10051FF  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_10050A8  +
push offset dword_1010D44  +
lea eax [ebp-50h] +
push eax  +
call _CxxThrowException  +
mov eax [edi+4] +
mov esi [ebp+10h] +
push 0  +
push dword ptr [ebp+14h]  +
push eax  +
push esi  +
push eax  +
call sub_1006925  +
inc dword ptr [edi+8]  +
mov ebx eax +
mov eax [edi+4] +
cmp esi eax +
jnz loc_1006A34  +
mov [eax+4] ebx +
mov eax [edi+4] +
mov [eax] ebx +
mov eax [edi+4] +
jmp loc_1006A52  +
cmp byte ptr [ebp+0Ch] 0 +
jz loc_1006A47  +
mov [esi] ebx +
mov eax [edi+4] +
cmp esi [eax] +
jnz loc_1006A55  +
mov [eax] ebx +
jmp loc_1006A55  +
mov [esi+8] ebx +
mov eax [edi+4] +
cmp esi [eax+8] +
jnz loc_1006A55  +
mov [eax+8] ebx +
mov esi ebx +
lea eax [ebx+4] +
jmp loc_1006AEF  +
mov ecx [eax] +
mov edx [ecx+4] +
cmp ecx [edx] +
jnz loc_1006AA0  +
mov edx [edx+8] +
cmp byte ptr [edx+48h] 0 +
jz loc_1006AA8  +
cmp esi [ecx+8] +
jnz loc_1006A80  +
mov esi ecx +
push esi  +
mov ecx edi +
call sub_1003FCA  +
mov eax [esi+4] +
mov byte ptr [eax+48h] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
mov byte ptr [eax+48h] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_1004051  +
jmp loc_1006AEC  +
mov edx [edx] +
cmp byte ptr [edx+48h] 0 +
jnz loc_1006AC0  +
mov byte ptr [ecx+48h] 1 +
mov byte ptr [edx+48h] 1 +
mov ecx [eax] +
mov ecx [ecx+4] +
mov byte ptr [ecx+48h] 0 +
mov eax [eax] +
mov esi [eax+4] +
jmp loc_1006AEC  +
cmp esi [ecx] +
jnz loc_1006ACE  +
mov esi ecx +
push esi  +
mov ecx edi +
call sub_1004051  +
mov eax [esi+4] +
mov byte ptr [eax+48h] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
mov byte ptr [eax+48h] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_1003FCA  +
lea eax [esi+4] +
mov ecx [eax] +
cmp byte ptr [ecx+48h] 0 +
jz loc_1006A5F  +
mov eax [edi+4] +
mov eax [eax+4] +
mov byte ptr [eax+48h] 1 +
mov eax [ebp+8] +
mov [eax] ebx +
call __EH_epilog3  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
call sub_1003FAF  +
mov ecx esi +
mov edi eax +
call sub_10060B2  +
push [ebp+arg_0]  +
cmp edi eax +
mov eax [esi+8] +
mov ecx esi +
jnb loc_1006B47  +
push 1  +
push eax  +
call sub_100671E  +
mov [esi+8] eax +
jmp loc_1006B51  +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
call sub_100697D  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+4] +
mov esi [eax+4] +
mov ebx eax +
mov al 1 +
mov byte ptr [ebp+var_8] al +
jmp loc_1006B95  +
lea eax [esi+0Ch] +
push eax  +
push [ebp+arg_4]  +
mov ecx edi +
mov ebx esi +
call sub_1004438  +
mov byte ptr [ebp+var_8] al +
test al al +
jz loc_1006B92  +
mov esi [esi] +
jmp loc_1006B95  +
mov esi [esi+8] +
cmp byte ptr [esi+49h] 0 +
jz loc_1006B77  +
mov esi ebx +
mov [ebp+var_4] esi +
test al al +
jz loc_1006BD4  +
mov eax [edi+4] +
cmp ebx [eax] +
jnz loc_1006BC9  +
push [ebp+arg_4]  +
push ebx  +
push 1  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx edi +
call sub_10069C6  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
mov byte ptr [eax+4] 1 +
jmp loc_1006BF8  +
lea ecx [ebp+var_4] +
call sub_10060CD  +
mov esi [ebp+var_4] +
push [ebp+arg_4]  +
lea eax [esi+0Ch] +
push eax  +
mov ecx edi +
call sub_1004438  +
test al al +
jz loc_1006BEF  +
push [ebp+arg_4]  +
push ebx  +
push [ebp+var_8]  +
jmp loc_1006BB1  +
mov eax [ebp+arg_0] +
mov [eax] esi +
mov byte ptr [eax+4] 0 +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi ecx +
cmp dword ptr [esi+8] 0 +
jnz loc_1006C2C  +
push [ebp+arg_8]  +
push dword ptr [esi+4]  +
push 1  +
push [ebp+arg_0]  +
call sub_10069C6  +
mov eax [ebp+arg_0] +
jmp loc_1006D42  +
mov eax [esi+4] +
mov ecx [ebp+arg_4] +
push ebx  +
push edi  +
mov edi [ebp+arg_8] +
cmp ecx [eax] +
jnz loc_1006C5A  +
add ecx 0Ch +
push ecx  +
push edi  +
mov ecx esi +
call sub_1004438  +
test al al +
jz loc_1006D2D  +
push edi  +
push [ebp+arg_4]  +
mov ecx esi +
jmp loc_1006D1E  +
cmp ecx eax +
jnz loc_1006C85  +
mov eax [eax+8] +
add eax 0Ch +
push edi  +
push eax  +
mov ecx esi +
call sub_1004438  +
test al al +
jz loc_1006D2D  +
mov eax [esi+4] +
push edi  +
push dword ptr [eax+8]  +
mov ecx esi +
push 0  +
jmp loc_1006D20  +
add ecx 0Ch +
push ecx  +
push edi  +
mov ecx esi +
call sub_1004438  +
test al al +
jz loc_1006CCA  +
mov eax [ebp+arg_4] +
lea ecx [ebp+arg_8] +
mov [ebp+arg_8] eax +
call sub_10060CD  +
mov ebx [ebp+arg_8] +
push edi  +
lea eax [ebx+0Ch] +
push eax  +
mov ecx esi +
call sub_1004438  +
test al al +
jz loc_1006CCA  +
mov eax [ebx+8] +
cmp byte ptr [eax+49h] 0 +
push edi  +
mov ecx esi +
jz loc_1006CC5  +
push ebx  +
jmp loc_1006D19  +
push [ebp+arg_4]  +
jmp loc_1006D1E  +
mov eax [ebp+arg_4] +
push edi  +
add eax 0Ch +
push eax  +
mov ecx esi +
call sub_1004438  +
test al al +
jz loc_1006D2D  +
mov eax [ebp+arg_4] +
mov [ebp+arg_8] eax +
mov eax [esi+4] +
lea ecx [ebp+arg_8] +
mov [ebp+var_4] eax +
call sub_100409F  +
mov ebx [ebp+arg_8] +
cmp ebx [ebp+var_4] +
jz loc_1006D09  +
lea eax [ebx+0Ch] +
push eax  +
push edi  +
mov ecx esi +
call sub_1004438  +
test al al +
jz loc_1006D2D  +
mov eax [ebp+arg_4] +
mov ecx [eax+8] +
cmp byte ptr [ecx+49h] 0 +
push edi  +
mov ecx esi +
jz loc_1006D1D  +
push eax  +
push 0  +
jmp loc_1006D20  +
push ebx  +
push 1  +
push [ebp+arg_0]  +
call sub_10069C6  +
mov eax [ebp+arg_0] +
jmp loc_1006D40  +
push edi  +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
call sub_1006B5C  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 0Ch  +
***
call __EH_prolog3  +
mov edi ecx +
push dword ptr [ebp+8]  +
call sub_1004507  +
mov esi eax +
cmp esi [edi+4] +
jz loc_1006D7B  +
lea eax [esi+0Ch] +
push eax  +
push dword ptr [ebp+8]  +
mov ecx edi +
call sub_1004438  +
test al al +
jz loc_1006DBD  +
lea ecx [ebp-2Ch] +
call sub_1004927  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-30h] +
push eax  +
push dword ptr [ebp+8]  +
lea ecx [ebp-6Ch] +
call sub_10063FA  +
push eax  +
push esi  +
lea eax [ebp-10h] +
push eax  +
mov ecx edi +
mov byte ptr [ebp-4] 1 +
call sub_1006C04  +
mov esi [eax] +
lea ecx [ebp-6Ch] +
call sub_1004DCC  +
push 0  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_10044B8  +
lea eax [esi+28h] +
call __EH_epilog3  +
retn 4  +
***
call __EH_prolog3_GS  +
mov eax [ebp+0Ch] +
mov ebx ecx +
lea ecx [ebp-2Ch] +
mov [ebp-6Ch] ebx +
mov [ebp-74h] eax +
call sub_1004927  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-68h] +
call sub_1004927  +
xor eax eax +
inc eax  +
cmp [ebp+8] eax +
mov byte ptr [ebp-4] 1 +
mov [ebp-70h] eax +
jle loc_1006F3D  +
mov ecx [ebp-74h] +
lea edi [ecx+eax*4] +
mov eax [edi] +
movzx ecx word ptr [eax] +
cmp cx 2Dh +
jz loc_1006E50  +
cmp cx 2Fh +
jz loc_1006E50  +
push eax  +
lea ecx [ebp-48h] +
call sub_100522B  +
lea eax [ebp-48h] +
push eax  +
lea ecx [ebx+14h] +
mov byte ptr [ebp-4] 3 +
call sub_1006B17  +
push 0  +
push 1  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-4] 1 +
call sub_10044B8  +
jmp loc_1006F2D  +
lea edx [eax+2] +
mov esi edx +
jmp loc_1006E5E  +
test cx cx +
jz loc_1006E67  +
inc esi  +
inc esi  +
movzx ecx word ptr [esi] +
cmp cx 3Ah +
jnz loc_1006E57  +
cmp esi edx +
jnz loc_1006E78  +
push eax  +
push 17h  +
push 57h  +
call sub_100792D  +
add esp 0Ch +
mov eax [edi] +
mov ecx esi +
sub ecx eax +
dec ecx  +
dec ecx  +
sar ecx 1 +
push ecx  +
add eax 2 +
push eax  +
lea ecx [ebp-2Ch] +
call sub_1004F5F  +
cmp dword ptr [ebp-14h] 8 +
mov edi [ebx+0Ch] +
mov eax [ebp-28h] +
jnb loc_1006E9E  +
lea eax [ebp-28h] +
push 0  +
push eax  +
lea eax [ebp-78h] +
push eax  +
mov ecx ebx +
call sub_10052FD  +
cmp [eax] edi +
jz loc_1006EC9  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_1006EBC  +
lea eax [ebp-28h] +
push eax  +
push 18h  +
push 57h  +
call sub_100792D  +
add esp 0Ch +
cmp word ptr [esi] 3Ah +
jnz loc_1006EDF  +
add esi 2 +
push esi  +
lea ecx [ebp-68h] +
mov bl 1 +
call sub_1005106  +
jmp loc_1006EE1  +
xor bl bl +
lea ecx [ebp-48h] +
call sub_1004927  +
push 0FFFFFFFFh  +
push 0  +
lea eax [ebp-68h] +
push eax  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-4] 2 +
mov [ebp-4Ch] bl +
call sub_1004D35  +
mov ecx [ebp-6Ch] +
lea eax [ebp-4Ch] +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
add ecx 8 +
call sub_1006D4C  +
mov ecx eax +
call sub_1006545  +
push 0  +
push 1  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-4] 1 +
call sub_10044B8  +
mov ebx [ebp-6Ch] +
mov eax [ebp-70h] +
inc eax  +
cmp eax [ebp+8] +
mov [ebp-70h] eax +
jl loc_1006E0B  +
push 0  +
push 1  +
lea ecx [ebp-68h] +
call sub_10044B8  +
push 0  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_10044B8  +
call sub_100EAD1  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_10] +
test esi esi +
jz loc_1006F80  +
mov eax esi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1006F74  +
sub eax edx +
inc eax  +
jmp loc_1006F83  +
push 5  +
pop eax  +
mov ecx esi +
test esi esi +
jnz loc_1006F8E  +
mov ecx offset aNull +
push 0  +
push 4  +
lea edx [ebp+arg_14] +
push edx  +
push eax  +
push ecx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 28h +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
xor eax eax +
push esi  +
push edi  +
mov [ebp-18h] ax +
lea edi [ebp-16h] +
stos   +
stos   +
stos   +
stos   +
mov eax [ebp+8] +
mov ecx eax +
lea esi [ecx+2] +
mov dx [ecx] +
inc ecx  +
inc ecx  +
test dx dx +
jnz loc_1006FD8  +
sub ecx esi +
sar ecx 1 +
js loc_1007075  +
movzx edx word ptr [eax+ecx*2-2] +
cmp dx 5Ah +
jz loc_1007001  +
cmp dx 7Ah +
jz loc_1007001  +
xor edi edi +
jmp loc_1007005  +
xor edi edi +
inc edi  +
dec ecx  +
cmp ecx 17h +
jnz loc_100707E  +
push 2Dh  +
pop ecx  +
cmp cx [eax+8] +
jnz loc_1007075  +
cmp cx [eax+0Eh] +
jnz loc_1007075  +
movzx ecx word ptr [eax+14h] +
push 54h  +
pop edx  +
cmp dx cx +
jz loc_100702D  +
push 74h  +
pop edx  +
cmp dx cx +
jnz loc_1007075  +
push 3Ah  +
pop ecx  +
cmp cx [eax+1Ah] +
jnz loc_1007075  +
cmp cx [eax+20h] +
jnz loc_1007075  +
push 2Eh  +
pop ecx  +
cmp cx [eax+26h] +
jnz loc_1007075  +
lea ecx [ebp-0Ah] +
push ecx  +
lea ecx [ebp-0Ch] +
push ecx  +
lea ecx [ebp-0Eh] +
push ecx  +
lea ecx [ebp-10h] +
push ecx  +
lea ecx [ebp-12h] +
push ecx  +
lea ecx [ebp-16h] +
push ecx  +
lea ecx [ebp-18h] +
push ecx  +
push offset a4hd2hd2hdt2hd2  +
push eax  +
call ds:swscanf  +
add esp 24h +
cmp eax 7 +
jz loc_10070E1  +
push 57h  +
pop eax  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
cmp ecx 13h +
jnz loc_1007075  +
push 2Dh  +
pop ecx  +
cmp cx [eax+8] +
jnz loc_1007075  +
cmp cx [eax+0Eh] +
jnz loc_1007075  +
movzx ecx word ptr [eax+14h] +
push 54h  +
pop edx  +
cmp dx cx +
jz loc_10070A6  +
push 74h  +
pop edx  +
cmp dx cx +
jnz loc_1007075  +
push 3Ah  +
pop ecx  +
cmp cx [eax+1Ah] +
jnz loc_1007075  +
cmp cx [eax+20h] +
jnz loc_1007075  +
lea ecx [ebp-0Ch] +
push ecx  +
lea ecx [ebp-0Eh] +
push ecx  +
lea ecx [ebp-10h] +
push ecx  +
lea ecx [ebp-12h] +
push ecx  +
lea ecx [ebp-16h] +
push ecx  +
lea ecx [ebp-18h] +
push ecx  +
push offset a4hd2hd2hdt2h_0  +
push eax  +
call ds:swscanf  +
add esp 20h +
cmp eax 6 +
jnz loc_1007075  +
mov esi [ebp+0Ch] +
push esi  +
lea eax [ebp-18h] +
push eax  +
call ds:SystemTimeToFileTime  +
test eax eax +
jnz loc_10070FE  +
call ds:__imp_GetLastError  +
jmp loc_1007078  +
***
test edi edi +
jnz loc_100711C  +
lea eax [ebp-8] +
push eax  +
push esi  +
call ds:LocalFileTimeToFileTime  +
test eax eax +
jz loc_10070F3  +
mov eax [ebp-8] +
mov [esi] eax +
mov eax [ebp-4] +
mov [esi+4] eax +
xor eax eax +
jmp loc_1007078  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
jmp loc_100713D  +
mov ecx [ebp+arg_8] +
mov cx [ecx] +
mov [eax] cx +
inc eax  +
inc eax  +
cmp eax [ebp+arg_4] +
jnz loc_1007132  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub eax [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_8] +
sar eax 1 +
lea ecx [eax+eax] +
sub esi ecx +
test eax eax +
jle loc_1007171  +
push ecx  +
push [ebp+arg_0]  +
push ecx  +
push esi  +
call memmove_s  +
add esp 10h +
mov eax esi +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
jbe loc_100719D  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_8] +
mov cx [ecx] +
dec [ebp+arg_4]  +
mov [eax] cx +
inc eax  +
inc eax  +
cmp [ebp+arg_4] 0 +
ja loc_1007189  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp byte ptr [eax] 0 +
jnz loc_10071B7  +
push dword ptr [eax+8]  +
call dword ptr [eax+4]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1007149  +
add esp 14h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100717B  +
add esp 10h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
jmp loc_100722E  +
mov cx [eax] +
mov edx [ebp+arg_C] +
mov [edx] cx +
add [ebp+arg_C] 2 +
inc eax  +
inc eax  +
cmp eax [ebp+arg_8] +
jnz loc_100721F  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_C] +
mov [eax] ecx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_0]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1007215  +
mov eax [ebp+arg_0] +
add esp 18h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10071EC  +
add esp 0Ch +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 21Ch +
mov eax dword_1013238 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+lpBuffer] +
push esi  +
mov esi ds:FormatMessageW +
push edi  +
xor edi edi +
push edi  +
push 1  +
push eax  +
push edi  +
push [ebp+dwMessageId]  +
mov [ebp+var_210] eax +
push edi  +
push 1300h  +
call esi  +
test eax eax +
jz loc_10072E6  +
xor eax eax +
inc eax  +
jmp loc_1007362  +
push ebx  +
mov ebx 104h +
push ebx  +
lea eax [ebp+LibFileName] +
push eax  +
push offset Src  +
call ds:ExpandEnvironmentStringsW  +
cmp eax edi +
jz loc_100735F  +
cmp eax ebx +
jnb loc_100735F  +
push 2  +
push edi  +
lea eax [ebp+LibFileName] +
push eax  +
call ds:LoadLibraryExW  +
mov ebx eax +
cmp ebx edi +
jz loc_100735F  +
push ebx  +
push ds:__imp_FreeLibrary  +
lea eax [ebp+var_21C] +
push eax  +
call sub_10049E8  +
push edi  +
push 1  +
push [ebp+var_210]  +
push edi  +
push [ebp+dwMessageId]  +
push ebx  +
push 0B00h  +
call esi  +
test eax eax +
lea eax [ebp+var_21C] +
push eax  +
jz loc_100735A  +
call sub_10071A4  +
xor eax eax +
inc eax  +
jmp loc_1007361  +
call sub_10071A4  +
xor eax eax +
pop ebx  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100E9B7  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jz loc_10073A3  +
push ecx  +
push dword ptr [esi+8]  +
lea eax [ebp+var_4] +
push [ebp+arg_8]  +
push eax  +
call sub_1007242  +
mov eax [eax] +
mov ecx [ebp+arg_4] +
add esp 10h +
mov [esi+8] eax +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_0] +
push ecx  +
push [ebp+arg_8]  +
push esi  +
push edi  +
call sub_1007274  +
lea eax [edi+esi*2] +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov ecx [eax] +
add eax 4 +
mov [esi] ecx +
push eax  +
lea ecx [esi+4] +
call sub_1006196  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
lea edi [esi+4] +
mov ecx edi +
call sub_1004927  +
push dword ptr [ebp+0Ch]  +
and dword ptr [ebp-4] 0 +
mov ecx edi +
call sub_1005106  +
mov eax [ebp+8] +
mov [esi] eax +
mov eax esi +
call __EH_epilog3  +
retn 8  +
***
push 44h  +
mov eax offset loc_101037B +
call __EH_prolog3_GS  +
mov eax [ebp+0Ch] +
push eax  +
push dword ptr [ebp+8]  +
lea ecx [ebp-30h] +
call sub_10073FF  +
and dword ptr [ebp-4] 0 +
mov eax off_1013004 +
cmp eax offset off_1013004 +
jz loc_100748D  +
test byte ptr [eax+1Ch] 1 +
jz loc_100748D  +
cmp byte ptr [eax+19h] 2 +
jb loc_100748D  +
push dword ptr [ebp-30h]  +
push offset aWecutilexcepti  +
push offset dword_1001654  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1006F62  +
lea eax [ebp-30h] +
push eax  +
lea ecx [ebp-50h] +
call sub_10073D8  +
push offset dword_101120C  +
lea eax [ebp-50h] +
push eax  +
call _CxxThrowException  +
call __EH_prolog3  +
xor esi esi +
push esi  +
push esi  +
lea eax [ebp-10h] +
push eax  +
push 400h  +
mov [ebp-10h] esi +
call ds:__imp_GetLastError  +
push eax  +
push esi  +
push 1300h  +
call ds:FormatMessageW  +
test eax eax +
jnz loc_10074ED  +
push offset aOperationFaile  +
push dword ptr [ebp+8]  +
call loc_100743C  +
push dword ptr [ebp-10h]  +
lea eax [ebp-1Ch] +
push ds:LocalFree  +
push eax  +
call sub_10049E8  +
push dword ptr [ebp-10h]  +
mov [ebp-4] esi +
jmp loc_10074E5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_8] +
movzx eax word ptr [eax] +
push esi  +
mov esi ecx +
mov ecx [esi+4] +
push edi  +
mov [ebp+var_4] eax +
test ecx ecx +
jnz loc_100752B  +
and [ebp+arg_8] ecx +
jmp loc_1007535  +
mov eax [esi+0Ch] +
sub eax ecx +
sar eax 1 +
mov [ebp+arg_8] eax +
mov edi [ebp+arg_4] +
test edi edi +
jz loc_10076AB  +
test ecx ecx +
jnz loc_1007548  +
xor eax eax +
jmp loc_100754F  +
mov eax [esi+8] +
sub eax ecx +
sar eax 1 +
push ebx  +
mov edx 7FFFFFFFh +
mov ebx edx +
sub ebx eax +
cmp ebx edi +
jnb loc_1007562  +
call loc_100B801  +
test ecx ecx +
jnz loc_100756A  +
xor eax eax +
jmp loc_1007571  +
mov eax [esi+8] +
sub eax ecx +
sar eax 1 +
add eax edi +
cmp [ebp+arg_8] eax +
jnb loc_1007625  +
mov eax [ebp+arg_8] +
shr eax 1 +
sub edx eax +
cmp edx [ebp+arg_8] +
jnb loc_100758E  +
and [ebp+arg_8] 0 +
jmp loc_1007591  +
add [ebp+arg_8] eax +
test ecx ecx +
jnz loc_1007599  +
xor eax eax +
jmp loc_10075A0  +
mov eax [esi+8] +
sub eax ecx +
sar eax 1 +
add eax edi +
cmp [ebp+arg_8] eax +
jnb loc_10075BB  +
test ecx ecx +
jnz loc_10075AF  +
xor eax eax +
jmp loc_10075B6  +
mov eax [esi+8] +
sub eax ecx +
sar eax 1 +
add eax edi +
mov [ebp+arg_8] eax +
push 0  +
push [ebp+arg_8]  +
call loc_10040E6  +
push esi  +
mov ebx eax +
mov eax [esi+4] +
push ebx  +
push [ebp+arg_0]  +
push eax  +
call sub_100B6DF  +
lea ecx [ebp+var_4] +
push ecx  +
push edi  +
push eax  +
mov ecx esi +
call sub_10073B2  +
push esi  +
push eax  +
push dword ptr [esi+8]  +
push [ebp+arg_0]  +
call sub_100B6DF  +
mov eax [esi+4] +
test eax eax +
jnz loc_10075FA  +
xor ecx ecx +
jmp loc_1007601  +
mov ecx [esi+8] +
sub ecx eax +
sar ecx 1 +
add edi ecx +
test eax eax +
jz loc_100760E  +
push eax  +
call sub_100E4D4  +
pop ecx  +
mov eax [ebp+arg_8] +
lea eax [ebx+eax*2] +
mov [esi+0Ch] eax +
lea eax [ebx+edi*2] +
mov [esi+8] eax +
mov [esi+4] ebx +
jmp loc_10076AA  +
mov eax [esi+8] +
mov ecx [ebp+arg_0] +
mov edx eax +
sub edx ecx +
sar edx 1 +
mov [ebp+arg_8] eax +
push esi  +
cmp edx edi +
jnb loc_100767A  +
lea ebx [edi+edi] +
lea edx [ebx+ecx] +
push edx  +
push eax  +
push ecx  +
call sub_100B6DF  +
mov eax [esi+8] +
lea ecx [ebp+var_4] +
push ecx  +
mov ecx eax +
sub ecx [ebp+arg_0] +
sar ecx 1 +
sub edi ecx +
push edi  +
push eax  +
mov ecx esi +
call sub_10073B2  +
add [esi+8] ebx +
mov esi [esi+8] +
lea eax [ebp+var_4] +
push eax  +
sub esi ebx +
push esi  +
push [ebp+arg_0]  +
call sub_1007128  +
add esp 0Ch +
jmp loc_10076AA  +
push eax  +
mov ebx eax +
add edi edi +
push eax  +
sub ebx edi +
push ebx  +
call sub_100B6DF  +
push [ebp+arg_8]  +
mov [esi+8] eax +
push ebx  +
push [ebp+arg_0]  +
call sub_10071C0  +
lea eax [ebp+var_4] +
push eax  +
mov eax [ebp+arg_0] +
add edi eax +
push edi  +
push eax  +
call sub_1007128  +
add esp 18h +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ecx+4] +
push edi  +
test esi esi +
jnz loc_10076C8  +
xor eax eax +
jmp loc_10076CF  +
mov eax [ecx+8] +
sub eax esi +
sar eax 1 +
mov edx [ebp+arg_0] +
cmp eax edx +
jnb loc_10076F7  +
test esi esi +
jnz loc_10076DE  +
xor eax eax +
jmp loc_10076E5  +
mov eax [ecx+8] +
sub eax esi +
sar eax 1 +
mov esi [ecx+8] +
lea edi [ebp+arg_4] +
push edi  +
sub edx eax +
push edx  +
push esi  +
call sub_100750C  +
jmp loc_1007716  +
test esi esi +
jz loc_1007716  +
mov edi [ecx+8] +
mov eax edi +
sub eax esi +
sar eax 1 +
cmp edx eax +
jnb loc_1007716  +
lea eax [esi+edx*2] +
push edi  +
push eax  +
lea eax [ebp+arg_4] +
push eax  +
call sub_1007377  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
call __EH_prolog3  +
mov eax [ebp+0Ch] +
xor ebx ebx +
cmp eax ebx +
jz loc_1007826  +
cmp [eax] bx +
jz loc_1007826  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_1007746  +
mov edi [ebp+8] +
sub eax edx +
sar eax 1 +
push edi  +
mov esi eax +
call ds:GetFileType  +
cmp eax 2 +
jnz loc_10077AE  +
lea eax [ebp-14h] +
push eax  +
push edi  +
call ds:GetConsoleMode  +
test eax eax +
jz loc_10077AE  +
cmp esi ebx +
jle loc_1007826  +
push ebx  +
lea eax [ebp-10h] +
push eax  +
push esi  +
push dword ptr [ebp+0Ch]  +
push edi  +
call ds:WriteConsoleW  +
test eax eax +
jnz loc_1007826  +
call ds:__imp_GetLastError  +
cmp eax ebx +
jle loc_1007828  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1007828  +
cmp byte_10133AC bl +
jnz loc_100782E  +
mov [ebp-20h] ebx +
mov [ebp-1Ch] ebx +
mov [ebp-18h] ebx +
lea eax [ebp-24h] +
push eax  +
push 0FDE9h  +
push dword ptr [ebp+0Ch]  +
mov [ebp-4] ebx +
call sub_100F910  +
cmp eax ebx +
jge loc_10077E5  +
lea ecx [ebp-24h] +
mov esi eax +
call sub_1008960  +
mov eax esi +
jmp loc_1007828  +
mov eax [ebp-20h] +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
cmp cl bl +
jnz loc_10077EB  +
push ebx  +
lea ecx [ebp-10h] +
push ecx  +
sub eax edx +
push eax  +
push dword ptr [ebp-20h]  +
push edi  +
call ds:WriteFile  +
test eax eax +
jnz loc_100781E  +
call ds:__imp_GetLastError  +
cmp eax ebx +
jle loc_10077D7  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_10077D7  +
lea ecx [ebp-24h] +
call sub_1008960  +
xor eax eax +
call __EH_epilog3  +
retn   +
push ebx  +
lea eax [ebp-10h] +
push eax  +
lea eax [esi+esi] +
push eax  +
push dword ptr [ebp+0Ch]  +
push edi  +
call ds:WriteFile  +
jmp loc_100778C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ax word ptr [ebp+arg_4] +
mov word ptr [ebp+arg_4] ax +
xor eax eax +
mov word ptr [ebp+arg_4+2] ax +
lea eax [ebp+arg_4] +
push eax  +
push [ebp+arg_0]  +
call sub_1007721  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
call __EH_prolog3  +
xor esi esi +
mov [ebp-1Ch] esi +
mov [ebp-18h] esi +
mov [ebp-14h] esi +
push dword ptr [ebp+10h]  +
lea eax [ebp-20h] +
push dword ptr [ebp+0Ch]  +
mov [ebp-4] esi +
push eax  +
call sub_100F827  +
add esp 0Ch +
cmp eax esi +
jz loc_10078B5  +
mov esi eax +
lea ecx [ebp-20h] +
call sub_1008960  +
mov eax esi +
call __EH_epilog3  +
retn   +
cmp [ebp-1Ch] esi +
jz loc_10078A5  +
mov eax [ebp-18h] +
sub eax [ebp-1Ch] +
sar eax 1 +
jz loc_10078A5  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp+8]  +
call sub_1007721  +
pop ecx  +
pop ecx  +
jmp loc_10078A3  +
***
push 10h  +
mov eax offset loc_10103FD +
call __EH_prolog3  +
xor eax eax +
mov [ebp-18h] eax +
mov [ebp-14h] eax +
mov [ebp-10h] eax +
push dword ptr [ebp+0Ch]  +
mov [ebp-4] eax +
lea eax [ebp-1Ch] +
push eax  +
call sub_100FB79  +
push dword ptr [ebp-18h]  +
push dword ptr [ebp+8]  +
call loc_100743C  +
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1007873  +
add esp 0Ch +
pop ebp  +
retn   +
***
call __EH_prolog3  +
xor ebx ebx +
push ebx  +
call ds:GetModuleHandleW  +
mov [ebp-14h] eax +
mov [ebp-20h] ebx +
mov [ebp-1Ch] ebx +
mov [ebp-18h] ebx +
push ebx  +
mov [ebp-4] ebx +
push 40h  +
lea ecx [ebp-24h] +
call sub_10076B6  +
mov edi [ebp-20h] +
mov esi [ebp-1Ch] +
lea eax [ebp+10h] +
mov [ebp-10h] eax +
cmp edi ebx +
jnz loc_1007970  +
xor eax eax +
jmp loc_1007976  +
mov eax esi +
sub eax edi +
sar eax 1 +
lea ecx [ebp-10h] +
push ecx  +
push eax  +
push edi  +
push ebx  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp-14h]  +
push 800h  +
call ds:FormatMessageW  +
mov [ebp-10h] ebx +
test eax eax +
jnz loc_10079C8  +
call ds:__imp_GetLastError  +
cmp eax ebx +
jz loc_10079A4  +
cmp eax 7Ah +
jnz loc_10079D1  +
cmp edi ebx +
jz loc_10079BF  +
sub esi edi +
sar esi 1 +
mov eax 10000h +
cmp esi eax +
jnb loc_10079D1  +
cmp esi 8000h +
jb loc_10079C1  +
jmp loc_10079C4  +
xor esi esi +
lea eax [esi+esi] +
push ebx  +
push eax  +
jmp loc_1007954  +
push edi  +
push dword ptr [ebp+8]  +
call loc_100743C  +
push offset aErrorMessageCa  +
jmp loc_10079C9  +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push offset dword_10039EC  +
push 1  +
push 0  +
push offset dword_10039DC  +
call CoCreateInstance  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
mov eax [ecx] +
mov ecx [eax] +
push offset dword_10017B8  +
push eax  +
call dword ptr [ecx]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_8] +
test ecx ecx +
jbe loc_1007A58  +
mov eax [ebp+arg_4] +
movzx edx ax +
mov eax edx +
shl edx 10h +
push edi  +
mov edi [ebp+arg_0] +
or eax edx +
shr ecx 1 +
stos   +
adc ecx ecx +
stos   +
pop edi  +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call sub_1007A31  +
add esp 0Ch +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push dword ptr [esi]  +
call SysFreeString  +
push dword ptr [ebp+8]  +
call SysAllocString  +
mov [esi] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call SysFreeString  +
retn   +
***
push ecx  +
call VariantClear  +
retn   +
***
cmp eax edi +
jnz loc_1007B1A  +
push esi  +
call SysFreeString  +
mov eax 8007000Eh +
jmp loc_1007B43  +
push dword ptr [ebp+10h]  +
mov eax [ebp+8] +
mov ecx [eax] +
push esi  +
push eax  +
call dword ptr [ecx+94h]  +
push esi  +
mov edi eax +
call SysFreeString  +
mov eax edi +
jmp loc_1007B43  +
push edi  +
call SysFreeString  +
mov eax 80070057h +
call __EH_epilog3  +
retn 0Ch  +
***
push esi  +
call SysStringLen  +
cmp eax edi +
jnz loc_1007B99  +
push esi  +
call SysFreeString  +
mov eax 8007000Eh +
jmp loc_1007BC2  +
push dword ptr [ebp+10h]  +
mov eax [ebp+8] +
mov ecx [eax] +
push esi  +
push eax  +
call dword ptr [ecx+90h]  +
push esi  +
mov edi eax +
call SysFreeString  +
mov eax edi +
jmp loc_1007BC2  +
push edi  +
call SysFreeString  +
mov eax 80070057h +
call __EH_epilog3  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 1 +
jnz loc_1007CFC  +
cmp dword ptr [ecx+18h] 8 +
jb loc_1007CEC  +
mov ecx [ecx+4] +
jmp loc_1007CEF  +
add ecx 4 +
mov eax [ebp+arg_0] +
mov dx [ebp+arg_8] +
mov [ecx+eax*2] dx +
jmp loc_1007D1F  +
cmp dword ptr [ecx+18h] 8 +
jb loc_1007D07  +
mov ecx [ecx+4] +
jmp loc_1007D0A  +
add ecx 4 +
push dword ptr [ebp+arg_8]  +
mov eax [ebp+arg_0] +
push [ebp+arg_4]  +
lea eax [ecx+eax*2] +
push eax  +
call sub_1007A62  +
add esp 0Ch +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp [edi+14h] ebx +
jnb loc_1007E83  +
call loc_100E591  +
mov eax [edi+14h] +
sub eax ebx +
cmp eax [ebp+arg_8] +
jnb loc_1007E90  +
mov [ebp+arg_8] eax +
or eax 0FFFFFFFFh +
sub eax [esi+14h] +
cmp eax [ebp+arg_8] +
ja loc_1007EA0  +
call loc_100E554  +
cmp [ebp+arg_8] 0 +
jbe loc_1007EFB  +
mov eax [esi+14h] +
add eax [ebp+arg_8] +
push 0  +
push eax  +
mov ecx esi +
mov [ebp+arg_0] eax +
call sub_100497E  +
test al al +
jz loc_1007EFB  +
cmp dword ptr [edi+18h] 8 +
jb loc_1007EC8  +
mov edi [edi+4] +
jmp loc_1007ECB  +
add edi 4 +
mov eax [esi+18h] +
cmp eax 8 +
jb loc_1007ED8  +
mov edx [esi+4] +
jmp loc_1007EDB  +
lea edx [esi+4] +
push [ebp+arg_8]  +
mov ecx [esi+14h] +
lea edi [edi+ebx*2] +
push edi  +
sub eax ecx +
push eax  +
lea eax [edx+ecx*2] +
push eax  +
call sub_10043D2  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1004324  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+8] +
push edi  +
or eax 0FFFFFFFFh +
mov edi ecx +
sub eax [edi+14h] +
cmp eax ebx +
ja loc_1007F24  +
call loc_100E554  +
test ebx ebx +
jbe loc_1007F53  +
push esi  +
mov esi [edi+14h] +
push 0  +
add esi ebx +
push esi  +
mov ecx edi +
call sub_100497E  +
test al al +
jz loc_1007F52  +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
push ebx  +
push dword ptr [edi+14h]  +
call sub_1007CD6  +
push esi  +
mov ecx edi +
call sub_1004324  +
pop esi  +
mov eax edi +
pop edi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push ebx  +
mov esi ecx +
call sub_100434C  +
test al al +
jz loc_1007F96  +
cmp dword ptr [esi+18h] 8 +
jb loc_1007F81  +
mov eax [esi+4] +
jmp loc_1007F84  +
lea eax [esi+4] +
push [ebp+arg_4]  +
sub ebx eax +
sar ebx 1 +
push ebx  +
push esi  +
mov ecx esi +
call sub_1007E69  +
jmp loc_1007FEF  +
or eax 0FFFFFFFFh +
sub eax [esi+14h] +
cmp eax [ebp+arg_4] +
ja loc_1007FA6  +
call loc_100E554  +
cmp [ebp+arg_4] 0 +
jbe loc_1007FED  +
push edi  +
mov edi [esi+14h] +
add edi [ebp+arg_4] +
push 0  +
push edi  +
mov ecx esi +
call sub_100497E  +
test al al +
jz loc_1007FEC  +
mov eax [esi+18h] +
cmp eax 8 +
jb loc_1007FCE  +
mov edx [esi+4] +
jmp loc_1007FD1  +
lea edx [esi+4] +
push [ebp+arg_4]  +
mov ecx [esi+14h] +
push ebx  +
sub eax ecx +
push eax  +
lea eax [edx+ecx*2] +
push eax  +
call sub_10043D2  +
push edi  +
mov ecx esi +
call sub_1004324  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
lea edx [eax+2] +
push esi  +
mov si [eax] +
inc eax  +
inc eax  +
test si si +
jnz loc_1008006  +
sub eax edx +
sar eax 1 +
push eax  +
push dword ptr [ebp+8]  +
call sub_1007F60  +
pop esi  +
pop ebp  +
retn 4  +
***
adc eax offset SysAllocString +
mov [esi] eax +
neg eax  +
sbb eax eax +
and eax 7FF8FFF2h +
add eax 8007000Eh +
mov esi eax +
mov eax [ebp-38h] +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_100810C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push ebx  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_10044B8  +
mov eax [ebp-30h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_1008128  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
call sub_100EAD1  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub eax [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_8] +
sub esi eax +
test eax eax +
jle loc_100815A  +
push eax  +
push [ebp+arg_0]  +
push eax  +
push esi  +
call memmove_s  +
add esp 10h +
mov eax esi +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub eax [ebp+arg_0] +
mov ecx [ebp+arg_8] +
push esi  +
lea esi [eax+ecx] +
jz loc_1008186  +
push eax  +
push [ebp+arg_0]  +
push eax  +
push ecx  +
call memmove_s  +
add esp 10h +
mov eax esi +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1008137  +
add esp 14h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
sub esp 0Ch +
test ecx ecx +
ja loc_10081DA  +
xor ecx ecx +
push ecx  +
call loc_100E4E5  +
pop ecx  +
leave   +
retn 8  +
***
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 1 +
jnb loc_10081CF  +
push 0  +
lea ecx [ebp-0Ch] +
call sub_1003E76  +
push offset dword_1010AE8  +
lea eax [ebp-0Ch] +
push eax  +
call _CxxThrowException  +
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1008164  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_0]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100F4EB  +
mov eax [ebp+arg_0] +
add esp 18h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jz loc_1008290  +
push ecx  +
push dword ptr [esi+8]  +
lea eax [ebp+var_4] +
push [ebp+arg_8]  +
push eax  +
call sub_1008232  +
mov eax [eax] +
mov ecx [ebp+arg_4] +
add esp 10h +
mov [esi+8] eax +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_8] +
mov al [eax] +
push esi  +
mov esi ecx +
mov ecx [esi+4] +
push edi  +
mov byte ptr [ebp+var_4] al +
test ecx ecx +
jnz loc_10082BD  +
and [ebp+arg_8] ecx +
jmp loc_10082C5  +
mov eax [esi+0Ch] +
sub eax ecx +
mov [ebp+arg_8] eax +
mov edi [ebp+arg_4] +
test edi edi +
jz loc_1008435  +
test ecx ecx +
jnz loc_10082D8  +
xor eax eax +
jmp loc_10082DD  +
mov eax [esi+8] +
sub eax ecx +
or edx 0FFFFFFFFh +
sub edx eax +
cmp edx edi +
jnb loc_10082EB  +
call loc_100B801  +
test ecx ecx +
jnz loc_10082F3  +
xor eax eax +
jmp loc_10082F8  +
mov eax [esi+8] +
sub eax ecx +
add eax edi +
push ebx  +
cmp [ebp+arg_8] eax +
jnb loc_10083A9  +
mov eax [ebp+arg_8] +
shr eax 1 +
or edx 0FFFFFFFFh +
sub edx eax +
cmp edx [ebp+arg_8] +
jnb loc_1008319  +
and [ebp+arg_8] 0 +
jmp loc_100831C  +
add [ebp+arg_8] eax +
test ecx ecx +
jnz loc_1008324  +
xor eax eax +
jmp loc_1008329  +
mov eax [esi+8] +
sub eax ecx +
add eax edi +
cmp [ebp+arg_8] eax +
jnb loc_1008342  +
test ecx ecx +
jnz loc_1008338  +
xor eax eax +
jmp loc_100833D  +
mov eax [esi+8] +
sub eax ecx +
add eax edi +
mov [ebp+arg_8] eax +
push 0  +
push [ebp+arg_8]  +
call loc_10081BE  +
push esi  +
mov ebx eax +
mov eax [esi+4] +
push ebx  +
push [ebp+arg_0]  +
push eax  +
call sub_1008204  +
lea ecx [ebp+var_4] +
push ecx  +
push edi  +
push eax  +
mov ecx esi +
call sub_100F533  +
push esi  +
push eax  +
push dword ptr [esi+8]  +
push [ebp+arg_0]  +
call sub_1008204  +
mov eax [esi+4] +
test eax eax +
jnz loc_1008381  +
xor ecx ecx +
jmp loc_1008386  +
mov ecx [esi+8] +
sub ecx eax +
add edi ecx +
test eax eax +
jz loc_1008393  +
push eax  +
call sub_100E4D4  +
pop ecx  +
mov eax [ebp+arg_8] +
add eax ebx +
mov [esi+0Ch] eax +
lea eax [ebx+edi] +
mov [esi+8] eax +
mov [esi+4] ebx +
jmp loc_1008434  +
mov ebx [esi+8] +
mov eax [ebp+arg_0] +
mov ecx ebx +
sub ecx eax +
push esi  +
cmp ecx edi +
jnb loc_10083FB  +
lea ecx [eax+edi] +
push ecx  +
push ebx  +
push eax  +
call sub_1008204  +
mov eax [esi+8] +
lea ecx [ebp+var_4] +
push ecx  +
mov ecx [ebp+arg_0] +
sub ecx eax +
add ecx edi +
push ecx  +
push eax  +
mov ecx esi +
call sub_100F533  +
add [esi+8] edi +
mov esi [esi+8] +
sub esi edi +
cmp [ebp+arg_0] esi +
jz loc_1008434  +
sub esi [ebp+arg_0] +
push esi  +
push [ebp+var_4]  +
push [ebp+arg_0]  +
call memset  +
add esp 0Ch +
jmp loc_1008434  +
push ebx  +
mov [ebp+arg_8] ebx +
sub [ebp+arg_8] edi +
push ebx  +
push [ebp+arg_8]  +
call sub_1008204  +
push ebx  +
push [ebp+arg_8]  +
mov [esi+8] eax +
push [ebp+arg_0]  +
call sub_1008192  +
mov eax [ebp+arg_0] +
add esp 0Ch +
lea ecx [eax+edi] +
jmp loc_1008430  +
mov cl byte ptr [ebp+var_4] +
mov [eax] cl +
mov ecx [ebp+arg_0] +
inc eax  +
add ecx edi +
cmp eax ecx +
jnz loc_1008425  +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ecx+4] +
push edi  +
test esi esi +
jnz loc_1008452  +
xor edx edx +
jmp loc_1008457  +
mov edx [ecx+8] +
sub edx esi +
mov eax [ebp+arg_0] +
cmp edx eax +
jnb loc_100847D  +
test esi esi +
jnz loc_1008466  +
xor edx edx +
jmp loc_100846B  +
mov edx [ecx+8] +
sub edx esi +
mov esi [ecx+8] +
lea edi [ebp+arg_4] +
push edi  +
sub eax edx +
push eax  +
push esi  +
call sub_100829F  +
jmp loc_1008499  +
test esi esi +
jz loc_1008499  +
mov edi [ecx+8] +
mov edx edi +
sub edx esi +
cmp eax edx +
jnb loc_1008499  +
add eax esi +
push edi  +
push eax  +
lea eax [ebp+arg_4] +
push eax  +
call sub_1008264  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_C] +
push edi  +
xor ebx ebx +
push ebx  +
push 10h  +
mov ecx esi +
call sub_1008440  +
mov ecx [esi+4] +
cmp ecx ebx +
jnz loc_10084C7  +
mov [ebp+arg_C] ebx +
jmp loc_10084CF  +
mov eax [esi+8] +
sub eax ecx +
mov [ebp+arg_C] eax +
cmp ecx ebx +
jnz loc_10084D7  +
xor eax eax +
jmp loc_10084DC  +
mov eax [esi+8] +
sub eax ecx +
lea edx [ebp+arg_C] +
push edx  +
push ecx  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EcGetSubscriptionProperty  +
test eax eax +
jnz loc_1008551  +
mov edi ds:__imp_GetLastError +
call edi  +
mov ebx eax +
cmp ebx 7Ah +
jnz loc_100854D  +
xor ebx ebx +
push ebx  +
push [ebp+arg_C]  +
mov ecx esi +
call sub_1008440  +
mov ecx [esi+4] +
cmp ecx ebx +
jnz loc_100851C  +
mov [ebp+arg_C] ebx +
jmp loc_1008524  +
mov eax [esi+8] +
sub eax ecx +
mov [ebp+arg_C] eax +
test ecx ecx +
jnz loc_100852C  +
xor eax eax +
jmp loc_1008531  +
mov eax [esi+8] +
sub eax ecx +
lea edx [ebp+arg_C] +
push edx  +
push ecx  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EcGetSubscriptionProperty  +
test eax eax +
jnz loc_1008551  +
call edi  +
mov ebx eax +
test ebx ebx +
jnz loc_100855B  +
mov eax [esi+4] +
mov ecx [ebp+arg_10] +
mov [ecx] eax +
jmp loc_1008561  +
mov eax [ebp+arg_10] +
and dword ptr [eax] 0 +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_10] +
push edi  +
xor ebx ebx +
push ebx  +
push 10h  +
mov ecx esi +
call sub_1008440  +
mov ecx [esi+4] +
cmp ecx ebx +
jnz loc_1008592  +
mov [ebp+arg_10] ebx +
jmp loc_100859A  +
mov eax [esi+8] +
sub eax ecx +
mov [ebp+arg_10] eax +
cmp ecx ebx +
jnz loc_10085A2  +
xor eax eax +
jmp loc_10085A7  +
mov eax [esi+8] +
sub eax ecx +
lea edx [ebp+arg_10] +
push edx  +
push ecx  +
push eax  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EcGetObjectArrayProperty  +
test eax eax +
jnz loc_1008622  +
mov edi ds:__imp_GetLastError +
call edi  +
mov ebx eax +
cmp ebx 7Ah +
jnz loc_100861E  +
xor ebx ebx +
push ebx  +
push [ebp+arg_10]  +
mov ecx esi +
call sub_1008440  +
mov ecx [esi+4] +
cmp ecx ebx +
jnz loc_10085EA  +
mov [ebp+arg_10] ebx +
jmp loc_10085F2  +
mov eax [esi+8] +
sub eax ecx +
mov [ebp+arg_10] eax +
test ecx ecx +
jnz loc_10085FA  +
xor eax eax +
jmp loc_10085FF  +
mov eax [esi+8] +
sub eax ecx +
lea edx [ebp+arg_10] +
push edx  +
push ecx  +
push eax  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EcGetObjectArrayProperty  +
test eax eax +
jnz loc_1008622  +
call edi  +
mov ebx eax +
test ebx ebx +
jnz loc_100862C  +
mov eax [esi+4] +
mov ecx [ebp+arg_14] +
mov [ecx] eax +
jmp loc_1008632  +
mov eax [ebp+arg_14] +
and dword ptr [eax] 0 +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_10] +
push edi  +
xor ebx ebx +
push ebx  +
push 10h  +
mov ecx esi +
call sub_1008440  +
mov ecx [esi+4] +
cmp ecx ebx +
jnz loc_1008663  +
mov [ebp+arg_10] ebx +
jmp loc_100866B  +
mov eax [esi+8] +
sub eax ecx +
mov [ebp+arg_10] eax +
cmp ecx ebx +
jnz loc_1008673  +
xor eax eax +
jmp loc_1008678  +
mov eax [esi+8] +
sub eax ecx +
lea edx [ebp+arg_10] +
push edx  +
push ecx  +
push eax  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EcGetSubscriptionRunTimeStatus  +
test eax eax +
jnz loc_10086F3  +
mov edi ds:__imp_GetLastError +
call edi  +
mov ebx eax +
cmp ebx 7Ah +
jnz loc_10086EF  +
xor ebx ebx +
push ebx  +
push [ebp+arg_10]  +
mov ecx esi +
call sub_1008440  +
mov ecx [esi+4] +
cmp ecx ebx +
jnz loc_10086BB  +
mov [ebp+arg_10] ebx +
jmp loc_10086C3  +
mov eax [esi+8] +
sub eax ecx +
mov [ebp+arg_10] eax +
test ecx ecx +
jnz loc_10086CB  +
xor eax eax +
jmp loc_10086D0  +
mov eax [esi+8] +
sub eax ecx +
lea edx [ebp+arg_10] +
push edx  +
push ecx  +
push eax  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EcGetSubscriptionRunTimeStatus  +
test eax eax +
jnz loc_10086F3  +
call edi  +
mov ebx eax +
test ebx ebx +
jnz loc_10086FD  +
mov eax [esi+4] +
mov ecx [ebp+arg_14] +
mov [ecx] eax +
jmp loc_1008703  +
mov eax [ebp+arg_14] +
and dword ptr [eax] 0 +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
mov eax [ebp+arg_0] +
push dword ptr [eax+10h]  +
call sub_1007873  +
add esp 0Ch +
pop ebp  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+8] +
push 1  +
push 1  +
call sub_100610F  +
mov ecx [esi+8] +
push 0  +
call sub_10061F8  +
pop esi  +
retn   +
***
push 28h  +
mov eax offset loc_101065F +
call __EH_prolog3  +
mov [ebp-18h] ecx +
xor edi edi +
push edi  +
call EcOpenSubscriptionEnum  +
mov ebx ds:__imp_GetLastError +
mov [ebp-14h] eax +
cmp eax edi +
jnz loc_1008791  +
push 0Ch  +
call ebx  +
push eax  +
call loc_10078D8  +
pop ecx  +
pop ecx  +
push dword ptr [ebp-14h]  +
lea eax [ebp-24h] +
push offset loc_100F150  +
push eax  +
call sub_10049E8  +
mov [ebp-4] edi +
mov [ebp-30h] edi +
mov [ebp-2Ch] edi +
mov [ebp-28h] edi +
push edi  +
push 200h  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call sub_10076B6  +
mov esi [ebp-30h] +
cmp esi edi +
jnz loc_100882F  +
mov [ebp-10h] edi +
xor eax eax +
lea ecx [ebp-10h] +
push ecx  +
push esi  +
push eax  +
push dword ptr [ebp-14h]  +
call EcEnumNextSubscription  +
test eax eax +
jnz loc_100881C  +
call ebx  +
cmp eax 7Ah +
jnz loc_1008811  +
push edi  +
push dword ptr [ebp-10h]  +
lea ecx [ebp-34h] +
call sub_10076B6  +
mov esi [ebp-30h] +
cmp esi edi +
jnz loc_100883B  +
mov [ebp-10h] edi +
xor eax eax +
lea ecx [ebp-10h] +
push ecx  +
push esi  +
push eax  +
push dword ptr [ebp-14h]  +
call EcEnumNextSubscription  +
test eax eax +
jnz loc_100881C  +
call ebx  +
cmp eax 103h +
jz loc_1008851  +
cmp eax edi +
jnz loc_1008847  +
push esi  +
push (offset dword_10017B8+10h)  +
push dword ptr [ebp-18h]  +
call sub_1008711  +
add esp 0Ch +
jmp loc_10087C3  +
***
mov eax [ebp-2Ch] +
sub eax esi +
sar eax 1 +
mov [ebp-10h] eax +
jmp loc_10087CC  +
***
mov eax [ebp-2Ch] +
sub eax esi +
sar eax 1 +
mov [ebp-10h] eax +
jmp loc_10087FD  +
***
push 0Dh  +
push eax  +
call loc_10078D8  +
pop ecx  +
pop ecx  +
lea ecx [ebp-34h] +
call sub_1008960  +
lea eax [ebp-24h] +
push eax  +
call sub_10071A4  +
call __EH_epilog3  +
retn   +
***
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
mov edi ecx +
jmp loc_10088CE  +
movzx ecx ax +
sub ecx 0Ah +
jz loc_10088BD  +
sub ecx 3 +
jz loc_10088B6  +
sub ecx 19h +
jz loc_10088AF  +
sub ecx 16h +
jz loc_10088A8  +
dec ecx  +
dec ecx  +
jz loc_10088A1  +
push eax  +
push dword ptr [edi+10h]  +
call sub_100784B  +
jmp loc_10088CA  +
push offset aGt  +
jmp loc_10088C2  +
push offset aLt  +
jmp loc_10088C2  +
push offset aAmp  +
jmp loc_10088C2  +
push offset aXd  +
jmp loc_10088C2  +
push offset aXa  +
push dword ptr [edi+10h]  +
call sub_1007721  +
pop ecx  +
inc esi  +
pop ecx  +
inc esi  +
movzx eax word ptr [esi] +
test ax ax +
jnz loc_100887B  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
mov edi ecx +
jmp loc_1008940  +
movzx ecx ax +
sub ecx 22h +
jz loc_100892F  +
sub ecx 4 +
jz loc_1008928  +
dec ecx  +
jz loc_1008921  +
sub ecx 15h +
jz loc_100891A  +
dec ecx  +
dec ecx  +
jz loc_1008913  +
push eax  +
push dword ptr [edi+10h]  +
call sub_100784B  +
jmp loc_100893C  +
push offset aGt  +
jmp loc_1008934  +
push offset aLt  +
jmp loc_1008934  +
push offset aApos  +
jmp loc_1008934  +
push offset aAmp  +
jmp loc_1008934  +
push offset aQuot  +
push dword ptr [edi+10h]  +
call sub_1007721  +
pop ecx  +
inc esi  +
pop ecx  +
inc esi  +
movzx eax word ptr [esi] +
test ax ax +
jnz loc_10088EF  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
test eax eax +
jz loc_1008973  +
push eax  +
call sub_100E4D4  +
pop ecx  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
and dword ptr [esi+0Ch] 0 +
pop esi  +
retn   +
***
push 24h  +
mov eax offset loc_1010517 +
call __EH_prolog3_GS  +
mov esi ecx +
mov ecx [esi+8] +
push 2  +
push 2  +
call sub_100610F  +
mov ecx [esi+8] +
push offset off_10130D8  +
call sub_10061F8  +
mov ecx [esi+8] +
push 1  +
call sub_1006150  +
push eax  +
lea ecx [esi+18h] +
call sub_1005106  +
mov ecx [esi+8] +
lea eax [ebp-2Dh] +
push eax  +
mov edi offset dword_10015F4 +
push edi  +
push offset aF  +
push offset aFormat  +
call sub_100656C  +
push eax  +
lea ecx [ebp-2Ch] +
call sub_100522B  +
and dword ptr [ebp-4] 0 +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_10089FF  +
lea eax [ebp-28h] +
push offset aTerse  +
push eax  +
call sub_1003D35  +
cmp eax 2 +
jz loc_1008A56  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_1008A1B  +
lea eax [ebp-28h] +
push edi  +
push eax  +
call sub_1003D35  +
cmp eax 2 +
jz loc_1008A56  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_1008A33  +
lea eax [ebp-28h] +
push offset aXml  +
push eax  +
call sub_1003D35  +
cmp eax 2 +
jnz loc_1008A49  +
mov byte ptr [esi+34h] 1 +
jmp loc_1008A5A  +
push 12h  +
push 57h  +
call sub_100792D  +
pop ecx  +
pop ecx  +
jmp loc_1008A5A  +
mov byte ptr [esi+34h] 0 +
push 0  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_10044B8  +
call sub_100EAD1  +
retn   +
***
call __EH_prolog3_GS  +
mov esi ecx +
cmp dword ptr [esi+30h] 8 +
mov [ebp-34h] esi +
jb loc_1008A8D  +
mov eax [esi+1Ch] +
jmp loc_1008A90  +
lea eax [esi+1Ch] +
push 2  +
xor edi edi +
inc edi  +
push edi  +
push eax  +
call EcOpenSubscription  +
xor ebx ebx +
mov [ebp-38h] eax +
cmp eax ebx +
jnz loc_1008AB5  +
push 8  +
call ds:__imp_GetLastError  +
push eax  +
call loc_10078D8  +
pop ecx  +
pop ecx  +
push dword ptr [ebp-38h]  +
lea eax [ebp-6Ch] +
push offset loc_100F150  +
push eax  +
call sub_10049E8  +
mov [ebp-4] ebx +
mov [ebp-44h] ebx +
mov [ebp-40h] ebx +
mov [ebp-3Ch] ebx +
cmp dword ptr [esi+30h] 8 +
mov byte ptr [ebp-4] 1 +
mov [ebp-4Ch] edi +
jb loc_1008AE4  +
mov eax [esi+1Ch] +
jmp loc_1008AE7  +
lea eax [esi+1Ch] +
push eax  +
push offset aSubscriptionId  +
push dword ptr [ebp-34h]  +
call sub_1008711  +
add esp 0Ch +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-48h] +
push eax  +
push ebx  +
push 1Bh  +
push dword ptr [ebp-38h]  +
call sub_10084A4  +
push 0Eh  +
mov esi offset aSubscriptionty +
pop edi  +
cmp eax ebx +
jz loc_1008B22  +
push esi  +
push edi  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov ecx [eax+0Ch] +
cmp ecx ebx +
jz loc_1008B40  +
cmp ecx 2 +
jz loc_1008B40  +
push esi  +
push edi  +
push 0Dh  +
call sub_100792D  +
mov eax [ebp-30h] +
add esp 0Ch +
cmp [eax+0Ch] ebx +
jz loc_1008B80  +
push dword ptr [eax]  +
push offset off_10132F4  +
call sub_100FE9A  +
mov edi eax +
cmp edi ebx +
jnz loc_1008B64  +
push esi  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
add esp 0Ch +
push edi  +
push offset aSubscription_0  +
push dword ptr [ebp-34h]  +
call sub_1008711  +
mov eax [ebp-30h] +
mov eax [eax] +
add esp 0Ch +
push 0Eh  +
mov [ebp-4Ch] eax +
pop edi  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-48h] +
push eax  +
push ebx  +
push 6  +
push dword ptr [ebp-38h]  +
call sub_10084A4  +
mov esi offset aDescription +
cmp eax ebx +
jz loc_1008BA7  +
push esi  +
push edi  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov ecx [eax+0Ch] +
cmp ecx ebx +
jz loc_1008BC5  +
cmp ecx 4 +
jz loc_1008BC5  +
push esi  +
push edi  +
push 0Dh  +
call sub_100792D  +
mov eax [ebp-30h] +
add esp 0Ch +
cmp [eax+0Ch] ebx +
jz loc_1008BDC  +
push dword ptr [eax]  +
push offset aDescriptionS  +
push dword ptr [ebp-34h]  +
call sub_1008711  +
add esp 0Ch +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-48h] +
push eax  +
push ebx  +
push ebx  +
push dword ptr [ebp-38h]  +
call sub_10084A4  +
mov esi offset aEnabled +
cmp eax ebx +
jz loc_1008C02  +
push esi  +
push edi  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov ecx [eax+0Ch] +
cmp ecx ebx +
jz loc_1008C20  +
cmp ecx 1 +
jz loc_1008C20  +
push esi  +
push edi  +
push 0Dh  +
call sub_100792D  +
mov eax [ebp-30h] +
add esp 0Ch +
cmp [eax+0Ch] ebx +
jz loc_1008C44  +
cmp [eax] ebx +
mov eax offset aTrue +
jnz loc_1008C33  +
mov eax offset aFalse +
push eax  +
push offset aEnabledS_0  +
push dword ptr [ebp-34h]  +
call sub_1008711  +
add esp 0Ch +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-48h] +
push eax  +
push ebx  +
push 7  +
push dword ptr [ebp-38h]  +
call sub_10084A4  +
mov esi offset aUri +
cmp eax ebx +
jz loc_1008C6B  +
push esi  +
push edi  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov ecx [eax+0Ch] +
cmp ecx ebx +
jz loc_1008C89  +
cmp ecx 4 +
jz loc_1008C89  +
push esi  +
push edi  +
push 0Dh  +
call sub_100792D  +
mov eax [ebp-30h] +
add esp 0Ch +
cmp [eax+0Ch] ebx +
jz loc_1008CA0  +
push dword ptr [eax]  +
push offset aUriS  +
push dword ptr [ebp-34h]  +
call sub_1008711  +
add esp 0Ch +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-48h] +
push eax  +
push ebx  +
push 8  +
push dword ptr [ebp-38h]  +
call sub_10084A4  +
mov esi offset aConfiguratio_0 +
cmp eax ebx +
jz loc_1008CC7  +
push esi  +
push edi  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov ecx [eax+0Ch] +
cmp ecx ebx +
jz loc_1008CE5  +
cmp ecx 2 +
jz loc_1008CE5  +
push esi  +
push edi  +
push 0Dh  +
call sub_100792D  +
mov eax [ebp-30h] +
add esp 0Ch +
cmp [eax+0Ch] ebx +
jz loc_1008D1D  +
push dword ptr [eax]  +
push offset off_10132C4  +
call sub_100FE9A  +
mov edi eax +
cmp edi ebx +
jnz loc_1008D09  +
push esi  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
add esp 0Ch +
push edi  +
push offset aConfigurationm  +
push dword ptr [ebp-34h]  +
call sub_1008711  +
add esp 0Ch +
push 0Eh  +
pop edi  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-48h] +
push eax  +
push ebx  +
push 0Dh  +
push dword ptr [ebp-38h]  +
mov dword ptr [ebp-50h] 1 +
call sub_10084A4  +
mov esi offset aDeliverymode +
cmp eax ebx +
jz loc_1008D4B  +
push esi  +
push edi  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov ecx [eax+0Ch] +
cmp ecx ebx +
jz loc_1008D69  +
cmp ecx 2 +
jz loc_1008D69  +
push esi  +
push edi  +
push 0Dh  +
call sub_100792D  +
mov eax [ebp-30h] +
add esp 0Ch +
cmp [eax+0Ch] ebx +
jz loc_1008DAA  +
push dword ptr [eax]  +
push offset off_101324C  +
call sub_100FE9A  +
mov esi eax +
cmp esi ebx +
jnz loc_1008D91  +
mov eax [ebp-30h] +
push dword ptr [eax]  +
push 13h  +
push 0Dh  +
call sub_100792D  +
add esp 0Ch +
push esi  +
push offset aDeliverymodeS  +
push dword ptr [ebp-34h]  +
call sub_1008711  +
mov eax [ebp-30h] +
mov eax [eax] +
add esp 0Ch +
mov [ebp-50h] eax +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-48h] +
push eax  +
push ebx  +
push edi  +
push dword ptr [ebp-38h]  +
call sub_10084A4  +
mov esi offset aDeliverymaxi_0 +
cmp eax ebx +
jz loc_1008DD0  +
push esi  +
push edi  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov ecx [eax+0Ch] +
cmp ecx ebx +
jz loc_1008DEE  +
cmp ecx 2 +
jz loc_1008DEE  +
push esi  +
push edi  +
push 0Dh  +
call sub_100792D  +
mov eax [ebp-30h] +
add esp 0Ch +
cmp [eax+0Ch] ebx +
jz loc_1008E05  +
push dword ptr [eax]  +
push offset aDeliverymaxite  +
push dword ptr [ebp-34h]  +
call sub_1008711  +
add esp 0Ch +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-48h] +
push eax  +
push ebx  +
push 0Fh  +
push dword ptr [ebp-38h]  +
call sub_10084A4  +
mov esi offset aDeliverymaxl_0 +
cmp eax ebx +
jz loc_1008E2C  +
push esi  +
push edi  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov ecx [eax+0Ch] +
cmp ecx ebx +
jz loc_1008E4A  +
cmp ecx 2 +
jz loc_1008E4A  +
push esi  +
push edi  +
push 0Dh  +
call sub_100792D  +
mov eax [ebp-30h] +
add esp 0Ch +
cmp [eax+0Ch] ebx +
jz loc_1008E61  +
push dword ptr [eax]  +
push offset aDeliverymaxlat  +
push dword ptr [ebp-34h]  +
call sub_1008711  +
add esp 0Ch +
cmp dword ptr [ebp-4Ch] 1 +
jnz loc_1008EC9  +
cmp dword ptr [ebp-50h] 2 +
jnz loc_1008EC9  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-48h] +
push eax  +
push ebx  +
push 18h  +
push dword ptr [ebp-38h]  +
call sub_10084A4  +
mov esi offset aHostname +
cmp eax ebx +
jz loc_1008E94  +
push esi  +
push edi  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov ecx [eax+0Ch] +
cmp ecx ebx +
jz loc_1008EB2  +
cmp ecx 4 +
jz loc_1008EB2  +
push esi  +
push edi  +
push 0Dh  +
call sub_100792D  +
mov eax [ebp-30h] +
add esp 0Ch +
cmp [eax+0Ch] ebx +
jz loc_1008EC9  +
push dword ptr [eax]  +
push offset aHostnameS  +
push dword ptr [ebp-34h]  +
call sub_1008711  +
add esp 0Ch +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-48h] +
push eax  +
push ebx  +
push 10h  +
push dword ptr [ebp-38h]  +
call sub_10084A4  +
mov esi offset aHeartbeatint_0 +
cmp eax ebx +
jz loc_1008EF0  +
push esi  +
push edi  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov ecx [eax+0Ch] +
cmp ecx ebx +
jz loc_1008F0E  +
cmp ecx 2 +
jz loc_1008F0E  +
push esi  +
push edi  +
push 0Dh  +
call sub_100792D  +
mov eax [ebp-30h] +
add esp 0Ch +
cmp [eax+0Ch] ebx +
jz loc_1008F25  +
push dword ptr [eax]  +
push offset aHeartbeatinter  +
push dword ptr [ebp-34h]  +
call sub_1008711  +
add esp 0Ch +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-48h] +
push eax  +
push ebx  +
push 9  +
push dword ptr [ebp-38h]  +
call sub_10084A4  +
mov esi offset aExpires +
cmp eax ebx +
jz loc_1008F4C  +
push esi  +
push edi  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov eax [eax+0Ch] +
cmp eax ebx +
jz loc_1008F67  +
cmp eax 3 +
jz loc_1008F67  +
push esi  +
push edi  +
push 0Dh  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
cmp [eax+0Ch] ebx +
jz loc_1008FCB  +
lea ecx [ebp-2Ch] +
call sub_1004927  +
mov esi [ebp-30h] +
mov eax [esi] +
mov edx [esi+4] +
mov cl 20h +
mov byte ptr [ebp-4] 2 +
call unknown_libname_2  +
mov [ebp-58h] eax +
mov eax [esi] +
mov [ebp-5Ch] eax +
lea eax [ebp-2Ch] +
push eax  +
lea eax [ebp-5Ch] +
push eax  +
call sub_100FE56  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_1008FAB  +
lea eax [ebp-28h] +
push eax  +
push offset aExpiresS  +
push dword ptr [ebp-34h]  +
call sub_1008711  +
add esp 0Ch +
push ebx  +
push 1  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 1 +
call sub_10044B8  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-48h] +
push eax  +
push ebx  +
push 0Ah  +
push dword ptr [ebp-38h]  +
call sub_10084A4  +
mov esi offset aQuery +
cmp eax ebx +
jz loc_1008FF2  +
push esi  +
push edi  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov ecx [eax+0Ch] +
cmp ecx ebx +
jz loc_1009010  +
cmp ecx 4 +
jz loc_1009010  +
push esi  +
push edi  +
push 0Dh  +
call sub_100792D  +
mov eax [ebp-30h] +
add esp 0Ch +
cmp [eax+0Ch] ebx +
jz loc_1009027  +
push dword ptr [eax]  +
push offset aQueryS  +
push dword ptr [ebp-34h]  +
call sub_1008711  +
add esp 0Ch +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-48h] +
push eax  +
push ebx  +
push 1Ah  +
push dword ptr [ebp-38h]  +
call sub_10084A4  +
mov esi offset aDialect +
cmp eax ebx +
jz loc_100904E  +
push esi  +
push edi  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov ecx [eax+0Ch] +
cmp ecx ebx +
jz loc_100906C  +
cmp ecx 4 +
jz loc_100906C  +
push esi  +
push edi  +
push 0Dh  +
call sub_100792D  +
mov eax [ebp-30h] +
add esp 0Ch +
cmp [eax+0Ch] ebx +
jz loc_1009083  +
push dword ptr [eax]  +
push offset aDialectS  +
push dword ptr [ebp-34h]  +
call sub_1008711  +
add esp 0Ch +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-48h] +
push eax  +
push ebx  +
push 19h  +
push dword ptr [ebp-38h]  +
call sub_10084A4  +
mov esi offset aReadexisting_0 +
cmp eax ebx +
jz loc_10090AA  +
push esi  +
push edi  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov ecx [eax+0Ch] +
cmp ecx ebx +
jz loc_10090C8  +
cmp ecx 1 +
jz loc_10090C8  +
push esi  +
push edi  +
push 0Dh  +
call sub_100792D  +
mov eax [ebp-30h] +
add esp 0Ch +
cmp [eax+0Ch] ebx +
jz loc_10090EC  +
cmp [eax] ebx +
mov eax offset aTrue +
jnz loc_10090DB  +
mov eax offset aFalse +
push eax  +
push offset aReadexistingev  +
push dword ptr [ebp-34h]  +
call sub_1008711  +
add esp 0Ch +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-48h] +
push eax  +
push ebx  +
push 0Bh  +
push dword ptr [ebp-38h]  +
call sub_10084A4  +
mov esi offset aTransportname +
cmp eax ebx +
jz loc_1009113  +
push esi  +
push edi  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov ecx [eax+0Ch] +
cmp ecx ebx +
jz loc_1009131  +
cmp ecx 4 +
jz loc_1009131  +
push esi  +
push edi  +
push 0Dh  +
call sub_100792D  +
mov eax [ebp-30h] +
add esp 0Ch +
cmp [eax+0Ch] ebx +
jz loc_1009148  +
push dword ptr [eax]  +
push offset aTransportnameS  +
push dword ptr [ebp-34h]  +
call sub_1008711  +
add esp 0Ch +
cmp dword ptr [ebp-4Ch] 1 +
jnz loc_10091B0  +
cmp dword ptr [ebp-50h] 1 +
jnz loc_10091B0  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-48h] +
push eax  +
push ebx  +
push 0Ch  +
push dword ptr [ebp-38h]  +
call sub_10084A4  +
mov esi offset aTransportport +
cmp eax ebx +
jz loc_100917B  +
push esi  +
push edi  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov ecx [eax+0Ch] +
cmp ecx ebx +
jz loc_1009199  +
cmp ecx 2 +
jz loc_1009199  +
push esi  +
push edi  +
push 0Dh  +
call sub_100792D  +
mov eax [ebp-30h] +
add esp 0Ch +
cmp [eax+0Ch] ebx +
jz loc_10091B0  +
push dword ptr [eax]  +
push offset aTransportportD  +
push dword ptr [ebp-34h]  +
call sub_1008711  +
add esp 0Ch +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-48h] +
push eax  +
push ebx  +
push 12h  +
push dword ptr [ebp-38h]  +
call sub_10084A4  +
mov esi offset aContentformat +
cmp eax ebx +
jz loc_10091D7  +
push esi  +
push edi  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov ecx [eax+0Ch] +
cmp ecx ebx +
jz loc_10091F5  +
cmp ecx 2 +
jz loc_10091F5  +
push esi  +
push edi  +
push 0Dh  +
call sub_100792D  +
mov eax [ebp-30h] +
add esp 0Ch +
cmp [eax+0Ch] ebx +
jz loc_100922E  +
push dword ptr [eax]  +
push offset off_101326C  +
call sub_100FE9A  +
mov esi eax +
cmp esi ebx +
jnz loc_100921D  +
mov eax [ebp-30h] +
push dword ptr [eax]  +
push 14h  +
push 0Dh  +
call sub_100792D  +
add esp 0Ch +
push esi  +
push offset aContentformatS  +
push dword ptr [ebp-34h]  +
call sub_1008711  +
add esp 0Ch +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-48h] +
push eax  +
push ebx  +
push 11h  +
push dword ptr [ebp-38h]  +
call sub_10084A4  +
mov esi offset aLocale +
cmp eax ebx +
jz loc_1009255  +
push esi  +
push edi  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov ecx [eax+0Ch] +
cmp ecx ebx +
jz loc_1009273  +
cmp ecx 4 +
jz loc_1009273  +
push esi  +
push edi  +
push 0Dh  +
call sub_100792D  +
mov eax [ebp-30h] +
add esp 0Ch +
cmp [eax+0Ch] ebx +
jz loc_100928A  +
push dword ptr [eax]  +
push offset aLocaleS  +
push dword ptr [ebp-34h]  +
call sub_1008711  +
add esp 0Ch +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-48h] +
push eax  +
push ebx  +
push 13h  +
push dword ptr [ebp-38h]  +
call sub_10084A4  +
mov esi offset aLogfile +
cmp eax ebx +
jz loc_10092B1  +
push esi  +
push edi  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov ecx [eax+0Ch] +
cmp ecx ebx +
jz loc_10092CF  +
cmp ecx 4 +
jz loc_10092CF  +
push esi  +
push edi  +
push 0Dh  +
call sub_100792D  +
mov eax [ebp-30h] +
add esp 0Ch +
cmp [eax+0Ch] ebx +
jz loc_10092E6  +
push dword ptr [eax]  +
push offset aLogfileS  +
push dword ptr [ebp-34h]  +
call sub_1008711  +
add esp 0Ch +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-48h] +
push eax  +
push ebx  +
push 14h  +
push dword ptr [ebp-38h]  +
call sub_10084A4  +
mov esi offset aPublishername +
cmp eax ebx +
jz loc_100930D  +
push esi  +
push edi  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov ecx [eax+0Ch] +
cmp ecx ebx +
jz loc_100932B  +
cmp ecx 4 +
jz loc_100932B  +
push esi  +
push edi  +
push 0Dh  +
call sub_100792D  +
mov eax [ebp-30h] +
add esp 0Ch +
cmp [eax+0Ch] ebx +
jz loc_1009342  +
push dword ptr [eax]  +
push offset aPublishernameS  +
push dword ptr [ebp-34h]  +
call sub_1008711  +
add esp 0Ch +
cmp dword ptr [ebp-4Ch] 1 +
jnz loc_1009452  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-48h] +
push eax  +
push ebx  +
push 15h  +
push dword ptr [ebp-38h]  +
call sub_10084A4  +
mov esi offset aCredentialst_0 +
cmp eax ebx +
jz loc_1009373  +
push esi  +
push edi  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov ecx [eax+0Ch] +
cmp ecx ebx +
jz loc_1009391  +
cmp ecx 2 +
jz loc_1009391  +
push esi  +
push edi  +
push 0Dh  +
call sub_100792D  +
mov eax [ebp-30h] +
add esp 0Ch +
cmp [eax+0Ch] ebx +
jz loc_10093C9  +
push dword ptr [eax]  +
push offset off_101328C  +
call sub_100FE9A  +
mov edi eax +
cmp edi ebx +
jnz loc_10093B5  +
push esi  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
add esp 0Ch +
push edi  +
push offset aCredentialstyp  +
push dword ptr [ebp-34h]  +
call sub_1008711  +
add esp 0Ch +
push 0Eh  +
pop edi  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-48h] +
push eax  +
push ebx  +
push 16h  +
push dword ptr [ebp-38h]  +
call sub_10084A4  +
mov esi offset aCommonuserna_0 +
cmp eax ebx +
jz loc_10093F0  +
push esi  +
push edi  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov ecx [eax+0Ch] +
cmp ecx ebx +
jz loc_100940E  +
cmp ecx 4 +
jz loc_100940E  +
push esi  +
push edi  +
push 0Dh  +
call sub_100792D  +
mov eax [ebp-30h] +
add esp 0Ch +
cmp dword ptr [eax+0Ch] 4 +
jnz loc_100963B  +
cmp dword ptr [eax] 0 +
jz loc_100963B  +
mov eax [eax] +
cmp word ptr [eax] 0 +
jz loc_100963B  +
push eax  +
push offset aCommonusername  +
push dword ptr [ebp-34h]  +
call sub_1008711  +
push offset asc_1001B8C  +
push offset aCommonuserpass  +
push dword ptr [ebp-34h]  +
call sub_1008711  +
add esp 18h +
xor ebx ebx +
cmp [ebp-4Ch] ebx +
jnz loc_100963B  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-48h] +
push eax  +
push 0  +
push 1Ch  +
push dword ptr [ebp-38h]  +
call sub_10084A4  +
mov esi offset aAllowedissue_0 +
test eax eax +
jz loc_1009484  +
push esi  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov eax [eax+0Ch] +
mov ebx 84h +
test eax eax +
jz loc_10094A4  +
cmp eax ebx +
jz loc_10094A4  +
push esi  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
add esp 0Ch +
push offset aAllowedissuerc  +
push dword ptr [ebp-34h]  +
call sub_1008711  +
mov eax [ebp-30h] +
cmp dword ptr [eax+0Ch] 0 +
pop ecx  +
pop ecx  +
mov edi offset aS_4 +
jz loc_10094E2  +
xor esi esi +
cmp [eax+8] esi +
jbe loc_10094E2  +
mov eax [eax] +
push dword ptr [eax+esi*4]  +
push edi  +
push dword ptr [ebp-34h]  +
call sub_1008711  +
mov eax [ebp-30h] +
add esp 0Ch +
inc esi  +
cmp esi [eax+8] +
jb loc_10094C8  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-48h] +
push eax  +
push 0  +
push 1Dh  +
push dword ptr [ebp-38h]  +
call sub_10084A4  +
mov esi offset aAllowedsubje_0 +
test eax eax +
jz loc_100950B  +
push esi  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov eax [eax+0Ch] +
test eax eax +
jz loc_1009526  +
cmp eax ebx +
jz loc_1009526  +
push esi  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
add esp 0Ch +
push offset aAllowedsubject  +
push dword ptr [ebp-34h]  +
call sub_1008711  +
mov eax [ebp-30h] +
cmp dword ptr [eax+0Ch] 0 +
pop ecx  +
pop ecx  +
jz loc_100955F  +
xor esi esi +
cmp [eax+8] esi +
jbe loc_100955F  +
mov eax [eax] +
push dword ptr [eax+esi*4]  +
push edi  +
push dword ptr [ebp-34h]  +
call sub_1008711  +
mov eax [ebp-30h] +
add esp 0Ch +
inc esi  +
cmp esi [eax+8] +
jb loc_1009545  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-48h] +
push eax  +
push 0  +
push 1Eh  +
push dword ptr [ebp-38h]  +
call sub_10084A4  +
mov esi offset aDeniedsubjec_0 +
test eax eax +
jz loc_1009588  +
push esi  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov eax [eax+0Ch] +
test eax eax +
jz loc_10095A3  +
cmp eax ebx +
jz loc_10095A3  +
push esi  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
add esp 0Ch +
push offset aDeniedsubjectl  +
push dword ptr [ebp-34h]  +
call sub_1008711  +
mov eax [ebp-30h] +
xor ebx ebx +
pop ecx  +
pop ecx  +
cmp [eax+0Ch] ebx +
jz loc_10095DD  +
xor esi esi +
cmp [eax+8] ebx +
jbe loc_10095DD  +
mov eax [eax] +
push dword ptr [eax+esi*4]  +
push edi  +
push dword ptr [ebp-34h]  +
call sub_1008711  +
mov eax [ebp-30h] +
add esp 0Ch +
inc esi  +
cmp esi [eax+8] +
jb loc_10095C3  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-48h] +
push eax  +
push ebx  +
push 1Fh  +
push dword ptr [ebp-38h]  +
call sub_10084A4  +
mov esi offset aAllowedsourc_0 +
cmp eax ebx +
jz loc_1009605  +
push esi  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov ecx [eax+0Ch] +
cmp ecx ebx +
jz loc_1009624  +
cmp ecx 4 +
jz loc_1009624  +
push esi  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
mov eax [ebp-30h] +
add esp 0Ch +
cmp [eax+0Ch] ebx +
jz loc_100963B  +
push dword ptr [eax]  +
push offset aAllowedsourced  +
push dword ptr [ebp-34h]  +
call sub_1008711  +
add esp 0Ch +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-48h] +
push eax  +
xor edi edi +
push edi  +
push 1  +
push dword ptr [ebp-38h]  +
mov [ebp-54h] edi +
call sub_10084A4  +
mov esi offset aEventsources +
cmp eax edi +
jz loc_1009668  +
push esi  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov ecx [eax+0Ch] +
cmp ecx edi +
jz loc_1009687  +
cmp ecx 5 +
jz loc_1009687  +
push esi  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
mov eax [ebp-30h] +
add esp 0Ch +
cmp [eax+0Ch] edi +
jz loc_100985F  +
mov ebx [eax] +
lea eax [ebp-54h] +
push eax  +
push ebx  +
call EcGetObjectArraySize  +
test eax eax +
jnz loc_10096B6  +
call ds:__imp_GetLastError  +
push offset aEventsourcecou  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
cmp ebx edi +
jz loc_100985F  +
push ebx  +
push offset loc_100F150  +
lea eax [ebp-60h] +
push eax  +
call sub_10049E8  +
push offset asc_100197C  +
push dword ptr [ebp-34h]  +
mov byte ptr [ebp-4] 3 +
call sub_1008711  +
pop ecx  +
xor esi esi +
pop ecx  +
cmp [ebp-54h] edi +
jbe loc_1009856  +
push esi  +
push offset aEventsourceD  +
push dword ptr [ebp-34h]  +
call sub_1008711  +
add esp 0Ch +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-48h] +
push eax  +
push edi  +
push esi  +
push 2  +
push ebx  +
call sub_100856F  +
cmp eax edi +
jz loc_1009722  +
push offset aEventsourceadd  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov ecx [eax+0Ch] +
cmp ecx edi +
jz loc_1009745  +
cmp ecx 4 +
jz loc_1009745  +
push offset aEventsourceadd  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
mov eax [ebp-30h] +
add esp 0Ch +
cmp [eax+0Ch] edi +
jz loc_100975C  +
push dword ptr [eax]  +
push offset aAddressS  +
push dword ptr [ebp-34h]  +
call sub_1008711  +
add esp 0Ch +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-48h] +
push eax  +
push edi  +
push esi  +
push 3  +
push ebx  +
call sub_100856F  +
cmp eax edi +
jz loc_1009782  +
push offset aEventsourceena  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov ecx [eax+0Ch] +
cmp ecx edi +
jz loc_10097A5  +
cmp ecx 1 +
jz loc_10097A5  +
push offset aEventsourceena  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
mov eax [ebp-30h] +
add esp 0Ch +
cmp [eax+0Ch] edi +
jz loc_10097C9  +
cmp [eax] edi +
mov eax offset aTrue +
jnz loc_10097B8  +
mov eax offset aFalse +
push eax  +
push offset aEnabledS  +
push dword ptr [ebp-34h]  +
call sub_1008711  +
add esp 0Ch +
cmp dword ptr [ebp-4Ch] 1 +
jnz loc_100984C  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-48h] +
push eax  +
push edi  +
push esi  +
push 4  +
push ebx  +
call sub_100856F  +
cmp eax edi +
jz loc_10097F5  +
push offset aUsername  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov ecx [eax+0Ch] +
cmp ecx edi +
jz loc_1009818  +
cmp ecx 4 +
jz loc_1009818  +
push offset aUsername  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
mov eax [ebp-30h] +
add esp 0Ch +
cmp dword ptr [eax+0Ch] 4 +
jnz loc_100984C  +
cmp [eax] edi +
jz loc_100984C  +
mov eax [eax] +
cmp [eax] di +
jz loc_100984C  +
push eax  +
push offset aUsernameS  +
push dword ptr [ebp-34h]  +
call sub_1008711  +
push offset asc_1001B8C  +
push offset aUserpasswordS  +
push dword ptr [ebp-34h]  +
call sub_1008711  +
add esp 18h +
inc esi  +
cmp esi [ebp-54h] +
jb loc_10096EB  +
lea eax [ebp-60h] +
push eax  +
call sub_10071A4  +
lea ecx [ebp-48h] +
call sub_1008960  +
lea eax [ebp-6Ch] +
push eax  +
call sub_10071A4  +
call sub_100EAD1  +
retn   +
***
pop eax  +
mov eax offset loc_10105A3 +
call __EH_prolog3_GS  +
mov esi ecx +
cmp dword ptr [esi+30h] 8 +
jb loc_1009894  +
mov eax [esi+1Ch] +
jmp loc_1009897  +
lea eax [esi+1Ch] +
push 2  +
push 1  +
push eax  +
call EcOpenSubscription  +
xor ebx ebx +
mov [ebp-34h] eax +
cmp eax ebx +
jnz loc_10098BA  +
push 8  +
call ds:__imp_GetLastError  +
push eax  +
call loc_10078D8  +
pop ecx  +
pop ecx  +
push dword ptr [ebp-34h]  +
lea eax [ebp-64h] +
push offset loc_100F150  +
push eax  +
call sub_10049E8  +
cmp byte_10133AC 0 +
mov [ebp-4] ebx +
jnz loc_10098DE  +
push offset a?xmlVersion1_1  +
jmp loc_10098E3  +
push offset a?xmlVersion1_0  +
push dword ptr [esi+10h]  +
call sub_1007721  +
pop ecx  +
pop ecx  +
push offset aSubscriptionXm  +
push dword ptr [esi+10h]  +
call sub_1007721  +
push offset aSubscription_3  +
push dword ptr [esi+10h]  +
call sub_1007721  +
add esp 10h +
cmp dword ptr [esi+30h] 8 +
jb loc_1009915  +
mov eax [esi+1Ch] +
jmp loc_1009918  +
lea eax [esi+1Ch] +
push eax  +
mov ecx esi +
call near ptr byte_100886C+1  +
push offset aSubscriptionid  +
push dword ptr [esi+10h]  +
call sub_1007721  +
pop ecx  +
pop ecx  +
mov [ebp-48h] ebx +
mov [ebp-44h] ebx +
mov [ebp-40h] ebx +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
push ebx  +
push 1Bh  +
push dword ptr [ebp-34h]  +
mov byte ptr [ebp-4] 1 +
mov dword ptr [ebp-3Ch] 1 +
call sub_10084A4  +
mov edi offset aSubscriptionty +
cmp eax ebx +
jz loc_100996B  +
push edi  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov ecx [eax+0Ch] +
cmp ecx ebx +
jz loc_100998A  +
cmp ecx 2 +
jz loc_100998A  +
push edi  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
mov eax [ebp-30h] +
add esp 0Ch +
cmp [eax+0Ch] ebx +
jz loc_10099DE  +
push dword ptr [eax]  +
push offset off_10132F4  +
call sub_100FE9A  +
mov ebx eax +
test ebx ebx +
jnz loc_10099AE  +
push edi  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
add esp 0Ch +
push offset aSubscription_2  +
push dword ptr [esi+10h]  +
call sub_1007721  +
pop ecx  +
pop ecx  +
push ebx  +
mov ecx esi +
call near ptr byte_100886C+1  +
push offset aSubscription_1  +
push dword ptr [esi+10h]  +
call sub_1007721  +
mov eax [ebp-30h] +
mov eax [eax] +
pop ecx  +
pop ecx  +
mov [ebp-3Ch] eax +
xor ebx ebx +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
push ebx  +
push 6  +
push dword ptr [ebp-34h]  +
call sub_10084A4  +
mov edi offset aDescription +
cmp eax ebx +
jz loc_1009A06  +
push edi  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov eax [eax+0Ch] +
cmp eax ebx +
jz loc_1009A22  +
cmp eax 4 +
jz loc_1009A22  +
push edi  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
cmp [eax+0Ch] ebx +
jz loc_1009A54  +
push offset aDescription_1  +
push dword ptr [esi+10h]  +
call sub_1007721  +
mov eax [ebp-30h] +
pop ecx  +
pop ecx  +
push dword ptr [eax]  +
mov ecx esi +
call near ptr byte_100886C+1  +
push offset aDescription_0  +
push dword ptr [esi+10h]  +
call sub_1007721  +
pop ecx  +
pop ecx  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
push ebx  +
push ebx  +
push dword ptr [ebp-34h]  +
call sub_10084A4  +
mov edi offset aEnabled +
cmp eax ebx +
jz loc_1009A7B  +
push edi  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov eax [eax+0Ch] +
cmp eax ebx +
jz loc_1009A97  +
cmp eax 1 +
jz loc_1009A97  +
push edi  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
cmp [eax+0Ch] ebx +
jz loc_1009AD6  +
push offset aEnabled_1  +
push dword ptr [esi+10h]  +
call sub_1007721  +
mov eax [ebp-30h] +
cmp [eax] ebx +
pop ecx  +
pop ecx  +
mov eax offset aTrue +
jnz loc_1009ABF  +
mov eax offset aFalse +
push eax  +
mov ecx esi +
call near ptr byte_100886C+1  +
push offset aEnabled_0  +
push dword ptr [esi+10h]  +
call sub_1007721  +
pop ecx  +
pop ecx  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
push ebx  +
push 7  +
push dword ptr [ebp-34h]  +
call sub_10084A4  +
mov edi offset aUri +
cmp eax ebx +
jz loc_1009AFE  +
push edi  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov eax [eax+0Ch] +
cmp eax ebx +
jz loc_1009B1A  +
cmp eax 4 +
jz loc_1009B1A  +
push edi  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
cmp [eax+0Ch] ebx +
jz loc_1009B4C  +
push offset aUri_1  +
push dword ptr [esi+10h]  +
call sub_1007721  +
mov eax [ebp-30h] +
pop ecx  +
pop ecx  +
push dword ptr [eax]  +
mov ecx esi +
call near ptr byte_100886C+1  +
push offset aUri_0  +
push dword ptr [esi+10h]  +
call sub_1007721  +
pop ecx  +
pop ecx  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
push ebx  +
push 8  +
push dword ptr [ebp-34h]  +
call sub_10084A4  +
mov edi offset aConfiguratio_0 +
cmp eax ebx +
jz loc_1009B74  +
push edi  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov ecx [eax+0Ch] +
cmp ecx ebx +
jz loc_1009B93  +
cmp ecx 2 +
jz loc_1009B93  +
push edi  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
mov eax [ebp-30h] +
add esp 0Ch +
cmp [eax+0Ch] ebx +
jz loc_1009BDF  +
push dword ptr [eax]  +
push offset off_10132C4  +
call sub_100FE9A  +
mov ebx eax +
test ebx ebx +
jnz loc_1009BB7  +
push edi  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
add esp 0Ch +
push offset aConfiguratio_2  +
push dword ptr [esi+10h]  +
call sub_1007721  +
pop ecx  +
pop ecx  +
push ebx  +
mov ecx esi +
call near ptr byte_100886C+1  +
push offset aConfiguratio_1  +
push dword ptr [esi+10h]  +
call sub_1007721  +
pop ecx  +
pop ecx  +
xor ebx ebx +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
push ebx  +
push 0Dh  +
push dword ptr [ebp-34h]  +
mov dword ptr [ebp-50h] 1 +
call sub_10084A4  +
mov edi offset aDeliverymode +
cmp eax ebx +
jz loc_1009C0E  +
push edi  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov ecx [eax+0Ch] +
cmp ecx ebx +
jz loc_1009C2D  +
cmp ecx 2 +
jz loc_1009C2D  +
push edi  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
mov eax [ebp-30h] +
add esp 0Ch +
cmp [eax+0Ch] ebx +
jz loc_1009C83  +
push dword ptr [eax]  +
push offset off_101324C  +
call sub_100FE9A  +
mov edi eax +
cmp edi ebx +
jnz loc_1009C55  +
mov eax [ebp-30h] +
push dword ptr [eax]  +
push 13h  +
push 0Dh  +
call sub_100792D  +
add esp 0Ch +
push offset aDeliveryMode  +
push dword ptr [esi+10h]  +
call sub_1007721  +
pop ecx  +
pop ecx  +
push edi  +
mov ecx esi +
call near ptr byte_10088E0+1  +
push offset asc_1002ACC  +
push dword ptr [esi+10h]  +
call sub_1007721  +
mov eax [ebp-30h] +
mov eax [eax] +
mov [ebp-50h] eax +
jmp loc_1009C90  +
push offset aDelivery_0  +
push dword ptr [esi+10h]  +
call sub_1007721  +
pop ecx  +
pop ecx  +
push offset aBatching_0  +
push dword ptr [esi+10h]  +
call sub_1007721  +
pop ecx  +
pop ecx  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
push ebx  +
push 0Eh  +
push dword ptr [ebp-34h]  +
call sub_10084A4  +
mov edi offset aDeliverymaxi_0 +
cmp eax ebx +
jz loc_1009CC9  +
push edi  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov ecx [eax+0Ch] +
cmp ecx ebx +
jz loc_1009CE8  +
cmp ecx 2 +
jz loc_1009CE8  +
push edi  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
mov eax [ebp-30h] +
add esp 0Ch +
cmp [eax+0Ch] ebx +
jz loc_1009CFD  +
push dword ptr [eax]  +
push offset aMaxitemsDMaxit  +
push esi  +
call sub_1008711  +
add esp 0Ch +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
push ebx  +
push 0Fh  +
push dword ptr [ebp-34h]  +
call sub_10084A4  +
mov edi offset aDeliverymaxl_0 +
cmp eax ebx +
jz loc_1009D25  +
push edi  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov ecx [eax+0Ch] +
cmp ecx ebx +
jz loc_1009D44  +
cmp ecx 2 +
jz loc_1009D44  +
push edi  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
mov eax [ebp-30h] +
add esp 0Ch +
cmp [eax+0Ch] ebx +
jz loc_1009D59  +
push dword ptr [eax]  +
push offset aMaxlatencytime  +
push esi  +
call sub_1008711  +
add esp 0Ch +
push offset aBatching  +
push dword ptr [esi+10h]  +
call sub_1007721  +
push offset aPushsettings_0  +
push dword ptr [esi+10h]  +
call sub_1007721  +
add esp 10h +
cmp dword ptr [ebp-50h] 2 +
jnz loc_1009DF8  +
cmp dword ptr [ebp-3Ch] 1 +
jnz loc_1009DF8  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
push ebx  +
push 18h  +
push dword ptr [ebp-34h]  +
call sub_10084A4  +
mov edi offset aHostname +
cmp eax ebx +
jz loc_1009DAA  +
push edi  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov eax [eax+0Ch] +
cmp eax ebx +
jz loc_1009DC6  +
cmp eax 4 +
jz loc_1009DC6  +
push edi  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
cmp [eax+0Ch] ebx +
jz loc_1009DF8  +
push offset aHostname_1  +
push dword ptr [esi+10h]  +
call sub_1007721  +
mov eax [ebp-30h] +
pop ecx  +
pop ecx  +
push dword ptr [eax]  +
mov ecx esi +
call near ptr byte_100886C+1  +
push offset aHostname_0  +
push dword ptr [esi+10h]  +
call sub_1007721  +
pop ecx  +
pop ecx  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
push ebx  +
push 10h  +
push dword ptr [ebp-34h]  +
call sub_10084A4  +
mov edi offset aHeartbeatint_0 +
cmp eax ebx +
jz loc_1009E20  +
push edi  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov ecx [eax+0Ch] +
cmp ecx ebx +
jz loc_1009E3F  +
cmp ecx 2 +
jz loc_1009E3F  +
push edi  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
mov eax [ebp-30h] +
add esp 0Ch +
cmp [eax+0Ch] ebx +
jz loc_1009E54  +
push dword ptr [eax]  +
push offset aHeartbeatInter  +
push esi  +
call sub_1008711  +
add esp 0Ch +
push offset aPushsettings  +
push dword ptr [esi+10h]  +
call sub_1007721  +
push offset aDelivery  +
push dword ptr [esi+10h]  +
call sub_1007721  +
add esp 10h +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
push ebx  +
push 9  +
push dword ptr [ebp-34h]  +
call sub_10084A4  +
mov edi offset aExpires +
cmp eax ebx +
jz loc_1009E99  +
push edi  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov eax [eax+0Ch] +
cmp eax ebx +
jz loc_1009EB5  +
cmp eax 3 +
jz loc_1009EB5  +
push edi  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
cmp [eax+0Ch] ebx +
jz loc_1009F2E  +
lea ecx [ebp-2Ch] +
call sub_1004927  +
mov edi [ebp-30h] +
mov eax [edi] +
mov edx [edi+4] +
mov cl 20h +
mov byte ptr [ebp-4] 2 +
call unknown_libname_2  +
mov [ebp-54h] eax +
mov eax [edi] +
mov [ebp-58h] eax +
lea eax [ebp-2Ch] +
push eax  +
lea eax [ebp-58h] +
push eax  +
call sub_100FE56  +
push offset aExpires_1  +
push dword ptr [esi+10h]  +
call sub_1007721  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
pop ecx  +
pop ecx  +
jnb loc_1009F08  +
lea eax [ebp-28h] +
push eax  +
mov ecx esi +
call near ptr byte_100886C+1  +
push offset aExpires_0  +
push dword ptr [esi+10h]  +
call sub_1007721  +
pop ecx  +
pop ecx  +
push ebx  +
push 1  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 1 +
call sub_10044B8  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
push ebx  +
push 0Ah  +
push dword ptr [ebp-34h]  +
call sub_10084A4  +
mov edi offset aQuery +
cmp eax ebx +
jz loc_1009F56  +
push edi  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov eax [eax+0Ch] +
cmp eax ebx +
jz loc_1009F72  +
cmp eax 4 +
jz loc_1009F72  +
push edi  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
cmp [eax+0Ch] ebx +
jz loc_1009FA4  +
push offset aQueryCdata  +
push dword ptr [esi+10h]  +
call sub_1007721  +
mov eax [ebp-30h] +
pop ecx  +
pop ecx  +
push dword ptr [eax]  +
mov ecx esi +
call near ptr dword_1005E24+3  +
push offset aQuery_0  +
push dword ptr [esi+10h]  +
call sub_1007721  +
pop ecx  +
pop ecx  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
push ebx  +
push 1Ah  +
push dword ptr [ebp-34h]  +
call sub_10084A4  +
mov edi offset aDialect +
cmp eax ebx +
jz loc_1009FCC  +
push edi  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov eax [eax+0Ch] +
cmp eax ebx +
jz loc_1009FE8  +
cmp eax 4 +
jz loc_1009FE8  +
push edi  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
cmp [eax+0Ch] ebx +
jz loc_100A01A  +
push offset aDialect_1  +
push dword ptr [esi+10h]  +
call sub_1007721  +
mov eax [ebp-30h] +
pop ecx  +
pop ecx  +
push dword ptr [eax]  +
mov ecx esi +
call near ptr byte_100886C+1  +
push offset aDialect_0  +
push dword ptr [esi+10h]  +
call sub_1007721  +
pop ecx  +
pop ecx  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
push ebx  +
push 19h  +
push dword ptr [ebp-34h]  +
call sub_10084A4  +
mov edi offset aReadexisting_0 +
cmp eax ebx +
jz loc_100A042  +
push edi  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov eax [eax+0Ch] +
cmp eax ebx +
jz loc_100A05E  +
cmp eax 1 +
jz loc_100A05E  +
push edi  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
cmp [eax+0Ch] ebx +
jz loc_100A09D  +
push offset aReadexisting_2  +
push dword ptr [esi+10h]  +
call sub_1007721  +
mov eax [ebp-30h] +
cmp [eax] ebx +
pop ecx  +
pop ecx  +
mov eax offset aTrue +
jnz loc_100A086  +
mov eax offset aFalse +
push eax  +
mov ecx esi +
call near ptr dword_1005E24+3  +
push offset aReadexisting_1  +
push dword ptr [esi+10h]  +
call sub_1007721  +
pop ecx  +
pop ecx  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
push ebx  +
push 0Bh  +
push dword ptr [ebp-34h]  +
call sub_10084A4  +
mov edi offset aTransportname +
cmp eax ebx +
jz loc_100A0C5  +
push edi  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov eax [eax+0Ch] +
cmp eax ebx +
jz loc_100A0E1  +
cmp eax 4 +
jz loc_100A0E1  +
push edi  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
cmp [eax+0Ch] ebx +
jz loc_100A179  +
push offset aTransportnam_1  +
push dword ptr [esi+10h]  +
call sub_1007721  +
mov eax [ebp-30h] +
pop ecx  +
pop ecx  +
push dword ptr [eax]  +
mov ecx esi +
call near ptr byte_100886C+1  +
push offset aTransportnam_0  +
push dword ptr [esi+10h]  +
call sub_1007721  +
cmp dword ptr [ebp-50h] 1 +
pop ecx  +
pop ecx  +
jnz loc_100A179  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
push ebx  +
push 0Ch  +
push dword ptr [ebp-34h]  +
call sub_10084A4  +
mov edi offset aTransportport +
cmp eax ebx +
jz loc_100A145  +
push edi  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov ecx [eax+0Ch] +
cmp ecx ebx +
jz loc_100A164  +
cmp ecx 2 +
jz loc_100A164  +
push edi  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
mov eax [ebp-30h] +
add esp 0Ch +
cmp [eax+0Ch] ebx +
jz loc_100A179  +
push dword ptr [eax]  +
push offset aTransportpor_0  +
push esi  +
call sub_1008711  +
add esp 0Ch +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
push ebx  +
push 12h  +
push dword ptr [ebp-34h]  +
call sub_10084A4  +
mov edi offset aContentformat +
cmp eax ebx +
jz loc_100A1A1  +
push edi  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov ecx [eax+0Ch] +
cmp ecx ebx +
jz loc_100A1C0  +
cmp ecx 2 +
jz loc_100A1C0  +
push edi  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
mov eax [ebp-30h] +
add esp 0Ch +
cmp [eax+0Ch] ebx +
jz loc_100A20E  +
push dword ptr [eax]  +
push offset off_101326C  +
call sub_100FE9A  +
mov edi eax +
cmp edi ebx +
jnz loc_100A1E8  +
mov eax [ebp-30h] +
push dword ptr [eax]  +
push 14h  +
push 0Dh  +
call sub_100792D  +
add esp 0Ch +
push offset aContentforma_1  +
push dword ptr [esi+10h]  +
call sub_1007721  +
pop ecx  +
pop ecx  +
push edi  +
mov ecx esi +
call near ptr byte_100886C+1  +
push offset aContentforma_0  +
push dword ptr [esi+10h]  +
call sub_1007721  +
pop ecx  +
pop ecx  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
push ebx  +
push 11h  +
push dword ptr [ebp-34h]  +
call sub_10084A4  +
mov edi offset aLocale +
cmp eax ebx +
jz loc_100A236  +
push edi  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov eax [eax+0Ch] +
cmp eax ebx +
jz loc_100A252  +
cmp eax 4 +
jz loc_100A252  +
push edi  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
cmp [eax+0Ch] ebx +
jz loc_100A284  +
push offset aLocaleLanguage  +
push dword ptr [esi+10h]  +
call sub_1007721  +
mov eax [ebp-30h] +
pop ecx  +
pop ecx  +
push dword ptr [eax]  +
mov ecx esi +
call near ptr byte_100886C+1  +
push offset asc_10026BC  +
push dword ptr [esi+10h]  +
call sub_1007721  +
pop ecx  +
pop ecx  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
push ebx  +
push 13h  +
push dword ptr [ebp-34h]  +
call sub_10084A4  +
mov edi offset aLogfile +
cmp eax ebx +
jz loc_100A2AC  +
push edi  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov eax [eax+0Ch] +
cmp eax ebx +
jz loc_100A2C8  +
cmp eax 4 +
jz loc_100A2C8  +
push edi  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
cmp [eax+0Ch] ebx +
jz loc_100A2FA  +
push offset aLogfile_1  +
push dword ptr [esi+10h]  +
call sub_1007721  +
mov eax [ebp-30h] +
pop ecx  +
pop ecx  +
push dword ptr [eax]  +
mov ecx esi +
call near ptr byte_100886C+1  +
push offset aLogfile_0  +
push dword ptr [esi+10h]  +
call sub_1007721  +
pop ecx  +
pop ecx  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
push ebx  +
push 14h  +
push dword ptr [ebp-34h]  +
call sub_10084A4  +
mov edi offset aPublishername +
cmp eax ebx +
jz loc_100A322  +
push edi  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov eax [eax+0Ch] +
cmp eax ebx +
jz loc_100A33E  +
cmp eax 4 +
jz loc_100A33E  +
push edi  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
cmp [eax+0Ch] ebx +
jz loc_100A370  +
push offset aPublishernam_1  +
push dword ptr [esi+10h]  +
call sub_1007721  +
mov eax [ebp-30h] +
pop ecx  +
pop ecx  +
push dword ptr [eax]  +
mov ecx esi +
call near ptr byte_100886C+1  +
push offset aPublishernam_0  +
push dword ptr [esi+10h]  +
call sub_1007721  +
pop ecx  +
pop ecx  +
cmp dword ptr [ebp-3Ch] 1 +
jnz loc_100A4A9  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
push ebx  +
push 15h  +
push dword ptr [ebp-34h]  +
call sub_10084A4  +
mov edi offset aCredentialst_0 +
cmp eax ebx +
jz loc_100A3A2  +
push edi  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov ecx [eax+0Ch] +
cmp ecx ebx +
jz loc_100A3C1  +
cmp ecx 2 +
jz loc_100A3C1  +
push edi  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
mov eax [ebp-30h] +
add esp 0Ch +
cmp [eax+0Ch] ebx +
jz loc_100A40D  +
push dword ptr [eax]  +
push offset off_101328C  +
call sub_100FE9A  +
mov ebx eax +
test ebx ebx +
jnz loc_100A3E5  +
push edi  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
add esp 0Ch +
push offset aCredentialst_2  +
push dword ptr [esi+10h]  +
call sub_1007721  +
pop ecx  +
pop ecx  +
push ebx  +
mov ecx esi +
call near ptr byte_100886C+1  +
push offset aCredentialst_1  +
push dword ptr [esi+10h]  +
call sub_1007721  +
pop ecx  +
pop ecx  +
xor ebx ebx +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
push ebx  +
push 16h  +
push dword ptr [ebp-34h]  +
call sub_10084A4  +
mov edi offset aCommonuserna_0 +
cmp eax ebx +
jz loc_100A435  +
push edi  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov ecx [eax+0Ch] +
cmp ecx ebx +
jz loc_100A454  +
cmp ecx 4 +
jz loc_100A454  +
push edi  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
mov eax [ebp-30h] +
add esp 0Ch +
cmp dword ptr [eax+0Ch] 4 +
jnz loc_100A7D3  +
cmp [eax] ebx +
jz loc_100A7D3  +
mov eax [eax] +
cmp [eax] bx +
jz loc_100A7D3  +
push offset aCommonuserna_2  +
push dword ptr [esi+10h]  +
call sub_1007721  +
mov eax [ebp-30h] +
pop ecx  +
pop ecx  +
push dword ptr [eax]  +
mov ecx esi +
call near ptr byte_100886C+1  +
push offset aCommonuserna_1  +
push dword ptr [esi+10h]  +
call sub_1007721  +
push offset aCommonpassword  +
push dword ptr [esi+10h]  +
call sub_1007721  +
add esp 10h +
cmp [ebp-3Ch] ebx +
jnz loc_100A7C9  +
push offset aAllowedsourc_3  +
push dword ptr [esi+10h]  +
call sub_1007721  +
pop ecx  +
pop ecx  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
push ebx  +
push 1Ch  +
push dword ptr [ebp-34h]  +
mov byte ptr [ebp-35h] 0 +
call sub_10084A4  +
mov edi offset aAllowedissue_0 +
cmp eax ebx +
jz loc_100A4ED  +
push edi  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov eax [eax+0Ch] +
cmp eax ebx +
jz loc_100A50B  +
cmp eax 84h +
jz loc_100A50B  +
push edi  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov edi offset asc_100197C +
cmp [eax+0Ch] ebx +
jz loc_100A58D  +
push edi  +
push dword ptr [esi+10h]  +
call sub_1007721  +
push offset aAllowedissue_2  +
push dword ptr [esi+10h]  +
mov byte ptr [ebp-35h] 1 +
call sub_1007721  +
push edi  +
push dword ptr [esi+10h]  +
call sub_1007721  +
mov eax [ebp-30h] +
xor ebx ebx +
add esp 18h +
cmp [eax+8] ebx +
jbe loc_100A57E  +
push offset aIssuerca_0  +
push dword ptr [esi+10h]  +
call sub_1007721  +
mov eax [ebp-30h] +
mov eax [eax] +
pop ecx  +
pop ecx  +
push dword ptr [eax+ebx*4]  +
mov ecx esi +
call near ptr byte_100886C+1  +
push offset aIssuerca  +
push dword ptr [esi+10h]  +
call sub_1007721  +
mov eax [ebp-30h] +
inc ebx  +
pop ecx  +
pop ecx  +
cmp ebx [eax+8] +
jb loc_100A548  +
push offset aAllowedissue_1  +
push dword ptr [esi+10h]  +
call sub_1007721  +
pop ecx  +
pop ecx  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
push 0  +
push 1Dh  +
push dword ptr [ebp-34h]  +
call sub_10084A4  +
mov ebx offset aAllowedsubje_0 +
test eax eax +
jz loc_100A5B6  +
push ebx  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov eax [eax+0Ch] +
test eax eax +
jz loc_100A5D4  +
cmp eax 84h +
jz loc_100A5D4  +
push ebx  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
cmp dword ptr [eax+0Ch] 0 +
jz loc_100A65A  +
cmp byte ptr [ebp-35h] 0 +
jnz loc_100A5F2  +
push edi  +
push dword ptr [esi+10h]  +
call sub_1007721  +
pop ecx  +
pop ecx  +
mov byte ptr [ebp-35h] 1 +
push offset aAllowedsubje_2  +
push dword ptr [esi+10h]  +
call sub_1007721  +
push edi  +
push dword ptr [esi+10h]  +
call sub_1007721  +
mov eax [ebp-30h] +
xor ebx ebx +
add esp 10h +
cmp [eax+8] ebx +
jbe loc_100A64B  +
push offset aSubject_0  +
push dword ptr [esi+10h]  +
call sub_1007721  +
mov eax [ebp-30h] +
mov eax [eax] +
pop ecx  +
pop ecx  +
push dword ptr [eax+ebx*4]  +
mov ecx esi +
call near ptr byte_100886C+1  +
push offset aSubject  +
push dword ptr [esi+10h]  +
call sub_1007721  +
mov eax [ebp-30h] +
inc ebx  +
pop ecx  +
pop ecx  +
cmp ebx [eax+8] +
jb loc_100A615  +
push offset aAllowedsubje_1  +
push dword ptr [esi+10h]  +
call sub_1007721  +
pop ecx  +
pop ecx  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
push 0  +
push 1Eh  +
push dword ptr [ebp-34h]  +
call sub_10084A4  +
mov ebx offset aDeniedsubjec_0 +
test eax eax +
jz loc_100A683  +
push ebx  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov eax [eax+0Ch] +
test eax eax +
jz loc_100A6A1  +
cmp eax 84h +
jz loc_100A6A1  +
push ebx  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
cmp dword ptr [eax+0Ch] 0 +
jz loc_100A727  +
cmp byte ptr [ebp-35h] 0 +
jnz loc_100A6BF  +
push edi  +
push dword ptr [esi+10h]  +
call sub_1007721  +
pop ecx  +
pop ecx  +
mov byte ptr [ebp-35h] 1 +
push offset aDeniedsubjec_2  +
push dword ptr [esi+10h]  +
call sub_1007721  +
push edi  +
push dword ptr [esi+10h]  +
call sub_1007721  +
mov eax [ebp-30h] +
xor edi edi +
add esp 10h +
cmp [eax+8] edi +
jbe loc_100A718  +
push offset aSubject_0  +
push dword ptr [esi+10h]  +
call sub_1007721  +
mov eax [ebp-30h] +
mov eax [eax] +
pop ecx  +
pop ecx  +
push dword ptr [eax+edi*4]  +
mov ecx esi +
call near ptr byte_100886C+1  +
push offset aSubject  +
push dword ptr [esi+10h]  +
call sub_1007721  +
mov eax [ebp-30h] +
inc edi  +
pop ecx  +
pop ecx  +
cmp edi [eax+8] +
jb loc_100A6E2  +
push offset aDeniedsubjec_1  +
push dword ptr [esi+10h]  +
call sub_1007721  +
pop ecx  +
pop ecx  +
cmp byte ptr [ebp-35h] 0 +
jz loc_100A73C  +
push offset asc_100236C  +
push dword ptr [esi+10h]  +
call sub_1007721  +
pop ecx  +
pop ecx  +
push offset aAllowedsourcen  +
push dword ptr [esi+10h]  +
call sub_1007721  +
pop ecx  +
pop ecx  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
push 0  +
push 1Fh  +
push dword ptr [ebp-34h]  +
call sub_10084A4  +
mov edi offset aAllowedsourc_0 +
test eax eax +
jz loc_100A774  +
push edi  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov eax [eax+0Ch] +
test eax eax +
jz loc_100A790  +
cmp eax 4 +
jz loc_100A790  +
push edi  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
cmp dword ptr [eax+0Ch] 0 +
jz loc_100AA0B  +
push offset aAllowedsourc_2  +
push dword ptr [esi+10h]  +
call sub_1007721  +
mov eax [ebp-30h] +
pop ecx  +
pop ecx  +
push dword ptr [eax]  +
mov ecx esi +
call near ptr byte_100886C+1  +
push offset aAllowedsourc_1  +
push dword ptr [esi+10h]  +
call sub_1007721  +
pop ecx  +
pop ecx  +
xor ebx ebx +
cmp dword ptr [ebp-3Ch] 1 +
jnz loc_100AA0B  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
push ebx  +
push 1  +
push dword ptr [ebp-34h]  +
mov [ebp-50h] ebx +
mov [ebp-3Ch] ebx +
call sub_10084A4  +
mov edi offset aEventsources +
cmp eax ebx +
jz loc_100A801  +
push edi  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov ecx [eax+0Ch] +
cmp ecx ebx +
jz loc_100A820  +
cmp ecx 5 +
jz loc_100A820  +
push edi  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
mov eax [ebp-30h] +
add esp 0Ch +
cmp [eax+0Ch] ebx +
jz loc_100A82A  +
mov eax [eax] +
mov [ebp-3Ch] eax +
lea eax [ebp-50h] +
push eax  +
push dword ptr [ebp-3Ch]  +
call EcGetObjectArraySize  +
test eax eax +
jnz loc_100A850  +
call ds:__imp_GetLastError  +
push offset aEventsourcecou  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
push offset aEventsources_2  +
push dword ptr [esi+10h]  +
call sub_1007721  +
pop ecx  +
xor edi edi +
pop ecx  +
cmp [ebp-50h] ebx +
jbe loc_100A9FC  +
mov ebx offset aUsername +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
push 0  +
push edi  +
push 3  +
push dword ptr [ebp-3Ch]  +
call sub_100856F  +
test eax eax +
jz loc_100A898  +
push offset aEventsourceena  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov ecx [eax+0Ch] +
test ecx ecx +
jz loc_100A8BB  +
cmp ecx 1 +
jz loc_100A8BB  +
push offset aEventsourceena  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
mov eax [ebp-30h] +
add esp 0Ch +
cmp dword ptr [eax+0Ch] 0 +
jz loc_100A8CB  +
cmp dword ptr [eax] 0 +
setnz al  +
test al al +
jz loc_100A8D2  +
mov eax offset aTrue +
jmp loc_100A8D7  +
mov eax offset aFalse +
push eax  +
push offset aEventsourceEna  +
push esi  +
call sub_1008711  +
add esp 0Ch +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
push 0  +
push edi  +
push 2  +
push dword ptr [ebp-3Ch]  +
call sub_100856F  +
test eax eax +
jz loc_100A90F  +
push offset aEventsourceadd  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov eax [eax+0Ch] +
test eax eax +
jz loc_100A92F  +
cmp eax 4 +
jz loc_100A92F  +
push offset aEventsourceadd  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
cmp dword ptr [eax+0Ch] 0 +
jz loc_100A962  +
push offset aAddress_0  +
push dword ptr [esi+10h]  +
call sub_1007721  +
mov eax [ebp-30h] +
pop ecx  +
pop ecx  +
push dword ptr [eax]  +
mov ecx esi +
call near ptr byte_100886C+1  +
push offset aAddress  +
push dword ptr [esi+10h]  +
call sub_1007721  +
pop ecx  +
pop ecx  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
push 0  +
push edi  +
push 4  +
push dword ptr [ebp-3Ch]  +
call sub_100856F  +
test eax eax +
jz loc_100A987  +
push ebx  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov ecx [eax+0Ch] +
test ecx ecx +
jz loc_100A9A6  +
cmp ecx 4 +
jz loc_100A9A6  +
push ebx  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
mov eax [ebp-30h] +
add esp 0Ch +
cmp dword ptr [eax+0Ch] 4 +
jnz loc_100A9E3  +
cmp dword ptr [eax] 0 +
jz loc_100A9E3  +
mov eax [eax] +
cmp word ptr [eax] 0 +
jz loc_100A9E3  +
push offset aUsername_1  +
push dword ptr [esi+10h]  +
call sub_1007721  +
mov eax [ebp-30h] +
pop ecx  +
pop ecx  +
push dword ptr [eax]  +
mov ecx esi +
call near ptr byte_100886C+1  +
push offset aUsername_0  +
push dword ptr [esi+10h]  +
call sub_1007721  +
pop ecx  +
pop ecx  +
push offset aEventsource  +
push dword ptr [esi+10h]  +
call sub_1007721  +
inc edi  +
pop ecx  +
pop ecx  +
cmp edi [ebp-50h] +
jb loc_100A86F  +
push offset aEventsources_1  +
push dword ptr [esi+10h]  +
call sub_1007721  +
pop ecx  +
pop ecx  +
push offset aSubscription  +
push dword ptr [esi+10h]  +
call sub_1007721  +
pop ecx  +
pop ecx  +
lea ecx [ebp-4Ch] +
call sub_1008960  +
lea eax [ebp-64h] +
push eax  +
call sub_10071A4  +
call sub_100EAD1  +
retn   +
***
call __EH_prolog3_GS  +
mov eax [ebp+8] +
xor ebx ebx +
mov [ebp-38h] eax +
mov eax [ebp+0Ch] +
mov edi ecx +
mov [ebp-34h] eax +
mov [ebp-50h] ebx +
mov [ebp-4Ch] ebx +
mov [ebp-48h] ebx +
cmp dword ptr [edi+30h] 8 +
mov [ebp-4] ebx +
jb loc_100AA8B  +
mov eax [edi+1Ch] +
jmp loc_100AA8E  +
lea eax [edi+1Ch] +
lea ecx [ebp-30h] +
push ecx  +
lea ecx [ebp-54h] +
push ecx  +
push ebx  +
push dword ptr [ebp-38h]  +
push ebx  +
push eax  +
call sub_1008640  +
mov esi offset aRuntimestatusa +
cmp eax ebx +
jz loc_100AAB6  +
push esi  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
cmp dword ptr [eax+0Ch] 2 +
jz loc_100AACC  +
push esi  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov eax [eax] +
dec eax  +
jz loc_100AB07  +
dec eax  +
jz loc_100AAFD  +
dec eax  +
jz loc_100AAF3  +
dec eax  +
jz loc_100AAE9  +
push esi  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
jmp loc_100AB15  +
push dword ptr [ebp-34h]  +
push offset aSruntimestatus  +
jmp loc_100AB0F  +
push dword ptr [ebp-34h]  +
push offset aSruntimestat_0  +
jmp loc_100AB0F  +
push dword ptr [ebp-34h]  +
push offset aSruntimestat_1  +
jmp loc_100AB0F  +
push dword ptr [ebp-34h]  +
push offset aSruntimestat_2  +
push edi  +
call sub_1008711  +
add esp 0Ch +
cmp dword ptr [edi+30h] 8 +
jb loc_100AB23  +
mov eax [edi+1Ch] +
jmp loc_100AB26  +
lea eax [edi+1Ch] +
lea ecx [ebp-30h] +
push ecx  +
lea ecx [ebp-54h] +
push ecx  +
push ebx  +
push dword ptr [ebp-38h]  +
push 1  +
push eax  +
call sub_1008640  +
mov esi offset aRuntimestatusl +
cmp eax ebx +
jz loc_100AB4F  +
push esi  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
cmp dword ptr [eax+0Ch] 2 +
jz loc_100AB65  +
push esi  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
push dword ptr [eax]  +
push dword ptr [ebp-34h]  +
push offset aSlasterrorD  +
push edi  +
call sub_1008711  +
mov eax [ebp-30h] +
mov eax [eax] +
add esp 10h +
cmp dword ptr [edi+30h] 8 +
mov [ebp-3Ch] eax +
jb loc_100AB8E  +
mov eax [edi+1Ch] +
jmp loc_100AB91  +
lea eax [edi+1Ch] +
lea ecx [ebp-30h] +
push ecx  +
lea ecx [ebp-54h] +
push ecx  +
push ebx  +
push dword ptr [ebp-38h]  +
push 2  +
push eax  +
call sub_1008640  +
mov esi offset aRuntimestatu_0 +
cmp eax ebx +
jz loc_100ABBA  +
push esi  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
cmp dword ptr [eax+0Ch] 4 +
jz loc_100ABD3  +
push esi  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
mov eax [ebp-30h] +
add esp 0Ch +
mov [ebp-44h] ebx +
cmp [ebp-3Ch] ebx +
jz loc_100ACCC  +
cmp [eax] ebx +
jz loc_100ABEE  +
mov ecx [eax] +
cmp [ecx] bx +
jnz loc_100AC77  +
lea eax [ebp-44h] +
push eax  +
push dword ptr [ebp-3Ch]  +
call sub_10072A5  +
test eax eax +
jz loc_100AC74  +
push dword ptr [ebp-44h]  +
lea eax [ebp-60h] +
push ds:LocalFree  +
push eax  +
call sub_10049E8  +
mov eax [ebp-44h] +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jnz loc_100AC20  +
mov eax offset dword_10015F4 +
push eax  +
push dword ptr [ebp-34h]  +
push offset aSerrormessageS  +
push edi  +
call sub_1008711  +
mov ecx [ebp-44h] +
add esp 10h +
cmp ecx ebx +
jz loc_100AC59  +
cmp [ecx] bx +
jz loc_100AC59  +
mov eax ecx +
lea esi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx bx +
jnz loc_100AC43  +
sub eax esi +
sar eax 1 +
cmp word ptr [ecx+eax*2-2] 0Ah +
jz loc_100AC66  +
push offset asc_100197C  +
push edi  +
call sub_1008711  +
pop ecx  +
pop ecx  +
lea eax [ebp-60h] +
push eax  +
mov [ebp-4] bl +
call sub_10071A4  +
jmp loc_100ACCC  +
mov eax [ebp-30h] +
cmp [eax] ebx +
jnz loc_100AC82  +
mov eax offset dword_10015F4 +
jmp loc_100AC84  +
mov eax [eax] +
push eax  +
push dword ptr [ebp-34h]  +
push offset aSerrormessageS  +
push edi  +
call sub_1008711  +
mov eax [ebp-30h] +
add esp 10h +
cmp [eax] ebx +
jz loc_100ACBF  +
mov ecx [eax] +
cmp [ecx] bx +
jz loc_100ACBF  +
mov eax ecx +
lea esi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx bx +
jnz loc_100ACA9  +
sub eax esi +
sar eax 1 +
cmp word ptr [ecx+eax*2-2] 0Ah +
jz loc_100ACCC  +
push offset asc_100197C  +
push edi  +
call sub_1008711  +
pop ecx  +
pop ecx  +
cmp dword ptr [edi+30h] 8 +
jb loc_100ACD7  +
mov eax [edi+1Ch] +
jmp loc_100ACDA  +
lea eax [edi+1Ch] +
lea ecx [ebp-30h] +
push ecx  +
lea ecx [ebp-54h] +
push ecx  +
push ebx  +
push dword ptr [ebp-38h]  +
push 3  +
push eax  +
call sub_1008640  +
mov esi offset aRuntimestatu_1 +
cmp eax ebx +
jz loc_100AD03  +
push esi  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov ecx [eax+0Ch] +
cmp ecx 3 +
jz loc_100AD22  +
cmp ecx ebx +
jz loc_100AD22  +
push esi  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
mov eax [ebp-30h] +
add esp 0Ch +
cmp [ebp-3Ch] ebx +
jz loc_100AD7C  +
cmp [eax+0Ch] ebx +
jz loc_100AD7C  +
mov ecx [eax] +
mov eax [eax+4] +
mov [ebp-40h] ecx +
lea ecx [ebp-2Ch] +
mov [ebp-3Ch] eax +
call sub_1004927  +
lea eax [ebp-2Ch] +
push eax  +
lea eax [ebp-40h] +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_100FE04  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_100AD5C  +
lea eax [ebp-28h] +
push eax  +
push dword ptr [ebp-34h]  +
push offset aSerrortimeS  +
push edi  +
call sub_1008711  +
add esp 10h +
push ebx  +
push 1  +
lea ecx [ebp-2Ch] +
mov [ebp-4] bl +
call sub_10044B8  +
cmp dword ptr [edi+30h] 8 +
jb loc_100AD87  +
mov eax [edi+1Ch] +
jmp loc_100AD8A  +
lea eax [edi+1Ch] +
lea ecx [ebp-30h] +
push ecx  +
lea ecx [ebp-54h] +
push ecx  +
push ebx  +
push dword ptr [ebp-38h]  +
push 4  +
push eax  +
call sub_1008640  +
mov esi offset aRuntimestatusn +
cmp eax ebx +
jz loc_100ADB3  +
push esi  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov ecx [eax+0Ch] +
cmp ecx 3 +
jz loc_100ADD2  +
cmp ecx ebx +
jz loc_100ADD2  +
push esi  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
mov eax [ebp-30h] +
add esp 0Ch +
cmp [eax+0Ch] ebx +
jz loc_100AE27  +
mov ecx [eax] +
mov eax [eax+4] +
mov [ebp-40h] ecx +
lea ecx [ebp-2Ch] +
mov [ebp-3Ch] eax +
call sub_1004927  +
lea eax [ebp-2Ch] +
push eax  +
lea eax [ebp-40h] +
push eax  +
mov byte ptr [ebp-4] 3 +
call sub_100FE04  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_100AE07  +
lea eax [ebp-28h] +
push eax  +
push dword ptr [ebp-34h]  +
push offset aSnextretrytime  +
push edi  +
call sub_1008711  +
add esp 10h +
push ebx  +
push 1  +
lea ecx [ebp-2Ch] +
mov [ebp-4] bl +
call sub_10044B8  +
cmp dword ptr [edi+30h] 8 +
jb loc_100AE32  +
mov eax [edi+1Ch] +
jmp loc_100AE35  +
lea eax [edi+1Ch] +
lea ecx [ebp-30h] +
push ecx  +
lea ecx [ebp-54h] +
push ecx  +
push ebx  +
push dword ptr [ebp-38h]  +
push 6  +
push eax  +
call sub_1008640  +
mov esi offset aRuntimestatu_2 +
cmp eax ebx +
jz loc_100AE5E  +
push esi  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-30h] +
mov ecx [eax+0Ch] +
cmp ecx 3 +
jz loc_100AE7D  +
cmp ecx ebx +
jz loc_100AE7D  +
push esi  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
mov eax [ebp-30h] +
add esp 0Ch +
cmp [eax+0Ch] ebx +
jz loc_100AECF  +
mov ecx [eax] +
mov eax [eax+4] +
mov [ebp-40h] ecx +
lea ecx [ebp-2Ch] +
mov [ebp-3Ch] eax +
call sub_1004927  +
lea eax [ebp-2Ch] +
push eax  +
lea eax [ebp-40h] +
push eax  +
mov byte ptr [ebp-4] 4 +
call sub_100FE04  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_100AEB2  +
lea eax [ebp-28h] +
push eax  +
push dword ptr [ebp-34h]  +
push offset aSlastheartbeat  +
push edi  +
call sub_1008711  +
add esp 10h +
push ebx  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_10044B8  +
lea ecx [ebp-54h] +
call sub_1008960  +
call sub_100EAD1  +
retn 8  +
***
call __EH_prolog3  +
mov eax ecx +
mov [ebp-10h] eax +
xor esi esi +
mov [ebp-20h] esi +
mov [ebp-1Ch] esi +
mov [ebp-18h] esi +
cmp dword ptr [eax+30h] 8 +
mov [ebp-4] esi +
jb loc_100AF0E  +
mov eax [eax+1Ch] +
jmp loc_100AF11  +
add eax 1Ch +
lea ecx [ebp-14h] +
push ecx  +
lea ecx [ebp-24h] +
push ecx  +
push esi  +
push esi  +
push 5  +
push eax  +
call sub_1008640  +
mov edi offset aEventsources +
cmp eax esi +
jz loc_100AF38  +
push edi  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-14h] +
xor ebx ebx +
cmp dword ptr [eax+0Ch] 84h +
jnz loc_100AF4A  +
mov ebx [eax] +
jmp loc_100AF5A  +
push edi  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
mov eax [ebp-14h] +
add esp 0Ch +
mov edi [eax+8] +
cmp edi esi +
jbe loc_100AF9C  +
push offset aEventsources_0  +
push dword ptr [ebp-10h]  +
call sub_1008711  +
pop ecx  +
pop ecx  +
cmp edi esi +
jbe loc_100AF9C  +
push dword ptr [ebx+esi*4]  +
push offset aS_1  +
push dword ptr [ebp-10h]  +
call sub_1008711  +
mov ecx [ebp-10h] +
add esp 0Ch +
push offset asc_10030E8  +
push dword ptr [ebx+esi*4]  +
call sub_100AA58  +
inc esi  +
cmp esi edi +
jb loc_100AF74  +
lea ecx [ebp-24h] +
call sub_1008960  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
cmp dword ptr [esi+30h] 8 +
push edi  +
jb loc_100AFC5  +
mov eax [esi+1Ch] +
jmp loc_100AFC8  +
lea eax [esi+1Ch] +
push eax  +
push offset aSubscriptionS  +
push esi  +
call sub_1008711  +
add esp 0Ch +
push offset asc_100236C  +
push 0  +
mov ecx esi +
call sub_100AA58  +
mov edi [esi+8] +
lea ebx [edi+14h] +
mov ecx ebx +
call sub_1003FAF  +
push 2  +
pop ecx  +
cmp eax ecx +
jnz loc_100B002  +
mov ecx esi +
call sub_100AEE4  +
jmp loc_100B055  +
mov [ebp-4] ecx +
mov ecx ebx +
call sub_1003FAF  +
cmp eax 2 +
jle loc_100B055  +
push dword ptr [ebp-4]  +
mov ecx edi +
call sub_1006150  +
push eax  +
push offset aS_1  +
push esi  +
call sub_1008711  +
mov ecx [esi+8] +
add esp 0Ch +
push offset asc_10030E8  +
push dword ptr [ebp-4]  +
call sub_1006150  +
push eax  +
mov ecx esi +
call sub_100AA58  +
mov edi [esi+8] +
inc dword ptr [ebp-4]  +
lea ecx [edi+14h] +
call sub_1003FAF  +
cmp [ebp-4] eax +
jl loc_100B011  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
cmp dword ptr [ecx+30h] 8 +
jb loc_100B077  +
mov ecx [ecx+1Ch] +
jmp loc_100B07A  +
add ecx 1Ch +
push 0  +
push ecx  +
call EcDeleteSubscription  +
test eax eax +
jnz locret_100B096  +
push 0Bh  +
call ds:__imp_GetLastError  +
push eax  +
call loc_10078D8  +
pop ecx  +
pop ecx  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+8] +
push 2  +
push 2  +
call sub_100610F  +
mov ecx [esi+8] +
push 0  +
call sub_10061F8  +
mov ecx [esi+8] +
push 1  +
call sub_1006150  +
push eax  +
lea ecx [esi+18h] +
call sub_1005106  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+8] +
push 7FFFFFFFh  +
push 2  +
call sub_100610F  +
mov ecx [esi+8] +
push 0  +
call sub_10061F8  +
mov ecx [esi+8] +
push 1  +
call sub_1006150  +
push eax  +
lea ecx [esi+18h] +
call sub_1005106  +
pop esi  +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
xor edi edi +
mov [ebp-28h] edi +
mov [ebp-24h] edi +
mov [ebp-20h] edi +
cmp dword ptr [esi+30h] 8 +
mov [ebp-4] edi +
jb loc_100B13D  +
mov eax [esi+1Ch] +
jmp loc_100B140  +
lea eax [esi+1Ch] +
mov ebx [ebp+8] +
lea ecx [ebp+8] +
push ecx  +
lea ecx [ebp-2Ch] +
push ecx  +
push edi  +
push ebx  +
push edi  +
push eax  +
call sub_1008640  +
cmp eax edi +
jz loc_100B168  +
push offset aRuntimestatusa  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp+8] +
cmp dword ptr [eax+0Ch] 2 +
jnz loc_100B1AA  +
cmp dword ptr [eax] 1 +
jnz loc_100B1AA  +
mov [ebp-18h] edi +
mov [ebp-14h] edi +
mov [ebp-10h] edi +
push ebx  +
lea eax [ebp-1Ch] +
push 25h  +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_100FB30  +
push dword ptr [ebp-18h]  +
push offset aS_2  +
push esi  +
call sub_1008711  +
add esp 18h +
lea ecx [ebp-1Ch] +
call sub_1008960  +
jmp loc_100B1D6  +
cmp dword ptr [esi+30h] 8 +
jb loc_100B1B5  +
mov esi [esi+1Ch] +
jmp loc_100B1B8  +
add esi 1Ch +
push edi  +
push ebx  +
push esi  +
call EcRetrySubscription  +
test eax eax +
jnz loc_100B1D6  +
push ebx  +
push 10h  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100792D  +
add esp 0Ch +
lea ecx [ebp-2Ch] +
call sub_1008960  +
call __EH_epilog3  +
retn 4  +
***
call __EH_prolog3  +
mov ebx ecx +
mov [ebp-18h] ebx +
cmp dword ptr [ebx+30h] 8 +
jb loc_100B207  +
mov eax [ebx+1Ch] +
jmp loc_100B20A  +
lea eax [ebx+1Ch] +
push 2  +
push 1  +
push eax  +
call EcOpenSubscription  +
mov edi eax +
xor esi esi +
cmp edi esi +
jnz loc_100B22C  +
push 8  +
call ds:__imp_GetLastError  +
push eax  +
call loc_10078D8  +
pop ecx  +
pop ecx  +
push edi  +
push offset loc_100F150  +
lea eax [ebp-24h] +
push eax  +
call sub_10049E8  +
mov [ebp-4] esi +
mov [ebp-30h] esi +
mov [ebp-2Ch] esi +
mov [ebp-28h] esi +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-34h] +
push eax  +
push esi  +
push 1Bh  +
push edi  +
mov byte ptr [ebp-4] 1 +
call sub_10084A4  +
cmp eax esi +
jz loc_100B270  +
push offset aSubscriptionty  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-10h] +
cmp dword ptr [eax+0Ch] 2 +
jnz loc_100B2B0  +
cmp [eax] esi +
jnz loc_100B2B0  +
cmp dword ptr [ebx+30h] 8 +
jb loc_100B288  +
mov eax [ebx+1Ch] +
jmp loc_100B28B  +
lea eax [ebx+1Ch] +
push esi  +
push esi  +
push eax  +
call EcRetrySubscription  +
test eax eax +
jnz loc_100B35D  +
push 11h  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100792D  +
pop ecx  +
pop ecx  +
jmp loc_100B35D  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-34h] +
push eax  +
push esi  +
push 1  +
push edi  +
mov [ebp-14h] esi +
xor ebx ebx +
call sub_10084A4  +
mov edi offset aEventsources +
cmp eax esi +
jz loc_100B2DB  +
push edi  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-10h] +
cmp [eax+0Ch] esi +
jz loc_100B2E7  +
mov ebx [eax] +
jmp loc_100B2F4  +
push edi  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
add esp 0Ch +
lea eax [ebp-14h] +
push eax  +
push ebx  +
call EcGetObjectArraySize  +
test eax eax +
jnz loc_100B318  +
call ds:__imp_GetLastError  +
push offset aEventsourcecou  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
xor edi edi +
cmp [ebp-14h] esi +
jbe loc_100B35D  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-34h] +
push eax  +
push esi  +
push edi  +
push 2  +
push ebx  +
call sub_100856F  +
cmp eax esi +
jz loc_100B345  +
push offset aEventsourceadd  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-10h] +
cmp [eax+0Ch] esi +
jz loc_100B357  +
push dword ptr [eax]  +
mov ecx [ebp-18h] +
call sub_100B116  +
inc edi  +
cmp edi [ebp-14h] +
jb loc_100B31F  +
lea ecx [ebp-34h] +
call sub_1008960  +
lea eax [ebp-24h] +
push eax  +
call sub_10071A4  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov esi [edi+8] +
lea ebx [esi+14h] +
mov ecx ebx +
call sub_1003FAF  +
push 2  +
pop ecx  +
cmp eax ecx +
jnz loc_100B3A1  +
mov ecx edi +
call sub_100B1EB  +
jmp loc_100B3D5  +
mov [ebp-4] ecx +
mov ecx ebx +
call sub_1003FAF  +
cmp eax 2 +
jle loc_100B3D5  +
push dword ptr [ebp-4]  +
mov ecx esi +
call sub_1006150  +
push eax  +
mov ecx edi +
call sub_100B116  +
mov esi [edi+8] +
inc dword ptr [ebp-4]  +
lea ecx [esi+14h] +
call sub_1003FAF  +
cmp [ebp-4] eax +
jl loc_100B3B0  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edx [ecx+4] +
test edx edx +
jnz loc_100B405  +
xor eax eax +
retn   +
mov eax [ecx+8] +
sub eax edx +
sar eax 2 +
retn   +
***
mov edx [ecx+4] +
test edx edx +
jnz loc_100B41D  +
xor eax eax +
retn   +
mov eax [ecx+0Ch] +
sub eax edx +
sar eax 2 +
retn   +
***
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+8]  +
mov esi ecx +
call SysAllocString  +
mov [esi] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
jmp loc_100B45E  +
mov ecx [ebp+arg_8] +
mov ecx [ecx] +
mov [eax] ecx +
add eax 4 +
cmp eax [ebp+arg_4] +
jnz loc_100B454  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
sub esp 0Ch +
test ecx ecx +
ja loc_100B48B  +
xor ecx ecx +
mov eax ecx +
shl eax 2 +
push eax  +
call loc_100E4E5  +
pop ecx  +
leave   +
retn 8  +
***
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 4 +
jnb loc_100B47B  +
push 0  +
lea ecx [ebp-0Ch] +
call sub_1003E76  +
push offset dword_1010AE8  +
lea eax [ebp-0Ch] +
push eax  +
call _CxxThrowException  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub eax [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_8] +
sar eax 2 +
mov ecx eax +
shl ecx 2 +
sub esi ecx +
test eax eax +
jle loc_100B4E0  +
push ecx  +
push [ebp+arg_0]  +
push ecx  +
push esi  +
call memmove_s  +
add esp 10h +
mov eax esi +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub eax [ebp+arg_0] +
mov edx [ebp+arg_8] +
sar eax 2 +
mov ecx eax +
shl ecx 2 +
push esi  +
lea esi [ecx+edx] +
test eax eax +
jbe loc_100B516  +
push ecx  +
push [ebp+arg_0]  +
push ecx  +
push edx  +
call memmove_s  +
add esp 10h +
mov eax esi +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
jbe loc_100B543  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_8] +
mov ecx [ecx] +
dec [ebp+arg_4]  +
mov [eax] ecx +
add eax 4 +
cmp [ebp+arg_4] 0 +
ja loc_100B530  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_100B55F  +
mov ecx [ebp+arg_4] +
mov cx [ecx] +
mov [eax] cx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub eax [ebp+arg_0] +
mov edx [ebp+arg_8] +
sar eax 1 +
lea ecx [eax+eax] +
push esi  +
lea esi [ecx+edx] +
test eax eax +
jle loc_100B591  +
push ecx  +
push [ebp+arg_0]  +
push ecx  +
push edx  +
call memmove_s  +
add esp 10h +
mov eax esi +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub eax [ebp+arg_0] +
mov ecx [ebp+arg_8] +
sar eax 1 +
lea eax [eax+eax] +
push esi  +
lea esi [eax+ecx] +
jz loc_100B5C2  +
push eax  +
push [ebp+arg_0]  +
push eax  +
push ecx  +
call memmove_s  +
add esp 10h +
mov eax esi +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+4] +
test ecx ecx +
jz loc_100B5F1  +
mov eax [eax+8] +
sub eax ecx +
sar eax 1 +
jz loc_100B5F1  +
add eax eax +
jz loc_100B5F1  +
mov byte ptr [ecx] 0 +
inc ecx  +
dec eax  +
jnz loc_100B5EA  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
cmp byte ptr [eax] 0 +
jnz loc_100B60E  +
lea ecx [eax+8] +
push ecx  +
call dword ptr [eax+4]  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
cmp byte ptr [eax] 0 +
jnz loc_100B627  +
call dword ptr [eax+4]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100B4B5  +
add esp 14h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100B4EA  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100B522  +
add esp 10h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100B568  +
add esp 14h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100B59B  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
cmp [ebp+arg_4] 0 +
mov eax [ebp+arg_0] +
setz cl  +
mov [eax] cl +
mov ecx [ebp+arg_8] +
mov [eax+4] ecx +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_4]  +
and [ebp+var_4] 0 +
push 1  +
push [ebp+arg_0]  +
call sub_100B71B  +
mov eax [ebp+arg_0] +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100B68A  +
add esp 0Ch +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_0] +
push ecx  +
push [ebp+arg_8]  +
push esi  +
push edi  +
call sub_100B763  +
lea eax [edi+esi*4] +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea edx [esi+50h] +
push edx  +
mov dword ptr [esi] offset off_1001414 +
call sub_100B5CE  +
mov ecx edx +
call sub_1008960  +
push 0  +
push 1  +
lea ecx [esi+34h] +
call sub_10044B8  +
push 0  +
push 1  +
lea ecx [esi+18h] +
call sub_10044B8  +
mov ecx esi +
pop esi  +
jmp sub_10048C7  +
***
push 44h  +
mov eax offset loc_1010687 +
call __EH_prolog3  +
push offset aVectorTTooLong  +
lea ecx [ebp-28h] +
call sub_10051FF  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_10050A8  +
push offset dword_1010D44  +
lea eax [ebp-50h] +
push eax  +
call _CxxThrowException  +
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
sub edi [ebp+arg_4] +
mov esi ecx +
mov ecx [esi+4] +
sar edi 1 +
test ecx ecx +
jnz loc_100B85C  +
and [ebp+var_4] ecx +
jmp loc_100B866  +
mov eax [esi+0Ch] +
sub eax ecx +
sar eax 1 +
mov [ebp+var_4] eax +
test edi edi +
jz loc_100B9CB  +
test ecx ecx +
jnz loc_100B876  +
xor eax eax +
jmp loc_100B87D  +
mov eax [esi+8] +
sub eax ecx +
sar eax 1 +
push ebx  +
mov edx 7FFFFFFFh +
mov ebx edx +
sub ebx eax +
cmp ebx edi +
jnb loc_100B890  +
call loc_100B801  +
test ecx ecx +
jnz loc_100B898  +
xor eax eax +
jmp loc_100B89F  +
mov eax [esi+8] +
sub eax ecx +
sar eax 1 +
add eax edi +
cmp [ebp+var_4] eax +
jnb loc_100B950  +
mov eax [ebp+var_4] +
shr eax 1 +
sub edx eax +
cmp edx [ebp+var_4] +
jnb loc_100B8BC  +
and [ebp+var_4] 0 +
jmp loc_100B8BF  +
add [ebp+var_4] eax +
test ecx ecx +
jnz loc_100B8C7  +
xor eax eax +
jmp loc_100B8CE  +
mov eax [esi+8] +
sub eax ecx +
sar eax 1 +
add eax edi +
cmp [ebp+var_4] eax +
jnb loc_100B8E9  +
test ecx ecx +
jnz loc_100B8DD  +
xor eax eax +
jmp loc_100B8E4  +
mov eax [esi+8] +
sub eax ecx +
sar eax 1 +
add eax edi +
mov [ebp+var_4] eax +
push 0  +
push [ebp+var_4]  +
call loc_10040E6  +
push esi  +
mov ebx eax +
mov eax [esi+4] +
push ebx  +
push [ebp+arg_0]  +
push eax  +
call sub_100B6DF  +
push esi  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_100B6DF  +
push esi  +
push eax  +
push dword ptr [esi+8]  +
push [ebp+arg_0]  +
call sub_100B6DF  +
mov eax [esi+4] +
test eax eax +
jnz loc_100B928  +
xor ecx ecx +
jmp loc_100B92F  +
mov ecx [esi+8] +
sub ecx eax +
sar ecx 1 +
add edi ecx +
test eax eax +
jz loc_100B93C  +
push eax  +
call sub_100E4D4  +
pop ecx  +
mov eax [ebp+var_4] +
lea eax [ebx+eax*2] +
mov [esi+0Ch] eax +
lea eax [ebx+edi*2] +
mov [esi+8] eax +
mov [esi+4] ebx +
jmp loc_100B9CA  +
mov ebx [esi+8] +
mov eax [ebp+arg_0] +
mov ecx ebx +
sub ecx eax +
sar ecx 1 +
push esi  +
cmp ecx edi +
jnb loc_100B99D  +
add edi edi +
lea ecx [edi+eax] +
push ecx  +
push ebx  +
push eax  +
call sub_100B6DF  +
mov eax [esi+8] +
mov edx [ebp+arg_4] +
mov ecx eax +
sub ecx [ebp+arg_0] +
push esi  +
push eax  +
push [ebp+arg_8]  +
sar ecx 1 +
lea ebx [edx+ecx*2] +
push ebx  +
call sub_100B6DF  +
push [ebp+arg_0]  +
add [esi+8] edi +
push ebx  +
push [ebp+arg_4]  +
call sub_100B6B3  +
add esp 0Ch +
jmp loc_100B9CA  +
lea eax [edi+edi] +
push ebx  +
mov edi ebx +
sub edi eax +
push ebx  +
push edi  +
call sub_100B6DF  +
push ebx  +
push edi  +
push [ebp+arg_0]  +
mov [esi+8] eax +
call sub_10071C0  +
push [ebp+arg_0]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_100B6B3  +
add esp 18h +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
mov ecx [esi+8] +
push offset off_1013100  +
call sub_10061F8  +
mov ecx [esi+8] +
mov ebx offset aC +
push ebx  +
mov edi offset aConfig +
push edi  +
call sub_1005F1A  +
mov ecx [esi+8] +
test al al +
jz loc_100BA37  +
push offset off_10130E4  +
call sub_10061F8  +
mov ecx [esi+8] +
push 1  +
push 1  +
call sub_100610F  +
mov ecx [esi+8] +
lea eax [ebp-1] +
push eax  +
push offset dword_10015F4  +
push ebx  +
push edi  +
call sub_100656C  +
lea ecx [esi+34h] +
jmp loc_100BA4D  +
push 2  +
push 2  +
call sub_100610F  +
mov ecx [esi+8] +
push 1  +
call sub_1006150  +
lea ecx [esi+18h] +
push eax  +
call sub_1005106  +
mov ecx [esi+8] +
push offset aEsa  +
push offset aEventsourceadd  +
call sub_1005F1A  +
test al al +
jnz loc_100BAF8  +
mov ecx [esi+8] +
push offset aC_0  +
push edi  +
call sub_1005F1A  +
test al al +
jnz loc_100BAF8  +
mov ecx [esi+8] +
push offset aEse  +
push offset aEventsourceena  +
call sub_1005F1A  +
test al al +
jnz loc_100BAED  +
mov ecx [esi+8] +
push offset aAes  +
push offset aAddeventsource  +
call sub_1005F1A  +
test al al +
jnz loc_100BAED  +
mov ecx [esi+8] +
push offset aRes  +
push offset aRemoveeventsou  +
call sub_1005F1A  +
test al al +
jnz loc_100BAED  +
mov ecx [esi+8] +
push offset aUn  +
push offset aUsername  +
call sub_1005F1A  +
test al al +
jnz loc_100BAED  +
mov ecx [esi+8] +
push offset aUp  +
push offset aUserpassword  +
call sub_1005F1A  +
test al al +
jz loc_100BAF8  +
push 21h  +
push 57h  +
call loc_10078D8  +
pop ecx  +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov eax offset loc_10106AF +
call __EH_prolog3  +
xor ebx ebx +
mov [ebp-14h] ebx +
mov ecx [ecx+8] +
lea eax [ebp-0Dh] +
push eax  +
mov esi offset dword_10015F4 +
push esi  +
push dword ptr [ebp+0Ch]  +
mov [ebp-4] ebx +
push dword ptr [ebp+8]  +
mov [ebp-0Dh] bl +
call sub_100656C  +
mov ecx [ebp+18h] +
push eax  +
call sub_1005106  +
cmp [ebp-0Dh] bl +
jz loc_100BB4E  +
mov bl 1 +
push dword ptr [ebp-14h]  +
call SysFreeString  +
mov al bl +
jmp loc_100BBB4  +
cmp [ebp+10h] ebx +
jz loc_100BBA9  +
cmp [ebp+14h] ebx +
jz loc_100BBA9  +
lea eax [ebp-14h] +
push eax  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
call near ptr dword_1007C2C+53h  +
mov edi eax +
cmp edi ebx +
jge loc_100BB77  +
push 5  +
push edi  +
call loc_10078D8  +
pop ecx  +
pop ecx  +
cmp edi 1 +
jz loc_100BB41  +
cmp [ebp-14h] ebx +
jz loc_100BB8E  +
push dword ptr [ebp-14h]  +
call SysStringLen  +
cmp eax ebx +
jnz loc_100BB91  +
push esi  +
jmp loc_100BB94  +
push dword ptr [ebp-14h]  +
mov ecx [ebp+18h] +
call sub_1005106  +
push dword ptr [ebp-14h]  +
call SysFreeString  +
mov al 1 +
jmp loc_100BBB4  +
push dword ptr [ebp-14h]  +
call SysFreeString  +
xor al al +
call __EH_epilog3  +
retn 14h  +
***
call __EH_prolog3  +
xor ebx ebx +
mov [ebp-14h] ebx +
mov ecx [ecx+8] +
lea eax [ebp-0Dh] +
push eax  +
mov esi offset dword_10015F4 +
push esi  +
push dword ptr [ebp+0Ch]  +
mov [ebp-4] ebx +
push dword ptr [ebp+8]  +
mov [ebp-0Dh] bl +
call sub_100656C  +
mov ecx [ebp+18h] +
push eax  +
call sub_1005106  +
cmp [ebp-0Dh] bl +
jz loc_100BC0D  +
mov bl 1 +
push dword ptr [ebp-14h]  +
call SysFreeString  +
mov al bl +
jmp loc_100BC75  +
cmp [ebp+10h] ebx +
jz loc_100BC6A  +
cmp [ebp+14h] ebx +
jz loc_100BC6A  +
lea eax [ebp-14h] +
push eax  +
push 2Ch  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
call near ptr dword_1008024+3  +
mov edi eax +
cmp edi ebx +
jge loc_100BC38  +
push 5  +
push edi  +
call loc_10078D8  +
pop ecx  +
pop ecx  +
cmp edi 1 +
jz loc_100BC00  +
cmp [ebp-14h] ebx +
jz loc_100BC4F  +
push dword ptr [ebp-14h]  +
call SysStringLen  +
cmp eax ebx +
jnz loc_100BC52  +
push esi  +
jmp loc_100BC55  +
push dword ptr [ebp-14h]  +
mov ecx [ebp+18h] +
call sub_1005106  +
push dword ptr [ebp-14h]  +
call SysFreeString  +
mov al 1 +
jmp loc_100BC75  +
push dword ptr [ebp-14h]  +
call SysFreeString  +
xor al al +
call __EH_epilog3  +
retn 14h  +
***
mov eax offset loc_10106D7 +
call __EH_prolog3_GS  +
mov eax [ebp+8] +
mov edi [ebp+0Ch] +
mov ebx [ebp+10h] +
mov [ebp-3Ch] eax +
mov eax [ebp+14h] +
mov [ebp-34h] eax +
mov eax [ebp+18h] +
mov esi ecx +
lea ecx [ebp-2Ch] +
mov [ebp-38h] eax +
call sub_1004927  +
mov ecx [esi+8] +
and dword ptr [ebp-4] 0 +
lea eax [ebp-2Dh] +
push eax  +
push 1  +
push ebx  +
push edi  +
mov byte ptr [ebp-2Dh] 0 +
call sub_10065DC  +
cmp byte ptr [ebp-2Dh] 0 +
jz loc_100BCDA  +
xor ecx ecx +
test al al +
setnz cl  +
mov [ebp-4Ch] ecx +
jmp loc_100BD3A  +
lea eax [ebp-2Ch] +
push eax  +
push dword ptr [ebp-38h]  +
mov ecx esi +
push dword ptr [ebp-34h]  +
push ebx  +
push edi  +
call near ptr dword_100BB00+2  +
test al al +
jz loc_100BD77  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_100BD01  +
lea eax [ebp-28h] +
push offset aTrue  +
push eax  +
call sub_1003D35  +
cmp eax 2 +
jnz loc_100BD1A  +
mov dword ptr [ebp-4Ch] 1 +
jmp loc_100BD3A  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_100BD26  +
lea eax [ebp-28h] +
push offset aFalse  +
push eax  +
call sub_1003D35  +
cmp eax 2 +
jnz loc_100BD64  +
and dword ptr [ebp-4Ch] 0 +
lea eax [ebp-4Ch] +
push eax  +
push 0  +
push dword ptr [ebp+1Ch]  +
xor esi esi +
push dword ptr [ebp-3Ch]  +
inc esi  +
mov [ebp-40h] esi +
call EcSetSubscriptionProperty  +
test eax eax +
jnz loc_100BD5F  +
call ds:__imp_GetLastError  +
mov esi eax +
jmp loc_100BD67  +
push 0  +
push esi  +
jmp loc_100BD7B  +
push 57h  +
pop esi  +
push 0  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_10044B8  +
mov eax esi +
jmp loc_100BD85  +
push 0  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_10044B8  +
xor eax eax +
call sub_100EAD1  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_8] +
mov eax [eax] +
push esi  +
push edi  +
mov esi ecx +
mov [ebp+var_4] eax +
call sub_100B413  +
mov edi [ebp+arg_4] +
mov [ebp+arg_8] eax +
test edi edi +
jz loc_100C092  +
mov ecx esi +
call sub_100B3FB  +
mov ecx 3FFFFFFFh +
mov edx ecx +
sub edx eax +
cmp edx edi +
jnb loc_100BF80  +
call loc_100B801  +
add eax edi +
push ebx  +
cmp [ebp+arg_8] eax +
jnb loc_100C007  +
mov edx [ebp+arg_8] +
shr edx 1 +
sub ecx edx +
cmp ecx [ebp+arg_8] +
jnb loc_100BF9A  +
and [ebp+arg_8] 0 +
jmp loc_100BF9D  +
add [ebp+arg_8] edx +
cmp [ebp+arg_8] eax +
jnb loc_100BFA5  +
mov [ebp+arg_8] eax +
push 0  +
push [ebp+arg_8]  +
call loc_100B46A  +
push esi  +
mov ebx eax +
mov eax [esi+4] +
push ebx  +
push [ebp+arg_0]  +
push eax  +
call sub_100B65C  +
lea ecx [ebp+var_4] +
push ecx  +
push edi  +
push eax  +
mov ecx esi +
call sub_100B79B  +
push esi  +
push eax  +
push dword ptr [esi+8]  +
push [ebp+arg_0]  +
call sub_100B65C  +
mov ecx esi +
call sub_100B3FB  +
add edi eax +
mov eax [esi+4] +
test eax eax +
jz loc_100BFF0  +
push eax  +
call sub_100E4D4  +
pop ecx  +
mov eax [ebp+arg_8] +
lea eax [ebx+eax*4] +
mov [esi+0Ch] eax +
lea eax [ebx+edi*4] +
mov [esi+8] eax +
mov [esi+4] ebx +
jmp loc_100C091  +
mov eax [esi+8] +
mov ecx [ebp+arg_0] +
mov edx eax +
sub edx ecx +
sar edx 2 +
mov [ebp+arg_8] eax +
push esi  +
cmp edx edi +
jnb loc_100C060  +
mov ebx edi +
shl ebx 2 +
lea edx [ebx+ecx] +
push edx  +
push eax  +
push ecx  +
call sub_100B65C  +
mov eax [esi+8] +
lea ecx [ebp+var_4] +
push ecx  +
mov ecx eax +
sub ecx [ebp+arg_0] +
sar ecx 2 +
sub edi ecx +
push edi  +
push eax  +
mov ecx esi +
call sub_100B79B  +
add [esi+8] ebx +
mov esi [esi+8] +
lea eax [ebp+var_4] +
push eax  +
sub esi ebx +
push esi  +
push [ebp+arg_0]  +
call sub_100B44A  +
add esp 0Ch +
jmp loc_100C091  +
push eax  +
mov ebx eax +
shl edi 2 +
push eax  +
sub ebx edi +
push ebx  +
call sub_100B65C  +
push [ebp+arg_8]  +
mov [esi+8] eax +
push ebx  +
push [ebp+arg_0]  +
call sub_100B630  +
lea eax [ebp+var_4] +
push eax  +
mov eax [ebp+arg_0] +
add edi eax +
push edi  +
push eax  +
call sub_100B44A  +
add esp 18h +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100B83E  +
pop ebp  +
retn 0Ch  +
***
call __EH_prolog3_catch  +
mov edi ecx +
mov [ebp-14h] edi +
mov esi [ebp+8] +
mov ecx [esi+4] +
test ecx ecx +
jnz loc_100C0DB  +
xor eax eax +
jmp loc_100C0E2  +
mov eax [esi+8] +
sub eax ecx +
sar eax 1 +
push eax  +
mov ecx edi +
call sub_1005455  +
test al al +
jz loc_100C107  +
mov eax [edi+4] +
mov ecx [esi+8] +
mov esi [esi+4] +
and dword ptr [ebp-4] 0 +
push edi  +
push eax  +
push ecx  +
push esi  +
call sub_100E0D1  +
mov [edi+8] eax +
mov eax edi +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1005455  +
test al al +
jz loc_100C150  +
push [ebp+arg_4]  +
mov eax [esi+4] +
push [ebp+arg_0]  +
mov ecx esi +
push eax  +
call sub_10073B2  +
mov [esi+8] eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
call sub_100B3FB  +
test eax eax +
jnz loc_100C170  +
xor esi esi +
jmp loc_100C179  +
mov esi [ebp+arg_4] +
sub esi [edi+4] +
sar esi 2 +
push [ebp+arg_8]  +
mov ecx edi +
push 1  +
push [ebp+arg_4]  +
call sub_100BF42  +
mov eax [edi+4] +
lea ecx [eax+esi*4] +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] ecx +
pop esi  +
pop ebp  +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push esi  +
mov esi ecx +
mov cl [eax] +
mov [esi] cl +
mov ecx [eax+4] +
mov byte ptr [eax] 1 +
add eax 8 +
mov [esi+4] ecx +
push eax  +
lea ecx [esi+8] +
call sub_100C0BC  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax offset loc_101075B +
call __EH_prolog3  +
mov esi ecx +
and dword ptr [ebp-4] 0 +
cmp byte ptr [ebp+8] 0 +
lea ecx [esi+8] +
setz al  +
mov [esi] al +
mov eax [ebp+0Ch] +
mov [esi+4] eax +
lea eax [ebp+10h] +
push eax  +
call sub_100C0BC  +
lea ecx [ebp+10h] +
call sub_1008960  +
mov eax esi +
call __EH_epilog3  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+8] +
mov ecx [esi+4] +
push eax  +
push ecx  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_1007377  +
push [ebp+arg_4]  +
mov eax [esi+4] +
push [ebp+arg_0]  +
mov ecx esi +
push eax  +
call sub_100C09D  +
pop esi  +
leave   +
retn 0Ch  +
***
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100C31F  +
cmp dx di +
jz loc_100C31B  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100C31F  +
add eax ebx +
add ecx ebx +
cmp dx di +
jnz loc_100C2FB  +
xor eax eax +
jmp loc_100C324  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax edi +
jz loc_100C336  +
push 24h  +
push 80070057h  +
call loc_10078D8  +
pop ecx  +
pop ecx  +
mov eax [esi] +
mov ecx [eax] +
lea edx [ebp-10h] +
push edx  +
push eax  +
call dword ptr [ecx+9Ch]  +
mov esi eax +
cmp esi edi +
jge loc_100C355  +
push 3  +
push esi  +
call loc_10078D8  +
pop ecx  +
pop ecx  +
cmp esi 1 +
jz loc_100C3A1  +
cmp [ebp-10h] edi +
jz loc_100C3A1  +
push dword ptr [ebp-10h]  +
call SysStringLen  +
cmp eax edi +
jz loc_100C3A1  +
mov eax [ebp-10h] +
mov ecx offset aHttpSchemas_mi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100C398  +
cmp dx di +
jz loc_100C394  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100C398  +
add eax ebx +
add ecx ebx +
cmp dx di +
jnz loc_100C374  +
xor eax eax +
jmp loc_100C39D  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax edi +
jz loc_100C3AF  +
push 24h  +
push 80070057h  +
call loc_10078D8  +
pop ecx  +
pop ecx  +
push dword ptr [ebp-10h]  +
mov esi SysFreeString +
call esi  +
push dword ptr [ebp-14h]  +
call esi  +
lea ecx [ebp-28h] +
call sub_1008960  +
mov eax [ebp-18h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax edi +
jz loc_100C3D8  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
call __EH_epilog3  +
retn 8  +
***
push ebp  +
mov ebp esp +
push ecx  +
and dword ptr [ebp-4] 0 +
push esi  +
lea eax [ebp-4] +
push eax  +
push dword ptr [ebp+8]  +
mov esi ecx +
call sub_100C128  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
call sub_100B3FB  +
mov ecx esi +
mov edi eax +
call sub_100B413  +
push dword ptr [ebp+8]  +
cmp edi eax +
mov eax [esi+8] +
mov ecx esi +
jnb loc_100C43A  +
push 1  +
push eax  +
call sub_100B79B  +
mov [esi+8] eax +
jmp loc_100C444  +
push eax  +
lea eax [ebp+8] +
push eax  +
call sub_100C15A  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_100C212  +
pop ebp  +
retn 8  +
***
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+0Ch] +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
mov [ebp-4] ebx +
cmp eax ebx +
jz loc_100C64F  +
cmp [eax] bx +
jz loc_100C64F  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_100C63A  +
sub eax edx +
sar eax 1 +
cmp eax 201h +
jbe loc_100C65D  +
push 20h  +
push 89Ah  +
call loc_10078D8  +
pop ecx  +
pop ecx  +
cmp [ebp+8] ebx +
jnz loc_100C669  +
mov dword ptr [ebp+8] offset dword_10015F4 +
mov edi [ebp+10h] +
push edi  +
call sub_100B5CE  +
push ebx  +
mov esi 101h +
push esi  +
mov ecx edi +
call sub_10076B6  +
mov eax [ebp+0Ch] +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx bx +
jnz loc_100C686  +
push 4020Ah  +
sub eax ecx +
mov ecx [edi+4] +
lea edx [ebp-4] +
push edx  +
push esi  +
push ecx  +
sar eax 1 +
inc eax  +
push eax  +
push dword ptr [ebp+0Ch]  +
push ebx  +
push ebx  +
push dword ptr [ebp+8]  +
call CredUICmdLinePromptForCredentialsW  +
pop edi  +
pop esi  +
cmp eax ebx +
pop ebx  +
jz locret_100C6C3  +
push 20h  +
push eax  +
call loc_10078D8  +
pop ecx  +
pop ecx  +
leave   +
retn 0Ch  +
***
mov eax (offset loc_1010864+1) +
call __EH_prolog3_GS  +
mov eax [ebp+0Ch] +
mov ebx [ebp+8] +
mov esi ecx +
lea ecx [ebp-2Ch] +
mov [ebp-60h] ebx +
mov [ebp-64h] eax +
call sub_1004927  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-48h] +
call sub_1004927  +
mov ecx [esi+8] +
lea eax [ebp-49h] +
push eax  +
push 1  +
push offset aEse  +
mov edi offset aEventsourceena +
push edi  +
mov byte ptr [ebp-4] 1 +
call sub_10065DC  +
cmp byte ptr [ebp-49h] 0 +
jz loc_100C79B  +
movzx eax al +
mov [ebp-5Ch] eax +
lea eax [ebp-5Ch] +
push eax  +
push 0  +
push dword ptr [ebp+10h]  +
mov dword ptr [ebp-50h] 1 +
push 3  +
push ebx  +
call EcSetObjectArrayProperty  +
test eax eax +
jnz loc_100C79B  +
push edi  +
push 0Fh  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov ecx [esi+8] +
lea eax [ebp-49h] +
push eax  +
mov edi offset dword_10015F4 +
push edi  +
push offset aUn  +
mov ebx offset aUsername +
push ebx  +
call sub_100656C  +
push eax  +
lea ecx [ebp-2Ch] +
call sub_1005106  +
cmp byte ptr [ebp-49h] 0 +
jz loc_100C8E0  +
cmp dword ptr [ebp-14h] 8 +
mov ecx [ebp-28h] +
push 4  +
pop eax  +
mov [ebp-50h] eax +
jnb loc_100C7DD  +
lea ecx [ebp-28h] +
mov [ebp-5Ch] ecx +
lea ecx [ebp-5Ch] +
push ecx  +
push 0  +
push dword ptr [ebp+10h]  +
push eax  +
push dword ptr [ebp-60h]  +
call EcSetObjectArrayProperty  +
test eax eax +
jnz loc_100C808  +
push ebx  +
push 0Fh  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100792D  +
add esp 0Ch +
and dword ptr [ebp-5Ch] 0 +
cmp dword ptr [ebp-18h] 0 +
push 4  +
pop ebx  +
mov [ebp-50h] ebx +
jz loc_100C8B3  +
mov ecx [esi+8] +
lea eax [ebp-49h] +
push eax  +
push edi  +
push offset aUp  +
push offset aUserpassword  +
call sub_100656C  +
push eax  +
lea ecx [ebp-48h] +
call sub_1005106  +
cmp byte ptr [ebp-49h] 0 +
jz loc_100C892  +
cmp dword ptr [ebp-30h] 8 +
mov edi [ebp-44h] +
mov eax edi +
jnb loc_100C850  +
lea eax [ebp-44h] +
mov ecx offset asc_1001B8C +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100C879  +
test dx dx +
jz loc_100C875  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100C879  +
add eax ebx +
add ecx ebx +
test dx dx +
jnz loc_100C855  +
xor eax eax +
jmp loc_100C87E  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_100C892  +
cmp dword ptr [ebp-30h] 8 +
jb loc_100C88D  +
mov [ebp-5Ch] edi +
jmp loc_100C8B3  +
lea eax [ebp-44h] +
jmp loc_100C8B0  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_100C89E  +
lea eax [ebp-28h] +
lea ecx [esi+50h] +
push ecx  +
push eax  +
push dword ptr [ebp-64h]  +
mov ecx esi +
call near ptr byte_100C61C+1  +
mov eax [esi+54h] +
mov [ebp-5Ch] eax +
lea eax [ebp-5Ch] +
push eax  +
push 0  +
push dword ptr [ebp+10h]  +
push 5  +
push dword ptr [ebp-60h]  +
call EcSetObjectArrayProperty  +
test eax eax +
jnz loc_100C8E0  +
push offset aUserpassword  +
push 0Fh  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100792D  +
add esp 0Ch +
push 0  +
push 1  +
lea ecx [ebp-48h] +
call sub_10044B8  +
push 0  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_10044B8  +
call sub_100EAD1  +
retn 0Ch  +
***
call __EH_prolog3_GS  +
mov esi [ebp+8] +
mov edi ecx +
lea ecx [ebp-2Ch] +
mov [ebp-48h] edi +
call sub_1004927  +
mov ecx [edi+8] +
lea eax [ebp-2Dh] +
push eax  +
push offset dword_10015F4  +
push offset aEsa  +
xor ebx ebx +
mov edi offset aEventsourceadd +
push edi  +
mov [ebp-4] ebx +
mov [ebp-2Dh] bl +
call sub_100656C  +
push eax  +
lea ecx [ebp-2Ch] +
call sub_1005106  +
cmp [ebp-2Dh] bl +
jz loc_100CB6F  +
or dword ptr [ebp-3Ch] 0FFFFFFFFh +
mov [ebp-40h] ebx +
mov [ebp-34h] ebx +
mov [ebp-54h] ebx +
mov [ebp-50h] ebx +
mov [ebp-4Ch] ebx +
lea eax [ebp-44h] +
push eax  +
lea eax [ebp-58h] +
push eax  +
push ebx  +
push 1  +
push esi  +
mov byte ptr [ebp-4] 1 +
call sub_10084A4  +
cmp eax ebx +
jz loc_100C993  +
push offset aEventsources  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-44h] +
cmp [eax+0Ch] ebx +
jz loc_100C9A2  +
mov eax [eax] +
mov [ebp-34h] eax +
jmp loc_100C9B3  +
push offset aEventsources  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
add esp 0Ch +
lea eax [ebp-40h] +
push eax  +
push dword ptr [ebp-34h]  +
call EcGetObjectArraySize  +
test eax eax +
jnz loc_100C9D9  +
call ds:__imp_GetLastError  +
push offset aEventsourcecou  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
xor esi esi +
cmp [ebp-40h] ebx +
jbe loc_100CA2B  +
lea eax [ebp-44h] +
push eax  +
lea eax [ebp-58h] +
push eax  +
push ebx  +
push esi  +
push 2  +
push dword ptr [ebp-34h]  +
call sub_100856F  +
cmp eax ebx +
jz loc_100CA04  +
push edi  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_100CA10  +
lea eax [ebp-28h] +
push eax  +
mov eax [ebp-44h] +
push dword ptr [eax]  +
call sub_1003D35  +
cmp eax 2 +
jz loc_100CA28  +
inc esi  +
cmp esi [ebp-40h] +
jb loc_100C9E0  +
jmp loc_100CA2B  +
mov [ebp-3Ch] esi +
mov esi [ebp-48h] +
mov ecx [esi+8] +
lea eax [ebp-35h] +
push eax  +
push ebx  +
push offset aAes  +
push offset aAddeventsource  +
call sub_10065DC  +
test al al +
jz loc_100CAE3  +
cmp dword ptr [ebp-3Ch] 0FFFFFFFFh +
jz loc_100CA6F  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_100CA5F  +
lea eax [ebp-28h] +
push eax  +
push 27h  +
push 0B7h  +
call sub_100792D  +
add esp 0Ch +
mov esi [ebp-40h] +
push esi  +
push dword ptr [ebp-34h]  +
call EcInsertObjectArrayElement  +
test eax eax +
jnz loc_100CA95  +
push offset aEventsources  +
push 0Fh  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100792D  +
add esp 0Ch +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
mov dword ptr [ebp-5Ch] 4 +
jnb loc_100CAA8  +
lea eax [ebp-28h] +
mov [ebp-68h] eax +
lea eax [ebp-68h] +
push eax  +
push ebx  +
push esi  +
push 2  +
push dword ptr [ebp-34h]  +
call EcSetObjectArrayProperty  +
test eax eax +
jnz loc_100CAD1  +
push edi  +
push 0Fh  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100792D  +
add esp 0Ch +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_100CADD  +
lea eax [ebp-28h] +
mov ecx [ebp-48h] +
push esi  +
jmp loc_100CB5E  +
mov ecx [esi+8] +
lea eax [ebp-35h] +
push eax  +
push ebx  +
push offset aRes  +
push offset aRemoveeventsou  +
call sub_10065DC  +
test al al +
jz loc_100CB37  +
cmp dword ptr [ebp-3Ch] 0FFFFFFFFh +
jnz loc_100CB14  +
push edi  +
push 0Fh  +
push 490h  +
call sub_100792D  +
add esp 0Ch +
push dword ptr [ebp-3Ch]  +
push dword ptr [ebp-34h]  +
call EcRemoveObjectArrayElement  +
test eax eax +
jnz loc_100CB67  +
push edi  +
push 0Fh  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100792D  +
add esp 0Ch +
jmp loc_100CB67  +
cmp dword ptr [ebp-3Ch] 0FFFFFFFFh +
jnz loc_100CB4D  +
push edi  +
push 0Fh  +
push 490h  +
call sub_100792D  +
add esp 0Ch +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_100CB59  +
lea eax [ebp-28h] +
push dword ptr [ebp-3Ch]  +
mov ecx esi +
push eax  +
push dword ptr [ebp-34h]  +
call near ptr dword_100C6D4+42h  +
lea ecx [ebp-58h] +
call sub_1008960  +
push ebx  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_10044B8  +
call sub_100EAD1  +
retn 4  +
***
jge loc_100CC7E  +
push edi  +
push 0Fh  +
push esi  +
call sub_100792D  +
add esp 0Ch +
cmp esi 1 +
jz loc_100CCD4  +
cmp [ebp-18h] ebx +
jz loc_100CCD4  +
push dword ptr [ebp-18h]  +
call SysStringLen  +
cmp eax ebx +
jz loc_100CCD4  +
push offset aTrue  +
push dword ptr [ebp-18h]  +
call sub_1003D35  +
cmp eax 2 +
jz loc_100CCD4  +
push offset aFalse  +
push dword ptr [ebp-18h]  +
call sub_1003D35  +
cmp eax 2 +
jnz loc_100CCBE  +
mov [ebp-38h] ebx +
jmp loc_100CCDB  +
push offset aEventsource@en  +
push dword ptr [ebp-18h]  +
push 15h  +
push 57h  +
call sub_100792D  +
add esp 10h +
jmp loc_100CCDB  +
mov dword ptr [ebp-38h] 1 +
lea eax [ebp-38h] +
push eax  +
push ebx  +
push dword ptr [ebp+0Ch]  +
push 3  +
push dword ptr [ebp+8]  +
call EcSetObjectArrayProperty  +
test eax eax +
jnz loc_100CD03  +
push edi  +
push 0Fh  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov edi [ebp-1Ch] +
mov ecx [edi+8] +
push offset aCun  +
push offset aCommonuserna_0  +
call sub_1005F1A  +
test al al +
jnz loc_100CEBA  +
mov ecx [edi+8] +
lea eax [ebp-0Dh] +
push eax  +
push offset dword_10015F4  +
push offset aUn  +
mov esi offset aUsername +
push esi  +
mov [ebp-0Dh] bl +
call sub_100656C  +
push eax  +
lea ecx [ebp-14h] +
call near ptr dword_1007A7C+3  +
cmp [ebp-0Dh] bl +
jnz loc_100CDA5  +
lea eax [ebp-14h] +
push eax  +
push esi  +
push dword ptr [ebp-20h]  +
call near ptr dword_1007C2C+53h  +
mov edi eax +
cmp edi ebx +
jge loc_100CD6E  +
push esi  +
push 0Fh  +
push edi  +
call sub_100792D  +
add esp 0Ch +
cmp edi ebx +
jnz loc_100CEBA  +
cmp [ebp-14h] ebx +
jz loc_100CE38  +
push dword ptr [ebp-14h]  +
call SysStringLen  +
cmp eax ebx +
jbe loc_100CE38  +
mov ecx [ebp-1Ch] +
lea eax [ecx+50h] +
push eax  +
push dword ptr [ebp-14h]  +
push dword ptr [ebp-24h]  +
call near ptr byte_100C61C+1  +
jmp loc_100CE38  +
cmp [edi+60h] bl +
jnz loc_100CE38  +
cmp [ebp-14h] ebx +
jz loc_100CE38  +
push dword ptr [ebp-14h]  +
call SysStringLen  +
cmp eax ebx +
jbe loc_100CE38  +
mov ecx [edi+8] +
lea eax [ebp+13h] +
push eax  +
mov edi offset asc_1001B8C +
push edi  +
push offset aUp  +
push offset aUserpassword  +
call sub_100656C  +
mov esi eax +
cmp esi ebx +
jz loc_100CE1A  +
push edi  +
push esi  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100CE1A  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_100CDF9  +
mov ecx [ebp-1Ch] +
sub eax edx +
sar eax 1 +
lea eax [esi+eax*2+2] +
push eax  +
push esi  +
add ecx 50h +
call near ptr dword_100C44C+3  +
jmp loc_100CE2C  +
mov ecx [ebp-1Ch] +
lea eax [ecx+50h] +
push eax  +
push dword ptr [ebp-14h]  +
push dword ptr [ebp-24h]  +
call near ptr byte_100C61C+1  +
mov eax [ebp-1Ch] +
mov byte ptr [eax+60h] 1 +
mov esi offset aUsername +
mov eax [ebp-14h] +
push 4  +
pop edi  +
mov [ebp-38h] eax +
lea eax [ebp-38h] +
push eax  +
push ebx  +
push dword ptr [ebp+0Ch]  +
mov [ebp-2Ch] edi +
push edi  +
push dword ptr [ebp+8]  +
call EcSetObjectArrayProperty  +
test eax eax +
jnz loc_100CE6B  +
push esi  +
push 0Fh  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov [ebp-2Ch] edi +
cmp [ebp-14h] ebx +
jz loc_100CE8B  +
push dword ptr [ebp-14h]  +
call SysStringLen  +
cmp eax ebx +
jbe loc_100CE8B  +
mov eax [ebp-1Ch] +
mov eax [eax+54h] +
mov [ebp-38h] eax +
jmp loc_100CE8E  +
mov [ebp-38h] ebx +
lea eax [ebp-38h] +
push eax  +
push ebx  +
push dword ptr [ebp+0Ch]  +
push 5  +
push dword ptr [ebp+8]  +
call EcSetObjectArrayProperty  +
test eax eax +
jnz loc_100CEBA  +
push offset aUserpassword  +
push 0Fh  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-20h] +
mov byte ptr [ebp-4] 3 +
cmp eax ebx +
jz loc_100CECB  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov esi SysFreeString +
push ebx  +
call esi  +
push dword ptr [ebp-14h]  +
call esi  +
push dword ptr [ebp-18h]  +
call esi  +
push dword ptr [ebp-24h]  +
call esi  +
call __EH_epilog3  +
retn 0Ch  +
***
call esi  +
push offset aEventsourcecou  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-1Ch] +
mov [ebp+0Ch] edi +
cmp eax edi +
jbe loc_100CFDE  +
sub eax [ebp+0Ch] +
dec eax  +
push eax  +
push dword ptr [ebp-10h]  +
call EcRemoveObjectArrayElement  +
test eax eax +
jnz loc_100CFD3  +
push ebx  +
push 0Fh  +
call esi  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-1Ch] +
inc dword ptr [ebp+0Ch]  +
cmp [ebp+0Ch] eax +
jb loc_100CFB4  +
mov [ebp-14h] edi +
mov esi [ebp-18h] +
push offset aEventsource_0  +
call SysAllocString  +
mov [ebp+8] eax +
mov ecx [esi] +
lea edx [ebp-14h] +
push edx  +
push eax  +
push esi  +
mov byte ptr [ebp-4] 3 +
call dword ptr [ecx+90h]  +
push dword ptr [ebp+8]  +
mov esi SysFreeString +
mov [ebp+0Ch] eax +
mov byte ptr [ebp-4] 2 +
call esi  +
cmp [ebp+0Ch] edi +
jge loc_100D029  +
push ebx  +
push 0Fh  +
push dword ptr [ebp+0Ch]  +
call sub_100792D  +
add esp 0Ch +
mov [ebp+0Ch] edi +
mov [ebp+8] edi +
mov [ebp-2Ch] edi +
mov [ebp-30h] edi +
mov [ebp-34h] edi +
mov eax [ebp-14h] +
lea edx [ebp-20h] +
push edx  +
mov [ebp-20h] edi +
mov ecx [eax] +
push eax  +
mov byte ptr [ebp-4] 8 +
call dword ptr [ecx+20h]  +
cmp eax edi +
jge loc_100D05C  +
push ebx  +
push 0Fh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
xor ebx ebx +
cmp [ebp-20h] edi +
jle loc_100D078  +
push dword ptr [ebp-14h]  +
mov ecx [ebp-28h] +
push ebx  +
push dword ptr [ebp-10h]  +
call near ptr dword_100CB84+3  +
***
inc ebx  +
cmp ebx [ebp-20h] +
jl loc_100D063  +
push edi  +
call esi  +
push edi  +
call esi  +
push edi  +
call esi  +
push edi  +
call esi  +
mov eax [ebp-14h] +
mov byte ptr [ebp-4] 1 +
cmp eax edi +
jz loc_100D095  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-44h] +
call sub_1008960  +
mov eax [ebp-18h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax edi +
jz loc_100D0AE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
call __EH_epilog3  +
retn 8  +
***
inc ebp  +
retf   +
***
jmp fword ptr (byte_10127FF-1012831h)[eax]  +
***
test eax eax +
jbe loc_100D8A8  +
cmp dword ptr [edi+30h] 8 +
jb loc_100D7F6  +
mov eax [edi+1Ch] +
jmp loc_100D7F9  +
lea eax [edi+1Ch] +
lea ecx [ebp-64h] +
push ecx  +
push dword ptr [ebp-3Ch]  +
mov ecx edi +
push eax  +
call near ptr byte_100C61C+1  +
jmp loc_100D8A8  +
cmp [ebp-3Ch] esi +
jz loc_100D89F  +
push dword ptr [ebp-3Ch]  +
call SysStringLen  +
cmp eax esi +
jbe loc_100D89F  +
mov eax [ebp-30h] +
mov ecx [eax+8] +
lea eax [ebp-65h] +
push eax  +
mov edi offset asc_1001B8C +
push edi  +
push offset aCup  +
push offset aCommonuserpa_0  +
call sub_100656C  +
mov esi eax +
test esi esi +
jz loc_100D87F  +
push edi  +
push esi  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100D87F  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100D85B  +
push dword ptr [ebp-70h]  +
sub eax edx +
sar eax 1 +
lea eax [esi+eax*2+2] +
push eax  +
push esi  +
lea ecx [ebp-64h] +
call sub_100C212  +
mov edi [ebp-30h] +
jmp loc_100D8AC  +
mov ecx [ebp-30h] +
cmp dword ptr [ecx+30h] 8 +
jb loc_100D88D  +
mov eax [ecx+1Ch] +
jmp loc_100D890  +
lea eax [ecx+1Ch] +
lea edx [ebp-64h] +
push edx  +
push dword ptr [ebp-3Ch]  +
push eax  +
call near ptr byte_100C61C+1  +
jmp loc_100D87A  +
***
cmp byte ptr [ebp-35h] 0 +
jnz loc_100D8AC  +
xor esi esi +
inc esi  +
test esi esi +
jnz loc_100D929  +
mov eax [ebp-3Ch] +
push 4  +
pop esi  +
mov [ebp-54h] eax +
lea eax [ebp-54h] +
push eax  +
push 0  +
push 16h  +
push dword ptr [ebp-34h]  +
mov [ebp-48h] esi +
call EcSetSubscriptionProperty  +
test eax eax +
jnz loc_100D8DE  +
push ebx  +
push 0Fh  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov [ebp-48h] esi +
xor esi esi +
cmp [ebp-3Ch] esi +
jz loc_100D8FD  +
push dword ptr [ebp-3Ch]  +
call SysStringLen  +
cmp eax esi +
jbe loc_100D8FD  +
mov eax [ebp-60h] +
mov [ebp-54h] eax +
jmp loc_100D900  +
mov [ebp-54h] esi +
lea eax [ebp-54h] +
push eax  +
push esi  +
push 17h  +
push dword ptr [ebp-34h]  +
call EcSetSubscriptionProperty  +
test eax eax +
jnz loc_100D929  +
push offset aCommonpasswo_0  +
push 0Fh  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov ebx [ebp-44h] +
push 19h  +
mov esi offset aReadexisting_0 +
push esi  +
push ebx  +
push offset aRee  +
push esi  +
push dword ptr [ebp-34h]  +
mov ecx edi +
call near ptr dword_100BC80+2  +
test eax eax +
jz loc_100D955  +
push esi  +
push 0Fh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
lea eax [ebp-2Ch] +
push eax  +
mov esi offset aSubscriptionty +
push esi  +
push ebx  +
push offset aSt  +
push esi  +
mov ecx edi +
call near ptr dword_100BB00+2  +
test al al +
jz loc_100D9D7  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
mov dword ptr [ebp-48h] 2 +
jnb loc_100D984  +
lea eax [ebp-28h] +
push eax  +
push offset off_10132F4  +
call sub_100FEC3  +
mov [ebp-54h] eax +
cmp eax 0FFFFFFFFh +
jnz loc_100D9B1  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_100D9A3  +
lea eax [ebp-28h] +
push esi  +
push eax  +
push 15h  +
push 57h  +
call sub_100792D  +
add esp 10h +
lea eax [ebp-54h] +
push eax  +
push 0  +
push 1Bh  +
push dword ptr [ebp-34h]  +
call EcSetSubscriptionProperty  +
test eax eax +
jnz loc_100D9D7  +
push esi  +
push 0Fh  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100792D  +
add esp 0Ch +
push 1Ch  +
push offset aAllowedsourc_6  +
push ebx  +
push offset aIca  +
mov esi offset aAllowedissue_3 +
push esi  +
push dword ptr [ebp-34h]  +
mov ecx edi +
call near ptr byte_100C4D4  +
test eax eax +
jz loc_100DA04  +
push esi  +
push 0Fh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
push 1Dh  +
push offset aAllowedsourc_5  +
push ebx  +
push offset aAs  +
mov esi offset aAllowedsubje_3 +
push esi  +
push dword ptr [ebp-34h]  +
mov ecx edi +
call near ptr byte_100C4D4  +
test eax eax +
jz loc_100DA31  +
push esi  +
push 0Fh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
push 1Eh  +
push offset aAllowedsourc_4  +
push ebx  +
push offset aDs  +
mov esi offset aDeniedsubjects +
push esi  +
push dword ptr [ebp-34h]  +
mov ecx edi +
call near ptr byte_100C4D4  +
test eax eax +
jz loc_100DA5E  +
push esi  +
push 0Fh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
push 1Fh  +
mov esi offset aAllowedsourc_0 +
push esi  +
push ebx  +
push offset aAdc  +
push esi  +
push dword ptr [ebp-34h]  +
mov ecx edi +
call near ptr dword_100BEA0+9  +
test eax eax +
jz loc_100DA87  +
push esi  +
push 0Fh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
lea eax [ebp-88h] +
push eax  +
call near ptr dword_100B5F8+2  +
lea ecx [ebp-80h] +
call sub_1008960  +
lea ecx [ebp-64h] +
call sub_1008960  +
push dword ptr [ebp-3Ch]  +
mov esi SysFreeString +
call esi  +
push 0  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_10044B8  +
push 0  +
call esi  +
call sub_100EAD1  +
retn 8  +
***
push 1Ch  +
mov eax offset loc_1010A02 +
call __EH_prolog3  +
mov esi ecx +
xor ebx ebx +
push ebx  +
call CoInitialize  +
cmp eax ebx +
jge loc_100DAF0  +
push 6  +
push eax  +
call loc_10078D8  +
pop ecx  +
pop ecx  +
push CoUninitialize  +
lea eax [ebp-1Ch] +
push eax  +
call sub_100B740  +
mov [ebp-4] ebx +
mov [ebp-14h] ebx +
mov ecx [esi+8] +
push offset aC  +
push offset aConfig  +
mov byte ptr [ebp-4] 1 +
call sub_1005F1A  +
test al al +
jz loc_100DB9D  +
cmp dword ptr [esi+4Ch] 8 +
jb loc_100DB2A  +
mov eax [esi+38h] +
jmp loc_100DB2D  +
lea eax [esi+38h] +
lea ecx [ebp-14h] +
push ecx  +
push eax  +
mov ecx esi +
call near ptr dword_100C244+5  +
mov [ebp-10h] ebx +
lea eax [ebp-10h] +
push eax  +
push offset aSubscription_5  +
push dword ptr [ebp-14h]  +
mov byte ptr [ebp-4] 2 +
call near ptr dword_1007C2C+53h  +
mov edi eax +
cmp edi ebx +
jge loc_100DB63  +
push 7  +
push edi  +
call loc_10078D8  +
pop ecx  +
pop ecx  +
cmp edi ebx +
jnz loc_100DB77  +
cmp [ebp-10h] ebx +
jz loc_100DB77  +
push dword ptr [ebp-10h]  +
call SysStringLen  +
cmp eax ebx +
jnz loc_100DB85  +
push 7  +
push 80070057h  +
call loc_10078D8  +
pop ecx  +
pop ecx  +
push dword ptr [ebp-10h]  +
lea ecx [esi+18h] +
call sub_1005106  +
push dword ptr [ebp-10h]  +
mov byte ptr [ebp-4] 1 +
call SysFreeString  +
cmp dword ptr [esi+30h] 8 +
jb loc_100DBA8  +
mov eax [esi+1Ch] +
jmp loc_100DBAB  +
lea eax [esi+1Ch] +
push 2  +
push 3  +
push eax  +
call EcOpenSubscription  +
mov edi eax +
cmp edi ebx +
mov ebx ds:__imp_GetLastError +
jnz loc_100DBCD  +
push 8  +
call ebx  +
push eax  +
call loc_10078D8  +
pop ecx  +
pop ecx  +
push edi  +
push offset loc_100F150  +
lea eax [ebp-28h] +
push eax  +
call sub_10049E8  +
push dword ptr [ebp-14h]  +
mov ecx esi +
push edi  +
mov byte ptr [ebp-4] 3 +
call near ptr dword_100D0B8+3  +
push 0  +
push edi  +
call EcSaveSubscription  +
test eax eax +
jnz loc_100DC11  +
call ebx  +
mov ecx 3AE8h +
cmp eax ecx +
jnz loc_100DC07  +
push 0Ah  +
push ecx  +
jmp loc_100DC0A  +
push 9  +
push eax  +
call loc_10078D8  +
pop ecx  +
pop ecx  +
lea eax [ebp-28h] +
push eax  +
call sub_10071A4  +
mov eax [ebp-14h] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_100DC2B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp byte ptr [ebp-1Ch] 0 +
jnz loc_100DC38  +
call dword ptr [ebp-18h]  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+8] +
push 2  +
push 2  +
call sub_100610F  +
mov ecx [esi+8] +
push offset off_1013210  +
call sub_10061F8  +
mov ecx [esi+8] +
push 1  +
call sub_1006150  +
push eax  +
lea ecx [esi+34h] +
call sub_1005106  +
pop esi  +
retn   +
***
push 34h  +
mov eax offset loc_1010A4A +
call __EH_prolog3  +
mov esi ecx +
mov [ebp-1Ch] esi +
xor ebx ebx +
push ebx  +
call CoInitialize  +
cmp eax ebx +
jge loc_100DCB0  +
push 6  +
push eax  +
call loc_10078D8  +
pop ecx  +
pop ecx  +
push CoUninitialize  +
lea eax [ebp-24h] +
push eax  +
call sub_100B740  +
mov [ebp-4] ebx +
mov [ebp-18h] ebx +
cmp dword ptr [esi+4Ch] 8 +
mov byte ptr [ebp-4] 1 +
jb loc_100DCD4  +
mov eax [esi+38h] +
jmp loc_100DCD7  +
lea eax [esi+38h] +
lea ecx [ebp-18h] +
push ecx  +
push eax  +
mov ecx esi +
call near ptr dword_100C244+5  +
mov [ebp-14h] ebx +
lea eax [ebp-14h] +
push eax  +
push offset aSubscription_6  +
push dword ptr [ebp-18h]  +
mov byte ptr [ebp-4] 2 +
call near ptr dword_1007BD8+4Dh  +
mov edi eax +
cmp edi ebx +
jge loc_100DD0D  +
push 7  +
push edi  +
call loc_10078D8  +
pop ecx  +
pop ecx  +
cmp edi ebx +
jnz loc_100DD21  +
cmp [ebp-14h] ebx +
jz loc_100DD21  +
push dword ptr [ebp-14h]  +
call SysStringLen  +
cmp eax ebx +
jnz loc_100DD2F  +
push 7  +
push 80070057h  +
call loc_10078D8  +
pop ecx  +
pop ecx  +
push dword ptr [ebp-14h]  +
add esi 18h +
mov ecx esi +
call sub_1005106  +
cmp dword ptr [esi+18h] 8 +
jb loc_100DD47  +
mov eax [esi+4] +
jmp loc_100DD4A  +
lea eax [esi+4] +
push 1  +
push 3  +
push eax  +
call EcOpenSubscription  +
mov edi eax +
cmp edi ebx +
jnz loc_100DD97  +
call ds:__imp_GetLastError  +
cmp eax 50h +
jnz loc_100DD87  +
cmp dword ptr [esi+18h] 8 +
jb loc_100DD70  +
mov esi [esi+4] +
jmp loc_100DD73  +
add esi 4 +
push esi  +
push 26h  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100792D  +
add esp 0Ch +
jmp loc_100DD97  +
push 8  +
call ds:__imp_GetLastError  +
push eax  +
call loc_10078D8  +
pop ecx  +
pop ecx  +
push edi  +
push offset loc_100F150  +
lea eax [ebp-30h] +
push eax  +
call sub_10049E8  +
push dword ptr [ebp-18h]  +
mov ecx [ebp-1Ch] +
push edi  +
mov byte ptr [ebp-4] 3 +
call near ptr dword_100D0B8+3  +
mov [ebp-3Ch] ebx +
mov [ebp-38h] ebx +
mov [ebp-34h] ebx +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-40h] +
push eax  +
push ebx  +
push 1Bh  +
push edi  +
mov byte ptr [ebp-4] 4 +
call sub_10084A4  +
mov esi offset aSubscriptionty +
cmp eax ebx +
jz loc_100DDE9  +
push esi  +
push 0Eh  +
push eax  +
call sub_100792D  +
add esp 0Ch +
mov eax [ebp-10h] +
mov ecx [eax+0Ch] +
cmp ecx ebx +
jz loc_100DE08  +
cmp ecx 2 +
jz loc_100DE08  +
push esi  +
push 0Eh  +
push 0Dh  +
call sub_100792D  +
mov eax [ebp-10h] +
add esp 0Ch +
cmp [eax+0Ch] ebx +
jz loc_100DED1  +
cmp [eax] ebx +
jnz loc_100DED1  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-40h] +
push eax  +
push ebx  +
push 1Ch  +
push edi  +
call sub_10084A4  +
cmp eax ebx +
jnz loc_100DED1  +
mov eax [ebp-10h] +
cmp [eax+0Ch] ebx +
jnz loc_100DED1  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-40h] +
push eax  +
push ebx  +
push 1Dh  +
push edi  +
call sub_10084A4  +
cmp eax ebx +
jnz loc_100DED1  +
mov eax [ebp-10h] +
cmp [eax+0Ch] ebx +
jnz loc_100DED1  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-40h] +
push eax  +
push ebx  +
push 1Eh  +
push edi  +
call sub_10084A4  +
cmp eax ebx +
jnz loc_100DED1  +
mov eax [ebp-10h] +
cmp [eax+0Ch] ebx +
jnz loc_100DED1  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-40h] +
push eax  +
push ebx  +
push 1Fh  +
push edi  +
call sub_10084A4  +
cmp eax ebx +
jnz loc_100DED1  +
mov eax [ebp-10h] +
cmp [eax+0Ch] ebx +
jnz loc_100DED1  +
mov [eax+8] ebx +
mov eax [ebp-10h] +
mov dword ptr [eax] offset aONsgNsdAGaDcAG +
mov eax [ebp-10h] +
mov dword ptr [eax+0Ch] 4 +
push dword ptr [ebp-10h]  +
push ebx  +
push 1Fh  +
push edi  +
call EcSetSubscriptionProperty  +
test eax eax +
jnz loc_100DED1  +
push offset aAllowedsourc_0  +
push 0Fh  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100792D  +
add esp 0Ch +
push ebx  +
push edi  +
call EcSaveSubscription  +
test eax eax +
jnz loc_100DEFA  +
call ds:__imp_GetLastError  +
mov ecx 3AE8h +
cmp eax ecx +
jnz loc_100DEF0  +
push 0Ah  +
push ecx  +
jmp loc_100DEF3  +
push 9  +
push eax  +
call loc_10078D8  +
pop ecx  +
pop ecx  +
lea ecx [ebp-40h] +
call sub_1008960  +
lea eax [ebp-30h] +
push eax  +
call sub_10071A4  +
push dword ptr [ebp-14h]  +
call SysFreeString  +
mov eax [ebp-18h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_100DF24  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp [ebp-24h] bl +
jnz loc_100DF30  +
call dword ptr [ebp-20h]  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push edi  +
mov edi [ebp+arg_4] +
xor ebx ebx +
mov [ebp+var_4] ebx +
cmp edi 1 +
jnz loc_100DF61  +
mov ecx [ebp+arg_0] +
xor eax eax +
mov [ecx] ax +
mov [ebp+var_4] 8007007Ah +
jmp loc_100DFA5  +
push esi  +
mov esi [ebp+arg_0] +
jmp loc_100DF8D  +
push ds:_iob  +
call fgetwc  +
movzx eax ax +
pop ecx  +
mov ecx 0FFFFh +
cmp ax cx +
jz loc_100DF94  +
cmp ax 0Ah +
jz loc_100DF9F  +
mov [esi] ax +
inc esi  +
inc esi  +
dec edi  +
inc ebx  +
cmp edi 1 +
ja loc_100DF67  +
jmp loc_100DF9F  +
test ebx ebx +
jnz loc_100DF9F  +
mov [ebp+var_4] 80070026h +
xor eax eax +
mov [esi] ax +
pop esi  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_100DFAE  +
mov [eax] ebx +
mov eax [ebp+var_4] +
pop edi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_100DFE1  +
cmp ecx 7FFFFFFFh +
jbe loc_100DFE6  +
mov eax 80070057h +
test eax eax +
jl loc_100E023  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_100E013  +
cmp eax esi +
ja loc_100E013  +
jnz loc_100E01E  +
jmp loc_100E018  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+0Ch] eax +
jz loc_100E03F  +
cmp dword ptr [ebp+0Ch] 7FFFFFFFh +
jbe loc_100E044  +
mov eax 80070057h +
test eax eax +
jl loc_100E055  +
push 0  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_100DF3B  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov ecx [esi+8] +
push 1  +
push 1  +
call sub_100610F  +
mov ecx [esi+8] +
push offset off_1013224  +
call sub_10061F8  +
mov ecx [esi+8] +
lea eax [ebp-1] +
push eax  +
push 0  +
push offset aQ  +
push offset aQuiet  +
call sub_10065DC  +
mov [esi+18h] al +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
jmp loc_100E0BD  +
push [ebp+arg_0]  +
push [ebp+arg_8]  +
call sub_100B54A  +
add [ebp+arg_8] 2 +
add [ebp+arg_0] 2 +
mov eax [ebp+arg_0] +
cmp eax [ebp+arg_4] +
jnz loc_100E0AA  +
mov eax [ebp+arg_8] +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100E0A3  +
pop edi  +
leave   +
retn 10h  +
***
or ds:byte_1010A6A[eax] bh +
call __EH_prolog3_catch  +
mov esi ecx +
cmp dword ptr [ebp+8] 7FFFFFFFh +
jbe loc_100E11B  +
call loc_100B801  +
mov ecx [esi+4] +
xor edi edi +
cmp ecx edi +
jnz loc_100E128  +
xor eax eax +
jmp loc_100E12F  +
mov eax [esi+0Ch] +
sub eax ecx +
sar eax 1 +
cmp eax [ebp+8] +
jnb loc_100E17F  +
push edi  +
push dword ptr [ebp+8]  +
call loc_10040E6  +
mov ecx [esi+4] +
mov ebx eax +
mov eax [esi+8] +
push esi  +
push ebx  +
push eax  +
push ecx  +
mov [ebp-14h] ebx +
mov [ebp-4] edi +
call sub_100E0D1  +
mov eax [esi+4] +
cmp eax edi +
jz loc_100E162  +
mov edi [esi+8] +
sub edi eax +
sar edi 1 +
test eax eax +
jz loc_100E16D  +
push eax  +
call sub_100E4D4  +
pop ecx  +
mov eax [ebp+8] +
lea eax [ebx+eax*2] +
mov [esi+0Ch] eax +
lea eax [ebx+edi*2] +
mov [esi+8] eax +
mov [esi+4] ebx +
call __EH_epilog3  +
retn 4  +
***
push 50h  +
mov eax offset loc_1010AB2 +
call __EH_prolog3  +
mov esi ecx +
xor ebx ebx +
mov [ebp-18h] ebx +
mov [ebp-14h] ebx +
mov [ebp-10h] ebx +
mov [ebp-4] ebx +
mov [ebp-58h] ebx +
mov [ebp-54h] ebx +
mov [ebp-50h] ebx +
mov [ebp-48h] ebx +
mov [ebp-44h] ebx +
mov [ebp-40h] ebx +
push 36h  +
lea eax [ebp-1Ch] +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_100FB79  +
push 37h  +
lea eax [ebp-5Ch] +
push eax  +
call sub_100FB79  +
push 38h  +
lea eax [ebp-4Ch] +
push eax  +
call sub_100FB79  +
mov [ebp-28h] ebx +
mov [ebp-24h] ebx +
mov [ebp-20h] ebx +
mov byte ptr [ebp-4] 3 +
cmp [ebp-18h] ebx +
jnz loc_100E208  +
xor eax eax +
jmp loc_100E210  +
mov eax [ebp-10h] +
sub eax [ebp-18h] +
sar eax 1 +
add eax 20h +
push eax  +
lea ecx [ebp-2Ch] +
call near ptr dword_100E0FC+3  +
cmp [ebp-28h] ebx +
jnz loc_100E225  +
xor eax eax +
jmp loc_100E22D  +
mov eax [ebp-20h] +
sub eax [ebp-28h] +
sar eax 1 +
mov ecx [ebp-48h] +
movzx ecx word ptr [ecx] +
push ecx  +
mov ecx [ebp-58h] +
movzx ecx word ptr [ecx] +
push ecx  +
push dword ptr [ebp-18h]  +
push eax  +
push dword ptr [ebp-28h]  +
call sub_100DFCB  +
add esp 14h +
mov [ebp-38h] ebx +
mov [ebp-34h] ebx +
mov [ebp-30h] ebx +
push ebx  +
push 40h  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 4 +
call sub_10076B6  +
mov edi ds:wprintf +
cmp [esi+18h] bl +
jnz loc_100E2C2  +
mov esi [ebp-38h] +
push dword ptr [ebp-28h]  +
push offset aS_0  +
call edi  +
pop ecx  +
pop ecx  +
cmp esi ebx +
jnz loc_100E284  +
xor eax eax +
jmp loc_100E28B  +
mov eax [ebp-34h] +
sub eax esi +
sar eax 1 +
push eax  +
push esi  +
call near ptr dword_100E028+2  +
cmp eax ebx +
jge loc_100E2A0  +
push 32h  +
push eax  +
call loc_10078D8  +
pop ecx  +
pop ecx  +
push dword ptr [ebp-58h]  +
push esi  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100E2C2  +
push dword ptr [ebp-48h]  +
push esi  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100E270  +
jmp loc_100E2F2  +
call EcQuickConfig  +
test eax eax +
jnz loc_100E2DB  +
push 32h  +
call ds:__imp_GetLastError  +
push eax  +
call loc_10078D8  +
pop ecx  +
pop ecx  +
push 39h  +
lea eax [ebp-1Ch] +
push eax  +
call sub_100FB79  +
push dword ptr [ebp-18h]  +
push offset aS_0  +
call edi  +
pop ecx  +
pop ecx  +
lea ecx [ebp-3Ch] +
call sub_1008960  +
lea ecx [ebp-2Ch] +
call sub_1008960  +
lea ecx [ebp-4Ch] +
call sub_1008960  +
lea ecx [ebp-5Ch] +
call sub_1008960  +
lea ecx [ebp-1Ch] +
call sub_1008960  +
call __EH_epilog3  +
retn   +
***
push ebp  +
mov ebp esp +
sub esp 2Ch +
mov eax [ebp+8] +
and dword ptr [ebp-4] 0 +
push ebx  +
mov ebx [eax+4] +
push esi  +
mov esi [eax+8] +
push edi  +
mov edi [ebp+0Ch] +
sub edi [eax+0Ch] +
mov eax [eax+10h] +
mov ecx offset __ImageBase +
sub edi ecx +
sar edi 2 +
add esi ecx +
mov edx [esi] +
lea eax __ImageBase[eax+edi*4] +
add ebx ecx +
mov ecx [eax] +
mov [ebp+8] edx +
lea eax (__ImageBase+2)[ecx] +
test ecx ecx +
jns loc_100E36F  +
movzx eax cx +
mov [ebp-8] eax +
test edx edx +
jnz loc_100E3EE  +
push edx  +
push edx  +
push ebx  +
call LoadLibraryExA  +
mov edi eax +
mov [ebp+8] edi +
test edi edi +
jz loc_100E3CC  +
push 0  +
push edi  +
push esi  +
call InterlockedCompareExchange  +
mov esi eax +
test esi esi +
jnz loc_100E3C1  +
push 8  +
pop ecx  +
lea edi [ebp-28h] +
stos   +
mov eax [ebp+8] +
mov [ebp-14h] eax +
mov eax ds:dword_1003804 +
mov dword ptr [ebp-2Ch] 24h +
mov [ebp-20h] ebx +
test eax eax +
jz loc_100E3EE  +
lea ecx [ebp-2Ch] +
push ecx  +
push 5  +
call eax  +
jmp loc_100E3EE  +
push edi  +
call FreeLibrary  +
mov [ebp+8] esi +
jmp loc_100E3EE  +
call GetLastError  +
cmp eax 7Eh +
jz loc_100E3DD  +
cmp eax 0C1h +
jnz loc_100E430  +
push 0  +
push 0FFFFFFFFh  +
push esi  +
call InterlockedCompareExchange  +
test eax eax +
jz loc_100E3F4  +
mov [ebp+8] eax +
cmp dword ptr [ebp+8] 0FFFFFFFFh +
jnz loc_100E3FD  +
mov dword ptr [ebp-4] 1 +
jmp loc_100E430  +
cmp dword ptr [ebp+8] 0 +
jz loc_100E430  +
push dword ptr [ebp-8]  +
push dword ptr [ebp+8]  +
call GetProcAddress  +
mov esi eax +
test esi esi +
jnz loc_100E425  +
call GetLastError  +
cmp eax 7Fh +
jz loc_100E425  +
cmp eax 0B6h +
jnz loc_100E42C  +
mov dword ptr [ebp-4] 1 +
test esi esi +
jnz loc_100E43B  +
push dword ptr [ebp-8]  +
push ebx  +
call DelayLoadFailureHook  +
mov esi eax +
cmp dword ptr [ebp-4] 0 +
jz loc_100E446  +
mov eax [ebp+0Ch] +
mov [eax] esi +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
call ??0exception@@QAE@XZ  +
cmp dword ptr [esi+4] 0 +
mov dword ptr [esi] offset off_1001238 +
jnz loc_100E4CB  +
cmp dword ptr [esi+8] 0 +
jnz loc_100E4CB  +
mov eax off_1013230 +
mov [esi+4] eax +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:free  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
mov esi ds:malloc +
jmp loc_100E503  +
push dword ptr [ebp+8]  +
call _callnewh  +
pop ecx  +
test eax eax +
jz loc_100E510  +
push dword ptr [ebp+8]  +
call esi  +
pop ecx  +
test eax eax +
jz loc_100E4F6  +
pop esi  +
leave   +
retn   +
***
test byte ptr dword_10133BC 1 +
mov esi offset dword_10133B0 +
jnz loc_100E537  +
or dword_10133BC 1 +
mov ecx esi +
call sub_100E4A7  +
push offset loc_1010AD2  +
call sub_100EBF5  +
pop ecx  +
push esi  +
lea ecx [ebp-0Ch] +
call sub_1003ED5  +
push offset dword_1010AE8  +
lea eax [ebp-0Ch] +
push eax  +
call _CxxThrowException  +
push 44h  +
mov eax offset loc_1010687 +
call __EH_prolog3  +
push offset aStringTooLong  +
lea ecx [ebp-28h] +
call sub_10051FF  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_10050A8  +
push offset dword_1010D44  +
lea eax [ebp-50h] +
push eax  +
call _CxxThrowException  +
push 44h  +
mov eax offset loc_1010687 +
call __EH_prolog3  +
push offset aInvalidStringP  +
lea ecx [ebp-28h] +
call sub_10051FF  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_100502F  +
push offset dword_1010D80  +
lea eax [ebp-50h] +
push eax  +
mov dword ptr [ebp-50h] offset off_10013C4 +
call _CxxThrowException  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_100E5F1  +
test eax eax +
jnz loc_100E5F6  +
mov ecx [esi] +
test ecx ecx +
jz loc_100E5EE  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_100E5E2  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_10133E4 +
push offset dword_10133D4  +
push dword_10133E0  +
mov dword_10133D4 eax +
push offset dword_10133C4  +
push offset dword_10133C8  +
push offset dword_10133C0  +
call ds:__wgetmainargs  +
add esp 14h +
mov dword_10133D0 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+ms_exc.disabled] ebx +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp+var_1C] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:__imp_InterlockedCompareExchange  +
cmp eax ebx +
jz loc_100E67E  +
cmp eax esi +
jnz loc_100E671  +
xor esi esi +
inc esi  +
mov [ebp+var_1C] esi +
jmp loc_100E681  +
push 3E8h  +
call ds:Sleep  +
jmp loc_100E658  +
xor esi esi +
inc esi  +
mov eax dword_101371C +
cmp eax esi +
jnz loc_100E694  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_100E6CF  +
mov eax dword_101371C +
test eax eax +
jnz loc_100E6C9  +
mov dword_101371C esi +
push offset dword_10011EC  +
push offset dword_10011E0  +
call sub_100E5D5  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100E6CF  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
jmp loc_100E799  +
mov dword_10133DC esi +
mov eax dword_101371C +
cmp eax esi +
jnz loc_100E6F3  +
push offset dword_10011DC  +
push offset dword_10011D4  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_101371C 2 +
cmp [ebp+var_1C] ebx +
jnz loc_100E700  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_101372C ebx +
jz loc_100E721  +
push offset dword_101372C  +
call sub_100ED19  +
pop ecx  +
test eax eax +
jz loc_100E721  +
push ebx  +
push 2  +
push ebx  +
call dword_101372C  +
push dword_10133C4  +
push dword_10133C8  +
push dword_10133C0  +
call sub_1005D2A  +
add esp 0Ch +
mov dword_10133D8 eax +
cmp dword_10133CC ebx +
jnz loc_100E77F  +
push eax  +
call ds:exit  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-20h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-20h] +
mov dword_10133D8 eax +
xor ebx ebx +
cmp dword_10133CC ebx +
jnz loc_100E77F  +
push eax  +
call ds:_exit  +
cmp dword_10133DC ebx +
jnz loc_100E78D  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_10133D8 +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp word ptr ds:__ImageBase ax +
jz loc_100E7B6  +
xor eax eax +
jmp loc_100E803  +
mov eax ds:dword_100003C +
lea eax __ImageBase[eax] +
cmp dword ptr [eax] 4550h +
jnz loc_100E7B2  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_100E7F0  +
cmp ecx 20Bh +
jnz loc_100E7B2  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_100E7B2  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_100E7FE  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_100E7B2  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 1  +
mov dword_10133CC eax +
call sub_100EEB2  +
push eax  +
call ds:__set_app_type  +
or dword_1013724 0FFFFFFFFh +
or dword_1013728 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_10133EC +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_10133E8 +
mov [eax] ecx +
call sub_100EE44  +
cmp dword_1013248 0 +
jnz loc_100E85C  +
push offset sub_100EE44  +
call ds:__setusermatherr  +
pop ecx  +
call sub_100EE2C  +
xor eax eax +
retn   +
***
call sub_100EEF1  +
jmp sub_100E636  +
***
jmp ds:?what@exception@@UBEPBDXZ  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2D0h +
mov eax dword_1013238 +
xor eax ebp +
mov [ebp+var_4] eax +
mov [ebp+var_220] eax +
mov [ebp+var_224] ecx +
mov [ebp+var_228] edx +
mov [ebp+var_22C] ebx +
mov [ebp+var_230] esi +
mov [ebp+var_234] edi +
mov [ebp+var_208] ss +
mov [ebp+var_214] cs +
mov [ebp+var_238] ds +
mov [ebp+var_23C] es +
mov [ebp+var_240] fs +
mov [ebp+var_244] gs +
pushf   +
pop [ebp+var_210]  +
mov eax [ebp+4] +
mov [ebp+var_218] eax +
lea eax [ebp+4] +
mov [ebp+var_2D0] 10001h +
mov [ebp+var_20C] eax +
mov eax [eax-4] +
push offset OutputString  +
mov [ebp+var_21C] eax +
call ds:OutputDebugStringA  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_100E9B7  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_100E8BF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ds:??1type_info@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_100E9A0  +
push esi  +
call sub_100E4D4  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
jmp ds:__CxxFrameHandler3  +
***
cmp ecx dword_1013238 +
jnz loc_100E9C2  +
retn 0  +
jmp loc_100EF87  +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_1013238 +
xor eax ebp +
push eax  +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_1013238 +
xor eax ebp +
push eax  +
mov [ebp-10h] esp +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_1013238 +
xor eax ebp +
push eax  +
mov [ebp-10h] eax +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_1013238 +
xor eax ebp +
push eax  +
mov [ebp-14h] eax +
mov [ebp-10h] esp +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
mov ecx [ebp-0Ch] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov ecx [ebp-10h] +
xor ecx ebp +
call sub_100E9B7  +
jmp __EH_epilog3  +
***
mov ecx [ebp-14h] +
xor ecx ebp +
call sub_100E9B7  +
jmp __EH_epilog3  +
***
jmp ds:_purecall  +
***
cmp cl 40h +
jnb loc_100EB4A  +
cmp cl 20h +
jnb loc_100EB40  +
shrd eax edx +
shr edx cl +
retn   +
mov eax edx +
xor edx edx +
and cl 1Fh +
shr eax cl +
retn   +
xor eax eax +
xor edx edx +
retn   +
***
jmp ds:memcpy  +
***
call __SEH_prolog4  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call sub_100EB6B  +
neg eax  +
sbb eax eax +
neg eax  +
pop ecx  +
dec eax  +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_100EC5A  +
cmp dword ptr [eax+10h] 3 +
jnz loc_100EC5A  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_100EC54  +
cmp eax 19930521h +
jz loc_100EC54  +
cmp eax 19930522h +
jz loc_100EC54  +
cmp eax 1994000h +
jnz loc_100EC5A  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset byte_100EC1C+1)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_100ECA6  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_100ECA2  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_100ED0D  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_100ED05  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_100ED0F  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_100ECF5  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi offset __ImageBase +
push esi  +
call sub_100EC90  +
pop ecx  +
test eax eax +
jz loc_100ED76  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_100ECD0  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100ED76  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_100ED7F  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_100E9B7  +
push offset dword_1013238  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100EEA5  +
cmp ecx 0FFFFFFFFh +
jz loc_100EEA5  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_100EE9E  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_100EE9E  +
cmp edx 10000000h +
jnb loc_100EE9E  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_100EE9E  +
jmp loc_100EE99  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_100EEE7  +
push eax  +
call sub_100EE4C  +
test eax eax +
jz loc_100EEE7  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_100EEDC  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_100EEE7  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1013238 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_100EF23  +
test eax ebx +
jz loc_100EF23  +
not eax  +
mov dword_101323C eax +
jmp loc_100EF7E  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_100EF6A  +
test dword_1013238 ebx +
jnz loc_100EF6F  +
mov esi 0BB40E64Fh +
mov dword_1013238 esi +
not esi  +
mov dword_101323C esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_10134F0 eax +
mov dword_10134EC ecx +
mov dword_10134E8 edx +
mov dword_10134E4 ebx +
mov dword_10134E0 esi +
mov dword_10134DC edi +
mov word_1013508 ss +
mov word_10134FC cs +
mov word_10134D8 ds +
mov word_10134D4 es +
mov word_10134D0 fs +
mov word_10134CC gs +
pushf   +
pop dword_1013500  +
mov eax [ebp+0] +
mov dword_10134F4 eax +
mov eax [ebp+4] +
mov dword_10134F8 eax +
lea eax [ebp+8] +
mov dword_1013504 eax +
mov eax [ebp-320h] +
mov dword_1013440 10001h +
mov eax dword_10134F8 +
mov dword_10133FC eax +
mov dword_10133F0 0C0000409h +
mov dword_10133F4 1 +
mov eax dword_1013238 +
mov [ebp-328h] eax +
mov eax dword_101323C +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
cmp eax 5AFFFFF2h +
pop ecx  +
jmp eax  +
***
jmp ds:EcClose  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
or dword ptr [eax+0Ch] 0FFFFFFFFh +
or dword ptr [eax+10h] 0FFFFFFFFh +
mov [eax+8] ecx +
mov ecx [ebp+arg_8] +
mov [eax+18h] ecx +
mov ecx [ebp+arg_4] +
mov byte ptr [eax+4] 0 +
mov dword ptr [eax] offset off_1003A40 +
mov [eax+1Ch] ecx +
pop ebp  +
retn 0Ch  +
***
mov eax [ecx+8] +
retn   +
***
mov eax [ecx+0Ch] +
retn   +
***
mov eax [ecx+10h] +
retn   +
***
mov eax [ecx+18h] +
retn   +
***
mov eax [ecx+1Ch] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
test [ebp+arg_8] 100h +
jz loc_100F25B  +
cmp [ebp+arg_0] eax +
jnz loc_100F25F  +
cmp ecx eax +
jnz loc_100F264  +
jmp loc_100F25F  +
cmp ecx eax +
jz loc_100F264  +
cmp ecx [ebp+arg_4] +
jbe loc_100F269  +
mov eax 80070057h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
shr esi 1 +
jz loc_100F29C  +
test [ebp+arg_8] 1000h +
jz loc_100F29C  +
mov edx [ebp+arg_4] +
lea eax [edi+ecx*2] +
mov [edx] eax +
mov edx esi +
sub edx ecx +
xor ecx ecx +
mov [ebx] edx +
mov [eax] cx +
test [ebp+arg_8] 400h +
jz loc_100F2E4  +
mov eax [ebp+arg_8] +
push [ebp+arg_0]  +
and eax 0FFh +
push eax  +
push edi  +
mov [ebp+var_4] eax +
call memset  +
add esp 0Ch +
cmp [ebp+var_4] 0 +
jnz loc_100F2CC  +
mov eax [ebp+arg_4] +
mov [eax] edi +
mov [ebx] esi +
jmp loc_100F2E4  +
test esi esi +
jbe loc_100F2FD  +
mov ecx [ebp+arg_4] +
lea eax [edi+esi*2-2] +
mov [ecx] eax +
xor ecx ecx +
mov dword ptr [ebx] 1 +
mov [eax] cx +
test esi esi +
jbe loc_100F2FD  +
test [ebp+arg_8] 800h +
jz loc_100F2FD  +
mov eax [ebp+arg_4] +
mov [eax] edi +
xor eax eax +
mov [ebx] esi +
mov [edi] ax +
xor eax eax +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 20h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
jbe loc_100F354  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_8] +
mov cl [ecx] +
dec [ebp+arg_4]  +
mov [eax] cl +
inc eax  +
cmp [ebp+arg_4] 0 +
ja loc_100F343  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov ecx [ebp+arg_4] +
push edi  +
push [ebp+arg_10]  +
mov edi [ebp+arg_0] +
push 7FFFFFFFh  +
push edi  +
call sub_100F240  +
xor edx edx +
cmp eax edx +
mov [ebp+arg_0] eax +
jl loc_100F4B5  +
test [ebp+arg_10] 100h +
push esi  +
mov esi ecx +
mov [ebp+var_4] edi +
mov [ebp+var_C] esi +
jz loc_100F3A3  +
cmp [ebp+arg_14] edx +
jnz loc_100F3A3  +
mov [ebp+arg_14] offset dword_10015F4 +
test [ebp+arg_10] 0FFFFE000h +
push ebx  +
mov [ebp+arg_0] edx +
jz loc_100F3C9  +
mov [ebp+arg_0] 80070057h +
cmp ecx edx +
jz loc_100F46A  +
xor eax eax +
mov [edi] ax +
jmp loc_100F46A  +
cmp ecx edx +
jnz loc_100F3EC  +
mov eax [ebp+arg_14] +
cmp [eax] dx +
jz loc_100F49E  +
mov eax edi +
neg eax  +
sbb eax eax +
and eax 23h +
add eax 80070057h +
mov [ebp+arg_0] eax +
jmp loc_100F46A  +
push [ebp+arg_18]  +
lea ebx [ecx-1] +
push [ebp+arg_14]  +
mov [ebp+var_8] edx +
push ebx  +
push edi  +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_100F411  +
cmp eax ebx +
ja loc_100F411  +
jz loc_100F418  +
mov ebx eax +
jmp loc_100F41E  +
mov [ebp+var_8] 8007007Ah +
xor eax eax +
mov [edi+ebx*2] ax +
mov eax [ebp+var_8] +
mov [ebp+arg_0] eax +
sub esi ebx +
cmp [ebp+var_8] 0 +
lea eax [edi+ebx*2] +
mov [ebp+var_4] eax +
mov [ebp+var_C] esi +
jl loc_100F467  +
mov eax [ebp+arg_10] +
test eax 200h +
jz loc_100F49E  +
cmp esi 1 +
jbe loc_100F49E  +
lea ecx [esi+esi] +
cmp ecx 2 +
jbe loc_100F49E  +
add ecx 0FFFFFFFEh +
and eax 0FFh +
push ecx  +
push eax  +
mov eax [ebp+var_4] +
add eax 2 +
push eax  +
call memset  +
add esp 0Ch +
jmp loc_100F49E  +
mov ecx [ebp+arg_4] +
test [ebp+arg_10] 1C00h +
jz loc_100F48F  +
test ecx ecx +
jz loc_100F48F  +
push [ebp+arg_10]  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ecx+ecx] +
push eax  +
lea ebx [ebp+var_C] +
xor ecx ecx +
call sub_100F272  +
mov esi [ebp+var_C] +
cmp [ebp+arg_0] 0 +
jge loc_100F49E  +
cmp [ebp+arg_0] 8007007Ah +
jnz loc_100F4B3  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_100F4AA  +
mov ecx [ebp+var_4] +
mov [eax] ecx +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_100F4B3  +
mov [eax] esi +
pop ebx  +
pop esi  +
mov eax [ebp+arg_0] +
pop edi  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100F335  +
add esp 10h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
jmp loc_100F500  +
mov cl [eax] +
mov edx [ebp+arg_C] +
mov [edx] cl +
inc [ebp+arg_C]  +
inc eax  +
cmp eax [ebp+arg_8] +
jnz loc_100F4F5  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_C] +
mov [eax] ecx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100F4C2  +
add esp 0Ch +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_0] +
push ecx  +
push [ebp+arg_8]  +
push esi  +
push edi  +
call sub_100F514  +
lea eax [edi+esi] +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ecx+8] +
mov edx [ecx+4] +
push eax  +
push edx  +
lea eax [ebp+var_4] +
push eax  +
call sub_1007377  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+4] +
test eax eax +
jz loc_100F591  +
mov ecx [edi+8] +
sub ecx eax +
sar ecx 1 +
jnz loc_100F595  +
xor esi esi +
jmp loc_100F59C  +
mov esi [ebp+arg_4] +
sub esi eax +
sar esi 1 +
push [ebp+arg_8]  +
mov ecx edi +
push 1  +
push [ebp+arg_4]  +
call sub_100750C  +
mov eax [edi+4] +
lea ecx [eax+esi*2] +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+8] +
mov dword ptr [eax] offset off_1003A28 +
mov cl [ecx+4] +
mov [eax+4] cl +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+8] +
mov dword ptr [eax] offset off_1003A28 +
mov dl [ecx+4] +
mov [eax+4] dl +
mov dword ptr [eax] offset off_1003A40 +
mov edx [ecx+8] +
mov [eax+8] edx +
mov edx [ecx+0Ch] +
mov [eax+0Ch] edx +
mov edx [ecx+10h] +
mov [eax+10h] edx +
mov dl [ecx+14h] +
mov [eax+14h] dl +
mov edx [ecx+18h] +
mov [eax+18h] edx +
mov ecx [ecx+1Ch] +
mov [eax+1Ch] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov edx [esi+4] +
test edx edx +
jnz loc_100F63C  +
xor ecx ecx +
jmp loc_100F643  +
mov ecx [esi+8] +
sub ecx edx +
sar ecx 1 +
test edx edx +
jz loc_100F667  +
mov eax [esi+0Ch] +
sub eax edx +
sar eax 1 +
cmp ecx eax +
jnb loc_100F667  +
push [ebp+arg_0]  +
mov eax [esi+8] +
push 1  +
push eax  +
mov ecx esi +
call sub_10073B2  +
mov [esi+8] eax +
jmp loc_100F679  +
push [ebp+arg_0]  +
mov eax [esi+8] +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
mov ecx esi +
call sub_100F577  +
pop esi  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+8] +
xor ebx ebx +
cmp edi ebx +
jz loc_100F804  +
cmp [edi] bx +
jz loc_100F804  +
mov esi [ebp+0Ch] +
push ebx  +
push 104h  +
mov ecx esi +
call sub_10076B6  +
mov ecx [esi+4] +
cmp ecx ebx +
jnz loc_100F6BF  +
xor eax eax +
jmp loc_100F6C6  +
mov eax [esi+8] +
sub eax ecx +
sar eax 1 +
push ebx  +
push ecx  +
push eax  +
push edi  +
mov edi ds:GetFullPathNameW +
call edi  +
cmp eax ebx +
jnz loc_100F730  +
call ds:__imp_GetLastError  +
mov esi eax +
cmp esi ebx +
jnz loc_100F6E7  +
mov esi 507h +
mov eax off_1013004 +
cmp eax offset off_1013004 +
jz loc_100F712  +
test byte ptr [eax+1Ch] 1 +
jz loc_100F712  +
cmp byte ptr [eax+19h] 2 +
jb loc_100F712  +
push esi  +
push offset dword_1003A18  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100F309  +
push 18h  +
push offset aDW7rtmAdminWmi  +
push esi  +
lea ecx [ebp-20h] +
call sub_100F1DF  +
push offset dword_1011A8C  +
lea eax [ebp-20h] +
push eax  +
call _CxxThrowException  +
mov edx [esi+4] +
cmp edx ebx +
jnz loc_100F73B  +
xor ecx ecx +
jmp loc_100F742  +
mov ecx [esi+8] +
sub ecx edx +
sar ecx 1 +
cmp eax ecx +
jbe loc_100F81B  +
push ebx  +
push eax  +
mov ecx esi +
call sub_10076B6  +
mov ecx [esi+4] +
cmp ecx ebx +
jnz loc_100F75E  +
xor eax eax +
jmp loc_100F765  +
mov eax [esi+8] +
sub eax ecx +
sar eax 1 +
push ebx  +
push ecx  +
push eax  +
push dword ptr [ebp+8]  +
call edi  +
cmp eax ebx +
jnz loc_100F7B4  +
call ds:__imp_GetLastError  +
mov esi eax +
cmp esi ebx +
jnz loc_100F782  +
mov esi 507h +
mov eax off_1013004 +
cmp eax offset off_1013004 +
jz loc_100F7AD  +
test byte ptr [eax+1Ch] 1 +
jz loc_100F7AD  +
cmp byte ptr [eax+19h] 2 +
jb loc_100F7AD  +
push esi  +
push offset dword_1003A18  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100F309  +
push 1Dh  +
jmp loc_100F714  +
***
mov ecx [esi+4] +
cmp ecx ebx +
jnz loc_100F7BF  +
xor esi esi +
jmp loc_100F7C6  +
mov esi [esi+8] +
sub esi ecx +
sar esi 1 +
cmp eax esi +
jbe loc_100F81B  +
mov eax off_1013004 +
cmp eax offset off_1013004 +
jz loc_100F7F6  +
test byte ptr [eax+1Ch] 1 +
jz loc_100F7F6  +
cmp byte ptr [eax+19h] 2 +
jb loc_100F7F6  +
push 7Ah  +
push offset dword_1003A18  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100F309  +
push 20h  +
push offset aDW7rtmAdminWmi  +
push 7Ah  +
jmp loc_100F71A  +
***
mov ecx [ebp+0Ch] +
call sub_100F559  +
mov ecx [ebp+0Ch] +
lea eax [ebp+8] +
push eax  +
mov [ebp+8] ebx +
call sub_100F629  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
lea edx [eax+2] +
xor ebx ebx +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_100F837  +
mov esi [ebp+arg_0] +
sub eax edx +
sar eax 1 +
push ebx  +
add eax 14h +
mov ecx esi +
jmp loc_100F8A4  +
mov ecx [esi+4] +
cmp ecx ebx +
jz loc_100F87B  +
mov eax [esi+8] +
sub eax ecx +
sar eax 1 +
cmp eax 7FFFFFFFh +
jnb loc_100F8DD  +
cmp ecx ebx +
jz loc_100F87B  +
mov eax [esi+8] +
sub eax ecx +
sar eax 1 +
cmp eax 7FFFFFFFh +
jnb loc_100F8DD  +
cmp ecx ebx +
jnz loc_100F87F  +
xor edi edi +
jmp loc_100F886  +
mov edi [esi+8] +
sub edi ecx +
sar edi 1 +
push ebx  +
push ebx  +
mov ecx esi +
call sub_10076B6  +
push ebx  +
mov ecx esi +
cmp edi 3FFFFFFFh +
jb loc_100F8A1  +
push 7FFFFFFFh  +
jmp loc_100F8A5  +
lea eax [edi+edi] +
push eax  +
call sub_10076B6  +
mov ecx [esi+4] +
cmp ecx ebx +
jnz loc_100F8B5  +
xor eax eax +
jmp loc_100F8BC  +
mov eax [esi+8] +
sub eax ecx +
sar eax 1 +
push [ebp+arg_8]  +
lea edx [ebp+arg_0] +
push [ebp+arg_4]  +
push ebx  +
push ebx  +
push edx  +
push eax  +
push ecx  +
call sub_100F35B  +
mov edi eax +
cmp edi 8007007Ah +
jz loc_100F850  +
cmp edi ebx +
push ebx  +
mov ecx esi +
jl loc_100F8F5  +
mov eax [ebp+arg_0] +
sub eax [esi+4] +
sar eax 1 +
inc eax  +
push eax  +
call sub_10076B6  +
jmp loc_100F904  +
push 1  +
call sub_10076B6  +
mov eax [esi+4] +
xor ecx ecx +
mov [eax] cx +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ds:WideCharToMultiByte +
xor ebx ebx +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push ebx  +
push [ebp+CodePage]  +
call esi  +
cmp eax ebx +
jnz loc_100F95A  +
mov esi [ebp+arg_8] +
push ebx  +
push 1  +
mov ecx esi +
call sub_1008440  +
mov eax [esi+4] +
mov [eax] bl +
call ds:__imp_GetLastError  +
cmp eax ebx +
jle loc_100F9B8  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100F9B8  +
push edi  +
mov edi [ebp+arg_8] +
push ebx  +
push eax  +
mov ecx edi +
call sub_1008440  +
mov ecx [edi+4] +
cmp ecx ebx +
jnz loc_100F972  +
xor eax eax +
jmp loc_100F977  +
mov eax [edi+8] +
sub eax ecx +
push ebx  +
push ebx  +
push eax  +
push ecx  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push ebx  +
push [ebp+CodePage]  +
call esi  +
push ebx  +
mov ecx edi +
cmp eax ebx +
jnz loc_100F9AF  +
push 1  +
call sub_1008440  +
mov eax [edi+4] +
mov [eax] bl +
call ds:__imp_GetLastError  +
cmp eax ebx +
jle loc_100F9B7  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100F9B7  +
push eax  +
call sub_1008440  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
mov [ebp+dwFlags] 800h +
cmp [ebp+arg_C] ebx +
jnz loc_100F9E3  +
mov [ebp+dwFlags] 0A00h +
mov esi [ebp+Arguments] +
mov ecx [esi+4] +
cmp ecx ebx +
jz loc_100F9F9  +
mov eax [esi+8] +
sub eax ecx +
sar eax 1 +
cmp eax 40h +
jnb loc_100FA03  +
push ebx  +
push 40h  +
mov ecx esi +
call sub_10076B6  +
mov eax [ebp+arg_C] +
cmp eax ebx +
jz loc_100FA0F  +
mov eax [eax] +
mov [ebp+Arguments] eax +
mov ecx [esi+4] +
cmp ecx ebx +
jnz loc_100FA1A  +
xor eax eax +
jmp loc_100FA21  +
mov eax [esi+8] +
sub eax ecx +
sar eax 1 +
lea edx [ebp+Arguments] +
push edx  +
push eax  +
push ecx  +
push ebx  +
push [ebp+dwMessageId]  +
push [ebp+lpSource]  +
push [ebp+dwFlags]  +
call ds:FormatMessageW  +
test eax eax +
jnz loc_100FB24  +
call ds:__imp_GetLastError  +
mov edi eax +
cmp edi ebx +
jz loc_100FA50  +
cmp edi 7Ah +
jnz loc_100FA9E  +
mov ecx [esi+4] +
cmp ecx ebx +
jz loc_100FA8A  +
mov eax [esi+8] +
sub eax ecx +
sar eax 1 +
cmp eax 10000h +
jnb loc_100FAEA  +
cmp ecx ebx +
jz loc_100FA8A  +
mov eax [esi+8] +
sub eax ecx +
sar eax 1 +
cmp eax 8000h +
jb loc_100FA86  +
push ebx  +
push 10000h  +
jmp loc_100F9FC  +
cmp ecx ebx +
jnz loc_100FA8E  +
xor eax eax +
jmp loc_100FA95  +
mov eax [esi+8] +
sub eax ecx +
sar eax 1 +
push ebx  +
add eax eax +
push eax  +
jmp loc_100F9FC  +
mov eax off_1013004 +
cmp eax offset off_1013004 +
jz loc_100FAC9  +
test byte ptr [eax+1Ch] 1 +
jz loc_100FAC9  +
cmp byte ptr [eax+19h] 2 +
jb loc_100FAC9  +
push edi  +
push offset dword_1003A18  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100F309  +
push 0ECh  +
push offset aDW7rtmAdminWmi  +
push edi  +
lea ecx [ebp+var_24] +
call sub_100F1DF  +
push offset dword_1011A8C  +
lea eax [ebp+var_24] +
push eax  +
call _CxxThrowException  +
mov eax off_1013004 +
cmp eax offset off_1013004 +
jz loc_100FB16  +
test byte ptr [eax+1Ch] 1 +
jz loc_100FB16  +
cmp byte ptr [eax+19h] 2 +
jb loc_100FB16  +
push 0Dh  +
push offset dword_1003A18  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100F309  +
push 0EEh  +
push offset aDW7rtmAdminWmi  +
push 0Dh  +
jmp loc_100FAD4  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
lea eax [ebp+arg_8] +
mov [ebp+var_4] eax +
lea eax [ebp+var_4] +
push eax  +
push [ebp+dwMessageId]  +
push [ebp+Arguments]  +
push 0  +
call ds:GetModuleHandleW  +
push eax  +
call sub_100F9C3  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+dwMessageId]  +
push [ebp+Arguments]  +
push [ebp+lpSource]  +
call sub_100F9C3  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+dwMessageId]  +
push [ebp+Arguments]  +
push 0  +
call ds:GetModuleHandleW  +
push eax  +
call sub_100FB5B  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
movs   +
movzx eax [ebp+var_4] +
push eax  +
mov eax [ebp+var_8] +
mov esi [ebp+arg_8] +
shr eax 10h +
push eax  +
movzx eax word ptr [ebp+var_8] +
mov ebx [ebp+arg_4] +
push eax  +
mov eax [ebp+var_C] +
shr eax 10h +
push eax  +
mov eax [ebp+var_10] +
shr eax 10h +
push eax  +
movzx eax word ptr [ebp+var_10] +
push eax  +
push offset a4_4hd2_2hd2_2h  +
push esi  +
push ebx  +
call swprintf_s  +
add esp 24h +
cmp eax 0FFFFFFFFh +
jnz loc_100FC39  +
mov eax off_1013004 +
cmp eax offset off_1013004 +
jz loc_100FC1A  +
test byte ptr [eax+1Ch] 1 +
jz loc_100FC1A  +
cmp byte ptr [eax+19h] 2 +
jb loc_100FC1A  +
push 0Dh  +
push offset dword_1003AA0  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100F309  +
push 25h  +
push offset aDW7rtmAdminW_0  +
push 0Dh  +
lea ecx [ebp+var_20] +
call sub_100F1DF  +
push offset dword_1011A8C  +
lea eax [ebp+var_20] +
push eax  +
call _CxxThrowException  +
sub esi eax +
lea edi [ebx+eax*2] +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_100FC76  +
mov ecx [eax] +
mov eax [eax+4] +
push 0  +
push 989680h  +
push eax  +
push ecx  +
call __aullrem  +
push 0  +
push 64h  +
push edx  +
push eax  +
call __allmul  +
push edx  +
push eax  +
push offset a_09i64uz  +
push esi  +
push edi  +
call swprintf_s  +
add esp 14h +
jmp loc_100FC8A  +
movzx eax [ebp+var_2] +
push eax  +
push offset a_03huz  +
push esi  +
push edi  +
call swprintf_s  +
add esp 10h +
cmp eax 0FFFFFFFFh +
jnz loc_100FCC2  +
mov eax off_1013004 +
cmp eax offset off_1013004 +
jz loc_100FCBB  +
test byte ptr [eax+1Ch] 1 +
jz loc_100FCBB  +
cmp byte ptr [eax+19h] 2 +
jb loc_100FCBB  +
push 0Dh  +
push offset dword_1003AA0  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100F309  +
push 38h  +
jmp loc_100FC1C  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
lea eax [ebp+SystemTime] +
push eax  +
push [ebp+lpFileTime]  +
call ds:FileTimeToSystemTime  +
push [ebp+lpFileTime]  +
lea eax [ebp+SystemTime] +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push eax  +
call sub_100FB9B  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea edi [ebp+UniversalTime] +
movs   +
movs   +
lea eax [ebp+LocalTime] +
push eax  +
movs   +
lea eax [ebp+UniversalTime] +
push eax  +
push 0  +
movs   +
call ds:SystemTimeToTzSpecificLocalTime  +
test eax eax +
jnz loc_100FD82  +
call ds:__imp_GetLastError  +
mov esi eax +
test esi esi +
jnz loc_100FD39  +
mov esi 507h +
mov eax off_1013004 +
cmp eax offset off_1013004 +
jz loc_100FD64  +
test byte ptr [eax+1Ch] 1 +
jz loc_100FD64  +
cmp byte ptr [eax+19h] 2 +
jb loc_100FD64  +
push esi  +
push offset dword_1003AA0  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100F309  +
push 46h  +
push offset aDW7rtmAdminW_0  +
push esi  +
lea ecx [ebp+var_40] +
call sub_100F1DF  +
push offset dword_1011A8C  +
lea eax [ebp+var_40] +
push eax  +
call _CxxThrowException  +
movzx eax [ebp+LocalTime.wMilliseconds] +
push eax  +
movzx eax [ebp+LocalTime.wSecond] +
push eax  +
movzx eax [ebp+LocalTime.wMinute] +
push eax  +
movzx eax [ebp+LocalTime.wHour] +
push eax  +
movzx eax [ebp+LocalTime.wDay] +
push eax  +
movzx eax [ebp+LocalTime.wMonth] +
push eax  +
movzx eax [ebp+LocalTime.wYear] +
push eax  +
push offset a4_4hd2_2hd2__0  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_100DFCB  +
add esp 28h +
pop edi  +
pop esi  +
test eax eax +
jge loc_100FDF8  +
mov eax off_1013004 +
cmp eax offset off_1013004 +
jz loc_100FDEA  +
test byte ptr [eax+1Ch] 1 +
jz loc_100FDEA  +
cmp byte ptr [eax+19h] 2 +
jb loc_100FDEA  +
push 0Dh  +
push offset dword_1003AA0  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100F309  +
push 58h  +
push offset aDW7rtmAdminW_0  +
push 0Dh  +
jmp loc_100FD6C  +
mov eax [ebp+arg_4] +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 54h +
mov eax dword_1013238 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+lpFileTime] +
push esi  +
mov esi [ebp+arg_4] +
lea ecx [ebp+SystemTime] +
push ecx  +
push eax  +
call ds:FileTimeToSystemTime  +
push 20h  +
lea eax [ebp+var_44] +
push eax  +
lea eax [ebp+SystemTime] +
push eax  +
call sub_100FD00  +
lea eax [ebp+var_44] +
push eax  +
mov ecx esi +
call sub_1005106  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_100E9B7  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
mov eax dword_1013238 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+lpFileTime] +
push esi  +
mov esi [ebp+arg_4] +
push 20h  +
lea ecx [ebp+var_44] +
push ecx  +
push eax  +
call sub_100FCD0  +
lea eax [ebp+var_44] +
push eax  +
mov ecx esi +
call sub_1005106  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_100E9B7  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
jmp loc_100FEAF  +
mov ecx [eax+4] +
cmp ecx [ebp+arg_4] +
jz loc_100FEBA  +
add eax 8 +
cmp dword ptr [eax] 0 +
jnz loc_100FEA4  +
xor eax eax +
pop ebp  +
retn 8  +
mov eax [eax] +
jmp loc_100FEB6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
jmp loc_100FEE1  +
push [ebp+arg_4]  +
push eax  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100FEEF  +
add esi 8 +
mov eax [esi] +
test eax eax +
jnz loc_100FECE  +
or eax 0FFFFFFFFh +
pop esi  +
pop ebp  +
retn 8  +
mov eax [esi+4] +
jmp loc_100FEEA  +
***
mov eax [esp+arg_4] +
mov ecx [esp+arg_C] +
or ecx eax +
mov ecx [esp+arg_8] +
jnz loc_100FF29  +
mov eax [esp+arg_0] +
mul  ecx +
retn 10h  +
push ebx  +
mul  ecx +
mov ebx eax +
mov eax [esp+4+arg_0] +
mul  [esp+4+arg_C] +
add ebx eax +
mov eax [esp+4+arg_0] +
mul  ecx +
add edx ebx +
pop ebx  +
retn 10h  +
***
or eax eax +
jnz loc_100FF71  +
mov ecx [esp+arg_8] +
mov eax [esp+arg_4] +
xor edx edx +
div  ecx +
mov eax [esp+arg_0] +
div  ecx +
mov eax edx +
xor edx edx +
jmp loc_100FFC1  +
mov ecx eax +
mov ebx [esp+arg_8] +
mov edx [esp+arg_4] +
mov eax [esp+arg_0] +
shr ecx 1 +
rcr ebx 1 +
shr edx 1 +
rcr eax 1 +
or ecx ecx +
jnz loc_100FF7F  +
div  ebx +
mov ecx eax +
mul  [esp+arg_C] +
xchg eax ecx +
mul  [esp+arg_8] +
add edx ecx +
jb loc_100FFAA  +
cmp edx [esp+arg_4] +
ja loc_100FFAA  +
jb loc_100FFB2  +
cmp eax [esp+arg_0] +
jbe loc_100FFB2  +
sub eax [esp+arg_8] +
sbb edx [esp+arg_C] +
sub eax [esp+arg_0] +
sbb edx [esp+arg_4] +
neg edx  +
neg eax  +
sbb edx 0 +
pop ebx  +
retn 10h  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_1010B7C +
jmp loc_100E9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_1010C08 +
jmp loc_100E9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_1010C5C +
jmp loc_100E9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_1010CBC +
jmp loc_100E9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_1010CE8 +
jmp loc_100E9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-58h] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_1010DC4 +
jmp loc_100E9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_1010E00 +
jmp loc_100E9AC  +
***
lea ecx [ebp+8] +
jmp loc_10044A0  +
***
push dword ptr [ebp-10h]  +
call sub_100E4D4  +
pop ecx  +
retn   +
***
push dword ptr [ebp-10h]  +
call sub_100E4D4  +
pop ecx  +
retn   +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_1010E3C +
jmp loc_100E9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_1010E70 +
jmp loc_100E9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_1010EAC +
jmp loc_100E9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-128h] +
xor ecx eax +
call sub_100E9B7  +
mov ecx [edx-8] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_1010EF4 +
jmp loc_100E9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_1010F50 +
jmp loc_100E9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_1010F7C +
jmp loc_100E9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_1010FA8 +
jmp loc_100E9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_1011000 +
jmp loc_100E9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_1011058 +
jmp loc_100E9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-40h] +
xor ecx eax +
call sub_100E9B7  +
mov ecx [edx-8] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_101109C +
jmp loc_100E9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_1011144 +
jmp loc_100E9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-70h] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_1011178 +
jmp loc_100E9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-7Ch] +
xor ecx eax +
call sub_100E9B7  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_10111BC +
jmp loc_100E9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_10111E8 +
jmp loc_100E9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-54h] +
xor ecx eax +
call sub_100E9B7  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_1011224 +
jmp loc_100E9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_1011274 +
jmp loc_100E9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_10112A0 +
jmp loc_100E9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_10112CC +
jmp loc_100E9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_10112F8 +
jmp loc_100E9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_1011324 +
jmp loc_100E9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_1011350 +
jmp loc_100E9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_1011384 +
jmp loc_100E9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-3Ch] +
xor ecx eax +
call sub_100E9B7  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_10113C8 +
jmp loc_100E9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-34h] +
xor ecx eax +
call sub_100E9B7  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_10113F4 +
jmp loc_100E9AC  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
nop   +
xor ecx eax +
call sub_100E9B7  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_1011438 +
jmp loc_100E9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-68h] +
xor ecx eax +
call sub_100E9B7  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_1011474 +
jmp loc_100E9AC  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
pushf   +
xor ecx eax +
call sub_100E9B7  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_1011498 +
jmp loc_100E9AC  +
***
cmp edi 0FFFFFFFFh +
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-30h] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_10114F4 +
jmp loc_100E9AC  +
***
cmp edi 0FFFFFFFFh +
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-38h] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_1011528 +
jmp loc_100E9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-54h] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_1011554 +
jmp loc_100E9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_1011580 +
jmp loc_100E9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-50h] +
xor ecx eax +
call sub_100E9B7  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_10115AC +
jmp loc_100E9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-4Ch] +
xor ecx eax +
call sub_100E9B7  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_10115D8 +
jmp loc_100E9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_1011630 +
jmp loc_100E9AC  +
***
cmp bh 0FFh +
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10h] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_101165C +
jmp loc_100E9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_10116A0 +
jmp loc_100E9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_10116D4 +
jmp loc_100E9AC  +
***
cmp edi 24548BFFh +
or [ebp+4A8B0C42h] cl +
xchg eax esp +
xor ecx eax +
call sub_100E9B7  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_1011710 +
jmp loc_100E9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_101173C +
jmp loc_100E9AC  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
cwde   +
xor ecx eax +
call sub_100E9B7  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_1011770 +
jmp loc_100E9AC  +
***
cmp bh 0FFh +
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-6Ch] +
xor ecx eax +
call sub_100E9B7  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_10117A4 +
jmp loc_100E9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-3Ch] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_10117C8 +
jmp loc_100E9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-48h] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_1011814 +
jmp loc_100E9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-8Ch] +
xor ecx eax +
call sub_100E9B7  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_1011880 +
jmp loc_100E9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_10118FC +
jmp loc_100E9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-44h] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_1011920 +
jmp loc_100E9AC  +
***
push esp  +
and al 8 +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_10119A0 +
jmp loc_100E9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-60h] +
xor ecx eax +
call sub_100E9B7  +
mov eax offset dword_10119C4 +
jmp loc_100E9AC  +
***
mov dword_10133B0 offset off_1001238 +
mov ecx offset dword_10133B0 +
jmp ??1exception@@UAE@XZ  +
***
arpl [ebp+73h] sp +
jnb $+2  +
iret   +
***
