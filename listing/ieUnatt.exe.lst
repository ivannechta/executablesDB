mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+Arguments] +
push eax  +
push dword ptr [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100F060  +
pop ebp  +
retn   +
***
mov edi edi +
push esi  +
mov esi eax +
xor eax eax +
mov ecx edx +
test edx edx +
jz loc_100B75B  +
cmp [esi] ax +
jz loc_100B757  +
inc esi  +
inc esi  +
dec edx  +
jnz loc_100B74D  +
test edx edx +
jnz loc_100B760  +
mov eax 80070057h +
pop esi  +
test edi edi +
jz locret_100B771  +
test eax eax +
jl loc_100B76E  +
sub ecx edx +
mov [edi] ecx +
retn   +
and dword ptr [edi] 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
test ecx ecx +
jz loc_100B787  +
cmp ecx [ebp+arg_0] +
jbe loc_100B78C  +
mov eax 80070057h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
push [ebp+arg_4]  +
mov ecx edx +
mov edi eax +
call sub_100B777  +
test eax eax +
jl loc_100B7B5  +
mov eax [ebp+arg_0] +
call sub_100B740  +
jmp loc_100B7B8  +
and dword ptr [edi] 0 +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov esi offset word_101FD90 +
push esi  +
xor edi edi +
push edi  +
push edi  +
push 8026h  +
push edi  +
call ds:SHGetFolderPathW  +
mov ebx eax +
cmp ebx edi +
jl loc_100B82C  +
push offset pMore  +
push esi  +
call ds:PathAppendW  +
push edi  +
push edi  +
call ds:GetLastError  +
push eax  +
call sub_100E909  +
push eax  +
push offset a_getinsfile  +
push offset aDW7rtmInetcore  +
push 5Dh  +
push edi  +
push offset aD  +
push edi  +
push esi  +
push offset aIeUnattendInst  +
push 4000000h  +
call sub_100B725  +
add esp 0Ch +
push eax  +
call sub_100F2DD  +
jmp loc_100B86F  +
push edi  +
push edi  +
call ds:GetLastError  +
push eax  +
call sub_100E909  +
push eax  +
push offset a_getinsfile  +
push offset aDW7rtmInetcore  +
push 61h  +
push edi  +
push offset aD  +
push edi  +
push ebx  +
push offset aIeUnattendUnab  +
push 2000000h  +
call sub_100B725  +
add esp 0Ch +
push eax  +
call sub_100F2DD  +
xor eax eax +
mov word_101FD90 ax +
pop edi  +
pop esi  +
pop ebx  +
retn 4  +
***
mov edi edi +
push ebx  +
push edi  +
xor ebx ebx +
push ebx  +
call sub_100B7C2  +
xor edi edi +
cmp off_101C000 ebx +
jz loc_100B8B4  +
xor eax eax +
mov eax off_101C004[eax] +
test eax eax +
jz loc_100B8A5  +
push edi  +
call eax  +
test eax eax +
jge loc_100B8A5  +
mov ebx eax +
inc edi  +
mov eax edi +
shl eax 5 +
cmp off_101C000[eax] 0 +
jnz loc_100B892  +
pop edi  +
mov eax ebx +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_101C8C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+lpSrc] +
push 104h  +
lea ecx [ebp+Dst] +
push ecx  +
push eax  +
call ds:off_10066C4  +
lea eax [ebp+Dst] +
push eax  +
push 0  +
call ds:SHELL32_165  +
cmp eax 50h +
jz loc_100B904  +
cmp eax 0B7h +
jnz loc_100B906  +
xor eax eax +
test eax eax +
jnz loc_100B922  +
call sub_10103A1  +
lea eax [ebp+Dst] +
push eax  +
push 300F000h  +
push 0  +
call sub_100FAD6  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_100E138  +
leave   +
retn 4  +
***
call sub_100FA3D  +
jmp loc_10103AB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov eax [ebp+hInstance] +
push ebx  +
push esi  +
xor esi esi +
push offset aWindirPantherU  +
mov hInstance eax +
mov [ebp+var_4] esi +
call sub_100B8BE  +
lea eax [ebp+pNumArgs] +
push eax  +
call ds:GetCommandLineW  +
push eax  +
call ds:CommandLineToArgvW  +
mov ebx eax +
mov [ebp+var_8] ebx +
cmp ebx esi +
jz loc_100BB1E  +
cmp [ebp+pNumArgs] 2 +
jl loc_100BB1E  +
push edi  +
mov edi ds:GetLastError +
push esi  +
push esi  +
call edi  +
push eax  +
call sub_100E909  +
push eax  +
push offset aWinmain  +
push offset aDW7rtmInetcore  +
push 0C3h  +
push esi  +
push offset aD  +
push esi  +
push dword ptr [ebx+4]  +
mov ebx 4000000h +
push offset aIeUnattendRunn  +
push ebx  +
call sub_100B725  +
add esp 0Ch +
push eax  +
call sub_100F2DD  +
push esi  +
push esi  +
call edi  +
push eax  +
call sub_100E909  +
push eax  +
push offset aWinmain  +
push offset aDW7rtmInetcore  +
push 0C4h  +
push esi  +
push offset aD  +
push esi  +
push offset aIeUnattendNotA  +
push ebx  +
call sub_100B725  +
pop ecx  +
pop ecx  +
push eax  +
call sub_100F2DD  +
push esi  +
push esi  +
call edi  +
push eax  +
call sub_100E909  +
push eax  +
push offset aWinmain  +
push offset aDW7rtmInetcore  +
push 0C5h  +
push esi  +
push offset aD  +
push esi  +
push offset aIeUnattendIfTh  +
push ebx  +
call sub_100B725  +
pop ecx  +
pop ecx  +
push eax  +
call sub_100F2DD  +
push esi  +
push esi  +
call edi  +
push eax  +
call sub_100E909  +
push eax  +
push offset aWinmain  +
push offset aDW7rtmInetcore  +
push 0C6h  +
push esi  +
push offset aD  +
push esi  +
push offset aIeUnattendIfAc  +
push ebx  +
call sub_100B725  +
pop ecx  +
pop ecx  +
push eax  +
call sub_100F2DD  +
push esi  +
push esi  +
call edi  +
push eax  +
call sub_100E909  +
push eax  +
push offset aWinmain  +
push offset aDW7rtmInetcore  +
push 0C7h  +
push esi  +
push offset aD  +
push esi  +
push offset aIeUnattendAllS  +
push ebx  +
call sub_100B725  +
pop ecx  +
pop ecx  +
push eax  +
call sub_100F2DD  +
mov [ebp+hInstance] esi +
mov eax [ebp+hInstance] +
push ds:off_1005280[eax*8]  +
mov eax [ebp+var_8] +
push dword ptr [eax+4]  +
call ds:StrCmpICW  +
test eax eax +
jz loc_100BAC9  +
inc [ebp+hInstance]  +
cmp [ebp+hInstance] 1 +
jb loc_100BAA4  +
jmp loc_100BAD6  +
mov eax [ebp+hInstance] +
call ds:off_1005284[eax*8]  +
mov [ebp+var_4] eax +
push esi  +
push esi  +
call edi  +
push eax  +
call sub_100E909  +
push eax  +
push offset aWinmain  +
push offset aDW7rtmInetcore  +
push 0D7h  +
push esi  +
push offset aD  +
push esi  +
push [ebp+var_4]  +
mov esi [ebp+var_8] +
push dword ptr [esi+4]  +
push offset aIeUnattendExit  +
push ebx  +
call sub_100B725  +
add esp 10h +
push eax  +
call sub_100F2DD  +
push esi  +
call ds:LocalFree  +
pop edi  +
jmp loc_100BB5E  +
push esi  +
push esi  +
call ds:GetLastError  +
push eax  +
call sub_100E909  +
push eax  +
push offset aWinmain  +
push offset aDW7rtmInetcore  +
push 0BDh  +
push esi  +
push offset aD  +
push esi  +
push dword ptr [ebp+Arguments]  +
push offset aIeUnattendErro  +
push 2000000h  +
call sub_100B725  +
add esp 0Ch +
push eax  +
call sub_100F2DD  +
call sub_100B935  +
pop esi  +
xor eax eax +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
shl eax 5 +
add eax offset off_101C000 +
push dword ptr [eax+18h]  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
push dword ptr [eax+0Ch]  +
call sub_100D7ED  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi ds:GetLastError +
push edi  +
xor edi edi +
push edi  +
push edi  +
call esi  +
push eax  +
call sub_100E909  +
push eax  +
push offset aSetregistrydwo  +
mov ebx offset aDW7rtmInetcore +
push ebx  +
push 1C2h  +
push edi  +
mov edi offset aD +
push edi  +
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push dword ptr [ebp+Arguments]  +
push offset aIeUnattendSett  +
push 4000000h  +
call sub_100B725  +
add esp 14h +
push eax  +
call sub_100F2DD  +
push 4  +
push 4  +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
push dword ptr [ebp+Arguments]  +
call sub_100D5E7  +
mov [ebp+var_4] eax +
test eax eax +
jge loc_100BC4B  +
push 0  +
push 0  +
call esi  +
push eax  +
call sub_100E909  +
push eax  +
push offset aSetregistrydwo  +
push ebx  +
push 1C6h  +
push 0  +
push edi  +
push 0  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push dword ptr [ebp+Arguments]  +
push offset aIeUnattendSe_0  +
push 2000000h  +
call sub_100B725  +
add esp 18h +
push eax  +
call sub_100F2DD  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi [ebp+Arguments] +
push offset aAllowhttps  +
push esi  +
call sub_100BB9A  +
test eax eax +
jl loc_100BCB9  +
push [ebp+arg_8]  +
push offset aBlockcontrols  +
push esi  +
call sub_100BB9A  +
test eax eax +
jl loc_100BCB9  +
push [ebp+arg_C]  +
push offset aBlockuserinit  +
push esi  +
call sub_100BB9A  +
test eax eax +
jl loc_100BCB9  +
push [ebp+arg_10]  +
push offset aUsehooks  +
push esi  +
call sub_100BB9A  +
test eax eax +
jl loc_100BCB9  +
push [ebp+arg_14]  +
push offset aUsetimermethod  +
push esi  +
call sub_100BB9A  +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 7DCh +
mov eax dword_101C8C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
mov ebx ds:GetLastError +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
push edi  +
shl esi 5 +
push edi  +
mov [ebp+var_7DC] eax +
mov [ebp+var_7D8] edi +
add esi offset off_101C000 +
call ebx  +
push eax  +
call sub_100E909  +
push eax  +
push offset aDecodepopuplev  +
push offset aDW7rtmInetcore  +
push 1F1h  +
push edi  +
push offset aD  +
push edi  +
push edi  +
push dword ptr [esi+10h]  +
push dword ptr [esi+0Ch]  +
push offset aIeUnattendRegk  +
push 4000000h  +
call sub_100B725  +
add esp 14h +
push eax  +
call sub_100F2DD  +
push 3E8h  +
lea eax [ebp+Arguments] +
push eax  +
push dword ptr [esi+10h]  +
push dword ptr [esi+0Ch]  +
call sub_100D41B  +
test eax eax +
jl loc_100BE45  +
push edi  +
push edi  +
call ebx  +
push eax  +
call sub_100E909  +
push eax  +
push offset aDecodepopuplev  +
push offset aDW7rtmInetcore  +
push 1F6h  +
push edi  +
push offset aD  +
push edi  +
lea eax [ebp+Arguments] +
push eax  +
push offset aIeUnattendDeco  +
push 4000000h  +
call sub_100B725  +
add esp 0Ch +
push eax  +
call sub_100F2DD  +
mov esi ds:StrCmpICW +
push offset aHigh  +
lea eax [ebp+Arguments] +
push eax  +
call esi  +
test eax eax +
jnz loc_100BDBE  +
push edi  +
push edi  +
push 1  +
push 1  +
push edi  +
jmp loc_100BDF1  +
push offset aMedium  +
lea eax [ebp+Arguments] +
push eax  +
call esi  +
test eax eax +
jnz loc_100BDD7  +
push edi  +
push 1  +
push edi  +
push edi  +
jmp loc_100BDBB  +
push offset aLow  +
lea eax [ebp+Arguments] +
push eax  +
call esi  +
test eax eax +
jnz loc_100BE45  +
push 1  +
push 1  +
push edi  +
push edi  +
push 1  +
push [ebp+var_7DC]  +
call sub_100BC5A  +
cmp eax edi +
mov [ebp+var_7D8] eax +
jge loc_100BE45  +
push edi  +
push edi  +
call ebx  +
push eax  +
call sub_100E909  +
push eax  +
push offset aDecodepopuplev  +
push offset aDW7rtmInetcore  +
push 209h  +
push edi  +
push offset aD  +
push edi  +
push [ebp+var_7D8]  +
push offset aIeUnattendDe_0  +
push 2000000h  +
call sub_100B725  +
add esp 0Ch +
push eax  +
call sub_100F2DD  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_7D8] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100E138  +
leave   +
retn 8  +
***
push ebp  +
mov ebp esp +
sub esp 0A0h +
mov eax dword_101C8C0 +
xor eax ebp +
mov [ebp-4] eax +
push esi  +
push edi  +
push 26h  +
pop ecx  +
mov esi offset aHkey_local_mac +
lea edi [ebp-0A0h] +
movs   +
lea eax [ebp-0A0h] +
push eax  +
push dword ptr [ebp+8]  +
movs   +
call sub_100BCC3  +
mov ecx [ebp-4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100E138  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
lea eax [ebp+hKey] +
push eax  +
mov eax [ebp+cSubKeys] +
shl eax 5 +
push off_101C00C[eax]  +
xor esi esi +
call sub_100D1EE  +
test eax eax +
jnz loc_100BEFE  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+cSubKeys] +
push eax  +
push esi  +
push esi  +
push esi  +
push [ebp+hKey]  +
mov [ebp+cSubKeys] esi +
call ds:RegQueryInfoKeyW  +
test eax eax +
jnz loc_100BEF5  +
cmp eax [ebp+cSubKeys] +
sbb esi esi +
neg esi  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 214h +
mov eax dword_101C8C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push esi  +
push edi  +
lea ecx [ebp+hKey] +
push ecx  +
push dword ptr [eax+14h]  +
xor esi esi +
xor edi edi +
call sub_100D1EE  +
cmp eax esi +
jnz loc_100BFEB  +
push esi  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+cbName] +
push eax  +
lea eax [ebp+Arguments] +
push eax  +
push esi  +
push [ebp+hKey]  +
mov [ebp+cbName] 104h +
call ds:RegEnumKeyExW  +
cmp eax esi +
jnz loc_100BF83  +
lea eax [ebp+Arguments] +
push eax  +
push [ebp+hKey]  +
call ds:RegDeleteKeyW  +
cmp eax esi +
jnz loc_100BF8C  +
cmp eax 103h +
jnz loc_100BF3F  +
jmp loc_100BFDF  +
jle loc_100BF98  +
and eax 0FFFFh +
or eax 80070000h +
push esi  +
push esi  +
mov edi eax +
call ds:GetLastError  +
push eax  +
call sub_100E909  +
push eax  +
push offset aClearexistingp  +
push offset aDW7rtmInetcore  +
push 314h  +
push esi  +
push offset aD  +
push esi  +
push edi  +
lea eax [ebp+Arguments] +
push eax  +
push offset aIeUnattendUn_0  +
push 2000000h  +
call sub_100B725  +
add esp 10h +
push eax  +
call sub_100F2DD  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100E138  +
leave   +
retn 4  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
shl eax 5 +
add eax offset off_101C000 +
push dword ptr [eax+14h]  +
push dword ptr [eax+0Ch]  +
call sub_100D88B  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
test edx edx +
jz loc_100C03C  +
cmp edx 7FFFFFFFh +
jbe loc_100C041  +
mov eax 80070057h +
test eax eax +
jl loc_100C057  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_101181B  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi 7FFFFFFFh +
push esi  +
push edi  +
lea eax [ebp+arg_0] +
call sub_100B795  +
test eax eax +
jl loc_100C096  +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_4] +
push esi  +
sub edx eax +
lea ecx [edi+eax*2] +
mov eax [ebp+arg_8] +
push 0  +
call sub_101181B  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
push 7FFFFFFFh  +
push esi  +
lea eax [ebp+arg_0] +
call sub_100B795  +
test eax eax +
jl loc_100C0E7  +
cmp [ebp+arg_C] 7FFFFFFEh +
jbe loc_100C0CF  +
mov eax 80070057h +
jmp loc_100C0E7  +
mov eax [ebp+arg_0] +
push [ebp+arg_C]  +
mov edx [ebp+arg_4] +
sub edx eax +
lea ecx [esi+eax*2] +
mov eax [ebp+arg_8] +
push 0  +
call sub_101181B  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_100C107  +
cmp ecx 7FFFFFFFh +
jbe loc_100C10C  +
mov eax 80070057h +
test eax eax +
jl loc_100C149  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_100C139  +
cmp eax esi +
ja loc_100C139  +
jnz loc_100C144  +
jmp loc_100C13E  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_8] +
test eax eax +
jz loc_100C172  +
mov edx [ebp+arg_4] +
cmp edx 7FFFFFFFh +
ja loc_100C172  +
call sub_100B740  +
jmp loc_100C177  +
mov eax 80070057h +
test eax eax +
jge loc_100C182  +
test edi edi +
jz loc_100C182  +
and dword ptr [edi] 0 +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 7DCh +
mov eax dword_101C8C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+lpStart] +
push esi  +
mov esi ds:StrChrW +
push edi  +
push 25h  +
xor eax eax +
push ebx  +
mov [ebp+var_7DC] ebx +
mov word ptr [ebp+var_7D4] ax +
mov [ebp+var_7D8] 1 +
call esi  +
mov edi eax +
test edi edi +
jz loc_100C24E  +
mov eax edi +
sub eax ebx +
sar eax 1 +
push eax  +
push ebx  +
mov ebx 3E8h +
push ebx  +
lea eax [ebp+var_7D4] +
push eax  +
call sub_100C0A1  +
test eax eax +
jl loc_100C265  +
push offset asc_100593C  +
push ebx  +
lea eax [ebp+var_7D4] +
push eax  +
call sub_100C060  +
test eax eax +
jl loc_100C265  +
push 25h  +
lea ebx [edi+2] +
push ebx  +
call esi  +
mov edi eax +
test edi edi +
jnz loc_100C1D1  +
test ebx ebx +
jz loc_100C233  +
push ebx  +
push 3E8h  +
lea eax [ebp+var_7D4] +
push eax  +
call sub_100C060  +
mov [ebp+var_7D8] eax +
test eax eax +
jl loc_100C24E  +
lea eax [ebp+var_7D4] +
push eax  +
push [ebp+arg_4]  +
push [ebp+var_7DC]  +
call sub_100C026  +
mov [ebp+var_7D8] eax +
mov ecx [ebp+var_4] +
mov eax [ebp+var_7D8] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100E138  +
leave   +
retn 8  +
mov [ebp+var_7D8] 80004005h +
jmp loc_100C24E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_C]  +
push [ebp+lpStart]  +
call sub_100C18C  +
mov esi ds:GetLastError +
mov ebx offset aDW7rtmInetcore +
mov edi offset aD +
test eax eax +
jge loc_100C2DE  +
push 0  +
push 0  +
call esi  +
push eax  +
call sub_100E909  +
push eax  +
push offset aWriteprivatepr  +
push ebx  +
push 0F7h  +
push 0  +
push edi  +
push 0  +
push [ebp+lpFileName]  +
push [ebp+lpStart]  +
push [ebp+lpKeyName]  +
push dword ptr [ebp+Arguments]  +
push offset aIeUnattendFail  +
push 4000000h  +
call sub_100B725  +
add esp 18h +
push eax  +
call sub_100F2DD  +
push [ebp+lpFileName]  +
push [ebp+lpStart]  +
push [ebp+lpKeyName]  +
push dword ptr [ebp+Arguments]  +
call ds:WritePrivateProfileStringW  +
push 0  +
push 0  +
test eax eax +
jnz loc_100C33F  +
call esi  +
push eax  +
call sub_100E909  +
push eax  +
push offset aWriteprivatepr  +
push ebx  +
push 0FDh  +
push 0  +
push edi  +
push 0  +
call esi  +
push eax  +
push [ebp+lpFileName]  +
push [ebp+lpStart]  +
push [ebp+lpKeyName]  +
push dword ptr [ebp+Arguments]  +
push offset aIeUnattendEr_0  +
push 2000000h  +
call sub_100B725  +
add esp 1Ch +
push eax  +
call sub_100F2DD  +
mov eax 80004005h +
jmp loc_100C37E  +
call esi  +
push eax  +
call sub_100E909  +
push eax  +
push offset aWriteprivatepr  +
push ebx  +
push 102h  +
push 0  +
push edi  +
push 0  +
push [ebp+lpFileName]  +
push [ebp+lpStart]  +
push [ebp+lpKeyName]  +
push dword ptr [ebp+Arguments]  +
push offset aIeUnattendWrit  +
push 4000000h  +
call sub_100B725  +
add esp 18h +
push eax  +
call sub_100F2DD  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_4]  +
xor esi esi +
push edi  +
mov [ebp+var_4] esi +
call sub_100C150  +
test eax eax +
jl loc_100C3E7  +
mov eax [ebp+var_4] +
push ebx  +
mov ebx ds:iswspace +
lea esi [edi+eax*2-2] +
jmp loc_100C3C8  +
movzx eax word ptr [esi] +
push eax  +
call ebx  +
pop ecx  +
test eax eax +
jz loc_100C3CC  +
dec esi  +
dec esi  +
cmp esi edi +
jnb loc_100C3BB  +
xor eax eax +
mov [esi+2] ax +
movzx eax word ptr [edi] +
mov esi edi +
jmp loc_100C3DE  +
inc esi  +
inc esi  +
movzx eax word ptr [esi] +
push eax  +
call ebx  +
pop ecx  +
test eax eax +
jnz loc_100C3D9  +
pop ebx  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 177Ch +
call __alloca_probe  +
mov eax dword_101C8C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ds:GetLastError +
xor ebx ebx +
push ebx  +
shl esi 5 +
push ebx  +
mov [ebp+var_1778] ebx +
add esi offset off_101C000 +
call edi  +
push eax  +
call sub_100E909  +
push eax  +
push offset aCreatelongtitl  +
push offset aDW7rtmInetcore  +
push 139h  +
push ebx  +
push offset aD  +
push ebx  +
push ebx  +
push dword ptr [esi+10h]  +
push dword ptr [esi+0Ch]  +
push offset aIeUnattendRegk  +
push 4000000h  +
call sub_100B725  +
add esp 14h +
push eax  +
call sub_100F2DD  +
cmp word_101FD90 bx +
jz loc_100C5CB  +
mov ebx 3E8h +
push ebx  +
lea eax [ebp+var_1774] +
push eax  +
push dword ptr [esi+10h]  +
push dword ptr [esi+0Ch]  +
call sub_100D41B  +
test eax eax +
jl loc_100C5CB  +
push ebx  +
lea eax [ebp+var_1774] +
push eax  +
call sub_100C38A  +
mov dword ptr [ebp+var_177C] eax +
test eax eax +
jz loc_100C5CB  +
cmp word ptr [eax] 0 +
jz loc_100C5CB  +
push offset word_101FD90  +
push ebx  +
push eax  +
push dword ptr [esi+18h]  +
push dword ptr [esi+14h]  +
call sub_100C276  +
push ebx  +
mov [ebp+var_1778] eax +
lea eax [ebp+Buffer] +
push eax  +
push 3E9h  +
push hInstance  +
call ds:LoadStringW  +
test eax eax +
jz loc_100C58D  +
push dword ptr [ebp+var_177C]  +
lea eax [ebp+Buffer] +
push eax  +
lea eax [ebp+Arguments] +
push ebx  +
push eax  +
call sub_100C0F1  +
add esp 10h +
mov [ebp+var_1778] eax +
test eax eax +
lea eax [ebp+Arguments] +
jge loc_100C571  +
push dword ptr [ebp+var_177C]  +
push 32h  +
push eax  +
call sub_100C026  +
xor esi esi +
push esi  +
push esi  +
call edi  +
push eax  +
call sub_100E909  +
push eax  +
push offset aCreatelongtitl  +
push offset aDW7rtmInetcore  +
push 164h  +
push esi  +
push offset aD  +
push esi  +
call edi  +
push eax  +
lea eax [ebp+Arguments] +
push eax  +
push offset aIeUnattendEr_1  +
push 2000000h  +
call sub_100B725  +
add esp 10h +
jmp loc_100C5C5  +
push offset word_101FD90  +
push ebx  +
push eax  +
push offset KeyName  +
push dword ptr [esi+14h]  +
call sub_100C276  +
mov [ebp+var_1778] eax +
jmp loc_100C5CB  +
xor esi esi +
push esi  +
push esi  +
call edi  +
push eax  +
call sub_100E909  +
push eax  +
push offset aCreatelongtitl  +
push offset aDW7rtmInetcore  +
push 174h  +
push esi  +
push offset aD  +
push esi  +
call edi  +
push eax  +
push offset aIeUnattendEr_2  +
push 2000000h  +
call sub_100B725  +
add esp 0Ch +
push eax  +
call sub_100F2DD  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_1778] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100E138  +
leave   +
retn 4  +
***
push ebp  +
mov ebp esp +
sub esp 7D4h +
mov eax dword_101C8C0 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
xor edi edi +
push edi  +
shl esi 5 +
push edi  +
xor ebx ebx +
add esi offset off_101C000 +
call ds:GetLastError  +
push eax  +
call sub_100E909  +
push eax  +
push offset aReg2ins  +
push offset aDW7rtmInetcore  +
push 18Ah  +
push edi  +
push offset aD  +
push edi  +
push edi  +
push dword ptr [esi+10h]  +
push dword ptr [esi+0Ch]  +
push offset aIeUnattendRegk  +
push 4000000h  +
call sub_100B725  +
add esp 14h +
push eax  +
call sub_100F2DD  +
cmp word_101FD90 di +
jz loc_100C692  +
mov edi 3E8h +
push edi  +
lea eax [ebp-7D4h] +
push eax  +
push dword ptr [esi+10h]  +
push dword ptr [esi+0Ch]  +
call sub_100D41B  +
test eax eax +
jl loc_100C692  +
push offset word_101FD90  +
push edi  +
lea eax [ebp-7D4h] +
push eax  +
push dword ptr [esi+18h]  +
push dword ptr [esi+14h]  +
call sub_100C276  +
mov ebx eax +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_100E138  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 2730h +
call __alloca_probe  +
mov eax dword_101C8C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ds:GetLastError +
xor ebx ebx +
push ebx  +
shl esi 5 +
push ebx  +
mov [ebp+var_2730] eax +
mov [ebp+var_272C] ebx +
add esi offset off_101C000 +
call edi  +
push eax  +
call sub_100E909  +
push eax  +
push offset aDecodepopupall  +
push offset aDW7rtmInetcore  +
push 222h  +
push ebx  +
push offset aD  +
push ebx  +
push ebx  +
push dword ptr [esi+10h]  +
push dword ptr [esi+0Ch]  +
push offset aIeUnattendRegk  +
push 4000000h  +
call sub_100B725  +
add esp 14h +
push eax  +
call sub_100F2DD  +
push ebx  +
push ebx  +
call edi  +
push eax  +
call sub_100E909  +
push eax  +
push offset aDecodepopupall  +
push offset aDW7rtmInetcore  +
push 225h  +
push ebx  +
push offset aD  +
push ebx  +
push offset aIeUnattendDe_1  +
push 4000000h  +
call sub_100B725  +
pop ecx  +
pop ecx  +
push eax  +
call sub_100F2DD  +
push 1388h  +
lea eax [ebp+var_2715+1] +
push eax  +
push dword ptr [esi+10h]  +
push dword ptr [esi+0Ch]  +
call sub_100D41B  +
test eax eax +
jl loc_100C8F2  +
lea eax [ebp+var_2715+1] +
mov byte ptr [ebp+var_2715] bl +
mov [ebp+Arguments] eax +
mov [ebp+var_2724] eax +
mov [ebp+var_2720] 1388h +
mov esi offset aIeUnattendDe_2 +
cmp word ptr [eax] 3Bh +
jnz loc_100C853  +
xor ecx ecx +
mov [eax] cx +
lea eax [ebp+var_2728] +
push eax  +
push [ebp+var_2720]  +
push [ebp+Arguments]  +
call sub_100C150  +
test eax eax +
jl loc_100C83E  +
cmp [ebp+var_2728] ebx +
jbe loc_100C83E  +
push ebx  +
push ebx  +
call edi  +
push eax  +
call sub_100E909  +
push eax  +
push offset aDecodepopupall  +
push offset aDW7rtmInetcore  +
push 239h  +
push ebx  +
push offset aD  +
push ebx  +
push [ebp+Arguments]  +
push esi  +
push 4000000h  +
call sub_100B725  +
add esp 0Ch +
push eax  +
call sub_100F2DD  +
push 3  +
push ebx  +
lea eax [ebp+var_2715] +
push eax  +
push [ebp+Arguments]  +
push [ebp+var_2730]  +
call sub_100D5E7  +
test eax eax +
jz loc_100C83E  +
mov [ebp+var_272C] 80004005h +
mov eax [ebp+var_2724] +
add eax 2 +
mov [ebp+Arguments] eax +
mov eax [ebp+var_2724] +
dec [ebp+var_2720]  +
inc eax  +
inc eax  +
mov [ebp+var_2724] eax +
cmp [eax] bx +
jnz loc_100C7A7  +
lea eax [ebp+var_2728] +
push eax  +
push [ebp+var_2720]  +
push [ebp+Arguments]  +
call sub_100C150  +
test eax eax +
jl loc_100C8F2  +
cmp [ebp+var_2728] ebx +
jbe loc_100C8F2  +
push ebx  +
push ebx  +
call edi  +
push eax  +
call sub_100E909  +
push eax  +
push offset aDecodepopupall  +
push offset aDW7rtmInetcore  +
push 24Bh  +
push ebx  +
push offset aD  +
push ebx  +
push [ebp+Arguments]  +
push esi  +
push 4000000h  +
call sub_100B725  +
add esp 0Ch +
push eax  +
call sub_100F2DD  +
push 3  +
push ebx  +
lea eax [ebp+var_2715] +
push eax  +
push [ebp+Arguments]  +
push [ebp+var_2730]  +
call sub_100D5E7  +
test eax eax +
jz loc_100C8F2  +
mov [ebp+var_272C] 80004005h +
mov ecx [ebp+var_4] +
mov eax [ebp+var_272C] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100E138  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0ACh +
mov eax dword_101C8C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
push 29h  +
pop ecx  +
mov esi offset aHkey_local_m_0 +
lea edi [ebp+var_AC] +
movs   +
lea eax [ebp+var_AC] +
push eax  +
push [ebp+arg_0]  +
movs   +
call sub_100C6AA  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100E138  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 17A4h +
call __alloca_probe  +
mov eax dword_101C8C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
mov dword ptr [ebp+Arguments] eax +
mov eax [ebp+arg_0] +
push edi  +
mov edi ds:GetLastError +
xor ebx ebx +
shl eax 5 +
push ebx  +
add eax offset off_101C000 +
push ebx  +
mov [ebp+var_1780] ebx +
mov [ebp+var_1790] eax +
call edi  +
push eax  +
call sub_100E909  +
push eax  +
mov esi offset aCopyregistryar +
push esi  +
push offset aDW7rtmInetcore  +
push 272h  +
push ebx  +
push offset aD  +
push ebx  +
push dword ptr [ebp+Arguments]  +
push offset aIeUnattendBegi  +
push 4000000h  +
call sub_100B725  +
add esp 0Ch +
push eax  +
call sub_100F2DD  +
lea eax [ebp+hKey] +
push eax  +
push dword ptr [ebp+Arguments]  +
call sub_100D1EE  +
test eax eax +
jnz loc_100CD13  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+cbMaxSubKeyLen] +
push eax  +
lea eax [ebp+cSubKeys] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+hKey]  +
call ds:RegQueryInfoKeyW  +
mov [ebp+var_1778] eax +
cmp eax ebx +
jnz loc_100CCC8  +
inc [ebp+cbMaxSubKeyLen]  +
mov eax [ebp+cbMaxSubKeyLen] +
xor ecx ecx +
push 2  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp+pMore] eax +
cmp eax ebx +
jz loc_100CD13  +
mov [ebp+dwIndex] ebx +
cmp [ebp+cSubKeys] ebx +
jbe loc_100CC66  +
mov eax [ebp+cbMaxSubKeyLen] +
mov [ebp+cbName] eax +
lea eax [ebp+ftLastWriteTime] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+cbName] +
push eax  +
push [ebp+pMore]  +
push [ebp+dwIndex]  +
push [ebp+hKey]  +
call ds:RegEnumKeyExW  +
push ebx  +
mov [ebp+var_1778] eax +
push ebx  +
cmp eax ebx +
jnz loc_100CC77  +
call edi  +
push eax  +
call sub_100E909  +
push eax  +
push esi  +
push offset aDW7rtmInetcore  +
push 293h  +
push ebx  +
push offset aD  +
push ebx  +
push ebx  +
push [ebp+pMore]  +
push [ebp+dwIndex]  +
push offset aIeUnattendEnum  +
push 4000000h  +
call sub_100B725  +
add esp 14h +
push eax  +
call sub_100F2DD  +
mov eax [ebp+arg_0] +
inc eax  +
mov [ebp+var_1778] eax +
shl eax 5 +
lea esi off_101C000[eax] +
jmp loc_100CC41  +
cmp [esi+4] ebx +
jnz loc_100CC2C  +
mov eax [ebp+var_1790] +
push dword ptr [eax+8]  +
push dword ptr [esi+8]  +
call ds:lstrcmpiW  +
test eax eax +
jnz loc_100CC2C  +
cmp [esi+10h] ebx +
jnz loc_100CB8C  +
push [ebp+pMore]  +
lea eax [ebp+Start] +
push 3E8h  +
push eax  +
call sub_100C026  +
push ebx  +
push ebx  +
call edi  +
push eax  +
call sub_100E909  +
push eax  +
push offset aCopyregistryar  +
push offset aDW7rtmInetcore  +
push 2A5h  +
push ebx  +
push offset aD  +
push ebx  +
push dword ptr [esi+18h]  +
lea eax [ebp+Start] +
push eax  +
push offset aIeUnattendUsin  +
push 4000000h  +
call sub_100B725  +
add esp 10h +
push eax  +
call sub_100F2DD  +
jmp loc_100CBD8  +
mov eax [ebp+var_1790] +
push dword ptr [eax+0Ch]  +
lea eax [ebp+Type] +
push 3E8h  +
push eax  +
call sub_100C026  +
push [ebp+pMore]  +
lea eax [ebp+Type] +
push eax  +
call ds:PathAppendW  +
push 3E8h  +
lea eax [ebp+Start] +
push eax  +
push dword ptr [esi+10h]  +
lea eax [ebp+Type] +
push eax  +
call sub_100D41B  +
cmp eax ebx +
jl loc_100CC21  +
mov eax [ebp+dwIndex] +
inc eax  +
push eax  +
push dword ptr [esi+18h]  +
lea eax [ebp+KeyName] +
push 3E8h  +
push eax  +
call sub_100C0F1  +
add esp 10h +
push offset word_101FD90  +
push 3E8h  +
lea eax [ebp+Start] +
push eax  +
lea eax [ebp+KeyName] +
push eax  +
mov eax [ebp+var_1790] +
push dword ptr [eax+14h]  +
call sub_100C276  +
cmp eax ebx +
jge loc_100CC2C  +
cmp [esi+1Ch] bl +
jnz loc_100CC2C  +
mov [ebp+var_1780] eax +
inc [ebp+var_1778]  +
mov esi [ebp+var_1778] +
shl esi 5 +
lea esi off_101C000[esi] +
cmp [esi] ebx +
jnz loc_100CB08  +
mov esi offset aCopyregistryar +
inc [ebp+dwIndex]  +
mov eax [ebp+dwIndex] +
cmp eax [ebp+cSubKeys] +
jb loc_100CA6B  +
push [ebp+pMore]  +
call ??3@YAXPAX@Z  +
pop ecx  +
jmp loc_100CD13  +
call edi  +
push eax  +
call sub_100E909  +
push eax  +
push esi  +
push offset aDW7rtmInetcore  +
push 2CAh  +
push ebx  +
push offset aD  +
push ebx  +
push [ebp+var_1778]  +
push [ebp+dwIndex]  +
push dword ptr [ebp+Arguments]  +
push offset aIeUnattendUnex  +
push 2000000h  +
call sub_100B725  +
add esp 14h +
push eax  +
call sub_100F2DD  +
mov [ebp+var_1780] 80004005h +
jmp loc_100CC4E  +
push ebx  +
push ebx  +
call edi  +
push eax  +
call sub_100E909  +
push eax  +
push esi  +
push offset aDW7rtmInetcore  +
push 2D3h  +
push ebx  +
push offset aD  +
push ebx  +
push [ebp+var_1778]  +
push dword ptr [ebp+Arguments]  +
push offset aIeUnattendUn_1  +
push 2000000h  +
call sub_100B725  +
add esp 10h +
push eax  +
call sub_100F2DD  +
mov [ebp+var_1780] 80004005h +
push ebx  +
push ebx  +
call edi  +
push eax  +
call sub_100E909  +
push eax  +
push esi  +
push offset aDW7rtmInetcore  +
push 2DBh  +
push ebx  +
push offset aD  +
push ebx  +
push [ebp+var_1780]  +
push offset aIeUnattendEndC  +
push 4000000h  +
call sub_100B725  +
add esp 0Ch +
push eax  +
call sub_100F2DD  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_1780] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100E138  +
leave   +
retn 8  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
shl eax 5 +
push off_101C00C[eax]  +
push dword ptr [ebp+8]  +
call sub_100C95B  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 27Ch +
mov eax dword_101C8C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_8] +
mov [ebp+Type] eax +
lea eax [ebp+pguid] +
push eax  +
call ds:CoCreateGuid  +
mov [ebp+var_270] eax +
test eax eax +
jl loc_100CEDF  +
push 27h  +
lea eax [ebp+String] +
push eax  +
lea eax [ebp+pguid] +
push eax  +
call sub_100E6D3  +
mov [ebp+var_270] eax +
test eax eax +
jl loc_100CEDF  +
lea eax [ebp+String] +
push eax  +
push dword ptr [edi+14h]  +
lea eax [ebp+var_25C] +
push offset aSS  +
push 104h  +
push eax  +
call sub_100C0F1  +
add esp 14h +
mov [ebp+var_270] eax +
test eax eax +
jl loc_100CEDF  +
push ebx  +
mov ebx ds:StrCmpW +
push esi  +
mov esi [ebp+arg_0] +
inc esi  +
mov [ebp+var_274] esi +
jmp loc_100CEC7  +
push offset psz2  +
push off_101C018[esi]  +
call ebx  +
test eax eax +
jz loc_100CE5F  +
push off_101C018[esi]  +
lea eax [ebp+var_25C] +
push eax  +
push off_101C010[esi]  +
push [ebp+Type]  +
call sub_100D7ED  +
jmp loc_100CEB5  +
lea eax [ebp+var_27C] +
push eax  +
push off_101C010[esi]  +
push [ebp+Type]  +
call sub_100D505  +
test eax eax +
jnz loc_100CEA9  +
cmp [ebp+var_27C] 1 +
jnz loc_100CEB5  +
push 1  +
lea eax [ebp+String] +
push eax  +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
push eax  +
lea eax [ebp+String] +
push eax  +
push off_101C018[esi]  +
push dword ptr [edi+14h]  +
call sub_100D5E7  +
test eax eax +
jle loc_100CEB5  +
and eax 0FFFFh +
or eax 80070000h +
inc [ebp+var_274]  +
mov esi [ebp+var_274] +
mov [ebp+var_270] eax +
push dword ptr [edi+8]  +
shl esi 5 +
push dword_101C008[esi]  +
call ebx  +
test eax eax +
jz loc_100CE2E  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_270] +
xor ecx ebp +
pop edi  +
call sub_100E138  +
leave   +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
sub esp 428h +
mov eax dword_101C8C0 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
mov esi [ebp+8] +
push dword ptr [ebp+8]  +
xor ebx ebx +
shl esi 5 +
mov [ebp-418h] ebx +
add esi offset off_101C000 +
call sub_100BEAE  +
test eax eax +
jz loc_100D00A  +
push esi  +
call sub_100BF0A  +
cmp eax ebx +
mov [ebp-418h] eax +
jl loc_100D00A  +
lea eax [ebp-420h] +
push eax  +
push dword ptr [esi+0Ch]  +
call sub_100D1EE  +
cmp eax ebx +
jnz loc_100CFF8  +
mov [ebp-41Ch] ebx +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp-424h] +
push eax  +
lea eax [ebp-20Ch] +
push eax  +
push dword ptr [ebp-41Ch]  +
mov dword ptr [ebp-424h] 104h +
push dword ptr [ebp-420h]  +
call ds:RegEnumKeyExW  +
mov [ebp-428h] eax +
cmp eax ebx +
jnz loc_100CFD4  +
lea eax [ebp-20Ch] +
push eax  +
push dword ptr [esi+0Ch]  +
lea eax [ebp-414h] +
push offset aSS  +
push 104h  +
push eax  +
call sub_100C0F1  +
add esp 14h +
test eax eax +
jl loc_100CFD4  +
push esi  +
lea eax [ebp-414h] +
push eax  +
push dword ptr [ebp+8]  +
call sub_100CD8C  +
inc dword ptr [ebp-41Ch]  +
cmp dword ptr [ebp-428h] 103h +
jnz loc_100CF65  +
push dword ptr [ebp-420h]  +
call ds:RegCloseKey  +
jmp loc_100D00A  +
jle loc_100D004  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp-418h] eax +
mov ecx [ebp-4] +
mov eax [ebp-418h] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100E138  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
push ebx  +
xor edi edi +
push edi  +
push [ebp+lpType]  +
mov [ebx] edi +
push edi  +
push [ebp+lpValueName]  +
mov [esi] edi +
push [ebp+hKey]  +
call ds:RegQueryValueExW  +
mov dword ptr [ebp+Arguments] eax +
cmp eax edi +
jnz loc_100D0DB  +
mov eax [ebx] +
add eax 4 +
push eax  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [esi] eax +
cmp eax edi +
jz loc_100D12D  +
push dword ptr [ebx]  +
push edi  +
push eax  +
call memset  +
add esp 0Ch +
push ebx  +
push dword ptr [esi]  +
push [ebp+lpType]  +
push edi  +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call ds:RegQueryValueExW  +
mov dword ptr [ebp+Arguments] eax +
cmp eax edi +
jz loc_100D12D  +
push edi  +
push edi  +
call ds:GetLastError  +
push eax  +
call sub_100E909  +
push eax  +
push offset aGetregistryval  +
push offset aDW7rtmInetco_0  +
push 0ACh  +
push edi  +
push offset aD  +
push edi  +
push dword ptr [ebp+Arguments]  +
push offset aIeUnattendCann  +
push 2000000h  +
call sub_100B725  +
add esp 0Ch +
push eax  +
call sub_100F2DD  +
push dword ptr [esi]  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov [esi] edi +
jmp loc_100D12D  +
push edi  +
push edi  +
call ds:GetLastError  +
push eax  +
call sub_100E909  +
push eax  +
push offset aGetregistryval  +
push offset aDW7rtmInetco_0  +
xor ecx ecx +
cmp dword ptr [ebp+Arguments] 2 +
push 0B7h  +
push edi  +
setnz cl  +
push offset aD  +
push edi  +
push dword ptr [ebp+Arguments]  +
mov eax 2000000h +
push [ebp+lpValueName]  +
dec ecx  +
and ecx eax +
add ecx eax +
push offset aIeUnattendCa_0  +
push ecx  +
call sub_100B725  +
add esp 10h +
push eax  +
call sub_100F2DD  +
mov eax dword ptr [ebp+Arguments] +
pop edi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov [ebp+var_28] offset aHkey_current_u +
mov [ebp+var_24] 80000001h +
mov [ebp+var_20] offset aHkey_current_c +
mov [ebp+var_1C] 80000005h +
mov [ebp+var_18] offset aHkey_classes_r +
mov [ebp+var_14] 80000000h +
mov [ebp+var_10] offset aHkey_local_m_1 +
mov [ebp+var_C] 80000002h +
mov [ebp+var_8] offset aHkey_users +
mov [ebp+var_4] 80000003h +
xor ebx ebx +
mov eax [ebp+ebx*8+var_28] +
lea ecx [ebp+arg_0] +
push ecx  +
push 7FFFFFFFh  +
push eax  +
call sub_100C150  +
test eax eax +
jl loc_100D1BD  +
mov esi [ebp+arg_0] +
push esi  +
push [ebp+ebx*8+var_28]  +
push edi  +
call ds:wcsncmp  +
add esp 0Ch +
test eax eax +
jz loc_100D1CF  +
inc ebx  +
cmp ebx 5 +
jb loc_100D190  +
mov eax 80004005h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
lea eax [edi+esi*2] +
push eax  +
push [ebp+arg_4]  +
push edi  +
call sub_100C026  +
mov eax [ebp+ebx*8+var_24] +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_100D1C8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 210h +
mov eax dword_101C8C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi 104h +
push esi  +
lea eax [ebp+SubKey] +
push eax  +
call sub_100C026  +
lea eax [ebp+hKey] +
push eax  +
push esi  +
lea eax [ebp+SubKey] +
push eax  +
call sub_100D13A  +
xor esi esi +
test eax eax +
jl loc_100D2A8  +
push ebx  +
push 20019h  +
push esi  +
lea eax [ebp+SubKey] +
push eax  +
push [ebp+hKey]  +
call ds:RegOpenKeyExW  +
mov ebx eax +
cmp ebx esi +
jz loc_100D2E9  +
push esi  +
push esi  +
call ds:GetLastError  +
push eax  +
call sub_100E909  +
push eax  +
push offset aOpenregkey  +
push offset aDW7rtmInetco_0  +
cmp ebx 2 +
jnz loc_100D294  +
push 83h  +
push esi  +
push offset aD  +
push esi  +
push edi  +
push offset aIeUnattendRegi  +
push 4000000h  +
jmp loc_100D2DB  +
push 87h  +
push esi  +
push offset aD  +
push esi  +
push edi  +
push offset aIeUnattendEr_3  +
jmp loc_100D2D6  +
push 3  +
pop ebx  +
push esi  +
push esi  +
call ds:GetLastError  +
push eax  +
call sub_100E909  +
push eax  +
push offset aOpenregkey  +
push offset aDW7rtmInetco_0  +
push 8Eh  +
push esi  +
push offset aD  +
push esi  +
push edi  +
push offset aIeUnattendBadS  +
push 2000000h  +
call sub_100B725  +
add esp 0Ch +
push eax  +
call sub_100F2DD  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_100E138  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
lea eax [ebp+hKey] +
push eax  +
push [ebp+hKey]  +
call sub_100D1EE  +
mov esi eax +
test esi esi +
jnz loc_100D33A  +
mov esi [ebp+arg_8] +
push ebx  +
push [ebp+lpType]  +
mov ebx [ebp+arg_C] +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call sub_100D025  +
push [ebp+hKey]  +
mov esi eax +
call ds:RegCloseKey  +
pop ebx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
xor esi esi +
cmp edi esi +
jbe loc_100D3CC  +
cmp edi 2 +
jbe loc_100D3BC  +
cmp edi 4 +
jnz loc_100D3CC  +
mov edi [ebp+arg_0] +
push 0Ah  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push dword ptr [edi]  +
call _itow_s  +
mov ebx eax +
add esp 10h +
cmp ebx esi +
jz loc_100D40D  +
push esi  +
push esi  +
call ds:GetLastError  +
push eax  +
call sub_100E909  +
push eax  +
push offset aConvertregtype  +
push offset aDW7rtmInetco_0  +
push 0E4h  +
push esi  +
push offset aD  +
push esi  +
push ebx  +
push dword ptr [edi]  +
push offset aIeUnattendUn_2  +
push 4000000h  +
call sub_100B725  +
add esp 10h +
jmp loc_100D404  +
push [ebp+arg_0]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
call sub_100C026  +
jmp loc_100D40D  +
push esi  +
push esi  +
call ds:GetLastError  +
push eax  +
call sub_100E909  +
push eax  +
push offset aConvertregtype  +
push offset aDW7rtmInetco_0  +
push 0EAh  +
push esi  +
push offset aD  +
push esi  +
push edi  +
push offset aIeUnattendUnsu  +
push 4000000h  +
call sub_100B725  +
add esp 0Ch +
push eax  +
call sub_100F2DD  +
push 0Bh  +
pop esi  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
push edi  +
lea eax [ebp+Type] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
push dword ptr [ebp+Arguments]  +
xor esi esi +
push [ebp+Type]  +
mov [ebp+var_4] esi +
call sub_100D301  +
mov edi eax +
cmp edi esi +
jnz loc_100D4AA  +
cmp [ebp+var_4] esi +
jz loc_100D46B  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+Type]  +
push [ebp+var_4]  +
call sub_100D346  +
push [ebp+var_4]  +
mov edi eax +
call ??3@YAXPAX@Z  +
pop ecx  +
cmp edi esi +
jnz loc_100D4AA  +
push esi  +
push esi  +
call ds:GetLastError  +
push eax  +
call sub_100E909  +
push eax  +
push offset aGetregistryv_0  +
push offset aDW7rtmInetco_0  +
push 0FDh  +
push esi  +
push offset aD  +
push esi  +
push [ebp+arg_8]  +
push dword ptr [ebp+Arguments]  +
push offset aIeUnattendRead  +
push 4000000h  +
call sub_100B725  +
add esp 10h +
jmp loc_100D4E9  +
cmp edi 2 +
jz loc_100D4EF  +
push esi  +
push esi  +
call ds:GetLastError  +
push eax  +
call sub_100E909  +
push eax  +
push offset aGetregistryv_0  +
push offset aDW7rtmInetco_0  +
push 101h  +
push esi  +
push offset aD  +
push esi  +
push dword ptr [ebp+Arguments]  +
push offset aIeUnattendRe_0  +
push 2000000h  +
call sub_100B725  +
add esp 0Ch +
push eax  +
call sub_100F2DD  +
mov eax edi +
neg eax  +
sbb eax eax +
pop edi  +
and eax 80004005h +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
lea eax [ebp+Type] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
push dword ptr [ebp+Arguments]  +
xor esi esi +
push [ebp+Type]  +
mov [ebp+var_4] esi +
call sub_100D301  +
mov ebx eax +
cmp ebx esi +
jnz loc_100D58C  +
mov eax [ebp+var_4] +
push edi  +
mov edi [ebp+arg_8] +
cmp eax esi +
jz loc_100D547  +
movzx ecx byte ptr [eax] +
push eax  +
mov [edi] ecx +
call ??3@YAXPAX@Z  +
pop ecx  +
push esi  +
push esi  +
call ds:GetLastError  +
push eax  +
call sub_100E909  +
push eax  +
push offset aGetregistryv_1  +
push offset aDW7rtmInetco_0  +
push 113h  +
push esi  +
push offset aD  +
push esi  +
push dword ptr [edi]  +
push dword ptr [ebp+Arguments]  +
push offset aIeUnattendRe_1  +
push 4000000h  +
call sub_100B725  +
add esp 10h +
push eax  +
call sub_100F2DD  +
pop edi  +
jmp loc_100D5D1  +
cmp ebx 2 +
jz loc_100D5D1  +
push esi  +
push esi  +
call ds:GetLastError  +
push eax  +
call sub_100E909  +
push eax  +
push offset aGetregistryv_1  +
push offset aDW7rtmInetco_0  +
push 117h  +
push esi  +
push offset aD  +
push esi  +
push dword ptr [ebp+Arguments]  +
push offset aIeUnattendRe_0  +
push 2000000h  +
call sub_100B725  +
add esp 0Ch +
push eax  +
call sub_100F2DD  +
mov eax ebx +
neg eax  +
sbb eax eax +
pop esi  +
and eax 80004005h +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 9E8h +
mov eax dword_101C8C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
push ebx  +
mov [ebp+lpData] eax +
mov esi 104h +
push esi  +
lea eax [ebp+SubKey] +
push eax  +
call sub_100C026  +
lea eax [ebp+hKey] +
push eax  +
push esi  +
lea eax [ebp+SubKey] +
push eax  +
call sub_100D13A  +
xor esi esi +
push esi  +
test eax eax +
jl loc_100D789  +
lea eax [ebp+hKey] +
push eax  +
push esi  +
push 0F003Fh  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+SubKey] +
push eax  +
push [ebp+hKey]  +
call ds:RegCreateKeyExW  +
mov [ebp+var_9E0] eax +
cmp eax esi +
jnz loc_100D748  +
push 3E8h  +
lea eax [ebp+var_9DC] +
push eax  +
push [ebp+dwType]  +
push [ebp+lpData]  +
call sub_100D346  +
push [ebp+cbData]  +
push [ebp+lpData]  +
push [ebp+dwType]  +
push esi  +
push edi  +
push [ebp+hKey]  +
call ds:RegSetValueExW  +
push esi  +
mov [ebp+var_9E0] eax +
push esi  +
cmp eax esi +
jz loc_100D6F7  +
call ds:GetLastError  +
push eax  +
call sub_100E909  +
push eax  +
push offset aSetregistryval  +
push offset aDW7rtmInetco_0  +
push 12Ch  +
push esi  +
push offset aD  +
push esi  +
push [ebp+var_9E0]  +
lea eax [ebp+var_9DC] +
push eax  +
push edi  +
push ebx  +
push offset aIeUnattendCa_1  +
push 2000000h  +
call sub_100B725  +
add esp 18h +
jmp loc_100D731  +
call ds:GetLastError  +
push eax  +
call sub_100E909  +
push eax  +
push offset aSetregistryval  +
push offset aDW7rtmInetco_0  +
push 130h  +
push esi  +
push offset aD  +
push esi  +
push [ebp+dwType]  +
push edi  +
push ebx  +
push offset aIeUnattendSe_1  +
push 4000000h  +
call sub_100B725  +
add esp 14h +
push eax  +
call sub_100F2DD  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
jmp loc_100D7D1  +
push esi  +
push esi  +
call ds:GetLastError  +
push eax  +
call sub_100E909  +
push eax  +
push offset aSetregistryval  +
push offset aDW7rtmInetco_0  +
push 137h  +
push esi  +
push offset aD  +
push esi  +
push [ebp+var_9E0]  +
push edi  +
push ebx  +
push offset aIeUnattendCa_2  +
push 2000000h  +
call sub_100B725  +
add esp 14h +
jmp loc_100D7CB  +
push esi  +
mov [ebp+var_9E0] 3 +
call ds:GetLastError  +
push eax  +
call sub_100E909  +
push eax  +
push offset aSetregistryval  +
push offset aDW7rtmInetco_0  +
push 13Dh  +
push esi  +
push offset aD  +
push esi  +
push edi  +
push ebx  +
push offset aIeUnattendBadD  +
push 2000000h  +
call sub_100B725  +
add esp 10h +
push eax  +
call sub_100F2DD  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_9E0] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100E138  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
xor esi esi +
push esi  +
push esi  +
call ds:GetLastError  +
push eax  +
call sub_100E909  +
push eax  +
push offset aCopyregistryse  +
push offset aDW7rtmInetco_0  +
push 144h  +
push esi  +
push offset aD  +
push esi  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
push offset aIeUnattendCopy  +
push 4000000h  +
call sub_100B725  +
add esp 18h +
push eax  +
call sub_100F2DD  +
lea eax [ebp+dwType] +
push eax  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+lpValueName]  +
mov [ebp+var_4] esi +
push [ebp+hKey]  +
call sub_100D301  +
cmp eax esi +
jnz loc_100D878  +
cmp [ebp+var_4] esi +
jz loc_100D878  +
push [ebp+dwType]  +
push [ebp+cbData]  +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
call sub_100D5E7  +
neg eax  +
sbb eax eax +
and eax 80004005h +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 104Ch +
call __alloca_probe  +
mov eax dword_101C8C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
mov edi ds:GetLastError +
xor esi esi +
mov dword ptr [ebp+Arguments] eax +
mov eax [ebp+arg_4] +
push esi  +
push esi  +
mov dword ptr [ebp+var_101C] eax +
mov [ebp+hKey] esi +
call edi  +
push eax  +
call sub_100E909  +
push eax  +
push offset aCopyregistrybl  +
push offset aDW7rtmInetco_0  +
push 153h  +
push esi  +
mov ebx offset aD +
push ebx  +
push esi  +
push dword ptr [ebp+var_101C]  +
push dword ptr [ebp+Arguments]  +
push offset aIeUnattendCo_0  +
push 4000000h  +
call sub_100B725  +
add esp 10h +
push eax  +
call sub_100F2DD  +
lea eax [ebp+hKey] +
push eax  +
push dword ptr [ebp+Arguments]  +
call sub_100D1EE  +
push esi  +
mov [ebp+var_1010] eax +
push esi  +
cmp eax esi +
jnz loc_100DDB7  +
call edi  +
push eax  +
call sub_100E909  +
push eax  +
push offset aCopyregistrybl  +
push offset aDW7rtmInetco_0  +
push 159h  +
push esi  +
push ebx  +
push esi  +
push dword ptr [ebp+Arguments]  +
push offset aIeUnattendCo_1  +
push 4000000h  +
call sub_100B725  +
add esp 0Ch +
push eax  +
call sub_100F2DD  +
push esi  +
push esi  +
lea eax [ebp+cbMaxValueLen] +
push eax  +
lea eax [ebp+cbMaxValueNameLen] +
push eax  +
lea eax [ebp+cValues] +
push eax  +
push esi  +
lea eax [ebp+cbMaxSubKeyLen] +
push eax  +
lea eax [ebp+cSubKeys] +
push eax  +
push esi  +
push esi  +
push esi  +
push [ebp+hKey]  +
call ds:RegQueryInfoKeyW  +
mov [ebp+var_1010] eax +
cmp eax esi +
jnz loc_100DD68  +
inc [ebp+cbMaxSubKeyLen]  +
mov eax [ebp+cbMaxSubKeyLen] +
xor ecx ecx +
push 2  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
inc [ebp+cbMaxValueNameLen]  +
mov [ebp+lpName] eax +
mov eax [ebp+cbMaxValueNameLen] +
xor ecx ecx +
push 2  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
inc [ebp+cbMaxValueLen]  +
push [ebp+cbMaxValueLen]  +
mov [ebp+lpValueName] eax +
call ??2@YAPAXI@Z  +
add esp 0Ch +
mov [ebp+lpData] eax +
cmp [ebp+lpName] esi +
jz loc_100DD2A  +
cmp [ebp+lpValueName] esi +
jz loc_100DD2A  +
cmp eax esi +
jz loc_100DD3E  +
mov [ebp+dwIndex] esi +
cmp [ebp+cValues] esi +
jbe loc_100DB2B  +
mov eax [ebp+cbMaxValueNameLen] +
mov [ebp+cbName] eax +
mov eax [ebp+cbMaxValueLen] +
mov [ebp+ftLastWriteTime.dwHighDateTime] eax +
lea eax [ebp+ftLastWriteTime.dwHighDateTime] +
push eax  +
push [ebp+lpData]  +
lea eax [ebp+Type] +
push eax  +
push esi  +
lea eax [ebp+cbName] +
push eax  +
push [ebp+lpValueName]  +
push [ebp+dwIndex]  +
push [ebp+hKey]  +
call ds:RegEnumValueW  +
mov [ebp+var_1010] eax +
cmp eax esi +
jnz loc_100DB13  +
push [ebp+lpValueName]  +
push dword ptr [ebp+var_101C]  +
push [ebp+lpValueName]  +
push dword ptr [ebp+Arguments]  +
call sub_100D7ED  +
mov [ebp+var_1038] eax +
cmp eax esi +
jz loc_100DB13  +
push esi  +
push esi  +
call edi  +
push eax  +
call sub_100E909  +
push eax  +
push offset aCopyregistrybl  +
push offset aDW7rtmInetco_0  +
push 188h  +
push esi  +
push ebx  +
push esi  +
push [ebp+var_1038]  +
push [ebp+lpValueName]  +
push dword ptr [ebp+var_101C]  +
push [ebp+lpValueName]  +
push dword ptr [ebp+Arguments]  +
push offset aIeUnattendCo_2  +
push 2000000h  +
call sub_100B725  +
add esp 1Ch +
push eax  +
call sub_100F2DD  +
inc [ebp+dwIndex]  +
mov eax [ebp+dwIndex] +
cmp eax [ebp+cValues] +
jb loc_100DA43  +
cmp [ebp+cValues] 1 +
jnb loc_100DC10  +
push esi  +
push esi  +
call edi  +
push eax  +
call sub_100E909  +
push eax  +
push offset aCopyregistrybl  +
push offset aDW7rtmInetco_0  +
push 18Fh  +
push esi  +
push ebx  +
push esi  +
push dword ptr [ebp+Arguments]  +
push offset aIeUnattendNoVa  +
push 4000000h  +
call sub_100B725  +
add esp 0Ch +
push eax  +
call sub_100F2DD  +
push dword ptr [ebp+var_101C]  +
lea eax [ebp+SubKey] +
push 400h  +
push eax  +
call sub_100C026  +
lea eax [ebp+cbName] +
push eax  +
push 400h  +
lea eax [ebp+SubKey] +
push eax  +
call sub_100D13A  +
push esi  +
lea eax [ebp+cbName] +
push eax  +
push esi  +
push 0F003Fh  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+SubKey] +
push eax  +
push 80000002h  +
call ds:RegCreateKeyExW  +
mov [ebp+var_1010] eax +
cmp eax esi +
jz loc_100DC10  +
push esi  +
push esi  +
call edi  +
push eax  +
call sub_100E909  +
push eax  +
push offset aCopyregistrybl  +
push offset aDW7rtmInetco_0  +
push 197h  +
push esi  +
push ebx  +
push esi  +
push [ebp+var_1010]  +
push dword ptr [ebp+Arguments]  +
push offset aIeUnattendCoul  +
push 4000000h  +
call sub_100B725  +
add esp 10h +
push eax  +
call sub_100F2DD  +
mov [ebp+dwIndex] esi +
cmp [ebp+cSubKeys] esi +
jbe loc_100DD2A  +
mov eax [ebp+cbMaxSubKeyLen] +
mov [ebp+cbName] eax +
lea eax [ebp+ftLastWriteTime] +
push eax  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+cbName] +
push eax  +
push [ebp+lpName]  +
push [ebp+dwIndex]  +
push [ebp+hKey]  +
call ds:RegEnumKeyExW  +
mov [ebp+var_1010] eax +
cmp eax esi +
jnz loc_100DD12  +
push [ebp+lpName]  +
lea eax [ebp+var_1004] +
push dword ptr [ebp+Arguments]  +
push offset aSS  +
push 400h  +
push eax  +
call sub_100C0F1  +
push [ebp+lpName]  +
lea eax [ebp+SubKey] +
push dword ptr [ebp+var_101C]  +
push offset aSS  +
push 400h  +
push eax  +
call sub_100C0F1  +
add esp 28h +
lea eax [ebp+SubKey] +
push eax  +
lea eax [ebp+var_1004] +
push eax  +
call sub_100D88B  +
mov [ebp+var_1038] eax +
cmp eax esi +
jz loc_100DD12  +
push esi  +
push esi  +
call edi  +
push eax  +
call sub_100E909  +
push eax  +
push offset aCopyregistrybl  +
push offset aDW7rtmInetco_0  +
push 1ADh  +
push esi  +
push ebx  +
push esi  +
push [ebp+var_1038]  +
lea eax [ebp+SubKey] +
push eax  +
lea eax [ebp+var_1004] +
push eax  +
push offset aIeUnattendCo_3  +
push 2000000h  +
call sub_100B725  +
add esp 14h +
push eax  +
call sub_100F2DD  +
inc [ebp+dwIndex]  +
mov eax [ebp+dwIndex] +
cmp eax [ebp+cSubKeys] +
jb loc_100DC22  +
cmp [ebp+lpData] esi +
jz loc_100DD3E  +
push [ebp+lpData]  +
call ??3@YAXPAX@Z  +
pop ecx  +
cmp [ebp+lpValueName] esi +
jz loc_100DD52  +
push [ebp+lpValueName]  +
call ??3@YAXPAX@Z  +
pop ecx  +
cmp [ebp+lpName] esi +
jz loc_100DDA3  +
push [ebp+lpName]  +
call ??3@YAXPAX@Z  +
pop ecx  +
jmp loc_100DDA3  +
push esi  +
push esi  +
call edi  +
push eax  +
call sub_100E909  +
push eax  +
push offset aCopyregistrybl  +
push offset aDW7rtmInetco_0  +
push 1B7h  +
push esi  +
push ebx  +
push esi  +
push [ebp+var_1010]  +
push offset aIeUnattendCo_4  +
push 4000000h  +
call sub_100B725  +
add esp 0Ch +
push eax  +
call sub_100F2DD  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov edi [ebp+var_1010] +
jmp loc_100DDF7  +
call edi  +
push eax  +
call sub_100E909  +
mov edi [ebp+var_1010] +
push eax  +
push offset aCopyregistrybl  +
push offset aDW7rtmInetco_0  +
push 1BDh  +
push esi  +
push ebx  +
push esi  +
push edi  +
push dword ptr [ebp+Arguments]  +
push offset aIeUnattendCo_5  +
push 4000000h  +
call sub_100B725  +
add esp 10h +
push eax  +
call sub_100F2DD  +
cmp edi esi +
jle loc_100DE07  +
and edi 0FFFFh +
or edi 80070000h +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100E138  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_100DE3B  +
test eax eax +
jnz loc_100DE40  +
mov ecx [esi] +
test ecx ecx +
jz loc_100DE38  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_100DE2C  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_101FFC0 +
push offset dword_101FFB0  +
push dword_101FFBC  +
mov dword_101FFB0 eax +
push offset unk_101FFA0  +
push offset unk_101FFA4  +
push offset unk_101FF9C  +
call ds:__getmainargs  +
add esp 14h +
mov dword_101FFAC eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+var_1C] ebx +
mov [ebp+ms_exc.disabled] ebx +
lea eax [ebp+StartupInfo] +
push eax  +
call ds:GetStartupInfoA  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [ebp+ms_exc.disabled] 1 +
mov eax large fs:18h +
mov esi [eax+4] +
mov edi offset Destination +
push 0  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
test eax eax +
jz loc_100DEE0  +
cmp eax esi +
jnz loc_100DED3  +
xor esi esi +
inc esi  +
mov ebx esi +
jmp loc_100DEE3  +
push 3E8h  +
call ds:Sleep  +
jmp loc_100DEBA  +
xor esi esi +
inc esi  +
mov eax dword_1020904 +
cmp eax esi +
jnz loc_100DEF6  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_100DF25  +
mov eax dword_1020904 +
test eax eax +
jnz loc_100DF1F  +
mov dword_1020904 esi +
push offset dword_10014E8  +
push offset dword_10014DC  +
call sub_100DE1F  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100DF25  +
jmp loc_100E04D  +
mov dword_101FFB8 esi +
mov eax dword_1020904 +
cmp eax esi +
jnz loc_100DF49  +
push offset dword_10014D8  +
push offset dword_10014B0  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_1020904 2 +
test ebx ebx +
jnz loc_100DF55  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_102090C 0 +
jz loc_100DF79  +
push offset dword_102090C  +
call sub_100E2A9  +
pop ecx  +
test eax eax +
jz loc_100DF79  +
push 0  +
push 2  +
push 0  +
call dword_102090C  +
mov eax ds:_acmdln +
mov esi [eax] +
mov [ebp+var_20] esi +
mov al [esi] +
cmp al 20h +
ja $LN61  +
test al al +
jz loc_100DF93  +
cmp [ebp+var_1C] 0 +
jnz $LN61  +
mov al [esi] +
test al al +
jz loc_100DFA3  +
cmp al 20h +
ja loc_100DFA3  +
inc esi  +
mov [ebp+var_20] esi +
jmp loc_100DF93  +
test byte ptr [ebp+StartupInfo.dwFlags] 1 +
jz loc_100DFAF  +
movzx eax [ebp+StartupInfo.wShowWindow] +
jmp loc_100DFB2  +
push 0Ah  +
pop eax  +
push eax  +
push esi  +
push 0  +
push 1000000h  +
call _WinMain@16  +
mov dword_101FFB4 eax +
cmp dword_101FFA8 0 +
jnz $LN62  +
push eax  +
call ds:exit  +
cmp al 22h +
jnz loc_100DFE4  +
xor ecx ecx +
cmp [ebp+var_1C] ecx +
setz cl  +
mov [ebp+var_1C] ecx +
movzx eax al +
push eax  +
call ds:_ismbblead  +
pop ecx  +
test eax eax +
jz loc_100DFF7  +
inc esi  +
mov [ebp+var_20] esi +
inc esi  +
jmp loc_100DF80  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-24h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-24h] +
mov dword_101FFB4 eax +
cmp dword_101FFA8 0 +
jnz $LN62  +
push eax  +
call ds:_exit  +
cmp dword_101FFB8 0 +
jnz loc_100E038  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_101FFB4 +
jmp loc_100E059  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_100E076  +
xor eax eax +
jmp loc_100E0C3  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_100E072  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_100E0B0  +
cmp ecx 20Bh +
jnz loc_100E072  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_100E072  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_100E0BE  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_100E072  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 2  +
mov dword_101FFA8 eax +
call sub_100E4E8  +
push eax  +
call ds:__set_app_type  +
or dword_10208FC 0FFFFFFFFh +
or dword_1020900 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_101FFC8 +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_101FFC4 +
mov [eax] ecx +
call sub_100E3D4  +
cmp dword_101C8D8 0 +
jnz loc_100E11C  +
push offset sub_100E3D4  +
call ds:__setusermatherr  +
pop ecx  +
call sub_100E3BC  +
xor eax eax +
retn   +
***
call sub_100E527  +
jmp ___tmainCRTStartup  +
***
cmp ecx dword_101C8C0 +
jnz loc_100E143  +
retn 0  +
jmp loc_100E5BD  +
***
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb cs20  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp+0] eax +
retn   +
sub eax 1000h +
test [eax] eax +
jmp cs10  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_100E1EC  +
cmp dword ptr [eax+10h] 3 +
jnz loc_100E1EC  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_100E1E6  +
cmp eax 19930521h +
jz loc_100E1E6  +
cmp eax 19930522h +
jz loc_100E1E6  +
cmp eax 1994000h +
jnz loc_100E1EC  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset dword_100E1AC+3)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_100E236  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_100E232  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_100E29D  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_100E295  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_100E29F  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_100E285  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_100E220  +
pop ecx  +
test eax eax +
jz loc_100E306  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_100E260  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100E306  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_100E30F  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_100E138  +
push offset dword_101C8C0  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
pop ecx  +
retn   +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
call sub_100E3DC  +
neg eax  +
sbb eax eax +
neg eax  +
pop ecx  +
dec eax  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100E4DB  +
cmp ecx 0FFFFFFFFh +
jz loc_100E4DB  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_100E4D4  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_100E4D4  +
cmp edx 10000000h +
jnb loc_100E4D4  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_100E4D4  +
jmp loc_100E4CF  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_100E51D  +
push eax  +
call sub_100E482  +
test eax eax +
jz loc_100E51D  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_100E512  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_100E51D  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_101C8C0 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_100E559  +
test eax ebx +
jz loc_100E559  +
not eax  +
mov dword_101C8C4 eax +
jmp loc_100E5B4  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_100E5A0  +
test dword_101C8C0 ebx +
jnz loc_100E5A5  +
mov esi 0BB40E64Fh +
mov dword_101C8C0 esi +
not esi  +
mov dword_101C8C4 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_10200D0 eax +
mov dword_10200CC ecx +
mov dword_10200C8 edx +
mov dword_10200C4 ebx +
mov dword_10200C0 esi +
mov dword_10200BC edi +
mov word_10200E8 ss +
mov word_10200DC cs +
mov word_10200B8 ds +
mov word_10200B4 es +
mov word_10200B0 fs +
mov word_10200AC gs +
pushf   +
pop dword_10200E0  +
mov eax [ebp+0] +
mov dword_10200D4 eax +
mov eax [ebp+4] +
mov dword_10200D8 eax +
lea eax [ebp+8] +
mov dword_10200E4 eax +
mov eax [ebp-320h] +
mov dword_1020020 10001h +
mov eax dword_10200D8 +
mov dword_101FFDC eax +
mov dword_101FFD0 0C0000409h +
mov dword_101FFD4 1 +
mov eax dword_101C8C0 +
mov [ebp-328h] eax +
mov eax dword_101C8C4 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_10182EE  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+lpDst] +
push esi  +
mov esi [ebp+nSize] +
push edi  +
xor edi edi +
cmp [ebp+arg_0] edi +
jnz loc_100E71C  +
push esi  +
push ebx  +
push [ebp+lpSrc]  +
call ds:ExpandEnvironmentStringsW  +
mov edi eax +
cmp edi esi +
jbe loc_100E718  +
test esi esi +
jz loc_100E714  +
xor eax eax +
mov [ebx+esi*2-2] ax +
xor edi edi +
jmp loc_100E726  +
test edi edi +
jnz loc_100E726  +
push [ebp+lpSrc]  +
push esi  +
push ebx  +
call sub_100C026  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+nSize]  +
push [ebp+lpDst]  +
push [ebp+lpSrc]  +
push 0  +
call sub_100E6E3  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_8]  +
mov esi eax +
push [ebp+arg_4]  +
xor ebx ebx +
dec esi  +
push esi  +
push edi  +
call ds:_vsnprintf  +
add esp 10h +
test eax eax +
jl loc_100E77E  +
cmp eax esi +
ja loc_100E77E  +
jnz loc_100E788  +
mov [esi+edi] bl +
jmp loc_100E786  +
mov [esi+edi] bl +
mov ebx 8007007Ah +
mov eax esi +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100E791  +
mov [ecx] eax +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_8]  +
mov esi eax +
push [ebp+arg_4]  +
xor ebx ebx +
dec esi  +
push esi  +
push edi  +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_100E7C7  +
cmp eax esi +
ja loc_100E7C7  +
jz loc_100E7CC  +
jmp loc_100E7D4  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
mov eax esi +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100E7DD  +
mov [ecx] eax +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebx  +
mov ebx ecx +
mov eax [ebx] +
push esi  +
mov esi ds:HeapFree +
push edi  +
mov edi ds:GetProcessHeap +
test eax eax +
jz loc_100E80B  +
push eax  +
push 0  +
call edi  +
push eax  +
call esi  +
mov ebx [ebx+4] +
test ebx ebx +
jz loc_100E81A  +
push ebx  +
push 0  +
call edi  +
push eax  +
call esi  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100E7EA  +
test [ebp+arg_0] 1 +
jz loc_100E83D  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_101C8C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
push esi  +
xor esi esi +
mov [ebp+pIdentifierAuthority.Value] bl +
mov [ebp+pIdentifierAuthority.Value+1] bl +
mov [ebp+pIdentifierAuthority.Value+2] bl +
mov [ebp+pIdentifierAuthority.Value+3] bl +
mov [ebp+pIdentifierAuthority.Value+4] bl +
mov [ebp+pIdentifierAuthority.Value+5] 5 +
mov [ebp+pSid] ebx +
call sub_10103BF  +
test eax eax +
jz loc_100E885  +
xor eax eax +
inc eax  +
jmp loc_100E8C5  +
lea eax [ebp+pSid] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 13h  +
push 1  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
call ds:AllocateAndInitializeSid  +
test eax eax +
jz loc_100E8C3  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+pSid]  +
mov [ebp+var_14] ebx +
push ebx  +
call ds:CheckTokenMembership  +
test eax eax +
jz loc_100E8BA  +
mov esi [ebp+var_14] +
push [ebp+pSid]  +
call ds:FreeSid  +
mov eax esi +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100E138  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
cmp [ebp+lpAddress] 0 +
jnz loc_100E8EA  +
xor eax eax +
jmp locret_100E900  +
push 1Ch  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+lpAddress]  +
call ds:VirtualQuery  +
neg eax  +
sbb eax eax +
and eax [ebp+Buffer.AllocationBase] +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+4] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+0B8h] +
pop ebp  +
retn 4  +
***
mov ecx 0C000008Dh +
cmp eax ecx +
ja loc_100E9DF  +
jz loc_100E9D9  +
mov ecx 0C0000006h +
cmp eax ecx +
ja loc_100E998  +
jz loc_100E992  +
cmp eax 80000001h +
jz loc_100E98C  +
cmp eax 80000002h +
jz loc_100E986  +
cmp eax 80000003h +
jz loc_100E980  +
cmp eax 80000004h +
jz loc_100E97A  +
cmp eax 0C0000005h +
jnz loc_100EA37  +
mov eax offset aAccess_violati +
retn   +
mov eax offset aSingle_step +
retn   +
mov eax offset aBreakpoint +
retn   +
mov eax offset aDatatype_misal +
retn   +
mov eax offset aGuard_page +
retn   +
mov eax offset aIn_page_error +
retn   +
cmp eax 0C0000008h +
jz loc_100E9D3  +
cmp eax 0C000001Dh +
jz loc_100E9CD  +
cmp eax 0C0000025h +
jz loc_100E9C7  +
cmp eax 0C0000026h +
jz loc_100E9C1  +
cmp eax 0C000008Ch +
jnz loc_100EA37  +
mov eax offset aArray_bounds_e +
retn   +
mov eax offset aInvalid_dispos +
retn   +
mov eax offset aNoncontinuable +
retn   +
mov eax offset aIllegal_instru +
retn   +
mov eax offset aInvalid_handle +
retn   +
mov eax offset aFlt_denormal_o +
retn   +
mov ecx 0C00000FDh +
cmp eax ecx +
ja loc_100EA37  +
jz loc_100EA31  +
add eax 3FFFFF72h +
cmp eax 8 +
ja loc_100EA37  +
jmp ds:off_100EA3F[eax*4]  +
mov eax offset aFlt_divide_by_ +
retn   +
mov eax offset aFlt_inexact_re +
retn   +
mov eax offset aFlt_invalid_op +
retn   +
mov eax offset aFlt_overflow +
retn   +
mov eax offset aFlt_stack_chec +
retn   +
mov eax offset aFlt_underflow +
retn   +
mov eax offset aInt_divide_by_ +
retn   +
mov eax offset aInt_overflow +
retn   +
mov eax offset aPriv_instructi +
retn   +
mov eax offset aStack_overflow +
retn   +
mov eax offset aUnknown +
retn   +
***
call __SEH_prolog4  +
cmp [ebp-20h] edi +
jnz locret_100EB90  +
cmp dword ptr [ebp-1Ch] 0FFFFFFFFh +
jz loc_100EB76  +
push dword ptr [ebp-1Ch]  +
call dword_102033C  +
cmp ebx 0FFFFFFFFh +
jz locret_100EB90  +
push ebx  +
call dword_102033C  +
cmp ebx 0FFFFFFFFh +
jz locret_100EB90  +
push dword ptr [ebp+0Ch]  +
call dword_1020374  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpBaseAddress] 0 +
jz loc_100EBAA  +
push [ebp+lpBaseAddress]  +
call ds:UnmapViewOfFile  +
cmp [ebp+arg_8] 0 +
jz loc_100EBB9  +
push [ebp+arg_8]  +
call dword_102033C  +
cmp [ebp+arg_0] 0FFFFFFFFh +
jz loc_100EBC8  +
push [ebp+arg_0]  +
call dword_102033C  +
cmp [ebp+arg_C] 0 +
jz loc_100EBD7  +
push [ebp+arg_C]  +
call dword_1020374  +
pop ebp  +
retn 10h  +
***
call __SEH_prolog4  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
and eax 0C0000h +
or dword_10202F4 eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
fldz   +
lea eax [ebp+SystemTime] +
push eax  +
fstp  [ebp+pvtime] +
call ds:GetLocalTime  +
lea eax [ebp+pvtime] +
push eax  +
lea eax [ebp+SystemTime] +
push eax  +
call ds:SystemTimeToVariantTime  +
test eax eax +
jnz loc_100EC90  +
fldz   +
leave   +
retn   +
fld  [ebp+pvtime] +
leave   +
retn   +
***
call __SEH_prolog4  +
push edi  +
push dwTlsIndex  +
call ds:TlsSetValue  +
push esi  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
xor esi esi +
push offset CriticalSection  +
call ds:LeaveCriticalSection  +
mov eax esi +
call __SEH_epilog4  +
retn   +
***
mov eax [ecx] +
test eax eax +
jz locret_100EDF2  +
push eax  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
mov edi ecx +
cmp [edi+8] ebx +
jb loc_100EE11  +
xor eax eax +
mov [edi+4] ebx +
inc eax  +
jmp loc_100EE5A  +
mov eax [edi] +
push esi  +
mov esi [edi+0Ch] +
add esi ebx +
test eax eax +
jz loc_100EE35  +
mov ecx esi +
shl ecx 2 +
push ecx  +
push eax  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapReAlloc  +
jmp loc_100EE4A  +
mov eax esi +
shl eax 2 +
push eax  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
test eax eax +
jz loc_100EE59  +
mov [edi] eax +
xor eax eax +
mov [edi+8] esi +
mov [edi+4] ebx +
inc eax  +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_100EE7B  +
cmp ecx 7FFFFFFFh +
jbe loc_100EE80  +
mov eax 80070057h +
test eax eax +
jl loc_100EEC4  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_100EEB7  +
mov edx [ebp+arg_8] +
push edi  +
mov edi 7FFFFFFEh +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_100EEB2  +
mov cl [edx+eax] +
test cl cl +
jz loc_100EEB2  +
mov [eax] cl +
inc eax  +
dec esi  +
jnz loc_100EE9E  +
pop edi  +
test esi esi +
jnz loc_100EEBD  +
dec eax  +
mov ebx 8007007Ah +
mov byte ptr [eax] 0 +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_100EEE2  +
cmp [ebp+arg_4] 7FFFFFFFh +
jbe loc_100EEE7  +
mov eax 80070057h +
test eax eax +
jl loc_100EF00  +
mov eax [ebp+arg_4] +
push edi  +
push [ebp+arg_C]  +
mov edi [ebp+arg_0] +
push [ebp+arg_8]  +
push 0  +
call sub_100E752  +
pop edi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_100EF1E  +
cmp [ebp+arg_4] 7FFFFFFFh +
jbe loc_100EF23  +
mov eax 80070057h +
test eax eax +
jl loc_100EF3C  +
mov eax [ebp+arg_4] +
push edi  +
push [ebp+arg_C]  +
mov edi [ebp+arg_0] +
push [ebp+arg_8]  +
push 0  +
call sub_100E79E  +
pop edi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_100EF5A  +
cmp [ebp+arg_4] 7FFFFFFFh +
jbe loc_100EF5F  +
mov eax 80070057h +
test eax eax +
jl loc_100EF79  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
push 0  +
call sub_100E752  +
pop edi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 414h +
mov eax dword_101C8C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
xor eax eax +
mov esi 206h +
push esi  +
push eax  +
mov [ebp+PathName] ax +
lea eax [ebp-20Ah] +
push eax  +
call memset  +
xor eax eax +
push esi  +
push eax  +
mov [ebp+TempFileName] ax +
lea eax [ebp-412h] +
push eax  +
call memset  +
add esp 18h +
lea eax [ebp+PathName] +
push eax  +
mov esi 104h +
push esi  +
call ds:GetTempPathW  +
test eax eax +
jz loc_100EFFD  +
cmp eax esi +
ja loc_100EFFD  +
lea eax [ebp+PathName] +
push eax  +
call ds:GetFileAttributesW  +
cmp eax 0FFFFFFFFh +
jnz loc_100F013  +
push esi  +
lea eax [ebp+PathName] +
push eax  +
call ds:GetWindowsDirectoryW  +
test eax eax +
jnz loc_100F013  +
xor eax eax +
jmp loc_100F04B  +
lea eax [ebp+TempFileName] +
push eax  +
push 0  +
push offset PrefixString  +
lea eax [ebp+PathName] +
push eax  +
call ds:GetTempFileNameW  +
test eax eax +
jz loc_100F00F  +
lea eax [ebp+TempFileName] +
push eax  +
push [ebp+arg_0]  +
push edi  +
call sub_100C026  +
xor ecx ecx +
test eax eax +
setnl cl  +
mov eax ecx +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100E138  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
xor esi esi +
mov [ebp+lpMem] esi +
cmp dword_10202EC esi +
jnz loc_100F07D  +
xor eax eax +
jmp loc_100F19A  +
push ebx  +
call ds:GetLastError  +
mov [ebp+dwErrCode] eax +
call sub_100EC9A  +
mov ebx eax +
cmp ebx esi +
jz loc_100F18E  +
mov eax [ebp+arg_0] +
mov ecx eax +
and ecx 0FF000000h +
mov [ebx] ecx +
mov [ebx+4] eax +
cmp dword ptr [ebp+arg_4] esi +
jz loc_100F185  +
test dword ptr [ebp+arg_4] 0FFFF0000h +
mov [ebp+hMem] esi +
jnz loc_100F0F3  +
lea eax [ebp+Arguments] +
push eax  +
push esi  +
lea eax [ebp+hMem] +
push eax  +
movzx eax word ptr [ebp+arg_4] +
push 400h  +
push eax  +
push lpSource  +
push 900h  +
call ds:FormatMessageW  +
test eax eax +
jnz loc_100F0EC  +
mov dword ptr [ebp+arg_4] offset aLogFailedToGet +
jmp loc_100F0F3  +
mov eax [ebp+hMem] +
cmp eax esi +
jnz loc_100F14D  +
mov eax dword ptr [ebp+arg_4] +
lea esi [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_100F0F9  +
sub eax esi +
push edi  +
lea esi [eax+1] +
lea edi [esi+esi] +
push edi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+lpMem] eax +
test eax eax +
jz loc_100F145  +
push dword ptr [ebp+arg_4]  +
push offset aS  +
push esi  +
push eax  +
call sub_100C0F1  +
add esp 10h +
test eax eax +
jge loc_100F140  +
mov ecx [ebp+lpMem] +
xor eax eax +
mov [edi+ecx-2] ax +
mov eax [ebp+lpMem] +
jmp loc_100F14A  +
mov eax offset aConstructparti +
xor esi esi +
pop edi  +
push [ebp+Arguments]  +
push eax  +
mov eax [ebx+0Ch] +
shr eax 1 +
push eax  +
push dword ptr [ebx+8]  +
call sub_100EF09  +
cmp [ebp+lpMem] esi +
jz loc_100F175  +
push [ebp+lpMem]  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp [ebp+hMem] esi +
jz loc_100F18E  +
push [ebp+hMem]  +
call ds:LocalFree  +
jmp loc_100F18E  +
mov eax [ebx+8] +
push 30h  +
pop ecx  +
mov [eax] cx +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
mov eax ebx +
pop ebx  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100EDDC  +
test [ebp+arg_0] 1 +
jz loc_100F1C8  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
test eax eax +
jz loc_100F1FB  +
mov ecx [eax+4] +
test ecx ecx +
jz loc_100F1FB  +
mov eax [eax] +
mov eax [eax+ecx*4-4] +
test eax eax +
jz loc_100F1FB  +
mov eax [eax] +
test eax eax +
jnz locret_100F200  +
mov eax offset aDef +
retn   +
***
test eax eax +
jz loc_100F23F  +
mov ecx [eax+4] +
test ecx ecx +
jz loc_100F23F  +
mov eax [eax] +
mov eax [eax+ecx*4-4] +
test eax eax +
jz loc_100F23F  +
mov ecx [eax+0Ch] +
test ecx ecx +
jz loc_100F23F  +
mov eax [eax+8] +
mov eax [eax+ecx*4-4] +
test eax eax +
jz loc_100F23F  +
mov eax [eax] +
test eax eax +
jnz locret_100F244  +
mov eax offset aDef +
retn   +
***
mov eax [ecx+4] +
test eax eax +
jnz loc_100F252  +
retn   +
mov edx [ecx] +
push esi  +
mov esi [edx+eax*4-4] +
test eax eax +
jz loc_100F264  +
dec eax  +
push eax  +
call sub_100EDF8  +
mov eax esi +
pop esi  +
retn   +
***
call __EH_prolog3  +
mov edi ecx +
mov [ebp-10h] edi +
mov dword ptr [ebp-4] 1 +
lea esi [edi+8] +
jmp loc_100F293  +
push 1  +
mov ecx eax +
call sub_100E823  +
mov ecx esi +
call sub_100F24A  +
test eax eax +
jnz loc_100F28A  +
mov ecx esi +
call sub_100EDDC  +
mov ecx edi +
call sub_100E7EA  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100F26D  +
test [ebp+arg_0] 1 +
jz loc_100F2D1  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 234h +
mov eax dword_101C8C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
and [ebp+lpMem] 0 +
and [ebp+var_218] 0 +
mov [ebp+var_230] eax +
mov eax [ebp+arg_C] +
mov dword ptr [ebp+var_224] eax +
mov eax [ebp+arg_18] +
push ebx  +
mov ebx [ebp+arg_0] +
mov [ebp+var_228] eax +
mov eax [ebp+arg_1C] +
push esi  +
mov [ebp+lpAddress] eax +
mov eax [ebp+arg_24] +
push edi  +
mov [ebp+var_234] eax +
call ds:GetLastError  +
push 5  +
pop ecx  +
mov esi offset aUnknown +
lea edi [ebp+var_20C] +
movs   +
push 1F4h  +
mov [ebp+dwErrCode] eax +
xor edi edi +
lea eax [ebp+var_1F8] +
push edi  +
push eax  +
call memset  +
add esp 0Ch +
mov [ebp+var_214] edi +
mov [ebp+var_21C] edi +
cmp dword_10202EC edi +
jz loc_100F55B  +
cmp ebx edi +
jz loc_100F55B  +
mov eax [ebp+arg_4] +
or [ebx+4] eax +
mov eax dword ptr [ebp+var_224] +
cmp eax edi +
jz loc_100F43D  +
lea esi [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_100F39D  +
sub eax esi +
lea esi [eax+1] +
lea edi [esi+esi] +
push edi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+lpMem] eax +
test eax eax +
jz loc_100F3F8  +
push dword ptr [ebp+var_224]  +
push offset aS  +
push esi  +
push eax  +
call sub_100C0F1  +
add esp 10h +
test eax eax +
jge loc_100F3EC  +
mov ecx [ebp+lpMem] +
xor eax eax +
mov [edi+ecx-2] ax +
mov eax [ebp+lpMem] +
mov [ebp+var_218] eax +
xor edi edi +
cmp [ebp+lpAddress] edi +
jz loc_100F451  +
push [ebp+lpAddress]  +
call sub_100E8D8  +
cmp eax edi +
jz loc_100F445  +
push 104h  +
lea ecx [ebp+var_20C] +
push ecx  +
push eax  +
call dword_1020360  +
lea eax [ebp+var_20C] +
push 5Ch  +
push eax  +
call ds:wcsrchr  +
pop ecx  +
pop ecx  +
cmp eax edi +
jz loc_100F445  +
inc eax  +
inc eax  +
jmp loc_100F44B  +
mov [ebp+var_218] edi +
jmp loc_100F3FA  +
lea eax [ebp+var_20C] +
mov [ebp+var_214] eax +
mov esi [ebx] +
mov eax 65000000h +
cmp esi eax +
jz loc_100F460  +
cmp esi edi +
jnz loc_100F498  +
test dword_10202F4 80000h +
jz loc_100F482  +
xor ecx ecx +
cmp esi eax +
setnz cl  +
dec ecx  +
and ecx 69000000h +
add ecx 2000000h +
mov [ebx] ecx +
test dword_10202F4 40000h +
jz loc_100F498  +
mov [ebp+var_21C] 1 +
mov eax dword_10202EC +
mov esi [eax] +
call sub_100EC63  +
push ecx  +
push ecx  +
fstp  [esp+248h+var_248] +
push [ebp+arg_28]  +
push [ebp+var_234]  +
push [ebp+arg_20]  +
push [ebp+var_214]  +
push offset aUnknown_0  +
push [ebp+var_218]  +
call ds:GetCurrentThreadId  +
push eax  +
push dword_10202FC  +
push dword ptr [ebx+8]  +
push dword ptr [ebx+4]  +
push [ebp+var_228]  +
push edi  +
push [ebp+arg_10]  +
call sub_100F206  +
push eax  +
call sub_100F1D4  +
push eax  +
push dword ptr [ebx]  +
push [ebp+var_230]  +
push 11h  +
push dword_10202EC  +
call dword ptr [esi+14h]  +
add esp 54h +
mov esi eax +
cmp [ebp+lpMem] edi +
jz loc_100F523  +
push [ebp+lpMem]  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp esi 4 +
jnz loc_100F534  +
call sub_100FA3D  +
push edi  +
call ds:ExitProcess  +
cmp [ebp+var_21C] edi +
jz loc_100F54B  +
push edi  +
push edi  +
push 1  +
push 0C0000025h  +
call ds:RaiseException  +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
mov eax esi +
jmp loc_100F55D  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100E138  +
leave   +
retn 2Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 434h +
mov eax dword_101C8C0 +
xor eax ebp +
mov [ebp+var_4] eax +
or [ebp+var_42C] 0FFFFFFFFh +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
xor eax eax +
push 5  +
pop ecx  +
push 1F4h  +
push eax  +
mov [ebp+var_434] eax +
mov [ebp+var_428] eax +
mov [ebp+lpBaseAddress] eax +
mov dword ptr [ebp+Arguments] eax +
mov [ebp+lpAddress] eax +
mov dword ptr [ebp+var_418] eax +
lea eax [ebp+var_400] +
mov esi offset aUnknown +
lea edi [ebp+var_414] +
push eax  +
movs   +
call memset  +
xor eax eax +
push 206h  +
push eax  +
mov word ptr [ebp+var_20C] ax +
lea eax [ebp+var_20C+2] +
push eax  +
call memset  +
add esp 18h +
cmp dword_1020300 0 +
mov edi 104h +
jz loc_100F642  +
lea eax [ebp+var_20C] +
push eax  +
push edi  +
call sub_100EF80  +
test eax eax +
jz loc_100F642  +
lea eax [ebp+var_428] +
push eax  +
lea eax [ebp+var_434] +
push eax  +
lea eax [ebp+var_42C] +
push eax  +
lea eax [ebp+var_20C] +
push eax  +
push ebx  +
call sub_100EA68  +
mov [ebp+lpBaseAddress] eax +
test ebx ebx +
jz loc_100F687  +
mov eax [ebx] +
test eax eax +
jz loc_100F65D  +
mov ecx [eax] +
mov eax [eax+0Ch] +
mov dword ptr [ebp+Arguments] ecx +
mov [ebp+lpAddress] eax +
push [ebp+lpAddress]  +
call sub_100E8D8  +
mov esi eax +
test esi esi +
jz loc_100F687  +
push edi  +
lea eax [ebp+var_414] +
push eax  +
push esi  +
call dword_1020360  +
mov edi [ebp+lpAddress] +
sub edi esi +
jmp loc_100F68D  +
mov edi dword ptr [ebp+var_418] +
cmp [ebp+lpBaseAddress] 0 +
mov dword ptr [ebp+var_418] offset aExceptionCode0 +
jnz loc_100F6AA  +
mov dword ptr [ebp+var_418] offset aExceptionCod_0 +
push [ebp+var_434]  +
mov eax [ebx+4] +
push [ebp+lpBaseAddress]  +
mov esi [eax+0B8h] +
call ds:GetLastError  +
push eax  +
push esi  +
push offset aWdslogstructur  +
push offset aUnknown  +
push 0  +
push offset word_1006BC2  +
push offset aD  +
push 90000h  +
push [ebp+var_434]  +
lea eax [ebp+var_414] +
push edi  +
push eax  +
push [ebp+lpAddress]  +
mov eax dword ptr [ebp+Arguments] +
call sub_100E92F  +
push eax  +
push dword ptr [ebp+Arguments]  +
push dword ptr [ebp+var_418]  +
push 1000001h  +
call sub_100B725  +
add esp 20h +
push eax  +
call sub_100F2DD  +
cmp [ebp+lpBaseAddress] 0 +
pop edi  +
pop esi  +
pop ebx  +
jz loc_100F74B  +
lea eax [ebp+var_20C] +
push eax  +
push [ebp+var_428]  +
push [ebp+lpBaseAddress]  +
push [ebp+var_42C]  +
call sub_100EB96  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_100E138  +
leave   +
retn 4  +
***
call __SEH_prolog4  +
mov eax lpTopLevelExceptionFilter +
mov [ebp+var_1C] eax +
and [ebp+ms_exc.disabled] 0 +
push [ebp+arg_0]  +
call sub_100F573  +
jmp loc_100F787  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
call sub_100FA3D  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
cmp [ebp+var_1C] 0 +
jz loc_100F7A1  +
push [ebp+arg_0]  +
call [ebp+var_1C]  +
jmp loc_100F7A3  +
xor eax eax +
call __SEH_epilog4  +
retn 4  +
***
push 218h  +
push offset dword_10188E0  +
call __SEH_prolog4_GS  +
mov ebx [ebp+8] +
push 5  +
pop ecx  +
mov esi offset aUnknown +
lea edi [ebp-224h] +
movs   +
push 1F4h  +
xor edi edi +
push edi  +
lea eax [ebp-210h] +
push eax  +
call memset  +
add esp 0Ch +
cmp dword_102032C edi +
jnz loc_100F8DD  +
mov dword_102032C 1 +
mov [ebp-4] edi +
cmp ebx edi +
jz loc_100F8BE  +
mov eax [ebx] +
cmp eax edi +
jz loc_100F8BE  +
mov esi [eax] +
mov eax [eax+0Ch] +
mov [ebp-228h] eax +
cmp esi 80000001h +
jz loc_100F8BE  +
cmp esi 80000003h +
jz loc_100F8BE  +
cmp esi 80000004h +
jz loc_100F8BE  +
cmp esi 0C0000008h +
jz loc_100F8BE  +
push eax  +
call sub_100E8D8  +
cmp eax edi +
jz loc_100F864  +
push 104h  +
lea ecx [ebp-224h] +
push ecx  +
push eax  +
call dword_1020360  +
push edi  +
push edi  +
call ds:GetLastError  +
push eax  +
push dword ptr [ebx+4]  +
call sub_100E918  +
push eax  +
push offset aWdsvectoredexc  +
push offset aUnknown  +
push edi  +
push offset word_1006BC2  +
push offset aD  +
push 90000h  +
lea eax [ebp-224h] +
push eax  +
push dword ptr [ebp-228h]  +
mov eax esi +
call sub_100E92F  +
push eax  +
push esi  +
push offset aExceptionCod_1  +
push 3000002h  +
call sub_100B725  +
add esp 18h +
push eax  +
call sub_100F2DD  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
jmp loc_100F8D7  +
xor eax eax +
inc eax  +
retn   +
***
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
xor edi edi +
mov dword_102032C edi +
xor eax eax +
call __SEH_epilog4_GS  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
xor ebx ebx +
cmp dword_10202F0 ebx +
jbe loc_100FA1F  +
dec dword_10202F0  +
jnz loc_100FA1F  +
mov eax dword_10202EC +
push esi  +
mov esi ds:SetUnhandledExceptionFilter +
push edi  +
mov edi offset TopLevelExceptionFilter +
push edi  +
mov [ebp+var_8] eax +
mov dword_10202EC ebx +
call esi  +
cmp eax edi +
jnz loc_100F935  +
mov eax lpTopLevelExceptionFilter +
push eax  +
call esi  +
push dwTlsIndex  +
mov esi ds:TlsFree +
mov lpTopLevelExceptionFilter ebx +
call esi  +
push dword_101CCF4  +
or dwTlsIndex 0FFFFFFFFh +
call ds:TlsGetValue  +
mov edi eax +
cmp edi ebx +
jz loc_100F982  +
jmp loc_100F96E  +
mov ecx eax +
call sub_100F2B7  +
mov ecx edi +
call sub_100F24A  +
push 1  +
cmp eax ebx +
jnz loc_100F967  +
mov ecx edi +
call sub_100F1AE  +
push dword_101CCF4  +
call esi  +
or dword_101CCF4 0FFFFFFFFh +
push offset CriticalSection  +
call ds:EnterCriticalSection  +
mov eax lpMem +
cmp eax ebx +
jz loc_100F9FA  +
mov esi ds:HeapFree +
mov edi ds:GetProcessHeap +
xor ecx ecx +
mov [ebp+var_4] ecx +
cmp dword_102030C ebx +
jbe loc_100F9E1  +
lea ecx [eax+ecx*4] +
cmp [ecx] ebx +
jz loc_100F9D2  +
push dword ptr [ecx]  +
push ebx  +
call edi  +
push eax  +
call esi  +
mov eax lpMem +
mov ecx [ebp+var_4] +
inc ecx  +
mov [ebp+var_4] ecx +
cmp ecx dword_102030C +
jb loc_100F9BE  +
push eax  +
push ebx  +
call edi  +
push eax  +
call esi  +
mov lpMem ebx +
mov dword_102030C ebx +
mov dword_1020310 ebx +
push offset CriticalSection  +
call ds:LeaveCriticalSection  +
pop edi  +
pop esi  +
cmp [ebp+var_8] ebx +
jz loc_100FA14  +
push [ebp+var_8]  +
call sub_101312E  +
mov dword_10202F4 ebx +
call sub_1011796  +
mov eax dword_10202F0 +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
call sub_100F8EC  +
test eax eax +
ja loc_100FA2E  +
retn   +
***
call __SEH_prolog4  +
push dword ptr [ebp-1Ch]  +
call dword_102033C  +
retn   +
***
mov edi edi +
xor edi edi +
cmp [ebp-0F74h] edi +
jnz loc_1010383  +
mov dword_10202EC ebx +
cmp [ebp-0F64h] edi +
jnz loc_1010383  +
call sub_100FA3D  +
push dword ptr [ebp-0F5Ch]  +
call dword_1020334  +
push dword ptr [ebp-0F5Ch]  +
call dword_102033C  +
retn   +
***
call sub_1013227  +
call sub_100FA2C  +
jmp loc_10131BD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_101C8C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
lea eax [ebp+pSid] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 220h  +
push 20h  +
push 2  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
xor edi edi +
xor esi esi +
mov [ebp+pIdentifierAuthority.Value] bl +
mov [ebp+pIdentifierAuthority.Value+1] bl +
mov [ebp+pIdentifierAuthority.Value+2] bl +
mov [ebp+pIdentifierAuthority.Value+3] bl +
mov [ebp+pIdentifierAuthority.Value+4] bl +
mov [ebp+pIdentifierAuthority.Value+5] 5 +
mov [ebp+pSid] ebx +
call ds:AllocateAndInitializeSid  +
test eax eax +
jz loc_101043E  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+pSid]  +
mov [ebp+var_14] ebx +
push ebx  +
call ds:CheckTokenMembership  +
test eax eax +
jz loc_101042B  +
mov edi [ebp+var_14] +
jmp loc_1010433  +
call ds:GetLastError  +
mov esi eax +
push [ebp+pSid]  +
call ds:FreeSid  +
jmp loc_1010446  +
call ds:GetLastError  +
mov esi eax +
push esi  +
call ds:SetLastError  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100E138  +
leave   +
retn   +
***
mov eax ecx +
xor ecx ecx +
mov [eax] ecx +
mov [eax+4] ecx +
mov [eax+8] ecx +
retn   +
***
call __SEH_prolog4_GS  +
cmp [ebp-3Ch] ebx +
jz loc_10106E0  +
push dword ptr [ebp-3Ch]  +
call ds:FreeSid  +
mov [ebp-3Ch] ebx +
cmp [ebp-34h] ebx +
jz loc_10106F1  +
push dword ptr [ebp-34h]  +
call ds:FreeSid  +
mov [ebp-34h] ebx +
cmp [ebp-30h] ebx +
jz loc_1010702  +
push dword ptr [ebp-30h]  +
call ds:FreeSid  +
mov [ebp-30h] ebx +
cmp [ebp-2Ch] ebx +
jz loc_1010713  +
push dword ptr [ebp-2Ch]  +
call ds:CloseHandle  +
mov [ebp-2Ch] ebx +
cmp [ebp-38h] ebx +
jz locret_101072C  +
push dword ptr [ebp-38h]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov [ebp-38h] ebx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpMem] 0 +
jz loc_101074F  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:ReleaseMutex  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:WaitForSingleObject  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
push eax  +
push eax  +
push eax  +
push 0F001Fh  +
push dword ptr [ebp+8]  +
call ds:MapViewOfFile  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:UnmapViewOfFile  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov ecx [ebp+10h] +
mov eax [ebp+0Ch] +
push esi  +
push dword ptr [ebp+14h]  +
mov [ebp-4] ecx +
lea ecx [ebp-4] +
push ecx  +
push eax  +
push dword ptr [ebp+8]  +
xor esi esi +
inc esi  +
mov [ebp-8] eax +
call ds:SetFilePointer  +
mov [ebp-8] eax +
cmp eax 0FFFFFFFFh +
jnz loc_10107E8  +
call ds:GetLastError  +
test eax eax +
jz loc_10107E8  +
xor esi esi +
mov eax esi +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call ds:WriteFile  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_1018316  +
***
xor eax eax +
retn 1Ch  +
***
xor eax eax +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push edi  +
lea eax [ebp-20h] +
push eax  +
xor esi esi +
call sub_1010475  +
mov edi eax +
test edi edi +
jz loc_1010868  +
and [ebp-4] esi +
lea eax [ebp-20h] +
mov dword ptr [ebp-0Ch] 0Ch +
mov [ebp-8] eax +
lea esi [ebp-0Ch] +
push dword ptr [ebp+8]  +
push dword ptr [ebp+0Ch]  +
push esi  +
call ds:CreateMutexW  +
push edi  +
mov esi eax +
call sub_1010732  +
test esi esi +
jnz loc_1010885  +
xor eax eax +
jmp loc_10108A3  +
call ds:GetLastError  +
cmp eax 0B7h +
jnz loc_10108A1  +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_10108A1  +
push 0FFFFFFFFh  +
push esi  +
call ds:WaitForSingleObject  +
mov eax esi +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push edi  +
lea eax [ebp-20h] +
push eax  +
xor esi esi +
call sub_1010475  +
mov edi eax +
test edi edi +
jz loc_10108DC  +
and [ebp-4] esi +
lea eax [ebp-20h] +
mov dword ptr [ebp-0Ch] 0Ch +
mov [ebp-8] eax +
lea esi [ebp-0Ch] +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push 0  +
push 8000004h  +
push esi  +
push 0FFFFFFFFh  +
call ds:CreateFileMappingW  +
push edi  +
mov esi eax +
call sub_1010732  +
test esi esi +
jnz loc_1010902  +
xor eax eax +
jmp loc_101091D  +
mov edi [ebp+10h] +
test edi edi +
jz loc_101091B  +
call ds:GetLastError  +
sub eax 0B7h +
neg eax  +
sbb eax eax +
inc eax  +
mov [edi] eax +
mov eax esi +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push edi  +
xor esi esi +
xor edi edi +
cmp [ebp+18h] esi +
jnz loc_101095D  +
lea eax [ebp-20h] +
push eax  +
call sub_1010475  +
mov edi eax +
test edi edi +
jz loc_101095D  +
and [ebp-4] esi +
lea eax [ebp-20h] +
mov dword ptr [ebp-0Ch] 0Ch +
mov [ebp-8] eax +
lea esi [ebp-0Ch] +
push 0  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push esi  +
push dword ptr [ebp+0Ch]  +
push 0C0000000h  +
push dword ptr [ebp+8]  +
call ds:CreateFileW  +
push edi  +
mov esi eax +
call sub_1010732  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:GetModuleFileNameA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:GetModuleFileNameW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:CreateFileW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:CreateFileMappingW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:DeleteFileW  +
***
cmp dword_101F190 0 +
jz loc_1010A06  +
and dword_101F190 0 +
call ds:GetVersion  +
cmp eax 80000000h +
sbb eax eax +
neg eax  +
mov dword_102037C eax +
retn   +
mov eax dword_102037C +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
lea eax [ebp-24h] +
push eax  +
call ds:GetSystemInfo  +
mov eax [ebp-10h] +
leave   +
retn   +
***
push ebp  +
mov ebp esp +
mov ecx [ebp+0Ch] +
xor eax eax +
test ecx ecx +
jz loc_1010A43  +
cmp ecx 7FFFFFFFh +
jbe loc_1010A48  +
mov eax 80070057h +
test eax eax +
jl loc_1010A85  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+8] +
lea eax [ebp+14h] +
push eax  +
push dword ptr [ebp+10h]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnprintf  +
add esp 10h +
test eax eax +
jl loc_1010A78  +
cmp eax esi +
ja loc_1010A78  +
jnz loc_1010A80  +
mov [esi+edi] bl +
jmp loc_1010A80  +
mov [esi+edi] bl +
mov ebx 8007007Ah +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
push 30h  +
mov eax offset dword_101839C +
call __EH_prolog3  +
xor esi esi +
mov [ebp-10h] esi +
mov [ebp-1Ch] esi +
mov [ebp-18h] esi +
mov [ebp-14h] esi +
mov eax [ebp+8] +
mov [ebp-4] esi +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx si +
jnz loc_1010AAF  +
sub eax ecx +
sar eax 1 +
add eax 2 +
push eax  +
lea ecx [ebp-1Ch] +
call sub_10132AF  +
mov edi eax +
cmp edi esi +
jnz loc_1010AE1  +
lea ecx [ebp-1Ch] +
call sub_100EDDC  +
xor eax eax +
call __EH_epilog3  +
retn 8  +
***
push dword ptr [ebp+8]  +
push offset aS_1  +
push dword ptr [ebp-14h]  +
push edi  +
call near ptr byte_1010A2C+1  +
add esp 10h +
test eax eax +
jl loc_1010ACF  +
lea eax [ebp-3Ch] +
push eax  +
call sub_1010475  +
mov ebx eax +
cmp ebx esi +
jz loc_1010B1D  +
lea eax [ebp-3Ch] +
mov [ebp-24h] eax +
mov dword ptr [ebp-28h] 0Ch +
mov [ebp-20h] esi +
lea eax [ebp-28h] +
jmp loc_1010B20  +
mov eax [ebp-10h] +
push edi  +
push dword ptr [ebp+0Ch]  +
push eax  +
call ds:CreateMutexA  +
push ebx  +
mov edi eax +
call sub_1010732  +
cmp edi esi +
jnz loc_1010B43  +
lea ecx [ebp-1Ch] +
call sub_100EDDC  +
mov eax esi +
jmp loc_1010AD9  +
***
call ds:GetLastError  +
cmp eax 0B7h +
jnz loc_1010B5E  +
cmp [ebp+0Ch] esi +
jz loc_1010B5E  +
push 0FFFFFFFFh  +
push edi  +
call ds:WaitForSingleObject  +
mov esi edi +
jmp loc_1010B37  +
***
push 30h  +
mov eax offset dword_101839C +
call __EH_prolog3  +
xor esi esi +
mov [ebp-10h] esi +
mov [ebp-1Ch] esi +
mov [ebp-18h] esi +
mov [ebp-14h] esi +
mov eax [ebp+0Ch] +
mov [ebp-4] esi +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx si +
jnz loc_1010B8A  +
sub eax ecx +
sar eax 1 +
add eax 2 +
push eax  +
lea ecx [ebp-1Ch] +
call sub_10132AF  +
mov edi eax +
cmp edi esi +
jnz loc_1010BBC  +
lea ecx [ebp-1Ch] +
call sub_100EDDC  +
xor eax eax +
call __EH_epilog3  +
retn 0Ch  +
***
push dword ptr [ebp+0Ch]  +
push offset aS_1  +
push dword ptr [ebp-14h]  +
push edi  +
call near ptr byte_1010A2C+1  +
add esp 10h +
test eax eax +
jl loc_1010BAA  +
lea eax [ebp-3Ch] +
push eax  +
call sub_1010475  +
mov ebx eax +
cmp ebx esi +
jz loc_1010BF8  +
lea eax [ebp-3Ch] +
mov [ebp-24h] eax +
mov dword ptr [ebp-28h] 0Ch +
mov [ebp-20h] esi +
lea eax [ebp-28h] +
jmp loc_1010BFB  +
mov eax [ebp-10h] +
push edi  +
push dword ptr [ebp+8]  +
push esi  +
push 8000004h  +
push eax  +
push 0FFFFFFFFh  +
call ds:CreateFileMappingA  +
push ebx  +
mov edi eax +
call sub_1010732  +
cmp edi esi +
jnz loc_1010C26  +
lea ecx [ebp-1Ch] +
call sub_100EDDC  +
mov eax esi +
jmp loc_1010BB4  +
***
mov ebx [ebp+10h] +
cmp ebx esi +
jz loc_1010C3F  +
call ds:GetLastError  +
sub eax 0B7h +
neg eax  +
sbb eax eax +
inc eax  +
mov [ebx] eax +
mov esi edi +
jmp loc_1010C1A  +
***
push 30h  +
mov eax offset dword_101839C +
call __EH_prolog3  +
xor esi esi +
xor ebx ebx +
mov [ebp-10h] esi +
mov [ebp-1Ch] esi +
mov [ebp-18h] esi +
mov [ebp-14h] esi +
mov eax [ebp+8] +
mov [ebp-4] esi +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx si +
jnz loc_1010C6D  +
sub eax ecx +
sar eax 1 +
add eax 2 +
push eax  +
lea ecx [ebp-1Ch] +
call sub_10132AF  +
mov edi eax +
cmp edi esi +
jnz loc_1010CA0  +
lea ecx [ebp-1Ch] +
call sub_100EDDC  +
or eax 0FFFFFFFFh +
call __EH_epilog3  +
retn 14h  +
***
push dword ptr [ebp+8]  +
push offset aS_1  +
push dword ptr [ebp-14h]  +
push edi  +
call near ptr byte_1010A2C+1  +
add esp 10h +
test eax eax +
jge loc_1010CC7  +
or esi 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call sub_100EDDC  +
mov eax esi +
jmp loc_1010C98  +
***
cmp [ebp+18h] esi +
jnz loc_1010CEF  +
lea eax [ebp-3Ch] +
push eax  +
call sub_1010475  +
mov [ebp-10h] eax +
cmp eax esi +
jz loc_1010CEF  +
lea eax [ebp-3Ch] +
mov dword ptr [ebp-28h] 0Ch +
mov [ebp-24h] eax +
mov [ebp-20h] esi +
lea ebx [ebp-28h] +
push esi  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push ebx  +
push dword ptr [ebp+0Ch]  +
push 0C0000000h  +
push edi  +
call ds:CreateFileA  +
push dword ptr [ebp-10h]  +
mov esi eax +
call sub_1010732  +
jmp loc_1010CBB  +
***
push 0Ch  +
mov eax offset dword_10183C4 +
call __EH_prolog3  +
xor ebx ebx +
mov [ebp-18h] ebx +
mov [ebp-14h] ebx +
mov [ebp-10h] ebx +
mov esi [ebp+10h] +
lea eax [esi+1] +
push eax  +
lea ecx [ebp-18h] +
mov [ebp-4] ebx +
call sub_10132AF  +
mov edi eax +
cmp edi ebx +
jnz loc_1010D58  +
lea ecx [ebp-18h] +
call sub_100EDDC  +
mov eax ebx +
call __EH_epilog3  +
retn 0Ch  +
***
push esi  +
push edi  +
push dword ptr [ebp+8]  +
call ds:GetModuleFileNameA  +
mov ebx eax +
test ebx ebx +
jz loc_1010D46  +
push edi  +
push offset aS  +
push esi  +
push dword ptr [ebp+0Ch]  +
call sub_100C0F1  +
add esp 10h +
test eax eax +
jge loc_1010D46  +
xor ebx ebx +
jmp loc_1010D46  +
***
push 0Ch  +
mov eax offset dword_10183C4 +
call __EH_prolog3  +
xor esi esi +
mov [ebp-18h] esi +
mov [ebp-14h] esi +
mov [ebp-10h] esi +
mov eax [ebp+8] +
mov [ebp-4] esi +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx si +
jnz loc_1010DA8  +
sub eax ecx +
sar eax 1 +
add eax 2 +
push eax  +
lea ecx [ebp-18h] +
call sub_10132AF  +
mov edi eax +
cmp edi esi +
jnz loc_1010DDB  +
lea ecx [ebp-18h] +
call sub_100EDDC  +
or eax 0FFFFFFFFh +
call __EH_epilog3  +
retn 1Ch  +
***
push dword ptr [ebp+8]  +
push offset aS_1  +
push dword ptr [ebp-10h]  +
push edi  +
call near ptr byte_1010A2C+1  +
add esp 10h +
test eax eax +
jge loc_1010E02  +
or esi 0FFFFFFFFh +
lea ecx [ebp-18h] +
call sub_100EDDC  +
mov eax esi +
jmp loc_1010DD3  +
***
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push edi  +
call ds:CreateFileA  +
mov esi eax +
jmp loc_1010DF6  +
***
push 0Ch  +
mov eax offset dword_10183C4 +
call __EH_prolog3  +
xor edi edi +
mov [ebp-18h] edi +
mov [ebp-14h] edi +
mov [ebp-10h] edi +
xor esi esi +
mov [ebp-4] edi +
cmp [ebp+1Ch] edi +
jz loc_1010EA1  +
mov eax [ebp+1Ch] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx di +
jnz loc_1010E4B  +
sub eax edx +
sar eax 1 +
add eax 2 +
push eax  +
lea ecx [ebp-18h] +
call sub_10132AF  +
mov esi eax +
cmp esi edi +
jnz loc_1010E7D  +
lea ecx [ebp-18h] +
call sub_100EDDC  +
xor eax eax +
call __EH_epilog3  +
retn 18h  +
***
push dword ptr [ebp+1Ch]  +
push offset aS_1  +
push dword ptr [ebp-10h]  +
push esi  +
call near ptr byte_1010A2C+1  +
add esp 10h +
test eax eax +
jge loc_1010EA1  +
lea ecx [ebp-18h] +
call sub_100EDDC  +
mov eax edi +
jmp loc_1010E75  +
***
push esi  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call ds:CreateFileMappingA  +
mov edi eax +
jmp loc_1010E95  +
***
push 0Ch  +
mov eax offset dword_10183C4 +
call __EH_prolog3  +
xor edi edi +
mov [ebp-18h] edi +
mov [ebp-14h] edi +
mov [ebp-10h] edi +
mov eax [ebp+8] +
mov [ebp-4] edi +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx di +
jnz loc_1010EE0  +
sub eax ecx +
sar eax 1 +
add eax 2 +
push eax  +
lea ecx [ebp-18h] +
call sub_10132AF  +
mov esi eax +
cmp esi edi +
jnz loc_1010F12  +
lea ecx [ebp-18h] +
call sub_100EDDC  +
xor eax eax +
call __EH_epilog3  +
retn 4  +
***
push dword ptr [ebp+8]  +
push offset aS_1  +
push dword ptr [ebp-10h]  +
push esi  +
call near ptr byte_1010A2C+1  +
add esp 10h +
test eax eax +
jge loc_1010F36  +
lea ecx [ebp-18h] +
call sub_100EDDC  +
mov eax edi +
jmp loc_1010F0A  +
***
push esi  +
call ds:DeleteFileA  +
mov edi eax +
jmp loc_1010F2A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 108h +
mov eax dword_101C8C0 +
xor eax ebp +
mov [ebp+var_4] eax +
cmp dword_1020380 0 +
jnz loc_10110FC  +
mov eax [ebp+arg_0] +
mov dword_1020380 1 +
mov dword_1020378 eax +
call sub_10109E1  +
test eax eax +
jz loc_1010FF5  +
push offset ProcName  +
push offset ModuleName  +
mov dword_1020330 offset loc_101083A +
mov dword_1020340 offset loc_10108AE +
mov dword_102034C offset loc_1010928 +
mov dword_102035C offset loc_101098C +
mov dword_1020360 offset loc_101099D +
mov dword_1020364 offset loc_10109AE +
mov dword_1020370 offset loc_10109BF +
mov dword_1020374 offset loc_10109D0 +
call ds:GetModuleHandleW  +
push eax  +
call ds:GetProcAddress  +
test eax eax +
jz loc_1011045  +
mov dword_102036C eax +
jmp loc_101104F  +
mov dword_1020330 offset loc_1010A8C +
mov dword_1020340 offset loc_1010B67 +
mov dword_102034C offset loc_1010C48 +
mov dword_102035C offset loc_101098C +
mov dword_1020360 offset loc_1010D17 +
mov dword_1020364 offset loc_1010D88 +
mov dword_1020370 offset loc_1010E24 +
mov dword_1020374 offset loc_1010EC0 +
mov dword_102036C offset loc_1010830 +
push 103h  +
lea eax [ebp-107h] +
push 0  +
push eax  +
mov dword_1020334 offset loc_1010758 +
mov dword_1020338 offset loc_1010769 +
mov dword_102033C offset loc_1016A65 +
mov dword_1020344 offset loc_101077A +
mov dword_1020348 offset loc_101079B +
mov dword_1020350 offset loc_10107AC +
mov dword_1020354 offset loc_10107F4 +
mov dword_1020358 offset loc_1010A11 +
mov [ebp+LibFileName] 0 +
call memset  +
add esp 0Ch +
push 104h  +
lea eax [ebp+LibFileName] +
push eax  +
push offset Src  +
call ds:ExpandEnvironmentStringsA  +
test eax eax +
jz loc_10110F2  +
lea eax [ebp+LibFileName] +
push eax  +
call ds:LoadLibraryA  +
mov dword_1020368 offset loc_1010816 +
test eax eax +
jnz loc_10110FC  +
mov dword_1020368 offset loc_1010826 +
mov ecx [ebp+var_4] +
xor eax eax +
xor ecx ebp +
inc eax  +
call sub_100E138  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
and dword ptr [esi+8] 0 +
cmp dword ptr [esi+4] 20000h +
jbe loc_101113C  +
push dword ptr [esi]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
and dword ptr [esi] 0 +
and dword ptr [esi+4] 0 +
pop esi  +
retn   +
***
push 4  +
mov eax offset __ehhandler$?empty@locale@std@@SA?AV12@XZ +
call __EH_prolog3  +
push 20h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_1011174  +
call sub_1013BB9  +
call __EH_epilog3  +
retn   +
***
push 4  +
mov eax offset __ehhandler$?empty@locale@std@@SA?AV12@XZ +
call __EH_prolog3  +
push 14h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_10111A6  +
call sub_10146A2  +
call __EH_epilog3  +
retn   +
***
push 4  +
mov eax offset __ehhandler$?empty@locale@std@@SA?AV12@XZ +
call __EH_prolog3  +
push 18h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_10111D8  +
call sub_1014808  +
call __EH_epilog3  +
retn   +
***
push 2  +
pop eax  +
retn   +
***
retn   +
***
push 0Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1011210  +
and dword ptr [eax+4] 0 +
and dword ptr [eax+8] 0 +
mov dword ptr [eax] offset off_10071E4 +
retn   +
***
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1014E6F  +
test [ebp+arg_0] 1 +
jz loc_1011232  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push 4  +
mov eax offset __ehhandler$?empty@locale@std@@SA?AV12@XZ +
call __EH_prolog3  +
push 1Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_1011265  +
call sub_1014A86  +
call __EH_epilog3  +
retn   +
***
push 4  +
mov eax offset __ehhandler$?empty@locale@std@@SA?AV12@XZ +
call __EH_prolog3  +
push 120h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_101129A  +
call sub_10158B2  +
call __EH_epilog3  +
retn   +
***
xor eax eax +
inc eax  +
retn   +
***
mov eax offset aXmllogformatte +
retn   +
***
push 4  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_10112CC  +
mov dword ptr [eax] offset off_1007204 +
retn   +
***
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test [ebp+arg_0] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1007204 +
jz loc_10112EF  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
xor eax eax +
test edi edi +
jz loc_1011325  +
mov edx [ecx+4] +
push esi  +
test edx edx +
jbe loc_1011322  +
mov ecx [ecx] +
mov esi ecx +
cmp [esi] edi +
jz loc_101132A  +
inc eax  +
add esi 4 +
cmp eax edx +
jb loc_1011316  +
xor eax eax +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
and dword ptr [ecx+eax*4] 0 +
xor eax eax +
inc eax  +
jmp loc_1011324  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101498A  +
test [ebp+arg_0] 1 +
jz loc_1011352  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+8] +
test edi edi +
jz loc_1011376  +
push esi  +
mov esi offset dword_1007194 +
movs   +
movs   +
movs   +
movs   +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
test ecx ecx +
jz locret_101138B  +
push 1  +
call sub_1011338  +
retn   +
***
push 10h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_10113B0  +
and dword ptr [eax+4] 0 +
mov dword ptr [eax] offset off_1007244 +
or dword ptr [eax+8] 0FFFFFFFFh +
and dword ptr [eax+0Ch] 0 +
retn   +
***
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+8] +
test edi edi +
jz loc_10113D0  +
push esi  +
mov esi offset dword_10071A4 +
movs   +
movs   +
movs   +
movs   +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
test ecx ecx +
jz locret_10113E5  +
push 1  +
call sub_1011218  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+8] +
test edi edi +
jz loc_1011403  +
push esi  +
mov esi offset dword_10071D4 +
movs   +
movs   +
movs   +
movs   +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
test ecx ecx +
jz locret_1011418  +
push 1  +
call sub_10112D4  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10139CA  +
test [ebp+arg_0] 1 +
jz loc_1011438  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
xor eax eax +
mov [esi+0Ch] eax +
mov [esi+10h] eax +
mov [esi+14h] eax +
mov [ebp-4] eax +
cmp [ebp+8] eax +
jnz loc_101146F  +
mov dword ptr [ebp+8] 64h +
push dword ptr [ebp+8]  +
mov ecx esi +
mov [esi+8] eax +
mov [esi+4] eax +
mov [esi] eax +
call sub_1013A0C  +
mov eax esi +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
test esi esi +
jz loc_1011552  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jz loc_1011552  +
mov edi dword_1020384 +
test edi edi +
jnz loc_10114DD  +
push 18h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_10114CF  +
push 64h  +
mov ecx eax +
call sub_1011444  +
jmp loc_10114D1  +
xor eax eax +
mov edi eax +
mov dword_1020384 edi +
test eax eax +
jz loc_1011552  +
and dword ptr [edi+8] 0 +
jmp loc_1011502  +
mov ecx [eax+4] +
cmp ecx [esi] +
jnz loc_1011502  +
mov ecx [eax+8] +
cmp ecx [esi+4] +
jnz loc_1011502  +
mov ecx [eax+0Ch] +
cmp ecx [esi+8] +
jnz loc_1011502  +
mov ecx [eax+10h] +
cmp ecx [esi+0Ch] +
jz loc_101155B  +
mov ecx edi +
call sub_1011FA9  +
test eax eax +
jnz loc_10114E3  +
push 18h  +
push eax  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov ebx eax +
test ebx ebx +
jz loc_1011552  +
and dword ptr [ebx] 0 +
mov eax [ebp+arg_4] +
mov ecx dword_1020384 +
lea edi [ebx+4] +
movs   +
movs   +
movs   +
movs   +
push ebx  +
mov [ebx+14h] eax +
call sub_1013B44  +
test eax eax +
jnz loc_1011567  +
push ebx  +
push eax  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
xor ecx ecx +
cmp [eax+14h] ebx +
setz cl  +
mov eax ecx +
jmp loc_1011554  +
xor eax eax +
inc eax  +
jmp loc_1011554  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi dword_1020384 +
test esi esi +
jnz loc_1011589  +
xor eax eax +
inc eax  +
jmp loc_1011614  +
push ebx  +
mov ebx [ebp+arg_0] +
test ebx ebx +
jnz loc_1011595  +
xor eax eax +
jmp loc_1011613  +
and dword ptr [esi+8] 0 +
push edi  +
jmp loc_10115BB  +
mov eax [edi+4] +
cmp eax [ebx] +
jnz loc_10115BB  +
mov eax [edi+8] +
cmp eax [ebx+4] +
jnz loc_10115BB  +
mov eax [edi+0Ch] +
cmp eax [ebx+8] +
jnz loc_10115BB  +
mov eax [edi+10h] +
cmp eax [ebx+0Ch] +
jz loc_10115CA  +
mov ecx esi +
call sub_1011FA9  +
mov edi eax +
test edi edi +
jnz loc_101159C  +
jmp loc_101160F  +
cmp dword ptr [edi] 0 +
jz loc_10115D3  +
xor eax eax +
jmp loc_1011612  +
push edi  +
mov ecx esi +
call sub_10112FB  +
push edi  +
xor edi edi +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov esi dword_1020384 +
mov ecx esi +
mov [esi+8] edi +
call sub_1011FA9  +
test eax eax +
jnz loc_101160F  +
push 1  +
mov ecx esi +
call sub_101141E  +
mov dword_1020384 edi +
xor eax eax +
inc eax  +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi dword_1020384 +
test edi edi +
jnz loc_1011632  +
xor eax eax +
jmp loc_1011673  +
push ebx  +
mov ebx [ebp+arg_0] +
test ebx ebx +
jnz loc_101163E  +
xor eax eax +
jmp loc_1011672  +
and dword ptr [edi+8] 0 +
push esi  +
jmp loc_1011664  +
mov eax [esi+4] +
cmp eax [ebx] +
jnz loc_1011664  +
mov eax [esi+8] +
cmp eax [ebx+4] +
jnz loc_1011664  +
mov eax [esi+0Ch] +
cmp eax [ebx+8] +
jnz loc_1011664  +
mov eax [esi+10h] +
cmp eax [ebx+0Ch] +
jz loc_1011678  +
mov ecx edi +
call sub_1011FA9  +
mov esi eax +
test esi esi +
jnz loc_1011645  +
pop esi  +
pop ebx  +
pop edi  +
pop ebp  +
retn 4  +
call dword ptr [esi+14h]  +
test eax eax +
jz loc_1011671  +
inc dword ptr [esi]  +
jmp loc_1011671  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_101C8C0 +
xor eax ebp +
mov [ebp+var_4] eax +
cmp dword_1020384 0 +
push edi  +
mov edi [ebp+arg_0] +
jnz loc_10116AB  +
xor eax eax +
jmp loc_10116F3  +
test edi edi +
jz loc_10116A7  +
mov eax [edi] +
push esi  +
lea ecx [ebp+var_14] +
push ecx  +
mov ecx edi +
call dword ptr [eax+4]  +
mov esi dword_1020384 +
and dword ptr [esi+8] 0 +
jmp loc_10116E7  +
mov ecx [eax+4] +
cmp ecx [ebp+var_14] +
jnz loc_10116E7  +
mov ecx [eax+8] +
cmp ecx [ebp+var_10] +
jnz loc_10116E7  +
mov ecx [eax+0Ch] +
cmp ecx [ebp+var_C] +
jnz loc_10116E7  +
mov ecx [eax+10h] +
cmp ecx [ebp+var_8] +
jz loc_1011702  +
mov ecx esi +
call sub_1011FA9  +
test eax eax +
jnz loc_10116C7  +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_100E138  +
leave   +
retn 4  +
dec dword ptr [eax]  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+1Ch]  +
xor eax eax +
inc eax  +
jmp loc_10116F2  +
***
call sub_1011490  +
push offset loc_10111B1  +
push offset dword_1007184  +
call sub_1011490  +
push offset loc_1011391  +
push offset dword_1007194  +
call sub_1011490  +
push offset loc_10111F5  +
push offset dword_10071A4  +
call sub_1011490  +
push offset loc_101123E  +
push offset dword_10071B4  +
call sub_1011490  +
push offset loc_1011270  +
push offset dword_10071C4  +
call sub_1011490  +
push offset loc_10112B9  +
push offset dword_10071D4  +
call sub_1011490  +
push offset loc_101114D  +
push offset dword_1007164  +
call sub_1011490  +
xor eax eax +
inc eax  +
retn   +
***
push offset dword_10071B4  +
call sub_1011571  +
push offset dword_10071C4  +
call sub_1011571  +
push offset dword_1007194  +
call sub_1011571  +
push offset dword_10071A4  +
call sub_1011571  +
push offset dword_1007184  +
call sub_1011571  +
push offset dword_1007174  +
call sub_1011571  +
push offset dword_1007164  +
call sub_1011571  +
xor eax eax +
inc eax  +
retn   +
***
jz locret_1011815  +
call sub_1011796  +
mov ecx dword_1020384 +
test ecx ecx +
jz locret_1011815  +
push 1  +
call sub_101141E  +
and dword_1020384 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_1011850  +
cmp [ebp+arg_4] eax +
jz loc_101184C  +
movzx edx word ptr [ebx] +
test dx dx +
jz loc_101184C  +
mov [ecx] dx +
inc ecx  +
inc ecx  +
inc ebx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_101182F  +
test esi esi +
jnz loc_1011858  +
dec ecx  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
xor edx edx +
mov [ecx] dx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1011866  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+dwBytes]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
push 8  +
push 0  +
jnz loc_10118E8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [esi] eax +
jmp loc_10118FF  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov ecx [esi+4] +
mov [ecx] eax +
mov eax [esi+4] +
mov eax [eax] +
mov [esi+4] eax +
test eax eax +
jz loc_1011917  +
and dword ptr [eax] 0 +
mov eax [esi+4] +
mov ecx [ebp+arg_0] +
mov [eax+4] ecx +
xor eax eax +
inc eax  +
jmp loc_1011919  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+4] +
mov edx [ebp+arg_4] +
push esi  +
mov esi [eax+8] +
sub esi ecx +
cmp edx esi +
pop esi  +
jbe loc_1011967  +
xor eax eax +
jmp loc_1011972  +
add ecx edx +
mov [eax+4] ecx +
mov eax [eax] +
sub eax edx +
add eax ecx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ecx+4] +
cmp [ebp+arg_4] eax +
ja loc_1011991  +
sub eax [ebp+arg_4] +
mov [ecx+4] eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test [ebp+arg_0] 2 +
push edi  +
mov edi ecx +
jz loc_10119CC  +
push esi  +
push offset sub_100EDDC  +
lea esi [edi-4] +
push dword ptr [esi]  +
push 0Ch  +
push edi  +
call ??_M@YGXPAXIHP6EX0@Z@Z  +
test [ebp+arg_0] 1 +
jz loc_10119C7  +
push esi  +
call sub_1011892  +
mov eax esi +
pop esi  +
jmp loc_10119E0  +
call sub_100EDDC  +
test [ebp+arg_0] 1 +
jz loc_10119DE  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax edi +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+28h] +
test ecx ecx +
jz loc_1011A05  +
push 3  +
call sub_101199A  +
and dword ptr [esi+28h] 0 +
and dword ptr [esi+2Ch] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push esi  +
mov edi ecx +
push 0  +
push dword ptr [edi+8]  +
call memset  +
add esp 0Ch +
cmp esi 1010h +
jnb loc_1011A32  +
xor eax eax +
jmp loc_1011A6A  +
mov ecx [edi+8] +
and dword ptr [ecx+4] 0 +
lea eax [esi-1000h] +
shr eax 1 +
add eax 7 +
and eax 0FFFFFFF8h +
mov [ecx+8] eax +
mov dword ptr [ecx] 1000h +
lea ecx [eax+1000h] +
mov eax [edi+8] +
and dword ptr [eax+10h] 0 +
add eax 0Ch +
sub esi ecx +
mov [eax] ecx +
mov [eax+8] esi +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea ecx [esi+0Ch] +
call sub_1013281  +
xor edi edi +
lea ecx [esi+14h] +
mov [esi+8] edi +
call sub_101323D  +
mov eax [esi+1Ch] +
cmp eax edi +
jz loc_1011AAF  +
push eax  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov [esi+1Ch] edi +
mov [esi+20h] edi +
mov [esi+24h] edi +
xor eax eax +
pop edi  +
inc eax  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
cmp [esi+8] ebx +
jz loc_1011BB5  +
cmp [esi+1Ch] ebx +
jz loc_1011BB5  +
mov eax [esi+8] +
push edi  +
mov edi [eax] +
add edi eax +
mov eax [eax+4] +
xor edx edx +
mov ecx 20Ch +
div  ecx +
mov ecx [esi+20h] +
dec ecx  +
mov [ebp+var_14] edi +
mov [ebp+var_10] ecx +
js loc_1011BAF  +
dec eax  +
imul ecx ecx +
mov [ebp+var_18] eax +
mov [ebp+var_C] ecx +
mov ecx [esi+1Ch] +
mov eax [ebp+var_18] +
add ecx [ebp+var_C] +
cmp eax ebx +
mov [ebp+var_4] ebx +
mov [ebp+var_8] eax +
jl loc_1011B9C  +
imul eax eax +
add eax edi +
mov edi ecx +
lea edx [eax+0Ch] +
mov bx [edx] +
cmp bx [edi] +
jnz loc_1011B51  +
test bx bx +
jz loc_1011B4D  +
mov bx [edx+2] +
cmp bx [edi+2] +
jnz loc_1011B51  +
add edx 4 +
add edi 4 +
test bx bx +
jnz loc_1011B2B  +
xor edx edx +
jmp loc_1011B56  +
sbb edx edx +
sbb edx 0FFFFFFFFh +
xor ebx ebx +
cmp edx ebx +
jnz loc_1011B60  +
dec dword ptr [eax]  +
jz loc_1011B74  +
mov edx 20Ch +
add [ebp+var_4] edx +
dec [ebp+var_8]  +
sub eax edx +
cmp [ebp+var_8] ebx +
jge loc_1011B26  +
jmp loc_1011B99  +
cmp [ebp+var_4] ebx +
jz loc_1011B8C  +
push [ebp+var_4]  +
lea ecx [eax+20Ch] +
push ecx  +
push eax  +
call memcpy  +
add esp 0Ch +
push 20Ch  +
push dword ptr [esi+8]  +
call sub_101197B  +
mov edi [ebp+var_14] +
dec [ebp+var_10]  +
sub [ebp+var_C] 220h +
cmp [ebp+var_10] ebx +
jge loc_1011B0B  +
xor eax eax +
inc eax  +
pop edi  +
jmp loc_1011BB7  +
xor eax eax +
pop esi  +
pop ebx  +
leave   +
retn   +
***
push 8  +
push offset dword_1018A38  +
call __SEH_prolog4  +
mov esi [ebp+8] +
lea ecx [esi+14h] +
call sub_1013259  +
and dword ptr [ebp-4] 0 +
mov ecx [esi+38h] +
test ecx ecx +
jz loc_1011CDE  +
mov eax [ecx] +
push 1  +
lea edx [esi+4] +
push edx  +
call dword ptr [eax+14h]  +
push dword ptr [esi+38h]  +
call sub_1011688  +
and dword ptr [esi+38h] 0 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1011CF8  +
xor eax eax +
inc eax  +
call __SEH_epilog4  +
retn 8  +
***
lea ecx [esi+14h] +
call sub_101326E  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ecx+8] +
push ebx  +
push esi  +
push edi  +
mov edi [eax+0Ch] +
xor ebx ebx +
add edi eax +
mov [ebp+var_4] ecx +
cmp [eax+10h] ebx +
jbe loc_1011D44  +
push [ebp+arg_4]  +
lea esi [ebx+edi] +
lea eax [esi+18h] +
push eax  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1011D54  +
mov eax [ebp+var_4] +
add ebx [esi] +
mov eax [eax+8] +
cmp ebx [eax+10h] +
jb loc_1011D21  +
mov eax [ebp+arg_8] +
and dword ptr [eax] 0 +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
mov ecx [esi+8] +
mov eax [ebp+arg_0] +
cmp ecx [eax] +
jnz loc_1011D7D  +
mov ecx [esi+0Ch] +
cmp ecx [eax+4] +
jnz loc_1011D7D  +
mov ecx [esi+10h] +
cmp ecx [eax+8] +
jnz loc_1011D7D  +
mov ecx [esi+14h] +
cmp ecx [eax+0Ch] +
jnz loc_1011D7D  +
mov eax [ebp+arg_8] +
mov [eax] esi +
jmp loc_1011D4A  +
xor eax eax +
jmp loc_1011D4D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
lea eax [ebp+arg_4] +
push eax  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
call sub_1011D06  +
test eax eax +
jz loc_1011DEF  +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jz loc_1011DEB  +
dec dword ptr [edi+4]  +
jnz loc_1011DEB  +
mov ecx [esi+8] +
mov eax [edi] +
mov edx [ecx+0Ch] +
mov [ebp+arg_4] eax +
sub eax edx +
sub eax ecx +
add eax edi +
cmp eax [ecx+10h] +
jnb loc_1011DDC  +
push ebx  +
mov ebx ecx +
mov ebx [ebx+10h] +
sub ebx eax +
add edx ecx +
push ebx  +
add edx eax +
push edx  +
push edi  +
call memcpy  +
add esp 0Ch +
pop ebx  +
mov eax [esi+8] +
push [ebp+arg_4]  +
add eax 0Ch +
push eax  +
call sub_101197B  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
mov esi ecx +
mov eax [esi+20h] +
imul eax eax +
push edi  +
push eax  +
xor edi edi +
push edi  +
mov [ebp-8] esi +
mov dword ptr [ebp-10h] 1 +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp-14h] eax +
cmp eax edi +
jz loc_1011F47  +
push ebx  +
mov [ebp-0Ch] edi +
cmp [esi+20h] edi +
jbe loc_1011EEF  +
mov [ebp-4] edi +
lea ebx [eax+10h] +
mov ecx [esi+1Ch] +
mov eax [ebp-4] +
lea esi [ecx+eax+208h] +
push 6  +
lea edi [ebx-10h] +
pop ecx  +
movs   +
mov esi [ebp-8] +
mov ecx [esi+1Ch] +
mov eax [ecx+eax+208h] +
cmp eax 2 +
jnz loc_1011E8C  +
mov ecx [ebx] +
test ecx ecx +
jbe loc_1011E8C  +
push ecx  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebx-8] eax +
test eax eax +
jz loc_1011ECC  +
push dword ptr [ebx]  +
jmp loc_1011EB4  +
test eax eax +
jnz loc_1011ED0  +
mov eax [ebx] +
test eax eax +
jbe loc_1011ED0  +
add eax eax +
push eax  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebx-8] eax +
test eax eax +
jz loc_1011ECC  +
mov ecx [ebx] +
add ecx ecx +
push ecx  +
mov edx [ebp-4] +
mov ecx [esi+1Ch] +
push dword ptr [ecx+edx+210h]  +
push eax  +
call memcpy  +
add esp 0Ch +
jmp loc_1011ED0  +
and dword ptr [ebp-10h] 0 +
inc dword ptr [ebp-0Ch]  +
mov eax [ebp-0Ch] +
add dword ptr [ebp-4] 220h +
add ebx 18h +
cmp eax [esi+20h] +
jb loc_1011E44  +
cmp dword ptr [ebp-10h] 0 +
jz loc_1011EFE  +
push dword ptr [ebp-14h]  +
lea ecx [esi+48h] +
call sub_10118C6  +
test eax eax +
jnz loc_1011F46  +
and dword ptr [ebp-10h] 0 +
cmp dword ptr [esi+20h] 0 +
mov ebx ds:HeapFree +
jbe loc_1011F38  +
mov edi [ebp-14h] +
mov eax [edi] +
cmp eax 2 +
jz loc_1011F1C  +
test eax eax +
jnz loc_1011F2A  +
push dword ptr [edi+8]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ebx  +
inc dword ptr [ebp-10h]  +
mov eax [ebp-10h] +
add edi 18h +
cmp eax [esi+20h] +
jb loc_1011F11  +
push dword ptr [ebp-14h]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ebx  +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
cmp [ebp+8] ebx +
jnz loc_1011F64  +
xor eax eax +
jmp loc_1011F90  +
push edi  +
xor edi edi +
cmp [esi+1Ch] ebx +
jbe loc_1011F8D  +
mov eax [esi+18h] +
push dword ptr [ebp+8]  +
add eax ebx +
push eax  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1011F96  +
inc edi  +
add ebx 220h +
cmp edi [esi+1Ch] +
jb loc_1011F6C  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov eax [ebp+0Ch] +
test eax eax +
jz loc_1011F9F  +
mov [eax] edi +
xor eax eax +
inc eax  +
jmp loc_1011F8F  +
***
mov eax [ecx+8] +
cmp eax [ecx+4] +
jnb loc_1011FC5  +
mov eax [ecx] +
mov edx [ecx+8] +
cmp dword ptr [eax+edx*4] 0 +
jnz loc_1011FC8  +
inc edx  +
mov [ecx+8] edx +
cmp edx [ecx+4] +
jb loc_1011FB3  +
xor eax eax +
retn   +
mov eax [eax+edx*4] +
inc edx  +
mov [ecx+8] edx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
shr edx 1 +
push 0  +
pop eax  +
jz loc_1011FEC  +
cmp edx 7FFFFFFFh +
jbe loc_1011FF1  +
mov eax 80070057h +
test eax eax +
jl loc_1012007  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_101181B  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
shr esi 1 +
push 0  +
pop eax  +
mov ebx 7FFFFFFFh +
jz loc_101202A  +
cmp esi ebx +
jbe loc_101202F  +
mov eax 80070057h +
test eax eax +
jl loc_1012047  +
mov eax [ebp+arg_0] +
push edi  +
lea edi [ebp+arg_4] +
mov edx esi +
call sub_100B740  +
mov ecx [ebp+arg_4] +
pop edi  +
jmp loc_1012049  +
xor ecx ecx +
test eax eax +
jl loc_1012062  +
mov eax [ebp+arg_0] +
mov edx esi +
push ebx  +
sub edx ecx +
lea ecx [eax+ecx*2] +
mov eax [ebp+arg_8] +
push 0  +
call sub_101181B  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
call __EH_prolog3  +
mov ebx ecx +
mov esi [ebp+8] +
test esi esi +
jnz loc_1012086  +
xor eax eax +
jmp loc_1012103  +
cmp dword ptr [ebx+28h] 0 +
jz loc_1012091  +
call sub_10119EA  +
xor ecx ecx +
push 0Ch  +
pop edx  +
mov eax esi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
xor eax eax +
add ecx 4 +
setb al  +
neg eax  +
or eax ecx +
push eax  +
call sub_1011872  +
mov [ebp+8] eax +
xor edi edi +
mov [ebp-4] edi +
cmp eax edi +
jz loc_10120D7  +
push offset sub_100EDDC  +
push offset loc_1010463  +
push esi  +
lea edi [eax+4] +
push 0Ch  +
push edi  +
mov [eax] esi +
call ??_L@YGXPAXIHP6EX0@Z1@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [ebx+28h] edi +
test edi edi +
jz loc_1012082  +
mov [ebx+2Ch] esi +
test esi esi +
jbe loc_1012100  +
xor edi edi +
mov ecx [ebx+28h] +
push 400h  +
add ecx edi +
call sub_1013334  +
add edi 0Ch +
dec esi  +
jnz loc_10120EB  +
xor eax eax +
inc eax  +
call __EH_epilog3  +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
xor edi edi +
mov [ebp-1Ch] edi +
mov [ebp-18h] edi +
mov [ebp-14h] edi +
mov eax [ebp+8] +
mov [ebp-4] edi +
mov [ebp-10h] edi +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx di +
jnz loc_1012135  +
sub eax ecx +
sar eax 1 +
lea eax [eax+eax+10h] +
push eax  +
lea ecx [ebp-1Ch] +
call sub_10132AF  +
mov ebx eax +
cmp ebx edi +
jnz loc_1012168  +
lea ecx [ebp-1Ch] +
call sub_100EDDC  +
xor eax eax +
call __EH_epilog3  +
retn 4  +
push dword ptr [ebp+8]  +
push dword ptr [ebp-14h]  +
push ebx  +
call sub_1011FD5  +
push offset aSection  +
push dword ptr [ebp-14h]  +
push ebx  +
call sub_1012010  +
lea eax [ebp-10h] +
push eax  +
push 8000h  +
push ebx  +
lea ecx [esi+0Ch] +
call sub_10135A7  +
test eax eax +
jnz loc_10121A4  +
lea ecx [ebp-1Ch] +
call sub_100EDDC  +
mov eax edi +
jmp loc_1012160  +
mov eax [esi+10h] +
mov [esi+8] eax +
cmp [ebp-10h] edi +
jnz loc_10121BB  +
push 8000h  +
mov ecx esi +
call sub_1011A0C  +
xor edi edi +
inc edi  +
jmp loc_1012198  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ecx+8] +
push ebx  +
mov ebx [eax] +
add ebx eax +
mov eax [eax+4] +
mov [ebp+var_10] ecx +
xor edx edx +
mov ecx 20Ch +
div  ecx +
and [ebp+var_8] 0 +
push esi  +
push edi  +
mov [ebp+var_C] eax +
test eax eax +
jbe loc_101227E  +
mov esi ebx +
and [ebp+var_4] 0 +
cmp [ebp+arg_4] 0 +
jbe loc_101225B  +
mov edi [ebp+arg_0] +
lea eax [edi+8] +
lea ecx [esi+0Ch] +
mov dx [ecx] +
cmp dx [eax] +
jnz loc_1012230  +
test dx dx +
jz loc_101222C  +
mov dx [ecx+2] +
cmp dx [eax+2] +
jnz loc_1012230  +
add ecx 4 +
add eax 4 +
test dx dx +
jnz loc_101220A  +
xor eax eax +
jmp loc_1012235  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_101224C  +
inc [ebp+var_4]  +
mov eax [ebp+var_4] +
add edi 208h +
cmp eax [ebp+arg_4] +
jb loc_1012204  +
jmp loc_101225B  +
mov eax [esi+4] +
cmp eax [edi] +
jnz loc_10122C7  +
mov eax [esi+8] +
cmp eax [edi+4] +
jnz loc_10122C7  +
mov eax [ebp+arg_4] +
cmp [ebp+var_4] eax +
jnz loc_1012269  +
cmp dword ptr [esi+8] 0 +
jnz loc_10122C7  +
inc [ebp+var_8]  +
mov eax [ebp+var_8] +
add esi 20Ch +
cmp eax [ebp+var_C] +
jb loc_10121F7  +
and [ebp+var_8] 0 +
cmp [ebp+arg_4] 0 +
jbe loc_1012339  +
mov edi [ebp+arg_0] +
and [ebp+arg_0] 0 +
cmp [ebp+var_C] 0 +
jbe loc_10122E5  +
mov esi ebx +
lea ecx [edi+8] +
lea eax [esi+0Ch] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_10122CB  +
test dx dx +
jz loc_10122C3  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_10122CB  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_10122A1  +
xor eax eax +
jmp loc_10122D0  +
xor eax eax +
jmp loc_101233C  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_1012343  +
inc [ebp+arg_0]  +
mov eax [ebp+arg_0] +
add esi 20Ch +
cmp eax [ebp+var_C] +
jb loc_101229B  +
mov eax [ebp+var_10] +
push 20Ch  +
push dword ptr [eax+8]  +
call sub_101194A  +
test eax eax +
jz loc_10122C7  +
mov ecx [ebp+var_10] +
mov esi [ecx+8] +
add esi eax +
lea eax [edi+8] +
push eax  +
push 200h  +
lea eax [esi+0Ch] +
push eax  +
mov dword ptr [esi] 1 +
call sub_1011FD5  +
mov eax [edi] +
mov [esi+4] eax +
mov eax [edi+4] +
mov [esi+8] eax +
inc [ebp+var_8]  +
mov eax [ebp+var_8] +
add edi 208h +
cmp eax [ebp+arg_4] +
jb loc_101228F  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
inc dword ptr [esi]  +
jmp loc_1012324  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax dword_101C8C0 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_18] 0 +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi+8] 0 +
mov ebx ecx +
jz loc_10123AE  +
mov ecx [esi+4] +
mov eax [ecx] +
lea edx [ebp+var_14] +
push edx  +
call dword ptr [eax+4]  +
mov ecx [esi+8] +
lea eax [ebp+var_1C] +
push eax  +
mov eax [ecx] +
call dword ptr [eax+18h]  +
push eax  +
lea eax [ebp+var_14] +
push eax  +
mov ecx ebx +
call sub_1011D06  +
test eax eax +
jz loc_10123AE  +
mov eax [ebp+var_1C] +
test eax eax +
jz loc_1012434  +
xor ecx ecx +
cmp dword ptr [eax+4] 1 +
setz cl  +
mov [ebp+var_18] ecx +
push edi  +
lea edi [ebx+4] +
mov eax [edi] +
push 0  +
push 0  +
mov ecx edi +
call dword ptr [eax+4]  +
mov ecx [esi] +
test ecx ecx +
jz loc_10123D3  +
push [ebp+var_18]  +
mov eax [ecx] +
push edi  +
call dword ptr [eax+14h]  +
push dword ptr [esi]  +
call sub_1011688  +
push [ebp+var_18]  +
mov ecx [esi+4] +
mov eax [ecx] +
push edi  +
call dword ptr [eax+14h]  +
push dword ptr [esi+4]  +
call sub_1011688  +
cmp dword ptr [esi+8] 0 +
jz loc_1012419  +
push [ebp+var_18]  +
mov ecx [esi+8] +
mov eax [ecx] +
push edi  +
call dword ptr [eax+14h]  +
mov ecx [esi+8] +
mov eax [ecx] +
call dword ptr [eax+18h]  +
push eax  +
lea eax [ebp+var_14] +
push eax  +
mov ecx ebx +
call sub_1011D86  +
test eax eax +
jz loc_1012433  +
push dword ptr [esi+8]  +
call sub_1011688  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+10h]  +
push esi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
xor eax eax +
inc eax  +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100E138  +
leave   +
retn 4  +
***
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
lea eax [ebp-4] +
push eax  +
push dword ptr [ebp+0Ch]  +
mov esi ecx +
push dword ptr [ebp+8]  +
call sub_1011D06  +
test eax eax +
jnz loc_1012469  +
xor eax eax +
jmp loc_10124E0  +
mov eax [ebp-4] +
test eax eax +
jnz loc_10124DA  +
cmp [ebp+10h] eax +
jnz loc_1012465  +
mov eax [ebp+0Ch] +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_101247B  +
sub eax ecx +
sar eax 1 +
lea eax [eax+eax+2] +
mov [ebp+10h] eax +
add eax 1Fh +
and eax 0FFFFFFF8h +
push eax  +
mov [ebp-4] eax +
mov eax [esi+8] +
add eax 0Ch +
push eax  +
call sub_101194A  +
test eax eax +
jz loc_1012465  +
push ebx  +
mov ebx [esi+8] +
mov esi [ebp+8] +
push edi  +
push dword ptr [ebp+0Ch]  +
add ebx eax +
push dword ptr [ebp+10h]  +
mov dword ptr [ebx+4] 1 +
lea edi [ebx+8] +
movs   +
movs   +
movs   +
lea eax [ebx+18h] +
push eax  +
movs   +
call sub_1011FD5  +
mov eax [ebp-4] +
pop edi  +
mov [ebx] eax +
pop ebx  +
jmp loc_10124DD  +
inc dword ptr [eax+4]  +
xor eax eax +
inc eax  +
pop esi  +
leave   +
retn 0Ch  +
***
push 8  +
push offset dword_1018AB0  +
call __SEH_prolog4  +
mov esi [ebp+8] +
lea ecx [esi+14h] +
call sub_1013259  +
and dword ptr [ebp-4] 0 +
mov dword ptr [esi+50h] 1 +
mov ecx [esi+34h] +
call sub_10139E4  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_101252E  +
xor eax eax +
inc eax  +
call __SEH_epilog4  +
retn 4  +
***
lea ecx [esi+14h] +
call sub_101326E  +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi+4] offset off_1007264 +
xor edi edi +
mov dword ptr [esi] offset off_10072B4 +
mov dword ptr [esi+4] offset off_1007294 +
mov [esi+0Ch] edi +
mov [esi+10h] edi +
mov [ebp-4] edi +
mov [esi+14h] edi +
mov [esi+18h] edi +
mov [esi+3Ch] edi +
mov [esi+40h] edi +
mov [esi+44h] edi +
push 18h  +
mov byte ptr [ebp-4] 2 +
mov [esi+4Ch] edi +
mov [esi+48h] edi +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-14h] ecx +
mov byte ptr [ebp-4] 3 +
cmp ecx edi +
jz loc_10125A3  +
push 64h  +
call sub_1011444  +
jmp loc_10125A5  +
xor eax eax +
push 18h  +
mov byte ptr [ebp-4] 2 +
mov [esi+30h] eax +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-14h] ecx +
mov byte ptr [ebp-4] 4 +
cmp ecx edi +
jz loc_10125CA  +
push 64h  +
call sub_1011444  +
jmp loc_10125CC  +
xor eax eax +
mov ecx [esi+30h] +
mov byte ptr [ebp-4] 2 +
mov [esi+34h] eax +
cmp ecx edi +
jz loc_10125E9  +
cmp eax edi +
jnz loc_1012606  +
cmp ecx edi +
jz loc_10125E9  +
push 1  +
call sub_101141E  +
mov ecx [esi+34h] +
cmp ecx edi +
jz loc_10125F7  +
push 1  +
call sub_101141E  +
push edi  +
push edi  +
push 1  +
push 0C0000025h  +
call ds:RaiseException  +
mov [esi+8] edi +
mov [esi+1Ch] edi +
mov [esi+20h] edi +
mov [esi+24h] edi +
mov [esi+28h] edi +
mov [esi+2Ch] edi +
mov [esi+38h] edi +
mov [esi+50h] edi +
mov eax esi +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
add ecx 38h +
call sub_1013334  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
add ecx 38h +
call sub_10132AF  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
add ecx 38h +
call sub_1013362  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jz loc_1012687  +
mov edx [ecx+40h] +
mov [eax] edx +
mov eax [ecx+38h] +
pop ebp  +
retn 8  +
***
add ecx 38h +
jmp sub_1011112  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
imul eax eax +
add eax [ecx+18h] +
pop ebp  +
retn 4  +
***
mov eax [ecx+1Ch] +
retn   +
***
call __SEH_prolog4  +
lea ecx [esi+14h] +
call sub_101326E  +
retn   +
***
push 24h  +
push offset dword_1018B38  +
call __SEH_prolog4  +
xor edi edi +
mov [ebp-2Ch] edi +
xor ebx ebx +
mov [ebp-30h] ebx +
mov [ebp-1Ch] edi +
mov [ebp-20h] edi +
mov [ebp-28h] edi +
mov [ebp-24h] edi +
mov [ebp-34h] edi +
cmp [ebp+14h] edi +
jnz loc_1012793  +
xor eax eax +
jmp loc_1012956  +
mov ecx [ebp+8] +
add ecx 14h +
call sub_1013259  +
mov [ebp-4] edi +
xor esi esi +
inc esi  +
mov [ebp-4] esi +
cmp dword ptr [ebp+1Ch] 0 +
jz loc_10127FD  +
push dword ptr [ebp+1Ch]  +
call sub_101161E  +
mov edi eax +
mov [ebp-2Ch] edi +
test edi edi +
jz loc_101293E  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax]  +
cmp eax 2 +
jnz loc_101293E  +
mov edx [edi] +
mov eax [ebp+8] +
mov ecx eax +
add eax 4 +
neg ecx  +
sbb ecx ecx +
and ecx eax +
push ecx  +
push dword ptr [ebp+20h]  +
mov ecx edi +
call dword ptr [edx+8]  +
test eax eax +
jz loc_101293E  +
xor ecx ecx +
cmp eax 5 +
setz cl  +
mov [ebp-24h] ecx +
push dword ptr [ebp+14h]  +
call sub_101161E  +
mov ebx eax +
mov [ebp-30h] ebx +
test ebx ebx +
jz loc_101293E  +
mov eax [ebx] +
mov ecx ebx +
call dword ptr [eax]  +
cmp eax esi +
jnz loc_101293E  +
mov esi [ebp+8] +
lea eax [esi+4] +
neg esi  +
sbb esi esi +
and esi eax +
mov eax [ebx] +
push esi  +
push dword ptr [ebp+18h]  +
mov ecx ebx +
call dword ptr [eax+8]  +
test eax eax +
jz loc_101293E  +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_101287A  +
push dword ptr [ebp+0Ch]  +
call sub_101161E  +
mov [ebp-1Ch] eax +
test eax eax +
jz loc_101293E  +
mov ecx eax +
mov eax [ecx] +
call dword ptr [eax]  +
test eax eax +
jnz loc_101293E  +
mov ecx [ebp-1Ch] +
mov eax [ecx] +
push esi  +
push dword ptr [ebp+10h]  +
call dword ptr [eax+8]  +
test eax eax +
jz loc_101293E  +
push 0Ch  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp-20h] eax +
test eax eax +
jz loc_101293E  +
mov [eax+8] edi +
mov ecx [ebp-1Ch] +
mov [eax] ecx +
mov [eax+4] ebx +
test edi edi +
jz loc_10128C6  +
push dword ptr [ebp-24h]  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+18h]  +
push eax  +
push dword ptr [ebp+14h]  +
mov ecx [ebp+8] +
call near ptr byte_1012448+1  +
test eax eax +
jz loc_101293E  +
mov dword ptr [ebp-34h] 1 +
mov ecx [ebp+8] +
add ecx 4 +
mov eax [ecx] +
push 0  +
push 0  +
call dword ptr [eax+4]  +
mov eax [ebp-1Ch] +
test eax eax +
jz loc_10128EE  +
mov eax [eax] +
xor ecx ecx +
cmp [ebp-24h] ecx +
setz cl  +
push ecx  +
push esi  +
mov ecx [ebp-1Ch] +
call dword ptr [eax+0Ch]  +
xor eax eax +
cmp [ebp-24h] eax +
setz al  +
mov [ebp+1Ch] eax +
mov eax [ebx] +
push dword ptr [ebp+1Ch]  +
push esi  +
mov ecx ebx +
call dword ptr [eax+0Ch]  +
test edi edi +
jz loc_1012913  +
mov eax [edi] +
push dword ptr [ebp+1Ch]  +
push esi  +
mov ecx edi +
call dword ptr [eax+0Ch]  +
mov ecx [ebp+8] +
add ecx 4 +
mov eax [ecx] +
call dword ptr [eax+10h]  +
push dword ptr [ebp-20h]  +
mov esi [ebp+8] +
mov ecx [esi+30h] +
call sub_1013B44  +
push dword ptr [ebp-20h]  +
mov ecx [esi+34h] +
call sub_1013B44  +
mov dword ptr [ebp-28h] 1 +
and dword ptr [ebp-4] 0 +
call sub_1012964  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_10129D0  +
mov eax [ebp-28h] +
call __SEH_epilog4  +
retn 20h  +
***
xor eax eax +
mov ecx [ebp+8] +
add ecx 14h +
call sub_101326E  +
retn   +
***
push 8  +
push offset dword_1018B60  +
call __SEH_prolog4  +
mov esi [ebp+8] +
lea ecx [esi+14h] +
call sub_1013259  +
and dword ptr [ebp-4] 0 +
mov ecx [esi+30h] +
and dword ptr [ecx+8] 0 +
call sub_1011FA9  +
mov edi eax +
test edi edi +
jz loc_1012A31  +
cmp edi [ebp+0Ch] +
jnz loc_1012A48  +
push edi  +
mov ecx esi +
call sub_101234C  +
test eax eax +
jz loc_1012A48  +
push edi  +
mov ecx [esi+30h] +
call sub_10112FB  +
push edi  +
mov ecx [esi+34h] +
call sub_10112FB  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1012A50  +
xor eax eax +
inc eax  +
call __SEH_epilog4  +
retn 8  +
***
mov ecx [esi+30h] +
jmp loc_1012A03  +
***
lea ecx [esi+14h] +
call sub_101326E  +
retn   +
***
push 1Ch  +
push offset dword_1018BA0  +
call __SEH_prolog4  +
mov edi [ebp+8] +
mov eax [edi+20h] +
cmp [ebp+0Ch] eax +
jbe loc_1012B65  +
mov [ebp+0Ch] eax +
lea ecx [edi+14h] +
call sub_1013259  +
xor edx edx +
mov [ebp-28h] edx +
wait   +
mov [ebp-4] edx +
lea ecx [ebp+10h] +
mov [ebp-20h] ecx +
mov [ebp-1Ch] edx +
mov [ebp-24h] edx +
mov eax [ebp-1Ch] +
cmp eax [ebp+0Ch] +
jnb loc_1012C98  +
imul eax eax +
mov esi [edi+1Ch] +
lea esi [eax+esi+208h] +
mov eax [esi] +
sub eax edx +
jz loc_1012C04  +
dec eax  +
jz loc_1012BEE  +
dec eax  +
jz loc_1012BC5  +
dec eax  +
jz loc_1012BB5  +
mov [ebp-28h] edx +
jmp loc_1012CCA  +
push 8  +
pop eax  +
add ecx eax +
mov [ebp-20h] ecx +
fld  qword ptr [ecx-8] +
fstp  qword ptr [esi+8] +
jmp loc_1012BFC  +
add ecx 4 +
mov [ebp-20h] ecx +
mov eax [ecx-4] +
mov [esi+8] eax +
add ecx 4 +
mov [ebp-20h] ecx +
mov eax [ecx-4] +
mov [esi+10h] eax +
cmp [esi+8] edx +
jnz loc_1012C8D  +
mov [esi+10h] edx +
jmp loc_1012C8D  +
push 4  +
pop eax  +
add ecx eax +
mov [ebp-20h] ecx +
mov ecx [ecx-4] +
mov [esi+8] ecx +
mov [esi+10h] eax +
jmp loc_1012C8D  +
add ecx 4 +
mov [ebp-20h] ecx +
mov eax [ecx-4] +
mov [ebp-2Ch] eax +
cmp eax edx +
jz loc_1012C84  +
lea ebx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1012C17  +
sub eax ebx +
mov ebx eax +
mov eax [edi+28h] +
cmp eax edx +
jz loc_1012C7B  +
mov edi [ebp-24h] +
imul edi edi +
lea ecx [ebx+ebx+2] +
push ecx  +
lea ecx [edi+eax] +
call sub_1013362  +
test eax eax +
jz loc_1012C76  +
mov eax [ebp+8] +
mov eax [eax+28h] +
mov eax [edi+eax] +
mov [esi+8] eax +
xor ecx ecx +
mov edx [ebp-24h] +
mov [eax+edx*2] cx +
push dword ptr [ebp-2Ch]  +
push offset aS  +
lea eax [ebx+1] +
push eax  +
push dword ptr [esi+8]  +
call sub_100C0F1  +
add esp 10h +
mov [esi+10h] ebx +
xor edx edx +
mov edi [ebp+8] +
jmp loc_1012C8A  +
xor edx edx +
mov edi [ebp+8] +
mov dword ptr [esi+8] offset aLogCannotConve +
jmp loc_1012C8D  +
mov [esi+8] edx +
mov [esi+10h] edx +
inc dword ptr [ebp-24h]  +
inc dword ptr [ebp-1Ch]  +
mov ecx [ebp-20h] +
jmp loc_1012B82  +
***
mov eax [ebp-1Ch] +
cmp eax [edi+20h] +
jnb loc_1012CBD  +
imul eax eax +
mov ecx [edi+1Ch] +
lea eax [eax+ecx+208h] +
fldz   +
fstp  qword ptr [eax+8] +
mov [eax+10h] edx +
inc dword ptr [ebp-1Ch]  +
jmp loc_1012C98  +
***
mov [ebp-20h] edx +
mov ecx edi +
call near ptr dword_1012A5C+2  +
mov [ebp-28h] eax +
wait   +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1012CE3  +
mov eax [ebp-28h] +
call __SEH_epilog4  +
retn   +
***
lea ecx [edi+14h] +
call sub_101326E  +
retn   +
***
push 14h  +
push offset dword_1018BC0  +
call __SEH_prolog4  +
mov ebx [ebp+8] +
mov eax [ebx+20h] +
cmp [ebp+0Ch] eax +
jbe loc_1012D0B  +
mov [ebp+0Ch] eax +
lea ecx [ebx+14h] +
call sub_1013259  +
xor esi esi +
mov [ebp-24h] esi +
wait   +
mov [ebp-4] esi +
lea ecx [ebp+10h] +
mov [ebp-20h] ecx +
mov [ebp-1Ch] esi +
mov eax [ebp-1Ch] +
cmp eax [ebp+0Ch] +
jnb loc_1012DCD  +
imul eax eax +
mov edx [ebx+1Ch] +
lea eax [eax+edx+208h] +
mov edx [eax] +
sub edx esi +
jz loc_1012D9A  +
dec edx  +
jz loc_1012D8A  +
dec edx  +
jz loc_1012D68  +
dec edx  +
jz loc_1012D58  +
mov [ebp-24h] esi +
jmp loc_1012DFF  +
push 8  +
pop edx  +
add ecx edx +
mov [ebp-20h] ecx +
fld  qword ptr [ecx-8] +
fstp  qword ptr [eax+8] +
jmp loc_1012DC2  +
add ecx 4 +
mov [ebp-20h] ecx +
mov edx [ecx-4] +
mov [eax+8] edx +
add ecx 4 +
mov [ebp-20h] ecx +
mov edx [ecx-4] +
mov [eax+10h] edx +
cmp [eax+8] esi +
jnz loc_1012DC5  +
mov [eax+10h] esi +
jmp loc_1012DC5  +
push 4  +
pop edx  +
add ecx edx +
mov [ebp-20h] ecx +
mov edi [ecx-4] +
mov [eax+8] edi +
jmp loc_1012DC2  +
add ecx 4 +
mov [ebp-20h] ecx +
mov edx [ecx-4] +
mov [eax+8] edx +
cmp edx esi +
jz loc_1012DC0  +
lea edi [edx+2] +
mov si [edx] +
inc edx  +
inc edx  +
test si si +
jnz loc_1012DAD  +
sub edx edi +
sar edx 1 +
inc edx  +
xor esi esi +
jmp loc_1012DC2  +
xor edx edx +
mov [eax+10h] edx +
inc dword ptr [ebp-1Ch]  +
jmp loc_1012D25  +
***
mov eax [ebp-1Ch] +
cmp eax [ebx+20h] +
jnb loc_1012DF2  +
imul eax eax +
mov ecx [ebx+1Ch] +
lea eax [eax+ecx+208h] +
fldz   +
fstp  qword ptr [eax+8] +
mov [eax+10h] esi +
inc dword ptr [ebp-1Ch]  +
jmp loc_1012DCD  +
***
mov [ebp-20h] esi +
mov ecx ebx +
call near ptr dword_1012A5C+2  +
mov [ebp-24h] eax +
wait   +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1012E18  +
mov eax [ebp-24h] +
call __SEH_epilog4  +
retn   +
***
lea ecx [ebx+14h] +
call sub_101326E  +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_10072B4 +
mov dword ptr [esi+4] offset off_1007294 +
mov dword ptr [ebp-4] 2 +
call sub_10126C3  +
mov ecx [esi+34h] +
test ecx ecx +
jz loc_1012E5E  +
push 1  +
call sub_101141E  +
mov ecx [esi+30h] +
and dword ptr [esi+34h] 0 +
test ecx ecx +
jz loc_1012E70  +
push 1  +
call sub_101141E  +
and dword ptr [esi+30h] 0 +
lea ecx [esi+3Ch] +
call sub_100EDDC  +
lea ecx [esi+14h] +
mov byte ptr [ebp-4] 0 +
call sub_101323D  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [esi+0Ch] +
call sub_1013281  +
call __EH_epilog3  +
retn   +
***
call __SEH_prolog4  +
cmp dword ptr [ebp-24h] 0 +
jnz loc_1012FF8  +
mov ecx esi +
call sub_1011ABA  +
lea ecx [esi+14h] +
call sub_101326E  +
cmp dword ptr [ebp-24h] 0 +
jnz locret_101300D  +
mov ecx esi +
call sub_10126C3  +
retn   +
***
xor eax eax +
call __SEH_epilog4  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1012E26  +
test [ebp+arg_0] 1 +
jz loc_1013122  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1013141  +
push 1  +
call sub_1013108  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call sub_1010F46  +
test eax eax +
jz loc_101319C  +
push esi  +
push 54h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1013172  +
mov ecx eax +
call sub_101253C  +
mov esi eax +
jmp loc_1013174  +
xor esi esi +
test esi esi +
jz loc_1013195  +
push [ebp+arg_8]  +
mov ecx esi +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1012E9F  +
test eax eax +
jnz loc_1013199  +
push 1  +
mov ecx esi +
call sub_1013108  +
xor eax eax +
jmp loc_101319B  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
and dword_102059C 0 +
push offset stru_10207B8  +
call ds:InitializeCriticalSection  +
retn   +
***
push offset stru_10207B8  +
call ds:DeleteCriticalSection  +
retn   +
***
call __SEH_prolog4  +
retn   +
***
jmp loc_101322E  +
call sub_10131CE  +
cmp dword_10207D0 0 +
ja loc_1013229  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_1013252  +
push eax  +
call dword_102033C  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov eax [ecx] +
test eax eax +
jz locret_1013268  +
push 0FFFFFFFFh  +
push eax  +
call dword_1020338  +
retn   +
***
mov eax [ecx] +
test eax eax +
jz locret_101327B  +
push eax  +
call dword_1020334  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jz loc_10132A8  +
mov eax [esi+4] +
test eax eax +
jz loc_101329D  +
push eax  +
call dword_1020348  +
and dword ptr [esi+4] 0 +
push dword ptr [esi]  +
call dword_102033C  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
test eax eax +
jnz loc_10132EC  +
mov edi [ebp+dwBytes] +
mov ebx edi +
test edi edi +
jnz loc_10132CD  +
mov ebx 1000h +
push edi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [esi] eax +
test eax eax +
jnz loc_10132E7  +
xor eax eax +
jmp loc_1013328  +
mov [esi+4] edi +
jmp loc_1013323  +
mov ebx [ebp+dwBytes] +
cmp [esi+4] ebx +
jnb loc_1013323  +
mov edi ds:GetProcessHeap +
push eax  +
push 0  +
call edi  +
push eax  +
call ds:HeapFree  +
push ebx  +
push 0  +
call edi  +
push eax  +
call ds:HeapAlloc  +
mov [esi] eax +
test eax eax +
jnz loc_1013320  +
and [esi+4] eax +
and [esi+8] eax +
jmp loc_10132E3  +
mov [esi+4] ebx +
mov eax [esi] +
mov [esi+8] ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+dwBytes]  +
mov esi ecx +
call sub_10132AF  +
test eax eax +
jz loc_1013356  +
push 0  +
mov ecx esi +
call sub_10132AF  +
xor eax eax +
inc eax  +
jmp loc_1013358  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jnz loc_101337A  +
push [ebp+dwBytes]  +
call sub_10132AF  +
jmp loc_10133A3  +
push edi  +
mov edi [ebp+dwBytes] +
cmp [esi+4] edi +
jnb loc_101339D  +
push edi  +
push eax  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapReAlloc  +
test eax eax +
jz loc_10133A2  +
mov [esi] eax +
mov [esi+4] edi +
mov eax [esi] +
mov [esi+8] edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push dword_1020378  +
mov esi 80h +
push esi  +
push 3  +
push 0  +
push [ebp+arg_0]  +
mov edi ecx +
call dword_102034C  +
mov [edi] eax +
cmp eax 0FFFFFFFFh +
jz loc_10133E1  +
push eax  +
call dword_102033C  +
xor eax eax +
jmp loc_10133EF  +
call ds:GetLastError  +
sub eax 20h +
neg eax  +
sbb eax eax +
inc eax  +
mov ecx [ebp+arg_10] +
test ecx ecx +
jz loc_10133F8  +
mov [ecx] eax +
cmp [ebp+arg_8] 0 +
jz loc_1013406  +
test eax eax +
jnz loc_1013406  +
push 2  +
jmp loc_1013408  +
push 4  +
mov ecx [ebp+arg_C] +
neg ecx  +
pop eax  +
push dword_1020378  +
sbb ecx ecx +
and ecx 80000000h +
or ecx esi +
push ecx  +
push eax  +
mov eax [ebp+arg_4] +
neg eax  +
sbb eax eax +
and eax 3 +
push eax  +
push [ebp+arg_0]  +
call dword_102034C  +
xor ecx ecx +
cmp eax 0FFFFFFFFh +
setnz cl  +
mov [edi] eax +
pop edi  +
pop esi  +
mov eax ecx +
pop ebp  +
retn 14h  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
cmp eax 0FFFFFFFFh +
jz loc_1013461  +
push eax  +
call dword_102033C  +
or dword ptr [esi] 0FFFFFFFFh +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push dword ptr [ecx]  +
call dword_1020350  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push 2  +
push 0  +
mov esi ecx +
push 0  +
push dword ptr [esi]  +
call dword_1020350  +
test eax eax +
jz loc_10134B4  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push dword ptr [esi]  +
call dword_1020354  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ecx] +
test eax eax +
jz loc_10134E5  +
lea ecx [ebp+var_8] +
push ecx  +
push eax  +
call ds:GetFileSizeEx  +
test eax eax +
jz loc_10134E5  +
mov eax [ebp+var_8] +
or eax [ebp+var_4] +
jnz loc_10134E5  +
inc eax  +
leave   +
retn   +
xor eax eax +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
xor ecx ecx +
mov [eax+10h] edx +
mov edx [ebp+arg_8] +
mov dword ptr [eax+4] 1 +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov [eax+14h] edx +
mov [eax+18h] ecx +
mov [eax+1Ch] ecx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+10h] +
push edi  +
mov edi [esi+4] +
test eax eax +
jz loc_1013542  +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1013537  +
sub eax edx +
add edi eax +
mov eax [esi+14h] +
test eax eax +
jz loc_1013557  +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_101354C  +
sub eax edx +
add edi eax +
mov ecx [esi] +
mov eax [ecx] +
push 0  +
push edi  +
call dword ptr [eax+8]  +
mov [esi+18h] eax +
mov [esi+1Ch] eax +
test eax eax +
jz loc_1013571  +
xor eax eax +
mov [esi+8] edi +
inc eax  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101323D  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call dword_1020330  +
xor ecx ecx +
test eax eax +
setnz cl  +
mov [esi] eax +
pop esi  +
mov eax ecx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1013281  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
push [ebp+arg_4]  +
call dword_1020340  +
mov [esi] eax +
test eax eax +
jnz loc_10135CD  +
xor eax eax +
jmp loc_10135E7  +
push eax  +
call dword_1020344  +
mov [esi+4] eax +
test eax eax +
jnz loc_10135E4  +
mov ecx esi +
call sub_1013281  +
jmp loc_10135C9  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jz loc_1013637  +
call sub_1013524  +
test eax eax +
jz loc_1013637  +
mov eax [esi+18h] +
mov byte ptr [eax] 0 +
mov eax [esi+10h] +
test eax eax +
jz loc_1013632  +
push eax  +
push dword ptr [esi+8]  +
push dword ptr [esi+18h]  +
call sub_100EE65  +
mov eax [esi+10h] +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_1013623  +
sub eax ecx +
add [esi+18h] eax +
mov [esi+0Ch] eax +
xor eax eax +
inc eax  +
pop esi  +
retn   +
xor eax eax +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jz loc_1013696  +
mov ecx [esi+18h] +
test ecx ecx +
jz loc_1013696  +
mov eax [esi+14h] +
test eax eax +
jz loc_1013677  +
push eax  +
push dword ptr [esi+8]  +
push ecx  +
call sub_100EE65  +
mov eax [esi+14h] +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_1013668  +
sub eax ecx +
add [esi+0Ch] eax +
add [esi+18h] eax +
mov ecx [esi] +
mov eax [ecx] +
push 0  +
push dword ptr [esi+0Ch]  +
call dword ptr [eax+8]  +
mov ecx [esi+0Ch] +
mov [esi+1Ch] eax +
mov [esi+8] ecx +
add ecx eax +
xor eax eax +
mov [esi+18h] ecx +
inc eax  +
pop esi  +
retn   +
xor eax eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi] 0 +
jz loc_10136F0  +
mov eax [esi+18h] +
test eax eax +
jz loc_10136F0  +
lea ecx [ebp+arg_8] +
push ecx  +
push [ebp+arg_4]  +
push dword ptr [esi+8]  +
push eax  +
call sub_100EECD  +
xor ecx ecx +
test eax eax +
setnl cl  +
mov eax ecx +
test eax eax +
jz loc_10136F2  +
mov edx [esi+18h] +
push ebx  +
mov ecx edx +
push edi  +
lea edi [ecx+1] +
mov bl [ecx] +
inc ecx  +
test bl bl +
jnz loc_10136DB  +
sub ecx edi +
add [esi+0Ch] ecx +
add edx ecx +
pop edi  +
mov [esi+18h] edx +
pop ebx  +
jmp loc_10136F2  +
xor eax eax +
pop esi  +
pop ebp  +
retn   +
***
mov edx eax +
pop ecx  +
test edx edx +
jz loc_1013713  +
push edi  +
push 6  +
pop ecx  +
xor eax eax +
mov edi edx +
stos   +
pop edi  +
mov eax edx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi+8] 0 +
jnz loc_1013737  +
mov eax [esi+10h] +
test eax eax +
jz loc_1013737  +
push eax  +
call sub_101602B  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ds:_wcsicmp +
push offset aLog  +
push [ebp+arg_0]  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1013768  +
xor ecx ecx +
jmp loc_101377B  +
push offset aSuppress  +
push [ebp+arg_0]  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1013789  +
xor ecx ecx +
inc ecx  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_1013784  +
mov [eax] ecx +
xor eax eax +
inc eax  +
jmp loc_101378B  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
push ds:off_100735C[esi*8]  +
push [ebp+arg_0]  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10137C0  +
inc esi  +
cmp esi 7 +
jb loc_101379D  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_10137D0  +
mov ecx ds:dword_1007360[esi*8] +
mov [eax] ecx +
xor eax eax +
inc eax  +
jmp loc_10137BB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub eax 0 +
jz loc_10137F3  +
dec eax  +
jz loc_10137EE  +
dec eax  +
dec eax  +
jnz loc_1013801  +
xor eax eax +
inc eax  +
jmp loc_1013803  +
xor eax eax +
inc eax  +
cmp [ebp+arg_0] 0 +
jz loc_1013803  +
cmp [ebp+arg_0] eax +
jz loc_1013803  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub eax 0 +
jz loc_1013860  +
dec eax  +
jz loc_1013853  +
dec eax  +
jz loc_1013847  +
dec eax  +
jz loc_101383C  +
dec eax  +
jz loc_1013834  +
dec eax  +
jz loc_101382C  +
xor eax eax +
jmp loc_101386B  +
mov eax [ebp+arg_0] +
cmp eax [ebp+arg_8] +
jmp loc_1013842  +
mov eax [ebp+arg_8] +
cmp eax [ebp+arg_0] +
jmp loc_101384D  +
mov eax [ebp+arg_8] +
cmp eax [ebp+arg_0] +
sbb eax eax +
inc eax  +
jmp loc_101386B  +
mov eax [ebp+arg_0] +
cmp eax [ebp+arg_8] +
sbb eax eax +
neg eax  +
jmp loc_101386B  +
mov ecx [ebp+arg_0] +
xor eax eax +
cmp ecx [ebp+arg_8] +
setnz al  +
jmp loc_101386B  +
mov ecx [ebp+arg_0] +
xor eax eax +
cmp ecx [ebp+arg_8] +
setz al  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
sub eax 0 +
jz loc_10138D9  +
dec eax  +
jz loc_10138CA  +
dec eax  +
jz loc_10138BD  +
dec eax  +
jz loc_10138AA  +
dec eax  +
jz loc_101389D  +
dec eax  +
jnz loc_10138B7  +
fld  [ebp+arg_C] +
fcomp  [ebp+arg_0] +
fnstsw  ax +
test ah 41h +
jmp loc_10138E4  +
fld  [ebp+arg_C] +
fcomp  [ebp+arg_0] +
fnstsw  ax +
test ah 5 +
jmp loc_10138E4  +
fld  [ebp+arg_C] +
fcomp  [ebp+arg_0] +
fnstsw  ax +
test ah 1 +
jz loc_10138E6  +
xor eax eax +
pop ebp  +
retn 14h  +
fld  [ebp+arg_C] +
fcomp  [ebp+arg_0] +
fnstsw  ax +
test ah 41h +
jmp loc_10138B5  +
fld  [ebp+arg_C] +
fcomp  [ebp+arg_0] +
fnstsw  ax +
test ah 44h +
jnp loc_10138B7  +
jmp loc_10138E6  +
fld  [ebp+arg_C] +
fcomp  [ebp+arg_0] +
fnstsw  ax +
test ah 44h +
jp loc_10138B7  +
xor eax eax +
inc eax  +
jmp loc_10138B9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
push [ebp+arg_8]  +
call sub_1016009  +
mov ecx [ebp+arg_4] +
sub ecx 0 +
jz loc_1013918  +
dec ecx  +
jz loc_101390F  +
xor eax eax +
jmp loc_1013918  +
xor ecx ecx +
test eax eax +
setz cl  +
mov eax ecx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
cmp [ebp+arg_0] 0 +
jnz loc_1013936  +
xor eax eax +
jmp locret_10139C1  +
push esi  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
push offset aUUU  +
push [ebp+arg_0]  +
xor esi esi +
inc esi  +
call swscanf_s  +
add esp 14h +
cmp eax 3 +
jz loc_1013980  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
push offset aUUU_0  +
push [ebp+arg_0]  +
call swscanf_s  +
add esp 14h +
cmp eax 3 +
jz loc_1013980  +
xor eax eax +
jmp loc_10139C0  +
push edi  +
xor eax eax +
cmp [ebp+pvtime] 0 +
lea edi [ebp+SystemTime] +
stos   +
stos   +
stos   +
stos   +
mov ax word ptr [ebp+var_4] +
mov [ebp+SystemTime.wYear] ax +
mov ax word ptr [ebp+var_8] +
mov [ebp+SystemTime.wMonth] ax +
mov ax word ptr [ebp+var_C] +
mov [ebp+SystemTime.wDay] ax +
pop edi  +
jz loc_10139BE  +
push [ebp+pvtime]  +
lea eax [ebp+SystemTime] +
push eax  +
call ds:SystemTimeToVariantTime  +
mov esi eax +
neg esi  +
sbb esi esi +
neg esi  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
lea esi [ecx+0Ch] +
mov ecx esi +
call sub_1011112  +
mov ecx esi +
pop esi  +
jmp sub_100EDDC  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_1013A05  +
mov ecx [esi+4] +
shl ecx 2 +
push ecx  +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
and dword ptr [esi+4] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov eax edi +
mov esi ecx +
shl eax 2 +
push eax  +
lea ecx [esi+0Ch] +
call sub_1013362  +
mov ebx eax +
test ebx ebx +
jz loc_1013A52  +
mov eax [esi+4] +
cmp eax edi +
jnb loc_1013A4A  +
mov ecx edi +
sub ecx eax +
shl ecx 2 +
push ecx  +
lea eax [ebx+eax*4] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
xor eax eax +
mov [esi+4] edi +
mov [esi] ebx +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi [ebp+arg_4] +
mov eax [esi+8] +
sub eax 0 +
jz loc_1013AA5  +
dec eax  +
jz loc_1013A96  +
dec eax  +
dec eax  +
jnz loc_1013AB4  +
lea eax [ebp+pvtime] +
push eax  +
push [ebp+arg_0]  +
call sub_1013921  +
test eax eax +
jz loc_1013AB4  +
fld  [ebp+pvtime] +
fstp  qword ptr [esi+10h] +
xor eax eax +
inc eax  +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_0]  +
call ds:_wtoi  +
pop ecx  +
mov [esi+10h] eax +
jmp loc_1013A8E  +
push [ebp+arg_0]  +
call sub_10160B0  +
mov [esi+10h] eax +
test eax eax +
jnz loc_1013A8E  +
xor eax eax +
jmp loc_1013A91  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
push dword ptr [esi]  +
mov edi ecx +
mov ecx [ebp+arg_0] +
mov eax [ecx] +
call dword ptr [eax+18h]  +
test eax eax +
jnz loc_1013ADB  +
xor eax eax +
jmp loc_1013B39  +
mov ecx [eax+208h] +
cmp ecx [esi+8] +
jnz loc_1013AD7  +
sub ecx 0 +
jz loc_1013B26  +
dec ecx  +
jz loc_1013B11  +
dec ecx  +
dec ecx  +
jnz loc_1013AD7  +
fld  qword ptr [esi+10h] +
push ecx  +
push ecx  +
fstp  [esp+10h+var_14+4] +
push dword ptr [esi+4]  +
fld  qword ptr [eax+210h] +
push ecx  +
push ecx  +
mov ecx edi +
fstp  [esp+1Ch+var_20+4] +
call sub_1013874  +
jmp loc_1013B39  +
push dword ptr [esi+10h]  +
mov ecx edi +
push dword ptr [esi+4]  +
push dword ptr [eax+210h]  +
call sub_101380C  +
jmp loc_1013B39  +
push dword ptr [esi+10h]  +
mov ecx edi +
push dword ptr [esi+4]  +
push dword ptr [eax+210h]  +
call sub_10138F0  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi ecx +
test ebx ebx +
jnz loc_1013B58  +
xor eax eax +
jmp loc_1013BAE  +
mov eax [esi+4] +
xor edx edx +
test eax eax +
jbe loc_1013B6F  +
mov ecx [esi] +
cmp [ecx] ebx +
jz loc_1013B87  +
inc edx  +
add ecx 4 +
cmp edx eax +
jb loc_1013B63  +
push edi  +
xor edi edi +
test eax eax +
jbe loc_1013B8F  +
mov ecx [esi] +
cmp dword ptr [ecx] 0 +
jz loc_1013B8C  +
inc edi  +
add ecx 4 +
cmp edi eax +
jb loc_1013B78  +
jmp loc_1013B8F  +
xor eax eax +
inc eax  +
jmp loc_1013BAE  +
mov [ebp+arg_0] edi +
cmp edi eax +
jnz loc_1013BA2  +
inc eax  +
push eax  +
mov ecx esi +
call sub_1013A0C  +
test eax eax +
jnz loc_1013BA5  +
jmp loc_1013BAD  +
mov edi [ebp+arg_0] +
mov eax [esi] +
mov [eax+edi*4] ebx +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push 64h  +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_10073D8 +
call sub_1011444  +
and dword ptr [esi+1Ch] 0 +
mov eax esi +
pop esi  +
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+8] +
test edi edi +
jz loc_1013C06  +
push esi  +
mov esi offset dword_100734C +
movs   +
movs   +
movs   +
movs   +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push 64h  +
lea ecx [esi+4] +
call sub_1011444  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
call sub_10139CA  +
test [ebp+arg_0] 1 +
jz loc_1013C45  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call __SEH_prolog4  +
cmp dword ptr [ebp-20h] 0 +
jnz locret_1013D23  +
test edi edi +
jz locret_1013D23  +
push edi  +
mov ecx [ebp-1Ch] +
call sub_101371B  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
lea esi [edi+4] +
and dword ptr [esi+8] 0 +
mov ebx ecx +
jmp loc_1013D4E  +
push eax  +
push [ebp+arg_0]  +
mov ecx ebx +
call sub_1013ABD  +
test eax eax +
jz loc_1013D6E  +
mov ecx esi +
call sub_1011FA9  +
test eax eax +
jnz loc_1013D3F  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_1013D64  +
mov ecx [edi] +
mov [eax] ecx +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
xor eax eax +
jmp loc_1013D67  +
***
call __EH_prolog3  +
push 1Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_1013D9F  +
call sub_1013C10  +
jmp loc_1013DA1  +
xor eax eax +
test eax eax +
jz loc_1013DA8  +
and dword ptr [eax] 0 +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea esi [edi+4] +
and dword ptr [esi+8] 0 +
mov ebx ecx +
jmp loc_1013DD1  +
push eax  +
mov ecx ebx +
call sub_101371B  +
mov ecx esi +
call sub_1011FA9  +
test eax eax +
jnz loc_1013DC9  +
mov ecx esi +
call sub_10139E4  +
test edi edi +
jz loc_1013DF0  +
push 1  +
mov ecx edi +
call sub_1013C28  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+4] +
and dword ptr [esi+8] 0 +
jmp loc_1013E13  +
push eax  +
mov ecx edi +
call sub_1013DB3  +
mov ecx esi +
call sub_1011FA9  +
test eax eax +
jnz loc_1013E0B  +
mov ecx esi +
call sub_10139E4  +
and dword ptr [edi+1Ch] 0 +
pop edi  +
pop esi  +
retn   +
***
call __SEH_prolog4  +
xor esi esi +
cmp [ebp-2Ch] esi +
jnz loc_1013FF1  +
cmp [ebp-24h] esi +
jz loc_1013FF1  +
push dword ptr [ebp-24h]  +
mov ecx [ebp-28h] +
call sub_1013DB3  +
cmp ebx esi +
jz loc_1014004  +
push ebx  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp [ebp-1Ch] esi +
jz loc_101401A  +
push dword ptr [ebp-1Ch]  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp [ebp-20h] esi +
jz locret_1014030  +
push dword ptr [ebp-20h]  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
retn   +
***
call __SEH_prolog4  +
mov esi ds:GetProcessHeap +
cmp [ebp-28h] ebx +
jz loc_1014246  +
push dword ptr [ebp-28h]  +
call ds:fclose  +
pop ecx  +
cmp [ebp-34h] ebx +
jnz loc_1014253  +
mov ecx [ebp-38h] +
call sub_1013DFC  +
cmp [ebp-1Ch] ebx +
jz loc_1014265  +
push dword ptr [ebp-1Ch]  +
push ebx  +
call esi  +
push eax  +
call ds:HeapFree  +
cmp [ebp-24h] ebx +
jz loc_1014277  +
push dword ptr [ebp-24h]  +
push ebx  +
call esi  +
push eax  +
call ds:HeapFree  +
cmp [ebp-20h] ebx +
jz locret_1014289  +
push dword ptr [ebp-20h]  +
push ebx  +
call esi  +
push eax  +
call ds:HeapFree  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+1Ch] +
push edi  +
lea edi [esi+4] +
and dword ptr [edi+8] 0 +
mov [ebp+var_4] eax +
jmp loc_10142BB  +
lea ecx [ebp+var_4] +
push ecx  +
push eax  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1013D29  +
test eax eax +
jnz loc_10142C6  +
mov ecx edi +
call sub_1011FA9  +
test eax eax +
jnz loc_10142A8  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_10073D8 +
and dword ptr [ebp-4] 0 +
call sub_1013DFC  +
lea ecx [esi+4] +
call sub_10139CA  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1013DFC  +
push [ebp+arg_4]  +
mov ecx esi +
push [ebp+arg_0]  +
call sub_1014036  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call sub_101428F  +
xor ecx ecx +
test eax eax +
setnz cl  +
inc ecx  +
mov eax ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10142D4  +
test [ebp+arg_0] 1 +
jz loc_1014365  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jz loc_1014390  +
push dword ptr [ebp+0Ch]  +
push dword ptr [eax]  +
call sub_1014307  +
test eax eax +
jz loc_1014390  +
xor eax eax +
inc eax  +
jmp loc_1014392  +
xor eax eax +
pop ebp  +
retn 8  +
***
test ecx ecx +
jz locret_10143A6  +
push 1  +
call sub_101434B  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
ja loc_10143CA  +
mov eax [ebp+arg_0] +
jb loc_10143C1  +
cmp eax 0FFFFFFFFh +
ja loc_10143CA  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_10143D5  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_4] +
add eax ecx +
cmp eax ecx +
jb loc_10143F8  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_1014403  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
cmp [ebp+arg_8] 0 +
push ebx  +
push esi  +
push edi  +
jbe loc_101446C  +
mov esi [ebp+arg_4] +
mov edi [ebp+arg_0] +
add esi 8 +
mov eax [esi-8] +
mov ebx [esi+4] +
test eax eax +
jz loc_101445A  +
push dword ptr [esi]  +
mov edx [edi] +
push eax  +
mov ecx edi +
call dword ptr [edx+14h]  +
test eax eax +
jz loc_101445A  +
mov ecx [esi] +
push dword ptr [ecx]  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+18h]  +
test eax eax +
jz loc_1014476  +
mov ecx [esi-4] +
cmp ecx [eax+208h] +
jmp loc_101445C  +
test ebx ebx +
jnz loc_1014476  +
inc [ebp+var_4]  +
mov eax [ebp+var_4] +
add esi 10h +
cmp eax [ebp+arg_8] +
jb loc_1014428  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
xor eax eax +
jmp loc_101446F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
xor ecx ecx +
mov edx [ebp+arg_0] +
cmp edx dword_101F198[ecx*8] +
jz loc_101449C  +
inc ecx  +
cmp ecx 17h +
jb loc_1014488  +
jmp loc_10144BE  +
mov eax off_101F19C[ecx*8] +
mov ecx eax +
push esi  +
lea esi [ecx+2] +
mov dx [ecx] +
inc ecx  +
inc ecx  +
test dx dx +
jnz loc_10144A9  +
mov edx [ebp+arg_4] +
sub ecx esi +
sar ecx 1 +
inc ecx  +
mov [edx] ecx +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx 9000000h +
cmp eax ecx +
ja loc_101452E  +
jz loc_1014596  +
test eax eax +
jz loc_10145A6  +
cmp eax 1000000h +
jz loc_101451B  +
cmp eax 2000000h +
jz loc_101456F  +
cmp eax 3000000h +
jz loc_101457F  +
cmp eax 4000000h +
jz loc_1014596  +
cmp eax 5000000h +
jnz loc_1014558  +
mov eax offset aStatus +
jmp loc_10145AB  +
mov ecx [ebp+arg_4] +
mov eax offset aFatalerror +
mov dword ptr [ecx] 0Bh +
jmp loc_10145B4  +
cmp eax 65000000h +
jz loc_10145A6  +
cmp eax 67000000h +
jz loc_1014596  +
cmp eax 68000000h +
jz loc_101458F  +
cmp eax 6A000000h +
jz loc_101457F  +
cmp eax 6B000000h +
jz loc_101456F  +
cmp eax 70000000h +
jz loc_1014568  +
mov ecx [ebp+arg_4] +
mov eax offset aUndefined +
mov dword ptr [ecx] 0Ah +
jmp loc_10145B4  +
mov eax offset aTrace +
jmp loc_1014574  +
mov eax offset aError +
mov ecx [ebp+arg_4] +
mov dword ptr [ecx] 6 +
jmp loc_10145B4  +
mov eax offset aWarning +
mov ecx [ebp+arg_4] +
mov dword ptr [ecx] 8 +
jmp loc_10145B4  +
mov eax offset aVerbose +
jmp loc_1014584  +
mov ecx [ebp+arg_4] +
mov eax offset aInfo +
mov dword ptr [ecx] 5 +
jmp loc_10145B4  +
mov eax offset aAssert +
mov ecx [ebp+arg_4] +
mov dword ptr [ecx] 7 +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 9000000h +
cmp ecx eax +
ja loc_1014600  +
jz loc_10145FC  +
test ecx ecx +
jz loc_10145FC  +
cmp ecx 1000000h +
jz loc_10145FC  +
cmp ecx 2000000h +
jz loc_10145FC  +
cmp ecx 3000000h +
jz loc_10145FC  +
cmp ecx 4000000h +
jz loc_10145FC  +
cmp ecx 5000000h +
jnz loc_1014630  +
xor ecx ecx +
jmp loc_1014637  +
cmp ecx 65000000h +
jz loc_1014634  +
cmp ecx 67000000h +
jz loc_1014634  +
cmp ecx 68000000h +
jz loc_1014634  +
cmp ecx 6A000000h +
jz loc_1014634  +
cmp ecx 6B000000h +
jz loc_1014634  +
cmp ecx 70000000h +
jz loc_1014634  +
xor eax eax +
jmp loc_1014643  +
xor ecx ecx +
inc ecx  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_1014640  +
mov [eax] ecx +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
xor ecx ecx +
xor eax eax +
test edx edx +
jz loc_101468B  +
cmp edx 1000000h +
jz loc_101468B  +
cmp edx 2000000h +
jz loc_101468B  +
cmp edx 9000000h +
jz loc_101468B  +
cmp edx 65000000h +
jz loc_1014684  +
cmp edx 6B000000h +
jnz loc_1014690  +
xor ecx ecx +
inc ecx  +
mov eax ecx +
jmp loc_1014690  +
xor eax eax +
xor ecx ecx +
inc eax  +
mov edx [ebp+arg_4] +
test edx edx +
jz loc_1014699  +
mov [edx] ecx +
pop ebp  +
retn 8  +
***
mov eax ecx +
or dword ptr [eax+4] 0FFFFFFFFh +
and dword ptr [eax+0Ch] 0 +
mov dword ptr [eax] offset off_1007660 +
mov dword ptr [eax+8] 4000000h +
mov dword ptr [eax+10h] 1 +
retn   +
***
retn   +
***
mov edi edi +
push ecx  +
call ??3@YAXPAX@Z  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 210h +
mov eax dword_101C8C0 +
xor eax ebp +
mov [ebp-4] eax +
cmp word_101F250 3Fh +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
mov edi [ebp+0Ch] +
mov ebx ecx +
jnz loc_1014734  +
push 104h  +
lea eax [ebp-20Ch] +
push eax  +
call ds:GetWindowsDirectoryW  +
test eax eax +
jz loc_1014796  +
cmp eax 104h +
jnb loc_1014796  +
mov ax [ebp-20Ch] +
mov word_101F250 ax +
test esi esi +
jnz loc_101473D  +
xor eax eax +
inc eax  +
jmp loc_1014798  +
mov eax [esi] +
test eax eax +
jz loc_1014796  +
mov edx [edi] +
lea ecx [ebp-210h] +
push ecx  +
push eax  +
mov ecx edi +
call dword ptr [edx+14h]  +
test eax eax +
jz loc_1014796  +
mov eax [ebp-210h] +
mov [ebx+4] eax +
mov edx [edi] +
push eax  +
mov ecx edi +
call dword ptr [edx+18h]  +
test eax eax +
jz loc_1014796  +
cmp dword ptr [eax+208h] 1 +
jnz loc_1014796  +
push 0  +
push dword ptr [esi+4]  +
call sub_10145BD  +
test eax eax +
jz loc_1014796  +
mov eax [esi+4] +
mov [ebx+8] eax +
mov eax [esi+0Ch] +
mov [ebx+0Ch] eax +
mov eax [esi+8] +
mov [ebx+10h] eax +
jmp loc_1014738  +
***
xor eax eax +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100E138  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+4] +
cmp eax 0FFFFFFFFh +
jz loc_10147FB  +
mov ecx [ebp+arg_0] +
mov edx [ecx] +
push eax  +
call dword ptr [edx+18h]  +
mov edx [eax+210h] +
lea eax [ebp+arg_0] +
push eax  +
push edx  +
call sub_10145BD  +
test eax eax +
jz loc_10147FE  +
xor eax eax +
cmp [ebp+arg_0] eax +
jz loc_10147EC  +
cmp [esi+10h] eax +
jz loc_10147FB  +
push 2  +
pop eax  +
jmp loc_10147FE  +
cmp [esi+0Ch] eax +
jz loc_10147F6  +
cmp edx [esi+8] +
jmp loc_10147E5  +
cmp edx [esi+8] +
jg loc_10147E7  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax ecx +
or ecx 0FFFFFFFFh +
mov dword ptr [eax] offset off_10076B0 +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
sub esp 50h +
push esi  +
xor esi esi +
cmp eax esi +
jnz loc_101484C  +
xor eax eax +
jmp loc_10148D3  +
mov edx [eax] +
push edi  +
lea edi [ecx+0Ch] +
mov [ebp-38h] edi +
mov edi [eax+4] +
mov [ebp-50h] edx +
mov [ebp-30h] edi +
lea edx [ecx+14h] +
lea edi [ecx+4] +
mov [ebp-48h] edx +
mov edx [eax+0Ch] +
mov [ebp-28h] edi +
mov edi [eax+10h] +
mov eax [eax+8] +
mov [ebp-20h] edi +
lea edi [ecx+10h] +
mov [ebp-40h] edx +
mov [ebp-10h] eax +
push 5  +
lea eax [ebp-50h] +
xor edx edx +
inc edx  +
mov [ebp-18h] edi +
mov edi [ebp+0Ch] +
push eax  +
add ecx 8 +
push edi  +
mov dword ptr [ebp-4Ch] 3 +
mov [ebp-44h] esi +
mov [ebp-3Ch] edx +
mov [ebp-34h] esi +
mov [ebp-2Ch] edx +
mov [ebp-24h] esi +
mov [ebp-1Ch] edx +
mov [ebp-14h] esi +
mov [ebp-0Ch] esi +
mov [ebp-8] ecx +
mov [ebp-4] edx +
call sub_101440C  +
test eax eax +
jz loc_10148D2  +
mov eax [edi] +
push esi  +
push 4000h  +
mov ecx edi +
call dword ptr [eax]  +
neg eax  +
sbb eax eax +
neg eax  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+lpWideCharStr] +
test eax eax +
jz locret_1014981  +
movzx edx word ptr [eax] +
push esi  +
mov ecx eax +
test dx dx +
jz loc_1014910  +
movzx edx dx +
mov esi 100h +
cmp dx si +
jnb loc_1014910  +
inc ecx  +
inc ecx  +
movzx edx word ptr [ecx] +
test dx dx +
jnz loc_10148FC  +
cmp word ptr [ecx] 0 +
jnz loc_101491A  +
xor eax eax +
jmp loc_1014980  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_101491D  +
sub eax edx +
sar eax 1 +
lea esi [eax+1] +
mov [ebp+cchWideChar] esi +
imul esi esi +
push ebx  +
push edi  +
mov edi ds:GetProcessHeap +
push esi  +
push 0  +
call edi  +
push eax  +
call ds:HeapAlloc  +
mov ebx eax +
xor eax eax +
cmp ebx eax +
jz loc_101497C  +
push eax  +
push eax  +
push esi  +
push ebx  +
push [ebp+cchWideChar]  +
push [ebp+lpWideCharStr]  +
push eax  +
push 0FDE9h  +
call ds:WideCharToMultiByte  +
test eax eax +
jg loc_1014977  +
push ebx  +
xor ebx ebx +
push ebx  +
call edi  +
push eax  +
call ds:HeapFree  +
mov byte ptr [esi+ebx-1] 0 +
pop edi  +
mov eax ebx +
pop ebx  +
pop esi  +
leave   +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1007244 +
and dword ptr [ebp-4] 0 +
lea edi [esi+8] +
mov ecx edi +
call sub_101344B  +
mov esi [esi+4] +
test esi esi +
jz loc_10149C6  +
push esi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx edi +
call sub_101344B  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor edi edi +
mov esi ecx +
mov ecx [ebp+8] +
mov eax [ecx] +
push edi  +
lea edx [ebp-4] +
push edx  +
mov [ebp-4] edi +
call dword ptr [eax+0Ch]  +
mov ebx eax +
cmp ebx edi +
jz loc_1014A3E  +
cmp [ebp-4] edi +
jz loc_1014A3E  +
cmp [esi+0Ch] edi +
jz loc_1014A2A  +
push 3  +
lea eax [ebp+8] +
push eax  +
lea ecx [esi+8] +
mov byte ptr [ebp+8] 0EFh +
mov byte ptr [ebp+9] 0BBh +
mov byte ptr [ebp+0Ah] 0BFh +
call sub_1013487  +
test eax eax +
jz loc_1014A41  +
mov [esi+0Ch] edi +
push dword ptr [ebp-4]  +
lea ecx [esi+8] +
push ebx  +
call sub_1013487  +
neg eax  +
sbb eax eax +
neg eax  +
jmp loc_1014A41  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
mov eax [ecx] +
call dword ptr [eax+10h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+8]  +
mov esi ecx +
mov eax [esi] +
call dword ptr [eax+10h]  +
push dword ptr [esi+8]  +
call ds:FlushFileBuffers  +
pop esi  +
pop ebp  +
retn 8  +
***
mov eax ecx +
or ecx 0FFFFFFFFh +
mov dword ptr [eax] offset off_1007704 +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
mov [eax+18h] ecx +
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
sub esp 60h +
push esi  +
xor esi esi +
cmp eax esi +
jnz loc_1014ACD  +
xor eax eax +
jmp loc_1014B62  +
mov edx [eax] +
push edi  +
lea edi [ecx+4] +
mov [ebp-58h] edi +
mov edi [eax+4] +
mov [ebp-50h] edi +
mov [ebp-60h] edx +
xor edx edx +
inc edx  +
lea edi [ecx+8] +
mov [ebp-48h] edi +
mov edi [eax+8] +
mov [ebp-5Ch] edx +
mov [ebp-44h] edx +
mov [ebp-40h] edi +
mov [ebp-2Ch] edx +
lea edi [ecx+0Ch] +
lea edx [ecx+10h] +
mov [ebp-38h] edi +
mov edi [eax+0Ch] +
mov [ebp-28h] edx +
mov edx [eax+10h] +
mov eax [eax+14h] +
mov [ebp-10h] eax +
push 6  +
lea eax [ebp-60h] +
mov [ebp-30h] edi +
mov edi [ebp+0Ch] +
mov [ebp-20h] edx +
lea edx [ecx+14h] +
push eax  +
add ecx 18h +
push edi  +
mov [ebp-54h] esi +
mov [ebp-4Ch] esi +
mov [ebp-3Ch] esi +
mov [ebp-34h] esi +
mov [ebp-24h] esi +
mov [ebp-1Ch] esi +
mov [ebp-18h] edx +
mov [ebp-14h] esi +
mov [ebp-0Ch] esi +
mov [ebp-8] ecx +
mov [ebp-4] esi +
call sub_101440C  +
test eax eax +
jz loc_1014B61  +
mov eax [edi] +
push esi  +
push 4000h  +
mov ecx edi +
call dword ptr [eax]  +
neg eax  +
sbb eax eax +
neg eax  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
sub esp 60h +
push esi  +
xor esi esi +
cmp eax esi +
jnz loc_1014B85  +
xor eax eax +
jmp loc_1014C1B  +
mov edx [eax] +
push edi  +
lea edi [ecx+4] +
mov [ebp-58h] edi +
mov edi [eax+4] +
mov [ebp-50h] edi +
mov [ebp-60h] edx +
xor edx edx +
inc edx  +
lea edi [ecx+8] +
mov [ebp-48h] edi +
mov edi [eax+8] +
mov [ebp-5Ch] edx +
mov [ebp-54h] edx +
mov [ebp-44h] edx +
mov [ebp-40h] edi +
mov [ebp-2Ch] edx +
lea edi [ecx+0Ch] +
lea edx [ecx+10h] +
mov [ebp-38h] edi +
mov edi [eax+0Ch] +
mov [ebp-28h] edx +
mov edx [eax+10h] +
mov eax [eax+14h] +
mov [ebp-10h] eax +
push 6  +
lea eax [ebp-60h] +
mov [ebp-30h] edi +
mov edi [ebp+0Ch] +
mov [ebp-20h] edx +
lea edx [ecx+14h] +
push eax  +
add ecx 18h +
push edi  +
mov [ebp-4Ch] esi +
mov [ebp-3Ch] esi +
mov [ebp-34h] esi +
mov [ebp-24h] esi +
mov [ebp-1Ch] esi +
mov [ebp-18h] edx +
mov [ebp-14h] esi +
mov [ebp-0Ch] esi +
mov [ebp-8] ecx +
mov [ebp-4] esi +
call sub_101440C  +
test eax eax +
jz loc_1014C1A  +
mov eax [edi] +
push esi  +
push 4000h  +
mov ecx edi +
call dword ptr [eax+4]  +
neg eax  +
sbb eax eax +
neg eax  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
push edi  +
mov edi ecx +
push dword ptr [edi+8]  +
mov ecx esi +
call dword ptr [eax+18h]  +
mov ebx 208h +
add eax ebx +
cmp dword ptr [eax+8] 0 +
jnz loc_1014C4D  +
xor eax eax +
jmp loc_1014C9C  +
mov eax [eax+10h] +
mov [ebp+arg_0] eax +
mov eax [edi+4] +
cmp eax 0FFFFFFFFh +
jz loc_1014C49  +
mov edx [esi] +
push eax  +
mov ecx esi +
call dword ptr [edx+18h]  +
mov eax [eax+210h] +
test eax eax +
jz loc_1014C74  +
cmp eax 65000000h +
jnz loc_1014C99  +
push dword ptr [edi+0Ch]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+18h]  +
add eax ebx +
cmp dword ptr [eax+8] 0 +
jz loc_1014C99  +
lea ecx [ebp+arg_0] +
push ecx  +
push dword ptr [eax+10h]  +
push [ebp+arg_0]  +
call sub_10143DE  +
test eax eax +
jl loc_1014C49  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
test ebx ebx +
jnz loc_1014CB9  +
xor eax eax +
jmp loc_1014D2B  +
and [ebp+arg_0] 0 +
push esi  +
movzx esi word ptr [ebx] +
push edi  +
mov edi ebx +
jmp loc_1014D0D  +
push 103h  +
push esi  +
call ds:iswctype  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1014D05  +
push 5Fh  +
pop eax  +
cmp ax si +
jz loc_1014D05  +
cmp [ebp+arg_0] 0 +
jbe loc_1014D30  +
push 4  +
push esi  +
call ds:iswctype  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1014D05  +
push 2Dh  +
pop eax  +
cmp ax si +
jz loc_1014D05  +
push 2Eh  +
pop eax  +
cmp ax si +
jnz loc_1014D30  +
inc edi  +
inc edi  +
inc [ebp+arg_0]  +
movzx esi word ptr [edi] +
test si si +
jnz loc_1014CC6  +
push 3  +
push offset aXml  +
push ebx  +
call ds:_wcsnicmp  +
add esp 0Ch +
neg eax  +
sbb eax eax +
neg eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
xor eax eax +
jmp loc_1014D29  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
sub eax 0 +
jz loc_1014D6B  +
dec eax  +
jz loc_1014D64  +
dec eax  +
jz loc_1014D5D  +
dec eax  +
jz loc_1014D56  +
mov eax offset word_1006BC2 +
jmp loc_1014D70  +
mov eax offset aDatetime +
jmp loc_1014D70  +
mov eax offset aHexbinary +
jmp loc_1014D70  +
mov eax offset aInt +
jmp loc_1014D70  +
mov eax offset aString +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
push ebx  +
xor eax eax +
xor ebx ebx +
push esi  +
inc eax  +
push edi  +
mov [ebp+arg_4] ecx +
cmp ecx ebx +
jz loc_1014E4A  +
cmp [ecx] bx +
jz loc_1014E4A  +
mov edi [ebp+arg_0] +
mov esi offset aS_3 +
mov ecx [ebp+arg_4] +
movzx edx word ptr [ecx] +
mov ecx edx +
sub ecx 22h +
jz loc_1014E1F  +
sub ecx 4 +
jz loc_1014E07  +
dec ecx  +
jz loc_1014DFC  +
sub ecx 15h +
jz loc_1014DE4  +
dec ecx  +
dec ecx  +
jz loc_1014DD9  +
test edi edi +
jz loc_1014DD6  +
push edx  +
push offset aC_0  +
push edi  +
call sub_101369F  +
add esp 0Ch +
inc ebx  +
jmp loc_1014E35  +
test edi edi +
jz loc_1014DF7  +
push offset aGt  +
jmp loc_1014DED  +
test edi edi +
jz loc_1014DF7  +
push offset aLt  +
push esi  +
push edi  +
call sub_101369F  +
add esp 0Ch +
add ebx 4 +
jmp loc_1014E35  +
test edi edi +
jz loc_1014E32  +
push offset aApos  +
jmp loc_1014E28  +
test edi edi +
jz loc_1014E1A  +
push offset aAmp  +
push esi  +
push edi  +
call sub_101369F  +
add esp 0Ch +
add ebx 5 +
jmp loc_1014E35  +
test edi edi +
jz loc_1014E32  +
push offset aQuot  +
push esi  +
push edi  +
call sub_101369F  +
add esp 0Ch +
add ebx 6 +
test eax eax +
jz loc_1014E5D  +
add [ebp+arg_4] 2 +
mov ecx [ebp+arg_4] +
cmp word ptr [ecx] 0 +
jnz loc_1014DA5  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_1014E53  +
mov [eax] ebx +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_1014E66  +
mov [eax] ebx +
xor eax eax +
jmp loc_1014E56  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+4] +
mov dword ptr [esi] offset off_10071E4 +
test ecx ecx +
jz loc_1014E8C  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+8]  +
and dword ptr [esi+4] 0 +
mov eax [esi+8] +
test eax eax +
jz loc_1014EA7  +
push eax  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
mov ecx [ebp+lpMem] +
mov eax [ecx] +
xor edi edi +
push edi  +
lea edx [ebp+var_4] +
push edx  +
mov [ebp+var_10] esi +
mov [ebp+var_4] edi +
call dword ptr [eax+0Ch]  +
mov [ebp+lpMultiByteStr] eax +
cmp eax edi +
jz loc_1014FEE  +
cmp [ebp+var_4] edi +
jz loc_1014FEE  +
cmp [esi+4] edi +
jz loc_1014FEE  +
push edi  +
push edi  +
push 0FFFFFFFFh  +
push eax  +
push edi  +
push edi  +
call ds:MultiByteToWideChar  +
mov [ebp+cchWideChar] eax +
cmp eax edi +
jnz loc_1014F08  +
xor eax eax +
jmp loc_1014FF1  +
mov ebx ds:GetProcessHeap +
add eax eax +
push eax  +
push edi  +
mov [ebp+var_C] eax +
call ebx  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
mov [ebp+lpMem] esi +
cmp esi edi +
jz loc_1014F01  +
push [ebp+cchWideChar]  +
push esi  +
push 0FFFFFFFFh  +
push [ebp+lpMultiByteStr]  +
push edi  +
push edi  +
call ds:MultiByteToWideChar  +
test eax eax +
jnz loc_1014F49  +
push esi  +
push edi  +
call ebx  +
push eax  +
call ds:HeapFree  +
jmp loc_1014F01  +
mov eax [ebp+var_C] +
lea eax [eax+esi-2] +
mov [ebp+var_1C] eax +
cmp esi eax +
jnb loc_1014FE3  +
mov eax 0FFFFFF62h +
add esi 9Eh +
sub eax [ebp+lpMem] +
mov [ebp+var_18] eax +
jmp loc_1014F71  +
mov eax [ebp+var_18] +
mov ecx [ebp+cchWideChar] +
add eax esi +
sar eax 1 +
sub ecx eax +
dec ecx  +
mov [ebp+var_C] edi +
mov [ebp+lpMultiByteStr] edi +
cmp ecx 4Fh +
jbe loc_1014F98  +
movzx eax word ptr [esi] +
mov [ebp+lpMultiByteStr] eax +
xor eax eax +
mov [ebp+var_C] 1 +
mov [esi] ax +
lea eax [esi-9Eh] +
push eax  +
mov eax [ebp+var_10] +
mov ecx [eax+4] +
call sub_10168B8  +
test eax eax +
jz loc_1014FF8  +
cmp [ebp+var_C] 1 +
jnz loc_1014FE0  +
mov eax [ebp+var_10] +
mov ecx [eax+4] +
push offset asc_10077B0  +
call sub_10168B8  +
test eax eax +
jz loc_1014FF8  +
mov ax word ptr [ebp+lpMultiByteStr] +
mov [esi] ax +
add esi 9Eh +
lea eax [esi-9Eh] +
cmp eax [ebp+var_1C] +
jb loc_1014F6E  +
mov esi [ebp+lpMem] +
push esi  +
push edi  +
call ebx  +
push eax  +
call ds:HeapFree  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
push [ebp+lpMem]  +
jmp loc_1014F3D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ecx] +
push 0  +
push 0  +
call dword ptr [eax+4]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+8] +
test edi edi +
jz loc_1015037  +
push esi  +
mov esi offset dword_1007560 +
movs   +
movs   +
movs   +
movs   +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+8] +
test edi edi +
jz loc_1015059  +
push esi  +
mov esi offset dword_1007570 +
movs   +
movs   +
movs   +
movs   +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+8] +
test edi edi +
jz loc_101507B  +
push esi  +
mov esi offset dword_10075A0 +
movs   +
movs   +
movs   +
movs   +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 244h +
mov eax dword_101C8C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
push edi  +
mov edi ecx +
push dword ptr [edi+8]  +
xor ebx ebx +
mov ecx esi +
mov [ebp+var_228] edi +
mov [ebp+var_230] esi +
mov [ebp+var_234] ebx +
call dword ptr [eax+18h]  +
mov ecx [eax+210h] +
add eax 208h +
mov [ebp+var_224] ecx +
cmp ecx ebx +
jz loc_1015576  +
mov eax [eax+10h] +
push ecx  +
mov [ebp+var_218] eax +
call sub_10148DD  +
mov [ebp+lpMem] eax +
cmp eax ebx +
jz loc_1015104  +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_10150F5  +
sub eax edx +
mov [ebp+var_218] eax +
mov eax [edi+14h] +
mov [ebp+var_22C] ebx +
cmp eax 0FFFFFFFFh +
jz loc_10151B1  +
mov edx [esi] +
lea ecx [ebp+var_244] +
push ecx  +
push eax  +
mov ecx esi +
call dword ptr [edx+18h]  +
fld  qword ptr [eax+210h] +
push ecx  +
push ecx  +
fstp  [esp+264h+var_264] +
call ds:VariantTimeToSystemTime  +
movzx eax [ebp+var_238] +
push eax  +
movzx eax [ebp+var_23A] +
push eax  +
movzx eax [ebp+var_23C] +
push eax  +
movzx eax [ebp+var_23E] +
push eax  +
movzx eax word ptr [ebp+var_244+2] +
push eax  +
movzx eax word ptr [ebp+var_244] +
push eax  +
push offset aD02d02d02d02d0  +
lea eax [ebp+var_20C] +
push 104h  +
push eax  +
call sub_100C0F1  +
lea eax [ebp+var_20C] +
add esp 24h +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx bx +
jnz loc_1015188  +
sub eax ecx +
lea ecx [ebp+var_218] +
push ecx  +
sar eax 1 +
push eax  +
push [ebp+var_218]  +
call sub_10143DE  +
test eax eax +
jl loc_1015558  +
mov eax [edi+4] +
mov dword ptr [ebp+var_21C] offset aNoseverity +
cmp eax 0FFFFFFFFh +
jz loc_1015211  +
mov edx [esi] +
push eax  +
mov ecx esi +
call dword ptr [edx+18h]  +
mov edx [eax+210h] +
lea eax [ebp+var_220] +
push eax  +
push edx  +
call sub_10144C7  +
push ebx  +
push edx  +
mov dword ptr [ebp+var_21C] eax +
call sub_101464C  +
mov [ebp+var_22C] eax +
lea eax [ebp+var_218] +
push eax  +
push [ebp+var_220]  +
push [ebp+var_218]  +
call sub_10143DE  +
test eax eax +
jl loc_1015558  +
mov eax [ebp+var_228] +
mov eax [eax+10h] +
mov edi offset dword_100407C +
mov [ebp+var_210] ebx +
mov ebx edi +
cmp eax 0FFFFFFFFh +
jz loc_10152C6  +
mov edx [esi] +
push eax  +
mov ecx esi +
call dword ptr [edx+18h]  +
mov eax [eax+210h] +
mov [ebp+var_210] eax +
test eax 800000h +
jz loc_1015255  +
mov [ebp+var_22C] 1 +
and [ebp+var_220] 0 +
and eax 0FC000h +
jz loc_10152BC  +
lea ecx [ebp+var_220] +
push ecx  +
push eax  +
call sub_101447F  +
mov ebx eax +
test ebx ebx +
jnz loc_101529C  +
lea eax [ebp+var_220] +
push eax  +
mov eax [ebp+var_210] +
and eax 0F0000h +
push eax  +
call sub_101447F  +
mov ebx eax +
test ebx ebx +
jnz loc_101529C  +
and [ebp+var_220] eax +
mov ebx edi +
lea eax [ebp+var_218] +
push eax  +
push [ebp+var_220]  +
push [ebp+var_218]  +
call sub_10143DE  +
test eax eax +
jl loc_1015558  +
and [ebp+var_210] 0FFFFFh +
lea eax [ebp+var_218] +
push eax  +
push 80h  +
push [ebp+var_218]  +
call sub_10143DE  +
test eax eax +
jl loc_1015558  +
mov eax [ebp+var_218] +
lea edx [ebp+var_218] +
push edx  +
xor ecx ecx +
push ecx  +
push eax  +
call sub_10143AC  +
test eax eax +
jl loc_1015558  +
mov edi [ebp+var_218] +
mov eax [esi] +
push 0  +
push edi  +
mov ecx esi +
call dword ptr [eax+4]  +
mov esi eax +
test esi esi +
jz loc_1015558  +
test dword_10202F4 20000000h +
jz loc_1015372  +
cmp [ebp+lpMem] 0 +
lea eax [ebp+var_20C] +
jz loc_1015355  +
push [ebp+lpMem]  +
push [ebp+var_210]  +
push dword ptr [ebp+var_21C]  +
push eax  +
push offset a20s21s0x06xS  +
jmp loc_101549B  +
push [ebp+var_224]  +
push [ebp+var_210]  +
push dword ptr [ebp+var_21C]  +
push eax  +
push offset a20s21s0x06xS_0  +
jmp loc_101549B  +
mov eax [ebp+var_228] +
cmp dword ptr [eax+14h] 0FFFFFFFFh +
jz loc_1015419  +
test [ebp+var_210] 3FFFh +
lea eax [ebp+var_20C] +
jnz loc_10153CD  +
cmp [ebp+lpMem] 0 +
jz loc_10153B5  +
push [ebp+lpMem]  +
push ebx  +
push dword ptr [ebp+var_21C]  +
push eax  +
push offset a20s21s6sS  +
jmp loc_101549B  +
push [ebp+var_224]  +
push ebx  +
push dword ptr [ebp+var_21C]  +
push eax  +
push offset a20s21s6sS_0  +
jmp loc_101549B  +
cmp [ebp+lpMem] 0 +
jz loc_10153F1  +
push [ebp+lpMem]  +
push ebx  +
push [ebp+var_210]  +
push dword ptr [ebp+var_21C]  +
push eax  +
push offset a20s10s0x06x6sS  +
jmp loc_101540A  +
push [ebp+var_224]  +
push ebx  +
push [ebp+var_210]  +
push dword ptr [ebp+var_21C]  +
push eax  +
push offset a20s10s0x06x6_0  +
push edi  +
push esi  +
call sub_100EF45  +
add esp 20h +
jmp loc_10154A5  +
test [ebp+var_210] 3FFFh +
jnz loc_1015460  +
cmp [ebp+lpMem] 0 +
jz loc_1015442  +
push [ebp+lpMem]  +
push ebx  +
push dword ptr [ebp+var_21C]  +
push offset a21s6sS_0  +
jmp loc_1015454  +
push [ebp+var_224]  +
push ebx  +
push dword ptr [ebp+var_21C]  +
push offset a21s6sS  +
push edi  +
push esi  +
call sub_100EF45  +
add esp 18h +
jmp loc_10154A5  +
cmp [ebp+lpMem] 0 +
jz loc_1015483  +
push [ebp+lpMem]  +
push ebx  +
push [ebp+var_210]  +
push dword ptr [ebp+var_21C]  +
push offset a10s0x06x6sS  +
jmp loc_101549B  +
push [ebp+var_224]  +
push ebx  +
push [ebp+var_210]  +
push dword ptr [ebp+var_21C]  +
push offset a10s0x06x6sS_0  +
push edi  +
push esi  +
call sub_100EF45  +
add esp 1Ch +
test eax eax +
jl loc_1015558  +
cmp [ebp+var_22C] 0 +
jz loc_101550E  +
mov eax [ebp+var_228] +
mov eax [eax+0Ch] +
cmp eax 0FFFFFFFFh +
jz loc_101550E  +
mov ecx [ebp+var_230] +
mov edx [ecx] +
push eax  +
call dword ptr [edx+18h]  +
mov eax [eax+210h] +
test eax eax +
jnz loc_10154E6  +
test [ebp+var_210] 800000h +
jz loc_101550E  +
mov ecx esi +
lea ebx [ecx+1] +
mov dl [ecx] +
inc ecx  +
test dl dl +
jnz loc_10154EB  +
push eax  +
sub ecx ebx +
mov eax edi +
sub eax ecx +
push offset aGle0x_8x  +
push eax  +
add ecx esi +
push ecx  +
call sub_100EF45  +
add esp 10h +
test eax eax +
jl loc_1015558  +
mov eax esi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1015513  +
sub eax edx +
push offset asc_10077B8  +
sub edi eax +
push edi  +
add eax esi +
push eax  +
call sub_100EE65  +
test eax eax +
jl loc_1015558  +
lea ecx [esi+1] +
mov al [esi] +
inc esi  +
test al al +
jnz loc_1015533  +
sub esi ecx +
mov ecx [ebp+var_230] +
mov eax [ecx] +
push 0  +
push esi  +
call dword ptr [eax+8]  +
test eax eax +
jz loc_1015558  +
mov [ebp+var_234] 1 +
cmp [ebp+lpMem] 0 +
jz loc_1015576  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_234] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100E138  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi [ebp+8] +
mov esi ecx +
test edi edi +
jnz loc_10155AA  +
xor eax eax +
jmp loc_101566B  +
mov eax [edi] +
test eax eax +
jz loc_10155A3  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10155B3  +
sub eax edx +
sar eax 1 +
mov [ebp+8] eax +
jz loc_10155A3  +
mov eax [esi+4] +
push ebx  +
mov ebx ds:GetProcessHeap +
test eax eax +
jz loc_10155E0  +
push eax  +
push 0  +
call ebx  +
push eax  +
call ds:HeapFree  +
mov eax [ebp+8] +
lea eax [eax+eax+2] +
push eax  +
push 0  +
call ebx  +
push eax  +
call ds:HeapAlloc  +
mov [esi+4] eax +
test eax eax +
jnz loc_1015604  +
lea ecx [esi+8] +
call sub_101344B  +
jmp loc_101564D  +
push dword ptr [edi]  +
mov ecx [ebp+8] +
inc ecx  +
push ecx  +
push eax  +
call sub_100C026  +
test eax eax +
jl loc_101564D  +
mov eax [edi+4] +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-4] +
push ecx  +
mov ecx eax +
and ecx 1 +
push ecx  +
and eax 2 +
push eax  +
push 1  +
push dword ptr [edi]  +
lea ebx [esi+8] +
mov ecx ebx +
call sub_10133AD  +
test eax eax +
jz loc_101564D  +
push 2  +
xor edi edi +
push edi  +
push edi  +
mov ecx ebx +
call sub_1013468  +
test eax eax +
jnz loc_1015651  +
xor eax eax +
jmp loc_101566A  +
mov ecx ebx +
call sub_10134BE  +
mov [esi+0Ch] eax +
xor eax eax +
cmp [ebp-4] edi +
setnz al  +
lea eax ds:1[eax*4] +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
and [ebp+var_10] 0 +
cmp dword_101F26C 0 +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
jz loc_1015861  +
call ds:IsDebuggerPresent  +
test eax eax +
jz loc_1015861  +
mov esi [ebp+arg_0] +
push dword ptr [ebx+8]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+18h]  +
mov edi 208h +
add eax edi +
mov ecx [eax+8] +
mov [ebp+var_14] ecx +
test ecx ecx +
jnz loc_10156C7  +
xor eax eax +
jmp loc_1015864  +
mov eax [eax+10h] +
mov [ebp+arg_0] eax +
mov eax [ebx+4] +
cmp eax 0FFFFFFFFh +
jz loc_101573A  +
mov edx [esi] +
push eax  +
mov ecx esi +
call dword ptr [edx+18h]  +
mov edx [eax+210h] +
lea eax [ebp+var_C] +
push eax  +
push edx  +
call sub_10144C7  +
mov [ebp+var_4] eax +
test edx edx +
jz loc_10156FC  +
cmp edx 65000000h +
jnz loc_1015725  +
push dword ptr [ebx+0Ch]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+18h]  +
add eax edi +
mov ecx [eax+8] +
mov [ebp+var_10] ecx +
test ecx ecx +
jz loc_1015725  +
lea ecx [ebp+arg_0] +
push ecx  +
push dword ptr [eax+10h]  +
push [ebp+arg_0]  +
call sub_10143DE  +
test eax eax +
jl loc_10156C0  +
lea eax [ebp+arg_0] +
push eax  +
push dword ptr [ebp+var_C]  +
push [ebp+arg_0]  +
call sub_10143DE  +
test eax eax +
jge loc_101573E  +
jmp loc_10156C0  +
and [ebp+var_4] 0 +
push dword ptr [ebx+18h]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+18h]  +
push dword ptr [ebx+14h]  +
add eax edi +
mov [ebp+var_18] eax +
mov eax [eax+8] +
mov [ebp+var_8] eax +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+18h]  +
add eax edi +
mov ecx [eax+8] +
mov dword ptr [ebp+var_C] ecx +
test ecx ecx +
jz loc_10157A0  +
lea ecx [ebp+arg_0] +
push ecx  +
push dword ptr [eax+10h]  +
push [ebp+arg_0]  +
call sub_10143DE  +
test eax eax +
jl loc_10156C0  +
cmp [ebp+var_8] 0 +
jz loc_10157A0  +
lea eax [ebp+arg_0] +
push eax  +
mov eax [ebp+var_18] +
push dword ptr [eax+10h]  +
push [ebp+arg_0]  +
call sub_10143DE  +
test eax eax +
jl loc_10156C0  +
lea eax [ebp+arg_0] +
push eax  +
push 2000h  +
push [ebp+arg_0]  +
call sub_10143DE  +
test eax eax +
jl loc_10156C0  +
mov eax [ebp+arg_0] +
lea edx [ebp+arg_0] +
push edx  +
xor ecx ecx +
push ecx  +
push eax  +
call sub_10143AC  +
test eax eax +
jl loc_10156C0  +
mov eax [esi] +
push 0  +
push [ebp+arg_0]  +
mov ecx esi +
call dword ptr [eax+4]  +
mov edi eax +
test edi edi +
jz loc_10156C0  +
mov byte ptr [edi] 0 +
push dword ptr [ebx+10h]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+18h]  +
mov eax [eax+210h] +
xor ebx ebx +
cmp dword ptr [ebp+var_C] ebx +
jz loc_1015826  +
cmp [ebp+var_8] ebx +
jz loc_101586B  +
push [ebp+var_8]  +
push eax  +
push dword ptr [ebp+var_C]  +
push offset aSDS  +
push [ebp+arg_0]  +
push edi  +
call sub_100EF45  +
add esp 18h +
test eax eax +
jl loc_10156C0  +
push [ebp+var_14]  +
cmp [ebp+var_4] ebx +
jz loc_1015899  +
cmp [ebp+var_10] ebx +
jz loc_1015882  +
push [ebp+var_10]  +
push [ebp+var_4]  +
push edi  +
push offset aSSSS  +
push [ebp+arg_0]  +
push edi  +
call sub_100EF45  +
add esp 1Ch +
test eax eax +
jl loc_10156C0  +
push edi  +
call ds:OutputDebugStringA  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+10h]  +
push 2  +
pop eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
push eax  +
push dword ptr [ebp+var_C]  +
push offset aSD  +
push [ebp+arg_0]  +
push edi  +
call sub_100EF45  +
add esp 14h +
jmp loc_101581E  +
push [ebp+var_4]  +
push edi  +
push offset aS20sS  +
push [ebp+arg_0]  +
push edi  +
call sub_100EF45  +
add esp 18h +
jmp loc_101584B  +
push edi  +
push offset aSS_2  +
push [ebp+arg_0]  +
push edi  +
call sub_100EF45  +
add esp 14h +
jmp loc_101584B  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
or eax 0FFFFFFFFh +
mov edi 104h +
push edi  +
lea ebx [esi+1Ch] +
push ebx  +
push 0  +
mov dword ptr [esi] offset off_1007960 +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] eax +
mov [esi+10h] eax +
mov [esi+14h] eax +
mov [esi+18h] eax +
call ds:GetModuleFileNameA  +
test eax eax +
jnz loc_10158F6  +
push offset aProgramNameUnk  +
push edi  +
push ebx  +
call sub_100EE65  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+8] +
test edi edi +
jz loc_1015924  +
push esi  +
mov esi offset dword_10075B0 +
movs   +
movs   +
movs   +
movs   +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+0Ch] +
mov eax [esi] +
push edi  +
mov ecx esi +
xor edi edi +
call dword ptr [eax+1Ch]  +
mov ebx eax +
test ebx ebx +
jbe loc_101595F  +
mov eax [esi] +
push edi  +
mov ecx esi +
call dword ptr [eax+18h]  +
push eax  +
call sub_1014CA8  +
test eax eax +
jz loc_1015969  +
inc edi  +
cmp edi ebx +
jb loc_1015948  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
xor eax eax +
jmp loc_1015962  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
push offset aSElementtypeSS  +
push offset aXmlXmlnsSUuidB  +
push esi  +
lea ecx [ebp+var_20] +
call sub_10134EE  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+1Ch]  +
mov edi eax +
mov eax [esi] +
imul edi edi +
mov ecx esi +
xor ebx ebx +
call dword ptr [eax+1Ch]  +
mov [ebp+arg_4] eax +
test eax eax +
jbe loc_10159D0  +
mov eax [esi] +
push ebx  +
mov ecx esi +
call dword ptr [eax+18h]  +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_10159BA  +
sub eax ecx +
sar eax 1 +
add edi eax +
inc ebx  +
cmp ebx [ebp+arg_4] +
jb loc_10159AF  +
mov eax [ebp+var_1C] +
lea eax [eax+edi+1] +
lea ecx [ebp+var_20] +
mov [ebp+var_1C] eax +
call sub_10135F1  +
test eax eax +
jnz loc_10159EA  +
xor eax eax +
jmp loc_1015A39  +
mov eax [esi] +
mov ecx esi +
xor edi edi +
call dword ptr [eax+1Ch]  +
mov ebx eax +
test ebx ebx +
jbe loc_1015A2B  +
mov eax [esi] +
push edi  +
mov ecx esi +
call dword ptr [eax+18h]  +
mov ecx eax +
push dword ptr [ecx+208h]  +
call sub_1014D39  +
push eax  +
push edi  +
push ecx  +
lea eax [ebp+var_20] +
push offset aSAttributetype  +
push eax  +
call sub_101369F  +
add esp 14h +
test eax eax +
jz loc_10159E6  +
inc edi  +
cmp edi ebx +
jb loc_10159F9  +
lea ecx [ebp+var_20] +
call sub_1013640  +
neg eax  +
sbb eax eax +
neg eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ecx+208h] +
sub eax 0 +
jz loc_1015A78  +
dec eax  +
jz loc_1015A74  +
dec eax  +
jz loc_1015A6A  +
dec eax  +
jz loc_1015A65  +
xor eax eax +
jmp loc_1015A8C  +
push 13h  +
pop eax  +
jmp loc_1015A8C  +
mov eax [ecx+218h] +
add eax eax +
jmp loc_1015A8C  +
push 0Bh  +
jmp loc_1015A67  +
lea eax [ebp+arg_0] +
push eax  +
push dword ptr [ecx+210h]  +
push 0  +
call sub_1014D79  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi [ebp+arg_4] +
mov eax [esi+208h] +
push edi  +
xor edi edi +
sub eax edi +
jz loc_1015B55  +
dec eax  +
jz loc_1015B3D  +
dec eax  +
jz loc_1015B04  +
dec eax  +
jnz loc_1015B39  +
fld  qword ptr [esi+210h] +
lea eax [ebp+SystemTime] +
push eax  +
push ecx  +
push ecx  +
fstp  [esp+24h+var_24] +
call ds:VariantTimeToSystemTime  +
movzx eax [ebp+SystemTime.wSecond] +
push eax  +
movzx eax [ebp+SystemTime.wMinute] +
push eax  +
movzx eax [ebp+SystemTime.wHour] +
push eax  +
movzx eax [ebp+SystemTime.wDay] +
push eax  +
movzx eax [ebp+SystemTime.wMonth] +
push eax  +
movzx eax [ebp+SystemTime.wYear] +
push eax  +
push offset aD02d02dt02d02d  +
push [ebp+vtime]  +
call sub_101369F  +
add esp 20h +
jmp loc_1015B64  +
cmp [esi+218h] edi +
jbe loc_1015B34  +
mov eax [esi+210h] +
movzx eax byte ptr [eax+edi] +
push eax  +
push offset a_2x  +
push [ebp+vtime]  +
call sub_101369F  +
add esp 0Ch +
test eax eax +
jz loc_1015B39  +
inc edi  +
cmp edi [esi+218h] +
jb loc_1015B0C  +
xor eax eax +
inc eax  +
jmp loc_1015B64  +
xor eax eax +
jmp loc_1015B64  +
push dword ptr [esi+210h]  +
push offset aD_0  +
push [ebp+vtime]  +
call sub_101369F  +
add esp 0Ch +
jmp loc_1015B64  +
push edi  +
push dword ptr [esi+210h]  +
push [ebp+vtime]  +
call sub_1014D79  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
push offset asc_1007B74  +
push offset aZRow  +
push esi  +
lea ecx [ebp-28h] +
call sub_10134EE  +
mov eax [esi] +
mov ecx esi +
xor edi edi +
xor ebx ebx +
call dword ptr [eax+1Ch]  +
mov [ebp-8] eax +
test eax eax +
jbe loc_1015BD8  +
mov eax [esi] +
push ebx  +
mov ecx esi +
call dword ptr [eax+18h]  +
mov ecx eax +
mov [ebp+8] ecx +
lea edx [ecx+2] +
mov ax [ecx] +
inc ecx  +
inc ecx  +
test ax ax +
jnz loc_1015BB2  +
push dword ptr [ebp+8]  +
sub ecx edx +
sar ecx 1 +
mov [ebp-4] ecx +
call sub_1015A45  +
add eax [ebp-4] +
inc ebx  +
lea edi [edi+eax+4] +
cmp ebx [ebp-8] +
jb loc_1015BA2  +
mov eax [ebp-24h] +
lea eax [eax+edi+1] +
lea ecx [ebp-28h] +
mov [ebp-24h] eax +
call sub_10135F1  +
test eax eax +
jnz loc_1015BF2  +
xor eax eax +
jmp loc_1015C58  +
mov eax [esi] +
mov ecx esi +
xor edi edi +
call dword ptr [eax+1Ch]  +
mov [ebp+8] eax +
test eax eax +
jbe loc_1015C4A  +
mov eax [esi] +
push edi  +
mov ecx esi +
call dword ptr [eax+18h]  +
mov ebx eax +
push ebx  +
lea eax [ebp-28h] +
push offset aS_2  +
push eax  +
call sub_101369F  +
add esp 0Ch +
test eax eax +
jz loc_1015BEE  +
push ebx  +
lea eax [ebp-28h] +
push eax  +
call sub_1015A95  +
test eax eax +
jz loc_1015BEE  +
lea eax [ebp-28h] +
push offset asc_1007B60  +
push eax  +
call sub_101369F  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1015BEE  +
inc edi  +
cmp edi [ebp+8] +
jb loc_1015C02  +
lea ecx [ebp-28h] +
call sub_1013640  +
neg eax  +
sbb eax eax +
neg eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_1015C79  +
push dword ptr [ebp+8]  +
push 0  +
call sub_1015972  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
push ebx  +
cmp [ebp+0Ch] ebx +
jz loc_1015CCA  +
mov esi [ebp+8] +
mov eax [esi] +
push 13h  +
mov ecx esi +
call dword ptr [eax+4]  +
push offset aRsDataXml  +
mov edi eax +
push 13h  +
push edi  +
call sub_100EE65  +
test eax eax +
jl loc_1015CD3  +
mov eax edi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
cmp cl bl +
jnz loc_1015CB6  +
sub eax edx +
mov edx [esi] +
push ebx  +
push eax  +
mov ecx esi +
call dword ptr [edx+8]  +
jmp loc_1015CD3  +
mov ecx [ebp+8] +
mov eax [ecx] +
push ebx  +
call dword ptr [eax+4]  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2B0h +
mov eax dword_101C8C0 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
mov ebx ecx +
test esi esi +
jz loc_1015DE7  +
mov edi [esi] +
test edi edi +
jz loc_1015DE7  +
cmp dword ptr [esi+4] 0 +
jz loc_1015DE7  +
push 2ACh  +
lea eax [ebp-2B0h] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
cmp dword ptr [ebx+4] 0 +
jnz loc_1015DE7  +
cmp dword ptr [ebx+8] 0 +
jnz loc_1015DE7  +
mov eax edi +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_1015D47  +
sub eax ecx +
sar eax 1 +
lea edi [eax+eax+2] +
push edi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebx+8] eax +
test eax eax +
jz loc_1015DE7  +
push dword ptr [esi]  +
push edi  +
push eax  +
call sub_1011FD5  +
mov edi 8007007Ah +
test eax eax +
jge loc_1015D86  +
cmp eax edi +
jnz loc_1015DE7  +
push dword ptr [esi]  +
lea eax [ebp-2ACh] +
push 41h  +
push eax  +
call sub_100C026  +
test eax eax +
jge loc_1015D9E  +
cmp eax edi +
jnz loc_1015DE7  +
push dword ptr [esi+4]  +
lea eax [ebp-22Ah] +
push 101h  +
push eax  +
call sub_100C026  +
test eax eax +
jge loc_1015DBA  +
cmp eax edi +
jnz loc_1015DE7  +
and dword ptr [ebp-2B0h] 0 +
and dword ptr [ebp-28h] 0 +
sub esp 2ACh +
mov edi esp +
mov ecx 0ABh +
lea esi [ebp-2B0h] +
movs   +
call sub_101685C  +
mov [ebx+4] eax +
xor eax eax +
inc eax  +
jmp loc_1015DE9  +
xor eax eax +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100E138  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mul  [ebp+arg_8] +
test edx edx +
ja loc_1015E13  +
cmp eax 0FFFFFFFFh +
jbe loc_1015E1A  +
mov eax 80070057h +
jmp loc_1015E21  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov dword ptr [esi] offset off_1007C00 +
mov [esi+4] eax +
call ds:HeapCreate  +
mov [esi+4] eax +
mov eax esi +
pop esi  +
retn   +
***
mov dword ptr [ecx] offset off_1007C00 +
mov ecx [ecx+4] +
test ecx ecx +
jz locret_1015E67  +
push ecx  +
call ds:HeapDestroy  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1015E53  +
test byte ptr [ebp+8] 1 +
jz loc_1015E87  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+dwBytes]  +
push 8  +
push hHeap  +
call ds:HeapAlloc  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpMem] 0 +
push [ebp+dwBytes]  +
jz loc_1015ED3  +
push [ebp+lpMem]  +
push 8  +
push hHeap  +
call ds:HeapReAlloc  +
jmp loc_1015EE1  +
push 8  +
push hHeap  +
call ds:HeapAlloc  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpMem] 0 +
jnz loc_1015EFA  +
xor eax eax +
inc eax  +
jmp loc_1015F0B  +
push [ebp+lpMem]  +
push 0  +
push hHeap  +
call ds:HeapFree  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1015F35  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1015F23  +
sub eax edx +
sar eax 1 +
lea eax [eax+eax+2] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp word ptr [esi] 2Ah +
jnz loc_1015F5C  +
cmp word ptr [esi+2] 0 +
jnz loc_1015F5C  +
xor eax eax +
inc eax  +
jmp loc_1015FFF  +
mov eax [ebp+arg_4] +
movzx eax word ptr [eax] +
push ebx  +
push edi  +
test ax ax +
jz loc_1015FA5  +
mov edi ds:towlower +
push eax  +
call edi  +
movzx ebx ax +
movzx eax word ptr [esi] +
push eax  +
mov [ebp+arg_0] ebx +
call edi  +
movzx eax ax +
pop ecx  +
pop ecx  +
cmp ax 2Ah +
jz loc_1015FC0  +
cmp ax 3Fh +
jz loc_1015F94  +
cmp bx ax +
jnz loc_1015FBA  +
inc esi  +
inc esi  +
add [ebp+arg_4] 2 +
mov eax [ebp+arg_4] +
movzx eax word ptr [eax] +
test ax ax +
jnz loc_1015F6F  +
movzx eax word ptr [esi] +
test ax ax +
jz loc_1015FFA  +
cmp ax 2Ah +
jnz loc_1015FBA  +
cmp word ptr [esi+2] 0 +
jz loc_1015FFA  +
xor eax eax +
jmp loc_1015FFD  +
mov esi eax +
lea eax [esi+2] +
cmp word ptr [eax] 2Ah +
jz loc_1015FBE  +
lea ebx [esi+2] +
movzx eax word ptr [ebx] +
push eax  +
call edi  +
movzx eax ax +
pop ecx  +
test ax ax +
jz loc_1015FFA  +
cmp ax word ptr [ebp+arg_0] +
jz loc_1015FE7  +
cmp ax 3Fh +
jnz loc_1015F96  +
push [ebp+arg_4]  +
mov esi ebx +
push esi  +
call sub_1015F3E  +
test eax eax +
jnz loc_1015FFA  +
dec esi  +
dec esi  +
jmp loc_1015F96  +
xor eax eax +
inc eax  +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_1016020  +
cmp [ebp+arg_4] 0 +
jz loc_1016020  +
pop ebp  +
jmp sub_1015F3E  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_101603C  +
pop ebp  +
jmp sub_1015EEA  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_8] +
or edx 0FFFFFFFFh +
sub edx eax +
cmp edx ecx +
jnb loc_1016060  +
mov eax 80070057h +
jmp loc_1016069  +
add eax ecx +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jnz loc_1016081  +
xor eax eax +
jmp loc_10160A7  +
push esi  +
push edi  +
push [ebp+arg_0]  +
call sub_1015F14  +
mov edi eax +
push edi  +
call sub_1015E93  +
mov esi eax +
test esi esi +
jz loc_10160A3  +
push [ebp+arg_0]  +
push edi  +
push esi  +
call sub_1011FD5  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jnz loc_10160C1  +
xor eax eax +
pop ebp  +
retn 4  +
pop ebp  +
jmp loc_1016072  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_10160E0  +
push eax  +
call sub_1015EEA  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov eax ecx +
mov edi eax +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jz loc_1016130  +
mov eax [esi+4] +
test eax eax +
jz loc_1016120  +
push eax  +
call ds:UnmapViewOfFile  +
and dword ptr [esi+4] 0 +
mov ecx off_101FAF8 +
push dword ptr [esi]  +
mov eax [ecx] +
call dword ptr [eax+64h]  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1016104  +
and dword ptr [esi+8] 0 +
and dword ptr [esi+0Ch] 0 +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+28h] +
call sub_1016137  +
mov ecx [esi+24h] +
test ecx ecx +
jz loc_101617B  +
mov eax [ecx] +
call dword ptr [eax+18h]  +
mov ecx [esi+24h] +
test ecx ecx +
jz loc_1016177  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
and dword ptr [esi+24h] 0 +
mov eax [esi] +
test eax eax +
jz loc_1016190  +
mov ecx off_101FAF8 +
mov edx [ecx] +
push eax  +
call dword ptr [edx+64h]  +
and dword ptr [esi] 0 +
and dword ptr [esi+40h] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
cmp dword ptr [esi+40h] 0 +
jz loc_10161AE  +
xor eax eax +
jmp loc_1016201  +
cmp dword ptr [esi+24h] 0 +
jz loc_10161FE  +
mov ecx [esi+24h] +
mov eax [ecx] +
call dword ptr [eax+28h]  +
test eax eax +
jz loc_10161F6  +
mov ecx [esi+24h] +
mov eax [ecx] +
call dword ptr [eax+2Ch]  +
test eax eax +
jnz loc_10161F6  +
mov ecx [esi+24h] +
mov eax [ecx] +
lea edx [ebp-4] +
push edx  +
push 100h  +
push 0  +
push 0  +
call dword ptr [eax+8]  +
test eax eax +
jz loc_10161AA  +
mov ecx [esi+38h] +
mov [eax+8] ecx +
mov ecx [esi+24h] +
push dword ptr [ebp-4]  +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
mov ecx [esi+24h] +
mov eax [ecx] +
call dword ptr [eax+18h]  +
xor eax eax +
inc eax  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi ecx +
cmp [esi+8] ebx +
jb loc_1016222  +
xor eax eax +
mov [esi+4] ebx +
inc eax  +
jmp loc_1016253  +
mov eax [esi] +
push edi  +
mov edi [esi+0Ch] +
add edi ebx +
test eax eax +
jz loc_101623A  +
lea ecx [edi+edi] +
push ecx  +
push eax  +
call sub_1015EB2  +
jmp loc_1016243  +
lea eax [edi+edi] +
push eax  +
call sub_1015E93  +
test eax eax +
jz loc_1016252  +
mov [esi] eax +
xor eax eax +
mov [esi+8] edi +
mov [esi+4] ebx +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
mov ecx [ebp+arg_0] +
lea eax [eax+ecx*2] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+4] 0 +
jnz loc_1016283  +
xor eax eax +
jmp loc_101628B  +
mov eax [ecx] +
mov ecx [ebp+arg_0] +
lea eax [eax+ecx*2] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi ecx +
cmp [esi+8] ebx +
jb loc_10162AD  +
xor eax eax +
mov [esi+4] ebx +
inc eax  +
jmp loc_10162D7  +
mov eax [esi] +
push edi  +
mov edi [esi+0Ch] +
add edi ebx +
push edi  +
test eax eax +
jz loc_10162C2  +
push eax  +
call sub_1015EB2  +
jmp loc_10162C7  +
call sub_1015E93  +
test eax eax +
jz loc_10162D6  +
mov [esi] eax +
xor eax eax +
mov [esi+8] edi +
mov [esi+4] ebx +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
mov ecx [ebp+arg_0] +
lea eax [eax+ecx*4] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
mov ecx [ebp+arg_0] +
lea eax [eax+ecx*8] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+4] 0 +
jnz loc_1016326  +
xor eax eax +
jmp loc_101632B  +
mov eax [ecx] +
add eax [ebp+arg_0] +
pop ebp  +
retn 4  +
***
mov eax [ecx] +
test eax eax +
jz locret_1016340  +
push eax  +
call sub_1015EEA  +
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
mov [ecx+4] eax +
mov [ecx+8] eax +
mov [ecx] eax +
mov eax [ebp+arg_0] +
mov [ecx+0Ch] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi ecx +
cmp [esi+8] ebx +
jb loc_1016385  +
xor eax eax +
mov [esi+4] ebx +
inc eax  +
jmp loc_10163BA  +
mov eax [esi] +
push edi  +
mov edi [esi+0Ch] +
add edi ebx +
test eax eax +
jz loc_101639F  +
mov ecx edi +
shl ecx 2 +
push ecx  +
push eax  +
call sub_1015EB2  +
jmp loc_10163AA  +
mov eax edi +
shl eax 2 +
push eax  +
call sub_1015E93  +
test eax eax +
jz loc_10163B9  +
mov [esi] eax +
xor eax eax +
mov [esi+8] edi +
mov [esi+4] ebx +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi ecx +
cmp [esi+8] ebx +
jb loc_10163DE  +
xor eax eax +
mov [esi+4] ebx +
inc eax  +
jmp loc_1016413  +
mov eax [esi] +
push edi  +
mov edi [esi+0Ch] +
add edi ebx +
test eax eax +
jz loc_10163F8  +
mov ecx edi +
shl ecx 3 +
push ecx  +
push eax  +
call sub_1015EB2  +
jmp loc_1016403  +
mov eax edi +
shl eax 3 +
push eax  +
call sub_1015E93  +
test eax eax +
jz loc_1016412  +
mov [esi] eax +
xor eax eax +
mov [esi+8] edi +
mov [esi+4] ebx +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+4] +
inc eax  +
push eax  +
call ?SetSize@?$CDynamicArray@_KPA_K@@QAEHK@Z  +
mov eax [esi] +
mov ecx [ebp+arg_0] +
mov esi [esi+4] +
mov edx [ecx] +
mov [eax+esi*8-8] edx +
mov ecx [ecx+4] +
mov [eax+esi*8-4] ecx +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
call sub_1016137  +
mov ecx [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
call sub_1016104  +
call __EH_epilog3  +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [ebp-4] 2 +
call sub_1016150  +
lea ecx [esi+28h] +
mov byte ptr [ebp-4] 1 +
call sub_1016466  +
lea ecx [esi+20h] +
call sub_10160CC  +
mov esi [esi+4] +
test esi esi +
jz loc_10164D3  +
push esi  +
call sub_1015EEA  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [esi+18h] +
test ecx ecx +
jz loc_10164F4  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
test [ebp+arg_0] 1 +
jz loc_1016501  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
xor edi edi +
mov esi ecx +
cmp ebx edi +
jnz loc_1016526  +
xor eax eax +
jmp loc_101659C  +
mov [ebp+var_4] edi +
cmp [esi+18h] edi +
jnz loc_101658C  +
mov ecx [esi+24h] +
mov eax [ecx] +
lea edx [ebp+var_8] +
push edx  +
push 100h  +
push edi  +
push edi  +
call dword ptr [eax+8]  +
cmp eax edi +
jz loc_1016522  +
xor ecx ecx +
cmp [eax+14h] edi +
jbe loc_1016581  +
mov edi [ebx] +
lea edx [eax+18h] +
cmp edi [edx] +
jnz loc_1016560  +
mov ebx [ebp+arg_0] +
mov ebx [ebx+4] +
cmp ebx [edx+4] +
jz loc_101656B  +
inc ecx  +
add edx 28h +
cmp ecx [eax+14h] +
jb loc_1016551  +
jmp loc_1016581  +
imul ecx ecx +
lea eax [ecx+eax+18h] +
add dword ptr [eax+10h] 0FFFFFFFFh +
mov [ebp+var_4] 1 +
adc dword ptr [eax+14h] 0FFFFFFFFh +
mov ecx [esi+24h] +
push [ebp+var_8]  +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
mov ecx [ebp+arg_0] +
push 1  +
call sub_10164DE  +
dec dword ptr [esi+40h]  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
lea ebx [esi+4] +
xor edi edi +
push edi  +
mov ecx ebx +
call ?GetBuffer@?$CDynamicArray@GPAG@@QAEPAGI@Z  +
test eax eax +
jz loc_10165CC  +
push edi  +
mov ecx ebx +
call ?GetBuffer@?$CDynamicArray@GPAG@@QAEPAGI@Z  +
mov ebx eax +
jmp loc_10165D1  +
mov ebx offset aUnnamed +
mov ecx off_101FAF8 +
mov eax [ecx] +
push edi  +
push edi  +
call dword ptr [eax]  +
push eax  +
call sub_100E909  +
push eax  +
push offset aCblackboardClo  +
push offset aDW7rtmBaseNt_0  +
push 14DEh  +
push edi  +
push offset aD  +
push 90000h  +
push ebx  +
push offset aCblackboardC_0  +
push 4000009h  +
call sub_100B725  +
add esp 0Ch +
push eax  +
call sub_100F2DD  +
mov eax [esi+44h] +
cmp eax edi +
jz loc_1016631  +
push eax  +
mov ecx esi +
call sub_101650D  +
test eax eax +
jnz loc_101662E  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
mov [esi+44h] edi +
pop edi  +
mov ecx esi +
pop esi  +
pop ebx  +
jmp loc_101619B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+4] +
inc eax  +
push eax  +
call ?SetSize@?$CDynamicArray@PAUSEnumBinContext@@PAPAU1@@@QAEHK@Z  +
mov eax [esi+4] +
mov edx [ebp+arg_0] +
mov ecx [esi] +
mov edx [edx] +
mov [ecx+eax*4-4] edx +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax [ecx+4] +
test eax eax +
jz locret_101667B  +
dec eax  +
push eax  +
call ?SetSize@?$CDynamicArray@PAUSEnumBinContext@@PAPAU1@@@QAEHK@Z  +
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
mov edx [ebp+arg_4] +
push [ebp+arg_0]  +
mov [edx] eax +
call ?Add@?$CDynamicArray@_KPA_K@@QAEHAA_K@Z  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
xor ecx ecx +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax] ecx +
mov ecx [ebp+arg_0] +
mov [eax+0Ch] ecx +
pop ebp  +
retn 4  +
***
xor eax eax +
mov [ecx+4] eax +
mov [ecx+8] eax +
mov [ecx] eax +
mov dword ptr [ecx+0Ch] 0Ah +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
xor edi edi +
mov [ebp-4] edi +
cmp [esi+48h] edi +
jz loc_1016752  +
push edi  +
lea ecx [esi+4] +
call ?GetBuffer@?$CDynamicArray@GPAG@@QAEPAGI@Z  +
mov ecx off_101FAF8 +
push edi  +
mov ebx eax +
mov eax [ecx] +
push edi  +
call dword ptr [eax]  +
push eax  +
call sub_100E909  +
push eax  +
push offset aCblackboardCbl  +
push offset aDW7rtmBaseNt_0  +
push 14A6h  +
push edi  +
push offset aD  +
push 90000h  +
push ebx  +
push dword ptr [esi+48h]  +
push offset aCblackboardM_l  +
push 3000007h  +
call sub_100B725  +
add esp 10h +
push eax  +
call sub_100F2DD  +
mov ecx esi +
call sub_10165A8  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_1016495  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10166E3  +
test [ebp+arg_0] 1 +
jz loc_1016789  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
mov ebx [esi+8] +
push edi  +
xor edi edi +
test ebx ebx +
jbe loc_10167C3  +
mov eax [esi+4] +
lea eax [eax+edi*8] +
test eax eax +
jz loc_10167BE  +
mov eax [eax] +
test eax eax +
jz loc_10167BE  +
push 1  +
mov ecx eax +
call sub_101676F  +
inc edi  +
cmp edi ebx +
jb loc_10167A5  +
push 0  +
lea ecx [esi+4] +
call ?SetSize@?$CDynamicArray@_KPA_K@@QAEHK@Z  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [ebp-4] 1 +
call sub_1016795  +
mov eax [esi+14h] +
test eax eax +
jz loc_1016800  +
push eax  +
call sub_1015EEA  +
mov esi [esi+4] +
test esi esi +
jz loc_101680D  +
push esi  +
call sub_1015EEA  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10167D6  +
test [ebp+arg_0] 1 +
jz loc_1016832  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov ecx dword_10207E4 +
test ecx ecx +
jz locret_1016856  +
push 1  +
call sub_1016818  +
and dword_10207E4 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2B0h +
mov eax dword_101C8C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
mov eax 0ABh +
mov ecx eax +
lea esi [ebp+arg_0] +
lea edi [ebp+var_2B0] +
movs   +
and [ebp+var_2B0] 0 +
sub esp 2ACh +
mov ecx eax +
mov edi esp +
lea esi [ebp+var_2B0] +
movs   +
call sub_10174FE  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100E138  +
leave   +
retn 2ACh  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+arg_0]  +
lea esi [ecx+8] +
sub esp 14h +
push 5  +
pop ecx  +
mov edi esp +
movs   +
call sub_1017A2D  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
jmp ds:GetLastError  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:SetLastError  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:GetVersionExA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:GetVersionExW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:GetSystemInfo  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:GlobalMemoryStatus  +
***
jmp ds:GetCurrentProcess  +
***
jmp ds:GetProcessHeap  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:HeapCreate  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:HeapDestroy  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:HeapAlloc  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:HeapReAlloc  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:HeapFree  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:HeapCompact  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:HeapValidate  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:HeapWalk  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:GlobalAlloc  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:GlobalLock  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:GlobalUnlock  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:GlobalFree  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:GlobalSize  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:CopyFileW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:MoveFileW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:MoveFileExW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:CloseHandle  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:GetLogicalDriveStringsW  +
***
jmp ds:GetLogicalDrives  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:GetDriveTypeW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:ReadFile  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:WriteFile  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:SetFilePointer  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:DuplicateHandle  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:GetWindowsDirectoryW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:CreateDirectoryW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:GetFileAttributesW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:SetFileAttributesW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:GetTempPathW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:GetTempFileNameW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:GetFullPathNameW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:GetShortPathNameW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:RemoveDirectoryW  +
***
jmp ds:GetTickCount  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:FindFirstFileW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:FindNextFileW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:FindClose  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:CreateProcessW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:CreateProcessA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:OpenProcess  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
call ds:ExitProcess  +
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:TerminateProcess  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:GetVolumeInformationW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:SetFileTime  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:SetEndOfFile  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:CreateThread  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:CreateEventW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:OpenEventW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:WaitForMultipleObjects  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:SetEvent  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:ResetEvent  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:Sleep  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:GetComputerNameW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:InitializeCriticalSection  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:EnterCriticalSection  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:LeaveCriticalSection  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:DeleteCriticalSection  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:GetOverlappedResult  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:GetFileType  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:GetFileSize  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:SetErrorMode  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:GetDiskFreeSpaceW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:GetDiskFreeSpaceExW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:MapViewOfFile  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:RaiseException  +
***
jmp ds:GetCurrentThreadId  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:GetPrivateProfileStringW  +
***
jmp ds:GetCommandLineW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:GetProcAddress  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:FreeLibrary  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:LoadLibraryW  +
***
jmp ds:DebugBreak  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:GetExitCodeProcess  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:ExpandEnvironmentStringsW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:GetLocaleInfoW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:VirtualAlloc  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:VirtualFree  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:RegLoadKeyW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:RegUnLoadKeyW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:RegCreateKeyExW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:RegOpenKeyExW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:RegQueryValueExW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:RegQueryInfoKeyW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:RegEnumKeyExW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:RegSetValueExW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:RegEnumValueW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:RegDeleteKeyW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:RegDeleteValueW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:RegCloseKey  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:RegFlushKey  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:GetUserNameW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:LookupAccountNameW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:LookupAccountSidW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:OpenProcessToken  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:GetTokenInformation  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:AllocateAndInitializeSid  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:FreeSid  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:IsValidSid  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:EqualSid  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:GetSecurityInfo  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:SetSecurityInfo  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:LookupPrivilegeValueW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:AdjustTokenPrivileges  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:CryptAcquireContextW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:CryptCreateHash  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:CryptDuplicateHash  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:CryptHashData  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:CryptDeriveKey  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:CryptDuplicateKey  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:CryptGenRandom  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:CryptGetHashParam  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:CryptGetKeyParam  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:CryptSetKeyParam  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:CryptEncrypt  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:CryptDecrypt  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:CryptDestroyKey  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:CryptDestroyHash  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:CryptReleaseContext  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:GetSecurityDescriptorOwner  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:GetSecurityDescriptorGroup  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:GetSecurityDescriptorDacl  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:GetSecurityDescriptorSacl  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:RegSetKeySecurity  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:SetSecurityDescriptorOwner  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:InitializeSecurityDescriptor  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:SetNamedSecurityInfoW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_1018322  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp dword_10207E8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp dword_10207F0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp dword_10207F8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp dword_1020800  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp dword_1020808  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp dword_1020810  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp dword_1020818  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp dword_1020820  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp dword_1020828  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:CoInitialize  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:CoInitializeEx  +
***
jmp ds:CoUninitialize  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:CoCreateInstance  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:CoTaskMemAlloc  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:CoTaskMemFree  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:GetHGlobalFromStream  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:CreateStreamOnHGlobal  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:VariantClear  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:ExtractIconExW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:ShellExecuteExW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:PostMessageW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:LoadIconW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:MessageBoxW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:MessageBoxA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:WSAStartup  +
***
jmp ds:WSACleanup  +
***
jmp ds:WSAGetLastError  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:socket  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:closesocket  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:inet_addr  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
call ds:inet_ntoa  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:htonl  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:htons  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:gethostname  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:gethostbyname  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:getsockopt  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:setsockopt  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:send  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:bind  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:ioctlsocket  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:listen  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:shutdown  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:getsockname  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:recv  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:recvfrom  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:sendto  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:connect  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:select  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:accept  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:WSAIoctl  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_1017A9E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2B0h +
mov eax dword_101C8C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov ecx 0ABh +
lea esi [ebp+arg_0] +
lea edi [ebp+var_2B0] +
push 1Ch  +
movs   +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1017540  +
and dword ptr [eax+4] 0 +
mov dword ptr [eax] offset off_100B060 +
mov ebx eax +
jmp loc_1017542  +
xor ebx ebx +
test ebx ebx +
jz loc_1017573  +
mov eax [ebx] +
sub esp 2ACh +
mov edi esp +
mov ecx 0ABh +
lea esi [ebp+var_2B0] +
movs   +
mov ecx ebx +
call dword ptr [eax]  +
mov [ebx+4] eax +
test eax eax +
jnz loc_1017573  +
mov eax [ebx] +
push 1  +
mov ecx ebx +
call dword ptr [eax+8]  +
xor ebx ebx +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_100E138  +
leave   +
retn 2ACh  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2B0h +
mov eax dword_101C8C0 +
xor eax ebp +
mov [ebp-4] eax +
push esi  +
push edi  +
mov eax ecx +
mov ecx 0ABh +
lea esi [ebp+8] +
lea edi [ebp-2B0h] +
movs   +
lea ecx [ebp-2B0h] +
push ecx  +
add eax 8 +
push eax  +
call sub_10176E6  +
mov ecx [ebp-4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100E138  +
leave   +
retn 2ACh  +
***
add ecx 8 +
push ecx  +
call sub_10178B5  +
retn   +
***
cmp dword ptr [ecx+4] 0 +
mov dword ptr [ecx] offset off_100B060 +
jz locret_10175FD  +
add ecx 8 +
push ecx  +
call sub_10178B5  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10175E8  +
test byte ptr [ebp+8] 1 +
jz loc_101761D  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call __SEH_prolog4  +
mov [ebp+var_1C] 1 +
xor esi esi +
mov [ebp+ms_exc.disabled] esi +
mov edi [ebp+arg_0] +
cmp edi esi +
jz loc_1017665  +
push esi  +
push esi  +
push 3  +
push esi  +
push esi  +
push 0C0000000h  +
push offset FileName  +
call ds:CreateFileW  +
mov [edi] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1017675  +
mov [ebp+var_1C] esi +
jmp loc_1017675  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
and dword ptr [ebp-1Ch] 0 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax [ebp+var_1C] +
call __SEH_epilog4  +
retn 4  +
***
call __SEH_prolog4  +
xor ecx ecx +
mov [ebp+ms_exc.disabled] ecx +
mov esi [ebp+arg_0] +
cmp esi ecx +
jnz loc_10176A9  +
mov [ebp+var_1C] ecx +
jmp loc_10176CF  +
mov eax [esi] +
cmp eax 0FFFFFFFFh +
jz loc_10176A4  +
push eax  +
call ds:CloseHandle  +
mov [ebp+var_1C] eax +
cmp eax 1 +
jnz loc_10176CF  +
or dword ptr [esi] 0FFFFFFFFh +
jmp loc_10176CF  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
and dword ptr [ebp-1Ch] 0 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax [ebp+var_1C] +
call __SEH_epilog4  +
retn 4  +
***
call __SEH_prolog4_GS  +
cmp [ebp-3Ch] esi +
jz loc_1017891  +
push dword ptr [ebp-3Ch]  +
call ds:LocalFree  +
cmp [ebp-34h] esi +
jnz locret_10178AF  +
cmp dword ptr [ebp-38h] 0FFFFFFFFh +
jz locret_10178AF  +
lea eax [ebp-38h] +
push eax  +
call sub_101768C  +
xor eax eax +
mov edi [ebp-40h] +
stos   +
stos   +
stos   +
stos   +
stos   +
retn   +
***
call __SEH_prolog4_GS  +
mov ebx [ebp+arg_0] +
xor edx edx +
mov [ebp+ms_exc.disabled] edx +
cmp ebx edx +
jz loc_1017920  +
cmp ebx 0FFFFFFFFh +
jz loc_1017920  +
mov ecx [ebx+10h] +
cmp ecx 0FFFFFFFFh +
jz loc_1017920  +
cmp ecx edx +
jz loc_1017920  +
xor eax eax +
lea edi [ebp+InBuffer] +
stos   +
stos   +
stos   +
stos   +
stos   +
mov esi ebx +
lea edi [ebp+InBuffer] +
movs   +
movs   +
movs   +
movs   +
push edx  +
lea eax [ebp+BytesReturned] +
push eax  +
push edx  +
push edx  +
push 14h  +
lea eax [ebp+InBuffer] +
push eax  +
push 228008h  +
push ecx  +
call ds:DeviceIoControl  +
mov [ebp+var_34] eax +
lea eax [ebx+10h] +
push eax  +
call sub_101768C  +
xor eax eax +
mov edi ebx +
stos   +
stos   +
stos   +
stos   +
jmp loc_1017930  +
mov [ebp+var_34] edx +
jmp loc_1017930  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
and dword ptr [ebp-34h] 0 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax [ebp+var_34] +
call __SEH_epilog4_GS  +
retn 4  +
***
call __SEH_prolog4_GS  +
test ebx ebx +
jz locret_1017A27  +
push ebx  +
call ds:LocalFree  +
retn   +
***
call __SEH_prolog4_GS  +
push 5  +
pop ecx  +
lea esi [ebp+arg_0] +
lea edi [ebp+var_30] +
movs   +
mov esi [ebp+arg_14] +
and [ebp+ms_exc.disabled] 0 +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1017A50  +
sub eax edx +
sar eax 1 +
add eax eax +
jz loc_1017A82  +
push eax  +
push esi  +
sub esp 14h +
push 5  +
pop ecx  +
lea esi [ebp+var_30] +
mov edi esp +
movs   +
call sub_1017947  +
mov [ebp+var_34] eax +
jmp loc_1017A86  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
and [ebp+var_34] 0 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax [ebp+var_34] +
call __SEH_epilog4_GS  +
retn 18h  +
***
jmp ds:__WSAFDIsSet  +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_101C8C0 +
xor eax ebp +
push eax  +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
mov ecx [ebp-0Ch] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-1Ch] +
xor ecx ebp +
call sub_100E138  +
jmp __SEH_epilog4  +
***
jmp ds:_purecall  +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
dec [ebp+arg_8]  +
js loc_1017BCB  +
mov ecx [ebp+arg_0] +
sub ecx [ebp+arg_4] +
mov [ebp+arg_0] ecx +
call [ebp+arg_C]  +
jmp loc_1017B8B  +
mov eax [ebp-14h] +
mov [ebp-1Ch] eax +
mov eax [ebp-1Ch] +
mov eax [eax] +
mov [ebp-20h] eax +
mov eax [ebp-20h] +
cmp dword ptr [eax] 0E06D7363h +
jz loc_1017BC2  +
mov dword ptr [ebp-24h] 0 +
mov eax [ebp-24h] +
retn   +
call ds:?terminate@@YAXXZ  +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 10h  +
***
call __SEH_prolog4  +
cmp dword ptr [ebp-1Ch] 0 +
jnz $LN9  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1017B7B  +
retn   +
***
call __SEH_prolog4  +
cmp dword ptr [ebp-20h] 0 +
jnz $LN10_0  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1017B7B  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ds:??1type_info@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_1017CD8  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax [esp+8] +
mov ecx [esp+10h] +
or ecx eax +
mov ecx [esp+0Ch] +
jnz loc_1017D09  +
mov eax [esp+4] +
mul  ecx +
retn 10h  +
***
push ebx  +
mul  ecx +
mov ebx eax +
mov eax [esp+8] +
mul  dword ptr [esp+14h] +
add ebx eax +
mov eax [esp+8] +
mul  ecx +
add edx ebx +
pop ebx  +
retn 10h  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_1017D3E  +
push eax  +
call free  +
and dword ptr [esi] 0 +
pop ecx  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push 18h  +
mov esi ecx +
push 0  +
push esi  +
call memset  +
add esp 0Ch +
mov eax esi +
pop esi  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
push ecx  +
call ds:InitializeCriticalSection  +
and [ebp+var_1C] 0 +
jmp loc_1017DA3  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000017h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-1Ch] 8007000Eh +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax [ebp+var_1C] +
call __SEH_epilog4  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jnz loc_1017DCB  +
mov eax 80070057h +
jmp loc_1017DDC  +
cmp dword ptr [eax] 2Ch +
jnz loc_1017DC4  +
and dword ptr [eax+1Ch] 0 +
lea ecx [eax+4] +
call sub_1017D68  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jl loc_1017DFF  +
cmp eax [ecx+4] +
jge loc_1017DFF  +
mov ecx [ecx] +
lea eax [ecx+eax*2] +
pop ebp  +
retn 4  +
***
push 0  +
push 0  +
push 1  +
push 0C000008Ch  +
call ds:RaiseException  +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
xor edi edi +
cmp esi edi +
jnz loc_1017E4E  +
mov eax 80070057h +
jmp loc_1017E95  +
mov eax [esi] +
cmp eax edi +
jz loc_1017E93  +
cmp eax 2Ch +
jnz loc_1017E47  +
cmp [esi+24h] edi +
jle loc_1017E7E  +
push ebx  +
lea ebx [esi+20h] +
push edi  +
mov ecx ebx +
call loc_1017DE5  +
movzx eax word ptr [eax] +
push dword ptr [ebp+0Ch]  +
push eax  +
call ds:UnregisterClassA  +
inc edi  +
cmp edi [esi+24h] +
jl loc_1017E62  +
pop ebx  +
lea ecx [esi+20h] +
call sub_1017D29  +
lea eax [esi+4] +
push eax  +
call ds:DeleteCriticalSection  +
and dword ptr [esi] 0 +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+18h] +
call sub_1017D4D  +
xor eax eax +
mov [esi+30h] eax +
mov [esi+34h] eax +
mov [esi+38h] eax +
mov eax esi +
pop esi  +
retn   +
***
lea ecx [esi+30h] +
pop esi  +
jmp sub_1017D29  +
***
mov byte_10207D8 1 +
and dword ptr [esi] 0 +
mov eax esi +
pop esi  +
retn   +
***
push ebp  +
mov ebp esp +
sub esp 98h +
mov eax dword_101C8C0 +
xor eax ebp +
mov [ebp-4] eax +
push esi  +
mov esi ecx +
call sub_1017EA0  +
mov eax 1000000h +
push 94h  +
mov [esi+8] eax +
mov [esi+4] eax +
lea eax [ebp-98h] +
push 0  +
push eax  +
mov dword ptr [esi] 3Ch +
mov byte ptr [esi+0Ch] 0 +
call memset  +
add esp 0Ch +
lea eax [ebp-98h] +
push eax  +
mov dword ptr [ebp-98h] 94h +
call ds:GetVersionExA  +
cmp dword ptr [ebp-88h] 2 +
jnz loc_1017F7E  +
cmp dword ptr [ebp-94h] 5 +
jb loc_1017F9F  +
jmp loc_1017F9B  +
cmp dword ptr [ebp-88h] 1 +
jnz loc_1017F9F  +
cmp dword ptr [ebp-94h] 4 +
ja loc_1017F9B  +
jnz loc_1017F9F  +
cmp dword ptr [ebp-90h] 0 +
jbe loc_1017F9F  +
mov byte ptr [esi+0Ch] 1 +
lea ecx [esi+18h] +
mov dword ptr [esi+10h] 800h +
mov dword ptr [esi+14h] offset dword_100B090 +
call sub_1017D68  +
test eax eax +
jge loc_1017FC0  +
mov byte_10207D8 1 +
mov ecx [ebp-4] +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_100E138  +
leave   +
retn   +
***
cmp byte ptr [ecx+8] 0 +
mov dword ptr [ecx] offset off_100B0A0 +
jz locret_101800D  +
mov ecx [ecx+4] +
test ecx ecx +
jz locret_101800D  +
push ecx  +
call ds:HeapDestroy  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 0  +
push dword ptr [ecx+4]  +
call ds:HeapAlloc  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
jz loc_1018048  +
push dword ptr [ebp+8]  +
push 0  +
push dword ptr [ecx+4]  +
call ds:HeapFree  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+8] eax +
jnz loc_1018066  +
push dword ptr [ebp+0Ch]  +
mov eax [ecx] +
call dword ptr [eax]  +
jmp loc_1018087  +
cmp [ebp+0Ch] eax +
jnz loc_1018077  +
push dword ptr [ebp+8]  +
mov eax [ecx] +
call dword ptr [eax+4]  +
xor eax eax +
jmp loc_1018087  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push eax  +
push dword ptr [ecx+4]  +
call ds:HeapReAlloc  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 0  +
push dword ptr [ecx+4]  +
call ds:HeapSize  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1017FF3  +
test byte ptr [ebp+8] 1 +
jz loc_10180C6  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+8] +
mov [eax+4] ecx +
mov dword ptr [eax] offset off_100B0B4 +
xor ecx ecx +
mov dword ptr [eax+14h] 2 +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov [eax+18h] cx +
mov [eax+1Ah] cx +
mov [eax+8] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+4] +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+4]  +
***
ror byte ptr [ebp-0FBDEBBFh] cl +
xadd [eax] edx +
lea eax [ecx+8] +
retn   +
***
mov eax ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_100B0B4 +
jz loc_1018151  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [ebp+arg_4] +
push esi  +
lea ecx [edx+eax] +
lea esi [ecx-1] +
cmp esi edx +
pop esi  +
jge loc_1018179  +
mov eax [ebp+arg_8] +
jmp loc_101817F  +
dec eax  +
not eax  +
dec ecx  +
and eax ecx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push esi  +
push edi  +
push 7FFFFFFFh  +
push 8  +
inc eax  +
push eax  +
mov esi ecx +
call sub_101815D  +
push dword ptr [ebp+0Ch]  +
mov edi eax +
push edi  +
lea eax [ebp+8] +
push eax  +
call sub_1015DFF  +
test eax eax +
jl loc_10181E8  +
push dword ptr [ebp+8]  +
lea eax [ebp+8] +
push 10h  +
push eax  +
call sub_1016045  +
test eax eax +
jl loc_10181E8  +
mov ecx [esi+4] +
push dword ptr [ebp+8]  +
mov eax [ecx] +
call dword ptr [eax]  +
test eax eax +
jz loc_10181E8  +
dec edi  +
and dword ptr [eax+4] 0 +
mov [eax] esi +
mov dword ptr [eax+0Ch] 1 +
mov [eax+8] edi +
jmp loc_10181EA  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
push esi  +
push edi  +
push 7FFFFFFFh  +
push 8  +
inc eax  +
push eax  +
mov esi ecx +
call sub_101815D  +
push dword ptr [ebp+10h]  +
mov edi eax +
push edi  +
lea eax [ebp+0Ch] +
push eax  +
call sub_1015DFF  +
test eax eax +
jl loc_101824C  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp+0Ch] +
push 10h  +
push eax  +
call sub_1016045  +
test eax eax +
jl loc_101824C  +
push dword ptr [ebp+0Ch]  +
mov ecx [esi+4] +
push dword ptr [ebp+8]  +
mov eax [ecx] +
call dword ptr [eax+8]  +
test eax eax +
jz loc_101824C  +
dec edi  +
mov [eax+8] edi +
jmp loc_101824E  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push 14h  +
mov ecx offset dword_100B120 +
pop edi  +
mov dl [ecx] +
cmp dl 2Dh +
jz loc_10182A0  +
movzx edx dl +
movzx edx byte ptr [edx+esi] +
shr edx 4 +
mov dx ds:word_100B134[edx*2] +
mov [eax] dx +
movzx edx byte ptr [ecx] +
movzx edx byte ptr [edx+esi] +
inc eax  +
inc eax  +
and edx 0Fh +
mov dx ds:word_100B134[edx*2] +
jmp loc_10182A3  +
push 2Dh  +
pop edx  +
mov [eax] dx +
inc eax  +
inc eax  +
inc ecx  +
dec edi  +
jnz loc_101826E  +
xor ecx ecx +
pop edi  +
mov [eax] cx +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
push 7Bh  +
pop eax  +
mov [esi] ax +
lea eax [esi+2] +
push eax  +
push [ebp+arg_0]  +
call sub_1018259  +
push 7Dh  +
pop eax  +
mov [esi+4Ah] ax +
xor eax eax +
mov [esi+4Ch] ax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 27h +
jb loc_1018308  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10182BC  +
xor eax eax +
jmp loc_101830D  +
mov eax 8007007Ah +
pop ebp  +
retn 0Ch  +
***
jmp ds:MiniDumpWriteDump  +
***
jmp ds:GetIpAddrTable  +
***
push ecx  +
lea ecx [esp+8] +
sub ecx eax +
and ecx 0Fh +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp __alloca_probe  +
***
push ecx  +
lea ecx [esp+8] +
sub ecx eax +
and ecx 7 +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp __alloca_probe  +
***
push dword ptr [ebp-10h]  +
call ??3@YAXPAX@Z  +
pop ecx  +
retn   +
***
lea ecx [ebp-1Ch] +
jmp sub_100EDDC  +
***
imul edi eax +
jmp fword ptr [eax+69h]  +
***
xchg eax [ecx] +
add eax ebp +
mov esp 59FFFF5Dh +
retn   +
***
retf 0FFF9h  +
***
jmp fword ptr (byte_101B7FF-101B869h)[eax]  +
***
push offset CriticalSection  +
call ds:DeleteCriticalSection  +
retn   +
***
mov eax hHeap +
mov dword_10207DC offset off_1007C00 +
test eax eax +
jz locret_1018753  +
push eax  +
call ds:HeapDestroy  +
retn   +
***
mov off_101FB1C offset off_100AD3C +
retn   +
***
mov ecx offset dword_1020898 +
jmp sub_1017FF3  +
***
retn   +
***
add [eax-5967FFFFh] bl +
add [eax] eax +
test al 0A6h +
add [eax] eax +
mov ah 0A6h +
add [eax] eax +
retn 1A6h  +
***
push 65676E61h  +
add [edx+656C5304h] dh +
jo $+3  +
jmp near ptr 756FE507h  +
***
inc ecx  +
ins  dx +
ins  dx +
outs   +
arpl [eax] ax +
retf   +
***
add gs:[eax] al +
retn 4702h  +
***
imul ebp [ebp+54h] +
iret   +
***
