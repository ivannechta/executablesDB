retf 0  +
***
retn   +
***
retn 0  +
***
retf   +
***
add bh bh +
xor edi edi +
adc eax offset SysFreeString +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test [ebp+arg_0] 2 +
push esi  +
mov esi ecx +
jz loc_100B4A6  +
push edi  +
push (offset loc_100B464+1)  +
lea edi [esi-4] +
push dword ptr [edi]  +
push 0Ch  +
push esi  +
call ??_M@YGXPAXIHP6EX0@Z@Z  +
test [ebp+arg_0] 1 +
jz loc_100B4A1  +
push edi  +
call sub_1019EA8  +
pop ecx  +
mov eax edi +
pop edi  +
jmp loc_100B4BD  +
push dword ptr [esi]  +
call ds:SysFreeString  +
test [ebp+arg_0] 1 +
jz loc_100B4BB  +
push esi  +
call sub_1019EA8  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
add eax eax +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
add eax eax +
push eax  +
push [ebp+arg_0]  +
call sub_101A89B  +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
lea edi [esi+44h] +
push edi  +
call ds:EnterCriticalSection  +
mov eax [ebp+arg_0] +
push edi  +
mov [esi+40h] eax +
call ds:LeaveCriticalSection  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100B4ED  +
xor eax eax +
inc eax  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
call sub_1011DC2  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx eax +
and ecx 1FFF0000h +
cmp ecx 70000h +
jnz loc_100B562  +
and eax 0FFFFh +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
and dword ptr [eax] 0 +
push ebx  +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
push edi  +
jz loc_100B5A2  +
push offset aInOrderToCompl  +
push 2022h  +
mov edi offset unk_10309F8 +
push edi  +
call sub_101A9EC  +
mov ecx [esi] +
add esp 0Ch +
push edi  +
push 3  +
call sub_101865E  +
mov edi 0C1500014h +
push edi  +
push 3  +
push dword ptr [esi+4]  +
call sub_100E2A2  +
mov ebx eax +
add esp 0Ch +
test ebx ebx +
jge loc_100B5BE  +
push edi  +
jmp loc_100B5DA  +
push [ebp+arg_0]  +
mov ecx [esi+4] +
push 1  +
push 66h  +
push 3  +
call sub_100E2F0  +
mov ebx eax +
test ebx ebx +
jge loc_100B5E4  +
push 0C1500016h  +
push dword ptr [esi+8]  +
call sub_10196C9  +
pop ecx  +
pop ecx  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
push edi  +
cmp [ebp+arg_8] esi +
jbe loc_100B624  +
mov edi [ebp+arg_4] +
push 0FFFFFFFFh  +
push [ebp+lpString2]  +
push 0FFFFFFFFh  +
push dword ptr [edi+esi*8]  +
push 1  +
push 409h  +
call ds:CompareStringW  +
dec eax  +
dec eax  +
jz loc_100B62D  +
inc esi  +
cmp esi [ebp+arg_8] +
jb loc_100B603  +
mov eax [ebp+arg_C] +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
mov eax [edi+esi*8+4] +
jmp loc_100B627  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov [ebp+8] eax +
push offset dword_10216E0  +
lea eax [ebp+8] +
push eax  +
call _CxxThrowException  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_100B68F  +
cmp eax 0Ch +
jz loc_100B688  +
cmp eax 16h +
jz loc_100B681  +
cmp eax 22h +
jz loc_100B681  +
cmp eax 50h +
jz loc_100B68F  +
push 80004005h  +
call loc_100B638  +
push 80070057h  +
jmp loc_100B67C  +
push 8007000Eh  +
jmp loc_100B67C  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100B4C7  +
add esp 10h +
push eax  +
call sub_100B657  +
pop ebp  +
retn   +
***
mov edi edi +
push edi  +
mov edx ecx +
push 6  +
pop ecx  +
xor eax eax +
mov edi edx +
stos   +
mov eax edx +
pop edi  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
push ecx  +
call ds:InitializeCriticalSection  +
and [ebp+var_1C] 0 +
jmp loc_100B710  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000017h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-1Ch] 8007000Eh +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax [ebp+var_1C] +
call __SEH_epilog4  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+hResInfo]  +
push [ebp+hModule]  +
call ds:LoadResource  +
test eax eax +
jz loc_100B77E  +
push esi  +
push eax  +
call ds:LockResource  +
mov esi eax +
test esi esi +
jz loc_100B770  +
push [ebp+hResInfo]  +
push [ebp+hModule]  +
call ds:SizeofResource  +
mov ecx [ebp+arg_8] +
add eax esi +
and ecx 0Fh +
jbe loc_100B76C  +
cmp esi eax +
jnb loc_100B770  +
dec ecx  +
movzx edx word ptr [esi] +
lea esi [esi+edx*2+2] +
jnz loc_100B75E  +
cmp esi eax +
jb loc_100B774  +
xor eax eax +
jmp loc_100B77D  +
movzx eax word ptr [esi] +
neg eax  +
sbb eax eax +
and eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
shr eax 4 +
inc eax  +
movzx eax ax +
push 6  +
push eax  +
push [ebp+hModule]  +
call ds:FindResourceW  +
test eax eax +
jz loc_100B7B2  +
push [ebp+arg_4]  +
push eax  +
push [ebp+hModule]  +
call sub_100B725  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push dword ptr [ebp+wLanguage]  +
shr eax 4 +
inc eax  +
movzx eax ax +
push eax  +
push 6  +
push [ebp+hModule]  +
call ds:FindResourceExW  +
test eax eax +
jz loc_100B7E9  +
push [ebp+arg_4]  +
push eax  +
push [ebp+hModule]  +
call sub_100B725  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov esi offset unk_1044D9C +
push 0  +
mov ecx esi +
call sub_10199C4  +
xor ebx ebx +
inc ebx  +
jmp loc_100B826  +
push dword ptr [ebp+wLanguage]  +
push [ebp+arg_0]  +
push edi  +
call sub_100B7BB  +
test eax eax +
jnz loc_100B833  +
push ebx  +
mov ecx esi +
call sub_10199C4  +
inc ebx  +
mov edi eax +
test edi edi +
jnz loc_100B80D  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
mov eax edi +
jmp loc_100B82C  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jz loc_100B87E  +
push ebx  +
mov ebx [esi+8] +
cmp ebx [esi+0Ch] +
jnb loc_100B870  +
push edi  +
mov edi [ebx] +
test edi edi +
jz loc_100B867  +
mov eax [edi+10h] +
test eax eax +
jz loc_100B863  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [edi+10h] 0 +
add ebx 4 +
cmp ebx [esi+0Ch] +
jb loc_100B850  +
pop edi  +
lea eax [esi+10h] +
push eax  +
call ds:DeleteCriticalSection  +
and dword ptr [esi] 0 +
pop ebx  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
mov esi [edi+8] +
jmp loc_100B8A2  +
mov eax [esi] +
test eax eax +
jz loc_100B89F  +
push [ebp+arg_0]  +
call dword ptr [eax+20h]  +
add esi 4 +
cmp esi [edi+0Ch] +
jb loc_100B893  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+lpArguments] +
push esi  +
test ebx ebx +
jnz loc_100B8CF  +
push ebx  +
push ebx  +
push 1  +
push 0C0000005h  +
call ds:RaiseException  +
mov esi [ebx+8] +
test esi esi +
jz loc_100B8ED  +
push edi  +
push dword ptr [esi+4]  +
call dword ptr [esi]  +
mov edi [esi+8] +
push esi  +
call sub_1019EA8  +
pop ecx  +
mov esi edi +
test edi edi +
jnz loc_100B8D7  +
pop edi  +
and dword ptr [ebx+8] 0 +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
lea eax [ecx+0Ch] +
or edx 0FFFFFFFFh +
xadd [eax] edx +
dec edx  +
test edx edx +
jg locret_100B915  +
mov eax [ecx] +
mov edx [eax] +
push ecx  +
mov ecx eax +
call dword ptr [edx+4]  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
mov eax [ebp+arg_0] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100B94C  +
test dx dx +
jz loc_100B948  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100B94C  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_100B926  +
xor eax eax +
pop ebp  +
retn   +
sbb eax eax +
sbb eax 0FFFFFFFFh +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10197FA  +
neg eax  +
sbb eax eax +
pop ecx  +
not eax  +
and eax [ebp+arg_0] +
pop ecx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
cmp eax 0FFFFFFFFh +
jnz loc_100B99C  +
mov eax [ebp+arg_8] +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_100B98D  +
sub eax ecx +
sar eax 1 +
inc eax  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100B698  +
add esp 10h +
pop ebp  +
retn   +
***
xor eax eax +
push esi  +
mov esi ecx +
push eax  +
mov [esi] eax +
mov [esi+4] eax +
mov [esi+8] eax +
call ds:SetThreadUILanguage  +
mov [esi+0Ch] ax +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_100B9E4  +
pop ebp  +
retn   +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100B9E7  +
sub eax edx +
sar eax 1 +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jl loc_100BA1E  +
mov edx [ecx] +
cmp eax [edx-8] +
jg loc_100BA1E  +
mov [edx-0Ch] eax +
mov ecx [ecx] +
xor edx edx +
mov [ecx+eax*2] dx +
pop ebp  +
retn 4  +
***
push 80070057h  +
call loc_100B638  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
add eax eax +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
add eax eax +
push eax  +
push [ebp+arg_0]  +
call sub_101A91D  +
add esp 10h +
pop ebp  +
retn   +
***
push 8007000Eh  +
call loc_100B638  +
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi [ecx] +
mov ebx [esi-0Ch] +
sub esi 10h +
mov [ebp+var_8] ecx +
mov ecx [esi] +
mov eax [ecx] +
push edi  +
mov [ebp+var_4] ebx +
call dword ptr [eax+10h]  +
mov edx [eax] +
push 2  +
push [ebp+arg_0]  +
mov ecx eax +
call dword ptr [edx]  +
mov edi eax +
test edi edi +
jnz loc_100BA99  +
call loc_100BA54  +
mov eax [ebp+arg_0] +
cmp ebx eax +
jge loc_100BAA2  +
mov eax ebx +
inc eax  +
push eax  +
lea ecx [esi+10h] +
push ecx  +
push eax  +
lea ebx [edi+10h] +
push ebx  +
call sub_100B4C7  +
mov eax [ebp+var_4] +
add esp 10h +
mov ecx esi +
mov [edi+4] eax +
call sub_100B8FC  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
mov [eax] ebx +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push esi  +
mov esi ecx +
mov eax [esi] +
sub eax 10h +
cmp [eax+8] edx +
mov ecx [eax] +
jge loc_100BAFD  +
test edx edx +
jle loc_100BAFD  +
push edi  +
mov edi [ecx] +
push 2  +
push edx  +
push eax  +
call dword ptr [edi+8]  +
pop edi  +
test eax eax +
jnz loc_100BB02  +
call loc_100BA54  +
add eax 10h +
mov [esi] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_0]  +
call sub_100B7F2  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
sub eax 10h +
cmp dword ptr [eax+0Ch] 1 +
jle loc_100BB41  +
push dword ptr [eax+4]  +
call sub_100BA64  +
mov eax [esi] +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jnz loc_100BB5F  +
push 80004005h  +
call loc_100B638  +
push [ebp+arg_0]  +
push dword ptr [ecx]  +
call sub_100B91B  +
pop ecx  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
cmp [ebp+arg_0] eax +
jz loc_100BBAC  +
push eax  +
call ds:SysFreeString  +
cmp [ebp+arg_0] 0 +
jz loc_100BBA9  +
push [ebp+arg_0]  +
call ds:SysAllocString  +
mov [esi] eax +
test eax eax +
jnz loc_100BBAC  +
push 8007000Eh  +
call loc_100B638  +
and dword ptr [esi] 0 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
xor eax offset dword_10309D8 +
mov ecx edx +
mov [esi+28h] eax +
call sub_100B6D5  +
test eax eax +
jge loc_100BBF0  +
mov byte_10309D4 1 +
jmp loc_100BBF7  +
mov dword ptr [esi+4] 24h +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+4] +
cmp dword ptr [edi] 0 +
jz loc_100BC39  +
cmp dword ptr [esi+0Ch] 0 +
jz loc_100BC1F  +
push edi  +
call sub_100B8B2  +
and dword ptr [esi+0Ch] 0 +
mov eax [esi+28h] +
test eax eax +
jz loc_100BC2C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
add esi 10h +
push esi  +
call ds:DeleteCriticalSection  +
and dword ptr [edi] 0 +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
sub ecx 10h +
xor eax eax +
push edi  +
mov edi [ecx] +
cmp [ecx+4] eax +
jz loc_100BC75  +
cmp [ecx+0Ch] eax +
jge loc_100BC64  +
push eax  +
mov ecx esi +
call loc_100B9FC  +
jmp loc_100BC75  +
call sub_100B8FC  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+0Ch]  +
add eax 10h +
mov [esi] eax +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jnz loc_100BC96  +
push 80004005h  +
call loc_100B638  +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
add eax 10h +
mov [esi] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
mov edx [eax-0Ch] +
sub eax 10h +
push esi  +
mov esi [ebp+arg_0] +
cmp edx esi +
jle loc_100BCD2  +
mov esi edx +
cmp dword ptr [eax+0Ch] 1 +
jle loc_100BCE0  +
push esi  +
call sub_100BA64  +
jmp loc_100BD04  +
mov eax [eax+8] +
cmp eax esi +
jge loc_100BD04  +
mov edx eax +
mov eax 400h +
cmp edx eax +
jle loc_100BCF6  +
add edx eax +
jmp loc_100BCF8  +
add edx edx +
cmp edx esi +
jge loc_100BCFE  +
mov edx esi +
push edx  +
call sub_100BAD3  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov ecx [esi] +
mov eax [ecx] +
push edi  +
call dword ptr [eax+10h]  +
lea edx [esi+0Ch] +
cmp dword ptr [edx] 0 +
jl loc_100BD36  +
cmp eax [esi] +
jnz loc_100BD36  +
xor eax eax +
mov edi esi +
inc eax  +
xadd [edx] eax +
jmp loc_100BD68  +
mov edx [eax] +
push 2  +
push dword ptr [esi+4]  +
mov ecx eax +
call dword ptr [edx]  +
mov edi eax +
test edi edi +
jnz loc_100BD4C  +
call loc_100BA54  +
mov eax [esi+4] +
mov [edi+4] eax +
mov eax [esi+4] +
inc eax  +
push eax  +
add esi 10h +
push esi  +
push eax  +
lea eax [edi+10h] +
push eax  +
call sub_100B4C7  +
add esp 10h +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
mov ecx [ebp+arg_4] +
call sub_100BB4A  +
neg eax  +
sbb eax eax +
neg eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
push offset dword_1044E10  +
mov esi ecx +
call sub_100BC7D  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push esi  +
sub eax 10h +
push eax  +
mov esi ecx +
call sub_100BD0E  +
add eax 10h +
mov [esi] eax +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
xor ecx ecx +
sub eax 10h +
inc ecx  +
sub ecx [eax+0Ch] +
mov eax [eax+8] +
sub eax [ebp+arg_0] +
or ecx eax +
jge loc_100BDF9  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_100BCBB  +
mov eax [esi] +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
mov edi ecx +
mov esi offset dword_1044E10 +
push esi  +
lea ecx [ebp-28h] +
call sub_100BC7D  +
and dword ptr [ebp-4] 0 +
push esi  +
lea ecx [ebp-10h] +
call sub_100BC7D  +
push esi  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 1 +
call sub_100BC7D  +
push esi  +
lea ecx [ebp-18h] +
mov byte ptr [ebp-4] 2 +
call sub_100BC7D  +
mov ebx [ebp+0Ch] +
mov ecx ebx +
mov byte ptr [ebp-4] 3 +
call sub_100EA41  +
test eax eax +
jz loc_100BE8F  +
lea eax [ebp-10h] +
push eax  +
mov ecx ebx +
call sub_100EEFD  +
mov esi eax +
test esi esi +
jge loc_100BE7F  +
push 0C1500003h  +
push dword ptr [edi+8]  +
call sub_10196C9  +
pop ecx  +
pop ecx  +
jmp loc_100BF7F  +
mov eax [ebp-10h] +
cmp dword ptr [eax-0Ch] 0 +
jnz loc_100BE97  +
push 0C1500011h  +
jmp loc_100BE70  +
lea ecx [ebp-10h] +
call sub_100BC41  +
mov ecx ebx +
call sub_100EA65  +
test eax eax +
jz loc_100BEC7  +
lea eax [ebp-18h] +
push eax  +
mov ecx ebx +
call sub_100EE8A  +
mov esi eax +
test esi esi +
jl loc_100BE6B  +
lea eax [ebp-14h] +
push eax  +
push dword ptr [ebp-18h]  +
call sub_101C42F  +
mov esi eax +
test esi esi +
jge loc_100BECF  +
jmp loc_100BE6B  +
lea ecx [ebp-14h] +
call sub_100BC41  +
mov ecx ebx +
call sub_100EA6E  +
test eax eax +
jz loc_100BEF0  +
lea eax [ebp-24h] +
push eax  +
mov ecx ebx +
call sub_100EA0E  +
mov esi eax +
test esi esi +
jge loc_100BEF4  +
jmp loc_100BE6B  +
and dword ptr [ebp-24h] 0 +
mov ecx ebx +
call sub_100EA95  +
test eax eax +
jz loc_100BF15  +
lea eax [ebp-20h] +
push eax  +
mov ecx ebx +
call sub_100E9DE  +
mov esi eax +
test esi esi +
jge loc_100BF19  +
jmp loc_100BE6B  +
and dword ptr [ebp-20h] 0 +
mov ecx ebx +
call sub_100EA8C  +
test eax eax +
jz loc_100BF3A  +
lea eax [ebp-1Ch] +
push eax  +
mov ecx ebx +
call sub_100E9F6  +
mov esi eax +
test esi esi +
jge loc_100BF3E  +
jmp loc_100BE6B  +
and dword ptr [ebp-1Ch] 0 +
push dword ptr [ebp-1Ch]  +
mov ecx [ebp+8] +
push dword ptr [ebp-20h]  +
lea eax [ebp-14h] +
push dword ptr [ebp-24h]  +
push eax  +
lea eax [ebp-10h] +
push eax  +
call sub_1012CB4  +
mov esi eax +
test esi esi +
jl loc_100BF7F  +
mov ecx [ebp+8] +
push edi  +
call sub_1010D4F  +
mov esi eax +
test esi esi +
jl loc_100BF7F  +
push dword ptr [edi]  +
mov ecx [edi+4] +
call sub_100DEFB  +
push dword ptr [edi]  +
mov ecx ebx +
call sub_100E949  +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov ecx [ebp-28h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov eax esi +
call __EH_epilog3  +
retn 8  +
***
call __EH_prolog3  +
mov ebx ecx +
xor esi esi +
xor eax eax +
mov [ebp-30h] esi +
lea edi [ebp-2Ch] +
stos   +
stos   +
stos   +
xor eax eax +
mov [ebp-20h] esi +
lea edi [ebp-1Ch] +
push offset dword_1044E10  +
lea ecx [ebp-14h] +
mov [ebp-10h] esi +
stos   +
mov [ebp-18h] esi +
call sub_100BC7D  +
lea eax [ebp-18h] +
push eax  +
push 28h  +
mov [ebp-4] esi +
call ds:GetCurrentProcess  +
push eax  +
call ds:OpenProcessToken  +
test eax eax +
jnz loc_100C078  +
call ds:GetLastError  +
mov esi eax +
lea eax [ebp-14h] +
push eax  +
push esi  +
call sub_101C994  +
test esi esi +
jle loc_100C02D  +
and esi 0FFFFh +
or esi 80070000h +
cmp dword ptr [ebx] 0 +
mov [ebp-10h] esi +
jz loc_100C130  +
push esi  +
push offset aFailedOpeningT  +
mov edi 2022h +
push edi  +
mov esi offset unk_10309F8 +
push esi  +
call sub_101A9EC  +
mov ecx [ebx] +
add esp 10h +
push esi  +
push 3  +
call sub_101865E  +
cmp dword ptr [ebx] 0 +
jz loc_100C130  +
push dword ptr [ebp-14h]  +
push edi  +
push esi  +
call sub_101A9EC  +
add esp 0Ch +
jmp loc_100C126  +
lea eax [ebp-20h] +
push eax  +
push dword ptr [ebp+8]  +
push esi  +
call ds:LookupPrivilegeValueW  +
test eax eax +
jnz loc_100C0BC  +
call ds:GetLastError  +
mov esi eax +
lea eax [ebp-14h] +
push eax  +
push esi  +
call sub_101C994  +
test esi esi +
jle loc_100C0AC  +
and esi 0FFFFh +
or esi 80070000h +
cmp dword ptr [ebx] 0 +
mov [ebp-10h] esi +
jz loc_100C130  +
push esi  +
push offset aFailedLookingU  +
jmp loc_100C03F  +
mov eax [ebp-20h] +
mov [ebp-2Ch] eax +
mov eax [ebp-1Ch] +
mov [ebp-28h] eax +
mov eax [ebp+0Ch] +
neg eax  +
push esi  +
sbb eax eax +
push esi  +
and eax 2 +
push 10h  +
mov [ebp-24h] eax +
lea eax [ebp-30h] +
push eax  +
push esi  +
push dword ptr [ebp-18h]  +
mov dword ptr [ebp-30h] 1 +
call ds:AdjustTokenPrivileges  +
test eax eax +
jnz loc_100C130  +
call ds:GetLastError  +
cmp eax esi +
jle loc_100C106  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp-10h] eax +
cmp [ebx] esi +
jz loc_100C130  +
push eax  +
push offset aFailedAdjustin  +
push 2022h  +
mov esi offset unk_10309F8 +
push esi  +
call sub_101A9EC  +
add esp 10h +
mov ecx [ebx] +
push esi  +
push 3  +
call sub_101865E  +
cmp dword ptr [ebp-18h] 0 +
jz loc_100C13F  +
push dword ptr [ebp-18h]  +
call ds:CloseHandle  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov eax [ebp-10h] +
call __EH_epilog3  +
retn 8  +
***
call ds:GetCurrentThreadId  +
and dword ptr [esi+30h] 0 +
push 0  +
push 0  +
mov [esi+2Ch] eax +
mov dword ptr [esi+34h] 1388h +
mov dword ptr [esi+38h] 3E8h +
mov byte ptr [esi+3Ch] 1 +
mov byte ptr [esi+3Eh] 0 +
call ds:CoInitializeEx  +
test eax eax +
jge loc_100C1B4  +
cmp eax 80010106h +
jnz loc_100C1AB  +
push offset aMscoree_dll  +
call ds:GetModuleHandleW  +
test eax eax +
jnz loc_100C1B8  +
mov byte_10309D4 1 +
jmp loc_100C1C4  +
mov byte ptr [esi+3Eh] 1 +
push 1  +
mov ecx offset unk_1044E2C +
call sub_100B885  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
mov esi offset unk_1044E2C +
push 0  +
mov ecx esi +
call sub_100B885  +
mov ecx edi +
call sub_100BC01  +
mov ecx esi +
call sub_100B83C  +
cmp byte ptr [edi+3Eh] 0 +
jz loc_100C1FB  +
call ds:CoUninitialize  +
mov ecx edi +
pop edi  +
pop esi  +
jmp sub_100BC01  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100BDAA  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
push ebx  +
mov ebx ecx +
jnz loc_100C23A  +
call sub_100BC41  +
jmp loc_100C28F  +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_100C24C  +
push 80070057h  +
call loc_100B638  +
mov eax [ebx] +
push edi  +
push [ebp+arg_4]  +
mov edi [eax-0Ch] +
sub esi eax +
sar esi 1 +
call sub_100BDD2  +
cmp esi edi +
pop edi  +
push [ebp+arg_4]  +
ja loc_100C275  +
lea ecx [eax+esi*2] +
push ecx  +
push [ebp+arg_4]  +
push eax  +
call sub_100BA2E  +
jmp loc_100C281  +
push [ebp+arg_0]  +
push [ebp+arg_4]  +
push eax  +
call sub_100B4C7  +
add esp 10h +
push [ebp+arg_4]  +
mov ecx ebx +
call loc_100B9FC  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_4]  +
mov ebx ecx +
push [ebp+hModule]  +
call sub_100B787  +
mov esi eax +
test esi esi +
jz loc_100C2DD  +
push edi  +
movzx edi word ptr [esi] +
push edi  +
mov ecx ebx +
call sub_100BDD2  +
movzx ecx word ptr [esi] +
push ecx  +
add esi 2 +
push esi  +
push edi  +
push eax  +
call sub_100B97A  +
add esp 10h +
push edi  +
mov ecx ebx +
call loc_100B9FC  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
call ds:InitializeCriticalSection  +
mov byte ptr [esi+3Ch] 0 +
mov eax esi +
pop esi  +
retn   +
***
add ecx 8 +
push ecx  +
call ds:InterlockedIncrement  +
retn   +
***
mov eax [ecx+8] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+8] +
push edi  +
xor edi edi +
cmp ebx edi +
jnz loc_100C343  +
mov eax 80004003h +
jmp loc_100C374  +
push esi  +
lea esi [ecx+28h] +
cmp [esi] edi +
jnz loc_100C365  +
push esi  +
push offset dword_1001680  +
push 1  +
push edi  +
push offset dword_10013E0  +
call ds:CoCreateInstance  +
mov edi eax +
test edi edi +
jl loc_100C371  +
mov eax [esi] +
mov [ebx] eax +
mov esi [esi] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
mov eax edi +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea eax [esi+8] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
xor eax eax +
cmp edi eax +
jnz loc_100C3B8  +
cmp [esi+3Ch] al +
jz loc_100C3AB  +
push dword ptr [esi+30h]  +
mov byte ptr [esi+3Dh] 1 +
call ds:SetEvent  +
jmp loc_100C3B8  +
push eax  +
push eax  +
push 12h  +
push dword ptr [esi+2Ch]  +
call ds:PostThreadMessageW  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov ecx [eax] +
push offset dword_100167C  +
push offset aAppid  +
push eax  +
call dword ptr [ecx+0Ch]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
push [ebp+arg_4]  +
mov edi ecx +
push [ebp+arg_0]  +
call sub_100BE05  +
test eax eax +
jl loc_100C42A  +
cmp dword ptr [edi] 0 +
jz loc_100C42A  +
push esi  +
call ds:GetCommandLineW  +
push eax  +
push offset aFailedValidati  +
push 2022h  +
mov esi offset unk_10309F8 +
push esi  +
call sub_101A9EC  +
mov ecx [edi] +
add esp 10h +
push esi  +
push 1  +
call sub_101865E  +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
***
call __EH_prolog3  +
mov edi ecx +
push offset dword_1044E10  +
lea ecx [ebp-14h] +
call sub_100BC7D  +
push 1  +
xor esi esi +
push offset aSeshutdownpriv  +
mov ecx edi +
mov [ebp-4] esi +
call sub_100BFBA  +
cmp eax esi +
mov [ebp-10h] eax +
jge loc_100C48E  +
cmp [edi] esi +
jz loc_100C53C  +
push offset aInOrderToCompl  +
push 2022h  +
mov esi offset unk_10309F8 +
push esi  +
call sub_101A9EC  +
add esp 0Ch +
jmp loc_100C532  +
push 80020003h  +
push 1  +
push esi  +
push esi  +
push esi  +
push esi  +
call ds:InitiateSystemShutdownExW  +
mov ebx 2022h +
mov esi offset unk_10309F8 +
test eax eax +
jnz loc_100C50F  +
call ds:GetLastError  +
lea ecx [ebp-14h] +
push ecx  +
push eax  +
mov [ebp-10h] eax +
call sub_101C994  +
mov eax [ebp-10h] +
test eax eax +
jle loc_100C4D1  +
and eax 0FFFFh +
or eax 80070000h +
cmp dword ptr [edi] 0 +
mov [ebp-10h] eax +
jz loc_100C50F  +
push eax  +
push offset aFailedRestartA  +
push ebx  +
push esi  +
call sub_101A9EC  +
mov ecx [edi] +
add esp 10h +
push esi  +
push 3  +
call sub_101865E  +
cmp dword ptr [edi] 0 +
jz loc_100C50F  +
push dword ptr [ebp-14h]  +
push ebx  +
push esi  +
call sub_101A9EC  +
mov ecx [edi] +
add esp 0Ch +
push esi  +
push 3  +
call sub_101865E  +
push 0  +
push offset aSeshutdownpriv  +
mov ecx edi +
call sub_100BFBA  +
cmp dword ptr [edi] 0 +
jz loc_100C53C  +
push eax  +
push offset aFailedDisablin  +
push ebx  +
push esi  +
call sub_101A9EC  +
add esp 10h +
mov ecx [edi] +
push esi  +
push 3  +
call sub_101865E  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov eax [ebp-10h] +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi] +
mov esi [eax-0Ch] +
push esi  +
call sub_100BDD2  +
lea ecx [esi+1] +
push ecx  +
push eax  +
call sub_100B958  +
pop ecx  +
pop ecx  +
push esi  +
mov ecx edi +
call loc_100B9FC  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
push edi  +
mov edi ecx +
jnz loc_100C59D  +
push 80070057h  +
call loc_100B638  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:_vscwprintf  +
mov esi eax +
pop ecx  +
pop ecx  +
cmp esi 0FFFFFFFFh +
jnz loc_100C5B9  +
push 8007000Eh  +
jmp loc_100C598  +
push esi  +
mov ecx edi +
call sub_100BDD2  +
push [ebp+arg_4]  +
lea ecx [esi+1] +
push [ebp+arg_0]  +
push ecx  +
push eax  +
call sub_101A97F  +
add esp 10h +
push esi  +
mov ecx edi +
call loc_100B9FC  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push esi  +
push edi  +
mov edi ecx +
mov esi [edi] +
lea ecx [eax-10h] +
sub esi 10h +
cmp ecx esi +
jz loc_100C631  +
cmp dword ptr [esi+0Ch] 0 +
jl loc_100C626  +
mov edx [ecx] +
cmp edx [esi] +
jnz loc_100C626  +
push ebx  +
push ecx  +
call sub_100BD0E  +
pop ecx  +
mov ecx esi +
mov ebx eax +
call sub_100B8FC  +
add ebx 10h +
mov [edi] ebx +
pop ebx  +
jmp loc_100C631  +
push dword ptr [eax-0Ch]  +
mov ecx edi +
push eax  +
call sub_100C225  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100B9D6  +
pop ecx  +
push eax  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_100C225  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100BB11  +
test eax eax +
jz loc_100C683  +
push [ebp+arg_0]  +
mov ecx esi +
push eax  +
call sub_100C299  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100C1CD  +
test byte ptr [ebp+8] 1 +
jz loc_100C6A7  +
push esi  +
call sub_1019EA8  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
and [ebp+var_8] 0 +
and [ebp+var_C] 0 +
push edi  +
lea eax [ebp+var_10] +
mov edi ecx +
mov ecx [ebp+arg_0] +
push eax  +
call sub_1014512  +
mov [ebp+arg_0] eax +
test eax eax +
jge loc_100C6ED  +
push 0C1500013h  +
push dword ptr [edi+8]  +
call sub_10196C9  +
pop ecx  +
pop ecx  +
jmp loc_100C882  +
xor eax eax +
cmp [ebp+var_10] 1 +
push ebx  +
setz al  +
cmp dword ptr [edi] 0 +
push esi  +
mov ebx 2022h +
mov esi offset unk_10309F8 +
mov [ebp+var_4] eax +
jz loc_100C732  +
test eax eax +
mov eax offset aYes +
jnz loc_100C718  +
mov eax offset aNo +
push eax  +
push offset aImageSessionHa  +
push ebx  +
push esi  +
call sub_101A9EC  +
mov ecx [edi] +
add esp 10h +
push esi  +
push 3  +
call sub_101865E  +
mov ecx [ebp+arg_4] +
call sub_100EA53  +
test eax eax +
jz loc_100C81E  +
cmp [ebp+var_4] 0 +
jz loc_100C81E  +
mov ecx [ebp+arg_4] +
call sub_100EA4A  +
test eax eax +
jnz loc_100C81E  +
lea eax [ebp+var_8] +
push eax  +
mov ecx edi +
call sub_100B56B  +
xor ecx ecx +
cmp eax ecx +
mov [ebp+arg_0] eax +
jl loc_100C84E  +
cmp [ebp+var_8] ecx +
jz loc_100C813  +
cmp [edi] ecx +
jz loc_100C79A  +
push offset aUserAcceptedTh  +
push ebx  +
push esi  +
call sub_101A9EC  +
mov ecx [edi] +
add esp 0Ch +
push esi  +
push 3  +
call sub_101865E  +
push 65h  +
push 3  +
push dword ptr [edi+4]  +
call sub_100E2C9  +
add esp 0Ch +
mov ecx edi +
call sub_100C434  +
mov [ebp+arg_0] eax +
cmp eax 800704F7h +
jz loc_100C7C1  +
cmp eax 80070015h +
jnz loc_100C7CE  +
push 0BB8h  +
call ds:Sleep  +
jmp loc_100C7A9  +
cmp eax 8007045Bh +
jnz loc_100C7D9  +
and [ebp+arg_0] 0 +
cmp [ebp+arg_0] 0 +
jge loc_100C80A  +
push 0C1500018h  +
push dword ptr [edi+8]  +
call sub_10196C9  +
cmp dword ptr [edi] 0 +
pop ecx  +
pop ecx  +
jz loc_100C84E  +
push [ebp+arg_0]  +
push offset aFailedRestarti  +
push ebx  +
push esi  +
call sub_101A9EC  +
add esp 10h +
push esi  +
push 1  +
jmp loc_100C847  +
mov [ebp+var_C] 1 +
jmp loc_100C84E  +
cmp [edi] ecx +
jz loc_100C84E  +
push offset aUserDeclinedTh  +
jmp loc_100C83A  +
mov ecx [ebp+arg_4] +
call sub_100EA53  +
test eax eax +
jz loc_100C84E  +
cmp [ebp+var_4] 0 +
jz loc_100C880  +
cmp dword ptr [edi] 0 +
jz loc_100C84E  +
push offset aRestartSuppres  +
push ebx  +
push esi  +
call sub_101A9EC  +
add esp 0Ch +
push esi  +
push 3  +
mov ecx [edi] +
call sub_101865E  +
xor eax eax +
cmp [ebp+var_4] eax +
jz loc_100C880  +
cmp [ebp+arg_0] eax +
jge loc_100C86D  +
xor ecx ecx +
cmp [ebp+var_C] eax +
setnz cl  +
add ecx 80070BC9h +
mov [ebp+arg_0] ecx +
jmp loc_100C880  +
mov ecx [ebp+arg_4] +
call sub_100EA53  +
test eax eax +
jz loc_100C880  +
mov [ebp+arg_0] 80070BC2h +
pop esi  +
pop ebx  +
mov eax [ebp+arg_0] +
pop edi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
call sub_100C584  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100C5E7  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100C63E  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_0] eax +
jz loc_100C903  +
test [ebp+arg_0] 0FFFF0000h +
jnz loc_100C903  +
movzx eax word ptr [ebp+arg_0] +
push eax  +
call sub_100C664  +
mov al 1 +
pop ebp  +
retn 4  +
***
call __EH_prolog3_catch  +
mov ebx ecx +
mov [ebp-18h] ebx +
cmp dword ptr [ebp+8] 0 +
jnz loc_100C92D  +
mov eax 80070057h +
jmp loc_100CB14  +
push offset dword_1044E10  +
lea ecx [ebp-14h] +
call sub_100BC7D  +
mov ecx [ebp+8] +
and dword ptr [ebp-4] 0 +
call sub_100EA53  +
mov esi [ebp+0Ch] +
test eax eax +
jz loc_100C986  +
push dword ptr [ebp+14h]  +
push esi  +
call sub_101CBD3  +
mov edi eax +
mov [ebp+14h] edi +
test edi edi +
jge loc_100C9F3  +
push 0C150001Ah  +
push dword ptr [ebx+8]  +
call sub_10196C9  +
cmp dword ptr [ebx] 0 +
pop ecx  +
pop ecx  +
jz loc_100CB07  +
push edi  +
push offset aFailedTryingTo  +
jmp loc_100CAEA  +
mov ecx [ebp+8] +
push esi  +
call sub_100EE54  +
mov edi eax +
test edi edi +
jl loc_100CAD0  +
mov eax [esi] +
push esi  +
push eax  +
call sub_101C42F  +
mov edi eax +
test edi edi +
jl loc_100CAD0  +
mov ecx [ebp+8] +
lea eax [ebp-14h] +
push eax  +
call sub_100F25B  +
mov edi eax +
test edi edi +
jl loc_100CAB4  +
push dword ptr [ebp+14h]  +
mov eax [esi] +
push dword ptr [ebp-14h]  +
push eax  +
call sub_101C3C6  +
mov edi eax +
test edi edi +
jl loc_100CAB4  +
mov ecx [ebp+14h] +
mov eax [ecx] +
push ecx  +
push eax  +
call sub_101C42F  +
mov edi eax +
mov [ebp+14h] eax +
test edi edi +
jl loc_100CAB4  +
mov ecx [ebp+8] +
call sub_100EA38  +
mov ecx [ebp+8] +
test eax eax +
jz loc_100CA47  +
mov esi [ebp+10h] +
push esi  +
call sub_100EEC0  +
mov edi eax +
test edi edi +
jl loc_100CA24  +
mov eax [esi] +
push esi  +
push eax  +
call sub_101C42F  +
mov edi eax +
test edi edi +
jge loc_100CB07  +
push 0C1500003h  +
push dword ptr [ebx+8]  +
call sub_10196C9  +
cmp dword ptr [ebx] 0 +
pop ecx  +
pop ecx  +
jz loc_100CB07  +
push edi  +
push offset aFailedAccessin  +
jmp loc_100CAEA  +
call sub_100EA53  +
test eax eax +
jnz loc_100CB07  +
mov ecx [ebp+10h] +
push esi  +
mov byte ptr [ebp-4] 1 +
call sub_100C8AA  +
jmp loc_100CB07  +
mov edi [ebp-18h] +
push 0C1500003h  +
push dword ptr [edi+8]  +
call sub_10196C9  +
cmp dword ptr [edi] 0 +
pop ecx  +
pop ecx  +
jz loc_100CAA2  +
push dword ptr [ebp+14h]  +
mov esi offset unk_10309F8 +
push offset aFailedToCopyTo  +
push 2022h  +
push esi  +
call sub_101A9EC  +
mov ecx [edi] +
add esp 10h +
push esi  +
push 1  +
call sub_101865E  +
mov dword ptr [ebp+14h] 8007000Eh +
mov eax offset loc_100CAAF +
retn   +
mov edi [ebp+14h] +
jmp loc_100CB07  +
push 0C1500007h  +
push dword ptr [ebx+8]  +
call sub_10196C9  +
cmp dword ptr [ebx] 0 +
pop ecx  +
pop ecx  +
jz loc_100CB07  +
push edi  +
push offset aFailedAccess_0  +
jmp loc_100CAEA  +
push 0C1500007h  +
push dword ptr [ebx+8]  +
call sub_10196C9  +
cmp dword ptr [ebx] 0 +
pop ecx  +
pop ecx  +
jz loc_100CB07  +
push edi  +
push offset aFailedAccess_1  +
push 2022h  +
mov esi offset unk_10309F8 +
push esi  +
call sub_101A9EC  +
mov ecx [ebx] +
add esp 10h +
push esi  +
push 1  +
call sub_101865E  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov eax edi +
call __EH_epilog3  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100C8C6  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
push offset dword_1044E10  +
call sub_100BC7D  +
push dword ptr [ebp+8]  +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_100C8E2  +
test al al +
jnz loc_100CB74  +
push dword ptr [ebp+8]  +
mov ecx esi +
call sub_100CB21  +
mov eax esi +
call __EH_epilog3  +
retn 4  +
***
call __EH_prolog3_catch  +
mov [ebp-1Ch] ecx +
mov ecx [ebp+0Ch] +
call sub_100BC41  +
mov ecx [ebp+10h] +
call sub_100BC41  +
mov esi [ebp+8] +
movzx eax word ptr [esi] +
push 2Fh  +
pop ecx  +
cmp cx ax +
jz loc_100CBC6  +
push 2Dh  +
pop ecx  +
cmp cx ax +
jz loc_100CBC6  +
mov ecx [ebp+10h] +
push esi  +
call sub_100CB21  +
jmp loc_100CD11  +
mov edi ds:wcschr +
push 3Dh  +
push esi  +
call edi  +
xor ebx ebx +
pop ecx  +
pop ecx  +
cmp eax ebx +
jnz loc_100CC0A  +
push 3Ah  +
push esi  +
call edi  +
pop ecx  +
pop ecx  +
cmp eax ebx +
jnz loc_100CC0A  +
mov ecx [ebp+0Ch] +
add esi 2 +
push esi  +
mov [ebp-4] ebx +
call sub_100CB21  +
or dword ptr [ebp-4] 0FFFFFFFFh +
jmp loc_100CD11  +
mov eax offset loc_100CC02 +
retn   +
mov eax [ebp-20h] +
jmp loc_100CD30  +
sub eax esi +
mov edi eax +
lea eax [ebp-18h] +
push eax  +
sar edi 1 +
push edi  +
push 1  +
push esi  +
mov [ebp-18h] ebx +
mov [ebp+8] ebx +
call sub_101EF69  +
cmp eax ebx +
mov [ebp-14h] eax +
jl loc_100CC4D  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_100CC2F  +
sub eax edx +
lea ecx [ebp+8] +
push ecx  +
sar eax 1 +
push eax  +
inc edi  +
push edi  +
push esi  +
call sub_101EF69  +
mov [ebp-14h] eax +
mov eax [ebp+8] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_100CC53  +
sub eax edx +
sar eax 1 +
jnz loc_100CC6D  +
mov eax 80070057h +
jmp loc_100CD30  +
cmp [ebp-14h] ebx +
jl loc_100CCD2  +
push dword ptr [ebp-18h]  +
mov ecx [ebp+0Ch] +
mov dword ptr [ebp-4] 2 +
call sub_100CB21  +
push dword ptr [ebp+8]  +
mov ecx [ebp+10h] +
call sub_100CB21  +
or dword ptr [ebp-4] 0FFFFFFFFh +
jmp loc_100CCD2  +
mov edi [ebp-1Ch] +
cmp dword ptr [edi] 0 +
mov eax [ebp-28h] +
mov [ebp-14h] eax +
jz loc_100CCC6  +
push eax  +
push offset aFailedToCopyOp  +
push 2022h  +
mov esi offset unk_10309F8 +
push esi  +
call sub_101A9EC  +
mov ecx [edi] +
add esp 10h +
push esi  +
push 1  +
call sub_101865E  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_100CCD0 +
retn   +
xor ebx ebx +
cmp [ebp-18h] ebx +
jz loc_100CCEF  +
push dword ptr [ebp-18h]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
test eax eax +
jz loc_100CCEF  +
mov [ebp-18h] ebx +
cmp [ebp+8] ebx +
jz loc_100CD0C  +
push dword ptr [ebp+8]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
test eax eax +
jz loc_100CD0C  +
mov [ebp+8] ebx +
cmp [ebp-14h] ebx +
jl loc_100CD2D  +
mov ecx [ebp+0Ch] +
call sub_100C555  +
mov ecx [ebp+0Ch] +
push eax  +
call sub_100C8AA  +
push dword ptr [ebp+10h]  +
call sub_101CD11  +
mov [ebp-14h] eax +
mov eax [ebp-14h] +
call __EH_epilog3  +
retn 0Ch  +
***
call __EH_prolog3  +
mov edi ecx +
mov esi offset dword_1044E10 +
push esi  +
lea ecx [ebp-18h] +
call sub_100BC7D  +
xor ebx ebx +
push esi  +
lea ecx [ebp-14h] +
mov [ebp-4] ebx +
call sub_100BC7D  +
push esi  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 1 +
call sub_100BC7D  +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
mov byte ptr [ebp-4] 2 +
call sub_100C90C  +
mov esi eax +
cmp esi ebx +
jl loc_100CDC2  +
mov eax [ebp-10h] +
cmp [eax-0Ch] ebx +
jz loc_100CDA6  +
lea ecx [ebp-10h] +
call sub_100BB29  +
mov ebx eax +
mov ecx [ebp+0Ch] +
mov esi [ebp-14h] +
mov edi [ebp-18h] +
call sub_100EA53  +
mov ecx [ebp+8] +
push eax  +
push esi  +
push ebx  +
push edi  +
call sub_10147ED  +
mov esi eax +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov eax esi +
call __EH_epilog3  +
retn 8  +
***
call __EH_prolog3_catch  +
mov ebx ecx +
lea ecx [ebp-50h] +
call sub_101D8A0  +
xor esi esi +
push offset dword_1044E10  +
lea ecx [ebp-28h] +
mov [ebp-4] esi +
mov [ebp-2Ch] esi +
mov [ebp-30h] esi +
call sub_100BC7D  +
xor eax eax +
lea edi [ebp-32h] +
stos   +
mov [ebp-34h] ax +
lea eax [ebp-28h] +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_101C882  +
cmp eax esi +
mov [ebp-24h] eax +
jge loc_100CE6F  +
cmp [ebx] esi +
jz loc_100D023  +
push eax  +
push offset aFailedToGetThe  +
push 2022h  +
mov esi offset unk_10309F8 +
push esi  +
call sub_101A9EC  +
add esp 10h +
push esi  +
push 1  +
mov ecx [ebx] +
call sub_101865E  +
jmp loc_100D023  +
lea eax [ebp-28h] +
push eax  +
push offset aSsshim_dll  +
push dword ptr [ebp-28h]  +
call sub_101C3C6  +
cmp eax esi +
mov [ebp-24h] eax +
jge loc_100CE97  +
cmp [ebx] esi +
jz loc_100D023  +
push eax  +
push offset aFailedCreating  +
jmp loc_100CE4D  +
mov eax [ebp+0Ch] +
mov eax [eax] +
xor edi edi +
inc edi  +
push edi  +
lea ecx [ebp-34h] +
push ecx  +
push dword ptr [ebp-28h]  +
lea ecx [ebp-50h] +
push eax  +
call sub_101DBBC  +
cmp eax esi +
mov [ebp-24h] eax +
jge loc_100CEDF  +
cmp [ebx] esi +
jz loc_100D023  +
push eax  +
push dword ptr [ebp-28h]  +
mov esi offset unk_10309F8 +
push offset aFailedToBindTo  +
push 2022h  +
push esi  +
call sub_101A9EC  +
add esp 14h +
push esi  +
push edi  +
jmp loc_100CE63  +
lea eax [ebp-2Ch] +
push eax  +
push offset aCbscore_dll  +
lea ecx [ebp-50h] +
call sub_101D952  +
cmp eax esi +
mov [ebp-24h] eax +
jge loc_100CF1A  +
cmp [ebx] esi +
jz loc_100D023  +
push eax  +
push offset aFailedToFind_0  +
push 2022h  +
mov esi offset unk_10309F8 +
push esi  +
call sub_101A9EC  +
add esp 10h +
jmp loc_100CEDB  +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
push dword ptr [ebp-2Ch]  +
call sub_101CDE5  +
cmp eax esi +
mov [ebp-24h] eax +
jge loc_100CF49  +
cmp [ebx] esi +
jz loc_100D023  +
push eax  +
push offset aFailedToGetTar  +
jmp loc_100CF05  +
cmp [ebx] esi +
mov edi 2022h +
mov esi offset unk_10309F8 +
jz loc_100CF84  +
movzx eax word ptr [ebp-20h] +
push eax  +
movzx eax word ptr [ebp-1Ch] +
push eax  +
movzx eax word ptr [ebp-18h] +
push eax  +
movzx eax word ptr [ebp-14h] +
push eax  +
push offset aTheTargetImage  +
push edi  +
push esi  +
call sub_101A9EC  +
mov ecx [ebx] +
add esp 1Ch +
push esi  +
push 3  +
call sub_101865E  +
cmp word ptr [ebp-14h] 6 +
jnz loc_100D01D  +
cmp word ptr [ebp-18h] 0 +
jnz loc_100D01D  +
mov eax 1770h +
cmp [ebp-1Ch] ax +
jbe loc_100D01D  +
cmp dword ptr [ebx] 0 +
jz loc_100CFC3  +
push offset aTheTargetIma_0  +
push edi  +
push esi  +
call sub_101A9EC  +
mov ecx [ebx] +
add esp 0Ch +
push esi  +
push 3  +
call sub_101865E  +
lea eax [ebp-30h] +
push eax  +
push offset aPkgmgr_exe  +
lea ecx [ebp-50h] +
call sub_101D952  +
mov [ebp-24h] eax +
test eax eax +
jge loc_100CFEC  +
cmp dword ptr [ebx] 0 +
jz loc_100D023  +
push eax  +
push offset aFailedToGetTar  +
push edi  +
jmp loc_100CE57  +
push dword ptr [ebp-30h]  +
mov ecx [ebp+14h] +
mov byte ptr [ebp-4] 2 +
call sub_100CB21  +
mov ecx [ebp+10h] +
xor eax eax +
inc eax  +
mov [ebp-4] eax +
mov [ecx] eax +
jmp loc_100D023  +
mov eax [ebp-38h] +
mov [ebp-24h] eax +
mov dword ptr [ebp-4] 1 +
mov eax offset loc_100D01B +
retn   +
jmp loc_100D023  +
mov eax [ebp+10h] +
and dword ptr [eax] 0 +
push dword ptr [ebp-2Ch]  +
lea ecx [ebp-50h] +
call sub_101D8AB  +
push dword ptr [ebp-30h]  +
lea ecx [ebp-50h] +
call sub_101D8AB  +
mov ecx [ebp-28h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-50h] +
call sub_101D925  +
mov eax [ebp-24h] +
call __EH_epilog3  +
retn 10h  +
***
call __EH_prolog3  +
mov [ebp-1Ch] ecx +
mov esi offset dword_1044E10 +
push esi  +
lea ecx [ebp-10h] +
mov dword ptr [ebp-24h] offset aEnglish +
mov dword ptr [ebp-20h] 0Dh +
xor ebx ebx +
call sub_100BC7D  +
and [ebp-4] ebx +
push esi  +
lea ecx [ebp-14h] +
call sub_100BC7D  +
and [ebp-18h] ebx +
mov byte ptr [ebp-4] 1 +
cmp [ebp+10h] ebx +
jnz loc_100D0CA  +
mov esi 80004003h +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov eax esi +
call __EH_epilog3  +
retn 0Ch  +
xor esi esi +
inc esi  +
cmp [ebp+8] esi +
jle loc_100D124  +
test ebx ebx +
jl loc_100D124  +
mov ecx [ebp-1Ch] +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-10h] +
push eax  +
mov eax [ebp+0Ch] +
push dword ptr [eax+esi*4]  +
call sub_100CB83  +
mov ebx eax +
test ebx ebx +
jl loc_100D11E  +
mov eax [ebp-10h] +
cmp dword ptr [eax-0Ch] 0 +
jz loc_100D11E  +
push 0FFFFFFFFh  +
push 1  +
lea ecx [ebp-24h] +
push ecx  +
push eax  +
call sub_100B5F2  +
cmp eax 0Dh +
jnz loc_100D11E  +
mov eax [ebp-14h] +
cmp dword ptr [eax-0Ch] 0 +
jnz loc_100D11E  +
mov dword ptr [ebp-18h] 1 +
inc esi  +
cmp esi [ebp+8] +
jl loc_100D0D2  +
mov eax [ebp-18h] +
mov ecx [ebp+10h] +
mov [ecx] eax +
xor esi esi +
jmp loc_100D0AA  +
***
call __EH_prolog3  +
mov ebx ecx +
xor edi edi +
mov esi offset dword_1044E10 +
push esi  +
lea ecx [ebp-10h] +
mov dword ptr [ebp-0A8h] offset a?_0 +
mov [ebp-0A4h] edi +
mov dword ptr [ebp-0A0h] offset asc_1002100 +
mov [ebp-9Ch] edi +
mov dword ptr [ebp-98h] offset aHelp +
mov [ebp-94h] edi +
mov dword ptr [ebp-90h] offset aGetHelp +
mov [ebp-8Ch] edi +
mov dword ptr [ebp-88h] offset aImage +
mov dword ptr [ebp-84h] 1 +
mov dword ptr [ebp-80h] offset aProvider +
mov dword ptr [ebp-7Ch] 2 +
mov dword ptr [ebp-78h] offset aLogpath +
mov dword ptr [ebp-74h] 3 +
mov dword ptr [ebp-70h] offset aWindir +
mov dword ptr [ebp-6Ch] 4 +
mov dword ptr [ebp-68h] offset aNorestart +
mov dword ptr [ebp-64h] 5 +
mov dword ptr [ebp-60h] offset aOnline +
mov dword ptr [ebp-5Ch] 6 +
mov dword ptr [ebp-58h] offset aQuiet +
mov dword ptr [ebp-54h] 7 +
mov dword ptr [ebp-50h] offset aSysdrivedir +
mov dword ptr [ebp-4Ch] 8 +
mov dword ptr [ebp-48h] offset aScratchdir +
mov dword ptr [ebp-44h] 9 +
mov dword ptr [ebp-40h] offset aLoglevel +
mov dword ptr [ebp-3Ch] 0Ah +
mov dword ptr [ebp-38h] offset aShowtags +
mov dword ptr [ebp-34h] 0Bh +
mov dword ptr [ebp-30h] offset aEnglish +
mov dword ptr [ebp-2Ch] 0Dh +
mov dword ptr [ebp-28h] offset aFormat +
mov dword ptr [ebp-24h] 0Ch +
mov [ebp-1Ch] edi +
call sub_100BC7D  +
push esi  +
lea ecx [ebp-14h] +
mov [ebp-4] edi +
call sub_100BC7D  +
inc edi  +
cmp dword ptr [ebp+8] 1 +
mov byte ptr [ebp-4] 1 +
jle loc_100D357  +
cmp dword ptr [ebp-1Ch] 0 +
jl loc_100D357  +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-10h] +
push eax  +
mov eax [ebp+0Ch] +
push dword ptr [eax+edi*4]  +
mov ecx ebx +
call sub_100CB83  +
mov [ebp-1Ch] eax +
test eax eax +
jl loc_100D432  +
push esi  +
lea ecx [ebp-18h] +
call sub_100BC7D  +
mov eax [ebp-10h] +
cmp dword ptr [eax-0Ch] 0 +
mov byte ptr [ebp-4] 2 +
jz loc_100D388  +
mov ecx [ebp+10h] +
call sub_100EA26  +
test eax eax +
jnz loc_100D3C9  +
push 0FFFFFFFFh  +
push 11h  +
lea eax [ebp-0A8h] +
push eax  +
push dword ptr [ebp-10h]  +
call sub_100B5F2  +
mov [ebp-20h] eax +
test eax eax +
jz loc_100D2F1  +
mov ecx [ebp+10h] +
call sub_100EA80  +
test eax eax +
jnz loc_100D3D6  +
cmp dword ptr [ebp-20h] 0FFFFFFFFh +
mov ecx [ebp+10h] +
jz loc_100D331  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
push dword ptr [ebp-20h]  +
call sub_100F45F  +
mov [ebp-1Ch] eax +
test eax eax +
jge loc_100D33E  +
mov eax [ebp-18h] +
cmp dword ptr [eax-0Ch] 0 +
mov esi 80070057h +
jz loc_100D3E4  +
mov ecx [ebx+8] +
push eax  +
call sub_1019753  +
jmp loc_100D40D  +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-10h] +
push eax  +
call sub_100F00F  +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 1 +
call sub_100B8FC  +
inc edi  +
cmp edi [ebp+8] +
jl loc_100D273  +
mov ecx [ebp+10h] +
call sub_100EA80  +
test eax eax +
jz loc_100D460  +
mov eax [ebp+0Ch] +
push dword ptr [eax+edi*4-4]  +
push 0C1500021h  +
push dword ptr [ebx+8]  +
call sub_10196C9  +
add esp 0Ch +
mov esi 80070057h +
jmp loc_100D418  +
push dword ptr [ebp-14h]  +
push 0C1500004h  +
push dword ptr [ebx+8]  +
call sub_10196C9  +
mov ecx [ebp-18h] +
add esp 0Ch +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov eax 80070057h +
call __EH_epilog3  +
retn 0Ch  +
mov eax [ebp+0Ch] +
push dword ptr [eax+edi*4]  +
push 0C1500042h  +
jmp loc_100D390  +
mov eax [ebp+0Ch] +
push dword ptr [eax+edi*4-4]  +
push 0C1500021h  +
jmp loc_100D390  +
cmp [ebp-1Ch] esi +
jnz loc_100D3FE  +
push dword ptr [ebp-10h]  +
push 0C150003Dh  +
push dword ptr [ebx+8]  +
call sub_10196C9  +
add esp 0Ch +
jmp loc_100D40D  +
push 0C150006Ch  +
push dword ptr [ebx+8]  +
call sub_10196C9  +
pop ecx  +
pop ecx  +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov eax esi +
jmp loc_100D3C1  +
cmp eax 80070057h +
jnz loc_100D451  +
mov eax [ebp+0Ch] +
push dword ptr [eax+edi*4]  +
push 0C1500043h  +
push dword ptr [ebx+8]  +
call sub_10196C9  +
add esp 0Ch +
jmp loc_100D460  +
push 0C1500006h  +
push dword ptr [ebx+8]  +
call sub_10196C9  +
pop ecx  +
pop ecx  +
mov esi [ebp-1Ch] +
jmp loc_100D418  +
***
call __EH_prolog3_catch  +
mov ebx ecx +
xor edi edi +
mov [ebp-24h] edi +
mov esi offset dword_1044E10 +
push esi  +
lea ecx [ebp-14h] +
mov [ebp-4] edi +
call sub_100BC7D  +
mov [ebp-4Ch] edi +
mov [ebp-48h] edi +
mov [ebp-44h] edi +
mov [ebp-40h] edi +
mov [ebp-3Ch] edi +
push esi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 4 +
call sub_100BC7D  +
push esi  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 5 +
call sub_100BC7D  +
push esi  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 6 +
call sub_100BC7D  +
push esi  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 7 +
call sub_100BC7D  +
push esi  +
lea ecx [ebp-50h] +
mov byte ptr [ebp-4] 8 +
call sub_100BC7D  +
push esi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 9 +
call sub_100BC7D  +
mov [ebp-18h] edi +
mov byte ptr [ebp-4] 0Bh +
mov [ebp-2Ch] edi +
cmp [ebx] edi +
jz loc_100D524  +
call ds:GetCommandLineW  +
push eax  +
push offset aExecutingComma  +
push 2022h  +
mov esi offset unk_10309F8 +
push esi  +
call sub_101A9EC  +
mov ecx [ebx] +
add esp 10h +
push esi  +
push 3  +
call sub_101865E  +
jmp loc_100D529  +
mov esi offset unk_10309F8 +
mov ecx [ebp+0Ch] +
lea eax [ebp-24h] +
push eax  +
call sub_101077F  +
mov edi eax +
test edi edi +
jge loc_100D54F  +
push 0C150000Ah  +
push dword ptr [ebx+8]  +
call sub_10196C9  +
pop ecx  +
pop ecx  +
jmp loc_100DA3B  +
mov ecx [ebp+0Ch] +
call sub_100EA2F  +
test eax eax +
jz loc_100D61A  +
mov ecx [ebp+0Ch] +
call sub_100EA77  +
test eax eax +
jz loc_100D61A  +
and dword ptr [ebp-28h] 0 +
mov ecx [ebp+8] +
push 0  +
mov byte ptr [ebp-4] 0Ch +
call sub_1015B0C  +
mov edi eax +
test edi edi +
jge loc_100D5C3  +
cmp dword ptr [ebx] 0 +
jz loc_100D5A9  +
push offset aFailedToGetBui  +
push 2022h  +
push esi  +
call sub_101A9EC  +
mov ecx [ebx] +
add esp 0Ch +
push esi  +
push 1  +
call sub_101865E  +
mov eax [ebp-28h] +
mov byte ptr [ebp-4] 0Bh +
test eax eax +
jz loc_100DA3B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_100DA3B  +
mov ecx [ebp+8] +
xor edi edi +
push edi  +
push edi  +
lea eax [ebp-28h] +
push eax  +
push edi  +
push dword ptr [ebp-24h]  +
call sub_1013481  +
cmp [ebp-28h] edi +
jz loc_100D616  +
cmp [ebx] edi +
jz loc_100D5FD  +
push offset aTheImageOption  +
push 2022h  +
push esi  +
call sub_101A9EC  +
mov ecx [ebx] +
add esp 0Ch +
push esi  +
push 3  +
call sub_101865E  +
push 0C1500069h  +
push 1  +
push dword ptr [ebx+4]  +
call sub_100E2A2  +
add esp 0Ch +
mov edi 80070057h +
jmp loc_100D5A9  +
mov byte ptr [ebp-4] 0Bh +
mov ecx [ebp+0Ch] +
call sub_100EA2F  +
test eax eax +
jnz loc_100D636  +
mov ecx [ebp+0Ch] +
call sub_100EA53  +
test eax eax +
jz loc_100D8B6  +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-34h] +
push eax  +
push dword ptr [ebp+0Ch]  +
mov ecx ebx +
call sub_100C90C  +
mov edi eax +
test edi edi +
jl loc_100DA3B  +
mov ecx [ebp-20h] +
xor eax eax +
cmp [ecx-0Ch] eax +
jz loc_100D668  +
lea ecx [ebp-20h] +
call sub_100BB29  +
push dword ptr [ebp-1Ch]  +
mov ecx [ebp+8] +
push eax  +
push dword ptr [ebp-34h]  +
call sub_101304E  +
mov edi eax +
test edi edi +
jl loc_100DA3B  +
mov eax [ebp-20h] +
mov ecx [ebp+0Ch] +
mov edi [ebp-1Ch] +
mov [ebp-28h] eax +
mov eax [ebp-34h] +
mov [ebp-54h] eax +
lea eax [ebp-48h] +
push eax  +
call sub_100EA53  +
mov ecx [ebp+8] +
push eax  +
push edi  +
push dword ptr [ebp-28h]  +
push dword ptr [ebp-54h]  +
call sub_1013BE2  +
mov edi eax +
test edi edi +
jl loc_100DA3B  +
xor edi edi +
cmp [ebp-48h] edi +
jnz loc_100D8B6  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
push dword ptr [ebp+0Ch]  +
mov ecx ebx +
call sub_100CDF2  +
test eax eax +
jge loc_100D6EA  +
mov edi 80070032h +
push 0C150003Fh  +
jmp loc_100D540  +
cmp [ebp-4Ch] edi +
jz loc_100D8B6  +
cmp [ebx] edi +
jz loc_100D717  +
push dword ptr [ebp-30h]  +
push offset aExecutingDismA  +
push 2022h  +
push esi  +
call sub_101A9EC  +
mov ecx [ebx] +
add esp 10h +
push esi  +
push 3  +
call sub_101865E  +
lea eax [ebp-38h] +
push eax  +
lea eax [ebp-50h] +
push eax  +
call sub_101CBD3  +
mov edi eax +
test edi edi +
jl loc_100DA3B  +
push dword ptr [ebp-38h]  +
push dword ptr [ebp-1Ch]  +
call ds:__imp__wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100D74F  +
mov edi 80070032h +
push 0C1500041h  +
jmp loc_100D540  +
mov ecx [ebp+0Ch] +
call sub_100EA26  +
test eax eax +
jz loc_100D808  +
mov ecx [ebp+8] +
lea eax [ebp-18h] +
push eax  +
call sub_101162F  +
mov eax [ebp-18h] +
mov ecx [eax] +
lea edx [ebp-2Ch] +
push edx  +
push eax  +
call dword ptr [ecx+2Ch]  +
mov edi eax +
test edi edi +
jl loc_100DA3B  +
mov edx [ebp-2Ch] +
mov eax [ebp-18h] +
mov ecx [eax] +
or edx 3 +
push edx  +
push eax  +
call dword ptr [ecx+30h]  +
mov edi eax +
test edi edi +
jl loc_100DA3B  +
mov ecx [ebp+0Ch] +
lea eax [ebp-14h] +
push eax  +
call sub_100EF33  +
mov edi eax +
test edi edi +
jl loc_100DA3B  +
push offset aInvalidhelptop  +
lea ecx [ebp-14h] +
call sub_100BB4A  +
test eax eax +
jz loc_100D7FE  +
push offset aImagetoplevelh  +
lea ecx [ebp-14h] +
call sub_100BB4A  +
push ecx  +
mov ecx esp +
mov [ebp+0Ch] esp +
test eax eax +
jnz loc_100D7E6  +
push offset aDownleveltople  +
call sub_100CB3D  +
jmp loc_100D7EF  +
lea eax [ebp-14h] +
push eax  +
call sub_100BDAA  +
mov ecx [ebp+8] +
call sub_1015C95  +
mov edi eax +
jmp loc_100DA3B  +
mov edi 80070057h +
jmp loc_100DA3B  +
push dword ptr [ebp-30h]  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 0Dh +
call sub_100BB74  +
push 0Bh  +
pop esi  +
push dword ptr [ebp-20h]  +
mov [ebp-4] esi +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 0Fh +
call sub_100BB74  +
push dword ptr [ebp-1Ch]  +
mov [ebp-4] esi +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 11h +
call sub_100BB74  +
mov ecx [ebp+0Ch] +
mov [ebp-4] esi +
mov esi [ebp-24h] +
call sub_100EA4A  +
mov ecx [ebp+0Ch] +
neg eax  +
sbb eax eax +
push eax  +
call sub_100EA5C  +
mov ecx [ebp+8] +
neg eax  +
sbb eax eax +
push eax  +
push dword ptr [ebp-44h]  +
push dword ptr [ebp-40h]  +
push dword ptr [ebp-3Ch]  +
push esi  +
call sub_1014335  +
jmp loc_100D9BF  +
mov eax [ebp-58h] +
mov [ebp+0Ch] eax +
mov dword ptr [ebp-4] 0Bh +
mov eax offset loc_100D8AE +
retn   +
mov eax [ebp-5Ch] +
mov [ebp+0Ch] eax +
mov dword ptr [ebp-4] 0Bh +
mov eax offset loc_100D8AE +
retn   +
mov eax [ebp-60h] +
mov [ebp+0Ch] eax +
mov dword ptr [ebp-4] 0Bh +
mov eax offset loc_100D8AE +
retn   +
mov edi [ebp+0Ch] +
jmp loc_100DA3B  +
mov ecx [ebp+0Ch] +
call sub_100EA26  +
test eax eax +
jz loc_100D90D  +
mov ecx [ebp+8] +
lea eax [ebp-18h] +
push eax  +
call sub_1011612  +
mov edi eax +
test edi edi +
jl loc_100DA3B  +
mov eax [ebp-18h] +
test eax eax +
jz loc_100D90D  +
mov ecx [eax] +
lea edx [ebp-2Ch] +
push edx  +
push eax  +
call dword ptr [ecx+2Ch]  +
mov edi eax +
test edi edi +
jl loc_100DA3B  +
mov edx [ebp-2Ch] +
mov eax [ebp-18h] +
mov ecx [eax] +
or edx 1 +
push edx  +
push eax  +
call dword ptr [ecx+30h]  +
mov edi eax +
test edi edi +
jl loc_100DA3B  +
mov ecx [ebp+0Ch] +
call sub_100EA2F  +
test eax eax +
jnz loc_100D925  +
mov ecx [ebp+0Ch] +
call sub_100EA53  +
test eax eax +
jz loc_100D93C  +
push dword ptr [ebp+0Ch]  +
mov ecx ebx +
push dword ptr [ebp+8]  +
call sub_100CD3D  +
mov edi eax +
test edi edi +
jl loc_100DA3B  +
mov ecx [ebp+0Ch] +
call sub_100EA26  +
mov ecx [ebp+0Ch] +
test eax eax +
jz loc_100D97E  +
lea eax [ebp-14h] +
push eax  +
call sub_100EF33  +
mov edi eax +
test edi edi +
jl loc_100DA3B  +
push offset aInvalidhelptop  +
lea ecx [ebp-14h] +
call sub_100BB4A  +
test eax eax +
jz loc_100D7FE  +
push ecx  +
mov [ebp+0Ch] esp +
mov ecx esp +
jmp loc_100D7E6  +
call sub_100EA2F  +
test eax eax +
jnz loc_100D9F1  +
mov ecx [ebp+0Ch] +
call sub_100EA53  +
test eax eax +
jnz loc_100D9F1  +
mov ecx [ebp+8] +
push eax  +
call sub_1015B0C  +
mov edi eax +
test edi edi +
jge loc_100D9B2  +
cmp dword ptr [ebx] 0 +
jz loc_100DA3B  +
push offset aFailedToGetBui  +
jmp loc_100DA0B  +
push 0  +
push dword ptr [ebp-24h]  +
mov ecx [ebp+8] +
call sub_10152A1  +
mov edi eax +
test edi edi +
jl loc_100DA3B  +
cmp edi 1 +
jz loc_100D7FE  +
test edi edi +
jl loc_100DA3B  +
cmp dword_1034A80 0 +
jz loc_100DA29  +
push 0C150006Bh  +
push dword ptr [ebx+8]  +
call sub_10196C9  +
pop ecx  +
pop ecx  +
mov edi 800704C7h +
jmp loc_100DA3B  +
mov ecx [ebp+8] +
push 1  +
call sub_1015B0C  +
mov edi eax +
test edi edi +
jge loc_100DA25  +
cmp dword ptr [ebx] 0 +
jz loc_100DA3B  +
push offset aFailedToGetB_0  +
push 2022h  +
push esi  +
call sub_101A9EC  +
mov ecx [ebx] +
add esp 0Ch +
push esi  +
push 1  +
call sub_101865E  +
jmp loc_100DA3B  +
push 1  +
jmp loc_100D9B4  +
push 1500020h  +
push 3  +
push dword ptr [ebx+4]  +
call sub_100E2A2  +
add esp 0Ch +
mov eax [ebp-18h] +
mov byte ptr [ebp-4] 0Ah +
test eax eax +
jz loc_100DA4C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [ebp-38h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov ecx [ebp-50h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov ecx [ebp-30h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov ecx [ebp-1Ch] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov ecx [ebp-20h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov ecx [ebp-34h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
push dword ptr [ebp-3Ch]  +
mov esi ds:SysFreeString +
call esi  +
push dword ptr [ebp-40h]  +
call esi  +
push dword ptr [ebp-44h]  +
call esi  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov eax [ebp-24h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_100DABF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
call __EH_epilog3  +
retn 8  +
***
call __EH_prolog3_catch  +
mov esi ecx +
mov [ebp-24h] esi +
lea ecx [ebp-114h] +
call sub_100ECD6  +
xor ebx ebx +
lea ecx [ebp-90h] +
mov [ebp-4] ebx +
call sub_10146CD  +
mov edi offset dword_1044E10 +
push edi  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 1 +
call sub_100BC7D  +
push edi  +
lea ecx [ebp-18h] +
mov byte ptr [ebp-4] 2 +
call sub_100BC7D  +
lea eax [ebp-1Ch] +
push eax  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
push dword ptr [ebp+8]  +
mov byte ptr [ebp-4] 3 +
mov [ebp-20h] ebx +
mov [ebp-1Ch] ebx +
call sub_100D060  +
mov edi eax +
cmp edi ebx +
jge loc_100DB4E  +
push offset aFailedToParseT  +
call ds:wprintf  +
pop ecx  +
jmp loc_100DE27  +
cmp dword_10309F0 ebx +
mov ebx offset unk_1044EAC +
jnz loc_100DBE1  +
push ebx  +
push 10h  +
call ??2@YAPAXIABUnothrow_t@std@@@Z  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100DB76  +
mov ecx eax +
call sub_100B9B5  +
jmp loc_100DB78  +
xor eax eax +
mov dword_10309F0 eax +
test eax eax +
jnz loc_100DBC2  +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
lea ecx [ebp-90h] +
mov byte ptr [ebp-4] 0 +
call sub_101471A  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-114h] +
call sub_100ED83  +
mov eax 8007000Eh +
call __EH_epilog3  +
retn 8  +
push dword ptr [ebp-1Ch]  +
mov ecx eax +
push offset aDism_exe  +
call sub_101D0B0  +
mov edi eax +
test edi edi +
jge loc_100DBE1  +
push offset aFailedToFindTh  +
jmp loc_100DB42  +
push ebx  +
push 8  +
call ??2@YAPAXIABUnothrow_t@std@@@Z  +
pop ecx  +
pop ecx  +
mov [ebp-1Ch] eax +
mov byte ptr [ebp-4] 4 +
test eax eax +
jz loc_100DBFF  +
mov ecx eax +
call ??0DNameNode@@IAE@XZ  +
jmp loc_100DC01  +
xor eax eax +
mov byte ptr [ebp-4] 3 +
mov [esi+4] eax +
test eax eax +
jnz loc_100DC4C  +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov esi 8007000Eh +
lea ecx [ebp-90h] +
mov byte ptr [ebp-4] 0 +
call sub_101471A  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-114h] +
call sub_100ED83  +
mov eax esi +
jmp loc_100DBBA  +
push offset aDism_exe  +
mov ecx eax +
call sub_100DF0F  +
mov edi eax +
test edi edi +
jge loc_100DC68  +
push offset aFailedToInitia  +
jmp loc_100DB42  +
push ebx  +
push 24h  +
call ??2@YAPAXIABUnothrow_t@std@@@Z  +
pop ecx  +
pop ecx  +
mov [ebp-1Ch] eax +
mov byte ptr [ebp-4] 5 +
test eax eax +
jz loc_100DC89  +
push dword ptr [esi+4]  +
mov ecx eax +
call sub_101959A  +
jmp loc_100DC8B  +
xor eax eax +
mov byte ptr [ebp-4] 3 +
mov [esi+8] eax +
test eax eax +
jnz loc_100DCA0  +
mov edi 8007000Eh +
jmp loc_100DE27  +
push dword ptr [ebp+8]  +
lea ecx [ebp-114h] +
call sub_100EB8B  +
mov edi eax +
test edi edi +
jge loc_100DCFD  +
push edi  +
lea eax [ebp-14h] +
push offset aFailedToInit_0  +
push eax  +
mov byte ptr [ebp-4] 6 +
call sub_100C88F  +
add esp 0Ch +
push dword ptr [ebp-14h]  +
mov dword ptr [ebp-4] 3 +
call ds:OutputDebugStringW  +
jmp loc_100DE27  +
mov eax [ebp-2Ch] +
mov [ebp+8] eax +
mov dword ptr [ebp-4] 3 +
mov eax offset loc_100DCF2 +
retn   +
mov esi [ebp-24h] +
mov edi [ebp+8] +
jmp loc_100DE27  +
push dword ptr [esi+8]  +
lea ecx [ebp-90h] +
push dword ptr [esi+4]  +
call sub_1013B12  +
mov edi eax +
test edi edi +
jl loc_100DE27  +
lea eax [ebp-114h] +
push eax  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
push dword ptr [ebp+8]  +
call sub_100D138  +
mov edi eax +
test edi edi +
jge loc_100DD4C  +
lea eax [ebp-114h] +
push eax  +
lea eax [ebp-90h] +
push eax  +
mov ecx esi +
call sub_100C3E3  +
jmp loc_100DE27  +
lea ecx [ebp-114h] +
call sub_100EA5C  +
test eax eax +
jz loc_100DD73  +
lea ecx [ebp-114h] +
call sub_100EA26  +
test eax eax +
jnz loc_100DD73  +
mov ecx [esi+4] +
push eax  +
call sub_100DEE8  +
lea eax [ebp-18h] +
push eax  +
call sub_101CF3A  +
test eax eax +
jl loc_100DD96  +
push dword ptr [ebp-18h]  +
push 64h  +
push 3  +
push dword ptr [esi+4]  +
call sub_100E2C9  +
add esp 10h +
test eax eax +
jge loc_100DDBC  +
push eax  +
lea eax [ebp-14h] +
push offset aFailedToWriteP  +
push eax  +
mov byte ptr [ebp-4] 8 +
call sub_100C88F  +
add esp 0Ch +
push dword ptr [ebp-14h]  +
mov dword ptr [ebp-4] 3 +
call ds:OutputDebugStringW  +
lea eax [ebp-114h] +
push eax  +
lea eax [ebp-90h] +
push eax  +
mov ecx esi +
call sub_100BE05  +
mov edi eax +
test edi edi +
jl loc_100DE27  +
lea eax [ebp-20h] +
push eax  +
lea ecx [ebp-114h] +
call sub_100F0D7  +
mov edi eax +
test edi edi +
jge loc_100DE10  +
push dword ptr [ebp-20h]  +
push dword ptr [esi+8]  +
call sub_10196C9  +
pop ecx  +
jmp loc_100DB48  +
mov eax [ebp-28h] +
mov [ebp+8] eax +
mov dword ptr [ebp-4] 3 +
mov eax offset loc_100DCF2 +
retn   +
lea eax [ebp-114h] +
push eax  +
lea eax [ebp-90h] +
push eax  +
mov ecx esi +
call sub_100D46A  +
mov edi eax +
lea eax [ebp-114h] +
push eax  +
lea eax [ebp-90h] +
push eax  +
mov ecx esi +
call sub_100C6B3  +
test edi edi +
jl loc_100DE42  +
mov edi eax +
mov ecx [esi] +
test ecx ecx +
jz loc_100DE4D  +
call sub_10186BA  +
lea eax [ebp-90h] +
push eax  +
mov ecx esi +
call sub_100B52F  +
mov ecx [esi+8] +
test ecx ecx +
jz loc_100DE68  +
push edi  +
call sub_1019528  +
push edi  +
mov ecx esi +
call sub_100B545  +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
mov esi eax +
call sub_100B8FC  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
jmp loc_100DC27  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
xor eax eax +
push eax  +
mov [ebp+var_C] eax +
mov [ebp+var_8] eax +
mov [ebp+var_4] eax +
call ds:SetThreadUILanguage  +
push 1  +
call ds:SetErrorMode  +
push 1  +
push offset HandlerRoutine  +
call ds:SetConsoleCtrlHandler  +
push [ebp+arg_4]  +
lea ecx [ebp+var_C] +
push [ebp+arg_0]  +
call sub_100DACE  +
leave   +
retn   +
***
mov eax ecx +
and dword ptr [eax+4] 0 +
mov dword ptr [eax] 1 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx+4] eax +
pop ebp  +
retn 4  +
***
cmp hConsoleOutput 0 +
jnz loc_100DF31  +
push 0FFFFFFF5h  +
call ds:GetStdHandle  +
mov hConsoleOutput eax +
cmp eax 0FFFFFFFFh +
jnz loc_100DF31  +
and hConsoleOutput 0 +
xor eax eax +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+hConsoleHandle]  +
call ds:GetFileType  +
and eax 0FFFF7FFFh +
cmp eax 2 +
jnz loc_100DF6A  +
lea eax [ebp+Mode] +
push eax  +
push [ebp+hConsoleHandle]  +
call ds:GetConsoleMode  +
test eax eax +
jz loc_100DF6A  +
xor eax eax +
inc eax  +
jmp locret_100DF6C  +
xor eax eax +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101A91D  +
add esp 10h +
push eax  +
call sub_100B657  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_8]  +
mov esi eax +
push [ebp+arg_4]  +
xor ebx ebx +
dec esi  +
push esi  +
push edi  +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_100DFC4  +
cmp eax esi +
ja loc_100DFC4  +
jz loc_100DFC9  +
jmp loc_100DFD1  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
mov eax esi +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100DFDA  +
mov [ecx] eax +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
call ds:GetLastError  +
test eax eax +
jnz loc_100DFF7  +
mov eax 8007001Fh +
retn   +
jle locret_100E003  +
and eax 0FFFFh +
or eax 80070000h +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax hConsoleOutput +
push esi  +
xor esi esi +
cmp eax esi +
jz loc_100E08A  +
push eax  +
call sub_100DF3B  +
test eax eax +
jz loc_100E03D  +
push esi  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push [ebp+NumberOfBytesWritten]  +
push [ebp+lpWideCharStr]  +
push hConsoleOutput  +
call ds:WriteConsoleW  +
jmp loc_100E08A  +
mov eax [ebp+NumberOfBytesWritten] +
push edi  +
add eax eax +
push eax  +
push esi  +
call ds:LocalAlloc  +
mov edi eax +
cmp edi esi +
jz loc_100E089  +
mov eax [ebp+NumberOfBytesWritten] +
push esi  +
push esi  +
lea ecx [eax+eax] +
push ecx  +
push edi  +
push eax  +
push [ebp+lpWideCharStr]  +
push esi  +
push 1  +
call ds:WideCharToMultiByte  +
mov [ebp+NumberOfBytesWritten] eax +
cmp eax esi +
jz loc_100E082  +
push esi  +
lea ecx [ebp+NumberOfBytesWritten] +
push ecx  +
push eax  +
push edi  +
push hConsoleOutput  +
call ds:WriteFile  +
push edi  +
call ds:LocalFree  +
pop edi  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_100E0AB  +
cmp [ebp+arg_4] 7FFFFFFFh +
jbe loc_100E0B0  +
mov eax 80070057h +
test eax eax +
jl loc_100E0C9  +
mov eax [ebp+arg_4] +
push edi  +
push [ebp+arg_C]  +
mov edi [ebp+arg_0] +
push [ebp+arg_8]  +
push 0  +
call sub_100DF9B  +
pop edi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_100E0E7  +
cmp [ebp+arg_4] 7FFFFFFFh +
jbe loc_100E0EC  +
mov eax 80070057h +
test eax eax +
jl loc_100E106  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
push 0  +
call sub_100DF9B  +
pop edi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
cmp hConsoleOutput 0 +
jnz loc_100E124  +
xor eax eax +
leave   +
retn   +
push esi  +
push edi  +
push offset unk_1044EAC  +
push 4E20h  +
call sub_101A694  +
mov edi eax +
pop ecx  +
pop ecx  +
test edi edi +
jnz loc_100E144  +
mov esi 8007000Eh +
jmp loc_100E1A4  +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
push 2710h  +
push edi  +
call sub_100E096  +
mov esi eax +
test esi esi +
jl loc_100E1A4  +
push hConsoleOutput  +
mov ecx [ebp+arg_0] +
call sub_100DF3B  +
test eax eax +
jnz loc_100E183  +
lea eax [ebp+var_4] +
push eax  +
push edi  +
call sub_101D696  +
mov esi eax +
test esi esi +
jl loc_100E1A4  +
mov esi [ebp+var_4] +
jmp loc_100E185  +
mov esi edi +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100E18A  +
mov ecx [ebp+arg_0] +
sub eax edx +
sar eax 1 +
push eax  +
push esi  +
call sub_100E009  +
mov esi eax +
cmp [ebp+var_4] 0 +
jz loc_100E1B7  +
push [ebp+var_4]  +
call sub_1019EA8  +
and [ebp+var_4] 0 +
pop ecx  +
test edi edi +
jz loc_100E1C2  +
push edi  +
call sub_1019EA8  +
pop ecx  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ecx] eax +
jnz loc_100E1DE  +
mov edx [ebp+arg_0] +
dec edx  +
jnz loc_100E1EF  +
push dword ptr [ebp+arg_4]  +
push offset aS  +
push ecx  +
call sub_100E10D  +
add esp 0Ch +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and dword ptr [ebp+var_4] 0 +
push esi  +
push [ebp+Arguments]  +
lea eax [ebp+var_4] +
push [ebp+dwMessageId]  +
mov esi ecx +
mov ecx dword_10309F0 +
push eax  +
call sub_101D3B8  +
test eax eax +
jl loc_100E22F  +
push dword ptr [ebp+var_4]  +
push offset aS  +
push esi  +
call sub_100E10D  +
add esp 0Ch +
cmp dword ptr [ebp+var_4] 0 +
pop esi  +
jz locret_100E244  +
push dword ptr [ebp+var_4]  +
mov ecx dword_10309F0 +
call sub_101D10F  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and dword ptr [ebp+var_4] 0 +
push esi  +
push [ebp+Arguments]  +
lea eax [ebp+var_4] +
push [ebp+arg_0]  +
mov esi ecx +
mov ecx dword_10309F0 +
push eax  +
call sub_101D454  +
test eax eax +
jl loc_100E284  +
push dword ptr [ebp+var_4]  +
push offset aS  +
push esi  +
call sub_100E10D  +
add esp 0Ch +
cmp dword ptr [ebp+var_4] 0 +
pop esi  +
jz locret_100E299  +
push dword ptr [ebp+var_4]  +
mov ecx dword_10309F0 +
call sub_101D10F  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
cmp [ecx] eax +
jnz loc_100E2B6  +
mov edx [ebp+arg_4] +
dec edx  +
jnz loc_100E2C2  +
lea eax [ebp+Arguments] +
push eax  +
push [ebp+dwMessageId]  +
call sub_100E1F8  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
cmp [ecx] eax +
jnz loc_100E2DD  +
mov edx [ebp+arg_4] +
dec edx  +
jnz loc_100E2E9  +
lea eax [ebp+Arguments] +
push eax  +
push [ebp+arg_8]  +
call sub_100E24D  +
pop ebp  +
retn   +
***
call __EH_prolog3  +
mov ebx ecx +
mov [ebp-18h] ebx +
xor edi edi +
mov [ebp-14h] edi +
mov [ebp-4] edi +
mov [ebp-10h] edi +
mov eax [ebp+10h] +
mov ecx [ebp+14h] +
mov [ecx] eax +
push 6Ah  +
lea eax [ebp-14h] +
push eax  +
push dword_10309F0  +
mov byte ptr [ebp-4] 1 +
call sub_101D639  +
mov esi eax +
add esp 0Ch +
cmp esi edi +
jl loc_100E3E4  +
mov eax [ebp-14h] +
movzx eax word ptr [eax] +
mov [ebp+10h] eax +
push 6Bh  +
lea eax [ebp-10h] +
push eax  +
push dword_10309F0  +
call sub_101D639  +
mov esi eax +
add esp 0Ch +
cmp esi edi +
jl loc_100E3E4  +
push dword ptr [ebp+0Ch]  +
mov eax [ebp-10h] +
movzx eax word ptr [eax] +
push dword ptr [ebp+8]  +
mov [ebp-1Ch] eax +
push ebx  +
call sub_100E2C9  +
mov esi eax +
add esp 0Ch +
cmp esi edi +
jl loc_100E3E4  +
cmp [ebx] edi +
jz loc_100E3E4  +
mov edi ds:_getwch +
call edi  +
mov ebx ds:towupper +
jmp loc_100E397  +
cmp ax [ebp-1Ch] +
jz loc_100E3C8  +
call edi  +
movzx esi ax +
push esi  +
call ebx  +
movzx eax ax +
pop ecx  +
cmp ax [ebp+10h] +
jnz loc_100E38F  +
movzx eax si +
push eax  +
push offset aC  +
push dword ptr [ebp-18h]  +
call sub_100E10D  +
mov esi eax +
mov eax [ebp+14h] +
add esp 0Ch +
mov dword ptr [eax] 1 +
jmp loc_100E3E4  +
movzx eax si +
push eax  +
push offset aC  +
push dword ptr [ebp-18h]  +
call sub_100E10D  +
mov esi eax +
mov eax [ebp+14h] +
add esp 0Ch +
and dword ptr [eax] 0 +
push dword ptr [ebp-10h]  +
mov edi ds:SysFreeString +
call edi  +
push dword ptr [ebp-14h]  +
call edi  +
mov eax esi +
call __EH_epilog3  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov dx [ebp+arg_0] +
push edi  +
mov edi ecx +
mov ecx [edi] +
mov eax ecx +
jmp loc_100E417  +
inc eax  +
inc eax  +
cmp dx [eax] +
jz loc_100E415  +
cmp eax ecx +
jz loc_100E456  +
push ebx  +
sub eax ecx +
push esi  +
push dword ptr [ecx-0Ch]  +
sar eax 1 +
mov ecx edi +
mov ebx eax +
call sub_100BDD2  +
mov ecx [edi] +
mov esi [ecx-0Ch] +
sub esi ebx +
lea ecx [esi+esi+2] +
push ecx  +
lea edx [eax+ebx*2] +
push edx  +
push ecx  +
push eax  +
call sub_100DF75  +
add esp 10h +
push esi  +
mov ecx edi +
call loc_100B9FC  +
pop esi  +
pop ebx  +
mov eax edi +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100BDD2  +
push [ebp+arg_0]  +
mov ecx esi +
call loc_100B9FC  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov ebx ecx +
mov eax [ebx] +
push edi  +
mov edi [eax-0Ch] +
sub esi eax +
mov eax [ebp+arg_4] +
add eax edi +
push eax  +
sar esi 1 +
mov [ebp+var_4] eax +
call sub_100BDD2  +
cmp esi edi +
lea esi [eax+esi*2] +
jbe loc_100E4B5  +
mov esi [ebp+arg_0] +
push [ebp+arg_4]  +
lea eax [eax+edi*2] +
push esi  +
push [ebp+arg_4]  +
push eax  +
call sub_100B4C7  +
add esp 10h +
push [ebp+var_4]  +
mov ecx ebx +
call loc_100B9FC  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push edi  +
mov edi [esi] +
mov edx edi +
movzx eax word ptr [edx] +
xor ecx ecx +
test ax ax +
jz loc_100E51F  +
cmp ax [ebp+arg_0] +
jnz loc_100E503  +
test ecx ecx +
jnz loc_100E505  +
mov ecx edx +
jmp loc_100E505  +
xor ecx ecx +
inc edx  +
inc edx  +
movzx eax word ptr [edx] +
test ax ax +
jnz loc_100E4F5  +
test ecx ecx +
jz loc_100E51F  +
sub ecx edi +
sar ecx 1 +
push ecx  +
mov ecx esi +
call sub_100E462  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100B9D6  +
pop ecx  +
push eax  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_100E486  +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3_catch  +
mov eax offset loc_100E5EC +
retn   +
mov esi [ebp-1Ch] +
jmp loc_100E5D1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
push [ebp+arg_0]  +
call sub_100E4DE  +
mov ecx eax +
call sub_100E403  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100E52C  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax offset loc_1020205 +
call __EH_prolog3_catch  +
mov edi ecx +
mov [ebp-20h] edi +
push hConsoleOutput  +
call sub_100DF3B  +
test eax eax +
jnz loc_100E65C  +
xor eax eax +
call __EH_epilog3  +
retn 0Ch  +
***
xor esi esi +
cmp [edi] esi +
jz loc_100E652  +
push offset dword_1044E10  +
lea ecx [ebp-18h] +
mov [ebp-14h] esi +
call sub_100BC7D  +
mov eax [ebp+0Ch] +
mov [ebp-4] esi +
cmp eax 1 +
ja loc_100E680  +
xor eax eax +
inc eax  +
cmp [ebp+8] eax +
jb loc_100E688  +
mov [ebp+8] eax +
mov ecx [ebp+8] +
fild  dword ptr [ebp+8] +
test ecx ecx +
jge loc_100E698  +
fadd  ds:dword_1002614+4 +
mov [ebp+8] eax +
fild  dword ptr [ebp+8] +
test eax eax +
jge loc_100E6A8  +
fadd  ds:dword_1002614+4 +
fdivp st(1) st +
fstp  dword ptr [ebp+0Ch] +
fld  dword ptr [ebp+0Ch] +
fmul  qword ptr ds:dword_10025FC+14h +
call __ftol2  +
mov [ebp-1Ch] eax +
lea eax [ebp+8] +
push eax  +
push 7Ah  +
push 8  +
mov [ebp+8] esi +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
push eax  +
call sub_101D92F  +
mov edi eax +
cmp edi esi +
jl loc_100E82B  +
mov ebx [ebp+8] +
push 7Ah  +
push esi  +
push ebx  +
call memset  +
push offset dword_100167C  +
push (offset dword_10025FC+4)  +
push 3Dh  +
push ebx  +
call sub_100E0D2  +
mov edi eax +
add esp 1Ch +
cmp edi esi +
jl loc_100E818  +
fld  dword ptr [ebp+0Ch] +
push ecx  +
fmul  qword ptr ds:dword_10025F4+4 +
push ecx  +
lea eax [ebp-14h] +
fstp  qword ptr [esp] +
push offset a2_1f  +
push eax  +
call sub_101F0D8  +
mov edi eax +
add esp 10h +
cmp edi esi +
jl loc_100E818  +
mov eax [ebp-14h] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx si +
jnz loc_100E740  +
sub eax edx +
mov ecx ebx +
sar eax 1 +
lea edx [ecx+2] +
mov si [ecx] +
inc ecx  +
inc ecx  +
test si si +
jnz loc_100E753  +
sub ecx edx +
sar ecx 1 +
cmp eax ecx +
jnb loc_100E816  +
cmp dword ptr [ebp-1Ch] 0 +
jbe loc_100E78B  +
mov ecx [ebp-1Ch] +
push 3Dh  +
pop eax  +
movzx edx ax +
mov eax edx +
shl edx 10h +
or eax edx +
shr ecx 1 +
lea edi [ebx+2] +
stos   +
adc ecx ecx +
stos   +
mov esi [ebp-14h] +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100E793  +
sub eax edx +
sar eax 1 +
shr eax 1 +
push 1Eh  +
pop ecx  +
sub ecx eax +
movzx eax word ptr [esi] +
mov edx esi +
xor esi esi +
cmp si ax +
jz loc_100E7CB  +
movzx eax ax +
lea ecx [ebx+ecx*2] +
mov [ecx] ax +
inc ecx  +
inc ecx  +
inc edx  +
inc edx  +
movzx eax word ptr [edx] +
xor esi esi +
cmp si ax +
jnz loc_100E7BA  +
cmp dword ptr [ebp+10h] 0 +
jz loc_100E7FC  +
push dword ptr [ebp+10h]  +
lea eax [ebp-18h] +
push offset a40s  +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_100C88F  +
add esp 0Ch +
push 0Ah  +
lea ecx [ebp-18h] +
call sub_100E5F6  +
push eax  +
lea ecx [ebp-18h] +
call sub_100C5E7  +
push dword ptr [ebp-18h]  +
and dword ptr [ebp-4] 0 +
push ebx  +
push offset aSS_0  +
push dword ptr [ebp-20h]  +
call sub_100E10D  +
add esp 10h +
mov edi eax +
xor esi esi +
cmp ebx esi +
jz loc_100E82B  +
push ebx  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp [ebp-14h] esi +
jz loc_100E848  +
push dword ptr [ebp-14h]  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
test eax eax +
jz loc_100E848  +
mov [ebp-14h] esi +
mov esi edi +
jmp loc_100E855  +
mov eax offset loc_100E852 +
retn   +
***
mov esi [ebp-24h] +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov eax esi +
jmp loc_100E654  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100E616  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3_catch  +
mov eax [ebp-1Ch] +
mov [ebp-18h] eax +
mov eax offset loc_100E922 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx+6Ch] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
lea eax [ebp+arg_0] +
push eax  +
mov esi ecx +
call ??0exception@@QAE@ABQBD@Z  +
mov dword ptr [esi] offset off_1002630 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov dword ptr [ecx] offset off_1002630 +
jmp ??1exception@@UAE@XZ  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1002630 +
call ??1exception@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_100E9B0  +
push esi  +
call sub_1019EA8  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call ??0exception@@QAE@ABV0@@Z  +
mov dword ptr [esi] offset off_1002630 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+74h] +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+78h] +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+70h] +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 4  +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
mov eax [ecx+80h] +
retn   +
***
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
sub esp 0Ch +
test ecx ecx +
ja loc_100EAC5  +
xor ecx ecx +
imul ecx ecx +
push ecx  +
call loc_1019E39  +
pop ecx  +
leave   +
retn 8  +
***
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 0Ch +
jnb loc_100EAB7  +
push 0  +
lea ecx [ebp-0Ch] +
call sub_100E95D  +
push offset dword_1021D68  +
lea eax [ebp-0Ch] +
push eax  +
call _CxxThrowException  +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ecx  +
lea ecx [ebp-0Ch] +
call sub_100E9BC  +
push offset dword_1021D68  +
lea eax [ebp-0Ch] +
push eax  +
call _CxxThrowException  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jl loc_100EB2E  +
cmp eax [ecx+8] +
jge loc_100EB2E  +
mov ecx [ecx] +
lea eax [ecx+eax*4] +
pop ebp  +
retn 4  +
***
push 0  +
push 0  +
push 1  +
push 0C000008Ch  +
call ds:RaiseException  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jl loc_100EB60  +
cmp eax [ecx+8] +
jge loc_100EB60  +
mov ecx [ecx+4] +
lea eax [ecx+eax*4] +
pop ebp  +
retn 4  +
***
push 0  +
push 0  +
push 1  +
push 0C000008Ch  +
call ds:RaiseException  +
mov eax [ecx] +
test eax eax +
jz locret_100EB85  +
push eax  +
call ds:__imp_free  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx+7Ch] eax +
add ecx 14h +
call sub_100BC41  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov ecx [ebp+arg_0] +
call sub_100BB4A  +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
call loc_100EAA6  +
test eax eax +
jz loc_100EBD6  +
mov [eax] eax +
lea ecx [eax+4] +
test ecx ecx +
jz locret_100EBDF  +
mov [ecx] eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [esi] +
sub ecx 10h +
call sub_100B8FC  +
test [ebp+arg_0] 1 +
jz loc_100EC04  +
push esi  +
call sub_1019EA8  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
cmp [esi] ebx +
jz loc_100EC55  +
push edi  +
xor edi edi +
cmp [esi+8] ebx +
jle loc_100EC49  +
mov ecx [esi] +
mov eax edi +
shl eax 2 +
push ebx  +
add ecx eax +
call sub_100EBE5  +
mov ecx [esi+4] +
mov eax edi +
shl eax 2 +
push ebx  +
add ecx eax +
call sub_100EBE5  +
inc edi  +
cmp edi [esi+8] +
jl loc_100EC24  +
push dword ptr [esi]  +
call ds:__imp_free  +
pop ecx  +
mov [esi] ebx +
pop edi  +
mov eax [esi+4] +
cmp eax ebx +
jz loc_100EC67  +
push eax  +
call ds:__imp_free  +
pop ecx  +
mov [esi+4] ebx +
mov [esi+8] ebx +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100EBC7  +
and dword ptr [esi+8] 0 +
mov [esi+4] eax +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100C209  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+8] +
test eax eax +
jz loc_100ECBD  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
test [ebp+arg_0] 1 +
jz loc_100ECCA  +
push esi  +
call sub_1019EA8  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
call sub_100BD92  +
lea ebx [esi+4] +
mov ecx ebx +
call sub_100BD92  +
lea ecx [esi+8] +
call sub_100BD92  +
lea ecx [esi+0Ch] +
call sub_100BD92  +
lea ecx [esi+10h] +
call sub_100BD92  +
lea ecx [esi+14h] +
call sub_100BD92  +
xor edi edi +
mov [esi+18h] edi +
mov [esi+1Ch] edi +
mov [esi+20h] edi +
mov [esi+24h] edi +
mov [esi+28h] edi +
mov [esi+2Ch] edi +
mov [esi+30h] edi +
mov [esi+34h] edi +
mov [esi+38h] edi +
mov [esi+3Ch] edi +
mov [esi+40h] edi +
mov [esi+44h] edi +
mov [esi+48h] edi +
mov [esi+4Ch] edi +
mov [esi+50h] edi +
mov [esi+54h] edi +
mov [esi+58h] edi +
mov [esi+5Ch] edi +
mov [esi+60h] edi +
mov [esi+64h] edi +
mov [esi+68h] edi +
mov ecx esi +
mov [esi+70h] edi +
mov [esi+74h] edi +
mov [esi+78h] edi +
mov [esi+7Ch] edi +
mov [esi+80h] edi +
call sub_100BC41  +
mov ecx ebx +
call sub_100BC41  +
lea ecx [esi+8] +
call sub_100BC41  +
mov [esi+6Ch] edi +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+3Ch] +
mov ecx edi +
call sub_100EC10  +
lea ecx [esi+5Ch] +
call sub_100EB77  +
mov ecx edi +
call sub_100EC10  +
mov ecx [esi+14h] +
push 10h  +
pop edi  +
sub ecx edi +
call sub_100B8FC  +
mov ecx [esi+10h] +
sub ecx edi +
call sub_100B8FC  +
mov ecx [esi+0Ch] +
sub ecx edi +
call sub_100B8FC  +
mov ecx [esi+8] +
sub ecx edi +
call sub_100B8FC  +
mov ecx [esi+4] +
sub ecx edi +
call sub_100B8FC  +
mov ecx [esi] +
sub ecx edi +
pop edi  +
pop esi  +
jmp sub_100B8FC  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
mov edi [ebp+8] +
mov ecx [esi] +
shl edi 2 +
add ecx edi +
mov [ebp-14h] ecx +
mov dword ptr [ebp-4] 0 +
jz loc_100EE16  +
push dword ptr [ebp+0Ch]  +
call sub_100EC8C  +
mov ecx [esi+4] +
add ecx edi +
mov [ebp+0Ch] ecx +
mov dword ptr [ebp-4] 1 +
jz loc_100EE2F  +
push dword ptr [ebp+10h]  +
call sub_100EC8C  +
call __EH_epilog3  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push 0  +
call sub_100ECA8  +
pop ebp  +
retn 4  +
***
call __EH_prolog3_catch  +
and dword ptr [ebp-4] 0 +
add ecx 4 +
push ecx  +
mov ecx [ebp+8] +
call sub_100C8AA  +
xor eax eax +
jmp loc_100EE7D  +
mov eax offset loc_100EE7A +
retn   +
mov eax [ebp-14h] +
call __EH_epilog3  +
retn 4  +
***
call __EH_prolog3_catch  +
and dword ptr [ebp-4] 0 +
add ecx 10h +
push ecx  +
mov ecx [ebp+8] +
call sub_100C8AA  +
xor eax eax +
jmp loc_100EEB3  +
mov eax offset loc_100EEB0 +
retn   +
mov eax [ebp-14h] +
call __EH_epilog3  +
retn 4  +
***
call __EH_prolog3_catch  +
mov dword ptr [ebp-14h] 8007000Eh +
mov eax offset loc_100EEE0 +
retn   +
***
call __EH_prolog3_catch  +
and dword ptr [ebp-4] 0 +
add ecx 0Ch +
push ecx  +
mov ecx [ebp+8] +
call sub_100C8AA  +
xor eax eax +
jmp loc_100EF26  +
mov eax offset loc_100EF23 +
retn   +
mov eax [ebp-14h] +
call __EH_epilog3  +
retn 4  +
***
call __EH_prolog3_catch  +
and dword ptr [ebp-4] 0 +
add ecx 14h +
push ecx  +
mov ecx [ebp+8] +
call sub_100C8AA  +
xor eax eax +
jmp loc_100EF5C  +
mov eax offset loc_100EF59 +
retn   +
mov eax [ebp-14h] +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+8] +
push edi  +
mov edi off_1028530 +
push 4  +
inc eax  +
push eax  +
push dword ptr [esi]  +
call edi  +
add esp 0Ch +
test eax eax +
jnz loc_100EF8E  +
xor eax eax +
jmp loc_100EFBC  +
mov [esi] eax +
mov eax [esi+8] +
push 4  +
inc eax  +
push eax  +
push dword ptr [esi+4]  +
call edi  +
add esp 0Ch +
test eax eax +
jz loc_100EF8A  +
push [ebp+arg_4]  +
mov ecx esi +
push [ebp+arg_0]  +
mov [esi+4] eax +
push dword ptr [esi+8]  +
call sub_100EDE7  +
inc dword ptr [esi+8]  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
call __EH_prolog3_catch  +
mov esi ecx +
push dword ptr [ebp+8]  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+0Ch] +
call sub_100CB21  +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_100EFF5  +
push dword ptr [ebp+0Ch]  +
lea ecx [esi+10h] +
call sub_100CB21  +
xor eax eax +
jmp loc_100F002  +
mov eax offset loc_100EFFF +
retn   +
mov eax [ebp-14h] +
call __EH_epilog3  +
retn 8  +
***
call __EH_prolog3_catch  +
mov esi ecx +
mov edi [ebp+0Ch] +
push edi  +
push dword ptr [ebp+8]  +
lea ecx [esi+3Ch] +
call sub_100EF69  +
test eax eax +
jnz loc_100F03A  +
mov eax 80004005h +
jmp loc_100F0CA  +
xor ebx ebx +
cmp [esi+20h] ebx +
jnz loc_100F0A3  +
mov eax [edi] +
cmp [eax-0Ch] ebx +
jnz loc_100F07B  +
lea edi [esi+14h] +
push edi  +
push offset aInvalidhelptop  +
call sub_100BD73  +
test al al +
jz loc_100F074  +
push dword ptr [ebp+8]  +
mov ecx edi +
mov [ebp-4] ebx +
call sub_100C8AA  +
jmp loc_100F08F  +
mov eax offset loc_100F06F +
retn   +
mov eax [ebp-14h] +
jmp loc_100F0CA  +
mov eax 80070057h +
jmp loc_100F0CA  +
lea ecx [esi+14h] +
push offset aInvalidhelptop  +
mov dword ptr [ebp-4] 2 +
call sub_100C63E  +
mov dword ptr [esi+20h] 1 +
jmp loc_100F0B7  +
mov eax offset loc_100F09E +
retn   +
mov eax [ebp-18h] +
jmp loc_100F0CA  +
lea ecx [esi+14h] +
push offset aInvalidhelptop  +
mov dword ptr [ebp-4] 4 +
call sub_100C63E  +
mov [esi+80h] ebx +
xor eax eax +
jmp loc_100F0CA  +
mov eax offset loc_100F0C7 +
retn   +
mov eax [ebp-1Ch] +
call __EH_epilog3  +
retn 8  +
***
call __EH_prolog3_catch  +
mov esi ecx +
mov [ebp-18h] esi +
mov eax [esi+44h] +
xor ebx ebx +
mov [ebp-14h] ebx +
cmp [esi+18h] ebx +
jnz loc_100F1A4  +
cmp dword ptr [esi+7Ch] 1 +
jle loc_100F1A4  +
cmp eax ebx +
jnz loc_100F147  +
mov eax [esi+48h] +
cmp eax ebx +
jnz loc_100F122  +
cmp [esi+24h] ebx +
jnz loc_100F11E  +
mov eax [ebp+8] +
mov dword ptr [eax] 0C1500039h +
jmp loc_100F13B  +
cmp eax ebx +
jz loc_100F12D  +
mov eax [ebp+8] +
mov dword ptr [eax] 0C1500035h +
jmp loc_100F13B  +
cmp [esi+24h] ebx +
jz loc_100F13B  +
mov eax [ebp+8] +
mov dword ptr [eax] 0C150000Eh +
mov dword ptr [ebp-14h] 80070667h +
jmp loc_100F21C  +
mov ecx [esi+30h] +
cmp ecx ebx +
jz loc_100F168  +
cmp [esi+24h] ebx +
jnz loc_100F168  +
mov eax [ebp+8] +
mov dword ptr [eax] 0C1500012h +
mov dword ptr [ebp-14h] 80070057h +
jmp loc_100F21C  +
mov eax [esi+48h] +
cmp eax ebx +
jz loc_100F187  +
cmp ecx ebx +
jz loc_100F17E  +
mov eax [ebp+8] +
mov dword ptr [eax] 0C1500019h +
jmp loc_100F15C  +
cmp eax ebx +
jz loc_100F187  +
cmp [esi+24h] ebx +
jnz loc_100F173  +
cmp [esi+38h] ebx +
jz loc_100F24B  +
cmp [esi+70h] ebx +
jnz loc_100F24B  +
mov eax [ebp+8] +
mov dword ptr [eax] 0C1500032h +
jmp loc_100F15C  +
lea edi [esi+14h] +
mov eax [edi] +
mov dword ptr [esi+18h] 1 +
mov [ebp-14h] ebx +
cmp [eax-0Ch] ebx +
jnz loc_100F24B  +
push 3E8h  +
lea eax [ebp+8] +
push eax  +
push dword_10309F0  +
call sub_101D5FD  +
add esp 0Ch +
cmp eax ebx +
mov [ebp-14h] eax +
jl loc_100F21C  +
push dword ptr [ebp+8]  +
mov ecx edi +
mov [ebp-4] ebx +
call sub_100CB21  +
push dword ptr [ebp+8]  +
mov ecx dword_10309F0 +
or dword ptr [ebp-4] 0FFFFFFFFh +
call sub_101D10F  +
cmp eax ebx +
mov [ebp-14h] eax +
jge loc_100F24B  +
jmp loc_100F217  +
mov eax [ebp-1Ch] +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [ebp-14h] eax +
mov eax offset loc_100F212 +
retn   +
mov esi [ebp-18h] +
xor ebx ebx +
cmp [ebp-14h] ebx +
jge loc_100F24B  +
cmp [esi+6Ch] ebx +
jz loc_100F24B  +
call ds:GetCommandLineW  +
push eax  +
push offset aFailedValidati  +
push 2022h  +
mov edi offset unk_1034AA0 +
push edi  +
call sub_101A9EC  +
mov ecx [esi+6Ch] +
add esp 10h +
push edi  +
push 1  +
call sub_101865E  +
mov eax [ebp-14h] +
call __EH_epilog3  +
retn 4  +
***
call __EH_prolog3_catch  +
mov eax [ecx+30h] +
test eax eax +
jz loc_100F288  +
and dword ptr [ebp-4] 0 +
push ecx  +
mov ecx [ebp+8] +
call sub_100C8AA  +
jmp loc_100F29C  +
mov eax offset loc_100F283 +
retn   +
mov eax [ebp-14h] +
jmp loc_100F2A9  +
mov ecx [ebp+8] +
push offset aWindows  +
mov dword ptr [ebp-4] 2 +
call sub_100C63E  +
xor eax eax +
jmp loc_100F2A9  +
mov eax offset loc_100F2A6 +
retn   +
mov eax [ebp-18h] +
call __EH_epilog3  +
retn 4  +
***
call __EH_prolog3_catch  +
and dword ptr [ebp-14h] 0 +
mov eax [ebp+8] +
push dword ptr [eax]  +
and dword ptr [ebp-4] 0 +
push 0C150006Dh  +
lea eax [ebp-14h] +
push eax  +
push dword_10309F0  +
call sub_101D61B  +
add esp 10h +
test eax eax +
jl loc_100F2F9  +
push dword ptr [ebp-14h]  +
mov ecx [ebp+0Ch] +
mov byte ptr [ebp-4] 1 +
call sub_100CB21  +
mov esi 8000FFFFh +
jmp loc_100F309  +
mov eax offset loc_100F306 +
retn   +
mov esi [ebp-18h] +
push dword ptr [ebp-14h]  +
call ds:SysFreeString  +
mov eax esi +
call __EH_epilog3  +
retn 8  +
***
call __EH_prolog3_catch  +
mov esi ecx +
push dword ptr [ebp+0Ch]  +
xor edi edi +
lea ecx [esi+14h] +
mov [ebp-4] edi +
call sub_100CB21  +
mov ecx [ebp+8] +
mov eax [ecx] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp [eax-0Ch] edi +
jnz loc_100F359  +
mov dword ptr [esi+80h] 1 +
jmp loc_100F3B6  +
mov eax [ebp+10h] +
cmp [eax] edi +
jnz loc_100F389  +
push ecx  +
mov ecx [ebp+14h] +
mov dword ptr [eax] 1 +
mov dword ptr [ebp-4] 2 +
call sub_100C8AA  +
mov [esi+80h] edi +
jmp loc_100F3B6  +
mov eax offset loc_100F384 +
retn   +
mov eax [ebp-14h] +
jmp loc_100F3C3  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp+0Ch] +
call sub_100CB3D  +
push dword ptr [ebp+18h]  +
lea eax [ebp+0Ch] +
push eax  +
mov ecx esi +
mov dword ptr [ebp-4] 4 +
call sub_100F2B6  +
mov ecx [ebp+0Ch] +
add ecx 0FFFFFFF0h +
mov edi eax +
call sub_100B8FC  +
mov eax edi +
jmp loc_100F3C3  +
mov eax offset loc_100F3C0 +
retn   +
mov eax [ebp-18h] +
call __EH_epilog3  +
retn 14h  +
***
call __EH_prolog3_catch  +
mov esi ecx +
push dword ptr [ebp+0Ch]  +
xor edi edi +
lea ecx [esi+14h] +
mov [ebp-4] edi +
call sub_100CB21  +
mov eax [ebp+8] +
mov eax [eax] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp [eax-0Ch] edi +
jz loc_100F403  +
mov edi 80070057h +
jmp loc_100F445  +
mov eax [ebp+10h] +
cmp [eax] edi +
jnz loc_100F418  +
mov dword ptr [eax] 1 +
mov [esi+80h] edi +
jmp loc_100F445  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp+0Ch] +
call sub_100CB3D  +
push dword ptr [ebp+14h]  +
lea eax [ebp+0Ch] +
push eax  +
mov ecx esi +
mov dword ptr [ebp-4] 2 +
call sub_100F2B6  +
mov ecx [ebp+0Ch] +
add ecx 0FFFFFFF0h +
mov edi eax +
call sub_100B8FC  +
mov eax edi +
jmp loc_100F452  +
mov eax offset loc_100F44F +
retn   +
mov eax [ebp-14h] +
call __EH_epilog3  +
retn 10h  +
***
call __EH_prolog3_catch  +
mov esi ecx +
xor ebx ebx +
mov [ebp-14h] ebx +
mov [ebp-18h] ebx +
mov eax [ebp+8] +
mov [ebp-4] ebx +
cmp eax 0Dh +
ja loc_100F4E5  +
jmp ds:off_100F843[eax*4]  +
mov eax [ebp+0Ch] +
mov eax [eax] +
cmp [eax-0Ch] ebx +
jz loc_100F49A  +
mov dword ptr [ebp-14h] 80070057h +
jmp loc_100F4EC  +
lea eax [esi+14h] +
push eax  +
push offset aInvalidhelptop  +
call sub_100BD73  +
test al al +
jz loc_100F4BB  +
mov dword ptr [esi+18h] 1 +
mov [esi+80h] ebx +
jmp loc_100F4EC  +
push 0C1500005h  +
lea eax [ebp-18h] +
push eax  +
push dword_10309F0  +
call sub_101D61B  +
add esp 0Ch +
cmp eax ebx +
jl loc_100F4E5  +
push dword ptr [ebp-18h]  +
mov ecx [ebp+10h] +
mov byte ptr [ebp-4] 1 +
call sub_100CB21  +
mov dword ptr [ebp-14h] 8000FFFFh +
mov esi [ebp-14h] +
jmp loc_100F4FA  +
mov eax offset loc_100F4F7 +
retn   +
mov esi [ebp-20h] +
push dword ptr [ebp-18h]  +
call ds:SysFreeString  +
mov eax esi +
call __EH_epilog3  +
retn 0Ch  +
mov eax [ebp+0Ch] +
mov ecx [eax] +
cmp [ecx-0Ch] ebx +
jnz loc_100F53F  +
mov byte ptr [ebp-4] 3 +
push offset aImage_0  +
lea ecx [esi+14h] +
call sub_100C63E  +
mov dword ptr [esi+80h] 1 +
jmp loc_100F4EC  +
mov eax offset loc_100F53A +
retn   +
mov esi [ebp-24h] +
jmp loc_100F4FA  +
cmp [esi+24h] ebx +
jnz loc_100F58D  +
push eax  +
lea ecx [esi+4] +
mov dword ptr [esi+24h] 1 +
mov byte ptr [ebp-4] 5 +
call sub_100C8AA  +
mov [ebp-4] ebx +
lea ecx [esi+14h] +
push offset aImagetoplevelh  +
mov byte ptr [ebp-4] 7 +
call sub_100C63E  +
jmp loc_100F4B3  +
mov eax offset loc_100F577 +
retn   +
mov esi [ebp-28h] +
jmp loc_100F4FA  +
mov eax offset loc_100F585 +
retn   +
mov esi [ebp-2Ch] +
jmp loc_100F4FA  +
push offset aImage_0  +
lea ecx [ebp+0Ch] +
call sub_100CB3D  +
push dword ptr [ebp+10h]  +
lea eax [ebp+0Ch] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 9 +
call sub_100F2B6  +
mov ecx [ebp+0Ch] +
add ecx 0FFFFFFF0h +
mov [ebp-14h] eax +
call sub_100B8FC  +
jmp loc_100F4EC  +
push dword ptr [ebp+10h]  +
lea eax [esi+0Ch] +
push eax  +
lea eax [esi+2Ch] +
push eax  +
push offset aLogpath_0  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
call sub_100F321  +
mov [ebp-14h] eax +
jmp loc_100F4EC  +
push dword ptr [ebp+10h]  +
lea eax [esi+30h] +
push esi  +
push eax  +
push offset aWindir_0  +
jmp loc_100F5CF  +
push dword ptr [ebp+10h]  +
lea eax [esi+10h] +
push eax  +
lea eax [esi+50h] +
push eax  +
push offset aScratchdir_0  +
jmp loc_100F5CF  +
push dword ptr [ebp+10h]  +
lea eax [esi+34h] +
push eax  +
push offset aNorestart_0  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
call sub_100F3D0  +
jmp loc_100F5D9  +
push dword ptr [ebp+10h]  +
lea eax [esi+48h] +
push eax  +
push offset aOnline_0  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
call sub_100F3D0  +
lea ecx [esi+14h] +
push offset aImagetoplevelh  +
mov [ebp-14h] eax +
mov byte ptr [ebp-4] 0Ah +
call sub_100C63E  +
jmp loc_100F4EC  +
mov eax offset loc_100F64F +
retn   +
mov esi [ebp-30h] +
jmp loc_100F4FA  +
push dword ptr [ebp+10h]  +
lea eax [esi+4Ch] +
push eax  +
push offset aQuiet_0  +
jmp loc_100F60E  +
push dword ptr [ebp+10h]  +
lea eax [esi+8] +
push eax  +
lea eax [esi+28h] +
push eax  +
push offset aSysdrivedir_0  +
jmp loc_100F5CF  +
mov edi [ebp+0Ch] +
mov eax [edi] +
cmp [eax-0Ch] ebx +
jnz loc_100F6A0  +
mov byte ptr [ebp-4] 0Ch +
push offset aLoglevel_0  +
jmp loc_100F520  +
mov eax offset loc_100F698 +
retn   +
mov esi [ebp-34h] +
jmp loc_100F4FA  +
cmp [esi+38h] ebx +
jnz loc_100F713  +
xor ebx ebx +
push offset a1  +
inc ebx  +
push edi  +
mov [esi+38h] ebx +
call sub_100EBA9  +
test al al +
jz loc_100F6BF  +
mov [esi+70h] ebx +
jmp loc_100F707  +
push offset a2  +
push edi  +
call sub_100EBA9  +
test al al +
jz loc_100F6D7  +
mov dword ptr [esi+70h] 2 +
jmp loc_100F707  +
push offset a3  +
push edi  +
call sub_100EBA9  +
test al al +
jz loc_100F6EF  +
mov dword ptr [esi+70h] 3 +
jmp loc_100F707  +
push offset a4  +
push edi  +
call sub_100EBA9  +
movzx eax al +
neg eax  +
sbb eax eax +
and eax 4 +
mov [esi+70h] eax +
and dword ptr [esi+80h] 0 +
jmp loc_100F4EC  +
push offset aLoglevel_0  +
lea ecx [ebp+8] +
call sub_100CB3D  +
push dword ptr [ebp+10h]  +
lea eax [ebp+8] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 0Eh +
call sub_100F2B6  +
mov ecx [ebp+8] +
jmp loc_100F5AF  +
push dword ptr [ebp+10h]  +
lea eax [esi+54h] +
push eax  +
push offset aEnglish_0  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
call sub_100F3D0  +
cmp eax ebx +
mov [ebp-14h] eax +
jl loc_100F4EC  +
or dword ptr [esi+74h] 1 +
jmp loc_100F4EC  +
mov edi [ebp+0Ch] +
mov eax [edi] +
cmp [eax-0Ch] ebx +
jnz loc_100F78A  +
mov byte ptr [ebp-4] 0Fh +
push offset aFormat_0  +
jmp loc_100F520  +
mov eax offset loc_100F782 +
retn   +
mov esi [ebp-38h] +
jmp loc_100F4FA  +
cmp [esi+58h] ebx +
jnz loc_100F81C  +
xor ebx ebx +
inc ebx  +
mov [esi+58h] ebx +
mov eax [edi] +
push offset aList  +
push eax  +
call ds:__imp__wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100F7B5  +
and [esi+78h] eax +
jmp loc_100F707  +
mov eax [edi] +
push offset aTable  +
push eax  +
call ds:__imp__wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100F7D1  +
mov [esi+78h] ebx +
jmp loc_100F707  +
push offset aFormat_0  +
push dword ptr [edi]  +
lea eax [ebp-18h] +
push 0C150006Ah  +
push eax  +
push dword_10309F0  +
call sub_101D61B  +
add esp 14h +
test eax eax +
jl loc_100F802  +
push dword ptr [ebp-18h]  +
mov ecx [ebp+10h] +
mov byte ptr [ebp-4] 11h +
call sub_100CB21  +
mov dword ptr [ebp-14h] 8000FFFFh +
jmp loc_100F707  +
mov eax offset loc_100F814 +
retn   +
mov esi [ebp-3Ch] +
jmp loc_100F4FA  +
push offset aFormat_0  +
lea ecx [ebp-1Ch] +
call sub_100CB3D  +
push dword ptr [ebp+10h]  +
lea eax [ebp-1Ch] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 13h +
call sub_100F2B6  +
mov ecx [ebp-1Ch] +
jmp loc_100F5AF  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_1002738 +
call sub_100EC72  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax] +
mov ecx [ebp+arg_4] +
cmp edx [ecx] +
jnz loc_100F8CA  +
mov edx [eax+4] +
cmp edx [ecx+4] +
jnz loc_100F8CA  +
mov edx [eax+8] +
cmp edx [ecx+8] +
jnz loc_100F8CA  +
mov eax [eax+0Ch] +
cmp eax [ecx+0Ch] +
jnz loc_100F8CA  +
xor eax eax +
inc eax  +
jmp loc_100F8CC  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call ds:__imp_free  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100B6D5  +
test eax eax +
jl loc_100F8FF  +
mov byte ptr [esi+18h] 1 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_100F917  +
xor eax eax +
jmp loc_100F936  +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jz loc_100F925  +
mov eax [edi] +
push edi  +
call dword ptr [eax+4]  +
mov eax [esi] +
test eax eax +
jz loc_100F931  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [esi] edi +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_100F951  +
xor eax eax +
jmp loc_100F974  +
mov eax [ebp+arg_4] +
push edi  +
mov edi [esi] +
and dword ptr [esi] 0 +
test eax eax +
jz loc_100F967  +
mov ecx [eax] +
push esi  +
push [ebp+arg_8]  +
push eax  +
call dword ptr [ecx]  +
test edi edi +
jz loc_100F971  +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
mov eax [esi] +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
mov edi [ebp+arg_0] +
cmp eax edi +
jz loc_100F999  +
push eax  +
call ds:SysFreeString  +
mov [esi] edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax ecx +
and dword ptr [eax] 0 +
and dword ptr [eax+4] 0 +
or dword ptr [eax+8] 0FFFFFFFFh +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
jmp loc_100F9CA  +
mov eax [esi] +
mov ecx [eax] +
push eax  +
mov [esi] ecx +
call sub_100F8D5  +
cmp dword ptr [esi] 0 +
jnz loc_100F9BE  +
pop esi  +
retn   +
***
lea eax [ecx+4] +
cmp byte ptr [eax+18h] 0 +
jz locret_100F9EA  +
push eax  +
mov byte ptr [eax+18h] 0 +
call ds:DeleteCriticalSection  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov [esi] eax +
test eax eax +
jz loc_100FA07  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push offset dword_1002760  +
push eax  +
call dword ptr [ecx]  +
pop ebp  +
retn 8  +
***
call ds:LeaveCriticalSection  +
mov byte ptr [esi+4] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
test eax eax +
jnz loc_100FA5C  +
mov eax 80004003h +
jmp loc_100FA66  +
mov ecx [ebp+8] +
mov ecx [ecx+0Ch] +
mov [eax] ecx +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov eax [eax] +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
test eax eax +
jz loc_100FA8C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
jmp loc_100FA91  +
mov eax 80004003h +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
push edi  +
mov edx ecx +
and dword ptr [edx] 0 +
lea esi [edx+4] +
push 6  +
pop ecx  +
xor eax eax +
mov edi esi +
stos   +
mov [esi+18h] al +
pop edi  +
mov eax edx +
pop esi  +
retn   +
***
call __EH_prolog3_catch  +
mov ebx ecx +
mov [ebp-18h] ebx +
mov edi [ebp+8] +
mov eax [edi] +
lea ecx [ebp-24h] +
push ecx  +
push edi  +
call dword ptr [eax+0Ch]  +
xor ecx ecx +
cmp eax ecx +
jl loc_100FC2A  +
mov eax [ebp-24h] +
movzx eax word ptr [eax+2Ch] +
mov esi eax +
mov [ebp-1Ch] ecx +
mov [ebx+18h] eax +
mov [ebx+14h] ecx +
cmp esi ecx +
jz loc_100FB7E  +
push 0Ch  +
pop edx  +
mul  edx +
mov [ebp-4] ecx +
seto cl  +
neg ecx  +
or ecx eax +
xor eax eax +
add ecx 4 +
setb al  +
neg eax  +
or eax ecx +
push eax  +
call loc_1019EB9  +
pop ecx  +
mov [ebp-20h] eax +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_100FB45  +
push (offset loc_100B464+1)  +
push offset loc_100F9A4  +
push esi  +
lea edi [eax+4] +
push 0Ch  +
push edi  +
mov [eax] esi +
call ??_L@YGXPAXIHP6EX0@Z1@Z  +
jmp loc_100FB47  +
xor edi edi +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [ebp-1Ch] edi +
jmp loc_100FB5D  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_100FB5A +
retn   +
mov ebx [ebp-18h] +
cmp dword ptr [ebp-1Ch] 0 +
jnz loc_100FB79  +
mov eax [ebp+8] +
push dword ptr [ebp-24h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4Ch]  +
mov eax 8007000Eh +
jmp loc_100FC2C  +
mov edi [ebp+8] +
xor ecx ecx +
cmp [ebx+18h] ecx +
mov [ebp-18h] ecx +
jle loc_100FC1B  +
mov esi [ebp-1Ch] +
add esi 8 +
jmp loc_100FB94  +
xor ecx ecx +
mov [esi-4] ecx +
mov [esi] ecx +
mov eax [edi] +
lea ecx [ebp-20h] +
push ecx  +
push dword ptr [ebp-18h]  +
push edi  +
call dword ptr [eax+14h]  +
test eax eax +
jl loc_100FC09  +
xor eax eax +
mov [ebp-14h] eax +
mov ecx [edi] +
push eax  +
push eax  +
push eax  +
lea eax [ebp-14h] +
push eax  +
mov eax [ebp-20h] +
push dword ptr [eax]  +
mov dword ptr [ebp-4] 3 +
push edi  +
call dword ptr [ecx+30h]  +
test eax eax +
jl loc_100FBF3  +
mov eax [ebp-14h] +
and dword ptr [ebp-14h] 0 +
lea edi [esi-8] +
push eax  +
mov ecx edi +
call sub_100F97E  +
push dword ptr [edi]  +
call ds:SysStringLen  +
mov edi [ebp+8] +
mov [esi-4] eax +
mov eax [ebp-20h] +
mov eax [eax] +
mov [esi] eax +
push dword ptr [ebp-20h]  +
mov eax [edi] +
push edi  +
call dword ptr [eax+50h]  +
push dword ptr [ebp-14h]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
call ds:SysFreeString  +
inc dword ptr [ebp-18h]  +
mov eax [ebp-18h] +
add esi 0Ch +
cmp eax [ebx+18h] +
jl loc_100FB92  +
mov eax [ebp-1Ch] +
push dword ptr [ebp-24h]  +
mov [ebx+14h] eax +
mov eax [edi] +
push edi  +
call dword ptr [eax+4Ch]  +
xor eax eax +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
test esi esi +
jz loc_100FC69  +
mov eax [esi+0Ch] +
test eax eax +
jz loc_100FC53  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [esi+14h] +
and dword ptr [esi+0Ch] 0 +
test ecx ecx +
jz loc_100FC65  +
push 3  +
call sub_100B473  +
and dword ptr [esi+14h] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ecx] +
push edi  +
test eax eax +
jnz loc_100FC9B  +
cmp [ebp+arg_0] eax +
jnz loc_100FCEB  +
mov al 1 +
jmp loc_100FCED  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_100FCEB  +
and [ebp+var_4] 0 +
and [ebp+var_8] 0 +
mov ecx [eax] +
push esi  +
lea edx [ebp+var_4] +
push edx  +
mov esi offset dword_1002770 +
push esi  +
push eax  +
call dword ptr [ecx]  +
mov eax [edi] +
lea ecx [ebp+var_8] +
push ecx  +
push esi  +
push edi  +
call dword ptr [eax]  +
mov eax [ebp+var_8] +
cmp [ebp+var_4] eax +
pop esi  +
setz byte ptr [ebp+arg_0+3]  +
test eax eax +
jz loc_100FCD9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_100FCE6  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov al byte ptr [ebp+arg_0+3] +
jmp loc_100FCED  +
xor al al +
pop edi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
cmp eax [ebp+arg_0] +
jz loc_100FD0C  +
push [ebp+arg_0]  +
push ecx  +
call sub_100F906  +
pop ebp  +
retn 4  +
***
call __EH_prolog3_catch  +
mov edi [ebp+8] +
test edi edi +
jnz loc_100FD2F  +
mov eax 80070057h +
jmp loc_100FD88  +
and dword ptr [ebp-14h] 0 +
and dword ptr [ebp-4] 0 +
push 0Ch  +
call loc_1019E39  +
pop ecx  +
mov esi eax +
jmp loc_100FD4F  +
mov eax offset loc_100FD49 +
retn   +
mov edi [ebp+8] +
mov esi [ebp-14h] +
test esi esi +
jnz loc_100FD5C  +
mov dword ptr [ebp+8] 8007000Eh +
jmp loc_100FD85  +
mov eax [ebp+0Ch] +
mov [esi] eax +
mov eax [ebp+10h] +
lea ebx [edi+0Ch] +
push ebx  +
mov [esi+4] eax +
call ds:EnterCriticalSection  +
mov eax [edi+8] +
and dword ptr [ebp+8] 0 +
mov [esi+8] eax +
push ebx  +
mov [edi+8] esi +
call ds:LeaveCriticalSection  +
mov eax [ebp+8] +
call __EH_epilog3  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push dword ptr [esi]  +
mov edi ecx +
call sub_100FC84  +
test al al +
jnz loc_100FDBC  +
mov esi [esi] +
push offset dword_1002780  +
push esi  +
push edi  +
call sub_100F940  +
jmp loc_100FDBE  +
mov eax [edi] +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+10h] 0 +
jnz loc_100FDDB  +
mov eax 80004003h +
jmp loc_100FE16  +
push esi  +
mov esi [ebp+0Ch] +
cmp esi 1 +
jge loc_100FDEB  +
mov eax 80070057h +
jmp loc_100FE15  +
mov ecx [ebp+8] +
mov edx [ecx+8] +
mov ecx [edx] +
mov eax 80004005h +
jmp loc_100FE00  +
test esi esi +
jle loc_100FE05  +
mov ecx [ecx] +
dec esi  +
cmp ecx edx +
jnz loc_100FDFA  +
cmp ecx edx +
jz loc_100FE15  +
add ecx 8 +
push ecx  +
push dword ptr [ebp+10h]  +
call sub_100FA6F  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
lea ecx [esi+4] +
call sub_100FCF7  +
mov eax [ebp+arg_4] +
mov [esi+8] eax +
mov eax [eax+4] +
mov eax [eax] +
mov [esi+0Ch] eax +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov eax ecx +
push [ebp+arg_0]  +
add ecx 4 +
neg eax  +
sbb eax eax +
and eax ecx +
push eax  +
call sub_100FD15  +
pop ebp  +
retn 8  +
***
call __EH_prolog3_GS  +
mov esi ecx +
xor ebx ebx +
cmp [esi+0Ch] ebx +
jz loc_100FE95  +
cmp [esi+14h] ebx +
jz loc_100FE95  +
xor eax eax +
jmp loc_1010080  +
mov eax dword_10309D8 +
add eax 10h +
mov [ebp-234h] eax +
push eax  +
mov [ebp-4] ebx +
call ds:EnterCriticalSection  +
mov byte ptr [ebp-230h] 1 +
mov dword ptr [ebp-21Ch] 80004005h +
cmp [esi+0Ch] ebx +
jnz loc_101004E  +
mov edi [esi+4] +
push edi  +
push offset unk_10309DC  +
mov [ebp-22Ch] ebx +
call sub_100F89C  +
test eax eax +
jz loc_100FF48  +
mov eax 0FFFFh +
mov ecx eax +
cmp [esi+8] cx +
jnz loc_100FF48  +
cmp [esi+0Ah] ax +
jnz loc_100FF48  +
mov edi 104h +
push edi  +
lea eax [ebp-218h] +
push eax  +
push hModule  +
call ds:GetModuleFileNameW  +
cmp eax ebx +
jz loc_1010054  +
cmp eax edi +
jz loc_1010054  +
lea eax [ebp-22Ch] +
push eax  +
lea eax [ebp-218h] +
push eax  +
mov [ebp-220h] ebx +
call ds:LoadTypeLib  +
lea ecx [ebp-220h] +
mov [ebp-21Ch] eax +
call sub_100F9B7  +
jmp loc_100FF69  +
lea eax [ebp-22Ch] +
push eax  +
push dword ptr [ebp+8]  +
movzx eax word ptr [esi+0Ah] +
push eax  +
movzx eax word ptr [esi+8] +
push eax  +
push edi  +
call ds:LoadRegTypeLib  +
mov [ebp-21Ch] eax +
cmp [ebp-21Ch] ebx +
jl loc_1010054  +
mov [ebp-224h] ebx +
mov eax [ebp-22Ch] +
mov ecx [eax] +
lea edx [ebp-224h] +
push edx  +
push dword ptr [esi]  +
mov byte ptr [ebp-4] 1 +
push eax  +
call dword ptr [ecx+18h]  +
cmp eax ebx +
mov [ebp-21Ch] eax +
jl loc_101002D  +
push dword ptr [ebp-224h]  +
lea ecx [ebp-228h] +
call sub_100F9F0  +
mov [ebp-220h] ebx +
lea eax [ebp-220h] +
push eax  +
push dword ptr [ebp-224h]  +
mov byte ptr [ebp-4] 3 +
call sub_100FA13  +
test eax eax +
jl loc_100FFE5  +
lea eax [ebp-220h] +
push eax  +
lea ecx [ebp-228h] +
call sub_100FD95  +
mov eax [ebp-228h] +
push esi  +
mov [esi+0Ch] eax +
mov ecx dword_10309D8 +
push offset loc_100FC39  +
mov [ebp-228h] ebx +
call sub_100FE4C  +
mov eax [ebp-220h] +
mov byte ptr [ebp-4] 2 +
cmp eax ebx +
jz loc_1010019  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-228h] +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_101002D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-22Ch] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-224h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_1010054  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1010054  +
mov [ebp-21Ch] ebx +
mov eax [esi+0Ch] +
cmp eax ebx +
jz loc_101006E  +
cmp [esi+14h] ebx +
jnz loc_101006E  +
push eax  +
mov ecx esi +
call sub_100FABC  +
mov [ebp-21Ch] eax +
push dword ptr [ebp-234h]  +
call ds:LeaveCriticalSection  +
mov eax [ebp-21Ch] +
call sub_101A57D  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1016D78  +
mov dword ptr [esi] offset off_1002794 +
mov ecx dword_10309D8 +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 0 +
jnz loc_10100DD  +
cmp dword ptr [eax+4] 0 +
jnz loc_10100DD  +
cmp dword ptr [eax+8] 0C0h +
jnz loc_10100DD  +
cmp dword ptr [eax+0Ch] 46000000h +
jnz loc_10100DD  +
xor eax eax +
inc eax  +
jmp loc_10100DF  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push ebx  +
push esi  +
push edi  +
jz loc_101017D  +
mov esi [ebp+arg_4] +
test esi esi +
jz loc_101017D  +
mov ebx [ebp+arg_C] +
test ebx ebx +
jnz loc_101010F  +
mov eax 80004003h +
jmp loc_1010182  +
push [ebp+arg_8]  +
and dword ptr [ebx] 0 +
call sub_10100B3  +
test eax eax +
jz loc_101016F  +
mov esi [esi+4] +
add esi [ebp+arg_0] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
mov [ebx] esi +
xor eax eax +
jmp loc_1010182  +
mov eax [esi] +
xor ecx ecx +
test eax eax +
setz cl  +
mov [ebp+arg_4] ecx +
test ecx ecx +
jnz loc_101014D  +
push [ebp+arg_8]  +
push eax  +
call sub_100F89C  +
test eax eax +
jz loc_101016C  +
cmp edi 1 +
jz loc_101011E  +
push dword ptr [esi+4]  +
push ebx  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call edi  +
test eax eax +
jz loc_1010182  +
cmp [ebp+arg_4] 0 +
jnz loc_101016C  +
test eax eax +
jl loc_1010182  +
add esi 0Ch +
mov edi [esi+8] +
test edi edi +
jnz loc_1010130  +
mov eax 80004002h +
jmp loc_1010182  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_10027B4  +
push ecx  +
call sub_10100E8  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 10h +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+10h] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_10101EF  +
test esi esi +
jz loc_10101EF  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+1Ch]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_101018E  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1002794 +
mov dword ptr [esi+10h] 0C0000001h +
mov ecx dword_10309D8 +
mov eax [ecx] +
call dword ptr [eax+8]  +
mov ecx esi +
pop esi  +
jmp loc_1016D57  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1010218  +
test byte ptr [ebp+8] 1 +
jz loc_101025C  +
push esi  +
call sub_1019EA8  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov esi ecx +
test edi edi +
jnz loc_101027F  +
mov eax 80004003h +
jmp loc_10102A4  +
xor eax eax +
cmp [esi+0Ch] eax +
jnz loc_101028E  +
push [ebp+arg_0]  +
call sub_100FE71  +
mov ecx [esi+0Ch] +
mov [edi] ecx +
cmp dword ptr [esi+0Ch] 0 +
jz loc_10102A4  +
mov esi [esi+0Ch] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ecx+0Ch] eax +
jz loc_10102C0  +
cmp [ecx+14h] eax +
jnz loc_10102C6  +
pop ebp  +
jmp sub_100FE71  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_10102E1  +
mov eax 8002000Bh +
jmp loc_10102EC  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1010268  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push [ebp+arg_C]  +
mov ebx ecx +
call sub_10102AF  +
cmp dword ptr [ebx+0Ch] 0 +
jz loc_101038C  +
cmp dword ptr [ebx+14h] 0 +
push esi  +
push edi  +
jz loc_1010378  +
cmp [ebp+arg_8] 1 +
jnz loc_1010378  +
mov eax [ebp+arg_4] +
push dword ptr [eax]  +
call ds:lstrlenW  +
mov edx [ebx+18h] +
dec edx  +
mov [ebp+var_8] eax +
js loc_1010378  +
mov ecx [ebx+14h] +
mov eax edx +
imul eax eax +
mov [ebp+var_C] ecx +
lea ecx [eax+ecx+4] +
mov [ebp+arg_C] eax +
mov [ebp+var_4] ecx +
mov eax [ebp+var_8] +
cmp eax [ecx] +
jnz loc_1010366  +
mov ecx [ebp+arg_C] +
mov eax [ebx+14h] +
mov esi [ebp+arg_4] +
mov edi [esi] +
add eax ecx +
mov ecx [eax+4] +
mov esi [eax] +
add ecx ecx +
xor eax eax +
cmps   +
jz loc_1010391  +
mov ecx [ebp+var_4] +
sub [ebp+arg_C] 0Ch +
dec edx  +
sub ecx 0Ch +
mov [ebp+var_4] ecx +
test edx edx +
jge loc_1010345  +
push [ebp+arg_10]  +
mov ebx [ebx+0Ch] +
push [ebp+arg_8]  +
mov eax [ebx] +
push [ebp+arg_4]  +
push ebx  +
call dword ptr [eax+28h]  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
mov eax [ebp+var_C] +
imul edx edx +
mov eax [edx+eax+8] +
mov ecx [ebp+arg_10] +
mov [ecx] eax +
xor eax eax +
jmp loc_101038A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+14h]  +
mov esi ecx +
call sub_10102AF  +
cmp dword ptr [esi+0Ch] 0 +
jz loc_10103DD  +
push dword ptr [ebp+28h]  +
mov eax [esi+0Ch] +
push dword ptr [ebp+24h]  +
mov ecx [eax] +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push eax  +
call dword ptr [ecx+2Ch]  +
pop esi  +
pop ebp  +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
mov ecx offset off_10278A4 +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_10102CF  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+1Ch]  +
mov ecx offset off_10278A4 +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_10102F5  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx offset off_10278A4 +
pop ebp  +
jmp loc_10103A9  +
***
call __EH_prolog3_catch  +
mov edi [ebp+8] +
xor esi esi +
cmp edi esi +
jnz loc_1010460  +
mov eax 80004003h +
jmp loc_10104C7  +
push 30h  +
mov [edi] esi +
mov dword ptr [ebp-18h] 8007000Eh +
mov [ebp-14h] esi +
mov [ebp-4] esi +
call loc_1019E39  +
pop ecx  +
cmp eax esi +
jz loc_1010485  +
push esi  +
mov ecx eax +
call sub_101008D  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
jmp loc_101049B  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_1010495 +
retn   +
mov edi [ebp+8] +
mov esi [ebp-14h] +
test esi esi +
jz loc_10104C0  +
lea ecx [esi+14h] +
call sub_100F8ED  +
mov ebx eax +
test ebx ebx +
jl loc_10104B3  +
xor ebx ebx +
test ebx ebx +
jz loc_10104C3  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+1Ch]  +
xor esi esi +
jmp loc_10104C3  +
mov ebx [ebp-18h] +
mov [edi] esi +
mov eax ebx +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+0Ch] +
test ebx ebx +
jnz loc_10104E8  +
mov eax 80004003h +
jmp loc_1010536  +
and dword ptr [ebx] 0 +
push esi  +
push edi  +
lea eax [ebp+0Ch] +
push eax  +
call sub_1010444  +
mov esi [ebp+0Ch] +
mov edi eax +
test edi edi +
jl loc_1010525  +
mov eax [ebp+8] +
lea ecx [eax+4] +
push ecx  +
push eax  +
mov ecx esi +
call sub_100FE1F  +
mov edi eax +
test edi edi +
jnz loc_1010525  +
mov eax [esi] +
push ebx  +
push offset dword_1002770  +
push esi  +
call dword ptr [eax]  +
mov edi eax +
test edi edi +
jz loc_1010532  +
test esi esi +
jz loc_1010532  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+1Ch]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+0Ch] +
push ebx  +
mov ebx 80004003h +
test eax eax +
jz loc_10105AB  +
and dword ptr [eax] 0 +
lea eax [ebp-4] +
push eax  +
call sub_1010444  +
mov ebx eax +
test ebx ebx +
jl loc_10105AB  +
push esi  +
mov esi [ebp+8] +
mov eax [esi+4] +
push edi  +
push dword ptr [esi+8]  +
mov edi [ebp-4] +
push eax  +
mov ecx edi +
call sub_100FE1F  +
mov ebx eax +
test ebx ebx +
jl loc_101059C  +
push dword ptr [ebp+0Ch]  +
mov eax [esi+0Ch] +
push offset dword_1009540  +
mov ecx edi +
mov [edi+0Ch] eax +
call sub_101018E  +
mov ebx eax +
test ebx ebx +
jge loc_10105A9  +
test edi edi +
jz loc_10105A9  +
mov eax [edi] +
push 1  +
mov ecx edi +
call dword ptr [eax+1Ch]  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
and dword ptr [esi+14h] 0 +
lea ecx [esi+4] +
call sub_100F880  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10105B7  +
mov dword ptr [esi] offset off_10027FC +
mov dword ptr [esi+4] offset off_10027D0 +
mov ecx dword_10309D8 +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_1002810  +
push ecx  +
call sub_10100E8  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
dec dword ptr [ecx+14h]  +
push esi  +
mov esi [ecx+14h] +
jnz loc_1010639  +
test ecx ecx +
jz loc_1010639  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+10h]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_10105FE  +
pop ebp  +
retn 0Ch  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1017938  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1010645  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_10027FC +
mov dword ptr [esi+4] offset off_10027D0 +
mov dword ptr [esi+14h] 0C0000001h +
mov ecx dword_10309D8 +
mov eax [ecx] +
call dword ptr [eax+8]  +
lea ecx [esi+8] +
pop esi  +
jmp loc_1016CB8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101067F  +
test byte ptr [ebp+8] 1 +
jz loc_10106CB  +
push esi  +
call sub_1019EA8  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3_catch  +
mov eax [ebp+10h] +
xor esi esi +
cmp eax esi +
jnz loc_10106F3  +
mov eax 80004003h +
jmp loc_1010755  +
push 18h  +
mov [eax] esi +
mov dword ptr [ebp-14h] 8007000Eh +
mov [ebp-18h] esi +
mov [ebp-4] esi +
call loc_1019E39  +
pop ecx  +
cmp eax esi +
jz loc_101071A  +
push dword ptr [ebp+8]  +
mov ecx eax +
call sub_10105D1  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
jmp loc_101072D  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_101072A +
retn   +
mov esi [ebp-18h] +
test esi esi +
jz loc_1010752  +
push dword ptr [ebp+10h]  +
inc dword ptr [esi+14h]  +
push dword ptr [ebp+0Ch]  +
dec dword ptr [esi+14h]  +
mov eax [esi] +
push esi  +
call dword ptr [eax]  +
mov [ebp-14h] eax +
test eax eax +
jz loc_1010752  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+10h]  +
mov eax [ebp-14h] +
call __EH_epilog3  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
push offset dword_1002840  +
push 0  +
call sub_10106D7  +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
mov edi ecx +
mov ebx [ebp+8] +
xor esi esi +
push ebx  +
mov [ebx] esi +
call sub_1010762  +
cmp eax esi +
mov [ebp+8] eax +
jge loc_10107D3  +
cmp [edi+6Ch] esi +
jz loc_10108E6  +
push eax  +
push offset aFailedToCreate  +
push 2022h  +
mov esi offset unk_1034AA0 +
push esi  +
call sub_101A9EC  +
mov ecx [edi+6Ch] +
add esp 10h +
push esi  +
push 1  +
call sub_101865E  +
jmp loc_10108E6  +
push esi  +
push offset off_10278F4  +
push offset off_1027124  +
push esi  +
push dword ptr [ebx]  +
call __RTDynamicCast  +
mov [ebp-1Ch] eax +
mov eax [edi+44h] +
add esp 14h +
xor ebx ebx +
cmp eax esi +
mov [ebp-20h] eax +
jle loc_10108E6  +
push ebx  +
lea ecx [edi+3Ch] +
call loc_100EB14  +
push eax  +
lea ecx [ebp-14h] +
call sub_100BDAA  +
push ebx  +
lea ecx [edi+3Ch] +
mov [ebp-4] esi +
call loc_100EB45  +
push eax  +
lea ecx [ebp-10h] +
call sub_100BDAA  +
mov ecx [ebp-1Ch] +
lea eax [ebp-18h] +
push eax  +
mov byte ptr [ebp-4] 1 +
mov [ebp-18h] esi +
call sub_1019405  +
cmp eax esi +
mov [ebp+8] eax +
jl loc_1010898  +
push esi  +
push offset off_10279E8  +
push offset off_10279CC  +
push esi  +
push dword ptr [ebp-18h]  +
call __RTDynamicCast  +
add esp 14h +
push dword ptr [ebp-10h]  +
mov ecx eax +
push dword ptr [ebp-14h]  +
call sub_100EFC7  +
mov [ebp+8] eax +
mov eax [ebp-18h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp [ebp+8] esi +
jl loc_10108A5  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov ecx [ebp-14h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
inc ebx  +
cmp ebx [ebp-20h] +
jl loc_10107FC  +
jmp loc_10108E6  +
cmp [edi+6Ch] esi +
jz loc_10108D0  +
push eax  +
push offset aFailedAddingTo  +
jmp loc_10108B2  +
cmp [edi+6Ch] esi +
jz loc_10108D0  +
push dword ptr [ebp+8]  +
push offset aFailedInitiali  +
push 2022h  +
mov esi offset unk_1034AA0 +
push esi  +
call sub_101A9EC  +
mov ecx [edi+6Ch] +
add esp 10h +
push esi  +
push 1  +
call sub_101865E  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov eax [ebp+8] +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx+18h] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+1Ch] +
push 2  +
pop eax  +
cmp [esi] eax +
jz loc_101093C  +
cmp dword_1034A80 0 +
jnz loc_101093C  +
push dword ptr [ebp+18h]  +
mov eax [ebp+8] +
push dword ptr [ebp+10h]  +
mov ecx [eax+18h] +
call sub_100E888  +
mov dword ptr [esi] 1 +
jmp loc_101095A  +
mov [esi] eax +
mov esi [ebp+8] +
cmp byte ptr [esi+1Ch] 0 +
jnz loc_101095A  +
push 67h  +
push 3  +
push dword ptr [esi+18h]  +
call sub_100E2C9  +
add esp 0Ch +
mov byte ptr [esi+1Ch] 1 +
xor eax eax +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push dword ptr [ebp+18h]  +
mov ecx [eax+18h] +
call sub_100E552  +
xor eax eax +
pop ebp  +
retn 14h  +
***
mov eax ecx +
xor ecx ecx +
mov [eax+4] ecx +
mov dword ptr [eax] offset off_10029A4 +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
mov [eax+18h] ecx +
mov [eax+1Ch] cl +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+1Ch] +
push edi  +
push 2  +
pop eax  +
xor edi edi +
xor ebx ebx +
cmp [esi] eax +
jz loc_1010A1A  +
cmp dword_1034A80 edi +
jnz loc_1010A1A  +
push offset unk_1044EAC  +
push 4E20h  +
call sub_101A694  +
mov edi eax +
pop ecx  +
pop ecx  +
test edi edi +
jnz loc_10109E8  +
mov ebx 8007000Eh +
jmp loc_1010A37  +
push dword ptr [ebp+18h]  +
push offset aS  +
push 2710h  +
push edi  +
call sub_100E0D2  +
mov ebx eax +
add esp 10h +
test ebx ebx +
jl loc_1010A37  +
mov eax [ebp+8] +
mov ecx [eax+18h] +
push edi  +
push 3  +
call sub_100E1CD  +
mov dword ptr [esi] 1 +
jmp loc_1010A37  +
mov [esi] eax +
mov esi [ebp+8] +
cmp [esi+1Ch] bl +
jnz loc_1010A42  +
push 67h  +
push 3  +
push dword ptr [esi+18h]  +
call sub_100E2C9  +
add esp 0Ch +
mov byte ptr [esi+1Ch] 1 +
test edi edi +
jz loc_1010A42  +
push edi  +
call sub_1019EA8  +
pop ecx  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_1010A64  +
mov eax 80070057h +
jmp locret_1010AC5  +
mov ecx [eax] +
and [ebp+var_4] 0 +
and [ebp+arg_0] 0 +
push esi  +
lea edx [ebp+var_4] +
push edx  +
push offset dword_10029C4  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
test esi esi +
jl loc_1010AA8  +
mov eax [ebp+var_4] +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push [ebp+arg_8]  +
push eax  +
call dword ptr [ecx+10h]  +
mov esi eax +
test esi esi +
jl loc_1010AA8  +
push [ebp+arg_C]  +
mov eax [ebp+arg_0] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
mov esi eax +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1010AB5  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_1010AC2  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_1010AE2  +
mov eax 80070057h +
jmp locret_1010B40  +
mov ecx [eax] +
and [ebp+var_4] 0 +
and [ebp+arg_0] 0 +
push esi  +
lea edx [ebp+var_4] +
push edx  +
push offset dword_10029C4  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
test esi esi +
jl loc_1010B23  +
mov eax [ebp+var_4] +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+10h]  +
mov esi eax +
test esi esi +
jl loc_1010B23  +
mov eax [ebp+arg_0] +
push [ebp+arg_8]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+18h]  +
mov esi eax +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1010B30  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_1010B3D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop esi  +
leave   +
retn 0Ch  +
***
call __EH_prolog3  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
mov eax [esi] +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-10h] +
push ecx  +
push offset dword_1009560  +
push esi  +
call dword ptr [eax]  +
mov ebx eax +
test ebx ebx +
jl loc_1010B91  +
mov edi [ebp+8] +
lea eax [esi+14h] +
push eax  +
push offset dword_1001428  +
push dword ptr [ebp-10h]  +
push edi  +
call sub_1010A50  +
mov ebx eax +
test ebx ebx +
jl loc_1010B91  +
mov [esi+10h] edi +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_1010BA2  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax ebx +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push dword ptr [esi+14h]  +
push offset dword_1001428  +
push dword ptr [esi+10h]  +
call sub_1010ACE  +
and dword ptr [esi+10h] 0 +
pop esi  +
retn   +
***
push 0Ch  +
mov eax offset loc_1020593 +
call __EH_prolog3_catch  +
xor esi esi +
cmp [ebp+1Ch] esi +
jz loc_1010C28  +
push offset dword_1044E10  +
lea ecx [ebp-14h] +
call sub_100BC7D  +
push dword ptr [ebp+1Ch]  +
lea eax [ebp-14h] +
push (offset dword_10029C4+10h)  +
mov [ebp-4] esi +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_100C88F  +
mov eax [ebp+8] +
mov ecx [eax+18h] +
add esp 0Ch +
mov [ebp-4] esi +
mov esi [ebp-14h] +
push esi  +
push 3  +
call sub_100E1CD  +
lea ecx [esi-10h] +
call sub_100B8FC  +
mov eax [ebp+18h] +
mov ecx [ebp+8] +
mov [ecx+0Ch] eax +
mov eax [ebp+20h] +
mov dword ptr [eax] 1 +
xor eax eax +
call __EH_epilog3  +
retn 1Ch  +
***
mov eax offset loc_1010C4A +
retn   +
***
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov eax [ebp-18h] +
jmp loc_1010C3C  +
***
jz loc_1010CFA  +
push offset dword_1044E10  +
lea ecx [ebp+1Ch] +
call sub_100BC7D  +
push dword ptr [ebp+20h]  +
mov [ebp-4] esi +
lea ecx [ebp+1Ch] +
mov byte ptr [ebp-4] 1 +
call sub_100C63E  +
push 0Ah  +
lea ecx [ebp+1Ch] +
call sub_100E5F6  +
push eax  +
lea ecx [ebp+1Ch] +
call sub_100C5E7  +
push dword ptr [ebp+20h]  +
mov eax [ebp+8] +
mov ecx [eax+18h] +
push 3  +
mov [ebp-4] esi +
call sub_100E1CD  +
mov ecx [ebp+1Ch] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov dword ptr [edi] 1 +
jmp loc_1010D1A  +
mov eax offset loc_1010D08 +
retn   +
***
mov ecx [ebp+1Ch] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov eax [ebp-14h] +
jmp loc_1010D1C  +
mov [edi] eax +
xor eax eax +
call __EH_epilog3  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1018638  +
test [ebp+arg_0] 1 +
jz loc_1010D43  +
push esi  +
call sub_1019EA8  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+1Ch] +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mul  [ebp+arg_8] +
test edx edx +
ja loc_1010D7B  +
cmp eax 0FFFFFFFFh +
jbe loc_1010D82  +
mov eax 80070057h +
jmp loc_1010D89  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpFileName]  +
call ds:GetFileAttributesW  +
cmp eax 0FFFFFFFFh +
jnz loc_1010DA9  +
xor eax eax +
jmp loc_1010DBD  +
test al 10h +
jnz loc_1010DBA  +
push 10Bh  +
call ds:SetLastError  +
jmp loc_1010DA5  +
xor eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
call ds:GetLastError  +
test eax eax +
jle loc_1010DDA  +
and eax 0FFFFh +
or eax 80070000h +
push eax  +
call loc_100B638  +
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101A89B  +
add esp 10h +
push eax  +
call sub_100B657  +
pop ebp  +
retn   +
***
call ds:GetLastError  +
test eax eax +
jle locret_1010E20  +
and eax 0FFFFh +
or eax 80070000h +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
xor esi esi +
push edi  +
mov edi ecx +
cmp [ebp+arg_0] esi +
jz loc_1010EB6  +
mov eax [edi] +
cmp eax esi +
jz loc_1010E43  +
cmp [ebp+arg_4] esi +
jz loc_1010EB6  +
push eax  +
call ds:SysStringLen  +
mov ecx [ebp+arg_4] +
lea ebx [eax+ecx] +
cmp ebx eax +
mov [ebp+var_4] eax +
jge loc_1010E5E  +
mov eax 8007000Eh +
jmp loc_1010EB8  +
push ebx  +
push esi  +
call ds:SysAllocStringLen  +
mov esi eax +
test esi esi +
jz loc_1010E57  +
push dword ptr [edi]  +
call ds:SysStringLen  +
test eax eax +
jbe loc_1010E8D  +
mov eax [ebp+var_4] +
add eax eax +
push eax  +
push dword ptr [edi]  +
lea eax [ebx+ebx] +
push eax  +
push esi  +
call sub_1010DE6  +
add esp 10h +
mov eax [ebp+arg_4] +
add eax eax +
push eax  +
push [ebp+arg_0]  +
push eax  +
mov eax [ebp+var_4] +
lea eax [esi+eax*2] +
push eax  +
call sub_1010DE6  +
xor eax eax +
add esp 10h +
mov [esi+ebx*2] ax +
push dword ptr [edi]  +
call ds:SysFreeString  +
mov [edi] esi +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
mov edi [ebp+arg_0] +
xor ebx ebx +
cmp eax edi +
jz loc_1010F02  +
push eax  +
call ds:SysFreeString  +
test edi edi +
jz loc_1010F00  +
push edi  +
call ds:SysStringByteLen  +
push eax  +
push edi  +
call ds:SysAllocStringByteLen  +
mov [esi] eax +
test eax eax +
jnz loc_1010F02  +
mov ebx 8007000Eh +
jmp loc_1010F02  +
and [esi] ebx +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push 0  +
push 400h  +
push dword ptr [eax]  +
push dword ptr [ecx]  +
call OLEAUT32_314  +
dec eax  +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
test esi esi +
jnz loc_1010F4F  +
push 80070057h  +
call loc_100B638  +
mov ecx [ebp+arg_4] +
test ecx ecx +
jl loc_1010F45  +
mov edi [ebp+arg_8] +
test edi edi +
jz loc_1010F45  +
mov eax [esi] +
cmp eax edi +
jz loc_1010F95  +
cmp ecx [ebp+arg_C] +
jle loc_1010F80  +
push 2  +
push ecx  +
push eax  +
call off_1028530  +
add esp 0Ch +
test eax eax +
jnz loc_1010FA5  +
push 8007000Eh  +
jmp loc_1010F4A  +
push eax  +
call ds:__imp_free  +
pop ecx  +
mov [esi] edi +
cmp dword ptr [esi] 0 +
pop edi  +
pop esi  +
jz loc_1010F79  +
pop ebp  +
retn 10h  +
cmp ecx [ebp+arg_C] +
jle loc_1010F88  +
push 2  +
push ecx  +
call ds:calloc  +
pop ecx  +
pop ecx  +
mov [esi] eax +
jmp loc_1010F8A  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_101098A  +
mov dword ptr [esi] offset off_10029E4 +
mov ecx dword_10309D8 +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
test edx edx +
jnz loc_1010FE4  +
xor eax eax +
jmp loc_1011011  +
mov eax [edx+10h] +
push esi  +
mov esi [ecx+14h] +
cmp eax esi +
jz loc_1010FF7  +
push eax  +
call sub_1015F56  +
jmp loc_1011010  +
mov eax [edx+14h] +
jmp loc_1011006  +
cmp edx [eax+10h] +
jnz loc_101100A  +
mov edx eax +
mov eax [eax+14h] +
cmp eax esi +
jnz loc_1010FFC  +
cmp eax esi +
jnz loc_1011010  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax ecx +
xor ecx ecx +
mov [eax] ecx +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov [eax+10h] edx +
mov [eax+14h] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1011087  +
mov edx [eax+10h] +
push esi  +
mov esi [edx+0Ch] +
mov [eax+10h] esi +
mov esi [edx+0Ch] +
cmp esi [ecx+14h] +
jz loc_1011061  +
mov [esi+14h] eax +
mov esi [eax+14h] +
mov [edx+14h] esi +
mov esi [eax+14h] +
cmp esi [ecx+14h] +
jnz loc_1011073  +
mov [ecx] edx +
jmp loc_1011080  +
cmp eax [esi+0Ch] +
jnz loc_101107D  +
mov [esi+0Ch] edx +
jmp loc_1011080  +
mov [esi+10h] edx +
mov [edx+0Ch] eax +
mov [eax+14h] edx +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [esi] +
push edi  +
call sub_1010FD4  +
mov [esi] eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_10110D8  +
mov edx [ecx+14h] +
cmp eax edx +
jz loc_10110D8  +
mov ecx eax +
mov eax [eax+10h] +
jmp loc_10110D0  +
mov ecx eax +
mov eax [ecx+10h] +
cmp eax edx +
jnz loc_10110CB  +
mov eax ecx +
jmp loc_10110DA  +
xor eax eax +
pop ebp  +
retn 4  +
***
test ecx ecx +
jz locret_10110F9  +
push esi  +
mov esi [ecx] +
push ecx  +
call ds:__imp_free  +
pop ecx  +
mov ecx esi +
test esi esi +
jnz loc_10110E8  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
mov eax [ebp+arg_4] +
mov eax [eax] +
test ecx ecx +
jnz loc_1011118  +
neg eax  +
sbb eax eax +
jmp loc_1011141  +
test eax eax +
jnz loc_1011121  +
xor eax eax +
inc eax  +
jmp loc_1011141  +
push 0  +
push 800h  +
push eax  +
push ecx  +
call OLEAUT32_314  +
sub eax 0 +
jz loc_101113E  +
dec eax  +
jz loc_101113A  +
dec eax  +
jz loc_101111C  +
xor eax eax +
jmp loc_1011141  +
or eax 0FFFFFFFFh +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+4] edi +
jnz loc_1011219  +
cmp byte ptr [esi+8] 0 +
jnz loc_1011219  +
mov eax [esi] +
push ebx  +
push 8  +
pop ebx  +
call dword ptr [eax+4]  +
mov [ebp+var_4] eax +
test eax eax +
jbe loc_1011194  +
mov eax [esi] +
push edi  +
mov ecx esi +
call dword ptr [eax+10h]  +
test eax eax +
jz loc_101118E  +
mov edx [eax] +
mov ecx eax +
call dword ptr [edx+8]  +
add ebx eax +
inc edi  +
cmp edi [ebp+var_4] +
jb loc_1011179  +
push ebx  +
call ds:malloc  +
pop ecx  +
mov [esi+4] eax +
test eax eax +
jnz loc_10111AD  +
push 8007000Eh  +
call loc_100B638  +
push dword ptr [esi+0Ch]  +
push ebx  +
push eax  +
call ds:InitializeAcl  +
test eax eax +
jnz loc_10111D4  +
call sub_1010E0C  +
push dword ptr [esi+4]  +
mov edi eax +
call ds:__imp_free  +
and dword ptr [esi+4] 0 +
pop ecx  +
push edi  +
jmp loc_10111A8  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+14h]  +
xor ebx ebx +
cmp [ebp+var_4] ebx +
jbe loc_1011218  +
mov eax [esi] +
push ebx  +
mov ecx esi +
call dword ptr [eax+10h]  +
mov edi eax +
test edi edi +
jz loc_10111BC  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+8]  +
push eax  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+4]  +
push eax  +
push 0FFFFFFFFh  +
push dword ptr [esi+0Ch]  +
push dword ptr [esi+4]  +
call ds:AddAce  +
test eax eax +
jz loc_10111BC  +
inc ebx  +
cmp ebx [ebp+var_4] +
jb loc_10111E2  +
pop ebx  +
mov eax [esi+4] +
pop edi  +
pop esi  +
leave   +
retn   +
***
cmp byte ptr [ecx+8] 0 +
jnz loc_1011236  +
mov eax [ecx] +
call dword ptr [eax+4]  +
test eax eax +
jnz loc_1011236  +
inc eax  +
retn   +
xor eax eax +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push dword ptr [esi+4]  +
call ds:__imp_free  +
and dword ptr [esi+4] 0 +
pop ecx  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+dwRevision] +
test edx edx +
jz loc_1011284  +
xor eax eax +
mov [edx] ax +
mov eax [ecx+4] +
test eax eax +
jz loc_1011284  +
lea ecx [ebp+dwRevision] +
push ecx  +
push edx  +
push eax  +
call ds:GetSecurityDescriptorControl  +
test eax eax +
jz loc_1011284  +
mov al 1 +
jmp loc_1011286  +
xor al al +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
mov [ebp+var_2C] esi +
cmp [esi+4] ebx +
jz loc_101140E  +
lea eax [ebp+dwRevision] +
push eax  +
call sub_1011258  +
test al al +
jnz loc_10112C0  +
push 80004005h  +
call loc_100B638  +
test [ebp+dwRevision] 8000h +
jz loc_101140E  +
lea eax [ebp+dwPrimaryGroupSize] +
push eax  +
push ebx  +
lea eax [ebp+dwOwnerSize] +
push eax  +
push ebx  +
lea eax [ebp+dwSaclSize] +
push eax  +
push ebx  +
lea eax [ebp+dwDaclSize] +
push eax  +
push ebx  +
lea eax [ebp+dwAbsoluteSecurityDescriptorSize] +
push eax  +
push ebx  +
push dword ptr [esi+4]  +
mov [ebp+dwSaclSize] ebx +
mov [ebp+dwDaclSize] ebx +
mov [ebp+dwPrimaryGroupSize] ebx +
mov [ebp+dwOwnerSize] ebx +
mov [ebp+dwAbsoluteSecurityDescriptorSize] ebx +
call ds:MakeAbsoluteSD  +
call ds:GetLastError  +
cmp eax 7Ah +
jz loc_101130E  +
call loc_1010DC6  +
push [ebp+dwAbsoluteSecurityDescriptorSize]  +
mov esi ds:malloc +
call esi  +
pop ecx  +
mov [ebp+pAbsoluteSecurityDescriptor] eax +
cmp eax ebx +
jz loc_10112B6  +
cmp [ebp+dwOwnerSize] ebx +
jz loc_1011331  +
push [ebp+dwOwnerSize]  +
call esi  +
pop ecx  +
mov [ebp+pOwner] eax +
jmp loc_1011334  +
mov [ebp+pOwner] ebx +
cmp [ebp+dwOwnerSize] ebx +
jz loc_1011342  +
cmp [ebp+pOwner] ebx +
jz loc_10112B6  +
cmp [ebp+dwPrimaryGroupSize] ebx +
jz loc_1011352  +
push [ebp+dwPrimaryGroupSize]  +
call esi  +
pop ecx  +
mov [ebp+pPrimaryGroup] eax +
jmp loc_1011355  +
mov [ebp+pPrimaryGroup] ebx +
cmp [ebp+dwPrimaryGroupSize] ebx +
jz loc_1011363  +
cmp [ebp+pPrimaryGroup] ebx +
jz loc_10112B6  +
cmp [ebp+dwDaclSize] ebx +
jz loc_1011373  +
push [ebp+dwDaclSize]  +
call esi  +
pop ecx  +
mov [ebp+pDacl] eax +
jmp loc_1011376  +
mov [ebp+pDacl] ebx +
cmp [ebp+dwDaclSize] ebx +
jz loc_1011384  +
cmp [ebp+pDacl] ebx +
jz loc_10112B6  +
push edi  +
cmp [ebp+dwSaclSize] ebx +
jz loc_1011394  +
push [ebp+dwSaclSize]  +
call esi  +
pop ecx  +
mov edi eax +
jmp loc_1011396  +
xor edi edi +
cmp [ebp+dwSaclSize] ebx +
jz loc_10113A3  +
cmp edi ebx +
jz loc_10112B6  +
mov ebx [ebp+pAbsoluteSecurityDescriptor] +
mov esi [ebp+var_2C] +
lea eax [ebp+dwPrimaryGroupSize] +
push eax  +
push [ebp+pPrimaryGroup]  +
lea eax [ebp+dwOwnerSize] +
push eax  +
push [ebp+pOwner]  +
lea eax [ebp+dwSaclSize] +
push eax  +
push edi  +
lea eax [ebp+dwDaclSize] +
push eax  +
push [ebp+pDacl]  +
lea eax [ebp+dwAbsoluteSecurityDescriptorSize] +
push eax  +
push ebx  +
push dword ptr [esi+4]  +
call ds:MakeAbsoluteSD  +
test eax eax +
jnz loc_1011403  +
call sub_1010E0C  +
mov esi ds:__imp_free +
push ebx  +
mov [ebp+var_2C] eax +
call esi  +
push [ebp+pOwner]  +
call esi  +
push [ebp+pPrimaryGroup]  +
call esi  +
push [ebp+pDacl]  +
call esi  +
push edi  +
call esi  +
add esp 14h +
push [ebp+var_2C]  +
jmp loc_10112BB  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+4]  +
mov [esi+4] ebx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push esi  +
mov esi ecx +
cmp dword ptr [esi+4] 0 +
jz loc_10114C4  +
push edi  +
lea eax [ebp+dwRevision] +
push eax  +
call sub_1011258  +
mov edi ds:__imp_free +
test al al +
jz loc_10114B9  +
test [ebp+dwRevision] 8000h +
jnz loc_10114B9  +
lea eax [ebp+bSaclDefaulted] +
push eax  +
lea eax [ebp+pOwner] +
push eax  +
push dword ptr [esi+4]  +
call ds:GetSecurityDescriptorOwner  +
push [ebp+pOwner]  +
call edi  +
pop ecx  +
lea eax [ebp+bSaclDefaulted] +
push eax  +
lea eax [ebp+pGroup] +
push eax  +
push dword ptr [esi+4]  +
call ds:GetSecurityDescriptorGroup  +
push [ebp+pGroup]  +
call edi  +
pop ecx  +
lea eax [ebp+bSaclDefaulted] +
push eax  +
lea eax [ebp+pDacl] +
push eax  +
lea eax [ebp+bSaclPresent] +
push eax  +
push dword ptr [esi+4]  +
call ds:GetSecurityDescriptorDacl  +
cmp [ebp+bSaclPresent] 0 +
jz loc_1011498  +
push [ebp+pDacl]  +
call edi  +
pop ecx  +
lea eax [ebp+bSaclDefaulted] +
push eax  +
lea eax [ebp+pSacl] +
push eax  +
lea eax [ebp+bSaclPresent] +
push eax  +
push dword ptr [esi+4]  +
call ds:GetSecurityDescriptorSacl  +
cmp [ebp+bSaclPresent] 0 +
jz loc_10114B9  +
push [ebp+pSacl]  +
call edi  +
pop ecx  +
push dword ptr [esi+4]  +
call edi  +
and dword ptr [esi+4] 0 +
pop ecx  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push esi  +
push 14h  +
mov esi ecx +
call ds:malloc  +
pop ecx  +
mov [esi+4] eax +
test eax eax +
jnz loc_10114EB  +
push 8007000Eh  +
call loc_100B638  +
push 1  +
push eax  +
call ds:InitializeSecurityDescriptor  +
test eax eax +
jnz loc_1011510  +
call sub_1010E0C  +
push dword ptr [esi+4]  +
mov edi eax +
call ds:__imp_free  +
and dword ptr [esi+4] 0 +
pop ecx  +
push edi  +
jmp loc_10114E6  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
test ecx ecx +
jz loc_1011528  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
shl eax 2 +
push eax  +
push [ebp+arg_4]  +
push eax  +
push [ebp+arg_0]  +
call sub_100DF75  +
add esp 10h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
mov edx [esi+8] +
push edi  +
mov edi [ebp+arg_0] +
cmp edi edx +
jbe loc_10115E5  +
cmp dword ptr [esi] 0 +
mov eax [esi+0Ch] +
jnz loc_1011592  +
cmp eax edi +
jbe loc_1011578  +
mov edi eax +
push 4  +
push edi  +
call ds:calloc  +
pop ecx  +
pop ecx  +
mov [esi] eax +
test eax eax +
jnz loc_101158D  +
xor al al +
jmp loc_10115E7  +
mov [esi+8] edi +
jmp loc_10115E5  +
test eax eax +
jnz loc_10115B1  +
mov eax [esi+4] +
shr eax 3 +
cmp eax 4 +
jnb loc_10115A6  +
push 4  +
pop eax  +
jmp loc_10115B1  +
mov ecx 400h +
cmp eax ecx +
jbe loc_10115B1  +
mov eax ecx +
add eax edx +
mov ebx eax +
cmp edi eax +
jb loc_10115BB  +
mov ebx edi +
push 4  +
push ebx  +
call ds:calloc  +
mov edi eax +
pop ecx  +
pop ecx  +
test edi edi +
jz loc_1011589  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
push edi  +
call sub_1011532  +
push dword ptr [esi]  +
call ds:__imp_free  +
pop ecx  +
mov [esi] edi +
mov [esi+8] ebx +
mov al 1 +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_1002A08  +
push ecx  +
call sub_10100E8  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
mov eax [ecx] +
mov ecx [eax] +
push offset dword_1001448  +
push eax  +
call dword ptr [ecx]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+8] +
test eax eax +
jnz loc_1011642  +
mov eax 80004003h +
jmp loc_101164F  +
push [ebp+arg_0]  +
mov ecx [eax] +
push offset dword_1001448  +
push eax  +
call dword ptr [ecx]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+arg_0]  +
mov esi ecx +
mov eax [esi] +
push eax  +
call ds:wcsrchr  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1011677  +
or eax 0FFFFFFFFh +
jmp loc_101167B  +
sub eax [esi] +
sar eax 1 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpString] 0 +
push edi  +
mov edi ecx +
jnz loc_1011698  +
and dword ptr [edi] 0 +
jmp loc_10116C8  +
push esi  +
push [ebp+lpString]  +
call ds:lstrlenW  +
mov esi eax +
push 80h  +
lea eax [edi+4] +
push eax  +
inc esi  +
push esi  +
push edi  +
call sub_1010F37  +
lea eax [esi+esi] +
push eax  +
push [ebp+lpString]  +
push eax  +
push dword ptr [edi]  +
call sub_1010DE6  +
add esp 10h +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
push esi  +
mov esi ecx +
jnz loc_10116EA  +
and dword ptr [esi] 0 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push dword ptr [ebp+8]  +
call ds:SysAllocString  +
mov [esi] eax +
test eax eax +
jnz loc_10116E3  +
push 8007000Eh  +
call loc_100B638  +
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jnz loc_1011716  +
pop esi  +
retn   +
push eax  +
call ds:SysStringByteLen  +
push eax  +
push dword ptr [esi]  +
call ds:SysAllocStringByteLen  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_8] +
push edi  +
test ecx ecx +
jnz loc_1011747  +
push 80004005h  +
call loc_100B638  +
cmp [ebp+arg_0] 0 +
mov edi [ebp+arg_4] +
jnz loc_101175B  +
test edi edi +
jz loc_101175B  +
push 80070057h  +
jmp loc_1011742  +
mov eax [ecx] +
push 2  +
push edi  +
call dword ptr [eax]  +
test eax eax +
jnz loc_101176B  +
call loc_100BA54  +
add eax 10h +
push edi  +
mov ecx esi +
mov [esi] eax +
call loc_100B9FC  +
push edi  +
push [ebp+arg_0]  +
push edi  +
push dword ptr [esi]  +
call sub_100B4C7  +
add esp 10h +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+lpString]  +
mov esi ecx +
call ds:lstrlenW  +
push eax  +
push [ebp+lpString]  +
mov ecx esi +
call sub_1010E26  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi [edi] +
push esi  +
call sub_1010FD4  +
mov [edi] eax +
pop edi  +
lea eax [esi+4] +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3_catch  +
mov eax [ebp+10h] +
xor esi esi +
cmp eax esi +
jnz loc_10117F8  +
mov eax 80004003h +
jmp loc_101185A  +
push 20h  +
mov [eax] esi +
mov dword ptr [ebp-14h] 8007000Eh +
mov [ebp-18h] esi +
mov [ebp-4] esi +
call loc_1019E39  +
pop ecx  +
cmp eax esi +
jz loc_101181F  +
push dword ptr [ebp+8]  +
mov ecx eax +
call sub_1010FAE  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
jmp loc_1011832  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_101182F +
retn   +
mov esi [ebp-18h] +
test esi esi +
jz loc_1011857  +
push dword ptr [ebp+10h]  +
inc dword ptr [esi+4]  +
push dword ptr [ebp+0Ch]  +
dec dword ptr [esi+4]  +
mov eax [esi] +
push esi  +
call dword ptr [eax]  +
mov [ebp-14h] eax +
test eax eax +
jz loc_1011857  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+20h]  +
mov eax [ebp-14h] +
call __EH_epilog3  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_10029E4 +
mov dword ptr [esi+4] 0C0000001h +
mov ecx dword_10309D8 +
mov eax [ecx] +
call dword ptr [eax+8]  +
mov ecx esi +
pop esi  +
jmp nullsub_1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
dec dword ptr [ecx+4]  +
push esi  +
mov esi [ecx+4] +
jnz loc_10118AD  +
test ecx ecx +
jz loc_10118AD  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+20h]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_10115F3  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1011867  +
test byte ptr [ebp+8] 1 +
jz loc_10118EF  +
push esi  +
call sub_1019EA8  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push esi  +
call sub_1011090  +
mov ecx [esi] +
mov edi eax +
test ecx ecx +
jz loc_101191F  +
push [ebp+arg_4]  +
call sub_1010F10  +
test al al +
jnz loc_1011922  +
and dword ptr [esi] 0 +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push dword ptr [eax]  +
mov esi ecx +
call sub_100F9F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
test eax eax +
jz loc_101195F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push dword ptr [esi]  +
call ds:SysFreeString  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_8]  +
and [ebp+var_4] 0 +
push [ebp+arg_4]  +
lea eax [ebp+var_4] +
push eax  +
call sub_1010D67  +
test eax eax +
jl loc_10119B6  +
push 4  +
push [ebp+var_4]  +
lea eax [ebp+var_4] +
push eax  +
call sub_1019C97  +
test eax eax +
jl loc_10119B6  +
push [ebp+var_4]  +
call ds:malloc  +
pop ecx  +
test eax eax +
jz loc_10119B6  +
mov ecx [ebp+arg_0] +
mov edx [ecx] +
mov [eax] edx +
mov [ecx] eax +
jmp locret_10119B8  +
xor eax eax +
leave   +
retn 0Ch  +
***
cmp byte ptr [ecx+48h] 0 +
jnz loc_10119CA  +
xor al al +
retn   +
add ecx 4 +
push ecx  +
call ds:IsValidSid  +
neg eax  +
sbb eax eax +
neg eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+pSourceSid]  +
mov esi ecx +
call ds:IsValidSid  +
test eax eax +
jnz loc_10119FF  +
push 80070057h  +
call loc_100B638  +
push [ebp+pSourceSid]  +
call ds:GetLengthSid  +
cmp eax 44h +
ja loc_10119F5  +
push [ebp+pSourceSid]  +
lea ecx [esi+4] +
push ecx  +
push eax  +
mov byte ptr [esi+48h] 1 +
call ds:CopySid  +
test eax eax +
jnz loc_1011A2F  +
call sub_1010E0C  +
mov byte ptr [esi+48h] 0 +
push eax  +
jmp loc_10119FA  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push dword ptr [esi+4]  +
mov dword ptr [esi] offset off_1002A50 +
call ds:__imp_free  +
test byte ptr [ebp+8] 1 +
pop ecx  +
jz loc_1011A5E  +
push esi  +
call sub_1019EA8  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
mov esi ecx +
call sub_101114A  +
cmp byte ptr [esi+8] 0 +
pop esi  +
jz loc_1011A85  +
xor eax eax +
leave   +
retn   +
push 2  +
push 0Ch  +
lea ecx [ebp+pAclInformation] +
push ecx  +
push eax  +
call ds:GetAclInformation  +
test eax eax +
jnz loc_1011A9D  +
call loc_1010DC6  +
mov eax [ebp+var_8] +
leave   +
retn   +
***
jmp sub_1011417  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx ecx +
cmp dword ptr [ebx+4] 0 +
push esi  +
push edi  +
jz loc_1011ACE  +
call sub_101128F  +
mov eax [ebx+4] +
test eax eax +
jz loc_1011AED  +
lea ecx [ebp+bOwnerDefaulted] +
push ecx  +
lea ecx [ebp+pOwner] +
push ecx  +
push eax  +
call ds:GetSecurityDescriptorOwner  +
test eax eax +
jnz loc_1011AF8  +
call loc_1010DC6  +
mov ecx ebx +
call sub_10114CC  +
and [ebp+pOwner] 0 +
mov esi [ebp+nDestinationSidLength] +
mov ecx esi +
call sub_10119C1  +
test al al +
jnz loc_1011B10  +
push 80004005h  +
call loc_100B638  +
add esi 4 +
push esi  +
call ds:GetLengthSid  +
push eax  +
mov [ebp+nDestinationSidLength] eax +
call ds:malloc  +
mov edi eax +
pop ecx  +
test edi edi +
jnz loc_1011B32  +
push 8007000Eh  +
jmp loc_1011B0B  +
push esi  +
push edi  +
push [ebp+nDestinationSidLength]  +
call ds:CopySid  +
test eax eax +
jz loc_1011B65  +
movzx eax [ebp+arg_4] +
push eax  +
push edi  +
push dword ptr [ebx+4]  +
call ds:SetSecurityDescriptorOwner  +
test eax eax +
jz loc_1011B65  +
push [ebp+pOwner]  +
call ds:__imp_free  +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
call sub_1010E0C  +
push edi  +
mov esi eax +
call ds:__imp_free  +
pop ecx  +
push esi  +
jmp loc_1011B0B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx ecx +
cmp dword ptr [ebx+4] 0 +
push esi  +
push edi  +
jz loc_1011B93  +
call sub_101128F  +
mov eax [ebx+4] +
test eax eax +
jz loc_1011BB2  +
lea ecx [ebp+bGroupDefaulted] +
push ecx  +
lea ecx [ebp+pGroup] +
push ecx  +
push eax  +
call ds:GetSecurityDescriptorGroup  +
test eax eax +
jnz loc_1011BBD  +
call loc_1010DC6  +
mov ecx ebx +
call sub_10114CC  +
and [ebp+pGroup] 0 +
mov esi [ebp+nDestinationSidLength] +
mov ecx esi +
call sub_10119C1  +
test al al +
jnz loc_1011BD5  +
push 80004005h  +
call loc_100B638  +
add esi 4 +
push esi  +
call ds:GetLengthSid  +
push eax  +
mov [ebp+nDestinationSidLength] eax +
call ds:malloc  +
mov edi eax +
pop ecx  +
test edi edi +
jnz loc_1011BF7  +
push 8007000Eh  +
jmp loc_1011BD0  +
push esi  +
push edi  +
push [ebp+nDestinationSidLength]  +
call ds:CopySid  +
test eax eax +
jz loc_1011C2A  +
movzx eax [ebp+arg_4] +
push eax  +
push edi  +
push dword ptr [ebx+4]  +
call ds:SetSecurityDescriptorGroup  +
test eax eax +
jz loc_1011C2A  +
push [ebp+pGroup]  +
call ds:__imp_free  +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
call sub_1010E0C  +
push edi  +
mov esi eax +
call ds:__imp_free  +
pop ecx  +
push esi  +
jmp loc_1011BD0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
xor edi edi +
mov [ebp+var_8] ebx +
cmp [ebx+4] edi +
jz loc_1011C5D  +
call sub_101128F  +
mov eax [ebx+4] +
mov [ebp+pDacl] edi +
cmp eax edi +
jz loc_1011C83  +
lea ecx [ebp+bDaclDefaulted] +
push ecx  +
lea ecx [ebp+pDacl] +
push ecx  +
lea ecx [ebp+bDaclPresent] +
push ecx  +
push eax  +
call ds:GetSecurityDescriptorDacl  +
test eax eax +
jnz loc_1011C8A  +
call loc_1010DC6  +
mov ecx ebx +
call sub_10114CC  +
mov esi [ebp+arg_0] +
cmp byte ptr [esi+8] 0 +
jnz loc_1011CE3  +
mov ecx esi +
call sub_1011225  +
test al al +
jnz loc_1011CD5  +
mov ecx esi +
call sub_1011A6A  +
mov ebx eax +
push ebx  +
call ds:malloc  +
mov edi eax +
pop ecx  +
test edi edi +
jnz loc_1011CBF  +
push 8007000Eh  +
call loc_100B638  +
push ebx  +
mov ecx esi +
call sub_101114A  +
push eax  +
push ebx  +
push edi  +
call sub_1010DE6  +
mov ebx [ebp+var_8] +
add esp 10h +
cmp byte ptr [esi+8] 0 +
jnz loc_1011CE3  +
test edi edi +
jnz loc_1011CE3  +
xor eax eax +
jmp loc_1011CE6  +
xor eax eax +
inc eax  +
movzx ecx [ebp+arg_4] +
push ecx  +
push edi  +
push eax  +
push dword ptr [ebx+4]  +
call ds:SetSecurityDescriptorDacl  +
test eax eax +
jnz loc_1011D0C  +
call sub_1010E0C  +
push edi  +
mov esi eax +
call ds:__imp_free  +
pop ecx  +
push esi  +
jmp loc_1011CBA  +
push [ebp+pDacl]  +
call ds:__imp_free  +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push edi  +
mov edi [esi+4] +
cmp edi [esi+8] +
jb loc_1011D54  +
lea eax [edi+1] +
push eax  +
call sub_1011556  +
test al al +
jnz loc_1011D54  +
push 8007000Eh  +
call loc_100B638  +
mov eax [esi] +
lea eax [eax+edi*4] +
test eax eax +
jz loc_1011D67  +
mov ecx [ebp+arg_0] +
mov edx [ecx] +
and dword ptr [ecx] 0 +
mov [eax] edx +
inc dword ptr [esi+4]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1011517  +
test [ebp+arg_0] 1 +
jz loc_1011D91  +
push esi  +
call sub_1019EA8  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
test ecx ecx +
jbe loc_1011DB9  +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1011DB3  +
and dword ptr [eax] 0 +
add eax 4 +
dec ecx  +
jnz loc_1011DAC  +
pop ebp  +
retn 8  +
***
mov eax [ecx] +
test eax eax +
jz loc_1011DCF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+2Ch]  +
retn   +
xor eax eax +
retn   +
***
mov eax [ecx] +
push dword ptr [eax-0Ch]  +
push eax  +
call ds:SysAllocStringLen  +
test eax eax +
jnz locret_1011DEC  +
jmp loc_100BA54  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+lpString]  +
mov esi ecx +
lea eax [esi+4] +
mov [esi] eax +
call sub_1011685  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_8]  +
mov esi ecx +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101172D  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov eax [ecx] +
mov ecx [eax-10h] +
test ecx ecx +
jz loc_1011E45  +
mov eax [ecx] +
call dword ptr [eax+10h]  +
jmp loc_1011E47  +
xor eax eax +
test eax eax +
jnz locret_1011E58  +
mov ecx offset dword_1044E10 +
mov eax dword_1044E10 +
jmp dword ptr [eax+10h]  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ecx +
mov ecx esi +
call sub_1011709  +
mov [edi] eax +
cmp dword ptr [esi] 0 +
jz loc_1011E86  +
test eax eax +
jnz loc_1011E86  +
push 8007000Eh  +
call loc_100B638  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10118FB  +
add eax 4 +
pop ebp  +
retn 8  +
***
call __EH_prolog3  +
and dword ptr [ebp-10h] 0 +
mov eax [ebp+0Ch] +
and dword ptr [ebp-4] 0 +
test eax eax +
jz loc_1011EF0  +
mov ecx [eax] +
lea edx [ebp-10h] +
push edx  +
push offset dword_1009560  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
test esi esi +
jl loc_1011EF3  +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp-10h]  +
call sub_10195CE  +
mov esi eax +
jmp loc_1011EF3  +
xor esi esi +
inc esi  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_1011F04  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
call __EH_epilog3  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1011E5E  +
push [ebp+arg_4]  +
lea ecx [esi+4] +
call sub_101192F  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1002A6C +
call sub_1011417  +
test byte ptr [ebp+8] 1 +
jz loc_1011F5A  +
push esi  +
call sub_1019EA8  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jbe loc_1011F87  +
push esi  +
mov esi [ebp+arg_0] +
push 0  +
mov ecx esi +
call sub_1011D77  +
add esi 4 +
dec edi  +
jnz loc_1011F77  +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
***
call __EH_prolog3_catch  +
mov esi ecx +
xor ebx ebx +
mov [ebp-18h] ebx +
mov [ebp-4] ebx +
mov [ebp-14h] ebx +
lea eax [ebp-14h] +
push eax  +
mov byte ptr [ebp-4] 1 +
mov [ebp-20h] ebx +
call sub_1011612  +
mov edi eax +
cmp edi ebx +
jl loc_1012100  +
mov eax [ebp+8] +
mov ecx [eax] +
cmp [ecx-0Ch] ebx +
jz loc_1012025  +
push ecx  +
lea ecx [ebp-18h] +
mov byte ptr [ebp-4] 2 +
call sub_100BB74  +
mov eax [ebp-14h] +
push dword ptr [ebp-18h]  +
mov ecx [eax] +
push eax  +
mov dword ptr [ebp-4] 1 +
call dword ptr [ecx+20h]  +
mov edi eax +
cmp edi ebx +
jge loc_1012025  +
push 0C150003Eh  +
push dword ptr [esi+2Ch]  +
call sub_10196C9  +
pop ecx  +
pop ecx  +
jmp loc_1012100  +
mov eax [ebp-24h] +
mov [ebp+0Ch] eax +
mov dword ptr [ebp-4] 1 +
mov eax offset loc_101201B +
retn   +
mov edi [ebp+0Ch] +
xor ebx ebx +
jmp loc_1012100  +
cmp [ebp+0Ch] ebx +
jz loc_1012040  +
mov eax [ebp-14h] +
push dword ptr [ebp+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+28h]  +
mov edi eax +
cmp edi ebx +
jl loc_1012100  +
push offset unk_1044EAC  +
push 0Ch  +
call ??2@YAPAXIABUnothrow_t@std@@@Z  +
pop ecx  +
pop ecx  +
mov ecx eax +
mov [ebp+0Ch] ecx +
mov byte ptr [ebp-4] 4 +
cmp ecx ebx +
jz loc_1012062  +
call sub_1018790  +
jmp loc_1012064  +
xor eax eax +
mov byte ptr [ebp-4] 1 +
mov [esi+1Ch] eax +
cmp eax ebx +
jnz loc_1012079  +
mov edi 8007000Eh +
jmp loc_1012100  +
mov eax [esi] +
lea edx [ebp-1Ch] +
push edx  +
mov [ebp-1Ch] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+1Ch]  +
mov edi eax +
cmp edi ebx +
jl loc_1012100  +
push dword ptr [ebp-1Ch]  +
mov ecx [esi+1Ch] +
push 0B8000h  +
push offset aDism_exe  +
call sub_1018934  +
mov edi eax +
cmp edi ebx +
jl loc_1012100  +
mov ecx [esi+1Ch] +
lea eax [ebp-20h] +
push eax  +
call sub_101872B  +
cmp [ebp-20h] ebx +
jnz loc_10120F5  +
mov [ebp+0Ch] ebx +
mov ecx [esi+1Ch] +
lea eax [ebp+0Ch] +
push eax  +
mov byte ptr [ebp-4] 5 +
call sub_1018769  +
mov edi eax +
cmp edi ebx +
jl loc_10120E8  +
push dword ptr [ebp+0Ch]  +
push 81500034h  +
push 2  +
push dword ptr [esi+28h]  +
call sub_100E2A2  +
add esp 10h +
push dword ptr [ebp+0Ch]  +
mov byte ptr [ebp-4] 1 +
call ds:SysFreeString  +
push dword ptr [esi+1Ch]  +
mov ecx [esi+2Ch] +
call sub_1019483  +
mov eax [ebp-14h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_1012110  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push dword ptr [ebp-18h]  +
call ds:SysFreeString  +
mov eax edi +
call __EH_epilog3  +
retn 8  +
***
call __EH_prolog3  +
mov esi ecx +
and dword ptr [ebp-14h] 0 +
and dword ptr [ebp-4] 0 +
push offset dword_1044E10  +
lea ecx [ebp-10h] +
call sub_100BC7D  +
mov edi [ebp+8] +
mov eax [edi] +
lea ecx [ebp-14h] +
push ecx  +
push edi  +
mov byte ptr [ebp-4] 1 +
call dword ptr [eax+20h]  +
mov ebx eax +
test ebx ebx +
jge loc_1012173  +
push 0C1500003h  +
push dword ptr [esi+2Ch]  +
call sub_10196C9  +
pop ecx  +
pop ecx  +
jmp loc_10121EB  +
mov eax [edi] +
lea ecx [ebp-18h] +
push ecx  +
push edi  +
call dword ptr [eax+24h]  +
mov edi eax +
test edi edi +
jge loc_10121AA  +
push 0C1500003h  +
push dword ptr [esi+2Ch]  +
call sub_10196C9  +
pop ecx  +
pop ecx  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
push dword ptr [ebp-14h]  +
call ds:SysFreeString  +
mov eax edi +
jmp loc_1012201  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp-18h]  +
call sub_101C7ED  +
mov ebx eax +
test ebx ebx +
jl loc_1012162  +
cmp dword ptr [esi+1Ch] 0 +
jz loc_10121EB  +
push dword ptr [ebp-10h]  +
mov edi offset unk_1038AE8 +
push dword ptr [ebp-14h]  +
push offset aTargetImageInf  +
push 2022h  +
push edi  +
call sub_101A9EC  +
mov ecx [esi+1Ch] +
add esp 14h +
push edi  +
push 3  +
call sub_101865E  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
push dword ptr [ebp-14h]  +
call ds:SysFreeString  +
mov eax ebx +
call __EH_epilog3  +
retn 4  +
***
call __EH_prolog3  +
mov esi offset dword_1044E10 +
push esi  +
lea ecx [ebp-14h] +
call sub_100BC7D  +
and dword ptr [ebp-4] 0 +
push esi  +
lea ecx [ebp-10h] +
call sub_100BC7D  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_101CBD3  +
mov esi eax +
test esi esi +
jl loc_101225E  +
push dword ptr [ebp+8]  +
push offset aSystem32Dism  +
push dword ptr [ebp-10h]  +
call sub_101C3C6  +
mov esi eax +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov eax esi +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
push offset dword_1002A2C  +
push 0  +
call sub_10117DC  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
call sub_1011F13  +
and dword ptr [esi+14h] 0 +
mov dword ptr [esi+8] 1 +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101194D  +
test [ebp+arg_0] 1 +
jz loc_10122E4  +
push esi  +
call sub_1019EA8  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push 50h  +
mov eax offset loc_10206F7 +
call __EH_prolog3_GS  +
mov esi [ebp+8] +
mov edi [ebp+0Ch] +
lea ecx [esi+50h] +
mov [ebp-5Ch] esi +
mov dword ptr [esi] offset off_1002B1C +
mov byte ptr [esi+48h] 0 +
mov dword ptr [esi+4Ch] 7 +
call sub_100BD92  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+54h] +
call sub_100BD92  +
lea ecx [esi+58h] +
call sub_100BD92  +
lea ecx [esi+5Ch] +
call sub_100BD92  +
mov ebx [ebp+10h] +
mov byte ptr [ebp-4] 3 +
test bl bl +
jz loc_10123AA  +
push ebx  +
call ds:GetSidLengthRequired  +
cmp eax 44h +
ja loc_10123AA  +
push ebx  +
push edi  +
lea eax [ebp-54h] +
push eax  +
call ds:InitializeSid  +
test eax eax +
jnz loc_1012366  +
call loc_1010DC6  +
and dword ptr [ebp-58h] 0 +
movzx ebx bl +
test ebx ebx +
jbe loc_1012390  +
lea edi [ebp+10h] +
push dword ptr [ebp-58h]  +
lea eax [ebp-54h] +
push eax  +
add edi 4 +
call ds:GetSidSubAuthority  +
inc dword ptr [ebp-58h]  +
mov ecx [edi] +
mov [eax] ecx +
cmp [ebp-58h] ebx +
jb loc_1012374  +
lea eax [ebp-54h] +
push eax  +
mov ecx esi +
call sub_10119E0  +
mov dword ptr [esi+4Ch] 8 +
mov eax esi +
call sub_101A57D  +
retn   +
***
push 80070057h  +
call loc_100B638  +
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+5Ch] +
sub ecx 10h +
mov dword ptr [esi] offset off_1002B1C +
call sub_100B8FC  +
mov ecx [esi+58h] +
sub ecx 10h +
call sub_100B8FC  +
mov ecx [esi+54h] +
sub ecx 10h +
call sub_100B8FC  +
mov ecx [esi+50h] +
sub ecx 10h +
pop esi  +
jmp sub_100B8FC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push 12h  +
push 1  +
push offset dword_1001410  +
push [ebp+arg_0]  +
call loc_10122F0  +
mov eax [ebp+arg_0] +
add esp 10h +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push 220h  +
push 20h  +
push 2  +
push offset dword_1001410  +
push [ebp+arg_0]  +
call loc_10122F0  +
mov eax [ebp+arg_0] +
add esp 14h +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push 227h  +
push 20h  +
push 2  +
push offset dword_1001410  +
push [ebp+arg_0]  +
call loc_10122F0  +
mov eax [ebp+arg_0] +
add esp 14h +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push dword ptr [esi+6Ch]  +
mov dword ptr [esi] offset off_1002B24 +
call ds:__imp_free  +
pop ecx  +
lea ecx [esi+4] +
pop esi  +
jmp sub_10123BA  +
***
xor al al +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push esi  +
push edi  +
mov esi offset dword_1009580 +
mov edi eax +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_10124E7  +
push dword ptr [esi+4]  +
push eax  +
call sub_1011F66  +
push dword ptr [esi]  +
call ds:__imp_free  +
pop ecx  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
push edi  +
mov esi ecx +
cmp eax 0FFFFFFFFh +
jz loc_1012502  +
mov [esi+0Ch] eax +
mov edi [ebp+arg_0] +
test edi edi +
jnz loc_101252D  +
mov eax [esi] +
test eax eax +
jz loc_1012523  +
push dword ptr [esi+4]  +
push eax  +
call sub_1011F66  +
push dword ptr [esi]  +
call ds:__imp_free  +
and [esi] edi +
pop ecx  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
jmp loc_101256B  +
cmp edi [esi+8] +
ja loc_101254B  +
mov eax [esi+4] +
cmp eax edi +
jb loc_1012558  +
jbe loc_1012568  +
sub eax edi +
push eax  +
mov eax [esi] +
lea eax [eax+edi*4] +
push eax  +
call sub_1011F66  +
jmp loc_1012568  +
push edi  +
call sub_1011556  +
test al al +
jz loc_101256D  +
mov eax [esi+4] +
mov ecx edi +
sub ecx eax +
push ecx  +
mov ecx [esi] +
lea eax [ecx+eax*4] +
push eax  +
call sub_1011D9D  +
mov [esi+4] edi +
mov al 1 +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
call __EH_prolog3  +
mov ebx ecx +
mov [ebp-10h] ebx +
mov esi offset dword_1044E10 +
push esi  +
lea ecx [ebp-18h] +
call sub_100BC7D  +
and dword ptr [ebp-4] 0 +
push esi  +
lea ecx [ebp-14h] +
call sub_100BC7D  +
lea eax [ebp-18h] +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_101C882  +
mov edi eax +
test edi edi +
jl loc_1012630  +
lea esi [ebx+24h] +
push esi  +
push offset aDismcore_dll  +
push dword ptr [ebp-18h]  +
call sub_101C3C6  +
mov edi eax +
test edi edi +
jl loc_1012630  +
mov eax [esi] +
push ebx  +
push offset dword_1001418  +
mov ebx offset dword_10014B8 +
push ebx  +
push eax  +
call sub_101D854  +
mov edi eax +
test edi edi +
jge loc_1012638  +
cmp edi 8007007Eh +
jnz loc_1012629  +
mov ecx [ebp-10h] +
lea eax [ebp-14h] +
push eax  +
call sub_101220E  +
mov edi eax +
test edi edi +
jl loc_101262D  +
push esi  +
push offset aDismcore_dll  +
push dword ptr [ebp-14h]  +
call sub_101C3C6  +
mov edi eax +
test edi edi +
jl loc_101262D  +
push dword ptr [ebp-10h]  +
mov esi [esi] +
push offset dword_1001418  +
push ebx  +
push esi  +
call sub_101D854  +
mov edi eax +
test edi edi +
jge loc_1012638  +
mov ebx [ebp-10h] +
lea ecx [ebx+24h] +
call sub_100BC41  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov eax edi +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jge loc_1012670  +
xor edi edi +
mov esi [ecx] +
cmp edi [esi-0Ch] +
jl loc_1012682  +
push ecx  +
mov ecx [ebp+arg_0] +
call sub_100C209  +
jmp loc_1012692  +
call sub_1011E35  +
mov ecx [ebp+arg_0] +
push eax  +
push edi  +
push esi  +
call sub_1011E13  +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
test edi edi +
jnz loc_10126BA  +
push 80004005h  +
call loc_100B638  +
push 0  +
mov ecx edi +
call sub_10122CA  +
mov eax [esi+8] +
mov [edi+0Ch] eax +
dec dword ptr [esi+4]  +
mov [esi+8] edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10123BA  +
test byte ptr [ebp+8] 1 +
jz loc_10126F4  +
push esi  +
call sub_1019EA8  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
mov edi [ebp+8] +
mov dword ptr [esi] offset off_1002B1C +
mov al [edi+48h] +
mov [esi+48h] al +
mov eax [edi+4Ch] +
mov [esi+4Ch] eax +
lea eax [edi+50h] +
push eax  +
lea ecx [esi+50h] +
call sub_100C209  +
and dword ptr [ebp-4] 0 +
lea eax [edi+54h] +
push eax  +
lea ecx [esi+54h] +
call sub_100C209  +
lea eax [edi+58h] +
push eax  +
lea ecx [esi+58h] +
mov byte ptr [ebp-4] 1 +
call sub_100C209  +
lea ecx [esi+5Ch] +
call sub_100BD92  +
cmp byte ptr [edi+48h] 0 +
mov byte ptr [ebp-4] 3 +
jz loc_101279B  +
mov ecx edi +
call sub_10119C1  +
test al al +
jnz loc_1012779  +
push 80070057h  +
call loc_100B638  +
add edi 4 +
push edi  +
call ds:GetLengthSid  +
push edi  +
lea ecx [esi+4] +
push ecx  +
push eax  +
call ds:CopySid  +
test eax eax +
jnz loc_101279B  +
call sub_1010E0C  +
push eax  +
jmp loc_1012774  +
mov eax esi +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_1002B24 +
call sub_1012700  +
mov eax [ebp+arg_4] +
and dword ptr [esi+6Ch] 0 +
mov [esi+64h] eax +
mov al [ebp+arg_8] +
mov [esi+68h] al +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101247F  +
test byte ptr [ebp+8] 1 +
jz loc_10127F9  +
push esi  +
call sub_1019EA8  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_8]  +
mov esi ecx +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10127AA  +
mov al [ebp+arg_C] +
mov [esi+70h] al +
mov dword ptr [esi] offset off_1002B60 +
mov eax esi +
pop esi  +
pop ebp  +
retn 10h  +
***
xor eax eax +
cmp [ecx+70h] al +
setz al  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+6Ch] 0 +
jnz loc_10128B6  +
mov eax [esi] +
push ebx  +
push edi  +
call dword ptr [eax+8]  +
mov ebx eax +
push ebx  +
call ds:malloc  +
mov edi eax +
pop ecx  +
test edi edi +
jnz loc_101286D  +
push 8007000Eh  +
call loc_100B638  +
push ebx  +
push 0  +
push edi  +
call memset  +
mov [edi+2] bx +
mov al [esi+68h] +
mov [edi+1] al +
mov eax [esi] +
add esp 0Ch +
mov ecx esi +
call dword ptr [eax+0Ch]  +
mov [edi] al +
mov eax [esi+64h] +
mov [edi+4] eax +
lea eax [esi+8] +
push eax  +
call ds:GetLengthSid  +
push eax  +
lea eax [esi+8] +
push eax  +
add ebx 0FFFFFFF8h +
lea eax [edi+8] +
push ebx  +
push eax  +
call sub_1010DE6  +
add esp 10h +
mov [esi+6Ch] edi +
pop edi  +
pop ebx  +
mov eax [esi+6Ch] +
pop esi  +
retn   +
***
add ecx 8 +
push ecx  +
call ds:GetLengthSid  +
add eax 8 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1002B60 +
call sub_101247F  +
test byte ptr [ebp+8] 1 +
jz loc_10128F3  +
push esi  +
call sub_1019EA8  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ecx +
cmp esi [edi+14h] +
jz loc_101292A  +
push dword ptr [esi+0Ch]  +
call sub_10128FF  +
push dword ptr [esi+10h]  +
mov ecx edi +
call sub_10128FF  +
push esi  +
mov ecx edi +
call sub_10126A0  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax ecx +
xor ecx ecx +
mov [eax+4] ecx +
mov [eax+8] cl +
mov dword ptr [eax+0Ch] 2 +
mov dword ptr [eax] offset off_1002B80 +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
mov [eax+18h] ecx +
mov [eax+1Ch] ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_0] +
mov al [edi+68h] +
shr al 4 +
and al 1 +
jz loc_1012982  +
test byte ptr [esi+68h] 10h +
jnz loc_1012982  +
mov eax 0FFFFFFFFh +
jmp loc_10129DB  +
test al al +
jnz loc_1012991  +
test byte ptr [esi+68h] 10h +
jz loc_1012991  +
xor eax eax +
inc eax  +
jmp loc_10129DB  +
mov al [edi+70h] +
test al al +
jz loc_10129A2  +
cmp byte ptr [esi+70h] 0 +
jz loc_101297B  +
test al al +
jnz loc_10129A8  +
cmp byte ptr [esi+70h] 0 +
jnz loc_101298C  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+10h]  +
test al al +
jz loc_10129C3  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+10h]  +
test al al +
jnz loc_10129C3  +
or eax 0FFFFFFFFh +
jmp loc_10129DB  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+10h]  +
test al al +
jnz loc_10129D9  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+10h]  +
test al al +
jnz loc_101298C  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax [ecx+4] +
jb loc_10129FD  +
push 80070057h  +
call loc_100B638  +
mov ecx [ecx] +
lea eax [ecx+eax*4] +
pop ebp  +
retn 4  +
***
mov eax [ecx+14h] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
add ecx 10h +
call sub_10129E6  +
mov eax [eax] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ecx +
mov eax [edi] +
cmp eax [esi] +
jnz loc_1012A4A  +
cmp edi esi +
jz loc_1012A56  +
and dword ptr [esi] 0 +
jmp loc_1012A56  +
call sub_1011517  +
mov eax [esi] +
and dword ptr [esi] 0 +
mov [edi] eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov edx [ecx+14h] +
and [ebp+var_10] 0 +
push esi  +
xor esi esi +
push 4  +
pop eax  +
inc esi  +
mov [ebp+var_18] ecx +
mov [ebp+var_14] edx +
cmp edx eax +
jbe loc_1012A95  +
mov esi eax +
imul eax eax +
inc eax  +
cmp eax edx +
jb loc_1012A83  +
test esi esi +
jbe loc_1012B49  +
push ebx  +
push edi  +
lea ebx [esi-1] +
mov [ebp+var_8] ebx +
cmp ebx [ebp+var_14] +
jnb loc_1012B34  +
lea edi [ecx+10h] +
sub ebx esi +
push [ebp+var_8]  +
mov ecx edi +
call sub_10129E6  +
push eax  +
lea ecx [ebp+var_10] +
call sub_1012A2F  +
mov eax [ebp+var_8] +
mov [ebp+var_4] eax +
cmp eax esi +
jb loc_1012B0C  +
mov [ebp+var_C] ebx +
push [ebp+var_C]  +
mov ecx edi +
call sub_10129E6  +
push [ebp+var_10]  +
mov eax [eax] +
push eax  +
call sub_101295E  +
cmp eax 0FFFFFFFFh +
jnz loc_1012B0C  +
push [ebp+var_C]  +
mov ecx edi +
call sub_10129E6  +
push eax  +
push [ebp+var_4]  +
mov ecx edi +
call sub_10129E6  +
mov ecx eax +
call sub_1012A2F  +
sub [ebp+var_4] esi +
sub [ebp+var_C] esi +
cmp [ebp+var_4] esi +
jnb loc_1012ACB  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+var_4]  +
mov ecx edi +
call sub_10129E6  +
mov ecx eax +
call sub_1012A2F  +
inc [ebp+var_8]  +
mov eax [ebp+var_8] +
inc ebx  +
cmp eax [ebp+var_14] +
jb loc_1012AAB  +
mov ecx [ebp+var_18] +
mov eax esi +
push 3  +
xor edx edx +
pop esi  +
div  esi +
mov esi eax +
test esi esi +
ja loc_1012A97  +
pop edi  +
pop ebx  +
lea ecx [ebp+var_10] +
call sub_1011517  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+0Ch] +
push ebx  +
push esi  +
mov esi ecx +
mov ecx [ebp+8] +
lea ebx [ecx+edx] +
push edi  +
cmp ebx ecx +
jb loc_1012BB4  +
cmp ebx edx +
jb loc_1012BB4  +
mov eax [esi+4] +
cmp ebx eax +
ja loc_1012BB4  +
sub eax ebx +
mov [ebp+8] eax +
mov eax [esi] +
mov edi ecx +
shl edi 2 +
push edx  +
add eax edi +
push eax  +
call sub_1011F66  +
cmp dword ptr [ebp+8] 0 +
jbe loc_1012BA7  +
mov eax [esi] +
push dword ptr [ebp+8]  +
lea ecx [eax+ebx*4] +
push ecx  +
add eax edi +
push eax  +
call sub_1011532  +
mov eax [ebp+0Ch] +
sub [esi+4] eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
push 80070057h  +
call loc_100B638  +
mov edi edi +
push ebp  +
mov ebp esp +
push 1  +
push [ebp+arg_0]  +
add ecx 10h +
call loc_1012B59  +
pop ebp  +
retn 4  +
***
call __EH_prolog3_catch  +
mov esi ecx +
mov [ebp-18h] esi +
mov ecx [ebp+8] +
call sub_10119C1  +
test al al +
jz loc_1012C89  +
mov al [esi+8] +
xor ebx ebx +
cmp al bl +
jz loc_1012C13  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+8]  +
mov [esi+8] bl +
mov [ebp-14h] ebx +
mov [ebp-4] ebx +
push 74h  +
mov byte ptr [ebp-4] 1 +
call loc_1019E39  +
pop ecx  +
mov ecx eax +
mov [ebp-1Ch] ecx +
mov byte ptr [ebp-4] 2 +
cmp ecx ebx +
jz loc_1012C44  +
push 1  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1012805  +
jmp loc_1012C46  +
xor eax eax +
mov [ebp-14h] eax +
mov [ebp-4] ebx +
jmp loc_1012C5D  +
and dword ptr [ebp-4] 0 +
mov eax offset loc_1012C58 +
retn   +
mov esi [ebp-18h] +
xor ebx ebx +
cmp [ebp-14h] ebx +
jnz loc_1012C6C  +
push 8007000Eh  +
call loc_100B638  +
lea eax [ebp-14h] +
push eax  +
lea ecx [esi+10h] +
call sub_1011D2C  +
mov ecx esi +
call sub_101123E  +
lea ecx [ebp-14h] +
call sub_1011517  +
mov al 1 +
call __EH_epilog3  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
push 0FFFFFFFFh  +
push 0  +
lea ecx [esi+10h] +
call sub_10124EE  +
mov ecx esi +
pop esi  +
jmp sub_101123E  +
***
call __EH_prolog3_catch  +
mov esi ecx +
xor edi edi +
mov [ebp-18h] edi +
mov [ebp-4] edi +
mov [ebp-1Ch] edi +
push offset dword_1044E10  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 1 +
call sub_100BC7D  +
lea eax [ebp-18h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 2 +
call sub_1011612  +
mov ebx eax +
cmp ebx edi +
jl loc_101301A  +
mov eax [ebp-18h] +
push dword ptr [ebp+14h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+38h]  +
mov ebx eax +
cmp ebx edi +
jge loc_1012D4E  +
push 0C1500003h  +
push dword ptr [esi+2Ch]  +
call sub_10196C9  +
mov byte ptr [ebp-4] 3 +
push ebx  +
lea eax [ebp-14h] +
push offset aCouldNotSetCon  +
push eax  +
call sub_100C88F  +
add esp 14h +
push dword ptr [ebp-14h]  +
call ds:OutputDebugStringW  +
jmp loc_101301A  +
mov eax [ebp-20h] +
mov [ebp+14h] eax +
mov eax offset loc_1012D46 +
retn   +
mov ebx [ebp+14h] +
jmp loc_101301A  +
test byte ptr [ebp+14h] 1 +
jz loc_1012D5D  +
mov eax 409h +
mov [esi+30h] ax +
mov eax [ebp-18h] +
push dword ptr [ebp+18h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+40h]  +
mov ebx eax +
cmp ebx edi +
jge loc_1012D8E  +
push 0C1500003h  +
push dword ptr [esi+2Ch]  +
call sub_10196C9  +
mov byte ptr [ebp-4] 5 +
jmp loc_1012D1A  +
mov eax [ebp-24h] +
mov [ebp+14h] eax +
mov eax offset loc_1012D46 +
retn   +
mov edi [ebp+0Ch] +
mov eax [edi] +
cmp dword ptr [eax-0Ch] 0 +
jz loc_1012E39  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 7 +
call sub_100BB74  +
push dword ptr [edi]  +
mov dword ptr [ebp-4] 2 +
call sub_101C282  +
mov ebx eax +
test ebx ebx +
jge loc_1012DF4  +
push 0C1500028h  +
push dword ptr [esi+2Ch]  +
call sub_10196C9  +
push ebx  +
push dword ptr [edi]  +
mov byte ptr [ebp-4] 9 +
push offset aScratchdirSIsN  +
lea eax [ebp-14h] +
push eax  +
call sub_100C88F  +
add esp 18h +
jmp loc_1012D2C  +
mov eax [ebp-28h] +
mov [ebp+14h] eax +
mov eax offset loc_1012D46 +
retn   +
mov eax [ebp-18h] +
push dword ptr [ebp-1Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+18h]  +
mov ebx eax +
test ebx ebx +
jge loc_1012E39  +
push 0C1500003h  +
push dword ptr [esi+2Ch]  +
call sub_10196C9  +
push ebx  +
push dword ptr [edi]  +
mov byte ptr [ebp-4] 0Bh +
push offset aFailedToSetThe  +
jmp loc_1012DD7  +
mov eax [ebp-2Ch] +
mov [ebp+14h] eax +
mov eax offset loc_1012D46 +
retn   +
mov eax [ebp-30h] +
mov [ebp+14h] eax +
mov eax offset loc_1012D46 +
retn   +
push dword ptr [ebp+10h]  +
mov ecx esi +
push dword ptr [ebp+8]  +
call sub_1011F91  +
mov ebx eax +
test ebx ebx +
jge loc_1012EAE  +
push ebx  +
lea eax [ebp-14h] +
push offset aFailedToSetupL  +
push eax  +
mov byte ptr [ebp-4] 0Dh +
call sub_100C88F  +
add esp 0Ch +
push dword ptr [ebp-14h]  +
mov dword ptr [ebp-4] 2 +
call ds:OutputDebugStringW  +
push offset dword_1001418  +
push dword ptr [esi]  +
push dword ptr [esi+2Ch]  +
call sub_1011EAF  +
test eax eax +
jl loc_1012E8E  +
cmp eax 1 +
jnz loc_101301A  +
push 0C1500010h  +
push dword ptr [esi+2Ch]  +
call sub_10196C9  +
pop ecx  +
pop ecx  +
jmp loc_101301A  +
mov eax [ebp-34h] +
mov [ebp+14h] eax +
mov eax offset loc_1012D46 +
retn   +
mov eax [esi] +
mov ecx [eax] +
lea edx [esi+8] +
push edx  +
push eax  +
call dword ptr [ecx+20h]  +
mov ebx eax +
test ebx ebx +
jge loc_1012F5E  +
push offset dword_1044E10  +
lea ecx [ebp+18h] +
call sub_100BC7D  +
push ebx  +
push 0C1500003h  +
push dword ptr [esi+2Ch]  +
mov byte ptr [ebp-4] 0Fh +
call sub_10196C9  +
push ebx  +
lea eax [ebp+18h] +
push offset aFailedToGetT_0  +
push eax  +
mov byte ptr [ebp-4] 10h +
call sub_100C88F  +
mov dword ptr [ebp-4] 0Fh +
add esp 18h +
cmp dword ptr [esi+1Ch] 0 +
jz loc_1012F32  +
push ebx  +
push offset aCdismwrapperIn  +
push dword ptr [ebp+18h]  +
mov edi offset unk_1038AE8 +
push offset aSSHr0xX  +
push 2022h  +
push edi  +
call sub_101A9EC  +
mov ecx [esi+1Ch] +
add esp 18h +
push edi  +
push 1  +
call sub_101865E  +
mov ecx [ebp+18h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
jmp loc_101301A  +
mov eax [ebp-38h] +
mov [ebp+14h] eax +
mov eax offset loc_1012F4E +
retn   +
mov ecx [ebp+18h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
jmp loc_1012D46  +
lea edi [esi+18h] +
push edi  +
call sub_1012283  +
mov ebx eax +
test ebx ebx +
jge loc_1012FB7  +
push offset dword_1044E10  +
lea ecx [ebp+18h] +
call sub_100BC7D  +
push ebx  +
push 81500027h  +
push dword ptr [esi+2Ch]  +
mov byte ptr [ebp-4] 12h +
call sub_10196C9  +
push ebx  +
lea eax [ebp+18h] +
push offset aFailedToCrea_0  +
push eax  +
mov byte ptr [ebp-4] 13h +
call sub_100C88F  +
mov dword ptr [ebp-4] 12h +
jmp loc_1012EFD  +
mov eax [ebp-3Ch] +
mov [ebp+14h] eax +
mov eax offset loc_1012F4E +
retn   +
push dword ptr [esi]  +
mov ecx [edi] +
call sub_1010B49  +
mov ebx eax +
test ebx ebx +
jge loc_1013010  +
push offset dword_1044E10  +
lea ecx [ebp+18h] +
call sub_100BC7D  +
push ebx  +
push 81500027h  +
push dword ptr [esi+2Ch]  +
mov byte ptr [ebp-4] 15h +
call sub_10196C9  +
push ebx  +
lea eax [ebp+18h] +
push offset aFailedToConnec  +
push eax  +
mov byte ptr [ebp-4] 16h +
call sub_100C88F  +
mov dword ptr [ebp-4] 15h +
jmp loc_1012EFD  +
mov eax [ebp-40h] +
mov [ebp+14h] eax +
mov eax offset loc_1012F4E +
retn   +
push dword ptr [esi+28h]  +
mov ecx [edi] +
call sub_10108F6  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
push dword ptr [ebp-1Ch]  +
call ds:SysFreeString  +
mov eax [ebp-18h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_101303F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax ebx +
call __EH_epilog3  +
retn 14h  +
***
call __EH_prolog3_catch  +
mov edi ecx +
lea eax [ebp-14h] +
push eax  +
push dword ptr [ebp+8]  +
xor esi esi +
mov [ebp-14h] esi +
call sub_101C519  +
mov ebx eax +
cmp ebx esi +
jge loc_101310E  +
push offset dword_1044E10  +
lea ecx [ebp+8] +
call sub_100BC7D  +
push ebx  +
push 0C1500026h  +
push dword ptr [edi+2Ch]  +
mov [ebp-4] esi +
call sub_10196C9  +
push ebx  +
lea eax [ebp+8] +
push offset aFailedToTestTh  +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_100C88F  +
add esp 18h +
mov [ebp-4] esi +
cmp [edi+1Ch] esi +
jz loc_10130DF  +
push ebx  +
push offset aCdismwrapperVe  +
push dword ptr [ebp+8]  +
mov esi offset unk_1038AE8 +
push offset aSSHr0xX  +
push 2022h  +
push esi  +
call sub_101A9EC  +
mov ecx [edi+1Ch] +
add esp 18h +
push esi  +
push 1  +
call sub_101865E  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
jmp loc_1013229  +
mov eax [ebp-18h] +
mov [ebp+0Ch] eax +
mov eax offset loc_10130FB +
retn   +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov ebx [ebp+0Ch] +
jmp loc_1013229  +
cmp [ebp-14h] esi +
jz loc_101313A  +
push 0C1500022h  +
push dword ptr [edi+2Ch]  +
mov ebx 800700A1h +
call sub_10196C9  +
pop ecx  +
pop ecx  +
cmp [edi+1Ch] esi +
jz loc_1013229  +
push offset aErrorPathSpeci  +
jmp loc_101320B  +
push dword ptr [ebp+8]  +
mov ecx edi +
call sub_1010D92  +
test eax eax +
jz loc_10131BF  +
push dword ptr [ebp+10h]  +
mov ecx edi +
call sub_1010D92  +
test eax eax +
jz loc_10131BF  +
cmp [ebp+0Ch] esi +
jz loc_1013229  +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
call sub_1010D92  +
test eax eax +
jnz loc_1013229  +
mov ebx ds:GetLastError +
call ebx  +
cmp eax esi +
jle loc_1013189  +
and eax 0FFFFh +
or eax 80070000h +
cmp eax esi +
jge loc_101319F  +
call ebx  +
cmp eax esi +
jle loc_101319B  +
and eax 0FFFFh +
or eax 80070000h +
mov ebx eax +
jmp loc_10131A4  +
mov ebx 80004005h +
push 0C1500044h  +
push dword ptr [edi+2Ch]  +
call sub_10196C9  +
pop ecx  +
pop ecx  +
cmp [edi+1Ch] esi +
jz loc_1013229  +
push offset aFailedToAccess  +
jmp loc_101320B  +
mov ebx ds:GetLastError +
call ebx  +
cmp eax esi +
jle loc_10131D7  +
and eax 0FFFFh +
or eax 80070000h +
cmp eax esi +
jge loc_10131ED  +
call ebx  +
cmp eax esi +
jle loc_10131E9  +
and eax 0FFFFh +
or eax 80070000h +
mov ebx eax +
jmp loc_10131F2  +
mov ebx 80004005h +
push 0C1500008h  +
push dword ptr [edi+2Ch]  +
call sub_10196C9  +
pop ecx  +
pop ecx  +
cmp [edi+1Ch] esi +
jz loc_1013229  +
push offset aFailedToAcce_0  +
push 2022h  +
mov esi offset unk_1038AE8 +
push esi  +
call sub_101A9EC  +
mov ecx [edi+1Ch] +
add esp 0Ch +
push esi  +
push 1  +
call sub_101865E  +
mov eax ebx +
call __EH_epilog3  +
retn 0Ch  +
***
call __EH_prolog3_catch  +
mov edi ecx +
xor esi esi +
xor ebx ebx +
mov [ebp-14h] esi +
mov [ebp-4] esi +
mov [ebp-18h] esi +
mov byte ptr [ebp-4] 1 +
cmp [ebp+10h] esi +
jz loc_101337B  +
lea eax [ebp-14h] +
push eax  +
push dword ptr [ebp+10h]  +
call sub_101C32B  +
mov ebx eax +
cmp ebx esi +
jge loc_10132FF  +
push offset dword_1044E10  +
lea ecx [ebp+10h] +
call sub_100BC7D  +
push ebx  +
push 0C1500024h  +
push dword ptr [edi+2Ch]  +
mov byte ptr [ebp-4] 2 +
call sub_10196C9  +
push ebx  +
lea eax [ebp+10h] +
push offset aFailedToConver  +
push eax  +
mov byte ptr [ebp-4] 3 +
call sub_100C88F  +
add esp 18h +
cmp [edi+1Ch] esi +
mov dword ptr [ebp-4] 2 +
jz loc_10132E3  +
push ebx  +
push offset aCdismwrapperCo  +
push dword ptr [ebp+10h]  +
mov esi offset unk_1038AE8 +
push offset aSSHr0xX  +
push 2022h  +
push esi  +
call sub_101A9EC  +
mov ecx [edi+1Ch] +
add esp 18h +
push esi  +
push 1  +
call sub_101865E  +
mov ecx [ebp+10h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
jmp loc_1013462  +
mov eax [ebp-1Ch] +
mov [ebp+14h] eax +
mov eax offset loc_1013454 +
retn   +
push dword ptr [ebp-14h]  +
mov esi [ebp+8] +
mov eax [esi] +
push esi  +
call dword ptr [eax+40h]  +
mov ebx eax +
test ebx ebx +
jge loc_101337E  +
cmp ebx 800700A1h +
jz loc_1013332  +
cmp ebx 80070003h +
jz loc_1013332  +
push 0C1500024h  +
push dword ptr [edi+2Ch]  +
call sub_10196C9  +
pop ecx  +
pop ecx  +
jmp loc_1013345  +
push dword ptr [ebp-14h]  +
push 0C1500029h  +
push dword ptr [edi+2Ch]  +
call sub_10196C9  +
add esp 0Ch +
cmp dword ptr [edi+1Ch] 0 +
jz loc_1013462  +
push ebx  +
push dword ptr [ebp-14h]  +
mov esi offset unk_1038AE8 +
push offset aFailedToSetT_0  +
push 2022h  +
push esi  +
call sub_101A9EC  +
mov ecx [edi+1Ch] +
add esp 14h +
push esi  +
push 1  +
call sub_101865E  +
jmp loc_1013462  +
mov esi [ebp+8] +
cmp dword ptr [ebp+0Ch] 0 +
jnz loc_1013462  +
cmp dword ptr [ebp+14h] 0 +
jz loc_1013462  +
lea eax [ebp-18h] +
push eax  +
push dword ptr [ebp+14h]  +
call sub_101C32B  +
mov ebx eax +
test ebx ebx +
jge loc_10133F5  +
push offset dword_1044E10  +
lea ecx [ebp+10h] +
call sub_100BC7D  +
push ebx  +
push 0C1500024h  +
push dword ptr [edi+2Ch]  +
mov byte ptr [ebp-4] 5 +
call sub_10196C9  +
push ebx  +
lea eax [ebp+10h] +
push offset aFailedToConv_0  +
push eax  +
mov byte ptr [ebp-4] 6 +
call sub_100C88F  +
add esp 18h +
mov dword ptr [ebp-4] 5 +
cmp dword ptr [edi+1Ch] 0 +
jmp loc_10132B5  +
mov eax [ebp-20h] +
mov [ebp+14h] eax +
mov eax offset loc_1013454 +
retn   +
push dword ptr [ebp-18h]  +
mov eax [esi] +
push esi  +
call dword ptr [eax+44h]  +
mov ebx eax +
test ebx ebx +
jge loc_1013462  +
push offset dword_1044E10  +
lea ecx [ebp+10h] +
call sub_100BC7D  +
push ebx  +
push dword ptr [ebp+14h]  +
mov byte ptr [ebp-4] 8 +
push 0C1500024h  +
push dword ptr [edi+2Ch]  +
call sub_10196C9  +
push ebx  +
push dword ptr [ebp+14h]  +
lea eax [ebp+10h] +
push offset aFailedToSetT_1  +
push eax  +
mov byte ptr [ebp-4] 9 +
call sub_100C88F  +
add esp 20h +
mov dword ptr [ebp-4] 8 +
jmp loc_10133E0  +
mov eax [ebp-24h] +
mov [ebp+14h] eax +
mov eax offset loc_1013454 +
retn   +
mov ecx [ebp+10h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov ebx [ebp+14h] +
push dword ptr [ebp-18h]  +
mov esi ds:SysFreeString +
call esi  +
push dword ptr [ebp-14h]  +
call esi  +
mov eax ebx +
call __EH_epilog3  +
retn 10h  +
***
call __EH_prolog3_catch  +
mov edi ecx +
mov edx [ebp+8] +
xor eax eax +
cmp edx eax +
jnz loc_10134A2  +
mov eax 80070057h +
jmp loc_101373E  +
mov [ebp-18h] eax +
mov [ebp-4] eax +
mov [ebp-14h] eax +
xor ebx ebx +
inc ebx  +
mov [ebp-4] bl +
cmp [ebp+0Ch] eax +
jnz loc_101353B  +
mov eax [edi+8] +
lea esi [edi+34h] +
mov ecx [ebp+18h] +
test ecx ecx +
jz loc_10134C9  +
mov [ecx] eax +
test esi esi +
jz loc_10134D5  +
test eax eax +
jnz loc_10135D9  +
mov esi 80004005h +
push offset dword_1044E10  +
lea ecx [ebp+0Ch] +
mov [ebp+8] esi +
call sub_100BC7D  +
lea eax [ebp+0Ch] +
push offset aCommandMapAndP  +
push eax  +
mov byte ptr [ebp-4] 6 +
call sub_100C88F  +
pop ecx  +
pop ecx  +
mov dword ptr [ebp-4] 5 +
cmp dword ptr [edi+1Ch] 0 +
jz loc_1013536  +
push esi  +
push offset aCdismwrapperCh  +
push dword ptr [ebp+0Ch]  +
mov esi offset unk_1038AE8 +
push offset aSSHr0xX  +
push 2022h  +
push esi  +
call sub_101A9EC  +
mov ecx [edi+1Ch] +
add esp 18h +
push esi  +
push ebx  +
call sub_101865E  +
mov ecx [ebp+0Ch] +
jmp loc_10135B4  +
cmp [ebp+0Ch] ebx +
jnz loc_101354B  +
mov eax [edi+0Ch] +
lea esi [edi+4Ch] +
jmp loc_10134C0  +
mov esi 80070057h +
push offset dword_1044E10  +
lea ecx [ebp+10h] +
mov [ebp+8] esi +
call sub_100BC7D  +
push esi  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp+10h] +
push offset aInvalidArgumen  +
push eax  +
mov byte ptr [ebp-4] 3 +
call sub_100C88F  +
add esp 10h +
cmp dword ptr [edi+1Ch] 0 +
mov dword ptr [ebp-4] 2 +
jz loc_10135B1  +
push esi  +
push offset aCdismwrapperCh  +
push dword ptr [ebp+10h]  +
mov esi offset unk_1038AE8 +
push offset aSSHr0xX  +
push 2022h  +
push esi  +
call sub_101A9EC  +
mov ecx [edi+1Ch] +
add esp 18h +
push esi  +
push ebx  +
call sub_101865E  +
mov ecx [ebp+10h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
jmp loc_1013721  +
mov eax [ebp-1Ch] +
mov [ebp+8] eax +
mov eax offset loc_10135B1 +
retn   +
mov eax [ebp-20h] +
mov [ebp+8] eax +
mov eax offset loc_1013536 +
retn   +
mov eax [edx] +
lea ecx [ebp-18h] +
push ecx  +
push ebx  +
push edx  +
call dword ptr [eax+20h]  +
mov [ebp+8] eax +
test eax eax +
jge loc_1013635  +
push offset dword_1044E10  +
lea ecx [ebp+0Ch] +
call sub_100BC7D  +
push dword ptr [ebp+8]  +
lea eax [ebp+0Ch] +
push offset aFailedToGetT_1  +
push eax  +
mov byte ptr [ebp-4] 9 +
call sub_100C88F  +
mov dword ptr [ebp-4] 8 +
add esp 0Ch +
cmp dword ptr [edi+1Ch] 0 +
jz loc_1013536  +
push dword ptr [ebp+8]  +
jmp loc_101350C  +
mov eax [ebp-24h] +
mov [ebp+8] eax +
mov eax offset loc_1013536 +
retn   +
mov eax [ebp-18h] +
mov ecx [eax] +
lea edx [ebp-14h] +
push edx  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov [ebp+8] eax +
test eax eax +
jge loc_1013680  +
push offset dword_1044E10  +
lea ecx [ebp+0Ch] +
call sub_100BC7D  +
push dword ptr [ebp+8]  +
lea eax [ebp+0Ch] +
push offset aFailedToGetT_2  +
push eax  +
mov byte ptr [ebp-4] 0Ch +
call sub_100C88F  +
mov dword ptr [ebp-4] 0Bh +
jmp loc_1013614  +
mov eax [ebp-28h] +
mov [ebp+8] eax +
mov eax offset loc_1013536 +
retn   +
lea eax [ebp-14h] +
push eax  +
mov ecx esi +
call sub_1016236  +
mov [ebp+0Ch] eax +
test eax eax +
jnz loc_101369A  +
mov eax [ebp+10h] +
and dword ptr [eax] 0 +
jmp loc_1013700  +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
mov ecx esi +
call sub_1011E93  +
mov eax [eax] +
mov ecx [ebp+10h] +
mov [ecx] eax +
test eax eax +
jnz loc_10136FA  +
mov esi 80004005h +
push offset dword_1044E10  +
lea ecx [ebp+0Ch] +
mov [ebp+8] esi +
call sub_100BC7D  +
push esi  +
push dword ptr [ebp-14h]  +
lea eax [ebp+0Ch] +
push offset aFailedToRetrie  +
push eax  +
mov byte ptr [ebp-4] 0Fh +
call sub_100C88F  +
add esp 10h +
mov dword ptr [ebp-4] 0Eh +
jmp loc_1013505  +
mov eax [ebp-2Ch] +
mov [ebp+8] eax +
mov eax offset loc_1013536 +
retn   +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov ecx [ebp+14h] +
test ecx ecx +
jz loc_1013710  +
mov eax [ebp-14h] +
and dword ptr [ebp-14h] 0 +
mov [ecx] eax +
mov eax [ebp-18h] +
test eax eax +
jz loc_1013721  +
and dword ptr [ebp-18h] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push dword ptr [ebp-14h]  +
call ds:SysFreeString  +
mov eax [ebp-18h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_101373B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+8] +
call __EH_epilog3  +
retn 14h  +
***
call __EH_prolog3_catch  +
mov esi ecx +
mov edi [ebp+0Ch] +
push dword ptr [ebp+8]  +
and dword ptr [edi] 0 +
lea ecx [ebp-11Ch] +
call sub_1011DF2  +
push dword ptr [eax]  +
call ds:SysAllocString  +
mov [ebp-14h] eax +
lea eax [ebp-118h] +
cmp [ebp-11Ch] eax +
jz loc_1013796  +
push dword ptr [ebp-11Ch]  +
call ds:__imp_free  +
pop ecx  +
mov eax [esi+8] +
mov ecx [eax] +
push edi  +
push dword ptr [ebp-14h]  +
push eax  +
call dword ptr [ecx+28h]  +
mov ebx eax +
xor edi edi +
cmp ebx edi +
jge loc_1013833  +
push offset dword_1044E10  +
lea ecx [ebp+0Ch] +
call sub_100BC7D  +
push ebx  +
push dword ptr [ebp+8]  +
lea eax [ebp+0Ch] +
push offset aFailedToGetT_3  +
mov [ebp-4] edi +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_100C88F  +
add esp 10h +
mov [ebp-4] edi +
cmp [esi+1Ch] edi +
jz loc_101380C  +
push ebx  +
push offset aCdismwrapperGe  +
push dword ptr [ebp+0Ch]  +
mov edi offset unk_1038AE8 +
push offset aSSHr0xX  +
push 2022h  +
push edi  +
call sub_101A9EC  +
mov ecx [esi+1Ch] +
add esp 18h +
push edi  +
push 1  +
call sub_101865E  +
mov ecx [ebp+0Ch] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
jmp loc_1013833  +
mov eax [ebp-18h] +
mov [ebp+8] eax +
mov eax offset loc_1013825 +
retn   +
mov ecx [ebp+0Ch] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov ebx [ebp+8] +
cmp dword ptr [ebp-14h] 0 +
jz loc_1013842  +
push dword ptr [ebp-14h]  +
call ds:SysFreeString  +
mov eax ebx +
call __EH_epilog3  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_4]  +
mov ebx ecx +
push [ebp+arg_0]  +
call sub_1016C49  +
and dword ptr [eax+8] 0 +
xor edi edi +
inc edi  +
mov [ebp+arg_4] eax +
mov esi eax +
cmp eax [ebx] +
jz loc_1013922  +
mov eax [esi+14h] +
cmp dword ptr [eax+8] 0 +
jnz loc_1013922  +
mov edx [eax+14h] +
mov ecx [edx+0Ch] +
cmp eax ecx +
jnz loc_10138CC  +
mov ecx [edx+10h] +
test ecx ecx +
jz loc_101389E  +
cmp dword ptr [ecx+8] 0 +
jz loc_10138D6  +
cmp esi [eax+10h] +
jnz loc_10138AD  +
mov esi eax +
push esi  +
mov ecx ebx +
call sub_1011040  +
mov eax [esi+14h] +
mov [eax+8] edi +
mov eax [esi+14h] +
mov eax [eax+14h] +
and dword ptr [eax+8] 0 +
mov eax [esi+14h] +
push dword ptr [eax+14h]  +
mov ecx ebx +
call sub_1015F06  +
jmp loc_101391A  +
test ecx ecx +
jz loc_10138EE  +
cmp dword ptr [ecx+8] 0 +
jnz loc_10138EE  +
mov [eax+8] edi +
mov [ecx+8] edi +
mov eax [esi+14h] +
mov eax [eax+14h] +
and dword ptr [eax+8] 0 +
mov eax [esi+14h] +
mov esi [eax+14h] +
jmp loc_101391A  +
cmp esi [eax+0Ch] +
jnz loc_10138FD  +
mov esi eax +
push esi  +
mov ecx ebx +
call sub_1015F06  +
mov eax [esi+14h] +
mov [eax+8] edi +
mov eax [esi+14h] +
mov eax [eax+14h] +
and dword ptr [eax+8] 0 +
mov eax [esi+14h] +
push dword ptr [eax+14h]  +
mov ecx ebx +
call sub_1011040  +
cmp esi [ebx] +
jnz loc_101387A  +
mov eax [ebx] +
mov [eax+8] edi +
mov eax [ebx] +
add eax 14h +
push eax  +
mov ecx ebx +
call sub_1015FD4  +
mov eax [ebp+arg_4] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
cmp eax [esi+14h] +
jz loc_1013955  +
push eax  +
call sub_10128FF  +
mov ecx [esi+0Ch] +
and dword ptr [esi+4] 0 +
call sub_10110E3  +
mov eax [esi+14h] +
and dword ptr [esi+0Ch] 0 +
and dword ptr [esi+8] 0 +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1002B80 +
call sub_1012C96  +
lea ecx [esi+10h] +
call sub_10124CA  +
push dword ptr [esi+4]  +
mov dword ptr [esi] offset off_1002A50 +
call ds:__imp_free  +
pop ecx  +
pop esi  +
retn   +
***
call __EH_prolog3_catch  +
lea ecx [ebp-34h] +
call sub_1012935  +
lea eax [ebp-98h] +
xor ebx ebx +
mov [ebp-4] ebx +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_1012450  +
push ebx  +
push 1  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 2 +
call sub_1012BDF  +
cmp al bl +
lea ecx [ebp-98h] +
setz byte ptr [ebp-11h]  +
mov byte ptr [ebp-4] 1 +
call sub_10123BA  +
cmp [ebp-11h] bl +
jz loc_1013A0C  +
lea ecx [ebp-34h] +
call sub_1013975  +
mov eax 8007053Ah +
jmp loc_1013B05  +
lea eax [ebp-98h] +
push eax  +
call sub_1012421  +
push ebx  +
push 1  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 3 +
call sub_1012BDF  +
cmp al bl +
lea ecx [ebp-98h] +
setz byte ptr [ebp-11h]  +
mov byte ptr [ebp-4] 1 +
call sub_10123BA  +
cmp [ebp-11h] bl +
jnz loc_10139FA  +
lea eax [ebp-98h] +
push eax  +
call sub_10123F7  +
push ebx  +
push 1  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 4 +
call sub_1012BDF  +
cmp al bl +
lea ecx [ebp-98h] +
setz byte ptr [ebp-11h]  +
mov byte ptr [ebp-4] 1 +
call sub_10123BA  +
cmp [ebp-11h] bl +
jnz loc_10139FA  +
lea eax [ebp-98h] +
push eax  +
call sub_10123F7  +
mov esi [ebp+8] +
push ebx  +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 5 +
call sub_1011AB7  +
lea ecx [ebp-98h] +
mov byte ptr [ebp-4] 1 +
call sub_10123BA  +
lea eax [ebp-98h] +
push eax  +
call sub_1012421  +
push ebx  +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 6 +
call sub_1011B7C  +
lea ecx [ebp-98h] +
mov byte ptr [ebp-4] 1 +
call sub_10123BA  +
push ebx  +
lea eax [ebp-34h] +
push eax  +
mov ecx esi +
call sub_1011C41  +
push dword ptr [esi+4]  +
call ds:IsValidSecurityDescriptor  +
lea ecx [ebp-34h] +
test eax eax +
jz loc_10139FD  +
call sub_1013975  +
xor eax eax +
jmp loc_1013B05  +
mov eax offset loc_1013AFA +
retn   +
lea ecx [ebp-34h] +
call sub_1013975  +
mov eax [ebp-38h] +
call __EH_epilog3  +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
xor edi edi +
mov dword ptr [ebp-14h] offset off_1002A6C +
mov [ebp-10h] edi +
mov eax [ebp+8] +
mov [esi+28h] eax +
mov eax [ebp+0Ch] +
mov [esi+2Ch] eax +
lea eax [ebp-14h] +
push eax  +
mov [ebp-4] edi +
call sub_10139A4  +
mov ebx eax +
cmp ebx edi +
jge loc_1013B51  +
push 0C150002Ch  +
jmp loc_1013BBA  +
push edi  +
push edi  +
push edi  +
push 3  +
push 3  +
push edi  +
push edi  +
push 0FFFFFFFFh  +
push dword ptr [ebp-10h]  +
call ds:CoInitializeSecurity  +
mov ebx eax +
cmp ebx edi +
jl loc_1013B4A  +
mov ecx esi +
call sub_1012578  +
mov ebx eax +
cmp ebx edi +
jge loc_1013BC4  +
cmp ebx 800702E4h +
jnz loc_1013B87  +
push 0C150002Ah  +
jmp loc_1013BBA  +
cmp ebx 800700C1h +
jnz loc_1013BA6  +
push offset aDismcore_dll  +
push 0C150002Dh  +
push dword ptr [esi+2Ch]  +
call sub_10196C9  +
add esp 0Ch +
jmp loc_1013BC4  +
cmp ebx 8007007Eh +
jnz loc_1013BB5  +
push 0C150002Bh  +
jmp loc_1013BBA  +
push 0C150003Ah  +
push dword ptr [esi+2Ch]  +
call sub_10196C9  +
pop ecx  +
pop ecx  +
lea ecx [ebp-14h] +
mov dword ptr [ebp-14h] offset off_1002A6C +
call sub_1011417  +
mov eax ebx +
call __EH_epilog3  +
retn 8  +
***
call __EH_prolog3_catch  +
mov edi ecx +
xor ebx ebx +
mov [ebp-28h] ebx +
mov [ebp-18h] ebx +
mov [ebp-4] ebx +
mov [ebp-24h] ebx +
mov [ebp-30h] ebx +
mov [ebp-1Ch] ebx +
mov esi offset dword_1044E10 +
push esi  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 3 +
call sub_100BC7D  +
mov [ebp-14h] ebx +
push dword ptr [ebp+8]  +
mov byte ptr [ebp-4] 5 +
call sub_10185F8  +
mov [ebp-2Ch] eax +
cmp [ebp+14h] ebx +
jz loc_1013D61  +
lea eax [ebp-24h] +
push eax  +
push offset aFoldermanager  +
mov ecx edi +
call sub_101374B  +
mov ebx eax +
test ebx ebx +
jge loc_1013CF3  +
push esi  +
lea ecx [ebp+14h] +
call sub_100BC7D  +
push ebx  +
push 0C1500025h  +
push dword ptr [edi+2Ch]  +
mov byte ptr [ebp-4] 6 +
call sub_10196C9  +
push ebx  +
lea eax [ebp+14h] +
push offset aFailedToGetT_4  +
push eax  +
mov byte ptr [ebp-4] 7 +
call sub_100C88F  +
mov dword ptr [ebp-4] 6 +
add esp 18h +
cmp dword ptr [edi+1Ch] 0 +
jz loc_1013CB5  +
push ebx  +
push offset aCdismwrapperVa  +
push dword ptr [ebp+14h]  +
mov esi offset unk_1038AE8 +
push offset aSSHr0xX  +
push 2022h  +
push esi  +
call sub_101A9EC  +
mov ecx [edi+1Ch] +
add esp 18h +
push esi  +
push 1  +
call sub_101865E  +
mov ecx [ebp+14h] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 5 +
call sub_100B8FC  +
jmp loc_1013FA8  +
mov eax [ebp-34h] +
mov [ebp+8] eax +
mov dword ptr [ebp-4] 6 +
mov eax offset loc_1013CDC +
retn   +
mov ecx [ebp+14h] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 5 +
call sub_100B8FC  +
mov ebx [ebp+8] +
jmp loc_1013FA8  +
mov ecx [ebp-2Ch] +
mov eax [ecx] +
lea edx [ebp-18h] +
push edx  +
push dword ptr [ebp-24h]  +
call dword ptr [eax]  +
mov ebx eax +
test ebx ebx +
jge loc_1013DCB  +
push esi  +
lea ecx [ebp+14h] +
call sub_100BC7D  +
push ebx  +
push dword ptr [ebp+8]  +
mov byte ptr [ebp-4] 9 +
push 0C1500023h  +
push dword ptr [edi+2Ch]  +
call sub_10196C9  +
push ebx  +
push dword ptr [ebp+8]  +
lea eax [ebp+14h] +
push offset aFailedToMountT  +
push eax  +
mov byte ptr [ebp-4] 0Ah +
call sub_100C88F  +
add esp 20h +
mov dword ptr [ebp-4] 9 +
jmp loc_1013C83  +
mov eax [ebp-38h] +
mov [ebp+8] eax +
mov dword ptr [ebp-4] 9 +
mov eax offset loc_1013CDC +
retn   +
mov ecx [edi+8] +
mov edx [eax] +
lea ebx [ebp-18h] +
push ebx  +
push ecx  +
mov ecx eax +
call dword ptr [edx+4]  +
test eax eax +
jge loc_1013DCB  +
push esi  +
lea ecx [ebp+14h] +
mov ebx 0C150003Ah +
call sub_100BC7D  +
push ebx  +
push dword ptr [ebp+8]  +
mov byte ptr [ebp-4] 0Ch +
push ebx  +
push dword ptr [edi+2Ch]  +
call sub_10196C9  +
push ebx  +
push dword ptr [ebp+8]  +
lea eax [ebp+14h] +
push offset aNoProvidersCan  +
push eax  +
mov byte ptr [ebp-4] 0Dh +
call sub_100C88F  +
add esp 20h +
mov dword ptr [ebp-4] 0Ch +
jmp loc_1013C83  +
mov eax [ebp-3Ch] +
mov [ebp+8] eax +
mov dword ptr [ebp-4] 0Ch +
mov eax offset loc_1013CDC +
retn   +
push dword ptr [ebp+10h]  +
lea ecx [ebp-1Ch] +
call sub_1011794  +
mov ebx eax +
test ebx ebx +
jge loc_1013E29  +
push esi  +
lea ecx [ebp+14h] +
call sub_100BC7D  +
push ebx  +
push 0C1500003h  +
push dword ptr [edi+2Ch]  +
mov byte ptr [ebp-4] 0Fh +
call sub_10196C9  +
push ebx  +
lea eax [ebp+14h] +
push offset aUnableToAlloca  +
push eax  +
mov byte ptr [ebp-4] 10h +
call sub_100C88F  +
mov dword ptr [ebp-4] 0Fh +
jmp loc_1013C80  +
mov eax [ebp-40h] +
mov [ebp+8] eax +
mov dword ptr [ebp-4] 0Fh +
mov eax offset loc_1013CDC +
retn   +
push dword ptr [ebp-1Ch]  +
call ds:SysStringLen  +
test eax eax +
jbe loc_1013F2F  +
lea eax [ebp-20h] +
push eax  +
push offset aSystem32Dism  +
push dword ptr [ebp-1Ch]  +
call sub_101C3C6  +
mov ebx eax +
test ebx ebx +
jge loc_1013E9E  +
push esi  +
lea ecx [ebp+14h] +
call sub_100BC7D  +
push ebx  +
push 0C1500023h  +
push dword ptr [edi+2Ch]  +
mov byte ptr [ebp-4] 12h +
call sub_10196C9  +
push ebx  +
lea eax [ebp+14h] +
push offset aFailedToAppend  +
push eax  +
mov byte ptr [ebp-4] 13h +
call sub_100C88F  +
mov dword ptr [ebp-4] 12h +
jmp loc_1013C80  +
mov eax [ebp-44h] +
mov [ebp+8] eax +
mov dword ptr [ebp-4] 12h +
mov eax offset loc_1013CDC +
retn   +
push dword ptr [ebp-20h]  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 15h +
call sub_100BB74  +
mov eax [ebp-18h] +
push dword ptr [ebp-14h]  +
mov ecx [eax] +
push eax  +
mov dword ptr [ebp-4] 5 +
call dword ptr [ecx+30h]  +
mov ebx eax +
test ebx ebx +
jge loc_1013F2F  +
push esi  +
lea ecx [ebp+14h] +
call sub_100BC7D  +
push ebx  +
push dword ptr [ebp-14h]  +
mov byte ptr [ebp-4] 17h +
push 0C1500023h  +
push dword ptr [edi+2Ch]  +
call sub_10196C9  +
push ebx  +
push dword ptr [ebp-14h]  +
lea eax [ebp+14h] +
push offset aFailedToSetPro  +
push eax  +
mov byte ptr [ebp-4] 18h +
call sub_100C88F  +
add esp 20h +
mov dword ptr [ebp-4] 17h +
jmp loc_1013C83  +
mov eax [ebp-48h] +
mov [ebp+8] eax +
mov dword ptr [ebp-4] 17h +
mov eax offset loc_1013CDC +
retn   +
mov eax [ebp-4Ch] +
mov [ebp+8] eax +
mov dword ptr [ebp-4] 5 +
mov eax offset loc_1013CEB +
retn   +
mov eax [edi] +
mov ecx [eax] +
lea edx [ebp-28h] +
push edx  +
push dword ptr [ebp-18h]  +
push eax  +
call dword ptr [ecx+30h]  +
mov ebx eax +
test ebx ebx +
jge loc_1013F9A  +
cmp dword ptr [edi+1Ch] 0 +
jz loc_1013F71  +
push ebx  +
push dword ptr [ebp+8]  +
mov esi offset unk_1038AE8 +
push offset aFailedToVerify  +
push 2022h  +
push esi  +
call sub_101A9EC  +
mov ecx [edi+1Ch] +
add esp 14h +
push esi  +
push 1  +
call sub_101865E  +
push offset dword_1001418  +
push dword ptr [edi]  +
push dword ptr [edi+2Ch]  +
call sub_1011EAF  +
test eax eax +
jl loc_1013F89  +
cmp eax 1 +
jnz loc_1013FA8  +
push 0C1500003h  +
push dword ptr [edi+2Ch]  +
call sub_10196C9  +
pop ecx  +
pop ecx  +
jmp loc_1013FA8  +
mov ecx [ebp+18h] +
xor eax eax +
cmp [ebp-28h] ax +
setnz al  +
mov [ecx] eax +
mov ecx [ebp-2Ch] +
test ecx ecx +
jz loc_1013FB6  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+8]  +
push dword ptr [ebp-14h]  +
mov esi ds:SysFreeString +
call esi  +
mov ecx [ebp-20h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
push dword ptr [ebp-1Ch]  +
call esi  +
push 0  +
call esi  +
mov eax [ebp-24h] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_1013FE6  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-18h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_1013FF7  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax ebx +
call __EH_epilog3  +
retn 14h  +
***
call __EH_prolog3_catch  +
mov edi ecx +
or dword ptr [ebp-20h] 0FFFFFFFFh +
push offset aOsservices  +
lea ecx [ebp-1Ch] +
call loc_10116D2  +
xor esi esi +
mov [ebp-4] esi +
mov [ebp-18h] esi +
mov [ebp-14h] esi +
mov byte ptr [ebp-4] 2 +
cmp [ebp+10h] esi +
jnz loc_1014058  +
cmp [ebp+14h] esi +
jnz loc_1014058  +
cmp [ebp+0Ch] esi +
jz loc_1014058  +
xor ebx ebx +
push dword ptr [ebp-1Ch]  +
call ds:SysFreeString  +
mov eax ebx +
call __EH_epilog3  +
retn 10h  +
mov eax [ebp+8] +
mov ecx [eax] +
lea edx [ebp-18h] +
push edx  +
push dword ptr [ebp-1Ch]  +
push eax  +
call dword ptr [ecx+28h]  +
mov ebx eax +
cmp ebx esi +
jge loc_101410F  +
cmp ebx 8007007Eh +
jnz loc_10140D5  +
cmp [ebp+10h] esi +
jnz loc_10140D5  +
cmp [edi+1Ch] esi +
jz loc_10140A7  +
push offset aCouldNotFindTh  +
push 2022h  +
mov esi offset unk_1038AE8 +
push esi  +
call sub_101A9EC  +
mov ecx [edi+1Ch] +
add esp 0Ch +
push esi  +
push 1  +
call sub_101865E  +
xor ebx ebx +
inc ebx  +
mov eax [ebp-14h] +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_10140BB  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-18h] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_1014045  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1014045  +
push 0C1500024h  +
push dword ptr [edi+2Ch]  +
call sub_10196C9  +
pop ecx  +
pop ecx  +
cmp [edi+1Ch] esi +
jz loc_10140AA  +
push ebx  +
push offset aFailedToGetT_6  +
push 2022h  +
mov esi offset unk_1038AE8 +
push esi  +
call sub_101A9EC  +
mov ecx [edi+1Ch] +
add esp 10h +
push esi  +
push 1  +
call sub_101865E  +
jmp loc_10140AA  +
mov eax [ebp-18h] +
mov ecx [eax] +
lea edx [ebp-14h] +
push edx  +
push offset dword_1001458  +
push eax  +
call dword ptr [ecx]  +
mov ebx eax +
cmp ebx esi +
jge loc_10141CD  +
push offset dword_1044E10  +
lea ecx [ebp+10h] +
call sub_100BC7D  +
push ebx  +
push 0C1500024h  +
push dword ptr [edi+2Ch]  +
mov byte ptr [ebp-4] 3 +
call sub_10196C9  +
push ebx  +
lea eax [ebp+10h] +
push offset aFailedToGetT_7  +
push eax  +
mov byte ptr [ebp-4] 4 +
call sub_100C88F  +
mov dword ptr [ebp-4] 3 +
add esp 18h +
cmp [edi+1Ch] esi +
jz loc_1014197  +
push ebx  +
push offset aCdismwrapper_0  +
push dword ptr [ebp+10h]  +
mov esi offset unk_1038AE8 +
push offset aSSHr0xX  +
push 2022h  +
push esi  +
call sub_101A9EC  +
mov ecx [edi+1Ch] +
add esp 18h +
push esi  +
push 1  +
call sub_101865E  +
mov ecx [ebp+10h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
jmp loc_10140AA  +
mov eax [ebp-24h] +
mov [ebp+0Ch] eax +
mov dword ptr [ebp-4] 3 +
mov eax offset loc_10141BA +
retn   +
mov ecx [ebp+10h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov ebx [ebp+0Ch] +
jmp loc_10140AA  +
push dword ptr [ebp+14h]  +
mov ecx edi +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp-14h]  +
call sub_1013238  +
mov ebx eax +
cmp ebx esi +
jl loc_10140AA  +
push dword ptr [ebp-14h]  +
mov ecx edi +
call sub_1012128  +
mov ebx eax +
cmp ebx esi +
jl loc_10140AA  +
mov eax [ebp-14h] +
mov ecx [eax] +
lea edx [ebp-20h] +
push edx  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov ebx eax +
cmp ebx esi +
jge loc_1014262  +
push offset dword_1044E10  +
lea ecx [ebp+10h] +
call sub_100BC7D  +
push ebx  +
push 0C1500024h  +
push dword ptr [edi+2Ch]  +
mov byte ptr [ebp-4] 6 +
call sub_10196C9  +
push ebx  +
lea eax [ebp+10h] +
push offset aFailedToQueryT  +
push eax  +
mov byte ptr [ebp-4] 7 +
call sub_100C88F  +
mov dword ptr [ebp-4] 6 +
jmp loc_1014163  +
mov eax [ebp-28h] +
mov [ebp+0Ch] eax +
mov dword ptr [ebp-4] 6 +
mov eax offset loc_10141BA +
retn   +
cmp dword ptr [ebp-20h] 1 +
jnz loc_10140AA  +
cmp [ebp+0Ch] esi +
jnz loc_10140AA  +
push 0C150001Ch  +
push dword ptr [edi+2Ch]  +
call sub_10196C9  +
pop ecx  +
pop ecx  +
cmp [edi+1Ch] esi +
jz loc_10142AC  +
push offset aInvalidCommand  +
push 2022h  +
mov esi offset unk_1038AE8 +
push esi  +
call sub_101A9EC  +
mov ecx [edi+1Ch] +
add esp 0Ch +
push esi  +
push 1  +
call sub_101865E  +
mov eax [ebp-14h] +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_10142BD  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-18h] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_10142CE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ebx 80070057h +
jmp loc_1014045  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
push dword ptr [esi]  +
mov ecx esi +
call sub_1015F56  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_1014322  +
and [ebp+arg_0] 0 +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_10117BA  +
push eax  +
lea ecx [ebp+arg_0] +
call sub_10161FA  +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_101431C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp [ebp+var_4] 0 +
jnz loc_10142F7  +
mov ecx esi +
call sub_1013943  +
xor eax eax +
pop esi  +
leave   +
retn 4  +
***
call __EH_prolog3_catch  +
mov edi ecx +
xor eax eax +
mov [ebp-20h] eax +
mov [ebp-4] eax +
mov [ebp-1Ch] eax +
mov [ebp-18h] eax +
lea eax [ebp-20h] +
push eax  +
mov ebx offset aCompatibilityM +
push ebx  +
mov byte ptr [ebp-4] 1 +
call sub_101374B  +
mov esi eax +
mov [ebp-14h] esi +
test esi esi +
jge loc_10143EC  +
push offset dword_1044E10  +
lea ecx [ebp+1Ch] +
call sub_100BC7D  +
push esi  +
lea eax [ebp+1Ch] +
push offset aFailedToGetDow  +
push eax  +
mov byte ptr [ebp-4] 3 +
call sub_100C88F  +
add esp 0Ch +
cmp dword ptr [edi+1Ch] 0 +
mov dword ptr [ebp-4] 2 +
jz loc_10143C9  +
push esi  +
push offset aCdismwrapperEx  +
push dword ptr [ebp+1Ch]  +
mov esi offset unk_1038AE8 +
push offset aSSHr0xX  +
push 2022h  +
push esi  +
call sub_101A9EC  +
mov ecx [edi+1Ch] +
add esp 18h +
push esi  +
push 1  +
call sub_101865E  +
mov ecx [ebp+1Ch] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
jmp loc_10144E0  +
mov eax [ebp-24h] +
mov [ebp-14h] eax +
mov dword ptr [ebp-4] 2 +
mov eax offset loc_10143C9 +
retn   +
mov eax [ebp-20h] +
mov ecx [eax] +
lea edx [ebp-1Ch] +
push edx  +
mov esi offset dword_10014A8 +
push esi  +
push eax  +
call dword ptr [ecx]  +
mov [ebp-14h] eax +
test eax eax +
jge loc_1014450  +
push offset dword_1044E10  +
lea ecx [ebp+1Ch] +
call sub_100BC7D  +
push ebx  +
lea eax [ebp+1Ch] +
push offset aSProviderDoesN  +
push eax  +
mov byte ptr [ebp-4] 6 +
call sub_100C88F  +
add esp 0Ch +
cmp dword ptr [edi+1Ch] 0 +
mov dword ptr [ebp-4] 5 +
jz loc_10143C9  +
push dword ptr [ebp-14h]  +
jmp loc_101439E  +
mov eax [ebp-28h] +
mov [ebp-14h] eax +
mov dword ptr [ebp-4] 5 +
mov eax offset loc_10143C9 +
retn   +
push dword ptr [ebp+1Ch]  +
mov eax [ebp-1Ch] +
push dword ptr [ebp+18h]  +
mov ecx [eax] +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov [ebp-14h] eax +
test eax eax +
jge loc_10144E0  +
push esi  +
push dword ptr [ebp-1Ch]  +
push dword ptr [edi+2Ch]  +
call sub_1011EAF  +
test eax eax +
jl loc_1014487  +
cmp eax 1 +
jnz loc_10144E0  +
mov eax [ebp-14h] +
and eax 1FFF0000h +
cmp eax 70000h +
jnz loc_10144D1  +
xor esi esi +
push esi  +
push esi  +
lea eax [ebp-18h] +
push eax  +
movzx eax word ptr [ebp-14h] +
push 400h  +
push eax  +
push esi  +
push 1300h  +
call ds:FormatMessageW  +
test eax eax +
jz loc_10144D1  +
push dword ptr [ebp-18h]  +
mov ecx [edi+2Ch] +
call sub_1019753  +
push dword ptr [ebp-18h]  +
call ds:LocalFree  +
mov [ebp-18h] esi +
jmp loc_10144E0  +
push 0C150001Eh  +
push dword ptr [edi+2Ch]  +
call sub_10196C9  +
pop ecx  +
pop ecx  +
mov eax [ebp-1Ch] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_10144F1  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-20h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_1014502  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-14h] +
call __EH_epilog3  +
retn 18h  +
***
call __EH_prolog3_catch  +
mov esi ecx +
mov ebx [ebp+8] +
xor edi edi +
mov [ebx] edi +
cmp [esi+10h] edi +
jnz loc_1014533  +
xor eax eax +
jmp loc_1014626  +
lea eax [esi+4Ch] +
push eax  +
call sub_10142DD  +
cmp eax edi +
jge loc_101456B  +
cmp [esi+1Ch] edi +
jz loc_101456B  +
push eax  +
push offset aFailedToReleas  +
push 2022h  +
mov edi offset unk_1038AE8 +
push edi  +
call sub_101A9EC  +
mov ecx [esi+1Ch] +
add esp 10h +
push edi  +
push 2  +
call sub_101865E  +
jmp loc_1014570  +
mov edi offset unk_1038AE8 +
mov ecx [esi+10h] +
mov eax [esi] +
mov edx [eax] +
push ebx  +
push ecx  +
push eax  +
call dword ptr [edx+28h]  +
push offset dword_1001418  +
push dword ptr [esi]  +
mov ebx eax +
push dword ptr [esi+2Ch]  +
call sub_1011EAF  +
test ebx ebx +
jge loc_1014617  +
push offset dword_1044E10  +
lea ecx [ebp+8] +
call sub_100BC7D  +
and dword ptr [ebp-4] 0 +
push ebx  +
lea eax [ebp+8] +
push offset aFailedToCloseT  +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_100C88F  +
and dword ptr [ebp-4] 0 +
add esp 0Ch +
cmp dword ptr [esi+1Ch] 0 +
jz loc_10145EE  +
push ebx  +
push offset aCdismwrapperCl  +
push dword ptr [ebp+8]  +
push offset aSSHr0xX  +
push 2022h  +
push edi  +
call sub_101A9EC  +
mov ecx [esi+1Ch] +
add esp 18h +
push edi  +
push 1  +
call sub_101865E  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
jmp loc_1014624  +
mov eax [ebp-18h] +
mov [ebp-14h] eax +
mov eax offset loc_1014607 +
retn   +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov ebx [ebp-14h] +
jmp loc_1014624  +
mov eax [esi+10h] +
and dword ptr [esi+10h] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax ebx +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
lea esi [ecx+4Ch] +
push dword ptr [esi]  +
mov ecx esi +
call sub_1015F56  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_101466C  +
and [ebp+var_8] 0 +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_10117BA  +
push eax  +
lea ecx [ebp+var_8] +
call sub_10161FA  +
cmp [ebp+var_4] 0 +
jnz loc_101464E  +
mov ecx esi +
call sub_1013943  +
xor eax eax +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1013943  +
mov esi [esi+14h] +
test esi esi +
jz loc_10146A0  +
push esi  +
call ds:__imp_free  +
pop ecx  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1013975  +
test byte ptr [ebp+8] 1 +
jz loc_10146C1  +
push esi  +
call sub_1019EA8  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
xor eax eax +
push esi  +
mov esi ecx +
mov [esi] eax +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] eax +
mov [esi+10h] eax +
lea ecx [esi+24h] +
mov [esi+14h] eax +
mov [esi+18h] eax +
mov [esi+1Ch] eax +
mov [esi+20h] eax +
call sub_100BD92  +
mov eax 400h +
push 0Ah  +
lea ecx [esi+34h] +
mov [esi+30h] ax +
call sub_1016CD6  +
push 0Ah  +
lea ecx [esi+4Ch] +
call sub_1016CD6  +
mov eax esi +
pop esi  +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
mov ecx [esi+18h] +
mov dword ptr [ebp-4] 7 +
test ecx ecx +
jz loc_101473E  +
call sub_1010BB1  +
mov eax [esi+18h] +
test eax eax +
jz loc_101474F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi+18h] 0 +
mov ecx [esi+1Ch] +
test ecx ecx +
jz loc_1014761  +
push 1  +
call sub_1010D29  +
and dword ptr [esi+1Ch] 0 +
mov ecx [esi+20h] +
test ecx ecx +
jz loc_1014773  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+8]  +
and dword ptr [esi+20h] 0 +
lea ecx [esi+4Ch] +
call sub_1014687  +
lea ecx [esi+34h] +
call sub_1014687  +
mov ecx [esi+24h] +
sub ecx 10h +
call sub_100B8FC  +
mov eax [esi+10h] +
mov byte ptr [ebp-4] 3 +
test eax eax +
jz loc_101479F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+0Ch] +
mov byte ptr [ebp-4] 2 +
test eax eax +
jz loc_10147B0  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+8] +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_10147C1  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+4] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_10147D2  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov esi [esi] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jz loc_10147E2  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
call __EH_epilog3  +
retn   +
***
call __EH_prolog3_catch  +
mov eax [ebp-60h] +
mov [ebp-14h] eax +
mov dword ptr [ebp-4] 5 +
mov eax offset loc_1014C84 +
retn   +
***
call __EH_prolog3_catch  +
mov edi ecx +
xor eax eax +
mov [ebp-4] eax +
mov [ebp-20h] eax +
mov [ebp-1Ch] eax +
mov eax [ebp+8] +
mov ecx [eax] +
lea edx [ebp-1Ch] +
xor ebx ebx +
push edx  +
inc ebx  +
push eax  +
mov [ebp-4] bl +
call dword ptr [ecx+10h]  +
mov esi eax +
mov [ebp+8] esi +
cmp esi 80070032h +
jnz loc_1014FF8  +
and dword ptr [ebp+8] 0 +
mov eax [ebp-1Ch] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_1014FE4  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push dword ptr [ebp+0Ch]  +
call ds:SysFreeString  +
mov eax [ebp+8] +
call __EH_epilog3  +
retn 0Ch  +
test esi esi +
jge loc_1015080  +
push offset dword_1044E10  +
lea ecx [ebp+10h] +
call sub_100BC7D  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp+10h] +
push offset aFailedToGetCom  +
push eax  +
mov byte ptr [ebp-4] 3 +
call sub_100C88F  +
add esp 0Ch +
cmp dword ptr [edi+1Ch] 0 +
mov dword ptr [ebp-4] 2 +
jz loc_101505D  +
push esi  +
push offset aCdismwrapperAd  +
push dword ptr [ebp+10h]  +
mov esi offset unk_1038AE8 +
push offset aSSHr0xX  +
push 2022h  +
push esi  +
call sub_101A9EC  +
mov ecx [edi+1Ch] +
add esp 18h +
push esi  +
push ebx  +
call sub_101865E  +
mov ecx [ebp+10h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
jmp loc_1014FD3  +
mov eax [ebp-24h] +
mov [ebp+8] eax +
mov dword ptr [ebp-4] 2 +
mov eax offset loc_101505D +
retn   +
mov eax [ebp-1Ch] +
mov ecx [eax] +
lea edx [ebp-20h] +
push edx  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov [ebp+8] eax +
test eax eax +
jge loc_10150E1  +
push offset dword_1044E10  +
lea ecx [ebp+10h] +
call sub_100BC7D  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp+10h] +
push offset aFailedToGet_13  +
push eax  +
mov byte ptr [ebp-4] 6 +
call sub_100C88F  +
add esp 0Ch +
cmp dword ptr [edi+1Ch] 0 +
mov dword ptr [ebp-4] 5 +
jz loc_101505D  +
push dword ptr [ebp+8]  +
jmp loc_1015033  +
mov eax [ebp-28h] +
mov [ebp+8] eax +
mov dword ptr [ebp-4] 5 +
mov eax offset loc_101505D +
retn   +
mov esi ebx +
cmp esi [ebp-20h] +
jg loc_1014FD3  +
and dword ptr [ebp-14h] 0 +
and dword ptr [ebp-18h] 0 +
mov eax [ebp-1Ch] +
mov ecx [eax] +
lea edx [ebp-14h] +
push edx  +
push esi  +
push eax  +
mov byte ptr [ebp-4] 9 +
call dword ptr [ecx+20h]  +
mov [ebp+8] eax +
test eax eax +
jge loc_10151C8  +
push offset dword_1044E10  +
lea ecx [ebp+10h] +
call sub_100BC7D  +
push esi  +
lea eax [ebp+10h] +
push offset aFailedToGet_14  +
push eax  +
mov byte ptr [ebp-4] 0Bh +
call sub_100C88F  +
add esp 0Ch +
mov dword ptr [ebp-4] 0Ah +
cmp dword ptr [edi+1Ch] 0 +
jz loc_101516E  +
push dword ptr [ebp+8]  +
mov esi offset unk_1038AE8 +
push offset aCdismwrapperAd  +
push dword ptr [ebp+10h]  +
push offset aSSHr0xX  +
push 2022h  +
push esi  +
call sub_101A9EC  +
mov ecx [edi+1Ch] +
add esp 18h +
push esi  +
push ebx  +
call sub_101865E  +
mov ecx [ebp+10h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
push dword ptr [ebp-18h]  +
call ds:SysFreeString  +
mov [ebp-4] bl +
jmp loc_10151B2  +
mov eax [ebp-2Ch] +
mov [ebp+8] eax +
mov dword ptr [ebp-4] 0Ah +
mov eax offset loc_101519A +
retn   +
mov ecx [ebp+10h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
push dword ptr [ebp-18h]  +
call ds:SysFreeString  +
mov byte ptr [ebp-4] 1 +
mov eax [ebp-14h] +
test eax eax +
jz loc_1014FD3  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1014FD3  +
mov eax [ebp-14h] +
mov ecx [eax] +
lea edx [ebp-18h] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov [ebp+8] eax +
test eax eax +
jge loc_101521C  +
push offset dword_1044E10  +
lea ecx [ebp+10h] +
call sub_100BC7D  +
lea eax [ebp+10h] +
push offset aFailedToGet_15  +
push eax  +
mov byte ptr [ebp-4] 0Eh +
call sub_100C88F  +
pop ecx  +
pop ecx  +
mov dword ptr [ebp-4] 0Dh +
jmp loc_101513B  +
mov eax [ebp-30h] +
mov [ebp+8] eax +
mov dword ptr [ebp-4] 0Dh +
mov eax offset loc_101519A +
retn   +
mov ecx [ebp+10h] +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
call sub_1013851  +
test eax eax +
jnz loc_1015237  +
mov dword ptr [ebp+8] 80004005h +
cmp dword ptr [ebp+8] 0 +
jge loc_101527D  +
push offset dword_1044E10  +
lea ecx [ebp+10h] +
call sub_100BC7D  +
lea eax [ebp+10h] +
push offset aFailedToRegist  +
push eax  +
mov byte ptr [ebp-4] 11h +
call sub_100C88F  +
pop ecx  +
pop ecx  +
mov dword ptr [ebp-4] 10h +
jmp loc_101513B  +
mov eax [ebp-34h] +
mov [ebp+8] eax +
mov dword ptr [ebp-4] 10h +
mov eax offset loc_101519A +
retn   +
push dword ptr [ebp-18h]  +
call ds:SysFreeString  +
mov eax [ebp-14h] +
mov [ebp-4] bl +
test eax eax +
jz loc_1015296  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc esi  +
jmp loc_10150E3  +
***
call __EH_prolog3_catch  +
mov edi ecx +
xor ebx ebx +
cmp [ebp+8] ebx +
jnz loc_10152C0  +
mov eax 80070057h +
jmp loc_1015671  +
mov [ebp-20h] ebx +
mov [ebp-4] ebx +
mov [ebp-28h] ebx +
mov [ebp-1Ch] ebx +
mov [ebp-18h] ebx +
mov [ebp-2Ch] ebx +
mov [ebp-14h] ebx +
lea eax [ebp-2Ch] +
push eax  +
lea eax [ebp-28h] +
push eax  +
lea eax [ebp-20h] +
push eax  +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
push dword ptr [ebp+8]  +
mov byte ptr [ebp-4] 4 +
mov [ebp-24h] ebx +
call sub_1013481  +
mov esi eax +
cmp esi ebx +
mov [ebp+0Ch] esi +
jge loc_101537C  +
push offset dword_1044E10  +
lea ecx [ebp+8] +
call sub_100BC7D  +
push esi  +
lea eax [ebp+8] +
push offset aCouldNotCheckW  +
push eax  +
mov byte ptr [ebp-4] 6 +
call sub_100C88F  +
mov dword ptr [ebp-4] 5 +
add esp 0Ch +
cmp [edi+1Ch] ebx +
jz loc_1015359  +
push esi  +
push offset aCdismwrapperTr  +
push dword ptr [ebp+8]  +
mov esi offset unk_1038AE8 +
push offset aSSHr0xX  +
push 2022h  +
push esi  +
call sub_101A9EC  +
mov ecx [edi+1Ch] +
add esp 18h +
push esi  +
push 1  +
call sub_101865E  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
jmp loc_101562B  +
mov eax [ebp-30h] +
mov [ebp+0Ch] eax +
mov dword ptr [ebp-4] 5 +
mov eax offset loc_1015359 +
retn   +
mov eax [ebp-20h] +
cmp eax ebx +
jnz loc_10153CE  +
push dword ptr [ebp-28h]  +
push 0C1500066h  +
push dword ptr [edi+2Ch]  +
call sub_10196C9  +
add esp 0Ch +
cmp [edi+1Ch] ebx +
jz loc_10153C2  +
push esi  +
push dword ptr [ebp-28h]  +
mov esi offset unk_1038AE8 +
push offset aNoProvidersWer  +
push 2022h  +
push esi  +
call sub_101A9EC  +
mov ecx [edi+1Ch] +
add esp 14h +
push esi  +
push 1  +
call sub_101865E  +
mov dword ptr [ebp+0Ch] 80070057h +
jmp loc_101562B  +
mov ecx [eax] +
lea edx [ebp-14h] +
push edx  +
push eax  +
call dword ptr [ecx+10h]  +
mov esi eax +
cmp esi ebx +
mov [ebp+0Ch] esi +
jge loc_1015420  +
push offset dword_1044E10  +
lea ecx [ebp+8] +
call sub_100BC7D  +
push esi  +
lea eax [ebp+8] +
push offset aFailedToGetT_9  +
push eax  +
mov byte ptr [ebp-4] 9 +
call sub_100C88F  +
mov dword ptr [ebp-4] 8 +
jmp loc_1015325  +
mov eax [ebp-34h] +
mov [ebp+0Ch] eax +
mov dword ptr [ebp-4] 8 +
mov eax offset loc_1015359 +
retn   +
mov eax [ebp-2Ch] +
mov ecx [eax] +
lea edx [ebp-1Ch] +
push edx  +
push dword ptr [ebp-14h]  +
push eax  +
call dword ptr [ecx+28h]  +
mov esi eax +
cmp esi ebx +
mov [ebp+0Ch] esi +
jge loc_101547E  +
push offset dword_1044E10  +
lea ecx [ebp+8] +
call sub_100BC7D  +
push esi  +
push dword ptr [ebp-14h]  +
lea eax [ebp+8] +
push offset aFailedToGet_10  +
push eax  +
mov byte ptr [ebp-4] 0Ch +
call sub_100C88F  +
add esp 10h +
mov dword ptr [ebp-4] 0Bh +
jmp loc_1015328  +
mov eax [ebp-38h] +
mov [ebp+0Ch] eax +
mov dword ptr [ebp-4] 0Bh +
mov eax offset loc_1015359 +
retn   +
mov eax [ebp-1Ch] +
mov ecx [eax] +
lea edx [ebp-18h] +
push edx  +
mov ebx offset dword_1001498 +
push ebx  +
push eax  +
call dword ptr [ecx]  +
xor esi esi +
cmp eax esi +
mov [ebp+0Ch] eax +
jge loc_10154E9  +
push offset dword_1044E10  +
lea ecx [ebp+8] +
call sub_100BC7D  +
push dword ptr [ebp-14h]  +
lea eax [ebp+8] +
push offset aSDoesNotSuppor  +
push eax  +
mov byte ptr [ebp-4] 0Fh +
call sub_100C88F  +
add esp 0Ch +
mov dword ptr [ebp-4] 0Eh +
cmp [edi+1Ch] esi +
jz loc_1015359  +
push dword ptr [ebp+0Ch]  +
jmp loc_101532E  +
mov eax [ebp-3Ch] +
mov [ebp+0Ch] eax +
mov dword ptr [ebp-4] 0Eh +
mov eax offset loc_1015359 +
retn   +
mov eax [ebp-20h] +
mov ecx [eax] +
push eax  +
mov [ebp-20h] esi +
call dword ptr [ecx+8]  +
mov eax [ebp-1Ch] +
cmp eax esi +
jz loc_1015505  +
mov [ebp-1Ch] esi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-18h] +
push dword ptr [ebp+8]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
cmp eax esi +
mov [ebp+0Ch] eax +
jge loc_101562B  +
mov esi 800706BAh +
cmp eax esi +
jnz loc_101556E  +
push 0C1500036h  +
push dword ptr [edi+2Ch]  +
call sub_10196C9  +
cmp dword ptr [edi+1Ch] 0 +
pop ecx  +
pop ecx  +
jz loc_101555E  +
push esi  +
push offset aDismhostProces  +
push 2022h  +
mov esi offset unk_1038AE8 +
push esi  +
call sub_101A9EC  +
mov ecx [edi+1Ch] +
add esp 10h +
push esi  +
push 1  +
call sub_101865E  +
and dword ptr [ebp-18h] 0 +
mov ecx edi +
call sub_1014633  +
jmp loc_101562B  +
push ebx  +
push dword ptr [ebp-18h]  +
push dword ptr [edi+2Ch]  +
call sub_1011EAF  +
xor ebx ebx +
cmp eax ebx +
jl loc_1015589  +
cmp eax 1 +
jnz loc_101562B  +
mov esi [ebp+0Ch] +
cmp esi 80070057h +
jnz loc_101559B  +
push 0C150002Eh  +
jmp loc_10155F5  +
cmp esi 800704C7h +
jnz loc_10155AA  +
push 0C150006Bh  +
jmp loc_10155F5  +
mov eax esi +
and eax 1FFF0000h +
cmp eax 70000h +
jnz loc_10155F0  +
push ebx  +
push ebx  +
lea eax [ebp-24h] +
push eax  +
movzx eax word ptr [edi+30h] +
push eax  +
movzx eax si +
push eax  +
push ebx  +
push 1300h  +
call ds:FormatMessageW  +
test eax eax +
jz loc_10155F0  +
push dword ptr [ebp-24h]  +
mov ecx [edi+2Ch] +
call sub_1019753  +
push dword ptr [ebp-24h]  +
call ds:LocalFree  +
mov [ebp-24h] ebx +
jmp loc_10155FF  +
push 0C150001Eh  +
push dword ptr [edi+2Ch]  +
call sub_10196C9  +
pop ecx  +
pop ecx  +
cmp [edi+1Ch] ebx +
jz loc_101562B  +
push esi  +
push dword ptr [ebp-14h]  +
mov esi offset unk_1038AE8 +
push offset aSProcessedTheC  +
push 2022h  +
push esi  +
call sub_101A9EC  +
mov ecx [edi+1Ch] +
add esp 14h +
push esi  +
push 1  +
call sub_101865E  +
push dword ptr [ebp-14h]  +
mov esi ds:SysFreeString +
call esi  +
mov eax [ebp-18h] +
mov byte ptr [ebp-4] 2 +
test eax eax +
jz loc_1015647  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_1015658  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push dword ptr [ebp-28h]  +
call esi  +
mov eax [ebp-20h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_101566E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+0Ch] +
call __EH_epilog3  +
retn 8  +
***
call __EH_prolog3_catch  +
mov edi ecx +
mov esi [ebp+8] +
xor ebx ebx +
cmp esi ebx +
jnz loc_101569F  +
mov eax 80004005h +
jmp loc_1015AE4  +
mov [ebp-30h] ebx +
mov [ebp-24h] ebx +
push offset aWimmanager  +
lea ecx [ebp-2Ch] +
mov [ebp-4] ebx +
mov [ebp-34h] ebx +
call loc_10116D2  +
mov eax [esi] +
lea ecx [ebp-24h] +
push ecx  +
push esi  +
mov byte ptr [ebp-4] 1 +
call dword ptr [eax+38h]  +
mov esi eax +
cmp esi ebx +
mov [ebp-18h] esi +
jge loc_101575C  +
push offset dword_1044E10  +
lea ecx [ebp+8] +
call sub_100BC7D  +
push esi  +
push 0C150001Fh  +
push dword ptr [edi+2Ch]  +
mov byte ptr [ebp-4] 2 +
call sub_10196C9  +
push esi  +
lea eax [ebp+8] +
push offset aFailedToGet_11  +
push eax  +
mov byte ptr [ebp-4] 3 +
call sub_100C88F  +
mov dword ptr [ebp-4] 2 +
add esp 18h +
cmp [edi+1Ch] ebx +
jz loc_1015740  +
push esi  +
push offset aCdismwrapperBu  +
push dword ptr [ebp+8]  +
mov esi offset unk_1038AE8 +
push offset aSSHr0xX  +
push 2022h  +
push esi  +
call sub_101A9EC  +
mov ecx [edi+1Ch] +
add esp 18h +
push esi  +
push 1  +
call sub_101865E  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
jmp loc_1015AC7  +
mov eax [ebp-38h] +
mov [ebp-18h] eax +
mov eax offset loc_1015740 +
retn   +
mov eax [ebp-24h] +
mov ecx [eax] +
lea edx [ebp-30h] +
push edx  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
cmp esi ebx +
mov [ebp-18h] esi +
jge loc_10157BC  +
push offset dword_1044E10  +
lea ecx [ebp+8] +
call sub_100BC7D  +
push esi  +
push 0C150001Fh  +
push dword ptr [edi+2Ch]  +
mov byte ptr [ebp-4] 5 +
call sub_10196C9  +
push esi  +
lea eax [ebp+8] +
push offset aFailedToGet_12  +
push eax  +
mov byte ptr [ebp-4] 6 +
call sub_100C88F  +
mov dword ptr [ebp-4] 5 +
jmp loc_101570C  +
mov eax [ebp-3Ch] +
mov [ebp-18h] eax +
mov eax offset loc_1015740 +
retn   +
cmp [edi+1Ch] ebx +
mov esi offset unk_1038AE8 +
mov ebx 2022h +
jz loc_10157E5  +
push offset aGotTheCollecti  +
push ebx  +
push esi  +
call sub_101A9EC  +
mov ecx [edi+1Ch] +
add esp 0Ch +
push esi  +
push 3  +
call sub_101865E  +
mov dword ptr [ebp-28h] 1 +
mov eax [ebp-28h] +
cmp eax [ebp-30h] +
jg loc_1015A64  +
xor eax eax +
mov [ebp-1Ch] eax +
mov [ebp-20h] eax +
mov [ebp-14h] eax +
mov eax [ebp-24h] +
mov ecx [eax] +
lea edx [ebp-1Ch] +
push edx  +
push dword ptr [ebp-28h]  +
mov byte ptr [ebp-4] 0Ah +
push eax  +
call dword ptr [ecx+20h]  +
mov [ebp-18h] eax +
test eax eax +
jge loc_10158DF  +
push offset dword_1044E10  +
lea ecx [ebp+8] +
call sub_100BC7D  +
push dword ptr [ebp-18h]  +
mov byte ptr [ebp-4] 0Bh +
push 0C150001Fh  +
push dword ptr [edi+2Ch]  +
call sub_10196C9  +
push dword ptr [ebp-18h]  +
lea eax [ebp+8] +
push offset aFailedToGetAPr  +
push eax  +
mov byte ptr [ebp-4] 0Ch +
call sub_100C88F  +
add esp 18h +
cmp dword ptr [edi+1Ch] 0 +
mov dword ptr [ebp-4] 0Bh +
jz loc_101588D  +
push dword ptr [ebp-18h]  +
push offset aCdismwrapperBu  +
push dword ptr [ebp+8]  +
push offset aSSHr0xX  +
push ebx  +
push esi  +
call sub_101A9EC  +
mov ecx [edi+1Ch] +
add esp 18h +
push esi  +
push 1  +
call sub_101865E  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
push dword ptr [ebp-14h]  +
call ds:SysFreeString  +
mov eax [ebp-20h] +
mov byte ptr [ebp-4] 8 +
test eax eax +
jz loc_10158B2  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_1015AC7  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1015AC7  +
mov eax [ebp-40h] +
mov [ebp-18h] eax +
mov dword ptr [ebp-4] 0Bh +
mov eax offset loc_101588D +
retn   +
mov eax [ebp-1Ch] +
mov ecx [eax] +
lea edx [ebp-14h] +
push edx  +
push eax  +
call dword ptr [ecx+28h]  +
test eax eax +
jl loc_1015915  +
cmp dword ptr [edi+1Ch] 0 +
jz loc_1015926  +
push dword ptr [ebp-14h]  +
push offset aAttemptingToAd  +
push ebx  +
push esi  +
call sub_101A9EC  +
mov ecx [edi+1Ch] +
add esp 10h +
push esi  +
push 3  +
call sub_101865E  +
jmp loc_1015926  +
push offset aUnknownProvide  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 0Eh +
call sub_100BB74  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-2Ch] +
mov dword ptr [ebp-4] 0Ah +
call sub_1010F10  +
test al al +
jz loc_1015944  +
mov dword ptr [ebp-34h] 1 +
mov eax [ebp-1Ch] +
mov ecx [eax] +
lea edx [ebp-20h] +
push edx  +
push offset dword_1001498  +
push eax  +
call dword ptr [ecx]  +
cmp eax 80004002h +
jnz loc_1015979  +
cmp dword ptr [edi+1Ch] 0 +
jz loc_10159D9  +
push dword ptr [ebp-14h]  +
push offset aSDoesNotSuppor  +
push ebx  +
push esi  +
call sub_101A9EC  +
add esp 10h +
push esi  +
push 4  +
jmp loc_10159D1  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-14h] +
push ecx  +
mov ecx esp +
mov [ebp-44h] esp +
push eax  +
call sub_1011E5E  +
push dword ptr [ebp-20h]  +
mov ecx edi +
call sub_1014F96  +
test eax eax +
jge loc_10159B6  +
cmp dword ptr [edi+1Ch] 0 +
jz loc_10159D9  +
push dword ptr [ebp-14h]  +
push offset aFailedToAddCom  +
push ebx  +
push esi  +
call sub_101A9EC  +
add esp 10h +
push esi  +
push 2  +
jmp loc_10159D1  +
cmp dword ptr [edi+1Ch] 0 +
jz loc_10159D9  +
push dword ptr [ebp-14h]  +
push offset aSuccesfullyReg  +
push ebx  +
push esi  +
call sub_101A9EC  +
add esp 10h +
push esi  +
push 3  +
mov ecx [edi+1Ch] +
call sub_101865E  +
push dword ptr [ebp-14h]  +
call ds:SysFreeString  +
mov eax [ebp-20h] +
mov byte ptr [ebp-4] 8 +
test eax eax +
jz loc_10159F3  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_1015A04  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc dword ptr [ebp-28h]  +
jmp loc_10157EC  +
mov dword ptr [ebp-4] 0Ah +
mov eax offset loc_1015A19 +
retn   +
push dword ptr [ebp-14h]  +
mov esi ds:SysFreeString +
call esi  +
mov eax [ebp-20h] +
mov byte ptr [ebp-4] 8 +
test eax eax +
jz loc_1015A35  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_1015A46  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push dword ptr [ebp-2Ch]  +
call esi  +
mov eax [ebp-24h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_1015A5C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-48h] +
jmp loc_1015AE4  +
cmp dword ptr [ebp-34h] 0 +
jnz loc_1015A97  +
mov eax [ebp+8] +
cmp eax [edi+8] +
jnz loc_1015A97  +
cmp dword ptr [edi+1Ch] 0 +
jz loc_1015A97  +
push offset aWimmanager  +
push offset aFailedToLoadS_  +
push ebx  +
push esi  +
call sub_101A9EC  +
mov ecx [edi+1Ch] +
add esp 10h +
push esi  +
push 2  +
call sub_101865E  +
mov eax [ebp+0Ch] +
cmp dword ptr [eax+4] 0 +
ja loc_1015AC7  +
cmp dword ptr [edi+1Ch] 0 +
jz loc_1015AC0  +
push offset aFailedToAddAny  +
push ebx  +
push esi  +
call sub_101A9EC  +
mov ecx [edi+1Ch] +
add esp 0Ch +
push esi  +
push 2  +
call sub_101865E  +
mov dword ptr [ebp-18h] 1 +
push dword ptr [ebp-2Ch]  +
call ds:SysFreeString  +
mov eax [ebp-24h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_1015AE1  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-18h] +
call __EH_epilog3  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+1Ch] +
call sub_1014687  +
lea ecx [esi+4] +
pop esi  +
jmp sub_1014687  +
***
call __EH_prolog3_catch  +
mov eax [ebp-24h] +
mov [ebp-14h] eax +
mov eax offset loc_1015C6E +
retn   +
***
call __EH_prolog3_catch  +
mov eax [ebp-34h] +
mov eax [ebp-38h] +
mov [ebp-14h] eax +
mov eax offset loc_1015D3E +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1015F4D  +
mov edx [eax+0Ch] +
push esi  +
mov esi [edx+10h] +
mov [eax+0Ch] esi +
mov esi [edx+10h] +
cmp esi [ecx+14h] +
jz loc_1015F27  +
mov [esi+14h] eax +
mov esi [eax+14h] +
mov [edx+14h] esi +
mov esi [eax+14h] +
cmp esi [ecx+14h] +
jnz loc_1015F39  +
mov [ecx] edx +
jmp loc_1015F46  +
cmp eax [esi+10h] +
jnz loc_1015F43  +
mov [esi+10h] edx +
jmp loc_1015F46  +
mov [esi+0Ch] edx +
mov [edx+10h] eax +
mov [eax+14h] edx +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1015F7D  +
mov edx [ecx+14h] +
cmp eax edx +
jz loc_1015F7D  +
mov ecx eax +
mov eax [eax+0Ch] +
jmp loc_1015F75  +
mov ecx eax +
mov eax [ecx+0Ch] +
cmp eax edx +
jnz loc_1015F70  +
mov eax ecx +
jmp loc_1015F7F  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ds:SysStringLen +
mov esi ecx +
push dword ptr [esi]  +
call edi  +
test eax eax +
jbe loc_1015FA9  +
push dword ptr [esi]  +
call edi  +
push eax  +
push dword ptr [esi]  +
call ds:CharLowerBuffW  +
pop edi  +
xor eax eax +
pop esi  +
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_1015FEA  +
push 80004005h  +
call loc_100B638  +
mov ecx [ecx+14h] +
mov [eax] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
test edx edx +
jnz loc_1016008  +
xor eax eax +
jmp loc_1016035  +
mov eax [edx+0Ch] +
push esi  +
mov esi [ecx+14h] +
cmp eax esi +
jz loc_101601B  +
push eax  +
call sub_10110B1  +
jmp loc_1016034  +
mov eax [edx+14h] +
jmp loc_101602A  +
cmp edx [eax+0Ch] +
jnz loc_101602E  +
mov edx eax +
mov eax [eax+14h] +
cmp eax esi +
jnz loc_1016020  +
cmp eax esi +
jnz loc_1016034  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
mov [ebp-24h] ecx +
xor edi edi +
mov [ebp-4] edi +
cmp [ebp+24h] edi +
jnz loc_1016071  +
mov esi ds:SysFreeString +
mov ebx 80070057h +
push dword ptr [ebp+20h]  +
call esi  +
mov eax ebx +
call __EH_epilog3  +
retn 20h  +
mov [ebp-20h] edi +
mov [ebp-1Ch] edi +
mov [ebp-18h] edi +
mov [ebp-14h] edi +
mov [ebp-10h] edi +
mov esi ds:SysFreeString +
xor eax eax +
cmp [ebp+8] edi +
mov byte ptr [ebp-4] 5 +
setnz al  +
dec eax  +
movzx eax ax +
mov [ebp-28h] eax +
cmp [ebp+0Ch] edi +
jz loc_10160BF  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-20h] +
push eax  +
push dword_10309F0  +
call sub_101D639  +
mov ebx eax +
add esp 0Ch +
cmp ebx edi +
jl loc_10161D7  +
jmp loc_10160C5  +
push edi  +
call esi  +
mov [ebp-20h] edi +
cmp [ebp+10h] edi +
jz loc_10160EB  +
push dword ptr [ebp+10h]  +
lea eax [ebp-1Ch] +
push eax  +
push dword_10309F0  +
call sub_101D639  +
mov ebx eax +
add esp 0Ch +
cmp ebx edi +
jl loc_10161D7  +
jmp loc_10160F3  +
push dword ptr [ebp-1Ch]  +
call esi  +
mov [ebp-1Ch] edi +
cmp [ebp+14h] edi +
jz loc_1016119  +
push dword ptr [ebp+14h]  +
lea eax [ebp-18h] +
push eax  +
push dword_10309F0  +
call sub_101D639  +
mov ebx eax +
add esp 0Ch +
cmp ebx edi +
jl loc_10161D7  +
jmp loc_1016121  +
push dword ptr [ebp-18h]  +
call esi  +
mov [ebp-18h] edi +
cmp [ebp+18h] edi +
jz loc_1016147  +
push dword ptr [ebp+18h]  +
lea eax [ebp-14h] +
push eax  +
push dword_10309F0  +
call sub_101D639  +
mov ebx eax +
add esp 0Ch +
cmp ebx edi +
jl loc_10161D7  +
jmp loc_101614F  +
push dword ptr [ebp-14h]  +
call esi  +
mov [ebp-14h] edi +
cmp [ebp+1Ch] edi +
jz loc_1016171  +
push dword ptr [ebp+1Ch]  +
lea eax [ebp-10h] +
push eax  +
push dword_10309F0  +
call sub_101D639  +
mov ebx eax +
add esp 0Ch +
cmp ebx edi +
jl loc_10161D7  +
jmp loc_1016179  +
push dword ptr [ebp-10h]  +
call esi  +
mov [ebp-10h] edi +
mov ebx [ebp-24h] +
cmp [ebx] edi +
jz loc_10161A2  +
push offset aGotTheCollecti  +
push 2022h  +
mov edi offset unk_103CB30 +
push edi  +
call sub_101A9EC  +
mov ecx [ebx] +
add esp 0Ch +
push edi  +
push 3  +
call sub_101865E  +
push offset aDismCommandLin  +
lea ecx [ebp-24h] +
call loc_10116D2  +
push dword ptr [ebp+24h]  +
mov eax [eax] +
push eax  +
push dword ptr [ebp-10h]  +
mov byte ptr [ebp-4] 6 +
push dword ptr [ebp-14h]  +
push dword ptr [ebp-18h]  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp-28h]  +
call sub_101FC9A  +
push dword ptr [ebp-24h]  +
mov ebx eax +
call esi  +
push dword ptr [ebp-10h]  +
call esi  +
push dword ptr [ebp-14h]  +
call esi  +
push dword ptr [ebp-18h]  +
call esi  +
push dword ptr [ebp-1Ch]  +
call esi  +
push dword ptr [ebp-20h]  +
call esi  +
jmp loc_1016062  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax] +
mov eax [ecx] +
cmp eax edx +
jz loc_1016211  +
push edx  +
push ecx  +
call sub_100F906  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100BC7D  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov esi [edi] +
xor ebx ebx +
cmp esi [edi+14h] +
jz loc_1016271  +
test ebx ebx +
jnz loc_1016275  +
push esi  +
push [ebp+arg_0]  +
call sub_10110FF  +
test eax eax +
jnz loc_101625E  +
mov ebx esi +
jmp loc_1016268  +
jge loc_1016265  +
mov esi [esi+0Ch] +
jmp loc_1016268  +
mov esi [esi+10h] +
cmp esi [edi+14h] +
jnz loc_1016249  +
test ebx ebx +
jnz loc_1016275  +
xor eax eax +
jmp loc_1016297  +
push ebx  +
jmp loc_1016288  +
mov ecx [ebp+arg_0] +
push esi  +
call sub_1010F10  +
test al al +
jz loc_1016295  +
mov ebx esi +
push esi  +
mov ecx edi +
call sub_1015FF8  +
mov esi eax +
test esi esi +
jnz loc_1016278  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov ecx [eax] +
mov [esi] ecx +
mov ecx [eax+4] +
mov [esi+4] ecx +
mov ecx [eax+8] +
mov [esi+8] ecx +
mov ecx [eax+0Ch] +
mov [esi+0Ch] ecx +
mov ecx [eax+10h] +
mov [esi+10h] ecx +
mov ecx [eax+14h] +
add eax 18h +
mov [esi+14h] ecx +
push eax  +
lea ecx [esi+18h] +
call sub_1011E5E  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
mov edi [ebp+arg_10] +
lea ebx [esi+edi] +
push ebx  +
call sub_100BDD2  +
push esi  +
push [ebp+arg_4]  +
mov [ebp+arg_8] eax +
push esi  +
push eax  +
call sub_100B4C7  +
mov eax [ebp+arg_8] +
push edi  +
push [ebp+arg_C]  +
lea eax [eax+esi*2] +
push edi  +
push eax  +
call sub_100B4C7  +
mov ecx [ebp+arg_0] +
add esp 20h +
push ebx  +
call loc_100B9FC  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __EH_prolog3  +
mov esi [ebp+0Ch] +
and dword ptr [ebp-10h] 0 +
mov ecx esi +
call sub_1011E35  +
mov ecx [ebp+8] +
push eax  +
call sub_101621A  +
mov eax [ebp+10h] +
mov eax [eax] +
mov edx [eax-0Ch] +
mov ecx [esi] +
mov esi [ecx-0Ch] +
and dword ptr [ebp-4] 0 +
push edx  +
push eax  +
push esi  +
push ecx  +
push dword ptr [ebp+8]  +
mov dword ptr [ebp-10h] 1 +
call sub_10162E8  +
mov eax [ebp+8] +
add esp 14h +
call __EH_epilog3  +
retn 0Ch  +
***
call __EH_prolog3  +
mov esi [ebp+0Ch] +
and dword ptr [ebp-10h] 0 +
mov ecx esi +
call sub_1011E35  +
mov ecx [ebp+8] +
push eax  +
call sub_101621A  +
mov esi [esi] +
push dword ptr [ebp+10h]  +
and dword ptr [ebp-4] 0 +
mov edi [esi-0Ch] +
mov dword ptr [ebp-10h] 1 +
call sub_100B9D6  +
push eax  +
push dword ptr [ebp+10h]  +
push edi  +
push esi  +
push dword ptr [ebp+8]  +
call sub_10162E8  +
mov eax [ebp+8] +
add esp 18h +
call __EH_epilog3  +
retn 0Ch  +
***
call __EH_prolog3  +
mov ecx [ebp+8] +
call sub_1011E35  +
push eax  +
lea ecx [ebp-10h] +
call sub_100BC7D  +
push dword ptr [ebp+0Ch]  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-10h] +
call sub_100C664  +
mov esi [ebp-10h] +
mov ecx [ebp+8] +
lea eax [ebp+10h] +
push eax  +
push esi  +
call sub_100C584  +
lea ecx [esi-10h] +
call sub_100B8FC  +
call __EH_epilog3  +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
cmp dword ptr [esi+8] 0 +
jnz loc_10164CF  +
cmp dword ptr [esi+14h] 0 +
jnz loc_10164A0  +
push 18h  +
call ds:malloc  +
mov edi eax +
pop ecx  +
mov [esi+14h] edi +
test edi edi +
jnz loc_1016472  +
push 8007000Eh  +
call loc_100B638  +
xor eax eax +
push 6  +
pop ecx  +
stos   +
mov eax [esi+14h] +
mov dword ptr [eax+8] 1 +
mov eax [esi+14h] +
mov [eax+10h] eax +
mov eax [esi+14h] +
mov ecx [eax+10h] +
mov [eax+0Ch] ecx +
mov eax [esi+14h] +
mov ecx [eax+0Ch] +
mov [eax+14h] ecx +
mov eax [esi+14h] +
mov [esi] eax +
push 18h  +
push dword ptr [esi+10h]  +
lea eax [esi+0Ch] +
push eax  +
call sub_101196E  +
test eax eax +
jz loc_1016468  +
mov ecx [esi+10h] +
mov edx ecx +
imul edx edx +
lea eax [edx+eax-14h] +
jmp loc_10164CC  +
mov edx [esi+8] +
mov [eax+0Ch] edx +
mov [esi+8] eax +
sub eax 18h +
dec ecx  +
jns loc_10164C0  +
mov edi [esi+8] +
mov [ebp-10h] edi +
mov [ebp-14h] edi +
and dword ptr [ebp-4] 0 +
test edi edi +
jz loc_10164ED  +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
push dword ptr [ebp+8]  +
call sub_10122A0  +
mov eax [esi+8] +
mov eax [eax+0Ch] +
mov [esi+8] eax +
and dword ptr [edi+8] 0 +
lea eax [edi+0Ch] +
push eax  +
mov ecx esi +
call sub_1015FD4  +
lea eax [edi+10h] +
push eax  +
mov ecx esi +
call sub_1015FD4  +
lea eax [edi+14h] +
push eax  +
mov ecx esi +
call sub_1015FD4  +
inc dword ptr [esi+4]  +
mov eax edi +
call __EH_epilog3  +
retn 8  +
***
call __EH_prolog3_catch  +
mov edi ecx +
push dword ptr [ebp+8]  +
lea ecx [ebp-20h] +
call loc_10116D2  +
xor esi esi +
mov [ebp-4] esi +
mov [ebp-1Ch] esi +
mov [ebp-30h] esi +
push offset dword_1044E10  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 2 +
call sub_100BC7D  +
mov [ebp-38h] esi +
mov [ebp-28h] esi +
mov [ebp-24h] esi +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 5 +
call sub_1015F88  +
mov ebx eax +
cmp ebx esi +
jge loc_10165B0  +
cmp [edi] esi +
jz loc_1016B24  +
push ebx  +
push dword ptr [ebp+8]  +
push offset aFailedToLowerc  +
push 2022h  +
mov esi offset unk_103CB30 +
push esi  +
call sub_101A9EC  +
mov ecx [edi] +
add esp 14h +
push esi  +
push 1  +
call sub_101865E  +
jmp loc_1016B24  +
lea eax [ebp-20h] +
lea esi [edi+4] +
push eax  +
mov ecx esi +
call sub_1016236  +
mov [ebp-34h] eax +
test eax eax +
jnz loc_10165DB  +
xor ebx ebx +
inc ebx  +
cmp [edi] eax +
jz loc_1016B24  +
push ebx  +
push dword ptr [ebp+8]  +
push offset aNoHelpItemsWer  +
jmp loc_101658E  +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-34h] +
push eax  +
mov ecx esi +
call sub_1011E93  +
push eax  +
lea ecx [ebp-1Ch] +
call sub_10161FA  +
cmp dword ptr [ebp-1Ch] 0 +
jnz loc_10165FE  +
mov ebx 80004005h +
test ebx ebx +
jge loc_1016699  +
push offset dword_1044E10  +
lea ecx [ebp+0Ch] +
call sub_100BC7D  +
push ebx  +
push dword ptr [ebp+8]  +
lea eax [ebp+0Ch] +
push offset aFailedToRetr_0  +
push eax  +
mov byte ptr [ebp-4] 7 +
call sub_100C88F  +
mov dword ptr [ebp-4] 6 +
add esp 10h +
cmp dword ptr [edi] 0 +
jz loc_1016663  +
push ebx  +
push offset aChelphandlerGe  +
push dword ptr [ebp+0Ch]  +
mov esi offset unk_103CB30 +
push offset aSSHr0xX  +
push 2022h  +
push esi  +
call sub_101A9EC  +
mov ecx [edi] +
add esp 18h +
push esi  +
push 1  +
call sub_101865E  +
mov ecx [ebp+0Ch] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
jmp loc_1016B24  +
mov eax [ebp-40h] +
mov [ebp+8] eax +
mov dword ptr [ebp-4] 6 +
mov eax offset loc_1016686 +
retn   +
mov ecx [ebp+0Ch] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov ebx [ebp+8] +
jmp loc_1016B24  +
mov esi [ebp-1Ch] +
mov eax [esi] +
lea ecx [ebp-28h] +
push ecx  +
push esi  +
call dword ptr [eax+1Ch]  +
mov ebx eax +
test ebx ebx +
jge loc_10166EE  +
push offset dword_1044E10  +
lea ecx [ebp+0Ch] +
call sub_100BC7D  +
push ebx  +
push dword ptr [ebp+8]  +
lea eax [ebp+0Ch] +
push offset aFailedToGet_17  +
push eax  +
mov byte ptr [ebp-4] 0Ah +
call sub_100C88F  +
mov dword ptr [ebp-4] 9 +
jmp loc_1016630  +
mov eax [ebp-44h] +
mov [ebp+8] eax +
mov dword ptr [ebp-4] 9 +
mov eax offset loc_1016686 +
retn   +
push dword ptr [ebp-28h]  +
lea eax [ebp-18h] +
push dword ptr [ebp+0Ch]  +
mov byte ptr [ebp-4] 0Ch +
push eax  +
call sub_1016391  +
push offset asc_10025C4  +
push eax  +
lea eax [ebp-34h] +
push eax  +
mov byte ptr [ebp-4] 0Dh +
call sub_1016391  +
mov ecx [ebp+0Ch] +
push eax  +
mov byte ptr [ebp-4] 0Eh +
call sub_100C8AA  +
mov ecx [ebp-34h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
lea eax [ebp-20h] +
lea ecx [edi+1Ch] +
push eax  +
mov dword ptr [ebp-4] 5 +
call sub_1016236  +
mov [ebp-34h] eax +
cmp dword ptr [ebp-34h] 0 +
jz loc_1016AA0  +
and dword ptr [ebp-14h] 0 +
and dword ptr [ebp-18h] 0 +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-34h] +
push eax  +
lea ecx [edi+1Ch] +
mov byte ptr [ebp-4] 11h +
call sub_1011E93  +
push eax  +
lea ecx [ebp-30h] +
call sub_10161FA  +
mov esi [ebp-30h] +
mov eax [esi] +
lea ecx [ebp-14h] +
push ecx  +
push esi  +
call dword ptr [eax+14h]  +
mov ebx eax +
test ebx ebx +
jl loc_10167A9  +
push dword ptr [ebp-14h]  +
call ds:SysStringLen  +
test eax eax +
ja loc_10167A1  +
mov ebx 80004005h +
test ebx ebx +
jge loc_1016859  +
push offset dword_1044E10  +
lea ecx [ebp+0Ch] +
call sub_100BC7D  +
push ebx  +
push dword ptr [ebp+8]  +
lea eax [ebp+0Ch] +
push offset aFailedToGet_18  +
push eax  +
mov byte ptr [ebp-4] 13h +
call sub_100C88F  +
mov dword ptr [ebp-4] 12h +
add esp 10h +
cmp dword ptr [edi] 0 +
jz loc_1016806  +
push ebx  +
push offset aChelphandlerGe  +
push dword ptr [ebp+0Ch]  +
mov esi offset unk_103CB30 +
push offset aSSHr0xX  +
push 2022h  +
push esi  +
call sub_101A9EC  +
mov ecx [edi] +
add esp 18h +
push esi  +
push 1  +
call sub_101865E  +
mov ecx [ebp+0Ch] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
push dword ptr [ebp-18h]  +
mov esi ds:SysFreeString +
call esi  +
push dword ptr [ebp-14h]  +
call esi  +
jmp loc_1016B24  +
mov eax [ebp-48h] +
mov [ebp+8] eax +
mov dword ptr [ebp-4] 12h +
mov eax offset loc_1016839 +
retn   +
mov ecx [ebp+0Ch] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
push dword ptr [ebp-18h]  +
mov esi ds:SysFreeString +
call esi  +
push dword ptr [ebp-14h]  +
call esi  +
jmp loc_1016691  +
mov eax [esi] +
lea ecx [ebp-38h] +
push ecx  +
push esi  +
call dword ptr [eax+0Ch]  +
mov ebx eax +
test ebx ebx +
jge loc_10168AB  +
push offset dword_1044E10  +
lea ecx [ebp+0Ch] +
call sub_100BC7D  +
push ebx  +
push dword ptr [ebp+8]  +
lea eax [ebp+0Ch] +
push offset aFailedToGet_19  +
push eax  +
mov byte ptr [ebp-4] 16h +
call sub_100C88F  +
mov dword ptr [ebp-4] 15h +
jmp loc_10167D3  +
mov eax [ebp-4Ch] +
mov [ebp+8] eax +
mov dword ptr [ebp-4] 15h +
mov eax offset loc_1016839 +
retn   +
cmp word ptr [ebp-38h] 0 +
jz loc_101690B  +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
push dword ptr [ebp-14h]  +
call sub_101652D  +
mov ebx eax +
test ebx ebx +
jge loc_10169C1  +
push offset dword_1044E10  +
lea ecx [ebp+0Ch] +
call sub_100BC7D  +
push ebx  +
push dword ptr [ebp-14h]  +
lea eax [ebp+0Ch] +
push offset aFailedToRecurs  +
push eax  +
mov byte ptr [ebp-4] 19h +
call sub_100C88F  +
mov dword ptr [ebp-4] 18h +
jmp loc_10167D3  +
mov eax [ebp-50h] +
mov [ebp+8] eax +
mov dword ptr [ebp-4] 18h +
mov eax offset loc_1016839 +
retn   +
mov eax [esi] +
lea ecx [ebp-18h] +
push ecx  +
push esi  +
call dword ptr [eax+18h]  +
mov ebx eax +
test ebx ebx +
jl loc_1016931  +
push dword ptr [ebp-18h]  +
call ds:SysStringLen  +
test eax eax +
ja loc_101692D  +
mov ebx 80004005h +
test ebx ebx +
jge loc_1016973  +
push offset dword_1044E10  +
lea ecx [ebp+0Ch] +
call sub_100BC7D  +
push ebx  +
push dword ptr [ebp-14h]  +
lea eax [ebp+0Ch] +
push offset aFailedToGet_20  +
push eax  +
mov byte ptr [ebp-4] 1Ch +
call sub_100C88F  +
mov dword ptr [ebp-4] 1Bh +
jmp loc_10167D3  +
mov eax [ebp-54h] +
mov [ebp+8] eax +
mov dword ptr [ebp-4] 1Bh +
mov eax offset loc_1016839 +
retn   +
push dword ptr [ebp-18h]  +
lea eax [ebp-2Ch] +
push dword ptr [ebp-14h]  +
mov byte ptr [ebp-4] 1Eh +
push offset a22sS  +
push eax  +
call sub_100C88F  +
add esp 10h +
lea eax [ebp-2Ch] +
push eax  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-3Ch] +
mov dword ptr [ebp-4] 11h +
push eax  +
mov byte ptr [ebp-4] 20h +
call sub_1016337  +
mov ecx [ebp+0Ch] +
push eax  +
mov byte ptr [ebp-4] 21h +
call sub_100C8AA  +
mov ecx [ebp-3Ch] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
push dword ptr [ebp-18h]  +
mov esi ds:SysFreeString +
mov dword ptr [ebp-4] 11h +
call esi  +
push dword ptr [ebp-14h]  +
mov byte ptr [ebp-4] 5 +
call esi  +
mov esi [ebp-1Ch] +
jmp loc_101674D  +
mov dword ptr [ebp-4] 11h +
mov eax offset loc_10169F1 +
retn   +
push dword ptr [ebp-18h]  +
mov esi ds:SysFreeString +
call esi  +
push dword ptr [ebp-14h]  +
call esi  +
push dword ptr [ebp-24h]  +
call esi  +
push dword ptr [ebp-28h]  +
call esi  +
mov ecx [ebp-2Ch] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov eax [ebp-30h] +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_1016A27  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-1Ch] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_1016A38  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov edi [ebp-58h] +
jmp loc_1016A94  +
mov dword ptr [ebp-4] 11h +
mov eax offset loc_1016A4A +
retn   +
push dword ptr [ebp-18h]  +
mov esi ds:SysFreeString +
call esi  +
push dword ptr [ebp-14h]  +
call esi  +
push dword ptr [ebp-24h]  +
call esi  +
push dword ptr [ebp-28h]  +
call esi  +
mov ecx [ebp-2Ch] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov eax [ebp-30h] +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_1016A80  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-1Ch] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_1016A91  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov edi [ebp-5Ch] +
push dword ptr [ebp-20h]  +
call esi  +
mov eax edi +
jmp loc_1016C00  +
mov eax [esi] +
lea ecx [ebp-24h] +
push ecx  +
push esi  +
call dword ptr [eax+20h]  +
mov ebx eax +
test ebx ebx +
jge loc_1016AF2  +
push offset dword_1044E10  +
lea ecx [ebp+0Ch] +
call sub_100BC7D  +
push ebx  +
push dword ptr [ebp+8]  +
lea eax [ebp+0Ch] +
push offset aFailedToGet_21  +
push eax  +
mov byte ptr [ebp-4] 24h +
call sub_100C88F  +
mov dword ptr [ebp-4] 23h +
jmp loc_1016630  +
mov eax [ebp-60h] +
mov [ebp+8] eax +
mov dword ptr [ebp-4] 23h +
mov eax offset loc_1016686 +
retn   +
push dword ptr [ebp-24h]  +
lea eax [ebp+8] +
push dword ptr [ebp+0Ch]  +
mov byte ptr [ebp-4] 26h +
push eax  +
call sub_1016391  +
mov ecx [ebp+0Ch] +
push eax  +
mov byte ptr [ebp-4] 27h +
call sub_100C8AA  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov dword ptr [ebp-4] 5 +
push dword ptr [ebp-24h]  +
mov esi ds:SysFreeString +
call esi  +
push dword ptr [ebp-28h]  +
call esi  +
mov ecx [ebp-2Ch] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov eax [ebp-30h] +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_1016B50  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-1Ch] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_1016B61  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push dword ptr [ebp-20h]  +
call esi  +
mov eax ebx +
jmp loc_1016C00  +
mov dword ptr [ebp-4] 5 +
mov eax offset loc_1016B7A +
retn   +
push dword ptr [ebp-24h]  +
mov esi ds:SysFreeString +
call esi  +
push dword ptr [ebp-28h]  +
call esi  +
mov ecx [ebp-2Ch] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov eax [ebp-30h] +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_1016BA6  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-1Ch] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_1016BB7  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov edi [ebp-64h] +
jmp loc_1016A94  +
mov dword ptr [ebp-4] 5 +
mov eax offset loc_1016BCC +
retn   +
push dword ptr [ebp-24h]  +
mov esi ds:SysFreeString +
call esi  +
push dword ptr [ebp-28h]  +
call esi  +
mov ecx [ebp-2Ch] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov eax [ebp-1Ch] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_1016BF8  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push dword ptr [ebp-20h]  +
call esi  +
mov eax [ebp-68h] +
call __EH_epilog3  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
push edi  +
mov edi [eax] +
mov [eax] eax +
mov eax [esi+4] +
mov [eax+4] eax +
and dword ptr [esi+8] 0 +
cmp edi [esi+4] +
jz loc_1016C41  +
push ebx  +
mov ebx [edi] +
push edi  +
call sub_100EE3C  +
push edi  +
call sub_1019EA8  +
pop ecx  +
mov edi ebx +
cmp ebx [esi+4] +
jnz loc_1016C2A  +
pop ebx  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_4]  +
mov edi ecx +
push [ebp+arg_0]  +
call sub_101643C  +
mov esi [edi] +
mov [ebp+arg_4] eax +
xor ebx ebx +
jmp loc_1016C7E  +
push esi  +
push [ebp+arg_0]  +
mov ebx esi +
call sub_10110FF  +
test eax eax +
jg loc_1016C7B  +
mov esi [esi+0Ch] +
jmp loc_1016C7E  +
mov esi [esi+10h] +
cmp esi [edi+14h] +
jnz loc_1016C67  +
mov eax [ebp+arg_4] +
mov [eax+14h] ebx +
test ebx ebx +
jnz loc_1016C91  +
mov [edi] eax +
jmp loc_1016CA9  +
push ebx  +
push [ebp+arg_0]  +
call sub_10110FF  +
test eax eax +
mov eax [ebp+arg_4] +
jg loc_1016CA6  +
mov [ebx+0Ch] eax +
jmp loc_1016CA9  +
mov [ebx+10h] eax +
mov eax [ebp+arg_4] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1016C0D  +
push dword ptr [esi+4]  +
call sub_1019EA8  +
and dword ptr [esi+4] 0 +
pop ecx  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_101101A  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
push 0Ah  +
lea ecx [esi+4] +
call sub_1016CD6  +
push 0Ah  +
lea ecx [esi+1Ch] +
call sub_1016CD6  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_10055A0 +
call sub_100EC72  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
test eax eax +
jnz loc_1016D46  +
mov eax 80004003h +
jmp loc_1016D4E  +
mov dword ptr [eax] 1 +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+10h] +
call sub_100F9D6  +
mov esi [esi+4] +
test esi esi +
jz loc_1016D71  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
and dword ptr [esi+4] 0 +
and dword ptr [esi+0Ch] 0 +
lea ecx [esi+10h] +
call sub_100FA9A  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1016D78  +
mov dword ptr [esi] offset off_10055CC +
mov ecx dword_10309D8 +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
mov eax [esi] +
mov ecx [eax] +
push edi  +
lea edi [ebx+8] +
push edi  +
push offset dword_1009530  +
push eax  +
call dword ptr [ecx]  +
test eax eax +
jl loc_1016DE2  +
push 9  +
jmp loc_1016DF5  +
mov eax [esi] +
mov ecx [eax] +
push edi  +
push offset dword_1009560  +
push eax  +
call dword ptr [ecx]  +
test eax eax +
jl loc_1016DF9  +
push 0Dh  +
pop ecx  +
mov [ebx] cx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
mov eax [ecx+8] +
test eax eax +
jnz loc_1016E1B  +
mov eax 80004005h +
jmp loc_1016E25  +
mov eax [eax+4] +
mov eax [eax] +
mov [ecx+0Ch] eax +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+10h] +
xor ebx ebx +
cmp edi ebx +
jz loc_1016ED6  +
cmp dword ptr [ebp+0Ch] 1 +
jz loc_1016E52  +
cmp [ebp+14h] ebx +
jz loc_1016ED6  +
mov eax [ebp+14h] +
cmp eax ebx +
jz loc_1016E5B  +
mov [eax] ebx +
mov esi [ebp+8] +
cmp [esi+8] ebx +
jnz loc_1016E6A  +
mov eax 80004005h +
jmp loc_1016EDB  +
mov [ebp+8] ebx +
mov eax [esi+0Ch] +
mov ecx [esi+8] +
cmp eax [ecx+4] +
jz loc_1016EA0  +
cmp ebx [ebp+0Ch] +
jnb loc_1016EA0  +
add eax 8 +
push eax  +
push edi  +
call sub_1016DBC  +
mov [ebp+8] eax +
test eax eax +
jl loc_1016ECD  +
mov eax [esi+0Ch] +
mov eax [eax] +
add edi 10h +
mov [esi+0Ch] eax +
inc ebx  +
cmp dword ptr [ebp+8] 0 +
jge loc_1016E6D  +
cmp dword ptr [ebp+8] 0 +
jl loc_1016EBB  +
mov eax [ebp+14h] +
test eax eax +
jz loc_1016EAF  +
mov [eax] ebx +
cmp ebx [ebp+0Ch] +
jnb loc_1016EBB  +
mov dword ptr [ebp+8] 1 +
mov eax [ebp+8] +
jmp loc_1016EDB  +
push dword ptr [ebp+10h]  +
call ds:VariantClear  +
add dword ptr [ebp+10h] 10h +
cmp [ebp+10h] edi +
jb loc_1016EC0  +
xor ebx ebx +
jmp loc_1016E9A  +
***
mov eax 80004003h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+0Ch] eax +
jz loc_1016F17  +
mov ecx [ebp+8] +
push esi  +
mov edx [ecx+8] +
mov esi [ecx+0Ch] +
dec dword ptr [ebp+0Ch]  +
cmp esi [edx+4] +
jz loc_1016F13  +
mov edx esi +
mov edx [edx] +
mov [ecx+0Ch] edx +
cmp [ebp+0Ch] eax +
jnz loc_1016EF7  +
jmp loc_1016F16  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_10055CC +
mov dword ptr [esi+10h] 0C0000001h +
mov ecx dword_10309D8 +
mov eax [ecx] +
call dword ptr [eax+8]  +
mov ecx esi +
pop esi  +
jmp loc_1016D57  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1016F20  +
test byte ptr [ebp+8] 1 +
jz loc_1016F64  +
push esi  +
call sub_1019EA8  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
mov ecx offset off_1028270 +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_10102CF  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+1Ch]  +
mov ecx offset off_1028270 +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_10102F5  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx offset off_1028270 +
pop ebp  +
jmp loc_10103A9  +
***
call __EH_prolog3_catch  +
mov edi [ebp+8] +
xor esi esi +
cmp edi esi +
jnz loc_1016FE9  +
mov eax 80004003h +
jmp loc_1017050  +
push 30h  +
mov [edi] esi +
mov dword ptr [ebp-18h] 8007000Eh +
mov [ebp-14h] esi +
mov [ebp-4] esi +
call loc_1019E39  +
pop ecx  +
cmp eax esi +
jz loc_101700E  +
push esi  +
mov ecx eax +
call sub_1016D96  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
jmp loc_1017024  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_101701E +
retn   +
mov edi [ebp+8] +
mov esi [ebp-14h] +
test esi esi +
jz loc_1017049  +
lea ecx [esi+14h] +
call sub_100F8ED  +
mov ebx eax +
test ebx ebx +
jl loc_101703C  +
xor ebx ebx +
test ebx ebx +
jz loc_101704C  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+1Ch]  +
xor esi esi +
jmp loc_101704C  +
mov ebx [ebp-18h] +
mov [edi] esi +
mov eax ebx +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+0Ch] +
test ebx ebx +
jnz loc_1017071  +
mov eax 80004003h +
jmp loc_10170BF  +
and dword ptr [ebx] 0 +
push esi  +
push edi  +
lea eax [ebp+0Ch] +
push eax  +
call sub_1016FCD  +
mov esi [ebp+0Ch] +
mov edi eax +
test edi edi +
jl loc_10170AE  +
mov eax [ebp+8] +
lea ecx [eax+4] +
push ecx  +
push eax  +
mov ecx esi +
call sub_100FE1F  +
mov edi eax +
test edi edi +
jnz loc_10170AE  +
mov eax [esi] +
push ebx  +
push offset dword_1002770  +
push esi  +
call dword ptr [eax]  +
mov edi eax +
test edi edi +
jz loc_10170BB  +
test esi esi +
jz loc_10170BB  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+1Ch]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+0Ch] +
push ebx  +
mov ebx 80004003h +
test eax eax +
jz loc_1017134  +
and dword ptr [eax] 0 +
lea eax [ebp-4] +
push eax  +
call sub_1016FCD  +
mov ebx eax +
test ebx ebx +
jl loc_1017134  +
push esi  +
mov esi [ebp+8] +
mov eax [esi+4] +
push edi  +
push dword ptr [esi+8]  +
mov edi [ebp-4] +
push eax  +
mov ecx edi +
call sub_100FE1F  +
mov ebx eax +
test ebx ebx +
jl loc_1017125  +
push dword ptr [ebp+0Ch]  +
mov eax [esi+0Ch] +
push offset dword_1009540  +
mov ecx edi +
mov [edi+0Ch] eax +
call sub_101018E  +
mov ebx eax +
test ebx ebx +
jge loc_1017132  +
test edi edi +
jz loc_1017132  +
mov eax [edi] +
push 1  +
mov ecx edi +
call dword ptr [eax+1Ch]  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 8  +
***
call __EH_prolog3_catch  +
mov ebx ecx +
mov eax [ebp+8] +
xor esi esi +
cmp eax esi +
jnz loc_101715E  +
mov eax 80070057h +
jmp loc_10171DC  +
mov ecx [eax] +
lea edx [ebp-28h] +
push edx  +
push eax  +
mov [ebp-28h] esi +
call dword ptr [ecx+1Ch]  +
cmp eax esi +
mov [ebp-14h] eax +
jge loc_10171F0  +
push offset dword_1044E10  +
lea ecx [ebp+8] +
call sub_100BC7D  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp+8] +
push offset aFailedToGet_13  +
mov [ebp-4] esi +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_100C88F  +
add esp 0Ch +
mov [ebp-4] esi +
cmp [ebx] esi +
jz loc_10171CE  +
push dword ptr [ebp-14h]  +
mov esi offset unk_103CB30 +
push offset aChelphandlerAd  +
push dword ptr [ebp+8]  +
push offset aSSHr0xX  +
push 2022h  +
push esi  +
call sub_101A9EC  +
mov ecx [ebx] +
add esp 18h +
push esi  +
push 1  +
call sub_101865E  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov eax [ebp-14h] +
call __EH_epilog3  +
retn 8  +
mov eax [ebp-2Ch] +
mov [ebp-14h] eax +
mov eax offset loc_10171CE +
retn   +
mov edi ds:SysFreeString +
mov dword ptr [ebp-24h] 1 +
mov esi offset unk_103CB30 +
mov eax [ebp-24h] +
cmp eax [ebp-28h] +
jg loc_10171D9  +
xor eax eax +
mov [ebp-20h] eax +
mov dword ptr [ebp-4] 3 +
mov [ebp-1Ch] eax +
mov [ebp-18h] eax +
mov eax [ebp+8] +
mov ecx [eax] +
lea edx [ebp-20h] +
push edx  +
push dword ptr [ebp-24h]  +
mov byte ptr [ebp-4] 5 +
push eax  +
call dword ptr [ecx+20h]  +
mov [ebp-14h] eax +
test eax eax +
jge loc_101725E  +
cmp dword ptr [ebx] 0 +
jz loc_101744E  +
push dword ptr [ebp-24h]  +
push offset aFailedToGet_14  +
push 2022h  +
push esi  +
call sub_101A9EC  +
add esp 10h +
push esi  +
push 2  +
jmp loc_1017447  +
mov eax [ebp-20h] +
mov ecx [eax] +
lea edx [ebp-1Ch] +
push edx  +
push eax  +
call dword ptr [ecx+14h]  +
mov [ebp-14h] eax +
test eax eax +
jge loc_1017290  +
cmp dword ptr [ebx] 0 +
jz loc_101744E  +
push offset aFailedToGet_23  +
push 2022h  +
push esi  +
call sub_101A9EC  +
add esp 0Ch +
jmp loc_1017256  +
lea ecx [ebp-1Ch] +
call sub_1015F88  +
mov [ebp-14h] eax +
test eax eax +
jge loc_10172AF  +
cmp dword ptr [ebx] 0 +
jz loc_101744E  +
push offset aFailedToMakeTh  +
jmp loc_1017280  +
mov eax [ebp-20h] +
mov ecx [eax] +
lea edx [ebp-18h] +
push edx  +
push eax  +
call dword ptr [ecx+10h]  +
mov [ebp-14h] eax +
test eax eax +
jge loc_10172D3  +
cmp dword ptr [ebx] 0 +
jz loc_101744E  +
push offset aFailedToGet_24  +
jmp loc_1017280  +
lea ecx [ebp-18h] +
call sub_1015F88  +
mov [ebp-14h] eax +
test eax eax +
jge loc_10172F2  +
cmp dword ptr [ebx] 0 +
jz loc_101744E  +
push offset aFailedToMake_0  +
jmp loc_1017280  +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
lea ecx [ebx+4] +
call sub_1013851  +
test eax eax +
jnz loc_101730D  +
mov dword ptr [ebp-14h] 80004005h +
cmp dword ptr [ebp-14h] 0 +
jge loc_10173C8  +
push offset dword_1044E10  +
lea ecx [ebp+8] +
call sub_100BC7D  +
push dword ptr [ebp-1Ch]  +
lea eax [ebp+8] +
push offset aFailedToAddThe  +
push eax  +
mov byte ptr [ebp-4] 7 +
call sub_100C88F  +
mov dword ptr [ebp-4] 6 +
add esp 0Ch +
cmp dword ptr [ebx] 0 +
jz loc_1017370  +
push dword ptr [ebp-14h]  +
push offset aChelphandlerAd  +
push dword ptr [ebp+8]  +
push offset aSSHr0xX  +
push 2022h  +
push esi  +
call sub_101A9EC  +
mov ecx [ebx] +
add esp 18h +
push esi  +
push 1  +
call sub_101865E  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
push dword ptr [ebp-18h]  +
call edi  +
push dword ptr [ebp-1Ch]  +
call edi  +
jmp loc_10173AE  +
mov eax [ebp-30h] +
mov [ebp-14h] eax +
mov eax offset loc_1017393 +
retn   +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
push dword ptr [ebp-18h]  +
mov esi ds:SysFreeString +
call esi  +
push dword ptr [ebp-1Ch]  +
call esi  +
mov eax [ebp-20h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_10171D9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_10171D9  +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
lea ecx [ebx+1Ch] +
call sub_1013851  +
test eax eax +
jnz loc_10173E3  +
mov dword ptr [ebp-14h] 80004005h +
cmp dword ptr [ebp-14h] 0 +
jge loc_1017423  +
push offset dword_1044E10  +
lea ecx [ebp+8] +
call sub_100BC7D  +
push dword ptr [ebp-18h]  +
lea eax [ebp+8] +
push offset aFailedToAddT_0  +
push eax  +
mov byte ptr [ebp-4] 0Ah +
call sub_100C88F  +
mov dword ptr [ebp-4] 9 +
jmp loc_1017340  +
mov eax [ebp-34h] +
mov [ebp-14h] eax +
mov eax offset loc_1017393 +
retn   +
cmp dword ptr [ebx] 0 +
jz loc_101744E  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp-18h]  +
push dword ptr [ebp-1Ch]  +
push offset aSuccesfullyR_0  +
push 2022h  +
push esi  +
call sub_101A9EC  +
add esp 18h +
push esi  +
push 3  +
mov ecx [ebx] +
call sub_101865E  +
push dword ptr [ebp-18h]  +
call edi  +
push dword ptr [ebp-1Ch]  +
call edi  +
mov eax [ebp-20h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_1017469  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc dword ptr [ebp-24h]  +
jmp loc_1017202  +
***
mov edi edi +
push esi  +
mov esi ecx +
and dword ptr [esi+14h] 0 +
lea ecx [esi+4] +
call sub_1016D17  +
mov eax esi +
pop esi  +
retn   +
***
call __EH_prolog3_catch  +
mov edi ecx +
mov esi [ebp+0Ch] +
xor ebx ebx +
cmp esi ebx +
jnz loc_10174B1  +
mov eax 80070057h +
jmp loc_10178DF  +
mov [ebp-30h] ebx +
mov [ebp-24h] ebx +
push offset aWimmanager  +
lea ecx [ebp-2Ch] +
mov [ebp-4] ebx +
mov [ebp-34h] ebx +
call loc_10116D2  +
mov eax [esi] +
lea ecx [ebp-24h] +
push ecx  +
push esi  +
mov byte ptr [ebp-4] 1 +
call dword ptr [eax+38h]  +
cmp eax ebx +
mov [ebp-20h] eax +
jge loc_1017554  +
push offset dword_1044E10  +
lea ecx [ebp+0Ch] +
call sub_100BC7D  +
lea eax [ebp+0Ch] +
push offset aFailedToGet_22  +
push eax  +
mov byte ptr [ebp-4] 3 +
call sub_100C88F  +
pop ecx  +
pop ecx  +
mov dword ptr [ebp-4] 2 +
cmp [edi] ebx +
jz loc_1017538  +
push dword ptr [ebp-20h]  +
push offset aChelphandlerRe  +
push dword ptr [ebp+0Ch]  +
mov esi offset unk_103CB30 +
push offset aSSHr0xX  +
push 2022h  +
push esi  +
call sub_101A9EC  +
mov ecx [edi] +
add esp 18h +
push esi  +
push 1  +
call sub_101865E  +
mov ecx [ebp+0Ch] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
jmp loc_10178C2  +
mov eax [ebp-38h] +
mov [ebp-20h] eax +
mov eax offset loc_1017538 +
retn   +
mov eax [ebp-24h] +
mov ecx [eax] +
lea edx [ebp-30h] +
push edx  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
cmp esi ebx +
mov [ebp-20h] esi +
jge loc_10175AA  +
push offset dword_1044E10  +
lea ecx [ebp+0Ch] +
call sub_100BC7D  +
push esi  +
lea eax [ebp+0Ch] +
push offset aFailedToGet_12  +
push eax  +
mov byte ptr [ebp-4] 6 +
call sub_100C88F  +
add esp 0Ch +
mov dword ptr [ebp-4] 5 +
cmp [edi] ebx +
jz loc_1017538  +
push esi  +
jmp loc_101750E  +
mov eax [ebp-3Ch] +
mov [ebp-20h] eax +
mov eax offset loc_1017538 +
retn   +
cmp [edi] ebx +
mov esi offset unk_103CB30 +
mov ebx 2022h +
jz loc_10175D1  +
push offset aGotTheCollecti  +
push ebx  +
push esi  +
call sub_101A9EC  +
mov ecx [edi] +
add esp 0Ch +
push esi  +
push 3  +
call sub_101865E  +
mov dword ptr [ebp-28h] 1 +
mov eax [ebp-28h] +
cmp eax [ebp-30h] +
jg loc_1017893  +
xor eax eax +
mov [ebp-14h] eax +
mov [ebp-1Ch] eax +
mov [ebp-18h] eax +
mov [ebp+0Ch] eax +
mov eax [ebp-24h] +
mov ecx [eax] +
lea edx [ebp-14h] +
push edx  +
push dword ptr [ebp-28h]  +
mov byte ptr [ebp-4] 0Bh +
push eax  +
call dword ptr [ecx+20h]  +
mov [ebp-20h] eax +
test eax eax +
jge loc_10176CE  +
push offset dword_1044E10  +
lea ecx [ebp+8] +
call sub_100BC7D  +
push dword ptr [ebp-20h]  +
lea eax [ebp+8] +
push offset aFailedToGetAPr  +
push 0C150001Fh  +
push eax  +
mov byte ptr [ebp-4] 0Dh +
call sub_10163ED  +
add esp 10h +
cmp dword ptr [edi] 0 +
mov dword ptr [ebp-4] 0Ch +
jz loc_101766B  +
push dword ptr [ebp-20h]  +
push offset aChelphandlerRe  +
push dword ptr [ebp+8]  +
push offset aSSHr0xX  +
push ebx  +
push esi  +
call sub_101A9EC  +
mov ecx [edi] +
add esp 18h +
push esi  +
push 1  +
call sub_101865E  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
push dword ptr [ebp+0Ch]  +
call ds:SysFreeString  +
mov eax [ebp-18h] +
mov byte ptr [ebp-4] 9 +
test eax eax +
jz loc_1017690  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-1Ch] +
mov byte ptr [ebp-4] 8 +
test eax eax +
jz loc_10176A1  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-14h] +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_10178C2  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_10178C2  +
mov eax [ebp-40h] +
mov [ebp-20h] eax +
mov dword ptr [ebp-4] 0Ch +
mov eax offset loc_101766B +
retn   +
mov eax [ebp-14h] +
mov ecx [eax] +
lea edx [ebp+0Ch] +
push edx  +
push eax  +
call dword ptr [ecx+28h]  +
test eax eax +
jl loc_1017702  +
cmp dword ptr [edi] 0 +
jz loc_1017713  +
push dword ptr [ebp+0Ch]  +
push offset aAttemptingToAd  +
push ebx  +
push esi  +
call sub_101A9EC  +
mov ecx [edi] +
add esp 10h +
push esi  +
push 3  +
call sub_101865E  +
jmp loc_1017713  +
push offset aUnknownProvide  +
lea ecx [ebp+0Ch] +
mov byte ptr [ebp-4] 0Fh +
call sub_100BB74  +
lea eax [ebp+0Ch] +
push eax  +
lea ecx [ebp-2Ch] +
mov dword ptr [ebp-4] 0Bh +
call sub_1010F10  +
test al al +
jz loc_1017731  +
mov dword ptr [ebp-34h] 1 +
mov eax [ebp-14h] +
mov ecx [eax] +
lea edx [ebp-1Ch] +
push edx  +
push offset dword_1001498  +
push eax  +
call dword ptr [ecx]  +
cmp eax 80004002h +
jz loc_10177E9  +
test eax eax +
jge loc_1017764  +
cmp dword ptr [edi] 0 +
jz loc_10177E9  +
push dword ptr [ebp+0Ch]  +
push offset aFailedWhileTry  +
jmp loc_10177D5  +
cmp dword ptr [edi] 0 +
jz loc_1017785  +
push dword ptr [ebp+0Ch]  +
push offset aGettingTheHelp  +
push ebx  +
push esi  +
call sub_101A9EC  +
mov ecx [edi] +
add esp 10h +
push esi  +
push 3  +
call sub_101865E  +
mov eax [ebp-1Ch] +
mov ecx [eax] +
lea edx [ebp-18h] +
push edx  +
push eax  +
call dword ptr [ecx+14h]  +
test eax eax +
jl loc_10177E9  +
cmp dword ptr [edi] 0 +
jz loc_10177B7  +
push dword ptr [ebp+0Ch]  +
push offset aRegisteringInf  +
push ebx  +
push esi  +
call sub_101A9EC  +
mov ecx [edi] +
add esp 10h +
push esi  +
push 3  +
call sub_101865E  +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
push dword ptr [ebp-18h]  +
call sub_1017140  +
test eax eax +
jge loc_10177E9  +
cmp dword ptr [edi] 0 +
jz loc_10177E9  +
push dword ptr [ebp+0Ch]  +
push offset aFailedToAddCom  +
push ebx  +
push esi  +
call sub_101A9EC  +
mov ecx [edi] +
add esp 10h +
push esi  +
push 2  +
call sub_101865E  +
push dword ptr [ebp+0Ch]  +
call ds:SysFreeString  +
mov eax [ebp-18h] +
mov byte ptr [ebp-4] 9 +
test eax eax +
jz loc_1017803  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-1Ch] +
mov byte ptr [ebp-4] 8 +
test eax eax +
jz loc_1017814  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-14h] +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_1017825  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc dword ptr [ebp-28h]  +
jmp loc_10175D8  +
mov dword ptr [ebp-4] 0Bh +
mov eax offset loc_101783A +
retn   +
push dword ptr [ebp+0Ch]  +
mov esi ds:SysFreeString +
call esi  +
mov eax [ebp-18h] +
mov byte ptr [ebp-4] 9 +
test eax eax +
jz loc_1017856  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-1Ch] +
mov byte ptr [ebp-4] 8 +
test eax eax +
jz loc_1017867  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-14h] +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_1017878  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push dword ptr [ebp-2Ch]  +
call esi  +
mov eax [ebp-24h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_101788E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-44h] +
jmp loc_10178DF  +
cmp dword ptr [ebp-34h] 0 +
jnz loc_10178C2  +
cmp dword ptr [ebp+8] 0 +
jnz loc_10178C2  +
cmp dword ptr [edi] 0 +
jz loc_10178C2  +
push offset aWimmanager  +
push offset aFailedToLoadS_  +
push ebx  +
push esi  +
call sub_101A9EC  +
mov ecx [edi] +
add esp 10h +
push esi  +
push 2  +
call sub_101865E  +
push dword ptr [ebp-2Ch]  +
call ds:SysFreeString  +
mov eax [ebp-24h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_10178DC  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-20h] +
call __EH_epilog3  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1017476  +
mov dword ptr [esi] offset off_1005BD0 +
mov dword ptr [esi+4] offset off_1005BA4 +
mov ecx dword_10309D8 +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_1005BE4  +
push ecx  +
call sub_10100E8  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
inc dword ptr [eax+14h]  +
mov eax [eax+14h] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_1017919  +
pop ebp  +
retn 0Ch  +
***
sub dword ptr [esp+4] 4 +
jmp loc_101061D  +
***
sub dword ptr [esp+4] 4 +
jmp loc_101794F  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1005BD0 +
mov dword ptr [esi+4] offset off_1005BA4 +
mov dword ptr [esi+14h] 0C0000001h +
mov ecx dword_10309D8 +
mov eax [ecx] +
call dword ptr [eax+8]  +
lea ecx [esi+8] +
pop esi  +
jmp loc_1016CB8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1017989  +
test byte ptr [ebp+8] 1 +
jz loc_10179D5  +
push esi  +
call sub_1019EA8  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3_catch  +
mov eax [ebp+10h] +
xor esi esi +
cmp eax esi +
jnz loc_10179FD  +
mov eax 80004003h +
jmp loc_1017A5F  +
push 18h  +
mov [eax] esi +
mov dword ptr [ebp-14h] 8007000Eh +
mov [ebp-18h] esi +
mov [ebp-4] esi +
call loc_1019E39  +
pop ecx  +
cmp eax esi +
jz loc_1017A24  +
push dword ptr [ebp+8]  +
mov ecx eax +
call sub_10178EC  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
jmp loc_1017A37  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_1017A34 +
retn   +
mov esi [ebp-18h] +
test esi esi +
jz loc_1017A5C  +
push dword ptr [ebp+10h]  +
inc dword ptr [esi+14h]  +
push dword ptr [ebp+0Ch]  +
dec dword ptr [esi+14h]  +
mov eax [esi] +
push esi  +
call dword ptr [eax]  +
mov [ebp-14h] eax +
test eax eax +
jz loc_1017A5C  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+10h]  +
mov eax [ebp-14h] +
call __EH_epilog3  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
push offset dword_1005C08  +
push 0  +
call sub_10179E1  +
pop ebp  +
retn 4  +
***
call __EH_prolog3_catch  +
mov edi ecx +
mov [ebp-1Ch] edi +
xor esi esi +
mov [ebp-20h] esi +
mov [ebp-4] esi +
mov [ebp-28h] esi +
push offset aDismCommandLin  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call sub_100BB74  +
xor ebx ebx +
lea eax [ebp-20h] +
inc ebx  +
push eax  +
mov [ebp-4] ebx +
call sub_1017A6C  +
cmp eax esi +
mov [ebp-14h] eax +
jge loc_1017B4B  +
push offset dword_1044E10  +
lea ecx [ebp-18h] +
call sub_100BC7D  +
lea eax [ebp-18h] +
push offset aFailedToCrea_2  +
push eax  +
mov byte ptr [ebp-4] 5 +
call sub_100C88F  +
pop ecx  +
pop ecx  +
mov dword ptr [ebp-4] 4 +
cmp [edi] esi +
jz loc_1017B27  +
push dword ptr [ebp-14h]  +
push offset aChelphandlerIn  +
push dword ptr [ebp-18h]  +
mov edi offset unk_103CB30 +
push offset aSSHr0xX  +
push 2022h  +
push edi  +
call sub_101A9EC  +
mov eax [ebp-1Ch] +
mov ecx [eax] +
add esp 18h +
push edi  +
push ebx  +
call sub_101865E  +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
jmp loc_1018146  +
mov eax [ebp-30h] +
mov [ebp-14h] eax +
mov eax offset loc_1017B43 +
retn   +
mov ecx [ebp-18h] +
jmp loc_101813C  +
push esi  +
push offset off_10282C8  +
push offset off_1027B6C  +
push esi  +
push dword ptr [ebp-20h]  +
call __RTDynamicCast  +
add esp 14h +
mov [ebp-2Ch] eax +
cmp eax esi +
jnz loc_1017BB2  +
mov edi 8007000Eh +
push offset dword_1044E10  +
lea ecx [ebp-18h] +
mov [ebp-14h] edi +
call sub_100BC7D  +
lea eax [ebp-18h] +
push offset aFailedToGetUnd  +
push eax  +
mov byte ptr [ebp-4] 8 +
call sub_100C88F  +
mov eax [ebp-1Ch] +
pop ecx  +
pop ecx  +
mov dword ptr [ebp-4] 7 +
cmp [eax] esi +
jz loc_1017B27  +
push edi  +
jmp loc_1017AFB  +
mov eax [ebp-34h] +
mov [ebp-14h] eax +
mov eax offset loc_1017B43 +
retn   +
test byte ptr dword_1040D54 bl +
jnz loc_1017F66  +
or dword_1040D54 ebx +
mov ecx 3E8h +
lea eax [ecx+7] +
lea edx [ecx+9] +
mov dword_1040B78 esi +
mov dword_1040B7C esi +
mov dword_1040B80 ecx +
mov dword_1040B84 esi +
mov dword_1040B88 3E9h +
mov dword_1040B8C 3EAh +
mov dword_1040B90 esi +
mov dword_1040B94 esi +
mov dword_1040B98 ecx +
mov dword_1040B9C eax +
mov dword_1040BA0 esi +
mov dword_1040BA4 3F0h +
mov dword_1040BA8 esi +
mov dword_1040BAC esi +
mov dword_1040BB0 esi +
mov dword_1040BB4 ecx +
mov dword_1040BB8 edx +
mov dword_1040BBC esi +
mov dword_1040BC0 3F2h +
mov dword_1040BC4 esi +
mov dword_1040BC8 esi +
mov dword_1040BCC esi +
mov dword_1040BD0 ecx +
mov dword_1040BD4 3EEh +
mov dword_1040BD8 esi +
mov dword_1040BDC esi +
mov dword_1040BE0 esi +
mov dword_1040BE4 esi +
mov dword_1040BE8 ebx +
mov dword_1040BEC eax +
mov dword_1040BF0 464h +
mov dword_1040BF4 465h +
mov dword_1040BF8 466h +
mov dword_1040BFC 467h +
mov dword_1040C00 esi +
mov dword_1040C04 ebx +
mov dword_1040C08 eax +
mov dword_1040C0C 460h +
mov dword_1040C10 461h +
mov dword_1040C14 462h +
mov dword_1040C18 463h +
mov dword_1040C1C esi +
mov dword_1040C20 ebx +
mov dword_1040C24 eax +
mov dword_1040C28 45Ch +
mov dword_1040C2C 45Dh +
mov dword_1040C30 45Eh +
mov dword_1040C34 45Fh +
mov dword_1040C38 esi +
mov dword_1040C3C ebx +
mov dword_1040C40 eax +
mov dword_1040C44 458h +
mov dword_1040C48 459h +
mov dword_1040C4C 45Ah +
mov dword_1040C50 45Bh +
mov dword_1040C54 esi +
mov dword_1040C58 ebx +
mov dword_1040C5C eax +
mov dword_1040C60 454h +
mov dword_1040C64 455h +
mov dword_1040C68 456h +
mov dword_1040C6C 457h +
mov dword_1040C70 esi +
mov dword_1040C74 ebx +
mov dword_1040C78 eax +
mov dword_1040C7C 450h +
mov dword_1040C80 451h +
mov dword_1040C84 452h +
mov dword_1040C88 453h +
mov dword_1040C8C esi +
mov dword_1040C90 ebx +
mov dword_1040C94 eax +
mov dword_1040C98 44Ch +
mov dword_1040C9C 44Dh +
mov dword_1040CA0 44Eh +
mov dword_1040CA4 44Fh +
mov dword_1040CA8 esi +
push offset sub_102164D  +
mov dword_1040CAC ebx +
mov dword_1040CB0 eax +
mov dword_1040CB4 46Eh +
mov dword_1040CB8 46Fh +
mov dword_1040CBC 470h +
mov dword_1040CC0 471h +
mov dword_1040CC4 esi +
mov dword_1040CC8 ebx +
mov dword_1040CCC eax +
mov dword_1040CD0 472h +
mov dword_1040CD4 473h +
mov dword_1040CD8 474h +
mov dword_1040CDC 475h +
mov dword_1040CE0 esi +
mov dword_1040CE4 ebx +
mov dword_1040CE8 edx +
mov dword_1040CEC 468h +
mov dword_1040CF0 469h +
mov dword_1040CF4 46Ah +
mov dword_1040CF8 46Bh +
mov dword_1040CFC esi +
mov dword_1040D00 ebx +
mov dword_1040D04 edx +
mov dword_1040D08 46Ch +
mov dword_1040D0C 46Dh +
mov dword_1040D10 esi +
mov dword_1040D14 esi +
mov dword_1040D18 esi +
mov dword_1040D1C esi +
mov dword_1040D20 esi +
mov dword_1040D24 3F3h +
mov dword_1040D28 esi +
mov dword_1040D2C esi +
mov dword_1040D30 esi +
mov dword_1040D34 esi +
mov dword_1040D38 esi +
mov dword_1040D3C esi +
mov dword_1040D40 3EBh +
mov dword_1040D44 esi +
mov dword_1040D48 3ECh +
mov dword_1040D4C 3EDh +
mov dword_1040D50 esi +
call sub_101A678  +
pop ecx  +
mov [ebp-24h] esi +
cmp dword ptr [ebp-24h] 11h +
jnb loc_10180B6  +
mov [ebp-18h] esi +
lea eax [ebp-18h] +
push eax  +
mov eax [ebp-24h] +
imul eax eax +
sub esp 1Ch +
add eax offset dword_1040B78 +
mov ecx esp +
mov [ebp-14h] esp +
push eax  +
mov byte ptr [ebp-4] 0Ah +
call sub_10162A3  +
mov ecx edi +
call sub_101603E  +
cmp eax esi +
mov [ebp-14h] eax +
jge loc_101804E  +
push offset dword_1044E10  +
lea ecx [ebp-24h] +
call sub_100BC7D  +
lea eax [ebp-24h] +
push offset aFailedToCrea_3  +
push eax  +
mov byte ptr [ebp-4] 0Ch +
call sub_100C88F  +
mov dword ptr [ebp-4] 0Bh +
pop ecx  +
pop ecx  +
cmp [edi] esi +
jz loc_1018004  +
push dword ptr [ebp-14h]  +
mov edi offset unk_103CB30 +
push offset aChelphandlerIn  +
push dword ptr [ebp-24h]  +
push offset aSSHr0xX  +
push 2022h  +
push edi  +
call sub_101A9EC  +
mov eax [ebp-1Ch] +
mov ecx [eax] +
add esp 18h +
push edi  +
push ebx  +
call sub_101865E  +
mov ecx [ebp-24h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov [ebp-4] bl +
jmp loc_1018038  +
mov eax [ebp-38h] +
mov [ebp-14h] eax +
mov dword ptr [ebp-4] 0Bh +
mov eax offset loc_1018027 +
retn   +
mov ecx [ebp-24h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov byte ptr [ebp-4] 1 +
xor esi esi +
mov eax [ebp-18h] +
cmp eax esi +
jz loc_1018146  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1018146  +
push dword ptr [ebp-18h]  +
mov ecx [ebp-2Ch] +
call sub_101FE0F  +
cmp eax esi +
mov [ebp-14h] eax +
jge loc_101809E  +
push offset dword_1044E10  +
lea ecx [ebp-24h] +
call sub_100BC7D  +
lea eax [ebp-24h] +
push offset aFailedToAddT_1  +
push eax  +
mov byte ptr [ebp-4] 0Fh +
call sub_100C88F  +
mov dword ptr [ebp-4] 0Eh +
jmp loc_1017FCF  +
mov eax [ebp-3Ch] +
mov [ebp-14h] eax +
mov dword ptr [ebp-4] 0Eh +
mov eax offset loc_1018027 +
retn   +
mov eax [ebp-18h] +
mov [ebp-4] bl +
cmp eax esi +
jz loc_10180AE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc dword ptr [ebp-24h]  +
jmp loc_1017F69  +
push dword ptr [ebp-28h]  +
mov ecx edi +
push dword ptr [ebp-20h]  +
call sub_1017140  +
cmp eax esi +
mov [ebp-14h] eax +
jge loc_1018146  +
push offset dword_1044E10  +
lea ecx [ebp-24h] +
call sub_100BC7D  +
lea eax [ebp-24h] +
push offset aFailedToRegi_2  +
push eax  +
mov byte ptr [ebp-4] 12h +
call sub_100C88F  +
pop ecx  +
pop ecx  +
mov dword ptr [ebp-4] 11h +
cmp [edi] esi +
jz loc_1018125  +
push dword ptr [ebp-14h]  +
mov edi offset unk_103CB30 +
push offset aChelphandlerIn  +
push dword ptr [ebp-24h]  +
push offset aSSHr0xX  +
push 2022h  +
push edi  +
call sub_101A9EC  +
mov eax [ebp-1Ch] +
mov ecx [eax] +
add esp 18h +
push edi  +
push ebx  +
call sub_101865E  +
mov ecx [ebp-24h] +
jmp loc_1017B2A  +
mov eax [ebp-40h] +
mov [ebp-14h] eax +
mov eax offset loc_1018139 +
retn   +
mov ecx [ebp-24h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
xor esi esi +
push dword ptr [ebp-28h]  +
call ds:SysFreeString  +
mov eax [ebp-20h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax esi +
jz loc_1018160  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-14h] +
jmp loc_1018188  +
mov eax offset loc_101816B +
retn   +
push dword ptr [ebp-28h]  +
call ds:SysFreeString  +
mov eax [ebp-20h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_1018185  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-44h] +
call __EH_epilog3  +
retn   +
***
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_10181A7  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+8] +
mov [esi] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_10181C9  +
mov eax 80004003h +
jmp loc_10181DB  +
mov edx [ecx] +
mov [eax] edx +
mov ecx [ecx] +
test ecx ecx +
jz loc_10181D9  +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+4]  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
lea ecx [ebp+arg_0] +
call loc_10116D2  +
lea eax [ebp+arg_0] +
push eax  +
mov ecx esi +
call sub_1010F10  +
push [ebp+arg_0]  +
mov bl al +
call ds:SysFreeString  +
pop esi  +
mov al bl +
pop ebx  +
pop ebp  +
retn 4  +
***
push 24h  +
mov eax offset loc_10210D8 +
call __EH_prolog3  +
mov edi ecx +
xor ebx ebx +
mov [ebp-24h] ebx +
mov [ebp-30h] ebx +
mov [ebp-4] ebx +
mov [ebp-2Ch] ebx +
mov [ebp-20h] ebx +
mov [ebp-1Ch] ebx +
mov [ebp-28h] ebx +
mov eax [ebp+0Ch] +
mov [eax] ebx +
push dword ptr [edi+4]  +
lea esi [edi+0Ch] +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 4 +
mov [esi] ebx +
call sub_100BB74  +
mov eax [ebp+8] +
mov ecx [eax] +
lea edx [ebp-20h] +
push edx  +
push eax  +
call dword ptr [ecx+38h]  +
cmp eax ebx +
mov [ebp-14h] eax +
jl loc_1018403  +
mov eax [ebp-20h] +
mov ecx [eax] +
lea edx [ebp-24h] +
push edx  +
push eax  +
call dword ptr [ecx+1Ch]  +
cmp eax ebx +
mov [ebp-14h] eax +
jl loc_1018403  +
xor eax eax +
inc eax  +
cmp [ebp-24h] eax +
mov [ebp-18h] eax +
jl loc_10183C1  +
cmp [esi] ebx +
jnz loc_1018403  +
mov [ebp+8] ebx +
mov [ebp-10h] ebx +
mov eax [ebp-20h] +
mov ecx [eax] +
lea edx [ebp-10h] +
push edx  +
push dword ptr [ebp-18h]  +
mov byte ptr [ebp-4] 6 +
push eax  +
call dword ptr [ecx+20h]  +
mov [ebp-14h] eax +
cmp eax ebx +
mov eax [ebp-10h] +
jl loc_101830E  +
mov ecx [eax] +
lea edx [ebp+8] +
push edx  +
push (offset dword_1001428+10h)  +
push eax  +
call dword ptr [ecx]  +
cmp eax ebx +
mov [ebp-14h] eax +
jge loc_10182EC  +
cmp eax 80004002h +
mov eax [ebp-10h] +
mov byte ptr [ebp-4] 5 +
jnz loc_1018312  +
jmp loc_1018397  +
mov eax [ebp+8] +
mov ecx [eax] +
push esi  +
push dword ptr [ebp-2Ch]  +
push eax  +
call dword ptr [ecx+2Ch]  +
cmp eax ebx +
mov [ebp-14h] eax +
jge loc_1018336  +
cmp eax 80070032h +
jz loc_1018390  +
mov eax [ebp-10h] +
mov byte ptr [ebp-4] 5 +
cmp eax ebx +
jz loc_101831C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+8] +
mov byte ptr [ebp-4] 4 +
cmp eax ebx +
jz loc_1018403  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1018403  +
mov eax [ebp-10h] +
mov ecx [eax] +
lea edx [ebp-30h] +
push edx  +
push eax  +
call dword ptr [ecx+28h]  +
cmp eax ebx +
mov [ebp-14h] eax +
jl loc_101830B  +
push offset aFoldermanager  +
lea ecx [ebp-30h] +
call sub_10181E4  +
test al al +
jz loc_101836C  +
push dword ptr [esi]  +
lea ecx [ebp-1Ch] +
call near ptr dword_1018190+3  +
mov [esi] ebx +
lea eax [ebp-28h] +
jmp loc_101837C  +
mov eax [esi] +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
lea eax [edi+8] +
push eax  +
lea ecx [ebp+8] +
call sub_10181B6  +
cmp eax ebx +
mov [ebp-14h] eax +
jl loc_101830B  +
mov eax [ebp-10h] +
mov byte ptr [ebp-4] 5 +
cmp eax ebx +
jz loc_10183A1  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+8] +
mov byte ptr [ebp-4] 4 +
cmp eax ebx +
jz loc_10183B2  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc dword ptr [ebp-18h]  +
mov eax [ebp-18h] +
cmp eax [ebp-24h] +
jle loc_1018298  +
cmp [esi] ebx +
jnz loc_1018403  +
cmp [ebp-1Ch] ebx +
jz loc_10183FC  +
push esi  +
lea ecx [ebp-1Ch] +
call sub_10181B6  +
cmp eax ebx +
mov [ebp-14h] eax +
jl loc_1018403  +
add edi 8 +
push edi  +
lea ecx [ebp-28h] +
call sub_10181B6  +
cmp eax ebx +
mov [ebp-14h] eax +
jl loc_1018403  +
mov esi [esi] +
mov eax [ebp+0Ch] +
mov [eax] esi +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
jmp loc_1018403  +
mov dword ptr [ebp-14h] 80070032h +
mov eax [ebp-28h] +
mov byte ptr [ebp-4] 3 +
cmp eax ebx +
jz loc_1018414  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-1Ch] +
mov byte ptr [ebp-4] 2 +
cmp eax ebx +
jz loc_1018425  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-20h] +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_1018436  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push dword ptr [ebp-2Ch]  +
mov esi ds:SysFreeString +
call esi  +
push dword ptr [ebp-30h]  +
call esi  +
mov eax [ebp-14h] +
call __EH_epilog3  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+4] +
mov ecx edi +
mov dword ptr [esi] offset off_1005E0C +
call sub_100BD92  +
mov ecx edi +
call sub_100BC41  +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
mov ecx [ecx+4] +
sub ecx 10h +
jmp sub_100B8FC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [esi+4] +
sub ecx 10h +
mov dword ptr [esi] offset off_1005E0C +
call sub_100B8FC  +
test byte ptr [ebp+8] 1 +
jz loc_10184B9  +
push esi  +
call sub_1019EA8  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1018456  +
and dword ptr [esi+0Ch] 0 +
and dword ptr [esi+8] 0 +
mov dword ptr [esi] offset off_1005E1C +
mov eax esi +
pop esi  +
retn   +
***
push 0Ch  +
mov eax offset loc_10210F8 +
call __EH_prolog3_catch  +
mov esi ecx +
mov eax [ebp+0Ch] +
and dword ptr [eax] 0 +
mov eax [ebp+8] +
mov ecx [eax] +
and dword ptr [ebp-14h] 0 +
lea edi [esi+8] +
push edi  +
push (offset dword_1001428+10h)  +
push eax  +
call dword ptr [ecx]  +
mov ebx eax +
test ebx ebx +
jl loc_101856A  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+4] +
call sub_1011DD7  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [ebp-14h] eax +
mov eax [edi] +
mov ecx [eax] +
add esi 0Ch +
push esi  +
push dword ptr [ebp-14h]  +
push eax  +
call dword ptr [ecx+2Ch]  +
mov ebx eax +
test ebx ebx +
jl loc_101855B  +
mov esi [esi] +
mov eax [ebp+0Ch] +
mov [eax] esi +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
jmp loc_101855B  +
mov eax [ebp-18h] +
mov [ebp+0Ch] eax +
mov eax offset loc_1018558 +
retn   +
***
mov ebx [ebp+0Ch] +
cmp dword ptr [ebp-14h] 0 +
jz loc_101856A  +
push dword ptr [ebp-14h]  +
call ds:SysFreeString  +
mov eax ebx +
call __EH_epilog3  +
retn 8  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1005E1C +
mov eax [esi+0Ch] +
and dword ptr [ebp-4] 0 +
test eax eax +
jz loc_10185A5  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi+0Ch] 0 +
mov eax [esi+8] +
test eax eax +
jz loc_10185B6  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi+8] 0 +
mov ecx [esi+4] +
sub ecx 10h +
mov dword ptr [esi] offset off_1005E0C +
call sub_100B8FC  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1018579  +
test byte ptr [ebp+8] 1 +
jz loc_10185EC  +
push esi  +
call sub_1019EA8  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push offset unk_1044EAC  +
push 10h  +
call ??2@YAPAXIABUnothrow_t@std@@@Z  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_101861B  +
mov ecx eax +
call sub_10184C5  +
mov esi eax +
jmp loc_101861D  +
xor esi esi +
test esi esi +
jz loc_101862C  +
push [ebp+arg_0]  +
lea ecx [esi+4] +
call sub_100CB21  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_101864A  +
push eax  +
call ds:SysFreeString  +
mov esi [esi+8] +
test esi esi +
jz loc_1018657  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi+8] 0 +
jnz loc_101867B  +
push offset OutputString  +
call ds:OutputDebugStringW  +
xor eax eax +
jmp loc_10186B0  +
push edi  +
push [ebp+arg_4]  +
call ds:SysAllocString  +
mov edi eax +
test edi edi +
jnz loc_1018692  +
mov esi 8007000Eh +
jmp loc_10186AD  +
mov eax [esi+8] +
mov ecx [eax] +
push edi  +
push dword ptr [esi]  +
push dword ptr [esi+4]  +
push [ebp+arg_0]  +
push eax  +
call dword ptr [ecx+20h]  +
push edi  +
mov esi eax +
call ds:SysFreeString  +
mov eax esi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov [ebp+var_4] ecx +
test ecx ecx +
jz loc_1018722  +
push ebx  +
push esi  +
push edi  +
mov ebx offset dword_100167C +
push ebx  +
mov edi 2022h +
push edi  +
mov esi offset unk_1040D58 +
push esi  +
call sub_101A9EC  +
mov ecx [ebp+var_4] +
add esp 0Ch +
push esi  +
push 3  +
call sub_101865E  +
push offset aEndingDism_exe  +
push edi  +
push esi  +
call sub_101A9EC  +
mov ecx [ebp+var_4] +
add esp 0Ch +
push esi  +
push 3  +
call sub_101865E  +
push ebx  +
push edi  +
push esi  +
call sub_101A9EC  +
mov ecx [ebp+var_4] +
add esp 0Ch +
push esi  +
push 3  +
call sub_101865E  +
pop edi  +
pop esi  +
pop ebx  +
xor eax eax +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
mov esi [ebp+arg_0] +
and dword ptr [esi] 0 +
mov eax [ecx+8] +
test eax eax +
jz loc_101875A  +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push eax  +
call dword ptr [ecx+2Ch]  +
xor ecx ecx +
cmp word ptr [ebp+var_4] cx +
setnz cl  +
mov [esi] ecx +
jmp loc_101875F  +
mov eax 80004003h +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_1018782  +
mov eax [ecx+8] +
push [ebp+arg_0]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+24h]  +
jmp loc_1018787  +
mov eax 80004003h +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
xor eax eax +
lea ecx [esi+8] +
mov [ecx] eax +
push eax  +
mov [esi] eax +
call sub_100FCF7  +
mov eax esi +
pop esi  +
retn   +
***
call __EH_prolog3_GS  +
mov [ebp-128h] ecx +
push offset dword_1044E10  +
lea ecx [ebp-12Ch] +
call sub_100BC7D  +
push 9  +
pop ecx  +
xor eax eax +
mov esi 114h +
xor ebx ebx +
lea edi [ebp-154h] +
push esi  +
stos   +
lea eax [ebp-124h] +
push ebx  +
push eax  +
mov [ebp-4] ebx +
call memset  +
add esp 0Ch +
lea eax [ebp-154h] +
push eax  +
mov [ebp-124h] esi +
call ds:GetSystemInfo  +
lea eax [ebp-12Ch] +
push eax  +
movzx eax word ptr [ebp-154h] +
push eax  +
call sub_101C7ED  +
mov [ebp-130h] eax +
lea eax [ebp-124h] +
push eax  +
call ds:GetVersionExW  +
test eax eax +
jnz loc_101887F  +
mov ebx ds:GetLastError +
call ebx  +
mov edi 0FFFFh +
mov esi 80070000h +
test eax eax +
jle loc_1018854  +
and eax edi +
or eax esi +
test eax eax +
jge loc_1018862  +
call ebx  +
test eax eax +
jle loc_1018867  +
and eax edi +
or eax esi +
jmp loc_1018867  +
mov eax 80004005h +
mov esi eax +
mov ecx [ebp-12Ch] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov eax esi +
call sub_101A57D  +
retn   +
cmp [ebp-128h] ebx +
jz loc_1018924  +
mov ebx offset dword_100167C +
push ebx  +
mov edi 2022h +
push edi  +
mov esi offset unk_1040D58 +
push esi  +
call sub_101A9EC  +
mov ecx [ebp-128h] +
add esp 0Ch +
push esi  +
push 3  +
call sub_101865E  +
push offset aStartingDism_e  +
push edi  +
push esi  +
call sub_101A9EC  +
mov ecx [ebp-128h] +
add esp 0Ch +
push esi  +
push 3  +
call sub_101865E  +
push ebx  +
push edi  +
push esi  +
call sub_101A9EC  +
mov ecx [ebp-128h] +
add esp 0Ch +
push esi  +
push 3  +
call sub_101865E  +
push dword ptr [ebp-140h]  +
push dword ptr [ebp-12Ch]  +
push dword ptr [ebp-118h]  +
push dword ptr [ebp-11Ch]  +
push dword ptr [ebp-120h]  +
push offset aHostMachineInf  +
push edi  +
push esi  +
call sub_101A9EC  +
mov ecx [ebp-128h] +
add esp 20h +
push esi  +
push 3  +
call sub_101865E  +
mov esi [ebp-130h] +
jmp loc_1018869  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_8]  +
mov esi ecx +
lea ecx [esi+8] +
call sub_100FCF7  +
mov eax [ebp+arg_4] +
push [ebp+arg_0]  +
mov [esi+4] eax +
call ds:SysAllocString  +
mov [esi] eax +
test eax eax +
jnz loc_1018963  +
mov eax 8007000Eh +
jmp loc_101896A  +
mov ecx esi +
call sub_10187AD  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101A89B  +
mov eax [ebp+arg_0] +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101A91D  +
mov eax [ebp+arg_0] +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
sub esp 0Ch +
test ecx ecx +
ja loc_10189D6  +
xor ecx ecx +
push ecx  +
call loc_1019E39  +
pop ecx  +
leave   +
retn 8  +
***
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 1 +
jnb loc_10189CB  +
push 0  +
lea ecx [ebp-0Ch] +
call sub_100E95D  +
push offset dword_1021D68  +
lea eax [ebp-0Ch] +
push eax  +
call _CxxThrowException  +
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1018974  +
add esp 10h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1018997  +
add esp 10h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
push dword ptr [ebp+0Ch]  +
push off_1028380[esi]  +
call sub_100F89C  +
test eax eax +
jnz loc_1018A6C  +
add esi 4 +
cmp esi 4 +
jb loc_1018A4C  +
inc eax  +
pop esi  +
pop ebp  +
retn 8  +
***
xor eax eax +
jmp loc_1018A67  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
push dword ptr [ebp+0Ch]  +
push off_1028384[esi]  +
call sub_100F89C  +
test eax eax +
jnz loc_1018A9D  +
add esi 4 +
cmp esi 4 +
jb loc_1018A7D  +
inc eax  +
pop esi  +
pop ebp  +
retn 8  +
***
xor eax eax +
jmp loc_1018A98  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ecx+18h] +
lea eax [ecx+4] +
cmp esi 10h +
jb loc_1018ABB  +
mov edx [eax] +
jmp loc_1018ABD  +
mov edx eax +
cmp [ebp+arg_0] edx +
jb loc_1018AD7  +
cmp esi 10h +
jb loc_1018AC9  +
mov eax [eax] +
mov ecx [ecx+14h] +
add ecx eax +
cmp ecx [ebp+arg_0] +
jbe loc_1018AD7  +
mov al 1 +
jmp loc_1018AD9  +
xor al al +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_101192F  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+18h] 10h +
mov eax [ebp+arg_0] +
mov [ecx+14h] eax +
jb loc_1018B15  +
mov ecx [ecx+4] +
jmp loc_1018B18  +
add ecx 4 +
mov byte ptr [ecx+eax] 0 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1018A00  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1018A22  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+0Ch] +
call sub_100BC41  +
lea ecx [esi+10h] +
call sub_100BC41  +
xor eax eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1018B9B  +
push [ebp+arg_4]  +
call sub_1018AE3  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
mov esi ecx +
jz loc_1018BD8  +
cmp dword ptr [esi+18h] 10h +
jb loc_1018BD8  +
cmp [ebp+arg_4] 0 +
lea eax [esi+4] +
push edi  +
mov edi [eax] +
jbe loc_1018BD0  +
push [ebp+arg_4]  +
push edi  +
push 10h  +
push eax  +
call sub_1018B25  +
push edi  +
call sub_1019EA8  +
pop ecx  +
pop edi  +
push [ebp+arg_4]  +
mov ecx esi +
mov dword ptr [esi+18h] 0Fh +
call sub_1018AFF  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp [esi+14h] edi +
jnb loc_1018C09  +
call loc_1019FC3  +
mov eax [esi+14h] +
sub eax edi +
cmp eax [ebp+arg_4] +
jnb loc_1018C16  +
mov [ebp+arg_4] eax +
cmp [ebp+arg_4] 0 +
jbe loc_1018C59  +
mov ecx [esi+18h] +
push ebx  +
lea edx [esi+4] +
cmp ecx 10h +
jb loc_1018C2C  +
mov ebx [edx] +
jmp loc_1018C2E  +
mov ebx edx +
cmp ecx 10h +
jb loc_1018C35  +
mov edx [edx] +
sub eax [ebp+arg_4] +
add ebx edi +
add ebx [ebp+arg_4] +
push eax  +
push ebx  +
sub ecx edi +
push ecx  +
add edx edi +
push edx  +
call sub_1018B47  +
mov eax [esi+14h] +
sub eax [ebp+arg_4] +
mov ecx esi +
push eax  +
call sub_1018AFF  +
pop ebx  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
call __EH_prolog3_catch  +
mov edi ecx +
mov [ebp-18h] edi +
mov esi [ebp+8] +
or esi 0Fh +
cmp esi 0FFFFFFFEh +
jbe loc_1018C87  +
mov esi [ebp+8] +
jmp loc_1018CAC  +
xor edx edx +
push 3  +
mov eax esi +
pop ebx  +
div  ebx +
mov ecx [edi+18h] +
mov [ebp-14h] ecx +
shr dword ptr [ebp-14h] 1 +
mov edx [ebp-14h] +
cmp eax edx +
jnb loc_1018CAC  +
push 0FFFFFFFEh  +
pop eax  +
sub eax edx +
cmp ecx eax +
ja loc_1018CAC  +
lea esi [edx+ecx] +
and dword ptr [ebp-4] 0 +
push 0  +
lea eax [esi+1] +
push eax  +
call loc_10189BA  +
mov ebx eax +
jmp loc_1018CE7  +
mov eax [ebp+8] +
mov [ebp-10h] esp +
mov [ebp+8] eax +
push 0  +
inc eax  +
push eax  +
mov byte ptr [ebp-4] 2 +
call loc_10189BA  +
mov [ebp-14h] eax +
mov eax offset loc_1018CDE +
retn   +
mov edi [ebp-18h] +
mov esi [ebp+8] +
mov ebx [ebp-14h] +
cmp dword ptr [ebp+0Ch] 0 +
jbe loc_1018D09  +
cmp dword ptr [edi+18h] 10h +
jb loc_1018CF8  +
mov eax [edi+4] +
jmp loc_1018CFB  +
lea eax [edi+4] +
push dword ptr [ebp+0Ch]  +
push eax  +
lea eax [esi+1] +
push eax  +
push ebx  +
call sub_1018B25  +
push 0  +
push 1  +
mov ecx edi +
call sub_1018BA4  +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
mov [edi+4] ebx +
mov [edi+18h] esi +
call sub_1018AFF  +
call __EH_epilog3  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
and dword ptr [esi+8] 0 +
lea ecx [esi+0Ch] +
mov dword ptr [esi+4] offset off_100602C +
call sub_100BD92  +
lea ecx [esi+10h] +
call sub_100BD92  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+10h] +
sub ecx 10h +
call sub_100B8FC  +
mov ecx [esi+0Ch] +
sub ecx 10h +
pop esi  +
jmp sub_100B8FC  +
***
push 0  +
push 1  +
call sub_1018BA4  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp edi 0FFFFFFFEh +
jbe loc_1018DB5  +
call loc_1019F86  +
cmp [esi+18h] edi +
jnb loc_1018DC7  +
push dword ptr [esi+14h]  +
mov ecx esi +
push edi  +
call sub_1018C66  +
jmp loc_1018DF3  +
cmp [ebp+arg_4] 0 +
jz loc_1018DE7  +
cmp edi 10h +
jnb loc_1018DE7  +
mov eax [esi+14h] +
cmp edi eax +
jnb loc_1018DDB  +
mov eax edi +
push eax  +
push 1  +
mov ecx esi +
call sub_1018BA4  +
jmp loc_1018DF3  +
test edi edi +
jnz loc_1018DF3  +
push edi  +
mov ecx esi +
call sub_1018AFF  +
xor eax eax +
cmp eax edi +
sbb eax eax +
pop edi  +
neg eax  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
push 0  +
push 1  +
lea ecx [esi+0Ch] +
mov dword ptr [esi] offset off_1006054 +
call sub_1018BA4  +
mov ecx esi +
pop esi  +
jmp ??1exception@@UAE@XZ  +
***
cmp dword ptr [ecx+24h] 10h +
jb loc_1018E34  +
mov eax [ecx+10h] +
retn   +
***
lea eax [ecx+10h] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1018E06  +
test byte ptr [ebp+8] 1 +
jz loc_1018E57  +
push esi  +
call sub_1019EA8  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1018D46  +
mov dword ptr [esi] offset off_100608C +
mov dword ptr [esi+4] offset off_1006064 +
mov ecx dword_10309D8 +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_10060A0  +
push ecx  +
call sub_10100E8  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
inc dword ptr [eax+8]  +
mov eax [eax+8] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
dec dword ptr [ecx+8]  +
push esi  +
mov esi [ecx+8] +
jnz loc_1018EE2  +
test ecx ecx +
jz loc_1018EE2  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+10h]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_1018E90  +
pop ebp  +
retn 0Ch  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1018EAF  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1018EEE  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1018EC6  +
***
push 8  +
mov eax offset loc_1021198 +
call __EH_prolog3_catch  +
mov esi [ebp+0Ch] +
test esi esi +
jnz loc_1018F51  +
mov eax 80004003h +
jmp loc_1018F6F  +
mov ecx [ebp+8] +
and dword ptr [ebp-4] 0 +
add ecx 8 +
call sub_1011DD7  +
mov [esi] eax +
xor eax eax +
jmp loc_1018F6F  +
mov eax offset loc_1018F6C +
retn   +
***
mov eax [ebp-14h] +
call __EH_epilog3  +
retn 8  +
***
push 8  +
mov eax offset loc_10211B8 +
call __EH_prolog3_catch  +
mov esi [ebp+0Ch] +
test esi esi +
jnz loc_1018F96  +
mov eax 80004003h +
jmp loc_1018FB4  +
mov ecx [ebp+8] +
and dword ptr [ebp-4] 0 +
add ecx 0Ch +
call sub_1011DD7  +
mov [esi] eax +
xor eax eax +
jmp loc_1018FB4  +
mov eax offset loc_1018FB1 +
retn   +
***
mov eax [ebp-14h] +
call __EH_epilog3  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_100608C +
mov dword ptr [esi+4] offset off_1006064 +
mov dword ptr [esi+8] 0C0000001h +
mov ecx dword_10309D8 +
mov eax [ecx] +
call dword ptr [eax+8]  +
mov ecx esi +
pop esi  +
jmp loc_1018D6F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1018FC1  +
test byte ptr [ebp+8] 1 +
jz loc_101900C  +
push esi  +
call sub_1019EA8  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov ebx ecx +
cmp [edi+14h] eax +
jnb loc_1019032  +
call loc_1019FC3  +
mov esi [edi+14h] +
mov eax [ebp+arg_4] +
sub esi eax +
cmp [ebp+arg_8] esi +
jnb loc_1019042  +
mov esi [ebp+arg_8] +
mov ecx ebx +
cmp ebx edi +
jnz loc_1019060  +
push 0FFFFFFFFh  +
add esi eax +
push esi  +
call sub_1018BF3  +
push [ebp+arg_4]  +
mov ecx ebx +
push 0  +
call sub_1018BF3  +
jmp loc_10190A0  +
push 0  +
push esi  +
call sub_1018D9F  +
test al al +
jz loc_10190A0  +
cmp dword ptr [edi+18h] 10h +
jb loc_1019077  +
mov edi [edi+4] +
jmp loc_101907A  +
add edi 4 +
mov ecx [ebx+18h] +
cmp ecx 10h +
jb loc_1019087  +
mov eax [ebx+4] +
jmp loc_101908A  +
lea eax [ebx+4] +
mov edx [ebp+arg_4] +
push esi  +
add edi edx +
push edi  +
push ecx  +
push eax  +
call sub_1018B25  +
push esi  +
mov ecx ebx +
call sub_1018AFF  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
mov ecx offset off_10284B4 +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_10102CF  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+1Ch]  +
mov ecx offset off_10284B4 +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_10102F5  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx offset off_10284B4 +
pop ebp  +
jmp loc_10103A9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_1018AA6  +
test al al +
jz loc_101913F  +
cmp dword ptr [esi+18h] 10h +
jb loc_101912C  +
mov eax [esi+4] +
jmp loc_101912F  +
lea eax [esi+4] +
push [ebp+arg_4]  +
sub edi eax +
push edi  +
push esi  +
mov ecx esi +
call sub_1019018  +
jmp loc_1019176  +
push 0  +
push [ebp+arg_4]  +
mov ecx esi +
call sub_1018D9F  +
test al al +
jz loc_1019174  +
mov ecx [esi+18h] +
cmp ecx 10h +
jb loc_101915C  +
mov eax [esi+4] +
jmp loc_101915F  +
lea eax [esi+4] +
push [ebp+arg_4]  +
push edi  +
push ecx  +
push eax  +
call sub_1018B25  +
push [ebp+arg_4]  +
mov ecx esi +
call sub_1018AFF  +
mov eax esi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
call __EH_prolog3_catch  +
mov eax [ebp+10h] +
xor esi esi +
cmp eax esi +
jnz loc_101919D  +
mov eax 80004003h +
jmp loc_1019214  +
mov edi 8007000Eh +
push 14h  +
mov [eax] esi +
mov [ebp-14h] edi +
mov [ebp-18h] esi +
mov [ebp-4] esi +
call loc_1019E39  +
pop ecx  +
cmp eax esi +
jz loc_10191C5  +
push dword ptr [ebp+8]  +
mov ecx eax +
call sub_1018E63  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
jmp loc_10191DB  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_10191D5 +
retn   +
mov edi [ebp-14h] +
mov esi [ebp-18h] +
test esi esi +
jz loc_1019212  +
inc dword ptr [esi+8]  +
mov ecx esi +
call sub_1018B69  +
mov edi eax +
test edi edi +
jl loc_10191F1  +
xor edi edi +
dec dword ptr [esi+8]  +
test edi edi +
jnz loc_1019209  +
push dword ptr [ebp+10h]  +
mov eax [esi] +
push dword ptr [ebp+0Ch]  +
push esi  +
call dword ptr [eax]  +
mov edi eax +
test edi edi +
jz loc_1019212  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+10h]  +
mov eax edi +
call __EH_epilog3  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0  +
mov dword ptr [esi+18h] 0Fh +
call sub_1018AFF  +
push 0FFFFFFFFh  +
push 0  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1019018  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
call ??0exception@@QAE@XZ  +
push dword ptr [ebp+8]  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+0Ch] +
mov dword ptr [esi] offset off_1006054 +
call sub_1019221  +
mov eax esi +
call __EH_epilog3  +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
mov edi [ebp+8] +
push edi  +
call ??0exception@@QAE@ABV0@@Z  +
and dword ptr [ebp-4] 0 +
add edi 0Ch +
push edi  +
lea ecx [esi+0Ch] +
mov dword ptr [esi] offset off_1006054 +
call sub_1019221  +
mov eax esi +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1019251  +
mov dword ptr [esi] offset off_10060E4 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov dword ptr [ecx] offset off_10060E4 +
jmp sub_1018E06  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_10060E4 +
call sub_1018E06  +
test byte ptr [ebp+8] 1 +
jz loc_101931C  +
push esi  +
call sub_1019EA8  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_101928B  +
mov dword ptr [esi] offset off_10060E4 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
lea edx [eax+1] +
push ebx  +
mov bl [eax] +
inc eax  +
test bl bl +
jnz loc_1019356  +
sub eax edx +
push eax  +
push [ebp+arg_0]  +
call sub_101910B  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ecx  +
lea ecx [ebp-28h] +
call sub_101928B  +
push offset dword_1024854  +
lea eax [ebp-28h] +
push eax  +
call _CxxThrowException  +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ecx  +
lea ecx [ebp-28h] +
call sub_1019328  +
push offset dword_102488C  +
lea eax [ebp-28h] +
push eax  +
call _CxxThrowException  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0  +
mov dword ptr [esi+18h] 0Fh +
call sub_1018AFF  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_101934A  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
push offset dword_10060D0  +
push 0  +
call sub_1019181  +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
mov edi ecx +
mov esi [ebp+8] +
and dword ptr [esi] 0 +
push esi  +
call sub_10193E8  +
mov [ebp-14h] eax +
test eax eax +
jl loc_1019473  +
push dword ptr [esi]  +
lea ecx [ebp-10h] +
call sub_100F9F0  +
mov esi [ebp-10h] +
and dword ptr [ebp-4] 0 +
push esi  +
lea ecx [ebp+8] +
call sub_100F9F0  +
lea ecx [edi+8] +
mov eax [ecx+4] +
lea edx [ebp+8] +
push edx  +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_101FDD6  +
mov eax [ebp+8] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_1019465  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jz loc_1019473  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
mov eax [ebp-14h] +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx+1Ch] eax +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
xor edi edi +
and [ebp-10h] edi +
mov ecx [esi+1Ch] +
and [ebp-4] edi +
and [ebp-14h] edi +
test ecx ecx +
jz loc_10194F0  +
lea eax [ebp-14h] +
push eax  +
call sub_101872B  +
mov edi eax +
test edi edi +
jl loc_10194F0  +
cmp dword ptr [ebp-14h] 0 +
jz loc_10194F0  +
mov ecx [esi+1Ch] +
lea eax [ebp-10h] +
push eax  +
call sub_1018769  +
mov edi eax +
test edi edi +
jl loc_10194F0  +
push dword ptr [ebp-10h]  +
push 69h  +
push 3  +
push dword ptr [esi+18h]  +
call sub_100E2C9  +
add esp 10h +
push dword ptr [ebp-10h]  +
call ds:SysFreeString  +
mov eax edi +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push esi  +
call ds:EnterCriticalSection  +
lea ecx [esi+20h] +
call sub_100BC41  +
push esi  +
call ds:LeaveCriticalSection  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
test eax eax +
jge loc_1019590  +
cmp eax 80070BC2h +
jz loc_1019590  +
mov ecx eax +
and ecx 1FFF0000h +
cmp ecx 70000h +
jnz loc_101955B  +
and eax 0FFFFh +
push eax  +
push 0C1500067h  +
jmp loc_1019561  +
push eax  +
push 0C1500068h  +
push 1  +
push dword ptr [esi+18h]  +
call sub_100E2A2  +
add esp 10h +
push esi  +
call ds:EnterCriticalSection  +
push dword ptr [esi+20h]  +
mov ecx [esi+18h] +
push 1  +
call sub_100E1CD  +
push esi  +
call ds:LeaveCriticalSection  +
mov ecx esi +
call sub_1019497  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
lea ecx [esi+20h] +
call sub_100BD92  +
mov eax [ebp+arg_0] +
and dword ptr [esi+1Ch] 0 +
push esi  +
mov [esi+18h] eax +
call ds:InitializeCriticalSection  +
mov ecx esi +
call sub_1019506  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3_catch  +
mov eax [ebp-24h] +
mov [ebp+8] eax +
mov dword ptr [ebp-4] 2 +
mov eax offset loc_10196BD +
retn   +
mov esi [ebp+8] +
xor ebx ebx +
jmp loc_101966D  +
***
call __EH_prolog3_catch  +
mov eax [ebp-1Ch] +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [ebp-18h] eax +
mov eax offset loc_1019749 +
retn   +
mov esi [ebp-18h] +
jmp loc_1019712  +
***
call __EH_prolog3_catch  +
mov eax [ebp-1Ch] +
mov [ebp-14h] eax +
mov eax offset loc_1019783 +
retn   +
***
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
push esi  +
push edi  +
cld   +
mov [ebp-4] eax +
mov esi [ebp-4] +
push 9  +
pop ecx  +
lea edi [ebp-28h] +
movs   +
mov eax [ebp-28h] +
and eax 0F9930520h +
or eax 19930520h +
mov [ebp-28h] eax +
lea eax [ebp-28h] +
mov [ebp-4] eax +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
mov eax [ebp-4] +
call ds:__CxxFrameHandler  +
add esp 10h +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
cmp [ebp+arg_0] esi +
jnz loc_1019824  +
call _errno  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_101A874  +
add esp 14h +
push 16h  +
pop eax  +
jmp loc_1019841  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101AA0D  +
pop ecx  +
pop ecx  +
cmp eax [ebp+arg_4] +
jnb loc_1019807  +
push [ebp+arg_0]  +
call _wcslwr  +
pop ecx  +
xor eax eax +
pop esi  +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jnz loc_101985C  +
mov eax 80070057h +
jmp loc_101986D  +
cmp dword ptr [eax] 2Ch +
jnz loc_1019855  +
and dword ptr [eax+1Ch] 0 +
lea ecx [eax+4] +
call sub_100B6D5  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_101988B  +
push eax  +
call free  +
and dword ptr [esi] 0 +
pop ecx  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jl loc_10198B4  +
cmp eax [ecx+4] +
jge loc_10198B4  +
mov ecx [ecx] +
lea eax [ecx+eax*2] +
pop ebp  +
retn 4  +
***
push 0  +
push 0  +
push 1  +
push 0C000008Ch  +
call ds:RaiseException  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jl loc_10198E5  +
cmp eax [ecx+4] +
jge loc_10198E5  +
mov ecx [ecx] +
lea eax [ecx+eax*4] +
pop ebp  +
retn 4  +
***
push 0  +
push 0  +
push 1  +
push 0C000008Ch  +
call ds:RaiseException  +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
xor edi edi +
cmp esi edi +
jnz loc_1019934  +
mov eax 80070057h +
jmp loc_101997B  +
mov eax [esi] +
cmp eax edi +
jz loc_1019979  +
cmp eax 2Ch +
jnz loc_101992D  +
cmp [esi+24h] edi +
jle loc_1019964  +
push ebx  +
lea ebx [esi+20h] +
push edi  +
mov ecx ebx +
call loc_101989A  +
movzx eax word ptr [eax] +
push dword ptr [ebp+0Ch]  +
push eax  +
call ds:UnregisterClassA  +
inc edi  +
cmp edi [esi+24h] +
jl loc_1019948  +
pop ebx  +
lea ecx [esi+20h] +
call sub_1019876  +
lea eax [esi+4] +
push eax  +
call ds:DeleteCriticalSection  +
and dword ptr [esi] 0 +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+18h] +
call sub_100B6BE  +
xor eax eax +
mov [esi+30h] eax +
mov [esi+34h] eax +
mov [esi+38h] eax +
mov eax esi +
pop esi  +
retn   +
***
call ds:DeleteCriticalSection  +
lea ecx [esi+30h] +
pop esi  +
jmp sub_1019876  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
lea edi [esi+18h] +
push edi  +
call ds:EnterCriticalSection  +
mov eax [esi+34h] +
mov ecx [ebp+arg_0] +
cmp ecx eax +
jg loc_1019A04  +
test ecx ecx +
jl loc_1019A04  +
cmp ecx eax +
jnz loc_10199F7  +
mov esi [esi+8] +
push edi  +
call ds:LeaveCriticalSection  +
mov eax esi +
jmp loc_1019A0D  +
push ecx  +
lea ecx [esi+30h] +
call loc_10198CB  +
mov esi [eax] +
jmp loc_10199EC  +
push edi  +
call ds:LeaveCriticalSection  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
add [ebx-3974FFDAh] eax +
pop esi  +
retn   +
***
push ebp  +
mov ebp esp +
sub esp 98h +
mov eax dword_1028534 +
xor eax ebp +
mov [ebp-4] eax +
push esi  +
mov esi ecx +
call sub_1019986  +
mov eax 1000000h +
push 94h  +
mov [esi+8] eax +
mov [esi+4] eax +
lea eax [ebp-98h] +
push 0  +
push eax  +
mov dword ptr [esi] 3Ch +
mov byte ptr [esi+0Ch] 0 +
call memset  +
add esp 0Ch +
lea eax [ebp-98h] +
push eax  +
mov dword ptr [ebp-98h] 94h +
call ds:GetVersionExA  +
cmp dword ptr [ebp-88h] 2 +
jnz loc_1019AB8  +
cmp dword ptr [ebp-94h] 5 +
jb loc_1019AD9  +
jmp loc_1019AD5  +
cmp dword ptr [ebp-88h] 1 +
jnz loc_1019AD9  +
cmp dword ptr [ebp-94h] 4 +
ja loc_1019AD5  +
jnz loc_1019AD9  +
cmp dword ptr [ebp-90h] 0 +
jbe loc_1019AD9  +
mov byte ptr [esi+0Ch] 1 +
lea ecx [esi+18h] +
mov dword ptr [esi+10h] 800h +
mov dword ptr [esi+14h] offset dword_1006118 +
call sub_100B6D5  +
test eax eax +
jge loc_1019AFA  +
mov byte_10309D4 1 +
mov ecx [ebp-4] +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_101A463  +
leave   +
retn   +
***
cmp byte ptr [ecx+8] 0 +
mov dword ptr [ecx] offset off_1006128 +
jz locret_1019B47  +
mov ecx [ecx+4] +
test ecx ecx +
jz locret_1019B47  +
push ecx  +
call ds:HeapDestroy  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 0  +
push dword ptr [ecx+4]  +
call ds:HeapAlloc  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
jz loc_1019B82  +
push dword ptr [ebp+8]  +
push 0  +
push dword ptr [ecx+4]  +
call ds:HeapFree  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+8] eax +
jnz loc_1019BA0  +
push dword ptr [ebp+0Ch]  +
mov eax [ecx] +
call dword ptr [eax]  +
jmp loc_1019BC1  +
cmp [ebp+0Ch] eax +
jnz loc_1019BB1  +
push dword ptr [ebp+8]  +
mov eax [ecx] +
call dword ptr [eax+4]  +
xor eax eax +
jmp loc_1019BC1  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push eax  +
push dword ptr [ecx+4]  +
call ds:HeapReAlloc  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 0  +
push dword ptr [ecx+4]  +
call ds:HeapSize  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1019B2D  +
test byte ptr [ebp+8] 1 +
jz loc_1019C00  +
push esi  +
call sub_1019EA8  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov [eax+4] ecx +
mov dword ptr [eax] offset off_100613C +
xor ecx ecx +
mov dword ptr [eax+14h] 2 +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov [eax+18h] cx +
mov [eax+1Ah] cx +
mov [eax+8] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+4] +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+4]  +
***
mov eax ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_100613C +
jz loc_1019C8B  +
push esi  +
call sub_1019EA8  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_8] +
or edx 0FFFFFFFFh +
sub edx eax +
cmp edx ecx +
jnb loc_1019CB2  +
mov eax 80070057h +
jmp loc_1019CBB  +
add eax ecx +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [ebp+arg_4] +
push esi  +
lea ecx [edx+eax] +
lea esi [ecx-1] +
cmp esi edx +
pop esi  +
jge loc_1019CE0  +
mov eax [ebp+arg_8] +
jmp loc_1019CE6  +
dec eax  +
not eax  +
dec ecx  +
and eax ecx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push esi  +
push edi  +
push 7FFFFFFFh  +
push 8  +
inc eax  +
push eax  +
mov esi ecx +
call sub_1019CC4  +
push dword ptr [ebp+0Ch]  +
mov edi eax +
push edi  +
lea eax [ebp+8] +
push eax  +
call sub_1010D67  +
test eax eax +
jl loc_1019D4F  +
push dword ptr [ebp+8]  +
lea eax [ebp+8] +
push 10h  +
push eax  +
call sub_1019C97  +
test eax eax +
jl loc_1019D4F  +
mov ecx [esi+4] +
push dword ptr [ebp+8]  +
mov eax [ecx] +
call dword ptr [eax]  +
test eax eax +
jz loc_1019D4F  +
dec edi  +
and dword ptr [eax+4] 0 +
mov [eax] esi +
mov dword ptr [eax+0Ch] 1 +
mov [eax+8] edi +
jmp loc_1019D51  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
push esi  +
push edi  +
push 7FFFFFFFh  +
push 8  +
inc eax  +
push eax  +
mov esi ecx +
call sub_1019CC4  +
push dword ptr [ebp+10h]  +
mov edi eax +
push edi  +
lea eax [ebp+0Ch] +
push eax  +
call sub_1010D67  +
test eax eax +
jl loc_1019DB3  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp+0Ch] +
push 10h  +
push eax  +
call sub_1019C97  +
test eax eax +
jl loc_1019DB3  +
push dword ptr [ebp+0Ch]  +
mov ecx [esi+4] +
push dword ptr [ebp+8]  +
mov eax [ecx] +
call dword ptr [eax+8]  +
test eax eax +
jz loc_1019DB3  +
dec edi  +
mov [eax+8] edi +
jmp loc_1019DB5  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov dword ptr [esi+8] offset dword_10251CC +
mov dword ptr [esi+0Ch] offset dword_10251CC +
call sub_100B6D5  +
test eax eax +
jge loc_1019DFC  +
mov byte_10309D4 1 +
jmp loc_1019E02  +
mov dword ptr [esi] 28h +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call ??0exception@@QAE@XZ  +
cmp dword ptr [esi+4] 0 +
mov dword ptr [esi] offset off_1002630 +
jnz loc_1019E30  +
cmp dword ptr [esi+8] 0 +
jnz loc_1019E30  +
mov eax off_10284F0 +
mov [esi+4] eax +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
mov esi ds:malloc +
jmp loc_1019E57  +
push dword ptr [ebp+8]  +
call _callnewh  +
pop ecx  +
test eax eax +
jz loc_1019E64  +
push dword ptr [ebp+8]  +
call esi  +
pop ecx  +
test eax eax +
jz loc_1019E4A  +
pop esi  +
leave   +
retn   +
***
test byte ptr dword_1044E98 1 +
mov esi offset dword_1044E8C +
jnz loc_1019E8B  +
or dword_1044E98 1 +
mov ecx esi +
call sub_1019E0C  +
push offset loc_10216B2  +
call sub_101A678  +
pop ecx  +
push esi  +
lea ecx [ebp-0Ch] +
call sub_100E9BC  +
push offset dword_1021D68  +
lea eax [ebp-0Ch] +
push eax  +
call _CxxThrowException  +
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:__imp_free  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
mov esi ds:malloc +
jmp loc_1019ED7  +
push dword ptr [ebp+8]  +
call _callnewh  +
pop ecx  +
test eax eax +
jz loc_1019EE4  +
push dword ptr [ebp+8]  +
call esi  +
pop ecx  +
test eax eax +
jz loc_1019ECA  +
pop esi  +
leave   +
retn   +
***
test byte ptr dword_1044EA8 1 +
mov esi offset dword_1044E9C +
jnz loc_1019F0B  +
or dword_1044EA8 1 +
mov ecx esi +
call sub_1019E0C  +
push offset loc_10216CB  +
call sub_101A678  +
pop ecx  +
push esi  +
lea ecx [ebp-0Ch] +
call sub_100E9BC  +
push offset dword_1021D68  +
lea eax [ebp-0Ch] +
push eax  +
call _CxxThrowException  +
mov dword ptr [ecx] offset off_10061B0 +
jmp sub_1018E06  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_10061B0 +
call sub_1018E06  +
test byte ptr [ebp+8] 1 +
jz loc_1019F58  +
push esi  +
call sub_1019EA8  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_101928B  +
mov dword ptr [esi] offset off_10061B0 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push 44h  +
mov eax offset loc_10212F8 +
call __EH_prolog3  +
push offset aStringTooLong  +
lea ecx [ebp-28h] +
call sub_10193BC  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_10192CA  +
push offset dword_102488C  +
lea eax [ebp-50h] +
push eax  +
call _CxxThrowException  +
push 44h  +
mov eax offset loc_10212F8 +
call __EH_prolog3  +
push offset aInvalidStringP  +
lea ecx [ebp-28h] +
call sub_10193BC  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_1019251  +
push offset dword_1024A48  +
lea eax [ebp-50h] +
push eax  +
mov dword ptr [ebp-50h] offset off_10061B0 +
call _CxxThrowException  +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ecx  +
lea ecx [ebp-28h] +
call sub_1019F64  +
push offset dword_1024A48  +
lea eax [ebp-28h] +
push eax  +
call _CxxThrowException  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_101A048  +
test eax eax +
jnz loc_101A04D  +
mov ecx [esi] +
test ecx ecx +
jz loc_101A045  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_101A039  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_1044ED4 +
push offset dword_1044EC4  +
push dword_1044ED0  +
mov dword_1044EC4 eax +
push offset dword_1044EB4  +
push offset dword_1044EB8  +
push offset dword_1044EB0  +
call ds:__wgetmainargs  +
add esp 14h +
mov dword_1044EC0 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+ms_exc.disabled] ebx +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp+var_1C] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
cmp eax ebx +
jz loc_101A0D5  +
cmp eax esi +
jnz loc_101A0C8  +
xor esi esi +
inc esi  +
mov [ebp+var_1C] esi +
jmp loc_101A0D8  +
push 3E8h  +
call ds:Sleep  +
jmp loc_101A0AF  +
xor esi esi +
inc esi  +
mov eax dword_105D3E4 +
cmp eax esi +
jnz loc_101A0EB  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_101A126  +
mov eax dword_105D3E4 +
test eax eax +
jnz loc_101A120  +
mov dword_105D3E4 esi +
push offset dword_1001354  +
push offset dword_1001348  +
call sub_101A02C  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_101A126  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
jmp loc_101A1F0  +
mov dword_1044ECC esi +
mov eax dword_105D3E4 +
cmp eax esi +
jnz loc_101A14A  +
push offset dword_1001344  +
push offset dword_1001324  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_105D3E4 2 +
cmp [ebp+var_1C] ebx +
jnz loc_101A157  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_105D3F8 ebx +
jz loc_101A178  +
push offset dword_105D3F8  +
call sub_101AF29  +
pop ecx  +
test eax eax +
jz loc_101A178  +
push ebx  +
push 2  +
push ebx  +
call dword_105D3F8  +
push dword_1044EB4  +
push dword_1044EB8  +
push dword_1044EB0  +
call sub_100DE92  +
add esp 0Ch +
mov dword_1044EC8 eax +
cmp dword_1044EBC ebx +
jnz loc_101A1D6  +
push eax  +
call ds:exit  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-20h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-20h] +
mov dword_1044EC8 eax +
xor ebx ebx +
cmp dword_1044EBC ebx +
jnz loc_101A1D6  +
push eax  +
call ds:_exit  +
cmp dword_1044ECC ebx +
jnz loc_101A1E4  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_1044EC8 +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_101A20D  +
xor eax eax +
jmp loc_101A25A  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_101A209  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_101A247  +
cmp ecx 20Bh +
jnz loc_101A209  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_101A209  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_101A255  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_101A209  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 1  +
mov dword_1044EBC eax +
call sub_101B037  +
push eax  +
call ds:__set_app_type  +
or dword_105D3F0 0FFFFFFFFh +
or dword_105D3F4 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_1044EDC +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_1044ED8 +
mov [eax] ecx +
call sub_101AFC9  +
cmp dword_1028548 0 +
jnz loc_101A2B3  +
push offset sub_101AFC9  +
call ds:__setusermatherr  +
pop ecx  +
call sub_101AFB1  +
xor eax eax +
retn   +
***
call sub_101B076  +
jmp sub_101A08D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ds:??1type_info@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_101A2EA  +
push esi  +
call sub_1019EA8  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
dec [ebp+arg_8]  +
js loc_101A346  +
mov ecx [ebp+arg_0] +
sub ecx [ebp+arg_4] +
mov [ebp+arg_0] ecx +
call [ebp+arg_C]  +
jmp loc_101A306  +
mov eax [ebp-14h] +
mov [ebp-1Ch] eax +
mov eax [ebp-1Ch] +
mov eax [eax] +
mov [ebp-20h] eax +
mov eax [ebp-20h] +
cmp dword ptr [eax] 0E06D7363h +
jz loc_101A33D  +
mov dword ptr [ebp-24h] 0 +
mov eax [ebp-24h] +
retn   +
call ds:?terminate@@YAXXZ  +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 10h  +
***
call __SEH_prolog4  +
cmp dword ptr [ebp-1Ch] 0 +
jnz $LN9  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_101A2F6  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_101A463  +
push offset dword_1028534  +
call sub_101AB90  +
add esp 18h +
pop ebp  +
retn   +
***
cmp ecx dword_1028534 +
jnz loc_101A46E  +
retn 0  +
jmp loc_101B10C  +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_1028534 +
xor eax ebp +
push eax  +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_1028534 +
xor eax ebp +
push eax  +
mov [ebp-10h] esp +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_1028534 +
xor eax ebp +
push eax  +
mov [ebp-10h] eax +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_1028534 +
xor eax ebp +
push eax  +
mov [ebp-14h] eax +
mov [ebp-10h] esp +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
mov ecx [ebp-0Ch] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov ecx [ebp-10h] +
xor ecx ebp +
call sub_101A463  +
jmp __EH_epilog3  +
***
mov ecx [ebp-14h] +
xor ecx ebp +
call sub_101A463  +
jmp __EH_epilog3  +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
call sub_1019EA8  +
pop ecx  +
pop ebp  +
retn   +
***
call __EH_prolog3_catch  +
and dword ptr [ebp-14h] 0 +
mov eax offset $LN7 +
retn   +
***
call __SEH_prolog4  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call sub_101A5EE  +
neg eax  +
sbb eax eax +
neg eax  +
pop ecx  +
dec eax  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ??2@YAPAXIABUnothrow_t@std@@@Z  +
***
jmp ds:?what@exception@@UBEPBDXZ  +
***
jmp ds:_purecall  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
push esi  +
xor esi esi +
cmp ecx esi +
jbe loc_101A730  +
push 0FFFFFFE0h  +
xor edx edx +
pop eax  +
div  ecx +
cmp eax [ebp+arg_8] +
jnb loc_101A730  +
call _errno  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 0Ch +
call sub_101A874  +
add esp 14h +
xor eax eax +
jmp loc_101A73F  +
imul ecx [ebp+arg_8] +
push ecx  +
push [ebp+arg_0]  +
call realloc  +
pop ecx  +
pop ecx  +
pop esi  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
cmp dword ptr [ebp-20h] 0 +
jnz $LN10_0  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_101A2F6  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2D0h +
mov eax dword_1028534 +
xor eax ebp +
mov [ebp+var_4] eax +
mov [ebp+var_220] eax +
mov [ebp+var_224] ecx +
mov [ebp+var_228] edx +
mov [ebp+var_22C] ebx +
mov [ebp+var_230] esi +
mov [ebp+var_234] edi +
mov [ebp+var_208] ss +
mov [ebp+var_214] cs +
mov [ebp+var_238] ds +
mov [ebp+var_23C] es +
mov [ebp+var_240] fs +
mov [ebp+var_244] gs +
pushf   +
pop [ebp+var_210]  +
mov eax [ebp+4] +
mov [ebp+var_218] eax +
lea eax [ebp+4] +
mov [ebp+var_2D0] 10001h +
mov [ebp+var_20C] eax +
mov eax [eax-4] +
push offset aInvalidParamet  +
mov [ebp+var_21C] eax +
call ds:OutputDebugStringA  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_101A463  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_101A7C9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_C] +
push edi  +
xor edi edi +
cmp esi edi +
jnz loc_101A8AF  +
xor eax eax +
jmp loc_101A914  +
cmp [ebp+arg_0] edi +
jnz loc_101A8CF  +
call _errno  +
push 16h  +
pop esi  +
mov [eax] esi +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
call sub_101A874  +
add esp 14h +
mov eax esi +
jmp loc_101A914  +
cmp [ebp+arg_8] edi +
jz loc_101A8EA  +
cmp [ebp+arg_4] esi +
jb loc_101A8EA  +
push esi  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call memcpy  +
add esp 0Ch +
jmp loc_101A8AB  +
push [ebp+arg_4]  +
push edi  +
push [ebp+arg_0]  +
call memset  +
add esp 0Ch +
cmp [ebp+arg_8] edi +
jz loc_101A8B4  +
cmp [ebp+arg_4] esi +
jnb loc_101A911  +
call _errno  +
push 22h  +
pop ecx  +
mov [eax] ecx +
mov esi ecx +
jmp loc_101A8BE  +
push 16h  +
pop eax  +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
push esi  +
push edi  +
xor edi edi +
cmp eax edi +
jz loc_101A974  +
cmp [ebp+arg_0] edi +
jnz loc_101A94D  +
call _errno  +
push 16h  +
pop esi  +
mov [eax] esi +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
call sub_101A874  +
add esp 14h +
mov eax esi +
jmp loc_101A976  +
cmp [ebp+arg_8] edi +
jz loc_101A932  +
cmp [ebp+arg_4] eax +
jnb loc_101A965  +
call _errno  +
push 22h  +
pop ecx  +
mov [eax] ecx +
mov esi ecx +
jmp loc_101A93C  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call memmove  +
add esp 0Ch +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor esi esi +
cmp edi esi +
jz loc_101A994  +
cmp [ebp+arg_4] esi +
ja loc_101A9B4  +
call ds:__imp__errno  +
mov dword ptr [eax] 16h +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
call sub_101A874  +
add esp 14h +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebp  +
retn   +
cmp [ebp+arg_8] esi +
jz loc_101A994  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push edi  +
call sub_101BF6B  +
add esp 10h +
cmp eax esi +
jge loc_101A9B0  +
xor ecx ecx +
mov [edi] cx +
cmp eax 0FFFFFFFEh +
jnz loc_101A9AD  +
call ds:__imp__errno  +
mov dword ptr [eax] 22h +
jmp loc_101A9A0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101A97F  +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jbe loc_101AA2A  +
mov ecx [ebp+arg_0] +
cmp word ptr [ecx] 0 +
jz loc_101AA2A  +
inc eax  +
inc ecx  +
inc ecx  +
cmp eax [ebp+arg_4] +
jb loc_101AA1C  +
pop ebp  +
retn   +
***
push edi  +
mov ebp [ecx] +
push edi  +
mov ebp edx +
push ebx  +
push edx  +
push ecx  +
push [esp+8+arg_4]  +
call __local_unwind4  +
add esp 0Ch +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
mov esi [ebx+8] +
xor esi [eax] +
push edi  +
mov eax [esi] +
mov [ebp+var_1] 0 +
mov [ebp+var_C] 1 +
lea edi [ebx+10h] +
cmp eax 0FFFFFFFEh +
jz loc_101ABC6  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call [ebp+arg_4]  +
mov ecx [esi+0Ch] +
mov edx [esi+8] +
add ecx edi +
xor ecx [edx+edi] +
call [ebp+arg_4]  +
mov eax [ebp+arg_8] +
test byte ptr [eax+4] 66h +
jnz loc_101ACF3  +
lea ecx [ebp+var_18] +
mov [ebx-4] ecx +
mov ebx [ebx+0Ch] +
mov [ebp+var_18] eax +
mov eax [ebp+arg_10] +
mov [ebp+var_14] eax +
cmp ebx 0FFFFFFFEh +
jz loc_101AC58  +
jmp loc_101AC00  +
lea edx [ebx+ebx*2] +
mov ecx [esi+edx*4+14h] +
lea eax [esi+edx*4+10h] +
mov [ebp+var_10] eax +
mov eax [eax] +
mov [ebp+var_8] eax +
test ecx ecx +
jz loc_101AC2B  +
mov edx edi +
call @_EH4_CallFilterFunc@8  +
mov [ebp+var_1] 1 +
test eax eax +
jl loc_101AC62  +
jg loc_101AC6B  +
mov eax [ebp+var_8] +
mov ebx eax +
cmp eax 0FFFFFFFEh +
jnz loc_101AC00  +
cmp [ebp+var_1] 0 +
jz loc_101AC58  +
mov eax [esi] +
cmp eax 0FFFFFFFEh +
jz loc_101AC4A  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call [ebp+arg_4]  +
mov ecx [esi+0Ch] +
mov edx [esi+8] +
add ecx edi +
xor ecx [edx+edi] +
call [ebp+arg_4]  +
mov eax [ebp+var_C] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
mov [ebp+var_C] 0 +
jmp loc_101AC38  +
mov eax [ebp+arg_8] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_101AC9F  +
cmp dword_105D3EC 0 +
jz loc_101AC9F  +
push offset dword_105D3EC  +
call sub_101AF29  +
add esp 4 +
test eax eax +
jz loc_101AC9F  +
mov ecx [ebp+arg_8] +
push 1  +
push ecx  +
call dword_105D3EC  +
add esp 8 +
mov ecx [ebp+arg_C] +
call @_EH4_GlobalUnwind@4  +
mov eax [ebp+arg_C] +
cmp [eax+0Ch] ebx +
jz loc_101ACC0  +
mov edx [ebp+arg_0] +
push edx  +
push edi  +
mov edx ebx +
mov ecx eax +
call @_EH4_LocalUnwind@16  +
mov eax [ebp+arg_C] +
mov ecx [ebp+var_8] +
mov [eax+0Ch] ecx +
mov eax [esi] +
cmp eax 0FFFFFFFEh +
jz loc_101ACD8  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call [ebp+arg_4]  +
mov ecx [esi+0Ch] +
mov edx [esi+8] +
add ecx edi +
xor ecx [edx+edi] +
call [ebp+arg_4]  +
mov eax [ebp+var_10] +
mov ecx [eax+8] +
mov edx edi +
call @_EH4_TransferToHandler@8  +
mov edx 0FFFFFFFEh +
cmp [ebx+0Ch] edx +
jz loc_101AC58  +
mov ecx [ebp+arg_0] +
push ecx  +
push edi  +
mov ecx ebx +
call @_EH4_LocalUnwind@16  +
jmp loc_101AC38  +
***
sub esp 20h +
and esp 0FFFFFFF0h +
fld  st +
fst  [esp+20h+var_8] +
fistp  [esp+20h+var_10] +
fild  [esp+20h+var_10] +
mov edx [esp+20h+var_8] +
mov eax dword ptr [esp+20h+var_10] +
test eax eax +
jz integer_QnaN_or_zero  +
fsubp st(1) st +
test edx edx +
jns positive  +
fstp  [esp+20h+var_20] +
mov ecx [esp+20h+var_20] +
xor ecx 80000000h +
add ecx 7FFFFFFFh +
adc eax 0 +
mov edx dword ptr [esp+20h+var_10+4] +
adc edx 0 +
jmp localexit  +
fstp  [esp+20h+var_20] +
mov ecx [esp+20h+var_20] +
add ecx 7FFFFFFFh +
sbb eax 0 +
mov edx dword ptr [esp+20h+var_10+4] +
sbb edx 0 +
jmp localexit  +
mov edx dword ptr [esp+20h+var_10+4] +
test edx 7FFFFFFFh +
jnz arg_is_not_integer_QnaN  +
fstp  [esp+20h+var_8] +
fstp  [esp+20h+var_8] +
leave   +
retn   +
***
push offset loc_101A42E  +
push large dword ptr fs:0  +
mov eax [esp+10h] +
mov [esp+10h] ebp +
lea ebp [esp+10h] +
sub esp eax +
push ebx  +
push esi  +
push edi  +
mov eax dword_1028534 +
xor [ebp-4] eax +
xor eax ebp +
mov [ebp-1Ch] eax +
push eax  +
mov [ebp-18h] esp +
push dword ptr [ebp-8]  +
mov eax [ebp-4] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov [ebp-8] eax +
lea eax [ebp-10h] +
mov large fs:0 eax +
retn   +
***
mov ecx [ebp-1Ch] +
xor ecx ebp +
call sub_101A463  +
jmp __SEH_epilog4  +
***
push ecx  +
lea ecx [esp+8] +
sub ecx eax +
and ecx 0Fh +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp __alloca_probe  +
***
push ecx  +
lea ecx [esp+8] +
sub ecx eax +
and ecx 7 +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp __alloca_probe  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_101AE6A  +
cmp dword ptr [eax+10h] 3 +
jnz loc_101AE6A  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_101AE64  +
cmp eax 19930521h +
jz loc_101AE64  +
cmp eax 19930522h +
jz loc_101AE64  +
cmp eax 1994000h +
jnz loc_101AE6A  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset byte_101AE2C+1)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_101AEB6  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_101AEB2  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_101AF1D  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_101AF15  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_101AF1F  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_101AF05  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_101AEA0  +
pop ecx  +
test eax eax +
jz loc_101AF86  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_101AEE0  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_101AF86  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_101AF8F  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_101B02A  +
cmp ecx 0FFFFFFFFh +
jz loc_101B02A  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_101B023  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_101B023  +
cmp edx 10000000h +
jnb loc_101B023  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_101B023  +
jmp loc_101B01E  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_101B06C  +
push eax  +
call sub_101AFD1  +
test eax eax +
jz loc_101B06C  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_101B061  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_101B06C  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1028534 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_101B0A8  +
test eax ebx +
jz loc_101B0A8  +
not eax  +
mov dword_1028538 eax +
jmp loc_101B103  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_101B0EF  +
test dword_1028534 ebx +
jnz loc_101B0F4  +
mov esi 0BB40E64Fh +
mov dword_1028534 esi +
not esi  +
mov dword_1028538 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_1044FE0 eax +
mov dword_1044FDC ecx +
mov dword_1044FD8 edx +
mov dword_1044FD4 ebx +
mov dword_1044FD0 esi +
mov dword_1044FCC edi +
mov word_1044FF8 ss +
mov word_1044FEC cs +
mov word_1044FC8 ds +
mov word_1044FC4 es +
mov word_1044FC0 fs +
mov word_1044FBC gs +
pushf   +
pop dword_1044FF0  +
mov eax [ebp+0] +
mov dword_1044FE4 eax +
mov eax [ebp+4] +
mov dword_1044FE8 eax +
lea eax [ebp+8] +
mov dword_1044FF4 eax +
mov eax [ebp-320h] +
mov dword_1044F30 10001h +
mov eax dword_1044FE8 +
mov dword_1044EEC eax +
mov dword_1044EE0 0C0000409h +
mov dword_1044EE4 1 +
mov eax dword_1028534 +
mov [ebp-328h] eax +
mov eax dword_1028538 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
or eax eax +
jnz loc_101B261  +
mov ecx [esp+arg_8] +
mov eax [esp+arg_4] +
xor edx edx +
div  ecx +
mov ebx eax +
mov eax [esp+arg_0] +
div  ecx +
mov esi eax +
mov eax ebx +
mul  [esp+arg_8] +
mov ecx eax +
mov eax esi +
mul  [esp+arg_8] +
add edx ecx +
jmp loc_101B2A8  +
mov ecx eax +
mov ebx [esp+arg_8] +
mov edx [esp+arg_4] +
mov eax [esp+arg_0] +
shr ecx 1 +
rcr ebx 1 +
shr edx 1 +
rcr eax 1 +
or ecx ecx +
jnz loc_101B26F  +
div  ebx +
mov esi eax +
mul  [esp+arg_C] +
mov ecx eax +
mov eax [esp+arg_8] +
mul  esi +
add edx ecx +
jb loc_101B29D  +
cmp edx [esp+arg_4] +
ja loc_101B29D  +
jb loc_101B2A6  +
cmp eax [esp+arg_0] +
jbe loc_101B2A6  +
dec esi  +
sub eax [esp+arg_8] +
sbb edx [esp+arg_C] +
xor ebx ebx +
sub eax [esp+arg_0] +
sbb edx [esp+arg_4] +
neg edx  +
neg eax  +
sbb edx 0 +
mov ecx edx +
mov edx ebx +
mov ebx ecx +
mov ecx eax +
mov eax esi +
pop esi  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
mov eax dword_1028534 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov [ebp+var_28] eax +
xor eax eax +
inc eax  +
push edi  +
mov edi [ebp+arg_4] +
test [ebp+arg_14] al +
jz loc_101B309  +
sub [ebp+arg_C] 20h +
test [ebp+arg_14] 80h +
mov [ebp+var_24] 25h +
jz loc_101B31A  +
push 2  +
mov byte ptr [ebp-23h] 23h +
pop eax  +
push esi  +
mov [ebp+eax+var_24] 2Eh +
push 0Ah  +
lea eax [ebp+eax-23h] +
push eax  +
push [ebp+arg_10]  +
call ds:_itoa  +
lea eax [ebp+var_24] +
add esp 0Ch +
lea esi [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_101B339  +
mov cl byte ptr [ebp+arg_C] +
sub eax esi +
mov [ebp+eax+var_24] cl +
mov byte ptr [ebp+eax-23h] 0 +
mov eax [ebp+arg_8] +
lea esi [edi+eax-1] +
mov byte ptr [esi] 0 +
push ecx  +
push ecx  +
mov ecx [ebp+var_28] +
fld  qword ptr [ecx] +
lea ecx [ebp+var_24] +
fstp  [esp+38h+var_38] +
push ecx  +
push eax  +
push edi  +
call ds:_snprintf  +
add esp 14h +
cmp byte ptr [esi] 0 +
pop esi  +
jnz loc_101B37F  +
test eax eax +
jle loc_101B37F  +
xor eax eax +
jmp loc_101B385  +
push 16h  +
mov byte ptr [edi] 0 +
pop eax  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_101A463  +
leave   +
retn   +
***
mov ecx [eax+0Ch] +
test cl 40h +
jz loc_101B3A5  +
cmp dword ptr [eax+8] 0 +
jz loc_101B3DA  +
add dword ptr [eax+4] 0FFFFFFFEh +
mov edx 0FFFFh +
js loc_101B3BD  +
mov ecx [eax] +
mov [ecx] si +
add dword ptr [eax] 2 +
movzx ecx si +
jmp loc_101B3C5  +
or ecx 20h +
mov [eax+0Ch] ecx +
mov ecx edx +
cmp cx dx +
jnz loc_101B3DA  +
push eax  +
call ds:ferror  +
pop ecx  +
test eax eax +
jz loc_101B3DA  +
or dword ptr [edi] 0FFFFFFFFh +
retn   +
inc dword ptr [edi]  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
push edi  +
mov edi eax +
jle loc_101B40B  +
push esi  +
mov eax [ebp+arg_8] +
mov esi [ebp+arg_0] +
dec [ebp+arg_4]  +
call sub_101B397  +
cmp dword ptr [edi] 0FFFFFFFFh +
jz loc_101B40A  +
cmp [ebp+arg_4] 0 +
jg loc_101B3F1  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebx+0Ch] 40h +
push edi  +
mov edi eax +
jz loc_101B42E  +
cmp dword ptr [ebx+8] 0 +
jnz loc_101B42E  +
mov eax [ebp+arg_4] +
add [edi] eax +
jmp loc_101B46A  +
cmp [ebp+arg_4] 0 +
jle loc_101B46A  +
push esi  +
mov eax [ebp+arg_0] +
movzx esi word ptr [eax] +
dec [ebp+arg_4]  +
mov eax ebx +
call sub_101B397  +
add [ebp+arg_0] 2 +
cmp dword ptr [edi] 0FFFFFFFFh +
jnz loc_101B463  +
call ds:__imp__errno  +
cmp dword ptr [eax] 2Ah +
jnz loc_101B469  +
push 3Fh  +
mov eax ebx +
pop esi  +
call sub_101B397  +
cmp [ebp+arg_4] 0 +
jg loc_101B435  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 468h +
mov eax dword_1028534 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
xor edi edi +
mov [ebp+var_428] eax +
mov [ebp+var_418] ebx +
mov [ebp+var_44C] edi +
mov [ebp+var_408] edi +
mov [ebp+var_430] edi +
mov [ebp+var_40C] edi +
mov [ebp+var_424] edi +
mov dword ptr [ebp+var_438] edi +
mov [ebp+var_454] edi +
mov [ebp+var_42C] edi +
cmp eax edi +
jnz loc_101B4F6  +
call ds:__imp__errno  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
mov dword ptr [eax] 16h +
call sub_101A874  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_101BF35  +
cmp esi edi +
jz loc_101B4D5  +
movzx ecx word ptr [esi] +
mov [ebp+var_420] edi +
mov [ebp+var_414] edi +
mov [ebp+var_440] edi +
mov [ebp+var_448] edi +
mov [ebp+var_41C] ecx +
cmp cx di +
jz loc_101BF2F  +
inc esi  +
inc esi  +
cmp [ebp+var_420] edi +
mov [ebp+var_450] esi +
jl loc_101BF1A  +
lea eax [ecx-20h] +
cmp ax 58h +
ja loc_101B550  +
movzx eax cx +
movzx eax byte ptr ds:ExceptionInfo.ContextRecord[eax] +
and eax 0Fh +
jmp loc_101B552  +
xor eax eax +
mov edx [ebp+var_440] +
imul eax eax +
movzx eax ds:byte_1006240[eax+edx] +
push 8  +
shr eax 4 +
pop edx  +
mov [ebp+var_440] eax +
cmp eax edx +
jz loc_101B4D5  +
cmp eax 7 +
ja loc_101BEF7  +
jmp ds:off_101BF46[eax*4]  +
or [ebp+var_40C] 0FFFFFFFFh +
mov dword ptr [ebp+var_438] edi +
mov [ebp+var_454] edi +
mov [ebp+var_430] edi +
mov [ebp+var_424] edi +
mov [ebp+var_408] edi +
mov [ebp+var_42C] edi +
jmp loc_101BF05  +
movzx eax cx +
sub eax 20h +
jz loc_101B607  +
sub eax 3 +
jz loc_101B5F8  +
sub eax edx +
jz loc_101B5EC  +
dec eax  +
dec eax  +
jz loc_101B5E0  +
sub eax 3 +
jnz loc_101BEF7  +
or [ebp+var_408] edx +
jmp loc_101BF05  +
or [ebp+var_408] 4 +
jmp loc_101BF05  +
or [ebp+var_408] 1 +
jmp loc_101BF05  +
or [ebp+var_408] 80h +
jmp loc_101BF05  +
or [ebp+var_408] 2 +
jmp loc_101BF05  +
cmp cx 2Ah +
jnz loc_101B644  +
mov eax [ebx] +
add ebx 4 +
cmp eax edi +
mov [ebp+var_418] ebx +
mov [ebp+var_430] eax +
jge loc_101BF05  +
or [ebp+var_408] 4 +
neg [ebp+var_430]  +
jmp loc_101BF05  +
mov eax [ebp+var_430] +
imul eax eax +
movzx ecx cx +
lea eax [eax+ecx-30h] +
mov [ebp+var_430] eax +
jmp loc_101BF05  +
mov [ebp+var_40C] edi +
jmp loc_101BF05  +
cmp cx 2Ah +
jnz loc_101B695  +
mov eax [ebx] +
add ebx 4 +
cmp eax edi +
mov [ebp+var_418] ebx +
mov [ebp+var_40C] eax +
jge loc_101BF05  +
or [ebp+var_40C] 0FFFFFFFFh +
jmp loc_101BF05  +
mov eax [ebp+var_40C] +
imul eax eax +
movzx ecx cx +
lea eax [eax+ecx-30h] +
mov [ebp+var_40C] eax +
jmp loc_101BF05  +
movzx eax cx +
cmp eax 49h +
jz loc_101B709  +
cmp eax 68h +
jz loc_101B6FD  +
cmp eax 6Ch +
jz loc_101B6DA  +
cmp eax 77h +
jnz loc_101BF05  +
or [ebp+var_408] 800h +
jmp loc_101BF05  +
cmp word ptr [esi] 6Ch +
jnz loc_101B6F1  +
inc esi  +
inc esi  +
or [ebp+var_408] 1000h +
jmp loc_101BF05  +
or [ebp+var_408] 10h +
jmp loc_101BF05  +
or [ebp+var_408] 20h +
jmp loc_101BF05  +
movzx eax word ptr [esi] +
cmp ax 36h +
jnz loc_101B72B  +
cmp word ptr [esi+2] 34h +
jnz loc_101B72B  +
add esi 4 +
or [ebp+var_408] 8000h +
jmp loc_101BF05  +
cmp ax 33h +
jnz loc_101B74A  +
cmp word ptr [esi+2] 32h +
jnz loc_101B74A  +
add esi 4 +
and [ebp+var_408] 0FFFF7FFFh +
jmp loc_101BF05  +
cmp ax 64h +
jz loc_101BF05  +
cmp ax 69h +
jz loc_101BF05  +
cmp ax 6Fh +
jz loc_101BF05  +
cmp ax 75h +
jz loc_101BF05  +
cmp ax 78h +
jz loc_101BF05  +
cmp ax 58h +
jz loc_101BF05  +
mov [ebp+var_440] edi +
mov eax [ebp+var_428] +
lea edi [ebp+var_420] +
mov esi ecx +
mov [ebp+var_42C] 1 +
call sub_101B397  +
jmp loc_101BEFD  +
movzx eax cx +
cmp eax 64h +
jg loc_101BA04  +
jz loc_101BA57  +
cmp eax 53h +
jg loc_101B8DC  +
jz loc_101B848  +
sub eax 41h +
jz loc_101B7E0  +
dec eax  +
dec eax  +
jz loc_101B82C  +
dec eax  +
dec eax  +
jz loc_101B7E0  +
dec eax  +
dec eax  +
jnz loc_101BD5A  +
add ecx 20h +
mov dword ptr [ebp+var_438] 1 +
mov [ebp+var_41C] ecx +
or [ebp+var_408] 40h +
cmp [ebp+var_40C] edi +
lea eax [ebp+var_404] +
mov [ebp+var_410] eax +
mov eax 200h +
mov [ebp+var_434] eax +
jge loc_101BA86  +
mov [ebp+var_40C] 6 +
jmp loc_101BAED  +
test [ebp+var_408] 830h +
jnz loc_101B8FE  +
or [ebp+var_408] 20h +
jmp loc_101B8FE  +
test [ebp+var_408] 830h +
jnz loc_101B85B  +
or [ebp+var_408] 20h +
mov edi [ebp+var_40C] +
cmp edi 0FFFFFFFFh +
jnz loc_101B86B  +
mov edi 7FFFFFFFh +
add ebx 4 +
test byte ptr [ebp+var_408] 20h +
mov [ebp+var_418] ebx +
mov ebx [ebx-4] +
mov [ebp+var_410] ebx +
jz loc_101BD1E  +
test ebx ebx +
jnz loc_101B899  +
mov eax off_1028550 +
mov [ebp+var_410] eax +
and [ebp+var_414] 0 +
mov esi [ebp+var_410] +
test edi edi +
jle loc_101BD5A  +
mov al [esi] +
test al al +
jz loc_101BD5A  +
movzx eax al +
push eax  +
call ds:isleadbyte  +
pop ecx  +
test eax eax +
jz loc_101B8C8  +
inc esi  +
inc esi  +
inc [ebp+var_414]  +
cmp [ebp+var_414] edi +
jl loc_101B8AE  +
jmp loc_101BD5A  +
sub eax 58h +
jz loc_101BB76  +
dec eax  +
dec eax  +
jz loc_101B977  +
sub eax 7 +
jz loc_101B7F3  +
dec eax  +
dec eax  +
jnz loc_101BD5A  +
movzx eax word ptr [ebx] +
add ebx 4 +
xor esi esi +
inc esi  +
test byte ptr [ebp+var_408] 20h +
mov [ebp+var_42C] esi +
mov [ebp+var_418] ebx +
mov dword ptr [ebp+var_458] eax +
jz loc_101B959  +
mov [ebp+var_444] al +
mov eax ds:__mb_cur_max +
mov byte ptr [ebp-443h] 0 +
push dword ptr [eax]  +
lea eax [ebp+var_444] +
push eax  +
lea eax [ebp+var_404] +
push eax  +
call ds:mbtowc  +
add esp 0Ch +
test eax eax +
jge loc_101B960  +
mov [ebp+var_454] esi +
jmp loc_101B960  +
mov [ebp+var_404] ax +
lea eax [ebp+var_404] +
mov [ebp+var_410] eax +
mov [ebp+var_414] esi +
jmp loc_101BD5A  +
mov eax [ebx] +
add ebx 4 +
mov [ebp+var_418] ebx +
cmp eax edi +
jz loc_101B9E8  +
mov esi [eax+4] +
cmp esi edi +
jz loc_101B9E8  +
movzx ecx word ptr [eax] +
cmp [eax+2] cx +
jb loc_101B4D5  +
test [ebp+var_408] 800h +
movzx eax cx +
jz loc_101B9D7  +
xor ecx ecx +
mov edx eax +
not edx  +
inc ecx  +
test dl cl +
jz loc_101B4D5  +
mov edx esi +
not edx  +
test dl cl +
jz loc_101B4D5  +
mov [ebp+var_410] esi +
shr eax 1 +
mov [ebp+var_42C] ecx +
jmp loc_101BD54  +
mov [ebp+var_42C] edi +
mov [ebp+var_410] esi +
jmp loc_101BD54  +
mov eax off_1028550 +
mov [ebp+var_410] eax +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_101B9F6  +
sub eax edx +
jmp loc_101BD54  +
cmp eax 70h +
jg loc_101BB82  +
jz loc_101BB70  +
cmp eax 65h +
jl loc_101BD5A  +
cmp eax 67h +
jle loc_101B7F3  +
cmp eax 69h +
jz loc_101BA57  +
cmp eax 6Eh +
jz loc_101B4D5  +
cmp eax 6Fh +
jnz loc_101BD5A  +
test byte ptr [ebp+var_408] 80h +
mov [ebp+var_41C] edx +
jz loc_101BA68  +
or [ebp+var_408] 200h +
jmp loc_101BA68  +
or [ebp+var_408] 40h +
mov [ebp+var_41C] 0Ah +
mov eax [ebp+var_408] +
test eax 8000h +
jz loc_101BBE6  +
add ebx edx +
mov eax [ebx-8] +
mov edx [ebx-4] +
jmp loc_101BC1B  +
jnz loc_101BA9A  +
cmp cx 67h +
jnz loc_101BAED  +
mov [ebp+var_40C] 1 +
jmp loc_101BAED  +
cmp [ebp+var_40C] eax +
jle loc_101BAA8  +
mov [ebp+var_40C] eax +
mov edi 0A3h +
cmp [ebp+var_40C] edi +
jle loc_101BAED  +
mov esi [ebp+var_40C] +
add esi 15Dh +
push esi  +
call ds:malloc  +
pop ecx  +
mov ecx [ebp+var_41C] +
mov [ebp+var_448] eax +
test eax eax +
jz loc_101BAE7  +
mov [ebp+var_410] eax +
mov [ebp+var_434] esi +
jmp loc_101BAED  +
mov [ebp+var_40C] edi +
test byte ptr [ebp+var_408] 80h +
jz loc_101BB00  +
or dword ptr [ebp+var_438] 80h +
mov eax [ebx] +
push dword ptr [ebp+var_438]  +
mov esi [ebp+var_410] +
push [ebp+var_40C]  +
add ebx 8 +
mov [ebp+var_468] eax +
mov eax [ebx-4] +
mov [ebp+var_464] eax +
movsx eax cl +
push eax  +
push [ebp+var_434]  +
lea eax [ebp+var_468] +
push esi  +
push eax  +
mov [ebp+var_418] ebx +
call sub_101B2E1  +
add esp 18h +
cmp byte ptr [esi] 2Dh +
jnz loc_101BB5B  +
or [ebp+var_408] 100h +
inc [ebp+var_410]  +
mov eax [ebp+var_410] +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_101BB64  +
jmp loc_101B9FD  +
mov [ebp+var_40C] edx +
mov [ebp+var_44C] 7 +
jmp loc_101BBA6  +
sub eax 73h +
jz loc_101B85B  +
dec eax  +
dec eax  +
jz loc_101BA5E  +
sub eax 3 +
jnz loc_101BD5A  +
mov [ebp+var_44C] 27h +
test byte ptr [ebp+var_408] 80h +
mov [ebp+var_41C] 10h +
jz loc_101BA68  +
push 30h  +
pop eax  +
mov word ptr [ebp+var_43C] ax +
mov eax [ebp+var_44C] +
add eax 51h +
mov word ptr [ebp+var_43C+2] ax +
mov [ebp+var_424] 2 +
jmp loc_101BA68  +
test eax 1000h +
jnz loc_101BA79  +
add ebx 4 +
test al 20h +
jz loc_101BC0F  +
mov [ebp+var_418] ebx +
test al 40h +
jz loc_101BC08  +
movsx eax word ptr [ebx-4] +
jmp loc_101BC0C  +
movzx eax word ptr [ebx-4] +
cdq   +
jmp loc_101BC21  +
test al 40h +
mov eax [ebx-4] +
jz loc_101BC19  +
cdq   +
jmp loc_101BC1B  +
xor edx edx +
mov [ebp+var_418] ebx +
test byte ptr [ebp+var_408] 40h +
jz loc_101BC45  +
cmp edx edi +
jg loc_101BC45  +
jl loc_101BC34  +
cmp eax edi +
jnb loc_101BC45  +
neg eax  +
adc edx 0 +
neg edx  +
or [ebp+var_408] 100h +
test [ebp+var_408] 9000h +
mov ebx edx +
mov edi eax +
jnz loc_101BC57  +
xor ebx ebx +
cmp [ebp+var_40C] 0 +
jge loc_101BC6C  +
mov [ebp+var_40C] 1 +
jmp loc_101BC86  +
and [ebp+var_408] 0FFFFFFF7h +
mov eax 200h +
cmp [ebp+var_40C] eax +
jle loc_101BC86  +
mov [ebp+var_40C] eax +
mov eax edi +
or eax ebx +
jnz loc_101BC92  +
and [ebp+var_424] eax +
lea esi [ebp+var_205] +
mov eax [ebp+var_40C] +
dec [ebp+var_40C]  +
test eax eax +
jg loc_101BCAE  +
mov eax edi +
or eax ebx +
jz loc_101BCDB  +
mov eax [ebp+var_41C] +
cdq   +
push edx  +
push eax  +
push ebx  +
push edi  +
call __aulldvrm  +
add ecx 30h +
cmp ecx 39h +
mov [ebp+var_45C] ebx +
mov edi eax +
mov ebx edx +
jle loc_101BCD6  +
add ecx [ebp+var_44C] +
mov [esi] cl +
dec esi  +
jmp loc_101BC98  +
lea eax [ebp+var_205] +
sub eax esi +
inc esi  +
test [ebp+var_408] 200h +
mov [ebp+var_414] eax +
mov [ebp+var_410] esi +
jz loc_101BD5A  +
test eax eax +
jz loc_101BD07  +
mov eax esi +
cmp byte ptr [eax] 30h +
jz loc_101BD5A  +
dec [ebp+var_410]  +
mov eax [ebp+var_410] +
inc [ebp+var_414]  +
mov byte ptr [eax] 30h +
jmp loc_101BD5A  +
test ebx ebx +
jnz loc_101BD2D  +
mov eax off_1028554 +
mov [ebp+var_410] eax +
mov eax [ebp+var_410] +
mov [ebp+var_42C] 1 +
jmp loc_101BD48  +
dec edi  +
cmp word ptr [eax] 0 +
jz loc_101BD4C  +
inc eax  +
inc eax  +
test edi edi +
jnz loc_101BD3F  +
sub eax [ebp+var_410] +
sar eax 1 +
mov [ebp+var_414] eax +
cmp [ebp+var_454] 0 +
jnz loc_101BEDA  +
mov eax [ebp+var_408] +
test al 40h +
jz loc_101BD9C  +
test eax 100h +
jz loc_101BD7C  +
push 2Dh  +
jmp loc_101BD8A  +
test al 1 +
jz loc_101BD84  +
push 2Bh  +
jmp loc_101BD8A  +
test al 2 +
jz loc_101BD9C  +
push 20h  +
pop ecx  +
mov word ptr [ebp+var_43C] cx +
mov [ebp+var_424] 1 +
mov esi [ebp+var_430] +
sub esi [ebp+var_414] +
sub esi [ebp+var_424] +
mov [ebp+var_45C] esi +
test al 0Ch +
jnz loc_101BDCF  +
push [ebp+var_428]  +
lea eax [ebp+var_420] +
push esi  +
push 20h  +
call sub_101B3E2  +
add esp 0Ch +
push [ebp+var_424]  +
mov ebx [ebp+var_428] +
lea eax [ebp+var_43C] +
push eax  +
lea eax [ebp+var_420] +
call sub_101B413  +
test byte ptr [ebp+var_408] 8 +
pop ecx  +
pop ecx  +
jz loc_101BE13  +
test byte ptr [ebp+var_408] 4 +
jnz loc_101BE13  +
push ebx  +
push esi  +
push 30h  +
lea eax [ebp+var_420] +
call sub_101B3E2  +
add esp 0Ch +
cmp [ebp+var_42C] 0 +
jnz loc_101BE98  +
mov eax [ebp+var_414] +
test eax eax +
jle loc_101BE98  +
mov ecx [ebp+var_410] +
mov [ebp+var_41C] ecx +
mov [ebp+var_434] eax +
mov eax ds:__mb_cur_max +
push dword ptr [eax]  +
dec [ebp+var_434]  +
push [ebp+var_41C]  +
lea eax [ebp+var_458] +
push eax  +
call ds:mbtowc  +
mov ebx eax +
add esp 0Ch +
test ebx ebx +
jle loc_101BE8F  +
mov eax [ebp+var_428] +
mov esi dword ptr [ebp+var_458] +
lea edi [ebp+var_420] +
call sub_101B397  +
add [ebp+var_41C] ebx +
cmp [ebp+var_434] 0 +
mov esi [ebp+var_45C] +
jg loc_101BE38  +
jmp loc_101BEB1  +
or [ebp+var_420] 0FFFFFFFFh +
jmp loc_101BEB1  +
push [ebp+var_414]  +
lea eax [ebp+var_420] +
push [ebp+var_410]  +
call sub_101B413  +
pop ecx  +
pop ecx  +
cmp [ebp+var_420] 0 +
jl loc_101BEDA  +
test byte ptr [ebp+var_408] 4 +
jz loc_101BEDA  +
push [ebp+var_428]  +
lea eax [ebp+var_420] +
push esi  +
push 20h  +
call sub_101B3E2  +
add esp 0Ch +
cmp [ebp+var_448] 0 +
jz loc_101BEF7  +
push [ebp+var_448]  +
call ds:__imp_free  +
and [ebp+var_448] 0 +
pop ecx  +
mov ebx [ebp+var_418] +
mov esi [ebp+var_450] +
xor edi edi +
movzx eax word ptr [esi] +
mov [ebp+var_41C] eax +
cmp ax di +
jz loc_101BF1A  +
mov ecx eax +
jmp loc_101B524  +
cmp [ebp+var_440] edi +
jz loc_101BF2F  +
cmp [ebp+var_440] 7 +
jnz loc_101B4D5  +
mov eax [ebp+var_420] +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101A463  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push edi  +
mov edi [ebp+arg_4] +
cmp edi 0FFFFFFFFh +
jnz loc_101BF86  +
mov [ebp+var_1C] 7FFFFFFFh +
jmp loc_101BFB7  +
cmp edi 3FFFFFFFh +
jbe loc_101BFB1  +
call ds:__imp__errno  +
xor ebx ebx +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov dword ptr [eax] 16h +
call sub_101A874  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_101C042  +
lea eax [edi+edi] +
mov [ebp+var_1C] eax +
push esi  +
push [ebp+arg_C]  +
mov esi [ebp+arg_0] +
push [ebp+arg_8]  +
lea eax [ebp+var_20] +
push eax  +
mov [ebp+var_18] esi +
mov [ebp+var_20] esi +
mov [ebp+var_14] 42h +
call sub_101B472  +
xor ecx ecx +
xor ebx ebx +
add esp 0Ch +
cmp eax ebx +
mov [ebp+arg_4] eax +
mov [esi+edi*2-2] cx +
jge loc_101BFFC  +
cmp [ebp+var_1C] ebx +
jl loc_101C03E  +
cmp esi ebx +
jz loc_101C041  +
cmp edi ebx +
jbe loc_101C041  +
mov [esi] cx +
jmp loc_101C041  +
dec [ebp+var_1C]  +
js loc_101C00B  +
mov eax [ebp+var_20] +
mov [eax] bl +
inc [ebp+var_20]  +
jmp loc_101C01C  +
lea eax [ebp+var_20] +
push eax  +
push ebx  +
call sub_101C0E9  +
pop ecx  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_101C03E  +
dec [ebp+var_1C]  +
js loc_101C028  +
mov eax [ebp+var_20] +
mov [eax] bl +
jmp loc_101C039  +
lea eax [ebp+var_20] +
push eax  +
push ebx  +
call sub_101C0E9  +
pop ecx  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_101C03E  +
mov eax [ebp+arg_4] +
jmp loc_101C041  +
push 0FFFFFFFEh  +
pop eax  +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov ebx offset unk_1028558 +
retn   +
***
push ecx  +
lea ecx [esp+4] +
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb cs20  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp] eax +
retn   +
***
sub eax 1000h +
test [eax] eax +
jmp cs10  +
***
mov eax [esp+8] +
mov ecx [esp+10h] +
or ecx eax +
mov ecx [esp+0Ch] +
jnz loc_101C0C9  +
mov eax [esp+4] +
mul  ecx +
retn 10h  +
***
push ebx  +
mul  ecx +
mov ebx eax +
mov eax [esp+8] +
mul  dword ptr [esp+14h] +
add ebx eax +
mov eax [esp+8] +
mul  ecx +
add edx ebx +
pop ebx  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_4] +
push esi  +
call ds:_fileno  +
mov [ebp+arg_4] eax +
mov eax [esi+0Ch] +
pop ecx  +
test al 82h +
jnz loc_101C11D  +
call ds:__imp__errno  +
mov dword ptr [eax] 9 +
or dword ptr [esi+0Ch] 20h +
or eax 0FFFFFFFFh +
jmp loc_101C25D  +
test al 40h +
jz loc_101C12F  +
call ds:__imp__errno  +
mov dword ptr [eax] 22h +
jmp loc_101C111  +
push ebx  +
xor ebx ebx +
test al 1 +
jz loc_101C148  +
mov [esi+4] ebx +
test al 10h +
jz loc_101C1A3  +
mov ecx [esi+8] +
and eax 0FFFFFFFEh +
mov [esi] ecx +
mov [esi+0Ch] eax +
mov eax [esi+0Ch] +
and eax 0FFFFFFEFh +
or eax 2 +
mov [esi+0Ch] eax +
mov [esi+4] ebx +
mov [ebp+var_4] ebx +
test eax 10Ch +
jnz loc_101C1AB  +
mov eax ds:_iob +
lea ecx [eax+20h] +
cmp esi ecx +
jz loc_101C174  +
add eax 40h +
cmp esi eax +
jnz loc_101C182  +
push [ebp+arg_4]  +
call ds:_isatty  +
pop ecx  +
test eax eax +
jnz loc_101C1AB  +
call ds:__imp__errno  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov dword ptr [eax] 16h +
call sub_101A874  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_101C25C  +
or eax 20h +
mov [esi+0Ch] eax +
jmp loc_101C19B  +
test dword ptr [esi+0Ch] 108h +
push edi  +
jz loc_101C22E  +
mov eax [esi+8] +
mov edi [esi] +
lea ecx [eax+1] +
mov [esi] ecx +
mov ecx [esi+18h] +
sub edi eax +
dec ecx  +
cmp edi ebx +
mov [esi+4] ecx +
jle loc_101C1DF  +
push edi  +
push eax  +
push [ebp+arg_4]  +
call ds:_write  +
add esp 0Ch +
mov [ebp+var_4] eax +
jmp loc_101C224  +
mov eax [ebp+arg_4] +
cmp eax 0FFFFFFFFh +
jz loc_101C202  +
cmp eax 0FFFFFFFEh +
jz loc_101C202  +
mov edx ds:__pioinfo +
mov ecx eax +
and eax 1Fh +
imul eax eax +
sar ecx 5 +
add eax [edx+ecx*4] +
jmp loc_101C207  +
mov eax ds:__badioinfo +
test byte ptr [eax+4] 20h +
jz loc_101C224  +
push 2  +
push ebx  +
push ebx  +
push [ebp+arg_4]  +
call ds:_lseeki64  +
and eax edx +
add esp 10h +
cmp eax 0FFFFFFFFh +
jz loc_101C24A  +
mov eax [esi+8] +
mov cl byte ptr [ebp+arg_0] +
mov [eax] cl +
jmp loc_101C245  +
xor edi edi +
inc edi  +
push edi  +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+arg_4]  +
call ds:_write  +
add esp 0Ch +
mov [ebp+var_4] eax +
cmp [ebp+var_4] edi +
jz loc_101C253  +
or dword ptr [esi+0Ch] 20h +
or eax 0FFFFFFFFh +
jmp loc_101C25B  +
mov eax [ebp+arg_0] +
and eax 0FFh +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jnz loc_101C277  +
call sub_100DFE7  +
jmp loc_101C279  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_1028534 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor eax eax +
push 206h  +
xor edi edi +
mov [ebp+FileName] ax +
lea eax [ebp-20Ah] +
push edi  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+FileName] +
push eax  +
push edi  +
push offset PrefixString  +
push esi  +
call ds:GetTempFileNameW  +
test eax eax +
jnz loc_101C2EC  +
call ds:GetLastError  +
cmp eax edi +
jle loc_101C2E8  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
jmp loc_101C314  +
push edi  +
push 4000000h  +
push 2  +
push edi  +
push edi  +
push 0C0000000h  +
lea eax [ebp+FileName] +
push eax  +
call ds:CreateFileW  +
cmp eax 0FFFFFFFFh +
jz loc_101C2D4  +
push eax  +
call ds:CloseHandle  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_101A463  +
leave   +
retn 4  +
***
call __EH_prolog3_catch  +
xor edi edi +
push edi  +
push dword ptr [ebp+8]  +
call sub_101F170  +
mov esi ds:GetLastError +
mov [ebp+8] eax +
call esi  +
cmp eax edi +
jz loc_101C380  +
call esi  +
cmp eax edi +
jle loc_101C363  +
and eax 0FFFFh +
or eax 80070000h +
cmp eax edi +
jge loc_101C379  +
call esi  +
cmp eax edi +
jle loc_101C375  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
jmp loc_101C39F  +
mov edi 80004005h +
jmp loc_101C39F  +
push dword ptr [ebp+8]  +
mov ecx [ebp+0Ch] +
mov [ebp-4] edi +
call sub_100BB74  +
jmp loc_101C39F  +
mov eax [ebp-14h] +
mov [ebp+0Ch] eax +
mov eax offset loc_101C39C +
retn   +
mov edi [ebp+0Ch] +
cmp dword ptr [ebp+8] 0 +
jz loc_101C3B7  +
push dword ptr [ebp+8]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax edi +
call __EH_epilog3  +
retn 8  +
***
call __EH_prolog3_catch  +
mov eax [ebp-18h] +
mov [ebp+0Ch] eax +
mov eax offset loc_101C3FB +
retn   +
***
call __EH_prolog3_catch  +
xor edi edi +
push edi  +
push dword ptr [ebp+8]  +
call sub_101F170  +
mov esi ds:GetLastError +
mov [ebp+8] eax +
call esi  +
cmp eax edi +
jz loc_101C484  +
call esi  +
cmp eax edi +
jle loc_101C467  +
and eax 0FFFFh +
or eax 80070000h +
cmp eax edi +
jge loc_101C47D  +
call esi  +
cmp eax edi +
jle loc_101C479  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
jmp loc_101C4A3  +
mov edi 80004005h +
jmp loc_101C4A3  +
push dword ptr [ebp+8]  +
mov ecx [ebp+0Ch] +
mov [ebp-4] edi +
call sub_100CB21  +
jmp loc_101C4A3  +
mov eax [ebp-14h] +
mov [ebp+0Ch] eax +
mov eax offset loc_101C4A0 +
retn   +
mov edi [ebp+0Ch] +
cmp dword ptr [ebp+8] 0 +
jz loc_101C4BB  +
push dword ptr [ebp+8]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax edi +
call __EH_epilog3  +
retn 8  +
***
call __EH_prolog3_catch  +
push offset a?  +
push dword ptr [ebp+8]  +
call ds:wcsstr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_101C4EF  +
add eax 8 +
jmp loc_101C4F2  +
mov eax [ebp+8] +
mov ecx [ebp+0Ch] +
and dword ptr [ebp-4] 0 +
push eax  +
call sub_100CB21  +
xor eax eax +
jmp loc_101C50C  +
mov eax offset loc_101C509 +
retn   +
mov eax [ebp-14h] +
call __EH_epilog3  +
retn 8  +
***
call __EH_prolog3  +
mov esi [ebp+0Ch] +
and dword ptr [esi] 0 +
push offset dword_1044E10  +
lea ecx [ebp+0Ch] +
call sub_100BC7D  +
and dword ptr [ebp-4] 0 +
push offset a?Unc  +
push dword ptr [ebp+8]  +
call ds:wcsstr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_101C56D  +
mov dword ptr [esi] 1 +
xor esi esi +
mov ecx [ebp+0Ch] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov eax esi +
call __EH_epilog3  +
retn 8  +
lea eax [ebp+0Ch] +
push eax  +
push dword ptr [ebp+8]  +
call sub_101C4CA  +
mov edi eax +
test edi edi +
jge loc_101C583  +
mov esi edi +
jmp loc_101C558  +
push dword ptr [ebp+0Ch]  +
call sub_101F3FB  +
mov [esi] eax +
jmp loc_101C57F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
push eax  +
push eax  +
push 0FFFFFFFFh  +
push [ebp+lpMultiByteStr]  +
push eax  +
push 3  +
call ds:MultiByteToWideChar  +
dec eax  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+cchWideChar]  +
push [ebp+lpWideCharStr]  +
push [ebp+cchMultiByte]  +
push [ebp+lpMultiByteStr]  +
push 0  +
push 3  +
call ds:MultiByteToWideChar  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14Ch +
mov eax dword_1028534 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+lpFileName] +
mov ecx [ebp+arg_4] +
push ebx  +
push esi  +
xor esi esi +
push esi  +
push 80h  +
push 3  +
push esi  +
xor ebx ebx +
inc ebx  +
push ebx  +
push 80000000h  +
push eax  +
mov [ebp+var_50] ecx +
mov [ebp+var_48] esi +
mov [ebp+NumberOfBytesRead] esi +
call ds:CreateFileW  +
mov [ebp+hObject] eax +
cmp eax 0FFFFFFFFh +
jnz loc_101C63C  +
call ds:GetLastError  +
cmp eax esi +
jg loc_101C630  +
mov [ebp+var_48] eax +
jmp loc_101C780  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_101C628  +
push edi  +
mov edi ds:ReadFile +
push esi  +
lea ecx [ebp+NumberOfBytesRead] +
push ecx  +
push 40h  +
lea ecx [ebp+Buffer] +
push ecx  +
push eax  +
call edi  +
test eax eax +
jnz loc_101C661  +
call ds:GetLastError  +
cmp eax esi +
jg loc_101C6B1  +
jmp loc_101C6BB  +
mov eax 5A4Dh +
cmp word ptr [ebp+Buffer] ax +
jnz loc_101C759  +
push esi  +
push esi  +
push [ebp+lDistanceToMove]  +
push [ebp+hObject]  +
call ds:SetFilePointer  +
mov esi ds:GetLastError +
call esi  +
test eax eax +
jz loc_101C690  +
call esi  +
test eax eax +
jmp loc_101C65D  +
push 0  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push 0F8h  +
lea eax [ebp+var_14C] +
push eax  +
push [ebp+hObject]  +
call edi  +
test eax eax +
jnz loc_101C6C3  +
call esi  +
test eax eax +
jle loc_101C6BB  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_48] eax +
jmp loc_101C776  +
cmp [ebp+var_14C] 4550h +
push 6  +
pop edx  +
push 9  +
pop esi  +
jnz loc_101C74D  +
movzx eax [ebp+var_F0] +
sub eax 5 +
jz loc_101C74A  +
dec eax  +
dec eax  +
jz loc_101C746  +
movzx ecx [ebp+var_148] +
mov eax 1F0h +
cmp ecx eax +
jg loc_101C71E  +
jz loc_101C71A  +
sub ecx 14Ch +
jz loc_101C716  +
sub ecx 16h +
jz loc_101C712  +
sub ecx 4 +
jz loc_101C712  +
sub ecx 1Eh +
jnz loc_101C736  +
push 8  +
jmp loc_101C74C  +
push 7  +
jmp loc_101C74C  +
mov ebx edx +
jmp loc_101C74D  +
mov ebx esi +
jmp loc_101C74D  +
cmp ecx 200h +
jz loc_101C742  +
cmp ecx 284h +
jz loc_101C73E  +
cmp ecx 8664h +
jz loc_101C73A  +
xor ebx ebx +
jmp loc_101C74D  +
push 0Ch  +
jmp loc_101C74C  +
push 0Ah  +
jmp loc_101C74C  +
push 0Bh  +
jmp loc_101C74C  +
push 4  +
jmp loc_101C74C  +
push 5  +
pop ebx  +
sub ebx edx +
jz loc_101C770  +
sub ebx 5 +
jz loc_101C769  +
dec ebx  +
jz loc_101C762  +
mov [ebp+var_48] 80070057h +
jmp loc_101C776  +
mov eax [ebp+var_50] +
mov [eax] esi +
jmp loc_101C776  +
mov eax [ebp+var_50] +
mov [eax] edx +
jmp loc_101C776  +
mov eax [ebp+var_50] +
and dword ptr [eax] 0 +
push [ebp+hObject]  +
call ds:CloseHandle  +
pop edi  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_48] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101A463  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpMultiByteStr] 0 +
push esi  +
push edi  +
mov edi ecx +
jz loc_101C7B4  +
push [ebp+lpMultiByteStr]  +
call sub_101C594  +
pop ecx  +
mov esi eax +
jmp loc_101C7B6  +
xor esi esi +
mov ecx edi +
test esi esi +
jle loc_101C7DB  +
push esi  +
call sub_100BDD2  +
push 0FFFFFFFFh  +
push [ebp+lpMultiByteStr]  +
push esi  +
push eax  +
call sub_101C5B3  +
add esp 10h +
push esi  +
mov ecx edi +
call loc_100B9FC  +
jmp loc_101C7E0  +
call sub_100BC41  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3_catch  +
cmp dword ptr [ebp+8] 0 +
jz loc_101C857  +
push 6  +
pop eax  +
cmp [ebp+8] eax +
jz loc_101C83E  +
cmp dword ptr [ebp+8] 9 +
mov ecx [ebp+0Ch] +
jz loc_101C825  +
mov [ebp-4] eax +
push offset aUnknown  +
jmp loc_101C863  +
mov eax offset loc_101C820 +
retn   +
mov eax [ebp-14h] +
jmp loc_101C875  +
mov dword ptr [ebp-4] 4 +
push offset aAmd64  +
jmp loc_101C863  +
mov eax offset loc_101C839 +
retn   +
mov eax [ebp-18h] +
jmp loc_101C875  +
mov dword ptr [ebp-4] 2 +
push offset aIa64  +
jmp loc_101C860  +
mov eax offset loc_101C852 +
retn   +
mov eax [ebp-1Ch] +
jmp loc_101C875  +
and dword ptr [ebp-4] 0 +
push offset MultiByteStr  +
mov ecx [ebp+0Ch] +
call sub_101C798  +
xor eax eax +
jmp loc_101C875  +
mov eax offset loc_101C872 +
retn   +
mov eax [ebp-20h] +
call __EH_epilog3  +
retn 8  +
***
call __EH_prolog3_catch_GS  +
mov esi [ebp+8] +
mov ecx esi +
call sub_100BC41  +
xor eax eax +
push 206h  +
mov [ebp-21Ch] ax +
xor ebx ebx +
lea eax [ebp-21Ah] +
push ebx  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp-224h] +
push eax  +
push ebx  +
push 2  +
pop edi  +
push edi  +
call ds:GetModuleHandleExW  +
test eax eax +
jnz loc_101C90B  +
mov esi ds:GetLastError +
call esi  +
cmp eax ebx +
jle loc_101C8E9  +
and eax 0FFFFh +
or eax 80070000h +
cmp eax ebx +
jge loc_101C904  +
call esi  +
cmp eax ebx +
jle loc_101C987  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_101C987  +
mov eax 80004005h +
jmp loc_101C987  +
push 104h  +
lea eax [ebp-21Ch] +
push eax  +
push dword ptr [ebp-224h]  +
call ds:GetModuleFileNameW  +
lea eax [ebp-21Ch] +
push eax  +
mov ecx esi +
mov [ebp-4] ebx +
call sub_100C63E  +
push 5Ch  +
mov ecx esi +
mov [ebp-4] edi +
call sub_1011658  +
push eax  +
lea eax [ebp-220h] +
push eax  +
mov ecx esi +
call sub_101265B  +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 3 +
call sub_100C8AA  +
mov ecx [ebp-220h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
xor eax eax +
jmp loc_101C987  +
mov eax offset loc_101C973 +
retn   +
mov eax [ebp-228h] +
jmp loc_101C987  +
mov eax offset loc_101C981 +
retn   +
mov eax [ebp-22Ch] +
call sub_101A591  +
retn 4  +
***
call __EH_prolog3_catch  +
xor esi esi +
push esi  +
push 2  +
lea eax [ebp-14h] +
push eax  +
push esi  +
push dword ptr [ebp+8]  +
xor edi edi +
push esi  +
push 1100h  +
mov [ebp-14h] esi +
call ds:FormatMessageW  +
cmp eax esi +
jnz loc_101C9D8  +
call ds:GetLastError  +
cmp eax esi +
jle loc_101C9D6  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
cmp [ebp-14h] esi +
jz loc_101CA0C  +
push dword ptr [ebp-14h]  +
mov ecx [ebp+0Ch] +
mov [ebp-4] esi +
call sub_100CB21  +
jmp loc_101C9FE  +
mov eax [ebp-18h] +
mov [ebp+8] eax +
mov eax offset loc_101C9F9 +
retn   +
mov edi [ebp+8] +
xor esi esi +
cmp [ebp-14h] esi +
jz loc_101CA0C  +
push dword ptr [ebp-14h]  +
call ds:LocalFree  +
mov eax edi +
call __EH_epilog3  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 118h +
mov eax dword_1028534 +
xor eax ebp +
mov [ebp+var_4] eax +
push edi  +
push 114h  +
xor edi edi +
lea eax [ebp+VersionInformation] +
push edi  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 114h +
call ds:GetVersionExW  +
test eax eax +
jz loc_101CA7E  +
cmp [ebp+VersionInformation.dwPlatformId] 2 +
jnz loc_101CA7E  +
cmp [ebp+VersionInformation.dwMajorVersion] 6 +
jnz loc_101CA7E  +
cmp [ebp+VersionInformation.dwMinorVersion] edi +
jnz loc_101CA7E  +
inc edi  +
mov ecx [ebp+var_4] +
mov eax edi +
xor ecx ebp +
pop edi  +
call sub_101A463  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_8] +
test ecx ecx +
jz loc_101CADE  +
mov eax [ebp+arg_4] +
cmp eax 7FFFFFFFh +
ja loc_101CADE  +
push edi  +
xor edi edi +
mov edx eax +
test eax eax +
jz loc_101CAC3  +
cmp [ecx] di +
jz loc_101CABF  +
inc ecx  +
inc ecx  +
dec edx  +
jnz loc_101CAB5  +
test edx edx +
jnz loc_101CAC8  +
mov edi 80070057h +
test esi esi +
jz loc_101CAD9  +
test edi edi +
jl loc_101CAD6  +
sub eax edx +
mov [esi] eax +
jmp loc_101CAD9  +
and dword ptr [esi] 0 +
mov eax edi +
pop edi  +
jmp loc_101CAE3  +
mov eax 80070057h +
test eax eax +
jge loc_101CAEE  +
test esi esi +
jz loc_101CAEE  +
and dword ptr [esi] 0 +
pop esi  +
pop ebp  +
retn 0Ch  +
***
call __EH_prolog3  +
push offset dword_1044E10  +
lea ecx [ebp-10h] +
call sub_100BC7D  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-38h] +
mov esi 0FFFFh +
push eax  +
mov [ebp-14h] esi +
call ds:GetSystemInfo  +
mov edi [ebp+8] +
lea eax [ebp-10h] +
push eax  +
push offset aSystem32Kernel  +
push edi  +
call sub_101C3C6  +
test eax eax +
jl loc_101CBB7  +
push dword ptr [ebp-10h]  +
call sub_101F6B2  +
test eax eax +
jnz loc_101CB50  +
mov esi 8007007Eh +
jmp loc_101CBB9  +
lea eax [ebp-14h] +
push eax  +
push dword ptr [ebp-10h]  +
call sub_101C5D5  +
mov ebx eax +
test ebx ebx +
jge loc_101CB66  +
mov esi ebx +
jmp loc_101CBB9  +
mov eax [ebp-14h] +
cmp eax esi +
jnz loc_101CB74  +
mov esi 80004005h +
jmp loc_101CBB9  +
cmp word ptr [ebp-38h] 9 +
jz loc_101CBA9  +
cmp word ptr [ebp-38h] 6 +
jz loc_101CBA9  +
test eax eax +
jz loc_101CBA9  +
cmp eax 6 +
jz loc_101CB9F  +
cmp eax 9 +
jz loc_101CB9F  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov eax ebx +
jmp loc_101CBC6  +
push dword ptr [ebp+0Ch]  +
push offset aSyswow64  +
jmp loc_101CBB1  +
push dword ptr [ebp+0Ch]  +
push offset aSystem32  +
push edi  +
call sub_101C3C6  +
mov esi eax +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov eax esi +
call __EH_epilog3  +
retn 8  +
***
call __EH_prolog3_catch  +
mov esi ds:GetSystemWindowsDirectoryW +
xor ebx ebx +
push ebx  +
push ebx  +
call esi  +
mov edi eax +
test edi edi +
jnz loc_101CC2E  +
mov esi ds:GetLastError +
call esi  +
test eax eax +
jle loc_101CC09  +
and eax 0FFFFh +
or eax 80070000h +
test eax eax +
jge loc_101CC24  +
call esi  +
test eax eax +
jg loc_101CC18  +
mov ebx eax +
jmp loc_101CD02  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_101CC11  +
mov ebx 80004005h +
jmp loc_101CD02  +
push offset unk_1044EAC  +
xor ecx ecx +
push 2  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_101A694  +
lea ecx [edi+edi] +
push ecx  +
push 0  +
push eax  +
mov [ebp-14h] eax +
call memset  +
add esp 14h +
push edi  +
push dword ptr [ebp-14h]  +
call esi  +
test eax eax +
jz loc_101CC86  +
push dword ptr [ebp-14h]  +
mov ecx [ebp+0Ch] +
and dword ptr [ebp-4] 0 +
call sub_100CB21  +
push dword ptr [ebp-14h]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
call sub_101F1F5  +
movzx eax ax +
test ax ax +
jnz loc_101CCBB  +
mov esi ds:GetLastError +
call esi  +
test eax eax +
jle loc_101CC9E  +
and eax 0FFFFh +
or eax 80070000h +
test eax eax +
jge loc_101CCB4  +
call esi  +
test eax eax +
jle loc_101CCB0  +
and eax 0FFFFh +
or eax 80070000h +
mov ebx eax +
jmp loc_101CCF3  +
mov ebx 80004005h +
jmp loc_101CCF3  +
movzx eax ax +
push eax  +
push offset aC_0  +
push dword ptr [ebp+8]  +
mov dword ptr [ebp-4] 2 +
call sub_100C88F  +
add esp 0Ch +
jmp loc_101CCF3  +
mov eax [ebp-18h] +
mov [ebp+0Ch] eax +
mov eax offset loc_101CCF0 +
retn   +
mov eax [ebp-1Ch] +
mov [ebp+0Ch] eax +
mov eax offset loc_101CCF0 +
retn   +
mov ebx [ebp+0Ch] +
cmp dword ptr [ebp-14h] 0 +
jz loc_101CD02  +
push dword ptr [ebp-14h]  +
call sub_1019EA8  +
pop ecx  +
mov eax ebx +
call __EH_epilog3  +
retn 8  +
***
call __EH_prolog3_catch  +
mov eax [ebp-1Ch] +
mov [ebp-14h] eax +
mov eax offset loc_101CD88 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+dwHandle] +
push eax  +
push [ebp+lptstrFilename]  +
xor ebx ebx +
mov [ebp+puLen] ebx +
mov [ebp+lpBuffer] ebx +
call GetFileVersionInfoSizeW  +
mov [ebp+dwLen] eax +
mov edi 0FFFFh +
mov esi 80070000h +
test eax eax +
jnz loc_101CE44  +
mov ebx ds:GetLastError +
call ebx  +
test eax eax +
jle loc_101CE27  +
and eax edi +
or eax esi +
test eax eax +
jge loc_101CE37  +
call ebx  +
test eax eax +
jle loc_101CE33  +
and eax edi +
or eax esi +
mov ebx eax +
jmp loc_101CE3C  +
mov ebx 80004005h +
test ebx ebx +
jl loc_101CF2C  +
push [ebp+dwLen]  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+lpMem] eax +
test eax eax +
jnz loc_101CE67  +
mov ebx 8007000Eh +
jmp loc_101CF14  +
push eax  +
push [ebp+dwLen]  +
push [ebp+dwHandle]  +
push [ebp+lptstrFilename]  +
call GetFileVersionInfoW  +
test eax eax +
jnz loc_101CEA5  +
mov ebx ds:GetLastError +
call ebx  +
test eax eax +
jle loc_101CE8C  +
and eax edi +
or eax esi +
test eax eax +
jge loc_101CE9C  +
call ebx  +
test eax eax +
jle loc_101CE98  +
and eax edi +
or eax esi +
mov ebx eax +
jmp loc_101CEA1  +
mov ebx 80004005h +
test ebx ebx +
jl loc_101CF14  +
lea eax [ebp+puLen] +
push eax  +
lea eax [ebp+lpBuffer] +
push eax  +
push offset SubBlock  +
push [ebp+lpMem]  +
call VerQueryValueW  +
test eax eax +
jnz loc_101CEE9  +
mov ebx ds:GetLastError +
call ebx  +
test eax eax +
jle loc_101CED0  +
and eax edi +
or eax esi +
test eax eax +
jge loc_101CEE0  +
call ebx  +
test eax eax +
jle loc_101CEDC  +
and eax edi +
or eax esi +
mov ebx eax +
jmp loc_101CEE5  +
mov ebx 80004005h +
test ebx ebx +
jl loc_101CF14  +
mov eax [ebp+lpBuffer] +
mov cx [eax+0Ah] +
mov edx [ebp+arg_4] +
mov [edx] cx +
mov cx [eax+8] +
mov edx [ebp+arg_8] +
mov [edx] cx +
mov cx [eax+0Eh] +
mov edx [ebp+arg_C] +
mov [edx] cx +
mov ax [eax+0Ch] +
mov ecx [ebp+arg_10] +
mov [ecx] ax +
cmp [ebp+lpMem] 0 +
jz loc_101CF2C  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 14h  +
***
call __EH_prolog3_catch_GS  +
mov esi [ebp+8] +
xor eax eax +
xor ebx ebx +
push 206h  +
mov [ebp-21Ch] ax +
lea eax [ebp-21Ah] +
push ebx  +
push eax  +
mov [ebp-230h] ebx +
call memset  +
add esp 0Ch +
lea eax [ebp-230h] +
push eax  +
push ebx  +
push 2  +
mov [ebp-224h] ebx +
mov [ebp-220h] ebx +
mov [ebp-228h] ebx +
mov [ebp-22Ch] ebx +
call ds:GetModuleHandleExW  +
test eax eax +
jnz loc_101CFDB  +
mov esi ds:GetLastError +
call esi  +
cmp eax ebx +
jle loc_101CFB6  +
and eax 0FFFFh +
or eax 80070000h +
cmp eax ebx +
jge loc_101CFD1  +
call esi  +
cmp eax ebx +
jle loc_101D066  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_101D066  +
mov eax 80004005h +
jmp loc_101D066  +
push 104h  +
lea eax [ebp-21Ch] +
push eax  +
push dword ptr [ebp-230h]  +
call ds:GetModuleFileNameW  +
test eax eax +
jz loc_101CF9E  +
lea eax [ebp-22Ch] +
push eax  +
lea eax [ebp-228h] +
push eax  +
lea eax [ebp-220h] +
push eax  +
lea eax [ebp-224h] +
push eax  +
lea eax [ebp-21Ch] +
push eax  +
call sub_101CDE5  +
mov edi eax +
cmp edi ebx +
jl loc_101D066  +
movzx eax word ptr [ebp-22Ch] +
push eax  +
movzx eax word ptr [ebp-228h] +
push eax  +
movzx eax word ptr [ebp-220h] +
push eax  +
movzx eax word ptr [ebp-224h] +
push eax  +
push offset aD_D_D_D  +
push esi  +
mov [ebp-4] ebx +
call sub_100C88F  +
add esp 18h +
mov eax edi +
jmp loc_101D066  +
mov eax offset loc_101D060 +
retn   +
mov eax [ebp-234h] +
call sub_101A591  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call sub_1019EA8  +
pop ecx  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+hMem] 0 +
jnz loc_101D09C  +
xor eax eax +
inc eax  +
jmp loc_101D0A7  +
push [ebp+hMem]  +
call ds:LocalFree  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
xor edi edi +
mov esi ecx +
cmp [ebp+arg_0] edi +
jnz loc_101D0C7  +
mov edi 80070057h +
jmp loc_101D102  +
cmp [esi+8] edi +
jz loc_101D0D3  +
mov edi 800704DFh +
jmp loc_101D102  +
cmp [ebp+arg_4] edi +
jnz loc_101D0EB  +
movzx eax word ptr [esi+0Ch] +
push eax  +
push 10h  +
push [ebp+arg_0]  +
call sub_101E25C  +
mov [esi] eax +
jmp loc_101D0F4  +
mov eax 409h +
mov [esi+0Ch] ax +
mov dword ptr [esi+4] 1000000h +
mov dword ptr [esi+8] 1 +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp sub_101D073  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
xor eax eax +
mov [ebp+var_4] eax +
cmp [ebp+lpBuffer] eax +
jz loc_101D210  +
cmp [ebp+lpSource] eax +
jz loc_101D210  +
cmp [ebp+Arguments] eax +
jz loc_101D210  +
push ebx  +
push esi  +
mov esi ds:FormatMessageW +
push edi  +
lea eax [ebp+Arguments] +
push eax  +
movzx eax word ptr [ecx+0Ch] +
mov ebx 2022h +
push ebx  +
push [ebp+lpBuffer]  +
mov edi 1900h +
push eax  +
push [ebp+dwMessageId]  +
push [ebp+lpSource]  +
push edi  +
call esi  +
test eax eax +
jnz loc_101D208  +
call ds:GetLastError  +
test eax eax +
jle loc_101D18C  +
and eax 0FFFFh +
or eax 80070000h +
test eax eax +
jge loc_101D1A7  +
call ds:GetLastError  +
test eax eax +
jle loc_101D1A2  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_4] eax +
jmp loc_101D1AE  +
mov [ebp+var_4] 80004005h +
cmp [ebp+var_4] 0 +
jge loc_101D208  +
and [ebp+var_4] 0 +
lea eax [ebp+Arguments] +
push eax  +
push ebx  +
push [ebp+lpBuffer]  +
push 409h  +
push [ebp+dwMessageId]  +
push [ebp+lpSource]  +
push edi  +
call esi  +
test eax eax +
jnz loc_101D208  +
mov esi ds:GetLastError +
call esi  +
test eax eax +
jle loc_101D1EA  +
and eax 0FFFFh +
or eax 80070000h +
test eax eax +
jge loc_101D201  +
call esi  +
test eax eax +
jle loc_101D1FC  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_4] eax +
jmp loc_101D208  +
mov [ebp+var_4] 80004005h +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
jmp locret_101D215  +
mov eax 80070057h +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
mov edx 80070057h +
test ecx ecx +
jz loc_101D239  +
cmp ecx 7FFFFFFFh +
jbe loc_101D23B  +
mov eax edx +
test eax eax +
jl loc_101D298  +
push edi  +
mov edi [ebp+arg_C] +
cmp edi 7FFFFFFEh +
jbe loc_101D257  +
mov eax edx +
mov edx [ebp+arg_0] +
xor ecx ecx +
mov [edx] cx +
jmp loc_101D297  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_101D287  +
mov edx [ebp+arg_8] +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_101D283  +
movzx ecx word ptr [edx+eax] +
test cx cx +
jz loc_101D283  +
mov [eax] cx +
inc eax  +
inc eax  +
dec esi  +
jnz loc_101D26B  +
test esi esi +
jnz loc_101D28E  +
dec eax  +
dec eax  +
mov ebx 8007007Ah +
xor ecx ecx +
mov [eax] cx +
pop esi  +
mov eax ebx +
pop ebx  +
pop edi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
mov esi ecx +
mov ecx eax +
and ecx 0Fh +
mov [ebp+arg_4] ecx +
mov ecx [esi] +
push edi  +
test ecx ecx +
jnz loc_101D2BF  +
mov ecx [esi+4] +
mov edi ds:FindResourceExW +
shr eax 4 +
inc eax  +
movzx ebx ax +
movzx eax word ptr [esi+0Ch] +
push eax  +
push ebx  +
push 6  +
push ecx  +
call edi  +
test eax eax +
jnz loc_101D2F3  +
mov eax [esi] +
test eax eax +
jnz loc_101D2E4  +
mov eax [esi+4] +
push 409h  +
push ebx  +
push 6  +
push eax  +
call edi  +
test eax eax +
jz loc_101D308  +
mov ecx [esi] +
test ecx ecx +
jnz loc_101D2FC  +
mov ecx [esi+4] +
push eax  +
push ecx  +
call ds:LoadResource  +
test eax eax +
jnz loc_101D334  +
mov ebx ds:GetLastError +
call ebx  +
mov edi 0FFFFh +
mov esi 80070000h +
test eax eax +
jle loc_101D324  +
and eax edi +
or eax esi +
test eax eax +
jge loc_101D380  +
call ebx  +
test eax eax +
jle loc_101D330  +
and eax edi +
or eax esi +
mov esi eax +
jmp loc_101D3AA  +
push eax  +
call ds:LockResource  +
mov esi eax +
test esi esi +
jz loc_101D308  +
mov eax [ebp+arg_4] +
test eax eax +
jbe loc_101D352  +
dec eax  +
movzx ecx word ptr [esi] +
lea esi [esi+ecx*2+2] +
jnz loc_101D348  +
movzx edi word ptr [esi] +
push offset unk_1044EAC  +
inc edi  +
xor ecx ecx +
push 2  +
pop edx  +
mov eax edi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_101A694  +
mov ebx eax +
pop ecx  +
pop ecx  +
test ebx ebx +
jnz loc_101D387  +
mov esi 8007000Eh +
jmp loc_101D3AA  +
mov esi 80004005h +
jmp loc_101D3AA  +
movzx eax word ptr [esi] +
push eax  +
add esi 2 +
push esi  +
push edi  +
push ebx  +
call sub_101D21E  +
mov esi eax +
test esi esi +
jge loc_101D3A5  +
push ebx  +
call sub_1019EA8  +
pop ecx  +
jmp loc_101D3AA  +
mov eax [ebp+arg_0] +
mov [eax] ebx +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+hMem] 0 +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi] +
test eax eax +
jnz loc_101D3CF  +
mov eax [edi+4] +
push [ebp+Arguments]  +
push [ebp+dwMessageId]  +
push eax  +
lea eax [ebp+hMem] +
push eax  +
call sub_101D11F  +
mov esi eax +
test esi esi +
jl loc_101D43D  +
mov eax [ebp+hMem] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_101D3EB  +
sub eax edx +
sar eax 1 +
push offset unk_1044EAC  +
lea esi [eax+1] +
xor ecx ecx +
push 2  +
pop edx  +
mov eax esi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_101A694  +
pop ecx  +
pop ecx  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
test eax eax +
jnz loc_101D429  +
mov esi 8007000Eh +
jmp loc_101D43D  +
push [ebp+hMem]  +
push offset aS  +
push esi  +
push eax  +
call sub_100E0D2  +
add esp 10h +
mov esi eax +
push [ebp+hMem]  +
mov ecx edi +
call sub_101D08C  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_4]  +
xor edi edi +
lea eax [ebp+lpSource] +
push eax  +
mov [ebp+var_10] ecx +
mov [ebp+var_4] edi +
mov [ebp+lpSource] edi +
mov [ebp+hMem] edi +
call sub_101D2A1  +
mov esi eax +
cmp esi edi +
jl loc_101D52F  +
lea eax [ebp+Arguments] +
push eax  +
push edi  +
lea eax [ebp+hMem] +
push eax  +
push edi  +
push edi  +
push [ebp+lpSource]  +
push 500h  +
call ds:FormatMessageW  +
test eax eax +
jnz loc_101D4D1  +
mov ebx ds:GetLastError +
call ebx  +
mov edi 0FFFFh +
mov esi 80070000h +
test eax eax +
jle loc_101D4BC  +
and eax edi +
or eax esi +
test eax eax +
jge loc_101D4CA  +
call ebx  +
test eax eax +
jle loc_101D52D  +
and eax edi +
or eax esi +
jmp loc_101D52D  +
mov esi 80004005h +
jmp loc_101D52F  +
lea eax [ebp+var_4] +
push eax  +
push 2022h  +
push [ebp+hMem]  +
call sub_101CA92  +
mov esi eax +
cmp esi edi +
jl loc_101D52F  +
inc [ebp+var_4]  +
mov eax [ebp+var_4] +
push offset unk_1044EAC  +
xor ecx ecx +
push 2  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_101A694  +
pop ecx  +
pop ecx  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
cmp eax edi +
jnz loc_101D519  +
mov esi 8007000Eh +
jmp loc_101D52F  +
push [ebp+hMem]  +
push offset aS  +
push [ebp+var_4]  +
push eax  +
call sub_100E0D2  +
add esp 10h +
mov esi eax +
push [ebp+hMem]  +
mov ecx [ebp+var_10] +
call sub_101D08C  +
cmp [ebp+lpSource] 0 +
jz loc_101D549  +
push [ebp+lpSource]  +
call sub_1019EA8  +
pop ecx  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+Arguments]  +
lea eax [ebp+Arguments] +
push [ebp+dwMessageId]  +
mov edi ecx +
push eax  +
call sub_101D3B8  +
mov esi eax +
test esi esi +
jl loc_101D598  +
push [ebp+Arguments]  +
call ds:SysAllocString  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
test eax eax +
jnz loc_101D58C  +
mov esi 8007000Eh +
push [ebp+Arguments]  +
mov ecx edi +
call sub_101D073  +
mov eax esi +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
push edi  +
push [ebp+Arguments]  +
lea eax [ebp+var_4] +
push [ebp+arg_4]  +
mov edi ecx +
push eax  +
call sub_101D454  +
mov esi [ebp+var_4] +
mov ebx eax +
test ebx ebx +
jl loc_101D5E3  +
test esi esi +
jz loc_101D5EF  +
push esi  +
call ds:SysAllocString  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
test eax eax +
jnz loc_101D5E3  +
mov ebx 8007000Eh +
test esi esi +
jz loc_101D5EF  +
push esi  +
mov ecx edi +
call sub_101D073  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
lea eax [ebp+Arguments] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_101D454  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
lea eax [ebp+Arguments] +
push eax  +
push [ebp+dwMessageId]  +
push [ebp+arg_4]  +
call sub_101D557  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
lea eax [ebp+Arguments] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_101D5A3  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:LoadLibraryW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_4] +
add eax ecx +
cmp eax ecx +
jb loc_101D682  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_101D68D  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
xor ecx ecx +
push edi  +
mov edi [ebp+arg_0] +
mov [ebp+var_4] ecx +
mov [ebp+var_8] ecx +
mov [ebp+var_C] ecx +
cmp edi ecx +
jz loc_101D7BC  +
cmp [ebp+arg_4] ecx +
jz loc_101D7BC  +
cmp word ptr [edi] 0Ah +
mov esi edi +
jnz loc_101D6D4  +
xor eax eax +
inc eax  +
mov [ebp+var_8] eax +
mov [ebp+var_4] eax +
lea esi [edi+2] +
movzx ebx word ptr [esi] +
cmp bx cx +
jz loc_101D70F  +
lea eax [ebp+var_8] +
push eax  +
push 1  +
push [ebp+var_8]  +
call sub_101D668  +
mov [ebp+arg_0] eax +
test eax eax +
jl loc_101D7C3  +
cmp bx 0Ah +
jnz loc_101D705  +
cmp word ptr [esi-2] 0Dh +
jz loc_101D705  +
inc [ebp+var_4]  +
inc esi  +
inc esi  +
movzx ebx word ptr [esi] +
test bx bx +
jnz loc_101D6DC  +
lea eax [ebp+var_C] +
push eax  +
push [ebp+var_4]  +
push [ebp+var_8]  +
call sub_101D668  +
mov [ebp+arg_0] eax +
test eax eax +
jl loc_101D7C3  +
lea eax [ebp+var_C] +
push eax  +
push 1  +
push [ebp+var_C]  +
call sub_101D668  +
mov [ebp+arg_0] eax +
test eax eax +
jl loc_101D7C3  +
mov eax [ebp+var_C] +
push 2  +
xor ecx ecx +
pop ebx  +
mov edx ebx +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call loc_1019EB9  +
pop ecx  +
test eax eax +
jnz loc_101D769  +
mov [ebp+arg_0] 8007000Eh +
jmp loc_101D7C3  +
cmp word ptr [edi] 0Ah +
mov edx edi +
mov ecx eax +
jnz loc_101D7A8  +
push 0Dh  +
pop ecx  +
mov [eax] cx +
push 0Ah  +
lea ecx [eax+2] +
pop edx  +
mov [ecx] dx +
add ecx ebx +
lea edx [edi+2] +
jmp loc_101D7A8  +
cmp si 0Ah +
jnz loc_101D7A1  +
cmp word ptr [edx-2] 0Dh +
jz loc_101D7A1  +
push 0Dh  +
pop esi  +
mov [ecx] si +
push 0Ah  +
add ecx ebx +
pop esi  +
mov [ecx] si +
add ecx ebx +
add edx ebx +
movzx esi word ptr [edx] +
test si si +
jnz loc_101D789  +
xor edx edx +
mov [ecx] dx +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
jmp loc_101D7C3  +
mov [ebp+arg_0] 80070057h +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
cmp [ebp+hModule] 0 +
jz loc_101D846  +
cmp [ebp+hModule] 0FFFFFFFFh +
jz loc_101D846  +
cmp [ebp+arg_C] 0 +
jz loc_101D846  +
push offset ProcName  +
push [ebp+hModule]  +
call ds:GetProcAddress  +
mov dword_10451FC eax +
test eax eax +
jz loc_101D83F  +
push esi  +
lea ecx [ebp+var_4] +
push ecx  +
push offset dword_1009570  +
push [ebp+arg_4]  +
call eax  +
mov esi eax +
test esi esi +
jl loc_101D82D  +
push [ebp+arg_C]  +
mov eax [ebp+var_4] +
push [ebp+arg_8]  +
mov ecx [eax] +
push 0  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
mov eax [ebp+var_4] +
test eax eax +
jz loc_101D83A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop esi  +
jmp locret_101D84B  +
mov eax 80004005h +
jmp locret_101D84B  +
mov eax 80070057h +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jnz loc_101D866  +
mov eax 80070057h +
jmp loc_101D897  +
push [ebp+arg_0]  +
call sub_101D657  +
test eax eax +
jnz loc_101D888  +
call ds:GetLastError  +
test eax eax +
jle loc_101D897  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_101D897  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push eax  +
call sub_101D7D2  +
pop ebp  +
retn 10h  +
***
and dword ptr [eax] 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpMem] 0 +
jz loc_101D8C8  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jz loc_101D8EC  +
push dword ptr [esi+4]  +
call dword ptr [esi+0Ch]  +
push dword ptr [esi]  +
call ds:FreeLibrary  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
ja loc_101D911  +
mov eax [ebp+arg_0] +
jb loc_101D908  +
cmp eax 0FFFFFFFFh +
ja loc_101D911  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_101D91C  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_101D942  +
call sub_100DFE7  +
jmp loc_101D949  +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
mov [ebp+var_8] ebx +
mov [ebp+dwBytes] ebx +
mov [ebp+lpMem] ebx +
cmp [esi] ebx +
jnz loc_101D977  +
mov eax 80004005h +
jmp loc_101DA05  +
push edi  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_0]  +
push dword ptr [esi+4]  +
push ebx  +
call dword ptr [esi+14h]  +
mov edi eax +
cmp edi ebx +
jl loc_101DA02  +
lea eax [ebp+dwBytes] +
push eax  +
mov eax [ebp+var_8] +
push 2  +
pop ecx  +
mul  ecx +
push edx  +
push eax  +
call sub_101D8F3  +
mov edi eax +
cmp edi ebx +
jl loc_101DA02  +
mov ebx ds:GetProcessHeap +
lea eax [ebp+lpMem] +
push eax  +
push [ebp+dwBytes]  +
push 8  +
call ebx  +
push eax  +
call ds:HeapAlloc  +
push eax  +
call sub_101D92F  +
mov edi eax +
test edi edi +
jl loc_101D9EE  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+lpMem]  +
push [ebp+var_8]  +
push [ebp+arg_0]  +
push dword ptr [esi+4]  +
push 0  +
call dword ptr [esi+10h]  +
mov edi eax +
test edi edi +
jl loc_101D9EE  +
mov eax [ebp+arg_4] +
mov ecx [ebp+lpMem] +
mov [eax] ecx +
jmp loc_101DA02  +
cmp [ebp+lpMem] 0 +
jz loc_101DA02  +
push [ebp+lpMem]  +
push 0  +
call ebx  +
push eax  +
call ds:HeapFree  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
call __EH_prolog3  +
mov ebx ecx +
push 9  +
xor esi esi +
pop ecx  +
xor eax eax +
mov [ebp-50h] esi +
lea edi [ebp-4Ch] +
stos   +
mov [ebp-28h] esi +
lea edi [ebp-24h] +
stos   +
push offset dword_1044E10  +
lea ecx [ebp-18h] +
stos   +
call sub_100BC7D  +
mov eax [ebp+0Ch] +
mov [ebp-4] esi +
mov [ebp-1Ch] esi +
mov [ebp-14h] esi +
mov [ebp-10h] esi +
cmp eax esi +
jnz loc_101DA8F  +
lea eax [ebp-18h] +
push eax  +
push dword ptr [ebp+8]  +
call sub_101CAF8  +
mov edi eax +
cmp edi esi +
jl loc_101DB73  +
lea eax [ebp-14h] +
push eax  +
push offset aSsshim_dll_0  +
lea ecx [ebp-18h] +
call sub_100BB29  +
push eax  +
call sub_101F10A  +
mov edi eax +
cmp edi esi +
jl loc_101DB73  +
mov eax [ebp-14h] +
lea ecx [ebp-10h] +
push ecx  +
push eax  +
call sub_101D657  +
push eax  +
call sub_101D92F  +
mov edi eax +
cmp edi esi +
jl loc_101DB73  +
mov esi ds:GetProcAddress +
lea eax [ebx+8] +
push eax  +
push offset aSssbindservici  +
push dword ptr [ebp-10h]  +
call esi  +
push eax  +
call sub_101D92F  +
mov edi eax +
test edi edi +
jl loc_101DB71  +
lea eax [ebx+10h] +
push eax  +
push offset aSssgetservicin  +
push dword ptr [ebp-10h]  +
call esi  +
push eax  +
call sub_101D92F  +
mov edi eax +
test edi edi +
jl loc_101DB71  +
lea eax [ebx+14h] +
push eax  +
push offset aSssgetservic_0  +
push dword ptr [ebp-10h]  +
call esi  +
push eax  +
call sub_101D92F  +
mov edi eax +
test edi edi +
jl loc_101DB71  +
lea eax [ebx+0Ch] +
push eax  +
push offset aSssreleaseserv  +
push dword ptr [ebp-10h]  +
call esi  +
push eax  +
call sub_101D92F  +
mov edi eax +
test edi edi +
jl loc_101DB71  +
mov eax [ebp+8] +
and dword ptr [ebp-24h] 0 +
mov [ebp-20h] eax +
lea eax [ebp-28h] +
mov [ebp-38h] eax +
mov eax [ebp+18h] +
or [ebp-4Ch] eax +
mov eax [ebp+10h] +
mov dword ptr [ebp-28h] 0Ch +
mov dword ptr [ebp-50h] 28h +
test eax eax +
jz loc_101DB57  +
or dword ptr [ebp-4Ch] 2 +
mov [ebp-3Ch] eax +
mov eax [ebp+14h] +
mov [ebp-40h] eax +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebx+4] +
push eax  +
lea eax [ebp-50h] +
push eax  +
call dword ptr [ebx+8]  +
mov edi eax +
test edi edi +
jl loc_101DB71  +
mov eax [ebp-10h] +
mov [ebx] eax +
xor esi esi +
cmp [ebp-14h] esi +
jz loc_101DB90  +
push dword ptr [ebp-14h]  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
test eax eax +
jz loc_101DB90  +
mov [ebp-14h] esi +
cmp edi esi +
jge loc_101DBA2  +
cmp [ebp-10h] esi +
jz loc_101DBA2  +
push dword ptr [ebp-10h]  +
call ds:FreeLibrary  +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
call sub_100B8FC  +
mov eax edi +
call __EH_epilog3  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
xor ebx ebx +
mov [ebp+var_10] ecx +
cmp [ebp+lpFileName] ebx +
jnz loc_101DBD9  +
mov eax 80070057h +
jmp loc_101DCA5  +
cmp [ecx] ebx +
jz loc_101DBE7  +
mov eax 80004005h +
jmp loc_101DCA5  +
push esi  +
mov esi ds:GetFullPathNameW +
push edi  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+lpFileName]  +
mov [ebp+dwBytes] ebx +
mov [ebp+lpMem] ebx +
call esi  +
xor ecx ecx +
cmp ecx eax +
mov [ebp+nBufferLength] eax +
sbb eax eax +
neg eax  +
push eax  +
call sub_101C265  +
mov edi eax +
cmp edi ebx +
jl loc_101DCA1  +
lea eax [ebp+dwBytes] +
push eax  +
mov eax [ebp+nBufferLength] +
push 2  +
pop ecx  +
mul  ecx +
push edx  +
push eax  +
call sub_101D8F3  +
mov edi eax +
cmp edi ebx +
jl loc_101DCA1  +
lea eax [ebp+lpMem] +
push eax  +
push [ebp+dwBytes]  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
push eax  +
call sub_101D92F  +
mov edi eax +
cmp edi ebx +
jl loc_101DC8B  +
push ebx  +
push [ebp+lpMem]  +
push [ebp+nBufferLength]  +
push [ebp+lpFileName]  +
call esi  +
xor ecx ecx +
cmp ecx eax +
sbb eax eax +
neg eax  +
push eax  +
call sub_101C265  +
mov edi eax +
cmp edi ebx +
jl loc_101DC8B  +
mov ecx [ebp+var_10] +
push 4  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+lpFileName]  +
call sub_101DA10  +
mov edi eax +
cmp [ebp+lpMem] ebx +
jz loc_101DCA1  +
push [ebp+lpMem]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+wLanguage]  +
push 1  +
push offset Type  +
push [ebp+hModule]  +
call ds:FindResourceExW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+hModule]  +
call sub_101DCAF  +
test eax eax +
jz loc_101DCED  +
push eax  +
push [ebp+hModule]  +
call ds:LoadResource  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+hModule] 0 +
push esi  +
jz loc_101DD4B  +
cmp [ebp+arg_4] 0 +
jz loc_101DD4B  +
push [ebp+hModule]  +
call sub_101DCD0  +
push [ebp+arg_4]  +
mov esi eax +
call sub_101DCD0  +
test esi esi +
jz loc_101DD43  +
test eax eax +
jz loc_101DD43  +
mov ecx 0FECDFECDh +
cmp [esi] ecx +
jnz loc_101DD4B  +
cmp [eax] ecx +
jnz loc_101DD4B  +
push edi  +
push 4  +
lea edi [eax+1Ch] +
add esi 1Ch +
pop ecx  +
xor eax eax +
cmps   +
pop edi  +
jnz loc_101DD4B  +
inc eax  +
jmp loc_101DD4D  +
push 0Dh  +
call ds:SetLastError  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
xor esi esi +
push edi  +
cmp [ebp+lpLibFileName] esi +
jnz loc_101DD6A  +
xor eax eax +
jmp loc_101DDD8  +
cmp [ebp+arg_4] esi +
jz loc_101DDC5  +
push esi  +
push esi  +
push 3  +
push esi  +
push 5  +
push 80000000h  +
push [ebp+lpLibFileName]  +
call ds:CreateFileW  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jz loc_101DD66  +
push esi  +
push esi  +
push esi  +
push 8  +
push esi  +
push edi  +
call ds:CreateFileMappingW  +
push edi  +
mov edi ds:CloseHandle +
mov ebx eax +
call edi  +
cmp ebx esi +
jz loc_101DD66  +
push esi  +
push esi  +
push esi  +
push 1  +
push ebx  +
call ds:MapViewOfFile  +
push ebx  +
mov [ebp+lpLibFileName] eax +
call edi  +
mov eax [ebp+lpLibFileName] +
cmp eax esi +
jz loc_101DD66  +
or eax 1 +
jmp loc_101DDD8  +
xor eax eax +
cmp [ebp+arg_8] esi +
setnz al  +
push eax  +
push esi  +
push [ebp+lpLibFileName]  +
call ds:LoadLibraryExW  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 120h +
mov eax dword_1028534 +
xor eax ebp +
mov [ebp+var_4] eax +
push edi  +
xor edi edi +
cmp dword_1055338 edi +
jnz loc_101DF00  +
push esi  +
mov esi 11Ch +
push esi  +
lea eax [ebp+VersionInformation] +
push edi  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+VersionInformation] +
mov [ebp+VersionInformation.dwOSVersionInfoSize] esi +
mov esi ds:GetVersionExW +
push eax  +
call esi  +
test eax eax +
jnz loc_101DE4B  +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 114h +
call esi  +
mov eax [ebp+VersionInformation.dwPlatformId] +
dec eax  +
mov dword_1055338 edi +
pop esi  +
jz loc_101DED3  +
dec eax  +
jnz loc_101DF00  +
cmp [ebp+VersionInformation.dwMajorVersion] 5 +
jnz loc_101DEC0  +
mov eax [ebp+VersionInformation.dwMinorVersion] +
sub eax edi +
jz loc_101DEB4  +
dec eax  +
jz loc_101DEA1  +
dec eax  +
jz loc_101DE87  +
mov dword_1055338 14h +
jmp loc_101DF00  +
cmp [ebp+var_C] 1 +
jb loc_101DE98  +
mov dword_1055338 10h +
or dword_1055338 4 +
jmp loc_101DF00  +
cmp [ebp+var_C] 2 +
jb loc_101DE98  +
mov dword_1055338 8 +
jmp loc_101DE98  +
mov dword_1055338 4 +
jmp loc_101DF00  +
cmp [ebp+VersionInformation.dwMajorVersion] 4 +
ja loc_101DF12  +
mov dword_1055338 2 +
cmp [ebp+VersionInformation.dwMajorVersion] 4 +
jnz loc_101DF00  +
cmp [ebp+VersionInformation.dwMinorVersion] edi +
jz loc_101DEF6  +
cmp [ebp+VersionInformation.dwMinorVersion] 0Ah +
jz loc_101DEF6  +
cmp [ebp+VersionInformation.dwMinorVersion] 5Ah +
jnz loc_101DF00  +
mov dword_1055338 1 +
mov ecx [ebp+var_4] +
mov eax dword_1055338 +
xor ecx ebp +
pop edi  +
call sub_101A463  +
leave   +
retn   +
mov dword_1055338 20h +
jmp loc_101DF00  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
mov eax dword_1028534 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push 20h  +
lea eax [ebp+LCData] +
push eax  +
push 8  +
push 404h  +
mov esi 0C04h +
call ds:GetLocaleInfoW  +
test eax eax +
jz loc_101DF77  +
push 3  +
lea eax [ebp+LCData] +
push offset word_1006930  +
push eax  +
call wcsncmp  +
add esp 0Ch +
mov esi eax +
neg esi  +
sbb esi esi +
and esi 0FFFFF800h +
add esi 0C04h +
mov ecx [ebp+var_4] +
mov ax si +
xor ecx ebp +
pop esi  +
call sub_101A463  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_1028534 +
xor eax ebp +
mov [ebp+var_4] eax +
xor eax eax +
cmp ax word_105533C +
jnz loc_101E027  +
push esi  +
lea eax [ebp+hKey] +
push eax  +
push 1  +
xor esi esi +
push esi  +
push offset SubKey  +
push 80000002h  +
mov [ebp+cbData] 6 +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_101E026  +
push edi  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
push esi  +
push esi  +
push offset ValueName  +
push [ebp+hKey]  +
call ds:RegQueryValueExW  +
push [ebp+hKey]  +
mov edi eax +
call ds:RegCloseKey  +
cmp edi esi +
pop edi  +
jnz loc_101E026  +
push 3  +
push ds:off_10066B0[esi*8]  +
lea eax [ebp+Data] +
push eax  +
call _wcsnicmp  +
add esp 0Ch +
test eax eax +
jz loc_101E018  +
inc esi  +
cmp esi 1Ch +
jb loc_101DFF7  +
jmp loc_101E026  +
mov ax ds:word_10066B4[esi*8] +
mov word_105533C ax +
pop esi  +
mov ecx [ebp+var_4] +
mov ax word_105533C +
xor ecx ebp +
call sub_101A463  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push edi  +
mov edi eax +
xor ebx ebx +
cmp edi ebx +
jz loc_101E0FC  +
cmp [ebp+arg_0] ebx +
jz loc_101E0FC  +
cmp [ebp+arg_4] ebx +
jz loc_101E0FC  +
push esi  +
movzx eax word ptr [edi] +
lea ecx [eax-61h] +
cmp cx 19h +
ja loc_101E078  +
movzx eax ax +
sub eax 61h +
jmp loc_101E087  +
lea ecx [eax-41h] +
cmp cx 19h +
ja loc_101E0B1  +
movzx eax ax +
sub eax 41h +
cmp eax 1Ah +
jnb loc_101E0B1  +
mov esi ds:dword_10067F8[eax*4] +
test esi esi +
jz loc_101E0B1  +
jmp loc_101E0A9  +
push eax  +
push edi  +
call _wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_101E0BC  +
add esi 8 +
mov eax [esi] +
cmp word ptr [eax] 0 +
jnz loc_101E099  +
mov edi [ebp+arg_0] +
inc ebx  +
cmp ebx 2 +
jl loc_101E064  +
jmp loc_101E0FB  +
mov esi [esi+4] +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_101E0C4  +
sub eax edx +
sar eax 1 +
cmp eax 55h +
jnb loc_101E0FB  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_101E0DC  +
sub eax edx +
sar eax 1 +
lea eax [eax+eax+2] +
push eax  +
push esi  +
push [ebp+arg_4]  +
call memcpy  +
add esp 0Ch +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test esi esi +
jz loc_101E14D  +
cmp [ebp+arg_4] 0 +
jz loc_101E14D  +
push 2  +
push 55h  +
push esi  +
push [ebp+arg_0]  +
call sub_101EACB  +
test eax eax +
jz loc_101E14D  +
push 2  +
push 55h  +
push [ebp+arg_4]  +
push esi  +
call sub_101EB71  +
test edi edi +
jz loc_101E148  +
xor eax eax +
push edi  +
push [ebp+arg_4]  +
mov [edi] ax +
mov eax esi +
call sub_101E03E  +
xor eax eax +
inc eax  +
jmp loc_101E14F  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_1028534 +
xor eax ebp +
mov [ebp+var_4] eax +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jnz loc_101E179  +
xor eax eax +
jmp loc_101E1E4  +
push ebx  +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
lea eax [ebp+LibFileName] +
push 104h  +
push eax  +
xor ebx ebx +
call sub_100E096  +
test eax eax +
jl loc_101E1E1  +
push esi  +
call sub_101DDE4  +
mov esi eax +
and esi 26h +
call sub_101DDE4  +
and eax 38h +
push esi  +
push eax  +
lea eax [ebp+LibFileName] +
push eax  +
call sub_101DD57  +
mov ebx eax +
pop esi  +
test ebx ebx +
jz loc_101E1E1  +
push ebx  +
push edi  +
call sub_101DCF6  +
test eax eax +
jnz loc_101E1E1  +
push ebx  +
test bl 1 +
jz loc_101E1D9  +
call ds:UnmapViewOfFile  +
jmp loc_101E1DF  +
call ds:FreeLibrary  +
xor ebx ebx +
mov eax ebx +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_101A463  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test eax eax +
jz loc_101E251  +
test ecx ecx +
jz loc_101E251  +
cmp dword ptr [ebp+arg_0] 0 +
push eax  +
jz loc_101E235  +
test edx edx +
jz loc_101E222  +
push edx  +
push dword ptr [ebp+arg_0]  +
push offset aSSS_mui  +
push ecx  +
call sub_101E158  +
add esp 14h +
jmp loc_101E253  +
push dword ptr [ebp+arg_0]  +
push offset aSS_mui  +
push ecx  +
call sub_101E158  +
add esp 10h +
jmp loc_101E253  +
test edx edx +
jz loc_101E241  +
push edx  +
push offset a_SS_mui  +
jmp loc_101E22A  +
push offset a_S_mui  +
push ecx  +
call sub_101E158  +
add esp 0Ch +
jmp loc_101E253  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 428h +
mov eax dword_1028534 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
mov [ebp+lpLibFileName] esi +
mov [ebp+FilePart] ebx +
cmp esi ebx +
jnz loc_101E28F  +
xor eax eax +
jmp loc_101E9E8  +
test [ebp+arg_4] 0FFFFFFE3h +
jnz loc_101E288  +
push edi  +
mov edi dword ptr [ebp+wLanguage] +
cmp di bx +
jnz loc_101E2AB  +
test byte ptr [ebp+arg_4] 10h +
jnz loc_101E915  +
call sub_101DDE4  +
mov dword_1055340 eax +
movzx eax al +
and eax 20h +
or eax 2 +
push eax  +
push 0  +
push esi  +
call ds:LoadLibraryExW  +
mov [ebp+hModule] eax +
test eax eax +
jz loc_101E915  +
test byte ptr dword_1055340 20h +
jnz loc_101E9E7  +
lea eax [ebp+FilePart] +
push eax  +
lea eax [ebp+LibFileName] +
push eax  +
push 104h  +
push 0  +
push esi  +
push 0  +
call ds:SearchPathW  +
test eax eax +
jz loc_101E909  +
mov eax [ebp+FilePart] +
test eax eax +
jnz loc_101E327  +
and dword ptr [ebp+var_41C] ebx +
lea eax [ebp+LibFileName] +
mov [ebp+FilePart] eax +
jmp loc_101E339  +
lea ecx [ebp+LibFileName] +
mov dword ptr [ebp+var_41C] ecx +
xor ecx ecx +
mov [eax-2] cx +
push 0  +
push [ebp+hModule]  +
call sub_101DCAF  +
test eax eax +
jz loc_101E8F1  +
test di di +
jnz loc_101E8C9  +
mov al byte ptr dword_1055340 +
test al 4 +
jz loc_101E6D8  +
call ds:GetUserDefaultUILanguage  +
movzx eax ax +
mov ecx 404h +
mov [ebp+var_420] eax +
cmp ax cx +
jnz loc_101E38B  +
call sub_101DF23  +
movzx eax ax +
mov [ebp+var_420] eax +
mov eax [ebp+arg_4] +
and eax 8 +
mov [ebp+var_424] eax +
cmp [ebp+var_424] 0 +
jz loc_101E461  +
lea eax [ebp+var_15C] +
push eax  +
push [ebp+var_420]  +
lea edi [ebp+var_208] +
lea esi [ebp+var_B0] +
call sub_101E107  +
test eax eax +
jz loc_101E955  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx esi +
call sub_101E1F6  +
mov ebx eax +
test ebx ebx +
jnz loc_101E959  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
lea edx [ebp+var_15C] +
call sub_101E1F6  +
mov ebx eax +
test ebx ebx +
jnz loc_101E959  +
cmp word ptr [ebp+var_208] ax +
jz loc_101E440  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx edi +
call sub_101E1F6  +
mov ebx eax +
test ebx ebx +
jnz loc_101E959  +
mov eax 0C04h +
cmp word ptr [ebp+var_420] ax +
jnz loc_101E60C  +
mov [ebp+var_420] 404h +
jmp loc_101E397  +
movzx eax word ptr [ebp+var_420] +
push eax  +
push offset aMui04hx  +
lea eax [ebp+var_B0] +
push 55h  +
push eax  +
call sub_100E0D2  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
lea edx [ebp+var_B0] +
call sub_101E1F6  +
mov ebx eax +
test ebx ebx +
jnz loc_101E959  +
lea eax [ebp+var_15C] +
push eax  +
push [ebp+var_420]  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_101E107  +
test eax eax +
jz loc_101E513  +
push 2  +
lea eax [ebp+var_15C] +
push eax  +
call sub_101EA63  +
movzx eax ax +
test ax ax +
jz loc_101E513  +
movzx eax ax +
push eax  +
push offset aMui04hx  +
mov eax esi +
push 55h  +
push eax  +
call sub_100E0D2  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
mov edx esi +
call sub_101E1F6  +
mov ebx eax +
test ebx ebx +
jnz loc_101E959  +
mov eax 0C04h +
cmp word ptr [ebp+var_420] ax +
jz loc_101E452  +
call ds:GetSystemDefaultUILanguage  +
movzx esi ax +
mov [ebp+var_424] esi +
cmp si word ptr [ebp+var_420] +
jz loc_101E5F0  +
movzx eax si +
push eax  +
push offset aMui04hx  +
lea eax [ebp+var_B0] +
push 55h  +
push eax  +
call sub_100E0D2  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
lea edx [ebp+var_B0] +
call sub_101E1F6  +
mov ebx eax +
test ebx ebx +
jnz loc_101E959  +
lea eax [ebp+var_15C] +
push eax  +
push esi  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_101E107  +
test eax eax +
jz loc_101E5EA  +
push 2  +
lea eax [ebp+var_15C] +
push eax  +
call sub_101EA63  +
movzx eax ax +
test ax ax +
jz loc_101E5EA  +
movzx eax ax +
push eax  +
push offset aMui04hx  +
mov eax esi +
push 55h  +
push eax  +
call sub_100E0D2  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
mov edx esi +
call sub_101E1F6  +
mov ebx eax +
test ebx ebx +
jnz loc_101E959  +
mov esi [ebp+var_424] +
mov eax 409h +
mov ecx eax +
cmp cx word ptr [ebp+var_420] +
jz loc_101E8A1  +
cmp ax si +
jmp loc_101E879  +
call ds:GetSystemDefaultUILanguage  +
movzx eax ax +
mov [ebp+var_424] eax +
cmp ax word ptr [ebp+var_420] +
jz loc_101E6BF  +
lea ecx [ebp+var_15C] +
push ecx  +
push eax  +
lea edi [ebp+var_208] +
lea esi [ebp+var_B0] +
call sub_101E107  +
test eax eax +
jz loc_101E8F1  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx esi +
call sub_101E1F6  +
mov ebx eax +
test ebx ebx +
jnz loc_101E959  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
lea edx [ebp+var_15C] +
call sub_101E1F6  +
mov ebx eax +
test ebx ebx +
jnz loc_101E959  +
cmp word ptr [ebp+var_208] ax +
jz loc_101E6BF  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx edi +
call sub_101E1F6  +
mov ebx eax +
test ebx ebx +
jnz loc_101E959  +
mov eax 409h +
mov ecx eax +
cmp cx word ptr [ebp+var_420] +
jz loc_101E8A1  +
jmp loc_101E796  +
test al 3 +
jz loc_101E8F1  +
call sub_101DF8C  +
test byte ptr [ebp+arg_4] 8 +
movzx eax ax +
mov [ebp+var_424] eax +
jz loc_101E7BF  +
lea ecx [ebp+var_15C] +
push ecx  +
push eax  +
lea edi [ebp+var_208] +
lea esi [ebp+var_B0] +
call sub_101E107  +
test eax eax +
jz loc_101E8F1  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx esi +
call sub_101E1F6  +
mov ebx eax +
test ebx ebx +
jnz loc_101E959  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
lea edx [ebp+var_15C] +
call sub_101E1F6  +
mov ebx eax +
test ebx ebx +
jnz loc_101E959  +
cmp word ptr [ebp+var_208] ax +
jz loc_101E78F  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx edi +
call sub_101E1F6  +
mov ebx eax +
test ebx ebx +
jnz loc_101E959  +
mov eax 409h +
mov ecx eax +
cmp cx word ptr [ebp+var_424] +
jz loc_101E8A1  +
lea ecx [ebp+var_15C] +
push ecx  +
push eax  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_101E107  +
mov edx esi +
jmp loc_101E880  +
movzx eax ax +
push eax  +
push offset aMui04hx  +
lea eax [ebp+var_B0] +
push 55h  +
push eax  +
call sub_100E0D2  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
lea edx [ebp+var_B0] +
call sub_101E1F6  +
mov ebx eax +
test ebx ebx +
jnz loc_101E959  +
lea eax [ebp+var_15C] +
push eax  +
push [ebp+var_424]  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_101E107  +
test eax eax +
jz loc_101E86D  +
push 2  +
lea eax [ebp+var_15C] +
push eax  +
call sub_101EA63  +
movzx eax ax +
test ax ax +
jz loc_101E86D  +
movzx eax ax +
push eax  +
push offset aMui04hx  +
mov eax esi +
push 55h  +
push eax  +
call sub_100E0D2  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
mov edx esi +
call sub_101E1F6  +
mov ebx eax +
test ebx ebx +
jnz loc_101E959  +
mov eax 409h +
cmp ax word ptr [ebp+var_424] +
jz loc_101E8A1  +
mov edx offset aMui0409 +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
call sub_101E1F6  +
mov ebx eax +
test ebx ebx +
jnz loc_101E959  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
xor edx edx +
call sub_101E1F6  +
mov ebx eax +
test ebx ebx +
jnz loc_101E959  +
jmp loc_101E955  +
test byte ptr dword_1055340 7 +
jz loc_101E8F1  +
test byte ptr [ebp+arg_4] 8 +
jz loc_101E91C  +
lea eax [ebp+var_15C] +
push eax  +
push edi  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_101E107  +
test eax eax +
jnz loc_101E936  +
test byte ptr [ebp+arg_4] 10h +
jz loc_101E969  +
push dword ptr [ebp+wLanguage]  +
push [ebp+hModule]  +
call sub_101DCAF  +
test eax eax +
jnz loc_101E969  +
push [ebp+hModule]  +
call ds:FreeLibrary  +
xor eax eax +
jmp loc_101E9E7  +
movzx eax di +
push eax  +
push offset aMui04hx  +
lea eax [ebp+var_B0] +
push 55h  +
push eax  +
call sub_100E0D2  +
add esp 10h +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
lea edx [ebp+var_B0] +
call sub_101E1F6  +
mov ebx eax +
test ebx ebx +
jz loc_101E8F1  +
push [ebp+hModule]  +
call ds:FreeLibrary  +
mov eax ebx +
jmp loc_101E9E7  +
test byte ptr [ebp+hModule] 1 +
jz loc_101E9E1  +
push [ebp+hModule]  +
call ds:FreeLibrary  +
call sub_101DDE4  +
test al 38h +
jz loc_101E9BE  +
push [ebp+FilePart]  +
lea eax [ebp+LibFileName] +
push dword ptr [ebp+var_41C]  +
push offset aSS  +
push 104h  +
push eax  +
call sub_100E0D2  +
add esp 14h +
push 0  +
push 1  +
lea eax [ebp+LibFileName] +
push eax  +
call sub_101DD57  +
jmp loc_101E9DB  +
call sub_101DDE4  +
push 0  +
and eax 26h +
pop eax  +
setnz al  +
push eax  +
push 0  +
push [ebp+lpLibFileName]  +
call ds:LoadLibraryExW  +
mov [ebp+hModule] eax +
mov eax [ebp+hModule] +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101A463  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
movzx eax word ptr [eax] +
movzx ecx word ptr [ecx] +
cmp cx ax +
jnz loc_101EA17  +
xor eax eax +
pop ebp  +
retn   +
sbb eax eax +
and eax 2 +
dec eax  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push dword ptr [eax]  +
push [ebp+arg_0]  +
call _wcsicmp  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax+8] 68h +
jnz loc_101EA58  +
cmp word ptr [eax] 7Fh +
jz loc_101EA58  +
xor eax eax +
inc eax  +
jmp loc_101EA5A  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_101EAB8  +
test [ebp+arg_4] 0FFFFFFFDh +
jnz loc_101EAB8  +
push offset sub_101EA24  +
push 8  +
push 163h  +
push offset off_1008A18  +
push [ebp+arg_0]  +
call bsearch  +
add esp 14h +
test eax eax +
jz loc_101EAB8  +
mov ecx [eax+4] +
imul ecx ecx +
add ecx offset dword_1007968 +
test byte ptr [ebp+arg_4] 2 +
jnz loc_101EAB3  +
push ecx  +
call sub_101EA3F  +
test eax eax +
jnz loc_101EAB8  +
mov ax [ecx] +
jmp loc_101EAC2  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 0 +
push esi  +
push edi  +
jl loc_101EB5C  +
cmp [ebp+arg_4] 0 +
jnz loc_101EAE8  +
cmp [ebp+arg_8] 0 +
jnz loc_101EB5C  +
test [ebp+arg_C] 0FFFFFFFDh +
jnz loc_101EB5C  +
push offset sub_101E9FD  +
push 0Ch  +
push 164h  +
lea eax [ebp+arg_0] +
push offset dword_1007968  +
push eax  +
call bsearch  +
mov ecx eax +
add esp 14h +
test ecx ecx +
jz loc_101EB5C  +
test byte ptr [ebp+arg_C] 2 +
jnz loc_101EB24  +
push ecx  +
call sub_101EA3F  +
test eax eax +
jnz loc_101EB5C  +
mov edi [ecx+4] +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_101EB2C  +
sub eax edx +
sar eax 1 +
cmp [ebp+arg_4] 0 +
lea esi [eax+1] +
jz loc_101EB58  +
push esi  +
push edi  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_101D21E  +
test eax eax +
jge loc_101EB58  +
push 7Ah  +
jmp loc_101EB5E  +
mov eax esi +
jmp loc_101EB66  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
xor edi edi +
cmp [ebp+arg_0] edi +
jz loc_101EC1F  +
cmp [ebp+arg_8] edi +
jle loc_101EB94  +
cmp [ebp+arg_4] edi +
jz loc_101EC1F  +
cmp [ebp+arg_8] edi +
jl loc_101EC1F  +
test [ebp+arg_C] 0FFFFFFFDh +
jnz loc_101EC1F  +
push offset sub_101EA24  +
push 8  +
push 163h  +
push offset off_1008A18  +
push [ebp+arg_0]  +
call bsearch  +
add esp 14h +
cmp eax edi +
jz loc_101EC1F  +
mov ecx [eax+4] +
imul ecx ecx +
mov edx offset dword_1007968 +
add ecx edx +
test byte ptr [ebp+arg_C] 2 +
jnz loc_101EBE0  +
push ecx  +
call sub_101EA3F  +
test eax eax +
jnz loc_101EC1F  +
mov eax [ecx+8] +
imul eax eax +
add eax edx +
mov eax [eax+4] +
mov ecx eax +
lea edx [ecx+2] +
mov si [ecx] +
inc ecx  +
inc ecx  +
cmp si di +
jnz loc_101EBF0  +
sub ecx edx +
sar ecx 1 +
lea esi [ecx+1] +
cmp [ebp+arg_4] edi +
jz loc_101EC1B  +
push esi  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_101D21E  +
test eax eax +
jge loc_101EC1B  +
push 7Ah  +
jmp loc_101EC21  +
mov eax esi +
jmp loc_101EC29  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_101ECA4  +
cmp [ebp+arg_4] eax +
jz loc_101ECA0  +
movzx edx word ptr [ebx] +
test dx dx +
jz loc_101ECA0  +
mov [ecx] dx +
inc ecx  +
inc ecx  +
inc ebx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_101EC83  +
test esi esi +
jnz loc_101ECAC  +
dec ecx  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
xor edx edx +
mov [ecx] dx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_101ECBA  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jz loc_101EDD2  +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_101EDD2  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_101ECE7  +
sub eax edx +
sar eax 1 +
mov [ebp+var_4] eax +
mov eax edi +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_101ECFD  +
sub eax ecx +
sar eax 1 +
cmp [ebp+arg_8] 0 +
push ebx  +
mov ebx eax +
push esi  +
mov [ebp+var_8] ebx +
jz loc_101ED24  +
xor eax eax +
cmp [ebp+var_4] ebx +
setz al  +
mov esi eax +
jmp loc_101ED2A  +
cmp [ebp+var_4] ebx +
sbb esi esi +
inc esi  +
test esi esi +
jz loc_101EDCC  +
cmp [ebp+arg_C] 0 +
jz loc_101EDB7  +
push 3Fh  +
push edi  +
call ds:wcschr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_101EDB7  +
and [ebp+arg_4] 0 +
test ebx ebx +
jbe loc_101EDCC  +
mov ebx [ebp+arg_0] +
sub ebx edi +
mov eax [ebp+arg_4] +
cmp eax [ebp+var_4] +
jnb loc_101EDCC  +
test esi esi +
jz loc_101EDCC  +
movzx edx word ptr [edi] +
push 3Fh  +
pop eax  +
cmp ax dx +
jz loc_101EDA5  +
movzx eax word ptr [ebx+edi] +
cmp ax 61h +
jb loc_101ED83  +
cmp ax 7Ah +
ja loc_101ED83  +
movzx ecx ax +
sub ecx 20h +
jmp loc_101ED86  +
movzx ecx ax +
cmp dx 61h +
jb loc_101ED9A  +
cmp dx 7Ah +
ja loc_101ED9A  +
movzx eax dx +
sub eax 20h +
jmp loc_101ED9D  +
movzx eax dx +
cmp ecx eax +
jz loc_101EDA5  +
xor esi esi +
jmp loc_101EDA8  +
xor esi esi +
inc esi  +
inc [ebp+arg_4]  +
mov eax [ebp+arg_4] +
inc edi  +
inc edi  +
cmp eax [ebp+var_8] +
jb loc_101ED54  +
jmp loc_101EDCC  +
push ebx  +
push edi  +
push [ebp+arg_0]  +
call ds:__imp__wcsnicmp  +
add esp 0Ch +
mov esi eax +
neg esi  +
sbb esi esi +
inc esi  +
mov eax esi +
pop esi  +
pop ebx  +
jmp loc_101EDE1  +
mov eax large fs:18h +
mov dword ptr [eax+34h] 57h +
xor eax eax +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
test edx edx +
jz loc_101EE01  +
cmp edx 7FFFFFFFh +
jbe loc_101EE06  +
mov eax 80070057h +
test eax eax +
jl loc_101EE1C  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_101EC6F  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
mov ecx 80070057h +
test edx edx +
jz loc_101EE40  +
cmp edx 7FFFFFFFh +
jbe loc_101EE42  +
mov eax ecx +
test eax eax +
jl loc_101EE6B  +
cmp [ebp+arg_C] 7FFFFFFEh +
jbe loc_101EE5B  +
mov edx [ebp+arg_0] +
mov eax ecx +
xor ecx ecx +
mov [edx] cx +
jmp loc_101EE6B  +
push [ebp+arg_C]  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 0  +
call sub_101EC6F  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
shr ecx 1 +
push 0  +
pop eax  +
jz loc_101EE8B  +
cmp ecx 7FFFFFFFh +
jbe loc_101EE90  +
mov eax 80070057h +
test eax eax +
jl loc_101EECC  +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_C]  +
mov edi [ebp+arg_0] +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_101EEBC  +
cmp eax esi +
ja loc_101EEBC  +
jnz loc_101EEC7  +
jmp loc_101EEC1  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jnz loc_101EEF1  +
mov eax large fs:18h +
mov dword ptr [eax+34h] 57h +
xor eax eax +
jmp loc_101EF60  +
mov eax [ebp+arg_0] +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_101EEF7  +
sub eax ecx +
push esi  +
sar eax 1 +
lea esi [eax+1] +
mov eax large fs:18h +
mov eax [eax+30h] +
push edi  +
lea ecx [esi+esi] +
push ecx  +
push 8  +
push dword ptr [eax+18h]  +
call ds:RtlAllocateHeap  +
mov edi eax +
test edi edi +
jz loc_101EF5C  +
push [ebp+arg_0]  +
push esi  +
push edi  +
call sub_101EDEB  +
mov esi eax +
test esi esi +
jge loc_101EF5C  +
mov eax large fs:18h +
mov eax [eax+30h] +
push edi  +
push 0  +
push dword ptr [eax+18h]  +
call ds:RtlFreeHeap  +
mov ecx large fs:18h +
movzx eax si +
xor edi edi +
mov [ecx+34h] eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
push ebx  +
push edi  +
mov [ebp+var_4] 8007000Eh +
test eax eax +
jz loc_101EFE8  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_101EF82  +
mov ebx [ebp+arg_C] +
sub eax edx +
sar eax 1 +
test ebx ebx +
jz loc_101EFE8  +
mov ecx [ebp+arg_8] +
mov edi [ebp+arg_4] +
cmp ecx edi +
jb loc_101EFE8  +
cmp edi eax +
ja loc_101EFE8  +
cmp ecx eax +
ja loc_101EFE8  +
mov eax large fs:18h +
mov eax [eax+30h] +
sub ecx edi +
push esi  +
inc ecx  +
mov esi ecx +
lea ecx [esi+esi] +
push ecx  +
push 8  +
push dword ptr [eax+18h]  +
call ds:RtlAllocateHeap  +
mov [ebx] eax +
test eax eax +
jz loc_101EFE2  +
lea ecx [esi-1] +
push ecx  +
mov ecx [ebp+arg_0] +
lea ecx [ecx+edi*2] +
push ecx  +
push esi  +
push eax  +
call sub_101EE25  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
pop esi  +
jmp loc_101EFED  +
mov eax 80070057h +
pop edi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101ECC6  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
and [ebp+var_4] 0 +
test eax eax +
jz loc_101F0CA  +
cmp [ebp+arg_4] 0 +
jz loc_101F0CA  +
and dword ptr [eax] 0 +
push edi  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call ds:_vscwprintf  +
pop ecx  +
pop ecx  +
test eax eax +
jge loc_101F051  +
mov edi 80004005h +
jmp loc_101F0C5  +
lea ecx [ebp+var_4] +
push ecx  +
push 2  +
pop ecx  +
inc eax  +
mul  ecx +
push edx  +
push eax  +
call sub_101D8F3  +
mov edi eax +
test edi edi +
jl loc_101F0C5  +
mov eax large fs:18h +
mov eax [eax+30h] +
push esi  +
push [ebp+var_4]  +
push 8  +
push dword ptr [eax+18h]  +
call ds:RtlAllocateHeap  +
mov esi eax +
test esi esi +
jnz loc_101F08B  +
mov edi 8007000Eh +
test edi edi +
jl loc_101F0AB  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+var_4]  +
push esi  +
call sub_101EE74  +
mov edi eax +
test edi edi +
jl loc_101F0AB  +
mov eax [ebp+arg_0] +
mov [eax] esi +
jmp loc_101F0C4  +
test esi esi +
jz loc_101F0C4  +
mov eax large fs:18h +
mov eax [eax+30h] +
push esi  +
push 0  +
push dword ptr [eax+18h]  +
call ds:RtlFreeHeap  +
pop esi  +
mov eax edi +
pop edi  +
jmp locret_101F0CF  +
mov eax 80070057h +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101F015  +
pop ebp  +
retn   +
***
push 80000002h  +
call sub_101F736  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_8] +
test esi esi +
jnz loc_101F11E  +
mov eax 80070057h +
jmp loc_101F166  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101F821  +
mov [esi] eax +
test eax eax +
jz loc_101F133  +
xor eax eax +
jmp loc_101F166  +
push ebx  +
mov ebx ds:GetLastError +
push edi  +
call ebx  +
mov edi 0FFFFh +
mov esi 80070000h +
test eax eax +
jle loc_101F151  +
and eax edi +
or eax esi +
test eax eax +
jge loc_101F15F  +
call ebx  +
test eax eax +
jle loc_101F164  +
and eax edi +
or eax esi +
jmp loc_101F164  +
mov eax 80004005h +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
xor eax eax +
push ebx  +
mov ebx [ebp+lpFileName] +
mov [ebp+var_8] eax +
mov [ebp+dwErrCode] eax +
cmp ebx eax +
jz loc_101F1E1  +
xor ecx ecx +
cmp cx [ebx] +
jz loc_101F1E1  +
push esi  +
mov esi ds:GetFullPathNameW +
push edi  +
push eax  +
push eax  +
push eax  +
push ebx  +
call esi  +
mov edi eax +
test edi edi +
jz loc_101F1C8  +
lea eax [edi+edi] +
push eax  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+var_8] eax +
test eax eax +
jz loc_101F1D1  +
push [ebp+lpFilePart]  +
push eax  +
push edi  +
push ebx  +
call esi  +
test eax eax +
jnz loc_101F1D1  +
call ds:GetLastError  +
mov [ebp+dwErrCode] eax +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
jmp loc_101F1EB  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
test esi esi +
jz loc_101F279  +
xor eax eax +
cmp ax [esi] +
jz loc_101F279  +
push 3Ah  +
push esi  +
call ds:wcschr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_101F274  +
mov ecx esi +
push edi  +
lea edi [ecx+2] +
mov dx [ecx] +
inc ecx  +
inc ecx  +
test dx dx +
jnz loc_101F221  +
sub ecx edi +
sar ecx 1 +
lea ecx [esi+ecx*2] +
pop edi  +
cmp eax ecx +
jnb loc_101F274  +
cmp eax esi +
jbe loc_101F274  +
movzx ecx word ptr [eax-2] +
cmp cx 61h +
jb loc_101F24B  +
cmp cx 7Ah +
jbe loc_101F257  +
cmp cx 41h +
jb loc_101F274  +
cmp cx 5Ah +
ja loc_101F274  +
xor edx edx +
cmp dx [eax] +
jz loc_101F274  +
movzx eax word ptr [eax+2] +
push 5Ch  +
pop edx  +
cmp dx ax +
jz loc_101F271  +
xor edx edx +
cmp dx ax +
jnz loc_101F274  +
movzx ebx cx +
mov ax bx +
jmp loc_101F283  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
xor edi edi +
cmp ebx edi +
jnz loc_101F2AA  +
mov eax 80070057h +
jmp loc_101F3D2  +
push esi  +
push offset asc_10098EC  +
push ebx  +
call sub_101EFF8  +
test eax eax +
jz loc_101F3B0  +
mov esi ds:wcschr +
lea eax [ebx+4] +
push 5Ch  +
push eax  +
call esi  +
pop ecx  +
pop ecx  +
cmp eax edi +
jnz loc_101F2DE  +
mov [ebp+arg_0] 8007000Dh +
jmp loc_101F3CE  +
mov ecx ebx +
mov [ebp+lpMem] edi +
mov [ebp+var_8] edi +
lea edx [ecx+2] +
mov di [ecx] +
inc ecx  +
inc ecx  +
test di di +
jnz loc_101F2E9  +
sub ecx edx +
add eax 2 +
sar ecx 1 +
push 5Ch  +
push eax  +
mov edi ecx +
call esi  +
pop ecx  +
pop ecx  +
xor ecx ecx +
cmp eax ecx +
jnz loc_101F30D  +
mov esi edi +
jmp loc_101F313  +
sub eax ebx +
sar eax 1 +
mov esi eax +
cmp [ebp+arg_8] ecx +
jz loc_101F32B  +
lea eax [ebp+lpMem] +
push eax  +
push esi  +
push ecx  +
push ebx  +
call sub_101EF69  +
mov [ebp+arg_0] eax +
xor ecx ecx +
jmp loc_101F32E  +
mov [ebp+arg_0] ecx +
cmp [ebp+arg_0] ecx +
jl loc_101F37B  +
cmp [ebp+arg_C] ecx +
jz loc_101F34B  +
lea eax [ebp+var_8] +
push eax  +
sub edi esi +
push edi  +
push esi  +
push ebx  +
call sub_101EF69  +
mov [ebp+arg_0] eax +
xor ecx ecx +
cmp [ebp+arg_0] ecx +
jl loc_101F37B  +
mov eax [ebp+arg_8] +
cmp eax ecx +
jz loc_101F35F  +
mov edx [ebp+lpMem] +
mov [eax] edx +
mov [ebp+lpMem] ecx +
mov eax [ebp+arg_C] +
cmp eax ecx +
jz loc_101F36E  +
mov edx [ebp+var_8] +
mov [eax] edx +
mov [ebp+var_8] ecx +
mov eax [ebp+arg_4] +
cmp eax ecx +
jz loc_101F37B  +
mov dword ptr [eax] 1 +
mov esi ds:HeapFree +
mov edi ds:GetProcessHeap +
cmp [ebp+lpMem] ecx +
jz loc_101F39E  +
push [ebp+lpMem]  +
push 0  +
call edi  +
push eax  +
call esi  +
test eax eax +
jz loc_101F39E  +
and [ebp+lpMem] 0 +
cmp [ebp+var_8] 0 +
jz loc_101F3CE  +
push [ebp+var_8]  +
push 0  +
call edi  +
push eax  +
call esi  +
jmp loc_101F3CE  +
mov eax [ebp+arg_4] +
mov [ebp+arg_0] edi +
cmp eax edi +
jz loc_101F3BC  +
mov [eax] edi +
mov eax [ebp+arg_8] +
cmp eax edi +
jz loc_101F3C5  +
mov [eax] edi +
mov eax [ebp+arg_C] +
cmp eax edi +
jz loc_101F3CE  +
mov [eax] edi +
mov eax [ebp+arg_0] +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101F28E  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov eax dword_1028534 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_8] 0 +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_101F41D  +
xor eax eax +
jmp loc_101F49C  +
push edi  +
push 0  +
lea eax [ebp+var_8] +
push eax  +
push esi  +
call sub_101F3DD  +
mov edi [ebp+var_8] +
test eax eax +
jl loc_101F499  +
test edi edi +
jnz loc_101F499  +
mov eax ds:dword_10098F4 +
mov dword ptr [ebp+RootPathName] eax +
mov eax ds:dword_10098F8 +
push esi  +
mov [ebp+var_8] eax +
call sub_101F1F5  +
mov [ebp+RootPathName] ax +
cmp ax 61h +
jb loc_101F465  +
push esi  +
call sub_101F1F5  +
mov [ebp+RootPathName] ax +
cmp ax 7Ah +
jbe loc_101F485  +
push esi  +
call sub_101F1F5  +
mov [ebp+RootPathName] ax +
cmp ax 41h +
jb loc_101F499  +
push esi  +
call sub_101F1F5  +
mov [ebp+RootPathName] ax +
cmp ax 5Ah +
ja loc_101F499  +
lea eax [ebp+RootPathName] +
push eax  +
call ds:GetDriveTypeW  +
mov edi eax +
sub edi 4 +
neg edi  +
sbb edi edi +
inc edi  +
mov eax edi +
pop edi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_101A463  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
mov eax dword_1028534 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+lpFileName] +
mov ecx [ebp+arg_4] +
push esi  +
mov esi ds:dword_100990C +
mov dword ptr [ebp+var_C] esi +
mov esi ds:dword_1009910 +
push edi  +
mov [ebp+var_8] esi +
mov esi offset a?Unc_0 +
lea edi [ebp+var_1C] +
movs   +
movs   +
movs   +
xor edx edx +
mov [ebp+var_30] eax +
mov [ebp+var_28] ecx +
mov [ebp+var_20] edx +
movs   +
cmp eax edx +
jz loc_101F693  +
xor esi esi +
cmp si [eax] +
jz loc_101F693  +
cmp ecx edx +
jz loc_101F50C  +
mov [ecx] edx +
push ebx  +
push edx  +
push eax  +
call sub_101F170  +
mov [ebp+lpMem] eax +
mov ebx 0FFFFh +
mov edi 80070000h +
test eax eax +
jnz loc_101F554  +
mov esi ds:GetLastError +
call esi  +
test eax eax +
jle loc_101F537  +
and eax ebx +
or eax edi +
test eax eax +
jge loc_101F547  +
call esi  +
test eax eax +
jle loc_101F543  +
and eax ebx +
or eax edi +
mov esi eax +
jmp loc_101F54C  +
mov esi 80004005h +
test esi esi +
jl loc_101F667  +
mov eax [ebp+lpMem] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_101F55A  +
sub eax edx +
sar eax 1 +
cmp eax 104h +
jb loc_101F61B  +
mov esi ds:__imp__wcsnicmp +
push 3  +
lea eax [ebp+var_C] +
push eax  +
push [ebp+lpMem]  +
call esi  +
add esp 0Ch +
test eax eax +
jz loc_101F61B  +
push 7  +
lea eax [ebp+var_1C] +
push eax  +
push [ebp+lpMem]  +
call esi  +
add esp 0Ch +
test eax eax +
jz loc_101F61B  +
and [ebp+var_2C] 0 +
push 0  +
lea eax [ebp+var_2C] +
push eax  +
push [ebp+lpMem]  +
call sub_101F3DD  +
mov esi eax +
test esi esi +
jl loc_101F667  +
cmp [ebp+var_2C] 1 +
lea eax [ebp+var_20] +
push eax  +
jnz loc_101F5F2  +
mov eax [ebp+lpMem] +
add eax 2 +
push eax  +
lea eax [ebp+var_1C] +
push eax  +
call sub_101F10A  +
mov esi eax +
test esi esi +
jl loc_101F667  +
mov eax [ebp+var_28] +
test eax eax +
jz loc_101F615  +
mov ecx [ebp+var_20] +
add ecx 10h +
mov [eax] ecx +
jmp loc_101F615  +
push [ebp+lpMem]  +
lea eax [ebp+var_C] +
push eax  +
call sub_101F10A  +
mov esi eax +
test esi esi +
jl loc_101F667  +
cmp [ebp+var_28] 0 +
jz loc_101F615  +
mov eax [ebp+var_20] +
mov ecx [ebp+var_28] +
add eax 8 +
mov [ecx] eax +
cmp [ebp+var_20] 0 +
jnz loc_101F66B  +
push [ebp+var_30]  +
call sub_101EED5  +
mov [ebp+var_20] eax +
test eax eax +
jz loc_101F62E  +
xor esi esi +
jmp loc_101F659  +
mov esi ds:GetLastError +
call esi  +
test eax eax +
jle loc_101F640  +
and eax ebx +
or eax edi +
test eax eax +
jge loc_101F650  +
call esi  +
test eax eax +
jle loc_101F64C  +
and eax ebx +
or eax edi +
mov esi eax +
jmp loc_101F655  +
mov esi 80004005h +
test esi esi +
jl loc_101F667  +
mov eax [ebp+var_28] +
test eax eax +
jz loc_101F66B  +
mov ecx [ebp+var_20] +
mov [eax] ecx +
jmp loc_101F66B  +
and [ebp+var_20] 0 +
cmp [ebp+lpMem] 0 +
pop ebx  +
jz loc_101F684  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
movzx eax si +
push eax  +
call ds:SetLastError  +
mov eax [ebp+var_20] +
jmp loc_101F69D  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_101A463  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+lpFileName] +
push ebx  +
push edi  +
xor edi edi +
xor ebx ebx +
cmp eax edi +
jz loc_101F721  +
xor ecx ecx +
cmp cx [eax] +
jz loc_101F721  +
push esi  +
push edi  +
push eax  +
call sub_101F4B0  +
mov esi eax +
test esi esi +
jz loc_101F70D  +
push esi  +
call ds:GetFileAttributesW  +
cmp eax 0FFFFFFFFh +
jz loc_101F6F3  +
test al 10h +
jz loc_101F6EE  +
push 2  +
pop edi  +
jmp loc_101F6FB  +
xor ebx ebx +
inc ebx  +
jmp loc_101F6FB  +
call ds:GetLastError  +
mov edi eax +
push esi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
jmp loc_101F715  +
call ds:GetLastError  +
mov edi eax +
push edi  +
call ds:SetLastError  +
mov eax ebx +
pop esi  +
jmp loc_101F72B  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
push edi  +
xor edi edi +
mov [ebp+hKey] edi +
cmp eax edi +
jnz loc_101F758  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
leave   +
retn 0Ch  +
push esi  +
cmp [ebp+lpSubKey] edi +
jz loc_101F789  +
lea ecx [ebp+hKey] +
push ecx  +
push 20019h  +
push edi  +
push [ebp+lpSubKey]  +
push eax  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_101F77B  +
cmp [ebp+hKey] edi +
jnz loc_101F78C  +
xor esi esi +
push edi  +
call ds:SetLastError  +
mov eax esi +
pop esi  +
jmp loc_101F753  +
mov [ebp+hKey] eax +
cmp [ebp+lpValueName] edi +
jz loc_101F7AA  +
push edi  +
push edi  +
push edi  +
push edi  +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call ds:RegQueryValueExW  +
mov esi eax +
neg esi  +
sbb esi esi +
inc esi  +
jmp loc_101F7AD  +
xor esi esi +
inc esi  +
cmp [ebp+lpSubKey] edi +
jz loc_101F77D  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
jmp loc_101F77D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_101F7D8  +
cmp ecx 7FFFFFFFh +
jbe loc_101F7DD  +
mov eax 80070057h +
test eax eax +
jl loc_101F81A  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_101F80A  +
cmp eax esi +
ja loc_101F80A  +
jnz loc_101F815  +
jmp loc_101F80F  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
push edi  +
mov edi dword ptr [ebp+arg_0] +
test edi edi +
jz loc_101F90F  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jz loc_101F90F  +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_101F849  +
sub eax edx +
sar eax 1 +
mov ecx eax +
mov eax ebx +
lea edx [eax+2] +
mov si [eax] +
inc eax  +
inc eax  +
test si si +
jnz loc_101F85E  +
sub eax edx +
sar eax 1 +
test ecx ecx +
jz loc_101F892  +
push 5Ch  +
pop edx  +
cmp dx [edi+ecx*2-2] +
push edx  +
pop edx  +
jnz loc_101F886  +
cmp dx [ebx] +
jnz loc_101F892  +
inc ebx  +
inc ebx  +
dec eax  +
jmp loc_101F892  +
cmp dx [ebx] +
jz loc_101F892  +
mov [ebp+var_4] 1 +
mov edx [ebp+var_4] +
add edx eax +
mov eax large fs:18h +
mov eax [eax+30h] +
lea esi [edx+ecx+1] +
lea ecx [esi+esi] +
push ecx  +
push 8  +
push dword ptr [eax+18h]  +
call ds:RtlAllocateHeap  +
mov edi eax +
test edi edi +
jz loc_101F91C  +
cmp [ebp+var_4] 0 +
mov eax offset SubBlock +
ja loc_101F8C9  +
mov eax offset dword_100167C +
push ebx  +
push eax  +
push dword ptr [ebp+arg_0]  +
push offset aSSS  +
push esi  +
push edi  +
call sub_101F7C2  +
mov esi eax +
mov eax large fs:18h +
add esp 18h +
test esi esi +
jge loc_101F907  +
mov eax [eax+30h] +
push edi  +
push 0  +
push dword ptr [eax+18h]  +
call ds:RtlFreeHeap  +
mov ecx large fs:18h +
movzx eax si +
mov [ecx+34h] eax +
jmp loc_101F91C  +
and dword ptr [eax+34h] 0 +
mov eax edi +
jmp loc_101F91E  +
mov eax large fs:18h +
mov dword ptr [eax+34h] 57h +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
push dword ptr [ebp+0Ch]  +
push off_102887C[esi]  +
call sub_100F89C  +
test eax eax +
jnz loc_101F952  +
add esi 4 +
cmp esi 4 +
jb loc_101F932  +
inc eax  +
pop esi  +
pop ebp  +
retn 8  +
***
xor eax eax +
jmp loc_101F94D  +
***
mov edi edi +
push esi  +
mov esi ds:SysFreeString +
push edi  +
mov edi ecx +
push dword ptr [edi+24h]  +
call esi  +
push dword ptr [edi+20h]  +
call esi  +
push dword ptr [edi+1Ch]  +
call esi  +
push dword ptr [edi+18h]  +
call esi  +
push dword ptr [edi+14h]  +
call esi  +
push dword ptr [edi+10h]  +
call esi  +
push dword ptr [edi+0Ch]  +
call esi  +
pop edi  +
pop esi  +
retn   +
***
mov eax ecx +
xor ecx ecx +
mov [eax+4] ecx +
mov dword ptr [eax] offset off_1009F18 +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
mov [eax+18h] ecx +
mov [eax+1Ch] ecx +
mov [eax+20h] ecx +
mov [eax+24h] ecx +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_101F992  +
mov dword ptr [esi] offset off_1009F44 +
mov ecx dword_10309D8 +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
test eax eax +
jnz loc_101F9F3  +
mov eax 80004003h +
jmp loc_101F9FF  +
mov ecx [ebp+8] +
mov cx [ecx+8] +
mov [eax] cx +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_1009F70  +
push ecx  +
call sub_10100E8  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
inc dword ptr [eax+4]  +
mov eax [eax+4] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
dec dword ptr [ecx+4]  +
push esi  +
mov esi [ecx+4] +
jnz loc_101FA5A  +
test ecx ecx +
jz loc_101FA5A  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+28h]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_101FA08  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ecx +
test esi esi +
jnz loc_101FA99  +
mov eax 80004003h +
jmp loc_101FAB1  +
call sub_1011709  +
mov [esi] eax +
test eax eax +
jnz loc_101FAAF  +
cmp [edi] eax +
jz loc_101FAAF  +
mov eax 8007000Eh +
jmp loc_101FAB1  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
add ecx 0Ch +
call sub_101FA82  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
add ecx 10h +
call sub_101FA82  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
add ecx 14h +
call sub_101FA82  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
add ecx 18h +
call sub_101FA82  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
add ecx 1Ch +
call sub_101FA82  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
add ecx 24h +
call sub_101FA82  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1009F44 +
mov dword ptr [esi+4] 0C0000001h +
mov ecx dword_10309D8 +
mov eax [ecx] +
call dword ptr [eax+8]  +
mov ecx esi +
pop esi  +
jmp loc_101F95B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101FB64  +
test byte ptr [ebp+8] 1 +
jz loc_101FBA8  +
push esi  +
call sub_1019EA8  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0  +
push 1  +
call loc_100EAA6  +
mov esi eax +
test esi esi +
jz loc_101FBCE  +
mov eax [ebp+arg_0] +
mov [esi] eax +
lea eax [esi+4] +
test eax eax +
jz loc_101FBDA  +
mov ecx [ebp+arg_4] +
mov [eax] ecx +
push [ebp+arg_8]  +
lea eax [esi+8] +
push eax  +
call sub_1018B87  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
call __EH_prolog3_catch  +
mov eax [ebp+10h] +
xor esi esi +
cmp eax esi +
jnz loc_101FC0E  +
mov eax 80004003h +
jmp loc_101FC70  +
push 28h  +
mov [eax] esi +
mov dword ptr [ebp-14h] 8007000Eh +
mov [ebp-18h] esi +
mov [ebp-4] esi +
call loc_1019E39  +
pop ecx  +
cmp eax esi +
jz loc_101FC35  +
push dword ptr [ebp+8]  +
mov ecx eax +
call sub_101F9BA  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
jmp loc_101FC48  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_101FC45 +
retn   +
mov esi [ebp-18h] +
test esi esi +
jz loc_101FC6D  +
push dword ptr [ebp+10h]  +
inc dword ptr [esi+4]  +
push dword ptr [ebp+0Ch]  +
dec dword ptr [esi+4]  +
mov eax [esi] +
push esi  +
call dword ptr [eax]  +
mov [ebp-14h] eax +
test eax eax +
jz loc_101FC6D  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+28h]  +
mov eax [ebp-14h] +
call __EH_epilog3  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
push offset dword_1009F88  +
push 0  +
call sub_101FBF2  +
pop ebp  +
retn 4  +
***
call __EH_prolog3_catch  +
mov edi [ebp+24h] +
xor ebx ebx +
cmp edi ebx +
jnz loc_101FCB9  +
mov eax 80070057h +
jmp loc_101FD6F  +
lea eax [ebp+24h] +
push eax  +
mov [edi] ebx +
call sub_101FC7D  +
cmp eax ebx +
mov [ebp-14h] eax +
jl loc_101FD54  +
push ebx  +
push offset off_10288CC  +
push offset off_1028880  +
push ebx  +
push dword ptr [ebp+24h]  +
call __RTDynamicCast  +
mov esi eax +
add esp 14h +
cmp esi ebx +
jnz loc_101FCF5  +
mov dword ptr [ebp-14h] 80004005h +
jmp loc_101FD54  +
mov ax [ebp+8] +
push dword ptr [ebp+0Ch]  +
lea ecx [esi+0Ch] +
mov [ebp-4] ebx +
mov [esi+8] ax +
call sub_100BB74  +
push dword ptr [ebp+10h]  +
lea ecx [esi+10h] +
call sub_100BB74  +
push dword ptr [ebp+14h]  +
lea ecx [esi+14h] +
call sub_100BB74  +
push dword ptr [ebp+18h]  +
lea ecx [esi+18h] +
call sub_100BB74  +
push dword ptr [ebp+1Ch]  +
lea ecx [esi+1Ch] +
call sub_100BB74  +
push dword ptr [ebp+20h]  +
lea ecx [esi+24h] +
call sub_100BB74  +
mov eax [ebp+24h] +
mov ecx [eax] +
or dword ptr [ebp-4] 0FFFFFFFFh +
push eax  +
call dword ptr [ecx+4]  +
mov eax [ebp+24h] +
mov [edi] eax +
mov eax [ebp+24h] +
cmp eax ebx +
jz loc_101FD61  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-14h] +
jmp loc_101FD6F  +
mov eax offset loc_101FD6C +
retn   +
mov eax [ebp-18h] +
call __EH_epilog3  +
retn 20h  +
***
call __EH_prolog3  +
mov eax [ecx+8] +
mov edx [ebp+8] +
mov esi 3FFFFFFFh +
sub esi eax +
cmp esi edx +
jnb loc_101FDC4  +
push offset aListTTooLong  +
lea ecx [ebp-28h] +
call sub_10193BC  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_10192CA  +
push offset dword_102488C  +
lea eax [ebp-50h] +
push eax  +
call _CxxThrowException  +
add eax edx +
mov [ecx+8] eax +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_4]  +
lea edi [eax+4] +
push dword ptr [edi]  +
mov ebx ecx +
push eax  +
call sub_101FBB4  +
push 1  +
mov ecx ebx +
mov esi eax +
call sub_101FD7C  +
mov [edi] esi +
mov eax [esi+4] +
pop edi  +
mov [eax] esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
call __EH_prolog3  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push dword ptr [ebp+8]  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-10h] +
call sub_100FCF7  +
mov edi [ebp-10h] +
push edi  +
lea ecx [ebp+8] +
call sub_100F9F0  +
lea ecx [esi+8] +
mov eax [ecx+4] +
lea edx [ebp+8] +
push edx  +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_101FDD6  +
mov eax [ebp+8] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_101FE61  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
test edi edi +
jz loc_101FE6F  +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
xor eax eax +
call __EH_epilog3  +
retn 4  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1021754 +
jmp loc_10197A8  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
int 3  +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1021780 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_10217AC +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_102180C +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1021838 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_102189C +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1021900 +
jmp loc_10197A8  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
lods   +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1021968 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_102199C +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0ACh] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_10219D8 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-64h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1021A2C +
jmp loc_10197A8  +
***
pop ecx  +
retn   +
***
pop ecx  +
retn   +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-118h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1021B44 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1021BF0 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1021C34 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1021CE4 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1021D44 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1021DCC +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1021E24 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1021E7C +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1021ED4 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1021F2C +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1021F84 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1021FDC +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1022030 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_10220F4 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1022158 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_10221E0 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1022224 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_10222D4 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-40h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1022378 +
jmp loc_10197A8  +
***
push dword ptr [ebp-20h]  +
call sub_1019EA8  +
pop ecx  +
retn   +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1022520 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1022578 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-238h] +
xor ecx eax +
call sub_101A463  +
mov ecx [edx-4] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_10225BC +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1022614 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_102266C +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_10226A0 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1022700 +
jmp loc_10197A8  +
***
push esp  +
and al 8 +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1022760 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_10227B8 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_10227E4 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_102282C +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1022890 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_10228C4 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-60h] +
xor ecx eax +
call sub_101A463  +
mov ecx [edx-4] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1022908 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_102293C +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1022980 +
jmp loc_10197A8  +
***
call fword ptr [ecx-3Dh]  +
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_10229E8 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-44h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1022A9C +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1022C70 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1022CC4 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-30h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1022DCC +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-120h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1022F18 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-9Ch] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1022F60 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1022FCC +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-50h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1023060 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1023200 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_10232B4 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_102337C +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_10233A0 +
jmp loc_10197A8  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
pushf   +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_10234B4 +
jmp loc_10197A8  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
enter 0FFFFC833h 0E8h +
xor [eax+2CB8FFFFh] ebx +
aaa   +
add al [ecx] +
jmp loc_10197A8  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
sal byte ptr [ebx] 0C8h +
call sub_101A463  +
mov eax offset dword_102388C +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-4Ch] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_10239C8 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1023AEC +
jmp loc_10197A8  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
nop   +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1023BF4 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1023D38 +
jmp loc_10197A8  +
***
inc ebx  +
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1023D9C +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1023DC8 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1023DF4 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-6Ch] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1023EC8 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1024144 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-38h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1024198 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-48h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1024298 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_10243C8 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-48h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_102444C +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-34h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1024588 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1024618 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1024644 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-158h] +
xor ecx eax +
call sub_101A463  +
mov ecx [edx-4] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1024670 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_10246D4 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1024754 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_10247AC +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1024804 +
jmp loc_10197A8  +
***
mov ecx [ebp-10h] +
jmp ??1exception@@UAE@XZ  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1024830 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_10248D8 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1024904 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_102494C +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_10249CC +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1024A24 +
jmp loc_10197A8  +
***
lea ecx [ebp-28h] +
jmp loc_1018D90  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-54h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1024A60 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1024B40 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1024C18 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1024C70 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1024CC8 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1024D20 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1024D4C +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1024DB0 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-230h] +
xor ecx eax +
call sub_101A463  +
mov ecx [edx-8] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1024E84 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1024F2C +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-3Ch] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1024F58 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1024FBC +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_102503C +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-238h] +
xor ecx eax +
call sub_101A463  +
mov ecx [edx-8] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1025094 +
jmp loc_10197A8  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
lods   +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_10250C0 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1025118 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_1025170 +
jmp loc_10197A8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_101A463  +
mov eax offset dword_10251A4 +
jmp loc_10197A8  +
***
call sub_101A678  +
pop ecx  +
retn   +
***
call sub_101A678  +
pop ecx  +
retn   +
***
jmp fword ptr [eax+75h]  +
***
push ss  +
add al [ecx] +
call sub_101A678  +
pop ecx  +
retn   +
***
call ds:GetProcessHeap  +
push offset loc_1021684  +
mov dword_1044E04 offset off_1006128 +
mov dword_1044E08 eax +
mov byte_1044E0C 0 +
call sub_101A678  +
pop ecx  +
retn   +
***
push offset dword_1044E04  +
mov ecx offset dword_1044E10 +
call sub_1019C0C  +
push offset loc_1021693  +
call sub_101A678  +
pop ecx  +
retn   +
***
jmp fword ptr (byte_10263FF-102645Ch)[eax]  +
***
push ss  +
add al [ecx] +
call sub_101A678  +
pop ecx  +
retn   +
***
mov ecx offset unk_1034A40 +
jmp sub_100C1CD  +
***
push 1Ch  +
push offset dword_1040B78  +
call ??_M@YGXPAXIHP6EX0@Z@Z  +
retn   +
***
mov ecx offset dword_1044E04 +
jmp sub_1019B2D  +
***
mov dword_1044E10 offset off_100613C +
retn   +
***
jmp sub_100B83C  +
***
mov dword_1044E8C offset off_1002630 +
mov ecx offset dword_1044E8C +
jmp ??1exception@@UAE@XZ  +
***
mov dword_1044E9C offset off_1002630 +
mov ecx offset dword_1044E9C +
jmp ??1exception@@UAE@XZ  +
***
sar bh 0FFh +
jmp fword ptr [ecx+4Ah]  +
***
sar bh 0FFh +
jmp fword ptr ds:10181h  +
***
retn 25Eh  +
***
outs   +
jz $+2  +
add [edi+74654701h] al +
inc ebx  +
outs   +
ins  dx +
ins  dx +
popa   +
outs   +
dec esp  +
imul ebp [esi+65h] +
push ebx  +
ins  dx +
jo $+4  +
iret   +
***
jz $+2  +
inc dword ptr [edx+esi*2]  +
popa   +
ins  dx +
ins  dx +
outs   +
arpl [eax] ax +
jmp far ptr 7063h:6D656D04h  +
***
outs   +
jb $+2  +
add [ebp+625F5F00h] al +
popa   +
imul ebp fs:[edi+69h] +
iret   +
***
push esp  +
outs   +
push edi  +
imul esp [ebp+43h] +
jmp near ptr 7570A8DDh  +
***
