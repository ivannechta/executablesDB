mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1001B0C  +
mov ecx [ebp+arg_4] +
test ecx ecx +
jz loc_1001B0C  +
add eax 20h +
cmp dword ptr [eax] 0 +
jz loc_1001B0A  +
jmp loc_1001B00  +
mov eax [eax] +
add eax 14h +
cmp dword ptr [eax] 0 +
jnz loc_1001B00  +
mov [eax] ecx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor ecx ecx +
cmp eax ecx +
jz loc_1001B48  +
mov [eax] ecx +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
mov [eax+18h] ecx +
mov [eax+1Ch] ecx +
mov [eax+20h] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
xor esi esi +
cmp ebx esi +
jz loc_1001BD3  +
mov eax [ebx+8] +
push edi  +
mov edi ds:free +
push eax  +
mov [ebx+4] esi +
call edi  +
mov ecx [ebx+1Ch] +
push ecx  +
mov [ebx+8] esi +
mov [ebx+18h] esi +
call edi  +
mov [ebx+1Ch] esi +
mov esi [ebx+20h] +
add esp 8 +
test esi esi +
jz loc_1001BCB  +
lea esp [esp+0] +
mov edx [esi+14h] +
mov [ebx+20h] edx +
mov eax [esi+4] +
push eax  +
call edi  +
mov ecx [esi+8] +
push ecx  +
call edi  +
mov edx [esi+0Ch] +
push edx  +
call edi  +
mov eax [esi+10h] +
push eax  +
call edi  +
push esi  +
call edi  +
mov esi [ebx+20h] +
add esp 14h +
test esi esi +
jnz loc_1001BA0  +
mov dword ptr [ebx+20h] 0 +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
test ecx ecx +
jnz loc_1001BF2  +
xor eax eax +
pop ebp  +
retn 8  +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1001C3B  +
mov al [eax] +
test al al +
jz loc_1001C3B  +
cmp al 6Eh +
jz loc_1001C35  +
cmp al 4Eh +
jz loc_1001C35  +
cmp al 76h +
jz loc_1001C26  +
cmp al 56h +
jz loc_1001C26  +
cmp al 64h +
jz loc_1001C17  +
cmp al 44h +
jnz loc_1001BEC  +
mov dword ptr [ecx] 3 +
mov eax 1 +
pop ebp  +
retn 8  +
mov dword ptr [ecx] 2 +
mov eax 1 +
pop ebp  +
retn 8  +
mov dword ptr [ecx] 1 +
mov eax 1 +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push edi  +
push eax  +
call sub_1002580  +
mov esi eax +
test esi esi +
jz loc_1001CE5  +
cmp byte ptr [esi] 0 +
jz loc_1001CE5  +
mov edi [ebp+arg_4] +
test edi edi +
jz loc_1001CE5  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_1001CE5  +
cmp byte ptr [eax] 0 +
jz loc_1001CE5  +
push eax  +
push esi  +
call ds:fopen  +
add esp 8 +
test eax eax +
jnz loc_1001C9B  +
call ds:_errno  +
mov eax [eax] +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
push eax  +
call ds:fclose  +
mov eax esi +
add esp 4 +
lea edx [eax+1] +
lea ebx [ebx+0] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1001CB0  +
sub eax edx +
inc eax  +
push eax  +
call ds:malloc  +
add esp 4 +
test eax eax +
jz loc_1001CE5  +
mov [edi] eax +
mov cl [esi] +
test cl cl +
jz loc_1001CDA  +
inc esi  +
mov [eax] cl +
mov cl [esi] +
inc eax  +
test cl cl +
jnz loc_1001CD0  +
pop edi  +
mov byte ptr [eax] 0 +
xor eax eax +
pop esi  +
pop ebp  +
retn 0Ch  +
pop edi  +
or eax 0FFFFFFFFh +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
test edx edx +
jz loc_1001D16  +
cmp edx 7FFFFFFFh +
jbe loc_1001D1B  +
mov eax 80070057h +
test eax eax +
jl loc_1001D76  +
mov ecx [ebp+arg_0] +
push ebx  +
push esi  +
xor eax eax +
push edi  +
mov esi edx +
test edx edx +
jz loc_1001D6A  +
mov edi [ebp+arg_8] +
mov ebx 7FFFFFFEh +
sub ebx edx +
sub edi ecx +
lea esp [esp+0] +
lea edx [ebx+esi] +
test edx edx +
jz loc_1001D66  +
mov dl [edi+ecx] +
test dl dl +
jz loc_1001D66  +
mov [ecx] dl +
inc ecx  +
sub esi 1 +
jnz loc_1001D40  +
pop edi  +
dec ecx  +
pop esi  +
mov eax 8007007Ah +
mov byte ptr [ecx] 0 +
pop ebx  +
pop ebp  +
retn 0Ch  +
test esi esi +
jnz loc_1001D70  +
dec ecx  +
mov eax 8007007Ah +
pop edi  +
pop esi  +
mov byte ptr [ecx] 0 +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1001D96  +
cmp ecx 7FFFFFFFh +
jbe loc_1001D9B  +
mov eax 80070057h +
test eax eax +
jl loc_1001DDE  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea esi [ecx-1] +
mov ecx [ebp+arg_8] +
lea eax [ebp+arg_C] +
push eax  +
push ecx  +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnprintf  +
add esp 10h +
test eax eax +
jl loc_1001DD1  +
cmp eax esi +
ja loc_1001DD1  +
jnz loc_1001DD9  +
mov [esi+edi] bl +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
mov [esi+edi] bl +
mov ebx 8007007Ah +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push offset aMs_mdac_logfil  +
call ds:getenv  +
mov edi [ebp+arg_0] +
mov esi eax +
add esp 4 +
test esi esi +
jz loc_1001E58  +
cmp byte ptr [esi] 0 +
jz loc_1001E58  +
push offset aA  +
lea eax [edi+1Ch] +
push eax  +
push esi  +
mov dword ptr [edi+18h] 1 +
call sub_1001C50  +
test eax eax +
jz loc_1001E58  +
push ebx  +
mov ebx [ebp+arg_4] +
mov dword ptr [edi+18h] 0 +
test ebx ebx +
jz loc_1001E57  +
push eax  +
call ds:strerror  +
mov ecx [ebp+arg_8] +
push eax  +
push esi  +
push offset aUnableToOpenSS  +
push ecx  +
push ebx  +
call sub_1001D80  +
add esp 18h +
pop ebx  +
add edi 18h +
push edi  +
push offset aMs_mdac_logmod  +
call ds:getenv  +
add esp 4 +
push eax  +
call sub_1001BE0  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 8 +
push esi  +
xor esi esi +
cmp [ebp+arg_4] esi +
jnz loc_1001E99  +
xor eax eax +
pop esi  +
mov esp ebp +
pop ebp  +
retn 10h  +
mov eax [ebp+arg_C] +
mov edx [ebp+arg_0] +
push ebx  +
push edi  +
mov edi [ebp+arg_8] +
push eax  +
push edi  +
lea ecx [ebp+var_4] +
push ecx  +
push edx  +
call sub_10026B0  +
push eax  +
call sub_1002620  +
mov ecx [ebp+var_4] +
mov ebx eax +
lea eax [ebp+var_8] +
push eax  +
push ecx  +
call dword_10053A8  +
test eax eax +
jnz loc_1001FCE  +
mov edi ds:malloc +
push 18h  +
call edi  +
mov esi eax +
add esp 4 +
test esi esi +
jz loc_1001F0C  +
xor eax eax +
mov [esi] eax +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] eax +
mov [esi+10h] eax +
push 40h  +
mov [esi+14h] eax +
call edi  +
add esp 4 +
mov [esi+4] eax +
test eax eax +
jnz loc_1001F13  +
push esi  +
call ds:free  +
add esp 4 +
xor esi esi +
jmp loc_1001FF1  +
push 40h  +
push 0  +
push eax  +
call memset  +
mov edx [ebp+var_8] +
mov eax [esi+4] +
add esp 0Ch +
push 40h  +
mov [esi] edx +
mov ecx [ebp+var_8] +
push eax  +
push ecx  +
call dword_100537C  +
mov eax ebx +
lea edx [eax+1] +
lea ebx [ebx+0] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1001F40  +
sub eax edx +
lea edi [eax+1] +
push edi  +
call ds:malloc  +
add esp 4 +
mov [esi+10h] eax +
test eax eax +
jnz loc_1001F73  +
mov edx [esi+4] +
mov edi ds:free +
push edx  +
call edi  +
push esi  +
call edi  +
add esp 8 +
xor esi esi +
jmp loc_1001FF1  +
push ebx  +
push edi  +
push eax  +
call sub_1001D00  +
mov eax [ebp+arg_C] +
mov ecx [ebp+arg_8] +
push eax  +
push ecx  +
lea edx [ebp+arg_0] +
push edx  +
push ebx  +
call sub_10026B0  +
mov edi eax +
mov eax [ebp+arg_0] +
push eax  +
call sub_1002580  +
mov [ebp+arg_0] eax +
mov [esi+8] eax +
cmp byte ptr [edi] 0 +
jz loc_1001FA4  +
inc edi  +
mov ecx [ebp+arg_C] +
mov edx [ebp+arg_8] +
push ecx  +
push edx  +
lea eax [ebp+arg_0] +
push eax  +
push edi  +
call sub_10026B0  +
mov ecx [ebp+arg_0] +
push ecx  +
call sub_1002580  +
mov edx [ebp+arg_4] +
mov [esi+0Ch] eax +
mov [edx] esi +
mov esi 1 +
jmp loc_1001FF1  +
test edi edi +
jz loc_1001FF1  +
mov eax [ebp+var_4] +
test eax eax +
jnz loc_1001FDE  +
mov eax off_1005000 +
push eax  +
mov eax [ebp+arg_C] +
push offset aSIsNotAValidAc  +
push eax  +
push edi  +
call sub_1001D80  +
add esp 10h +
mov ecx [ebp+var_4] +
push ecx  +
call ds:free  +
add esp 4 +
pop edi  +
pop ebx  +
mov eax esi +
pop esi  +
mov esp ebp +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
test ecx ecx +
jz loc_1002087  +
mov eax [ebp+arg_8] +
cmp eax 2 +
jb loc_1002087  +
mov edx [ebp+arg_0] +
cmp edx 3 +
ja loc_1002087  +
jmp ds:off_1002090[edx*4]  +
push (offset aN+2)  +
push eax  +
push ecx  +
call sub_1001D00  +
mov eax 1 +
pop ebp  +
retn 0Ch  +
push offset aN  +
push eax  +
push ecx  +
call sub_1001D00  +
mov eax 1 +
pop ebp  +
retn 0Ch  +
push offset aV  +
push eax  +
push ecx  +
call sub_1001D00  +
mov eax 1 +
pop ebp  +
retn 0Ch  +
push offset aD  +
push eax  +
push ecx  +
call sub_1001D00  +
mov eax 1 +
pop ebp  +
retn 0Ch  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jz loc_10020D9  +
cmp dword ptr [edi+4] 0 +
jz loc_10020E0  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_10020D9  +
mov ecx [ebp+arg_C] +
push offset aResponseFileAl  +
push ecx  +
push eax  +
call sub_1001D00  +
xor eax eax +
pop edi  +
pop ebp  +
retn 10h  +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_1002138  +
cmp byte ptr [esi] 0 +
jz loc_1002138  +
push offset aR  +
lea edx [edi+8] +
push edx  +
push esi  +
call sub_1001C50  +
test eax eax +
jz loc_100212A  +
mov edi [ebp+arg_8] +
test edi edi +
jz loc_100214E  +
push eax  +
call ds:strerror  +
push eax  +
mov eax [ebp+arg_C] +
push esi  +
push offset aUnableToOpenSS  +
push eax  +
push edi  +
call sub_1001D80  +
add esp 18h +
pop esi  +
xor eax eax +
pop edi  +
pop ebp  +
retn 10h  +
mov eax 1 +
pop esi  +
mov [edi+4] eax +
pop edi  +
pop ebp  +
retn 10h  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_100214E  +
mov ecx [ebp+arg_C] +
push offset aNoResponseFile  +
push ecx  +
push eax  +
call sub_1001D00  +
pop esi  +
xor eax eax +
pop edi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 408h +
mov eax dword_1005004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_8] +
push ebx  +
push edi  +
lea ecx [ebp+var_404] +
push 3FFh  +
push ecx  +
mov [ebp+var_408] eax +
call ds:_vsnprintf  +
add esp 10h +
test eax eax +
jl loc_10021AE  +
cmp eax 3FFh +
ja loc_10021AE  +
jnz loc_10021B2  +
mov [ebp+var_5] 0 +
mov edx [ebp+var_408] +
push 40h  +
push edx  +
push esi  +
call ds:_fsopen  +
mov esi eax +
add esp 0Ch +
test esi esi +
jnz loc_10021DE  +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10041DF  +
mov esp ebp +
pop ebp  +
retn 10h  +
push ebx  +
push edi  +
push esi  +
call ds:vfprintf  +
push offset asc_10011F4  +
push esi  +
call ds:fprintf  +
push esi  +
call ds:fflush  +
push esi  +
call ds:fclose  +
mov ecx [ebp+var_4] +
add esp 1Ch +
pop edi  +
pop esi  +
xor ecx ebp +
mov eax 1 +
pop ebx  +
call sub_10041DF  +
mov esp ebp +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_1005398 +
cmp eax [ebp+arg_0] +
jl loc_1002262  +
mov eax dword_100539C +
test eax eax +
jnz loc_100224F  +
mov dword_1005398 eax +
pop ebp  +
retn   +
mov edx [ebp+arg_4] +
lea ecx [ebp+arg_8] +
push ecx  +
push edx  +
push offset aA  +
push eax  +
call sub_1002160  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_1002360  +
push offset aDataStruct  +
push 2  +
call sub_1002230  +
mov eax [esi] +
push eax  +
push offset aRebootFirstD  +
push 2  +
call sub_1002230  +
mov ecx [esi+4] +
push ecx  +
push offset aUseResponseFil  +
push 2  +
call sub_1002230  +
mov edx [esi+8] +
push edx  +
push offset aResponseFileS  +
push 2  +
call sub_1002230  +
mov eax [esi+0Ch] +
push eax  +
push offset aEraseResponseF  +
push 2  +
call sub_1002230  +
mov ecx [esi+10h] +
push ecx  +
push offset aSilentD  +
push 2  +
call sub_1002230  +
mov edx [esi+14h] +
add esp 44h +
push edx  +
push offset aContinueOnErro  +
push 2  +
call sub_1002230  +
mov eax [esi+18h] +
push eax  +
push offset aLogModeD  +
push 2  +
call sub_1002230  +
mov ecx [esi+1Ch] +
push ecx  +
push offset aLogFileS  +
push 2  +
call sub_1002230  +
push offset aActions  +
push 2  +
call sub_1002230  +
mov esi [esi+20h] +
add esp 2Ch +
test esi esi +
jz loc_1002360  +
mov ecx [esi+0Ch] +
mov edx off_1005000 +
test ecx ecx +
jnz loc_1002334  +
mov ecx edx +
mov eax [esi+8] +
test eax eax +
jnz loc_100233D  +
mov eax edx +
mov edx [esi+10h] +
push edx  +
push ecx  +
mov ecx [esi] +
push eax  +
mov eax [esi+4] +
push eax  +
push ecx  +
push offset aDSSSS  +
push 2  +
call sub_1002230  +
mov esi [esi+14h] +
add esp 1Ch +
test esi esi +
jnz loc_1002325  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 80Ch +
mov eax dword_1005004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
mov [ebp+var_808] ebx +
mov byte ptr [ebp+var_404] 0 +
test esi esi +
jz loc_1002563  +
cmp dword ptr [esi+4] 0 +
jnz loc_10023BF  +
pop esi  +
mov eax 1 +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10041DF  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
mov eax [esi+8] +
test eax eax +
jz loc_1002550  +
cmp byte ptr [eax] 0 +
jz loc_1002550  +
push edi  +
push offset aR  +
push eax  +
call ds:fopen  +
mov edi eax +
add esp 8 +
test edi edi +
jnz loc_100242B  +
test ebx ebx +
jz loc_1002416  +
call ds:_errno  +
mov eax [eax] +
push eax  +
call ds:strerror  +
mov ecx dword_1005388 +
mov edx [ebp+arg_8] +
push eax  +
push ecx  +
push offset aUnableToOpenRe  +
push edx  +
push ebx  +
call sub_1001D80  +
add esp 18h +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10041DF  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
push edi  +
lea eax [ebp+var_804] +
push 400h  +
push eax  +
call ds:fgets  +
add esp 0Ch +
test eax eax +
jz loc_10024E9  +
lea esp [esp+0] +
lea ecx [ebp+var_804] +
push ecx  +
call sub_1002620  +
cmp byte ptr [eax] 0 +
jz loc_10024CB  +
push 400h  +
lea edx [ebp+var_404] +
push edx  +
lea eax [ebp+var_80C] +
push eax  +
lea ecx [ebp+var_804] +
push ecx  +
call sub_1001E80  +
cmp eax 1 +
jnz loc_10024CB  +
mov edx [ebp+var_80C] +
push edx  +
push esi  +
call sub_1001AE0  +
cmp dword ptr [edx+0Ch] 0 +
mov eax off_1005000 +
jz loc_10024A2  +
mov ecx [edx+0Ch] +
jmp loc_10024A4  +
mov ecx eax +
cmp dword ptr [edx+8] 0 +
jz loc_10024AD  +
mov eax [edx+8] +
mov ebx [edx+10h] +
mov edx [edx] +
push ebx  +
push ecx  +
push eax  +
push edx  +
push offset aDSSS  +
push 2  +
call sub_1002230  +
mov ebx [ebp+var_808] +
add esp 18h +
push edi  +
lea eax [ebp+var_804] +
push 400h  +
push eax  +
call ds:fgets  +
add esp 0Ch +
test eax eax +
jnz loc_1002450  +
push edi  +
call ds:fclose  +
add esp 4 +
cmp dword ptr [esi+0Ch] 0 +
jz loc_100250C  +
cmp byte ptr [ebp+var_404] 0 +
jnz loc_1002515  +
mov ecx [esi+8] +
push ecx  +
call ds:DeleteFileA  +
cmp byte ptr [ebp+var_404] 0 +
jz loc_1002532  +
mov eax [esi+8] +
mov ecx [ebp+arg_8] +
lea edx [ebp+var_404] +
push edx  +
push eax  +
push offset aInvalidParam_0  +
push ecx  +
push ebx  +
call sub_1001D80  +
add esp 14h +
xor eax eax +
cmp byte ptr [ebp+var_404] al +
pop edi  +
pop esi  +
setz al  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10041DF  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
test ebx ebx +
jz loc_1002563  +
mov edx [ebp+arg_8] +
push offset aFilenameNotLis  +
push edx  +
push ebx  +
call sub_1001D00  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
xor eax eax +
pop ebx  +
call sub_10041DF  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_100260E  +
cmp byte ptr [eax] 0 +
jz loc_100260E  +
mov edx eax +
mov cl [edx] +
test cl cl +
jz loc_10025B6  +
cmp cl 22h +
jz loc_10025B1  +
cmp cl 20h +
jz loc_10025B1  +
cmp cl 9 +
jz loc_10025B1  +
cmp cl 0Ah +
jnz loc_10025B6  +
add edx 1 +
jnz loc_1002597  +
push esi  +
mov ecx eax +
lea esi [ecx+1] +
push ebx  +
lea ecx [ecx+0] +
mov bl [ecx] +
inc ecx  +
test bl bl +
jnz loc_10025C0  +
sub ecx esi +
lea ecx [ecx+eax-1] +
cmp ecx edx +
jbe loc_10025EC  +
mov bl [ecx] +
cmp bl 22h +
jz loc_10025E7  +
cmp bl 20h +
jz loc_10025E7  +
cmp bl 9 +
jz loc_10025E7  +
cmp bl 0Ah +
jnz loc_10025EC  +
dec ecx  +
cmp ecx edx +
ja loc_10025D1  +
mov byte ptr [ecx+1] 0 +
pop ebx  +
cmp edx eax +
jz loc_100260D  +
mov cl [edx] +
mov esi eax +
test cl cl +
jz loc_100260A  +
lea ecx [ecx+0] +
inc edx  +
mov [esi] cl +
mov cl [edx] +
inc esi  +
test cl cl +
jnz loc_1002600  +
mov byte ptr [esi] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_100269E  +
cmp byte ptr [eax] 0 +
jz loc_100269E  +
mov edx eax +
mov cl [edx] +
test cl cl +
jz loc_100264D  +
cmp cl 20h +
jz loc_1002648  +
cmp cl 9 +
jz loc_1002648  +
cmp cl 0Ah +
jnz loc_100264D  +
add edx 1 +
jnz loc_1002633  +
push esi  +
mov ecx eax +
lea esi [ecx+1] +
push ebx  +
mov bl [ecx] +
inc ecx  +
test bl bl +
jnz loc_1002654  +
sub ecx esi +
lea ecx [ecx+eax-1] +
cmp ecx edx +
jbe loc_100267B  +
mov bl [ecx] +
cmp bl 20h +
jz loc_1002676  +
cmp bl 9 +
jz loc_1002676  +
cmp bl 0Ah +
jnz loc_100267B  +
dec ecx  +
cmp ecx edx +
ja loc_1002665  +
mov byte ptr [ecx+1] 0 +
pop ebx  +
cmp edx eax +
jz loc_100269D  +
mov cl [edx] +
mov esi eax +
test cl cl +
jz loc_100269A  +
lea esp [esp+0] +
inc edx  +
mov [esi] cl +
mov cl [edx] +
inc esi  +
test cl cl +
jnz loc_1002690  +
mov byte ptr [esi] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
xor ecx ecx +
push edi  +
mov edi esi +
mov [ebx] ecx +
test esi esi +
jz loc_100277D  +
cmp [esi] cl +
jz loc_100277D  +
mov al [edi] +
test al al +
jz loc_10026EC  +
cmp al 20h +
jz loc_10026E6  +
cmp al 9 +
jz loc_10026E6  +
cmp al 0Ah +
jnz loc_10026EC  +
inc edi  +
inc esi  +
test edi edi +
jnz loc_10026D4  +
mov al [esi] +
test al al +
jz loc_1002736  +
test ecx ecx +
jnz loc_1002702  +
cmp al 20h +
jz loc_1002736  +
cmp al 9 +
jz loc_1002736  +
cmp al 0Ah +
jz loc_1002736  +
xor edx edx +
cmp al 22h +
mov al [esi+1] +
setz dl  +
inc esi  +
xor ecx edx +
test al al +
jnz loc_10026F2  +
test ecx ecx +
jz loc_1002736  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_100277D  +
mov ecx [ebp+arg_C] +
push offset aUnmatchedQuote  +
push ecx  +
push eax  +
call sub_1001D00  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
cmp esi edi +
jz loc_100277D  +
mov edx esi +
sub edx edi +
inc edx  +
push edx  +
call ds:malloc  +
add esp 4 +
mov [ebx] eax +
test eax eax +
jnz loc_1002770  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_1002765  +
mov ecx [ebp+arg_C] +
push offset aOutOfMemory  +
push ecx  +
push eax  +
call sub_1001D00  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
mov dl [edi] +
mov [eax] dl +
inc edi  +
inc eax  +
cmp edi esi +
jnz loc_1002770  +
mov byte ptr [eax] 0 +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor ecx ecx +
mov esi edi +
mov [ebx] ecx +
test edi edi +
jz loc_10027C0  +
mov al [esi] +
test al al +
jz loc_1002820  +
cmp al 20h +
jz loc_10027BA  +
cmp al 9 +
jz loc_10027BA  +
cmp al 0Ah +
jnz loc_1002820  +
inc esi  +
inc edi  +
test esi esi +
jnz loc_10027A8  +
inc edi  +
add esi 1 +
jz loc_10027DE  +
mov al [esi] +
test al al +
jz loc_10027DE  +
cmp al 20h +
jz loc_10027D8  +
cmp al 9 +
jz loc_10027D8  +
cmp al 0Ah +
jnz loc_10027DE  +
inc esi  +
inc edi  +
test esi esi +
jnz loc_10027C6  +
mov al [edi] +
test al al +
jz loc_1002844  +
test ecx ecx +
jnz loc_10027EC  +
cmp al 7Dh +
jz loc_1002844  +
xor edx edx +
cmp al 22h +
mov al [edi+1] +
setz dl  +
inc edi  +
xor ecx edx +
test al al +
jnz loc_10027E4  +
test ecx ecx +
jz loc_1002844  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_1002817  +
mov ecx [ebp+arg_C] +
push offset aUnmatchedQuote  +
push ecx  +
push eax  +
call sub_1001D00  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
cmp byte ptr [esi] 7Bh +
jz loc_10027C0  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_100283B  +
mov ecx [ebp+arg_C] +
push offset aNoActionListed  +
push ecx  +
push eax  +
call sub_1001D00  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
cmp byte ptr [edi] 7Dh +
jz loc_1002868  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_100285F  +
mov edx [ebp+arg_C] +
push offset aEndingBracketM  +
push edx  +
push eax  +
call sub_1001D00  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
cmp edi esi +
jz loc_10028A4  +
mov eax edi +
sub eax esi +
inc eax  +
push eax  +
call ds:malloc  +
add esp 4 +
mov [ebx] eax +
test eax eax +
jz loc_1002898  +
mov cl [esi] +
mov [eax] cl +
inc esi  +
inc eax  +
cmp esi edi +
jnz loc_1002881  +
mov byte ptr [eax] 0 +
lea eax [edi+1] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
xor edi edi +
lea eax [edi+1] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_10028BA  +
mov edx [ebp+arg_C] +
push offset aNoActionList_0  +
push edx  +
push eax  +
call sub_1001D00  +
lea eax [edi+1] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push eax  +
mov esi edx +
push ecx  +
dec esi  +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnprintf  +
add esp 10h +
test eax eax +
jl loc_10028F8  +
cmp eax esi +
ja loc_10028F8  +
jnz loc_1002902  +
mov [esi+edi] bl +
jmp loc_1002900  +
mov [esi+edi] bl +
mov ebx 8007007Ah +
mov eax esi +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100290B  +
mov [ecx] eax +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test esi esi +
jbe loc_1002946  +
test [ebp+arg_8] 1000h +
jz loc_1002946  +
mov edx [ebp+arg_0] +
lea eax [edi+ecx] +
mov [edx] eax +
mov edx esi +
sub edx ecx +
mov ecx [ebp+arg_4] +
mov [ecx] edx +
mov byte ptr [eax] 0 +
push ebx  +
mov ebx [ebp+arg_8] +
test ebx 400h +
jz loc_100298C  +
push esi  +
and ebx 0FFh +
push ebx  +
push edi  +
call memset  +
add esp 0Ch +
test ebx ebx +
jnz loc_1002973  +
mov edx [ebp+arg_0] +
mov eax [ebp+arg_4] +
mov [edx] edi +
mov [eax] esi +
jmp loc_100298C  +
test esi esi +
jbe loc_10029A6  +
mov ecx [ebp+arg_0] +
mov edx [ebp+arg_4] +
lea eax [edi+esi-1] +
mov [ecx] eax +
mov dword ptr [edx] 1 +
mov byte ptr [eax] 0 +
test esi esi +
jbe loc_10029A6  +
test [ebp+arg_8] 800h +
jz loc_10029A6  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
mov [eax] edi +
mov [ecx] esi +
mov byte ptr [edi] 0 +
xor eax eax +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax hLibModule +
push esi  +
test eax eax +
jz loc_10029D6  +
push eax  +
call ds:FreeLibrary  +
push offset dword_1005380  +
call sub_1001B60  +
mov esi dword ptr [ebp+arg_0] +
push esi  +
push offset aExitingOdbccon  +
push 1  +
call sub_1002230  +
add esp 0Ch +
push esi  +
call ds:exit  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 2204h +
call __alloca_probe  +
mov eax dword_1005004 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi ds:GetModuleHandleA +
push edi  +
push 1000h  +
lea edx [ebp+Text] +
push edx  +
xor ecx ecx +
push 66h  +
xor eax eax +
push ecx  +
mov [ebp+Text] ax +
mov [ebp+Caption] cx +
call esi  +
mov edi ds:LoadStringW +
push eax  +
call edi  +
push 100h  +
lea eax [ebp+Caption] +
push eax  +
push 65h  +
push 0  +
call esi  +
push eax  +
call edi  +
push 0  +
lea ecx [ebp+Caption] +
push ecx  +
lea edx [ebp+Text] +
push edx  +
push 0  +
call ds:MessageBoxW  +
push 0  +
call ds:exit  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1002AA6  +
cmp ecx 7FFFFFFFh +
jbe loc_1002AAB  +
mov eax 80070057h +
test eax eax +
jl loc_1002AF4  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea esi [ecx-1] +
mov ecx [ebp+arg_8] +
lea eax [ebp+arg_C] +
push eax  +
push ecx  +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_1002AE4  +
cmp eax esi +
ja loc_1002AE4  +
jnz loc_1002AEF  +
xor edx edx +
mov [edi+esi*2] dx +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
xor eax eax +
mov [edi+esi*2] ax +
mov ebx 8007007Ah +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_10] +
sub esp 8 +
xor eax eax +
and ecx 100h +
push esi  +
mov esi [ebp+arg_4] +
jz loc_1002B33  +
mov edx [ebp+arg_0] +
test edx edx +
jnz loc_1002B24  +
test esi esi +
jnz loc_1002B2C  +
cmp esi 7FFFFFFFh +
jbe loc_1002B49  +
mov eax 80070057h +
jmp loc_1002B49  +
xor eax eax +
test esi esi +
jz loc_1002B41  +
cmp esi 7FFFFFFFh +
jbe loc_1002B46  +
mov eax 80070057h +
mov edx [ebp+arg_0] +
test eax eax +
jl loc_1002C3D  +
push edi  +
mov edi esi +
test ecx ecx +
mov ecx [ebp+arg_14] +
mov [ebp+var_8] edx +
mov [ebp+var_4] edi +
jz loc_1002B6D  +
test ecx ecx +
jnz loc_1002B6D  +
mov ecx (offset aN+2) +
mov [ebp+arg_14] ecx +
mov eax [ebp+arg_10] +
push ebx  +
xor ebx ebx +
test eax 0FFFFE000h +
jz loc_1002B88  +
mov ebx 80070057h +
test esi esi +
jz loc_1002BF8  +
mov byte ptr [edx] 0 +
jmp loc_1002BF8  +
test esi esi +
jnz loc_1002BA5  +
cmp [ecx] bl +
jz loc_1002C24  +
mov ebx edx +
neg ebx  +
sbb ebx ebx +
and ebx 23h +
add ebx 80070057h +
jmp loc_1002BF8  +
mov edi [ebp+arg_0] +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+arg_18] +
mov edx esi +
mov [ebp+var_8] ebx +
call sub_10028D0  +
mov ebx eax +
mov eax [ebp+var_8] +
mov ecx edi +
add ecx eax +
mov edi esi +
sub edi eax +
mov eax [ebp+arg_10] +
mov [ebp+var_8] ecx +
mov [ebp+var_4] edi +
test ebx ebx +
jl loc_1002BF5  +
test eax 200h +
jz loc_1002C24  +
cmp edi 1 +
jbe loc_1002C24  +
lea edx [edi-1] +
push edx  +
and eax 0FFh +
push eax  +
inc ecx  +
push ecx  +
call memset  +
add esp 0Ch +
jmp loc_1002C24  +
mov edx [ebp+arg_0] +
test eax 1C00h +
jz loc_1002C18  +
test esi esi +
jz loc_1002C18  +
push eax  +
lea eax [ebp+var_4] +
push eax  +
lea ecx [ebp+var_8] +
push ecx  +
xor ecx ecx +
mov edi edx +
call sub_1002920  +
mov edi [ebp+var_4] +
test ebx ebx +
jge loc_1002C24  +
cmp ebx 8007007Ah +
jnz loc_1002C39  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_1002C30  +
mov edx [ebp+var_8] +
mov [eax] edx +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_1002C39  +
mov [eax] edi +
mov eax ebx +
pop ebx  +
pop edi  +
pop esi  +
mov esp ebp +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_1003006  +
mov al [esi] +
test al al +
jz loc_1003006  +
mov ebx dword ptr [ebp+arg_4] +
test ebx ebx +
jz loc_1003006  +
cmp al 40h +
jz loc_1002C88  +
cmp al 2Fh +
jz loc_1002C88  +
cmp al 2Dh +
jnz loc_1003006  +
push edi  +
cmp al 40h +
jnz loc_1002CC9  +
mov edi [ebp+arg_C] +
mov eax [ebp+arg_8] +
push edi  +
push eax  +
lea ecx [ebp+arg_C] +
push ecx  +
inc esi  +
push esi  +
call sub_10026B0  +
mov edx [ebp+arg_8] +
push edi  +
push edx  +
mov esi eax +
mov eax [ebp+arg_C] +
push ebx  +
push eax  +
call sub_10020B0  +
mov ecx [ebp+arg_C] +
push ecx  +
call ds:free  +
add esp 4 +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 10h  +
mov ecx 1 +
add esi ecx +
mov al [esi+1] +
lea edi [esi+1] +
cmp al 20h +
jz loc_1002E42  +
test al al +
jz loc_1002E42  +
cmp al 9 +
jz loc_1002E42  +
cmp al 0Ah +
jz loc_1002E42  +
mov al [esi] +
cmp al 4Ch +
jz loc_1002D4D  +
cmp al 6Ch +
jz loc_1002D4D  +
mov ebx [ebp+arg_C] +
mov edi [ebp+arg_8] +
push ebx  +
push edi  +
lea edx [ebp+arg_8] +
push edx  +
dec esi  +
push esi  +
call sub_10026B0  +
mov esi eax +
test edi edi +
jz loc_1002D35  +
mov eax [ebp+arg_8] +
test eax eax +
jnz loc_1002D25  +
mov eax off_1005000 +
push eax  +
push offset aSIsNotAValidSw  +
push ebx  +
push edi  +
call sub_1001D80  +
add esp 10h +
mov eax [ebp+arg_8] +
push eax  +
call ds:free  +
add esp 4 +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 10h  +
mov ecx [ebp+arg_C] +
mov edx [ebp+arg_8] +
push ecx  +
push edx  +
lea eax [ebp+arg_0] +
push eax  +
push edi  +
call sub_10026B0  +
mov ecx [ebp+arg_0] +
mov esi eax +
lea eax [ebx+18h] +
push eax  +
push ecx  +
mov [ebp+var_4] eax +
call sub_1001BE0  +
test eax eax +
jnz loc_1002D92  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_1002D92  +
mov edx [ebp+arg_0] +
mov ecx [ebp+arg_C] +
push edx  +
push offset aSIsNotAValidLo  +
push ecx  +
push eax  +
call sub_1001D80  +
add esp 10h +
mov edx [ebp+arg_0] +
mov edi ds:free +
push edx  +
call edi  +
mov eax [ebx+1Ch] +
add ebx 1Ch +
add esp 4 +
inc esi  +
test eax eax +
jz loc_1002DB2  +
push eax  +
call edi  +
add esp 4 +
mov eax [ebp+arg_C] +
mov ecx [ebp+arg_8] +
push eax  +
push ecx  +
lea edx [ebp+arg_4] +
push edx  +
push esi  +
call sub_10026B0  +
push offset aA  +
mov esi eax +
mov eax dword ptr [ebp+arg_4] +
push ebx  +
push eax  +
call sub_1001C50  +
test eax eax +
jz loc_1002E19  +
cmp [ebp+arg_8] 0 +
mov ecx [ebp+var_4] +
mov dword ptr [ecx] 0 +
jz loc_1002E19  +
mov edi dword ptr [ebp+arg_4] +
test edi edi +
jnz loc_1002DF5  +
mov edi off_1005000 +
push eax  +
call ds:strerror  +
mov edx [ebp+arg_C] +
push eax  +
mov eax [ebp+arg_8] +
push edi  +
push offset aUnableToOpenSS  +
push edx  +
push eax  +
call sub_1001D80  +
mov edi ds:free +
add esp 18h +
mov ecx dword ptr [ebp+arg_4] +
push ecx  +
call edi  +
mov edx [ebx] +
add esp 4 +
push edx  +
call dword_1005378  +
mov eax [ebp+var_4] +
mov ecx [eax] +
push ecx  +
call dword_1005370  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 10h  +
movsx eax byte ptr [esi] +
add eax 0FFFFFFC1h +
cmp eax 34h +
ja loc_1002FDE  +
movzx edx ds:byte_1003034[eax] +
jmp ds:off_1003010[edx*4]  +
mov esi edi +
pop edi  +
mov eax esi +
pop esi  +
mov [ebx] ecx +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 10h  +
mov eax [ebp+arg_C] +
mov ecx [ebp+arg_8] +
push eax  +
push ecx  +
lea edx [ebp+arg_0] +
push edx  +
push edi  +
call sub_10026B0  +
mov ecx [ebp+arg_8] +
mov edx [ebp+arg_0] +
mov esi eax +
mov eax [ebp+arg_C] +
push eax  +
push ecx  +
push ebx  +
push edx  +
call sub_10020B0  +
mov eax [ebp+arg_0] +
push eax  +
call ds:free  +
add esp 4 +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 10h  +
mov esi edi +
pop edi  +
mov eax esi +
pop esi  +
mov [ebx+0Ch] ecx +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 10h  +
push ecx  +
mov [ebx+10h] ecx +
call dword_10053A4  +
mov esi edi +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 10h  +
mov esi edi +
pop edi  +
mov eax esi +
pop esi  +
mov [ebx+14h] ecx +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 10h  +
mov eax [ebx+1Ch] +
test eax eax +
jz loc_1002EF4  +
push eax  +
call ds:free  +
add esp 4 +
mov ecx [ebp+arg_C] +
mov edx [ebp+arg_8] +
push ecx  +
push edx  +
lea eax [ebp+arg_0] +
push eax  +
push edi  +
call sub_10026B0  +
mov ecx [ebp+arg_0] +
push offset aA  +
lea edi [ebx+1Ch] +
push edi  +
push ecx  +
mov esi eax +
call sub_1001C50  +
test eax eax +
jz loc_1002F61  +
cmp [ebp+arg_8] 0 +
mov dword ptr [ebx+18h] 0 +
jz loc_1002F61  +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1002F37  +
mov dword ptr [ebp+arg_4] ecx +
jmp loc_1002F40  +
mov edx off_1005000 +
mov dword ptr [ebp+arg_4] edx +
push eax  +
call ds:strerror  +
mov ecx [ebp+arg_C] +
mov edx [ebp+arg_8] +
push eax  +
mov eax dword ptr [ebp+arg_4] +
push eax  +
push offset aUnableToOpenSS  +
push ecx  +
push edx  +
call sub_1001D80  +
add esp 18h +
mov eax [ebp+arg_0] +
push eax  +
call ds:free  +
mov ecx [edi] +
add esp 4 +
push ecx  +
call dword_1005378  +
mov edx [ebx+18h] +
push edx  +
call dword_1005370  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 10h  +
mov eax [ebp+arg_C] +
mov ecx [ebp+arg_8] +
push eax  +
push ecx  +
lea edx [ebp+arg_0] +
push edx  +
push edi  +
call sub_1002790  +
mov esi eax +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1003005  +
mov ecx [ebp+arg_C] +
mov edx [ebp+arg_8] +
push ecx  +
push edx  +
lea ecx [ebp+arg_4] +
push ecx  +
push eax  +
call sub_1001E80  +
cmp eax 1 +
jnz loc_1003005  +
mov edx dword ptr [ebp+arg_4] +
push edx  +
push ebx  +
call sub_1001AE0  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 10h  +
push ebx  +
call sub_1001B60  +
call sub_1002A00  +
mov eax [ebp+arg_8] +
sub esi ecx +
test eax eax +
jz loc_1003002  +
movsx ecx byte ptr [esi+1] +
movsx edx byte ptr [esi] +
push ecx  +
mov ecx [ebp+arg_C] +
push edx  +
push offset aCCIsNotAValidS  +
push ecx  +
push eax  +
call sub_1001D80  +
add esp 14h +
add esi 2 +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 310h +
mov eax dword_1005004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_C] +
mov dword ptr [ebp+var_310] eax +
test ebx ebx +
jnz loc_10030AE  +
pop esi  +
xor eax eax +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10041DF  +
mov esp ebp +
pop ebp  +
retn 14h  +
push edi  +
push 104h  +
lea ecx [ebp+Buffer] +
push ecx  +
call ds:GetSystemDirectoryA  +
test eax eax +
jnz loc_100311E  +
test esi esi +
jz loc_1003109  +
call ds:GetLastError  +
push 0  +
push 100h  +
lea edx [ebp+var_208] +
push edx  +
push 0  +
mov edi eax +
push edi  +
push 0  +
push 1000h  +
call ds:FormatMessageA  +
mov ecx [ebp+arg_10] +
lea eax [ebp+var_208] +
push eax  +
push edi  +
push offset aErrorCreatingT  +
push ecx  +
push esi  +
call sub_1001D80  +
add esp 14h +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10041DF  +
mov esp ebp +
pop ebp  +
retn 14h  +
lea edx [ebp+Buffer] +
push edx  +
push offset aSOdbcconf_tmp  +
lea eax [ebp+var_108] +
push 104h  +
push eax  +
call sub_1001D80  +
lea ecx [ebp+var_108] +
push offset aA  +
push ecx  +
call ds:fopen  +
mov edi eax +
add esp 18h +
test edi edi +
jnz loc_1003198  +
test esi esi +
jz loc_1003183  +
call ds:_errno  +
mov edx [eax] +
push edx  +
call ds:strerror  +
mov ecx [ebp+arg_10] +
push eax  +
mov eax dword ptr [ebp+var_310] +
push eax  +
push offset aUnableToCreate  +
push ecx  +
push esi  +
call sub_1001D80  +
add esp 18h +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10041DF  +
mov esp ebp +
pop ebp  +
retn 14h  +
mov esi [ebx+20h] +
test esi esi +
jz loc_10031DF  +
mov ebx ds:fputs +
mov edx [esi+4] +
push edi  +
push edx  +
call ebx  +
mov eax [esi+10h] +
add esp 8 +
test eax eax +
jz loc_10031CD  +
cmp byte ptr [eax] 0 +
jz loc_10031CD  +
push edi  +
push offset asc_10014F8  +
call ebx  +
mov eax [esi+10h] +
push edi  +
push eax  +
call ebx  +
add esp 10h +
push edi  +
push offset asc_10011F4  +
call ebx  +
mov esi [esi+14h] +
add esp 8 +
test esi esi +
jnz loc_10031A5  +
push edi  +
call ds:fclose  +
mov eax dword ptr [ebp+var_310] +
add esp 4 +
test eax eax +
jz loc_1003204  +
mov edx [ebp+arg_8] +
lea ecx [ebp+var_108] +
push ecx  +
push edx  +
push eax  +
call sub_1001D00  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
mov eax 1 +
pop ebx  +
call sub_10041DF  +
mov esp ebp +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 544h +
mov eax dword_1005004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
lea eax [ebp+Data] +
push edi  +
mov edi [ebp+arg_4] +
mov [ebp+var_540] eax +
mov [ebp+var_544] 215h +
test ebx ebx +
jnz loc_100327B  +
pop edi  +
xor eax eax +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10041DF  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
mov ecx [ebp+arg_8] +
push ecx  +
push edi  +
push 104h  +
lea edx [ebp+var_534] +
push edx  +
push ebx  +
call sub_1003070  +
test eax eax +
jz loc_1003267  +
push esi  +
lea eax [ebp+hKey] +
push eax  +
push 0F003Fh  +
push 0  +
push offset SubKey  +
push 80000002h  +
call ds:RegOpenKeyExA  +
mov esi eax +
test esi esi +
jz loc_1003315  +
test edi edi +
jz loc_10035A1  +
push 0  +
push 100h  +
lea ecx [ebp+Buffer] +
push ecx  +
push 0  +
push esi  +
push 0  +
push 1000h  +
call ds:FormatMessageA  +
mov eax [ebp+arg_8] +
lea edx [ebp+Buffer] +
push edx  +
push offset SubKey  +
push esi  +
push offset aUnableToOpenTh  +
push eax  +
push edi  +
call sub_1001D80  +
add esp 18h +
pop esi  +
pop edi  +
xor eax eax +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10041DF  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
push 0  +
lea ecx [ebp+var_53C] +
push ecx  +
push 0  +
push 0F003Fh  +
push 0  +
push 0  +
push 0  +
push offset aSoftwareMicr_0  +
push 80000002h  +
call ds:RegCreateKeyExA  +
mov esi eax +
test esi esi +
jz loc_10033A4  +
test edi edi +
jz loc_1003382  +
push 0  +
push 100h  +
lea edx [ebp+Buffer] +
push edx  +
push 0  +
push esi  +
push 0  +
push 1000h  +
call ds:FormatMessageA  +
mov ecx [ebp+arg_8] +
lea eax [ebp+Buffer] +
push eax  +
push offset aSoftwareMicr_0  +
push esi  +
push offset aUnableToOpen_0  +
push ecx  +
push edi  +
call sub_1001D80  +
add esp 18h +
mov edx [ebp+hKey] +
push edx  +
call ds:RegCloseKey  +
pop esi  +
pop edi  +
xor eax eax +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10041DF  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
mov eax [ebp+hKey] +
push 0Ch  +
push offset Data  +
push 1  +
push 0  +
push offset Data  +
push eax  +
call ds:RegSetValueExA  +
mov esi eax +
test esi esi +
jz loc_10033FF  +
test edi edi +
jz loc_1003589  +
push 0  +
push 100h  +
lea ecx [ebp+Buffer] +
push ecx  +
push 0  +
push esi  +
push 0  +
push 1000h  +
call ds:FormatMessageA  +
lea edx [ebp+Buffer] +
push edx  +
push esi  +
push offset aUnableToWriteR  +
jmp loc_100357C  +
push 104h  +
lea eax [ebp+Filename] +
push eax  +
push 0  +
call ds:GetModuleFileNameA  +
test eax eax +
jnz loc_1003457  +
call ds:GetLastError  +
mov esi eax +
test edi edi +
jz loc_1003589  +
push 0  +
push 100h  +
lea ecx [ebp+Buffer] +
push ecx  +
push 0  +
push esi  +
push 0  +
push 1000h  +
call ds:FormatMessageA  +
lea edx [ebp+Buffer] +
push edx  +
push esi  +
push offset aUnableToGetOdb  +
jmp loc_100357C  +
cmp dword ptr [ebx+14h] 0 +
mov ecx offset aC +
jnz loc_1003467  +
mov ecx (offset aN+2) +
cmp dword ptr [ebx+10h] 0 +
mov eax offset aS +
jnz loc_1003477  +
mov eax (offset aN+2) +
push ecx  +
push eax  +
lea eax [ebp+Filename] +
push eax  +
push offset aHsHsHs  +
push 0  +
lea ecx [ebp+var_544] +
push ecx  +
lea edx [ebp+var_540] +
push edx  +
lea eax [ebp+Data] +
push 215h  +
push eax  +
call sub_1002B00  +
mov eax [ebx+18h] +
add esp 24h +
test eax eax +
jz loc_10034EF  +
push 10h  +
lea ecx [ebp+var_14] +
push ecx  +
push eax  +
call sub_1002010  +
mov edx [ebx+1Ch] +
push edx  +
lea eax [ebp+var_14] +
push eax  +
mov eax [ebp+var_544] +
push offset aLHsHs  +
push 0  +
lea ecx [ebp+var_544] +
push ecx  +
mov ecx [ebp+var_540] +
lea edx [ebp+var_540] +
push edx  +
push eax  +
push ecx  +
call sub_1002B00  +
add esp 20h +
mov eax [ebp+var_544] +
mov ecx [ebp+var_540] +
lea edx [ebp+var_534] +
push edx  +
push offset aEFHs  +
push eax  +
push ecx  +
call sub_1001D80  +
lea eax [ebp+Data] +
add esp 10h +
lea edx [eax+1] +
lea ebx [ebx+0] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1003520  +
sub eax edx +
push eax  +
mov eax [ebp+var_53C] +
lea edx [ebp+Data] +
push edx  +
push 1  +
push 0  +
push offset ValueName  +
push eax  +
call ds:RegSetValueExA  +
mov esi eax +
test esi esi +
jz loc_10035B6  +
test edi edi +
jz loc_1003589  +
push 0  +
push 100h  +
lea ecx [ebp+Buffer] +
push ecx  +
push 0  +
push esi  +
push 0  +
push 1000h  +
call ds:FormatMessageA  +
lea edx [ebp+Buffer] +
push edx  +
push esi  +
push offset aUnableToWriteM  +
mov eax [ebp+arg_8] +
push eax  +
push edi  +
call sub_1001D80  +
add esp 14h +
mov ecx [ebp+var_53C] +
mov esi ds:RegCloseKey +
push ecx  +
call esi  +
mov edx [ebp+hKey] +
push edx  +
call esi  +
pop esi  +
pop edi  +
xor eax eax +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10041DF  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
mov eax [ebp+hKey] +
mov esi ds:RegCloseKey +
push eax  +
call esi  +
mov ecx [ebp+var_53C] +
push ecx  +
call esi  +
mov ecx [ebp+var_4] +
pop esi  +
pop edi  +
xor ecx ebp +
mov eax 1 +
pop ebx  +
call sub_10041DF  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 2218h +
call __alloca_probe  +
mov eax dword_1005004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
push edi  +
xor edi edi +
push edi  +
push edi  +
push 1  +
push edi  +
mov dword ptr [ebp+lpMultiByteStr] ebx +
call ds:HeapSetInformation  +
push edi  +
push edi  +
push 0FFFFFFFFh  +
push ebx  +
push edi  +
push edi  +
call ds:MultiByteToWideChar  +
mov esi eax +
cmp esi edi +
jbe loc_100368F  +
lea eax [esi+esi+2] +
push eax  +
call ds:malloc  +
mov ebx eax +
add esp 4 +
cmp ebx edi +
jnz loc_100365F  +
push offset aOutOfMemory_  +
push 1  +
call sub_1002230  +
add esp 8 +
push 0FFFFFFF6h  +
call sub_10029C0  +
mov ecx dword ptr [ebp+lpMultiByteStr] +
inc esi  +
push esi  +
push ebx  +
push 0FFFFFFFFh  +
push ecx  +
push edi  +
push edi  +
call ds:MultiByteToWideChar  +
test eax eax +
jle loc_100367F  +
push edi  +
push ebx  +
call ds:RegisterApplicationRestart  +
push ebx  +
call ds:free  +
mov ebx dword ptr [ebp+lpMultiByteStr] +
add esp 4 +
xor edx edx +
push offset dword_1005380  +
mov [ebp+MultiByteStr] 0 +
mov word ptr [ebp+WideCharStr] dx +
call sub_1001B20  +
push 400h  +
lea eax [ebp+MultiByteStr] +
push eax  +
push offset dword_1005380  +
call sub_1001DF0  +
push offset aLoadingOdbccon  +
push 2  +
call sub_1002230  +
add esp 8 +
push offset LibFileName  +
mov hLibModule edi +
mov dword_1005374 edi +
mov dword_10053A8 edi +
mov dword_100537C edi +
mov dword_10053A4 edi +
mov dword_1005378 edi +
mov dword_1005370 edi +
call ds:LoadLibraryA  +
mov hLibModule eax +
cmp eax edi +
jnz loc_100374D  +
call ds:GetLastError  +
push edi  +
push 100h  +
lea ecx [ebp+Buffer] +
push ecx  +
push edi  +
mov esi eax +
push esi  +
push edi  +
push 1000h  +
call ds:FormatMessageA  +
lea edx [ebp+Buffer] +
push edx  +
push esi  +
push offset aUnableToLoadOd  +
push 1  +
call sub_1002230  +
add esp 10h +
push 0FFFFFFF6h  +
call sub_10029C0  +
mov esi ds:GetProcAddress +
push offset ProcName  +
push eax  +
call esi  +
mov dword_1005374 eax +
cmp eax edi +
jnz loc_10037A5  +
call ds:GetLastError  +
push edi  +
push 100h  +
mov esi eax +
lea eax [ebp+Buffer] +
push eax  +
push edi  +
push esi  +
push edi  +
push 1000h  +
call ds:FormatMessageA  +
lea ecx [ebp+Buffer] +
push ecx  +
push esi  +
push offset aUnableToGetPro  +
push 1  +
call sub_1002230  +
add esp 10h +
push 0FFFFFFF6h  +
call sub_10029C0  +
mov edx hLibModule +
push offset aSetactionenum  +
push edx  +
call esi  +
mov dword_10053A8 eax +
cmp eax edi +
jnz loc_10037FD  +
call ds:GetLastError  +
push edi  +
push 100h  +
mov esi eax +
lea eax [ebp+Buffer] +
push eax  +
push edi  +
push esi  +
push edi  +
push 1000h  +
call ds:FormatMessageA  +
lea ecx [ebp+Buffer] +
push ecx  +
push esi  +
push offset aUnableToGetP_0  +
push 1  +
call sub_1002230  +
add esp 10h +
push 0FFFFFFF6h  +
call sub_10029C0  +
mov edx hLibModule +
push offset aSetactionname  +
push edx  +
call esi  +
mov dword_100537C eax +
cmp eax edi +
jnz loc_1003855  +
call ds:GetLastError  +
push edi  +
push 100h  +
mov esi eax +
lea eax [ebp+Buffer] +
push eax  +
push edi  +
push esi  +
push edi  +
push 1000h  +
call ds:FormatMessageA  +
lea ecx [ebp+Buffer] +
push ecx  +
push esi  +
push offset aUnableToGetP_1  +
push 1  +
call sub_1002230  +
add esp 10h +
push 0FFFFFFF6h  +
call sub_10029C0  +
mov edx hLibModule +
push offset aSetsilent  +
push edx  +
call esi  +
mov dword_10053A4 eax +
cmp eax edi +
jnz loc_10038AD  +
call ds:GetLastError  +
push edi  +
push 100h  +
mov esi eax +
lea eax [ebp+Buffer] +
push eax  +
push edi  +
push esi  +
push edi  +
push 1000h  +
call ds:FormatMessageA  +
lea ecx [ebp+Buffer] +
push ecx  +
push esi  +
push offset aUnableToGetP_2  +
push 1  +
call sub_1002230  +
add esp 10h +
push 0FFFFFFF6h  +
call sub_10029C0  +
mov edx hLibModule +
push offset aSetactionlogfi  +
push edx  +
call esi  +
mov dword_1005378 eax +
cmp eax edi +
jnz loc_1003905  +
call ds:GetLastError  +
push edi  +
push 100h  +
mov esi eax +
lea eax [ebp+Buffer] +
push eax  +
push edi  +
push esi  +
push edi  +
push 1000h  +
call ds:FormatMessageA  +
lea ecx [ebp+Buffer] +
push ecx  +
push esi  +
push offset aUnableToGetP_3  +
push 1  +
call sub_1002230  +
add esp 10h +
push 0FFFFFFF6h  +
call sub_10029C0  +
mov edx hLibModule +
push offset aSetactionlogmo  +
push edx  +
call esi  +
mov dword_1005370 eax +
cmp eax edi +
jnz loc_100395D  +
call ds:GetLastError  +
push edi  +
push 100h  +
mov esi eax +
lea eax [ebp+Buffer] +
push eax  +
push edi  +
push esi  +
push edi  +
push 1000h  +
call ds:FormatMessageA  +
lea ecx [ebp+Buffer] +
push ecx  +
push esi  +
push offset aUnableToGetP_3  +
push 1  +
call sub_1002230  +
add esp 10h +
push 0FFFFFFF6h  +
call sub_10029C0  +
mov edx dword_1005390 +
push edx  +
call dword_10053A4  +
mov eax dword_100539C +
push eax  +
call dword_1005378  +
mov ecx dword_1005398 +
push ecx  +
call dword_1005370  +
mov eax ebx +
mov [ebp+var_2210] edi +
lea edx [eax+1] +
mov edi edi +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1003990  +
sub eax edx +
lea esi [eax+2] +
push esi  +
call ds:malloc  +
mov edi eax +
push esi  +
mov [ebp+var_2218] edi +
call ds:malloc  +
add esp 8 +
mov ebx eax +
mov [ebp+var_2214] ebx +
test edi edi +
jz loc_1003649  +
test ebx ebx +
jz loc_1003649  +
mov edx dword ptr [ebp+lpMultiByteStr] +
push edx  +
push offset aHs  +
push esi  +
push ebx  +
call sub_1001D80  +
add esp 10h +
cmp byte ptr [ebx] 0 +
mov eax ebx +
mov ebx ds:LoadStringW +
mov [ebp+var_2208] edi +
jz loc_1003A8C  +
lea ebx [ebx+0] +
mov dl [eax] +
xor ecx ecx +
cmp dl 22h +
setz cl  +
xor [ebp+var_2210] ecx +
jnz loc_1003A4A  +
cmp dl 20h +
jz loc_1003A1C  +
cmp dl 9 +
jnz loc_1003A4A  +
mov cl [eax+1] +
lea esi [eax+1] +
cmp cl 2Fh +
jz loc_1003A31  +
cmp cl 2Dh +
jz loc_1003A31  +
cmp cl 40h +
jnz loc_1003A4A  +
push 400h  +
lea edx [ebp+MultiByteStr] +
push edx  +
push offset dword_1005380  +
push esi  +
call sub_1002C50  +
jmp loc_1003A5A  +
mov ecx [ebp+var_2208] +
mov [ecx] dl +
inc ecx  +
mov [ebp+var_2208] ecx +
inc eax  +
cmp byte ptr [eax] 0 +
jnz loc_1003A00  +
cmp [ebp+var_2210] 0 +
mov edi ds:GetModuleHandleA +
jz loc_1003A92  +
push 400h  +
lea eax [ebp+WideCharStr] +
push eax  +
push 6Ch  +
push 0  +
mov [ebp+MultiByteStr] 0 +
call edi  +
push eax  +
call ebx  +
jmp loc_1003A92  +
mov edi ds:GetModuleHandleA +
mov ecx [ebp+var_2214] +
push ecx  +
call ds:free  +
mov eax [ebp+var_2218] +
mov edx [ebp+var_2208] +
add esp 4 +
push eax  +
mov byte ptr [edx] 0 +
call sub_1002620  +
mov esi eax +
cmp byte ptr [esi] 0 +
jz loc_1003AF7  +
push 400h  +
lea ecx [ebp+MultiByteStr] +
push ecx  +
lea edx [ebp+var_2208] +
push edx  +
push esi  +
call sub_1001E80  +
cmp eax 1 +
jnz loc_1003AF7  +
mov ecx dword_10053A0 +
mov eax [ebp+var_2208] +
mov [eax+14h] ecx +
mov edx [ebp+var_2208] +
mov dword_10053A0 edx +
push esi  +
call ds:free  +
mov eax dword ptr [ebp+lpMultiByteStr] +
push eax  +
push offset aOdbcconfCalled  +
push 2  +
call sub_1002230  +
add esp 10h +
push offset dword_1005380  +
call sub_1002270  +
cmp [ebp+MultiByteStr] 0 +
mov esi ds:MultiByteToWideChar +
jz loc_1003B48  +
push 400h  +
lea ecx [ebp+WideCharStr] +
push ecx  +
push 0FFFFFFFFh  +
lea edx [ebp+MultiByteStr] +
push edx  +
push 0  +
push 0  +
call esi  +
cmp word ptr [ebp+WideCharStr] 0 +
jz loc_1003BB2  +
cmp dword_1005390 0 +
jnz loc_1003B95  +
push 100h  +
lea ecx [ebp+Caption] +
push ecx  +
xor eax eax +
push 67h  +
push eax  +
mov [ebp+Caption] ax +
call edi  +
push eax  +
call ebx  +
push 10h  +
lea edx [ebp+Caption] +
push edx  +
lea eax [ebp+WideCharStr] +
push eax  +
push 0  +
call ds:MessageBoxW  +
call sub_1002A00  +
lea ecx [ebp+WideCharStr] +
push ecx  +
push offset aInvalidParamet  +
push 1  +
call sub_1002230  +
add esp 0Ch +
push 0FFFFFFF6h  +
call sub_10029C0  +
push 400h  +
lea edx [ebp+MultiByteStr] +
push edx  +
push offset dword_1005380  +
call sub_1002370  +
test eax eax +
jnz loc_1003C46  +
cmp dword_1005390 eax +
jnz loc_1003C29  +
push 400h  +
lea eax [ebp+WideCharStr] +
push eax  +
push 0FFFFFFFFh  +
lea ecx [ebp+MultiByteStr] +
push ecx  +
push 0  +
push 0  +
call esi  +
push 100h  +
lea eax [ebp+Caption] +
push eax  +
xor edx edx +
push 68h  +
push edx  +
mov [ebp+Caption] dx +
call edi  +
push eax  +
call ebx  +
push 10h  +
lea ecx [ebp+Caption] +
push ecx  +
lea edx [ebp+WideCharStr] +
push edx  +
push 0  +
call ds:MessageBoxW  +
call sub_1002A00  +
lea eax [ebp+MultiByteStr] +
push eax  +
push offset aErrorLoadingRe  +
push 1  +
call sub_1002230  +
add esp 0Ch +
push 0FFFFFFF6h  +
call sub_10029C0  +
cmp dword_10053A0 0 +
jnz loc_1003CC5  +
cmp dword_1005390 0 +
jnz loc_1003CAF  +
push 100h  +
lea edx [ebp+Caption] +
push edx  +
xor ecx ecx +
push 68h  +
push ecx  +
mov [ebp+Caption] cx +
call edi  +
push eax  +
call ebx  +
push 100h  +
lea ecx [ebp+var_204] +
push ecx  +
xor eax eax +
push 69h  +
push eax  +
mov [ebp+var_204] ax +
call edi  +
push eax  +
call ebx  +
push 10h  +
lea edx [ebp+Caption] +
push edx  +
lea eax [ebp+var_204] +
push eax  +
push 0  +
call ds:MessageBoxW  +
call sub_1002A00  +
push offset aNoActionsSpeci  +
push 1  +
call sub_1002230  +
add esp 8 +
push 0  +
call sub_10029C0  +
cmp dword_1005380 0 +
jz loc_1003D66  +
push 400h  +
lea ecx [ebp+MultiByteStr] +
push ecx  +
push offset dword_1005380  +
call sub_1003230  +
test eax eax +
jnz loc_1003CBE  +
cmp dword_1005390 eax +
jnz loc_1003D49  +
push 400h  +
lea edx [ebp+WideCharStr] +
push edx  +
push 0FFFFFFFFh  +
lea eax [ebp+MultiByteStr] +
push eax  +
push 0  +
push 0  +
call esi  +
push 100h  +
lea edx [ebp+Caption] +
push edx  +
xor ecx ecx +
push 68h  +
push ecx  +
mov [ebp+Caption] cx +
call edi  +
push eax  +
call ebx  +
push 10h  +
lea eax [ebp+Caption] +
push eax  +
lea ecx [ebp+WideCharStr] +
push ecx  +
push 0  +
call ds:MessageBoxW  +
call sub_1002A00  +
lea edx [ebp+MultiByteStr] +
push edx  +
push offset aErrorPreparing  +
push 1  +
call sub_1002230  +
add esp 0Ch +
push 0FFFFFFF6h  +
call sub_10029C0  +
push offset aExecutingActio  +
push 1  +
call sub_1002230  +
mov esi dword_10053A0 +
add esp 8 +
test esi esi +
jz loc_1003CBE  +
push 400h  +
lea ecx [ebp+MultiByteStr] +
xor eax eax +
push ecx  +
push eax  +
push esi  +
mov [ebp+MultiByteStr] 0 +
mov word ptr [ebp+WideCharStr] ax +
call dword_1005374  +
mov edi eax +
test edi edi +
jge loc_1003EA5  +
mov eax [esi+4] +
push edi  +
lea edx [ebp+MultiByteStr] +
push edx  +
push eax  +
push offset aErrorExecuting  +
push 1  +
call sub_1002230  +
add esp 14h +
cmp dword_1005390 0 +
jnz loc_1003E98  +
push 100h  +
lea edx [ebp+var_204] +
push edx  +
xor ecx ecx +
push 6Bh  +
push ecx  +
mov [ebp+var_204] cx +
call ds:GetModuleHandleA  +
push eax  +
call ebx  +
push 400h  +
lea eax [ebp+WideCharStr] +
push eax  +
push 0FFFFFFFFh  +
lea ecx [ebp+MultiByteStr] +
push ecx  +
push 0  +
push 0  +
call ds:MultiByteToWideChar  +
mov eax [esi+4] +
push 100h  +
lea edx [ebp+var_1204] +
push edx  +
push 0FFFFFFFFh  +
push eax  +
push 0  +
push 0  +
call ds:MultiByteToWideChar  +
push edi  +
lea ecx [ebp+WideCharStr] +
push ecx  +
lea edx [ebp+var_1204] +
push edx  +
lea eax [ebp+var_204] +
push eax  +
lea ecx [ebp+Text] +
push 800h  +
push ecx  +
call sub_1002A90  +
add esp 18h +
push 100h  +
lea eax [ebp+Caption] +
push eax  +
xor edx edx +
push 6Ah  +
push edx  +
mov [ebp+Caption] dx +
call ds:GetModuleHandleA  +
push eax  +
call ebx  +
push 10h  +
lea ecx [ebp+Caption] +
push ecx  +
lea edx [ebp+Text] +
push edx  +
push 0  +
call ds:MessageBoxW  +
cmp dword_1005394 0 +
jz loc_1003658  +
mov esi [esi+14h] +
test esi esi +
jnz loc_1003D83  +
jmp loc_1003CBE  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_1003ED6  +
test eax eax +
jnz loc_1003EDB  +
mov ecx [esi] +
test ecx ecx +
jz loc_1003ED3  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_1003EC7  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_1005044 +
push offset dword_1005034  +
push dword_1005040  +
mov dword_1005034 eax +
push offset unk_1005024  +
push offset unk_1005028  +
push offset unk_1005020  +
call ds:__getmainargs  +
add esp 14h +
mov dword_1005030 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+var_1C] ebx +
mov [ebp+ms_exc.disabled] ebx +
lea eax [ebp+StartupInfo] +
push eax  +
call ds:GetStartupInfoA  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [ebp+ms_exc.disabled] 1 +
mov eax large fs:18h +
mov esi [eax+4] +
mov edi offset Destination +
push 0  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
test eax eax +
jz loc_1003F7B  +
cmp eax esi +
jnz loc_1003F6E  +
xor esi esi +
inc esi  +
mov ebx esi +
jmp loc_1003F7E  +
push 3E8h  +
call ds:Sleep  +
jmp loc_1003F55  +
xor esi esi +
inc esi  +
mov eax dword_10053B4 +
cmp eax esi +
jnz loc_1003F91  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_1003FC0  +
mov eax dword_10053B4 +
test eax eax +
jnz loc_1003FBA  +
mov dword_10053B4 esi +
push offset dword_1001124  +
push offset dword_1001118  +
call sub_1003EBA  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1003FC0  +
jmp loc_10040E8  +
mov dword_100503C esi +
mov eax dword_10053B4 +
cmp eax esi +
jnz loc_1003FE4  +
push offset dword_1001114  +
push offset dword_100110C  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_10053B4 2 +
test ebx ebx +
jnz loc_1003FF0  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_10053BC 0 +
jz loc_1004014  +
push offset dword_10053BC  +
call sub_1004329  +
pop ecx  +
test eax eax +
jz loc_1004014  +
push 0  +
push 2  +
push 0  +
call dword_10053BC  +
mov eax ds:_acmdln +
mov esi [eax] +
mov [ebp+var_20] esi +
mov al [esi] +
cmp al 20h +
ja $LN61  +
test al al +
jz loc_100402E  +
cmp [ebp+var_1C] 0 +
jnz $LN61  +
mov al [esi] +
test al al +
jz loc_100403E  +
cmp al 20h +
ja loc_100403E  +
inc esi  +
mov [ebp+var_20] esi +
jmp loc_100402E  +
test byte ptr [ebp+StartupInfo.dwFlags] 1 +
jz loc_100404A  +
movzx eax [ebp+StartupInfo.wShowWindow] +
jmp loc_100404D  +
push 0Ah  +
pop eax  +
push eax  +
push esi  +
push 0  +
push 1000000h  +
call _WinMain@16  +
mov dword_1005038 eax +
cmp dword_100502C 0 +
jnz $LN62  +
push eax  +
call ds:exit  +
cmp al 22h +
jnz loc_100407F  +
xor ecx ecx +
cmp [ebp+var_1C] ecx +
setz cl  +
mov [ebp+var_1C] ecx +
movzx eax al +
push eax  +
call ds:_ismbblead  +
pop ecx  +
test eax eax +
jz loc_1004092  +
inc esi  +
mov [ebp+var_20] esi +
inc esi  +
jmp loc_100401B  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-24h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-24h] +
mov dword_1005038 eax +
cmp dword_100502C 0 +
jnz $LN62  +
push eax  +
call ds:_exit  +
cmp dword_100503C 0 +
jnz loc_10040D3  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_1005038 +
jmp loc_10040F4  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_1004111  +
xor eax eax +
jmp loc_100415E  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_100410D  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_100414B  +
cmp ecx 20Bh +
jnz loc_100410D  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_100410D  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_1004159  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_100410D  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 2  +
mov dword_100502C eax +
call sub_10044C2  +
push eax  +
call ds:__set_app_type  +
or dword_10053AC 0FFFFFFFFh +
or dword_10053B0 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_100504C +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_1005048 +
mov [eax] ecx +
call sub_1004454  +
cmp dword_1005018 0 +
jnz loc_10041B7  +
push offset sub_1004454  +
call ds:__setusermatherr  +
pop ecx  +
call sub_100443C  +
xor eax eax +
retn   +
***
call sub_1004501  +
jmp ___tmainCRTStartup  +
***
cmp ecx dword_1005004 +
jnz loc_10041EA  +
retn 0  +
jmp loc_1004597  +
***
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb cs20  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp+0] eax +
retn   +
sub eax 1000h +
test [eax] eax +
jmp cs10  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_100426D  +
cmp dword ptr [eax+10h] 3 +
jnz loc_100426D  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_1004267  +
cmp eax 19930521h +
jz loc_1004267  +
cmp eax 19930522h +
jz loc_1004267  +
cmp eax 1994000h +
jnz loc_100426D  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push offset loc_1004230  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_10042B6  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_10042B2  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_100431D  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1004315  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_100431F  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_1004305  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_10042A0  +
pop ecx  +
test eax eax +
jz loc_1004386  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_10042E0  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1004386  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_100438F  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_10041DF  +
push offset dword_1005004  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_10044B5  +
cmp ecx 0FFFFFFFFh +
jz loc_10044B5  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_10044AE  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_10044AE  +
cmp edx 10000000h +
jnb loc_10044AE  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_10044AE  +
jmp loc_10044A9  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_10044F7  +
push eax  +
call sub_100445C  +
test eax eax +
jz loc_10044F7  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_10044EC  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_10044F7  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1005004 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_1004533  +
test eax ebx +
jz loc_1004533  +
not eax  +
mov dword_1005008 eax +
jmp loc_100458E  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_100457A  +
test dword_1005004 ebx +
jnz loc_100457F  +
mov esi 0BB40E64Fh +
mov dword_1005004 esi +
not esi  +
mov dword_1005008 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_1005150 eax +
mov dword_100514C ecx +
mov dword_1005148 edx +
mov dword_1005144 ebx +
mov dword_1005140 esi +
mov dword_100513C edi +
mov word_1005168 ss +
mov word_100515C cs +
mov word_1005138 ds +
mov word_1005134 es +
mov word_1005130 fs +
mov word_100512C gs +
pushf   +
pop dword_1005160  +
mov eax [ebp+0] +
mov dword_1005154 eax +
mov eax [ebp+4] +
mov dword_1005158 eax +
lea eax [ebp+8] +
mov dword_1005164 eax +
mov eax [ebp-320h] +
mov dword_10050A0 10001h +
mov eax dword_1005158 +
mov dword_100505C eax +
mov dword_1005050 0C0000409h +
mov dword_1005054 1 +
mov eax dword_1005004 +
mov [ebp-328h] eax +
mov eax dword_1005008 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
