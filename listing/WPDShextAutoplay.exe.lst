mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
test eax eax +
jz loc_1001CFC  +
push eax  +
call ds:CoRevokeClassObject  +
and dword ptr [esi] 0 +
mov esi [ebp+arg_4] +
mov eax [esi] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi] 0 +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_10] +
test edx edx +
jz loc_1001D37  +
cmp word ptr [edx] 0 +
jnz loc_1001D1C  +
push 0Eh  +
jmp loc_1001D39  +
mov eax edx +
push esi  +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1001D22  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_1001D3A  +
push 0Ah  +
pop eax  +
test edx edx +
jz loc_1001D4B  +
cmp word ptr [edx] 0 +
jnz loc_1001D50  +
mov edx offset aNull +
jmp loc_1001D50  +
mov edx offset aNull_0 +
push 0  +
push 4  +
lea ecx [ebp+arg_14] +
push ecx  +
push eax  +
push edx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 28h +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 20h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push edi  +
mov esi ecx +
mov edi 208h +
push edi  +
mov [esi+0Ch] eax +
lea eax [esi+10h] +
push 0  +
push eax  +
mov dword ptr [esi] offset off_1001310 +
mov dword ptr [esi+4] offset off_10012FC +
mov dword ptr [esi+8] 1 +
call memset  +
push edi  +
lea eax [esi+218h] +
push 0  +
push eax  +
call memset  +
push edi  +
lea eax [esi+420h] +
push 0  +
push eax  +
call memset  +
add esp 24h +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi eax +
xor eax eax +
mov ecx edx +
test edx edx +
jz loc_1001E22  +
cmp [esi] ax +
jz loc_1001E1E  +
inc esi  +
inc esi  +
dec edx  +
jnz loc_1001E14  +
test edx edx +
jnz loc_1001E27  +
mov eax 80070057h +
pop esi  +
test edi edi +
jz locret_1001E38  +
test eax eax +
jl loc_1001E35  +
sub ecx edx +
mov [edi] ecx +
retn   +
and dword ptr [edi] 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_1001E73  +
cmp [ebp+arg_4] eax +
jz loc_1001E6F  +
movzx edx word ptr [ebx] +
test dx dx +
jz loc_1001E6F  +
mov [ecx] dx +
inc ecx  +
inc ecx  +
inc ebx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_1001E52  +
test esi esi +
jnz loc_1001E7B  +
dec ecx  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
xor edx edx +
mov [ecx] dx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1001E89  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_8]  +
mov esi eax +
push [ebp+arg_4]  +
xor ebx ebx +
dec esi  +
push esi  +
push edi  +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_1001EBE  +
cmp eax esi +
ja loc_1001EBE  +
jz loc_1001EC3  +
jmp loc_1001ECB  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
mov eax esi +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1001ED4  +
mov [ecx] eax +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
add eax eax +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
add eax eax +
push eax  +
push [ebp+arg_0]  +
call memcpy_s  +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov [ebp+8] eax +
push offset dword_1005FB8  +
lea eax [ebp+8] +
push eax  +
call _CxxThrowException  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1001F5E  +
cmp eax 0Ch +
jz loc_1001F57  +
cmp eax 16h +
jz loc_1001F50  +
cmp eax 22h +
jz loc_1001F50  +
cmp eax 50h +
jz loc_1001F5E  +
push 80004005h  +
call loc_1001F07  +
push 80070057h  +
jmp loc_1001F4B  +
push 8007000Eh  +
jmp loc_1001F4B  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1001EE1  +
add esp 10h +
push eax  +
call sub_1001F26  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+hResInfo]  +
push [ebp+hModule]  +
call ds:LoadResource  +
test eax eax +
jz loc_1001FE6  +
push esi  +
push eax  +
call ds:LockResource  +
mov esi eax +
test esi esi +
jz loc_1001FD8  +
push [ebp+hResInfo]  +
push [ebp+hModule]  +
call ds:SizeofResource  +
mov ecx [ebp+arg_8] +
add eax esi +
and ecx 0Fh +
jbe loc_1001FD4  +
cmp esi eax +
jnb loc_1001FD8  +
dec ecx  +
movzx edx word ptr [esi] +
lea esi [esi+edx*2+2] +
jnz loc_1001FC6  +
cmp esi eax +
jb loc_1001FDC  +
xor eax eax +
jmp loc_1001FE5  +
movzx eax word ptr [esi] +
neg eax  +
sbb eax eax +
and eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
shr eax 4 +
inc eax  +
movzx eax ax +
push 6  +
push eax  +
push [ebp+hModule]  +
call ds:FindResourceW  +
test eax eax +
jz loc_100201A  +
push [ebp+arg_4]  +
push eax  +
push [ebp+hModule]  +
call sub_1001F8D  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push dword ptr [ebp+wLanguage]  +
shr eax 4 +
inc eax  +
movzx eax ax +
push eax  +
push 6  +
push [ebp+hModule]  +
call ds:FindResourceExW  +
test eax eax +
jz loc_1002051  +
push [ebp+arg_4]  +
push eax  +
push [ebp+hModule]  +
call sub_1001F8D  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov esi offset unk_1007048 +
push 0  +
mov ecx esi +
call sub_1004DCD  +
xor ebx ebx +
inc ebx  +
jmp loc_100208E  +
push dword ptr [ebp+wLanguage]  +
push [ebp+arg_0]  +
push edi  +
call sub_1002023  +
test eax eax +
jnz loc_100209B  +
push ebx  +
mov ecx esi +
call sub_1004DCD  +
inc ebx  +
mov edi eax +
test edi edi +
jnz loc_1002075  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
mov eax edi +
jmp loc_1002094  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_10020B5  +
xor eax eax +
jmp loc_10020D4  +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jz loc_10020C3  +
mov eax [edi] +
push edi  +
call dword ptr [eax+4]  +
mov eax [esi] +
test eax eax +
jz loc_10020CF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [esi] edi +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
call ds:SysFreeString  +
retn   +
***
lea eax [ecx+0Ch] +
or edx 0FFFFFFFFh +
xadd [eax] edx +
dec edx  +
test edx edx +
jg locret_1002105  +
mov eax [ecx] +
mov edx [eax] +
push ecx  +
mov ecx eax +
call dword ptr [edx+4]  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
cmp eax 0FFFFFFFFh +
jnz loc_100212D  +
mov eax [ebp+arg_8] +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_100211E  +
sub eax ecx +
sar eax 1 +
inc eax  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1001F67  +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_10] +
test esi esi +
jz loc_1002164  +
mov eax esi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1002158  +
sub eax edx +
inc eax  +
jmp loc_1002167  +
push 5  +
pop eax  +
mov ecx esi +
test esi esi +
jnz loc_1002172  +
mov ecx offset aNull_1 +
push 0  +
push eax  +
push ecx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 20h +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_10] +
test esi esi +
jz loc_10021B4  +
mov eax esi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_10021A8  +
sub eax edx +
inc eax  +
jmp loc_10021B7  +
push 5  +
pop eax  +
mov ecx esi +
test esi esi +
jnz loc_10021C2  +
mov ecx offset aNull_1 +
push 0  +
push 4  +
lea edx [ebp+arg_14] +
push edx  +
push eax  +
push ecx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 28h +
pop esi  +
pop ebp  +
retn 18h  +
***
mov eax off_1007000 +
test byte ptr [eax+1Ch] 10h +
push esi  +
mov esi ecx +
jz loc_100225F  +
lea eax [esi+104h] +
push eax  +
call ds:InterlockedDecrement  +
mov ecx [esi+108h] +
test ecx ecx +
jz loc_100223A  +
mov eax off_1007000 +
cmp eax offset off_1007000 +
jz loc_100225F  +
test byte ptr [eax+1Ch] 10h +
jz loc_100225F  +
push dword ptr [ecx]  +
push esi  +
push offset dword_10012C0  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002196  +
pop esi  +
retn   +
mov eax off_1007000 +
cmp eax offset off_1007000 +
jz loc_100225F  +
test byte ptr [eax+1Ch] 10h +
jz loc_100225F  +
push esi  +
push offset dword_10012C0  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002146  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_10] +
test edx edx +
jz loc_1002297  +
cmp word ptr [edx] 0 +
jnz loc_100227C  +
push 0Eh  +
jmp loc_1002299  +
mov eax edx +
push esi  +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1002282  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_100229A  +
push 0Ah  +
pop eax  +
test edx edx +
jz loc_10022AB  +
cmp word ptr [edx] 0 +
jnz loc_10022B0  +
mov edx offset aNull +
jmp loc_10022B0  +
mov edx offset aNull_0 +
push 0  +
push eax  +
push edx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 20h +
pop ebp  +
retn 14h  +
***
push ebp  +
mov ebp esp +
push ecx  +
mov edx [ebp+20h] +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
cmp edx ebx +
jz loc_100230F  +
cmp [edx] bx +
jnz loc_10022F3  +
mov dword ptr [ebp+20h] 0Eh +
jmp loc_1002316  +
mov eax edx +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_10022F8  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
mov [ebp+20h] eax +
jmp loc_1002316  +
mov dword ptr [ebp+20h] 0Ah +
cmp edx ebx +
jz loc_100232D  +
cmp [edx] bx +
jnz loc_1002328  +
mov dword ptr [ebp-4] offset aNull +
jmp loc_1002334  +
mov [ebp-4] edx +
jmp loc_1002334  +
mov dword ptr [ebp-4] offset aNull_0 +
mov edi [ebp+1Ch] +
cmp edi ebx +
jz loc_100235D  +
cmp [edi] bx +
jnz loc_1002344  +
push 0Eh  +
jmp loc_100235F  +
mov eax edi +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_1002349  +
sub eax esi +
sar eax 1 +
lea ebx [eax+eax+2] +
jmp loc_1002360  +
push 0Ah  +
pop ebx  +
test edi edi +
jz loc_1002375  +
cmp word ptr [edi] 0 +
jnz loc_1002371  +
mov edx offset aNull +
jmp loc_100237A  +
mov edx edi +
jmp loc_100237A  +
mov edx offset aNull_0 +
mov edi [ebp+18h] +
test edi edi +
jz loc_10023A4  +
cmp word ptr [edi] 0 +
jnz loc_100238B  +
push 0Eh  +
jmp loc_10023A6  +
mov eax edi +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1002390  +
sub eax esi +
sar eax 1 +
lea ecx [eax+eax+2] +
jmp loc_10023A7  +
push 0Ah  +
pop ecx  +
test edi edi +
jz loc_10023BC  +
cmp word ptr [edi] 0 +
jnz loc_10023B8  +
mov eax offset aNull +
jmp loc_10023C1  +
mov eax edi +
jmp loc_10023C1  +
mov eax offset aNull_0 +
push 0  +
push dword ptr [ebp+20h]  +
push dword ptr [ebp-4]  +
push ebx  +
push edx  +
push ecx  +
push eax  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+14h]  +
push 2Bh  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call TraceMessage  +
add esp 30h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 1Ch  +
***
push ebp  +
mov ebp esp +
mov edx [ebp+1Ch] +
push ebx  +
push esi  +
push edi  +
test edx edx +
jz loc_1002429  +
cmp word ptr [edx] 0 +
jnz loc_100240D  +
mov dword ptr [ebp+1Ch] 0Eh +
jmp loc_1002430  +
mov eax edx +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1002412  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
mov [ebp+1Ch] eax +
jmp loc_1002430  +
mov dword ptr [ebp+1Ch] 0Ah +
mov ebx offset aNull_0 +
test edx edx +
jz loc_1002446  +
cmp word ptr [edx] 0 +
jnz loc_1002448  +
mov edx offset aNull +
jmp loc_1002448  +
mov edx ebx +
mov edi [ebp+18h] +
test edi edi +
jz loc_1002472  +
cmp word ptr [edi] 0 +
jnz loc_1002459  +
push 0Eh  +
jmp loc_1002474  +
mov eax edi +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100245E  +
sub eax esi +
sar eax 1 +
lea ecx [eax+eax+2] +
jmp loc_1002475  +
push 0Ah  +
pop ecx  +
test edi edi +
jz loc_100248A  +
cmp word ptr [edi] 0 +
jnz loc_1002486  +
mov eax offset aNull +
jmp loc_100248C  +
mov eax edi +
jmp loc_100248C  +
mov eax ebx +
push 0  +
push 4  +
lea esi [ebp+20h] +
push esi  +
push dword ptr [ebp+1Ch]  +
push edx  +
push ecx  +
push eax  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+14h]  +
push 2Bh  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call TraceMessage  +
add esp 30h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_10] +
test edx edx +
jz loc_10024ED  +
cmp word ptr [edx] 0 +
jnz loc_10024D2  +
push 0Eh  +
jmp loc_10024EF  +
mov eax edx +
push esi  +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10024D8  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_10024F0  +
push 0Ah  +
pop eax  +
test edx edx +
jz loc_1002501  +
cmp word ptr [edx] 0 +
jnz loc_1002506  +
mov edx offset aNull +
jmp loc_1002506  +
mov edx offset aNull_0 +
push 0  +
push 4  +
lea ecx [ebp+arg_18] +
push ecx  +
push 4  +
lea ecx [ebp+arg_14] +
push ecx  +
push eax  +
push edx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 30h +
pop ebp  +
retn 1Ch  +
***
push ebp  +
mov ebp esp +
push 0  +
push 4  +
lea eax [ebp+1Ch] +
push eax  +
push 4  +
lea eax [ebp+18h] +
push eax  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+14h]  +
push 2Bh  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call TraceMessage  +
add esp 28h +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and dword ptr [ebp-4] 0 +
push ebx  +
mov ebx [ebp+10h] +
test ebx ebx +
jnz loc_1002580  +
mov eax 80070057h +
jmp loc_10025DE  +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
push 4  +
pop ecx  +
mov edi offset dword_1001BCC +
xor eax eax +
cmps   +
jz loc_10025C0  +
mov esi [ebp+0Ch] +
push 4  +
pop ecx  +
mov edi offset dword_1001BEC +
xor eax eax +
cmps   +
jnz loc_10025AF  +
mov esi [ebp+8] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
jmp loc_10025CC  +
mov esi [ebp+0Ch] +
push 4  +
pop ecx  +
mov edi offset dword_1001BDC +
xor eax eax +
cmps   +
jnz loc_10025D0  +
mov esi [ebp+8] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
add esi 4 +
mov [ebx] esi +
jmp loc_10025D9  +
and [ebx] eax +
mov dword ptr [ebp-4] 80004002h +
mov eax [ebp-4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
add esi 8 +
push esi  +
call ds:InterlockedIncrement  +
mov eax [esi] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+8] +
lea eax [edi+8] +
mov esi [eax] +
push eax  +
dec esi  +
call ds:InterlockedDecrement  +
test eax eax +
jnz loc_100262F  +
mov eax [edi] +
push 1  +
mov ecx edi +
call dword ptr [eax+18h]  +
xor eax eax +
jmp loc_1002631  +
mov eax esi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+14h] +
test ecx ecx +
jnz loc_100264F  +
mov eax 80070057h +
jmp loc_100266E  +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_100265F  +
and dword ptr [ecx] 0 +
mov eax 80040110h +
jmp loc_100266E  +
mov eax [ebp+8] +
push ecx  +
push dword ptr [ebp+10h]  +
add eax 0FFFFFFFCh +
mov edx [eax] +
push eax  +
call dword ptr [edx]  +
pop ebp  +
retn 10h  +
***
xor eax eax +
retn 8  +
***
xor eax eax +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1001310 +
mov dword ptr [esi+4] offset off_10012FC +
jz loc_10026AD  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_10026C7  +
pop ebp  +
retn   +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10026CA  +
sub eax edx +
sar eax 1 +
pop ebp  +
retn   +
***
push 8007000Eh  +
call loc_1001F07  +
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_0]  +
call sub_100205A  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
add eax eax +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
add eax eax +
push eax  +
push [ebp+arg_0]  +
call memmove_s  +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jl loc_100274F  +
mov edx [ecx] +
cmp eax [edx-8] +
jg loc_100274F  +
mov [edx-0Ch] eax +
mov ecx [ecx] +
xor edx edx +
mov [ecx+eax*2] dx +
pop ebp  +
retn 4  +
***
push 80070057h  +
call loc_1001F07  +
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi [ecx] +
mov ebx [esi-0Ch] +
sub esi 10h +
mov [ebp+var_8] ecx +
mov ecx [esi] +
mov eax [ecx] +
push edi  +
mov [ebp+var_4] ebx +
call dword ptr [eax+10h]  +
mov edx [eax] +
push 2  +
push [ebp+arg_0]  +
mov ecx eax +
call dword ptr [edx]  +
mov edi eax +
test edi edi +
jnz loc_1002794  +
call loc_10026DF  +
mov eax [ebp+arg_0] +
cmp ebx eax +
jge loc_100279D  +
mov eax ebx +
inc eax  +
push eax  +
lea ecx [esi+10h] +
push ecx  +
push eax  +
lea ebx [edi+10h] +
push ebx  +
call sub_1001EE1  +
mov eax [ebp+var_4] +
add esp 10h +
mov ecx esi +
mov [edi+4] eax +
call sub_10020EC  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
mov [eax] ebx +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push esi  +
mov esi ecx +
mov eax [esi] +
sub eax 10h +
cmp [eax+8] edx +
mov ecx [eax] +
jge loc_10027F8  +
test edx edx +
jle loc_10027F8  +
push edi  +
mov edi [ecx] +
push 2  +
push edx  +
push eax  +
call dword ptr [edi+8]  +
pop edi  +
test eax eax +
jnz loc_10027FD  +
call loc_10026DF  +
add eax 10h +
mov [esi] eax +
pop esi  +
pop ebp  +
retn 4  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1002607  +
***
sub dword ptr [esp+4] 4 +
jmp loc_10025E8  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1002567  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
test edx edx +
jz loc_100284F  +
cmp edx 7FFFFFFFh +
jbe loc_1002854  +
mov eax 80070057h +
test eax eax +
jl loc_100286A  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_1001E3E  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1002889  +
cmp ecx 7FFFFFFFh +
jbe loc_100288E  +
mov eax 80070057h +
test eax eax +
jl loc_10028D2  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_10028C5  +
mov edx [ebp+arg_8] +
push edi  +
mov edi 7FFFFFFEh +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_10028C0  +
mov cl [edx+eax] +
test cl cl +
jz loc_10028C0  +
mov [eax] cl +
inc eax  +
dec esi  +
jnz loc_10028AC  +
pop edi  +
test esi esi +
jnz loc_10028CB  +
dec eax  +
mov ebx 8007007Ah +
mov byte ptr [eax] 0 +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
shr edx 1 +
push 0  +
pop eax  +
jz loc_10028F2  +
cmp edx 7FFFFFFFh +
jbe loc_10028F7  +
mov eax 80070057h +
test eax eax +
jl loc_100290D  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_1001E3E  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
push ebx  +
xor eax eax +
push esi  +
mov esi 7FFFFFFFh +
test edx edx +
jz loc_100292F  +
cmp edx esi +
jbe loc_1002934  +
mov eax 80070057h +
mov ebx [ebp+arg_0] +
test eax eax +
jl loc_100294C  +
push edi  +
lea edi [ebp+arg_0] +
mov eax ebx +
call sub_1001E07  +
mov ecx [ebp+arg_0] +
pop edi  +
jmp loc_100294E  +
xor ecx ecx +
test eax eax +
jl loc_1002965  +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_8] +
push esi  +
sub edx ecx +
push 0  +
lea ecx [ebx+ecx*2] +
call sub_1001E3E  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_1002985  +
cmp [ebp+arg_4] 7FFFFFFFh +
jbe loc_100298A  +
mov eax 80070057h +
test eax eax +
jl loc_10029A4  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
push 0  +
call sub_1001E95  +
pop edi  +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
mov ecx [ebp+0Ch] +
shr ecx 1 +
push 0  +
pop eax  +
jz loc_10029C2  +
cmp ecx 7FFFFFFFh +
jbe loc_10029C7  +
mov eax 80070057h +
test eax eax +
jl loc_10029E0  +
push edi  +
mov edi [ebp+8] +
lea eax [ebp+14h] +
push eax  +
push dword ptr [ebp+10h]  +
mov eax ecx +
push 0  +
call sub_1001E95  +
pop edi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_0] +
and [ebp+arg_4] 0 +
shr edx 1 +
test eax eax +
jz loc_1002A10  +
cmp edx 7FFFFFFFh +
ja loc_1002A10  +
push edi  +
lea edi [ebp+arg_4] +
call sub_1001E07  +
pop edi  +
jmp loc_1002A15  +
mov eax 80070057h +
mov ecx [ebp+arg_8] +
test ecx ecx +
jz loc_1002A2C  +
test eax eax +
jl loc_1002A29  +
mov edx [ebp+arg_4] +
add edx edx +
mov [ecx] edx +
jmp loc_1002A2C  +
and dword ptr [ecx] 0 +
pop ebp  +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
push esi  +
mov esi ecx +
jnz loc_1002A4D  +
and dword ptr [esi] 0 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push dword ptr [ebp+8]  +
call ds:SysAllocString  +
mov [esi] eax +
test eax eax +
jnz loc_1002A46  +
push 8007000Eh  +
call loc_1001F07  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
cmp [ebp+arg_0] eax +
jz loc_1002AA4  +
push eax  +
call ds:SysFreeString  +
cmp [ebp+arg_0] 0 +
jz loc_1002AA1  +
push [ebp+arg_0]  +
call ds:SysAllocString  +
mov [esi] eax +
test eax eax +
jnz loc_1002AA4  +
push 8007000Eh  +
call loc_1001F07  +
and dword ptr [esi] 0 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
mov esi ecx +
mov [esi+108h] eax +
mov eax off_1007000 +
test byte ptr [eax+1Ch] 10h +
jz loc_1002AE7  +
lea eax [esi+104h] +
push eax  +
call ds:InterlockedIncrement  +
push [ebp+arg_0]  +
push 104h  +
push esi  +
call sub_1002873  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 118h +
mov eax dword_1007024 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_114] 0 +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov [ebp+var_118] ecx +
mov eax off_1007000 +
cmp eax offset off_1007000 +
jz loc_1002B40  +
test byte ptr [eax+1Ch] 10h +
jz loc_1002B40  +
push ebx  +
push offset dword_10012D0  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002266  +
lea eax [ebp+var_114] +
push eax  +
push offset aCautoplayevent  +
lea ecx [ebp+var_110] +
call sub_1002AB0  +
test ebx ebx +
jnz loc_1002B6A  +
mov [ebp+var_114] 80070057h +
jmp loc_1002C0F  +
mov esi ds:wcstok +
mov edi offset asc_1001334 +
push edi  +
push ebx  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1002BEB  +
push eax  +
mov eax [ebp+var_118] +
mov ebx 104h +
push ebx  +
add eax 10h +
push eax  +
call sub_1002839  +
push edi  +
push 0  +
mov [ebp+var_114] eax +
call esi  +
cmp [ebp+var_114] 0 +
pop ecx  +
pop ecx  +
jl loc_1002C0F  +
test eax eax +
jz loc_1002C06  +
push eax  +
mov eax [ebp+var_118] +
push ebx  +
add eax 218h +
push eax  +
call sub_1002839  +
push edi  +
push 0  +
mov [ebp+var_114] eax +
call esi  +
cmp [ebp+var_114] 0 +
pop ecx  +
pop ecx  +
jl loc_1002C0F  +
test eax eax +
jz loc_1002C06  +
push eax  +
mov eax [ebp+var_118] +
push ebx  +
add eax 420h +
jmp loc_1002BFA  +
mov eax [ebp+var_118] +
push ebx  +
push 104h  +
add eax 10h +
push eax  +
call sub_1002839  +
mov [ebp+var_114] eax +
cmp [ebp+var_114] 0 +
jge loc_1002C39  +
mov eax off_1007000 +
cmp eax offset off_1007000 +
jz loc_1002C39  +
test byte ptr [eax+1Ch] 2 +
jz loc_1002C39  +
push [ebp+var_114]  +
push offset dword_10012D0  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001D79  +
mov esi [ebp+var_114] +
lea ecx [ebp+var_110] +
call sub_10021EC  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100557B  +
leave   +
retn 4  +
***
push ebp  +
mov ebp esp +
sub esp 12Ch +
mov eax dword_1007024 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
mov ebx [ebp+8] +
push esi  +
xor esi esi +
push edi  +
mov [ebp-128h] esi +
xor eax eax +
lea edi [ebp-124h] +
stos   +
stos   +
mov [ebp-114h] esi +
mov [ebp-118h] esi +
mov [ebp-11Ch] esi +
mov eax off_1007000 +
mov edi offset off_1007000 +
cmp eax edi +
jz loc_1002CC8  +
test byte ptr [eax+1Ch] 10h +
jz loc_1002CC8  +
push ebx  +
push offset dword_10012D0  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002266  +
lea eax [ebp-114h] +
push eax  +
push offset aCautoplayeve_0  +
lea ecx [ebp-110h] +
call sub_1002AB0  +
cmp ebx esi +
jnz loc_1002CF2  +
mov dword ptr [ebp-114h] 80070057h +
jmp loc_1002E09  +
push offset aWpdshserviceob  +
push offset aWpdshservice_0  +
call ds:FindWindowW  +
mov [ebp-12Ch] eax +
cmp eax esi +
jnz loc_1002D1B  +
mov dword ptr [ebp-114h] 80004005h +
jmp loc_1002E09  +
lea eax [ebp-11Ch] +
push eax  +
push 208h  +
push ebx  +
call sub_10029E7  +
cmp eax esi +
mov [ebp-114h] eax +
jge loc_1002D6B  +
mov eax off_1007000 +
cmp eax edi +
jz loc_1002E09  +
test byte ptr [eax+1Ch] 2 +
jz loc_1002E09  +
push dword ptr [ebp-114h]  +
push offset dword_10012D0  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001D79  +
jmp loc_1002E09  +
mov esi [ebp-11Ch] +
xor edi edi +
push edi  +
add esi 2 +
push esi  +
push edi  +
push 4  +
push edi  +
push 0FFFFFFFFh  +
call ds:CreateFileMappingW  +
mov [ebp-118h] eax +
cmp eax edi +
jz loc_1002D0C  +
push esi  +
push edi  +
push edi  +
push 0F001Fh  +
push eax  +
call ds:MapViewOfFile  +
mov [ebp-120h] eax +
cmp eax edi +
jnz loc_1002DB7  +
mov dword ptr [ebp-114h] 80004005h +
jmp loc_1002E1E  +
push ebx  +
push esi  +
push eax  +
call sub_10028DB  +
cmp eax edi +
mov [ebp-114h] eax +
jge loc_1002DED  +
mov eax off_1007000 +
cmp eax offset off_1007000 +
jz loc_1002E09  +
test byte ptr [eax+1Ch] 2 +
jz loc_1002E09  +
push dword ptr [ebp-114h]  +
push offset dword_10012D0  +
push 10h  +
jmp loc_1002D5B  +
***
lea eax [ebp-128h] +
push eax  +
push edi  +
push 4Ah  +
push dword ptr [ebp-12Ch]  +
mov [ebp-124h] esi +
call ds:SendMessageW  +
cmp dword ptr [ebp-120h] 0 +
jz loc_1002E1E  +
push dword ptr [ebp-120h]  +
call ds:UnmapViewOfFile  +
cmp dword ptr [ebp-118h] 0 +
jz loc_1002E33  +
push dword ptr [ebp-118h]  +
call ds:CloseHandle  +
cmp dword ptr [ebp-114h] 0 +
jge loc_1002E66  +
mov eax off_1007000 +
cmp eax offset off_1007000 +
jz loc_1002E66  +
test byte ptr [eax+1Ch] 2 +
jz loc_1002E66  +
push dword ptr [ebp-114h]  +
push offset dword_10012D0  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001D79  +
mov esi [ebp-114h] +
lea ecx [ebp-110h] +
call sub_10021EC  +
mov ecx [ebp-4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100557B  +
leave   +
retn 4  +
***
mov eax offset loc_1005CBB +
call __EH_prolog3_GS  +
mov edi [ebp+8] +
xor esi esi +
push 38h  +
lea eax [ebp-378h] +
push esi  +
push eax  +
mov [ebp-32Ch] esi +
mov [ebp-330h] esi +
mov [ebp-37Ch] esi +
call memset  +
xor eax eax +
push 206h  +
mov [ebp-218h] ax +
lea eax [ebp-216h] +
push esi  +
push eax  +
mov dword ptr [ebp-340h] 10h +
mov [ebp-33Ch] esi +
mov dword ptr [ebp-338h] 1000h +
mov [ebp-334h] esi +
mov [ebp-328h] esi +
call memset  +
add esp 18h +
mov eax off_1007000 +
cmp eax offset off_1007000 +
jz loc_1002F2D  +
test byte ptr [eax+1Ch] 10h +
jz loc_1002F2D  +
push edi  +
push offset dword_10012D0  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002266  +
lea eax [ebp-328h] +
push eax  +
push offset aCautoplayeve_2  +
lea ecx [ebp-324h] +
call sub_1002AB0  +
mov [ebp-4] esi +
cmp edi esi +
jnz loc_1002F5A  +
mov dword ptr [ebp-328h] 80070057h +
jmp loc_1003056  +
call ds:GetVersion  +
cmp al 6 +
push edi  +
lea eax [ebp-218h] +
jnb loc_1002F72  +
push offset a20d04fe03aea_0  +
jmp loc_1002F77  +
push offset a20d04fe03aea10  +
push offset aSS  +
push 104h  +
push eax  +
call sub_1002970  +
add esp 14h +
lea eax [ebp-32Ch] +
push eax  +
push esi  +
call ds:CreateBindCtx  +
cmp eax esi +
mov [ebp-328h] eax +
jl loc_1003056  +
mov eax [ebp-32Ch] +
mov ecx [eax] +
lea edx [ebp-340h] +
push edx  +
push eax  +
call dword ptr [ecx+18h]  +
cmp eax esi +
mov [ebp-328h] eax +
jl loc_100303C  +
push esi  +
push esi  +
lea eax [ebp-330h] +
push eax  +
push dword ptr [ebp-32Ch]  +
lea eax [ebp-218h] +
push eax  +
call ds:SHParseDisplayName  +
cmp eax esi +
mov [ebp-328h] eax +
jl loc_100303C  +
mov eax [ebp-330h] +
mov [ebp-358h] eax +
lea eax [ebp-37Ch] +
push eax  +
mov dword ptr [ebp-37Ch] 3Ch +
mov dword ptr [ebp-378h] 304h +
mov dword ptr [ebp-360h] 5 +
mov dword ptr [ebp-370h] offset aOpen +
call ds:ShellExecuteExW  +
push dword ptr [ebp-330h]  +
call ds:SHELL32_155  +
mov [ebp-330h] esi +
mov eax [ebp-32Ch] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp [ebp-328h] esi +
mov [ebp-32Ch] esi +
jge loc_1003080  +
mov eax off_1007000 +
cmp eax offset off_1007000 +
jz loc_1003080  +
test byte ptr [eax+1Ch] 2 +
jz loc_1003080  +
push dword ptr [ebp-328h]  +
push offset dword_10012D0  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001D79  +
mov esi [ebp-328h] +
lea ecx [ebp-324h] +
call sub_10021EC  +
mov eax esi +
call sub_1005665  +
retn 4  +
***
push 320h  +
mov eax offset loc_1005CF3 +
call __EH_prolog3_GS  +
mov [ebp-32Ch] ecx +
mov esi [ebp+8] +
and dword ptr [ebp-328h] 0 +
xor eax eax +
push 206h  +
push eax  +
mov [ebp-218h] ax +
lea eax [ebp-216h] +
push eax  +
call memset  +
add esp 0Ch +
mov eax off_1007000 +
mov ebx offset off_1007000 +
mov edi offset dword_10012D0 +
cmp eax ebx +
jz loc_1003105  +
test byte ptr [eax+1Ch] 10h +
jz loc_1003105  +
push esi  +
push edi  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002266  +
lea eax [ebp-328h] +
push eax  +
push offset aCautoplayeve_3  +
lea ecx [ebp-324h] +
call sub_1002AB0  +
and dword ptr [ebp-4] 0 +
test esi esi +
jnz loc_1003138  +
mov eax off_1007000 +
mov dword ptr [ebp-328h] 80070057h +
jmp loc_1003237  +
push esi  +
mov esi 104h +
push esi  +
lea eax [ebp-218h] +
push eax  +
call sub_1002839  +
mov [ebp-328h] eax +
test eax eax +
jge loc_100317A  +
mov eax off_1007000 +
cmp eax ebx +
jz loc_100322E  +
test byte ptr [eax+1Ch] 2 +
jz loc_100322E  +
push dword ptr [ebp-328h]  +
push edi  +
push 15h  +
jmp loc_100321E  +
push offset asc_1001588  +
push 0  +
lea eax [ebp-218h] +
push eax  +
call ds:StrRStrIW  +
test eax eax +
jz loc_1003124  +
xor ecx ecx +
push offset a6ac27878A6fa41  +
mov [eax+2] cx +
push esi  +
lea eax [ebp-218h] +
push eax  +
call sub_1002916  +
mov [ebp-328h] eax +
test eax eax +
jge loc_10031CE  +
mov eax off_1007000 +
cmp eax ebx +
jz loc_100322E  +
test byte ptr [eax+1Ch] 2 +
jz loc_100322E  +
push dword ptr [ebp-328h]  +
push edi  +
push 16h  +
jmp loc_100321E  +
mov ecx [ebp-32Ch] +
lea eax [ebp-218h] +
push eax  +
call near ptr dword_1002C60+2  +
mov [ebp-328h] eax +
test eax eax +
jge loc_1003255  +
mov ecx [ebp-32Ch] +
lea eax [ebp-218h] +
push eax  +
call near ptr dword_1002E8C+3  +
mov [ebp-328h] eax +
test eax eax +
jge loc_1003255  +
mov eax off_1007000 +
cmp eax ebx +
jz loc_100322E  +
test byte ptr [eax+1Ch] 2 +
jz loc_100322E  +
push dword ptr [ebp-328h]  +
push edi  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001D79  +
mov eax off_1007000 +
cmp dword ptr [ebp-328h] 0 +
jge loc_1003255  +
cmp eax ebx +
jz loc_1003255  +
test byte ptr [eax+1Ch] 2 +
jz loc_1003255  +
push dword ptr [ebp-328h]  +
push edi  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001D79  +
mov esi [ebp-328h] +
lea ecx [ebp-324h] +
call sub_10021EC  +
mov eax esi +
call sub_1005665  +
retn 4  +
***
push ebp  +
mov ebp esp +
sub esp 358h +
mov eax dword_1007024 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
mov ebx [ebp+8] +
push esi  +
push edi  +
xor esi esi +
push 38h  +
lea eax [ebp-354h] +
push esi  +
push eax  +
mov edi ecx +
mov [ebp-358h] esi +
call memset  +
xor eax eax +
push 206h  +
mov [ebp-20Ch] ax +
lea eax [ebp-20Ah] +
push esi  +
push eax  +
mov [ebp-31Ch] esi +
call memset  +
add esp 18h +
mov eax off_1007000 +
cmp eax offset off_1007000 +
jz loc_10032F2  +
test byte ptr [eax+1Ch] 10h +
jz loc_10032F2  +
push ebx  +
push offset dword_10012D0  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002266  +
lea eax [ebp-31Ch] +
push eax  +
push offset aCautoplayeve_1  +
lea ecx [ebp-318h] +
call sub_1002AB0  +
cmp ebx esi +
jnz loc_100331C  +
mov dword ptr [ebp-31Ch] 80070057h +
jmp loc_10033B5  +
lea eax [edi+218h] +
cmp [eax] si +
jz loc_100330D  +
mov [ebp-348h] eax +
lea eax [edi+420h] +
mov dword ptr [ebp-358h] 3Ch +
mov dword ptr [ebp-354h] 300h +
mov dword ptr [ebp-33Ch] 5 +
mov dword ptr [ebp-34Ch] offset aOpen +
cmp [eax] si +
jz loc_1003382  +
push ebx  +
push eax  +
lea eax [ebp-20Ch] +
push 104h  +
push eax  +
call sub_1002970  +
lea eax [ebp-20Ch] +
add esp 10h +
mov [ebp-344h] eax +
lea eax [ebp-358h] +
push eax  +
call ds:ShellExecuteExW  +
test eax eax +
jnz loc_10033AD  +
call ds:GetLastError  +
cmp eax esi +
jle loc_10033A7  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp-31Ch] eax +
cmp [ebp-31Ch] esi +
jge loc_10033DF  +
mov eax off_1007000 +
cmp eax offset off_1007000 +
jz loc_10033DF  +
test byte ptr [eax+1Ch] 2 +
jz loc_10033DF  +
push dword ptr [ebp-31Ch]  +
push offset dword_10012D0  +
push 1Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001D79  +
mov esi [ebp-31Ch] +
lea ecx [ebp-318h] +
call sub_10021EC  +
mov ecx [ebp-4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100557B  +
leave   +
retn 4  +
***
mov eax [ecx] +
test eax eax +
jz locret_1003414  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
retn   +
***
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+8] +
test ecx ecx +
jnz loc_1003433  +
push 80004005h  +
call loc_1001F07  +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
add eax 10h +
mov [esi] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
sub ecx 10h +
xor eax eax +
push edi  +
mov edi [ecx] +
cmp [ecx+4] eax +
jz loc_100347D  +
cmp [ecx+0Ch] eax +
jge loc_100346C  +
push eax  +
mov ecx esi +
call loc_100272D  +
jmp loc_100347D  +
call sub_10020EC  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+0Ch]  +
add eax 10h +
mov [esi] eax +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
mov edx [eax-0Ch] +
sub eax 10h +
push esi  +
mov esi [ebp+arg_0] +
cmp edx esi +
jle loc_100349C  +
mov esi edx +
cmp dword ptr [eax+0Ch] 1 +
jle loc_10034AA  +
push esi  +
call sub_100275F  +
jmp loc_10034CE  +
mov eax [eax+8] +
cmp eax esi +
jge loc_10034CE  +
mov edx eax +
mov eax 400h +
cmp edx eax +
jle loc_10034C0  +
add edx eax +
jmp loc_10034C2  +
add edx edx +
cmp edx esi +
jge loc_10034C8  +
mov edx esi +
push edx  +
call sub_10027CE  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax dword_1007024 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
mov ebx [ebp+arg_0] +
push edi  +
mov esi offset dword_1001BFC +
lea edi [ebp+rclsid] +
movs   +
movs   +
mov [ebp+lpdwRegister] eax +
mov eax [ebp+arg_8] +
movs   +
mov [ebp+var_18] eax +
lea eax [ebp+rclsid] +
movs   +
push eax  +
mov esi offset sz +
push esi  +
call ds:CLSIDFromString  +
mov edi eax +
test edi edi +
jge loc_1003553  +
mov eax off_1007000 +
mov ebx offset off_1007000 +
cmp eax ebx +
jz loc_1003601  +
test byte ptr [eax+1Ch] 2 +
jz loc_1003601  +
push edi  +
push esi  +
push offset dword_10012B0  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001D06  +
jmp loc_10035FC  +
push 628h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_100356C  +
push ebx  +
mov ecx eax +
call sub_1001DA5  +
jmp loc_100356E  +
xor eax eax +
mov esi eax +
add eax 4 +
neg esi  +
sbb esi esi +
and esi eax +
mov ebx offset off_1007000 +
jnz loc_1003587  +
mov edi 8007000Eh +
jmp loc_10035ED  +
push [ebp+lpdwRegister]  +
lea eax [ebp+rclsid] +
push 0  +
push 4  +
push esi  +
push eax  +
call ds:CoRegisterClassObject  +
mov edi eax +
test edi edi +
jge loc_10035B8  +
mov eax off_1007000 +
cmp eax ebx +
jz loc_10035F2  +
test byte ptr [eax+1Ch] 2 +
jz loc_10035F2  +
push edi  +
push offset dword_10012B0  +
push 0Bh  +
jmp loc_10035E2  +
push [ebp+var_18]  +
mov eax [esi] +
push offset dword_1001BDC  +
push esi  +
call dword ptr [eax]  +
mov edi eax +
test edi edi +
jge loc_10035ED  +
mov eax off_1007000 +
cmp eax ebx +
jz loc_10035F2  +
test byte ptr [eax+1Ch] 2 +
jz loc_10035F2  +
push edi  +
push offset dword_10012B0  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001D79  +
mov eax off_1007000 +
test esi esi +
jz loc_1003601  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
mov eax off_1007000 +
test edi edi +
jge loc_1003622  +
cmp eax ebx +
jz loc_1003622  +
test byte ptr [eax+1Ch] 2 +
jz loc_1003622  +
push edi  +
push offset dword_10012B0  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001D79  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100557B  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor esi esi +
push esi  +
push esi  +
mov [ebp+var_4] esi +
xor edi edi +
mov [ebp+var_8] esi +
call ds:CoInitializeEx  +
mov ebx eax +
cmp ebx esi +
jge loc_100367E  +
mov eax off_1007000 +
cmp eax offset off_1007000 +
jz loc_10036D5  +
test byte ptr [eax+1Ch] 2 +
jz loc_10036D5  +
push ebx  +
push offset dword_10012B0  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
jmp loc_10036C2  +
push esi  +
push esi  +
push esi  +
push esi  +
call ds:CreateEventW  +
mov edi eax +
cmp edi esi +
jz loc_10036D5  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push edi  +
call sub_10034D8  +
cmp eax esi +
jge loc_10036C9  +
mov ecx off_1007000 +
cmp ecx offset off_1007000 +
jz loc_10036D5  +
test byte ptr [ecx+1Ch] 2 +
jz loc_10036D5  +
push eax  +
push offset dword_10012B0  +
push 0Fh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1001D79  +
jmp loc_10036D5  +
push 1D4C0h  +
push edi  +
call ds:WaitForSingleObject  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
call sub_1001CD5  +
cmp edi esi +
jz loc_10036ED  +
push edi  +
call ds:CloseHandle  +
pop edi  +
cmp ebx esi +
pop esi  +
pop ebx  +
jl loc_10036FA  +
call ds:CoUninitialize  +
xor eax eax +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_1007024 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
mov edi [ebp+8] +
xor eax eax +
push 206h  +
xor ebx ebx +
mov [ebp-20Ch] ax +
lea eax [ebp-20Ah] +
push ebx  +
push eax  +
call memset  +
add esp 0Ch +
test esi esi +
jz loc_1003769  +
push esi  +
push 104h  +
lea eax [ebp-20Ch] +
push eax  +
call sub_1002839  +
lea eax [ebp-20Ch] +
push eax  +
mov ecx edi +
call sub_1002AF3  +
mov ebx eax +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_100557B  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
xor ecx ecx +
sub eax 10h +
inc ecx  +
sub ecx [eax+0Ch] +
mov eax [eax+8] +
sub eax [ebp+arg_0] +
or ecx eax +
jge loc_10037CF  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1003485  +
mov eax [esi] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
push edi  +
mov edi ecx +
jnz loc_10037F4  +
push 80070057h  +
call loc_1001F07  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:_vscwprintf  +
mov esi eax +
pop ecx  +
pop ecx  +
cmp esi 0FFFFFFFFh +
jnz loc_1003810  +
push 8007000Eh  +
jmp loc_10037EF  +
push esi  +
mov ecx edi +
call sub_10037A8  +
push [ebp+arg_4]  +
lea ecx [esi+1] +
push [ebp+arg_0]  +
push ecx  +
push eax  +
call vswprintf_s  +
add esp 10h +
push esi  +
mov ecx edi +
call loc_100272D  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_4]  +
mov ebx ecx +
push [ebp+hModule]  +
call sub_1001FEF  +
mov esi eax +
test esi esi +
jz loc_1003882  +
push edi  +
movzx edi word ptr [esi] +
push edi  +
mov ecx ebx +
call sub_10037A8  +
movzx ecx word ptr [esi] +
push ecx  +
add esi 2 +
push esi  +
push edi  +
push eax  +
call sub_100210B  +
add esp 10h +
push edi  +
mov ecx ebx +
call loc_100272D  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
push ebx  +
mov ebx ecx +
jnz loc_10038A2  +
call sub_1003449  +
jmp loc_10038F7  +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_10038B4  +
push 80070057h  +
call loc_1001F07  +
mov eax [ebx] +
push edi  +
push [ebp+arg_4]  +
mov edi [eax-0Ch] +
sub esi eax +
sar esi 1 +
call sub_10037A8  +
cmp esi edi +
pop edi  +
push [ebp+arg_4]  +
ja loc_10038DD  +
lea ecx [eax+esi*2] +
push ecx  +
push [ebp+arg_4]  +
push eax  +
call sub_1002707  +
jmp loc_10038E9  +
push [ebp+arg_0]  +
push [ebp+arg_4]  +
push eax  +
call sub_1001EE1  +
add esp 10h +
push [ebp+arg_4]  +
mov ecx ebx +
call loc_100272D  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
lea eax [ebp+10h] +
push eax  +
push dword ptr [ebp+0Ch]  +
call sub_10037DB  +
pop ebp  +
retn   +
***
jmp fword ptr [eax+30h]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10026EF  +
test eax eax +
jz loc_1003A5C  +
push [ebp+arg_0]  +
mov ecx esi +
push eax  +
call sub_100383E  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10026B9  +
pop ecx  +
push eax  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_100388D  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+8] eax +
jz loc_1003AAD  +
test dword ptr [ebp+8] 0FFFF0000h +
jnz loc_1003AAD  +
movzx eax word ptr [ebp+8] +
push eax  +
call sub_1003A3D  +
mov al 1 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1003A66  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+8]  +
mov esi ecx +
call sub_1003AB6  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax offset loc_1005D6F +
call __EH_prolog3_catch_GS  +
mov eax [ebp+10h] +
mov esi [ebp+8] +
and dword ptr [ebp-50h] 0 +
mov ebx [ebp+0Ch] +
push 6  +
pop ecx  +
mov [ebp-5Ch] eax +
xor eax eax +
push 6  +
lea edi [ebp-48h] +
stos   +
pop ecx  +
lea edi [ebp-2Ch] +
stos   +
push 1Ch  +
pop eax  +
mov [ebp-54h] esi +
mov [ebp-4Ch] eax +
mov [ebp-30h] eax +
test esi esi +
jnz loc_1003B5F  +
mov eax off_1007000 +
cmp eax offset off_1007000 +
jz loc_1003B55  +
test byte ptr [eax+1Ch] 2 +
jz loc_1003B55  +
push 80004003h  +
push offset dword_10012D0  +
push 2Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001D79  +
mov eax 80004003h +
jmp loc_1003E44  +
lea eax [ebp-4Ch] +
push eax  +
push 0  +
push esi  +
push ebx  +
call ds:SetupDiOpenDeviceInterfaceW  +
test eax eax +
jz loc_1003DFE  +
push 4  +
mov eax (offset dword_10018BC+300h) +
pop ecx  +
mov edi eax +
lea esi [ebp-48h] +
xor edx edx +
cmps   +
jnz loc_1003BD0  +
push dword ptr [ebp-54h]  +
mov ecx [ebp-5Ch] +
and [ebp-4] edx +
call near ptr dword_1003AD0+2  +
jmp loc_1003E41  +
mov ecx [ebp-60h] +
mov [ebp-50h] ecx +
test ecx ecx +
jge loc_1003BCA  +
mov eax off_1007000 +
cmp eax offset off_1007000 +
jz loc_1003BCA  +
test byte ptr [eax+1Ch] 2 +
jz loc_1003BCA  +
push ecx  +
push offset dword_10012D0  +
push 2Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001D79  +
mov eax offset loc_1003B96 +
retn   +
***
lea ecx [ebp-30h] +
push ecx  +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
push ebx  +
call ds:SetupDiGetDeviceInterfaceAlias  +
test eax eax +
jz loc_1003DC2  +
mov esi ds:SetupDiGetDeviceInterfaceDetailW +
xor edi edi +
push edi  +
lea eax [ebp-58h] +
push eax  +
push edi  +
push edi  +
lea eax [ebp-30h] +
push eax  +
push ebx  +
mov [ebp-58h] edi +
call esi  +
test eax eax +
jnz loc_1003D7A  +
call ds:GetLastError  +
cmp eax 7Ah +
jnz loc_1003D2D  +
push dword ptr [ebp-58h]  +
call ??_U@YAPAXI@Z  +
mov edi eax +
pop ecx  +
mov [ebp-54h] edi +
test edi edi +
jz loc_1003CF0  +
push 0  +
push 0  +
mov dword ptr [edi] 6 +
push dword ptr [ebp-58h]  +
lea eax [ebp-30h] +
push edi  +
push eax  +
push ebx  +
call esi  +
cmp eax 1 +
jnz loc_1003CA2  +
mov ecx [ebp-5Ch] +
lea eax [edi+4] +
push eax  +
mov dword ptr [ebp-4] 2 +
call near ptr dword_1003AD0+2  +
or dword ptr [ebp-4] 0FFFFFFFFh +
jmp loc_1003CE4  +
mov ecx [ebp-64h] +
mov [ebp-50h] ecx +
test ecx ecx +
jge loc_1003C93  +
mov eax off_1007000 +
cmp eax offset off_1007000 +
jz loc_1003C93  +
test byte ptr [eax+1Ch] 2 +
jz loc_1003C93  +
push ecx  +
push offset dword_10012D0  +
push 2Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001D79  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_1003C9D +
retn   +
***
mov edi [ebp-54h] +
jmp loc_1003CE4  +
call ds:GetLastError  +
test eax eax +
jle loc_1003CB6  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp-50h] eax +
test eax eax +
jge loc_1003CE4  +
mov eax off_1007000 +
cmp eax offset off_1007000 +
jz loc_1003CE4  +
test byte ptr [eax+1Ch] 2 +
jz loc_1003CE4  +
push dword ptr [ebp-50h]  +
push offset dword_10012D0  +
push 30h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001D79  +
push edi  +
call ??_V@YAXPAX@Z  +
pop ecx  +
jmp loc_1003E41  +
mov ecx 8007000Eh +
mov [ebp-50h] ecx +
mov eax off_1007000 +
cmp eax offset off_1007000 +
jz loc_1003E41  +
test byte ptr [eax+1Ch] 2 +
jz loc_1003E41  +
push ecx  +
push dword ptr [ebp-58h]  +
push offset dword_10012D0  +
push 31h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call near ptr byte_1002534+1  +
jmp loc_1003E41  +
cmp eax edi +
jle loc_1003D3B  +
and eax 0FFFFh +
or eax 80070000h +
cmp eax edi +
mov [ebp-50h] eax +
jge loc_1003E41  +
mov eax off_1007000 +
cmp eax offset off_1007000 +
jz loc_1003E41  +
test byte ptr [eax+1Ch] 2 +
jz loc_1003E41  +
push dword ptr [ebp-50h]  +
push offset dword_10012D0  +
push 32h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001D79  +
jmp loc_1003E41  +
call ds:GetLastError  +
cmp eax edi +
jle loc_1003D8E  +
and eax 0FFFFh +
or eax 80070000h +
cmp eax edi +
mov [ebp-50h] eax +
jge loc_1003E41  +
mov eax off_1007000 +
cmp eax offset off_1007000 +
jz loc_1003E41  +
test byte ptr [eax+1Ch] 2 +
jz loc_1003E41  +
push dword ptr [ebp-50h]  +
push dword ptr [ebp-54h]  +
push offset dword_10012D0  +
push 33h  +
jmp loc_1003E36  +
call ds:GetLastError  +
test eax eax +
jle loc_1003DD6  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp-50h] eax +
test eax eax +
jge loc_1003E41  +
mov eax off_1007000 +
cmp eax offset off_1007000 +
jz loc_1003E41  +
test byte ptr [eax+1Ch] 2 +
jz loc_1003E41  +
push dword ptr [ebp-50h]  +
push dword ptr [ebp-54h]  +
push offset dword_10012D0  +
push 34h  +
jmp loc_1003E36  +
call ds:GetLastError  +
test eax eax +
jle loc_1003E12  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp-50h] eax +
test eax eax +
jge loc_1003E41  +
mov eax off_1007000 +
cmp eax offset off_1007000 +
jz loc_1003E41  +
test byte ptr [eax+1Ch] 2 +
jz loc_1003E41  +
push dword ptr [ebp-50h]  +
push esi  +
push offset dword_10012D0  +
push 35h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001D06  +
mov eax [ebp-50h] +
call sub_1005679  +
retn 0Ch  +
***
cmp eax offset off_1007000 +
jz loc_1003F55  +
test byte ptr [eax+1Ch] 10h +
jz loc_1003F55  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp-38Ch]  +
push ebx  +
push offset dword_10012D0  +
push 27h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10024BC  +
lea eax [ebp-370h] +
push eax  +
push offset aCautoplayeve_4  +
lea ecx [ebp-36Ch] +
call sub_1002AB0  +
mov byte ptr [ebp-4] 1 +
cmp ebx edi +
jnz loc_1003F88  +
mov eax off_1007000 +
mov dword ptr [ebp-370h] 80070057h +
jmp loc_1004350  +
cmp [ebp-38Ch] edi +
jz loc_100431E  +
cmp [ebp+10h] edi +
jz loc_100431E  +
push edi  +
push edi  +
push edi  +
push 12h  +
push edi  +
push edi  +
lea eax [ebp-228h] +
push eax  +
call ds:SetupDiGetClassDevsExW  +
mov [ebp-374h] eax +
mov esi 80070000h +
cmp eax 0FFFFFFFFh +
jnz loc_1003FD8  +
call ds:GetLastError  +
cmp eax edi +
jle loc_1003FD2  +
and eax 0FFFFh +
or eax esi +
mov [ebp-370h] eax +
cmp [ebp-370h] edi +
jge loc_1004017  +
mov eax off_1007000 +
cmp eax offset off_1007000 +
jz loc_100432D  +
test byte ptr [eax+1Ch] 2 +
jz loc_100432D  +
push dword ptr [ebp-370h]  +
push offset dword_10012D0  +
push 28h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001D79  +
jmp loc_1004328  +
mov ecx [ebp-390h] +
lea eax [ebp-380h] +
push eax  +
push dword ptr [ebp-374h]  +
push ebx  +
call near ptr dword_1003AEC+2  +
cmp eax edi +
mov [ebp-370h] eax +
jge loc_1004063  +
mov eax off_1007000 +
cmp eax offset off_1007000 +
jz loc_100432D  +
test byte ptr [eax+1Ch] 2 +
jz loc_100432D  +
push dword ptr [ebp-370h]  +
push offset dword_10012D0  +
push 29h  +
jmp loc_1004007  +
***
push 6  +
pop ecx  +
xor eax eax +
lea edi [ebp-240h] +
stos   +
lea eax [ebp-244h] +
push eax  +
push dword ptr [ebp-384h]  +
lea eax [ebp-228h] +
push eax  +
xor edi edi +
push edi  +
push dword ptr [ebp-374h]  +
mov dword ptr [ebp-244h] 1Ch +
call ds:SetupDiEnumDeviceInterfaces  +
cmp eax 1 +
jz loc_10040BF  +
call ds:GetLastError  +
cmp eax edi +
mov ebx 0FFFFh +
jg loc_10040B9  +
mov [ebp-370h] eax +
jmp loc_10040C4  +
and eax ebx +
or eax esi +
jmp loc_10040B1  +
***
mov ebx 0FFFFh +
cmp [ebp-370h] edi +
jl loc_10042E6  +
push edi  +
lea eax [ebp-388h] +
push eax  +
push edi  +
push edi  +
lea eax [ebp-244h] +
push eax  +
push dword ptr [ebp-374h]  +
call ds:SetupDiGetDeviceInterfaceDetailW  +
test eax eax +
jnz loc_1004145  +
mov edi ds:GetLastError +
call edi  +
cmp eax 7Ah +
jnz loc_100412D  +
push dword ptr [ebp-388h]  +
call ??_U@YAPAXI@Z  +
pop ecx  +
mov [ebp-37Ch] eax +
mov [ebp-378h] eax +
test eax eax +
jz loc_10042B8  +
mov dword ptr [eax] 6 +
and dword ptr [ebp-370h] 0 +
jmp loc_1004145  +
call edi  +
test eax eax +
jle loc_1004137  +
and eax ebx +
or eax esi +
mov [ebp-370h] eax +
test eax eax +
jl loc_10042C2  +
cmp dword ptr [ebp-378h] 0 +
jz loc_1004283  +
push 6  +
pop ecx  +
xor eax eax +
lea edi [ebp-25Ch] +
stos   +
lea eax [ebp-260h] +
push eax  +
push 0  +
push dword ptr [ebp-388h]  +
lea eax [ebp-244h] +
push dword ptr [ebp-378h]  +
mov dword ptr [ebp-260h] 1Ch +
push eax  +
push dword ptr [ebp-374h]  +
call ds:SetupDiGetDeviceInterfaceDetailW  +
cmp eax 1 +
jnz loc_100426F  +
mov eax [ebp-378h] +
add eax 4 +
push eax  +
push dword ptr [ebp-380h]  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1004283  +
push 20019h  +
push 2  +
push eax  +
push 1  +
lea eax [ebp-260h] +
push eax  +
push dword ptr [ebp-374h]  +
call ds:SetupDiOpenDevRegKey  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jz loc_10041E2  +
test edi edi +
jnz loc_10041F6  +
call ds:GetLastError  +
test eax eax +
jle loc_10041F0  +
and eax ebx +
or eax esi +
mov [ebp-370h] eax +
cmp dword ptr [ebp-370h] 0 +
jnz loc_1004253  +
lea eax [ebp-398h] +
push eax  +
lea eax [ebp-218h] +
push eax  +
lea eax [ebp-394h] +
push eax  +
push 0  +
push offset aDeviceid  +
push edi  +
mov dword ptr [ebp-398h] 208h +
call ds:RegQueryValueExW  +
test eax eax +
jz loc_1004238  +
jle loc_100424D  +
and eax ebx +
or eax esi +
jmp loc_100424D  +
lea eax [ebp-218h] +
push eax  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp-38Ch]  +
call sub_1002839  +
mov [ebp-370h] eax +
cmp edi 0FFFFFFFFh +
jz loc_1004263  +
test edi edi +
jz loc_1004263  +
push edi  +
call ds:RegCloseKey  +
mov dword ptr [ebp-370h] 80070103h +
jmp loc_1004283  +
call ds:GetLastError  +
test eax eax +
jle loc_100427D  +
and eax ebx +
or eax esi +
mov [ebp-370h] eax +
xor edi edi +
cmp [ebp-37Ch] edi +
jz loc_10042A5  +
push dword ptr [ebp-37Ch]  +
call ??_V@YAXPAX@Z  +
pop ecx  +
mov [ebp-37Ch] edi +
mov [ebp-378h] edi +
cmp [ebp-370h] edi +
jnz loc_100430A  +
inc dword ptr [ebp-384h]  +
jmp loc_1004063  +
***
mov dword ptr [ebp-370h] 8007000Eh +
mov eax off_1007000 +
cmp eax offset off_1007000 +
jz loc_100432D  +
test byte ptr [eax+1Ch] 2 +
jz loc_100432D  +
push dword ptr [ebp-370h]  +
push offset dword_10012D0  +
push 2Bh  +
jmp loc_1004007  +
***
mov eax off_1007000 +
cmp eax offset off_1007000 +
jz loc_100432D  +
test byte ptr [eax+1Ch] 2 +
jz loc_100432D  +
push dword ptr [ebp-370h]  +
push offset dword_10012D0  +
push 2Ah  +
jmp loc_1004007  +
***
cmp dword ptr [ebp-370h] 80070103h +
jnz loc_1004328  +
mov [ebp-370h] edi +
jmp loc_1004328  +
mov dword ptr [ebp-370h] 80070057h +
mov eax off_1007000 +
cmp dword ptr [ebp-374h] 0FFFFFFFFh +
jz loc_1004347  +
push dword ptr [ebp-374h]  +
call ds:SetupDiDestroyDeviceInfoList  +
mov eax off_1007000 +
cmp dword ptr [ebp-370h] 0 +
jge loc_1004375  +
cmp eax offset off_1007000 +
jz loc_1004375  +
test byte ptr [eax+1Ch] 2 +
jz loc_1004375  +
push dword ptr [ebp-370h]  +
push offset dword_10012D0  +
push 2Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001D79  +
mov esi [ebp-370h] +
lea ecx [ebp-36Ch] +
call sub_10021EC  +
mov ecx [ebp-380h] +
add ecx 0FFFFFFF0h +
call sub_10020EC  +
mov eax esi +
call sub_1005665  +
retn 0Ch  +
***
mov eax offset loc_1005E1A +
call __EH_prolog3_GS  +
mov edi [ebp+8] +
xor eax eax +
xor esi esi +
push 206h  +
mov [ebp-218h] ax +
lea eax [ebp-216h] +
mov ebx ecx +
push esi  +
push eax  +
mov [ebp-334h] ebx +
mov [ebp-328h] esi +
call memset  +
add esp 0Ch +
mov eax off_1007000 +
cmp eax offset off_1007000 +
jz loc_1004408  +
test byte ptr [eax+1Ch] 10h +
jz loc_1004408  +
push edi  +
push offset dword_10012D0  +
push 1Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002266  +
lea eax [ebp-328h] +
push eax  +
push offset aCautoplayeve_5  +
lea ecx [ebp-324h] +
call sub_1002AB0  +
mov [ebp-4] esi +
cmp edi esi +
jnz loc_1004435  +
mov dword ptr [ebp-328h] 80070057h +
jmp loc_1004544  +
add ebx 218h +
cmp [ebx] si +
jz loc_1004426  +
mov ecx [ebp-334h] +
push 103h  +
lea eax [ebp-218h] +
push eax  +
push edi  +
call near ptr dword_1003E68+2Fh  +
cmp eax esi +
mov [ebp-328h] eax +
jl loc_1004544  +
push ebx  +
lea ecx [ebp-330h] +
call near ptr dword_1003E4C+5  +
mov ecx [ebp-334h] +
lea eax [ebp-330h] +
push eax  +
lea eax [ebp-218h] +
push eax  +
lea eax [ebp-32Ch] +
push eax  +
mov byte ptr [ebp-4] 1 +
call near ptr dword_1003918+4  +
mov ecx [ebp-330h] +
add ecx 0FFFFFFF0h +
call sub_10020EC  +
mov ebx [ebp-32Ch] +
cmp [ebx-0Ch] esi +
jle loc_100452E  +
push 40h  +
lea eax [ebp-384h] +
push esi  +
push eax  +
call memset  +
xor eax eax +
mov [ebp-344h] esi +
lea edi [ebp-340h] +
stos   +
stos   +
add esp 0Ch +
stos   +
xor eax eax +
inc eax  +
mov [ebp-358h] ax +
lea eax [ebp-344h] +
push eax  +
lea eax [ebp-388h] +
push eax  +
push esi  +
push esi  +
push 620h  +
push esi  +
push esi  +
push esi  +
push ebx  +
push esi  +
mov dword ptr [ebp-380h] offset aWinsta0Default +
mov dword ptr [ebp-388h] 44h +
call ds:CreateProcessW  +
test eax eax +
jnz loc_100452E  +
call ds:GetLastError  +
cmp eax esi +
jle loc_1004528  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp-328h] eax +
mov ecx [ebp-32Ch] +
add ecx 0FFFFFFF0h +
call sub_10020EC  +
cmp [ebp-328h] esi +
jge loc_100456E  +
mov eax off_1007000 +
cmp eax offset off_1007000 +
jz loc_100456E  +
test byte ptr [eax+1Ch] 2 +
jz loc_100456E  +
push dword ptr [ebp-328h]  +
push offset dword_10012D0  +
push 1Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001D79  +
mov esi [ebp-328h] +
lea ecx [ebp-324h] +
call sub_10021EC  +
mov eax esi +
call sub_1005665  +
retn 4  +
***
jmp fword ptr (byte_1006DFF-1006E7Bh)[eax]  +
***
lea edi [ebp-228h] +
movs   +
movs   +
movs   +
mov dword ptr [ebp-368h] 3 +
movs   +
and dword ptr [ebp-34Ch] 0 +
mov eax off_1007000 +
mov edi offset off_1007000 +
mov esi offset dword_10012D0 +
cmp eax edi +
jz loc_1004664  +
test byte ptr [eax+1Ch] 10h +
jz loc_1004664  +
push dword ptr [ebp-348h]  +
push esi  +
push 1Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002266  +
lea eax [ebp-338h] +
push eax  +
push (offset dword_1001750+8)  +
lea ecx [ebp-334h] +
call sub_1002AB0  +
xor ecx ecx +
mov byte ptr [ebp-4] 6 +
cmp [ebp-348h] ecx +
jnz loc_100469D  +
mov eax off_1007000 +
mov dword ptr [ebp-338h] 80070057h +
jmp loc_10049E4  +
mov eax [ebp-364h] +
add eax 218h +
mov [ebp-360h] eax +
cmp [eax] cx +
jz loc_1004689  +
lea eax [ebp-344h] +
push eax  +
push (offset dword_10018BC+0B0h)  +
push 1  +
push ecx  +
push (offset dword_10018BC+1F0h)  +
call ds:CoCreateInstance  +
mov [ebp-338h] eax +
test eax eax +
jge loc_100470C  +
mov eax off_1007000 +
cmp eax edi +
jz loc_10049DB  +
test byte ptr [eax+1Ch] 2 +
jz loc_10049DB  +
push dword ptr [ebp-338h]  +
push esi  +
push 1Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001D79  +
mov eax off_1007000 +
jmp loc_10049DB  +
mov eax [ebp-344h] +
mov ecx [eax] +
lea edx [ebp-354h] +
push edx  +
push 0  +
push dword ptr [ebp-348h]  +
push eax  +
call dword ptr [ecx+18h]  +
mov [ebp-338h] eax +
test eax eax +
jge loc_1004753  +
mov eax off_1007000 +
cmp eax edi +
jz loc_10049DB  +
test byte ptr [eax+1Ch] 2 +
jz loc_10049DB  +
push dword ptr [ebp-338h]  +
push esi  +
push 1Fh  +
jmp loc_10046F7  +
***
mov eax [ebp-354h] +
test eax eax +
jnz loc_1004788  +
mov ecx 80004005h +
mov [ebp-338h] ecx +
mov eax off_1007000 +
cmp eax edi +
jz loc_1004A02  +
test byte ptr [eax+1Ch] 2 +
jz loc_10049E4  +
push ecx  +
push esi  +
push 20h  +
jmp loc_10046F7  +
***
xor ecx ecx +
push 2  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??_U@YAPAXI@Z  +
pop ecx  +
mov [ebp-340h] eax +
test eax eax +
jnz loc_10047DD  +
mov ecx 8007000Eh +
mov [ebp-338h] ecx +
mov eax off_1007000 +
cmp eax edi +
jz loc_10049BC  +
test byte ptr [eax+1Ch] 2 +
jz loc_10049BC  +
push ecx  +
push esi  +
push 21h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001D79  +
jmp loc_10049B7  +
mov eax [ebp-344h] +
mov edi [ebp-348h] +
mov ecx [eax] +
lea edx [ebp-354h] +
push edx  +
push dword ptr [ebp-340h]  +
push edi  +
push eax  +
call dword ptr [ecx+18h]  +
mov [ebp-338h] eax +
test eax eax +
jge loc_100482C  +
mov eax off_1007000 +
cmp eax offset off_1007000 +
jz loc_10049BC  +
test byte ptr [eax+1Ch] 2 +
jz loc_10049BC  +
push dword ptr [ebp-338h]  +
push esi  +
push 22h  +
jmp loc_10047CD  +
***
mov ecx [ebp-364h] +
push 103h  +
lea eax [ebp-218h] +
push eax  +
push edi  +
call near ptr dword_1003E68+2Fh  +
mov [ebp-338h] eax +
test eax eax +
jge loc_1004882  +
mov eax off_1007000 +
cmp eax offset off_1007000 +
jz loc_10049BC  +
test byte ptr [eax+1Ch] 2 +
jz loc_10049BC  +
push dword ptr [ebp-338h]  +
push edi  +
push esi  +
push 23h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001D06  +
jmp loc_10049B7  +
lea eax [ebp-228h] +
push eax  +
push dword ptr [ebp-360h]  +
call ds:CLSIDFromString  +
mov [ebp-338h] eax +
test eax eax +
jge loc_10048D9  +
mov eax off_1007000 +
cmp eax offset off_1007000 +
jz loc_10049BC  +
test byte ptr [eax+1Ch] 2 +
jz loc_10049BC  +
push dword ptr [ebp-338h]  +
push edi  +
push dword ptr [ebp-360h]  +
push esi  +
push 24h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call near ptr dword_10023EC+3  +
jmp loc_10049B7  +
lea eax [ebp-33Ch] +
push eax  +
push offset aZbod  +
push 4  +
push 0  +
lea eax [ebp-228h] +
push eax  +
call ds:CoCreateInstance  +
xor edi edi +
cmp eax edi +
mov [ebp-338h] eax +
jge loc_1004930  +
mov eax off_1007000 +
cmp eax offset off_1007000 +
jz loc_10049BC  +
test byte ptr [eax+1Ch] 2 +
jz loc_10049BC  +
push dword ptr [ebp-338h]  +
push dword ptr [ebp-360h]  +
push esi  +
push 25h  +
jmp loc_1004872  +
***
lea eax [ebp-218h] +
push eax  +
lea ecx [ebp-350h] +
call sub_1002A6C  +
push offset aDeviceConnecte  +
lea ecx [ebp-35Ch] +
call sub_1002A6C  +
push dword ptr [ebp-340h]  +
lea ecx [ebp-34Ch] +
call sub_1002A6C  +
push ebx  +
lea ecx [ebp-358h] +
call sub_1002A6C  +
mov eax [ebp-33Ch] +
mov ecx [eax] +
push edi  +
lea edx [ebp-368h] +
push edx  +
push dword ptr [ebp-358h]  +
push 2  +
push dword ptr [ebp-34Ch]  +
push dword ptr [ebp-350h]  +
push dword ptr [ebp-35Ch]  +
push offset dword_1001C0C  +
push eax  +
call dword ptr [ecx+0Ch]  +
cmp [ebp-33Ch] edi +
jz loc_10049B7  +
push edi  +
lea eax [ebp-33Ch] +
push eax  +
call sub_10020A4  +
mov eax off_1007000 +
cmp dword ptr [ebp-340h] 0 +
jz loc_10049D6  +
push dword ptr [ebp-340h]  +
call ??_V@YAXPAX@Z  +
mov eax off_1007000 +
pop ecx  +
mov edi offset off_1007000 +
cmp dword ptr [ebp-338h] 0 +
jge loc_1004A02  +
cmp eax edi +
jz loc_1004A02  +
test byte ptr [eax+1Ch] 2 +
jz loc_1004A02  +
push dword ptr [ebp-338h]  +
push esi  +
push 26h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001D79  +
mov edi [ebp-338h] +
lea ecx [ebp-334h] +
call sub_10021EC  +
push dword ptr [ebp-34Ch]  +
mov esi ds:SysFreeString +
call esi  +
push dword ptr [ebp-350h]  +
call esi  +
push dword ptr [ebp-358h]  +
call esi  +
push dword ptr [ebp-35Ch]  +
call esi  +
mov eax [ebp-33Ch] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_1004A4D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-344h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_1004A61  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
call sub_1005665  +
retn 4  +
***
movs   +
loopne loc_1004A8D  +
jmp fword ptr (byte_1006DFF-1006E57h)[eax]  +
***
adc eax offset SetEvent +
cmp dword ptr [ebp-120h] 0 +
jge loc_1004BBC  +
mov eax off_1007000 +
cmp eax offset off_1007000 +
jz loc_1004BBC  +
test byte ptr [eax+1Ch] 2 +
jz loc_1004BBC  +
push dword ptr [ebp-120h]  +
push offset dword_10012D0  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001D79  +
mov esi [ebp-120h] +
lea ecx [ebp-11Ch] +
call sub_10021EC  +
mov eax esi +
call sub_1005665  +
retn 10h  +
***
mov edi edi +
push esi  +
push 18h  +
mov esi ecx +
push 0  +
push esi  +
call memset  +
add esp 0Ch +
mov eax esi +
pop esi  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
push ecx  +
call ds:InitializeCriticalSection  +
and [ebp+var_1C] 0 +
jmp loc_1004C3D  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000017h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-1Ch] 8007000Eh +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax [ebp+var_1C] +
call __SEH_epilog4  +
retn   +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jnz loc_1004C65  +
mov eax 80070057h +
jmp loc_1004C76  +
cmp dword ptr [eax] 2Ch +
jnz loc_1004C5E  +
and dword ptr [eax+1Ch] 0 +
lea ecx [eax+4] +
call sub_1004C02  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_1004C94  +
push eax  +
call free  +
and dword ptr [esi] 0 +
pop ecx  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jl loc_1004CBD  +
cmp eax [ecx+4] +
jge loc_1004CBD  +
mov ecx [ecx] +
lea eax [ecx+eax*2] +
pop ebp  +
retn 4  +
***
push 0  +
push 0  +
push 1  +
push 0C000008Ch  +
call ds:RaiseException  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jl loc_1004CEE  +
cmp eax [ecx+4] +
jge loc_1004CEE  +
mov ecx [ecx] +
lea eax [ecx+eax*4] +
pop ebp  +
retn 4  +
***
push 0  +
push 0  +
push 1  +
push 0C000008Ch  +
call ds:RaiseException  +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
xor edi edi +
cmp esi edi +
jnz loc_1004D3D  +
mov eax 80070057h +
jmp loc_1004D84  +
mov eax [esi] +
cmp eax edi +
jz loc_1004D82  +
cmp eax 2Ch +
jnz loc_1004D36  +
cmp [esi+24h] edi +
jle loc_1004D6D  +
push ebx  +
lea ebx [esi+20h] +
push edi  +
mov ecx ebx +
call loc_1004CA3  +
movzx eax word ptr [eax] +
push dword ptr [ebp+0Ch]  +
push eax  +
call ds:UnregisterClassA  +
inc edi  +
cmp edi [esi+24h] +
jl loc_1004D51  +
pop ebx  +
lea ecx [esi+20h] +
call sub_1004C7F  +
lea eax [esi+4] +
push eax  +
call ds:DeleteCriticalSection  +
and dword ptr [esi] 0 +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+18h] +
call sub_1004BE7  +
xor eax eax +
mov [esi+30h] eax +
mov [esi+34h] eax +
mov [esi+38h] eax +
mov eax esi +
pop esi  +
retn   +
***
push eax  +
call ds:DeleteCriticalSection  +
lea ecx [esi+30h] +
pop esi  +
jmp sub_1004C7F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
lea edi [esi+18h] +
push edi  +
call ds:EnterCriticalSection  +
mov eax [esi+34h] +
mov ecx [ebp+arg_0] +
cmp ecx eax +
jg loc_1004E0D  +
test ecx ecx +
jl loc_1004E0D  +
cmp ecx eax +
jnz loc_1004E00  +
mov esi [esi+8] +
push edi  +
call ds:LeaveCriticalSection  +
mov eax esi +
jmp loc_1004E16  +
push ecx  +
lea ecx [esi+30h] +
call loc_1004CD4  +
mov esi [eax] +
jmp loc_1004DF5  +
push edi  +
call ds:LeaveCriticalSection  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
add eax offset byte_1007044 +
add [ebx-3974FFDAh] eax +
pop esi  +
retn   +
***
push ebp  +
mov ebp esp +
sub esp 98h +
mov eax dword_1007024 +
xor eax ebp +
mov [ebp-4] eax +
push esi  +
mov esi ecx +
call sub_1004D8F  +
mov eax 1000000h +
push 94h  +
mov [esi+8] eax +
mov [esi+4] eax +
lea eax [ebp-98h] +
push 0  +
push eax  +
mov dword ptr [esi] 3Ch +
mov byte ptr [esi+0Ch] 0 +
call memset  +
add esp 0Ch +
lea eax [ebp-98h] +
push eax  +
mov dword ptr [ebp-98h] 94h +
call ds:GetVersionExA  +
cmp dword ptr [ebp-88h] 2 +
jnz loc_1004EC1  +
cmp dword ptr [ebp-94h] 5 +
jb loc_1004EE2  +
jmp loc_1004EDE  +
cmp dword ptr [ebp-88h] 1 +
jnz loc_1004EE2  +
cmp dword ptr [ebp-94h] 4 +
ja loc_1004EDE  +
jnz loc_1004EE2  +
cmp dword ptr [ebp-90h] 0 +
jbe loc_1004EE2  +
mov byte ptr [esi+0Ch] 1 +
lea ecx [esi+18h] +
mov dword ptr [esi+10h] 800h +
mov dword ptr [esi+14h] offset dword_1001820 +
call sub_1004C02  +
test eax eax +
jge loc_1004F03  +
mov byte_1007044 1 +
mov ecx [ebp-4] +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_100557B  +
leave   +
retn   +
***
cmp byte ptr [ecx+8] 0 +
mov dword ptr [ecx] offset off_1001830 +
jz locret_1004F50  +
mov ecx [ecx+4] +
test ecx ecx +
jz locret_1004F50  +
push ecx  +
call ds:HeapDestroy  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 0  +
push dword ptr [ecx+4]  +
call ds:HeapAlloc  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
jz loc_1004F8B  +
push dword ptr [ebp+8]  +
push 0  +
push dword ptr [ecx+4]  +
call ds:HeapFree  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+8] eax +
jnz loc_1004FA9  +
push dword ptr [ebp+0Ch]  +
mov eax [ecx] +
call dword ptr [eax]  +
jmp loc_1004FCA  +
cmp [ebp+0Ch] eax +
jnz loc_1004FBA  +
push dword ptr [ebp+8]  +
mov eax [ecx] +
call dword ptr [eax+4]  +
xor eax eax +
jmp loc_1004FCA  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push eax  +
push dword ptr [ecx+4]  +
call ds:HeapReAlloc  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 0  +
push dword ptr [ecx+4]  +
call ds:HeapSize  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1004F36  +
test byte ptr [ebp+8] 1 +
jz loc_1005009  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+8] +
mov [eax+4] ecx +
mov dword ptr [eax] offset off_1001844 +
xor ecx ecx +
mov dword ptr [eax+14h] 2 +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov [eax+18h] cx +
mov [eax+1Ah] cx +
mov [eax+8] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mul  [ebp+arg_8] +
test edx edx +
ja loc_100505F  +
cmp eax 0FFFFFFFFh +
jbe loc_1005066  +
mov eax 80070057h +
jmp loc_100506D  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+4] +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+4]  +
***
mov eax ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1001844 +
jz loc_10050BF  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_8] +
or edx 0FFFFFFFFh +
sub edx eax +
cmp edx ecx +
jnb loc_10050E6  +
mov eax 80070057h +
jmp loc_10050EF  +
add eax ecx +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [ebp+arg_4] +
push esi  +
lea ecx [edx+eax] +
lea esi [ecx-1] +
cmp esi edx +
pop esi  +
jge loc_1005114  +
mov eax [ebp+arg_8] +
jmp loc_100511A  +
dec eax  +
not eax  +
dec ecx  +
and eax ecx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push esi  +
push edi  +
push 7FFFFFFFh  +
push 8  +
inc eax  +
push eax  +
mov esi ecx +
call sub_10050F8  +
push dword ptr [ebp+0Ch]  +
mov edi eax +
push edi  +
lea eax [ebp+8] +
push eax  +
call sub_100504B  +
test eax eax +
jl loc_1005183  +
push dword ptr [ebp+8]  +
lea eax [ebp+8] +
push 10h  +
push eax  +
call sub_10050CB  +
test eax eax +
jl loc_1005183  +
mov ecx [esi+4] +
push dword ptr [ebp+8]  +
mov eax [ecx] +
call dword ptr [eax]  +
test eax eax +
jz loc_1005183  +
dec edi  +
and dword ptr [eax+4] 0 +
mov [eax] esi +
mov dword ptr [eax+0Ch] 1 +
mov [eax+8] edi +
jmp loc_1005185  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
push esi  +
push edi  +
push 7FFFFFFFh  +
push 8  +
inc eax  +
push eax  +
mov esi ecx +
call sub_10050F8  +
push dword ptr [ebp+10h]  +
mov edi eax +
push edi  +
lea eax [ebp+0Ch] +
push eax  +
call sub_100504B  +
test eax eax +
jl loc_10051E7  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp+0Ch] +
push 10h  +
push eax  +
call sub_10050CB  +
test eax eax +
jl loc_10051E7  +
push dword ptr [ebp+0Ch]  +
mov ecx [esi+4] +
push dword ptr [ebp+8]  +
mov eax [ecx] +
call dword ptr [eax+8]  +
test eax eax +
jz loc_10051E7  +
dec edi  +
mov [eax+8] edi +
jmp loc_10051E9  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_1005210  +
test eax eax +
jnz loc_1005215  +
mov ecx [esi] +
test ecx ecx +
jz loc_100520D  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_1005201  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_1007134 +
push offset dword_1007124  +
push dword_1007130  +
mov dword_1007124 eax +
push offset unk_1007114  +
push offset unk_1007118  +
push offset unk_1007110  +
call ds:__getmainargs  +
add esp 14h +
mov dword_1007120 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+var_1C] ebx +
mov [ebp+ms_exc.disabled] ebx +
lea eax [ebp+StartupInfo] +
push eax  +
call ds:GetStartupInfoA  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [ebp+ms_exc.disabled] 1 +
mov eax large fs:18h +
mov esi [eax+4] +
mov edi offset Destination +
push 0  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
test eax eax +
jz loc_10052B5  +
cmp eax esi +
jnz loc_10052A8  +
xor esi esi +
inc esi  +
mov ebx esi +
jmp loc_10052B8  +
push 3E8h  +
call ds:Sleep  +
jmp loc_100528F  +
xor esi esi +
inc esi  +
mov eax dword_100745C +
cmp eax esi +
jnz loc_10052CB  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_10052FA  +
mov eax dword_100745C +
test eax eax +
jnz loc_10052F4  +
mov dword_100745C esi +
push offset dword_10011F8  +
push offset dword_10011EC  +
call sub_10051F4  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10052FA  +
jmp loc_1005422  +
mov dword_100712C esi +
mov eax dword_100745C +
cmp eax esi +
jnz loc_100531E  +
push offset dword_10011E8  +
push offset dword_10011D0  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_100745C 2 +
test ebx ebx +
jnz loc_100532A  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_100746C 0 +
jz loc_100534E  +
push offset dword_100746C  +
call sub_1005979  +
pop ecx  +
test eax eax +
jz loc_100534E  +
push 0  +
push 2  +
push 0  +
call dword_100746C  +
mov eax ds:_acmdln +
mov esi [eax] +
mov [ebp+var_20] esi +
mov al [esi] +
cmp al 20h +
ja $LN61  +
test al al +
jz loc_1005368  +
cmp [ebp+var_1C] 0 +
jnz $LN61  +
mov al [esi] +
test al al +
jz loc_1005378  +
cmp al 20h +
ja loc_1005378  +
inc esi  +
mov [ebp+var_20] esi +
jmp loc_1005368  +
test byte ptr [ebp+StartupInfo.dwFlags] 1 +
jz loc_1005384  +
movzx eax [ebp+StartupInfo.wShowWindow] +
jmp loc_1005387  +
push 0Ah  +
pop eax  +
push eax  +
push esi  +
push 0  +
push 1000000h  +
call _WinMain@16  +
mov dword_1007128 eax +
cmp dword_100711C 0 +
jnz $LN62  +
push eax  +
call ds:exit  +
cmp al 22h +
jnz loc_10053B9  +
xor ecx ecx +
cmp [ebp+var_1C] ecx +
setz cl  +
mov [ebp+var_1C] ecx +
movzx eax al +
push eax  +
call ds:_ismbblead  +
pop ecx  +
test eax eax +
jz loc_10053CC  +
inc esi  +
mov [ebp+var_20] esi +
inc esi  +
jmp loc_1005355  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-24h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-24h] +
mov dword_1007128 eax +
cmp dword_100711C 0 +
jnz $LN62  +
push eax  +
call ds:_exit  +
cmp dword_100712C 0 +
jnz loc_100540D  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_1007128 +
jmp loc_100542E  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_100544B  +
xor eax eax +
jmp loc_1005498  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_1005447  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_1005485  +
cmp ecx 20Bh +
jnz loc_1005447  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_1005447  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_1005493  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_1005447  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 2  +
mov dword_100711C eax +
call sub_1005A87  +
push eax  +
call ds:__set_app_type  +
or dword_1007464 0FFFFFFFFh +
or dword_1007468 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_100713C +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_1007138 +
mov [eax] ecx +
call sub_1005A19  +
cmp dword_1007038 0 +
jnz loc_10054F1  +
push offset sub_1005A19  +
call ds:__setusermatherr  +
pop ecx  +
call sub_1005A01  +
xor eax eax +
retn   +
***
call sub_1005AC6  +
jmp ___tmainCRTStartup  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ds:??1type_info@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_1005558  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
cmp ecx dword_1007024 +
jnz loc_1005586  +
retn 0  +
jmp loc_1005B5C  +
***
jmp ds:__CxxFrameHandler3  +
***
push eax  +
push large dword ptr fs:0  +
lea eax [esp+0Ch] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_1007024 +
xor eax ebp +
push eax  +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_1007024 +
xor eax ebp +
push eax  +
mov [ebp-10h] eax +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_1007024 +
xor eax ebp +
push eax  +
mov [ebp-14h] eax +
mov [ebp-10h] esp +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
mov ecx [ebp-0Ch] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov ecx [ebp-10h] +
xor ecx ebp +
call sub_100557B  +
jmp __EH_epilog3  +
***
mov ecx [ebp-14h] +
xor ecx ebp +
call sub_100557B  +
jmp __EH_epilog3  +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_100557B  +
push offset dword_1007024  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
pop ecx  +
retn   +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
call sub_1005748  +
neg eax  +
sbb eax eax +
neg eax  +
pop ecx  +
dec eax  +
pop ebp  +
retn   +
***
push offset loc_100571E  +
push large dword ptr fs:0  +
mov eax [esp+10h] +
mov [esp+10h] ebp +
lea ebp [esp+10h] +
sub esp eax +
push ebx  +
push esi  +
push edi  +
mov eax dword_1007024 +
xor [ebp-4] eax +
xor eax ebp +
mov [ebp-1Ch] eax +
push eax  +
mov [ebp-18h] esp +
push dword ptr [ebp-8]  +
mov eax [ebp-4] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov [ebp-8] eax +
lea eax [ebp-10h] +
mov large fs:0 eax +
retn   +
***
mov ecx [ebp-1Ch] +
xor ecx ebp +
call sub_100557B  +
jmp __SEH_epilog4  +
***
push ecx  +
lea ecx [esp+8] +
sub ecx eax +
and ecx 0Fh +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp __alloca_probe  +
***
push ecx  +
lea ecx [esp+8] +
sub ecx eax +
and ecx 7 +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp __alloca_probe  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_10058BE  +
cmp dword ptr [eax+10h] 3 +
jnz loc_10058BE  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_10058B8  +
cmp eax 19930521h +
jz loc_10058B8  +
cmp eax 19930522h +
jz loc_10058B8  +
cmp eax 1994000h +
jnz loc_10058BE  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset byte_1005880+1)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_1005906  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_1005902  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_100596D  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1005965  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_100596F  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_1005955  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_10058F0  +
pop ecx  +
test eax eax +
jz loc_10059D6  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_1005930  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10059D6  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_10059DF  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1005A7A  +
cmp ecx 0FFFFFFFFh +
jz loc_1005A7A  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_1005A73  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_1005A73  +
cmp edx 10000000h +
jnb loc_1005A73  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_1005A73  +
jmp loc_1005A6E  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_1005ABC  +
push eax  +
call sub_1005A21  +
test eax eax +
jz loc_1005ABC  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_1005AB1  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_1005ABC  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1007024 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_1005AF8  +
test eax ebx +
jz loc_1005AF8  +
not eax  +
mov dword_1007028 eax +
jmp loc_1005B53  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_1005B3F  +
test dword_1007024 ebx +
jnz loc_1005B44  +
mov esi 0BB40E64Fh +
mov dword_1007024 esi +
not esi  +
mov dword_1007028 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_1007240 eax +
mov dword_100723C ecx +
mov dword_1007238 edx +
mov dword_1007234 ebx +
mov dword_1007230 esi +
mov dword_100722C edi +
mov word_1007258 ss +
mov word_100724C cs +
mov word_1007228 ds +
mov word_1007224 es +
mov word_1007220 fs +
mov word_100721C gs +
pushf   +
pop dword_1007250  +
mov eax [ebp+0] +
mov dword_1007244 eax +
mov eax [ebp+4] +
mov dword_1007248 eax +
lea eax [ebp+8] +
mov dword_1007254 eax +
mov eax [ebp-320h] +
mov dword_1007190 10001h +
mov eax dword_1007248 +
mov dword_100714C eax +
mov dword_1007140 0C0000409h +
mov dword_1007144 1 +
mov eax dword_1007024 +
mov [ebp-328h] eax +
mov eax dword_1007028 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
push ecx  +
lea ecx [esp+4] +
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb cs20  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp] eax +
retn   +
***
sub eax 1000h +
test [eax] eax +
jmp cs10  +
***
lea ecx [ebp-324h] +
jmp sub_10021EC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-380h] +
xor ecx eax +
call sub_100557B  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100557B  +
mov eax offset dword_1005FF4 +
jmp loc_1005590  +
***
lea ecx [ebp-324h] +
jmp sub_10021EC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-330h] +
xor ecx eax +
call sub_100557B  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100557B  +
mov eax offset dword_1006020 +
jmp loc_1005590  +
***
push esp  +
and al 8 +
lea eax [edx+0Ch] +
mov ecx [edx-34Ch] +
xor ecx eax +
call sub_100557B  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100557B  +
mov eax offset dword_100604C +
jmp loc_1005590  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-68h] +
xor ecx eax +
call sub_100557B  +
mov ecx [edx-8] +
xor ecx eax +
call sub_100557B  +
mov eax offset dword_10060B0 +
jmp loc_1005590  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100557B  +
mov eax offset dword_1006104 +
jmp loc_1005590  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-39Ch] +
xor ecx eax +
call sub_100557B  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100557B  +
mov eax offset dword_1006138 +
jmp loc_1005590  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-38Ch] +
xor ecx eax +
call sub_100557B  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100557B  +
mov eax offset dword_100616C +
jmp loc_1005590  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-36Ch] +
xor ecx eax +
call sub_100557B  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100557B  +
mov eax offset dword_1006190 +
jmp loc_1005590  +
***
push esp  +
and al 8 +
lea eax [edx+0Ch] +
mov ecx [edx-128h] +
xor ecx eax +
call sub_100557B  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100557B  +
mov eax offset dword_10061F4 +
jmp loc_1005590  +
***
mov ecx offset dword_10070B0 +
jmp sub_1004F36  +
***
mov dword_10070BC offset off_1001844 +
retn   +
***
jns $+2  +
retf   +
***
ins  dx +
ins  dx +
outs   +
arpl [eax] ax +
iret   +
***
push 65676E61h  +
add [edx+656C5304h] dh +
jo $+3  +
jmp near ptr 756EB4EDh  +
***
