mov edi edi +
push esi  +
mov esi eax +
xor eax eax +
mov ecx edx +
test edx edx +
jz loc_1003600  +
cmp [esi] ax +
jz loc_10035FC  +
inc esi  +
inc esi  +
dec edx  +
jnz loc_10035F2  +
test edx edx +
jnz loc_1003605  +
mov eax 80070057h +
pop esi  +
test edi edi +
jz locret_1003616  +
test eax eax +
jl loc_1003613  +
sub ecx edx +
mov [edi] ecx +
retn   +
and dword ptr [edi] 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_1003651  +
cmp [ebp+arg_4] eax +
jz loc_100364D  +
movzx edx word ptr [ebx] +
test dx dx +
jz loc_100364D  +
mov [ecx] dx +
inc ecx  +
inc ecx  +
inc ebx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_1003630  +
test esi esi +
jnz loc_1003659  +
dec ecx  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
xor edx edx +
mov [ecx] dx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1003667  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+28h] +
xor ecx ecx +
cmp eax ecx +
jz loc_10036C1  +
mov edx [ebp+0Ch] +
sub edx ecx +
jz loc_10036AF  +
dec edx  +
jnz loc_10036C1  +
mov cl [ebp+10h] +
mov [eax+28h] cl +
mov ecx [ebp+14h] +
mov [eax+10h] ecx +
mov ecx [ebp+18h] +
mov [eax+14h] ecx +
mov ecx [ebp+1Ch] +
mov [eax+18h] ecx +
mov ecx [ebp+20h] +
mov dword ptr [eax+24h] 1 +
jmp loc_10036BE  +
mov [eax+24h] ecx +
mov [eax+28h] cl +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
mov [eax+18h] ecx +
mov [eax+1Ch] ecx +
pop ebp  +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
mov ecx [eax] +
or ecx [eax+4] +
jz loc_10036DD  +
xor eax eax +
jmp loc_10036ED  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:EventRegister  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
mov ecx [esi+4] +
mov edx eax +
or edx ecx +
jnz loc_100370E  +
xor eax eax +
jmp loc_100371D  +
push ecx  +
push eax  +
call ds:EventUnregister  +
and dword ptr [esi] 0 +
and dword ptr [esi+4] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_C] +
sub esp 40h +
push ebx  +
push esi  +
push edi  +
xor edi edi +
cmp edx edi +
jz loc_1003754  +
mov eax edx +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx di +
jnz loc_1003740  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
jmp loc_1003757  +
push 0Ah  +
pop eax  +
mov ebx offset aNull +
cmp edx edi +
jnz loc_1003762  +
mov edx ebx +
mov ecx [ebp+arg_10] +
mov [ebp+var_40] edx +
mov [ebp+var_3C] edi +
mov [ebp+var_38] eax +
mov [ebp+var_34] edi +
cmp ecx edi +
jz loc_100378E  +
mov eax ecx +
lea esi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx di +
jnz loc_100377A  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
jmp loc_1003791  +
push 0Ah  +
pop eax  +
cmp ecx edi +
jnz loc_1003797  +
mov ecx ebx +
mov [ebp+var_30] ecx +
mov ecx [ebp+arg_18] +
push 4  +
mov [ebp+var_28] eax +
mov [ebp+var_10] ecx +
mov ecx [ebp+arg_14] +
lea eax [ebp+arg_14] +
mov [ebp+var_20] eax +
pop eax  +
mov [ebp+var_8] ecx +
lea ecx [ebp+var_40] +
push ecx  +
push eax  +
push [ebp+arg_8]  +
mov [ebp+var_2C] edi +
push [ebp+arg_4]  +
mov [ebp+var_24] edi +
push [ebp+arg_0]  +
mov [ebp+var_1C] edi +
mov [ebp+var_18] eax +
mov [ebp+var_14] edi +
mov [ebp+var_C] edi +
mov [ebp+var_4] edi +
call ds:EventWrite  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
xor eax eax +
mov [ebp+var_4] eax +
cmp [ebp+lpMultiByteStr] eax +
jz loc_1003846  +
push ebx  +
push esi  +
mov esi ds:_getmbcp +
push edi  +
push eax  +
push eax  +
push 0FFFFFFFFh  +
push [ebp+lpMultiByteStr]  +
push eax  +
call esi  +
mov edi ds:MultiByteToWideChar +
push eax  +
call edi  +
mov ebx eax +
test ebx ebx +
jz loc_1003843  +
lea eax [ebx+ebx+2] +
push eax  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_1003843  +
inc ebx  +
push ebx  +
push eax  +
push 0FFFFFFFFh  +
push [ebp+lpMultiByteStr]  +
push 0  +
call esi  +
push eax  +
call edi  +
pop edi  +
pop esi  +
pop ebx  +
mov eax [ebp+var_4] +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+lpString] +
push edi  +
push esi  +
xor edi edi +
call ds:lstrlenA  +
cmp eax 4 +
jl loc_1003888  +
mov al [esi] +
cmp al 2Dh +
jz loc_1003874  +
cmp al 2Fh +
jnz loc_1003888  +
mov al [esi+1] +
cmp al 74h +
jz loc_100387F  +
cmp al 54h +
jnz loc_1003888  +
cmp byte ptr [esi+2] 3Ah +
jnz loc_1003888  +
lea edi [esi+3] +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov ecx [ebp+arg_C] +
push ebx  +
mov ebx [ebp+arg_10] +
xor eax eax +
cmp [ebp+arg_0] 4 +
push edi  +
mov edi [ebp+arg_8] +
mov [edi] eax +
mov [ecx] eax +
mov [ebp+var_8] 1 +
mov [ebp+var_4] eax +
mov [ebx] eax +
jb loc_100394D  +
push esi  +
mov eax [ebp+arg_4] +
mov ecx [ebp+var_8] +
lea esi [eax+ecx*4] +
push dword ptr [esi]  +
call ds:lstrlenA  +
cmp eax 4 +
jl loc_100393D  +
mov eax [esi] +
mov cl [eax] +
cmp cl 2Dh +
jz loc_10038E8  +
cmp cl 2Fh +
jnz loc_100393D  +
mov cl [eax+1] +
cmp cl 63h +
jz loc_10038F5  +
cmp cl 43h +
jnz loc_1003906  +
cmp byte ptr [eax+2] 3Ah +
jnz loc_1003906  +
add eax 3 +
or [ebp+var_4] 1 +
mov [edi] eax +
jmp loc_100393D  +
cmp cl 68h +
jz loc_1003910  +
cmp cl 48h +
jnz loc_1003924  +
cmp byte ptr [eax+2] 3Ah +
jnz loc_1003924  +
mov ecx [ebp+arg_C] +
add eax 3 +
or [ebp+var_4] 2 +
mov [ecx] eax +
jmp loc_100393D  +
cmp cl 6Ch +
jz loc_100392E  +
cmp cl 4Ch +
jnz loc_100393D  +
cmp byte ptr [eax+2] 3Ah +
jnz loc_100393D  +
add eax 3 +
or [ebp+var_4] 4 +
mov [ebx] eax +
inc [ebp+var_8]  +
mov eax [ebp+var_8] +
cmp eax [ebp+arg_0] +
jb loc_10038C4  +
pop esi  +
xor eax eax +
cmp [ebp+var_4] 7 +
pop edi  +
setz al  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_4] +
and dword ptr [eax] 0 +
push ebx  +
mov ebx [ebp+lpString] +
push esi  +
mov esi ds:lstrlenA +
push ebx  +
mov [ebp+var_1] 0 +
call esi  +
cmp eax 2 +
jl loc_10039E1  +
mov al [ebx] +
cmp al 2Dh +
jz loc_100398E  +
cmp al 2Fh +
jnz loc_10039E1  +
mov al [ebx+1] +
cmp al 71h +
jz loc_1003999  +
cmp al 51h +
jnz loc_10039E1  +
push ebx  +
call esi  +
cmp eax 4 +
jl loc_10039DD  +
cmp byte ptr [ebx+2] 3Ah +
jnz loc_10039DD  +
push edi  +
mov edi 208h +
push edi  +
push 0  +
mov esi offset unk_100A568 +
push esi  +
call memset  +
add esp 0Ch +
xor eax eax +
push eax  +
push esi  +
push edi  +
push eax  +
add ebx 3 +
push ebx  +
push eax  +
call ds:SearchPathA  +
test eax eax +
mov eax [ebp+arg_4] +
pop edi  +
jnz loc_10039DB  +
mov [eax] ebx +
jmp loc_10039DD  +
mov [eax] esi +
mov [ebp+var_1] 1 +
mov al [ebp+var_1] +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
xor ebx ebx +
push edi  +
mov edi [ebp+lpValueName] +
mov [ebp+Type] ebx +
mov [ebp+cbData] 4 +
mov dword ptr [ebp+Data] ebx +
cmp edi ebx +
jz loc_1003A81  +
cmp [ebp+arg_8] ebx +
jz loc_1003A81  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push ebx  +
push edi  +
push [ebp+hKey]  +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_1003A64  +
cmp [ebp+Type] 4 +
jnz loc_1003A57  +
push dword ptr [ebp+Data]  +
mov eax ds:_iob +
push dword ptr [ebp+Data]  +
add eax 20h +
push [ebp+arg_8]  +
push offset aWs0x08xU  +
push eax  +
call ds:fprintf  +
add esp 14h +
jmp loc_1003A81  +
cmp [ebp+arg_C] bl +
jz loc_1003A81  +
push edi  +
push offset aInvalidTypeFor  +
jmp loc_1003A6F  +
cmp [ebp+arg_C] bl +
jz loc_1003A81  +
push edi  +
push offset aCannotQueryWsR  +
mov eax ds:_iob +
add eax 20h +
push eax  +
call ds:fprintf  +
add esp 0Ch +
pop edi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 218h +
mov eax dword_100A018 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+Type] 0 +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_0] +
mov [ebp+cbData] 208h +
test esi esi +
jz loc_1003B65  +
test ebx ebx +
jz loc_1003B65  +
push 20Ah  +
lea eax [ebp+Data] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push 0  +
push esi  +
push edi  +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_1003B47  +
cmp [ebp+Type] 1 +
jz loc_1003B26  +
cmp [ebp+Type] 2 +
jz loc_1003B26  +
cmp [ebp+arg_C] al +
jz loc_1003B65  +
push esi  +
push offset aInvalidTypeFor  +
jmp loc_1003B53  +
lea eax [ebp+Data] +
push eax  +
mov eax ds:_iob +
push ebx  +
add eax 20h +
push offset aWsWs  +
push eax  +
call ds:fprintf  +
add esp 10h +
jmp loc_1003B65  +
cmp [ebp+arg_C] 0 +
jz loc_1003B65  +
push esi  +
push offset aCannotQueryWsR  +
mov eax ds:_iob +
add eax 20h +
push eax  +
call ds:fprintf  +
add esp 0Ch +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10055B7  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
xor ebx ebx +
mov [ebp+Type] ebx +
mov dword ptr [ebp+Data] ebx +
mov [ebp+cbData] 4 +
cmp [ebp+arg_4] ebx +
jz loc_1003BF2  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push ebx  +
push lpValueName  +
push [ebp+hKey]  +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_1003BD8  +
cmp [ebp+Type] 4 +
jz loc_1003BC4  +
cmp [ebp+Type] 3 +
jnz loc_1003BD8  +
cmp dword ptr [ebp+Data] ebx +
setnz al  +
cmp al bl +
jz loc_1003BD8  +
push [ebp+arg_4]  +
push offset aWsPerformanceC  +
jmp loc_1003BE0  +
push [ebp+arg_4]  +
push offset aWsPerformanc_0  +
mov eax ds:_iob +
add eax 20h +
push eax  +
call ds:fprintf  +
add esp 0Ch +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+lpString] +
push edi  +
xor edi edi +
push esi  +
mov [ebx] edi +
call ds:lstrlenA  +
cmp eax 4 +
jl loc_1003C51  +
mov al [esi] +
cmp al 2Dh +
jz loc_1003C24  +
cmp al 2Fh +
jnz loc_1003C51  +
mov al [esi+1] +
cmp al 65h +
jz loc_1003C37  +
cmp al 45h +
jz loc_1003C37  +
cmp al 64h +
jz loc_1003C37  +
cmp al 44h +
jnz loc_1003C51  +
cmp byte ptr [esi+2] 3Ah +
jnz loc_1003C51  +
lea edi [esi+3] +
cmp al 65h +
jz loc_1003C4D  +
cmp al 45h +
jz loc_1003C4D  +
xor eax eax +
inc eax  +
jmp loc_1003C4F  +
xor eax eax +
mov [ebx] eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
push ebx  +
xor ebx ebx +
cmp [ebp+arg_0] 2 +
mov [eax] ebx +
mov eax [ebp+arg_C] +
mov [eax] ebx +
jge loc_1003C7E  +
xor al al +
jmp loc_1003D11  +
mov eax [ebp+arg_4] +
push edi  +
mov edi [eax+4] +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_1003C8A  +
sub eax edx +
sar eax 1 +
cmp eax 4 +
jb loc_1003CC3  +
movzx eax word ptr [edi] +
cmp ax 2Dh +
jz loc_1003CAC  +
cmp ax 2Fh +
jnz loc_1003CC3  +
movzx eax word ptr [edi+2] +
cmp ax 6Dh +
jz loc_1003CBC  +
cmp ax 4Dh +
jnz loc_1003CC3  +
cmp word ptr [edi+4] 3Ah +
jz loc_1003CC7  +
xor al al +
jmp loc_1003D10  +
push esi  +
push 410h  +
push ebx  +
mov esi offset unk_100A158 +
push esi  +
call memset  +
add esp 0Ch +
push ebx  +
push esi  +
push 208h  +
push ebx  +
add edi 6 +
push edi  +
push ebx  +
call ds:SearchPathW  +
test eax eax +
mov eax [ebp+arg_8] +
jnz loc_1003CFA  +
mov [eax] edi +
jmp loc_1003CFC  +
mov [eax] esi +
cmp [ebp+arg_0] 2 +
pop esi  +
jle loc_1003D0E  +
mov eax [ebp+arg_4] +
mov eax [eax+8] +
mov ecx [ebp+arg_C] +
mov [ecx] eax +
mov al 1 +
pop edi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push ebx  +
push edi  +
mov edi [ebp+arg_0] +
xor ebx ebx +
mov [eax] ebx +
mov eax edi +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx bx +
jnz loc_1003D31  +
sub eax ecx +
sar eax 1 +
cmp eax 4 +
jnb loc_1003D48  +
xor al al +
jmp loc_1003DA6  +
movzx eax word ptr [edi] +
cmp ax 2Dh +
jz loc_1003D57  +
cmp ax 2Fh +
jnz loc_1003D44  +
movzx eax word ptr [edi+2] +
cmp ax 73h +
jz loc_1003D67  +
cmp ax 53h +
jnz loc_1003D44  +
cmp word ptr [edi+4] 3Ah +
jnz loc_1003D44  +
push esi  +
push 410h  +
push ebx  +
mov esi offset unk_100A158 +
push esi  +
call memset  +
add esp 0Ch +
push ebx  +
push esi  +
push 208h  +
push ebx  +
add edi 6 +
push edi  +
push ebx  +
call ds:SearchPathW  +
test eax eax +
mov eax [ebp+arg_4] +
jnz loc_1003DA1  +
mov [eax] edi +
jmp loc_1003DA3  +
mov [eax] esi +
mov al 1 +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push ebx  +
push edi  +
mov edi [ebp+arg_0] +
xor ebx ebx +
mov [eax] ebx +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_1003DC7  +
sub eax edx +
sar eax 1 +
cmp eax 2 +
jb loc_1003E48  +
movzx ecx word ptr [edi] +
cmp cx 2Dh +
jz loc_1003DE9  +
cmp cx 2Fh +
jnz loc_1003E48  +
movzx ecx word ptr [edi+2] +
cmp cx 72h +
jz loc_1003DF9  +
cmp cx 52h +
jnz loc_1003E48  +
cmp eax 2 +
jnz loc_1003E02  +
mov al 1 +
jmp loc_1003E4A  +
cmp eax 3 +
jz loc_1003E48  +
cmp word ptr [edi+4] 3Ah +
jnz loc_1003E48  +
push esi  +
push 410h  +
push ebx  +
mov esi offset unk_100A158 +
push esi  +
call memset  +
add esp 0Ch +
push ebx  +
push esi  +
push 208h  +
push ebx  +
add edi 6 +
push edi  +
push ebx  +
call ds:SearchPathW  +
test eax eax +
mov eax [ebp+arg_4] +
jnz loc_1003E41  +
mov [eax] edi +
jmp loc_1003E43  +
mov [eax] esi +
mov al 1 +
pop esi  +
jmp loc_1003E4A  +
xor al al +
pop edi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
test edx edx +
jz loc_1003E6B  +
cmp edx 7FFFFFFFh +
jbe loc_1003E70  +
mov eax 80070057h +
test eax eax +
jl loc_1003E86  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_100361C  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
push ebx  +
xor eax eax +
push esi  +
mov esi 7FFFFFFFh +
test edx edx +
jz loc_1003EA8  +
cmp edx esi +
jbe loc_1003EAD  +
mov eax 80070057h +
mov ebx [ebp+arg_0] +
test eax eax +
jl loc_1003EC5  +
push edi  +
lea edi [ebp+arg_0] +
mov eax ebx +
call sub_10035E5  +
mov ecx [ebp+arg_0] +
pop edi  +
jmp loc_1003EC7  +
xor ecx ecx +
test eax eax +
jl loc_1003EDE  +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_8] +
push esi  +
sub edx ecx +
push 0  +
lea ecx [ebx+ecx*2] +
call sub_100361C  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1003EFF  +
cmp ecx 7FFFFFFFh +
jbe loc_1003F04  +
mov eax 80070057h +
test eax eax +
jl loc_1003F41  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_1003F31  +
cmp eax esi +
ja loc_1003F31  +
jnz loc_1003F3C  +
jmp loc_1003F36  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 240h +
mov eax dword_100A018 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov [ebp+lpString1] eax +
mov eax ds:_iob +
push edi  +
mov edi ds:fprintf +
add eax 20h +
xor esi esi +
push offset aPerformanceCou  +
push eax  +
mov [ebp+hKey] esi +
mov [ebp+phkResult] esi +
call edi  +
pop ecx  +
pop ecx  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push esi  +
push lpSubKey  +
mov ebx 80000002h +
push ebx  +
call ds:RegOpenKeyExW  +
cmp eax esi +
jnz loc_100401A  +
push 1  +
push offset aBaseIndex  +
push off_100A058  +
push [ebp+hKey]  +
call sub_10039EF  +
push 1  +
push offset aLastCounterTex  +
push off_100A060  +
push [ebp+hKey]  +
call sub_10039EF  +
push 1  +
push offset aLastHelpTextId  +
push off_100A068  +
push [ebp+hKey]  +
call sub_10039EF  +
mov eax ds:_iob +
add eax 20h +
push offset asc_100152C  +
push eax  +
call edi  +
pop ecx  +
pop ecx  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
jmp loc_1004034  +
push eax  +
push lpSubKey  +
mov eax ds:_iob +
add eax 20h +
push offset aCannotOpenWsRe  +
push eax  +
call edi  +
add esp 10h +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push esi  +
push off_100A000  +
push ebx  +
call ds:RegOpenKeyExW  +
mov ebx eax +
cmp ebx esi +
jnz loc_1004251  +
push 228h  +
lea eax [ebp+Name] +
push esi  +
push eax  +
mov [ebp+dwIndex] esi +
mov [ebp+cbName] 104h +
call memset  +
add esp 0Ch +
push esi  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+cbName] +
push eax  +
lea eax [ebp+Name] +
push eax  +
push esi  +
jmp loc_100422D  +
cmp [ebp+lpString1] esi +
jz loc_10040B8  +
lea eax [ebp+Name] +
push eax  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
test eax eax +
jnz loc_10041F0  +
push offset asc_10014EC  +
mov ebx 114h +
push ebx  +
lea eax [ebp+Name] +
push eax  +
call sub_1003E8F  +
push off_100A004  +
lea eax [ebp+Name] +
push ebx  +
push eax  +
call sub_1003E8F  +
lea eax [ebp+phkResult] +
push eax  +
push 20019h  +
push esi  +
lea eax [ebp+Name] +
push eax  +
push [ebp+hKey]  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_10041F0  +
mov ecx [ebp+cbName] +
mov word ptr [ebp+ecx*2+Name] ax +
lea eax [ebp+Name] +
push eax  +
push [ebp+phkResult]  +
call sub_1003B7B  +
push esi  +
push offset aDllName  +
push offset aLibrary  +
push [ebp+phkResult]  +
call sub_1003A8C  +
push esi  +
push offset aOpenProcedure  +
push offset aOpen  +
push [ebp+phkResult]  +
call sub_1003A8C  +
push esi  +
push offset aCollectProcedu  +
push offset aCollect  +
push [ebp+phkResult]  +
call sub_1003A8C  +
push esi  +
push offset aCloseProcedure  +
push offset aClose  +
push [ebp+phkResult]  +
call sub_1003A8C  +
push esi  +
push offset aFirstCounterId  +
push off_100A05C  +
push [ebp+phkResult]  +
call sub_10039EF  +
push esi  +
push offset aLastCounterId  +
push off_100A060  +
push [ebp+phkResult]  +
call sub_10039EF  +
push esi  +
push offset aFirstHelpId  +
push off_100A064  +
push [ebp+phkResult]  +
call sub_10039EF  +
push esi  +
push offset aLastHelpId  +
push off_100A068  +
push [ebp+phkResult]  +
call sub_10039EF  +
mov eax ds:_iob +
add eax 20h +
push offset asc_100152C  +
push eax  +
call edi  +
pop ecx  +
pop ecx  +
inc [ebp+dwIndex]  +
push 228h  +
lea eax [ebp+Name] +
push esi  +
push eax  +
mov [ebp+cbName] 104h +
call memset  +
add esp 0Ch +
push esi  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+cbName] +
push eax  +
lea eax [ebp+Name] +
push eax  +
push [ebp+dwIndex]  +
push [ebp+hKey]  +
call ds:RegEnumKeyExW  +
mov ebx eax +
cmp ebx esi +
jz loc_1004095  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
jmp loc_100426B  +
mov eax ds:_iob +
push ebx  +
push off_100A000  +
add eax 20h +
push offset aCannotOpenWsRe  +
push eax  +
call edi  +
add esp 10h +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_10055B7  +
leave   +
retn 4  +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+hKey] ebx +
push lpString  +
mov esi ds:lstrlenW +
call esi  +
mov edi eax +
push off_100A00C  +
call esi  +
add edi eax +
push [ebp+lpString]  +
call esi  +
lea eax [eax+edi+2] +
mov [ebp+Data] eax +
add eax eax +
push eax  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
mov [ebp+lpMem] esi +
cmp esi ebx +
jnz loc_10042DD  +
push 0Eh  +
pop esi  +
jmp loc_1004388  +
push lpString  +
push [ebp+lpString]  +
push off_100A00C  +
push offset aWsWsWs  +
push [ebp+Data]  +
push esi  +
call sub_1003EE9  +
add esp 18h +
mov [ebp+ms_exc.disabled] ebx +
lea eax [ebp+hKey] +
push eax  +
push 2001Fh  +
push ebx  +
push esi  +
push 80000002h  +
call ds:RegOpenKeyExW  +
mov esi eax +
mov [ebp+var_2C] esi +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_1004344  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
mov [ebp-28h] eax +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov esi [ebp-28h] +
mov [ebp-2Ch] esi +
mov dword ptr [ebp-4] 0FFFFFFFEh +
xor ebx ebx +
cmp esi ebx +
jnz loc_1004388  +
cmp [ebp+arg_8] ebx +
jz loc_1004370  +
mov [ebp+Data] 1 +
push 4  +
lea eax [ebp+Data] +
push eax  +
push 4  +
push ebx  +
push off_100A014  +
push [ebp+hKey]  +
call ds:RegSetValueExW  +
mov esi eax +
jmp loc_1004388  +
push off_100A014  +
push [ebp+hKey]  +
call ds:RegDeleteValueW  +
mov esi eax +
cmp esi 2 +
jnz loc_1004388  +
xor esi esi +
cmp [ebp+hKey] ebx +
jz loc_100439C  +
cmp [ebp+hKey] 0FFFFFFFFh +
jz loc_100439C  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
cmp [ebp+lpMem] ebx +
jz loc_10043B2  +
push [ebp+lpMem]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax esi +
call __SEH_epilog4  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
mov [ebp+dwErrCode] ebx +
cmp [ebp+arg_0] ebx +
jz loc_1004570  +
cmp [ebp+lpString] ebx +
jz loc_1004570  +
push [ebp+lpString]  +
mov edi ds:lstrlenW +
call edi  +
push 5Ch  +
push [ebp+lpString]  +
mov esi eax +
mov [ebp+var_4] esi +
call ds:wcschr  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1004589  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_1004487  +
cmp word ptr [eax] 2Eh +
jz loc_1004487  +
push eax  +
call edi  +
test eax eax +
jbe loc_1004487  +
lea ecx [eax+2] +
cmp eax ecx +
jnb loc_1004487  +
add esi ecx +
cmp ecx esi +
jnb loc_1004487  +
cmp [ebp+var_4] esi +
jnb loc_1004487  +
push 2  +
mov eax esi +
pop ecx  +
mul  ecx +
mov eax edx +
sar eax 1Fh +
test edx edx +
jnz loc_1004487  +
lea eax [esi+esi] +
push eax  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov ebx eax +
test ebx ebx +
jz loc_1004487  +
push [ebp+arg_8]  +
push esi  +
push ebx  +
call sub_1003E55  +
push ebx  +
call edi  +
test eax eax +
jle loc_1004487  +
push ebx  +
call edi  +
cmp word ptr [ebx+eax*2-2] 5Ch +
jz loc_100447E  +
push offset asc_10014EC  +
push esi  +
push ebx  +
call sub_1003E8F  +
push [ebp+lpString]  +
push esi  +
jmp loc_1004513  +
push [ebp+arg_0]  +
call edi  +
lea ecx [eax+8] +
cmp eax ecx +
jnb loc_100451B  +
mov eax [ebp+var_4] +
lea edi [ecx+eax] +
cmp ecx edi +
jnb loc_100451B  +
cmp eax edi +
jnb loc_100451B  +
push 6  +
mov eax edi +
pop ecx  +
mul  ecx +
mov eax edx +
sar eax 1Fh +
test edx edx +
jnz loc_100451B  +
mov eax edi +
imul eax eax +
push eax  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov ebx eax +
test ebx ebx +
jz loc_100451B  +
xor ecx ecx +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
lea esi [ebx+edi*2] +
push edi  +
lea eax [esi+edi*2] +
push eax  +
push edi  +
push esi  +
push [ebp+arg_0]  +
mov [ebp+arg_8] eax +
call _wsplitpath_s  +
add esp 24h +
cmp word ptr [esi] 0 +
jz loc_100451B  +
mov eax [ebp+arg_8] +
cmp word ptr [eax] 0 +
jz loc_100451B  +
push esi  +
push edi  +
push ebx  +
call sub_1003E55  +
push [ebp+arg_8]  +
push edi  +
push ebx  +
call sub_1003E8F  +
push [ebp+lpString]  +
push edi  +
push ebx  +
call sub_1003E8F  +
jmp loc_1004577  +
mov esi ds:GetCurrentDirectoryW +
push 0  +
push 0  +
call esi  +
lea ecx [eax+1] +
cmp eax ecx +
jnb loc_1004577  +
mov eax [ebp+var_4] +
lea edi [ecx+eax] +
cmp ecx edi +
jnb loc_1004577  +
cmp eax edi +
jnb loc_1004577  +
push 2  +
mov eax edi +
pop ecx  +
mul  ecx +
mov eax edx +
sar eax 1Fh +
test edx edx +
jnz loc_1004577  +
lea eax [edi+edi] +
push eax  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov ebx eax +
test ebx ebx +
jz loc_1004589  +
push ebx  +
push edi  +
call esi  +
push offset asc_10014EC  +
jmp loc_1004508  +
mov [ebp+dwErrCode] 57h +
test ebx ebx +
jnz loc_1004589  +
cmp [ebp+dwErrCode] ebx +
jz loc_1004589  +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 13Ch +
mov eax dword_100A018 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
push ebx  +
xor ebx ebx +
push edi  +
push eax  +
mov [ebp+var_138] eax +
mov [ebp+var_13C] ecx +
mov [ebp+phkResult] ebx +
mov [ebp+hKey] ebx +
mov [ebp+dwDisposition] ebx +
mov [ebp+lpMem] ebx +
call sub_1008F6B  +
mov edi eax +
cmp edi ebx +
jnz loc_1004F71  +
call sub_1006FDF  +
mov edi eax +
cmp edi ebx +
jnz loc_1004F71  +
mov eax dword_100AAC0 +
mov [ebp+Type] ebx +
mov [ebp+cbData] ebx +
mov [ebp+var_108] ebx +
cmp eax ebx +
jz loc_1004F71  +
mov ecx [eax+4] +
jmp loc_100464E  +
inc [ebp+Type]  +
inc [ebp+var_108]  +
jz loc_100475A  +
mov edx [ecx+4] +
jmp loc_1004648  +
inc [ebp+cbData]  +
inc [ebp+var_108]  +
jz loc_100475A  +
mov edx [edx] +
cmp edx ebx +
jnz loc_1004634  +
mov ecx [ecx] +
cmp ecx ebx +
jnz loc_100461D  +
mov eax [eax] +
cmp eax ebx +
jnz loc_1004618  +
cmp [ebp+var_108] ebx +
jz loc_1004F71  +
mov eax [ebp+var_108] +
push 2  +
pop ecx  +
mul  ecx +
mov ecx edx +
sar ecx 1Fh +
test edx edx +
ja loc_100475A  +
mov [ebp+var_108] eax +
call sub_1005DAF  +
mov edi eax +
cmp edi ebx +
jnz loc_1004F71  +
push esi  +
mov esi ds:RegOpenKeyExW +
lea eax [ebp+hKey] +
push eax  +
push 2001Fh  +
push ebx  +
push lpSubKey  +
push 80000002h  +
call esi  +
mov edi eax +
cmp edi ebx +
jnz loc_1004812  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push ebx  +
push off_100A060  +
mov [ebp+Type] ebx +
push [ebp+hKey]  +
mov [ebp+cbData] 4 +
call ds:RegQueryValueExW  +
mov edi eax +
cmp edi ebx +
jnz loc_1004800  +
cmp [ebp+Type] 4 +
jnz loc_1004752  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+var_12C] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push ebx  +
push off_100A068  +
mov [ebp+Type] ebx +
push [ebp+hKey]  +
mov [ebp+cbData] 4 +
call ds:RegQueryValueExW  +
mov edi eax +
cmp edi ebx +
jnz loc_1004800  +
cmp [ebp+Type] 4 +
jz loc_1004764  +
push 0Dh  +
pop edi  +
jmp loc_1004800  +
mov edi 216h +
jmp loc_1004F71  +
mov edx dword ptr [ebp+Data] +
mov edi [ebp+var_12C] +
lea eax [edx+1] +
cmp eax edi +
jnz loc_10047FB  +
mov eax [ebp+var_108] +
lea ecx [edx+eax] +
cmp edx ecx +
jnb loc_10047FB  +
add eax edi +
cmp edi eax +
jnb loc_10047FB  +
push 4  +
mov [ebp+var_12C] eax +
lea eax [ebp+Data] +
push eax  +
push 4  +
push ebx  +
push off_100A060  +
mov dword ptr [ebp+Data] ecx +
push [ebp+hKey]  +
call ds:RegSetValueExW  +
mov edi eax +
cmp edi ebx +
jnz loc_10047DE  +
push 4  +
lea eax [ebp+var_12C] +
push eax  +
push 4  +
push ebx  +
push off_100A068  +
push [ebp+hKey]  +
call ds:RegSetValueExW  +
mov edi eax +
mov eax dword ptr [ebp+Data] +
mov [ebp+var_12C] eax +
push 2  +
pop eax  +
sub eax [ebp+var_108] +
add dword ptr [ebp+Data] eax +
jmp loc_1004800  +
mov edi 216h +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov [ebp+hKey] ebx +
call sub_1006050  +
cmp edi ebx +
jnz loc_1004F70  +
lea eax [ebp+phkResult] +
push eax  +
push 2001Fh  +
push ebx  +
push off_100A030  +
push 80000002h  +
call esi  +
mov edi eax +
cmp edi ebx +
jz loc_10048A2  +
lea eax [ebp+hKey] +
push eax  +
push 2001Fh  +
push ebx  +
push lpSubKey  +
push 80000002h  +
call esi  +
mov edi eax +
cmp edi ebx +
jnz loc_1004F70  +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [ebp+phkResult] +
push eax  +
push ebx  +
push 2001Fh  +
push ebx  +
push ebx  +
push ebx  +
push off_100A034  +
push [ebp+hKey]  +
call ds:RegCreateKeyExW  +
push [ebp+hKey]  +
mov edi eax +
call ds:RegCloseKey  +
cmp edi ebx +
jnz loc_1004F70  +
mov esi dword_100AAC0 +
mov [ebp+Type] ebx +
mov [ebp+var_124] esi +
cmp edi ebx +
jnz loc_1004F70  +
jmp loc_10048C4  +
mov esi [ebp+var_124] +
cmp esi ebx +
jz loc_1004F70  +
call sub_1005DAF  +
mov edi eax +
cmp edi ebx +
jnz loc_1004F4E  +
push 80h  +
lea eax [ebp+SubKey] +
push ebx  +
push eax  +
call memset  +
movzx eax byte ptr [esi+17h] +
push eax  +
movzx eax byte ptr [esi+16h] +
push eax  +
movzx eax byte ptr [esi+15h] +
push eax  +
movzx eax byte ptr [esi+14h] +
push eax  +
movzx eax byte ptr [esi+13h] +
push eax  +
movzx eax byte ptr [esi+12h] +
push eax  +
movzx eax byte ptr [esi+11h] +
push eax  +
movzx eax byte ptr [esi+10h] +
push eax  +
movzx eax word ptr [esi+0Eh] +
push eax  +
movzx eax word ptr [esi+0Ch] +
push eax  +
push dword ptr [esi+8]  +
lea eax [ebp+SubKey] +
push offset a08x04x04x02x02  +
push 40h  +
push eax  +
call sub_1003EE9  +
add esp 44h +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [ebp+var_120] +
push eax  +
push ebx  +
push 2001Fh  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+SubKey] +
push eax  +
push [ebp+phkResult]  +
call ds:RegCreateKeyExW  +
mov edi eax +
cmp edi ebx +
jnz loc_100499E  +
cmp [ebp+dwDisposition] 1 +
jz loc_10049A9  +
push esi  +
push [ebp+var_120]  +
call sub_10075FB  +
push [ebp+var_120]  +
mov edi eax +
call ds:RegCloseKey  +
mov [ebp+var_120] ebx +
cmp edi ebx +
jnz loc_1004F14  +
jmp loc_1004F1C  +
mov [ebp+var_120] ebx +
jmp loc_1004F14  +
mov eax [esi+20h] +
mov eax [eax+8] +
push 4  +
mov [ebp+cbData] eax +
lea eax [ebp+cbData] +
push eax  +
push 4  +
push ebx  +
push off_100A03C  +
push [ebp+var_120]  +
call ds:RegSetValueExW  +
mov edi eax +
cmp edi ebx +
jnz loc_1004E7A  +
mov edi [ebp+var_124] +
mov eax [edi+1Ch] +
cmp eax ebx +
jz loc_1004A3F  +
push eax  +
call ds:lstrlenW  +
push ebx  +
inc eax  +
cdq   +
push 2  +
push edx  +
push eax  +
call __allmul  +
mov ecx edx +
sar ecx 1Fh +
test edx edx +
jbe loc_1004A10  +
mov edi 216h +
jmp loc_1004E7A  +
push eax  +
mov [ebp+cbData] eax +
push dword ptr [edi+1Ch]  +
push 1  +
push ebx  +
push off_100A038  +
push [ebp+var_120]  +
call ds:RegSetValueExW  +
mov edi eax +
cmp edi ebx +
jnz loc_1004E7A  +
mov edi [ebp+var_124] +
push [ebp+var_13C]  +
push dword ptr [edi+18h]  +
push [ebp+var_138]  +
call sub_10043C1  +
mov esi eax +
cmp esi ebx +
jnz loc_1004A5C  +
mov esi [edi+18h] +
push esi  +
call ds:lstrlenW  +
push ebx  +
inc eax  +
cdq   +
push 2  +
push edx  +
push eax  +
call __allmul  +
mov ecx edx +
sar ecx 1Fh +
test edx edx +
jbe loc_1004A7F  +
mov edi 216h +
jmp loc_1004A9E  +
push eax  +
push esi  +
push 2  +
push ebx  +
push off_100A040  +
mov [ebp+cbData] eax +
push [ebp+var_120]  +
call ds:RegSetValueExW  +
mov edi eax +
cmp esi ebx +
jz loc_1004ABC  +
mov eax [ebp+var_124] +
cmp esi [eax+18h] +
jz loc_1004ABC  +
push esi  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp edi ebx +
jnz loc_1004E7A  +
mov eax [ebp+var_124] +
mov esi [eax+4] +
cmp esi ebx +
jz loc_1004E7A  +
mov eax [ebp+var_12C] +
cmp dword ptr [ebp+Data] eax +
ja loc_1004E77  +
push 80h  +
lea eax [ebp+var_104] +
push ebx  +
push eax  +
call memset  +
movzx eax byte ptr [esi+17h] +
push eax  +
movzx eax byte ptr [esi+16h] +
push eax  +
movzx eax byte ptr [esi+15h] +
push eax  +
movzx eax byte ptr [esi+14h] +
push eax  +
movzx eax byte ptr [esi+13h] +
push eax  +
movzx eax byte ptr [esi+12h] +
push eax  +
movzx eax byte ptr [esi+11h] +
push eax  +
movzx eax byte ptr [esi+10h] +
push eax  +
movzx eax word ptr [esi+0Eh] +
push eax  +
movzx eax word ptr [esi+0Ch] +
push eax  +
push dword ptr [esi+8]  +
lea eax [ebp+var_104] +
push offset a08x04x04x02x02  +
push 40h  +
push eax  +
call sub_1003EE9  +
add esp 44h +
lea eax [ebp+var_104] +
push eax  +
lea eax [ebp+SubKey] +
push eax  +
push [ebp+phkResult]  +
call sub_1007441  +
mov edi eax +
cmp edi 0B7h +
jnz loc_1004B70  +
mov esi [esi] +
xor edi edi +
jmp loc_1004ACD  +
cmp edi ebx +
jnz loc_1004E7A  +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [ebp+var_114] +
push eax  +
push ebx  +
push 2001Fh  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+var_104] +
push eax  +
push [ebp+var_120]  +
call ds:RegCreateKeyExW  +
mov edi eax +
cmp edi ebx +
jnz loc_1004BC2  +
cmp [ebp+dwDisposition] 1 +
jz loc_1004BC8  +
push [ebp+var_114]  +
mov edi 0B7h +
call ds:RegCloseKey  +
mov [ebp+var_114] ebx +
cmp edi ebx +
jnz loc_1004E7A  +
push 4  +
lea eax [esi+24h] +
push eax  +
push 4  +
push ebx  +
push off_100A044  +
push [ebp+var_114]  +
call ds:RegSetValueExW  +
mov edi eax +
cmp edi ebx +
jnz loc_1004E7A  +
push 4  +
lea eax [esi+28h] +
push eax  +
push 4  +
push ebx  +
push off_100A048  +
push [ebp+var_114]  +
call ds:RegSetValueExW  +
mov edi eax +
cmp edi ebx +
jnz loc_1004E7A  +
mov eax [esi+1Ch] +
mov eax [eax+8] +
push 4  +
mov [ebp+cbData] eax +
lea eax [ebp+cbData] +
push eax  +
push 4  +
push ebx  +
push off_100A04C  +
push [ebp+var_114]  +
call ds:RegSetValueExW  +
mov edi eax +
cmp edi ebx +
jnz loc_1004E7A  +
push 4  +
lea eax [ebp+Data] +
push eax  +
push 4  +
push ebx  +
push off_100A05C  +
push [ebp+var_114]  +
call ds:RegSetValueExW  +
mov edi eax +
cmp edi ebx +
jnz loc_1004E7A  +
mov eax [esi+20h] +
cmp eax ebx +
jz loc_1004CBE  +
mov eax [eax+0Ch] +
cmp eax 0FFFFFFFFh +
jz loc_1004CBE  +
mov ecx dword_100AAC8 +
lea ecx [ecx+eax*2] +
mov eax ecx +
lea edx [eax+2] +
mov di [eax] +
inc eax  +
inc eax  +
cmp di bx +
jnz loc_1004C93  +
sub eax edx +
sar eax 1 +
lea eax [eax+eax+2] +
push eax  +
push ecx  +
push 1  +
push ebx  +
push off_100A06C  +
push [ebp+var_114]  +
call ds:RegSetValueExW  +
mov edi eax +
cmp edi ebx +
jnz loc_1004E7A  +
mov [ebp+var_108] ebx +
mov eax [esi+4] +
jmp loc_1004CF6  +
inc [ebp+var_108]  +
add dword ptr [ebp+Data] 2 +
cmp [ebp+var_108] ebx +
jz loc_1004D4D  +
mov ecx dword ptr [ebp+Data] +
cmp ecx [ebp+var_12C] +
ja loc_1004D54  +
mov eax [eax] +
cmp eax ebx +
jnz loc_1004CD1  +
push 4  +
lea eax [ebp+Data] +
push eax  +
push 4  +
push ebx  +
push off_100A060  +
push [ebp+var_114]  +
call ds:RegSetValueExW  +
mov edi eax +
add dword ptr [ebp+Data] 2 +
cmp edi ebx +
jnz loc_1004E4E  +
mov eax [ebp+var_108] +
push 38h  +
pop ecx  +
mul  ecx +
mov [ebp+cbData] eax +
mov eax edx +
sar eax 1Fh +
test edx edx +
jbe loc_1004D59  +
mov edi 216h +
jmp loc_1004E4E  +
mov edi 216h +
jmp loc_1004D1A  +
push 0Dh  +
pop edi  +
jmp loc_1004D1A  +
cmp [ebp+lpMem] ebx +
jz loc_1004D75  +
push [ebp+lpMem]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
push [ebp+cbData]  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov ecx eax +
mov [ebp+lpMem] ecx +
cmp ecx ebx +
jnz loc_1004D9E  +
push 0Eh  +
pop edi  +
jmp loc_1004E4E  +
mov eax [esi+4] +
cmp eax ebx +
jz loc_1004E07  +
add ecx 8 +
mov edx [eax+20h] +
mov [ecx-8] edx +
mov edx [eax+8] +
mov edx [edx+8] +
mov [ecx-4] edx +
mov edx [eax+18h] +
mov [ecx] edx +
mov edx [eax+1Ch] +
mov [ecx+4] edx +
mov edx [eax+0Ch] +
mov edx [edx+8] +
mov [ecx+8] edx +
mov edx [eax+30h] +
mov [ecx+0Ch] edx +
mov edx [eax+28h] +
mov [ecx+10h] edx +
mov edx [eax+2Ch] +
mov [ecx+14h] edx +
mov edx [eax+10h] +
mov edx [edx+8] +
mov [ecx+18h] edx +
mov edx [eax+34h] +
mov [ecx+1Ch] edx +
mov edx [eax+38h] +
mov [ecx+20h] edx +
mov edx [eax+40h] +
mov [ecx+28h] edx +
mov edx [eax+3Ch] +
mov [ecx+24h] edx +
mov eax [eax] +
add ecx 38h +
cmp eax ebx +
jnz loc_1004DA8  +
push [ebp+cbData]  +
push [ebp+lpMem]  +
push 3  +
push ebx  +
push off_100A054  +
push [ebp+var_114]  +
call ds:RegSetValueExW  +
mov edi eax +
cmp edi ebx +
jnz loc_1004E4E  +
push 4  +
lea eax [ebp+var_108] +
push eax  +
push 4  +
push ebx  +
push off_100A050  +
push [ebp+var_114]  +
call ds:RegSetValueExW  +
mov edi eax +
cmp [ebp+var_114] ebx +
jz loc_1004E6B  +
cmp [ebp+var_114] 0FFFFFFFFh +
jz loc_1004E6B  +
push [ebp+var_114]  +
call ds:RegCloseKey  +
mov esi [esi] +
cmp edi ebx +
jz loc_1004ACD  +
jmp loc_1004E7A  +
push 0Dh  +
pop edi  +
cmp [ebp+var_120] ebx +
jz loc_1004F14  +
push [ebp+var_120]  +
call ds:RegCloseKey  +
cmp edi ebx +
jz loc_1004EAA  +
lea eax [ebp+SubKey] +
push eax  +
push [ebp+phkResult]  +
call sub_10079FB  +
jmp loc_1004F14  +
cmp dword_100A14C ebx +
jz loc_1004F39  +
mov al byte_100A150 +
cmp al 4 +
jnb loc_1004EC3  +
cmp al bl +
jnz loc_1004F39  +
mov ecx dword_100A13C +
mov edx 80000000h +
and ecx edx +
xor eax eax +
or eax ecx +
jz loc_1004F39  +
mov ecx dword_100A144 +
mov eax ecx +
and eax edx +
cmp ebx dword_100A140 +
jnz loc_1004F39  +
cmp eax ecx +
jnz loc_1004F39  +
mov eax [ebp+var_124] +
push ebx  +
push ebx  +
push dword ptr [eax+1Ch]  +
lea eax [ebp+SubKey] +
push eax  +
push offset dword_10012D8  +
push dword_100A124  +
push dword_100A120  +
call sub_1003727  +
cmp edi 0B7h +
jnz loc_1004F39  +
push [ebp+var_138]  +
lea eax [ebp+SubKey] +
push eax  +
push ebx  +
push 25Bh  +
call sub_1005BDE  +
add esp 10h +
xor edi edi +
call sub_1006050  +
mov eax [ebp+var_124] +
mov eax [eax] +
mov [ebp+var_124] eax +
jmp loc_1004F68  +
cmp [ebp+Type] 0Ah +
jnb loc_1004F70  +
push 3E8h  +
call ds:Sleep  +
inc [ebp+Type]  +
cmp edi ebx +
jz loc_10048BE  +
pop esi  +
cmp [ebp+phkResult] ebx +
jz loc_1004F8E  +
cmp [ebp+phkResult] 0FFFFFFFFh +
jz loc_1004F8E  +
push [ebp+phkResult]  +
call ds:RegCloseKey  +
cmp [ebp+lpMem] ebx +
jz loc_1004FAA  +
push [ebp+lpMem]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
call sub_1006E35  +
call sub_1006066  +
cmp edi ebx +
jnz loc_1004FCE  +
push [ebp+var_138]  +
push ebx  +
push 259h  +
call sub_1005BDE  +
add esp 0Ch +
jmp loc_1004FE4  +
push edi  +
push [ebp+var_138]  +
push 2  +
push 25Ah  +
call sub_1005BDE  +
add esp 10h +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_10055B7  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
xor ebx ebx +
push ebx  +
push ebx  +
push 1  +
push ebx  +
mov [ebp+lpMultiByteStr] ebx +
mov [ebp+lpMem] ebx +
mov [ebp+var_C] ebx +
call ds:HeapSetInformation  +
push ebx  +
push ebx  +
push 100h  +
call ds:SetThreadPreferredUILanguages  +
push offset dword_100A120  +
push offset unk_100A128  +
push offset loc_1003673  +
push offset dword_10012C4  +
call sub_10036CA  +
lea eax [ebp+pNumArgs] +
push eax  +
call ds:GetCommandLineW  +
push eax  +
call ds:CommandLineToArgvW  +
mov [ebp+hMem] eax +
cmp eax ebx +
jnz loc_1005063  +
call ds:GetLastError  +
jmp loc_10052D2  +
cmp [ebp+arg_0] 2 +
jl loc_10050B0  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
push dword ptr [esi+4]  +
mov edi ds:lstrlenA +
call edi  +
test eax eax +
jz loc_100509C  +
push dword ptr [esi+4]  +
call edi  +
cmp eax 2 +
jl loc_10050C4  +
mov eax [esi+4] +
mov cl [eax] +
cmp cl 2Dh +
jz loc_1005096  +
cmp cl 2Fh +
jnz loc_10050C4  +
cmp byte ptr [eax+1] 3Fh +
jnz loc_10050C4  +
push 148h  +
push 12Dh  +
call sub_1005D21  +
jmp loc_10052BA  +
push 148h  +
push 12Dh  +
call sub_1005D21  +
jmp loc_10052BC  +
cmp [ebp+arg_0] 4 +
lea eax [ebp+lpMultiByteStr] +
push eax  +
jl loc_100510B  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+lpMem] +
push eax  +
push esi  +
push [ebp+arg_0]  +
mov [ebp+lpMem] ebx +
mov [ebp+var_C] ebx +
mov [ebp+lpMultiByteStr] ebx +
call sub_1003895  +
mov [ebp+var_1] al +
cmp al bl +
jz loc_10052A9  +
push ebx  +
push [ebp+lpMultiByteStr]  +
push [ebp+var_C]  +
push [ebp+lpMem]  +
call ds:UpdatePerfNameFilesA  +
mov [ebp+var_C] eax +
jmp loc_10052A4  +
mov edi [ebp+hMem] +
lea eax [ebp+lpMem] +
push eax  +
push edi  +
push [ebp+pNumArgs]  +
call sub_1003C5F  +
cmp al bl +
jz loc_1005147  +
call LpAcquireInstallationMutex  +
mov [ebp+var_C] eax +
cmp eax ebx +
jnz loc_10052BA  +
push [ebp+lpMultiByteStr]  +
push [ebp+lpMem]  +
call sub_1004597  +
mov [ebp+var_C] eax +
call LpReleaseInstallationMutex  +
jmp loc_10052BA  +
lea eax [ebp+lpMem] +
push eax  +
push dword ptr [edi+4]  +
call sub_1003D1B  +
cmp al bl +
jz loc_1005169  +
push offset dword_1001648  +
push [ebp+lpMem]  +
call BackupPerfRegistryToFileW  +
jmp loc_10052B7  +
lea eax [ebp+lpMem] +
push eax  +
push dword ptr [edi+4]  +
call sub_1003DB1  +
mov [ebp+var_1] al +
cmp al bl +
jz loc_10051DA  +
mov esi [ebp+lpMem] +
push ebx  +
push esi  +
call RestorePerfRegistryFromFileW  +
mov [ebp+var_C] eax +
cmp eax ebx +
jnz loc_10051AC  +
cmp esi ebx +
jz loc_100519A  +
push esi  +
push ebx  +
push 25Ch  +
jmp loc_10051CD  +
push ebx  +
push 25Eh  +
call sub_1005BDE  +
pop ecx  +
pop ecx  +
jmp loc_10052BA  +
push eax  +
cmp esi ebx +
jz loc_10051C6  +
push esi  +
push 2  +
push 25Dh  +
call sub_1005BDE  +
add esp 10h +
jmp loc_10052BA  +
push 2  +
push 25Fh  +
call sub_1005BDE  +
add esp 0Ch +
jmp loc_10052BA  +
push dword ptr [esi+4]  +
call sub_1003852  +
mov esi ds:HeapFree +
mov edi ds:GetProcessHeap +
mov [ebp+lpMultiByteStr] eax +
cmp eax ebx +
jz loc_100521A  +
push eax  +
call sub_10037E7  +
mov [ebp+lpMem] eax +
cmp eax ebx +
jz loc_100521A  +
push eax  +
push ebx  +
call ds:SetServiceAsTrustedW  +
push [ebp+lpMem]  +
mov [ebp+var_C] eax +
push ebx  +
mov [ebp+var_1] 1 +
call edi  +
push eax  +
call esi  +
cmp [ebp+var_1] bl +
jnz loc_10052BA  +
lea eax [ebp+lpMultiByteStr] +
push eax  +
mov eax [ebp+arg_4] +
push dword ptr [eax+4]  +
call sub_1003961  +
mov [ebp+var_1] al +
cmp al bl +
jz loc_1005267  +
mov [ebp+lpMem] ebx +
cmp [ebp+lpMultiByteStr] ebx +
jz loc_100524C  +
push [ebp+lpMultiByteStr]  +
call sub_10037E7  +
mov [ebp+lpMem] eax +
push [ebp+lpMem]  +
call sub_1003F48  +
mov [ebp+var_C] eax +
cmp [ebp+lpMem] ebx +
jz loc_10052BA  +
push [ebp+lpMem]  +
push ebx  +
call edi  +
push eax  +
call esi  +
jmp loc_10052BA  +
lea eax [ebp+lpMultiByteStr] +
push eax  +
mov eax [ebp+arg_4] +
push dword ptr [eax+4]  +
mov [ebp+lpMultiByteStr] ebx +
call sub_1003BFC  +
cmp eax ebx +
jz loc_10052A4  +
push eax  +
call sub_10037E7  +
mov [ebp+lpMem] eax +
cmp eax ebx +
jz loc_10052A4  +
push [ebp+lpMultiByteStr]  +
push eax  +
push ebx  +
call sub_1004283  +
push [ebp+lpMem]  +
mov [ebp+var_C] eax +
push ebx  +
mov [ebp+var_1] 1 +
call edi  +
push eax  +
call esi  +
cmp [ebp+var_1] bl +
jnz loc_10052BA  +
call ds:GetCommandLineW  +
push ebx  +
push eax  +
call ds:LoadPerfCounterTextStringsW  +
mov [ebp+var_C] eax +
pop edi  +
pop esi  +
push [ebp+hMem]  +
call ds:LocalFree  +
push offset dword_100A120  +
call sub_10036F6  +
mov eax [ebp+var_C] +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_1005325  +
test eax eax +
jnz loc_100532A  +
mov ecx [esi] +
test ecx ecx +
jz loc_1005322  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_1005316  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_100A794 +
push offset dword_100A784  +
push dword_100A790  +
mov dword_100A784 eax +
push offset dword_100A774  +
push offset dword_100A778  +
push offset dword_100A770  +
call ds:__getmainargs  +
add esp 14h +
mov dword_100A780 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+ms_exc.disabled] ebx +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp+var_1C] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
cmp eax ebx +
jz loc_10053B2  +
cmp eax esi +
jnz loc_10053A5  +
xor esi esi +
inc esi  +
mov [ebp+var_1C] esi +
jmp loc_10053B5  +
push 3E8h  +
call ds:Sleep  +
jmp loc_100538C  +
xor esi esi +
inc esi  +
mov eax dword_100AAE8 +
cmp eax esi +
jnz loc_10053C8  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_1005403  +
mov eax dword_100AAE8 +
test eax eax +
jnz loc_10053FD  +
mov dword_100AAE8 esi +
push offset dword_10011BC  +
push offset dword_10011B0  +
call sub_1005309  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1005403  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
jmp loc_10054CD  +
mov dword_100A78C esi +
mov eax dword_100AAE8 +
cmp eax esi +
jnz loc_1005427  +
push offset dword_10011AC  +
push offset dword_10011A4  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_100AAE8 2 +
cmp [ebp+var_1C] ebx +
jnz loc_1005434  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_100AAF0 ebx +
jz loc_1005455  +
push offset dword_100AAF0  +
call sub_1005789  +
pop ecx  +
test eax eax +
jz loc_1005455  +
push ebx  +
push 2  +
push ebx  +
call dword_100AAF0  +
push dword_100A774  +
push dword_100A778  +
push dword_100A770  +
call sub_1004FFB  +
add esp 0Ch +
mov dword_100A788 eax +
cmp dword_100A77C ebx +
jnz loc_10054B3  +
push eax  +
call ds:exit  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-20h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-20h] +
mov dword_100A788 eax +
xor ebx ebx +
cmp dword_100A77C ebx +
jnz loc_10054B3  +
push eax  +
call ds:_exit  +
cmp dword_100A78C ebx +
jnz loc_10054C1  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_100A788 +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_10054EA  +
xor eax eax +
jmp loc_1005537  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_10054E6  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_1005524  +
cmp ecx 20Bh +
jnz loc_10054E6  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_10054E6  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_1005532  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_10054E6  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 1  +
mov dword_100A77C eax +
call sub_1005897  +
push eax  +
call ds:__set_app_type  +
or dword_100AAE0 0FFFFFFFFh +
or dword_100AAE4 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_100A79C +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_100A798 +
mov [eax] ecx +
call sub_1005829  +
cmp dword_100A028 0 +
jnz loc_1005590  +
push offset sub_1005829  +
call ds:__setusermatherr  +
pop ecx  +
call sub_1005811  +
xor eax eax +
retn   +
***
call sub_10058D6  +
jmp sub_100536A  +
***
cmp ecx dword_100A018 +
jnz loc_10055C2  +
retn 0  +
jmp loc_100596C  +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_10055B7  +
push offset dword_100A018  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
mov eax [esp+arg_4] +
mov ecx [esp+arg_C] +
or ecx eax +
mov ecx [esp+arg_8] +
jnz loc_1005679  +
mov eax [esp+arg_0] +
mul  ecx +
retn 10h  +
push ebx  +
mul  ecx +
mov ebx eax +
mov eax [esp+4+arg_0] +
mul  [esp+4+arg_C] +
add ebx eax +
mov eax [esp+4+arg_0] +
mul  ecx +
add edx ebx +
pop ebx  +
retn 10h  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_10056D6  +
cmp dword ptr [eax+10h] 3 +
jnz loc_10056D6  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_10056D0  +
cmp eax 19930521h +
jz loc_10056D0  +
cmp eax 19930522h +
jz loc_10056D0  +
cmp eax 1994000h +
jnz loc_10056D6  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset byte_1005698+1)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_1005716  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_1005712  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_100577D  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1005775  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_100577F  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_1005765  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_1005700  +
pop ecx  +
test eax eax +
jz loc_10057E6  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_1005740  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10057E6  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_10057EF  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100588A  +
cmp ecx 0FFFFFFFFh +
jz loc_100588A  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_1005883  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_1005883  +
cmp edx 10000000h +
jnb loc_1005883  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_1005883  +
jmp loc_100587E  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_10058CC  +
push eax  +
call sub_1005831  +
test eax eax +
jz loc_10058CC  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_10058C1  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_10058CC  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_100A018 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_1005908  +
test eax ebx +
jz loc_1005908  +
not eax  +
mov dword_100A01C eax +
jmp loc_1005963  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_100594F  +
test dword_100A018 ebx +
jnz loc_1005954  +
mov esi 0BB40E64Fh +
mov dword_100A018 esi +
not esi  +
mov dword_100A01C esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_100A8A0 eax +
mov dword_100A89C ecx +
mov dword_100A898 edx +
mov dword_100A894 ebx +
mov dword_100A890 esi +
mov dword_100A88C edi +
mov word_100A8B8 ss +
mov word_100A8AC cs +
mov word_100A888 ds +
mov word_100A884 es +
mov word_100A880 fs +
mov word_100A87C gs +
pushf   +
pop dword_100A8B0  +
mov eax [ebp+0] +
mov dword_100A8A4 eax +
mov eax [ebp+4] +
mov dword_100A8A8 eax +
lea eax [ebp+8] +
mov dword_100A8B4 eax +
mov eax [ebp-320h] +
mov dword_100A7F0 10001h +
mov eax dword_100A8A8 +
mov dword_100A7AC eax +
mov dword_100A7A0 0C0000409h +
mov dword_100A7A4 1 +
mov eax dword_100A018 +
mov [ebp-328h] eax +
mov eax dword_100A01C +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
movzx eax word ptr [esi] +
push edi  +
xor edx edx +
xor ecx ecx +
xor edi edi +
cmp dx ax +
jz loc_1005A97  +
movzx eax ax +
push 0Ah  +
pop edx  +
cmp dx ax +
jnz loc_1005A83  +
inc ecx  +
inc edi  +
movzx eax word ptr [esi+edi*2] +
xor edx edx +
inc ecx  +
cmp dx ax +
jnz loc_1005A7A  +
mov [ebp+arg_0] edi +
cmp ecx edi +
jnz loc_1005A9B  +
mov eax esi +
jmp loc_1005AE1  +
lea eax [ecx+ecx+2] +
push eax  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
test eax eax +
jz loc_1005AE1  +
xor ecx ecx +
xor edx edx +
test edi edi +
jbe loc_1005ADB  +
push 0Ah  +
pop edi  +
cmp di [esi+edx*2] +
jnz loc_1005ACC  +
push 0Dh  +
pop edi  +
mov [eax+ecx*2] di +
inc ecx  +
mov di [esi+edx*2] +
inc edx  +
mov [eax+ecx*2] di +
inc ecx  +
cmp edx [ebp+arg_0] +
jb loc_1005ABB  +
xor edx edx +
mov [eax+ecx*2] dx +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
push edi  +
push 0FFFFFFF5h  +
call ds:GetStdHandle  +
mov edi eax +
mov [ebp+hFile] edi +
cmp edi 0FFFFFFFFh +
jz loc_1005B44  +
push edi  +
call ds:GetFileType  +
and eax 0FFFF7FFFh +
cmp eax 2 +
jnz loc_1005B44  +
mov eax [ebp+lpBuffer] +
lea edx [eax+2] +
xor esi esi +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx si +
jnz loc_1005B21  +
push esi  +
sub eax edx +
lea ecx [ebp+NumberOfBytesWritten] +
push ecx  +
sar eax 1 +
push eax  +
push [ebp+lpBuffer]  +
push edi  +
call ds:WriteConsoleW  +
jmp loc_1005BD3  +
push ebx  +
push [ebp+lpBuffer]  +
call sub_1005A5F  +
mov ebx ds:GetProcessHeap +
xor esi esi +
mov [ebp+lpWideCharStr] eax +
cmp eax esi +
jz loc_1005BBB  +
mov edi ds:WideCharToMultiByte +
push esi  +
push esi  +
push esi  +
push esi  +
push 0FFFFFFFFh  +
push eax  +
push esi  +
push 1  +
call edi  +
mov [ebp+cchMultiByte] eax +
cmp eax esi +
jz loc_1005BBB  +
push eax  +
push esi  +
call ebx  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+lpMem] eax +
cmp eax esi +
jz loc_1005BBB  +
push esi  +
push esi  +
push [ebp+cchMultiByte]  +
push eax  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push esi  +
push 1  +
call edi  +
cmp eax esi +
jz loc_1005BAE  +
push esi  +
lea ecx [ebp+NumberOfBytesWritten] +
push ecx  +
dec eax  +
push eax  +
push [ebp+lpMem]  +
push [ebp+hFile]  +
call ds:WriteFile  +
push [ebp+lpMem]  +
push esi  +
call ebx  +
push eax  +
call ds:HeapFree  +
mov eax [ebp+lpWideCharStr] +
cmp [ebp+lpBuffer] eax +
jz loc_1005BD2  +
cmp eax esi +
jz loc_1005BD2  +
push eax  +
push esi  +
call ebx  +
push eax  +
call ds:HeapFree  +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 1420h +
call __alloca_probe  +
mov eax dword_100A018 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
xor esi esi +
push esi  +
call ds:GetModuleHandleW  +
mov [ebp+hInstance] eax +
mov [ebp+var_141C] esi +
cmp eax esi +
jz loc_1005D0F  +
cmp eax 0FFFFFFFFh +
jz loc_1005D0F  +
push ebx  +
push edi  +
mov ebx 208h +
push ebx  +
lea eax [ebp+Buffer] +
push esi  +
push eax  +
call memset  +
mov eax [ebp+arg_4] +
add esp 0Ch +
sub eax esi +
mov esi ds:LoadStringW +
mov edi 104h +
jz loc_1005C66  +
dec eax  +
jz loc_1005C5A  +
dec eax  +
jnz loc_1005C7E  +
push edi  +
lea eax [ebp+Buffer] +
push eax  +
push 16h  +
jmp loc_1005C70  +
push edi  +
lea eax [ebp+Buffer] +
push eax  +
push 15h  +
jmp loc_1005C70  +
push edi  +
lea eax [ebp+Buffer] +
push eax  +
push 14h  +
push [ebp+hInstance]  +
call esi  +
mov [ebp+var_141C] eax +
push ebx  +
xor ebx ebx +
lea eax [ebp+Source] +
push ebx  +
push eax  +
call memset  +
add esp 0Ch +
push edi  +
lea eax [ebp+Source] +
push eax  +
push [ebp+uID]  +
push [ebp+hInstance]  +
call esi  +
test eax eax +
jle loc_1005D0D  +
push 1000h  +
lea eax [ebp+var_1414] +
push ebx  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+arg_8] +
mov [ebp+Arguments] eax +
lea eax [ebp+Arguments] +
push eax  +
push 800h  +
lea eax [ebp+var_1414] +
push eax  +
push ebx  +
push ebx  +
lea eax [ebp+Source] +
push eax  +
push 400h  +
call ds:FormatMessageW  +
cmp [ebp+var_141C] ebx +
jle loc_1005D01  +
lea eax [ebp+Buffer] +
push eax  +
call sub_1005AEC  +
lea eax [ebp+var_1414] +
push eax  +
call sub_1005AEC  +
pop edi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_10055B7  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_100A018 +
xor eax ebp +
mov [ebp+var_4] eax +
push edi  +
push 0  +
call ds:GetModuleHandleW  +
mov edi eax +
test edi edi +
jz loc_1005D9B  +
cmp edi 0FFFFFFFFh +
jz loc_1005D9B  +
push esi  +
mov esi [ebp+arg_0] +
jmp loc_1005D95  +
push 208h  +
lea eax [ebp+Buffer] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
push 104h  +
lea eax [ebp+Buffer] +
push eax  +
push esi  +
push edi  +
call ds:LoadStringW  +
test eax eax +
jle loc_1005D94  +
push offset Buffer  +
call sub_1005AEC  +
lea eax [ebp+Buffer] +
push eax  +
call sub_1005AEC  +
inc esi  +
cmp esi [ebp+arg_4] +
jbe loc_1005D50  +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_10055B7  +
leave   +
retn 8  +
***
call __SEH_prolog4_GS  +
xor ebx ebx +
xor esi esi +
mov [ebp+var_40] ebx +
mov [ebp+pIdentifierAuthority.Value] bl +
mov [ebp+pIdentifierAuthority.Value+1] bl +
mov [ebp+pIdentifierAuthority.Value+2] bl +
mov [ebp+pIdentifierAuthority.Value+3] bl +
mov [ebp+pIdentifierAuthority.Value+4] bl +
mov [ebp+pIdentifierAuthority.Value+5] 5 +
mov [ebp+var_2C] bl +
mov [ebp-2Bh] bl +
mov [ebp+var_2A] bl +
mov [ebp+var_29] bl +
mov [ebp+var_28] bl +
mov [ebp+var_27] 1 +
mov [ebp+pSid] ebx +
mov [ebp+var_3C] ebx +
mov [ebp+var_30] ebx +
mov [ebp+hMem] ebx +
mov eax hHandle +
cmp eax ebx +
jnz loc_1005F91  +
push 60h  +
push ebx  +
lea eax [ebp+pListOfExplicitEntries] +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+pSid] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 12h  +
push 1  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
mov edi ds:AllocateAndInitializeSid +
call edi  +
test eax eax +
jnz loc_1005E42  +
call ds:GetLastError  +
mov esi eax +
jmp loc_1005FFD  +
mov [ebp+pListOfExplicitEntries.grfAccessPermissions] 1F0001h +
push 2  +
pop esi  +
mov [ebp+pListOfExplicitEntries.grfAccessMode] esi +
mov [ebp+pListOfExplicitEntries.grfInheritance] ebx +
mov [ebp+pListOfExplicitEntries.Trustee.TrusteeForm] ebx +
mov [ebp+pListOfExplicitEntries.Trustee.TrusteeType] 5 +
mov eax [ebp+pSid] +
mov [ebp+pListOfExplicitEntries.Trustee.ptstrName] eax +
lea eax [ebp+var_3C] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 220h  +
push 20h  +
push esi  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
call edi  +
test eax eax +
jz loc_1005E35  +
mov [ebp+var_98] 1F0001h +
mov [ebp+var_94] esi +
mov [ebp+var_90] ebx +
mov [ebp+var_84] ebx +
mov [ebp+var_80] esi +
mov eax [ebp+var_3C] +
mov [ebp+var_7C] eax +
lea eax [ebp+var_30] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 1  +
lea eax [ebp+var_2C] +
push eax  +
call edi  +
test eax eax +
jz loc_1005E35  +
mov [ebp+var_78] 120001h +
mov [ebp+var_74] esi +
mov [ebp+var_70] ebx +
mov [ebp+var_64] ebx +
mov [ebp+var_60] 5 +
mov eax [ebp+var_30] +
mov [ebp+var_5C] eax +
lea eax [ebp+hMem] +
push eax  +
push ebx  +
lea eax [ebp+pListOfExplicitEntries] +
push eax  +
push 3  +
call ds:SetEntriesInAclW  +
mov esi eax +
cmp esi ebx +
jnz loc_1005FFD  +
push 14h  +
push 40h  +
call ds:LocalAlloc  +
mov edi eax +
mov [ebp+var_40] edi +
cmp edi ebx +
jz loc_1005E35  +
push 1  +
push edi  +
call ds:InitializeSecurityDescriptor  +
test eax eax +
jz loc_1005E35  +
push ebx  +
push [ebp+hMem]  +
push 1  +
push edi  +
call ds:SetSecurityDescriptorDacl  +
test eax eax +
jz loc_1005E35  +
mov [ebp+MutexAttributes.nLength] 0Ch +
mov [ebp+MutexAttributes.bInheritHandle] 1 +
mov [ebp+MutexAttributes.lpSecurityDescriptor] edi +
mov [ebp+ms_exc.disabled] ebx +
push offset Name  +
push ebx  +
lea eax [ebp+MutexAttributes] +
push eax  +
call ds:CreateMutexW  +
mov hHandle eax +
cmp eax ebx +
jnz loc_1005F86  +
call ds:GetLastError  +
mov esi eax +
mov [ebp+var_44] esi +
mov eax hHandle +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
cmp eax ebx +
jz loc_1005FB0  +
mov [ebp+ms_exc.disabled] 1 +
push 927C0h  +
push eax  +
call ds:WaitForSingleObject  +
mov esi eax +
mov [ebp+var_44] esi +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
cmp esi ebx +
jz loc_1005FFB  +
cmp esi 80h +
jz loc_1005FFB  +
cmp esi 0FFFFFFFFh +
jnz loc_1005FFD  +
jmp loc_1005E35  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
mov [ebp-48h] eax +
xor eax eax +
inc eax  +
retn   +
mov esi [ebp-48h] +
mov esp [ebp-18h] +
mov [ebp-44h] esi +
mov dword ptr [ebp-4] 0FFFFFFFEh +
xor ebx ebx +
jmp loc_1005FFD  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
mov [ebp-4Ch] eax +
xor eax eax +
inc eax  +
retn   +
mov esi [ebp-4Ch] +
jmp loc_1005FD7  +
xor esi esi +
cmp [ebp+pSid] ebx +
jz loc_100600B  +
push [ebp+pSid]  +
call ds:FreeSid  +
cmp [ebp+var_3C] ebx +
jz loc_1006019  +
push [ebp+var_3C]  +
call ds:FreeSid  +
cmp [ebp+var_30] ebx +
jz loc_1006027  +
push [ebp+var_30]  +
call ds:FreeSid  +
cmp [ebp+hMem] ebx +
jz loc_1006035  +
push [ebp+hMem]  +
call ds:LocalFree  +
cmp [ebp+var_40] ebx +
jz loc_1006043  +
push [ebp+var_40]  +
call ds:LocalFree  +
mov eax esi +
call __SEH_epilog4_GS  +
retn   +
***
mov eax hHandle +
test eax eax +
jz locret_1006060  +
push eax  +
call ds:ReleaseMutex  +
retn   +
***
mov eax hHandle +
test eax eax +
jz locret_100607D  +
push eax  +
call ds:CloseHandle  +
and hHandle 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_8] +
cmp esi 7FFFFFFDh +
jbe loc_100609B  +
mov eax 216h +
jmp loc_10060DF  +
push edi  +
lea eax [esi+esi+4] +
push eax  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov edi [ebp+arg_0] +
mov [edi] eax +
test eax eax +
jnz loc_10060BE  +
push 0Eh  +
pop eax  +
jmp loc_10060DE  +
add esi esi +
push esi  +
push [ebp+arg_4]  +
push eax  +
call memcpy  +
mov eax [edi] +
xor ecx ecx +
mov [esi+eax] cx +
mov eax [edi] +
add esp 0Ch +
mov [eax+esi+2] cx +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
cmp ecx eax +
jz loc_100612E  +
cmp [ebp+arg_4] eax +
jz loc_100612E  +
cmp ecx [ebp+arg_4] +
jnb loc_100612E  +
jmp loc_1006125  +
cmp ecx [ebp+arg_4] +
jnb loc_100612E  +
movzx edx word ptr [ecx] +
cmp dx 20h +
jz loc_1006123  +
cmp dx 9 +
jz loc_1006123  +
cmp dx 0Dh +
jz loc_1006123  +
cmp dx 0Ah +
jnz loc_100612C  +
inc ecx  +
inc ecx  +
cmp [ecx] ax +
jnz loc_1006103  +
jmp loc_100612E  +
mov eax ecx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
cmp ecx eax +
jz loc_100619F  +
cmp [ebp+arg_4] eax +
jz loc_100619F  +
cmp ecx [ebp+arg_4] +
jnb loc_100619F  +
mov edx ecx +
cmp [ecx] ax +
jz loc_100619F  +
cmp edx [ebp+arg_4] +
jnb loc_100619F  +
movzx ecx word ptr [edx] +
cmp cx 20h +
jz loc_100619D  +
cmp cx 9 +
jz loc_100619D  +
cmp cx 0Dh +
jz loc_100619D  +
cmp cx 0Ah +
jz loc_100619D  +
cmp cx 2Fh +
jz loc_100619D  +
cmp cx 3Ch +
jz loc_100619D  +
cmp cx 3Eh +
jz loc_100619D  +
cmp cx 3Dh +
jz loc_100619D  +
cmp cx 22h +
jz loc_100619D  +
inc edx  +
inc edx  +
cmp [edx] ax +
jnz loc_1006156  +
jmp loc_100619F  +
mov eax edx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
cmp ecx eax +
jz loc_10061DB  +
cmp [ebp+arg_4] eax +
jz loc_10061DB  +
cmp ecx [ebp+arg_4] +
jnb loc_10061DB  +
jmp loc_10061D2  +
cmp ecx [ebp+arg_4] +
jnb loc_10061DB  +
mov dx [ecx] +
cmp dx [ebp+arg_8] +
jz loc_10061D9  +
inc ecx  +
inc ecx  +
cmp [ecx] ax +
jnz loc_10061C2  +
jmp loc_10061DB  +
mov eax ecx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_8] +
xor eax eax +
cmp esi eax +
jz loc_100634C  +
mov ecx [ebp+arg_0] +
mov [esi] eax +
cmp ecx eax +
jz loc_100634C  +
push edi  +
mov edi [ebp+arg_4] +
cmp edi eax +
jz loc_100634B  +
cmp ecx edi +
jnb loc_100634B  +
cmp [ecx] ax +
jz loc_100634B  +
push ebx  +
push 2  +
pop ebx  +
cmp ecx edi +
jnb loc_100634A  +
movzx edx word ptr [ecx] +
cmp dx 2Fh +
jnz loc_1006252  +
lea edx [ecx+2] +
cmp ecx edx +
jnb loc_100624B  +
cmp edx edi +
jnb loc_100624B  +
cmp word ptr [edx] 3Eh +
jz loc_100631E  +
mov ecx edx +
jmp loc_1006313  +
cmp dx 3Ch +
jnz loc_10062FF  +
lea edx [ecx+2] +
cmp ecx edx +
jnb loc_100632A  +
cmp edx edi +
jnb loc_100632A  +
movzx edx word ptr [edx] +
cmp dx 2Fh +
jz loc_1006326  +
cmp dx 21h +
jnz loc_10062D5  +
lea edx [ecx+6] +
cmp ecx edx +
jnb loc_100632A  +
cmp edx edi +
jnb loc_100632A  +
cmp word ptr [ecx+4] 2Dh +
jnz loc_100632A  +
cmp word ptr [edx] 2Dh +
jnz loc_100632A  +
lea edx [ecx+0Ch] +
cmp ecx edx +
jnb loc_100632A  +
cmp edx edi +
jnb loc_100632A  +
mov ecx edx +
jmp loc_10062CF  +
cmp word ptr [ecx-4] 2Dh +
jnz loc_10062CD  +
cmp word ptr [ecx-2] 2Dh +
jnz loc_10062CD  +
cmp word ptr [ecx] 3Eh +
jz loc_1006311  +
add ecx ebx +
cmp ecx edi +
jb loc_10062B9  +
jmp loc_1006311  +
cmp dx 3Fh +
jnz loc_100632A  +
lea edx [ecx+6] +
cmp ecx edx +
jnb loc_100632A  +
cmp edx edi +
jnb loc_100632A  +
mov ecx edx +
jmp loc_10062F9  +
cmp word ptr [ecx] 3Eh +
jnz loc_10062F7  +
cmp word ptr [ecx-2] 3Fh +
jz loc_1006311  +
add ecx ebx +
cmp ecx edi +
jb loc_10062EA  +
jmp loc_1006311  +
cmp dx 3Eh +
jz loc_1006332  +
cmp dx 3Dh +
jz loc_100633A  +
cmp dx 22h +
jz loc_1006342  +
add ecx ebx +
cmp [ecx] ax +
jnz loc_1006225  +
jmp loc_100634A  +
mov dword ptr [esi] 3 +
jmp loc_1006348  +
mov [esi] ebx +
jmp loc_1006348  +
mov dword ptr [esi] 1 +
jmp loc_1006348  +
mov dword ptr [esi] 4 +
jmp loc_1006348  +
mov dword ptr [esi] 6 +
jmp loc_1006348  +
mov dword ptr [esi] 5 +
mov eax ecx +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
xor ebx ebx +
cmp [ebp+lpString] ebx +
jz loc_1006390  +
cmp [ebp+arg_4] ebx +
jz loc_1006390  +
push [ebp+lpString]  +
call ds:lstrlenW  +
cmp eax [ebp+arg_8] +
jnz loc_1006390  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+lpString]  +
call ds:_wcsnicmp  +
add esp 0Ch +
mov ebx eax +
neg ebx  +
sbb bl bl +
inc bl  +
mov al bl +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_10063CF  +
mov eax [esi] +
test eax eax +
jz loc_10063BF  +
push eax  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
push 60Ch  +
push 0  +
push esi  +
call memset  +
add esp 0Ch +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
or [ebp+hObject] 0FFFFFFFFh +
push ebx  +
push esi  +
mov esi [ebp+nNumberOfBytesToRead] +
xor ebx ebx +
push edi  +
mov [ebp+var_4] ebx +
mov [ebp+cchMultiByte] ebx +
cmp esi ebx +
jz loc_10065E9  +
mov edi [ebp+lpMem] +
cmp edi ebx +
jz loc_10065E9  +
push 60Ch  +
push ebx  +
push esi  +
call memset  +
add esp 0Ch +
push ebx  +
push 80h  +
push 3  +
push ebx  +
push 1  +
push 80000000h  +
push edi  +
call ds:CreateFileW  +
mov [ebp+hObject] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1006450  +
call ds:GetLastError  +
push eax  +
push edi  +
push 2  +
push 68h  +
mov [ebp+var_4] eax +
call sub_1005BDE  +
add esp 10h +
jmp loc_1006606  +
lea ecx [ebp+cchMultiByte] +
push ecx  +
push eax  +
call ds:GetFileSize  +
mov [ebp+nNumberOfBytesToRead] eax +
mov ecx 4000000h +
cmp [ebp+cchMultiByte] ebx +
ja loc_10065D2  +
cmp eax ecx +
ja loc_10065D2  +
lea edi [eax+1FFFh] +
shr edi 0Dh +
shl edi 0Dh +
cmp edi eax +
jnb loc_1006486  +
mov edi eax +
push edi  +
push 8  +
call ds:GetProcessHeap  +
mov ebx ds:HeapAlloc +
push eax  +
call ebx  +
mov [esi] eax +
test eax eax +
jnz loc_10064BB  +
push 18Ah  +
push 2  +
push 66h  +
call sub_1005BDE  +
add esp 0Ch +
mov [ebp+var_4] 0Eh +
jmp loc_10065F0  +
push 0  +
lea ecx [ebp+cchMultiByte] +
push ecx  +
push [ebp+nNumberOfBytesToRead]  +
push eax  +
push [ebp+hObject]  +
call ds:ReadFile  +
test eax eax +
jnz loc_10064F0  +
call ds:GetLastError  +
push eax  +
push [ebp+lpMem]  +
mov [ebp+var_4] eax +
push 2  +
push 6Ah  +
call sub_1005BDE  +
add esp 10h +
jmp loc_10065F0  +
lea eax [ebp+i] +
push eax  +
push [ebp+cchMultiByte]  +
mov [ebp+i] 1000h +
push dword ptr [esi]  +
call ds:IsTextUnicode  +
test eax eax +
jnz loc_10065CD  +
mov eax [esi] +
mov [ebp+lpMem] eax +
push 2  +
mov eax edi +
pop ecx  +
mul  ecx +
mov edi eax +
mov eax edx +
sar eax 1Fh +
test edx edx +
jbe loc_1006541  +
and dword ptr [esi] 0 +
push 1A0h  +
push ecx  +
push 66h  +
call sub_1005BDE  +
add esp 0Ch +
mov [ebp+var_4] 216h +
jmp loc_10065B9  +
push edi  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ebx  +
mov [esi] eax +
test eax eax +
jnz loc_100656D  +
push 1A6h  +
push 2  +
push 66h  +
call sub_1005BDE  +
add esp 0Ch +
mov [ebp+var_4] 0Eh +
jmp loc_10065B9  +
shr edi 1 +
push edi  +
push eax  +
push [ebp+cchMultiByte]  +
push [ebp+lpMem]  +
push 0  +
push 0  +
call ds:MultiByteToWideChar  +
mov [ebp+cchMultiByte] eax +
cmp eax 459h +
jnz loc_1006594  +
mov [ebp+var_4] 0Dh +
jmp loc_10065A5  +
test eax eax +
jnz loc_10065B9  +
call ds:GetLastError  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_10065B9  +
push [ebp+var_4]  +
push 1B3h  +
push 2  +
push 6Bh  +
call sub_1005BDE  +
add esp 10h +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
jmp loc_10065F0  +
shr [ebp+cchMultiByte] 1 +
jmp loc_10065F0  +
push ecx  +
push edi  +
push 1  +
push 69h  +
call sub_1005BDE  +
add esp 10h +
mov [ebp+var_4] 216h +
jmp loc_10065F0  +
mov [ebp+var_4] 57h +
xor ebx ebx +
cmp [ebp+hObject] ebx +
jz loc_1006606  +
cmp [ebp+hObject] 0FFFFFFFFh +
jz loc_1006606  +
push [ebp+hObject]  +
call ds:CloseHandle  +
cmp [ebp+var_4] ebx +
jnz loc_100661E  +
mov eax [esi] +
mov ecx [ebp+cchMultiByte] +
lea ecx [eax+ecx*2] +
mov [esi+4] ecx +
mov [esi+0Ch] eax +
mov [esi+14h] eax +
jmp loc_1006624  +
push esi  +
call sub_100639C  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
xor edx edx +
mov [ebp+var_4] edx +
cmp eax edx +
jz loc_100668C  +
push ebx  +
mov ebx [ebp+arg_4] +
cmp ebx edx +
jz loc_100668B  +
mov [ebx] edx +
cmp [eax] edx +
jz loc_100668B  +
mov ecx [eax+8] +
cmp ecx edx +
jz loc_100668B  +
inc ecx  +
imul ecx ecx +
push esi  +
mov esi [eax+4] +
mov eax [ecx+eax] +
push edi  +
inc eax  +
push esi  +
inc eax  +
push eax  +
call sub_10060E9  +
mov edi eax +
test edi edi +
jz loc_1006689  +
push esi  +
push edi  +
call sub_1006137  +
test eax eax +
jz loc_1006689  +
sub eax edi +
sar eax 1 +
mov [ebp+var_4] edi +
mov [ebx] eax +
pop edi  +
pop esi  +
pop ebx  +
mov eax [ebp+var_4] +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
mov [ebp+var_4] ebx +
cmp esi ebx +
jz loc_10067F9  +
cmp [ebp+lpString] ebx +
jz loc_10067F9  +
mov eax [ebp+arg_8] +
cmp eax ebx +
jz loc_10067F9  +
push edi  +
push [ebp+lpString]  +
mov [eax] ebx +
call ds:lstrlenW  +
mov edi [esi+4] +
mov [ebp+arg_0] eax +
cmp [esi] ebx +
jz loc_10067F8  +
mov eax [esi+8] +
cmp eax ebx +
jz loc_10067F8  +
cmp [ebp+arg_0] ebx +
jz loc_10067F8  +
inc eax  +
imul eax eax +
mov esi [eax+esi] +
cmp esi ebx +
jz loc_10067F8  +
push edi  +
add esi 2 +
push esi  +
call sub_10060E9  +
cmp eax ebx +
jz loc_10067F8  +
cmp eax edi +
jnb loc_10067F8  +
push edi  +
push eax  +
call sub_1006137  +
cmp eax ebx +
jz loc_10067F8  +
cmp eax edi +
jnb loc_10067F8  +
jmp loc_1006738  +
xor ebx ebx +
push edi  +
push eax  +
call sub_10060E9  +
mov esi eax +
mov [ebp+var_8] esi +
cmp esi ebx +
jz loc_10067F8  +
cmp esi edi +
jnb loc_10067F8  +
push edi  +
push esi  +
call sub_1006137  +
mov [ebp+var_C] eax +
cmp eax ebx +
jz loc_10067F8  +
cmp eax edi +
jnb loc_10067F8  +
cmp esi eax +
jz loc_10067F8  +
push edi  +
push eax  +
call sub_10060E9  +
cmp eax ebx +
jz loc_10067F8  +
cmp eax edi +
jnb loc_10067F8  +
cmp word ptr [eax] 3Dh +
jnz loc_10067F8  +
push edi  +
add eax 2 +
push eax  +
call sub_10060E9  +
mov ebx eax +
test ebx ebx +
jz loc_10067F8  +
cmp ebx edi +
jnb loc_10067F8  +
cmp word ptr [ebx] 22h +
jnz loc_10067F8  +
push 22h  +
push edi  +
lea eax [ebx+2] +
push eax  +
call sub_10061A8  +
mov esi eax +
test esi esi +
jz loc_10067F8  +
cmp esi edi +
jnb loc_10067F8  +
mov eax [ebp+var_8] +
mov ecx [ebp+arg_0] +
lea edx [eax+ecx*2] +
cmp edx [ebp+var_C] +
jnz loc_10067DB  +
push ecx  +
push [ebp+lpString]  +
push eax  +
call ds:_wcsnicmp  +
add esp 0Ch +
test eax eax +
jz loc_10067E8  +
lea eax [esi+2] +
cmp eax edi +
jb loc_1006736  +
jmp loc_10067F8  +
mov eax [ebp+arg_8] +
sub esi ebx +
sar esi 1 +
dec esi  +
add ebx 2 +
mov [eax] esi +
mov [ebp+var_4] ebx +
pop edi  +
mov eax [ebp+var_4] +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+arg_0] +
push ebx  +
xor ebx ebx +
xor eax eax +
mov [ebp+var_1] 0 +
cmp ecx ebx +
jnz loc_1006825  +
mov [ebp+var_1] al +
jmp loc_10068AF  +
cmp [ecx] ebx +
jz loc_10068AF  +
mov edx [ecx+8] +
cmp edx ebx +
jbe loc_10068AF  +
push esi  +
lea esi [edx+1] +
imul esi esi +
add esi ecx +
push edi  +
mov edi [ecx+4] +
mov ecx [esi+4] +
cmp ecx ebx +
jnz loc_1006856  +
mov ecx [esi] +
cmp ecx ebx +
jz loc_1006851  +
lea eax [ecx+2] +
xor ebx ebx +
inc ebx  +
jmp loc_1006859  +
lea eax [ecx+2] +
test eax eax +
jz loc_10068AD  +
cmp eax edi +
jnb loc_10068AD  +
lea ecx [ebp+arg_0] +
push ecx  +
push edi  +
push eax  +
call sub_10061E4  +
test eax eax +
jz loc_10068AD  +
mov ecx [ebp+arg_0] +
cmp ecx 1 +
jnz loc_1006891  +
inc ebx  +
cmp ebx ecx +
jnz loc_10068A4  +
mov [esi-4] eax +
mov [esi] eax +
add eax 2 +
and dword ptr [esi+4] 0 +
mov [esi+8] eax +
mov [ebp+var_1] cl +
jmp loc_10068AD  +
cmp ecx 3 +
jz loc_10068A1  +
cmp ecx 2 +
jz loc_10068A1  +
test ecx ecx +
jz loc_10068AD  +
jmp loc_10068A4  +
dec ebx  +
js loc_10068AA  +
inc eax  +
inc eax  +
jnz loc_100685D  +
jmp loc_10068AD  +
mov [esi-8] eax +
pop edi  +
pop esi  +
mov al [ebp+var_1] +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
cmp esi ebx +
jz loc_1006933  +
cmp [esi] ebx +
jz loc_1006933  +
cmp [ebp+lpString] ebx +
jz loc_10068F4  +
lea eax [ebp+arg_0] +
push eax  +
push esi  +
mov [ebp+arg_0] ebx +
call sub_1006633  +
cmp eax ebx +
jz loc_1006925  +
push [ebp+arg_0]  +
push eax  +
push [ebp+lpString]  +
call sub_1006356  +
jmp loc_10068F6  +
mov al 1 +
cmp al bl +
jz loc_1006925  +
cmp [ebp+arg_8] ebx +
jz loc_1006931  +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+arg_8]  +
push esi  +
call sub_1006698  +
cmp eax ebx +
jz loc_1006925  +
cmp [ebp+arg_C] ebx +
jz loc_1006931  +
push [ebp+arg_0]  +
push eax  +
push [ebp+arg_C]  +
call sub_1006356  +
cmp al 1 +
jz loc_1006931  +
push esi  +
call sub_1006807  +
test al al +
jnz loc_10068D0  +
jmp loc_1006933  +
mov bl 1 +
pop esi  +
mov al bl +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push edi  +
mov edi [ebp+arg_0] +
mov [ebp+var_1] 0 +
test edi edi +
jz loc_10069E5  +
cmp dword ptr [edi] 0 +
jz loc_10069E5  +
mov eax [edi+8] +
cmp eax 7Fh +
jnb loc_10069E5  +
and [ebp+arg_0] 0 +
push ebx  +
mov ebx [edi+4] +
push esi  +
lea esi [eax+1] +
imul esi esi +
add esi edi +
test eax eax +
mov eax [esi] +
jz loc_1006986  +
test eax eax +
jz loc_10069E3  +
add eax 2 +
test eax eax +
jz loc_10069E3  +
cmp eax ebx +
jnb loc_10069E3  +
lea ecx [ebp+var_8] +
push ecx  +
push ebx  +
push eax  +
call sub_10061E4  +
test eax eax +
jz loc_10069E3  +
mov ecx [ebp+var_8] +
cmp ecx 1 +
jnz loc_10069C5  +
inc [ebp+arg_0]  +
cmp [ebp+arg_0] ecx +
jnz loc_10069DA  +
mov [esi+8] eax +
and dword ptr [esi+10h] 0 +
mov [esi+0Ch] eax +
add eax 2 +
mov [esi+14h] eax +
inc dword ptr [edi+8]  +
mov [ebp+var_1] cl +
jmp loc_10069E3  +
cmp ecx 3 +
jz loc_10069D5  +
cmp ecx 2 +
jz loc_10069D5  +
test ecx ecx +
jz loc_10069E3  +
jmp loc_10069DA  +
dec [ebp+arg_0]  +
js loc_10069E0  +
inc eax  +
inc eax  +
jnz loc_100698A  +
jmp loc_10069E3  +
mov [esi+4] eax +
pop esi  +
pop ebx  +
mov al [ebp+var_1] +
pop edi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov ecx [edx+8] +
xor al al +
test ecx ecx +
jbe loc_1006A09  +
dec ecx  +
mov [edx+8] ecx +
inc al  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
xor ebx ebx +
cmp [ebp+arg_0] ebx +
jz loc_1006A55  +
push esi  +
xor esi esi +
cmp [ebp+arg_C] ebx +
jbe loc_1006A54  +
push edi  +
mov edi [ebp+arg_8] +
push [ebp+arg_4]  +
push dword ptr [edi]  +
push [ebp+arg_0]  +
call ds:_wcsnicmp  +
add esp 0Ch +
test eax eax +
jz loc_1006A4B  +
inc esi  +
add edi 10h +
cmp esi [ebp+arg_C] +
jb loc_1006A2B  +
jmp loc_1006A53  +
shl esi 4 +
add esi [ebp+arg_8] +
mov ebx esi +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
xor ecx ecx +
push edi  +
mov edi [ebp+arg_C] +
xor edx edx +
xor eax eax +
inc ecx  +
mov [ebp+var_1] dl +
cmp edi edx +
jz loc_1006ACF  +
push esi  +
mov esi [ebp+arg_8] +
mov [edi] esi +
mov esi [ebp+arg_0] +
cmp esi edx +
jz loc_1006ACE  +
push ebx  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jbe loc_1006ACD  +
cmp word ptr [esi] 2Dh +
jnz loc_1006A98  +
or ecx 0FFFFFFFFh +
inc edx  +
cmp edx ebx +
jnb loc_1006AC4  +
jmp loc_1006AA1  +
mov esi [ebp+arg_0] +
movzx esi word ptr [esi+edx*2] +
cmp si 30h +
jb loc_1006AC0  +
cmp si 39h +
ja loc_1006AC0  +
imul eax eax +
movzx esi si +
inc edx  +
lea eax [eax+esi-30h] +
cmp edx ebx +
jb loc_1006A9E  +
cmp edx ebx +
jb loc_1006ACD  +
imul ecx eax +
mov [edi] ecx +
mov [ebp+var_1] 1 +
pop ebx  +
pop esi  +
mov al [ebp+var_1] +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
cmp edx eax +
jnz loc_1006AEF  +
push 0Dh  +
pop eax  +
jmp loc_1006B25  +
mov ecx [ebp+arg_0] +
push esi  +
lea esi [ecx-30h] +
mov [edx] al +
cmp si 9 +
ja loc_1006B03  +
sub cl 30h +
jmp loc_1006B1D  +
lea esi [ecx-41h] +
cmp si 5 +
ja loc_1006B11  +
sub cl 37h +
jmp loc_1006B1D  +
lea esi [ecx-61h] +
cmp si 5 +
ja loc_1006B21  +
sub cl 57h +
mov [edx] cl +
jmp loc_1006B24  +
push 0Dh  +
pop eax  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push edi  +
mov edi [ebp+arg_8] +
xor ecx ecx +
cmp edi ecx +
jnz loc_1006B47  +
push 0Dh  +
pop ecx  +
jmp loc_1006D36  +
xor eax eax +
stos   +
stos   +
stos   +
stos   +
mov edi [ebp+arg_0] +
push ebx  +
push esi  +
cmp edi ecx +
jz loc_1006D28  +
cmp [ebp+arg_4] 24h +
jz loc_1006B6A  +
cmp [ebp+arg_4] 26h +
jnz loc_1006D28  +
xor esi esi +
cmp word ptr [edi] 7Bh +
jnz loc_1006B7D  +
cmp [ebp+arg_4] 26h +
jnz loc_1006D28  +
inc esi  +
mov [ebp+var_4] ecx +
lea ebx [edi+esi*2] +
cmp [ebp+var_4] 8 +
jnb loc_1006BBB  +
lea eax [ebp+arg_0+3] +
push eax  +
movzx eax word ptr [ebx] +
push eax  +
call sub_1006ADC  +
mov ecx eax +
mov [ebp+var_8] ecx +
test ecx ecx +
jnz loc_1006BB2  +
mov eax [ebp+arg_8] +
mov ecx [eax] +
movzx edx byte ptr [ebp+arg_0+3] +
shl ecx 4 +
add ecx edx +
mov [eax] ecx +
mov ecx [ebp+var_8] +
inc [ebp+var_4]  +
inc ebx  +
inc ebx  +
test ecx ecx +
jz loc_1006B83  +
test ecx ecx +
jnz loc_1006D2B  +
add esi 8 +
cmp word ptr [edi+esi*2] 2Dh +
jnz loc_1006D28  +
inc esi  +
and [ebp+var_4] ecx +
lea ebx [edi+esi*2] +
cmp [ebp+var_4] 4 +
jnb loc_1006C17  +
lea eax [ebp+arg_0+3] +
push eax  +
movzx eax word ptr [ebx] +
push eax  +
call sub_1006ADC  +
mov ecx eax +
mov [ebp+var_8] ecx +
test ecx ecx +
jnz loc_1006C0E  +
mov eax [ebp+arg_8] +
mov cx [eax+4] +
movzx dx byte ptr [ebp+arg_0+3] +
shl cx 4 +
add cx dx +
mov [eax+4] cx +
mov ecx [ebp+var_8] +
inc [ebp+var_4]  +
inc ebx  +
inc ebx  +
test ecx ecx +
jz loc_1006BD8  +
test ecx ecx +
jnz loc_1006D2B  +
add esi 4 +
cmp word ptr [edi+esi*2] 2Dh +
jnz loc_1006D28  +
inc esi  +
and [ebp+var_4] ecx +
lea ebx [edi+esi*2] +
cmp [ebp+var_4] 4 +
jnb loc_1006C73  +
lea eax [ebp+arg_0+3] +
push eax  +
movzx eax word ptr [ebx] +
push eax  +
call sub_1006ADC  +
mov ecx eax +
mov [ebp+var_8] ecx +
test ecx ecx +
jnz loc_1006C6A  +
mov eax [ebp+arg_8] +
mov cx [eax+6] +
movzx dx byte ptr [ebp+arg_0+3] +
shl cx 4 +
add cx dx +
mov [eax+6] cx +
mov ecx [ebp+var_8] +
inc [ebp+var_4]  +
inc ebx  +
inc ebx  +
test ecx ecx +
jz loc_1006C34  +
test ecx ecx +
jnz loc_1006D2B  +
add esi 4 +
cmp word ptr [edi+esi*2] 2Dh +
jnz loc_1006D28  +
inc esi  +
and [ebp+var_4] ecx +
lea ebx [edi+esi*2] +
cmp [ebp+var_4] 4 +
jnb loc_1006CC8  +
lea eax [ebp+arg_0+3] +
push eax  +
movzx eax word ptr [ebx] +
push eax  +
call sub_1006ADC  +
mov ecx eax +
test ecx ecx +
jnz loc_1006CBF  +
mov eax [ebp+var_4] +
mov edx [ebp+arg_8] +
shr eax 1 +
lea eax [eax+edx+8] +
mov dl [eax] +
shl dl 4 +
add dl byte ptr [ebp+arg_0+3] +
mov [eax] dl +
inc [ebp+var_4]  +
inc ebx  +
inc ebx  +
test ecx ecx +
jz loc_1006C90  +
test ecx ecx +
jnz loc_1006D2B  +
add esi 4 +
cmp word ptr [edi+esi*2] 2Dh +
jnz loc_1006D28  +
inc esi  +
and [ebp+var_4] ecx +
lea ebx [edi+esi*2] +
cmp [ebp+var_4] 0Ch +
jnb loc_1006D15  +
lea eax [ebp+arg_0+3] +
push eax  +
movzx eax word ptr [ebx] +
push eax  +
call sub_1006ADC  +
mov ecx eax +
test ecx ecx +
jnz loc_1006D0C  +
mov eax [ebp+var_4] +
mov edx [ebp+arg_8] +
shr eax 1 +
lea eax [eax+edx+0Ah] +
mov dl [eax] +
shl dl 4 +
add dl byte ptr [ebp+arg_0+3] +
mov [eax] dl +
inc [ebp+var_4]  +
inc ebx  +
inc ebx  +
test ecx ecx +
jz loc_1006CDD  +
test ecx ecx +
jnz loc_1006D2B  +
add esi 0Ch +
cmp esi [ebp+arg_4] +
jnb loc_1006D34  +
cmp word ptr [edi+esi*2] 7Dh +
jz loc_1006D34  +
push 0Dh  +
pop ecx  +
mov edi [ebp+arg_8] +
xor eax eax +
stos   +
stos   +
stos   +
stos   +
pop esi  +
pop ebx  +
mov eax ecx +
pop edi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
lea eax [ebp+arg_0] +
push eax  +
push off_100A0C8  +
push [ebp+arg_0]  +
call sub_1006698  +
mov ebx eax +
test ebx ebx +
jz loc_1006DAF  +
push esi  +
mov esi [ebp+arg_0] +
push 5  +
push offset off_1003280  +
push esi  +
push ebx  +
call sub_1006A12  +
test eax eax +
jnz loc_1006D9F  +
push edi  +
lea esi [ebx+esi*2] +
movzx edi word ptr [esi] +
mov [esi] ax +
push off_100A090  +
push off_100A0C8  +
push ebx  +
push 1  +
push 70h  +
call sub_1005BDE  +
add esp 14h +
mov [esi] di +
pop edi  +
jmp loc_1006DAE  +
mov edx [eax+8] +
mov ecx [ebp+arg_4] +
or [ecx+18h] edx +
mov eax [eax+0Ch] +
or [ecx+1Ch] eax +
pop esi  +
xor eax eax +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
mov eax dword_100A018 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
lea ecx [ebp+var_30] +
push ecx  +
push off_100A0A4  +
push eax  +
call sub_1006698  +
test eax eax +
jnz loc_1006DEC  +
fldz   +
jmp loc_1006E1D  +
mov ecx [ebp+var_30] +
cmp ecx 14h +
jb loc_1006DF9  +
push 7Ah  +
pop eax  +
jmp loc_1006E21  +
push esi  +
lea esi [ecx+ecx] +
push esi  +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
call memcpy  +
xor eax eax +
mov word ptr [ebp+esi+var_2C] ax +
lea eax [ebp+var_2C] +
push eax  +
call ds:_wtof  +
add esp 10h +
pop esi  +
fstp  qword ptr [edi] +
xor eax eax +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_10055B7  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
push edi  +
mov edi ds:GetProcessHeap +
call edi  +
mov ecx dword_100AAC0 +
mov esi ds:HeapFree +
mov [ebp+var_C] eax +
mov eax dword_100AAC4 +
xor ebx ebx +
mov [ebp+var_10] ecx +
mov [ebp+var_14] eax +
cmp ecx ebx +
jz loc_1006F49  +
jmp loc_1006E71  +
mov ecx [ebp+var_10] +
mov eax [ecx] +
mov [ebp+var_20] eax +
mov eax [ecx+4] +
mov [ebp+var_4] eax +
cmp eax ebx +
jz loc_1006F34  +
jmp loc_1006E89  +
mov eax [ebp+var_4] +
mov ecx [eax] +
mov [ebp+var_1C] ecx +
mov ecx [eax+4] +
mov [ebp+var_8] ecx +
cmp ecx ebx +
jz loc_1006EE9  +
jmp loc_1006E9D  +
mov ecx [ebp+var_8] +
mov eax [ecx] +
mov [ebp+var_18] eax +
mov eax [ecx+44h] +
cmp eax ebx +
jz loc_1006EB3  +
push eax  +
push ebx  +
call edi  +
push eax  +
call esi  +
mov ecx [ebp+var_8] +
mov eax [ecx+48h] +
cmp eax ebx +
jz loc_1006EC4  +
push eax  +
push ebx  +
call edi  +
push eax  +
call esi  +
mov ecx [ebp+var_8] +
mov eax [ecx+4Ch] +
cmp eax ebx +
jz loc_1006ED5  +
push eax  +
push ebx  +
call edi  +
push eax  +
call esi  +
mov ecx [ebp+var_8] +
push ecx  +
push ebx  +
push [ebp+var_C]  +
call esi  +
mov eax [ebp+var_18] +
mov [ebp+var_8] eax +
cmp eax ebx +
jnz loc_1006E9A  +
mov eax [ebp+var_4] +
mov ecx [eax+2Ch] +
cmp ecx ebx +
jz loc_1006EFA  +
push ecx  +
push ebx  +
call edi  +
push eax  +
call esi  +
mov eax [ebp+var_4] +
mov ecx [eax+30h] +
cmp ecx ebx +
jz loc_1006F0B  +
push ecx  +
push ebx  +
call edi  +
push eax  +
call esi  +
mov eax [ebp+var_4] +
mov ecx [eax+34h] +
cmp ecx ebx +
jz loc_1006F1C  +
push ecx  +
push ebx  +
call edi  +
push eax  +
call esi  +
mov eax [ebp+var_4] +
push eax  +
push ebx  +
push [ebp+var_C]  +
call esi  +
mov eax [ebp+var_1C] +
mov [ebp+var_4] eax +
cmp eax ebx +
jnz loc_1006E86  +
mov ecx [ebp+var_10] +
push ecx  +
push ebx  +
push [ebp+var_C]  +
call esi  +
mov eax [ebp+var_20] +
mov [ebp+var_10] eax +
cmp eax ebx +
jnz loc_1006E6E  +
cmp [ebp+var_14] ebx +
jz loc_1006F61  +
mov eax [ebp+var_14] +
mov edi [eax] +
push eax  +
push ebx  +
push [ebp+var_C]  +
call esi  +
mov [ebp+var_14] edi +
cmp edi ebx +
jnz loc_1006F4E  +
mov eax dword_100AAC8 +
cmp eax ebx +
jz loc_1006F71  +
push eax  +
push ebx  +
push [ebp+var_C]  +
call esi  +
fldz   +
pop edi  +
xor eax eax +
fstp  dbl_100AAD8 +
inc eax  +
pop esi  +
mov dword_100AAC0 ebx +
mov dword_100AAC4 ebx +
mov dword_100AAC8 ebx +
mov dword_100AACC ebx +
mov dword_100AAD0 ebx +
mov byte_100AAD4 bl +
mov dword_100A114 eax +
mov dword_100A118 eax +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
cmp ecx 0FFFFFFFFh +
jz loc_1006FD6  +
mov eax [ebp+arg_0] +
mov eax [eax+4] +
jmp loc_1006FD2  +
cmp [eax+20h] ecx +
jz loc_1006FD6  +
mov eax [eax] +
test eax eax +
jnz loc_1006FCB  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
and [ebp+var_C] 0 +
push ebx  +
mov ebx dword_100AAC0 +
push esi  +
push edi  +
mov eax ebx +
jmp loc_100701F  +
mov edx [eax] +
mov [ebp+var_4] edx +
test edx edx +
jz loc_100701C  +
add eax 8 +
mov [ebp+var_8] eax +
mov esi [ebp+var_8] +
push 4  +
pop ecx  +
lea edi [edx+8] +
xor eax eax +
cmps   +
jz loc_1007032  +
mov edx [edx] +
test edx edx +
jnz loc_1007007  +
mov eax [ebp+var_4] +
test eax eax +
jnz loc_1006FF8  +
mov [ebp+var_8] ebx +
test ebx ebx +
jz loc_10070A1  +
mov eax [ebp+var_8] +
mov ebx [eax+4] +
jmp loc_100708E  +
push 0Dh  +
pop edi  +
push 2  +
push 73h  +
call sub_1005BDE  +
pop ecx  +
pop ecx  +
jmp loc_1007435  +
mov eax [ebx] +
mov [ebp+var_10] eax +
jmp loc_100705D  +
push 4  +
pop ecx  +
lea edi [eax+8] +
lea esi [ebx+8] +
xor edx edx +
cmps   +
jz loc_10070C0  +
mov eax [eax] +
test eax eax +
jnz loc_100704C  +
mov eax [ebp+var_8] +
mov edx [eax] +
jmp loc_1007087  +
mov eax [edx+4] +
jmp loc_1007081  +
push 4  +
lea esi [ebx+8] +
pop ecx  +
lea edi [eax+8] +
xor ebx ebx +
cmps   +
jz loc_10070C0  +
mov eax [eax] +
mov ebx [ebp+var_4] +
test eax eax +
jnz loc_100706D  +
mov edx [edx] +
test edx edx +
jnz loc_1007068  +
mov ebx [ebp+var_10] +
mov [ebp+var_4] ebx +
test ebx ebx +
jnz loc_1007045  +
mov eax [ebp+var_8] +
mov eax [eax] +
mov [ebp+var_8] eax +
test eax eax +
jnz loc_100702A  +
mov ecx dword_100AAC0 +
mov edi [ebp+var_C] +
push 2  +
mov [ebp+var_8] ecx +
pop ebx  +
test ecx ecx +
jz loc_1007435  +
mov eax [ecx+4] +
jmp loc_100741D  +
push 2  +
push 74h  +
mov [ebp+var_C] 0Dh +
call sub_1005BDE  +
mov edi [ebp+var_C] +
pop ecx  +
pop ecx  +
jmp loc_1007435  +
test eax eax +
jz loc_1007428  +
mov esi [eax+4] +
jmp loc_1007413  +
test esi esi +
jz loc_100741B  +
mov edx [esi+8] +
mov eax [edx+8] +
mov ecx 20C20400h +
cmp eax ecx +
ja loc_1007238  +
jz loc_10071FF  +
cmp eax 650500h +
jz loc_1007144  +
cmp eax 20020400h +
jz loc_10071CA  +
cmp eax 20020500h +
jz loc_100716D  +
cmp eax 20470500h +
jz loc_100716D  +
cmp eax 20570500h +
jz loc_100716D  +
cmp eax 20610500h +
jz loc_1007144  +
cmp eax 20670500h +
jnz loc_1007285  +
push dword ptr [esi+38h]  +
or dword ptr [esi+34h] 0FFFFFFFFh +
push [ebp+var_4]  +
or dword ptr [esi+40h] 0FFFFFFFFh +
call sub_1006FB4  +
test eax eax +
jnz loc_10072B6  +
push dword ptr [edx+4]  +
push dword ptr [esi+20h]  +
push off_100A0EC  +
jmp loc_1007194  +
push dword ptr [esi+34h]  +
or dword ptr [esi+38h] 0FFFFFFFFh +
push [ebp+var_4]  +
or dword ptr [esi+3Ch] 0FFFFFFFFh +
or dword ptr [esi+40h] 0FFFFFFFFh +
call sub_1006FB4  +
test eax eax +
jnz loc_10071A4  +
push dword ptr [edx+4]  +
push dword ptr [esi+20h]  +
push off_100A0DC  +
push ebx  +
push 75h  +
call sub_1005BDE  +
add esp 14h +
jmp loc_1007408  +
mov eax [eax+8] +
cmp dword ptr [eax+8] 40030500h +
jz loc_100740B  +
push dword ptr [eax+4]  +
push offset aPerf_large_raw  +
push dword ptr [esi+20h]  +
push off_100A0DC  +
jmp loc_10073FD  +
push dword ptr [esi+34h]  +
or dword ptr [esi+38h] 0FFFFFFFFh +
push [ebp+var_4]  +
or dword ptr [esi+3Ch] 0FFFFFFFFh +
or dword ptr [esi+40h] 0FFFFFFFFh +
call sub_1006FB4  +
test eax eax +
jz loc_1007188  +
mov eax [eax+8] +
cmp dword ptr [eax+8] 40030403h +
jz loc_100740B  +
push dword ptr [eax+4]  +
push offset aPerf_raw_base  +
jmp loc_10071BC  +
push dword ptr [esi+34h]  +
or dword ptr [esi+38h] 0FFFFFFFFh +
push [ebp+var_4]  +
or dword ptr [esi+3Ch] 0FFFFFFFFh +
or dword ptr [esi+40h] 0FFFFFFFFh +
call sub_1006FB4  +
test eax eax +
jz loc_1007188  +
mov eax [eax+8] +
cmp dword ptr [eax+8] 40030401h +
jz loc_100740B  +
push dword ptr [eax+4]  +
push offset aPerf_sample_ba  +
jmp loc_10071BC  +
cmp eax 22410500h +
jz loc_10073C0  +
cmp eax 22510500h +
jz loc_10073C0  +
cmp eax 23410500h +
jz loc_1007342  +
cmp eax 23510500h +
jz loc_10073C0  +
cmp eax 30020400h +
jz loc_100731E  +
cmp eax 30240500h +
jz loc_1007144  +
cmp eax 40020500h +
jz loc_100731E  +
or eax 0FFFFFFFFh +
mov [esi+34h] eax +
mov [esi+38h] eax +
mov [esi+3Ch] eax +
mov [esi+40h] eax +
jmp loc_100740B  +
mov eax [eax+8] +
cmp dword ptr [eax+8] 40030402h +
jz loc_100740B  +
push dword ptr [eax+4]  +
push offset aPerf_average_b  +
jmp loc_10071BC  +
mov eax [eax+8] +
cmp dword ptr [eax+8] 10100h +
jz loc_10072D8  +
push dword ptr [eax+4]  +
push offset aPerf_counter_l  +
push dword ptr [esi+20h]  +
push off_100A0EC  +
jmp loc_10073FD  +
push dword ptr [esi+3Ch]  +
push [ebp+var_4]  +
call sub_1006FB4  +
test eax eax +
jnz loc_10072F8  +
push dword ptr [edx+4]  +
push dword ptr [esi+20h]  +
push off_100A0F0  +
jmp loc_1007194  +
mov eax [eax+8] +
cmp dword ptr [eax+8] 10100h +
jz loc_100740B  +
push dword ptr [eax+4]  +
push offset aPerf_counter_l  +
push dword ptr [esi+20h]  +
push off_100A0F0  +
jmp loc_10073FD  +
push dword ptr [esi+34h]  +
or dword ptr [esi+38h] 0FFFFFFFFh +
push [ebp+var_4]  +
or dword ptr [esi+3Ch] 0FFFFFFFFh +
or dword ptr [esi+40h] 0FFFFFFFFh +
call sub_1006FB4  +
test eax eax +
jnz loc_1007299  +
jmp loc_1007188  +
push dword ptr [esi+34h]  +
or dword ptr [esi+38h] 0FFFFFFFFh +
push [ebp+var_4]  +
or dword ptr [esi+3Ch] 0FFFFFFFFh +
call sub_1006FB4  +
test eax eax +
jnz loc_1007372  +
push dword ptr [edx+4]  +
push dword ptr [esi+20h]  +
push off_100A0DC  +
push ebx  +
push 75h  +
call sub_1005BDE  +
add esp 14h +
jmp loc_100739A  +
mov eax [eax+8] +
cmp dword ptr [eax+8] 42030500h +
jz loc_100739D  +
push dword ptr [eax+4]  +
push offset aPerf_counter_m  +
push dword ptr [esi+20h]  +
push off_100A0DC  +
push ebx  +
push 76h  +
call sub_1005BDE  +
add esp 18h +
push 0Dh  +
pop edi  +
push dword ptr [esi+40h]  +
push [ebp+var_4]  +
call sub_1006FB4  +
test eax eax +
jnz loc_10073E0  +
mov eax [esi+8] +
push dword ptr [eax+4]  +
push dword ptr [esi+20h]  +
push off_100A0F4  +
jmp loc_1007194  +
push dword ptr [esi+40h]  +
or dword ptr [esi+34h] 0FFFFFFFFh +
push [ebp+var_4]  +
or dword ptr [esi+38h] 0FFFFFFFFh +
or dword ptr [esi+3Ch] 0FFFFFFFFh +
call sub_1006FB4  +
test eax eax +
jnz loc_10073E0  +
push dword ptr [edx+4]  +
jmp loc_10073B2  +
mov eax [eax+8] +
cmp dword ptr [eax+8] 10000h +
jz loc_100740B  +
push dword ptr [eax+4]  +
push offset aPerf_counter_r  +
push dword ptr [esi+20h]  +
push off_100A0F4  +
push ebx  +
push 76h  +
call sub_1005BDE  +
add esp 18h +
push 0Dh  +
pop edi  +
mov esi [esi] +
mov ecx [ebp+var_8] +
mov eax [ebp+var_4] +
test edi edi +
jz loc_10070EA  +
mov eax [eax] +
mov [ebp+var_4] eax +
test edi edi +
jz loc_10070DA  +
mov ecx [ecx] +
mov [ebp+var_8] ecx +
test edi edi +
jz loc_10070B0  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 438h +
mov eax dword_100A018 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx ds:RegEnumKeyExW +
mov [ebp+hKey] eax +
mov eax [ebp+arg_4] +
push esi  +
push edi  +
mov [ebp+var_434] eax +
mov eax [ebp+arg_8] +
xor edi edi +
mov [ebp+var_438] eax +
mov [ebp+dwIndex] edi +
push 20Ah  +
lea eax [ebp+SubKey] +
push edi  +
push eax  +
mov [ebp+cbName] 104h +
call memset  +
add esp 0Ch +
push edi  +
push edi  +
push edi  +
push edi  +
lea eax [ebp+cbName] +
push eax  +
lea eax [ebp+SubKey] +
push eax  +
push [ebp+dwIndex]  +
push [ebp+hKey]  +
call ebx  +
mov esi eax +
cmp esi edi +
jnz loc_100759A  +
lea eax [ebp+phkResult] +
push eax  +
push 20019h  +
push edi  +
lea eax [ebp+SubKey] +
push eax  +
push [ebp+hKey]  +
call ds:RegOpenKeyExW  +
cmp eax edi +
jnz loc_1007598  +
mov [ebp+var_428] edi +
push 20Ah  +
lea eax [ebp+Name] +
push edi  +
push eax  +
mov [ebp+cbName] 104h +
call memset  +
add esp 0Ch +
push edi  +
push edi  +
push edi  +
push edi  +
lea eax [ebp+cbName] +
push eax  +
lea eax [ebp+Name] +
push eax  +
push [ebp+var_428]  +
push [ebp+phkResult]  +
call ebx  +
mov esi eax +
cmp esi edi +
jnz loc_1007557  +
push [ebp+var_438]  +
lea eax [ebp+Name] +
push eax  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1007563  +
inc [ebp+var_428]  +
cmp esi edi +
jz loc_10074F9  +
jmp loc_100758A  +
push [ebp+var_434]  +
lea eax [ebp+SubKey] +
push eax  +
call ds:_wcsicmp  +
mov esi eax +
neg esi  +
sbb esi esi +
pop ecx  +
and esi 0FFFFFF56h +
pop ecx  +
add esi 0B7h +
push [ebp+phkResult]  +
call ds:RegCloseKey  +
jmp loc_100759A  +
xor esi esi +
inc [ebp+dwIndex]  +
cmp esi edi +
jz loc_1007482  +
cmp esi 103h +
jnz loc_10075B2  +
xor esi esi +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10055B7  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+4] +
test eax eax +
jz loc_10075F2  +
push esi  +
push edi  +
mov esi [ebp+arg_4] +
push 4  +
pop ecx  +
lea edi [eax+8] +
xor edx edx +
cmps   +
jz loc_10075F0  +
mov eax [eax] +
test eax eax +
jnz loc_10075DB  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2C0h +
mov eax dword_100A018 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_4] +
mov eax [ebp+hKey] +
push ebx  +
mov ebx ds:RegQueryValueExW +
push esi  +
push edi  +
mov [ebp+var_2B4] ecx +
lea ecx [ebp+cbName] +
push ecx  +
lea ecx [ebp+Data] +
push ecx  +
lea ecx [ebp+Type] +
push ecx  +
xor esi esi +
push esi  +
push off_100A03C  +
mov [ebp+var_2C0] eax +
push eax  +
mov [ebp+Type] esi +
mov [ebp+cbName] 4 +
call ebx  +
mov edi eax +
cmp edi esi +
jnz loc_10079E3  +
mov eax [ebp+var_2B4] +
mov eax [eax+20h] +
mov ecx dword ptr [ebp+Data] +
cmp ecx [eax+8] +
jz loc_1007682  +
push 0Dh  +
pop edi  +
jmp loc_10079E3  +
push 20Ah  +
lea eax [ebp+String] +
push esi  +
push eax  +
mov [ebp+Type] esi +
mov [ebp+cbName] 208h +
call memset  +
add esp 0Ch +
lea eax [ebp+cbName] +
push eax  +
lea eax [ebp+String] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push esi  +
push off_100A040  +
push [ebp+var_2C0]  +
call ebx  +
mov edi eax +
cmp edi esi +
jnz loc_10079E3  +
mov eax [ebp+var_2B4] +
push dword ptr [eax+18h]  +
mov edi ds:_wcsicmp +
lea eax [ebp+String] +
push eax  +
call edi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1007758  +
lea eax [ebp+String] +
push eax  +
call ds:lstrlenW  +
lea eax [ebp+eax*2-292h] +
cmp word ptr [eax] 5Ch +
jz loc_100767A  +
lea ecx [ebp+String] +
cmp eax ecx +
jb loc_100767A  +
cmp word ptr [eax] 5Ch +
jz loc_1007731  +
dec eax  +
dec eax  +
lea ecx [ebp+String] +
cmp eax ecx +
jnb loc_100771F  +
lea ecx [ebp+String] +
cmp eax ecx +
jb loc_100767A  +
mov ecx [ebp+var_2B4] +
push dword ptr [ecx+18h]  +
add eax 2 +
push eax  +
call edi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100767A  +
push 80h  +
lea eax [ebp+Name] +
push esi  +
push eax  +
mov [ebp+dwIndex] esi +
mov [ebp+cbName] 40h +
call memset  +
add esp 0Ch +
push esi  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+cbName] +
push eax  +
lea eax [ebp+Name] +
push eax  +
push esi  +
jmp loc_100799C  +
inc [ebp+dwIndex]  +
lea eax [ebp+var_2A0] +
push eax  +
push [ebp+cbName]  +
lea eax [ebp+Name] +
push eax  +
call sub_1006B2E  +
mov edi eax +
cmp edi esi +
jnz loc_10079B7  +
lea eax [ebp+var_2A0] +
push eax  +
push [ebp+var_2B4]  +
call sub_10075CA  +
mov [ebp+var_2BC] eax +
cmp eax esi +
jz loc_10079B4  +
lea eax [ebp+phkResult] +
push eax  +
push 2001Fh  +
push esi  +
lea eax [ebp+Name] +
push eax  +
push [ebp+var_2C0]  +
call ds:RegOpenKeyExW  +
mov edi eax +
cmp edi esi +
jnz loc_10079B7  +
lea eax [ebp+cbName] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push esi  +
push off_100A044  +
mov [ebp+Type] esi +
push [ebp+phkResult]  +
mov [ebp+cbName] 4 +
call ebx  +
mov edi eax +
cmp edi esi +
jnz loc_1007955  +
mov eax dword ptr [ebp+Data] +
mov ecx [ebp+var_2BC] +
cmp eax [ecx+24h] +
jnz loc_1007952  +
lea eax [ebp+cbName] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push esi  +
push off_100A048  +
mov [ebp+Type] esi +
push [ebp+phkResult]  +
mov [ebp+cbName] 4 +
call ebx  +
mov edi eax +
cmp edi esi +
jnz loc_1007955  +
mov eax dword ptr [ebp+Data] +
mov ecx [ebp+var_2BC] +
cmp eax [ecx+28h] +
jnz loc_1007952  +
lea eax [ebp+cbName] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push esi  +
push off_100A04C  +
mov [ebp+Type] esi +
push [ebp+phkResult]  +
mov [ebp+cbName] 4 +
call ebx  +
mov edi eax +
cmp edi esi +
jnz loc_1007955  +
mov eax [ebp+var_2BC] +
mov eax [eax+1Ch] +
mov ecx dword ptr [ebp+Data] +
cmp ecx [eax+8] +
jnz loc_1007952  +
lea eax [ebp+cbName] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push esi  +
push off_100A050  +
mov [ebp+Type] esi +
push [ebp+phkResult]  +
mov [ebp+cbName] 4 +
call ebx  +
mov edi eax +
cmp edi esi +
jnz loc_1007955  +
mov eax [ebp+var_2BC] +
mov eax [eax+4] +
xor ecx ecx +
jmp loc_1007946  +
mov eax [eax] +
inc ecx  +
cmp eax esi +
jnz loc_1007943  +
cmp dword ptr [ebp+Data] ecx +
jz loc_1007955  +
push 0Dh  +
pop edi  +
push [ebp+phkResult]  +
call ds:RegCloseKey  +
cmp edi esi +
jnz loc_10079B7  +
push 80h  +
lea eax [ebp+Name] +
push esi  +
push eax  +
mov [ebp+cbName] 40h +
call memset  +
add esp 0Ch +
push esi  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+cbName] +
push eax  +
lea eax [ebp+Name] +
push eax  +
push [ebp+dwIndex]  +
push [ebp+var_2C0]  +
call ds:RegEnumKeyExW  +
mov edi eax +
cmp edi esi +
jz loc_1007795  +
jmp loc_10079B7  +
push 0Dh  +
pop edi  +
cmp edi 103h +
jnz loc_10079E3  +
mov eax [ebp+var_2B4] +
mov eax [eax+4] +
jmp loc_10079D2  +
dec [ebp+dwIndex]  +
mov eax [eax] +
cmp eax esi +
jnz loc_10079CA  +
mov edi [ebp+dwIndex] +
neg edi  +
sbb edi edi +
and edi 0Dh +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10055B7  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 220h +
mov eax dword_100A018 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+lpSubKey] +
mov eax [ebp+hKey] +
push esi  +
lea edx [ebp+phkResult] +
push edx  +
push 2000000h  +
xor esi esi +
push esi  +
push ecx  +
push eax  +
mov [ebp+var_220] eax +
mov [ebp+var_21C] ecx +
call ds:RegOpenKeyExW  +
cmp eax esi +
jnz loc_1007AEC  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+cSubKeys] +
push eax  +
push esi  +
push esi  +
push esi  +
push [ebp+phkResult]  +
call ds:RegQueryInfoKeyW  +
test eax eax +
jnz loc_1007ACE  +
push ebx  +
push edi  +
mov ebx 20Ah +
push ebx  +
lea eax [ebp+SubKey] +
push esi  +
push eax  +
call memset  +
mov esi ds:RegEnumKeyW +
mov edi 105h +
jmp loc_1007AA9  +
lea eax [ebp+SubKey] +
push eax  +
push [ebp+phkResult]  +
call sub_10079FB  +
test eax eax +
jnz loc_1007ACC  +
push ebx  +
push eax  +
lea eax [ebp+SubKey] +
push eax  +
call memset  +
add esp 0Ch +
dec [ebp+cSubKeys]  +
push edi  +
lea eax [ebp+SubKey] +
push eax  +
push [ebp+cSubKeys]  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jz loc_1007A85  +
pop edi  +
pop ebx  +
push [ebp+phkResult]  +
call ds:RegCloseKey  +
push [ebp+var_21C]  +
push [ebp+var_220]  +
call ds:RegDeleteKeyW  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_10055B7  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
xor esi esi +
mov [ebp+var_4] esi +
cmp [ebp+arg_0] esi +
jnz loc_1007B1E  +
mov [ebp+var_4] 57h +
jmp loc_1007C60  +
mov ecx dword_100AAC8 +
push ebx  +
mov ebx ds:GetProcessHeap +
cmp ecx esi +
jnz loc_1007B78  +
push 20000h  +
push 8  +
mov dword_100AACC 10000h +
mov dword_100AAD0 esi +
call ebx  +
push eax  +
call ds:HeapAlloc  +
mov ecx eax +
mov dword_100AAC8 ecx +
cmp ecx esi +
jnz loc_1007B78  +
push 4BDh  +
push 2  +
push 66h  +
call sub_1005BDE  +
add esp 0Ch +
mov [ebp+var_4] 0Eh +
jmp loc_1007C5F  +
mov eax dword_100AAD0 +
mov edx [ebp+arg_4] +
lea edx [eax+edx+1] +
mov [ebp+var_8] edx +
cmp edx eax +
ja loc_1007BA8  +
push 4C6h  +
push 2  +
push 66h  +
call sub_1005BDE  +
add esp 0Ch +
mov [ebp+var_4] 216h +
jmp loc_1007C5F  +
push edi  +
mov edi dword_100AACC +
cmp edx edi +
jbe loc_1007C3C  +
mov esi edi +
cmp esi [ebp+var_8] +
ja loc_1007BD4  +
mov eax esi +
push 2  +
pop edx  +
mul  edx +
mov esi edx +
sar esi 1Fh +
test edx edx +
ja loc_1007C2A  +
mov esi eax +
cmp eax edi +
jnb loc_1007BB9  +
cmp esi edi +
jbe loc_1007C68  +
push 2  +
mov eax esi +
pop edx  +
mul  edx +
mov eax edx +
sar eax 1Fh +
test edx edx +
ja loc_1007C68  +
lea eax [esi+esi] +
push eax  +
mov edi ecx +
push edi  +
push 8  +
call ebx  +
push eax  +
call ds:HeapReAlloc  +
mov ecx eax +
mov dword_100AAC8 ecx +
test ecx ecx +
jnz loc_1007C31  +
push 4E5h  +
push 2  +
push 66h  +
mov dword_100AAC8 edi +
call sub_1005BDE  +
add esp 0Ch +
mov [ebp+var_4] 0Eh +
jmp loc_1007C5E  +
push 4D1h  +
jmp loc_1007C6D  +
mov eax dword_100AAD0 +
mov dword_100AACC esi +
push [ebp+arg_0]  +
mov edx [ebp+arg_4] +
inc edx  +
push edx  +
lea eax [ecx+eax*2] +
push eax  +
call sub_1003E55  +
mov eax dword_100AAD0 +
mov ecx [ebp+arg_4] +
lea eax [eax+ecx+1] +
mov dword_100AAD0 eax +
pop edi  +
pop ebx  +
mov eax [ebp+var_4] +
pop esi  +
leave   +
retn 8  +
push 4DCh  +
push 2  +
push 66h  +
call sub_1005BDE  +
add esp 0Ch +
mov [ebp+var_4] 216h +
jmp loc_1007C5E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi dword_100AAC4 +
push edi  +
xor edi edi +
mov [ebp+var_4] edi +
cmp [ebp+arg_0] edi +
jnz loc_1007CA7  +
xor esi esi +
jmp loc_1007E94  +
push ebx  +
cmp esi edi +
jz loc_1007DD0  +
mov ebx ds:_wcsnicmp +
mov eax [esi+8] +
cmp eax dword_100AACC +
jnb loc_1007D47  +
mov ecx dword_100AAC8 +
lea edi [ecx+eax*2] +
push edi  +
call ds:lstrlenW  +
mov ecx eax +
cmp ecx [ebp+arg_4] +
mov [ebp+var_8] ecx +
setz al  +
test al al +
jz loc_1007CFB  +
push [ebp+arg_4]  +
push edi  +
push [ebp+arg_0]  +
call ebx  +
add esp 0Ch +
neg eax  +
sbb al al +
inc al  +
jnz loc_1007D53  +
mov ecx [ebp+var_8] +
cmp ecx 0Ah +
jbe loc_1007D1A  +
mov edx [ebp+arg_4] +
cmp edx ecx +
jnb loc_1007D1A  +
add edx 0Ah +
cmp edx ecx +
jnz loc_1007D1A  +
push [ebp+arg_4]  +
add edi 12h +
push edi  +
push [ebp+arg_0]  +
jmp loc_1007D38  +
cmp [ebp+arg_4] 0Ah +
jbe loc_1007D43  +
cmp ecx [ebp+arg_4] +
jnb loc_1007D43  +
add ecx 0Ah +
cmp ecx [ebp+arg_4] +
jnz loc_1007D43  +
push [ebp+var_8]  +
mov eax [ebp+arg_0] +
push edi  +
add eax 12h +
push eax  +
call ebx  +
add esp 0Ch +
neg eax  +
sbb al al +
inc al  +
test al al +
jnz loc_1007D53  +
mov esi [esi] +
test esi esi +
jnz loc_1007CB6  +
jmp loc_1007DCA  +
cmp [ebp+arg_8] 0 +
jz loc_1007DBE  +
mov eax [esi+0Ch] +
cmp eax dword_100AACC +
jnb loc_1007DBE  +
mov ecx dword_100AAC8 +
lea edi [ecx+eax*2] +
push edi  +
call ds:lstrlenW  +
cmp eax [ebp+arg_C] +
jnz loc_1007D96  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push edi  +
call ebx  +
add esp 0Ch +
test eax eax +
jnz loc_1007D96  +
cmp [esi+14h] eax +
jz loc_1007DC4  +
inc eax  +
cmp [ebp+arg_10] eax +
jnz loc_1007DCA  +
jmp loc_1007DC7  +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_4] +
push ecx  +
lea esi [ecx+eax*2] +
movzx edi word ptr [esi] +
xor eax eax +
push 1  +
push 72h  +
mov [esi] ax +
call sub_1005BDE  +
add esp 0Ch +
mov [esi] di +
xor esi esi +
jmp loc_1007E93  +
cmp dword ptr [esi+14h] 0 +
jnz loc_1007DCA  +
mov eax [ebp+arg_10] +
mov [esi+14h] eax +
xor edi edi +
cmp esi edi +
jnz loc_1007E41  +
push 18h  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
cmp esi edi +
jnz loc_1007E01  +
push 544h  +
push 2  +
push 66h  +
call sub_1005BDE  +
add esp 0Ch +
mov [ebp+var_4] 0Eh +
jmp loc_1007E6E  +
push [ebp+arg_4]  +
mov eax dword_100AAD0 +
push [ebp+arg_0]  +
mov [esi+8] eax +
call sub_1007B00  +
mov [ebp+var_4] eax +
cmp eax edi +
jnz loc_1007E6E  +
or dword ptr [esi+0Ch] 0FFFFFFFFh +
mov eax dword_100A114 +
mov [esi+10h] eax +
mov eax [ebp+arg_10] +
add dword_100A114 2 +
mov [esi+14h] eax +
mov eax dword_100AAC4 +
mov [esi] eax +
mov dword_100AAC4 esi +
mov eax dword_100AACC +
cmp [esi+0Ch] eax +
jb loc_1007E83  +
cmp [ebp+arg_8] edi +
jz loc_1007E83  +
push [ebp+arg_C]  +
mov eax dword_100AAD0 +
push [ebp+arg_8]  +
mov [esi+0Ch] eax +
call sub_1007B00  +
mov [ebp+var_4] eax +
cmp eax edi +
jz loc_1007E83  +
or dword ptr [esi+0Ch] 0FFFFFFFFh +
cmp esi edi +
jz loc_1007E87  +
push esi  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
xor esi esi +
cmp esi edi +
jnz loc_1007E93  +
cmp [ebp+var_4] edi +
jnz loc_1007E93  +
push edi  +
call ds:SetLastError  +
pop ebx  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push ebx  +
mov ebx [ebp+arg_10] +
push esi  +
push edi  +
jz loc_1007F39  +
mov esi dword_100AAC4 +
test esi esi +
jz loc_1007F39  +
mov eax [esi+8] +
cmp eax dword_100AACC +
jnb loc_1007EF4  +
mov ecx dword_100AAC8 +
lea edi [ecx+eax*2] +
push edi  +
call ds:lstrlenW  +
cmp eax [ebp+arg_4] +
jnz loc_1007EF4  +
push [ebp+arg_4]  +
push edi  +
push [ebp+arg_0]  +
call ds:_wcsnicmp  +
add esp 0Ch +
test eax eax +
jz loc_1007EFC  +
mov esi [esi] +
test esi esi +
jnz loc_1007EC0  +
jmp loc_1007F35  +
cmp [ebp+arg_8] 0 +
jz loc_1007F22  +
mov eax [esi+0Ch] +
cmp eax dword_100AACC +
jnb loc_1007F22  +
push edi  +
push 1  +
push 72h  +
call sub_1005BDE  +
add esp 0Ch +
push 0Dh  +
pop eax  +
jmp loc_1007FC6  +
test ebx ebx +
jz loc_1007F35  +
mov eax [esi+14h] +
sub eax 0 +
jz loc_1007F32  +
dec eax  +
dec eax  +
jnz loc_1007F35  +
mov [esi+14h] ebx +
test esi esi +
jnz loc_1007FA9  +
push 18h  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
test esi esi +
jnz loc_1007F65  +
push 5D3h  +
push 2  +
push 66h  +
call sub_1005BDE  +
add esp 0Ch +
push 0Eh  +
jmp loc_1007F1C  +
mov eax dword_100AAC4 +
mov [esi] eax +
mov dword_100AAC4 esi +
or dword ptr [esi+8] 0FFFFFFFFh +
or dword ptr [esi+0Ch] 0FFFFFFFFh +
mov eax dword_100A114 +
mov [esi+10h] eax +
add dword_100A114 2 +
cmp [ebp+arg_0] 0 +
mov [esi+14h] ebx +
jz loc_1007FA9  +
push [ebp+arg_4]  +
mov eax dword_100AAD0 +
push [ebp+arg_0]  +
mov [esi+8] eax +
call sub_1007B00  +
test eax eax +
jnz loc_1007FC6  +
cmp [ebp+arg_8] 0 +
jz loc_1007FCF  +
push [ebp+arg_C]  +
mov eax dword_100AAD0 +
push [ebp+arg_8]  +
mov [esi+0Ch] eax +
call sub_1007B00  +
test eax eax +
jz loc_1007FCF  +
push eax  +
xor esi esi +
call ds:SetLastError  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
fld1   +
fcomp  dbl_100AAD8 +
fnstsw  ax +
test ah 41h +
jnz loc_1007FF7  +
pop ebp  +
jmp loc_1007C87  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
cmp esi ebx +
jz loc_100801B  +
cmp [ebp+arg_8] ebx +
jz loc_100801B  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push esi  +
call sub_1007EA1  +
jmp loc_100805F  +
push edi  +
mov edi [ebp+arg_4] +
cmp edi 0Ah +
jbe loc_1008052  +
push 29h  +
pop eax  +
cmp ax [esi+edi*2-2] +
jnz loc_1008052  +
push 9  +
push offset aString_  +
push esi  +
call ds:_wcsnicmp  +
add esp 0Ch +
test eax eax +
jnz loc_1008052  +
push [ebp+arg_10]  +
add edi 0FFFFFFF6h +
push ebx  +
push ebx  +
push edi  +
add esi 12h +
push esi  +
jmp loc_1008059  +
push [ebp+arg_10]  +
push edi  +
push esi  +
push ebx  +
push ebx  +
call sub_1007EA1  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
push off_100A0D4  +
xor edi edi +
push [ebp+arg_0]  +
call sub_1006698  +
mov esi eax +
cmp esi edi +
jnz loc_10080A9  +
push off_100A0A0  +
push off_100A0D4  +
push 2  +
push 6Ch  +
call sub_1005BDE  +
add esp 10h +
push 0Dh  +
pop edi  +
jmp loc_10080E7  +
lea eax [ebp+arg_0] +
push eax  +
push off_100A0FC  +
push [ebp+arg_0]  +
call sub_1006698  +
cmp eax edi +
jnz loc_10080CD  +
push off_100A0A0  +
push off_100A0FC  +
jmp loc_1008098  +
push edi  +
push [ebp+arg_0]  +
push eax  +
push [ebp+var_4]  +
push esi  +
call sub_1007FDD  +
test eax eax +
jnz loc_10080E7  +
call ds:GetLastError  +
mov edi eax +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
push off_100A0B8  +
xor esi esi +
push [ebp+arg_0]  +
mov [ebp+var_10] esi +
call sub_1006698  +
mov [ebp+var_14] eax +
cmp eax esi +
jnz loc_1008141  +
push off_100A07C  +
push off_100A0B8  +
push 2  +
push 6Ch  +
call sub_1005BDE  +
add esp 10h +
mov [ebp+dwErrCode] 0Dh +
jmp loc_10083CA  +
mov edi [ebp+var_4] +
lea eax [ebp+var_8] +
push eax  +
push off_100A0B0  +
lea ebx [edi+edi+9] +
push [ebp+arg_0]  +
shr ebx 3 +
lea ebx ds:28h[ebx*8] +
mov esi ebx +
call sub_1006698  +
mov [ebp+dwErrCode] eax +
test eax eax +
jz loc_100817A  +
mov eax [ebp+var_8] +
lea eax [eax+eax+9] +
shr eax 3 +
lea esi [esi+eax*8] +
push esi  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
test esi esi +
jnz loc_10081AD  +
push 6A0h  +
push 2  +
push 66h  +
call sub_1005BDE  +
add esp 0Ch +
mov [ebp+dwErrCode] 0Eh +
jmp loc_10083B4  +
push [ebp+var_14]  +
lea eax [esi+28h] +
inc edi  +
push edi  +
push eax  +
mov [esi+18h] eax +
call sub_1003E55  +
cmp [ebp+dwErrCode] 0 +
jz loc_10081D8  +
push [ebp+dwErrCode]  +
mov ecx [ebp+var_8] +
inc ecx  +
lea eax [ebx+esi] +
push ecx  +
push eax  +
mov [esi+1Ch] eax +
call sub_1003E55  +
lea eax [ebp+var_4] +
push eax  +
push off_100A0A8  +
push [ebp+arg_0]  +
call sub_1006698  +
mov ebx eax +
test ebx ebx +
jnz loc_1008214  +
push off_100A07C  +
push off_100A0A8  +
push 2  +
push 6Ch  +
call sub_1005BDE  +
add esp 10h +
mov [ebp+dwErrCode] 0Dh +
jmp loc_10083B4  +
mov edi [ebp+var_4] +
lea eax [esi+8] +
push eax  +
push edi  +
push ebx  +
call sub_1006B2E  +
mov [ebp+dwErrCode] eax +
test eax eax +
jz loc_100825C  +
lea edi [ebx+edi*2] +
movzx eax word ptr [edi] +
mov [ebp+var_8] eax +
xor eax eax +
mov [edi] ax +
push off_100A07C  +
push off_100A0A8  +
push ebx  +
push 2  +
push 6Eh  +
call sub_1005BDE  +
mov ax word ptr [ebp+var_8] +
add esp 14h +
mov [edi] ax +
jmp loc_10083AE  +
lea eax [ebp+var_4] +
push eax  +
push off_100A0B4  +
mov byte_100AAD4 0 +
push [ebp+arg_0]  +
mov dword_100A118 1 +
call sub_1006698  +
test eax eax +
jz loc_10082A9  +
lea ecx [ebp+var_10] +
push ecx  +
push 0FFFFFFFFh  +
push [ebp+var_4]  +
push eax  +
call sub_1006A61  +
test al al +
jz loc_10082A9  +
mov eax [ebp+var_10] +
test eax eax +
jl loc_10082A9  +
mov dword_100A118 eax +
mov byte_100AAD4 1 +
and dword ptr [esi+20h] 0 +
lea eax [ebp+var_4] +
push eax  +
push off_100A0AC  +
push [ebp+arg_0]  +
call sub_1006698  +
mov edi [ebp+var_4] +
mov ebx eax +
test ebx ebx +
jz loc_10082D9  +
push 3  +
push offset off_1003160  +
push edi  +
push ebx  +
call sub_1006A12  +
mov [esi+20h] eax +
cmp dword ptr [esi+20h] 0 +
jnz loc_100831D  +
test ebx ebx +
jz loc_1008316  +
lea edi [ebx+edi*2] +
movzx eax word ptr [edi] +
push offset aUsermode  +
mov [ebp+var_8] eax +
xor eax eax +
mov [edi] ax +
push off_100A07C  +
push off_100A0AC  +
push ebx  +
push 1  +
push 6Fh  +
call sub_1005BDE  +
mov ax word ptr [ebp+var_8] +
add esp 18h +
mov [edi] ax +
mov dword ptr [esi+20h] offset off_1003160 +
and dword ptr [esi+24h] 0 +
lea eax [ebp+var_4] +
push eax  +
push off_100A0BC  +
push [ebp+arg_0]  +
call sub_1006698  +
mov edi [ebp+var_4] +
mov ebx eax +
test ebx ebx +
jz loc_100834D  +
push 2  +
push offset off_1003190  +
push edi  +
push ebx  +
call sub_1006A12  +
mov [esi+24h] eax +
cmp dword ptr [esi+24h] 0 +
jnz loc_1008391  +
test ebx ebx +
jz loc_100838A  +
lea edi [ebx+edi*2] +
movzx eax word ptr [edi] +
push offset aDefault  +
mov [ebp+var_8] eax +
xor eax eax +
mov [edi] ax +
push off_100A07C  +
push off_100A0BC  +
push ebx  +
push 1  +
push 6Fh  +
call sub_1005BDE  +
mov ax word ptr [ebp+var_8] +
add esp 18h +
mov [edi] ax +
mov dword ptr [esi+24h] offset off_1003190 +
xor ecx ecx +
mov [esi] ecx +
mov eax dword_100AAC0 +
cmp eax ecx +
jnz loc_10083A8  +
mov dword_100AAC0 esi +
jmp loc_10083D3  +
mov eax [eax] +
cmp [eax] ecx +
jnz loc_10083A6  +
mov [eax] esi +
cmp [ebp+dwErrCode] 0 +
jz loc_10083D3  +
test esi esi +
jz loc_10083CA  +
push esi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
xor esi esi +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
push 38h  +
pop esi  +
lea eax [ebp+var_4] +
push eax  +
push off_100A0C4  +
push [ebp+arg_0]  +
call sub_1006698  +
mov edi [ebp+var_4] +
mov [ebp+dwErrCode] eax +
test eax eax +
jz loc_1008418  +
lea esi [edi+edi+9] +
shr esi 3 +
lea esi ds:38h[esi*8] +
mov ebx ds:GetProcessHeap +
push esi  +
push 8  +
call ebx  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
test esi esi +
jnz loc_100844D  +
push 71Eh  +
push 2  +
push 66h  +
call sub_1005BDE  +
add esp 0Ch +
mov [ebp+dwErrCode] 0Eh +
jmp loc_1008748  +
cmp [ebp+dwErrCode] 0 +
jz loc_1008466  +
push [ebp+dwErrCode]  +
inc edi  +
lea eax [esi+38h] +
push edi  +
push eax  +
mov [esi+18h] eax +
call sub_1003E55  +
jmp loc_100846A  +
and dword ptr [esi+18h] 0 +
lea eax [ebp+var_4] +
push eax  +
push off_100A100  +
push [ebp+arg_0]  +
call sub_1006698  +
test eax eax +
jz loc_10084BF  +
push [ebp+var_4]  +
lea edi [esi+2Ch] +
push eax  +
push edi  +
call sub_1006083  +
mov [ebp+dwErrCode] eax +
test eax eax +
jnz loc_100870B  +
mov eax [edi] +
xor ecx ecx +
cmp [eax] cx +
jz loc_10084BF  +
xor eax eax +
mov edx [edi] +
add eax edx +
cmp word ptr [eax] 2Ch +
jnz loc_10084B2  +
xor edx edx +
mov [eax] dx +
mov edx [edi] +
inc ecx  +
lea eax [ecx+ecx] +
cmp word ptr [eax+edx] 0 +
jnz loc_10084A3  +
lea eax [ebp+var_4] +
push eax  +
push off_100A10C  +
push [ebp+arg_0]  +
call sub_1006698  +
test eax eax +
jz loc_1008575  +
push [ebp+var_4]  +
push eax  +
lea eax [esi+30h] +
push eax  +
call sub_1006083  +
mov [ebp+dwErrCode] eax +
test eax eax +
jnz loc_100870B  +
lea eax [ebp+var_4] +
push eax  +
push off_100A110  +
push [ebp+arg_0]  +
call sub_1006698  +
test eax eax +
jz loc_1008539  +
mov ecx [ebp+arg_4] +
mov ecx [ecx+20h] +
cmp dword ptr [ecx+8] 1 +
jnz loc_10085A4  +
cmp dword ptr [ecx+0Ch] 0 +
jnz loc_10085A4  +
push [ebp+var_4]  +
push eax  +
lea eax [esi+34h] +
push eax  +
call sub_1006083  +
mov [ebp+dwErrCode] eax +
test eax eax +
jnz loc_100870B  +
lea eax [ebp+var_4] +
push eax  +
push off_100A0C0  +
push [ebp+arg_0]  +
call sub_1006698  +
mov ebx eax +
test ebx ebx +
jnz loc_10085B0  +
push off_100A084  +
push off_100A0C0  +
push 2  +
push 6Ch  +
call sub_1005BDE  +
add esp 10h +
mov [ebp+dwErrCode] 0Dh +
jmp loc_1008705  +
fld  ds:dbl_1003550 +
fcomp  dbl_100AAD8 +
fnstsw  ax +
test ah 41h +
jp loc_10084F1  +
push off_100A084  +
push off_100A10C  +
push 2  +
push 6Ch  +
call sub_1005BDE  +
add esp 10h +
mov [ebp+dwErrCode] 0Dh +
jmp loc_100870B  +
mov edi [ebp+var_4] +
lea eax [esi+8] +
push eax  +
push edi  +
push ebx  +
call sub_1006B2E  +
mov [ebp+dwErrCode] eax +
test eax eax +
jz loc_10085F8  +
lea edi [ebx+edi*2] +
movzx eax word ptr [edi] +
mov [ebp+arg_0] eax +
xor eax eax +
mov [edi] ax +
push off_100A084  +
push off_100A0C0  +
push ebx  +
push 2  +
push 6Eh  +
call sub_1005BDE  +
mov ax word ptr [ebp+arg_0] +
add esp 14h +
mov [edi] ax +
jmp loc_10086FF  +
lea eax [ebp+var_4] +
push eax  +
push off_100A0C8  +
push [ebp+arg_0]  +
call sub_1006698  +
xor edi edi +
cmp eax edi +
jz loc_100863A  +
push 1  +
push edi  +
push edi  +
push [ebp+var_4]  +
push eax  +
call sub_1007FDD  +
cmp eax edi +
jz loc_100862C  +
mov ecx [eax+10h] +
mov [esi+24h] ecx +
mov [esi+20h] eax +
jmp loc_100863E  +
call ds:GetLastError  +
mov [ebp+dwErrCode] eax +
jmp loc_10086FF  +
or dword ptr [esi+24h] 0FFFFFFFFh +
lea eax [ebp+var_4] +
push eax  +
push off_100A0CC  +
push [ebp+arg_0]  +
call sub_1006698  +
cmp eax edi +
jz loc_100866D  +
push 2  +
push edi  +
push edi  +
push [ebp+var_4]  +
push eax  +
call sub_1007FDD  +
cmp eax edi +
jz loc_100862C  +
mov eax [eax+10h] +
mov [esi+28h] eax +
jmp loc_1008671  +
or dword ptr [esi+28h] 0FFFFFFFFh +
lea eax [ebp+var_4] +
push eax  +
mov [esi+1Ch] edi +
push off_100A0D0  +
push [ebp+arg_0]  +
call sub_1006698  +
mov edi [ebp+var_4] +
mov ebx eax +
test ebx ebx +
jz loc_10086A0  +
push 6  +
push offset off_10031B0  +
push edi  +
push ebx  +
call sub_1006A12  +
mov [esi+1Ch] eax +
cmp dword ptr [esi+1Ch] 0 +
jnz loc_10086E4  +
test ebx ebx +
jz loc_10086DD  +
lea edi [ebx+edi*2] +
movzx eax word ptr [edi] +
push offset aSingle  +
mov [ebp+arg_0] eax +
xor eax eax +
mov [edi] ax +
push off_100A084  +
push off_100A0D0  +
push ebx  +
push 1  +
push 6Fh  +
call sub_1005BDE  +
mov ax word ptr [ebp+arg_0] +
add esp 18h +
mov [edi] ax +
mov dword ptr [esi+1Ch] offset off_10031B0 +
mov ecx [ebp+arg_4] +
xor edx edx +
mov [esi] edx +
mov eax [ecx+4] +
cmp eax edx +
jnz loc_10086F9  +
mov [ecx+4] esi +
jmp loc_1008751  +
mov eax [eax] +
cmp [eax] edx +
jnz loc_10086F7  +
mov [eax] esi +
cmp [ebp+dwErrCode] 0 +
jz loc_1008751  +
mov ebx ds:GetProcessHeap +
mov eax [esi+2Ch] +
mov edi ds:HeapFree +
test eax eax +
jz loc_1008720  +
push eax  +
push 0  +
call ebx  +
push eax  +
call edi  +
mov eax [esi+30h] +
test eax eax +
jz loc_100872F  +
push eax  +
push 0  +
call ebx  +
push eax  +
call edi  +
mov eax [esi+34h] +
test eax eax +
jz loc_100873E  +
push eax  +
push 0  +
call ebx  +
push eax  +
call edi  +
push esi  +
push 0  +
call ebx  +
push eax  +
call edi  +
xor esi esi +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
and [ebp+dwErrCode] 0 +
and [ebp+var_8] 0 +
push ebx  +
push esi  +
push edi  +
push 50h  +
pop esi  +
lea eax [ebp+var_4] +
push eax  +
push off_100A0C4  +
push [ebp+arg_0]  +
call sub_1006698  +
mov edi [ebp+var_4] +
mov ebx eax +
test ebx ebx +
jz loc_100879E  +
lea esi [edi+edi+9] +
shr esi 3 +
lea esi ds:50h[esi*8] +
push esi  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
test esi esi +
jnz loc_10087C0  +
mov [ebp+dwErrCode] 0Eh +
jmp loc_1008D41  +
test ebx ebx +
jz loc_10087D5  +
push ebx  +
inc edi  +
lea eax [esi+50h] +
push edi  +
push eax  +
mov [esi+4] eax +
call sub_1003E55  +
jmp loc_10087D9  +
and dword ptr [esi+4] 0 +
mov edi [ebp+arg_0] +
lea eax [ebp+var_4] +
push eax  +
push off_100A104  +
push edi  +
call sub_1006698  +
test eax eax +
jnz loc_1008810  +
mov eax [ebp+arg_8] +
mov ecx [eax+2Ch] +
test ecx ecx +
jz loc_1008828  +
mov eax ecx +
lea ebx [ecx+2] +
mov dx [ecx] +
inc ecx  +
inc ecx  +
test dx dx +
jnz loc_10087FF  +
sub ecx ebx +
sar ecx 1 +
mov [ebp+var_4] ecx +
push [ebp+var_4]  +
push eax  +
lea eax [esi+44h] +
push eax  +
call sub_1006083  +
mov [ebp+dwErrCode] eax +
test eax eax +
jnz loc_1008CFE  +
lea eax [ebp+var_4] +
push eax  +
push off_100A108  +
push edi  +
call sub_1006698  +
test eax eax +
jz loc_1008854  +
push [ebp+var_4]  +
push eax  +
lea eax [esi+48h] +
push eax  +
call sub_1006083  +
mov [ebp+dwErrCode] eax +
test eax eax +
jnz loc_1008CFE  +
lea eax [ebp+var_4] +
push eax  +
push off_100A10C  +
push edi  +
call sub_1006698  +
test eax eax +
jz loc_1008880  +
push [ebp+var_4]  +
push eax  +
lea eax [esi+4Ch] +
push eax  +
call sub_1006083  +
mov [ebp+dwErrCode] eax +
test eax eax +
jnz loc_1008CFE  +
lea eax [ebp+var_4] +
push eax  +
push off_100A0D4  +
push edi  +
call sub_1006698  +
mov [ebp+var_10] eax +
test eax eax +
jz loc_1008CD9  +
mov ebx [ebp+var_4] +
lea ecx [ebp+var_8] +
push ecx  +
push 0FFFFFFFFh  +
push ebx  +
push eax  +
call sub_1006A61  +
test al al +
jz loc_1008CB9  +
mov eax [ebp+var_8] +
test eax eax +
jl loc_1008CB9  +
mov [esi+20h] eax +
lea eax [ebp+var_4] +
push eax  +
push off_100A0C8  +
push edi  +
call sub_1006698  +
xor ebx ebx +
cmp eax ebx +
jz loc_1008901  +
push 1  +
push ebx  +
push ebx  +
push [ebp+var_4]  +
push eax  +
call sub_1007FDD  +
cmp eax ebx +
jz loc_10088F3  +
mov ecx [eax+10h] +
mov [esi+28h] ecx +
mov [esi+24h] eax +
jmp loc_1008905  +
call ds:GetLastError  +
mov [ebp+dwErrCode] eax +
jmp loc_1008CF8  +
or dword ptr [esi+28h] 0FFFFFFFFh +
lea eax [ebp+var_4] +
push eax  +
push off_100A0CC  +
push edi  +
call sub_1006698  +
cmp eax ebx +
jz loc_1008932  +
push 2  +
push ebx  +
push ebx  +
push [ebp+var_4]  +
push eax  +
call sub_1007FDD  +
cmp eax ebx +
jz loc_10088F3  +
mov eax [eax+10h] +
mov [esi+2Ch] eax +
jmp loc_1008936  +
or dword ptr [esi+2Ch] 0FFFFFFFFh +
lea eax [ebp+var_4] +
push eax  +
mov [esi+8] ebx +
push off_100A0D8  +
push edi  +
call sub_1006698  +
mov edi [ebp+var_4] +
mov ebx eax +
test ebx ebx +
jz loc_1008963  +
push 26h  +
push offset off_10032D0  +
push edi  +
push ebx  +
call sub_1006A12  +
mov [esi+8] eax +
cmp dword ptr [esi+8] 0 +
jnz loc_10089C1  +
test ebx ebx +
jnz loc_1008987  +
push off_100A088  +
push off_100A0D8  +
push 2  +
push 6Ch  +
call sub_1005BDE  +
add esp 10h +
jmp loc_10089B5  +
lea edi [ebx+edi*2] +
movzx eax word ptr [edi] +
mov [ebp+var_10] eax +
xor eax eax +
mov [edi] ax +
push off_100A088  +
push off_100A0D8  +
push ebx  +
push 2  +
push 6Dh  +
call sub_1005BDE  +
mov ax word ptr [ebp+var_10] +
mov [edi] ax +
add esp 14h +
mov [ebp+dwErrCode] 0Dh +
jmp loc_1008CFE  +
and dword ptr [esi+0Ch] 0 +
lea eax [ebp+var_4] +
push eax  +
push off_100A0E4  +
push [ebp+arg_0]  +
call sub_1006698  +
mov edi [ebp+var_4] +
mov ebx eax +
test ebx ebx +
jz loc_10089F1  +
push 2  +
push offset off_1003210  +
push edi  +
push ebx  +
call sub_1006A12  +
mov [esi+0Ch] eax +
cmp dword ptr [esi+0Ch] 0 +
jnz loc_1008A35  +
test ebx ebx +
jz loc_1008A2E  +
lea edi [ebx+edi*2] +
movzx eax word ptr [edi] +
push offset aStandard  +
mov [ebp+var_10] eax +
xor eax eax +
mov [edi] ax +
push off_100A088  +
push off_100A0E4  +
push ebx  +
push 1  +
push 6Fh  +
call sub_1005BDE  +
mov ax word ptr [ebp+var_10] +
add esp 18h +
mov [edi] ax +
mov dword ptr [esi+0Ch] offset off_1003210 +
and [ebp+var_8] 0 +
lea eax [ebp+var_4] +
push eax  +
push off_100A0E0  +
push [ebp+arg_0]  +
call sub_1006698  +
mov [ebp+var_10] eax +
test eax eax +
jz loc_1008A94  +
mov edi [ebp+var_4] +
lea ecx [ebp+var_8] +
push ecx  +
push 0  +
push edi  +
push eax  +
call sub_1006A61  +
test al al +
jnz loc_1008A94  +
mov eax [ebp+var_10] +
lea edi [eax+edi*2] +
movzx ebx word ptr [edi] +
push eax  +
xor ecx ecx +
mov [edi] cx +
push off_100A088  +
push off_100A0E0  +
push 1  +
push 71h  +
call sub_1005BDE  +
add esp 14h +
and [ebp+var_8] 0 +
mov [edi] bx +
mov eax [ebp+var_8] +
mov ebx [ebp+arg_0] +
mov [esi+30h] eax +
lea eax [ebp+var_4] +
push eax  +
push off_100A0DC  +
push ebx  +
call sub_1006698  +
mov [ebp+var_10] eax +
test eax eax +
jz loc_1008AFA  +
mov edi [ebp+var_4] +
lea ecx [ebp+var_8] +
push ecx  +
push 0FFFFFFFFh  +
push edi  +
push eax  +
call sub_1006A61  +
test al al +
jz loc_1008ACE  +
cmp [ebp+var_8] 0 +
jge loc_1008AFE  +
mov eax [ebp+var_10] +
lea edi [eax+edi*2] +
movzx ebx word ptr [edi] +
xor ecx ecx +
push eax  +
mov [edi] cx +
push off_100A088  +
push off_100A0DC  +
push 2  +
push 71h  +
call sub_1005BDE  +
mov [edi] bx +
jmp loc_10089B2  +
or [ebp+var_8] 0FFFFFFFFh +
mov eax [ebp+var_8] +
mov [esi+34h] eax +
lea eax [ebp+var_4] +
push eax  +
push off_100A0EC  +
push ebx  +
call sub_1006698  +
mov [ebp+var_10] eax +
test eax eax +
jz loc_1008B52  +
mov edi [ebp+var_4] +
lea ecx [ebp+var_8] +
push ecx  +
push 0FFFFFFFFh  +
push edi  +
push eax  +
call sub_1006A61  +
test al al +
jz loc_1008B35  +
cmp [ebp+var_8] 0 +
jge loc_1008B56  +
mov eax [ebp+var_10] +
lea edi [eax+edi*2] +
movzx ebx word ptr [edi] +
xor ecx ecx +
push eax  +
mov [edi] cx +
push off_100A088  +
push off_100A0EC  +
jmp loc_1008AE9  +
or [ebp+var_8] 0FFFFFFFFh +
mov eax [ebp+var_8] +
mov [esi+38h] eax +
lea eax [ebp+var_4] +
push eax  +
push off_100A0F4  +
push ebx  +
call sub_1006698  +
mov [ebp+var_10] eax +
test eax eax +
jz loc_1008BAD  +
mov edi [ebp+var_4] +
lea ecx [ebp+var_8] +
push ecx  +
push 0FFFFFFFFh  +
push edi  +
push eax  +
call sub_1006A61  +
test al al +
jz loc_1008B8D  +
cmp [ebp+var_8] 0 +
jge loc_1008BB1  +
mov eax [ebp+var_10] +
lea edi [eax+edi*2] +
movzx ebx word ptr [edi] +
xor ecx ecx +
push eax  +
mov [edi] cx +
push off_100A088  +
push off_100A0F4  +
jmp loc_1008AE9  +
or [ebp+var_8] 0FFFFFFFFh +
mov eax [ebp+var_8] +
mov [esi+40h] eax +
lea eax [ebp+var_4] +
push eax  +
push off_100A0F0  +
push ebx  +
call sub_1006698  +
mov [ebp+var_10] eax +
test eax eax +
jz loc_1008C09  +
mov edi [ebp+var_4] +
lea ecx [ebp+var_8] +
push ecx  +
push 0FFFFFFFFh  +
push edi  +
push eax  +
call sub_1006A61  +
test al al +
jz loc_1008BE9  +
mov eax [ebp+var_8] +
test eax eax +
jge loc_1008C0C  +
mov eax [ebp+var_10] +
lea edi [eax+edi*2] +
movzx ebx word ptr [edi] +
xor ecx ecx +
push eax  +
mov [edi] cx +
push off_100A088  +
push off_100A0F0  +
jmp loc_1008AE9  +
or eax 0FFFFFFFFh +
mov [esi+3Ch] eax +
mov eax [ebp+arg_8] +
mov eax [eax+1Ch] +
mov eax [eax+8] +
test eax eax +
jz loc_1008C95  +
cmp eax 2 +
jz loc_1008C95  +
and dword ptr [esi+10h] 0 +
lea eax [ebp+var_4] +
push eax  +
push off_100A0E8  +
push ebx  +
call sub_1006698  +
mov edi [ebp+var_4] +
mov ebx eax +
test ebx ebx +
jz loc_1008C4F  +
push 5  +
push offset off_1003230  +
push edi  +
push ebx  +
call sub_1006A12  +
mov [esi+10h] eax +
cmp dword ptr [esi+10h] 0 +
jnz loc_1008C9C  +
test ebx ebx +
jz loc_1008C8C  +
lea edi [ebx+edi*2] +
movzx eax word ptr [edi] +
push offset aSum  +
mov [ebp+var_10] eax +
xor eax eax +
mov [edi] ax +
push off_100A088  +
push off_100A0E8  +
push ebx  +
push 1  +
push 6Fh  +
call sub_1005BDE  +
mov ax word ptr [ebp+var_10] +
add esp 18h +
mov [edi] ax +
mov dword ptr [esi+10h] offset off_1003230 +
jmp loc_1008C9C  +
mov dword ptr [esi+10h] offset off_1003270 +
mov ecx [ebp+arg_8] +
xor edx edx +
mov [esi] edx +
mov eax [ecx+4] +
cmp eax edx +
jnz loc_1008CB1  +
mov [ecx+4] esi +
jmp loc_1008CF8  +
mov eax [eax] +
cmp [eax] edx +
jnz loc_1008CAF  +
mov [eax] esi +
jmp loc_1008CF8  +
mov eax [ebp+var_10] +
lea edi [eax+ebx*2] +
movzx ebx word ptr [edi] +
xor ecx ecx +
push eax  +
mov [edi] cx +
push off_100A088  +
push off_100A0D4  +
jmp loc_1008AE9  +
push off_100A088  +
push off_100A0D4  +
push 2  +
push 6Ch  +
call sub_1005BDE  +
add esp 10h +
mov [ebp+dwErrCode] 0Dh +
cmp [ebp+dwErrCode] 0 +
jz loc_1008D4A  +
mov eax [esi+44h] +
mov edi ds:HeapFree +
mov ebx ds:GetProcessHeap +
test eax eax +
jz loc_1008D19  +
push eax  +
push 0  +
call ebx  +
push eax  +
call edi  +
mov eax [esi+48h] +
test eax eax +
jz loc_1008D28  +
push eax  +
push 0  +
call ebx  +
push eax  +
call edi  +
mov eax [esi+4Ch] +
test eax eax +
jz loc_1008D37  +
push eax  +
push 0  +
call ebx  +
push eax  +
call edi  +
push esi  +
push 0  +
call ebx  +
push eax  +
call edi  +
xor esi esi +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push offset dbl_100AAD8  +
push esi  +
call sub_1006DBB  +
xor ebx ebx +
mov [ebp+arg_0] eax +
cmp eax ebx +
jnz loc_1008F52  +
fld  dbl_100AAD8 +
push ecx  +
push ecx  +
fstp  [esp+24h+var_24] +
call floor  +
fcomp  ds:dbl_1003548 +
pop ecx  +
pop ecx  +
fnstsw  ax +
test ah 41h +
jnz loc_1008DA8  +
mov [ebp+arg_0] 47Eh +
jmp loc_1008F52  +
push edi  +
push esi  +
mov [ebp+var_C] ebx +
call sub_1006940  +
test al al +
jz loc_1008F46  +
jmp loc_1008F25  +
push esi  +
call sub_10080F4  +
mov [ebp+var_10] eax +
cmp eax ebx +
jz loc_1008F5B  +
cmp byte_100AAD4 bl +
jz loc_1008DE2  +
mov eax dword_100A118 +
mov dword_100A114 eax +
inc [ebp+var_C]  +
push esi  +
mov [ebp+var_8] ebx +
call sub_1006940  +
test al al +
jz loc_1008F10  +
jmp loc_1008EEF  +
push [ebp+var_10]  +
push esi  +
call sub_10083E1  +
mov [ebp+var_14] eax +
cmp eax ebx +
jz loc_1008F5B  +
inc [ebp+var_8]  +
push esi  +
mov [ebp+var_4] ebx +
call sub_1006940  +
test al al +
jz loc_1008EDA  +
jmp loc_1008EB9  +
push [ebp+var_14]  +
push [ebp+var_10]  +
push esi  +
call sub_100875F  +
mov edi eax +
cmp edi ebx +
jz loc_1008F5B  +
inc [ebp+var_4]  +
push esi  +
call sub_1006940  +
test al al +
jz loc_1008EAF  +
jmp loc_1008E97  +
push esi  +
call sub_1006940  +
test al al +
jz loc_1008EA9  +
jmp loc_1008E75  +
push edi  +
push esi  +
call sub_1006D42  +
mov [ebp+arg_0] eax +
cmp eax ebx +
jnz loc_1008F51  +
push esi  +
call sub_1006807  +
test al al +
jz loc_1008E87  +
push ebx  +
push ebx  +
push off_100A090  +
push esi  +
call sub_10068BC  +
test al al +
jnz loc_1008E59  +
push esi  +
call sub_10069F2  +
push esi  +
call sub_1006807  +
test al al +
jz loc_1008EA9  +
push ebx  +
push ebx  +
push off_100A08C  +
push esi  +
call sub_10068BC  +
test al al +
jnz loc_1008E4D  +
push esi  +
call sub_10069F2  +
push esi  +
call sub_1006807  +
test al al +
jz loc_1008ECF  +
push ebx  +
push ebx  +
push off_100A088  +
push esi  +
call sub_10068BC  +
test al al +
jnz loc_1008E28  +
push esi  +
call sub_10069F2  +
cmp [ebp+var_4] ebx +
jnz loc_1008EE5  +
push 1  +
push 7Bh  +
call sub_1005BDE  +
pop ecx  +
pop ecx  +
push esi  +
call sub_1006807  +
test al al +
jz loc_1008F05  +
push ebx  +
push ebx  +
push off_100A084  +
push esi  +
call sub_10068BC  +
test al al +
jnz loc_1008DFB  +
push esi  +
call sub_10069F2  +
cmp [ebp+var_8] ebx +
jnz loc_1008F1B  +
push 1  +
push 7Ah  +
call sub_1005BDE  +
pop ecx  +
pop ecx  +
push esi  +
call sub_1006807  +
test al al +
jz loc_1008F3B  +
push ebx  +
push ebx  +
push off_100A080  +
push esi  +
call sub_10068BC  +
test al al +
jnz loc_1008DBF  +
push esi  +
call sub_10069F2  +
cmp [ebp+var_C] ebx +
jnz loc_1008F51  +
push 1  +
push 79h  +
call sub_1005BDE  +
pop ecx  +
pop ecx  +
pop edi  +
mov eax [ebp+arg_0] +
pop esi  +
pop ebx  +
leave   +
retn 4  +
call ds:GetLastError  +
mov [ebp+arg_0] eax +
jmp loc_1008F51  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
xor ebx ebx +
cmp [ebp+lpMem] ebx +
jnz loc_1008F92  +
push 2  +
push 65h  +
call sub_1005BDE  +
pop ecx  +
pop ecx  +
mov [ebp+lpMem] 57h +
jmp loc_1009286  +
push esi  +
push 60Ch  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
cmp esi ebx +
jnz loc_1008FCA  +
push 9CDh  +
push 2  +
push 66h  +
call sub_1005BDE  +
add esp 0Ch +
mov [ebp+lpMem] 0Eh +
jmp loc_1009267  +
push [ebp+lpMem]  +
push esi  +
call sub_10063D9  +
mov [ebp+lpMem] eax +
cmp eax ebx +
jnz loc_1009267  +
push esi  +
call sub_1006940  +
test al al +
jnz loc_1008FFF  +
push 2  +
push 67h  +
call sub_1005BDE  +
pop ecx  +
pop ecx  +
mov [ebp+lpMem] 0Dh +
jmp loc_1009267  +
push edi  +
push ebx  +
push ebx  +
push ebx  +
push esi  +
mov [ebp+var_8] ebx +
call sub_10068BC  +
test al al +
jz loc_1009245  +
lea eax [ebp+var_4] +
push eax  +
push esi  +
call sub_1006633  +
mov edi eax +
cmp edi ebx +
jz loc_1009225  +
push off_100A070  +
call ds:lstrlenW  +
mov ebx [ebp+var_4] +
cmp ebx eax +
jb loc_1009223  +
push ebx  +
push off_100A070  +
push edi  +
call ds:_wcsnicmp  +
add esp 0Ch +
test eax eax +
jz loc_100906D  +
push ebx  +
push off_100A074  +
push edi  +
call ds:_wcsnicmp  +
add esp 0Ch +
test eax eax +
jnz loc_1009223  +
movzx eax word ptr [edi+ebx*2] +
cmp ax 20h +
jz loc_1009093  +
cmp ax 0Dh +
jz loc_1009093  +
cmp ax 9 +
jz loc_1009093  +
cmp ax 0Ah +
jz loc_1009093  +
cmp ax 3Eh +
jnz loc_1009223  +
push esi  +
call sub_1006940  +
test al al +
jz loc_1009223  +
xor ebx ebx +
jmp loc_100920C  +
lea eax [ebp+var_4] +
push eax  +
push esi  +
call sub_1006633  +
mov [ebp+var_C] eax +
cmp eax ebx +
jz loc_1009202  +
push [ebp+var_4]  +
mov edi ds:_wcsnicmp +
push off_100A078  +
push eax  +
call edi  +
add esp 0Ch +
test eax eax +
jnz loc_100915A  +
inc [ebp+var_8]  +
push esi  +
xor edi edi +
call sub_1006940  +
test al al +
jz loc_100913B  +
push ebx  +
push ebx  +
push off_100A07C  +
push esi  +
call sub_10068BC  +
test al al +
jz loc_1009131  +
jmp loc_10090FF  +
xor ebx ebx +
push esi  +
inc edi  +
call sub_1008D58  +
mov [ebp+lpMem] eax +
cmp eax ebx +
jnz loc_1009264  +
push esi  +
call sub_1006807  +
test al al +
jz loc_100912F  +
push 0  +
push 0  +
push off_100A07C  +
push esi  +
call sub_10068BC  +
test al al +
jnz loc_10090FD  +
xor ebx ebx +
push esi  +
call sub_10069F2  +
cmp edi ebx +
jnz loc_1009141  +
push 1  +
push 78h  +
jmp loc_100914E  +
cmp edi 1 +
jbe loc_1009202  +
push 1  +
push 7Dh  +
call sub_1005BDE  +
pop ecx  +
pop ecx  +
jmp loc_1009202  +
push [ebp+var_4]  +
push off_100A094  +
push [ebp+var_C]  +
call edi  +
add esp 0Ch +
test eax eax +
jnz loc_1009202  +
push esi  +
call sub_1006940  +
test al al +
jz loc_1009202  +
push ebx  +
push ebx  +
push off_100A098  +
push esi  +
call sub_10068BC  +
test al al +
jz loc_10091FC  +
lea eax [ebp+var_4] +
push eax  +
push off_100A0F8  +
push esi  +
call sub_1006698  +
push esi  +
call sub_1006940  +
test al al +
jz loc_10091FC  +
push ebx  +
push ebx  +
push off_100A09C  +
push esi  +
call sub_10068BC  +
test al al +
jz loc_10091F6  +
push esi  +
call sub_1006940  +
test al al +
jz loc_10091F6  +
jmp loc_10091DE  +
push esi  +
call sub_100806A  +
push esi  +
mov [ebp+lpMem] eax +
call sub_1006807  +
test al al +
jz loc_10091F0  +
push ebx  +
push ebx  +
push off_100A0A0  +
push esi  +
call sub_10068BC  +
test al al +
jnz loc_10091CB  +
push esi  +
call sub_10069F2  +
push esi  +
call sub_10069F2  +
push esi  +
call sub_10069F2  +
push esi  +
call sub_1006807  +
test al al +
jz loc_100921D  +
push ebx  +
push ebx  +
push ebx  +
push esi  +
call sub_10068BC  +
test al al +
jnz loc_10090A8  +
push esi  +
call sub_10069F2  +
xor ebx ebx +
push esi  +
call sub_1006807  +
test al al +
jz loc_1009240  +
push ebx  +
push ebx  +
push ebx  +
push esi  +
call sub_10068BC  +
test al al +
jnz loc_1009014  +
cmp [ebp+var_8] ebx +
jnz loc_100924B  +
push 1  +
push 77h  +
jmp loc_1009255  +
cmp [ebp+var_8] 1 +
jbe loc_100925C  +
push 1  +
push 7Ch  +
call sub_1005BDE  +
pop ecx  +
pop ecx  +
push esi  +
call sub_10069F2  +
jmp loc_1009266  +
xor ebx ebx +
pop edi  +
cmp esi ebx +
jz loc_1009280  +
push esi  +
call sub_100639C  +
push esi  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop esi  +
cmp [ebp+lpMem] ebx +
jz loc_100928B  +
call sub_1006E35  +
mov eax [ebp+lpMem] +
pop ebx  +
leave   +
retn 4  +
***
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb cs20  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp+0] eax +
retn   +
sub eax 1000h +
test [eax] eax +
jmp cs10  +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-1Ch] +
xor ecx ebp +
call sub_10055B7  +
jmp __SEH_epilog4  +
***
