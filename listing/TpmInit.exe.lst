mov edi edi +
push esi  +
mov esi eax +
xor eax eax +
mov ecx edx +
test edx edx +
jz loc_10030DE  +
cmp [esi] al +
jz loc_10030DA  +
inc esi  +
dec edx  +
jnz loc_10030D2  +
test edx edx +
jnz loc_10030E3  +
mov eax 80070057h +
pop esi  +
test edi edi +
jz locret_10030F4  +
test eax eax +
jl loc_10030F1  +
sub ecx edx +
mov [edi] ecx +
retn   +
and dword ptr [edi] 0 +
retn   +
***
mov edi edi +
push esi  +
mov esi eax +
xor eax eax +
mov ecx edx +
test edx edx +
jz loc_1003115  +
cmp [esi] ax +
jz loc_1003111  +
inc esi  +
inc esi  +
dec edx  +
jnz loc_1003107  +
test edx edx +
jnz loc_100311A  +
mov eax 80070057h +
pop esi  +
test edi edi +
jz locret_100312B  +
test eax eax +
jl loc_1003128  +
sub ecx edx +
mov [edi] ecx +
retn   +
and dword ptr [edi] 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
test ecx ecx +
jz loc_1003141  +
cmp ecx [ebp+arg_0] +
jbe loc_1003146  +
mov eax 80070057h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
test [ebp+arg_8] 100h +
jz loc_1003174  +
cmp [ebp+arg_0] eax +
jnz loc_1003168  +
cmp ecx eax +
jnz loc_100316D  +
cmp ecx [ebp+arg_4] +
jbe loc_100317C  +
mov eax 80070057h +
jmp loc_100317C  +
push [ebp+arg_4]  +
call sub_1003131  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_10031BA  +
cmp [ebp+arg_4] eax +
jz loc_10031B6  +
movzx edx word ptr [ebx] +
test dx dx +
jz loc_10031B6  +
mov [ecx] dx +
inc ecx  +
inc ecx  +
inc ebx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_1003199  +
test esi esi +
jnz loc_10031C2  +
dec ecx  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
xor edx edx +
mov [ecx] dx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_10031D0  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_8]  +
mov esi eax +
push [ebp+arg_4]  +
xor ebx ebx +
dec esi  +
push esi  +
push edi  +
call ds:__imp__vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_1003205  +
cmp eax esi +
ja loc_1003205  +
jz loc_100320A  +
jmp loc_1003212  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
mov eax esi +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100321B  +
mov [ecx] eax +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
shr esi 1 +
jz loc_1003252  +
test [ebp+arg_8] 1000h +
jz loc_1003252  +
mov edx [ebp+arg_4] +
lea eax [edi+ecx*2] +
mov [edx] eax +
mov edx esi +
sub edx ecx +
xor ecx ecx +
mov [ebx] edx +
mov [eax] cx +
test [ebp+arg_8] 400h +
jz loc_100329A  +
mov eax [ebp+arg_8] +
push [ebp+arg_0]  +
and eax 0FFh +
push eax  +
push edi  +
mov [ebp+var_4] eax +
call memset  +
add esp 0Ch +
cmp [ebp+var_4] 0 +
jnz loc_1003282  +
mov eax [ebp+arg_4] +
mov [eax] edi +
mov [ebx] esi +
jmp loc_100329A  +
test esi esi +
jbe loc_10032B3  +
mov ecx [ebp+arg_4] +
lea eax [edi+esi*2-2] +
mov [ecx] eax +
xor ecx ecx +
mov dword ptr [ebx] 1 +
mov [eax] cx +
test esi esi +
jbe loc_10032B3  +
test [ebp+arg_8] 800h +
jz loc_10032B3  +
mov eax [ebp+arg_4] +
mov [eax] edi +
xor eax eax +
mov [ebx] esi +
mov [edi] ax +
xor eax eax +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+10h] +
test eax eax +
jz loc_10032D5  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi+10h] 0 +
mov eax [esi+0Ch] +
test eax eax +
jz loc_10032E6  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi+0Ch] 0 +
mov eax [esi+8] +
test eax eax +
jz loc_10032F7  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi+8] 0 +
mov eax [esi+14h] +
test eax eax +
jz loc_1003309  +
push eax  +
call ds:SysFreeString  +
and dword ptr [esi+14h] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10032BF  +
test [ebp+arg_0] 1 +
jz loc_100332A  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 7FFFFFFFh +
ja loc_100334E  +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
xor eax eax +
jmp loc_1003359  +
mov eax [ebp+arg_4] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
ja loc_1003380  +
mov eax [ebp+arg_0] +
jb loc_1003377  +
cmp eax 0FFFFFFFFh +
ja loc_1003380  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_100338B  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mul  [ebp+arg_4] +
push [ebp+arg_8]  +
push edx  +
push eax  +
call sub_1003362  +
pop ebp  +
retn 0Ch  +
***
push offset dword_100E780  +
call __SEH_prolog4  +
xor edi edi +
mov [ebp-1Ch] edi +
mov [ebp-20h] edi +
mov [ebp-4] edi +
mov eax [ebp+8] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx di +
jnz loc_10033CF  +
sub eax edx +
sar eax 1 +
mov [ebp-24h] eax +
mov [ebp-1Ch] edi +
lea ecx [ebp-24h] +
push ecx  +
push 1  +
push eax  +
call sub_100AF28  +
mov esi eax +
mov [ebp-1Ch] esi +
cmp esi edi +
jnz loc_1003452  +
lea eax [ebp-24h] +
push eax  +
push 2  +
push dword ptr [ebp-24h]  +
call sub_1003394  +
mov esi eax +
mov [ebp-1Ch] esi +
cmp esi edi +
jnz loc_1003452  +
push edi  +
lea eax [ebp-20h] +
push eax  +
push edi  +
push 20006h  +
push edi  +
push edi  +
push edi  +
push offset SubKey  +
push 80000002h  +
call ds:RegCreateKeyExW  +
mov esi eax +
mov [ebp-1Ch] esi +
cmp esi edi +
jnz loc_1003452  +
push dword ptr [ebp-24h]  +
push dword ptr [ebp+8]  +
push 2  +
push edi  +
push offset ValueName  +
push dword ptr [ebp-20h]  +
call ds:RegSetValueExW  +
mov esi eax +
mov [ebp-1Ch] esi +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_100347D  +
cmp esi edi +
jle loc_100346E  +
and esi 0FFFFh +
or esi 80070000h +
mov eax esi +
call __SEH_epilog4  +
retn 4  +
***
cmp [ebp-20h] edi +
jz locret_100348E  +
push dword ptr [ebp-20h]  +
call ds:RegCloseKey  +
mov [ebp-20h] edi +
retn   +
***
call __SEH_prolog4  +
cmp [ebp-20h] edi +
jz locret_100352A  +
push dword ptr [ebp-20h]  +
call ds:RegCloseKey  +
mov [ebp-20h] edi +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100DDDB  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp-2] +
stos   +
mov ax word ptr dword_10100C0 +
mov [ebp+String] ax +
lea eax [ebp+String] +
push eax  +
push 427h  +
push [ebp+hDlg]  +
call ds:GetDlgItem  +
push eax  +
call ds:SetWindowTextW  +
pop edi  +
leave   +
retn 4  +
***
call __SEH_prolog4  +
cmp [ebp-20h] esi +
jz loc_1003644  +
push dword ptr [ebp-20h]  +
call ds:CloseHandle  +
mov [ebp-20h] esi +
cmp [ebp-24h] esi +
jz loc_1003655  +
push dword ptr [ebp-24h]  +
call ds:CloseHandle  +
mov [ebp-24h] esi +
cmp [ebp-1Ch] esi +
jz locret_1003666  +
push dword ptr [ebp-1Ch]  +
call ds:CloseHandle  +
mov [ebp-1Ch] esi +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+0Ch] 3 +
jnz loc_10037B8  +
push esi  +
push edi  +
mov edi [ebp+14h] +
push 4  +
mov edx offset aHelpWhatshould +
mov ecx edi +
pop esi  +
mov ax [ecx] +
cmp ax [edx] +
jnz loc_10036AE  +
test ax ax +
jz loc_10036AA  +
mov ax [ecx+2] +
cmp ax [edx+2] +
jnz loc_10036AE  +
add ecx esi +
add edx esi +
test ax ax +
jnz loc_100368A  +
xor eax eax +
jmp loc_10036B3  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_10036C1  +
push offset aTpmadmin_chmHt  +
jmp loc_10037AE  +
mov ecx offset aHelpHowdoiconn +
mov eax edi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_10036EC  +
test dx dx +
jz loc_10036E8  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_10036EC  +
add eax esi +
add ecx esi +
test dx dx +
jnz loc_10036C8  +
xor eax eax +
jmp loc_10036F1  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_10036FF  +
push offset aTpmadmin_chm_0  +
jmp loc_10037AE  +
mov ecx offset aHelpHowdoiallo +
mov eax edi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100372A  +
test dx dx +
jz loc_1003726  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100372A  +
add eax esi +
add ecx esi +
test dx dx +
jnz loc_1003706  +
xor eax eax +
jmp loc_100372F  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_100373A  +
push offset aTpmadmin_chm_1  +
jmp loc_10037AE  +
mov ecx offset aHelpHowdoisetu +
mov eax edi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1003765  +
test dx dx +
jz loc_1003761  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1003765  +
add eax esi +
add ecx esi +
test dx dx +
jnz loc_1003741  +
xor eax eax +
jmp loc_100376A  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_1003775  +
push offset aTpmadmin_chm_2  +
jmp loc_10037AE  +
mov ecx offset aHelpHowdoitrou +
mov eax edi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_10037A0  +
test dx dx +
jz loc_100379C  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_10037A0  +
add eax esi +
add ecx esi +
test dx dx +
jnz loc_100377C  +
xor eax eax +
jmp loc_10037A5  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_10037B6  +
push offset aTpmadmin_chm_3  +
push dword ptr [ebp+8]  +
call sub_1003530  +
pop edi  +
pop esi  +
xor eax eax +
pop ebp  +
retn 14h  +
***
call __SEH_prolog4  +
xor eax eax +
mov [ebp-1Ch] eax +
mov [ebp-2Ch] eax +
mov [ebp-28h] eax +
mov [ebp-4] eax +
mov esi [ebp+0Ch] +
mov [esi] eax +
push dword ptr [ebp+8]  +
call ds:GetWindowTextLengthW  +
mov ebx eax +
mov [ebp-28h] ebx +
lea eax [ebx+ebx+2] +
push eax  +
push 8  +
mov edi ds:GetProcessHeap +
call edi  +
push eax  +
call ds:HeapAlloc  +
mov [esi] eax +
test eax eax +
jnz loc_1003815  +
mov dword ptr [ebp-1Ch] 8007000Eh +
jmp loc_1003885  +
lea ecx [ebx+1] +
push ecx  +
push eax  +
push dword ptr [ebp+8]  +
call ds:GetWindowTextW  +
mov [ebp-2Ch] eax +
test eax eax +
jnz loc_1003885  +
test ebx ebx +
jz loc_1003885  +
call ds:GetLastError  +
test eax eax +
jle loc_1003842  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp-1Ch] eax +
mov eax [esi] +
test eax eax +
jz loc_1003885  +
push eax  +
xor ebx ebx +
push ebx  +
call edi  +
push eax  +
call ds:HeapSize  +
cmp eax 0FFFFFFFFh +
jz loc_1003883  +
mov [ebp-24h] eax +
mov eax [esi] +
mov [ebp-20h] eax +
cmp [ebp-24h] ebx +
jz loc_1003877  +
mov eax [ebp-20h] +
mov [eax] bl +
inc dword ptr [ebp-20h]  +
dec dword ptr [ebp-24h]  +
jmp loc_1003865  +
***
push dword ptr [esi]  +
push ebx  +
call edi  +
push eax  +
call ds:HeapFree  +
mov [esi] ebx +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_10038A5  +
mov eax [ebp-1Ch] +
call __SEH_epilog4  +
retn 8  +
***
cmp dword ptr [ebp-1Ch] 0 +
jge locret_10038DF  +
mov eax [esi] +
test eax eax +
jz locret_10038DF  +
push eax  +
push 0  +
call edi  +
push eax  +
call ds:HeapSize  +
cmp eax 0FFFFFFFFh +
jz loc_10038DC  +
mov ecx [esi] +
test eax eax +
jz loc_10038CF  +
mov byte ptr [ecx] 0 +
inc ecx  +
dec eax  +
jnz loc_10038C8  +
push dword ptr [esi]  +
push 0  +
call edi  +
push eax  +
call ds:HeapFree  +
and dword ptr [esi] 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
mov eax dword_1010004 +
xor eax ebp +
mov [ebp+var_4] eax +
call ds:GetUserDefaultUILanguage  +
movzx eax ax +
test ax ax +
jz loc_1003929  +
push 10h  +
lea ecx [ebp+LCData] +
push ecx  +
movzx eax ax +
push 58h  +
push eax  +
call ds:GetLocaleInfoW  +
test eax eax +
jz loc_1003929  +
test [ebp+var_16] 800h +
jz loc_1003929  +
xor eax eax +
inc eax  +
jmp loc_100392B  +
xor eax eax +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1009DC4  +
leave   +
retn   +
***
call __SEH_prolog4  +
cmp [ebp-1Ch] esi +
jz locret_10039DE  +
push dword ptr [ebp-1Ch]  +
call ds:RegCloseKey  +
mov [ebp-1Ch] esi +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
test edx edx +
jz loc_10039FA  +
cmp edx 7FFFFFFFh +
jbe loc_10039FF  +
mov eax 80070057h +
test eax eax +
jl loc_1003A15  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_1003185  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
mov ecx 80070057h +
test edx edx +
jz loc_1003A39  +
cmp edx 7FFFFFFFh +
jbe loc_1003A3B  +
mov eax ecx +
test eax eax +
jl loc_1003A64  +
cmp [ebp+arg_C] 7FFFFFFEh +
jbe loc_1003A54  +
mov edx [ebp+arg_0] +
mov eax ecx +
xor ecx ecx +
mov [edx] cx +
jmp loc_1003A64  +
push [ebp+arg_C]  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 0  +
call sub_1003185  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
push ebx  +
xor eax eax +
push esi  +
mov esi 7FFFFFFFh +
test edx edx +
jz loc_1003A86  +
cmp edx esi +
jbe loc_1003A8B  +
mov eax 80070057h +
mov ebx [ebp+arg_0] +
test eax eax +
jl loc_1003AA3  +
push edi  +
lea edi [ebp+arg_0] +
mov eax ebx +
call sub_10030FA  +
mov ecx [ebp+arg_0] +
pop edi  +
jmp loc_1003AA5  +
xor ecx ecx +
test eax eax +
jl loc_1003ABC  +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_8] +
push esi  +
sub edx ecx +
push 0  +
lea ecx [ebx+ecx*2] +
call sub_1003185  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_1003ADC  +
cmp [ebp+arg_4] 7FFFFFFFh +
jbe loc_1003AE1  +
mov eax 80070057h +
test eax eax +
jl loc_1003AFB  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
push 0  +
call sub_10031DC  +
pop edi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov ecx [ebp+arg_4] +
push esi  +
push edi  +
push [ebp+arg_10]  +
mov edi [ebp+arg_0] +
push 7FFFFFFFh  +
push edi  +
call sub_100314F  +
mov esi eax +
xor eax eax +
cmp esi eax +
jl loc_1003C2D  +
test [ebp+arg_10] 100h +
push ebx  +
mov ebx ecx +
mov [ebp+var_8] edi +
mov [ebp+var_4] ebx +
jz loc_1003B49  +
cmp [ebp+arg_14] eax +
jnz loc_1003B49  +
mov [ebp+arg_14] offset dword_1001370 +
xor esi esi +
test [ebp+arg_10] 0FFFFE000h +
jz loc_1003B68  +
mov esi 80070057h +
cmp ecx eax +
jz loc_1003BE6  +
xor eax eax +
mov [edi] ax +
jmp loc_1003BE6  +
cmp ecx eax +
jnz loc_1003B89  +
mov edx [ebp+arg_14] +
cmp [edx] ax +
jz loc_1003C17  +
mov esi edi +
neg esi  +
sbb esi esi +
and esi 23h +
add esi 80070057h +
jmp loc_1003BE6  +
mov [ebp+var_8] eax +
lea eax [ebp+arg_18] +
push eax  +
push [ebp+arg_14]  +
lea eax [ebp+var_8] +
push eax  +
mov eax ecx +
call sub_10031DC  +
mov ecx [ebp+var_8] +
mov esi eax +
sub ebx ecx +
lea eax [edi+ecx*2] +
mov [ebp+var_8] eax +
mov [ebp+var_4] ebx +
test esi esi +
jl loc_1003BE3  +
mov ecx [ebp+arg_10] +
test ecx 200h +
jz loc_1003C17  +
cmp ebx 1 +
jbe loc_1003C17  +
lea edx [ebx+ebx] +
cmp edx 2 +
jbe loc_1003C17  +
add edx 0FFFFFFFEh +
push edx  +
and ecx 0FFh +
push ecx  +
add eax 2 +
push eax  +
call memset  +
add esp 0Ch +
jmp loc_1003C17  +
mov ecx [ebp+arg_4] +
test [ebp+arg_10] 1C00h +
jz loc_1003C0B  +
test ecx ecx +
jz loc_1003C0B  +
push [ebp+arg_10]  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ecx+ecx] +
push eax  +
lea ebx [ebp+var_4] +
xor ecx ecx +
call sub_1003228  +
mov ebx [ebp+var_4] +
test esi esi +
jge loc_1003C17  +
cmp esi 8007007Ah +
jnz loc_1003C2C  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_1003C23  +
mov ecx [ebp+var_8] +
mov [eax] ecx +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_1003C2C  +
mov [eax] ebx +
pop ebx  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_8] +
test eax eax +
jz loc_1003C5A  +
mov edx [ebp+arg_4] +
cmp edx 7FFFFFFFh +
ja loc_1003C5A  +
call sub_10030C5  +
jmp loc_1003C5F  +
mov eax 80070057h +
test eax eax +
jge loc_1003C6A  +
test edi edi +
jz loc_1003C6A  +
and dword ptr [edi] 0 +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_8] +
test eax eax +
jz loc_1003C96  +
mov edx [ebp+arg_4] +
cmp edx 7FFFFFFFh +
ja loc_1003C96  +
call sub_10030FA  +
jmp loc_1003C9B  +
mov eax 80070057h +
test eax eax +
jge loc_1003CA6  +
test edi edi +
jz loc_1003CA6  +
and dword ptr [edi] 0 +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
test ecx ecx +
jz loc_1003CC5  +
push 1  +
call sub_1003310  +
and dword ptr [esi] 0 +
mov eax [esi+4] +
test eax eax +
jz loc_1003CD6  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi+4] 0 +
mov eax [esi+8] +
test eax eax +
jz loc_1003CE8  +
push eax  +
call ds:SysFreeString  +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
call __SEH_prolog4  +
cmp [ebp-1Ch] edi +
jz locret_1003DC2  +
push dword ptr [ebp-1Ch]  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov [ebp-1Ch] edi +
retn   +
***
call __SEH_prolog4_GS  +
cmp dword ptr [ebp-22Ch] 0 +
jz loc_1003EFA  +
push dword ptr [ebp-22Ch]  +
call ds:SysFreeString  +
mov eax [ebp-230h] +
test eax eax +
jz locret_1003F0A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
retn   +
***
call __SEH_prolog4  +
cmp [ebp-24h] edi +
jz loc_1004032  +
push dword ptr [ebp-24h]  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp [ebp-20h] edi +
jz locret_1004048  +
push dword ptr [ebp-20h]  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
retn   +
***
push offset dword_100E880  +
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp-1Ch] ebx +
mov [ebp-20h] ebx +
mov [ebp-24h] ebx +
mov [ebp-40h] ebx +
xor eax eax +
lea edi [ebp-3Ch] +
stos   +
stos   +
stos   +
mov [ebp-30h] ebx +
mov [ebp-28h] ebx +
mov [ebp-2Ch] ebx +
mov [ebp-4] ebx +
mov esi [ebp+8] +
mov eax [esi] +
lea ecx [ebp-30h] +
push ecx  +
push esi  +
call dword ptr [eax+28h]  +
mov [ebp-1Ch] eax +
cmp eax ebx +
jnz loc_1004168  +
mov eax [esi] +
mov ecx [ebp-30h] +
or ecx 40h +
push ecx  +
push esi  +
call dword ptr [eax+24h]  +
mov [ebp-1Ch] eax +
cmp eax ebx +
jnz loc_1004168  +
lea eax [ebp-24h] +
push eax  +
push 0A2h  +
call sub_1003CEF  +
mov [ebp-1Ch] eax +
cmp eax ebx +
jnz loc_1004168  +
lea eax [ebp-20h] +
push eax  +
push 0A3h  +
call sub_1003CEF  +
mov [ebp-1Ch] eax +
cmp eax ebx +
jnz loc_1004168  +
mov eax [ebp-24h] +
mov [ebp-40h] eax +
mov dword ptr [ebp-3Ch] (offset dword_1001864+20h) +
mov eax [ebp-20h] +
mov [ebp-38h] eax +
mov dword ptr [ebp-34h] (offset dword_1001864+18h) +
mov eax [esi] +
lea ecx [ebp-40h] +
push ecx  +
push 2  +
push esi  +
call dword ptr [eax+10h]  +
mov [ebp-1Ch] eax +
cmp eax ebx +
jnz loc_1004168  +
mov eax [esi] +
push 1  +
push esi  +
call dword ptr [eax+14h]  +
mov [ebp-1Ch] eax +
cmp eax ebx +
jnz loc_1004168  +
mov eax [esi] +
push (offset dword_1001864+10h)  +
push esi  +
call dword ptr [eax+58h]  +
mov [ebp-1Ch] eax +
cmp eax ebx +
jnz loc_1004168  +
lea eax [ebp-2Ch] +
push eax  +
push ebx  +
push ebx  +
push offset dword_10022AC  +
call SHGetKnownFolderIDList  +
mov [ebp-1Ch] eax +
cmp eax ebx +
jnz loc_1004168  +
lea eax [ebp-28h] +
push eax  +
push offset dword_1001864  +
push dword ptr [ebp-2Ch]  +
call ds:SHCreateItemFromIDList  +
mov [ebp-1Ch] eax +
cmp eax ebx +
jnz loc_1004168  +
mov eax [esi] +
push dword ptr [ebp-28h]  +
push esi  +
call dword ptr [eax+30h]  +
mov [ebp-1Ch] eax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1004181  +
mov eax [ebp-1Ch] +
call __SEH_epilog4  +
retn 4  +
***
cmp [ebp-20h] ebx +
jz loc_1004197  +
push dword ptr [ebp-20h]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp [ebp-24h] ebx +
jz loc_10041AD  +
push dword ptr [ebp-24h]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax [ebp-28h] +
cmp eax ebx +
jz loc_10041BD  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-28h] ebx +
cmp [ebp-2Ch] ebx +
jz locret_10041CB  +
push dword ptr [ebp-2Ch]  +
call ds:SHELL32_155  +
retn   +
***
xor esi esi +
cmp [ebp-20h] esi +
jz loc_10043EA  +
push dword ptr [ebp-20h]  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp [ebp-24h] esi +
jz locret_1004400  +
push dword ptr [ebp-24h]  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
retn   +
***
push offset dword_100E8C0  +
call __SEH_prolog4  +
xor edi edi +
mov [ebp-20h] edi +
mov [ebp-24h] edi +
mov [ebp-1Ch] edi +
mov [ebp-2Ch] edi +
mov [ebp-28h] edi +
mov [ebp-4] edi +
mov eax [ebp+8] +
mov ecx [eax] +
lea edx [ebp-28h] +
push edx  +
push eax  +
call dword ptr [ecx+50h]  +
mov [ebp-20h] eax +
cmp eax edi +
jnz loc_10044AE  +
mov eax [ebp-28h] +
mov ecx [eax] +
lea edx [ebp-1Ch] +
push edx  +
push 80058000h  +
push eax  +
call dword ptr [ecx+14h]  +
mov [ebp-20h] eax +
cmp eax edi +
jnz loc_10044AE  +
lea eax [ebp-2Ch] +
push eax  +
push 104h  +
push dword ptr [ebp-1Ch]  +
call sub_1003C74  +
mov [ebp-20h] eax +
cmp eax edi +
jnz loc_10044AE  +
mov esi [ebp-2Ch] +
lea eax [esi+esi+2] +
push eax  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov ebx eax +
mov [ebp-24h] ebx +
cmp ebx edi +
jnz loc_1004494  +
mov dword ptr [ebp-20h] 8007000Eh +
jmp loc_10044AE  +
push dword ptr [ebp-1Ch]  +
inc esi  +
push esi  +
push ebx  +
call sub_10039E4  +
mov [ebp-20h] eax +
cmp eax edi +
jnz loc_10044AE  +
mov eax [ebp+0Ch] +
mov [eax] ebx +
mov [ebp-24h] edi +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_10044C7  +
mov eax [ebp-20h] +
call __SEH_epilog4  +
retn 8  +
***
mov eax [ebp-28h] +
cmp eax edi +
jz loc_10044D7  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-28h] edi +
cmp [ebp-1Ch] edi +
jz loc_10044E8  +
push dword ptr [ebp-1Ch]  +
call ds:CoTaskMemFree  +
mov [ebp-1Ch] edi +
cmp [ebp-24h] edi +
jz locret_1004501  +
push dword ptr [ebp-24h]  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov [ebp-24h] edi +
retn   +
***
add byte ptr lpMem[ecx] ah +
cmp eax esi +
jz loc_1004575  +
mov ecx [ebp-1Ch] +
mov edx [ecx] +
push eax  +
push ecx  +
call dword ptr [edx+3Ch]  +
mov [ebp-20h] eax +
cmp eax esi +
jnz loc_10045D9  +
jmp loc_10045B8  +
mov dword ptr [ebp-28h] 10h +
push 20h  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov edi eax +
mov [ebp-24h] edi +
cmp edi esi +
jnz loc_100459F  +
mov dword ptr [ebp-20h] 8007000Eh +
jmp loc_10045D9  +
lea eax [ebp-28h] +
push eax  +
push edi  +
call ds:GetComputerNameW  +
test eax eax +
jz loc_10045B8  +
mov eax [ebp-1Ch] +
mov ecx [eax] +
push edi  +
push eax  +
call dword ptr [ecx+3Ch]  +
mov eax [ebp-1Ch] +
mov ecx [eax] +
push dword ptr [ebp+8]  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov [ebp-20h] eax +
cmp eax esi +
jnz loc_10045D9  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp-1Ch]  +
call near ptr dword_1004404+2  +
mov [ebp-20h] eax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_10045F2  +
mov eax [ebp-20h] +
call __SEH_epilog4  +
retn 8  +
***
mov eax [ebp-1Ch] +
cmp eax esi +
jz loc_1004602  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-1Ch] esi +
cmp [ebp-24h] esi +
jz loc_100461B  +
push dword ptr [ebp-24h]  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov [ebp-24h] esi +
cmp [ebp-20h] esi +
jz locret_100463E  +
mov edi [ebp+0Ch] +
cmp edi esi +
jz locret_100463E  +
mov eax [edi] +
cmp eax esi +
jz locret_100463E  +
push eax  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov [edi] esi +
retn   +
***
push eax  +
call ds:HeapFree  +
mov eax [ebp-20h] +
cmp eax esi +
jz loc_1004713  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-20h] esi +
cmp [ebp-1Ch] esi +
jz locret_1004736  +
mov edi [ebp+0Ch] +
cmp edi esi +
jz locret_1004736  +
mov eax [edi] +
cmp eax esi +
jz locret_1004736  +
push eax  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov [edi] esi +
retn   +
***
test eax eax +
jnz loc_10047A6  +
call ds:CommDlgExtendedError  +
cmp eax edi +
jle loc_10047F2  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_10047F2  +
lea eax [ebp-20h] +
push eax  +
push 104h  +
push dword ptr [ebp-5Ch]  +
call sub_1003C74  +
mov [ebp-1Ch] eax +
cmp eax edi +
jnz loc_10047F5  +
mov esi [ebp-20h] +
lea eax [esi+esi+2] +
push eax  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
cmp eax edi +
jnz loc_10047E7  +
mov dword ptr [ebp-1Ch] 8007000Eh +
jmp loc_10047F5  +
push dword ptr [ebp-5Ch]  +
inc esi  +
push esi  +
push eax  +
call sub_10039E4  +
mov [ebp-1Ch] eax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_100480E  +
mov eax [ebp-1Ch] +
call __SEH_epilog4  +
retn 8  +
***
cmp [ebp-5Ch] edi +
jz loc_1004827  +
push dword ptr [ebp-5Ch]  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov [ebp-5Ch] edi +
cmp [ebp-6Ch] edi +
jz loc_100483D  +
push dword ptr [ebp-6Ch]  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp [ebp-1Ch] edi +
jz locret_1004860  +
mov esi [ebp+0Ch] +
cmp esi edi +
jz locret_1004860  +
mov eax [esi] +
cmp eax edi +
jz locret_1004860  +
push eax  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov [esi] edi +
retn   +
***
call ds:GetOpenFileNameW  +
test eax eax +
jnz loc_10048D0  +
call ds:CommDlgExtendedError  +
cmp eax edi +
jle loc_100491C  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100491C  +
lea eax [ebp-20h] +
push eax  +
push 104h  +
push dword ptr [ebp-5Ch]  +
call sub_1003C74  +
mov [ebp-1Ch] eax +
cmp eax edi +
jnz loc_100491F  +
mov esi [ebp-20h] +
lea eax [esi+esi+2] +
push eax  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
cmp eax edi +
jnz loc_1004911  +
mov dword ptr [ebp-1Ch] 8007000Eh +
jmp loc_100491F  +
push dword ptr [ebp-5Ch]  +
inc esi  +
push esi  +
push eax  +
call sub_10039E4  +
mov [ebp-1Ch] eax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1004938  +
mov eax [ebp-1Ch] +
call __SEH_epilog4  +
retn 8  +
***
cmp [ebp-5Ch] edi +
jz loc_1004951  +
push dword ptr [ebp-5Ch]  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov [ebp-5Ch] edi +
cmp [ebp-6Ch] edi +
jz loc_1004967  +
push dword ptr [ebp-6Ch]  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp [ebp-1Ch] edi +
jz locret_100498A  +
mov esi [ebp+0Ch] +
cmp esi edi +
jz locret_100498A  +
mov eax [esi] +
cmp eax edi +
jz locret_100498A  +
push eax  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov [esi] edi +
retn   +
***
call __SEH_prolog4  +
cmp [ebp-1Ch] esi +
jz locret_1004A48  +
push dword ptr [ebp-1Ch]  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
retn   +
***
call __SEH_prolog4  +
mov ebx ds:GetProcessHeap +
cmp [ebp-28h] edi +
jz loc_1004C10  +
push dword ptr [ebp-28h]  +
push edi  +
call ebx  +
push eax  +
mov esi ds:HeapFree +
call esi  +
jmp loc_1004C16  +
mov esi ds:HeapFree +
cmp [ebp-2Ch] edi +
jz loc_1004C27  +
push dword ptr [ebp-2Ch]  +
push edi  +
call ebx  +
push eax  +
call esi  +
mov [ebp-2Ch] edi +
cmp [ebp-20h] edi +
jz loc_1004C35  +
push dword ptr [ebp-20h]  +
push edi  +
call ebx  +
push eax  +
call esi  +
cmp [ebp-30h] edi +
jz loc_1004C43  +
push dword ptr [ebp-30h]  +
push edi  +
call ebx  +
push eax  +
call esi  +
cmp [ebp-24h] edi +
jz locret_1004C51  +
push dword ptr [ebp-24h]  +
call ds:LocalFree  +
retn   +
***
call __SEH_prolog4  +
cmp [ebp-1Ch] esi +
jz locret_1004D58  +
push dword ptr [ebp-1Ch]  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
retn   +
***
call __SEH_prolog4  +
cmp [ebp-1Ch] esi +
jz locret_1004E5F  +
push dword ptr [ebp-1Ch]  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_10100C0 +
dec eax  +
jz loc_1004EB2  +
dec eax  +
jz loc_1004EA8  +
dec eax  +
jz loc_1004E9E  +
dec eax  +
jz loc_1004E94  +
sub eax 3 +
jz loc_1004E8A  +
mov eax 0EBh +
lea ecx [eax+1] +
jmp loc_1004EBA  +
mov eax 10Ah +
lea ecx [eax+1] +
jmp loc_1004EBA  +
mov eax 0DBh +
lea ecx [eax+1] +
jmp loc_1004EBA  +
mov eax 0D4h +
lea ecx [eax+1] +
jmp loc_1004EBA  +
mov eax 0CEh +
lea ecx [eax+1] +
jmp loc_1004EBA  +
mov eax 0C7h +
lea ecx [eax+1] +
push 0FFFEh  +
push [ebp+dwMessageId]  +
push ecx  +
push eax  +
call sub_1004A4E  +
pop ebp  +
retn 4  +
***
push offset dword_100E9E0  +
call __SEH_prolog4  +
xor esi esi +
mov [ebp-2Ch] esi +
xor eax eax +
lea edi [ebp-28h] +
stos   +
stos   +
stos   +
mov [ebp-1Ch] esi +
mov [ebp-4] esi +
lea eax [ebp-1Ch] +
push eax  +
push dword ptr [ebp+0Ch]  +
call sub_1003CEF  +
cmp eax esi +
jnz loc_1004F27  +
mov dword ptr [ebp-2Ch] 10h +
mov [ebp-28h] esi +
mov eax [ebp-1Ch] +
mov [ebp-24h] eax +
mov [ebp-20h] esi +
lea eax [ebp-2Ch] +
push eax  +
push esi  +
push 1503h  +
push dword ptr [ebp+8]  +
call ds:SendMessageW  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1004F3D  +
call __SEH_epilog4  +
retn 8  +
***
cmp [ebp-1Ch] esi +
jz locret_1004F53  +
push dword ptr [ebp-1Ch]  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
retn   +
***
call __SEH_prolog4  +
test esi esi +
jz locret_1005106  +
push esi  +
push 0  +
mov edi ds:GetProcessHeap +
call edi  +
push eax  +
call ds:HeapSize  +
cmp eax 0FFFFFFFFh +
jz loc_1005102  +
mov ecx esi +
test eax eax +
jz loc_10050F6  +
mov byte ptr [ecx] 0 +
inc ecx  +
dec eax  +
jnz loc_10050EF  +
push esi  +
push 0  +
call edi  +
push eax  +
call ds:HeapFree  +
and dword ptr [ebp-1Ch] 0 +
retn   +
***
mov edi edi +
xor ebx ebx +
cmp [ebp-1100h] ebx +
jz loc_1005702  +
push dword ptr [ebp-1100h]  +
push ebx  +
call edi  +
push eax  +
mov esi ds:HeapFree +
call esi  +
mov [ebp-1100h] ebx +
jmp loc_1005708  +
mov esi ds:HeapFree +
cmp [ebp-10F0h] ebx +
jz loc_1005747  +
push dword ptr [ebp-10F0h]  +
push ebx  +
call edi  +
push eax  +
call ds:HeapSize  +
cmp eax 0FFFFFFFFh +
jz loc_1005741  +
mov ecx [ebp-10F0h] +
cmp eax ebx +
jz loc_1005735  +
mov [ecx] bl +
inc ecx  +
dec eax  +
jnz loc_100572F  +
push dword ptr [ebp-10F0h]  +
push ebx  +
call edi  +
push eax  +
call esi  +
mov [ebp-10F0h] ebx +
cmp [ebp-10F4h] ebx +
jz loc_1005786  +
push dword ptr [ebp-10F4h]  +
push ebx  +
call edi  +
push eax  +
call ds:HeapSize  +
cmp eax 0FFFFFFFFh +
jz loc_1005780  +
mov ecx [ebp-10F4h] +
cmp eax ebx +
jz loc_1005774  +
mov [ecx] bl +
inc ecx  +
dec eax  +
jnz loc_100576E  +
push dword ptr [ebp-10F4h]  +
push ebx  +
call edi  +
push eax  +
call esi  +
mov [ebp-10F4h] ebx +
cmp [ebp-10FCh] ebx +
jz loc_10057A0  +
push dword ptr [ebp-10FCh]  +
push ebx  +
call edi  +
push eax  +
call esi  +
mov [ebp-10FCh] ebx +
cmp [ebp-10ECh] ebx +
jz locret_10057C3  +
mov eax [ebp-1118h] +
mov eax [eax] +
cmp eax ebx +
jz locret_10057C3  +
push eax  +
push ebx  +
call edi  +
push eax  +
call esi  +
mov eax [ebp-1118h] +
mov [eax] ebx +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp-0A0h] ebx +
xor eax eax +
lea edi [ebp-9Ch] +
stos   +
stos   +
stos   +
stos   +
mov [ebp-1Ch] ebx +
mov [ebp-8Ch] ebx +
push 3Eh  +
push ebx  +
lea eax [ebp-88h] +
push eax  +
call memset  +
mov [ebp-0DCh] ebx +
push 38h  +
push ebx  +
lea eax [ebp-0D8h] +
push eax  +
call memset  +
add esp 18h +
mov [ebp-40h] ebx +
xor eax eax +
lea edi [ebp-3Ch] +
stos   +
stos   +
stos   +
mov [ebp-2Ch] ebx +
mov [ebp-28h] ebx +
mov [ebp-24h] ebx +
mov [ebp-20h] ebx +
mov [ebp-44h] ebx +
mov [ebp-30h] ebx +
mov [ebp-48h] ebx +
mov [ebp-4] ebx +
mov dword ptr [ebp-8Ch] 42h +
mov eax [ebp+8] +
mov [ebp-88h] eax +
mov dword ptr [ebp-78h] 98010Ch +
xor esi esi +
inc esi  +
mov eax esi +
mov [ebp-6Ch] ax +
lea eax [ebp-8Ch] +
push eax  +
call ds:PrintDlgW  +
mov [ebp+8] eax +
cmp eax ebx +
jnz loc_1005892  +
call ds:CommDlgExtendedError  +
cmp eax ebx +
jle loc_100588A  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp-1Ch] eax +
jmp loc_1005A70  +
lea eax [ebp-28h] +
push eax  +
push 0E5h  +
call sub_1003CEF  +
mov [ebp-1Ch] eax +
cmp eax ebx +
jnz loc_1005A70  +
mov dword ptr [ebp-0A0h] 14h +
mov eax [ebp-28h] +
mov [ebp-9Ch] eax +
lea eax [ebp-0A0h] +
push eax  +
push dword ptr [ebp-7Ch]  +
call ds:StartDocW  +
mov [ebp+8] eax +
cmp eax ebx +
jg loc_10058FF  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_10058E9  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp-1Ch] eax +
cmp eax 800704C7h +
jnz loc_1005A70  +
mov [ebp-1Ch] esi +
jmp loc_1005A70  +
push dword ptr [ebp-7Ch]  +
call ds:StartPage  +
mov [ebp+8] eax +
cmp eax ebx +
jg loc_100591A  +
call ds:GetLastError  +
jmp loc_100587C  +
***
push 48h  +
push 5Ah  +
push dword ptr [ebp-7Ch]  +
mov esi ds:GetDeviceCaps +
call esi  +
push eax  +
push 0Ch  +
call ds:MulDiv  +
neg eax  +
mov [ebp-44h] eax +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push eax  +
call ds:CreateFontW  +
mov [ebp-24h] eax +
cmp eax ebx +
jz loc_100590F  +
push eax  +
push dword ptr [ebp-7Ch]  +
mov edi ds:SelectObject +
call edi  +
mov [ebp-20h] eax +
cmp eax ebx +
jz loc_1005A69  +
lea eax [ebp-0DCh] +
push eax  +
push dword ptr [ebp-7Ch]  +
call ds:GetTextMetricsW  +
mov [ebp+8] eax +
cmp eax ebx +
jz loc_100590F  +
mov eax [ebp-0C8h] +
imul eax eax +
mov [ebp-40h] eax +
mov eax [ebp-0DCh] +
mov ecx [ebp-0CCh] +
add ecx eax +
imul ecx ecx +
mov [ebp-3Ch] ecx +
push 8  +
push dword ptr [ebp-7Ch]  +
call esi  +
mov ecx [ebp-40h] +
add ecx ecx +
sub eax ecx +
mov [ebp-38h] eax +
push 0Ah  +
push dword ptr [ebp-7Ch]  +
call esi  +
mov ecx [ebp-3Ch] +
add ecx ecx +
sub eax ecx +
mov [ebp-34h] eax +
mov eax [ebp-38h] +
sub eax [ebp-40h] +
push eax  +
push dword ptr [ebp-7Ch]  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-2Ch] +
push eax  +
call sub_100510C  +
mov [ebp-1Ch] eax +
cmp eax ebx +
jnz loc_1005A70  +
call sub_10038E5  +
mov [ebp-48h] eax +
mov dword ptr [ebp-30h] 100010h +
cmp eax ebx +
jz loc_10059FD  +
mov dword ptr [ebp-30h] 120012h +
push dword ptr [ebp-30h]  +
lea eax [ebp-40h] +
push eax  +
push 0FFFFFFFFh  +
push dword ptr [ebp-2Ch]  +
push dword ptr [ebp-7Ch]  +
call ds:DrawTextW  +
test eax eax +
jnz loc_1005A2C  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1005A2E  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1005A2E  +
xor eax eax +
mov [ebp-1Ch] eax +
cmp eax ebx +
jnz loc_1005A70  +
push dword ptr [ebp-7Ch]  +
call ds:EndPage  +
mov [ebp+8] eax +
cmp eax ebx +
jle loc_100590F  +
push dword ptr [ebp-7Ch]  +
call ds:EndDoc  +
mov [ebp+8] eax +
cmp eax ebx +
jle loc_100590F  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp-7Ch]  +
call edi  +
test eax eax +
jnz loc_1005A70  +
mov dword ptr [ebp-1Ch] 80004005h +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1005A89  +
mov eax [ebp-1Ch] +
call __SEH_epilog4  +
retn 8  +
***
cmp [ebp-20h] ebx +
jz loc_1005A9D  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp-7Ch]  +
call ds:SelectObject  +
mov [ebp-20h] ebx +
cmp [ebp-24h] ebx +
jz loc_1005AAE  +
push dword ptr [ebp-24h]  +
call ds:DeleteObject  +
mov [ebp-24h] ebx +
mov edi [ebp-2Ch] +
cmp edi ebx +
jz loc_1005AE2  +
push edi  +
push ebx  +
mov esi ds:GetProcessHeap +
call esi  +
push eax  +
call ds:HeapSize  +
cmp eax 0FFFFFFFFh +
jz loc_1005AE2  +
mov ecx edi +
cmp eax ebx +
jz loc_1005AD7  +
mov [ecx] bl +
inc ecx  +
dec eax  +
jnz loc_1005AD1  +
push edi  +
push ebx  +
call esi  +
push eax  +
call ds:HeapFree  +
cmp [ebp-28h] ebx +
jz locret_1005AF8  +
push dword ptr [ebp-28h]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
retn   +
***
mov esi ds:GetProcessHeap +
cmp [ebp-1Ch] ebx +
jz loc_1005C5E  +
push dword ptr [ebp-1Ch]  +
push ebx  +
call esi  +
push eax  +
call ds:HeapSize  +
cmp eax 0FFFFFFFFh +
jz loc_1005C5B  +
mov ecx [ebp-1Ch] +
cmp eax ebx +
jz loc_1005C4E  +
mov [ecx] bl +
inc ecx  +
dec eax  +
jnz loc_1005C48  +
push dword ptr [ebp-1Ch]  +
push ebx  +
call esi  +
push eax  +
call ds:HeapFree  +
mov [ebp-1Ch] ebx +
cmp [ebp-20h] ebx +
jz locret_1005C92  +
push dword ptr [ebp-20h]  +
push ebx  +
call esi  +
push eax  +
call ds:HeapSize  +
cmp eax 0FFFFFFFFh +
jz loc_1005C8F  +
mov ecx [ebp-20h] +
cmp eax ebx +
jz loc_1005C82  +
mov [ecx] bl +
inc ecx  +
dec eax  +
jnz loc_1005C7C  +
push dword ptr [ebp-20h]  +
push ebx  +
call esi  +
push eax  +
call ds:HeapFree  +
mov [ebp-20h] ebx +
retn   +
***
call __SEH_prolog4  +
cmp [ebp-1Ch] esi +
jz locret_1005D03  +
push dword ptr [ebp-1Ch]  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
retn   +
***
call __SEH_prolog4  +
cmp [ebp-1Ch] ebx +
jz locret_1005D90  +
push dword ptr [ebp-1Ch]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
retn   +
***
call __SEH_prolog4  +
cmp [ebp-1Ch] esi +
jz locret_1005E01  +
push dword ptr [ebp-1Ch]  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
retn   +
***
call __SEH_prolog4  +
mov edi [ebp-1Ch] +
cmp edi ebx +
jz locret_1005EA9  +
push edi  +
push ebx  +
mov esi ds:GetProcessHeap +
call esi  +
push eax  +
call ds:HeapSize  +
cmp eax 0FFFFFFFFh +
jz locret_1005EA9  +
mov ecx edi +
cmp eax ebx +
jz loc_1005E9E  +
mov [ecx] bl +
inc ecx  +
dec eax  +
jnz loc_1005E98  +
push edi  +
push ebx  +
call esi  +
push eax  +
call ds:HeapFree  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+8] +
push 0FFFFFFEBh  +
push edi  +
call ds:GetWindowLongW  +
mov esi eax +
mov eax [ebp+0Ch] +
sub eax 4Eh +
jz loc_1005F8F  +
sub eax 5 +
jz loc_1005F3F  +
sub eax 0BDh +
jz loc_1005F2B  +
dec eax  +
jnz loc_1005FF7  +
mov eax [ebp+10h] +
shr eax 10h +
test ax ax +
jnz loc_1005FF7  +
mov eax 3EDh +
cmp [ebp+10h] ax +
jnz loc_1005F04  +
push 8Eh  +
jmp loc_1005F18  +
mov eax 3EEh +
cmp [ebp+10h] ax +
jnz loc_1005FF7  +
push 8Fh  +
push 0  +
push 472h  +
push edi  +
call ds:SendMessageW  +
jmp loc_1005FF7  +
mov eax [ebp+14h] +
push dword ptr [eax+1Ch]  +
push 0FFFFFFEBh  +
push edi  +
call ds:SetWindowLongW  +
jmp loc_1005FF7  +
mov eax dword_10100C0 +
test eax eax +
jz loc_1005F82  +
jle loc_1005FF7  +
cmp eax 2 +
jle loc_1005F7B  +
cmp eax 3 +
jz loc_1005F74  +
cmp eax 4 +
jz loc_1005F6D  +
cmp eax 7 +
jnz loc_1005FF7  +
push offset aTpmadmin_chm_4  +
jmp loc_1005F87  +
push offset aTpmadmin_chm_5  +
jmp loc_1005F87  +
push offset aTpmadmin_chm_6  +
jmp loc_1005F87  +
push offset aTpmadmin_chm_7  +
jmp loc_1005F87  +
push offset aTpmadmin_chm_8  +
push edi  +
call sub_1003530  +
jmp loc_1005FF7  +
mov ecx [ebp+14h] +
mov eax [ecx+8] +
cmp eax 0FFFFFF38h +
jz loc_1005FBB  +
cmp eax 0FFFFFFFCh +
jz loc_1005FA6  +
cmp eax 0FFFFFFFEh +
jnz loc_1005FF7  +
cmp dword ptr [ecx+4] 3EFh +
jnz loc_1005FF7  +
push offset a7349ec7cFbb543  +
call sub_1003DC8  +
jmp loc_1005FF7  +
push edi  +
call sub_100354D  +
cmp dword ptr [esi+18h] 89h +
jz loc_1005FD7  +
cmp dword_10100C0 3 +
jz loc_1005FD7  +
push 11h  +
jmp loc_1005FD9  +
push 10h  +
push 0  +
push 470h  +
push edi  +
call ds:SendMessageW  +
push 17h  +
push 11h  +
push 48Ah  +
push edi  +
call ds:PostMessageW  +
pop edi  +
xor eax eax +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+0Ch] 4Eh +
jz loc_100606E  +
cmp dword ptr [ebp+0Ch] 53h +
jnz loc_10060FF  +
mov eax dword_10100C0 +
test eax eax +
jz loc_100605C  +
jle loc_10060FF  +
cmp eax 2 +
jle loc_1006055  +
cmp eax 3 +
jz loc_100604E  +
cmp eax 4 +
jz loc_1006047  +
cmp eax 7 +
jnz loc_10060FF  +
push offset aTpmadmin_chm_4  +
jmp loc_1006061  +
push offset aTpmadmin_chm_5  +
jmp loc_1006061  +
push offset aTpmadmin_chm_6  +
jmp loc_1006061  +
push offset aTpmadmin_chm_7  +
jmp loc_1006061  +
push offset aTpmadmin_chm_8  +
push dword ptr [ebp+8]  +
call sub_1003530  +
jmp loc_10060FF  +
mov eax [ebp+14h] +
cmp dword ptr [eax+8] 0FFFFFF38h +
jnz loc_10060FF  +
push esi  +
mov esi [ebp+8] +
push esi  +
call sub_100354D  +
push 4  +
push 0  +
push 470h  +
push esi  +
call ds:SendMessageW  +
push 17h  +
push 5  +
push 48Ah  +
push esi  +
call ds:PostMessageW  +
push 99h  +
push esi  +
call sub_1005D96  +
mov eax dword_10100C0 +
cmp eax 3 +
jnz loc_10060DB  +
push 10Ch  +
push 41Ah  +
push esi  +
call ds:GetDlgItem  +
push eax  +
call sub_1005E07  +
push 10Dh  +
jmp loc_10060F8  +
cmp eax 7 +
jnz loc_10060FE  +
push 41Ah  +
push esi  +
call ds:GetDlgItem  +
push eax  +
call ds:DestroyWindow  +
push 10Eh  +
push esi  +
call sub_1005D09  +
pop esi  +
xor eax eax +
pop ebp  +
retn 10h  +
***
call __SEH_prolog4  +
cmp [ebp-1Ch] ebx +
jge locret_10061BE  +
mov eax [esi] +
cmp eax ebx +
jz locret_10061BE  +
push eax  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov [esi] ebx +
retn   +
***
call __SEH_prolog4_GS  +
xor esi esi +
cmp [ebp-30h] esi +
jz locret_10064FA  +
push dword ptr [ebp-30h]  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov [ebp-30h] esi +
retn   +
***
call __SEH_prolog4_GS  +
xor ebx ebx +
cmp edi ebx +
jz locret_100662B  +
push edi  +
call ds:LocalFree  +
mov [ebp-828h] ebx +
retn   +
***
call __SEH_prolog4_GS  +
cmp [ebp-820h] edi +
jz locret_1006714  +
push dword ptr [ebp-820h]  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
retn   +
***
call __SEH_prolog4_GS  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1003CB0  +
test [ebp+arg_0] 1 +
jz loc_100680B  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax lpMem +
cmp eax ebx +
jz loc_10068D4  +
mov [ebp-34h] eax +
push dword ptr [ebp-34h]  +
push dword ptr [ebp-28h]  +
push dword ptr [ebp-38h]  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp-24h]  +
call sub_100CD15  +
mov [ebp-1Ch] eax +
cmp eax ebx +
jnz loc_10068F6  +
mov dword ptr [ebp-30h] 1 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_100690F  +
mov eax [ebp-30h] +
call __SEH_epilog4  +
retn 8  +
***
cmp [ebp-1Ch] ebx +
jz loc_1006917  +
mov [ebp-30h] ebx +
mov esi ds:GetProcessHeap +
cmp [ebp-24h] ebx +
jz loc_1006932  +
push dword ptr [ebp-24h]  +
push ebx  +
call esi  +
push eax  +
call ds:HeapFree  +
mov [ebp-24h] ebx +
cmp [ebp-28h] ebx +
jz loc_1006947  +
push dword ptr [ebp-28h]  +
push ebx  +
call esi  +
push eax  +
call ds:HeapFree  +
mov [ebp-28h] ebx +
cmp [ebp-20h] ebx +
jz loc_100697B  +
push dword ptr [ebp-20h]  +
push ebx  +
call esi  +
push eax  +
call ds:HeapSize  +
cmp eax 0FFFFFFFFh +
jz loc_1006978  +
mov ecx [ebp-20h] +
cmp eax ebx +
jz loc_100696B  +
mov [ecx] bl +
inc ecx  +
dec eax  +
jnz loc_1006965  +
push dword ptr [ebp-20h]  +
push ebx  +
call esi  +
push eax  +
call ds:HeapFree  +
mov [ebp-20h] ebx +
mov ecx [ebp-2Ch] +
cmp ecx ebx +
jz locret_100698C  +
push 1  +
call sub_10067F1  +
mov [ebp-2Ch] ebx +
retn   +
***
call __SEH_prolog4  +
mov ecx [ebp-20h] +
cmp ecx esi +
jz locret_1006A0F  +
push 1  +
call sub_10067F1  +
mov [ebp-20h] esi +
retn   +
***
push 18h  +
push offset dword_100EC00  +
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp-20h] ebx +
mov [ebp-1Ch] ebx +
mov [ebp-24h] ebx +
mov dword ptr [ebp-28h] 401h +
mov [ebp-4] ebx +
push 2  +
push ebx  +
call ds:CoInitializeEx  +
mov [ebp-20h] eax +
cmp eax ebx +
jnz loc_1006AAB  +
lea eax [ebp-24h] +
push eax  +
push lpMem  +
call sub_100AE54  +
mov [ebp-20h] eax +
cmp eax ebx +
jnz loc_1006AAB  +
mov esi [ebp+8] +
cmp [esi+4] ebx +
jz loc_1006A7C  +
mov ecx [ebp-24h] +
call sub_100A59B  +
mov [ebp-20h] eax +
cmp eax ebx +
jz loc_1006A7C  +
mov dword ptr [ebp-28h] 402h +
jmp loc_1006AAB  +
lea eax [ebp-1Ch] +
push eax  +
push dword ptr [esi+10h]  +
mov ecx [ebp-24h] +
call sub_100AB23  +
mov [ebp-20h] eax +
cmp eax ebx +
jnz loc_1006AA4  +
push dword ptr [ebp-1Ch]  +
mov ecx [ebp-24h] +
call sub_100AE39  +
mov [ebp-20h] eax +
cmp eax ebx +
jz loc_1006AAB  +
mov dword ptr [ebp-28h] 403h +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1006AD7  +
push ebx  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp-28h]  +
mov eax [ebp+8] +
push dword ptr [eax]  +
call ds:PostMessageW  +
call ds:_endthread  +
call __SEH_epilog4  +
retn   +
***
cmp [ebp-20h] ebx +
jz loc_1006AEC  +
cmp dword ptr [ebp-28h] 401h +
jnz loc_1006AEC  +
mov dword ptr [ebp-28h] 403h +
mov ecx [ebp-24h] +
cmp ecx ebx +
jz loc_1006AFD  +
push 1  +
call sub_10067F1  +
mov [ebp-24h] ebx +
cmp [ebp-1Ch] ebx +
jz loc_1006B37  +
push dword ptr [ebp-1Ch]  +
push ebx  +
mov esi ds:GetProcessHeap +
call esi  +
push eax  +
call ds:HeapSize  +
cmp eax 0FFFFFFFFh +
jz loc_1006B34  +
mov ecx [ebp-1Ch] +
cmp eax ebx +
jz loc_1006B27  +
mov [ecx] bl +
inc ecx  +
dec eax  +
jnz loc_1006B21  +
push dword ptr [ebp-1Ch]  +
push ebx  +
call esi  +
push eax  +
call ds:HeapFree  +
mov [ebp-1Ch] ebx +
call ds:CoUninitialize  +
retn   +
***
call __SEH_prolog4  +
mov ecx [ebp-20h] +
cmp ecx esi +
jz loc_1006E7D  +
push 1  +
call sub_10067F1  +
mov [ebp-20h] esi +
retn   +
***
push 18h  +
push offset dword_100EC40  +
call __SEH_prolog4  +
xor esi esi +
mov [ebp-1Ch] esi +
mov [ebp-20h] esi +
mov [ebp-28h] esi +
mov [ebp-24h] esi +
push 0FFFFFFEBh  +
mov edi [ebp+8] +
push edi  +
call ds:GetWindowLongW  +
mov ebx eax +
cmp dword ptr [ebp+0Ch] 4Eh +
jz loc_1006F2E  +
cmp dword ptr [ebp+0Ch] 53h +
jz loc_1006EDB  +
cmp dword ptr [ebp+0Ch] 110h +
jnz loc_10070D5  +
mov eax [ebp+14h] +
push dword ptr [eax+1Ch]  +
push 0FFFFFFEBh  +
push edi  +
call ds:SetWindowLongW  +
jmp loc_10070D5  +
***
mov eax dword_10100C0 +
cmp eax esi +
jz loc_1006F1E  +
jle loc_10070D5  +
cmp eax 2 +
jle loc_1006F17  +
cmp eax 3 +
jz loc_1006F10  +
cmp eax 4 +
jz loc_1006F09  +
cmp eax 7 +
jnz loc_10070D5  +
push offset aTpmadmin_chm_4  +
jmp loc_1006F23  +
push offset aTpmadmin_chm_5  +
jmp loc_1006F23  +
push offset aTpmadmin_chm_6  +
jmp loc_1006F23  +
push offset aTpmadmin_chm_7  +
jmp loc_1006F23  +
push offset aTpmadmin_chm_8  +
push edi  +
call sub_1003530  +
jmp loc_10070D5  +
***
mov ecx [ebp+14h] +
mov eax [ecx+8] +
cmp eax 0FFFFFF31h +
jz loc_10070F0  +
cmp eax 0FFFFFF32h +
jz loc_10070B5  +
cmp eax 0FFFFFF38h +
jz loc_1006F7B  +
cmp eax 0FFFFFFFCh +
jz loc_1006F5F  +
cmp eax 0FFFFFFFEh +
jnz loc_10070D5  +
cmp dword ptr [ecx+4] 3ECh +
jnz loc_10070D5  +
push offset a7349ec7cFbb543  +
call sub_1003DC8  +
jmp loc_10070D5  +
***
push edi  +
call sub_100354D  +
mov eax dword_10100C0 +
cmp eax 1 +
jnz loc_1006FB6  +
push 3  +
push esi  +
push 470h  +
push edi  +
call ds:SendMessageW  +
push 3ECh  +
push edi  +
mov esi ds:GetDlgItem +
call esi  +
push eax  +
call ds:DestroyWindow  +
push 85h  +
jmp loc_1007014  +
cmp eax 2 +
jnz loc_1006FE6  +
push 3  +
push esi  +
push 470h  +
push edi  +
call ds:SendMessageW  +
push 3ECh  +
push edi  +
mov esi ds:GetDlgItem +
call esi  +
push eax  +
call ds:DestroyWindow  +
push 0F7h  +
jmp loc_1007014  +
cmp eax 4 +
jnz loc_100701C  +
push 3  +
push esi  +
push 470h  +
push edi  +
call ds:SendMessageW  +
push 3ECh  +
push edi  +
mov esi ds:GetDlgItem +
call esi  +
push eax  +
call ds:DestroyWindow  +
push 0D7h  +
push edi  +
call sub_1005D09  +
jmp loc_1007031  +
push 2  +
push esi  +
push 470h  +
push edi  +
call ds:SendMessageW  +
mov esi ds:GetDlgItem +
push 17h  +
push 13h  +
push 48Ah  +
push edi  +
call ds:PostMessageW  +
mov eax [ebx+1Ch] +
cmp eax 2 +
jnz loc_100706B  +
push 87h  +
push edi  +
call sub_1005C98  +
cmp lpMem 0 +
jnz loc_1007064  +
push 0E3h  +
jmp loc_1007090  +
push 0F5h  +
jmp loc_1007090  +
cmp eax 1 +
jnz loc_10070A2  +
push 88h  +
push edi  +
call sub_1005C98  +
cmp lpMem 0 +
jnz loc_100708B  +
push 0E4h  +
jmp loc_1007090  +
push 0F6h  +
push 410h  +
push edi  +
call esi  +
push eax  +
call sub_1005E07  +
xor esi esi +
jmp loc_10070D5  +
***
push 0  +
push 6Ch  +
push 6Bh  +
call sub_1004990  +
push 0  +
***
call ds:ExitProcess  +
mov eax dword_10100C0 +
xor ecx ecx +
inc ecx  +
cmp eax ecx +
jz loc_10070CB  +
cmp eax 2 +
jz loc_10070CB  +
cmp eax 4 +
jnz loc_10070D5  +
mov dword ptr [ebp-28h] 0A4h +
mov [ebp-24h] ecx +
cmp [ebp-24h] esi +
jz loc_10070E5  +
push dword ptr [ebp-28h]  +
push esi  +
push edi  +
call ds:SetWindowLongW  +
mov eax [ebp-24h] +
call __SEH_epilog4  +
retn 10h  +
***
mov [ebp-4] esi +
lea eax [ebp-20h] +
push eax  +
push lpMem  +
call sub_100AE54  +
mov [ebp-1Ch] eax +
cmp eax esi +
jnz loc_10071C4  +
mov eax dword_10100C0 +
cmp eax 1 +
jz loc_1007139  +
cmp eax esi +
jz loc_1007139  +
cmp eax 2 +
jnz loc_100712A  +
mov ecx [ebp-20h] +
call sub_100ADE9  +
jmp loc_1007141  +
cmp eax 4 +
jnz loc_1007148  +
mov ecx [ebp-20h] +
call sub_100ADF6  +
jmp loc_1007141  +
mov ecx [ebp-20h] +
call sub_100ADDC  +
mov [ebp-1Ch] eax +
cmp eax esi +
jnz loc_10071C4  +
mov eax dword_10100C0 +
cmp eax esi +
jnz loc_1007160  +
cmp lpMem esi +
jnz loc_1007160  +
push offset aCmd_exeCStar_0  +
jmp loc_1007172  +
cmp eax 4 +
jnz loc_100717E  +
cmp lpMem esi +
jnz loc_100717E  +
push offset aCmd_exeCStartS  +
call near ptr dword_10033B0+2  +
cmp eax esi +
mov [ebp-1Ch] eax +
jnz loc_10071C4  +
xor eax eax +
cmp dword ptr [ebx+1Ch] 2 +
setz al  +
push eax  +
push lpMem  +
call sub_100C099  +
mov [ebp-1Ch] eax +
cmp eax esi +
jge loc_10071C4  +
push 0FFFEh  +
push eax  +
cmp dword ptr [ebx+1Ch] 2 +
jnz loc_10071B2  +
push 0FFh  +
push 0FEh  +
jmp loc_10071BC  +
push 101h  +
push 100h  +
call sub_1004A4E  +
mov [ebp-1Ch] esi +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_10071D4  +
jmp sub_10071D4  +
***
mov ecx [ebp-20h] +
cmp ecx esi +
jz loc_10071E5  +
push 1  +
call sub_10067F1  +
mov [ebp-20h] esi +
cmp [ebp-1Ch] esi +
jge loc_10071F2  +
push dword ptr [ebp-1Ch]  +
call sub_1004E65  +
push dword ptr [ebp-1Ch]  +
jmp loc_10070AF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
push 0FFFFFFEBh  +
xor edi edi +
push esi  +
mov [ebp-4] edi +
call ds:GetWindowLongW  +
mov ebx eax +
mov eax [ebp+0Ch] +
sub eax 4Eh +
jz loc_100733F  +
sub eax 5 +
jz loc_10072EC  +
sub eax 0BDh +
jz loc_10072DF  +
sub eax 2F1h +
jz loc_10072C8  +
dec eax  +
jz loc_100729B  +
dec eax  +
jnz loc_10073C9  +
mov esi [ebp+10h] +
cmp esi 8031000Ah +
jz loc_1007285  +
cmp esi 8031000Eh +
jz loc_1007285  +
push 0FFFEh  +
cmp esi 80280400h +
jnz loc_100727B  +
push 7Ah  +
push 79h  +
call sub_1004990  +
jmp loc_1007294  +
push esi  +
push 0A1h  +
push 79h  +
jmp loc_100728F  +
push 0FFFEh  +
push esi  +
push 74h  +
push 73h  +
call sub_1004A4E  +
push esi  +
call ds:ExitProcess  +
cmp dword ptr [ebp+10h] 80280400h +
push 0FFFEh  +
jnz loc_10072B4  +
push 77h  +
push 76h  +
call sub_1004990  +
jmp loc_10072C3  +
push dword ptr [ebp+10h]  +
push 0A1h  +
push 76h  +
call sub_1004A4E  +
push dword ptr [ebp+10h]  +
jmp loc_1007295  +
***
push 97h  +
push edi  +
push 472h  +
push esi  +
call ds:SendMessageW  +
jmp loc_10073C9  +
mov eax [ebp+14h] +
push dword ptr [eax+1Ch]  +
push 0FFFFFFEBh  +
jmp loc_10073C2  +
mov eax dword_10100C0 +
cmp eax edi +
jz loc_1007338  +
jle loc_10073C9  +
cmp eax 2 +
jle loc_1007331  +
cmp eax 3 +
jz loc_100732A  +
cmp eax 4 +
jz loc_1007323  +
cmp eax 7 +
jnz loc_10073C9  +
push offset aTpmadmin_chm_4  +
push esi  +
call sub_1003530  +
jmp loc_10073C9  +
push offset aTpmadmin_chm_5  +
jmp loc_1007318  +
***
push offset aTpmadmin_chm_6  +
jmp loc_1007318  +
***
push offset aTpmadmin_chm_7  +
jmp loc_1007318  +
***
push offset aTpmadmin_chm_8  +
jmp loc_1007318  +
***
mov eax [ebp+14h] +
mov eax [eax+8] +
cmp eax 0FFFFFF2Fh +
jz loc_10073A6  +
cmp eax 0FFFFFF38h +
jnz loc_10073C9  +
push esi  +
call sub_100354D  +
push edi  +
push edi  +
mov edi ds:SendMessageW +
push 470h  +
push esi  +
call edi  +
push 17h  +
push 1  +
push 48Ah  +
push esi  +
call ds:PostMessageW  +
push 64h  +
push 1  +
push 40Ah  +
push 3F6h  +
push esi  +
call ds:GetDlgItem  +
push eax  +
call edi  +
push ebx  +
push 0  +
push offset loc_1006A15  +
mov [ebx] esi +
call ds:_beginthread  +
add esp 0Ch +
jmp loc_10073C9  +
push 0FFFEh  +
push 0DFh  +
push 0DEh  +
call sub_1004990  +
xor eax eax +
inc eax  +
push eax  +
mov [ebp-4] eax +
push edi  +
push esi  +
call ds:SetWindowLongW  +
mov eax [ebp-4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
push 10h  +
push offset dword_100EC60  +
call __SEH_prolog4  +
xor esi esi +
mov [ebp-1Ch] esi +
mov [ebp-20h] esi +
push 0FFFFFFEBh  +
mov edi [ebp+8] +
push edi  +
call ds:GetWindowLongW  +
mov ebx eax +
mov eax [ebp+0Ch] +
sub eax 4Eh +
jz loc_100759A  +
sub eax 5 +
jz loc_1007550  +
sub eax 0BDh +
jz loc_100753C  +
dec eax  +
jnz loc_1007751  +
mov eax [ebp+10h] +
mov ecx eax +
shr ecx 10h +
test cx cx +
jnz loc_1007751  +
mov ecx 400h +
cmp ax cx +
jnz loc_1007443  +
push 0A6h  +
jmp loc_1007452  +
mov ecx 401h +
cmp ax cx +
jnz loc_1007464  +
push 0AAh  +
push esi  +
push 472h  +
push edi  +
call ds:SendMessageW  +
jmp loc_1007751  +
***
mov ecx 402h +
cmp ax cx +
jnz loc_1007751  +
mov [ebp-4] esi +
mov eax dword_10100C0 +
cmp eax 1 +
jz loc_1007490  +
cmp eax 2 +
jz loc_1007490  +
cmp eax 4 +
jz loc_1007490  +
push 0B3h  +
jmp loc_10074C7  +
lea eax [ebp-1Ch] +
push eax  +
push lpMem  +
call sub_100AE54  +
cmp eax esi +
jnz loc_10074D4  +
lea eax [ebp-20h] +
push eax  +
mov ecx [ebp-1Ch] +
call sub_100A6CE  +
cmp eax esi +
jnz loc_10074E5  +
mov eax [ebp-20h] +
cmp eax esi +
jz loc_10074E5  +
cmp eax 3 +
jz loc_10074E5  +
mov [ebx+1Ch] eax +
push 82h  +
push esi  +
push 472h  +
push edi  +
call ds:SendMessageW  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1007525  +
jmp loc_1007751  +
***
mov eax dword_10100C0 +
dec eax  +
jz loc_100751C  +
dec eax  +
jz loc_1007501  +
dec eax  +
dec eax  +
jnz loc_1007515  +
push esi  +
push 0FAh  +
push 0F9h  +
jmp loc_100750C  +
push esi  +
push 0F8h  +
push 0F7h  +
call sub_1004990  +
cmp eax esi +
jnz loc_10074D4  +
push esi  +
call ds:ExitProcess  +
push esi  +
push 6Ch  +
push 6Bh  +
jmp loc_100750C  +
***
mov ecx [ebp-1Ch] +
cmp ecx esi +
jz locret_1007536  +
push 1  +
call sub_10067F1  +
mov [ebp-1Ch] esi +
retn   +
***
jmp loc_1007751  +
mov eax [ebp+14h] +
push dword ptr [eax+1Ch]  +
push 0FFFFFFEBh  +
push edi  +
call ds:SetWindowLongW  +
jmp loc_1007751  +
mov eax dword_10100C0 +
cmp eax esi +
jz loc_1007593  +
jle loc_1007751  +
cmp eax 2 +
jle loc_100758C  +
cmp eax 3 +
jz loc_1007585  +
cmp eax 4 +
jz loc_100757E  +
cmp eax 7 +
jnz loc_1007751  +
push offset aTpmadmin_chm_4  +
jmp loc_10075C7  +
push offset aTpmadmin_chm_5  +
jmp loc_10075C7  +
push offset aTpmadmin_chm_6  +
jmp loc_10075C7  +
push offset aTpmadmin_chm_7  +
jmp loc_10075C7  +
push offset aTpmadmin_chm_8  +
jmp loc_10075C7  +
mov ecx [ebp+14h] +
mov eax [ecx+8] +
cmp eax 0FFFFFF38h +
jz loc_10075D2  +
cmp eax 0FFFFFFFCh +
jz loc_10075B5  +
cmp eax 0FFFFFFFEh +
jnz loc_1007751  +
cmp dword ptr [ecx+4] 403h +
jnz loc_1007751  +
push offset aTpmadmin_chm_9  +
push edi  +
call sub_1003530  +
jmp loc_1007751  +
push edi  +
call sub_100354D  +
push 10h  +
push esi  +
push 470h  +
push edi  +
call ds:SendMessageW  +
push 17h  +
push 11h  +
push 48Ah  +
push edi  +
call ds:PostMessageW  +
cmp dword_10100C0 1 +
jnz loc_100763A  +
push 0C1h  +
push edi  +
call sub_1005D09  +
push 403h  +
push edi  +
mov esi ds:GetDlgItem +
call esi  +
push eax  +
mov edi ds:DestroyWindow +
call edi  +
push 0C2h  +
mov ebx 40Eh +
push ebx  +
push dword ptr [ebp+8]  +
call esi  +
push eax  +
call sub_1005E07  +
jmp loc_100764B  +
mov ebx 40Eh +
mov edi ds:DestroyWindow +
mov esi ds:GetDlgItem +
cmp dword_10100C0 2 +
jnz loc_100767F  +
push 0C9h  +
push dword ptr [ebp+8]  +
call sub_1005D09  +
push 403h  +
push dword ptr [ebp+8]  +
call esi  +
push eax  +
call edi  +
push 0CAh  +
push ebx  +
push dword ptr [ebp+8]  +
call esi  +
push eax  +
call sub_1005E07  +
cmp dword_10100C0 7 +
jnz loc_10076C0  +
push 105h  +
push dword ptr [ebp+8]  +
call sub_1005D09  +
push 403h  +
push dword ptr [ebp+8]  +
call esi  +
push eax  +
call edi  +
push 402h  +
push dword ptr [ebp+8]  +
call esi  +
push eax  +
call edi  +
push 106h  +
push ebx  +
push dword ptr [ebp+8]  +
call esi  +
push eax  +
call sub_1005E07  +
cmp dword_10100C0 3 +
jnz loc_1007701  +
push 0D0h  +
push dword ptr [ebp+8]  +
call sub_1005D09  +
push 403h  +
push dword ptr [ebp+8]  +
call esi  +
push eax  +
call edi  +
push 402h  +
push dword ptr [ebp+8]  +
call esi  +
push eax  +
call edi  +
push 0D1h  +
push ebx  +
push dword ptr [ebp+8]  +
call esi  +
push eax  +
call sub_1005E07  +
cmp dword_10100C0 4 +
jnz loc_1007737  +
push 0D7h  +
push dword ptr [ebp+8]  +
call sub_1005D09  +
push 403h  +
push dword ptr [ebp+8]  +
call esi  +
push eax  +
call edi  +
push 0D8h  +
push ebx  +
push dword ptr [ebp+8]  +
call esi  +
push eax  +
call sub_1005E07  +
jmp loc_1007751  +
push 40Fh  +
push dword ptr [ebp+8]  +
call esi  +
push eax  +
call edi  +
push 423h  +
push dword ptr [ebp+8]  +
call esi  +
push eax  +
call edi  +
xor eax eax +
call __SEH_epilog4  +
retn 10h  +
***
push esi  +
call ds:GetDlgItem  +
push eax  +
call ds:SetWindowTextW  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1007836  +
cmp [ebp-20h] ebx +
jz loc_1007826  +
push dword ptr [ebp-24h]  +
push ebx  +
push esi  +
call ds:SetWindowLongW  +
mov eax [ebp-20h] +
call __SEH_epilog4  +
retn 10h  +
***
cmp [ebp-2Ch] ebx +
jz locret_100784F  +
push dword ptr [ebp-2Ch]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov [ebp-2Ch] ebx +
retn   +
***
jmp loc_1007816  +
***
mov eax [ebp+14h] +
push dword ptr [eax+1Ch]  +
push 0FFFFFFEBh  +
push esi  +
call ds:SetWindowLongW  +
jmp loc_1007816  +
***
mov eax dword_10100C0 +
cmp eax ebx +
jz loc_100789E  +
jle loc_1007816  +
cmp eax 2 +
jle loc_1007897  +
cmp eax 3 +
jz loc_1007890  +
cmp eax 4 +
jz loc_1007889  +
cmp eax 7 +
jnz loc_1007816  +
push offset aTpmadmin_chm_4  +
jmp loc_10078A3  +
push offset aTpmadmin_chm_5  +
jmp loc_10078A3  +
push offset aTpmadmin_chm_6  +
jmp loc_10078A3  +
push offset aTpmadmin_chm_7  +
jmp loc_10078A3  +
push offset aTpmadmin_chm_8  +
push esi  +
call sub_1003530  +
jmp loc_1007816  +
***
mov eax [ebp+14h] +
mov eax [eax+8] +
cmp eax 0FFFFFF31h +
jz loc_100799C  +
cmp eax 0FFFFFF32h +
jz loc_1007989  +
cmp eax 0FFFFFF38h +
jnz loc_1007816  +
push esi  +
call sub_100354D  +
push 13h  +
push ebx  +
push 470h  +
push esi  +
call ds:SendMessageW  +
push 17h  +
push 13h  +
push 48Ah  +
push esi  +
call ds:PostMessageW  +
push 0A8h  +
push esi  +
call sub_1005C98  +
push 112h  +
push 41Ch  +
push esi  +
call ds:GetDlgItem  +
push eax  +
call sub_1005E07  +
cmp dword_10100C0 1 +
jnz loc_1007930  +
push 0C4h  +
push esi  +
call sub_1005C98  +
cmp dword_10100C0 2 +
jnz loc_1007944  +
push 0CBh  +
push esi  +
call sub_1005C98  +
cmp dword_10100C0 3 +
jnz loc_1007958  +
push 0FBh  +
push esi  +
call sub_1005C98  +
cmp dword_10100C0 4 +
jnz loc_100796C  +
push 0DDh  +
push esi  +
call sub_1005C98  +
cmp dword_10100C0 7 +
jnz loc_1007816  +
push 107h  +
push esi  +
call sub_1005C98  +
jmp loc_1007816  +
***
mov dword ptr [ebp-24h] 0A4h +
mov dword ptr [ebp-20h] 1 +
jmp loc_100781B  +
***
mov [ebp-4] ebx +
push ebx  +
push ebx  +
mov edi 470h +
push edi  +
push dword ptr [ebp+8]  +
mov esi ds:SendMessageW +
call esi  +
lea eax [ebp-2Ch] +
push eax  +
push 405h  +
push dword ptr [ebp+8]  +
call ds:GetDlgItem  +
push eax  +
call near ptr dword_10037C0+3  +
mov [ebp-1Ch] eax +
cmp eax ebx +
jnz loc_1007E05  +
lea eax [ebp-44h] +
push eax  +
lea eax [ebp-28h] +
push eax  +
push dword ptr [ebp-2Ch]  +
call sub_100C62D  +
cmp eax ebx +
jz loc_1007A19  +
push 0FFFEh  +
push 0A9h  +
push 113h  +
call sub_1004990  +
push 13h  +
push ebx  +
push edi  +
push dword ptr [ebp+8]  +
call esi  +
mov [ebp-1Ch] ebx +
or dword ptr [ebp-24h] 0FFFFFFFFh +
mov dword ptr [ebp-20h] 1 +
jmp loc_1007E05  +
lea eax [ebp-30h] +
push eax  +
push lpMem  +
call sub_100AE54  +
mov [ebp-1Ch] eax +
cmp eax ebx +
jnz loc_1007E05  +
mov eax dword_10100C0 +
push dword ptr [ebp-28h]  +
mov ecx [ebp-30h] +
cmp eax 1 +
jnz loc_1007A4A  +
call sub_100AD43  +
jmp loc_1007A7F  +
cmp eax 2 +
jnz loc_1007A56  +
call sub_100AD28  +
jmp loc_1007A7F  +
cmp eax 3 +
jnz loc_1007A62  +
call sub_100A9E9  +
jmp loc_1007A7F  +
cmp eax 4 +
jnz loc_1007A6E  +
call sub_100AB08  +
jmp loc_1007A7F  +
cmp eax 7 +
jnz loc_1007A7A  +
call sub_100AE03  +
jmp loc_1007A7F  +
call sub_100AE1E  +
mov [ebp-1Ch] eax +
cmp eax ebx +
jz loc_1007D3B  +
mov ecx dword_10100C0 +
cmp ecx 1 +
jnz loc_1007B0B  +
push 0FFFEh  +
cmp eax 80280001h +
jnz loc_1007AB0  +
push 115h  +
push 114h  +
jmp loc_10079F8  +
***
cmp eax 80280803h +
jnz loc_1007AC6  +
push 117h  +
push 116h  +
jmp loc_10079F8  +
***
cmp eax 80290118h +
jnz loc_1007ADC  +
push 12Dh  +
push 12Ch  +
jmp loc_10079F8  +
***
cmp eax 80280400h +
jnz loc_1007AF4  +
push 0C6h  +
push 0C5h  +
call sub_1004990  +
jmp loc_1007B04  +
push eax  +
push 0C8h  +
push 0C7h  +
call sub_1004A4E  +
push ebx  +
call ds:ExitProcess  +
cmp ecx 2 +
jnz loc_1007B77  +
push 0FFFEh  +
cmp eax 80280001h +
jnz loc_1007B2B  +
push 119h  +
push 118h  +
jmp loc_10079F8  +
***
cmp eax 80280803h +
jnz loc_1007B41  +
push 11Bh  +
push 11Ah  +
jmp loc_10079F8  +
***
cmp eax 80290118h +
jnz loc_1007B57  +
push 12Fh  +
push 12Eh  +
jmp loc_10079F8  +
***
cmp eax 80280400h +
jnz loc_1007B6A  +
push 0CDh  +
push 0CCh  +
jmp loc_1007AED  +
***
push eax  +
push 0CFh  +
push 0CEh  +
jmp loc_1007AFF  +
***
cmp ecx 3 +
jnz loc_1007C1F  +
cmp eax 80280001h +
jnz loc_1007B9B  +
push 0FFFEh  +
push 11Dh  +
push 11Ch  +
jmp loc_10079F8  +
***
cmp eax 80280803h +
jnz loc_1007BB6  +
push 0FFFEh  +
push 11Fh  +
push 11Eh  +
jmp loc_10079F8  +
***
cmp eax 80290118h +
jnz loc_1007BD1  +
push 0FFFEh  +
push 131h  +
push 130h  +
jmp loc_10079F8  +
***
cmp eax 8031000Ah +
jz loc_1007C0A  +
cmp eax 8031000Eh +
jz loc_1007C0A  +
push 0FFFEh  +
cmp eax 80280400h +
jnz loc_1007BFA  +
push 0D3h  +
push 0D2h  +
jmp loc_1007AED  +
***
push eax  +
push 0D5h  +
push 0D4h  +
jmp loc_1007AFF  +
***
push 0FFFEh  +
push eax  +
push 0E2h  +
push 0E1h  +
jmp loc_1007AFF  +
***
push 0FFFEh  +
cmp ecx 4 +
jnz loc_1007C91  +
cmp eax 80280001h +
jnz loc_1007C3F  +
push 121h  +
push 120h  +
jmp loc_10079F8  +
***
cmp eax 80280803h +
jnz loc_1007C55  +
push 123h  +
push 122h  +
jmp loc_10079F8  +
***
cmp eax 80290118h +
jnz loc_1007C6B  +
push 133h  +
push 132h  +
jmp loc_10079F8  +
***
cmp eax 80280400h +
jnz loc_1007C81  +
push 0DAh  +
push 0D9h  +
jmp loc_1007AED  +
***
push eax  +
push 0DCh  +
push 0DBh  +
jmp loc_1007AFF  +
***
cmp ecx 7 +
jnz loc_1007CFE  +
cmp eax 80280001h +
jnz loc_1007CAC  +
push 125h  +
push 124h  +
jmp loc_10079F8  +
***
cmp eax 80280803h +
jnz loc_1007CC2  +
push 127h  +
push 126h  +
jmp loc_10079F8  +
***
cmp eax 80290118h +
jnz loc_1007CD8  +
push 135h  +
push 134h  +
jmp loc_10079F8  +
***
cmp eax 80280400h +
jnz loc_1007CEE  +
push 109h  +
push 108h  +
jmp loc_1007AED  +
***
push eax  +
push 10Bh  +
push 10Ah  +
jmp loc_1007AFF  +
***
cmp eax 80280400h +
jnz loc_1007D16  +
push 0E0h  +
push 0B0h  +
call sub_1004990  +
jmp loc_1007D26  +
push eax  +
push 0B1h  +
push 0B0h  +
call sub_1004A4E  +
push 13h  +
push ebx  +
push edi  +
push dword ptr [ebp+8]  +
call esi  +
mov dword ptr [ebp-24h] 0A4h +
jmp loc_1007A0D  +
***
mov eax dword_10100C0 +
xor ecx ecx +
inc ecx  +
cmp eax ecx +
jz loc_1007DF9  +
cmp eax 2 +
jz loc_1007DF9  +
cmp eax 4 +
jz loc_1007DF9  +
cmp eax 3 +
jnz loc_1007DCB  +
mov eax [ebp-34h] +
mov eax [eax+14h] +
cmp eax ebx +
jz loc_1007DB3  +
push eax  +
push ebx  +
mov edi ds:GetProcessHeap +
call edi  +
push eax  +
call ds:HeapSize  +
mov esi [ebp-34h] +
cmp eax 0FFFFFFFFh +
jz loc_1007DAD  +
mov [ebp-40h] eax +
mov eax [esi+14h] +
mov [ebp-3Ch] eax +
cmp [ebp-40h] ebx +
jz loc_1007DA0  +
mov eax [ebp-3Ch] +
mov [eax] bl +
inc dword ptr [ebp-3Ch]  +
dec dword ptr [ebp-40h]  +
jmp loc_1007D8E  +
***
push dword ptr [esi+14h]  +
push ebx  +
call edi  +
push eax  +
call ds:HeapFree  +
mov [esi+14h] ebx +
xor ecx ecx +
inc ecx  +
mov eax [ebp-28h] +
mov edx [ebp-34h] +
mov [edx+14h] eax +
mov dword ptr [ebp-24h] 89h +
mov [ebp-20h] ecx +
mov [ebp-38h] ebx +
jmp loc_1007E05  +
cmp eax 7 +
jnz loc_1007DD9  +
mov dword ptr [ebp-24h] 97h +
jmp loc_1007DC3  +
***
push dword ptr [ebp-34h]  +
lea eax [ebp-38h] +
push eax  +
lea eax [ebp-24h] +
push eax  +
call sub_1006B43  +
mov [ebp-1Ch] eax +
cmp eax ebx +
jnz loc_1007E05  +
mov dword ptr [ebp-20h] 1 +
jmp loc_1007DFC  +
mov [ebp-38h] ecx +
cmp [ebp-38h] ebx +
jnz loc_1007B04  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1007E18  +
jmp loc_1007816  +
***
cmp [ebp-2Ch] ebx +
jz loc_1007E31  +
push dword ptr [ebp-2Ch]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov [ebp-2Ch] ebx +
mov eax [ebp-28h] +
mov ecx [ebp-34h] +
cmp [ecx+14h] eax +
jz loc_1007E73  +
cmp eax ebx +
jz loc_1007E73  +
push eax  +
push ebx  +
mov esi ds:GetProcessHeap +
call esi  +
push eax  +
call ds:HeapSize  +
cmp eax 0FFFFFFFFh +
jz loc_1007E70  +
mov ecx [ebp-28h] +
cmp eax ebx +
jz loc_1007E63  +
mov [ecx] bl +
inc ecx  +
dec eax  +
jnz loc_1007E5D  +
push dword ptr [ebp-28h]  +
push ebx  +
call esi  +
push eax  +
call ds:HeapFree  +
mov [ebp-28h] ebx +
mov ecx [ebp-30h] +
cmp ecx ebx +
jz loc_1007E84  +
push 1  +
call sub_10067F1  +
mov [ebp-30h] ebx +
mov esi [ebp+8] +
retn   +
***
push 30h  +
push offset dword_100ECA8  +
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp-1Ch] ebx +
mov [ebp-38h] ebx +
mov [ebp-24h] ebx +
mov [ebp-28h] ebx +
mov [ebp-30h] ebx +
mov [ebp-20h] ebx +
mov [ebp-2Ch] ebx +
push 0FFFFFFEBh  +
mov esi [ebp+8] +
push esi  +
call ds:GetWindowLongW  +
mov [ebp-34h] eax +
mov eax [ebp+0Ch] +
sub eax 4Eh +
jz loc_1007FFC  +
sub eax 5 +
jz loc_1007FB4  +
sub eax 0BDh +
jz loc_1007FA3  +
dec eax  +
jnz loc_1007F88  +
mov eax [ebp+10h] +
shr eax 10h +
test ax ax +
jnz loc_1007F88  +
mov eax 422h +
mov ecx eax +
cmp [ebp+10h] cx +
jnz loc_1007F88  +
push ebx  +
push ebx  +
push 0F0h  +
push eax  +
push esi  +
mov edi ds:SendDlgItemMessageW +
call edi  +
mov esi 407h +
cmp eax 1 +
jnz loc_1007F5D  +
cmp word_10100C8 bx +
jnz loc_1007F3D  +
push ebx  +
push ebx  +
push 0D2h  +
push esi  +
push dword ptr [ebp+8]  +
call edi  +
mov word_10100C8 ax +
push ebx  +
push ebx  +
push 0CCh  +
push esi  +
push dword ptr [ebp+8]  +
call edi  +
push ebx  +
push esi  +
push dword ptr [ebp+8]  +
call ds:GetDlgItem  +
push eax  +
call ImmAssociateContext  +
jmp loc_1007F71  +
push ebx  +
movzx eax word_10100C8 +
push eax  +
push 0CCh  +
push esi  +
push dword ptr [ebp+8]  +
call edi  +
push 1  +
push ebx  +
push esi  +
push dword ptr [ebp+8]  +
call ds:GetDlgItem  +
push eax  +
call ds:InvalidateRect  +
mov esi [ebp+8] +
***
cmp [ebp-20h] ebx +
jz loc_1007F98  +
push dword ptr [ebp-24h]  +
push ebx  +
push esi  +
call ds:SetWindowLongW  +
mov eax [ebp-20h] +
call __SEH_epilog4  +
retn 10h  +
***
mov eax [ebp+14h] +
push dword ptr [eax+1Ch]  +
push 0FFFFFFEBh  +
push esi  +
call ds:SetWindowLongW  +
jmp loc_1007F88  +
***
mov eax dword_10100C0 +
cmp eax ebx +
jz loc_1007FEF  +
jle loc_1007F88  +
cmp eax 2 +
jle loc_1007FE8  +
cmp eax 3 +
jz loc_1007FE1  +
cmp eax 4 +
jz loc_1007FDA  +
cmp eax 7 +
jnz loc_1007F88  +
push offset aTpmadmin_chm_4  +
jmp loc_1007FF4  +
push offset aTpmadmin_chm_5  +
jmp loc_1007FF4  +
push offset aTpmadmin_chm_6  +
jmp loc_1007FF4  +
push offset aTpmadmin_chm_7  +
jmp loc_1007FF4  +
push offset aTpmadmin_chm_8  +
push esi  +
call sub_1003530  +
jmp loc_1007F88  +
***
mov eax [ebp+14h] +
mov eax [eax+8] +
cmp eax 0FFFFFF31h +
jz loc_10080E8  +
cmp eax 0FFFFFF32h +
jz loc_10080D5  +
cmp eax 0FFFFFF38h +
jnz loc_1007F88  +
push esi  +
call sub_100354D  +
push 13h  +
push ebx  +
push 470h  +
push esi  +
mov edi ds:SendMessageW +
call edi  +
push 17h  +
push 13h  +
push 48Ah  +
push esi  +
call ds:PostMessageW  +
push 0A8h  +
push esi  +
call sub_1005C98  +
cmp dword_10100C0 1 +
jnz loc_1008069  +
push 0C4h  +
push esi  +
call sub_1005C98  +
cmp dword_10100C0 2 +
jnz loc_100807D  +
push 0CBh  +
push esi  +
call sub_1005C98  +
cmp dword_10100C0 3 +
jnz loc_1008091  +
push 0FBh  +
push esi  +
call sub_1005C98  +
cmp dword_10100C0 4 +
jnz loc_10080A5  +
push 0DDh  +
push esi  +
call sub_1005C98  +
cmp dword_10100C0 7 +
jnz loc_10080B9  +
push 107h  +
push esi  +
call sub_1005C98  +
push ebx  +
push 7Fh  +
push 0C5h  +
push 407h  +
push esi  +
call ds:GetDlgItem  +
push eax  +
call edi  +
jmp loc_1007F88  +
***
mov dword ptr [ebp-24h] 0A4h +
mov dword ptr [ebp-20h] 1 +
jmp loc_1007F8D  +
***
mov [ebp-4] ebx +
push ebx  +
push ebx  +
mov edi 470h +
push edi  +
push dword ptr [ebp+8]  +
mov esi ds:SendMessageW +
call esi  +
lea eax [ebp-30h] +
push eax  +
push 407h  +
push dword ptr [ebp+8]  +
call ds:GetDlgItem  +
push eax  +
call near ptr dword_10037C0+3  +
mov [ebp-1Ch] eax +
cmp eax ebx +
jnz loc_10084EC  +
lea eax [ebp-2Ch] +
push eax  +
push lpMem  +
call sub_100AE54  +
mov [ebp-1Ch] eax +
cmp eax ebx +
jnz loc_10084EC  +
lea eax [ebp-28h] +
push eax  +
push dword ptr [ebp-30h]  +
mov ecx [ebp-2Ch] +
call sub_100AB23  +
mov [ebp-1Ch] eax +
cmp eax ebx +
jnz loc_10084EC  +
mov eax dword_10100C0 +
push dword ptr [ebp-28h]  +
mov ecx [ebp-2Ch] +
cmp eax 1 +
jnz loc_100816C  +
call sub_100AD43  +
jmp loc_10081A1  +
cmp eax 2 +
jnz loc_1008178  +
call sub_100AD28  +
jmp loc_10081A1  +
cmp eax 3 +
jnz loc_1008184  +
call sub_100A9E9  +
jmp loc_10081A1  +
cmp eax 4 +
jnz loc_1008190  +
call sub_100AB08  +
jmp loc_10081A1  +
cmp eax 7 +
jnz loc_100819C  +
call sub_100AE03  +
jmp loc_10081A1  +
call sub_100AE1E  +
mov [ebp-1Ch] eax +
mov ecx eax +
mov eax dword_10100C0 +
cmp ecx ebx +
jz loc_1008427  +
cmp eax 1 +
jnz loc_1008236  +
push 0FFFEh  +
cmp ecx 80280001h +
jnz loc_10081F0  +
push 115h  +
push 114h  +
***
call sub_1004990  +
push 13h  +
push ebx  +
push edi  +
push dword ptr [ebp+8]  +
call esi  +
mov [ebp-1Ch] ebx +
or dword ptr [ebp-24h] 0FFFFFFFFh +
mov dword ptr [ebp-20h] 1 +
jmp loc_10084EC  +
***
cmp ecx 80280803h +
jnz loc_1008204  +
push 117h  +
push 116h  +
jmp loc_10081CF  +
***
cmp ecx 80280400h +
jnz loc_100821D  +
push 0C6h  +
push 0C5h  +
***
call sub_1004990  +
jmp sub_100822F  +
***
push dword ptr [ebp-1Ch]  +
push 0C8h  +
push 0C7h  +
***
call ds:ExitProcess  +
cmp eax 2 +
jnz loc_1008291  +
push 0FFFEh  +
cmp ecx 80280001h +
jnz loc_1008257  +
push 119h  +
push 118h  +
jmp loc_10081CF  +
cmp ecx 80280803h +
jnz loc_100826E  +
push 11Bh  +
push 11Ah  +
jmp loc_10081CF  +
cmp ecx 80280400h +
jnz loc_1008282  +
push 0CDh  +
push 0CCh  +
jmp loc_1008216  +
push dword ptr [ebp-1Ch]  +
push 0CFh  +
push 0CEh  +
jmp loc_100822A  +
cmp eax 3 +
jnz loc_1008327  +
cmp ecx 80280001h +
jnz loc_10082B6  +
push 0FFFEh  +
push 11Dh  +
push 11Ch  +
jmp loc_10081CF  +
cmp ecx 80280803h +
jnz loc_10082D2  +
push 0FFFEh  +
push 11Fh  +
push 11Eh  +
jmp loc_10081CF  +
cmp ecx 8031000Ah +
jz loc_1008310  +
cmp ecx 8031000Eh +
jz loc_1008310  +
push 0FFFEh  +
cmp ecx 80280400h +
jnz loc_10082FE  +
push 0D3h  +
push 0D2h  +
jmp loc_1008216  +
push dword ptr [ebp-1Ch]  +
push 0D5h  +
push 0D4h  +
jmp loc_100822A  +
push 0FFFEh  +
push dword ptr [ebp-1Ch]  +
push 0E2h  +
push 0E1h  +
jmp loc_100822A  +
push 0FFFEh  +
cmp eax 4 +
jnz loc_1008388  +
cmp ecx 80280001h +
jnz loc_1008348  +
push 121h  +
push 120h  +
jmp loc_10081CF  +
cmp ecx 80280803h +
jnz loc_100835F  +
push 123h  +
push 122h  +
jmp loc_10081CF  +
cmp ecx 80280400h +
jnz loc_1008376  +
push 0DAh  +
push 0D9h  +
jmp loc_1008216  +
push dword ptr [ebp-1Ch]  +
push 0DCh  +
push 0DBh  +
jmp loc_100822A  +
cmp eax 7 +
jnz loc_10083E4  +
cmp ecx 80280001h +
jnz loc_10083A4  +
push 125h  +
push 124h  +
jmp loc_10081CF  +
cmp ecx 80280803h +
jnz loc_10083BB  +
push 127h  +
push 126h  +
jmp loc_10081CF  +
cmp ecx 80280400h +
jnz loc_10083D2  +
push 109h  +
push 108h  +
jmp loc_1008216  +
push dword ptr [ebp-1Ch]  +
push 10Bh  +
push 10Ah  +
jmp loc_100822A  +
cmp ecx 80280400h +
jnz loc_10083FD  +
push 109h  +
push 108h  +
call sub_1004990  +
jmp loc_100840F  +
push dword ptr [ebp-1Ch]  +
push 10Bh  +
push 10Ah  +
call sub_1004A4E  +
mov dword ptr [ebp-24h] 0A4h +
mov [ebp-1Ch] ebx +
push 13h  +
push ebx  +
push edi  +
push dword ptr [ebp+8]  +
call esi  +
jmp loc_10081E4  +
***
xor ecx ecx +
inc ecx  +
cmp eax ecx +
jz loc_10084E0  +
cmp eax 2 +
jz loc_10084E0  +
cmp eax 4 +
jz loc_10084E0  +
cmp eax 3 +
jnz loc_10084B2  +
mov eax [ebp-34h] +
mov eax [eax+14h] +
cmp eax ebx +
jz loc_100849A  +
push eax  +
push ebx  +
mov edi ds:GetProcessHeap +
call edi  +
push eax  +
call ds:HeapSize  +
mov esi [ebp-34h] +
cmp eax 0FFFFFFFFh +
jz loc_1008494  +
mov [ebp-40h] eax +
mov eax [esi+14h] +
mov [ebp-3Ch] eax +
cmp [ebp-40h] ebx +
jz loc_1008487  +
mov eax [ebp-3Ch] +
mov [eax] bl +
inc dword ptr [ebp-3Ch]  +
dec dword ptr [ebp-40h]  +
jmp loc_1008475  +
***
push dword ptr [esi+14h]  +
push ebx  +
call edi  +
push eax  +
call ds:HeapFree  +
mov [esi+14h] ebx +
xor ecx ecx +
inc ecx  +
mov eax [ebp-28h] +
mov edx [ebp-34h] +
mov [edx+14h] eax +
mov dword ptr [ebp-24h] 89h +
mov [ebp-20h] ecx +
mov [ebp-38h] ebx +
jmp loc_10084EC  +
***
cmp eax 7 +
jnz loc_10084C0  +
mov dword ptr [ebp-24h] 97h +
jmp loc_10084AA  +
***
push dword ptr [ebp-34h]  +
lea eax [ebp-38h] +
push eax  +
lea eax [ebp-24h] +
push eax  +
call sub_1006B43  +
mov [ebp-1Ch] eax +
cmp eax ebx +
jnz loc_10084EC  +
mov dword ptr [ebp-20h] 1 +
jmp loc_10084E3  +
mov [ebp-38h] ecx +
cmp [ebp-38h] ebx +
jnz sub_100822F  +
***
mov esi ds:GetProcessHeap +
cmp [ebp-30h] ebx +
jz loc_1008539  +
push dword ptr [ebp-30h]  +
push ebx  +
call esi  +
push eax  +
call ds:HeapSize  +
cmp eax 0FFFFFFFFh +
jz loc_1008536  +
mov ecx [ebp-30h] +
cmp eax ebx +
jz loc_1008529  +
mov [ecx] bl +
inc ecx  +
dec eax  +
jnz loc_1008523  +
push dword ptr [ebp-30h]  +
push ebx  +
call esi  +
push eax  +
call ds:HeapFree  +
mov [ebp-30h] ebx +
mov eax [ebp-28h] +
mov ecx [ebp-34h] +
cmp [ecx+14h] eax +
jz loc_1008575  +
cmp eax ebx +
jz loc_1008575  +
push eax  +
push ebx  +
call esi  +
push eax  +
call ds:HeapSize  +
cmp eax 0FFFFFFFFh +
jz loc_1008572  +
mov ecx [ebp-28h] +
cmp eax ebx +
jz loc_1008565  +
mov [ecx] bl +
inc ecx  +
dec eax  +
jnz loc_100855F  +
push dword ptr [ebp-28h]  +
push ebx  +
call esi  +
push eax  +
call ds:HeapFree  +
mov [ebp-28h] ebx +
mov ecx [ebp-2Ch] +
cmp ecx ebx +
jz loc_1008586  +
push 1  +
call sub_10067F1  +
mov [ebp-2Ch] ebx +
cmp [ebp-1Ch] ebx +
jge loc_100859B  +
push dword ptr [ebp-1Ch]  +
call sub_1004E65  +
push dword ptr [ebp-1Ch]  +
jmp loc_1008230  +
mov esi [ebp+8] +
retn   +
***
push 1Ch  +
push offset dword_100ECC8  +
call __SEH_prolog4  +
xor edi edi +
mov [ebp-24h] edi +
mov [ebp-2Ch] edi +
mov [ebp-28h] edi +
mov [ebp-1Ch] edi +
mov [ebp-20h] edi +
cmp dword ptr [ebp+0Ch] 4Eh +
jz loc_1008610  +
cmp dword ptr [ebp+0Ch] 53h +
jnz loc_1008662  +
mov eax dword_10100C0 +
cmp eax edi +
jz loc_1008609  +
jle loc_1008662  +
cmp eax 2 +
jle loc_1008602  +
cmp eax 3 +
jz loc_10085FB  +
cmp eax 4 +
jz loc_1008655  +
cmp eax 7 +
jnz loc_1008662  +
push offset aTpmadmin_chm_4  +
jmp loc_100865A  +
push offset aTpmadmin_chm_6  +
jmp loc_100865A  +
push offset aTpmadmin_chm_7  +
jmp loc_100865A  +
push offset aTpmadmin_chm_8  +
jmp loc_100865A  +
mov ecx [ebp+14h] +
mov eax [ecx+8] +
cmp eax 0FFFFFF31h +
jz loc_100876E  +
cmp eax 0FFFFFF32h +
jz loc_100875B  +
cmp eax 0FFFFFF38h +
jz loc_100867F  +
cmp eax 0FFFFFFFCh +
jz loc_100863D  +
cmp eax 0FFFFFFFEh +
jnz loc_1008662  +
mov eax [ecx+4] +
cmp eax 409h +
jnz loc_100864E  +
push offset aTpmadmin_chmHt  +
jmp loc_100865A  +
cmp eax 408h +
jnz loc_1008662  +
push offset aTpmadmin_chm_5  +
push dword ptr [ebp+8]  +
call sub_1003530  +
cmp [ebp-28h] edi +
jz loc_1008674  +
push dword ptr [ebp-2Ch]  +
push edi  +
push dword ptr [ebp+8]  +
call ds:SetWindowLongW  +
mov eax [ebp-28h] +
call __SEH_epilog4  +
retn 10h  +
***
mov esi [ebp+8] +
push esi  +
call sub_100354D  +
mov [ebp-4] edi +
lea eax [ebp-1Ch] +
push eax  +
push lpMem  +
call sub_100AE54  +
cmp eax edi +
jnz loc_1008731  +
lea eax [ebp-20h] +
push eax  +
mov ecx [ebp-1Ch] +
call sub_100A6CE  +
cmp eax edi +
jnz loc_1008707  +
cmp [ebp-20h] edi +
jz loc_1008707  +
cmp dword ptr [ebp-20h] 3 +
jz loc_1008707  +
push 13h  +
push edi  +
push 470h  +
push esi  +
call ds:SendMessageW  +
push 17h  +
push 13h  +
push 48Ah  +
push esi  +
call ds:PostMessageW  +
push 0B5h  +
push esi  +
call sub_1005D09  +
push 0B6h  +
push esi  +
call sub_1005C98  +
push 409h  +
push esi  +
call ds:GetDlgItem  +
push eax  +
call ds:DestroyWindow  +
jmp loc_1008731  +
push 5  +
push edi  +
push 470h  +
push esi  +
call ds:SendMessageW  +
push 17h  +
push 5  +
push 48Ah  +
push esi  +
call ds:PostMessageW  +
push 99h  +
push esi  +
call sub_1005D96  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1008744  +
jmp loc_1008662  +
***
mov ecx [ebp-1Ch] +
cmp ecx edi +
jz locret_1008755  +
push 1  +
call sub_10067F1  +
mov [ebp-1Ch] edi +
retn   +
***
jmp loc_1008662  +
***
mov dword ptr [ebp-2Ch] 0A4h +
mov dword ptr [ebp-28h] 1 +
jmp loc_1008667  +
***
xor esi esi +
inc esi  +
mov [ebp-4] esi +
lea eax [ebp-1Ch] +
push eax  +
push lpMem  +
call sub_100AE54  +
mov [ebp-24h] eax +
cmp eax edi +
jnz loc_10087C5  +
lea eax [ebp-20h] +
push eax  +
mov ecx [ebp-1Ch] +
call sub_100A6CE  +
mov [ebp-24h] eax +
cmp eax edi +
jnz loc_10087C5  +
mov eax [ebp-20h] +
cmp eax edi +
jz loc_10087D6  +
cmp eax 3 +
jz loc_10087D6  +
cmp eax esi +
jnz loc_10087B6  +
mov dword ptr [ebp-2Ch] 0B7h +
jmp loc_10087C2  +
cmp eax 2 +
jnz loc_10087C5  +
mov dword ptr [ebp-2Ch] 0BAh +
mov [ebp-28h] esi +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_10087E2  +
jmp loc_1008662  +
***
push esi  +
***
mov ecx [ebp-1Ch] +
cmp ecx edi +
jz loc_10087F2  +
push esi  +
call sub_10067F1  +
mov [ebp-1Ch] edi +
cmp [ebp-24h] edi +
jge locret_1008804  +
push dword ptr [ebp-24h]  +
call sub_1004E65  +
push dword ptr [ebp-24h]  +
jmp loc_10087D7  +
retn   +
***
push 14h  +
push offset dword_100ECF0  +
call __SEH_prolog4  +
xor edi edi +
mov [ebp-1Ch] edi +
mov [ebp-24h] edi +
mov [ebp-20h] edi +
cmp dword ptr [ebp+0Ch] 4Eh +
jz loc_1008886  +
cmp dword ptr [ebp+0Ch] 53h +
jnz loc_100893D  +
mov eax dword_10100C0 +
cmp eax edi +
jz loc_1008874  +
jle loc_100893D  +
cmp eax 2 +
jle loc_100886D  +
cmp eax 3 +
jz loc_1008866  +
cmp eax 4 +
jz loc_100885F  +
cmp eax 7 +
jnz loc_100893D  +
push offset aTpmadmin_chm_4  +
jmp loc_1008879  +
push offset aTpmadmin_chm_5  +
jmp loc_1008879  +
push offset aTpmadmin_chm_6  +
jmp loc_1008879  +
push offset aTpmadmin_chm_7  +
jmp loc_1008879  +
push offset aTpmadmin_chm_8  +
push dword ptr [ebp+8]  +
call sub_1003530  +
jmp loc_100893D  +
mov ecx [ebp+14h] +
mov eax [ecx+8] +
cmp eax 0FFFFFF31h +
jz loc_1008948  +
cmp eax 0FFFFFF32h +
jz loc_1008927  +
cmp eax 0FFFFFF38h +
jz loc_10088CC  +
cmp eax 0FFFFFFFCh +
jz loc_10088B7  +
cmp eax 0FFFFFFFEh +
jnz loc_100893D  +
cmp dword ptr [ecx+4] 40Bh +
jnz loc_100893D  +
push offset a7349ec7cFbb543  +
call sub_1003DC8  +
jmp loc_100893D  +
mov esi [ebp+8] +
push esi  +
call sub_100354D  +
push 3  +
push edi  +
push 470h  +
push esi  +
call ds:SendMessageW  +
push 17h  +
push 13h  +
push 48Ah  +
push esi  +
call ds:PostMessageW  +
push 0B9h  +
push esi  +
call sub_1005C98  +
cmp lpMem edi +
jnz loc_100890E  +
push 0E4h  +
jmp loc_1008913  +
push 0F6h  +
push 421h  +
push esi  +
call ds:GetDlgItem  +
push eax  +
call sub_1005E07  +
jmp loc_100893D  +
mov dword ptr [ebp-24h] 1 +
push 0B3h  +
push edi  +
push dword ptr [ebp+8]  +
call ds:SetWindowLongW  +
mov eax [ebp-24h] +
call __SEH_epilog4  +
retn 10h  +
***
mov [ebp-4] edi +
lea eax [ebp-20h] +
push eax  +
push lpMem  +
call sub_100AE54  +
mov [ebp-1Ch] eax +
cmp eax edi +
jnz loc_1008989  +
mov ecx [ebp-20h] +
call sub_100AD5E  +
mov [ebp-1Ch] eax +
cmp eax edi +
jnz loc_1008989  +
cmp lpMem edi +
jnz loc_1008997  +
push offset aCmd_exeCStartS  +
call near ptr dword_10033B0+2  +
mov [ebp-1Ch] eax +
cmp eax edi +
jz loc_1008997  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_10089C8  +
jmp loc_100893D  +
***
push edi  +
push lpMem  +
call sub_100C099  +
mov [ebp-1Ch] eax +
cmp eax edi +
jge loc_10089BF  +
push 0FFFEh  +
push eax  +
push 101h  +
push 100h  +
call sub_1004A4E  +
push edi  +
***
mov ecx [ebp-20h] +
cmp ecx edi +
jz loc_10089D9  +
push 1  +
call sub_10067F1  +
mov [ebp-20h] edi +
cmp [ebp-1Ch] edi +
jge locret_10089EB  +
push dword ptr [ebp-1Ch]  +
call sub_1004E65  +
push dword ptr [ebp-1Ch]  +
jmp loc_10089C0  +
retn   +
***
jmp loc_100893D  +
***
push 14h  +
push offset dword_100ED10  +
call __SEH_prolog4  +
xor edi edi +
mov [ebp-1Ch] edi +
mov [ebp-24h] edi +
mov [ebp-20h] edi +
cmp dword ptr [ebp+0Ch] 4Eh +
jz loc_1008A72  +
cmp dword ptr [ebp+0Ch] 53h +
jnz loc_1008B29  +
mov eax dword_10100C0 +
cmp eax edi +
jz loc_1008A60  +
jle loc_1008B29  +
cmp eax 2 +
jle loc_1008A59  +
cmp eax 3 +
jz loc_1008A52  +
cmp eax 4 +
jz loc_1008A4B  +
cmp eax 7 +
jnz loc_1008B29  +
push offset aTpmadmin_chm_4  +
jmp loc_1008A65  +
push offset aTpmadmin_chm_5  +
jmp loc_1008A65  +
push offset aTpmadmin_chm_6  +
jmp loc_1008A65  +
push offset aTpmadmin_chm_7  +
jmp loc_1008A65  +
push offset aTpmadmin_chm_8  +
push dword ptr [ebp+8]  +
call sub_1003530  +
jmp loc_1008B29  +
mov ecx [ebp+14h] +
mov eax [ecx+8] +
cmp eax 0FFFFFF31h +
jz loc_1008B34  +
cmp eax 0FFFFFF32h +
jz loc_1008B13  +
cmp eax 0FFFFFF38h +
jz loc_1008AB8  +
cmp eax 0FFFFFFFCh +
jz loc_1008AA3  +
cmp eax 0FFFFFFFEh +
jnz loc_1008B29  +
cmp dword ptr [ecx+4] 40Bh +
jnz loc_1008B29  +
push offset a7349ec7cFbb543  +
call sub_1003DC8  +
jmp loc_1008B29  +
mov esi [ebp+8] +
push esi  +
call sub_100354D  +
push 3  +
push edi  +
push 470h  +
push esi  +
call ds:SendMessageW  +
push 17h  +
push 13h  +
push 48Ah  +
push esi  +
call ds:PostMessageW  +
push 0BCh  +
push esi  +
call sub_1005C98  +
cmp lpMem edi +
jnz loc_1008AFA  +
push 0E3h  +
jmp loc_1008AFF  +
push 0F5h  +
push 420h  +
push esi  +
call ds:GetDlgItem  +
push eax  +
call sub_1005E07  +
jmp loc_1008B29  +
mov dword ptr [ebp-24h] 1 +
push 0B3h  +
push edi  +
push dword ptr [ebp+8]  +
call ds:SetWindowLongW  +
mov eax [ebp-24h] +
call __SEH_epilog4  +
retn 10h  +
***
mov [ebp-4] edi +
lea eax [ebp-20h] +
push eax  +
push lpMem  +
call sub_100AE54  +
mov [ebp-1Ch] eax +
cmp eax edi +
jnz loc_1008B75  +
mov ecx [ebp-20h] +
call sub_100AD5E  +
mov [ebp-1Ch] eax +
cmp eax edi +
jnz loc_1008B75  +
cmp lpMem edi +
jnz loc_1008B83  +
push offset aCmd_exeCStartS  +
call near ptr dword_10033B0+2  +
mov [ebp-1Ch] eax +
cmp eax edi +
jz loc_1008B83  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1008BB5  +
jmp loc_1008B29  +
***
push 1  +
push lpMem  +
call sub_100C099  +
mov [ebp-1Ch] eax +
cmp eax edi +
jge loc_1008BAC  +
push 0FFFEh  +
push eax  +
push 0FFh  +
push 0FEh  +
call sub_1004A4E  +
push edi  +
***
mov ecx [ebp-20h] +
cmp ecx edi +
jz loc_1008BC6  +
push 1  +
call sub_10067F1  +
mov [ebp-20h] edi +
cmp [ebp-1Ch] edi +
jge locret_1008BD8  +
push dword ptr [ebp-1Ch]  +
call sub_1004E65  +
push dword ptr [ebp-1Ch]  +
jmp loc_1008BAD  +
retn   +
***
jmp loc_1008B29  +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp-24h] ebx +
mov [ebp-20h] ebx +
mov [ebp-1Ch] ebx +
mov [ebp-4] ebx +
lea eax [ebp-20h] +
push eax  +
push lpMem  +
call sub_100AE54  +
mov [ebp-24h] eax +
cmp eax ebx +
jnz loc_1008C4B  +
lea eax [ebp-1Ch] +
push eax  +
mov esi [ebp+8] +
push dword ptr [esi+10h]  +
mov ecx [ebp-20h] +
call sub_100AB23  +
mov [ebp-24h] eax +
cmp eax ebx +
jnz loc_1008C4B  +
cmp [ebp-1Ch] ebx +
jnz loc_1008C3A  +
mov dword ptr [ebp-24h] 8007000Eh +
jmp loc_1008C4B  +
push dword ptr [ebp-1Ch]  +
push dword ptr [esi+14h]  +
mov ecx [ebp-20h] +
call sub_100A406  +
mov [ebp-24h] eax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1008C64  +
mov eax [ebp-24h] +
call __SEH_epilog4  +
retn 4  +
***
mov ecx [ebp-20h] +
cmp ecx ebx +
jz loc_1008C75  +
push 1  +
call sub_10067F1  +
mov [ebp-20h] ebx +
cmp [ebp-1Ch] ebx +
jz locret_1008CAF  +
push dword ptr [ebp-1Ch]  +
push ebx  +
mov esi ds:GetProcessHeap +
call esi  +
push eax  +
call ds:HeapSize  +
cmp eax 0FFFFFFFFh +
jz loc_1008CAC  +
mov ecx [ebp-1Ch] +
cmp eax ebx +
jz loc_1008C9F  +
mov [ecx] bl +
inc ecx  +
dec eax  +
jnz loc_1008C99  +
push dword ptr [ebp-1Ch]  +
push ebx  +
call esi  +
push eax  +
call ds:HeapFree  +
mov [ebp-1Ch] ebx +
retn   +
***
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1008DAA  +
jmp loc_1009021  +
***
cmp [ebp-24h] ebx +
jz loc_1008DC0  +
push dword ptr [ebp-24h]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp [ebp-1Ch] ebx +
jge locret_1008DD6  +
push dword ptr [ebp-1Ch]  +
call sub_1004E65  +
push dword ptr [ebp-1Ch]  +
call ds:ExitProcess  +
retn   +
***
jmp loc_1009021  +
***
mov eax [ebp+14h] +
push dword ptr [eax+1Ch]  +
push 0FFFFFFEBh  +
push esi  +
call ds:SetWindowLongW  +
jmp loc_1009021  +
***
mov eax dword_10100C0 +
cmp eax ebx +
jz loc_1008E33  +
jle loc_1009021  +
cmp eax 2 +
jle loc_1008E2C  +
cmp eax 3 +
jz loc_1008E25  +
cmp eax 4 +
jz loc_1008E1E  +
cmp eax 7 +
jnz loc_1009021  +
push offset aTpmadmin_chm_4  +
jmp loc_1008E38  +
push offset aTpmadmin_chm_5  +
jmp loc_1008E38  +
push offset aTpmadmin_chm_6  +
jmp loc_1008E38  +
push offset aTpmadmin_chm_7  +
jmp loc_1008E38  +
push offset aTpmadmin_chm_8  +
push esi  +
call sub_1003530  +
jmp loc_1009021  +
***
mov eax [ebp+14h] +
mov eax [eax+8] +
cmp eax 0FFFFFF31h +
jz loc_1008FC9  +
cmp eax 0FFFFFF32h +
jz loc_1008FB9  +
cmp eax 0FFFFFF38h +
jnz loc_1009021  +
push esi  +
call sub_100354D  +
push 17h  +
push 13h  +
push 48Ah  +
push esi  +
call ds:PostMessageW  +
cmp dword_10100C0 3 +
jnz loc_1008E90  +
push 0D6h  +
jmp loc_1008E95  +
push 91h  +
push esi  +
call sub_1005C98  +
mov [ebp-4] ebx +
lea esi [edi+10h] +
mov eax [esi] +
cmp eax ebx +
jz loc_1008EEE  +
cmp [edi+8] ebx +
jnz loc_1008F05  +
cmp eax ebx +
jz loc_1008EEE  +
push eax  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapSize  +
cmp eax 0FFFFFFFFh +
jz loc_1008EEC  +
mov [ebp-30h] eax +
mov esi [esi] +
mov [ebp-34h] esi +
cmp [ebp-30h] ebx +
jz loc_1008ED9  +
mov [esi] bl +
inc esi  +
dec dword ptr [ebp-30h]  +
jmp loc_1008EC9  +
***
lea esi [edi+10h] +
push dword ptr [esi]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov [esi] ebx +
push esi  +
call sub_100A273  +
mov [ebp-1Ch] eax +
cmp eax ebx +
jnz loc_1008F2F  +
mov dword ptr [edi+8] 1 +
mov [edi+0Ch] ebx +
lea eax [ebp-20h] +
push eax  +
push dword ptr [esi]  +
call sub_1004F59  +
mov [ebp-1Ch] eax +
cmp eax ebx +
jnz loc_1008F2F  +
push dword ptr [ebp-20h]  +
push 3F1h  +
push dword ptr [ebp+8]  +
call ds:GetDlgItem  +
push eax  +
call ds:SetWindowTextW  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1008F49  +
cmp [edi+0Ch] ebx +
jnz loc_1008FA3  +
push 1  +
jmp loc_1008FA5  +
***
cmp [ebp-24h] ebx +
jz loc_1008F62  +
push dword ptr [ebp-24h]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov [ebp-24h] ebx +
cmp [ebp-20h] ebx +
jz loc_1008F99  +
push dword ptr [ebp-20h]  +
push ebx  +
mov esi ds:GetProcessHeap +
call esi  +
push eax  +
call ds:HeapSize  +
cmp eax 0FFFFFFFFh +
jz loc_1008F99  +
mov ecx [ebp-20h] +
cmp eax ebx +
jz loc_1008F8C  +
mov [ecx] bl +
inc ecx  +
dec eax  +
jnz loc_1008F86  +
push dword ptr [ebp-20h]  +
push ebx  +
call esi  +
push eax  +
call ds:HeapFree  +
cmp [ebp-1Ch] ebx +
jl loc_1008DC5  +
retn   +
***
push 3  +
push ebx  +
push 470h  +
push dword ptr [ebp+8]  +
call ds:SendMessageW  +
mov esi [ebp+8] +
jmp loc_1009021  +
***
mov dword ptr [ebp-2Ch] 89h +
mov dword ptr [ebp-28h] 1 +
jmp loc_1009026  +
***
cmp dword_10100C0 3 +
jnz loc_1009013  +
xor esi esi +
inc esi  +
mov [ebp-4] esi +
push edi  +
call near ptr dword_1008BE0+3  +
mov [ebp-1Ch] eax +
cmp eax ebx +
jnz loc_1008FEF  +
mov dword ptr [ebp-2Ch] 97h +
mov [ebp-28h] esi +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1008FFF  +
jmp loc_1008FB4  +
***
cmp [ebp-1Ch] ebx +
jge locret_1009012  +
push dword ptr [ebp-1Ch]  +
call sub_1004E65  +
push ebx  +
jmp loc_1008DD0  +
retn   +
***
mov dword ptr [ebp-2Ch] 95h +
mov dword ptr [ebp-28h] 1 +
cmp [ebp-28h] ebx +
jz loc_1009031  +
push dword ptr [ebp-2Ch]  +
push ebx  +
push esi  +
call ds:SetWindowLongW  +
mov eax [ebp-28h] +
call __SEH_epilog4  +
retn 10h  +
***
push 0FFFFFFFEh  +
lea eax [ebp-10h] +
push eax  +
push offset dword_1010004  +
call _local_unwind4  +
add esp 0Ch +
jmp loc_1009368  +
***
mov eax [ebp-34h] +
mov [eax] bl +
inc dword ptr [ebp-34h]  +
dec dword ptr [ebp-38h]  +
jmp loc_1009166  +
***
cmp dword ptr [ebp-1Ch] 0 +
jge locret_1009250  +
push dword ptr [ebp-1Ch]  +
call sub_1004E65  +
push dword ptr [ebp-1Ch]  +
call ds:ExitProcess  +
retn   +
***
jmp loc_1009368  +
mov eax [ebp+14h] +
push dword ptr [eax+1Ch]  +
push 0FFFFFFEBh  +
push esi  +
call ds:SetWindowLongW  +
cmp [ebp-24h] ebx +
jz loc_1009278  +
mov esi [ebp+8] +
push dword ptr [ebp-2Ch]  +
push ebx  +
push esi  +
call ds:SetWindowLongW  +
mov eax [ebp-24h] +
call __SEH_epilog4  +
retn 10h  +
***
mov eax dword_10100C0 +
cmp eax ebx +
jz loc_10092BE  +
jle loc_1009265  +
cmp eax 2 +
jle loc_10092B7  +
cmp eax 3 +
jz loc_10092B0  +
cmp eax 4 +
jz loc_10092A9  +
cmp eax 7 +
jnz loc_1009265  +
push offset aTpmadmin_chm_4  +
jmp loc_10092C3  +
push offset aTpmadmin_chm_5  +
jmp loc_10092C3  +
push offset aTpmadmin_chm_6  +
jmp loc_10092C3  +
push offset aTpmadmin_chm_7  +
jmp loc_10092C3  +
push offset aTpmadmin_chm_8  +
push esi  +
call sub_1003530  +
jmp loc_1009265  +
***
mov eax [ebp+14h] +
mov eax [eax+8] +
cmp eax 0FFFFFF31h +
jz loc_1009382  +
cmp eax 0FFFFFF32h +
jz loc_100936F  +
cmp eax 0FFFFFF38h +
jnz loc_1009265  +
mov edi esi +
push edi  +
call sub_100354D  +
push 3  +
push 0  +
push 470h  +
push edi  +
mov esi ds:SendMessageW +
call esi  +
push 17h  +
push 13h  +
push 48Ah  +
push edi  +
call ds:PostMessageW  +
push 91h  +
push edi  +
call sub_1005C98  +
cmp dword_10100C0 3 +
jnz loc_100933B  +
push 0D6h  +
push edi  +
call sub_1005C98  +
push 0  +
push 7Fh  +
mov ebx 0C5h +
push ebx  +
push 3F2h  +
push edi  +
mov edi ds:GetDlgItem +
call edi  +
push eax  +
call esi  +
push 0  +
push 7Fh  +
push ebx  +
push 3F3h  +
push dword ptr [ebp+8]  +
call edi  +
push eax  +
call esi  +
xor ebx ebx +
jmp loc_1009265  +
***
mov dword ptr [ebp-2Ch] 89h +
mov dword ptr [ebp-24h] 1 +
jmp loc_100926D  +
***
mov [ebp-4] ebx +
push 3F3h  +
mov esi 3F2h +
push esi  +
push dword ptr [ebp+8]  +
call near ptr byte_1005B54  +
mov [ebp-1Ch] eax +
xor ebx ebx +
cmp eax ebx +
jge loc_10093AD  +
mov [ebp-1Ch] ebx +
or dword ptr [ebp-2Ch] 0FFFFFFFFh +
jmp loc_10094BE  +
lea eax [ebp-20h] +
push eax  +
push esi  +
push dword ptr [ebp+8]  +
call ds:GetDlgItem  +
push eax  +
call near ptr dword_10037C0+3  +
mov [ebp-1Ch] eax +
cmp eax ebx +
jnz loc_10094C5  +
lea eax [ebp-30h] +
push eax  +
push 80h  +
push dword ptr [ebp-20h]  +
call sub_1003C74  +
mov [ebp-1Ch] eax +
cmp eax ebx +
jnz loc_10094C5  +
mov eax [edi+10h] +
cmp eax ebx +
jz loc_1009430  +
push eax  +
push ebx  +
mov esi ds:GetProcessHeap +
call esi  +
push eax  +
call ds:HeapSize  +
cmp eax 0FFFFFFFFh +
jz loc_100942D  +
mov [ebp-40h] eax +
mov eax [edi+10h] +
mov [ebp-3Ch] eax +
cmp [ebp-40h] ebx +
jz loc_1009420  +
mov eax [ebp-3Ch] +
mov [eax] bl +
inc dword ptr [ebp-3Ch]  +
dec dword ptr [ebp-40h]  +
jmp loc_100940E  +
***
push dword ptr [edi+10h]  +
push ebx  +
call esi  +
push eax  +
call ds:HeapFree  +
mov [edi+10h] ebx +
mov [edi+8] ebx +
mov esi [ebp-30h] +
mov [ebp-28h] esi +
mov [ebp-1Ch] ebx +
lea eax [ebp-28h] +
push eax  +
push 1  +
push esi  +
call sub_100AF28  +
mov [ebp-1Ch] eax +
cmp eax ebx +
jnz loc_10094C5  +
lea eax [ebp-28h] +
push eax  +
push 2  +
push dword ptr [ebp-28h]  +
call sub_1003394  +
mov [ebp-1Ch] eax +
cmp eax ebx +
jnz loc_10094C5  +
push dword ptr [ebp-28h]  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [edi+10h] eax +
cmp eax ebx +
jnz loc_1009486  +
mov dword ptr [ebp-1Ch] 8007000Eh +
jmp loc_10094C5  +
push dword ptr [ebp-20h]  +
inc esi  +
push esi  +
push eax  +
call sub_10039E4  +
mov [ebp-1Ch] eax +
cmp eax ebx +
jnz loc_10094C5  +
cmp dword_10100C0 3 +
jnz loc_10094B7  +
push edi  +
call near ptr dword_1008BE0+3  +
mov [ebp-1Ch] eax +
cmp eax ebx +
jnz loc_10094C5  +
mov dword ptr [ebp-2Ch] 97h +
jmp loc_10094BE  +
mov dword ptr [ebp-2Ch] 95h +
mov dword ptr [ebp-24h] 1 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_10094D8  +
jmp loc_1009265  +
***
cmp [ebp-20h] ebx +
jz loc_1009513  +
push dword ptr [ebp-20h]  +
push ebx  +
mov esi ds:GetProcessHeap +
call esi  +
push eax  +
call ds:HeapSize  +
cmp eax 0FFFFFFFFh +
jz loc_1009510  +
mov ecx [ebp-20h] +
cmp eax ebx +
jz loc_1009503  +
mov byte ptr [ecx] 0 +
inc ecx  +
dec eax  +
jnz loc_10094FC  +
push dword ptr [ebp-20h]  +
push ebx  +
call esi  +
push eax  +
call ds:HeapFree  +
mov [ebp-20h] ebx +
mov esi [ebp-1Ch] +
cmp esi ebx +
jge loc_1009526  +
push esi  +
call sub_1004E65  +
push esi  +
jmp loc_100924A  +
cmp dword_10100C0 3 +
jnz loc_1009534  +
cmp [ebp-24h] ebx +
jz loc_1009520  +
xor ebx ebx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 68h +
mov eax dword_1010004 +
xor eax ebp +
mov [ebp+var_4] eax +
push edi  +
mov eax [ebp+arg_10] +
mov [ebp+var_38] eax +
mov eax 85h +
mov [ebp+var_1C] ax +
add eax 5 +
mov [ebp+var_1A] ax +
mov eax 90h +
mov [ebp+var_18] ax +
add eax 2 +
mov [ebp+var_16] ax +
mov eax 96h +
mov [ebp+var_14] ax +
add eax 2 +
mov [ebp+var_12] ax +
mov eax 0A5h +
mov [ebp+var_10] ax +
add eax 2 +
mov [ebp+var_E] ax +
mov eax 0ABh +
mov [ebp+var_C] ax +
add eax 9 +
mov [ebp+var_A] ax +
mov eax 0B8h +
mov [ebp+var_8] ax +
add eax 3 +
mov [ebp+var_6] ax +
mov eax 82h +
mov [ebp+var_34] ax +
add eax 7 +
mov [ebp+var_32] ax +
mov eax 8Eh +
mov [ebp+var_30] ax +
inc eax  +
mov [ebp+var_2E] ax +
mov eax 95h +
mov [ebp+var_2C] ax +
add eax 2 +
mov [ebp+var_2A] ax +
mov eax 0A4h +
mov [ebp+var_28] ax +
add eax 2 +
mov [ebp+var_26] ax +
mov eax 0AAh +
mov [ebp+var_24] ax +
add eax 9 +
mov [ebp+var_22] ax +
mov eax 0B7h +
mov [ebp+var_20] ax +
add eax 3 +
mov [ebp+var_1E] ax +
mov eax [ebp+arg_8] +
imul eax eax +
mov edi [ebp+arg_4] +
push eax  +
push 0  +
push edi  +
mov [ebp+var_68] offset loc_1006E86 +
mov [ebp+var_64] offset loc_1005EAF +
mov [ebp+var_60] offset byte_1008CB5 +
mov [ebp+var_5C] offset loc_1009041 +
mov [ebp+var_58] offset loc_10071FF +
mov [ebp+var_54] offset loc_1006004 +
mov [ebp+var_50] offset loc_10073D8 +
mov [ebp+var_4C] offset byte_1007760 +
mov [ebp+var_48] offset loc_1007E8D +
mov [ebp+var_44] offset loc_10085A4 +
mov [ebp+var_40] offset loc_100880A +
mov [ebp+var_3C] offset loc_10089F6 +
call memset  +
xor edx edx +
add esp 0Ch +
cmp [ebp+arg_8] edx +
jbe loc_10096CB  +
push ebx  +
push esi  +
mov esi [ebp+arg_C] +
push 38h  +
lea eax [edi+4] +
pop edi  +
mov ecx [ebp+arg_0] +
mov ebx [ebp+edx*4+var_68] +
mov [eax+4] ecx +
movzx ecx [ebp+edx*2+var_1C] +
mov [eax+24h] ecx +
movzx ecx [ebp+edx*2+var_34] +
mov [eax-4] edi +
mov dword ptr [eax] 1000h +
mov [eax+8] ecx +
mov [eax+14h] ebx +
mov [eax+18h] esi +
cmp [esi+18h] ecx +
jnz loc_10096C1  +
mov ecx [ebp+var_38] +
mov [ecx] edx +
inc edx  +
add eax edi +
cmp edx [ebp+arg_8] +
jb loc_100968E  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_1009DC4  +
leave   +
retn 14h  +
***
call __SEH_prolog4  +
call __SEH_prolog4  +
cmp [ebp-28h] ebx +
jz loc_100993B  +
call ds:CoUninitialize  +
mov [ebp-28h] ebx +
mov esi ds:GetProcessHeap +
cmp [ebp-40h] ebx +
jz loc_1009975  +
push dword ptr [ebp-40h]  +
push ebx  +
call esi  +
push eax  +
call ds:HeapSize  +
cmp eax 0FFFFFFFFh +
jz loc_1009972  +
mov ecx [ebp-40h] +
cmp eax ebx +
jz loc_1009965  +
mov [ecx] bl +
inc ecx  +
dec eax  +
jnz loc_100995F  +
push dword ptr [ebp-40h]  +
push ebx  +
call esi  +
push eax  +
call ds:HeapFree  +
mov [ebp-40h] ebx +
cmp [ebp-3Ch] ebx +
jz loc_10099A9  +
push dword ptr [ebp-3Ch]  +
push ebx  +
call esi  +
push eax  +
call ds:HeapSize  +
cmp eax 0FFFFFFFFh +
jz loc_10099A6  +
mov ecx [ebp-3Ch] +
cmp eax ebx +
jz loc_1009999  +
mov [ecx] bl +
inc ecx  +
dec eax  +
jnz loc_1009993  +
push dword ptr [ebp-3Ch]  +
push ebx  +
call esi  +
push eax  +
call ds:HeapFree  +
mov [ebp-3Ch] ebx +
cmp [ebp-30h] ebx +
jz loc_10099BE  +
push dword ptr [ebp-30h]  +
push ebx  +
call esi  +
push eax  +
call ds:HeapFree  +
mov [ebp-30h] ebx +
mov eax lpMem +
cmp eax ebx +
jz loc_10099D8  +
push eax  +
push ebx  +
call esi  +
push eax  +
call ds:HeapFree  +
mov lpMem ebx +
cmp [ebp-20h] ebx +
jz loc_10099E6  +
push dword ptr [ebp-20h]  +
call ds:CloseHandle  +
cmp [ebp-1Ch] ebx +
jge locret_10099F8  +
cmp [ebp-24h] ebx +
jnz locret_10099F8  +
push dword ptr [ebp-1Ch]  +
call sub_1004E65  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_1009A1A  +
test eax eax +
jnz loc_1009A1F  +
mov ecx [esi] +
test ecx ecx +
jz loc_1009A17  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_1009A0B  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_10100F0 +
push offset dword_10100E0  +
push dword_10100EC  +
mov dword_10100E0 eax +
push offset unk_10100D0  +
push offset unk_10100D4  +
push offset unk_10100CC  +
call ds:__getmainargs  +
add esp 14h +
mov dword_10100DC eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+var_1C] ebx +
mov [ebp+ms_exc.disabled] ebx +
lea eax [ebp+StartupInfo] +
push eax  +
call ds:GetStartupInfoA  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [ebp+ms_exc.disabled] 1 +
mov eax large fs:18h +
mov esi [eax+4] +
mov edi offset Destination +
push 0  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
test eax eax +
jz loc_1009ABF  +
cmp eax esi +
jnz loc_1009AB2  +
xor esi esi +
inc esi  +
mov ebx esi +
jmp loc_1009AC2  +
push 3E8h  +
call ds:Sleep  +
jmp loc_1009A99  +
xor esi esi +
inc esi  +
mov eax dword_1010438 +
cmp eax esi +
jnz loc_1009AD5  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_1009B04  +
mov eax dword_1010438 +
test eax eax +
jnz loc_1009AFE  +
mov dword_1010438 esi +
push offset dword_10012D4  +
push offset dword_10012C8  +
call sub_10099FE  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1009B04  +
jmp loc_1009C2C  +
mov dword_10100E8 esi +
mov eax dword_1010438 +
cmp eax esi +
jnz loc_1009B28  +
push offset dword_10012C4  +
push offset dword_10012BC  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_1010438 2 +
test ebx ebx +
jnz loc_1009B34  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_1010440 0 +
jz loc_1009B58  +
push offset dword_1010440  +
call sub_1009F79  +
pop ecx  +
test eax eax +
jz loc_1009B58  +
push 0  +
push 2  +
push 0  +
call dword_1010440  +
mov eax ds:_acmdln +
mov esi [eax] +
mov [ebp+var_20] esi +
mov al [esi] +
cmp al 20h +
ja $LN61  +
test al al +
jz loc_1009B72  +
cmp [ebp+var_1C] 0 +
jnz $LN61  +
mov al [esi] +
test al al +
jz loc_1009B82  +
cmp al 20h +
ja loc_1009B82  +
inc esi  +
mov [ebp+var_20] esi +
jmp loc_1009B72  +
test byte ptr [ebp+StartupInfo.dwFlags] 1 +
jz loc_1009B8E  +
movzx eax [ebp+StartupInfo.wShowWindow] +
jmp loc_1009B91  +
push 0Ah  +
pop eax  +
push eax  +
push esi  +
push 0  +
push 1000000h  +
call _WinMain@16  +
mov dword_10100E4 eax +
cmp dword_10100D8 0 +
jnz $LN62  +
push eax  +
call ds:exit  +
cmp al 22h +
jnz loc_1009BC3  +
xor ecx ecx +
cmp [ebp+var_1C] ecx +
setz cl  +
mov [ebp+var_1C] ecx +
movzx eax al +
push eax  +
call ds:_ismbblead  +
pop ecx  +
test eax eax +
jz loc_1009BD6  +
inc esi  +
mov [ebp+var_20] esi +
inc esi  +
jmp loc_1009B5F  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-24h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-24h] +
mov dword_10100E4 eax +
cmp dword_10100D8 0 +
jnz $LN62  +
push eax  +
call ds:_exit  +
cmp dword_10100E8 0 +
jnz loc_1009C17  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_10100E4 +
jmp loc_1009C38  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_1009C55  +
xor eax eax +
jmp loc_1009CA2  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_1009C51  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_1009C8F  +
cmp ecx 20Bh +
jnz loc_1009C51  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_1009C51  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_1009C9D  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_1009C51  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 2  +
mov dword_10100D8 eax +
call sub_100A087  +
push eax  +
call ds:__set_app_type  +
or dword_1010430 0FFFFFFFFh +
or dword_1010434 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_10100F8 +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_10100F4 +
mov [eax] ecx +
call sub_100A019  +
cmp dword_1010018 0 +
jnz loc_1009CFB  +
push offset sub_100A019  +
call ds:__setusermatherr  +
pop ecx  +
call sub_100A001  +
xor eax eax +
retn   +
***
call sub_100A0C6  +
jmp ___tmainCRTStartup  +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_1009DC4  +
push offset dword_1010004  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
cmp ecx dword_1010004 +
jnz loc_1009DCF  +
retn 0  +
jmp loc_100A167  +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-1Ch] +
xor ecx ebp +
call sub_1009DC4  +
jmp __SEH_epilog4  +
***
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb cs20  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp+0] eax +
retn   +
sub eax 1000h +
test [eax] eax +
jmp cs10  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_1009EB8  +
cmp dword ptr [eax+10h] 3 +
jnz loc_1009EB8  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_1009EB2  +
cmp eax 19930521h +
jz loc_1009EB2  +
cmp eax 19930522h +
jz loc_1009EB2  +
cmp eax 1994000h +
jnz loc_1009EB8  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset dword_1009E78+3)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_1009F06  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_1009F02  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_1009F6D  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1009F65  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_1009F6F  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_1009F55  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_1009EF0  +
pop ecx  +
test eax eax +
jz loc_1009FD6  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_1009F30  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1009FD6  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_1009FDF  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100A07A  +
cmp ecx 0FFFFFFFFh +
jz loc_100A07A  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_100A073  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_100A073  +
cmp edx 10000000h +
jnb loc_100A073  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_100A073  +
jmp loc_100A06E  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_100A0BC  +
push eax  +
call sub_100A021  +
test eax eax +
jz loc_100A0BC  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_100A0B1  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_100A0BC  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1010004 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_100A0F8  +
test eax ebx +
jz loc_100A0F8  +
not eax  +
mov dword_1010008 eax +
jmp loc_100A153  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_100A13F  +
test dword_1010004 ebx +
jnz loc_100A144  +
mov esi 0BB40E64Fh +
mov dword_1010004 esi +
not esi  +
mov dword_1010008 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_1010200 eax +
mov dword_10101FC ecx +
mov dword_10101F8 edx +
mov dword_10101F4 ebx +
mov dword_10101F0 esi +
mov dword_10101EC edi +
mov word_1010218 ss +
mov word_101020C cs +
mov word_10101E8 ds +
mov word_10101E4 es +
mov word_10101E0 fs +
mov word_10101DC gs +
pushf   +
pop dword_1010210  +
mov eax [ebp+0] +
mov dword_1010204 eax +
mov eax [ebp+4] +
mov dword_1010208 eax +
lea eax [ebp+8] +
mov dword_1010214 eax +
mov eax [ebp-320h] +
mov dword_1010150 10001h +
mov eax dword_1010208 +
mov dword_101010C eax +
mov dword_1010100 0C0000409h +
mov dword_1010104 1 +
mov eax dword_1010004 +
mov [ebp-328h] eax +
mov eax dword_1010008 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call ds:RtlNtStatusToDosError  +
test eax eax +
jle loc_100A26A  +
and eax 0FFFFh +
or eax 80070000h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push edi  +
mov [ebp+var_8] ebx +
mov [ebp+var_4] ebx +
cmp eax ebx +
jnz loc_100A296  +
mov edi 80070057h +
jmp loc_100A387  +
push esi  +
push 60h  +
push 8  +
mov [eax] ebx +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
cmp esi ebx +
jnz loc_100A2BA  +
mov edi 8007000Eh +
jmp loc_100A345  +
push ebx  +
push ebx  +
push offset aRng  +
lea eax [ebp+var_8] +
push eax  +
call BCryptOpenAlgorithmProvider  +
push eax  +
call sub_100A24E  +
mov edi eax +
cmp edi ebx +
jnz loc_100A345  +
push ebx  +
push 5Eh  +
push esi  +
push [ebp+var_8]  +
call BCryptGenRandom  +
push eax  +
call sub_100A24E  +
mov edi eax +
mov [ebp+var_10] edi +
cmp edi ebx +
jnz loc_100A345  +
xor ecx ecx +
mov [ebp+var_C] 5 +
mov eax [ebp+var_4] +
movzx eax word ptr [esi+eax*2] +
cdq   +
push 0Ah  +
pop edi  +
idiv  edi +
mov eax [ebp+var_4] +
add edx 30h +
inc [ebp+var_4]  +
dec [ebp+var_C]  +
mov [esi+eax*2] dx +
jnz loc_100A2FA  +
lea eax [ecx+1] +
cmp eax 8 +
jz loc_100A32E  +
mov edx [ebp+var_4] +
inc [ebp+var_4]  +
push 2Dh  +
pop ecx  +
mov [esi+edx*2] cx +
mov ecx eax +
cmp ecx 8 +
jl loc_100A2F3  +
mov edi [ebp+var_10] +
xor eax eax +
mov [esi+5Eh] ax +
mov eax [ebp+arg_0] +
mov [eax] esi +
xor esi esi +
cmp [ebp+var_8] ebx +
jz loc_100A353  +
push ebx  +
push [ebp+var_8]  +
call BCryptCloseAlgorithmProvider  +
cmp esi ebx +
jz loc_100A386  +
push esi  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapSize  +
cmp eax 0FFFFFFFFh +
jz loc_100A386  +
mov ecx esi +
cmp eax ebx +
jz loc_100A377  +
mov [ecx] bl +
inc ecx  +
dec eax  +
jnz loc_100A371  +
push esi  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop esi  +
mov eax edi +
pop edi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push edi  +
xor eax eax +
mov word ptr [ebp+pvargDest.anonymous_0] ax +
lea edi [ebp+pvargDest.anonymous_0+2] +
stos   +
stos   +
stos   +
stos   +
lea eax [ebp+pvargDest] +
push eax  +
mov esi ecx +
call ds:VariantInit  +
mov edi [ebp+arg_0] +
test edi edi +
jnz loc_100A3C6  +
mov esi 80070057h +
jmp loc_100A3EF  +
lea eax [ebp+pvargDest] +
push eax  +
push offset aManufacturerid  +
mov ecx esi +
call sub_100B5F1  +
mov esi eax +
test esi esi +
jnz loc_100A3EF  +
cmp word ptr [ebp+pvargDest.anonymous_0] 1 +
jnz loc_100A3EA  +
mov esi 80004005h +
jmp loc_100A3EF  +
mov eax dword ptr [ebp+pvargDest.anonymous_0+8] +
mov [edi] eax +
lea eax [ebp+pvargDest] +
push eax  +
call ds:VariantClear  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
xor eax eax +
push ebx  +
mov word ptr [ebp+pvarg.anonymous_0] ax +
push esi  +
push edi  +
lea edi [ebp+pvarg.anonymous_0+2] +
stos   +
stos   +
mov esi ds:VariantInit +
stos   +
stos   +
xor eax eax +
mov word ptr [ebp+var_2C] ax +
lea edi [ebp+var_2C+2] +
stos   +
stos   +
stos   +
stos   +
lea eax [ebp+pvarg] +
xor ebx ebx +
push eax  +
mov [ebp+var_C] ecx +
mov [ebp+var_4] ebx +
mov [ebp+var_8] ebx +
call esi  +
lea eax [ebp+var_2C] +
push eax  +
call esi  +
cmp [ebp+arg_0] ebx +
jz loc_100A511  +
cmp [ebp+arg_4] ebx +
jz loc_100A511  +
lea eax [ebp+pvarg] +
push eax  +
call esi  +
mov edi ds:SysAllocString +
push 8  +
pop eax  +
push [ebp+arg_0]  +
mov word ptr [ebp+pvarg.anonymous_0] ax +
call edi  +
mov dword ptr [ebp+pvarg.anonymous_0+8] eax +
cmp eax ebx +
jz loc_100A494  +
lea eax [ebp+var_2C] +
push eax  +
call esi  +
push 8  +
pop eax  +
push [ebp+arg_4]  +
mov word ptr [ebp+var_2C] ax +
call edi  +
mov [ebp+bstr] eax +
cmp eax ebx +
jnz loc_100A49D  +
mov [ebp+arg_0] 8007000Eh +
jmp loc_100A518  +
mov edi [ebp+var_C] +
lea eax [ebp+var_4] +
push eax  +
mov esi offset aChangeowneraut +
push esi  +
mov ecx edi +
call sub_100B70F  +
mov [ebp+arg_0] eax +
cmp eax ebx +
jnz loc_100A518  +
lea eax [ebp+pvarg] +
push eax  +
push offset aOldownerauth  +
push [ebp+var_4]  +
mov ecx edi +
call sub_100B721  +
mov [ebp+arg_0] eax +
cmp eax ebx +
jnz loc_100A518  +
lea eax [ebp+var_2C] +
push eax  +
push offset aNewownerauth  +
push [ebp+var_4]  +
mov ecx edi +
call sub_100B721  +
mov [ebp+arg_0] eax +
cmp eax ebx +
jnz loc_100A518  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+var_4]  +
mov ecx edi +
push esi  +
call sub_100B6EE  +
mov [ebp+arg_0] eax +
cmp eax ebx +
jnz loc_100A518  +
push [ebp+var_8]  +
mov ecx edi +
call sub_100B7D6  +
mov [ebp+arg_0] eax +
jmp loc_100A518  +
mov [ebp+arg_0] 80070057h +
mov eax [ebp+var_4] +
cmp eax ebx +
jz loc_100A528  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_4] ebx +
mov eax [ebp+var_8] +
cmp eax ebx +
jz loc_100A538  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_8] ebx +
cmp word ptr [ebp+pvarg.anonymous_0] 8 +
mov esi ds:SysStringByteLen +
jnz loc_100A55C  +
cmp dword ptr [ebp+pvarg.anonymous_0+8] ebx +
jz loc_100A55C  +
push dword ptr [ebp+pvarg.anonymous_0+8]  +
call esi  +
mov ecx dword ptr [ebp+pvarg.anonymous_0+8] +
cmp eax ebx +
jz loc_100A55C  +
mov [ecx] bl +
inc ecx  +
dec eax  +
jnz loc_100A556  +
mov edi ds:VariantClear +
lea eax [ebp+pvarg] +
push eax  +
call edi  +
cmp word ptr [ebp+var_2C] 8 +
jnz loc_100A586  +
cmp [ebp+bstr] ebx +
jz loc_100A586  +
push [ebp+bstr]  +
call esi  +
mov ecx [ebp+bstr] +
cmp eax ebx +
jz loc_100A586  +
mov [ecx] bl +
inc ecx  +
dec eax  +
jnz loc_100A580  +
lea eax [ebp+var_2C] +
push eax  +
call edi  +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
push 0  +
push offset aCreateendorsem  +
mov esi ecx +
call sub_100B6EE  +
mov edi eax +
test edi edi +
jnz loc_100A5CB  +
push [ebp+var_4]  +
mov ecx esi +
call sub_100B7D6  +
mov edi eax +
mov eax [ebp+var_4] +
test eax eax +
jz loc_100A5D8  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
xor eax eax +
push ebx  +
mov word ptr [ebp+pvargDest.anonymous_0] ax +
push esi  +
push edi  +
lea edi [ebp+pvargDest.anonymous_0+2] +
stos   +
stos   +
mov esi ds:VariantInit +
and [ebp+var_4] 0 +
stos   +
stos   +
xor eax eax +
mov word ptr [ebp+var_14] ax +
lea edi [ebp+var_14+2] +
stos   +
stos   +
stos   +
stos   +
lea eax [ebp+pvargDest] +
push eax  +
mov ebx ecx +
call esi  +
lea eax [ebp+var_14] +
push eax  +
call esi  +
cmp [ebp+arg_0] 0 +
jz loc_100A698  +
mov edi [ebp+arg_4] +
test edi edi +
jz loc_100A698  +
lea eax [ebp+var_4] +
push eax  +
push 0  +
push offset aGetphysicalpre  +
mov ecx ebx +
call sub_100B6EE  +
mov esi eax +
test esi esi +
jnz loc_100A69D  +
push [ebp+var_4]  +
mov ecx ebx +
call sub_100B7D6  +
mov esi eax +
test esi esi +
jnz loc_100A69D  +
lea eax [ebp+pvargDest] +
push eax  +
push offset aRequest  +
push [ebp+var_4]  +
mov ecx ebx +
call sub_100B75E  +
mov esi eax +
test esi esi +
jnz loc_100A69D  +
lea eax [ebp+var_14] +
push eax  +
push offset aResponse  +
push [ebp+var_4]  +
mov ecx ebx +
call sub_100B75E  +
mov esi eax +
test esi esi +
jnz loc_100A69D  +
mov eax dword ptr [ebp+pvargDest.anonymous_0+8] +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
mov eax [ebp+var_C] +
mov [edi] eax +
jmp loc_100A69D  +
mov esi 80070057h +
mov eax [ebp+var_4] +
test eax eax +
jz loc_100A6AE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and [ebp+var_4] 0 +
mov edi ds:VariantClear +
lea eax [ebp+var_14] +
push eax  +
call edi  +
lea eax [ebp+pvargDest] +
push eax  +
call edi  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
xor eax eax +
mov word ptr [ebp+pvargDest.anonymous_0] ax +
lea edi [ebp+pvargDest.anonymous_0+2] +
stos   +
stos   +
stos   +
stos   +
lea eax [ebp+pvargDest] +
xor ebx ebx +
push eax  +
mov esi ecx +
mov [ebp+var_4] ebx +
call ds:VariantInit  +
cmp [ebp+arg_0] ebx +
jnz loc_100A704  +
mov edi 80070057h +
jmp loc_100A774  +
lea eax [ebp+var_4] +
push eax  +
push ebx  +
push offset aGetphysicalp_0  +
mov ecx esi +
call sub_100B6EE  +
mov edi eax +
cmp edi ebx +
jnz loc_100A774  +
push [ebp+var_4]  +
mov ecx esi +
call sub_100B7D6  +
mov edi eax +
cmp edi ebx +
jnz loc_100A774  +
lea eax [ebp+pvargDest] +
push eax  +
push offset aTransition  +
push [ebp+var_4]  +
mov ecx esi +
call sub_100B75E  +
mov edi eax +
cmp edi ebx +
jnz loc_100A774  +
mov eax dword ptr [ebp+pvargDest.anonymous_0+8] +
sub eax ebx +
jz loc_100A76F  +
dec eax  +
jz loc_100A764  +
dec eax  +
mov eax [ebp+arg_0] +
jz loc_100A75C  +
mov dword ptr [eax] 3 +
jmp loc_100A774  +
mov dword ptr [eax] 2 +
jmp loc_100A774  +
mov eax [ebp+arg_0] +
mov dword ptr [eax] 1 +
jmp loc_100A774  +
mov eax [ebp+arg_0] +
mov [eax] ebx +
mov eax [ebp+var_4] +
cmp eax ebx +
jz loc_100A784  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_4] ebx +
lea eax [ebp+pvargDest] +
push eax  +
call ds:VariantClear  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_8] 0 +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
lea eax [ebp+var_8] +
push eax  +
push offset aIsactivated  +
call sub_100C47A  +
pop edi  +
test eax eax +
jnz locret_100A7D5  +
cmp [ebp+var_4] eax +
jz loc_100A7CD  +
mov eax 80004005h +
jmp locret_100A7D5  +
mov ecx [ebp+arg_0] +
mov edx [ebp+var_8] +
mov [ecx] edx +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_8] 0 +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
lea eax [ebp+var_8] +
push eax  +
push offset aIsenabled  +
call sub_100C47A  +
pop edi  +
test eax eax +
jnz locret_100A817  +
cmp [ebp+var_4] eax +
jz loc_100A80F  +
mov eax 80004005h +
jmp locret_100A817  +
mov ecx [ebp+arg_0] +
mov edx [ebp+var_8] +
mov [ecx] edx +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_8] 0 +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
lea eax [ebp+var_8] +
push eax  +
push offset aIsendorsementk  +
call sub_100C47A  +
pop edi  +
test eax eax +
jnz locret_100A859  +
cmp [ebp+var_4] eax +
jz loc_100A851  +
mov eax 80004005h +
jmp locret_100A859  +
mov ecx [ebp+arg_0] +
mov edx [ebp+var_8] +
mov [ecx] edx +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_8] 0 +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
lea eax [ebp+var_8] +
push eax  +
push offset aIsowned  +
call sub_100C47A  +
pop edi  +
test eax eax +
jnz locret_100A89B  +
cmp [ebp+var_4] eax +
jz loc_100A893  +
mov eax 80004005h +
jmp locret_100A89B  +
mov ecx [ebp+arg_0] +
mov edx [ebp+var_8] +
mov [ecx] edx +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_8] 0 +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
lea eax [ebp+var_8] +
push eax  +
push offset aIsownershipall  +
call sub_100C47A  +
pop edi  +
test eax eax +
jnz locret_100A8DD  +
cmp [ebp+var_4] eax +
jz loc_100A8D5  +
mov eax 80004005h +
jmp locret_100A8DD  +
mov ecx [ebp+arg_0] +
mov edx [ebp+var_8] +
mov [ecx] edx +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_8] 0 +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
lea eax [ebp+var_8] +
push eax  +
push offset aIssrkauthcompa  +
call sub_100C47A  +
pop edi  +
test eax eax +
jnz locret_100A91F  +
cmp [ebp+var_4] eax +
jz loc_100A917  +
mov eax 80004005h +
jmp locret_100A91F  +
mov ecx [ebp+arg_0] +
mov edx [ebp+var_8] +
mov [ecx] edx +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
and [ebp+var_4] 0 +
and [ebp+var_8] 0 +
push ebx  +
xor eax eax +
push esi  +
push edi  +
mov word ptr [ebp+pvarg.anonymous_0] ax +
lea edi [ebp+pvarg.anonymous_0+2] +
stos   +
stos   +
stos   +
stos   +
lea eax [ebp+pvarg] +
push eax  +
mov ebx ecx +
call ds:VariantInit  +
push 3  +
pop eax  +
mov word ptr [ebp+pvarg.anonymous_0] ax +
mov eax [ebp+arg_0] +
mov dword ptr [ebp+pvarg.anonymous_0+8] eax +
lea eax [ebp+var_4] +
push eax  +
mov esi offset aSetphysicalpre +
push esi  +
mov ecx ebx +
call sub_100B70F  +
mov edi eax +
test edi edi +
jnz loc_100A9B3  +
lea eax [ebp+pvarg] +
push eax  +
push offset aRequest  +
push [ebp+var_4]  +
mov ecx ebx +
call sub_100B721  +
mov edi eax +
test edi edi +
jnz loc_100A9B3  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+var_4]  +
mov ecx ebx +
push esi  +
call sub_100B6EE  +
mov edi eax +
test edi edi +
jnz loc_100A9B3  +
push [ebp+var_8]  +
mov ecx ebx +
call sub_100B7D6  +
mov edi eax +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_100A9CE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and [ebp+var_4] 0 +
mov eax [ebp+var_8] +
test eax eax +
jz loc_100A9DB  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
push [ebp+arg_0]  +
call sub_100A406  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
xor eax eax +
push esi  +
push edi  +
mov word ptr [ebp+pvarg.anonymous_0] ax +
lea edi [ebp+pvarg.anonymous_0+2] +
stos   +
stos   +
xor ebx ebx +
stos   +
mov esi ecx +
mov [ebp+var_4] ebx +
mov [ebp+var_8] ebx +
stos   +
cmp [ebp+arg_0] ebx +
jz loc_100AAA9  +
cmp [ebp+arg_4] ebx +
jz loc_100AAA9  +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantInit  +
push 8  +
pop eax  +
push [ebp+arg_0]  +
mov word ptr [ebp+pvarg.anonymous_0] ax +
call ds:SysAllocString  +
mov dword ptr [ebp+pvarg.anonymous_0+8] eax +
cmp eax ebx +
jnz loc_100AA57  +
mov edi 8007000Eh +
jmp loc_100AAAE  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_4]  +
mov ecx esi +
call sub_100B70F  +
mov edi eax +
cmp edi ebx +
jnz loc_100AAAE  +
lea eax [ebp+pvarg] +
push eax  +
push offset aOwnerauth  +
push [ebp+var_4]  +
mov ecx esi +
call sub_100B721  +
mov edi eax +
cmp edi ebx +
jnz loc_100AAAE  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+var_4]  +
mov ecx esi +
push [ebp+arg_4]  +
call sub_100B6EE  +
mov edi eax +
cmp edi ebx +
jnz loc_100AAAE  +
push [ebp+var_8]  +
mov ecx esi +
call sub_100B7D6  +
mov edi eax +
jmp loc_100AAAE  +
mov edi 80070057h +
mov eax [ebp+var_4] +
cmp eax ebx +
jz loc_100AABE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_4] ebx +
mov eax [ebp+var_8] +
cmp eax ebx +
jz loc_100AACE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_8] ebx +
cmp word ptr [ebp+pvarg.anonymous_0] 8 +
jnz loc_100AAF0  +
cmp dword ptr [ebp+pvarg.anonymous_0+8] ebx +
jz loc_100AAF0  +
push dword ptr [ebp+pvarg.anonymous_0+8]  +
call ds:SysStringByteLen  +
mov ecx dword ptr [ebp+pvarg.anonymous_0+8] +
cmp eax ebx +
jz loc_100AAF0  +
mov [ecx] bl +
inc ecx  +
dec eax  +
jnz loc_100AAEA  +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset aClear  +
push [ebp+arg_0]  +
call sub_100AA02  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
xor eax eax +
push ebx  +
mov word ptr [ebp+pvarg.anonymous_0] ax +
push esi  +
push edi  +
lea edi [ebp+pvarg.anonymous_0+2] +
stos   +
stos   +
stos   +
mov esi ds:VariantInit +
stos   +
xor eax eax +
mov word ptr [ebp+pvargDest.anonymous_0] ax +
lea edi [ebp+pvargDest.anonymous_0+2] +
stos   +
stos   +
stos   +
stos   +
lea eax [ebp+pvarg] +
xor ebx ebx +
push eax  +
mov [ebp+var_C] ecx +
mov [ebp+var_4] ebx +
mov [ebp+var_8] ebx +
xor edi edi +
call esi  +
lea eax [ebp+pvargDest] +
push eax  +
call esi  +
cmp [ebp+arg_0] ebx +
jz loc_100AC70  +
cmp [ebp+arg_4] ebx +
jz loc_100AC70  +
lea eax [ebp+pvarg] +
push eax  +
call esi  +
push 8  +
pop eax  +
push [ebp+arg_0]  +
mov word ptr [ebp+pvarg.anonymous_0] ax +
call ds:SysAllocString  +
mov dword ptr [ebp+pvarg.anonymous_0+8] eax +
cmp eax ebx +
jnz loc_100ABA4  +
mov [ebp+arg_0] 8007000Eh +
jmp loc_100ACA8  +
mov edi [ebp+var_C] +
lea eax [ebp+var_4] +
push eax  +
mov esi offset aConverttoowner +
push esi  +
mov ecx edi +
call sub_100B70F  +
mov [ebp+arg_0] eax +
cmp eax ebx +
jnz loc_100ACA8  +
lea eax [ebp+pvarg] +
push eax  +
push offset aOwnerpassphras  +
push [ebp+var_4]  +
mov ecx edi +
call sub_100B721  +
mov [ebp+arg_0] eax +
cmp eax ebx +
jnz loc_100ACA8  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+var_4]  +
mov ecx edi +
push esi  +
call sub_100B6EE  +
mov [ebp+arg_0] eax +
cmp eax ebx +
jnz loc_100ACA8  +
push [ebp+var_8]  +
mov ecx edi +
call sub_100B7D6  +
mov [ebp+arg_0] eax +
cmp eax ebx +
jnz loc_100ACA8  +
lea eax [ebp+pvargDest] +
push eax  +
push offset aOwnerauth  +
push [ebp+var_8]  +
mov ecx edi +
call sub_100B75E  +
mov [ebp+arg_0] eax +
cmp eax ebx +
jnz loc_100ACA8  +
push dword ptr [ebp+pvargDest.anonymous_0+8]  +
call ds:SysStringLen  +
mov esi eax +
inc esi  +
lea eax [esi+esi] +
push eax  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov edi eax +
cmp edi ebx +
jnz loc_100AC58  +
mov [ebp+arg_0] 8007000Eh +
jmp loc_100AC77  +
push dword ptr [ebp+pvargDest.anonymous_0+8]  +
push esi  +
push edi  +
call sub_10039E4  +
mov [ebp+arg_0] eax +
cmp eax ebx +
jnz loc_100AC77  +
mov eax [ebp+arg_4] +
mov [eax] edi +
jmp loc_100ACA8  +
mov [ebp+arg_0] 80070057h +
cmp edi ebx +
jz loc_100ACA8  +
mov esi ds:GetProcessHeap +
push edi  +
push ebx  +
call esi  +
push eax  +
call ds:HeapSize  +
cmp eax 0FFFFFFFFh +
jz loc_100ACA8  +
mov ecx edi +
cmp eax ebx +
jz loc_100AC9D  +
mov [ecx] bl +
inc ecx  +
dec eax  +
jnz loc_100AC97  +
push edi  +
push ebx  +
call esi  +
push eax  +
call ds:HeapFree  +
cmp word ptr [ebp+pvarg.anonymous_0] 8 +
mov esi ds:SysStringByteLen +
jnz loc_100ACCC  +
cmp dword ptr [ebp+pvarg.anonymous_0+8] ebx +
jz loc_100ACCC  +
push dword ptr [ebp+pvarg.anonymous_0+8]  +
call esi  +
mov ecx dword ptr [ebp+pvarg.anonymous_0+8] +
cmp eax ebx +
jz loc_100ACCC  +
mov [ecx] bl +
inc ecx  +
dec eax  +
jnz loc_100ACC6  +
mov edi ds:VariantClear +
lea eax [ebp+pvarg] +
push eax  +
call edi  +
cmp word ptr [ebp+pvargDest.anonymous_0] 8 +
jnz loc_100ACF6  +
cmp dword ptr [ebp+pvargDest.anonymous_0+8] ebx +
jz loc_100ACF6  +
push dword ptr [ebp+pvargDest.anonymous_0+8]  +
call esi  +
mov ecx dword ptr [ebp+pvargDest.anonymous_0+8] +
cmp eax ebx +
jz loc_100ACF6  +
mov [ecx] bl +
inc ecx  +
dec eax  +
jnz loc_100ACF0  +
lea eax [ebp+pvargDest] +
push eax  +
call edi  +
mov eax [ebp+var_4] +
cmp eax ebx +
jz loc_100AD0C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_4] ebx +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
cmp eax ebx +
pop ebx  +
jz loc_100AD1C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+arg_0] +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset aDisable  +
push [ebp+arg_0]  +
call sub_100AA02  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset aEnable  +
push [ebp+arg_0]  +
call sub_100AA02  +
pop ebp  +
retn 4  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
xor edi edi +
mov esi ecx +
mov [ebp+var_4] edi +
mov [ebp+var_8] edi +
mov [ebp+var_C] edi +
cmp ebx edi +
jnz loc_100AD91  +
mov eax 80070057h +
jmp loc_100ADD0  +
lea eax [ebp+var_4] +
push eax  +
call sub_100A79C  +
cmp eax edi +
jnz loc_100ADD0  +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
call sub_100A7DE  +
cmp eax edi +
jnz loc_100ADD0  +
lea eax [ebp+var_C] +
push eax  +
mov ecx esi +
call sub_100A8A4  +
cmp eax edi +
jnz loc_100ADD0  +
cmp [ebp+var_4] edi +
jz loc_100ADCE  +
cmp [ebp+var_8] edi +
jz loc_100ADCE  +
cmp [ebp+var_C] edi +
jz loc_100ADCE  +
xor edi edi +
inc edi  +
mov [ebx] edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
retn   +
***
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset aResetauthlocko  +
push [ebp+arg_0]  +
call sub_100AA02  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset aResetsrkauth  +
push [ebp+arg_0]  +
call sub_100AA02  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset aTakeownership  +
push [ebp+arg_0]  +
call sub_100AA02  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx [ebp+arg_4] +
push edi  +
xor edi edi +
mov [ebp+var_8] edi +
mov [ebp+var_4] edi +
cmp ebx edi +
jnz loc_100AE78  +
mov [ebp+arg_4] 80070057h +
jmp loc_100AF1A  +
lea eax [ebp+var_8] +
push eax  +
push offset aWin32_tpm  +
push offset aRootCimv2Secur  +
push [ebp+arg_0]  +
call sub_100BD94  +
mov [ebp+arg_4] eax +
cmp eax edi +
jnz loc_100AEFC  +
mov ecx [ebp+var_8] +
lea eax [ebp+var_4] +
push eax  +
call sub_100BE1A  +
mov [ebp+arg_4] eax +
cmp eax edi +
jnz loc_100AEFC  +
push esi  +
push 0Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax edi +
jz loc_100AEC1  +
mov [eax] edi +
mov [eax+4] edi +
mov [eax+8] edi +
mov esi eax +
jmp loc_100AEC3  +
xor esi esi +
cmp esi edi +
jnz loc_100AED0  +
mov [ebp+arg_4] 8007000Eh +
jmp loc_100AEFB  +
push [ebp+var_4]  +
mov ecx esi +
push [ebp+var_8]  +
call sub_100B667  +
mov [ebp+arg_4] eax +
cmp eax edi +
jnz loc_100AEEE  +
mov [ebx] esi +
mov [ebp+var_8] edi +
mov [ebp+var_4] edi +
xor esi esi +
cmp esi edi +
jz loc_100AEFB  +
push 1  +
mov ecx esi +
call sub_10067F1  +
pop esi  +
mov eax [ebp+var_4] +
cmp eax edi +
jz loc_100AF0C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_4] edi +
mov ecx [ebp+var_8] +
cmp ecx edi +
jz loc_100AF1A  +
push 1  +
call sub_1003310  +
mov eax [ebp+arg_4] +
pop edi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_4] +
add eax ecx +
cmp eax ecx +
jb loc_100AF42  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_100AF4D  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 0  +
push [ebp+dwExceptionFlags]  +
push [ebp+dwExceptionCode]  +
call ds:RaiseException  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp dword ptr [ebp+8] 8007000Eh +
push 1  +
setz al  +
dec eax  +
and eax 6 +
add eax 0C0000017h +
push eax  +
call sub_100AF56  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_100AFD4  +
cmp eax 0Ch +
jz loc_100AFCD  +
cmp eax 16h +
jz loc_100AFC6  +
cmp eax 22h +
jz loc_100AFC6  +
cmp eax 50h +
jz loc_100AFD4  +
push 80004005h  +
call loc_100AF74  +
push 80070057h  +
jmp loc_100AFC1  +
push 8007000Eh  +
jmp loc_100AFC1  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call memcpy_s  +
add esp 10h +
push eax  +
call sub_100AF9C  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
xor esi esi +
push edi  +
mov edi ecx +
cmp [ebp+arg_0] esi +
jz loc_100B093  +
mov eax [edi] +
cmp eax esi +
jz loc_100B020  +
cmp [ebp+arg_4] esi +
jz loc_100B093  +
push eax  +
call ds:SysStringLen  +
mov ecx [ebp+arg_4] +
lea ebx [eax+ecx] +
cmp ebx eax +
mov [ebp+var_4] eax +
jge loc_100B03B  +
mov eax 8007000Eh +
jmp loc_100B095  +
push ebx  +
push esi  +
call ds:SysAllocStringLen  +
mov esi eax +
test esi esi +
jz loc_100B034  +
push dword ptr [edi]  +
call ds:SysStringLen  +
test eax eax +
jbe loc_100B06A  +
mov eax [ebp+var_4] +
add eax eax +
push eax  +
push dword ptr [edi]  +
lea eax [ebx+ebx] +
push eax  +
push esi  +
call sub_100AFDD  +
add esp 10h +
mov eax [ebp+arg_4] +
add eax eax +
push eax  +
push [ebp+arg_0]  +
push eax  +
mov eax [ebp+var_4] +
lea eax [esi+eax*2] +
push eax  +
call sub_100AFDD  +
xor eax eax +
add esp 10h +
mov [esi+ebx*2] ax +
push dword ptr [edi]  +
call ds:SysFreeString  +
mov [edi] esi +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor edi edi +
xor ebx ebx +
mov esi ecx +
mov [ebp+var_4] edi +
cmp [ebp+arg_0] edi +
jz loc_100B0FA  +
cmp [ebp+arg_4] edi +
jz loc_100B0FA  +
push [ebp+arg_0]  +
call ds:SysAllocString  +
mov ebx eax +
cmp ebx edi +
jnz loc_100B0D3  +
mov esi 8007000Eh +
jmp loc_100B0FF  +
mov eax [esi+10h] +
mov ecx [eax] +
push edi  +
lea edx [ebp+var_4] +
push edx  +
push edi  +
push ebx  +
push eax  +
call dword ptr [ecx+4Ch]  +
mov esi eax +
cmp esi edi +
jnz loc_100B0FF  +
push [ebp+arg_4]  +
mov eax [ebp+var_4] +
mov ecx [eax] +
push edi  +
push eax  +
call dword ptr [ecx+3Ch]  +
mov esi eax +
jmp loc_100B0FF  +
mov esi 80070057h +
mov eax [ebp+var_4] +
cmp eax edi +
jz loc_100B10F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_4] edi +
cmp ebx edi +
jz loc_100B11A  +
push ebx  +
call ds:SysFreeString  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor edi edi +
xor ebx ebx +
mov esi ecx +
mov [ebp+var_4] edi +
cmp [ebp+arg_0] edi +
jz loc_100B185  +
cmp [ebp+arg_4] edi +
jz loc_100B185  +
push [ebp+arg_0]  +
call ds:SysAllocString  +
mov ebx eax +
cmp ebx edi +
jnz loc_100B15A  +
mov esi 8007000Eh +
jmp loc_100B18A  +
mov eax [esi+0Ch] +
mov ecx [eax] +
push edi  +
lea edx [ebp+var_4] +
push edx  +
push [ebp+arg_8]  +
push edi  +
push edi  +
push ebx  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+60h]  +
mov esi eax +
cmp esi edi +
jnz loc_100B18A  +
mov eax [ebp+arg_C] +
cmp eax edi +
jz loc_100B197  +
mov ecx [ebp+var_4] +
mov [eax] ecx +
jmp loc_100B197  +
mov esi 80070057h +
mov eax [ebp+var_4] +
cmp eax edi +
jz loc_100B19A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_4] edi +
cmp ebx edi +
jz loc_100B1A5  +
push ebx  +
call ds:SysFreeString  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
push edi  +
xor eax eax +
lea edi [ebp+rgsabound.lLbound] +
mov [ebp+rgsabound.cElements] ebx +
mov [ebp+var_4] ebx +
stos   +
mov [ebp+ppvData] ebx +
cmp esi ebx +
jz loc_100B1F5  +
mov eax [esi+4] +
sub eax ebx +
jz loc_100B296  +
dec eax  +
jz loc_100B287  +
dec eax  +
jz loc_100B276  +
dec eax  +
jz loc_100B20D  +
dec eax  +
jz loc_100B201  +
mov [ebp+var_4] 80070057h +
jmp loc_100B2C2  +
mov [ebp+var_4] 80004001h +
jmp loc_100B2C2  +
mov eax [esi+0Ch] +
cmp eax ebx +
jz loc_100B2C2  +
cmp [esi+8] ebx +
jz loc_100B2C2  +
mov [ebp+rgsabound.cElements] eax +
mov eax 2011h +
mov [esi+10h] ax +
lea eax [ebp+rgsabound] +
push eax  +
push 1  +
push 11h  +
mov [ebp+rgsabound.lLbound] ebx +
call ds:SafeArrayCreate  +
mov [esi+18h] eax +
cmp eax ebx +
jz loc_100B2BB  +
lea ecx [ebp+ppvData] +
push ecx  +
push eax  +
call ds:SafeArrayAccessData  +
mov [ebp+var_4] eax +
cmp eax ebx +
jnz loc_100B2C2  +
push dword ptr [esi+0Ch]  +
push dword ptr [esi+8]  +
push [ebp+ppvData]  +
call memcpy  +
add esp 0Ch +
push dword ptr [esi+18h]  +
call ds:SafeArrayUnaccessData  +
mov [ebp+var_4] eax +
jmp loc_100B2C2  +
push 0Bh  +
pop eax  +
mov [esi+10h] ax +
mov ax [esi+8] +
mov [esi+18h] ax +
jmp loc_100B2C2  +
push 3  +
pop eax  +
mov [esi+10h] ax +
mov eax [esi+8] +
mov [esi+18h] eax +
jmp loc_100B2C2  +
cmp [esi+8] ebx +
jz loc_100B2C2  +
lea edi [esi+10h] +
push edi  +
call ds:VariantInit  +
push 8  +
pop eax  +
push dword ptr [esi+8]  +
mov [edi] ax +
call ds:SysAllocString  +
mov [esi+18h] eax +
cmp eax ebx +
jnz loc_100B2C2  +
mov [ebp+var_4] 8007000Eh +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
xor esi esi +
push edi  +
mov [ebp+var_4] esi +
mov [ebp+ppvData] esi +
cmp ebx esi +
jz loc_100B370  +
mov edx [ebp+arg_4] +
cmp edx esi +
jz loc_100B370  +
mov ecx [ebp+arg_8] +
cmp ecx esi +
jz loc_100B370  +
movzx eax word ptr [ebx] +
cmp ax 1 +
jnz loc_100B30B  +
mov [edx] esi +
mov [ecx] esi +
jmp loc_100B386  +
mov ecx 2011h +
cmp ax cx +
jz loc_100B31E  +
mov [ebp+var_4] 80070057h +
jmp loc_100B386  +
lea eax [ebp+ppvData] +
push eax  +
push dword ptr [ebx+8]  +
call ds:SafeArrayAccessData  +
mov [ebp+var_4] eax +
cmp eax esi +
jnz loc_100B377  +
mov eax [ebx+8] +
mov esi [eax+10h] +
push esi  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov edi eax +
test edi edi +
jnz loc_100B357  +
mov [ebp+var_4] 8007000Eh +
jmp loc_100B377  +
push esi  +
push [ebp+ppvData]  +
push edi  +
call memcpy  +
mov eax [ebp+arg_4] +
mov [eax] edi +
mov eax [ebp+arg_8] +
add esp 0Ch +
mov [eax] esi +
jmp loc_100B377  +
mov [ebp+var_4] 80070057h +
cmp [ebp+ppvData] 0 +
jz loc_100B386  +
push dword ptr [ebx+8]  +
call ds:SafeArrayUnaccessData  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
mov [ebp+var_4] ebx +
cmp esi ebx +
jz loc_100B4BE  +
mov eax [esi+4] +
sub eax ebx +
push edi  +
jz loc_100B483  +
dec eax  +
jz loc_100B4BA  +
dec eax  +
jz loc_100B4BA  +
dec eax  +
jz loc_100B457  +
dec eax  +
jz loc_100B3DD  +
mov [ebp+var_4] 80070057h +
jmp loc_100B4BD  +
mov eax [esi+0Ch] +
cmp eax ebx +
jz loc_100B4BD  +
mov [ebp+arg_0] ebx +
jbe loc_100B446  +
mov edi [ebp+arg_0] +
mov eax [esi+8] +
shl edi 2 +
add eax edi +
cmp [eax] ebx +
jz loc_100B43B  +
push dword ptr [eax]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapSize  +
cmp eax 0FFFFFFFFh +
jz loc_100B435  +
mov ecx [esi+8] +
mov ecx [edi+ecx] +
cmp eax ebx +
jz loc_100B421  +
mov [ecx] bl +
inc ecx  +
dec eax  +
jnz loc_100B41B  +
mov eax [esi+8] +
push dword ptr [eax+edi]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax [esi+8] +
mov [edi+eax] ebx +
inc [ebp+arg_0]  +
mov eax [ebp+arg_0] +
cmp eax [esi+0Ch] +
jb loc_100B3ED  +
mov eax [esi+8] +
cmp eax ebx +
jz loc_100B4BD  +
push eax  +
push ebx  +
call ds:GetProcessHeap  +
jmp loc_100B4B3  +
mov eax [esi+8] +
cmp eax ebx +
jz loc_100B4BD  +
mov edi ds:GetProcessHeap +
push eax  +
push ebx  +
call edi  +
push eax  +
call ds:HeapSize  +
cmp eax 0FFFFFFFFh +
jz loc_100B4BA  +
mov ecx [esi+8] +
cmp eax ebx +
jz loc_100B4AD  +
mov [ecx] bl +
inc ecx  +
dec eax  +
jnz loc_100B47B  +
jmp loc_100B4AD  +
mov eax [esi+8] +
cmp eax ebx +
jz loc_100B4BD  +
mov edi ds:GetProcessHeap +
push eax  +
push ebx  +
call edi  +
push eax  +
call ds:HeapSize  +
cmp eax 0FFFFFFFFh +
jz loc_100B4BA  +
mov ecx [esi+8] +
cmp eax ebx +
jz loc_100B4AD  +
mov [ecx] bl +
inc ecx  +
dec eax  +
jnz loc_100B4A7  +
push dword ptr [esi+8]  +
push ebx  +
call edi  +
push eax  +
call ds:HeapFree  +
mov [esi+8] ebx +
pop edi  +
mov eax [ebp+var_4] +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
push edi  +
xor edi edi +
mov [ebp+ppvData] ebx +
mov [ebp+var_4] ebx +
cmp esi ebx +
jz loc_100B5E3  +
movzx eax word ptr [esi] +
sub eax ebx +
jz loc_100B5DC  +
sub eax 3 +
jz loc_100B5D9  +
sub eax 5 +
jz loc_100B5BC  +
sub eax 3 +
jz loc_100B5B4  +
sub eax 1FFDh +
jz loc_100B56B  +
sub eax 9 +
jz loc_100B527  +
mov edi 80070057h +
jmp loc_100B5E3  +
mov eax [esi+8] +
cmp eax ebx +
jz loc_100B5E3  +
lea ecx [ebp+ppvData] +
push ecx  +
push eax  +
call ds:SafeArrayAccessData  +
mov edi eax +
cmp edi ebx +
jnz loc_100B5E3  +
mov eax [esi+8] +
mov ecx [eax+10h] +
mov eax [ebp+ppvData] +
cmp ecx ebx +
jz loc_100B55A  +
mov [eax] bl +
inc eax  +
dec ecx  +
jnz loc_100B554  +
push dword ptr [esi+8]  +
call ds:SafeArrayUnaccessData  +
mov edi eax +
cmp edi ebx +
jnz loc_100B5E3  +
jmp loc_100B5DC  +
mov eax [esi+8] +
cmp eax ebx +
jz loc_100B5E3  +
lea ecx [ebp+var_4] +
push ecx  +
push eax  +
call ds:SafeArrayAccessData  +
mov edi eax +
cmp edi ebx +
jnz loc_100B5E3  +
mov eax [esi+8] +
xor edi edi +
cmp [eax+10h] ebx +
jbe loc_100B55A  +
mov eax [ebp+var_4] +
push dword ptr [eax+edi*4]  +
call ds:SysStringByteLen  +
mov ecx [ebp+var_4] +
mov ecx [ecx+edi*4] +
cmp eax ebx +
jz loc_100B5A9  +
mov [ecx] bl +
inc ecx  +
dec eax  +
jnz loc_100B5A3  +
mov eax [esi+8] +
inc edi  +
cmp edi [eax+10h] +
jb loc_100B58D  +
jmp loc_100B55A  +
xor eax eax +
mov [esi+8] ax +
jmp loc_100B5DC  +
mov eax [esi+8] +
cmp eax ebx +
jz loc_100B5E3  +
push eax  +
call ds:SysStringByteLen  +
mov ecx [esi+8] +
cmp eax ebx +
jz loc_100B5DC  +
mov [ecx] bl +
inc ecx  +
dec eax  +
jnz loc_100B5D1  +
jmp loc_100B5DC  +
mov [esi+8] ebx +
push esi  +
call ds:VariantClear  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push edi  +
xor eax eax +
mov word ptr [ebp+pvarg.anonymous_0] ax +
lea edi [ebp+pvarg.anonymous_0+2] +
stos   +
stos   +
stos   +
stos   +
lea eax [ebp+pvarg] +
push eax  +
mov esi ecx +
call ds:VariantInit  +
xor edi edi +
cmp [ebp+arg_0] edi +
jz loc_100B64B  +
cmp [ebp+pvargDest] edi +
jz loc_100B64B  +
mov eax [esi+4] +
mov ecx [eax] +
push edi  +
push edi  +
lea edx [ebp+pvarg] +
push edx  +
push edi  +
push [ebp+arg_0]  +
push eax  +
call dword ptr [ecx+10h]  +
mov esi eax +
cmp esi edi +
jnz loc_100B650  +
lea eax [ebp+pvarg] +
push eax  +
push [ebp+pvargDest]  +
call ds:VariantCopy  +
mov esi eax +
jmp loc_100B650  +
mov esi 80070057h +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push edi  +
xor eax eax +
mov word ptr [ebp+pvargDest.anonymous_0] ax +
lea edi [ebp+pvargDest.anonymous_0+2] +
stos   +
stos   +
stos   +
stos   +
lea eax [ebp+pvargDest] +
push eax  +
mov esi ecx +
call ds:VariantInit  +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100B6CB  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_100B6CB  +
mov [esi+4] eax +
lea eax [ebp+pvargDest] +
push eax  +
mov [esi] ecx +
push offset a__path  +
mov ecx esi +
call sub_100B5F1  +
mov edi eax +
test edi edi +
jnz loc_100B6D0  +
push dword ptr [ebp+pvargDest.anonymous_0+8]  +
call ds:SysAllocString  +
mov [esi+8] eax +
test eax eax +
jnz loc_100B6D7  +
mov edi 8007000Eh +
jmp loc_100B6D0  +
mov edi 80070057h +
and dword ptr [esi] 0 +
and dword ptr [esi+4] 0 +
lea eax [ebp+pvargDest] +
push eax  +
call ds:VariantClear  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push dword ptr [ecx+8]  +
mov ecx [ecx] +
push [ebp+arg_0]  +
call sub_100B128  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx] +
pop ebp  +
jmp sub_100B0A1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
test ecx ecx +
jz loc_100B750  +
cmp [ebp+arg_4] eax +
jz loc_100B750  +
mov edx [ebp+arg_8] +
test edx edx +
jz loc_100B750  +
cmp [edx] ax +
jz loc_100B755  +
mov eax [ecx] +
push 0  +
push edx  +
push 0  +
push [ebp+arg_4]  +
push ecx  +
call dword ptr [eax+14h]  +
jmp loc_100B755  +
mov eax 80070057h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
xor eax eax +
push esi  +
push edi  +
mov word ptr [ebp+pvarg.anonymous_0] ax +
lea edi [ebp+pvarg.anonymous_0+2] +
stos   +
stos   +
stos   +
stos   +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantInit  +
mov eax [ebp+arg_0] +
xor edi edi +
cmp eax edi +
jz loc_100B7BA  +
cmp [ebp+arg_4] edi +
jz loc_100B7BA  +
cmp [ebp+pvargDest] edi +
jz loc_100B7BA  +
mov ecx [eax] +
push edi  +
push edi  +
lea edx [ebp+pvarg] +
push edx  +
push edi  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+10h]  +
mov esi eax +
cmp esi edi +
jnz loc_100B7BF  +
lea eax [ebp+pvarg] +
push eax  +
push [ebp+pvargDest]  +
call ds:VariantCopy  +
mov esi eax +
jmp loc_100B7BF  +
mov esi 80070057h +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push edi  +
xor eax eax +
mov word ptr [ebp+pvargDest.anonymous_0] ax +
lea edi [ebp+pvargDest.anonymous_0+2] +
stos   +
stos   +
stos   +
stos   +
lea eax [ebp+pvargDest] +
push eax  +
mov esi ecx +
call ds:VariantInit  +
cmp [ebp+arg_0] 0 +
jnz loc_100B807  +
mov esi 80070057h +
jmp loc_100B823  +
lea eax [ebp+pvargDest] +
push eax  +
push offset aReturnvalue  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_100B75E  +
mov esi eax +
test esi esi +
jnz loc_100B823  +
mov esi dword ptr [ebp+pvargDest.anonymous_0+8] +
lea eax [ebp+pvargDest] +
push eax  +
call ds:VariantClear  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
push eax  +
push eax  +
push 3  +
push 6  +
push 0FFFFFFFFh  +
push eax  +
push 0FFFFFFFFh  +
push [ebp+pProxy]  +
call ds:CoSetProxyBlanket  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
push esi  +
mov esi ecx +
jnz loc_100B876  +
and dword ptr [esi] 0 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push dword ptr [ebp+8]  +
call ds:SysAllocString  +
mov [esi] eax +
test eax eax +
jnz loc_100B86F  +
push 8007000Eh  +
call loc_100AF74  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+lpString]  +
mov esi ecx +
call ds:lstrlenW  +
push eax  +
push [ebp+lpString]  +
mov ecx esi +
call sub_100B003  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
xor eax eax +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
mov [ebp+var_8] eax +
mov [ebp+var_10] eax +
mov [ebp+var_C] eax +
mov [ebp+var_4] eax +
cmp [ebp+arg_0] eax +
jz loc_100B98E  +
cmp [ebp+arg_4] eax +
jz loc_100B98E  +
lea eax [ebp+var_10] +
push eax  +
mov edi 104h +
push edi  +
push [ebp+arg_0]  +
call sub_1003C74  +
mov ebx eax +
test ebx ebx +
jnz loc_100B9C2  +
push dword ptr [esi+14h]  +
call ds:SysStringLen  +
mov ecx [ebp+var_10] +
lea ebx [ecx+eax+1] +
cmp ebx edi +
ja loc_100B98E  +
xor ecx ecx +
push 2  +
pop edx  +
mov eax ebx +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??_U@YAPAXI@Z  +
xor edi edi +
pop ecx  +
mov [ebp+var_8] eax +
cmp eax edi +
jz loc_100B963  +
push [ebp+arg_0]  +
push dword ptr [esi+14h]  +
push offset aSS_0  +
push ebx  +
push eax  +
call sub_1003AC7  +
mov ebx eax +
add esp 14h +
cmp ebx edi +
jnz loc_100B993  +
push [ebp+var_8]  +
call ds:SysAllocString  +
mov [ebp+var_C] eax +
cmp eax edi +
jnz loc_100B96A  +
mov ebx 8007000Eh +
jmp loc_100B993  +
mov esi [esi+0Ch] +
mov ecx [esi] +
push edi  +
lea edx [ebp+var_4] +
push edx  +
push edi  +
push edi  +
push eax  +
push esi  +
call dword ptr [ecx+18h]  +
mov ebx eax +
cmp ebx edi +
jnz loc_100B993  +
mov eax [ebp+var_4] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
mov [ebp+var_4] edi +
jmp loc_100B9A4  +
mov ebx 80070057h +
mov eax [ebp+var_4] +
test eax eax +
jz loc_100B9A4  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and [ebp+var_4] 0 +
cmp [ebp+var_C] 0 +
jz loc_100B9B3  +
push [ebp+var_C]  +
call ds:SysFreeString  +
cmp [ebp+var_8] 0 +
jz loc_100B9C2  +
push [ebp+var_8]  +
call ??_V@YAXPAX@Z  +
pop ecx  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 218h +
mov eax dword_1010004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
xor ebx ebx +
push edi  +
mov [ebp+var_218] ebx +
cmp ecx ebx +
jz loc_100BB03  +
cmp eax ebx +
jz loc_100BB03  +
mov edx [ebp+arg_8] +
cmp edx ebx +
jz loc_100BA18  +
cmp [edx] bx +
jz loc_100BA18  +
mov [esi] edx +
jmp loc_100BA1E  +
mov dword ptr [esi] offset a_ +
push eax  +
mov [esi+4] ecx +
call ds:SysAllocString  +
mov [esi+14h] eax +
cmp eax ebx +
jnz loc_100BA3E  +
mov [ebp+var_214] 8007000Eh +
jmp loc_100BB21  +
lea edi [esi+8] +
push edi  +
push offset stru_100234C  +
push 1  +
push ebx  +
push offset stru_100241C  +
call ds:CoCreateInstance  +
mov [ebp+var_214] eax +
cmp eax ebx +
jnz loc_100BB21  +
push dword ptr [esi+4]  +
lea eax [ebp+var_210] +
push dword ptr [esi]  +
push offset aSS_1  +
push 105h  +
push eax  +
call sub_1003AC7  +
add esp 14h +
mov [ebp+var_214] eax +
cmp eax ebx +
jnz loc_100BB21  +
lea eax [ebp+var_210] +
push eax  +
call ds:SysAllocString  +
mov [ebp+var_218] eax +
cmp eax ebx +
jnz loc_100BAB2  +
mov [ebp+var_214] 8007000Eh +
jmp loc_100BB0D  +
mov eax [edi] +
mov ecx [eax] +
lea edi [esi+0Ch] +
push edi  +
push ebx  +
push ebx  +
push 80h  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+var_218]  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov [ebp+var_214] eax +
cmp eax ebx +
jnz loc_100BB0D  +
push dword ptr [edi]  +
call sub_100B83A  +
mov [ebp+var_214] eax +
cmp eax ebx +
jnz loc_100BB0D  +
mov edi [edi] +
mov eax [edi] +
push ebx  +
lea ecx [esi+10h] +
push ecx  +
push ebx  +
push ebx  +
push dword ptr [esi+14h]  +
push edi  +
call dword ptr [eax+18h]  +
mov [ebp+var_214] eax +
jmp loc_100BB0D  +
mov [ebp+var_214] 80070057h +
cmp [ebp+var_218] ebx +
jz loc_100BB21  +
push [ebp+var_218]  +
call ds:SysFreeString  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_214] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1009DC4  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
xor ebx ebx +
push esi  +
xor esi esi +
push edi  +
mov edi ds:GetProcessHeap +
mov [ebp+var_4] ebx +
mov [ebp+dwBytes] ebx +
cmp [ebp+arg_0] ebx +
jz loc_100BBD5  +
mov eax [ebp+arg_4] +
cmp eax ebx +
jz loc_100BBD5  +
mov [eax] ebx +
lea eax [ebp+var_4] +
push eax  +
push 1  +
push [ebp+arg_0]  +
call ds:SysStringLen  +
push eax  +
call sub_100AF28  +
test eax eax +
jl loc_100BBCC  +
lea eax [ebp+dwBytes] +
push eax  +
mov eax [ebp+var_4] +
push 2  +
pop ecx  +
mul  ecx +
push edx  +
push eax  +
call sub_1003362  +
test eax eax +
jl loc_100BBCC  +
push [ebp+dwBytes]  +
push 8  +
call edi  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
cmp esi ebx +
jnz loc_100BBB2  +
mov [ebp+arg_0] 8007000Eh +
jmp loc_100BBDC  +
push [ebp+arg_0]  +
push [ebp+var_4]  +
push esi  +
call sub_10039E4  +
mov [ebp+arg_0] eax +
cmp eax ebx +
jnz loc_100BBDC  +
mov eax [ebp+arg_4] +
mov [eax] esi +
jmp loc_100BC07  +
mov [ebp+arg_0] 80004005h +
jmp loc_100BC07  +
mov [ebp+arg_0] 80070057h +
cmp esi ebx +
jz loc_100BC07  +
push esi  +
push ebx  +
call edi  +
push eax  +
call ds:HeapSize  +
cmp eax 0FFFFFFFFh +
jz loc_100BC07  +
mov ecx esi +
cmp eax ebx +
jz loc_100BBFC  +
mov [ecx] bl +
inc ecx  +
dec eax  +
jnz loc_100BBF6  +
push esi  +
push ebx  +
call edi  +
push eax  +
call ds:HeapFree  +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
xor ebx ebx +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
mov [ebp+var_8] ebx +
mov [ebp+ppvData] ebx +
mov [ebp+dwBytes] ebx +
mov [ebp+var_4] ebx +
cmp esi ebx +
jz loc_100BD83  +
mov ecx [ebp+arg_4] +
cmp ecx ebx +
jz loc_100BD83  +
mov eax [ebp+arg_8] +
cmp eax ebx +
jz loc_100BD83  +
movzx edx word ptr [esi] +
cmp dx 1 +
jnz loc_100BC64  +
mov [ecx] ebx +
mov [eax] ebx +
jmp loc_100BD15  +
mov eax 2008h +
cmp dx ax +
jz loc_100BC7A  +
mov [ebp+var_8] 80070057h +
jmp loc_100BD15  +
lea eax [ebp+ppvData] +
push eax  +
push dword ptr [esi+8]  +
call ds:SafeArrayAccessData  +
mov [ebp+var_8] eax +
cmp eax ebx +
jnz loc_100BD07  +
mov eax [esi+8] +
mov eax [eax+10h] +
lea ecx [ebp+dwBytes] +
push ecx  +
push 4  +
pop ecx  +
mov [ebp+var_4] eax +
mul  ecx +
push edx  +
push eax  +
call sub_1003362  +
mov [ebp+var_8] eax +
cmp eax ebx +
jnz loc_100BD07  +
push [ebp+dwBytes]  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov edi eax +
cmp edi ebx +
jnz loc_100BCCF  +
mov [ebp+var_8] 8007000Eh +
jmp loc_100BD07  +
xor esi esi +
cmp [ebp+var_4] ebx +
jbe loc_100BCF2  +
lea eax [edi+esi*4] +
push eax  +
mov eax [ebp+ppvData] +
push dword ptr [eax+esi*4]  +
call sub_100BB3D  +
mov [ebp+var_8] eax +
cmp eax ebx +
jnz loc_100BD04  +
inc esi  +
cmp esi [ebp+var_4] +
jb loc_100BCD6  +
mov eax [ebp+arg_4] +
mov ecx [ebp+var_4] +
mov [eax] edi +
mov eax [ebp+arg_8] +
xor edi edi +
mov [eax] ecx +
mov [ebp+var_4] ebx +
mov esi [ebp+arg_0] +
cmp [ebp+ppvData] ebx +
jz loc_100BD15  +
push dword ptr [esi+8]  +
call ds:SafeArrayUnaccessData  +
xor ecx ecx +
mov [ebp+arg_0] ecx +
cmp [ebp+var_4] ebx +
jbe loc_100BD66  +
lea esi [edi+ecx*4] +
mov eax [esi] +
cmp eax ebx +
jz loc_100BD5D  +
push eax  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapSize  +
cmp eax 0FFFFFFFFh +
jz loc_100BD58  +
mov ecx [esi] +
cmp eax ebx +
jz loc_100BD48  +
mov [ecx] bl +
inc ecx  +
dec eax  +
jnz loc_100BD42  +
push dword ptr [esi]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov ecx [ebp+arg_0] +
mov [esi] ebx +
inc ecx  +
mov [ebp+arg_0] ecx +
cmp ecx [ebp+var_4] +
jb loc_100BD1F  +
cmp edi ebx +
jz loc_100BD79  +
push edi  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
mov [ebp+var_8] 80070057h +
jmp loc_100BD07  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
xor edi edi +
xor esi esi +
cmp [ebp+arg_4] edi +
jz loc_100BDFA  +
cmp [ebp+arg_8] edi +
jz loc_100BDFA  +
cmp [ebp+arg_C] edi +
jz loc_100BDFA  +
push 18h  +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax edi +
jz loc_100BDD0  +
mov [eax] edi +
mov [eax+4] edi +
mov [eax+8] edi +
mov [eax+0Ch] edi +
mov [eax+10h] edi +
mov [eax+14h] edi +
mov esi eax +
jmp loc_100BDD2  +
xor esi esi +
cmp esi edi +
jnz loc_100BDDD  +
mov ebx 8007000Eh +
jmp loc_100BE0C  +
push [ebp+arg_0]  +
mov ecx esi +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_100B9D0  +
mov ebx eax +
cmp ebx edi +
jnz loc_100BDFF  +
mov eax [ebp+arg_C] +
mov [eax] esi +
jmp loc_100BE0C  +
mov ebx 80070057h +
cmp esi edi +
jz loc_100BE0C  +
push 1  +
mov ecx esi +
call sub_1003310  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
push offset a@  +
call sub_100B8BB  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
test ecx ecx +
jnz loc_100BE4D  +
mov eax 80070057h +
jmp loc_100BEEA  +
mov edx [ecx+4] +
sub edx eax +
push esi  +
jz loc_100BEC1  +
dec edx  +
jz loc_100BEA4  +
dec edx  +
jz loc_100BE87  +
dec edx  +
jz loc_100BE74  +
dec edx  +
jnz loc_100BED6  +
lea eax [ecx+0Ch] +
push eax  +
lea eax [ecx+8] +
push eax  +
add ecx 10h +
push ecx  +
call sub_100BC16  +
jmp loc_100BEE9  +
lea eax [ecx+0Ch] +
push eax  +
lea eax [ecx+8] +
push eax  +
add ecx 10h +
push ecx  +
call sub_100B2D1  +
jmp loc_100BEE9  +
movzx esi word ptr [ecx+10h] +
xor edx edx +
inc edx  +
cmp si dx +
jnz loc_100BE98  +
mov [ecx+0Ch] edx +
jmp loc_100BEE9  +
cmp si 0Bh +
jnz loc_100BED6  +
movsx edx word ptr [ecx+18h] +
jmp loc_100BEB9  +
movzx esi word ptr [ecx+10h] +
xor edx edx +
inc edx  +
cmp si dx +
jz loc_100BE93  +
cmp si 3 +
jnz loc_100BED6  +
mov edx [ecx+18h] +
and [ecx+0Ch] eax +
mov [ecx+8] edx +
jmp loc_100BEE9  +
movzx edx word ptr [ecx+10h] +
cmp dx 1 +
jnz loc_100BED0  +
and [ecx+8] eax +
jmp loc_100BEE9  +
cmp dx 8 +
jz loc_100BEDD  +
mov eax 80070057h +
jmp loc_100BEE9  +
lea eax [ecx+8] +
push eax  +
push dword ptr [ecx+18h]  +
call sub_100BB3D  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor edi edi +
mov ebx ecx +
mov [ebp+var_4] edi +
mov [ebp+var_8] edi +
cmp [ebp+arg_4] edi +
jbe loc_100BF11  +
cmp [ebp+arg_0] edi +
jz loc_100BF20  +
cmp [ebp+arg_C] edi +
jbe loc_100BF1B  +
cmp [ebp+arg_8] edi +
jz loc_100BF20  +
cmp [ebp+arg_10] edi +
jnz loc_100BF2A  +
mov esi 80070057h +
jmp loc_100C03E  +
mov esi ds:VariantInit +
cmp [ebp+arg_4] edi +
jbe loc_100BF49  +
mov eax [ebp+arg_0] +
mov eax [eax+edi*4] +
add eax 10h +
push eax  +
call esi  +
inc edi  +
cmp edi [ebp+arg_4] +
jb loc_100BF35  +
xor edi edi +
cmp [ebp+arg_C] edi +
jbe loc_100BF62  +
mov eax [ebp+arg_8] +
mov eax [eax+edi*4] +
add eax 10h +
push eax  +
call esi  +
inc edi  +
cmp edi [ebp+arg_C] +
jb loc_100BF4E  +
xor edi edi +
cmp [ebp+arg_4] edi +
jbe loc_100BFBD  +
mov ecx [ebx] +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_10]  +
call sub_100B0A1  +
mov esi eax +
xor edi edi +
cmp esi edi +
jnz loc_100C01E  +
cmp [ebp+arg_4] edi +
jbe loc_100BFBD  +
mov eax [ebp+arg_0] +
push dword ptr [eax+edi*4]  +
call sub_100B1B3  +
mov esi eax +
test esi esi +
jnz loc_100C01E  +
mov eax [ebp+arg_0] +
mov eax [eax+edi*4] +
lea ecx [eax+10h] +
push ecx  +
push dword ptr [eax]  +
mov ecx ebx +
push [ebp+var_4]  +
call sub_100B721  +
mov esi eax +
test esi esi +
jnz loc_100C01E  +
inc edi  +
cmp edi [ebp+arg_4] +
jb loc_100BF86  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+var_4]  +
mov ecx ebx +
push [ebp+arg_10]  +
call sub_100B6EE  +
mov esi eax +
test esi esi +
jnz loc_100C01E  +
push [ebp+var_8]  +
mov ecx ebx +
call sub_100B7D6  +
mov esi eax +
test esi esi +
jnz loc_100C01E  +
xor edi edi +
cmp [ebp+arg_C] edi +
jbe loc_100C01E  +
mov eax [ebp+arg_8] +
mov eax [eax+edi*4] +
lea ecx [eax+10h] +
push ecx  +
push dword ptr [eax]  +
mov ecx ebx +
push [ebp+var_8]  +
call sub_100B75E  +
mov esi eax +
test esi esi +
jnz loc_100C01E  +
mov eax [ebp+arg_8] +
push dword ptr [eax+edi*4]  +
call sub_100BE35  +
mov esi eax +
test esi esi +
jnz loc_100C01E  +
inc edi  +
cmp edi [ebp+arg_C] +
jb loc_100BFEB  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_100C02F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and [ebp+var_4] 0 +
mov eax [ebp+var_8] +
test eax eax +
jz loc_100C03C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor edi edi +
cmp [ebp+arg_0] edi +
jz loc_100C05F  +
cmp [ebp+arg_4] edi +
jbe loc_100C05F  +
mov eax [ebp+arg_0] +
mov eax [eax+edi*4] +
add eax 10h +
push eax  +
call sub_100B4CC  +
inc edi  +
cmp edi [ebp+arg_4] +
jb loc_100C048  +
xor edi edi +
cmp [ebp+arg_8] edi +
jz loc_100C08B  +
cmp [ebp+arg_C] edi +
jbe loc_100C08B  +
mov eax [ebp+arg_8] +
lea ebx [eax+edi*4] +
mov eax [ebx] +
add eax 10h +
push eax  +
call sub_100B4CC  +
test esi esi +
jz loc_100C085  +
push dword ptr [ebx]  +
call sub_100B395  +
inc edi  +
cmp edi [ebp+arg_C] +
jb loc_100C069  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 80h +
push ebx  +
push esi  +
xor esi esi +
push edi  +
mov edi ds:VariantInit +
lea eax [ebp+pvarg] +
push eax  +
mov [ebp+var_8] esi +
mov [ebp+ppv] esi +
mov [ebp+pProxy] esi +
mov [ebp+var_24] esi +
mov [ebp+var_20] esi +
mov [ebp+var_18] esi +
mov [ebp+var_1C] esi +
mov [ebp+var_14] esi +
mov [ebp+var_C] esi +
call edi  +
lea eax [ebp+var_60] +
push eax  +
call edi  +
lea eax [ebp+var_50] +
push eax  +
call edi  +
or [ebp+hObject] 0FFFFFFFFh +
lea eax [ebp+hObject] +
push eax  +
push 28h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:OpenProcessToken  +
mov ebx ds:SysFreeString +
test eax eax +
jz loc_100C111  +
lea eax [ebp+NewState.Privileges] +
push eax  +
push offset Name  +
push esi  +
call ds:LookupPrivilegeValueW  +
test eax eax +
jnz loc_100C12C  +
call ds:GetLastError  +
cmp eax esi +
jle loc_100C125  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
jmp loc_100C3D2  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+NewState] +
push eax  +
push esi  +
push [ebp+hObject]  +
mov [ebp+NewState.PrivilegeCount] 1 +
mov [ebp+NewState.Privileges.Attributes] 2 +
call ds:AdjustTokenPrivileges  +
test eax eax +
jz loc_100C111  +
push offset String  +
lea ecx [ebp+var_8] +
call sub_100B895  +
mov edi eax +
cmp edi esi +
jnz loc_100C3D2  +
cmp [ebp+arg_0] esi +
jz loc_100C186  +
mov eax [ebp+arg_0] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx si +
jnz loc_100C171  +
sub eax edx +
sar eax 1 +
jz loc_100C186  +
push [ebp+arg_0]  +
jmp loc_100C18B  +
push offset a_  +
lea ecx [ebp+var_8] +
call sub_100B895  +
mov edi eax +
cmp edi esi +
jnz loc_100C3D2  +
push offset aRootCimv2  +
lea ecx [ebp+var_8] +
call sub_100B895  +
mov edi eax +
cmp edi esi +
jnz loc_100C3D2  +
lea eax [ebp+ppv] +
push eax  +
push offset stru_100234C  +
push 1  +
push esi  +
push offset stru_100241C  +
call ds:CoCreateInstance  +
mov edi eax +
cmp edi esi +
jnz loc_100C3D2  +
mov eax [ebp+ppv] +
mov ecx [eax] +
lea edx [ebp+pProxy] +
push edx  +
push esi  +
push esi  +
push 80h  +
push esi  +
push esi  +
push esi  +
push [ebp+var_8]  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov edi eax +
cmp edi esi +
jnz loc_100C3D2  +
push esi  +
push esi  +
push 3  +
push 3  +
push 0FFFFFFFFh  +
push esi  +
push 0FFFFFFFFh  +
push [ebp+pProxy]  +
call ds:CoSetProxyBlanket  +
mov edi eax +
cmp edi esi +
jnz loc_100C3D2  +
mov edi [ebp+pProxy] +
push offset aWin32_operatin  +
lea ecx [ebp+arg_0] +
call loc_100B85E  +
mov eax [eax] +
mov ecx [edi] +
lea edx [ebp+var_C] +
push edx  +
push esi  +
push 1  +
push eax  +
push edi  +
call dword ptr [ecx+48h]  +
push [ebp+arg_0]  +
mov edi eax +
call ebx  +
cmp edi esi +
jnz loc_100C3D2  +
mov eax [ebp+var_C] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
mov edi eax +
jmp loc_100C3AA  +
mov edi [ebp+var_14] +
push offset a__path  +
lea ecx [ebp+arg_0] +
call loc_100B85E  +
mov eax [eax] +
mov ecx [edi] +
push esi  +
push esi  +
lea edx [ebp+pvarg] +
push edx  +
push esi  +
push eax  +
push edi  +
call dword ptr [ecx+10h]  +
push [ebp+arg_0]  +
mov edi eax +
call ebx  +
cmp edi esi +
jnz loc_100C3D2  +
mov edi [ebp+pProxy] +
push offset aWin32_operatin  +
lea ecx [ebp+var_2C] +
call loc_100B85E  +
mov eax [eax] +
mov ecx [edi] +
push esi  +
lea edx [ebp+var_24] +
push edx  +
push esi  +
push esi  +
push eax  +
push edi  +
call dword ptr [ecx+18h]  +
push [ebp+var_2C]  +
mov edi eax +
call ebx  +
cmp edi esi +
jnz loc_100C3D2  +
mov edi [ebp+var_24] +
push offset aWin32shutdown  +
lea ecx [ebp+var_30] +
call loc_100B85E  +
mov eax [eax] +
mov ecx [edi] +
push esi  +
lea edx [ebp+var_20] +
push edx  +
push esi  +
push eax  +
push edi  +
call dword ptr [ecx+4Ch]  +
push [ebp+var_30]  +
mov edi eax +
call ebx  +
cmp edi esi +
jnz loc_100C3D2  +
mov eax [ebp+var_20] +
mov ecx [eax] +
lea edx [ebp+var_18] +
push edx  +
push esi  +
push eax  +
call dword ptr [ecx+3Ch]  +
mov edi eax +
cmp edi esi +
jnz loc_100C3D2  +
mov edi [ebp+var_18] +
push 3  +
pop eax  +
mov word ptr [ebp+var_60] ax +
xor eax eax +
cmp [ebp+arg_4] esi +
push offset aFlags  +
setnz al  +
lea ecx [ebp+var_34] +
inc eax  +
or eax 4 +
mov [ebp+var_58] eax +
call loc_100B85E  +
mov eax [eax] +
mov ecx [edi] +
push esi  +
lea edx [ebp+var_60] +
push edx  +
push esi  +
push eax  +
push edi  +
call dword ptr [ecx+14h]  +
push [ebp+var_34]  +
mov edi eax +
call ebx  +
cmp edi esi +
jnz loc_100C3D2  +
mov eax [ebp+var_18] +
mov edi [ebp+pProxy] +
push offset aWin32shutdown  +
lea ecx [ebp+var_3C] +
mov [ebp+var_38] eax +
call loc_100B85E  +
mov eax [eax] +
mov ecx [edi] +
push esi  +
lea edx [ebp+var_1C] +
push edx  +
push [ebp+var_38]  +
push esi  +
push esi  +
push eax  +
push dword ptr [ebp+pvarg.anonymous_0+8]  +
push edi  +
call dword ptr [ecx+60h]  +
push [ebp+var_3C]  +
mov edi eax +
call ebx  +
cmp edi esi +
jnz loc_100C3D2  +
mov eax [ebp+var_1C] +
mov ecx [eax] +
push esi  +
push esi  +
lea edx [ebp+var_50] +
push edx  +
push esi  +
push offset aReturnvalue  +
push eax  +
call dword ptr [ecx+10h]  +
mov edi eax +
cmp edi esi +
jnz loc_100C3D2  +
cmp word ptr [ebp+var_50] 3 +
jnz loc_100C3CD  +
mov edi [ebp+var_48] +
cmp edi esi +
jle loc_100C3AC  +
and edi 0FFFFh +
or edi 80070000h +
cmp edi esi +
jnz loc_100C3D2  +
mov eax [ebp+var_C] +
mov ecx [eax] +
lea edx [ebp+var_40] +
push edx  +
lea edx [ebp+var_14] +
push edx  +
push 1  +
push 0FFFFFFFFh  +
push eax  +
call dword ptr [ecx+10h]  +
test eax eax +
jz loc_100C256  +
jmp loc_100C3D2  +
mov edi 80004005h +
cmp [ebp+hObject] 0FFFFFFFFh +
jz loc_100C3E1  +
push [ebp+hObject]  +
call ds:CloseHandle  +
lea eax [ebp+var_50] +
push eax  +
call ds:VariantClear  +
lea eax [ebp+var_60] +
push eax  +
call ds:VariantClear  +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
mov eax [ebp+var_C] +
cmp eax esi +
jz loc_100C40C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_14] +
cmp eax esi +
jz loc_100C419  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_1C] +
cmp eax esi +
jz loc_100C426  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_18] +
cmp eax esi +
jz loc_100C433  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_20] +
cmp eax esi +
jz loc_100C440  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_24] +
cmp eax esi +
jz loc_100C44D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+pProxy] +
cmp eax esi +
jz loc_100C45A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+ppv] +
cmp eax esi +
jz loc_100C467  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push [ebp+var_8]  +
call ebx  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
and [ebp+var_20] 0 +
push edi  +
mov edx ecx +
push 7  +
xor eax eax +
pop ecx  +
lea edi [ebp+var_1C] +
stos   +
mov edi [ebp+arg_4] +
test edi edi +
jnz loc_100C4A1  +
mov eax 80070057h +
jmp loc_100C4D5  +
mov eax [ebp+arg_0] +
push eax  +
push 1  +
mov [ebp+var_20] eax +
lea eax [ebp+arg_4] +
push eax  +
lea ecx [ebp+var_20] +
push 0  +
mov [ebp+arg_4] ecx +
push 0  +
mov ecx edx +
mov [ebp+var_1C] 2 +
call sub_100BEF3  +
test eax eax +
jnz loc_100C4D5  +
mov ecx [ebp+var_18] +
mov [edi] ecx +
mov ecx [ebp+var_14] +
mov [edi+4] ecx +
pop edi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
lea eax [ebp+ppv] +
push eax  +
push offset stru_10024DC  +
xor edi edi +
push 1  +
push edi  +
push offset stru_1003030  +
mov [ebp+ppv] edi +
mov [ebx] edi +
call ds:CoCreateInstance  +
mov esi eax +
cmp esi edi +
jnz loc_100C563  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push edi  +
push eax  +
call dword ptr [ecx+0FCh]  +
mov esi eax +
cmp esi edi +
jnz loc_100C563  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push edi  +
push eax  +
call dword ptr [ecx+110h]  +
mov esi eax +
cmp esi edi +
jnz loc_100C563  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push edi  +
push eax  +
call dword ptr [ecx+118h]  +
mov esi eax +
cmp esi edi +
jnz loc_100C563  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push 0FFFFFFFFh  +
push eax  +
call dword ptr [ecx+120h]  +
mov esi eax +
cmp esi edi +
jnz loc_100C563  +
mov eax [ebp+ppv] +
mov [ebx] eax +
jmp loc_100C566  +
mov eax [ebp+ppv] +
cmp esi edi +
jge loc_100C574  +
cmp eax edi +
jz loc_100C574  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
and [ebp+var_4] 0 +
push esi  +
lea edx [ebp+var_4] +
push edx  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+0C4h]  +
mov esi eax +
test esi esi +
jnz loc_100C5B5  +
mov eax [ebp+arg_8] +
mov ecx [eax] +
push esi  +
push [ebp+var_4]  +
push eax  +
call dword ptr [ecx+54h]  +
mov esi eax +
mov eax [ebp+var_4] +
test eax eax +
jz loc_100C5C2  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
shr ecx 1 +
push 0  +
pop eax  +
jz loc_100C5E5  +
cmp ecx 7FFFFFFFh +
jbe loc_100C5EA  +
mov eax 80070057h +
test eax eax +
jl loc_100C626  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call _vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_100C616  +
cmp eax esi +
ja loc_100C616  +
jnz loc_100C621  +
jmp loc_100C61B  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 54h +
push ebx  +
push esi  +
mov esi ds:VariantInit +
xor ebx ebx +
push edi  +
xor edi edi +
lea eax [ebp+pvarg] +
inc edi  +
push eax  +
mov [ebp+var_10] ebx +
mov [ebp+var_18] ebx +
mov [ebp+var_14] ebx +
mov [ebp+var_C] ebx +
mov [ebp+var_8] ebx +
mov [ebp+var_20] ebx +
mov [ebp+var_1C] ebx +
mov [ebp+var_28] edi +
mov [ebp+var_24] 80004005h +
mov [ebp+var_30] ebx +
mov [ebp+var_2C] ebx +
call esi  +
lea eax [ebp+var_44] +
push eax  +
call esi  +
push 2  +
push ebx  +
call ds:CoInitializeEx  +
cmp eax ebx +
mov [ebp+var_4] eax +
jl loc_100C8AB  +
mov [ebp+var_30] edi +
cmp [ebp+arg_0] ebx +
jnz loc_100C69C  +
mov [ebp+var_4] 80070057h +
jmp loc_100C8AB  +
cmp [ebp+arg_4] ebx +
jz loc_100C690  +
mov edi [ebp+arg_8] +
cmp edi ebx +
jz loc_100C690  +
lea eax [ebp+var_1C] +
push eax  +
push 104h  +
push [ebp+arg_0]  +
call sub_1003C74  +
cmp eax ebx +
mov [ebp+var_4] eax +
jl loc_100C8AB  +
cmp [ebp+var_1C] ebx +
jz loc_100C690  +
mov eax [ebp+arg_4] +
mov [eax] ebx +
lea eax [ebp+var_10] +
push eax  +
mov [edi] ebx +
call sub_100C4DF  +
cmp eax ebx +
mov [ebp+var_4] eax +
jl loc_100C8AB  +
push [ebp+arg_0]  +
call ds:SysAllocString  +
mov edi eax +
mov [ebp+var_8] edi +
cmp edi ebx +
jnz loc_100C702  +
mov [ebp+var_4] 8007000Eh +
jmp loc_100C8AB  +
lea eax [ebp+pvarg] +
push eax  +
call esi  +
push 8  +
pop eax  +
mov dword ptr [ebp+pvarg.anonymous_0+8] edi +
lea edx [ebp+var_20] +
push edx  +
mov word ptr [ebp+pvarg.anonymous_0] ax +
mov eax [ebp+var_10] +
mov ecx [eax] +
sub esp 10h +
mov edi esp +
lea esi [ebp+pvarg] +
movs   +
movs   +
movs   +
push eax  +
mov [ebp+var_8] ebx +
movs   +
call dword ptr [ecx+0E8h]  +
test eax eax +
jnz loc_100C73B  +
cmp word ptr [ebp+var_20] bx +
jnz loc_100C782  +
mov eax [ebp+var_C] +
cmp eax ebx +
jz loc_100C74B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_C] ebx +
mov eax [ebp+var_10] +
mov ecx [eax] +
lea edx [ebp+var_C] +
push edx  +
push eax  +
call dword ptr [ecx+0F0h]  +
mov [ebp+var_4] eax +
cmp eax ebx +
jnz loc_100C8AB  +
mov eax [ebp+var_C] +
cmp eax ebx +
jz loc_100C782  +
mov ecx [eax] +
lea edx [ebp+var_24] +
push edx  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov eax [ebp+var_24] +
mov [ebp+var_4] eax +
jmp loc_100C8AB  +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
push offset aOwnerauth_0  +
call ds:SysAllocString  +
mov [ebp+var_8] eax +
cmp eax ebx +
jz loc_100C6F6  +
mov eax [ebp+var_10] +
mov ecx [eax] +
lea edx [ebp+var_18] +
push edx  +
push [ebp+var_8]  +
push eax  +
call dword ptr [ecx+94h]  +
test eax eax +
jnz loc_100C871  +
mov eax [ebp+var_18] +
cmp eax ebx +
jz loc_100C871  +
mov ecx [eax] +
lea edx [ebp+var_14] +
push edx  +
push eax  +
call dword ptr [ecx+34h]  +
mov [ebp+var_4] eax +
cmp eax ebx +
jnz loc_100C8AB  +
mov eax [ebp+var_14] +
mov ecx [eax] +
lea edx [ebp+var_44] +
push edx  +
push eax  +
call dword ptr [ecx+20h]  +
mov [ebp+var_4] eax +
cmp eax ebx +
jnz loc_100C8AB  +
mov eax [ebp+var_14] +
mov ecx [eax] +
lea edx [ebp+var_28] +
push edx  +
push eax  +
call dword ptr [ecx+28h]  +
mov [ebp+var_4] eax +
cmp eax ebx +
jnz loc_100C8AB  +
cmp [ebp+var_28] 3 +
jz loc_100C81F  +
mov [ebp+var_4] 80004005h +
jmp loc_100C8AB  +
push [ebp+bstr]  +
mov [ebp+var_2C] 1 +
call ds:SysStringLen  +
mov esi eax +
inc esi  +
lea eax [esi+esi] +
push eax  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov edi eax +
cmp edi ebx +
jnz loc_100C853  +
mov [ebp+var_4] 8007000Eh +
jmp loc_100C87A  +
push [ebp+bstr]  +
push esi  +
push edi  +
call sub_10039E4  +
cmp eax ebx +
mov [ebp+var_4] eax +
jl loc_100C87A  +
mov eax [ebp+arg_4] +
mov [eax] edi +
mov eax [ebp+arg_8] +
dec esi  +
mov [eax] esi +
jmp loc_100C8AB  +
mov [ebp+var_4] 80004005h +
mov edi ebx +
cmp edi ebx +
jz loc_100C8AB  +
mov esi ds:GetProcessHeap +
push edi  +
push ebx  +
call esi  +
push eax  +
call ds:HeapSize  +
cmp eax 0FFFFFFFFh +
jz loc_100C8AB  +
mov ecx edi +
cmp eax ebx +
jz loc_100C8A0  +
mov [ecx] bl +
inc ecx  +
dec eax  +
jnz loc_100C89A  +
push edi  +
push ebx  +
call esi  +
push eax  +
call ds:HeapFree  +
mov esi ds:VariantClear +
lea eax [ebp+pvarg] +
push eax  +
call esi  +
cmp [ebp+var_2C] ebx +
jz loc_100C8D7  +
cmp [ebp+bstr] ebx +
jz loc_100C8D7  +
push [ebp+bstr]  +
call ds:SysStringByteLen  +
mov ecx [ebp+bstr] +
cmp eax ebx +
jz loc_100C8D7  +
mov [ecx] bl +
inc ecx  +
dec eax  +
jnz loc_100C8D1  +
lea eax [ebp+var_44] +
push eax  +
call esi  +
cmp [ebp+var_8] ebx +
jz loc_100C8EB  +
push [ebp+var_8]  +
call ds:SysFreeString  +
mov eax [ebp+var_10] +
cmp eax ebx +
jz loc_100C8F8  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_18] +
cmp eax ebx +
jz loc_100C908  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_18] ebx +
mov eax [ebp+var_14] +
cmp eax ebx +
jz loc_100C918  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_14] ebx +
mov eax [ebp+var_C] +
cmp eax ebx +
jz loc_100C928  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_C] ebx +
cmp [ebp+var_30] ebx +
jz loc_100C933  +
call ds:CoUninitialize  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0E0h +
mov eax dword_1010004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov edx [ebp+arg_4] +
mov ecx [ebp+arg_0] +
push ebx  +
xor eax eax +
push esi  +
push edi  +
mov [ebp+Time.wYear] ax +
lea edi [ebp+Time.wMonth] +
stos   +
stos   +
xor ebx ebx +
stos   +
mov [ebp+var_CC] ecx +
mov [ebp+var_D0] edx +
mov [ebp+var_BC] ebx +
mov [ebp+var_B8] ebx +
mov [ebp+var_C8] ebx +
stos   +
mov [ecx] ebx +
cmp edx ebx +
jz loc_100C99C  +
mov [edx] ebx +
lea eax [ebp+Time] +
push eax  +
call ds:GetLocalTime  +
mov esi ds:GetDateFormatW +
push ebx  +
push ebx  +
mov edi offset Format +
push edi  +
lea eax [ebp+Time] +
push eax  +
push ebx  +
push 7Fh  +
call esi  +
cmp eax ebx +
mov [ebp+cchTime] eax +
jg loc_100C9EA  +
call ds:GetLastError  +
cmp eax ebx +
jg loc_100C9DE  +
mov edi eax +
jmp loc_100CBEB  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100C9D7  +
add eax eax +
push eax  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov dword ptr [ebp+lpMem] eax +
cmp eax ebx +
jz loc_100CB1F  +
push [ebp+cchTime]  +
push eax  +
push edi  +
lea eax [ebp+Time] +
push eax  +
push ebx  +
push 7Fh  +
call esi  +
cmp eax ebx +
jnz loc_100CA3C  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_100CA35  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
jmp loc_100CB9D  +
cmp eax [ebp+cchTime] +
jnz loc_100CAA7  +
mov esi ds:GetTimeFormatW +
push ebx  +
push ebx  +
mov edi offset aHhMmSs +
push edi  +
lea eax [ebp+Time] +
push eax  +
push ebx  +
push 7Fh  +
call esi  +
cmp eax ebx +
mov [ebp+cchTime] eax +
jle loc_100CA21  +
add eax eax +
push eax  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+var_BC] eax +
cmp eax ebx +
jz loc_100CB1F  +
push [ebp+cchTime]  +
push eax  +
push edi  +
lea eax [ebp+Time] +
push eax  +
push ebx  +
push 7Fh  +
call esi  +
cmp eax ebx +
jz loc_100CA21  +
cmp eax [ebp+cchTime] +
jz loc_100CAB1  +
mov edi 80004005h +
jmp loc_100CB9D  +
lea eax [ebp+TimeZoneInformation] +
push eax  +
call ds:GetTimeZoneInformation  +
cmp eax 0FFFFFFFFh +
jz loc_100CA21  +
mov eax [ebp+TimeZoneInformation.Bias] +
push 3Ch  +
cdq   +
pop ecx  +
idiv  ecx +
cmp eax ebx +
mov [ebp+cchTime] eax +
jle loc_100CAE9  +
mov [ebp+var_C4] 2Dh +
jmp loc_100CAF9  +
neg [ebp+cchTime]  +
mov [ebp+var_C4] 2Bh +
mov edi edx +
cmp edi ebx +
jge loc_100CB01  +
neg edi  +
mov esi 200h +
push esi  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+var_B8] eax +
cmp eax ebx +
jnz loc_100CB26  +
mov edi 8007000Eh +
jmp loc_100CB9D  +
movzx ecx word ptr [ebp+var_C4] +
push edi  +
push [ebp+cchTime]  +
push ecx  +
push [ebp+var_BC]  +
push dword ptr [ebp+lpMem]  +
push offset aStSC02d02d  +
push esi  +
push eax  +
call sub_100C5CE  +
mov edi eax +
add esp 20h +
cmp edi ebx +
jl loc_100CB9D  +
mov esi [ebp+var_D0] +
cmp esi ebx +
jz loc_100CB7D  +
lea eax [ebp+var_C8] +
push eax  +
push 100h  +
push [ebp+var_B8]  +
call sub_1003C74  +
mov edi eax +
cmp edi ebx +
jl loc_100CB9D  +
mov eax [ebp+var_B8] +
mov ecx [ebp+var_CC] +
mov [ecx] eax +
mov [ebp+var_B8] ebx +
cmp esi ebx +
jz loc_100CB9D  +
mov eax [ebp+var_C8] +
mov [esi] eax +
mov esi ds:HeapFree +
cmp dword ptr [ebp+lpMem] ebx +
jz loc_100CBBB  +
push dword ptr [ebp+lpMem]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call esi  +
cmp [ebp+var_BC] ebx +
jz loc_100CBD3  +
push [ebp+var_BC]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call esi  +
cmp [ebp+var_B8] ebx +
jz loc_100CBEB  +
push [ebp+var_B8]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call esi  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1009DC4  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 120h +
mov eax dword_1010004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
xor edi edi +
mov [ebp+var_120] eax +
mov dword ptr [ebp+VersionInformation] 114h +
mov [ebp+var_11C] edi +
mov [eax] edi +
cmp ebx edi +
jz loc_100CC41  +
mov [ebx] edi +
lea eax [ebp+VersionInformation] +
push eax  +
call ds:GetVersionExW  +
test eax eax +
jnz loc_100CC6F  +
call ds:GetLastError  +
cmp eax edi +
jg loc_100CC63  +
mov esi eax +
jmp loc_100CCFD  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100CC5C  +
mov esi 200h +
push esi  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov edi eax +
test edi edi +
jnz loc_100CC90  +
mov esi 8007000Eh +
jmp loc_100CCE9  +
push dword ptr [ebp-10Ch]  +
push dword ptr [ebp-110h]  +
push dword ptr [ebp-114h]  +
push offset aMicrosoftWindo  +
push esi  +
push edi  +
call sub_100C5CE  +
mov esi eax +
add esp 18h +
test esi esi +
jl loc_100CCE9  +
test ebx ebx +
jz loc_100CCD3  +
lea eax [ebp+var_11C] +
push eax  +
push 100h  +
push edi  +
call sub_1003C74  +
mov esi eax +
test esi esi +
jl loc_100CCE9  +
mov eax [ebp+var_120] +
mov [eax] edi +
xor edi edi +
test ebx ebx +
jz loc_100CCFD  +
mov eax [ebp+var_11C] +
mov [ebx] eax +
test edi edi +
jz loc_100CCFD  +
push edi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1009DC4  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 8Ch +
mov eax dword_1010004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
mov [ebp+var_70] eax +
mov eax [ebp+arg_C] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov [ebp+var_78] eax +
mov eax [ebp+arg_10] +
mov [ebp+var_80] eax +
xor ebx ebx +
xor eax eax +
push 7  +
mov [ebp+Buffer] ax +
pop ecx  +
lea edi [ebp-22h] +
stos   +
stos   +
lea eax [ebp+pvarg] +
push eax  +
mov [ebp+pObjectName] esi +
mov [ebp+var_34] ebx +
mov [ebp+var_5C] ebx +
mov [ebp+var_58] ebx +
mov [ebp+var_3C] ebx +
mov [ebp+var_38] ebx +
mov [ebp+var_2C] ebx +
mov [ebp+var_28] ebx +
mov [ebp+bstr] ebx +
mov [ebp+var_6C] ebx +
mov [ebp+var_64] ebx +
mov [ebp+var_84] ebx +
mov [ebp+var_88] ebx +
mov [ebp+lpMem] ebx +
mov [ebp+var_54] ebx +
mov [ebp+var_60] ebx +
mov [ebp+nSize] ebx +
mov [ebp+var_8C] 10h +
mov [ebp+var_7C] ebx +
call ds:VariantInit  +
cmp esi ebx +
jz loc_100CDF4  +
cmp [ebp+var_70] ebx +
jz loc_100CDF4  +
lea eax [ebp+var_84] +
push eax  +
push 104h  +
push esi  +
call sub_1003C74  +
mov esi eax +
cmp esi ebx +
jl loc_100D714  +
cmp [ebp+var_84] ebx +
jz loc_100CDF4  +
lea eax [ebp+var_88] +
push eax  +
push 3Ch  +
push [ebp+var_70]  +
call sub_1003C74  +
mov esi eax +
cmp esi ebx +
jl loc_100D714  +
cmp [ebp+var_88] ebx +
jnz loc_100CDFE  +
mov esi 80070057h +
jmp loc_100D714  +
push 2  +
push ebx  +
call ds:CoInitializeEx  +
mov esi eax +
cmp esi ebx +
jl loc_100D714  +
lea eax [ebp+var_34] +
push eax  +
mov [ebp+var_7C] 1 +
call sub_100C4DF  +
mov esi eax +
cmp esi ebx +
jl loc_100D714  +
mov esi ds:SysAllocString +
push offset asc_1002784  +
call esi  +
mov [ebp+var_6C] eax +
cmp eax ebx +
jz loc_100D69C  +
push offset asc_100277C  +
call esi  +
mov [ebp+var_64] eax +
cmp eax ebx +
jz loc_100D69C  +
push offset aXml  +
call esi  +
mov [ebp+var_28] eax +
cmp eax ebx +
jz loc_100D69C  +
push offset aVersion1_0Enco  +
call esi  +
mov [ebp+bstr] eax +
cmp eax ebx +
jz loc_100D69C  +
mov eax [ebp+var_34] +
mov ecx [eax] +
lea edx [ebp+var_5C] +
push edx  +
push [ebp+bstr]  +
push [ebp+var_28]  +
push eax  +
call dword ptr [ecx+0D0h]  +
mov esi eax +
cmp esi ebx +
jnz loc_100D714  +
mov eax [ebp+var_34] +
mov ecx [eax] +
push ebx  +
push [ebp+var_5C]  +
push eax  +
call dword ptr [ecx+54h]  +
mov esi eax +
cmp esi ebx +
jnz loc_100D714  +
mov eax [ebp+var_5C] +
cmp eax ebx +
jz loc_100CEC0  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_5C] ebx +
cmp [ebp+var_28] ebx +
jz loc_100CED1  +
push [ebp+var_28]  +
call ds:SysFreeString  +
mov [ebp+var_28] ebx +
push [ebp+bstr]  +
call ds:SysFreeString  +
mov [ebp+bstr] ebx +
cmp [ebp+var_78] ebx +
jz loc_100CF4B  +
push [ebp+var_78]  +
call ds:SysAllocString  +
mov [ebp+var_28] eax +
cmp eax ebx +
jz loc_100D69C  +
mov eax [ebp+var_34] +
mov ecx [eax] +
lea edx [ebp+var_58] +
push edx  +
push [ebp+var_28]  +
push eax  +
call dword ptr [ecx+0C8h]  +
mov esi eax +
cmp esi ebx +
jnz loc_100D714  +
mov eax [ebp+var_34] +
mov ecx [eax] +
push ebx  +
push [ebp+var_58]  +
push eax  +
call dword ptr [ecx+54h]  +
mov esi eax +
cmp esi ebx +
jnz loc_100D714  +
cmp [ebp+var_28] ebx +
jz loc_100CF3B  +
push [ebp+var_28]  +
call ds:SysFreeString  +
mov [ebp+var_28] ebx +
mov eax [ebp+var_58] +
cmp eax ebx +
jz loc_100CF4B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_58] ebx +
push offset aTpmownerdata  +
call ds:SysAllocString  +
mov [ebp+var_28] eax +
cmp eax ebx +
jz loc_100D69C  +
mov eax [ebp+var_34] +
mov ecx [eax] +
lea edx [ebp+var_38] +
push edx  +
push [ebp+var_28]  +
push eax  +
call dword ptr [ecx+0BCh]  +
mov esi eax +
cmp esi ebx +
jnz loc_100D714  +
cmp [ebp+var_28] ebx +
jz loc_100CF8F  +
push [ebp+var_28]  +
call ds:SysFreeString  +
mov [ebp+var_28] ebx +
mov esi ds:SysAllocString +
push offset aVersion  +
call esi  +
mov [ebp+var_28] eax +
cmp eax ebx +
jz loc_100D69C  +
push offset a1_0  +
call esi  +
mov esi eax +
mov [ebp+bstr] esi +
cmp esi ebx +
jz loc_100D69C  +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantInit  +
push 8  +
pop eax  +
lea edx [ebp+var_2C] +
push edx  +
push [ebp+var_28]  +
mov word ptr [ebp+pvarg.anonymous_0] ax +
mov eax [ebp+var_34] +
mov dword ptr [ebp+pvarg.anonymous_0+8] esi +
mov ecx [eax] +
push eax  +
mov [ebp+bstr] ebx +
call dword ptr [ecx+0D4h]  +
mov esi eax +
cmp esi ebx +
jnz loc_100D714  +
mov eax [ebp+var_2C] +
mov ecx [eax] +
sub esp 10h +
mov edi esp +
lea esi [ebp+pvarg] +
movs   +
movs   +
movs   +
push eax  +
movs   +
call dword ptr [ecx+0B4h]  +
mov esi eax +
cmp esi ebx +
jnz loc_100D714  +
mov eax [ebp+var_38] +
mov ecx [eax] +
push ebx  +
push [ebp+var_2C]  +
push eax  +
call dword ptr [ecx+0C0h]  +
mov esi eax +
cmp esi ebx +
jnz loc_100D714  +
cmp [ebp+var_28] ebx +
jz loc_100D03C  +
push [ebp+var_28]  +
call ds:SysFreeString  +
mov [ebp+var_28] ebx +
mov eax [ebp+var_2C] +
cmp eax ebx +
jz loc_100D04C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_2C] ebx +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
push offset aSoftwareauthor  +
call ds:SysAllocString  +
mov [ebp+var_28] eax +
cmp eax ebx +
jz loc_100D69C  +
mov eax [ebp+var_34] +
mov ecx [eax] +
lea edx [ebp+var_2C] +
push edx  +
push [ebp+var_28]  +
push eax  +
call dword ptr [ecx+0D4h]  +
mov esi eax +
cmp esi ebx +
jnz loc_100D714  +
push ebx  +
lea eax [ebp+lpMem] +
push eax  +
call sub_100CC03  +
test eax eax +
jl loc_100D0E7  +
push [ebp+lpMem]  +
call ds:SysAllocString  +
mov [ebp+bstr] eax +
cmp eax ebx +
jz loc_100D69C  +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantInit  +
mov eax [ebp+bstr] +
mov dword ptr [ebp+pvarg.anonymous_0+8] eax +
push 8  +
pop eax  +
mov word ptr [ebp+pvarg.anonymous_0] ax +
mov eax [ebp+var_2C] +
mov ecx [eax] +
sub esp 10h +
mov edi esp +
lea esi [ebp+pvarg] +
movs   +
movs   +
movs   +
push eax  +
mov [ebp+bstr] ebx +
movs   +
call dword ptr [ecx+0B4h]  +
mov esi eax +
cmp esi ebx +
jnz loc_100D714  +
mov eax [ebp+var_38] +
mov ecx [eax] +
push ebx  +
push [ebp+var_2C]  +
push eax  +
call dword ptr [ecx+0C0h]  +
mov esi eax +
cmp esi ebx +
jnz loc_100D714  +
cmp [ebp+var_28] ebx +
jz loc_100D112  +
push [ebp+var_28]  +
call ds:SysFreeString  +
mov [ebp+var_28] ebx +
cmp [ebp+lpMem] ebx +
jz loc_100D12B  +
push [ebp+lpMem]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov [ebp+lpMem] ebx +
mov eax [ebp+var_2C] +
cmp eax ebx +
jz loc_100D13B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_2C] ebx +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
push offset aCreationdate  +
call ds:SysAllocString  +
mov [ebp+var_28] eax +
cmp eax ebx +
jz loc_100D69C  +
mov eax [ebp+var_34] +
mov ecx [eax] +
lea edx [ebp+var_2C] +
push edx  +
push [ebp+var_28]  +
push eax  +
call dword ptr [ecx+0D4h]  +
mov esi eax +
cmp esi ebx +
jnz loc_100D714  +
push ebx  +
lea eax [ebp+var_54] +
push eax  +
call sub_100C942  +
test eax eax +
jl loc_100D1D6  +
push [ebp+var_54]  +
call ds:SysAllocString  +
mov [ebp+bstr] eax +
cmp eax ebx +
jz loc_100D69C  +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantInit  +
mov eax [ebp+bstr] +
mov dword ptr [ebp+pvarg.anonymous_0+8] eax +
push 8  +
pop eax  +
mov word ptr [ebp+pvarg.anonymous_0] ax +
mov eax [ebp+var_2C] +
mov ecx [eax] +
sub esp 10h +
mov edi esp +
lea esi [ebp+pvarg] +
movs   +
movs   +
movs   +
push eax  +
mov [ebp+bstr] ebx +
movs   +
call dword ptr [ecx+0B4h]  +
mov esi eax +
cmp esi ebx +
jnz loc_100D714  +
mov eax [ebp+var_38] +
mov ecx [eax] +
push ebx  +
push [ebp+var_2C]  +
push eax  +
call dword ptr [ecx+0C0h]  +
mov esi eax +
cmp esi ebx +
jnz loc_100D714  +
cmp [ebp+var_28] ebx +
jz loc_100D201  +
push [ebp+var_28]  +
call ds:SysFreeString  +
mov [ebp+var_28] ebx +
cmp [ebp+var_54] ebx +
jz loc_100D21A  +
push [ebp+var_54]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov [ebp+var_54] ebx +
mov eax [ebp+var_2C] +
cmp eax ebx +
jz loc_100D22A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_2C] ebx +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
push offset aCreationuser  +
call ds:SysAllocString  +
mov [ebp+var_28] eax +
cmp eax ebx +
jz loc_100D69C  +
mov eax [ebp+var_34] +
mov ecx [eax] +
lea edx [ebp+var_2C] +
push edx  +
push [ebp+var_28]  +
push eax  +
call dword ptr [ecx+0D4h]  +
mov esi eax +
cmp esi ebx +
jnz loc_100D714  +
lea eax [ebp+nSize] +
push eax  +
push ebx  +
push 2  +
call GetUserNameExW  +
call ds:GetLastError  +
cmp eax 0EAh +
jnz loc_100D319  +
mov eax [ebp+nSize] +
lea eax [eax+eax+2] +
push eax  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
mov [ebp+var_60] esi +
cmp esi ebx +
jz loc_100D69C  +
lea eax [ebp+nSize] +
push eax  +
push esi  +
push 2  +
call GetUserNameExW  +
test al al +
jz loc_100D305  +
push esi  +
call ds:SysAllocString  +
mov [ebp+bstr] eax +
cmp eax ebx +
jz loc_100D69C  +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantInit  +
mov eax [ebp+bstr] +
mov dword ptr [ebp+pvarg.anonymous_0+8] eax +
push 8  +
pop eax  +
mov word ptr [ebp+pvarg.anonymous_0] ax +
mov eax [ebp+var_2C] +
mov ecx [eax] +
sub esp 10h +
mov edi esp +
lea esi [ebp+pvarg] +
movs   +
movs   +
movs   +
push eax  +
mov [ebp+bstr] ebx +
movs   +
call dword ptr [ecx+0B4h]  +
mov esi eax +
cmp esi ebx +
jnz loc_100D714  +
push [ebp+var_60]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov [ebp+var_60] ebx +
mov eax [ebp+var_38] +
mov ecx [eax] +
push ebx  +
push [ebp+var_2C]  +
push eax  +
call dword ptr [ecx+0C0h]  +
mov esi eax +
cmp esi ebx +
jnz loc_100D714  +
cmp [ebp+var_28] ebx +
jz loc_100D344  +
push [ebp+var_28]  +
call ds:SysFreeString  +
mov [ebp+var_28] ebx +
mov eax [ebp+var_2C] +
cmp eax ebx +
jz loc_100D354  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_2C] ebx +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
push offset aMachinename  +
call ds:SysAllocString  +
mov [ebp+var_28] eax +
cmp eax ebx +
jz loc_100D69C  +
mov eax [ebp+var_34] +
mov ecx [eax] +
lea edx [ebp+var_2C] +
push edx  +
push [ebp+var_28]  +
push eax  +
call dword ptr [ecx+0D4h]  +
mov esi eax +
cmp esi ebx +
jnz loc_100D714  +
cmp [ebp+var_80] ebx +
jz loc_100D39B  +
push [ebp+var_80]  +
jmp loc_100D3B4  +
lea eax [ebp+var_8C] +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
call ds:GetComputerNameW  +
test eax eax +
jz loc_100D401  +
lea eax [ebp+Buffer] +
push eax  +
call ds:SysAllocString  +
mov [ebp+bstr] eax +
cmp eax ebx +
jz loc_100D69C  +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantInit  +
mov eax [ebp+bstr] +
mov dword ptr [ebp+pvarg.anonymous_0+8] eax +
push 8  +
pop eax  +
mov word ptr [ebp+pvarg.anonymous_0] ax +
mov eax [ebp+var_2C] +
mov ecx [eax] +
sub esp 10h +
mov edi esp +
lea esi [ebp+pvarg] +
movs   +
movs   +
movs   +
push eax  +
mov [ebp+bstr] ebx +
movs   +
call dword ptr [ecx+0B4h]  +
mov esi eax +
cmp esi ebx +
jnz loc_100D714  +
mov eax [ebp+var_38] +
mov ecx [eax] +
push ebx  +
push [ebp+var_2C]  +
push eax  +
call dword ptr [ecx+0C0h]  +
mov esi eax +
cmp esi ebx +
jnz loc_100D714  +
mov eax [ebp+var_34] +
mov ecx [eax] +
push ebx  +
push [ebp+var_38]  +
push eax  +
call dword ptr [ecx+54h]  +
mov esi eax +
cmp esi ebx +
jnz loc_100D714  +
cmp [ebp+var_28] ebx +
jz loc_100D443  +
push [ebp+var_28]  +
call ds:SysFreeString  +
mov [ebp+var_28] ebx +
mov eax [ebp+var_2C] +
cmp eax ebx +
jz loc_100D453  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_2C] ebx +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
push [ebp+var_38]  +
push [ebp+var_64]  +
push [ebp+var_34]  +
call sub_100C582  +
mov esi eax +
cmp esi ebx +
jnz loc_100D714  +
push offset aTpminfo  +
call ds:SysAllocString  +
mov [ebp+var_28] eax +
cmp eax ebx +
jz loc_100D69C  +
mov eax [ebp+var_34] +
mov ecx [eax] +
lea edx [ebp+var_3C] +
push edx  +
push [ebp+var_28]  +
push eax  +
call dword ptr [ecx+0BCh]  +
mov esi eax +
cmp esi ebx +
jnz loc_100D714  +
cmp [ebp+var_28] ebx +
jz loc_100D4B9  +
push [ebp+var_28]  +
call ds:SysFreeString  +
mov [ebp+var_28] ebx +
push offset aManufacturer_0  +
call ds:SysAllocString  +
mov [ebp+var_28] eax +
cmp eax ebx +
jz loc_100D69C  +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantInit  +
mov eax [ebp+arg_8] +
push 17h  +
mov dword ptr [ebp+pvarg.anonymous_0+8] eax +
pop eax  +
lea edx [ebp+var_2C] +
push edx  +
push [ebp+var_28]  +
mov word ptr [ebp+pvarg.anonymous_0] ax +
mov eax [ebp+var_34] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0D4h]  +
mov esi eax +
cmp esi ebx +
jnz loc_100D714  +
mov eax [ebp+var_2C] +
mov ecx [eax] +
sub esp 10h +
mov edi esp +
lea esi [ebp+pvarg] +
movs   +
movs   +
movs   +
push eax  +
movs   +
call dword ptr [ecx+0B4h]  +
mov esi eax +
cmp esi ebx +
jnz loc_100D714  +
mov eax [ebp+var_3C] +
mov ecx [eax] +
push ebx  +
push [ebp+var_2C]  +
push eax  +
call dword ptr [ecx+0C0h]  +
mov esi eax +
cmp esi ebx +
jnz loc_100D714  +
mov eax [ebp+var_38] +
mov ecx [eax] +
push ebx  +
push [ebp+var_3C]  +
push eax  +
call dword ptr [ecx+54h]  +
mov esi eax +
cmp esi ebx +
jnz loc_100D714  +
cmp [ebp+var_28] ebx +
jz loc_100D567  +
push [ebp+var_28]  +
call ds:SysFreeString  +
mov [ebp+var_28] ebx +
mov eax [ebp+var_2C] +
cmp eax ebx +
jz loc_100D577  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_2C] ebx +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
mov eax [ebp+var_3C] +
cmp eax ebx +
jz loc_100D591  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_3C] ebx +
push [ebp+var_38]  +
push [ebp+var_64]  +
push [ebp+var_34]  +
call sub_100C582  +
mov esi eax +
cmp esi ebx +
jnz loc_100D714  +
mov edi ds:SysAllocString +
push offset aOwnerauth_1  +
call edi  +
mov [ebp+var_28] eax +
cmp eax ebx +
jz loc_100D69C  +
push [ebp+var_70]  +
call edi  +
mov [ebp+bstr] eax +
cmp eax ebx +
jz loc_100D69C  +
mov eax [ebp+var_34] +
mov ecx [eax] +
lea edx [ebp+var_3C] +
push edx  +
push [ebp+var_28]  +
push eax  +
call dword ptr [ecx+0BCh]  +
mov esi eax +
cmp esi ebx +
jnz loc_100D714  +
mov eax [ebp+var_3C] +
push [ebp+bstr]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+6Ch]  +
mov esi eax +
cmp esi ebx +
jnz loc_100D714  +
cmp [ebp+var_28] ebx +
jz loc_100D615  +
push [ebp+var_28]  +
call ds:SysFreeString  +
mov [ebp+var_28] ebx +
push [ebp+bstr]  +
call ds:SysStringByteLen  +
mov ecx [ebp+bstr] +
cmp eax ebx +
jz loc_100D62B  +
mov [ecx] bl +
inc ecx  +
dec eax  +
jnz loc_100D625  +
push [ebp+bstr]  +
call ds:SysFreeString  +
mov eax [ebp+var_38] +
mov ecx [eax] +
push ebx  +
push [ebp+var_3C]  +
mov [ebp+bstr] ebx +
push eax  +
call dword ptr [ecx+54h]  +
mov esi eax +
cmp esi ebx +
jnz loc_100D714  +
mov eax [ebp+var_3C] +
cmp eax ebx +
jz loc_100D65E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_3C] ebx +
push [ebp+var_38]  +
push [ebp+var_6C]  +
push [ebp+var_34]  +
call sub_100C582  +
mov esi eax +
cmp esi ebx +
jnz loc_100D714  +
mov eax [ebp+var_34] +
mov ecx [eax] +
lea edx [ebp+var_28] +
push edx  +
push eax  +
call dword ptr [ecx+88h]  +
mov esi eax +
cmp esi ebx +
jnz loc_100D714  +
push [ebp+pObjectName]  +
call edi  +
mov [ebp+bstr] eax +
cmp eax ebx +
jnz loc_100D6A3  +
mov esi 8007000Eh +
jmp loc_100D714  +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantInit  +
mov eax [ebp+bstr] +
mov dword ptr [ebp+pvarg.anonymous_0+8] eax +
push 8  +
pop eax  +
mov word ptr [ebp+pvarg.anonymous_0] ax +
mov eax [ebp+var_34] +
mov eax [eax] +
sub esp 10h +
mov edi esp +
push [ebp+var_34]  +
lea esi [ebp+pvarg] +
movs   +
movs   +
movs   +
mov [ebp+bstr] ebx +
movs   +
call dword ptr [eax+108h]  +
mov esi eax +
cmp esi ebx +
jnz loc_100D714  +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
push [ebp+pObjectName]  +
call sub_100DB58  +
mov esi eax +
cmp esi ebx +
jge loc_100D714  +
push [ebp+pObjectName]  +
call ds:DeleteFileW  +
test eax eax +
jz loc_100D709  +
push offset aAclingFailed_F  +
jmp loc_100D70E  +
push offset aAclingFailed_0  +
call ds:OutputDebugStringW  +
mov edi ds:SysFreeString +
cmp [ebp+var_28] ebx +
jz loc_100D727  +
push [ebp+var_28]  +
call edi  +
mov [ebp+var_28] ebx +
cmp [ebp+bstr] ebx +
jz loc_100D731  +
push [ebp+bstr]  +
call edi  +
cmp [ebp+var_6C] ebx +
jz loc_100D73B  +
push [ebp+var_6C]  +
call edi  +
cmp [ebp+var_64] ebx +
jz loc_100D745  +
push [ebp+var_64]  +
call edi  +
mov eax [ebp+var_34] +
cmp eax ebx +
jz loc_100D752  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_38] +
cmp eax ebx +
jz loc_100D762  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_38] ebx +
mov eax [ebp+var_3C] +
cmp eax ebx +
jz loc_100D772  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_3C] ebx +
mov eax [ebp+var_5C] +
cmp eax ebx +
jz loc_100D782  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_5C] ebx +
mov eax [ebp+var_2C] +
cmp eax ebx +
jz loc_100D792  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_2C] ebx +
mov eax [ebp+var_58] +
cmp eax ebx +
jz loc_100D7A2  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_58] ebx +
cmp [ebp+var_54] ebx +
jz loc_100D7B8  +
push [ebp+var_54]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp [ebp+lpMem] ebx +
jz loc_100D7CE  +
push [ebp+lpMem]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp [ebp+var_60] ebx +
jz loc_100D7E4  +
push [ebp+var_60]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
cmp [ebp+var_7C] ebx +
jz loc_100D7F9  +
call ds:CoUninitialize  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1009DC4  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 64h +
push ebx  +
mov ebx ds:GetProcessHeap +
push esi  +
push edi  +
push 44h  +
xor esi esi +
pop eax  +
push eax  +
push esi  +
mov [ebp+var_4] esi +
mov [ebp+hMem] esi +
mov [ebp+pTrusteeName] esi +
mov [ebp+cbName] esi +
mov [ebp+var_1C] esi +
mov [ebp+cbReferencedDomainName] esi +
mov [ebp+var_20] eax +
call ebx  +
mov edi ds:HeapAlloc +
push eax  +
call edi  +
mov [ebp+lpMem] eax +
cmp eax esi +
jz loc_100D8B8  +
lea ecx [ebp+var_20] +
push ecx  +
push eax  +
push esi  +
push 1Ah  +
call ds:CreateWellKnownSid  +
test eax eax +
jnz loc_100D86F  +
call ds:GetLastError  +
cmp eax esi +
jmp loc_100D939  +
lea eax [ebp+peUse] +
push eax  +
lea eax [ebp+cbReferencedDomainName] +
push eax  +
push esi  +
lea eax [ebp+cbName] +
push eax  +
push esi  +
push [ebp+lpMem]  +
push esi  +
call ds:LookupAccountSidW  +
call ds:GetLastError  +
cmp eax 7Ah +
jnz loc_100D862  +
mov eax [ebp+cbName] +
add eax eax +
push eax  +
push esi  +
call ebx  +
push eax  +
call edi  +
mov [ebp+pTrusteeName] eax +
cmp eax esi +
jz loc_100D8B8  +
mov eax [ebp+cbReferencedDomainName] +
add eax eax +
push eax  +
push esi  +
call ebx  +
push eax  +
call edi  +
mov [ebp+var_1C] eax +
cmp eax esi +
jnz loc_100D8C4  +
mov [ebp+var_4] 8007000Eh +
jmp loc_100D948  +
lea ecx [ebp+peUse] +
push ecx  +
lea ecx [ebp+cbReferencedDomainName] +
push ecx  +
push eax  +
lea eax [ebp+cbName] +
push eax  +
push [ebp+pTrusteeName]  +
push [ebp+lpMem]  +
push esi  +
call ds:LookupAccountSidW  +
test eax eax +
jz loc_100D862  +
mov edi ds:BuildExplicitAccessWithNameW +
push esi  +
push 4  +
push 10000000h  +
push [ebp+pTrusteeName]  +
lea eax [ebp+pListOfExplicitEntries] +
push eax  +
call edi  +
push esi  +
push 1  +
push 0C0000000h  +
push [ebp+pTrusteeName]  +
lea eax [ebp+var_44] +
push eax  +
call edi  +
lea eax [ebp+hMem] +
push eax  +
push esi  +
lea eax [ebp+pListOfExplicitEntries] +
push eax  +
push 2  +
call ds:SetEntriesInAclW  +
cmp eax esi +
jnz loc_100D939  +
push esi  +
push [ebp+hMem]  +
push esi  +
push esi  +
push 80000004h  +
push 1  +
push [ebp+pObjectName]  +
call ds:SetNamedSecurityInfoW  +
cmp eax esi +
jz loc_100D948  +
jle loc_100D945  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_4] eax +
cmp [ebp+hMem] esi +
jz loc_100D959  +
push [ebp+hMem]  +
call ds:LocalFree  +
mov [ebp+hMem] esi +
mov edi ds:HeapFree +
cmp [ebp+lpMem] esi +
jz loc_100D96D  +
push [ebp+lpMem]  +
push esi  +
call ebx  +
push eax  +
call edi  +
cmp [ebp+pTrusteeName] esi +
jz loc_100D97B  +
push [ebp+pTrusteeName]  +
push esi  +
call ebx  +
push eax  +
call edi  +
cmp [ebp+var_1C] esi +
jz loc_100D989  +
push [ebp+var_1C]  +
push esi  +
call ebx  +
push eax  +
call edi  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
xor eax eax +
mov [ebp+Luid.LowPart] ebx +
lea edi [ebp+Luid.HighPart] +
push 10h  +
stos   +
mov edi ds:GetProcessHeap +
push ebx  +
mov [ebp+var_4] ebx +
call edi  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
cmp esi ebx +
jnz loc_100D9D2  +
mov [ebp+var_4] 8007000Eh +
jmp loc_100DA38  +
lea eax [ebp+Luid] +
push eax  +
push [ebp+lpName]  +
push ebx  +
call ds:LookupPrivilegeValueW  +
test eax eax +
jz loc_100DA16  +
mov dword ptr [esi] 1 +
mov eax [ebp+Luid.LowPart] +
mov [esi+4] eax +
mov eax [ebp+Luid.HighPart] +
push ebx  +
push ebx  +
mov [esi+8] eax +
mov eax [ebp+arg_8] +
push 10h  +
neg eax  +
push esi  +
sbb eax eax +
push ebx  +
push [ebp+TokenHandle]  +
and eax 2 +
mov [esi+0Ch] eax +
call ds:AdjustTokenPrivileges  +
test eax eax +
jnz loc_100DA2D  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_100DA2A  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_4] eax +
push esi  +
push ebx  +
call edi  +
push eax  +
call ds:HeapFree  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_1010004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push edi  +
xor ebx ebx +
mov [ebp+pObjectName] eax +
lea eax [ebp+pSid] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 220h  +
push 20h  +
push 2  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
mov [ebp+TokenHandle] ebx +
mov [ebp+pSid] ebx +
mov [ebp+pIdentifierAuthority.Value] bl +
mov [ebp+pIdentifierAuthority.Value+1] bl +
mov [ebp+pIdentifierAuthority.Value+2] bl +
mov [ebp+pIdentifierAuthority.Value+3] bl +
mov [ebp+pIdentifierAuthority.Value+4] bl +
mov [ebp+pIdentifierAuthority.Value+5] 5 +
call ds:AllocateAndInitializeSid  +
test eax eax +
jnz loc_100DAB5  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_100DAB1  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
jmp loc_100DB22  +
lea eax [ebp+TokenHandle] +
push eax  +
push 20h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:OpenProcessToken  +
test eax eax +
jz loc_100DA9D  +
push esi  +
push 1  +
mov esi offset aSetakeownershi +
push esi  +
push [ebp+TokenHandle]  +
call sub_100D998  +
mov edi eax +
cmp edi ebx +
jge loc_100DAF0  +
push offset OutputString  +
call ds:OutputDebugStringW  +
jmp loc_100DB21  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+pSid]  +
push 1  +
push 1  +
push [ebp+pObjectName]  +
call ds:SetNamedSecurityInfoW  +
cmp eax ebx +
jz loc_100DB15  +
jle loc_100DB1F  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100DB1F  +
push ebx  +
push esi  +
push [ebp+TokenHandle]  +
call sub_100D998  +
mov edi eax +
pop esi  +
cmp [ebp+pSid] ebx +
jz loc_100DB33  +
push [ebp+pSid]  +
call ds:FreeSid  +
mov [ebp+pSid] ebx +
cmp [ebp+TokenHandle] ebx +
jz loc_100DB41  +
push [ebp+TokenHandle]  +
call ds:CloseHandle  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_1009DC4  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
mov esi ds:GetProcessHeap +
push edi  +
xor ebx ebx +
push 20Ah  +
push ebx  +
mov [ebp+var_4] ebx +
mov [ebp+var_C] ebx +
call esi  +
mov edi ds:HeapAlloc +
push eax  +
call edi  +
mov [ebp+lpMem] eax +
cmp eax ebx +
jnz loc_100DB95  +
mov [ebp+var_4] 8007000Eh +
jmp loc_100DC79  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+pObjectName]  +
call ds:GetFullPathNameW  +
mov ebx eax +
test ebx ebx +
ja loc_100DBC4  +
call ds:GetLastError  +
test eax eax +
jle loc_100DC57  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100DC57  +
lea eax [ebx+ebx] +
push eax  +
push 0  +
call esi  +
push eax  +
call edi  +
mov edi eax +
mov [ebp+var_C] edi +
test edi edi +
jnz loc_100DBE1  +
mov [ebp+var_4] 8007000Eh +
jmp loc_100DC5A  +
push ebx  +
push edi  +
push [ebp+pObjectName]  +
call ds:GetVolumePathNameW  +
test eax eax +
jz loc_100DBA7  +
push edi  +
call ds:GetDriveTypeW  +
cmp eax 1 +
jnz loc_100DC05  +
mov [ebp+var_4] 80004005h +
jmp loc_100DC5A  +
cmp eax 3 +
jnz loc_100DC5A  +
push 105h  +
push [ebp+lpMem]  +
xor ebx ebx +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push edi  +
call ds:GetVolumeInformationW  +
test eax eax +
jnz loc_100DC2E  +
call ds:GetLastError  +
cmp eax ebx +
jmp loc_100DBAF  +
push [ebp+lpMem]  +
push offset String1  +
call ds:lstrcmpW  +
test eax eax +
jnz loc_100DC5A  +
push [ebp+pObjectName]  +
call sub_100D811  +
mov [ebp+var_4] eax +
test eax eax +
jnz loc_100DC5A  +
push [ebp+pObjectName]  +
call sub_100DA47  +
mov [ebp+var_4] eax +
push [ebp+lpMem]  +
xor ebx ebx +
push ebx  +
call esi  +
mov edi ds:HeapFree +
push eax  +
call edi  +
cmp [ebp+var_C] ebx +
jz loc_100DC79  +
push [ebp+var_C]  +
push ebx  +
call esi  +
push eax  +
call edi  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_100DC9E  +
cmp ecx 7FFFFFFFh +
jbe loc_100DCA3  +
mov eax 80070057h +
test eax eax +
jl loc_100DCE7  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_100DCDA  +
mov edx [ebp+arg_8] +
push edi  +
mov edi 7FFFFFFEh +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_100DCD5  +
mov cl [edx+eax] +
test cl cl +
jz loc_100DCD5  +
mov [eax] cl +
inc eax  +
dec esi  +
jnz loc_100DCC1  +
pop edi  +
test esi esi +
jnz loc_100DCE0  +
dec eax  +
mov ebx 8007007Ah +
mov byte ptr [eax] 0 +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 118h +
mov eax dword_1010004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push esi  +
mov [ebp+lpDst] eax +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
xor esi esi +
push esi  +
push offset aClsidAdb880a6D  +
push 80000000h  +
call ds:RegOpenKeyExA  +
test eax eax +
jnz loc_100DDC5  +
push edi  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Src] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push esi  +
push esi  +
push [ebp+hKey]  +
mov edi 104h +
mov [ebp+cbData] edi +
mov [ebp+Type] 1 +
call ds:RegQueryValueExA  +
test eax eax +
jnz loc_100DDB4  +
cmp [ebp+Type] 2 +
mov [ebp+var_5] al +
lea eax [ebp+Src] +
jnz loc_100DD9E  +
push edi  +
push [ebp+lpDst]  +
push eax  +
call ds:ExpandEnvironmentStringsA  +
dec eax  +
lea ecx [edi-1] +
cmp ecx eax +
sbb esi esi +
inc esi  +
jmp loc_100DDB4  +
push eax  +
push edi  +
push [ebp+lpDst]  +
call sub_100DC88  +
xor ecx ecx +
test eax eax +
setnl cl  +
mov esi ecx +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov eax esi +
pop edi  +
jmp loc_100DDC7  +
xor eax eax +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1009DC4  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 108h +
mov eax dword_1010004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx dword_1010428 +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
test ecx ecx +
jnz loc_100DE5A  +
cmp dword_1010424 ecx +
jnz loc_100DE5A  +
lea eax [ebp+LibFileName] +
push eax  +
call sub_100DCF0  +
mov esi ds:LoadLibraryA +
test eax eax +
jz loc_100DE2F  +
lea eax [ebp+LibFileName] +
push eax  +
call esi  +
mov dword_1010428 eax +
mov ecx dword_1010428 +
test ecx ecx +
jnz loc_100DE5A  +
push offset LibFileName  +
call esi  +
mov ecx eax +
mov dword_1010428 ecx +
test ecx ecx +
jnz loc_100DE5A  +
mov dword_1010424 1 +
xor eax eax +
jmp loc_100DE7F  +
mov eax dword_1010420 +
test eax eax +
jnz loc_100DE75  +
push 0Fh  +
push ecx  +
call ds:GetProcAddress  +
mov dword_1010420 eax +
test eax eax +
jz loc_100DE4C  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push ebx  +
push edi  +
call eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1009DC4  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push 2  +
push 0  +
mov byte ptr [esi] 0 +
call ds:CoInitializeEx  +
test eax eax +
jl loc_100DECB  +
mov cl 1 +
jmp loc_100DED4  +
cmp eax 80010106h +
jnz loc_100DED8  +
xor cl cl +
xor eax eax +
mov [esi] cl +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push dword ptr [esi]  +
call ds:SysFreeString  +
push [ebp+arg_0]  +
call ds:SysAllocString  +
mov [esi] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
test edi edi +
jnz loc_100DF20  +
mov eax 80004003h +
jmp loc_100DF41  +
push dword ptr [esi]  +
call ds:SysStringLen  +
push eax  +
push dword ptr [esi]  +
call ds:SysAllocStringLen  +
mov [edi] eax +
neg eax  +
sbb eax eax +
and eax 7FF8FFF2h +
add eax 8007000Eh +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
and [ebp+ppObject] 0 +
push edi  +
xor eax eax +
mov word ptr [ebp+pvarg.anonymous_0] ax +
lea edi [ebp+pvarg.anonymous_0+2] +
stos   +
stos   +
stos   +
stos   +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantInit  +
lea eax [ebp+ppObject] +
push eax  +
push offset stru_1002D60  +
push 0C5h  +
push 0  +
push 0  +
push lpszPathName  +
call ADsOpenObject  +
mov edi eax +
test edi edi +
jl loc_100DFEC  +
push esi  +
push [ebp+arg_0]  +
lea ecx [ebp+arg_0] +
call loc_100B85E  +
mov eax [eax] +
mov ecx [ebp+ppObject] +
mov edx [ecx] +
lea esi [ebp+pvarg] +
push esi  +
push eax  +
push ecx  +
call dword ptr [edx+3Ch]  +
push [ebp+arg_0]  +
mov esi ds:SysFreeString +
mov edi eax +
call esi  +
test edi edi +
jl loc_100DFEB  +
cmp word ptr [ebp+pvarg.anonymous_0] 8 +
jz loc_100DFCF  +
mov edi 8031000Bh +
jmp loc_100DFEB  +
push [ebp+arg_4]  +
lea ecx [ebp+arg_0] +
push dword ptr [ebp+pvarg.anonymous_0+8]  +
call loc_100B85E  +
mov ecx eax +
call sub_100DF09  +
push [ebp+arg_0]  +
mov edi eax +
call esi  +
pop esi  +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
mov eax [ebp+ppObject] +
test eax eax +
jz loc_100E003  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
pop edi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
xor eax eax +
push ebx  +
mov word ptr [ebp+pvarg.anonymous_0] ax +
push esi  +
push edi  +
lea edi [ebp+pvarg.anonymous_0+2] +
stos   +
stos   +
stos   +
stos   +
xor eax eax +
mov word ptr [ebp+psa] ax +
lea edi [ebp+psa+2] +
stos   +
stos   +
stos   +
stos   +
mov edi ds:VariantInit +
xor ebx ebx +
lea eax [ebp+psa] +
push eax  +
mov [ebp+plUbound] ebx +
mov [ebp+rgIndices] ebx +
mov [ebp+plLbound] ebx +
mov [ebp+var_1] bl +
mov [ebp+var_2] bl +
call edi  +
push off_1010078  +
lea ecx [ebp+var_14] +
call loc_100B85E  +
mov eax [eax] +
mov ecx [ebp+arg_0] +
mov edx [ecx] +
lea esi [ebp+psa] +
push esi  +
push eax  +
push ecx  +
call dword ptr [edx+44h]  +
push [ebp+var_14]  +
mov esi eax +
call ds:SysFreeString  +
cmp esi 8000500Dh +
jz loc_100E1B0  +
cmp esi ebx +
jl loc_100E1B3  +
mov eax [ebp-2Ch] +
lea ecx [ebp+plLbound] +
push ecx  +
push 1  +
push eax  +
mov [ebp+arg_0] eax +
call ds:SafeArrayGetLBound  +
mov esi eax +
cmp esi ebx +
jl loc_100E1B3  +
lea eax [ebp+plUbound] +
push eax  +
push 1  +
push [ebp+arg_0]  +
call ds:SafeArrayGetUBound  +
mov esi eax +
cmp esi ebx +
jl loc_100E1B3  +
mov eax [ebp+plLbound] +
cmp eax [ebp+plUbound] +
mov [ebp+rgIndices] eax +
jg loc_100E1B0  +
lea eax [ebp+pvarg] +
push eax  +
call edi  +
lea eax [ebp+pvarg] +
push eax  +
lea eax [ebp+rgIndices] +
push eax  +
push [ebp+arg_0]  +
call ds:SafeArrayGetElement  +
mov esi eax +
cmp esi ebx +
jl loc_100E1B3  +
cmp word ptr [ebp+pvarg.anonymous_0] 8 +
jnz loc_100E1B3  +
mov eax off_1010024 +
mov ecx dword ptr [ebp+pvarg.anonymous_0+8] +
mov dx [ecx] +
cmp dx [eax] +
jnz loc_100E12F  +
cmp dx bx +
jz loc_100E12B  +
mov dx [ecx+2] +
cmp dx [eax+2] +
jnz loc_100E12F  +
add ecx 4 +
add eax 4 +
cmp dx bx +
jnz loc_100E109  +
xor eax eax +
jmp loc_100E134  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax ebx +
jnz loc_100E13E  +
mov [ebp+var_1] 1 +
jmp loc_100E179  +
mov eax off_1010020 +
mov ecx dword ptr [ebp+pvarg.anonymous_0+8] +
mov dx [ecx] +
cmp dx [eax] +
jnz loc_100E16C  +
cmp dx bx +
jz loc_100E168  +
mov dx [ecx+2] +
cmp dx [eax+2] +
jnz loc_100E16C  +
add ecx 4 +
add eax 4 +
cmp dx bx +
jnz loc_100E146  +
xor eax eax +
jmp loc_100E171  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax ebx +
jnz loc_100E179  +
mov [ebp+var_2] 1 +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
mov esi eax +
cmp esi ebx +
jl loc_100E1B3  +
cmp [ebp+var_1] bl +
jz loc_100E193  +
cmp [ebp+var_2] bl +
jnz loc_100E1A2  +
inc [ebp+rgIndices]  +
mov eax [ebp+rgIndices] +
cmp eax [ebp+plUbound] +
jle loc_100E0D5  +
cmp [ebp+var_1] bl +
jz loc_100E1B0  +
cmp [ebp+var_2] bl +
jz loc_100E1B0  +
xor esi esi +
jmp loc_100E1B3  +
xor esi esi +
inc esi  +
mov edi ds:VariantClear +
lea eax [ebp+psa] +
push eax  +
call edi  +
lea eax [ebp+pvarg] +
push eax  +
call edi  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
xor eax eax +
push ebx  +
mov word ptr [ebp+pvarg.anonymous_0] ax +
push esi  +
push edi  +
lea edi [ebp+pvarg.anonymous_0+2] +
stos   +
stos   +
stos   +
stos   +
xor eax eax +
mov word ptr [ebp+psa] ax +
lea edi [ebp+psa+2] +
stos   +
stos   +
stos   +
stos   +
mov edi ds:VariantInit +
xor ebx ebx +
lea eax [ebp+psa] +
push eax  +
mov [ebp+plUbound] ebx +
mov [ebp+rgIndices] ebx +
mov [ebp+plLbound] ebx +
mov [ebp+var_1] bl +
mov [ebp+var_2] bl +
call edi  +
push off_101007C  +
lea ecx [ebp+var_14] +
call loc_100B85E  +
mov eax [eax] +
mov ecx [ebp+arg_0] +
mov edx [ecx] +
lea esi [ebp+psa] +
push esi  +
push eax  +
push ecx  +
call dword ptr [edx+44h]  +
push [ebp+var_14]  +
mov esi eax +
call ds:SysFreeString  +
cmp esi 8000500Dh +
jz loc_100E374  +
cmp esi ebx +
jl loc_100E377  +
mov eax [ebp-2Ch] +
lea ecx [ebp+plLbound] +
push ecx  +
push 1  +
push eax  +
mov [ebp+arg_0] eax +
call ds:SafeArrayGetLBound  +
mov esi eax +
cmp esi ebx +
jl loc_100E377  +
lea eax [ebp+plUbound] +
push eax  +
push 1  +
push [ebp+arg_0]  +
call ds:SafeArrayGetUBound  +
mov esi eax +
cmp esi ebx +
jl loc_100E377  +
mov eax [ebp+plLbound] +
cmp eax [ebp+plUbound] +
mov [ebp+rgIndices] eax +
jg loc_100E374  +
lea eax [ebp+pvarg] +
push eax  +
call edi  +
lea eax [ebp+pvarg] +
push eax  +
lea eax [ebp+rgIndices] +
push eax  +
push [ebp+arg_0]  +
call ds:SafeArrayGetElement  +
mov esi eax +
cmp esi ebx +
jl loc_100E377  +
cmp word ptr [ebp+pvarg.anonymous_0] 8 +
jnz loc_100E377  +
mov eax off_101002C +
mov ecx dword ptr [ebp+pvarg.anonymous_0+8] +
mov dx [ecx] +
cmp dx [eax] +
jnz loc_100E2F3  +
cmp dx bx +
jz loc_100E2EF  +
mov dx [ecx+2] +
cmp dx [eax+2] +
jnz loc_100E2F3  +
add ecx 4 +
add eax 4 +
cmp dx bx +
jnz loc_100E2CD  +
xor eax eax +
jmp loc_100E2F8  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax ebx +
jnz loc_100E302  +
mov [ebp+var_1] 1 +
jmp loc_100E33D  +
mov eax off_1010030 +
mov ecx dword ptr [ebp+pvarg.anonymous_0+8] +
mov dx [ecx] +
cmp dx [eax] +
jnz loc_100E330  +
cmp dx bx +
jz loc_100E32C  +
mov dx [ecx+2] +
cmp dx [eax+2] +
jnz loc_100E330  +
add ecx 4 +
add eax 4 +
cmp dx bx +
jnz loc_100E30A  +
xor eax eax +
jmp loc_100E335  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax ebx +
jnz loc_100E33D  +
mov [ebp+var_2] 1 +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
mov esi eax +
cmp esi ebx +
jl loc_100E377  +
cmp [ebp+var_1] bl +
jz loc_100E357  +
cmp [ebp+var_2] bl +
jnz loc_100E366  +
inc [ebp+rgIndices]  +
mov eax [ebp+rgIndices] +
cmp eax [ebp+plUbound] +
jle loc_100E299  +
cmp [ebp+var_1] bl +
jz loc_100E374  +
cmp [ebp+var_2] bl +
jz loc_100E374  +
xor esi esi +
jmp loc_100E377  +
xor esi esi +
inc esi  +
mov edi ds:VariantClear +
lea eax [ebp+psa] +
push eax  +
call edi  +
lea eax [ebp+pvarg] +
push eax  +
call edi  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call ds:SysStringLen  +
push eax  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_100B003  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 8Ch +
push ebx  +
xor eax eax +
push esi  +
push edi  +
mov word ptr [ebp+pvarg.anonymous_0] ax +
lea edi [ebp+pvarg.anonymous_0+2] +
stos   +
stos   +
stos   +
stos   +
xor ebx ebx +
lea eax [ebp+pvarg] +
push eax  +
mov [ebp+lpszPathName] ebx +
mov [ebp+var_10] ebx +
mov [ebp+ppObject] ebx +
mov byte ptr [ebp+var_1] bl +
call ds:VariantInit  +
mov eax off_1010060 +
mov [ebp+var_44] eax +
mov eax off_1010064 +
mov [ebp+var_40] eax +
mov eax off_1010068 +
mov [ebp+var_3C] eax +
mov eax off_101006C +
mov [ebp+var_38] eax +
mov eax off_1010070 +
mov [ebp+var_34] eax +
mov eax off_1010074 +
mov [ebp+var_30] eax +
mov al byte_1010080 +
mov [ebp+var_8C] al +
mov eax dword_10100AC +
mov [ebp+var_88] eax +
mov eax off_1010090 +
mov [ebp+var_84] eax +
mov al byte_1010081 +
mov [ebp+var_80] al +
mov eax dword_10100A8 +
mov [ebp+var_7C] eax +
mov eax off_101008C +
mov [ebp+var_78] eax +
mov al byte_1010082 +
mov [ebp+var_74] al +
mov eax dword_10100B0 +
mov [ebp+var_70] eax +
mov eax off_1010094 +
mov [ebp+var_6C] eax +
mov al byte_1010083 +
mov edi [ebp+arg_0] +
mov [ebp+var_68] al +
mov eax dword_10100B4 +
mov [ebp+var_64] eax +
mov eax off_1010098 +
mov [ebp+var_60] eax +
mov al byte_1010084 +
mov [ebp+var_5C] al +
mov eax dword_10100B8 +
mov [ebp+var_58] eax +
mov eax off_101009C +
mov [ebp+var_54] eax +
mov al byte_1010085 +
mov [ebp+var_50] al +
mov eax dword_10100BC +
mov [ebp+var_4C] eax +
mov eax off_10100A0 +
mov [ebp+var_48] eax +
cmp edi ebx +
jnz loc_100E4CB  +
mov esi 80070057h +
jmp loc_100E6A9  +
lea eax [ebp+var_1] +
push eax  +
mov [edi] ebx +
call sub_100DEAD  +
mov esi eax +
cmp esi ebx +
jl loc_100E6A9  +
lea eax [ebp+var_10] +
push eax  +
push off_1010044  +
call sub_100DF4C  +
mov esi eax +
cmp esi ebx +
jl loc_100E6A9  +
mov [ebp+arg_0] ebx +
lea ebx [ebp+var_88] +
mov [ebp+var_14] ebx +
cmp byte ptr [ebx-4] 0 +
jz loc_100E690  +
mov eax [ebp+arg_0] +
push [ebp+eax*4+var_44]  +
lea ecx [ebp+lpszPathName] +
call sub_100DEE2  +
push [ebp+var_10]  +
lea ecx [ebp+lpszPathName] +
call sub_100E397  +
mov esi eax +
test esi esi +
jl loc_100E6A9  +
lea eax [ebp+ppObject] +
push eax  +
push offset stru_1002D60  +
push 0C5h  +
push 0  +
push 0  +
push [ebp+lpszPathName]  +
call ADsOpenObject  +
mov esi eax +
test esi esi +
jl loc_100E6E9  +
mov ebx [ebx] +
cmp ebx dword_10100A8 +
jnz loc_100E59B  +
push [ebp+ppObject]  +
call sub_100E00F  +
mov esi eax +
test esi esi +
jl loc_100E6A9  +
cmp esi 1 +
jz loc_100E593  +
push [ebp+ppObject]  +
call sub_100E1D3  +
mov esi eax +
test esi esi +
jl loc_100E6A9  +
cmp esi 1 +
jnz loc_100E67C  +
and dword ptr [edi] 0 +
jmp loc_100E6A9  +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
mov esi eax +
test esi esi +
jl loc_100E6A9  +
push off_10100A4  +
lea ecx [ebp+var_2C] +
call loc_100B85E  +
mov eax [eax] +
mov ecx [ebp+ppObject] +
mov edx [ecx] +
lea esi [ebp+pvarg] +
push esi  +
push eax  +
push ecx  +
call dword ptr [edx+3Ch]  +
push [ebp+var_2C]  +
mov esi eax +
call ds:SysFreeString  +
test esi esi +
jl loc_100E6A9  +
cmp word ptr [ebp+pvarg.anonymous_0] 3 +
jnz loc_100E6F9  +
cmp dword ptr [ebp+pvarg.anonymous_0+8] ebx +
jnz loc_100E700  +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
mov esi eax +
test esi esi +
jl loc_100E6A9  +
push off_1010088  +
lea ecx [ebp+var_28] +
call loc_100B85E  +
mov eax [eax] +
mov ecx [ebp+ppObject] +
mov edx [ecx] +
lea esi [ebp+pvarg] +
push esi  +
push eax  +
push ecx  +
call dword ptr [edx+3Ch]  +
push [ebp+var_28]  +
mov esi eax +
call ds:SysFreeString  +
test esi esi +
jl loc_100E6A9  +
cmp word ptr [ebp+pvarg.anonymous_0] 8 +
jnz loc_100E6F9  +
mov eax [ebp+var_14] +
mov ecx [eax+4] +
mov eax dword ptr [ebp+pvarg.anonymous_0+8] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100E66F  +
test dx dx +
jz loc_100E66B  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100E66F  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_100E649  +
xor eax eax +
jmp loc_100E674  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_100E700  +
mov eax [ebp+ppObject] +
test eax eax +
jz loc_100E68D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and [ebp+ppObject] 0 +
mov ebx [ebp+var_14] +
inc [ebp+arg_0]  +
add ebx 0Ch +
cmp [ebp+arg_0] 6 +
mov [ebp+var_14] ebx +
jb loc_100E505  +
mov dword ptr [edi] 1 +
mov eax [ebp+ppObject] +
test eax eax +
jz loc_100E6BA  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and [ebp+ppObject] 0 +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
cmp byte ptr [ebp+var_1] 0 +
jz loc_100E6D0  +
call ds:CoUninitialize  +
push [ebp+var_10]  +
mov edi ds:SysFreeString +
call edi  +
push [ebp+lpszPathName]  +
call edi  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 4  +
and dword ptr [edi] 0 +
cmp esi 80072030h +
jnz loc_100E6A9  +
xor esi esi +
inc esi  +
jmp loc_100E6A9  +
mov esi 8031000Bh +
jmp loc_100E6A9  +
and dword ptr [edi] 0 +
jmp loc_100E6F4  +
***
retf   +
***
retf   +
***
retf   +
***
retf   +
***
